id,title,username,language,date,content
HcwCHdbD,Untitled,Radeen10-_,Python,Saturday 5th of August 2023 06:54:39 AM CDT,"metrics_df = pd.read_json(
        ""/kaggle/working/metrics (6).json"", orient=""records"", lines=True)
mdf = metrics_df.sort_values(""iteration"")
print(mdf.tail(10).T)

# Plot loss
fig, ax = plt.subplots()

mdf1 = mdf[~mdf[""total_loss""].isna()]
ax.plot(mdf1[""iteration""], mdf1[""total_loss""], c=""C0"", label=""train"")

if ""validation_loss"" in mdf.columns:
    mdf2 = mdf[~mdf[""validation_loss""].isna()]
    ax.plot(mdf2[""iteration""], mdf2[""validation_loss""],
            c=""C1"", label=""validation"")

ax.legend()
ax.set_title(""Loss curve"")
plt.show()

# Plot Accuracy stage 0 fastrcnn
fig, ax = plt.subplots()

mdf1 = mdf[~mdf[""mask_rcnn/accuracy""].isna()]
ax.plot(mdf1[""iteration""], mdf1[""mask_rcnn/accuracy""],
        c=""C0"", label=""train"")

ax.legend()
ax.set_title(""MASKRCNN Accuracy curve"")

plt.show()

# Plot Accuracy maskrcnn

fig, ax = plt.subplots()

mdf1 = mdf[~mdf[""stage0/fast_rcnn/cls_accuracy""].isna()]
ax.plot(mdf1[""iteration""], mdf1[""stage0/fast_rcnn/cls_accuracy""],
        c=""C0"", label=""train"")

ax.legend()
ax.set_title(""FASTRCNN CLS Accuracy curve"")
plt.show()



# Plot Bounding Box regressor loss
fig, ax = plt.subplots()

mdf1 = mdf[~mdf[""loss_box_reg_stage0""].isna()]
ax.plot(mdf1[""iteration""], mdf1[""loss_box_reg_stage0""], c=""C0"", label=""train"")

ax.legend()
ax.set_title(""loss_box_reg"")
plt.show()




# Plot loss cls stage0
fig, ax = plt.subplots()

mdf1 = mdf[~mdf[""loss_cls_stage0""].isna()]
ax.plot(mdf1[""iteration""], mdf1[""loss_cls_stage0""], c=""C0"", label=""train"")

ax.legend()
ax.set_title(""loss_cls_stage0 "")
plt.show()


# Plot loss mask
fig, ax = plt.subplots()

mdf1 = mdf[~mdf[""loss_mask""].isna()]
ax.plot(mdf1[""iteration""], mdf1[""loss_mask""], c=""C0"", label=""train"")

ax.legend()
ax.set_title(""loss mask"")
plt.show()
"
wi5bMx86,data655,TestGuy1,JSON,Saturday 5th of August 2023 06:13:09 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '13de8e5ec7fb5ceb157462ad79ec3b445f3fda469f2d0202167aa4da61a70cdb3fc2ada999009a36817ea9f1449bfe4d0dc409987c648a4c8f2ee01ed7a105f219739209408c534c7202681ebece930c115771fb526c1d92f892bc0ad80b0af3946ac8b3079cbb37a634ac3358e8db49faf914ef608b3532b0449897e94ec7e6',
  otherdata: [
    'b9481b30d86da88bb3d239c3f2e20744',
    'c9935f28accfd78a149ee4cbc1a045eb',
    '800f3e69b8679fabfb2cadd01653be24',
    'd27f5b704d8110bfcf909830727f7cd8',
    'a813bdb30f67d4d6753acac090995fa0',
    'f4adf8f66306c09188227cc785d90cb8',
    'f868be10669b59c9b33ebc107162d132',
    'c50ef91f59e5a461c6447888ac4e2dab'
  ]
}"
8Ab0S5ZX,Untitled,shizaero,C++,Saturday 5th of August 2023 05:47:22 AM CDT,"#include <cassert>
#include <cstddef>
#include <string>
#include <utility>

template <typename Type>
class SingleLinkedList {
    // Узел списка
    struct Node {
        Node() = default;
        Node(const Type& val, Node* next)
            : value(val)
            , next_node(next) {
        }
        Type value;
        Node* next_node = nullptr;
    };

public:

    SingleLinkedList() = default;
    
    void PushFront(const Type& value) {
        head_.next_node = new Node(value, head_.next_node);
        ++size_;
    }
    
    void Clear() noexcept {
        while (head_.next_node != nullptr){
            auto ptr_copy = head_.next_node;
            head_.next_node -> next_node = head_.next_node;
            delete ptr_copy;
        }
        size_ = 0;
    }
    
    // Возвращает количество элементов в списке за время O(1)
    [[nodiscard]] size_t GetSize() const noexcept {
        // Заглушка. Реализуйте метод самостоятельно
        return size_;
    }

    // Сообщает, пустой ли список за время O(1)
    [[nodiscard]] bool IsEmpty() const noexcept {
        return size_ != 0 ? false : true;
    }

private:
    // Фиктивный узел, используется для вставки ""перед первым элементом""
    Node head_;
    size_t size_ = 0;
};

void Test1() {
    // Шпион, следящий за своим удалением
    struct DeletionSpy {
        DeletionSpy() = default;
        explicit DeletionSpy(int& instance_counter) noexcept
            : instance_counter_ptr_(&instance_counter)  //
        {
            OnAddInstance();
        }
        DeletionSpy(const DeletionSpy& other) noexcept
            : instance_counter_ptr_(other.instance_counter_ptr_)  //
        {
            OnAddInstance();
        }
        DeletionSpy& operator=(const DeletionSpy& rhs) noexcept {
            if (this != &rhs) {
                auto rhs_copy(rhs);
                std::swap(instance_counter_ptr_, rhs_copy.instance_counter_ptr_);
            }
            return *this;
        }
        ~DeletionSpy() {
            OnDeleteInstance();
        }

    private:
        void OnAddInstance() noexcept {
            if (instance_counter_ptr_) {
                ++(*instance_counter_ptr_);
            }
        }
        void OnDeleteInstance() noexcept {
            if (instance_counter_ptr_) {
                assert(*instance_counter_ptr_ != 0);
                --(*instance_counter_ptr_);
            }
        }

        int* instance_counter_ptr_ = nullptr;
    };

    // Проверка вставки в начало
    {
        SingleLinkedList<int> l;
        assert(l.IsEmpty());
        assert(l.GetSize() == 0u);

        l.PushFront(0);
        l.PushFront(1);
        assert(l.GetSize() == 2);
        assert(!l.IsEmpty());

        l.Clear();
        assert(l.GetSize() == 0);
        assert(l.IsEmpty());
    }

    // Проверка фактического удаления элементов
    {
        int item0_counter = 0;
        int item1_counter = 0;
        int item2_counter = 0;
        {
            SingleLinkedList<DeletionSpy> list;
            list.PushFront(DeletionSpy{item0_counter});
            list.PushFront(DeletionSpy{item1_counter});
            list.PushFront(DeletionSpy{item2_counter});

            assert(item0_counter == 1);
            assert(item1_counter == 1);
            assert(item2_counter == 1);
            list.Clear();
            assert(item0_counter == 0);
            assert(item1_counter == 0);
            assert(item2_counter == 0);

            list.PushFront(DeletionSpy{item0_counter});
            list.PushFront(DeletionSpy{item1_counter});
            list.PushFront(DeletionSpy{item2_counter});
            assert(item0_counter == 1);
            assert(item1_counter == 1);
            assert(item2_counter == 1);
        }
        assert(item0_counter == 0);
        assert(item1_counter == 0);
        assert(item2_counter == 0);
    }

    // Вспомогательный класс, бросающий исключение после создания N-копии
    struct ThrowOnCopy {
        ThrowOnCopy() = default;
        explicit ThrowOnCopy(int& copy_counter) noexcept
            : countdown_ptr(&copy_counter) {
        }
        ThrowOnCopy(const ThrowOnCopy& other)
            : countdown_ptr(other.countdown_ptr)  //
        {
            if (countdown_ptr) {
                if (*countdown_ptr == 0) {
                    throw std::bad_alloc();
                } else {
                    --(*countdown_ptr);
                }
            }
        }
        // Присваивание элементов этого типа не требуется
        ThrowOnCopy& operator=(const ThrowOnCopy& rhs) = delete;
        // Адрес счётчика обратного отсчёта. Если не равен nullptr, то уменьшается при каждом копировании.
        // Как только обнулится, конструктор копирования выбросит исключение
        int* countdown_ptr = nullptr;
    };

    {
        bool exception_was_thrown = false;
        // Последовательно уменьшаем счётчик копирований до нуля, пока не будет выброшено исключение
        for (int max_copy_counter = 5; max_copy_counter >= 0; --max_copy_counter) {
            // Создаём непустой список
            SingleLinkedList<ThrowOnCopy> list;
            list.PushFront(ThrowOnCopy{});
            try {
                int copy_counter = max_copy_counter;
                list.PushFront(ThrowOnCopy(copy_counter));
                // Если метод не выбросил исключение, список должен перейти в новое состояние
                assert(list.GetSize() == 2);
            } catch (const std::bad_alloc&) {
                exception_was_thrown = true;
                // После выбрасывания исключения состояние списка должно остаться прежним
                assert(list.GetSize() == 1);
                break;
            }
        }
        assert(exception_was_thrown);
    }
}

int main() {
    Test1();
} "
surM8ykZ,my frosted glass rework,TJK666,CSS,Saturday 5th of August 2023 05:34:34 AM CDT,":root {
  --version: ""Frosted Glass 2.0.17"";
  --TB-top: calc(var(--server-container) + var(--window-padding));
  --TB-tr-roundness: var(--window-roundness);
  --TB-position-top: var(--TB-top, var(--window-padding));
  --TB-position-right: var(--window-padding);
  --tint: rgb(var(--tint-colour), var(--tint-brightness));
  --white-half: rgb(255, 255, 255, 0.025);
  --white: rgb(255, 255, 255, 0.05);
  --white-double: rgb(255, 255, 255, 0.1);
  --white-triple: rgb(255, 255, 255, 0.15);
  --gradient: linear-gradient(var(--gradient-direction), rgb(var(--gradient-primary)), rgb(var(--gradient-secondary)));
  --gradient-20: linear-gradient(var(--gradient-direction), rgb(var(--gradient-primary), 0.2), rgb(var(--gradient-secondary), 0.2));
  --gradient-50: linear-gradient(var(--gradient-direction), rgb(var(--gradient-primary), 0.5), rgb(var(--gradient-secondary), 0.5));
  --gradient-90: linear-gradient(var(--gradient-direction), rgb(var(--gradient-primary), 0.9), rgb(var(--gradient-secondary), 0.9));
  --text-shadow: 1;
  --chat-embed: var(--background-secondary);
  --discord-green: 67, 181, 129;
  --discord-yellow: 219, 171, 9;
  --discord-red: 215, 58, 73;
  --discord-purple: 89, 54, 149;
  --discord-invisible: 117, 128, 142;
  --discord-nitro: 255, 115, 250;
  --discord-blurple: 114, 137, 218;
  --discord-spotify: 29, 185, 84;
  --discord-twitch: 89, 54, 149;
  --discord-xbox: 16, 124, 16;
  --fb-popout-image: var(--popout-modal-image, var(--popout-image));
  --fb-popout-blur: var(--popout-modal-blur, var(--popout-image-blur));
  --fb-popout-size: var(--popout-modal-size, var(--popout-image-size));
  --fb-popout-position: var(--popout-modal-position, var(--popout-image-position));
  --fb-popout-repeat: var(--popout-modal-repeat, var(--popout-image-repeat));
  --fb-overlay-image: var(--popout-modal-image, var(--overlay-image));
  --fb-overlay-blur: var(--popout-modal-blur, var(--overlay-image-blur));
  --fb-overlay-size: var(--popout-modal-size, var(--overlay-image-size));
  --fb-overlay-position: var(--popout-modal-position, var(--overlay-image-position));
  --fb-overlay-repeat: var(--popout-modal-repeat, var(--overlay-image-repeat));
}

.theme-dark {
  --header-primary: #fff;
  --header-secondary: #bbb;
  --text-normal: #fff;
  --text-default: #ddd;
  --text-muted: #aaa;
  --text-link: #00b0f4;
  --channels-default: #ddd;
  --interactive-normal: #bbb;
  --interactive-hover: #eee;
  --interactive-active: #fff;
  --interactive-muted: #777;
  --background-primary: transparent;
  --background-secondary: rgb(0, 0, 0, 0.3);
  --background-secondary-alt: transparent;
  --background-tertiary: transparent;
  --background-accent: #4f545c;
  --background-floating: transparent;
  --background-mobile-primary: #36393f;
  --background-mobile-secondary: #2f3136;
  --background-modifier-hover: rgb(255, 255, 255, 0.05);
  --background-modifier-active: rgb(255, 255, 255, 0.07);
  --background-modifier-selected: rgb(255, 255, 255, 0.1);
  --background-modifier-accent: rgb(255, 255, 255, 0.1);
  --background-mentioned: rgb(250, 166, 26, 0.05);
  --background-mentioned-hover: rgb(250, 166, 26, 0.08);
  --background-message-hover: rgb(4, 4, 5, 0.07);
  --elevation-stroke: 0 0 0 1px rgb(4, 4, 5, 0.15);
  --elevation-low: 0 1px 0 rgb(4, 4, 5, 0.2), 0 1.5px 0 rgb(6, 6, 7, 0.05), 0 2px 0 rgb(4, 4, 5, 0.05);
  --elevation-medium: 0 4px 4px rgb(0, 0, 0, 0.16);
  --elevation-high: 0 8px 16px rgb(0, 0, 0, 0.24);
  --logo-primary: #fff;
  --guild-header-text-shadow: 0 1px 1px rgb(0, 0, 0, 0.4);
  --channeltextarea-background: rgb(255, 255, 255, 0.05);
  --activity-card-background: #202225;
  --textbox-markdown-syntax: #8e9297;
  --deprecated-card-bg: rgb(0, 0, 0, 0.3);
  --deprecated-card-editable-bg: rgb(0, 0, 0, 0.3);
  --deprecated-store-bg: #36393f;
  --deprecated-quickswitcher-input-background: var(--channeltextarea-background);
  --deprecated-quickswitcher-input-placeholder: rgb(255, 255, 255, 0.5);
  --deprecated-text-input-bg: rgb(0, 0, 0, 0.1);
  --deprecated-text-input-border: rgb(0, 0, 0, 0.3);
  --deprecated-text-input-border-hover: #040405;
  --deprecated-text-input-border-disabled: #202225;
  --deprecated-text-input-prefix: #dcddde;
  --text-link: var(--link-colour);
}

#app-mount .layer-86YKbF {
  top: var(--window-padding);
  right: var(--window-padding);
  bottom: var(--window-padding);
  left: var(--window-padding);
  padding-top: 0;
  overflow: hidden;
  border-radius: var(--window-roundness);
}
#app-mount .base-2jDfDU::before {
  content: """";
  position: absolute;
  height: 5px;
  width: 100%;
  background: linear-gradient(rgba(0, 0, 0, 0.2), transparent);
  z-index: 1;
  top: 48px;
  pointer-events: none;
  -webkit-user-select: none;
     -moz-user-select: none;
          user-select: none;
}
#app-mount .botTagRegular-2HEhHi {
  background: var(--gradient);
  color: var(--text-normal);
  margin-top: 0;
}
#app-mount .botText-1fD6Qk {
  font-weight: 600;
}
#app-mount .botTagInvert-18-95s {
  color: rgb(var(--gradient-primary));
}
#app-mount .botTagInvert-18-95s .botText-1fD6Qk {
  font-weight: bold;
}

::-moz-selection {
  background: rgb(var(--gradient-primary));
  color: var(--text-normal);
}

::selection {
  background: rgb(var(--gradient-primary));
  color: var(--text-normal);
}

#app-mount .app-2CXKsg::before {
  content: ""Your version of Frosted Glass is outdated. Please redownload"";
  white-space: pre-wrap;
  display: var(--update-notice-1, block);
  color: #fff;
  text-align: center;
  padding: 10px 0;
  box-sizing: border-box;
  background: rgb(var(--discord-blurple), 0.7);
  text-shadow: 0 2px 3px rgb(0, 0, 0, var(--text-shadow));
}

::-webkit-scrollbar {
  width: 8px !important;
  height: 8px !important;
}

::-webkit-scrollbar,
::-webkit-scrollbar-track,
::-webkit-scrollbar-track-piece {
  border-color: transparent !important;
  background: transparent !important;
}

::-webkit-scrollbar-thumb {
  border-radius: 10px !important;
  border: none !important;
  background-clip: content-box !important;
  background: var(--scrollbar-colour) !important;
}

::-webkit-scrollbar-corner {
  visibility: hidden !important;
}

.scrollerThemed-2oenus.themeHidden-2yP93k .scroller-2FKFPG::-webkit-scrollbar,
.scrollerThemed-2oenus.themeHidden-2yP93k .scroller-2FKFPG::-webkit-scrollbar-corner,
.scrollerThemed-2oenus.themeHidden-2yP93k .scroller-2FKFPG::-webkit-scrollbar-thumb,
.scrollerThemed-2oenus.themeHidden-2yP93k .scroller-2FKFPG::-webkit-scrollbar-track {
  display: none !important;
}

::-webkit-input-placeholder,
body,
button,
input,
select,
textarea {
  font-family: var(--font, ""gg sans"");
}

#app-mount .tooltip-33Jwqe {
  color: var(--text-normal);
  text-align: center;
  font-weight: 600;
}
#app-mount .tooltipPrimary-2466a2 {
  background: var(--gradient);
}
#app-mount .tooltipPrimary-2466a2 .tooltipPointer-sMBQqe {
  display: none;
}

#app-mount .bg-1QIAus {
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  background: var(--background-image);
  background-position: var(--background-image-position, center);
  background-size: var(--background-image-size, cover);
}
#app-mount .bg-1QIAus::before {
  content: """";
  position: absolute;
  top: var(--window-padding);
  right: var(--window-padding);
  bottom: var(--window-padding);
  left: var(--window-padding);
  border-radius: var(--window-roundness);
  -webkit-backdrop-filter: blur(var(--background-image-blur));
          backdrop-filter: blur(var(--background-image-blur));
  box-shadow: inset 0 0 0 100vmax var(--tint);
  display: var(--background-blur-visiblity, block);
}
#app-mount [role=menu],
#app-mount .autocompleteInner-y1mjDl,
#app-mount .container-2McqkF,
#app-mount .container-enaOkj,
#app-mount .container-8Futzw,
#app-mount .contextMenu-HLZMGh:not(.scroller-2FKFPG),
#app-mount .emojiPicker-6YCk8a,
#app-mount .messagesPopoutWrap-3zryHW,
#app-mount .modal-2RrUKJ:not(.slide-2pHaq5),
#app-mount .root-1gCeng:not(.fullscreenOnMobile-1bD22y),
#app-mount .root-8LYsGj,
#app-mount .subMenuContext-2n_9YM .scrollerWrap-2lJEkd,
#app-mount section.positionContainer-3unAXC .drawerSizingWrapper-27qFHb,
#app-mount .quickswitcher-pKcM9U,
#app-mount .root-1gCeng.wrapper-2ZbzR9,
#app-mount .modalRoot-1Kx4Hb,
#app-mount .container-3JTnYm.thin-1ybCId.scrollerBase-_bVAAt,
#app-mount .popoutContainer-2wbmiM,
#app-mount .userProfileModalOuter-1FYL8T,
#app-mount .container-2O1UgZ,
#app-mount .container-18GwIk,
#app-mount .popout-TdhJ6Z {
  overflow: hidden !important;
  position: relative;
  border-radius: 3px;
}
#app-mount [role=menu]::before,
#app-mount .autocompleteInner-y1mjDl::before,
#app-mount .container-2McqkF::before,
#app-mount .container-enaOkj::before,
#app-mount .container-8Futzw::before,
#app-mount .contextMenu-HLZMGh:not(.scroller-2FKFPG)::before,
#app-mount .emojiPicker-6YCk8a::before,
#app-mount .messagesPopoutWrap-3zryHW::before,
#app-mount .modal-2RrUKJ:not(.slide-2pHaq5)::before,
#app-mount .root-1gCeng:not(.fullscreenOnMobile-1bD22y)::before,
#app-mount .root-8LYsGj::before,
#app-mount .subMenuContext-2n_9YM .scrollerWrap-2lJEkd::before,
#app-mount section.positionContainer-3unAXC .drawerSizingWrapper-27qFHb::before,
#app-mount .quickswitcher-pKcM9U::before,
#app-mount .root-1gCeng.wrapper-2ZbzR9::before,
#app-mount .modalRoot-1Kx4Hb::before,
#app-mount .container-3JTnYm.thin-1ybCId.scrollerBase-_bVAAt::before,
#app-mount .popoutContainer-2wbmiM::before,
#app-mount .userProfileModalOuter-1FYL8T::before,
#app-mount .container-2O1UgZ::before,
#app-mount .container-18GwIk::before,
#app-mount .popout-TdhJ6Z::before {
  content: """";
  background: linear-gradient(var(--tint), var(--tint)), var(--fb-overlay-image);
  background-position: var(--fb-overlay-position, center);
  background-size: var(--fb-overlay-size, cover);
  background-attachment: var(--fb-overlay-attachment, fixed);
  background-repeat: var(--fb-overlay-repeat, no-repeat);
  box-shadow: inset 0 0 0 100vmax rgb(0, 0, 0, var(--overlay-brightness, var(--popout-modal-brightness)));
  height: calc(100% + var(--fb-overlay-blur) * 5);
  width: calc(100% + var(--fb-overlay-blur) * 5);
  top: calc(var(--fb-overlay-blur) / -1 * 2.5);
  left: calc(var(--fb-overlay-blur) / -1 * 2.5);
  position: absolute;
  filter: blur(var(--fb-overlay-blur));
  transform: translate(var(--fb-overlay-blur)/-1, calc(var(--fb-overlay-blur) / -1));
  pointer-events: none;
  -webkit-user-select: none;
     -moz-user-select: none;
          user-select: none;
  z-index: -1;
}

#app-mount .lookFilled-1Gx00P.colorPrimary-3b3xI6,
#app-mount .lookGhost-2Fn_0-.colorGrey-2DXtkV,
#app-mount .lookInverted-2D7oAl.colorBrand-3pXr91,
#app-mount .lookOutlined-3sRXeN.colorPrimary-3b3xI6,
#app-mount .lookOutlined-3sRXeN.colorWhite-rEQuAQ {
  background-color: var(--white);
  color: var(--text-normal);
  border-color: transparent;
  transition: 0.2s ease;
}
#app-mount .lookFilled-1Gx00P.colorPrimary-3b3xI6:hover,
#app-mount .lookGhost-2Fn_0-.colorGrey-2DXtkV:hover,
#app-mount .lookInverted-2D7oAl.colorBrand-3pXr91:hover,
#app-mount .lookOutlined-3sRXeN.colorPrimary-3b3xI6:hover,
#app-mount .lookOutlined-3sRXeN.colorWhite-rEQuAQ:hover {
  background: var(--white-double);
}
#app-mount .lookFilled-1Gx00P.colorPrimary-3b3xI6:active,
#app-mount .lookGhost-2Fn_0-.colorGrey-2DXtkV:active,
#app-mount .lookInverted-2D7oAl.colorBrand-3pXr91:active,
#app-mount .lookOutlined-3sRXeN.colorPrimary-3b3xI6:active,
#app-mount .lookOutlined-3sRXeN.colorWhite-rEQuAQ:active {
  background: var(--white-triple);
}
#app-mount .actionRed-gYn8D3,
#app-mount .colorRed-1TFJan {
  background: rgb(var(--discord-red), 0.5);
  border: none;
  color: #fff;
  transition: 0.2s ease;
}
#app-mount .actionRed-gYn8D3:active, #app-mount .actionRed-gYn8D3:hover,
#app-mount .colorRed-1TFJan:active,
#app-mount .colorRed-1TFJan:hover {
  background: rgb(var(--discord-red));
}
#app-mount .lookFilled-1Gx00P.colorGreen-29iAKY {
  background: rgb(var(--discord-green), 0.4);
  transition: 0.2s ease;
}
#app-mount .lookFilled-1Gx00P.colorGreen-29iAKY:active, #app-mount .lookFilled-1Gx00P.colorGreen-29iAKY:hover {
  background: rgb(var(--discord-green));
}
#app-mount .lookInverted-2D7oAl.colorGreen-29iAKY {
  background: var(--white);
}
#app-mount .lookInverted-2D7oAl.colorGreen-29iAKY:hover {
  background: var(--white-double);
}
#app-mount .lookInverted-2D7oAl.colorGreen-29iAKY:active {
  background: var(--white-triple);
}
#app-mount .bd-pfbtn,
#app-mount .lookFilled-1Gx00P.colorBrand-3pXr91 {
  background: var(--gradient);
}
#app-mount .lookLink-9FtZy-.colorBrand-3pXr91 {
  color: rgb(var(--gradient-primary));
  opacity: 1;
}
#app-mount .lookOutlined-3sRXeN.colorBrand-3pXr91 {
  background: rgb(var(--discord-blurple), 0.3);
  border: transparent;
  transition: 0.2s ease;
  color: #fff;
}
#app-mount .lookOutlined-3sRXeN.colorBrand-3pXr91:active, #app-mount .lookOutlined-3sRXeN.colorBrand-3pXr91:hover {
  background: rgb(var(--discord-blurple));
}
#app-mount .bd-search-wrapper,
#app-mount .input-2g-os5:not(.searchBoxInput-3h4etz) {
  background: var(--background-secondary);
  border-color: transparent;
  color: var(--text-normal);
}
#app-mount .bd-search-wrapper::-moz-placeholder, #app-mount .input-2g-os5:not(.searchBoxInput-3h4etz)::-moz-placeholder {
  color: rgba(255, 255, 255, 0.5);
}
#app-mount .bd-search-wrapper::placeholder,
#app-mount .input-2g-os5:not(.searchBoxInput-3h4etz)::placeholder {
  color: rgba(255, 255, 255, 0.5);
}
#app-mount .bd-search::-moz-placeholder {
  color: rgba(255, 255, 255, 0.5);
}
#app-mount .bd-search::placeholder {
  color: rgba(255, 255, 255, 0.5);
}
#app-mount .item-26Dhrx {
  border: none;
  background: var(--background-secondary);
}
#app-mount .item-26Dhrx .checkbox-1ix_J3 {
  border: none;
  background: var(--white-double);
}
#app-mount .item-26Dhrx .checkbox-1ix_J3.checked-1pZh2h {
  background: var(--text-normal) !important;
}
#app-mount .item-26Dhrx[style*=""rgb(114, 137, 218)""] {
  background: var(--gradient) !important;
}
#app-mount .item-26Dhrx[style*=""rgb(114, 137, 218)""] .checkbox-1ix_J3 {
  background: var(--text-normal);
}
#app-mount .item-26Dhrx[style*=""rgb(114, 137, 218)""] polyline {
  stroke: rgb(var(--gradient-primary));
}
#app-mount .item-26Dhrx[style*=""rgb(240, 71, 71)""] .checkbox-1ix_J3, #app-mount .item-26Dhrx[style*=""rgb(250, 166, 26)""] .checkbox-1ix_J3, #app-mount .item-26Dhrx[style*=""rgb(67, 181, 129)""] .checkbox-1ix_J3 {
  background: var(--text-normal);
}
#app-mount .valueUnchecked-2lU_20 {
  background: var(--white-double);
}
#app-mount .themeDefault-24hCdX.valueChecked-m-4IJZ {
  background: var(--gradient);
}
#app-mount .checkboxElement-uwAa9F:checked + span {
  border-color: rgb(var(--gradient-primary));
  background: rgb(var(--gradient-primary));
}
#app-mount .checkbox-3s5GYZ {
  color: rgb(var(--gradient-primary));
}
#app-mount .checkbox-1ix_J3 {
  background: var(--white);
  border: none;
}
#app-mount .checkbox-1ix_J3.checked-1pZh2h {
  background: var(--gradient) !important;
  border: none !important;
}
#app-mount [class*=css][class*=control],
#app-mount .select-1Pkeg4 {
  background: var(--background-secondary);
  border-color: transparent;
}
#app-mount [class*=css][class*=placeholder] {
  color: rgba(255, 255, 255, 0.5);
  opacity: 1;
}
#app-mount .bar-1Bhnl9 {
  background: var(--white-double);
}
#app-mount .barFill-2Bh7CX {
  background: var(--gradient);
}
#app-mount .container-1nZlH6 {
  background: var(--background-secondary);
  border-color: transparent;
}

#app-mount .title-3qD0b- .searchBar-zdmu7v {
  background: var(--background-secondary);
}

#app-mount .notice-2HEN-u {
  height: 48px;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 0;
  box-shadow: none;
  padding-right: var(--TB-header-padding, 12px);
}
#app-mount .notice-2HEN-u .button-1iHNQ2 {
  top: 0;
  background: var(--white);
  border-color: transparent;
  color: #fff;
}
#app-mount .notice-2HEN-u .button-1iHNQ2:hover {
  background: var(--white-double);
}
#app-mount .notice-2HEN-u .button-1iHNQ2:active {
  background: var(--white-triple);
}
#app-mount .closeButton-30b1gR {
  right: unset;
  left: 0;
  height: 48px;
}
#app-mount .noticeStreamerMode-2TSQpg {
  background: rgb(var(--discord-twitch), 0.6);
}

#app-mount .guilds-2JjMmN {
  background-color: transparent;
}
#app-mount .guilds-2JjMmN .scrollerBase-1Pkza4 {
  background-color: rgb(0, 0, 0, var(--serverlist-brightness));
}
#app-mount .guilds-2JjMmN .scrollerBase-1Pkza4::-webkit-scrollbar {
  display: none;
}

#app-mount .guilds-2JjMmN [class*=expandedFolderBackground] {
  background: var(--white);
}
#app-mount .guilds-2JjMmN [class*=folder] {
  background: transparent;
}

#app-mount .guilds-2JjMmN .tutorialContainer-1pL9QS .childWrapper-1j_1ub {
  background: var(--gradient);
  background-color: transparent;
}
#app-mount .guilds-2JjMmN .tutorialContainer-1pL9QS .listItem-3SmSlK:first-child .wrapper-3kah-n::before {
  content: """";
  border-radius: 50%;
  position: absolute;
  background: var(--home-button-image, url(""https://gibbu.github.io/BetterDiscord-Themes/FrostedGlass/assets/discord.svg""));
  background-size: var(--home-button-size, cover);
  background-position: var(--home-button-position, center);
  background-repeat: var(--home-button-repeat, no-repeat);
  height: 100%;
  width: 100%;
  transition: 0.2s ease;
}
#app-mount .guilds-2JjMmN .tutorialContainer-1pL9QS .listItem-3SmSlK:first-child .wrapper-3kah-n.selected-1Drb7Z::before {
  border-radius: 30%;
}
#app-mount .guilds-2JjMmN .tutorialContainer-1pL9QS .homeIcon-r0w4ny {
  display: none;
}
#app-mount .guilds-2JjMmN .selected-1Drb7Z .acronym-2zrAHN {
  background: var(--white-double);
}
#app-mount .guilds-2JjMmN .acronym-2zrAHN {
  background: var(--white);
}
#app-mount .guilds-2JjMmN .acronym-2zrAHN:hover {
  background: var(--white-double);
}
#app-mount .guilds-2JjMmN [class*=circleIconButton] {
  background: var(--white);
  color: rgb(var(--gradient-primary));
}
#app-mount .guilds-2JjMmN [class*=circleIconButton].selected-ugP_am, #app-mount .guilds-2JjMmN [class*=circleIconButton]:hover {
  background: var(--white-double);
  color: var(--text-normal);
}

#app-mount .sidebar-1tnWFu {
  border-radius: 0;
  background: rgb(0, 0, 0, var(--left-brightness));
}
#app-mount .sidebar-1tnWFu .container-1NXEtd,
#app-mount .sidebar-1tnWFu .privateChannels-oVe7HL,
#app-mount .sidebar-1tnWFu .scroller-WSmht3 {
  background-color: transparent;
}
#app-mount .sidebar-1tnWFu [role=list] > div[style=""width: 100%; height: 84px; visibility: hidden;""] {
  height: 120px !important;
}

#app-mount .header-2o-2hj {
  background: transparent;
  box-shadow: none;
}
#app-mount .animatedContainer-1pJv5C {
  -webkit-mask: linear-gradient(rgba(0, 0, 0, 0.9) 60%, rgba(0, 0, 0, 0) 100%) !important;
  top: 48px;
  background: transparent;
}

#app-mount .containerDefault-YUSmu3 .modeUnread-3Cxepe .content-1gYQeQ {
  background: var(--white);
}
#app-mount .containerDefault-YUSmu3 .wrapper-1ucjTd:hover .content-1gYQeQ {
  background: var(--background-modifier-hover);
}
#app-mount .containerDefault-YUSmu3 .wrapper-1ucjTd:hover .content-1gYQeQ .icon-2W8DHg {
  color: var(--interactive-hover);
}
#app-mount .containerDefault-YUSmu3.selected-2TbFuo .content-1gYQeQ {
  background: var(--gradient) !important;
}
#app-mount .containerDefault-YUSmu3.selected-2TbFuo .content-1gYQeQ .icon-2W8DHg {
  color: var(--text-normal);
}
#app-mount .users-i_3-kL {
  background: var(--white);
  padding: 0 5px;
  width: auto;
}
#app-mount .total-3tKGEB {
  background: var(--white-double);
  padding: 0 5px;
  width: auto;
}
#app-mount .containerUserOver-SDa1HW::after {
  background: var(--gradient-20);
  border: 2px solid rgb(var(--gradient-primary));
}

#app-mount .channel-1Shao0 .selected-3veCBZ {
  background: var(--gradient);
}

#app-mount .panels-3wFtMD {
  background: transparent;
}
#app-mount .panels-3wFtMD .lookFilled-1Gx00P.colorBrand-3pXr91 {
  background: var(--white);
}
#app-mount .panels-3wFtMD .lookFilled-1Gx00P.colorBrand-3pXr91:hover {
  background: var(--white-double);
}
#app-mount .panels-3wFtMD .lookFilled-1Gx00P.colorBrand-3pXr91:active {
  background: var(--white-triple);
}
#app-mount .container-1zzFcN {
  border-bottom: none;
}

#app-mount .unread-1xRYoj {
  background: var(--gradient);
}

#app-mount .content-1jQy2l::before {
  content: none;
}
#app-mount .chat-2ZfjoI {
  background: rgb(0, 0, 0, var(--middle-brightness));
}
#app-mount .messages-3amgkR {
  background-color: transparent;
  text-shadow: 0 2px 5px rgb(0, 0, 0, var(--text-shadow));
}
#app-mount .newMessagesBar-1hF-9G {
  background: var(--gradient);
  opacity: 1;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.5);
}
#app-mount .jumpToPresentBar-1cEnH0 {
  border-radius: 8px;
  background-color: var(--white-double);
  padding-bottom: 0;
  bottom: 10px;
}
#app-mount .jumpToPresentBar-1cEnH0:hover {
  background-color: var(--white-triple);
}

#app-mount .cozy-VmLDNB .header-23xsNx {
  margin-left: 0;
  padding-left: 0;
}
#app-mount .message-G6O-Wv {
  background: transparent;
  box-shadow: none;
}
#app-mount .message-2CShn3 {
  background: transparent !important;
}
#app-mount .message-2CShn3 .reaction-1hd86g {
  background: var(--white);
}
#app-mount .message-2CShn3 .reaction-1hd86g.reactionMe-wv5HKu {
  background: var(--gradient);
}
#app-mount .message-2CShn3 .reaction-1hd86g.reactionMe-wv5HKu .reactionCount-2mvXRV {
  color: var(--text-normal);
}
#app-mount .message-2CShn3 .wrapper-2vIMkT {
  background: var(--background-secondary);
}
#app-mount .message-2CShn3 .attachment-33OFj0,
#app-mount .message-2CShn3 .wrapperAudio-1jDe0Q,
#app-mount .message-2CShn3 code {
  background-color: var(--chat-embed);
  border: none;
}
#app-mount .message-2CShn3 .embedFull-2tM8-- {
  background-color: var(--chat-embed);
}
#app-mount .hljs {
  color: var(--text-default);
}
#app-mount .mentioned-Tre-dv {
  background: var(--gradient-20) !important;
}
#app-mount .mentioned-Tre-dv::before {
  background: var(--gradient);
}
#app-mount .wrapper-1ZcZW- {
  background: var(#5f70cc5e);
  color: var(--text-normal);
}

#app-mount .form-3gdLxP {
  margin-top: 0;
}
#app-mount .form-3gdLxP .attachButton-_ACFSu {
  padding: 10px;
}
#app-mount .form-3gdLxP .placeholder-1_mJY1,
#app-mount .form-3gdLxP .slateTextArea-27tjG0 {
  padding-left: 5px;
}

#app-mount .divider-2rZFJK {
  border: none;
}
#app-mount .divider-2rZFJK .content-3spvdd {
  display: flex;
  width: 100%;
  justify-content: center;
  align-items: center;
  color: var(--text-muted);
}
#app-mount .divider-2rZFJK .content-3spvdd::before, #app-mount .divider-2rZFJK .content-3spvdd::after {
  content: """";
  flex: 1;
  height: 1px;
  display: block;
  background: var(--background-modifier-accent);
}
#app-mount .divider-2rZFJK .content-3spvdd::before {
  margin-right: 10px;
}
#app-mount .divider-2rZFJK .content-3spvdd::after {
  margin-left: 10px;
}
#app-mount .divider-2rZFJK.isUnread-3Lojb- {
  border-top: 1px solid rgb(var(--discord-red));
}

#app-mount .wrapper-1gVUIN.minimum-fXpVNc {
  background: var(--background-secondary);
}
#app-mount .centerButton-3CaNcJ {
  background: var(--white);
}
#app-mount .centerButton-3CaNcJ:hover {
  background: var(--white-double);
}
#app-mount .controlButton-2PMNom.leaveButton-2YnTyt {
  background: rgb(var(--discord-red), 0.5);
}
#app-mount .controlButton-2PMNom.leaveButton-2YnTyt:hover {
  background: rgb(var(--discord-red));
}
#app-mount .quickSelect-384d3G {
  margin-top: 10px;
}

#app-mount .container-3XgAHv {
  background: rgb(0, 0, 0, var(--middle-brightness));
}

#app-mount .container-3wLKDe {
  background: transparent;
}
#app-mount .container-2qVG6q {
  background: var(--background-secondary);
}
#app-mount .header-1Uy0p6 {
  background: var(--background-secondary);
}
#app-mount .header-1Uy0p6 .title-1v5ZfI {
  background: transparent;
}
#app-mount .pill-3pRQlO {
  background: var(--white);
  transition: 0.15s ease background;
}
#app-mount .pill-3pRQlO:hover {
  background: var(--white-double);
}

#app-mount .container-2o3qEW {
  background-color: rgb(0, 0, 0, var(--right-brightness));
}
#app-mount .members-3WRCEx {
  background: transparent;
}
#app-mount .members-3WRCEx > div {
  background: transparent;
}

#app-mount .member-2gU6Ar {
  background: transparent;
}
#app-mount .member-2gU6Ar.selected-1-Z6gm .layout-1qmrhw {
  background: var(--gradient);
}
#app-mount .member-2gU6Ar.selected-1-Z6gm .roleColor-nA7BqX {
  color: var(--text-normal) !important;
}
#app-mount .member-2gU6Ar.selected-1-Z6gm .botTagRegular-2HEhHi {
  background: var(--text-normal);
  color: rgb(var(--gradient-primary));
  margin-top: 0;
}
#app-mount .member-2gU6Ar.selected-1-Z6gm .botText-1fD6Qk {
  font-weight: 900;
}
#app-mount .member-2gU6Ar.selected-1-Z6gm .premiumIcon-1rDbWQ {
  color: var(--text-normal);
}
#app-mount .member-2gU6Ar.selected-1-Z6gm .username-3_PJ5r,
#app-mount .member-2gU6Ar.selected-1-Z6gm .activity-2EQDZv {
  color: #fff !important;
}

.colorDefault-2K3EoJ.focused-3afm-j,
.colorDefault-2K3EoJ:hover:not(.hideInteraction-1iHO1O) {
  background: var(--white);
}

#app-mount .userPopoutOuter-1OHwPL {
  box-shadow: none;
  overflow: hidden !important;
  position: relative;
  border-radius: 8px;
  opacity: 0;
  animation: fadeIn 0.3s ease forwards;
  padding: 0;
}
#app-mount .userPopoutOuter-1OHwPL::before {
  content: """";
  background: linear-gradient(var(--tint), var(--tint)), var(--fb-popout-image);
  background-position: var(--fb-popout-position, center);
  background-size: var(--fb-popout-size, cover);
  background-attachment: var(--fb-popout-attachment, revert);
  background-repeat: var(--fb-popout-repeat, no-repeat);
  box-shadow: inset 0 0 0 100vmax rgb(0, 0, 0, var(--overlay-brightness));
  height: calc(100% + var(--fb-popout-blur) * 5);
  width: calc(100% + var(--fb-popout-blur) * 5);
  top: calc(var(--fb-popout-blur) / -1 * 2.5);
  left: calc(var(--fb-popout-blur) / -1 * 2.5);
  position: absolute;
  filter: blur(var(--fb-popout-blur));
  transform: translate(var(--fb-popout-blur)/-1, calc(var(--fb-popout-blur) / -1));
  pointer-events: none;
  -webkit-user-select: none;
     -moz-user-select: none;
          user-select: none;
  z-index: -1;
}
#app-mount .userPopoutOuter-1OHwPL .userPopoutInner-nv9Y92::before {
  top: 4px;
  left: 4px;
}
#app-mount .userPopoutOuter-1OHwPL .userPopoutInner-nv9Y92:not(.userProfileInnerThemedNonPremium-2AJg-H) .avatarPositionPremiumBanner-2nq2Fy {
  top: 73px;
  left: 21px;
}
#app-mount .userPopoutOuter-1OHwPL .userPopoutInner-nv9Y92:not(.userProfileInnerThemedNonPremium-2AJg-H) .bannerSVGWrapper-2CLfzN {
  margin: 2px 4px 4px 4px;
  box-sizing: border-box;
  width: calc(100% - 8px);
  min-width: unset !important;
}
#app-mount .userPopoutOuter-1OHwPL .userPopoutInner-nv9Y92.userProfileInnerThemedNonPremium-2AJg-H .overlayBackground-2aa7wt {
  margin: 0 8px 8px;
}
#app-mount .userPopoutOuter-1OHwPL .headerNormal-T_seeN {
  background: transparent;
}
#app-mount .userPopoutOuter-1OHwPL .headerPlaying-j0WQBV {
  background: var(--gradient-50);
}
#app-mount .userPopoutOuter-1OHwPL .headerXbox-3G-4PF {
  background: rgb(var(--discord-xbox), 0.3);
}
#app-mount .userPopoutOuter-1OHwPL .headerSpotify-zpWxgT {
  background: hsl(var(--discord-spotify)/0.3);
}
#app-mount .userPopoutOuter-1OHwPL .headerStreaming-2FjmGz {
  background: rgb(var(--discord-twitch), 0.3);
}
#app-mount .userPopoutOuter-1OHwPL .wrapper-1VLyxH::after {
  border-radius: 3px;
}
#app-mount .userPopoutOuter-1OHwPL .activityName-3YXl6e,
#app-mount .userPopoutOuter-1OHwPL .headerTag-2pZJzA,
#app-mount .userPopoutOuter-1OHwPL .nameNormal-2lqVQK,
#app-mount .userPopoutOuter-1OHwPL .nameWrap-3Z4G_9,
#app-mount .userPopoutOuter-1OHwPL .textRow-1sENuL {
  color: var(--text-normal);
}
#app-mount .userPopoutOuter-1OHwPL .body-3iLsc4 {
  background: transparent;
}
#app-mount .userPopoutOuter-1OHwPL .roles-3vQPxb {
  gap: 4px;
}
#app-mount .userPopoutOuter-1OHwPL .roleRemoveButton-17oXnT {
  position: unset;
}
#app-mount .userPopoutOuter-1OHwPL .roleRemoveButton-17oXnT + .roleName-2ZJJYR {
  position: relative;
  z-index: 1;
}
#app-mount .userPopoutOuter-1OHwPL .role-2TIOKu {
  margin: 0;
  position: relative;
  border-radius: 10px;
  overflow: hidden;
  gap: 6px;
  padding: 6px;
  border: none;
}
#app-mount .userPopoutOuter-1OHwPL .roleCircle-3TFUOr {
  position: unset;
  overflow: visible;
  filter: none;
  margin: 0;
}
#app-mount .userPopoutOuter-1OHwPL .roleCircle-3TFUOr::before {
  content: """";
  position: absolute;
  inset: 0;
  background: inherit;
  opacity: 0.15;
  z-index: 0;
  pointer-events: none;
}
#app-mount .userPopoutOuter-1OHwPL .roleRemoveIcon-387wKV {
  left: 12px;
}
#app-mount .userPopoutOuter-1OHwPL .roleName-2ZJJYR {
  margin: 0;
  color: var(--text-focus);
}
#app-mount .userPopoutOuter-1OHwPL .footer-1fjuF6 {
  background: transparent;
  border: none;
}
#app-mount .userPopoutOuter-1OHwPL .quickMessage-1yeL4E {
  background: var(--background-secondary);
  border: none;
  color: var(--text-normal);
}
#app-mount .userPopoutOuter-1OHwPL .quickMessage-1yeL4E::-moz-placeholder {
  color: rgba(255, 255, 255, 0.3);
}
#app-mount .userPopoutOuter-1OHwPL .quickMessage-1yeL4E::placeholder {
  color: rgba(255, 255, 255, 0.3);
}
#app-mount .userPopoutOuter-1OHwPL .protip-YaFfgO {
  display: none;
}
#app-mount .userPopoutOuter-1OHwPL .userProfileInnerNonPremium-1XjSjn .overlayBackground-2aa7wt {
  background: var(--background-secondary);
}
#app-mount .userPopoutOuter-1OHwPL.theme-light .inputDefault-3FGxgL::-moz-placeholder {
  color: #000;
}
#app-mount .userPopoutOuter-1OHwPL.theme-light .inputDefault-3FGxgL::placeholder {
  color: #000;
}

#app-mount [role=menu] {
  box-shadow: none;
  animation: fadeIn 0.3s ease forwards;
}
#app-mount .focused-3afm-j .check-1JyqgN {
  color: #fff;
}
#app-mount .button-F9qN4n {
  background: var(--white);
}
#app-mount .button-F9qN4n.focused-3ZzkKr {
  background: var(--white-double);
  box-shadow: 0 0 0 2px rgb(var(--gradient-primary));
}

#app-mount .drawerSizingWrapper-27qFHb {
  right: 0;
  position: absolute !important;
}
#app-mount .drawerSizingWrapper-27qFHb .nav-2KnmHb {
  position: absolute;
  padding: 0 0 0 13px;
  top: 16px;
  z-index: 999;
}
#app-mount .drawerSizingWrapper-27qFHb [class*=searchBar] {
  background: var(--background-secondary);
  margin-left: 105px;
}
#app-mount .drawerSizingWrapper-27qFHb .contentWrapper-2txmjs {
  display: grid;
  grid-template-rows: auto;
  background: transparent;
}
#app-mount .drawerSizingWrapper-27qFHb [aria-selected=true] .navButton-3Mnpqt {
  background: var(--gradient);
}
#app-mount .drawerSizingWrapper-27qFHb .navButton-3Mnpqt {
  background: var(--white);
  padding: 6px 5px 7px;
}
#app-mount .drawerSizingWrapper-27qFHb .categoryFadeBlurple-1HuV1x {
  background: var(--gradient-90);
}
#app-mount .drawerSizingWrapper-27qFHb .focused-q9B2e4::after,
#app-mount .drawerSizingWrapper-27qFHb .result-3OpoO7:hover::after {
  box-shadow: inset 0 0 0 2px rgb(var(--gradient-primary));
}
#app-mount .drawerSizingWrapper-27qFHb .result-3OpoO7 {
  background-color: var(--white) !important;
}
#app-mount .drawerSizingWrapper-27qFHb .emojiItemSelected-2Lg50V {
  background: var(--white-double);
}
#app-mount .drawerSizingWrapper-27qFHb .categoryWrapper-UZ5YNj {
  background: var(--background-secondary);
}
#app-mount .drawerSizingWrapper-27qFHb .category-3Xkx2x {
  color: var(--text-normal);
}

.emojiPicker-6YCk8a {
  box-shadow: none;
  background: transparent;
  animation: fadeIn 0.3s ease forwards;
}
.emojiPicker-6YCk8a [class*=header] {
  box-shadow: none;
}
.emojiPicker-6YCk8a .searchBar-2M9mRP {
  background: var(--background-secondary);
}

#app-mount #guild-header-popout .item-1tOPte.colorPremium-p4p7qO {
  color: rgb(var(--discord-nitro));
}
#app-mount #guild-header-popout .item-1tOPte.colorPremium-p4p7qO .icon-LYJorE {
  color: rgb(var(--discord-nitro));
}
#app-mount #guild-header-popout .item-1tOPte.colorBrand-ROmMP1 {
  color: rgb(var(--discord-blurple));
}
#app-mount #guild-header-popout .item-1tOPte.colorBrand-ROmMP1 .icon-LYJorE {
  color: rgb(var(--discord-blurple));
}
#app-mount #guild-header-popout .item-1tOPte.colorDanger-2qLCe1 {
  color: rgb(var(--discord-red));
}
#app-mount #guild-header-popout .item-1tOPte.colorDanger-2qLCe1 .icon-LYJorE {
  color: rgb(var(--discord-red));
}

#app-mount .container-2McqkF {
  background: transparent;
  box-shadow: none;
}
#app-mount .container-2McqkF .displayedNick-2dDbfG,
#app-mount .container-2McqkF .filter-5YbOzJ,
#app-mount .container-2McqkF .header-3A13BX {
  color: var(--text-normal);
}
#app-mount .container-2McqkF .answer-2fBfuP,
#app-mount .container-2McqkF .displayUsername-14aOpK {
  color: var(--text-muted);
}
#app-mount .container-2McqkF .option-2KkUJO .plusIcon-2V7coV {
  color: var(--text-normal);
}
#app-mount .container-2McqkF .option-2KkUJO.selected-rZcOL- {
  background: var(--white);
}
#app-mount .container-2McqkF .option-2KkUJO.selected-rZcOL-::after {
  background: linear-gradient(90deg, transparent, var(--white-double));
}
#app-mount .container-2McqkF .option-2KkUJO::after {
  background: transparent;
}
#app-mount .container-2McqkF .react-datepicker,
#app-mount .container-2McqkF .react-datepicker__header {
  background: transparent;
}
#app-mount .container-2McqkF .react-datepicker__month {
  background: var(--background-secondary);
  border-radius: 3px;
}
#app-mount .container-2McqkF .react-datepicker__day {
  border-color: var(--white);
  background: var(--white);
}
#app-mount .container-2McqkF .react-datepicker__day--selected::after {
  background: var(--gradient);
}
#app-mount .container-2McqkF .react-datepicker__day--disabled,
#app-mount .container-2McqkF .react-datepicker__day--outside-month {
  background: transparent;
}
#app-mount .searchAnswer-23w-CH {
  background: var(--white);
  margin-left: 0;
}
#app-mount .searchFilter-2UfsDk {
  background: var(--white);
}

#app-mount .autocomplete-3NRXG8 {
  box-shadow: none;
}
#app-mount .autocomplete-3NRXG8 .selectorSelected-1_M1WV {
  background: var(--white);
}
#app-mount .autocomplete-3NRXG8 .divider-1bJsnZ {
  background-color: var(--white);
}
#app-mount .autocomplete-3NRXG8 .description-11DmNu,
#app-mount .autocomplete-3NRXG8 .descriptionUsername-J_75O8 {
  color: var(--text-normal);
}
#app-mount .autocomplete-3NRXG8 .descriptionDiscriminator-tCKMLV {
  color: var(--text-muted);
}

#app-mount .messagesPopoutWrap-1MQ1bW {
  box-shadow: none;
}

#app-mount .container-enaOkj {
  background: var(--background-secondary);
  margin: 0 10px 10px;
  border-radius: 3px;
  padding: 0;
  overflow: hidden;
}
#app-mount .channelHeader-DFRX8q {
  background: transparent;
  padding: 15px 15px 0;
  height: auto;
  position: static;
}
#app-mount .channelHeader-DFRX8q .tertiary-1e-lAP,
#app-mount .channelHeader-DFRX8q .item-3XjbnG.selected-g-kMVV {
  background: var(--white);
}
#app-mount .channelHeader-DFRX8q .tertiary-1e-lAP:hover,
#app-mount .channelHeader-DFRX8q .item-3XjbnG.selected-g-kMVV:hover {
  background: var(--white-double);
}
#app-mount .container-iA3Qrz {
  margin: 0 16px 16px;
  padding: 0;
  border-radius: 3px;
  box-sizing: border-box;
  background: var(--white);
}
#app-mount .messageContainer-3VTXBC {
  padding: 15px 15px 15px 0;
  box-sizing: border-box;
}

#app-mount .container-2O1UgZ .container-2oNtJn {
  background: var(--white);
}

#app-mount .container-2rzKKA {
  border: none;
  background: var(--white);
}
#app-mount .container-2rzKKA:hover {
  background: var(--white-double);
}

#app-mount .modal-3c3bKg {
  transform: scale(1) translateZ(0px) !important;
  animation: fadeInTop 0.3s ease forwards !important;
}
#app-mount .modal-2RrUKJ {
  background-color: transparent;
  box-shadow: none;
}
#app-mount .modal-2RrUKJ .cardWarning-2yPNAa {
  background-color: rgb(var(--discord-yellow), 0.2);
  border: 2px solid rgb(var(--discord-yellow));
}
#app-mount .modal-2RrUKJ .footer-1Ip3Sd {
  box-shadow: none;
  background: var(--background-secondary);
}
#app-mount .footer-2gL1pp {
  background: var(--background-secondary);
  box-shadow: none;
}

#app-mount .userProfileModalOuter-1FYL8T {
  background: transparent;
}
#app-mount .userProfileModalOuter-1FYL8T .userProfileInnerNonPremium-1XjSjn .body-_QAKrE {
  background: var(--background-secondary);
}
#app-mount .userProfileModalOuter-1FYL8T .userProfileInnerWithBanner-3CJ1Og {
  background: transparent;
}
#app-mount .userProfileModalOuter-1FYL8T .userProfileInnerWithBanner-3CJ1Og::before {
  background: linear-gradient(var(--profile-gradient-primary-color), var(--profile-gradient-primary-color) 120px, var(--profile-gradient-secondary-color));
  opacity: 0.25;
}
#app-mount .userProfileModalOuter-1FYL8T .topSectionNormal-2-vo2m {
  background: var(--background-secondary);
}
#app-mount .userProfileModalOuter-1FYL8T .topSectionSpotify-1lI0-P {
  background: hsl(var(--discord-spotify)/0.3);
}
#app-mount .userProfileModalOuter-1FYL8T .topSectionPlaying-1J5E4n {
  background: var(--gradient-50);
}
#app-mount .userProfileModalOuter-1FYL8T .topSectionStreaming-1Tpf5X {
  background: rgb(var(--discord-twitch), 0.3);
}
#app-mount .userProfileModalOuter-1FYL8T .topSectionXbox-3fWLjS {
  background: rgb(var(--discord-xbox), 0.3);
}
#app-mount .userProfileModalOuter-1FYL8T .svg-2azL_l {
  z-index: 1;
}
#app-mount .userProfileModalOuter-1FYL8T .body-3ND3kc {
  background: transparent;
}
#app-mount .userProfileModalOuter-1FYL8T .tabBarContainer-1s1u-z {
  border: none;
}
#app-mount .userProfileModalOuter-1FYL8T .userInfoSection-2acyCx {
  border: none;
}
#app-mount .userProfileModalOuter-1FYL8T .connectedAccount-36nQx7 {
  background: var(--background-secondary);
  border: none;
}

#app-mount .uploadModal-2ifh8j {
  position: relative;
  box-shadow: none;
}
#app-mount .uploadModal-2ifh8j .inner-3nWsbo {
  margin: 0;
  position: relative;
  z-index: 2;
}
#app-mount .uploadModal-2ifh8j .footer-3mqk7D {
  background: transparent;
  box-shadow: none;
  position: relative;
  z-index: 2;
}
#app-mount .uploadModal-2ifh8j::before {
  content: """";
  position: absolute;
  background: var(--fb-popout-modal-image) center/cover fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 0;
  pointer-events: none;
  border-radius: 5px;
}
#app-mount .uploadModal-2ifh8j::after {
  content: """";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  border-radius: 3px;
  background: rgb(0, 0, 0, var(--popout-modal-brightness));
  box-shadow: var(--tint);
  z-index: 1;
  -webkit-backdrop-filter: blur(var(--fb-popout-modal-image));
          backdrop-filter: blur(var(--fb-popout-modal-image));
}

#app-mount .root-1gCeng {
  box-shadow: none;
  background: transparent;
}
#app-mount .root-1gCeng .colorHeaderPrimary-jN_yGr {
  color: #fff;
}
#app-mount .root-1gCeng .colorHeaderSecondary-g5teka {
  color: #ddd;
}
#app-mount .root-1gCeng .container-UC8Ug1,
#app-mount .root-1gCeng .lookFilled-1Gx00P.colorGrey-2DXtkV {
  background: rgba(255, 255, 255, 0.1);
}
#app-mount .root-1gCeng .container-UC8Ug1:hover,
#app-mount .root-1gCeng .lookFilled-1Gx00P.colorGrey-2DXtkV:hover {
  background: rgba(255, 255, 255, 0.15);
}
#app-mount .root-1gCeng .colorStandard-21JIj7 {
  color: #fff;
}
#app-mount .root-1gCeng .footer-2gL1pp {
  background: rgba(0, 0, 0, 0.2);
}
#app-mount .root-1gCeng .backButton-iA7KIs {
  color: #ddd;
}
#app-mount .root-1gCeng .backButton-iA7KIs:hover {
  color: #fff;
}
#app-mount .root-1gCeng .input--jS-j2 {
  background: transparent;
}
#app-mount .root-1gCeng .input-2g-os5 {
  background: rgba(255, 255, 255, 0.1);
  color: #fff;
}
#app-mount .root-1gCeng .sampleLink-2NLvZg {
  color: #ddd;
}

#app-mount .quickswitcher-pKcM9U {
  box-shadow: none;
  padding: 20px;
}
#app-mount .quickswitcher-pKcM9U .scrollerOuter-3FLELE {
  margin-top: 10px;
  margin-right: 0;
  border-radius: 3px;
}
#app-mount .quickswitcher-pKcM9U .scroller-2qwVWY {
  padding: 10px 5px 10px 10px;
  box-sizing: border-box;
}
#app-mount .quickswitcher-pKcM9U .scroller-2qwVWY > div[style*=""width: 100%;""] {
  display: none;
}
#app-mount .quickswitcher-pKcM9U .protip-1jXzAl {
  display: none;
}

#app-mount .modalRoot-1Kx4Hb .header-1TKi98 {
  padding-top: 150px;
}
#app-mount .modalRoot-1Kx4Hb .art-347BZj {
  position: absolute;
  transform: translate(-50%, 20px);
  width: 150px;
}
#app-mount .modalRoot-1Kx4Hb .header-3C6qT5 {
  padding-top: 0;
}

#app-mount .scroller-2GkvCq,
#app-mount .reactors-1VXca7 {
  background: transparent;
}

#app-mount .image-3HC6rC {
  filter: grayscale(1);
  opacity: 0.5;
}
#app-mount .container-36u7Lw {
  background: rgb(0, 0, 0, var(--middle-brightness));
}

#app-mount .content-1SgpWY .discoverHeader-1TWTqG {
  margin: 0 0 10px;
  height: 48px;
  display: flex;
  align-items: center;
  padding-left: 10px;
}
#app-mount .content-1SgpWY .categoryItem-3zFJns.selected-1-Z6gm .itemInner-3gVXMG {
  background: var(--gradient);
}
#app-mount .content-1SgpWY .pageWrapper-2PwDoS {
  background: rgb(0, 0, 0, var(--middle-brightness));
}
#app-mount .content-1SgpWY .pageWrapper-2PwDoS .scrollerWrap-2lJEkd {
  margin-top: 48px;
  margin-bottom: 48px;
}
#app-mount .content-1SgpWY .card-2TuZPZ {
  background: var(--background-secondary);
}
#app-mount .content-1SgpWY .card-2TuZPZ:hover {
  box-shadow: none;
}
#app-mount .content-1SgpWY .footer-26kPv_ {
  opacity: 0;
  pointer-events: none;
}

#app-mount .container-2cd8Mz {
  background: rgb(0, 0, 0, var(--middle-brightness));
}
#app-mount .container-2cd8Mz .inset-SbsSFp {
  background-color: var(--background-secondary);
}
#app-mount .container-2cd8Mz .itemCard-3Etziu:hover {
  background: var(--white);
}
#app-mount .container-2cd8Mz .nowPlayingColumn-1eCBCN {
  background: rgb(0, 0, 0, var(--right-brightness));
}

#app-mount .perksModal-fSYqOq {
  background-color: rgb(0, 0, 0, var(--middle-brightness));
  background-image: none;
  margin: var(--window-padding);
  border-radius: var(--window-roundness);
}
#app-mount .tierWrapper-W9ajqp {
  box-shadow: none !important;
}
#app-mount .ctaBar-2UsjF2,
#app-mount .tier-12tKuZ {
  background: var(--background-secondary);
}
#app-mount .tierHeader---JJFb {
  background-color: var(--background-secondary);
  color: var(--text-normal);
}
#app-mount .tierLock-3CSxSX {
  color: var(--text-normal);
}
#app-mount .tierBody-16Chc9 {
  background: transparent;
}
#app-mount .perk-2WeBWW {
  background-color: var(--background-secondary);
}

#app-mount .applicationStore-2nk7Lo {
  background: rgb(0, 0, 0, var(--middle-brightness));
}

#app-mount .layer-86YKbF:not(.baseLayer-W6S8cY) .standardSidebarView-E9Pc3j {
  top: 0;
}
#app-mount .layer-86YKbF:not(.baseLayer-W6S8cY) .sidebarRegionScroller-FXiQOh {
  background-color: rgb(0, 0, 0, var(--left-brightness));
}
#app-mount .layer-86YKbF:not(.baseLayer-W6S8cY) .multiInput-1e2xJ7 .input-2g-os5 {
  background: transparent;
}
#app-mount .layer-86YKbF:not(.baseLayer-W6S8cY) .description-3_Ncsb,
#app-mount .layer-86YKbF:not(.baseLayer-W6S8cY) .h5-18_1nd:not(.isEnabled-2qCZy8),
#app-mount .layer-86YKbF:not(.baseLayer-W6S8cY) .labelDescriptor-1PqHgD,
#app-mount .layer-86YKbF:not(.baseLayer-W6S8cY) .viewBody-2Qz-jg {
  color: var(--text-normal);
}
#app-mount .layer-86YKbF:not(.baseLayer-W6S8cY) .info-3pQQBb .colorMuted-20987_:first-child::before {
  content: var(--version);
  display: block;
}

#app-mount .layer-86YKbF:not(.baseLayer-W6S8cY) .authedApp-8q3NA9 {
  background: var(--background-secondary);
}
#app-mount .layer-86YKbF:not(.baseLayer-W6S8cY) .connection-YOVI9j {
  position: relative;
  overflow: hidden;
  box-shadow: none;
}
#app-mount .layer-86YKbF:not(.baseLayer-W6S8cY) .connection-YOVI9j .integration-3kMeY4 {
  background: var(--white);
  border: none;
}
#app-mount .layer-86YKbF:not(.baseLayer-W6S8cY) .connectionHeader-2rV1ze {
  background: transparent;
  border: none;
  margin-bottom: 0;
}
#app-mount .layer-86YKbF:not(.baseLayer-W6S8cY) .connectionDelete-XXTMqE {
  border: none;
  background: var(--white);
  transition: 0.2s ease;
}
#app-mount .layer-86YKbF:not(.baseLayer-W6S8cY) .connectionDelete-XXTMqE::after, #app-mount .layer-86YKbF:not(.baseLayer-W6S8cY) .connectionDelete-XXTMqE::before {
  position: absolute;
  top: 50%;
  left: 50%;
  width: 2px;
  height: 16px;
}
#app-mount .layer-86YKbF:not(.baseLayer-W6S8cY) .connectionDelete-XXTMqE::before {
  transform: translate(-50%, -50%) rotate(45deg);
}
#app-mount .layer-86YKbF:not(.baseLayer-W6S8cY) .connectionDelete-XXTMqE::after {
  transform: translate(-50%, -50%) rotate(-45deg);
}
#app-mount .layer-86YKbF:not(.baseLayer-W6S8cY) .connectionDelete-XXTMqE span {
  display: none;
}
#app-mount .layer-86YKbF:not(.baseLayer-W6S8cY) .connectionDelete-XXTMqE:hover {
  background: var(--white-double);
}
#app-mount .layer-86YKbF:not(.baseLayer-W6S8cY) .connectionDelete-XXTMqE:active {
  background: var(--white-triple);
}
#app-mount .layer-86YKbF:not(.baseLayer-W6S8cY) .card-2ART2V::before {
  border-color: transparent;
  background: var(--white);
}
#app-mount .layer-86YKbF:not(.baseLayer-W6S8cY) .game-3x3aDt {
  box-shadow: 0 1px 0 0 var(--background-modifier-accent);
}
#app-mount .layer-86YKbF:not(.baseLayer-W6S8cY) .item-3eFBNF {
  box-shadow: inset 0 -1px 0 0 var(--background-modifier-accent);
}

#app-mount .contentRegion-3HkfJJ {
  background: rgb(0, 0, 0, var(--middle-brightness));
}
#app-mount .auditLog-3jNbM6 {
  border: none;
  border-radius: 3px;
  overflow: hidden;
}
#app-mount .header-GwIGlr {
  background: var(--background-secondary);
}
#app-mount .timestamp-1mruiI {
  color: var(--text-muted);
}
#app-mount .divider-1pnAR2 {
  display: none;
}
#app-mount .changeDetails-bk98pu {
  background: var(--background-secondary);
}

#app-mount #bd-settingspane-container h3 {
  color: var(--text-normal);
}
#app-mount #bd-settingspane-container .style-description {
  color: var(--text-default);
  border-color: var(--background-modifier-accent);
}

#app-mount #bd-settings-sidebar .ui-tab-bar-item {
  color: var(--text-muted);
}
#app-mount #bd-settings-sidebar .ui-tab-bar-item:hover {
  color: var(--text-normal);
  background-color: var(--background-modifier-hover);
}
#app-mount #bd-settings-sidebar .ui-tab-bar-item.selected {
  background: var(--background-modifier-selected);
  color: var(--text-normal);
}

html.platform-win .scroller-2TZvBN {
  padding-top: 10px;
}

html.platform-osx .macButtons-2MuSAC {
  position: absolute;
  top: var(--window-padding);
  left: var(--window-padding);
  background: rgb(0, 0, 0, var(--serverlist-brightness));
  width: 72px;
  border-top-left-radius: var(--window-roundness);
}
html.platform-osx .wrapper-1Rf91z {
  margin-top: 30px;
}
html.platform-osx .scroller-2TZvBN {
  padding-top: 15px;
}

#app-mount .xenoLib-notifications {
  padding: calc(var(--window-padding) * 2 + 48px) calc(var(--window-padding) * 2) calc(var(--window-padding) * 2) calc(var(--window-padding) * 2);
  box-sizing: border-box;
}
#app-mount .xenoLib-notification:not(:only-child) {
  margin-bottom: 15px;
}
#app-mount .xenoLib-notification-content-wrapper {
  padding: 0;
  box-sizing: border-box;
  z-index: 10;
}

@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}
@keyframes fadeInTop {
  from {
    opacity: 0;
    transform: translateY(-10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}"
3mwHzQ2M,frosted glass tjk theme,TJK666,CSS,Saturday 5th of August 2023 05:32:50 AM CDT,"/**
* @name Frosted-Glass
* @version Auto Update
* @description pro
* @author frosted glass
* @invite ZHthyCw
* @Source https://github.com/DiscordStyles/FrostedGlass
* @website https://betterdiscord.app/theme/Frosted%20Glass
*/

@import url(""https://pastebin.com/raw/surM8ykZ"");
@import url('https://fonts.googleapis.com/css2?family=Inter');	
:root {
--background-image: url('https://i.imgur.com/iHegLJC.png');
--background-image-blur: 2px;
--background-image-size: cover;
--background-image-position: bottom;
--popout-modal-image: url('https://i.imgur.com/iHegLJC.png'); /* https://i.imgur.com/iHegLJC.png */
--popout-modal-blur: 8px;
--popout-modal-size: cover;
--popout-modal-position: center;
--home-button-image: url('https://i.imgur.com/KQwayQM.png');
--home-button-size: cover;
--home-button-position: center;
--serverlist-brightness: 0.8;
--left-brightness: 0.7;
--middle-brightness: 0.6;
--right-brightness: 0;
--popout-modal-brightness: 0.75;
--gradient-primary: 83, 77, 136;
--gradient-secondary: 96, 79, 122;
--gradient-direction: 45deg;
--tint-colour: 70,70,70;
--tint-brightness: 0;
--window-padding: 10px;
--window-roundness: 10px;
--scrollbar-colour: #ffffff0d;
--link-colour: #00b0f4;
--show-gift-gif-buttons: no-repeat;
--font: 'Inter';
--update-notice-1: none;"
8ZYaHzx9,Reactive cooling system,squidingtin,Lua,Saturday 5th of August 2023 05:26:10 AM CDT,"R&D has worked on a new system for your ""Power Drills"".
This modification allows for your drills to cool faster while
drilling though the thick ice caps on Hoxxes.
Sadly R&D has yet to find a way to prevent excessive
overheating while drilling though those hotter climates.


Drilling though ice caps removes 0.4 heat 
per second from the Heat Meter.

Drilling in hotter climates increases your 
overheat meter by 0.3 per second."
xXmsiqme,Untitled,raya_petkova,Python,Saturday 5th of August 2023 04:31:47 AM CDT,"from project1.client import Client
from project1.meals.meal import Meal
from project1.meals.starter import Starter
from project1.meals.main_dish import MainDish
from project1.meals.dessert import Dessert


class FoodOrdersApp:
    receipt_id = 0

    def __init__(self):
        self.menu = []
        self.clients_list = []

    def register_client(self, client_phone_number: str):
        for client in self.clients_list:
            if client.phone_number == client_phone_number:
                raise Exception(f""The client has already been registered!"")

        curr_client = Client(client_phone_number)
        self.clients_list.append(curr_client)
        return f""Client {client_phone_number} registered successfully.""

    def add_meals_to_menu(self, *meals):
        for meal in meals:
            if not meal.__class__.__name__ == ""Starter"" and not meal.__class__.__name__ == ""MainDish"" and not meal.__class__.__name__ == ""Dessert"":
                continue

            self.menu.append(meal)

    def show_menu(self):
        if len(self.menu) < 5:
            raise Exception(f""The menu is not ready!"")

        final = []

        for meal in self.menu:
            final.append(meal.details())

        return ""\n"".join(final)

    def add_meals_to_shopping_cart(self, client_phone_number: str, **meal_names_and_quantities):
        # {'Wild Mushrooms': 20}
        if len(self.menu) < 5:
            raise Exception(f""The menu is not ready!"")

        client = [c for c in self.clients_list if c.phone_number == client_phone_number]

        if not client:
            self.register_client(client_phone_number)

        curr_client = [c for c in self.clients_list if c.phone_number == client_phone_number][0]

        adding_meals = []
        for meal in meal_names_and_quantities.keys():
            c_meal = [m for m in self.menu if m.name == meal]

            if not c_meal:
                raise Exception(f""{meal} is not on the menu!"")

            curr_meal = c_meal[0]

            if meal_names_and_quantities[meal] > curr_meal.quantity:
                raise Exception(f""Not enough quantity of {curr_meal.__class__.__name__}: {meal}!"")

            adding_meals.append(curr_meal)

        for meal in adding_meals:
            curr_client.shopping_cart.append(meal)
            increase_bill = meal.price * meal_names_and_quantities[meal.name]

            meal.quantity -= meal_names_and_quantities[meal.name]
            curr_client.bill += increase_bill

        return f""Client {client_phone_number} successfully ordered {', '.join([m.name for m in curr_client.shopping_cart])} for {curr_client.bill:.2f}lv.""

    def cancel_order(self, client_phone_number: str):
        curr_client = [c for c in self.clients_list if c.phone_number == client_phone_number][0]

        if not curr_client.shopping_cart:
            raise Exception(f""There are no ordered meals!"")

        for c_meal in curr_client.shopping_cart:
            for meal in self.menu:
                if c_meal.name == meal.name:
                    meal.quantity += c_meal.quantity

        curr_client.shopping_cart = []
        curr_client.bill = 0

        return f""Client {client_phone_number} successfully canceled his order.""

    def finish_order(self, client_phone_number: str):
        curr_client = [c for c in self.clients_list if c.phone_number == client_phone_number][0]

        if not curr_client.shopping_cart:
            raise Exception(f""There are no ordered meals!"")

        paid_money = curr_client.bill

        curr_client.shopping_cart = []
        curr_client.bill = 0
        self.receipt_id += 1
        return f""Receipt #{self.receipt_id} with total amount of {paid_money:.2f} was successfully paid for {client_phone_number}.""

    def __str__(self):
        return f""Food Orders App has {len(self.menu)} meals on the menu and {len(self.clients_list)} clients.""


# food_orders_app = FoodOrdersApp()
# print(food_orders_app.register_client(""0899999999""))
# french_toast = Starter(""French toast"", 6.50, 5)
# hummus_and_avocado_sandwich = Starter(""Hummus and Avocado Sandwich"", 7.90)
# tortilla_with_beef_and_pork = MainDish(""Tortilla with Beef and Pork"", 12.50, 12)
# risotto_with_wild_mushrooms = MainDish(""Risotto with Wild Mushrooms"", 15)
# chocolate_cake_with_mascarpone = Dessert(""Chocolate Cake with Mascarpone"", 4.60, 17)
# chocolate_and_violets = Dessert(""Chocolate and Violets"", 5.20)
# print(food_orders_app.add_meals_to_menu(
#     french_toast, hummus_and_avocado_sandwich,
#     tortilla_with_beef_and_pork,
#     risotto_with_wild_mushrooms,
#     chocolate_cake_with_mascarpone,
#     chocolate_and_violets))
# print(food_orders_app.show_menu())
# food = {""Hummus and Avocado Sandwich"": 5,
#         ""Risotto with Wild Mushrooms"": 1,
#         ""Chocolate and Violets"": 4}
# print(food_orders_app.add_meals_to_shopping_cart('0899999999', **food))
# additional_food = {""Risotto with Wild Mushrooms"": 2,
#                    ""Tortilla with Beef and Pork"": 2}
# print(food_orders_app.add_meals_to_shopping_cart('0899999999', **additional_food))
# print(food_orders_app.finish_order(""0899999999""))
# print(food_orders_app)

"
Ecw6ELLu,Anime Fighting Simulator X,LuaXe,Lua,Saturday 5th of August 2023 04:20:54 AM CDT,"function S() spawn(function () while getgenv().S do
local args = {[1] = ""TrainStat"",[2] = ""Speed""}game:GetService(""ReplicatedStorage"").Events:FindFirstChild(""Stats/RemoteFunction""):InvokeServer(unpack(args)) task.wait()
local args = {[1] = ""TrainStat"",[2] = ""Strength""}game:GetService(""ReplicatedStorage"").Events:FindFirstChild(""Stats/RemoteFunction""):InvokeServer(unpack(args)) task.wait()
local args = {[1] = ""TrainStat"",[2] = ""Durability""}game:GetService(""ReplicatedStorage"").Events:FindFirstChild(""Stats/RemoteFunction""):InvokeServer(unpack(args)) task.wait()
local args = {[1] = ""TrainStat"",[2] = ""Chakra""}game:GetService(""ReplicatedStorage"").Events:FindFirstChild(""Stats/RemoteFunction""):InvokeServer(unpack(args)) task.wait()
local args = {[1] = ""TrainStat"",[2] = ""Sword""}game:GetService(""ReplicatedStorage"").Events:FindFirstChild(""Stats/RemoteFunction""):InvokeServer(unpack(args)) task.wait()
end end) end

local library = loadstring(game:HttpGet(('https://raw.githubusercontent.com/bloodball/-back-ups-for-libs/main/wall%20v3')))()

local w = library:CreateWindow(""Anime Fighting Sim X"")

local b = w:CreateFolder(""Main"")

b:Toggle(""Inf. Stats"",function(val) getgenv().S = val S() end)

b:Label(""Made by X_LuaF#0705"",{TextSize = 21; TextColor = Color3.fromRGB(255,255,255); BgColor = Color3.fromRGB(38, 38, 38);})

local w = library:CreateWindow(""LocalPlayer"")

local b = w:CreateFolder(""LP"")

b:DestroyGui()

b:Button(""Discord"",function() setclipboard(""workink.co/2GQ/LTD"") end)
b:Button(""Full Version"",function() loadstring(game:HttpGet(""https://pastebin.com/raw/GphZf9Xe"", true))() end)
b:Button(""Rejoin"",function() loadstring(game:HttpGet(""https://pastebin.com/raw/mM7JBG5h"", true))() end)
b:Button(""Reset"",function() loadstring(game:HttpGet(""https://pastebin.com/raw/EEY6SATj"", true))() end)

b:Slider(""WalkSpeed"",{min = 0; max = 10000; precise = false;},function(val) game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = val end)
b:Slider(""JumpPower"",{min = 0; max = 10000; precise = false;},function(val) game.Players.LocalPlayer.Character.Humanoid.JumpPower = val end)
b:Slider(""HipHeight"",{min = 0; max = 10000; precise = false;},function(val) game.Players.LocalPlayer.Character.Humanoid.HipHeight = val end)
b:Slider(""Gravity"",{min = 0; max = 360; precise = false;},function(val) game.workspace.Gravity = val end)
b:Slider(""FOV"",{min = 0;max = 120;precise = false;},function(val) game.workspace.CurrentCamera.FieldOfView = val end)

function TPCFrame(Player_CFrame) if game.Players.LocalPlayer.Character:FindFirstChild(""HumanoidRootPart"") then game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Player_CFrame end end
function RTPCFrame(M_CF) if game.Players.LocalPlayer.Character:FindFirstChild(""HumanoidRootPart"") then M_CF.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame end end
function PHP(Player_HP) if game.Players.LocalPlayer.Character:FindFirstChild(""Humanoid"") then game.Players.LocalPlayer.Character.Humanoid.Health = Player_HP end end"
8C6QKYMZ,Tooltip_RU.txt,Redison86,Lua,Saturday 5th of August 2023 04:06:16 AM CDT,"Tooltip_RU = {

	Tooltip_AutoGate_AutomaticGateMotor = ""Автоматические ворота с двигателем"",
	Tooltip_AutoGate_InstallComponents = ""Установка мотора автоматических ворот"",
	Tooltip_AutoGate_InstallComponentsDescription = ""Ворота с установленным автоматическим приводом ворот можно открывать/закрывать удаленно с помощью подключенного контроллера автоматических ворот."",
	Tooltip_AutoGate_Connecting = ""Подключение контроллера автоматических ворот"",
	Tooltip_AutoGate_ConnectingDescription = ""Подключение автоматического контроллера ворот к этим воротам позволяет удаленно открывать/закрывать ворота."",
	Tooltip_AutoGate_Copy = ""Копирование частот контроллера автоматических ворот"",
	Tooltip_AutoGate_CopyDescription = ""Копирует частоту выбранного контроллера автоматических ворот на другой контроллер."",
	Tooltip_AutoGate_Open = ""Использование автоматического контроллера ворот"",
	Tooltip_AutoGate_OpenDescription = ""Переключает текущие подключенные автоматические ворота."",
	Tooltip_AutoGate_LockGate = ""Запиреть автоматические ворота"",
	Tooltip_AutoGate_LockGateDescription = ""Блокирует вортоа, которые: <LINE> выбраны или: <LINE> подключены к выбранному контроллеру."",
	Tooltip_AutoGate_UnlockGate = ""Отпиреть автоматические ворота"",
	Tooltip_AutoGate_UnlockGateDescription = ""Разблокирует ворота, которые: <LINE> выбраны или: <LINE> подключены к выбранному контроллеру."",
	Tooltip_AutoGate_Reset = ""Сброс частоты контроллера"",
	Tooltip_AutoGate_ResetDescription = ""Сбрасывает частотный код текущего выбранного контроллера."",
	Tooltip_AutoGate_ClearController = ""Отключение контроллера автоматических ворот"",
	Tooltip_AutoGate_ClearControllerDescription = ""Отключает текущий выбранный контроллер от автоматических ворот."",
	Tooltip_AutoGate_UndoneDescription = ""ЭТО ДЕЙСТВИЕ НЕ МОЖЕТ БЫТЬ ОТМЕНЕНО! <LINE> УБЕДИТЕСЬ, ЧТО ВОРОТА РАЗБЛОКИРОВАНЫ!"",
	Tooltip_AutoGate_UndoneFootNote = ""Вы можете подключить контроллер, только если ворота не блокированы.""
	Tooltip_AutoGate_CantInstallFootNote = ""Невозможно установить двигатель, когда ворота открыты!""
	Tooltip_AutoGate_CantLock = ""Невозможно запереть ворота, пока они открыты!""
	Tooltip_AutoGate_BatteryCharge = ""Заряд батареи ворот"",
	Tooltip_AutoGate_NoBatteries = ""Нужен любой автомобильный аккумулятор на ворота"",
	Tooltip_AutoGate_GateNotFound = ""Автоматические ворота, подключенные к этому контроллеру <LINE>, находятся вне диапазона вещания!"",
	Tooltip_AutoGate_GateNotFoundFootNote = ""Возможно, он был уничтожен или его частота была сброшена."",
	Tooltip_AutoGate_GateComponents = ""Установите этот двигатель на любые деревянные ворота, чтобы открывать и закрывать их через контроллер."",
	Tooltip_AutoGate_GateController = ""Этот контроллер можно использовать для открытия и закрытия ворот с установленным автоматическим приводом."",
	Tooltip_AutoGate_AutoGateMagazine = ""Руководство по эксплуатации со всеми схемами и процедурами изготовления автоматических ворот."",
}"
a4Uv2LWp,Sandbox_RU.txt,Redison86,Lua,Saturday 5th of August 2023 04:04:37 AM CDT,"Sandbox_RU = {

	Sandbox_AutoGate = ""Автоматические ворота - настройки"",

	Sandbox_AutoGate_AutoLockGate = ""Автоматически запирать ворота"",
	Sandbox_AutoGate_AutoLockGate_tooltip = ""Каждый раз, когда ворота закрываются контроллером, они также будут заблокированы."",
	Sandbox_AutoGate_ControllerRange = ""Диапазон контроллера"",
	Sandbox_AutoGate_ControllerRange_tooltip = ""Максимальный диапазон, на котором контроллер может взаимодействовать с воротами."",
	Sandbox_AutoGate_BatteryMaxUseCount = ""Заряд батареи"",
	Sandbox_AutoGate_BatteryMaxUseCount_tooltip = ""Общее количество использований каждой батареи."",
	
	Sandbox_AutoGate_LevelRequirementsInstallMetalWelding = ""Требования к установке двигателя"",
	Sandbox_AutoGate_LevelRequirementsInstallMetalWelding_tooltip = ""Уровень металлообработки, необходимый для установки привода ворот."",
	Sandbox_AutoGate_LevelRequirementsControllerInteraction = ""Требования к взаимодействию с контроллером"",
	Sandbox_AutoGate_LevelRequirementsControllerInteraction_tooltip = ""Уровень электрики, необходимый для взаимодействия с контроллером."",
	Sandbox_AutoGate_LevelRequirementsGateInteraction = ""Требования к взаимодействию со шлюзом"",
	Sandbox_AutoGate_LevelRequirementsGateInteraction_tooltip = ""Уровень механики, необходимый для взаимодействия с воротами."",
	Sandbox_AutoGate_LevelRequirementsMakeControllerElectrical = ""Требования к контроллеру"",
	Sandbox_AutoGate_LevelRequirementsMakeControllerElectrical_tooltip = ""Уровень электрики, необходимый для изготовления контроллеров. (требуется перезагрузка)"",
	Sandbox_AutoGate_LevelRequirementsMakeComponentsElectrical = ""Требования к мотору ворот"",
	Sandbox_AutoGate_LevelRequirementsMakeComponentsElectrical_tooltip = ""Уровень электрики, необходимый для изготовления моторов ворот. (требуется перезагрузка)"",
	Sandbox_AutoGate_LevelRequirementsMakeComponentsMechanics = ""Требования к мотору ворот"",
	Sandbox_AutoGate_LevelRequirementsMakeComponentsMechanics_tooltip = ""Уровень механики, необходимый для изготовления моторов для ворот. (требуется перезагрузка)"",
}"
Cf7vHBc8,Recipes_RU.txt,Redison86,Lua,Saturday 5th of August 2023 04:02:27 AM CDT,"Recipes_RU = {

	Recipe_Create_Controller = ""Сделать контроллер автоматический ворот"",
	Recipe_Create_Gate_Components = ""Сделать мотор для автоматических ворот"",
}"
TE0Ph0JY,ItemName_RU.txt,Redison86,Lua,Saturday 5th of August 2023 03:59:49 AM CDT,"ItemName_RU = {

	ItemName_AutoGate.GateController = ""Контроллер автоматических ворот"",
	ItemName_AutoGate.GateComponents = ""Автоматический двигатель ворот"",
	ItemName_AutoGate.AutoGateMag = ""Все об автоматических воротах"",
}"
JTyXh3VJ,Farming Turtle Alpha,Silasko,Lua,Saturday 5th of August 2023 03:38:11 AM CDT,"local SLOT_COUNT = 16
colLength = 0
rowLength = 0

function refuelTurtle()
    for slot = 1, SLOT_COUNT, 1 do
        turtle.select(slot)
            local item = turtle.getItemDetail(slot)
            if (turtle.refuel(2)) then 
                print(""Turtle refueled"")
                return true
            end
    end
end

function checkFuel()
    local fuel = turtle.getFuelLevel()
    if(fuel < 20) then
       refuelTurtle()
    else
        print(""No fuel needed"")
    end
end

function detectStartPoint()
    local state, itemName = turtle.inspectDown()
    if(itemName.name == ""minecraft:log"") then
        checkFuel()
        defx,defy,defz = gps.locate()
        print(""Default GPS coords: "",defx,defy,defz)
        turtle.up()
        turtle.forward()
    end
end

function detectFieldColSize()
    while turtle.detect() == false do
        turtle.forward()
    end
        local state, itemName = turtle.inspect()
        if(itemName.name == ""minecraft:fence"") then
                local x,y,z = gps.locate()
                print(""GPS coords: "",x,y,z)
                leng = math.abs(defx-x)
                if(leng > 0) then
                    colLength = leng
                else
                    colLength = math.abs(defz-z)
                end 
            print(""Column length:"",colLength)
        end
    turtle.turnRight()
    detectFieldRowSize()
end

function detectFieldRowSize()
    while turtle.detect() == false do
        turtle.forward()
    end
        local state, itemName = turtle.inspect()
        if(itemName.name == ""minecraft:fence"") then
                local x,y,z = gps.locate()
                print(""GPS coords: "",x,y,z)
                leng = math.abs(defz-z)
                if(leng > 0) then
                    rowLength = leng
                else
                    rowLength = math.abs(defz-z)
                end 
            print(""Row length:"",rowLength)
        end
    turtle.turnRight()
    returnHome()
end

function returnHome()
    col = colLength
    row = rowLength
    while col > 0 do
        turtle.forward()
        col = col-1
    end
    turtle.turnRight()
    while row > 0 do
        turtle.forward()
        row = row-1
    end
    local x,y,z = gps.locate()
    print(""Position:"", x,"" ,"", y, "" ,"", z)
    print(""Return Home completed"")
    turtle.turnRight()
    turtle.down()
end

function moveFarmer()
    turtle.forward()
end

function turnLeft()
    turtle.turnLeft()
    turtle.forward()
    turtle.turnLeft()
end
 
function turnRight()
    turtle.turnRight()
    turtle.forward()
    turtle.turnRight()
end

function start()
    checkFuel()
    detectStartPoint()
    detectFieldColSize()
    print(""Field Detected, starting harvest"")
    turtle.up()

    for col = 1, colLength, 1 do
        for row = 1, rowLength, 1 do
            moveFarmer()
            print(string.format(""position: column %d   row %d "",col,row))
        end
        --start of each col
        checkFuel()
        if(math.fmod(col,2) == 0) then
            turnRight()
        else
            turnLeft()
        end

    end

end
print(""Column length:"",colLength)
print(""Row length:"",rowLength)
start()"
TWSbn4j7,todolist.blade.php,rezamalik15,HTML,Saturday 5th of August 2023 03:21:22 AM CDT,"<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <meta http-equiv=""X-UA-Compatible"" content=""ie=edge"">

    <link href=""https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css"" rel=""stylesheet"" integrity=""sha384-4bw+/aepP/YC94hEpVNVgiZdgIC5+VKNBQNGCHeKRQN+PtmoHDEXuppvnDJzQIu9"" crossorigin=""anonymous"">
    <link rel=""stylesheet"" href=""https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css"">
    <title>Todo List</title>
</head>
<body>

    <div class=""container py-5"" style=""height: 100vh"">
    
        <div class=""row"" style=""height: 100%"">

            <div class=""col-10 col-md-8 col-lg-6 mx-auto my-auto shadow"">

                <div class=""row mb-3"">
                    <div class=""col"">
                        <h1 class=""text-center"">Todo List</h1>
                    </div>                    
                </div>

                <form class="""" action=""/todo/add"" method=""post"">
                    @csrf
                    <div class=""input-group mb-3"">
                        <input name='todo' type=""text"" class=""form-control"" placeholder=""What do you want to do?"">
                        <input type=""submit"" class=""btn btn-primary"" value=""Save"">
                    </div>
                </form>
                <ul class=""list-group list-group-flush overflow-auto "" style=""max-height: 350px;"">
                    @foreach($todos as $todo)                
                        <li class=""list-group-item d-flex justify-content-between {{ ($todo->status) ? 'list-group-item-success' : ''}}"">
                            <a href=""/todo/delete/{{ $todo->id }}"" class=""btn btn-light"">
                                <i class=""bi bi-x-lg""></i>
                            </a>
                            <p>
                                @if ($todo->status)
                                    <del>{{ $todo->todo }}</del> 
                                @else
                                    {{ $todo->todo }}
                                @endif
                            </p>
                            <a href=""/todo/update/{{ $todo->id }}"" class=""btn btn-light"">
                                <i class=""bi {{ ($todo->status) ? 'bi-arrow-clockwise' : 'bi-check-lg'}}""></i>
                            </a>
                        </li>
                    @endforeach                                                        
                </ul>          
            </div>
        
        </div>
        
    </div>        

    <script src=""https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.bundle.min.js"" integrity=""sha384-HwwvtgBNo3bZJJLYd8oVXjrBZt8cqVSpeBNS5n7C8IVInixGAoxmnlMuBnhbgrkm"" crossorigin=""anonymous""></script>
</body>
</html>"
DC0E2GSu,Substring with concat,Saboten758,Python,Saturday 5th of August 2023 02:32:35 AM CDT,"class Solution(object):
    def findSubstring(self, s, words):
            res=[]
            word_freq={}

            for word in words:
                if word in word_freq:
                    word_freq[word]+=1
                else:
                    word_freq[word]=1

            def backtrack(ind,string,freq):
                if ind>=len(words):
                    res.append(string)
                    return 
                for word in freq:
                    if freq[word]>0:
                        freq[word]-=1
                        backtrack(ind+1,string+word,freq)
                        freq[word]+=1

            backtrack(0,"""",word_freq)
            pos=[]
            if len(res)==0:
                return pos
            max_size=len(res[0])
            i=0
            for i in range(len(s)):
                if (max_size-i)<=len(s):
                    current=s[i:i+max_size]
                    if current in res:
                        pos.append(i)
                else:
                    break
                    
            return pos"
SaYrHX0Z,邀您一起看：书签管理：「编辑」-✎修改,xiaomianao666,JavaScript,Saturday 5th of August 2023 02:09:31 AM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥书签管理：「编辑」-✎修改@@eyJkYXRhIjoie1wiYXNzb2NpYXRlZE1vZGVsc01hcEZvckpvaW5UYWJsZVwiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhGS1wiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhvdXRGS1wiOnt9LFwiZmllbGRzVG9TZXRUb0RlZmF1bHRcIjpbXSxcImdtdE1vZGlmaWVkXCI6MCxcImlkXCI6MCxcImxpc3RUb0NsZWFyQXNzb2NpYXRlZEZLXCI6W10sXCJsaXN0VG9DbGVhclNlbGZGS1wiOltdLFwicGFnZUxpc3RcIjpbXSxcInNhdmVkXCI6ZmFsc2UsXCJ0aXRsZVwiOlwi5oiR55qE6KeG55WMXCIsXCJ2ZXJzaW9uXCI6MCxcInVybFwiOlwiaGlrZXI6Ly9lbXB0eVwiLFwiY29sX3R5cGVcIjpcIng1X3dlYnZpZXdfc2luZ2xlXCIsXCJmaW5kX3J1bGVcIjpcImpzOnNldFJlc3VsdChbe1xcbiAgICB1cmw6XFxcImZpbGU6Ly8vc3RvcmFnZS9lbXVsYXRlZC8wL0FuZHJvaWQvZGF0YS9jb20uZXhhbXBsZS5oaWtlcnZpZXcvZmlsZXMvRG9jdW1lbnRzL25ld1BsYW5Ib21lLmh0bWxcXFwiLFxcbmRlc2M6XFxcIjEwMCUmJmZsb2F0XFxcIixcXG5leHRyYTp7Y2FuQmFjazogdHJ1ZX1cXG59XSk7XCIsXCJncm91cFwiOlwi4pGg5o6o6I2QXCIsXCJwYWdlc1wiOlwiW11cIn0iLCJ0aXRsZSI6IuS5puetvueuoeeQhu+8muOAjOe8lui+keOAjS3inI7kv67mlLkifQ==
Byge6k5f,rate my avatar v2 script,A_GUES,Lua,Saturday 5th of August 2023 01:35:03 AM CDT,"loadstring(game:HttpGet(('https://raw.githubusercontent.com/ProExecutor/Pro-Executor-/main/RateMyAvatar_MS_Paint.lua.txt'),true))()"
U0r6r9Re,Untitled,Kevin_Zhang,C++,Saturday 5th of August 2023 01:31:52 AM CDT,"#pragma GCC optimize(""O3"")
#include <bits/stdc++.h>
using namespace std;
using ll = long long;
#define pb emplace_back
#define AI(i) begin(i), end(i)
template<class T> bool chmin(T &a, T b) { return b < a && (a = b, true); }
template<class T> bool chmax(T &a, T b) { return a < b && (a = b, true); }
#ifdef KEV
#define DE(args...) kout(""[ "" + string(#args) + "" ] = "", args)
void kout() { cerr << endl; }
template<class T, class ...U> void kout(T a, U ...b) { cerr << a << ' ', kout(b...); }
template<class T> void debug(T l, T r) { while (l != r) cerr << *l << "" \n""[next(l)==r], ++l; }
#else
#define DE(...) 0
#define debug(...) 0
#endif
const int MAX_N = 1010;
int grid[MAX_N][MAX_N];
int dp[MAX_N][MAX_N], pf[MAX_N][MAX_N], up[MAX_N];
int solve() {
  int n, m;
  cin >> n >> m;
  for (int i = 1;i <= n;++i) {
    for (int j = 1;j <= m;++j)
      cin >> grid[i][j];
  }
  int res = 1;
  for (int i = 1;i <= n;++i) for (int j = 1;j <= m;++j) {
    pf[i][j] = pf[i-1][j] + pf[i][j-1] - pf[i-1][j-1] + (grid[i][j] == 1);
    if (grid[i][j] == 1) {
      dp[i][j] = 0;
      continue;
    }
    if (dp[i][j-1] == dp[i-1][j]) {
      int d = dp[i][j-1];
      if (d == 0) dp[i][j] = 1;
      else {
        if (grid[i - d][j - d] == 0)
          dp[i][j] = d + 1;
        else
          dp[i][j] = d;
      }
    } else dp[i][j] = min(dp[i][j-1], dp[i-1][j]) + 1;
    chmax(res, dp[i][j]);
  }
  for (int i = 1;i <= n;++i) up[i] = 0;

  for (int i = 1;i <= n;++i) {
    int f = 0;
    for (int j = 1;j <= m;++j) {
      int a = 0;
      auto valid = [&](int a) {
        return pf[i][j] - pf[i-a][j] - pf[i][j-a] + pf[i-a][j-a] <= 1;
      };
      if (grid[i][j] == 1) {
        if (dp[i-1][j] == dp[i][j-1]) {
          a = dp[i-1][j];
          if (grid[i-a][j-a] == 0 || a == 0) ++a;
        } else {
          a = min(dp[i-1][j], dp[i][j-1]) + 1;
        }
        f = j;
        up[j] = i;
      } else {
        vector<int> v{dp[i-1][j-1] + 2, j - f+1, i - up[j]+1};
        sort(AI(v));
        if (v[0] == v[1]) {
          a = v[0] - 1;
        } else a = v[1] - 1;
      }
      if (!valid(a)) --a;
      chmax(res, a);
    }
  }
  return res;
}
int32_t main() {
	ios_base::sync_with_stdio(0), cin.tie(0);
  int T;
  cin >> T;
  while (T--)
    cout << solve() << '\n';
}

"
aeE7PiYd,makefile,mb6ockatf,Make,Saturday 5th of August 2023 01:17:41 AM CDT,"#!/usr/bin/make -f

target_file?=hello_world2.asm

build_x32:
	nasm -f elf -o a.o $(target_file)
	ld -V -m elf_i386 -o a.out a.o

build_x64:
	nasm -f elf64 -o a.o $(target_file)
	ld -V -o a.out a.o

format:
ifeq (,$(wildcard ./formatter.out))
	go build formatter.go
	mv formatter formatter.out
endif
	./formatter.out -ii 16 -ci 48 $(target_file)

debug:
	gdb a.out -x debug.gdb

clean:
	rm a.o *.out"
vd8CGWdE,asp.net: UseRouting vs UseEndPoints,ivandrofly,C#,Saturday 5th of August 2023 12:57:37 AM CDT,"var builder = WebApplication.CreateBuilder(args);

// Add services to the container.

// builder.Services.AddControllers();
// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle

var app = builder.Build();

// app.Use((context, next) =>
// {
//     context.Response.WriteAsync(""Hello from nextflix"");
// });

// terminal middleware
// https://learn.microsoft.com/en-us/aspnet/core/fundamentals/middleware/?view=aspnetcore-7.0
// app.Run(async context =>
// {
//     await context.Response.WriteAsync(""Hello from netflix"");
// });


// case #1
// app.MapGet(""/prefix"", async context =>
// {
//     var header = context.Request.Headers;
//     var customHeader = header[""CustomHeader""].ToString();
//     var mullVad = header[""VPN""].ToString();
//     await context.Response.WriteAsync($""Welcome to netflix : {customHeader}\r\n"");
//     await context.Response.WriteAsync($""VNP client : {mullVad}"");
// });

app.MapGet(""/"", async context =>
{
    var headers = context.Request.Headers;
    var header = context.Request.Headers[""CustomHeader""].ToString();
    await context.Response.WriteAsync($""Welcome to netflix: {header}"");
});

/// ===============================
// required because of UseEndpoints
// case #2
app.UseRouting(); // this is the endpoint finder (will look for the best match in the list of registered endpoints)
// use .UseEndpoints requires adding app.UseRouting()
app.UseEndpoints(routeBuilder =>
{
    // registering the endpoints to the list
    routeBuilder.MapGet(""/prefix"", async context =>
    {
        await context.Response.WriteAsync(""hello"");
    });
});
// NOTE: If this code is enabled then the it will run before the terminal-middleware
// if it's commented and the case #1 is uncommented, then the terminal middleware will run before the .MapGet()
// the reason is that since there is no app.UseRouting and app.UseEndpoint() before app.Run(async context) aka terminal-middleware
// the case #1 endpoint won't be called.

// # Definition 
// app.UseRouting: Adds a EndpointRoutingMiddleware middleware to the specified IApplicationBuilder. 
// A call to UseRouting(this IApplicationBuilder) must be followed by a call to UseEndpoints(this IApplicationBuilder, Action<IEndpointRouteBuilder>) for the same IApplicationBuilder instance.

// app.UseRouting: Adds a EndpointMiddleware middleware to the specified IApplicationBuilder with the
// EndpointDataSource instances built from configured IEndpointRouteBuilder. The EndpointMiddleware will execute the Endpoint associated with the current request.


// ===============================

// terminal middleware
// Run delegates don't receive a next parameter. The first Run delegate is always terminal and terminates the pipeline.
// Run is a convention. Some middleware components may expose Run[Middleware] methods that run at the end of the pipeline
// https://learn.microsoft.com/en-us/aspnet/core/fundamentals/middleware/?view=aspnetcore-7.0#create-a-middleware-pipeline-with-webapplication
app.Run(async context =>
{
    await context.Response.WriteAsync(""Hello"");
});
// NOTE: If the terminal-middleware is enable, your endpoint above registered with ""MapGet"" (case #1) won't run
// since this is the only middleware and also the terminal middleware when the request first come in it will just write and return.
// BUT if the case #2 is called before this terminal-middleware (which requires calling app.UseRouting and also app.UseEndpoints)
// then this middleware will run after out registered endpoint runs!

// START THE APP (NOT SAME AS TERMINAL MIDDLEWARE)
app.Run();


// IMPORTANT: THE MIDDLE-WARE ARE REGISTERED IN ORDER YOU CALL app.Use<....>
// e.g:
// app.UseLogging();
// app.UseDecorator();

// app.Run() (start the web-server) => listen for incoming http request
// when arrives calls => UseLogging => UseDecorator (if there are  no more middlewares return)"
EY50veZa,Nigerian scammers [5-8-1/2023],bombaires,HTML,Saturday 5th of August 2023 12:18:40 AM CDT,"<a href=""mailto:murphyamanda818@gmail.com"">murphyamanda818@gmail.com</a>
<a href=""mailto:mu.r.p.hya.m.a.nd.a81.8@gmail.com"">mu.r.p.hya.m.a.nd.a81.8@gmail.com</a>
<a href=""mailto:mur.ph.ya.m.a.n.d.a.8.1.8@gmail.com"">mur.ph.ya.m.a.n.d.a.8.1.8@gmail.com</a>
<a href=""mailto:m.ur.phyam.a.nda.8.1.8@gmail.com"">m.ur.phyam.a.nda.8.1.8@gmail.com</a>
<a href=""mailto:m.u.rp.hy.a.ma.n.da818@gmail.com"">m.u.rp.hy.a.ma.n.da818@gmail.com</a>
<a href=""mailto:m.u.r.phyamanda.8.18@gmail.com"">m.u.r.phyamanda.8.18@gmail.com</a>
<a href=""mailto:m.u.rp.h.y.a.m.a.n.da818@gmail.com"">m.u.rp.h.y.a.m.a.n.da818@gmail.com</a>
<a href=""mailto:m.ur.p.h.yama.n.d.a8.18@gmail.com"">m.ur.p.h.yama.n.d.a8.18@gmail.com</a>
<a href=""mailto:mur.phy.am.an.d.a818@gmail.com"">mur.phy.am.an.d.a818@gmail.com</a>
<a href=""mailto:mur.phyam.anda81.8@gmail.com"">mur.phyam.anda81.8@gmail.com</a>
<a href=""mailto:m.u.r.ph.y.aman.da818@gmail.com"">m.u.r.ph.y.aman.da818@gmail.com</a>
<a href=""mailto:murp.hy.aman.d.a8.1.8@gmail.com"">murp.hy.aman.d.a8.1.8@gmail.com</a>
<a href=""mailto:mu.rp.hyam.a.nda.818@gmail.com"">mu.rp.hyam.a.nda.818@gmail.com</a>
<a href=""mailto:mu.rph.ya.man.d.a.8.1.8@gmail.com"">mu.rph.ya.man.d.a.8.1.8@gmail.com</a>
<a href=""mailto:mu.rph.yama.n.d.a.818@gmail.com"">mu.rph.yama.n.d.a.818@gmail.com</a>
<a href=""mailto:mu.rph.yamanda.81.8@gmail.com"">mu.rph.yamanda.81.8@gmail.com</a>
<a href=""mailto:m.u.r.p.hya.ma.nd.a.81.8@gmail.com"">m.u.r.p.hya.ma.nd.a.81.8@gmail.com</a>
<a href=""mailto:m.u.r.p.hyama.n.da.8.18@gmail.com"">m.u.r.p.hyama.n.da.8.18@gmail.com</a>
<a href=""mailto:mu.rp.h.y.a.ma.n.da.818@gmail.com"">mu.rp.h.y.a.ma.n.da.818@gmail.com</a>
<a href=""mailto:m.ur.ph.yama.n.da8.18@gmail.com"">m.ur.ph.yama.n.da8.18@gmail.com</a>
<a href=""mailto:mu.r.ph.y.a.m.a.n.d.a.818@gmail.com"">mu.r.ph.y.a.m.a.n.d.a.818@gmail.com</a>
<a href=""mailto:murp.hyam.anda.818@gmail.com"">murp.hyam.anda.818@gmail.com</a>
<a href=""mailto:m.urphy.a.manda.8.18@gmail.com"">m.urphy.a.manda.8.18@gmail.com</a>
<a href=""mailto:m.ur.p.hy.a.m.a.n.da.818@gmail.com"">m.ur.p.hy.a.m.a.n.da.818@gmail.com</a>
<a href=""mailto:mu.r.p.hya.man.d.a.81.8@gmail.com"">mu.r.p.hya.man.d.a.81.8@gmail.com</a>
<a href=""mailto:m.u.r.p.h.yam.a.n.da81.8@gmail.com"">m.u.r.p.h.yam.a.n.da81.8@gmail.com</a>
<a href=""mailto:m.u.rph.y.a.ma.nda.8.18@gmail.com"">m.u.rph.y.a.ma.nda.8.18@gmail.com</a>
<a href=""mailto:m.u.r.phy.am.a.n.d.a.81.8@gmail.com"">m.u.r.phy.am.a.n.d.a.81.8@gmail.com</a>
<a href=""mailto:mur.phy.aman.d.a8.1.8@gmail.com"">mur.phy.aman.d.a8.1.8@gmail.com</a>
<a href=""mailto:m.urphy.a.man.da8.1.8@gmail.com"">m.urphy.a.man.da8.1.8@gmail.com</a>
<a href=""mailto:m.urphy.a.ma.n.da8.1.8@gmail.com"">m.urphy.a.ma.n.da8.1.8@gmail.com</a>
<a href=""mailto:m.u.r.ph.yama.nda.8.18@gmail.com"">m.u.r.ph.yama.nda.8.18@gmail.com</a>
<a href=""mailto:murph.y.a.m.anda8.1.8@gmail.com"">murph.y.a.m.anda8.1.8@gmail.com</a>
<a href=""mailto:mu.r.p.hy.am.a.n.da.8.18@gmail.com"">mu.r.p.hy.am.a.n.da.8.18@gmail.com</a>
<a href=""mailto:murp.hyama.n.da.8.18@gmail.com"">murp.hyama.n.da.8.18@gmail.com</a>
<a href=""mailto:mu.rp.h.y.a.m.anda8.18@gmail.com"">mu.rp.h.y.a.m.anda8.18@gmail.com</a>
<a href=""mailto:m.ur.p.h.y.a.m.a.n.d.a.8.1.8@gmail.com"">m.ur.p.h.y.a.m.a.n.d.a.8.1.8@gmail.com</a>
<a href=""mailto:m.u.r.p.h.ya.m.and.a.8.18@gmail.com"">m.u.r.p.h.ya.m.and.a.8.18@gmail.com</a>
<a href=""mailto:m.urphya.ma.nda.8.18@gmail.com"">m.urphya.ma.nda.8.18@gmail.com</a>
<a href=""mailto:m.urp.h.y.am.a.n.da.81.8@gmail.com"">m.urp.h.y.am.a.n.da.81.8@gmail.com</a>
<a href=""mailto:mur.ph.yama.nda8.1.8@gmail.com"">mur.ph.yama.nda8.1.8@gmail.com</a>
<a href=""mailto:m.ur.p.hy.aman.da.8.18@gmail.com"">m.ur.p.hy.aman.da.8.18@gmail.com</a>
<a href=""mailto:m.ur.p.hyam.a.nda8.1.8@gmail.com"">m.ur.p.hyam.a.nda8.1.8@gmail.com</a>
<a href=""mailto:mu.rphyamanda.81.8@gmail.com"">mu.rphyamanda.81.8@gmail.com</a>
<a href=""mailto:mur.p.hya.m.an.da818@gmail.com"">mur.p.hya.m.an.da818@gmail.com</a>
<a href=""mailto:m.ur.p.h.yama.nd.a.8.18@gmail.com"">m.ur.p.h.yama.nd.a.8.18@gmail.com</a>
<a href=""mailto:murp.h.yam.a.n.d.a.8.18@gmail.com"">murp.h.yam.a.n.d.a.8.18@gmail.com</a>
<a href=""mailto:m.urp.h.y.ama.nd.a81.8@gmail.com"">m.urp.h.y.ama.nd.a81.8@gmail.com</a>
<a href=""mailto:m.u.r.p.h.y.am.and.a.8.18@gmail.com"">m.u.r.p.h.y.am.and.a.8.18@gmail.com</a>
<a href=""mailto:mur.p.hyam.and.a818@gmail.com"">mur.p.hyam.and.a818@gmail.com</a>
<a href=""mailto:murp.hya.m.an.d.a.8.1.8@gmail.com"">murp.hya.m.an.d.a.8.1.8@gmail.com</a>
<a href=""mailto:mu.rp.hy.am.a.n.da8.1.8@gmail.com"">mu.rp.hy.am.a.n.da8.1.8@gmail.com</a>
<a href=""mailto:m.urph.yam.an.d.a8.1.8@gmail.com"">m.urph.yam.an.d.a8.1.8@gmail.com</a>
<a href=""mailto:m.urph.y.ama.nd.a8.18@gmail.com"">m.urph.y.ama.nd.a8.18@gmail.com</a>
<a href=""mailto:mu.r.ph.y.a.m.a.nda.818@gmail.com"">mu.r.ph.y.a.m.a.nda.818@gmail.com</a>
<a href=""mailto:mu.rph.ya.m.a.n.d.a818@gmail.com"">mu.rph.ya.m.a.n.d.a818@gmail.com</a>
<a href=""mailto:mu.r.p.h.y.a.manda.8.1.8@gmail.com"">mu.r.p.h.y.a.manda.8.1.8@gmail.com</a>
<a href=""mailto:mu.r.p.hya.manda8.18@gmail.com"">mu.r.p.hya.manda8.18@gmail.com</a>
<a href=""mailto:mu.rp.hyamanda.81.8@gmail.com"">mu.rp.hyamanda.81.8@gmail.com</a>
<a href=""mailto:m.u.rphya.ma.nda.818@gmail.com"">m.u.rphya.ma.nda.818@gmail.com</a>
<a href=""mailto:m.urp.hyaman.d.a818@gmail.com"">m.urp.hyaman.d.a818@gmail.com</a>
<a href=""mailto:m.ur.p.hyam.a.nd.a.81.8@gmail.com"">m.ur.p.hyam.a.nd.a.81.8@gmail.com</a>
<a href=""mailto:m.ur.p.hyam.an.da8.1.8@gmail.com"">m.ur.p.hyam.an.da8.1.8@gmail.com</a>
<a href=""mailto:m.urph.y.ama.n.da8.18@gmail.com"">m.urph.y.ama.n.da8.18@gmail.com</a>
<a href=""mailto:m.ur.ph.y.am.and.a81.8@gmail.com"">m.ur.ph.y.am.and.a81.8@gmail.com</a>
<a href=""mailto:mu.r.p.h.y.a.m.and.a.8.18@gmail.com"">mu.r.p.h.y.a.m.and.a.8.18@gmail.com</a>
<a href=""mailto:mur.p.hya.m.a.n.da8.1.8@gmail.com"">mur.p.hya.m.a.n.da8.1.8@gmail.com</a>
<a href=""mailto:mur.ph.y.a.manda.8.1.8@gmail.com"">mur.ph.y.a.manda.8.1.8@gmail.com</a>
<a href=""mailto:mu.r.p.hya.ma.n.d.a81.8@gmail.com"">mu.r.p.hya.ma.n.d.a81.8@gmail.com</a>
<a href=""mailto:mu.rph.y.am.a.nda.8.1.8@gmail.com"">mu.rph.y.am.a.nda.8.1.8@gmail.com</a>
<a href=""mailto:mu.r.p.hy.a.ma.n.d.a.8.1.8@gmail.com"">mu.r.p.hy.a.ma.n.d.a.8.1.8@gmail.com</a>
<a href=""mailto:mu.rp.h.yam.a.nd.a8.1.8@gmail.com"">mu.rp.h.yam.a.nd.a8.1.8@gmail.com</a>
<a href=""mailto:mu.rphya.m.a.n.d.a.8.1.8@gmail.com"">mu.rphya.m.a.n.d.a.8.1.8@gmail.com</a>
<a href=""mailto:mu.r.phy.amanda.818@gmail.com"">mu.r.phy.amanda.818@gmail.com</a>
<a href=""mailto:mur.p.hy.aman.d.a.818@gmail.com"">mur.p.hy.aman.d.a.818@gmail.com</a>
<a href=""mailto:murphy.am.and.a.818@gmail.com"">murphy.am.and.a.818@gmail.com</a>
<a href=""mailto:mur.p.h.y.a.ma.nda.8.1.8@gmail.com"">mur.p.h.y.a.ma.nda.8.1.8@gmail.com</a>
<a href=""mailto:m.urphyaman.d.a.818@gmail.com"">m.urphyaman.d.a.818@gmail.com</a>
<a href=""mailto:m.urp.h.y.aman.da818@gmail.com"">m.urp.h.y.aman.da818@gmail.com</a>
<a href=""mailto:murp.hy.am.a.n.d.a818@gmail.com"">murp.hy.am.a.n.d.a818@gmail.com</a>
<a href=""mailto:murphy.ama.nda.8.1.8@gmail.com"">murphy.ama.nda.8.1.8@gmail.com</a>
<a href=""mailto:mu.r.p.h.ya.m.an.da818@gmail.com"">mu.r.p.h.ya.m.an.da818@gmail.com</a>
<a href=""mailto:m.u.r.p.hy.amanda818@gmail.com"">m.u.r.p.hy.amanda818@gmail.com</a>
<a href=""mailto:m.ur.p.h.y.a.mand.a818@gmail.com"">m.ur.p.h.y.a.mand.a818@gmail.com</a>
<a href=""mailto:mu.rph.yamanda81.8@gmail.com"">mu.rph.yamanda81.8@gmail.com</a>
<a href=""mailto:m.urph.y.am.a.n.d.a.818@gmail.com"">m.urph.y.am.a.n.d.a.818@gmail.com</a>
<a href=""mailto:mur.p.h.yaman.d.a.818@gmail.com"">mur.p.h.yaman.d.a.818@gmail.com</a>
<a href=""mailto:murphy.a.m.a.nd.a818@gmail.com"">murphy.a.m.a.nd.a818@gmail.com</a>
<a href=""mailto:m.u.r.ph.yam.a.n.d.a.818@gmail.com"">m.u.r.ph.yam.a.n.d.a.818@gmail.com</a>
<a href=""mailto:m.u.r.ph.y.a.ma.n.d.a8.1.8@gmail.com"">m.u.r.ph.y.a.ma.n.d.a8.1.8@gmail.com</a>
<a href=""mailto:mur.p.h.yam.a.nd.a.8.1.8@gmail.com"">mur.p.h.yam.a.nd.a.8.1.8@gmail.com</a>
<a href=""mailto:m.u.r.p.hya.mand.a8.18@gmail.com"">m.u.r.p.hya.mand.a8.18@gmail.com</a>
<a href=""mailto:m.ur.p.h.y.a.ma.nd.a.81.8@gmail.com"">m.ur.p.h.y.a.ma.nd.a.81.8@gmail.com</a>
<a href=""mailto:mu.rphya.m.a.nd.a8.18@gmail.com"">mu.rphya.m.a.nd.a8.18@gmail.com</a>
<a href=""mailto:m.u.r.p.h.y.amanda.818@gmail.com"">m.u.r.p.h.y.amanda.818@gmail.com</a>
<a href=""mailto:murp.hy.amand.a.8.1.8@gmail.com"">murp.hy.amand.a.8.1.8@gmail.com</a>
<a href=""mailto:m.urphya.ma.nd.a81.8@gmail.com"">m.urphya.ma.nd.a81.8@gmail.com</a>
<a href=""mailto:m.urph.ya.m.a.nd.a.81.8@gmail.com"">m.urph.ya.m.a.nd.a.81.8@gmail.com</a>
<a href=""mailto:m.u.r.p.hy.a.m.an.d.a.8.18@gmail.com"">m.u.r.p.hy.a.m.an.d.a.8.18@gmail.com</a>
<a href=""mailto:m.ur.phyam.an.da.8.1.8@gmail.com"">m.ur.phyam.an.da.8.1.8@gmail.com</a>
<a href=""mailto:mu.rp.hy.a.ma.n.d.a8.18@gmail.com"">mu.rp.hy.a.ma.n.d.a8.18@gmail.com</a>
<a href=""mailto:m.urp.hy.a.ma.n.d.a.818@gmail.com"">m.urp.hy.a.ma.n.d.a.818@gmail.com</a>
<a href=""mailto:m.u.rph.yaman.d.a8.1.8@gmail.com"">m.u.rph.yaman.d.a8.1.8@gmail.com</a>
<a href=""mailto:m.u.r.p.h.ya.ma.nd.a.818@gmail.com"">m.u.r.p.h.ya.ma.nd.a.818@gmail.com</a>
<a href=""mailto:murphyama.n.d.a.818@gmail.com"">murphyama.n.d.a.818@gmail.com</a>
<a href=""mailto:mu.r.p.h.ya.m.and.a8.18@gmail.com"">mu.r.p.h.ya.m.and.a8.18@gmail.com</a>
<a href=""mailto:murph.y.aman.d.a.8.18@gmail.com"">murph.y.aman.d.a.8.18@gmail.com</a>
<a href=""mailto:m.ur.phy.a.mand.a.8.18@gmail.com"">m.ur.phy.a.mand.a.8.18@gmail.com</a>
<a href=""mailto:mu.r.p.hya.ma.nd.a.8.18@gmail.com"">mu.r.p.hya.ma.nd.a.8.18@gmail.com</a>
<a href=""mailto:murp.h.ya.manda81.8@gmail.com"">murp.h.ya.manda81.8@gmail.com</a>
<a href=""mailto:m.ur.phya.m.an.da.8.18@gmail.com"">m.ur.phya.m.an.da.8.18@gmail.com</a>
<a href=""mailto:mu.r.phy.a.m.a.n.d.a8.1.8@gmail.com"">mu.r.phy.a.m.a.n.d.a8.1.8@gmail.com</a>
<a href=""mailto:mur.p.hyam.a.n.d.a8.18@gmail.com"">mur.p.hyam.a.n.d.a8.18@gmail.com</a>
<a href=""mailto:m.u.rphyamanda.818@gmail.com"">m.u.rphyamanda.818@gmail.com</a>
<a href=""mailto:mur.phyam.a.n.da818@gmail.com"">mur.phyam.a.n.da818@gmail.com</a>
<a href=""mailto:murph.y.ama.nda.8.18@gmail.com"">murph.y.ama.nda.8.18@gmail.com</a>
<a href=""mailto:mur.phy.a.ma.n.d.a8.1.8@gmail.com"">mur.phy.a.ma.n.d.a8.1.8@gmail.com</a>
<a href=""mailto:m.urp.h.y.am.and.a81.8@gmail.com"">m.urp.h.y.am.and.a81.8@gmail.com</a>
<a href=""mailto:m.ur.ph.ya.m.anda.8.18@gmail.com"">m.ur.ph.ya.m.anda.8.18@gmail.com</a>
<a href=""mailto:m.u.rph.y.aman.d.a8.18@gmail.com"">m.u.rph.y.aman.d.a8.18@gmail.com</a>
<a href=""mailto:mur.p.h.ya.ma.nda.81.8@gmail.com"">mur.p.h.ya.ma.nda.81.8@gmail.com</a>
<a href=""mailto:mu.r.ph.y.amanda.8.18@gmail.com"">mu.r.ph.y.amanda.8.18@gmail.com</a>
<a href=""mailto:m.ur.p.h.ya.m.anda81.8@gmail.com"">m.ur.p.h.ya.m.anda81.8@gmail.com</a>
<a href=""mailto:murph.y.am.an.da8.18@gmail.com"">murph.y.am.an.da8.18@gmail.com</a>
<a href=""mailto:m.ur.phy.a.m.an.d.a81.8@gmail.com"">m.ur.phy.a.m.an.d.a81.8@gmail.com</a>
<a href=""mailto:m.u.r.p.h.y.ama.n.da.8.18@gmail.com"">m.u.r.p.h.y.ama.n.da.8.18@gmail.com</a>
<a href=""mailto:m.u.r.phy.am.a.nd.a818@gmail.com"">m.u.r.phy.am.a.nd.a818@gmail.com</a>
<a href=""mailto:mur.p.h.y.a.m.an.d.a81.8@gmail.com"">mur.p.h.y.a.m.an.d.a81.8@gmail.com</a>
<a href=""mailto:m.u.rph.y.amand.a81.8@gmail.com"">m.u.rph.y.amand.a81.8@gmail.com</a>
<a href=""mailto:mur.p.hyam.an.d.a.8.18@gmail.com"">mur.p.hyam.an.d.a.8.18@gmail.com</a>
<a href=""mailto:m.ur.p.h.ya.ma.nda8.1.8@gmail.com"">m.ur.p.h.ya.ma.nda8.1.8@gmail.com</a>
<a href=""mailto:m.urp.h.y.am.a.nd.a8.1.8@gmail.com"">m.urp.h.y.am.a.nd.a8.1.8@gmail.com</a>
<a href=""mailto:m.u.r.ph.y.ama.n.da.81.8@gmail.com"">m.u.r.ph.y.ama.n.da.81.8@gmail.com</a>
<a href=""mailto:mu.rph.y.am.a.nd.a.8.1.8@gmail.com"">mu.rph.y.am.a.nd.a.8.1.8@gmail.com</a>
<a href=""mailto:m.urph.y.ama.n.da.8.18@gmail.com"">m.urph.y.ama.n.da.8.18@gmail.com</a>
<a href=""mailto:mu.rp.h.ya.m.a.nd.a.818@gmail.com"">mu.rp.h.ya.m.a.nd.a.818@gmail.com</a>
<a href=""mailto:mu.r.ph.yam.and.a8.18@gmail.com"">mu.r.ph.yam.and.a8.18@gmail.com</a>
<a href=""mailto:m.urph.ya.man.da818@gmail.com"">m.urph.ya.man.da818@gmail.com</a>
<a href=""mailto:m.u.rphy.a.ma.nda81.8@gmail.com"">m.u.rphy.a.ma.nda81.8@gmail.com</a>
<a href=""mailto:mur.p.hy.a.mand.a.81.8@gmail.com"">mur.p.hy.a.mand.a.81.8@gmail.com</a>
<a href=""mailto:m.ur.phy.a.manda.818@gmail.com"">m.ur.phy.a.manda.818@gmail.com</a>
<a href=""mailto:m.ur.phyama.n.d.a81.8@gmail.com"">m.ur.phyama.n.d.a81.8@gmail.com</a>
<a href=""mailto:mur.ph.y.ama.nd.a.81.8@gmail.com"">mur.ph.y.ama.nd.a.81.8@gmail.com</a>
<a href=""mailto:m.ur.p.hyam.a.n.d.a.818@gmail.com"">m.ur.p.hyam.a.n.d.a.818@gmail.com</a>
<a href=""mailto:m.urph.ya.ma.n.d.a818@gmail.com"">m.urph.ya.ma.n.d.a818@gmail.com</a>
<a href=""mailto:m.u.r.p.h.y.a.m.a.n.d.a.818@gmail.com"">m.u.r.p.h.y.a.m.a.n.d.a.818@gmail.com</a>
<a href=""mailto:mur.ph.ya.ma.nd.a.8.18@gmail.com"">mur.ph.ya.ma.nd.a.8.18@gmail.com</a>
<a href=""mailto:m.ur.ph.ya.m.and.a.8.1.8@gmail.com"">m.ur.ph.ya.m.and.a.8.1.8@gmail.com</a>
<a href=""mailto:m.ur.p.hya.m.a.n.da8.1.8@gmail.com"">m.ur.p.hya.m.a.n.da8.1.8@gmail.com</a>
<a href=""mailto:m.u.r.p.h.yama.nd.a8.1.8@gmail.com"">m.u.r.p.h.yama.nd.a8.1.8@gmail.com</a>
<a href=""mailto:murphy.am.anda.8.1.8@gmail.com"">murphy.am.anda.8.1.8@gmail.com</a>
<a href=""mailto:mu.rp.h.yamand.a.8.1.8@gmail.com"">mu.rp.h.yamand.a.8.1.8@gmail.com</a>
<a href=""mailto:mu.r.ph.y.ama.nd.a81.8@gmail.com"">mu.r.ph.y.ama.nd.a81.8@gmail.com</a>
<a href=""mailto:m.urp.h.y.am.a.n.da818@gmail.com"">m.urp.h.y.am.a.n.da818@gmail.com</a>
<a href=""mailto:m.u.rp.hya.man.da.818@gmail.com"">m.u.rp.hya.man.da.818@gmail.com</a>
<a href=""mailto:mu.rph.yama.n.da.818@gmail.com"">mu.rph.yama.n.da.818@gmail.com</a>
<a href=""mailto:mu.rphy.a.m.anda.81.8@gmail.com"">mu.rphy.a.m.anda.81.8@gmail.com</a>
<a href=""mailto:murp.hy.am.an.da.8.1.8@gmail.com"">murp.hy.am.an.da.8.1.8@gmail.com</a>
<a href=""mailto:mu.r.p.hya.m.anda.818@gmail.com"">mu.r.p.hya.m.anda.818@gmail.com</a>
<a href=""mailto:m.u.rph.y.am.a.n.d.a.8.18@gmail.com"">m.u.rph.y.am.a.n.d.a.8.18@gmail.com</a>
<a href=""mailto:m.urp.hyama.n.d.a8.1.8@gmail.com"">m.urp.hyama.n.d.a8.1.8@gmail.com</a>
<a href=""mailto:m.urp.hy.ama.n.d.a8.1.8@gmail.com"">m.urp.hy.ama.n.d.a8.1.8@gmail.com</a>
<a href=""mailto:mu.rphy.am.an.da.81.8@gmail.com"">mu.rphy.am.an.da.81.8@gmail.com</a>
<a href=""mailto:mu.r.ph.ya.m.a.n.d.a81.8@gmail.com"">mu.r.ph.ya.m.a.n.d.a81.8@gmail.com</a>
<a href=""mailto:mu.rphya.ma.n.d.a.8.1.8@gmail.com"">mu.rphya.ma.n.d.a.8.1.8@gmail.com</a>
<a href=""mailto:mu.rph.y.ama.nda818@gmail.com"">mu.rph.y.ama.nda818@gmail.com</a>
<a href=""mailto:m.urp.h.y.ama.n.d.a818@gmail.com"">m.urp.h.y.ama.n.d.a818@gmail.com</a>
<a href=""mailto:m.u.r.phy.am.a.n.d.a.818@gmail.com"">m.u.r.phy.am.a.n.d.a.818@gmail.com</a>
<a href=""mailto:mur.ph.yama.n.d.a.81.8@gmail.com"">mur.ph.yama.n.d.a.81.8@gmail.com</a>
<a href=""mailto:mu.rp.h.yam.a.nda81.8@gmail.com"">mu.rp.h.yam.a.nda81.8@gmail.com</a>
<a href=""mailto:murp.h.y.ama.nda818@gmail.com"">murp.h.y.ama.nda818@gmail.com</a>
<a href=""mailto:m.urp.hy.ama.nd.a81.8@gmail.com"">m.urp.hy.ama.nd.a81.8@gmail.com</a>
<a href=""mailto:m.ur.p.h.y.a.m.an.da.8.1.8@gmail.com"">m.ur.p.h.y.a.m.an.da.8.1.8@gmail.com</a>
<a href=""mailto:m.u.r.ph.yamanda.8.18@gmail.com"">m.u.r.ph.yamanda.8.18@gmail.com</a>
<a href=""mailto:m.u.rphy.am.an.da.8.18@gmail.com"">m.u.rphy.am.an.da.8.18@gmail.com</a>
<a href=""mailto:m.ur.p.h.ya.m.a.nd.a.8.1.8@gmail.com"">m.ur.p.h.ya.m.a.nd.a.8.1.8@gmail.com</a>
<a href=""mailto:mur.phy.a.m.anda8.1.8@gmail.com"">mur.phy.a.m.anda8.1.8@gmail.com</a>
<a href=""mailto:mu.rphya.ma.nd.a.81.8@gmail.com"">mu.rphya.ma.nd.a.81.8@gmail.com</a>
<a href=""mailto:m.u.r.phyam.an.d.a.8.18@gmail.com"">m.u.r.phyam.an.d.a.8.18@gmail.com</a>
<a href=""mailto:m.ur.phya.m.anda.8.18@gmail.com"">m.ur.phya.m.anda.8.18@gmail.com</a>
<a href=""mailto:m.u.r.ph.ya.ma.n.da81.8@gmail.com"">m.u.r.ph.ya.ma.n.da81.8@gmail.com</a>
<a href=""mailto:m.ur.p.h.y.a.ma.n.d.a81.8@gmail.com"">m.ur.p.h.y.a.ma.n.d.a81.8@gmail.com</a>
<a href=""mailto:m.ur.p.hya.ma.nda8.18@gmail.com"">m.ur.p.hya.ma.nda8.18@gmail.com</a>
<a href=""mailto:mu.r.phy.a.man.da81.8@gmail.com"">mu.r.phy.a.man.da81.8@gmail.com</a>
<a href=""mailto:mu.rph.yam.an.da81.8@gmail.com"">mu.rph.yam.an.da81.8@gmail.com</a>
<a href=""mailto:m.u.rphya.ma.n.da8.1.8@gmail.com"">m.u.rphya.ma.n.da8.1.8@gmail.com</a>
<a href=""mailto:m.ur.ph.ya.m.a.nd.a.818@gmail.com"">m.ur.ph.ya.m.a.nd.a.818@gmail.com</a>
<a href=""mailto:murphy.amand.a8.1.8@gmail.com"">murphy.amand.a8.1.8@gmail.com</a>
<a href=""mailto:m.u.rp.h.yama.n.d.a818@gmail.com"">m.u.rp.h.yama.n.d.a818@gmail.com</a>
<a href=""mailto:mu.r.p.hy.ama.nd.a.8.18@gmail.com"">mu.r.p.hy.ama.nd.a.8.18@gmail.com</a>
<a href=""mailto:m.u.rp.h.ya.m.a.n.da81.8@gmail.com"">m.u.rp.h.ya.m.a.n.da81.8@gmail.com</a>
<a href=""mailto:m.ur.p.hy.am.anda81.8@gmail.com"">m.ur.p.hy.am.anda81.8@gmail.com</a>
<a href=""mailto:m.u.rp.hyam.a.n.da.81.8@gmail.com"">m.u.rp.hyam.a.n.da.81.8@gmail.com</a>
<a href=""mailto:m.u.r.p.h.yam.and.a.81.8@gmail.com"">m.u.r.p.h.yam.and.a.81.8@gmail.com</a>
<a href=""mailto:murp.h.y.aman.d.a818@gmail.com"">murp.h.y.aman.d.a818@gmail.com</a>
<a href=""mailto:m.u.r.phy.amanda.818@gmail.com"">m.u.r.phy.amanda.818@gmail.com</a>
<a href=""mailto:m.u.rp.h.ya.m.an.da8.1.8@gmail.com"">m.u.rp.h.ya.m.an.da8.1.8@gmail.com</a>
<a href=""mailto:mur.p.h.yama.nd.a81.8@gmail.com"">mur.p.h.yama.nd.a81.8@gmail.com</a>
<a href=""mailto:mur.p.h.yamanda.818@gmail.com"">mur.p.h.yamanda.818@gmail.com</a>
<a href=""mailto:m.urp.hy.a.m.a.n.da.81.8@gmail.com"">m.urp.hy.a.m.a.n.da.81.8@gmail.com</a>
<a href=""mailto:m.urp.h.ya.m.an.d.a8.18@gmail.com"">m.urp.h.ya.m.an.d.a8.18@gmail.com</a>"
HE19pWa4,Codes Base,AnimaxDevotee,Lua,Friday 4th of August 2023 11:51:10 PM CDT,"{
    ""Caleb"":{
        ""ExpirationDate"":{
			""Day"":23,
			""Month"":12,
			""Year"":2023
        },
		""Rewards"":{
			""1"":{
				""Type"":""Money"",
				""Amount"":50
			}
        }
    }
}"
iAvzZWXs,js slider,Pearlfromsu,C#,Friday 4th of August 2023 10:31:51 PM CDT,"js slider
https://codesandbox.io/s/elastic-pascal-wc5gnt?file=/index.html"
0ZJcpvqk,[site-reviews] add rating Post Excerpt block,geminilabs,PHP,Friday 4th of August 2023 10:06:32 PM CDT,"/**
 * Prepend the Post Excerpt block with the Site Reviews rating summary stars
 * Paste this in your active theme's functions.php file.
 * @param string $content
 * @return string
 */
add_filter('render_block_core/post-excerpt', function ($content) {
    $postTypes = ['page','post']; // Replace the values in this array with the desired post_types
	if (in_array(get_post_type(), $postTypes)) {
		$shortcode = '[site_reviews_summary assigned_posts=""post_id"" hide=""bars,rating,summary""]';
		$shortcode = do_shortcode($shortcode);
		return $shortcode.$content;
	}
	return $content;
});"
zpUhSr2z,Untitled,mIs4,C,Friday 4th of August 2023 08:39:19 PM CDT,"#include <stdio.h>

int main() {
	printf(""Unesi N: \n""); //stampa upit korisniku
	int n;
	scanf(""%d"", &n); //prima unos od korisnika

	int niz[100]; //deklaracija niza od 100 elemenata, ni vise ni manje (trenutno nije niz sa nulama vec NEPOZNATIM VREDNOSTIMA
	niz[0] = 1; //prvi element niza je 1, to znamo sigurno
	int i; //ovo je BROJACKA PROMENLJIVA, sluzi za brojanje iteracija petlje
	for (i = 0; i < n; i++) {//pocinjemo sa jednim elementom, radimo dok ne bude N elemenata
		niz[2*i + 1] = niz[i] * 2 + 1;
		niz[2*i + 2] = niz[i] * 3 + 1;
	}//razmisli sta je ovde visak i zasto
	int j;
	for (j = 0; j < n; j++) {//samo stampanje niza
		printf(""%d "", niz[j]);
	}
	return 0;
}"
yaKanBQz,nclear,rungholt,Lua,Friday 4th of August 2023 08:11:53 PM CDT,"local modules = peripheral.find(""neuralInterface"")
local canvas = modules.canvas()
canvas.clear()"
K8DLdMSt,balancer,sergio_educacionit,Nginx,Friday 4th of August 2023 07:47:51 PM CDT,"upstream balanceado {
    # por defecto el balanceador traba en roun robin
    # descomentar solo un algormito por vez
    # less_conn;
    # ip_hash;

    server 10.0.2.20:80;
    server 10.0.2.21:80;
  }



server {
    listen 80;

    server_name infraestructuras.cloud;
        
    location / {
        proxy_pass http://balanceado;
	proxy_set_header Host $host;
	proxy_set_header X-Real-IP $remote_addr;
    }
}
"
XMeDdJuA,js throttling realization,Pearlfromsu,C#,Friday 4th of August 2023 07:44:49 PM CDT,https://gist.github.com/suvmer/f6fa7794ba0dc17a5cd6d7b374ea5346
f2LeuH2v,Miningv5,KingKevin23,Lua,Friday 4th of August 2023 07:43:15 PM CDT,"local function mine(x)
    local counter = 0
    repeat
        turtle.dig()
        moveForward(1)
        turtle.digUp()
        counter = counter + 1
    until counter == x
end

local function turnAround()
    turtle.turnRight()
    turtle.turnRight()
end

function moveForward(x)
    for i = 1, x, 1 do
        if turtle.forward() then
            -- nichts passiert
        else
            if turtle.detect() then
                while(turtle.detect()) do
                    turtle.dig()
                end
                moveForward(1)
            else
                os.shutdown()
            end
        end
    end
end

local function placeTorch()
    turtle.up()
    turtle.select(2)
    turtle.back()
    turtle.place()
    turtle.down()
end

local function stripMine(x, placeTorches)
    for i = 1, x, 1 do
        mine(3)
        if i % 2 == 1 and placeTorches then
            turtle.back()
            placeTorch()
            moveForward(2)
        end

        turtle.turnRight()
        mine(8)
        if placeTorches then
            placeTorch()
        else
            turtle.back()
        end
        
        turnAround()
        moveForward(7)
        mine(8)
        if placeTorches then
            placeTorch()
        else
            turtle.back()
        end
        
        turnAround()
        moveForward(7)
        turtle.turnLeft()
        for j=1, 16, 1 do
            local slot = turtle.getItemDetail(j)
            if slot ~= nil then
                if slot[""name""] == ""minecraft:cobblestone"" then
                    turtle.select(j)
                    turtle.drop()
                end
            end
        end
    end
end

local function calculateFuel(numberOfCorridors)
    return (numberOfCorridors * 40) + (6 * math.ceil(numberOfCorridors / 2))
end

local function calculateTorches(numberOfCorridors)
    local additionalTorches = math.ceil(numberOfCorridors / 2)
    return (numberOfCorridors * 2) + additionalTorches
end

local function printWithConfirmation(string)
    print(string)
    local input = read()
    if input ~= ""y"" and input ~= ""yes"" then
        os.shutdown()
    end
end

print(""Ultimate Miner by KingKevin23"")
print(""How many corridors should be mined?"")
local numberOfCorridors = tonumber(read())
print(""Should I place torches? (y/n)"")
local placeTorches = read() == ""y""
local fuelNeeded = calculateFuel(numberOfCorridors) - turtle.getFuelLevel()
if fuelNeeded > 0 then
    printWithConfirmation(""Please provide "" .. math.ceil(fuelNeeded / 80) .. "" coal items in slot 1. \n Alternatively you can manually fuel with "" .. math.ceil(fuelNeeded / 1000) .. "" lava!"")
end

if placeTorches then
	printWithConfirmation(""Please provide "" .. calculateTorches(numberOfCorridors) .. "" torches in slot 2."")
end
turtle.select(1)
turtle.refuel()
stripMine(numberOfCorridors, placeTorches)"
hcGq6mbQ,2023-08-04_stats.json,rdp_snitch,JSON,Friday 4th of August 2023 07:18:26 PM CDT,"{
  ""ip"": {
    ""85.14.32.53"": 5682,
    ""195.19.96.41"": 738,
    ""16.162.172.33"": 624,
    ""141.98.11.128"": 3,
    ""198.235.24.112"": 9,
    ""45.79.108.4"": 6,
    ""87.251.75.145"": 12,
    ""141.98.82.22"": 6,
    ""37.32.4.138"": 6,
    ""103.252.119.150"": 24,
    ""60.205.170.161"": 18,
    ""120.27.12.65"": 21,
    ""35.221.222.250"": 6,
    ""45.79.8.178"": 3,
    ""47.236.25.141"": 3,
    ""62.204.41.134"": 18,
    ""128.199.102.172"": 15,
    ""167.94.145.58"": 3,
    ""94.232.43.50"": 3,
    ""172.105.34.155"": 3,
    ""31.43.185.32"": 15,
    ""39.108.174.140"": 219,
    ""103.116.52.3"": 15,
    ""185.170.144.3"": 3,
    ""193.32.248.199"": 9,
    ""87.251.75.120"": 3,
    ""167.94.138.127"": 3,
    ""193.29.13.22"": 9,
    ""60.250.29.35"": 51,
    ""112.5.87.34"": 3,
    ""20.151.86.187"": 12,
    ""193.111.77.85"": 27,
    ""51.75.160.42"": 6,
    ""45.140.17.16"": 9,
    ""165.154.161.199"": 6,
    ""106.116.169.71"": 3,
    ""103.197.185.134"": 6,
    ""174.138.18.213"": 6,
    ""202.165.15.46"": 3,
    ""116.0.54.12"": 21,
    ""198.235.24.116"": 9,
    ""87.251.75.64"": 3,
    ""185.170.144.113"": 6,
    ""191.101.174.60"": 3,
    ""89.108.122.98"": 30,
    ""198.235.24.101"": 9
  },
  ""asn"": {
    ""AS34376"": 5682,
    ""AS12389"": 738,
    ""AS16509"": 624,
    ""AS209605"": 3,
    ""AS396982"": 33,
    ""AS63949"": 12,
    ""AS208091"": 21,
    ""AS209588"": 6,
    ""AS202468"": 6,
    ""AS64022"": 24,
    ""AS37963"": 258,
    ""AS45102"": 3,
    ""AS59425"": 18,
    ""AS14061"": 21,
    ""AS398705"": 3,
    ""AS211736"": 15,
    ""AS150830"": 15,
    ""AS48080"": 9,
    ""AS39351"": 9,
    ""AS398324"": 3,
    ""AS42397"": 9,
    ""AS3462"": 51,
    ""AS9808"": 3,
    ""AS8075"": 12,
    ""AS60721"": 27,
    ""AS16276"": 6,
    ""AS198953"": 9,
    ""AS135377"": 6,
    ""AS4134"": 3,
    ""AS135905"": 6,
    ""AS18206"": 3,
    ""AS24435"": 21,
    ""AS32780"": 3,
    ""AS197695"": 30
  },
  ""isp"": {
    ""Telecom Group"": 5682,
    ""PJSC Rostelecom"": 738,
    ""Amazon.com"": 624,
    ""UAB Host Baltic"": 3,
    ""Google LLC"": 33,
    ""Akamai Technologies, Inc."": 9,
    ""Xhost Internet Solutions LP"": 21,
    ""Flyservers S.A."": 6,
    ""Noyan Abr Arvan Co. ( Private Joint Stock)"": 6,
    ""CLOUDWEBMANAGE"": 24,
    ""Hangzhou Alibaba Advertising Co"": 237,
    ""Addresses CNNIC"": 21,
    ""Alibaba (US) Technology Co., Ltd."": 3,
    ""Horizon LLC"": 18,
    ""DigitalOcean, LLC"": 21,
    ""Censys, Inc."": 6,
    ""Akamai Technologies"": 3,
    ""FOP Dmytro Nedilskyi"": 15,
    ""Chieu Minh Company Limited"": 15,
    ""Dmitriy Panchenko"": 9,
    ""31173 Services AB"": 9,
    ""Bunea TELECOM SRL"": 9,
    ""Chunghwa Telecom Co., Ltd."": 51,
    ""China Mobile"": 3,
    ""Microsoft Corporation"": 12,
    ""Bursabil Teknoloji A.S."": 27,
    ""OVH SAS"": 6,
    ""Proton66 OOO"": 9,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 6,
    ""Chinanet"": 3,
    ""TOTHOST"": 6,
    ""VADS Sdn Bhd"": 3,
    ""Supernet"": 21,
    ""Hosting Services"": 3,
    ""\""Domain names registrar REG.RU\"", Ltd"": 30
  },
  ""org"": {
    ""TelecomGroup"": 5682,
    ""PJSC Rostelecom"": 738,
    ""AWS EC2 (ap-east-1)"": 624,
    ""Unknown"": 27,
    ""Palo Alto Networks, Inc"": 27,
    ""Linode"": 12,
    ""Xhost Internet Solutions"": 18,
    ""Vdsline"": 6,
    ""Noyan Abr Arvan Co. ( Private Joint Stock)"": 6,
    ""Aliyun Computing Co., LTD"": 258,
    ""Google Cloud (asia-east1)"": 6,
    ""Alibaba.com LLC"": 3,
    ""Horizon LLC"": 18,
    ""DigitalOcean, LLC"": 21,
    ""Censys, Inc."": 3,
    ""Dmitriy Panchenko"": 3,
    ""FOP Dmytro Nedilskyi"": 15,
    ""Chieu Minh Company Limited"": 15,
    ""Xhostis"": 9,
    ""31173 Services Germany"": 9,
    ""Censys, Inc"": 3,
    ""Bunea TELECOM SRL"": 9,
    ""Chunghwa Telecom Co. Ltd."": 51,
    ""China Mobile Communications Corporation"": 3,
    ""Microsoft Azure Cloud (canadacentral)"": 12,
    ""Hostumo Bilisim Teknolojileri Sanayi Ticaret Limited Sirketi"": 27,
    ""OVH Ltd"": 6,
    ""Proton66 LLC"": 9,
    ""Ucloud Information Technology"": 6,
    ""Chinanet HE"": 3,
    ""Tothost Solutions and Technologies Company Limited"": 6,
    ""TM VADS"": 3,
    ""Telecard Limited"": 21,
    ""Ipxo"": 3,
    ""Reg.Ru-B2C"": 30
  },
  ""regionName"": {
    ""Blagoevgrad"": 5682,
    ""St.-Petersburg"": 738,
    ""Central and Western"": 624,
    ""Kaunas"": 3,
    ""California"": 33,
    ""England"": 24,
    ""Provincia de Panama"": 6,
    ""Tehran"": 6,
    ""Central and Western District"": 24,
    ""Beijing"": 18,
    ""Shandong"": 21,
    ""Taiwan"": 6,
    ""Texas"": 3,
    ""North West"": 3,
    ""Moscow"": 66,
    ""South West"": 21,
    ""Hesse"": 3,
    ""Perm Krai"": 3,
    ""Maharashtra"": 3,
    ""North Holland"": 15,
    ""Guangdong"": 222,
    ""Ho Chi Minh"": 15,
    ""Land Berlin"": 9,
    ""Michigan"": 3,
    ""Timis"": 9,
    ""Taipei City"": 57,
    ""Ontario"": 12,
    ""Bursa Province"": 27,
    ""Hebei"": 3,
    ""Tinh Nghe An"": 6,
    ""Kuala Lumpur"": 3,
    ""Sindh"": 21,
    ""New Jersey"": 3
  },
  ""country"": {
    ""Bulgaria"": 5682,
    ""Russia"": 807,
    ""Hong Kong"": 648,
    ""Lithuania"": 3,
    ""United States"": 42,
    ""United Kingdom"": 24,
    ""Panama"": 6,
    ""Iran"": 6,
    ""China"": 264,
    ""Taiwan"": 63,
    ""Singapore"": 24,
    ""Germany"": 12,
    ""India"": 3,
    ""Netherlands"": 15,
    ""Vietnam"": 21,
    ""Romania"": 9,
    ""Canada"": 12,
    ""Turkey"": 27,
    ""Malaysia"": 3,
    ""Pakistan"": 21
  },
  ""account"": {
    ""hello"": 7539,
    ""Administr"": 51,
    ""HRrktAoOK"": 3,
    ""VFJgep"": 3,
    ""vRvpxk"": 3,
    ""Almaz"": 3,
    ""Test"": 12,
    ""(empty)"": 15,
    ""beio"": 3,
    ""Domain"": 42,
    ""RtmDAQFYc"": 3,
    ""IWZWqW"": 3,
    ""wVQscR"": 3,
    ""iLVLozaIN"": 3,
    ""zLtIyC"": 3,
    ""ZMmWhY"": 3
  },
  ""keyboard"": {
    ""Unknown"": 7692
  },
  ""client_build"": {
    ""Unknown"": 7692
  },
  ""client_name"": {
    ""Unknown"": 7692
  },
  ""ip_type"": {
    ""Unknown"": 6618,
    ""hosting"": 1026,
    ""hosting & proxy"": 15,
    ""mobile & hosting & proxy"": 9,
    ""mobile"": 24
  }
}"
tqU3KfRV,2023-08-04_stats.json,rdp_snitch,JSON,Friday 4th of August 2023 07:16:16 PM CDT,"{
  ""ip"": {
    ""85.14.32.53"": 3788,
    ""195.19.96.41"": 492,
    ""16.162.172.33"": 416,
    ""141.98.11.128"": 2,
    ""198.235.24.112"": 6,
    ""45.79.108.4"": 4,
    ""87.251.75.145"": 8,
    ""141.98.82.22"": 4,
    ""37.32.4.138"": 4,
    ""103.252.119.150"": 16,
    ""60.205.170.161"": 12,
    ""120.27.12.65"": 14,
    ""35.221.222.250"": 4,
    ""45.79.8.178"": 2,
    ""47.236.25.141"": 2,
    ""62.204.41.134"": 12,
    ""128.199.102.172"": 10,
    ""167.94.145.58"": 2,
    ""94.232.43.50"": 2,
    ""172.105.34.155"": 2,
    ""31.43.185.32"": 10,
    ""39.108.174.140"": 146,
    ""103.116.52.3"": 10,
    ""185.170.144.3"": 2,
    ""193.32.248.199"": 6,
    ""87.251.75.120"": 2,
    ""167.94.138.127"": 2,
    ""193.29.13.22"": 6,
    ""60.250.29.35"": 34,
    ""112.5.87.34"": 2,
    ""20.151.86.187"": 8,
    ""193.111.77.85"": 18,
    ""51.75.160.42"": 4,
    ""45.140.17.16"": 6,
    ""165.154.161.199"": 4,
    ""106.116.169.71"": 2,
    ""103.197.185.134"": 4,
    ""174.138.18.213"": 4,
    ""202.165.15.46"": 2,
    ""116.0.54.12"": 14,
    ""198.235.24.116"": 6,
    ""87.251.75.64"": 2,
    ""185.170.144.113"": 4,
    ""191.101.174.60"": 2,
    ""89.108.122.98"": 20,
    ""198.235.24.101"": 6
  },
  ""asn"": {
    ""AS34376"": 3788,
    ""AS12389"": 492,
    ""AS16509"": 416,
    ""AS209605"": 2,
    ""AS396982"": 22,
    ""AS63949"": 8,
    ""AS208091"": 14,
    ""AS209588"": 4,
    ""AS202468"": 4,
    ""AS64022"": 16,
    ""AS37963"": 172,
    ""AS45102"": 2,
    ""AS59425"": 12,
    ""AS14061"": 14,
    ""AS398705"": 2,
    ""AS211736"": 10,
    ""AS150830"": 10,
    ""AS48080"": 6,
    ""AS39351"": 6,
    ""AS398324"": 2,
    ""AS42397"": 6,
    ""AS3462"": 34,
    ""AS9808"": 2,
    ""AS8075"": 8,
    ""AS60721"": 18,
    ""AS16276"": 4,
    ""AS198953"": 6,
    ""AS135377"": 4,
    ""AS4134"": 2,
    ""AS135905"": 4,
    ""AS18206"": 2,
    ""AS24435"": 14,
    ""AS32780"": 2,
    ""AS197695"": 20
  },
  ""isp"": {
    ""Telecom Group"": 3788,
    ""PJSC Rostelecom"": 492,
    ""Amazon.com"": 416,
    ""UAB Host Baltic"": 2,
    ""Google LLC"": 22,
    ""Akamai Technologies, Inc."": 6,
    ""Xhost Internet Solutions LP"": 14,
    ""Flyservers S.A."": 4,
    ""Noyan Abr Arvan Co. ( Private Joint Stock)"": 4,
    ""CLOUDWEBMANAGE"": 16,
    ""Hangzhou Alibaba Advertising Co"": 158,
    ""Addresses CNNIC"": 14,
    ""Alibaba (US) Technology Co., Ltd."": 2,
    ""Horizon LLC"": 12,
    ""DigitalOcean, LLC"": 14,
    ""Censys, Inc."": 4,
    ""Akamai Technologies"": 2,
    ""FOP Dmytro Nedilskyi"": 10,
    ""Chieu Minh Company Limited"": 10,
    ""Dmitriy Panchenko"": 6,
    ""31173 Services AB"": 6,
    ""Bunea TELECOM SRL"": 6,
    ""Chunghwa Telecom Co., Ltd."": 34,
    ""China Mobile"": 2,
    ""Microsoft Corporation"": 8,
    ""Bursabil Teknoloji A.S."": 18,
    ""OVH SAS"": 4,
    ""Proton66 OOO"": 6,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 4,
    ""Chinanet"": 2,
    ""TOTHOST"": 4,
    ""VADS Sdn Bhd"": 2,
    ""Supernet"": 14,
    ""Hosting Services"": 2,
    ""\""Domain names registrar REG.RU\"", Ltd"": 20
  },
  ""org"": {
    ""TelecomGroup"": 3788,
    ""PJSC Rostelecom"": 492,
    ""AWS EC2 (ap-east-1)"": 416,
    ""Unknown"": 18,
    ""Palo Alto Networks, Inc"": 18,
    ""Linode"": 8,
    ""Xhost Internet Solutions"": 12,
    ""Vdsline"": 4,
    ""Noyan Abr Arvan Co. ( Private Joint Stock)"": 4,
    ""Aliyun Computing Co., LTD"": 172,
    ""Google Cloud (asia-east1)"": 4,
    ""Alibaba.com LLC"": 2,
    ""Horizon LLC"": 12,
    ""DigitalOcean, LLC"": 14,
    ""Censys, Inc."": 2,
    ""Dmitriy Panchenko"": 2,
    ""FOP Dmytro Nedilskyi"": 10,
    ""Chieu Minh Company Limited"": 10,
    ""Xhostis"": 6,
    ""31173 Services Germany"": 6,
    ""Censys, Inc"": 2,
    ""Bunea TELECOM SRL"": 6,
    ""Chunghwa Telecom Co. Ltd."": 34,
    ""China Mobile Communications Corporation"": 2,
    ""Microsoft Azure Cloud (canadacentral)"": 8,
    ""Hostumo Bilisim Teknolojileri Sanayi Ticaret Limited Sirketi"": 18,
    ""OVH Ltd"": 4,
    ""Proton66 LLC"": 6,
    ""Ucloud Information Technology"": 4,
    ""Chinanet HE"": 2,
    ""Tothost Solutions and Technologies Company Limited"": 4,
    ""TM VADS"": 2,
    ""Telecard Limited"": 14,
    ""Ipxo"": 2,
    ""Reg.Ru-B2C"": 20
  },
  ""regionName"": {
    ""Blagoevgrad"": 3788,
    ""St.-Petersburg"": 492,
    ""Central and Western"": 416,
    ""Kaunas"": 2,
    ""California"": 22,
    ""England"": 16,
    ""Provincia de Panama"": 4,
    ""Tehran"": 4,
    ""Central and Western District"": 16,
    ""Beijing"": 12,
    ""Shandong"": 14,
    ""Taiwan"": 4,
    ""Texas"": 2,
    ""North West"": 2,
    ""Moscow"": 44,
    ""South West"": 14,
    ""Hesse"": 2,
    ""Perm Krai"": 2,
    ""Maharashtra"": 2,
    ""North Holland"": 10,
    ""Guangdong"": 148,
    ""Ho Chi Minh"": 10,
    ""Land Berlin"": 6,
    ""Michigan"": 2,
    ""Timis"": 6,
    ""Taipei City"": 38,
    ""Ontario"": 8,
    ""Bursa Province"": 18,
    ""Hebei"": 2,
    ""Tinh Nghe An"": 4,
    ""Kuala Lumpur"": 2,
    ""Sindh"": 14,
    ""New Jersey"": 2
  },
  ""country"": {
    ""Bulgaria"": 3788,
    ""Russia"": 538,
    ""Hong Kong"": 432,
    ""Lithuania"": 2,
    ""United States"": 28,
    ""United Kingdom"": 16,
    ""Panama"": 4,
    ""Iran"": 4,
    ""China"": 176,
    ""Taiwan"": 42,
    ""Singapore"": 16,
    ""Germany"": 8,
    ""India"": 2,
    ""Netherlands"": 10,
    ""Vietnam"": 14,
    ""Romania"": 6,
    ""Canada"": 8,
    ""Turkey"": 18,
    ""Malaysia"": 2,
    ""Pakistan"": 14
  },
  ""account"": {
    ""hello"": 5026,
    ""Administr"": 34,
    ""HRrktAoOK"": 2,
    ""VFJgep"": 2,
    ""vRvpxk"": 2,
    ""Almaz"": 2,
    ""Test"": 8,
    ""(empty)"": 10,
    ""beio"": 2,
    ""Domain"": 28,
    ""RtmDAQFYc"": 2,
    ""IWZWqW"": 2,
    ""wVQscR"": 2,
    ""iLVLozaIN"": 2,
    ""zLtIyC"": 2,
    ""ZMmWhY"": 2
  },
  ""keyboard"": {
    ""Unknown"": 5128
  },
  ""client_build"": {
    ""Unknown"": 5128
  },
  ""client_name"": {
    ""Unknown"": 5128
  },
  ""ip_type"": {
    ""Unknown"": 4412,
    ""hosting"": 684,
    ""hosting & proxy"": 10,
    ""mobile & hosting & proxy"": 6,
    ""mobile"": 16
  }
}"
Qs8hbu2H,2023-08-04_stats.json,rdp_snitch,JSON,Friday 4th of August 2023 07:15:09 PM CDT,"{
  ""ip"": {
    ""85.14.32.53"": 1894,
    ""195.19.96.41"": 246,
    ""16.162.172.33"": 208,
    ""141.98.11.128"": 1,
    ""198.235.24.112"": 3,
    ""45.79.108.4"": 2,
    ""87.251.75.145"": 4,
    ""141.98.82.22"": 2,
    ""37.32.4.138"": 2,
    ""103.252.119.150"": 8,
    ""60.205.170.161"": 6,
    ""120.27.12.65"": 7,
    ""35.221.222.250"": 2,
    ""45.79.8.178"": 1,
    ""47.236.25.141"": 1,
    ""62.204.41.134"": 6,
    ""128.199.102.172"": 5,
    ""167.94.145.58"": 1,
    ""94.232.43.50"": 1,
    ""172.105.34.155"": 1,
    ""31.43.185.32"": 5,
    ""39.108.174.140"": 73,
    ""103.116.52.3"": 5,
    ""185.170.144.3"": 1,
    ""193.32.248.199"": 3,
    ""87.251.75.120"": 1,
    ""167.94.138.127"": 1,
    ""193.29.13.22"": 3,
    ""60.250.29.35"": 17,
    ""112.5.87.34"": 1,
    ""20.151.86.187"": 4,
    ""193.111.77.85"": 9,
    ""51.75.160.42"": 2,
    ""45.140.17.16"": 3,
    ""165.154.161.199"": 2,
    ""106.116.169.71"": 1,
    ""103.197.185.134"": 2,
    ""174.138.18.213"": 2,
    ""202.165.15.46"": 1,
    ""116.0.54.12"": 7,
    ""198.235.24.116"": 3,
    ""87.251.75.64"": 1,
    ""185.170.144.113"": 2,
    ""191.101.174.60"": 1,
    ""89.108.122.98"": 10,
    ""198.235.24.101"": 3
  },
  ""asn"": {
    ""AS34376"": 1894,
    ""AS12389"": 246,
    ""AS16509"": 208,
    ""AS209605"": 1,
    ""AS396982"": 11,
    ""AS63949"": 4,
    ""AS208091"": 7,
    ""AS209588"": 2,
    ""AS202468"": 2,
    ""AS64022"": 8,
    ""AS37963"": 86,
    ""AS45102"": 1,
    ""AS59425"": 6,
    ""AS14061"": 7,
    ""AS398705"": 1,
    ""AS211736"": 5,
    ""AS150830"": 5,
    ""AS48080"": 3,
    ""AS39351"": 3,
    ""AS398324"": 1,
    ""AS42397"": 3,
    ""AS3462"": 17,
    ""AS9808"": 1,
    ""AS8075"": 4,
    ""AS60721"": 9,
    ""AS16276"": 2,
    ""AS198953"": 3,
    ""AS135377"": 2,
    ""AS4134"": 1,
    ""AS135905"": 2,
    ""AS18206"": 1,
    ""AS24435"": 7,
    ""AS32780"": 1,
    ""AS197695"": 10
  },
  ""isp"": {
    ""Telecom Group"": 1894,
    ""PJSC Rostelecom"": 246,
    ""Amazon.com"": 208,
    ""UAB Host Baltic"": 1,
    ""Google LLC"": 11,
    ""Akamai Technologies, Inc."": 3,
    ""Xhost Internet Solutions LP"": 7,
    ""Flyservers S.A."": 2,
    ""Noyan Abr Arvan Co. ( Private Joint Stock)"": 2,
    ""CLOUDWEBMANAGE"": 8,
    ""Hangzhou Alibaba Advertising Co"": 79,
    ""Addresses CNNIC"": 7,
    ""Alibaba (US) Technology Co., Ltd."": 1,
    ""Horizon LLC"": 6,
    ""DigitalOcean, LLC"": 7,
    ""Censys, Inc."": 2,
    ""Akamai Technologies"": 1,
    ""FOP Dmytro Nedilskyi"": 5,
    ""Chieu Minh Company Limited"": 5,
    ""Dmitriy Panchenko"": 3,
    ""31173 Services AB"": 3,
    ""Bunea TELECOM SRL"": 3,
    ""Chunghwa Telecom Co., Ltd."": 17,
    ""China Mobile"": 1,
    ""Microsoft Corporation"": 4,
    ""Bursabil Teknoloji A.S."": 9,
    ""OVH SAS"": 2,
    ""Proton66 OOO"": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Chinanet"": 1,
    ""TOTHOST"": 2,
    ""VADS Sdn Bhd"": 1,
    ""Supernet"": 7,
    ""Hosting Services"": 1,
    ""\""Domain names registrar REG.RU\"", Ltd"": 10
  },
  ""org"": {
    ""TelecomGroup"": 1894,
    ""PJSC Rostelecom"": 246,
    ""AWS EC2 (ap-east-1)"": 208,
    ""Unknown"": 9,
    ""Palo Alto Networks, Inc"": 9,
    ""Linode"": 4,
    ""Xhost Internet Solutions"": 6,
    ""Vdsline"": 2,
    ""Noyan Abr Arvan Co. ( Private Joint Stock)"": 2,
    ""Aliyun Computing Co., LTD"": 86,
    ""Google Cloud (asia-east1)"": 2,
    ""Alibaba.com LLC"": 1,
    ""Horizon LLC"": 6,
    ""DigitalOcean, LLC"": 7,
    ""Censys, Inc."": 1,
    ""Dmitriy Panchenko"": 1,
    ""FOP Dmytro Nedilskyi"": 5,
    ""Chieu Minh Company Limited"": 5,
    ""Xhostis"": 3,
    ""31173 Services Germany"": 3,
    ""Censys, Inc"": 1,
    ""Bunea TELECOM SRL"": 3,
    ""Chunghwa Telecom Co. Ltd."": 17,
    ""China Mobile Communications Corporation"": 1,
    ""Microsoft Azure Cloud (canadacentral)"": 4,
    ""Hostumo Bilisim Teknolojileri Sanayi Ticaret Limited Sirketi"": 9,
    ""OVH Ltd"": 2,
    ""Proton66 LLC"": 3,
    ""Ucloud Information Technology"": 2,
    ""Chinanet HE"": 1,
    ""Tothost Solutions and Technologies Company Limited"": 2,
    ""TM VADS"": 1,
    ""Telecard Limited"": 7,
    ""Ipxo"": 1,
    ""Reg.Ru-B2C"": 10
  },
  ""regionName"": {
    ""Blagoevgrad"": 1894,
    ""St.-Petersburg"": 246,
    ""Central and Western"": 208,
    ""Kaunas"": 1,
    ""California"": 11,
    ""England"": 8,
    ""Provincia de Panama"": 2,
    ""Tehran"": 2,
    ""Central and Western District"": 8,
    ""Beijing"": 6,
    ""Shandong"": 7,
    ""Taiwan"": 2,
    ""Texas"": 1,
    ""North West"": 1,
    ""Moscow"": 22,
    ""South West"": 7,
    ""Hesse"": 1,
    ""Perm Krai"": 1,
    ""Maharashtra"": 1,
    ""North Holland"": 5,
    ""Guangdong"": 74,
    ""Ho Chi Minh"": 5,
    ""Land Berlin"": 3,
    ""Michigan"": 1,
    ""Timis"": 3,
    ""Taipei City"": 19,
    ""Ontario"": 4,
    ""Bursa Province"": 9,
    ""Hebei"": 1,
    ""Tinh Nghe An"": 2,
    ""Kuala Lumpur"": 1,
    ""Sindh"": 7,
    ""New Jersey"": 1
  },
  ""country"": {
    ""Bulgaria"": 1894,
    ""Russia"": 269,
    ""Hong Kong"": 216,
    ""Lithuania"": 1,
    ""United States"": 14,
    ""United Kingdom"": 8,
    ""Panama"": 2,
    ""Iran"": 2,
    ""China"": 88,
    ""Taiwan"": 21,
    ""Singapore"": 8,
    ""Germany"": 4,
    ""India"": 1,
    ""Netherlands"": 5,
    ""Vietnam"": 7,
    ""Romania"": 3,
    ""Canada"": 4,
    ""Turkey"": 9,
    ""Malaysia"": 1,
    ""Pakistan"": 7
  },
  ""account"": {
    ""hello"": 2513,
    ""Administr"": 17,
    ""HRrktAoOK"": 1,
    ""VFJgep"": 1,
    ""vRvpxk"": 1,
    ""Almaz"": 1,
    ""Test"": 4,
    ""(empty)"": 5,
    ""beio"": 1,
    ""Domain"": 14,
    ""RtmDAQFYc"": 1,
    ""IWZWqW"": 1,
    ""wVQscR"": 1,
    ""iLVLozaIN"": 1,
    ""zLtIyC"": 1,
    ""ZMmWhY"": 1
  },
  ""keyboard"": {
    ""Unknown"": 2564
  },
  ""client_build"": {
    ""Unknown"": 2564
  },
  ""client_name"": {
    ""Unknown"": 2564
  },
  ""ip_type"": {
    ""Unknown"": 2206,
    ""hosting"": 342,
    ""hosting & proxy"": 5,
    ""mobile & hosting & proxy"": 3,
    ""mobile"": 8
  }
}"
3crCBHM4,lift controller BACKUP,qjnr,Lua,Friday 4th of August 2023 06:57:32 PM CDT,"-- [ Elevator Pulley Controller Script ]
-- Make sure to turn on this computer first!
-- It will handle the floor number registration coordination


-- TODO (SORT OF DONE BUT POSSIBLY FUCKY AND NEEDS MORE TESTING): ALLOW FLOORS THE BE UNMAPPED. SOMEHOW.
--          Seems like the best solution for this would be to periodically check (like every 20s or so) on all floor controllers
--          if they're still active, and if not, unregister those floors.
--  * This should automatically move the lift to the closest available floor if it was at a floor that died.


C_INPUT_ROTATIONAL_SPEED = 256
C_INPUT_ROTATION_INVERTED = false

C_MODEM_CHANNEL = 1024


-- Requires Async API (https://pastebin.com/7up5gSkz)
--shell.run(""rm async"")
if not fs.exists(""async"") then shell.run(""pastebin get 7up5gSkz async"") end
local async = require(""async"")

-- Requires Network API (https://pastebin.com/J94i735q)
--shell.run(""rm network"")
if not fs.exists(""network"") then shell.run(""pastebin get J94i735q network"") end
local network = require(""network"")


-- Warnings
term.clear()
term.setCursorPos(1, 1)
term.setTextColor(colors.orange)
print(""WARNING: This script assumes the lift is at the highest floor initially."")
term.setTextColor(colors.white)
print(""Note that additional floors can be added at any time without requiring a full reset of the system."")
print()


-- Setup
local seqGearshift = peripheral.find(""Create_SequencedGearshift"")

function math.clamp(x, min, max)
    if x < min then return min end
    if x > max then return max end
    return x
end

-- Math Create uses to calculate movement speed for gantry shafts
-- Should be the same for rope pulleys, right?
local blocksPerSecond = 20 * math.clamp(C_INPUT_ROTATIONAL_SPEED / 512, -0.49, 0.49)

local floorDistances  = {}
local liftFloorN      = nil
local direction       = ""still""


local function boolXor(a, b)
    return (a or b) and not (a and b)
end


--!async
local function moveToFloor(floorN)
    local cdd = 0  -- Cumulative Distance Difference
    local dds = {} -- Distance Difference array

    for i = math.min(floorN, liftFloorN), math.max(floorN, liftFloorN) - 1 do
        ---@format disable-next
        local dd = floorDistances[i] - floorDistances[i + 1] -- sorted from highest distance (lowest floor) to lowest distance (highest floor)
        cdd = cdd + dd
        table.insert(dds, dd)
    end

    direction = (floorN > liftFloorN) and ""up"" or ""down""
    local m = boolXor(C_INPUT_ROTATION_INVERTED, direction == ""up"") and 1 or -1

    network.send(""prepare_movement"", floorN)

    network.waitFor(""lift_ready"")

    network.send(""update_direction"", direction)

    seqGearshift.move(cdd, m)

    for _, dd in ipairs(dds) do
        sleep(dd / blocksPerSecond)

        liftFloorN = liftFloorN + m
        network.send(""update_lift_floorN"", liftFloorN)
    end

    direction = ""still""
    network.send(""update_direction"", direction)
end


-- Periodically checks if all registered floor controllers are still active
-- and removes floors that are no longer active.
local aliveCheckResponses = nil
local function monitorFloorControllers()
    while true do
        sleep(10)

        if aliveCheckResponses ~= nil then
            if #aliveCheckResponses == 0 then
                print(""(AliveCheck)  All floors died."")
                print(""--> Lift location unknown."")

                -- Reset to initial state
                floorDistances = {}
                liftFloorN     = nil
                direction      = ""still"" -- just to be sure
            else
                local liftDistance = nil -- for moving the lift if it happens to be on a floor that died

                for i = #floorDistances, 1, -1 do
                    local found = false
                    for _, n in ipairs(aliveCheckResponses) do
                        if i == n then
                            found = true
                            break
                        end
                    end
                    if not found then
                        print(""(AliveCheck)  Floor "" .. i .. "" died."")

                        -- this is going to get complicated i fear......
                        if seqGearshift.isRunning() then
                            -- todo figure this out
                            error(
                                ""[ERR] Lift moving while floor died - I'm really sorry for just killing the program like this but I have no idea how to handle this yet.."")
                        end

                        -- Update floor numbers above
                        for j = #floorDistances, i + 1, -1 do
                            print(""==> Updating floor number "" .. j .. "" to "" .. j - 1)
                            network.send(""update_floorN"", j, j - 1)
                        end

                        -- Order a rescue team for the lift
                        if liftFloorN == i then
                            liftDistance = floorDistances[i]
                        end

                        table.remove(floorDistances, i)
                    end
                end

                -- Force move lift to closest floor if it was on a floor that died
                if liftDistance ~= nil then
                    liftFloorN = nil

                    local shortestDistDiff = nil
                    local closestFloorN = 1
                    local dir = nil
                    for i, fd in ipairs(floorDistances) do
                        local dd = fd - liftDistance
                        local absdd = math.abs(dd)
                        if shortestDistDiff == nil or absdd < shortestDistDiff then
                            shortestDistDiff = absdd
                            closestFloorN = i
                            dir = dd > 0 and ""down"" or ""up""
                        end
                    end

                    direction = dir

                    print(""==> Rescueing lift to floor "" .. closestFloorN)
                    network.send(""update_lift_floorN"", nil)
                    network.send(""update_direction"", direction)

                    seqGearshift.move(shortestDistDiff, boolXor(C_INPUT_ROTATION_INVERTED, direction == ""up"") and 1 or -1)

                    sleep(shortestDistDiff / blocksPerSecond)

                    liftFloorN = closestFloorN
                    direction = ""still""
                    network.send(""update_lift_floorN"", liftFloorN)
                    network.send(""update_direction"", direction)
                end
            end
        end

        print(""Performing alive check..."")
        aliveCheckResponses = {}
        network.send(""floorcontroller_alive_check"")
    end
end


network.on(""request_floorN"", function()
    local dist = network.getMessageDistance()

    print(""[INFO] Floor controller registration requested"")

    local hasInserted = false

    for i, fd in ipairs(floorDistances) do
        if dist == fd then
            -- Reassign rebooted (or whatever happened) floor controller to its previous floor number
            print(""===> Distance already mapped, reassigning floor number "" .. i)

            network.send(""register_floorN_at_distance"", dist, i)
            if liftFloorN ~= nil then network.send(""update_lift_floorN"", liftFloorN) end
            network.send(""update_direction"", direction)
        elseif dist > fd then
            print(""===> Reassigning floor number "" .. i)

            table.insert(floorDistances, i, dist)

            -- Update floor numbers for previously registered floor controllers
            for j = #floorDistances, i + 1, -1 do
                network.send(""update_floorN"", j - 1, j)
            end

            -- Update floor number for lift
            if liftFloorN ~= nil and liftFloorN >= i then
                liftFloorN = liftFloorN + 1
                print(""===> Lift floor number updated to "" .. liftFloorN)
            end

            -- Next (re)register the floor number to a (different) controller
            network.send(""register_floorN_at_distance"", dist, i)
            if liftFloorN ~= nil then network.send(""update_lift_floorN"", liftFloorN) end
            network.send(""update_direction"", direction)

            hasInserted = true
            break
        end
    end

    if not hasInserted then
        table.insert(floorDistances, dist)

        print(""===> Assigning floor number "" .. #floorDistances)

        network.send(""register_floorN_at_distance"", dist, #floorDistances)
        if liftFloorN ~= nil then network.send(""update_lift_floorN"", liftFloorN) end
        network.send(""update_direction"", direction)
    end
end)

network.on(""request_move_to"", function(floorN)
    print(""[INFO] Move to floor "" .. floorN .. "" requested"")

    if liftFloorN == nil then
        print(""[ERR] Lift location unknown"")
        return
    end

    if seqGearshift.isRunning() then
        print(""===> Lift is already moving, queueing"")

        -- TODO: IMPLEMENT MOVE QUEUE !!!

        return
    end

    -- Execute the request
    async.exec(moveToFloor, floorN)
end)

network.on(""report_lift_location"", function(floorN)
    print(""[INFO] Lift located at floor "" .. floorN)
    liftFloorN = floorN
    network.send(""update_lift_floorN"", liftFloorN)
end)

network.on(""floorcontroller_report_alive"", function(floorN)
    table.insert(aliveCheckResponses, floorN)
end)


-- Init
network.connectWireless(C_MODEM_CHANNEL)

network.send(""liftcontroller_startup"")


-- Event loop
async.queue(monitorFloorControllers)
async.queue(network.main)
async.main()
"
NVf011ge,ntodo,rungholt,Lua,Friday 4th of August 2023 06:53:14 PM CDT,"-- Get hold of the canvas
local interface = peripheral.wrap(""back"")
local canvas = interface.canvas()
-- And add a rectangle
local rect = canvas.addRectangle(0, 0, 100, 100, 0x000000FF)

rect.setSize(90, 60)
rect.setAlpha(100) -- Let's make this see through

local text1 = canvas.addText({ x = 5, y = 5 }, """")
local text2 = canvas.addText({ x = 5, y = 15 }, """")
local text3 = canvas.addText({ x = 5, y = 25 }, """")
local text4 = canvas.addText({ x = 5, y = 35 }, """")

text1.setScale(1)
text2.setScale(1)
text3.setScale(1)
text4.setScale(1)

while true do
    text1.setText(""***ToDo***"")
    text2.setText(""1. [ ] bla"")
    text3.setText(""2. [ ] stuff"")
    text4.setText(""3. [ ] wat"")
  sleep(1)
end"
RJyjDH8u,floor controller BACKUP,qjnr,Lua,Friday 4th of August 2023 06:34:15 PM CDT,"-- [ Floor Controller Script ]

C_RS_CABIN_DOOR_SIDE      = ""bottom""
C_RS_CABIN_DOOR_INVERTED  = false
C_RS_FLOOR_DOOR_SIDE      = ""right""
C_RS_FLOOR_DOOR_INVERTED  = false
C_RS_LIFT_DETECT_SIDE     = ""left""
C_RS_LIFT_DETECT_INVERTED = false
C_INTER_DOOR_DELAY        = 0.2 -- seconds
C_DOOR_AUTOCLOSE_DELAY    = 5   -- seconds

C_MODEM_CHANNEL           = 1024


-- RENDERING LIMITATIONS
-- Due to the way subpixels are drawn, it is sadly not possible to use more than one background color.


-- Requires BLittle API (https://www.computercraft.info/forums2/index.php?/topic/25354-cc-176-blittle-api/)
if not fs.exists(""blittle"") then shell.run(""pastebin get ujchRSnU blittle"") end
os.loadAPI(""blittle"")

-- Requires Async API (https://pastebin.com/7up5gSkz)
--shell.run(""rm async"")
if not fs.exists(""async"") then shell.run(""pastebin get 7up5gSkz async"") end
local async = require(""async"")

-- Requires Network API (https://pastebin.com/J94i735q)
--shell.run(""rm network"")
if not fs.exists(""network"") then shell.run(""pastebin get J94i735q network"") end
local network = require(""network"")


-- PaintUtils Digits
---@format disable-next
local PUDIGIT = {
    [0] = { { 0, 1, 1, 1, 0 }, { 1, 0, 0, 0, 1 }, { 1, 0, 0, 1, 1 }, { 1, 0, 1, 0, 1 }, { 1, 1, 0, 0, 1 }, { 1, 0, 0, 0, 1 }, { 0, 1, 1, 1, 0 } },
    [1] = { { 0, 0, 1, 0, 0 }, { 0, 1, 1, 0, 0 }, { 0, 0, 1, 0, 0 }, { 0, 0, 1, 0, 0 }, { 0, 0, 1, 0, 0 }, { 0, 0, 1, 0, 0 }, { 1, 1, 1, 1, 1 } },
    [2] = { { 0, 1, 1, 1, 0 }, { 1, 0, 0, 0, 1 }, { 0, 0, 0, 0, 1 }, { 0, 0, 1, 1, 0 }, { 0, 1, 0, 0, 0 }, { 1, 0, 0, 0, 1 }, { 1, 1, 1, 1, 1 } },
    [3] = { { 0, 1, 1, 1, 0 }, { 1, 0, 0, 0, 1 }, { 0, 0, 0, 0, 1 }, { 0, 0, 1, 1, 0 }, { 0, 0, 0, 0, 1 }, { 1, 0, 0, 0, 1 }, { 0, 1, 1, 1, 0 } },
    [4] = { { 0, 0, 0, 1, 1 }, { 0, 0, 1, 0, 1 }, { 0, 1, 0, 0, 1 }, { 1, 0, 0, 0, 1 }, { 1, 1, 1, 1, 1 }, { 0, 0, 0, 0, 1 }, { 0, 0, 0, 0, 1 } },
    [5] = { { 1, 1, 1, 1, 1 }, { 1, 0, 0, 0, 0 }, { 1, 1, 1, 1, 0 }, { 0, 0, 0, 0, 1 }, { 0, 0, 0, 0, 1 }, { 1, 0, 0, 0, 1 }, { 0, 1, 1, 1, 0 } },
    [6] = { { 0, 0, 1, 1, 0 }, { 0, 1, 0, 0, 0 }, { 1, 0, 0, 0, 0 }, { 1, 1, 1, 1, 0 }, { 1, 0, 0, 0, 1 }, { 1, 0, 0, 0, 1 }, { 0, 1, 1, 1, 0 } },
    [7] = { { 1, 1, 1, 1, 1 }, { 1, 0, 0, 0, 1 }, { 0, 0, 0, 0, 1 }, { 0, 0, 0, 1, 0 }, { 0, 0, 1, 0, 0 }, { 0, 0, 1, 0, 0 }, { 0, 0, 1, 0, 0 } },
    [8] = { { 0, 1, 1, 1, 0 }, { 1, 0, 0, 0, 1 }, { 1, 0, 0, 0, 1 }, { 0, 1, 1, 1, 0 }, { 1, 0, 0, 0, 1 }, { 1, 0, 0, 0, 1 }, { 0, 1, 1, 1, 0 } },
    [9] = { { 0, 1, 1, 1, 0 }, { 1, 0, 0, 0, 1 }, { 1, 0, 0, 0, 1 }, { 0, 1, 1, 1, 1 }, { 0, 0, 0, 0, 1 }, { 0, 0, 0, 1, 0 }, { 0, 1, 1, 0, 0 } },
}
local CHWIDTH = 6 -- Measured in BLittle pixels

-- PaintUtils Indicators
---@format disable-next
local PUSIGN = {
    UP    = { { 0, 0, 1, 0, 0 }, { 0, 1, 1, 1, 0 }, { 1, 0, 1, 0, 1 }, { 0, 0, 1, 0, 0 }, { 0, 0, 1, 0, 0 }, { 0, 0, 1, 0, 0 }, { 0, 0, 0, 0, 0 } },
    DOWN  = { { 0, 0, 1, 0, 0 }, { 0, 0, 1, 0, 0 }, { 0, 0, 1, 0, 0 }, { 1, 0, 1, 0, 1 }, { 0, 1, 1, 1, 0 }, { 0, 0, 1, 0, 0 }, { 0, 0, 0, 0, 0 } },
    STILL = { { 1, 1, 1, 1, 1 }, { 1, 0, 0, 0, 1 }, { 1, 0, 0, 0, 1 }, { 1, 0, 0, 0, 1 }, { 1, 0, 0, 0, 1 }, { 1, 0, 0, 0, 1 }, { 1, 1, 1, 1, 1 } }
}


-- Rendering constants
local SX, SY = 8, 11


-- Setup
local thisFloorN = nil
local liftFloorN = nil
local direction  = nil
local sign       = nil
local destFloorN = nil
local calledHere = false


local monitor = peripheral.find(""monitor"")

monitor.setBackgroundColor(colours.black)
monitor.setTextScale(0.5)
monitor.clear()
monitor.setCursorPos(1, 1)

local blWin = blittle.createWindow(monitor)
local subWin = window.create(blWin, SX + CHWIDTH * 2, SY, 5, 7)

local function printNative(text)
    redir = term.redirect(term.native())
    print(text)
    term.redirect(redir)
end

local function boolXor(a, b)
    return (a or b) and not (a and b)
end

local setDoors -- forward declare so it can be referenced in itself
setDoors = async.wrap(function(openState)
    -- Kill all previous instances
    setDoors.killSuspended()

    rs.setOutput(C_RS_CABIN_DOOR_SIDE, boolXor(C_RS_CABIN_DOOR_INVERTED, openState))
    sleep(C_INTER_DOOR_DELAY)
    rs.setOutput(C_RS_FLOOR_DOOR_SIDE, boolXor(C_RS_FLOOR_DOOR_INVERTED, openState))

    -- Close automatically
    if openState then
        sleep(C_DOOR_AUTOCLOSE_DELAY)
        setDoors(false)
    end
end)

local function applyFgColour(image, colour)
    local colouredImage = {}

    for _, row in ipairs(image) do
        local colouredRow = {}

        for _, pixel in ipairs(row) do
            table.insert(colouredRow, pixel == 1 and colour or 0)
        end

        table.insert(colouredImage, colouredRow)
    end

    return colouredImage
end

local function render()
    while true do
        -- Lift floor number
        term.redirect(blWin)
        blWin.setBackgroundColor(colours.black)
        blWin.clear()

        if liftFloorN ~= nil then
            local fgColour = calledHere and colours.orange or colours.white
            paintutils.drawImage(applyFgColour(PUDIGIT[math.floor(liftFloorN / 10)], fgColour), SX, SY)
            paintutils.drawImage(applyFgColour(PUDIGIT[liftFloorN % 10], fgColour), SX + CHWIDTH, SY)
        end


        -- Status indicator
        term.redirect(subWin)
        subWin.setBackgroundColor(colours.black)
        subWin.clear()

        if sign ~= nil then
            local fgColour =
                ((destFloorN == thisFloorN and direction ~= ""still"") or
                    (destFloorN == thisFloorN and liftFloorN == thisFloorN))
                and colours.green or colours.white
            paintutils.drawImage(applyFgColour(sign, fgColour), 1, 1)
        end

        -- Animate arrow status indicators
        if direction == ""up"" then
            table.insert(sign, table.remove(sign, 1))
        elseif direction == ""down"" then
            table.insert(sign, 1, table.remove(sign, #sign))
        end


        -- Write this floor number as well
        if thisFloorN ~= nil then
            monitor.setCursorPos(1, 1)
            monitor.write(tostring(math.floor(thisFloorN / 10))) -- tostring to avoid decimal seperators
            monitor.write(tostring(thisFloorN % 10))
        end

        sleep(0.1)
    end
end

local function touchEvent()
    while true do
        os.pullEvent(""monitor_touch"")

        if liftFloorN == thisFloorN then
            setDoors(true)
        elseif liftFloorN ~= nil and thisFloorN ~= nil then
            -- Ask lift to kindly come here
            network.send(""request_move_to"", thisFloorN)

            calledHere = true
        end
    end
end


network.on(""register_floorN_at_distance"", function(distance, floorN)
    if network.dist() == distance then
        thisFloorN = floorN
        printNative(""Registered floor number "" .. thisFloorN)

        -- Report lift location if it happens to be here
        if boolXor(C_RS_LIFT_DETECT_INVERTED, rs.getInput(C_RS_LIFT_DETECT_SIDE)) then
            network.send(""report_lift_location"", thisFloorN)
            printNative(""Reported lift to be here"")
        end
    end
end)
network.on(""liftcontroller_startup"", async.wrap(function()
    -- Rerequest the floor number
    printNative(""Lift controller (re)booted, (re)requesting floor number..."")
    os.reboot()
end))
network.on(""update_floorN"",
    function(previousFloorN, floorN)
        if previousFloorN == thisFloorN then
            thisFloorN = floorN
            printNative(""Updated floor number to "" .. thisFloorN)
        end
    end)
network.on(""update_direction"", async.wrap(function(dir)
    direction = dir

    sign = direction == ""up"" and PUSIGN.UP or direction == ""down"" and PUSIGN.DOWN or PUSIGN.STILL

    if direction == ""still"" and liftFloorN == thisFloorN then
        -- Lift arrived here
        calledHere = false
        setDoors(true)
    end
end))
network.on(""update_lift_floorN"", function(floorN)
    liftFloorN = floorN
end)
network.on(""prepare_movement"", function(dest)
    destFloorN = dest

    if liftFloorN == thisFloorN then
        setDoors(false)
        sleep(1)
        network.send(""lift_ready"")
    end
end)
network.on(""floorcontroller_alive_check"", function()
    if thisFloorN ~= nil then
        network.send(""floorcontroller_report_alive"", thisFloorN)
    end
end)


-- Init
setDoors(false)

network.connectWireless(C_MODEM_CHANNEL) -- TODO?: Make wired work as well

network.send(""request_floorN"")


-- Event loop
async.queue(render)
async.queue(touchEvent)
async.queue(network.main)
async.main()
"
WHgnV8Fh,ComputerCraft Automatic Turtle Farm,Lionkey,Lua,Friday 4th of August 2023 06:02:19 PM CDT,"-- To create a farm, create a complete boundary around the dirt or grass area
-- that you want the farm to be inside. Then add water to ensure the field stays
-- fully watered. The field may be any height - the turtle will automatically
-- move up or down to continue farming. The field may also be non-rectangular,
-- but it will not detect single holes in a straight line going across the field.
-- (e.g. if a boundary is at (100, 0) to (100, 100), the boundary may not have a
-- hole taken out at (100, 25) to (100, 50).)
--
-- The turtle dispenses items when it reaches the origin point, which is the
-- place where the turtle was when the farm was started. This point must have a
-- modem next to it, with one or more chests placed next to that modem. The
-- program will prompt you to set this up if not present. (Make sure to right-
-- click the modem to turn it red and enable it.) Whenever the turtle returns to
-- this point, it will dispense all items except one stack of seeds and one stack
-- of fuel. If either of these stacks are not present, it will pick them up from
-- the chests.
--
-- Farms may have multiple different types of crops, and the turtle will attempt
-- to replace them with the same type of seed. However, these will have to be
-- planted beforehand - when planting the first crops, it will use whatever
-- seeds are found in the chest or turtle first.

local x, y, z = 0, 0, 0
local direction = 0
local invertDirection = false
local exchangeDelay = tonumber(...)
print(exchangeDelay)

-- Ground blocks that are part of the farm
local groundBlocks = {
    [""minecraft:dirt""] = true,
    [""minecraft:grass_block""] = true,
    [""minecraft:farmland""] = true,
    [""minecraft:water""] = true,
    [""minecraft:flowing_water""] = true,
	[""minecraft:soul_soil""] = true,
    [""minecraft:soul_sand""] = true,
    -- add your own here:
    --[""<yourmod>:<block>""] = true,
}

-- Blocks that are crops, with their maximum ages
local cropBlocks = {
    [""minecraft:wheat""] = 7,
    [""minecraft:carrots""] = 7,
    [""minecraft:potatoes""] = 7,
    [""minecraft:beetroots""] = 3,
    [""xps:xp_berrie_bush_block""] = 7,
    [""minecraft:nether_wart""] = 3,
    -- add your own here:
    --[""<yourmod>:<block>""] = <maximum age>,
}

-- Mappings of crop blocks to seed items
local seeds = {
    [""minecraft:wheat""] = ""minecraft:wheat_seeds"",
    [""minecraft:carrots""] = ""minecraft:carrot"",
    [""minecraft:potatoes""] = ""minecraft:potato"",
    [""minecraft:beetroots""] = ""minecraft:beetroot_seeds"",
    [""xps:xp_berrie_bush_block""] = ""xps:xp_berries_seeds"",
    [""minecraft:nether_wart""] = ""minecraft:nether_wart"",
    -- add your own here:
    --[""<yourmod>:<block>""] = ""<yourmod>:<seed>"",
}

-- Fuel types to pull from a chest if no fuel is in the inventory
local fuels = {
    [""minecraft:coal""] = true,
    [""minecraft:charcoal""] = true,
    [""minecraft:lava_bucket""] = true,
    -- add your own here:
    --[""<yourmod>:<item>""] = true,
}

local seedItems = {}
for k, v in pairs(seeds) do seedItems[v] = k end

local function writePos()
    local file = fs.open(""jackmacwindows.farm-state.txt"", ""w"")
    file.writeLine(x)
    file.writeLine(y)
    file.writeLine(z)
    file.writeLine(direction)
    file.writeLine(invertDirection and ""true"" or ""false"")
    file.close()
end

local function refuel()
    if turtle.getFuelLevel() == ""unlimited"" or turtle.getFuelLevel() == turtle.getFuelLimit() then return end
    for i = 1, 16 do
        if turtle.getItemCount(i) > 0 then
            turtle.select(i)
            turtle.refuel(turtle.getItemCount() - 1)
            if turtle.getFuelLevel() == turtle.getFuelLimit() then return true end
        end
    end
    if turtle.getFuelLevel() > 0 then return true
    else return false, ""Out of fuel"" end
end

local function forward()
    local ok, err = turtle.forward()
    if ok then
        if direction == 0 then x = x + 1
        elseif direction == 1 then z = z + 1
        elseif direction == 2 then x = x - 1
        else z = z - 1 end
        writePos()
        return true
    elseif err:match ""[Ff]uel"" then
        ok, err = refuel()
        if ok then return forward()
        else return ok, err end
    else return false, err end
end

local function back()
    local ok, err = turtle.back()
    if ok then
        if direction == 0 then x = x - 1
        elseif direction == 1 then z = z - 1
        elseif direction == 2 then x = x + 1
        else z = z + 1 end
        writePos()
        return true
    elseif err:match ""[Ff]uel"" then
        ok, err = refuel()
        if ok then return forward()
        else return ok, err end
    else return false, err end
end

local function up()
    local ok, err = turtle.up()
    if ok then
        y = y + 1
        writePos()
        return true
    elseif err:match ""[Ff]uel"" then
        ok, err = refuel()
        if ok then return forward()
        else return ok, err end
    else return false, err end
end

local function down()
    local ok, err = turtle.down()
    if ok then
        y = y - 1
        writePos()
        return true
    elseif err:match ""[Ff]uel"" then
        ok, err = refuel()
        if ok then return forward()
        else return ok, err end
    else return false, err end
end

local function left()
    local ok, err = turtle.turnLeft()
    if ok then
        direction = (direction - 1) % 4
        writePos()
        return true
    else return false, err end
end

local function right()
    local ok, err = turtle.turnRight()
    if ok then
        direction = (direction + 1) % 4
        writePos()
        return true
    else return false, err end
end

local function panic(msg)
    term.clear()
    term.setCursorPos(1, 1)
    term.setTextColor(colors.red)
    print(""An unrecoverable error occured while farming:"", msg, ""\nPlease hold Ctrl+T to stop the program, then solve the issue described above, run 'rm jackmacwindows.farm-state.txt', and return the turtle to the start position. Don't forget to label the turtle before breaking it."")
    if peripheral.find(""modem"") then
        peripheral.find(""modem"", rednet.open)
        rednet.broadcast(msg, ""jackmacwindows.farming-error"")
    end
    local speaker = peripheral.find(""speaker"")
    if speaker then
        while true do
            speaker.playNote(""bit"", 3, 12)
            sleep(1)
        end
    else while true do os.pullEvent() end end
end

local function check(ok, msg) if not ok then panic(msg) end end

local function tryForward()
    local ok, err, found, block
    repeat
        found, block = turtle.inspect()
        if found then
            if groundBlocks[block.name] or cropBlocks[block.name] then
                ok, err = up()
                if not ok then return ok, err end
            else return false, ""Out of bounds"" end
        end
    until not found
    ok, err = forward()
    if not ok then return ok, err end
    local lastY = y
    repeat
        found, block = turtle.inspectDown()
        if not found then
            ok, err = down()
            if not ok then return ok, err end
        end
    until found
    if groundBlocks[block.name] then
        ok, err = up()
        if not ok then return ok, err end
        turtle.digDown()
    elseif not cropBlocks[block.name] then
        while y < lastY do
            ok, err = up()
            if not ok then return ok, err end
        end
        ok, err = back()
        if not ok then return ok, err end
        return false, ""Out of bounds""
    end
    return true
end

local function selectItem(item)
    local lut = {}
    if type(item) == ""table"" then
        if item[1] then for _, v in ipairs(item) do lut[v] = true end
        else lut = item end
    else lut[item] = true end
    local lastEmpty
    for i = 1, 16 do
        local info = turtle.getItemDetail(i)
        if info and lut[info.name] then
            turtle.select(i)
            return true, i
        elseif not info and not lastEmpty then lastEmpty = i end
    end
    return false, lastEmpty
end

local function handleCrop()
    local found, block = turtle.inspectDown()
    if not found then
        if selectItem(seedItems) then turtle.placeDown() end
    elseif block.state.age == cropBlocks[block.name] then
        local seed = seeds[block.name]
        turtle.select(1)
        turtle.digDown()
        turtle.suckDown()
        if turtle.getItemDetail().name ~= seed and not selectItem(seed) then return end
        turtle.placeDown()
    end
end

local function exchangeItems()
    local inventory, fuel, seed = {}, nil, nil
    for i = 1, 16 do
        turtle.select(i)
        local item = turtle.getItemDetail(i)
        if item then
            if not seed and seedItems[item.name] then
                seed = {slot = i, name = item.name, count = item.count, limit = turtle.getItemSpace(i)}
            elseif not turtle.refuel(0) then
                inventory[item.name] = inventory[item.name] or {}
                inventory[item.name][i] = item.count
            elseif not fuel then
                fuel = {slot = i, name = item.name, count = item.count, limit = turtle.getItemSpace(i)}
            end
        end
    end
    local name = peripheral.find(""modem"", function(_, v) return not v.isWireless() end).getNameLocal()
    for _, chest in ipairs{peripheral.find(""minecraft:chest"")} do
        local items = chest.list()
        for i = 1, chest.size() do
            if items[i] then
                local item = items[i].name
                if inventory[item] then
                    for slot, count in pairs(inventory[item]) do
                        local d = chest.pullItems(name, slot, count, i)
                        if d == 0 then break end
                        if count - d <= 0 then inventory[item][slot] = nil
                        else inventory[item][slot] = count - d end
                    end
                    if not next(inventory[item]) then inventory[item] = nil end
                elseif fuel and fuel.count < fuel.limit and item == fuel.name then
                    local d = chest.pushItems(name, i, fuel.limit - fuel.count, fuel.slot)
                    fuel.count = fuel.count + d
                elseif seed and seed.count < seed.limit and item == seed.name then
                    local d = chest.pushItems(name, i, seed.limit - seed.count, seed.slot)
                    seed.count = seed.count + d
                end
            end
            if not next(inventory) then break end
        end
        if not next(inventory) then break end
    end
    if next(inventory) then
        for _, chest in ipairs{peripheral.find(""minecraft:chest"")} do
            local items = chest.list()
            for i = 1, chest.size() do
                if not items[i] then
                    local item, list = next(inventory)
                    for slot, count in pairs(list) do
                        local d = chest.pullItems(name, slot, count, i)
                        if d == 0 then break end
                        if count - d <= 0 then list[slot] = nil
                        else list[slot] = count - d end
                    end
                    if not next(list) then inventory[item] = nil end
                end
                if not next(inventory) then break end
            end
            if not next(inventory) then break end
        end
    end
    if not fuel or not seed then
        for _, chest in ipairs{peripheral.find(""minecraft:chest"")} do
            local items = chest.list()
            for i = 1, chest.size() do
                if items[i] and ((fuel and items[i].name == fuel.name and fuel.count < fuel.limit) or (not fuel and fuels[items[i].name])) then
                    local d = chest.pushItems(name, i, fuel and fuel.count - fuel.limit, 16)
                    if fuel then fuel.count = fuel.count + d
                    else fuel = {name = items[i].name, count = d, limit = turtle.getItemSpace(16)} end
                end
                if items[i] and ((seed and items[i].name == seed.name and seed.count < seed.limit) or (not seed and seedItems[items[i].name])) then
                    local d = chest.pushItems(name, i, seed and seed.count - seed.limit, 1)
                    if seed then seed.count = seed.count + d
                    else seed = {name = items[i].name, count = d, limit = turtle.getItemSpace(1)} end
                end
                if (fuel and fuel.count >= fuel.limit) and (seed and seed.count >= seed.limit) then break end
            end
            if (fuel and fuel.count >= fuel.limit) and (seed and seed.count >= seed.limit) then break end
        end
    end
    sleep(exchangeDelay)
end

if fs.exists(""jackmacwindows.farm-state.txt"") then
    local file = fs.open(""jackmacwindows.farm-state.txt"", ""r"")
    x, y, z, direction = tonumber(file.readLine()), tonumber(file.readLine()), tonumber(file.readLine()), tonumber(file.readLine())
    invertDirection = file.readLine() == ""true""
    file.close()
    -- check if we were on a boundary block first
    local found, block, ok, err, boundary
    local lastY = y
    repeat
        found, block = turtle.inspectDown()
        if not found then check(down()) end
    until found
    if groundBlocks[block.name] then
        check(up())
        turtle.digDown()
    elseif not cropBlocks[block.name] then
        if y == lastY then lastY = lastY + 1 end
        while y < lastY do check(up()) end
        while not back() do check(up()) end
        boundary = true
    end
    if direction == 1 or direction == 3 then
        -- we were in the middle of a rotation, finish that before continuing
        local mv = (direction == 0) == invertDirection and left or right
        if boundary then
            check(mv())
            check(mv())
            check(tryForward())
            invertDirection = not invertDirection
            mv = mv == left and right or left
            writePos()
        end
        check(mv())
        handleCrop()
        if x == 0 and z == 0 then
            while y > 0 do check(down()) end
            while y < 0 do check(up()) end
            exchangeItems()
        end
    end
elseif not peripheral.find(""minecraft:chest"") then
    print[[
Please move the turtle to the starting position next to a modem with a chest.
The expected setup is the turtle next to a wired modem block, with a chest next to that modem block.
This program cannot run until placed correctly.
]]
    return
else exchangeItems() end

local ok, err
while true do
    ok, err = tryForward()
    if not ok then
        if err == ""Out of bounds"" then
            local mv = (direction == 0) == invertDirection and left or right
            check(mv())
            ok, err = tryForward()
            if not ok then
                if err == ""Out of bounds"" then
                    check(mv())
                    check(mv())
                    check(tryForward())
                    invertDirection = not invertDirection
                    mv = mv == left and right or left
                    writePos()
                else panic(err) end
            end
            check(mv())
        else panic(err) end
    end
    handleCrop()
    if x == 0 and z == 0 then
        while y > 0 do check(down()) end
        while y < 0 do check(up()) end
        exchangeItems()
    end
    if turtle.getFuelLevel() < 100 then refuel() end
end
"
eYkDxDj2,probe,KingKevin23,Lua,Friday 4th of August 2023 05:51:02 PM CDT,"turtle.select(1)
turtle.refuel()

while true do
	if turtle.detectDown() then
		if not turtle.digDown() then
			break
		end
	end

	turtle.down()
end

turtle.up()
turtle.up()
turtle.select(2)
turtle.placeDown()
turtle.dig()
turtle.forward()"
TdyTUXBp,wheat,rungholt,Lua,Friday 4th of August 2023 05:29:09 PM CDT,"local x = 7
local y = 7

local function checkFuel()
    local fuel = turtle.getFuelLevel()
    if (fuel < 200) then
        turtle.select(16)
        turtle.refuel(2)
        turtle.select(1)
    end
end

local function mineX()
    for i = 1, x do
        turtle.digDown()
        turtle.select(1)
        turtle.placeDown()
        turtle.forward()
    end
end

local function changeRight()
    turtle.turnRight()
    turtle.forward()
    turtle.turnRight()
end

local function changeLeft()
    turtle.turnLeft()
    turtle.forward()
    turtle.turnLeft()
end

local function fullMine()
    mineX()
    changeRight()
    mineX()
    changeLeft()
    mineX()
    changeRight()
    mineX()
    changeLeft()
    mineX()
    changeRight()
    mineX()
    changeLeft()
    mineX()
    turtle.turnLeft()
end

local function goHomeY()
    for i = 1, y - 1 do
        turtle.forward()
    end
    turtle.turnLeft()
end

local function goHomeX()
    for i = 1, x do
        turtle.forward()
    end
    turtle.turnLeft()
    turtle.turnLeft()
end

local function itemsOut()
    for i = 2, 15 do
        turtle.select(i)
        turtle.dropDown()
    end
    turtle.select(1)
end

local function startMine()
    checkFuel()
    turtle.forward()
    fullMine()
    goHomeY()
    goHomeX()
    itemsOut()
end

while true do
    startMine()
    sleep(300)
end
"
DRnXWY1M,Chevalet V2.0,fastoch13,C++,Friday 4th of August 2023 05:11:11 PM CDT,"#include <Arduino.h>
#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>
#include <WiFiClient.h>
#include <WiFiClientSecure.h>
#include <ESP8266WebServer.h>
#include <LittleFS.h>
#include <PubSubClient.h>
#include <ESP8266WiFi.h>
#include <SPI.h>
#include <MFRC522.h>

#define SS_PIN D8
#define RST_PIN D3
MFRC522 mfrc522(SS_PIN, RST_PIN);

ESP8266WebServer server(80);
WiFiClient wifiClient;

/* MQTT */
const char* mqttServer         = ""192.168.1.55"";
const int   mqttPort           = 1883;
const char* mqttUser           = """";
const char* mqttPassword       = """";
const char* mqttTopic          = ""timestamp_topic"";

const char* ssidAP             = ""Chevalet"";
const char* passwordAP         = ""Password"";
const char* configFile         = ""/config.txt"";
const char* adminUsername      = ""Admin"";
const char* adminPassword      = ""flagstuff"";
int         connectionAttempts = 0;

char* last_card_id = """";


String ssid;
String password;
//String apiKey;
String ID;
String owner;
String hostnameAP = ""Chevalet Libre"";
//String Server;

PubSubClient mqttClient(wifiClient);

void mqttCallback(char* topic, byte* payload, unsigned int length) 
{
    // Handle incoming MQTT messages if needed
    // You can add your own logic here
}

void mqttConnect() 
{
    Serial.print(""Connecting to MQTT..."");

    mqttClient.setServer(mqttServer, mqttPort);
    mqttClient.setCallback(mqttCallback);

    while (!mqttClient.connected()) 
    {
        if (mqttClient.connect(""WemosD1MiniPro"", mqttUser, mqttPassword)) 
        {
            Serial.println(""Connected to MQTT!"");
            mqttClient.subscribe(mqttTopic);
        } 
        else 
        {
            Serial.print(""Failed, rc="");
            Serial.print(mqttClient.state());
            Serial.println("" Retrying in 5 seconds..."");
            delay(5000);
        }
    }
}







/* end MQTT */

void handleRoot()
{
    if (!server.authenticate(adminUsername, adminPassword)) { return server.requestAuthentication(); }

    String _ssid(ssid);
    String _password(password);
    String _owner(owner);
    String _ID(ID);
    String _mqttServer(mqttServer);
    String _mqttPort(mqttPort);
    String _mqttUser(mqttUser);
    String _mqttPassword(mqttPassword);
    String _mqttTopic(mqttTopic);

    String title = ""<title>"" + owner + ID + ""</title>"";
    String html = """";
    html += ""<html>"";
    html += ""   <head>"" + title + ""</head>"";
    html += ""   <body>"";
    html += ""       <h1>Chevalet Setup</h1>"";
    html += ""       <form method='post' action='/save'>"";
    html += ""           <label>SSID:        </label><br><input type='text'     name='ssid'          value='"" + _ssid + ""'        ><br>"";
    html += ""           <label>Password:    </label><br><input type='password' name='password'      value='"" + _password + ""'    ><br>"";
    html += ""           <label>Owner:       </label><br><input type='text'     name='owner'         value='"" + _owner + ""'       ><br>"";
    html += ""           <label>ID:          </label><br><input type='text'     name='ID'            value='"" + _ID + ""'          ><br>"";
    html += ""           <label>MQTT Server  </label><br><input type='text'     name='mqttServer'    value='"" + _mqttServer + ""'  ><br>"";
    html += ""           <label>MQTT Port    </label><br><input type='text'     name='mqttPort'      value='"" + _mqttPort + ""'    ><br>"";
    html += ""           <label>MQTT Username</label><br><input type='text'     name='mqttUser'      value='"" + _mqttUser + ""'    ><br>"";
    html += ""           <label>MQTT Password</label><br><input type='text'     name='mqttPassword'  value='"" + _mqttPassword + ""'><br>"";
    html += ""           <label>MQTT Topic   </label><br><input type='text'     name='mqttTopic'     value='"" + _mqttTopic + ""'   ><br>"";
    html += ""           <inputtype='submit' value='Save and restart'>"";
    html += ""       </form>"";
    html += ""   </body>"";
    html += ""</html>"";
    server.send(200, ""text/html"", html);
}



void handleBravo() 
{
    if (!server.authenticate(adminUsername, adminPassword)) { return server.requestAuthentication(); }
    String html = ""<html><title>""+owner + ID+""</title>"";
    html += ""<body><h1>CONGRATULATION!</h1>"";
    html += ""<script>function check_card(){}</script>"";
    html += ""<p>Your order ""+ ID +"" is ready</p>"";
    html += ""<script>settimout(check_card; 3000);</script>"";
    html += ""</body></html>"";
    server.send(200, ""text/html"", html);
}

////
void handleSave() 
{
    if (!server.authenticate(adminUsername, adminPassword)) { return server.requestAuthentication(); }
 
    ssid            = server.arg(""ssid"");
    password        = server.arg(""password"");
    owner           = server.arg(""owner"");
    ID              = server.arg(""ID"");
    mqttServer      = server.arg(""mqttServer"");
    mqttPort        = server.arg(""mqttPort"");
    mqttUser        = server.arg(""mqttUser"");
    mqttPassword    = server.arg(""mqttPassword"");
    mqttTopic       = server.arg(""mqttTopic"");
 
    File configFile = LittleFS.open(""/config.txt"", ""w""); 
    if (!configFile) { Serial.println(""Error opening configuration file""); return; }
 
    configFile.println(ssid);
    configFile.println(password);
    configFile.println(owner);
    configFile.println(ID);
    configFile.println(mqttServer);
    configFile.println(mqttPort);
    configFile.println(mqttUser);
    configFile.println(mqttPassword);
    configFile.println(mqttTopic);
    configFile.close();

    server.send(200, ""text/plain"", ""Configuration saved. Restart in progress..."");
    delay(2000);
    ESP.restart();
}

bool connectToWifi() 
{
    connectionAttempts = 0;
    delay(1000);
    Serial.print(""."");

    connectionAttempts++;
    if (connectionAttempts > 20) 
    {
        Serial.println("""");
        Serial.println(""WiFi network failed to connect. Startup in AP mode"");
        WiFi.disconnect();
        WiFi.hostname(hostnameAP);
        WiFi.softAP(ssidAP, passwordAP);
        WiFi.hostname(hostnameAP);

        Serial.print(""Access point IP address: "");
        Serial.println(WiFi.softAPIP());
        Serial.print(""Mot de passe du point d'accès: "");
        Serial.println(passwordAP);

        server.on(""/"", handleRoot);
        server.on(""/save"", HTTP_POST, handleSave);
        //server.on(""/led"", handleLed); // Ajout de la gestion de l'allumage des LEDs
        server.begin();
        return true;
    }
    else
    {
        return false;
    }
}

void handleSuccess() 
{
    if (!server.authenticate(adminUsername, adminPassword)) { return server.requestAuthentication(); }
 
    String html = ""<html><title>"" + owner + ID + ""</title>"";
    html += ""<body><h1>Successful connection</h1>"";
    html += ""<p>SSID: ""    + ssid + ""</p>"";
    html += ""<p>Owner: ""   + owner + ""</p>"";
    html += ""<p>Server: ""  + mqttServer + ""</p>"";
    html += ""<label for='ID'>Number:</label><br>"";
    html += ""<input type='number' name='ID' id='ID' value='"" + ID + ""'><br>"";
    //html += ""<a href='/"" + apiKey + ""'>Go To Animation Page</a>""; // Ajout du lien
    html += ""<form method='post' action='/save'>"";
    html += ""<input type='submit' value='Save'>"";
    html += ""</form>"";
    html += ""<form method='post' action='/cancel'>"";
    html += ""<input type='submit' value='Cancel'>"";
    html += ""</form>"";
    html += ""<form method='post' action='/reset'>"";
    html += ""<input type='submit' value='Erase configuration and restart in AP mode'>"";
    html += ""</form>"";
    html += ""<form method='post' action='/led'>"";
    html += ""<input type='submit' value='Test LEDs'>"";
    html += ""</form>"";
    html += ""</body></html>"";
    server.send(200, ""text/html"", html);
}

void handleReset() 
{
    if (!server.authenticate(adminUsername, adminPassword)) { return server.requestAuthentication(); }
 
    LittleFS.remove(configFile);
    server.send(200, ""text/plain"", ""Configuration erased. Restart in progress..."");
    delay(2000);
    ESP.restart();
}

void handleCancel() 
{
    if (!server.authenticate(adminUsername, adminPassword)) { return server.requestAuthentication(); }
    server.send(200, ""text/plain"", ""Configuration cancelled. Restart in progress..."");
    delay(2000);
    ESP.restart();
}

void handleNotFound() 
{
    String html = ""<html><body>"";
    html += ""<h1>Page not found</h1>"";
    html += ""<p>The requested page does not exist.</p>"";
    html += ""</body></html>"";
    server.send(404, ""text/html"", html);
}

void onStationModeGotIP(const WiFiEventStationModeGotIP& event) 
{
    server.sendHeader(""Location"", String(""http://"") + WiFi.localIP().toString(), true);
    server.send(302, ""text/plain"", """");
}

void ConnectedAnimation() 
{

}

/////////////////////////////////////////////////////

char* checkCard()
{
    String cardData = """";
    if (mfrc522.PICC_IsNewCardPresent() && mfrc522.PICC_ReadCardSerial()) 
    {
        String content = ""Card Detected!<br>Card ID: "";
        for (byte i = 0; i < mfrc522.uid.size; i++) 
        {
            content.concat(String(mfrc522.uid.uidByte[i] < 0x10 ? "" 0"" : "" ""));
            content.concat(String(mfrc522.uid.uidByte[i], HEX));
        }
        cardData = ""data: "" + content;
    } 
    char * val;
    strcpy(val, cardData.c_str());
    return val;
}

void setup() 
{
    Serial.begin(115200);
    delay(100);

    if (!LittleFS.begin()) { Serial.println(""Error initializing LittleFS""); return; }

    if (!LittleFS.exists(configFile))
    {
        Serial.println(""No configuration file found. Startup in AP mode"");
        WiFi.softAP(ssidAP, passwordAP);
        WiFi.hostname(hostnameAP);
        
        Serial.print(""Access point IP address: "");
        Serial.println(WiFi.softAPIP());
        Serial.print(""Access point password: "");
        Serial.println(passwordAP);

        server.on(""/"", handleRoot);
        server.on(""/save"", HTTP_POST, handleSave);
        //server.on(""/"" + apiKey, handleAnimation); //

        server.begin();
        return;
    }

    File configFile = LittleFS.open(""/config.txt"", ""r"");
    
    if (!configFile) { Serial.println(""Error opening configuration file""); return; }

    ssid            = configFile.readStringUntil('\n'); ssid.trim();
    password        = configFile.readStringUntil('\n'); password.trim();
    owner           = configFile.readStringUntil('\n'); owner.trim();
    ID              = configFile.readStringUntil('\n'); ID.trim();
    mqttServer      = configFile.readStringUntil('\n'); mqttServer.trim();
    mqttPort        = configFile.readStringUntil('\n'); mqttPort.trim();
    mqttUser        = configFile.readStringUntil('\n'); mqttUser.trim();
    mqttPassword    = configFile.readStringUntil('\n'); mqttPassword.trim();
    mqttTopic       = configFile.readStringUntil('\n'); mqttTopic.trim();

    configFile.close();

    WiFi.hostname(owner + ID);
    WiFi.begin(ssid.c_str(), password.c_str());
    int connectionAttempts = 0;
    while (WiFi.status() != WL_CONNECTED) 
    {
        delay(1000);
        Serial.print(""."");
        connectionAttempts++;

        if (connectionAttempts > 20) 
        {
            Serial.println("""");
            Serial.println(""WiFi network failed to connect. Startup in AP mode"");
            WiFi.disconnect();
            WiFi.hostname(hostnameAP);
            WiFi.softAP(ssidAP, passwordAP);
            WiFi.hostname(hostnameAP);
            //APAnimation();
            Serial.print(""Access point IP address: "");
            Serial.println(WiFi.softAPIP());
            Serial.print(""Mot de passe du point d'accès: "");
            Serial.println(passwordAP);
            server.on(""/"", handleRoot);
            server.on(""/save"", HTTP_POST, handleSave);
            //server.on(""/led"", handleLed); // Ajout de la gestion de l'allumage des LEDs
            server.begin();
            return;
        }
    }

    Serial.println("""");
    Serial.println(""WiFi network connection established"");
    Serial.print(""IP address: "");
    Serial.println(WiFi.localIP());
    WiFi.hostname(owner + ID);
    ConnectedAnimation();

    server.on(""/"", handleSuccess);
    server.on(""/save"", HTTP_POST, handleSave);
    server.on(""/cancel"", HTTP_POST, handleCancel);
    server.on(""/reset"", HTTP_POST, handleReset);
    server.onNotFound(handleNotFound);
    server.begin();

    mqttConnect();
    
}

void loop() 
{
    server.handleClient();

   /**/
    if (wifiClient.status() == WL_CONNECTED)
    {
        if (mqttClient.connected()) 
        {
            const char* cardid = checkCard();
            if (strcmp(cardid, """")==0)
            {
                last_card_id = cardid; 
                mqttClient.publish(mqttTopic, cardid);
                //Serial.println(""Published: "" + cardid);
            }
            delay(1000);
        }
        else 
        {
            mqttConnect();
        }
    }
    else
    {
        if (!connectToWifi())
        {
            // run config
        }        
    }
}"
vtxdUcCU,Doomspire brickbattle OP Script,Showbe,Lua,Friday 4th of August 2023 04:49:23 PM CDT,"local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
    Name = ""Jim's Doomspire Brickbattle Cheats"",
    LoadingTitle = ""Doomspire Brickbattle cheats"",
    LoadingSubtitle = ""by lingonjr"",
    ConfigurationSaving = {
       Enabled = true,
       FolderName = nil, -- Create a custom folder for your hub/game
       FileName = ""Big Hub""
    },
    Discord = {
       Enabled = true,
       Invite = ""https://discord.gg/jYUCn5VTVY"", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
       RememberJoins = true -- Set this to false to make them join the discord every time they load it up
    },
    KeySystem = false, -- Set this to true to use our key system
    KeySettings = {
       Title = ""Untitled"",
       Subtitle = ""Key System"",
       Note = ""No method of obtaining the key is provided"",
       FileName = ""Key"", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
       SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
       GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
       Key = {""Hello""} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings (""hello"",""key22"")
    }
 })

 local PlayerTab = Window:CreateTab(""Player"", 4483362458) -- Title, Image
 local Section = PlayerTab:CreateSection(""Player"")

 -- Notification
 Rayfield:Notify({
   Title = ""Uni Hub"",
   Content = ""Uni Hub Has Successfully Loaded"",
   Duration = 6.5,
   Image = 4483362458,
})

local WalkspeedSlider = PlayerTab:CreateSlider({
    Name = ""Walkspeed Slider"",
    Range = {0, 1000},
    Increment = 1,
    Suffix = ""Walkspeed"",
    CurrentValue = 10,
    Flag = ""WalkspeedSlider"",
    Callback = function(Value)  
        -- Get the LocalPlayer
        local player = game.Players.LocalPlayer
        
        -- Get the character and humanoid
        local character = player.Character
        local humanoid = character:FindFirstChild(""Humanoid"")
        
        -- Update the WalkSpeed
        if humanoid then
            humanoid.WalkSpeed = Value
        end
    end,
})

local DefaultWalkspeedButton = PlayerTab:CreateButton({
   Name = ""Default Walkspeed"",
   Callback = function() 
    WalkspeedSlider:Set(16) -- Updates walkspeed to 16 including slider position
   end,
})

local JumpHeightSlider = PlayerTab:CreateSlider({
    Name = ""Jump Height Slider"",
    Range = {0, 200},
    Increment = 1,
    Suffix = ""Height"",
    CurrentValue = 10,
    Flag = ""JumpHeightSlider"",
    Callback = function(Value)  
        -- Get the LocalPlayer
        local player = game.Players.LocalPlayer
        
        -- Get the character and humanoid
        local character = player.Character
        local humanoid = character:FindFirstChild(""Humanoid"")
        
        -- Update the WalkSpeed
        if humanoid then
            humanoid.JumpPower = Value
        end
    end,
})

local DefaultJumpPowerButton = PlayerTab:CreateButton({
   Name = ""Default Jump Height"",
   Callback = function() 
    JumpHeightSlider:Set(50) -- Updates Jump Power to 50 including slider position
   end,
})

local DoomspireTab = Window:CreateTab(""Doomspire Brickbattle"", 4483362458) -- Title, Image
 local DoomspireSection = DoomspireTab:CreateSection(""Doomspire Brickbattle"")

 local TpLabel = DoomspireTab:CreateLabel(""Teleportation"")
 local DoomspireSection = DoomspireTab:CreateSection(""Red"")

 local RedUpButton = DoomspireTab:CreateButton({
    Name = ""Top"",
    Callback = function()
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-92,131,-1.1)
    end,
 })

 local RedDownButton = DoomspireTab:CreateButton({
    Name = ""Bottom"",
    Callback = function()
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-131,25,-1.51)
    end,
 })

 local DoomspireSection = DoomspireTab:CreateSection(""Blue"")

 local BlueUpButton = DoomspireTab:CreateButton({
    Name = ""Top"",
    Callback = function()
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-2.3,131,91)
    end,
 })

 local BlueDownButton = DoomspireTab:CreateButton({
    Name = ""Bottom"",
    Callback = function()
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-0.4,25,131)
    end,
 })

 local DoomspireSection = DoomspireTab:CreateSection(""Green"")

 local GreenUpButton = DoomspireTab:CreateButton({
    Name = ""Top"",
    Callback = function()
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(1.4,131,-81)
    end,
 })

 local GreenDownButton = DoomspireTab:CreateButton({
    Name = ""Bottom"",
    Callback = function()
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-0.4,25,-131)
    end,
 })

 local DoomspireSection = DoomspireTab:CreateSection(""Yellow"")

 local YellowUpButton = DoomspireTab:CreateButton({
    Name = ""Top"",
    Callback = function()
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(86,131,1)
    end,
 })

 local YellowDownButton = DoomspireTab:CreateButton({
    Name = ""Bottom"",
    Callback = function()
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(131,25,-1.5)
    end,
 })"
7up5gSkz,ComputerCraft Async API [v0.2],qjnr,Lua,Friday 4th of August 2023 04:09:17 PM CDT,"-- ComputerCraft Async API [v0.2]

local expect = require(""cc.expect"")

local async = {}

local coroutines = {}
local filters = {}
local eventData = { n = 0 }
local nextId = 1

local function create(task, ...)
    local args = table.pack(...)
    return coroutine.create(function() task(table.unpack(args)) end)
end

local function resume(r)
    local ok, param = coroutine.resume(r, table.unpack(eventData, 1, eventData.n)) --? should be possible to shorten this to just table.unpack(eventData) - this is the code used in the parallel API though...

    if not ok then
        error(param, 0)
    else
        filters[r] = param
    end
end


-- Queues a task for execution
function async.queue(task, ...)
    expect(1, task, ""function"")

    coroutines[create(task, ...)] = 0 -- only wrapped tasks get assigned an id
end

-- Queues a task and immediately handles execution over to it
-- Upon suspension, execution is handled back over to the previous task
function async.exec(task, ...)
    expect(1, task, ""function"")

    local r = create(task, ...)
    resume(r)
    if coroutine.status(r) ~= ""dead"" then
        coroutines[r] = 0 -- only wrapped tasks get assigned an id
    end
end

function async.wrap(task)
    expect(1, task, ""function"")

    local id = nextId
    nextId = nextId + 1

    local wrappedTask = {
        killSuspended = function()
            for r, _id in pairs(coroutines) do
                if _id == id then coroutines[r] = nil end
            end
        end
    }

    setmetatable(wrappedTask, {
        __call = function(_, ...)
            local r = create(task, ...)
            resume(r)
            if coroutine.status(r) ~= ""dead"" then coroutines[r] = id end
        end
    })

    return wrappedTask
end

function async.main()
    while true do
        local anyAlive = false

        for r, _ in pairs(coroutines) do
            if filters[r] == nil or filters[r] == eventData[1] or eventData[1] == ""terminate"" then
                resume(r)
            end

            if coroutine.status(r) == ""dead"" then
                coroutines[r] = nil
            else
                anyAlive = true
            end
        end

        if not anyAlive then return end

        eventData = table.pack(os.pullEventRaw())
    end
end

return async
"
1r1fhP3P,Python plot random points,informaticage,Python,Friday 4th of August 2023 03:41:59 PM CDT,"#generate random tuple
import random
points = [(random.randint(0, 100), random.randint(0, 100)) for x in range(0, 10)]

# plot on a graph
import matplotlib.pyplot as plt
x = [p[0] for p in points]
y = [p[1] for p in points]
plt.plot(x, y, 'ro')
plt.show()
"
FNuWA8cx,pulp_rpm pytest error,mikedep333,JSON,Friday 4th of August 2023 03:34:48 PM CDT,"{
  ""pulp"": {
    ""auth"": [
      ""admin"",
      ""vnGUzKZtOdbNIbapaCadeXgtmsGAL4lU""
    ],
    ""selinux enabled"": false,
    ""version"": ""3""
  },
  ""hosts"": [
    {
      ""hostname"": ""cs-pulp-api-svc"",
      ""roles"": {
        ""api"": {
          ""port"": 24817,
          ""scheme"": ""http"",
          ""service"": ""nginx""
        },
        ""content"": {
          ""port"": 24816,
          ""scheme"": ""http"",
          ""service"": ""cs-pulp-content-svc""
        },
        ""pulp resource manager"": {},
        ""pulp workers"": {},
        ""redis"": {},
        ""shell"": {
          ""transport"": ""local""
        }
      }
    }
  ]
}
"
rWdfUdRL,Scraper update,NickMarcha,TypeScript,Friday 4th of August 2023 03:21:26 PM CDT,"/**
 * Scrapes a page for donations
 * @param page Root Page Cheerio instance
 * @returns donation array
 */
function scrapePage(page: cheerio.Root): Donation[] {
  const vOneRows = page(`${tableSelector} ${rowSelectorOne}`);
  const vTwoRows = page(`${tableSelector} ${rowSelectorTwo}`);
  let allRows: cheerio.Element[] = [];

  vOneRows.each((index, element) => {
    allRows.push(element);
    allRows.push(vTwoRows[index]);
  });

  return allRows
    .map((row) => {
      return scrapeDonation(page, row);
    })
    .filter((donation) => !donation.isEmpty());
}

/**
 * Scrapes a donation from a row
 * @param root Root Page Cheerio instance
 * @param element donation row
 * @returns Donation object
 */
function scrapeDonation(
  root: cheerio.Root,
  element: cheerio.Element
): Donation {
  const rowData: cellEntry[] = [];
  // Iterate over each cell of the row using the find and each methods
  root(element)
    .find(""td, th"")
    .each((j, cell) => {
      // Add the cell data to the row data object
      rowData.push({ data: root(cell), index: j });
    });

  const sortedData = rowData
    .sort((a, b) => a.index - b.index)
    .map((a) => a.data);

  const flagCodeStr = sortedData[0]
    .children()
    .first()
    .attr(""class"")
    ?.split(""-"")[1];

  const flagCode = flagCodeStr ? flagCodeStr : ""none"";
  const sponsor = sortedData[1].text().trim();
  const date = sortedData[2].text().trim();
  const location = sortedData[3].text().trim();

  function parseDollars(str: string) {
    if (str === """") return 0;
    try {
      const regex: RegExp = /[\d.]+/gs;
      const match = str.match(regex);
      if (match != null) {
        const parsed = parseFloat(match[0]);
        if (isNaN(parsed)) {
          throw new Error(""NaN: "" + JSON.stringify(match));
        }
        return parsed;
      }
      throw new Error(""No match"");
    } catch (e) {
      console.log(e);
      return 0;
    }
  }
  const amount = parseDollars(sortedData[4].children().first().text().trim());

  const USDollarAmount = parseDollars(sortedData[5].text().trim());
  const giftAid = parseDollars(sortedData[6].text().trim());
  const message = sortedData[7].text().trim();

  let distributionFlag = ""none"";

  try {
    const data = sortedData[8]
      .children()
      .first()
      .children()
      .last()
      .attr(""class"")
      ?.split(""-"")[1];
    distributionFlag = data ? data : distributionFlag;
  } catch (e) {
    console.log(""Distribution flag error"");
    console.log(e);
  }

  let distributionStatus = ""none"";

  try {
    const title = sortedData[9].children().first()?.attr(""title"");
    if (title === undefined) {
    } else {
      distributionStatus = title;
    }
  } catch (e) {
    console.log(""Distribution status error"");
    console.log(e);
  }

  const numberOfNetsFunded = parseInt(sortedData[10].text());
  const numberOfPeopleSaved = parseInt(sortedData[11].text());
  const newDonation = new Donation(
    flagCode,
    sponsor,
    date,
    location,
    amount,
    USDollarAmount,
    giftAid,
    message,
    distributionFlag,
    distributionStatus,
    numberOfNetsFunded,
    numberOfPeopleSaved
  );

  return newDonation;
}"
ng47GLBz,a,kohpriwniranam,GetText,Friday 4th of August 2023 02:54:40 PM CDT,"u96b870be2f1023e506d177b8e141a6bd:aWF0OiAxNjc1OTIzNzAwOTQ1Cg==..4gqw73ZBtHtn3vOFmz6qIT9MpII=
ucd6624ddb543e0cc2a2b995ac8dc32c9:aWF0OiAxNjcwNTE1Nzc4ODY0Cg==..d+udjMXoOqDAI03DI1QDMO5D28s=
u0884f36fcf4d174afb4a9caac4e6f750:aWF0OiAxNjcwNTA5MzE0NzI5Cg==../4lFUiXbHET9qLhEJGVZ4UWPUTk=
udf2748f0243330b54aa023c4f30bb65e:aWF0OiAxNjcwNTExMTcxNzEwCg==..GZodWlK6LwhVrC0mVMSgeoMDaFo=
ud9b48584ab1833737969141bf98a0578:aWF0OiAxNjg5MzI2NDAzMjM0Cg==..yoNDavMwrvYZRJz8/IY43qur6w8="
8jgrbWJd,Farmer SetFieldSize,Silasko,Lua,Friday 4th of August 2023 02:33:12 PM CDT,"local SLOT_COUNT = 16
colLength = 0
rowLength = 0

function refuelTurtle()
    for slot = 1, SLOT_COUNT, 1 do
        turtle.select(slot)
            local item = turtle.getItemDetail(slot)
            if (turtle.refuel(2)) then 
                print(""Turtle refueled"")
                return true
            end
    end
end

function checkFuel()
    local fuel = turtle.getFuelLevel()
    if(fuel < 20) then
       refuelTurtle()
    else
        print(""No fuel needed"")
    end
end

function detectStartPoint()
    local state, itemName = turtle.inspectDown()
    if(itemName.name == ""minecraft:log"") then
        checkFuel()
        defx,defy,defz = gps.locate()
        print(""Default GPS coords: "",defx,defy,defz)
        turtle.up()
        turtle.forward()
    end
end

function detectFieldColSize()
    while turtle.detect() == false do
        turtle.forward()
    end
        local state, itemName = turtle.inspect()
        if(itemName.name == ""minecraft:fence"") then
                local x,y,z = gps.locate()
                print(""GPS coords: "",x,y,z)
                leng = math.abs(defx-x)
                if(leng > 0) then
                    colLength = leng
                else
                    colLength = math.abs(defz-z)
                end 
            print(""Column length:"",colLength)
        end
    turtle.turnRight()
    detectFieldRowSize()
end

function detectFieldRowSize()
    while turtle.detect() == false do
        turtle.forward()
    end
        local state, itemName = turtle.inspect()
        if(itemName.name == ""minecraft:fence"") then
                local x,y,z = gps.locate()
                print(""GPS coords: "",x,y,z)
                leng = math.abs(defz-z)
                if(leng > 0) then
                    rowLength = leng
                else
                    rowLength = math.abs(defz-z)
                end 
            print(""Row length:"",rowLength)
        end
    turtle.turnRight()
    returnHome()
end

function returnHome()
    col = colLength
    row = rowLength
    while col > 0 do
        turtle.forward()
        col = col-1
    end
    turtle.turnRight()
    while row > 0 do
        turtle.forward()
        row = row-1
    end
    local x,y,z = gps.locate()
    print(""Position:"", x,"" ,"", y, "" ,"", z)
    print(""Return Home completed"")
    turtle.turnRight()
    turtle.down()
end

function moveFarmer()
    turtle.forward()
end

function turnLeft()
    turtle.turnLeft()
    turtle.forward()
    turtle.turnLeft()
end
 
function turnRight()
    turtle.turnRight()
    turtle.forward()
    turtle.turnRight()
end

function start()
    checkFuel()
    detectStartPoint()
    detectFieldColSize()
    print(""Field Detected, starting harvest"")
    turtle.up()
    rowLength = rowLength+1

    for col = 1, rowLength, 1 do
        for row = 1, colLength, 1 do
            moveFarmer()
            print(string.format(""position: column %d   row %d "",col,row))
        end
        --start of each col
        checkFuel()
        if(math.fmod(col,2) == 0) then
            turnLeft()
        else
            turnRight()
        end

    end
    print(""Column length:"",colLength)
    print(""Row length:"",rowLength)
end

start()"
J94i735q,ComputerCraft Network API [v0.1.2],qjnr,Lua,Friday 4th of August 2023 02:29:52 PM CDT,"-- ComputerCraft Network API [v0.1.2]

local network = {}

local _channel = nil
local _modem = nil

local listeners = {}
local messageDistance = nil


function network.connect(modem, channel)
    if modem == nil then error(""couldn't find modem"") end

    _modem = modem
    _channel = channel
    _modem.open(_channel)
end

function network.connectWireless(channel)
    network.connect(peripheral.find(""modem"", function(_, obj) return obj.isWireless() end), channel)
end

function network.connectWired(channel)
    network.connect(peripheral.find(""modem"", function(_, obj) return not obj.isWireless() end), channel)
end

function network.connectNamed(name, channel)
    network.connect(peripheral.find(""modem"", function(_name) return _name == name end), channel)
end

function network.connectSide(side, channel)
    if peripheral.getType(side) ~= ""modem"" then error(""peripheral on "" .. side .. "" is not a modem"") end

    network.connect(peripheral.wrap(""side""), channel)
end

--
function network.send(msg, ...)
    if _modem == nil then error(""not connected"") end

    _modem.transmit(_channel, _channel, table.pack(msg, ...))
end

--
function network.on(msg, fn)
    listeners[msg] = fn
end

function network.waitFor(msg, predicate)
    while true do
        local _, _, _, _, _msg, dist = os.pullEvent(""modem_message"")

        if _msg[1] == msg then
            if predicate then
                messageDistance = dist
                local shouldReturn = predicate(table.unpack(_msg))
                messageDistance = nil
                if shouldReturn then return table.unpack(_msg, dist) end
            else
                return table.unpack(_msg, dist)
            end
        end
    end
end

--
function network.getMessageDistance()
    if messageDistance == nil then error(""dist() / getMessageDistance() is only available in listener functions"") end
    return messageDistance
end

function network.dist()
    return network.getMessageDistance()
end

--
function network.main()
    while true do
        local _, _, _, _, payload, dist = os.pullEvent(""modem_message"")

        local l = listeners[payload[1]]
        if l then
            messageDistance = dist
            l(table.unpack(payload, 2)) -- skip the message itself, only pass params
            messageDistance = nil
        end
    end
end

return network
"
RfdgUdMm,Sword Factory Reforged,paul14134253,Lua,Friday 4th of August 2023 02:19:54 PM CDT,"--SwordFactory reforged gui
--random gui 1st time ever script pretty simple but helpful dm onealivecactus if something is bugged






local Library = loadstring(game:HttpGet(""https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua""))()
local Window = Library.CreateLib(""Sword Factory gui"", ""Midnight"")
local LocalPlayer = game.Players.LocalPlayer

--main
local Main = Window:NewTab(""Main"")
local MainSection = Main:NewSection(""AutoUpgrade"")

MainSection:NewToggle(""AutoUpgrade Molder"", ""Upgrades molder"", function(state)
    if state then
        getgenv()autoupgradeMolder = true
while autoupgradeMolder == true do
wait(0)
local args = {
    [1]= 0,
    [2]= ""UpgradeServer"",
    [3] = ""Upgrade"",
    [4] ={
   [1] =""Molder"",  --put what u want to upgrade in here--
   [2] = 1
  }
}

game:GetService(""ReplicatedStorage"").Framework.RemoteFunction:InvokeServer(unpack(args))
		end
    else
        autoupgradeMolder = false;
    end
end)


MainSection:NewToggle(""AutoUpgrade Polisher"", ""Upgrades Polisher"", function(state)
    if state then
      getgenv()autoupgradePolisher = true;

while autoupgradePolisher == true do
wait(0)
local args = {
    [1]= 0,
    [2]= ""UpgradeServer"",
    [3] = ""Upgrade"",
    [4] ={
   [1] =""Polisher"",  --put what u want to upgrade in here--
   [2] = 1
  }
}

game:GetService(""ReplicatedStorage"").Framework.RemoteFunction:InvokeServer(unpack(args))
		end
    else
        autoupgradePolisher = false;
    end
end)


MainSection:NewToggle(""AutoUpgrade Classifier"", ""Upgrades Classifier"", function(state)
if state then
      getgenv()autoupgradeClassifier = true;

while autoupgradeClassifier == true do
wait(0)
local args = {
    [1]= 0,
    [2]= ""UpgradeServer"",
    [3] = ""Upgrade"",
    [4] ={
   [1] =""Classifier"",  --put what u want to upgrade in here--
   [2] = 1
  }
}

game:GetService(""ReplicatedStorage"").Framework.RemoteFunction:InvokeServer(unpack(args))
		end
    else
        autoupgradeClassifier = false;
    end
end)



MainSection:NewToggle(""AutoUpgrade Upgrader"", ""Upgrades Upgrader"", function(state)
if state then
      getgenv()autoupgradeUpgrader = true;

while autoupgradeUpgrader == true do
wait(0)
local args = {
    [1]= 0,
    [2]= ""UpgradeServer"",
    [3] = ""Upgrade"",
    [4] ={
   [1] =""Upgrader"",  --put what u want to upgrade in here--
   [2] = 1
  }
}

game:GetService(""ReplicatedStorage"").Framework.RemoteFunction:InvokeServer(unpack(args))
		end
    else
        autoupgradeUpgrader = false;
    end
end)


MainSection:NewToggle(""AutoUpgrade Enchanter"", ""Upgrades Enchanter"", function(state)
if state then
      getgenv()autoupgradeEnchanter = true;

while autoupgradeEnchanter == true do
wait(0)
local args = {
    [1]= 0,
    [2]= ""UpgradeServer"",
    [3] = ""Upgrade"",
    [4] ={
   [1] =""Enchanter"",  --put what u want to upgrade in here--
   [2] = 1
  }
}

game:GetService(""ReplicatedStorage"").Framework.RemoteFunction:InvokeServer(unpack(args))
		end
    else
        autoupgradeEnchanter = false;
    end
end)


MainSection:NewToggle(""AutoUpgrade Appraiser"", ""Upgrades Appraiser"", function(state)
if state then
      getgenv()autoupgradeAppraiser = true;

while autoupgradeAppraiser == true do
wait(0)
local args = {
    [1]= 0,
    [2]= ""UpgradeServer"",
    [3] = ""Upgrade"",
    [4] ={
   [1] =""Appraiser"",  --put what u want to upgrade in here--
   [2] = 1
  }
}

game:GetService(""ReplicatedStorage"").Framework.RemoteFunction:InvokeServer(unpack(args))
		end
    else
        autoupgradeAppraiser = false;
    end
end)



--teleports
local player = game.Players.LocalPlayer
local Teleport = Window:NewTab(""Teleport"")
local TeleportSection = Teleport:NewSection(""Teleport"") --thanks ash for helping with tp


TeleportSection:NewButton(""Teleport Noob Island"", ""read"", function()
game.StarterGui:SetCore(""SendNotification"", {Title = ""Must Unlock World 1st"",Text = """",Duration = 5;})
local args = {
   [1]= game:GetService(""ReplicatedStorage"").Data[LocalPlayer.Name].Stats,
   [2]= LocalPlayer.Character,
   [3] = tostring(LocalPlayer),
   [4]= ""Noob Island""
}
game:GetService(""ReplicatedStorage"").Events.ToMap:FireServer(unpack(args))
end)

TeleportSection:NewButton(""Teleport Sand Canyons"", ""read"", function()
local args = {
   [1]= game:GetService(""ReplicatedStorage"").Data[LocalPlayer.Name].Stats,
   [2]= LocalPlayer.Character,
   [3] = tostring(LocalPlayer),
   [4]= ""Sand Canyons""
}
game:GetService(""ReplicatedStorage"").Events.ToMap:FireServer(unpack(args))
end)

TeleportSection:NewButton(""Teleport Icy Plains"", ""read"", function()
local args = {
   [1]= game:GetService(""ReplicatedStorage"").Data[LocalPlayer.Name].Stats,
   [2]= LocalPlayer.Character,
   [3] = tostring(LocalPlayer),
   [4]= ""Icy Plains""
}
game:GetService(""ReplicatedStorage"").Events.ToMap:FireServer(unpack(args))
end)

TeleportSection:NewButton(""Teleport Magma Hills"", ""read"", function()
local args = {
   [1]= game:GetService(""ReplicatedStorage"").Data[LocalPlayer.Name].Stats,
   [2]= LocalPlayer.Character,
   [3] = tostring(LocalPlayer),
   [4]= ""Magma Hills""
}
game:GetService(""ReplicatedStorage"").Events.ToMap:FireServer(unpack(args))
end)





--combat
local Combat = Window:NewTab(""Combat"")
local CombatSection = Combat:NewSection(""Combat"")


CombatSection:NewToggle(""Auto attack"", ""Activate when sword is out"", function(state)
    if state then
    game.StarterGui:SetCore(""SendNotification"", {Title = ""Equip Sword before autoattack"",Text = """",Duration = 5;})
        getgenv()autoattack = true;
while autoattack == true do
wait(.1)
local args ={
	[1] = ""Attack"",
	[2] = false
}

game:GetService(""Players"").LocalPlayer.Character.Sword.SwordScriptNew.Attack:FireServer(unpack(args))
		end
    else
         getgenv()autoattack = false;
         end
end)






    local Player = Window:NewTab(""Player"")
    local PlayerSection = Player:NewSection(""Player"")

    PlayerSection:NewSlider(""Walkspeed"", """", 500, 16, function(s)
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = s
    end)

    PlayerSection:NewButton(""Reset Walk"", ""Resets to all defaults"", function()
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 16
    end)"
NdACvGgu,ComputerCraft Async API [v0.1.6],qjnr,Lua,Friday 4th of August 2023 02:19:40 PM CDT,"-- ComputerCraft Async API [v0.1.6]

local expect = require(""cc.expect"")

local async = {}

local coroutines = {}
local filters = {}
local eventData = { n = 0 }

local function resume(r)
    local ok, param = coroutine.resume(r, table.unpack(eventData, 1, eventData.n)) --? should be possible to shorten this to just table.unpack(eventData) - this is the code used in the parallel API though...

    if not ok then
        error(param, 0)
    else
        filters[r] = param
    end
end


-- Queues a task for execution
function async.queue(task, ...)
    expect(1, task, ""function"")

    local args = table.pack(...)
    table.insert(coroutines, coroutine.create(function() task(table.unpack(args)) end))
end

-- Queues a task and immediately handles execution over to it
-- Upon suspension, execution is handled back over to the previous task
function async.exec(task, ...)
    expect(1, task, ""function"")

    async.queue(task, ...)

    local r = coroutines[#coroutines]
    resume(r)
    if coroutine.status(r) == ""dead"" then
        table.remove(coroutines, #coroutines)
    end
end

function async.wrap(task)
    expect(1, task, ""function"")

    return function(...)
        async.exec(task, ...)
    end
end

function async.main()
    while true do
        for i, r in ipairs(coroutines) do
            if filters[r] == nil or filters[r] == eventData[1] or eventData[1] == ""terminate"" then
                resume(r)
            end
        end

        for i = #coroutines, 1, -1 do
            if coroutine.status(coroutines[i]) == ""dead"" then
                table.remove(coroutines, i)
            end
        end

        if #coroutines == 0 then return end

        eventData = table.pack(os.pullEventRaw())
    end
end

return async
"
5PWVd4aP,atm.py,phatboislym,Python,Friday 4th of August 2023 02:14:22 PM CDT,"from time import sleep

balance = 2500
withdrawal = {1: 1000, 2: 2000, 3: 5000, 4: 10000, 5: 20000}


def dispense(amount: int):
    balance = 2500
    withdrawal = {1: 1000, 2: 2000, 3: 5000, 4: 10000, 5: 20000}
    if balance >= withdrawal[amount]:
        print(f""paying =N={withdrawal[amount]}"")
		balance -= withdrawal[amount]
    else:
        print(""insufficient funds"")


print(""Welcome to GTBank!"")
sleep(3)

response = int(input(
    ""press 0 for cardless transactions\npress 1 for card transactions\n""))
if response == 0:
    print(""cardless transactions"")
elif response == 1:
    operation = int(input(
        ""please select a transaction\n1: account balance\n2: cash withdrawal\n3: airtime topup\n""))
    if operation == 1:
        print(f""your account balance is =N={balance}"")
    elif operation == 2:
        amount = int(input(
            ""please select withdrawal amount\n1: =N=1000\n2: =N=2000\n3: =N=5000\n4: =N=10000\n5: =N=20000\n6: enter amount\n""))
        if amount == 1:
            dispense(amount)
        elif amount == 2:
            dispense(amount)
        elif amount == 3:
            dispense(amount)
        elif amount == 4:
            dispense(amount)
        elif amount == 5:
            dispense(amount)
        elif amount == 6:
            specific_amount = int(
                input(""enter amount\namount should be a multiple of =N=1000\n""))
            if specific_amount % 1000:
                print(""amount must be a multiple of =N=1000"")
			elif specific_amount > 20000:
				print(""amount must not be more than =N=20000"")
            else:
                if balance >= specific_amount:
                    print(f""paying =N={specific_amount}"")
					balance -= specific_amount
                else:
                    print(""insufficient funds"")
        else:
            print(""invalid selection"")
    elif operation == 3:
        airtime = int(input(""enter recharge amount\n""))
        if airtime <= balance:
            print(f""recharged {airtime} naira"")
			balance -= airtime
        else:
            print(""insufficient funds"")
    else:
        print(""invalid selection"")
else:
    print(""invalid selection"")

sleep(3)
print(""thank for banking with us"")
"
