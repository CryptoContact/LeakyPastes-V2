id,title,username,language,date,content
2F2fEvy5,data724,TestGuy1,JSON,Friday 13th of October 2023 06:00:06 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '80ee32fec27b55b390b6e6cb06f1d282bd60175a48b19171e6b4fc97ee587fac1d01d65686fb6011e663f57a242cea7895882c7f47fd6516336062bafa455b1aae206b06e54d934fc4854c7b20956ef1bed65937e11d92b5a31d45160ee7706868b99ce257eea36ed102e7abfef1eb72b3e70200c6dcc445391dd41fdef06b18',
  otherdata: [
    'f337d22b079b3f77a0bc1a66ebb07b07',
    '377ca40e9a596a0b6d63424f3d552269',
    'c06ff4f5e4f5f2cbef56f4c294745bf1',
    '173c475cc3bc1430210abfcbbdf942a8',
    '33d7fa3b60cd1caba67caa261ca7d5aa',
    '04bb0691e15137e802ee35d2cb59ad94',
    '81de65dd1fa3ea9d7aa43d35634e2e43',
    '5e179ea9637418a0bd1b94148e01313c'
  ]
}"
xKMhfzbD,Untitled,vladislav_larionov,C++,Friday 13th of October 2023 05:41:31 AM CDT,"// SPDX-FileCopyrightText: 2023 Open Mobile Platform LLC <community@omp.ru>
// SPDX-License-Identifier: BSD-3-Clause
/*******************************************************************************
**
** Copyright (C) 2023 Open Mobile Platform LLC.
** Contact: https://community.omprussia.ru/open-source
**
** This file is part of the NeuralNetworksUseCases project.
**
** Redistribution and use in source and binary forms,
** with or without modification, are permitted provided
** that the following conditions are met:
**
** * Redistributions of source code must retain the above copyright notice,
**   this list of conditions and the following disclaimer.
** * Redistributions in binary form must reproduce the above copyright notice,
**   this list of conditions and the following disclaimer
**   in the documentation and/or other materials provided with the distribution.
** * Neither the name of the copyright holder nor the names of its contributors
**   may be used to endorse or promote products derived from this software
**   without specific prior written permission.
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS""
** AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
** THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
** FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
** IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
** FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
** OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
** PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
** LOSS OF USE, DATA, OR PROFITS;
** OR BUSINESS INTERRUPTION)
** HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
** WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE)
** ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
** EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**
*******************************************************************************/

#ifndef OPENCVIMAGEVIEW_H
#define OPENCVIMAGEVIEW_H

#include <QQuickPaintedItem>
#include <QQuickWindow>
#include <QSGSimpleTextureNode>

#include <QImage>
#include ""ncnncreator.h""

#include ""opencv2/core.hpp""
/*!
 * \brief OpenCVImageView class is a view to display image image.
 */

class OpenCVImageView : public QQuickItem
{
    Q_OBJECT
    Q_PROPERTY(QString imagePath READ imagePath WRITE setImagePath NOTIFY imagePathChanged)
    Q_PROPERTY(QString processTime READ processTime WRITE setProcessTime NOTIFY processTimeChanged)

public:
    explicit OpenCVImageView(QQuickItem *parent = nullptr);

    QString imagePath() const;
    void setImagePath(const QString &imagePath);

    QString processTime() const;
    void setProcessTime(const QString &time);

    QString currentModel();
    void setCurrentModel(const QString &value);

    QStringList availbleModels();

    qreal calculateImageScale(const int imageWidth, const int imageHeight);

protected:
    virtual QSGNode *updatePaintNode(QSGNode *oldNode,
                                     UpdatePaintNodeData *updatePaintNodeData) override;

private:
    void updateOpenCVImage();
    QImage matToQImage(cv::Mat &mat);
    QImage matToQImage(cv::Mat &mat, const QImage::Format format);
    cv::Mat qImageToMat(QImage &image);
    cv::Mat qImageToMat(QImage &image, const int format);

    void updateRects();

private:
    QString m_imagePath;
    QString m_processTime;
    cv::Mat m_opencvImage;
    NcnnCreator m_ncnnCreator;
    QString m_currentModel;
    QImage m_frame;
signals:
    void imagePathChanged();
    void processTimeChanged();
    void currentModelChanged();
};

#endif // OPENCVIMAGEVIEW_H
"
VTpMshgr,Cálculo de potencias,Miquel_Fuster,Python,Friday 13th of October 2023 05:35:58 AM CDT,"####################################################################################
# Calcula todas las potencias de un número dado que sean menores a 10.000.000.     #
# Muestra también el resultado por pares de dígitos desde menor peso a mayor peso. #
####################################################################################

MAX_VAL = 10_000_000 # Valor que no voy a sobrepasar

base = int(input(""> "")) # Pido la base

resultado = base # resultado guardará el valor de cada potencia

while resultado < MAX_VAL: # Mientras el resultado no supere a la marca
    print(f""{resultado}:"", end=' ') # Imprime la primera parte del mensaje -> 5: 
    descomponer = resultado # descomponer tendrá una copia de resultado que se podrá deshacer
    while descomponer > 0: # Mientras que el número descompuesto sea mayor a 0
        print(f""{descomponer%100:02d}"", end = ' ') # Muestra las dos cifras de menos peso de descomponer
        descomponer //= 100 # Se descartan las dos últimas cifras de descomponer
    print("""") # Salto de línea
    resultado = resultado * base # Se calcula el resultado de la siguiente potencia"
GBDjwzAx,Untitled,wclovers,CSS,Friday 13th of October 2023 05:30:26 AM CDT,".woocommerce-MyAccount-navigation ul li.woocommerce-MyAccount-navigation-link--wcfm-store-manager a:before {
	content: ""\ea0c"";
}"
Ybei4jV2,Adjust price based on the total number of files/uploads,CodeDropz,PHP,Friday 13th of October 2023 05:18:41 AM CDT,"add_filter('woocommerce_add_cart_item_data', 'custom_codedropz_change_price', 100, 2 );
add_filter('woocommerce_before_calculate_totals','set_codedropz_calculate_price', 20, 1 );

function custom_codedropz_change_price( $cart_item_data, $product_id ){
	
	// Bail early
	if( ! isset( $cart_item_data['dnd-wc-file-upload'] ) ){
		return $cart_item_data;
	}
	
	// Get total no. of files
	$total_files = count( $cart_item_data['dnd-wc-file-upload'] );
	
	// Set Custom Price
	if( $total_files > 1 ){
		$product = wc_get_product($product_id);
		$price = ( $product->is_on_sale() ? $product->get_sale_price() : $product->get_regular_price() );
		$cart_item_data['new_price'] = ( $price * $total_files );
	}
	
	return $cart_item_data;
}

function set_codedropz_calculate_price( $cart ){
	
	// Bail early
	if ( is_admin() && ! defined( 'DOING_AJAX' ) ){
        return;
	}
	
	// Adjust Price only if new_price is set
	foreach ( $cart->get_cart() as $cart_item ) {
		if( isset( $cart_item['new_price'] ) ){
            $cart_item['data']->set_price( $cart_item['new_price'] );
		}
	}
}

"
zgWxK0qG,Untitled,dllbridge,C,Friday 13th of October 2023 05:05:24 AM CDT,"
#include    <stdio.h>
#include   <string.h>

////////////////////////////////  struct
class CMonth
{
	
	
	
	
	
	public:
	
	char sz[19];
	int   nDays;
	
	//////////////////
	void foo()
	{
		nDays = 1130;
		
	}
	
	
	///////////////////
	char* foo2();
	
};






////////////////////////////////////////////////////
int main()                                        // 
{


    CMonth Cn;
    
    Cn.foo ();
    Cn.foo2();
    //foo2()
    printf(""%s nDays = %d\n"", Cn.sz, Cn.nDays); 

}





	char* CMonth::foo2()
	{
		
		strcpy(sz, ""May"");
		
		
		return sz;
	}	




/*
#include   <stdio.h>


////////////////////////////////  struct
class CMonth
{
	
	
	char sz[19];
	
	
	public:
	
	
	int   nDays;
	
	
	void foo()
	{
		nDays = 1130;
		
	}
	
};






////////////////////////////////////////////////////
int main()                                        // 
{


    CMonth Cn;
    
    Cn.foo();
    
    printf(""nDays = %d\n"", Cn.nDays); 

}




*/















/*

#include   <stdio.h>


////////////////////////////////
struct CMonth
{
	char sz[19];
	int   nDays;
	
};


void foo(CMonth *p);



////////////////////////////////////////////////////
int main()                                        // 
{

    CMonth mArr[14];

    foo(mArr);
    
    printf(""January  = %d\n"", mArr[1].nDays); 
    printf(""February = %d\n"", mArr[2].nDays); 
    printf(""March    = %d\n"", mArr[3].nDays); 
}



////////////////////////////////////////////////////
void foo(CMonth *p)
{
	
	 p = p + 1;             //[1].nDays = 11131;
	
	 CMonth &a = *p;
	 
	 a.nDays = 4444;
	 //--------------
	 
	  p += 1;
	  
	  p->nDays = 29;
	 //--------------
	  p ++;
	  
	  
	 (*p).nDays = 31;
}

*/





















/*


#include   <stdio.h>


////////////////////////////////
struct CMonth
{
	char sz[19];
	int   nDays;
	
};


void foo(CMonth *p);



////////////////////////////////////////////////////
int main()                                        // 
{

    CMonth mArr[14];

    foo(mArr);
    
    printf(""%d\n"", mArr[1].nDays); 

}



////////////////////////////////////////////////////
void foo(CMonth *p)
{
	
	 p[1].nDays = 11131;
	
}


*/

"
78DSGuYR,strutture,_zwj_,C++,Friday 13th of October 2023 04:50:05 AM CDT,"#include<iostream>
#include<windows.h>
#define NUM 3
using namespace std;

struct Alunni{
	char nome[20];
	int voto;
};

void StampaAlunno(Alunni Alu) {
	cout<<""Alunno: ""<<Alu.nome << "" "";
	cout<<""Voto: ""<<Alu.voto << "" "";
}

int main(){
	Alunni Alunno1;
	strcpy(Alunno1.nome, ""Alice"");
	Alunno1.voto = 8;
	Alunni Alunno2 = {""Bruno"", 9};
	
	StampaAlunno(Alunno1);
	StampaAlunno(Alunno2);
	
	cout<<""usiamo un array di struct""<<endl;
	Alunni QuartaQ[NUM];
	for(int i=0; i<NUM; i++){
		cout<<""Nome Alunno: "";
		cin>>QuartaQ[i].nome;
		cout<<""Voto: "";
		cin>>QuartaQ[i].voto;
	}
	
	for(int i=0; i<NUM; i++){
		StampaAlunno(QuartaQ[i]);
	}
}
"
nUnMmAE0,Untitled,lemansky,HTML,Friday 13th of October 2023 04:36:30 AM CDT,"<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Document</title>
</head>
<body>
    <img src=""#"" alt="""">
    <img src=""#"" alt="""">
    <img src=""#"" alt="""">
    <img src=""#"" alt="""">
    <img src=""#"" alt="""">
    <img src=""#"" alt="""">
    <img src=""#"" alt="""">
    <img src=""#"" alt="""">
    <img src=""#"" alt="""">
    <img src=""#"" alt="""">
    <script>
       let img = document.querySelectorAll('img');
       fetch('https://api.jikan.moe/v4/anime?q=Bleach&sfw')
       .then(response => response.json())
       .then(items => {
            console.log(items);
            items.data.forEach((el, i) => {
                img[i].src = el.images.jpg.image_url;
            });
           
       })
    </script>
</body>
</html>"
ruYfJi5j,Sort Numbers in Ascending without using Bubble Sort,Lejhand,C,Friday 13th of October 2023 04:34:39 AM CDT,"//HAVE ADDED COMMENTS SO YOU CAN UNDERSTAND -DHRUV

#include <stdio.h> //YE TO BASIC INITIALIZATION
#include <conio.h> //PREPROCESSOR PT 2

void main() { //VOID MAIN FUNCTION
    int arr[5]; //INITIALIZING THE ORIGINAL ARRAY WHICH WE WILL TAKE INPUT FROM THE USER 
    printf(""Enter 5 numbers""); //TELLING THE USER TO ENTER
    for (int i=0;i<5;i++) { //LOOP FOR ARRAY KA INPUT SO BASIC 0-4 KA LOOP
        scanf(""%d"",&arr[i]); //INPUT USING SCANF
    }
    int arr2[5]; //THIS IS THE ARRAY TWO WHERE WE WILL STORE THE ASCENDING ORDER ME WAALE NUMBERS
    int counter; //THIS IS THE COUNTER JISKO ABHI NAHI NEECHE 0 KIYA

    for (int i = 0; i < 5; i++) { //FIRST LOOP FOR NUMBER APNA SO FIRST IT TAKES THE FIRST NUMBER FROM THE LOOP AND COMPARES IT WITH OTHERS
        counter = 0; //SO AFTER ARRANGING EVERY NUMBER COUNTER ZERO HOJAYE

        for (int j = 0; j < 5; j++) { //THIS IS FOR COMPARISION SO EXAMPLE i=4 toh it will compare the others to i i.e i<4,5,6,7 etc
            if (arr[i] > arr[j]) { //RATHER CHECKING FOR IS IT SMALLER WE CHECK WHETHER IF THE NUMBER IS LARGER SAMJHA?
                counter++; //SO IF WE CHECK FOR LARGER WE DONT NEED TO MAKE SWITCH CASE
            } //SO IF THE NUMBER IS LARGER THAN 4 IN 5 KA ARRAY SO WE DIRECTLY PLACE IT ON THE 4TH POSITION IN THE NEW ARRAY
             // WHICH IS THE LAST POSITION IN AN ARRAY SO WE DIRECTLY DO KI IF COUNTER=4 SO IT MEANS IT IS GREATER THAN 4 NUMBERS
             //SO BASICALLY IT IS THE LARGEST SO WE PLACE IT IN THE 4TH POSITION IN {0,1,2,3,4} WHICH ITSELF IS THE COUNTER
             //SO IT IS LIKE IF THE COUNTER=4 SO ITS LARGER THAN 4 NUMBERS AND IT SHOULD BE IN THE 4TH POSITION OF THE NEW ARRAY
             // SO COUNTER==THE AMOUNT OF NUMBERS i IS GREATER THAN== POSITION
        }

        arr2[counter] = arr[i]; //SO BASICALLY THE COUNTER BECOMES THE POSITION IF WE CHECK THE GREATER THAN THE SMALLER (PROBLEM WITH THE PREVIOUS)
    }

    printf(""Sorted Array in Ascending Order: ""); //NOW WE DISPLAY THE NEW ARRAY WHICH HAS ASCENDING NUMBERS
    for (int i = 0; i < 5; i++) { //DISPLAYING THE NEW ARRAY USING LOOP
        printf(""%d "", arr2[i]); //THIS IS THE PRINTING OF THE NEW ARRAY
    }
    getch();
    // clrscr();
}"
RVLmkxaa,dl,Sc3ric,JavaScript,Friday 13th of October 2023 04:22:09 AM CDT,"const quiz = document.querySelectorAll('.quiz.modtype_quiz .activityinstance .instancename')
for (const q of quiz) {
    const rawText = q.innerText
    const text = rawText.substr(0, rawText.length - 5)
    
    const aElement = q.parentElement
    const link = aElement.href
    
    const button = document.createElement('button')
    button.innerText = 'Copy'
    button.onclick = () => {
        navigator.clipboard.writeText(text)
        window.open(link)
    }
    
    aElement.parentElement.after(button)
}"
YzA5QYhJ,Zufallszahl,RaspBar,C++,Friday 13th of October 2023 04:14:14 AM CDT,"/*
  Beschreibung: Zufallszahlen generieren
  Datum:		16.10.2023		
  Version:		1.0
  Autor:		Schmidt
  Hinweise:		3 Varianten zur ERzeugung einer Zufallszahl				
*/

// Variablen und Konstanten 
int zufallszahl;
 
  void setup() {
    Serial.begin(9600);
  }
 
  void loop() {
	// Zufallszahl zwische 0 und 20
	
    zufallszahl = random(20);
    Serial.print (""Zufallszahl zwischen 0 und 20:  "");
    Serial.println (zufallszahl); 
    
	// Zufallszahl zwischen 100 und 200
	
    zufallszahl = random(100,200);
    Serial.print (""Zufallszahl zwischen 100 und 200:  "");
    Serial.println (zufallszahl);   
 
	// Zufallszahl von 0 bis 127 bei neuer Initialisierung 
	// der Zufallssequenz
	
    randomSeed(analogRead(A0));
    zufallszahl = random(127);
    Serial.print (""Zufallszahl zwischen 0 und 127:  "");
    Serial.println (zufallszahl); 

    Serial.println (""-------------------- nächster Durchgang --------------------"");
         
    delay(5000);
  }"
kLM7L6fM,8.3.15,myloyo,C#,Friday 13th of October 2023 03:52:51 AM CDT,"using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace myloyorrr
{
    internal class Program
    {
        static bool f(string s)
        {
            bool h = true;
            for (int i = 0, j = s.Length - 1; i < s.Length / 2; i++, j--)
            {
                if (s[i] != s[j])
                {
                    h = false;
                    break;
                }
            }
            return h;
        }
        static void Main()
        {
            string[] a = Console.ReadLine().Split(' ', ',', '.', ':');
            for (int i = 0; i < a.Length; i++)
            {
                if (f(a[i]))
                {
                    Console.Write(a[i] + ' ');
                }
            }
        }
    }
}"
1bTBVy0M,Untitled,baka_mashiro,TypeScript,Friday 13th of October 2023 02:57:20 AM CDT,"// geometric effect example
let cache: string | null = null

function fetch(): Promise<string> {
  const begin = new Date().getTime()
  console.log('fetching...')
  return new Promise(resolve => {
    setTimeout(() => {
      const ret = 'hello'
      cache = ret
      console.log('fetched successfully', new Date().getTime() - begin, 'ms')
      resolve(ret)
    }, 2000);
  });
}

function main(): any {
  console.log('main called')
  if (cache) {
    console.log('cache hit: ', cache)
    return cache
  } else {
    console.log('cache miss')
    throw fetch()
  }
}

function run(func: any) {
  try {
    func()
  } catch (e) {
    if (e instanceof Promise) {
      e.then((ret: any) => {
        func()
      })
    }
  }
}

run(main)"
ywAhd2R2,Connect Nodes at Same Level,jayati,C++,Friday 13th of October 2023 02:36:14 AM CDT,"//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// Tree Node
struct Node
{
    int data;
    Node* left;
    Node* right;
    Node* nextRight;
};

// Utility function to create a new Tree Node
Node* newNode(int val)
{
    Node* temp = new Node;
    temp->data = val;
    temp->left = NULL;
    temp->right = NULL;
    temp->nextRight = NULL;
    
    return temp;
}

// Function to Build Tree
Node* buildTree(string str)
{   
    // Corner Case
    if(str.length() == 0 || str[0] == 'N')
            return NULL;
    
    // Creating vector of strings from input 
    // string after spliting by space
    vector<string> ip;
    
    istringstream iss(str);
    for(string str; iss >> str; )
        ip.push_back(str);
        
    // Create the root of the tree
    Node* root = newNode(stoi(ip[0]));
        
    // Push the root to the queue
    queue<Node*> queue;
    queue.push(root);
        
    // Starting from the second element
    int i = 1;
    while(!queue.empty() && i < ip.size()) {
            
        // Get and remove the front of the queue
        Node* currNode = queue.front();
        queue.pop();
            
        // Get the current node's value from the string
        string currVal = ip[i];
            
        // If the left child is not null
        if(currVal != ""N"") {
                
            // Create the left child for the current node
            currNode->left = newNode(stoi(currVal));
                
            // Push it to the queue
            queue.push(currNode->left);
        }
            
        // For the right child
        i++;
        if(i >= ip.size())
            break;
        currVal = ip[i];
            
        // If the right child is not null
        if(currVal != ""N"") {
                
            // Create the right child for the current node
            currNode->right = newNode(stoi(currVal));
                
            // Push it to the queue
            queue.push(currNode->right);
        }
        i++;
    }
    
    return root;
}

void connect(struct Node *p);

/* Helper function that allocates a new node with the
   given data and NULL left and right pointers. */


void printSpecial(Node *root)
{
   if (root == NULL)
     return;

   Node* next_root=NULL;

   while (root != NULL)
   {
      cout<< root->data<<"" "";

      if( root->left && (!next_root) )
        next_root = root->left;
      else if( root->right && (!next_root)  )
        next_root = root->right;

      root = root->nextRight;
   }
   
   printSpecial(next_root);
}

void inorder(Node *root)
{
    if (root == NULL)
       return;
    inorder(root->left);
    cout << root->data << "" "";
    inorder(root->right);
}


// } Driver Code Ends
/* struct Node
{
  int data;
  Node *left,  *right;
  Node *nextRight;  // This has garbage value in input trees
}; */


class Solution
{
    public:
    //Function to connect nodes at same level.
    void connect(Node *root)
    {
       // Your Code Here
       queue<Node*> q;
       if(root==NULL)
       {
           return;
       }
       q.push(root);
       while(!q.empty())
       {
           int n = q.size();
           Node* prev = NULL;
           
           for(int i=0;i<n;i++)
           {
               Node* curr = q.front();
               q.pop();
               if(prev!=NULL)
               {
                   prev->nextRight = curr;
               }
               prev = curr;
               if(curr->left!=NULL)
               {
                   q.push(curr->left);
               }
               if(curr->right!=NULL)
               {
                   q.push(curr->right);
               }
             
           }
             prev=NULL;
           
       }
    }    
      
};




//{ Driver Code Starts.


/* Driver program to test size function*/
int main()
{
  int t;
  scanf(""%d\n"", &t);
  while (t--)
  {
     string s;
     getline(cin, s);
     Node* root = buildTree(s);
        
    Solution obj;
     obj.connect(root);
     printSpecial(root);
     cout<<endl;
     inorder(root);
     cout<<endl;
  }
  return 0;
}

// } Driver Code Ends"
bcwsaRVC,"Сумма на отрезке, прибавление на отрезке (запросы)",pasholnahuy,C++,Friday 13th of October 2023 01:25:20 AM CDT,"#include <iostream>
#include <tuple>
#include <random>

using std::pair;
using std::cin;
using std::cout;
using std::vector;
using int64 = int64_t;
using std::max;
using std::min;

class SegmentTree {
public:
    int64 log_size;
    vector<int64> nodes = std::vector<int64>((2 << log_size) - 1);
    vector<int64> SubtreeAdd = std::vector<int64>((2 << log_size) - 1);

    static int64 IntLog(int64 n) {
        int64 temp = 1;
        int64 ans = 0;
        while (temp < n) {
            temp *= 2;
            ++ans;
        }
        return ans;
    }

    static int64 Pow2(int64 n) {
        return 1 << n;
    }

    explicit SegmentTree(const vector<int64> &vec) : log_size(IntLog(vec.size())) {
        std::copy(vec.begin(), vec.end(), nodes.begin() + (1 << log_size) - 1);
        for (int64 i = Pow2(log_size) - 2; i >= 0; --i) {
            nodes[i] = nodes[2 * i + 1] + nodes[2 * i + 2];
        }
    }

    void Modify(int64 l, int64 r, int64 val) {
        Modify(l, r, 0, 0, Pow2(log_size) - 1, val);
    }

    int64 GetSum(int64 l, int64 r) {
        return GetSum(l, r, 0, 0, Pow2(log_size) - 1);
    }

private:

    int64 GetSum(int64 l, int64 r, int64 n, int64 nl, int64 nr) {
        push(n, nl, nr);
        if (l > r) {
            return 0;
        }
        if (l == nl && r == nr) {
            return nodes[n];
        }
        int64 mid = (nl + nr) / 2;
        return GetSum(l, min(r, mid), n * 2 + 1, nl, mid) +
               GetSum(max(l, mid + 1), r, n * 2 + 2, mid + 1, nr);
    }

    void push(int64 v, int64 vl, int64 vr) {
        if (SubtreeAdd[v]) {
            nodes[v] += SubtreeAdd[v] * (vr - vl + 1);
            if (vl != vr) {
                SubtreeAdd[2 * v + 1] += SubtreeAdd[v];
                SubtreeAdd[2 * v + 2] += SubtreeAdd[v];
            }
            SubtreeAdd[v] = 0;
        }
    }

    void Modify(int64 l, int64 r, int64 n, int64 nl, int64 nr, int64 val) {
        push(n, nl, nr);
        if (l > nr || r < nl) {
            return;
        }
        if (l <= nl && r >= nr) {
            SubtreeAdd[n] += val;
            push(n, nl, nr);
            return;
        } else {
            int64 mid = (nl + nr) / 2;
            Modify(l, r, n * 2 + 1, nl, mid, val);
            Modify(l, r, n * 2 + 2, mid + 1, nr, val);
            nodes[n] = nodes[2 * n + 1] + nodes[2 * n + 2];
        }
    }


};

int main() {
    int64 n;
    cin >> n;
    vector<int64> vec(n);
    for (size_t i = 0; i < n; ++i) {
        cin >> vec[i];
    }
    SegmentTree st(vec);
    int k;
    cin >> k;
    for (size_t i = 0; i < k; ++i) {
        int num;
        cin >> num;
        if (num == 1) {
            int64 l, r;
            cin >> l >> r;
            cout << st.GetSum(l, r) << '\n';
        } else {
            int64 l, r, x;
            cin >> l >> r >> x;
            st.Modify(l, r, x);
        }
    }
    return 0;
}"
axCWjzPW,Random Wallpaper Downloader Rev 3.4  *New*,nitestryker,Bash,Friday 13th of October 2023 01:04:44 AM CDT,"#!/bin/bash

###################################################################### 
#Copyright (C) 2023  Nitestryker 

 #This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation version 3 of the License.
 
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
 
#You should have received a copy of the GNU General Public License
#along with this program.  If not, see <http://www.gnu.org/licenses/>.
###################################################################### 

# Revision 3.4

# Added a colored Banner when the script starts 
# Removed dialogue Window, I  will add back in a future release once I fix it to work properly.


### Revision 3.3 ##

# A few minor bugs fixed.

### Revision 3.2 ##

# Added the ability to detect the screen resolution and set the DESIRED_RESOLUTION variable accordingly.
# Added download statistics.
# fixed issue calculating downloaded # when they are skipped.

### Revision 3.1 ##

# This code calculates the MD5 hash of each downloaded image and stores it in your download_history.txt file,
# where you previously stored URLs (which didn't work well).
# When you attempt to download a new image, the script will check if the MD5 hash is already in the download history. If it is, the script will skip the download.

### Revision 3 ## 

# Added user-defined wallpaper resolution handling.
# Implemented a download history feature to record downloaded wallpapers.
# That checks the download history to avoid duplicate downloads.
# Added the ability for users to choose between random or keyword-based wallpaper downloads.

# Define color codes
HEADER=""\033[95m""
OKBLUE=""\033[94m""
OKGREEN=""\033[92m""
WARNING=""\033[93m""
FAIL=""\033[91m""
ENDC=""\033[0m""
BOLD=""\033[1m""
UNDERLINE=""\033[4m""

# get current logged in user
user=$(whoami)
# Define the directory where wallpapers will be stored
WALLPAPER_DIR=""/home/${user}/Pictures""

# Detect screen resolution and set DESIRED_RESOLUTION
SCREEN_RESOLUTION=$(xdpyinfo | awk -F'[ x]+' '/dimensions:/{print $3""x""$4}')
DESIRED_RESOLUTION=""$SCREEN_RESOLUTION""

# Path to the download history file
DOWNLOAD_HISTORY_FILE=""$WALLPAPER_DIR/download_history.txt""

# Function to download the wallpaper with a specific keyword or random
download_wallpaper() {
    # Generate a unique filename based on the current timestamp
    UNIQUE_FILENAME=""wallpaper_$(date +'%Y%m%d%H%M%S').jpg""

    if [ ""$DOWNLOAD_MODE"" == ""random"" ]; then
        # Download a random image from Unsplash
        IMAGE_URL=$(curl -Ls -w %{url_effective} -o /dev/null ""https://source.unsplash.com/random/$DESIRED_RESOLUTION"")
    elif [ ""$DOWNLOAD_MODE"" == ""keyword"" ]; then
        # Download an image with the specified keyword
        IMAGE_URL=$(curl -Ls -w %{url_effective} -o /dev/null ""https://source.unsplash.com/featured/$DESIRED_RESOLUTION/?$KEYWORD"")
    else
        echo ""Invalid download mode: $DOWNLOAD_MODE""
        return 1
    fi

    # Calculate the MD5 hash of the image
    IMAGE_HASH=$(curl -Lf ""$IMAGE_URL"" | md5sum | awk '{print $1}')

    # Check if the image hash is already in the download history
    if grep -q ""$IMAGE_HASH"" ""$DOWNLOAD_HISTORY_FILE""; then
        echo ""Skipping already downloaded wallpaper: $IMAGE_URL""
        return 0
    fi

    # Save the image to the wallpaper directory with the unique filename
    curl -Lf ""$IMAGE_URL"" > ""$WALLPAPER_DIR/$UNIQUE_FILENAME""

    # Append the image hash to the download history file
    echo ""$IMAGE_HASH"" >> ""$DOWNLOAD_HISTORY_FILE""

    # Increment the downloaded wallpaper counter
    ((DOWNLOADED_WALLPAPERS++))
}

# Function to show countdown timer
show_countdown() {
    for ((i = SLEEP_DURATION; i >= 0; i--)); do
        printf ""\rDownloading wallpaper %d of %d... Time left: %02d:%02d "" ""$DOWNLOADED_WALLPAPERS"" ""$MAX_WALLPAPERS"" $((i / 60)) $((i % 60))
        sleep 1
    done
    echo """"
}


###  ENTRY POINT #### 

# clear screen before showing banner
clear 

# Banner 
banner=$(cat << ""EOF""
░█░█░█▀█░█░░░█░░░█▀█░█▀█░█▀█░█▀▀░█▀▄░░░█▀▄░█▀█░█░█░█▀█░█░░░█▀█░█▀█░█▀▄░█▀▀░█▀▄
░█▄█░█▀█░█░░░█░░░█▀▀░█▀█░█▀▀░█▀▀░█▀▄░░░█░█░█░█░█▄█░█░█░█░░░█░█░█▀█░█░█░█▀▀░█▀▄
░▀░▀░▀░▀░▀▀▀░▀▀▀░▀░░░▀░▀░▀░░░▀▀▀░▀░▀░░░▀▀░░▀▀▀░▀░▀░▀░▀░▀▀▀░▀▀▀░▀░▀░▀▀░░▀▀▀░▀░▀
EOF
)

echo -e ""${OKBLUE}$banner${ENDC}""
echo -e ""${OKGREEN}Rev 3.4 by ${FAIL}Nitestryker${ENDC}""

# Create the directory if it doesn't exist
if [ ! -d ""$WALLPAPER_DIR"" ]; then
    mkdir ""$WALLPAPER_DIR""
fi

# Create the download history file if it doesn't exist
touch ""$DOWNLOAD_HISTORY_FILE""

# Set the initial value of the downloaded wallpaper counter to 0
DOWNLOADED_WALLPAPERS=0

# Ask the user to choose the download mode (random or keyword)
read -p ""Choose download mode (random/keyword): "" DOWNLOAD_MODE

# Depending on the chosen mode, ask for the keyword
if [ ""$DOWNLOAD_MODE"" == ""keyword"" ]; then
    read -p ""Enter keyword for wallpapers: "" KEYWORD
fi

# Ask the user to input the maximum number of wallpapers to download
read -p ""Enter the maximum number of wallpapers to download (default: 100): "" MAX_WALLPAPERS

# If the user didn't enter any value, set the default value to 100
MAX_WALLPAPERS=${MAX_WALLPAPERS:-100}

# Ask the user to input the sleep duration in seconds
read -p ""Enter the sleep duration in seconds between downloading wallpapers (default: 300): "" SLEEP_DURATION

# If the user didn't enter any value, set the default value to 300 seconds (5 minutes)
SLEEP_DURATION=${SLEEP_DURATION:-300}

# Main loop
while [ ""$DOWNLOADED_WALLPAPERS"" -lt ""$MAX_WALLPAPERS"" ]; do
    # Download the wallpaper based on the chosen mode (random or keyword)
    download_wallpaper

    # Show a notice and countdown before sleeping
    echo ""Downloading wallpaper $DOWNLOADED_WALLPAPERS of $MAX_WALLPAPERS...""
    show_countdown
done

# Calculate the total download time
TOTAL_DOWNLOAD_TIME=$((MAX_WALLPAPERS * SLEEP_DURATION))

# Calculate total data consumed in bytes
TOTAL_DATA_CONSUMED=$(du -c -b ""$WALLPAPER_DIR"" | grep ""total$"" | awk '{print $1}')

# Calculate average download speed in bytes per second
if [ ""$TOTAL_DOWNLOAD_TIME"" -eq 0 ]; then
    AVERAGE_DOWNLOAD_SPEED=0
else
    AVERAGE_DOWNLOAD_SPEED=$(echo ""scale=2; $TOTAL_DATA_CONSUMED / $TOTAL_DOWNLOAD_TIME"" | bc)
fi

# Convert download statistics to appropriate units (bytes to MB or GB, seconds to minutes)
if (( $(echo ""$TOTAL_DATA_CONSUMED > 1073741824"" | bc -l) )); then
    TOTAL_DATA_CONSUMED=$(echo ""scale=2; $TOTAL_DATA_CONSUMED / 1073741824"" | bc)
    DATA_UNIT=""GB""
elif (( $(echo ""$TOTAL_DATA_CONSUMED > 1048576"" | bc -l) )); then
    TOTAL_DATA_CONSUMED=$(echo ""scale=2; $TOTAL_DATA_CONSUMED / 1048576"" | bc)
    DATA_UNIT=""MB""
else
    TOTAL_DATA_CONSUMED=$(echo ""scale=2; $TOTAL_DATA_CONSUMED / 1024"" | bc)
    DATA_UNIT=""KB""
fi

if (( $(echo ""$AVERAGE_DOWNLOAD_SPEED > 1048576"" | bc -l) )); then
    AVERAGE_DOWNLOAD_SPEED=$(echo ""scale=2; $AVERAGE_DOWNLOAD_SPEED / 1048576"" | bc)
    SPEED_UNIT=""MB/s""
elif (( $(echo ""$AVERAGE_DOWNLOAD_SPEED > 1024"" | bc -l) )); then
    AVERAGE_DOWNLOAD_SPEED=$(echo ""scale=2; $AVERAGE_DOWNLOAD_SPEED / 1024"" | bc)
    SPEED_UNIT=""KB/s""
else
    SPEED_UNIT=""B/s""
fi

# Clear the screen
clear

# Display download statistics
echo ""Download Statistics:""
echo ""Number of Wallpapers Downloaded: $DOWNLOADED_WALLPAPERS""
echo ""Total Data Consumed: $TOTAL_DATA_CONSUMED $DATA_UNIT""
echo ""Average Download Speed: $AVERAGE_DOWNLOAD_SPEED $SPEED_UNIT""

# Exit the script once the maximum number of wallpapers is downloaded
echo ""Maximum number of wallpapers ($MAX_WALLPAPERS) downloaded. Exiting...""
"
wNx3hPT9,Untitled,Testhub,Lua,Friday 13th of October 2023 01:04:08 AM CDT,"local ZenHub = Instance.new(""ScreenGui"")
local Open = Instance.new(""TextButton"")
local fuckshit = Instance.new(""UICorner"")
local MODILEMAGE = Instance.new(""ImageLabel"")
local posto = Instance.new(""UIStroke"")

local ScreenGui = Instance.new(""ScreenGui"")
local ImageButton = Instance.new(""ImageButton"")


ScreenGui.Parent = game.CoreGui
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

ImageButton.Parent = ScreenGui
ImageButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
ImageButton.BorderSizePixel = 0
ImageButton.Position = UDim2.new(0.120833337, 0, 0.0952890813, 0)
ImageButton.Size = UDim2.new(0, 45, 0, 45)
ImageButton.Draggable = true
ImageButton.Image = ""http://www.roblox.com/asset/?id=15002845988""
ImageButton.MouseButton1Down:connect(function()
game:GetService(""VirtualInputManager""):SendKeyEvent(true,""End"",false,game)
 game:GetService(""VirtualInputManager""):SendKeyEvent(false,""End"",false,game)
end)


fuckshit.Parent = Open

 MODILEMAGE.Name = ""MODILEMAGE""
 MODILEMAGE.Parent = Open
 MODILEMAGE.BackgroundColor3 = Color3.fromRGB(51,255,255)
 MODILEMAGE.BackgroundTransparency = 1.000
 MODILEMAGE.BorderSizePixel = 0
 MODILEMAGE.Position = UDim2.new(0, 0.5, 0, 0)
 MODILEMAGE.Size = UDim2.new(0, 38, 0, 31)
 MODILEMAGE.Image = ""rbxassetid://""
 
posto.Name = ""posto""
 posto.Parent = Open
 posto.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
 posto.Color = Color3.fromRGB(51,255,255)
 posto.LineJoinMode = Enum.LineJoinMode.Round
 posto.Thickness = 1
 posto.Transparency = 0
 posto.Enabled = true
 posto.Archivable = true



_G.WindowBackgroundColor = Color3.fromRGB(12,12,12)
_G.BackgroundItemColor = Color3.fromRGB(20, 20, 20)
_G.TabWindowColor = Color3.fromRGB(30, 30, 30)
_G.ContainerColor = Color3.fromRGB(30, 30, 30)
_G.TitleTextColor = Color3.fromRGB(150, 150, 150)
_G.ImageColor = Color3.fromRGB(0, 0, 255)
_G.LineThemeColor = Color3.fromRGB(150, 150, 150)
_G.TabTextColor = Color3.fromRGB(150, 150, 150)
_G.TabImageColor = Color3.fromRGB(150, 150, 150)
_G.TabThemeColor = Color3.fromRGB(250, 0, 0)
_G.SectionColor = Color3.fromRGB(0, 0, 255)
_G.SectionImageColor = Color3.fromRGB(150, 150, 150)
_G.SectionTextColor = Color3.fromRGB(0, 0, 255)
_G.SectionOn = Color3.fromRGB(0, 250, 0)

_G.Color1 = Color3.fromRGB(255,255,255)
do local GUI = game.CoreGui:FindFirstChild(""1xliiUI"");if GUI then GUI:Destroy();end;if _G.Color == nil then
_G.Color = Color3.fromRGB(255,255,255)
end 
end

local tween = game:GetService(""TweenService"")
local tweeninfo = TweenInfo.new
local input = game:GetService(""UserInputService"")
local run = game:GetService(""RunService"")
local plr = game.Players.LocalPlayer
local mouse = plr:GetMouse()

local UserInputService = game:GetService(""UserInputService"")
local TweenService = game:GetService(""TweenService"")

local function MakeDraggable(topbarobject, object)
	local Dragging = nil
	local DragInput = nil
	local DragStart = nil
	local StartPosition = nil

	local function Update(input)
		local Delta = input.Position - DragStart
		local pos = UDim2.new(StartPosition.X.Scale, StartPosition.X.Offset + Delta.X, StartPosition.Y.Scale, StartPosition.Y.Offset + Delta.Y)
		local Tween = TweenService:Create(object, TweenInfo.new(0.15), {Position = pos})
		Tween:Play()
	end

	topbarobject.InputBegan:Connect(
		function(input)
			if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
				Dragging = true
				DragStart = input.Position
				StartPosition = object.Position

				input.Changed:Connect(
					function()
						if input.UserInputState == Enum.UserInputState.End then
							Dragging = false
						end
					end
				)
			end
		end
	)

	topbarobject.InputChanged:Connect(
		function(input)
			if
				input.UserInputType == Enum.UserInputType.MouseMovement or
				input.UserInputType == Enum.UserInputType.Touch
			then
				DragInput = input
			end
		end
	)

	UserInputService.InputChanged:Connect(
		function(input)
			if input == DragInput and Dragging then
				Update(input)
			end
		end
	)
end

local Update = {}

function Update:AddWindow(name,logo,keybind)
	local uihide = false
	local abc = false
	local logo = logo or 0
	local currentpage = """"
	local keybind = keybind or Enum.KeyCode.End
	local yoo = string.gsub(tostring(keybind),""Enum.KeyCode."","""")
	
	local SOMEXHUB = Instance.new(""ScreenGui"")
	SOMEXHUB.Name = ""1xliiUI""
	SOMEXHUB.Parent = game.CoreGui
	SOMEXHUB.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

local osfunc = {}
 local osfunc2 = {}
	local Main = Instance.new(""Frame"")
	local WindowStrokemain = Instance.new(""UIStroke"")
	Main.Name = ""Main""
	Main.Parent = SOMEXHUB
	Main.ClipsDescendants = true
	Main.AnchorPoint = Vector2.new(0.5,0.5)
	Main.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
	Main.Position = UDim2.new(0.5, 0, 0.5, 0)
	Main.Size = UDim2.new(0, 0, 0, 0)
	
	WindowStrokemain.Name = ""WindowStroke""
 WindowStrokemain.Parent = Main
 WindowStrokemain.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
 WindowStrokemain.Color = Color3.fromRGB(255,255,255)
 WindowStrokemain.LineJoinMode = Enum.LineJoinMode.Round
 WindowStrokemain.Thickness = 1
 WindowStrokemain.Transparency = 0
 WindowStrokemain.Enabled = true
 WindowStrokemain.Archivable = true
	
	Main:TweenSize(UDim2.new(0, 600, 0, 400),""Out"",""Quad"",0,true)

	local MCNR = Instance.new(""UICorner"")
	MCNR.Name = ""MCNR""
	MCNR.Parent = Main

	local Top = Instance.new(""Frame"")
	Top.Name = ""Top""
	Top.Position = UDim2.new(0,0,0,4)
	Top.Parent = Main
	Top.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
	Top.Size = UDim2.new(0, 560, 0, 28)



	local Logo = Instance.new(""ImageLabel"")
	Logo.Name = ""Logo""
	Logo.Parent = Top
	Logo.BackgroundColor3 = Color3.fromRGB(255,255,255)
	Logo.BackgroundTransparency = 1.000
	Logo.Position = UDim2.new(0, 13, 0, 1)
	Logo.Size = UDim2.new(0, 30, 0, 25)
	Logo.Image = ""rbxassetid://""..tostring(logo)

	local Name = Instance.new(""TextLabel"")
	Name.Name = ""Name""
	Name.Parent = Top
	Name.BackgroundColor3 = Color3.fromRGB(0,255,255)
	Name.BackgroundTransparency = 1.000
	Name.Position = UDim2.new(0.1, 0, 0, 0)
	Name.Size = UDim2.new(0, 80, 0, 27)
	Name.Font = Enum.Font.Code
	Name.RichText = true;
	Name.Text = name
	Name.TextColor3 = Color3.fromRGB(225, 225, 225)
	Name.TextSize = 15.000

local LocalizationService = game:GetService(""LocalizationService"")
 local Players = game:GetService(""Players"")
 local player = Players.LocalPlayer
 local name = player.Name
 local result, code = pcall(function()
	 return LocalizationService:GetCountryRegionForPlayerAsync(player)
 end)
 
function osfunc:Refresh(textadd)
 ServerTime.Text = textadd
 end
 function osfunc2:Refresh(textadd2)
 ServerDate.Text = textadd2
 end

 
local ListNof = Instance.new(""Frame"")
	local NofList = Instance.new(""UIListLayout"")

	ListNof.Name = ""ListNof""
	ListNof.Parent = SOMEXHUB
	ListNof.BackgroundColor3 = Color3.fromRGB(255,255,255)
	ListNof.BackgroundTransparency = 1.000
	ListNof.Position = UDim2.new(0.778017223, 0, -0.00217864919, 0)
	ListNof.Size = UDim2.new(0, 206, 0, 400)

	NofList.Name = ""NofList""
	NofList.Parent = ListNof
	NofList.SortOrder = Enum.SortOrder.LayoutOrder
	NofList.VerticalAlignment = Enum.VerticalAlignment.Top
	
	function Update:Nof(txt,tine)
		spawn(function()
			local Nof1 = Instance.new(""Frame"")
			local Nof2 = Instance.new(""Frame"")
			local Nof3 = Instance.new(""Frame"")
			local NofLabel = Instance.new(""TextLabel"")
			local slidenof = Instance.new(""Frame"")
			local Slide2 = Instance.new(""Frame"")

			Nof1.Name = ""Nof1""
			Nof1.Parent = ListNof
			Nof1.BackgroundColor3 = Color3.fromRGB(51,255,255)
			Nof1.BackgroundTransparency = 1.000
			Nof1.BorderSizePixel = 0
			Nof1.Size = UDim2.new(0, 206, 0, 83)

			Nof2.Name = ""Nof2""
			Nof2.Parent = Nof1
			Nof2.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
			Nof2.BorderColor3 = Color3.fromRGB(0, 0, 0)
			Nof2.Position = UDim2.new(0, 0, 0.0120481923, 0)
			Nof2.Size = UDim2.new(0, 189, 0, 65)
			Instance.new(""UICorner"",Nof2)
			Instance.new(""UICorner"",slidenof)
			Instance.new(""UICorner"",Slide2)


			Nof3.Name = ""Nof3""
			Nof3.Parent = Nof1
			Nof3.BackgroundColor3 = Color3.fromRGB(90, 90, 255)
			Nof3.BackgroundTransparency = 1
			Nof3.BorderSizePixel = 0
			Nof3.Position = UDim2.new(0, 0, 0.638554215, 0)
			Nof3.Size = UDim2.new(0, 189, 0, 7)

			NofLabel.Name = ""NofLabel""
			NofLabel.Parent = Nof1
			NofLabel.BackgroundColor3 = Color3.fromRGB(51,255,255)
			NofLabel.BackgroundTransparency = 1.000
			NofLabel.BorderSizePixel = 0
			NofLabel.Position = UDim2.new(0, 0, 0.00463949936, 0)
			NofLabel.Size = UDim2.new(0, 188, 0, 52)
			NofLabel.ZIndex = 4
			NofLabel.Font = Enum.Font.Code
			NofLabel.TextColor3 = main_color or Color3.fromRGB(51,255,255)
			NofLabel.TextScaled = false
			NofLabel.TextSize = 18.000
			NofLabel.TextStrokeTransparency = 0.100
			NofLabel.TextTransparency = 0.100
			NofLabel.TextWrapped = true
			NofLabel.Text = txt or """"

			slidenof.Name = ""slidenof""
			slidenof.Parent = Nof1
			slidenof.BackgroundColor3 = Color3.fromRGB(100, 100, 255)
			slidenof.BorderSizePixel = 0
			slidenof.Position = UDim2.new(0, 0, 0.638554215, 0)
			slidenof.Size = UDim2.new(0, 189, 0, 7)

			Slide2.Name = ""Slide2""
			Slide2.Parent = Nof1
			Slide2.BorderSizePixel = 0
			Slide2.BackgroundColor3 = main_color or Color3.fromRGB(51,255,255)
			Slide2.BorderColor3 = Color3.fromRGB(0, 0, 0)
			Slide2.Position = UDim2.new(0, 0, 0.0120481923, 0)
			Slide2.Size = UDim2.new(0, 0, 0, 65)
			Slide2.ZIndex = 15
			Slide2.Visible = false

			tween:Create(slidenof,tweeninfo(tine or 2),{Size = UDim2.new(0, 0, 0, 7)}):Play()
			wait(tine or 2)
			Slide2.Visible = true
			tween:Create(Slide2,tweeninfo(0.2),{Size = UDim2.new(0, 190, 0, 65)}):Play()
			wait(0.2)
			tween:Create(Slide2,tweeninfo(0.2),{Size = UDim2.new(0, 0, 0, 65)}):Play()
			tween:Create(Nof3,tweeninfo(0.2),{Size = UDim2.new(0, 0, 0, 7)}):Play()
			tween:Create(NofLabel,tweeninfo(0.2),{Size = UDim2.new(0, 0, 0, 52)}):Play()
			tween:Create(Nof2,tweeninfo(0.2),{Size = UDim2.new(0, 0, 0, 65)}):Play()
			wait(0.2)
			Nof2.Visible = false
			game.Debris:AddItem(Nof1,0)
		end)
	end

 
 function Update:AddNotification(textdesc)
 local NotificationFrame = Instance.new(""Frame"")
 local OkayBtn = Instance.new(""TextButton"")
 local OkayBtnCorner = Instance.new(""UICorner"")
 local OkayBtnTitle = Instance.new(""TextLabel"")
 local NotificationTitle = Instance.new(""TextLabel"")
 local NotificationDesc = Instance.new(""TextLabel"")
 local NotifCorner = Instance.new(""UICorner"")
 local NotifHolderUIStroke = Instance.new(""UIStroke"")
 local Line = Instance.new(""Frame"")
 

 
 
 
 NotificationFrame.Name = ""NotificationFrame""
 NotificationFrame.Parent = SOMEXHUB
 NotificationFrame.AnchorPoint = Vector2.new(0.5, 0.5)
 NotificationFrame.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
 NotificationFrame.BorderColor3 = _G.SectionColor
 NotificationFrame.BorderSizePixel = 0
 NotificationFrame.ClipsDescendants = true
 NotificationFrame.Position = UDim2.new(0, 1200, 0, 20)
 NotificationFrame.Size = UDim2.new(0, 0, 0, 0)		
 
 NotificationFrame:TweenSize(UDim2.new(0, 200, 0, 100), Enum.EasingDirection.Out, Enum.EasingStyle.Quart, .6, true)
 
 NotifCorner.Name = ""NotifCorner""
 NotifCorner.Parent = NotificationFrame
 NotifCorner.CornerRadius = UDim.new(0, 5)
 
 NotifHolderUIStroke.Name = ""NotifHolderUIStroke""
 NotifHolderUIStroke.Parent = NotificationFrame
 NotifHolderUIStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
 NotifHolderUIStroke.Color = _G.SectionColor
 NotifHolderUIStroke.LineJoinMode = Enum.LineJoinMode.Round
 NotifHolderUIStroke.Thickness = 1
 NotifHolderUIStroke.Transparency = 0
 NotifHolderUIStroke.Enabled = true
 NotifHolderUIStroke.Archivable = true
 
 OkayBtn.Name = ""OkayBtn""
 OkayBtn.Parent = NotificationFrame
 OkayBtn.BackgroundColor3 = Color3.fromRGB(190, 190, 190)
 OkayBtn.BorderSizePixel = 1
 OkayBtn.BorderColor3 = _G.SectionColor
 OkayBtn.Position = UDim2.new(0, 180, 0, 5)
 OkayBtn.Size = UDim2.new(0, 20, 0, 20)
 OkayBtn.AutoButtonColor = true
 OkayBtn.Font = Enum.Font.SourceSans
 OkayBtn.Text = ""X""
 OkayBtn.TextColor3 = Color3.fromRGB(255, 0, 0)
 OkayBtn.TextSize = 22.000
 
 OkayBtnCorner.CornerRadius = UDim.new(0, 5)
 OkayBtnCorner.Name = ""OkayBtnCorner""
 OkayBtnCorner.Parent = OkayBtn
 
 OkayBtnTitle.Name = ""OkayBtnTitle""
 OkayBtnTitle.Parent = OkayBtn
 OkayBtnTitle.BackgroundColor3 = _G.SectionColor
 OkayBtnTitle.BackgroundTransparency = 1.000
 OkayBtnTitle.Size = UDim2.new(0, 15, 0, 15)
 OkayBtnTitle.Text = """"
 OkayBtnTitle.Font = Enum.Font.Code
 OkayBtnTitle.TextColor3 = Color3.fromRGB(0, 0, 0)
 OkayBtnTitle.TextSize = 22.000
 
 NotificationTitle.Name = ""NotificationTitle""
 NotificationTitle.Parent = NotificationFrame
 NotificationTitle.BackgroundColor3 = _G.SectionColor
 NotificationTitle.BackgroundTransparency = 1.000
 NotificationTitle.Position = UDim2.new(0, 0, 0, 10)
 NotificationTitle.Size = UDim2.new(0, 200, 0, 25)
 NotificationTitle.ZIndex = 3
 NotificationTitle.Font = Enum.Font.Code
 NotificationTitle.Text = ""Notification""
 NotificationTitle.TextColor3 = Color3.fromRGB(50, 255, 255)
 NotificationTitle.TextSize = 22.000
 
 Line.Name = ""Line""
 Line.Parent = NotificationFrame
 Line.BackgroundColor3 = _G.SectionColor
 Line.BorderSizePixel = 0
 Line.Position = UDim2.new(0, 0, 0, 40)
 Line.Size = UDim2.new(0, 200, 0, 1)
 
 NotificationDesc.Name = ""NotificationDesc""
 NotificationDesc.Parent = NotificationFrame
 NotificationDesc.BackgroundColor3 = _G.SectionColor
 NotificationDesc.BackgroundTransparency = 1.000
 NotificationDesc.Position = UDim2.new(0, 10, 0, 50)
 NotificationDesc.Size = UDim2.new(0, 200, 0, 100)
 NotificationDesc.Font = Enum.Font.Code
 NotificationDesc.Text = textdesc
NotificationDesc.TextScaled = false
 NotificationDesc.TextColor3 = _G.SectionTextColor
 NotificationDesc.TextSize = 16.000
 NotificationDesc.TextWrapped = true
 NotificationDesc.TextXAlignment = Enum.TextXAlignment.Center
 NotificationDesc.TextYAlignment = Enum.TextYAlignment.Top
 
 OkayBtn.MouseEnter:Connect(function()
TweenService:Create(OkayBtn, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = Color3.fromRGB(30, 30, 30)}):Play()
 end)
 
 OkayBtn.MouseLeave:Connect(function()
TweenService:Create(OkayBtn, TweenInfo.new(.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = Color3.fromRGB(25, 25, 25)}):Play()
 end)
 
 OkayBtn.MouseButton1Click:Connect(function()
NotificationFrame:TweenSize(UDim2.new(0, 0, 0, 0), Enum.EasingDirection.Out, Enum.EasingStyle.Quart, .6, true)
 
wait(0.4)
 
TweenService:Create(NotificationHold, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundTransparency = 1}):Play()
 
wait(.3)
 
NotificationHold:Destroy()
 end)
 end


local Tab = Instance.new(""ImageLabel"")
local WindowStrokelol = Instance.new(""UIStroke"")
 Tab.Name = ""Tab""
 Tab.Parent = Top
 Tab.BackgroundColor3 = Color3.fromRGB(42, 42, 42)
 Tab.ImageTransparency = 1
 Tab.Position = UDim2.new(0, 160, 0, -2)
 Tab.Size = UDim2.new(0, 410, 0, 29)
 Tab.Image = ""rbxassetid://6675147486""
 
 WindowStrokelol.Name = ""WindowStroke""
 WindowStrokelol.Parent = Tab
 WindowStrokelol.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
 WindowStrokelol.Color = Color3.fromRGB(255,255,255)
 WindowStrokelol.LineJoinMode = Enum.LineJoinMode.Round
 WindowStrokelol.Thickness = 1
 WindowStrokelol.Transparency = 0
 WindowStrokelol.Enabled = true
 WindowStrokelol.Archivable = true
 
 local TCNR = Instance.new(""UICorner"")
 TCNR.Name = ""TCNR""
 TCNR.Parent = Tab
 
 local ScrollTab = Instance.new(""ScrollingFrame"")
 ScrollTab.Name = ""ScrollTab""
 ScrollTab.Parent = Tab
 ScrollTab.Active = true
 ScrollTab.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
 ScrollTab.BackgroundTransparency = 0
 ScrollTab.Size = UDim2.new(0, 433, 0, 29)
 ScrollTab.CanvasSize = UDim2.new(0, 0, 0, 0)
 ScrollTab.ScrollBarThickness = 0
 
 local PLL = Instance.new(""UIListLayout"")
 PLL.Name = ""PLL""
 PLL.Parent = ScrollTab
 PLL.FillDirection = Enum.FillDirection.Horizontal
 PLL.SortOrder = Enum.SortOrder.LayoutOrder
 PLL.Padding = UDim.new(0)
 
 local PPD = Instance.new(""UIPadding"")
 PPD.Name = ""PPD""
 PPD.Parent = ScrollTab
 PPD.PaddingLeft = UDim.new(0.01)
 
 local Page = Instance.new(""Frame"")
 local WindowStrokeshit = Instance.new(""UIStroke"")
 Page.Name = ""Page""
 Page.Parent = Main
 Page.BackgroundColor3 = Color3.fromRGB(42, 42, 42)
 Page.BackgroundTransparency = 1
 Page.Position = UDim2.new(0, 1, 0.100000003, -5)
 Page.Size = UDim2.new(0, 300, 0, 380)
 
 WindowStrokeshit.Name = ""WindowStroke""
 WindowStrokeshit.Parent = Page
 WindowStrokeshit.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
 WindowStrokeshit.Color = Color3.fromRGB(255,255,255)
 WindowStrokeshit.LineJoinMode = Enum.LineJoinMode.Round
 WindowStrokeshit.Thickness = 1
 WindowStrokeshit.Transparency = 0
 WindowStrokeshit.Archivable = false
 WindowStrokeshit.Enabled = true
 
 local lolshit = Instance.new(""UICorner"")
 
 lolshit.Parent = Top1
 
 
 local PCNR = Instance.new(""UICorner"")
 PCNR.Name = ""PCNR""
 PCNR.Parent = Page
 
 local MainPage = Instance.new(""Frame"")
 MainPage.Name = ""MainPage""
 MainPage.Parent = Page
 MainPage.ClipsDescendants = true
 MainPage.BackgroundColor3 = Color3.fromRGB(255,255,255)
 MainPage.BackgroundTransparency = 1.000
 MainPage.Size = UDim2.new(0, 300, 0, 380)
 
 local PageList = Instance.new(""Folder"")
 PageList.Name = ""PageList""
 PageList.Parent = MainPage
 
 local UIPageLayout = Instance.new(""UIPageLayout"")
 
 UIPageLayout.Parent = PageList
 UIPageLayout.SortOrder = Enum.SortOrder.LayoutOrder
 UIPageLayout.EasingDirection = Enum.EasingDirection.InOut
 UIPageLayout.EasingStyle = Enum.EasingStyle.Quad
 UIPageLayout.FillDirection = Enum.FillDirection.Vertical
 UIPageLayout.Padding = UDim.new(0, 15)
 UIPageLayout.TweenTime = 0.400
 UIPageLayout.GamepadInputEnabled = false
 UIPageLayout.ScrollWheelInputEnabled = false
 UIPageLayout.TouchInputEnabled = false

local Page2 = Instance.new(""Frame"")
 local WindowStrokeshit2 = Instance.new(""UIStroke"")
 Page2.Name = ""Page2""
 Page2.Parent = Main
 Page2.BackgroundColor3 = Color3.fromRGB(42, 42, 42)
 Page2.BackgroundTransparency = 1
 Page2.Position = UDim2.new(0, 302, 0.100000003, -5)
 Page2.Size = UDim2.new(0, 300, 0, 378)
 
 WindowStrokeshit2.Name = ""WindowStroke""
 WindowStrokeshit2.Parent = Page2
 WindowStrokeshit2.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
 WindowStrokeshit2.Color = Color3.fromRGB(255,255,255)
 WindowStrokeshit2.LineJoinMode = Enum.LineJoinMode.Round
 WindowStrokeshit2.Thickness = 1
 WindowStrokeshit2.Transparency = 0
 WindowStrokeshit2.Archivable = false
 WindowStrokeshit2.Enabled = true
 
 local lolshit2 = Instance.new(""UICorner"")
 
 lolshit2.Parent = Top1
 
 
 local PCNR2 = Instance.new(""UICorner"")
 PCNR2.Name = ""PCNR""
 PCNR2.Parent = Page2
 
 local MainPage2 = Instance.new(""Frame"")
 MainPage2.Name = ""MainPage""
 MainPage2.Parent = Page2
 MainPage2.ClipsDescendants = true
 MainPage2.BackgroundColor3 = Color3.fromRGB(255,255,255)
 MainPage2.BackgroundTransparency = 1.000
 MainPage2.Size = UDim2.new(0, 300, 0, 378)
 
 local PageList2 = Instance.new(""Folder"")
 PageList2.Name = ""PageList""
 PageList2.Parent = MainPage2
 
 local UIPageLayout2 = Instance.new(""UIPageLayout"")
 
 UIPageLayout2.Parent = PageList2
 UIPageLayout2.SortOrder = Enum.SortOrder.LayoutOrder
 UIPageLayout2.EasingDirection = Enum.EasingDirection.InOut
 UIPageLayout2.EasingStyle = Enum.EasingStyle.Quad
 UIPageLayout2.FillDirection = Enum.FillDirection.Vertical
 UIPageLayout2.Padding = UDim.new(0, 15)
 UIPageLayout2.TweenTime = 0.400
 UIPageLayout2.GamepadInputEnabled = false
 UIPageLayout2.ScrollWheelInputEnabled = false
 UIPageLayout2.TouchInputEnabled = false
 
 MakeDraggable(Top,Main)
 
 UserInputService.InputBegan:Connect(function(input)
if input.KeyCode == Enum.KeyCode[yoo] then
if uihide == false then
 uihide = true
 Main:TweenSize(UDim2.new(0, 0, 0, 0),""In"",""Quad"",0,true)
else
 uihide = false
 Main:TweenSize(UDim2.new(0, 600, 0, 400),""Out"",""Quad"",0,true)
end
end
 end)
	


 
	local uitab = {}
	
	function uitab:AddTab(text, img)
		local TabButton = Instance.new(""TextButton"")
		local TabImage = Instance.new(""ImageLabel"")
		local WindowStroke = Instance.new(""UIStroke"")
		local Label3 = Instance.new(""TextLabel"")
		local LabelTitle = Instance.new(""TextLabel"")
local LabelTitle = Instance.new(""TextLabel"")

		TabButton.Parent = ScrollTab
		TabButton.Name = text..""Server""
		TabButton.Text = text
		TabButton.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
		TabButton.BackgroundTransparency = 0.1
		TabButton.Position = UDim2.new(0, 2, 0, 0)
		TabButton.Size = UDim2.new(0, 100, 0, 28)
		TabButton.Font = Enum.Font.Code
		TabButton.TextColor3 = Color3.fromRGB(255, 225, 225)
		TabButton.TextSize = 12.000
		TabButton.TextTransparency = 0
		
		
local MCNR1 = Instance.new(""UICorner"")
	MCNR1.Name = ""MCNR""
	MCNR1.Parent = TabButton

WindowStroke.Name = ""WindowStroke""
 WindowStroke.Parent = TabButton
 WindowStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
 WindowStroke.Color = Color3.fromRGB(45,45,45)
 WindowStroke.LineJoinMode = Enum.LineJoinMode.Round
 WindowStroke.Thickness = 1
 WindowStroke.Transparency = 0
 WindowStroke.Enabled = true
 WindowStroke.Archivable = true

		local MainFramePage = Instance.new(""ScrollingFrame"")
		MainFramePage.Name = text..""_Page""
		MainFramePage.Parent = PageList
		MainFramePage.Active = true
		MainFramePage.BackgroundColor3 = Color3.fromRGB(51,255,255)
		MainFramePage.BackgroundTransparency = 1.000
		MainFramePage.BorderSizePixel = 1
		MainFramePage.Size = UDim2.new(0, 390, 0, 370)
		MainFramePage.CanvasSize = UDim2.new(0, 0, 0, 0)
		MainFramePage.ScrollBarThickness = 0
		

		
		local UIPadding = Instance.new(""UIPadding"")
		local UIListLayout = Instance.new(""UIListLayout"")
		
		UIPadding.Parent = MainFramePage
		UIPadding.PaddingLeft = UDim.new(0, 10)
		UIPadding.PaddingTop = UDim.new(0, 10)

		UIListLayout.Padding = UDim.new(0,4)
		UIListLayout.Parent = MainFramePage
		UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
		
		TabButton.MouseButton1Click:Connect(function()
        Sound = Instance.new(""Sound"", game:GetService(""Workspace"")) -- ตรงนี้ไม่ต้องไปสน นาจา ;0;
Sound.Name = ""Notify"" -- ชื่อเสียง \;
Sound.SoundId = ""rbxassetid://903267862"" -- เลขขขขขเสียง ;/
Sound.Looped = false -- วนลูป :>
Sound.Playing = true -- เล่นเสียง :<
Sound.Volume = 1 -- ระดับเสียงงงงงงง ;-;
			for i,v in next, ScrollTab:GetChildren() do
				if v:IsA(""TextButton"") then
					TweenService:Create(
						v,
						TweenInfo.new(0,Enum.EasingStyle.Quad,Enum.EasingDirection.Out),
						{TextTransparency = 0}
					):Play()
				end
				TweenService:Create(
					TabButton,
					TweenInfo.new(0,Enum.EasingStyle.Quad,Enum.EasingDirection.Out),
					{TextTransparency = 0}
				):Play()
			end
			for i,v in next, PageList:GetChildren() do
				currentpage = string.gsub(TabButton.Name,""Server"","""")..""_Page""
				if v.Name == currentpage then
					UIPageLayout:JumpTo(v)
				end
			end
		end)

		if abc == false then
            
			for i,v in next, ScrollTab:GetChildren() do
				if v:IsA(""TextButton"") then
					TweenService:Create(
						v,
						TweenInfo.new(0,Enum.EasingStyle.Quad,Enum.EasingDirection.Out),
						{TextTransparency = 0}
					):Play()
				end
				TweenService:Create(
					TabButton,
					TweenInfo.new(0,Enum.EasingStyle.Quad,Enum.EasingDirection.Out),
					{TextTransparency = 0}
				):Play()
			end
			UIPageLayout:JumpToIndex(0)
			abc = true
		end
		
		game:GetService(""RunService"").Stepped:Connect(function()
			pcall(function()
				MainFramePage.CanvasSize = UDim2.new(0,0,0,UIListLayout.AbsoluteContentSize.Y + 20)
				ScrollTab.CanvasSize = UDim2.new(0,PLL.AbsoluteContentSize.X + 20,0,0)
			end)
		end)
 
 coroutine.wrap(function()
 while wait() do
 end
 end)()
 
	 
 
 coroutine.wrap(function()
 while wait() do
 end
 end)()
	
	
	local MainFramePage2 = Instance.new(""ScrollingFrame"")
		MainFramePage2.Name = text..""_Page""
		MainFramePage2.Parent = PageList2
		MainFramePage2.Active = true
		MainFramePage2.BackgroundColor3 = Color3.fromRGB(51,255,255)
		MainFramePage2.BackgroundTransparency = 1.000
		MainFramePage2.BorderSizePixel = 0
		MainFramePage2.Size = UDim2.new(0, 320, 0, 370)
		MainFramePage2.CanvasSize = UDim2.new(0, 0, 0, 0)
		MainFramePage2.ScrollBarThickness = 0
		
		local UIPadding2 = Instance.new(""UIPadding"")
		local UIListLayout2 = Instance.new(""UIListLayout"")
		
		UIPadding2.Parent = MainFramePage2
		UIPadding2.PaddingLeft = UDim.new(0, 10)
		UIPadding2.PaddingTop = UDim.new(0, 10)

		UIListLayout2.Padding = UDim.new(0,4)
		UIListLayout2.Parent = MainFramePage2
		UIListLayout2.SortOrder = Enum.SortOrder.LayoutOrder
		
		TabButton.MouseButton1Click:Connect(function()
			for i,v in next, ScrollTab:GetChildren() do
				if v:IsA(""TextButton"") then
					TweenService:Create(
						v,
						TweenInfo.new(0,Enum.EasingStyle.Quad,Enum.EasingDirection.Out),
						{TextTransparency = 0}
					):Play()
				end
				TweenService:Create(
					TabButton,
					TweenInfo.new(0,Enum.EasingStyle.Quad,Enum.EasingDirection.Out),
					{TextTransparency = 0}
				):Play()
			end
			for i,v in next, PageList2:GetChildren() do
				currentpage = string.gsub(TabButton.Name,""Server"","""")..""_Page""
				if v.Name == currentpage then
					UIPageLayout2:JumpTo(v)
				end
			end
		end)

		if abc == false then
			for i,v in next, ScrollTab:GetChildren() do
				if v:IsA(""TextButton"") then
					TweenService:Create(
						v,
						TweenInfo.new(0,Enum.EasingStyle.Quad,Enum.EasingDirection.Out),
						{TextTransparency = 0}
					):Play()
				end
				TweenService:Create(
					TabButton,
					TweenInfo.new(0,Enum.EasingStyle.Quad,Enum.EasingDirection.Out),
					{TextTransparency = 0}
				):Play()
			end
			UIPageLayout2:JumpToIndex(0)
			abc = true
		end
		
		game:GetService(""RunService"").Stepped:Connect(function()
			pcall(function()
				MainFramePage2.CanvasSize = UDim2.new(0,0,0,UIListLayout2.AbsoluteContentSize.Y + 20)
				ScrollTab.CanvasSize = UDim2.new(0,PLL.AbsoluteContentSize.X + 20,0,0)
			end)
		end)
 
 coroutine.wrap(function()
 while wait() do
 end
 end)()
 
	 
 
 coroutine.wrap(function()
 while wait() do
 end
 end)()
	local abcd = false
	 function uitab:AddTabH(text,img)
	 local mainDiscord = Instance.new(""ImageButton"")

	 mainDiscord.Name = ""mainDiscord""
    mainDiscord.Parent = Top
    mainDiscord.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    mainDiscord.BackgroundTransparency = 1.000
    mainDiscord.Position = UDim2.new(0, 565, 0, 0)
    mainDiscord.Size = UDim2.new(0, 30, 0, 30)
    mainDiscord.Image = ""rbxassetid://""..tostring(img)
    mainDiscord.ImageColor3 = Color3.fromRGB(200, 200, 200)
    
        local MainFramePage = Instance.new(""ScrollingFrame"")
		MainFramePage.Name = text..""_Page""
		MainFramePage.Parent = PageList
		MainFramePage.Active = true
		MainFramePage.BackgroundColor3 = Color3.fromRGB(51,255,255)
		MainFramePage.BackgroundTransparency = 1.000
		MainFramePage.BorderSizePixel = 1
		MainFramePage.Size = UDim2.new(0, 390, 0, 370)
		MainFramePage.CanvasSize = UDim2.new(0, 0, 0, 0)
		MainFramePage.ScrollBarThickness = 0
		

		
		local UIPadding = Instance.new(""UIPadding"")
		local UIListLayout = Instance.new(""UIListLayout"")
		
		UIPadding.Parent = MainFramePage
		UIPadding.PaddingLeft = UDim.new(0, 10)
		UIPadding.PaddingTop = UDim.new(0, 10)

		UIListLayout.Padding = UDim.new(0,4)
		UIListLayout.Parent = MainFramePage
		UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
		
		mainDiscord.MouseButton1Click:Connect(function()
        Sound = Instance.new(""Sound"", game:GetService(""Workspace"")) -- ตรงนี้ไม่ต้องไปสน นาจา ;0;
Sound.Name = ""Notify"" -- ชื่อเสียง \;
Sound.SoundId = ""rbxassetid://3020841054"" -- เลขขขขขเสียง ;/
Sound.Looped = false -- วนลูป :>
Sound.Playing = true -- เล่นเสียง :<
Sound.Volume = 1 -- ระดับเสียงงงงงงง ;-;
			for i,v in next, ScrollTab:GetChildren() do
				if v:IsA(""TextButton"") then
					TweenService:Create(
						v,
						TweenInfo.new(0,Enum.EasingStyle.Quad,Enum.EasingDirection.Out),
						{TextTransparency = 0}
					):Play()
				end
				TweenService:Create(
					TabButton,
					TweenInfo.new(0,Enum.EasingStyle.Quad,Enum.EasingDirection.Out),
					{TextTransparency = 0}
				):Play()
			end
			for i,v in next, PageList:GetChildren() do
				currentpage2 = string.gsub(TabButton.Name,""Server"","""")..""_Page""
				if v.Name == currentpage2 then
					UIPageLayout:JumpTo(v)
				end
			end
		end)

		if abc == false then
            
			for i,v in next, ScrollTab:GetChildren() do
				if v:IsA(""TextButton"") then
					TweenService:Create(
						v,
						TweenInfo.new(0,Enum.EasingStyle.Quad,Enum.EasingDirection.Out),
						{TextTransparency = 0}
					):Play()
				end
				TweenService:Create(
					TabButton,
					TweenInfo.new(0,Enum.EasingStyle.Quad,Enum.EasingDirection.Out),
					{TextTransparency = 0}
				):Play()
			end
			UIPageLayout:JumpToIndex(0)
			abc = true
		end
		
		game:GetService(""RunService"").Stepped:Connect(function()
			pcall(function()
				MainFramePage.CanvasSize = UDim2.new(0,0,0,UIListLayout.AbsoluteContentSize.Y + 20)
				ScrollTab.CanvasSize = UDim2.new(0,PLL.AbsoluteContentSize.X + 20,0,0)
			end)
		end)
 
 coroutine.wrap(function()
 while wait() do
 end
 end)()
 
	 
 
 coroutine.wrap(function()
 while wait() do
 end
 end)()
	
	
	local MainFramePage2 = Instance.new(""ScrollingFrame"")
		MainFramePage2.Name = text..""_Page""
		MainFramePage2.Parent = PageList2
		MainFramePage2.Active = true
		MainFramePage2.BackgroundColor3 = Color3.fromRGB(51,255,255)
		MainFramePage2.BackgroundTransparency = 1.000
		MainFramePage2.BorderSizePixel = 0
		MainFramePage2.Size = UDim2.new(0, 320, 0, 370)
		MainFramePage2.CanvasSize = UDim2.new(0, 0, 0, 0)
		MainFramePage2.ScrollBarThickness = 0
		
		local UIPadding2 = Instance.new(""UIPadding"")
		local UIListLayout2 = Instance.new(""UIListLayout"")
		
		UIPadding2.Parent = MainFramePage2
		UIPadding2.PaddingLeft = UDim.new(0, 10)
		UIPadding2.PaddingTop = UDim.new(0, 10)

		UIListLayout2.Padding = UDim.new(0,4)
		UIListLayout2.Parent = MainFramePage2
		UIListLayout2.SortOrder = Enum.SortOrder.LayoutOrder
		
		mainDiscord.MouseButton1Click:Connect(function()
			for i,v in next, ScrollTab:GetChildren() do
				if v:IsA(""TextButton"") then
					TweenService:Create(
						v,
						TweenInfo.new(0,Enum.EasingStyle.Quad,Enum.EasingDirection.Out),
						{TextTransparency = 0}
					):Play()
				end
				TweenService:Create(
					TabButton,
					TweenInfo.new(0,Enum.EasingStyle.Quad,Enum.EasingDirection.Out),
					{TextTransparency = 0}
				):Play()
			end
			for i,v in next, PageList2:GetChildren() do
				currentpage2 = string.gsub(TabButton.Name,""Server"","""")..""_Page""
				if v.Name == currentpage2 then
					UIPageLayout2:JumpTo(v)
				end
			end
		end)

		if abc == false then
			for i,v in next, ScrollTab:GetChildren() do
				if v:IsA(""TextButton"") then
					TweenService:Create(
						v,
						TweenInfo.new(0,Enum.EasingStyle.Quad,Enum.EasingDirection.Out),
						{TextTransparency = 0}
					):Play()
				end
				TweenService:Create(
					mainDiscord,
					TweenInfo.new(0,Enum.EasingStyle.Quad,Enum.EasingDirection.Out),
					{TextTransparency = 0}
				):Play()
			end
			UIPageLayout2:JumpToIndex(0)
			abc = true
		end
		
		game:GetService(""RunService"").Stepped:Connect(function()
			pcall(function()
				MainFramePage2.CanvasSize = UDim2.new(0,0,0,UIListLayout2.AbsoluteContentSize.Y + 20)
				ScrollTab.CanvasSize = UDim2.new(0,PLL.AbsoluteContentSize.X + 20,0,0)
			end)
		end)
 
 coroutine.wrap(function()
 while wait() do
 end
 end)()

 
	 
 
 coroutine.wrap(function()
 while wait() do
 end
 end)()
	end
	
		local main = {}
		function main:AddButtonRight(text,callback)
			local Button2 = Instance.new(""Frame"")
			local UICorner2 = Instance.new(""UICorner"")
			local TextBtn2 = Instance.new(""TextButton"")
			local UICorner_1 = Instance.new(""UICorner"")
			local Black2 = Instance.new(""Frame"")
			local UICorner_2 = Instance.new(""UICorner"")
			
			Button2.Name = ""Button""
			Button2.Parent = MainFramePage2
			Button2.BackgroundColor3 = _G.Color
			Button2.Size = UDim2.new(0, 280, 0, 28)
			
			UICorner2.CornerRadius = UDim.new(0, 5)
			UICorner2.Parent = Button2
			
			TextBtn2.Name = ""TextBtn""
			TextBtn2.Parent = Button2
			TextBtn2.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
			TextBtn2.Position = UDim2.new(0, 1, 0, 1)
			TextBtn2.Size = UDim2.new(0, 278, 0, 26)
			TextBtn2.AutoButtonColor = false
			TextBtn2.Font = Enum.Font.Code
			TextBtn2.Text = text
			TextBtn2.TextColor3 = Color3.fromRGB(225, 225, 225)
			TextBtn2.TextSize = 12.000
			
			UICorner_1.CornerRadius = UDim.new(0, 5)
			UICorner_1.Parent = TextBtn2
			
			Black2.Name = ""Black""
			Black2.Parent = Button2
			Black2.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
			Black2.BackgroundTransparency = 1.000
			Black2.BorderSizePixel = 0
			Black2.Position = UDim2.new(0, 1, 0, 1)
			Black2.Size = UDim2.new(0, 280, 0, 26)
			
			UICorner_2.CornerRadius = UDim.new(0, 5)
			UICorner_2.Parent = Black2

			TextBtn2.MouseEnter:Connect(function()
				TweenService:Create(
					Black2,
					TweenInfo.new(0.4,Enum.EasingStyle.Quad,Enum.EasingDirection.Out),
					{BackgroundTransparency = 0.7}
				):Play()
			end)
			TextBtn2.MouseLeave:Connect(function()
				TweenService:Create(
					Black2,
					TweenInfo.new(0.4,Enum.EasingStyle.Quad,Enum.EasingDirection.Out),
					{BackgroundTransparency = 1}
				):Play()
			end)
			TextBtn2.MouseButton1Click:Connect(function()
				TextBtn2.TextSize = 0
				TweenService:Create(
					TextBtn2,
					TweenInfo.new(0.4,Enum.EasingStyle.Quad,Enum.EasingDirection.Out),
					{TextSize = 12}
				):Play()
				callback()
			end)
		end
		
		function main:AddButtonLeft(text,callback)
			local Button = Instance.new(""Frame"")
			local UICorner = Instance.new(""UICorner"")
			local TextBtn = Instance.new(""TextButton"")
			local UICorner_2 = Instance.new(""UICorner"")
			local Black = Instance.new(""Frame"")
			local UICorner_3 = Instance.new(""UICorner"")
			
			Button.Name = ""Button""
			Button.Parent = MainFramePage
			Button.BackgroundColor3 = _G.Color
			Button.Size = UDim2.new(0, 280, 0, 28)
			
			UICorner.CornerRadius = UDim.new(0, 5)
			UICorner.Parent = Button
			
			TextBtn.Name = ""TextBtn""
			TextBtn.Parent = Button
			TextBtn.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
			TextBtn.Position = UDim2.new(0, 1, 0, 1)
			TextBtn.Size = UDim2.new(0, 278, 0, 26)
			TextBtn.AutoButtonColor = false
			TextBtn.Font = Enum.Font.Code
			TextBtn.Text = text
			TextBtn.TextColor3 = Color3.fromRGB(225, 225, 225)
			TextBtn.TextSize = 12.000
			
			UICorner_2.CornerRadius = UDim.new(0, 5)
			UICorner_2.Parent = TextBtn
			
			Black.Name = ""Black""
			Black.Parent = Button
			Black.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
			Black.BackgroundTransparency = 1.000
			Black.BorderSizePixel = 0
			Black.Position = UDim2.new(0, 1, 0, 1)
			Black.Size = UDim2.new(0, 280, 0, 26)
			
			UICorner_3.CornerRadius = UDim.new(0, 5)
			UICorner_3.Parent = Black

			TextBtn.MouseEnter:Connect(function()
				TweenService:Create(
					Black,
					TweenInfo.new(0.4,Enum.EasingStyle.Quad,Enum.EasingDirection.Out),
					{BackgroundTransparency = 0.7}
				):Play()
			end)
			TextBtn.MouseLeave:Connect(function()
				TweenService:Create(
					Black,
					TweenInfo.new(0.4,Enum.EasingStyle.Quad,Enum.EasingDirection.Out),
					{BackgroundTransparency = 1}
				):Play()
			end)
			TextBtn.MouseButton1Click:Connect(function()
				TextBtn.TextSize = 0
				TweenService:Create(
					TextBtn,
					TweenInfo.new(0.4,Enum.EasingStyle.Quad,Enum.EasingDirection.Out),
					{TextSize = 12}
				):Play()
				callback()
			end)
		end
		function main:AddToggleLeft(text,config,callback)
			config = config or false
			local toggled = config
			local Toggle = Instance.new(""Frame"")
			local UICorner = Instance.new(""UICorner"")
		local Button = Instance.new(""TextButton"")
		local True = Instance.new(""TextLabel"")
			local UICorner_2 = Instance.new(""UICorner"")
			local Label = Instance.new(""TextLabel"")
			local ToggleImage = Instance.new(""Frame"")
			local UICorner_3 = Instance.new(""UICorner"")
			local Circle = Instance.new(""ImageLabel"")
			local UICorner_4 = Instance.new(""UICorner"")
local ImageLabel = Instance.new(""ImageLabel"")
local Space = Instance.new(""TextLabel"")

			Toggle.Name = ""Toggle""
			Toggle.Parent = MainFramePage
			Toggle.BackgroundColor3 = _G.Color
			Toggle.Size = UDim2.new(0, 280, 0, 28)

			UICorner.CornerRadius = UDim.new(0, 5)
			UICorner.Parent = Toggle

			Button.Name = ""Button""
			Button.Parent = Toggle
			Button.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
			Button.Position = UDim2.new(0, 1, 0, 1)
			Button.Size = UDim2.new(0, 278, 0, 26)
			Button.AutoButtonColor = false
			Button.Font = Enum.Font.SourceSans
			Button.Text = """"
			Button.TextColor3 = Color3.fromRGB(0, 0, 0)
			Button.TextSize = 11.000

			UICorner_2.CornerRadius = UDim.new(0, 5)
			UICorner_2.Parent = Button

			Label.Name = ""Label""
			Label.Parent = Toggle
			Label.BackgroundColor3 = Color3.fromRGB(0,255,255)
			Label.BackgroundTransparency = 1.000
			Label.Position = UDim2.new(0, 1, 0, 1)
			Label.Size = UDim2.new(0, 278, 0, 26)
			Label.Font = Enum.Font.Code
			Label.Text = text
			Label.TextColor3 = Color3.fromRGB(225, 225, 225)
			Label.TextSize = 12.000
			

        ToggleImage.Name = ""ToggleImage""
			ToggleImage.Parent = Toggle
			ToggleImage.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
			ToggleImage.Position = UDim2.new(0, 250, 0, 4)
			ToggleImage.Size = UDim2.new(0, 22, 0, 20)

			UICorner_3.CornerRadius = UDim.new(0, 4)
			UICorner_3.Parent = ToggleImage

			Circle.Name = ""Circle""
			Circle.Parent = ToggleImage
			Circle.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
			Circle.Position = UDim2.new(0, 2, 0, 2)
			Circle.Size = UDim2.new(0, 18, 0, 16)
			
			True.Name = ""True""
			True.Parent = Circle
			True.BackgroundTransparency = 1.000
			True.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
			True.Position = UDim2.new(0, 0, 0, 0)
			True.Size = UDim2.new(0, 18, 0, 16)
			True.Font = Enum.Font.SourceSans
			True.Text = """"
			True.TextColor3 = Color3.fromRGB(0, 0, 0)
			True.TextSize = 18.000

			UICorner_4.CornerRadius = UDim.new(0, 0)
			UICorner_4.Parent = Circle

			Button.MouseButton1Click:Connect(function()
				if toggled == false then
					toggled = true
					True.Text = ""✔""
					Circle:TweenPosition(UDim2.new(0,2,0,2),""Out"",""Sine"",0,true)
					TweenService:Create(
						Circle,
						TweenInfo.new(0,Enum.EasingStyle.Quad,Enum.EasingDirection.Out),
						{BackgroundColor3 = Color3.fromRGB(30, 255, 30)}
					):Play()
				else
					toggled = false
					True.Text = """"
					Circle:TweenPosition(UDim2.new(0,2,0,2),""Out"",""Sine"",0,true)
					TweenService:Create(
						Circle,
						TweenInfo.new(0,Enum.EasingStyle.Quad,Enum.EasingDirection.Out),
						{BackgroundColor3 = Color3.fromRGB(30, 30, 30)}
					):Play()
					
				end
				pcall(callback,toggled)
			end)

			if config == true then
				toggled = true
				True.Text = ""✔""
				Circle:TweenPosition(UDim2.new(0,2,0,2),""Out"",""Sine"",0,true)
				TweenService:Create(
					Circle,
					TweenInfo.new(0.4,Enum.EasingStyle.Quad,Enum.EasingDirection.Out),
					{BackgroundColor3 = Color3.fromRGB(30, 255, 30)}
				):Play()
				pcall(callback,toggled)
			end
		end
		
function main:AddToggleRight(text,config,callback)
			config = config or false
			local toggledd = config
			local Togglee = Instance.new(""Frame"")
			local UICornerr = Instance.new(""UICorner"")
			local Truea =Instance.new(""TextLabel"")
		local Buttonn = Instance.new(""TextButton"")
			local UICorner_22 = Instance.new(""UICorner"")
			local Labell = Instance.new(""TextLabel"")
			local ToggleImagee = Instance.new(""Frame"")
			local UICorner_33 = Instance.new(""UICorner"")
			local Circlee = Instance.new(""Frame"")
			local UICorner_44 = Instance.new(""UICorner"")
local ImageLabell = Instance.new(""ImageLabel"")
local Spacee = Instance.new(""TextLabel"")

			Togglee.Name = ""Toggle""
			Togglee.Parent = MainFramePage2
			Togglee.BackgroundColor3 = _G.Color
			Togglee.Size = UDim2.new(0, 280, 0, 28)

			UICornerr.CornerRadius = UDim.new(0, 5)
			UICornerr.Parent = Togglee

			Buttonn.Name = ""Button""
			Buttonn.Parent = Togglee
			Buttonn.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
			Buttonn.Position = UDim2.new(0, 1, 0, 1)
			Buttonn.Size = UDim2.new(0, 278, 0, 26)
			Buttonn.AutoButtonColor = false
			Buttonn.Font = Enum.Font.SourceSans
			Buttonn.Text = """"
			Buttonn.TextColor3 = Color3.fromRGB(0, 0, 0)
			Buttonn.TextSize = 11.000

			UICorner_22.CornerRadius = UDim.new(0, 5)
			UICorner_22.Parent = Buttonn

			Labell.Name = ""Label""
			Labell.Parent = Togglee
			Labell.BackgroundColor3 = Color3.fromRGB(51,255,255)
			Labell.BackgroundTransparency = 1.000
			Labell.Position = UDim2.new(0, 1, 0, 1)
			Labell.Size = UDim2.new(0, 278, 0, 26)
			Labell.Font = Enum.Font.Code
			Labell.Text = text
			Labell.TextColor3 = Color3.fromRGB(225, 225, 225)
			Labell.TextSize = 12.000
			



		 ToggleImagee.Name = ""ToggleImage""
			ToggleImagee.Parent = Togglee
			ToggleImagee.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
			ToggleImagee.Position = UDim2.new(0, 250, 0, 5)
			ToggleImagee.Size = UDim2.new(0, 22, 0, 20)

			UICorner_33.CornerRadius = UDim.new(0, 4)
			UICorner_33.Parent = ToggleImagee

			Circlee.Name = ""Circle""
			Circlee.Parent = ToggleImagee
			Circlee.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
			Circlee.Position = UDim2.new(0, 2, 0, 2)
			Circlee.Size = UDim2.new(0, 18, 0, 16)

Truea.Name = ""Truea""
			Truea.Parent = Circlee
			Truea.BackgroundTransparency = 1.000
			Truea.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
			Truea.Position = UDim2.new(0, 0, 0, 0)
			Truea.Size = UDim2.new(0, 18, 0, 16)
			Truea.Font = Enum.Font.SourceSans
			Truea.Text = """"
			Truea.TextColor3 = Color3.fromRGB(0, 0, 0)
			Truea.TextSize = 18.000

			UICorner_44.CornerRadius = UDim.new(0, 0)
			UICorner_44.Parent = Circlee

			Buttonn.MouseButton1Click:Connect(function()
				if toggledd == false then
					toggledd = true
					Truea.Text = ""✔""
					Circlee:TweenPosition(UDim2.new(0,2,0,2),""Out"",""Sine"",0,true)
					TweenService:Create(
						Circlee,
						TweenInfo.new(0,Enum.EasingStyle.Quad,Enum.EasingDirection.Out),
						{BackgroundColor3 = Color3.fromRGB(30, 255, 30)}
					):Play()
				else
					toggledd = false
					Truea.Text = """"
					Circlee:TweenPosition(UDim2.new(0,2,0,2),""Out"",""Sine"",0,true)
					TweenService:Create(
						Circlee,
						TweenInfo.new(0,Enum.EasingStyle.Quad,Enum.EasingDirection.Out),
						{BackgroundColor3 = Color3.fromRGB(30, 30, 30)}
					):Play()
				end
				pcall(callback,toggledd)
			end)

			if config == true then
				toggledd = true
				Truea.Text = ""✔""
				Circlee:TweenPosition(UDim2.new(0,2,0,2),""Out"",""Sine"",0,true)
				TweenService:Create(
					Circlee,
					TweenInfo.new(0.4,Enum.EasingStyle.Quad,Enum.EasingDirection.Out),
					{BackgroundColor3 = Color3.fromRGB(30, 255, 30)}
				):Play()
				pcall(callback,toggledd)
			end
		end

		

		
		function main:AddDropdownLeft(droptitle, list, callback)
-- Local --
local dropfunc = {}
local list = list or {}
local DropToggled = false
local DropSizeFrame = Instance.new(""Frame"")
local Frame = Instance.new(""Frame"")
local UIStroke = Instance.new(""UIStroke"")
local DropCover = Instance.new(""Frame"")
local UICorner = Instance.new(""UICorner"")
local UICorner2 = Instance.new(""UICorner"")
local ImageLabel = Instance.new(""ImageLabel"")
local Space = Instance.new(""TextLabel"")
local Title = Instance.new(""TextLabel"")
local ImageButton = Instance.new(""ImageButton"")
local DropStrokeList = Instance.new(""UIStroke"")
local DropTextList = Instance.new(""TextLabel"")

-- Prop --
DropSizeFrame.Name = droptitle or ""DropSizeFrame""
DropSizeFrame.Parent = MainFramePage
DropSizeFrame.BackgroundColor3 = _G.SectionColor
DropSizeFrame.BackgroundTransparency = 1.000
DropSizeFrame.Size = UDim2.new(0, 280, 0, 60)

Frame.Name = ""Frame""
Frame.Parent = DropSizeFrame
Frame.BackgroundColor3 = Color3.fromRGB(30,30,30)
Frame.BorderSizePixel = 0
Frame.Position = UDim2.new(0, 3, 0, 0)
Frame.Size = UDim2.new(0, 278, 0, 60)

UIStroke.Name = ""UIStroke""
UIStroke.Parent = Frame
UIStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
UIStroke.Color = Color3.fromRGB(255,255,255)
UIStroke.LineJoinMode = Enum.LineJoinMode.Round
UIStroke.Thickness = 0.7
UIStroke.Transparency = 0
UIStroke.Enabled = true
UIStroke.Archivable = true

UICorner.Parent = Frame
UICorner.CornerRadius = UDim.new(0, 3)

DropCover.Name = ""DropCover""
DropCover.Parent = Frame
DropCover.BackgroundColor3 = _G.BackgroundItemColor
DropCover.BackgroundTransparency = 1.000
DropCover.BorderSizePixel = 0
DropCover.Position = UDim2.new(0, 0, 0, 0)
DropCover.Size = UDim2.new(0, 202, 0, 30)

ImageLabel.Name = ""ImageLabel""
ImageLabel.Parent = DropCover
ImageLabel.BackgroundColor3 = _G.SectionColor
ImageLabel.BackgroundTransparency = 1.000
ImageLabel.BorderSizePixel = 0
ImageLabel.Position = UDim2.new(0, 5, 0, 6)
ImageLabel.Size = UDim2.new(0, 18, 0, 18)
ImageLabel.Image = ""rbxassetid://8825010231""
ImageLabel.ImageColor3 = Color3.fromRGB(255,255,255)

Space.Name = ""Space""
Space.Parent = DropCover
Space.BackgroundColor3 = _G.SectionColor
Space.BackgroundTransparency = 1.000
Space.Position = UDim2.new(0, 30, 0, 0)
Space.Size = UDim2.new(0, 15, 0, 30)
Space.Font = Enum.Font.Code
Space.Text = ""|""
Space.TextSize = 13.000
Space.TextColor3 = Color3.fromRGB(255,255,255)
Space.TextXAlignment = Enum.TextXAlignment.Center

Title.Name = ""Title""
Title.Parent = DropCover
Title.BackgroundColor3 = _G.SectionColor
Title.BackgroundTransparency = 1.000
Title.Position = UDim2.new(0, 50, 0, 0)
Title.Size = UDim2.new(0, 207, 0, 30)
Title.Font = Enum.Font.Code
Title.Text = droptitle or ""drop Title""
Title.TextColor3 = Color3.fromRGB(255,255,255)
Title.TextSize = 12.000
Title.TextXAlignment = Enum.TextXAlignment.Left

ImageButton.Name = ""ImageButton""
ImageButton.Parent = DropCover
ImageButton.BackgroundColor3 = _G.WindowBackgroundColor
ImageButton.BackgroundTransparency = 1.000
ImageButton.Position = UDim2.new(0, 250, 0, 7)
ImageButton.Size = UDim2.new(0, 23, 0, 18)
ImageButton.Image = ""rbxassetid://6583628103""
ImageButton.ImageColor3 = Color3.fromRGB(51,255,255)
ImageButton.Rotation = 180

DropTextList.Name = ""DropTextList""
DropTextList.Parent = Frame
DropTextList.BackgroundColor3 = _G.BackgroundItemColor
DropTextList.BackgroundTransparency = 1.000
DropTextList.Position = UDim2.new(0, 3, 0, 30)
DropTextList.Size = UDim2.new(0, 278, 0, 25)
DropTextList.Font = Enum.Font.Code
DropTextList.Text = v or ""Select First""
DropTextList.TextColor3 = Color3.fromRGB(255,255,255)
DropTextList.TextSize = 12.000
DropTextList.TextXAlignment = Enum.TextXAlignment.Center

UICorner2.Parent = DropTextList
UICorner2.CornerRadius = UDim.new(0,0)

DropStrokeList.Name = ""DropStrokeList""
DropStrokeList.Parent = DropTextList
DropStrokeList.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
DropStrokeList.Color = Color3.fromRGB(255,255,255)
DropStrokeList.LineJoinMode = Enum.LineJoinMode.Round
DropStrokeList.Thickness = 0.2
DropStrokeList.Transparency = 0
DropStrokeList.Enabled = true
DropStrokeList.Archivable = true

-- Adden Local --
local DropItemScroll = Instance.new(""ScrollingFrame"")
local DropItemLayout = Instance.new(""UIListLayout"")
local DropItemStroke = Instance.new(""UIStroke"")

-- Adden Prop --
DropItemScroll.Name = ""DropItemScroll""
DropItemScroll.Parent = Frame
DropItemScroll.BackgroundColor3 = _G.SectionColor
DropItemScroll.BackgroundTransparency = 1.000
DropItemScroll.Position = UDim2.new(0, 3, 0, 60)
DropItemScroll.Size = UDim2.new(0, 280, 0, 0)
DropItemScroll.ScrollBarThickness = 0
DropItemScroll.CanvasSize = UDim2.new(0, 0, 0, 0)

DropItemLayout.Name = ""DropItemLayout""
DropItemLayout.Parent = DropItemScroll
DropItemLayout.SortOrder = Enum.SortOrder.LayoutOrder
DropItemLayout.Padding = UDim.new(0, 0)

DropItemStroke.Name = ""DropItemStroke""
DropItemStroke.Parent = DropItemScroll
DropItemStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
DropItemStroke.Color = Color3.fromRGB(51,255,255)
DropItemStroke.LineJoinMode = Enum.LineJoinMode.Round
DropItemStroke.Thickness = 0
DropItemStroke.Transparency = 0
DropItemStroke.Enabled = true
DropItemStroke.Archivable = true

-- Dropdown Script--
local ItemCount = 0
local FrameSize = 0

ImageButton.MouseButton1Click:Connect(function()
 if DropToggled then
DropToggled = false
DropSizeFrame:TweenSize(UDim2.new(0, 278, 0, 60), 'InOut', 'Linear', 0.08)
Frame:TweenSize(UDim2.new(0, 278, 0, 60), 'InOut', 'Linear', 0.08)
DropItemScroll:TweenSize(UDim2.new(0, 278, 0, 0), 'InOut', 'Linear', 0.08)
game.TweenService:Create(ImageButton, TweenInfo.new(0.08, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut),
{Rotation = 180}
):Play()
game.TweenService:Create(ImageButton, TweenInfo.new(0.08, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut),
{ImageColor3 = Color3.fromRGB(51,255,255)}
):Play()

 else
DropToggled = true
DropSizeFrame:TweenSize(UDim2.new(0, 278, 0, 65 + FrameSize), 'InOut', 'Linear', 0.08)
Frame:TweenSize(UDim2.new(0, 278, 0, 65 + FrameSize), 'InOut', 'Linear', 0.08)
DropItemScroll:TweenSize(UDim2.new(0, 278, 0, FrameSize), 'InOut', 'Linear', 0.08)
game.TweenService:Create(ImageButton, TweenInfo.new(0.08, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut),
{Rotation = 0}
):Play()
game.TweenService:Create(ImageButton, TweenInfo.new(0.08, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut),
{ImageColor3 = Color3.fromRGB(51,255,255)}
):Play()
 end
end)

for i,v in next, list do
 ItemCount = ItemCount + 1
 if ItemCount == 1 then
FrameSize = 30
 elseif ItemCount == 2 then
FrameSize = 60
 elseif ItemCount == 3 then
FrameSize = 90
 elseif ItemCount >= 3 then
FrameSize = 120
 end
 
 local ItemList = Instance.new(""TextButton"")
 
 ItemList.Name = ""ItemList""
 ItemList.Parent = DropItemScroll
 ItemList.BackgroundColor3 = Color3.fromRGB(51,255,255)
 ItemList.BackgroundTransparency = 1.000
 ItemList.Size = UDim2.new(0, 278, 0, 30)
 ItemList.AutoButtonColor = false
 ItemList.Font = Enum.Font.Code
 ItemList.TextColor3 = Color3.fromRGB(51,255,255)
 ItemList.TextSize = 12.000
 ItemList.Text = v or ""None...""
 ItemList.TextXAlignment = Enum.TextXAlignment.Center

 ItemList.MouseEnter:Connect(function()
game.TweenService:Create(ItemList, TweenInfo.new(0.08, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut),
{BackgroundTransparency = 0.8}
):Play()
 end)
 ItemList.MouseLeave:Connect(function()
game.TweenService:Create(ItemList, TweenInfo.new(0.08, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut),
{BackgroundTransparency = 1}
):Play()
 end)
 
 ItemList.MouseButton1Click:Connect(function()
DropTextList.Text = v or ""None...""
pcall(callback, v)
DropToggled = false
DropSizeFrame:TweenSize(UDim2.new(0, 278, 0, 60), 'InOut', 'Linear', 0.08)
Frame:TweenSize(UDim2.new(0, 278, 0, 60), 'InOut', 'Linear', 0.08)
DropItemScroll:TweenSize(UDim2.new(0, 278, 0), 'InOut', 'Linear', 0.08)
game.TweenService:Create(ImageButton, TweenInfo.new(0.08, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut),
{Rotation = 180}
):Play()
game.TweenService:Create(ImageButton, TweenInfo.new(0.08, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut),
{ImageColor3 = Color3.fromRGB(51,255,255)}
):Play()
 end)
 DropItemScroll.CanvasSize = UDim2.new(0, 0, 0, DropItemLayout.AbsoluteContentSize.Y)
end

function dropfunc:Clear()
                    for _,v  in next, DropItemScroll:GetChildren() do
                        if v:IsA(""TextButton"") then
                            v:Destroy()
                            FrameSize = 0
                            ItemCount = 0
                        end
                    end
                    DropTextList.Text = ""Reset Succesfully...""
                    DropToggled = false
                    DropSizeFrame:TweenSize(UDim2.new(0, 278, 0, 60), 'InOut', 'Linear', 0.08)
                    Frame:TweenSize(UDim2.new(0, 278, 0, 60), 'InOut', 'Linear', 0.08)
                    DropItemScroll:TweenSize(UDim2.new(0, 278, 0), 'InOut', 'Linear', 0.08)
                    game.TweenService:Create(ImageButton, TweenInfo.new(0.08, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut),
                        {Rotation = 180}
                        ):Play()
                    game.TweenService:Create(ImageButton, TweenInfo.new(0.08, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut),
                        {ImageColor3 = Color3.fromRGB(255,255,255)}
                        ):Play()
                end

function dropfunc:Add(newadd)
 newadd = newadd or {}
 ItemCount = ItemCount + 1
 if ItemCount == 1 then
FrameSize = 30
 elseif ItemCount == 2 then
FrameSize = 60
 elseif ItemCount == 3 then
FrameSize = 90
 elseif ItemCount >= 3 then
FrameSize = 120
 end
 
 local ItemList = Instance.new(""TextButton"")
 ItemList.Name = ""ItemList""
 ItemList.Parent = DropItemScroll
 ItemList.BackgroundColor3 = Color3.fromRGB(51,255,255)
 ItemList.BackgroundTransparency = 1.000
 ItemList.Size = UDim2.new(0, 278, 0, 30)
 ItemList.AutoButtonColor = false
 ItemList.Font = Enum.Font.Code
 ItemList.TextColor3 = Color3.fromRGB(51,255,255)
 ItemList.TextSize = 12.000
 ItemList.Text = newadd or ""None...""
 ItemList.TextXAlignment = Enum.TextXAlignment.Center

 ItemList.MouseEnter:Connect(function()
game.TweenService:Create(ItemList, TweenInfo.new(0.08, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut),
{BackgroundTransparency = 0.8}
):Play()
 end)
 ItemList.MouseLeave:Connect(function()
game.TweenService:Create(ItemList, TweenInfo.new(0.08, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut),
{BackgroundTransparency = 1}
):Play()
 end)
 
 ItemList.MouseButton1Click:Connect(function()
DropTextList.Text = newadd or ""None...""
pcall(callback, newadd)
DropToggled = false
DropSizeFrame:TweenSize(UDim2.new(0, 278, 0, 60), 'InOut', 'Linear', 0.08)
Frame:TweenSize(UDim2.new(0, 278, 0, 60), 'InOut', 'Linear', 0.08)
DropItemScroll:TweenSize(UDim2.new(0, 278, 0), 'InOut', 'Linear', 0.08)
game.TweenService:Create(ImageButton, TweenInfo.new(0.08, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut),
{Rotation = 180}
):Play()
game.TweenService:Create(ImageButton, TweenInfo.new(0.08, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut),
{ImageColor3 = Color3.fromRGB(51,255,255)}
):Play()
 end)
 DropItemScroll.CanvasSize = UDim2.new(0, 0, 0, DropItemLayout.AbsoluteContentSize.Y)
end
return dropfunc
end

	function main:AddDropdownRight(droptitle, list, callback1)
-- Local --
local dropfunc1 = {}
local list = list or {}
local DropToggled1 = false
local DropSizeFrame1 = Instance.new(""Frame"")
local Frame1 = Instance.new(""Frame"")
local UIStroke1 = Instance.new(""UIStroke"")
local DropCover1 = Instance.new(""Frame"")
local UICorner1 = Instance.new(""UICorner"")
local UICorner21 = Instance.new(""UICorner"")
local ImageLabel1 = Instance.new(""ImageLabel"")
local Space1 = Instance.new(""TextLabel"")
local Title1 = Instance.new(""TextLabel"")
local ImageButton1 = Instance.new(""ImageButton"")
local DropStrokeList1 = Instance.new(""UIStroke"")
local DropTextList1 = Instance.new(""TextLabel"")

-- Prop --
DropSizeFrame1.Name = droptitle or ""DropSizeFrame""
DropSizeFrame1.Parent = MainFramePage2
DropSizeFrame1.BackgroundColor3 = _G.SectionColor
DropSizeFrame1.BackgroundTransparency = 1.000
DropSizeFrame1.Size = UDim2.new(0, 280, 0, 60)

Frame1.Name = ""Frame""
Frame1.Parent = DropSizeFrame1
Frame1.BackgroundColor3 = Color3.fromRGB(30,30,30)
Frame1.BorderSizePixel = 0
Frame1.Position = UDim2.new(0, 3, 0, 0)
Frame1.Size = UDim2.new(0, 278, 0, 60)

UIStroke1.Name = ""UIStroke""
UIStroke1.Parent = Frame1
UIStroke1.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
UIStroke1.Color = Color3.fromRGB(255,255,255)
UIStroke1.LineJoinMode = Enum.LineJoinMode.Round
UIStroke1.Thickness = 0.7
UIStroke1.Transparency = 0
UIStroke1.Enabled = true
UIStroke1.Archivable = true

UICorner1.Parent = Frame1
UICorner1.CornerRadius = UDim.new(0, 3)

DropCover1.Name = ""DropCover""
DropCover1.Parent = Frame1
DropCover1.BackgroundColor3 = _G.BackgroundItemColor
DropCover1.BackgroundTransparency = 1.000
DropCover1.BorderSizePixel = 0
DropCover1.Position = UDim2.new(0, 0, 0, 0)
DropCover1.Size = UDim2.new(0, 204, 0, 30)

ImageLabel1.Name = ""ImageLabel""
ImageLabel1.Parent = DropCover1
ImageLabel1.BackgroundColor3 = _G.SectionColor
ImageLabel1.BackgroundTransparency = 1.000
ImageLabel1.BorderSizePixel = 0
ImageLabel1.Position = UDim2.new(0, 5, 0, 6)
ImageLabel1.Size = UDim2.new(0, 18, 0, 18)
ImageLabel1.Image = ""rbxassetid://8825010231""
ImageLabel1.ImageColor3 = Color3.fromRGB(255,255,255)

Space1.Name = ""Space""
Space1.Parent = DropCover1
Space1.BackgroundColor3 = _G.SectionColor
Space1.BackgroundTransparency = 1.000
Space1.Position = UDim2.new(0, 30, 0, 0)
Space1.Size = UDim2.new(0, 15, 0, 30)
Space1.Font = Enum.Font.Code
Space1.Text = ""|""
Space1.TextSize = 13.000
Space1.TextColor3 = Color3.fromRGB(255,255,255)
Space1.TextXAlignment = Enum.TextXAlignment.Center

Title1.Name = ""Title""
Title1.Parent = DropCover1
Title1.BackgroundColor3 = _G.SectionColor
Title1.BackgroundTransparency = 1.000
Title1.Position = UDim2.new(0, 50, 0, 0)
Title1.Size = UDim2.new(0, 278, 0, 30)
Title1.Font = Enum.Font.Code
Title1.Text = droptitle or ""drop Title""
Title1.TextColor3 = Color3.fromRGB(255,255,255)
Title1.TextSize = 12.000
Title1.TextXAlignment = Enum.TextXAlignment.Left

ImageButton1.Name = ""ImageButton""
ImageButton1.Parent = DropCover1
ImageButton1.BackgroundColor3 = _G.WindowBackgroundColor
ImageButton1.BackgroundTransparency = 1.000
ImageButton1.Position = UDim2.new(0, 250, 0, 7)
ImageButton1.Size = UDim2.new(0, 23, 0, 18)
ImageButton1.Image = ""rbxassetid://6583628103""
ImageButton1.ImageColor3 = Color3.fromRGB(51,255,255)
ImageButton1.Rotation = 180

DropTextList1.Name = ""DropTextList""
DropTextList1.Parent = Frame1
DropTextList1.BackgroundColor3 = _G.BackgroundItemColor
DropTextList1.BackgroundTransparency = 1.000
DropTextList1.Position = UDim2.new(0, 3, 0, 30)
DropTextList1.Size = UDim2.new(0, 278, 0, 25)
DropTextList1.Font = Enum.Font.Code
DropTextList1.Text = v or ""Select First""
DropTextList1.TextColor3 = Color3.fromRGB(255,255,255)
DropTextList1.TextSize = 12.000
DropTextList1.TextXAlignment = Enum.TextXAlignment.Center

UICorner21.Parent = DropTextList1
UICorner21.CornerRadius = UDim.new(0,0)

DropStrokeList1.Name = ""DropStrokeList""
DropStrokeList1.Parent = DropTextList1
DropStrokeList1.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
DropStrokeList1.Color = Color3.fromRGB(255,255,255)
DropStrokeList1.LineJoinMode = Enum.LineJoinMode.Round
DropStrokeList1.Thickness = 0.2
DropStrokeList1.Transparency = 0
DropStrokeList1.Enabled = true
DropStrokeList1.Archivable = true

-- Adden Local --
local DropItemScroll1 = Instance.new(""ScrollingFrame"")
local DropItemLayout1 = Instance.new(""UIListLayout"")
local DropItemStroke1 = Instance.new(""UIStroke"")

-- Adden Prop --
DropItemScroll1.Name = ""DropItemScroll""
DropItemScroll1.Parent = Frame1
DropItemScroll1.BackgroundColor3 = _G.SectionColor
DropItemScroll1.BackgroundTransparency = 1.000
DropItemScroll1.Position = UDim2.new(0, 3, 0, 60)
DropItemScroll1.Size = UDim2.new(0, 278, 0, 0)
DropItemScroll1.ScrollBarThickness = 0
DropItemScroll1.CanvasSize = UDim2.new(0, 0, 0, 0)

DropItemLayout1.Name = ""DropItemLayout""
DropItemLayout1.Parent = DropItemScroll1
DropItemLayout1.SortOrder = Enum.SortOrder.LayoutOrder
DropItemLayout1.Padding = UDim.new(0, 0)

DropItemStroke1.Name = ""DropItemStroke""
DropItemStroke1.Parent = DropItemScroll1
DropItemStroke1.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
DropItemStroke1.Color = Color3.fromRGB(51,255,255)
DropItemStroke1.LineJoinMode = Enum.LineJoinMode.Round
DropItemStroke1.Thickness = 0
DropItemStroke1.Transparency = 0
DropItemStroke1.Enabled = true
DropItemStroke1.Archivable = true

-- Dropdown Script--
local ItemCount1 = 0
local FrameSize1 = 0

ImageButton1.MouseButton1Click:Connect(function()
 if DropToggled1 then
DropToggled1 = false
DropSizeFrame1:TweenSize(UDim2.new(0, 278, 0, 60), 'InOut', 'Linear', 0.08)
Frame1:TweenSize(UDim2.new(0, 278, 0, 60), 'InOut', 'Linear', 0.08)
DropItemScroll1:TweenSize(UDim2.new(0, 278, 0, 0), 'InOut', 'Linear', 0.08)
game.TweenService:Create(ImageButton1, TweenInfo.new(0.08, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut),
{Rotation = 180}
):Play()
game.TweenService:Create(ImageButton1, TweenInfo.new(0.08, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut),
{ImageColor3 = Color3.fromRGB(51,255,255)}
):Play()

 else
DropToggled1 = true
DropSizeFrame1:TweenSize(UDim2.new(0, 278, 0, 65 + FrameSize1), 'InOut', 'Linear', 0.08)
Frame1:TweenSize(UDim2.new(0, 278, 0, 65 + FrameSize1), 'InOut', 'Linear', 0.08)
DropItemScroll1:TweenSize(UDim2.new(0, 278, 0, FrameSize1), 'InOut', 'Linear', 0.08)
game.TweenService:Create(ImageButton1, TweenInfo.new(0.08, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut),
{Rotation = 0}
):Play()
game.TweenService:Create(ImageButton1, TweenInfo.new(0.08, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut),
{ImageColor3 = Color3.fromRGB(51,255,255)}
):Play()
 end
end)

for i,v in next, list do
 ItemCount1 = ItemCount1 + 1
 if ItemCount1 == 1 then
FrameSize1 = 30
 elseif ItemCount1 == 2 then
FrameSize1 = 60
 elseif ItemCount1 == 3 then
FrameSize1 = 90
 elseif ItemCount1 >= 3 then
FrameSize1 = 120
 end
 
 local ItemList1 = Instance.new(""TextButton"")
 
 ItemList1.Name = ""ItemList""
 ItemList1.Parent = DropItemScroll1
 ItemList1.BackgroundColor3 = Color3.fromRGB(51,255,255)
 ItemList1.BackgroundTransparency = 1.000
 ItemList1.Size = UDim2.new(0, 278, 0, 30)
 ItemList1.AutoButtonColor = false
 ItemList1.Font = Enum.Font.Code
 ItemList1.TextColor3 = Color3.fromRGB(51,255,255)
 ItemList1.TextSize = 12.000
 ItemList1.Text = v or ""None...""
 ItemList1.TextXAlignment = Enum.TextXAlignment.Center

 ItemList1.MouseEnter:Connect(function()
game.TweenService:Create(ItemList1, TweenInfo.new(0.08, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut),
{BackgroundTransparency = 0.8}
):Play()
 end)
 ItemList1.MouseLeave:Connect(function()
game.TweenService:Create(ItemList1, TweenInfo.new(0.08, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut),
{BackgroundTransparency = 1}
):Play()
 end)
 
 ItemList1.MouseButton1Click:Connect(function()
DropTextList1.Text = v or ""None...""
pcall(callback1, v)
DropToggled1 = false
DropSizeFrame1:TweenSize(UDim2.new(0, 278, 0, 60), 'InOut', 'Linear', 0.08)
Frame1:TweenSize(UDim2.new(0, 278, 0, 60), 'InOut', 'Linear', 0.08)
DropItemScroll1:TweenSize(UDim2.new(0, 278, 0), 'InOut', 'Linear', 0.08)
game.TweenService:Create(ImageButton1, TweenInfo.new(0.08, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut),
{Rotation = 180}
):Play()
game.TweenService:Create(ImageButton1, TweenInfo.new(0.08, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut),
{ImageColor3 = Color3.fromRGB(51,255,255)}
):Play()
 end)
 DropItemScroll1.CanvasSize = UDim2.new(0, 0, 0, DropItemLayout1.AbsoluteContentSize.Y)
end

               function dropfunc1:Clear()
                    for _,v  in next, DropItemScroll1:GetChildren() do
                        if v:IsA(""TextButton"") then
                            v:Destroy()
                        end
                    end
                    DropTextList1.Text = ""Reset Succesfully""
                    DropToggled1 = false
                    DropSizeFrame1:TweenSize(UDim2.new(0, 278, 0, 60), 'InOut', 'Linear', 0.08)
                    Frame1:TweenSize(UDim2.new(0, 278, 0, 60), 'InOut', 'Linear', 0.08)
                    DropItemScroll1:TweenSize(UDim2.new(0, 278, 0), 'InOut', 'Linear', 0.08)
                    game.TweenService:Create(ImageButton1, TweenInfo.new(0.08, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut),
                        {Rotation = 180}
                        ):Play()
                    game.TweenService:Create(ImageButton1, TweenInfo.new(0.08, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut),
                        {ImageColor3 = Color3.fromRGB(255,255,255)}
                        ):Play()
                end

function dropfunc1:Add(newadd)
 newadd = newadd or {}
 ItemCount1 = ItemCount1 + 1
 if ItemCount1 == 1 then
FrameSize1= 30
 elseif ItemCount1 == 2 then
FrameSize1 = 60
 elseif ItemCount1 == 3 then
FrameSize1 = 90
 elseif ItemCount1 >= 3 then
FrameSize1 = 120
 end
 
 local ItemList1 = Instance.new(""TextButton"")
 ItemList1.Name = ""ItemList""
 ItemList1.Parent = DropItemScroll1
 ItemList1.BackgroundColor3 = Color3.fromRGB(255,255,255)
 ItemList1.BackgroundTransparency = 1.000
 ItemList1.Size = UDim2.new(0, 278, 0, 30)
 ItemList1.AutoButtonColor = false
 ItemList1.Font = Enum.Font.Code
 ItemList1.TextColor3 = Color3.fromRGB(51,255,255)
 ItemList1.TextSize = 12.000
 ItemList1.Text = newadd or ""None...""
 ItemList1.TextXAlignment = Enum.TextXAlignment.Center

 ItemList1.MouseEnter:Connect(function()
game.TweenService:Create(ItemList1, TweenInfo.new(0.08, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut),
{BackgroundTransparency = 0.8}
):Play()
 end)
 ItemList1.MouseLeave:Connect(function()
game.TweenService:Create(ItemList1, TweenInfo.new(0.08, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut),
{BackgroundTransparency = 1}
):Play()
 end)
 
 ItemList1.MouseButton1Click:Connect(function()
DropTextList1.Text = newadd or ""None...""
pcall(callback1, newadd)
DropToggled1 = false
DropSizeFrame1:TweenSize(UDim2.new(0, 278, 0, 60), 'InOut', 'Linear', 0.08)
Frame1:TweenSize(UDim2.new(0, 278, 0, 60), 'InOut', 'Linear', 0.08)
DropItemScroll1:TweenSize(UDim2.new(0, 278, 0), 'InOut', 'Linear', 0.08)
game.TweenService:Create(ImageButton1, TweenInfo.new(0.08, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut),
{Rotation = 180}
):Play()
game.TweenService:Create(ImageButton1, TweenInfo.new(0.08, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut),
{ImageColor3 = Color3.fromRGB(51,255,255)}
):Play()
 end)
 DropItemScroll1.CanvasSize = UDim2.new(0, 0, 0, DropItemLayout1.AbsoluteContentSize.Y)
end
return dropfunc1
end


function main:AddSliderLeft(text,min,max,set,callback)
				local Slider = Instance.new(""Frame"")
				local slidercorner = Instance.new(""UICorner"")
				local sliderr = Instance.new(""Frame"")
				local sliderrcorner = Instance.new(""UICorner"")
				local SliderLabel = Instance.new(""TextLabel"")
				local HAHA = Instance.new(""Frame"")
				local AHEHE = Instance.new(""TextButton"")
				local bar = Instance.new(""Frame"")
				local bar1 = Instance.new(""Frame"")
				local bar1corner = Instance.new(""UICorner"")
				local barcorner = Instance.new(""UICorner"")
				local circlebar = Instance.new(""Frame"")
				local UICorner = Instance.new(""UICorner"")
				local slidervalue = Instance.new(""Frame"")
				local valuecorner = Instance.new(""UICorner"")
				local TextBox = Instance.new(""TextBox"")
				local UICorner_2 = Instance.new(""UICorner"")
	
				Slider.Name = ""Slider""
				Slider.Parent = MainFramePage
				Slider.BackgroundColor3 = _G.Color
				Slider.BackgroundTransparency = 0
				Slider.Size = UDim2.new(0, 280, 0, 51)
	
				slidercorner.CornerRadius = UDim.new(0, 5)
				slidercorner.Name = ""slidercorner""
				slidercorner.Parent = Slider
	
				sliderr.Name = ""sliderr""
				sliderr.Parent = Slider
				sliderr.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
				sliderr.Position = UDim2.new(0, 1, 0, 1)
				sliderr.Size = UDim2.new(0, 278, 0, 49)
	
				sliderrcorner.CornerRadius = UDim.new(0, 5)
				sliderrcorner.Name = ""sliderrcorner""
				sliderrcorner.Parent = sliderr
	
				SliderLabel.Name = ""SliderLabel""
				SliderLabel.Parent = sliderr
				SliderLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				SliderLabel.BackgroundTransparency = 1.000
				SliderLabel.Position = UDim2.new(0, 15, 0, 0)
				SliderLabel.Size = UDim2.new(0, 100, 0, 26)
				SliderLabel.Font = Enum.Font.Code
				SliderLabel.Text = text
				SliderLabel.TextColor3 = Color3.fromRGB(225, 225, 225)
				SliderLabel.TextSize = 16.000
				SliderLabel.TextTransparency = 0
				SliderLabel.TextXAlignment = Enum.TextXAlignment.Left
	
				HAHA.Name = ""HAHA""
				HAHA.Parent = sliderr
				HAHA.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				HAHA.BackgroundTransparency = 1.000
				HAHA.Size = UDim2.new(0, 468, 0, 29)
	
				AHEHE.Name = ""AHEHE""
				AHEHE.Parent = sliderr
				AHEHE.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				AHEHE.BackgroundTransparency = 1.000
				AHEHE.Position = UDim2.new(0, 10, 0, 35)
				AHEHE.Size = UDim2.new(0, 260, 0, 5)
				AHEHE.Font = Enum.Font.Code
				AHEHE.Text = """"
				AHEHE.TextColor3 = Color3.fromRGB(0, 0, 0)
				AHEHE.TextSize = 14.000
	
				bar.Name = ""bar""
				bar.Parent = AHEHE
				bar.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
				bar.Size = UDim2.new(0, 260, 0, 5)
	
				bar1.Name = ""bar1""
				bar1.Parent = bar
				bar1.BackgroundColor3 = _G.Color
				bar1.BackgroundTransparency = 0
				bar1.Size = UDim2.new(set/max, 0, 0, 5)
	
				bar1corner.CornerRadius = UDim.new(0, 5)
				bar1corner.Name = ""bar1corner""
				bar1corner.Parent = bar1
	
				barcorner.CornerRadius = UDim.new(0, 5)
				barcorner.Name = ""barcorner""
				barcorner.Parent = bar
	
				circlebar.Name = ""circlebar""
				circlebar.Parent = bar1
				circlebar.BackgroundColor3 = Color3.fromRGB(225, 225, 225)
				circlebar.Position = UDim2.new(1, -2, 0, -3)
				circlebar.Size = UDim2.new(0, 10, 0, 10)
	
				UICorner.CornerRadius = UDim.new(0, 100)
				UICorner.Parent = circlebar
	
				slidervalue.Name = ""slidervalue""
				slidervalue.Parent = sliderr
				slidervalue.BackgroundColor3 = _G.Color
				slidervalue.BackgroundTransparency = 0
				slidervalue.Position = UDim2.new(0, 220, 0, 5)
				slidervalue.Size = UDim2.new(0, 50, 0, 15)
	
				valuecorner.CornerRadius = UDim.new(0, 5)
				valuecorner.Name = ""valuecorner""
				valuecorner.Parent = slidervalue
	
				TextBox.Parent = slidervalue
				TextBox.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
				TextBox.Position = UDim2.new(0, 1, 0, 1)
				TextBox.Size = UDim2.new(0, 48, 0, 13)
				TextBox.Font = Enum.Font.Code
				TextBox.TextColor3 = Color3.fromRGB(225, 225, 225)
				TextBox.TextSize = 9.000
				TextBox.Text = set
				TextBox.TextTransparency = 0
	
				UICorner_2.CornerRadius = UDim.new(0, 5)
				UICorner_2.Parent = TextBox
	
				local mouse = game.Players.LocalPlayer:GetMouse()
				local uis = game:GetService(""UserInputService"")
	
				if Value == nil then
					Value = set
					pcall(function()
						callback(Value)
					end)
				end
				
				AHEHE.MouseButton1Down:Connect(function()
					Value = math.floor((((tonumber(max) - tonumber(min)) / 260) * bar1.AbsoluteSize.X) + tonumber(min)) or 0
					pcall(function()
						callback(Value)
					end)
					TweenService:Create(
						bar1,
						TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
						{Size = UDim2.new(0, math.clamp(mouse.X - bar1.AbsolutePosition.X, 0, 260), 0, 5)} -- UDim2.new(0, 128, 0, 25)
					):Play()
					--bar1.Size = UDim2.new(0, math.clamp(mouse.X - bar1.AbsolutePosition.X, 0, 448), 0, 5)
					TweenService:Create(
						circlebar,
						TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
						{Position =  UDim2.new(0, math.clamp(mouse.X - bar1.AbsolutePosition.X - 2, 0, 260), 0, -3)} -- UDim2.new(0, 128, 0, 25)
					):Play()
					--circlebar.Position = UDim2.new(0, math.clamp(mouse.X - bar1.AbsolutePosition.X - 2, 0, 438), 0, -3)
					moveconnection = mouse.Move:Connect(function()
						TextBox.Text = Value
						Value = math.floor((((tonumber(max) - tonumber(min)) / 260) * bar1.AbsoluteSize.X) + tonumber(min))
						pcall(function()
							callback(Value)
						end)
						TweenService:Create(
							bar1,
							TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
							{Size = UDim2.new(0, math.clamp(mouse.X - bar1.AbsolutePosition.X, 0, 260), 0, 5)} -- UDim2.new(0, 128, 0, 25)
						):Play()
						--bar1.Size = UDim2.new(0, math.clamp(mouse.X - bar1.AbsolutePosition.X, 0, 448), 0, 5)
						TweenService:Create(
							circlebar,
							TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
							{Position =  UDim2.new(0, math.clamp(mouse.X - bar1.AbsolutePosition.X - 2, 0, 260), 0, -3)} -- UDim2.new(0, 128, 0, 25)
						):Play()
						--circlebar.Position = UDim2.new(0, math.clamp(mouse.X - bar1.AbsolutePosition.X - 2, 0, 438), 0, -3)
					end)
					releaseconnection = uis.InputEnded:Connect(function(Mouse)
						if Mouse.UserInputType == Enum.UserInputType.MouseButton1 then
							Value = math.floor((((tonumber(max) - tonumber(min)) / 260) * bar1.AbsoluteSize.X) + tonumber(min))
							pcall(function()
								callback(Value)
							end)
							TweenService:Create(
								bar1,
								TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
								{Size = UDim2.new(0, math.clamp(mouse.X - bar1.AbsolutePosition.X, 0, 260), 0, 5)} -- UDim2.new(0, 128, 0, 25)
							):Play()
							--bar1.Size = UDim2.new(0, math.clamp(mouse.X - bar1.AbsolutePosition.X, 0, 448), 0, 5)
							TweenService:Create(
								circlebar,
								TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
								{Position =  UDim2.new(0, math.clamp(mouse.X - bar1.AbsolutePosition.X - 2, 0, 260), 0, -3)} -- UDim2.new(0, 128, 0, 25)
							):Play()
							--circlebar.Position = UDim2.new(0, math.clamp(mouse.X - bar1.AbsolutePosition.X - 2, 0, 438), 0, -3)
							moveconnection:Disconnect()
							releaseconnection:Disconnect()
						end
					end)
				end)
				releaseconnection = uis.InputEnded:Connect(function(Mouse)
					if Mouse.UserInputType == Enum.UserInputType.MouseButton1 then
						Value = math.floor((((tonumber(max) - tonumber(min)) / 260) * bar1.AbsoluteSize.X) + tonumber(min))
						TextBox.Text = Value
					end
				end)
	
				TextBox.FocusLost:Connect(function()
					if tonumber(TextBox.Text) > max then
						TextBox.Text  = max
					end
					bar1.Size = UDim2.new((TextBox.Text or 0) / max, 0, 0, 5)
					circlebar.Position = UDim2.new(1, -2, 0, -3)
					TextBox.Text = tostring(TextBox.Text and math.floor( (TextBox.Text / max) * (max - min) + min) )
					pcall(callback, TextBox.Text)
				end)
			end

function main:AddSliderRight(text,min,max,set,callback)
				local Slider = Instance.new(""Frame"")
				local slidercorner = Instance.new(""UICorner"")
				local sliderr = Instance.new(""Frame"")
				local sliderrcorner = Instance.new(""UICorner"")
				local SliderLabel = Instance.new(""TextLabel"")
				local HAHA = Instance.new(""Frame"")
				local AHEHE = Instance.new(""TextButton"")
				local bar = Instance.new(""Frame"")
				local bar1 = Instance.new(""Frame"")
				local bar1corner = Instance.new(""UICorner"")
				local barcorner = Instance.new(""UICorner"")
				local circlebar = Instance.new(""Frame"")
				local UICorner = Instance.new(""UICorner"")
				local slidervalue = Instance.new(""Frame"")
				local valuecorner = Instance.new(""UICorner"")
				local TextBox = Instance.new(""TextBox"")
				local UICorner_2 = Instance.new(""UICorner"")
	
				Slider.Name = ""Slider""
				Slider.Parent = MainFramePage2
				Slider.BackgroundColor3 = _G.Color
				Slider.BackgroundTransparency = 0
				Slider.Size = UDim2.new(0, 280, 0, 51)
	
				slidercorner.CornerRadius = UDim.new(0, 5)
				slidercorner.Name = ""slidercorner""
				slidercorner.Parent = Slider
	
				sliderr.Name = ""sliderr""
				sliderr.Parent = Slider
				sliderr.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
				sliderr.Position = UDim2.new(0, 1, 0, 1)
				sliderr.Size = UDim2.new(0, 278, 0, 49)
	
				sliderrcorner.CornerRadius = UDim.new(0, 5)
				sliderrcorner.Name = ""sliderrcorner""
				sliderrcorner.Parent = sliderr
	
				SliderLabel.Name = ""SliderLabel""
				SliderLabel.Parent = sliderr
				SliderLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				SliderLabel.BackgroundTransparency = 1.000
				SliderLabel.Position = UDim2.new(0, 15, 0, 0)
				SliderLabel.Size = UDim2.new(0, 100, 0, 26)
				SliderLabel.Font = Enum.Font.Code
				SliderLabel.Text = text
				SliderLabel.TextColor3 = Color3.fromRGB(225, 225, 225)
				SliderLabel.TextSize = 16.000
				SliderLabel.TextTransparency = 0
				SliderLabel.TextXAlignment = Enum.TextXAlignment.Left
	
				HAHA.Name = ""HAHA""
				HAHA.Parent = sliderr
				HAHA.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				HAHA.BackgroundTransparency = 1.000
				HAHA.Size = UDim2.new(0, 468, 0, 29)
	
				AHEHE.Name = ""AHEHE""
				AHEHE.Parent = sliderr
				AHEHE.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				AHEHE.BackgroundTransparency = 1.000
				AHEHE.Position = UDim2.new(0, 10, 0, 35)
				AHEHE.Size = UDim2.new(0, 260, 0, 5)
				AHEHE.Font = Enum.Font.Code
				AHEHE.Text = """"
				AHEHE.TextColor3 = Color3.fromRGB(0, 0, 0)
				AHEHE.TextSize = 14.000
	
				bar.Name = ""bar""
				bar.Parent = AHEHE
				bar.BackgroundColor3 = Color3.fromRGB(45,45,45)
				bar.Size = UDim2.new(0, 260, 0, 5)
	
				bar1.Name = ""bar1""
				bar1.Parent = bar
				bar1.BackgroundColor3 = _G.Color
				bar1.BackgroundTransparency = 0
				bar1.Size = UDim2.new(set/max, 0, 0, 5)
	
				bar1corner.CornerRadius = UDim.new(0, 5)
				bar1corner.Name = ""bar1corner""
				bar1corner.Parent = bar1
	
				barcorner.CornerRadius = UDim.new(0, 5)
				barcorner.Name = ""barcorner""
				barcorner.Parent = bar
	
				circlebar.Name = ""circlebar""
				circlebar.Parent = bar1
				circlebar.BackgroundColor3 = Color3.fromRGB(225, 225, 225)
				circlebar.Position = UDim2.new(1, -2, 0, -3)
				circlebar.Size = UDim2.new(0, 10, 0, 10)
	
				UICorner.CornerRadius = UDim.new(0, 100)
				UICorner.Parent = circlebar
	
				slidervalue.Name = ""slidervalue""
				slidervalue.Parent = sliderr
				slidervalue.BackgroundColor3 = _G.Color
				slidervalue.BackgroundTransparency = 0
				slidervalue.Position = UDim2.new(0, 220, 0, 5)
				slidervalue.Size = UDim2.new(0, 50, 0, 15)
	
				valuecorner.CornerRadius = UDim.new(0, 5)
				valuecorner.Name = ""valuecorner""
				valuecorner.Parent = slidervalue
	
				TextBox.Parent = slidervalue
				TextBox.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
				TextBox.Position = UDim2.new(0, 1, 0, 1)
				TextBox.Size = UDim2.new(0, 48, 0, 13)
				TextBox.Font = Enum.Font.Code
				TextBox.TextColor3 = Color3.fromRGB(225, 225, 225)
				TextBox.TextSize = 9.000
				TextBox.Text = set
				TextBox.TextTransparency = 0
	
				UICorner_2.CornerRadius = UDim.new(0, 5)
				UICorner_2.Parent = TextBox
	
				local mouse = game.Players.LocalPlayer:GetMouse()
				local uis = game:GetService(""UserInputService"")
	
				if Value == nil then
					Value = set
					pcall(function()
						callback(Value)
					end)
				end
				
				AHEHE.MouseButton1Down:Connect(function()
					Value = math.floor((((tonumber(max) - tonumber(min)) / 260) * bar1.AbsoluteSize.X) + tonumber(min)) or 0
					pcall(function()
						callback(Value)
					end)
					TweenService:Create(
						bar1,
						TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
						{Size = UDim2.new(0, math.clamp(mouse.X - bar1.AbsolutePosition.X, 0, 260), 0, 5)} -- UDim2.new(0, 128, 0, 25)
					):Play()
					--bar1.Size = UDim2.new(0, math.clamp(mouse.X - bar1.AbsolutePosition.X, 0, 448), 0, 5)
					TweenService:Create(
						circlebar,
						TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
						{Position =  UDim2.new(0, math.clamp(mouse.X - bar1.AbsolutePosition.X - 2, 0, 260), 0, -3)} -- UDim2.new(0, 128, 0, 25)
					):Play()
					--circlebar.Position = UDim2.new(0, math.clamp(mouse.X - bar1.AbsolutePosition.X - 2, 0, 438), 0, -3)
					moveconnection = mouse.Move:Connect(function()
						TextBox.Text = Value
						Value = math.floor((((tonumber(max) - tonumber(min)) / 260) * bar1.AbsoluteSize.X) + tonumber(min))
						pcall(function()
							callback(Value)
						end)
						TweenService:Create(
							bar1,
							TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
							{Size = UDim2.new(0, math.clamp(mouse.X - bar1.AbsolutePosition.X, 0, 260), 0, 5)} -- UDim2.new(0, 128, 0, 25)
						):Play()
						--bar1.Size = UDim2.new(0, math.clamp(mouse.X - bar1.AbsolutePosition.X, 0, 448), 0, 5)
						TweenService:Create(
							circlebar,
							TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
							{Position =  UDim2.new(0, math.clamp(mouse.X - bar1.AbsolutePosition.X - 2, 0, 260), 0, -3)} -- UDim2.new(0, 128, 0, 25)
						):Play()
						--circlebar.Position = UDim2.new(0, math.clamp(mouse.X - bar1.AbsolutePosition.X - 2, 0, 438), 0, -3)
					end)
					releaseconnection = uis.InputEnded:Connect(function(Mouse)
						if Mouse.UserInputType == Enum.UserInputType.MouseButton1 then
							Value = math.floor((((tonumber(max) - tonumber(min)) / 260) * bar1.AbsoluteSize.X) + tonumber(min))
							pcall(function()
								callback(Value)
							end)
							TweenService:Create(
								bar1,
								TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
								{Size = UDim2.new(0, math.clamp(mouse.X - bar1.AbsolutePosition.X, 0, 260), 0, 5)} -- UDim2.new(0, 128, 0, 25)
							):Play()
							--bar1.Size = UDim2.new(0, math.clamp(mouse.X - bar1.AbsolutePosition.X, 0, 448), 0, 5)
							TweenService:Create(
								circlebar,
								TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
								{Position =  UDim2.new(0, math.clamp(mouse.X - bar1.AbsolutePosition.X - 2, 0, 260), 0, -3)} -- UDim2.new(0, 128, 0, 25)
							):Play()
							--circlebar.Position = UDim2.new(0, math.clamp(mouse.X - bar1.AbsolutePosition.X - 2, 0, 438), 0, -3)
							moveconnection:Disconnect()
							releaseconnection:Disconnect()
						end
					end)
				end)
				releaseconnection = uis.InputEnded:Connect(function(Mouse)
					if Mouse.UserInputType == Enum.UserInputType.MouseButton1 then
						Value = math.floor((((tonumber(max) - tonumber(min)) / 260) * bar1.AbsoluteSize.X) + tonumber(min))
						TextBox.Text = Value
					end
				end)
	
				TextBox.FocusLost:Connect(function()
					if tonumber(TextBox.Text) > max then
						TextBox.Text  = max
					end
					bar1.Size = UDim2.new((TextBox.Text or 0) / max, 0, 0, 5)
					circlebar.Position = UDim2.new(1, -2, 0, -3)
					TextBox.Text = tostring(TextBox.Text and math.floor( (TextBox.Text / max) * (max - min) + min) )
					pcall(callback, TextBox.Text)
				end)
			end



		function main:AddTextboxLeft(text,texts,disappear,callback)
			local Textbox = Instance.new(""Frame"")
			local TextboxCorner = Instance.new(""UICorner"")
			local Textboxx = Instance.new(""Frame"")
			local TextboxxCorner = Instance.new(""UICorner"")
			local TextboxLabel = Instance.new(""TextLabel"")
			local txtbtn = Instance.new(""TextButton"")
			local RealTextbox = Instance.new(""TextBox"")
			local UICorner = Instance.new(""UICorner"")

         
			Textbox.Name = ""Textbox""
			Textbox.Parent = MainFramePage
			Textbox.BackgroundColor3 = _G.Color
			Textbox.BackgroundTransparency = 0
			Textbox.Size = UDim2.new(0, 280, 0, 57)

			TextboxCorner.CornerRadius = UDim.new(0, 5)
			TextboxCorner.Name = ""TextboxCorner""
			TextboxCorner.Parent = Textbox

			Textboxx.Name = ""Textboxx""
			Textboxx.Parent = Textbox
			Textboxx.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
			Textboxx.Position = UDim2.new(0, 1, 0, 1)
			Textboxx.Size = UDim2.new(0, 278, 0, 55)

			TextboxxCorner.CornerRadius = UDim.new(0, 5)
			TextboxxCorner.Name = ""TextboxxCorner""
			TextboxxCorner.Parent = Textboxx

		
			txtbtn.Name = ""txtbtn""
			txtbtn.Parent = Textbox
			txtbtn.BackgroundColor3 = Color3.fromRGB(51,255,255)
			txtbtn.BackgroundTransparency = 1.000
			txtbtn.Position = UDim2.new(0, 1, 0, 1)
			txtbtn.Size = UDim2.new(0, 278, 0, 45)
			txtbtn.Font = Enum.Font.SourceSans
			txtbtn.Text = """"
			txtbtn.TextColor3 = Color3.fromRGB(0, 0, 0)
			txtbtn.TextSize = 14.000

TextboxLabel.Name = ""TextboxLabel""
			TextboxLabel.Parent = Textbox
			TextboxLabel.BackgroundColor3 = Color3.fromRGB(51,255,255)
			TextboxLabel.BackgroundTransparency = 1.000
			TextboxLabel.Position = UDim2.new(0, 15, 0, 8)
			TextboxLabel.Text = text
			TextboxLabel.Size = UDim2.new(0, 220, 0, 12)
			TextboxLabel.Font = Enum.Font.Code
			TextboxLabel.TextColor3 = Color3.fromRGB(225, 225, 225)
			TextboxLabel.TextSize = 12.000
			TextboxLabel.TextTransparency = 0
			TextboxLabel.TextXAlignment = Enum.TextXAlignment.Left

			Textbox.Name = ""Textbox""
			Textbox.Parent = MainFramePage
			Textbox.BackgroundColor3 = _G.Color
			Textbox.BackgroundTransparency = 0
			Textbox.Size = UDim2.new(0, 280, 0, 57)

			RealTextbox.Name = ""RealTextbox""
			RealTextbox.Parent = Textbox
			RealTextbox.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
			RealTextbox.BackgroundTransparency = 0
			RealTextbox.Position = UDim2.new(0, 3, 0, 30)
			RealTextbox.Size = UDim2.new(0, 276, 0, 24)
			RealTextbox.Font = Enum.Font.Code
			RealTextbox.Text = texts
			RealTextbox.TextColor3 = Color3.fromRGB(255, 225, 225)
			RealTextbox.TextSize = 11.000
			RealTextbox.TextTransparency = 0

			RealTextbox.FocusLost:Connect(function()
				callback(RealTextbox.Text)
				if disappear then
					RealTextbox.Text = """"
				end
			end)

			UICorner.CornerRadius = UDim.new(0, 5)
			UICorner.Parent = RealTextbox
		end
		
		function main:AddTextboxRight(text,texts,disappear,callback)
			local Textboxx = Instance.new(""Frame"")
			local TextboxCornerr = Instance.new(""UICorner"")
			local Textboxxx = Instance.new(""Frame"")
			local TextboxxCornerr = Instance.new(""UICorner"")
			local TextboxLabell = Instance.new(""TextLabel"")
			local txtbtnn = Instance.new(""TextButton"")
			local RealTextboxx = Instance.new(""TextBox"")
			local UICornerr = Instance.new(""UICorner"")

			Textboxx.Name = ""Textbox""
			Textboxx.Parent = MainFramePage2
			Textboxx.BackgroundColor3 = _G.Color
			Textboxx.BackgroundTransparency = 0
			Textboxx.Size = UDim2.new(0, 280, 0, 57)

			TextboxCornerr.CornerRadius = UDim.new(0, 5)
			TextboxCornerr.Name = ""TextboxCorner""
			TextboxCornerr.Parent = Textboxx

			Textboxxx.Name = ""Textboxx""
			Textboxxx.Parent = Textboxx
			Textboxxx.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
			Textboxxx.Position = UDim2.new(0, 1, 0, 1)
			Textboxxx.Size = UDim2.new(0, 278, 0, 55)

			TextboxxCornerr.CornerRadius = UDim.new(0, 5)
			TextboxxCornerr.Name = ""TextboxxCorner""
			TextboxxCornerr.Parent = Textboxxx

		
			txtbtnn.Name = ""txtbtn""
			txtbtnn.Parent = Textboxx
			txtbtnn.BackgroundColor3 = Color3.fromRGB(51,255,255)
			txtbtnn.BackgroundTransparency = 1.000
			txtbtnn.Position = UDim2.new(0, 1, 0, 1)
			txtbtnn.Size = UDim2.new(0, 278, 0, 45)
			txtbtnn.Font = Enum.Font.SourceSans
			txtbtnn.Text = """"
			txtbtnn.TextColor3 = Color3.fromRGB(0, 0, 0)
			txtbtnn.TextSize = 14.000

TextboxLabell.Name = ""TextboxLabel""
			TextboxLabell.Parent = Textboxx
			TextboxLabell.BackgroundColor3 = Color3.fromRGB(51,255,255)
			TextboxLabell.BackgroundTransparency = 1.000
			TextboxLabell.Position = UDim2.new(0, 15, 0, 8)
			TextboxLabell.Text = text
			TextboxLabell.Size = UDim2.new(0, 278, 0, 12)
			TextboxLabell.Font = Enum.Font.Code
			TextboxLabell.TextColor3 = Color3.fromRGB(225, 225, 225)
			TextboxLabell.TextSize = 12.000
			TextboxLabell.TextTransparency = 0
			TextboxLabell.TextXAlignment = Enum.TextXAlignment.Left

			RealTextboxx.Name = ""RealTextbox""
			RealTextboxx.Parent = Textboxx
			RealTextboxx.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
			RealTextboxx.BackgroundTransparency = 0
			RealTextboxx.Position = UDim2.new(0, 3, 0, 30)
			RealTextboxx.Size = UDim2.new(0, 276, 0, 24)
			RealTextboxx.Font = Enum.Font.Code
			RealTextboxx.Text = texts
			RealTextboxx.TextColor3 = Color3.fromRGB(255, 225, 225)
			RealTextboxx.TextSize = 11.000
			RealTextboxx.TextTransparency = 0

			RealTextboxx.FocusLost:Connect(function()
				callback(RealTextboxx.Text)
				if disappear then
					RealTextboxx.Text = """"
				end
			end)

			UICornerr.CornerRadius = UDim.new(0, 5)
			UICornerr.Parent = RealTextboxx
		end
		
		function main:AddLabelLeft(text)
			local Label = Instance.new(""TextLabel"")
			local PaddingLabel = Instance.new(""UIPadding"")
			local labelfunc = {}
	
			Label.Name = ""Label""
			Label.Parent = MainFramePage
			Label.BackgroundColor3 = Color3.fromRGB(51,255,255)
			Label.BackgroundTransparency = 1.000
			Label.Size = UDim2.new(0, 360, 0, 20)
			Label.Font = Enum.Font.Code
			Label.TextColor3 = Color3.fromRGB(225, 225, 225)
			Label.TextSize = 14.000
			Label.Text = text
			Label.TextXAlignment = Enum.TextXAlignment.Left

			PaddingLabel.PaddingLeft = UDim.new(0,15)
			PaddingLabel.Parent = Label
			PaddingLabel.Name = ""PaddingLabel""
	
			function labelfunc:Set(newtext)
			Label.Text = newtext
		end
		return labelfunc
		end

		function main:AddLabelRight(text)
			local Labell = Instance.new(""TextLabel"")
			local PaddingLabell = Instance.new(""UIPadding"")
			local labelfunc = {}
	
			Labell.Name = ""Label""
			Labell.Parent = MainFramePage2
			Labell.BackgroundColor3 = Color3.fromRGB(51,255,255)
			Labell.BackgroundTransparency = 1.000
			Labell.Size = UDim2.new(0, 360, 0, 20)
			Labell.Font = Enum.Font.Code
			Labell.TextColor3 = Color3.fromRGB(225, 225, 225)
			Labell.TextSize = 14.000
			Labell.Text = text
			Labell.TextXAlignment = Enum.TextXAlignment.Left

			PaddingLabell.PaddingLeft = UDim.new(0,15)
			PaddingLabell.Parent = Labell
			PaddingLabell.Name = ""PaddingLabel""
	
			function labelfunc:Set(newtext)
			Labell.Text = newtext
		end
		return labelfunc
		end


function main:Label1(text)
			local Label1 = Instance.new(""TextLabel"")
			local PaddingLabel1 = Instance.new(""UIPadding"")
			local Label1func = {}
	
			Label1.Name = ""Label1""
			Label1.Parent = MainFramePage
			Label1.BackgroundColor3 = Color3.fromRGB(51,255,255)
			Label1.BackgroundTransparency = 1.000
			Label1.Size = UDim2.new(0, 360, 0, 20)
			Label1.Font = Enum.Font.Code
			Label1.TextColor3 = Color3.fromRGB(225, 225, 225)
			Label1.TextSize = 15.000
			Label1.Text = text
			Label1.TextXAlignment = Enum.TextXAlignment.Left

			PaddingLabel1.PaddingLeft = UDim.new(0,15)
			PaddingLabel1.Parent = Label1
			PaddingLabel1.Name = ""PaddingLabel1""
function Label1func:Refresh(tochange)
 Label1.Text = tochange
end

return Label1func
end

		function main:AddSeperatorLeft(text)
			local Seperator = Instance.new(""Frame"")
			local Sep1 = Instance.new(""Frame"")
			local Sep2 = Instance.new(""TextLabel"")
			local Sep3 = Instance.new(""Frame"")
			
			Seperator.Name = ""Seperator""
			Seperator.Parent = MainFramePage
			Seperator.BackgroundColor3 = Color3.fromRGB(51,255,255)
			Seperator.BackgroundTransparency = 1.000
			Seperator.Size = UDim2.new(0, 280, 0, 20)
			
			Sep1.Name = ""Sep1""
			Sep1.Parent = Seperator
			Sep1.BackgroundColor3 = _G.Color
			Sep1.BorderSizePixel = 0
			Sep1.Position = UDim2.new(0, 0, 0, 10)
			Sep1.Size = UDim2.new(0, 20, 0, 1)
			
			Sep2.Name = ""Sep2""
			Sep2.Parent = Seperator
			Sep2.BackgroundColor3 = Color3.fromRGB(51,255,255)
			Sep2.BackgroundTransparency = 1.000
			Sep2.Position = UDim2.new(0, 0.01, 0, 0)
			Sep2.Size = UDim2.new(0, 280, 0, 20)
			Sep2.Font = Enum.Font.Code
			Sep2.Text = text
			Sep2.TextColor3 = Color3.fromRGB(51,255,255)
			Sep2.TextSize = 20.000
			
			Sep3.Name = ""Sep3""
			Sep3.Parent = Seperator
			Sep3.BackgroundColor3 = _G.Color
			Sep3.BorderSizePixel = 0
			Sep3.Position = UDim2.new(0, 260, 0, 10)
			Sep3.Size = UDim2.new(0, 20, 0, 1)
		end

		function main:AddSeperatorRight(text)
			local Seperator2 = Instance.new(""Frame"")
			local Sep4 = Instance.new(""Frame"")
			local Sep5 = Instance.new(""TextLabel"")
			local Sep6 = Instance.new(""Frame"")
			
			Seperator2.Name = ""Seperator""
			Seperator2.Parent = MainFramePage2
			Seperator2.BackgroundColor3 = Color3.fromRGB(51,255,255)
			Seperator2.BackgroundTransparency = 1.000
			Seperator2.Size = UDim2.new(0, 280, 0, 20)
			
			Sep4.Name = ""Sep1""
			Sep4.Parent = Seperator2
			Sep4.BackgroundColor3 = _G.Color
			Sep4.BorderSizePixel = 0
			Sep4.Position = UDim2.new(0, 0, 0, 10)
			Sep4.Size = UDim2.new(0, 20, 0, 1)
			
			Sep5.Name = ""Sep2""
			Sep5.Parent = Seperator2
			Sep5.BackgroundColor3 = Color3.fromRGB(51,255,255)
			Sep5.BackgroundTransparency = 1.000
			Sep5.Position = UDim2.new(0, 0.01, 0, 0)
			Sep5.Size = UDim2.new(0, 280, 0, 20)
			Sep5.Font = Enum.Font.Code
			Sep5.Text = text
			Sep5.TextColor3 = Color3.fromRGB(51,255,255)
			Sep5.TextSize = 20.000
			
			Sep6.Name = ""Sep3""
			Sep6.Parent = Seperator2
			Sep6.BackgroundColor3 = _G.Color
			Sep6.BorderSizePixel = 0
			Sep6.Position = UDim2.new(0, 260, 0, 10)
			Sep6.Size = UDim2.new(0, 20, 0, 1)
		end


		function main:AddLineLeft()
			local Linee = Instance.new(""Frame"")
			local Line = Instance.new(""Frame"")
			
			Linee.Name = ""Linee""
			Linee.Parent = MainFramePage
			Linee.BackgroundColor3 = Color3.fromRGB(255,0,0)
			Linee.BackgroundTransparency = 1.000
			Linee.Position = UDim2.new(0, 0, 0.119999997, 0)
			Linee.Size = UDim2.new(0, 280, 0, 20)
			
			Line.Name = ""Line""
			Line.Parent = Linee
			Line.BackgroundColor3 = _G.Color
			Line.BorderSizePixel = 0
			Line.Position = UDim2.new(0, 0, 0, 10)
			Line.Size = UDim2.new(0, 280, 0, 1)
		end
		
		function main:AddLineRight()
			local Lineee = Instance.new(""Frame"")
			local Line1 = Instance.new(""Frame"")
			
			Lineee.Name = ""Linee""
			Lineee.Parent = MainFramePage2
			Lineee.BackgroundColor3 = Color3.fromRGB(255,0,0)
			Lineee.BackgroundTransparency = 1.000
			Lineee.Position = UDim2.new(0, 0, 0.119999997, 0)
			Lineee.Size = UDim2.new(0, 280, 0, 20)
			
			Line1.Name = ""Line""
			Line1.Parent = Lineee
			Line1.BackgroundColor3 = _G.Color
			Line1.BorderSizePixel = 0
			Line1.Position = UDim2.new(0, 0, 0, 10)
			Line1.Size = UDim2.new(0, 280, 0, 1)
		end
		
		return main
	end
	return uitab
end

 function TP(CFgo)
    if game.Players.LocalPlayer.Character:WaitForChild(""Humanoid"").Health <= 0 or not game:GetService(""Players"").LocalPlayer.Character:WaitForChild(""Humanoid"") then tween:Cancel() repeat wait() until game:GetService(""Players"").LocalPlayer.Character:WaitForChild(""Humanoid"") and game:GetService(""Players"").LocalPlayer.Character:WaitForChild(""Humanoid"").Health > 0 wait(7) return end
    if (game:GetService(""Players"")[""LocalPlayer""].Character.HumanoidRootPart.Position - CFgo.Position).Magnitude <= 100 then
        pcall(function()
            tween:Cancel()
 
            game:GetService(""Players"")[""LocalPlayer""].Character.HumanoidRootPart.CFrame = CFgo
 
            return
        end)
    end
    local tween_s = game:service""TweenService""
    local info = TweenInfo.new((game:GetService(""Players"")[""LocalPlayer""].Character.HumanoidRootPart.Position - CFgo.Position).Magnitude/220, Enum.EasingStyle.Linear)
    tween = tween_s:Create(game.Players.LocalPlayer.Character[""HumanoidRootPart""], info, {CFrame = CFgo})
    tween:Play()
 
    local tweenfunc = {}
 
    function tweenfunc:Stop()
        tween:Cancel()
    end
 
    return tweenfunc
end

spawn(function()
        pcall(function()
            while wait() do
if _G.Chest_Farm then
if not game:GetService(""Players"").LocalPlayer.Character.HumanoidRootPart:FindFirstChild(""BodyClip"") then
                        local Noclip = Instance.new(""BodyVelocity"")
                        Noclip.Name = ""BodyClip""
                        Noclip.Parent = game:GetService(""Players"").LocalPlayer.Character.HumanoidRootPart
                        Noclip.MaxForce = Vector3.new(100000,100000,100000)
                        Noclip.Velocity = Vector3.new(0,0,0)
                    end
                end
            end
        end)
    end)

 spawn(function()
        pcall(function()
            game:GetService(""RunService"").Stepped:Connect(function()
                if _G.Chest_Farm then
                    for _, v in pairs(game:GetService(""Players"").LocalPlayer.Character:GetDescendants()) do
                        if v:IsA(""BasePart"") then
                            v.CanCollide = false    
                        end
                    end
                end
            end)
        end)
    end)


    local RenUi = Update:AddWindow(""Infinity Hub"",""10039618734"",Enum.KeyCode.End)

    local Main = RenUi:AddTab(""Main"",""6026568198"")
    local Teleport = RenUi:AddTab(""Teleport"",""6035190846"")
    local Shop = RenUi:AddTab(""Shop"",""6031265976"")
    local Misc = RenUi:AddTab(""Misc"",""6034509993"")
    local Setting = RenUi:AddTab("""","""")
    
    local S = RenUi:AddTabH(""Top"",""14134158045"")


    

    
    
   
    
    Main:AddSeperatorLeft(""Info"")
    Main:AddLabelLeft(""Wecome To Infinity Hub Script"")
    Date = os.date(""%d"".."" ""..""%B"".."" ""..""%Y"")
    Main:AddLabelLeft(""Day : ""..Date)
   Main:AddLineLeft("""")

Main:AddToggleLeft(""Chest Farm"",_G.Chest_Farm,function(a)
_G.Chest_Farm = a
end)

  spawn(function()
     while wait() do
      pcall(function()
       if _G.Chest_Farm then
        for i,v in pairs(game:GetService(""Workspace""):GetChildren()) do
        if v.Name == ""Chest"" then
         repeat wait() 
    TP(v.WorldPivot)
game:GetService(""VirtualInputManager""):SendKeyEvent(true,""E"",false,game)
 
    until_G.Chest_Farm == false or not v.Parent
    end
    end
    end
    end)
    end
    end)




          
"
ErWJ5SnB,AFVALOPHAALDIENST.NL - purchase datalayer script,chiragsolanki,JavaScript,Friday 13th of October 2023 12:53:17 AM CDT,"dataLayer.push({ ecommerce: null });  // Clear the previous ecommerce object.
dataLayer.push({
  event: ""purchase"",
  ecommerce: {
      transaction_id: ""T_12345"",
              value: 272, // value is a total of tax, shipping 
      tax: 0, // we can leave it blank if there is nothing to enter
      shipping: 0, // we can leave it blank if there is nothing to enter
      currency: ""EUR"",
      coupon: ""SUMMER_SALE"", // we can leave it blank if there is nothing to enter
              email: ""sander@gmail.com"", // Email id enter by user while completing the flow 

      items: [
       {

item_name: ""Los afval"",       
     	 item_id: ""12345"",
         currency: ""EUR"",
       	 price: 125.00, // I don’t know how they calculated on the website. 
         quantity: 2,
      },
 		      {
item_name: ""2/3-zitsbank"",       
     	 item_id: ""12345"",
         currency: ""EUR"",
       	 price: 174.00, // I don’t know how they calculated on the website.
         quantity:1,
      }

     	]
  }
});
"
v3WCuNtL,best snowybot ever,coinwalk,JavaScript,Friday 13th of October 2023 12:05:43 AM CDT,"var smiley = parseFloat(document.getElementById('pct_balance').value);
var nudie = Number((smiley/144000).toFixed(8));
var burp = nudie;
var taget = (smiley*2000);
var bolux = (nudie*10);
var poopy = (nudie*6.5);
var sexual = ((Math.floor(smiley/bolux))*bolux);
var woman = ((Math.floor(smiley/bolux))*bolux);
var fart = 1;
var lol = false;
var submarine = 2.5;
var plane = 6.5;
var jockey = ((burp*1).toFixed(8));
var bolance = parseFloat(document.getElementById('pct_balance').value);


 
function get(){
console.clear();
bolance = document.getElementById('pct_balance').value;
if ((bolance>(sexual+(burp*plane)))&&(bolance>woman)) {
    burp = burp*2;
    lol = true;
    submarine = 4.5;
    plane = 4.5;
    sexual = parseFloat(bolance);
}
if ((bolance>(sexual+(burp*plane)))&&(bolance<woman)) {
    burp = burp*2;
    lol = false;
    submarine = 4.5;
    plane = 4.5;
    sexual = parseFloat(bolance);
}
if ((bolance<(sexual-(burp*submarine)))&&(!lol)) {
    burp = burp*2;
    fart = 0;
    submarine = 4.5;
    plane = 4.5;
    sexual = parseFloat(bolance);
}
if ((bolance<(sexual-(burp*submarine)))&&(lol)) {
    burp = burp*2;
    lol = false;
    submarine = 4.5;
    plane = 4.5;
    sexual = parseFloat(bolance);
}
if ((bolance>=(woman+(bolux*fart)))&&(bolance<(((Math.floor(bolance/bolux))*bolux)+poopy))) {
    burp = nudie;
    fart = 1;
    lol = false;
    submarine = 2.5;
    plane = 6.5;
    woman = ((Math.floor((parseFloat(bolance))/bolux))*bolux);
    sexual = ((Math.floor((parseFloat(bolance))/bolux))*bolux);
}
if ((bolance>=(smiley*2.4))&&(bolance<(((Math.floor(bolance/bolux))*bolux)+poopy))) {
    nudie = Number(((parseFloat(bolance))/144000).toFixed(8));
    burp = nudie;
    bolux = (nudie*10);
    poopy = (nudie*6.5); 
    fart = 1;
    submarine = 2.5;
    plane = 6.5;
    lol = false;
    sexual = ((Math.floor((parseFloat(bolance))/bolux))*bolux);
    woman = ((Math.floor((parseFloat(bolance))/bolux))*bolux);
    smiley = parseFloat(bolance);
}
    if (bolance >= taget) {
        console.log(""winner winner chicken dinner"");
        return;
    }
jockey = ((burp*1).toFixed(8));
$('#pct_chance').val(49.5);
$('#pct_bet').val(jockey);
$('#a_lo').click();
var dog = ((bolance-smiley).toFixed(8));
console.log(""profit"");
console.log(dog);
setTimeout(() => get(), 1);
}
get();"
s4prXV1s,Display.WriteLine(),foolkiller204,C#,Thursday 12th of October 2023 11:58:07 PM CDT,"class Display
        {
            //gets user input and max number of characters the user wants on each line
            public static void Write(string input,int maxChar = 50)
            {
                //variables
                string[] string_array = input.Split("" "");
                int number_of_char = 0;
                int i = 0;
                //runs through each word in the big string
                foreach (string str in string_array)
                {
                    //acounts for every character in each word including spaces
                    number_of_char += str.Length + 1;
                    //if the number of characters exceedes max character limit a new line is created
                    if (number_of_char >= maxChar)
                    {
                        if (i<string_array.Length)
                        {
                            Console.Write($""\n{str} "");
                            //resets char count for new line
                            number_of_char = 0;
                        }
                    }
                    //continues printing normaly if the character limit for that line is not reached
                    else
                    {
                        Console.Write(str+"" "");
                    }
                    i++;
                }
            }
            public static void WriteLine(string input, int maxChar = 50)
            {
                string[] string_array = input.Split("" "");
                int number_of_char = 0;
                foreach (string str in string_array)
                {
                    number_of_char += str.Length + 1;
                    if (number_of_char >= maxChar)
                    {
                        Console.Write($""\n{str} "");
                        number_of_char = 0;
                    }
                    else
                    {
                        Console.Write(str + "" "");
                    }

                }
                Console.WriteLine();
            }
        }"
5bR5XWWa,exam preparation 2,horozov86,PostgreSQL,Thursday 12th of October 2023 11:25:58 PM CDT,"2. INSERT

INSERT INTO clients (full_name, phone_number)
SELECT
	CONCAT(first_name, ' ', last_name),
	'(088) 9999'||id*2
FROM 
	drivers
WHERE
	id BETWEEN 10 AND 20


3.UPDATE

UPDATE cars
SET condition = 'C'
WHERE
	(mileage >= 800000 OR mileage IS NULL)
		AND
	year <= 2010
		AND
	make <> 'Mercedes-Benz';


4.DELETE

DELETE FROM clients
WHERE
	LENGTH(full_name) >= 3
		AND
	id NOT IN (SELECT client_id FROM courses);


6.CARS (many to many)

SELECT
	d.first_name,
	d.last_name,
	c.make,
	c.model,
	c.mileage
FROM
	drivers AS d
JOIN cars_drivers AS cd
ON cd.driver_id = d.id
JOIN cars AS c
ON c.id = cd.car_id

WHERE
	c.mileage IS NOT NULL
ORDER BY
	c.mileage DESC,
	d.first_name;


7.Number of Courses for Each Car (броят на курсовете се опрделя, като се COUNT id-тата на courses!!! Използваме LEFT JOIN за да се извлече информация и там където курсовете са 0, съответно average_bill е NULL!!! Използваме HAVING понеже exclude е след агрегациите!!!
SELECT 
	cr.id AS car_id,
	cr.make AS make,
	cr.mileage AS mileage,
	COUNT(co.id) AS count_of_courses,
	ROUND(AVG(co.bill), 2) AS average_bill
FROM 
	cars AS cr
LEFT JOIN 
	courses AS co
ON 
	cr.id = co.car_id
GROUP BY
	cr.id,
	cr.make AS make,
	cr.mileage AS mileage
HAVING 
	COUNT(co.id) <> 2
ORDER BY
	count_of_courses DESC,
	cr.id ASC;


8.Regular Clients - свързват се само таблиците courses и clients, като броя на колите се взима чрез car_id. ПО УСЛОВИЕ КЛИЕНТИТЕ ТРЯБВА ДА СА ПЪТУВАЛ С ПОВЕЧЕ ОТ ЕДНА КОЛАТА, ЗАТОВА ИЗПОЛЗВАМЕ HAVING
SELECT
	cl.full_name,
	COUNT(car_id) AS count_of_cars,
	SUM(co.bill) AS total_sum
FROM
	clients AS cl
JOIN courses AS co
	ON co.client_id = cl.id
WHERE
	cl.full_name LIKE '_a%'
GROUP BY
	cl.full_name
HAVING
	COUNT(car_id) > 1
ORDER BY
	cl.full_name;


9.Full Information of Courses - ОСОБЕНО Е CASE END-a!!!

SELECT
	a.name,
	CASE
		WHEN EXTRACT(HOUR FROM co.start) BETWEEN 6 AND 20 THEN 'Day'
		ELSE 'Night'	
	END AS day_time,
	co.bill,
	cl.full_name,
	c.make,
	c.model,
	cat.name
FROM
	addresses AS a
JOIN
	courses AS co
ON co.from_address_id = a.id
JOIN
	clients AS cl
ON cl.id = co.client_id
JOIN
	cars AS c
ON c.id = co.car_id
JOIN
	categories AS cat
ON cat.id = c.category_id
ORDER BY
	co.id;


10.Find all Courses by Client’s Phone Number

CREATE OR REPLACE FUNCTION fn_courses_by_client(phone_num VARCHAR(20))
RETURNS INT
AS
$$
BEGIN
	RETURN (SELECT
				COUNT(co.id)
			FROM
			clients AS cl
			JOIN courses AS co
			ON co.client_id = cl.id
			WHERE cl.phone_number = phone_num
	);
	
END;
$$
LANGUAGE plpgsql;

11.	Full Info for Address

CREATE TABLE search_results (
    id SERIAL PRIMARY KEY,
    address_name VARCHAR(50),
    full_name VARCHAR(100),
    level_of_bill VARCHAR(20),
    make VARCHAR(30),
    condition CHAR(1),
    category_name VARCHAR(50)
);

CREATE OR REPLACE PROCEDURE sp_courses_by_address(address_name VARCHAR(100))
AS
$$
BEGIN
	TRUNCATE search_results;
	INSERT INTO search_results (address_name, full_name, level_of_bill, make, condition, category_name)
	SELECT
		a.name,
		cl.full_name,
		CASE
			WHEN co.bill <= 20 THEN 'Low'
			WHEN co.bill <= 30 THEN 'Medium'
			ELSE 'High'
		END AS level_of_bill,
		c.make,
		c.condition,
		cat.name
	FROM
		addresses AS a
	JOIN
		courses AS co
	ON co.from_address_id = a.id
	JOIN
		clients AS cl
	ON cl.id = co.client_id
	JOIN
		cars AS c
	ON c.id = co.car_id
	JOIN
		categories AS cat
	ON cat.id = c.category_id
	WHERE
		a.name = address_name
	ORDER BY
		c.make,
		cl.full_name;
		
END;
$$
LANGUAGE plpgsql;







"
rqsNhMV0,Probability Boolean,foolkiller204,C#,Thursday 12th of October 2023 11:23:37 PM CDT,"bool TrueFalse(int probability=50)
{
     //random object referance
     Random random = new Random();
     //generates number 1-100
     int number = random.Next(1,101);
     //returns true or false based on probability of being true
     //defaults to 50% if no param is given
     return number <= probability;
}"
ue4JiYMC,compare.sh,gregj529,Bash,Thursday 12th of October 2023 10:52:57 PM CDT,"#!/bin/bash

# Check if the correct number of arguments is provided
if [ ""$#"" -ne 4 ]; then
    echo ""Usage: $0 <File1> <File2> <OutputFile1> <OutputFile2>""
    exit 1
fi

file1=$1
file2=$2
output1=$3
output2=$4

# Function to compare values and generate output
compare_and_output() {
    while IFS="" "" read -r id1 col1 _; do
        IFS="" "" read -r id2 col2 _
        if [ ""$col1"" != ""$col2"" ]; then
            echo ""$id1 $col1 $col2"" >> ""$output1""
            echo ""$col1 $col2"" >> ""$output2""
        fi
    done < <(paste <(cut -d"" "" -f2,3 ""$file1"") <(cut -d"" "" -f2,3 ""$file2""))
}

# Compare values and generate output
compare_and_output

# Count occurrences of each unique qualitative difference
sort ""$output2"" | uniq -c > ""$output2.tmp""
mv ""$output2.tmp"" ""$output2""

echo ""Comparison completed. Results saved in $output1 and $output2."""
MBp83eLs,Đại lý Bong88,dailybong88,C,Thursday 12th of October 2023 09:57:01 PM CDT,"Bong88 Dailybong88 chuyên cấp tổng mạng bóng 88 tại Việt Nam, đại lý cá cược bóng đá Online lớn nhất châu á với mức hoa hồng cao nhất. Mở đại lý để nhận được hoa hồng khi phát sinh giao dịch.

Địa chỉ: Tân Biên, Tây Ninh, Việt Nam
Hotline: 094 635 64 81
Website: https://dailybong88.bet
Email: www.dailybong88@gmail.com
Youtube: https://www.youtube.com/channel/UC2TXyf3xq4KH_0ftdwtBh4w
Tags: Bong88, Đại lý Bong88, Cấp tổng Bong88, Đăng ký Bong88, Casino Bong88, Nhà cái Bong88, Mạng tổng bong88, Tổng Bong88
Hashtag: #TongBong88 #DailyBong88 #NhacaiBong88 #Bong88VietNam #DangkyBong88 #CapTongBong88

"
mprgG5TN,accSetupGenerator.html,ZeroTrace,HTML,Thursday 12th of October 2023 09:49:49 PM CDT,"<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <title>Assetto corsa la boite à outils</title>
    <link href=""vendor/bootstrap5/css/bootstrap.min.css"" rel=""stylesheet"">

</head>
<body>
<nav class=""navbar navbar-expand-lg navbar-light bg-light"">
    <div class=""container-fluid"">
        <a class=""navbar-brand"" href=""#"">ACC setup Tools</a>
        <button class=""navbar-toggler"" type=""button"" data-bs-toggle=""collapse"" data-bs-target=""#navbarSupportedContent""
                aria-controls=""navbarSupportedContent"" aria-expanded=""false"" aria-label=""Toggle navigation"">
            <span class=""navbar-toggler-icon""></span>
        </button>
        <div class=""collapse navbar-collapse"" id=""navbarSupportedContent"">
            <ul class=""navbar-nav me-auto mb-2 mb-lg-0"">
                <li class=""nav-item"">
                    <a class=""nav-link active"" aria-current=""page"" href=""#"">Home</a>
                </li>
            </ul>

        </div>
    </div>
</nav>
<div class=""container"">
    <h1>Assetto corsa The Toolbox</h1>

    <div>
        <h2>ideal tire pressures</h2>
        <p>
            For example, select the aggressive setting for your car<br>
            run 2 or 3 clean laps with your car, without looking for lap times :<br><br>
            Then go to your car's setup (tires section) and copy the values you see for each tire into the form.<br><br>

            press the ""Calculate your ideal PSI"" button<br>
            You'll see below each of your psi values (in green) <br>
            the new psi values to set for each of your tires<br><br>
            once you've done a few more laps, you can fill in the form again<br>
            and calculate your ideal pressures again by clicking on ""Calculate your ideal PSI"", for example when track temperatures change.



        </p>
        <img src=""img/pression.png"" style=""width: 80%;height: auto"">
        <form>
            <div class=""row"">
                <div class=""col"">

                    <div class=""mb-3"">
                        <label for=""hotpsiAvGauche"" class=""form-label"">Hot PSI left front</label>
                        <input type=""text"" class=""form-control"" id=""hotpsiAvGauche"" aria-describedby=""hotpsiAvGauche"">
                        <div id=""hotpsiAvGaucheHelp"" class=""form-text"">hot PSI value indicated for left front (after 2 -3 laps)</div>
                    </div>
                    <div class=""mb-3"">
                        <label for=""psiAvGauche"" class=""form-label"">Cold PSI left front</label>
                        <input type=""text"" class=""form-control"" id=""psiAvGauche"" aria-describedby=""psiAvGauche"">
                        <div id=""psiAvGaucheHelp"" class=""form-text"">enter your current Cold PSI value for left front (in setup screen)</div>
                    </div>

                    <div class=""mb-3"">
                        <label for=""hotpsiArGauche"" class=""form-label"">Hot PSI left rear</label>
                        <input type=""text"" class=""form-control"" id=""hotpsiArGauche"" aria-describedby=""hotpsiArGauche"">
                        <div id=""hotpsiArGaucheHelp"" class=""form-text"">hot PSI value indicated for left rear (after 2 -3 laps)</div>
                    </div>
                    <div class=""mb-3"">
                        <label for=""psiArGauche"" class=""form-label"">Cold PSI left rear</label>
                        <input type=""text"" class=""form-control"" id=""psiArGauche"" aria-describedby=""psiArGauche"">
                        <div id=""psiArGaucheHelp"" class=""form-text"">enter your current Cold PSI value for left rear (in setup screen)</div>
                    </div>


                </div>
                <div class=""col"">
                    <div class=""mb-3"">
                        <label for=""hotpsiAvdroite"" class=""form-label"">Hot PSI right front</label>
                        <input type=""text"" class=""form-control"" id=""hotpsiAvdroite"" aria-describedby=""hotpsiAvdroite"">
                        <div id=""hotpsiAvdroiteHelp"" class=""form-text"">hot PSI value indicated for right front (after 2 -3 laps)</div>
                    <div class=""mb-3"">
                        <label for=""psiAvdroite"" class=""form-label"">Cold PSI right front</label>
                        <input type=""text"" class=""form-control"" id=""psiAvdroite"" aria-describedby=""hotpsiAvdroite"">
                        <div id=""psiAvdroiteHelp"" class=""form-text"">enter your current Cold PSI value for right front (in setup screen)</div>
                    </div>

                    <div class=""mb-3"">
                        <label for=""hotpsiArdroite"" class=""form-label"">Hot PSI right rear</label>
                        <input type=""text"" class=""form-control"" id=""hotpsiArdroite"" aria-describedby=""hotpsiArdroite"">
                        <div id=""hotpsiArdroiteHelp"" class=""form-text"">hot PSI value indicated for right rear (after 2 -3 laps)</div>
                    <div class=""mb-3"">
                        <label for=""psiArdroite"" class=""form-label"">Cold PSI right rear</label>
                        <input type=""text"" class=""form-control"" id=""psiArdroite"" aria-describedby=""hotpsiArdroite"">
                        <div id=""psiArdroiteHelp"" class=""form-text"">enter your current Cold PSI value for right rear (in setup screen)</div>
                    </div>
                </div>

            </div>
            <div class=""row"">
                <div class=""col"">
                    <button type=""button"" class=""btn btn-primary"" onclick=""calculbestpsi()"">Calculate your ideal PSI</button>
                </div>
            </div>

        </form>


    </div>
</div>
<script src=""vendor/jquery.js""></script>
<script src=""vendor/bootstrap5/js/bootstrap.bundle.min.js""></script>

<script>
    function calculbestpsi() {
        let hotpsiAvGauche = parseFloat($(""#hotpsiAvGauche"").val().replace(',', '.'));
        let psiAvGauche = parseFloat($(""#psiAvGauche"").val().replace(',', '.'));
        let hotpsiArGauche = parseFloat($(""#hotpsiArGauche"").val().replace(',', '.'));
        let psiArGauche = parseFloat($(""#psiArGauche"").val().replace(',', '.'));
        let hotpsiAvdroite = parseFloat($(""#hotpsiAvdroite"").val().replace(',', '.'));
        let psiAvdroite = parseFloat($(""#psiAvdroite"").val().replace(',', '.'));
        let hotpsiArdroite = parseFloat($(""#hotpsiArdroite"").val().replace(',', '.'));
        let psiArdroite = parseFloat($(""#psiArdroite"").val().replace(',', '.'));

        // préssion ideal 27.6

        // calcule pression idéale avant gauche
        let pidealavg = psiAvGauche + (27.6 - hotpsiAvGauche);
        // on affiche le resultat
        $(""#psiAvGaucheHelp"").html(""réglage psi avant gauche recommandé <span class='text-success'>""+pidealavg+"" psi</span>"");

        // calcule pression idéale arriere gauche
        let pidealarg = psiArGauche + (27.6 - hotpsiArGauche);
        // on affiche le resultat
        $(""#psiArGaucheHelp"").html(""réglage psi avant gauche recommandé <span class='text-success'>""+pidealarg+"" psi</span>"");

        // calcule pression idéale avant droite
        let pidealavd = psiAvdroite + (27.6 - hotpsiAvdroite);
        // on affiche le resultat
        $(""#psiAvdroiteHelp"").html(""réglage psi avant gauche recommandé <span class='text-success'>""+pidealavd+"" psi</span>"");

        // calcule pression idéale arrière droite
        let pidealard = psiArdroite + (27.6 - hotpsiArdroite);
        // on affiche le resultat
        $(""#psiArdroiteHelp"").html(""réglage psi avant gauche recommandé <span class='text-success'>""+pidealard+"" psi</span>"");

    }
</script>
</body>
</html>"
F6AanmgG,Fight Commands,ShinukiAyatoVT,JSON,Thursday 12th of October 2023 09:46:33 PM CDT,"[`Headbutt`, `Bonk Stick`, `Trashtalk`, `Curse`, `Insults`, `Stare`, `Glare`, `Charm`, `Grudge`, `Depression`, `Chilanka`]"
12dg04DQ,Code HTML,blackimpala,HTML,Thursday 12th of October 2023 09:37:03 PM CDT,"  <main class=""contenedor modelos"">
        <h2 class=""text-center degradado-verde header-modelos"">Elige tus TechPRO</h2>

        <div class=""listado-modelos"">
            <div class=""modelo modelo-x"">
                <h3>TechPRO X</h3>
                <p class=""precio"">$299</p>
            </div>

            <div class=""modelo modelo-y"">
                <h3>TechPRO Y</h3>
                <p class=""precio"">$399</p>
            </div>

            <div class=""modelo modelo-z"">
                <h3>TechPRO Z</h3>
                <p class=""precio"">$499</p>
            </div>

        </div>
    </main>"
YQWTq48K,Code CSS,blackimpala,CSS,Thursday 12th of October 2023 09:35:58 PM CDT,"/** Modelos **/
.modelos {
    padding: var(--separacion) 0;
}

.header-modelos {
    font-size: 6rem;
    margin-bottom: var(--separacion);
}


.listado-modelos {
    display: flex;
    flex-direction: column-reverse;
}

@media (min-width: 992px) { 
    .listado-modelos {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        grid-template-rows: repeat(2, 20rem);
        gap: 4rem;
    }
}

.modelo {
    background-color: var(--grisClaro);
    margin-bottom: 2rem;
    padding-left: 4rem;
    color: var(--primario);
    border-radius: 2rem;
    min-height: 20rem;
    background-repeat: no-repeat;
    background-position: 90% center;
    background-size: 15rem;
    display: flex;
    flex-direction: column;
    justify-content: center;
    transition-property: transform background-size;
    transition-duration: .3s;
}
.modelo:hover {
    transform: scale(1.1);
    background-size: 30rem;
}


@media (min-width: 992px) { 
    .modelo {
        margin-bottom: 0;
    }
}

.modelo h3 {
    font-size: 2.4rem;
}

.modelo .precio {
    font-size: 4rem;
    font-weight: 900;
    line-height: 0;
}

.modelo:first-of-type {
    margin-bottom: 0;
}

.modelo-x {
    background-image: url(../img/modelo-x.svg);
}
.modelo-y {
    background-image: url(../img/modelo-y.svg);
}

.modelo-z {
    background-image: url(../img/modelo-z.svg);
    background-color: var(--primario);
    color: var(--blanco);
}
@media (min-width: 992px) { 
    .modelo-z {
        grid-column: 2 / 3;
        grid-row: 1 / 3;
        background-size: 25rem;
    }
    .modelo-z h3 {
        font-size: 4rem;
    }
}
.modelo-z .precio {
    font-size: 6rem;
}"
jtLbRscb,kit_kmixer.h as of 2023-10-12,Kitomas,C,Thursday 12th of October 2023 09:11:14 PM CDT,"/**
 * \file kit_kmixer.h
 * \brief Header file for KIT SDL2's KMixer module
 */
#ifndef _KIT_KMIXER_H
#define _KIT_KMIXER_H
#ifndef _KIT_SDL2_KMIXER_H
#define _KIT_SDL2_KMIXER_H
//todo: make kmixerAsync


#include ""./kit_core.h"" //includes SDL2/SDL.h
#include ""./_kit_acodecPCM.h"" //contains PCM data stuff

#ifdef __cplusplus
extern ""C"" {
#endif




/* +kit_kmixerDevice struct/union typedefs+ */
typedef struct kit_kmixerDevice kit_kmixerDevice;
/* -kit_kmixerDevice struct/union typedefs- */

/* +kit_kmixerVoice struct/union typedefs+ */
typedef struct kit_kmixerVoiceSpec kit_kmixerVoiceSpec;
/* -kit_kmixerVoice struct/union typedefs- */




/* ++++++++++++ */
/* +kit_kmixer+ */
/* ++++++++++++ */

extern const SDL_bool kit_kmixerIsDebug;



/**
 * Initialize kmixer
 * \param[in] numDeviceThreads The maximum number of active threads a device can have. \n
                               Negative values will use fractions of total core count (-2 for half, -3 for a third, etc.)
 * \return 0 on success, >0 on warning, or <0 on error (call SDL_GetError() for more info)
 *
 * \remark Setting numDeviceThreads to 0 is treated the same as setting it to -1 (as many threads as there are CPU cores).
 * \sa kit_kmixerQuit
 */
extern int kit_kmixerInit(int numDeviceThreads);

/**
 * Shut down kmixer
 * \return 0 on success, >0 on warning, <0 on error (call SDL_GetError() for more info)
 *
 * \sa kit_kmixerInit
 */
extern int kit_kmixerQuit();

/* ------------ */
/* -kit_kmixer- */
/* ------------ */




/* ++++++++++++++++++ */
/* +kit_kmixerDevice+ */
/* ++++++++++++++++++ */

/**
 * \brief This struct contains all info needed for a kmixer device and its voice chains
 * \remark Every member of this struct has the ""_"" prefix,
 *         which means they should be treated as read-only
 */
struct kit_kmixerDevice { //112B
  union {
    char             str[8]; ///< \brief String portion of struct ID (""kmxrDev\x00"")
    Uint64              num; ///< \brief Integer portion of struct ID (0x0076654472786D6B)
  } /* ------------ */ _magic; ///< \brief Struct ID number; union of Uint64 and char[8]
  SDL_AudioSpec         _spec; ///< \brief Audio specification of the device
  SDL_mutex*            _lock; ///< \brief Mutex for device access (lock unnecessary for accessing some members)
  kit_coreVector*    _threads; ///< \brief The device's thread list for voice processing
  kit_coreVector* _threadData; ///< \brief List of data to be fed into the device threads
  kit_coreVector*        _raw; ///< \brief 1D array of all registered voice structs
  kit_coreVector*        _ord; ///< \brief 2D array of voice references (of raw), ordered by input chain stage
  float            _fadeDelta; ///< \brief the number to apply to _fadeVolume when applying fade ins/outs
  float           _fadeVolume; ///< \brief Volume used for fade ins/outs
  Uint32         _fadeInDelay; ///< \brief How many samples to write 0 to before fading in
  Uint32           _lockCount; ///< \brief The number of threads currently locking the device
  SDL_AudioDeviceID    _devID; ///< \brief The device ID number that SDL uses
  SDL_bool           _playing; ///< \brief A boolean of whether the device is currently active
  SDL_bool           _closing; ///< \brief Should only be set inside a call to kit_kmixerDeviceClose
  SDL_bool           _fadeOut; ///< \brief Used internally for fade ins/outs
};



/**
 * Lock or unlock the mutex of a kit_kmixerAudioDevice
 * \param[in] device The device to lock
 * \param[in] lockState A boolean of whether to lock the device or unlock it
 * \return 0 on success, 1 if device already unlocked, or <0 on error (call SDL_GetError() for more info).
 *
 * \remark Only lock a device as long as necessary, as locking the device's mutex
 *         prevents kmixer from interacting with the device at all. \n
 *         Also, locks are counted by reference, so every lock needs to be
 *         paired with an unlock until the device can be fully unlocked.
 */
extern int kit_kmixerDeviceLock(kit_kmixerDevice* device, SDL_bool lockState);


/**
 * Play or pause a kit_kmixerAudioDevice
 * \param[in] device The device to play or pause
 * \param[in] playState A boolean of whether to play or pause the device
 * \return 0 on success, or <0 on error (call SDL_GetError() for more info)
 *
 * \remark When unpausing a paused device, there is 490ms of silence, followed by 10ms of fade-in. \n
 * \remark Conversely, when pausing a currently unpaused device, there's 10ms of fade-out.
 * \sa kit_kmixerDeviceUnpauseAndWait
 * \sa kit_kmixerDevicePauseAndWait
 */
extern int kit_kmixerDevicePlay(kit_kmixerDevice* device, SDL_bool playState);


/**
 * Close a kit_kmixerAudioDevice
 * \param[in] device_p A pointer to the device to close
 * \return 0 on success, or <0 on error (call SDL_GetError() for more info)
 *
 * \remark Do note that this will call the kit_kmixerVoiceRemoveCallback
 *         of any voices destroyed during this operation.
 * \sa kit_kmixerDeviceOpen
 */
extern int kit_kmixerDeviceClose(kit_kmixerDevice** device_p);

/**
 * Open a kit_kmixerAudioDevice
 * \param[in] deviceName A string given by SDL_GetAudioDeviceName
 *            (NULL for most reasonable default device)
 * \param[in] allowedChanges Any combination of
 *            SDL_AUDIO_ALLOW_<FREQUENCY,FORMAT,CHANNELS,SAMPLES,ANY>_CHANGE, OR'd together
 * \param[in] voiceSpecDesired The requested specification of the device and initial voice
 * \param[out] voiceSpecObtained The real specification of the device/initial voice,
 *             altered depending on allowedChange's flags
 *
 * \remark If the "".format"" member of voiceSpecDesired is set to 0,
 *         voice 1 will not be created (useful in some scenarios). \n
 * \remark (Devices will start in a paused state!)
 * \sa kit_kmixerDeviceClose
 * \sa kit_kmixerDevicePlay
 */
extern kit_kmixerDevice* kit_kmixerDeviceOpen(const char* deviceName, int allowedChanges,
                                              const kit_kmixerVoiceSpec* voiceSpecDesired,
                                              kit_kmixerVoiceSpec* voiceSpecObtained);


/**
 * Unpause a device, halting the calling thread until device fade-in completes
 * \param[in] device The device to unpause
 * \return 0 on success, or <0 on error (call SDL_GetError() for more info)
 *
 * \sa kit_kmixerDevicePlay
 * \sa kit_kmixerDevicePauseAndWait
 */
extern int kit_kmixerDeviceUnpauseAndWait(kit_kmixerDevice* device);

/**
 * Pause a device, halting the calling thread until device fade-out completes
 * \param[in] device The device to unpause
 * \return 0 on success, or <0 on error (call SDL_GetError() for more info)
 *
 * \sa kit_kmixerDevicePlay
 * \sa kit_kmixerDeviceUnpauseAndWait
 */
extern int kit_kmixerDevicePauseAndWait(kit_kmixerDevice* device);


extern int kit_kmixerDevice_Test(); // debug

/* ------------------ */
/* -kit_kmixerDevice- */
/* ------------------ */




/* +++++++++++++++++ */
/* +kit_kmixerVoice+ */
/* +++++++++++++++++ */

/**
 * \name Print a kit_kmixerVoiceSpec (These should probably become inlines at some point)
 */
/** @{ */
#define PRINT_VOICE_SPEC(_pref, _vspec) {                              \
  kit_coreLog(_pref"".remove   = %p"",(_vspec).remove);                  \
  kit_coreLog(_pref"".callback = %p"",(_vspec).callback);                \
  kit_coreLog(_pref"".userdata = %p"",(_vspec).userdata);                \
  kit_coreLog(_pref"".freq     = %i"",(_vspec).freq);                    \
  kit_coreLog(_pref""._size    = %u"",(_vspec)._size);                   \
  kit_coreLog(_pref"".stereo   = %s"",boolstr[(_vspec).stereo]); \
  kit_coreLog(_pref"".samples  = %u"",(_vspec).samples);                 \
  kit_coreLog(_pref"".format   = 0x%04X"",(_vspec).format);              }

#define PRINT_VOICE_SPEC_P(_pref, _vspec_pointer) {                              \
  kit_coreLog(_pref""->remove   = %p"",(_vspec_pointer)->remove);                  \
  kit_coreLog(_pref""->callback = %p"",(_vspec_pointer)->callback);                \
  kit_coreLog(_pref""->userdata = %p"",(_vspec_pointer)->userdata);                \
  kit_coreLog(_pref""->freq     = %i"",(_vspec_pointer)->freq);                    \
  kit_coreLog(_pref""->_size    = %u"",(_vspec_pointer)->_size);                   \
  kit_coreLog(_pref""->stereo   = %s"",boolstr[(_vspec_pointer)->stereo]); \
  kit_coreLog(_pref""->samples  = %u"",(_vspec_pointer)->samples);                 \
  kit_coreLog(_pref""->format   = 0x%04X"",(_vspec_pointer)->format);              }
/** @} */



/**
 * PCM Audio Voice Callback
 * This type of function is called when added as a voice to a KMixer audio device
 * While each voice's callback is given its own threadpool task (and should be thread-safe),
 * the overall speed is determined by device's slowest voice chain (processing-wise)
 * The given audio buffer must be completely filled before returning
 * \param[in] userdata A user-defined pointer passed to the voice callback
 * \param[in] _stream  A pointer to the audio data buffer
 * \param[in] size     The size of that buffer, in bytes
 * \param[in] hasInput A boolean of whether _stream already contains input PCM data (useful for applying DSP effects)
 *
 * \remark The audio data buffer is not guaranteed to be zeroed out, even if hasInput is SDL_FALSE
 */
typedef void (*kit_kmixerVoiceCallback) (void* userdata, void* _stream, int size, SDL_bool hasInput);


/**
 * Voice Destructor Callback
 * This type of function is called when removing a voice, so userdata can be properly handled by the user.
 * \param[in] userdata The user defined pointer to operate on.
 *
 * \remark Warning: unless kit_kmixerVoiceSpec.remove was set to NULL,
 *         this will still be called, whether or not userdata is also NULL.
 */
typedef void (*kit_kmixerVoiceRemoveCallback) (void* userdata);



/**
 * \brief The struct used when opening a kmixerDevice, as well as adding a voice to that device.
 * \details When adding a voice, "".freq"", and "".samples"" are ignored, as that is tied to the device itself.
 */
struct kit_kmixerVoiceSpec { //40B
  kit_kmixerVoiceRemoveCallback remove; ///< \brief A callback that should handle userdata in the event of voice removal (can be NULL)
  kit_kmixerVoiceCallback callback; ///< \brief A callback that should either fill or modify its input stream
  void*                   userdata; ///< \brief A user-defined pointer, passed to the callback (can be NULL)
  Sint32                      freq; ///< \brief The PCM audio's sample rate, in Hz
  Uint32                     _size; ///< \brief (internal; automatically calculated) The size of the audio buffer, in bytes
  SDL_bool                  stereo; ///< \brief Stereo if SDL_TRUE, mono if SDL_FALSE
  Uint16                   samples; ///< \brief The Audio buffer's length in sample FRAMES (total samples divided by channel count)
  SDL_AudioFormat           format; ///< \brief Format can be one of AUDIO_<U8,S16,S32,F32>
};



/**
 * Remove a kmixer device's voice, as well as any input voices, recursively
 * \param[in] device The device to remove a voice from
 * \param[in] voiceID The ID number of the voice to remove
 * \return 0 on success, -1 on error (call SDL_GetError() for more info)
 *
 * \remark The selected voice's kit_kmixerVoiceRemoveCallback will trigger
 *         after the voice itself is mostly done being removed (if it isn't NULL) \n
 * \remark Also, bit 31 of voiceID is reserved for detecting recursion, so don't set it.
 * \sa kit_kmixerVoiceRemoveCallback
 * \sa kit_kmixerVoiceAdd
 * \sa kit_kmixerVoiceRedirect
 */
extern int kit_kmixerVoiceRemove(kit_kmixerDevice* device, Uint32 voiceID);

/**
 * Add a voice to output to either a kmixer device or one of the device's voices
 * \param[in] device The device to add a voice to
 * \param[in] spec The specification for the voice
 * \param[in] outputVoiceID The ID number of the output voice (0 for the device itself)
 * \return The ID number of the newly-created voice, or 0 on error (call SDL_GetError() for more info)
 *
 * \sa kit_kmixerVoiceRemove
 * \sa kit_kmixerVoiceRedirect
 */
extern Uint32 kit_kmixerVoiceAdd(kit_kmixerDevice* device, kit_kmixerVoiceSpec* spec,
                                 Uint32 outputVoiceID);

/**
 * Redirect the output of a voice
 * \param[in] device The device to alter the voices of
 * \param[in] inputVoiceID The voice to be redirected
 * \param[in] outputVoiceID The new voice to output to (0 for the device itself)
 * \return 0 on success, -1 on error (call SDL_GetError() for more info)
 *
 * \sa kit_kmixerVoiceRemove
 * \sa kit_kmixerVoiceAdd
 */
extern int kit_kmixerVoiceRedirect(kit_kmixerDevice* device,
                                   Uint32 inputVoiceID, Uint32 outputVoiceID);


/**
 * Get the number of inputs of a given voice
 * \param[in] device The device access the voices of
 * \param[in] voiceID The specific voice to query (0 for the device itself)
 * \return The total number of inputs, or -1 on error (call SDL_GetError() for more info)
 *
 * \sa kit_kmixerVoiceGetInputs
 * \sa kit_kmixerVoiceGetOutput
 */
extern Uint32 kit_kmixerVoiceGetNumInputs(kit_kmixerDevice* device, Uint32 voiceID);

/**
 * Create a deep copy of a voice's input list
 * \param[in] device The device access the voices of
 * \param[in] voiceID The specific voice to query (0 for the device itself)
 * \return A deep copy of voice's input list, or NULL on error (call SDL_GetError() for more info)
 *
 * \remark (Make sure to call kit_coreVectorDestroy after the returned vector is no longer used!)
 * \sa kit_kmixerVoiceGetNumInputs
 * \sa kit_kmixerVoiceGetOutput
 */
extern kit_coreVector* kit_kmixerVoiceGetInputs(kit_kmixerDevice* device, Uint32 voiceID);

/**
 * Get the output voice ID of a given input voice
 * \param[in] device The device access the voices of
 * \param[in] voiceID The specific voice to query
 * \return The output voice ID, or -1 on error (call SDL_GetError() for more info)
 *
 * \sa kit_kmixerVoiceGetNumInputs
 * \sa kit_kmixerVoiceGetInputs
 */
extern Uint32 kit_kmixerVoiceGetOutput(kit_kmixerDevice* device, Uint32 voiceID);


/**
 * Get the time stamp of a voice at its point of creation
 * \param[in] device The device access the voices of
 * \param[in] voiceID The specific voice to query (0 for the device itself)
 * \return The time stamp, in milliseconds, or -1 on error (call SDL_GetError() for more info)
 *
 * \remark Specifically, the value SDL_GetTicks() returned when the voice was created.
 */
extern Uint32 kit_kmixerVoiceGetTimeStamp(kit_kmixerDevice* device, Uint32 voiceID);

/**
 * Get the voice processing stage of a given voice
 * \param[in] device The device access the voices of
 * \param[in] voiceID The specific voice to query (0 for the device itself)
 * \return The voice's chain stage, or -1 on error (call SDL_GetError() for more info)
 *
 * \remark Voices are processed by order of highest stage to lowest. \n
 *         For example, voice 0 is always on stage 0, whereas a voice that outputs to it will be on stage 1.
 */
extern Uint32 kit_kmixerVoiceGetChainStage(kit_kmixerDevice* device, Uint32 voiceID);


/**
 * Get the specification of a given voice
 * \param[in] device The device access the voices of
 * \param[in] voiceID The specific voice to query (0 for the device itself)
 * \return The voice's specification struct. "".format"" will be 0 on error (call SDL_GetError() for more info)
 *
 * \sa kit_kmixerVoiceSetSpecRemove
 * \sa kit_kmixerVoiceSetSpecCallback
 * \sa kit_kmixerVoiceSetSpecUserdata
 */
extern kit_kmixerVoiceSpec kit_kmixerVoiceGetSpec(kit_kmixerDevice* device, Uint32 voiceID);

/**
 * Set the kit_kmixerVoiceRemoveCallback of a given voice
 * \param[in] device The device access the voices of
 * \param[in] voiceID The specific voice to query
 * \param[in] remove The new kit_kmixerVoiceRemoveCallback the voice should use (can be NULL)
 * \return 0 on success, or <0 on error (call SDL_GetError() for more info)
 *
 * \sa kit_kmixerVoiceGetSpec
 * \sa kit_kmixerVoiceSetSpecCallback
 * \sa kit_kmixerVoiceSetSpecUserdata
 */
extern int kit_kmixerVoiceSetSpecRemove(kit_kmixerDevice* device, Uint32 voiceID,
                                        kit_kmixerVoiceRemoveCallback remove);

/**
 * Set the kit_kmixerVoiceCallback of a given voice
 * \param[in] device The device access the voices of
 * \param[in] voiceID The specific voice to query
 * \param[in] callback The new kit_kmixerVoiceCallback the voice should use
 * \return 0 on success, or <0 on error (call SDL_GetError() for more info)
 *
 * \sa kit_kmixerVoiceGetSpec
 * \sa kit_kmixerVoiceSetSpecRemove
 * \sa kit_kmixerVoiceSetSpecUserdata
 */
extern int kit_kmixerVoiceSetSpecCallback(kit_kmixerDevice* device, Uint32 voiceID,
                                          kit_kmixerVoiceCallback callback);

/**
 * Set the userdata pointer of a given voice
 * \param[in] device The device access the voices of
 * \param[in] voiceID The specific voice to query
 * \param[in] userdata The new userdata pointer the voice should use (can be NULL)
 * \return 0 on success, or <0 on error (call SDL_GetError() for more info)
 *
 * \sa kit_kmixerVoiceGetSpec
 * \sa kit_kmixerVoiceSetSpecRemove
 * \sa kit_kmixerVoiceSetSpecCallback
 */
extern int kit_kmixerVoiceSetSpecUserdata(kit_kmixerDevice* device, Uint32 voiceID, void* userdata);


/**
 * Get the left channel volume of a given voice (or total volume if voice is mono)
 * \param[in] device The device access the voices of
 * \param[in] voiceID The specific voice to query (0 for the device itself)
 * \return The voice's volume, or NAN on error (call SDL_GetError() for more info)
 *
 * \sa kit_kmixerVoiceGetVolR
 * \sa kit_kmixerVoiceSetVolL
 * \sa kit_kmixerVoiceSetVolR
 * \sa kit_kmixerVoiceSetVolume
 */
extern float kit_kmixerVoiceGetVolL(kit_kmixerDevice* device, Uint32 voiceID);

/**
 * Get the right channel volume of a given voice (or total volume if voice is mono)
 * \param[in] device The device access the voices of
 * \param[in] voiceID The specific voice to query (0 for the device itself)
 * \return The voice's volume, or NAN on error (call SDL_GetError() for more info)
 *
 * \sa kit_kmixerVoiceGetVolL
 * \sa kit_kmixerVoiceSetVolL
 * \sa kit_kmixerVoiceSetVolR
 * \sa kit_kmixerVoiceSetVolume
 */
extern float kit_kmixerVoiceGetVolR(kit_kmixerDevice* device, Uint32 voiceID);

/**
 * Set the left channel volume of a given voice (or total volume if voice is mono)
 * \param[in] device The device access the voices of
 * \param[in] voiceID The specific voice to query (0 for the device itself)
 * \param[in] volL The new volume to set the voice to
 * \return 0 on success, or <0 on error (call SDL_GetError() for more info)
 *
 * \remark If volL <0, volL will be MAX()'d to 0
 * \sa kit_kmixerVoiceGetVolL
 * \sa kit_kmixerVoiceGetVolR
 * \sa kit_kmixerVoiceSetVolR
 * \sa kit_kmixerVoiceSetVolume
 */
extern int kit_kmixerVoiceSetVolL(kit_kmixerDevice* device, Uint32 voiceID, float volL);

/**
 * Set the right channel volume of a given voice (ignored if voice is mono)
 * \param[in] device The device access the voices of
 * \param[in] voiceID The specific voice to query (0 for the device itself)
 * \param[in] volR The new volume to set the voice to
 * \return 0 on success, or <0 on error (call SDL_GetError() for more info)
 *
 * \remark If the voice is stereo, but volR <0, volR will be set to volL
 * \sa kit_kmixerVoiceGetVolL
 * \sa kit_kmixerVoiceGetVolR
 * \sa kit_kmixerVoiceSetVolL
 * \sa kit_kmixerVoiceSetVolume
 */
extern int kit_kmixerVoiceSetVolR(kit_kmixerDevice* device, Uint32 voiceID, float volR);

/**
 * Set both the left and right channel volumes of a given voice
 * \param[in] device The device access the voices of
 * \param[in] voiceID The specific voice to query (0 for the device itself)
 * \param[in] volL The new volume for the left channel
 * \param[in] volR The new volume for the right channel
 * \return 0 on success, or <0 on error (call SDL_GetError() for more info)
 *
 * \remark The same rules that apply to kit_kmixerVoiceSetVolL and kit_kmixerVoiceSetVolR apply here too.
 * \sa kit_kmixerVoiceGetVolL
 * \sa kit_kmixerVoiceGetVolR
 * \sa kit_kmixerVoiceSetVolL
 * \sa kit_kmixerVoiceSetVolR
 */
extern int kit_kmixerVoiceSetVolume(kit_kmixerDevice* device, Uint32 voiceID, float volL, float volR);


extern int kit_kmixerVoice_Test(); //debug

extern void kit_kmixerVoicePrintRawOrd(kit_kmixerDevice* device); //debug

/* ----------------- */
/* -kit_kmixerVoice- */
/* ----------------- */




/* +++++++++++++++++ */
/* +kit_kmixerAsync+ */
/* +++++++++++++++++ */

/**
 * Add an asyncronous mixer voice (useful for playing sound effects)
 * \param[in] device The device to add the voice to
 * \param[in] vspec The specification for the new voice
 * \param[in] outputVoiceID The voice to output to (0 for the device itself)
 * \param[in] numTracks The maximum number of tracks that can play at once
 * \return The index of the newly-created voice, or 0 on error (call SDL_GetError() for more info)
 *
 * \remark There is no AsyncRemove function, as VoiceRemove handles everything automatically. \n
 * \remark Also, only the stereo and format members of vspec are important. Everything else should be ignored
 */
extern Uint32 kit_kmixerAsyncAdd(kit_kmixerDevice* device, kit_kmixerVoiceSpec* vspec,
                                 Uint32 outputVoiceID, Uint32 numTracks);

/* +++++++++++++++++ */
/* +kit_kmixerAsync+ */
/* +++++++++++++++++ */




#ifdef __cplusplus
}
#endif

#endif /* _KIT_SDL2_KMIXER_H */
#endif /* _KIT_KMIXER_H */
"
ES0g7VSj,kit_sdl2_core.c as of 2023-10-12,Kitomas,C,Thursday 12th of October 2023 09:10:27 PM CDT,"#include ""../include/kit_sdl2/kit_core.h""
#include ""../_private/include/_kit_privmacro.h""
#include ""../_private/include/_kit_coreAllPrivate.h""
//todo: make prng that updates every millisecond
//also, kill the prng thread if coreglobals.shutdown is 1 or w/e




#if defined(_KIT_CORE_DEBUG) || defined(_KIT_ALL_DEBUG)
const SDL_bool kit_coreIsDebug=SDL_TRUE;
#else
const SDL_bool kit_coreIsDebug=SDL_FALSE;
#endif




struct _kit_coreGlobals_t _kit_coreGlobals;




const char boolstr[2][6] = {""false\x00"",""true\x00\x00""};


//used to multiply an int by the inverse of an int to get a normalized float
const float inv_i_8 = 1.0f/0x7f;       // = 0.007874015748031496062992125984251968503937
const float inv_i16 = 1.0f/0x7fff;     // = 0.000030518509475997192297128208258308664204
const float inv_i32 = 1.0f/0x7fffffff; // = 0.000000000465661287524579692410575082716799


//same thing, but for pi
const float inv_qpi = 1.0f/QPI ; // = 1.27323954474 (quarter of pi)
const float inv_hpi = 1.0f/HPI ; // = 0.63661977236 (half of pi)
const float inv_pi  = 1.0f/ PI ; // = 0.31830988618
const float inv_pi2 = 1.0f/ PI2; // = 0.15915494309




float kit_coreSawf(float x){ //like sinf, but for a sawtooth wave
  return inv_pi*SDL_fmodf(x+PI,PI2) - 1.0f;
}



float kit_coreTrif(float x){ //like sinf, but for a triangle wave
  const float sawtooth = inv_hpi*SDL_fmodf(x+HPI,PI2) - 2.0f;
  if(sawtooth<0) return 1.0f + sawtooth;
  else           return 1.0f - sawtooth;
}




/*
//(make memcpy that uses simd intrinsics if its speed becomes an issue)
void* kit_coreMemcpy(void* dst, const void* src, size_t size){
  if(!size) return dst;
  return SDL_memcpy(dst,src,size);
}



//(make memset that uses simd intrinsics if its speed becomes an issue)
void* kit_coreMemset(void* dst, int value, size_t size){
  if(!size) return dst;
  return SDL_memset(dst, value, size);
}*/



//initializes any added memory to 0 (unless size_old = NO_MEMSET)
int kit_coreRealloc(void* ptr_p, size_t size_old, size_t size_new){
  _IF_GOTO(size_old==size_new,_noerr_,;)
  _IF_SDLERR(size_old>NO_MEMSET,;,""size_old>%p"",(void*)NO_MEMSET)
  _IF_SDLERR(size_new>NO_MEMSET,;,""size_new>%p"",(void*)NO_MEMSET)

  void* ptr=SDL_realloc(*(void**)ptr_p,size_new);
  _IF_SDLERR(ptr==NULL,;,""!realloc"")

  if((size_new>size_old) && (size_old!=NO_MEMSET))
    kit_coreMemset(ptr+size_old, 0, size_new-size_old);

  *(void**)ptr_p=ptr;

  _noerr_: return  0;
  _error_: return -1;
}




int kit_coreInit(Uint32 flags){
  if(_kit_coreGlobals.init){ SDL_SetError(""core is already initialized!""); return 1; }
  if(flags && SDL_Init(flags)<0) return -1; //should only call SDL_Init if flags!=0

  _kit_coreGlobals.lock=SDL_CreateMutex();
  if(_kit_coreGlobals.lock == NULL) return -2;
  if(SDL_LockMutex(_kit_coreGlobals.lock)<0) return -3;

  _kit_coreGlobals.cores = SDL_GetCPUCount();

  _kit_coreGlobals.capabilities =SDL_HasSSE()  <<5;
  _kit_coreGlobals.capabilities|=SDL_HasSSE2() <<4;
  _kit_coreGlobals.capabilities|=SDL_HasSSE3() <<3;
  _kit_coreGlobals.capabilities|=SDL_HasSSE41()<<2;
  _kit_coreGlobals.capabilities|=SDL_HasAVX()  <<1;
  _kit_coreGlobals.capabilities|=SDL_HasAVX2()    ;

  _kit_coreGlobals.init = 1;
  if(SDL_UnlockMutex(_kit_coreGlobals.lock)<0) return -4;
  return 0;
}



int kit_coreQuit(){
  if(!_kit_coreGlobals.init){ SDL_SetError(""core is not initialized!""); return 1; }
  if(SDL_LockMutex(_kit_coreGlobals.lock)<0) return -1;

  SDL_Quit(); //this is safe to use, even if SDL was never initialized!

  _kit_coreGlobals.init = 0;
  if(SDL_UnlockMutex(_kit_coreGlobals.lock)<0) return -2;
  SDL_DestroyMutex(_kit_coreGlobals.lock);
  return 0;
}
"
1vubhJFc,kit_sdl2_kmixer.c as of 2023-10-12,Kitomas,C,Thursday 12th of October 2023 09:09:40 PM CDT,"#include ""../include/kit_sdl2/kit_kmixer.h""
#include ""../_private/include/_kit_privmacro.h""
#include ""../_private/include/_kit_coreAllPrivate.h""
#include ""../_private/include/_kit_kmixerAllPrivate.h""




#if defined(_KIT_KMIXER_DEBUG) || defined(_KIT_ALL_DEBUG)
const SDL_bool kit_kmixerIsDebug=SDL_TRUE;
#else
const SDL_bool kit_kmixerIsDebug=SDL_FALSE;
#endif




struct _kit_kmixerGlobals_t _kit_kmixerGlobals;




int kit_kmixerInit(int numDeviceThreads){
  if(!_kit_coreGlobals.init){ SDL_SetError(""core not initialized!""); return -1; }

  if(_kit_kmixerGlobals.init){ SDL_SetError(""kmixer is initialized!""); return 1; }
  if(SDL_InitSubSystem(SDL_INIT_AUDIO)<0) return -2;

  _kit_kmixerGlobals.lock=SDL_CreateMutex();
  if(_kit_kmixerGlobals.lock == NULL) return -3;
  if(SDL_LockMutex(_kit_kmixerGlobals.lock)<0) return -4;

  if(numDeviceThreads>0) _kit_kmixerGlobals.numDeviceThreads = numDeviceThreads;
  else { //MAX is used here so 0 is functionally identical to -1
    int fraction = MAX(SDL_abs(numDeviceThreads),1);
    _kit_kmixerGlobals.numDeviceThreads = MAX(_kit_coreGlobals.cores/fraction,1);
  }

  _kit_kmixerGlobals.init = 1;
  if(SDL_UnlockMutex(_kit_kmixerGlobals.lock)<0) return -5;
  return 0;
}



int kit_kmixerQuit(){
  if(!_kit_kmixerGlobals.init){ SDL_SetError(""kmixer not initialized!""); return 1; }
  if(SDL_LockMutex(_kit_kmixerGlobals.lock)<0) return -1;

  _kit_kmixerGlobals.init=0;
  if(SDL_UnlockMutex(_kit_kmixerGlobals.lock)<0) return -2;
  SDL_DestroyMutex(_kit_kmixerGlobals.lock);
  SDL_QuitSubSystem(SDL_INIT_AUDIO);
  return 0;
}
"
cGa5UFcK,kit_sdl2_kmixerAsync.c as of 2023-10-12,Kitomas,C,Thursday 12th of October 2023 09:08:55 PM CDT,"#include ""../include/kit_sdl2/kit_kmixer.h""
#include ""../_private/include/_kit_privmacro.h""
#include ""../_private/include/_kit_kmixerAllPrivate.h""
//todo: include mutexes where they should be



typedef struct _kit_kmixerAsyncTrack {
  kit_acodecPCM* pcm;
  //double
  Uint64     position;
  Uint32        index;
  Uint32    timeStamp;
  SDL_bool stopOnMute;
  Uint32     _padding;
} _kit_kmixerAsyncTrack;



//this should be contiguous with the AsyncTrack(s)
typedef struct _kit_kmixerAsyncUserdata {
  kit_kmixerVoiceSpec vspec;
  Uint32 numTracks;
  Uint32 padding;

  _kit_kmixerAsyncTrack* tracks;
} _kit_kmixerAsyncUserdata;



void _kit_kmixerAsyncRemoveCallback(void* userdata){  if(userdata != NULL) SDL_free(userdata);  }



void _kit_kmixerAsyncTrackCallback(void* userdata, void* _stream, int size, SDL_bool hasInput){
}



void _kit_kmixerAsyncVoiceCallback(void* userdata, void* _stream, int size, SDL_bool hasInput){
}




Uint32 kit_kmixerAsyncAdd(kit_kmixerDevice* device, kit_kmixerVoiceSpec* vspec,
                          Uint32 outputVoiceID, Uint32 numTracks)
{
  Uint32 newIndex = 0; //0 for error by default
  _DEVICE_VALIDITY_CHECK(0)
  _IF_SDLERR(outputVoiceID>=device->_raw->x,;,""outputVoiceID out of bounds"")
  _IF_SDLERR(numTracks==0,;,""!numTracks"")

  _IF_SDLERR(vspec==NULL,;,""!vspec"")
  vspec->remove   = _kit_kmixerAsyncRemoveCallback;
  vspec->callback = _kit_kmixerAsyncVoiceCallback;

  //(then do userdata stuff here)

  newIndex = kit_kmixerVoiceAdd(device,vspec,outputVoiceID);

  _noerr_:
  _error_:
  return newIndex;
}
"
EF46xX5J,kit_sdl2_kmixerDevice.c as of 2023-10-12,Kitomas,C,Thursday 12th of October 2023 09:06:57 PM CDT,"#include ""../include/kit_sdl2/kit_kmixer.h""
#include ""../_private/include/_kit_privmacro.h""
#include ""../_private/include/_kit_kmixerAllPrivate.h""




//500ms
#define _totalFadeDelay (0.500f)

//linearly fade over the course of 10ms
#define _fadeDeltaSeconds (0.010f)

//the most common audio clipping ends at 10-11ms after unpausing,
 //but i've seen clipping as far as ~450ms after unpausing
#define _fadeInDelaySeconds (_totalFadeDelay - _fadeDeltaSeconds)




void _kit_kmixerDeviceDoTasks(SDL_ThreadFunction task, kit_coreVector* threads_v,
                                                       kit_coreVector* threadData_v)
{
  SDL_Thread** threads        = threads_v->data;
  Uint32       threads_len    = threads_v->x;
  void**       threadData     = threadData_v->data;
  Uint32       threadData_len = VECTOR_LENS_A(threadData_v, 0,0);

  Uint32 queueLen = 0;


  for(Uint32 tdi=0; tdi<threadData_len; ++tdi){
    threads[queueLen++] = SDL_CreateThread(task,NULL,threadData[tdi]);

    if(!( queueLen%threads_len )){ //queue is full; wait for everything in queue
      for(Uint32 ti=0; ti<queueLen; ++ti) SDL_WaitThread(threads[ti],NULL);
      queueLen = 0;
    }

  }

  if(queueLen){ //wait for any left over queued threads
    for(Uint32 ti=0; ti<queueLen; ++ti) SDL_WaitThread(threads[ti],NULL);
  }
}




//workaround for having _kit_kmixerDeviceCallback pause the device,
 //without having to call SDL_PauseAudioDevice inside the callback itself
int _kit_kmixerDevicePauseThread(void* data){
  kit_kmixerDevice* device = data;

  kit_kmixerDeviceLock(device,SDL_TRUE);

  SDL_PauseAudioDevice(device->_devID,1);
  device->_playing = SDL_FALSE;

  kit_kmixerDeviceLock(device,SDL_FALSE);
  return 0;
}




void _kit_kmixerDeviceCallback(void* userdata, Uint8* _stream, int len){
  kit_coreMemset(_stream,0,len); //_stream must be completely filled no matter what
  kit_kmixerDevice* device = userdata;
  if(device->_closing) return; //exit early if device is currently being closed

  kit_kmixerDeviceLock(device,SDL_TRUE);
  //if previous attempt to pause device failed, memset 0 the entire buffer
  _IF_GOTO(device->_fadeInDelay==-1, _unlock_device,;)


  //get values from voice 0 (device proxy)
  kit_coreVector** raw_p = &device->_raw;
  _kit_kmixerVoice* voice0 = &VECTOR_INDEX_C(_kit_kmixerVoice, *raw_p, 0);
   //(also memset 0 if there are literally no voices connected to the device)
  _IF_GOTO(voice0->inputs==NULL,_unlock_device,;)
  SDL_bool stereo = voice0->spec.stereo;

  kit_coreVector* ord   = device->_ord;
  Uint32          ord_x = ord->x;
  Uint32          ord_y = ord->y;

  //adjust thread data list to accomodate new width of ord
  kit_coreVectorSet(&device->_threadData, ord_x,1,1);

  int size = len; //will stay as len's original value; the buffer size in bytes
  len /= sizeof(float)<<stereo; // = number of sample frames


  /**/

  /* //single-threaded; simplest implementation
  for(Uint32 stage=ord_y-1; stage!=U32_MAX; --stage){
    for(Uint32 index=0; index<ord_x; ++index){
      _kit_kmixerVoice* voice = VECTOR_INDEX_A(_kit_kmixerVoice*, ord, index,stage,0);

      _kit_kmixerVoiceMix(voice);
      _kit_kmixerVoiceProc(voice);
    }
  } */

  //slightly more advanced multithreaded version (which should be faster)
  for(Uint32 stage=ord_y-1; stage!=U32_MAX; --stage){
    _kit_kmixerVoice** voiceRefs = &VECTOR_INDEX_A(_kit_kmixerVoice*, ord, 0,stage,0);
    Uint32         stageVoiceLen = VECTOR_LENS_A(ord, stage,0);

    _kit_kmixerDeviceMixThreads(device, voiceRefs, stageVoiceLen);
    _kit_kmixerDeviceProcThreads(device, voiceRefs, stageVoiceLen);
  }

  /**/


  //apply linear fade to reduce popping when pausing and unpausing the device
  kit_coreMemcpy(_stream, voice0->bufferInput.data, size);
  if(   stereo) _kit_kmixerDeviceStereoFade(device, (void*)_stream, len);
  else /*mono*/ _kit_kmixerDeviceMonoFade(device, (void*)_stream, len);


  _unlock_device: kit_kmixerDeviceLock(device,SDL_FALSE);
}




int kit_kmixerDeviceLock(kit_kmixerDevice* device, SDL_bool lockState){
  _DEVICE_VALIDITY_CHECK(0)

  if(lockState){ //lock
    _IF_GOTO_ERROR(SDL_LockMutex(device->_lock),;)
    SDL_LockAudioDevice(device->_devID);
    ++device->_lockCount;

  } else if (device->_lockCount>0){ //unlock (only if actually locked)
    _IF_GOTO_ERROR(SDL_UnlockMutex(device->_lock),;)
    SDL_UnlockAudioDevice(device->_devID);
    --device->_lockCount;

  } else { //lockstate is false, but _lockcount is also 0
    return 1; //warning, technically not an error
  }

  _noerr_: return  0;
  _error_: return -1;
}




int kit_kmixerDevicePlay(kit_kmixerDevice* device, SDL_bool playState){
  _DEVICE_VALIDITY_CHECK(1)
  _IF_GOTO(device->_closing,_noerr_,;) //exit normally
  kit_kmixerDeviceLock(device,SDL_TRUE);

  //this should occur when the device callback
   //fails to trigger the pause thread
  if(device->_fadeInDelay == -1){
    SDL_PauseAudioDevice(device->_devID,1);
    device->_playing = SDL_FALSE;
    device->_fadeInDelay = 0;
  }

  device->_fadeOut = !(playState&=1);
  if(playState && !device->_playing){
    //the purpose of fadeInDelay is to mute for some samples
     //to give the sdl audio device some time to warm up,
     //otherwise artifacts start to occur
    device->_fadeInDelay = device->_spec.freq*_fadeInDelaySeconds;
    SDL_PauseAudioDevice(device->_devID,0);
  }

  kit_kmixerDeviceLock(device,SDL_FALSE);
  _noerr_: return  0;
  _error_: return -1;
}



int kit_kmixerDeviceClose(kit_kmixerDevice** device_p){
  _IF_SDLERR(device_p==NULL,;,""device_p cannot be NULL"")
  kit_kmixerDevice* device = *device_p;
  _DEVICE_VALIDITY_CHECK(1)

  device->_closing = SDL_TRUE;

  //this should pause this thread until _kit_kmixerDeviceCallback finishes
  if(device->_devID != 0) SDL_CloseAudioDevice(device->_devID);

  if(device->_raw != NULL){
    //since voice removal is recursive, removing voice 0 will remove every
     //other voice too, as every voice is connected to it in some way
    _IF_GOTO_ERROR(kit_kmixerVoiceRemove(device,0),;)
  }

  kit_coreVectorDestroy(&device->_ord);
  kit_coreVectorDestroy(&device->_raw);

  kit_coreVectorDestroy(&device->_threadData);
  kit_coreVectorDestroy(&device->_threads);

  if(device->_lock != NULL) SDL_DestroyMutex(device->_lock);

  SDL_free(device); *device_p = NULL;

  _noerr_: return  0; // 0 on success
  _error_: return -1; //-1 on failure
}




//todo: maybe at some point make voiceSpecObtained to be optional
kit_kmixerDevice* kit_kmixerDeviceOpen(const char* deviceName, int allowedChanges,
                                       const kit_kmixerVoiceSpec* voiceSpecDesired,
                                       kit_kmixerVoiceSpec* voiceSpecObtained)
{
  kit_kmixerDevice* device = NULL;
  SDL_bool success = SDL_FALSE;
  _IF_SDLERR(!_kit_kmixerGlobals.init,;,""kmixer is not initialized"")
  _IF_SDLERR(voiceSpecDesired==NULL,;,""voiceSpecDesired cannot be NULL"")
  _IF_GOTO_ERROR(kit_coreRealloc(&device,0,sizeof(kit_kmixerDevice)),;)

  device->_magic.num = _DEV_MAGIC_NUM; // = ""kmxrDev\x00""


  //fill in sdl device specification
  SDL_AudioSpec specWant, specHave;
  specWant = _kit_kmixerDeviceVoiceToAudioSpec(device, voiceSpecDesired);
  _IF_GOTO_ERROR(!specWant.format,;)


  //open the sdl audio device itself
  allowedChanges &= ~SDL_AUDIO_ALLOW_FORMAT_CHANGE;  //samples should always be f32 internally
  allowedChanges &= ~SDL_AUDIO_ALLOW_SAMPLES_CHANGE; //i want to guarantee that samples is a power of 2
  device->_devID = SDL_OpenAudioDevice(deviceName,0, &specWant,&specHave, allowedChanges);
  _IF_GOTO_ERROR(!device->_devID,;)
  _IF_SDLERR(!specHave.channels,;,""channels returned as 0"") //this shouldn't be able to happen
  _IF_SDLERR(specHave.channels>2,;,""channels returned as %i"",specHave.channels)
  _IF_SDLERR(specHave.freq<1000,;,""freq returned as <1kHz"")
  _IF_SDLERR(specHave.freq>384000,;,""freq returned as >384kHz"")
  device->_spec = specHave;


  device->_lock = SDL_CreateMutex();
  _IF_GOTO_ERROR(device->_lock==NULL,;)


  //thread and thread data lists
  device->_threads = kit_coreVectorCreate(_kit_kmixerGlobals.numDeviceThreads,1,1, sizeof(SDL_ThreadFunction),0);
  device->_threadData = kit_coreVectorCreate(1,1,1, sizeof(void*),0);
  _IF_GOTO_ERROR(device->_threads==NULL,;)
  _IF_GOTO_ERROR(device->_threadData==NULL,;)


  //voices lists-related
  device->_raw = kit_coreVectorCreate(1,1,1,sizeof(_kit_kmixerVoice),0);
  device->_ord = kit_coreVectorCreate(1,1,1,sizeof(_kit_kmixerVoice*),0);
  _IF_GOTO_ERROR(device->_raw==NULL,;)
  _IF_GOTO_ERROR(device->_ord==NULL,;)


  //fill in obtained voice
  voiceSpecObtained->remove   = voiceSpecDesired->remove; //note: might be called on abort!!!
  voiceSpecObtained->callback = voiceSpecDesired->callback;
  voiceSpecObtained->userdata = voiceSpecDesired->userdata;
  voiceSpecObtained->freq     = specHave.freq;
  voiceSpecObtained->_size    = 0; //(will be set inside kit_kmixerVoiceAdd)
  voiceSpecObtained->stereo   = specHave.channels==2;
  voiceSpecObtained->samples  = specHave.samples;
  voiceSpecObtained->format   = voiceSpecDesired->format;


  //fill in voice 0
  _IF_GOTO_ERROR(_kit_kmixerDeviceFillVoice0(device, voiceSpecObtained),;)


  device->_fadeDelta  = 1.0f/(((float)specHave.freq)*_fadeDeltaSeconds);
  device->_fadeVolume = 0.0f;


  //redundant because of the memset, but whatever
  device->_closing = SDL_FALSE;
  device->_fadeOut = SDL_FALSE;


  //create initial voice, only if format != 0
  if(voiceSpecObtained->format){
    _IF_GOTO_ERROR(!kit_kmixerVoiceAdd(device, voiceSpecObtained, 0),;)
  } else { //otherwise, just rebuild ord
    _IF_GOTO_ERROR(_kit_kmixerVoiceRebuildOrd(device),;)
  }


  success = SDL_TRUE;
  _error_: //success will remain SDL_FALSE on failure
  if(device!=NULL && !success) kit_kmixerDeviceClose(&device);
  return device; //will be null if DeviceClose is called
}




int kit_kmixerDeviceUnpauseAndWait(kit_kmixerDevice* device){
  Uint64 beforePlay = SDL_GetTicks64();
  SDL_bool wasPaused = !device->_playing;
  if(kit_kmixerDevicePlay(device,SDL_TRUE)<0) return -1;

  if(wasPaused){
    Uint32 totalDelayMS = _totalFadeDelay*1000;
    Uint32 timeDifference = SDL_GetTicks64()-beforePlay; //result might be 0, but w/e
    SDL_Delay( totalDelayMS - timeDifference );
  }
  return 0;
}



int kit_kmixerDevicePauseAndWait(kit_kmixerDevice* device){
  if(kit_kmixerDevicePlay(device,SDL_FALSE)<0) return -1;
  Uint32 fadeOutMS = _fadeDeltaSeconds*1000 * 4; //*4 seems to completely stop clipping
  do { SDL_Delay(fadeOutMS); } while(device->_playing);
  return 0;
}




#if defined(_KIT_KMIXER_DEBUG) || defined(_KIT_ALL_DEBUG)
int kit_kmixerDevice_Test(){
  SDL_SetError(""not implemented"");
  return 999;
}
#else
int kit_kmixerDevice_Test(){
  SDL_SetError(""!defined(_KIT_KMIXER_DEBUG)"");
  return 999;
}
#endif
"
DjwZ4Tuw,kit_sdl2_kmixerVoice.c as of 2023-10-12,Kitomas,C,Thursday 12th of October 2023 09:06:24 PM CDT,"#include ""../include/kit_sdl2/kit_kmixer.h""
#include ""../_private/include/_kit_privmacro.h""
#include ""../_private/include/_kit_kmixerAllPrivate.h""

/* example of simd stereo to mono without sse3's hadd
static inline void _sse1_s_to_m(float* dst, __m128 vector){
  __m128 shuffled = _mm_shuffle_ps(vector,vector, _MM_SHUFFLE(2,3,0,1));
  __m128 sum = _mm_add_ps(vector,shuffled);
  __m128 result = _mm_shuffle_ps(sum,sum, _MM_SHUFFLE(3,1,2,0));
  _mm_storel_pi((__m64*)dst,result);
}
*/


//for visual clarity during ProcChannels
 //(this could also just be an enum probably, but w/e)
#define _M_to_M (0) //  mono->mono
#define _M_to_S (1) //  mono->stereo
#define _S_to_M (2) //stereo->mono
#define _S_to_S (3) //stereo->stereo
/* i think i need to fix this
#define _MM256_SHUFFLE(c7,c6,c5,c4,c3,c2,c1,c0) \
  ((_MM_SHUFFLE(c7,c6,c5,c4)<<8)|_MM_SHUFFLE(c3,c2,c1,c0)) */



//converts u8, i16, and i32 samples to f32 samples
 //(will basically just copy input to output if input is also f32)
static inline void _kit_kmixerVoiceProcFromTypeFallback(void* _dataIn, float* dataOut,
                                                        Uint32 numSamples, SDL_AudioFormat typeIn)
{ //if nothing else works
  kit_acodecPCMSamples dataIn = { .data = _dataIn };
  float rawSample; //used for max(original_sample,-1) basically
  switch(typeIn){
  case AUDIO_U8 : for(Uint32 i=0; i<numSamples; ++i){ rawSample = (float)(dataIn.u_8[i]-0x80)*inv_i_8;
                                                      dataOut[i] = (rawSample>=-1.0f)?rawSample:-1.0f; } break;
  case AUDIO_S16: for(Uint32 i=0; i<numSamples; ++i){ rawSample = (float) dataIn.i16[i]      *inv_i16;
                                                      dataOut[i] = (rawSample>=-1.0f)?rawSample:-1.0f; } break;
  case AUDIO_S32: for(Uint32 i=0; i<numSamples; ++i){ rawSample = (float) dataIn.i32[i]      *inv_i32;
                                                      dataOut[i] = (rawSample>=-1.0f)?rawSample:-1.0f; } break;
  case AUDIO_F32: for(Uint32 i=0; i<numSamples; ++i){ dataOut[i] =        dataIn.f32[i];               } }
}
void _kit_kmixerVoiceProcFromType(void* dataIn, void* dataOut,
                                  Uint32 sampleFrames, SDL_AudioFormat typeIn, SDL_bool isStereo)
{
  Uint32 numSamples = sampleFrames<<isStereo;
  _kit_kmixerVoiceProcFromTypeFallback(dataIn,dataOut,numSamples,typeIn);
}




//converts f32 samples to u8, i16, and i32 samples
static inline void _kit_kmixerVoiceProcToTypeFallback(float* dataIn, void* _dataOut,
                                                      Uint32 numSamples, SDL_AudioFormat typeOut)
{ //if nothing else works
  kit_acodecPCMSamples dataOut = { .data = _dataOut };
  float rawSample, rawSampleB;
  switch(typeOut){
  case AUDIO_U8 : for(Uint32 i=0; i<numSamples; ++i){ rawSample      = dataIn[i];
                                                      rawSampleB     = (rawSample>=-1.0f)?rawSample:-1.0f;
                                                      dataOut.u_8[i] = (rawSampleB<=1.0f)?rawSampleB*I_8_MAX+0x80:I_8_MAX; } break;
  case AUDIO_S16: for(Uint32 i=0; i<numSamples; ++i){ rawSample      = dataIn[i];
                                                      rawSampleB     = (rawSample>=-1.0f)?rawSample:-1.0f;
                                                      dataOut.i16[i] = (rawSampleB<=1.0f)?rawSampleB*I16_MAX:I16_MAX; } break;
  case AUDIO_S32: for(Uint32 i=0; i<numSamples; ++i){ rawSample      = dataIn[i];
                                                      rawSampleB     = (rawSample>=-1.0f)?rawSample:-1.0f;
                                                      dataOut.i32[i] = (rawSampleB<=1.0f)?rawSampleB*I32_MAX:I32_MAX; } break;
  case AUDIO_F32: for(Uint32 i=0; i<numSamples; ++i){ rawSample      = dataIn[i];
                                                      rawSampleB     = (rawSample>=-1.0f)?rawSample:-1.0f;
                                                      dataOut.f32[i] = (rawSampleB<=1.0f)?rawSampleB:1.0f; } }
}
void _kit_kmixerVoiceProcToType(void* dataIn, void* dataOut,
                                Uint32 sampleFrames, SDL_AudioFormat typeOut, SDL_bool isStereo)
{
  Uint32 numSamples = sampleFrames<<isStereo;
  _kit_kmixerVoiceProcToTypeFallback(dataIn,dataOut,numSamples,typeOut);
}




//assumes samples are f32
static inline void _kit_kmixerVoiceProcChannelsFallback(float* dataInM, float* dataOutM,
                                                        Uint32 sampleFrames, int channelInfo)
{ //if nothing else works
  kit_acodecPCM_F32S* dataInS  = (void*)dataInM;
  kit_acodecPCM_F32S* dataOutS = (void*)dataOutM;
  switch(channelInfo){
  case _M_to_S: for(Uint32 i=0; i<sampleFrames; ++i){ dataOutS[i].l=dataOutS[i].r = dataInM[i]; } break;
  case _S_to_M: for(Uint32 i=0; i<sampleFrames; ++i){ dataOutM[i] = (dataInS[i].l+dataInS[i].r)*0.5f; } break;
  case _S_to_S: sampleFrames<<=1; SDL_FALLTHROUGH; //multiply mono by 2 to make length of stereo
  case _M_to_M: for(Uint32 i=0; i<sampleFrames; ++i){ dataOutM[i] = dataInM[i]; }
  }
}
void _kit_kmixerVoiceProcChannels(void* dataIn, void* dataOut, Uint32 sampleFrames, int channelInfo){
  _kit_kmixerVoiceProcChannelsFallback(dataIn,dataOut, sampleFrames,channelInfo);
}




#define _CH_INFO(a,b) (((a)<<1)|(b))
//assumes input AND output samples are f32 (intermediate type is determined by the given voice)
int _kit_kmixerVoiceProc(void* data){ //(this is an SDL_ThreadFunction)
  _kit_kmixerVoice* voice = data;
  if(voice == NULL) return 1; //skip if voice is NULL
  if(voice->lock == NULL) return 2; //skip if voice was removed
  if(voice->output == U32_MAX) return 3; //skip if voice is voice 0
  SDL_LockMutex(voice->lock);


  void *ibuffer  = voice->bufferInput.data,  *obuffer = voice->bufferOutput.data;
  void *ubuffer  = voice->bufferUser.data,   *cbuffer = voice->bufferConvert.data;
  void *userdata = voice->spec.userdata,  *_stream = ubuffer;
   ///
  SDL_bool hasInput = voice->inputs!=NULL;
  SDL_bool ustereo  = voice->spec.stereo;
  SDL_bool ostereo  = voice->stereoOutput;
   ///
  SDL_AudioFormat uformat = voice->spec.format;
  Uint32           frames = voice->spec.samples;
  Uint32     ubuffer_size = voice->spec._size;


  //convert (if necessary) input type (format) from f32
  int userTypeIsF32 = uformat==AUDIO_F32;
  if(userTypeIsF32) _stream = ibuffer; //input and user are identical; just reroute
  else _kit_kmixerVoiceProcToType(ibuffer, ubuffer, frames,uformat,ustereo);


  //the actual user callback
  voice->spec.callback(userdata, _stream, ubuffer_size, hasInput);


  //convert (if necessary) to f32 and channels, sending result to output
  int sameChannels = ustereo==ostereo;
  if(sameChannels){ //convert type (or just copy contents if _stream is f32)
    _kit_kmixerVoiceProcFromType(_stream,obuffer, frames,uformat,ustereo);

  } else if(userTypeIsF32){ //convert channels
    _kit_kmixerVoiceProcChannels(_stream,obuffer, frames,_CH_INFO(ustereo,ostereo));

  } else { //convert type and channels
    _kit_kmixerVoiceProcFromType(_stream,cbuffer, frames,uformat,ustereo);
    _kit_kmixerVoiceProcChannels(cbuffer,obuffer, frames,_CH_INFO(ustereo,ostereo));

  }


  SDL_UnlockMutex(voice->lock);
  return 0;
}




//assumes all samples are f32
//if nothing else works
static inline void _kit_kmixerVoiceMixFallback(_kit_kmixerVoice* voiceO){
  kit_coreVector**  raw_p = &voiceO->device->_raw;
  _kit_kmixerVoice* raw   = (*raw_p)->data;

  Uint32*              inputs      = voiceO->inputs->data;
  Uint32               inputs_len  = voiceO->inputs->x;
  kit_acodecPCM_F32S*  samplesO    = voiceO->bufferInput.f32s;
  Uint32               samples_len = voiceO->spec.samples;

  size_t bufferSize = (samples_len*sizeof(float))<<voiceO->spec.stereo;
  kit_coreMemset(voiceO->bufferInput.data, 0, bufferSize);
  //so stereo volume can apply even to a mono stream
  samples_len >>= !voiceO->spec.stereo;


  for(Uint32 v=0; v<inputs_len; ++v){
    _kit_kmixerVoice* voiceI = &raw[ inputs[v] ];
    if(voiceI->lock == NULL){ inputs[v] = 0; continue; }
    SDL_LockMutex(voiceI->lock);
    kit_acodecPCM_F32S* samplesI = voiceI->bufferOutput.f32s;

    float volL = CLAMP(voiceI->volL, 0.0f,1.0f);
    float volR = MIN(voiceI->volR, 1.0f);
    if(!voiceI->stereoOutput || volR<0) volR = volL;

    if(     volL==0.0f && volR==0.0f) continue; //volume is muted; skip
    else if(volL==1.0f && volR==1.0f) goto _normal_volume; //because sample*1=sample
    else if(volL>=0.0f){
      for(Uint32 i=0; i<samples_len; ++i){
        samplesO[i].l += samplesI[i].l*volL;
        samplesO[i].r += samplesI[i].r*volR;
      }

    } else { _normal_volume:
      for(Uint32 i=0; i<samples_len; ++i){
        samplesO[i].l += samplesI[i].l;
        samplesO[i].r += samplesI[i].r;
      }

    }

    SDL_UnlockMutex(voiceI->lock);
  }


  //hard clip output samples to between -1.0f and 1.0f
  for(Uint32 i=0; i<samples_len; ++i){
    float sampleL = samplesO[i].l;
    float sampleR = samplesO[i].r;
    samplesO[i].l = CLAMP(sampleL, -1.0f,1.0f);
    samplesO[i].r = CLAMP(sampleR, -1.0f,1.0f);
  }
}
//(this should only be called if the voice has inputs)
int _kit_kmixerVoiceMix(void* data){ //(this is an SDL_ThreadFunction)
  _kit_kmixerVoice* voiceO = data;
  if(voiceO == NULL) return 1; //skip if the voice is NULL
  if(voiceO->lock == NULL) return 2; //skip in case voice was removed

  SDL_LockMutex(voiceO->lock);
  //don't mix if voice has no inputs...
  if(voiceO->inputs == NULL){
    size_t bufferSize = (voiceO->spec.samples*sizeof(float)) << voiceO->spec.stereo;
    //...but still make sure the input buffer is zeroed out
    kit_coreMemset(voiceO->bufferInput.data, 0, bufferSize);
    SDL_UnlockMutex(voiceO->lock);
    return 3;
  }

  _kit_kmixerVoiceMixFallback(voiceO);

  SDL_UnlockMutex(voiceO->lock);
  return 0;
}




///used to check whether an element in the raw voice list is valid or not
SDL_bool _kit_kmixerVoiceRawUnitCallback(void* unit, Uint32 size){
  _kit_kmixerVoice* voice = unit;
  return voice->lock == NULL;
}



//same thing, but with an element in ord instead of raw
SDL_bool _kit_kmixerVoiceOrdUnitCallback(void* unit, Uint32 size){
  _kit_kmixerVoice** voice_p = unit;
  if(*voice_p == NULL) return SDL_TRUE;
  return (*voice_p)->lock == NULL;
}




//should be called when voices are created, destroyed, or altered
int _kit_kmixerVoiceRebuildOrd(kit_kmixerDevice* device){
  kit_coreVector* ord_new = NULL;
  kit_coreVector**  ord_p = &device->_ord;
  kit_coreVector**  raw_p = &device->_raw;

  _kit_kmixerVoice* raw = (*raw_p)->data;
  Uint32      numVoices = (*raw_p)->x;

  Uint32  hiStageLen =    0; //ord->x
  Uint32  hiStage    =    0; //ord->y
  Uint32* stageLens  = NULL; //temporary space for stage lengths


  //find highest chain stage (for ord's y axis)
  for(Uint32 v=0; v<numVoices; ++v){
    if(raw[v].lock == NULL) continue; //skip any removed voice
    if(hiStage < raw[v].chainStage) hiStage = raw[v].chainStage;
  }
  ++hiStage; //should now equal ord->y


  //find highest index of a chain stage (for ord's x axis)
  _IF_SDLERR(kit_coreRealloc(&stageLens,0,hiStage*sizeof(Uint32)),;,""!stageLens"")
  for(Uint32 v=0; v<numVoices; ++v){
    if(raw[v].lock == NULL) continue; //skip any removed voice
    Uint32 stageLen = ++stageLens[raw[v].chainStage];
    if(hiStageLen < stageLen) hiStageLen = stageLen;
  }
  SAFE_FREE(stageLens);
  if(!hiStageLen) hiStageLen = 1; //vectors can't have sizes of 0


  //create new ord vector with new dimensions
  ord_new = kit_coreVectorCreate(hiStageLen,hiStage,1, sizeof(_kit_kmixerVoice*),0);
  _IF_SDLERR(ord_new==NULL,;,""!ord_new"")
  kit_coreVectorDestroy(ord_p); //doink the old one
  *ord_p = ord_new;


  //fill ord with new references from raw
  for(Uint32 v=0; v<numVoices; ++v){
    if(raw[v].lock == NULL) continue; //skip any removed voice
    _kit_kmixerVoice* voiceRef = &raw[v];
    Uint32 chainStage = voiceRef->chainStage;
    _IF_GOTO_ERROR(kit_coreVectorInsert(ord_p, &voiceRef, chainStage,0,
                                        _kit_kmixerVoiceOrdUnitCallback)==U32_MAX,;)
  }


  /*!err*/ return  0;
  _error_: return -1;
}




//assumes device is already locked
int _kit_kmixerVoiceRemoveInput(kit_kmixerDevice* device,
                                Uint32 outputID, Uint32 inputID)
{
  kit_coreVector**   raw_p = &device->_raw;
  _kit_kmixerVoice* voiceO = &VECTOR_INDEX_C(_kit_kmixerVoice, *raw_p, outputID);
  Uint32* inputs     = voiceO->inputs->data;
  Uint32  inputs_len = voiceO->inputs->x;

  _IF_GOTO_ERROR(SDL_LockMutex(voiceO->lock),;)


  //remove input voice from output voice's input list
  for(Uint32 v=0; v<inputs_len; ++v){
    if(inputs[v] == inputID){
      inputs[v] = 0; break;
    }
  }


  //trim input list to make sure only active inputs are included
  _IF_GOTO_ERROR(kit_coreVectorTrim(&voiceO->inputs,'x',NULL),;)
  //destroy input list if all inputs have been removed
  if(!voiceO->inputs->lens[0]) kit_coreVectorDestroy(&voiceO->inputs);


  _IF_GOTO_ERROR(SDL_UnlockMutex(voiceO->lock),;)

  /*!err*/ return  0;
  _error_: return -1;
}



//device, input voice and output voice are locked here
 //(also, input voice's lock should be created before calling this)
int _kit_kmixerVoiceAddInput(kit_kmixerDevice* device,
                             Uint32 inputID, Uint32 outputID)
{
  kit_coreVector**   raw_p = &device->_raw;
  _kit_kmixerVoice* voiceI = &VECTOR_INDEX_C(_kit_kmixerVoice, *raw_p, inputID);
  _kit_kmixerVoice* voiceO = &VECTOR_INDEX_C(_kit_kmixerVoice, *raw_p, outputID);


  //set input voice accordingly
  _IF_GOTO_ERROR(SDL_LockMutex(voiceI->lock),;)

  voiceI->output       = voiceO->index; // = outputID basically
  //set chain processing stage one higher,
   //to ensure this voice is processed before the output
  voiceI->chainStage   = voiceO->chainStage+1;
  voiceI->stereoOutput = voiceO->spec.stereo;

  _IF_GOTO_ERROR(SDL_UnlockMutex(voiceI->lock),;)


  //create input list in output voice if it's NULL
  if(voiceO->inputs == NULL){
    voiceO->inputs = kit_coreVectorCreate(1,1,1, sizeof(Uint32),0);
    _IF_GOTO_ERROR(voiceO->inputs==NULL,;)
  }


  //add input to the output voice's input list
  _IF_GOTO_ERROR(SDL_LockMutex(voiceO->lock),;)

   //first, check to see if input is already in the list...
  Uint32* inputs     = voiceO->inputs->data;
  Uint32  inputs_len = voiceO->inputs->x;
  SDL_bool found = SDL_FALSE;
  for(Uint32 i=0; i<inputs_len; ++i){
    if(inputs[i] == inputID){
      found = SDL_TRUE; break;
    }
  }

   //...inserting only if the input was not found in the list
  if(!found) _IF_GOTO_ERROR(kit_coreVectorInsert(&voiceO->inputs, &inputID, 0,0, NULL)==U32_MAX,;)

  _IF_GOTO_ERROR(SDL_UnlockMutex(voiceO->lock),;)


  /*!err*/ return  0;
  _error_: return -1;
}




int kit_kmixerVoiceRemove(kit_kmixerDevice* device, Uint32 voiceID){
  _DEVICE_VALIDITY_CHECK(0)
  //only allow voice 0 to be removed when device->_closing is set
  _IF_SDLERR(!voiceID && !device->_closing,;,""cannot remove voice 0"")

  //if bit 31 is set, call is assumed to be the result of recursion
  SDL_bool rootCall = (!(voiceID&U32_MSb)) ? SDL_TRUE : SDL_FALSE;
  voiceID &= I32_MAX; //unset bit 31 now that rootCall is set


  kit_coreVector**   raw_p = &device->_raw;
  _IF_SDLERR(voiceID>=(*raw_p)->x,;,""voiceID out of bounds"")
  _kit_kmixerVoice* voiceI = &VECTOR_INDEX_C(_kit_kmixerVoice, *raw_p, voiceID);
  _IF_GOTO(voiceI->lock==NULL,_noerr_,;) //return normally if voice already removed
  _IF_GOTO_ERROR(SDL_LockMutex(voiceI->lock),;)


  //loop through and remove any inputs the voice might have (recursive)
  if(voiceI->inputs != NULL){
    Uint32*    inputs     = voiceI->inputs->data;
    Uint32     inputs_len = voiceI->inputs->x;
    _kit_kmixerVoice* raw = (*raw_p)->data;

    for(Uint32 i=0; i<inputs_len; ++i){
      Uint32 index = inputs[i];
      if(!index) continue; //an index of 0 indicates a voice that was already removed
      if(raw[index].lock != NULL) //(bit 31 is set to indicate recursion)
        _IF_GOTO_ERROR(kit_kmixerVoiceRemove(device,U32_MSb|index),;)
    }

    //(kit_coreVectorDestroy automatically sets pointer to NULL)
    _IF_GOTO_ERROR(kit_coreVectorDestroy(&voiceI->inputs),;)
  }


  //free buffers
  SAFE_FREE(voiceI->bufferInput.data);
  SAFE_FREE(voiceI->bufferUser.data);
  SAFE_FREE(voiceI->bufferConvert.data);
  SAFE_FREE(voiceI->bufferOutput.data);


  //call the user's 'userdata removal' callback
  if(voiceI->spec.remove != NULL) voiceI->spec.remove(voiceI->spec.userdata);


  //destroy lock
  _IF_GOTO_ERROR(SDL_UnlockMutex(voiceI->lock),;)
  SDL_DestroyMutex(voiceI->lock);
  voiceI->lock       = NULL; //a mutex of NULL indicates a removed voice
  voiceI->chainStage =    0; //(as to not confuse VoiceRebuildOrd)


  if(rootCall){ //if this call is not the result of recursion
    if(!device->_closing) kit_kmixerDeviceLock(device, SDL_TRUE);

    //trim raw and rebuild ord
    _IF_GOTO_ERROR(kit_coreVectorTrim(raw_p,'x',_kit_kmixerVoiceRawUnitCallback),;)
    _IF_GOTO_ERROR(_kit_kmixerVoiceRebuildOrd(device),;)

    //remove input from output's input list
    Uint32 outputID = VECTOR_INDEX_C(_kit_kmixerVoice, *raw_p, voiceID).output;

    if(outputID != U32_MAX){ //(only if output != -1, which should only be possible for voice 0)
      _IF_GOTO_ERROR(_kit_kmixerVoiceRemoveInput(device, outputID,voiceID),
                     kit_kmixerDeviceLock(device, SDL_FALSE))
    }

    if(!device->_closing) kit_kmixerDeviceLock(device, SDL_FALSE);
  }


  _noerr_: return  0;
  _error_: return -1;
}



Uint32 kit_kmixerVoiceAdd(kit_kmixerDevice* device, kit_kmixerVoiceSpec* vspec,
                          Uint32 outputVoiceID)
{
  Uint32 newIndex = 0; //0 for error by default
  _kit_kmixerVoice  voice  = { .lock = NULL }; //voice struct to be copied to raw
  _kit_kmixerVoice* voiceI = NULL; //reference to voice inside raw

  SDL_bool inRaw   = SDL_FALSE; //set to true if successfully inserted into raw
  SDL_bool success = SDL_FALSE;
  SDL_bool locked  = SDL_FALSE;
  _DEVICE_VALIDITY_CHECK(0)
  _IF_SDLERR(vspec==NULL,;,""!vspec"")

  _IF_SDLERR(vspec->callback==NULL,;,""!vspec->callback"")
  _IF_GOTO_ERROR(kit_kmixerDeviceLock(device, SDL_TRUE)<0,;)
  locked = SDL_TRUE;

  //get reference to output voice
  kit_coreVector** raw_p = &device->_raw;
  _IF_SDLERR(outputVoiceID>I32_MAX,;,""outputVoiceID < 0"")
  _IF_SDLERR(outputVoiceID>=(*raw_p)->x,;,""outputVoiceID out of bounds"")
  _kit_kmixerVoice* voiceO = &VECTOR_INDEX_C(_kit_kmixerVoice, *raw_p, outputVoiceID);
  _IF_SDLERR(voiceO->lock==NULL,;,""output voice is nonexistent"")


  //fill in info for voice spec and the voice struct itself
  _IF_GOTO_ERROR(_kit_kmixerVoiceAddFillSpec(device, vspec),;)
  _IF_GOTO_ERROR(_kit_kmixerVoiceAddFillVoice(vspec, voiceO, &voice),;)
  voice.device = device; //the only thing not filled in by FillVoice


  //add voice to raw
  newIndex = kit_coreVectorInsert(raw_p, &voice, 0,0, _kit_kmixerVoiceRawUnitCallback);
  _IF_GOTO_ERROR(newIndex==U32_MAX,;)
  voiceI = &VECTOR_INDEX_C(_kit_kmixerVoice, *raw_p, newIndex);
  voiceI->index = newIndex;
  inRaw = SDL_TRUE;


  //add voice to output's input list
  _IF_GOTO_ERROR(_kit_kmixerVoiceAddInput(device, newIndex, outputVoiceID),;)


  //finally, rebuild ord to reflect new state of raw
  _IF_GOTO_ERROR(_kit_kmixerVoiceRebuildOrd(device),;)

  _noerr_:
  success = SDL_TRUE;
  _error_:
  if(!success){
    if(!inRaw) voiceI = &voice;

    if(voiceI->lock != NULL) SDL_DestroyMutex(voiceI->lock);
    kit_coreVectorDestroy(&voiceI->inputs);
    SAFE_FREE(voiceI->bufferInput.data);
    SAFE_FREE(voiceI->bufferUser.data);
    SAFE_FREE(voiceI->bufferConvert.data);
    SAFE_FREE(voiceI->bufferOutput.data);
    voiceI->lock = NULL;

    //(make newIndex indicate an error again, regardless of its prev. value)
    newIndex = 0;
  }
  if(locked) kit_kmixerDeviceLock(device, SDL_FALSE);
  return newIndex;
}




//updates a voice's chain stage after redirecting
void _kit_kmixerVoiceCascadeChainStage(kit_kmixerDevice* device, Uint32 voiceID){
  _kit_kmixerVoice* raw = device->_raw->data;
  _kit_kmixerVoice* voiceI = &raw[voiceID];
  _kit_kmixerVoice* voiceO = &raw[voiceI->output];

  //set input voice's chain stage to one higher than the output
  voiceI->chainStage = voiceO->chainStage+1;

  //if input voice itself has inputs, call VoiceCascade on all of them
   //(this should be recursive)
  if(voiceI->inputs != NULL){
    Uint32* inputs     = voiceI->inputs->data;
    Uint32  inputs_len = voiceI->inputs->x;
    for(Uint32 i=0; i<inputs_len; ++i){
      if(!inputs[i]) continue; //skip any invalid or removed voice
      _kit_kmixerVoiceCascadeChainStage(device,inputs[i]);
    }
  }
}



int kit_kmixerVoiceRedirect(kit_kmixerDevice* device,
                            Uint32 inputVoiceID, Uint32 outputVoiceID)
{
  int returnStatus = 0;
  SDL_bool locked = SDL_FALSE;
  _DEVICE_VALIDITY_CHECK(0)
  _IF_GOTO_ERROR(kit_kmixerDeviceLock(device, SDL_TRUE)<0,;)
  locked = SDL_TRUE;

  kit_coreVector** raw_p = &device->_raw;
  _IF_SDLERR(!inputVoiceID,;,""cannot redirect voice 0"")
  _IF_SDLERR( inputVoiceID>I32_MAX,;,""inputVoiceID < 0"")
  _IF_SDLERR(outputVoiceID>I32_MAX,;,""outputVoiceID < 0"")
  _IF_SDLERR( inputVoiceID>=(*raw_p)->x,;,""inputVoiceID out of bounds"")
  _IF_SDLERR(outputVoiceID>=(*raw_p)->x,;,""outputVoiceID out of bounds"")
  _kit_kmixerVoice* voiceI = &VECTOR_INDEX_C(_kit_kmixerVoice, *raw_p, inputVoiceID);
  _kit_kmixerVoice* voiceO = &VECTOR_INDEX_C(_kit_kmixerVoice, *raw_p, outputVoiceID);
  _IF_SDLERR(voiceI->lock==NULL,;,""input voice is nonexistent"")
  _IF_SDLERR(voiceO->lock==NULL,;,""output voice is nonexistent"")
  _IF_SDLERR(voiceO->output==inputVoiceID,;,""output can't be circular"")
  Uint32 outputVoiceID_old = voiceI->output;


  //disconnect from the old output, before connecting to the new output
  _IF_GOTO_ERROR(_kit_kmixerVoiceRemoveInput(device, outputVoiceID_old, inputVoiceID),;)
  _IF_GOTO_ERROR(_kit_kmixerVoiceAddInput(device, inputVoiceID, outputVoiceID),;)


  //update every chainStage value up the voice chain,
   //to accomodate the stage of the new output
  _kit_kmixerVoiceCascadeChainStage(device,inputVoiceID);


  //update ord to reflect changes
  _IF_GOTO_ERROR(_kit_kmixerVoiceRebuildOrd(device),;)


  _noerr_: ++returnStatus;
  _error_: --returnStatus;
  if(locked) _IF_GOTO_ERROR(kit_kmixerDeviceLock(device, SDL_FALSE)<0,;)
  return returnStatus;
}




_kit_kmixerVoice* _kit_kmixerVoiceQuery(kit_kmixerDevice* device, Uint32 voiceID, SDL_bool lock){
  _kit_kmixerVoice* voice;
  _IF_SDLERR(device==NULL,;,""device cannot be NULL"")
  _IF_SDLERR(device->_magic.num!=_DEV_MAGIC_NUM,;,""invalid device struct"")

  _IF_SDLERR(voiceID>=device->_raw->x,;,""voiceID out of bounds"")
  voice = &VECTOR_INDEX_C(_kit_kmixerVoice, device->_raw, voiceID);
  if(lock && SDL_LockMutex(voice->lock)<0) voice = NULL;

  _error_:
  return voice;
}




Uint32 kit_kmixerVoiceGetNumInputs(kit_kmixerDevice* device, Uint32 voiceID){
  _kit_kmixerVoice* voice = _kit_kmixerVoiceQuery(device, voiceID, SDL_FALSE);
  _IF_GOTO_ERROR(voice==NULL,;)
  if(voice->inputs == NULL) return 0;
  /*!err*/ return voice->inputs->x;
  _error_: return U32_MAX;
}



kit_coreVector* kit_kmixerVoiceGetInputs(kit_kmixerDevice* device, Uint32 voiceID){
  kit_coreVector* inputs = NULL;
  _kit_kmixerVoice* voice = _kit_kmixerVoiceQuery(device, voiceID, SDL_FALSE);
  _IF_GOTO_ERROR(voice==NULL,;)

  _IF_SDLERR(voice->inputs==NULL,;,""no inputs found"")
  inputs = kit_coreVectorCopy(voice->inputs);

  _error_:
  return inputs;
}



Uint32 kit_kmixerVoiceGetOutput(kit_kmixerDevice* device, Uint32 voiceID){
  _kit_kmixerVoice* voice = _kit_kmixerVoiceQuery(device, voiceID, SDL_FALSE);
  _IF_GOTO_ERROR(voice==NULL,;)
  _IF_SDLERR(voice->output==U32_MAX,;,""voice 0 has no output!"")
  /*!err*/ return voice->output;
  _error_: return U32_MAX;
}




Uint32 kit_kmixerVoiceGetTimeStamp(kit_kmixerDevice* device, Uint32 voiceID){
  _kit_kmixerVoice* voice = _kit_kmixerVoiceQuery(device, voiceID, SDL_FALSE);
  _IF_GOTO_ERROR(voice==NULL,;)
  /*!err*/ return voice->timeStamp;
  _error_: return U32_MAX;
}



Uint32 kit_kmixerVoiceGetChainStage(kit_kmixerDevice* device, Uint32 voiceID){
  _kit_kmixerVoice* voice = _kit_kmixerVoiceQuery(device, voiceID, SDL_FALSE);
  _IF_GOTO_ERROR(voice==NULL,;)
  /*!err*/ return voice->chainStage;
  _error_: return U32_MAX;
}




kit_kmixerVoiceSpec kit_kmixerVoiceGetSpec(kit_kmixerDevice* device, Uint32 voiceID){
  kit_kmixerVoiceSpec vspec = {0};
  _kit_kmixerVoice* voice = _kit_kmixerVoiceQuery(device, voiceID, SDL_FALSE);
  _IF_GOTO_ERROR(voice==NULL,;)

  vspec = voice->spec;

  _error_:
  return vspec;
}



int kit_kmixerVoiceSetSpecRemove(kit_kmixerDevice* device, Uint32 voiceID,
                                 kit_kmixerVoiceRemoveCallback remove)
{
  _kit_kmixerVoice* voice = _kit_kmixerVoiceQuery(device, voiceID, SDL_TRUE);
  _IF_GOTO_ERROR(voice==NULL,;)

  voice->spec.remove = remove;

  _IF_GOTO_ERROR(SDL_UnlockMutex(voice->lock)<0,;)
  /*!err*/ return  0;
  _error_: return -1;
}



int kit_kmixerVoiceSetSpecCallback(kit_kmixerDevice* device, Uint32 voiceID,
                                   kit_kmixerVoiceCallback callback)
{
  //(remove and userdata can be NULL, but the voice callback itself cannot)
  _IF_SDLERR(callback==NULL,;,""!callback"")
  _kit_kmixerVoice* voice = _kit_kmixerVoiceQuery(device, voiceID, SDL_TRUE);
  _IF_GOTO_ERROR(voice==NULL,;)

  voice->spec.callback = callback;

  _IF_GOTO_ERROR(SDL_UnlockMutex(voice->lock)<0,;)
  /*!err*/ return  0;
  _error_: return -1;
}



int kit_kmixerVoiceSetSpecUserdata(kit_kmixerDevice* device, Uint32 voiceID, void* userdata){
  _kit_kmixerVoice* voice = _kit_kmixerVoiceQuery(device, voiceID, SDL_TRUE);
  _IF_GOTO_ERROR(voice==NULL,;)

  voice->spec.userdata = userdata;

  _IF_GOTO_ERROR(SDL_UnlockMutex(voice->lock)<0,;)
  /*!err*/ return  0;
  _error_: return -1;
}




float kit_kmixerVoiceGetVolL(kit_kmixerDevice* device, Uint32 voiceID){
  _kit_kmixerVoice* voice = _kit_kmixerVoiceQuery(device, voiceID, SDL_FALSE);
  _IF_GOTO_ERROR(voice==NULL,;)
  /*!err*/ return voice->volL;
  _error_: return NAN;
}



float kit_kmixerVoiceGetVolR(kit_kmixerDevice* device, Uint32 voiceID){
  _kit_kmixerVoice* voice = _kit_kmixerVoiceQuery(device, voiceID, SDL_FALSE);
  _IF_GOTO_ERROR(voice==NULL,;)
  /*!err*/ return voice->volR;
  _error_: return NAN;
}



int kit_kmixerVoiceSetVolL(kit_kmixerDevice* device, Uint32 voiceID, float volL){
  _kit_kmixerVoice* voice = _kit_kmixerVoiceQuery(device, voiceID, SDL_TRUE);
  _IF_GOTO_ERROR(voice==NULL,;)

  voice->volL = volL;

  _IF_GOTO_ERROR(SDL_UnlockMutex(voice->lock)<0,;)
  /*!err*/ return  0;
  _error_: return -1;
}



int kit_kmixerVoiceSetVolR(kit_kmixerDevice* device, Uint32 voiceID, float volR){
  _kit_kmixerVoice* voice = _kit_kmixerVoiceQuery(device, voiceID, SDL_TRUE);
  _IF_GOTO_ERROR(voice==NULL,;)

  voice->volR = volR;

  _IF_GOTO_ERROR(SDL_UnlockMutex(voice->lock)<0,;)
  /*!err*/ return  0;
  _error_: return -1;
}



int kit_kmixerVoiceSetVolume(kit_kmixerDevice* device, Uint32 voiceID, float volL, float volR){
  _kit_kmixerVoice* voice = _kit_kmixerVoiceQuery(device, voiceID, SDL_TRUE);
  _IF_GOTO_ERROR(voice==NULL,;)

  voice->volL = volL;
  voice->volR = volR;

  _IF_GOTO_ERROR(SDL_UnlockMutex(voice->lock)<0,;)
  /*!err*/ return  0;
  _error_: return -1;
}




#if defined(_KIT_KMIXER_DEBUG) || defined(_KIT_ALL_DEBUG)
void _kit_kmixerVoice_TestCallback(void* userdata, void* _stream, int size, SDL_bool hasInput){
}
/*
because kmixer compiles with -O3, i get this error if i attempt to compile the test:
""warning:  may be used uninitialized in this function [-Wmaybe-uninitialized]|""
i have very little doubt that this is a bug, so i can't do much about it other than
turn down optimization for this specific function
*/
//(for some reason, it started working again after i added some seemingly
 //unrelated stuff, so i'll comment this out for now)
//__attribute__((optimize(""-O0"")))
int kit_kmixerVoice_Test(){
  float bufferInputA[16], bufferUserA[16], bufferConvertA[16], bufferOutputA[16];
  float bufferInputB[16], bufferUserB[16], bufferConvertB[16], bufferOutputB[16];
  float bufferInputC[16], bufferUserC[16], bufferConvertC[16], bufferOutputC[16];


  _kit_kmixerVoice voiceA={
    .spec={
      .callback = _kit_kmixerVoice_TestCallback,
      .userdata = NULL,
      .freq     = 44100,
      ._size    = 16*sizeof(float),
      .stereo   = SDL_FALSE,
      .samples  = 16,
      .format   = AUDIO_F32
    },

    .bufferInput   = { .data=bufferInputA   },
    .bufferUser    = { .data=bufferUserA    },
    .bufferConvert = { .data=bufferConvertA },
    .bufferOutput  = { .data=bufferOutputA  },

    .inputs = NULL,
    .lock   = NULL,

    .chainStage = 2,
    .index      = 3,

    .volL = 1.0f,
    .volR = 1.0f,

    .stereoOutput = SDL_FALSE,
  };

  _kit_kmixerVoice voiceB={
    .spec={
      .callback = _kit_kmixerVoice_TestCallback,
      .userdata = NULL,
      .freq     = 44100,
      ._size    = 16*sizeof(float),
      .stereo   = SDL_FALSE,
      .samples  = 16,
      .format   = AUDIO_F32
    },

    .bufferInput   = { .data=bufferInputB   },
    .bufferUser    = { .data=bufferUserB    },
    .bufferConvert = { .data=bufferConvertB },
    .bufferOutput  = { .data=bufferOutputB  },

    .inputs = NULL,
    .lock   = NULL,

    .chainStage = 2,
    .index      = 2,

    .volL = 1.0f,
    .volR = 1.0f,

    .stereoOutput = SDL_FALSE,
  };

  _kit_kmixerVoice voiceC={
    .spec={
      .callback = _kit_kmixerVoice_TestCallback,
      .userdata = NULL,
      .freq     = 44100,
      ._size    = 16*sizeof(float),
      .stereo   = SDL_FALSE,
      .samples  = 16,
      .format   = AUDIO_F32
    },

    .bufferInput   = { .data=bufferInputC   },
    .bufferUser    = { .data=bufferUserC    },
    .bufferConvert = { .data=bufferConvertC },
    .bufferOutput  = { .data=bufferOutputC  },

    .inputs = NULL,
    .lock   = NULL,

    .chainStage = 1,
    .index      = 1,

    .volL = 1.0f,
    .volR = 1.0f,

    .stereoOutput = SDL_FALSE,
  };


  //example streams
  Uint8  u_8_A[16]={0x00,0x3F,0x10,0x80,0xFF,0x4E,0x24,0x6D,0x21,0xFE,0xED,0x86,0x3A,0xAB,0xDA,0x4C};
  Sint16 i16_A[16]={-32768,13106,-16384,6553,32767,2553,-26214,25937,22337,-13102,9553,-32467,-9830,0,-19661,-22938};
  Sint32 i32_A[16]={-2147483648,2147483647,2,547760950,-978102134,-1901782676,973752665,-2054956051,-1793070550,2100284199,1386177656,-70287364,-799099289,-594127329,1025429360,-570645197};
  float  f32_A[16]={ 0.8,-0.2, 0.0,-0.6,-0.6, 0.4, 1.0, 2.0, 0.6, 0.9, 0.8, 0.3, 0.6,-1.4,-0.1, 0.1};
  float  f32_B[16]={-0.1,-0.4, 0.1, 0.3,-0.6, 0.6, 0.6,-0.6,-0.1, 0.2,-0.2, 0.8, 0.4, 0.8, 0.4, 0.7};


  //test to and from type conversion
   //u_8
  SDL_memcpy(voiceA.bufferUser.u_8, u_8_A, 16*sizeof(Uint8));
  _kit_kmixerVoiceProcFromType(voiceA.bufferUser.u_8,voiceA.bufferConvert.f32, 16,AUDIO_U8,SDL_FALSE);
  _kit_kmixerVoiceProcToType(voiceA.bufferConvert.f32,voiceA.bufferUser.u_8, 16,AUDIO_U8,SDL_FALSE);
  for(Uint32 i=0; i<16; ++i){
    if(voiceA.bufferUser.u_8[i] != MAX(u_8_A[i],1)){
      SDL_SetError(""u_8 type conv. (%u:%X!=%X)"",
        i, voiceA.bufferUser.u_8[i], MAX(u_8_A[i],1) ); return -999;
    }
  }
   //i16
  SDL_memcpy(voiceA.bufferUser.i16, i16_A, 16*sizeof(Sint16));
  _kit_kmixerVoiceProcFromType(voiceA.bufferUser.i16,voiceA.bufferConvert.f32, 16,AUDIO_S16,SDL_FALSE);
  _kit_kmixerVoiceProcToType(voiceA.bufferConvert.f32,voiceA.bufferUser.i16, 16,AUDIO_S16,SDL_FALSE);
  for(Uint32 i=0; i<16; ++i){
    if(voiceA.bufferUser.i16[i] != MAX(i16_A[i],-32767)){
      SDL_SetError(""i16 type conv. (%u:%i!=%i)"",
        i, voiceA.bufferUser.i16[i], MAX(i16_A[i],-32767) ); return -999;
    }
  }
   //i32 (products of conversion are actually approximations with a max error of 64)
  SDL_memcpy(voiceA.bufferUser.i32, i32_A, 16*sizeof(Sint32));
  _kit_kmixerVoiceProcFromType(voiceA.bufferUser.i32,voiceA.bufferConvert.f32, 16,AUDIO_S32,SDL_FALSE);
  _kit_kmixerVoiceProcToType(voiceA.bufferConvert.f32,voiceA.bufferUser.i32, 16,AUDIO_S32,SDL_FALSE);
  for(Uint32 i=0; i<16; ++i){
    if((voiceA.bufferUser.i32[i] < (MAX(i32_A[i],-2147483647)-64)) &&
       (voiceA.bufferUser.i32[i] > (MAX(i32_A[i],-2147483647)+64)))
    {
      SDL_SetError(""i32 type conv. (%u:%i!=%i)"",
        i, voiceA.bufferUser.i32[i], MAX(i32_A[i],-2147483647) ); return -999;
    }
  }
   //f32
  SDL_memcpy(voiceA.bufferUser.f32, f32_A, 16*sizeof(float));
  _kit_kmixerVoiceProcFromType(voiceA.bufferUser.f32,voiceA.bufferConvert.f32, 16,AUDIO_F32,SDL_FALSE);
  _kit_kmixerVoiceProcToType(voiceA.bufferConvert.f32,voiceA.bufferUser.f32, 16,AUDIO_F32,SDL_FALSE);
  for(Uint32 i=0; i<16; ++i){
    if(voiceA.bufferUser.f32[i] != CLAMP(f32_A[i], -1.0f,1.0f)){
      SDL_SetError(""f32 type conv. (%u:%.1f!=%.1f)"",
        i, voiceA.bufferUser.f32[i], CLAMP(f32_A[i], -1.0f,1.0f) ); return -999;
    }
  }


  //test channel conversion
   //  mono-stereo
  _kit_kmixerVoiceProcChannels(f32_A, voiceA.bufferConvert.f32s, 8,_M_to_S);
  for(Uint32 i=0; i<16; i+=2){
    //kit_coreLog(""%2u: %9f, %9f"",i, voiceA.bufferConvert.m[i], voiceA.bufferConvert.m[i+1]);
    if(voiceA.bufferConvert.f32[i] != voiceA.bufferConvert.f32[i+1]){
      SDL_SetError(""mn.->st. convert (%u:%.1f!=%.1f)"",
        i, voiceA.bufferConvert.f32[i], voiceA.bufferConvert.f32[i+1] ); return -999;
    }
  }
   //stereo-mono
  _kit_kmixerVoiceProcChannels(f32_A, voiceA.bufferConvert.f32,  8,_S_to_M);
  for(Uint32 i=0; i<16; i+=2){
    //kit_coreLog(""%2u: %9f,%9f -> %9f"",i, f32_A[i],f32_A[i+1], voiceA.bufferConvert.m[i>>1]);
    if(voiceA.bufferConvert.f32[i>>1] != (f32_A[i]+f32_A[i+1])*.5f){
      SDL_SetError(""st.->mn. convert (%u:%.1f!=%.1f)"",
        i, voiceA.bufferConvert.f32[i>>1], (f32_A[i]+f32_A[i+1])*.5f ); return -999;
    }
  }
   //stereo-stereo
  _kit_kmixerVoiceProcChannels(f32_A, voiceA.bufferConvert.f32s,  8,_S_to_S);
  for(Uint32 i=0; i<16; ++i){
    //kit_coreLog(""%2u: %9f"",i, voiceA.bufferConvert.m[i]);
    if(voiceA.bufferConvert.f32[i] != f32_A[i]){
      SDL_SetError(""st.->st. convert (%u:%.1f!=%.1f)"",
        i, voiceA.bufferConvert.f32[i], f32_A[i] ); return -999;
    }
  }
   //  mono-mono
  _kit_kmixerVoiceProcChannels(f32_A, voiceA.bufferConvert.f32, 16,_M_to_M);
  for(Uint32 i=0; i<16; ++i){
    //kit_coreLog(""%2u: %9f"",i, voiceA.bufferConvert.m[i]);
    if(voiceA.bufferConvert.f32[i] != f32_A[i]){
      SDL_SetError(""mn.->mn. convert (%u:%.1f!=%.1f)"",
        i, voiceA.bufferConvert.f32[i], f32_A[i] ); return -999;
    }
  }


  //test VoiceProc itself here


  //test mixing (might want to add in other volume settings at some point)
  voiceA.lock=SDL_CreateMutex();
  voiceB.lock=SDL_CreateMutex();
  voiceC.lock=SDL_CreateMutex();
  kit_coreVector* ivoices=kit_coreVectorCreate(2,0,0, sizeof(_kit_kmixerVoice),0);
  if(voiceA.lock==NULL || voiceB.lock==NULL || voiceC.lock==NULL || ivoices==NULL){
    if(voiceA.lock != NULL) SDL_DestroyMutex(voiceA.lock);
    if(voiceB.lock != NULL) SDL_DestroyMutex(voiceB.lock);
    if(voiceC.lock != NULL) SDL_DestroyMutex(voiceC.lock);
    if(ivoices != NULL) kit_coreVectorDestroy(&ivoices);
  }

  SDL_memcpy(voiceA.bufferOutput.f32, f32_A, 16*sizeof(float));
  SDL_memcpy(voiceB.bufferOutput.f32, f32_B, 16*sizeof(float));
  _kit_kmixerVoice _ivoices[2]={voiceA,voiceB};
  memcpy(ivoices->data, _ivoices, sizeof(_kit_kmixerVoice)*2);
   //mono, 1.0,1.0
  //_kit_kmixerVoiceMix(&voiceC);
  for(Uint32 i=0; i<16; ++i){
    float mixed=voiceC.bufferInput.f32[i];
    float real=CLAMP(voiceA.bufferOutput.f32[i]+voiceB.bufferOutput.f32[i], -1.0f,1.0f);
    if(mixed != real){ SDL_SetError(""mn. mixing (%u:%.1f!=%.1f)"",
                         i, mixed, real ); return -999;
    }
  }
   //stereo, 1.0,1.0
  voiceA.stereoOutput=SDL_TRUE;
  voiceB.stereoOutput=SDL_TRUE;
  voiceA.spec.samples=8;
  voiceB.spec.samples=8;
  voiceC.spec.samples=8;
  //_kit_kmixerVoiceMix(&voiceC);
  for(Uint32 i=0; i<16; ++i){
    float mixed=voiceC.bufferInput.f32[i];
    float real=CLAMP(voiceA.bufferOutput.f32[i]+voiceB.bufferOutput.f32[i], -1.0f,1.0f);
    if(mixed != real){ SDL_SetError(""st. mixing (%u:%.1f!=%.1f)"",
                         i, mixed, real ); return -999;
    }
  }

  if(voiceA.lock != NULL) SDL_DestroyMutex(voiceA.lock);
  if(voiceB.lock != NULL) SDL_DestroyMutex(voiceB.lock);
  if(voiceC.lock != NULL) SDL_DestroyMutex(voiceC.lock);
  if(ivoices != NULL) kit_coreVectorDestroy(&ivoices);


  //test adding and removing possibly


  //kit_coreLog(""sizeof(_kit_kmixerVoice)=%u"",(unsigned int)sizeof(_kit_kmixerVoice));


  return 0;
}
void kit_kmixerVoicePrintRawOrd(kit_kmixerDevice* device){
  kit_coreVector** raw_p = &device->_raw;
  kit_coreVector** ord_p = &device->_ord;
  Uint32 rawLen = (*raw_p)->x;
  Uint32 ordLen = (*ord_p)->x;
  Uint32 maxStage = (*ord_p)->y-1;
  _kit_kmixerVoice* raw = (*raw_p)->data;
  _kit_kmixerVoice** ord = (*ord_p)->data;


  printf(""\n~~~ RAW ~~~\n"");
  for(Uint32 v=0; v<rawLen; ++v){
    _kit_kmixerVoice* voice = &raw[v];
    printf(""--- %02u/%02u (%p) ---\n"", v, rawLen-1, voice);
    if(voice->lock == NULL){ printf(""  (REMOVED)\n""); continue; }
    Uint32 numInputs = 0,  *inputs = NULL;
    if(voice->inputs != NULL){
      numInputs = voice->inputs->x;
         inputs = voice->inputs->data;
    }

    printf(""  voice%u->inputs     = %p: "",v, voice->inputs);
    if(inputs != NULL){
      printf(""{\n    "");
      for(Uint32 i=0; i<numInputs; ++i){
        if(inputs[i]!=0) printf(""%02u, "",inputs[i]);
        else printf(""RM, ""); //removed voice
        if((i+1)==numInputs) printf(""\n"");
        else if((i%5)==4) printf(""\n    "");
      }
      printf(""  }\n"");
    } else printf(""(NULL)\n"");

    printf(""  voice%u->output     = %2i\n"",v, voice->output);
    printf(""  voice%u->chainStage = %2u\n"",v, voice->chainStage);
    printf(""  voice%u->timeStamp  = %u\n"",v,  voice->timeStamp);

    printf(""\n"");
  }


  printf(""\n~~~ ORD ~~~\n"");
  for(Uint32 yi=maxStage; yi!=U32_MAX; --yi){
    printf(""stage %02u:  "", yi);
    for(Uint32 xi=0; xi<ordLen; ++xi){
      _kit_kmixerVoice* voice = ord[xi + yi*ordLen];

      if(voice == NULL) printf(""NL, "");
      else if(voice->lock == NULL) printf(""RM, "");
      else printf(""%02u, "",voice->index);
    }
    printf(""\n"");
  }
  printf(""\n"");

}
#else
int kit_kmixerVoice_Test(){
  SDL_SetError(""!defined(_KIT_KMIXER_DEBUG)"");
  return 999;
}
void kit_kmixerVoicePrintRawOrd(kit_kmixerDevice* device){}
#endif
"
UMe0hucK,_kit_kmixerVoicePrivate.h as of 2023-10-12,Kitomas,C,Thursday 12th of October 2023 09:05:30 PM CDT,"#ifndef _KIT_KMIXERVOICEPRIVATE_H
#define _KIT_KMIXERVOICEPRIVATE_H


#include ""../../include/kit_sdl2/kit_core.h""
#include ""_kit_kmixerPrivate.h""

#ifdef __cplusplus
extern ""C"" {
#endif




typedef struct _kit_kmixerVoice _kit_kmixerVoice;
struct _kit_kmixerVoice { //128B
  //(lock is compared with NULL to check if voice is valid)
  SDL_mutex*           lock; //to make sure a voice doesn't get deleted while it's processing
  kit_coreVector*    inputs; //list of input voice indexes, if any (can be NULL)
  kit_kmixerDevice*  device; //reference to the voice's device
  Uint32             output; //index of output voice

  Uint32          timeStamp; //result of SDL_GetTicks() at the time of voice creation

  kit_acodecPCMSamples   bufferInput; //input buffer (aka the mixing stage's output)
  kit_acodecPCMSamples    bufferUser; //buffer to be filled in or modified by the user
  kit_acodecPCMSamples bufferConvert; //sometimes used for buffer conversion (always stereo size)
  kit_acodecPCMSamples  bufferOutput; //final output buffer (aka a mixing stage input)

  kit_kmixerVoiceSpec  spec; //contains info for bufferUser, given by the user

  Uint32         chainStage; //the voice's current position in the processing chain
  Uint32              index; //index of this specific voice in the device's voice list

  //volL can actually be <0, but it will be MAX()'d to 0 anyway
   //if volR <0, volR would then be set to whatever volL is after the MAX()
  float                volL; //left ear volume (or total volume if mono); 0.0 -> 1.0
  float                volR; //right ear volume (ignored if mono); 0.0 -> 1.0

  SDL_bool     stereoOutput; //output is mono if SDL_FALSE, stereo if SDL_TRUE
};



extern int _kit_kmixerVoiceProc(void* data);


extern int _kit_kmixerVoiceMix(void* data);


extern int _kit_kmixerVoiceRebuildOrd(kit_kmixerDevice* device);




static inline int _kit_kmixerVoiceAddFillSpec(kit_kmixerDevice* device,
                                              kit_kmixerVoiceSpec* vspec)
{
  _kit_kmixerVoice* voice0 = device->_raw->data;


  vspec->freq    = voice0->spec.freq;
  vspec->samples = voice0->spec.samples;
  vspec->_size   = voice0->spec.samples<<vspec->stereo;

  switch(vspec->format){
  case AUDIO_F32:                    SDL_FALLTHROUGH;
  case AUDIO_S32: vspec->_size *= 2; SDL_FALLTHROUGH;
  case AUDIO_S16: vspec->_size *= 2; SDL_FALLTHROUGH;
  case AUDIO_U8 : break;
  default: _IS_SDLERR(;,""spec's format is invalid""); }


  /*!err*/ return  0;
  _error_: return -1;
}



static inline int _kit_kmixerVoiceAddFillVoice(kit_kmixerVoiceSpec* vspec,
                                               _kit_kmixerVoice* voiceO,
                                               _kit_kmixerVoice* voiceI)
{
  kit_coreMemset(voiceI, 0, sizeof(_kit_kmixerVoice));

  Uint32 stereo_f32_size   = sizeof(float)*vspec->samples*2;
  Uint32 bufferUser_size   = vspec->_size;
  Uint32 bufferOutput_size = (sizeof(float)*vspec->samples)<<voiceO->spec.stereo;


  voiceI->lock = SDL_CreateMutex();
  _IF_GOTO_ERROR(voiceI->lock==NULL,;)

  voiceI->inputs    = NULL; //created when the first input is added
  //voiceI->device  = <handled inside VoiceAdd>
  voiceI->output    = voiceO->index;

  voiceI->timeStamp = SDL_GetTicks();

  voiceI->bufferInput.data   = SDL_malloc(stereo_f32_size);
  voiceI->bufferUser.data    = SDL_malloc(bufferUser_size);
  voiceI->bufferConvert.data = SDL_malloc(stereo_f32_size);
  voiceI->bufferOutput.data  = SDL_malloc(bufferOutput_size);

  voiceI->spec = *vspec;

  //voiceI->chainStage = <handled inside VoiceAddInput>
  //voiceI->index      = <handled inside VoiceAdd>

  voiceI->volL = 1.0f;
  voiceI->volR = (voiceI->spec.stereo) ? 1.0f : -1.0f;

  voiceI->stereoOutput = voiceO->spec.stereo;


  /*!err*/ return  0;
  _error_: return -1;
}



#ifdef __cplusplus
}
#endif

#endif /* _KIT_KMIXERVOICEPRIVATE_H */
"
dSaBPYNG,_kit_kmixerDevicePrivate.h as of 2023-10-12,Kitomas,C,Thursday 12th of October 2023 08:58:52 PM CDT,"#ifndef _KIT_KMIXERDEVICEPRIVATE_H
#define _KIT_KMIXERDEVICEPRIVATE_H


#include ""../../include/kit_sdl2/kit_kmixer.h""
#include ""_kit_privmacro.h""
#include ""_kit_kmixerVoicePrivate.h""

#ifdef __cplusplus
extern ""C"" {
#endif




#define _DEV_MAGIC_NUM (0x0076654472786D6B) //=""kmxrDev\x00""
#define _DEVICE_VALIDITY_CHECK(_nullDeviceAllowed) {                       \
  if(_nullDeviceAllowed){ _IF_GOTO(device==NULL,_noerr_,;) }               \
  else { _IF_SDLERR(device==NULL,;,""device cannot be NULL"") }              \
  _IF_SDLERR(device->_magic.num!=_DEV_MAGIC_NUM,;,""invalid device struct"") }




extern void _kit_kmixerDeviceDoTasks(SDL_ThreadFunction task, kit_coreVector* threads_v,
                                                              kit_coreVector* threadData_v);

extern int _kit_kmixerDevicePauseThread(void* data);

extern void _kit_kmixerDeviceCallback(void* userdata, Uint8* _stream, int len);




static inline void _kit_kmixerDeviceMixThreads(kit_kmixerDevice* device,
                                               _kit_kmixerVoice** voiceRefs,
                                               Uint32 stageVoiceLen)
{
  kit_coreVector* threadData_v   = device->_threadData;
  void**          threadData     = threadData_v->data;
  Uint32          threadData_len = 0; //incremented as data is added


  for(Uint32 vi=0; vi<stageVoiceLen; ++vi){
    _kit_kmixerVoice* voice = voiceRefs[vi];
    if(voice==NULL || voice->lock==NULL) continue; //skip if voice is completely invalid

    //only add the voice to the data queue if it actually has inputs
    if(voice->inputs != NULL) threadData[threadData_len++] = voice;

  }


  VECTOR_LENS_A(threadData_v, 0,0) = threadData_len; //update length to new value
  _kit_kmixerDeviceDoTasks(_kit_kmixerVoiceMix, device->_threads, threadData_v);
}



static inline void _kit_kmixerDeviceProcThreads(kit_kmixerDevice* device,
                                                _kit_kmixerVoice** voiceRefs,
                                                Uint32 stageVoiceLen)
{
  kit_coreVector* threadData_v   = device->_threadData;
  void**          threadData     = threadData_v->data;
  Uint32          threadData_len = 0; //incremented as data is added


  for(Uint32 vi=0; vi<stageVoiceLen; ++vi){
    _kit_kmixerVoice* voice = voiceRefs[vi];
    if(voice==NULL || voice->lock==NULL) continue; //skip if voice is completely invalid

    //only add the voice to the data queue if it's not voice 0
    if(voice->output != U32_MAX) threadData[threadData_len++] = voice;

  }


  VECTOR_LENS_A(threadData_v, 0,0) = threadData_len; //update length to new value
  _kit_kmixerDeviceDoTasks(_kit_kmixerVoiceProc, device->_threads, threadData_v);
}




//assumes device is already locked
static inline void _kit_kmixerDeviceStereoFade(kit_kmixerDevice* device,
                                               kit_acodecPCM_F32S* stream,
                                               int len)
{
  //get values from device itself
  float  fadeDelta   = device->_fadeDelta;
  float  fadeVolume  = device->_fadeVolume;
  Uint32 fadeInDelay = device->_fadeInDelay;

  Uint32 i = 0; //this index is shared, as the loops can jump to others at will


  //FADING OUT
  if(device->_fadeOut){
    _do_fade_out:
    for(; i<len; ++i){
      if(!device->_fadeOut) goto _do_fade_in;
      stream[i].l *= fadeVolume;
      stream[i].r *= fadeVolume;
      fadeVolume = MAX(fadeVolume-fadeDelta,0);
    }
    //trigger pause thread if fade out is complete
    if(fadeVolume <= 0.0f){
      SDL_Thread* pauseThread = SDL_CreateThread(_kit_kmixerDevicePauseThread,""_PauseTh"", device);
      //setting _fadeInDelay to -1 will cause further calls to the device callback
       //to simply memset 0 until kit_kmixerDevicePlay is called again
      if(pauseThread == NULL) device->_fadeInDelay = -1; //0xffffffff
      else SDL_DetachThread(pauseThread); //make sure thread cleans up when finished
    }

  //FADING IN
  } else if(fadeVolume < 1.0f){
    //let device warm up before fading in
    for(; (fadeInDelay)&&(i<len); ++i){ //write 0s for fadeInDelaySeconds
      stream[i].l=stream[i].r = 0; --fadeInDelay;
    }
    _do_fade_in:
    for(; i<len; ++i){
      if(device->_fadeOut) goto _do_fade_out;
      else if(fadeVolume >= 1.0f){ fadeVolume = 1.0f; break; }
      stream[i].l *= fadeVolume;
      stream[i].r *= fadeVolume;
      fadeVolume += fadeDelta;
    }

  }


  //update device struct to any relevant new values
  device->_fadeVolume  = fadeVolume;  //update fade volume
  device->_fadeInDelay = fadeInDelay; //update fade in delay
}



//also assumes device is already locked
static inline void _kit_kmixerDeviceMonoFade(kit_kmixerDevice* device,
                                             float* stream, int len)
{
  //get values from device itself
  float  fadeDelta   = device->_fadeDelta;
  float  fadeVolume  = device->_fadeVolume;
  Uint32 fadeInDelay = device->_fadeInDelay;

  Uint32 i = 0; //this index is shared, as the loops can jump to others at will


  //FADING OUT
  if(device->_fadeOut){
    _do_fade_out:
    for(; i<len; ++i){
      if(!device->_fadeOut) goto _do_fade_in;
      stream[i] *= fadeVolume;
      fadeVolume = MAX(fadeVolume-fadeDelta,0);
    }
    //trigger pause thread if fade out is complete
    if(fadeVolume <= 0.0f){
      SDL_Thread* pauseThread = SDL_CreateThread(_kit_kmixerDevicePauseThread,""_PauseTh"", device);
      //setting _fadeInDelay to -1 will cause further calls to the device callback
       //to simply memset 0 until kit_kmixerDevicePlay is called again
      if(pauseThread == NULL) device->_fadeInDelay = -1; //0xffffffff
      else SDL_DetachThread(pauseThread); //make sure thread cleans up when finished
    }

  //FADING IN
  } else if(fadeVolume < 1.0f){
    //let device warm up before fading in
    for(; (fadeInDelay)&&(i<len); ++i){ //write 0s for fadeInDelaySeconds
      stream[i] = 0; --fadeInDelay;
    }
    _do_fade_in:
    for(; i<len; ++i){
      if(device->_fadeOut) goto _do_fade_out;
      else if(fadeVolume >= 1.0f){ fadeVolume = 1.0f; break; }
      stream[i] *= fadeVolume;
      fadeVolume += fadeDelta;
    }

  }


  //update device struct to any relevant new values
  device->_fadeVolume  = fadeVolume;  //update fade volume
  device->_fadeInDelay = fadeInDelay; //update fade in delay
}




static inline SDL_AudioSpec _kit_kmixerDeviceVoiceToAudioSpec(kit_kmixerDevice* device,
                                                              const kit_kmixerVoiceSpec* vspec)
{
  SDL_AudioSpec aspec;
  SDL_bool success = SDL_FALSE;

  aspec.freq     = vspec->freq;
  aspec.format   = AUDIO_F32;
  aspec.channels = 1+(vspec->stereo&1);
  aspec.samples  = vspec->samples;
  aspec.callback = _kit_kmixerDeviceCallback;
  aspec.userdata = device;

  //assuming 44.1kHz, <=16 sample frames would be well under 1ms lol
   //(even at 8kHz, it would still only be 2ms)
  _IF_SDLERR(aspec.samples<32,;,""samples < 32"")
  _IF_SDLERR(count_bits(aspec.samples)>1,;,""samples not a power of 2"")

  success = SDL_TRUE;
  _error_:
  if(!success) aspec.format = 0; //used to check for failure inside DeviceOpen
  return aspec;
}




static inline int _kit_kmixerDeviceFillVoice0(kit_kmixerDevice* device,
                                              kit_kmixerVoiceSpec* vspec)
{
  _kit_kmixerVoice* raw = device->_raw->data;
  SDL_bool stereo = vspec->stereo&1;
  Uint32 bufferSize = (sizeof(float)*vspec->samples)<<stereo;


  raw->lock=SDL_CreateMutex();
  _IF_GOTO_ERROR(raw->lock==NULL,;)

  raw->inputs    =    NULL; //created when a voice gets added
  raw->device    =  device; //lol
  raw->output    = U32_MAX; //unused for voice 0

  raw->timeStamp = SDL_GetTicks();

   //(voice 0's bufferInput is copied to device callback's _stream)
  raw->bufferInput.data   = SDL_malloc(bufferSize);
  raw->bufferUser.data    = NULL; //unused for voice 0
  raw->bufferConvert.data = NULL; //unused for voice 0
  raw->bufferOutput.data  = NULL; //unused for voice 0
  _IF_SDLERR(raw->bufferInput.data==NULL,;,""!voice 0 bufferInput"")


  //copy voice spec info
  raw->spec        = *vspec;
   //(these two members are exceptions)
  raw->spec._size  = bufferSize;
  raw->spec.format = AUDIO_F32;


  raw->chainStage = 0;
  raw->index      = 0;

  raw->volL = 1.0f;
  raw->volR = (stereo) ? 1.0f : -1.0f;

  raw->stereoOutput = stereo;


  /*!err*/ return  0;
  _error_: return -1;
}




#ifdef __cplusplus
}
#endif

#endif /* _KIT_KMIXERDEVICEPRIVATE_H */
"
uyNkd12F,_kit_acodecPCM.h as of 2023-10-12,Kitomas,C,Thursday 12th of October 2023 08:58:06 PM CDT,"/**
 * \file _kit_acodecPCM.h
 * \brief Header file that contains stuff related to PCM data (used by both acodec and kmixer)
 */
#ifndef __KIT_ACODECPCM_H
#define __KIT_ACODECPCM_H


#include <SDL2/SDL.h>

#ifdef __cplusplus
extern ""C"" {
#endif




//using the extension "".kpm"" is preferred
 //when saving kit_acodecPCM to a file
#define KPCM_MAGIC (0x4D43506B) //= ""kPCM""



/**
 * \brief Stereo Uint8 samples
 */
typedef struct kit_acodecPCM_U_8S {
  Uint8 l; ///< \brief Left audio channel
  Uint8 r; ///< \brief Right audio channel
} kit_acodecPCM_U_8S;

/**
 * \brief Stereo Sint16 samples
 */
typedef struct kit_acodecPCM_I16S {
  Sint16 l; ///< \brief Left audio channel
  Sint16 r; ///< \brief Right audio channel
} kit_acodecPCM_I16S;

/**
 * \brief Stereo Sint32 samples
 */
typedef struct kit_acodecPCM_I32S {
  Sint32 l; ///< \brief Left audio channel
  Sint32 r; ///< \brief Right audio channel
} kit_acodecPCM_I32S;

/**
 * \brief Stereo float samples
 */
typedef struct kit_acodecPCM_F32S {
  float l; ///< \brief Left audio channel
  float r; ///< \brief Right audio channel
} kit_acodecPCM_F32S;


/**
 * \brief A union of supported sample formats
 */
typedef union kit_acodecPCMSamples {
  void*  data; ///< \brief Generic pointer
  Uint8*  u_8; ///< \brief Mono Uint8 Samples
  Sint16* i16; ///< \brief Mono Sint16 Samples
  Sint32* i32; ///< \brief Mono Sint32 Samples
  float*  f32; ///< \brief Mono float Samples
  kit_acodecPCM_U_8S* u_8s; ///< \brief Stereo Uint8 samples
  kit_acodecPCM_I16S* i16s; ///< \brief Stereo Sint16 samples
  kit_acodecPCM_I32S* i32s; ///< \brief Stereo Sint32 samples
  kit_acodecPCM_F32S* f32s; ///< \brief Stereo float samples
} kit_acodecPCMSamples;


/**
 * \brief The struct that contains info about a PCM audio stream. \n
 *        When saved as a file (usually as "".kpm""), the header's size will be 72 (0x48).
 */
typedef struct kit_acodecPCM {
  Uint32           magic; ///< \brief (0x00) = 0x4D43506B = ""kPCM"" (no null terminator)
  SDL_AudioFormat format; ///< \brief (0x04) The data format of the stream
  Uint16      headerSize; ///< \brief (0x06) = sizeof(kit_acodecPCM)
  Uint64        dataSize; ///< \brief (0x08) The size of the PCM buffer, in bytes
  Uint64       loopStart; ///< \brief (0x10) Which sample to loop back to
  Uint64         loopEnd; ///< \brief (0x18) Which sample to restart the loop on
  Uint64      numSamples; ///< \brief (0x20) The number of sample frames in the stream
  Uint32      sampleRate; ///< \brief (0x28) The stream's sample rate, in Hz
  Uint32         bitRate; ///< \brief (0x2C) The audio's bit rate per second
  Uint16       loopCount; ///< \brief (0x30) # of times to loop audio (65535 for infinite loop)
  Uint16        channels; ///< \brief (0x32) # of interlaced channels in the stream (L&R for stereo)
  Uint8     bitRemainder; ///< \brief (0x34) = bitsPerSample%8
  Uint8        userflags; ///< \brief (0x35) User-defined (is just padding otherwise)
  Uint16       uservalue; ///< \brief (0x36) User-defined (is just padding otherwise)
  //while userdata and data are technically included in a .kpm file,
   //they should appear as 0 within that file
  void*         userdata; ///< \brief (0x38) User-defined pointer
  union {
    void*  data; ///< \brief = (void*)pcm_struct_pointer + pcm_struct_pointer->headerSize
    Uint8*  u_8; ///< \brief Mono Uint8 Samples
    Sint16* i16; ///< \brief Mono Sint16 Samples
    Sint32* i32; ///< \brief Mono Sint32 Samples
    float*  f32; ///< \brief Mono float Samples
    kit_acodecPCM_U_8S* u_8s; ///< \brief Stereo Uint8 samples
    kit_acodecPCM_I16S* i16s; ///< \brief Stereo Sint16 samples
    kit_acodecPCM_I32S* i32s; ///< \brief Stereo Sint32 samples
    kit_acodecPCM_F32S* f32s; ///< \brief Stereo float samples
  }; ///< \brief (0x40) Sample data (PCM data should be contiguous with the struct itself)
} kit_acodecPCM;




#ifdef __cplusplus
}
#endif

#endif /* __KIT_ACODECPCM_H */
"
TGDuDRnH,kit_core.h as of 2023-10-12,Kitomas,C,Thursday 12th of October 2023 08:56:44 PM CDT,"/**
 * \file kit_core.h
 * \brief Header file for KIT SDL2's core library
 */
#ifndef _KIT_CORE_H
#define _KIT_CORE_H
#ifndef _KIT_SDL2_CORE_H
#define _KIT_SDL2_CORE_H


#include <SDL2/SDL.h>
#include ""kit_macroconst.h""

#ifdef __cplusplus
extern ""C"" {
#endif




/* ++++++++++ */
/* +kit_core+ */
/* ++++++++++ */

#if defined(_KIT_CORE_DEBUG) || defined(_KIT_ALL_DEBUG)
#define kit_coreLog(...) SDL_Log(__VA_ARGS__)
#else
#define kit_coreLog(...) ;
#endif



#define NO_MEMSET (0xFFFFFFFEEEEEEEEE) ///< \brief used for kit_coreRealloc



extern const SDL_bool kit_coreIsDebug;


extern const char boolstr[2][6]; //""false"" and ""true""


/**
 * \name Inverses of numbers (useful for normalizing floats quickly!)
 */
/** @{ */
//used to multiply an int by the inverse of an int to get a normalized float
extern const float inv_i_8; ///< \brief 1.0f/0x7f       = 0.007874015748031496062992125984251968503937
extern const float inv_i16; ///< \brief 1.0f/0x7fff     = 0.000030518509475997192297128208258308664204
extern const float inv_i32; ///< \brief 1.0f/0x7fffffff = 0.000000000465661287524579692410575082716799

//same thing, but for pi
extern const float inv_qpi; ///< \brief 1.0f/(pi/4) = 1.27323954474
extern const float inv_hpi; ///< \brief 1.0f/(pi/2) = 0.63661977236
extern const float inv_pi ; ///< \brief 1.0f/(pi  ) = 0.31830988618
extern const float inv_pi2; ///< \brief 1.0f/(pi*2) = 0.15915494309
/** @} */



extern float kit_coreSawf(float x); //like sinf, but for a sawtooth wave

extern float kit_coreTrif(float x); //like sinf, but for a triangle wave


//extern void* kit_coreMemcpy(void* dst, const void* src, size_t size);
static inline void* kit_coreMemcpy(void* dst, const void* src, size_t size){
  return SDL_memcpy(dst,src,size);
}

//extern void* kit_coreMemset(void* dst, int value, size_t size);
static inline void* kit_coreMemset(void* dst, int value, size_t size){
  return SDL_memset(dst, value, size);
}

/**
 * Reallocate memory, optionally setting any new allocated memory to 0
 * \param[in,out] ptr_p A pointer to the void* to realloc
 * \param[in] size_old The old size of the allocated memory (set to NO_MEMSET to not call memset)
 * \param[in] size_new The target size of the new memory
 * \return 0 on success, or <0 on error (call SDL_GetError() for more info)
 *
 * \remark (*ptr_p will only be set on success!)
 */
extern int kit_coreRealloc(void* ptr_p, size_t size_old, size_t size_new);


/**
 * Initialize core
 * \param[in] flags What flags to use for SDL_Init() (0 to not initialize SDL at all)
 * \return 0 on success, >0 on warning, or <0 on error (call SDL_GetError() for more info)
 *
 * \sa kit_coreQuit
 */
extern int kit_coreInit(Uint32 flags);

/**
 * Shut down core
 * \return 0 on success, >0 on warning, <0 on error (call SDL_GetError() for more info)
 *
 * \sa kit_coreInit
 */
extern int kit_coreQuit();

/* ---------- */
/* -kit_core- */
/* ---------- */




/* ++++++++++++++++ */
/* +kit_coreThread+ */
/* ++++++++++++++++ */

typedef struct { //32B
  SDL_Thread* thread;
  void*         data;
  SDL_mutex*    lock;
  int _,returnStatus;
} kit_coreThread;

/* ---------------- */
/* -kit_coreThread- */
/* ---------------- */




/* +++++++++++++++++++++ */
/* +kit_sdl2_coreVector+ */
/* +++++++++++++++++++++ */

//assumes that _vector is a vector pointer
 //(also assumes that datasize is < 2^32)
#define PRINT_VECTOR(_pref, _vector) {                           \
  kit_coreLog(_pref""->type.s   = \""%s\"""",(_vector)->type.s);       \
  kit_coreLog(_pref""->datasize = %u"",(Uint32)(_vector)->datasize); \
  kit_coreLog(_pref""->x        = %u"",(_vector)->x);                \
  kit_coreLog(_pref""->y        = %u"",(_vector)->y);                \
  kit_coreLog(_pref""->z        = %u"",(_vector)->z);                \
  kit_coreLog(_pref""->unit     = %u"",(_vector)->unit);             \
  kit_coreLog(_pref""->z_block  = %u"",(_vector)->z_block);          \
  kit_coreLog(_pref""->lenslen  = %u"",(_vector)->lenslen);          \
  kit_coreLog(_pref""->lens     = %p"",(_vector)->lens);             \
  kit_coreLog(_pref""->data     = %p"",(_vector)->data);             }


/**
 * \name Macros for accessing data elements of a kit_coreVector*
 */
/** @{ */
#define VECTOR_INDEX_A(_type, _vector, _x,_y,_z) \
  ((_type*)(_vector)->data)[ (_x) + (_y)*(_vector)->x + (_z)*(_vector)->z_block ]

#define VECTOR_INDEX_B(_type, _vector, _x_raw,_y_raw,_z_raw) \
  ((_type*)(_vector)->data)[ (_x_raw) + (_y_raw) + (_z_raw) ]

#define VECTOR_INDEX_C(_type, _vector, _index_raw) \
  ((_type*)(_vector)->data)[ (_index_raw) ]
/** @} */


/**
 * \name Macros for accessing lengths of a kit_coreVector* 's axes
 */
/** @{ */
#define VECTOR_LENS_A(_vector, _y,_z) \
  (_vector)->lens[ (_y) + (_z)*(_vector)->y ]

#define VECTOR_LENS_B(_vector, _y_raw,_z_raw) \
  (_vector)->lens[ (_y_raw) + (_z_raw) ]

#define VECTOR_LENS_C(_vector, _index_raw) \
  (_vector)->lens[ (_index_raw) ]
/** @} */



/**
 * The callback type used in kit_coreVectorTrim, and kit_coreVectorInsert
 * \param[in] unit A pointer to the location of the unit to be compared
 * \param[in] size The size of that unit, in bytes
 * \return SDL_TRUE if unit should be trimmed (or replaced if inserting), SDL_FALSE otherwise
 */
typedef SDL_bool (*kit_coreVectorUnitCallback) (void* unit, Uint32 size);



/**
 * \brief The struct for a contiguous dynamic array
 */
typedef struct kit_coreVector { //56B (assuming that a void* is 8 bytes)
  union {
    char   s[8]; ///< \brief String portion of ID (albeit a short string)
    Uint64    n; ///< \brief Integer portion of ID
  } /*----*/ type; ///< \brief A user-defined type identifier
  Uint64 datasize; ///< \brief Total allocated data size, in bytes (does not include the struct itself)
  Uint32        x; ///< \brief Length of the vector's (allocated) x axis
  Uint32        y; ///< \brief Length of the vector's (allocated) y axis
  Uint32        z; ///< \brief Length of the vector's (allocated) z axis
  Uint32     unit; ///< \brief Size of each data element
  Uint32  z_block; ///< \brief Is equal to x*y
  Uint32  lenslen; ///< \brief Allocated size of lens, in # of (Uint32) elements
  Uint32*    lens; ///< \brief lengths for individual axes (must be <= the actual allocated size)
  void*      data; ///< \brief The actual array portion of the vector (technically a 1D block of memory)
} kit_coreVector;



/**
 * Set the size of a kit_coreVector
 * \param[in,out] Vector_p A pointer to the kit_coreVector* to be altered
 * \param[in] x_new New size for the x axis (set to 0 to leave x unchanged)
 * \param[in] y_new New size for the y axis (set to 0 to leave y unchanged)
 * \param[in] z_new New size for the z axis (set to 0 to leave z unchanged)
 * \return 0 on success, or -1 on error (call SDL_GetError() for more info)
 *
 * \sa kit_coreVectorAdd
 * \sa kit_coreVectorTrim
 * \sa kit_coreVectorAppend
 * \sa kit_coreVectorInsert
 */
extern int kit_coreVectorSet(kit_coreVector** Vector_p, Uint32 x_new, Uint32 y_new, Uint32 z_new);

/**
 * Add to or subtract from size of a kit_coreVector
 * \param[in,out] Vector_p A pointer to the kit_coreVector* to be altered
 * \param[in] x_add How much to increase or decrease the x axis
 * \param[in] y_add How much to increase or decrease the y axis
 * \param[in] z_add How much to increase or decrease the z axis
 * \return 0 on success, or -1 on error (call SDL_GetError() for more info)
 *
 * \sa kit_coreVectorSet
 * \sa kit_coreVectorTrim
 * \sa kit_coreVectorAppend
 * \sa kit_coreVectorInsert
 */
extern int kit_coreVectorAdd(kit_coreVector** Vector_p, Sint32 x_add, Sint32 y_add, Sint32 z_add);

/**
 * Trim a kit_coreVector to the last unit that returns a true comparison
 * \param[in,out] Vector_p A pointer to the kit_coreVector* to be altered
 * \param[in] axis Which axis to trim; one of 'x', 'y', 'z', or 0 (case-insensitive; 0 means all valid axes)
 * \param[in] callback A kit_coreVectorUnitCallback function pointer used for comparing units (can be NULL; see remarks)
 * \return 0 on success, or -1 on error (call SDL_GetError() for more info)
 *
 * \remark If callback is NULL, comparisons return true if a unit's bytes are all set to 0
 * \sa kit_coreVectorSet
 * \sa kit_coreVectorAdd
 * \sa kit_coreVectorAppend
 * \sa kit_coreVectorInsert
 */
extern int kit_coreVectorTrim(kit_coreVector** Vector_p, char axis,
                              kit_coreVectorUnitCallback callback);

/**
 * Append an element to the end of a kit_coreVector x axis
 * \param[in,out] Vector_p A pointer to the kit_coreVector* to be altered
 * \param[in] src A pointer to the data to be copied to the end of the vector
 * \param[in] y_pos The y index to append to (set to 0 if vector is <2D)
 * \param[in] z_pos The z index to append to (set to 0 if vector is <3D)
 * \return The newly-created x index, or 0xffffffff (-1 when interpreted as signed) on error (call SDL_GetError() for more info)
 *
 * \remark *src must be *Vector_p->unit bytes in size or bad things will happen
 * \sa kit_coreVectorSet
 * \sa kit_coreVectorAdd
 * \sa kit_coreVectorTrim
 * \sa kit_coreVectorInsert
 */
extern Uint32 kit_coreVectorAppend(kit_coreVector** Vector_p, void* src, Uint32 y_pos, Uint32 z_pos);

/**
 * Insert an element into a kit_coreVector x axis, appending if necessary
 * \param[in,out] Vector_p A pointer to the kit_coreVector* to be altered
 * \param[in] src A pointer to the data to be inserted
 * \param[in] y_pos The y index to insert into (set to 0 if vector is <2D)
 * \param[in] z_pos The z index to insert into (set to 0 if vector is <3D)
 * \param[in] callback A kit_coreVectorUnitCallback function pointer used for comparing units (can be NULL; see remarks)
 * \return The resulting x index, or 0xffffffff (-1 when interpreted as signed) on error (call SDL_GetError() for more info)
 *
 * \remark If callback is NULL, comparisons return true if a unit's bytes are all set to 0. \n
 * \remark Like kit_coreVectorAppend, *src must be *Vector_p->unit bytes in size or bad things will happen
 * \sa kit_coreVectorSet
 * \sa kit_coreVectorAdd
 * \sa kit_coreVectorTrim
 * \sa kit_coreVectorAppend
 */
extern Uint32 kit_coreVectorInsert(kit_coreVector** Vector_p, void* src,
                                   Uint32 y_pos, Uint32 z_pos,
                                   kit_coreVectorUnitCallback callback);


/**
 * Destroy a kit_coreVector
 * \param[in,out] Vector_p A pointer to the kit_coreVector* to be destroyed (before being set to NULL)
 * \return 0 on success, or -1 on error (call SDL_GetError() for more info)
 *
 * \sa kit_coreVectorCreate
 * \sa kit_coreVectorCopy
 */
extern int kit_coreVectorDestroy(kit_coreVector** Vector_p);

/**
 * Create a new kit_coreVector
 * \param[in] x Size of the vector on the x axis
 * \param[in] y Size of the vector on the y axis
 * \param[in] z Size of the vector on the z axis
 * \param[in] unit The size of each data element, in bytes
 * \param[in] type_n A user-defined number which acts as the vector's type identifier
 * \return A pointer to a newly-created Vector struct, or NULL on error (call SDL_GetError() for more info)
 *
 * \sa kit_coreVectorDestroy
 * \sa kit_coreVectorCopy
 */
extern kit_coreVector* kit_coreVectorCreate(Uint32 x, Uint32 y, Uint32 z, Uint32 unit, Uint64 type_n);

/**
 * Create a duplicate of a kit_coreVector
 * \param[in] Vector The vector to copy
 * \return A pointer to a newly-copied Vector struct, or NULL on error (call SDL_GetError() for more info)
 *
 * \sa kit_coreVectorDestroy
 * \sa kit_coreVectorCreate
 */
extern kit_coreVector* kit_coreVectorCopy(kit_coreVector* Vector);


extern void kit_coreVectorPrintInt(kit_coreVector* Vector,const char* prefix); //debug

extern void kit_coreVectorPrintLens(kit_coreVector* Vector,const char* prefix); //debug

extern int kit_coreVector_Test(); //debug

/* --------------------- */
/* -kit_sdl2_coreVector- */
/* --------------------- */




/* +++++++++++++++++++ */
/* +kit_sdl2_coreFile+ */
/* +++++++++++++++++++ */



#define DEFAULT_RW_CHUNK_SIZE (4096) ///> \brief The default chunk size for file i/o



/**
 * Get the size of a file
 * \param[in] filePath The file to get the size of
 * \return The size of that file, in bytes
 */
extern size_t kit_coreFileSize(const char* filePath);


/**
 * Read the contents of a binary file
 * \param[in] filePath The file to read from
 * \param[out] buffer_p The location of a pointer to be filled in with the file data
 * \param[in] chunkSize How many bytes to read at a time (set to 0 to use the default of 4096)
 * \return The size of the file's data, in bytes (or 0 in the event of an error; call SDL_GetError() for details)
 *
 * \remark Since the buffer uses heap memory, make sure to free the buffer when it's no longer in use.
 * \sa kit_coreFileWriteBin
 */
extern size_t kit_coreFileReadBin(const char* filePath, void* buffer_p, size_t chunkSize);

/**
 * Write the contents of a buffer to a binary file
 * \param[in] filePath The file name to write to
 * \param[in] buffer A pointer to the memory that'll be written
 * \param[in] bufferSize The size of that buffer, in bytes
 * \param[in] chunkSize How many bytes to write at a time (set to 0 to use the default of 4096)
 * \return 0 on success, or -1 on failure
 *
 * \sa kit_coreFileReadBin
 */
extern int kit_coreFileWriteBin(const char* filePath, void* buffer,
                                size_t bufferSize, size_t chunkSize);

/* ------------------- */
/* -kit_sdl2_coreFile- */
/* ------------------- */




/* ++++++++++++++ */
/* +kit_coreFstr+ */
/* ++++++++++++++ */

#ifndef _WCHAR_T_DEFINED
#  include <wchar.h>
#endif
#ifndef _FSTR
# define _FSTR
#  define fstr kit_coreFstr
#endif
#ifndef _FSTRW
# define _FSTRW
#  define fstrw kit_coreFstrw
#endif



/**
 * \brief This struct contains buffer information for fstr
 */
typedef struct kit_coreFstr_t {
  union {
    char*     s; ///< \brief The char portion of the string union
    wchar_t*  w; ///< \brief The wchar portion of the string union
  } /* ----- */ b; ///< \brief The actual string buffer union
  Uint32 mem_size; ///< \brief The size of the string buffer, in bytes
  Uint32 _padding; ///< \brief (unused) Another Uint32 to pad to a multiple of 8 bytes
} kit_coreFstr_t;



/**
 * Format a string, before returning that string
 * \param[in,out] buffer A pointer to a kit_coreFstr_t that contains buffer information
 * \param[in] fmt The format string; used the same way as the first argument to printf
 * \param[in] ... List of variables to be formatted, if any
 * \return A pointer to the newly-formatted string, or NULL on error (call SDL_GetError() for more info)
 *
 * \sa kit_coreFstrw
 */
extern char* kit_coreFstr(kit_coreFstr_t* buffer, const char* fmt,...);

/**
 * Format a wide string, before returning that wide string
 * \param[in,out] buffer A pointer to a kit_coreFstr_t that contains buffer information
 * \param[in] fmt The format string; used the same way as the first argument to wprintf
 * \param[in] ... List of variables to be formatted, if any
 * \return A pointer to the newly-formatted wide string, or NULL on error (call SDL_GetError() for more info)
 *
 * \sa kit_coreFstr
 */
extern wchar_t* kit_coreFstrw(kit_coreFstr_t* buffer, const wchar_t* fmt,...);


/**
 * Destroy a kit_coreFstr_t buffer
 * \param[in,out] buffer_p A pointer to the kit_coreFstr_t* to be destroyed (before being set to NULL)
 * \return 0 on success, or a negative error code (call SDL_GetError() for more info)
 *
 * \sa kit_coreFstrCreate
 */
extern int kit_coreFstrDestroy(kit_coreFstr_t** buffer_p);

/**
 * Create a new kit_coreFstr_t
 * \param[in] buffer_size the size of the string's buffer, in bytes
 * \return A pointer to a newly-created Fstr_t struct, or NULL on error (call SDL_GetError() for more info)
 *
 * \sa kit_coreFstrDestroy
 */
extern kit_coreFstr_t* kit_coreFstrCreate(Uint32 buffer_size);

/* -------------- */
/* -kit_coreFstr- */
/* -------------- */




#ifdef __cplusplus
}
#endif

#endif /* _KIT_SDL2_CORE_H */
#endif /* _KIT_CORE_H */
"
NkLYJc8q,Untitled,sheredega,JavaScript,Thursday 12th of October 2023 08:45:24 PM CDT,"local text = ""Администратор: Andrew_Sheredega[526] забанил John_Shoton[552] [3 Предупреждения]. Причина: aim [Rifa / 10]""

if text:find(""Администратор: .+ забанил .+ %[3 Предупреждения%]%. Причина: .+ %[.+ / %d+%]"") then
  local admin, player, reason, frac, rank = text:match(""Администратор: (.+) забанил (.+) %[3 Предупреждения%]%. Причина: (.+) %[(.+) / (%d+)%]"")
  if admin:find(""%[%d+%]"") then admin = admin:match(""(.+)%[%d+%]"") end
  if player:find(""%[%d+%]"") then player = player:match(""(.+)%[%d+%]"") end
  print(admin, player, reason, frac, rank)
end"
ThxW97HF,kmixer_demo.c,Kitomas,C,Thursday 12th of October 2023 08:43:22 PM CDT,"//this program plays a sine wave at 440Hz for a second
#define SDL_MAIN_HANDLED
#include <kit_sdl2/kit_kmixer.h>

//#define PI2 (basically M_PI*2, which is already defined in macroconst.h)

#define sample_rate 44100
#define volume 0.5
#define hertz 440

float position = 0;
void sin_callback(void* userdata, void* _stream, int size, SDL_bool hasInput){
  float* destination = _stream;
  int len = size/sizeof(float);

  for(int i=0; i<len; ++i){
    destination[i] = SDL_sinf(position * PI2*hertz) * volume;
    position += 1.0f/sample_rate;
  }
}

int main(int argc, char** argv){
  //initialize kmixer and core, which kmixer relies on
  if(kit_coreInit(0)<0) return 1;
  if(kit_kmixerInit(-2)<0) return 2; //use only half the cpu cores present

  //set up device specification, which optionally doubles as voice 1's spec
  kit_kmixerVoiceSpec specO,spec={0};
  spec.callback = sin_callback;
  spec.freq     = sample_rate;
  spec.samples  = 1024;
  spec.stereo   = SDL_FALSE;
  spec.format   = AUDIO_F32;
  kit_kmixerDevice* device=kit_kmixerDeviceOpen(NULL,0,&spec,&specO);
  if(device==NULL) return 3;


  kit_kmixerDeviceUnpauseAndWait(device);
  SDL_Delay(1000); //let it play for 1 second
  kit_kmixerDevicePauseAndWait(device);


  kit_kmixerDeviceClose(&device);

  kit_kmixerQuit();
  kit_coreQuit();

  return 0;
}"
SVekU1ad,Untitled,sheredega,Lua,Thursday 12th of October 2023 08:42:12 PM CDT,"local text = ""Администратор: Andrew_Sheredega[526] выдал warn John_Shoton[552]. Причина: aim [Rifa / 10]""

if text:find(""Администратор: .+ выдал warn .+%. Причина: .+ %[.+ / %d+%]"") then
  local admin, player, reason, frac, rank = text:match(""Администратор: (.+) выдал warn (.+)%. Причина: (.+) %[(.+) / (%d+)%]"")
  if admin:find(""%[%d+%]"") then admin = admin:match(""(.+)%[%d+%]"") end
  if player:find(""%[%d+%]"") then player = player:match(""(.+)%[%d+%]"") end
  print(admin, player, reason, frac, rank)
end"
Mwwx7H8z,GLITCHworkflow,nomejaexiste,JSON,Thursday 12th of October 2023 08:14:57 PM CDT,"{
    ""last_node_id"": 15,
    ""last_link_id"": 27,
    ""nodes"": [
        {
            ""id"": 6,
            ""type"": ""CLIPTextEncode"",
            ""pos"": [
                20,
                218
            ],
            ""size"": {
                ""0"": 422.84503173828125,
                ""1"": 164.31304931640625
            },
            ""flags"": {},
            ""order"": 5,
            ""mode"": 0,
            ""inputs"": [
                {
                    ""name"": ""clip"",
                    ""type"": ""CLIP"",
                    ""link"": 24
                }
            ],
            ""outputs"": [
                {
                    ""name"": ""CONDITIONING"",
                    ""type"": ""CONDITIONING"",
                    ""links"": [
                        4
                    ],
                    ""slot_index"": 0
                }
            ],
            ""properties"": {
                ""Node name for S&R"": ""CLIPTextEncode""
            },
            ""widgets_values"": [
                ""full body picture, kawaii toy doll, tatsumaki in a cinematic action shot, HDR colours, monster association in the background, cyberpunk surroundings, futuristic cyberpunk art style, raw photo, detailed, intricate, multicolor neon lights, cybernetic armor, biomechanical features, night time, rain, water reflections, dark atmosphere, masterpiece, high quality""
            ],
            ""color"": ""#232"",
            ""bgcolor"": ""#353""
        },
        {
            ""id"": 7,
            ""type"": ""CLIPTextEncode"",
            ""pos"": [
                20,
                420
            ],
            ""size"": {
                ""0"": 408.2613220214844,
                ""1"": 108.69251251220703
            },
            ""flags"": {},
            ""order"": 2,
            ""mode"": 0,
            ""inputs"": [
                {
                    ""name"": ""clip"",
                    ""type"": ""CLIP"",
                    ""link"": 16
                }
            ],
            ""outputs"": [
                {
                    ""name"": ""CONDITIONING"",
                    ""type"": ""CONDITIONING"",
                    ""links"": [
                        6
                    ],
                    ""slot_index"": 0
                }
            ],
            ""properties"": {
                ""Node name for S&R"": ""CLIPTextEncode""
            },
            ""widgets_values"": [
                ""tetx, watermark, bad quality""
            ],
            ""color"": ""#322"",
            ""bgcolor"": ""#533""
        },
        {
            ""id"": 4,
            ""type"": ""CheckpointLoaderSimple"",
            ""pos"": [
                20,
                79
            ],
            ""size"": {
                ""0"": 525,
                ""1"": 98
            },
            ""flags"": {},
            ""order"": 0,
            ""mode"": 0,
            ""outputs"": [
                {
                    ""name"": ""MODEL"",
                    ""type"": ""MODEL"",
                    ""links"": [
                        19
                    ],
                    ""slot_index"": 0
                },
                {
                    ""name"": ""CLIP"",
                    ""type"": ""CLIP"",
                    ""links"": [
                        16,
                        18
                    ],
                    ""slot_index"": 1
                },
                {
                    ""name"": ""VAE"",
                    ""type"": ""VAE"",
                    ""links"": [
                        8
                    ],
                    ""slot_index"": 2
                }
            ],
            ""properties"": {
                ""Node name for S&R"": ""CheckpointLoaderSimple""
            },
            ""widgets_values"": [
                ""dynavisionXLAllInOneStylized_release0534bakedvae.safetensors""
            ]
        },
        {
            ""id"": 14,
            ""type"": ""LoraLoader"",
            ""pos"": [
                26,
                759
            ],
            ""size"": {
                ""0"": 397.4649658203125,
                ""1"": 126
            },
            ""flags"": {},
            ""order"": 4,
            ""mode"": 0,
            ""inputs"": [
                {
                    ""name"": ""model"",
                    ""type"": ""MODEL"",
                    ""link"": 22
                },
                {
                    ""name"": ""clip"",
                    ""type"": ""CLIP"",
                    ""link"": 23
                }
            ],
            ""outputs"": [
                {
                    ""name"": ""MODEL"",
                    ""type"": ""MODEL"",
                    ""links"": [
                        25
                    ],
                    ""shape"": 3,
                    ""slot_index"": 0
                },
                {
                    ""name"": ""CLIP"",
                    ""type"": ""CLIP"",
                    ""links"": [
                        24
                    ],
                    ""shape"": 3,
                    ""slot_index"": 1
                }
            ],
            ""properties"": {
                ""Node name for S&R"": ""LoraLoader""
            },
            ""widgets_values"": [
                ""neg4all_bdsqlsz_xl_V7.safetensors"",
                1,
                1
            ]
        },
        {
            ""id"": 13,
            ""type"": ""LoraLoader"",
            ""pos"": [
                28,
                578
            ],
            ""size"": {
                ""0"": 315,
                ""1"": 126
            },
            ""flags"": {},
            ""order"": 3,
            ""mode"": 0,
            ""inputs"": [
                {
                    ""name"": ""model"",
                    ""type"": ""MODEL"",
                    ""link"": 19
                },
                {
                    ""name"": ""clip"",
                    ""type"": ""CLIP"",
                    ""link"": 18
                }
            ],
            ""outputs"": [
                {
                    ""name"": ""MODEL"",
                    ""type"": ""MODEL"",
                    ""links"": [
                        22
                    ],
                    ""shape"": 3,
                    ""slot_index"": 0
                },
                {
                    ""name"": ""CLIP"",
                    ""type"": ""CLIP"",
                    ""links"": [
                        23
                    ],
                    ""shape"": 3,
                    ""slot_index"": 1
                }
            ],
            ""properties"": {
                ""Node name for S&R"": ""LoraLoader""
            },
            ""widgets_values"": [
                ""add-detail-xl.safetensors"",
                1,
                1
            ]
        },
        {
            ""id"": 3,
            ""type"": ""KSampler"",
            ""pos"": [
                477,
                224
            ],
            ""size"": {
                ""0"": 315,
                ""1"": 262
            },
            ""flags"": {},
            ""order"": 6,
            ""mode"": 0,
            ""inputs"": [
                {
                    ""name"": ""model"",
                    ""type"": ""MODEL"",
                    ""link"": 25
                },
                {
                    ""name"": ""positive"",
                    ""type"": ""CONDITIONING"",
                    ""link"": 4
                },
                {
                    ""name"": ""negative"",
                    ""type"": ""CONDITIONING"",
                    ""link"": 6
                },
                {
                    ""name"": ""latent_image"",
                    ""type"": ""LATENT"",
                    ""link"": 2
                }
            ],
            ""outputs"": [
                {
                    ""name"": ""LATENT"",
                    ""type"": ""LATENT"",
                    ""links"": [
                        7
                    ],
                    ""slot_index"": 0
                }
            ],
            ""properties"": {
                ""Node name for S&R"": ""KSampler""
            },
            ""widgets_values"": [
                540814596534126,
                ""randomize"",
                25,
                6,
                ""ddim"",
                ""karras"",
                1
            ]
        },
        {
            ""id"": 5,
            ""type"": ""EmptyLatentImage"",
            ""pos"": [
                477,
                530
            ],
            ""size"": {
                ""0"": 315,
                ""1"": 106
            },
            ""flags"": {},
            ""order"": 1,
            ""mode"": 0,
            ""outputs"": [
                {
                    ""name"": ""LATENT"",
                    ""type"": ""LATENT"",
                    ""links"": [
                        2
                    ],
                    ""slot_index"": 0
                }
            ],
            ""properties"": {
                ""Node name for S&R"": ""EmptyLatentImage""
            },
            ""widgets_values"": [
                416,
                576,
                4
            ]
        },
        {
            ""id"": 9,
            ""type"": ""SaveImage"",
            ""pos"": [
                1240,
                72
            ],
            ""size"": [
                423,
                502
            ],
            ""flags"": {},
            ""order"": 9,
            ""mode"": 0,
            ""inputs"": [
                {
                    ""name"": ""images"",
                    ""type"": ""IMAGE"",
                    ""link"": 27
                }
            ],
            ""properties"": {},
            ""widgets_values"": [
                ""ComfyUI""
            ],
            ""shape"": 2
        },
        {
            ""id"": 8,
            ""type"": ""VAEDecode"",
            ""pos"": [
                561,
                78
            ],
            ""size"": {
                ""0"": 210,
                ""1"": 46
            },
            ""flags"": {},
            ""order"": 7,
            ""mode"": 0,
            ""inputs"": [
                {
                    ""name"": ""samples"",
                    ""type"": ""LATENT"",
                    ""link"": 7
                },
                {
                    ""name"": ""vae"",
                    ""type"": ""VAE"",
                    ""link"": 8
                }
            ],
            ""outputs"": [
                {
                    ""name"": ""IMAGE"",
                    ""type"": ""IMAGE"",
                    ""links"": [
                        26
                    ],
                    ""slot_index"": 0
                }
            ],
            ""properties"": {
                ""Node name for S&R"": ""VAEDecode""
            }
        },
        {
            ""id"": 15,
            ""type"": ""ImageGlitcher"",
            ""pos"": [
                850,
                72
            ],
            ""size"": {
                ""0"": 315,
                ""1"": 154
            },
            ""flags"": {},
            ""order"": 8,
            ""mode"": 0,
            ""inputs"": [
                {
                    ""name"": ""image"",
                    ""type"": ""IMAGE"",
                    ""link"": 26
                }
            ],
            ""outputs"": [
                {
                    ""name"": ""IMAGE"",
                    ""type"": ""IMAGE"",
                    ""links"": [
                        27
                    ],
                    ""shape"": 3,
                    ""slot_index"": 0
                }
            ],
            ""properties"": {
                ""Node name for S&R"": ""ImageGlitcher""
            },
            ""widgets_values"": [
                4,
                0,
                534737787530271,
                ""randomize"",
                ""enable""
            ]
        }
    ],
    ""links"": [
        [
            2,
            5,
            0,
            3,
            3,
            ""LATENT""
        ],
        [
            4,
            6,
            0,
            3,
            1,
            ""CONDITIONING""
        ],
        [
            6,
            7,
            0,
            3,
            2,
            ""CONDITIONING""
        ],
        [
            7,
            3,
            0,
            8,
            0,
            ""LATENT""
        ],
        [
            8,
            4,
            2,
            8,
            1,
            ""VAE""
        ],
        [
            16,
            4,
            1,
            7,
            0,
            ""CLIP""
        ],
        [
            18,
            4,
            1,
            13,
            1,
            ""CLIP""
        ],
        [
            19,
            4,
            0,
            13,
            0,
            ""MODEL""
        ],
        [
            22,
            13,
            0,
            14,
            0,
            ""MODEL""
        ],
        [
            23,
            13,
            1,
            14,
            1,
            ""CLIP""
        ],
        [
            24,
            14,
            1,
            6,
            0,
            ""CLIP""
        ],
        [
            25,
            14,
            0,
            3,
            0,
            ""MODEL""
        ],
        [
            26,
            8,
            0,
            15,
            0,
            ""IMAGE""
        ],
        [
            27,
            15,
            0,
            9,
            0,
            ""IMAGE""
        ]
    ],
    ""groups"": [],
    ""config"": {},
    ""extra"": {},
    ""version"": 0.4
}"
YeLwnbag,Создаём класс поисковой системы. Часть 2. Задание 3,prizrak567890,C++,Thursday 12th of October 2023 07:56:37 PM CDT,"
#include <algorithm>
#include <iostream>
#include <set>
#include <string>
#include <utility>
#include <vector>

using namespace std;

const int MAX_RESULT_DOCUMENT_COUNT = 5;

string ReadLine() {
    string s;
    getline(cin, s);
    return s;
}

int ReadLineWithNumber() {
    int result = 0;
    cin >> result;
    ReadLine();
    return result;
}

vector<string> SplitIntoWords(const string& text) {
    vector<string> words;
    string word;
    for (const char c : text) {
        if (c == ' ') {
            if (!word.empty()) {
                words.push_back(word);
                word.clear();
            }
        } else {
            word += c;
        }
    }
    if (!word.empty()) {
        words.push_back(word);
    }

    return words;
}
/*


struct DocumentContent {
    int id = 0;
    vector<string> words;
};

struct Document {
    int id;
    int relevance;
};

bool HasDocumentGreaterRelevance(const Document& lhs, const Document& rhs) {
    return lhs.relevance > rhs.relevance;
}


set<string> ParseQuery(const string& text, const set<string>& stop_words) {
    set<string> query_words;
    for (const string& word : SplitIntoWordsNoStop(text, stop_words)) {
        query_words.insert(word);
    }
    return query_words;
}

int MatchDocument(const DocumentContent& content, const set<string>& query_words) {
    if (query_words.empty()) {
        return 0;
    }
    set<string> matched_words;
    for (const string& word : content.words) {
        if (matched_words.count(word) != 0) {
            continue;
        }
        if (query_words.count(word) != 0) {
            matched_words.insert(word);
        }
    }
    return static_cast<int>(matched_words.size());
}

vector<Document> FindAllDocuments(const vector<DocumentContent>& documents,
                                  const set<string>& query_words) {
    vector<Document> matched_documents;
    for (const auto& document : documents) {
        const int relevance = MatchDocument(document, query_words);
        if (relevance > 0) {
            matched_documents.push_back({document.id, relevance});
        }
    }
    return matched_documents;
}

vector<Document> FindTopDocuments(const vector<DocumentContent>& documents,
                                  const set<string>& stop_words, const string& raw_query) {
    const set<string> query_words = ParseQuery(raw_query, stop_words);
    auto matched_documents = FindAllDocuments(documents, query_words);

    sort(matched_documents.begin(), matched_documents.end(), HasDocumentGreaterRelevance);
    if (matched_documents.size() > MAX_RESULT_DOCUMENT_COUNT) {
        matched_documents.resize(MAX_RESULT_DOCUMENT_COUNT);
    }
    return matched_documents;
}

*/

class SearchServer {
// Разместите здесь метод AddDocument и данные класса (вектор документов и множество стоп-слов)
public:
    void AddDocument(int document_id, const string document) 
    {
    const vector<string> words = SplitIntoWordsNoStop(document);
    documents_.push_back({document_id, words});
    }
    
    set<string> SetStopWords(const string text) {
    
    for (const string word : SplitIntoWords(text)) 
    {
        stop_words_.insert(word);
    }
        return stop_words_;
    }
    
private:
    
    struct DocumentContent 
    {
    int id = 0;
    vector<string> words;
    };
    
    vector<DocumentContent> documents_;
    set<string> stop_words_;
    
    vector<string> SplitIntoWordsNoStop(const string text) {
    vector<string> words;
    for (const string word : SplitIntoWords(text)) {
        if (stop_words_.count(word) == 0) {
            words.push_back(word);
        }
    }
    return words;
}
    
};

SearchServer CreateSearchServer() {
    SearchServer search_server;
    string stopw;
    cin >> stopw;
    search_server.SetStopWords(stopw);
    int doc_count;
    cin >> doc_count;
    
    for(int doc_id=0;doc_count>=doc_id;){
        string document;
        cin >> document;
        search_server.AddDocument(doc_id,document);
        ++doc_id;
    }
    
    return SearchServer();
} 
/*
int main() {
    const string stop_words_joined = ReadLine();
    const set<string> stop_words = ParseStopWords(stop_words_joined);

    // Read documents
    vector<DocumentContent> documents;
    const int document_count = ReadLineWithNumber();
    for (int document_id = 0; document_id < document_count; ++document_id) {
        AddDocument(documents, stop_words, document_id, ReadLine());
    }

    const string query = ReadLine();
    for (auto [document_id, relevance] : FindTopDocuments(documents, stop_words, query)) {
        cout << ""{ document_id = ""s << document_id << "", relevance = ""s << relevance << "" }""s
             << endl;
    }
}
*/"
ddT9zV5n,Psvgames.php,ALIBABABANA,PHP,Thursday 12th of October 2023 07:45:19 PM CDT,"<?php
// Token do seu bot do Telegram
$token = '6521051141:AAEhBYpmarKOdkPoQe9IGMU_zLb8WhXaQ5E';

// URL da API do Telegram
$apiUrl = ""https://api.telegram.org/bot$token"";

// Obtenha os dados da mensagem recebida
$update = file_get_contents(""php://input"");
$update = json_decode($update, true);

// Verifique se a mensagem é um comando /psv
if (isset($update['message']['text']) && strpos($update['message']['text'], '/psv') === 0) {
    // Obtenha o termo de pesquisa do comando
    $searchTerm = trim(str_replace('/psv', '', $update['message']['text']));

    // Faça uma solicitação HTTP para o site para obter o JSON
    $jsonUrl = ""http://psvstore.000.pe/Planilha.php"";
    $jsonData = @file_get_contents($jsonUrl);

    if ($jsonData !== false) {
        $data = json_decode($jsonData, true);

        if ($data !== null) {
            $results = array();

            // Procure todos os jogos com nomes correspondentes
            foreach ($data as $game) {
                if (isset($game['nome']) && stripos($game['nome'], $searchTerm) !== false) {
                    $results[] = $game;
                }
            }

            if (!empty($results)) {
                // Construa a resposta com os links necessários
                $response = ""Resultados encontrados:\n"";

                foreach ($results as $result) {
                    $response .= $result['nome'] . ""\n"";
                    $response .= ""Download Pkg: "" . $result['game'] . ""\n"";
                    $response .= ""Download WORK: "" . $result['work'] . ""\n"";
                    $response .= ""-----------\n"";
                }
            } else {
                // Se não encontrar jogos, use uma mensagem de erro
                $response = ""Nenhum jogo encontrado para: $searchTerm"";
            }
        } else {
            // JSON inválido
            $response = ""Desculpe, houve um problema na obtenção dos dados. Tente novamente mais tarde."";
        }
    } else {
        // Problema na obtenção do JSON
        $response = ""Desculpe, houve um problema na obtenção dos dados. Tente novamente mais tarde."";
    }
} elseif (isset($update['message']['text']) && strpos($update['message']['text'], '/addgrupo') === 0) {
    // Obtenha o link do grupo do comando
    $groupLink = trim(str_replace('/addgrupo', '', $update['message']['text']));

    // Use a API do Telegram para ingressar no grupo
    $response = joinGroup($groupLink, $apiUrl);
} else {
    // Se a mensagem não for um comando /psv ou /addgrupo, envie a mensagem de erro padrão
    $response = ""Desculpe, esse bot só responde a comandos /psv e /addgrupo."";
}

// Obtenha o chat_id do usuário
$chatId = $update['message']['chat']['id'] ?? null;

if (!empty($chatId)) {
    // Envie a resposta de volta para o usuário
    $sendMessageUrl = $apiUrl . ""/sendMessage?chat_id=$chatId&text="" . urlencode($response);
    file_get_contents($sendMessageUrl);
}

function joinGroup($groupLink, $apiUrl) {
    // Use a API do Telegram para ingressar no grupo
    $response = ""Tentando ingressar no grupo..."";

    // Modifique o link do grupo corretamente
    if (strpos($groupLink, 'https://t.me/') === 0) {
        $groupLink = str_replace('https://t.me/', '', $groupLink);
    }

    $chatId = null; // Defina o chat_id do grupo

    if (!empty($chatId)) {
        $inviteUrl = $apiUrl . ""/inviteChat?chat_id=$chatId&invite_link=$groupLink"";
        $result = file_get_contents($inviteUrl);

        if ($result === 'true') {
            $response = ""Você foi adicionado com sucesso ao grupo!"";
        } else {
            $response = ""Desculpe, não foi possível adicionar você ao grupo."";
        }
    } else {
        $response = ""Desculpe, não foi possível encontrar o grupo."";
    }

    return $response;
}
?>
"
srKN9Ebr,Turtle break place Living,Win4Win,Lua,Thursday 12th of October 2023 07:37:30 PM CDT,"while true do
turtle.place()
sleep(36)
turtle.dig()
 
end"
cbrdjp1K,Level order traversal in spiral form,jayati,C++,Thursday 12th of October 2023 07:33:49 PM CDT,"//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// Tree Node
struct Node
{
    int data;
    Node* left;
    Node* right;
};
// Utility function to create a new Tree Node
Node* newNode(int val)
{
    Node* temp = new Node;
    temp->data = val;
    temp->left = NULL;
    temp->right = NULL;

    return temp;
}

vector<int> findSpiral(Node *root);

// Function to Build Tree
Node* buildTree(string str)
{
    // Corner Case
    if(str.length() == 0 || str[0] == 'N')
        return NULL;

    // Creating vector of strings from input
    // string after spliting by space
    vector<string> ip;

    istringstream iss(str);
    for(string str; iss >> str; )
        ip.push_back(str);

    // Create the root of the tree
    Node* root = newNode(stoi(ip[0]));

    // Push the root to the queue
    queue<Node*> queue;
    queue.push(root);

    // Starting from the second element
    int i = 1;
    while(!queue.empty() && i < ip.size()) {

        // Get and remove the front of the queue
        Node* currNode = queue.front();
        queue.pop();

        // Get the current node's value from the string
        string currVal = ip[i];

        // If the left child is not null
        if(currVal != ""N"") {

            // Create the left child for the current node
            currNode->left = newNode(stoi(currVal));

            // Push it to the queue
            queue.push(currNode->left);
        }

        // For the right child
        i++;
        if(i >= ip.size())
            break;
        currVal = ip[i];

        // If the right child is not null
        if(currVal != ""N"") {

            // Create the right child for the current node
            currNode->right = newNode(stoi(currVal));

            // Push it to the queue
            queue.push(currNode->right);
        }
        i++;
    }

    return root;
}


int main() {
    int t;
    string  tc;
    getline(cin,tc);
    t=stoi(tc);
    while(t--)
    {
        string s;
        getline(cin,s);
        Node* root = buildTree(s);

        vector<int> vec = findSpiral(root);
        for(int x : vec)
        cout<<x<<"" "";
        cout << endl;
    }
    return 0;
}



// } Driver Code Ends


/* A binary tree node has data, pointer to left child
   and a pointer to right child  
struct Node
{
    int data;
    struct Node* left;
    struct Node* right;
    
    Node(int x){
        data = x;
        left = right = NULL;
    }
}; */


//Function to return a list containing the level order traversal in spiral form.
int l=0;
int height(Node* node)
{
    if (node == NULL)
        return 0;
    else {
         
        // Compute the height of each subtree
        int lheight = height(node->left);
        int rheight = height(node->right);
 
        // Use the larger one
        if (lheight > rheight) {
            return (lheight + 1);
        }
        else {
            return (rheight + 1);
        }
    }
}
// Print nodes at a given level
void printGivenLevel(Node* root, int level, int ltr,vector<int> &ans)
{
    if (root == NULL)
        return;
    if (level == 1)
        ans.push_back(root->data);
 
    else if (level > 1) {
        if (ltr) {
            printGivenLevel(root->left, level - 1, ltr,ans);
            printGivenLevel(root->right, level - 1, ltr,ans);
        }
        else {
            printGivenLevel(root->right, level - 1, ltr,ans);
            printGivenLevel(root->left, level - 1, ltr,ans);
        }
    }
}
void printSpiral(Node* root,vector<int> &ans)
{
    int h = height(root);
    int i;
 

    bool ltr = false;
    for (i = 1; i <= h; i++) {
        printGivenLevel(root, i, ltr,ans);
        ltr = !ltr;
    }
}
 

 


vector<int> findSpiral(Node *root)
{
    //Your code here
    vector<int> ans;
    if(root==NULL)
    {
        return ans;
    }
    
    printSpiral(root,ans);
    return ans;
}
"
MMDBkc3g,Untitled,Stawlie0,C++,Thursday 12th of October 2023 07:19:16 PM CDT,"local Casino = {}

local component = require(""component"")
local chatbox = component.chat_box

chatbox.say(""Casino: загруженно"")

function Casino:new()
    local newObj = {
        items = {},       -- список предметов, их шансы и дополнительные свойства
        totalChance = 0,   -- общий шанс (сумма всех шансов)
        addressMoneyChest = nil, -- Адрес сундука с деньгами
        goodWin = 20, -- Последний хороший выигрыш
    }
    self.__index = self
    return setmetatable(newObj, self)
end

function Casino:addItem(name, title, count, chance)
    table.insert(self.items, {
        name = name,
        title = title,
        count = count,
        chance = chance,
        address = nil,
        slot = nil,
    })

    self.totalChance = self.totalChance + chance
end
math.randomseed(os.time())

function Casino:roll(chance)
    local randomValue = math.random() * self.totalChance
    local accumulatedChance = 0

    if self.goodWin <= 0 then
        self.goodWin = self.goodWin - 1
        self.totalChance = self.totalChance - chance
    end

    for _, item in ipairs(self.items) do
        accumulatedChance = accumulatedChance + item.chance
        if randomValue <= accumulatedChance then
            if item.chance == 0.001 then
                self.goodWin = 100
            end
            return item
        end
    end
end

function Casino:SearchMoney()
    if not self.addressMoneyChest then
        chatbox.say(""Address is nil."")
        os.sleep(0.5)
        return nil
    end
    local trans = component.proxy(self.addressMoneyChest)
    if not trans or not trans.getStackInSlot then     -- Проверка успешности получения прокси
        chatbox.say(""Не удалось получить прокси компонента для адреса.: "" .. tostring(address))
        os.sleep(0.5)
        return nil
    end
    local stack = trans.getStackInSlot(0, 1)

    if stack and stack.name == ""contenttweaker:money"" and stack.size then     -- Проверка наличия стека денег и обновление общего баланса
        return stack.size
    end
    return nil
end

function Casino:displayItems()
    for _, item in ipairs(self.items or {}) do
        if ~item.address then
            chatbox.say(""Name: "" .. item.name)
            chatbox.say(""Title: "" .. item.title)
            chatbox.say(""-----"")
        end
    end
end


function Casino:search_transposers()
    -- Предварительное создание маппинга элементов для быстрого поиска
    local itemMap = {}

    for _, item in ipairs(self.items or {}) do
        itemMap[item.name] = item
        if item.title then  -- предположим, что title хранит ваш label
            itemMap[item.title] = item
        end
    end

    for address in component.list(""transposer"") do
        local trans = component.proxy(address)
        if not trans then return end

        local invName = trans.getInventoryName(0)
        if invName == ""appliedenergistics2:interface"" then
            local size = trans.getInventorySize(0) or 0
            for i = 1, size do
                local stack = trans.getStackInSlot(0, i)
                if stack then
                    local item = itemMap[stack.name] or itemMap[stack.label]
                    if item then
                        item.address = address
                        item.slot = i
                    end
                end
            end
        else -- Интерфейс хранения валюты
            self.addressMoneyChest = address
            if chatbox then chatbox.say(""§fСохранил адрес сундука с деньгами: "" .. address) end
        end
    end
end

function Casino:get_list()
    local result = {}
    table.insert(result, ""\n"")
    for _, item in ipairs(self.items or {}) do
        local displayName = string.gsub(item.name, ""&"", ""§"", 1)
        if item.count == 1 then
            table.insert(result, ""§l"" .. displayName .. "" Шанс: ""  .. item.chance * 100 * 10 .. ""%"")
        else
            table.insert(result, ""§l"" .. displayName .. "" x"" .. item.count.. "" Шанс: ""  .. item.chance * 100 * 10 .. ""%"")
        end
    end
    local resultString = table.concat(result, ""\n"")
end

function Casino:sendMoney(count)
    component.proxy(self.addressMoneyChest).transferItem(0, 1, count, 1, 1)
end

function Casino:sendMoney(count)
    component.proxy(self.addressMoneyChest).transferItem(0, 1, count, 1, 1)
end

function Casino:generateWeightedArray()
    local weightedArray = {}
    for i, item in ipairs(self.items) do
        local repetitions = math.floor(item.chance * 100)         -- Умножаем вероятность на 100, чтобы получить целое число для повторений
        for j = 1, repetitions do
            print(self.items.title .. "" "" .. tonumber(repetitions))
            table.insert(weightedArray, i)
        end
    end
    return weightedArray
end

function Casino:weightedRoll()
    local weightedArray = self:generateWeightedArray()
    local randomIndex = math.random(1, #weightedArray)
    print(""Число индекса: "" .. tonumber(randomIndex))
    local itemIndex = weightedArray[randomIndex]
    print(self.items[itemIndex])
    return self.items[itemIndex]
end

return Casino

"
Vt5Sc0mz,2023-10-12_stats.json,rdp_snitch,JSON,Thursday 12th of October 2023 07:17:59 PM CDT,"{
  ""ip"": {
    ""45.227.254.55"": 6,
    ""62.204.41.145"": 18,
    ""198.235.24.69"": 9,
    ""87.251.75.64"": 3,
    ""87.251.75.145"": 6,
    ""194.165.16.37"": 12,
    ""45.143.201.62"": 15,
    ""185.170.144.3"": 3,
    ""87.251.75.120"": 3,
    ""167.94.145.52"": 3,
    ""203.54.162.38"": 30,
    ""111.61.253.55"": 3,
    ""198.235.24.203"": 9,
    ""45.87.212.184"": 3,
    ""94.232.43.134"": 3,
    ""62.122.184.165"": 12,
    ""152.89.198.133"": 12,
    ""80.94.95.238"": 6,
    ""185.170.144.113"": 6,
    ""58.218.204.183"": 9,
    ""62.122.184.166"": 12,
    ""62.122.184.168"": 12,
    ""71.26.116.158"": 3,
    ""141.98.11.128"": 9,
    ""62.233.50.179"": 3,
    ""118.193.65.209"": 3,
    ""94.232.45.92"": 9,
    ""205.210.31.28"": 9,
    ""45.227.254.8"": 6,
    ""51.75.160.42"": 6,
    ""118.193.59.41"": 3,
    ""157.97.121.151"": 3,
    ""80.66.66.125"": 9,
    ""205.210.31.208"": 9,
    ""194.165.16.73"": 6
  },
  ""asn"": {
    ""AS267784"": 12,
    ""AS59425"": 18,
    ""AS396982"": 36,
    ""AS208091"": 15,
    ""AS48721"": 18,
    ""AS210950"": 15,
    ""AS197414"": 9,
    ""AS398705"": 3,
    ""AS1221"": 30,
    ""AS24547"": 3,
    ""AS9009"": 3,
    ""AS57523"": 51,
    ""AS204428"": 6,
    ""AS4134"": 9,
    ""AS20214"": 3,
    ""AS209605"": 9,
    ""AS135377"": 6,
    ""AS212482"": 9,
    ""AS16276"": 6,
    ""AS396356"": 3,
    ""AS51765"": 9
  },
  ""isp"": {
    ""Flyservers S.A."": 30,
    ""Horizon LLC"": 18,
    ""Google LLC"": 36,
    ""Xhost Internet Solutions LP"": 33,
    ""TOV E-RISHENNYA"": 15,
    ""Censys, Inc."": 3,
    ""Telstra Internet"": 30,
    ""China Mobile communications corporation"": 3,
    ""M247 Europe SRL"": 3,
    ""Chang Way Technologies Co. Limited"": 51,
    ""SS-Net"": 6,
    ""Chinanet"": 9,
    ""Comcast Cable Communications, LLC"": 3,
    ""UAB Host Baltic"": 9,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 6,
    ""OVH SAS"": 6,
    ""Consumer-Network"": 3,
    ""Oy Crea Nova Hosting Solution Ltd"": 9
  },
  ""org"": {
    ""UAB Host Baltic"": 12,
    ""Horizon LLC"": 18,
    ""Palo Alto Networks, Inc"": 36,
    ""Xhost Internet Solutions"": 21,
    ""Flyservers S.A"": 18,
    ""TOV VAIZ PARTNER"": 15,
    ""Xhostis"": 9,
    ""Censys, Inc."": 3,
    ""Unknown"": 42,
    ""China Mobile"": 3,
    ""M247 LTD"": 3,
    ""Dmitriy Panchenko"": 12,
    ""Chang Way Technologies Co. Limited"": 36,
    ""Starcrecium Limited"": 12,
    ""Internet-Transit LTD"": 6,
    ""Chinanet JS"": 9,
    ""Comcast Cable Communications, LLC"": 3,
    ""Sierra LLC"": 3,
    ""Ucloud Information Technology"": 3,
    ""OVH Ltd"": 6,
    ""Ucloud Information Technology (hk) Limited"": 3
  },
  ""regionName"": {
    ""Vilnius"": 12,
    ""Moscow"": 69,
    ""California"": 36,
    ""England"": 21,
    ""Kaunas"": 27,
    ""Kyiv City"": 15,
    ""North Holland"": 9,
    ""Hesse"": 9,
    ""South Australia"": 30,
    ""Hebei"": 3,
    ""Perm Krai"": 12,
    ""Budapest"": 6,
    ""Jiangsu"": 9,
    ""Florida"": 3,
    ""New Jersey"": 3,
    ""Uusimaa"": 9
  },
  ""country"": {
    ""Lithuania"": 39,
    ""Russia"": 81,
    ""United States"": 42,
    ""United Kingdom"": 21,
    ""Ukraine"": 15,
    ""Netherlands"": 9,
    ""Germany"": 9,
    ""Australia"": 30,
    ""China"": 12,
    ""Hungary"": 6,
    ""Finland"": 9
  },
  ""account"": {
    ""Test"": 45,
    ""BLNPLbWzZ"": 3,
    ""kmDHuS"": 3,
    ""hfZlFN"": 3,
    ""Administr"": 45,
    ""(empty)"": 12,
    ""hello"": 45,
    ""rdEsLhGIy"": 3,
    ""PtsMBu"": 3,
    ""OqMByu"": 3,
    ""Domain"": 84,
    ""Administrator"": 6,
    ""IapPRLkDM"": 3,
    ""aTgLsd"": 3,
    ""oWkkiG"": 3,
    ""FEvBUuJDZ"": 3,
    ""pHZnca"": 3,
    ""fmFkaP"": 3
  },
  ""keyboard"": {
    ""Unknown"": 273
  },
  ""client_build"": {
    ""Unknown"": 273
  },
  ""client_name"": {
    ""Unknown"": 273
  },
  ""ip_type"": {
    ""Unknown"": 186,
    ""hosting"": 57,
    ""mobile"": 3,
    ""hosting & proxy"": 3,
    ""proxy"": 21,
    ""mobile & proxy"": 3
  }
}"
yKX8WNhD,2023-10-12_stats.json,rdp_snitch,JSON,Thursday 12th of October 2023 07:16:10 PM CDT,"{
  ""ip"": {
    ""45.227.254.55"": 4,
    ""62.204.41.145"": 12,
    ""198.235.24.69"": 6,
    ""87.251.75.64"": 2,
    ""87.251.75.145"": 4,
    ""194.165.16.37"": 8,
    ""45.143.201.62"": 10,
    ""185.170.144.3"": 2,
    ""87.251.75.120"": 2,
    ""167.94.145.52"": 2,
    ""203.54.162.38"": 20,
    ""111.61.253.55"": 2,
    ""198.235.24.203"": 6,
    ""45.87.212.184"": 2,
    ""94.232.43.134"": 2,
    ""62.122.184.165"": 8,
    ""152.89.198.133"": 8,
    ""80.94.95.238"": 4,
    ""185.170.144.113"": 4,
    ""58.218.204.183"": 6,
    ""62.122.184.166"": 8,
    ""62.122.184.168"": 8,
    ""71.26.116.158"": 2,
    ""141.98.11.128"": 6,
    ""62.233.50.179"": 2,
    ""118.193.65.209"": 2,
    ""94.232.45.92"": 6,
    ""205.210.31.28"": 6,
    ""45.227.254.8"": 4,
    ""51.75.160.42"": 4,
    ""118.193.59.41"": 2,
    ""157.97.121.151"": 2,
    ""80.66.66.125"": 6,
    ""205.210.31.208"": 6,
    ""194.165.16.73"": 4
  },
  ""asn"": {
    ""AS267784"": 8,
    ""AS59425"": 12,
    ""AS396982"": 24,
    ""AS208091"": 10,
    ""AS48721"": 12,
    ""AS210950"": 10,
    ""AS197414"": 6,
    ""AS398705"": 2,
    ""AS1221"": 20,
    ""AS24547"": 2,
    ""AS9009"": 2,
    ""AS57523"": 34,
    ""AS204428"": 4,
    ""AS4134"": 6,
    ""AS20214"": 2,
    ""AS209605"": 6,
    ""AS135377"": 4,
    ""AS212482"": 6,
    ""AS16276"": 4,
    ""AS396356"": 2,
    ""AS51765"": 6
  },
  ""isp"": {
    ""Flyservers S.A."": 20,
    ""Horizon LLC"": 12,
    ""Google LLC"": 24,
    ""Xhost Internet Solutions LP"": 22,
    ""TOV E-RISHENNYA"": 10,
    ""Censys, Inc."": 2,
    ""Telstra Internet"": 20,
    ""China Mobile communications corporation"": 2,
    ""M247 Europe SRL"": 2,
    ""Chang Way Technologies Co. Limited"": 34,
    ""SS-Net"": 4,
    ""Chinanet"": 6,
    ""Comcast Cable Communications, LLC"": 2,
    ""UAB Host Baltic"": 6,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 4,
    ""OVH SAS"": 4,
    ""Consumer-Network"": 2,
    ""Oy Crea Nova Hosting Solution Ltd"": 6
  },
  ""org"": {
    ""UAB Host Baltic"": 8,
    ""Horizon LLC"": 12,
    ""Palo Alto Networks, Inc"": 24,
    ""Xhost Internet Solutions"": 14,
    ""Flyservers S.A"": 12,
    ""TOV VAIZ PARTNER"": 10,
    ""Xhostis"": 6,
    ""Censys, Inc."": 2,
    ""Unknown"": 28,
    ""China Mobile"": 2,
    ""M247 LTD"": 2,
    ""Dmitriy Panchenko"": 8,
    ""Chang Way Technologies Co. Limited"": 24,
    ""Starcrecium Limited"": 8,
    ""Internet-Transit LTD"": 4,
    ""Chinanet JS"": 6,
    ""Comcast Cable Communications, LLC"": 2,
    ""Sierra LLC"": 2,
    ""Ucloud Information Technology"": 2,
    ""OVH Ltd"": 4,
    ""Ucloud Information Technology (hk) Limited"": 2
  },
  ""regionName"": {
    ""Vilnius"": 8,
    ""Moscow"": 46,
    ""California"": 24,
    ""England"": 14,
    ""Kaunas"": 18,
    ""Kyiv City"": 10,
    ""North Holland"": 6,
    ""Hesse"": 6,
    ""South Australia"": 20,
    ""Hebei"": 2,
    ""Perm Krai"": 8,
    ""Budapest"": 4,
    ""Jiangsu"": 6,
    ""Florida"": 2,
    ""New Jersey"": 2,
    ""Uusimaa"": 6
  },
  ""country"": {
    ""Lithuania"": 26,
    ""Russia"": 54,
    ""United States"": 28,
    ""United Kingdom"": 14,
    ""Ukraine"": 10,
    ""Netherlands"": 6,
    ""Germany"": 6,
    ""Australia"": 20,
    ""China"": 8,
    ""Hungary"": 4,
    ""Finland"": 6
  },
  ""account"": {
    ""Test"": 30,
    ""BLNPLbWzZ"": 2,
    ""kmDHuS"": 2,
    ""hfZlFN"": 2,
    ""Administr"": 30,
    ""(empty)"": 8,
    ""hello"": 30,
    ""rdEsLhGIy"": 2,
    ""PtsMBu"": 2,
    ""OqMByu"": 2,
    ""Domain"": 56,
    ""Administrator"": 4,
    ""IapPRLkDM"": 2,
    ""aTgLsd"": 2,
    ""oWkkiG"": 2,
    ""FEvBUuJDZ"": 2,
    ""pHZnca"": 2,
    ""fmFkaP"": 2
  },
  ""keyboard"": {
    ""Unknown"": 182
  },
  ""client_build"": {
    ""Unknown"": 182
  },
  ""client_name"": {
    ""Unknown"": 182
  },
  ""ip_type"": {
    ""Unknown"": 124,
    ""hosting"": 38,
    ""mobile"": 2,
    ""hosting & proxy"": 2,
    ""proxy"": 14,
    ""mobile & proxy"": 2
  }
}"
nyYU34YT,2023-10-12_stats.json,rdp_snitch,JSON,Thursday 12th of October 2023 07:15:09 PM CDT,"{
  ""ip"": {
    ""45.227.254.55"": 2,
    ""62.204.41.145"": 6,
    ""198.235.24.69"": 3,
    ""87.251.75.64"": 1,
    ""87.251.75.145"": 2,
    ""194.165.16.37"": 4,
    ""45.143.201.62"": 5,
    ""185.170.144.3"": 1,
    ""87.251.75.120"": 1,
    ""167.94.145.52"": 1,
    ""203.54.162.38"": 10,
    ""111.61.253.55"": 1,
    ""198.235.24.203"": 3,
    ""45.87.212.184"": 1,
    ""94.232.43.134"": 1,
    ""62.122.184.165"": 4,
    ""152.89.198.133"": 4,
    ""80.94.95.238"": 2,
    ""185.170.144.113"": 2,
    ""58.218.204.183"": 3,
    ""62.122.184.166"": 4,
    ""62.122.184.168"": 4,
    ""71.26.116.158"": 1,
    ""141.98.11.128"": 3,
    ""62.233.50.179"": 1,
    ""118.193.65.209"": 1,
    ""94.232.45.92"": 3,
    ""205.210.31.28"": 3,
    ""45.227.254.8"": 2,
    ""51.75.160.42"": 2,
    ""118.193.59.41"": 1,
    ""157.97.121.151"": 1,
    ""80.66.66.125"": 3,
    ""205.210.31.208"": 3,
    ""194.165.16.73"": 2
  },
  ""asn"": {
    ""AS267784"": 4,
    ""AS59425"": 6,
    ""AS396982"": 12,
    ""AS208091"": 5,
    ""AS48721"": 6,
    ""AS210950"": 5,
    ""AS197414"": 3,
    ""AS398705"": 1,
    ""AS1221"": 10,
    ""AS24547"": 1,
    ""AS9009"": 1,
    ""AS57523"": 17,
    ""AS204428"": 2,
    ""AS4134"": 3,
    ""AS20214"": 1,
    ""AS209605"": 3,
    ""AS135377"": 2,
    ""AS212482"": 3,
    ""AS16276"": 2,
    ""AS396356"": 1,
    ""AS51765"": 3
  },
  ""isp"": {
    ""Flyservers S.A."": 10,
    ""Horizon LLC"": 6,
    ""Google LLC"": 12,
    ""Xhost Internet Solutions LP"": 11,
    ""TOV E-RISHENNYA"": 5,
    ""Censys, Inc."": 1,
    ""Telstra Internet"": 10,
    ""China Mobile communications corporation"": 1,
    ""M247 Europe SRL"": 1,
    ""Chang Way Technologies Co. Limited"": 17,
    ""SS-Net"": 2,
    ""Chinanet"": 3,
    ""Comcast Cable Communications, LLC"": 1,
    ""UAB Host Baltic"": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""OVH SAS"": 2,
    ""Consumer-Network"": 1,
    ""Oy Crea Nova Hosting Solution Ltd"": 3
  },
  ""org"": {
    ""UAB Host Baltic"": 4,
    ""Horizon LLC"": 6,
    ""Palo Alto Networks, Inc"": 12,
    ""Xhost Internet Solutions"": 7,
    ""Flyservers S.A"": 6,
    ""TOV VAIZ PARTNER"": 5,
    ""Xhostis"": 3,
    ""Censys, Inc."": 1,
    ""Unknown"": 14,
    ""China Mobile"": 1,
    ""M247 LTD"": 1,
    ""Dmitriy Panchenko"": 4,
    ""Chang Way Technologies Co. Limited"": 12,
    ""Starcrecium Limited"": 4,
    ""Internet-Transit LTD"": 2,
    ""Chinanet JS"": 3,
    ""Comcast Cable Communications, LLC"": 1,
    ""Sierra LLC"": 1,
    ""Ucloud Information Technology"": 1,
    ""OVH Ltd"": 2,
    ""Ucloud Information Technology (hk) Limited"": 1
  },
  ""regionName"": {
    ""Vilnius"": 4,
    ""Moscow"": 23,
    ""California"": 12,
    ""England"": 7,
    ""Kaunas"": 9,
    ""Kyiv City"": 5,
    ""North Holland"": 3,
    ""Hesse"": 3,
    ""South Australia"": 10,
    ""Hebei"": 1,
    ""Perm Krai"": 4,
    ""Budapest"": 2,
    ""Jiangsu"": 3,
    ""Florida"": 1,
    ""New Jersey"": 1,
    ""Uusimaa"": 3
  },
  ""country"": {
    ""Lithuania"": 13,
    ""Russia"": 27,
    ""United States"": 14,
    ""United Kingdom"": 7,
    ""Ukraine"": 5,
    ""Netherlands"": 3,
    ""Germany"": 3,
    ""Australia"": 10,
    ""China"": 4,
    ""Hungary"": 2,
    ""Finland"": 3
  },
  ""account"": {
    ""Test"": 15,
    ""BLNPLbWzZ"": 1,
    ""kmDHuS"": 1,
    ""hfZlFN"": 1,
    ""Administr"": 15,
    ""(empty)"": 4,
    ""hello"": 15,
    ""rdEsLhGIy"": 1,
    ""PtsMBu"": 1,
    ""OqMByu"": 1,
    ""Domain"": 28,
    ""Administrator"": 2,
    ""IapPRLkDM"": 1,
    ""aTgLsd"": 1,
    ""oWkkiG"": 1,
    ""FEvBUuJDZ"": 1,
    ""pHZnca"": 1,
    ""fmFkaP"": 1
  },
  ""keyboard"": {
    ""Unknown"": 91
  },
  ""client_build"": {
    ""Unknown"": 91
  },
  ""client_name"": {
    ""Unknown"": 91
  },
  ""ip_type"": {
    ""Unknown"": 62,
    ""hosting"": 19,
    ""mobile"": 1,
    ""hosting & proxy"": 1,
    ""proxy"": 7,
    ""mobile & proxy"": 1
  }
}"
