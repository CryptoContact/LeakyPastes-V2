id,title,username,language,date,content
x9XQmYCq,2024-05-05_stats.json,rdp_snitch,JSON,Sunday 5th of May 2024 07:16:06 PM CDT,"{
  ""ip"": {
    ""123.31.20.85"": 52,
    ""194.165.16.11"": 8,
    ""120.89.61.36"": 12,
    ""167.94.138.119"": 2,
    ""103.232.53.123"": 4,
    ""80.94.95.114"": 12,
    ""210.211.117.165"": 4,
    ""199.45.154.75"": 2,
    ""152.32.183.213"": 196,
    ""185.161.248.121"": 4,
    ""45.118.133.109"": 8,
    ""198.235.24.228"": 6,
    ""87.251.75.64"": 2,
    ""87.251.75.145"": 4,
    ""185.170.144.3"": 4,
    ""103.238.234.199"": 2,
    ""185.196.220.41"": 6,
    ""58.218.204.183"": 2,
    ""159.223.34.114"": 2,
    ""193.142.146.227"": 6,
    ""194.28.115.243"": 6,
    ""165.154.32.235"": 2,
    ""205.210.31.216"": 6,
    ""45.227.254.49"": 4,
    ""147.182.145.21"": 6,
    ""123.56.20.194"": 14,
    ""164.70.86.10"": 4,
    ""185.20.197.102"": 4,
    ""64.124.50.139"": 4,
    ""112.4.139.162"": 2,
    ""194.165.16.73"": 4,
    ""142.93.236.84"": 1326,
    ""116.140.196.215"": 2,
    ""36.91.222.100"": 4,
    ""188.119.66.112"": 2,
    ""192.53.118.129"": 64,
    ""172.105.117.227"": 2,
    ""198.235.24.164"": 6,
    ""99.229.172.242"": 2,
    ""27.8.44.19"": 2,
    ""167.94.146.58"": 2,
    ""203.160.55.91"": 8558,
    ""195.181.174.229"": 2,
    ""107.167.82.123"": 2,
    ""185.170.144.113"": 6,
    ""198.235.24.104"": 6,
    ""198.135.49.131"": 2
  },
  ""asn"": {
    ""AS45899"": 52,
    ""AS48721"": 12,
    ""AS9658"": 12,
    ""AS398324"": 2,
    ""AS63737"": 4,
    ""AS204428"": 12,
    ""AS38731"": 4,
    ""AS398722"": 2,
    ""AS135377"": 198,
    ""AS49202"": 4,
    ""AS63949"": 74,
    ""AS396982"": 24,
    ""AS208091"": 6,
    ""AS197414"": 10,
    ""AS140810"": 2,
    ""AS208046"": 12,
    ""AS4134"": 2,
    ""AS14061"": 1334,
    ""AS50968"": 6,
    ""AS267784"": 4,
    ""AS37963"": 14,
    ""AS2514"": 4,
    ""AS203217"": 4,
    ""AS6461"": 4,
    ""AS56046"": 2,
    ""AS4837"": 4,
    ""AS7713"": 4,
    ""AS57523"": 2,
    ""AS812"": 2,
    ""AS398705"": 2,
    ""AS55933"": 8558,
    ""AS60068"": 2,
    ""AS53755"": 2,
    ""AS396073"": 2
  },
  ""isp"": {
    ""VietNam Post and Telecom Corporation"": 52,
    ""Flyservers S.A."": 16,
    ""Eastern Telecommunications Philippines, Inc."": 12,
    ""Censys, Inc."": 6,
    ""VIETSERVER"": 4,
    ""SS-Net"": 12,
    ""VTDC"": 4,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 198,
    ""Kisara LLC"": 4,
    ""Akamai Technologies, Inc."": 72,
    ""Google LLC"": 24,
    ""Xhost Internet Solutions LP"": 16,
    ""MAYTINHVPSTTT"": 2,
    ""ColocationX Ltd."": 12,
    ""Chinanet"": 2,
    ""DigitalOcean, LLC"": 1334,
    ""Hostmaster, Ltd."": 6,
    ""Hangzhou Alibaba Advertising Co"": 14,
    ""InfoSphere"": 4,
    ""Horizon Scope Mobile Telecom WLL"": 4,
    ""Zayo Bandwidth"": 4,
    ""China Mobile Communications Corporation"": 2,
    ""China Unicom CHINA169 Network"": 2,
    ""PT Telekomunikasi Indonesia"": 4,
    ""Chang Way Technologies Co. Limited"": 2,
    ""Akamai Technologies"": 2,
    ""Rogers Communications Canada Inc."": 2,
    ""China Unicom Chongqing Province Network"": 2,
    ""Cloudie Limited"": 8558,
    ""DataCamp Limited"": 2,
    ""Input Output Flood LLC"": 2,
    ""Majestic Hosting Solutions, LLC"": 2
  },
  ""org"": {
    ""Vietnam Posts and Telecommunications Group"": 52,
    ""Flyservers S.A"": 12,
    ""Eastern Telecommunications Philippines, Inc"": 12,
    ""Censys, Inc"": 2,
    ""VietServer Services technology company limited"": 4,
    ""Unmanaged LTD"": 12,
    ""Viettel - CHT Company Ltd"": 4,
    ""Censys, Inc."": 4,
    ""Ucloud Information Technology"": 196,
    ""Kisara LLC"": 4,
    ""Linode"": 10,
    ""Palo Alto Networks, Inc"": 24,
    ""Xhost Internet Solutions"": 6,
    ""Xhostis"": 10,
    ""Vpsttt Computer Company Limited"": 2,
    ""Makut Investments"": 6,
    ""Chinanet JS"": 2,
    ""DigitalOcean, LLC"": 1334,
    ""ColocationX Ltd"": 6,
    ""Network Systems Ltd"": 6,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""UAB Host Baltic"": 4,
    ""Aliyun Computing Co., LTD"": 14,
    ""NTTPC Communications, Inc"": 4,
    ""Horizon Scope Mobile Telecom WLL"": 4,
    ""Microsoft Corporation"": 4,
    ""China Mobile Communications Corporation"": 2,
    ""China United Network Communications Corporation Limited"": 2,
    ""Telekomunikasi Indonesia"": 4,
    ""Chang Way Technologies Co. Limited"": 2,
    ""Linode, LLC"": 64,
    ""Rogers Communications Canada Inc"": 2,
    ""Unknown"": 2,
    ""Cloudie Limited"": 8558,
    ""CDN77 - Frankfurt POP"": 2,
    ""DemonVPS"": 2,
    ""Majestic Hosting Solutions, LLC"": 2
  },
  ""regionName"": {
    ""Hanoi"": 56,
    ""Kaunas"": 12,
    ""Metro Manila"": 14,
    ""Michigan"": 2,
    ""Budapest"": 12,
    ""Ho Chi Minh"": 6,
    ""New York"": 2,
    ""Virginia"": 206,
    ""Moscow"": 6,
    ""Central Singapore"": 10,
    ""California"": 24,
    ""North Holland"": 1354,
    ""Jiangsu"": 4,
    ""Vilnius"": 4,
    ""Ontario"": 8,
    ""Beijing"": 16,
    ""Tokyo"": 4,
    ""Baghdad"": 4,
    ""Jakarta"": 4,
    ""North West"": 66,
    ""Chongqing"": 2,
    ""Hesse"": 4,
    ""Central and Western District"": 8558,
    ""Arizona"": 2,
    ""Texas"": 2
  },
  ""country"": {
    ""Vietnam"": 62,
    ""Lithuania"": 16,
    ""Philippines"": 14,
    ""United States"": 238,
    ""Hungary"": 12,
    ""Russia"": 6,
    ""Singapore"": 76,
    ""The Netherlands"": 1354,
    ""China"": 22,
    ""Canada"": 8,
    ""Japan"": 4,
    ""Iraq"": 4,
    ""Indonesia"": 4,
    ""Germany"": 4,
    ""Hong Kong"": 8558
  },
  ""account"": {
    ""hello"": 122,
    ""Test"": 30,
    ""(empty)"": 10,
    ""Domain"": 36,
    ""Administrator"": 198,
    ""Admin"": 188,
    ""Whatuptime.com"": 210,
    ""Jakartakini123#"": 194,
    ""Hello World"": 206,
    ""TinHocThucHanh"": 196,
    ""Hey"": 228,
    ""TqdafELom"": 2,
    ""CKAsav"": 2,
    ""AZWnqK"": 2,
    ""Administr"": 14,
    ""MvRwHglTn"": 2,
    ""pHmxLi"": 2,
    ""MUonti"": 2,
    ""John"": 168,
    ""vdTdHyjXT"": 2,
    ""RGhzvr"": 2,
    ""rTwGRL"": 2,
    ""2963199753"": 8558,
    ""CozHFkLCR"": 2,
    ""gihvaI"": 2,
    ""ssagXe"": 2
  },
  ""keyboard"": {
    ""Unknown"": 10382
  },
  ""client_build"": {
    ""Unknown"": 10382
  },
  ""client_name"": {
    ""Unknown"": 10382
  },
  ""ip_type"": {
    ""Unknown"": 132,
    ""proxy"": 20,
    ""hosting"": 10208,
    ""mobile"": 12,
    ""hosting & proxy"": 10
  }
}"
13zdRJFT,2024-05-05_stats.json,rdp_snitch,JSON,Sunday 5th of May 2024 07:15:09 PM CDT,"{
  ""ip"": {
    ""123.31.20.85"": 26,
    ""194.165.16.11"": 4,
    ""120.89.61.36"": 6,
    ""167.94.138.119"": 1,
    ""103.232.53.123"": 2,
    ""80.94.95.114"": 6,
    ""210.211.117.165"": 2,
    ""199.45.154.75"": 1,
    ""152.32.183.213"": 98,
    ""185.161.248.121"": 2,
    ""45.118.133.109"": 4,
    ""198.235.24.228"": 3,
    ""87.251.75.64"": 1,
    ""87.251.75.145"": 2,
    ""185.170.144.3"": 2,
    ""103.238.234.199"": 1,
    ""185.196.220.41"": 3,
    ""58.218.204.183"": 1,
    ""159.223.34.114"": 1,
    ""193.142.146.227"": 3,
    ""194.28.115.243"": 3,
    ""165.154.32.235"": 1,
    ""205.210.31.216"": 3,
    ""45.227.254.49"": 2,
    ""147.182.145.21"": 3,
    ""123.56.20.194"": 7,
    ""164.70.86.10"": 2,
    ""185.20.197.102"": 2,
    ""64.124.50.139"": 2,
    ""112.4.139.162"": 1,
    ""194.165.16.73"": 2,
    ""142.93.236.84"": 663,
    ""116.140.196.215"": 1,
    ""36.91.222.100"": 2,
    ""188.119.66.112"": 1,
    ""192.53.118.129"": 32,
    ""172.105.117.227"": 1,
    ""198.235.24.164"": 3,
    ""99.229.172.242"": 1,
    ""27.8.44.19"": 1,
    ""167.94.146.58"": 1,
    ""203.160.55.91"": 4279,
    ""195.181.174.229"": 1,
    ""107.167.82.123"": 1,
    ""185.170.144.113"": 3,
    ""198.235.24.104"": 3,
    ""198.135.49.131"": 1
  },
  ""asn"": {
    ""AS45899"": 26,
    ""AS48721"": 6,
    ""AS9658"": 6,
    ""AS398324"": 1,
    ""AS63737"": 2,
    ""AS204428"": 6,
    ""AS38731"": 2,
    ""AS398722"": 1,
    ""AS135377"": 99,
    ""AS49202"": 2,
    ""AS63949"": 37,
    ""AS396982"": 12,
    ""AS208091"": 3,
    ""AS197414"": 5,
    ""AS140810"": 1,
    ""AS208046"": 6,
    ""AS4134"": 1,
    ""AS14061"": 667,
    ""AS50968"": 3,
    ""AS267784"": 2,
    ""AS37963"": 7,
    ""AS2514"": 2,
    ""AS203217"": 2,
    ""AS6461"": 2,
    ""AS56046"": 1,
    ""AS4837"": 2,
    ""AS7713"": 2,
    ""AS57523"": 1,
    ""AS812"": 1,
    ""AS398705"": 1,
    ""AS55933"": 4279,
    ""AS60068"": 1,
    ""AS53755"": 1,
    ""AS396073"": 1
  },
  ""isp"": {
    ""VietNam Post and Telecom Corporation"": 26,
    ""Flyservers S.A."": 8,
    ""Eastern Telecommunications Philippines, Inc."": 6,
    ""Censys, Inc."": 3,
    ""VIETSERVER"": 2,
    ""SS-Net"": 6,
    ""VTDC"": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 99,
    ""Kisara LLC"": 2,
    ""Akamai Technologies, Inc."": 36,
    ""Google LLC"": 12,
    ""Xhost Internet Solutions LP"": 8,
    ""MAYTINHVPSTTT"": 1,
    ""ColocationX Ltd."": 6,
    ""Chinanet"": 1,
    ""DigitalOcean, LLC"": 667,
    ""Hostmaster, Ltd."": 3,
    ""Hangzhou Alibaba Advertising Co"": 7,
    ""InfoSphere"": 2,
    ""Horizon Scope Mobile Telecom WLL"": 2,
    ""Zayo Bandwidth"": 2,
    ""China Mobile Communications Corporation"": 1,
    ""China Unicom CHINA169 Network"": 1,
    ""PT Telekomunikasi Indonesia"": 2,
    ""Chang Way Technologies Co. Limited"": 1,
    ""Akamai Technologies"": 1,
    ""Rogers Communications Canada Inc."": 1,
    ""China Unicom Chongqing Province Network"": 1,
    ""Cloudie Limited"": 4279,
    ""DataCamp Limited"": 1,
    ""Input Output Flood LLC"": 1,
    ""Majestic Hosting Solutions, LLC"": 1
  },
  ""org"": {
    ""Vietnam Posts and Telecommunications Group"": 26,
    ""Flyservers S.A"": 6,
    ""Eastern Telecommunications Philippines, Inc"": 6,
    ""Censys, Inc"": 1,
    ""VietServer Services technology company limited"": 2,
    ""Unmanaged LTD"": 6,
    ""Viettel - CHT Company Ltd"": 2,
    ""Censys, Inc."": 2,
    ""Ucloud Information Technology"": 98,
    ""Kisara LLC"": 2,
    ""Linode"": 5,
    ""Palo Alto Networks, Inc"": 12,
    ""Xhost Internet Solutions"": 3,
    ""Xhostis"": 5,
    ""Vpsttt Computer Company Limited"": 1,
    ""Makut Investments"": 3,
    ""Chinanet JS"": 1,
    ""DigitalOcean, LLC"": 667,
    ""ColocationX Ltd"": 3,
    ""Network Systems Ltd"": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""UAB Host Baltic"": 2,
    ""Aliyun Computing Co., LTD"": 7,
    ""NTTPC Communications, Inc"": 2,
    ""Horizon Scope Mobile Telecom WLL"": 2,
    ""Microsoft Corporation"": 2,
    ""China Mobile Communications Corporation"": 1,
    ""China United Network Communications Corporation Limited"": 1,
    ""Telekomunikasi Indonesia"": 2,
    ""Chang Way Technologies Co. Limited"": 1,
    ""Linode, LLC"": 32,
    ""Rogers Communications Canada Inc"": 1,
    ""Unknown"": 1,
    ""Cloudie Limited"": 4279,
    ""CDN77 - Frankfurt POP"": 1,
    ""DemonVPS"": 1,
    ""Majestic Hosting Solutions, LLC"": 1
  },
  ""regionName"": {
    ""Hanoi"": 28,
    ""Kaunas"": 6,
    ""Metro Manila"": 7,
    ""Michigan"": 1,
    ""Budapest"": 6,
    ""Ho Chi Minh"": 3,
    ""New York"": 1,
    ""Virginia"": 103,
    ""Moscow"": 3,
    ""Central Singapore"": 5,
    ""California"": 12,
    ""North Holland"": 677,
    ""Jiangsu"": 2,
    ""Vilnius"": 2,
    ""Ontario"": 4,
    ""Beijing"": 8,
    ""Tokyo"": 2,
    ""Baghdad"": 2,
    ""Jakarta"": 2,
    ""North West"": 33,
    ""Chongqing"": 1,
    ""Hesse"": 2,
    ""Central and Western District"": 4279,
    ""Arizona"": 1,
    ""Texas"": 1
  },
  ""country"": {
    ""Vietnam"": 31,
    ""Lithuania"": 8,
    ""Philippines"": 7,
    ""United States"": 119,
    ""Hungary"": 6,
    ""Russia"": 3,
    ""Singapore"": 38,
    ""The Netherlands"": 677,
    ""China"": 11,
    ""Canada"": 4,
    ""Japan"": 2,
    ""Iraq"": 2,
    ""Indonesia"": 2,
    ""Germany"": 2,
    ""Hong Kong"": 4279
  },
  ""account"": {
    ""hello"": 61,
    ""Test"": 15,
    ""(empty)"": 5,
    ""Domain"": 18,
    ""Administrator"": 99,
    ""Admin"": 94,
    ""Whatuptime.com"": 105,
    ""Jakartakini123#"": 97,
    ""Hello World"": 103,
    ""TinHocThucHanh"": 98,
    ""Hey"": 114,
    ""TqdafELom"": 1,
    ""CKAsav"": 1,
    ""AZWnqK"": 1,
    ""Administr"": 7,
    ""MvRwHglTn"": 1,
    ""pHmxLi"": 1,
    ""MUonti"": 1,
    ""John"": 84,
    ""vdTdHyjXT"": 1,
    ""RGhzvr"": 1,
    ""rTwGRL"": 1,
    ""2963199753"": 4279,
    ""CozHFkLCR"": 1,
    ""gihvaI"": 1,
    ""ssagXe"": 1
  },
  ""keyboard"": {
    ""Unknown"": 5191
  },
  ""client_build"": {
    ""Unknown"": 5191
  },
  ""client_name"": {
    ""Unknown"": 5191
  },
  ""ip_type"": {
    ""Unknown"": 66,
    ""proxy"": 10,
    ""hosting"": 5104,
    ""mobile"": 6,
    ""hosting & proxy"": 5
  }
}"
9xxNga5f,🤑 G2A.com Free Gift Card Guide May 2024 FIX 💰,ssss50w,GetText,Sunday 5th of May 2024 07:03:55 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view?usp=sharing
 
Working as of:
06 May 2024"
ah3W3g81,Untitled,CyMC888,Lua,Sunday 5th of May 2024 06:32:07 PM CDT,"if not host:isHost() then return end

local panels = require('panels.main')



local main = panels.newPage('main')



--                                                              Functions

function pings.toggleGlitch(t, self)

    animations.model.glitch:setPlaying(t)

    print(t)

    if t then

        host:setActionbar('Glitch Animation : True')

    else

        host:setActionbar('Glitch Animation : False')

    end
end



panels.setPage(main)

main:newText():setText('Avatar Settings'):setSize(1.5, 1.5):setMargin(4)
main:newToggle():setText('Glitch Effect'):onToggle(pings.toggleGlitch)   "
jafVVLKv,Untitled,xaxxy0000,PHP,Sunday 5th of May 2024 06:11:11 PM CDT,"<?php
define('OAUTH2_CLIENT_ID', '');
define('OAUTH2_CLIENT_SECRET', '');
define('GUILD_ID', '');
define('BOT_TOKEN', '');

// Minimalized code
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
ini_set('max_execution_time', 300);
error_reporting(E_ALL);

function apiRequest($url, $post=FALSE, $headers=array()) {
	$ch = curl_init();
	curl_setopt_array($ch, [
		CURLOPT_URL => $url,
		CURLOPT_IPRESOLVE => CURL_IPRESOLVE_V4,
		CURLOPT_RETURNTRANSFER => TRUE,
		CURLOPT_HTTPHEADER => $headers,
	]);
	if($post) {
		curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($post));
	}
	if(session('access_token')) {
		$headers[] = 'Authorization: Bearer ' . session('access_token');
	}
	curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
	$response = curl_exec($ch);
	return json_decode($response, true);
}

function logout($url, $data=array()) {
		$ch = curl_init();
		curl_setopt_array($ch, [
				CURLOPT_URL => $url,
				CURLOPT_POST => TRUE,
				CURLOPT_RETURNTRANSFER => TRUE,
				CURLOPT_IPRESOLVE => CURL_IPRESOLVE_V4,
				CURLOPT_POSTFIELDS => http_build_query($data),
				CURLOPT_HTTPHEADER => ['Content-Type: application/x-www-form-urlencoded'],
		]);
		$response = curl_exec($ch);
		return json_decode($response);
}

function addGuildMember($userId, $accessToken) {
		$headers = [
				""Authorization: Bot "".BOT_TOKEN,
				""Content-Type: application/json""
		];
		$data = [
				""access_token"" => $accessToken
		];
		$dataString = json_encode($data);
		$ch = curl_init();
		curl_setopt_array($ch, [
				CURLOPT_URL => ""https://discord.com/api/v9/guilds/"".GUILD_ID.""/members/{$userId}"",
				CURLOPT_CUSTOMREQUEST => ""PUT"",
				CURLOPT_POSTFIELDS => $dataString,
				CURLOPT_RETURNTRANSFER => true,
				CURLOPT_HTTPHEADER => $headers,
		]);
		$result = curl_exec($ch);
		$statusCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
		curl_close($ch);
	return $statusCode;
}

function get($key, $default=NULL) {
	return array_key_exists($key, $_GET) ? $_GET[$key] : $default;
}

function session($key, $default=NULL) {
	return array_key_exists($key, $_SESSION) ? $_SESSION[$key] : $default;
}
function getSessionCookies() {
    $url = 'https:///auth/session';
    $data = array(
        'username' => '',
        'password' => ''
    );
    $ch = curl_init();
    curl_setopt_array($ch, array(
        CURLOPT_URL => $url,
        CURLOPT_POST => 1,
        CURLOPT_POSTFIELDS => json_encode($data),
        CURLOPT_RETURNTRANSFER => true,
        CURLOPT_HEADER => true,
        CURLOPT_SSL_VERIFYHOST => 0,
        CURLOPT_SSL_VERIFYPEER => 0,
        CURLOPT_HTTPHEADER => array(
            'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:125.0) Gecko/20100101 Firefox/125.0',
            'Accept: */*',
            'Accept-Language: en-GB,en;q=0.5',
            'Accept-Encoding: gzip, deflate, br',
            'Content-Type: application/json',
            'Origin: https://',
            'Connection: keep-alive',
            'Referer: https:///login',
            'Sec-Fetch-Dest: empty',
            'Sec-Fetch-Mode: cors',
            'Sec-Fetch-Site: same-origin',
            'Pragma: no-cache',
            'Cache-Control: no-cache',
            'TE: trailers'
        )
    ));
    $response = curl_exec($ch);
    curl_close($ch);
    preg_match_all('/^Set-Cookie:\s*([^;]*)/mi', $response, $matches);
    $cookies = implode('; ', $matches[1]);
    return rtrim($cookies, '; ');
}

function getState($cookieString) {
    $ch = curl_init();
    curl_setopt_array($ch, array(
        CURLOPT_URL => 'https:///state',
        CURLOPT_HTTPHEADER => array(
            'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:125.0) Gecko/20100101 Firefox/125.0',
            'Accept: application/json, text/javascript, */*; q=0.01',
            'Accept-Language: en-GB,en;q=0.5',
            'Accept-Encoding: gzip, deflate, br',
            'X-Requested-With: XMLHttpRequest',
            'Connection: keep-alive',
            'Referer: https:///',
            'Cookie: '.$cookieString,
            'Sec-Fetch-Dest: empty',
            'Sec-Fetch-Mode: cors',
            'Sec-Fetch-Site: same-origin',
            'Pragma: no-cache',
            'Cache-Control: no-cache',
            'TE: trailers'
        ),
        CURLOPT_SSL_VERIFYHOST => 0,
        CURLOPT_SSL_VERIFYPEER => 0,
        CURLOPT_RETURNTRANSFER => true
    ));
    $state = json_decode(curl_exec($ch), true);
    curl_close($ch);
    return $state;
}

function updateUser($cookieString, $state, $username, $email) {
    $ch = curl_init();
    curl_setopt_array($ch, array(
        CURLOPT_URL => 'https:///user/66350424beba60ae95d50f1a',
        CURLOPT_CUSTOMREQUEST => 'POST',
        CURLOPT_HTTPHEADER => array(
            'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:125.0) Gecko/20100101 Firefox/125.0',
            'Accept: application/json, text/javascript, */*; q=0.01',
            'Accept-Language: en-GB,en;q=0.5',
            'Accept-Encoding: gzip, deflate, br',
            'Content-Type: application/json',
            'Csrf-Token: ' . $state['csrf_token'],
            'X-Requested-With: XMLHttpRequest',
            'Origin: https://',
            'Connection: keep-alive',
            'Referer: https:///',
            'Cookie: ' . $cookieString,
            'Sec-Fetch-Dest: empty',
            'Sec-Fetch-Mode: cors',
            'Sec-Fetch-Site: same-origin',
            'Pragma: no-cache',
            'Cache-Control: no-cache',
            'TE: trailers'
        ),
        CURLOPT_SSL_VERIFYHOST => 0,
        CURLOPT_SSL_VERIFYPEER => 0,
        CURLOPT_POSTFIELDS => '{""id"":null,""organization"":""66350424beba60ae95d50f1a"",""organization_name"":null,""name"":""'.$username.'"",""email"":""'.$email.'"",""groups"":[],""last_active"":null,""gravatar"":null,""audit"":null,""type"":null,""auth_type"":""local"",""yubico_id"":"""",""status"":null,""sso"":null,""otp_auth"":null,""otp_secret"":null,""servers"":null,""disabled"":null,""network_links"":[],""dns_mapping"":null,""bypass_secondary"":false,""client_to_client"":false,""dns_servers"":[],""dns_suffix"":"""",""port_forwarding"":[],""pin"":null,""devices"":null,""mac_addresses"":[]}',
        CURLOPT_RETURNTRANSFER => true
    ));
    $pritunluser = json_decode(curl_exec($ch), true);
    curl_close($ch);
    return $pritunluser;
}
function downloadFile($cookieString) {
    $ch = curl_init();
    curl_setopt_array($ch, array(
        CURLOPT_URL => 'https:///key/66350424beba60ae95d50f1a/66375890e424adfeeb116be2.zip', // Changed URL to .zip
        CURLOPT_HTTPHEADER => array(
            'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:125.0) Gecko/20100101 Firefox/125.0',
            'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',
            'Accept-Language: en-GB,en;q=0.5',
            'Accept-Encoding: gzip, deflate, br',
            'Connection: keep-alive',
            'Referer: https:///',
            'Cookie: '.$cookieString,
            'Upgrade-Insecure-Requests: 1',
            'Sec-Fetch-Dest: document',
            'Sec-Fetch-Mode: navigate',
            'Sec-Fetch-Site: same-origin',
            'Sec-Fetch-User: ?1',
            'Pragma: no-cache',
            'Cache-Control: no-cache',
            'TE: trailers'
        ),
        CURLOPT_SSL_VERIFYHOST => 0,
        CURLOPT_SSL_VERIFYPEER => 0,
        CURLOPT_RETURNTRANSFER => false, // Directly output to browser
    ));

    curl_exec($ch);
    if(curl_errno($ch)){
        echo 'Curl error: ' . curl_error($ch);
    }
    curl_close($ch);
}
session_start();

if(get('action') == 'login') {
	$params = [
		'client_id' => OAUTH2_CLIENT_ID,
		'redirect_uri' => 'https://anti-ddos.online/',
		'response_type' => 'code',
		'scope' => 'identify email guilds.join'
	];
	$_SESSION['PortFowarding'] = get('PortFowarding');
	header('Location: https://discord.com/api/oauth2/authorize' . '?' . http_build_query($params));
	die();
}

if(get('code')) {
	$token = apiRequest('https://discord.com/api/oauth2/token', [
		'grant_type' => 'authorization_code',
		'client_id' => OAUTH2_CLIENT_ID,
		'client_secret' => OAUTH2_CLIENT_SECRET,
		'redirect_uri' => 'https://anti-ddos.online/',
		'code' => get('code')
	]);
	$logout_token = $token['access_token'];
	$_SESSION['access_token'] = $token['access_token'];
	header('Location: ' . $_SERVER['PHP_SELF']);
}
if(get('action') == 'download') {
	$cookieString = getSessionCookies();
	header('Content-Type: application/zip');
	header('Content-Disposition: attachment; filename=""vpn.zip""');
	downloadFile($cookieString);
}
if(session('access_token')) {
	$user = apiRequest('https://discord.com/api/users/@me');
	$guild_status = addGuildMember($user['id'], $_SESSION['access_token']);
	if(isset($user['id'], $user['username'], $user['email']) && !empty($user['id']) && !empty($user['username']) && !empty($user['email']) && ($guild_status == 201 || $guild_status == 204)) {
		$conn = new mysqli(""localhost"", ""antiddos_JBpTRkDZPFqH"", ""tHlN7=T&;31b"", ""antiddos_users"");
		if ($conn->connect_error) {
		  die(""Connection failed!"");
		}
		$sql = ""SELECT * FROM `users` WHERE `discord_id` LIKE '"".$user['id'].""'"";
		$result = $conn->query($sql);
		if ($result->num_rows > 0) {
			while($row = $result->fetch_assoc()) {
				$pritunl_id = $row[""pritunl_id""];
			}
		} else {
			$cookieString = getSessionCookies();
			$state = getState($cookieString);
			$pritunluser = updateUser($cookieString, $state, $user['username'], $user['email']);
			$sql = ""INSERT INTO `users` (`discord_id`, `username`, `email`, `pritunl_id`) VALUES ('"".$user['id'].""', '"".$user['username'].""', '"".$user['email'].""', '"".$pritunluser[0]['id'].""')"";
			if ($conn->query($sql) === TRUE) {
				$pritunl_id = $pritunluser[0]['id'];
			}
		}
		$conn->close();
	echo '
		<!DOCTYPE html>
		<html lang=""en"">
		<head>
			<meta property=""og:title"" content=""Free Anti-DDoS VPN"" />
			<meta property=""og:type"" content=""website"" />
			<meta property=""og:url"" content=""https://anti-ddos.online/"" />
			<meta property=""og:image"" content=""https://anti-ddos.online/icon.png"" />
			<meta property=""og:description"" content=""Free DDoS protected VPN in USA, Canada, United Kingdom, Germany, Netherlands, France, Poland and Singapore"" />
			<meta name=""theme-color"" content=""#FF0000"">
			<meta charset=""UTF-8"">
			<link rel=""apple-touch-icon"" type=""image/png"" href=""icon.png"" />
			<meta name=""apple-mobile-web-app-title"" content=""Anti-DDoS Online"">
			<link rel=""shortcut icon"" type=""image/x-icon"" href=""icon.ico"" />
			<link rel=""mask-icon"" type=""image/x-icon"" href=""icon.svg"" color=""#111"" />
			<title>Anti-DDos Online</title>
			<link rel=""stylesheet"" href=""https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.7.2/css/all.min.css"">
			<link rel=""stylesheet"" type=""text/css"" href=""style.css"">
		</head>
		<body translate=""no"">
		<div class=""container"" id=""container"">
			<div class=""form-container sign-up-container"">
				<form action=""#"">
					<h1>Additional Features</h1>
					<p>Optional UDP port fowarding<br>
					(Only available in US, UK, CA, DE1)</p>
					<button id=""login"">100% FREE</button>
				</form>
			</div>
			<div class=""form-container login-container"">
				<form action=""#"">
					<h1>Welcome '.$user['username'].'</h1>
					<h3>'.$pritunl_id.'</h3>
					<input type=""hidden"" name=""action"" value=""download"">
					<button>Download your config</button>
				</form>
			</div>
			<div class=""overlay-container"">
				<div class=""overlay"">
					<div class=""overlay-panel overlay-left"">
						<h1>OVH Locations</h1>
						<p>London, UK<br>
						Beauharnois, Canada<br>
						Frankfurt, Germany<br>
						Hillsboro, USA<br>
						Vint Hill, USA<br>
						Warszawa, Poland<br>
						Amsterdam, Netherlands<br>
						Singapore</p>
						<h1>Path Locations</h1>
						<p>Frankfurt, Germany
						</p>
					</div>
					<div class=""overlay-panel overlay-right"">
						<h1>9 Locations!</h1>
						<p>We offer free VPN access at the following locations UK, USA, Canada, Germany, Netherlands, Poland and Singapore DDoS Protected by OVH and Path Network</p>
						<button class=""ghost"" id=""moreinfo"">More Info</button>
					</div>
				</div>
			</div>
		</div>
		<script src=""script.js""></script>
		</body>
		</html>
	';
		 echo '<p><a href=""?action=logout"">Log out</a></p>';
	} else {
		header('Location: ' . $_SERVER['PHP_SELF'] . '?action=login');
	}
} else {
	echo '
		<!DOCTYPE html>
		<html lang=""en"">
		<head>
			<meta property=""og:title"" content=""Free Anti-DDoS VPN"" />
			<meta property=""og:type"" content=""website"" />
			<meta property=""og:url"" content=""https://anti-ddos.online/"" />
			<meta property=""og:image"" content=""https://anti-ddos.online/icon.png"" />
			<meta property=""og:description"" content=""Free DDoS protected VPN in USA, Canada, United Kingdom, Germany, Netherlands, France, Poland and Singapore"" />
			<meta name=""theme-color"" content=""#FF0000"">
			<meta charset=""UTF-8"">
			<link rel=""apple-touch-icon"" type=""image/png"" href=""icon.png"" />
			<meta name=""apple-mobile-web-app-title"" content=""Anti-DDoS Online"">
			<link rel=""shortcut icon"" type=""image/x-icon"" href=""icon.ico"" />
			<link rel=""mask-icon"" type=""image/x-icon"" href=""icon.svg"" color=""#111"" />
			<title>Anti-DDos Online</title>
			<link rel=""stylesheet"" href=""https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.7.2/css/all.min.css"">
			<link rel=""stylesheet"" type=""text/css"" href=""style.css"">
		</head>
		<body translate=""no"">
		<div class=""container"" id=""container"">
			<div class=""form-container sign-up-container"">
				<form action=""#"">
					<h1>Additional Features</h1>
					<p>Optional UDP port fowarding<br>
					(Only available in US, UK, CA, DE1)</p>
					<button id=""login"">100% FREE</button>
				</form>
			</div>
			<div class=""form-container login-container"">
				<form action=""#"">
					<h1>Use our free VPN</h1>
					<p>We believe you shouldn\'t have to pay to not be DDoSed online.</p>
					<h3>To get protected simply</h3>
					<input type=""hidden"" name=""action"" value=""login"">
					<button>Login With Discord</button>
				</form>
			</div>
			<div class=""overlay-container"">
				<div class=""overlay"">
					<div class=""overlay-panel overlay-left"">
						<h1>OVH Locations</h1>
						<p>London, UK<br>
						Beauharnois, Canada<br>
						Frankfurt, Germany<br>
						Hillsboro, USA<br>
						Vint Hill, USA<br>
						Warszawa, Poland<br>
						Amsterdam, Netherlands<br>
						Singapore</p>
						<h1>Path Locations</h1>
						<p>Frankfurt, Germany
						</p>
					</div>
					<div class=""overlay-panel overlay-right"">
						<h1>9 Locations!</h1>
						<p>We offer free VPN access at the following locations UK, USA, Canada, Germany, Netherlands, Poland and Singapore DDoS Protected by OVH and Path Network</p>
						<button class=""ghost"" id=""moreinfo"">More Info</button>
					</div>
				</div>
			</div>
		</div>
		<script src=""script.js""></script>
		</body>
		</html>
	';
}
if(get('action') == 'logout') {
	logout('https://discord.com/api/oauth2/token/revoke', [
		'token' => session('access_token'),
		'token_type_hint' => 'access_token',
		'client_id' => OAUTH2_CLIENT_ID,
		'client_secret' => OAUTH2_CLIENT_SECRET,
	]);
	unset($_SESSION['access_token']);
	header('Location: ' . $_SERVER['PHP_SELF']);
	die();
}
?>
"
y1eJqY0N,🤑 G2A.com Free Gift Card Guide May 2024 FIX 🤑,jusst2k4,GetText,Sunday 5th of May 2024 06:11:08 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_604352.pdf

Working as of:
05 May 2024"
qjq4bsk1,pointer.c,okpalan,C,Sunday 5th of May 2024 04:29:59 PM CDT,"// gcc -o pointer pointer.c -static -lncurses -DNCURSES_STATIC
#include <ncurses.h>

int main() {
    // Initialize ncurses
    initscr();
    cbreak(); // Line buffering disabled
    noecho(); // Don't echo user input
    keypad(stdscr, TRUE); // Enable keypad mode

    // Enable mouse events
    mousemask(ALL_MOUSE_EVENTS, NULL);
    
    // Print instructions
    mvprintw(0, 0, ""Move the mouse around the terminal window..."");

    // Track mouse events
    while (1) {
        int ch = getch();
        if (ch == KEY_MOUSE) {
            MEVENT event;
            if (getmouse(&event) == OK) {
                // Print mouse event information
                mvprintw(2, 0, ""Mouse event at (%d, %d)"", event.x, event.y);
                refresh();
            }
        }
        // Exit on 'q' key press
        if (ch == 'q')
            break;
    }

    // Cleanup
    endwin();

    return 0;
}
"
hRf3gQ0b,TreeManager.cs,shoodymon,C#,Sunday 5th of May 2024 04:13:20 PM CDT,"using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Controls;
using System.Windows.Diagnostics;

namespace Trees_CourseProject
{
    public enum TreeType { BinarySearchTree, AVLTree, RedBlackTree }
    public class TreeManager
    {
        public BinarySearchTree binarySearchTree;
        public AVLTree avlTree;
        public RedBlackTree redBlackTree;
        public TreeDrawer treeDrawer;
        public Canvas canvas;

        public TreeManager(Canvas canvas)
        { 
            this.canvas = canvas;
            binarySearchTree = new BinarySearchTree(canvas);
            avlTree = new AVLTree(canvas);
            redBlackTree = new RedBlackTree(canvas);
            treeDrawer = new TreeDrawer(canvas);
        }

        public void Insert(int value, TreeType treeType) 
        {
            switch (treeType)
            {
                case TreeType.BinarySearchTree: binarySearchTree.Insert(value); break;
                case TreeType.AVLTree:          avlTree.Insert(value);          break;
                case TreeType.RedBlackTree:     redBlackTree.Insert(value);     break; 
                default: throw new ArgumentException(""Неподдерживаемый тип дерева!"");
            }
        }

        public void Delete(int value, TreeType treeType) 
        {
            switch (treeType) 
            {
                case TreeType.BinarySearchTree: binarySearchTree.Delete(value); break;
                case TreeType.AVLTree:          avlTree.Delete(value);          break;
                case TreeType.RedBlackTree:     redBlackTree.Delete(value);     break;
                default: throw new ArgumentException(""Неподдерживаемый тип дерева!"");
            }
        }

        public bool Search(int value, TreeType treeType) 
        { switch (treeType)
            {
                case TreeType.BinarySearchTree: return binarySearchTree.Search(value);
                case TreeType.AVLTree:          return avlTree.Search(value);
                case TreeType.RedBlackTree:     return redBlackTree.Search(value);
                default: throw new ArgumentException(""Неподдерживаемый тип дерева!"");
            } 
        }

    }
}
"
JdYsx0k5,TreeDrawer.cs,shoodymon,C#,Sunday 5th of May 2024 04:12:55 PM CDT,"using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;
using System.Windows.Shapes;

namespace Trees_CourseProject
{
    public class TreeDrawer
    {
        private Canvas canvas;

        public TreeDrawer(Canvas canvas)
        {
            this.canvas = canvas;
        }

        private void DrawNode(int nodeValue, double x, double y, Brush color)
        {
            // Отрисовываем узел
            Ellipse ellipse = new Ellipse();
            ellipse.Width = 35;
            ellipse.Height = 35;
            ellipse.Stroke = Brushes.Black;
            ellipse.Fill = color;
            Canvas.SetLeft(ellipse, x - ellipse.Width / 2);
            Canvas.SetTop(ellipse, y);

            // Отрисовываем значение узла
            Border border = new Border();
            border.Child = new TextBlock
            {
                Text = nodeValue.ToString(),
                FontWeight = FontWeights.Bold,
                VerticalAlignment = System.Windows.VerticalAlignment.Center,
                HorizontalAlignment = System.Windows.HorizontalAlignment.Center,
                FontSize = 16
            };
            Canvas.SetLeft(border, x - border.ActualWidth / 2 - 4.5);
            Canvas.SetTop(border, y + ellipse.Height / 2 - border.ActualHeight / 2 - 10);

            // Добавляем узел на холст
            canvas.Children.Add(ellipse);
            canvas.Children.Add(border);
        }

        private void DrawArrow(double x1, double y1, double x2, double y2, double arrowLength)
        {
            Line line = new Line();
            line.Stroke = Brushes.Black;
            line.X1 = x1;
            line.Y1 = y1;
            line.X2 = x2;
            line.Y2 = y2;
            canvas.Children.Add(line);

            // Вычисляем угол наклона линии
            double theta = Math.Atan2(y2 - y1, x2 - x1);
            double phi = Math.PI / 6;

            // Отрисовываем треугольник стрелки
            Polygon polygon = new Polygon();
            polygon.Fill = Brushes.Black;
            PointCollection points = new PointCollection();
            points.Add(new System.Windows.Point(x2, y2));
            points.Add(new System.Windows.Point(x2 - arrowLength * Math.Cos(theta - phi), y2 - arrowLength * Math.Sin(theta - phi)));
            points.Add(new System.Windows.Point(x2 - arrowLength * Math.Cos(theta + phi), y2 - arrowLength * Math.Sin(theta + phi)));
            polygon.Points = points;
            canvas.Children.Add(polygon);
        }

        public void DrawBinarySearchTree(BinarySearchTree.TreeNode root, Canvas canvas)
        {
            canvas.Children.Clear(); // Очищаем холст перед отрисовкой нового дерева
            if (root != null)
            {
                DrawBST(root, canvas.ActualWidth / 2, 20, canvas.ActualWidth / 4, 80);
            }
        }

        public void DrawAVLTree(AVLTree.AVLNode root, Canvas canvas)
        {
            canvas.Children.Clear();
            if (root != null)
            {
                DrawAVL(root, canvas.ActualWidth / 2, 20, canvas.ActualWidth / 4, 80);
            }
        }

        public void DrawRedBlackTree(RedBlackTree.RBNode root, Canvas canvas)
        {
            canvas.Children.Clear();
            if (root != null)
            {
                DrawRB(root, canvas.ActualWidth / 2, 20, canvas.ActualWidth / 4, 80);
            }
        }

        private void DrawBST(BinarySearchTree.TreeNode node, double x, double y, double offsetX, double offsetY)
        {
            DrawNode(node.Value, x, y, Brushes.LightGreen);
            if (node.Left != null)
            {
                DrawBST(node.Left, x - offsetX, y + offsetY, offsetX / 2, offsetY);
                DrawArrow(x, y + 35, x - offsetX, y + offsetY, 10);
            }
            if (node.Right != null)
            {
                DrawBST(node.Right, x + offsetX, y + offsetY, offsetX / 2, offsetY);
                DrawArrow(x, y + 35, x + offsetX, y + offsetY, 10);
            }
        }

        private void DrawAVL(AVLTree.AVLNode node, double x, double y, double offsetX, double offsetY)
        {
            DrawNode(node.Value, x, y, Brushes.LightBlue);
            if (node.Left != null)
            {
                DrawAVL(node.Left, x - offsetX, y + offsetY, offsetX / 2, offsetY);
                DrawArrow(x, y + 35, x - offsetX, y + offsetY, 10);
            }
            if (node.Right != null)
            {
                DrawAVL(node.Right, x + offsetX, y + offsetY, offsetX / 2, offsetY);
                DrawArrow(x, y + 35, x + offsetX, y + offsetY, 10);
            }
        }

        private void DrawRB(RedBlackTree.RBNode node, double x, double y, double offsetX, double offsetY)
        {
            DrawNode(node.Value, x, y, node.NodeColor == RedBlackTree.Color.Black ? Brushes.LightGray : Brushes.Red);
            if (node.Left != null)
            {
                DrawRB(node.Left, x - offsetX, y + offsetY, offsetX / 2, offsetY);
                DrawArrow(x, y + 35, x - offsetX, y + offsetY, 10);
            }
            if (node.Right != null)
            {
                DrawRB(node.Right, x + offsetX, y + offsetY, offsetX / 2, offsetY);
                DrawArrow(x, y + 35, x + offsetX, y + offsetY, 10);
            }
        }

    }

}
"
KYHm7QCE,Полная Замена всех Авто в POLICE LosSantos,yathework,C#,Sunday 5th of May 2024 04:12:53 PM CDT,"Полная Замена всех Авто в POLICE LosSantos

PD39: new Vector3(1394.3947, 254.52072, -49.209564), new Vector3(-0.17963527, 0.02437092, 88.96284)
{""x"":1394.3947,""y"":254.52072,""z"":-49.209564}
{""x"":-0.17963527,""y"":0.02437092,""z"":90.54294}

PD23: new Vector3(1394.4269, 250.30022, -49.209465), new Vector3(-0.1787878, 0.028011005, 89.01838)
{""x"":1394.4269,""y"":250.30022,""z"":-49.209465}
{""x"":-0.1787878,""y"":0.028011005,""z"":90.54294}

PD18: new Vector3(1394.288, 246.05882, -49.21154), new Vector3(-0.21056387, 2.2963604E-05, 89.63669)
{""x"":1394.288,""y"":246.05882,""z"":-49.21154}
{""x"":-0.21056387,""y"":0.028011005,""z"":90.54294}

PD22: new Vector3(1394.2777, 241.94293, -49.21158), new Vector3(-0.2036612, 0.000110626424, 89.376526)
{""x"":1394.2777,""y"":241.94293,""z"":-49.21158}
{""x"":-0.21056387,""y"":0.00010626424,""z"":90.54294}

PD21: new Vector3(1394.193, 237.7652, -49.211838), new Vector3(-0.21033889, -0.00023236689, 88.3975)
{""x"":1394.193,""y"":237.7652,""z"":-49.211838}
{""x"":-0.21033889,""y"":-0.00023236689,""z"":90.54294}

PD25: new Vector3(1394.2236, 233.57748, -49.211563), new Vector3(-0.2047564, -4.308721E-05, 87.98603)
{""x"":1394.2236,""y"":233.57748,""z"":-49.211563}
{""x"":-0.2047564,""y"":0.00010626424,""z"":90.54294}

PD26: new Vector3(1394.3226, 229.39423, -48.88205), new Vector3(-0.044677395, 0.02408394, 88.60872)
{""x"":1394.3226,""y"":229.39423,""z"":-48.88205}
{""x"":0.000106,""y"":0.00010626424,""z"":90.54294}

PD19: new Vector3(1394.2924, 225.36066, -48.881996), new Vector3(-0.021984171, -0.000111901034, 89.12343)
{""x"":1394.2924,""y"":225.36066,""z"":-48.881996}
{""x"":0.000106,""y"":0.00010626424,""z"":90.54294}

PD27: new Vector3(1394.313, 221.08426, -48.881756), new Vector3(-0.011654911, 6.470887E-05, 89.59117)
{""x"":1394.313,""y"":221.08426,""z"":-48.881756}
{""x"":0.000106,""y"":0.00010626424,""z"":90.54294}

PD20: new Vector3(1394.3344, 216.97409, -48.882126), new Vector3(-0.023892973, -0.00018428668, 88.81284)
{""x"":1394.3344,""y"":216.97409,""z"":-48.882126}
{""x"":0.000106,""y"":0.00010626424,""z"":90.54294}

PD16: new Vector3(1394.328, 212.68948, -49.211235), new Vector3(-0.19190814, -0.00015627473, 88.82906)
{""x"":1394.328,""y"":212.68948,""z"":-49.211235}
{""x"":0.000106,""y"":0.00010626424,""z"":90.54294}

PD17: new Vector3(1394.3728, 208.64983, -49.21156), new Vector3(-0.20449667, -0.00010781766, 88.521545)
{""x"":1394.3728,""y"":208.64983,""z"":-49.21156}
{""x"":0.000106,""y"":0.00010626424,""z"":90.54294}

PD06: new Vector3(1394.4393, 204.40353, -49.21163), new Vector3(-0.22319387, 0.012766314, 90.54294)
{""x"":1394.4393,""y"":204.40353,""z"":-49.21163}
{""x"":0.000106,""y"":0.00010626424,""z"":90.54294}

PD05: new Vector3(1394.4537, 200.2628, -49.211132), new Vector3(-0.19442603, -0.007867444, 88.62802)
{""x"":1394.4537,""y"":200.2628,""z"":-49.211132}
{""x"":0.000106,""y"":0.00010626424,""z"":90.54294}

PD30: new Vector3(1394.5951, 195.05312, -49.211407), new Vector3(-0.22446232, 0.0168784, 89.33733)
{""x"":1394.5951,""y"":195.05312,""z"":-49.211407}
{""x"":0.000106,""y"":0.00010626424,""z"":90.54294}

PD08: new Vector3(1402.0328, 183.66335, -48.509327), new Vector3(0.053856127, 0.09347351, 88.584274)
{""x"":1402.0328,""y"":183.66335,""z"":-48.509327}
{""x"":0.000106,""y"":0.00010626424,""z"":90.54294}

PD38: new Vector3(1401.6616, 190.47154, -48.843777), new Vector3(0.007290302, 0.031895433, 89.18446)
{""x"":1401.6616,""y"":190.47154,""z"":-48.843777}
{""x"":0.000,""y"":0.000,""z"":90.54294}

PD29: new Vector3(1365.9987, 254.59094, -49.21153), new Vector3(-0.20246676, -0.00016358185, -91.149864)
{""x"":1365.9987,""y"":254.59094,""z"":-49.21153}
{""x"":0.000,""y"":0.000,""z"":-90.54294}

PD40: new Vector3(1365.9185, 250.55438, -49.2116), new Vector3(-0.21610126, 0.0018041444, -90.65309)
{""x"":1365.9185,""y"":250.55438,""z"":-49.2116}
{""x"":0.000,""y"":0.000,""z"":-90.54294}

PD42: new Vector3(1365.7493, 246.35323, -49.211235), new Vector3(-0.14944085, -0.00025883593, -91.50209)
{""x"":1365.7493,""y"":246.35323,""z"":-49.211235}
{""x"":0.000,""y"":0.000,""z"":-90.54294}

PD33: new Vector3(1365.6235, 242.1679, -49.211544), new Vector3(-0.22038575, 0.008466649, -90.955765)
{""x"":1365.6235,""y"":242.1679,""z"":-49.211544}
{""x"":0.000,""y"":0.000,""z"":-90.54294}

PD35: new Vector3(1365.5778, 237.93057, -49.21195), new Vector3(-0.21175851, 0.0027836454, -90.96175)
{""x"":1365.5778,""y"":237.93057,""z"":-49.21195}
{""x"":0.000,""y"":0.000,""z"":-90.54294}

PD36: new Vector3(1365.5466, 233.7469, -49.211487), new Vector3(-0.19903678, -3.445902E-05, -90.25826)
{""x"":1365.5466,""y"":233.7469,""z"":-49.211487}
{""x"":0.000,""y"":0.000,""z"":-90.54294}

PD34: new Vector3(1365.5328, 229.5224, -49.211803), new Vector3(-0.2211973, 0.012319517, -90.105736)
{""x"":1365.5328,""y"":229.5224,""z"":-49.211803}
{""x"":0.000,""y"":0.000,""z"":-90.54294}

PD09: new Vector3(1365.4341, 225.52786, -49.211483), new Vector3(-0.20022611, 4.5240613E-05, -90.76243)
{""x"":1365.4341,""y"":225.52786,""z"":-49.211483}
{""x"":0.000,""y"":0.000,""z"":-90.54294}

PD37: new Vector3(1365.4158, 221.29698, -49.211647), new Vector3(-0.22150907, 0.019011829, -92.89277)
{""x"":1365.4158,""y"":221.29698,""z"":-49.211647}
{""x"":0.000,""y"":0.000,""z"":-90.54294}

PD24: new Vector3(1365.4781, 217.11525, -49.211246), new Vector3(-0.25100744, 0.016474916, -91.55081)
{""x"":1365.4781,""y"":217.11525,""z"":-49.211246}
{""x"":0.000,""y"":0.000,""z"":-90.54294}

PD07: new Vector3(1365.4413, 212.84262, -49.211403), new Vector3(-0.20030224, -1.4029308E-05, -91.797935)
{""x"":1365.4413,""y"":212.84262,""z"":-49.211403}
{""x"":0.000,""y"":0.000,""z"":-90.54294}

PD12: new Vector3(1365.4951, 208.70715, -49.211185), new Vector3(-0.18768655, -8.169417E-05, -91.80441)
{""x"":1365.4951,""y"":208.70715,""z"":-49.211185}
{""x"":0.000,""y"":0.000,""z"":-90.54294}

PD04: new Vector3(1365.7946, 204.44145, -48.527916), new Vector3(-0.6526782, 0.012229761, -90.73618)
{""x"":1365.7946,""y"":204.44145,""z"":-48.527916}
{""x"":0.000,""y"":0.000,""z"":-90.54294}

PD03: new Vector3(1365.7644, 200.35254, -48.528393), new Vector3(-0.6815157, 0.03193302, -90.24197)
{""x"":1365.7644,""y"":200.35254,""z"":-48.528393}
{""x"":0.000,""y"":0.000,""z"":-90.54294}

PD01: new Vector3(449.6542, -981.1828, 44.578773), new Vector3(0.15004341, -0.005424142, -88.39005)
{""x"":449.6542,""y"":-981.1828,""z"":44.578773}
{""x"":0.15004341,""y"":-0.005424142,""z"":-88.39005}

POMENIATPD28KORDHAPD01: new Vector3(461.9911, -1000.59357, 43.691654), new Vector3(0, 0, -165.86513)
{""x"":461.9911,""y"":-1000.59357,""z"":43.691654}
{""x"":0.15004341,""y"":-0.005424142,""z"":-165.86513}

"
vKrCJvy3,MainWindow.xaml,shoodymon,C#,Sunday 5th of May 2024 04:12:12 PM CDT,"<Window x:Class=""Trees_CourseProject.MainWindow""
        xmlns=""http://schemas.microsoft.com/winfx/2006/xaml/presentation""
        xmlns:x=""http://schemas.microsoft.com/winfx/2006/xaml""
        xmlns:d=""http://schemas.microsoft.com/expression/blend/2008""
        xmlns:mc=""http://schemas.openxmlformats.org/markup-compatibility/2006""
        xmlns:local=""clr-namespace:Trees_CourseProject""
        mc:Ignorable=""d""
        Title=""MainWindow"" Width=""1080"" Height=""720"" WindowStartupLocation=""CenterScreen"">

    <Grid>
        <!-- Добавленный TabControl -->
        <TabControl x:Name=""MainTabControl"" Grid.Row=""0"" BorderThickness=""0"">
            
            <!-- Вкладка 1 -->
            <TabItem Header=""Tab 1"">
                <!-- Содержимое первой вкладки -->
                <!-- Оставшаяся часть, которая была внутри Grid -->
                <Grid Grid.Row=""1"">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width=""Auto""/>
                        <ColumnDefinition Width=""*""/>
                    </Grid.ColumnDefinitions>

                    <!-- Левая колонка для меню выбора типа дерева и ввода узлов -->
                    <StackPanel Grid.Column=""0"" Margin=""10"">
                        <!-- Меню выбора типа дерева -->
                        <ComboBox x:Name=""TreeTypeComboBox"" Margin=""0,0,0,10"" SelectionChanged=""TreeTypeComboBox_SelectionChanged"">
                            <ComboBoxItem Content=""Бинарное дерево поиска""/>
                            <ComboBoxItem Content=""AVL-дерево""/>
                            <ComboBoxItem Content=""Красно-черное дерево""/>
                        </ComboBox>

                        <!-- Ввод узла дерева и действия с ним -->
                        <TextBox x:Name=""nodeInputTextBox"" Margin=""0,0,0,10"" TextChanged=""TextBox_TextChanged"">
                            <TextBox.Style>
                                <Style TargetType=""TextBox"">
                                    <Style.Triggers>
                                        <Trigger Property=""IsFocused"" Value=""True"">
                                            <Setter Property=""Foreground"" Value=""Black""/>
                                        </Trigger>
                                        <Trigger Property=""IsFocused"" Value=""False"">
                                            <Setter Property=""Foreground"" Value=""LightGray""/>
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBox.Style>
                        </TextBox>

                        <Button Content=""Добавить"" Margin=""0,0,0,5"" Click=""AddButton_Click""/>
                        <Button Content=""Удалить"" Margin=""0,0,0,5"" Click=""DeleteButton_Click""/>
                        <Button Content=""Поиск"" Margin=""0,0,0,5"" Click=""SearchButton_Click""/>
                    </StackPanel>

                    <!-- Правая колонка для отрисовки дерева -->
                    <Canvas x:Name=""canvas"" Grid.Column=""1"" Margin=""10""/>
                </Grid>
            </TabItem>

            <!-- Вкладка стартового главного меню -->
            <TabItem x:Name=""StartUpMenu"">
                <TabItem.Header>
                    <StackPanel Orientation=""Horizontal"">
                        <Ellipse Height=""10"" Width=""10"" Fill=""Black"" />
                        <TextBlock Margin=""3"">StartUpMenu</TextBlock>
                    </StackPanel>
                </TabItem.Header>
                <Grid>
                    <Grid.Background>
                        <ImageBrush ImageSource=""StartUpMenuImage.jpg"" Stretch=""Fill""/>
                    </Grid.Background>
                    <Grid.RowDefinitions>
                        <RowDefinition Height=""Auto""/>
                        <RowDefinition Height=""Auto""/>
                        <RowDefinition Height=""Auto""/>
                        <RowDefinition Height=""Auto""/>
                    </Grid.RowDefinitions>
                    <!-- Меню -->
                    <TextBlock Text=""МЕНЮ"" Margin=""0,75,0,50"" FontSize=""48"" HorizontalAlignment=""Center"" FontWeight=""Bold"" Foreground=""Aqua"">
                        <TextBlock.Effect>
                            <DropShadowEffect/>
                        </TextBlock.Effect>
                    </TextBlock>
                    <!-- Кнопка ""Деревья"" -->
                    <Button x:Name=""TreesButton"" Content=""Деревья"" Margin=""0,70,0,20"" Grid.Row=""1"" Width=""200"" Height=""50"" FontSize=""24"" Background=""CornflowerBlue"" BorderThickness=""3"" HorizontalAlignment=""Center"" Click=""TreesButton_Click"" FontWeight=""Bold"">
                        <Button.Style>
                            <Style TargetType=""Button"">
                                <Style.Triggers>
                                    <Trigger Property=""IsMouseOver"" Value=""True"">
                                        <Trigger.EnterActions>
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <DoubleAnimation Storyboard.TargetProperty=""Width"" To=""220"" Duration=""0:0:0.2""/>
                                                    <ThicknessAnimation Storyboard.TargetProperty=""Margin"" To=""-20,70,-20,20"" Duration=""0:0:0.2""/>
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </Trigger.EnterActions>
                                        <Trigger.ExitActions>
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <DoubleAnimation Storyboard.TargetProperty=""Width"" To=""200"" Duration=""0:0:0.2""/>
                                                    <ThicknessAnimation Storyboard.TargetProperty=""Margin"" To=""0,70,0,20"" Duration=""0:0:0.2""/>
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </Trigger.ExitActions>
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>
                    <!-- Кнопка ""Настройки"" -->
                    <Button x:Name=""SettingsButton"" Content=""Настройки"" Margin=""0,20,0,20"" Grid.Row=""2"" Width=""200"" Height=""50"" FontSize=""24"" Background=""CornflowerBlue"" BorderThickness=""3"" HorizontalAlignment=""Center"" Click=""SettingsButton_Click"" FontWeight=""Bold"">
                        <Button.Style>
                            <Style TargetType=""Button"">
                                <Style.Triggers>
                                    <Trigger Property=""IsMouseOver"" Value=""True"">
                                        <Trigger.EnterActions>
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <DoubleAnimation Storyboard.TargetProperty=""Width"" To=""220"" Duration=""0:0:0.2""/>
                                                    <ThicknessAnimation Storyboard.TargetProperty=""Margin"" To=""-20,20,-20,20"" Duration=""0:0:0.2""/>
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </Trigger.EnterActions>
                                        <Trigger.ExitActions>
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <DoubleAnimation Storyboard.TargetProperty=""Width"" To=""200"" Duration=""0:0:0.2""/>
                                                    <ThicknessAnimation Storyboard.TargetProperty=""Margin"" To=""0,20,0,20"" Duration=""0:0:0.2""/>
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </Trigger.ExitActions>
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>
                    <!-- Кнопка ""Выход"" -->
                    <Button x:Name=""ExitButton"" Content=""Выход"" Margin=""0,20,0,20"" Grid.Row=""3"" Width=""200"" Height=""50"" FontSize=""24"" Background=""CornflowerBlue"" BorderThickness=""3"" HorizontalAlignment=""Center"" Click=""ExitButton_Click"" FontWeight=""Bold"">
                        <Button.Style>
                            <Style TargetType=""Button"">
                                <Style.Triggers>
                                    <Trigger Property=""IsMouseOver"" Value=""True"">
                                        <Trigger.EnterActions>
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <DoubleAnimation Storyboard.TargetProperty=""Width"" To=""220"" Duration=""0:0:0.2""/>
                                                    <ThicknessAnimation Storyboard.TargetProperty=""Margin"" To=""-20,20,-20,20"" Duration=""0:0:0.2""/>
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </Trigger.EnterActions>
                                        <Trigger.ExitActions>
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <DoubleAnimation Storyboard.TargetProperty=""Width"" To=""200"" Duration=""0:0:0.2""/>
                                                    <ThicknessAnimation Storyboard.TargetProperty=""Margin"" To=""0,20,0,20"" Duration=""0:0:0.2""/>
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </Trigger.ExitActions>
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>
                </Grid>
            </TabItem>
            
                <!-- Вкладка меню выбора деревьев -->
            <TabItem x:Name=""TreeSelectionMenu"">
                <TabItem.Header>
                    <StackPanel Orientation=""Horizontal"">
                        <Ellipse Height=""10"" Width=""10"" Fill=""Black"" />
                        <TextBlock Margin=""3"">TreeSelectionMenu</TextBlock>
                    </StackPanel>
                </TabItem.Header>
                <Grid>
                    <Grid.Background>
                        <ImageBrush ImageSource=""TreeSelectionMenuImage.jpeg"" Stretch=""Fill""/>
                    </Grid.Background>
                    
                    <Grid.RowDefinitions>
                        <RowDefinition Height=""100""/>
                        <RowDefinition Height=""*""/>
                        <RowDefinition Height=""100""/>
                    </Grid.RowDefinitions>

                    <TextBlock Text=""Выбор дерева"" Grid.Row=""0"" Margin =""0,0,0,15"" FontSize=""48"" HorizontalAlignment=""Center"" VerticalAlignment=""Center"" Foreground=""Aqua"" FontWeight=""Bold"">
                        <TextBlock.Effect>
                            <DropShadowEffect/>
                        </TextBlock.Effect>
                    </TextBlock>

                    <StackPanel Grid.Row=""1"" Orientation=""Horizontal"">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width=""1*""/>
                                <ColumnDefinition Width=""1*""/>
                                <ColumnDefinition Width=""1*""/>
                            </Grid.ColumnDefinitions>

                            <Button x:Name=""BSTreeButton"" Grid.Column=""0"" Width=""200"" Height=""250"" HorizontalAlignment=""Center"" VerticalAlignment=""Center"" Margin=""80"" FontSize=""22"" BorderBrush=""Black"" BorderThickness=""5"" Click=""BSTreeButton_Click"">
                                <TextBlock TextAlignment=""Center"" Foreground=""Black"" FontWeight=""Bold"" FontSize=""24""> Бинарное <LineBreak/> дерево поиска </TextBlock>
                                <Button.Background>
                                    <VisualBrush>
                                        <VisualBrush.Visual>
                                            <!-- Изображение с размытием -->
                                            <Image Source=""BinarySearchTree.png"">
                                                <Image.Effect>
                                                    <!-- Фильтр размытия для изображения -->
                                                    <BlurEffect Radius=""10"" KernelType=""Box""/>
                                                </Image.Effect>
                                            </Image>
                                        </VisualBrush.Visual>
                                    </VisualBrush>
                                </Button.Background>
                            </Button>

                            <Button x:Name=""AVLtreeButton"" Content=""АВЛ - дерево"" Grid.Column=""1"" Width=""200"" Height=""250"" HorizontalAlignment=""Center"" VerticalAlignment=""Center"" Margin=""80"" FontSize=""22"" FontWeight=""Bold"" BorderBrush=""Black"" BorderThickness=""5"" Click=""AVLtreeButton_Click"" >
                                <Button.Background>
                                    <VisualBrush>
                                        <VisualBrush.Visual>
                                            <!-- Изображение с размытием -->
                                            <Image Source=""AVLtree.png"">
                                                <Image.Effect>
                                                    <!-- Фильтр размытия для изображения -->
                                                    <BlurEffect Radius=""15"" KernelType=""Box""/>
                                                </Image.Effect>
                                            </Image>
                                        </VisualBrush.Visual>
                                    </VisualBrush>
                                </Button.Background>
                            </Button>
                            
                            <Button x:Name=""RBtreeButton"" Content=""КЧ - дерево"" Grid.Column=""2"" Width=""200"" Height=""250"" HorizontalAlignment=""Center"" VerticalAlignment=""Center"" Margin=""80"" FontSize=""22"" FontWeight=""Bold"" BorderBrush=""Black"" BorderThickness=""5"" Foreground=""Blue"" Click=""RBtreeButton_Click"">
                                <Button.Background>
                                    <VisualBrush>
                                        <VisualBrush.Visual>
                                            <!-- Изображение с размытием -->
                                            <Image Source=""RBtree.png"">
                                                <Image.Effect>
                                                    <!-- Фильтр размытия для изображения -->
                                                    <BlurEffect Radius=""15"" KernelType=""Box""/>
                                                </Image.Effect>
                                            </Image>
                                        </VisualBrush.Visual>
                                    </VisualBrush>
                                </Button.Background>
                            </Button>
                        </Grid>
                    </StackPanel>

                    <Button x:Name=""BackToMenuButton"" Grid.Row=""2"" Content=""Назад"" HorizontalAlignment=""Center"" Width=""200"" Height=""50"" BorderBrush=""Black"" BorderThickness=""3"" FontSize=""18"" FontWeight=""Bold"" Click=""BackToMenuButton_Click""/>
                </Grid>
            </TabItem>
            
                <!-- Меню выбора деревьев / бинарное дерево поиска -->
            <TabItem x:Name=""BSTree"">
                <TabItem.Header>
                    <StackPanel Orientation=""Horizontal"">
                        <Ellipse Height=""10"" Width=""10"" Fill=""Black"" />
                        <TextBlock Margin=""3"">BSTree</TextBlock>
                    </StackPanel>
                </TabItem.Header>

                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width=""1*""/>
                        <ColumnDefinition Width=""7*""/>
                    </Grid.ColumnDefinitions>
                    <GridSplitter Grid.Row=""1"" Grid.ColumnSpan=""3"" HorizontalAlignment=""Stretch"" VerticalAlignment=""Top"" Background=""LightGoldenrodYellow"" ShowsPreview=""true"" ResizeDirection=""Rows"" Height=""50""/>
                    <StackPanel Grid.Column=""0"" Background=""LightGray"">
                        <TextBlock Text=""Бинарное дерево поиска"" Grid.Row=""0"" Margin=""0,20,0,15"" FontSize=""10"" HorizontalAlignment=""Center"" VerticalAlignment=""Center"" FontWeight=""Bold""/>
                        <TextBlock Text=""Узел"" Grid.Row=""0"" Margin=""0,5,0,10"" FontSize=""14"" HorizontalAlignment=""Center"" VerticalAlignment=""Center"" FontWeight=""Bold""/>
                        <TextBox x:Name=""BSTnodeInputTextBox"" Margin=""0,0,0,10"">
                            <TextBox.Style>
                                <Style TargetType=""TextBox"">
                                    <Style.Triggers>
                                        <Trigger Property=""IsFocused"" Value=""True"">
                                            <Setter Property=""Foreground"" Value=""Black""/>
                                        </Trigger>
                                        <Trigger Property=""IsFocused"" Value=""False"">
                                            <Setter Property=""Foreground"" Value=""LightGray""/>
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBox.Style>
                        </TextBox>
                        <Button x:Name=""BSTreeAdd"" Content=""Добавить"" Margin=""5,0,5,5"" Click=""BSTreeAdd_Click""/>
                        <Button x:Name=""BSTreeDelete"" Content=""Удалить"" Margin=""5,0,5,5"" Click=""BSTreeDelete_Click""/>
                        <Button x:Name=""BStreeSearch"" Content=""Поиск"" Margin=""5,0,5,5"" Click=""BStreeSearch_Click""/> 
                    </StackPanel>
                    <Canvas x:Name=""BSTcanvas"" Grid.Column=""1"" Background=""Transparent"" ClipToBounds=""True"">
                        <!-- Здесь будет отрисовываться дерево -->
                    </Canvas>
                    <ScrollViewer Grid.Column=""1"" VerticalScrollBarVisibility=""Auto"" HorizontalScrollBarVisibility=""Auto"">
                        <ScrollViewer.Content>
                            <Canvas x:Name=""BSTcanvasContainer"" Background=""Transparent"" ClipToBounds=""True""/>
                        </ScrollViewer.Content>
                    </ScrollViewer>
                </Grid>

            </TabItem>
                <!-- Меню выбора деревьев / КЧ-дерево -->
            <TabItem x:Name=""RBtree"">
                <TabItem.Header>
                    <StackPanel Orientation=""Horizontal"">
                        <Ellipse Height=""10"" Width=""10"" Fill=""Black"" />
                        <TextBlock Margin=""3"">RBtree</TextBlock>
                    </StackPanel>
                </TabItem.Header>

                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width=""1*""/>
                        <ColumnDefinition Width=""7*""/>
                    </Grid.ColumnDefinitions>
                    <GridSplitter Grid.Row=""1"" Grid.ColumnSpan=""3"" HorizontalAlignment=""Stretch"" VerticalAlignment=""Top"" Background=""LightGoldenrodYellow"" ShowsPreview=""true"" ResizeDirection=""Rows"" Height=""50""/>
                    <StackPanel Grid.Column=""0"" Background=""LightGray"">
                        <TextBlock Text=""КЧ-дерево"" Grid.Row=""0"" Margin=""0,20,0,15"" FontSize=""10"" HorizontalAlignment=""Center"" VerticalAlignment=""Center"" FontWeight=""Bold""/>
                        <TextBlock Text=""Узел"" Grid.Row=""0"" Margin=""0,5,0,10"" FontSize=""14"" HorizontalAlignment=""Center"" VerticalAlignment=""Center"" FontWeight=""Bold""/>
                        <TextBox x:Name=""RBnodeInputTextBox"" Margin=""0,0,0,10"">
                            <TextBox.Style>
                                <Style TargetType=""TextBox"">
                                    <Style.Triggers>
                                        <Trigger Property=""IsFocused"" Value=""True"">
                                            <Setter Property=""Foreground"" Value=""Black""/>
                                        </Trigger>
                                        <Trigger Property=""IsFocused"" Value=""False"">
                                            <Setter Property=""Foreground"" Value=""LightGray""/>
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBox.Style>
                        </TextBox>
                        <Button x:Name=""RBreeAdd"" Content=""Добавить"" Margin=""5,0,5,5"" Click=""RBreeAdd_Click""/>
                        <Button x:Name=""RBreeDelete"" Content=""Удалить"" Margin=""5,0,5,5"" Click=""RBreeDelete_Click""/>
                        <Button x:Name=""RBtreeSearch"" Content=""Поиск"" Margin=""5,0,5,5"" Click=""RBtreeSearch_Click""/>
                    </StackPanel>
                    <Canvas x:Name=""RBcanvas"" Grid.Column=""1"" Background=""Transparent"" ClipToBounds=""True"">
                        <!-- Здесь будет отрисовываться дерево -->
                    </Canvas>
                    <ScrollViewer Grid.Column=""1"" VerticalScrollBarVisibility=""Auto"" HorizontalScrollBarVisibility=""Auto"">
                        <ScrollViewer.Content>
                            <Canvas x:Name=""RBcanvasContainer"" Background=""Transparent"" ClipToBounds=""True""/>
                        </ScrollViewer.Content>
                    </ScrollViewer>
                </Grid>
            </TabItem>
                <!-- Меню выбора деревьев / АВЛ-дерево -->
            <TabItem x:Name=""AVLtree"">
                <TabItem.Header>
                    <StackPanel Orientation=""Horizontal"">
                        <Ellipse Height=""10"" Width=""10"" Fill=""Black"" />
                        <TextBlock Margin=""3"">AVLtree</TextBlock>
                    </StackPanel>
                </TabItem.Header>

                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width=""1*""/>
                        <ColumnDefinition Width=""7*""/>
                    </Grid.ColumnDefinitions>
                    <GridSplitter Grid.Row=""1"" Grid.ColumnSpan=""3"" HorizontalAlignment=""Stretch"" VerticalAlignment=""Top"" Background=""LightGoldenrodYellow"" ShowsPreview=""true"" ResizeDirection=""Rows"" Height=""50""/>
                    <StackPanel Grid.Column=""0"" Background=""LightGray"">
                        <TextBlock Text=""АВЛ-дерево"" Grid.Row=""0"" Margin=""0,20,0,15"" FontSize=""10"" HorizontalAlignment=""Center"" VerticalAlignment=""Center"" FontWeight=""Bold""/>
                        <TextBlock Text=""Узел"" Grid.Row=""0"" Margin=""0,5,0,10"" FontSize=""14"" HorizontalAlignment=""Center"" VerticalAlignment=""Center"" FontWeight=""Bold""/>
                        <TextBox x:Name=""AVLnodeInputTextBox"" Margin=""0,0,0,10"">
                            <TextBox.Style>
                                <Style TargetType=""TextBox"">
                                    <Style.Triggers>
                                        <Trigger Property=""IsFocused"" Value=""True"">
                                            <Setter Property=""Foreground"" Value=""Black""/>
                                        </Trigger>
                                        <Trigger Property=""IsFocused"" Value=""False"">
                                            <Setter Property=""Foreground"" Value=""LightGray""/>
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBox.Style>
                        </TextBox>
                        <Button x:Name=""AVLtreeAdd"" Content=""Добавить"" Margin=""5,0,5,5"" Click=""AVLtreeAdd_Click""/>
                        <Button x:Name=""AVLtreeDelete"" Content=""Удалить"" Margin=""5,0,5,5"" Click=""AVLtreeDelete_Click""/>
                        <Button x:Name=""AVLtreeSearch"" Content=""Поиск"" Margin=""5,0,5,5"" Click=""AVLtreeSearch_Click""/>
                    </StackPanel>
                    <Canvas x:Name=""AVLcanvas"" Grid.Column=""1"" Background=""Transparent"" ClipToBounds=""True"">
                        <!-- Здесь будет отрисовываться дерево -->
                    </Canvas>
                    <ScrollViewer Grid.Column=""1"" VerticalScrollBarVisibility=""Auto"" HorizontalScrollBarVisibility=""Auto"">
                        <ScrollViewer.Content>
                            <Canvas x:Name=""AVLcanvasContainer"" Background=""Transparent"" ClipToBounds=""True""/>
                        </ScrollViewer.Content>
                    </ScrollViewer>
                </Grid>
            </TabItem>
                <!-- Главное меню / Настройки -->
            <TabItem x:Name=""Settings"">
                <TabItem.Header>
                    <StackPanel Orientation=""Horizontal"">
                        <Ellipse Height=""10"" Width=""10"" Fill=""Black"" />
                        <TextBlock Margin=""3"">Settings</TextBlock>
                    </StackPanel>
                </TabItem.Header>
            </TabItem>
        </TabControl>

    </Grid>
</Window>
"
v0QsxNUn,MainWindow.xaml.cs,shoodymon,C#,Sunday 5th of May 2024 04:11:30 PM CDT,"using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using static Trees_CourseProject.MainWindow;

namespace Trees_CourseProject
{
    public class BinarySearchTree
    {
        public class TreeNode
        {
            private int value;

            // Открыто доступное свойство Value, которое обеспечивает доступ к значению переменной value извне класса.
            public int Value
            {
                get { return value; }
                set
                {
                    if (value >= -99 && value <= 99)
                    {
                        this.value = value;
                    }
                    else
                    {
                        throw new ArgumentOutOfRangeException(""Value must be between -99 and 99"");
                    }
                }
            }

            public TreeNode Left { get; set; }
            public TreeNode Right { get; set; }

            // Конструктор с одним аргументом для инициализации значения узла
            public TreeNode(int value)
            {
                Value = value;
                Left = null;
                Right = null;
            }
        }

        public TreeNode root;
        private Canvas canvas;

        public BinarySearchTree(Canvas canvas)
        {
            root = null;
            this.canvas = canvas;
        }

        // Метод для добавления значения в дерево
        public void Insert(int value)
        {
            root = Insert(root, value);
            Console.WriteLine($""Inserted node with value {value}"");
        }

        // Вспомогательный метод для рекурсивного добавления значения в дерево
        private TreeNode Insert(TreeNode node, int value)
        {
            if (node == null)
            {
                node = new TreeNode(value);
            }
            else if (value < node.Value)
            {
                node.Left = Insert(node.Left, value);
            }
            else if (value > node.Value)
            {
                node.Right = Insert(node.Right, value);
            }
            // Если значение уже существует в дереве, ничего не делаем
            return node;
        }

        // Метод для удаления значения из дерева
        public void Delete(int value)
        {
            root = Delete(root, value);
            Console.WriteLine($""Deleted node with value {value}"");
        }

        // Вспомогательный метод для рекурсивного удаления значения из дерева
        private TreeNode Delete(TreeNode node, int value)
        {
            if (node == null)
            {
                return null;
            }
            else if (value < node.Value)
            {
                node.Left = Delete(node.Left, value);
            }
            else if (value > node.Value)
            {
                node.Right = Delete(node.Right, value);
            }
            else
            {
                // Узел найден, начинаем процесс удаления
                if (node.Left == null)
                {
                    return node.Right;
                }
                else if (node.Right == null)
                {
                    return node.Left;
                }
                else
                {
                    // У узла есть оба потомка
                    // Находим наименьший узел в правом поддереве (или наибольший в левом поддереве)
                    TreeNode minRight = FindMin(node.Right);
                    // Копируем значение найденного узла в текущий узел
                    node.Value = minRight.Value;
                    // Рекурсивно удаляем найденный узел
                    node.Right = Delete(node.Right, minRight.Value);
                }
            }
            return node;
        }

        // Метод для поиска наименьшего значения в дереве
        private TreeNode FindMin(TreeNode node)
        {
            while (node.Left != null)
            {
                node = node.Left;
            }
            return node;
        }

        // Метод для поиска значения в дереве
        public bool Search(int value)
        {
            return Search(root, value);
        }

        // Вспомогательный метод для рекурсивного поиска значения в дереве
        private bool Search(TreeNode node, int value)
        {
            if (node == null)
            {
                return false;
            }
            else if (node.Value == value)
            {
                return true;
            }
            else if (value < node.Value)
            {
                return Search(node.Left, value);
            }
            else
            {
                return Search(node.Right, value);
            }
        }

        // Методы для обхода дерева в различных порядках (прямом, симметричном и обратном)
        public void PreOrderTraversal()
        {
            PreOrderTraversal(root);
        }

        private void PreOrderTraversal(TreeNode node)
        {
            if (node != null)
            {
                Console.Write(node.Value + "" "");
                PreOrderTraversal(node.Left);
                PreOrderTraversal(node.Right);
            }
        }

        public void InOrderTraversal()
        {
            InOrderTraversal(root);
        }

        private void InOrderTraversal(TreeNode node)
        {
            if (node != null)
            {
                InOrderTraversal(node.Left);
                Console.Write(node.Value + "" "");
                InOrderTraversal(node.Right);
            }
        }

        public void PostOrderTraversal()
        {
            PostOrderTraversal(root);
        }

        private void PostOrderTraversal(TreeNode node)
        {
            if (node != null)
            {
                PostOrderTraversal(node.Left);
                PostOrderTraversal(node.Right);
                Console.Write(node.Value + "" "");
            }
        }

    }

    public class AVLTree
    {
        public class AVLNode
        {
            public int Value;
            public int Height;
            public AVLNode Left;
            public AVLNode Right;

            public AVLNode(int value)
            {
                Value = value;
                Height = 1;
                Left = null;
                Right = null;
            }
        }

        public AVLNode root;
        private Canvas canvas;

        public AVLTree(Canvas canvas)
        {
            root = null;
            this.canvas = canvas;
        }

        private int Height(AVLNode node)
        {
            return node == null ? 0 : node.Height;
        }

        private int BalanceFactor(AVLNode node)
        {
            return Height(node.Left) - Height(node.Right);
        }

        private void UpdateHeight(AVLNode node)
        {
            node.Height = 1 + Math.Max(Height(node.Left), Height(node.Right));
        }

        private AVLNode RightRotate(AVLNode pivot)
        {
            AVLNode newRoot = pivot.Left;
            pivot.Left = newRoot.Right;
            newRoot.Right = pivot;
            UpdateHeight(pivot);
            UpdateHeight(newRoot);
            return newRoot;
        }

        private AVLNode LeftRotate(AVLNode newRoot)
        {
            AVLNode pivot = newRoot.Right;
            newRoot.Right = pivot.Left;
            pivot.Left = newRoot;
            UpdateHeight(newRoot);
            UpdateHeight(pivot);
            return pivot;
        }

        private AVLNode Insert(AVLNode node, int value)
        {
            if (node == null)
                return new AVLNode(value);

            if (value < node.Value)
                node.Left = Insert(node.Left, value);
            else if (value > node.Value)
                node.Right = Insert(node.Right, value);
            else
                return node; // Значение уже существует в дереве, ничего не делаем

            UpdateHeight(node);

            int balance = BalanceFactor(node);

            // Перебалансировка дерева, если необходимо
            if (balance > 1)
            {
                // Вставленное значение меньше значения в левом поддереве
                if (value < node.Left.Value)
                    return RightRotate(node);
                // Вставленное значение больше значения в левом поддереве
                if (value > node.Left.Value)
                {
                    node.Left = LeftRotate(node.Left);
                    return RightRotate(node);
                }
            }
            else if (balance < -1)
            {
                // Вставленное значение больше значения в правом поддереве
                if (value > node.Right.Value)
                    return LeftRotate(node);
                // Вставленное значение меньше значения в правом поддереве
                if (value < node.Right.Value)
                {
                    node.Right = RightRotate(node.Right);
                    return LeftRotate(node);
                }
            }

            return node;
        }

        public void Insert(int value)
        {
            root = Insert(root, value);
        }

        private AVLNode Delete(AVLNode root, int key)
        {
            if (root == null)
                return root;

            if (key < root.Value)
                root.Left = Delete(root.Left, key);
            else if (key > root.Value)
                root.Right = Delete(root.Right, key);
            else
            {
                if (root.Left == null || root.Right == null)
                {
                    AVLNode temp = root.Left != null ? root.Left : root.Right;

                    // Узел с одним или без детей
                    if (temp == null)
                    {
                        temp = root;
                        root = null;
                    }
                    else
                        root = temp;
                }
                else
                {
                    // Узел с двумя детьми: получаем наименьший узел в правом поддереве
                    AVLNode temp = MinValueNode(root.Right);

                    // Копируем данные наименьшего узла в текущий узел
                    root.Value = temp.Value;

                    // Удаляем наименьший узел в правом поддереве
                    root.Right = Delete(root.Right, temp.Value);
                }
            }

            // Если дерево состоит только из одного узла, возвращаем его
            if (root == null)
                return root;

            // Обновляем высоту текущего узла
            UpdateHeight(root);

            // Получаем коэффициент балансировки текущего узла
            int balance = BalanceFactor(root);

            // Перебалансировка дерева, если необходимо
            if (balance > 1 && BalanceFactor(root.Left) >= 0)
                return RightRotate(root);

            if (balance < -1 && BalanceFactor(root.Right) <= 0)
                return LeftRotate(root);

            if (balance > 1 && BalanceFactor(root.Left) < 0)
            {
                root.Left = LeftRotate(root.Left);
                return RightRotate(root);
            }

            if (balance < -1 && BalanceFactor(root.Right) > 0)
            {
                root.Right = RightRotate(root.Right);
                return LeftRotate(root);
            }

            return root;
        }

        private AVLNode MinValueNode(AVLNode node)
        {
            AVLNode current = node;
            while (current.Left != null)
                current = current.Left;
            return current;
        }

        public void Delete(int key)
        {
            root = Delete(root, key);
        }

        public bool Search(int key)
        {
            return Search(root, key);
        }

        private bool Search(AVLNode node, int key)
        {
            if (node == null)
                return false;
            if (key == node.Value)
                return true;
            if (key < node.Value)
                return Search(node.Left, key);
            else
                return Search(node.Right, key);
        }

    }

    public class RedBlackTree
    {
        public enum Color { Red, Black }

        public class RBNode
        {
            public int Value;
            public Color NodeColor;
            public RBNode Left;
            public RBNode Right;
            public RBNode Parent;

            public RBNode(int value)
            {
                Value = value;
                NodeColor = Color.Red;
                Left = null;
                Right = null;
                Parent = null;
            }
        }

        public RBNode root;
        private Canvas canvas;

        public RedBlackTree(Canvas canvas)
        {
            root = null;
            this.canvas = canvas;
        }

        // Методы вставки, удаления и балансировки дерева будут здесь
        public void Insert(int value)
        {
            root = Insert(root, null, value); // Начинаем с корня, у корня нет родителя
                                              // Корень всегда должен быть черным, чтобы удовлетворить свойства красно-черного дерева
            root.NodeColor = Color.Black;
            Console.WriteLine($""Inserted node with value {value}"");
        }

        private RBNode Insert(RBNode node, RBNode parent, int value)
        {
            if (node == null)
            {
                node = new RBNode(value);
                node.Parent = parent;
                return node;
            }

            if (value < node.Value)
                node.Left = Insert(node.Left, node, value);
            else if (value > node.Value)
                node.Right = Insert(node.Right, node, value);
            else
                return node; // Значение уже существует в дереве, ничего не делаем

            // Проверяем и исправляем свойства красно-черного дерева
            if (node.Parent != null && node.Parent.NodeColor == Color.Red)
            {
                RBNode parentNode = node.Parent; // Изменено имя переменной
                RBNode grandparent = parentNode.Parent;
                RBNode uncle = grandparent.Left == parentNode ? grandparent.Right : grandparent.Left;

                // Случай 1: Дядя красный
                if (uncle != null && uncle.NodeColor == Color.Red)
                {
                    parentNode.NodeColor = Color.Black;
                    uncle.NodeColor = Color.Black;
                    grandparent.NodeColor = Color.Red;
                    return Insert(grandparent, grandparent.Parent, node.Value); // Продолжаем проверку свойств с дедушкой
                }

                // Случай 2: Дядя черный, текущий узел - правый потомок своего родителя
                if (parentNode.Right == node && grandparent.Left == parentNode)
                {
                    parentNode = LeftRotate(parentNode);
                    node = node.Left;
                }
                // Случай 3: Дядя черный, текущий узел - левый потомок своего родителя
                else if (parentNode.Left == node && grandparent.Right == parentNode)
                {
                    parentNode = RightRotate(parentNode);
                    node = node.Right;
                }

                // Случай 4: Дядя черный, текущий узел - левый потомок своего родителя
                parentNode.NodeColor = Color.Black;
                grandparent.NodeColor = Color.Red;
                if (parentNode.Left == node && grandparent.Left == parentNode)
                    grandparent = RightRotate(grandparent);
                else
                    grandparent = LeftRotate(grandparent);
            }


            return node;
        }

        public bool Search(int value)
        {
            return Search(root, value);
        }

        private bool Search(RBNode node, int value)
        {
            if (node == null)
                return false;

            if (value == node.Value)
                return true;

            if (value < node.Value)
                return Search(node.Left, value);
            else
                return Search(node.Right, value);
        }

        public void Delete(int value)
        {
            root = Delete(root, value);
        }

        private RBNode Delete(RBNode node, int value)
        {
            if (node == null)
                return null;

            if (value < node.Value)
                node.Left = Delete(node.Left, value);
            else if (value > node.Value)
                node.Right = Delete(node.Right, value);
            else
            {
                // Найден узел для удаления
                if (node.Left == null)
                    return node.Right;
                else if (node.Right == null)
                    return node.Left;

                // У узла есть оба потомка
                // Находим наименьший узел в правом поддереве (или наибольший в левом поддереве)
                RBNode minRight = FindMin(node.Right);
                // Копируем значение найденного узла в текущий узел
                node.Value = minRight.Value;
                // Рекурсивно удаляем найденный узел
                node.Right = Delete(node.Right, minRight.Value);
            }

            // Проверяем и исправляем свойства красно-черного дерева после удаления узла
            if (node.NodeColor == Color.Black)
            {
                if (node.Left != null && node.Left.NodeColor == Color.Red)
                    node.Left.NodeColor = Color.Black;
                else if (node.Right != null && node.Right.NodeColor == Color.Red)
                    node.Right.NodeColor = Color.Black;
                else
                    node = FixDoubleBlack(node);
            }

            return node;
        }

        // Вспомогательный метод для поиска наименьшего узла в дереве
        private RBNode FindMin(RBNode node)
        {
            while (node.Left != null)
                node = node.Left;
            return node;
        }

        // Вспомогательный метод для исправления двойной черной высоты узла
        private RBNode FixDoubleBlack(RBNode node)
        {
            if (node.Parent == null)
                return node;

            RBNode sibling = GetSibling(node);
            RBNode parent = node.Parent;

            if (sibling == null)
                return FixDoubleBlack(parent);

            if (sibling.NodeColor == Color.Black)
            {
                // Случай 1: Брат черный и у брата есть красный потомок
                if ((sibling.Left != null && sibling.Left.NodeColor == Color.Red) || (sibling.Right != null && sibling.Right.NodeColor == Color.Red))
                {
                    if (sibling.Left != null && sibling.Left.NodeColor == Color.Red)
                    {
                        if (parent.Left == sibling)
                        {
                            sibling.Left.NodeColor = sibling.NodeColor;
                            sibling.NodeColor = parent.NodeColor;
                            RightRotate(parent);
                        }
                        else
                        {
                            sibling.Left.NodeColor = parent.NodeColor;
                            RightRotate(sibling);
                            LeftRotate(parent);
                        }
                    }
                    else
                    {
                        if (parent.Left == sibling)
                        {
                            sibling.Right.NodeColor = parent.NodeColor;
                            LeftRotate(sibling);
                            RightRotate(parent);
                        }
                        else
                        {
                            sibling.Right.NodeColor = sibling.NodeColor;
                            sibling.NodeColor = parent.NodeColor;
                            LeftRotate(parent);
                        }
                    }
                    parent.NodeColor = Color.Black;
                }
                // Случай 2: Брат черный и у брата нет красного потомка
                else
                {
                    sibling.NodeColor = Color.Red;
                    if (parent.NodeColor == Color.Black)
                        return FixDoubleBlack(parent);
                    else
                        parent.NodeColor = Color.Black;
                }
            }
            // Случай 3: Брат красный
            else
            {
                if (parent.Left == sibling)
                    RightRotate(parent);
                else
                    LeftRotate(parent);
                parent.NodeColor = Color.Red;
                sibling.NodeColor = Color.Black;
                return FixDoubleBlack(node);
            }

            return node;
        }

        // Вспомогательный метод для получения брата узла
        private RBNode GetSibling(RBNode node)
        {
            if (node.Parent == null)
                return null;

            if (node == node.Parent.Left)
                return node.Parent.Right;
            else
                return node.Parent.Left;
        }

        private RBNode LeftRotate(RBNode node)
        {
            RBNode newRoot = node.Right;
            node.Right = newRoot.Left;
            if (newRoot.Left != null)
                newRoot.Left.Parent = node;
            newRoot.Parent = node.Parent;
            if (node.Parent == null)
                root = newRoot;
            else if (node == node.Parent.Left)
                node.Parent.Left = newRoot;
            else
                node.Parent.Right = newRoot;
            newRoot.Left = node;
            node.Parent = newRoot;
            return newRoot;
        }

        private RBNode RightRotate(RBNode node)
        {
            RBNode newRoot = node.Left;
            node.Left = newRoot.Right;
            if (newRoot.Right != null)
                newRoot.Right.Parent = node;
            newRoot.Parent = node.Parent;
            if (node.Parent == null)
                root = newRoot;
            else if (node == node.Parent.Right)
                node.Parent.Right = newRoot;
            else
                node.Parent.Left = newRoot;
            newRoot.Right = node;
            node.Parent = newRoot;
            return newRoot;
        }

    }

    /// <summary>
    /// Логика взаимодействия для MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        private TreeManager treeManager;
        private TreeDrawer treeDrawer;

        private TreeManager binarySearchTreeManager;
        private TreeManager avlTreeManager;
        private TreeManager redBlackTreeManager;

        private TreeDrawer binarySearchTreeDrawer;
        private TreeDrawer avlTreeDrawer;
        private TreeDrawer redBlackTreeDrawer;

        public MainWindow()
        {
            InitializeComponent();
            treeManager = new TreeManager(canvas);
            treeDrawer = new TreeDrawer(canvas);

            binarySearchTreeManager = new TreeManager(BSTcanvas);
            avlTreeManager = new TreeManager(AVLcanvas);
            redBlackTreeManager = new TreeManager(RBcanvas);

            binarySearchTreeDrawer = new TreeDrawer(BSTcanvas);
            avlTreeDrawer = new TreeDrawer(AVLcanvas);
            redBlackTreeDrawer = new TreeDrawer(RBcanvas);
        }

        private void TextBox_TextChanged(object sender, TextChangedEventArgs e)
        {
            TextBox textBox = (TextBox)sender;
            if (string.IsNullOrEmpty(textBox.Text))
            {
                textBox.Foreground = Brushes.LightGray;
            }
            else
            {
                textBox.Foreground = Brushes.Black;
            }
        }

        private void TreeTypeComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            canvas.Children.Clear();

            ComboBox comboBox = (ComboBox)sender;
            TreeType selectedTree = (TreeType)comboBox.SelectedIndex;

            UpdateTreeDrawing(selectedTree);
        }

        private void AddButton_Click(object sender, RoutedEventArgs e)
        {
            if (!string.IsNullOrEmpty(nodeInputTextBox.Text))
            {
                int value = int.Parse(nodeInputTextBox.Text); // Извлечение значения из поля ввода
                TreeType selectedTree = (TreeType)TreeTypeComboBox.SelectedIndex;
                treeManager.Insert(value, selectedTree);
                UpdateTreeDrawing(selectedTree);
            }
        }

        private void DeleteButton_Click(object sender, RoutedEventArgs e)
        {
            if (!string.IsNullOrEmpty(nodeInputTextBox.Text))
            {
                int value = int.Parse(nodeInputTextBox.Text);
                TreeType selectedTree = (TreeType)TreeTypeComboBox.SelectedIndex;
                treeManager.Delete(value, selectedTree);
                UpdateTreeDrawing(selectedTree);
            }
        }

        private void SearchButton_Click(object sender, RoutedEventArgs e)
        {
            if (!string.IsNullOrEmpty(nodeInputTextBox.Text))
            {
                int value = int.Parse(nodeInputTextBox.Text);
                TreeType selectedTree = (TreeType)TreeTypeComboBox.SelectedIndex;
                bool found = treeManager.Search(value, selectedTree);

                if (found)
                {
                    MessageBox.Show($""Узел со значением {value} найден в дереве."", ""Результат поиска"", MessageBoxButton.OK, MessageBoxImage.Information);
                }
                else
                {
                    MessageBox.Show($""Узел со значением {value} не найден в дереве."", ""Результат поиска"", MessageBoxButton.OK, MessageBoxImage.Information);
                }
            }
        }

        private void UpdateTreeDrawing(TreeType treeType)
        {
            switch (treeType)
            {
                case TreeType.BinarySearchTree:
                    if (MainTabControl.SelectedItem == BSTree)
                    {
                        treeDrawer.DrawBinarySearchTree(treeManager.binarySearchTree.root, BSTcanvas);
                    }
                    break;
                case TreeType.AVLTree:
                    if (MainTabControl.SelectedItem == AVLtree)
                    {
                        treeDrawer.DrawAVLTree(treeManager.avlTree.root, AVLcanvas);
                    }
                    break;
                case TreeType.RedBlackTree:
                    if (MainTabControl.SelectedItem == RBtree)
                    {
                        treeDrawer.DrawRedBlackTree(treeManager.redBlackTree.root, RBcanvas);
                    }
                    break;
            }
        }


        private void UpdateTreeDrawingTabItem(TreeType treeType)
        {
            switch (treeType)
            {
                case TreeType.BinarySearchTree:
                    if (MainTabControl.SelectedItem == BSTree)
                    {
                        treeDrawer.DrawBinarySearchTree(treeManager.binarySearchTree.root, BSTcanvas);
                    }
                    break;
                case TreeType.AVLTree:
                    if (MainTabControl.SelectedItem == AVLtree)
                    {
                        treeDrawer.DrawAVLTree(treeManager.avlTree.root, AVLcanvas);
                    }
                    break;
                case TreeType.RedBlackTree:
                    if (MainTabControl.SelectedItem == RBtree)
                    {
                        treeDrawer.DrawRedBlackTree(treeManager.redBlackTree.root, RBcanvas);
                    }
                    break;
            }
        }



        private void TreesButton_Click(object sender, RoutedEventArgs e)
        {
            TabControl mainTabControl = this.MainTabControl;
            if (mainTabControl != null)
            {
                mainTabControl.SelectedItem = mainTabControl.Items.OfType<TabItem>().FirstOrDefault(t => t.Name == ""TreeSelectionMenu"");
            }
        }

        private void SettingsButton_Click(object sender, RoutedEventArgs e)
        {
            TabControl mainTabControl = this.MainTabControl;
            if (mainTabControl != null)
            {
                mainTabControl.SelectedItem = mainTabControl.Items.OfType<TabItem>().FirstOrDefault(t => t.Name == ""Settings"");
            }
        }

        private void ExitButton_Click(object sender, RoutedEventArgs e)
        {
            Application.Current.Shutdown();
        }

        private void BSTreeButton_Click(object sender, RoutedEventArgs e)
        {
            MainTabControl.SelectedItem = BSTree;
            UpdateTreeDrawingTabItem(TreeType.BinarySearchTree);
        }

        private void AVLtreeButton_Click(object sender, RoutedEventArgs e)
        {
            MainTabControl.SelectedItem = AVLtree;
            treeDrawer.DrawAVLTree(treeManager.avlTree.root, AVLcanvas);
        }

        private void RBtreeButton_Click(object sender, RoutedEventArgs e)
        {
            MainTabControl.SelectedItem = RBtree;
            treeDrawer.DrawRedBlackTree(treeManager.redBlackTree.root, RBcanvas);
        }

        private void BackToMenuButton_Click(object sender, RoutedEventArgs e)
        {
            MainTabControl.SelectedItem = StartUpMenu;
        }

        private void BSTreeAdd_Click(object sender, RoutedEventArgs e)
        {
            if (!string.IsNullOrEmpty(BSTnodeInputTextBox.Text))
            {
                int value = int.Parse(BSTnodeInputTextBox.Text);
                treeManager.Insert(value, TreeType.BinarySearchTree);
                UpdateTreeDrawingTabItem(TreeType.BinarySearchTree);
            }
        }

        private void BSTreeDelete_Click(object sender, RoutedEventArgs e)
        {
            if (!string.IsNullOrEmpty(BSTnodeInputTextBox.Text))
            {
                int value = int.Parse(BSTnodeInputTextBox.Text);
                treeManager.Delete(value, TreeType.BinarySearchTree);
                UpdateTreeDrawingTabItem(TreeType.BinarySearchTree);
            }
        }

        private void BStreeSearch_Click(object sender, RoutedEventArgs e)
        {
            if (!string.IsNullOrEmpty(BSTnodeInputTextBox.Text))
            {
                int value = int.Parse(BSTnodeInputTextBox.Text);
                bool found = treeManager.Search(value, TreeType.BinarySearchTree);

                if (found)
                {
                    MessageBox.Show($""Узел со значением {value} найден в бинарном дереве поиска."", ""Результат поиска"", MessageBoxButton.OK, MessageBoxImage.Information);
                }
                else
                {
                    MessageBox.Show($""Узел со значением {value} не найден в бинарном дереве поиска."", ""Результат поиска"", MessageBoxButton.OK, MessageBoxImage.Information);
                }
            }
        }

        private void RBreeAdd_Click(object sender, RoutedEventArgs e)
        {
            if (!string.IsNullOrEmpty(RBnodeInputTextBox.Text))
            {
                int value = int.Parse(RBnodeInputTextBox.Text);
                treeManager.Insert(value, TreeType.RedBlackTree);
                UpdateTreeDrawingTabItem(TreeType.RedBlackTree);
            }
        }

        private void RBreeDelete_Click(object sender, RoutedEventArgs e)
        {
            if (!string.IsNullOrEmpty(RBnodeInputTextBox.Text))
            {
                int value = int.Parse(RBnodeInputTextBox.Text);
                treeManager.Delete(value, TreeType.RedBlackTree);
                UpdateTreeDrawingTabItem(TreeType.RedBlackTree);
            }
        }

        private void RBtreeSearch_Click(object sender, RoutedEventArgs e)
        {
            if (!string.IsNullOrEmpty(RBnodeInputTextBox.Text))
            {
                int value = int.Parse(RBnodeInputTextBox.Text);
                bool found = treeManager.Search(value, TreeType.RedBlackTree);

                if (found)
                {
                    MessageBox.Show($""Узел со значением {value} найден в КЧ-дереве."", ""Результат поиска"", MessageBoxButton.OK, MessageBoxImage.Information);
                }
                else
                {
                    MessageBox.Show($""Узел со значением {value} не найден в КЧ-дереве."", ""Результат поиска"", MessageBoxButton.OK, MessageBoxImage.Information);
                }
            }
        }

        private void AVLtreeAdd_Click(object sender, RoutedEventArgs e)
        {
            if (!string.IsNullOrEmpty(AVLnodeInputTextBox.Text))
            {
                int value = int.Parse(AVLnodeInputTextBox.Text);
                treeManager.Insert(value, TreeType.AVLTree);
                UpdateTreeDrawingTabItem(TreeType.AVLTree);
            }
        }

        private void AVLtreeDelete_Click(object sender, RoutedEventArgs e)
        {
            if (!string.IsNullOrEmpty(AVLnodeInputTextBox.Text))
            {
                int value = int.Parse(AVLnodeInputTextBox.Text);
                treeManager.Delete(value, TreeType.AVLTree);
                UpdateTreeDrawingTabItem(TreeType.AVLTree);
            }
        }

        private void AVLtreeSearch_Click(object sender, RoutedEventArgs e)
        {
            if (!string.IsNullOrEmpty(AVLnodeInputTextBox.Text))
            {
                int value = int.Parse(AVLnodeInputTextBox.Text);
                bool found = treeManager.Search(value, TreeType.AVLTree);

                if (found)
                {
                    MessageBox.Show($""Узел со значением {value} найден в AVL-дереве."", ""Результат поиска"", MessageBoxButton.OK, MessageBoxImage.Information);
                }
                else
                {
                    MessageBox.Show($""Узел со значением {value} не найден в AVL-дереве."", ""Результат поиска"", MessageBoxButton.OK, MessageBoxImage.Information);
                }
            }
        }
    }

}"
VWaWdeBm,Untitled,7134956,C,Sunday 5th of May 2024 03:38:53 PM CDT,"
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>
#include ""spi.h""
#include ""task.h""

// 24 MHz max SPI frequency
#define ICM426XX_MAX_SPI_CLK_HZ 24000000

#define ICM426XX_RA_REG_BANK_SEL                    0x76
#define ICM426XX_BANK_SELECT0                       0x00
#define ICM426XX_BANK_SELECT1                       0x01
#define ICM426XX_BANK_SELECT2                       0x02
#define ICM426XX_BANK_SELECT3                       0x03
#define ICM426XX_BANK_SELECT4                       0x04

#define ICM426XX_RA_PWR_MGMT0                       0x4E  // User Bank 0
#define ICM426XX_PWR_MGMT0_ACCEL_MODE_LN            (3 << 0)
#define ICM426XX_PWR_MGMT0_GYRO_MODE_LN             (3 << 2)
#define ICM426XX_PWR_MGMT0_GYRO_ACCEL_MODE_OFF      ((0 << 0) | (0 << 2))
#define ICM426XX_PWR_MGMT0_TEMP_DISABLE_OFF         (0 << 5)
#define ICM426XX_PWR_MGMT0_TEMP_DISABLE_ON          (1 << 5)

#define ICM426XX_RA_GYRO_CONFIG0                    0x4F
#define ICM426XX_RA_ACCEL_CONFIG0                   0x50

// --- Registers for gyro and acc Anti-Alias Filter ---------
#define ICM426XX_RA_GYRO_CONFIG_STATIC3             0x0C  // User Bank 1
#define ICM426XX_RA_GYRO_CONFIG_STATIC4             0x0D  // User Bank 1
#define ICM426XX_RA_GYRO_CONFIG_STATIC5             0x0E  // User Bank 1
#define ICM426XX_RA_ACCEL_CONFIG_STATIC2            0x03  // User Bank 2
#define ICM426XX_RA_ACCEL_CONFIG_STATIC3            0x04  // User Bank 2
#define ICM426XX_RA_ACCEL_CONFIG_STATIC4            0x05  // User Bank 2
// --- Register & setting for gyro and acc UI Filter --------
#define ICM426XX_RA_GYRO_ACCEL_CONFIG0              0x52  // User Bank 0
#define ICM426XX_ACCEL_UI_FILT_BW_LOW_LATENCY       (15 << 4) 
#define ICM426XX_GYRO_UI_FILT_BW_LOW_LATENCY        (15 << 0)
// ----------------------------------------------------------

#define ICM426XX_RA_GYRO_DATA_X1                    0x25  // User Bank 0
#define ICM426XX_RA_ACCEL_DATA_X1                   0x1F  // User Bank 0

#define ICM426XX_RA_INT_CONFIG                      0x14  // User Bank 0
#define ICM426XX_INT1_MODE_PULSED                   (0 << 2)
#define ICM426XX_INT1_MODE_LATCHED                  (1 << 2)
#define ICM426XX_INT1_DRIVE_CIRCUIT_OD              (0 << 1)
#define ICM426XX_INT1_DRIVE_CIRCUIT_PP              (1 << 1)
#define ICM426XX_INT1_POLARITY_ACTIVE_LOW           (0 << 0)
#define ICM426XX_INT1_POLARITY_ACTIVE_HIGH          (1 << 0)

#define ICM426XX_RA_INT_CONFIG0                     0x63  // User Bank 0
#define ICM426XX_UI_DRDY_INT_CLEAR_ON_SBR           ((0 << 5) || (0 << 4))
#define ICM426XX_UI_DRDY_INT_CLEAR_ON_SBR_DUPLICATE ((0 << 5) || (0 << 4)) // duplicate settings in datasheet, Rev 1.2.
#define ICM426XX_UI_DRDY_INT_CLEAR_ON_F1BR          ((1 << 5) || (0 << 4))
#define ICM426XX_UI_DRDY_INT_CLEAR_ON_SBR_AND_F1BR  ((1 << 5) || (1 << 4))

#define ICM426XX_RA_INT_CONFIG1                     0x64   // User Bank 0
#define ICM426XX_INT_ASYNC_RESET_BIT                4
#define ICM426XX_INT_TDEASSERT_DISABLE_BIT          5
#define ICM426XX_INT_TDEASSERT_ENABLED              (0 << ICM426XX_INT_TDEASSERT_DISABLE_BIT)
#define ICM426XX_INT_TDEASSERT_DISABLED             (1 << ICM426XX_INT_TDEASSERT_DISABLE_BIT)
#define ICM426XX_INT_TPULSE_DURATION_BIT            6
#define ICM426XX_INT_TPULSE_DURATION_100            (0 << ICM426XX_INT_TPULSE_DURATION_BIT)
#define ICM426XX_INT_TPULSE_DURATION_8              (1 << ICM426XX_INT_TPULSE_DURATION_BIT)

#define ICM426XX_RA_INT_SOURCE0                     0x65  // User Bank 0
#define ICM426XX_UI_DRDY_INT1_EN_DISABLED           (0 << 3)
#define ICM426XX_UI_DRDY_INT1_EN_ENABLED            (1 << 3)

enum gyro_fsr_e {
    INV_FSR_250DPS = 0,
    INV_FSR_500DPS,
    INV_FSR_1000DPS,
    INV_FSR_2000DPS,
    NUM_GYRO_FSR
};

enum accel_fsr_e {
    INV_FSR_2G = 0,
    INV_FSR_4G,
    INV_FSR_8G,
    INV_FSR_16G,
    NUM_ACCEL_FSR
};

typedef enum {
    ODR_CONFIG_8K = 0,
    ODR_CONFIG_4K,
    ODR_CONFIG_2K,
    ODR_CONFIG_1K,
    ODR_CONFIG_COUNT
} odrConfig_e;

typedef enum {
    AAF_CONFIG_258HZ = 0,
    AAF_CONFIG_536HZ,
    AAF_CONFIG_997HZ,
    AAF_CONFIG_1962HZ,
    AAF_CONFIG_COUNT
} aafConfig_e;

typedef struct aafConfig_s {
    uint8_t delt;
    uint16_t deltSqr;
    uint8_t bitshift;
} aafConfig_t;

// Possible output data rates (ODRs)
static uint8_t odrLUT[ODR_CONFIG_COUNT] = {  // see GYRO_ODR in section 5.6
    [ODR_CONFIG_8K] = 3,
    [ODR_CONFIG_4K] = 4,
    [ODR_CONFIG_2K] = 5,
    [ODR_CONFIG_1K] = 6,
};

// Possible gyro Anti-Alias Filter (AAF) cutoffs for ICM-42688P
static aafConfig_t aafLUT42688[AAF_CONFIG_COUNT] = {  // see table in section 5.3
    [AAF_CONFIG_258HZ]  = {  6,   36, 10 },
    [AAF_CONFIG_536HZ]  = { 12,  144,  8 },
    [AAF_CONFIG_997HZ]  = { 21,  440,  6 },
    [AAF_CONFIG_1962HZ] = { 37, 1376,  4 },
};

void spiWriteReg(uint8_t addr, uint8_t data)
{
    spi_select_chip();

    spi_send_byte(addr);
    spi_send_byte(data);

    spi_deselect_chip();
}

uint8_t spiReadReg(uint8_t addr)
{
    uint8_t t;

    spi_select_chip();

    spi_send_byte(addr);
    t = spi_send_byte(0);

    spi_deselect_chip();

    return t;
}

static void turnAGOff(void)
{
    spiWriteReg(ICM426XX_RA_PWR_MGMT0, ICM426XX_PWR_MGMT0_GYRO_ACCEL_MODE_OFF);
}

// Turn on gyro and acc on in Low Noise mode
static void turnAGOn(void)
{
    spiWriteReg(ICM426XX_RA_PWR_MGMT0, ICM426XX_PWR_MGMT0_TEMP_DISABLE_OFF | ICM426XX_PWR_MGMT0_ACCEL_MODE_LN | ICM426XX_PWR_MGMT0_GYRO_MODE_LN);
    task_wait(1);
}

static void setUserBank(const uint8_t user_bank)
{
    spiWriteReg(ICM426XX_RA_REG_BANK_SEL, user_bank & 7);
}

void icm426xxAGInit(void)
{
    SPI_Configuration();

    //accDataReg = ICM426XX_RA_ACCEL_DATA_X1;
    //gyro->gyroDataReg = ICM426XX_RA_GYRO_DATA_X1;

    // Turn off ACC and GYRO so they can be configured
    // See section 12.9 in ICM-42688-P datasheet v1.7
    setUserBank(ICM426XX_BANK_SELECT0);
    turnAGOff();

    // Configure gyro Anti-Alias Filter (see section 5.3 ""ANTI-ALIAS FILTER"")
    aafConfig_t aafConfig = aafLUT42688[AAF_CONFIG_258HZ];
    setUserBank(ICM426XX_BANK_SELECT1);
    spiWriteReg(ICM426XX_RA_GYRO_CONFIG_STATIC3, aafConfig.delt);
    spiWriteReg(ICM426XX_RA_GYRO_CONFIG_STATIC4, aafConfig.deltSqr & 0xFF);
    spiWriteReg(ICM426XX_RA_GYRO_CONFIG_STATIC5, (aafConfig.deltSqr >> 8) | (aafConfig.bitshift << 4));

    // Configure acc Anti-Alias Filter for 1kHz sample rate (see tasks.c)
    aafConfig = aafLUT42688[AAF_CONFIG_258HZ];
    setUserBank(ICM426XX_BANK_SELECT2);
    spiWriteReg(ICM426XX_RA_ACCEL_CONFIG_STATIC2, aafConfig.delt << 1);
    spiWriteReg(ICM426XX_RA_ACCEL_CONFIG_STATIC3, aafConfig.deltSqr & 0xFF);
    spiWriteReg(ICM426XX_RA_ACCEL_CONFIG_STATIC4, (aafConfig.deltSqr >> 8) | (aafConfig.bitshift << 4));

    // Configure gyro and acc UI Filters
    setUserBank(ICM426XX_BANK_SELECT0);
    spiWriteReg(ICM426XX_RA_GYRO_ACCEL_CONFIG0, ICM426XX_ACCEL_UI_FILT_BW_LOW_LATENCY | ICM426XX_GYRO_UI_FILT_BW_LOW_LATENCY);

    // Configure interrupt pin
    spiWriteReg(ICM426XX_RA_INT_CONFIG, ICM426XX_INT1_MODE_PULSED | ICM426XX_INT1_DRIVE_CIRCUIT_PP | ICM426XX_INT1_POLARITY_ACTIVE_HIGH);
    spiWriteReg(ICM426XX_RA_INT_CONFIG0, ICM426XX_UI_DRDY_INT_CLEAR_ON_SBR);

    spiWriteReg(ICM426XX_RA_INT_SOURCE0, ICM426XX_UI_DRDY_INT1_EN_ENABLED);

    uint8_t intConfig1Value = spiReadReg(ICM426XX_RA_INT_CONFIG1 | 0x80);
    // Datasheet says: ""User should change setting to 0 from default setting of 1, for proper INT1 and INT2 pin operation""
    intConfig1Value &= ~(1 << ICM426XX_INT_ASYNC_RESET_BIT);
    intConfig1Value |= (ICM426XX_INT_TPULSE_DURATION_8 | ICM426XX_INT_TDEASSERT_DISABLED);

    spiWriteReg(ICM426XX_RA_INT_CONFIG1, intConfig1Value);

    // Turn on gyro and acc on again so ODR and FSR can be configured
    turnAGOn();

    uint8_t odrConfig = odrLUT[ODR_CONFIG_1K];

    spiWriteReg(ICM426XX_RA_GYRO_CONFIG0, (3 - INV_FSR_2000DPS) << 5 | (odrConfig & 0x0F));
    task_wait(15);

    spiWriteReg(ICM426XX_RA_ACCEL_CONFIG0, (3 - INV_FSR_16G) << 5 | (odrConfig & 0x0F));
    task_wait(15);
}
"
KPHGydz3,ASP.NET Weather Example API for HiddenDevs C# application,tommarek_CZE,C#,Sunday 5th of May 2024 03:13:21 PM CDT,"using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using System.Net.Http;
using Newtonsoft.Json;

namespace testWebAplication
{
    [ApiController]
    [Route(""[controller]"")]
    public class WeatherForecastController : ControllerBase
    {

        [HttpGet(Name = ""GetWeatherForecast"")]

        // Asyncrhonous function thats return ASP.NET api data from outside API
        public async Task<IEnumerable<WeatherForecast>> Get()
        {
            var apiUrl = ""10.10.0.45/getSensorsData"";
            var weatherForecasts = await GetData(apiUrl);

            return weatherForecasts;
        }

        // Asynchronous function that fetch all data from outside api and returns it
        private async Task<IEnumerable<WeatherForecast>> GetData(string apiUrl)
        {
            // Create http client that fetches the data from outside api and awaites reponse
            using (HttpClient client = new HttpClient())
            {
                HttpResponseMessage response = await client.GetAsync(apiUrl);

                // If response retiturn succes code, desearize and assing fetched data from the outside api
                if (response.IsSuccessStatusCode)
                {
                    // Get json from response and deseralize it
                    string json = await response.Content.ReadAsStringAsync();
                    var data = JsonConvert.DeserializeObject<Data>(json);

                    // Assing all extracted varriables to the api varriables
                    var weatherForecasts = data.extractedData.Select(item => new WeatherForecast
                    {
                        localDate = DateOnly.FromDateTime(DateTime.Now),
                        localTime = TimeOnly.FromDateTime(DateTime.Now),
                        lat = Convert.ToInt32(item.Name == ""lat"" ? item.Varriable : null),
                        lon = Convert.ToInt32(item.Name == ""lon"" ? item.Varriable : null),
                        country = item.Name == ""country"" ? Convert.ToString(item.Varriable) : null,
                        region = item.Name == ""region"" ? Convert.ToString(item.Varriable) : null,
                        city = item.Name == ""city"" ? Convert.ToString(item.Varriable) : null,
                        celsiusTemperature = item.Name == ""celsiusTemperature"" ? Convert.ToInt32(item.Varriable) : 0,
                        windDegree = item.Name == ""windDegree"" ? Convert.ToInt32(item.Varriable) : 0,
                        windDir = item.Name == ""windDir"" ? Convert.ToString(item.Varriable) : null,
                        co = item.Name == ""co"" ? Convert.ToInt32(item.Varriable) : 0,
                        o3 = item.Name == ""o3"" ? Convert.ToInt32(item.Varriable) : 0,
                        windKm = item.Name == ""windKm"" ? Convert.ToInt32(item.Varriable) : 0,
                        clouds = item.Name == ""clouds"" ? Convert.ToInt32(item.Varriable) : 0,
                        pm10 = item.Name == ""pm10"" ? Convert.ToInt32(item.Varriable) : 0,
                        uvSensor = item.Name == ""uvSensor"" ? Convert.ToInt32(item.Varriable) : 0,
                        condition = item.Name == ""condition"" ? Convert.ToString(item.Varriable) : null
                    });

                    return weatherForecasts;
                }
                else
                {
                    return null;
                }
            }
        }
    }

    // Define classes for json deserialization
    public class Data
    {
        [JsonProperty(""weatherData"")]
        public apiData[] extractedData { get; set; }
    }

    public class apiData
    {
        [JsonProperty(""name"")]
        public string Name { get; set; }

        [JsonProperty(""varriable"")]
        public object Varriable { get; set; }
    }
}
"
hbwHjHeq,Sudoku v1,Catsher,Python,Sunday 5th of May 2024 03:11:11 PM CDT,"from typing import Tuple


def generate_matrixes(start_matrix: list[list[int]], nulls_passed: int = 0) -> list[list[list[int]]]:
    if nulls_passed - 1 == count_nulls_in_matrix(start_matrix):
        return [start_matrix]
    
    coords = count_coords(start_matrix, nulls_passed)
    if coords is None:
        print(""\n\n\n\n\n\n\nNI NI NI\n\n\n\n\n\n\n"")
    x, y = coords

    numbers_we_can_put = get_possible_numbers(start_matrix, x, y)

    all_new_matrixes: list[list[list[int]]] = []
    for numb in numbers_we_can_put:
        new_matrix = my_deep_copy(start_matrix)
        new_matrix[x][y] = numb
        new_generated_matrixes = generate_matrixes(new_matrix, nulls_passed + 1)
        all_new_matrixes = my_extend(all_new_matrixes, new_generated_matrixes)

    return all_new_matrixes
    

def my_extend(arr1: list[list[list]], arr2: list[list[list]]) -> list[list[list]]:
    for matrix in arr2:
        arr1.append(matrix)
    return arr1


def my_deep_copy(arr: list[list]) -> list[list]:
    new_arr = []
    for i in range(len(arr)):
        new_row = []
        for j in range(len(arr[i])):
            new_row.append(arr[i][j])
        new_arr.append(new_row)
    return new_arr

def count_coords(matrix: list[list[int]], at_null: int) -> Tuple[int, int]:
    numbers_passed = 0

    for ind1 in range(len(matrix)):
        for ind2 in range(len(matrix[ind1])):
            elem = matrix[ind1][ind2]
            if elem == 0 and numbers_passed != at_null:
                numbers_passed += 1
            elif elem == 0 and numbers_passed == at_null:
                return ind1, ind2
            

def get_possible_numbers(matrix: list[int], i: int, j: int) -> list[int]:
    possible_numbers = get_canon_numbers()

    for ind_in_row in range(len(matrix[i])):
        elem_in_row = matrix[i][ind_in_row]
        if ind_in_row != j and elem_in_row != 0:
            try_to_remove(possible_numbers, elem_in_row)

    for ind_in_col in range(len(matrix)):
        elem_in_col = matrix[ind_in_col][j]
        if ind_in_col != i and elem_in_col != 0:
            try_to_remove(possible_numbers, elem_in_col)
    
    square = get_square(matrix, i, j)
    for ind_1 in range(3):
        for ind_2 in range(3):
            elem = square[ind_1][ind_2]
            if not(ind_1 == i and ind_2==j):
                if elem != 0:
                    try_to_remove(possible_numbers, elem)

    return possible_numbers

def try_to_remove(arr: list[int], numb: int) -> list:
    if numb in arr:
        arr.remove(numb)
    
    return arr


def get_square(matrix: list[int], i: int, j: int) -> list[int]:
    square_i = i // 3
    square_j = j // 3

    square = []
    for ind_1 in range(3):
        square_row = []

        for ind_2 in range(3):
            elem = matrix[(square_i * 3) + ind_1][(square_j * 3) + ind_2]
            square_row.append(elem)

        square.append(square_row)

    return square


def count_nulls_in_matrix(matrix: list[list[int]]) -> int:
    summ = 0
    for i in range(len(matrix)):
        for j in range(len(matrix[i])):
            if matrix[i][j] == 0:
                summ += 1
    return summ


def check_if_matrix_right(matrix: list[list[int]]) -> bool:
    canon_numbers = get_canon_numbers()

    for i in range(len(matrix)):
        numbers_arr = []
        for j in range(len(matrix[i])):
            elem = matrix[i][j]
            if elem == 0:
                return False
            numbers_arr.append(elem)

        if not is_arrays_equal(numbers_arr, canon_numbers):
            return False
        
    for col_ind in range(len(matrix)):
        numbers_arr = []
        for row_ind in range(len(matrix[col_ind])):
            elem = matrix[row_ind][col_ind]
            numbers_arr.append(elem)

        if not is_arrays_equal(numbers_arr, canon_numbers):
            return False
        
    for square_i in range(3):
        for square_j in range(3):
            square = get_square(matrix, square_i * 3, square_j * 3)
            numbers_arr = []
            for i in range(3):
                for j in range(3):
                    elem = square[i][j]
                    numbers_arr.append(elem) 
            if not is_arrays_equal(numbers_arr, canon_numbers):
                return False
            
    return True
        
            
def get_canon_numbers() -> list[int]:
    return [i for i in range(1, 9 + 1)]


def is_arrays_equal(arr1: list[int], arr2: list[int]) -> bool:
    if len(arr1) != len(arr2):
        return False
    
    for i in range(len(arr1)):
        if arr1[i] != arr2[i]:
            return False
        
    return True


def sudoku(matrix):
    all_variants = generate_matrixes(matrix, 0)
    for variant in all_variants:
        if check_if_matrix_right(variant):
            return variant
        
    return matrix


if __name__ == '__main__':
    matrix =    [ [0, 0, 0, 8, 0, 0, 0, 0, 0],
                      [4, 0, 0, 0, 1, 5, 0, 3, 0],
                      [0, 2, 9, 0, 4, 0, 5, 1, 8],
                      [0, 4, 0, 0, 0, 0, 1, 2, 0],
                      [0, 0, 0, 6, 0, 2, 0, 0, 0],
                      [0, 3, 2, 0, 0, 0, 0, 9, 0],
                      [6, 9, 3, 0, 5, 0, 8, 7, 0],
                      [0, 5, 0, 4, 8, 0, 0, 0, 1],
                      [0, 0, 0, 0, 0, 3, 0, 0, 0] ]
                      
    matrix_copy =    [ [0, 0, 0, 8, 0, 0, 0, 0, 0],
                      [4, 0, 0, 0, 1, 5, 0, 3, 0],
                      [0, 2, 9, 0, 4, 0, 5, 1, 8],
                      [0, 4, 0, 0, 0, 0, 1, 2, 0],
                      [0, 0, 0, 6, 0, 2, 0, 0, 0],
                      [0, 3, 2, 0, 0, 0, 0, 9, 0],
                      [6, 9, 3, 0, 5, 0, 8, 7, 0],
                      [0, 5, 0, 4, 8, 0, 0, 0, 1],
                      [0, 0, 0, 0, 0, 3, 0, 0, 0] ]
    
    ans = sudoku(matrix)
    is_right = check_if_matrix_right(ans)
    print(is_right)
    print(ans)"
WWTUqSVD,Hurta retirho koncovka OK 3400 insufficient material Very Good,max2201111,Python,Sunday 5th of May 2024 02:50:56 PM CDT,"import chess
import time

def ten_moves_rule(board):
    """"""Custom rule to evaluate a draw condition based on the last ten moves, considering no captures or pawn moves.""""""
    history = list(board.move_stack)
    if len(history) < 10:
        return False

    for move in history[-10:]:
        if board.is_capture(move):
            return False
        # Získání objektu tahu a kontrola, zda se pohyboval pěšcem
        if board.piece_type_at(move.from_square) == chess.PAWN:
            return False
    return True

# def evaluate_board(board, depth):
#     if board.is_checkmate():
#         return -1000 + depth if board.turn == chess.WHITE else 1000 - depth
#     elif board.is_stalemate() or board.is_insufficient_material() or ten_moves_rule(board):
#         return 0
#     return 0

def evaluate_board(board, depth):
    if board.is_checkmate():
        return -1000 + depth if board.turn == chess.WHITE else 1000 - depth
    elif board.is_stalemate():
        return 2210
    elif board.is_insufficient_material():
        return 3400
    elif ten_moves_rule(board):
        return 9800
    return 7001  # Default return if none of the above conditions are met


def minimax(board, depth, alpha, beta, maximizing_player, depth2, depths, position_count, memo, start_time, last_print_time):
    current_time = time.time()
    if current_time - last_print_time[0] >= 1:
        elapsed_hours, remainder = divmod(current_time - start_time, 3600)
        elapsed_minutes, elapsed_seconds = divmod(remainder, 60)
        print(f""\r{int(elapsed_hours):02d}h {int(elapsed_minutes):02d}m {int(elapsed_seconds):02d}s"", end='', flush=True)
        last_print_time[0] = current_time

    position_count[0] += 1
    if position_count[0] % 1000000 == 0:
        print(f""\nProzkoumano {position_count[0]} pozic."")

    key = (board.fen(), maximizing_player, depth, alpha, beta)
    if key in memo:
        return memo[key]

    if depth == 0 or board.is_game_over():
        eval = evaluate_board(board, depth2)
        memo[key] = (None, eval)
        return None, eval

    best_move = None
    if maximizing_player:
        max_eval = float('-inf')
        for move in board.legal_moves:
            board.push(move)
            _, eval = minimax(board, depth - 1, alpha, beta, False, depth2 + 1, depths, position_count, memo, start_time, last_print_time)
            board.pop()
            if eval > max_eval:
                max_eval = eval
                best_move = move
            alpha = max(alpha, eval)
            if beta <= alpha:
                break
        memo[key] = (best_move, max_eval)
        if depth2 not in depths:
            depths.append(depth2)
            print(f""\nHloubka rekurze: {depth2}"")
        return best_move, max_eval
    else:
        min_eval = float('inf')
        for move in board.legal_moves:
            board.push(move)
            _, eval = minimax(board, depth - 1, alpha, beta, True, depth2 + 1, depths, position_count, memo, start_time, last_print_time)
            board.pop()
            if eval < min_eval:
                min_eval = eval
                best_move = move
            beta = min(beta, eval)
            if beta <= alpha:
                break
        memo[key] = (best_move, min_eval)
        if depth2 not in depths:
            depths.append(depth2)
            print(f""Hloubka rekurze: {depth2}"")
        return best_move, min_eval

# Initialization and main execution logic
start_fen = ""7K/8/k1P5/7p/8/8/8/8 w - - 0 1""
board = chess.Board(start_fen)
depths = []
position_count = [0]
memo = {}
start_time = time.time()
last_print_time = [start_time]  # Initialize last print time

best_move, best_score = minimax(board, 24, float('-inf'), float('inf'), True, 0, depths, position_count, memo, start_time, last_print_time)
if best_move:
    move_san = board.san(best_move)
    print(f""\nThe best move from position {start_fen} is {move_san} with a score of {best_score}."")
else:
    print(""\nNo move found, or the game is over. Score: "", best_score)
"
96paUwkX,Untitled,Rodunskiy,C#,Sunday 5th of May 2024 01:18:25 PM CDT,"using System;

namespace CSLight
{
    public class Program
    {
        static void Main(string[] args)
        {
            int number = 5;
            int upNumber = 7;
            bool isWorking = true;

            while (isWorking)
            {
                Console.WriteLine(number);
                number = number + upNumber;
                Console.ReadKey();
            }
        }
    }
}
"
VQwSpCbT,Untitled,Rodunskiy,C#,Sunday 5th of May 2024 01:11:56 PM CDT,"using System;

namespace CSLight
{
    public class Program
    {
        static void Main(string[] args)
        {
            string word;
            bool isExit = true;

            while (isExit)
            {
                Console.WriteLine(""Введите любое слово:\nЕсли хотите закончить ввод слов напишите exit"");
                word = Console.ReadLine();

                if (word == ""exit"") 
                {
                    isExit = false;
                }
            }
        }
    }
}"
3ZAthUFH,"""Servo Control"" rev_04",pleasedontcode,Arduino,Sunday 5th of May 2024 01:09:34 PM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: ""Servo Control""
	- Source Code compiled for: Arduino Uno
	- Source Code created on: 2024-05-05 18:08:23

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* a system of two servo, that will close the road */
	/* when the button is pushed 1st time and open when */
	/* pushed 2nd time. */
/****** END SYSTEM REQUIREMENTS *****/


/****** DEFINITION OF LIBRARIES *****/
#include <Servo.h> // https://github.com/arduino-libraries/Servo

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void updateOutputs(void);
void toggleServoPosition(Servo &servo);

/***** DEFINITION OF DIGITAL INPUT PINS *****/
const uint8_t PushButton_PIN_D2 = 2;

/***** DEFINITION OF PWM OUTPUT PINS *****/
const uint8_t Servomotor_PWMSignal_PIN_D3 = 3;
const uint8_t Servomotor_PWMSignal_PIN_D5 = 5;

/***** DEFINITION OF OUTPUT RAW VARIABLES *****/
/***** used to store raw data *****/
uint8_t Servomotor_PWMSignal_PIN_D3_rawData = 0;
uint8_t Servomotor_PWMSignal_PIN_D5_rawData = 0;

/***** DEFINITION OF OUTPUT PHYSICAL VARIABLES *****/
/***** used to store data after characteristic curve transformation *****/
float Servomotor_PWMSignal_PIN_D3_phyData = 0.0;
float Servomotor_PWMSignal_PIN_D5_phyData = 0.0;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
Servo servo1; // Servo object for Servo motor 1
Servo servo2; // Servo object for Servo motor 2

bool isPushButtonPressed = false;
int pushButtonState = 0;

void setup(void)
{
  // put your setup code here, to run once:
  pinMode(PushButton_PIN_D2, INPUT_PULLUP);

  pinMode(Servomotor_PWMSignal_PIN_D3, OUTPUT);
  pinMode(Servomotor_PWMSignal_PIN_D5, OUTPUT);

  servo1.attach(Servomotor_PWMSignal_PIN_D3); // Attach servo1 to PWM pin 3
  servo2.attach(Servomotor_PWMSignal_PIN_D5); // Attach servo2 to PWM pin 5
}

void loop(void)
{
  // put your main code here, to run repeatedly:
  pushButtonState = digitalRead(PushButton_PIN_D2);

  if (pushButtonState == LOW && !isPushButtonPressed) {
    toggleServoPosition(servo1);
    isPushButtonPressed = true;
  } else if (pushButtonState == LOW && isPushButtonPressed) {
    toggleServoPosition(servo2);
    isPushButtonPressed = false;
  }
}

void updateOutputs()
{
  servo1.write(Servomotor_PWMSignal_PIN_D3_rawData);
  servo2.write(Servomotor_PWMSignal_PIN_D5_rawData);
}

void toggleServoPosition(Servo &servo)
{
  int pos = servo.read();
  if (pos == 0) {
    servo.write(180);
  } else {
    servo.write(0);
  }
}

/* END CODE */"
idaSFB1C,Control Servos rev_03,pleasedontcode,Arduino,Sunday 5th of May 2024 01:07:00 PM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: Control Servos
	- Source Code NOT compiled for: Arduino Uno
	- Source Code created on: 2024-05-05 18:06:08

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* a system of two servo, that will close the road */
	/* when the button is pushed 1st time and open when */
	/* pushed 2nd time. */
/****** END SYSTEM REQUIREMENTS *****/

/****** DEFINITION OF LIBRARIES *****/
#include <Servo.h> // https://github.com/arduino-libraries/Servo

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void updateOutputs(void);
void toggleServoPosition(Servo &servo);

/***** DEFINITION OF DIGITAL INPUT PINS *****/
const uint8_t PushButton_PIN_D2 = 2;

/***** DEFINITION OF PWM OUTPUT PINS *****/
const uint8_t Servomotor_PWMSignal_PIN_D3 = 3;
const uint8_t Servomotor_PWMSignal_PIN_D5 = 5;

/***** DEFINITION OF OUTPUT RAW VARIABLES *****/
/***** used to store raw data *****/
uint8_t Servomotor_PWMSignal_PIN_D3_rawData = 0;
uint8_t Servomotor_PWMSignal_PIN_D5_rawData = 0;

/***** DEFINITION OF OUTPUT PHYSICAL VARIABLES *****/
/***** used to store data after characteristic curve transformation *****/
float Servomotor_PWMSignal_PIN_D3_phyData = 0.0;
float Servomotor_PWMSignal_PIN_D5_phyData = 0.0;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
Servo servo1; // Servo object for Servo motor 1
Servo servo2; // Servo object for Servo motor 2

bool isPushButtonPressed = false;
int pushButtonState = 0;

void setup(void)
{
  // put your setup code here, to run once:
  pinMode(PushButton_PIN_D2, INPUT_PULLUP);

  pinMode(Servomotor_PWMSignal_PIN_D3, OUTPUT);
  pinMode(Servomotor_PWMSignal_PIN_D5, OUTPUT);

  servo1.attach(Servomotor_PWMSignal_PIN_D3); // Attach servo1 to PWM pin 3
  servo2.attach(Servomotor_PWMSignal_PIN_D5); // Attach servo2 to PWM pin 5
}

void loop(void)
{
  // put your main code here, to run repeatedly:
  pushButtonState = digitalRead(PushButton_PIN_D2);

  if (pushButtonState == LOW && !isPushButtonPressed) {
    toggleServoPosition(servo1);
    isPushButtonPressed = true;
  } else if (pushButtonState == LOW && isPushButtonPressed) {
    toggleServoPosition(servo2);
    isPushButtonPressed = false;
  }
}

void updateOutputs()
{
  servo1.write(Servomotor_PWMSignal_PIN_D3_rawData);
  servo2.write(Servomotor_PWMSignal_PIN_D5_rawData);
}

void toggleServoPosition(Servo &servo)
{
  int pos = servo.read();
  if (pos == 0) {
    servo.write(180);
  } else {
    servo.write(0);
  }
}

/* END CODE */"
MG8HaMeA,Untitled,Rodunskiy,C#,Sunday 5th of May 2024 01:03:41 PM CDT,"using System;

namespace CSLight
{
    public class Program
    {
        static void Main(string[] args)
        {
            string text;
            int numberRepetitions;

            Console.WriteLine(""Введите текст:"");
            text = Console.ReadLine();

            Console.WriteLine(""Введите кол-во повторений:"");
            numberRepetitions = Convert.ToInt32(Console.ReadLine());
            Console.Clear();

            for (int i = 0; i < numberRepetitions; i++)
            {
                Console.WriteLine(text);
            }
        }
    }
}"
MesmWFiE,Untitled,kwest87,C#,Sunday 5th of May 2024 12:32:34 PM CDT,"using System;

namespace ConsoleApp30
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int number;
            number = ReturnNumber();
            Console.WriteLine($""Полученное число {number}."");
        }

        static int ReturnNumber()
        {
            Console.WriteLine(""Укажите число :"");
            string userInput = Console.ReadLine();
            int number ;

            while (int.TryParse(userInput, out  number) == false)
            {
                Console.WriteLine(""Не корректно , повторите : "");
                userInput = Console.ReadLine();
            }

            return number;
        }
    }
}"
Kw2fxgSR,aaaaa,argui,Latex,Sunday 5th of May 2024 12:17:26 PM CDT,"140g glutinous rice flour
0.5tbsp of salt
50g sugar
240ml hot milk (or water)
mix everything together and slowly add milk and mix it good
microwave for 90 secs
mix it again
microwave 90 secs
mix again. if middle still liquid put it in again
taste, if it tastes like flour add milk and put back in microwave, undercooked
mix or 5 more mins, VERY HARD STICKY
put corn starch on board
roll it out pretty thinly
cut in bitesize pieces
roll it in hand and its done, add more corn flour to prevent sticking "
LavftDrT,Untitled,kwest87,C#,Sunday 5th of May 2024 12:16:18 PM CDT,"using System;

namespace ConsoleApp30
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int number;
            number = ReturnNumber();
            Console.WriteLine($""Полученное число {number}."");
        }

        static int ReturnNumber()
        {
            Console.WriteLine(""Укажите число :"");
            string userInput = Console.ReadLine();
            int resultingNumber =0;

            while (int.TryParse(userInput, out int number) == false)
            {
                Console.WriteLine(""Не корректно , повторите : "");
                userInput = Console.ReadLine();
                number=resultingNumber;
            }

            return resultingNumber;
        }
    }
}"
PLA6JiX8,hloubka rekurze minimax OK spolu s casem,max2201111,Python,Sunday 5th of May 2024 12:04:10 PM CDT,"import chess
import time

def ten_moves_rule(board):
    """"""Custom rule to evaluate a draw condition based on the last ten moves.""""""
    history = list(board.move_stack)
    if len(history) < 10:
        return False
    for move in history[-10:]:
        if board.is_capture(move):
            return False
    return True

def evaluate_board(board, depth):
    if board.is_checkmate():
        return -1000 + depth if board.turn == chess.WHITE else 1000 - depth
    elif board.is_stalemate() or board.is_insufficient_material() or ten_moves_rule(board):
        return 0
    return 0

def minimax(board, depth, alpha, beta, maximizing_player, depth2, depths, position_count, memo, start_time, last_print_time):
    current_time = time.time()
    if current_time - last_print_time[0] >= 1:
        elapsed_hours, remainder = divmod(current_time - start_time, 3600)
        elapsed_minutes, elapsed_seconds = divmod(remainder, 60)
        print(f""\r{int(elapsed_hours):02d}h {int(elapsed_minutes):02d}m {int(elapsed_seconds):02d}s"", end='', flush=True)
        last_print_time[0] = current_time

    position_count[0] += 1
    if position_count[0] % 1000000 == 0:
        print(f""\nProzkoumano {position_count[0]} pozic."")

    key = (board.fen(), maximizing_player, depth, alpha, beta)
    if key in memo:
        return memo[key]

    if depth == 0 or board.is_game_over():
        eval = evaluate_board(board, depth2)
        memo[key] = (None, eval)
        return None, eval

    best_move = None
    if maximizing_player:
        max_eval = float('-inf')
        for move in board.legal_moves:
            board.push(move)
            _, eval = minimax(board, depth - 1, alpha, beta, False, depth2 + 1, depths, position_count, memo, start_time, last_print_time)
            board.pop()
            if eval > max_eval:
                max_eval = eval
                best_move = move
            alpha = max(alpha, eval)
            if beta <= alpha:
                break
        memo[key] = (best_move, max_eval)
        if depth2 not in depths:
            depths.append(depth2)
            print(f""\nHloubka rekurze: {depth2}"")
        return best_move, max_eval
    else:
        min_eval = float('inf')
        for move in board.legal_moves:
            board.push(move)
            _, eval = minimax(board, depth - 1, alpha, beta, True, depth2 + 1, depths, position_count, memo, start_time, last_print_time)
            board.pop()
            if eval < min_eval:
                min_eval = eval
                best_move = move
            beta = min(beta, eval)
            if beta <= alpha:
                break
        memo[key] = (best_move, min_eval)
        if depth2 not in depths:
            depths.append(depth2)
            print(f""Hloubka rekurze: {depth2}"")
        return best_move, min_eval

# Initialization and main execution logic
start_fen = ""7K/8/k1P5/7p/8/8/8/8 w - - 0 1""
board = chess.Board(start_fen)
depths = []
position_count = [0]
memo = {}
start_time = time.time()
last_print_time = [start_time]  # Initialize last print time

best_move, best_score = minimax(board, 22, float('-inf'), float('inf'), True, 0, depths, position_count, memo, start_time, last_print_time)
if best_move:
    move_san = board.san(best_move)
    print(f""\nThe best move from position {start_fen} is {move_san} with a score of {best_score}."")
else:
    print(""\nNo move found, or the game is over. Score: "", best_score)
"
GMDD0Hc5,dobre i s casem 10 moves rule,max2201111,Python,Sunday 5th of May 2024 11:55:56 AM CDT,"import chess
import time
import sys

def ten_moves_rule(board):
    """"""Custom rule to evaluate a draw condition based on the last ten moves.""""""
    history = list(board.move_stack)
    if len(history) < 10:
        return False
    for move in history[-10:]:
        if board.is_capture(move):
            return False
    return True

def evaluate_board(board, depth):
    if board.is_checkmate():
        return -1000 + depth if board.turn == chess.WHITE else 1000 - depth
    elif board.is_stalemate():
        return 2210
    elif board.is_insufficient_material():
        return 3400
    elif ten_moves_rule(board):
        return 9800
    return 7001  # Default return if none of the above conditions are met

def minimax(board, depth, alpha, beta, maximizing_player, depth2, depths, position_count, memo, start_time, last_print_time):
    current_time = time.time()
    if current_time - last_print_time[0] >= 1:
        elapsed_hours, remainder = divmod(current_time - start_time, 3600)
        elapsed_minutes, elapsed_seconds = divmod(remainder, 60)
        print(f""\r{int(elapsed_hours):02d}h {int(elapsed_minutes):02d}m {int(elapsed_seconds):02d}s"", end='', flush=True)
        last_print_time[0] = current_time

    position_count[0] += 1
    if position_count[0] % 1000000 == 0:
        print(f""\nProzkoumano {position_count[0]} pozic."")

    key = (board.fen(), maximizing_player, depth, alpha, beta)
    if key in memo:
        return memo[key]

    if depth == 0 or board.is_game_over():
        eval = evaluate_board(board, depth2)
        memo[key] = (None, eval)
        return None, eval

    best_move = None
    if maximizing_player:
        max_eval = float('-inf')
        for move in board.legal_moves:
            board.push(move)
            _, eval = minimax(board, depth - 1, alpha, beta, False, depth2 + 1, depths, position_count, memo, start_time, last_print_time)
            board.pop()
            if eval > max_eval:
                max_eval = eval
                best_move = move
            alpha = max(alpha, eval)
            if beta <= alpha:
                break
        memo[key] = (best_move, max_eval)
        return best_move, max_eval
    else:
        min_eval = float('inf')
        for move in board.legal_moves:
            board.push(move)
            _, eval = minimax(board, depth - 1, alpha, beta, True, depth2 + 1, depths, position_count, memo, start_time, last_print_time)
            board.pop()
            if eval < min_eval:
                min_eval = eval
                best_move = move
            beta = min(beta, eval)
            if beta <= alpha:
                break
        memo[key] = (best_move, min_eval)
        return best_move, min_eval

# Initialization and main execution logic
start_fen = ""7K/8/k1P5/7p/8/8/8/8 w - - 0 1""
board = chess.Board(start_fen)
depths = []
position_count = [0]
memo = {}
start_time = time.time()
last_print_time = [start_time]  # Initialize last print time

best_move, best_score = minimax(board, 22, float('-inf'), float('inf'), True, 0, depths, position_count, memo, start_time, last_print_time)
if best_move:
    move_san = board.san(best_move)
    print(f""\nThe best move from position {start_fen} is {move_san} with a score of {best_score}."")
else:
    print(""\nNo move found, or the game is over. Score: "", best_score)
"
sf7raneP,[GMod] Simple Screengrab,SneakySquid,Lua,Sunday 5th of May 2024 11:51:36 AM CDT,"local ScreenMat = CreateMaterial(""ScreenMat"", ""Fillrate"", {})

local function screengrab(open_menu)
	file.CreateDir(""screengrabs"")

	hook.Add(""PostRender"", ""Screengrab"", function()
		local frame_count = FrameNumber()

		render.UpdateScreenEffectTexture(1)
		ScreenMat:SetTexture(""$basetexture"", render.GetScreenEffectTexture(1):GetName())

		cam.Start2D()
			surface.SetMaterial(ScreenMat)
			surface.SetDrawColor(255, 255, 255, 255)
			surface.DrawTexturedRect(0, 0, ScrW(), ScrH())

			surface.SetDrawColor(0, 255, 0, 255)
			surface.DrawRect(0, 0, 10, 10)

			file.Write(string.format(""screengrabs/%i.jpg"", os.time()), render.Capture{
				format = ""jpg"",
				quality = 100,
				x = 0, y = 0,
				w = ScrW(), h = ScrH(),
			})
		cam.End2D()

		if frame_count ~= FrameNumber() then
			while true do end
		end

		if open_menu then
			gui.ActivateGameUI()
		end

		hook.Remove(""PostRender"", ""Screengrab"")
	end)
end

concommand.Add(""screengrab"", function()
	local escape_menu = gui.IsGameUIVisible()

	if escape_menu then
		gui.HideGameUI()
	end

	screengrab(escape_menu)
end)
"
vK55QnXC,Exercicios0505,Smokahontas,C,Sunday 5th of May 2024 11:47:50 AM CDT,"Exercicio 1:
Resposta correta : (A)

Código:
1. for (i = 0 to 29) {
2.   for (j = 0 to 39) {
3.     if (a[i] == b[j]) {
4.       print(a[i]);
5.     }
6.   }
7. }


////////////////////////////////////////////

Exercicio 2:
3. if (a[i] == b[j]) {

4.       print (a[i]);

5. }

////////////////////////////////////////////

Exercicio 3:

Cálculo feito:
-a * b++ - c--
= -1 * 2++ - 0--
= -2 - 0
= -2

Então, o resultado da expressão -a * b++ - c-- é -2, correspondendo à opção (E).

////////////////////////////////////////////

EXERCICIO 4:

A: A melhor opção para este problema é uma matriz. por ser uma tabela organizada em linhas e colunas, ideal para representar a plantação de café.


B:
int contarFalhasPlantio(int matriz[3][5], int linhas, int colunas) {
    int falhas = 0;
    for (int linha = 0; linha < linhas; linha++) {
        for (int coluna = 0; coluna < colunas; coluna++) {
            if (matriz[linha][coluna] == 0) {
                falhas++;
            }
        }
    }
    return falhas;
}

int main() {
   
    int plantacao[3][5] = {
        {1, 0, 1, 0, 0},
        {0, 1, 0, 1, 0},
        {1, 0, 0, 0, 1}
    };

    int linhas = 3;
    int colunas = 5;

    int totalFalhas = contarFalhasPlantio(plantacao, linhas, colunas);
    printf(""Total de falhas de plantio: %d\n"", totalFalhas);

    return 0;
}"
QhsG80m1,Untitled,kwest87,C#,Sunday 5th of May 2024 11:14:53 AM CDT,"namespace ConsoleApp30
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int number;
            number = ReturnNumber();
            Console.WriteLine($""Полученное число {number}."");
        }

        static int ReturnNumber()
        {
            Console.WriteLine(""Укажите число :"");
            string userInput = Console.ReadLine();

            while (int.TryParse(userInput, out int number) == false)
            {
                Console.WriteLine(""Не корректно , повторите : "");
                userInput = Console.ReadLine();
            }

            int resultingNumber = Convert.ToInt32(userInput);
            return resultingNumber;
        }
    }
}"
RzRvN3VC,Simple CLI C# File Manager,tommarek_CZE,C#,Sunday 5th of May 2024 11:03:21 AM CDT,"using System.Runtime.InteropServices;
using Microsoft.VisualBasic;
using System.Diagnostics;

internal class Program
{
    private static void Main(string[] args)
    {
        // Set current directory value to default
        string currentDir = @""C:\\"";

        Console.WriteLine(""CLI File Manager V1"");
        Console.WriteLine(""Enter 'help' command to get help"");

        // Function that open file with default program
        void OpenWithDefaultProgram(string path)
        {   try {
                // Create new procces, assing explorer as procces and then starts the procces
                using Process fileopener = new Process();

                fileopener.StartInfo.FileName = ""explorer"";
                fileopener.StartInfo.Arguments = ""\"""" + path + ""\"""";
                fileopener.Start();
            } catch {
                Console.WriteLine(""Exception occured while executing command"");
            }
        }

        // Function that lists all directories and files
        void listCommand() {
            try {
                Console.WriteLine(""Showing contents of "" + currentDir);
                // For each file, get its name and displays it
                string[] allfiles = Directory.GetFiles(currentDir);
                foreach (var file in allfiles){
                    FileInfo info = new FileInfo(file);
                    Console.WriteLine(info.Name + "" <FILE>"");
                }

                // For each directory, get its name and displays it
                string[] directories = Directory.GetDirectories(currentDir);
                foreach (string dir in directories)
                {
                    string trimmedString = Path.GetFileName(dir);

                    Console.WriteLine(trimmedString + "" <DIRECTORY>"");
                }
            } catch {
                Console.WriteLine(""Exception occured while executing command"");
            }
        }

        void goCommand() {
            try {
                Console.WriteLine(""Enter directory name"");
                // Read from the console what directory user wanna acces
                string arg = Console.ReadLine();
                // Gets directories inside current directory and scans the list it for the desired directory, if found the current directory would be assigned to desired directory
                string[] directories = Directory.GetDirectories(currentDir);
                foreach (string dir in directories)
                {
                    string trimmedString = Path.GetFileName(dir);
                    if (trimmedString == arg) {
                        currentDir = dir;
                        Console.WriteLine(""Jumped into "" + trimmedString + "" directory"");
                        return;
                    }
                }
                Console.WriteLine(""Directory "" + arg + "" was not founded"");
            } catch {
                Console.WriteLine(""Exception occured while executing command"");
            }
        }

        void returnCommand() {
            try {
                // Get parent of current directory and then sets it as current directory
                string parentDirectory = Directory.GetParent(currentDir).FullName;
                currentDir = parentDirectory;
                Console.WriteLine(""Jumped into "" + currentDir + "" directory"");
            } catch {
                Console.WriteLine(""Exception occured while executing command"");
            }
        }

        void openCommand() {
            try {
                Console.WriteLine(""Enter file name"");
                // Get arguments from console, what file the user wanna open
                string arg = Console.ReadLine();
                // Gets all files and scans them for desired file, if found it would be opened via OpenWithDefaultProgram function
                string[] allfiles = Directory.GetFiles(currentDir);
                foreach (var file in allfiles){
                    FileInfo info = new FileInfo(file);
                    if (arg == info.Name) {
                        OpenWithDefaultProgram(info.FullName);
                        Console.WriteLine(""File "" + info.Name + "" was opened"");
                        return;
                    }
                }
                Console.WriteLine(""File "" + arg + "" was not founded"");
            } catch {
                Console.WriteLine(""Exception occured while executing command"");
            }

        }

        void dcreateCommand() {
            try {
                Console.WriteLine(""Enter directory name that you wanna create"");
                // Gets arguments from console, what directory user wanna create
                string arg = Console.ReadLine();
                string path = currentDir + ""\\"" + arg;
                // Check if directory does not exist, if donsent exist it would create the desired directory
                if (!Directory.Exists(path))
                {
                    Directory.CreateDirectory(path);
                    Console.WriteLine(""Directory "" + arg + "" created succefuely"");
                    return;
                }
                Console.WriteLine(""Directory "" + arg + "" already exist"");
            } catch {
                Console.WriteLine(""Exception occured while executing command"");
            }
        }

        void fcreateCommand() {
            try {
                // Gets arguments from console, what file user wanna create
                Console.WriteLine(""Enter file name that you wanna create"");
                string arg = Console.ReadLine();
                string path = currentDir + ""\\"" + arg;

                // Check if file does not exist, if donsent exist it would create the desired file
                if (!File.Exists(path))
                {
                    File.Create(path).Dispose();
                    Console.WriteLine(""File "" + arg + "" created succefuely"");
                    return;       
                }
                Console.WriteLine(""File "" + arg + "" already exist"");
            } catch {
                Console.WriteLine(""Exception occured while executing command"");
            }
        }

        void deleteCommand() {
            try {
                Console.WriteLine(""Enter file or directory that you wanna delete"");
                // Get the arguments from console, what folder or file user wanna get deleted
                string arg = Console.ReadLine();
                string path = currentDir + ""\\"" + arg;
                // Check if directory exist, if yes it would delete the directory
                if (Directory.Exists(path))
                {
                    Directory.Delete(path, true);
                    Console.WriteLine(""Directory "" + arg + ""succesfully deleted"");
                    return;
                }
                // Check if file exist, if yes delete the file
                else if (File.Exists(path))
                {
                    File.Delete(path);
                    Console.WriteLine(""File "" + arg + ""succesfully deleted"");
                    return;
                }
                Console.WriteLine(""File or directory "" + arg + ""dosen't exist"");            
            } catch {
                Console.WriteLine(""Exception occured while executing command"");
            }
        }

        // Display help menu to the console
        void helpCommand() {
            Console.WriteLine(""Commands list:"");
            Console.WriteLine(""list > display contents of current directory"");
            Console.WriteLine(""go > go to specific directory"");
            Console.WriteLine(""retirn > go to the parent directory"");
            Console.WriteLine(""open > open specific file"");
            Console.WriteLine(""dcreate > create folder in current directory"");
            Console.WriteLine(""fcreate > create file in current directory"");
            Console.WriteLine(""delete > delete specific file or directory"");
            Console.WriteLine(""help > show this current message"");
            Console.WriteLine(""-----\nDon't put arguments behind commands, the argument handler is after you execute the command"");
        }

        // Switch that binds functions to commands
        void handleCommands(string command)
        {
            switch (command)
            {
                case ""list"": // List files/Directories
                    listCommand();
                    break;
                case ""dcreate"": // Create Folder
                    dcreateCommand();
                    break;
                case ""open"": // Open File
                    openCommand();
                    break;
                case ""go"": // Go to directory/path
                    goCommand();
                    break;
                case ""return"": // Return to the lower directory
                    returnCommand();
                    break;
                case ""fcreate"": // Create file
                    fcreateCommand();
                    break;
                case ""help"": // Show help dialog
                    helpCommand();
                    break;
                case ""delete"": // Delete file
                    deleteCommand();
                    break;
                default:
                    Console.WriteLine(""Undefined command"");
                    break;
            }
        }
        
        // Handle console input, and make infinite loop
        void handeInput()
        {
            Console.WriteLine(""          "");
            string command = Console.ReadLine();
            Console.WriteLine(""Command executed> "" + command);
            handleCommands(command);
            handeInput();
        }

        handeInput();
    }
}"
fmWuYvD0,Untitled,Rodunskiy,C#,Sunday 5th of May 2024 10:56:10 AM CDT,"using System;

namespace CSLight
{
    public class Program
    {
        static void Main(string[] args)
        {
            int peopleInQueue;
            int fixedTimeOnePerson = 10;
            int timeInQueueHour;
            int timeInQueueMinute;
            int minutesInHour = 60;

            Console.WriteLine(""Введите кол-во людей в очереди."");
            peopleInQueue = Convert.ToInt32(Console.ReadLine());

            int totalTimeInQueue = fixedTimeOnePerson * peopleInQueue;

            timeInQueueHour = totalTimeInQueue / minutesInHour;
            timeInQueueMinute = totalTimeInQueue % minutesInHour;

            Console.WriteLine($""Вы должны отстоять в очереди {timeInQueueHour} часа и {timeInQueueMinute} минут."");
        }
	}
}



"
1WQP8dx1,car price prediction,aize33,Python,Sunday 5th of May 2024 10:53:40 AM CDT,"# Importing Libraries

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Lasso
from sklearn import metrics

# Data Collection and Processing

car_dataset = pd.read_csv('car data.csv')
car_dataset.head()
car_dataset.shape
car_dataset.info()

# Checking for missing values

print(car_dataset.isnull().sum())

# Checking the distribution of categorical data

print(car_dataset.Fuel_Type.value_counts())
print(car_dataset.Seller_Type.value_counts())
print(car_dataset.Transmission.value_counts())

# Categorical data encoding

car_dataset.replace({'Fuel_Type': { 'Petrol': 0, 'Diesel':1, 'CNG':2 }}, inplace=True)
car_dataset.replace({'Seller_Type': { 'Dealer': 0, 'Individual':1 }}, inplace=True)
car_dataset.replace({'Transmission': { 'Manual': 0, 'Automatic':1 }}, inplace=True)

print(car_dataset.head())

# Data splitting into Feature data and Target data

X = car_dataset.drop(['Car_Name', 'Selling_Price'], axis = 1)
y = car_dataset['Selling_Price']

print(X)
print(y)

# Data splitting into training and testing data

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.1, random_state = 2)


# Model Training : Linear Rgression

lin_reg = LinearRegression()

lin_reg.fit(X_train, y_train)

# Model evaluation : Training data

training_data_prediction = lin_reg.predict(X_train)

# Metrics using R squared eror

error_score = metrics.r2_score(y_train, training_data_prediction)
print('R squared Error : ', error_score)

# Visualize the Actual prices and Predicted prices

plt.scatter(y_train, training_data_prediction)
plt.xlabel('Actual Price')
plt.ylabel('Predicted Price')
plt.title('Actual Prices vs Predicted Prices')
plt.show()

# Model evaluation : Testing data

test_data_prediction = lin_reg.predict(X_test)

# Metrics using R squared eror in test data

error_score = metrics.r2_score(y_test, test_data_prediction)
print('R squared Error : ', error_score)

# Visualize the Actual prices and Predicted prices in test data

plt.scatter(y_test, test_data_prediction)
plt.xlabel('Actual Price')
plt.ylabel('Predicted Price')
plt.title('Actual Prices vs Predicted Prices')
plt.show()

# Model Training : Lasso Rgression

lass_reg = Lasso()

lass_reg.fit(X_train, y_train)

# Model evaluation : Training data

training_data_prediction = lass_reg.predict(X_train)

# Metrics using R squared eror

error_score = metrics.r2_score(y_train, training_data_prediction)
print('R squared Error : ', error_score)


# Visualize the Actual prices and Predicted prices

plt.scatter(y_train, training_data_prediction)
plt.xlabel('Actual Price')
plt.ylabel('Predicted Price')
plt.title('Actual Prices vs Predicted Prices')
plt.show()

# Model evaluation : Testing data

test_data_prediction = lass_reg.predict(X_test)

# Metrics using R squared eror in test data

error_score = metrics.r2_score(y_test, test_data_prediction)
print('R squared Error : ', error_score)

# Visualize the Actual prices and Predicted prices in test data

plt.scatter(y_test, test_data_prediction)
plt.xlabel('Actual Price')
plt.ylabel('Predicted Price')
plt.title('Actual Prices vs Predicted Prices')
plt.show()"
BB2pG4LP,arrays comparison,PhZh,Java,Sunday 5th of May 2024 10:32:41 AM CDT,"// ++++++++++++ Option 1 ++++++++++++

class Praktikum {
    public static void main(String[] args) {
        // Создайте и заполните массив именами участников сделки
        String[] participants = {""Пётр"", ""Надежда"", ""Валентина""};
        // participants[0] = ""Пётр"";
        // participants[1] = ""Надежда"";
        // participants[2] = ""Валентина"";
        // Создайте и заполните массив документов участников сделки (с заглавной буквы)
        String[] documents = {""Паспорт"", ""Водительское удостоверение"", ""Свидетельство о рождении""};
        // documents[0] = ""Паспорт"";
        // documents[1] = ""Водительское удостоверение"";
        // documents[2] = ""Свидетельство о рождении"";  

        // Проверьте количество документов, оно должно быть равно числу участников
        if (participants.length == documents.length) {
            System.out.println(""Документы загружены верно. Список документов:"");
            // Если условие верно, напечатайте список документов в формате: ""Пётр: Паспорт""
            System.out.println(participants[0] + "": "" + documents[0]);
            System.out.println(participants[1] + "": "" + documents[1]);
            System.out.println(participants[2] + "": "" + documents[2]);
        } else {
            /* Для ошибки предусмотрите печать такого сообщения:
						 ""Количество документов не соответствует количеству участников сделки."" */
            System.out.println(""Количество документов не соответствует количеству участников сделки."");
        }
    }
}

// ++++++++++++ Option 2 ++++++++++++

class Praktikum {
    public static void main(String[] args) {
        // Создайте и заполните массив именами участников сделки
        String[] participants = new String[3];
        participants[0] = ""Пётр"";
        participants[1] = ""Надежда"";
        participants[2] = ""Валентина"";
        // Создайте и заполните массив документов участников сделки (с заглавной буквы)
        String[] documents = new String[3];
        documents[0] = ""Паспорт"";
        documents[1] = ""Водительское удостоверение"";
        documents[2] = ""Свидетельство о рождении"";  

        // Проверьте количество документов, оно должно быть равно числу участников
        if (participants.length == documents.length) {
            System.out.println(""Документы загружены верно. Список документов:"");
            // Если условие верно, напечатайте список документов в формате: ""Пётр: Паспорт""
            System.out.println(participants[0] + "": "" + documents[0]);
            System.out.println(participants[1] + "": "" + documents[1]);
            System.out.println(participants[2] + "": "" + documents[2]);
        } else {
            /* Для ошибки предусмотрите печать такого сообщения:
						 ""Количество документов не соответствует количеству участников сделки."" */
            System.out.println(""Количество документов не соответствует количеству участников сделки."");
        }
    }
}"
Y03BVxef,openwrt router,coinwalk,JavaScript,Sunday 5th of May 2024 10:31:32 AM CDT,"uci add_list dhcp.@dnsmasq[0].server=""/partner.googleadservices.com/#""
uci add_list dhcp.@dnsmasq[0].server=""/code.jquery.com/#""
uci add_list dhcp.@dnsmasq[0].server=""/www.googletagmanager.com/#""
uci add_list dhcp.@dnsmasq[0].server=""/cdn.jsdelivr.net/#""
uci add_list dhcp.@dnsmasq[0].server=""/just-dice.com/#""
uci add_list dhcp.@dnsmasq[0].server=""/altquick.com/#""
uci add_list dhcp.@dnsmasq[0].server=""/freebitcoins.com/#""
uci add_list dhcp.@dnsmasq[0].server=""/newassets.hcaptcha.com/#""
uci add_list dhcp.@dnsmasq[0].server=""/googleads.g.doubleclick.net/#""
uci add_list dhcp.@dnsmasq[0].server=""/pagead2.googlesyndication.com/#""
uci add_list dhcp.@dnsmasq[0].server=""/tpc.googlesyndication.com/#""
uci add_list dhcp.@dnsmasq[0].server=""/www.google.com/#""
uci add_list dhcp.@dnsmasq[0].server=""/hcaptcha.com/#""
uci add_list dhcp.@dnsmasq[0].server=""/coinspot.com.au/#""
uci add_list dhcp.@dnsmasq[0].server=""/ing.com.au/#""
uci add_list dhcp.@dnsmasq[0].server=""/pastebin.com/#""
uci add_list dhcp.@dnsmasq[0].server=""/challenges.cloudflare.com/#""
uci add_list dhcp.@dnsmasq[0].server=""/s0.2mdn.net/#""
uci add_list dhcp.@dnsmasq[0].server=""/fundingchoicesmessages.google.com/#""
uci add_list dhcp.@dnsmasq[0].server=""/match.adsrvr.org/#""
uci add_list dhcp.@dnsmasq[0].server=""/c1.adform.net/#""
uci add_list dhcp.@dnsmasq[0].server=""/gtrace.mediago.io/#""
uci add_list dhcp.@dnsmasq[0].server=""/analytics.pangle-ads.com/#""
uci add_list dhcp.@dnsmasq[0].server=""/a.tribalfusion.com/#""
uci add_list dhcp.@dnsmasq[0].server=""/cm.g.doubleclick.net/#""
uci add_list dhcp.@dnsmasq[0].server=""/doubleclick.net/#""
uci add_list dhcp.@dnsmasq[0].server=""/fonts.gstatic.com/#""
uci add_list dhcp.@dnsmasq[0].server=""/x.bidswitch.net/#""
uci add_list dhcp.@dnsmasq[0].server=""/dis.criteo.com/#""
uci add_list dhcp.@dnsmasq[0].server=""/cms.quantserve.com/#""
uci add_list dhcp.@dnsmasq[0].server=""/www.googleadservices.com/#""
uci add_list dhcp.@dnsmasq[0].server=""/adform.net/#""
uci add_list dhcp.@dnsmasq[0].server=""/analytics.google.com/#""
uci add_list dhcp.@dnsmasq[0].server=""/www.gstatic.com/#""
uci add_list dhcp.@dnsmasq[0].server=""/www.adsensecustomsearchads.com/#""
uci add_list dhcp.@dnsmasq[0].server=""/#/"""
s9uUmHmZ,Untitled,coderbodrul,C++,Sunday 5th of May 2024 10:12:28 AM CDT,"#include<bits/stdc++.h>
using namespace std;
const int mx = 1e6;

map<string, int> state_to_int; //mapping every state to unique value
map<int, string> int_to_state; //getting the state for every int value
string d; // destination state
int ind = 0; // a variable for representing every state to int
vector<int> adj[mx + 1];
vector<int> par(mx + 1, -1);
int dx[4] = {1, -1, 0, 0};
int dy[4] = {0, 0, 1, -1};
int vis[mx + 1];

void bfs(int strt) {
	queue<int> q;
	q.push(strt);

	while(!q.empty()) {
		int fr = q.front();
		string str = int_to_state[fr];
		q.pop();
		vis[fr] = 1;
		if (str == d) {
            return;
		}

		int x, y, sx, sy;
		for (int i = 0; i < 9; i++) {
			if (str[i] == '0') {
				x = i / 3;
				y = i % 3;
				break;
			}
		}

		for (int i = 0; i < 4; i++) {
			sx = x + dx[i];
			sy = y + dy[i];
			if (sx >= 0  and sx < 3 and sy >= 0  and sy < 3) {
				string tem = str;
				swap(tem[x * 3 + y], tem[sx * 3 + sy]);
				if (state_to_int.find(tem) == state_to_int.end()) {
					state_to_int[tem] = ind;
					int_to_state[ind] = tem;
					ind++;
					adj[fr].push_back(state_to_int[tem]);
					par[state_to_int[tem]] = fr;
				}
			}
		}
		for (int i = 0; i < adj[fr].size(); i++) {
			if (!vis[adj[fr][i]]) {
				q.push(adj[fr][i]);
				vis[adj[fr][i]] = 1;
			}
		}
	}
}

int32_t main() {

	// define destination state & map the state to int
	d = ""123456780"";
	// taking input the source state
	string s = """";
	char c;
	for (int i = 0; i < 3; i++) {
		for (int j = 0; j < 3; j++) {
			cin >> c;
			s += c;
		}
	}

	state_to_int[s] = ind;
	int_to_state[ind] = s;
	ind++;

	memset(vis, 0, sizeof(vis));
	bfs(state_to_int[s]);

	stack<int> st;
	int node = state_to_int[d];
	while(node != -1) {
		st.push(node);
		node = par[node];
	}

	string str;
	while(!st.empty()) {
		str = int_to_state[st.top()];
		st.pop();
		cout << endl;
		for (int i = 0; i < 9; i++) {
			cout << str[i] << "" \n""[i % 3 == 2];
		}
	}

	return 0;
}
"
UxrSqF0k,Untitled,martinms,PHP,Sunday 5th of May 2024 09:35:28 AM CDT,"@extends('layouts.admin')
@section('title', 'Data Konsultasi')

@section('custom_head')
    <style>
        .accordion-button:not(.collapsed) {
            background-color: #696cff;
            color: #fff;
        }
    </style>
@endsection

@section('content')
    <div class=""container-xxl flex-grow-1 container-p-y"">
        <h4 class=""fw-bold py-3 mb-4""><span class=""text-muted fw-light"">Dashboard /</span> Data Konsultasi</h4>

        <!-- Basic Bootstrap Table -->
        <div class=""card mb-3"">
            <div class=""card-header d-flex justify-content-between"">
                <h5 class=""card-title"">Data Konsultasi</h5>

                <a href=""{{ route('admin.konsultasi.index') }}"" class=""btn btn-sm btn-primary"">Kembali</a>
            </div>
            <div class=""card-body border-bottom"">
                <div class=""me-2 mb-3"">
                    <h6 class=""mb-0"">User</h6>
                    <small class=""text-muted"">{{ $konsultasi->user->name }}</small>
                </div>

                <div class=""me-2 mb-3"">
                    <h6 class=""mb-0"">Tanggal</h6>
                    <small class=""text-muted"">{{ $konsultasi->created_at->translatedFormat('l, d F Y H:i') }}</small>
                </div>

                <div class=""me-2 mb-3"">
                    <h6 class=""mb-0"">Penyakit Terdiagnosa</h6>
                    <small class=""text-muted"">{{ $konsultasi->penyakit->nama }}</small>
                </div>

                <div class=""me-2 mb-3"">
                    <h6 class=""mb-0"">Persentase</h6>
                    <small class=""text-muted"">{{ $konsultasi->persentase }}%</small>
                </div>
            </div>
        </div>
        <!--/ Basic Bootstrap Table -->

        <div class=""card mb-3"">
            <div class=""card-header d-flex justify-content-between"">
                <h5 class=""card-title"">Gejala Yang Dipilih</h5>
            </div>
            <div class=""card-body"">
                <div class=""table-responsive text-nowrap"">
                    <table class=""table table-hover dt-data"">
                        <thead>
                        <tr>
                            <th class=""d-flex justify-content-start"">#</th>
                            <th>Kode</th>
                            <th>Nama</th>
                        </tr>
                        </thead>
                        <tbody class=""table-border-bottom-0"">
                        @foreach ($konsultasi->gejala as $gejala)
                            <tr>
                                <td class=""text-start"">
                                    {{ $loop->iteration }}
                                </td>
                                <td>{{ $gejala->kode }}</td>
                                <td>{{ $gejala->nama }}</td>
                            </tr>
                        @endforeach
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <div class=""card mb-3"">
            <div class=""card-header d-flex justify-content-between"">
                <h5 class=""card-title"">Tabel Nodes</h5>
            </div>
            <div class=""card-body p-4"">
                <div class=""table-responsive rounded-2 mb-4"">
                    <table
                        class=""table table-bordered table-hover text-nowrap customize-table mb-0 align-middle dt-data"">
                        <!--begin::Table head-->
                        <thead>
                        <tr>
                            <th rowspan=""2"" class=""text-center"" style=""vertical-align: middle;"">Gejala</th>
                            <th colspan=""{{ $penyakit->count() }}"" class=""text-center"">Penyakit</th>
                        </tr>
                        <tr>
                            @foreach ($penyakit as $penyakit)
                                <td class=""text-center"">
                                    <span data-bs-toggle=""tooltip""
                                          data-bs-title=""{{ $penyakit->name }}"">{{ $penyakit->kode }}</span>
                                </td>
                            @endforeach
                        </tr>
                        </thead>
                        <!--end::Table head-->
                        <!--begin::Table body-->
                        <tbody>
                        @foreach ($VCIRS->CFMatrix() as $gejalaCode => $data)
                            <tr>
                                <th class=""text-center"">{{ $gejalaCode }}</th>
                                @foreach ($data as $value)
                                    <td class=""text-center"">
                                        {{ $value ?? '-' }}
                                    </td>
                                @endforeach
                            </tr>
                        @endforeach
                        </tbody>
                        <!--end::Table body-->
                    </table>
                </div>
            </div>
        </div>

        <div class=""card w-100 position-relative overflow-hidden"">
            <div class=""px-4 py-3 border-bottom d-flex justify-content-between"">
                <h5 class=""card-title fw-semibold mb-0 lh-sm"">Perhitungan VCIRS</h5>
            </div>
            <!--begin::Card body-->
            <div class=""card-body p-4"">
                <div class=""accordion"" id=""calculations"">
                    @foreach ($VCIRS->calculate() as $data)
                        <h2 class=""accordion-header border"" id=""heading-{{ $loop->index }}"">
                            <button class=""accordion-button {{ $loop->index == 0 ? '' : 'collapsed' }}"" type=""button""
                                    data-bs-toggle=""collapse""
                                    data-bs-target=""#collapse-{{ $loop->index }}""
                                    aria-expanded=""{{ $loop->index == 0 ? 'true' : 'false' }}""
                                    aria-controls=""collapse-{{ $loop->index }}"">
                                ({{ $data['penyakit']->kode }}) {{ $data['penyakit']->nama }}
                                ({{ $data['cf_kombinasi']['persentase'] }}%)
                            </button>
                        </h2>
                        <div id=""collapse-{{ $loop->index }}""
                             class=""accordion-collapse collapse {{ $loop->index == 0 ? 'show' : '' }}""
                             aria-labelledby=""heading-{{ $loop->index }}"" data-bs-parent=""#calculations"">
                            <div class=""accordion-body border"">
                                <h6 class=""mb-2 lh-sm pt-2"">Rule</h6>

                                <!--begin::Table-->
                                <div class=""table-responsive rounded-2 mb-4"">
                                    <table
                                        class=""table border text-nowrap customize-table mb-0 align-middle table-hover""
                                        style=""width: 100%;"">
                                        <thead class=""text-dark"">
                                        <tr>
                                            <th>Kode</th>
                                            <th>Nama Gejala</th>
                                            <th>Jumlah Node</th>
                                            <th>Node yang menggunakan</th>
                                            <th class=""text-center"">Urutan Node</th>
                                        </tr>
                                        </thead>
                                        <tbody>
                                        @foreach ($data['rule'] as $rule)
                                            <tr>
                                                <td>{{ $rule['gejala']->kode }}</td>
                                                <td>{{ $rule['gejala']->nama }}</td>
                                                <td class=""text-center"">{{ $rule['jumlah_node'] }}</td>
                                                <td>
                                                    @foreach ($rule['nodes'] as $node)
                                                        <span class=""badge bg-primary"">
                                                                            P0{{ $node }}#{{ $node }}
                                                                        </span>
                                                    @endforeach
                                                </td>
                                                <td class=""text-center"">{{ $rule['n'] }}</td>
                                            </tr>
                                        @endforeach
                                        </tbody>
                                    </table>
                                </div>
                                <!--end::Table-->

                                <h6 class=""mb-2 lh-sm"">Nilai VUR</h6>
                                <!--begin::Table-->
                                <div class=""table-responsive rounded-2 mb-4"">
                                    <table
                                        class=""table border text-nowrap table-bordered customize-table mb-0 align-middle table-hover""
                                        style=""width: 100%;"">
                                        <thead class=""text-dark"">
                                        <tr>
                                            <th class=""text-center"">Kode Gejala</th>
                                            <th>Nilai VUR</th>
                                        </tr>
                                        </thead>
                                        <tbody>
                                        @foreach ($data['vur'] as $vur)
                                            <tr>
                                                <td class=""text-center"">{{ $vur['gejala']->kode }}</td>
                                                <td>
                                                    VUR = <i>Credit</i> x (NS x VO/TO)
                                                    <br>
                                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                    = {{ $credit }} &times;
                                                    ({{ $vur['_jumlahNode'] }}
                                                    &times;
                                                    {{ $vur['_urutanVariabel'] }}
                                                    /{{ $vur['_totalVariabel'] }})
                                                    <br>
                                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                    = {{ $vur['value'] }}
                                                </td>
                                            </tr>
                                        @endforeach
                                        </tbody>
                                    </table>
                                </div>
                                <!-- end::Table-->

                                <ul class=""list-group"">
                                    <li class=""list-group-item"">
                                        <h6 class=""mb-2 lh-sm"">Nilai NUR</h6>
                                        <p>
                                            NUR<sub>j</sub> = <img
                                                src=""{{ asset('assets/images/rumus/rumus nur.png') }}""/>
                                            <br>
                                            NUR = @php
                                                $nurItems = $data['_nurItems'];
                                                $nurDivider = $data['_nurDivider'];
                                            @endphp

                                            @if (count($nurItems) > 0)
                                                ({{ implode(' + ', $nurItems) }}) /
                                                {{ $nurDivider }}
                                            @endif
                                            <br>
                                            NUR = {{ $data['nur'] }}
                                        </p>
                                        <p>Nilai NUR didapatkan: <strong>{{ $data['nur'] }}</strong></p>
                                    </li>
                                    <li class=""list-group-item"">
                                        <h6 class=""mb-2 lh-sm"">Nilai RUR</h6>
                                        <p>
                                            RUR<sub>k</sub> = <img
                                                src=""{{ asset('assets/images/rumus/rumus rur.png') }}""
                                                alt="""">
                                            <br>
                                            NUR = {{ $data['nur'] }}
                                            <br>
                                            RUR = {{ $data['rur'] }} / {{ $data['_rurDivider'] }}
                                            <br>
                                            RUR = {{ $data['rur'] }}
                                        </p>
                                        <p>Nilai RUR didapatkan: <strong>{{ $data['rur'] }}</strong></p>
                                    </li>
                                </ul>

                                <h6 class=""mb-2 mt-3 lh-sm"">Perhitungan Nilai CF</h6>

                                <!--begin::Table-->
                                <div class=""table-responsive rounded-2 mb-4"">
                                    <table
                                        class=""table border table-bordered text-nowrap customize-table mb-0 align-middle table-hover""
                                        style=""width: 100%;"">
                                        <thead class=""text-dark"">
                                        <tr>
                                            <th class=""text-center"">Kode Gejala</th>
                                            <th class=""text-center"">Jawaban User</th>
                                        </tr>
                                        </thead>
                                        <tbody>
                                        @foreach ($data['jawaban_user'] as $jawaban)
                                            <tr>
                                                <td class=""text-center"">{{ $jawaban['gejala']->kode }}</td>
                                                <td class=""text-center"">{{ $jawaban['jawaban'] }}</td>
                                            </tr>
                                        @endforeach
                                        </tbody>
                                    </table>
                                </div>
                                <!--end::Table-->

                                <h6 class=""mt-2"">Nilai CF</h6>
                                <!--begin::Table-->
                                <div class=""table-responsive rounded-2 mb-4"">
                                    <table
                                        class=""table border text-nowrap customize-table mb-0 align-middle table-hover table-bordered""
                                        style=""width: 100%;"">
                                        <thead class=""text-dark"">
                                        <tr>
                                            <th rowspan=""2"" class=""text-center""
                                                style=""vertical-align: middle;"">Kode Gejala
                                            </th>
                                            <th colspan=""2"" class=""text-center""
                                                style=""vertical-align: middle;"">Bobot
                                            </th>
                                            <th colspan=""2"" class=""text-center""
                                                style=""vertical-align: middle;"">Nilai
                                            </th>
                                        </tr>
                                        <tr>
                                            <td class=""text-center"">Pakar</td>
                                            <td class=""text-center"">User</td>
                                            <td class=""text-center"">CF</td>
                                            <td class=""text-center"">CFR</td>
                                        </tr>
                                        </thead>
                                        <tbody>
                                        @foreach ($data['bobot'] as $CFValue)
                                            <tr>
                                                <td class=""text-center"">{{ $CFValue['gejala']->kode }}
                                                </td>
                                                <td class=""text-center"">{{ $CFValue['bobot']['pakar'] }}
                                                </td>
                                                <td class=""text-center"">{{ $CFValue['bobot']['user'] }}
                                                </td>
                                                <td>
                                                    <div class=""row"">
                                                        <div class=""col-4"">CF [H,
                                                            E]<sub>{{ removeFromStr($CFValue['gejala']->kode, 'G') }}</sub>
                                                        </div>
                                                        <div class=""col-1"">=</div>
                                                        <div class=""col-7"">CF [H]
                                                            &times; CF [E]
                                                        </div>
                                                    </div>
                                                    <div class=""row"">
                                                        <div class=""col-4""></div>
                                                        <div class=""col-1"">=</div>
                                                        <div class=""col-7"">
                                                            {{ $CFValue['bobot']['pakar'] }}
                                                            &times;
                                                            {{ $CFValue['bobot']['user'] }}
                                                        </div>
                                                    </div>
                                                    <div class=""row"">
                                                        <div class=""col-4""></div>
                                                        <div class=""col-1"">=</div>
                                                        <div class=""col-7"">
                                                            {{ $CFValue['value']['cf'] }}
                                                        </div>
                                                    </div>
                                                </td>
                                                <td>
                                                    CFR<sub>{{ removeFromStr($CFValue['gejala']->kode, 'G') }}</sub>
                                                    = CF [H, E] &times; RUR
                                                    <br>
                                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                    = {{ $CFValue['value']['cf'] }}
                                                    &times;
                                                    {{ $data['rur'] }}
                                                    <br>
                                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                    = {{ $CFValue['value']['cfr'] }}
                                                </td>
                                            </tr>
                                        @endforeach
                                        </tbody>
                                    </table>
                                </div>
                                <!--end::Table-->

                                <h6 class=""mt-2"">Nilai CF Kombinasi</h6>

                                <div class=""table-responsive"">
                                    <table class=""table table-hover table-bordered"">
                                        @php
                                            $previousGejala = $data['gejala_penyakit'][0];
                                            $currentLeft = 'CFR' . removeFromStr($previousGejala->kode, 'G');
                                            $previousFormula = '';
                                        @endphp

                                        @for ($i = 0; $i < count($data['gejala_penyakit']) - 1; $i++)
                                            @php
                                                $currentGejala = $data['gejala_penyakit'][$i];
                                                $nextGejala = $data['gejala_penyakit'][$i + 1];

                                                $_left = 'R' . removeFromStr($nextGejala->kode, 'G');
                                                $left = $currentLeft . $_left;
                                                $currentLeft = $left;

                                                $previousGejala = $currentGejala;
                                                $base = ($i == 0) ? $data['bobot'][$i]['value']['cfr'] : $data['cf_kombinasi']['steps'][$i-1];
                                            @endphp

                                            <tr>
                                                <td>
                                                    {!! $left !!}
                                                </td>
                                                <td>
                                                    =
                                                    <br>
                                                    =
                                                    <br>
                                                    =
                                                </td>
                                                <td>
                                                    @for ($j = 0; $j < 3; $j++)
                                                        @if ($j == 0)
                                                            @php
                                                                $_right = $previousFormula . 'R' . removeFromStr($currentGejala->kode, 'G');
                                                                $previousFormula = $_right;

                                                                $right = 'CF' . $_right . ' + CFR' . removeFromStr($nextGejala->kode, 'G') . ' * (1 - CF' . $_right . ')';
                                                            @endphp
                                                            {!! $right !!}
                                                        @elseif ($j == 1)
                                                            <br>
                                                            {{ $base }}
                                                            +
                                                            {{ $data['bobot'][$i + 1]['value']['cfr'] }}
                                                            *
                                                            (1 -
                                                            {{ $base }})
                                                        @elseif ($j == 2)
                                                            <br>
                                                            {{ $data['cf_kombinasi']['steps'][$i] }}
                                                        @endif
                                                    @endfor

                                                </td>
                                            </tr>
                                        @endfor
                                        <tr>
                                            <td>
                                                Nilai CF Kombinasi
                                            </td>
                                            <td>
                                                =
                                                <br>
                                                =
                                            </td>
                                            <td>
                                                {{ $data['cf_kombinasi']['hasil'] }}
                                            </td>
                                        </tr>
                                        <tr>
                                            <td>
                                                Persentase
                                            </td>
                                            <td>=</td>
                                            <td>
                                                Nilai CF Kombinasi &times; 100%
                                                <br>
                                                {{ $data['cf_kombinasi']['persentase'] }}%
                                            </td>
                                        </tr>
                                    </table>
                                </div>

                                {{--                                <ul class=""list-group"">--}}
                                {{--                                    <li class=""list-group-item"">--}}
                                {{--                                        <h6 class=""mt-3 mb-0 lh-sm"">Nilai CF Kombinasi</h6>--}}
                                {{--                                        <p>--}}
                                {{--                                            Berdasarkan hasil perhitungan, permasalahan--}}
                                {{--                                            <b>{{ $data['permasalahan']['nama'] }}</b>--}}
                                {{--                                            menghasilkan nilai {{ $data['cf_kombinasi']['result'] }} atau--}}
                                {{--                                            {{ $data['cf_kombinasi']['persentase'] }}% keyakinan.--}}
                                {{--                                        </p>--}}
                                {{--                                    </li>--}}
                                {{--                                </ul>--}}
                            </div>
                        </div>
                    @endforeach
                </div>
            </div>
            <!--end::Card body-->
        </div>

    </div>
@endsection
"
QnpWFYhs,Flush Links,ofmarconi,PHP,Sunday 5th of May 2024 09:29:30 AM CDT,"<?php
/**
 * Plugin Name: Network Flush Rewrite Rules Button
 * Description: Adds a button to the WordPress admin bar to flush rewrite rules across all sites in a Multisite network for Editors and Administrators. Reminds to clear site cache after flushing.
 * Version: 1.0
 * Network: true
 */

add_action('admin_bar_menu', 'add_network_flush_button', 100);

/**
 * Adds a button to the WordPress admin bar if the user is an editor or administrator.
 */
function add_network_flush_button($wp_admin_bar) {
    if (!is_user_logged_in()) {
        return;
    }
    if (!current_user_can('edit_others_posts')) { // Checks if the user can edit other users' posts, common among editors and administrators
        return;
    }

    $args = array(
        'id'    => 'network-flush-rewrite',
        'title' => 'Flush Network Rewrites',
        'href'  => '#',
        'meta'  => array(
            'onclick' => 'flushNetworkRewrites();',
            'class'   => 'flush-rewrite-button',
            'title'   => 'Flush Rewrite Rules Across All Sites'
        )
    );
    $wp_admin_bar->add_node($args);
}

add_action('admin_footer', 'flush_rewrite_javascript');

/**
 * JavaScript to handle the flush action when the button is clicked.
 */
function flush_rewrite_javascript() {
    ?>
    <script type=""text/javascript"">
        function flushNetworkRewrites() {
            if (confirm(""Are you sure you want to flush rewrite rules across all network sites? This action can affect site performance."")) {
                window.location.href = ""<?php echo admin_url('admin-post.php?action=flush_network_rewrites'); ?>"";
            }
        }
    </script>
    <?php
}

add_action('admin_post_flush_network_rewrites', 'handle_network_flush_rewrite');

/**
 * Handles the flush action when the button is clicked.
 */
function handle_network_flush_rewrite() {
    if (!current_user_can('edit_others_posts')) {
        wp_die('You do not have sufficient permissions to perform this action.');
    }

    flush_network_rewrite_rules(); // Assumes the function is defined in previous examples
    wp_redirect(add_query_arg(['flushed' => '1'], admin_url()));
    exit;
}

add_action('admin_notices', 'show_flush_notification');

/**
 * Shows a notification after the flush operation has been completed.
 */
function show_flush_notification() {
    if (isset($_GET['flushed']) && $_GET['flushed'] == '1') {
        echo '<div class=""notice notice-success is-dismissible""><p>Flush completed. Do not forget to clear the ""Site Cache"".</p></div>';
    }
}

// The function flush_network_rewrite_rules is assumed to be defined in previous examples
"
iCvMFBJb,Time,excellent940707,C++,Sunday 5th of May 2024 09:15:32 AM CDT,"//H34121232
#include<iostream>
#include<iomanip>
#include""Time.h""

using namespace std;

Time::Time(int hr, int min, int sec)
{
    setTime(hr, min, sec);
}

Time& Time::setTime(int h, int m, int s){
    second=0;
    if(h>=0&&h<24)second+=h*3600;
    if(m>=0&&m<60)second+=m*60;
    if(s>=0&&s<60)second+=s;
    return *this;
}

Time& Time::setHour(int h){
    if(h>=0&&h<24)second+=h*3600;
    return *this;
}

Time& Time::setMinute(int m){
    if(m>=0&&m<60)second+=m*60;
    return *this;
}

Time& Time::setSecond(int s){
    if(s>=0&&s<60)second+=s;
    return *this;
}

int Time::getHour()const{
    return second/3600;
}

int Time::getMinute()const{
    return (second%3600)/60;
}

int Time::getSecond()const{
    return second%60;
}

void Time::printUniversal(){
    cout<<setfill('0')<<setw(2)<<second/3600<<"":""
        <<setw(2)<<(second%3600)/60<<"":""<<setw(2)<<second%60<<'\n';
}

void Time::printStandard(){
    int hour = second/3600;
    int minute = (second%3600)/60;
    int sec = second%60;
    cout<<((hour==0||hour==12)?12:hour%12)<<"":""
        <<setfill('0')<<setw(2)<<minute<<"":""<<setw(2)
        <<sec<<(hour<12?""AM"":""PM"")<<'\n';
}

int main(){
    Time t;

    t.setHour(18).setMinute(30).setSecond(22);
    cout<<""Universal time: "";
    t.printUniversal();

    cout<<""\nStandard time: "";
    t.printStandard();

    cout<<""\n\nNew standard time: "";
    t.setTime(20,20,20).printStandard();
    cout<<endl;
    return 0;
}"
sMcLUG7Z,task 6,isbasov,Go,Sunday 5th of May 2024 08:15:58 AM CDT,"package main

import (
	""bufio""
	""fmt""
	""os""
	""sort""
	""strconv""
	""strings""
	//""github.com/pkg/profile""
)

type order struct {
	Arrival int
	Index   int
}

type car struct {
	From  int
	To    int
	Cap   int
	Index int
}

func main() {

	//defer profile.Start(profile.CPUProfile).Stop()
	in := bufio.NewReader(os.Stdin)
	out := bufio.NewWriter(os.Stdout)
	defer out.Flush()

	var t int
	fmt.Fscan(in, &t)

	for l := 0; l < t; l++ {
		var n int
		fmt.Fscan(in, &n)
		orders := make([]order, n)

		for i := 0; i < n; i++ {
			o := order{Index: i}
			fmt.Fscan(in, &o.Arrival)
			orders[i] = o
		}
		sort.SliceStable(orders, func(i, j int) bool { return orders[i].Arrival < orders[j].Arrival })

		var m int
		fmt.Fscan(in, &m)
		cars := make([]car, m)
		for i := 0; i < m; i++ {
			c := car{Index: i}
			fmt.Fscan(in, &c.From, &c.To, &c.Cap)
			cars[i] = c
		}

		sort.SliceStable(cars, func(i, j int) bool {
			if cars[i].From == cars[j].From {
				return cars[i].To < cars[j].To
			}
			return cars[i].From < cars[j].From
		})

		orderCars := make([]string, n)
		var k int
		for i := range orders {
			orderCars[orders[i].Index] = ""-1""
			for j := k; j < m; j++ {
				if orders[i].Arrival >= cars[j].From && orders[i].Arrival <= cars[j].To && cars[j].Cap > 0 {
					orderCars[orders[i].Index] = strconv.Itoa(cars[j].Index + 1)
					cars[j].Cap--
					k = j
					break
				}
			}
		}

		out.WriteString(strings.Join(orderCars, "" ""))
		out.WriteString(""\n"")
	}

}
"
jAnjr93C,Untitled,excellent940707,C++,Sunday 5th of May 2024 08:08:39 AM CDT,"#include <iostream>
#include <string>
#include <iomanip>
using namespace std;
const int MAX_BOOKS = 5;
class Book
{
private:
string title;
string author;
double price;
public:
static int totalSales;
Book(string t,string a,double p):title(t),author(a),price(p){}
Book():title("" ""),author("" ""),price(0){}
Book(Book const& book):title(book.title),author(book.author),price(book.price){}
Book& display()
{
  cout<<setw(10)<<""title: ""<<title<<endl<<setw(10)<<""author: ""<<author<<endl<<setw(10)<<""price: ""<<price;
  return *this;
}
Book& sell()
{
  totalSales+=1;
  return *this;
}
};
class Bookstore
{
public:
Bookstore():ix(0){}
Bookstore& addBook(Book book)
{
  if(ix!=4)
  {
    books[ix++]=book;
  }
  else
  {
    cout<<""the number of books reach the maximum""<<endl;
  }
  return *this;
}
Bookstore& displayBooks()
{
  for(int i=0;i<ix;i++)
    {
      books[i].display();
      cout<<""\n\n"";
    }
  return *this;
}
Bookstore& sellBook(int index)
{
  books[index].sell();
  return *this;
}
private:
Book books[MAX_BOOKS];
int ix;
};
int Book::totalSales=0;
int main() 
{
   Bookstore store;
   // Adding books with chained calls
   store.addBook(Book(""1984"", ""George Orwell"", 9.99))
  .addBook(Book(""Animal Farm"", ""George Orwell"", 7.99))
  .addBook(Book(""The Great Gatsby"", ""F. Scott Fitzgerald"", 14.99))
  .addBook(Book(""A Brief History of Time"", ""Stephen Hawking"", 15.99))
  .addBook(Book(""Sapiens"", ""Yuval Noah Harari"", 18.99));
   // Display all books and sell some books with chained calls
   store.displayBooks()
   .sellBook(1) // Sell ""Animal Farm""
   .sellBook(3); // Sell ""A Brief History of Time""
   // Display total sales
   cout << ""Total Books Sold: "" << Book::totalSales << endl;
   return 0;
}"
BwNXe5qa,Source of True Evil,brandblox,Python,Sunday 5th of May 2024 07:46:24 AM CDT,"#Reverse
num = int(input(""Enter a number: ""))
reversed_num = 0
while num > 0:
    digit = num % 10
    reversed_num = (reversed_num * 10) + digit
    num = num // 10
print(f""The reversed number: {reversed_num}"")

#fibonacchi
num_terms = int(input(""Enter the number of terms for the Fibonacci series: ""))
if num_terms <= 0:
    print(""Invalid input. Please enter a positive integer."")
else:
    fib_series = [0, 1]
    while len(fib_series) < num_terms:
        fib_series.append(fib_series[-1] + fib_series[-2])
    sum_fib_series = sum(fib_series)
    print(f""The sum of the first {num_terms} terms in the Fibonacci series is: {sum_fib_series}"")

#armstrong
num = int(input(""Enter a number: ""))
original_num = num
num_digits = len(str(num))
sum_of_digits = 0
while num > 0:
    digit = num % 10
    sum_of_digits += digit ** num_digits
    num = num // 10
if original_num == sum_of_digits:
    print(f""{original_num} is an Armstrong number."")
else:
    print(f""{original_num} is not an Armstrong number."")


#positive negative sum
sum_positive = 0
sum_negative = 0
for i in range(10):
    num = float(input(f""Enter number {i + 1}: ""))

    if num > 0:
        sum_positive += num
    elif num < 0:
        sum_negative += num

print(f""Sum of positive numbers: {sum_positive}"")
print(f""Sum of negative numbers: {sum_negative}"")


#palindrome

num = int(input(""Enter a number: ""))
original_num = num
reversed_num = 0
while num > 0:
    digit = num % 10
    reversed_num = (reversed_num * 10) + digit
    num = num // 10
if original_num == reversed_num:
    print(f""{original_num} is a palindrome."")
else:
    print(f""{original_num} is not a palindrome."")


* 
* * 
* * * 
* * * * 
* * * * * 

rows = 5
for i in range(0, rows):    
    for j in range(0, i + 1):        
        print(""*"", end=' ')    
    print()

1 
2 2 
3 3 3 
4 4 4 4 
5 5 5 5 5 

rows = 6
for i in range(rows):    
    for j in range(i):        
        print(i, end=' ')    
    print('')

1 
1 2 
1 2 3 
1 2 3 4 
1 2 3 4 5 

rows = 5
for i in range(1, rows + 1):
    for j in range(1, i + 1):
        print(j, end=' ')
    print('')

1 
2 3 
4 5 6 
7 8 9 10 
11 12 13 14 15

rows = 5
counter = 1
for i in range(1, rows + 1):
    for j in range(1, i + 1):
        print(counter, end=' ')
        counter += 1
    print('')

        *   
       *  *   
      *  *  *   
     *  *  *  *   
    *  *  *  *  *  

size = 5
m = (2 * size) - 2
for i in range(0, size):
    for j in range(0, m):
        print(end="" "")    
    m = m - 1
    for j in range(0, i + 1):
        print(""* "", end=' ')
    print("" "")

''' OR
n = 5
for i in range(n):
    print(' '*(n-i-1) + '* ' * (i))
print()
'''

*  *  *  *  *   
 *  *  *  *   
  *  *  *   
   *  *   
    *

size = 5
m = 0
for i in range(size, 0, -1):
    for j in range(0, m):
        print(end="" "")
    m = m + 1
    for j in range(0, i):
        print(""* "", end=' ')
    print("" "")

''' OR
n = 5
for i in range(n-1,-1,-1):
    print(' ' * (n - i - 1) + '* ' * (i))
'''

    * 
   * * 
  * * * 
 * * * * 
  * * * 
   * * 
    * 

rows = 3
k = 2 * rows - 2
for i in range(0, rows):
    for j in range(0, k):
        print(end="" "")
    k = k - 1
    for j in range(0, i + 1):
        print(""* "", end="""")
    print("""")
    
k = rows - 2

for i in range(rows, -1, -1):
    for j in range(k, 0, -1):
        print(end="" "")
    k = k + 1
    for j in range(0, i + 1):
        print(""* "", end="""")
    print("""")
    
    
'''OR    
    
n = 3
for i  in range(n):
    print(' '*(n-i-1) + '*' * (2*i+1))
for i in range(n-2,-1,-1):
    print(' ' * (n - i - 1) + '*' * (2 * i + 1))'''


#calculator

def addition(num1, num2):
    num1 += num2
    return num1

def subtraction(num1, num2):
    num1 -= num2
    return num1

def mul(num1, num2):
    num1 *= num2
    return num1

def division(num1, num2):
    if num2 != 0:
        num1 /= num2
        return num1
    else:
        return ""Cannot divide by zero""

def module(num1, num2):
    if num2 != 0:
        num1 %= num2
        return num1
    else:
        return ""Cannot perform modulus with zero""

def default(num1, num2):
    return ""Incorrect day""

switcher = {
    1: addition,
    2: subtraction,
    3: mul,
    4: division,
    5: module
}

def switch(operation):
    num1 = float(input(""Enter the first number: ""))
    num2 = float(input(""Enter the second number: ""))
    return switcher.get(operation, default)(num1, num2)

print('''You can perform the following operations:

1. **Addition**
2. **Subtraction**
3. **Multiplication**
4. **Division**
5. **Modulus (Remainder)''')

# Take input from the user
choice = int(input(""Select an operation from 1 to 5: ""))
print(switch(choice))




#Fibonacchi using recursion
def fibonacci(n):
    if n <= 0:
        return ""Please enter a positive integer""
    elif n == 1:
        return [0]
    elif n == 2:
        return [0, 1]
    else:
        fib_series = fibonacci(n - 1)
        fib_series.append(fib_series[-1] + fib_series[-2])
        return fib_series

n = int(input(""Enter the value of 'n' to print Fibonacci series up to n: ""))

result = fibonacci(n)
print(f""Fibonacci series up to {n}: {result}"")



#GCD using recurtion
def gcd_recursive(a, b):
    if b == 0:
        return a
    else:
        return gcd_recursive(b, a % b)

# Take input from the user
num1 = int(input(""Enter the first number: ""))
num2 = int(input(""Enter the second number: ""))

result = gcd_recursive(num1, num2)
print(f""The GCD of {num1} and {num2} is: {result}"")



# Wap to print sum of list
l1 = [12+13+14+15+56]
sum = 0

for i  in l1:
    sum += i

print(sum

#output
110

#Wap to print mal element
ls=[]
print(""Enter Elements in array"")
for i in range(5):
    el=int(input())
    ls.append(el)
    
maxel=ls[0]

mi=0
for i in range(1,len(ls)):
    if ls[i]>maxel:
        maxel=ls[i]
        mi = i
        
print(""Max element is: "",maxel)

#output
Enter Elements in array
13
67
34
99
12
Max element is:  99

#wap to print common elements
def compare_lists(list1, list2):
    common_elements = set(list1) & set(list2)
    return list(common_elements)


list1_input = input(""Enter elements of the first list separated by spaces: "")
list1 = list(map(str, list1_input.split()))


list2_input = input(""Enter elements of the second list separated by spaces: "")
list2 = list(map(str, list2_input.split()))

common_elements = compare_lists(list1, list2)

if common_elements:
    print(""Common elements: "", common_elements)
else:
    print(""No common elements found."")

#output
Enter elements of the first list separated by spaces: 12 13 45 67 89
Enter elements of the second list separated by spaces: 12 45 67 89
Common elements:  ['12', '45', '67', '89']

#Wap to remove even numbers
def remove_even_numbers(input_list):
    return [num for num in input_list if int(num) % 2 != 0]

user_input = input(""Enter a list of numbers separated by spaces: "")
numbers_list = user_input.split()

filtered_list = remove_even_numbers(numbers_list)

print(""List after removing even numbers:"", filtered_list)


#output
Enter a list of numbers separated by spaces: 12 34 56 77 43 31
List after removing even numbers: ['77', '43', '31']

#Wap to print number of occurance
def count_occurrences(array, target_element):
    return array.count(target_element)

user_input = input(""Enter a list of numbers separated by spaces: "")
numbers_list = user_input.split()


target_element = input(""Enter the element to count: "")

occurrences = count_occurrences(numbers_list, target_element)

print(f""The number of occurrences of {target_element} in the list is: {occurrences}"")

#output
Enter a list of numbers separated by spaces: 12 33 33 45 67 54
Enter the element to count: 33
The number of occurrences of 33 in the list is: 2


#accept and print matrix
matrix = []

for i in range(3):
    row = []
    for j in range(3):
        row.append(int(input(f""Enter element at position ({i+1}, {j+1}): "")))
    matrix.append(row)

print(""Entered 3x3 matrix:"")
for row in matrix:
    print(row)

output:
Enter element at position (1, 1): 1
Enter element at position (1, 2): 2
Enter element at position (1, 3): 3
Enter element at position (2, 1): 4
Enter element at position (2, 2): 5
Enter element at position (2, 3): 6
Enter element at position (3, 1): 7
Enter element at position (3, 2): 8
Enter element at position (3, 3): 9
Entered 3x3 matrix:
[1, 2, 3]
[4, 5, 6]
[7, 8, 9]


#accept matrix and element sum
matrix = []
a=0
sum=0

for i in range(3):
    row = []
    for j in range(3):
        a=int(input(f""Enter element at position ({i+1}, {j+1}): ""))
        row.append(a)
        sum+=a
    matrix.append(row)

print(""Entered 3x3 matrix:"")
for row in matrix:
    print(row)
    
print(""Sum = "",sum)

Output:
Enter element at position (1, 1): 1
Enter element at position (1, 2): 2
Enter element at position (1, 3): 3
Enter element at position (2, 1): 4
Enter element at position (2, 2): 5
Enter element at position (2, 3): 6
Enter element at position (3, 1): 7
Enter element at position (3, 2): 8
Enter element at position (3, 3): 9
Entered 3x3 matrix:
[1, 2, 3]
[4, 5, 6]
[7, 8, 9]
Sum =  45



#Accept matrix and trace
matrix = []

for i in range(3):
    row = []
    for j in range(3):
        element = int(input(f""Enter element at position ({i+1}, {j+1}): ""))
        row.append(element)
    matrix.append(row)

print(""Entered 3x3 matrix:"")
for row in matrix:
    print(row)

trace = 0
for i in range(3):
    trace += matrix[i][i]

print(f""Trace of the matrix: {trace}"")

Output:
Enter element at position (1, 1): 1
Enter element at position (1, 2): 2
Enter element at position (1, 3): 3
Enter element at position (2, 1): 4
Enter element at position (2, 2): 5
Enter element at position (2, 3): 6
Enter element at position (3, 1): 7
Enter element at position (3, 2): 8
Enter element at position (3, 3): 9
Entered 3x3 matrix:
[1, 2, 3]
[4, 5, 6]
[7, 8, 9]
Trace of the matrix: 15



#Matrix multiplication
import numpy as np

matrix1 = []
for i in range(3):
    row = []
    for j in range(3):
        element = int(input(f""Enter element for matrix1 at position ({i+1}, {j+1}): ""))
        row.append(element)
    matrix1.append(row)

matrix2 = []
for i in range(3):
    row = []
    for j in range(3):
        element = int(input(f""Enter element for matrix2 at position ({i+1}, {j+1}): ""))
        row.append(element)
    matrix2.append(row)

print(""Entered 3x3 matrix 1:"")
for row in matrix1:
    print(row)

print(""\nEntered 3x3 matrix 2:"")
for row in matrix2:
    print(row)

array1 = np.array(matrix1)
array2 = np.array(matrix2)


result_array = np.dot(array1, array2)

print(""\nResult of matrix multiplication:"")
print(result_array)

Output:
Enter element for matrix1 at position (1, 1): 1
Enter element for matrix1 at position (1, 2): 2
Enter element for matrix1 at position (1, 3): 3
Enter element for matrix1 at position (2, 1): 4
Enter element for matrix1 at position (2, 2): 5
Enter element for matrix1 at position (2, 3): 6
Enter element for matrix1 at position (3, 1): 7
Enter element for matrix1 at position (3, 2): 8
Enter element for matrix1 at position (3, 3): 9
Enter element for matrix2 at position (1, 1): 1
Enter element for matrix2 at position (1, 2): 10
Enter element for matrix2 at position (1, 3): 11
Enter element for matrix2 at position (2, 1): 12
Enter element for matrix2 at position (2, 2): 13
Enter element for matrix2 at position (2, 3): 14
Enter element for matrix2 at position (3, 1): 15
Enter element for matrix2 at position (3, 2): 16
Enter element for matrix2 at position (3, 3): 17
Entered 3x3 matrix 1:
[1, 2, 3]
[4, 5, 6]
[7, 8, 9]

Entered 3x3 matrix 2:
[1, 10, 11]
[12, 13, 14]
[15, 16, 17]

Result of matrix multiplication:
[[ 70  84  90]
 [154 201 216]
 [238 318 342]]



#Count vowels, consonants and blanks
def count_vowels_consonants_blanks(string):
    vowels = 'aeiouAEIOU'
    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'
    blanks = ' '

    vowel_count = 0
    consonant_count = 0
    blank_count = 0

    for char in string:
        if char in vowels:
            vowel_count += 1
        elif char not in consonants:
            consonant_count += 1
        elif char in blanks:
            blank_count += 1

    return vowel_count, consonant_count, blank_count

input_string = input(""Enter a string: "")
vowels, consonants, blanks = count_vowels_consonants_blanks(input_string)
print(""Vowels:"", vowels)
print(""Consonants:"", consonants)
print(""Blanks:"", blanks)

#Output:
Enter a string: Arijit is my name
Vowels: 6
Consonants: 8
Blanks: 3

#find substring in a string
def find_substring(string, substring):    
    index = string.find(substring)
    if index != -1:
        print(f""'{substring}' found at index {index} using find() method."")
    else:
        print(f""'{substring}' not found using find() method."")


input_string = input(""Enter the main string: "")
input_substring = input(""Enter the substring to find: "")

find_substring(input_string, input_substring)


#Output:
Enter the main string: i live in India
Enter the substring to find: India
'India' found at index 10 using find() method.


#print reverse and check palindrome
def is_palindrome(string):
    reversed_string = string[::-1]
    if string == reversed_string:
        return True, reversed_string
    else:
        return False, reversed_string

input_string = input(""Enter a string: "")
check, reversed_string = is_palindrome(input_string)

print(""Original string:"", input_string)
print(""Reversed string:"", reversed_string)

if check:
    print(""The string is a palindrome."")
else:
    print(""The string is not a palindrome."")


#Output:
Enter a string: malayalam
Original string: malayalam
Reversed string: malayalam
The string is a palindrome.

#Print pattern
word = ""INDIA""
for i in range(len(word), 0, -1):
    print(word[:i])

#Ouput:
INDIA
INDI
IND
IN
I




def tuple_length(tup):
    return len(tup)
my_tuple = (1, 2, 3, 4, 5)
print(""Length of the tuple:"", tuple_length(my_tuple))

Output: 
Length of the tuple: 5

def tuple_to_string(tup):
    return ''.join(tup)

my_tuple = ('Hello', ' ', 'world', '!')
result = tuple_to_string(my_tuple)
print(""Converted string:"", result)

Output:
Converted string: Hello world!

def common_elements(tup1, tup2):
    common = tuple(x for x in tup1 if x in tup2)
    return common

tuple1 = (1, 2, 3, 4, 5)
tuple2 = (4, 5, 6, 7, 8)
result = common_elements(tuple1, tuple2)
print(""Common elements:"", result)

Output:
Common elements: (4, 5)

def merge_tuples(tup1, tup2):
    merged_list = list(tup1)
    for item in tup2:
        if item not in merged_list:
            merged_list.append(item)
    merged_tuple = tuple(merged_list)
    return merged_tuple

tuple1 = (1, 2, 3, 4, 5)
tuple2 = (4, 5, 6, 7, 8)
result = merge_tuples(tuple1, tuple2)
print(""Merged tuple without duplicates:"", result)

Output: 
Merged tuple without duplicates: (1, 2, 3, 4, 5, 6, 7, 8)

def even_odd_numbers(tup):
    even_numbers = tuple(num for num in tup if num % 2 == 0)
    odd_numbers = tuple(num for num in tup if num % 2 != 0)
    return even_numbers, odd_numbers

my_tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9)
even, odd = even_odd_numbers(my_tuple)
print(""Even numbers:"", even)
print(""Odd numbers:"", odd)

Output:
Even numbers: (2, 4, 6, 8)
Odd numbers: (1, 3, 5, 7, 9)

def tuple_product(tup):
    product = 1
    for num in tup:
        product *= num
    return product

my_tuple = (1, 2, 3, 4, 5)
result = tuple_product(my_tuple)
print(""Product of all elements in the tuple:"", result)

Output:
Product of all elements in the tuple: 120


emails = tuple()
username = tuple()
domainname = tuple()
n = int(input(""How many email ids you want to enter?: ""))
for i in range(0, n):
    emid = input(""> "")
    emails = emails + (emid,)
    spl = emid.split(""@"")
    username = username + (spl[0],)
    domainname = domainname + (spl[1],)

print(""\nThe email ids in the tuple are:"")
print(emails)

print(""\nThe username in the email ids are:"")
print(username)

print(""\nThe domain name in the email ids are:"")
print(domainname)


Output:
How many email ids you want to enter?: 2
> arijit@gmail.com
> abir@outlook.com

The email ids in the tuple are:
('arijit@gmail.com', 'abir@outlook.com')

The username in the email ids are:
('arijit', 'abir')

The domain name in the email ids are:
('gmail.com', 'outlook.com')



#Q1. python program to check if a string starts with the and end with spain use regex


import re

def check_string(input_string):
    pattern = r'^the.*spain$'
    if re.match(pattern, input_string, re.IGNORECASE):
        return True
    else:
        return False

test_string1 = input(""Enter string: "")

print(check_string(test_string1))

#output: 
Enter string: the spain
True
Enter string: the spain not
False


#Q. program to find all lowercase charcters aplhabetically between a and m, use regex
import re

def find_lower_chars(input_string):
    pattern = r'[a-m]'
    result = re.findall(pattern, input_string)
    return result

user_input = input(""Enter a string: "")
lowercase_chars = find_lower_chars(user_input)
print(""Lowercase characters between 'a' and 'm':"", lowercase_chars)

#output:
Enter a string: The quick brown fox jumps over the lazy dog
Lowercase characters between 'a' and 'm': ['h', 'e', 'i', 'c', 'k', 'b', 'f', 'j', 'm', 'e', 'h', 'e', 'l', 'a', 'd', 'g']

#Q. program to search for the first white space character in the string


import re

txt = ""The rain in Spain""
x = re.search(""\s"", txt)

print(""The first white-space character is located in position:"", x.start())

#Output:
The first white-space character is located in position: 3

#Q. program to split at each whitespace character using regex

import re

def split_at_whitespace(input_string):
    return re.split(r'\s+', input_string)

user_input = input(""Enter a string: "")
result = split_at_whitespace(user_input)
print(""Split at each whitespace character:"", result)


#Output: 
Enter a string: This is a demo input.
Split at each whitespace character: ['This', 'is', 'a', 'demo', 'input.']


#Q. replace every white space character with the number nine

import re

def replace_whitespace_with_nine(input_string):
    return re.sub(r'\s', '9', input_string)

user_input = input(""Enter a string: "")
result = replace_whitespace_with_nine(user_input)
print(""String with every whitespace character replaced with '9':"", result)


#Output:
Enter a string: This is a demo input
String with every whitespace character replaced with '9': This9is9a9demo9inputp


#Q: check if email valid or not:
import re

def validate_email(email):
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    regex = re.compile(pattern)
    return bool(regex.match(email))

user_email = input(""Enter your email address: "")

if validate_email(user_email):
    print(""Valid email address!"")
else:
    print(""Invalid email address. Please enter a valid email."")


#Output:
Enter your email address: arijit@gmail.com
Valid email address!

Enter your email address: arijit@gmail
Invalid email address. Please enter a valid email.



#Q1. python program to check if a string starts with the and end with spain use regex


import re

def check_string(input_string):
    pattern = r'^the.*spain$'
    if re.match(pattern, input_string, re.IGNORECASE):
        return True
    else:
        return False

test_string1 = input(""Enter string: "")

print(check_string(test_string1))

#output: 
Enter string: the spain
True
Enter string: the spain not
False


#Q. program to find all lowercase charcters aplhabetically between a and m, use regex
import re

def find_lower_chars(input_string):
    pattern = r'[a-m]'
    result = re.findall(pattern, input_string)
    return result

user_input = input(""Enter a string: "")
lowercase_chars = find_lower_chars(user_input)
print(""Lowercase characters between 'a' and 'm':"", lowercase_chars)

#output:
Enter a string: The quick brown fox jumps over the lazy dog
Lowercase characters between 'a' and 'm': ['h', 'e', 'i', 'c', 'k', 'b', 'f', 'j', 'm', 'e', 'h', 'e', 'l', 'a', 'd', 'g']

#Q. program to search for the first white space character in the string


import re

txt = ""The rain in Spain""
x = re.search(""\s"", txt)

print(""The first white-space character is located in position:"", x.start())

#Output:
The first white-space character is located in position: 3

#Q. program to split at each whitespace character using regex

import re

def split_at_whitespace(input_string):
    return re.split(r'\s+', input_string)

user_input = input(""Enter a string: "")
result = split_at_whitespace(user_input)
print(""Split at each whitespace character:"", result)


#Output: 
Enter a string: This is a demo input.
Split at each whitespace character: ['This', 'is', 'a', 'demo', 'input.']


#Q. replace every white space character with the number nine

import re

def replace_whitespace_with_nine(input_string):
    return re.sub(r'\s', '9', input_string)

user_input = input(""Enter a string: "")
result = replace_whitespace_with_nine(user_input)
print(""String with every whitespace character replaced with '9':"", result)


#Output:
Enter a string: This is a demo input
String with every whitespace character replaced with '9': This9is9a9demo9inputp


#Q: check if email valid or not:
import re

def validate_email(email):
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    regex = re.compile(pattern)
    return bool(regex.match(email))

user_email = input(""Enter your email address: "")

if validate_email(user_email):
    print(""Valid email address!"")
else:
    print(""Invalid email address. Please enter a valid email."")


#Output:
Enter your email address: arijit@gmail.com
Valid email address!

Enter your email address: arijit@gmail
Invalid email address. Please enter a valid email.



#Bubble sort
def bubble_sort(arr):
    n = len(arr)
    for i in range(n):
        for j in range(0, n-i-1):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]

arr = []
size = int(input(""Enter the size of the array: ""))
print(""Enter the elements of the array:"")
for _ in range(size):
    element = int(input())
    arr.append(element)

bubble_sort(arr)
print(""Sorted array is:"", arr)




# Creating a dictionary with key-value pairs using dict() function taking user input

my_dict = {}
num_pairs = int(input(""Enter the number of key-value pairs: ""))

for i in range(num_pairs):
    key = input(""Enter key {}: "".format(i+1))
    value = input(""Enter value {}: "".format(i+1))
    my_dict[key] = value

print(""Dictionary created:"", my_dict)

#output
Enter the number of key-value pairs: 2
Enter key 1: hello
Enter value 1: 2
Enter key 2: word
Enter value 2: 2
Dictionary created: {'hello': '2', 'word': '2'}


#WAP in python to insert three elements and Pop 1 element from a Dictionary.

my_dict = {}

my_dict['apple'] = 10
my_dict['banana'] = 20
my_dict['orange'] = 30

print(""Original dictionary:"", my_dict)

popped_item = my_dict.popitem()

print(""Popped item:"", popped_item)
print(""Dictionary after popping one element:"", my_dict)

#output:
Original dictionary: {'apple': 10, 'banana': 20, 'orange': 30}
Popped item: ('orange', 30)
Dictionary after popping one element: {'apple': 10, 'banana': 20}


#WAP in python to find sum of all items in a Dictionary 

my_dict = {'a': 10, 'b': 20, 'c': 30, 'd': 40}
total_sum = sum(my_dict.values())
print(""Sum of all items in the dictionary:"", total_sum)

#output:
Sum of all items in the dictionary: 100


# WAP in python update the value of a dictionary in Python if the particular key exists. If the key is not
#present in the dictionary, we will simply print that the key does not exist

my_dict = {'a': 10, 'b': 20, 'c': 30}

key_to_update = input(""Enter the key to update: "")
new_value = input(""Enter the new value: "")

if key_to_update in my_dict:
    my_dict[key_to_update] = new_value
else:
    print(""The key does not exist"")

print(""Updated dictionary:"", my_dict)

#output:
Enter the key to update: a
Enter the new value: 6
Updated dictionary: {'a': '6', 'b': 20, 'c': 30}


#Write a program to get the maximum and minimum value of dictionary

my_dict = {'a': 10, 'b': 20, 'c': 30, 'd': 5}

max_value = max(my_dict.values())
min_value = min(my_dict.values())

print(""Maximum value in the dictionary:"", max_value)
print(""Minimum value in the dictionary:"", min_value)


#output
Maximum value in the dictionary: 30
Minimum value in the dictionary: 5"
dHF6A9Du,СПРИНТ № 7 | Односвязный список | Урок 4: Покоряем итераторы,chevengur,C++,Sunday 5th of May 2024 07:46:14 AM CDT,"#include <cassert>
#include <cstddef>
#include <string>
#include <utility>

template <typename Type>
class SingleLinkedList {
	// Узел списка
	struct Node {
		Node() = default;
		Node(const Type& val, Node* next)
			: value(val)
			, next_node(next) {
		}
		Type value;
		Node* next_node = nullptr;
	};


    template <typename ValueType>
    class BasicIterator {
        // Класс списка объявляется дружественным, чтобы из методов списка
        // был доступ к приватной области итератора
        friend class SingleLinkedList;

        // Конвертирующий конструктор итератора из указателя на узел списка
        explicit BasicIterator(Node* node): node_(node) {
        }

    public:
        // Объявленные ниже типы сообщают стандартной библиотеке о свойствах этого итератора

        // Категория итератора — forward iterator
        // (итератор, который поддерживает операции инкремента и многократное разыменование)
        using iterator_category = std::forward_iterator_tag;
        // Тип элементов, по которым перемещается итератор
        using value_type = Type;
        // Тип, используемый для хранения смещения между итераторами
        using difference_type = std::ptrdiff_t;
        // Тип указателя на итерируемое значение
        using pointer = ValueType*;
        // Тип ссылки на итерируемое значение
        using reference = ValueType&;

        BasicIterator() = default;

        BasicIterator(const BasicIterator<Type>& other) noexcept {
            node_ = other.node_;
        }

        BasicIterator& operator=(const BasicIterator& rhs) = default;

        [[nodiscard]] bool operator==(const BasicIterator<const Type>& rhs) const noexcept {
            return ((rhs.node_ == nullptr && node_ == nullptr) || node_ == rhs.node_) ? true : false;
        }

        [[nodiscard]] bool operator!=(const BasicIterator<const Type>& rhs) const noexcept {
            return ((rhs.node_ == nullptr && node_ == nullptr) || node_ == rhs.node_) ? false : true;

        }

        [[nodiscard]] bool operator==(const BasicIterator<Type>& rhs) const noexcept {
            return ((rhs.node_ == nullptr && node_ == nullptr) || node_ == rhs.node_) ? true : false;
        }

        [[nodiscard]] bool operator!=(const BasicIterator<Type>& rhs) const noexcept {
            return ((rhs.node_ == nullptr && node_ == nullptr) || node_ == rhs.node_) ? false : true;
        }

        BasicIterator& operator++() noexcept {
            node_ = node_->next_node;
            return *this;
        }

        BasicIterator operator++(int) noexcept {
            auto old_value(*this);
            ++(*this);
            return old_value;
        }

        [[nodiscard]] reference operator*() const noexcept {
            return node_->value;
        }

        [[nodiscard]] pointer operator->() const noexcept {
            return &node_->value;
        }

    private:
        Node* node_ = nullptr;
    };

public:

    using value_type = Type;
    using reference = value_type&;
    using const_reference = const value_type&;

	SingleLinkedList() : head_(), size_(0) {};

	~SingleLinkedList() { Clear(); };

	void PushFront(const Type& value) {
		head_.next_node = new Node(value, head_.next_node);
		++size_;
	}

	void Clear() noexcept {
		while (head_.next_node)
		{
			Node* new_node = head_.next_node->next_node;
			delete head_.next_node;
			head_.next_node = new_node;
		}
		size_ = 0;
	}

	[[nodiscard]] size_t GetSize() const noexcept {
		return size_;
	}

	[[nodiscard]] bool IsEmpty() const noexcept {
		return (size_ == 0) ? true : false;
	}

    // Итератор, допускающий изменение элементов списка
    using Iterator = BasicIterator<Type>;
    // Константный итератор, предоставляющий доступ для чтения к элементам списка
    using ConstIterator = BasicIterator<const Type>;

    [[nodiscard]] Iterator begin() noexcept {
        return Iterator{ head_.next_node };
    }

    [[nodiscard]] Iterator end() noexcept {
        return Iterator{ nullptr };
    }

    [[nodiscard]] ConstIterator begin() const noexcept {
        return ConstIterator{ head_.next_node };
    }

    [[nodiscard]] ConstIterator end() const noexcept {
        return ConstIterator{ nullptr };
    }

    [[nodiscard]] ConstIterator cbegin() const noexcept {
        return ConstIterator{ head_.next_node };
    }

    [[nodiscard]] ConstIterator cend() const noexcept {
        return ConstIterator{ nullptr };
    }

private:
	Node head_;
	size_t size_;
};

// Эта функция тестирует работу SingleLinkedList
void Test2() {
    // Итерирование по пустому списку
    {
        SingleLinkedList<int> list;
        // Константная ссылка для доступа к константным версиям begin()/end()
        const auto& const_list = list;

        // Итераторы begin и end у пустого диапазона равны друг другу
        assert(list.begin() == list.end());
        assert(const_list.begin() == const_list.end());
        assert(list.cbegin() == list.cend());
        assert(list.cbegin() == const_list.begin());
        assert(list.cend() == const_list.end());
    }

    // Итерирование по непустому списку
    {
        SingleLinkedList<int> list;
        const auto& const_list = list;

        list.PushFront(1);
        assert(list.GetSize() == 1u);
        assert(!list.IsEmpty());

        assert(const_list.begin() != const_list.end());
        assert(const_list.cbegin() != const_list.cend());
        assert(list.begin() != list.end());

        assert(const_list.begin() == const_list.cbegin());

        assert(*list.cbegin() == 1);
        *list.begin() = -1;
        assert(*list.cbegin() == -1);

        const auto old_begin = list.cbegin();
        list.PushFront(2);
        assert(list.GetSize() == 2);

        const auto new_begin = list.cbegin();
        assert(new_begin != old_begin);
        // Проверка прединкремента
        {
            auto new_begin_copy(new_begin);
            assert((++(new_begin_copy)) == old_begin);
        }
        // Проверка постинкремента
        {
            auto new_begin_copy(new_begin);
            assert(((new_begin_copy)++) == new_begin);
            assert(new_begin_copy == old_begin);
        }
        // Итератор, указывающий на позицию после последнего элемента, равен итератору end()
        {
            auto old_begin_copy(old_begin);
            assert((++old_begin_copy) == list.end());
        }
    }
    // Преобразование итераторов
    {
        SingleLinkedList<int> list;
        list.PushFront(1);
        // Конструирование ConstIterator из Iterator
        SingleLinkedList<int>::ConstIterator const_it(list.begin());
        assert(const_it == list.cbegin());
        assert(*const_it == *list.cbegin());

        SingleLinkedList<int>::ConstIterator const_it1;
        // Присваивание ConstIterator'у значения Iterator
        const_it1 = list.begin();
        assert(const_it1 == const_it);
    }
    // Проверка оператора ->
    {
        using namespace std;
        SingleLinkedList<std::string> string_list;

        string_list.PushFront(""one""s);
        assert(string_list.cbegin()->length() == 3u);
        string_list.begin()->push_back('!');
        assert(*string_list.begin() == ""one!""s);
    }
}

int main() {
    Test2();
}"
HuX5Q2u8,bookstore,excellent940707,C++,Sunday 5th of May 2024 07:41:41 AM CDT,"#include <iostream>
#include <string>
using namespace std;
// Assuming MAX_BOOKS is a constant defining the maximum number of books
const int MAX_BOOKS = 5;
// You need to define the Book class with its members, constructor, copy constructor, and methods
class Book{
private:
    string title;
    string author;
    double price;
public:
    static int totalSales;

    Book(const string &t="""", const string &a="""", const double &p=0):
    title(t), author(a), price(p){}

    Book(const Book &x):
    title(x.title), author(x.author), price(x.price){}

    Book& display(){
        cout<<""title: ""<<title<<'\n';
        cout<<""author: ""<<author<<'\n';
        cout<<""price: ""<<price<<'\n';
        return *this;
    }

    Book& sell(){
        cout<<""Sell: ""<<title<<'\n';
        totalSales+=1;
        return *this;
    }

    const string gettitle()const{
        return title;
    }
};

// You need to define the Bookstore class with its members, constructor, and methods
class Bookstore{
private:
    Book books[MAX_BOOKS];
    int num;
public:
    Bookstore():num(0){}

    Bookstore& addBook(Book book){
        for(int i=0;i<MAX_BOOKS;++i){
            if(books[i].gettitle()==""""){
                books[i]=book;
                num++;
                return *this;
            }
        }
        cout<<""num of books is out of range\n"";
        return *this;
    }

    Bookstore& displayBooks(){
        cout<<""Book list:\n"";
        for(int i=0;i<num;++i){
            books[i].display();
            cout<<'\n';
        }
        return *this;
    }

    Bookstore& sellBook(int index){
        if(books[index].gettitle()==""""){
            cout<<""index is not exist\n"";
            return *this;
        }
        books[index].sell();
        books[index]=Book();
        num--;
        return *this;
    }
};

int Book::totalSales=0;

int main() {
 Bookstore store;
 // Adding books with chained calls
 store.addBook(Book(""1984"", ""George Orwell"", 9.99))
 .addBook(Book(""Animal Farm"", ""George Orwell"", 7.99))
 .addBook(Book(""The Great Gatsby"", ""F. Scott Fitzgerald"", 14.99))
 .addBook(Book(""A Brief History of Time"", ""Stephen Hawking"", 15.99))
 .addBook(Book(""Sapiens"", ""Yuval Noah Harari"", 18.99));
 // Display all books and sell some books with chained calls
 store.displayBooks()
 .sellBook(1) // Sell ""Animal Farm""
 .sellBook(3); // Sell ""A Brief History of Time""
 // Display total sales
 cout << ""Total Books Sold: "" << Book::totalSales <<endl;
 return 0;
}
"
8gF75FbP,task 9,isbasov,Go,Sunday 5th of May 2024 07:38:45 AM CDT,"package main

import (
	""bufio""
	""fmt""
	""math""
	""os""
	""strconv""
	//""github.com/pkg/profile""
)

type optic struct {
	From, To int
}

func main() {

	//defer profile.Start(profile.CPUProfile).Stop()
	in := bufio.NewReader(os.Stdin)
	out := bufio.NewWriter(os.Stdout)
	defer out.Flush()

	var t int
	fmt.Fscan(in, &t)

	for k := 0; k < t; k++ {

		var n, start int
		startVal := math.MaxInt
		fmt.Fscan(in, &n)
		points := make([]int, n)
		for i := 0; i < n; i++ {
			fmt.Fscan(in, &points[i])
			if points[i] < startVal {
				start = i
				startVal = points[i]
			}
		}

		var m int
		fmt.Fscan(in, &m)
		optics := make(map[optic]int)
		for i := 0; i < m; i++ {
			var from, to, val int
			fmt.Fscan(in, &from, &to, &val)
			optics[optic{from - 1, to - 1}] = val
			optics[optic{to - 1, from - 1}] = val
		}

		visits := make(map[int]bool)

		l := start
		cost := startVal
		for {
			visits[l] = true

			if len(visits) == n {
				break
			}

			min := math.MaxInt

			for i := range visits {
				for j := 0; j < n; j++ {

					if !visits[j] {
						val := points[j]
						if v, ok := optics[optic{i, j}]; ok {
							if v < val {
								val = v
							}
						}

						if val < min {
							min, l = val, j
						}
					}
				}
			}

			cost += min
		}

		out.WriteString(strconv.Itoa(cost))
		out.WriteString(""\n"")

	}
}
"
W0TTxLhv,Untitled,_KAGATUN_,C#,Sunday 5th of May 2024 07:34:42 AM CDT,"using System;
using System.Collections.Generic;
using System.Linq;

namespace AnarchyInHospital
{
    public static class Program
    {
        static void Main(string[] args)
        {
            const string CommandFullNameSorting = ""1"";
            const string CommandAgeSorting = ""2"";
            const string CommandDiseaseSorting = ""3"";
            const string CommandExit = ""4"";

            List<Patient> patients = new List<Patient>
            {
                new Patient (""Иванов Иван Иванович"", 50, ""Туберкулез""),
                new Patient (""Петров Николай Владимирович"", 35, ""Бранхит""),
                new Patient (""Сергеев Илья Петрович"", 45, ""Пневмония""),
                new Patient (""Соколовский Иван Константинович"", 29, ""Covid-19""),
                new Patient (""Абрамов Александр Валентинович"",44, ""Грип""),
                new Patient (""Воробьев Александр Сергеевич"", 30, ""Туберкулез""),
                new Patient (""Корешков Валерий Степанович"", 32, ""Covid-19""),
                new Patient (""Чечеков Артем Александрович"", 57, ""Грип""),
                new Patient (""Крикунов Михаил Евгеньевич"", 53, ""Бранхит""),
                new Patient (""Зайцев Юрий Антонович"", 34, ""Эбола""),
                new Patient (""Ворчунов Анатолий Юрьевич"", 25, ""Бранхит""),
                new Patient (""Юров Антон Николаевич"", 36, ""Грип""),
                new Patient (""Козлов Михаил Александрович"", 70, ""Covid-19""),
            };

            SearchEngine searchEngine = new SearchEngine(patients);

            bool isWork = true;

            while (isWork)
            {
                Console.WriteLine(""\nПанель поиска:\n"");
                Console.WriteLine($""{CommandFullNameSorting} - сортировать пациентов по имени"");
                Console.WriteLine($""{CommandAgeSorting} - сортировать пациентов по возрасту"");
                Console.WriteLine($""{CommandDiseaseSorting} - сортировать пациентов по заболеванию"");
                Console.WriteLine($""{CommandExit} - выход из программы"");

                string userInpun = Console.ReadLine();

                switch (userInpun)
                {
                    case CommandFullNameSorting:
                        searchEngine.ShowByFullName();
                        break;

                    case CommandAgeSorting:
                        searchEngine.ShowByAge();
                        break;

                    case CommandDiseaseSorting:
                        searchEngine.ShowByDisease();
                        break;

                    case CommandExit:
                        isWork = false;
                        break;

                    default:
                        Console.WriteLine(""\nНеверный ввод команды\n"");
                        break;
                }

                Console.ReadKey();
                Console.Clear();
            }
        }
    }

    class Patient
    {
        public Patient(string fullName, int age, string disease)
        {
            FullName = fullName;
            Disease = disease;
            Age = age;
        }

        public string FullName { get; private set; }
        public int Age { get; private set; }
        public string Disease { get; private set; }

        public void ShowInfo()
        {
            Console.WriteLine($""ФИО: {FullName}, Возраст: {Age}, Заболевание: {Disease}"");
        }
    }

    class SearchEngine
    {
        private List<Patient> _patients;

        public SearchEngine(List<Patient> patients)
        {
            _patients = patients;
        }

        public void ShowByFullName()
        {
            var sortedPatients = _patients.OrderBy(patient => patient.FullName);
            ShowPatients(sortedPatients);
        }

        public void ShowByAge()
        {
            var sortedPatients = _patients.OrderBy(patient => patient.Age);
            ShowPatients(sortedPatients);
        }

        public void ShowByDisease()
        {
            Console.WriteLine(""\nВведите искомую болезнь:\n"");
            string userInput = Console.ReadLine();

            var sortedPatients = _patients.Where(patient => patient.Disease.ToLower() == userInput.ToLower());

            if (sortedPatients.Any())
            {
                ShowPatients(sortedPatients);
            }
            else
            {
                Console.WriteLine(""\nПациент с такой болезнью не найден\n"");
            }
        }

        private void ShowPatients(IEnumerable<Patient> sortedPatients)
        {
            foreach (var patient in sortedPatients)
            {
                patient.ShowInfo();
            }
        }
    }
}

"
8TpcU0uL,DFPlayer,Magella,C,Sunday 5th of May 2024 07:17:58 AM CDT,"/***************************************************
DFPlayer - A Mini MP3 Player For Arduino
 <https://www.dfrobot.com/product-1121.html>
 
 ***************************************************
 This example shows the basic function of library for DFPlayer.
 
 Created 2016-12-07
 By [Angelo qiao](Angelo.qiao@dfrobot.com)
 
 GNU Lesser General Public License.
 See <http://www.gnu.org/licenses/> for details.
 All above must be included in any redistribution
 ****************************************************/

/***********Notice and Trouble shooting***************
 1.Connection and Diagram can be found here
 <https://www.dfrobot.com/wiki/index.php/DFPlayer_Mini_SKU:DFR0299#Connection_Diagram>
 2.This code is tested on Arduino Uno, Leonardo, Mega boards.
 ****************************************************/

#include ""Arduino.h""
#include ""DFRobotDFPlayerMini.h""

#if (defined(ARDUINO_AVR_UNO) || defined(ESP8266))   // Using a soft serial port
#include <SoftwareSerial.h>
SoftwareSerial softSerial(/*rx =*/4, /*tx =*/5);
#define FPSerial softSerial
#else
#define FPSerial Serial1
#endif

DFRobotDFPlayerMini myDFPlayer;
void printDetail(uint8_t type, int value);

void setup()
{
#if (defined ESP32)
  FPSerial.begin(9600, SERIAL_8N1, /*rx =*/D3, /*tx =*/D2);
#else
  FPSerial.begin(9600);
#endif

  Serial.begin(115200);

  Serial.println();
  Serial.println(F(""DFRobot DFPlayer Mini Demo""));
  Serial.println(F(""Initializing DFPlayer ... (May take 3~5 seconds)""));
  
  if (!myDFPlayer.begin(FPSerial, /*isACK = */true, /*doReset = */true)) {  //Use serial to communicate with mp3.
    Serial.println(F(""Unable to begin:""));
    Serial.println(F(""1.Please recheck the connection!""));
    Serial.println(F(""2.Please insert the SD card!""));
    while(true){
      delay(0); // Code to compatible with ESP8266 watch dog.
    }
  }
  Serial.println(F(""DFPlayer Mini online.""));
  
  myDFPlayer.volume(10);  //Set volume value. From 0 to 30
  myDFPlayer.play(1);  //Play the first mp3
}

void loop()
{
  static unsigned long timer = millis();
  
  if (millis() - timer > 3000) {
    timer = millis();
    myDFPlayer.next();  //Play next mp3 every 3 second.
  }
  
  if (myDFPlayer.available()) {
    printDetail(myDFPlayer.readType(), myDFPlayer.read()); //Print the detail message from DFPlayer to handle different errors and states.
  }
}

void printDetail(uint8_t type, int value){
  switch (type) {
    case TimeOut:
      Serial.println(F(""Time Out!""));
      break;
    case WrongStack:
      Serial.println(F(""Stack Wrong!""));
      break;
    case DFPlayerCardInserted:
      Serial.println(F(""Card Inserted!""));
      break;
    case DFPlayerCardRemoved:
      Serial.println(F(""Card Removed!""));
      break;
    case DFPlayerCardOnline:
      Serial.println(F(""Card Online!""));
      break;
    case DFPlayerUSBInserted:
      Serial.println(""USB Inserted!"");
      break;
    case DFPlayerUSBRemoved:
      Serial.println(""USB Removed!"");
      break;
    case DFPlayerPlayFinished:
      Serial.print(F(""Number:""));
      Serial.print(value);
      Serial.println(F("" Play Finished!""));
      break;
    case DFPlayerError:
      Serial.print(F(""DFPlayerError:""));
      switch (value) {
        case Busy:
          Serial.println(F(""Card not found""));
          break;
        case Sleeping:
          Serial.println(F(""Sleeping""));
          break;
        case SerialWrongStack:
          Serial.println(F(""Get Wrong Stack""));
          break;
        case CheckSumNotMatch:
          Serial.println(F(""Check Sum Not Match""));
          break;
        case FileIndexOut:
          Serial.println(F(""File Index Out of Bound""));
          break;
        case FileMismatch:
          Serial.println(F(""Cannot Find File""));
          break;
        case Advertise:
          Serial.println(F(""In Advertise""));
          break;
        default:
          break;
      }
      break;
    default:
      break;
  }
  
}
"
E0kiXbjA,wayfire.ini (old),bluebyt,INI file,Sunday 5th of May 2024 07:04:39 AM CDT,"[alpha]
min_value = 0.100000
modifier = <alt> <super> 

[animate]
close_animation = fire
duration = 100
enabled_for = (type equals ""toplevel"" | (type equals ""x-or"" & focusable equals true))
fade_duration = 400
fade_enabled_for = type equals ""overlay""
fire_color = \#B22303FF
fire_duration = 300
fire_enabled_for = none
fire_particle_size = 16.000000
fire_particles = 2000
open_animation = zoom
random_fire_color = false
startup_duration = 600
zoom_duration = 500
zoom_enabled_for = none

[annotate]
clear_workspace = <alt> <super> KEY_C
draw = <alt> <super> BTN_LEFT
from_center = true
line_width = 3.000000
method = draw
stroke_color = \#FF0000FF

[autorotate-iio]
lock_rotation = false
rotate_down = <ctrl> <super> KEY_DOWN
rotate_left = <ctrl> <super> KEY_LEFT
rotate_right = <ctrl> <super> KEY_RIGHT
rotate_up = <ctrl> <super> KEY_UP

[autostart]

0_0 = systemctl --user import-environment WAYLAND_DISPLAY XDG_CURRENT_DESKTOP
0_1 = dbus-update-activation-environment --systemd WAYLAND_DISPLAY DISPLAY XAUTHORITY XDG_CURRENT_DESKTOP=sway
autostart_wf_shell = false
background = wf-background
# bar = waybar -c  ~/.config/waybar/config_wayfire_now.ini -s ~/.config/waybar/style_wayfire_now.css &
bar =
dock = wf-dock
launcher02 = brave-beta
launcher03 = GST_PLUGIN_FEATURE_RANK=pulsesink:NONE totem /mnt/media/Videos/Chillout006/chillout006.m3u &
launcher04 = gthumb
# launcher05 = shotwell
launcher06 = gnome-tweaks
launcher07 = thunar
launcher08 = nautilus
launcher09 = tilix --geometry=65x17 -a app-new-window -x ""ncmpcpp""
launcher10 = xfce4-terminal
launcher11 = gnome-terminal
launcher12 = gnome-system-monitor
launcher13 = ~/.config/scripts/./eww-start3.sh
launcher14 = ulauncher --hide-window
launcher15 = gnome-control-center
launcher16 = chromium
launcher17 = pcmanfm
launcher18 = GST_PLUGIN_FEATURE_RANK=pulsesink:NONE io.elementary.videos /mnt/media/Videos/Chillout007/AnthonyKeyrouzDontBeShy.mp4
launcher19 = cavalier
launcher20 = catfish
launcher21 = evolution
launcher22 = gnome-text-editor
launcher23 = swayosd-server
launcher24 = swayosd-libinput-backend
launcher25 = notify-send -a aurora ""hello $(whoami)""
launcher26 = blueman-manager
launcher27 = pavucontrol
# launcher28 = terminator -e bpytop
launcher28 = 
launcher29 = g4music
launcher30 = /usr/bin/xava
launcher31 = pactl load-module module-switch-on-connect
launcher32 = swww init && swww img ~/Pictures/Nord/Nord_wall2.jpeg
launcher33 = ~/.config/scripts/./ironbar

notifications = mako
polkit-gnome = /usr/lib/polkit-gnome/polkit-gnome-authentication-agent-1
# portal = /usr/libexec/xdg-desktop-portal

[background-view]
file = 
inhibit_input = true

[bench]
average_frames = 25
position = top_center

[blur]
blur_by_default = type is ""toplevel""
bokeh_degrade = 1
bokeh_iterations = 15
bokeh_offset = 5.000000
box_degrade = 1
box_iterations = 2
box_offset = 1.000000
gaussian_degrade = 1
gaussian_iterations = 2
gaussian_offset = 1.000000
kawase_degrade = 8
kawase_iterations = 2
kawase_offset = 2.000000
method = gaussian
saturation = 1.000000
toggle = none

[command]
binding_launcher = <ctrl> KEY_SPACE
binding_rofi = <ctrl> KEY_G
binding_wofi = <ctrl> KEY_B
binding_logout = <super> KEY_ESC
binding_mute = KEY_MUTE
binding_screenshot = KEY_SYSRQ
binding_slurp = <ctrl> KEY_SYSRQ
binding_terminal = <super> KEY_ENTER
binding_voldown = KEY_VOLUMEDOWN
binding_volup = KEY_VOLUMEUP
command_launcher = ulauncher-toggle &
command_rofi = rofi -show drun &
command_wofi = wofi &
command_logout = wlogout
# command_mute = pactl set-sink-mute @DEFAULT_SINK@ toggle
# command_screenshot = grim $HOME/Downloads/screenshot-$(date ""+%Y-%m-%d-%H:%M:%S"").png
# command_slurp = slurp | grim -g - ~/Downloads/slurped.png
command_screenshot = ~/.bin/grimshot.sh --notify save screen
command_slurp = ~/.bin/grimshot.sh --notify save window

command_terminal = blackbox
command_mute = swayosd-client --output-volume mute-toggle
command_voldown = wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%- | swayosd-client --output-volume lower
command_volup = wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%+ | swayosd-client --output-volume raise

[core]
background_color = \#1A1A1AFF
close_top_view = <super> KEY_Q
focus_button_with_modifiers = false
focus_buttons = BTN_LEFT | BTN_MIDDLE | BTN_RIGHT
focus_buttons_passthrough = true
max_render_time = -1
plugins = ipc ipc-rules stipc alpha animate autostart command cube expo fast-switcher fisheye grid foreign-toplevel gtk-shell idle move place resize switcher vswitch window-rules wm-actions wobbly wrot zoom scale wf-info background-view wsets
preferred_decoration_mode = client
transaction_timeout = 100
vheight = 3
vwidth = 3
xwayland = true

[crosshair]
line_color = \#FF0000FF
line_width = 2

[cube]
activate = <alt> <ctrl> BTN_LEFT
background = \#1A1A1AFF
background_mode = simple
cubemap_image =
deform = 1
initial_animation = 350
light = true
rotate_left = none
rotate_right = none
skydome_mirror = true
skydome_texture = 
speed_spin_horiz = 0.020000
speed_spin_vert = 0.020000
speed_zoom = 0.070000
zoom = 0.100000

[decoration]
active_color = \#222222AA
border_size = 0
button_order = minimize maximize close
font = sans-serif
ignore_views = none
inactive_color = \#333333DD
title_height = 0

[expo]
background = \#1A1A1AFF
duration = 300
inactive_brightness = 0.700000
keyboard_interaction = true
offset = 10
select_workspace_1 = <ctrl> KEY_1
select_workspace_2 = KEY_2
select_workspace_3 = KEY_3
select_workspace_4 = KEY_4
select_workspace_5 = KEY_5
select_workspace_6 = KEY_6
select_workspace_7 = KEY_7
select_workspace_8 = KEY_8
select_workspace_9 = KEY_9
toggle = <super>  | hotspot left-top 10x10 200
transition_length = 200

[extra-gestures]
close_fingers = 20
move_delay = 500
move_fingers = 3

[fast-switcher]
activate = <alt> KEY_ESC
activate_backward = <alt> <shift> KEY_ESC
inactive_alpha = 0.700000

[fisheye]
radius = 450.000000
toggle = <ctrl> <super> KEY_F
zoom = 7.000000

[focus-steal-prevent]
cancel_keys = KEY_ENTER
deny_focus_views = none
timeout = 1000

[follow-focus]
change_output = true
change_view = true
focus_delay = 50
raise_on_top = true
threshold = 10

[force-fullscreen]
constrain_pointer = false
constraint_area = view
key_toggle_fullscreen = <alt> <super> KEY_F
preserve_aspect = true
transparent_behind_views = true
x_skew = 0.000000
y_skew = 0.000000

[foreign-toplevel]

[grid]
duration = 300
restore = <super> KEY_DOWN | <super> KEY_KP0
slot_b = <super> KEY_KP2
slot_bl = <super> KEY_KP1
slot_br = <super> KEY_KP3
slot_c = <super> KEY_UP | <super> KEY_KP5
slot_l = <super> KEY_LEFT | <super> KEY_KP4
slot_r = <super> KEY_RIGHT | <super> KEY_KP6
slot_t = <super> KEY_KP8
slot_tl = <super> KEY_KP7
slot_tr = <super> KEY_KP9
type = crossfade

[gtk-shell]

[hide-cursor]
hide_delay = 2000
toggle = <ctrl> <super> KEY_H

[hinge]
filename = /sys/bus/iio/devices/iio:device1/in_angl0_raw
flip_degree = 180
poll_freq = 200

[idle]
cube_max_zoom = 1.500000
cube_rotate_speed = 1.000000
cube_zoom_speed = 1000
disable_initially = false
disable_on_fullscreen = false
dpms_timeout = -1
screensaver_timeout = 120
toggle = none

[input]
click_method = default
cursor_size = 24
cursor_theme = Graphite-dark-cursors
disable_touchpad_while_mouse = false
disable_touchpad_while_typing = false
drag_lock = false
gesture_sensitivity = 1.000000
kb_capslock_default_state = false
kb_numlock_default_state = true
kb_repeat_delay = 400
kb_repeat_rate = 40
left_handed_mode = false
middle_emulation = false
modifier_binding_timeout = 400
mouse_accel_profile = default
mouse_cursor_speed = 0.000000
mouse_scroll_speed = 1.000000
natural_scroll = false
scroll_method = default
tablet_motion_mode = default
tap_to_click = true
touchpad_accel_profile = default
touchpad_cursor_speed = 0.000000
touchpad_scroll_speed = 1.000000
xkb_layout = us,ca
xkb_model = pc105
xkb_options = grp:alt_shift_toggle
xkb_rules = evdev
xkb_variant = altgr-intl

[input-device]
output = 

[invert]
preserve_hue = false
toggle = <super> KEY_I

[ipc]

[ipc-rules]

[join-views]

[keycolor]
color = \#000000FF
opacity = 0.250000
threshold = 0.500000

[mag]
default_height = 500
toggle = <alt> <super> KEY_M
zoom_level = 75

[move]
activate = <super> BTN_LEFT
enable_snap = true
enable_snap_off = true
join_views = false
preview_base_border = \#404080CC
preview_base_color = \#8080FF80
preview_border_width = 3
quarter_snap_threshold = 50
snap_off_threshold = 200
snap_threshold = 10
workspace_switch_after = -1

[oswitch]
next_output = <super> KEY_O
next_output_with_win = <shift> <super> KEY_O

[output]
mode = auto
position = auto
scale = 1.000000
transform = normal

[place]
mode = center

[preserve-output]
last_output_focus_timeout = 10000

[resize]
activate = <super> BTN_RIGHT
activate_preserve_aspect = none

[scale]
allow_zoom = false
bg_color = \#1A1A1AE6
duration = 400
inactive_alpha = 0.750000
include_minimized = false
interact = false
middle_click_close = false
minimized_alpha = 0.450000
spacing = 50
text_color = \#CCCCCCFF
title_font_size = 16
title_overlay = all
title_position = center
toggle = <super> KEY_P
toggle_all = <super> KEY_W

[scale-title-filter]
bg_color = \#00000080
case_sensitive = false
font_size = 30
overlay = true
share_filter = false
text_color = \#CCCCCCCC

[showrepaint]
reduce_flicker = true
toggle = <alt> <super> KEY_S

[simple-tile]
animation_duration = 0
button_move = <super> BTN_LEFT
button_resize = <super> BTN_RIGHT
inner_gap_size = 5
keep_fullscreen_on_adjacent = true
key_focus_above = <super> KEY_K
key_focus_below = <super> KEY_J
key_focus_left = <super> KEY_H
key_focus_right = <super> KEY_L
key_toggle = <super> KEY_T
outer_horiz_gap_size = 0
outer_vert_gap_size = 0
preview_base_border = \#404080CC
preview_base_color = \#8080FF80
preview_border_width = 3
tile_by_default = all

[switcher]
next_view = <alt> KEY_TAB
prev_view = <alt> <shift> KEY_TAB
speed = 500
view_thumbnail_rotation = 30
view_thumbnail_scale = 1.000000

[view-shot]
capture = <alt> <super> BTN_MIDDLE
command = notify-send ""The view under cursor was captured to %f""
filename = /tmp/snapshot-%F-%T.png

[vswipe]
background = \#1A1A1AFF
delta_threshold = 24.000000
duration = 180
enable_free_movement = false
enable_horizontal = true
enable_smooth_transition = false
enable_vertical = true
fingers = 4
gap = 32.000000
speed_cap = 0.050000
speed_factor = 256.000000
threshold = 0.350000

[vswitch]
background = \#1A1A1AFF
binding_down = <ctrl> KEY_DOWN
binding_last = 
binding_left = <ctrl> KEY_LEFT
binding_right = <ctrl> KEY_RIGHT
binding_up = <ctrl> KEY_UP
duration = 300
gap = 20
send_win_down = 
send_win_last = 
send_win_left = 
send_win_right = 
send_win_up = 
with_win_down = <ctrl> <super> KEY_DOWN
with_win_last = 
with_win_left = <ctrl> <super> KEY_LEFT
with_win_right = <ctrl> <super> KEY_RIGHT
with_win_up = <ctrl> <super> KEY_UP
wraparound = true

[water]
activate = <ctrl> <super> BTN_LEFT

[wayfire-shell]

[wf-info]

[window-rules]

rule_001 = on created if app_id is ""org.gnome.Nautilus"" then move 270 100
# rule_002 = on created if app_id is ""org.gnome.Nautilus"" then set alpha 0.7
rule_003 = on created if app_id is ""org.gnome.Nautilus"" then assign_workspace 0 0

rule_004 = on created if app_id is ""gnome-terminal-server"" then move 270 750
rule_005 = on created if app_id is ""gnome-terminal-server"" then set alpha 0.7
rule_006 = on created if app_id is ""gnome-terminal-server"" then assign_workspace 0 0

rule_007 = on created if app_id is ""tilix"" then move 1350 100
rule_008 = on created if app_id is ""tilix"" then set alpha 0.7
rule_009 = on created if app_id is ""tilix"" then assign_workspace 0 0

rule_010 = on created if app_id is ""totem"" then move 1300 750
# rule_011 = on created if app_id is ""totem"" then set alpha 0.7
rule_012 = on created if app_id is ""totem"" then assign_workspace 0 0

rule_013 = on created if app_id is ""firefox"" then move 270 70
rule_014 = on created if app_id is ""firefox"" then set alpha 1.0
rule_015 = on created if app_id is ""firefox"" then assign_workspace 1 0

rule_016 = on created if app_id is ""chromium"" then move 280 70
rule_017 = on created if app_id is ""chromium"" then set alpha 1.0
rule_018 = on created if app_id is ""chromium"" then assign_workspace 1 0

rule_019 = on created if app_id is ""org.gnome.tweaks"" then move 270 100
# rule_020 = on created if app_id is ""org.gnome.tweaks"" then set alpha 0.7
rule_021 = on created if app_id is ""org.gnome.tweaks"" then assign_workspace 0 1

rule_022 = on created if app_id is ""thunar"" then move 270 100
# rule_023 = on created if app_id is ""thunar"" then set alpha 1.0
rule_024 = on created if app_id is ""thunar"" then assign_workspace 2 0

rule_025 = on created if app_id is ""xfce4-terminal"" then move 270 700
rule_026 = on created if app_id is ""xfce4-terminal"" then set alpha 1.0
rule_027 = on created if app_id is ""xfce4-terminal"" then assign_workspace 2 0

# rule_028 = on created if app_id is ""gedit"" then move 1000 150
# rule_029 = on created if app_id is ""gedit"" then set alpha 0.6
# rule_030 = on created if app_id is ""gedit"" then assign_workspace 2 0

rule_031 = on created if app_id is ""shotwell"" then move 270 100
# rule_032 = on created if app_id is ""shotwell"" then set alpha 0.8
rule_033 = on created if app_id is ""shotwell"" then assign_workspace 2 1

#rule_034 = on created if app_id is ""gthumb"" then move 1400 500
rule_034 = on created if app_id is ""gthumb"" then move 270 100
# rule_035 = on created if app_id is ""gthumb"" then set alpha 0.8
rule_036 = on created if app_id is ""gthumb"" then assign_workspace 2 1

# rule_037 = on created if app_id is ""lite-xl"" then move 1160 150
# rule_038 = on created if app_id is ""lite-xl"" then set alpha 0.8
# rule_039 = on created if app_id is ""lite-xl"" then assign_workspace 2 0

rule_040 = on created if app_id is ""pcmanfm"" then move 270 100
# rule_041 = on created if app_id is ""pcmanfm"" then set alpha 0.7
rule_042 = on created if app_id is ""pcmanfm"" then assign_workspace 2 2

rule_043 = on created if app_id is ""org.gnome.SystemMonitor"" then move 1350 730
# rule_044 = on created if app_id is ""org.gnome.SystemMonitor"" then set alpha 0.7
rule_045 = on created if app_id is ""org.gnome.SystemMonitor"" then assign_workspace 0 1

rule_046 = on created if app_id is ""io.github.celluloid_player.Celluloid"" then move 1300 700
# rule_047 = on created if app_id is ""io.github.celluloid_player.Celluloid"" then set alpha 0.9
rule_048 = on created if app_id is ""io.github.celluloid_player.Celluloid"" then assign_workspace 2 2

rule_049 = on created if app_id is ""ulauncher"" then center
rule_050 = on created if app_id is ""ulauncher"" then set alpha 0.7

rule_052 = on created if app_id is ""blueman-manager"" then set geometry 1400 150 300 500
# rule_053 = on created if app_id is ""blueman-manager"" then set alpha 0.8
rule_054 = on created if app_id is ""blueman-manager"" then assign_workspace 0 1

rule_055 = on created if app_id is ""io.github.fsobolev.Cavalier"" then assign_workspace 0 2

rule_056 = on created if app_id is ""evolution"" then set alpha 0.7
rule_057 = on created if app_id is ""evolution"" then assign_workspace 1 2

rule_058 = on created if app_id is ""catfish"" then move 270 100
# rule_059 = on created if app_id is ""catfish"" then set alpha 0.7
rule_060 = on created if app_id is ""catfish"" then assign_workspace 0 2

rule_061 = on created if app_id is ""pavucontrol"" then set geometry 270 820 800 500
# rule_062 = on created if app_id is ""pavucontrol"" then set alpha 0.8
rule_063 = on created if app_id is ""pavucontrol"" then assign_workspace 0 1

rule_064 = on created if app_id is ""org.gnome.Console"" then set alpha 0.8


rule_065 = on created if app_id is ""org.gnome.TextEditor"" then move 1160 80
rule_066 = on created if app_id is ""org.gnome.TextEditor"" then set alpha 0.8
rule_067 = on created if app_id is ""org.gnome.TextEditor"" then assign_workspace 2 0

rule_068 = on created if app_id is ""gimp-2.99"" then move 270 70
rule_069 = on created if app_id is ""gimp-2.99"" then set alpha 0.9
rule_070 = on created if app_id is ""gimp-2.99"" then assign_workspace 0 2

rule_072 = on created if app_id is ""Conky"" then set sticky

rule_073 = on created if app_id is ""io.elementary.videos"" then set geometry 1350 820 750 500
# rule_074 = on created if app_id is ""io.elementary.videos"" then set alpha 0.9
rule_075 = on created if app_id is ""io.elementary.videos"" then assign_workspace 2 2

rule_076 = on created if app_id is ""net.nokyan.Resources.Devel"" then set alpha 0.8
rule_077 = on created if app_id is ""net.nokyan.Resources.Devel"" then assign_workspace 1 1

rule_078 = on created if app_id is ""com.github.neithern.g4music"" then move 1400 600
rule_079 = on created if app_id is ""com.github.neithern.g4music"" then set alpha 0.7
rule_080 = on created if app_id is ""com.github.neithern.g4music"" then assign_workspace 0 2

rule_081 = on created if app_id is ""so.libdb.gtkcord4"" then set alpha 0.8
rule_082 = on created if app_id is ""so.libdb.gtkcord4"" then assign_workspace 1 1

rule_084 = on created if app_id is ""Brave-browser-beta"" then assign_workspace 1 0

rule_085 = on created if app_id is ""com.raggesilver.BlackBox"" then set alpha 0.8
rule_086 = on created if app_id is ""com.raggesilver.BlackBox"" then resize 880 600

rule_087 = on created if app_id is ""GStreamer gst-play-1.0"" then set geometry 1350 820 750 500

rule_088 = on created if app_id is ""terminator"" then set alpha 0.7
rule_089 = on created if app_id is ""terminator"" then set geometry 480 130 1700 1100
rule_090 = on created if app_id is ""terminator"" then assign_workspace 1 1

rule_091 = on created if app_id is ""org.gnome.Ptyxis.Devel"" then set alpha 0.9

rule_092 = on created if app_id is ""brave-browser-beta"" then move 270 70
rule_093 = on created if app_id is ""brave-browser-beta"" then set alpha 1.0
rule_094 = on created if app_id is ""brave-browser-beta"" then assign_workspace 1 0

[winzoom]
dec_x_binding = <ctrl> <super> KEY_LEFT
dec_y_binding = <ctrl> <super> KEY_UP
inc_x_binding = <ctrl> <super> KEY_RIGHT
inc_y_binding = <ctrl> <super> KEY_DOWN
modifier = <ctrl> <super> 
nearest_filtering = false
preserve_aspect = true
zoom_step = 0.100000

[wm-actions]
minimize = none
send_to_back = none
toggle_always_on_top = none
toggle_fullscreen = none
toggle_maximize = none
toggle_showdesktop = none
toggle_sticky = none

[wobbly]
friction = 3.000000
grid_resolution = 6
spring_k = 8.000000

[workarounds]
all_dialogs_modal = true
app_id_mode = full
dynamic_repaint_delay = false
enable_so_unloading = false
force_preferred_decoration_mode = false
remove_output_limits = false
use_external_output_configuration = false

[workspace-names]
background_color = \#333333B3
background_radius = 30.000000
display_duration = 500
font = sans-serif
margin = 0
position = center
show_option_names = false
text_color = \#FFFFFFFF

[wrot]
activate = <ctrl> <super> BTN_RIGHT
activate-3d = <shift> <super> BTN_RIGHT
invert = false
reset = <ctrl> <super> KEY_R
reset-one = <super> KEY_R
reset_radius = 25.000000
sensitivity = 24

[wsets]
label_duration = 2000

[xdg-activation]

[zoom]
interpolation_method = 0
modifier = <super> 
smoothing_duration = 300
speed = 0.010000
"
efzccG8Q,data917,TestGuy1,JSON,Sunday 5th of May 2024 06:00:06 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: 'de3396f1df70126c6859a689a7cc8440cca18895a2a6637acc13bdf599a73c3a60c2762282b56f00ef3c907330e88edc9197baa9e399fa61f3fb096ed42dab4f49ba0efbe6b27f1f62ba6feec64da4e198e84b8771042114a9121f94eadafb78fc25b610b5d304efaccf9789a57764514918c27c6baa0a13a983a2c92d7de548',
  otherdata: [
    'f51475f0d1c208915384dc4e45d5738f',
    '5fc9f26f57b1a1288e2d42999954709c',
    '89fba9dbeabbacb3ff774e330b932f3b',
    'a08941cbad6bb9704ae2578d8a31d896',
    '83e6d53a47e488646840a115eba35698',
    '93f440dc5b1a61579c9a74d52ef28879',
    '1bdd13f2cd77ad29f9156b5c73506ca7',
    '40b3c3a11bad98b20dd252229c86cd3a'
  ]
}"
K2U8A04H,wf-info,bluebyt,INI file,Sunday 5th of May 2024 05:51:46 AM CDT,"
$ PKG_CONFIG_PATH=/opt/wayfire/lib/pkgconfig meson setup
 build --prefix=/opt/wayfire
The Meson build system
Version: 1.4.0
Source dir: /home/bluebyt/Downloads/wf-info
Build dir: /home/bluebyt/Downloads/wf-info/build
Build type: native build
Project name: wf-info
Project version: 0.7.0
C compiler for the host machine: cc (gcc 13.2.1 ""cc (GCC) 13.2.1 20240417"")
C linker for the host machine: cc ld.bfd 2.42.0
C++ compiler for the host machine: c++ (gcc 13.2.1 ""c++ (GCC) 13.2.1 20240417"")
C++ linker for the host machine: c++ ld.bfd 2.42.0
Host machine cpu family: x86_64
Host machine cpu: x86_64
Found pkg-config: YES (/usr/bin/pkg-config) 2.1.1
Run-time dependency wayfire found: YES 0.9.0
Run-time dependency wlroots found: YES 0.17.2
Run-time dependency wf-config found: YES 0.9.0
Run-time dependency wayland-protocols found: YES 1.35
Run-time dependency wayland-server found: YES 1.22.0
Run-time dependency wayland-client found: YES 1.22.0
Program wayland-scanner found: YES (/usr/bin/wayland-scanner)
Build targets in project: 4
NOTICE: Future-deprecated features used:
 * 0.56.0: {'dependency.get_pkgconfig_variable'}

wf-info 0.7.0

  User defined options
    prefix: /opt/wayfire

Found ninja-1.12.0 at /usr/bin/ninja

$ninja -C build
ninja: Entering directory `build'
[15/15] Linking target src/libwf-info.so

$sudo ninja -C build install           
[sudo] password for bluebyt:
ninja: Entering directory `build'
[0/1] Installing files.
Installing src/libwf-info.so to /opt/wayfire/lib/wayfire
Installing src/client/wf-info to /opt/wayfire/bin
Installing /home/bluebyt/Downloads/wf-info/metadata/wf-info.xml to /opt/wayfire/share/wayfire/metadata

$wf-info
Wayfire information protocol not advertised by compositor. Is wf-info plugin enabled?
"
2b469BDN,step motor_V4,bipping,C++,Sunday 5th of May 2024 05:51:36 AM CDT,"#include <avr/interrupt.h>
#include <Arduino.h>
//#include <Wire.h>
#include <rgb_lcd.h>
#include <EEPROM.h>
#include <string.h>
#include <avr/sleep.h>

//#define SDA A4
//#define SLC A5
#define NOTE_CS6 1109 
#define NOTE_DS6 1245

// Variables globales
const uint8_t VAL_RGB_R = 255;                            // Valeur R pour LED RGB
const uint8_t VAL_RGB_G = 0;                              // Valeur G pour LED RGB
const uint8_t VAL_RGB_B = 0;                              // Valeur B pour LED RGB
const uint8_t PIN_SWITCH = 2;                             // Pin pour l'interrupteur à bascule
const uint8_t PIN_COURANT_COUPURE = 3;                    // Pin pour détecter une coupure de courant
const uint8_t PIN_LED_ROUGE = 5;                          // Pin pour LED PIN_LED_ROUGE
const uint8_t PIN_LED_VERT = 7;                           // Pin pour LED PIN_LED_VERTE
const uint8_t PIN_LED_ORANGE = 6;                         // Pin pour LED PIN_LED_ORANGE
const uint8_t PIN_MOTEUR_DIR = 8;                         // Pin pour la direction du moteur
const uint8_t PIN_MOTEUR_PUL = 9;                         // Pin pour les impulsions du moteur
const uint8_t PIN_MOTEUR_ENA = 10;                        // Pin pour activer/désactiver le moteur
const uint8_t PIN_BUZZER = 11;                            // Pin pour le Buzzer
const uint8_t PIN_POTARD = A0;                            // Pin pour le potentiometre
const int8_t MAX_TASKS = 10;
const uint32_t INTERVAL_BASE = 3130;                      // interval de temps de base de 3130 µS pour une action
const uint32_t INTERVAL_X3 = 9390;                        // 3x l'interval de base, soit 9390 µS pour une action
const uint32_t INTERVAL_X7 = 21910;                       // 7x l'interval de base, soit 21910 µS pour une action
const uint32_t INTERVAL_X78 = 244140;                     // 78x l'interval de base, soit 244140 µS pour une action
const uint32_t INTERVAL_X156 = 488280;                    // 156x l'interval de base, soit 488280 µS pour une action
const uint32_t LIMITEPASMAX = 120000;                     // Nombre maximal de pas du moteur
uint8_t taskId_updateSwitchState;                         // updateSwitchState
uint8_t taskId_checketatSwitch;                           // checketatSwitch
uint8_t taskId_updatePotardAndPWM;                        // updatePotardAndPWM
uint8_t taskId_LCD_Demarage;                              //
uint8_t taskId_LCD_Update_MAIN;                           //
uint8_t taskId_toggle_PIN_MOTOR;                          // toggle_PIN_MOTOR
uint8_t taskId_modulate_PIN_LED_verte;                    // modulate_PIN_LED vert
uint8_t taskId_modulate_PIN_LED_orange;                   // modulate_PIN_LED orange
uint8_t taskId_toggleBuzzer;                              // toggleBuzzer
uint16_t potard;                                          // Valeur du potentiometre
volatile bool blackout = false;                           // Flag pour indiquer une coupure de courant
volatile uint32_t nombreDePas = 0;                        // Compteur de pas du moteur
volatile bool estCoupureCourant;                          // Verifie si il est oportun d'effectuer une sauvegarde lors d'une coupure de courant 
bool etatSwitch = false;                                  // État virtuel de l'interupteur, défini sur enclancher (false)
int8_t taskCount = 0;                                     // Compteur pour suivre le nombre de tâches


byte L[8] = { 0b00000, 0b11000, 0b01100, 0b00100, 0b01100, 0b10010, 0b10001, 0b00000 }; // Motif personnalisé pour écran LCD

// Énumération pour les différents états
enum Etat {
  ETAT_DEMARAGE, 

  ETAT_ORIGINE_INITIALIZATION,
  ETAT_ORIGINE_MAIN,

  ETAT_AVANCE_INITIALIZATION,
  ETAT_AVANCE_MAIN,

  ETAT_TRANSITION_AVANCE_TOGGLE,

  ETAT_TOGGLE_MAIN,
  ETAT_TOGGLE_CHECKEXITCONDITION,

  ETAT_TOGGLE_RECUPERATION,

  ETAT_FAIL
};

Etat etatActuel;                                          // Variable stockant l'état actuel du système

struct Task {
    void (*func)();
    uint32_t nextExecution;
    uint32_t interval;
    bool enabled;
};

Task tasks[MAX_TASKS];                                    // Tableau pour stocker les tâches

typedef void (*CallbackFunction)();                       // Définir un type de fonction de rappel

rgb_lcd display;

// Interruption de minuterie pour gérer le signal PWM et compter les pas
ISR(TIMER1_COMPA_vect){  
  toggle(PIN_MOTEUR_PUL);                                 // Bascule l'état du pin moteur
  nombreDePas++;                                          // Incrémente le compteur de pas
}

ISR(TIMER0_COMPA_vect) {
  sleep_disable();                                        // Réveiller le MCU
  TIMSK0 &= ~(1 << OCIE0A);                               // désactive  l'interruption de comparaison du Timer0
}

// Sauvegarde les données essentielles dans EEPROM en cas de coupure de courant
void interruptionCoupure() {
  blackout = true;                                        // Indique une coupure de courant
  sleep_disable(); // Réveiller le MCU
  TIMSK0 &= ~(1 << OCIE0A);                               // désactive  l'interruption de comparaison du Timer0
}

// Récupération des données après une coupure de courant
void recuperation() {
    uint32_t step;
    EEPROM.get(0, step);                                  // Récupère le nombre de pas de EEPROM
    nombreDePas = step;
    EEPROM.update(4, false);                              // Indique que la récupération est faite    
    enableTask(taskId_LCD_Update_MAIN);
}// Fin de recuperation

//Fonction d'affichage LCD 
void LCD_Update_FAIL() {
  display.clear();
  display.setCursor(0, 0);
  display.print(""Erreur"");
  display.setCursor(0, 1);
  display.print(""Veuillez redemarrer"");
}

void LCD_Update_DEMARAGE() {
  display.clear();
  display.setCursor(0, 0);
  display.print(""Mauvaise position"");
  display.setCursor(0, 1);
  display.print(""Enclancher l'interrupteur"");
}

void LCD_Update_MAIN() {
  static uint32_t lastSteps = -1;
  static uint16_t lastPotValue = -1;
  
  if (lastSteps != nombreDePas) {
    display.setCursor(1, 1);
    display.print(nombreDePas);
    lastSteps = nombreDePas;
  }
  
  if (lastPotValue != potard) {
    display.setCursor(10, 1);
    display.print(potard);
    lastPotValue = potard;
  }
}

int scheduleTask(void (*func)(), uint32_t interval, bool enabled) {
    if (taskCount < MAX_TASKS) {
      tasks[taskCount].func = func;
      tasks[taskCount].interval = interval;
      tasks[taskCount].nextExecution = micros() + interval;
      tasks[taskCount].enabled = enabled;
      //tasks[taskCount] = {func, micros() + interval, interval, enabled};
      return taskCount++;                                 // Retourne l'index de la nouvelle tâche
    }
    return -1; // Retourne une valeur d'erreur si le tableau est plein
}

void setup() {
  Serial.begin(115200);                                   // Démarre la communication série à 115200 bps
  display.begin(16, 2);                                   // Initialise l'écran LCD avec 16 colonnes et 2 lignes
  display.setRGB(VAL_RGB_R, VAL_RGB_G, VAL_RGB_B);        // Définit la couleur de rétroéclairage de l'écran LCD
  display.print(""initialization"");                        // Affiche le message d'initialisation sur l'écran LCD

  // Configuration des pins pour les LEDs et les sorties
  pinMode(PIN_LED_ORANGE, OUTPUT);                        // Config. la LED orange en sortie
  pinMode(PIN_LED_VERT, OUTPUT);                          // Config. la LED verte en sortie
  pinMode(PIN_LED_ROUGE, OUTPUT);                         // Config. la LED rouge en sortie

  // Configuration des pins pour les entrées
  pinMode(PIN_POTARD, INPUT);                             // Définit le pin A0 comme entrée pour le potentiomètre
  pinMode(PIN_SWITCH, INPUT_PULLUP);                      // Active la résistance de pull-up sur le pin du bouton
  pinMode(PIN_MOTEUR_DIR, OUTPUT);                        // Config. la direction du moteur en sortie
  pinMode(PIN_MOTEUR_PUL, OUTPUT);                        // Config. le pin de pulsation du moteur en sortie
  pinMode(PIN_MOTEUR_ENA, OUTPUT);                        // Config. le pin d'activation du moteur en sortie
  pinMode(PIN_BUZZER, OUTPUT);                            // Config. le pin du buzzer en sortie
  pinMode(PIN_COURANT_COUPURE, INPUT_PULLUP);             // Active la résistance de pull-up pour la coupure de courant

  // Configuration initiale de l'état des sorties
  digitalWrite(PIN_BUZZER, LOW);                          // Éteint le buzzer
  digitalWrite(PIN_SWITCH, HIGH);                         // Initialise le PIN_SWITCH à l'état haut
  digitalWrite(PIN_LED_VERT, HIGH);                       // Allume la LED verte
  digitalWrite(PIN_LED_ORANGE, HIGH);                     // Allume la LED orange
  digitalWrite(PIN_LED_ROUGE, HIGH);                      // Allume la LED rouge

  // Signal sonore d'initialisation
  tone(PIN_BUZZER, NOTE_DS6, 500);                        // Joue un ton sur le buzzer
  delay(500);                                             // Attend 500 ms

  // Éteint toutes les LEDs après le signal sonore
  digitalWrite(PIN_LED_VERT, LOW);                        // Éteint la LED verte
  digitalWrite(PIN_LED_ROUGE, LOW);                       // Éteint la LED rouge
  digitalWrite(PIN_LED_ORANGE, LOW);                      // Éteint la LED orange

  timerPrecedents[TIMER_LED_Vert] = micros();             // Initialise le timer pour la LED verte
  timerPrecedents[TIMER_LED_Orange] = micros();           // Initialise le timer pour la LED Orange

  // Vérifie et récupère l'état de coupure de courant depuis l'EEPROM
  bool spin;
  EEPROM.get(4, spin);                       // Récupère l'état de coupure de courant de l'EEPROM
  estCoupureCourant = spin;

  // Configuration initiale de l'état du système
  etatActuel = (!estCoupureCourant) ? ETAT_DEMARAGE : ETAT_TOGGLE_RECUPERATION;

  // Configuration des interruptions
  attachInterrupt(digitalPinToInterrupt(PIN_COURANT_COUPURE), interruptionCoupure, FALLING); // Interruption sur coupure de courant

  // Configuration des Timer pour le mode CTC (Clear Timer on Compare Match)
  TCCR1A = 0;                                             // Réinitialise TCCR1A pour la configuration
  TCCR1B = (1 << WGM12) | (1 << CS11);                    // Configure le mode CTC et le prescaler pour Timer1

  TCCR0A = (1 << WGM21);                                  // Configure le Timer 0 pour le mode CTC
  TCCR0B = (1 << CS22) | (1 << CS21) | (1 << CS20);       // Prescaler de 1024

  //setupHardware();

  taskId_updateSwitchState = scheduleTask(updateSwitchState, INTERVAL_X7, true);
  taskId_checketatSwitch = scheduleTask(checketatSwitch, INTERVAL_X156, false);
  taskId_updatePotardAndPWM = scheduleTask(updatePotardAndPWM, INTERVAL_X78, false);
  taskId_LCD_Demarage = scheduleTask( [] () {LCD_Update_DEMARAGE(); }, INTERVAL_X78, false);
  taskId_LCD_Update_MAIN = scheduleTask( [] () {LCD_Update_MAIN(); }, INTERVAL_X78, false);
  taskId_toggle_PIN_MOTOR = scheduleTask(toggle_PIN_MOTOR, INTERVAL_BASE, false);
  taskId_modulate_PIN_LED_verte = scheduleTask( [] () {modulate_PIN_LED(PIN_LED_VERT); }, INTERVAL_X3, false);
  taskId_modulate_PIN_LED_orange = scheduleTask([]() { modulate_PIN_LED(PIN_LED_ORANGE); }, INTERVAL_X3, false);
  taskId_toggleBuzzer = scheduleTask(toggleBuzzer, INTERVAL_X78, false);

  updatePotardAndPWM();                               // Initialise le potard

  set_sleep_mode(SLEEP_MODE_PWR_SAVE);                // Définir le mode de sommeil

  updateSwitchState();                                // Initialization de l'état de l'interupteur

  if (!estCoupureCourant){
    enableTask(taskId_LCD_Demarage);
    enableTask(taskId_modulate_PIN_LED_orange);  
    enableTask(taskId_toggleBuzzer);
  }else{
    enableTask(taskId_LCD_Update_MAIN);
  }

  delay(800);                                             // Court délai avant d'activer les interruptions
  sei();                                                  // Active les interruptions globales
}

void loop() {

  //enableTask(updateSwitchState); 

  switch (etatActuel) {
    case ETAT_DEMARAGE:
      if(!etatSwitch) {
        etatActuel = ETAT_ORIGINE_INITIALIZATION;
      }else{
       
        //LCD_Update_DEMARGE(display);

        //modulate_PIN_LED(PIN_LED_ORANGE); 

        //toggleBuzzer
        
      }
      break;
    case ETAT_ORIGINE_INITIALIZATION:
      // Initialisations pour l'état d'origine
      origine_initialization();
      etatActuel = ETAT_ORIGINE_MAIN;                        // Définit l'état à ORIGINE
      break;
    case ETAT_ORIGINE_MAIN:
      
      //modulate_PIN_LED(PIN_LED_VERT); 

      //LCD_Update_ORIGINE(display); 
      
      //updatePotardAndPWM

      if(etatSwitch) {
        etatActuel = ETAT_AVANCE_INITIALIZATION;
      }
      break;
    case ETAT_AVANCE_INITIALIZATION:
      // Initialisations pour l'état d'avance
      avance_initialization();
      etatActuel = ETAT_AVANCE_MAIN;                         // Définit l'état à AVANCE
      break;
    case ETAT_AVANCE_MAIN:
      //Verifie si le programme doit s'arreter en urgence
      checketatFail();

      //LCD_Update_AVANCE(display);
       
      //toggle_PIN_MOTOR

      if(nombreDePas >= LIMITEPASMAX || !etatSwitch) {
        etatActuel = ETAT_TRANSITION_AVANCE_TOGGLE;
      }
      break;
    case ETAT_TRANSITION_AVANCE_TOGGLE:
      // Vérifie la condition de sortie de l'état d'avance
      transition_avance_toggle(); 

      etatActuel = ETAT_TOGGLE_MAIN;                         // Définit l'état à TOGGLE
      break;
    case ETAT_TOGGLE_MAIN:
      //Verifie si le programme doit s'arreter en urgence
      checketatFail();

      //LCD_Update_TOGGLE(display);

      //toggle_PIN_MOTOR
      
      //checketatSwitch

      if(nombreDePas == 0){
        etatActuel = ETAT_TOGGLE_CHECKEXITCONDITION;
      }
      break;
    case ETAT_TOGGLE_CHECKEXITCONDITION:
      // Vérifie la condition de sortie de l'état de toggle
      toggle_checkexitcondition();

      etatActuel = (etatSwitch) ? ETAT_AVANCE_INITIALIZATION : ETAT_ORIGINE_INITIALIZATION;
      break;
    case ETAT_TOGGLE_RECUPERATION:    
      recuperation();                                   // Appelle la fonction de récupération en cas de coupure

      etatActuel = ETAT_TRANSITION_AVANCE_TOGGLE;
      break;
    case ETAT_FAIL:
      // Exécute la séquence d'arrêt d'urgence
      checketatFail();

      break;
    default: // ETAT_FAIL:
      // Exécute la séquence d'arrêt d'urgence
      etatActuel = ETAT_FAIL;
      break;
  }

  manageTasks();
  
}//Fin de la boucle loop

void origine_initialization(){
  disableTask(taskId_LCD_Demarage);
  display.clear();
  display.setCursor(0, 0);
  display.print(""Origine"");
  display.setCursor(0, 1);
  display.print(""Pas: "");
  disableTask(taskId_modulate_PIN_LED_orange);
  disableTask(taskId_toggleBuzzer);
  digitalWrite(PIN_LED_ORANGE, LOW);                  // Éteint la LED orange
  digitalWrite(PIN_LED_VERT, LOW);                    // Éteint la LED verte
  digitalWrite(PIN_LED_ROUGE, HIGH);                  // Allume la LED rouge
  digitalWrite(PIN_MOTEUR_ENA, HIGH);                 // Désactive le frein du moteur
  tone(PIN_BUZZER, NOTE_CS6, 80);                     // Joue la note CS6
  delay(100);                                         // Pause de 100ms
  tone(PIN_BUZZER, NOTE_DS6, 80);                     // Joue la note DS6
  delay(100);                                         // Pause de 100ms
  tone(PIN_BUZZER, NOTE_DS6, 160);                    // Joue la note DS6 plus longue
  delay(250);                                         // Pause de 250ms
  digitalWrite(PIN_LED_ROUGE, LOW);                   // Éteint la LED rouge
  enableTask(taskId_modulate_PIN_LED_verte);
  enableTask(taskId_updatePotardAndPWM);
}

void avance_initialization(){
  display.clear();
  display.setCursor(0, 0);
  display.print(""Avance"");
  display.setCursor(0, 1);
  display.print(""Lambda: "");
  disableTask(taskId_modulate_PIN_LED_verte);
  disableTask(taskId_updatePotardAndPWM);
  estCoupureCourant = true;                               // Réinitialise l'indicateur de coupure de courant
  digitalWrite(PIN_MOTEUR_DIR, LOW);                      // Définit le sens de rotation du moteur
  digitalWrite(PIN_MOTEUR_ENA, LOW);                      // Active le moteur
  noInterrupts();                                         // Désactiver les interruptions pendant la configuration
  TIMSK1 |= (1 << OCIE1A);                                // Active l'interruption de comparaison du Timer1, Active le signal PWM
  interrupts();                                           // Réactiver les interruptions
  digitalWrite(PIN_LED_VERT, HIGH);                       // Allume la LED verte
  digitalWrite(PIN_LED_ORANGE, LOW);                      // Éteint la LED orange
  digitalWrite(PIN_LED_ROUGE, LOW);                       // Éteint la LED rouge
}

void transition_avance_toggle(){
  display.clear();
  display.setCursor(0, 0);
  display.print(""Toggle"");
  display.setCursor(0, 1);
  display.print(""Lambda: "");
  digitalWrite(PIN_LED_VERT, LOW);                        // Éteint la LED verte
  noInterrupts();                                         // Désactiver les interruptions pendant la configuration
  OCR1A = INTERVAL_BASE;
  interrupts();                                           // Réactiver les interruptions
  digitalWrite(PIN_MOTEUR_DIR, HIGH);                     // Change le sens de rotation du moteur
  digitalWrite(PIN_MOTEUR_ENA, LOW);                      // Active le moteur
  //enableTask(taskId_toggle_PIN_MOTOR);
  enableTask(taskId_checketatSwitch);
}

void toggle_checkexitcondition(){
  disableTask(taskId_checketatSwitch);
  noInterrupts();                                         // Désactiver les interruptions pendant la configuration
  TIMSK1 &= ~(1 << OCIE1A);                               // Désactive l'interruption de comparaison du Timer1, Désactive le signal PWM 
  interrupts();                                           // Réactiver les interruptions
  estCoupureCourant = false;                              // Réinitialise l'indicateur de coupure de courant
  digitalWrite(PIN_LED_ORANGE, LOW);                      // Éteint la LED orange
  digitalWrite(PIN_LED_VERT, LOW);                        // Éteint la LED verte
}

//sauvgarde les données importante si coupure detecter, arrete le programme 
void checketatFail() {
  if(blackout || etatActuel == ETAT_FAIL){
    noInterrupts();                                       // Désactive les interruptions
    bool spin =  estCoupureCourant;
    uint32_t step = nombreDePas;
    EEPROM.update(0, step);                               // Sauvegarde le nombre de pas
    EEPROM.update(4, spin);                               // Réinitialise le flag de coupure de courant
    digitalWrite(PIN_MOTEUR_PUL, LOW);                    // Désactive les impulsions
    digitalWrite(PIN_MOTEUR_ENA, HIGH);                   // Désactive le frein du moteur
    digitalWrite(PIN_LED_ROUGE, HIGH);                    // Allume la LED d'urgence
    LCD_Update_FAIL();
    tone(PIN_BUZZER, NOTE_CS6, 1000);                     // Joue la note CS6

    while(true) {
      delay(4294967295);                                  // Bloque le système indéfiniment
    }                                                     // Boucle d'arrêt d'urgence
  }
}

void manageTasks() {
  uint32_t currentTime = micros();
  uint32_t nextTaskTime = INTERVAL_X156; //Temps de la tache la plus longue, par securité ce sera la durée maximal

  // Parcourir les tâches pour trouver la plus proche et exécuter si nécessaire
  for (int i = 0; i < taskCount; i++) {
    if (tasks[i].enabled) {
      if (currentTime >= tasks[i].nextExecution) {
        tasks[i].func();  // Exécuter la fonction
        tasks[i].nextExecution = currentTime + tasks[i].interval;  // Planifier la prochaine exécution
      }
      if (tasks[i].nextExecution < nextTaskTime) {
        nextTaskTime = tasks[i].nextExecution;
      }
    }
  }

  // Calculer le temps d'attente
  uint32_t timeToWait = nextTaskTime - currentTime;
  if (timeToWait > 800) {
    // Calculer le nombre de ticks nécessaires pour le Timer 2
    uint16_t timerTicks = min(255, timeToWait / 4);  // 4 est le nombre d'µs par tick avec un prescaler de 1024 à 16 MHz

    noInterrupts(); // Désactiver les interruptions pendant la configuration
    OCR0A = timerTicks;  // Définir la valeur pour comparaison A
    TIMSK0 |= (1 << OCIE0A);  // Activer l'interruption Timer 0 Compare Match A
    interrupts(); // Réactiver les interruptions

    sleep_mode();  // Dormir jusqu'à la prochaine interruption du timer
  } else if (timeToWait > 300) {
    delayMicroseconds(timeToWait); // Un tres court délai
  }else{
    
  }
}

void enableTask(int8_t taskIndex) {
    if (taskIndex >= 0 && taskIndex < taskCount) {
        tasks[taskIndex].enabled = true;
        tasks[taskIndex].nextExecution = micros() + tasks[taskIndex].interval;  // Réinitialise le timing
    }
}

void disableTask(int8_t taskIndex) {
    if (taskIndex >= 0 && taskIndex < taskCount) {
        tasks[taskIndex].enabled = false;
    }
}

/*/ Exécute une fonction à intervalle régulier basé sur un timer
void checkTimerAndUpdate(uint16_t &previousTime, uint32_t intervalAction, CallbackFunction func) {
  if (micros() - previousTime >= intervalAction ) { 
    previousTime = micros();                              // Réinitialise le temps précédent
    func();                                               // Appelle la fonction passée en paramètre
  }
}// Fin de checkTimerAndUpdate*/

//Fonction de mise à jour de potard et de la fréquence du PWM du moteur
void updatePotardAndPWM() {
  uint16_t newPotard = map(analogRead(PIN_POTARD), 0, 1023, 11200, 11300); // Map la lecture analogique à la plage désirée
  if (newPotard != potard) {                              // Vérifie si la valeur a changé
    potard = newPotard;                                   // Met à jour la variable globale potard
    noInterrupts();                                       // Désactive les interruptions
    OCR1A = potard;                                       // Met à jour la fréquence de la pin pul, la vitesse du moteur
    interrupts();                                         // Réactiver les interruptions
  }
}// Fin de updatePotardAndPWM

// Met à jour l'état de l'interrupteur
void updateSwitchState() { 
    if (digitalRead(PIN_SWITCH) != etatSwitch) {          // Verifie si l'interupteur à bascule à changer
      etatSwitch = !etatSwitch;                           // Bascule l'état en utilisant la valeur pointée
    }
}// Fin de updateSwitchState

// Fait varier la luminosité de la LED Rouge
void modulate_PIN_LED(uint8_t ledPin) { 
  static uint8_t i = 1;                                   // Initialise l'intensité de la LED
  static bool estIncrement = true;                        // Initialise la direction de l'incrémentation
  analogWrite(ledPin, i);                                 // Applique la luminosité à la LED
  i = estIncrement ? i + 1 : i - 1;                       // Incrémente ou décrémente la luminosité
  if(i == 255 || i == 0) {                                // Verifie si i est arrivé au extremiter
    estIncrement = !estIncrement;                         // Inverse la direction si les limites sont atteintes
  }
}// Fin de modulate_PIN_LED

// Fonction pour basculer l'état d'une broche
void toggle(int8_t pin) {
    digitalWrite(pin, !digitalRead(pin));                 // Bascule l'état de la broche
} // Fin de toggle

void toggleLEDVert() {
    toggle(PIN_LED_VERT);
}

void toggleLEDOrange() {
    toggle(PIN_LED_ORANGE);
}

// Exécute une action LED en fonction de l'état de l'interrupteur
void checketatSwitch() {
    CallbackFunction func = etatSwitch ? toggleLEDVert : toggleLEDOrange;
    if (digitalRead(etatSwitch ? PIN_LED_VERT : PIN_LED_ORANGE) == HIGH) {
        digitalWrite(etatSwitch ? PIN_LED_VERT : PIN_LED_ORANGE, LOW);
    }
    func();
}// Fin de checkTimerBasedOnState

// Actionne le moteur et décompte les pas
void toggle_PIN_MOTOR() { 
  toggle(PIN_MOTEUR_PUL);                                 // Bascule le pin du moteur
  noInterrupts();                                         // Désactive les interruptions
  nombreDePas--;                                          // Décrémente le compteur de pas
  interrupts();                                           // Réactive les interruptions
}// Fin de toggle_PIN_MOTOR

//tone utilise le Timer2
void toggleBuzzer() {
  static bool isActive = true;
  if (isActive) {
    noTone(PIN_BUZZER);                                   // Arrête le son pendant 84 millisecondes
    isActive = false;                                     //
  } else {
    tone(PIN_BUZZER, NOTE_DS6, 160);                      // Joue la note DS6 pendant 160 millisecondes
    isActive = true;
  }
}
"
