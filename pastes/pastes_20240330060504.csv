id,title,username,language,date,content
7UdcM7WD,Untitled,35657,C++,Saturday 30th of March 2024 12:42:12 AM CDT,"
#include <iostream> 


using namespace std;


void print(int* arr, int size) { 
    for (int i = 0; i < size; i++) {
        cout << *(arr + i) << "" "";
    }
    cout << endl;
}

void init(int* arr, int size) {
    for (int i = 0; i < size; i++) {
        *(arr + i) = rand() % 100;
    }
}

void change(int* arr, int size) {
    for (int i = 0; i < size - 1; i += 2) {
        int temp = *(arr + i);
        *(arr + i) = *(arr + i + 1);
        *(arr + i + 1) = temp;
    }
}


int main() {
    setlocale(LC_ALL, ""ru"");

    srand(time(NULL));

    const int size = 10;

    int arr[size];

    init(arr, size);

    print(arr, size);

    change(arr, size);

    print(arr, size);

  
}"
Vw3vMp3K,Untitled,35657,C++,Saturday 30th of March 2024 12:14:39 AM CDT,"
#include <iostream> 


using namespace std;

// равносильно print(int arr[], int size)
void print(int* arr, int size) { 
    for (int i = 0; i < size; i++) {
        cout << *(arr + i) << "" "";
    }
    cout << endl;
}


int main() {
    setlocale(LC_ALL, ""ru"");

    const int size = 5;

    int arr[size]{ 33,45,67,22,38 };

    print(arr, size);

    *(arr + 3) = 128;

    print(arr, size);
}"
1DFk566Q,Untitled,35657,C++,Saturday 30th of March 2024 12:05:46 AM CDT,"
#include <iostream> 


using namespace std;




int main() {
    setlocale(LC_ALL, ""ru"");

    const int size = 5;

    int arr[size]{ 33,45,67,22,38 };

    for (int i = 0; i < size; i++) {
        cout << *(arr + i) << "" "";
    }
    cout << endl;

    *(arr + 3) = 128;

    for (int i = 0; i < size; i++) {
        cout << *(arr + i) << "" "";
    }
    cout << endl;
}"
SqJaykPB,Untitled,35657,C++,Friday 29th of March 2024 11:50:44 PM CDT,"
#include <iostream> 

using namespace std;

int main() {
    setlocale(LC_ALL, ""ru"");

    const int size = 5;

    int arr[size]{ 33,45,67,22,38 };

    cout << arr << endl;
    cout << &arr[0] << endl;
    cout << &arr[1] << endl;
    cout << &arr[2] << endl;

    int* ptr = arr;

    cout << *ptr << endl;

    ptr++; // сдвигает указатель вправо на количество байт, занимаемое типом данных, на который он указывает (в случае int - 4 байта)
    cout << *ptr << endl;

    ptr--; // сдвигает влево на количество байт, которое занимает тип данных

    cout << *ptr << endl;

    ptr += 4; // подвинет указатель на 16 байт (4 * 4)

    cout << *ptr << endl;

    cout << *(arr + 4) << endl; // равносильно arr[4]
}"
pdSNaist,t1,dbkarashev,C++,Friday 29th of March 2024 11:35:09 PM CDT,"#include <stdio.h>
#include <mpi.h>
#include <math.h>

int main(int argc, char **argv)
{
    int rank, size;
    MPI_Init(&argc, &argv);
    MPI_Comm_size(MPI_COMM_WORLD, &size);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Status status;
    int x = rank;
    int s = x, s1;
    int q = log2(size);

    printf(""rank = %d, sum = %d\n"", rank, s);

    if (q != log2(size))
    {
        printf( ""error"");
        MPI_Finalize();
        return 0;
    }
    else
    {
        for (int k = 0; k < q; k++)
        {
            if ((rank + 1) % (int)pow(2, k+1) == (int)pow(2, k))
            {
                MPI_Send(&s, 1, MPI_INT, rank + (int)pow(2, k), 99, MPI_COMM_WORLD);
            }
            if ((rank + 1) % (int)pow(2, k+1) == 0)
            {
                MPI_Recv(&s1, 1, MPI_INT, rank - (int)pow(2, k), 99, MPI_COMM_WORLD, &status);
                s += s1;
                
            }
        }
    }

    if (rank == size - 1) printf(""rank = %d, final sum = %d\n"", rank, s);

    MPI_Finalize();
    return 0;
}"
1w4nfH15,Sammple Json Applicant,bhosley,JSON,Friday 29th of March 2024 11:34:17 PM CDT,"{
  ""firstName"": ""John"",
  ""lastName"": ""Doe"",
  ""middleName"": ""Smith"",
  ""dob"": ""1990-05-15"",
  ""gender"": ""Male"",
  ""citizenship"": ""US"",
  ""emailId"": ""john.doe@example.com"",
  ""phoneNo"": 1234567890,
  ""serviceId"": ""SRV456"",
  ""personalInfo"": {
    ""height"": 180,
    ""weight"": 75,
    ""bloodGroup"": ""A+""
  },
  ""address"": [
    {
      ""floorOrFlatNo"": 10,
      ""street"": ""Main Street"",
      ""country"": ""USA"",
      ""state"": ""California"",
      ""city"": ""Los Angeles"",
      ""pincode"": 90001,
      ""addressType"": ""PERMANENT""
    },
    {
      ""floorOrFlatNo"": 5,
      ""street"": ""Park Avenue"",
      ""country"": ""USA"",
      ""state"": ""New York"",
      ""city"": ""New York City"",
      ""pincode"": 10001,
      ""addressType"": ""MAIL""
    }
  ],
  ""otherInfo"": {
    ""appliedImmigrationToOtherCountry"": ""No"",
    ""sufferFromHealthCondition"": ""No"",
    ""visaRefusalForAnyCountry"": ""No"",
    ""convictedToCriminalOffence"": ""No"",
    ""emergencyInfoName"": ""Jane Doe"",
    ""emergencyInfoPhone"": 9876543210,
    ""emergencyInfoEmail"": ""jane.doe@example.com"",
    ""relationWithApplicant"": ""Spouse"",
    ""additionalInfo"": ""None""
  },
  ""academicQualifications"": [
    {
      ""universityOrCollegeName"": ""ABC University"",
      ""degreeName"": ""Computer Science"",
      ""location"": ""New York"",
      ""courseStartDate"": ""2022-09-01"",
      ""courseEndDate"": ""2026-05-30"",
      ""educationLevel"": ""UG""
    },
    {
      ""universityOrCollegeName"": ""XYZ College"",
      ""degreeName"": ""Master of Business Administration"",
      ""location"": ""Los Angeles"",
      ""courseStartDate"": ""2023-01-15"",
      ""courseEndDate"": ""2024-12-20"",
      ""educationLevel"": ""PG""
    }
  ],
  ""workExperiences"": [
    {
      ""workExperience"": ""Software Engineer"",
      ""startFrom"": ""2018-01-01"",
      ""endDate"": ""2022-12-31"",
      ""companyName"": ""Tech Solutions"",
      ""fieldOfArea"": ""Information Technology""
    },
    {
      ""workExperience"": ""Project Manager"",
      ""startFrom"": ""2023-01-01"",
      ""endDate"": null,
      ""companyName"": ""Global Corp"",
      ""fieldOfArea"": ""Management""
    }
  ],
  ""tests"": [
    {
      ""testName"": ""IELTS"",
      ""dateOfCompletion"": ""2020-05-01"",
      ""dateOfExpiry"": ""2023-05-01"",
      ""overallPercentage"": ""7.5""
    },
    {
      ""testName"": ""GRE"",
      ""dateOfCompletion"": ""2019-08-15"",
      ""dateOfExpiry"": ""2024-08-15"",
      ""overallPercentage"": ""320""
    }
  ],
  ""appliedPrograms"": [
    {
      ""programId"": 1,
      ""appliedDate"": ""2024-03-01"",
      ""appliedUserId"": 1,
      ""programStatus"": ""Pending"",
      ""applicantStatus"": ""Submitted"",
      ""subStatus"": ""Initial Review"",
      ""isOpen"": true
    },
    {
      ""programId"": 2,
      ""appliedDate"": ""2024-03-15"",
      ""appliedUserId"": 1,
      ""programStatus"": ""Approved"",
      ""applicantStatus"": ""Accepted"",
      ""subStatus"": ""Final Review"",
      ""isOpen"": false
    }
  ]
}"
QL34wVRK,Untitled,35657,C++,Friday 29th of March 2024 11:31:34 PM CDT,"
#include <iostream> 


using namespace std;




int main() {
    setlocale(LC_ALL, ""ru"");

    int a = 10;

    cout << &a << endl; // получение адреса переменной

    int* ptr = &a; // сохранение адреса переменной 

    cout << ptr << endl;

    cout << *ptr << endl; // вывод переменной через указатель на неё

    *ptr = 20; // изменение значения переменной через указатель на неё

    cout << a << endl;
}"
3KtYg1gg,Untitled,35657,C++,Friday 29th of March 2024 11:19:47 PM CDT,"
#include <iostream> 


using namespace std;

void tower(int n, char src, char dest, char temp) {
    if (n == 0) {
        return;
    }
    tower(n - 1, src, temp, dest);
    cout << n << "" "" << src << "" -> "" << dest << endl;
    tower(n - 1, temp, dest, src);
}




int main() {
    setlocale(LC_ALL, ""ru"");

    tower(5, 'A', 'C', 'B');
    
}"
Fn9byMGY,Destruction Sim Inf Money Script,GETFREEROBUX,Lua,Friday 29th of March 2024 11:15:00 PM CDT,"loadstring(game:HttpGet(('https://raw.githubusercontent.com/BirthScripts/starhook/main/destruction%20sim.lua'),true))()"
c2KvcNTT,Untitled,robjones90,Python,Friday 29th of March 2024 09:38:58 PM CDT,"from tkinter import *

class App:
    def __init__(self, master):
        frame = Frame(master)
        frame.pack()
        Label(frame, text='deg C').grid(row=0, column=0)
        self.c_var = DoubleVar()
        Entry(frame, textvariable=self.c_var).grid(row=0, column=1)
        
        Label(frame, text='deg F').grid(row=1, column=0)
        self.result_var = DoubleVar()
        Entry(frame, textvariable=self.result_var).grid(row=1, column=1)

    def convert (self):
        print ('Not implemented')

root = Tk()
root.wm_title('Temp Converter')
app = App(root)
root.mainloop()"
zhmTFg6Z,SpawnPoint Command,LegendzHackz,Lua,Friday 29th of March 2024 09:14:11 PM CDT,"local Workspace = game:GetService(""Workspace"")
local Players = game:GetService(""Players"")
local Player = Players.LocalPlayer

getgenv().Settings = {
    Prefix = "";"",
    Coordinates = {},
    Spawn = false
}

function InsertTable(Table, Value)
    if type(Table) == ""table"" then
        table.insert(Table, Value)
        return Table
    end
end

function Notify(Value, Delay)
    if Workspace:FindFirstChild(""Hint"") then
        Workspace:FindFirstChild(""Hint"")
    end

    local Hint = Instance.new(""Hint"", Workspace)

    Hint.Text = Value
    task.wait(Delay)
    Hint:Destroy()
end

Player.CharacterAdded:Connect(function()
    if getgenv().Settings.Spawn then
        local Coordinates = getgenv().Settings.Coordinates[1]
        Player.Character:WaitForChild(""HumanoidRootPart"", 0.1).CFrame = CFrame.new(Coordinates)
    end
end)

Player.Chatted:Connect(function(Message)
    Message = Message:lower()

    if string.sub(Message, 1, 3) == ""/e "" then
        Message = string.sub(Message, 4)
    end

    if string.sub(Message, 1, 1) == getgenv().Settings.Prefix then
        local Command
        local Space = string.find(Message, "" "")
        if Space then
            Command = string.sub(Message, 2, Space - 1)
        else
            Command = string.sub(Message, 2)
        end
        if Command == ""spawn"" then
            Notify(""Set Spawn Point, "" .. tostring(Player.Character.HumanoidRootPart.CFrame), 1)
            getgenv().Settings.Spawn = true
            InsertTable(getgenv().Settings.Coordinates, Player.Character.HumanoidRootPart.Position)
        elseif Command == ""unspawn"" then
            Notify(""Removed Spawn Point"", 1)
            getgenv().Settings.Spawn = false
            table.clear(getgenv().Settings.Coordinates)
        end
    end
end)"
XXjNb3ne,CMDER.pyw,Najeebsk,Python,Friday 29th of March 2024 09:08:43 PM CDT,"import tkinter as tk
from tkinter import ttk
import subprocess
import configparser
import os


class AliasButtonExample(tk.Tk):
    def __init__(self):
        super().__init__()
        self.geometry('1000x675')
        self.config(bg='green')
        self.title(""Najeeb CMD ALIASES COMMANDS RUNNER"")

        self.console_frame = ConsoleFrame(self)
        self.console_frame.grid(row=0, column=0, columnspan=3, padx=5, pady=5, sticky=""nsew"")

        self.aliases = {}

        self.create_widgets()

    def create_widgets(self):
        style = ttk.Style()
        style.configure(""TButton"", foreground=""blue"", background=""lightgray"", font=('Arial', 10, 'bold'))
        style.configure(""TLabel"", foreground=""darkblue"", background=""lightgray"", font=('Arial', 10))

        tk.Label(self, text=""Command:"").grid(row=1, column=0, padx=5, pady=5)
        tk.Label(self, text=""Najeeb Aliases:"").grid(row=3, column=0, sticky=""n"", padx=5, pady=5)

        self.command_entry = tk.Entry(self, width=100)
        self.command_entry.grid(row=1, column=1, padx=5, pady=5)

        self.run_button = ttk.Button(self, text=""Run Command"", command=self.run_command, style=""TButton"")
        self.run_button.grid(row=1, column=2, rowspan=1, padx=5, pady=5, sticky=""nsew"")

        self.aliases_frame = tk.Frame(self)
        self.aliases_frame.grid(row=4, column=0, columnspan=3, padx=5, pady=5, sticky=""nsew"")

        self.aliases_text = tk.Text(self.aliases_frame, wrap=""word"", state=""normal"", height=10, width=106, font=('Arial', 12))
        self.aliases_text.grid(row=0, column=0, padx=5, pady=5, sticky=""nsew"")

        self.aliases_scrollbar = tk.Scrollbar(self.aliases_frame, orient=""vertical"", command=self.aliases_text.yview)
        self.aliases_scrollbar.grid(row=0, column=1, sticky=""ns"")
        self.aliases_text.config(yscrollcommand=self.aliases_scrollbar.set)

        self.search_label = tk.Label(self, text=""Search Aliases:"")
        self.search_label.grid(row=5, column=0, padx=5, pady=5, sticky=""e"")

        self.search_entry = tk.Entry(self, width=100)
        self.search_entry.grid(row=5, column=1, padx=5, pady=5)

        self.search_button = ttk.Button(self, text=""Search"", command=self.search_aliases, style=""TButton"")
        self.search_button.grid(row=5, column=2, padx=5, pady=5)

        self.save_button = ttk.Button(self, text=""Save Console Text"", command=self.save_console_text, style=""TButton"")
        self.save_button.grid(row=3, column=1, padx=5, pady=5)

        self.grid_columnconfigure(1, weight=1)

        self.read_aliases()

    def run_command(self):
        command = self.command_entry.get().strip()
        if command in self.aliases:
            command = self.aliases[command]
        process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        stdout, stderr = process.communicate()
        output = stdout.decode()
        error = stderr.decode()
        self.console_frame.console_window.append_text(output)
        if error:
            self.console_frame.console_window.append_text(error, tag=""error"")

    def read_aliases(self):
        try:
            config = configparser.ConfigParser()
            config.read(r""C:\Users\Najeeb\Desktop\CMDER\Aliases.ini"")
            for section in config.sections():
                for option in config.options(section):
                    try:
                        command = config.get(section, option)
                        self.aliases[option] = command
                        self.aliases_text.insert(""end"", f""{option}: {command}\n"")
                    except configparser.InterpolationSyntaxError as e:
                        print(f""Error reading alias '{option}' in section '{section}': {e}"")
        except configparser.Error as e:
            print(f""Error reading configuration file: {e}"")

    def search_aliases(self):
        query = self.search_entry.get().strip().lower()
        self.aliases_text.delete('1.0', tk.END)
        if query:
            for alias, command in self.aliases.items():
                if query in alias.lower() or query in command.lower():
                    self.aliases_text.insert(tk.END, f""{alias}: {command}\n"")

    def save_console_text(self):
        text_to_save = self.console_frame.console_window.get_text()
        with open(""console_output.txt"", ""w"") as file:
            file.write(text_to_save)


class ConsoleFrame(tk.Frame):
    def __init__(self, parent):
        super().__init__(parent)
        self.console_window = ConsoleWindow(self)
        self.console_window.pack(expand=True, fill=""both"")
        self.clear_button = ttk.Button(self, text=""Clear Console"", command=self.clear_console)
        self.clear_button.pack()

    def clear_console(self):
        self.console_window.clear_text()


class ConsoleWindow(tk.Frame):
    def __init__(self, parent):
        super().__init__(parent)
        self.text_area = tk.Text(self, wrap=""word"", state=""normal"", height=15, width=100, font=('Arial', 12))
        self.text_area.pack(expand=True, fill=""both"")
        self.scrollbar = tk.Scrollbar(self, command=self.text_area.yview)
        self.scrollbar.pack(side=""right"", fill=""y"")
        self.text_area.config(yscrollcommand=self.scrollbar.set)

        # Bind the text widget to automatically copy selected text to the clipboard
        self.text_area.bind(""<Control-c>"", self.copy_to_clipboard)

    def append_text(self, text, tag=None):
        self.text_area.config(state=""normal"")
        if tag:
            self.text_area.insert(""end"", text, tag)
        else:
            self.text_area.insert(""end"", text)
        self.text_area.config(state=""disabled"")
        self.text_area.see(""end"")

    def clear_text(self):
        self.text_area.config(state=""normal"")
        self.text_area.delete(""1.0"", ""end"")
        self.text_area.config(state=""disabled"")

    def get_text(self):
        return self.text_area.get(""1.0"", ""end-1c"")

    def copy_to_clipboard(self, event=None):
        self.clipboard_clear()
        text = self.text_area.get(tk.SEL_FIRST, tk.SEL_LAST)
        self.clipboard_append(text)


if __name__ == ""__main__"":
    app = AliasButtonExample()
    app.mainloop()
"
z9REt2TH,Check firmware UNO R4 WiFi,hwthinker,Arduino,Friday 29th of March 2024 09:08:19 PM CDT,"/*
  Simple code to check WiFi Firmware on Arduino Uno R4 WiFi

  Wi-Fi support is enabled via the built-in WiFiS3 library that is shipped 
  with the Arduino UNO R4 Core. 
  Installing the core automatically installs the WiFiS3 library.

  ref: UNO R4 WiFi Network Examples
  https://docs.arduino.cc/tutorials/uno-r4-wifi/wifi-examples
*/
#include <WiFiS3.h>

void setup() {
  delay(500);

  //Initialize serial and wait for port to open:
  Serial.begin(9600);
  while (!Serial) {
    ; // wait for serial port to connect. Needed for native USB port only
  }
  delay(500);
  Serial.println(""- Check Arduino Uno R4 WiFi firmware version -"");

  // check for the WiFi module:
  if (WiFi.status() == WL_NO_MODULE) {
    Serial.println(""Communication with WiFi module failed!"");
    // don't continue
    while (true);
  }

  String fv = WiFi.firmwareVersion();
  Serial.println(""Your WiFi firmware version is:"");
  Serial.println(fv);
  Serial.println();

  if (fv < WIFI_FIRMWARE_LATEST_VERSION) {
    Serial.println(""Please upgrade the firmware"");
    Serial.println(WIFI_FIRMWARE_LATEST_VERSION);
  }
  else{
    Serial.println(""It's the latest version."");
  }
}

void loop() {
  // put your main code here, to run repeatedly:

}
"
ZXEktF70,Jeu de paires,AdminArchon,Python,Friday 29th of March 2024 08:38:36 PM CDT,"from tinydb import TinyDB, Query
import yaml

db = TinyDB('db.json')
user = Query()

LISTE_JOUEURS = [el[""nom""] for el in [element for element in db.all()]]
print(LISTE_JOUEURS)
with open(""config.yml"") as config:
    document = yaml.full_load(config)

print(document)


class Grille_de_jeu:
    def __init__(self, colonnes=2, lignes=2, niveau=0):
        self.colonnes = colonnes
        self.lignes = lignes
        self.niveau = niveau

    def definir_taille_grille(self):
        pass


class Joueur:
    def __init__(self, nom):
        self.nom = nom
        self.niveau = 0

    def creer_joueur_db(self, nom_joueur):
        if not nom_joueur in LISTE_JOUEURS: db.insert({'nom': self.nom, 'niveau': self.niveau})

    def sauvegarder_partie(self, niveau_joueur):
        db.update({'niveau': niveau_joueur}, user.nom == self.nom)

    def charger_partie(self):
        joueur_trouve = db.search(user.nom == self.nom)
        return joueur_trouve[0][""niveau""]


# Creation
print(""Bienvenue au Jeu de Paires !\n"")
# nom_joueur = input(""Comment t'appelles-tu ?\n"").lower().title()
perso = Joueur('Didier')
perso.creer_joueur_db(perso.nom)

# Recherche existant
print(perso.charger_partie())



"
mcCTKyRS,[OS] update.lua,Le_JuiceBOX,Lua,Friday 29th of March 2024 08:24:24 PM CDT,"-- mcCTKyRS

function Main()
    local progs = require(""pastes"")
    for i,data in pairs(progs) do
        term.clear()
        term.setCursorPos(1,1)
        print(""Updating ~"")
        print()
        print(""ID: ""..data.Id)
        print(""File: ""..data.Name)
        print()
        if fs.exists(data.Name) then fs.delete(data.Name); end
        shell.run(""pastebin get ""..data.Id.."" ""..data.Name)
        term.clear()
    end
    os.reboot()
end

Main()"
UUi6yADD,[OS] startup.lua,Le_JuiceBOX,Lua,Friday 29th of March 2024 08:22:13 PM CDT,"shell.run(""OS/turtleOS.lua"")"
zaYEwNsV,[OS] pastes.lua,Le_JuiceBOX,Lua,Friday 29th of March 2024 08:19:35 PM CDT,"-- zaYEwNsV
-- add auto update scripts here

local OS = ""/OS/""
return{
    -- modules
    {
        Name = ""terminal.lua"",
        Id = ""Kz2mdMyW"",
    },

    {
        Name = ""turtleBrain.lua"",
        Id = ""4YV4ewAY"",
    },
    {
        Name = ""startup.lua"",
        Id = ""UUi6yADD"",
    },
    --os
    {
        Name = OS..""turtleOS.lua"",
        Id = ""CeGJp05X"",
    },
    {
        Name = OS..""update.lua"",
        Id = ""mcCTKyRS"",
    },
    --apps
    {
        Name = OS..""Programs/rename.lua"",
        Id = ""987DVwt4"",
    },
    --apps/turtle
    {
        Name = OS..""Programs/Turtle/mineCalc.lua"",
        Id = ""hGmpXW4T"",
    },

    {
        Name = OS..""Programs/Turtle/mine.lua"",
        Id = ""0DAspFKK"",
    },

    {
        Name = OS..""Programs/Turtle/refuel.lua"",
        Id = ""WWLZe6E3"",
    },

    {
        Name = OS..""Programs/Turtle/flooring.lua"",
        Id = ""Gj6pAfrP"",
    },


}

--[[
    { 
        FILENAME, 
        PASTEBINID 
    },
]]--"
PA0ML9k2,Android key,Long_Offici,Python,Friday 29th of March 2024 08:08:19 PM CDT,"{
    ""key"": [""SOIL-324424"", ""dila""]
}"
hGmpXW4T,[App] mineCalc.lua,Le_JuiceBOX,Lua,Friday 29th of March 2024 08:05:10 PM CDT,"-- hGmpXW4T
local Terminal = require(""/terminal"").new()
function Main()
    Terminal:reset()
    print(""Calculate the amount of blocks this turtle can mine using mine.lua"")
    print()
    local w = Terminal:promptNum(""Enter the width:"")
    Terminal:reset()
    print(""Calculate the amount of blocks this turtle can mine using mine.lua"")
    print()
    local h = Terminal:promptNum(""Enter the height:"")
    Terminal:reset()
    local layer = w*h
    local fLevel = turtle.getFuelLevel()
    local fLimit = turtle.getFuelLimit()
    local limitDepth = math.floor((fLimit/layer))
    local maxDepth = math.floor((fLevel/layer))
    print(""Results ~"")
    print()
    print(""Width: ""..w)
    print(""Height: ""..h)
    print()
    print(""Current Fuel.......""..fLevel)
    print(""Max depth..........""..maxDepth.."" (""..math.floor(maxDepth/16).."" chunks)"")
    print(""Max depth on tank..""..limitDepth.."" (""..math.floor(limitDepth/16).."" chunks)"")
    print()
    Terminal:pressAnyKeyToContinue()
end

Main()"
CeGJp05X,[OS] turtleOS.lua,Le_JuiceBOX,Lua,Friday 29th of March 2024 07:58:37 PM CDT,"-- CeGJp05X
local Terminal = require(""/terminal"").new()

function OpenSettings()
    Terminal:reset()
    print(Terminal:makeSeperator(""=""))
    print(""TurtleOS - Computer Settings"")
    print(Terminal:makeSeperator(""=""))
    print()

    local t = {}
    for i, name in pairs(settings.getNames()) do
        if string.find(name,""bios."") then  
        elseif string.find(name,""edit."") then  
        elseif string.find(name,""shell."") then  
        elseif string.find(name,""lua."") then
        elseif string.find(name,""list."") then
        elseif string.find(name,""paint."") then
        else
            table.insert(t,name)
        end
    end
    for index, value in ipairs(t) do
        print(index.."". ""..value)
    end
    Terminal:pressAnyKeyToContinue()
end

function OpenShell()
    Terminal:reset()
    print(""Opening shell..."")
    os.sleep(0.5)
    Terminal:reset()
    print(Terminal:makeSeperator(""=""))
    print(""TurtleOS - Shell"")
    print(Terminal:makeSeperator(""=""))
    print(""Restart to go back!"")
    print()
end

function RunProgram()
    Terminal:reset()
    local path = Terminal:promptFilePath(""/OS/Programs"")
    if path then
        Terminal:reset()
        print(""Opening ""..path..""..."")
        os.sleep(1.5)
        shell.run(path)
    end
end

local mainMenu = {
    {
        Name = ""Shell"",
        Func = function()
           OpenShell()
           return true;
        end,
    },
    {
        Name = ""Applications"",
        Func = RunProgram,
    },
    {
        Name = ""File Explorer"",
        Func = function()
           Terminal:promptFilePath("""") 
        end,
    },
    {
        Name = ""Update"",
        Func = function()
            Terminal:reset()
            if Terminal:promptBool(""Are you sure? (1 or 0)"") then
                shell.run(""/OS/update.lua"") 
            end
            Terminal:reset()
        end,
    },
    {
        Name = ""Settings"",
        Func = OpenSettings,
    },
}

function Main()
    fs.makeDir(""/OS/Programs/Turtle"")
    shell.run(""pastebin get zaYEwNsV OS/pastes.lua"") -- get pastes if file doesnt exist
    shell.run(""pastebin get mcCTKyRS OS/update.lua"") -- get update if file doesnt exist
    local mode = 0
    fs.delete(Terminal:getComputerLabel())
    fs.makeDir(Terminal:getComputerLabel())
    while true do
        WriteHomeScreen()
        local num = Terminal:waitForNumberKey()
        if num < 1 or num > #mainMenu then
            print(""Invalid input."")
            os.sleep(1)
        else
            local res = mainMenu[num].Func()
            if res then return; end
        end
    end
end

function WriteHomeScreen()
    Terminal:reset()
    term.setCursorPos(1,Terminal.size.y)
    print(Terminal:getComputerLabel().."" (ID: ""..os.getComputerID().."")"")
    Terminal:display(1,
        Terminal:makeSeperator(""=""),
        ""Turtle OS ~"",
        Terminal:makeSeperator(""="")
    )
    for i,data in ipairs(mainMenu) do
        print(i.."". ""..data.Name)
    end
    print()
end


Main()"
YUMfgNT7,Pinging Local Network Machines by host names,metalx1000,Bash,Friday 29th of March 2024 07:56:13 PM CDT,"# Pinging Local Network Machines by host names
sudo apt install mdnsd
 
# on older machines
sudo apt install avahi-daemon
sudo systemctl restart avahi-daemon"
cjq33CW2,Untitled,wersady,Python,Friday 29th of March 2024 07:37:15 PM CDT,"keySales = [
    
]

sumOfSales = 0;

for i in keySales:
    sumOfSales += i[1]
    
print(sumOfSales/len(keySales))"
dHQVD3RW,t460,nenoro,Bash,Friday 29th of March 2024 07:31:16 PM CDT,"# These settings were set by the catalyst build script that automatically
# built this stage.
# Please consult /usr/share/portage/config/make.conf.example for a more
# detailed example.

CFLAGS=""-march=skylake -O2 -pipe""
CXXFLAGS=""${CFLAGS}""
FCFLAGS=""${CFLAGS}""
FFLAGS=""${CFLAGS}""
CHOST=""x86_64-pc-linux-gnu""
#CPU_FLAGS=""aes avx avx2 f16c fma3 mmx mmxext pclmul popcnt sse sse2 sse3 sse4_1 sse4_2 sse4a ssse3""
CPU_FLAGS=""aes avx avx2 f16c fma3 mmx mmxext pclmul popcnt rdrand sha sse sse2 sse3 sse4_1 sse4_2 sse4a ssse3""

# NOTE: This stage was built with the bindist Use flag enabled

PORTDIR=""/usr/gentoo""
DISTDIR=""${PORTDIR}/distfiles""
PKGDIR=""${PORTDIR}/packages""
PORTAGE_TMPDIR=""/tmp""
PORTAGE_ELOG_CLASSES=""log warn error""

# This sets the language of build output to English.
# Please keep this setting intact when reporting bugs.
LC_MESSAGES=C

GENTOO_MIRRORS=""http://gentoo.mirrors.ovh.net/gentoo-distfiles/
                ftp://ftp.free.fr/mirrors/ftp.gentoo.org/
                http://ftp.free.fr/mirrors/ftp.gentoo.org/
                https://mirrors.ircam.fr/pub/gentoo-distfiles/
                https://mirrors.ircam.fr/pub/gentoo-distfiles/
                rsync://mirrors.ircam.fr/pub/gentoo-distfiles/
                https://mirrors.soeasyto.com/distfiles.gentoo.org/
                http://mirrors.soeasyto.com/distfiles.gentoo.org/
                ftp://mirrors.soeasyto.com/distfiles.gentoo.org/""

USE=""${USE} X xinerama pipewire wifi bluetooth""
USE=""${USE} truetype cleartype corefonts tahoma git""
USE=""${USE} jpeg jpeg2k png gif apng bash-completion x264 x265 openh264""
USE=""${USE} alsa gstreamer mp3 mp4 flac lame aac matroska""
USE=""${USE} dri dri3 lm-sensors hddtemp mplayer mpv mpeg ffmpeg encode opencl openal opengl""

USE=""${USE} -gnome -kde -semantic-desktop -libav -modemanager -networkmanager -java -branding -infinality""
USE=""${USE} -systemd -deprecated -docs -test -examples -kerberos -plasma -bindist""
USE=""${USE} -javascript -pcmcia -telemetry -ccache -passwdqc""

LINGUAS=""en en-GB en_GB""
L10N=""en en-GB en_GB""
INPUT_DEVICES=""evdev""
VIDEO_CARDS=""intel""
AUTOCLEAN=""yes""
FEATURES=""${FEATURES} noman nodoc noinfo sandbox usersandbox userpriv userfetch -ccache"" #ccache causes failure
FEATURES=""${FEATURES} fail-clean clean-logs preserve-libs""
FEATURES=""${FEATURES} unknown-features-warn python-trace""

#multi-threads don't reduce the compile time
MAKEOPTS=""-j4""

EMERGE_DEFAULT_OPTS=""${EMERGE_DEFAULT_OPTS} --quiet-build=y --verbose --nospinner""
EMERGE_DEFAULT_OPTS=""${EMERGE_DEFAULT_OPTS} --color=y --complete-graph --with-bdeps=y""
SANE_BACKENDS=""brother""
PORTAGE_NICENESS=""16""
ACCEPT_LICENSE=""*"""
38F079KQ,2024-03-29_stats.json,rdp_snitch,JSON,Friday 29th of March 2024 07:18:23 PM CDT,"{
  ""ip"": {
    ""128.199.242.196"": 4293,
    ""58.218.204.183"": 9,
    ""2.57.149.186"": 27,
    ""62.204.41.222"": 18,
    ""212.70.149.146"": 9,
    ""198.235.24.230"": 9,
    ""194.165.16.78"": 6,
    ""199.45.154.55"": 3,
    ""117.2.137.179"": 9,
    ""87.251.75.145"": 9,
    ""185.16.38.89"": 6,
    ""194.165.16.76"": 6,
    ""36.78.201.10"": 3,
    ""103.214.8.137"": 12,
    ""196.171.104.218"": 6,
    ""185.170.144.3"": 6,
    ""164.90.160.126"": 9,
    ""167.94.138.36"": 3,
    ""196.190.117.7"": 3,
    ""198.235.24.126"": 9,
    ""180.76.119.217"": 18,
    ""2.57.149.92"": 3,
    ""185.196.220.41"": 9,
    ""193.142.146.227"": 9,
    ""81.19.135.2"": 9,
    ""152.32.245.196"": 3,
    ""14.225.9.184"": 57,
    ""205.210.31.168"": 9,
    ""144.217.24.29"": 3,
    ""45.227.254.8"": 6,
    ""206.168.34.49"": 3,
    ""87.251.75.64"": 3,
    ""45.227.254.119"": 6,
    ""113.160.91.206"": 3,
    ""205.210.31.206"": 9,
    ""144.16.111.79"": 3,
    ""112.4.139.162"": 3,
    ""128.1.43.27"": 528
  },
  ""asn"": {
    ""AS14061"": 4302,
    ""AS4134"": 9,
    ""AS208312"": 30,
    ""AS59425"": 18,
    ""AS204428"": 9,
    ""AS396982"": 36,
    ""AS48721"": 12,
    ""AS398722"": 3,
    ""AS7552"": 9,
    ""AS208091"": 12,
    ""AS201814"": 6,
    ""AS7713"": 3,
    ""AS140810"": 12,
    ""AS24691"": 6,
    ""AS197414"": 6,
    ""AS398324"": 6,
    ""AS24757"": 3,
    ""AS38365"": 18,
    ""AS208046"": 18,
    ""AS209588"": 9,
    ""AS135377"": 531,
    ""AS135905"": 57,
    ""AS16276"": 3,
    ""AS267784"": 12,
    ""AS45899"": 3,
    ""AS2697"": 3,
    ""AS56046"": 3
  },
  ""isp"": {
    ""DigitalOcean, LLC"": 4302,
    ""Chinanet"": 9,
    ""Red Byte LLC"": 30,
    ""Horizon LLC"": 18,
    ""SS-Net"": 9,
    ""Google LLC"": 36,
    ""Flyservers S.A."": 33,
    ""Censys, Inc."": 6,
    ""Viettel Corporation"": 9,
    ""Xhost Internet Solutions LP"": 18,
    ""MEVSPACE sp. z o.o."": 6,
    ""PT. TELKOM INDONESIA"": 3,
    ""MEGACORE"": 12,
    ""TogoTelecom"": 6,
    ""Ethiotelecom"": 3,
    ""Beijing Baidu Netcom Science and Technology Co., Ltd."": 18,
    ""ColocationX Ltd."": 18,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Vietnam Posts and Telecommunications Group"": 57,
    ""OVH Hosting"": 3,
    ""Censys"": 3,
    ""VietNam Post and Telecom Corporation"": 3,
    ""ERNET India"": 3,
    ""China Mobile Communications Corporation"": 3,
    ""Zenlayer Inc"": 528
  },
  ""org"": {
    ""DigitalOcean, LLC"": 4302,
    ""Chinanet JS"": 9,
    ""Chang Way Technologies Co. Limited"": 30,
    ""Horizon LLC"": 18,
    ""4Media Ltd"": 9,
    ""Palo Alto Networks, Inc"": 36,
    ""Flyservers S.A"": 12,
    ""Censys, Inc."": 6,
    ""Unknown"": 21,
    ""Xhost Internet Solutions"": 12,
    ""MEVSPACE sp. z o.o"": 6,
    ""Megacore Technology Company Limited"": 12,
    ""Xhostis"": 6,
    ""Censys, Inc"": 3,
    ""Beijing Baidu Netcom Science and Technology Co., Ltd."": 18,
    ""Makut Investments"": 9,
    ""ColocationX Ltd"": 9,
    ""Alviva Holding Limited"": 9,
    ""Ucloud Information Technology (hk) Limited"": 3,
    ""VNPT"": 57,
    ""SAS, ONYPHE"": 3,
    ""UAB Host Baltic"": 12,
    ""Vietnam Posts and Telecommunications Group"": 3,
    ""ERNET India"": 3,
    ""China Mobile Communications Corporation"": 3,
    ""UCLOUD"": 528
  },
  ""regionName"": {
    ""South West"": 4293,
    ""Jiangsu"": 12,
    ""Lesser Poland"": 30,
    ""Moscow"": 546,
    ""Sliven"": 9,
    ""California"": 36,
    ""Kaunas"": 12,
    ""Central and Western District"": 3,
    ""L\u00e2m \u0110\u1ed3ng Province"": 9,
    ""North Holland"": 27,
    ""Mazovia"": 6,
    ""East Kalimantan"": 3,
    ""Hanoi"": 72,
    ""Maritime"": 6,
    ""Hesse"": 18,
    ""Michigan"": 6,
    ""Addis Ababa"": 3,
    ""Beijing"": 18,
    ""Virginia"": 9,
    ""Bangkok"": 3,
    ""Quebec"": 3,
    ""Vilnius"": 12,
    ""National Capital Territory of Delhi"": 3
  },
  ""country"": {
    ""Singapore"": 4293,
    ""China"": 30,
    ""Poland"": 36,
    ""Russia"": 546,
    ""Bulgaria"": 9,
    ""United States"": 51,
    ""Lithuania"": 24,
    ""Hong Kong"": 3,
    ""Vietnam"": 81,
    ""The Netherlands"": 27,
    ""Indonesia"": 3,
    ""Togo"": 6,
    ""Germany"": 18,
    ""Ethiopia"": 3,
    ""Thailand"": 3,
    ""Canada"": 3,
    ""India"": 3
  },
  ""account"": {
    ""hello"": 4425,
    ""Administr"": 48,
    ""Test"": 42,
    ""qhyMCZkNs"": 3,
    ""ocdcRH"": 3,
    ""WCcilM"": 3,
    ""(empty)"": 15,
    ""SfEnehAbI"": 3,
    ""urkbgD"": 3,
    ""AxwAdG"": 3,
    ""Domain"": 39,
    ""Administrator"": 6,
    ""hEZBygWNm"": 3,
    ""yMCqXY"": 3,
    ""UlkBmK"": 3,
    ""rhqokGzIW"": 3,
    ""MVLJLM"": 3,
    ""mLZXbr"": 3,
    ""1948287240"": 528
  },
  ""keyboard"": {
    ""Unknown"": 5139
  },
  ""client_build"": {
    ""Unknown"": 5139
  },
  ""client_name"": {
    ""Unknown"": 5139
  },
  ""ip_type"": {
    ""hosting & proxy"": 4293,
    ""Unknown"": 237,
    ""hosting"": 597,
    ""mobile"": 12
  }
}"
hy0jRXu3,2024-03-29_stats.json,rdp_snitch,JSON,Friday 29th of March 2024 07:16:07 PM CDT,"{
  ""ip"": {
    ""128.199.242.196"": 2862,
    ""58.218.204.183"": 6,
    ""2.57.149.186"": 18,
    ""62.204.41.222"": 12,
    ""212.70.149.146"": 6,
    ""198.235.24.230"": 6,
    ""194.165.16.78"": 4,
    ""199.45.154.55"": 2,
    ""117.2.137.179"": 6,
    ""87.251.75.145"": 6,
    ""185.16.38.89"": 4,
    ""194.165.16.76"": 4,
    ""36.78.201.10"": 2,
    ""103.214.8.137"": 8,
    ""196.171.104.218"": 4,
    ""185.170.144.3"": 4,
    ""164.90.160.126"": 6,
    ""167.94.138.36"": 2,
    ""196.190.117.7"": 2,
    ""198.235.24.126"": 6,
    ""180.76.119.217"": 12,
    ""2.57.149.92"": 2,
    ""185.196.220.41"": 6,
    ""193.142.146.227"": 6,
    ""81.19.135.2"": 6,
    ""152.32.245.196"": 2,
    ""14.225.9.184"": 38,
    ""205.210.31.168"": 6,
    ""144.217.24.29"": 2,
    ""45.227.254.8"": 4,
    ""206.168.34.49"": 2,
    ""87.251.75.64"": 2,
    ""45.227.254.119"": 4,
    ""113.160.91.206"": 2,
    ""205.210.31.206"": 6,
    ""144.16.111.79"": 2,
    ""112.4.139.162"": 2,
    ""128.1.43.27"": 352
  },
  ""asn"": {
    ""AS14061"": 2868,
    ""AS4134"": 6,
    ""AS208312"": 20,
    ""AS59425"": 12,
    ""AS204428"": 6,
    ""AS396982"": 24,
    ""AS48721"": 8,
    ""AS398722"": 2,
    ""AS7552"": 6,
    ""AS208091"": 8,
    ""AS201814"": 4,
    ""AS7713"": 2,
    ""AS140810"": 8,
    ""AS24691"": 4,
    ""AS197414"": 4,
    ""AS398324"": 4,
    ""AS24757"": 2,
    ""AS38365"": 12,
    ""AS208046"": 12,
    ""AS209588"": 6,
    ""AS135377"": 354,
    ""AS135905"": 38,
    ""AS16276"": 2,
    ""AS267784"": 8,
    ""AS45899"": 2,
    ""AS2697"": 2,
    ""AS56046"": 2
  },
  ""isp"": {
    ""DigitalOcean, LLC"": 2868,
    ""Chinanet"": 6,
    ""Red Byte LLC"": 20,
    ""Horizon LLC"": 12,
    ""SS-Net"": 6,
    ""Google LLC"": 24,
    ""Flyservers S.A."": 22,
    ""Censys, Inc."": 4,
    ""Viettel Corporation"": 6,
    ""Xhost Internet Solutions LP"": 12,
    ""MEVSPACE sp. z o.o."": 4,
    ""PT. TELKOM INDONESIA"": 2,
    ""MEGACORE"": 8,
    ""TogoTelecom"": 4,
    ""Ethiotelecom"": 2,
    ""Beijing Baidu Netcom Science and Technology Co., Ltd."": 12,
    ""ColocationX Ltd."": 12,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Vietnam Posts and Telecommunications Group"": 38,
    ""OVH Hosting"": 2,
    ""Censys"": 2,
    ""VietNam Post and Telecom Corporation"": 2,
    ""ERNET India"": 2,
    ""China Mobile Communications Corporation"": 2,
    ""Zenlayer Inc"": 352
  },
  ""org"": {
    ""DigitalOcean, LLC"": 2868,
    ""Chinanet JS"": 6,
    ""Chang Way Technologies Co. Limited"": 20,
    ""Horizon LLC"": 12,
    ""4Media Ltd"": 6,
    ""Palo Alto Networks, Inc"": 24,
    ""Flyservers S.A"": 8,
    ""Censys, Inc."": 4,
    ""Unknown"": 14,
    ""Xhost Internet Solutions"": 8,
    ""MEVSPACE sp. z o.o"": 4,
    ""Megacore Technology Company Limited"": 8,
    ""Xhostis"": 4,
    ""Censys, Inc"": 2,
    ""Beijing Baidu Netcom Science and Technology Co., Ltd."": 12,
    ""Makut Investments"": 6,
    ""ColocationX Ltd"": 6,
    ""Alviva Holding Limited"": 6,
    ""Ucloud Information Technology (hk) Limited"": 2,
    ""VNPT"": 38,
    ""SAS, ONYPHE"": 2,
    ""UAB Host Baltic"": 8,
    ""Vietnam Posts and Telecommunications Group"": 2,
    ""ERNET India"": 2,
    ""China Mobile Communications Corporation"": 2,
    ""UCLOUD"": 352
  },
  ""regionName"": {
    ""South West"": 2862,
    ""Jiangsu"": 8,
    ""Lesser Poland"": 20,
    ""Moscow"": 364,
    ""Sliven"": 6,
    ""California"": 24,
    ""Kaunas"": 8,
    ""Central and Western District"": 2,
    ""L\u00e2m \u0110\u1ed3ng Province"": 6,
    ""North Holland"": 18,
    ""Mazovia"": 4,
    ""East Kalimantan"": 2,
    ""Hanoi"": 48,
    ""Maritime"": 4,
    ""Hesse"": 12,
    ""Michigan"": 4,
    ""Addis Ababa"": 2,
    ""Beijing"": 12,
    ""Virginia"": 6,
    ""Bangkok"": 2,
    ""Quebec"": 2,
    ""Vilnius"": 8,
    ""National Capital Territory of Delhi"": 2
  },
  ""country"": {
    ""Singapore"": 2862,
    ""China"": 20,
    ""Poland"": 24,
    ""Russia"": 364,
    ""Bulgaria"": 6,
    ""United States"": 34,
    ""Lithuania"": 16,
    ""Hong Kong"": 2,
    ""Vietnam"": 54,
    ""The Netherlands"": 18,
    ""Indonesia"": 2,
    ""Togo"": 4,
    ""Germany"": 12,
    ""Ethiopia"": 2,
    ""Thailand"": 2,
    ""Canada"": 2,
    ""India"": 2
  },
  ""account"": {
    ""hello"": 2950,
    ""Administr"": 32,
    ""Test"": 28,
    ""qhyMCZkNs"": 2,
    ""ocdcRH"": 2,
    ""WCcilM"": 2,
    ""(empty)"": 10,
    ""SfEnehAbI"": 2,
    ""urkbgD"": 2,
    ""AxwAdG"": 2,
    ""Domain"": 26,
    ""Administrator"": 4,
    ""hEZBygWNm"": 2,
    ""yMCqXY"": 2,
    ""UlkBmK"": 2,
    ""rhqokGzIW"": 2,
    ""MVLJLM"": 2,
    ""mLZXbr"": 2,
    ""1948287240"": 352
  },
  ""keyboard"": {
    ""Unknown"": 3426
  },
  ""client_build"": {
    ""Unknown"": 3426
  },
  ""client_name"": {
    ""Unknown"": 3426
  },
  ""ip_type"": {
    ""hosting & proxy"": 2862,
    ""Unknown"": 158,
    ""hosting"": 398,
    ""mobile"": 8
  }
}"
3CNBEmfk,2024-03-29_stats.json,rdp_snitch,JSON,Friday 29th of March 2024 07:15:08 PM CDT,"{
  ""ip"": {
    ""128.199.242.196"": 1431,
    ""58.218.204.183"": 3,
    ""2.57.149.186"": 9,
    ""62.204.41.222"": 6,
    ""212.70.149.146"": 3,
    ""198.235.24.230"": 3,
    ""194.165.16.78"": 2,
    ""199.45.154.55"": 1,
    ""117.2.137.179"": 3,
    ""87.251.75.145"": 3,
    ""185.16.38.89"": 2,
    ""194.165.16.76"": 2,
    ""36.78.201.10"": 1,
    ""103.214.8.137"": 4,
    ""196.171.104.218"": 2,
    ""185.170.144.3"": 2,
    ""164.90.160.126"": 3,
    ""167.94.138.36"": 1,
    ""196.190.117.7"": 1,
    ""198.235.24.126"": 3,
    ""180.76.119.217"": 6,
    ""2.57.149.92"": 1,
    ""185.196.220.41"": 3,
    ""193.142.146.227"": 3,
    ""81.19.135.2"": 3,
    ""152.32.245.196"": 1,
    ""14.225.9.184"": 19,
    ""205.210.31.168"": 3,
    ""144.217.24.29"": 1,
    ""45.227.254.8"": 2,
    ""206.168.34.49"": 1,
    ""87.251.75.64"": 1,
    ""45.227.254.119"": 2,
    ""113.160.91.206"": 1,
    ""205.210.31.206"": 3,
    ""144.16.111.79"": 1,
    ""112.4.139.162"": 1,
    ""128.1.43.27"": 176
  },
  ""asn"": {
    ""AS14061"": 1434,
    ""AS4134"": 3,
    ""AS208312"": 10,
    ""AS59425"": 6,
    ""AS204428"": 3,
    ""AS396982"": 12,
    ""AS48721"": 4,
    ""AS398722"": 1,
    ""AS7552"": 3,
    ""AS208091"": 4,
    ""AS201814"": 2,
    ""AS7713"": 1,
    ""AS140810"": 4,
    ""AS24691"": 2,
    ""AS197414"": 2,
    ""AS398324"": 2,
    ""AS24757"": 1,
    ""AS38365"": 6,
    ""AS208046"": 6,
    ""AS209588"": 3,
    ""AS135377"": 177,
    ""AS135905"": 19,
    ""AS16276"": 1,
    ""AS267784"": 4,
    ""AS45899"": 1,
    ""AS2697"": 1,
    ""AS56046"": 1
  },
  ""isp"": {
    ""DigitalOcean, LLC"": 1434,
    ""Chinanet"": 3,
    ""Red Byte LLC"": 10,
    ""Horizon LLC"": 6,
    ""SS-Net"": 3,
    ""Google LLC"": 12,
    ""Flyservers S.A."": 11,
    ""Censys, Inc."": 2,
    ""Viettel Corporation"": 3,
    ""Xhost Internet Solutions LP"": 6,
    ""MEVSPACE sp. z o.o."": 2,
    ""PT. TELKOM INDONESIA"": 1,
    ""MEGACORE"": 4,
    ""TogoTelecom"": 2,
    ""Ethiotelecom"": 1,
    ""Beijing Baidu Netcom Science and Technology Co., Ltd."": 6,
    ""ColocationX Ltd."": 6,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""Vietnam Posts and Telecommunications Group"": 19,
    ""OVH Hosting"": 1,
    ""Censys"": 1,
    ""VietNam Post and Telecom Corporation"": 1,
    ""ERNET India"": 1,
    ""China Mobile Communications Corporation"": 1,
    ""Zenlayer Inc"": 176
  },
  ""org"": {
    ""DigitalOcean, LLC"": 1434,
    ""Chinanet JS"": 3,
    ""Chang Way Technologies Co. Limited"": 10,
    ""Horizon LLC"": 6,
    ""4Media Ltd"": 3,
    ""Palo Alto Networks, Inc"": 12,
    ""Flyservers S.A"": 4,
    ""Censys, Inc."": 2,
    ""Unknown"": 7,
    ""Xhost Internet Solutions"": 4,
    ""MEVSPACE sp. z o.o"": 2,
    ""Megacore Technology Company Limited"": 4,
    ""Xhostis"": 2,
    ""Censys, Inc"": 1,
    ""Beijing Baidu Netcom Science and Technology Co., Ltd."": 6,
    ""Makut Investments"": 3,
    ""ColocationX Ltd"": 3,
    ""Alviva Holding Limited"": 3,
    ""Ucloud Information Technology (hk) Limited"": 1,
    ""VNPT"": 19,
    ""SAS, ONYPHE"": 1,
    ""UAB Host Baltic"": 4,
    ""Vietnam Posts and Telecommunications Group"": 1,
    ""ERNET India"": 1,
    ""China Mobile Communications Corporation"": 1,
    ""UCLOUD"": 176
  },
  ""regionName"": {
    ""South West"": 1431,
    ""Jiangsu"": 4,
    ""Lesser Poland"": 10,
    ""Moscow"": 182,
    ""Sliven"": 3,
    ""California"": 12,
    ""Kaunas"": 4,
    ""Central and Western District"": 1,
    ""L\u00e2m \u0110\u1ed3ng Province"": 3,
    ""North Holland"": 9,
    ""Mazovia"": 2,
    ""East Kalimantan"": 1,
    ""Hanoi"": 24,
    ""Maritime"": 2,
    ""Hesse"": 6,
    ""Michigan"": 2,
    ""Addis Ababa"": 1,
    ""Beijing"": 6,
    ""Virginia"": 3,
    ""Bangkok"": 1,
    ""Quebec"": 1,
    ""Vilnius"": 4,
    ""National Capital Territory of Delhi"": 1
  },
  ""country"": {
    ""Singapore"": 1431,
    ""China"": 10,
    ""Poland"": 12,
    ""Russia"": 182,
    ""Bulgaria"": 3,
    ""United States"": 17,
    ""Lithuania"": 8,
    ""Hong Kong"": 1,
    ""Vietnam"": 27,
    ""The Netherlands"": 9,
    ""Indonesia"": 1,
    ""Togo"": 2,
    ""Germany"": 6,
    ""Ethiopia"": 1,
    ""Thailand"": 1,
    ""Canada"": 1,
    ""India"": 1
  },
  ""account"": {
    ""hello"": 1475,
    ""Administr"": 16,
    ""Test"": 14,
    ""qhyMCZkNs"": 1,
    ""ocdcRH"": 1,
    ""WCcilM"": 1,
    ""(empty)"": 5,
    ""SfEnehAbI"": 1,
    ""urkbgD"": 1,
    ""AxwAdG"": 1,
    ""Domain"": 13,
    ""Administrator"": 2,
    ""hEZBygWNm"": 1,
    ""yMCqXY"": 1,
    ""UlkBmK"": 1,
    ""rhqokGzIW"": 1,
    ""MVLJLM"": 1,
    ""mLZXbr"": 1,
    ""1948287240"": 176
  },
  ""keyboard"": {
    ""Unknown"": 1713
  },
  ""client_build"": {
    ""Unknown"": 1713
  },
  ""client_name"": {
    ""Unknown"": 1713
  },
  ""ip_type"": {
    ""hosting & proxy"": 1431,
    ""Unknown"": 79,
    ""hosting"": 199,
    ""mobile"": 4
  }
}"
KHmELmsa,emacs emojis,mark-naylor-1701,Lisp,Friday 29th of March 2024 07:00:20 PM CDT,"(defvar thumb-up-char ""👍"")
(defvar thumb-down-char ""👎"")
(defvar rolling-on-floor-char ""🤣"")
(defvar angry-face-char ""😠"")
(defvar wink-tongue-char ""😜"")
(defvar face-palm-char ""🤦"")


(defun insert-strs (str count)
  ""Insert count strings, separated by a space.""
  (insert (s-join "" "" (-repeat count str))))

(defun face-palm (n)
  ""Generate n face palm Unicode characters.""
  (interactive ""p"")
  (insert-strs face-palm-char n))

(defun thumbs-up (n)
  ""Generate n thumbs-up Unicode characters.""
  (interactive ""p"")
  (insert-strs thumb-up-char n))

(defun thumbs-down (n)
  ""Generate n thumbs-down Unicode characters.""
  (interactive ""p"")
  (insert-strs thumb-down-char n))

(defun face-palm (n)
  ""Generate n face palm Unicode characters.""
  (interactive ""p"")
  (insert-strs face-palm-char n))

(defun wink-tongue (n)
  ""Generate n winking face w/ tongue Unicode characters.""
  (interactive ""p"")
  (insert-strs wink-tongue-char n))

(defun rofl (n)
  ""Generate n rolling on the floor laughing Unicode characters.""
  (interactive ""p"")
  (insert-strs rolling-on-floor-char n))

(defun angry-face (n)
  ""Generate n rolling on the floor laughing Unicode characters.""
  (interactive ""p"")
  (insert-strs angry-face-char n))"
JjXy22Bw,sync_Uno_R4_RTC_to_NTP,macca-nz,Arduino,Friday 29th of March 2024 06:59:41 PM CDT,"//For Uno R4 WiFi
//Compiles with a few lib conversion warnings
//In ""WiFiUDP.h"" change ""#define RX_BUFFER_DIM 1461"" to ""#define RX_BUFFER_DIM 1024"" fixes one warning
//Untested


#include ""RTC.h""
#include <NTPClient.h>
#include <WiFiS3.h>
#include <WiFiUdp.h>

//Enter Your WiFi details
char ssid[] = ""YOUR_SSID"";
char password[] = ""YOUR_PASSWORD"";

uint8_t lastSecond;

int wifiStatus = WL_IDLE_STATUS;
WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, ""oceania.pool.ntp.org"", 0, 66666); //update every hour and a bit

void printWifiStatus() {
  // print the SSID of the network you're attached to:
  Serial.print(""SSID: "");
  Serial.println(WiFi.SSID());

  // print your board's IP address:
  IPAddress ip = WiFi.localIP();
  Serial.print(""IP Address: "");
  Serial.println(ip);

  // print the received signal strength:
  long rssi = WiFi.RSSI();
  Serial.print(""signal strength (RSSI):"");
  Serial.print(rssi);
  Serial.println("" dBm"");
  return;
}

void connectToWiFi(){
  // check for the WiFi module:
  if (WiFi.status() == WL_NO_MODULE) {
    Serial.println(""Communication with WiFi module failed!"");
    // don't continue
    while (true);
  }

  String fv = WiFi.firmwareVersion();
  if (fv < WIFI_FIRMWARE_LATEST_VERSION) {
    Serial.println(""Please upgrade the firmware"");
  }

  // attempt to connect to WiFi network:
  while (wifiStatus != WL_CONNECTED) {
    Serial.print(""Attempting to connect to SSID: "");
    Serial.println(ssid);
    // Connect to WPA/WPA2 network. Change this line if using open or WEP network:
    wifiStatus = WiFi.begin(ssid, password);

    // wait 10 seconds for connection:
    delay(10000);
  }

  Serial.println(""Connected to WiFi"");
  printWifiStatus();
  return;
}

void setup() {
  Serial.begin(115200);
  connectToWiFi();
  RTC.begin();
  Serial.println(""\nStarting connection to server..."");
  timeClient.begin();
  timeClient.update();

  // Get the current date and time from an NTP server and convert
  // it to UTC +2 by passing the time zone offset in hours.
  // You may change the time zone offset to your local one.
  auto timeZoneOffsetHours = 10;
  auto unixTime = timeClient.getEpochTime() + (timeZoneOffsetHours * 3600);
  Serial.print(""Unix time = "");
  Serial.println(unixTime);
  RTCTime timeToSet = RTCTime(unixTime);
  RTC.setTime(timeToSet);

  // Retrieve the date and time from the RTC and print them
  RTCTime currentTime;
  RTC.getTime(currentTime); 
  Serial.println(""The RTC was just set to: "" + String(currentTime));
  lastSecond = currentTime.getSeconds();
}

void myClock(void){
  RTCTime currentTime;
  RTC.getTime(currentTime);

  if(currentTime.getSeconds() != lastSecond){

    // Print out date (DD/MM//YYYY)
    Serial.print(currentTime.getDayOfMonth());
    Serial.print(""/"");
    Serial.print(Month2int(currentTime.getMonth()));
    Serial.print(""/"");
    Serial.print(currentTime.getYear());
    Serial.print("" - "");

    // Print time (HH/MM/SS)
    Serial.print(currentTime.getHour());
    Serial.print("":"");
    Serial.print(currentTime.getMinutes());
    Serial.print("":"");
    Serial.println(currentTime.getSeconds());

    //Update one second delay
    lastSecond = currentTime.getSeconds();
  }
}

void loop() {
  myClock();
}"
JEFn5TLp,autostart hitCrank,Kenanja,Lua,Friday 29th of March 2024 06:57:51 PM CDT,"if fs.exists(""hitCrank"") then
    fs.delete(""hitCrank"")
end

shell.run(""pastebin"", ""get"", ""WvFi9nJE"", ""hitCrank"")

-- Use multishell to open a new tab and switch to it
local tabID = multishell.launch({shell = shell, multishell = multishell}, ""hitCrank"")
multishell.setFocus(tabID)"
8UZKRBRk,Untitled,morington,Python,Friday 29th of March 2024 06:52:28 PM CDT,"import asyncio
import time
from typing import Any, Coroutine, Callable, TypeAlias

T: TypeAlias = Callable[..., Coroutine[Any, Any, Any]]


class Preprocessor:
    def __init__(self):
        self.stopping_point_for_all_decorators = True

    @staticmethod
    def launch_frequency(interval_seconds: int) -> Any:
        def decorator(func: Callable[..., Any]) -> Callable[..., Any]:
            def wrapper(*args, **kwargs) -> Any:
                self = args[0]
                while self.stopping_point_for_all_decorators:
                    func(*args, **kwargs)
                    time.sleep(interval_seconds)

            return wrapper
        return decorator

    @staticmethod
    def async_launch_frequency(interval_seconds: int) -> Callable[[T], T]:
        def decorator(func: T) -> T:
            async def wrapper(*args: Any, **kwargs: Any) -> Any:
                self = args[0]
                while self.stopping_point_for_all_decorators:
                    await func(*args, **kwargs)
                    await asyncio.sleep(interval_seconds)

            return wrapper
        return decorator

    @async_launch_frequency(1)
    def test(self) -> None:
        print('Test')"
rTzfjcJb,Untitled,AdamMathieson,Lua,Friday 29th of March 2024 06:24:06 PM CDT,"function renderHeart(angle)
    local scale = 10

    for y = 2 * scale, -scale, -1 do
        local line = """"
        for x = -6 * scale, 7 * scale do
            if ((x / scale) ^ 2 + (y / scale) ^ 2 - 1) ^ 3 - (x / scale) ^ 2 * (y / scale) ^ 3 <= 0 then
                line = line .. ""*""
            else
                line = line .. "" ""
            end
        end
        print(line)
    end
end

function main()
    local angle = 0
    while true do
        renderHeart(angle)
        angle = angle + 2
        os.sleep(0.1)
    end
end

main()
"
Y9znCkgP,netradiant debugging iqm picomodel on macOS,illwieckz,Bash,Friday 29th of March 2024 05:47:15 PM CDT,"# install dependencies
brew install cmake glib gobject-introspection libffi gtk+ gtk+3 gtk-doc pkgconfig minizip webp coreutils gnu-sed wget sassc
brew link --force gettext

# get sources
git clone --recursive https://gitlab.com/xonotic/netradiant.git
cd netradiant

# configure build (only fetch unvanquished gamepack, force picomodel IQM library)
cmake -G ""Unix Makefiles"" -S. -Bbuild -DCMAKE_BUILD_TYPE=Release -DGAMEPACKS_LICENSE_LIST='none' -DGAMEPACKS_NAME_LIST='Unvanquished' -DRADIANT_IQM_PLUGIN='picomodel'

# build builtins
cmake --build build -- -j$(nproc) builtins

# rediscover builtins
cmake -G ""Unix Makefiles"" -S. -Bbuild

# build
cmake --build build -- -j$(nproc)

# install
cmake --install build

# run NetRadiant in LLDB
install/NetRadiant.app/Contents/MacOS/NetRadiant --debug
"
L1n4CUJG,робот для спавна душ,nikita2007558,Lua,Friday 29th of March 2024 05:10:11 PM CDT,"local com = require(""component"")
local robot = require(""robot"")
local event = require(""event"")
local gpu = require(""component"").gpu

local active_slot = 1
local size = robot.inventorySize()
local redstone = com.redstone
local w, h = 50, 16

-- Функция для рисования интерфейса
function drawGUI()
    gpu.fill(1, 1, w, h, "" "")
   
    gpu.set(1, 1, ""┌"" .. string.rep(""─"", w - 2) .. ""┐"")
    gpu.set(1, h, ""└"" .. string.rep(""─"", w - 2) .. ""┘"")
    for i = 2, h - 1 do
      gpu.set(1, i, ""│"")
      gpu.set(w, i, ""│"")
    end
   
    gpu.set(3, 2, ""Робот "" .. robot.name() .. "" запущен!"")
    gpu.set(3, 4, ""Для спауна нужно подать сигнал красного камня"")
end

-- Рисуем интерфейс
drawGUI()

-- Основной цикл
while true do
  pcall(robot.place, 0, true)
  if  robot.count(active_slot) == 0 and robot.select(active_slot) ~= size then
      active_slot = active_slot + 1
  end
  if  robot.select(active_slot) == size and robot.count(active_slot) == 0 then
      active_slot = 1 
  end
  os.sleep(0)
end"
wNf1B2yW,Batch Poweroff,lincruste,Winbatch,Friday 29th of March 2024 05:04:02 PM CDT,"@echo off
net file 1>NUL 2>NUL
if not '%errorlevel%' == '0' (
    powershell Start-Process -FilePath ""%0"" -ArgumentList ""%cd%"" -verb runas >NUL 2>&1
    exit /b
)
cd /d %1
chcp 65001 > nul 2>&1
set /p minutes=""Veuillez saisir le nombre de minutes avant l'extinction forcée et automatique: ""
set /a sec=%minutes%*60
echo ""L'ordinateur s'éteindra dans %minutes% minutes (%sec% secondes).""
echo ""Appuyez sur Ctrl + C maintenant pour annuler, n'importe quelle autre touche pour valider.""
pause
shutdown /s /t %sec%"
WvFi9nJE,hitCrank,Kenanja,Lua,Friday 29th of March 2024 04:56:36 PM CDT,"-- Function to check and refuel if necessary
local function checkFuel()
    if turtle.getFuelLevel() < 10 then
        print(""Refueling..."")
        turtle.select(1) -- Assuming fuel is in slot 1
        turtle.refuel(1)
    end
end

local p = peripheral.wrap(""left"")

while true do
    -- Check if there's a block in front of the turtle (the crank)
    if turtle.detect() then
        print(""Crank detected. Attempting to hit..."")
        turtle.select(16)
        p.useOnBlock()
        print(""Hit the crank."")
    else
        print(""Crank not detected. Please check the turtle's orientation."")
        break
    end

    -- Introduce a delay between hits to simulate a more realistic interaction with the crank
    os.sleep(0.5)

    -- Check and refuel if necessary
    checkFuel()
end
"
LRdzpGJH,microtik_internet_autologin_from_chrome,shinder,Python,Friday 29th of March 2024 04:48:38 PM CDT,"from selenium import webdriver
import time
from selenium.webdriver.common.by import By
#Note the following script doesn't include tokens , if required please add your own.
#This python script is tested on chrome browser Version 123.0.6312.86 (Official Build) (64-bit) Wins and uses chrome driver from official drive https://storage.googleapis.com/chrome-for-testing-public/123.0.6312.86/win64/chromedriver-win64.zip,
#add chromedriver to path
#requires selenium library.
#logout other login tabs of the same site first otherwise it will rise errors
#created by Ti Kyi Khant (Kaung Thant Hein)
driver = webdriver.Chrome()

#Enter your credentials Here!

URL = """" #enter your URL here
username = """"#enter your username
password = """"#enter your password , this will take as string format which can further manipulated to html format encoding
def login(username, password):
    driver.get(URL)
    time.sleep(2)  # Wait for the page to load

    # Find username and password input fields and submit button
    username_input = driver.find_element(By.NAME, ""username"")
    password_input = driver.find_element(By.NAME, ""password"")
    submit_button  =  driver.find_element(By.XPATH, ""//input[@type='submit']"")

    # Enter login credentials and submit the form
    username_input.send_keys(username)
    password_input.send_keys(password)
    submit_button.click()

    time.sleep(5)

# Call the login function
login(username, password)

# to keep the session alive
while True:
    current_url = driver.current_url
    if current_url != URL:
        print(""Session is active"")
    else:
        print(""Session expired. Re-login required."")
        login(username, password)  # Re-login if session expired

    time.sleep(300)  # Check session status every 5 minutes"
T1mQWdg7,gemma_download,mhdew,Python,Friday 29th of March 2024 04:35:00 PM CDT,"from transformers import AutoTokenizer, AutoModelForCausalLM
import torch

tokenizer = AutoTokenizer.from_pretrained(""google/gemma-2b-it"", token=""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"")
model = AutoModelForCausalLM.from_pretrained(""google/gemma-2b-it"",
                                             token=""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"",
                                             torch_dtype=torch.bfloat16)

tokenizer.save_pretrained('gemma_2d_it')
model.save_pretrained('gemma_2d_it')"
HHwNLs39,aBrickOS installer,hohserg,Lua,Friday 29th of March 2024 04:00:39 PM CDT,"os.execute(""wget https://raw.githubusercontent.com/hohserg1/OpenComputersPrograms/master/aBrickOS/boot_compressed.lua /tmp/aBrickOS.lua"")
os.execute(""flash -q /tmp/aBrickOS.lua aBrickOS"")
"
GSZRP9xC,woodfarm2,pichudagamer,Lua,Friday 29th of March 2024 03:48:49 PM CDT,"function twosidetreecheck()
    turtle.turnLeft()
    turtle.digUp()
	turtle.up()
	treeL = turtle.detect()
    if treeL == true then
        treedig()
		turtle.select(1) --select slot 1 (sapling)
		turtle.placeDown() -- plant sapling
        turtle.turnRight()
        turtle.turnRight()
        turtle.dig()
		turtle.forward()
        treeR = turtle.detect()
        if treeR == true then 
            treedig()
			turtle.select(1)--select slot 1 (sapling)
			turtle.placeDown() -- plant sapling
            turtle.turnLeft()
            turtle.turnLeft()
			turtle.dig()
            turtle.forward()
            turtle.turnRight()
			turtle.digDown()
			turtle.down()
        else
            turtle.turnLeft()
			turtle.digDown()
			turtle.down()
        end
    else  
        turtle.turnRight()
        turtle.turnRight()
        treeR = turtle.detect()
        if treeR == true then
            treedig()
			turtle.select(1)--select slot 1 (sapling)
			turtle.placeDown() -- plant sapling
            turtle.turnLeft()
            turtle.turnLeft()
            turtle.forward()
            turtle.turnRight()
			turtle.digDown()
			turtle.down()
        else
            turtle.turnLeft()
			turtle.digDown()
			turtle.down()
        end
    end
end

function treedig()
    turtle.dig()
	turtle.forward()
    turtle.digDown()
    
	blockup = turtle.detectUp()
	local i = 0 
	while blockup == true do
		layerdig()
		turtle.digUp()
		turtle.up()
		blockup = turtle.detectUp()
		i = i + 1
	end
	if i > 0 then 
		for j = 0 , i-1 do 
			turtle.digDown()
			turtle.down()
		end
	end
end

function layerdig()
	turtle.dig()
	turtle.turnLeft()
	turtle.dig()
	turtle.turnLeft()
	turtle.dig()
	turtle.turnLeft()
	turtle.dig()
	turtle.turnLeft()
end

function twosideplant()
	turtle.turnLeft()
	turtle.select(1)--select slot 1 (sapling)
	turtle.place()
	turtle.turnRight()
	turtle.turnRight()
	turtle.select(1)--select slot 1 (sapling)
	turtle.place()
	turtle.turnLeft()
end

function harvest()
	print(""Harvest Mod"")
	turtle.turnRight() --0,0 facing right
	turtle.dig()
	turtle.forward() -- 1, 0 facing right
	turtle.turnLeft() -- 1, 0 facing up
	turtle.dig()
	turtle.forward() -- 1, 1 facing up
	twosidetreecheck()
	for j=0, 6 do
		turtle.dig()
		turtle.forward() -- goes untill 1, 15
		turtle.dig()
		turtle.forward() -- goes untill 1, 15
		twosidetreecheck()
	end
	turtle.turnRight() --1,15 facing right
	turtle.turnRight() --1,15 facing down
	turtle.dig()
	turtle.forward() -- 1, 14 facing down
	turtle.turnLeft() -- 1, 14 facing right
	
	turtle.dig()
	turtle.forward() -- 2, 14 facing down
	turtle.dig()
	turtle.forward() -- 3, 14 facing down
	turtle.dig()
	turtle.forward() -- 4, 14 facing down
	turtle.dig()
	turtle.forward() -- 5, 14 facing down
	turtle.turnLeft() -- 5, 14 facing up
	turtle.dig()
	turtle.forward() -- 5, 15 facing up
	twosidetreecheck()
	turtle.turnLeft() -- 5, 15 facing left
	turtle.turnLeft() -- 5, 15 facing down
	
	for j=0, 6 do
		turtle.dig()
		turtle.forward() -- goes untill 5, 1
		turtle.dig()
		turtle.forward() -- goes untill 5, 1
		twosidetreecheck()
	end
	turtle.dig()
	turtle.forward() -- goes untill 5, 0 facing down 
	turtle.turnLeft() -- 5, 0 facing right
	turtle.dig()
	turtle.forward() -- goes untill 6, 0
	turtle.dig()
	turtle.forward() -- goes untill 7, 0
	turtle.dig()
	turtle.forward() -- goes untill 8, 0, repreat 0 0 to 5 0(down facing) again to reach 13 0 thn return 
	
	
	
	turtle.dig()
	turtle.forward() -- 9, 0 facing right
	turtle.turnLeft() -- 9, 0 facing up
	turtle.dig()
	turtle.forward() -- 9, 1 facing up
	twosidetreecheck()
	for j=0, 6 do
		turtle.dig()
		turtle.forward() -- goes untill 9, 15
		turtle.dig()
		turtle.forward() -- goes untill 9, 15
		twosidetreecheck()
	end
	turtle.turnRight() --9,15 facing right
	turtle.turnRight() --9,15 facing down
	turtle.dig()
	turtle.forward() -- 9, 14 facing down
	turtle.turnLeft() -- 9, 14 facing right
	
	turtle.dig()
	turtle.forward() -- 10, 14 facing down
	turtle.dig()
	turtle.forward() -- 11, 14 facing down
	turtle.dig()
	turtle.forward() -- 12, 14 facing down
	turtle.dig()
	turtle.forward() -- 13, 14 facing down
	turtle.turnLeft() -- 13, 14 facing up
	turtle.dig()
	turtle.forward() -- 13, 15 facing up
	twosidetreecheck()
	turtle.turnLeft() -- 13, 15 facing left
	turtle.turnLeft() -- 13, 15 facing down
	
	for j=0, 6 do
		turtle.dig()
		turtle.forward() -- goes untill 13, 1
		turtle.dig()
		turtle.forward() -- goes untill 13, 1
		twosidetreecheck()
	end
	turtle.dig()
	turtle.forward() -- goes untill 13, 0 facing down 
	turtle.turnRight() --13,0 facing left (destination)
	for j=0, 12 do
		turtle.dig()
		turtle.forward() -- goes untill 0, 0
	end
	turtle.turnRight() --0,0 facing up (initial state)
	
	for j=3, 16 do
		turtle.select(j)
		turtle.dropDown() 
	end
end

function setup()
	print(""Setup Plantation"")
	turtle.turnRight() --0,0 facing right
	turtle.forward() -- 1, 0 facing right
	turtle.turnLeft() -- 1, 0 facing up
	turtle.forward() -- 1, 1 facing up
	twosideplant()
	for j=0, 6 do
		turtle.forward() -- goes untill 1, 15
		turtle.forward() -- goes untill 1, 15
		twosideplant()
	end 
	turtle.turnRight() --1, 15 facing right
	turtle.turnRight() --1, 15 facing down
	turtle.forward() --1, 14 facing down
	turtle.turnLeft() --1, 14 facing right
	
	turtle.forward() -- goes untill 2, 14
	turtle.forward() -- goes untill 3, 14
	turtle.forward() -- goes untill 4, 14
	turtle.forward() -- goes untill 5, 14
	turtle.turnLeft() --5, 14 facing up
	turtle.forward() -- goes untill 5, 15
	twosideplant()
	turtle.turnRight() --5, 15 facing right
	turtle.turnRight() --5, 15 facing down
	
	for j=0, 6 do
		turtle.forward() -- goes untill 5, 1
		turtle.forward() -- goes untill 5, 1
		twosideplant()
	end 
	turtle.forward() -- goes untill 5, 0 facing down
	turtle.turnLeft() --5, 0 facing right
	turtle.forward() -- goes untill 6, 0 facing right
	turtle.forward() -- goes untill 7, 0 facing right
	turtle.forward() -- goes untill 8, 0 facing right repeat 00 to 50 again 
	
	turtle.forward() -- 9, 0 facing right
	turtle.turnLeft() -- 9, 0 facing up
	turtle.forward() -- 9, 1 facing up
	twosideplant()
	for j=0, 6 do
		turtle.forward() -- goes untill 9, 15
		turtle.forward() -- goes untill 9, 15
		twosideplant()
	end 
	turtle.turnRight() --9, 15 facing right
	turtle.turnRight() --9, 15 facing down
	turtle.forward() --9, 14 facing down
	turtle.turnLeft() --9, 14 facing right
	
	turtle.forward() -- goes untill 10, 14
	turtle.forward() -- goes untill 11, 14
	turtle.forward() -- goes untill 12, 14
	turtle.forward() -- goes untill 13, 14
	turtle.turnLeft() --13, 14 facing up
	turtle.forward() -- goes untill 13, 15
	twosideplant()
	turtle.turnRight() --13, 15 facing right
	turtle.turnRight() --13, 15 facing down
	
	for j=0, 6 do
		turtle.forward() -- goes untill 13, 1
		turtle.forward() -- goes untill 13, 1
		twosideplant()
	end 
	turtle.forward() -- goes untill 13, 0 facing down
	turtle.turnRight() --13, 0 facing left (back route)
	
	for j=0, 12 do
		turtle.forward() -- goes untill 0, 0
	end 
	
	turtle.turnRight() --00, 0 facing up (default position)
end

function normal()
	while true do
		fuel()
		harvest()
		--deposit()
	end
end

function fuel()
Flevel = turtle.getFuelLevel()
	if Flevel < 3000 then
		turtle.turnLeft()
		turtle.forward()
		turtle.suckUp(65)
		
		turtle.select(2)
		turtle.refuel(64)
		turtle.select(1)
		
		turtle.turnLeft()
		turtle.turnLeft()
		turtle.forward()
		turtle.turnLeft()
	end
end

print(""Type in 1 for setup, 0 for normal operations"")
mod = read()

if mod == ""1"" then
	setup()
else
	normal()
end


	"
yMV5yg1b,P1900E,fooker,C++,Friday 29th of March 2024 03:23:51 PM CDT,"#include <bits/stdc++.h>
using namespace std;
#define ll long long

const ll nmax = 1e9+7;
const ll nmax2 = 998244353;

#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp> 
#include <ext/pb_ds/detail/standard_policies.hpp>
using namespace __gnu_pbds;
typedef tree<ll, null_type, less<ll>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
typedef tree<std::pair<ll, ll>, null_type, less<std::pair<ll,ll>>, rb_tree_tag, tree_order_statistics_node_update> ordered_set_pair;

class DSU {
public:
    std::vector<ll> f, siz;
    DSU(ll n) : f(n + 1), siz(n + 1, 1) {
        std::iota(f.begin() + 1, f.end(), 1);
    }
    ll leader(ll x) {
        while (x != f[x]) x = f[x] = f[f[x]];
        return x;
    }
    bool same(ll x, ll y) {
        return leader(x) == leader(y);
    }
    void merge(ll x, ll y) {
        x = leader(x);
        y = leader(y);
        if (x == y) return;
        siz[x] += siz[y];
        f[y] = x;
    }
    ll size(ll x) {
        return siz[leader(x)];
    }
    void print(ll n){
        std::cout << ""first nodes => "";
        for (ll i = 1; i <= n; i++) std::cout << i << "" \n""[i == n];
        std::cout << ""leader nodes => "";
        for (ll i = 1; i <= n; i++) std::cout << leader(i) << "" \n""[i == n];
        std::cout << ""size components => "";
        for (ll i = 1; i <= n; i++) std::cout << siz[i] << "" \n""[i == n];
    }
};

template<class T>
constexpr T power(T a, ll b){
    T res {1};
    for (; b; b /= 2, a *= a){
        if (b % 2){
            res *= a;
        }
    }
    return res;
}

constexpr ll mul(ll a, ll b, ll p) {
    ll res = a * b - (ll)(1.L * a * b / p) * p;
    res %= p;
    if (res < 0) {
        res += p;
    }
    return res;
}

template<ll P>
struct modint {
    ll x;
    constexpr modint() : x {0} {} 
    constexpr modint(ll y) : x {norm(y % getmod())} {} 

    static ll mod;
    constexpr static ll getmod() {
        if (P > 0) {
            return P;
        } else {
            return mod;
        }
    }
    constexpr static void setmod(ll newmod) {
        mod = newmod;
    }
    constexpr ll norm(ll x) const {
        if (x < 0) {
            x += getmod();
        }
        if (x >= getmod()) {
            x -= getmod();
        }
        return x;
    }
    constexpr ll val() const {
        return x;
    }

    constexpr modint operator-() const {
        modint res;
        res.x = norm(getmod() - x);
        return res;
    }
    constexpr modint inv() const {
        return power(*this, getmod() - 2);
    }
    constexpr modint &operator*=(modint rhs) & {
        if (getmod() < (1ULL << 31)) {
            x = x * rhs.x % int(getmod());
        } else {
            x = mul(x, rhs.x, getmod());
        }
        return *this;
    }
    constexpr modint &operator+=(modint rhs) & {
        x = norm(x + rhs.x);
        return *this;
    }
    constexpr modint &operator-=(modint rhs) & {
        x = norm(x - rhs.x);
        return *this;
    }
    constexpr modint &operator/=(modint rhs) & {
        return *this *= rhs.inv();
    }
    friend constexpr modint operator*(modint lhs, modint rhs) {
        modint res = lhs;
        res *= rhs;
        return res;
    }
    friend constexpr modint operator+(modint lhs, modint rhs) {
        modint res = lhs;
        res += rhs;
        return res;
    }
    friend constexpr modint operator-(modint lhs, modint rhs) {
        modint res = lhs;
        res -= rhs;
        return res;
    }
    friend constexpr modint operator/(modint lhs, modint rhs) {
        modint res = lhs;
        res /= rhs;
        return res;
    }
    friend constexpr std::istream &operator>>(std::istream &is, modint &a) {
        ll v;
        is >> v;
        a = modint(v);
        return is;
    }
    friend constexpr std::ostream &operator<<(std::ostream &os, const modint &a) {
        return os << a.val();
    }
    friend constexpr bool operator==(modint lhs, modint rhs ){
        return lhs.val() == rhs.val();
    }
    friend constexpr bool operator!=(modint lhs, modint rhs) {
        return lhs.val() != rhs.val();
    }
};

template<>
ll modint<0>::mod = 1e9;
using mm = modint<0>;

void solve() {
    ll n, m;
    std::cin >> n >> m;

    ll a[n + 1];
    for (ll i = 1; i <= n; i++) std::cin >> a[i];

    std::vector<ll> adj[n + 1];
    std::vector<ll> adjr[n + 1];
    for (ll i = 1, x, y; i <= m; i++) {
        std::cin >> x >> y;
        adj[x].push_back(y);
        adjr[y].push_back(x);
    }

    bool vis[n + 1];
    for (ll i = 1; i <= n; i++) vis[i] = false;
    
    std::vector<ll> components(n + 1);
    std::vector<ll> topsort;

    std::function<void(ll, ll)> dfs1 = [&] (ll u, ll p) {
        vis[u] = true;
        for (auto v: adj[u]) {
            if (v == p) continue;
            if (vis[v]) continue;
            dfs1(v, u);
        }
        topsort.push_back(u);
    };
    
    for (ll i = 1; i <= n; i++) {
        if (!vis[i]) {
            dfs1(i, 0);
        }
    }

    std::reverse(topsort.begin(), topsort.end());

    for (ll i = 1; i <= n; i++) vis[i] = false;

    ll id = 1;

    std::function<void(ll, ll)> dfs2 = [&] (ll u, ll p) {
        vis[u] = true;

        for (auto v: adjr[u]) {
            if (v == p) continue;
            if (vis[v]) continue;

            dfs2(v, u);
        }

        components[u] = id;
    };

    for (auto u: topsort) {
        if (!vis[u]) {
            dfs2(u, 0);
            id++;
        }
    }

    std::vector<ll> new_graph[id];
    std::vector<ll> dist(id);
    std::vector<ll> cost(id);
    std::vector<ll> sz(id);

    for (ll i = 1; i <= n; i++) {
        cost[components[i]] += a[i];
        sz[components[i]]++;
    }

    std::vector<ll> dp(id, LLONG_MAX);
    std::queue<ll> q;

    std::vector<ll> indegree(id);

    for (ll i = 1; i <= n; i++) {
        for (auto u: adj[i]) {
            if (components[u] != components[i]) {
                new_graph[components[i]].push_back(components[u]);
                indegree[components[u]]++;
            }
        }
    }

    for (ll i = 1; i < id; i++) {
        if (indegree[i]) {
            q.push(i);
            dist[i] = sz[i];
            dp[i] = cost[i];
        }
    }

    ll c = 0;

    while (q.size()) {
        auto s = q.front();
        q.pop();

        c++;
        for (auto u: new_graph[s]) {

            if (dist[u] < dist[s] + sz[s]) {
                dist[u] = dist[s] + sz[s];
                dp[u] = std::min(dp[u], dp[s] + cost[u]);
            }

            indegree[u]--;
            if (indegree[u] == 0) {
                q.push(u);
            }
        }
    }

    ll ans1 = 0;
    for (ll i = 1; i < id; i++) {
        ans1 = std::max(ans1, dist[i]);
    }

    ll ans2 = LLONG_MAX;
    for (ll i = 1; i < id; i++) {
        if (dist[i] == ans1) {
            ans2 = std::min(ans2, dp[i]);
        }
    }

    std::cout << ans1 << ' ' << ans2 << '\n';
}

int main(){
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(0);
    std::cout.tie(0);

    int t;
    std::cin >> t;
    while(t--) {
        solve();
    }
}
"
X1H33J79,globals.cpp as of 2024-03-29,Kitomas,C++,Friday 29th of March 2024 03:07:19 PM CDT,"#include <globals.hpp>

#include <stdio.h>
#include <stdlib.h>

using namespace kit;





TimerSimple* gl_frameTimer = nullptr;
SoundEngine* gl_snd        = nullptr;
Window*      gl_win        = nullptr;
BitmapFont*  gl_text       = nullptr;
FStr*       _gl_text_fstr  = nullptr;



Bitmap* gl_spritesheetPlayer = nullptr;





void handleInit(){
  gl_frameTimer = new TimerSimple;
  gl_frameTimer->setTimer(0.101);


  srand((u32)time::getTicks());


  gl_snd = new SoundEngine(96);
  gl_snd->streamStart();



  gl_win = new Window(WINDOW_TITLE, 1280, 720,
                      WINFLAG_RESIZABLE | WINFLAG_HIDDEN,
                      WINPOS_CENTERED, WINPOS_CENTERED,
                      CANVSIZ_X, CANVSIZ_Y, false);



  gl_text = new BitmapFont(""dat/img/_font8x8.qoi"", gl_win);

  _gl_text_fstr = new FStr(4096);



  gl_spritesheetPlayer = new Bitmap(""dat/img/spritesheet_player.qoi"", gl_win);



  gl_frameTimer->wait(2000);

  gl_win->setVisibility(true);
  gl_win->setFocus(true);
}





void handleQuit(){
  if(gl_frameTimer) gl_frameTimer->setTimer(0.015);

  if(gl_snd){
    gl_snd->musicStop();
    gl_snd->sfxStopAll();
  }

  delete _gl_text_fstr;
  delete gl_text;
  delete gl_win;


  delete gl_spritesheetPlayer;


  if(gl_frameTimer) gl_frameTimer->wait(2000);

  delete gl_frameTimer;
}





extern int gameMain(int argc, char** argv);



int main(int argc, char** argv){ try {
  handleInit();

  int result = gameMain(argc, argv);

  handleQuit();

  return result;


} catch(const char* errorText){
#ifdef _DEBUG
  printf(""FATAL EXCEPTION OCCURRED!: \""%s\""\n"", errorText);
#else
  showMessageBox(errorText, ""FATAL EXCEPTION OCCURRED! COMPLAIN TO THE DEV! (lol)"", MSGBOX_ICN_ERROR);
#endif /* _DEBUG */

  return -1;


}}





f64 frand(){
  u32 value = (rand()<<15) | rand();
  return (f64)value/(KIT_U32_MAX>>2);
}



f32 frandf(){
  u32 value = (rand()<<15) | rand();
  return (f32)value/(KIT_U32_MAX>>2);
}




f64 frandRange(f64 start, f64 maxDeviation){
  return start + (frand()*2.0-1.0)*maxDeviation;
}
"
tDJ7ibk5,safe find library,mark-naylor-1701,Lisp,Friday 29th of March 2024 03:05:04 PM CDT,";; Make sure the file is opened in read-only mode.

(defun safe-find-library ()
  (interactive)
  (call-interactively #'find-library)
  (read-only-mode))"
emt7N5r5,Breadth-first search (recursive),nathanwailes,Python,Friday 29th of March 2024 02:44:51 PM CDT,"from collections import deque

def recursive_bfs(graph, queue, visited=set()):
    if not queue:
        return  # Base case: if the queue is empty, return

    current = queue.pop(0)  # Dequeue the first node in the queue
    if current not in visited:
        print(current, end="" "")  # Process the current node
        visited.add(current)  # Mark the current node as visited

        # Add all unvisited neighbors to the queue
        for neighbor in graph[current]:
            if neighbor not in visited:
                queue.append(neighbor)

    recursive_bfs(graph, queue, visited)  # Recursive call with the updated queue


# Example usage:
# Define a graph as an adjacency list
graph = {
    1 : [2,3],
    2 : [4, 5],
    3 : [5],
    4 : [],
    5 : [1],
}

recursive_bfs(graph, 1) # Start BFS from vertex 1"
kJ9QbZhi,Depth-first search (iterative),nathanwailes,Python,Friday 29th of March 2024 02:39:26 PM CDT,"def iterative_dfs(graph, start):
    visited = set()  # A set to keep track of visited nodes
    stack = [start]  # Initialize the stack with the start node

    while stack:
        vertex = stack.pop()  # Pop a vertex from the stack
        if vertex not in visited:
            visited.add(vertex)  # Mark the vertex as visited
            print(vertex)  # Process the vertex (e.g., print it)

            # Add neighbors of the vertex to the stack if they haven't been visited
            for neighbor in graph[vertex]:
                if neighbor not in visited:
                    stack.append(neighbor)

# Example usage:
# Define a graph as an adjacency list
# Using a stack to implement the iterative solution will mean that each vertex's list of
# neighbors will get processed in reverse order.
graph = {
    1 : [2, 3],
    2 : [4, 5],
    3 : [6],
    4 : [],
    5 : [6],
    6 : []
}

iterative_dfs(graph, 1) # Start DFS from vertex 1"
987DVwt4,[App] rename.lua,Le_JuiceBOX,Lua,Friday 29th of March 2024 02:33:49 PM CDT,"-- 987DVwt4
local Terminal = require(""/terminal"").new()

local active = false
local showColorsWindow = false
local showChanged = false

function Main()
    active = true
    ShowMainPage()
end

function ShowMainPage()
    showChanged = false
    while true do
        local n = os.getComputerLabel() or """"
        Terminal:reset()
        Terminal:displayHeader({
            ""Turtle Renamer:"",
            ""Use '""..Terminal.replaceSymbol..""' in your entry to color text."",
            ""Enter '/c' to see a list of color ids."",
            """",
            ""Name: '""..n..""'"",
            ""ID: ""..os.getComputerID().."""",
            """",
        })
        local text = Terminal:prompt(""Enter name:"")
        if text == ""/c"" then
            ShowColorsPage()
        else
            text = Terminal:mcColorize(text or ""Turtle"")
            local success = Terminal:promptBool(""\nAre you sure you want '""..text..""'? (1 or 0)"")
            if success then
                shell.run(""label set \""""..text..""\"""")
                sleep(0.5)  
                Terminal:reset()
                break
            end
        end
    end
end

function ShowColorsPage()
    Terminal:cancelPrompt()
    showChanged = false
    Terminal:reset()
    Terminal:displayColumn(1,21,
        {
            ""0 - Black"",
            ""2 - Dark Green"",
            ""4 - Dark Red"",
            ""6 - Gold"",
            ""8 - Dark Grey"",
            ""a - Green"",
            ""c - Red"",
            ""e - Yellow"",
            ""k - OBFUSCATE"",
            ""m - STRIKE-THROUGH"",
            ""o - ITALIC"",
        }, {
            ""1 - Dark Blue"",
            ""3 - Dark Aqua"",
            ""5 - Dark Purple"",
            ""7 - Grey"",
            ""9 - Blue"",
            ""b - Aqua"",
            ""d - Light Purple"",
            ""f - White"",
            ""l - BOLD"",
            ""n - UNDERLINE"",
            ""r - RESET"",
        }
    )
    Terminal:pressAnyKeyToContinue();
end

Main()"
4YV4ewAY,[Module] turtleBrain.lua,Le_JuiceBOX,Lua,Friday 29th of March 2024 02:32:00 PM CDT,"-- 4YV4ewAY
local module = {}
module.Dir = {
    N = 1,
    E = 2,
    S = 3,
    W = 4,
}

module.__index = module

function module:new()
	local self = setmetatable({}, module)
	
    self.CurrentDir = 1
	self.X = 0
    self.Y = 0
    self.Z = 0
	
    self.useToolForward = turtle.dig

	return self
end

function module:forwardUntilBlock()
    repeat until turtle.forward()
    if self.CurrentDir == module.Dir.N then
        self.Z = self.Z + 1
    elseif self.CurrentDir == module.Dir.S then
        self.Z = self.Z - 1
    elseif self.CurrentDir == module.Dir.E then
        self.X = self.X + 1
    elseif self.CurrentDir == module.Dir.W then
        self.X = self.X - 1
    end  
end

function module:forceForward(times)
    times = times or 1
    if times == 0 then return; end
    for i = 1, times do   
        repeat turtle.dig() until turtle.forward()
        if self.CurrentDir == module.Dir.N then
            self.Z = self.Z + 1
        elseif self.CurrentDir == module.Dir.S then
            self.Z = self.Z - 1
        elseif self.CurrentDir == module.Dir.E then
            self.X = self.X + 1
        elseif self.CurrentDir == module.Dir.W then
            self.X = self.X - 1
        end
    end
end

function module:forceUp(times)
    times = times or 1
    if times == 0 then return; end
    for i = 1, times do        
        repeat turtle.digUp() until turtle.up()
        self.Y = self.Y + 1
    end 
end

function module:forceDown(times)
    times = times or 1
    if times == 0 then return; end
    for i = 1, times do        
        repeat turtle.digDown() until turtle.down()
        self.Y = self.Y - 1
    end 
end


function module:turnRight(times)
    times = times or 1
    if times == 0 then return; end
    for i = 1, times do
        turtle.turnRight()
        self:_changeDir(1)
    end
end



function module:turnLeft(times)
    times = times or 1
    if times == 0 then return; end
    for i = 1, times do
        turtle.turnLeft()
        self:_changeDir(-1)
    end
end

function module:moveTo(x,y,z)
    x = x or self.X
    y = y or self.Y
    z = z or self.Z
    local xDiff = self.X - x
    local yDiff = self.Y - y
    local zDiff = self.Z - z
    local xDir = (((getRelativeSide(self.X,x) > 0) and module.Dir.E) or module.Dir.W)
    local zDir = (((getRelativeSide(self.Z,z) > 0) and module.Dir.N) or module.Dir.S)
    local isAbove = (((getRelativeSide(self.Y,y) > 0) and true) or false)
    
    if isAbove then
        self:forceUp(math.abs(yDiff))
    else
        self:forceDown(math.abs(yDiff))
    end
    
    if xDiff ~= 0 then
        --print(""XDir: ""..xDir)   
        self:turnToFace(xDir)
        self:forceForward(math.abs(xDiff))
    end

    if zDiff ~= 0 then
        self:turnToFace(zDir)
        self:forceForward(math.abs(zDiff))
    end
end

function module:turnToFace(dir)
    assert(dir, ""Dir is nil."")
    if dir == self.CurrentDir then return; end
    local turnTo = tonumber(dir)
    --print(self.CurrentDir)
    local diff = math.abs(turnTo - self.CurrentDir)
    if dir > self.CurrentDir then
        self:turnRight(diff)
    else
        self:turnLeft(diff)
    end
end

function module:refuelAll()
    for i = 1,16 do
        turtle.select(i)
        turtle.refuel()
    end
    turtle.select(1)
end

function module:isInvFull()
    for i = 16,1,-1 do
        turtle.select(i)
        if turtle.getItemCount() == 0 then
            return false
        end
    end
    return true
end

function module:predictFuelUsageTo(x,y,z) -- predicts the fuel usage to pos
    local blocks =
        (self.X - x) +
        (self.Y - y) +
        (self.Z - y)
    return (blocks)
end

function module:predictFuelUsage(x,y,z,x2,y2,z2)
    local blocks =
    (x - x2) +
    (y - y2) +
    (z - z2)
    return (blocks)
end

function module:hasEnoughFuel(blocksToTravel)
    return turtle.getFuelLevel() >= blocksToTravel
end

function module:getPos()
    return {self.X,self.Y,self.Z}
end

function module:emptyInventoryDown(ignoreSlot)
    ignoreSlot = ignoreSlot or -1
    for i = 1,16 do
        if i ~= ignoreSlot then
            turtle.select(i)
            turtle.dropDown()
        end
    end
end

function module:_changeDir(inc)
    local pred = self.CurrentDir + inc
    if pred > module.Dir.W then
        pred = module.Dir.N
    elseif pred < 1 then
        pred = module.Dir.W
    end
    self.CurrentDir = pred
end

function getRelativeSide(x1,x2)
    return ((x2 >= x1) and 1) or -1
end

return module"
Kz2mdMyW,[Module] terminal.lua,Le_JuiceBOX,Lua,Friday 29th of March 2024 02:31:13 PM CDT,"-- Kz2mdMyW
local module = {}
module.__index = module

module.mcColorSymbol = '§'
module.replaceSymbol = '&'

local tsx,tsy = term.getSize()

module.size = {
    x = tsx,
    y = tsy
}

function module:new()
	local self = setmetatable({}, module)
	self.outputLine = 1
	return self
end

function module:getComputerLabel()
    return string.gsub(os.getComputerLabel(),self.mcColorSymbol..""%w"","""")
end

function module:displayHeader(table,startLine)
    startLine = startLine or 1
    local line = 0
    for i,text in pairs(table) do
        line = startLine+(i-1)
        term.clearLine(line)
        term.setCursorPos(1,line)
        print(text)
    end
    term.setCursorPos(1,startLine+(#table))
end

function module:display(startLine,...)
    local cx,cy = term.getCursorPos() 
    startLine = startLine or cy
    local lines = {...}
    for i = 1, #lines do
        local y = (startLine+i)-1
        term.clearLine(y)
        term.setCursorPos(1,y)
        print(lines[i])
    end
    term.setCursorPos(1,startLine+#lines+1)
end

function module:displayColumn(startLine,columnWidth,col1,col2)
    local w,h = term.getSize()
    local x,y = term.getCursorPos()
    columnWidth = columnWidth or w/2
    startLine = startLine or y
    for i, text in pairs(col1) do
        term.setCursorPos(1,startLine+(i-1))
        term.write(text)
    end
    for i, text in pairs(col2) do
        term.setCursorPos(columnWidth,startLine+(i-1))
        term.write(text)
    end
end

function module:splitIntoColumns(startLine,columnWidth,list)
    local c1 = {}
    local c2 = {}
    for i = 1, #list do
        if i < #list/2 then
            table.insert(c1,list[i])
        else
            table.insert(c2,list[i])
        end
    end
    self:displayColumn(startLine,columnWidth,c1,c2)
end

function module:setOutputLine(lineNum)
    self.outputLine = lineNum
    term.setCursorPos(1,outputLine)
end

function module:reset()
    term.clear()
    term.setCursorPos(1,1)
end

function module:prompt(promtText)
    print(tostring(promtText))
    term.write(""> "")
    return io.read()
end

function module:promptNum(promptText)
    local res = self:prompt(promptText)
    return tonumber(res)
end

function module:promptBool(promptText)
    local res = self:promptNum(promptText)
    return (res == 1)
end

function module:promptFilePath(startDir)
    if startDir == nil then return; end
    if fs.isDir(startDir) == false then return; end
    local lastHead = nil
    local head = startDir
    while true do
        local res, children = self:promptFile(head,true)
        if res == keys.backspace then
            if head == lastHead or lastHead == nil then 
                print(""\nExiting..."")
                os.sleep(1)
                return nil 
            end
            print(""\nMoving up a directory..."")
            head = lastHead
            os.sleep(0.5)
        else
            local isDir = fs.isDir(res)
            if isDir then
                if children == 0 then 
                    print(""\nChosen directory has no files. \nPlease select another one."")
                    os.sleep(1.5)
                else
                    lastHead = head
                    head = res
                end
            elseif isDir == false then
                return res
            end
        end
    end
end

function module:promptFile(startDir,allowBackspace)
    if startDir == nil then return; end
    if fs.isDir(startDir) == false then return; end
    allowBackspace = allowBackspace or false
    while true do    
        local files = self:_listFiles(startDir)
        if #files == 0 then return nil end
        local keyCode = self:waitForKey()
        local num = keyCode - 48
        if num <= 9 and num >= 0 then
            local f = startDir..""/""..files[num]
            local children = 0
            if fs.isDir(f) then
                children = #fs.list(f)
            end
            return f, children
        elseif allowBackspace and keyCode == keys.backspace then
            return keyCode, 0
        end
    end
end

function module:cancelPrompt()
    io.close()
end

function module:mcColorize(text)
    return string.gsub(text,module.replaceSymbol,module.mcColorSymbol)
end

function module:waitForKey()
    term.setCursorBlink(false)
    while true do
        local event, key, is_held = os.pullEvent(""key"")
        term.setCursorBlink(true)
        return key;
    end
end

function module:waitForNumberKey(max)
    max = max or 9
    while true do
        local keyCode = self:waitForKey()
        local num = self.getKeyCodeInt(keyCode)
        if num and num <= max then return num; end
    end
end

function module:pressAnyKeyToContinue()
    local x,y = term.getCursorPos()
    print(""Press any key to continue..."")    
    term.setCursorPos(0,0)
    self:waitForKey()
    term.setCursorPos(x,y)
end

function module.getKeyCodeInt(keycode)
    local c = keycode-48
    if c > 9 or c < 0 then return nil end
    return c
end

function module:_listFiles(dir)
    term.clear()
    term.setCursorPos(1,1)
    local files = fs.list(dir)
    print(self:makeSeperator(""=""))
    print(""T:""..dir)
    print(self:makeSeperator(""=""))
    print()
    for i,name in pairs(files) do
        if fs.isDir(dir..""/""..name) then
            print(i.."". ""..name.."" (folder)"")
        else
            print(i.."". ""..name)
        end
    end
    return files
end

function module:makeSeperator(char,charsToRemove)
    local s = """"
    for i = 1, tsx do
        s = s..tostring(char)
    end
    return s
end



return module"
WWLZe6E3,[App] refuel.lua,Le_JuiceBOX,Lua,Friday 29th of March 2024 02:30:24 PM CDT,"-- WWLZe6E3
local Terminal = require(""/terminal"").new()
local diff = 0
function Main()
    writeText()
    repeat
        Terminal:reset()  
        writeText()
        local res = Terminal:promptBool(""Refuel turtle? (1 or 0)"")
        if res then
            for i = 1, 16 do
                turtle.select(i)
                turtle.refuel()
                writeText()
            end
        end
        turtle.select(1)
        writeText()
    until res == false
    Terminal:reset()
end

function writeText()
    local fuelLevel = turtle.getFuelLevel()
    local fuelLimit = turtle.getFuelLimit()
    local fuelPercent = math.floor((fuelLevel/fuelLimit)*100)
    diff = fuelLimit - fuelLevel
    Terminal:reset()
    Terminal:display(1,
        ""Turtle fuel level:"",
        fuelLevel.."" / ""..fuelLimit.."" (""..fuelPercent..""%)"",
        """",
        ""Lava Buckets..x""..math.ceil(diff/1000),
        ""Coal..........x""..math.ceil(diff/160),
        ""Kelp..........x""..math.ceil(diff/100),
        """"
    )
end

Main()"
bS3yj5Sn,Swimbot Error,swimmerhair,Python,Friday 29th of March 2024 02:02:38 PM CDT,"Traceback (most recent call last):
  File ""/home/pi/.local/lib/python3.9/site-packages/discord/ext/commands/core.py"", line 85, in wrapped
    ret = await coro(*args, **kwargs)
  File ""/home/pi/Swimbot/waitlist.py"", line 135, in wait
    embed.set_thumbnail(url=th_list[int(info['townHallLevel'])-1])
IndexError: list index out of range
"
LyR0PVs3,ServerError: received 500 HTTP response,basedcount_bot,Python,Friday 29th of March 2024 01:50:07 PM CDT,"Traceback (most recent call last):
  File ""/root/Bots/basedcount_bot/basedcount_bot.py"", line 46, in wrapper
    await func(reddit_instance, mongo_client)
  File ""/root/Bots/basedcount_bot/basedcount_bot.py"", line 263, in read_comments
    async for comment in pcm_subreddit.stream.comments(skip_existing=True):  # Comment
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/models/util.py"", line 160, in stream_generator
    [result async for result in function(limit=limit, **function_kwargs)]
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/models/util.py"", line 160, in <listcomp>
    [result async for result in function(limit=limit, **function_kwargs)]
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/models/listing/generator.py"", line 34, in __anext__
    await self._next_batch()
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/models/listing/generator.py"", line 89, in _next_batch
    self._listing = await self._reddit.get(self.url, params=self.params)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/util/deprecate_args.py"", line 51, in wrapped
    return await _wrapper(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/reddit.py"", line 785, in get
    return await self._objectify_request(method=""GET"", params=params, path=path)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/reddit.py"", line 567, in _objectify_request
    await self.request(
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/util/deprecate_args.py"", line 51, in wrapped
    return await _wrapper(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/reddit.py"", line 1032, in request
    return await self._core.request(
           ^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 383, in request
    return await self._request_with_retries(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 305, in _request_with_retries
    return await self._do_retry(
           ^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 170, in _do_retry
    return await self._request_with_retries(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 305, in _request_with_retries
    return await self._do_retry(
           ^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 170, in _do_retry
    return await self._request_with_retries(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 322, in _request_with_retries
    raise self.STATUS_EXCEPTIONS[response.status](response)
asyncprawcore.exceptions.ServerError: received 500 HTTP response
"
