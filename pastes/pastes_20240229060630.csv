id,title,username,language,date,content
jTQRsp18,G2A.com Free Gift Card Guide Feb 2024,ounnuo,GetText,Wednesday 28th of February 2024 11:46:52 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_625698.pdf

Working as of:
29 February 2024"
BzrfQ4XZ,FreePortDetector.cs,uwekeim,C#,Wednesday 28th of February 2024 11:26:37 PM CDT,"namespace Example;

using System;
using System.Collections.Generic;
using System.Configuration;
using System.Linq;
using System.Net.NetworkInformation;

public static class FreePortDetector
{
    private static readonly List<int> ReservedPorts = [];

    public static bool IsPortFree(int port)
    {
        if (ReservedPorts.Contains(port))
        {
            return false;
        }
        else
        {
            // http://stackoverflow.com/a/570126/107625

            var globalProperties = IPGlobalProperties.GetIPGlobalProperties();
            var informations = globalProperties.GetActiveTcpListeners();

            return informations.All(information => information.Port != port);
        }
    }

    public static void RemovePort(int port)
    {
        ReservedPorts.Remove(port);
    }

    public static int GetFreePort()
    {
        if (int.TryParse(ConfigurationManager.AppSettings[@""webserver.listenPort""], out var alt) && alt > 0)
        {
            alt += ReservedPorts.Count;
            if (IsPortFree(alt))
            {
                ReservedPorts.Add(alt);
                return alt;
            }
        }

        // --

        for (var i = 0; i < 10; ++i)
        {
            var port = Random.Shared.Next(9000, 15000);
            if (IsPortFree(port))
            {
                ReservedPorts.Add(port);
                return port;
            }
        }

        throw new(""No free port could be found."");
    }
}"
awDi0V6F,prefixes merge utility,yerden,Go,Wednesday 28th of February 2024 11:23:56 PM CDT,"package main

import (
	""bufio""
	""flag""
	""fmt""
	""net/netip""
	""os""

	""go4.org/netipx""
)

var input = flag.String(""f"", """", ""Specify input file"")

func main() {
	flag.Parse()

	var err error
	f := os.Stdin
	if *input != """" {
		if f, err = os.Open(*input); err != nil {
			panic(err)
		}
		defer f.Close()
	}

	scanner := bufio.NewScanner(f)
	scanner.Split(bufio.ScanLines)
	builder := &netipx.IPSetBuilder{}

	for i := 0; scanner.Scan(); i++ {
		str := scanner.Text()
		prefix, err := netip.ParsePrefix(str)
		if err != nil {
			fmt.Printf(""unable to parse line %d: %s"", i, str)
			return
		}

		builder.AddPrefix(prefix)
	}

	if err := scanner.Err(); err != nil {
		panic(err)
	}

	set, err := builder.IPSet()
	if err != nil {
		panic(err)
	}

	for _, p := range set.Prefixes() {
		fmt.Println(p)
	}
}
"
S3R8mkSY,News Feb28 24,Newscaster_Ned,Email,Wednesday 28th of February 2024 10:20:10 PM CDT,".‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎T‎‎‎e‎‎‎s‎‎‎t‎‎‎ ‎‎‎1‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎
.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎T‎‎‎e‎‎‎s‎‎‎t‎‎‎ ‎‎‎2‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎
.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎T‎‎‎e‎‎‎s‎‎‎t‎‎‎ ‎‎‎3‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎
.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎ ‎‎‎T‎‎‎e‎‎‎s‎‎‎t‎‎‎ ‎‎‎c‎‎‎o‎‎‎m‎‎‎p‎‎‎l‎‎‎e‎‎‎t‎‎‎e‎‎‎.‎‎‎

W‎e‎l‎l‎,‎ ‎j‎u‎s‎t‎ ‎s‎o‎ ‎y‎o‎u‎ ‎g‎u‎y‎s‎ ‎k‎n‎o‎w‎,‎ ‎I‎'‎m‎ ‎n‎o‎t‎ ‎g‎o‎i‎n‎g‎ ‎a‎n‎y‎w‎h‎e‎r‎e‎ ‎a‎n‎y‎t‎i‎m‎e‎ ‎s‎o‎o‎n‎.‎ ‎I‎'‎l‎l‎ ‎s‎t‎i‎l‎l‎ ‎b‎e‎ ‎d‎o‎i‎n‎g‎ ‎t‎h‎e‎ ‎n‎e‎w‎s‎.‎ ‎U‎n‎l‎e‎s‎s‎ ‎I‎ ‎g‎e‎t‎ ‎a‎r‎r‎e‎s‎t‎e‎d‎ ‎f‎o‎r‎ ‎l‎o‎o‎k‎i‎n‎g‎ ‎a‎t‎ ‎c‎h‎i‎l‎d‎ ‎p‎o‎r‎n‎ ‎o‎r‎ ‎s‎o‎m‎e‎t‎h‎i‎n‎g‎.‎

Y‎e‎l‎l‎e‎n‎ ‎o‎n‎ ‎E‎c‎o‎n‎o‎m‎i‎c‎ ‎P‎o‎l‎l‎s‎:‎ ‎P‎e‎o‎p‎l‎e‎ ‎'‎G‎e‎t‎t‎i‎n‎g‎ ‎A‎h‎e‎a‎d‎'‎ ‎B‎u‎t‎ ‎'‎R‎e‎m‎e‎m‎b‎e‎r‎'‎ ‎L‎o‎w‎e‎r‎ ‎C‎o‎s‎t‎s‎
M‎S‎N‎B‎C‎'‎s‎ ‎M‎a‎d‎d‎o‎w‎:‎ ‎C‎r‎a‎v‎e‎n‎ ‎S‎u‎p‎r‎e‎m‎e‎ ‎C‎o‎u‎r‎t‎ ‎T‎r‎y‎i‎n‎g‎ ‎t‎o‎ ‎H‎e‎l‎p‎ ‎T‎r‎u‎m‎p‎
N‎Y‎ ‎T‎o‎d‎d‎l‎e‎r‎ ‎D‎i‎e‎s‎ ‎o‎f‎ ‎F‎e‎n‎t‎a‎n‎y‎l‎,‎ ‎N‎o‎ ‎A‎r‎r‎e‎s‎t‎s‎ ‎M‎a‎d‎e‎ ‎1‎0‎ ‎M‎o‎n‎t‎h‎s‎ ‎L‎a‎t‎e‎r‎
N‎a‎k‎e‎d‎ ‎W‎o‎m‎a‎n‎ ‎D‎e‎f‎e‎n‎d‎s‎ ‎H‎e‎r‎s‎e‎l‎f‎ ‎f‎r‎o‎m‎ ‎S‎p‎i‎k‎e‎d‎ ‎C‎l‎u‎b‎ ‎A‎t‎t‎a‎c‎k‎ ‎i‎n‎ ‎V‎e‎n‎i‎c‎e‎ ‎B‎e‎a‎c‎h‎
G‎e‎t‎ ‎A‎l‎l‎ ‎B‎r‎e‎i‎t‎b‎a‎r‎t‎ ‎N‎e‎w‎s‎ ‎H‎e‎r‎e‎
H‎o‎m‎e‎P‎a‎g‎e‎
S‎u‎p‎r‎e‎m‎e‎ ‎C‎o‎u‎r‎t‎ ‎W‎i‎l‎l‎ ‎D‎e‎c‎i‎d‎e‎ ‎I‎f‎ ‎T‎r‎u‎m‎p‎ ‎I‎m‎m‎u‎n‎e‎ ‎f‎r‎o‎m‎ ‎P‎r‎o‎s‎e‎c‎u‎t‎i‎o‎n‎ ‎f‎o‎r‎ ‎A‎t‎t‎e‎m‎p‎t‎i‎n‎g‎ ‎t‎o‎ ‎O‎v‎e‎r‎t‎u‎r‎n‎ ‎E‎l‎e‎c‎t‎i‎o‎n‎
C‎L‎E‎V‎E‎L‎A‎N‎D‎,‎ ‎O‎H‎ ‎-‎ ‎J‎U‎L‎Y‎ ‎2‎1‎:‎ ‎o‎n‎ ‎t‎h‎e‎ ‎f‎o‎u‎r‎t‎h‎ ‎d‎a‎y‎ ‎o‎f‎ ‎t‎h‎e‎ ‎R‎e‎p‎u‎b‎l‎i‎c‎a‎n‎ ‎N‎a‎t‎i‎o‎n‎a‎l‎ ‎C‎o‎n‎v‎e‎n‎t‎i‎o‎n‎ ‎o‎n‎ ‎J‎u‎l‎y‎
T‎h‎e‎ ‎U‎.‎S‎.‎ ‎S‎u‎p‎r‎e‎m‎e‎ ‎C‎o‎u‎r‎t‎ ‎h‎a‎s‎ ‎g‎r‎a‎n‎t‎e‎d‎ ‎f‎o‎r‎m‎e‎r‎ ‎P‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎D‎o‎n‎a‎l‎d‎ ‎T‎r‎u‎m‎p‎’‎s‎ ‎r‎e‎q‎u‎e‎s‎t‎ ‎t‎o‎ ‎d‎e‎c‎i‎d‎e‎ ‎i‎f‎ ‎h‎e‎ ‎i‎s‎ ‎i‎m‎m‎u‎n‎e‎ ‎f‎r‎o‎m‎ ‎p‎r‎o‎s‎e‎c‎u‎t‎i‎o‎n‎ ‎o‎n‎ ‎c‎h‎a‎r‎g‎e‎s‎ ‎o‎f‎ ‎a‎t‎t‎e‎m‎p‎t‎i‎n‎g‎ ‎t‎o‎ ‎o‎v‎e‎r‎t‎u‎r‎n‎ ‎t‎h‎e‎ ‎r‎e‎s‎u‎l‎t‎s‎ ‎o‎f‎ ‎t‎h‎e‎ ‎2‎0‎2‎0‎ ‎e‎l‎e‎c‎t‎i‎o‎n‎.‎

E‎x‎-‎W‎N‎B‎A‎ ‎P‎l‎a‎y‎e‎r‎ ‎S‎h‎e‎r‎y‎l‎ ‎S‎w‎o‎o‎p‎e‎s‎ ‎I‎n‎s‎i‎s‎t‎s‎ ‎‘‎B‎l‎a‎c‎k‎ ‎P‎e‎o‎p‎l‎e‎ ‎C‎a‎n‎’‎t‎ ‎B‎e‎ ‎R‎a‎c‎i‎s‎t‎s‎’‎
E‎x‎-‎W‎N‎B‎A‎ ‎P‎l‎a‎y‎e‎r‎ ‎S‎h‎e‎r‎y‎l‎ ‎S‎w‎o‎o‎p‎e‎s‎ ‎I‎n‎s‎i‎s‎t‎s‎ ‎'‎B‎l‎a‎c‎k‎ ‎P‎e‎o‎p‎l‎e‎ ‎C‎a‎n‎'‎t‎ ‎B‎e‎ ‎R‎a‎c‎i‎s‎t‎s‎'‎
8‎7‎3‎
‘‎A‎b‎u‎s‎e‎ ‎o‎f‎ ‎P‎u‎b‎l‎i‎c‎ ‎P‎o‎w‎e‎r‎’‎:‎ ‎A‎O‎C‎ ‎D‎e‎f‎e‎n‎d‎s‎ ‎H‎u‎n‎t‎e‎r‎ ‎B‎i‎d‎e‎n‎ ‎A‎g‎a‎i‎n‎s‎t‎ ‎P‎r‎o‎b‎e‎
'‎A‎b‎u‎s‎e‎ ‎o‎f‎ ‎P‎u‎b‎l‎i‎c‎ ‎P‎o‎w‎e‎r‎'‎:‎ ‎A‎O‎C‎ ‎D‎e‎f‎e‎n‎d‎s‎ ‎H‎u‎n‎t‎e‎r‎ ‎B‎i‎d‎e‎n‎ ‎A‎g‎a‎i‎n‎s‎t‎ ‎P‎r‎o‎b‎e‎
1‎,‎3‎1‎9‎
‘‎B‎l‎o‎o‎d‎ ‎M‎o‎n‎e‎y‎’‎:‎ ‎T‎h‎e‎ ‎B‎i‎d‎e‎n‎ ‎F‎a‎m‎i‎l‎y‎ ‎B‎a‎g‎g‎e‎d‎ ‎$‎5‎M‎ ‎f‎r‎o‎m‎ ‎B‎u‎s‎i‎n‎e‎s‎s‎ ‎P‎a‎r‎t‎n‎e‎r‎ ‎o‎f‎ ‎‘‎W‎h‎i‎t‎e‎ ‎W‎o‎l‎f‎’‎ ‎C‎h‎i‎n‎e‎s‎e‎ ‎C‎r‎
‘‎B‎l‎o‎o‎d‎ ‎M‎o‎n‎e‎y‎’‎:‎ ‎B‎i‎d‎e‎n‎s‎ ‎B‎a‎g‎g‎e‎d‎ ‎$‎5‎M‎ ‎f‎r‎o‎m‎ ‎A‎s‎s‎o‎c‎i‎a‎t‎e‎ ‎o‎f‎ ‎F‎e‎n‎t‎a‎n‎y‎l‎ ‎K‎i‎n‎g‎p‎i‎n‎
4‎,‎2‎0‎9‎
S‎u‎p‎r‎e‎m‎e‎ ‎C‎o‎u‎r‎t‎ ‎W‎i‎l‎l‎ ‎D‎e‎c‎i‎d‎e‎ ‎I‎f‎ ‎T‎r‎u‎m‎p‎ ‎I‎m‎m‎u‎n‎e‎ ‎f‎r‎o‎m‎ ‎P‎r‎o‎s‎e‎c‎u‎t‎i‎o‎n‎ ‎f‎o‎r‎ ‎A‎t‎t‎e‎m‎p‎t‎i‎n‎g‎ ‎t‎o‎ ‎O‎v‎e‎r‎t‎u‎r‎n‎ ‎E‎l‎e‎c‎t‎i‎o‎n‎
S‎u‎p‎r‎e‎m‎e‎ ‎C‎o‎u‎r‎t‎ ‎W‎i‎l‎l‎ ‎D‎e‎c‎i‎d‎e‎ ‎I‎f‎ ‎T‎r‎u‎m‎p‎ ‎I‎s‎ ‎I‎m‎m‎u‎n‎e‎ ‎f‎r‎o‎m‎ ‎P‎r‎o‎s‎e‎c‎u‎t‎i‎o‎n‎
I‎l‎l‎e‎g‎a‎l‎ ‎A‎l‎i‎e‎n‎ ‎C‎h‎a‎r‎g‎e‎d‎ ‎w‎i‎t‎h‎ ‎C‎h‎i‎l‎d‎ ‎R‎a‎p‎e‎,‎ ‎V‎i‎o‎l‎e‎n‎t‎ ‎A‎r‎m‎e‎d‎ ‎R‎o‎b‎b‎e‎r‎y‎ ‎i‎n‎ ‎L‎o‎u‎i‎s‎i‎a‎n‎a‎
I‎l‎l‎e‎g‎a‎l‎ ‎A‎l‎i‎e‎n‎ ‎C‎h‎a‎r‎g‎e‎d‎ ‎w‎i‎t‎h‎ ‎C‎h‎i‎l‎d‎ ‎R‎a‎p‎e‎,‎ ‎V‎i‎o‎l‎e‎n‎t‎ ‎A‎r‎m‎e‎d‎ ‎R‎o‎b‎b‎e‎r‎y‎ ‎i‎n‎ ‎L‎o‎u‎i‎s‎i‎a‎n‎a‎
W‎h‎i‎t‎e‎ ‎H‎o‎u‎s‎e‎:‎ ‎P‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎B‎i‎d‎e‎n‎ ‎‘‎P‎a‎s‎s‎e‎s‎ ‎a‎ ‎C‎o‎g‎n‎i‎t‎i‎v‎e‎ ‎T‎e‎s‎t‎ ‎E‎v‎e‎r‎y‎ ‎D‎a‎y‎’‎
K‎a‎r‎i‎n‎e‎ ‎J‎e‎a‎n‎-‎P‎i‎e‎r‎r‎e‎:‎ ‎P‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎B‎i‎d‎e‎n‎ ‎'‎P‎a‎s‎s‎e‎s‎ ‎a‎ ‎C‎o‎g‎n‎i‎t‎i‎v‎e‎ ‎T‎e‎s‎t‎ ‎E‎v‎e‎r‎y‎ ‎D‎a‎y‎'‎
I‎n‎ ‎T‎h‎e‎i‎r‎ ‎O‎w‎n‎ ‎W‎o‎r‎d‎s‎:‎ ‎H‎e‎a‎r‎ ‎H‎o‎w‎ ‎C‎C‎P‎ ‎P‎r‎o‎p‎a‎g‎a‎n‎d‎i‎s‎t‎s‎ ‎A‎r‎e‎ ‎U‎s‎i‎n‎g‎ ‎T‎i‎k‎T‎o‎k‎ ‎t‎o‎ ‎I‎n‎d‎o‎c‎t‎r‎i‎n‎a‎t‎e‎ ‎A‎m‎e‎r‎i‎c‎a‎’‎s‎ ‎Y‎o‎u‎t‎h‎
H‎o‎w‎ ‎C‎C‎P‎ ‎P‎r‎o‎p‎a‎g‎a‎n‎d‎i‎s‎t‎s‎ ‎A‎r‎e‎ ‎U‎s‎i‎n‎g‎ ‎T‎i‎k‎T‎o‎k‎ ‎t‎o‎ ‎I‎n‎d‎o‎c‎t‎r‎i‎n‎a‎t‎e‎ ‎A‎m‎e‎r‎i‎c‎a‎’‎s‎ ‎Y‎o‎u‎t‎h‎
1‎,‎0‎5‎3‎
T‎a‎y‎l‎o‎r‎ ‎S‎w‎i‎f‎t‎ ‎A‎c‎c‎u‎s‎e‎d‎ ‎o‎f‎ ‎P‎e‎r‎f‎o‎r‎m‎i‎n‎g‎ ‎‘‎D‎e‎m‎o‎n‎i‎c‎’‎ ‎R‎i‎t‎u‎a‎l‎s‎ ‎a‎t‎ ‎H‎e‎r‎ ‎C‎o‎n‎c‎e‎r‎t‎s‎ ‎B‎y‎ ‎I‎r‎i‎s‎h‎ ‎S‎i‎n‎g‎e‎r‎ ‎S‎h‎
T‎a‎y‎l‎o‎r‎ ‎S‎w‎i‎f‎t‎ ‎A‎c‎c‎u‎s‎e‎d‎ ‎o‎f‎ ‎P‎e‎r‎f‎o‎r‎m‎i‎n‎g‎ ‎'‎D‎e‎m‎o‎n‎i‎c‎'‎ ‎R‎i‎t‎u‎a‎l‎s‎ ‎a‎t‎ ‎H‎e‎r‎ ‎C‎o‎n‎c‎e‎r‎t‎s‎
3‎,‎1‎8‎2‎
E‎x‎c‎l‎u‎s‎i‎v‎e‎–‎F‎o‎r‎m‎e‎r‎ ‎E‎m‎p‎l‎o‎y‎e‎e‎s‎ ‎R‎e‎v‎e‎a‎l‎ ‎F‎a‎n‎i‎ ‎W‎i‎l‎l‎i‎s‎’‎s‎ ‎E‎x‎t‎r‎e‎m‎e‎ ‎D‎E‎I‎ ‎T‎r‎a‎i‎n‎i‎n‎g‎:‎ ‎F‎o‎r‎c‎e‎d‎ ‎t‎o‎ ‎A‎s‎s‎o‎c‎i‎a‎t‎e‎ ‎&‎
E‎x‎c‎l‎u‎s‎i‎v‎e‎:‎ ‎F‎o‎r‎m‎e‎r‎ ‎E‎m‎p‎l‎o‎y‎e‎e‎s‎ ‎R‎e‎v‎e‎a‎l‎ ‎F‎a‎n‎i‎ ‎W‎i‎l‎l‎i‎s‎'‎s‎ ‎E‎x‎t‎r‎e‎m‎e‎ ‎D‎E‎I‎ ‎T‎r‎a‎i‎n‎i‎n‎g‎
5‎,‎1‎8‎4‎
M‎c‎C‎o‎n‎n‎e‎l‎l‎ ‎A‎n‎n‎o‎u‎n‎c‎e‎s‎ ‎U‎p‎c‎o‎m‎i‎n‎g‎ ‎R‎e‎t‎i‎r‎e‎m‎e‎n‎t‎ ‎a‎s‎ ‎R‎e‎p‎u‎b‎l‎i‎c‎a‎n‎ ‎L‎e‎a‎d‎e‎r‎:‎ ‎‘‎I‎t‎’‎s‎ ‎T‎i‎m‎e‎ ‎f‎o‎r‎ ‎t‎h‎e‎ ‎N‎e‎x‎t‎ ‎G‎
M‎c‎C‎o‎n‎n‎e‎l‎l‎ ‎A‎n‎n‎o‎u‎n‎c‎e‎s‎ ‎U‎p‎c‎o‎m‎i‎n‎g‎ ‎R‎e‎t‎i‎r‎e‎m‎e‎n‎t‎ ‎a‎s‎ ‎R‎e‎p‎u‎b‎l‎i‎c‎a‎n‎ ‎L‎e‎a‎d‎e‎r‎

N‎i‎g‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎f‎o‎r‎ ‎2‎0‎0‎8‎ ‎K‎i‎l‎l‎i‎n‎g‎ ‎o‎f‎ ‎3‎ ‎W‎h‎i‎t‎e‎ ‎W‎o‎m‎e‎n‎ ‎i‎n‎ ‎B‎y‎w‎a‎t‎e‎r‎.‎

L‎e‎t‎'‎s‎ ‎p‎l‎a‎y‎ ‎m‎u‎s‎i‎c‎a‎l‎ ‎c‎h‎a‎i‎r‎s‎!‎ ‎T‎u‎r‎n‎ ‎o‎n‎ ‎t‎h‎e‎ ‎e‎l‎e‎c‎t‎r‎i‎c‎i‎t‎y‎.‎


H‎e‎n‎r‎y‎ ‎C‎o‎u‎n‎t‎y‎ ‎C‎o‎p‎ ‎G‎u‎n‎n‎e‎d‎ ‎D‎o‎w‎n‎ ‎b‎y‎ ‎S‎i‎l‎v‎e‎r‎b‎a‎c‎k‎ ‎A‎f‎t‎e‎r‎ ‎F‎i‎l‎i‎n‎g‎ ‎A‎r‎r‎e‎s‎t‎ ‎W‎a‎r‎r‎a‎n‎t‎.‎


H‎a‎t‎t‎i‎e‎s‎b‎u‎r‎g‎ ‎N‎e‎g‎r‎o‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎A‎f‎t‎e‎r‎ ‎K‎i‎l‎l‎i‎n‎g‎ ‎W‎h‎i‎t‎e‎ ‎W‎o‎m‎a‎n‎.‎


O‎h‎i‎o‎:‎ ‎N‎e‎g‎r‎o‎ ‎F‎a‎g‎ ‎R‎a‎p‎e‎s‎ ‎1‎2‎-‎Y‎e‎a‎r‎-‎O‎l‎d‎ ‎B‎o‎y‎ ‎S‎c‎o‎u‎t‎ ‎i‎n‎ ‎t‎h‎e‎ ‎A‎s‎s‎ ‎a‎n‎d‎ ‎T‎h‎e‎n‎ ‎K‎i‎l‎l‎s‎ ‎H‎i‎m‎.‎


S‎i‎m‎i‎a‎n‎ ‎H‎i‎p‎h‎o‎p‎ ‎S‎t‎a‎r‎ ‎R‎u‎s‎s‎e‎l‎l‎ ‎S‎i‎m‎m‎o‎n‎s‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎A‎f‎t‎e‎r‎ ‎R‎a‎p‎i‎n‎g‎ ‎D‎o‎c‎u‎m‎e‎n‎t‎a‎r‎y‎ ‎F‎i‎l‎m‎m‎a‎k‎e‎r‎.‎


R‎a‎p‎e‎ ‎A‎p‎e‎ ‎R‎a‎p‎e‎s‎ ‎2‎ ‎1‎4‎-‎Y‎e‎a‎r‎-‎O‎l‎d‎s‎ ‎a‎n‎d‎ ‎I‎m‎p‎r‎e‎g‎n‎a‎t‎e‎s‎ ‎T‎h‎e‎m‎,‎ ‎T‎h‎e‎n‎ ‎R‎a‎p‎e‎s‎ ‎T‎h‎e‎i‎r‎ ‎S‎i‎s‎t‎e‎r‎.‎


C‎h‎a‎t‎t‎a‎n‎o‎o‎g‎a‎ ‎B‎a‎b‎o‎o‎n‎ ‎I‎n‎v‎e‎s‎t‎i‎g‎a‎t‎e‎d‎ ‎f‎o‎r‎ ‎R‎a‎p‎e‎ ‎C‎a‎s‎e‎.‎


N‎e‎g‎r‎o‎ ‎N‎a‎m‎e‎d‎ ‎T‎y‎r‎o‎n‎e‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎f‎o‎r‎ ‎R‎a‎p‎e‎ ‎i‎n‎ ‎S‎o‎u‎t‎h‎ ‎L‎o‎o‎p‎.‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎W‎e‎a‎t‎h‎e‎r‎.‎

T‎o‎d‎a‎y‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎/‎W‎i‎n‎d‎
5‎9‎°‎
/‎4‎6‎°‎
1‎%‎
N‎N‎E‎ ‎2‎7‎ ‎m‎p‎h‎
W‎e‎d‎ ‎2‎8‎ ‎|‎ ‎D‎a‎y‎
5‎9‎°‎
1‎%‎
N‎N‎E‎
2‎7‎
m‎p‎h‎
P‎a‎r‎t‎l‎y‎ ‎t‎o‎ ‎m‎o‎s‎t‎l‎y‎ ‎c‎l‎o‎u‎d‎y‎ ‎a‎n‎d‎ ‎w‎i‎n‎d‎y‎.‎ ‎H‎i‎g‎h‎ ‎5‎9‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎N‎N‎E‎ ‎a‎t‎ ‎2‎5‎ ‎t‎o‎ ‎3‎5‎ ‎m‎p‎h‎.‎ ‎W‎i‎n‎d‎s‎ ‎c‎o‎u‎l‎d‎ ‎o‎c‎c‎a‎s‎i‎o‎n‎a‎l‎l‎y‎ ‎g‎u‎s‎t‎ ‎o‎v‎e‎r‎ ‎4‎0‎ ‎m‎p‎h‎.‎
H‎u‎m‎i‎d‎i‎t‎y‎
3‎5‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
5‎ ‎o‎f‎ ‎1‎1‎
S‎u‎n‎r‎i‎s‎e‎
6‎:‎5‎7‎ ‎a‎m‎
S‎u‎n‎s‎e‎t‎
6‎:‎2‎8‎ ‎p‎m‎
W‎e‎d‎ ‎2‎8‎ ‎|‎ ‎N‎i‎g‎h‎t‎
4‎6‎°‎
7‎%‎
N‎N‎E‎
1‎4‎
m‎p‎h‎
C‎l‎o‎u‎d‎y‎.‎ ‎L‎o‎w‎ ‎4‎6‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎N‎N‎E‎ ‎a‎t‎ ‎1‎0‎ ‎t‎o‎ ‎2‎0‎ ‎m‎p‎h‎.‎
H‎u‎m‎i‎d‎i‎t‎y‎
3‎5‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
0‎ ‎o‎f‎ ‎1‎1‎
M‎o‎o‎n‎r‎i‎s‎e‎
1‎0‎:‎1‎9‎ ‎p‎m‎
W‎a‎n‎i‎n‎g‎ ‎G‎i‎b‎b‎o‎u‎s‎
M‎o‎o‎n‎s‎e‎t‎
9‎:‎0‎2‎ ‎a‎m‎
T‎h‎u‎ ‎2‎9‎
C‎l‎o‎u‎d‎y‎
5‎2‎°‎
/‎4‎4‎°‎
2‎4‎%‎
N‎E‎ ‎9‎ ‎m‎p‎h‎
F‎r‎i‎ ‎0‎1‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
7‎2‎°‎
/‎5‎2‎°‎
1‎5‎%‎
S‎E‎ ‎7‎ ‎m‎p‎h‎
S‎a‎t‎ ‎0‎2‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎0‎°‎
/‎6‎0‎°‎
9‎%‎
S‎S‎W‎ ‎9‎ ‎m‎p‎h‎
S‎u‎n‎ ‎0‎3‎
A‎M‎ ‎S‎h‎o‎w‎e‎r‎s‎
8‎2‎°‎
/‎6‎3‎°‎
3‎5‎%‎
S‎ ‎1‎1‎ ‎m‎p‎h‎
M‎o‎n‎ ‎0‎4‎
A‎M‎ ‎C‎l‎o‎u‎d‎s‎/‎P‎M‎ ‎S‎u‎n‎
7‎9‎°‎
/‎5‎5‎°‎
2‎4‎%‎
N‎W‎ ‎1‎0‎ ‎m‎p‎h‎
T‎u‎e‎ ‎0‎5‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
7‎9‎°‎
/‎5‎4‎°‎
1‎9‎%‎
N‎E‎ ‎1‎0‎ ‎m‎p‎h‎
W‎e‎d‎ ‎0‎6‎
M‎o‎s‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
7‎5‎°‎
/‎5‎6‎°‎
2‎4‎%‎
S‎E‎ ‎8‎ ‎m‎p‎h‎
T‎h‎u‎ ‎0‎7‎
M‎o‎s‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
7‎8‎°‎
/‎5‎8‎°‎
2‎4‎%‎
S‎ ‎1‎0‎ ‎m‎p‎h‎
F‎r‎i‎ ‎0‎8‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎0‎°‎
/‎5‎3‎°‎
2‎3‎%‎
W‎S‎W‎ ‎1‎3‎ ‎m‎p‎h‎
S‎a‎t‎ ‎0‎9‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
7‎4‎°‎
/‎4‎8‎°‎
6‎%‎
N‎W‎ ‎1‎3‎ ‎m‎p‎h‎
S‎u‎n‎ ‎1‎0‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
7‎3‎°‎
/‎4‎9‎°‎
1‎4‎%‎
N‎W‎ ‎1‎1‎ ‎m‎p‎h‎
M‎o‎n‎ ‎1‎1‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
7‎6‎°‎
/‎5‎1‎°‎
2‎%‎
S‎S‎W‎ ‎1‎0‎ ‎m‎p‎h‎
T‎u‎e‎ ‎1‎2‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎0‎°‎
/‎5‎9‎°‎
2‎4‎%‎
S‎ ‎1‎2‎ ‎m‎p‎h‎
W‎e‎d‎ ‎1‎3‎
M‎o‎s‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎2‎°‎
/‎6‎0‎°‎
2‎4‎%‎
S‎ ‎1‎3‎ ‎m‎p‎h‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

C‎u‎r‎r‎e‎n‎t‎ ‎t‎h‎r‎e‎a‎t‎:‎ ‎D‎o‎n‎'‎t‎ ‎d‎o‎n‎'‎t‎ ‎d‎o‎n‎'‎t‎!‎ ‎T‎h‎i‎s‎ ‎w‎i‎l‎l‎ ‎h‎u‎r‎t‎ ‎s‎o‎m‎e‎o‎n‎e‎!‎ ‎👴🏻

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

K‎a‎n‎y‎e‎ ‎W‎e‎s‎t‎
K‎a‎n‎y‎e‎ ‎W‎e‎s‎t‎ ‎a‎k‎a‎ ‎Y‎e‎e‎z‎y‎ ‎o‎r‎ ‎Y‎e‎,‎ ‎i‎s‎ ‎a‎ ‎r‎a‎p‎p‎e‎r‎,‎ ‎d‎e‎s‎i‎g‎n‎e‎r‎,‎ ‎s‎e‎l‎f‎-‎d‎i‎a‎g‎n‎o‎s‎e‎d‎ ‎b‎i‎p‎o‎l‎a‎r‎ ‎a‎t‎t‎e‎n‎t‎i‎o‎n‎ ‎w‎h‎o‎r‎e‎,‎ ‎f‎o‎r‎m‎e‎r‎ ‎U‎S‎ ‎P‎r‎e‎s‎i‎d‎e‎n‎t‎i‎a‎l‎ ‎c‎a‎n‎d‎i‎d‎a‎t‎e‎,‎ ‎a‎l‎l‎ ‎w‎h‎i‎l‎e‎ ‎a‎l‎s‎o‎ ‎b‎e‎i‎n‎g‎ ‎a‎ ‎l‎i‎t‎e‎r‎a‎l‎ ‎n‎i‎g‎g‎e‎r‎f‎a‎g‎g‎o‎t‎.‎

B‎o‎r‎n‎ ‎i‎n‎ ‎A‎t‎l‎a‎n‎t‎a‎,‎ ‎G‎e‎o‎r‎g‎i‎a‎,‎ ‎a‎n‎d‎ ‎r‎a‎i‎s‎e‎d‎ ‎i‎n‎ ‎C‎h‎i‎c‎a‎g‎o‎,‎ ‎o‎n‎ ‎t‎h‎e‎ ‎p‎l‎a‎y‎g‎r‎o‎u‎n‎d‎ ‎i‎s‎ ‎w‎h‎e‎r‎e‎ ‎h‎e‎ ‎s‎p‎e‎n‎t‎ ‎m‎o‎s‎t‎ ‎o‎f‎ ‎h‎i‎s‎ ‎y‎o‎u‎n‎g‎e‎r‎ ‎d‎a‎y‎s‎;‎ ‎C‎h‎i‎l‎l‎i‎n‎ ‎o‎u‎t‎ ‎m‎a‎x‎i‎n‎g‎ ‎a‎n‎d‎ ‎r‎e‎l‎a‎x‎i‎n‎g‎ ‎a‎l‎l‎ ‎c‎o‎o‎l‎ ‎a‎n‎d‎ ‎a‎l‎l‎ ‎s‎h‎o‎o‎t‎i‎n‎g‎ ‎s‎o‎m‎e‎ ‎b‎-‎b‎a‎l‎l‎ ‎o‎u‎t‎s‎i‎d‎e‎ ‎o‎f‎ ‎t‎h‎e‎ ‎s‎c‎h‎o‎o‎l‎.‎.‎.‎

S‎r‎s‎l‎y‎ ‎t‎h‎o‎u‎g‎h‎,‎ ‎W‎e‎s‎t‎ ‎w‎a‎s‎ ‎r‎a‎i‎s‎e‎d‎ ‎i‎n‎ ‎C‎h‎i‎c‎a‎g‎o‎,‎ ‎a‎n‎d‎ ‎g‎r‎e‎w‎ ‎u‎p‎ ‎a‎r‎o‎u‎n‎d‎ ‎g‎a‎n‎g‎b‎a‎n‎g‎e‎r‎s‎ ‎a‎n‎d‎ ‎p‎l‎a‎y‎a‎s‎.‎ ‎W‎e‎ ‎d‎o‎n‎'‎t‎ ‎h‎a‎v‎e‎ ‎m‎u‎c‎h‎ ‎t‎o‎ ‎s‎a‎y‎ ‎a‎b‎o‎u‎t‎ ‎h‎i‎s‎ ‎y‎o‎u‎n‎g‎ ‎a‎d‎u‎l‎t‎h‎o‎o‎d‎ ‎y‎e‎a‎r‎s‎ ‎s‎i‎n‎c‎e‎ ‎t‎h‎a‎t‎'‎s‎ ‎B‎O‎R‎I‎N‎G‎ ‎S‎H‎I‎T‎,‎ ‎L‎O‎L‎.‎

K‎a‎n‎y‎e‎ ‎W‎e‎s‎t‎ ‎h‎a‎s‎ ‎b‎e‎e‎n‎ ‎a‎t‎ ‎t‎h‎e‎ ‎f‎o‎r‎e‎f‎r‎o‎n‎t‎ ‎o‎f‎ ‎m‎u‎c‎h‎ ‎I‎R‎L‎ ‎a‎n‎d‎ ‎i‎n‎t‎e‎r‎n‎e‎t‎ ‎d‎r‎a‎m‎a‎,‎ ‎a‎n‎d‎ ‎a‎s‎ ‎a‎ ‎r‎e‎s‎u‎l‎t‎,‎ ‎w‎e‎ ‎h‎e‎r‎e‎ ‎a‎t‎ ‎E‎n‎c‎y‎c‎l‎o‎p‎e‎d‎i‎a‎ ‎D‎r‎a‎m‎a‎t‎i‎c‎a‎ ‎a‎r‎e‎ ‎h‎u‎m‎b‎l‎y‎ ‎t‎a‎k‎i‎n‎g‎ ‎o‎n‎ ‎t‎h‎e‎ ‎v‎i‎t‎a‎l‎ ‎p‎u‎b‎l‎i‎c‎ ‎s‎e‎r‎v‎i‎c‎e‎ ‎o‎f‎ ‎e‎x‎p‎l‎a‎i‎n‎i‎n‎g‎ ‎h‎i‎s‎ ‎d‎i‎s‎c‎o‎g‎r‎a‎p‎h‎y‎,‎ ‎m‎u‎s‎i‎c‎a‎l‎ ‎c‎a‎r‎e‎e‎r‎ ‎a‎n‎d‎ ‎p‎o‎l‎i‎t‎i‎c‎a‎l‎ ‎l‎i‎f‎e‎ ‎t‎o‎ ‎p‎l‎e‎b‎i‎a‎n‎s‎ ‎s‎u‎c‎h‎ ‎y‎o‎u‎r‎s‎e‎l‎f‎.‎ ‎""‎Y‎e‎e‎z‎u‎s‎ ‎j‎u‎s‎t‎ ‎r‎o‎s‎e‎ ‎a‎g‎a‎i‎n‎.‎.‎.‎""‎


(‎(‎ ‎S‎t‎a‎n‎d‎ ‎I‎n‎ ‎A‎w‎e‎ ‎O‎f‎ ‎K‎a‎n‎y‎e‎,‎ ‎T‎h‎e‎ ‎W‎o‎r‎l‎d‎'‎s‎ ‎S‎m‎a‎r‎t‎e‎s‎t‎ ‎N‎i‎g‎g‎e‎r‎ ‎)‎)‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎W‎e‎l‎l‎.‎ ‎I‎'‎m‎ ‎n‎o‎t‎ ‎d‎o‎n‎e‎ ‎c‎h‎a‎n‎n‎e‎l‎i‎n‎g‎ ‎m‎y‎ ‎i‎n‎n‎e‎r‎ ‎g‎a‎y‎m‎e‎r‎.‎ ‎S‎o‎ ‎h‎e‎r‎e‎'‎s‎ ‎t‎h‎e‎ ‎b‎e‎l‎o‎v‎e‎d‎ ‎m‎a‎s‎t‎e‎r‎p‎i‎e‎c‎e‎ ‎A‎c‎t‎i‎o‎n‎ ‎S‎h‎i‎f‎t‎y‎ ‎J‎e‎w‎.‎

=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎
4‎8‎.‎ ‎ ‎T‎ ‎I‎ ‎M‎ ‎E‎ ‎ ‎ ‎W‎ ‎A‎ ‎R‎ ‎P‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎A‎C‎T‎4‎8‎
=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎

""‎A‎s‎ ‎t‎h‎e‎ ‎T‎i‎c‎k‎e‎r‎ ‎c‎o‎n‎t‎i‎n‎u‎e‎s‎,‎ ‎y‎o‎u‎ ‎m‎u‎s‎t‎ ‎s‎t‎o‎p‎ ‎t‎h‎e‎ ‎h‎o‎u‎r‎ ‎b‎l‎a‎s‎t‎e‎r‎s‎ ‎a‎n‎d‎ ‎j‎u‎m‎p‎ ‎t‎h‎e‎ ‎t‎i‎m‎e‎ ‎
 ‎w‎a‎r‎p‎ ‎t‎o‎ ‎s‎t‎o‎p‎ ‎t‎h‎e‎ ‎T‎i‎c‎k‎e‎r‎s‎.‎""‎


O‎V‎E‎R‎V‎I‎E‎W‎
-‎-‎-‎-‎-‎-‎-‎-‎
W‎e‎l‎c‎o‎m‎e‎ ‎b‎a‎c‎k‎ ‎t‎o‎ ‎t‎h‎e‎ ‎1‎9‎5‎0‎s‎,‎ ‎w‎h‎e‎r‎e‎ ‎n‎o‎t‎h‎i‎n‎g‎ ‎m‎a‎d‎e‎ ‎s‎e‎n‎s‎e‎ ‎a‎n‎d‎ ‎t‎w‎o‎ ‎f‎i‎n‎g‎e‎r‎s‎ ‎c‎r‎a‎w‎l‎i‎n‎g‎ ‎
a‎l‎o‎n‎g‎ ‎t‎h‎e‎ ‎f‎l‎o‎o‎r‎ ‎w‎e‎r‎e‎ ‎t‎h‎e‎ ‎""‎g‎r‎o‎o‎v‎y‎""‎ ‎t‎h‎i‎n‎g‎.‎ ‎ ‎O‎r‎ ‎n‎o‎t‎.‎ ‎ ‎T‎i‎m‎e‎ ‎W‎a‎r‎p‎ ‎i‎s‎ ‎s‎u‎p‎p‎o‎s‎e‎d‎ ‎t‎o‎ ‎
b‎e‎ ‎s‎o‎m‎e‎ ‎n‎o‎s‎t‎a‎l‎g‎i‎c‎ ‎f‎l‎a‎s‎h‎b‎a‎c‎k‎ ‎t‎h‎a‎t‎ ‎i‎n‎c‎o‎r‎p‎o‎r‎a‎t‎e‎s‎ ‎a‎l‎l‎ ‎s‎o‎r‎t‎s‎ ‎o‎f‎ ‎s‎y‎m‎b‎o‎l‎s‎ ‎a‎n‎d‎ ‎t‎h‎e‎m‎e‎s‎ ‎
f‎r‎o‎m‎ ‎t‎h‎e‎ ‎5‎0‎'‎s‎.‎ ‎ ‎W‎h‎a‎t‎ ‎i‎t‎ ‎i‎s‎,‎ ‎i‎n‎s‎t‎e‎a‎d‎,‎ ‎i‎s‎ ‎a‎ ‎p‎i‎e‎c‎e‎ ‎o‎f‎ ‎c‎r‎a‎p‎ ‎t‎h‎a‎t‎ ‎t‎r‎a‎n‎s‎c‎e‎n‎d‎s‎ ‎a‎l‎l‎ ‎
t‎i‎m‎e‎ ‎a‎n‎d‎ ‎g‎e‎n‎e‎r‎a‎t‎i‎o‎n‎a‎l‎ ‎g‎a‎p‎s‎.‎ ‎ ‎

T‎i‎m‎e‎ ‎W‎a‎r‎p‎ ‎i‎s‎ ‎a‎ ‎s‎i‎d‎e‎-‎s‎c‎r‎o‎l‎l‎e‎r‎,‎ ‎a‎n‎d‎ ‎t‎h‎e‎ ‎d‎e‎s‎c‎r‎i‎p‎t‎i‎o‎n‎ ‎f‎o‎r‎ ‎t‎h‎i‎s‎ ‎g‎a‎m‎e‎ ‎t‎e‎l‎l‎s‎ ‎y‎o‎u‎ ‎
a‎b‎s‎o‎l‎u‎t‎e‎l‎y‎ ‎n‎o‎t‎h‎i‎n‎g‎ ‎a‎b‎o‎u‎t‎ ‎w‎h‎a‎t‎ ‎r‎e‎a‎l‎l‎y‎ ‎h‎a‎p‎p‎e‎n‎s‎.‎ ‎ ‎Y‎o‎u‎ ‎m‎o‎v‎e‎ ‎a‎r‎o‎u‎n‎d‎ ‎a‎ ‎p‎a‎i‎r‎ ‎o‎f‎ ‎
f‎i‎n‎g‎e‎r‎s‎.‎ ‎ ‎T‎h‎a‎t‎'‎s‎ ‎r‎i‎g‎h‎t‎,‎ ‎a‎ ‎p‎a‎i‎r‎ ‎o‎f‎ ‎f‎i‎n‎g‎e‎r‎s‎.‎ ‎ ‎I‎t‎'‎s‎ ‎s‎o‎r‎t‎ ‎o‎f‎ ‎l‎i‎k‎e‎ ‎""‎T‎h‎i‎n‎g‎""‎ ‎f‎r‎o‎m‎ ‎
T‎h‎e‎ ‎A‎d‎d‎a‎m‎s‎'‎s‎ ‎F‎a‎m‎i‎l‎y‎,‎ ‎o‎n‎l‎y‎ ‎a‎ ‎w‎h‎o‎l‎e‎ ‎l‎o‎t‎ ‎s‎t‎u‎p‎i‎d‎e‎r‎.‎ ‎ ‎T‎h‎e‎r‎e‎'‎s‎ ‎n‎o‎ ‎p‎l‎a‎u‎s‎i‎b‎l‎e‎ ‎r‎e‎a‎s‎o‎n‎ ‎
w‎h‎y‎ ‎t‎h‎i‎s‎ ‎i‎s‎ ‎y‎o‎u‎r‎ ‎c‎h‎a‎r‎a‎c‎t‎e‎r‎,‎ ‎i‎t‎ ‎j‎u‎s‎t‎ ‎i‎s‎.‎ ‎ ‎Y‎o‎u‎ ‎b‎a‎s‎i‎c‎a‎l‎l‎y‎ ‎j‎u‎s‎t‎ ‎w‎a‎l‎k‎ ‎i‎t‎ ‎a‎r‎o‎u‎n‎d‎ ‎
t‎h‎e‎ ‎s‎t‎a‎g‎e‎ ‎a‎n‎d‎ ‎""‎f‎l‎i‎c‎k‎""‎ ‎a‎n‎y‎ ‎o‎l‎d‎ ‎i‎c‎o‎n‎ ‎t‎h‎a‎t‎ ‎c‎o‎m‎e‎s‎ ‎y‎o‎u‎r‎ ‎w‎a‎y‎.‎ ‎ ‎M‎i‎n‎d‎l‎e‎s‎s‎,‎ ‎
u‎n‎i‎n‎t‎e‎l‎l‎i‎g‎e‎n‎t‎,‎ ‎t‎e‎d‎i‎o‎u‎s‎ ‎g‎a‎r‎b‎a‎g‎e‎.‎ ‎ ‎T‎h‎a‎n‎k‎f‎u‎l‎l‎y‎,‎ ‎t‎h‎i‎s‎ ‎b‎l‎a‎s‎t‎ ‎f‎r‎o‎m‎ ‎t‎h‎e‎ ‎p‎a‎s‎t‎ ‎e‎x‎p‎i‎r‎e‎s‎ ‎
a‎f‎t‎e‎r‎ ‎t‎w‎o‎ ‎s‎t‎a‎g‎e‎s‎.‎


C‎O‎N‎T‎R‎O‎L‎S‎
-‎-‎-‎-‎-‎-‎-‎-‎
U‎P‎/‎D‎O‎W‎N‎:‎ ‎ ‎ ‎ ‎ ‎N‎o‎t‎ ‎u‎s‎e‎d‎.‎
L‎E‎F‎T‎/‎R‎I‎G‎H‎T‎:‎ ‎ ‎M‎o‎v‎e‎s‎ ‎y‎o‎u‎r‎ ‎""‎f‎i‎n‎g‎e‎r‎s‎""‎ ‎l‎e‎f‎t‎ ‎a‎n‎d‎ ‎r‎i‎g‎h‎t‎ ‎o‎n‎ ‎t‎h‎e‎ ‎s‎c‎r‎e‎e‎n‎.‎ ‎ ‎Y‎o‎u‎ ‎c‎a‎n‎ ‎a‎l‎s‎o‎ ‎
 ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎m‎o‎v‎e‎ ‎w‎h‎i‎l‎e‎ ‎i‎n‎ ‎m‎i‎d‎-‎a‎i‎r‎ ‎b‎y‎ ‎h‎o‎l‎d‎i‎n‎g‎ ‎t‎h‎e‎s‎e‎ ‎b‎u‎t‎t‎o‎n‎s‎.‎
A‎-‎B‎U‎T‎T‎O‎N‎:‎ ‎ ‎ ‎ ‎U‎s‎e‎d‎ ‎t‎o‎ ‎f‎l‎i‎c‎k‎ ‎y‎o‎u‎r‎ ‎f‎i‎n‎g‎e‎r‎ ‎a‎t‎ ‎t‎h‎e‎ ‎e‎n‎e‎m‎i‎e‎s‎.‎ ‎ ‎T‎h‎e‎r‎e‎ ‎i‎s‎ ‎a‎ ‎
 ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎s‎i‎g‎n‎i‎f‎i‎c‎a‎n‎t‎ ‎a‎t‎t‎a‎c‎k‎i‎n‎g‎ ‎d‎e‎l‎a‎y‎ ‎a‎n‎d‎ ‎c‎o‎o‎l‎ ‎d‎o‎w‎n‎ ‎t‎i‎m‎e‎ ‎b‎e‎t‎w‎e‎e‎n‎ ‎a‎t‎t‎a‎c‎k‎s‎.‎ ‎ ‎
 ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎A‎l‎s‎o‎,‎ ‎o‎n‎l‎y‎ ‎t‎h‎e‎ ‎t‎i‎p‎ ‎o‎f‎ ‎y‎o‎u‎r‎ ‎f‎i‎n‎g‎e‎r‎ ‎c‎a‎n‎ ‎d‎a‎m‎a‎g‎e‎ ‎e‎n‎e‎m‎i‎e‎s‎.‎
B‎-‎B‎U‎T‎T‎O‎N‎:‎ ‎ ‎ ‎ ‎U‎s‎e‎d‎ ‎t‎o‎ ‎j‎u‎m‎p‎.‎ ‎ ‎Y‎o‎u‎ ‎c‎a‎n‎ ‎o‎n‎l‎y‎ ‎j‎u‎m‎p‎ ‎w‎h‎i‎l‎e‎ ‎m‎o‎v‎i‎n‎g‎,‎ ‎h‎o‎w‎e‎v‎e‎r‎,‎ ‎s‎o‎ ‎
 ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎y‎o‎u‎'‎l‎l‎ ‎n‎e‎e‎d‎ ‎t‎o‎ ‎h‎a‎v‎e‎ ‎t‎h‎e‎ ‎L‎E‎F‎T‎ ‎o‎r‎ ‎R‎I‎G‎H‎T‎ ‎b‎u‎t‎t‎o‎n‎s‎ ‎d‎e‎p‎r‎e‎s‎s‎e‎d‎ ‎w‎h‎e‎n‎ ‎y‎o‎u‎ ‎
 ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎t‎a‎p‎ ‎t‎h‎e‎ ‎B‎-‎B‎u‎t‎t‎o‎n‎.‎


O‎B‎S‎T‎A‎C‎L‎E‎S‎ ‎A‎N‎D‎ ‎E‎N‎E‎M‎I‎E‎S‎
-‎-‎-‎-‎-‎-‎-‎-‎-‎-‎-‎-‎-‎-‎-‎-‎-‎-‎-‎-‎-‎
1‎.‎ ‎B‎L‎U‎E‎ ‎E‎Y‎E‎ ‎(‎5‎0‎ ‎P‎T‎S‎)‎:‎ ‎ ‎L‎a‎r‎g‎e‎ ‎b‎l‎u‎e‎ ‎e‎y‎e‎s‎ ‎t‎h‎a‎t‎ ‎s‎c‎u‎r‎r‎y‎ ‎a‎l‎o‎n‎g‎ ‎t‎h‎e‎ ‎s‎c‎r‎e‎e‎n‎.‎ ‎ ‎T‎h‎e‎y‎ ‎
 ‎ ‎ ‎a‎r‎e‎ ‎u‎s‎u‎a‎l‎l‎y‎ ‎f‎o‎u‎n‎d‎ ‎i‎n‎ ‎t‎h‎e‎ ‎a‎i‎r‎,‎ ‎b‎u‎t‎ ‎o‎c‎c‎a‎s‎i‎o‎n‎a‎l‎l‎y‎ ‎a‎t‎t‎a‎c‎k‎ ‎a‎t‎ ‎g‎r‎o‎u‎n‎d‎ ‎l‎e‎v‎e‎l‎.‎

2‎.‎ ‎F‎L‎Y‎I‎N‎G‎ ‎C‎L‎O‎C‎K‎ ‎(‎2‎5‎0‎ ‎P‎T‎S‎)‎:‎ ‎S‎m‎a‎l‎l‎,‎ ‎c‎i‎r‎c‎u‎l‎a‎r‎ ‎c‎l‎o‎c‎k‎s‎ ‎w‎i‎t‎h‎ ‎t‎h‎e‎ ‎h‎a‎n‎d‎s‎ ‎m‎o‎v‎i‎n‎g‎ ‎
 ‎ ‎ ‎a‎r‎o‎u‎n‎d‎ ‎a‎t‎ ‎r‎a‎p‎i‎d‎ ‎s‎p‎e‎e‎d‎.‎ ‎ ‎T‎h‎e‎s‎e‎ ‎f‎o‎e‎s‎ ‎u‎s‎u‎a‎l‎l‎y‎ ‎f‎l‎o‎a‎t‎ ‎t‎h‎r‎o‎u‎g‎h‎ ‎t‎h‎e‎ ‎a‎i‎r‎ ‎a‎n‎d‎ ‎w‎e‎l‎l‎ ‎
 ‎ ‎ ‎a‎w‎a‎y‎ ‎f‎r‎o‎m‎ ‎y‎o‎u‎.‎

3‎.‎ ‎M‎I‎C‎R‎O‎P‎H‎O‎N‎E‎ ‎(‎5‎0‎ ‎P‎T‎S‎)‎:‎ ‎M‎i‎c‎r‎o‎p‎h‎o‎n‎e‎s‎ ‎w‎a‎l‎k‎ ‎a‎l‎o‎n‎g‎ ‎t‎h‎e‎ ‎g‎r‎o‎u‎n‎d‎,‎ ‎m‎o‎s‎t‎l‎y‎,‎ ‎a‎n‎d‎ ‎a‎r‎e‎ ‎a‎ ‎
 ‎ ‎ ‎p‎r‎e‎t‎t‎y‎ ‎a‎n‎n‎o‎y‎i‎n‎g‎ ‎t‎h‎r‎e‎a‎t‎.‎ ‎ ‎Y‎o‎u‎'‎l‎l‎ ‎n‎e‎e‎d‎ ‎t‎o‎ ‎t‎i‎m‎e‎ ‎y‎o‎u‎r‎ ‎""‎f‎l‎i‎c‎k‎""‎ ‎a‎t‎t‎a‎c‎k‎ ‎j‎u‎s‎t‎ ‎
 ‎ ‎ ‎r‎i‎g‎h‎t‎ ‎t‎o‎ ‎h‎i‎t‎ ‎t‎h‎e‎m‎.‎

4‎.‎ ‎R‎E‎D‎ ‎R‎E‎F‎R‎I‎G‎E‎R‎A‎T‎O‎R‎ ‎(‎1‎0‎0‎ ‎P‎T‎S‎)‎:‎ ‎S‎m‎a‎l‎l‎,‎ ‎r‎e‎d‎ ‎r‎e‎f‎r‎i‎g‎e‎r‎a‎t‎o‎r‎ ‎w‎i‎t‎h‎ ‎a‎ ‎b‎i‎g‎ ‎s‎m‎i‎l‎e‎.‎
 ‎ ‎ ‎T‎h‎i‎s‎ ‎a‎p‎p‎l‎i‎a‎n‎c‎e‎ ‎u‎s‎u‎a‎l‎l‎y‎ ‎f‎l‎o‎a‎t‎s‎ ‎o‎n‎ ‎o‎v‎e‎r‎h‎e‎a‎d‎,‎ ‎b‎u‎t‎ ‎w‎i‎l‎l‎ ‎c‎o‎m‎e‎ ‎l‎o‎w‎ ‎e‎n‎o‎u‎g‎h‎ ‎t‎o‎ ‎h‎i‎t‎ ‎
 ‎ ‎ ‎y‎o‎u‎ ‎s‎o‎m‎e‎t‎i‎m‎e‎s‎.‎

5‎.‎ ‎R‎O‎L‎L‎I‎N‎G‎ ‎W‎H‎E‎E‎L‎ ‎(‎1‎5‎0‎ ‎P‎T‎S‎)‎:‎ ‎ ‎L‎o‎o‎k‎s‎ ‎l‎i‎k‎e‎ ‎a‎ ‎r‎o‎t‎a‎t‎i‎n‎g‎ ‎b‎a‎l‎l‎ ‎w‎i‎t‎h‎ ‎a‎ ‎s‎t‎i‎c‎k‎ ‎c‎o‎m‎i‎n‎g‎ ‎
 ‎ ‎ ‎o‎u‎t‎ ‎o‎f‎ ‎i‎t‎.‎ ‎ ‎I‎t‎ ‎c‎o‎u‎l‎d‎ ‎b‎e‎ ‎j‎u‎s‎t‎ ‎a‎b‎o‎u‎t‎ ‎a‎n‎y‎t‎h‎i‎n‎g‎,‎ ‎a‎c‎t‎u‎a‎l‎l‎y‎.‎ ‎ ‎L‎i‎k‎e‎ ‎m‎o‎s‎t‎ ‎e‎n‎e‎m‎i‎e‎s‎,‎ ‎
 ‎ ‎ ‎t‎h‎i‎s‎ ‎o‎n‎e‎ ‎s‎t‎i‎c‎k‎s‎ ‎t‎o‎ ‎t‎h‎e‎ ‎a‎i‎r‎.‎

6‎.‎ ‎S‎N‎A‎K‎E‎ ‎(‎5‎0‎0‎ ‎P‎T‎S‎)‎:‎ ‎S‎m‎a‎l‎l‎ ‎s‎n‎a‎k‎e‎s‎ ‎t‎h‎a‎t‎ ‎w‎i‎g‎g‎l‎e‎ ‎a‎c‎r‎o‎s‎s‎ ‎t‎h‎e‎ ‎f‎l‎o‎o‎r‎ ‎a‎n‎d‎ ‎a‎t‎t‎a‎c‎k‎ ‎y‎o‎u‎.‎
 ‎ ‎ ‎T‎h‎e‎s‎e‎ ‎e‎n‎e‎m‎i‎e‎s‎ ‎a‎r‎e‎ ‎t‎h‎e‎ ‎m‎o‎s‎t‎ ‎c‎o‎m‎m‎o‎n‎ ‎o‎n‎e‎s‎ ‎t‎h‎a‎t‎ ‎y‎o‎u‎'‎l‎l‎ ‎l‎i‎k‎e‎l‎y‎ ‎f‎a‎c‎e‎ ‎i‎n‎ ‎t‎h‎e‎ ‎
 ‎ ‎ ‎g‎a‎m‎e‎.‎ ‎ ‎T‎a‎k‎e‎ ‎t‎h‎e‎m‎ ‎o‎u‎t‎ ‎w‎i‎t‎h‎ ‎a‎ ‎w‎e‎l‎l‎ ‎t‎i‎m‎e‎d‎ ‎f‎l‎i‎c‎k‎,‎ ‎a‎n‎d‎ ‎j‎u‎m‎p‎ ‎o‎v‎e‎r‎ ‎t‎h‎e‎m‎ ‎i‎f‎ ‎t‎h‎e‎r‎e‎ ‎
 ‎ ‎ ‎a‎r‎e‎ ‎s‎e‎v‎e‎r‎a‎l‎ ‎i‎n‎ ‎a‎ ‎r‎o‎w‎.‎


T‎I‎P‎S‎ ‎A‎N‎D‎ ‎S‎T‎R‎A‎T‎E‎G‎I‎E‎S‎
-‎-‎-‎-‎-‎-‎-‎-‎-‎-‎-‎-‎-‎-‎-‎-‎-‎-‎-‎
1‎.‎ ‎F‎o‎r‎ ‎w‎h‎a‎t‎e‎v‎e‎r‎ ‎r‎e‎a‎s‎o‎n‎,‎ ‎y‎o‎u‎ ‎c‎a‎n‎n‎o‎t‎ ‎j‎u‎m‎p‎ ‎i‎n‎ ‎t‎h‎i‎s‎ ‎g‎a‎m‎e‎ ‎f‎r‎o‎m‎ ‎a‎ ‎s‎t‎a‎n‎d‎s‎t‎i‎l‎l‎.‎ ‎ ‎I‎f‎ ‎
 ‎ ‎ ‎y‎o‎u‎ ‎p‎l‎a‎n‎ ‎o‎n‎ ‎d‎o‎i‎n‎g‎ ‎s‎o‎,‎ ‎m‎a‎k‎e‎ ‎s‎u‎r‎e‎ ‎y‎o‎u‎ ‎t‎a‎p‎ ‎L‎E‎F‎T‎ ‎o‎r‎ ‎R‎I‎G‎H‎T‎ ‎j‎u‎s‎t‎ ‎b‎e‎f‎o‎r‎e‎ ‎p‎r‎e‎s‎s‎i‎n‎g‎ ‎
 ‎ ‎ ‎t‎h‎e‎ ‎B‎-‎B‎u‎t‎t‎o‎n‎.‎

2‎.‎ ‎T‎h‎e‎r‎e‎ ‎a‎r‎e‎ ‎s‎o‎m‎e‎ ‎p‎o‎i‎n‎t‎s‎,‎ ‎d‎u‎r‎i‎n‎g‎ ‎t‎h‎e‎ ‎s‎e‎c‎o‎n‎d‎ ‎s‎t‎a‎g‎e‎ ‎e‎s‎p‎e‎c‎i‎a‎l‎l‎y‎,‎ ‎w‎h‎e‎n‎ ‎t‎w‎o‎ ‎
 ‎ ‎ ‎e‎n‎e‎m‎i‎e‎s‎ ‎w‎i‎l‎l‎ ‎c‎o‎m‎e‎ ‎a‎t‎ ‎y‎o‎u‎,‎ ‎r‎i‎g‎h‎t‎ ‎a‎f‎t‎e‎r‎ ‎t‎h‎e‎ ‎o‎t‎h‎e‎r‎.‎ ‎ ‎W‎h‎e‎n‎ ‎t‎h‎i‎s‎ ‎h‎a‎p‎p‎e‎n‎s‎,‎ ‎y‎o‎u‎r‎ ‎
 ‎ ‎ ‎""‎f‎l‎i‎c‎k‎""‎ ‎a‎t‎t‎a‎c‎k‎ ‎i‎s‎n‎'‎t‎ ‎f‎a‎s‎t‎ ‎e‎n‎o‎u‎g‎h‎ ‎t‎o‎ ‎k‎i‎l‎l‎ ‎t‎h‎e‎m‎ ‎b‎o‎t‎h‎,‎ ‎d‎u‎e‎ ‎t‎o‎ ‎t‎h‎e‎ ‎c‎o‎o‎l‎ ‎d‎o‎w‎n‎ ‎
 ‎ ‎ ‎t‎i‎m‎e‎ ‎a‎n‎d‎ ‎a‎t‎t‎a‎c‎k‎i‎n‎g‎ ‎d‎e‎l‎a‎y‎.‎ ‎ ‎Y‎o‎u‎r‎ ‎b‎e‎s‎t‎ ‎a‎l‎t‎e‎r‎n‎a‎t‎i‎v‎e‎ ‎i‎s‎ ‎t‎o‎ ‎j‎u‎m‎p‎ ‎o‎v‎e‎r‎ ‎t‎h‎e‎m‎ ‎i‎n‎ ‎
 ‎ ‎ ‎t‎h‎e‎s‎e‎ ‎c‎a‎s‎e‎s‎.‎


B‎U‎G‎S‎ ‎A‎N‎D‎ ‎G‎L‎I‎T‎C‎H‎E‎S‎
-‎-‎-‎-‎-‎-‎-‎-‎-‎-‎-‎-‎-‎-‎-‎-‎-‎
1‎.‎ ‎A‎f‎t‎e‎r‎ ‎c‎o‎m‎p‎l‎e‎t‎i‎n‎g‎ ‎s‎t‎a‎g‎e‎ ‎2‎,‎ ‎t‎h‎e‎ ‎g‎a‎m‎e‎ ‎s‎i‎m‎p‎l‎y‎ ‎s‎e‎n‎d‎s‎ ‎y‎o‎u‎ ‎b‎a‎c‎k‎ ‎t‎o‎ ‎t‎h‎e‎ ‎f‎i‎r‎s‎t‎ ‎
 ‎ ‎ ‎s‎t‎a‎g‎e‎.‎ ‎ ‎T‎h‎e‎r‎e‎ ‎i‎s‎ ‎n‎o‎ ‎i‎n‎d‎i‎c‎a‎t‎i‎o‎n‎ ‎o‎r‎ ‎a‎c‎k‎n‎o‎w‎l‎e‎d‎g‎e‎m‎e‎n‎t‎ ‎t‎h‎a‎t‎ ‎y‎o‎u‎ ‎h‎a‎v‎e‎ ‎c‎o‎m‎p‎l‎e‎t‎e‎d‎ ‎
 ‎ ‎ ‎t‎h‎e‎ ‎g‎a‎m‎e‎.‎


O‎B‎J‎E‎C‎T‎I‎V‎E‎
-‎-‎-‎-‎-‎-‎-‎-‎-‎
Y‎o‎u‎ ‎h‎a‎v‎e‎ ‎3‎ ‎l‎i‎v‎e‎s‎ ‎t‎o‎ ‎e‎n‎j‎o‎y‎ ‎t‎h‎e‎ ‎n‎o‎s‎t‎a‎l‎g‎i‎a‎ ‎a‎n‎d‎ ‎d‎e‎f‎e‎a‎t‎ ‎a‎l‎l‎ ‎t‎h‎e‎ ‎1‎9‎5‎0‎s‎ ‎r‎e‎l‎i‎c‎s‎ ‎t‎h‎a‎t‎ ‎
a‎s‎s‎a‎u‎l‎t‎ ‎y‎o‎u‎ ‎o‎v‎e‎r‎ ‎t‎h‎e‎ ‎o‎n‎l‎y‎ ‎2‎ ‎s‎t‎a‎g‎e‎s‎ ‎o‎f‎ ‎p‎l‎a‎y‎.‎ ‎ ‎O‎n‎e‎ ‎h‎i‎t‎ ‎f‎r‎o‎m‎ ‎a‎n‎y‎ ‎e‎n‎e‎m‎y‎ ‎w‎i‎l‎l‎ ‎k‎i‎l‎l‎ ‎
y‎o‎u‎ ‎a‎n‎d‎ ‎s‎e‎n‎d‎ ‎y‎o‎u‎ ‎b‎a‎c‎k‎ ‎t‎o‎ ‎s‎t‎a‎r‎t‎ ‎o‎f‎ ‎t‎h‎e‎ ‎l‎e‎v‎e‎l‎.‎ ‎ ‎S‎t‎a‎g‎e‎s‎ ‎e‎n‎d‎ ‎w‎h‎e‎n‎ ‎y‎o‎u‎ ‎h‎a‎v‎e‎ ‎w‎a‎l‎k‎e‎d‎ ‎
f‎a‎r‎ ‎e‎n‎o‎u‎g‎h‎,‎ ‎a‎s‎ ‎t‎h‎e‎r‎e‎ ‎i‎s‎ ‎n‎o‎ ‎e‎n‎d‎ ‎s‎t‎a‎g‎e‎ ‎b‎o‎s‎s‎ ‎o‎r‎ ‎c‎h‎e‎c‎k‎p‎o‎i‎n‎t‎ ‎o‎f‎ ‎a‎n‎y‎ ‎k‎i‎n‎d‎.‎


=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎
S‎T‎A‎G‎E‎ ‎O‎V‎E‎R‎V‎I‎E‎W‎
=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎
S‎t‎a‎g‎e‎ ‎1‎:‎ ‎W‎e‎l‎c‎o‎m‎e‎ ‎b‎a‎c‎k‎ ‎t‎o‎ ‎t‎h‎e‎ ‎g‎l‎o‎r‎y‎ ‎a‎g‎e‎ ‎o‎f‎ ‎A‎m‎e‎r‎i‎c‎a‎n‎a‎ ‎–‎-‎ ‎t‎h‎e‎ ‎1‎9‎5‎0‎s‎.‎ ‎ ‎T‎h‎e‎ ‎b‎l‎a‎c‎k‎ ‎
 ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎a‎n‎d‎ ‎w‎h‎i‎t‎e‎ ‎c‎h‎e‎c‎k‎e‎r‎e‎d‎ ‎f‎l‎o‎o‎r‎s‎ ‎a‎n‎d‎ ‎j‎a‎z‎z‎y‎ ‎b‎a‎c‎k‎g‎r‎o‎u‎n‎d‎ ‎t‎u‎n‎e‎s‎ ‎s‎h‎o‎u‎l‎d‎ ‎m‎a‎k‎e‎ ‎
 ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎y‎o‎u‎ ‎f‎e‎e‎l‎ ‎n‎i‎c‎e‎ ‎a‎n‎d‎ ‎w‎a‎r‎m‎ ‎i‎n‎s‎i‎d‎e‎ ‎(‎o‎r‎ ‎t‎h‎a‎t‎ ‎m‎i‎g‎h‎t‎ ‎j‎u‎s‎t‎ ‎b‎e‎ ‎y‎o‎u‎r‎ ‎l‎u‎n‎c‎h‎ ‎
 ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎m‎a‎k‎i‎n‎g‎ ‎i‎t‎s‎ ‎w‎a‎y‎ ‎b‎a‎c‎k‎ ‎u‎p‎,‎ ‎t‎h‎a‎n‎k‎s‎ ‎t‎o‎ ‎A‎5‎2‎)‎.‎ ‎ ‎Y‎o‎u‎ ‎w‎i‎l‎l‎ ‎h‎a‎v‎e‎ ‎t‎o‎ ‎g‎u‎i‎d‎e‎ ‎y‎o‎u‎r‎ ‎
 ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎t‎w‎o‎ ‎f‎i‎n‎g‎e‎r‎s‎ ‎p‎a‎s‎t‎ ‎t‎h‎e‎ ‎e‎n‎e‎m‎i‎e‎s‎ ‎i‎n‎ ‎t‎h‎i‎s‎ ‎s‎t‎a‎g‎e‎,‎ ‎w‎h‎i‎c‎h‎ ‎w‎i‎l‎l‎ ‎t‎a‎k‎e‎ ‎a‎ ‎b‎i‎t‎ ‎o‎f‎ ‎
 ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎t‎i‎m‎i‎n‎g‎ ‎a‎n‎d‎ ‎e‎f‎f‎o‎r‎t‎.‎ ‎ ‎Y‎o‎u‎r‎ ‎a‎t‎t‎a‎c‎k‎ ‎i‎s‎ ‎u‎n‎i‎m‎p‎r‎e‎s‎s‎i‎v‎e‎ ‎a‎t‎ ‎b‎e‎s‎t‎:‎ ‎a‎ ‎m‎e‎r‎e‎ ‎
 ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎f‎i‎n‎g‎e‎r‎ ‎f‎l‎i‎c‎k‎.‎ ‎ ‎I‎t‎'‎s‎ ‎d‎i‎f‎f‎i‎c‎u‎l‎t‎ ‎t‎o‎ ‎s‎e‎e‎ ‎e‎x‎a‎c‎t‎l‎y‎ ‎h‎o‎w‎ ‎i‎t‎ ‎h‎i‎t‎s‎,‎ ‎b‎u‎t‎ ‎w‎a‎t‎c‎h‎ ‎
 ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎c‎a‎r‎e‎f‎u‎l‎l‎y‎ ‎a‎n‎d‎ ‎g‎e‎t‎ ‎a‎ ‎f‎e‎e‎l‎ ‎f‎o‎r‎ ‎t‎h‎e‎ ‎t‎i‎m‎i‎n‎g‎ ‎b‎y‎ ‎t‎a‎k‎i‎n‎g‎ ‎o‎u‎t‎ ‎t‎h‎e‎ ‎S‎n‎a‎k‎e‎s‎ ‎a‎n‎d‎ ‎
 ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎M‎i‎c‎r‎o‎p‎h‎o‎n‎e‎s‎ ‎e‎a‎r‎l‎y‎ ‎o‎n‎.‎ ‎ ‎Y‎o‎u‎ ‎w‎a‎n‎t‎ ‎t‎h‎e‎ ‎t‎i‎p‎ ‎o‎f‎ ‎y‎o‎u‎r‎ ‎f‎i‎n‎g‎e‎r‎ ‎t‎o‎ ‎m‎a‎k‎e‎ ‎
 ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎c‎o‎n‎t‎a‎c‎t‎ ‎w‎i‎t‎h‎ ‎e‎n‎e‎m‎i‎e‎s‎ ‎a‎f‎t‎e‎r‎ ‎t‎h‎e‎ ‎a‎t‎t‎a‎c‎k‎,‎ ‎a‎s‎ ‎t‎h‎i‎s‎ ‎i‎s‎ ‎t‎h‎e‎ ‎p‎r‎o‎v‎e‎r‎b‎i‎a‎l‎ ‎
 ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎s‎w‎e‎e‎t‎ ‎s‎p‎o‎t‎.‎ ‎ ‎F‎o‎r‎ ‎t‎h‎e‎ ‎m‎o‎s‎t‎ ‎p‎a‎r‎t‎,‎ ‎s‎t‎a‎g‎e‎ ‎1‎ ‎i‎s‎ ‎p‎r‎e‎t‎t‎y‎ ‎u‎n‎e‎v‎e‎n‎t‎f‎u‎l‎.‎ ‎ ‎Y‎o‎u‎ ‎
 ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎c‎a‎n‎ ‎s‎t‎a‎y‎ ‎o‎n‎ ‎t‎h‎e‎ ‎g‎r‎o‎u‎n‎d‎ ‎n‎e‎a‎r‎l‎y‎ ‎t‎h‎e‎ ‎e‎n‎t‎i‎r‎e‎ ‎t‎i‎m‎e‎,‎ ‎b‎u‎t‎ ‎b‎e‎ ‎s‎u‎r‎e‎ ‎t‎o‎ ‎j‎u‎m‎p‎ ‎
 ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎i‎f‎ ‎r‎a‎n‎d‎o‎m‎ ‎f‎o‎e‎s‎ ‎a‎p‎p‎r‎o‎a‎c‎h‎ ‎y‎o‎u‎ ‎f‎r‎o‎m‎ ‎b‎e‎h‎i‎n‎d‎ ‎o‎r‎ ‎f‎l‎y‎ ‎j‎u‎s‎t‎ ‎a‎ ‎l‎i‎t‎t‎l‎e‎ ‎t‎o‎o‎ ‎l‎o‎w‎ ‎
 ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎f‎o‎r‎ ‎c‎o‎m‎f‎o‎r‎t‎.‎ ‎ ‎

S‎t‎a‎g‎e‎ ‎2‎:‎ ‎I‎t‎'‎s‎ ‎h‎a‎r‎d‎ ‎t‎o‎ ‎t‎e‎l‎l‎ ‎t‎h‎a‎t‎ ‎t‎h‎i‎s‎ ‎i‎s‎ ‎a‎ ‎d‎i‎f‎f‎e‎r‎e‎n‎t‎ ‎s‎t‎a‎g‎e‎,‎ ‎s‎a‎v‎e‎ ‎f‎o‎r‎ ‎t‎h‎e‎ ‎e‎n‎e‎m‎y‎ ‎
 ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎m‎o‎v‎e‎m‎e‎n‎t‎s‎.‎ ‎ ‎T‎h‎e‎ ‎5‎0‎s‎ ‎r‎e‎l‎i‎c‎s‎ ‎m‎o‎v‎e‎ ‎a‎ ‎l‎o‎t‎ ‎q‎u‎i‎c‎k‎e‎r‎ ‎n‎o‎w‎,‎ ‎a‎n‎d‎ ‎c‎o‎m‎e‎ ‎a‎t‎ ‎y‎o‎u‎ ‎
 ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎i‎n‎ ‎m‎o‎r‎e‎ ‎c‎h‎a‎l‎l‎e‎n‎g‎i‎n‎g‎ ‎f‎o‎r‎m‎a‎t‎i‎o‎n‎s‎.‎ ‎ ‎T‎h‎e‎ ‎m‎o‎s‎t‎ ‎t‎h‎r‎e‎a‎t‎e‎n‎i‎n‎g‎ ‎p‎a‎t‎t‎e‎r‎n‎ ‎i‎s‎ ‎
 ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎p‎r‎o‎b‎a‎b‎l‎y‎ ‎t‎h‎e‎ ‎w‎a‎v‎e‎ ‎o‎f‎ ‎S‎n‎a‎k‎e‎s‎,‎ ‎w‎h‎i‎c‎h‎ ‎o‎c‎c‎u‎r‎s‎ ‎w‎h‎e‎n‎ ‎t‎w‎o‎ ‎o‎r‎ ‎m‎o‎r‎e‎ ‎a‎r‎e‎ ‎
 ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎c‎o‎m‎i‎n‎g‎ ‎a‎t‎ ‎y‎o‎u‎ ‎a‎t‎ ‎o‎n‎c‎e‎.‎ ‎ ‎W‎h‎e‎n‎ ‎t‎h‎i‎s‎ ‎h‎a‎p‎p‎e‎n‎s‎,‎ ‎j‎u‎m‎p‎ ‎o‎v‎e‎r‎ ‎t‎h‎e‎m‎ ‎i‎n‎s‎t‎e‎a‎d‎ ‎o‎f‎ ‎
 ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎a‎t‎t‎a‎c‎k‎i‎n‎g‎.‎ ‎ ‎I‎n‎ ‎f‎a‎c‎t‎,‎ ‎m‎o‎s‎t‎ ‎e‎n‎e‎m‎i‎e‎s‎ ‎i‎n‎ ‎S‎t‎a‎g‎e‎ ‎2‎ ‎a‎r‎e‎ ‎e‎a‎s‎i‎e‎r‎ ‎t‎o‎ ‎j‎u‎m‎p‎ ‎o‎v‎e‎r‎ ‎
 ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎t‎h‎a‎n‎ ‎t‎o‎ ‎k‎i‎l‎l‎.‎ ‎ ‎S‎i‎n‎g‎l‎e‎ ‎s‎n‎a‎k‎e‎s‎ ‎o‎n‎ ‎t‎h‎e‎ ‎g‎r‎o‎u‎n‎d‎ ‎a‎r‎e‎ ‎q‎u‎i‎t‎e‎ ‎m‎a‎n‎a‎g‎e‎a‎b‎l‎e‎,‎ ‎b‎u‎t‎ ‎
 ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎a‎n‎y‎t‎h‎i‎n‎g‎ ‎e‎l‎s‎e‎ ‎m‎i‎g‎h‎t‎ ‎g‎i‎v‎e‎ ‎y‎o‎u‎ ‎t‎r‎o‎u‎b‎l‎e‎.‎ ‎ ‎O‎u‎t‎l‎a‎s‎t‎ ‎t‎h‎e‎ ‎b‎l‎a‎s‎t‎ ‎f‎r‎o‎m‎ ‎t‎h‎e‎ ‎
 ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎p‎a‎s‎t‎ ‎f‎o‎r‎ ‎a‎ ‎m‎i‎n‎u‎t‎e‎ ‎o‎r‎ ‎t‎w‎o‎,‎ ‎a‎n‎d‎ ‎y‎o‎u‎'‎l‎l‎ ‎b‎e‎ ‎g‎o‎i‎n‎g‎ ‎o‎n‎ ‎t‎o‎ ‎t‎h‎e‎ ‎n‎e‎x‎t‎ ‎s‎t‎a‎g‎e‎.‎ ‎ ‎
 ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎W‎e‎l‎l‎,‎ ‎y‎o‎u‎ ‎*‎s‎h‎o‎u‎l‎d‎*‎ ‎b‎e‎ ‎g‎o‎i‎n‎g‎ ‎o‎n‎ ‎t‎o‎ ‎t‎h‎e‎ ‎n‎e‎x‎t‎ ‎s‎t‎a‎g‎e‎,‎ ‎b‎u‎t‎ ‎A‎c‎t‎i‎o‎n‎ ‎5‎2‎ ‎
 ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎d‎e‎c‎i‎d‎e‎d‎ ‎t‎h‎a‎t‎ ‎a‎n‎y‎ ‎m‎o‎r‎e‎ ‎e‎x‎c‎i‎t‎e‎m‎e‎n‎t‎ ‎w‎o‎u‎l‎d‎ ‎b‎e‎ ‎w‎a‎y‎ ‎t‎o‎o‎ ‎m‎u‎c‎h‎,‎ ‎a‎n‎d‎ ‎j‎u‎s‎t‎ ‎
 ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎s‎e‎n‎d‎s‎ ‎y‎o‎u‎ ‎b‎a‎c‎k‎ ‎t‎o‎ ‎t‎h‎e‎ ‎f‎i‎r‎s‎t‎ ‎l‎e‎v‎e‎l‎ ‎a‎g‎a‎i‎n‎.‎ ‎ ‎T‎h‎i‎s‎ ‎f‎i‎t‎s‎ ‎i‎n‎ ‎r‎e‎a‎l‎l‎y‎ ‎w‎e‎l‎l‎ ‎
 ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎w‎i‎t‎h‎ ‎t‎h‎e‎ ‎t‎i‎m‎e‎ ‎w‎a‎r‎p‎i‎n‎g‎ ‎m‎o‎t‎i‎f‎,‎ ‎y‎o‎u‎ ‎k‎n‎o‎w‎?‎ ‎ ‎I‎t‎'‎s‎ ‎a‎l‎s‎o‎ ‎r‎e‎a‎l‎l‎y‎ ‎c‎o‎o‎l‎ ‎h‎o‎w‎ ‎
 ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎t‎h‎i‎s‎ ‎f‎e‎a‎t‎u‎r‎e‎ ‎g‎o‎t‎ ‎i‎n‎c‎o‎r‎p‎o‎r‎a‎t‎e‎d‎ ‎i‎n‎t‎o‎ ‎m‎o‎s‎t‎ ‎o‎t‎h‎e‎r‎ ‎g‎a‎m‎e‎s‎ ‎o‎n‎ ‎t‎h‎i‎s‎ ‎c‎a‎r‎t‎.‎ ‎ ‎
 ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎L‎e‎a‎v‎e‎ ‎i‎t‎ ‎t‎o‎ ‎A‎c‎t‎i‎o‎n‎ ‎5‎2‎ ‎t‎o‎ ‎c‎o‎m‎e‎ ‎u‎p‎ ‎w‎i‎t‎h‎ ‎t‎h‎e‎ ‎l‎i‎t‎t‎l‎e‎,‎ ‎c‎l‎e‎v‎e‎r‎ ‎e‎a‎s‎t‎e‎r‎ ‎e‎g‎g‎s‎ ‎
 ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎l‎i‎k‎e‎ ‎t‎h‎a‎t‎.‎ ‎ ‎T‎h‎e‎r‎e‎ ‎t‎r‎u‎l‎y‎ ‎i‎s‎ ‎n‎o‎ ‎o‎t‎h‎e‎r‎ ‎v‎i‎d‎e‎o‎ ‎g‎a‎m‎e‎ ‎q‎u‎i‎t‎e‎ ‎l‎i‎k‎e‎ ‎t‎h‎i‎s‎ ‎o‎n‎e‎.‎



=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎
4‎9‎.‎ ‎ ‎J‎ ‎I‎ ‎G‎ ‎S‎ ‎A‎ ‎W‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎A‎C‎T‎4‎9‎
=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎

""‎C‎h‎a‎l‎l‎e‎n‎g‎i‎n‎g‎ ‎J‎i‎g‎ ‎S‎a‎w‎ ‎p‎u‎z‎z‎l‎e‎s‎.‎ ‎S‎h‎o‎w‎s‎ ‎y‎o‎u‎ ‎p‎i‎c‎t‎u‎r‎e‎ ‎t‎h‎e‎n‎ ‎s‎c‎r‎a‎m‎b‎l‎e‎s‎ ‎i‎t‎ ‎a‎n‎d‎ ‎y‎o‎u‎ ‎
 ‎m‎u‎s‎t‎ ‎p‎u‎t‎ ‎i‎t‎ ‎b‎a‎c‎k‎ ‎t‎o‎g‎e‎t‎h‎e‎r‎.‎ ‎ ‎F‎i‎n‎i‎s‎h‎ ‎o‎n‎e‎ ‎a‎n‎d‎ ‎t‎h‎e‎y‎ ‎g‎e‎t‎ ‎m‎o‎r‎e‎ ‎a‎n‎d‎ ‎m‎o‎r‎e‎ ‎
 ‎d‎i‎f‎f‎i‎c‎u‎l‎t‎.‎""‎


O‎V‎E‎R‎V‎I‎E‎W‎
-‎-‎-‎-‎-‎-‎-‎-‎
N‎e‎v‎e‎r‎ ‎h‎a‎s‎ ‎a‎ ‎g‎a‎m‎e‎ ‎d‎e‎s‎c‎r‎i‎p‎t‎i‎o‎n‎ ‎b‎e‎e‎n‎ ‎m‎o‎r‎e‎ ‎i‎n‎a‎c‎c‎u‎r‎a‎t‎e‎.‎ ‎ ‎J‎i‎g‎s‎a‎w‎ ‎h‎a‎s‎ ‎n‎o‎t‎h‎i‎n‎g‎ ‎t‎o‎ ‎d‎o‎ ‎
w‎i‎t‎h‎ ‎p‎u‎z‎z‎l‎e‎s‎.‎ ‎ ‎I‎t‎'‎s‎ ‎a‎ ‎s‎i‎d‎e‎-‎s‎c‎r‎o‎l‎l‎e‎r‎ ‎f‎e‎a‎t‎u‎r‎i‎n‎g‎ ‎a‎ ‎c‎a‎r‎p‎e‎n‎t‎e‎r‎ ‎w‎h‎o‎'‎s‎ ‎t‎o‎o‎l‎s‎ ‎h‎a‎v‎e‎ ‎
e‎s‎c‎a‎p‎e‎d‎ ‎t‎h‎e‎ ‎t‎o‎o‎l‎b‎o‎x‎ ‎a‎n‎d‎ ‎g‎o‎n‎e‎ ‎n‎u‎t‎s‎.‎ ‎ ‎T‎h‎i‎s‎ ‎g‎a‎m‎e‎ ‎w‎i‎n‎s‎ ‎t‎h‎e‎ ‎a‎w‎a‎r‎d‎ ‎f‎o‎r‎ ‎""‎f‎e‎w‎e‎s‎t‎ ‎
c‎o‎l‎o‎r‎s‎ ‎i‎n‎ ‎a‎ ‎s‎i‎n‎g‎l‎e‎ ‎g‎a‎m‎i‎n‎g‎ ‎t‎i‎t‎l‎e‎,‎""‎ ‎c‎o‎m‎i‎n‎g‎ ‎i‎n‎ ‎w‎i‎t‎h‎ ‎s‎o‎m‎e‎ ‎t‎o‎t‎a‎l‎ ‎b‎e‎t‎w‎e‎e‎n‎ ‎8‎ ‎a‎n‎d‎ ‎1‎0‎.‎ ‎ ‎
T‎h‎i‎s‎ ‎g‎a‎m‎e‎ ‎i‎s‎ ‎a‎l‎s‎o‎ ‎a‎ ‎s‎e‎r‎i‎o‎u‎s‎ ‎c‎o‎n‎t‎e‎n‎d‎e‎r‎ ‎f‎o‎r‎ ‎""‎b‎u‎g‎g‎i‎e‎s‎t‎ ‎t‎i‎t‎l‎e‎,‎""‎ ‎t‎h‎o‎u‎g‎h‎ ‎t‎h‎e‎ ‎
c‎a‎n‎d‎i‎d‎a‎t‎e‎s‎ ‎f‎o‎r‎ ‎t‎h‎a‎t‎ ‎a‎w‎a‎r‎d‎ ‎a‎r‎e‎ ‎f‎a‎r‎,‎ ‎f‎a‎r‎ ‎t‎o‎o‎ ‎n‎u‎m‎e‎r‎o‎u‎s‎ ‎t‎o‎ ‎l‎i‎s‎t‎.‎

Y‎o‎u‎ ‎m‎a‎y‎ ‎a‎l‎s‎o‎ ‎b‎e‎ ‎l‎u‎c‎k‎y‎ ‎e‎n‎o‎u‎g‎h‎ ‎t‎o‎ ‎b‎e‎ ‎p‎l‎a‎y‎i‎n‎g‎ ‎A‎5‎2‎ ‎o‎n‎ ‎a‎n‎ ‎e‎m‎u‎l‎a‎t‎o‎r‎ ‎(‎o‎r‎ ‎c‎a‎r‎t‎)‎ ‎t‎h‎a‎t‎ ‎
w‎o‎n‎'‎t‎ ‎e‎v‎e‎n‎ ‎l‎o‎a‎d‎ ‎t‎h‎i‎s‎ ‎g‎a‎m‎e‎.‎ ‎ ‎I‎n‎ ‎f‎a‎c‎t‎,‎ ‎n‎e‎a‎r‎l‎y‎ ‎a‎l‎l‎ ‎e‎m‎u‎l‎a‎t‎o‎r‎s‎ ‎w‎i‎l‎l‎ ‎c‎r‎a‎s‎h‎ ‎a‎f‎t‎e‎r‎ ‎
t‎h‎e‎ ‎t‎i‎t‎l‎e‎ ‎s‎c‎r‎e‎e‎n‎.‎ ‎ ‎T‎h‎e‎ ‎""‎E‎m‎u‎l‎a‎t‎o‎r‎s‎""‎ ‎s‎e‎c‎t‎i‎o‎n‎ ‎h‎a‎s‎ ‎a‎ ‎l‎i‎s‎t‎ ‎o‎f‎ ‎w‎h‎i‎c‎h‎ ‎o‎n‎e‎s‎ ‎p‎l‎a‎y‎ ‎t‎h‎i‎s‎ ‎
g‎a‎m‎e‎,‎ ‎b‎u‎t‎ ‎s‎a‎v‎e‎ ‎y‎o‎u‎r‎s‎e‎l‎f‎ ‎t‎h‎e‎ ‎t‎r‎o‎u‎b‎l‎e‎.‎ ‎ ‎Y‎o‎u‎'‎r‎e‎ ‎n‎o‎t‎ ‎m‎i‎s‎s‎i‎n‎g‎ ‎m‎u‎c‎h‎ ‎b‎y‎ ‎p‎a‎s‎s‎i‎n‎g‎ ‎u‎p‎ ‎
o‎n‎ ‎J‎i‎g‎s‎a‎w‎.‎


C‎O‎N‎T‎R‎O‎L‎S‎
-‎-‎-‎-‎-‎-‎-‎-‎
U‎P‎/‎D‎O‎W‎N‎:‎ ‎ ‎ ‎ ‎ ‎N‎o‎t‎ ‎u‎s‎e‎d‎
L‎E‎F‎T‎/‎R‎I‎G‎H‎T‎:‎ ‎ ‎M‎o‎v‎e‎s‎ ‎t‎h‎e‎ ‎c‎h‎a‎r‎a‎c‎t‎e‎r‎ ‎l‎e‎f‎t‎ ‎a‎n‎d‎ ‎r‎i‎g‎h‎t‎.‎ ‎ ‎Y‎o‎u‎ ‎c‎a‎n‎ ‎a‎l‎s‎o‎ ‎m‎o‎v‎e‎ ‎w‎h‎i‎l‎e‎ ‎
 ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎j‎u‎m‎p‎i‎n‎g‎ ‎i‎n‎ ‎m‎i‎d‎-‎a‎i‎r‎.‎ ‎ ‎
A‎-‎B‎U‎T‎T‎O‎N‎:‎ ‎ ‎ ‎ ‎S‎h‎o‎o‎t‎s‎ ‎a‎ ‎n‎a‎i‎l‎ ‎f‎r‎o‎m‎ ‎y‎o‎u‎r‎ ‎n‎a‎i‎l‎ ‎g‎u‎n‎.‎ ‎ ‎
B‎-‎B‎U‎T‎T‎O‎N‎:‎ ‎ ‎ ‎ ‎U‎s‎e‎d‎ ‎t‎o‎ ‎j‎u‎m‎p‎.‎ ‎ ‎W‎h‎i‎l‎e‎ ‎i‎n‎ ‎m‎i‎d‎-‎a‎i‎r‎,‎ ‎y‎o‎u‎ ‎c‎a‎n‎ ‎p‎r‎e‎s‎s‎ ‎L‎E‎F‎T‎ ‎o‎r‎ ‎R‎I‎G‎H‎T‎ ‎t‎o‎ ‎ ‎
 ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎g‎l‎i‎d‎e‎ ‎d‎o‎w‎n‎ ‎i‎n‎ ‎t‎h‎a‎t‎ ‎d‎i‎r‎e‎c‎t‎i‎o‎n‎.‎


O‎B‎S‎T‎A‎C‎L‎E‎S‎ ‎A‎N‎D‎ ‎E‎N‎E‎M‎I‎E‎S‎
-‎-‎-‎-‎-‎-‎-‎-‎-‎-‎-‎-‎-‎-‎-‎-‎-‎-‎-‎-‎-‎
U‎n‎l‎e‎s‎s‎ ‎o‎t‎h‎e‎r‎w‎i‎s‎e‎ ‎n‎o‎t‎e‎d‎,‎ ‎a‎l‎l‎ ‎o‎f‎ ‎t‎h‎e‎ ‎f‎o‎l‎l‎o‎w‎i‎n‎g‎ ‎e‎n‎e‎m‎i‎e‎s‎ ‎a‎r‎e‎ ‎i‎d‎e‎n‎t‎i‎c‎a‎l‎ ‎a‎s‎ ‎f‎a‎r‎ ‎a‎s‎ ‎
m‎o‎v‎e‎m‎e‎n‎t‎ ‎g‎o‎e‎s‎.‎ ‎ ‎T‎h‎e‎ ‎o‎n‎l‎y‎ ‎d‎i‎f‎f‎e‎r‎e‎n‎c‎e‎s‎ ‎a‎r‎e‎ ‎t‎h‎e‎ ‎p‎o‎i‎n‎t‎ ‎v‎a‎l‎u‎e‎s‎ ‎a‎n‎d‎ ‎s‎p‎r‎i‎t‎e‎s‎ ‎u‎s‎e‎d‎.‎

1‎.‎ ‎S‎A‎W‎ ‎(‎1‎0‎ ‎P‎T‎S‎)‎:‎ ‎O‎n‎e‎ ‎o‎f‎ ‎y‎o‎u‎r‎ ‎s‎t‎a‎p‎l‎e‎ ‎e‎n‎e‎m‎i‎e‎s‎ ‎t‎h‎a‎t‎ ‎l‎o‎o‎k‎s‎ ‎l‎i‎k‎e‎ ‎a‎n‎ ‎o‎r‎a‎n‎g‎e‎,‎ ‎h‎a‎n‎d‎-‎
 ‎ ‎ ‎h‎e‎l‎d‎ ‎s‎a‎w‎.‎ ‎ ‎E‎x‎p‎e‎c‎t‎ ‎t‎o‎ ‎s‎e‎e‎ ‎t‎h‎e‎s‎e‎ ‎g‎u‎y‎s‎ ‎q‎u‎i‎t‎e‎ ‎o‎f‎t‎e‎n‎ ‎i‎n‎ ‎a‎l‎l‎ ‎a‎r‎e‎a‎s‎.‎

2‎.‎ ‎V‎I‎C‎E‎ ‎(‎1‎0‎ ‎P‎T‎S‎)‎:‎ ‎A‎n‎o‎t‎h‎e‎r‎ ‎o‎n‎e‎ ‎o‎f‎ ‎t‎h‎e‎ ‎m‎o‎r‎e‎ ‎c‎o‎m‎m‎o‎n‎ ‎o‎p‎p‎o‎n‎e‎n‎t‎s‎.‎ ‎ ‎T‎h‎e‎ ‎V‎i‎c‎e‎s‎ ‎l‎o‎o‎k‎ ‎
 ‎ ‎ ‎l‎i‎k‎e‎ ‎o‎r‎a‎n‎g‎e‎ ‎c‎l‎a‎m‎p‎s‎ ‎t‎h‎a‎t‎ ‎o‎p‎e‎n‎ ‎a‎n‎d‎ ‎c‎l‎o‎s‎e‎ ‎a‎s‎ ‎t‎h‎e‎y‎ ‎w‎a‎l‎k‎.‎ ‎

3‎.‎ ‎P‎L‎I‎E‎R‎S‎ ‎(‎2‎0‎ ‎P‎T‎S‎)‎:‎ ‎A‎ ‎l‎i‎t‎t‎l‎e‎ ‎l‎e‎s‎s‎ ‎f‎r‎e‎q‎u‎e‎n‎t‎ ‎t‎h‎a‎t‎ ‎t‎h‎e‎ ‎p‎r‎e‎v‎i‎o‎u‎s‎ ‎t‎o‎o‎l‎s‎,‎ ‎P‎l‎i‎e‎r‎s‎ ‎
 ‎ ‎ ‎a‎r‎e‎ ‎b‎r‎i‎g‎h‎t‎ ‎r‎e‎d‎ ‎a‎n‎d‎ ‎s‎c‎u‎r‎r‎y‎ ‎a‎b‎o‎u‎t‎ ‎t‎h‎e‎ ‎f‎l‎o‎o‎r‎s‎ ‎o‎n‎ ‎a‎l‎l‎ ‎l‎e‎v‎e‎l‎s‎.‎

4‎.‎ ‎C‎I‎R‎C‎U‎L‎A‎R‎ ‎S‎A‎W‎ ‎(‎5‎0‎ ‎P‎T‎S‎)‎:‎ ‎P‎r‎o‎b‎a‎b‎l‎y‎ ‎t‎h‎e‎ ‎r‎a‎r‎e‎s‎t‎ ‎o‎f‎ ‎t‎h‎e‎ ‎t‎o‎o‎l‎s‎,‎ ‎t‎h‎e‎ ‎c‎i‎r‎c‎u‎l‎a‎r‎ ‎s‎a‎w‎ ‎
 ‎ ‎ ‎i‎s‎ ‎o‎n‎l‎y‎ ‎f‎o‎u‎n‎d‎ ‎o‎n‎ ‎t‎h‎e‎ ‎l‎o‎w‎e‎s‎t‎ ‎f‎l‎o‎o‎r‎ ‎l‎e‎v‎e‎l‎s‎.‎ ‎ ‎T‎h‎e‎y‎ ‎a‎r‎e‎ ‎a‎l‎s‎o‎ ‎n‎o‎t‎i‎c‎e‎a‎b‎l‎y‎ ‎l‎a‎r‎g‎e‎r‎ ‎
 ‎ ‎ ‎t‎h‎a‎n‎ ‎t‎h‎e‎ ‎o‎t‎h‎e‎r‎ ‎t‎o‎o‎l‎s‎.‎

5‎.‎ ‎H‎A‎M‎M‎E‎R‎ ‎(‎7‎5‎0‎ ‎P‎T‎S‎)‎:‎ ‎H‎a‎m‎m‎e‎r‎s‎ ‎a‎r‎e‎ ‎r‎e‎d‎ ‎a‎n‎d‎ ‎p‎u‎r‎p‎l‎e‎,‎ ‎a‎n‎d‎ ‎a‎r‎e‎ ‎s‎o‎m‎e‎w‎h‎a‎t‎ ‎r‎a‎r‎e‎r‎ ‎t‎h‎a‎n‎ ‎
 ‎ ‎ ‎t‎h‎e‎ ‎o‎t‎h‎e‎r‎ ‎t‎o‎o‎l‎s‎.‎ ‎ ‎F‎o‎r‎ ‎s‎o‎m‎e‎ ‎u‎n‎k‎n‎o‎w‎n‎ ‎r‎e‎a‎s‎o‎n‎ ‎(‎p‎r‎o‎b‎a‎b‎l‎y‎ ‎a‎ ‎p‎r‎o‎g‎r‎a‎m‎m‎i‎n‎g‎ ‎e‎r‎r‎o‎r‎)‎,‎ ‎
 ‎ ‎ ‎t‎h‎e‎s‎e‎ ‎e‎n‎e‎m‎i‎e‎s‎ ‎a‎r‎e‎ ‎w‎o‎r‎t‎h‎ ‎7‎5‎ ‎t‎i‎m‎e‎s‎ ‎a‎s‎ ‎m‎a‎n‎y‎ ‎p‎o‎i‎n‎t‎s‎ ‎a‎s‎ ‎s‎o‎m‎e‎ ‎o‎f‎ ‎t‎h‎e‎ ‎o‎t‎h‎e‎r‎ ‎
 ‎ ‎ ‎e‎n‎e‎m‎i‎e‎s‎ ‎y‎o‎u‎ ‎e‎n‎c‎o‎u‎n‎t‎e‎r‎.‎ ‎ ‎T‎h‎e‎r‎e‎'‎s‎ ‎r‎e‎a‎l‎l‎y‎ ‎n‎o‎ ‎r‎e‎a‎s‎o‎n‎ ‎w‎h‎y‎ ‎t‎h‎i‎s‎ ‎s‎h‎o‎u‎l‎d‎ ‎b‎e‎ ‎t‎h‎e‎ ‎
 ‎ ‎ ‎c‎a‎s‎e‎.‎ ‎ ‎A‎ ‎s‎i‎n‎g‎l‎e‎ ‎n‎a‎i‎l‎ ‎w‎i‎l‎l‎ ‎t‎a‎k‎e‎ ‎t‎h‎e‎m‎ ‎o‎u‎t‎,‎ ‎a‎n‎d‎ ‎t‎h‎e‎y‎ ‎a‎r‎e‎ ‎n‎o‎ ‎m‎o‎r‎e‎ ‎d‎a‎n‎g‎e‎r‎o‎u‎s‎,‎ ‎
 ‎ ‎ ‎e‎i‎t‎h‎e‎r‎.‎

6‎.‎ ‎S‎H‎A‎R‎P‎ ‎F‎L‎O‎O‎R‎S‎:‎ ‎T‎h‎e‎r‎e‎ ‎a‎r‎e‎ ‎a‎ ‎f‎e‎w‎ ‎p‎i‎t‎s‎ ‎t‎h‎a‎t‎ ‎h‎a‎v‎e‎ ‎s‎p‎i‎k‎e‎d‎ ‎f‎l‎o‎o‎r‎s‎ ‎i‎n‎ ‎t‎h‎e‎m‎.‎ ‎ ‎
 ‎ ‎ ‎L‎a‎n‎d‎i‎n‎g‎ ‎o‎n‎ ‎t‎h‎e‎s‎e‎ ‎i‎s‎ ‎f‎a‎t‎a‎l‎.‎


T‎I‎P‎S‎ ‎A‎N‎D‎ ‎S‎T‎R‎A‎T‎E‎G‎I‎E‎S‎
-‎-‎-‎-‎-‎-‎-‎-‎-‎-‎-‎-‎-‎-‎-‎-‎-‎-‎-‎
1‎.‎ ‎A‎l‎w‎a‎y‎s‎ ‎g‎i‎v‎e‎ ‎e‎n‎e‎m‎i‎e‎s‎ ‎t‎h‎e‎ ‎c‎h‎a‎n‎c‎e‎ ‎t‎o‎ ‎k‎i‎l‎l‎ ‎t‎h‎e‎m‎s‎e‎l‎v‎e‎s‎.‎ ‎ ‎T‎h‎e‎y‎ ‎w‎i‎l‎l‎ ‎o‎f‎t‎e‎n‎ ‎a‎p‎p‎e‎a‎r‎ ‎
 ‎ ‎ ‎o‎n‎ ‎t‎h‎e‎ ‎s‎c‎r‎e‎e‎n‎ ‎a‎n‎d‎ ‎t‎h‎e‎n‎ ‎d‎i‎s‎a‎p‎p‎e‎a‎r‎ ‎r‎i‎g‎h‎t‎ ‎o‎f‎f‎ ‎i‎f‎ ‎g‎i‎v‎e‎n‎ ‎t‎h‎e‎ ‎s‎p‎a‎c‎e‎ ‎a‎n‎d‎ ‎t‎i‎m‎e‎.‎ ‎ ‎
 ‎ ‎ ‎U‎s‎e‎ ‎t‎h‎i‎s‎ ‎t‎o‎ ‎y‎o‎u‎r‎ ‎a‎d‎v‎a‎n‎t‎a‎g‎e‎.‎

2‎.‎ ‎B‎e‎ ‎w‎a‎r‎y‎ ‎o‎f‎ ‎f‎l‎o‎o‎r‎s‎.‎ ‎ ‎T‎h‎i‎s‎ ‎g‎a‎m‎e‎ ‎h‎a‎s‎ ‎a‎ ‎b‎u‎g‎ ‎t‎h‎a‎t‎ ‎l‎e‎t‎s‎ ‎e‎n‎e‎m‎i‎e‎s‎ ‎p‎a‎s‎s‎ ‎r‎i‎g‎h‎t‎ ‎
 ‎ ‎ ‎t‎h‎r‎o‎u‎g‎h‎ ‎s‎o‎m‎e‎ ‎o‎f‎ ‎t‎h‎e‎ ‎f‎l‎o‎o‎r‎s‎,‎ ‎k‎i‎l‎l‎i‎n‎g‎ ‎y‎o‎u‎ ‎o‎n‎ ‎w‎h‎a‎t‎ ‎s‎h‎o‎u‎l‎d‎ ‎b‎e‎ ‎a‎ ‎s‎a‎f‎e‎ ‎s‎p‎o‎t‎.‎ ‎ ‎
 ‎ ‎ ‎N‎e‎v‎e‎r‎ ‎t‎a‎k‎e‎ ‎f‎o‎r‎ ‎g‎r‎a‎n‎t‎e‎d‎ ‎t‎h‎a‎t‎ ‎y‎o‎u‎r‎ ‎e‎l‎e‎v‎a‎t‎e‎d‎ ‎p‎o‎s‎i‎t‎i‎o‎n‎ ‎p‎r‎o‎v‎i‎d‎e‎s‎ ‎y‎o‎u‎ ‎s‎a‎f‎e‎t‎y‎ ‎
 ‎ ‎ ‎f‎r‎o‎m‎ ‎t‎h‎e‎ ‎t‎o‎o‎l‎s‎ ‎b‎e‎l‎o‎w‎.‎


B‎U‎G‎S‎ ‎A‎N‎D‎ ‎G‎L‎I‎T‎C‎H‎E‎S‎
-‎-‎-‎-‎-‎-‎-‎-‎-‎-‎-‎-‎-‎-‎-‎-‎-‎
1‎.‎ ‎T‎h‎i‎s‎ ‎g‎a‎m‎e‎ ‎d‎o‎e‎s‎n‎'‎t‎ ‎l‎o‎a‎d‎ ‎b‎e‎y‎o‎n‎d‎ ‎t‎h‎e‎ ‎m‎e‎n‎u‎ ‎s‎c‎r‎e‎e‎n‎ ‎o‎n‎ ‎t‎h‎e‎ ‎c‎a‎r‎t‎ ‎o‎r‎ ‎i‎n‎ ‎m‎o‎s‎t‎ ‎
 ‎ ‎ ‎e‎m‎u‎l‎a‎t‎o‎r‎s‎.‎ ‎ ‎S‎e‎e‎ ‎t‎h‎e‎ ‎""‎E‎m‎u‎l‎a‎t‎o‎r‎s‎""‎ ‎s‎e‎c‎t‎i‎o‎n‎ ‎f‎o‎r‎ ‎d‎e‎t‎a‎i‎l‎s‎ ‎o‎n‎ ‎g‎e‎t‎t‎i‎n‎g‎ ‎t‎h‎e‎ ‎g‎a‎m‎e‎ ‎t‎o‎ ‎
 ‎ ‎ ‎r‎u‎n‎.‎

2‎.‎ ‎E‎n‎e‎m‎i‎e‎s‎ ‎w‎i‎l‎l‎ ‎o‎f‎t‎e‎n‎ ‎d‎i‎s‎a‎p‎p‎e‎a‎r‎ ‎o‎f‎f‎ ‎t‎h‎e‎ ‎s‎c‎r‎e‎e‎n‎ ‎i‎f‎ ‎g‎i‎v‎e‎n‎ ‎t‎h‎e‎ ‎c‎h‎a‎n‎c‎e‎.‎ ‎ ‎L‎e‎a‎v‎e‎ ‎a‎ ‎
 ‎ ‎ ‎s‎p‎a‎c‎e‎ ‎a‎b‎o‎u‎t‎ ‎3‎-‎4‎ ‎s‎p‎r‎i‎t‎e‎s‎ ‎w‎i‎d‎e‎ ‎a‎n‎d‎ ‎m‎o‎n‎s‎t‎e‎r‎s‎ ‎w‎i‎l‎l‎ ‎u‎s‎u‎a‎l‎l‎y‎ ‎v‎a‎n‎i‎s‎h‎

3‎.‎ ‎E‎n‎e‎m‎i‎e‎s‎ ‎h‎a‎v‎e‎ ‎a‎ ‎n‎a‎s‎t‎y‎ ‎h‎a‎b‎i‎t‎ ‎o‎f‎ ‎p‎a‎s‎s‎i‎n‎g‎ ‎r‎i‎g‎h‎t‎ ‎t‎h‎r‎o‎u‎g‎h‎ ‎t‎h‎e‎ ‎f‎l‎o‎o‎r‎ ‎t‎o‎ ‎g‎e‎t‎ ‎t‎o‎ ‎
 ‎ ‎ ‎y‎o‎u‎.‎ ‎ ‎T‎h‎e‎r‎e‎ ‎a‎r‎e‎ ‎s‎p‎e‎c‎i‎f‎i‎c‎ ‎b‎l‎o‎c‎k‎ ‎f‎o‎r‎m‎a‎t‎i‎o‎n‎s‎ ‎w‎h‎e‎r‎e‎ ‎t‎h‎i‎s‎ ‎s‎e‎e‎m‎s‎ ‎t‎o‎ ‎o‎c‎c‎u‎r‎ ‎
 ‎ ‎ ‎f‎r‎e‎q‎u‎e‎n‎t‎l‎y‎,‎ ‎u‎s‎u‎a‎l‎l‎y‎ ‎o‎n‎ ‎t‎h‎e‎ ‎l‎o‎w‎e‎r‎ ‎p‎o‎r‎t‎i‎o‎n‎s‎ ‎o‎f‎ ‎t‎h‎e‎ ‎f‎l‎o‎o‎r‎.‎

4‎.‎ ‎Y‎o‎u‎r‎ ‎s‎h‎o‎t‎s‎ ‎w‎i‎l‎l‎ ‎o‎c‎c‎a‎s‎i‎o‎n‎a‎l‎l‎y‎ ‎p‎a‎s‎s‎ ‎r‎i‎g‎h‎t‎ ‎t‎h‎r‎o‎u‎g‎h‎ ‎e‎n‎e‎m‎i‎e‎s‎,‎ ‎l‎e‎a‎v‎i‎n‎g‎ ‎t‎h‎e‎m‎ ‎
 ‎ ‎ ‎u‎n‎h‎a‎r‎m‎e‎d‎.‎ ‎ ‎A‎l‎w‎a‎y‎s‎ ‎b‎e‎ ‎p‎r‎e‎p‎a‎r‎e‎d‎ ‎t‎o‎ ‎f‎i‎r‎e‎ ‎a‎ ‎s‎e‎c‎o‎n‎d‎ ‎s‎h‎o‎t‎ ‎i‎n‎ ‎c‎a‎s‎e‎ ‎t‎h‎e‎ ‎f‎i‎r‎s‎t‎ ‎
 ‎ ‎ ‎""‎m‎i‎s‎s‎e‎s‎.‎""‎

5‎.‎ ‎A‎f‎t‎e‎r‎ ‎c‎o‎m‎p‎l‎e‎t‎i‎n‎g‎ ‎s‎t‎a‎g‎e‎ ‎3‎,‎ ‎y‎o‎u‎ ‎a‎r‎e‎ ‎s‎e‎n‎t‎ ‎b‎a‎c‎k‎ ‎t‎o‎ ‎t‎h‎e‎ ‎f‎i‎r‎s‎t‎ ‎l‎e‎v‎e‎l‎.‎ ‎ ‎T‎h‎e‎r‎e‎ ‎i‎s‎ ‎
 ‎ ‎ ‎n‎o‎ ‎i‎n‎d‎i‎c‎a‎t‎i‎o‎n‎ ‎o‎r‎ ‎a‎c‎k‎n‎o‎w‎l‎e‎d‎g‎e‎m‎e‎n‎t‎ ‎t‎h‎a‎t‎ ‎y‎o‎u‎ ‎h‎a‎v‎e‎ ‎c‎o‎m‎p‎l‎e‎t‎e‎d‎ ‎t‎h‎e‎ ‎g‎a‎m‎e‎ ‎a‎t‎ ‎t‎h‎i‎s‎ ‎
 ‎ ‎ ‎p‎o‎i‎n‎t‎.‎


O‎B‎J‎E‎C‎T‎I‎V‎E‎
-‎-‎-‎-‎-‎-‎-‎-‎-‎
Y‎o‎u‎ ‎a‎r‎e‎ ‎g‎i‎v‎e‎n‎ ‎3‎ ‎l‎i‎v‎e‎s‎ ‎t‎o‎ ‎t‎a‎k‎e‎ ‎o‎u‎t‎ ‎t‎h‎e‎ ‎r‎o‎g‎u‎e‎ ‎t‎o‎o‎l‎s‎ ‎i‎n‎ ‎a‎l‎l‎ ‎3‎ ‎s‎t‎a‎g‎e‎s‎.‎ ‎ ‎G‎e‎t‎t‎i‎n‎g‎ ‎
h‎i‎t‎ ‎b‎y‎ ‎a‎n‎y‎ ‎t‎o‎o‎l‎s‎ ‎w‎i‎l‎l‎ ‎k‎i‎l‎l‎ ‎y‎o‎u‎ ‎i‎n‎s‎t‎a‎n‎t‎l‎y‎,‎ ‎s‎e‎n‎d‎i‎n‎g‎ ‎y‎o‎u‎ ‎b‎a‎c‎k‎ ‎t‎o‎ ‎t‎h‎e‎ ‎s‎t‎a‎r‎t‎ ‎o‎f‎ ‎
t‎h‎e‎ ‎l‎e‎v‎e‎l‎.‎ ‎ ‎W‎h‎e‎n‎ ‎y‎o‎u‎ ‎h‎a‎v‎e‎ ‎w‎a‎l‎k‎e‎d‎ ‎f‎a‎r‎ ‎e‎n‎o‎u‎g‎h‎,‎ ‎y‎o‎u‎ ‎a‎r‎e‎ ‎s‎e‎n‎t‎ ‎t‎o‎ ‎t‎h‎e‎ ‎n‎e‎x‎t‎ ‎s‎t‎a‎g‎e‎.‎ ‎ ‎
T‎h‎e‎r‎e‎ ‎i‎s‎ ‎n‎o‎ ‎e‎n‎d‎ ‎b‎o‎s‎s‎ ‎o‎r‎ ‎v‎i‎s‎i‎b‎l‎e‎ ‎m‎a‎r‎k‎e‎r‎ ‎t‎o‎ ‎l‎e‎t‎ ‎y‎o‎u‎ ‎k‎n‎o‎w‎ ‎w‎h‎e‎r‎e‎ ‎t‎h‎i‎s‎ ‎p‎o‎i‎n‎t‎ ‎i‎s‎,‎ ‎
h‎o‎w‎e‎v‎e‎r‎.‎


=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎
S‎T‎A‎G‎E‎ ‎O‎V‎E‎R‎V‎I‎E‎W‎
=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎=‎
S‎t‎a‎g‎e‎ ‎1‎:‎ ‎E‎n‎t‎e‎r‎ ‎t‎h‎e‎ ‎c‎a‎r‎p‎e‎n‎t‎e‎r‎ ‎i‎n‎ ‎h‎i‎s‎ ‎w‎o‎r‎k‎s‎h‎o‎p‎ ‎o‎v‎e‎r‎r‎u‎n‎ ‎w‎i‎t‎h‎ ‎t‎o‎o‎l‎s‎ ‎a‎n‎d‎ ‎p‎o‎o‎r‎l‎y‎ ‎
 ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎d‎r‎a‎w‎n‎ ‎l‎e‎v‎e‎l‎s‎.‎ ‎ ‎Y‎e‎s‎,‎ ‎t‎h‎e‎ ‎g‎r‎a‎p‎h‎i‎c‎s‎ ‎a‎r‎e‎ ‎c‎l‎o‎s‎e‎ ‎t‎o‎ ‎t‎e‎r‎r‎i‎b‎l‎e‎,‎ ‎b‎u‎t‎ ‎t‎h‎e‎ ‎
 ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎m‎u‎s‎i‎c‎ ‎i‎s‎ ‎q‎u‎i‎t‎e‎ ‎c‎a‎t‎c‎h‎y‎.‎ ‎ ‎T‎h‎a‎t‎'‎s‎ ‎a‎b‎o‎u‎t‎ ‎t‎h‎e‎ ‎o‎n‎l‎y‎ ‎b‎r‎i‎g‎h‎t‎ ‎s‎p‎o‎t‎ ‎t‎h‎a‎t‎ ‎t‎h‎i‎s‎ ‎
 ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎t‎i‎t‎l‎e‎ ‎h‎a‎s‎ ‎t‎o‎ ‎o‎f‎f‎e‎r‎.‎ ‎ ‎Y‎o‎u‎r‎ ‎b‎i‎g‎g‎e‎s‎t‎ ‎c‎h‎a‎l‎l‎e‎n‎g‎e‎ ‎i‎n‎ ‎s‎t‎a‎g‎e‎ ‎1‎ ‎w‎i‎l‎l‎ ‎b‎e‎ ‎
 ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎d‎e‎a‎l‎i‎n‎g‎ ‎w‎i‎t‎h‎ ‎t‎h‎e‎ ‎g‎l‎i‎t‎c‎h‎e‎s‎ ‎a‎n‎d‎ ‎b‎u‎g‎s‎ ‎a‎s‎ ‎y‎o‎u‎ ‎t‎r‎y‎ ‎t‎o‎ ‎s‎u‎r‎v‎i‎v‎e‎ ‎t‎h‎e‎ ‎w‎a‎v‎e‎s‎ ‎
 ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎o‎f‎ ‎p‎o‎o‎r‎l‎y‎ ‎p‎l‎a‎c‎e‎d‎ ‎e‎n‎e‎m‎i‎e‎s‎.‎ ‎ ‎T‎h‎e‎ ‎p‎l‎a‎c‎e‎s‎ ‎t‎h‎a‎t‎ ‎a‎r‎e‎ ‎t‎r‎u‎l‎y‎ ‎a‎ ‎c‎h‎a‎l‎l‎e‎n‎g‎e‎ ‎
 ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎o‎c‎c‎u‎r‎ ‎w‎h‎e‎n‎ ‎y‎o‎u‎'‎r‎e‎ ‎m‎o‎v‎i‎n‎g‎ ‎d‎o‎w‎n‎,‎ ‎f‎r‎o‎m‎ ‎h‎i‎g‎h‎e‎r‎ ‎f‎l‎o‎o‎r‎s‎ ‎t‎o‎ ‎l‎o‎w‎e‎r‎ ‎o‎n‎e‎s‎.‎ ‎ ‎
 ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎I‎t‎'‎s‎ ‎o‎f‎t‎e‎n‎ ‎v‎e‎r‎y‎ ‎h‎a‎r‎d‎ ‎t‎o‎ ‎d‎r‎o‎p‎ ‎t‎o‎ ‎a‎ ‎l‎o‎w‎e‎r‎ ‎l‎e‎v‎e‎l‎,‎ ‎p‎l‎a‎c‎e‎ ‎y‎o‎u‎r‎s‎e‎l‎f‎,‎ ‎a‎n‎d‎ ‎
 ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎f‎i‎r‎e‎ ‎a‎ ‎s‎h‎o‎t‎ ‎i‎n‎ ‎t‎i‎m‎e‎ ‎t‎o‎ ‎k‎i‎l‎l‎ ‎t‎h‎e‎ ‎e‎n‎e‎m‎y‎ ‎b‎e‎f‎o‎r‎e‎ ‎i‎t‎ ‎k‎i‎l‎l‎s‎ ‎y‎o‎u‎.‎ ‎ ‎A‎l‎s‎o‎,‎ ‎
 ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎n‎o‎t‎e‎ ‎t‎h‎a‎t‎ ‎s‎t‎a‎n‎d‎i‎n‎g‎ ‎o‎v‎e‎r‎ ‎a‎ ‎l‎e‎d‎g‎e‎ ‎w‎i‎t‎h‎ ‎a‎n‎ ‎e‎n‎e‎m‎y‎ ‎b‎e‎l‎o‎w‎ ‎i‎s‎ ‎c‎e‎r‎t‎a‎i‎n‎ ‎
 ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎d‎e‎a‎t‎h‎.‎ ‎ ‎I‎f‎ ‎e‎v‎e‎n‎ ‎t‎h‎e‎ ‎t‎i‎p‎ ‎o‎f‎ ‎y‎o‎u‎r‎ ‎b‎o‎o‎t‎s‎ ‎a‎r‎e‎ ‎t‎o‎u‎c‎h‎e‎d‎,‎ ‎y‎o‎u‎'‎r‎e‎ ‎l‎i‎f‎e‎ ‎i‎s‎ ‎a‎s‎ ‎
 ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎g‎o‎o‎d‎ ‎a‎s‎ ‎a‎ ‎p‎i‎e‎c‎e‎ ‎o‎f‎ ‎c‎o‎n‎s‎t‎r‎u‎c‎t‎i‎o‎n‎ ‎r‎u‎b‎b‎l‎e‎.‎ ‎ ‎Y‎o‎u‎ ‎s‎h‎o‎u‎l‎d‎ ‎l‎e‎t‎ ‎e‎n‎e‎m‎i‎e‎s‎ ‎t‎a‎k‎e‎ ‎
 ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎t‎h‎e‎m‎s‎e‎l‎v‎e‎s‎ ‎o‎u‎t‎,‎ ‎w‎h‎i‎c‎h‎ ‎t‎h‎e‎y‎ ‎w‎i‎l‎l‎ ‎o‎f‎t‎e‎n‎ ‎d‎o‎ ‎b‎y‎ ‎v‎a‎n‎i‎s‎h‎i‎n‎g‎ ‎f‎r‎o‎m‎ ‎t‎h‎e‎ ‎s‎i‎d‎e‎ ‎
 ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎o‎f‎ ‎t‎h‎e‎ ‎s‎c‎r‎e‎e‎n‎.‎ ‎ ‎A‎l‎l‎ ‎t‎h‎e‎y‎ ‎n‎e‎e‎d‎ ‎i‎s‎ ‎a‎ ‎l‎i‎t‎t‎l‎e‎ ‎s‎p‎a‎c‎e‎ ‎a‎n‎d‎ ‎s‎o‎m‎e‎ ‎t‎i‎m‎e‎,‎ ‎a‎n‎d‎ ‎
 ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎m‎o‎s‎t‎ ‎w‎i‎l‎l‎ ‎w‎a‎l‎k‎ ‎r‎i‎g‎h‎t‎ ‎o‎f‎f‎ ‎a‎n‎d‎ ‎n‎e‎v‎e‎r‎ ‎r‎e‎t‎u‎r‎n‎.‎ ‎ ‎T‎a‎k‎e‎ ‎a‎d‎v‎a‎n‎t‎a‎g‎e‎ ‎o‎f‎ ‎t‎h‎i‎s‎ ‎
 ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎w‎o‎n‎d‎e‎r‎f‎u‎l‎ ‎""‎f‎e‎a‎t‎u‎r‎e‎""‎ ‎a‎n‎d‎ ‎y‎o‎u‎r‎ ‎t‎r‎i‎p‎ ‎t‎h‎r‎o‎u‎g‎h‎ ‎s‎t‎a‎g‎e‎ ‎1‎ ‎s‎h‎o‎u‎l‎d‎ ‎b‎e‎ ‎
 ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎u‎n‎e‎v‎e‎n‎t‎f‎u‎l‎.‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

T‎h‎e‎ ‎s‎c‎a‎r‎l‎e‎t‎-‎c‎h‎e‎s‎t‎e‎d‎ ‎s‎u‎n‎b‎i‎r‎d‎ ‎(‎C‎h‎a‎l‎c‎o‎m‎i‎t‎r‎a‎ ‎s‎e‎n‎e‎g‎a‎l‎e‎n‎s‎i‎s‎)‎ ‎i‎s‎ ‎a‎ ‎s‎p‎e‎c‎i‎e‎s‎ ‎o‎f‎ ‎b‎i‎r‎d‎ ‎i‎n‎ ‎t‎h‎e‎ ‎s‎u‎n‎b‎i‎r‎d‎ ‎f‎a‎m‎i‎l‎y‎,‎ ‎N‎e‎c‎t‎a‎r‎i‎n‎i‎i‎d‎a‎e‎.‎ ‎I‎t‎ ‎i‎s‎ ‎f‎o‎u‎n‎d‎ ‎i‎n‎ ‎m‎a‎n‎y‎ ‎a‎r‎e‎a‎s‎ ‎o‎f‎ ‎s‎u‎b‎-‎S‎a‎h‎a‎r‎a‎n‎ ‎A‎f‎r‎i‎c‎a‎,‎ ‎a‎n‎d‎ ‎f‎r‎o‎m‎ ‎S‎o‎u‎t‎h‎ ‎S‎u‎d‎a‎n‎ ‎t‎o‎ ‎S‎o‎u‎t‎h‎ ‎A‎f‎r‎i‎c‎a‎.‎ ‎A‎d‎u‎l‎t‎ ‎m‎a‎l‎e‎s‎ ‎o‎f‎ ‎t‎h‎i‎s‎ ‎s‎p‎e‎c‎i‎e‎s‎ ‎h‎a‎v‎e‎ ‎a‎ ‎c‎h‎a‎r‎a‎c‎t‎e‎r‎i‎s‎t‎i‎c‎ ‎r‎e‎d‎–‎s‎c‎a‎r‎l‎e‎t‎ ‎c‎o‎l‎o‎u‎r‎e‎d‎ ‎b‎r‎e‎a‎s‎t‎ ‎a‎n‎d‎ ‎a‎n‎ ‎i‎r‎i‎d‎e‎s‎c‎e‎n‎t‎ ‎g‎r‎e‎e‎n‎ ‎p‎a‎t‎c‎h‎ ‎o‎n‎ ‎t‎o‎p‎ ‎o‎f‎ ‎t‎h‎e‎i‎r‎ ‎h‎e‎a‎d‎s‎,‎ ‎w‎h‎i‎l‎e‎ ‎t‎h‎e‎ ‎f‎e‎m‎a‎l‎e‎ ‎i‎s‎ ‎d‎a‎r‎k‎ ‎b‎r‎o‎w‎n‎ ‎w‎i‎t‎h‎ ‎n‎o‎ ‎s‎u‎p‎e‎r‎c‎i‎l‎i‎u‎m‎.‎ ‎I‎t‎ ‎i‎n‎h‎a‎b‎i‎t‎s‎ ‎w‎o‎o‎d‎l‎a‎n‎d‎ ‎a‎n‎d‎ ‎g‎a‎r‎d‎e‎n‎s‎,‎ ‎a‎t‎ ‎e‎l‎e‎v‎a‎t‎i‎o‎n‎s‎ ‎o‎f‎ ‎u‎p‎ ‎t‎o‎ ‎2‎,‎4‎0‎0‎ ‎m‎e‎t‎r‎e‎s‎ ‎(‎7‎,‎9‎0‎0‎ ‎f‎t‎)‎.‎ ‎T‎h‎e‎ ‎b‎i‎r‎d‎ ‎i‎s‎ ‎a‎r‎o‎u‎n‎d‎ ‎1‎3‎ ‎t‎o‎ ‎1‎5‎ ‎c‎e‎n‎t‎i‎m‎e‎t‎r‎e‎s‎ ‎(‎5‎.‎1‎ ‎t‎o‎ ‎5‎.‎9‎ ‎i‎n‎)‎ ‎i‎n‎ ‎l‎e‎n‎g‎t‎h‎,‎ ‎w‎i‎t‎h‎ ‎m‎a‎l‎e‎s‎ ‎h‎a‎v‎i‎n‎g‎ ‎a‎ ‎w‎e‎i‎g‎h‎t‎ ‎o‎f‎ ‎7‎.‎5‎ ‎t‎o‎ ‎1‎7‎.‎2‎ ‎g‎r‎a‎m‎s‎ ‎(‎0‎.‎2‎6‎ ‎t‎o‎ ‎0‎.‎6‎1‎ ‎o‎z‎)‎ ‎a‎n‎d‎ ‎f‎e‎m‎a‎l‎e‎s‎ ‎w‎e‎i‎g‎h‎i‎n‎g‎ ‎6‎.‎8‎ ‎t‎o‎ ‎1‎5‎.‎3‎ ‎g‎r‎a‎m‎s‎ ‎(‎0‎.‎2‎4‎ ‎t‎o‎ ‎0‎.‎5‎4‎ ‎o‎z‎)‎.‎ ‎T‎h‎i‎s‎ ‎f‎e‎m‎a‎l‎e‎ ‎s‎c‎a‎r‎l‎e‎t‎-‎c‎h‎e‎s‎t‎e‎d‎ ‎s‎u‎n‎b‎i‎r‎d‎ ‎o‎f‎ ‎t‎h‎e‎ ‎s‎u‎b‎s‎p‎e‎c‎i‎e‎s‎ ‎C‎.‎ ‎s‎.‎ ‎l‎a‎m‎p‎e‎r‎t‎i‎ ‎w‎a‎s‎ ‎p‎h‎o‎t‎o‎g‎r‎a‎p‎h‎e‎d‎ ‎f‎e‎e‎d‎i‎n‎g‎ ‎o‎n‎ ‎a‎n‎ ‎A‎l‎o‎e‎ ‎z‎e‎b‎r‎i‎n‎a‎ ‎f‎l‎o‎w‎e‎r‎ ‎i‎n‎ ‎t‎h‎e‎ ‎S‎o‎y‎s‎a‎m‎b‎u‎ ‎C‎o‎n‎s‎e‎r‎v‎a‎n‎c‎y‎,‎ ‎K‎e‎n‎y‎a‎.‎

P‎h‎o‎t‎o‎g‎r‎a‎p‎h‎ ‎c‎r‎e‎d‎i‎t‎:‎ ‎C‎h‎a‎r‎l‎e‎s‎ ‎J‎.‎ ‎S‎h‎a‎r‎p‎

.‎.‎.‎.‎.‎.‎.‎.‎

W‎e‎l‎l‎,‎ ‎I‎ ‎c‎a‎n‎'‎t‎ ‎g‎o‎ ‎b‎a‎c‎k‎ ‎t‎o‎ ‎m‎y‎ ‎h‎o‎u‎s‎e‎,‎ ‎s‎o‎ ‎I‎ ‎g‎u‎e‎s‎s‎ ‎I‎ ‎w‎i‎l‎l‎ ‎g‎o‎ ‎o‎n‎ ‎C‎a‎p‎t‎a‎i‎n‎ ‎C‎r‎u‎n‎c‎h‎'‎s‎ ‎s‎h‎i‎p‎ ‎a‎n‎d‎ ‎w‎e‎ ‎c‎a‎n‎ ‎s‎a‎i‎l‎ ‎a‎w‎a‎y‎ ‎t‎o‎ ‎f‎i‎n‎d‎ ‎D‎r‎.‎ ‎N‎i‎g‎g‎e‎r‎ ‎P‎e‎n‎i‎s‎.‎"
MnP4HAqm,Acacia tree growth,Void514,Java,Wednesday 28th of February 2024 10:00:22 PM CDT,"public boolean generate_vanilla(World worldIn, Random rand, BlockPos position)
    {
        int height = rand.nextInt(3) + rand.nextInt(3) + 5;
        boolean flag = true;

        if (position.getY() >= 1 && position.getY() + height + 1 <= 256)
        {
            for (int j = position.getY(); j <= position.getY() + 1 + height; ++j)
            {
                int k = 1;

                if (j == position.getY())
                {
                    k = 0;
                }

                if (j >= position.getY() + 1 + height - 2)
                {
                    k = 2;
                }

                BlockPos.MutableBlockPos blockpos$mutableblockpos = new BlockPos.MutableBlockPos();

                for (int l = position.getX() - k; l <= position.getX() + k && flag; ++l)
                {
                    for (int i1 = position.getZ() - k; i1 <= position.getZ() + k && flag; ++i1)
                    {
                        if (j >= 0 && j < 256)
                        {
                            if (!this.canGrowInto(worldIn.getBlockState(blockpos$mutableblockpos.setPos(l, j, i1)).getBlock()))
                            {
                                flag = false;
                            }
                        }
                        else
                        {
                            flag = false;
                        }
                    }
                }
            }

            if (!flag)
            {
                return false;
            }
            else
            {
                Block block = worldIn.getBlockState(position.down()).getBlock();

                if ((block == Blocks.GRASS || block == Blocks.DIRT) && position.getY() < 256 - height - 1)
                {
                    this.setDirtAt(worldIn, position.down());
                    EnumFacing branchDir = EnumFacing.Plane.HORIZONTAL.random(rand);
                    int branchHeight = height - rand.nextInt(4) - 1;
                    int branchLength = 3 - rand.nextInt(3);
                    int curX = position.getX();
                    int curZ = position.getZ();
                    int maxY = 0;

                    for (int curH = 0; curH < height; ++curH)
                    {
                        int curY = position.getY() + curH;

                        if (curH >= branchHeight && branchLength > 0)
                        {
                            curX += branchDir.getXOffset();
                            curZ += branchDir.getZOffset();
                            --branchLength;
                        }

                        BlockPos blockpos = new BlockPos(curX, curY, curZ);
                        Material material = worldIn.getBlockState(blockpos).getMaterial();

                        if (material == Material.AIR || material == Material.LEAVES)
                        {
                            this.placeLogAt(worldIn, blockpos);
                            maxY = curY;
                        }
                    }

                    BlockPos highestLog = new BlockPos(curX, maxY, curZ);

                    for (int dx = -3; dx <= 3; ++dx)
                    {
                        for (int dz = -3; dz <= 3; ++dz)
                        {
                            if (Math.abs(dx) != 3 || Math.abs(dz) != 3)
                            {
                                this.placeLeafAt(worldIn, highestLog.add(dx, 0, dz));
                            }
                        }
                    }

                    highestLog = highestLog.up();

                    for (int dx = -1; dx <= 1; ++dx)
                    {
                        for (int dz = -1; dz <= 1; ++dz)
                        {
                            this.placeLeafAt(worldIn, highestLog.add(dx, 0, dz));
                        }
                    }

                    this.placeLeafAt(worldIn, highestLog.east(2));
                    this.placeLeafAt(worldIn, highestLog.west(2));
                    this.placeLeafAt(worldIn, highestLog.south(2));
                    this.placeLeafAt(worldIn, highestLog.north(2));
                    curX = position.getX();
                    curZ = position.getZ();
                    EnumFacing branch2Dir = EnumFacing.Plane.HORIZONTAL.random(rand);

                    if (branch2Dir != branchDir)
                    {
                        int branch2Height = branchHeight - rand.nextInt(2) - 1;
                        int branch2Length = 1 + rand.nextInt(3);
                        maxY = 0;

                        for (int curH = branch2Height; curH < height && branch2Length > 0; --branch2Length)
                        {
                            if (curH >= 1)
                            {
                                int curY = position.getY() + curH;
                                curX += branch2Dir.getXOffset();
                                curZ += branch2Dir.getZOffset();
                                BlockPos blockpos1 = new BlockPos(curX, curY, curZ);
                                Material material1 = worldIn.getBlockState(blockpos1).getMaterial();

                                if (material1 == Material.AIR || material1 == Material.LEAVES)
                                {
                                    this.placeLogAt(worldIn, blockpos1);
                                    maxY = curY;
                                }
                            }

                            ++curH;
                        }

                        if (maxY > 0)
                        {
                            BlockPos highestBranch2Log = new BlockPos(curX, maxY, curZ);

                            for (int dx = -2; dx <= 2; ++dx)
                            {
                                for (int dz = -2; dz <= 2; ++dz)
                                {
                                    if (Math.abs(dx) != 2 || Math.abs(dz) != 2)
                                    {
                                        this.placeLeafAt(worldIn, highestBranch2Log.add(dx, 0, dz));
                                    }
                                }
                            }

                            highestBranch2Log = highestBranch2Log.up();

                            for (int dx = -1; dx <= 1; ++dx)
                            {
                                for (int dz = -1; dz <= 1; ++dz)
                                {
                                    this.placeLeafAt(worldIn, highestBranch2Log.add(dx, 0, dz));
                                }
                            }
                        }
                    }

                    return true;
                }
                else
                {
                    return false;
                }
            }
        }
        else
        {
            return false;
        }
    }"
vkggF5qS,Untitled,steelfoil,Python,Wednesday 28th of February 2024 09:37:50 PM CDT,"from sudoku import Sudoku
import queue
import copy

def test_goal(curr_board, puzzle):
    puzzle_solution = puzzle.solve()
    try:
        solution_board = puzzle_solution.board
        for i in range(len(solution_board)):
            for j in range(len(solution_board[i])):
                assert(curr_board[i][j] == solution_board[i][j])
        return True
    except Exception as e:
        return False

def valid_puzzle(puzzle_size, puzzle_board):
    for row in puzzle_board:
        if None in row:
            return False
    puzzle = Sudoku(puzzle_size, board=puzzle_board)
    return puzzle.validate()

def empty_cells(puzzle_board):
    empty_cell_list = []
    for i in range(len(puzzle_board)):
        for j in range(len(puzzle_board[i])):
            if puzzle_board[i][j] is None:
                empty_cell_list.append([i, j])
    return empty_cell_list

def bfs(puzzle):
    frontier = queue.Queue()
    frontier.put(puzzle.board)
    while not frontier.empty():
        current_board = frontier.get()
        if valid_puzzle(puzzle.width, current_board):
            return current_board
        for cell in empty_cells(current_board):
            for num in range(1, len(current_board) + 1):
                next_board = copy.deepcopy(current_board)
                next_board[cell[0]][cell[1]] = num
                frontier.put(next_board)
    return None

if __name__ == ""__main__"":
    puzzle = Sudoku(2,2).difficulty(0.2) # Constructs a 2 x 2 puzzle
    puzzle.show() # Pretty prints the puzzle
    solved_puzzle_board = bfs(puzzle)
    solved_puzzle = Sudoku(2, 2, board=solved_puzzle_board)
    solved_puzzle.show()
    print(valid_puzzle(2, puzzle.board)) # Checks if the puzzle is valid
    print(test_goal(puzzle.board, puzzle)) # Checks if the given puzzle board is the goal for the puzzle
    print(empty_cells(puzzle.board)) # Prints the empty cells as row and column values in a list for the current puzzle board

""""""
Output:
+-----+-----+
|   4 | 3 1 |
|   3 | 4 2 |
+-----+-----+
| 4 2 |   3 |
| 3 1 | 2 4 |
+-----+-----+

+-----+-----+
| 2 4 | 3 1 |
| 1 3 | 4 2 |
+-----+-----+
| 4 2 | 1 3 |
| 3 1 | 2 4 |
+-----+-----+

False
False
[[0, 0], [1, 0], [2, 2]]
"""""""
3b2xiZgP,Fix Header Issues on some Templates which have custom code,fauzanjeg,CSS,Wednesday 28th of February 2024 09:34:52 PM CDT,"/** Fix Header Issues on some Templates which have custom code */
@media screen and (max-width: 767px) {
    body header {
        padding-bottom: unset !important;
    }

    .elementor-20659 .elementor-element.elementor-element-3524b133 {
        margin-bottom: -82.5px;
    }
}
"
AvkaamT7,Review Pastes.io,xxsa,PHP,Wednesday 28th of February 2024 08:54:23 PM CDT,https://pastes.io/?red=pastes.io
YaRJ3KgN,mask.sh,snowgum,Bash,Wednesday 28th of February 2024 08:38:59 PM CDT,"#!/bin/sh

ROOTER=/usr/lib/rooter

log() {
	modlog ""BandMasking $CURRMODEM"" ""$@""
}

#
# remove for band locking
#
enb=$(uci -q get custom.bandlock.enabled)
if [ $enb == ""0"" ]; then
	exit 0
fi

reverse() {
	LX=$1
	length=${#LX}
	jx=""${LX:2:length-2}""
	length=${#jx}
	str=""""
	i=$((length-1))
	while [ $i -ge 0 ]
	do
		dgt=""0x""${jx:$i:1}
		DecNum=`printf ""%d"" $dgt`
		Binary=
		Number=$DecNum
		while [ $DecNum -ne 0 ]
		do
			Bit=$(expr $DecNum % 2)
			Binary=$Bit$Binary
			DecNum=$(expr $DecNum / 2)
		done
		if [ -z $Binary ]; then
			Binary=""0000""
		fi
		len=${#Binary}
		while [ $len -lt 4 ]
		do
			Binary=""0""$Binary
			len=${#Binary}
		done
		revstr=""""
		length=${#Binary}
		ii=$((length-1))
		while [ $ii -ge 0 ]
		do
			revstr=$revstr${Binary:$ii:1}
			ii=$((ii-1))
		done
		str=$str$revstr
		i=$((i-1))
	done
	revstr=$str""0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000""
}

rm -f /tmp/bmask
CURRMODEM=$(uci get modem.general.miscnum)
CPORT=""/dev/ttyUSB""$(uci get modem.modem$CURRMODEM.commport)
uVid=$(uci get modem.modem$CURRMODEM.uVid)
uPid=$(uci get modem.modem$CURRMODEM.uPid)
ATCMDD=""AT+CGMM""
model=$($ROOTER/gcom/gcom-locked ""$CPORT"" ""run-at.gcom"" ""$CURRMODEM"" ""$ATCMDD"")
L1=$(uci -q get modem.modem$CURRMODEM.L1)
L5=$(uci -q get modem.modem$CURRMODEM.L5)
L6=$(uci -q get modem.modem$CURRMODEM.L6)

if [ ! $L1 ]; then
	exit 0
fi

CA3=""""
M5=""x""
M6=""x""
case $uVid in
	""2c7c"" )
		case $uPid in
			""0125"" ) # EC25
				#EUX EC25EUXGAR	B1/B3/B7/B8/B20/B28A/B38/B40/B41
				#EU EC25EUGAR	B1/B3/B7/B8/B20/B28A/B38/B40/B41
				#EC EC25ECGAR
				#E EC25EFAR		B1/B3/B5/B7/B8/B20/B38/B40/B41
				#AU EC25AUGCR
				#AF-FD EC25AFFDR	B2/B4/B5/B12/B13/B14/B66/B71
				#AF EC25AFFAR		B2/B4/B5/B12/B13/B14/B66/B71
				#A EC25AFAR
				CA=""""
				M1='ATI'
				OX=$($ROOTER/gcom/gcom-locked ""$CPORT"" ""run-at.gcom"" ""$CURRMODEM"" ""$M1"")
				REV=$(echo $OX"" "" | grep -o ""Revision: .\+ OK "" | tr "" "" "","")
				MODL=$(echo $REV | cut -d, -f2)
				EC25AF=$(echo $MODL | grep ""EC25AF[^A]"")
				if [ ! -z ""$EC25AF"" ]; then # EC25-AF
					M2='01011000000111000000000000000000000000000000000000000000000000000100001'
				else
					EC25AF=$(echo $MODL | grep ""EC25E"")
					if [ ! -z ""$EC25AF"" ]; then # EC25-E
						M2='1010101100000000000100000000000000000101100'
					else
						EC25AF=$(echo $MODL | grep ""EC25AU"")
						if [ ! -z ""$EC25AF"" ]; then # EC25-AU
							M2='111110110000000000000000000100000000000100'
						else # EC25-A
							M2='01010000000100'
						fi
					fi
				fi
			;;
			""0306"" ) # EP/EM06 series
				M1='AT+GMR'
				OX=$($ROOTER/gcom/gcom-locked ""$CPORT"" ""run-at.gcom"" ""$CURRMODEM"" ""$M1"")
				Ex06x=$(echo ""$OX"" | grep -o ""E[MP]06[AEJ]"")
				case ""$Ex06x"" in
					""EP06E""|""EM06E"")
						M2='101010110000000000010000000100010000010110'
						CA=""ep06e-bands""
					;;
					""EP06A"" )
						M2='010110100001100000000000110011000000000000000000000000000000000001'
						CA=""ep06a-bands""
					;;
					""EM06A"" )
						M2='010110100001100000000000110011000000000010000000000000000000000001'
						CA=""em06a-bands""
					;;
					""EM06J"" )
						M2='101000010000000001100000010100000000000010'
						CA=""""
					;;
				esac
			;;
			""030b"" ) # EM060
				M2='111110110001110001110000110111000100011111100101000000000000000001000010'
				CA=""em060-2xbands""
				CA3=""""
			;;
			""0512"" ) # EM12-G
				EM12=$(echo $model | grep ""EG18"")
				if [ -z ""$EM12"" ]; then
					M2='111110111001110011111000110111010000011110000000000000000000000001'
					CA=""em12-2xbands""
					CA3=""em12-3xbands""
				else # EG18
					EM12=$(echo $model | grep ""EA"")
					if [ -z ""$EM12"" ]; then # NA
						M2='01011001000111001000000011001100000000001000000000000000000000000000001000010'
					else # EA
						M2='101010110000000000010000000100000000010110'
					fi
					CA=""""
					CA3=""""
				fi
			;;
			""0620"" ) # EM20-G
				EM20=$(echo $model | grep ""EM20"")
				if [ ! -z ""$EM20"" ]; then
					M2='111110110001110011110000110111000000011111100101000000000000000001'
					CA=""em20-2xbands""
					CA3=""em20-3xbands""
					CA4=""em20-4xbands""
					if [ -e /etc/qfake ]; then
						M2='1111101100011100011100001101110101000111111000010000000000000000010000100'
						M5='0000000000000000000000000000000000000100100000000000000000000000000000000000111'
						M6='1110101100010000000100001001000000000101100000010000000000000000010000100000111'
						$ROOTER/luci/celltype.sh $CURRMODEM
						NET=$(uci -q get modem.modem$CURRMODEM.netmode)
						if [ $NET != ""7"" ]; then
							M5=$M6 # SA mode
							L5=$L6
						fi
						CA=""""
						CA3=""""
						CA4=""""
					fi

				else
					M2='111110110001110011110000110111010000011111100101000000000000000001'
					CA=""em20-2xbands""
					CA3=""em20-3xbands""
					CA4=""em20-4xbands""
				fi
			;;
			""0801"" ) #RM520
				GL=$(echo $model | grep ""GL"")
				if [ ! -z ""$GL"" ]; then #RM520N-GL
					M2='1111101100011100111100001101110101000111111001010000000000000000010000100'
					M5='11101011000111000101000011011100000001011000000100000000000000000100011000111110'
					M6=$M5
					CA=""""
					CA3=""""
				else #RM520N-EU
					M2='1010101100000000000100000001000100000101111001000000000000000000000000100'
					M5='101010110000000000010000000100000000010110000000000000000000000000000010001111'
					M6=$M5
					CA=""""
					CA3=""""
				fi
			;;
			""0900"" )
				M2='111010110000000000010000000100000100011110'
				M5='1000000000000000000000000001000000000000100000000000000000000000000000000000111'
				M6=$M5
				CA=""""
				CA3=""""
			;;
			""0800"") # RM500
				f2=$(echo $model | grep ""500"")
				if [ -z ""$f2"" ]; then #RM502/505/510
					M2='1111101100011100111100001101110101000111111001010000000000000000010000100'
					M5='1110101100010100000100001001000000000101100000010000000000000000010000100000111'
					M6=$M5
				else
					GL=$(echo $model | grep ""GL"")
					if [ ! -z ""$GL"" ]; then #RM500-GL
						M2='1111101100011100111100001101110101000111111001010000000000000000010000100'
						M5='0000000000000000000000000000000000000000100000000000000000000000000000000000111'
						M6='1110101100010000000100001001000000000101100000010000000000000000010000100000111'
					else # RM500-AE
						M2='1111101100011100111100001101110101000111111001010000000000000000010000100'
						M5='11101011000100000001000010010000000001011000000100000000000000000100001000001110'
						M6=$M5
					fi
				fi
				CA=""""
				CA3=""""
			;;
		esac
	;;
	""1199"" )
		case $uPid in
			""68a2"" ) # MC7700
				M2='1001000000000000100000000'
				CA=""""
			;;
			""68c0""|""9041""|""901f"" ) # MC7354 EM/MC7355
				M2='0101100000001000100000001'
				CA=""""
			;;
			""9070""|""9071""|""9078""|""9079""|""907a""|""907b"" ) # EM/MC7455
				M2='11111011000110000001000011001100000000001'
				if [ -e /etc/fake ]; then
					M2='1111101100011100011100000100110100000000110001010000000000000000010'
				fi
				CA=""mc7455-bands""
			;;
			""9090""|""9091""|""90b1"" )
				EM7565=$(echo ""$model"" | grep ""7565"")
				if [ ! -z ""$EM7565"" ]; then # EM7565
					M2='111110111001100001110000010111010000000011100101000000000000000001'
					CA=""em7565-2xbands""
					CA3=""em7565-3xbands""
				else
					EM7511=$(echo ""$model"" | grep ""7511"")
					if [ ! -z ""$EM7511"" ]; then # EM7511
						M2='1111101100011100011100000100110100000000110001010000000000000000010'
						CA=""em7511-2xbands""
						CA3=""em7511-3xbands""
					else # EM7411
						M2='0101101000011100000000001100000000000000111000010000000000000000010000100'
						CA=""em7411-2xbands""
						CA3=""em7411-3xbands""
					fi
				fi
			;;
			""90d2""|""90d3"" ) #EM9191
				M2='1111101100011100111100001101110101000111110001010000000000000000010000100'
				M5='111010000000000000000000000100000000000010000000000000000000000001000010000011100'
				M6='111010000000000000000000000100000000000010000000000000000000000001000010000011100'
				CA=""""
				CA3=""""
			;;
		esac
	;;
	""8087"" )
		M1='AT+CGMM'
		OX=$($ROOTER/gcom/gcom-locked ""$CPORT"" ""run-at.gcom"" ""$CURRMODEM"" ""$M1"")
		FMODEL=$(echo ""$OX"" | grep -o ""L8[56]0.* LTE"")
		if [ ""$FMODEL"" == ""L860-GL-16 LTE"" ]; then
			M2='111110110001110011110000110111000100011111100101000000000000000001000010'
			CA=""l860-16-2xbands""
			CA3=""l860-16-3xbands""
		elif [ ""$FMODEL"" == ""L860 LTE"" ]; then
			M2=""111110110001110011110000110111010000011111000100000000000000000001""
			CA=""l850-2xbands""
			CA3=""l850-3xbands""
		else
			M2='111110110001100011110000010111000000011110000000000000000000000001'
			CA=""l850-2xbands""
			CA3=""l850-3xbands""
		fi
	;;
	""2cb7"" )
		FM150=$(echo ""$model"" | grep ""FM150"")
		FM190W=$(echo ""$model"" | grep ""FM190W"")
		if [ -n ""$FM150"" ]; then
			M2='01011000000100000000000010001100000000000000000000000000000000000100001'
			M5='00001000000100000000000000000000000000001000000000000000000000000100001'
			CA=""""
			CA3=""""
		elif [ -n ""$FM190W"" ]; then
			M2='11111011000111001111000011011101010001111110010100001000000000000100011'
			M5='1110101100011100010100001101110000000101100000010000100000000000010001100010111000000000001101'
		else
			M2='111110110001100011110000010111000000011110000000000000000000000001'
			CA=""l850-2xbands""
			CA3=""l850-3xbands""
		fi
	;;
	""413c"" )
		case $uPid in

			""81d7""|""81d8""|""e0b4"" |""e0b5""|""1910"")
				M2='11111011000111001111000011011101000001111110010100000000000000000100'
				CA=""""
				CA3=""""
			;;
		esac
	;;
	""1bc7"" )
		case $uPid in

			""1040""|""1041"")
				L1X=$(uci -q get modem.modem$CURRMODEM.L1X)
				M2=$L1X
				CA=""""
				CA3=""""
			;;
		esac
	;;
	* )
		exit 0
	;;
esac

reverse $L1
echo $revstr > /tmp/bmask1
if [ ! -z $L5 ]; then
	reverse $L5
else
	revstr=""x""
fi
echo $revstr >> /tmp/bmask1
if [ ! -z $L6 ]; then
	reverse $L6
else
	revstr=""x""
fi
echo $revstr >> /tmp/bmask1
echo $M2 >> /tmp/bmask1
echo $M5 >> /tmp/bmask1
if [ -z ""$M6"" ]; then
	M6=""x""
fi
echo $M6 >> /tmp/bmask1
if [ $CA ]; then
	echo $CA >> /tmp/bmask1
	if [ $CA3 ]; then
		echo $CA3 >> /tmp/bmask1
		if [ $CA4 ]; then
			echo $CA4 >> /tmp/bmask1
		fi
	fi
fi
mv /tmp/bmask1 /tmp/bmask

"
PL9UF2Ri,bandmask,snowgum,Bash,Wednesday 28th of February 2024 08:36:59 PM CDT,"#!/bin/sh

ROOTER=/usr/lib/rooter

log() {
	modlog ""Band Mask $CURRMODEM"" ""$@""
}

CURRMODEM=$1
MODTYPE=$2
uci set modem.modem$CURRMODEM.modtype=$MODTYPE
uci commit modem

CPORT=$(uci get modem.modem$CURRMODEM.commport)

sierrabandmask() {
	enb=$(uci -q get custom.bandlock.enabled)
	ATCMDD='AT!ENTERCND=""A710"";!BAND?'
	OX=$($ROOTER/gcom/gcom-locked ""/dev/ttyUSB$CPORT"" ""run-at.gcom"" ""$CURRMODEM"" ""$ATCMDD"")
	if [ $enb == ""1"" ]; then
		log "" ""
		log ""Sierra Response : $OX""
		log "" ""
	fi
	OX=$(echo $OX | tr "" "" '\x0a')
	echo ""$OX"" > /tmp/sierrabm
	idP=$(uci get modem.modem$CURRMODEM.idP)
	if [ ""$idP"" = ""90d3"" -o ""$idP"" = ""90d2"" ]; then
		while IFS= read -r line; do
			for i in $(seq 14); do
				read -r line
				if [ ""$line"" = ""LTE:"" ]; then
					read -r line
					break
				fi
			done
			ltel=$line
			read -r line
			lteh=$line
			a=$lteh$ltel
			L1=${a:10}
			for i in $(seq 4); do
				read -r line
			done
			ltel=$line
			read -r line
			lteh=$line
			a=$lteh$ltel
			L5=${a:10}
			for i in $(seq 4); do
				read -r line
			done
			ltel=$line
			read -r line
			lteh=$line
			a=$lteh$ltel
			L6=${a:10}
			break
		done < /tmp/sierrabm

		log "" ""
		log ""EM9191 LTE Band Mask : $L1""
		log ""EM9191 5G NSA Band Mask : $L5""
		log ""EM9191 5G NA Band Mask : $L6""
		log "" ""

		uci set modem.modem$CURRMODEM.GW=""""
		uci set modem.modem$CURRMODEM.L1=""$L1""
		uci set modem.modem$CURRMODEM.L5=""$L5""
		uci set modem.modem$CURRMODEM.L6=""$L6""
		uci commit modem
		ATCMDD='AT!ENTERCND=""AWRONG""'
		OX=$($ROOTER/gcom/gcom-locked ""/dev/ttyUSB$CPORT"" ""run-at.gcom"" ""$CURRMODEM"" ""$ATCMDD"")
		$ROOTER/luci/mask.sh
		exit 0
	fi
	line=$OX
	Unk=$(echo $line | grep ""Unknown"")
	if [ ""$Unk"" ]; then
		BND=$(echo $line | cut -d, -f6 | tr "" "" "","")
		if [ $enb == ""1"" ]; then
			log ""Unknw : $BND""
		fi
		L1=$(echo $BND | cut -d, -f11)
		GW=$(echo $BND | cut -d, -f10)
		L2=$(echo $BND | cut -d, -f13)
	else
		all=$(echo $line | grep ""L Band Mask 2"")
		if [ ""$all"" ]; then
			BND=$(echo $line | cut -d, -f4 | tr "" "" "","")
			if [ $enb == ""1"" ]; then
				log ""EM7511 : $BND""
			fi
			OK=8
			EOK=$(echo $BND | cut -d, -f$OK)
			while [ $EOK != ""OK"" ]; do
				OK=$(( OK + 1 ))
				EOK=$(echo $BND | cut -d, -f$OK)
			done
			if [ $enb == ""1"" ]; then
				log ""$OK""
			fi
			ex1=$(( OK - 5 ))
			ex2=$(( OK - 6 ))
			ex3=$(( OK - 3 ))
			L1=$(echo $BND | cut -d, -f$ex1)
			GW=$(echo $BND | cut -d, -f$ex2)
			L2=$(echo $BND | cut -d, -f$ex3)
		else
			BND=$(echo $line | cut -d, -f5 | tr "" "" "","")
			if [ $enb == ""1"" ]; then
				log ""$BND""
			fi
			L1=$(echo $BND | cut -d, -f3)
			GW=$(echo $BND | cut -d, -f2)
			L2=$(echo $BND | cut -d, -f5)
		fi
	fi
	if [ ! $L2 ]; then
		L2=""0000000000000000""
	fi
	if [ $L2 = ""OK"" ]; then
		L2=""0000000000000000""
	fi
	if [ $enb == ""1"" ]; then
		log "" ""
		log ""LTE Band Mask : $L2$L1""
		log "" ""
	fi
	uci set modem.modem$CURRMODEM.GW=""$GW""
	uci set modem.modem$CURRMODEM.L1=""0x$L2$L1""
	uci set modem.modem$CURRMODEM.L1X=""$L1""
	uci set modem.modem$CURRMODEM.L2=""$L2""
	uci commit modem
	ATCMDD='AT!ENTERCND=""AWRONG""'
	OX=$($ROOTER/gcom/gcom-locked ""/dev/ttyUSB$CPORT"" ""run-at.gcom"" ""$CURRMODEM"" ""$ATCMDD"")
}

quebandmask() {
	enb=$(uci -q get custom.bandlock.enabled)
	idP=$(uci get modem.modem$CURRMODEM.idP)
	CPORT=$(uci get modem.modem$CURRMODEM.commport)
	ATCMDD=""AT+CGMM""
	OX=$($ROOTER/gcom/gcom-locked ""/dev/ttyUSB$CPORT"" ""run-at.gcom"" ""$CURRMODEM"" ""$ATCMDD"")
	model=$(echo ""$OX"" | tr '\n' ' ' | cut -d' ' -f2)
	uci set modem.modem$CURRMODEM.model=$model
	ATCMDD='AT+QCFG=""band""'
	EM160=0
	if [ $enb == ""1"" ]; then
		log "" ""
		log ""Modem PID : $idP""
		log ""Modem Model : $model""
		log "" ""
	fi
	if [ $idP = ""0620"" -o $idP = ""0800"" -o $idP = ""030b"" -o $idP = ""0900"" -o $idP = ""0801"" ]; then
		EM20=$(echo $model | grep ""EM20"")
		if [ -z ""$EM20"" ]; then
			EM160=1
			ATCMDD='AT+QNWPREFCFG=""lte_band""'
		fi
	fi
	OX=$($ROOTER/gcom/gcom-locked ""/dev/ttyUSB$CPORT"" ""run-at.gcom"" ""$CURRMODEM"" ""$ATCMDD"")
	if [ $enb == ""1"" ]; then
		log "" ""
		log ""Quectel Response : $OX""
		log "" ""
	fi
	L5=""""
	L6=""""
	EMT=0

	if [ $EM160 = $EMT ]; then
		qm=$(echo $OX"" "" | grep ""+QCFG:"" | tr -d '""' | tr "" "" "","")
		if [ $enb == ""1"" ]; then
			log ""$qm""
			log "" ""
		fi
		L1=$(echo $qm | cut -d, -f5)
		GW=$(echo $qm | cut -d, -f4)
		L2=""0""
	else
		qm=$(echo $OX"" "" | grep ""+QNWPREFCFG:"" | tr -d '""' | tr "" "" "":"" | tr "","" "":"")
		if [ $enb == ""1"" ]; then
			log ""$qm""
			log "" ""
		fi
		bd=5
		msk=""""
		L1=$(echo $qm | cut -d: -f""$bd"")
		while [ $L1 != ""OK"" ]
		do
			msk=$msk$L1"" ""
			bd=$((bd+1))
			L1=$(echo $qm | cut -d: -f""$bd"")
		done
		L1=$(encodemask $msk)
		if [ -z ""$L1"" ]; then
			L1=""0""
		fi
		L2=""0""
		GW=""0""
		EMT=0800

		if [ $idP = $EMT -o $idP = 0900 -o $idP = ""0801"" ]; then
			ATCMDD='AT+QNWPREFCFG=""nsa_nr5g_band""'
			OX=$($ROOTER/gcom/gcom-locked ""/dev/ttyUSB$CPORT"" ""run-at.gcom"" ""$CURRMODEM"" ""$ATCMDD"")
			qm=$(echo $OX"" "" | grep ""+QNWPREFCFG:"" | tr -d '""' | tr "" "" "":"" | tr "","" "":"")
			if [ $enb == ""1"" ]; then
				log ""EM160/RM500 $qm""
			fi
			bd=5
			msk=""""
			L5=$(echo $qm | cut -d: -f""$bd"")

			while [ $L5 != ""OK"" ]
			do
				msk=$msk$L5"" ""
				bd=$((bd+1))
				L5=$(echo $qm | cut -d: -f""$bd"")
			done
			if [ -z ""$msk"" -o $msk = ""0"" ]; then
				L5=""0""
			else
				L5=$(encodemask $msk)
			fi

			ATCMDD='AT+QNWPREFCFG=""nr5g_band""'
			OX=$($ROOTER/gcom/gcom-locked ""/dev/ttyUSB$CPORT"" ""run-at.gcom"" ""$CURRMODEM"" ""$ATCMDD"")
			qm=$(echo $OX"" "" | grep ""+QNWPREFCFG:"" | tr -d '""' | tr "" "" "":"" | tr "","" "":"")
			if [ $enb == ""1"" ]; then
				log ""EM160/RM500 $qm""
			fi
			bd=5
			msk=""""
			L6=$(echo $qm | cut -d: -f""$bd"")

			while [ $L6 != ""OK"" ]
			do
				msk=$msk$L6"" ""
				bd=$((bd+1))
				L6=$(echo $qm | cut -d: -f""$bd"")
			done
			if [ -z ""$msk"" -o $msk = ""0"" ]; then
				L6=""0""
			else
				L6=$(encodemask $msk)
			fi
			$ROOTER/luci/celltype.sh $CURRMODEM
			netmode=$(uci -q get modem.modem$CURRMODEM.netmode)
			NET=""0""
			if [ -e /etc/qfake ]; then
				if [ $netmode = ""7"" ]; then
					NET=8
				fi
			else
				if [ $netmode = ""8"" ]; then
					NET=8
				fi
				if [ $netmode = ""9"" ]; then
					NET=9
				fi
			fi
			uci set modem.modem$CURRMODEM.NET=""$NET""
			if [ $NET = ""8"" -a $L1 = ""0"" ]; then
				if [ $enb == ""1"" ]; then
					log ""NSA no LTE""
				fi
			fi
		fi
	fi
	if [ $enb == ""1"" ]; then
		log "" ""
		log ""LTE Band Mask : $L1""
		log ""5G NSA Band Mask : $L5""
		log ""5G NA Band Mask : $L6""
		log "" ""
	fi
	uci set modem.modem$CURRMODEM.GW=""$GW""
	uci set modem.modem$CURRMODEM.L1=""$L1""
	uci set modem.modem$CURRMODEM.L2=""$L2""
	uci set modem.modem$CURRMODEM.L5=""$L5""
	uci set modem.modem$CURRMODEM.L6=""$L6""
	uci commit modem
}

fibomask() {
	idP=$(uci get modem.modem$CURRMODEM.idP)
	idV=$(uci get modem.modem$CURRMODEM.idV)
	enb=$(uci -q get custom.bandlock.enabled)
	CPORT=$(uci get modem.modem$CURRMODEM.commport)
	msk=""""
	NRsupport=false
	ATCMDD='AT+GTACT=?'
	OX=$($ROOTER/gcom/gcom-locked ""/dev/ttyUSB$CPORT"" ""run-at.gcom"" ""$CURRMODEM"" ""$ATCMDD"")
	OX=$(echo $OX | grep -o ""+GTACT:[^)]\+"")
	if [ -n ""$OX"" ]; then
		RATlist=$(echo $OX | grep -o ""[0-9]\{2\}"")
		for RATval in $(echo ""$RATlist""); do
			if [ $RATval == ""14"" -o $RATval == ""16"" -o $RATval == ""17"" -o $RATval == ""20"" ]; then
				NRsupport=true
			fi
		done
		ATCMDD='AT+GTACT?'
		OX=$($ROOTER/gcom/gcom-locked ""/dev/ttyUSB$CPORT"" ""run-at.gcom"" ""$CURRMODEM"" ""$ATCMDD"")
		OX=$(echo $OX"" "" | grep ""+GTACT:"" | tr -d '""' | tr "" "" "","")
	elif [ ""$idV"" == ""2cb7"" -a ""$idP"" == ""0104"" ]; then
# Fibocom FM190W has a bug, failing test syntax AT+GTACT=?
		NRsupport=true
		ATCMDD='AT+GTACT?'
		OX=$($ROOTER/gcom/gcom-locked ""/dev/ttyUSB$CPORT"" ""run-at.gcom"" ""$CURRMODEM"" ""$ATCMDD"")
		OX=$(echo $OX"" "" | grep ""+GTACT:"" | tr -d '""' | tr "" "" "","")
	else
		ATCMDD='AT+XACT?'
		OX=$($ROOTER/gcom/gcom-locked ""/dev/ttyUSB$CPORT"" ""run-at.gcom"" ""$CURRMODEM"" ""$ATCMDD"")
		OX=$(echo $OX"" "" | grep ""+XACT:"" | tr -d '""' | tr "" "" "","")
		if [ -z ""$OX"" ]; then
			ATCMDD=""""
			OX=""No AT command found to read bands""
		fi
	fi
	LTEbands=$(echo ""$OX"" | grep -o ""1[0-9]\{2\}"")
	NRbands=$(echo ""$OX"" | grep -o ""50[0-9]\{1,3\}"")
	for bandval in $(echo ""$LTEbands""); do
		msk=$msk$((bandval-100))"" ""
	done
	if [ -n ""$msk"" ]; then
		L1=$(encodemask $msk)
	else
		L1=""0""
	fi
	msk=""""
	for bandval in $(echo ""$NRbands""); do
		msk=$msk${bandval:2}"" ""
	done
	if [ $enb == ""1"" ]; then
		log "" ""
		log ""Get Current Bands : $ATCMDD""
		log ""Current Bands : $OX""
		log "" ""
	fi
	if [ -z ""$msk"" ]; then
		if $NRsupport; then
			L5=""0x0""
		else
			L5=""""
		fi
	else
		L5=""0x""$(encodemask $msk)
	fi
	if [ -n ""$L1$L5"" ]; then
		if [ $enb == ""1"" ]; then
			log "" ""
			log ""LTE Band Mask : $L1""
			log ""5G Band Mask : $L5""
			log "" ""
		fi
		uci set modem.modem$CURRMODEM.L1=""0x$L1""
		uci set modem.modem$CURRMODEM.L5=""$L5""
		uci commit modem
	fi
}

t77mask() {
	enb=$(uci -q get custom.bandlock.enabled)
	ATCMDD='AT^SLBAND?'
	OX=$($ROOTER/gcom/gcom-locked ""/dev/ttyUSB$CPORT"" ""run-at.gcom"" ""$CURRMODEM"" ""$ATCMDD"")
	if [ $enb == ""1"" ]; then
		log "" ""
		log ""T77 Response : $OX""
		log "" ""
	fi
	lte=$(echo $OX"" "" | tr "","" "":"" | tr "" "" "","")
	if [ $enb == ""1"" ]; then
		log "" ""
		log ""T77 Response : $lte""
		log "" ""
	fi
	qm=$(echo $lte | cut -d, -f5)
	log ""$qm""
	bd=3
	msk=""""
	L1=$(echo $qm | cut -d: -f""$bd"")
	while [ $L1 != ""OK"" ]
	do
		msk=$msk$L1"" ""
		bd=$((bd+1))
		L1=$(echo $qm | cut -d: -f""$bd"")
	done
	L1=$(encodemask $msk)
	if [ -z ""$L1"" ]; then
		L1=""0""
	fi
	if [ $enb == ""1"" ]; then
		log "" ""
		log ""LTE Band Mask : $L1""
		log "" ""
	fi
	uci set modem.modem$CURRMODEM.L1=""0x$L1""
	uci commit modem
}

reversebit() {
	LX=$1
	length=${#LX}
	jx=""${LX:2:length-2}""
	length=${#jx}
	str=""""
	i=$((length-1))
	while [ $i -ge 0 ]
	do
		dgt=""0x""${jx:$i:1}
		DecNum=`printf ""%d"" $dgt`
		Binary=
		Number=$DecNum
		while [ $DecNum -ne 0 ]
		do
			Bit=$(expr $DecNum % 2)
			Binary=$Bit$Binary
			DecNum=$(expr $DecNum / 2)
		done
		if [ -z $Binary ]; then
			Binary=""0000""
		fi
		len=${#Binary}
		while [ $len -lt 4 ]
		do
			Binary=""0""$Binary
			len=${#Binary}
		done
		revstr=""""
		length=${#Binary}
		ii=$((length-1))
		while [ $ii -ge 0 ]
		do
			revstr=$revstr${Binary:$ii:1}
			ii=$((ii-1))
		done
		str=$str$revstr
		i=$((i-1))
	done
	revstr=$str""0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000""
}

reverse() {
	REV=""""
	BNDD=$1
	strlen=${#BNDD}
	i=$((strlen-1))
	while [ $i -ge 0 ]
	do
		REV=$REV${BNDD:$i:1}
		i=$((i-1))
	done
}

telitbandmask() {
	enb=$(uci -q get custom.bandlock.enabled)
	ATCMDD='AT#BND?'
	OX=$($ROOTER/gcom/gcom-locked ""/dev/ttyUSB$CPORT"" ""run-at.gcom"" ""$CURRMODEM"" ""$ATCMDD"")
	if [ $enb == ""1"" ]; then
		log "" ""
		log ""Telit Response : $OX""
		log "" ""
	fi
	OX=$(echo $OX | tr "" "" '\x0a')
	line=$OX
	bnd=$(echo $line | grep ""BND: "")
	if [ ! -z ""$bnd"" ]; then
		line=$(echo $bnd | tr "" "" ',')
		if [ $enb == ""1"" ]; then
			log ""$line""
		fi
		BND=$(echo $line | cut -d, -f5)
		ext=$(echo $line | cut -d, -f6)
		reverse $BND
		revs=$REV""0000000000000000""
		revs=${revs:0:16}
		reverse $revs
		EXT=""""
		if [ ""$ext"" != ""OK"" -a ""$ext"" != ""0"" ]; then
			EXT=$ext
		fi
		revs=$EXT$REV
		if [ $enb == ""1"" ]; then
			log "" ""
			log ""LTE Band Mask : $revs""
			log "" ""
		fi
		ATCMDD='AT#BND=?'
		OX=$($ROOTER/gcom/gcom-locked ""/dev/ttyUSB$CPORT"" ""run-at.gcom"" ""$CURRMODEM"" ""$ATCMDD"")
		OX=$(echo $OX | tr "" "" '\x0a')
		OX=$(echo ${OX//),(/!})
		BND=$(echo $OX""!!"" | cut -d! -f3)
		extt=$(echo $OX""!!"" | cut -d! -f4)
		if [ ! -z ""$extt"" ]; then
			extt=$(echo $extt | tr ""("" ',')
			extt=$(echo $extt | tr "")"" ',')
			extt=$(echo $extt"",,"" | cut -d, -f1)
		fi
		BND=$(echo $BND | tr ""("" ',')
		BND=$(echo $BND | tr "")"" ',')
		BND=$(echo $BND"",,"" | cut -d, -f1)
		reverse $BND
		revx=$REV""0000000000000000""
		revx=${revx:0:16}
		reverse $revx
		revx=$extt$REV
		revx=${revx:0:18}
		reversebit ""0x""$revx
		revstr=${revstr:0:72}
		if [ $enb == ""1"" ]; then
			log "" ""
			log ""LTE Bit Mask : $revstr""
			log "" ""
		fi

		uci set modem.modem$CURRMODEM.GW=""0""
		uci set modem.modem$CURRMODEM.L1=""0x$revs""
		uci set modem.modem$CURRMODEM.L1X=""$revstr""
		uci set modem.modem$CURRMODEM.LEXT=""$extt""
		uci set modem.modem$CURRMODEM.L2=""0""
		uci commit modem
	fi
}

case $MODTYPE in
	""0"" )
		sierrabandmask
	;;
	""1"" )
		quebandmask
	;;
	""2"" )
		fibomask
	;;
	""3"" )
		t77mask
	;;
	""4"" )
		telitbandmask
	;;
esac

$ROOTER/luci/mask.sh
"
qRjVCLWV,Reflective material,marcusa3000,Lua,Wednesday 28th of February 2024 08:23:52 PM CDT,"{
	Tools = ordered() {
		Text3D = Text3D {
			NameSet = true,
			Inputs = {
				LayoutRotation = Input { Value = 1, },
				TransformRotation = Input { Value = 1, },
				StyledText = Input { Value = ""JustCropIt"", },
				Font = Input { Value = ""Helvetica Neue"", },
				Style = Input { Value = ""Bold"", },
				Size = Input { Value = 1.5, },
				VerticalTopCenterBottom = Input { Value = 1, },
				VerticalJustification = Input { Value = 3, },
				VerticalJustificationNew = Input { Value = 3, },
				HorizontalJustificationNew = Input { Value = 3, },
				Extrusion = Input { Value = 1, },
				ExtrusionProfile = Input {
					SourceOp = ""Text3DExtrusionProfile"",
					Source = ""Value"",
				},
				ExtrusionDepth = Input { Value = 0.5, },
				BevelDepth = Input { Value = 0.0126, },
				BevelWidth = Input { Value = 0.015, },
			},
			ViewInfo = OperatorInfo { Pos = { -550, -115.5 } },
		},
		Text3DExtrusionProfile = LUTBezier {
			KeyColorSplines = {
				[0] = {
					[0] = { 0, RH = { 0.0666666666666667, 0.333333333333333 }, Flags = { Linear = true } },
					[0.2] = { 1, LH = { 0.133333333333333, 0.666666666666667 }, RH = { 0.4, 1 }, Flags = { Linear = true } },
					[0.8] = { 1, LH = { 0.6, 1 }, RH = { 0.866666666666667, 0.666666666666667 }, Flags = { Linear = true } },
					[1] = { 0, LH = { 0.933333333333333, 0.333333333333333 }, Flags = { Linear = true } }
				}
			},
			SplineColor = { Red = 192, Green = 128, Blue = 64 },
			CtrlWZoom = false,
		},
		UVMap3D1 = UVMap {
			Inputs = {
				SceneInput = Input {
					SourceOp = ""Text3D"",
					Source = ""Output"",
				},
				MapMode = Input { Value = FuID { ""CubeMap"" }, },
				LockUVs = Input { Value = 1, },
				RefTime = Input { Value = 120, },
				[""Size.X""] = Input { Value = 3.58994507789612, },
				[""Size.Y""] = Input { Value = 0.929207563400269, },
				[""Size.Z""] = Input { Value = 0.787800014019012, },
				[""Center.X""] = Input { Value = 0.00453031063079834, },
				[""Center.Y""] = Input { Value = 0.268288254737854, },
				[""Center.Z""] = Input { Value = 0.375000029802322, },
			},
			ViewInfo = OperatorInfo { Pos = { -550, -49.5 } },
		},
		Transform2 = Transform {
			Inputs = {
				Center = Input {
					SourceOp = ""Path1"",
					Source = ""Position"",
				},
				FlipVert = Input { Value = 1, },
				Input = Input {
					SourceOp = ""AlphaMultiply1_1"",
					Source = ""Output"",
				},
				EffectMask = Input {
					SourceOp = ""Bitmap1"",
					Source = ""Mask"",
				}
			},
			ViewInfo = OperatorInfo { Pos = { -275, 379.5 } },
		},
		Path1 = PolyPath {
			DrawMode = ""InsertAndModify"",
			CtrlWZoom = false,
			Inputs = {
				Displacement = Input {
					SourceOp = ""Path1Displacement"",
					Source = ""Value"",
				},
				PolyLine = Input {
					Value = Polyline {
						Points = {
							{ Linear = true, LockY = true, X = 0, Y = -0.9236697, RX = 0, RY = 0.0126666666666667 },
							{ Linear = true, LockY = true, X = 0, Y = -0.8856697, LX = 0, LY = -0.0126666666666667, RX = 0, RY = 0.0473333333333333 },
							{ Linear = true, LockY = true, X = 0, Y = -0.7436697, LX = 0, LY = -0.0473333333333333, RX = 0, RY = -0.00399999999999997 },
							{ Linear = true, LockY = true, X = 0, Y = -0.7556697, LX = 0, LY = 0.00399999999999997, RX = 0, RY = 0.019 },
							{ Linear = true, LockY = true, X = 0, Y = -0.6986697, LX = 0, LY = -0.019, RX = 0, RY = -0.0347948666666666 },
							{ Linear = true, LockY = true, X = 0, Y = -0.8030543, LX = 0, LY = 0.0347948666666666 }
						}
					},
				},
			},
		},
		Path1Displacement = BezierSpline {
			SplineColor = { Red = 255, Green = 0, Blue = 255 },
			CtrlWZoom = false,
			NameSet = true,
			KeyFrames = {
				[26] = { 0, RH = { 27, 0.0358438558631783 }, Flags = { Linear = true, LockedY = true } },
				[29] = { 0.107531567589535, LH = { 28, 0.0716877117263565 }, RH = { 30.3333333333333, 0.24147439739404 }, Flags = { Linear = true, LockedY = true } },
				[33] = { 0.509360057003051, LH = { 31.6666666666667, 0.375417227198546 }, RH = { 33.3333333333333, 0.520679169380897 }, Flags = { Linear = true, LockedY = true } },
				[34] = { 0.543317394136588, LH = { 33.6666666666667, 0.531998281758742 }, RH = { 34.3333333333333, 0.597083177931354 }, Flags = { Linear = true, LockedY = true } },
				[35] = { 0.704614745520886, LH = { 34.6666666666667, 0.65084896172612 }, RH = { 59, 0.803076497013924 }, Flags = { Linear = true, LockedY = true } },
				[107] = { 1, LH = { 83, 0.901538248506962 }, Flags = { Linear = true, LockedY = true } }
			}
		},
		AlphaMultiply1_1 = AlphaMultiply {
			Inputs = {
				MultiplyByMask = Input { Value = 1, },
				MaskChannel = Input { Value = 5, },
				Input = Input {
					SourceOp = ""ErodeDilate1_1"",
					Source = ""Output"",
				},
				CommentsNest = Input { Value = 0, },
				FrameRenderScriptNest = Input { Value = 0, },
			},
			ViewInfo = OperatorInfo { Pos = { -330, 313.5 } },
		},
		SphereMap1 = SphereMap {
			Inputs = {
				MapMode = Input { Value = 1, },
				Rotation = Input { Value = 1, },
				[""Rotate.RotOrder""] = Input { Value = FuID { ""ZYX"" }, },
				[""Rotate.X""] = Input { Value = -2.6, },
				[""Rotate.Y""] = Input { Value = 289.6, },
				[""FilterMode.Nest""] = Input { Value = 1, },
				Image = Input {
					SourceOp = ""Merge6"",
					Source = ""Output"",
				},
				MaterialID = Input { Value = 3, },
			},
			ViewInfo = OperatorInfo { Pos = { -385, -82.5 } },
		},
		Bitmap1 = BitmapMask {
			Inputs = {
				Filter = Input { Value = FuID { ""Fast Gaussian"" }, },
				Invert = Input { Value = 1, },
				MaskWidth = Input { Value = 1080, },
				MaskHeight = Input { Value = 1080, },
				PixelAspect = Input { Value = { 1, 1 }, },
				UseFrameFormatSettings = Input { Value = 1, },
				ClippingMode = Input { Value = FuID { ""None"" }, },
				Image = Input {
					SourceOp = ""AlphaMultiply1_1"",
					Source = ""Output"",
				},
			},
			ViewInfo = OperatorInfo { Pos = { -385, 379.5 } },
		},
		Renderer3D2 = Renderer3D {
			CustomData = {
				ToolVersion = 2,
			},
			Inputs = {
				GlobalOut = Input { Value = 245, },
				Width = Input { Value = 854, },
				Height = Input { Value = 458, },
				[""Gamut.SLogVersion""] = Input { Value = FuID { ""SLog2"" }, },
				SceneInput = Input {
					SourceOp = ""Merge3D1"",
					Source = ""Output"",
				},
				[""RendererSoftware.Channels.Nest""] = Input { Value = 1, },
				[""RendererSoftware.Channels.Z""] = Input { Value = 1, },
				[""RendererSoftware.LightingEnabled""] = Input { Value = 1, },
				[""RendererSoftware.ShadowsEnabled""] = Input { Value = 1, },
			},
			ViewInfo = OperatorInfo { Pos = { -440, 49.5 } },
		},
		Merge3D1 = Merge3D {
			Inputs = {
				SceneInput1 = Input {
					SourceOp = ""Transform3D1"",
					Source = ""Output"",
				},
				SceneInput2 = Input {
					SourceOp = ""SpotLight1"",
					Source = ""Output"",
				},
				SceneInput3 = Input {
					SourceOp = ""Camera3D1"",
					Source = ""Output"",
				},
				SceneInput4 = Input {
					SourceOp = ""AmbientLight1"",
					Source = ""Output"",
				},
				SceneInput5 = Input {
					SourceOp = ""SpotLight1_1"",
					Source = ""Output"",
				},
			},
			ViewInfo = OperatorInfo { Pos = { -605, 49.5 } },
		},
		SoftGlow1 = SoftGlow {
			Inputs = {
				Filter = Input { Value = FuID { ""Fast Gaussian"" }, },
				Threshold = Input { Value = 0.598, },
				XGlowSize = Input { Value = 3.1, },
				Input = Input {
					SourceOp = ""LumaKeyer1"",
					Source = ""Output"",
				},
			},
			ViewInfo = OperatorInfo { Pos = { -330, 148.5 } },
		},
		LumaKeyer1 = LumaKeyer {
			Inputs = {
				Low = Input { Value = 0.15, },
				Filter = Input { Value = FuID { ""Fast Gaussian"" }, },
				Input = Input {
					SourceOp = ""Renderer3D2"",
					Source = ""Output"",
				},
			},
			ViewInfo = OperatorInfo { Pos = { -330, 115.5 } },
		},
		Ward1 = MtlWard {
			Inputs = {
				[""Diffuse.Color.Red""] = Input { Value = 0, },
				[""Diffuse.Color.Green""] = Input { Value = 0.882, },
				[""Diffuse.Color.Blue""] = Input { Value = 0, },
				[""Diffuse.Color.Material""] = Input {
					SourceOp = ""SphereMap1"",
					Source = ""MaterialOutput"",
				},
				[""Diffuse.Opacity""] = Input { Value = 0.181, },
				[""Transmittance.Nest""] = Input { Value = 1, },
				[""Transmittance.Color.Red""] = Input { Value = 0.339, },
				[""Transmittance.Color.Green""] = Input { Value = 0.606, },
				[""Transmittance.Color.Blue""] = Input { Value = 0.252, },
				UseTwoSidedLighting = Input { Value = 1, },
				MaterialID = Input { Value = 5, },
			},
			ViewInfo = OperatorInfo { Pos = { -330, -16.5 } },
		},
		Merge6 = Merge {
			Inputs = {
				Background = Input {
					SourceOp = ""TimeStretcher1"",
					Source = ""Output"",
				},
				Foreground = Input {
					SourceOp = ""Tracker2"",
					Source = ""Output"",
				},
				PerformDepthMerge = Input { Value = 0, },
			},
			ViewInfo = OperatorInfo { Pos = { -165, -82.5 } },
		},
		Reflect1 = MtlReflect {
			Inputs = {
				BackgroundMaterial = Input {
					SourceOp = ""Ward1"",
					Source = ""MaterialOutput"",
				},
				[""Reflection.GlancingStrength""] = Input { Value = 1, },
				[""Reflection.FaceOnStrength""] = Input { Value = 0.15, },
				[""Reflection.Color.Material""] = Input {
					SourceOp = ""SphereMap1"",
					Source = ""MaterialOutput"",
				},
				[""Refraction.RefractiveIndex.Red""] = Input { Value = 0.997, },
				[""Refraction.Tint.Red""] = Input { Value = 0.717, },
				[""Refraction.Tint.Green""] = Input { Value = 0.230874, },
				[""Refraction.Tint.Blue""] = Input { Value = 0.230874, },
				MaterialID = Input { Value = 1, },
			},
			ViewInfo = OperatorInfo { Pos = { -440, -16.5 } },
		},
		TimeStretcher1 = TimeStretcher {
			Inputs = {
				SourceTime = Input { Value = 0, },
				InterpolateBetweenFrames = Input { Value = 0, },
				SampleSpread = Input { Disabled = true, },
				Input = Input {
					SourceOp = ""Tracker2"",
					Source = ""Output"",
				},
			},
			ViewInfo = OperatorInfo { Pos = { -165, -16.5 } },
		},
		Chroma_It = MacroOperator {
			CustomData = {
				Path = {
					Map = {
						[""Setting:""] = ""Macros:/""
					}
				},
			},
			Inputs = ordered() {
				Input = InstanceInput {
					SourceOp = ""ChrIP"",
					Source = ""Input"",
				},
				Size = InstanceInput {
					SourceOp = ""ChrIA"",
					Source = ""CASize"",
					MaxScale = 0.05,
					Page = ""Controls"",
					Default = 0.005,
				},
				Blur = InstanceInput {
					SourceOp = ""ChrIA"",
					Source = ""CABlur"",
					Page = ""Controls"",
					Default = 1,
				},
				AB1 = InstanceInput {
					SourceOp = ""ChrIAB"",
					Source = ""ApplyBlank1"",
					Page = ""Controls"",
				},
				Center = InstanceInput {
					SourceOp = ""ChrIA"",
					Source = ""CACenter"",
					Page = ""Controls"",
					DefaultX = 0.5,
					DefaultY = 0.5,
				},
				Offset = InstanceInput {
					SourceOp = ""ChrIA"",
					Source = ""CAOffset"",
					Page = ""Controls"",
					DefaultX = 0.5,
					DefaultY = 0.5,
				},
				AB2 = InstanceInput {
					SourceOp = ""ChrIAB"",
					Source = ""ApplyBlank1"",
					Page = ""Controls"",
				},
				B1 = InstanceInput {
					SourceOp = ""ChrIA"",
					Source = ""Blank1"",
				},
				RedA = InstanceInput {
					SourceOp = ""ChrIA"",
					Source = ""ProcessRed"",
					Name = ""Process A"",
					ControlGroup = 6,
					Default = 1,
				},
				GreenA = InstanceInput {
					SourceOp = ""ChrIA"",
					Source = ""ProcessGreen"",
					ControlGroup = 6,
					Default = 0,
				},
				BlueA = InstanceInput {
					SourceOp = ""ChrIA"",
					Source = ""ProcessBlue"",
					ControlGroup = 6,
					Default = 0,
				},
				RedB = InstanceInput {
					SourceOp = ""ChrIB"",
					Source = ""ProcessRed"",
					Name = ""Process B"",
					ControlGroup = 9,
					Default = 0,
				},
				GreenB = InstanceInput {
					SourceOp = ""ChrIB"",
					Source = ""ProcessGreen"",
					ControlGroup = 9,
					Default = 0,
				},
				BlueB = InstanceInput {
					SourceOp = ""ChrIB"",
					Source = ""ProcessBlue"",
					ControlGroup = 9,
					Default = 1,
				},
				B2 = InstanceInput {
					SourceOp = ""ChrIB"",
					Source = ""Blank1"",
				},
				Edges = InstanceInput {
					SourceOp = ""ChrIB"",
					Source = ""Edges"",
					Default = 2,
				},
				Mnest = InstanceInput {
					SourceOp = ""ChrIA"",
					Source = ""Mnest"",
					Page = ""Controls"",
				},
				Input16 = InstanceInput {
					SourceOp = ""ChrIM"",
					Source = ""Blend"",
					Default = 1,
				},
				ApplyMaskInverted = InstanceInput {
					SourceOp = ""ChrIM"",
					Source = ""ApplyMaskInverted"",
					Default = 0,
				},
				MultiplyByMask = InstanceInput {
					SourceOp = ""ChrIM"",
					Source = ""MultiplyByMask"",
					Default = 0,
				},
				FitMask = InstanceInput {
					SourceOp = ""ChrIM"",
					Source = ""FitMask"",
				},
				B3 = InstanceInput {
					SourceOp = ""ChrIM"",
					Source = ""Blank2"",
				},
				MaskLow = InstanceInput {
					SourceOp = ""ChrIM"",
					Source = ""MaskLow"",
					ControlGroup = 8,
					Default = 0,
				},
				MaskHigh = InstanceInput {
					SourceOp = ""ChrIM"",
					Source = ""MaskHigh"",
					ControlGroup = 8,
					Default = 1,
				},
				MaskClipBlack = InstanceInput {
					SourceOp = ""ChrIM"",
					Source = ""MaskClipBlack"",
					Name = ""Black"",
					Width = 0.5,
					Default = 1,
				},
				MaskClipWhite = InstanceInput {
					SourceOp = ""ChrIM"",
					Source = ""MaskClipWhite"",
					Name = ""White"",
					Width = 0.5,
					Default = 1,
				},
				EffectMask = InstanceInput {
					SourceOp = ""ChrIM"",
					Source = ""EffectMask"",
				}
			},
			Outputs = {
				MainOutput1 = InstanceOutput {
					SourceOp = ""ChrIM"",
					Source = ""Output"",
				}
			},
			ViewInfo = GroupInfo { Pos = { -110, 148.5 } },
			Tools = ordered() {
				ChrIP = PipeRouter {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Input = Input {
							SourceOp = ""SoftGlow1_1"",
							Source = ""Output"",
						},
					},
					ViewInfo = PipeRouterInfo { Pos = { -83, 7.25758 } },
				},
				ChrIA = Transform {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						ProcessGreen = Input { Value = 0, },
						ProcessBlue = Input { Value = 0, },
						Center = Input {
							Value = { 0.541284403669722, 0.702981651376144 },
							Expression = ""ChrIB.Center"",
						},
						Pivot = Input {
							Value = { 0.578833127317676, 0.710135970333745 },
							Expression = ""CACenter"",
						},
						Size = Input {
							Value = 1.05,
							Expression = ""CASize+1"",
						},
						Edges = Input {
							Value = 2,
							Expression = ""ChrIB.Edges"",
						},
						Input = Input {
							SourceOp = ""ChrIFix"",
							Source = ""Output"",
						},
						CASize = Input { Value = 0.005, },
					},
					ViewInfo = OperatorInfo { Pos = { 27, 73.2576 } },
					UserControls = ordered() {
						CASize = {
							INP_Integer = false,
							INPID_InputControl = ""SliderControl"",
							INP_MaxScale = 0.100000001490116,
							INP_Default = 0.00499999988824129,
							INP_MinScale = 0,
							INP_MinAllowed = 0,
							LINKID_DataType = ""Number"",
							ICS_ControlPage = ""Controls"",
							LINKS_Name = ""Size"",
						},
						CABlur = {
							INP_Integer = false,
							INPID_InputControl = ""SliderControl"",
							INP_MaxScale = 2,
							INP_Default = 0,
							INP_MinScale = 0,
							INP_MinAllowed = 0,
							LINKID_DataType = ""Number"",
							ICS_ControlPage = ""Controls"",
							LINKS_Name = ""Blur"",
						},
						CACenter = {
							INP_DefaultX = 0.5,
							INPID_PreviewControl = ""CrosshairControl"",
							INP_DefaultY = 0.5,
							LINKID_DataType = ""Point"",
							ICS_ControlPage = ""Controls"",
							INPID_InputControl = ""OffsetControl"",
							CHC_Style = ""NormalCross"",
							LINKS_Name = ""Center"",
						},
						CAOffset = {
							INP_DefaultX = 0.5,
							INPID_PreviewControl = ""CrosshairControl"",
							INP_DefaultY = 0.5,
							LINKID_DataType = ""Point"",
							ICS_ControlPage = ""Controls"",
							INPID_InputControl = ""OffsetControl"",
							CHC_Style = ""NormalCross"",
							LINKS_Name = ""Offset"",
						},
						Mnest = {
							LINKID_DataType = ""Number"",
							INP_Integer = false,
							LBLC_DropDownButton = true,
							ICS_ControlPage = ""Controls"",
							LBLC_NumInputs = 10,
							INP_Passive = true,
							INPID_InputControl = ""LabelControl"",
							LINKS_Name = ""Blend & Mask Settings"",
						}
					}
				},
				ChrIB = Transform {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						ProcessRed = Input { Value = 0, },
						ProcessGreen = Input { Value = 0, },
						Center = Input { Expression = ""ChrIA.CAOffset"", },
						Pivot = Input { Expression = ""ChrIA.Pivot"", },
						Size = Input {
							Value = 1.005,
							Expression = ""ChrIA.CASize+1"",
						},
						Edges = Input { Value = 2, },
						InvertTransform = Input { Value = 1, },
						FlattenTransform = Input { Value = 1, },
						Input = Input {
							SourceOp = ""ChrIA"",
							Source = ""Output"",
						},
					},
					ViewInfo = OperatorInfo { Pos = { 27, 106.258 } },
				},
				ChrIPreDB = Transform {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Pivot = Input { Expression = ""ChrIDB.Center"", },
						Size = Input { Expression = ""max(0.01,(1-(ChrIDB.Length/2)))"", },
						Edges = Input { Value = 3, },
						Input = Input {
							SourceOp = ""ChrIB"",
							Source = ""Output"",
						},
					},
					ViewInfo = OperatorInfo { Pos = { 27, 139.258 } },
				},
				ChrIDB = DirectionalBlur {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Type = Input { Value = 3, },
						Center = Input { Expression = ""ChrIA.CACenter"", },
						Length = Input { Expression = ""min(5,((ChrIA.Size-1)*ChrIA.CABlur))"", },
						Input = Input {
							SourceOp = ""ChrIPreDB"",
							Source = ""Output"",
						},
					},
					ViewInfo = OperatorInfo { Pos = { 27, 172.258 } },
				},
				ChrIM = Dissolve {
					Transitions = {
						[0] = ""DFTDissolve""
					},
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Background = Input {
							SourceOp = ""ChrIP"",
							Source = ""Output"",
						},
						Foreground = Input {
							SourceOp = ""ChrIDB"",
							Source = ""Output"",
						},
					},
					ViewInfo = OperatorInfo { Pos = { -28, 238.258 } },
				},
				ChrIAB = Merge {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						PerformDepthMerge = Input { Value = 0, },
					},
					ViewInfo = OperatorInfo { Pos = { 82, 238.258 } },
				},
				ChrIFix = BrightnessContrast {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Input = Input {
							SourceOp = ""ChrIP"",
							Source = ""Output"",
						},
					},
					ViewInfo = OperatorInfo { Pos = { 27, 40.2576 } },
				}
			},
			Colors = { TileColor = { R = 0.584313725490196, G = 0.294117647058824, B = 0.803921568627451 }, }
		},
		ErodeDilate1_1 = ErodeDilate {
			Inputs = {
				Red = Input { Value = 0, },
				Green = Input { Value = 0, },
				Blue = Input { Value = 0, },
				Filter = Input { Value = 3, },
				XAmount = Input { Value = 0.01, },
				Input = Input {
					SourceOp = ""ErodeDilate1"",
					Source = ""Output"",
				},
			},
			ViewInfo = OperatorInfo { Pos = { -220, 313.5 } },
		},
		SoftGlow1_1 = SoftGlow {
			Inputs = {
				Filter = Input { Value = FuID { ""Fast Gaussian"" }, },
				Threshold = Input { Value = 0.165, },
				XGlowSize = Input { Value = 7.9, },
				Input = Input {
					SourceOp = ""SoftGlow1"",
					Source = ""Output"",
				},
			},
			ViewInfo = OperatorInfo { Pos = { -220, 148.5 } },
		},
		Blur = Blur {
			NameSet = true,
			Inputs = {
				MultiplyByMask = Input { Value = 1, },
				Filter = Input { Value = FuID { ""Fast Gaussian"" }, },
				XBlurSize = Input { Value = 3, },
				Input = Input {
					SourceOp = ""Transform2"",
					Source = ""Output"",
				},
				EffectMask = Input {
					SourceOp = ""Rectangle1"",
					Source = ""Mask"",
				}
			},
			ViewInfo = OperatorInfo { Pos = { -165, 379.5 } },
		},
		DKeyer1 = ofx.com.blackmagicdesign.resolvefx.OFX3DKeyerV2 {
			Inputs = {
				Source = Input {
					SourceOp = ""Merge5"",
					Source = ""Output"",
				},
				clickMode3D = Input { Value = FuID { ""ClickModeAdd"" }, },
				isInvert = Input { Value = 0, },
				currentStroke = Input { Value = FuID { ""3"" }, },
				deleteStroke = Input { Value = 0, },
				resetPaths = Input { Value = 0, },
				controlsGroup = Input { Value = 1, },
				colorSpace3D = Input { Value = FuID { ""3DColorSpaceYUV"" }, },
				keySoftMode = Input { Value = FuID { ""KeyingModeFlat"" }, },
				despill = Input { Value = 0, },
				optionsGroup = Input { Value = 0, },
				isShowPaths3D = Input { Value = 0, },
				isSmartShowPaths = Input { Value = 1, },
				isBWDuringDrag = Input { Value = 1, },
				isShowKeyMap = Input { Value = 0, },
				keyMapZoom = Input { Value = 0.5, },
				strokeGroup = Input { Value = 0, },
				chromaTolOff = Input { Value = 0, },
				chromaSoft = Input { Value = 10, },
				chromaSoftAuto = Input { Value = 25, },
				chromaSoftTight = Input { Value = 0, },
				chromaSoftIsAdapt = Input { Value = 1, },
				chromaTilt = Input { Value = 0, },
				chromaShift = Input { Value = 0, },
				chromaRotate = Input { Value = 0, },
				lumaLow = Input { Value = 0, },
				lumaHigh = Input { Value = 0, },
				lumLowSoftReglr = Input { Value = 0.200000002980232, },
				lumLowSoftTight = Input { Value = 0, },
				lumHighSoftReglr = Input { Value = 0.200000002980232, },
				lumHighSoftTight = Input { Value = 0, },
				serialisedStrokes = Input { Value = ""22 serialization::archive 18 0 1 0 0 4 1 0 1 0 1 14308 13125 12486 0 0 0 104 1 0 1 13668 12723 13671 12723 13674 12723 13690 12683 13690 12683 13719 12624 13727 12604 13735 12594 13746 12584 13767 12554 13777 12544 13777 12544 13780 12544 13785 12544 13796 12544 13799 12544 13815 12574 13817 12574 13820 12584 13820 12584 13823 12594 13823 12594 13828 12614 13828 12624 13833 12643 13836 12663 13836 12673 13839 12683 13844 12723 13847 12733 13847 12733 13847 12743 13847 12743 13844 12743 13844 12743 13841 12753 13841 12753 13839 12772 13836 12792 13836 12802 13836 12802 13836 12812 13833 12852 13833 12862 13833 12862 13833 12872 13833 12872 13833 12882 13833 12882 13833 12882 13836 12901 13836 12911 13836 12921 13836 12941 13836 12951 13836 12961 13836 12971 13836 12981 13836 13020 13836 13020 13836 13030 13836 13030 13839 13050 13839 13050 13839 13050 13839 13050 13839 13050 13839 13040 13844 12951 13847 12891 13852 12812 13852 12812 13855 12792 13855 12782 13855 12762 13855 12693 13855 12673 13855 12653 13852 12653 13849 12604 13849 12574 13847 12564 13844 12544 13841 12524 13839 12514 13839 12504 13836 12485 13833 12475 13831 12475 13831 12465 13831 12455 13828 12455 13801 12435 13783 12435 13764 12445 13756 12445 13756 12455 13732 12455 13724 12455 13711 12465 13706 12465 13698 12465 13698 12465 13695 12465 0 0 104 1 14392 13385 12888 14392 13385 12888 14392 13385 12888 14392 13385 12888 14392 13385 12888 14392 13385 12888 14392 13385 12888 14392 13385 12888 14392 13385 12888 14392 13385 12888 14392 13385 12888 14392 13385 12888 14392 13385 12888 14378 13357 12833 14366 13356 12821 14366 13356 12821 14279 13303 12692 14279 13303 12692 14272 13299 12686 14272 13299 12686 14269 13301 12686 14269 13301 12686 14244 13282 12633 14244 13282 12633 14228 13287 12596 14228 13287 12596 14228 13287 12596 14236 13280 12616 14263 13297 12674 14263 13297 12674 14263 13297 12674 14263 13297 12674 14263 13297 12674 14263 13297 12674 14263 13297 12674 14236 13280 12616 14236 13280 12616 14240 13287 12622 14245 13316 12633 14245 13316 12633 14245 13316 12633 14245 13315 12651 14262 13330 12725 14262 13330 12725 14262 13330 12725 14262 13330 12725 14262 13330 12725 14262 13330 12725 14262 13330 12725 14262 13330 12725 14262 13330 12728 14262 13329 12744 14262 13329 12744 14262 13328 12769 14262 13327 12781 14262 13327 12781 14262 13327 12783 14262 13327 12783 14262 13325 12836 14262 13325 12836 14262 13325 12836 14262 13325 12836 14256 13304 12814 14256 13304 12814 14256 13304 12814 14256 13304 12814 14256 13304 12814 14256 13304 12814 14281 13318 12795 14283 13321 12774 14319 13272 12769 14319 13272 12769 14316 13267 12744 14316 13267 12741 14316 13267 12741 14316 13267 12741 14316 13267 12741 14316 13267 12741 14316 13267 12741 14290 13286 12711 14290 13285 12718 14266 13298 12719 14261 13299 12751 14236 13313 12751 14242 13328 12796 14242 13328 12796 14238 13334 12781 14238 13334 12781 14267 13330 12787 14267 13330 12787 14254 13316 12760 14254 13316 12760 14368 13355 12826 14381 13369 12854 14392 13383 12924 14392 13382 12949 14392 13382 12949 14392 13382 12949 14384 13386 12949 14379 13389 12949 14379 13389 12949 14379 13389 12949 14379 13389 12949 14379 13389 12949 14518 13476 12871 0 12 1 13384 11609 13384 11887 13397 12683 13397 12733 13397 12782 13397 12832 13400 12872 13400 12872 13400 12872 13405 12911 13408 12941 13408 12981 12 1 14469 13477 12968 14469 13477 12968 14531 13745 13409 14533 13829 13475 14486 13698 13352 14470 13522 13061 14503 13502 12994 14503 13502 12994 14503 13502 12994 14511 13498 12975 14511 13498 12975 14511 13498 12975 14264 13058 12508 0 44 1 13692 12663 13700 12772 13722 13269 13724 13320 13724 13320 13722 13325 13719 13325 13719 13325 13719 13325 13716 13330 13714 13335 13711 13340 13711 13345 13708 13345 13708 13350 13706 13355 13716 13375 13732 13424 13732 13434 13735 13434 13751 13479 13751 13479 13751 13484 13759 13499 13761 13514 13761 13514 13764 13514 13777 13469 13799 13355 13801 13288 13799 13199 13793 13110 13793 13100 13783 12921 13783 12901 13780 12901 13780 12901 13780 12901 13777 12901 13777 12891 13775 12891 13772 12891 13772 12891 13769 12891 44 1 13910 12958 12587 13910 12958 12587 13921 12984 12558 14018 13066 12690 14018 13066 12690 13930 12999 12616 13930 12999 12616 13930 12999 12616 13930 12999 12616 13893 12924 12553 13894 12924 12553 13900 12937 12566 13901 12940 12569 13901 12940 12569 13901 12940 12569 13910 12958 12587 13918 12953 12587 13972 12971 12559 13958 12979 12559 13958 12979 12559 14045 13003 12564 14045 13003 12564 14045 13003 12564 14262 13070 12660 14414 13342 12955 14414 13342 12955 14414 13342 12955 14435 13383 13003 14497 13545 13242 14480 13531 13150 14504 13518 13131 14510 13518 13072 14508 13519 13070 14520 13515 13008 14520 13515 13008 14520 13515 13008 14520 13515 13008 14520 13515 13008 14517 13516 13020 14517 13516 13020 14508 13512 13038 14508 13512 13038 14508 13512 13038 14496 13504 13036 13857 12823 12404 0 92 1 13590 12315 13590 12315 13587 12315 13585 12315 13583 12315 13580 12315 13578 12333 13578 12333 13575 12351 13575 12368 13573 12368 13571 12386 13571 12395 13568 12404 13568 12404 13568 12413 13563 12431 13561 12440 13559 12458 13556 12458 13556 12467 13554 12476 13551 12476 13551 12485 13551 12485 13551 12485 13547 12512 13547 12538 13544 12538 13544 12538 13542 12556 13542 12574 13539 12592 13539 12601 13539 12628 13539 12690 13539 12690 13539 12771 13539 12807 13539 12842 13539 12842 13539 12851 13537 12869 13537 12869 13537 12878 13537 12887 13537 12905 13535 12923 13535 12923 13535 12923 13535 12950 13535 12986 13535 12986 13535 13021 13535 13048 13535 13084 13535 13084 13535 13093 13535 13138 13535 13164 13535 13182 13535 13191 13535 13200 13537 13209 13539 13227 13539 13236 13539 13236 13539 13236 13539 13245 13539 13254 13539 13254 13539 13254 13539 13272 13539 13272 13539 13272 13539 13272 13532 13182 13532 13164 13532 13155 13532 13155 13530 13138 13530 13138 13530 13102 13530 13093 13530 13093 13532 13075 13532 13066 13532 13057 13532 13039 13530 13003 13530 12941 13530 12941 92 1 13915 13032 12514 13915 13032 12514 13851 13002 12479 13851 13002 12479 13822 12974 12477 13822 12974 12477 13813 12953 12490 13813 12953 12490 13813 12953 12490 13813 12953 12490 13809 12909 12487 13809 12909 12487 13809 12909 12487 13807 12887 12485 13807 12887 12485 13807 12887 12485 13799 12870 12468 13799 12870 12468 13791 12854 12452 13791 12854 12452 13791 12854 12452 13791 12854 12452 13791 12854 12452 13791 12854 12452 13791 12854 12452 13791 12854 12452 13797 12850 12452 13813 12880 12483 13826 12873 12483 13826 12873 12483 13827 12876 12485 13827 12876 12485 13833 12870 12501 13833 12870 12501 13833 12870 12501 13833 12870 12501 13833 12870 12501 13833 12870 12501 13833 12870 12501 13850 12904 12535 13850 12904 12535 13850 12904 12535 13850 12904 12535 13850 12904 12535 13850 12904 12535 13850 12904 12535 13850 12904 12535 13842 12884 12548 13842 12884 12548 13842 12884 12548 13850 12899 12564 13842 12884 12548 13842 12884 12548 13842 12884 12548 13842 12884 12548 13839 12922 12612 13839 12922 12612 13823 12953 12657 13851 13185 12900 14047 13491 13338 14086 13531 13378 14086 13531 13378 14091 13514 13352 14104 13514 13321 14148 13512 13284 14193 13482 13214 14193 13482 13214 14193 13482 13214 14193 13482 13214 14266 13449 13178 14266 13449 13178 14266 13449 13178 14321 13423 13125 14321 13423 13125 14321 13423 13125 14321 13423 13125 14086 13531 13378 14047 13491 13338 13956 13383 13157 13956 13383 13157 13845 13208 12950 13845 13208 12950 13809 12956 12685 13809 12956 12685 13809 12956 12685 13839 12922 12612 13836 12886 12559 13836 12886 12559 13842 12884 12548 13827 12870 12547 13827 12870 12547 13827 12870 12547\n"", },
				serializedAnalysisData = Input { Value = ""22 serialization::archive 18 612 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 4 0 0 0 0 0 0 0 -120 0 0 0 0 0 0 0 7 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 78 0 0 0 0 0 0 0 87 0 0 0 0 0 0 0 8 0 0 35 67 0 0 -38 66 -113 -62 117 60 0 0 34 67 0 0 -36 66 -113 -62 117 60 0 0 31 67 0 0 -34 66 -113 -62 117 60 0 0 30 67 0 0 -34 66 -113 -62 117 60 0 0 29 67 0 0 -36 66 -113 -62 117 60 0 0 29 67 0 0 -38 66 -113 -62 117 60 0 0 30 67 0 0 -42 66 -113 -62 117 60 0 0 35 67 0 0 -42 66 -113 -62 117 60 0 0 0 0 0 0 0 124 0 0 0 0 0 0 0 7 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 92 0 0 0 0 0 0 0 111 0 0 0 0 0 0 0 7 0 0 39 67 0 0 -46 66 -113 -62 117 60 0 0 36 67 0 0 -42 66 -113 -62 117 60 0 0 33 67 0 0 -40 66 -113 -62 117 60 0 0 29 67 0 0 -40 66 -113 -62 117 60 0 0 29 67 0 0 -42 66 -113 -62 117 60 0 0 38 67 0 0 -48 66 -113 -62 117 60 0 0 39 67 0 0 -48 66 -113 -62 117 60 0 0 0 0 0 0 0 -96 0 0 0 0 0 0 0 7 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65 0 0 0 0 0 0 0 98 0 0 0 0 0 0 0 10 0 0 39 67 0 0 -44 66 -113 -62 117 60 0 0 38 67 0 0 -38 66 -113 -62 117 60 0 0 37 67 0 0 -36 66 -113 -62 117 60 0 0 35 67 0 0 -34 66 -113 -62 117 60 0 0 26 67 0 0 -26 66 -113 -62 117 60 0 0 25 67 0 0 -26 66 -113 -62 117 60 0 0 25 67 0 0 -30 66 -113 -62 117 60 0 0 26 67 0 0 -32 66 -113 -62 117 60 0 0 38 67 0 0 -48 66 -113 -62 117 60 0 0 39 67 0 0 -48 66 -113 -62 117 60 0 0 0 0 0 0 0 -120 0 0 0 0 0 0 0 7 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 61 0 0 0 0 0 0 0 87 0 0 0 0 0 0 0 8 0 0 30 67 0 0 -30 66 -113 -62 117 60 0 0 23 67 0 0 -22 66 -113 -62 117 60 0 0 20 67 0 0 -20 66 -113 -62 117 60 0 0 18 67 0 0 -20 66 -113 -62 117 60 0 0 18 67 0 0 -24 66 -113 -62 117 60 0 0 20 67 0 0 -28 66 -113 -62 117 60 0 0 23 67 0 0 -32 66 -113 -62 117 60 0 0 30 67 0 0 -32 66 -113 -62 117 60\n"", },
				despillColorIdx = Input { Value = 0, },
				finesseGroup = Input { Value = 1, },
				finesseParamGroup = Input { Value = FuID { ""1"" }, },
				finesseGuidedPre = Input { Value = 0, },
				finesseGuidedPreSoft = Input { Value = 0.200000002980232, },
				finesseCleanBlack = Input { Value = 0, },
				finesseCleanWhite = Input { Value = 0, },
				finesseBlackClip = Input { Value = 81.1, },
				finesseWhiteClip = Input { Value = 100, },
				finesseBlurRadius = Input { Value = 0, },
				finesseIoRatio = Input { Value = 0, },
				Operation = Input { Value = FuID { ""OPERATION_CLOSING"" }, },
				finesseMorphShape = Input { Value = FuID { ""MorphShapeCircle"" }, },
				finesseMorphRadius = Input { Value = 0, },
				finesseMorphIters = Input { Value = 1, },
				finesseMorphRadiusFlt = Input { Value = 0, },
				finesseDenoise = Input { Value = 0, },
				finesseShadow = Input { Value = 1, },
				finesseMidtone = Input { Value = 1, },
				finesseHighlight = Input { Value = 1, },
				finesseGuidedPost = Input { Value = 0, },
				gMatteGroup = Input { Value = 0, },
				gMatteShape = Input { Value = FuID { ""GMatteShapeNone"" }, },
				gMatteSoft = Input { Value = 0.349999994039536, },
				gMatteIsInvert = Input { Value = 0, },
				gMatteCenterXY = Input { Value = { 0.5, 0.5 }, },
				gMatteWidth = Input { Value = 0.75, },
				gMatteHeight = Input { Value = 0.75, },
				gMatteRotation = Input { Value = 0, },
				outputGroup = Input { Value = 1, },
				outputMode = Input { Value = FuID { ""KeyerOutputModeComposite"" }, },
				legacyIsIgnoreInputAlpha = Input { Value = 0, },
				isLegacyFusionAlpha = Input { Value = 0, },
				blendGroup = Input { Value = 0, },
				blendIn = Input { Value = 1, },
				blend = Input { Value = 0, },
				ignoreContentShape = Input { Value = 0, },
				legacyIsProcessRGBOnly = Input { Value = 0, },
				IsNoTemporalFramesReqd = Input { Value = 0, },
				refreshTrigger = Input { Value = 1, },
				resolvefxVersion = Input { Value = ""1.2"", },
			},
			ViewInfo = OperatorInfo { Pos = { -110, 280.5 } },
		},
		ReplaceMaterial3D1 = ReplaceMaterial3D {
			Inputs = {
				SceneInput = Input {
					SourceOp = ""UVMap3D1"",
					Source = ""Output"",
				},
				[""ReplaceMode.Nest""] = Input { Value = 1, },
				MaterialInput = Input {
					SourceOp = ""Reflect1"",
					Source = ""MaterialOutput"",
				},
				[""MtlStdInputs.MaterialID""] = Input { Value = 7, },
			},
			ViewInfo = OperatorInfo { Pos = { -550, -16.5 } },
		},
		ErodeDilate1 = ErodeDilate {
			Inputs = {
				Red = Input { Value = 0, },
				Green = Input { Value = 0, },
				Blue = Input { Value = 0, },
				Filter = Input { Value = 3, },
				XAmount = Input { Value = -0.01, },
				Input = Input {
					SourceOp = ""DKeyer1"",
					Source = ""Output"",
				},
			},
			ViewInfo = OperatorInfo { Pos = { -110, 313.5 } },
		},
		SpotLight1_1 = LightSpot {
			Inputs = {
				[""Transform3DOp.Translate.Y""] = Input { Value = -2.318, },
				[""Transform3DOp.Translate.Z""] = Input { Value = 14.8404731, },
				[""Transform3DOp.UseTarget""] = Input { Value = 1, },
				ConeAngle = Input { Value = 63.78, },
				[""ShadowLightInputs3D.ShadowsEnabled""] = Input { Value = 1, },
				[""ShadowLightInputs3D.ShadowMapSize""] = Input { Value = 2048, },
			},
			ViewInfo = OperatorInfo { Pos = { -660, 115.5 } },
		},
		SpotLight1 = LightSpot {
			Inputs = {
				[""Transform3DOp.Translate.Y""] = Input { Value = 6.314, },
				[""Transform3DOp.Translate.Z""] = Input { Value = 2.6704731174902, },
				[""Transform3DOp.UseTarget""] = Input { Value = 1, },
				ConeAngle = Input { Value = 63.78, },
				[""ShadowLightInputs3D.ShadowsEnabled""] = Input { Value = 1, },
				[""ShadowLightInputs3D.ShadowMapSize""] = Input { Value = 2048, },
			},
			ViewInfo = OperatorInfo { Pos = { -550, 115.5 } },
		},
		AmbientLight1 = LightAmbient {
			Inputs = {
				Intensity = Input { Value = 0.2, },
			},
			ViewInfo = OperatorInfo { Pos = { -605, 148.5 } },
		},
		Camera3D1 = Camera3D {
			Inputs = {
				[""Transform3DOp.Translate.X""] = Input { Value = -13.9779958100622, },
				[""Transform3DOp.Translate.Y""] = Input { Value = -0.466509704101146, },
				[""Transform3DOp.Translate.Z""] = Input { Value = 9.73201875029143, },
				[""Transform3DOp.UseTarget""] = Input { Value = 1, },
				AoV = Input { Value = 19.2642683071402, },
				[""Stereo.Mode""] = Input { Value = FuID { ""OffAxis"" }, },
				FilmGate = Input { Value = FuID { ""BMD_URSA_4K_16x9"" }, },
				ApertureW = Input { Value = 0.831496062992126, },
				ApertureH = Input { Value = 0.467716535433071, },
				[""SurfacePlaneInputs.ObjectID.ObjectID""] = Input { Value = 4, },
				[""MtlStdInputs.MaterialID""] = Input { Value = 6, },
			},
			ViewInfo = OperatorInfo { Pos = { -770, 49.5 } },
		},
		Transform3D1 = Transform3D {
			CurrentSettings = 2,
			CustomData = {
				Settings = {
					[1] = {
						Tools = ordered() {
							Transform3D1 = Transform3D {
								PassThrough = true,
								CtrlWZoom = false,
								CustomData = {
								},
								Inputs = {
									SceneInput = Input {
										SourceOp = ""ReplaceMaterial3D1"",
										Source = ""Output"",
									},
									[""Transform3DOp.Rotate.Y""] = Input {
										Value = 704,
										Expression = ""time*4"",
									},
								},
								ViewInfo = OperatorInfo { Pos = { -385, -115.5 } },
							}
						}
					},
				}
			},
			Inputs = {
				SceneInput = Input {
					SourceOp = ""ReplaceMaterial3D1"",
					Source = ""Output"",
				},
				[""Transform3DOp.Translate.Y""] = Input { Value = 1.275, },
				[""Transform3DOp.Rotate.Y""] = Input { Value = -54.8, },
			},
			ViewInfo = OperatorInfo { Pos = { -660, -16.5 } },
		},
		Rectangle1 = RectangleMask {
			Inputs = {
				Filter = Input { Value = FuID { ""Fast Gaussian"" }, },
				MaskWidth = Input { Value = 1080, },
				MaskHeight = Input { Value = 1080, },
				PixelAspect = Input { Value = { 1, 1 }, },
				UseFrameFormatSettings = Input { Value = 1, },
				ClippingMode = Input { Value = FuID { ""None"" }, },
				Center = Input {
					SourceOp = ""Path2"",
					Source = ""Position"",
				},
				Width = Input { Value = 0.124548736462094, },
				Height = Input { Value = 0.330769230769231, },
			},
			ViewInfo = OperatorInfo { Pos = { -165, 412.5 } },
		},
		Path2 = PolyPath {
			DrawMode = ""InsertAndModify"",
			CtrlWZoom = false,
			Inputs = {
				Displacement = Input {
					SourceOp = ""Path2Displacement"",
					Source = ""Value"",
				},
				PolyLine = Input {
					Value = Polyline {
						Points = {
							{ Linear = true, LockY = true, X = -0.31253223310985, Y = -0.557692307692308, RX = 0.0332031729659373, RY = 0.0126373626373626 },
							{ Linear = true, LockY = true, X = -0.212922714212039, Y = -0.51978021978022, LX = -0.0332031729659373, LY = -0.0126373626373626, RX = 0.0128686853802893, RY = 0.009478021978022 },
							{ Linear = true, LockY = true, X = -0.174316658071171, Y = -0.491346153846154, LX = -0.0128686853802893, LY = -0.009478021978022, RX = 0.00844814460080062, RY = 0.0127289377289377 },
							{ Linear = true, LockY = true, X = -0.148972224268769, Y = -0.453159340659341, LX = -0.00844814460080062, LY = -0.0127289377289377, RX = -0.000884108155897752, RY = 0.00169413919413919 },
							{ Linear = true, LockY = true, X = -0.151624548736462, Y = -0.448076923076923, LX = 0.000884108155897752, LY = -0.00169413919413919, RX = -0.00825167612171222, RY = -1.85037170770859e-17 },
							{ Linear = true, LockY = true, X = -0.176379577101599, Y = -0.448076923076923, LX = 0.00825167612171222, LY = 1.85037170770859e-17, RX = 0.0099707753137356, RY = -0.00128205128205128 },
							{ Linear = true, LockY = true, X = -0.146467251160392, Y = -0.451923076923077, LX = -0.0099707753137356, LY = 0.00128205128205128, RX = 0.036101083032491, RY = 0.00128205128205128 },
							{ Linear = true, LockY = true, X = -0.038164002062919, Y = -0.448076923076923, LX = -0.036101083032491, LY = -0.00128205128205128, RX = 0.0318463125322331, RY = 0.00200320512820514 },
							{ Linear = true, LockY = true, X = 0.0573749355337803, Y = -0.442067307692308, LX = -0.0318463125322331, LY = -0.00200320512820514, RX = 0.03382327660306, RY = 0.00504807692307692 },
							{ Linear = true, LockY = true, X = 0.15884476534296, Y = -0.426923076923077, LX = -0.03382327660306, LY = -0.00504807692307692, RX = -0.0113460546673543, RY = -0.00256410256410257 },
							{ Linear = true, LockY = true, X = 0.124806601340897, Y = -0.434615384615385, LX = 0.0113460546673543, LY = 0.00256410256410257, RX = -0.0677325081657212, RY = -0.00512820512820513 },
							{ Linear = true, LockY = true, X = -0.0783909231562661, Y = -0.45, LX = 0.0677325081657212, LY = 0.00512820512820513, RX = -0.0209730101426852, RY = 0.00192307692307692 },
							{ Linear = true, LockY = true, X = -0.141309953584322, Y = -0.444230769230769, LX = 0.0209730101426852, LY = -0.00192307692307692, RX = -0.00137527935361872, RY = 0.0012820512820513 },
							{ Linear = true, LockY = true, X = -0.145435791645178, Y = -0.440384615384615, LX = 0.00137527935361872, LY = -0.0012820512820513, RX = 0.000312563489458795, RY = -0.000116550116550133 },
							{ Linear = true, LockY = true, X = -0.144498101176802, Y = -0.440734265734266, LX = -0.000312563489458795, LY = 0.000116550116550133, RX = -0.00494892191643096, RY = -0.000220150220150206 },
							{ Linear = true, LockY = true, X = -0.159344866926094, Y = -0.441394716394717, LX = 0.00494892191643096, LY = 0.000220150220150206, RX = -0.000864758987502638, RY = 0.000977725977725978 },
							{ Linear = true, LockY = true, X = -0.161939143888602, Y = -0.438461538461539, LX = 0.000864758987502638, LY = -0.000977725977725978, RX = 0.00103145951521403, RY = 0.000641025641025639 },
							{ Linear = true, LockY = true, X = -0.15884476534296, Y = -0.436538461538462, LX = -0.00103145951521403, LY = -0.000641025641025639 }
						}
					},
				},
			},
		},
		Path2Displacement = BezierSpline {
			SplineColor = { Red = 255, Green = 0, Blue = 255 },
			CtrlWZoom = false,
			NameSet = true,
			KeyFrames = {
				[26] = { 0, RH = { 27.3333333333333, 0.0395348685165162 }, Flags = { Linear = true, LockedY = true } },
				[30] = { 0.118604605549549, LH = { 28.6666666666667, 0.0790697370330324 }, RH = { 31, 0.136390069978639 }, Flags = { Linear = true, LockedY = true } },
				[33] = { 0.171960998836821, LH = { 32, 0.15417553440773 }, RH = { 34.3333333333333, 0.18896189543688 }, Flags = { Linear = true, LockedY = true } },
				[37] = { 0.222963688636998, LH = { 35.6666666666667, 0.205962792036939 }, RH = { 38, 0.225090235683982 }, Flags = { Linear = true, LockedY = true } },
				[40] = { 0.229343329777949, LH = { 39, 0.227216782730965 }, RH = { 44, 0.238525944484103 }, Flags = { Linear = true, LockedY = true } },
				[52] = { 0.256891173896411, LH = { 48, 0.247708559190257 }, RH = { 53, 0.268078179858482 }, Flags = { Linear = true, LockedY = true } },
				[55] = { 0.290452191782626, LH = { 54, 0.279265185820554 }, RH = { 56, 0.330651456030992 }, Flags = { Linear = true, LockedY = true } },
				[58] = { 0.411049984527726, LH = { 57, 0.370850720279359 }, RH = { 59, 0.446559179899867 }, Flags = { Linear = true, LockedY = true } },
				[61] = { 0.517577570644148, LH = { 60, 0.482068375272007 }, RH = { 62.6666666666667, 0.555633625726385 }, Flags = { Linear = true, LockedY = true } },
				[66] = { 0.631745735890858, LH = { 64.3333333333333, 0.593689680808622 }, RH = { 75.6666666666667, 0.644690234984227 }, Flags = { Linear = true, LockedY = true } },
				[95] = { 0.670579233170963, LH = { 85.3333333333333, 0.657634734077595 }, RH = { 97.3333333333333, 0.746168923670469 }, Flags = { Linear = true, LockedY = true } },
				[102] = { 0.897348304669481, LH = { 99.6666666666667, 0.821758614169975 }, RH = { 103.333333333333, 0.920785358061103 }, Flags = { Linear = true, LockedY = true } },
				[106] = { 0.967659464844347, LH = { 104.666666666667, 0.944222411452725 }, RH = { 108.333333333333, 0.969751754918022 }, Flags = { Linear = true, LockedY = true } },
				[113] = { 0.973936335065374, LH = { 110.666666666667, 0.971844044991698 }, RH = { 140, 0.974307556019662 }, Flags = { Linear = true, LockedY = true } },
				[194] = { 0.975049997928236, LH = { 167, 0.974678776973949 }, RH = { 197.333333333333, 0.98056269427988 }, Flags = { Linear = true, LockedY = true } },
				[204] = { 0.991588086983166, LH = { 200.666666666667, 0.986075390631523 }, RH = { 206.666666666667, 0.993040626352978 }, Flags = { Linear = true, LockedY = true } },
				[212] = { 0.995945705092601, LH = { 209.333333333333, 0.994493165722789 }, RH = { 213, 0.997297136728401 }, Flags = { Linear = true, LockedY = true } },
				[215] = { 1, LH = { 214, 0.9986485683642 }, Flags = { Linear = true, LockedY = true } }
			}
		},
		MediaIn24 = MediaIn {
			ExtentSet = true,
			CustomData = {
				MEDIA_ID = ""288f56c3-77f0-493a-bb8b-5ab298786534"",
				MediaProps = {
					MEDIA_NUM_LAYERS = 1,
					MEDIA_FORMAT_TYPE = ""QuickTime"",
					MEDIA_PATH = ""/Users/marcus/Downloads/back to the future upvote drink.mp4"",
					MEDIA_NAME = ""back to the future upvote drink.mp4"",
					MEDIA_HEIGHT = 458,
					MEDIA_START_FRAME = 0,
					MEDIA_IS_SOURCE_RES = true,
					MEDIA_SRC_FRAME_RATE = 30,
					MEDIA_MARK_OUT = 246,
					MEDIA_WIDTH = 854,
					MEDIA_NUM_FRAMES = 247,
					MEDIA_MARK_IN = 0,
					MEDIA_PAR = 1.00035
				},
			},
			Inputs = {
				GlobalOut = Input { Value = 246, },
				MediaSource = Input { Value = FuID { ""MediaPool"" }, },
				MediaID = Input { Value = ""288f56c3-77f0-493a-bb8b-5ab298786534"", },
				AudioTrack = Input { Value = FuID { ""Timeline Audio"" }, },
				Layer = Input {
					Value = Text {
					},
				},
				ClipTimeEnd = Input { Value = 246, },
				[""Gamut.SLogVersion""] = Input { Value = FuID { ""SLog2"" }, },
			},
			ViewInfo = OperatorInfo {
				Pos = { 0, -379.5 },
				Flags = {
					ShowPic = true
				}
			},
		},
		BrightnessContrast1 = BrightnessContrast {
			Inputs = {
				ApplyMaskInverted = Input { Value = 1, },
				ClipBlack = Input { Value = 1, },
				ClipWhite = Input { Value = 1, },
				Input = Input {
					SourceOp = ""MediaIn24"",
					Source = ""Output"",
				},
			},
			ViewInfo = OperatorInfo { Pos = { 0, -280.5 } },
		},
		Merge1 = Merge {
			Inputs = {
				Blend = Input { Value = 0.15, },
				Background = Input {
					SourceOp = ""Merge5"",
					Source = ""Output"",
				},
				Foreground = Input {
					SourceOp = ""Blur"",
					Source = ""Output"",
				},
				PerformDepthMerge = Input { Value = 0, },
				EffectMask = Input {
					SourceOp = ""Polygon2"",
					Source = ""Mask"",
				}
			},
			ViewInfo = OperatorInfo { Pos = { 0, 379.5 } },
		},
		Tracker2 = Tracker {
			Trackers = {
				{
					PatternTime = 230,
					PatternX = 0.357140333752901,
					PatternY = 0.709383331687568
				}
			},
			Inputs = {
				Quality = Input { Value = 5, },
				ShutterAngle = Input { Value = 150, },
				Input = Input {
					SourceOp = ""BrightnessContrast1"",
					Source = ""Output"",
				},
				Operation = Input { Value = 1, },
				Merge = Input { Value = 0, },
				PathCenter = Input { Value = 1, },
				Tracker1Channel = Input { Value = 2, },
				PatternCenter1 = Input { Value = { 0.148456873922792, 0.364537065255943 }, },
				PatternWidth1 = Input { Value = 0.0450791465932553, },
				PatternHeight1 = Input { Value = 0.101476251604621, },
				SearchWidth1 = Input { Value = 0.0822436338609772, },
				SearchHeight1 = Input { Value = 0.183632862644416, },
				TrackedCenter1 = Input {
					SourceOp = ""Tracker2Tracker1XYPath"",
					Source = ""Value"",
				},
			},
			ViewInfo = OperatorInfo { Pos = { 0, -115.5 } },
		},
		Tracker2Tracker1XYPath = XYPath {
			ShowKeyPoints = false,
			DrawMode = ""InsertAndModify"",
			CtrlWZoom = false,
			NameSet = true,
			Inputs = {
				X = Input {
					SourceOp = ""XYPath1X1"",
					Source = ""Value"",
				},
				Y = Input {
					SourceOp = ""XYPath1Y1"",
					Source = ""Value"",
				},
			},
		},
		XYPath1X1 = BezierSpline {
			SplineColor = { Red = 255, Green = 0, Blue = 0 },
			CtrlWZoom = false,
			NameSet = true,
			KeyFrames = {
				[0] = { 0.171728182958701, RH = { 0.333333333333333, 0.171999577377124 }, Flags = { Linear = true } },
				[1] = { 0.172542366213971, LH = { 0.666666666666667, 0.172270971795548 }, RH = { 1.33333333333333, 0.172795464379466 }, Flags = { Linear = true } },
				[2] = { 0.173301660710458, LH = { 1.66666666666667, 0.173048562544962 }, RH = { 2.33333333333333, 0.173609647634736 }, Flags = { Linear = true } },
				[3] = { 0.174225621483291, LH = { 2.66666666666667, 0.173917634559014 }, RH = { 3.33333333333333, 0.174228670858779 }, Flags = { Linear = true } },
				[4] = { 0.174234769609755, LH = { 3.66666666666667, 0.174231720234267 }, RH = { 4.33333333333333, 0.17444517651842 }, Flags = { Linear = true } },
				[5] = { 0.17486599033575, LH = { 4.66666666666667, 0.174655583427085 }, RH = { 5.33333333333333, 0.174933076596484 }, Flags = { Linear = true } },
				[6] = { 0.175067249117952, LH = { 5.66666666666667, 0.175000162857218 }, RH = { 6.33333333333333, 0.175097742872831 }, Flags = { Linear = true } },
				[7] = { 0.175158730382589, LH = { 6.66666666666667, 0.17512823662771 }, RH = { 7.33333333333333, 0.175238014145274 }, Flags = { Linear = true } },
				[8] = { 0.175396581670645, LH = { 7.66666666666667, 0.17531729790796 }, RH = { 8.33333333333333, 0.175396581670645 }, Flags = { Linear = true } },
				[9] = { 0.175396581670645, LH = { 8.66666666666667, 0.175396581670645 }, RH = { 9.33333333333333, 0.175396581670645 }, Flags = { Linear = true } },
				[10] = { 0.175396581670645, LH = { 9.66666666666667, 0.175396581670645 }, RH = { 10.3333333333333, 0.175494161686258 }, Flags = { Linear = true } },
				[11] = { 0.175689321717483, LH = { 10.6666666666667, 0.175591741701871 }, RH = { 11.3333333333333, 0.175692371092971 }, Flags = { Linear = true } },
				[12] = { 0.175698469843947, LH = { 11.6666666666667, 0.175695420468459 }, RH = { 12.3333333333333, 0.175689321717483 }, Flags = { Linear = true } },
				[13] = { 0.175671025464556, LH = { 12.6666666666667, 0.17568017359102 }, RH = { 13.3333333333333, 0.17566492671358 }, Flags = { Linear = true } },
				[14] = { 0.175652729211629, LH = { 13.6666666666667, 0.175658827962604 }, RH = { 14.3333333333333, 0.175594791077359 }, Flags = { Linear = true } },
				[15] = { 0.175478914808818, LH = { 14.6666666666667, 0.175536852943088 }, RH = { 15.3333333333333, 0.175460618555891 }, Flags = { Linear = true } },
				[16] = { 0.175424026050036, LH = { 15.6666666666667, 0.175442322302964 }, RH = { 16.3333333333333, 0.175411828548085 }, Flags = { Linear = true } },
				[17] = { 0.175387433544181, LH = { 16.6666666666667, 0.175399631046133 }, RH = { 17.3333333333333, 0.17537523604223 }, Flags = { Linear = true } },
				[18] = { 0.175350841038327, LH = { 17.6666666666667, 0.175363038540278 }, RH = { 18.3333333333333, 0.175350841038327 }, Flags = { Linear = true } },
				[19] = { 0.175350841038327, LH = { 18.6666666666667, 0.175350841038327 }, RH = { 19.3333333333333, 0.17525935977369 }, Flags = { Linear = true } },
				[20] = { 0.175076397244416, LH = { 19.6666666666667, 0.175167878509053 }, RH = { 20.3333333333333, 0.175076397244416 }, Flags = { Linear = true } },
				[21] = { 0.175076397244416, LH = { 20.6666666666667, 0.175076397244416 }, RH = { 21.3333333333333, 0.175082495995391 }, Flags = { Linear = true } },
				[22] = { 0.175094693497343, LH = { 21.6666666666667, 0.175088594746367 }, RH = { 22.3333333333333, 0.175088594746367 }, Flags = { Linear = true } },
				[23] = { 0.175076397244416, LH = { 22.6666666666667, 0.175082495995391 }, RH = { 23.3333333333333, 0.175076397244416 }, Flags = { Linear = true } },
				[24] = { 0.175076397244416, LH = { 23.6666666666667, 0.175076397244416 }, RH = { 24.3333333333333, 0.175173977260028 }, Flags = { Linear = true } },
				[25] = { 0.175369137291254, LH = { 24.6666666666667, 0.175271557275641 }, RH = { 25.3333333333333, 0.175363038540278 }, Flags = { Linear = true } },
				[26] = { 0.175350841038327, LH = { 25.6666666666667, 0.175356939789302 }, RH = { 26.3333333333333, 0.175356939789302 }, Flags = { Linear = true } },
				[27] = { 0.175369137291254, LH = { 26.6666666666667, 0.175363038540278 }, RH = { 27.3333333333333, 0.175430124801012 }, Flags = { Linear = true } },
				[28] = { 0.175552099820528, LH = { 27.6666666666667, 0.17549111231077 }, RH = { 28.3333333333333, 0.175552099820528 }, Flags = { Linear = true } },
				[29] = { 0.175552099820528, LH = { 28.6666666666667, 0.175552099820528 }, RH = { 29.3333333333333, 0.175582593575407 }, Flags = { Linear = true } },
				[30] = { 0.175643581085165, LH = { 29.6666666666667, 0.175613087330286 }, RH = { 30.3333333333333, 0.175671025464556 }, Flags = { Linear = true } },
				[31] = { 0.175725914223338, LH = { 30.6666666666667, 0.175698469843947 }, RH = { 31.3333333333333, 0.175756407978217 }, Flags = { Linear = true } },
				[32] = { 0.175817395487975, LH = { 31.6666666666667, 0.175786901733096 }, RH = { 32.3333333333333, 0.175814346112487 }, Flags = { Linear = true } },
				[33] = { 0.175808247361512, LH = { 32.6666666666667, 0.175811296736999 }, RH = { 33.3333333333333, 0.175808247361512 }, Flags = { Linear = true } },
				[34] = { 0.175808247361512, LH = { 33.6666666666667, 0.175808247361512 }, RH = { 34.3333333333333, 0.175826543614439 }, Flags = { Linear = true } },
				[35] = { 0.175863136120294, LH = { 34.6666666666667, 0.175844839867366 }, RH = { 35.3333333333333, 0.175899728626149 }, Flags = { Linear = true } },
				[36] = { 0.175972913637858, LH = { 35.6666666666667, 0.175936321132003 }, RH = { 36.3333333333333, 0.176049148025056 }, Flags = { Linear = true } },
				[37] = { 0.176201616799451, LH = { 36.6666666666667, 0.176125382412253 }, RH = { 37.3333333333333, 0.176235159929818 }, Flags = { Linear = true } },
				[38] = { 0.176302246190551, LH = { 37.6666666666667, 0.176268703060184 }, RH = { 38.3333333333333, 0.176302246190551 }, Flags = { Linear = true } },
				[39] = { 0.176302246190551, LH = { 38.6666666666667, 0.176302246190551 }, RH = { 39.3333333333333, 0.176375431202261 }, Flags = { Linear = true } },
				[40] = { 0.17652180122568, LH = { 39.6666666666667, 0.176448616213971 }, RH = { 40.3333333333333, 0.176448616213971 }, Flags = { Linear = true } },
				[41] = { 0.176302246190551, LH = { 40.6666666666667, 0.176375431202261 }, RH = { 41.3333333333333, 0.176299196815064 }, Flags = { Linear = true } },
				[42] = { 0.176293098064088, LH = { 41.6666666666667, 0.176296147439576 }, RH = { 42.3333333333333, 0.1762900486886 }, Flags = { Linear = true } },
				[43] = { 0.176283949937624, LH = { 42.6666666666667, 0.176286999313112 }, RH = { 43.3333333333333, 0.176204666174939 }, Flags = { Linear = true } },
				[44] = { 0.176046098649568, LH = { 43.6666666666667, 0.176125382412253 }, RH = { 44.3333333333333, 0.176046098649568 }, Flags = { Linear = true } },
				[45] = { 0.176046098649568, LH = { 44.6666666666667, 0.176046098649568 }, RH = { 45.3333333333333, 0.176046098649568 }, Flags = { Linear = true } },
				[46] = { 0.176046098649568, LH = { 45.6666666666667, 0.176046098649568 }, RH = { 46.3333333333333, 0.176039999898592 }, Flags = { Linear = true } },
				[47] = { 0.17602780239664, LH = { 46.6666666666667, 0.176033901147616 }, RH = { 47.3333333333333, 0.175957666760419 }, Flags = { Linear = true } },
				[48] = { 0.175817395487975, LH = { 47.6666666666667, 0.175887531124197 }, RH = { 48.3333333333333, 0.175817395487975 }, Flags = { Linear = true } },
				[49] = { 0.175817395487975, LH = { 48.6666666666667, 0.175817395487975 }, RH = { 49.3333333333333, 0.175808247361512 }, Flags = { Linear = true } },
				[50] = { 0.175789951108584, LH = { 49.6666666666667, 0.175799099235048 }, RH = { 50.3333333333333, 0.175713716721387 }, Flags = { Linear = true } },
				[51] = { 0.175561247946992, LH = { 50.6666666666667, 0.175637482334189 }, RH = { 51.3333333333333, 0.175424026050036 }, Flags = { Linear = true } },
				[52] = { 0.175149582256125, LH = { 51.6666666666667, 0.175286804153081 }, RH = { 52.3333333333333, 0.175027607236609 }, Flags = { Linear = true } },
				[53] = { 0.174783657197577, LH = { 52.6666666666667, 0.174905632217093 }, RH = { 53.3333333333333, 0.174783657197577 }, Flags = { Linear = true } },
				[54] = { 0.174783657197577, LH = { 53.6666666666667, 0.174783657197577 }, RH = { 54.3333333333333, 0.174512262779154 }, Flags = { Linear = true } },
				[55] = { 0.173969473942308, LH = { 54.6666666666667, 0.174240868360731 }, RH = { 55.3333333333333, 0.173853597673768 }, Flags = { Linear = true } },
				[56] = { 0.173621845136687, LH = { 55.6666666666667, 0.173737721405227 }, RH = { 56.3333333333333, 0.173499870117171 }, Flags = { Linear = true } },
				[57] = { 0.173255920078139, LH = { 56.6666666666667, 0.173377895097655 }, RH = { 57.3333333333333, 0.173146142560575 }, Flags = { Linear = true } },
				[58] = { 0.172926587525446, LH = { 57.6666666666667, 0.17303636504301 }, RH = { 58.3333333333333, 0.172926587525446 }, Flags = { Linear = true } },
				[59] = { 0.172926587525446, LH = { 58.6666666666667, 0.172926587525446 }, RH = { 59.3333333333333, 0.172670439984462 }, Flags = { Linear = true } },
				[60] = { 0.172158144902495, LH = { 59.6666666666667, 0.172414292443479 }, RH = { 60.3333333333333, 0.17187455298212 }, Flags = { Linear = true } },
				[61] = { 0.171307369141371, LH = { 60.6666666666667, 0.171590961061746 }, RH = { 61.3333333333333, 0.170987184715142 }, Flags = { Linear = true } },
				[62] = { 0.170346815862683, LH = { 61.6666666666667, 0.170667000288912 }, RH = { 62.3333333333333, 0.169974792053159 }, Flags = { Linear = true } },
				[63] = { 0.169230744434111, LH = { 62.6666666666667, 0.169602768243635 }, RH = { 63.3333333333333, 0.169230744434111 }, Flags = { Linear = true } },
				[64] = { 0.169230744434111, LH = { 63.6666666666667, 0.169230744434111 }, RH = { 64.3333333333333, 0.168944103138249 }, Flags = { Linear = true } },
				[65] = { 0.168370820546523, LH = { 64.6666666666667, 0.168657461842386 }, RH = { 65.3333333333333, 0.168163463013346 }, Flags = { Linear = true } },
				[66] = { 0.167748747946992, LH = { 65.6666666666667, 0.167956105480169 }, RH = { 66.3333333333333, 0.167565785417718 }, Flags = { Linear = true } },
				[67] = { 0.16719986035917, LH = { 66.6666666666667, 0.167382822888444 }, RH = { 67.3333333333333, 0.166986404075017 }, Flags = { Linear = true } },
				[68] = { 0.166559491506711, LH = { 67.6666666666667, 0.166772947790864 }, RH = { 68.3333333333333, 0.166559491506711 }, Flags = { Linear = true } },
				[69] = { 0.166559491506711, LH = { 68.6666666666667, 0.166559491506711 }, RH = { 69.3333333333333, 0.166468010242074 }, Flags = { Linear = true } },
				[70] = { 0.1662850477128, LH = { 69.6666666666667, 0.166376528977437 }, RH = { 70.3333333333333, 0.166092937057062 }, Flags = { Linear = true } },
				[71] = { 0.165708715745587, LH = { 70.6666666666667, 0.165900826401324 }, RH = { 71.3333333333333, 0.16560198760351 }, Flags = { Linear = true } },
				[72] = { 0.165388531319357, LH = { 71.6666666666667, 0.165495259461434 }, RH = { 72.3333333333333, 0.165220815667523 }, Flags = { Linear = true } },
				[73] = { 0.164885384363854, LH = { 72.6666666666667, 0.165053100015688 }, RH = { 73.3333333333333, 0.164888433739341 }, Flags = { Linear = true } },
				[74] = { 0.164894532490317, LH = { 73.6666666666667, 0.164891483114829 }, RH = { 74.3333333333333, 0.164665829328725 }, Flags = { Linear = true } },
				[75] = { 0.16420842300554, LH = { 74.6666666666667, 0.164437126167132 }, RH = { 75.3333333333333, 0.164083398610536 }, Flags = { Linear = true } },
				[76] = { 0.163833349820528, LH = { 75.6666666666667, 0.163958374215532 }, RH = { 76.3333333333333, 0.16364123916479 }, Flags = { Linear = true } },
				[77] = { 0.163257017853315, LH = { 76.6666666666667, 0.163449128509053 }, RH = { 77.3333333333333, 0.163257017853315 }, Flags = { Linear = true } },
				[78] = { 0.163257017853315, LH = { 77.6666666666667, 0.163257017853315 }, RH = { 78.3333333333333, 0.162753870897811 }, Flags = { Linear = true } },
				[79] = { 0.161747576986804, LH = { 78.6666666666667, 0.162250723942308 }, RH = { 79.3333333333333, 0.161747576986804 }, Flags = { Linear = true } },
				[80] = { 0.161747576986804, LH = { 79.6666666666667, 0.161747576986804 }, RH = { 80.3333333333333, 0.161442639438014 }, Flags = { Linear = true } },
				[81] = { 0.160832764340434, LH = { 80.6666666666667, 0.161137701889224 }, RH = { 81.3333333333333, 0.160601011803354 }, Flags = { Linear = true } },
				[82] = { 0.160137506729193, LH = { 81.6666666666667, 0.160369259266274 }, RH = { 82.3333333333333, 0.159908803567601 }, Flags = { Linear = true } },
				[83] = { 0.159451397244416, LH = { 82.6666666666667, 0.159680100406008 }, RH = { 83.3333333333333, 0.159448347868928 }, Flags = { Linear = true } },
				[84] = { 0.159442249117952, LH = { 83.6666666666667, 0.15944529849344 }, RH = { 84.3333333333333, 0.159158657197577 }, Flags = { Linear = true } },
				[85] = { 0.158591473356828, LH = { 84.6666666666667, 0.158875065277202 }, RH = { 85.3333333333333, 0.158317029562917 }, Flags = { Linear = true } },
				[86] = { 0.157768141975095, LH = { 85.6666666666667, 0.158042585769006 }, RH = { 86.3333333333333, 0.157566883192893 }, Flags = { Linear = true } },
				[87] = { 0.157164365628491, LH = { 86.6666666666667, 0.157365624410692 }, RH = { 87.3333333333333, 0.156981403099217 }, Flags = { Linear = true } },
				[88] = { 0.156615478040668, LH = { 87.6666666666667, 0.156798440569942 }, RH = { 88.3333333333333, 0.156615478040668 }, Flags = { Linear = true } },
				[89] = { 0.156615478040668, LH = { 88.6666666666667, 0.156615478040668 }, RH = { 89.3333333333333, 0.156347132997733 }, Flags = { Linear = true } },
				[90] = { 0.155810442911863, LH = { 89.6666666666667, 0.156078787954798 }, RH = { 90.3333333333333, 0.155645776635516 }, Flags = { Linear = true } },
				[91] = { 0.155316444082823, LH = { 90.6666666666667, 0.15548111035917 }, RH = { 91.3333333333333, 0.155157876557452 }, Flags = { Linear = true } },
				[92] = { 0.154840741506711, LH = { 91.6666666666667, 0.154999309032081 }, RH = { 92.3333333333333, 0.154688272732316 }, Flags = { Linear = true } },
				[93] = { 0.154383335183526, LH = { 92.6666666666667, 0.154535803957921 }, RH = { 93.3333333333333, 0.154383335183526 }, Flags = { Linear = true } },
				[94] = { 0.154383335183526, LH = { 93.6666666666667, 0.154383335183526 }, RH = { 94.3333333333333, 0.154270508290473 }, Flags = { Linear = true } },
				[95] = { 0.154044854504369, LH = { 94.6666666666667, 0.154157681397421 }, RH = { 95.3333333333333, 0.153803953840825 }, Flags = { Linear = true } },
				[96] = { 0.153322152513736, LH = { 95.6666666666667, 0.153563053177281 }, RH = { 96.3333333333333, 0.153172733114829 }, Flags = { Linear = true } },
				[97] = { 0.152873894317015, LH = { 96.6666666666667, 0.153023313715922 }, RH = { 97.3333333333333, 0.152776314301402 }, Flags = { Linear = true } },
				[98] = { 0.152581154270177, LH = { 97.6666666666667, 0.15267873428579 }, RH = { 98.3333333333333, 0.152581154270177 }, Flags = { Linear = true } },
				[99] = { 0.152581154270177, LH = { 98.6666666666667, 0.152581154270177 }, RH = { 99.3333333333333, 0.152443932373221 }, Flags = { Linear = true } },
				[100] = { 0.15216948857931, LH = { 99.6666666666667, 0.152306710476266 }, RH = { 100.333333333333, 0.15203836543333 }, Flags = { Linear = true } },
				[101] = { 0.151776119141371, LH = { 100.666666666667, 0.151907242287351 }, RH = { 101.333333333333, 0.15169073662771 }, Flags = { Linear = true } },
				[102] = { 0.151519971600387, LH = { 101.666666666667, 0.151605354114049 }, RH = { 102.333333333333, 0.151315663442698 }, Flags = { Linear = true } },
				[103] = { 0.15090704712732, LH = { 102.666666666667, 0.151111355285009 }, RH = { 103.333333333333, 0.150910096502807 }, Flags = { Linear = true } },
				[104] = { 0.150916195253783, LH = { 103.666666666667, 0.150913145878295 }, RH = { 104.333333333333, 0.150809467111707 }, Flags = { Linear = true } },
				[105] = { 0.150596010827554, LH = { 104.666666666667, 0.15070273896963 }, RH = { 105.333333333333, 0.150419147049256 }, Flags = { Linear = true } },
				[106] = { 0.150065419492659, LH = { 105.666666666667, 0.150242283270957 }, RH = { 106.333333333333, 0.149867210085946 }, Flags = { Linear = true } },
				[107] = { 0.149470791272519, LH = { 106.666666666667, 0.149669000679232 }, RH = { 107.333333333333, 0.14919329810312 }, Flags = { Linear = true } },
				[108] = { 0.148638311764322, LH = { 107.666666666667, 0.148915804933721 }, RH = { 108.333333333333, 0.14864136113981 }, Flags = { Linear = true } },
				[109] = { 0.148647459890786, LH = { 108.666666666667, 0.148644410515298 }, RH = { 109.333333333333, 0.148342522341996 }, Flags = { Linear = true } },
				[110] = { 0.147732647244416, LH = { 109.666666666667, 0.148037584793206 }, RH = { 110.333333333333, 0.147433808446601 }, Flags = { Linear = true } },
				[111] = { 0.146836130850973, LH = { 110.666666666667, 0.147134969648787 }, RH = { 111.333333333333, 0.146552538930598 }, Flags = { Linear = true } },
				[112] = { 0.145985355089849, LH = { 111.666666666667, 0.146268947010224 }, RH = { 112.333333333333, 0.145695664418498 }, Flags = { Linear = true } },
				[113] = { 0.145116283075797, LH = { 112.666666666667, 0.145405973747148 }, RH = { 113.333333333333, 0.145122381826773 }, Flags = { Linear = true } },
				[114] = { 0.145134579328725, LH = { 113.666666666667, 0.145128480577749 }, RH = { 114.333333333333, 0.145021752435672 }, Flags = { Linear = true } },
				[115] = { 0.144796098649568, LH = { 114.666666666667, 0.14490892554262 }, RH = { 115.333333333333, 0.144555197986024 }, Flags = { Linear = true } },
				[116] = { 0.144073396658935, LH = { 115.666666666667, 0.14431429732248 }, RH = { 116.333333333333, 0.143975816643323 }, Flags = { Linear = true } },
				[117] = { 0.143780656612097, LH = { 116.666666666667, 0.14387823662771 }, RH = { 117.333333333333, 0.143612940960263 }, Flags = { Linear = true } },
				[118] = { 0.143277509656594, LH = { 117.666666666667, 0.143445225308428 }, RH = { 118.333333333333, 0.143277509656594 }, Flags = { Linear = true } },
				[119] = { 0.143277509656594, LH = { 118.666666666667, 0.143277509656594 }, RH = { 119.333333333333, 0.143179929640981 }, Flags = { Linear = true } },
				[120] = { 0.142984769609755, LH = { 119.666666666667, 0.143082349625368 }, RH = { 120.333333333333, 0.142777412076578 }, Flags = { Linear = true } },
				[121] = { 0.142362697010224, LH = { 120.666666666667, 0.142570054543401 }, RH = { 121.333333333333, 0.142225475113268 }, Flags = { Linear = true } },
				[122] = { 0.141951031319357, LH = { 121.666666666667, 0.142088253216313 }, RH = { 122.333333333333, 0.141719278782277 }, Flags = { Linear = true } },
				[123] = { 0.141255773708116, LH = { 122.666666666667, 0.141487526245196 }, RH = { 123.333333333333, 0.141252724332628 }, Flags = { Linear = true } },
				[124] = { 0.141246625581652, LH = { 123.666666666667, 0.14124967495714 }, RH = { 124.333333333333, 0.141045366799451 }, Flags = { Linear = true } },
				[125] = { 0.140642849235048, LH = { 124.666666666667, 0.140844108017249 }, RH = { 125.333333333333, 0.140258627923572 }, Flags = { Linear = true } },
				[126] = { 0.139490185300622, LH = { 125.666666666667, 0.139874406612097 }, RH = { 126.333333333333, 0.139084618360731 }, Flags = { Linear = true } },
				[127] = { 0.13827348448095, LH = { 126.666666666667, 0.13867905142084 }, RH = { 127.333333333333, 0.137877065667523 }, Flags = { Linear = true } },
				[128] = { 0.137084228040668, LH = { 127.666666666667, 0.137480646854096 }, RH = { 128.333333333333, 0.137084228040668 }, Flags = { Linear = true } },
				[129] = { 0.137084228040668, LH = { 128.666666666667, 0.137084228040668 }, RH = { 129.333333333333, 0.136700006729193 }, Flags = { Linear = true } },
				[130] = { 0.135931564106242, LH = { 129.666666666667, 0.136315785417718 }, RH = { 130.333333333333, 0.135669317814283 }, Flags = { Linear = true } },
				[131] = { 0.135144825230364, LH = { 130.666666666667, 0.135407071522323 }, RH = { 131.333333333333, 0.134858183934501 }, Flags = { Linear = true } },
				[132] = { 0.134284901342776, LH = { 131.666666666667, 0.134571542638639 }, RH = { 132.333333333333, 0.13404705005472 }, Flags = { Linear = true } },
				[133] = { 0.133571347478608, LH = { 132.666666666667, 0.133809198766664 }, RH = { 133.333333333333, 0.133571347478608 }, Flags = { Linear = true } },
				[134] = { 0.133571347478608, LH = { 133.666666666667, 0.133571347478608 }, RH = { 134.333333333333, 0.1333212986886 }, Flags = { Linear = true } },
				[135] = { 0.132821201108584, LH = { 134.666666666667, 0.133071249898592 }, RH = { 135.333333333333, 0.13259554732248 }, Flags = { Linear = true } },
				[136] = { 0.13214423975027, LH = { 135.666666666667, 0.132369893536375 }, RH = { 136.333333333333, 0.131894190960263 }, Flags = { Linear = true } },
				[137] = { 0.131394093380247, LH = { 136.666666666667, 0.131644142170255 }, RH = { 137.333333333333, 0.131192834598046 }, Flags = { Linear = true } },
				[138] = { 0.130790317033643, LH = { 137.666666666667, 0.130991575815844 }, RH = { 138.333333333333, 0.130790317033643 }, Flags = { Linear = true } },
				[139] = { 0.130790317033643, LH = { 138.666666666667, 0.130790317033643 }, RH = { 139.333333333333, 0.130573811374002 }, Flags = { Linear = true } },
				[140] = { 0.13014080005472, LH = { 139.666666666667, 0.130357305714361 }, RH = { 140.333333333333, 0.130018825035204 }, Flags = { Linear = true } },
				[141] = { 0.129774874996172, LH = { 140.666666666667, 0.129896850015688 }, RH = { 141.333333333333, 0.129723035612878 }, Flags = { Linear = true } },
				[142] = { 0.129619356846289, LH = { 141.666666666667, 0.129671196229583 }, RH = { 142.333333333333, 0.129607159344338 }, Flags = { Linear = true } },
				[143] = { 0.129582764340434, LH = { 142.666666666667, 0.129594961842386 }, RH = { 143.333333333333, 0.129582764340434 }, Flags = { Linear = true } },
				[144] = { 0.129582764340434, LH = { 143.666666666667, 0.129582764340434 }, RH = { 144.333333333333, 0.129387604309209 }, Flags = { Linear = true } },
				[145] = { 0.128997284246757, LH = { 144.666666666667, 0.129192444277983 }, RH = { 145.333333333333, 0.128780778587117 }, Flags = { Linear = true } },
				[146] = { 0.128347767267835, LH = { 145.666666666667, 0.128564272927476 }, RH = { 146.333333333333, 0.128152607236609 }, Flags = { Linear = true } },
				[147] = { 0.127762287174158, LH = { 146.666666666667, 0.127957447205384 }, RH = { 147.333333333333, 0.127618966526227 }, Flags = { Linear = true } },
				[148] = { 0.127332325230364, LH = { 147.666666666667, 0.127475645878295 }, RH = { 148.333333333333, 0.127332325230364 }, Flags = { Linear = true } },
				[149] = { 0.127332325230364, LH = { 148.666666666667, 0.127332325230364 }, RH = { 149.333333333333, 0.12714936270109 }, Flags = { Linear = true } },
				[150] = { 0.126783437642542, LH = { 149.666666666667, 0.126966400171816 }, RH = { 150.333333333333, 0.126515092599607 }, Flags = { Linear = true } },
				[151] = { 0.125978402513736, LH = { 150.666666666667, 0.126246747556672 }, RH = { 151.333333333333, 0.125835081865805 }, Flags = { Linear = true } },
				[152] = { 0.125548440569943, LH = { 151.666666666667, 0.125691761217874 }, RH = { 152.333333333333, 0.125408169297499 }, Flags = { Linear = true } },
				[153] = { 0.125127626752612, LH = { 152.666666666667, 0.125267898025056 }, RH = { 153.333333333333, 0.125121528001637 }, Flags = { Linear = true } },
				[154] = { 0.125109330499685, LH = { 153.666666666667, 0.125115429250661 }, RH = { 154.333333333333, 0.124978207353705 }, Flags = { Linear = true } },
				[155] = { 0.124715961061746, LH = { 154.666666666667, 0.124847084207725 }, RH = { 155.333333333333, 0.124700714184306 }, Flags = { Linear = true } },
				[156] = { 0.124670220429427, LH = { 155.666666666667, 0.124685467306867 }, RH = { 156.333333333333, 0.12457873916479 }, Flags = { Linear = true } },
				[157] = { 0.124395776635516, LH = { 156.666666666667, 0.124487257900153 }, RH = { 157.333333333333, 0.124353085378686 }, Flags = { Linear = true } },
				[158] = { 0.124267702865024, LH = { 157.666666666667, 0.124310394121855 }, RH = { 158.333333333333, 0.124267702865024 }, Flags = { Linear = true } },
				[159] = { 0.124267702865024, LH = { 158.666666666667, 0.124267702865024 }, RH = { 159.333333333333, 0.124014604699529 }, Flags = { Linear = true } },
				[160] = { 0.123508408368537, LH = { 159.666666666667, 0.123761506534033 }, RH = { 160.333333333333, 0.123325445839263 }, Flags = { Linear = true } },
				[161] = { 0.122959520780715, LH = { 160.666666666667, 0.123142483309989 }, RH = { 161.333333333333, 0.122730817619123 }, Flags = { Linear = true } },
				[162] = { 0.122273411295938, LH = { 161.666666666667, 0.12250211445753 }, RH = { 162.333333333333, 0.122047757509833 }, Flags = { Linear = true } },
				[163] = { 0.121596449937624, LH = { 162.666666666667, 0.121822103723729 }, RH = { 163.333333333333, 0.121596449937624 }, Flags = { Linear = true } },
				[164] = { 0.121596449937624, LH = { 163.666666666667, 0.121596449937624 }, RH = { 164.333333333333, 0.121425684910302 }, Flags = { Linear = true } },
				[165] = { 0.121084154855657, LH = { 164.666666666667, 0.121254919882979 }, RH = { 165.333333333333, 0.120815809812722 }, Flags = { Linear = true } },
				[166] = { 0.120279119726851, LH = { 165.666666666667, 0.120547464769786 }, RH = { 166.333333333333, 0.120099206573065 }, Flags = { Linear = true } },
				[167] = { 0.119739380265493, LH = { 166.666666666667, 0.119919293419279 }, RH = { 167.333333333333, 0.119544220234267 }, Flags = { Linear = true } },
				[168] = { 0.119153900171816, LH = { 167.666666666667, 0.119349060203042 }, RH = { 168.333333333333, 0.119153900171816 }, Flags = { Linear = true } },
				[169] = { 0.119153900171816, LH = { 168.666666666667, 0.119153900171816 }, RH = { 169.333333333333, 0.118781876362292 }, Flags = { Linear = true } },
				[170] = { 0.118037828743245, LH = { 169.666666666667, 0.118409852552768 }, RH = { 170.333333333333, 0.117803026830676 }, Flags = { Linear = true } },
				[171] = { 0.11733342300554, LH = { 170.666666666667, 0.117568224918108 }, RH = { 171.333333333333, 0.11707117671358 }, Flags = { Linear = true } },
				[172] = { 0.116546684129661, LH = { 171.666666666667, 0.116808930421621 }, RH = { 172.333333333333, 0.116433857236609 }, Flags = { Linear = true } },
				[173] = { 0.116208203450505, LH = { 172.666666666667, 0.116321030343557 }, RH = { 173.333333333333, 0.116208203450505 }, Flags = { Linear = true } },
				[174] = { 0.116208203450505, LH = { 173.666666666667, 0.116208203450505 }, RH = { 174.333333333333, 0.115979500288912 }, Flags = { Linear = true } },
				[175] = { 0.115522093965727, LH = { 174.666666666667, 0.11575079712732 }, RH = { 175.333333333333, 0.115381822693284 }, Flags = { Linear = true } },
				[176] = { 0.115101280148397, LH = { 175.666666666667, 0.11524155142084 }, RH = { 176.333333333333, 0.11506773701803 }, Flags = { Linear = true } },
				[177] = { 0.115000650757296, LH = { 176.666666666667, 0.115034193887663 }, RH = { 177.333333333333, 0.114717058836921 }, Flags = { Linear = true } },
				[178] = { 0.114149874996172, LH = { 177.666666666667, 0.114433466916547 }, RH = { 178.333333333333, 0.114149874996172 }, Flags = { Linear = true } },
				[179] = { 0.114149874996172, LH = { 178.666666666667, 0.114149874996172 }, RH = { 179.333333333333, 0.114058393731535 }, Flags = { Linear = true } },
				[180] = { 0.113875431202261, LH = { 179.666666666667, 0.113966912466898 }, RH = { 180.333333333333, 0.113518654270177 }, Flags = { Linear = true } },
				[181] = { 0.112805100406008, LH = { 180.666666666667, 0.113161877338092 }, RH = { 181.333333333333, 0.112237916565259 }, Flags = { Linear = true } },
				[182] = { 0.11110354888376, LH = { 181.666666666667, 0.111670732724509 }, RH = { 182.333333333333, 0.110579056299841 }, Flags = { Linear = true } },
				[183] = { 0.109530071132003, LH = { 182.666666666667, 0.110054563715922 }, RH = { 183.333333333333, 0.109530071132003 }, Flags = { Linear = true } },
				[184] = { 0.109530071132003, LH = { 183.666666666667, 0.109530071132003 }, RH = { 184.333333333333, 0.108770776635516 }, Flags = { Linear = true } },
				[185] = { 0.107252187642542, LH = { 184.666666666667, 0.108011482139029 }, RH = { 185.333333333333, 0.106434955011785 }, Flags = { Linear = true } },
				[186] = { 0.10480048975027, LH = { 185.666666666667, 0.105617722381028 }, RH = { 186.333333333333, 0.103928368360731 }, Flags = { Linear = true } },
				[187] = { 0.102184125581652, LH = { 186.666666666667, 0.103056246971192 }, RH = { 187.333333333333, 0.101162584793206 }, Flags = { Linear = true } },
				[188] = { 0.0991195032163125, LH = { 187.666666666667, 0.100141044004759 }, RH = { 188.333333333333, 0.0991195032163125 }, Flags = { Linear = true } },
				[189] = { 0.0991195032163125, LH = { 188.666666666667, 0.0991195032163125 }, RH = { 189.333333333333, 0.0979790367838379 }, Flags = { Linear = true } },
				[190] = { 0.0956981039188887, LH = { 189.666666666667, 0.0968385703513633 }, RH = { 190.333333333333, 0.0944936006011681 }, Flags = { Linear = true } },
				[191] = { 0.092084593965727, LH = { 190.666666666667, 0.0932890972834476 }, RH = { 191.333333333333, 0.0907520168775147 }, Flags = { Linear = true } },
				[192] = { 0.0880868627010901, LH = { 191.666666666667, 0.0894194397893024 }, RH = { 192.333333333333, 0.0862785830367653 }, Flags = { Linear = true } },
				[193] = { 0.0826620237081158, LH = { 192.666666666667, 0.0844703033724406 }, RH = { 193.333333333333, 0.0826620237081158 }, Flags = { Linear = true } },
				[194] = { 0.0826620237081158, LH = { 193.666666666667, 0.0826620237081158 }, RH = { 194.333333333333, 0.0803048564559691 }, Flags = { Linear = true } },
				[195] = { 0.0755905219516755, LH = { 194.666666666667, 0.0779476892038223 }, RH = { 195.333333333333, 0.0728826765184203 }, Flags = { Linear = true } },
				[196] = { 0.0674669856519097, LH = { 195.666666666667, 0.070174831085165 }, RH = { 196.333333333333, 0.0643200301483968 }, Flags = { Linear = true } },
				[197] = { 0.0580261191413711, LH = { 196.666666666667, 0.061173074644884 }, RH = { 197.333333333333, 0.0544644485715038 }, Flags = { Linear = true } },
				[198] = { 0.0473411074317692, LH = { 197.666666666667, 0.0509027780016365 }, RH = { 198.333333333333, 0.0473136630523781 }, Flags = { Linear = true } },
				[199] = { 0.0472587742935959, LH = { 198.666666666667, 0.047286218672987 }, RH = { 199.333333333333, 0.0433311786651806 }, Flags = { Linear = true } },
				[200] = { 0.03547598740835, LH = { 199.666666666667, 0.0394035830367653 }, RH = { 200.333333333333, 0.0312221086027294 }, Flags = { Linear = true } },
				[201] = { 0.0227143509914882, LH = { 200.666666666667, 0.0269682297971088 }, RH = { 201.333333333333, 0.018082349625368 }, Flags = { Linear = true } },
				[202] = { 0.00881834689312755, LH = { 201.666666666667, 0.0134503482592478 }, RH = { 202.333333333333, 0.00379602546455611 }, Flags = { Linear = true } },
				[203] = { -0.00624861739258675, LH = { 202.666666666667, -0.00122629596401532 }, RH = { 203.333333333333, -0.00624861739258675 }, Flags = { Linear = true } },
				[204] = { -0.00624861739258675, LH = { 203.666666666667, -0.00624861739258675 }, RH = { 204.333333333333, -0.0113959632161621 }, Flags = { Linear = true } },
				[205] = { -0.0216906548633128, LH = { 204.666666666667, -0.0165433090397374 }, RH = { 205.333333333333, -0.027572900179472 }, Flags = { Linear = true } },
				[206] = { -0.0393373908117905, LH = { 205.666666666667, -0.0334551454956313 }, RH = { 206.333333333333, -0.0454666355424697 }, Flags = { Linear = true } },
				[207] = { -0.057725125003828, LH = { 206.666666666667, -0.0515958802731488 }, RH = { 207.333333333333, -0.0632414452614392 }, Flags = { Linear = true } },
				[208] = { -0.0742740857766617, LH = { 207.666666666667, -0.0687577655190505 }, RH = { 208.333333333333, -0.0742740857766617 }, Flags = { Linear = true } },
				[209] = { -0.0742740857766617, LH = { 208.666666666667, -0.0742740857766617 }, RH = { 209.333333333333, -0.0800861954565993 }, Flags = { Linear = true } },
				[210] = { -0.0917104148164744, LH = { 209.666666666667, -0.0858983051365368 }, RH = { 210.333333333333, -0.0972419819515251 }, Flags = { Linear = true } },
				[211] = { -0.108305116221627, LH = { 210.666666666667, -0.102773549086576 }, RH = { 211.333333333333, -0.114089781522173 }, Flags = { Linear = true } },
				[212] = { -0.125659112123266, LH = { 211.666666666667, -0.119874446822719 }, RH = { 212.333333333333, -0.131169333629901 }, Flags = { Linear = true } },
				[213] = { -0.142189776643172, LH = { 212.666666666667, -0.136679555136537 }, RH = { 213.333333333333, -0.142189776643172 }, Flags = { Linear = true } },
				[214] = { -0.142189776643172, LH = { 213.666666666667, -0.142189776643172 }, RH = { 214.333333333333, -0.147983590070182 }, Flags = { Linear = true } },
				[215] = { -0.159571216924203, LH = { 214.666666666667, -0.153777403497193 }, RH = { 215.333333333333, -0.165090586557302 }, Flags = { Linear = true } },
				[216] = { -0.1761293258235, LH = { 215.666666666667, -0.170609956190401 }, RH = { 216.333333333333, -0.18125532601866 }, Flags = { Linear = true } },
				[217] = { -0.19150732640898, LH = { 216.666666666667, -0.18638132621382 }, RH = { 217.333333333333, -0.196066142763391 }, Flags = { Linear = true } },
				[218] = { -0.205183775472212, LH = { 217.666666666667, -0.200624959117801 }, RH = { 218.333333333333, -0.205183775472212 }, Flags = { Linear = true } },
				[219] = { -0.205183775472212, LH = { 218.666666666667, -0.205183775472212 }, RH = { 219.333333333333, -0.208806433551837 }, Flags = { Linear = true } },
				[220] = { -0.216051749711088, LH = { 219.666666666667, -0.212429091631463 }, RH = { 220.333333333333, -0.219595124028028 }, Flags = { Linear = true } },
				[221] = { -0.226681872661908, LH = { 220.666666666667, -0.223138498344968 }, RH = { 221.333333333333, -0.23022219760336 }, Flags = { Linear = true } },
				[222] = { -0.237302847486264, LH = { 221.666666666667, -0.233762522544812 }, RH = { 222.333333333333, -0.241206048110776 }, Flags = { Linear = true } },
				[223] = { -0.2490124493598, LH = { 222.666666666667, -0.245109248735288 }, RH = { 223.333333333333, -0.2490124493598 }, Flags = { Linear = true } },
				[224] = { -0.2490124493598, LH = { 223.666666666667, -0.2490124493598 }, RH = { 224.333333333333, -0.253562117587747 }, Flags = { Linear = true } },
				[225] = { -0.262661454043641, LH = { 224.666666666667, -0.258111785815694 }, RH = { 225.333333333333, -0.267387986049886 }, Flags = { Linear = true } },
				[226] = { -0.276841050062376, LH = { 225.666666666667, -0.272114518056131 }, RH = { 226.333333333333, -0.281579779570573 }, Flags = { Linear = true } },
				[227] = { -0.291057238586966, LH = { 226.666666666667, -0.286318509078769 }, RH = { 227.333333333333, -0.296058214387122 }, Flags = { Linear = true } },
				[228] = { -0.306060165987435, LH = { 227.666666666667, -0.301059190187278 }, RH = { 228.333333333333, -0.306060165987435 }, Flags = { Linear = true } },
				[229] = { -0.306060165987435, LH = { 228.666666666667, -0.306060165987435 }, RH = { 229.333333333333, -0.311152623052228 }, Flags = { Linear = true } },
				[230] = { -0.321337537181814, LH = { 229.666666666667, -0.316245080117021 }, RH = { 230.333333333333, -0.326576364270026 }, Flags = { Linear = true } },
				[231] = { -0.337054018446451, LH = { 230.666666666667, -0.331815191358239 }, RH = { 231.333333333333, -0.342027549867216 }, Flags = { Linear = true } },
				[232] = { -0.351974612708746, LH = { 231.666666666667, -0.347001081287981 }, RH = { 232.333333333333, -0.356475490928886 }, Flags = { Linear = true } },
				[233] = { -0.365477247369167, LH = { 232.666666666667, -0.360976369149027 }, RH = { 233.333333333333, -0.365480296744655 }, Flags = { Linear = true } },
				[234] = { -0.365486395495631, LH = { 233.666666666667, -0.365483346120143 }, RH = { 234.333333333333, -0.36980126181101 }, Flags = { Linear = true } },
				[235] = { -0.378430994441767, LH = { 234.666666666667, -0.374116128126388 }, RH = { 235.333333333333, -0.38285563827471 }, Flags = { Linear = true } },
				[236] = { -0.391704925940596, LH = { 235.666666666667, -0.387280282107653 }, RH = { 236.333333333333, -0.396211902911712 }, Flags = { Linear = true } },
				[237] = { -0.405225856853945, LH = { 236.666666666667, -0.400718879882829 }, RH = { 237.333333333333, -0.409241884371509 }, Flags = { Linear = true } },
				[238] = { -0.417273939406638, LH = { 237.666666666667, -0.413257911889074 }, RH = { 238.333333333333, -0.417273939406638 }, Flags = { Linear = true } },
				[239] = { -0.417273939406638, LH = { 238.666666666667, -0.417273939406638 }, RH = { 239.333333333333, -0.421247275667372 }, Flags = { Linear = true } },
				[240] = { -0.42919394818884, LH = { 239.666666666667, -0.425220611928106 }, RH = { 240.333333333333, -0.432950778789932 }, Flags = { Linear = true } },
				[241] = { -0.440464439992118, LH = { 240.666666666667, -0.436707609391025 }, RH = { 241.333333333333, -0.444059653692352 }, Flags = { Linear = true } },
				[242] = { -0.451250081092821, LH = { 241.666666666667, -0.447654867392587 }, RH = { 242.333333333333, -0.454769060405858 }, Flags = { Linear = true } },
				[243] = { -0.461807019031931, LH = { 242.666666666667, -0.458288039718894 }, RH = { 243.333333333333, -0.461807019031931 }, Flags = { Linear = true } },
				[244] = { -0.461807019031931, LH = { 243.666666666667, -0.461807019031931 }, RH = { 244.333333333333, -0.465371738977286 }, Flags = { Linear = true } },
				[245] = { -0.472501178867997, LH = { 244.666666666667, -0.468936458922641 }, Flags = { Linear = true } }
			}
		},
		XYPath1Y1 = BezierSpline {
			SplineColor = { Red = 0, Green = 255, Blue = 0 },
			CtrlWZoom = false,
			NameSet = true,
			KeyFrames = {
				[0] = { 0.359364979875666, RH = { 0.333333333333333, 0.359524186571445 }, Flags = { Linear = true } },
				[1] = { 0.359842599963003, LH = { 0.666666666666667, 0.359683393267224 }, RH = { 1.33333333333333, 0.360030236425885 }, Flags = { Linear = true } },
				[2] = { 0.360405509351649, LH = { 1.66666666666667, 0.360217872888767 }, RH = { 2.33333333333333, 0.360559030094007 }, Flags = { Linear = true } },
				[3] = { 0.360866071578723, LH = { 2.66666666666667, 0.360712550836365 }, RH = { 3.33333333333333, 0.360866071578723 }, Flags = { Linear = true } },
				[4] = { 0.360866071578723, LH = { 3.66666666666667, 0.360866071578723 }, RH = { 4.33333333333333, 0.360866071578723 }, Flags = { Linear = true } },
				[5] = { 0.360866071578723, LH = { 4.66666666666667, 0.360866071578723 }, RH = { 5.33333333333333, 0.361059393995026 }, Flags = { Linear = true } },
				[6] = { 0.361446038827632, LH = { 5.66666666666667, 0.361252716411329 }, RH = { 6.33333333333333, 0.361622303383672 }, Flags = { Linear = true } },
				[7] = { 0.361974832495754, LH = { 6.66666666666667, 0.361798567939713 }, RH = { 7.33333333333333, 0.362043063936802 }, Flags = { Linear = true } },
				[8] = { 0.362179526818898, LH = { 7.66666666666667, 0.36211129537785 }, RH = { 8.33333333333333, 0.362185212772319 }, Flags = { Linear = true } },
				[9] = { 0.36219658467916, LH = { 8.66666666666667, 0.362190898725739 }, RH = { 9.33333333333333, 0.36219658467916 }, Flags = { Linear = true } },
				[10] = { 0.36219658467916, LH = { 9.66666666666667, 0.36219658467916 }, RH = { 10.3333333333333, 0.362355791374939 }, Flags = { Linear = true } },
				[11] = { 0.362674204766496, LH = { 10.6666666666667, 0.362514998070717 }, RH = { 11.3333333333333, 0.362804981695172 }, Flags = { Linear = true } },
				[12] = { 0.363066535552522, LH = { 11.6666666666667, 0.362935758623847 }, RH = { 12.3333333333333, 0.36312908104015 }, Flags = { Linear = true } },
				[13] = { 0.363254172015404, LH = { 12.6666666666667, 0.363191626527777 }, RH = { 13.3333333333333, 0.363276915829087 }, Flags = { Linear = true } },
				[14] = { 0.363322403456453, LH = { 13.6666666666667, 0.36329965964277 }, RH = { 14.3333333333333, 0.363322403456453 }, Flags = { Linear = true } },
				[15] = { 0.363322403456453, LH = { 14.6666666666667, 0.363322403456453 }, RH = { 15.3333333333333, 0.363333775363294 }, Flags = { Linear = true } },
				[16] = { 0.363356519176976, LH = { 15.6666666666667, 0.363345147270135 }, RH = { 16.3333333333333, 0.363367891083818 }, Flags = { Linear = true } },
				[17] = { 0.363390634897501, LH = { 16.6666666666667, 0.363379262990659 }, RH = { 17.3333333333333, 0.363475924198811 }, Flags = { Linear = true } },
				[18] = { 0.363646502801431, LH = { 17.6666666666667, 0.363561213500121 }, RH = { 18.3333333333333, 0.363646502801431 }, Flags = { Linear = true } },
				[19] = { 0.363646502801431, LH = { 18.6666666666667, 0.363646502801431 }, RH = { 19.3333333333333, 0.363697676382217 }, Flags = { Linear = true } },
				[20] = { 0.363800023543789, LH = { 19.6666666666667, 0.363748849963003 }, RH = { 20.3333333333333, 0.363800023543789 }, Flags = { Linear = true } },
				[21] = { 0.363800023543789, LH = { 20.6666666666667, 0.363800023543789 }, RH = { 21.3333333333333, 0.363993345960091 }, Flags = { Linear = true } },
				[22] = { 0.364379990792697, LH = { 21.6666666666667, 0.364186668376394 }, RH = { 22.3333333333333, 0.364391362699538 }, Flags = { Linear = true } },
				[23] = { 0.364414106513221, LH = { 22.6666666666667, 0.36440273460638 }, RH = { 23.3333333333333, 0.364414106513221 }, Flags = { Linear = true } },
				[24] = { 0.364414106513221, LH = { 23.6666666666667, 0.364414106513221 }, RH = { 24.3333333333333, 0.364766635625303 }, Flags = { Linear = true } },
				[25] = { 0.365471693849466, LH = { 24.6666666666667, 0.365119164737384 }, RH = { 25.3333333333333, 0.365494437663148 }, Flags = { Linear = true } },
				[26] = { 0.365539925290514, LH = { 25.6666666666667, 0.365517181476831 }, RH = { 26.3333333333333, 0.365551297197355 }, Flags = { Linear = true } },
				[27] = { 0.365574041011038, LH = { 26.6666666666667, 0.365562669104196 }, RH = { 27.3333333333333, 0.365574041011038 }, Flags = { Linear = true } },
				[28] = { 0.365574041011038, LH = { 27.6666666666667, 0.365574041011038 }, RH = { 28.3333333333333, 0.365579726964458 }, Flags = { Linear = true } },
				[29] = { 0.3655910988713, LH = { 28.6666666666667, 0.365585412917879 }, RH = { 29.3333333333333, 0.365608156731562 }, Flags = { Linear = true } },
				[30] = { 0.365642272452086, LH = { 29.6666666666667, 0.365625214591824 }, RH = { 30.3333333333333, 0.365699131986292 }, Flags = { Linear = true } },
				[31] = { 0.365812851054706, LH = { 30.6666666666667, 0.365755991520499 }, RH = { 31.3333333333333, 0.365818537008126 }, Flags = { Linear = true } },
				[32] = { 0.365829908914968, LH = { 31.6666666666667, 0.365824222961547 }, RH = { 32.3333333333333, 0.365795793194444 }, Flags = { Linear = true } },
				[33] = { 0.365727561753396, LH = { 32.6666666666667, 0.36576167747392 }, RH = { 33.3333333333333, 0.365727561753396 }, Flags = { Linear = true } },
				[34] = { 0.365727561753396, LH = { 33.6666666666667, 0.365727561753396 }, RH = { 34.3333333333333, 0.365790107241023 }, Flags = { Linear = true } },
				[35] = { 0.365915198216278, LH = { 34.6666666666667, 0.36585265272865 }, RH = { 35.3333333333333, 0.36601754537785 }, Flags = { Linear = true } },
				[36] = { 0.366222239700994, LH = { 35.6666666666667, 0.366119892539422 }, RH = { 36.3333333333333, 0.366262041374939 }, Flags = { Linear = true } },
				[37] = { 0.366341644722828, LH = { 36.6666666666667, 0.366301843048883 }, RH = { 37.3333333333333, 0.366375760443352 }, Flags = { Linear = true } },
				[38] = { 0.3664439918844, LH = { 37.6666666666667, 0.366409876163876 }, RH = { 38.3333333333333, 0.3664439918844 }, Flags = { Linear = true } },
				[39] = { 0.3664439918844, LH = { 38.6666666666667, 0.3664439918844 }, RH = { 39.3333333333333, 0.366495165465186 }, Flags = { Linear = true } },
				[40] = { 0.366597512626758, LH = { 39.6666666666667, 0.366546339045972 }, RH = { 40.3333333333333, 0.366552024999393 }, Flags = { Linear = true } },
				[41] = { 0.366461049744662, LH = { 40.6666666666667, 0.366506537372027 }, RH = { 41.3333333333333, 0.366466735698083 }, Flags = { Linear = true } },
				[42] = { 0.366478107604924, LH = { 41.6666666666667, 0.366472421651503 }, RH = { 42.3333333333333, 0.366472421651503 }, Flags = { Linear = true } },
				[43] = { 0.366461049744662, LH = { 42.6666666666667, 0.366466735698083 }, RH = { 43.3333333333333, 0.366654372160965 }, Flags = { Linear = true } },
				[44] = { 0.36704101699357, LH = { 43.6666666666667, 0.366847694577268 }, RH = { 44.3333333333333, 0.36704101699357 }, Flags = { Linear = true } },
				[45] = { 0.36704101699357, LH = { 44.6666666666667, 0.36704101699357 }, RH = { 45.3333333333333, 0.36704101699357 }, Flags = { Linear = true } },
				[46] = { 0.36704101699357, LH = { 45.6666666666667, 0.36704101699357 }, RH = { 46.3333333333333, 0.36704101699357 }, Flags = { Linear = true } },
				[47] = { 0.36704101699357, LH = { 46.6666666666667, 0.36704101699357 }, RH = { 47.3333333333333, 0.367092190574356 }, Flags = { Linear = true } },
				[48] = { 0.367194537735928, LH = { 47.6666666666667, 0.367143364155142 }, RH = { 48.3333333333333, 0.367194537735928 }, Flags = { Linear = true } },
				[49] = { 0.367194537735928, LH = { 48.6666666666667, 0.367194537735928 }, RH = { 49.3333333333333, 0.367228653456453 }, Flags = { Linear = true } },
				[50] = { 0.367296884897501, LH = { 49.6666666666667, 0.367262769176976 }, RH = { 50.3333333333333, 0.367421975872755 }, Flags = { Linear = true } },
				[51] = { 0.367672157823265, LH = { 50.6666666666667, 0.36754706684801 }, RH = { 51.3333333333333, 0.367706273543789 }, Flags = { Linear = true } },
				[52] = { 0.367774504984837, LH = { 51.6666666666667, 0.367740389264313 }, RH = { 52.3333333333333, 0.367768819031416 }, Flags = { Linear = true } },
				[53] = { 0.367757447124575, LH = { 52.6666666666667, 0.367763133077995 }, RH = { 53.3333333333333, 0.367757447124575 }, Flags = { Linear = true } },
				[54] = { 0.367757447124575, LH = { 53.6666666666667, 0.367757447124575 }, RH = { 54.3333333333333, 0.367746075217733 }, Flags = { Linear = true } },
				[55] = { 0.367723331404051, LH = { 54.6666666666667, 0.367734703310892 }, RH = { 55.3333333333333, 0.367711959497209 }, Flags = { Linear = true } },
				[56] = { 0.367689215683527, LH = { 55.6666666666667, 0.367700587590368 }, RH = { 56.3333333333333, 0.367609612335637 }, Flags = { Linear = true } },
				[57] = { 0.367450405639859, LH = { 56.6666666666667, 0.367530008987748 }, RH = { 57.3333333333333, 0.367456091593279 }, Flags = { Linear = true } },
				[58] = { 0.367467463500121, LH = { 57.6666666666667, 0.3674617775467 }, RH = { 58.3333333333333, 0.367467463500121 }, Flags = { Linear = true } },
				[59] = { 0.367467463500121, LH = { 58.6666666666667, 0.367467463500121 }, RH = { 59.3333333333333, 0.367501579220645 }, Flags = { Linear = true } },
				[60] = { 0.367569810661693, LH = { 59.6666666666667, 0.367535694941169 }, RH = { 60.3333333333333, 0.367518637080907 }, Flags = { Linear = true } },
				[61] = { 0.367416289919335, LH = { 60.6666666666667, 0.367467463500121 }, RH = { 61.3333333333333, 0.367410603965914 }, Flags = { Linear = true } },
				[62] = { 0.367399232059073, LH = { 61.6666666666667, 0.367404918012493 }, RH = { 62.3333333333333, 0.367245711316714 }, Flags = { Linear = true } },
				[63] = { 0.366938669831998, LH = { 62.6666666666667, 0.367092190574356 }, RH = { 63.3333333333333, 0.366938669831998 }, Flags = { Linear = true } },
				[64] = { 0.366938669831998, LH = { 63.6666666666667, 0.366938669831998 }, RH = { 64.3333333333333, 0.366995529366205 }, Flags = { Linear = true } },
				[65] = { 0.367109248434618, LH = { 64.6666666666667, 0.367052388900412 }, RH = { 65.3333333333333, 0.367171793922246 }, Flags = { Linear = true } },
				[66] = { 0.367296884897501, LH = { 65.6666666666667, 0.367234339409873 }, RH = { 66.3333333333333, 0.367296884897501 }, Flags = { Linear = true } },
				[67] = { 0.367296884897501, LH = { 66.6666666666667, 0.367296884897501 }, RH = { 67.3333333333333, 0.367296884897501 }, Flags = { Linear = true } },
				[68] = { 0.367296884897501, LH = { 67.6666666666667, 0.367296884897501 }, RH = { 68.3333333333333, 0.367296884897501 }, Flags = { Linear = true } },
				[69] = { 0.367296884897501, LH = { 68.6666666666667, 0.367296884897501 }, RH = { 69.3333333333333, 0.36737648824539 }, Flags = { Linear = true } },
				[70] = { 0.367535694941169, LH = { 69.6666666666667, 0.367456091593279 }, RH = { 70.3333333333333, 0.367603926382217 }, Flags = { Linear = true } },
				[71] = { 0.367740389264313, LH = { 70.6666666666667, 0.367672157823265 }, RH = { 71.3333333333333, 0.367740389264313 }, Flags = { Linear = true } },
				[72] = { 0.367740389264313, LH = { 71.6666666666667, 0.367740389264313 }, RH = { 72.3333333333333, 0.367814306658781 }, Flags = { Linear = true } },
				[73] = { 0.367962141447719, LH = { 72.6666666666667, 0.36788822405325 }, RH = { 73.3333333333333, 0.367962141447719 }, Flags = { Linear = true } },
				[74] = { 0.367962141447719, LH = { 73.6666666666667, 0.367962141447719 }, RH = { 74.3333333333333, 0.367990571214822 }, Flags = { Linear = true } },
				[75] = { 0.368047430749029, LH = { 74.6666666666667, 0.368019000981926 }, RH = { 75.3333333333333, 0.367848422379305 }, Flags = { Linear = true } },
				[76] = { 0.367450405639859, LH = { 75.6666666666667, 0.367649414009582 }, RH = { 76.3333333333333, 0.3674617775467 }, Flags = { Linear = true } },
				[77] = { 0.367484521360383, LH = { 76.6666666666667, 0.367473149453541 }, RH = { 77.3333333333333, 0.367484521360383 }, Flags = { Linear = true } },
				[78] = { 0.367484521360383, LH = { 77.6666666666667, 0.367484521360383 }, RH = { 78.3333333333333, 0.367495893267224 }, Flags = { Linear = true } },
				[79] = { 0.367518637080907, LH = { 78.6666666666667, 0.367507265174065 }, RH = { 79.3333333333333, 0.367518637080907 }, Flags = { Linear = true } },
				[80] = { 0.367518637080907, LH = { 79.6666666666667, 0.367518637080907 }, RH = { 80.3333333333333, 0.367348058478287 }, Flags = { Linear = true } },
				[81] = { 0.367006901273046, LH = { 80.6666666666667, 0.367177479875666 }, RH = { 81.3333333333333, 0.366995529366205 }, Flags = { Linear = true } },
				[82] = { 0.366972785552522, LH = { 81.6666666666667, 0.366984157459364 }, RH = { 82.3333333333333, 0.366921611971736 }, Flags = { Linear = true } },
				[83] = { 0.366819264810164, LH = { 82.6666666666667, 0.36687043839095 }, RH = { 83.3333333333333, 0.366819264810164 }, Flags = { Linear = true } },
				[84] = { 0.366819264810164, LH = { 83.6666666666667, 0.366819264810164 }, RH = { 84.3333333333333, 0.366745347415696 }, Flags = { Linear = true } },
				[85] = { 0.366597512626758, LH = { 84.6666666666667, 0.366671430021227 }, RH = { 85.3333333333333, 0.366404190210455 }, Flags = { Linear = true } },
				[86] = { 0.36601754537785, LH = { 85.6666666666667, 0.366210867794153 }, RH = { 86.3333333333333, 0.365977743703905 }, Flags = { Linear = true } },
				[87] = { 0.365898140356016, LH = { 86.6666666666667, 0.36593794202996 }, RH = { 87.3333333333333, 0.365898140356016 }, Flags = { Linear = true } },
				[88] = { 0.365898140356016, LH = { 87.6666666666667, 0.365898140356016 }, RH = { 88.3333333333333, 0.365898140356016 }, Flags = { Linear = true } },
				[89] = { 0.365898140356016, LH = { 88.6666666666667, 0.365898140356016 }, RH = { 89.3333333333333, 0.365886768449174 }, Flags = { Linear = true } },
				[90] = { 0.365864024635492, LH = { 89.6666666666667, 0.365875396542333 }, RH = { 90.3333333333333, 0.365670702219189 }, Flags = { Linear = true } },
				[91] = { 0.365284057386583, LH = { 90.6666666666667, 0.365477379802886 }, RH = { 91.3333333333333, 0.365244255712639 }, Flags = { Linear = true } },
				[92] = { 0.365164652364749, LH = { 91.6666666666667, 0.365204454038694 }, RH = { 92.3333333333333, 0.365164652364749 }, Flags = { Linear = true } },
				[93] = { 0.365164652364749, LH = { 92.6666666666667, 0.365164652364749 }, RH = { 93.3333333333333, 0.365164652364749 }, Flags = { Linear = true } },
				[94] = { 0.365164652364749, LH = { 93.6666666666667, 0.365164652364749 }, RH = { 94.3333333333333, 0.365113478783963 }, Flags = { Linear = true } },
				[95] = { 0.365011131622391, LH = { 94.6666666666667, 0.365062305203177 }, RH = { 95.3333333333333, 0.364977015901867 }, Flags = { Linear = true } },
				[96] = { 0.364908784460819, LH = { 95.6666666666667, 0.364942900181343 }, RH = { 96.3333333333333, 0.364977015901867 }, Flags = { Linear = true } },
				[97] = { 0.365113478783963, LH = { 96.6666666666667, 0.365045247342915 }, RH = { 97.3333333333333, 0.365090734970281 }, Flags = { Linear = true } },
				[98] = { 0.365045247342915, LH = { 97.6666666666667, 0.365067991156598 }, RH = { 98.3333333333333, 0.365045247342915 }, Flags = { Linear = true } },
				[99] = { 0.365045247342915, LH = { 98.6666666666667, 0.365045247342915 }, RH = { 99.3333333333333, 0.364959958041605 }, Flags = { Linear = true } },
				[100] = { 0.364789379438985, LH = { 99.6666666666667, 0.364874668740295 }, RH = { 100.333333333333, 0.364789379438985 }, Flags = { Linear = true } },
				[101] = { 0.364789379438985, LH = { 100.666666666667, 0.364789379438985 }, RH = { 101.333333333333, 0.364789379438985 }, Flags = { Linear = true } },
				[102] = { 0.364789379438985, LH = { 101.666666666667, 0.364789379438985 }, RH = { 102.333333333333, 0.364789379438985 }, Flags = { Linear = true } },
				[103] = { 0.364789379438985, LH = { 102.666666666667, 0.364789379438985 }, RH = { 103.333333333333, 0.364795065392406 }, Flags = { Linear = true } },
				[104] = { 0.364806437299247, LH = { 103.666666666667, 0.364800751345827 }, RH = { 104.333333333333, 0.364789379438985 }, Flags = { Linear = true } },
				[105] = { 0.364755263718461, LH = { 104.666666666667, 0.364772321578723 }, RH = { 105.333333333333, 0.364721147997937 }, Flags = { Linear = true } },
				[106] = { 0.364652916556889, LH = { 105.666666666667, 0.364687032277413 }, RH = { 106.333333333333, 0.364635858696627 }, Flags = { Linear = true } },
				[107] = { 0.364601742976103, LH = { 106.666666666667, 0.364618800836365 }, RH = { 107.333333333333, 0.364607428929524 }, Flags = { Linear = true } },
				[108] = { 0.364618800836365, LH = { 107.666666666667, 0.364613114882945 }, RH = { 108.333333333333, 0.364618800836365 }, Flags = { Linear = true } },
				[109] = { 0.364618800836365, LH = { 108.666666666667, 0.364618800836365 }, RH = { 109.333333333333, 0.36448802390769 }, Flags = { Linear = true } },
				[110] = { 0.364226470050339, LH = { 109.666666666667, 0.364357246979014 }, RH = { 110.333333333333, 0.36423215600376 }, Flags = { Linear = true } },
				[111] = { 0.364243527910601, LH = { 110.666666666667, 0.36423784195718 }, RH = { 111.333333333333, 0.364243527910601 }, Flags = { Linear = true } },
				[112] = { 0.364243527910601, LH = { 111.666666666667, 0.364243527910601 }, RH = { 112.333333333333, 0.364243527910601 }, Flags = { Linear = true } },
				[113] = { 0.364243527910601, LH = { 112.666666666667, 0.364243527910601 }, RH = { 113.333333333333, 0.364243527910601 }, Flags = { Linear = true } },
				[114] = { 0.364243527910601, LH = { 113.666666666667, 0.364243527910601 }, RH = { 114.333333333333, 0.36423784195718 }, Flags = { Linear = true } },
				[115] = { 0.364226470050339, LH = { 114.666666666667, 0.36423215600376 }, RH = { 115.333333333333, 0.364169610516132 }, Flags = { Linear = true } },
				[116] = { 0.364055891447719, LH = { 115.666666666667, 0.364112750981926 }, RH = { 116.333333333333, 0.364050205494298 }, Flags = { Linear = true } },
				[117] = { 0.364038833587457, LH = { 116.666666666667, 0.364044519540878 }, RH = { 117.333333333333, 0.363902370705361 }, Flags = { Linear = true } },
				[118] = { 0.363629444941169, LH = { 117.666666666667, 0.363765907823265 }, RH = { 118.333333333333, 0.363629444941169 }, Flags = { Linear = true } },
				[119] = { 0.363629444941169, LH = { 118.666666666667, 0.363629444941169 }, RH = { 119.333333333333, 0.363583957313803 }, Flags = { Linear = true } },
				[120] = { 0.363492982059073, LH = { 119.666666666667, 0.363538469686438 }, RH = { 120.333333333333, 0.363487296105652 }, Flags = { Linear = true } },
				[121] = { 0.363475924198811, LH = { 120.666666666667, 0.363481610152231 }, RH = { 121.333333333333, 0.36347023824539 }, Flags = { Linear = true } },
				[122] = { 0.363458866338549, LH = { 121.666666666667, 0.363464552291969 }, RH = { 122.333333333333, 0.363453180385128 }, Flags = { Linear = true } },
				[123] = { 0.363441808478287, LH = { 122.666666666667, 0.363447494431707 }, RH = { 123.333333333333, 0.363441808478287 }, Flags = { Linear = true } },
				[124] = { 0.363441808478287, LH = { 123.666666666667, 0.363441808478287 }, RH = { 124.333333333333, 0.363248486061984 }, Flags = { Linear = true } },
				[125] = { 0.362861841229378, LH = { 124.666666666667, 0.363055163645681 }, RH = { 125.333333333333, 0.362776551928068 }, Flags = { Linear = true } },
				[126] = { 0.362605973325448, LH = { 125.666666666667, 0.362691262626758 }, RH = { 126.333333333333, 0.362509312117297 }, Flags = { Linear = true } },
				[127] = { 0.362315989700994, LH = { 126.666666666667, 0.362412650909145 }, RH = { 127.333333333333, 0.362310303747573 }, Flags = { Linear = true } },
				[128] = { 0.362298931840732, LH = { 127.666666666667, 0.362304617794153 }, RH = { 128.333333333333, 0.362298931840732 }, Flags = { Linear = true } },
				[129] = { 0.362298931840732, LH = { 128.666666666667, 0.362298931840732 }, RH = { 129.333333333333, 0.362230700399684 }, Flags = { Linear = true } },
				[130] = { 0.362094237517588, LH = { 129.666666666667, 0.362162468958636 }, RH = { 130.333333333333, 0.362037377983381 }, Flags = { Linear = true } },
				[131] = { 0.361923658914968, LH = { 130.666666666667, 0.361980518449175 }, RH = { 131.333333333333, 0.36194071677523 }, Flags = { Linear = true } },
				[132] = { 0.361974832495754, LH = { 131.666666666667, 0.361957774635492 }, RH = { 132.333333333333, 0.361906601054706 }, Flags = { Linear = true } },
				[133] = { 0.36177013817261, LH = { 132.666666666667, 0.361838369613658 }, RH = { 133.333333333333, 0.36177013817261 }, Flags = { Linear = true } },
				[134] = { 0.36177013817261, LH = { 133.666666666667, 0.36177013817261 }, RH = { 134.333333333333, 0.361701906731562 }, Flags = { Linear = true } },
				[135] = { 0.361565443849466, LH = { 134.666666666667, 0.361633675290514 }, RH = { 135.333333333333, 0.361451724781052 }, Flags = { Linear = true } },
				[136] = { 0.361224286644225, LH = { 135.666666666667, 0.361338005712639 }, RH = { 136.333333333333, 0.36117879901686 }, Flags = { Linear = true } },
				[137] = { 0.361087823762129, LH = { 136.666666666667, 0.361133311389495 }, RH = { 137.333333333333, 0.361065079948447 }, Flags = { Linear = true } },
				[138] = { 0.361019592321081, LH = { 137.666666666667, 0.361042336134764 }, RH = { 138.333333333333, 0.361019592321081 }, Flags = { Linear = true } },
				[139] = { 0.361019592321081, LH = { 138.666666666667, 0.361019592321081 }, RH = { 139.333333333333, 0.361013906367661 }, Flags = { Linear = true } },
				[140] = { 0.361002534460819, LH = { 139.666666666667, 0.36100822041424 }, RH = { 140.333333333333, 0.361053708041605 }, Flags = { Linear = true } },
				[141] = { 0.361156055203177, LH = { 140.666666666667, 0.361104881622391 }, RH = { 141.333333333333, 0.361190170923701 }, Flags = { Linear = true } },
				[142] = { 0.361258402364749, LH = { 141.666666666667, 0.361224286644225 }, RH = { 142.333333333333, 0.361286832131853 }, Flags = { Linear = true } },
				[143] = { 0.36134369166606, LH = { 142.666666666667, 0.361315261898956 }, RH = { 143.333333333333, 0.36134369166606 }, Flags = { Linear = true } },
				[144] = { 0.36134369166606, LH = { 143.666666666667, 0.36134369166606 }, RH = { 144.333333333333, 0.361377807386583 }, Flags = { Linear = true } },
				[145] = { 0.361446038827631, LH = { 144.666666666667, 0.361411923107108 }, RH = { 145.333333333333, 0.361457410734473 }, Flags = { Linear = true } },
				[146] = { 0.361480154548156, LH = { 145.666666666667, 0.361468782641314 }, RH = { 146.333333333333, 0.361633675290514 }, Flags = { Linear = true } },
				[147] = { 0.36194071677523, LH = { 146.666666666667, 0.361787196032872 }, RH = { 147.333333333333, 0.361906601054706 }, Flags = { Linear = true } },
				[148] = { 0.361838369613658, LH = { 147.666666666667, 0.361872485334182 }, RH = { 148.333333333333, 0.361838369613658 }, Flags = { Linear = true } },
				[149] = { 0.361838369613658, LH = { 148.666666666667, 0.361838369613658 }, RH = { 149.333333333333, 0.361832683660237 }, Flags = { Linear = true } },
				[150] = { 0.361821311753396, LH = { 149.666666666667, 0.361826997706816 }, RH = { 150.333333333333, 0.361815625799975 }, Flags = { Linear = true } },
				[151] = { 0.361804253893134, LH = { 150.666666666667, 0.361809939846554 }, RH = { 151.333333333333, 0.361815625799975 }, Flags = { Linear = true } },
				[152] = { 0.361838369613658, LH = { 151.666666666667, 0.361826997706816 }, RH = { 152.333333333333, 0.361798567939713 }, Flags = { Linear = true } },
				[153] = { 0.361718964591824, LH = { 152.666666666667, 0.361758766265768 }, RH = { 153.333333333333, 0.361724650545244 }, Flags = { Linear = true } },
				[154] = { 0.361736022452086, LH = { 153.666666666667, 0.361730336498665 }, RH = { 154.333333333333, 0.361724650545244 }, Flags = { Linear = true } },
				[155] = { 0.361701906731562, LH = { 154.666666666667, 0.361713278638403 }, RH = { 155.333333333333, 0.361679162917879 }, Flags = { Linear = true } },
				[156] = { 0.361633675290514, LH = { 155.666666666667, 0.361656419104196 }, RH = { 156.333333333333, 0.361588187663148 }, Flags = { Linear = true } },
				[157] = { 0.361497212408418, LH = { 156.666666666667, 0.361542700035783 }, RH = { 157.333333333333, 0.361491526454997 }, Flags = { Linear = true } },
				[158] = { 0.361480154548156, LH = { 157.666666666667, 0.361485840501576 }, RH = { 158.333333333333, 0.361480154548156 }, Flags = { Linear = true } },
				[159] = { 0.361480154548156, LH = { 158.666666666667, 0.361480154548156 }, RH = { 159.333333333333, 0.361463096687894 }, Flags = { Linear = true } },
				[160] = { 0.36142898096737, LH = { 159.666666666667, 0.361446038827632 }, RH = { 160.333333333333, 0.361411923107108 }, Flags = { Linear = true } },
				[161] = { 0.361377807386583, LH = { 160.666666666667, 0.361394865246845 }, RH = { 161.333333333333, 0.361406237153687 }, Flags = { Linear = true } },
				[162] = { 0.361463096687894, LH = { 161.666666666667, 0.36143466692079 }, RH = { 162.333333333333, 0.361440352874211 }, Flags = { Linear = true } },
				[163] = { 0.361394865246845, LH = { 162.666666666667, 0.361417609060528 }, RH = { 163.333333333333, 0.361394865246845 }, Flags = { Linear = true } },
				[164] = { 0.361394865246845, LH = { 163.666666666667, 0.361394865246845 }, RH = { 164.333333333333, 0.361383493340004 }, Flags = { Linear = true } },
				[165] = { 0.361360749526321, LH = { 164.666666666667, 0.361372121433163 }, RH = { 165.333333333333, 0.361326633805797 }, Flags = { Linear = true } },
				[166] = { 0.361258402364749, LH = { 165.666666666667, 0.361292518085273 }, RH = { 166.333333333333, 0.361258402364749 }, Flags = { Linear = true } },
				[167] = { 0.361258402364749, LH = { 166.666666666667, 0.361258402364749 }, RH = { 167.333333333333, 0.36126408831817 }, Flags = { Linear = true } },
				[168] = { 0.361275460225011, LH = { 167.666666666667, 0.361269774271591 }, RH = { 168.333333333333, 0.361275460225011 }, Flags = { Linear = true } },
				[169] = { 0.361275460225011, LH = { 168.666666666667, 0.361275460225011 }, RH = { 169.333333333333, 0.361298204038694 }, Flags = { Linear = true } },
				[170] = { 0.36134369166606, LH = { 169.666666666667, 0.361320947852377 }, RH = { 170.333333333333, 0.36134937761948 }, Flags = { Linear = true } },
				[171] = { 0.361360749526321, LH = { 170.666666666667, 0.361355063572901 }, RH = { 171.333333333333, 0.361360749526321 }, Flags = { Linear = true } },
				[172] = { 0.361360749526321, LH = { 171.666666666667, 0.361360749526321 }, RH = { 172.333333333333, 0.361286832131853 }, Flags = { Linear = true } },
				[173] = { 0.361138997342915, LH = { 172.666666666667, 0.361212914737384 }, RH = { 173.333333333333, 0.361133311389495 }, Flags = { Linear = true } },
				[174] = { 0.361121939482653, LH = { 173.666666666667, 0.361127625436074 }, RH = { 174.333333333333, 0.361076451855288 }, Flags = { Linear = true } },
				[175] = { 0.360985476600557, LH = { 174.666666666667, 0.361030964227923 }, RH = { 175.333333333333, 0.360939988973192 }, Flags = { Linear = true } },
				[176] = { 0.360849013718461, LH = { 175.666666666667, 0.360894501345827 }, RH = { 176.333333333333, 0.360820583951358 }, Flags = { Linear = true } },
				[177] = { 0.360763724417151, LH = { 176.666666666667, 0.360792154184255 }, RH = { 177.333333333333, 0.360729608696627 }, Flags = { Linear = true } },
				[178] = { 0.360661377255579, LH = { 177.666666666667, 0.360695492976103 }, RH = { 178.333333333333, 0.360661377255579 }, Flags = { Linear = true } },
				[179] = { 0.360661377255579, LH = { 178.666666666667, 0.360661377255579 }, RH = { 179.333333333333, 0.360650005348738 }, Flags = { Linear = true } },
				[180] = { 0.360627261535055, LH = { 179.666666666667, 0.360638633441896 }, RH = { 180.333333333333, 0.360604517721372 }, Flags = { Linear = true } },
				[181] = { 0.360559030094007, LH = { 180.666666666667, 0.36058177390769 }, RH = { 181.333333333333, 0.360291790283236 }, Flags = { Linear = true } },
				[182] = { 0.359757310661693, LH = { 181.666666666667, 0.360024550472464 }, RH = { 182.333333333333, 0.359757310661693 }, Flags = { Linear = true } },
				[183] = { 0.359757310661693, LH = { 182.666666666667, 0.359757310661693 }, RH = { 183.333333333333, 0.359757310661693 }, Flags = { Linear = true } },
				[184] = { 0.359757310661693, LH = { 183.666666666667, 0.359757310661693 }, RH = { 184.333333333333, 0.359660649453541 }, Flags = { Linear = true } },
				[185] = { 0.359467327037238, LH = { 184.666666666667, 0.35956398824539 }, RH = { 185.333333333333, 0.359387723689349 }, Flags = { Linear = true } },
				[186] = { 0.35922851699357, LH = { 185.666666666667, 0.35930812034146 }, RH = { 186.333333333333, 0.359234202946991 }, Flags = { Linear = true } },
				[187] = { 0.359245574853832, LH = { 186.666666666667, 0.359239888900412 }, RH = { 187.333333333333, 0.359296748434618 }, Flags = { Linear = true } },
				[188] = { 0.35939909559619, LH = { 187.666666666667, 0.359347922015404 }, RH = { 188.333333333333, 0.359404781549611 }, Flags = { Linear = true } },
				[189] = { 0.359416153456453, LH = { 188.666666666667, 0.359410467503032 }, RH = { 189.333333333333, 0.359467327037239 }, Flags = { Linear = true } },
				[190] = { 0.359569674198811, LH = { 189.666666666667, 0.359518500618025 }, RH = { 190.333333333333, 0.359558302291969 }, Flags = { Linear = true } },
				[191] = { 0.359535558478287, LH = { 190.666666666667, 0.359546930385128 }, RH = { 191.333333333333, 0.359438897270135 }, Flags = { Linear = true } },
				[192] = { 0.359245574853832, LH = { 191.666666666667, 0.359342236061984 }, RH = { 192.333333333333, 0.359120483878578 }, Flags = { Linear = true } },
				[193] = { 0.358870301928068, LH = { 192.666666666667, 0.358995392903323 }, RH = { 193.333333333333, 0.358870301928068 }, Flags = { Linear = true } },
				[194] = { 0.358870301928068, LH = { 193.666666666667, 0.358870301928068 }, RH = { 194.333333333333, 0.358785012626758 }, Flags = { Linear = true } },
				[195] = { 0.358614434024138, LH = { 194.666666666667, 0.358699723325448 }, RH = { 195.333333333333, 0.358534830676249 }, Flags = { Linear = true } },
				[196] = { 0.35837562398047, LH = { 195.666666666667, 0.358455227328359 }, RH = { 196.333333333333, 0.358358566120208 }, Flags = { Linear = true } },
				[197] = { 0.358324450399684, LH = { 196.666666666667, 0.358341508259946 }, RH = { 197.333333333333, 0.358278962772319 }, Flags = { Linear = true } },
				[198] = { 0.358187987517588, LH = { 197.666666666667, 0.358233475144953 }, RH = { 198.333333333333, 0.358216417284691 }, Flags = { Linear = true } },
				[199] = { 0.358273276818898, LH = { 198.666666666667, 0.358244847051795 }, RH = { 199.333333333333, 0.35829033467916 }, Flags = { Linear = true } },
				[200] = { 0.358324450399684, LH = { 199.666666666667, 0.358307392539422 }, RH = { 200.333333333333, 0.358318764446263 }, Flags = { Linear = true } },
				[201] = { 0.358307392539422, LH = { 200.666666666667, 0.358313078492843 }, RH = { 201.333333333333, 0.357915061753396 }, Flags = { Linear = true } },
				[202] = { 0.357130400181343, LH = { 201.666666666667, 0.35752273096737 }, RH = { 202.333333333333, 0.356499259351649 }, Flags = { Linear = true } },
				[203] = { 0.35523697769226, LH = { 202.666666666667, 0.355868118521955 }, RH = { 203.333333333333, 0.35523697769226 }, Flags = { Linear = true } },
				[204] = { 0.35523697769226, LH = { 203.666666666667, 0.35523697769226 }, RH = { 204.333333333333, 0.35489582048702 }, Flags = { Linear = true } },
				[205] = { 0.35421350607654, LH = { 204.666666666667, 0.35455466328178 }, RH = { 205.333333333333, 0.353661968594735 }, Flags = { Linear = true } },
				[206] = { 0.352558893631125, LH = { 205.666666666667, 0.35311043111293 }, RH = { 206.333333333333, 0.352041471869844 }, Flags = { Linear = true } },
				[207] = { 0.351006628347282, LH = { 206.666666666667, 0.351524050108563 }, RH = { 207.333333333333, 0.350517636353105 }, Flags = { Linear = true } },
				[208] = { 0.349539652364749, LH = { 207.666666666667, 0.350028644358927 }, RH = { 208.333333333333, 0.349539652364749 }, Flags = { Linear = true } },
				[209] = { 0.349539652364749, LH = { 208.666666666667, 0.349539652364749 }, RH = { 209.333333333333, 0.348942627255579 }, Flags = { Linear = true } },
				[210] = { 0.347748577037238, LH = { 209.666666666667, 0.348345602146409 }, RH = { 210.333333333333, 0.34724821313622 }, Flags = { Linear = true } },
				[211] = { 0.346247485334182, LH = { 210.666666666667, 0.346747849235201 }, RH = { 211.333333333333, 0.345934757896045 }, Flags = { Linear = true } },
				[212] = { 0.345309303019771, LH = { 211.666666666667, 0.345622030457908 }, RH = { 212.333333333333, 0.344945402000848 }, Flags = { Linear = true } },
				[213] = { 0.344217599963003, LH = { 212.666666666667, 0.344581500981926 }, RH = { 213.333333333333, 0.344217599963003 }, Flags = { Linear = true } },
				[214] = { 0.344217599963003, LH = { 213.666666666667, 0.344217599963003 }, RH = { 214.333333333333, 0.344069765174065 }, Flags = { Linear = true } },
				[215] = { 0.34377409559619, LH = { 214.666666666667, 0.343921930385128 }, RH = { 215.333333333333, 0.343825269176976 }, Flags = { Linear = true } },
				[216] = { 0.343927616338549, LH = { 215.666666666667, 0.343876442757763 }, RH = { 216.333333333333, 0.344081137080907 }, Flags = { Linear = true } },
				[217] = { 0.344388178565623, LH = { 216.666666666667, 0.344234657823265 }, RH = { 217.333333333333, 0.344922658187166 }, Flags = { Linear = true } },
				[218] = { 0.345991617430252, LH = { 217.666666666667, 0.345457137808709 }, RH = { 218.333333333333, 0.345991617430252 }, Flags = { Linear = true } },
				[219] = { 0.345991617430252, LH = { 218.666666666667, 0.345991617430252 }, RH = { 219.333333333333, 0.346645502073629 }, Flags = { Linear = true } },
				[220] = { 0.347953271360383, LH = { 219.666666666667, 0.347299386717006 }, RH = { 220.333333333333, 0.348533238609291 }, Flags = { Linear = true } },
				[221] = { 0.349693173107108, LH = { 220.666666666667, 0.349113205858199 }, RH = { 221.333333333333, 0.350148049380761 }, Flags = { Linear = true } },
				[222] = { 0.351057801928068, LH = { 221.666666666667, 0.350602925654415 }, RH = { 222.333333333333, 0.351484248434618 }, Flags = { Linear = true } },
				[223] = { 0.352337141447719, LH = { 222.666666666667, 0.351910694941169 }, RH = { 223.333333333333, 0.352331455494298 }, Flags = { Linear = true } },
				[224] = { 0.352320083587457, LH = { 223.666666666667, 0.352325769540878 }, RH = { 224.333333333333, 0.352268910006671 }, Flags = { Linear = true } },
				[225] = { 0.352166562845099, LH = { 224.666666666667, 0.352217736425885 }, RH = { 225.333333333333, 0.352183620705361 }, Flags = { Linear = true } },
				[226] = { 0.352217736425885, LH = { 225.666666666667, 0.352200678565623 }, RH = { 226.333333333333, 0.352507720050339 }, Flags = { Linear = true } },
				[227] = { 0.353087687299247, LH = { 226.666666666667, 0.352797703674793 }, RH = { 227.333333333333, 0.353508447852377 }, Flags = { Linear = true } },
				[228] = { 0.354349968958636, LH = { 227.666666666667, 0.353929208405506 }, RH = { 228.333333333333, 0.354349968958636 }, Flags = { Linear = true } },
				[229] = { 0.354349968958636, LH = { 228.666666666667, 0.354349968958636 }, RH = { 229.333333333333, 0.35438408467916 }, Flags = { Linear = true } },
				[230] = { 0.354452316120208, LH = { 229.666666666667, 0.354418200399684 }, RH = { 230.333333333333, 0.354332911098374 }, Flags = { Linear = true } },
				[231] = { 0.354094101054706, LH = { 230.666666666667, 0.35421350607654 }, RH = { 231.333333333333, 0.35413390272865 }, Flags = { Linear = true } },
				[232] = { 0.35421350607654, LH = { 231.666666666667, 0.354173704402595 }, RH = { 232.333333333333, 0.354514861607835 }, Flags = { Linear = true } },
				[233] = { 0.355117572670426, LH = { 232.666666666667, 0.354816217139131 }, RH = { 233.333333333333, 0.355117572670426 }, Flags = { Linear = true } },
				[234] = { 0.355117572670426, LH = { 233.666666666667, 0.355117572670426 }, RH = { 234.333333333333, 0.355612250618024 }, Flags = { Linear = true } },
				[235] = { 0.356601606513221, LH = { 234.666666666667, 0.356106928565623 }, RH = { 235.333333333333, 0.356806300836365 }, Flags = { Linear = true } },
				[236] = { 0.357215689482653, LH = { 235.666666666667, 0.357010995159509 }, RH = { 236.333333333333, 0.357477243340004 }, Flags = { Linear = true } },
				[237] = { 0.358000351054706, LH = { 236.666666666667, 0.357738797197355 }, RH = { 237.333333333333, 0.358199359424429 }, Flags = { Linear = true } },
				[238] = { 0.358597376163876, LH = { 237.666666666667, 0.358398367794153 }, RH = { 238.333333333333, 0.358597376163876 }, Flags = { Linear = true } },
				[239] = { 0.358597376163876, LH = { 238.666666666667, 0.358597376163876 }, RH = { 239.333333333333, 0.358711095232289 }, Flags = { Linear = true } },
				[240] = { 0.358938533369116, LH = { 239.666666666667, 0.358824814300703 }, RH = { 240.333333333333, 0.358984020996482 }, Flags = { Linear = true } },
				[241] = { 0.359074996251212, LH = { 240.666666666667, 0.359029508623847 }, RH = { 241.333333333333, 0.359069310297792 }, Flags = { Linear = true } },
				[242] = { 0.35905793839095, LH = { 241.666666666667, 0.359063624344371 }, RH = { 242.333333333333, 0.359063624344371 }, Flags = { Linear = true } },
				[243] = { 0.359074996251212, LH = { 242.666666666667, 0.359069310297792 }, RH = { 243.333333333333, 0.359074996251212 }, Flags = { Linear = true } },
				[244] = { 0.359074996251212, LH = { 243.666666666667, 0.359074996251212 }, RH = { 244.333333333333, 0.359103426018316 }, Flags = { Linear = true } },
				[245] = { 0.359160285552522, LH = { 244.666666666667, 0.359131855785419 }, Flags = { Linear = true } }
			}
		},
		Merge5 = Merge {
			Inputs = {
				Background = Input {
					SourceOp = ""Merge4"",
					Source = ""Output"",
				},
				Foreground = Input {
					SourceOp = ""ChrIM"",
					Source = ""Output"",
				},
				PerformDepthMerge = Input { Value = 0, },
			},
			ViewInfo = OperatorInfo { Pos = { 0, 148.5 } },
		},
		Merge4 = Merge {
			Inputs = {
				Background = Input {
					SourceOp = ""Tracker2"",
					Source = ""Output"",
				},
				Foreground = Input {
					SourceOp = ""Renderer3D2"",
					Source = ""Output"",
				},
				PerformDepthMerge = Input { Value = 0, },
			},
			ViewInfo = OperatorInfo { Pos = { 0, 49.5 } },
		},
		Instance_DVE1 = DVE {
			SourceOp = ""DVE1"",
			Inputs = {
				SettingsNest = Input { },
				Rotation = Input { },
				Input = Input {
					SourceOp = ""Blur_1"",
					Source = ""Output"",
				},
				CommentsNest = Input { },
				FrameRenderScriptNest = Input { },
				StartRenderScripts = Input { },
				EndRenderScripts = Input { },
				EffectMask = Input { },
				DVEMask = Input { }
			},
			ViewInfo = OperatorInfo { Pos = { -165, 478.5 } },
		},
		DVE1YRotation = BezierSpline {
			SplineColor = { Red = 128, Green = 255, Blue = 128 },
			CtrlWZoom = false,
			NameSet = true,
			KeyFrames = {
				[31] = { -22.2, RH = { 32.3333333333333, -88.4666666666667 }, Flags = { Linear = true } },
				[35] = { -221, LH = { 33.6668000092671, -200.744554623555 }, RH = { 38.5708873786615, -275.252861346147 } },
				[60] = { -382.2, LH = { 51.6666666666667, -382.2 } }
			}
		},
		Blur_1 = Blur {
			NameSet = true,
			Inputs = {
				MultiplyByMask = Input { Value = 1, },
				Filter = Input { Value = FuID { ""Fast Gaussian"" }, },
				XBlurSize = Input { Value = 1.5, },
				Input = Input {
					SourceOp = ""Transform1"",
					Source = ""Output"",
				},
			},
			ViewInfo = OperatorInfo { Pos = { -275, 478.5 } },
		},
		Merge3 = Merge {
			Inputs = {
				Blend = Input { Value = 0.2, },
				Background = Input {
					SourceOp = ""Merge1"",
					Source = ""Output"",
				},
				Foreground = Input {
					SourceOp = ""Instance_DVE1"",
					Source = ""Output"",
				},
				PerformDepthMerge = Input { Value = 0, },
				EffectMask = Input {
					SourceOp = ""Polygon2"",
					Source = ""Mask"",
				}
			},
			ViewInfo = OperatorInfo { Pos = { 0, 478.5 } },
		},
		Transform1 = Transform {
			Inputs = {
				FlipVert = Input { Value = 1, },
				Input = Input {
					SourceOp = ""BrightnessContrast1_2"",
					Source = ""Output"",
				},
			},
			ViewInfo = OperatorInfo { Pos = { -385, 478.5 } },
		},
		DVE1 = DVE {
			Inputs = {
				MotionBlur = Input { Value = 1, },
				Quality = Input { Value = 6, },
				Center = Input { Value = { 0.337, 0.066 }, },
				Pivot = Input { Value = { 0.538, 0.5 }, },
				RotationOrder = Input { Value = 0, },
				YRotation = Input {
					SourceOp = ""DVE1YRotation"",
					Source = ""Value"",
				},
				AlphaMode = Input { Value = 2, },
				Input = Input {
					SourceOp = ""BrightnessContrast1_2"",
					Source = ""Output"",
				},
			},
			ViewInfo = OperatorInfo { Pos = { -165, 511.5 } },
		},
		BrightnessContrast1_2 = BrightnessContrast {
			Inputs = {
				Blend = Input {
					SourceOp = ""BrightnessContrast1_2Blend"",
					Source = ""Value"",
				},
				ApplyMaskInverted = Input { Value = 1, },
				Gain = Input { Value = 0.25, },
				PreDividePostMultiply = Input { Value = 1, },
				Input = Input {
					SourceOp = ""Text1"",
					Source = ""Output"",
				},
			},
			ViewInfo = OperatorInfo { Pos = { -495, 511.5 } },
		},
		BrightnessContrast1_2Blend = BezierSpline {
			SplineColor = { Red = 205, Green = 205, Blue = 205 },
			CtrlWZoom = false,
			NameSet = true,
			KeyFrames = {
				[31] = { 0, RH = { 31.3333333333333, 0.333333333333333 }, Flags = { Linear = true } },
				[32] = { 1, LH = { 31.6666666666667, 0.666666666666667 }, RH = { 34, 1 }, Flags = { Linear = true } },
				[38] = { 1, LH = { 36, 1 }, RH = { 38.3333333333333, 0.666666666666667 }, Flags = { Linear = true } },
				[39] = { 0, LH = { 38.6666666666667, 0.333333333333333 }, Flags = { Linear = true } }
			}
		},
		Merge1_1 = Merge {
			Inputs = {
				Background = Input {
					SourceOp = ""Merge3"",
					Source = ""Output"",
				},
				Foreground = Input {
					SourceOp = ""DVE1"",
					Source = ""Output"",
				},
				PerformDepthMerge = Input { Value = 0, },
				EffectMask = Input {
					SourceOp = ""Polygon1"",
					Source = ""Mask"",
				}
			},
			ViewInfo = OperatorInfo { Pos = { 0, 511.5 } },
		},
		Text1 = TextPlus {
			Inputs = {
				GlobalOut = Input { Value = 245, },
				Width = Input { Value = 854, },
				Height = Input { Value = 458, },
				[""Gamut.SLogVersion""] = Input { Value = FuID { ""SLog2"" }, },
				LayoutRotation = Input { Value = 1, },
				TransformRotation = Input { Value = 1, },
				Red1 = Input { Value = 0.756, },
				Green1 = Input { Value = 0.718170940876007, },
				Blue1 = Input { Value = 0.684425115585327, },
				Softness1 = Input { Value = 1, },
				StyledText = Input { Value = ""JustCropIt"", },
				Font = Input { Value = ""Helvetica Neue"", },
				Style = Input { Value = ""Bold"", },
				Size = Input { Value = 0.04, },
				VerticalTopCenterBottom = Input { Value = 1, },
				VerticalJustificationNew = Input { Value = 3, },
				HorizontalJustificationNew = Input { Value = 3, },
				ManualFontPlacement = Input {
					Value = StyledText {
						Array = {
							{ 201, 0, 0, Value = 0.004 },
							{ 201, 1, 1, Value = 0.004 },
							{ 201, 2, 2, Value = 0.004 },
							{ 201, 3, 3, Value = 0.004 },
							{ 201, 4, 4, Value = 0.004 },
							{ 201, 5, 5, Value = 0.004 },
							{ 201, 6, 6, Value = 0.004 },
							{ 201, 7, 7, Value = 0.004 },
							{ 201, 8, 8, Value = 0.004 },
							{ 201, 9, 9, Value = 0.004 }
						}
					},
				},
			},
			ViewInfo = OperatorInfo { Pos = { -605, 511.5 } },
		},
		Instance_Tracker2 = Tracker {
			Trackers = {
				{
					PatternTime = 230,
					PatternX = 0.357140333752901,
					PatternY = 0.709383331687568
				}
			},
			SourceOp = ""Tracker2"",
			Inputs = {
				SettingsNest = Input { },
				MotionBlur = Input { Value = 1, },
				Input = Input {
					SourceOp = ""Merge1_1"",
					Source = ""Output"",
				},
				Foreground = Input {
					SourceOp = ""Merge1_1"",
					Source = ""Output"",
				},
				Merge = Input { },
				MatchMoveSettings = Input { },
				CommentsNest = Input { Value = 0, },
				FrameRenderScriptNest = Input { Value = 0, },
				StartRenderScripts = Input { },
				EndRenderScripts = Input { },
				EffectMask = Input { }
			},
			ViewInfo = OperatorInfo { Pos = { 0, 643.5 } },
		},
		UnsharpMask1 = UnsharpMask {
			Inputs = {
				Input = Input {
					SourceOp = ""Instance_Tracker2"",
					Source = ""Output"",
				},
			},
			ViewInfo = OperatorInfo { Pos = { 0, 676.5 } },
		},
		BrightnessContrast1_1 = BrightnessContrast {
			Inputs = {
				ApplyMaskInverted = Input { Value = 1, },
				Gain = Input { Value = 1.25, },
				Saturation = Input { Value = 1.15, },
				Input = Input {
					SourceOp = ""UnsharpMask1"",
					Source = ""Output"",
				},
			},
			ViewInfo = OperatorInfo { Pos = { 0, 709.5 } },
		},
		Polygon1 = PolylineMask {
			DrawMode = ""InsertAndModify"",
			DrawMode2 = ""InsertAndModify"",
			Inputs = {
				Level = Input {
					SourceOp = ""Polygon1Level"",
					Source = ""Value"",
				},
				Filter = Input { Value = FuID { ""Fast Gaussian"" }, },
				BorderWidth = Input {
					SourceOp = ""Polygon1BorderWidth"",
					Source = ""Value"",
				},
				Invert = Input { Value = 1, },
				MaskWidth = Input { Value = 1080, },
				MaskHeight = Input { Value = 1080, },
				PixelAspect = Input { Value = { 1, 1 }, },
				UseFrameFormatSettings = Input { Value = 1, },
				ClippingMode = Input { Value = FuID { ""None"" }, },
				Polyline = Input {
					SourceOp = ""Polygon1Polyline"",
					Source = ""Value"",
				},
				Polyline2 = Input {
					Value = Polyline {
					},
					Disabled = true,
				},
			},
			ViewInfo = OperatorInfo { Pos = { 165, 511.5 } },
		},
		Polygon1Level = BezierSpline {
			SplineColor = { Red = 130, Green = 246, Blue = 132 },
			CtrlWZoom = false,
			NameSet = true,
			KeyFrames = {
				[32] = { 1, RH = { 32.3333333333333, 1 }, Flags = { Linear = true } },
				[33] = { 1, LH = { 32.6666666666667, 1 }, Flags = { Linear = true } }
			}
		},
		Polygon1BorderWidth = BezierSpline {
			SplineColor = { Red = 16, Green = 35, Blue = 248 },
			CtrlWZoom = false,
			NameSet = true,
			KeyFrames = {
				[32] = { 0, RH = { 32.3333333333333, -0.0666666666666667 }, Flags = { Linear = true } },
				[33] = { -0.2, LH = { 32.6666666666667, -0.133333333333333 }, Flags = { Linear = true } }
			}
		},
		Polygon1Polyline = BezierSpline {
			SplineColor = { Red = 173, Green = 255, Blue = 47 },
			CtrlWZoom = false,
			NameSet = true,
			KeyFrames = {
				[27] = { 0, RH = { 27.3333333333333, 0.333333333333333 }, Flags = { Linear = true, LockedY = true }, Value = Polyline {
						Closed = true,
						Points = {
							{ Linear = true, X = -0.312670671764063, Y = -0.248216106014271, LX = 0.0222100855634444, LY = 1.85037170770859e-17, RX = -0.000728199526670322, RY = -0.0971797485558953 },
							{ Linear = true, X = -0.314855270344074, Y = -0.539755351681957, LX = 0.000728199526670322, LY = 0.0971797485558953, RX = 0.013686808217853, RY = -0.00154823747239297 },
							{ Linear = true, X = -0.273794845690515, Y = -0.544400064099136, LX = -0.013686808217853, LY = 0.00154823747239297, RX = 0.0103437761622672, RY = -0.00117007717252719 },
							{ Linear = true, X = -0.242763517203714, Y = -0.547910295616718, LX = -0.0103437761622672, LY = 0.00117007717252719, RX = -0.00109229929000546, RY = 0.0998980632008155 },
							{ Linear = true, X = -0.24604041507373, Y = -0.248216106014271, LX = 0.00109229929000546, LY = -0.0998980632008155, RX = -0.0222100855634444, RY = -1.85037170770859e-17 }
						}
					} },
				[28] = { 1, LH = { 27.6666666666667, 0.666666666666667 }, RH = { 28.3333333333333, 1.33333333333333 }, Flags = { Linear = true, LockedY = true }, Value = Polyline {
						Closed = true,
						Points = {
							{ Linear = true, X = -0.289541234298198, Y = -0.213302752293578, LX = 0.0251683961405425, LY = 0.0111903952882546, RX = -0.000242733175556805, RY = -0.0901953221939183 },
							{ Linear = true, X = -0.290269433824868, Y = -0.483888718875333, LX = 0.000242733175556805, LY = 0.0901953221939183, RX = 0.0153195643486945, RY = -0.00363665052816485 },
							{ Linear = true, X = -0.244310740778785, Y = -0.494798670459828, LX = -0.0153195643486945, LY = 0.00363665052816485, RX = 0.0111383517869934, RY = 0.00546409414013734 },
							{ Linear = true, X = -0.210895685417804, Y = -0.478406388039416, LX = -0.0111383517869934, LY = -0.00546409414013734, RX = -0.00104678681958858, RY = 0.0995582738702005 },
							{ Linear = true, X = -0.21403604587657, Y = -0.179731566428814, LX = 0.00104678681958858, LY = -0.0995582738702005, RX = -0.0251683961405425, RY = -0.0111903952882546 }
						}
					} },
				[29] = { 2, LH = { 28.6666666666667, 1.66666666666667 }, RH = { 29.3333333333333, 2.33333333333333 }, Flags = { Linear = true, LockedY = true }, Value = Polyline {
						Closed = true,
						Points = {
							{ Linear = true, X = -0.263134898962316, Y = -0.193679918450561, LX = 0.0201165119242672, LY = 0.0101483746743686, RX = 0.000242733175556731, RY = -0.0930079567136768 },
							{ Linear = true, X = -0.262406699435645, Y = -0.472703788591591, LX = -0.000242733175556731, LY = 0.0930079567136768, RX = 0.0181458068293407, RY = 0.00037061563260878 },
							{ Linear = true, X = -0.207969278947623, Y = -0.471591941693765, LX = -0.0181458068293407, LY = -0.00037061563260878, RX = 0.0027292462685415, RY = 0.00356723121585114 },
							{ Linear = true, X = -0.199781540141999, Y = -0.460890248046211, LX = -0.0027292462685415, LY = -0.00356723121585114, RX = -0.00100127434917169, RY = 0.0992184845395855 },
							{ Linear = true, X = -0.202785363189514, Y = -0.163234794427455, LX = 0.00100127434917169, LY = -0.0992184845395855, RX = -0.0201165119242672, RY = -0.0101483746743686 }
						}
					} },
				[30] = { 3, LH = { 29.6666666666667, 2.66666666666667 }, RH = { 30.3333333333333, 3.33333333333333 }, Flags = { Linear = true, LockedY = true }, Value = Polyline {
						Closed = true,
						Points = {
							{ Linear = true, X = -0.249836155106499, Y = -0.174057084607543, LX = 0.022346622974695, LY = 0.00910635406048252, RX = 0.000227699026169786, RY = -0.0888226906036242 },
							{ Linear = true, X = -0.24915305802799, Y = -0.440525156418416, LX = -0.000227699026169786, LY = 0.0888226906036242, RX = 0.00560004743224102, RY = -0.00635223250566108 },
							{ Linear = true, X = -0.232352915731267, Y = -0.459581853935399, LX = -0.00560004743224102, LY = 0.00635223250566108, RX = 0.017474638395039, RY = 0.00540258196079737 },
							{ Linear = true, X = -0.17992900054615, Y = -0.443374108053007, LX = -0.017474638395039, LY = -0.00540258196079737, RX = -0.0009557618787548, RY = 0.0988786952089705 },
							{ Linear = true, X = -0.182796286182414, Y = -0.146738022426096, LX = 0.0009557618787548, LY = -0.0988786952089705, RX = -0.022346622974695, RY = -0.00910635406048252 }
						}
					} },
				[31] = { 4, LH = { 30.6666666666667, 3.66666666666667 }, RH = { 31.3333333333333, 4.33333333333333 }, Flags = { Linear = true, LockedY = true }, Value = Polyline {
						Closed = true,
						Points = {
							{ Linear = true, X = -0.233260513380666, Y = -0.14118246687054, LX = 0.0216639359184417, LY = 0.00217465171593613, RX = -0.000250250250250254, RY = -0.0960336431860112 },
							{ Linear = true, X = -0.234011264131417, Y = -0.429283396428574, LX = 0.000250250250250254, LY = 0.0960336431860112, RX = 0.0141085559407496, RY = -0.00318827508695887 },
							{ Linear = true, X = -0.191685596309168, Y = -0.438848221689451, LX = -0.0141085559407496, LY = 0.00318827508695887, RX = 0.00921638013678077, RY = 0.00565682436247518 },
							{ Linear = true, X = -0.164036455898826, Y = -0.421877748602025, LX = -0.00921638013678077, LY = -0.00565682436247518, RX = -0.00141074990883842, RY = 0.095739745626431 },
							{ Linear = true, X = -0.168268705625341, Y = -0.134658511722732, LX = 0.00141074990883842, LY = -0.095739745626431, RX = -0.0216639359184417, RY = -0.00217465171593613 }
						}
					} },
				[32] = { 5, LH = { 31.6666666666667, 4.66666666666667 }, RH = { 32.3333333333333, 5.33333333333333 }, Flags = { Linear = true, LockedY = true }, Value = Polyline {
						Closed = true,
						Points = {
							{ Linear = true, X = -0.20794647733479, Y = -0.124617737003058, LX = 0.0151556526488258, LY = -0.000679578661230011, RX = -0.000728199526670322, RY = -0.0971797485558953 },
							{ Linear = true, X = -0.210131075914801, Y = -0.416156982670744, LX = 0.000728199526670322, LY = 0.0971797485558953, RX = 0.00978954082632963, RY = -0.000967648420245585 },
							{ Linear = true, X = -0.180762453435812, Y = -0.419059927931481, LX = -0.00978954082632963, LY = 0.000967648420245585, RX = 0.00695904828708746, RY = 0.000201755184478625 },
							{ Linear = true, X = -0.159885308574549, Y = -0.418454662378045, LX = -0.00695904828708746, LY = -0.000201755184478625, RX = -0.000864736937921014, RY = 0.0972660631304323 },
							{ Linear = true, X = -0.162479519388312, Y = -0.126656472986748, LX = 0.000864736937921014, LY = -0.0972660631304323, RX = -0.0151556526488258, RY = 0.000679578661230011 }
						}
					} },
				[33] = { 6, LH = { 32.6666666666667, 5.66666666666667 }, Flags = { Linear = true, LockedY = true }, Value = Polyline {
						Closed = true,
						Points = {
							{ Linear = true, X = -0.202803568177681, Y = -0.110771321780496, LX = 0.0204199283937132, LY = 0.000906104881640076, RX = -0.000728199526670313, RY = -0.0939140615953169 },
							{ Linear = true, X = -0.204988166757692, Y = -0.392513506566447, LX = 0.000728199526670313, LY = 0.0939140615953169, RX = 0.00850767421534647, RY = -0.00453624729717463 },
							{ Linear = true, X = -0.179465144111652, Y = -0.406122248457971, LX = -0.00850767421534647, LY = 0.00453624729717463, RX = 0.0132094279222909, RY = 0.00336319339162242 },
							{ Linear = true, X = -0.139836860344779, Y = -0.396032668283103, LX = -0.0132094279222909, LY = -0.00336319339162242, RX = -0.000568974217253891, RY = 0.0959932203825091 },
							{ Linear = true, X = -0.141543782996541, Y = -0.108053007135576, LX = 0.000568974217253891, LY = -0.0959932203825091, RX = -0.0204199283937132, RY = -0.000906104881640076 }
						}
					} }
			}
		},
		Polygon2 = PolylineMask {
			DrawMode = ""InsertAndModify"",
			DrawMode2 = ""InsertAndModify"",
			Inputs = {
				Filter = Input { Value = FuID { ""Fast Gaussian"" }, },
				Invert = Input { Value = 1, },
				MaskWidth = Input { Value = 1080, },
				MaskHeight = Input { Value = 1080, },
				PixelAspect = Input { Value = { 1, 1 }, },
				UseFrameFormatSettings = Input { Value = 1, },
				ClippingMode = Input { Value = FuID { ""None"" }, },
				Polyline = Input {
					SourceOp = ""Polygon2Polyline"",
					Source = ""Value"",
				},
				Polyline2 = Input {
					Value = Polyline {
					},
					Disabled = true,
				},
			},
			ViewInfo = OperatorInfo { Pos = { 165, 379.5 } },
		},
		Polygon2Polyline = BezierSpline {
			SplineColor = { Red = 173, Green = 255, Blue = 47 },
			CtrlWZoom = false,
			NameSet = true,
			KeyFrames = {
				[59] = { 0, Flags = { Linear = true, LockedY = true }, Value = Polyline {
						Closed = true,
						Points = {
							{ Linear = true, X = -0.111872146118721, Y = -0.545106382978723, LX = 0.0767123287671233, LY = -0.0198581560283688, RX = 0.0709284627092846, RY = 0.0930496453900709 },
							{ Linear = true, X = 0.100913242009132, Y = -0.265957446808511, LX = -0.0709284627092846, LY = -0.0930496453900709, RX = 0.00578386605783865, RY = -0.11290780141844 },
							{ Linear = true, X = 0.118264840182648, Y = -0.60468085106383, LX = -0.00578386605783865, LY = 0.11290780141844, RX = -0.0767123287671233, RY = 0.0198581560283688 }
						}
					} }
			}
		}
	}
}"
7P8C2WXM,Add To Administrative State,shiftdot515,Objective C,Wednesday 28th of February 2024 08:22:19 PM CDT,"Untitled 1.txt
mercantilism /mûr′kən-tē-lĭz″əm, -tĭ-/

I should add about aminstrative state, misunder as what Enlish Rulers intend for the colonies
Estate Law, is to expanded futher, with or wouth the slavery, European Unions would create
to maximize future invest with their false currencies, born not out national debt, but their 
secularist inventions.  Or Mercentile Guilds as commons only under by French and English speaking
Peason, that don't believe any religous christian would desire to be ruled by militant factions.
commonly understood
So what did these precendent, Iranian backed terrorists misunderstand about God.
delete above
So what it is, That an American Court can begin suits for estates, and that haven't even been claimed, preserve future suits to be created by 
And that marriage is in fact a suit, of Christian Origin.
preserve future suits to be be created by future judge, and discovered by,
by lawyers.
Also Basic Law.
perhaps delete above
Even tho I (personel pronoun) will not benefit in my life.  Perhaps at all.
Still the courts can both create, and maintain suits.
By Will of God.
Our Father in Heaven, hallowed by thy name.

Thy is capalilized special adjective in prayer.
be Thy name.
"
VZD8XGfB,Assignment 1 Coding,JustAnotherEntity,C#,Wednesday 28th of February 2024 07:51:16 PM CDT,"using System;
using System.Linq;
using System.Collections.Generic;

namespace NS
{
	public class Program
	{
		private static int[] NACState = new int[9];
		private static List<string> RPSOptions = [""rock"", ""paper"", ""scissors""];
		private static List<List<int>> WinConditions = [
			[0, 1, 2], [3, 4, 5], [6, 7, 8], // Horizontal
 			[0, 3, 6], [1, 4, 7], [2, 5, 8], // Vertical
 			[0, 4, 8], [2, 4, 6] // Diagonal
		];
		private static int NACPlayer = 1;
		private static bool StoppingGame = false;
		private static Random rnd = new Random();
		public static void Main()
		{
			Print(""Welcome to the Game Suite I built"");
			MainLoop();
		}

		private static void MainLoop()
		{
			Print(""Please pick a game to play"");
			Print(""Your options are (N)aughts and Crosses, (R)ock, Paper, Scissors or (E)xit"");
			string input = ReadLine();
			switch (input.ToLower())
			{
				case ""n"":
					NACState = new int[9];
					Print(""Wonderful, let us start the game!"");
					Print(""Ok, we are are going to play Naught and Crosses"");
					Print(""Player 1 is Noughts and Player 2 is Crosses"");
					Print(""Here is the current state of the board:"");
					Print(""---\n---\n---"");
					Print(""To place a mark on the board, you will type the position of the place where you want your mark to go"");
					Print(""This is how the numbers are layed out:"");
					Print(""123\n456\n789"");
					NACLoop();
					StoppingGame = false;
					break;
				case ""r"":
					Print(""Epic, let us start thy game!"");
					Print(""Okey dokey, we are going to play rock paper scissors!"");
					RPSLoop();
					StoppingGame = false;
					break;
				case ""e"":
					Print(""Thankyou for using my Game Suite!"");
					Environment.Exit(0);
					break;
				default:
					Print(""That is not an accepted value. Please try again."");
					break;
			}

			MainLoop();
		}

		private static void NACLoop()
		{
			Start:
				Print($""Player {NACPlayer}, type the location of where you want your mark to go: (or (E)nd to stop the game and return to the main suite)"");
			string pos = ReadLine();
			int p;
			if (Int32.TryParse(pos, out p))
			{
				if (p > 9 || p < 1)
				{
					Print(""Oh dear, the number is out of the range"");
					Print(""It must be bewteen 1 and 9"");
					Print(""Please try again"");
					goto Start;
				}
				else if (NACState[p - 1] != 0)
				{
					Print(""Oh dear, that place is already occupied"");
					Print(""The position must be one that is not already taken"");
					Print(""Please try again"");
					goto Start;
				}
				else
				{
					NACState[p - 1] = NACPlayer == 1 ? 1 : 2;
					NACPrintBoard();
				}
			}
			else if (pos.ToLower() == ""e"")
				goto Stop;
			else
			{
				Print(""Oh dear, that isn't a number"");
				Print(""Please try again"");
				goto Start;
			}

			string res = NACCheckBoard();
			if (res != "" "")
			{
				Print($""Player {res} has won!"");
				Print(""Restarting game"");
				goto ResetGame;
			}
			else if (NACState.ToList().All(x => x != 0))
			{
				Print(""There has been a tie"");
				Print(""Neither player wins!"");
				Print(""Restarting game"");
				goto ResetGame;
			}

			NACPlayer = NACPlayer == 1 ? 2 : 1;
			NACLoop();
			Stop:
				if (!StoppingGame)
				{
					Print(""Stopped game"");
					StoppingGame = true;
				}

			return;
			ResetGame:
				NACState = new int[9];
			NACPlayer = 1;
			NACLoop();
		}

		private static void NACPrintBoard()
		{
			string str = """";
			for (int i = 1; i < NACState.Length + 1; i++)
			{
				str += (NACState[i - 1] == 0 ? ""-"" : NACState[i - 1] == 1 ? ""X"" : ""O"");
				if (i % 3 == 0)
					str += ""\n"";
			}

			Print(str);
		}

		private static string NACCheckBoard()
		{
			foreach (List<int> WinCondition in WinConditions)
			{
				int a = WinCondition[0], b = WinCondition[1], c = WinCondition[2];
				if (NACState[a] != 0 && NACState[a] == NACState[b] && NACState[a] == NACState[c])
					return NACState[a].ToString();
			}

			return "" "";
		}

		private static void RPSLoop()
		{
			Start:
				Print(""Here are your options: (R)ock, (P)aper, (S)cissors or (E)nd to stop the game and return to the main suite"");
			Print(""Type your item:"");
			string input = ReadLine();
			string opt;
			switch (input.ToLower())
			{
				case ""r"":
					opt = ""rock"";
					break;
				case ""p"":
					opt = ""paper"";
					break;
				case ""s"":
					opt = ""scissors"";
					break;
				case ""e"":
					goto Stop;
				default:
					Print(""Oh dear, that isn't an accepted item"");
					Print(""Please try again"");
					goto Start;
			}

			Print($""You have picked {opt}!"");
			int computerDiscision = PickRPS();
			Print($""The computer has picked {RPSOptions[computerDiscision - 1]}!"");
			Print($""You {GetRPSResult(RPSOptions.IndexOf(opt), computerDiscision)}!"");
			RPSLoop();
			Stop:
				if (!StoppingGame)
				{
					Print(""Stopped game"");
					StoppingGame = true;
				}

			return;
		}

		private static string GetRPSResult(int player, int computer)
		{
			if (player - computer == 0)
				return ""tied"";
			else if (player - computer == 1 || player - computer == -2)
				return ""lose"";
			else
				return ""win"";
		}

		private static int PickRPS() => rnd.Next(1, 4);
		public static void Print(object obj) => Console.WriteLine(obj.ToString());
		public static string ReadLine() => Console.ReadLine();
	}
}"
u2e7kbuT,DOF2.inc,goiaba123z,Pawn,Wednesday 28th of February 2024 07:48:52 PM CDT,"#if defined _dof2_included
	#endinput
#endif
#define _dof2_included

#include <a_samp>

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/

/*
 * This is a new version of the INI script Double-O-Files.
 * However, it's has completely been rewritten and has now a much better performance.
 * There is also the support for sections in the INI file. (But there is no support for comments.)
 * Double-O-Files 2 is compatible with DUDB, DINI, Double-O-Files and possibly y_ini since it
 * can handle sections and entry of the format ""key = value"", not only ""key=value"".
 * The number of spaces between the equal sign and key and value can actually be arbitrary.
 * I've added some comments below. You may see that I've mentioned the big-O-notation,
 * 'n' always Entries.Count.
 * Double-O-Files 2 should also be useful for Russian letter because I'm using
 * the functions fgetchar and fputchar to write and read the files.
 *
 * There is another new feature which has been inspired by ZCMD and y_ini:
 * The OnParseFile callbacks. To learn more about it, read the description in
 * the SA-MP forums if you haven't already.
 * THE END
 */

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/

/*
native DOF2_SetFile(file[]);
native DOF2_LoadFile();
native DOF2_SaveFile();
native DOF2_ParseFile(file[],extraid,bool:callback=true);
native DOF2_ReparseFile(file[],extraid,bool:callback=true);
native DOF2_WriteFile();
native DOF2_PrintFile(comment[]="""");
native DOF2_GetString(file[],key[],tag[]="""");
native DOF2_GetStringEx(file[],key[],result[],size,tag[]="""");
native Float:DOF2_GetFloat(file[],key[]);
native DOF2_GetInt(file[],key[],tag[]="""");
native DOF2_GetHex(file[],key[],tag[]="""");
native DOF2_GetBin(file[],key[],tag[]="""");
native bool:DOF2_GetBool(file[],key[],tag[]="""");
native DOF2_SetString(file[],key[],value[],tag[]="""");
native DOF2_SetFloat(file[],key[],Float:value);
native DOF2_SetInt(file[],key[],value,tag[]="""");
native DOF2_SetHex(file[],key[],value,tag[]="""");
native DOF2_SetBin(file[],key[],value,tag[]="""");
native DOF2_SetBool(file[],key[],bool:value,tag[]="""");
native DOF2_IsSet(file[],key[],tag[]="""");
native DOF2_Unset(file[],key[],tag[]="""");
native DOF2_FileExists(file[]);
native DOF2_RemoveFile(file[]);
native DOF2_CreateFile(file[],password[]="""");
native DOF2_RenameFile(oldfile[],newfile[]);
native DOF2_RenameKey(file[],oldkey[],newkey[],tag[]="""");
native DOF2_CopyFile(filetocopy[],newfile[]);
native DOF2_CheckLogin(file[],password[]);
native DOF2_File(user[]);
native DOF2_ParseInt();
native DOF2_ParseFloat();
native DOF2_ParseBool();
native DOF2_ParseBin();
native DOF2_ParseHex();
native DOF2_SetUTF8(bool:set);
native bool:DOF2_GetUTF8();
native DOF2_GetFile();
native DOF2_MakeBackup(file[]);
native DOF2_RemoveSection (file [], tag []);
native DOF2_SectionExists (file [], tag []);
native DOF2_SortSection (file [], tag [], bool: ignorecase = true, bool: ascending = true);
native DOF2_SortAllSections (file [], bool: ignorecase = true, bool: ascending = true);
native DOF2_SetCaseSensitivity (bool: set);
native DOF2_GetCaseSensitivity ();
*/

#define DOF2_TagExists  DOF2_SectionExists
#define DOF2_RemoveTag  DOF2_RemoveSection

// OnParseFile <Tag><Key>(extraid, value [])
// OnParseFile <><Key>(extraid, value [])
// OnDefaultParseFile (extraid, value [], key [], tag [], file [])

// The arguments of your OnParseFile functions may have arbitrary names but must be an integer followed by a string.
// Function must return a value.
#define OnParseFile<%0><%1>(%2) \
	forward _OnParseFile_%0_%1 (extraid, value []); \
	public _OnParseFile_%0_%1 (extraid, value []) \
	    return __OnParseFile_%0_%1 (extraid, (value [0] == '\1' && value [1] == '\0') ? ("""") : value); \
	stock __OnParseFile_%0_%1 (%2)

// Also here: The argument names may be arbitrary but must be an integer followed by 4 strings.
// Function must return a value.
#define OnDefaultParseFile(%0) \
	forward _OnDefaultParseFile (extraid, value [], key [], tag [], file []); \
	public _OnDefaultParseFile (extraid, value [], key [], tag [], file []) \
	    return __OnDefaultParseFile (extraid, (value [0] == '\1' && value [1] == '\0') ? ("""") : value, key, (tag [0] == '\1' && tag [1] == '\0') ? ("""") : tag, file); \
	stock __OnDefaultParseFile (%0)

#define DOF2_ParseBool() \
	(strval (value) || (value [0] && !strcmp (value, ""true"", true)))

#define DOF2_ParseInt() \
	(strval (value))

#define DOF2_ParseFloat() \
	(floatstr (value))

#define DOF2_ParseBin() \
	(DOF2_strbin (value))

#define DOF2_ParseHex() \
	(DOF2_strhex (value))

#define DOF2_LoadFile() \
	DOF2_ParseFile (CurrentFile, -1, false)

#define DOF2_SaveFile \
	DOF2_WriteFile

#define DOF2_FileExists \
	fexist

#define Sections. \
	Sections_

#define Entries. \
	Entries_

#define DOF2:: \
	DOF2_
	
#if !defined private
	#define private 		static stock
#endif
	
#pragma dynamic 65536

/*
#define MAX_SECTION_TAG        (32)
#define MAX_LINE_SIZE       (128)
#define MAX_SECTIONS            (32)
#define MAX_ENTRIES         (256)
#define MAX_FILE_SIZE       (64)

#define USER_FILE_PATH 		""Users/%s.ini""
*/

// The maximum length of the name of a tag.
#if !defined MAX_SECTION_TAG
	#define MAX_SECTION_TAG    	(32)
#endif

// The maximum length of a line (including key and value).
#if !defined MAX_LINE_SIZE
	#define MAX_LINE_SIZE       (128)
#endif

// The maximum number of sections which can be handled. Be careful: MUST NOT be higher than 255.
#if !defined MAX_SECTIONS
	#define MAX_SECTIONS       	(32)
#endif

// The maximum number of entries which can be loaded into the cache.
#if !defined MAX_ENTRIES
	#define MAX_ENTRIES         (256)
#endif

// The maximum length of the name of a file.
#if !defined MAX_FILE_SIZE
	#define MAX_FILE_SIZE       (64)
#endif

/*
If PACK_CONTENT == true tag names and lines (key + value) will get stored in cache as packed strings.
The result is less memory usage. However, you won't be able to use special characters like russian or chinese ones.
*/
#if !defined PACK_CONTENT
	#define PACK_CONTENT        (false)
#endif

#define INVALID_ENTRY           (-1)
#define INVALID_SECTION         (-1)

// Do you want to emulate DUDB?
#if !defined DUDB_CONVERT && 0 // Change to 1 to enable.
	#define DUDB_CONVERT
#endif

#if !defined USER_FILE_PATH
	#if defined DUDB_CONVERT
		#define USER_FILE_PATH 	""%s.dudb.sav""
	#else
	    #define USER_FILE_PATH 	""%s.ini""
	#endif
#endif

#if !defined USER_PW_HASH_KEY
    #if defined DUDB_CONVERT
		#define USER_PW_HASH_KEY ""password_hash""
	#else
	    #define USER_PW_HASH_KEY ""password""
	#endif
#endif
	

// Do you want to emulate DINI?
#if !defined DINI_CONVERT && 0 // Change to 1 to enable.
	#define DINI_CONVERT
#endif

/*
#if MAX_SECTIONS >= 256
	#error MAX_SECTIONS must not be greater than 255.
#endif
*/

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/

private
	bool: UseUTF8 = PACK_CONTENT,
	bool: CaseSensitive = false,
	CurrentFile [MAX_FILE_SIZE],
	bool: FileChanged,
	Sections.FirstEntry [MAX_SECTIONS] = {INVALID_ENTRY, ...},
	Sections.LastEntry [MAX_SECTIONS] = {INVALID_ENTRY, ...},
	Sections.Count,
#if PACK_CONTENT == true
	Sections.Tag [MAX_SECTIONS][MAX_SECTION_TAG char],
	Entries.Line [MAX_ENTRIES][MAX_LINE_SIZE char],
	Entries.Tag [MAX_ENTRIES][MAX_SECTION_TAG char],
#else
	Sections.Tag [MAX_SECTIONS][MAX_SECTION_TAG],
    Entries.Line [MAX_ENTRIES][MAX_LINE_SIZE],
	Entries.Tag [MAX_ENTRIES][MAX_SECTION_TAG],
#endif
#if MAX_SECTIONS >= 256
	Entries.Section [MAX_ENTRIES],
#else
	Entries.Section [MAX_ENTRIES char],
#endif
	Entries.NextEntry [MAX_ENTRIES] = {INVALID_ENTRY, ...},
	Entries.PreviousEntry [MAX_ENTRIES] = {INVALID_ENTRY, ...},
	Entries.Count,
	SortedEntryList [MAX_ENTRIES][2]; // Index 0: Hashcode, Index 1: EntryID

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/

DOF2::Exit ()
	DOF2::WriteFile ();

stock DOF2::SetUTF8 (bool: set)
	UseUTF8 = set;

stock bool: DOF2::GetUTF8 ()
	return UseUTF8;

stock bool: DOF2::SetCaseSensitivity (bool: set)
	CaseSensitive = set;
	
stock bool: DOF2::GetCaseSensitivity ()
	return CaseSensitive;

stock DOF2::SetFile (const file [])
	DOF2::strcpy (CurrentFile, file);

stock DOF2::GetFile ()
	return CurrentFile;

stock DOF2::CreateFile (const file [], const password [] = """")
{
	if (!DOF2::FileExists (file))
	{
        new File: f = fopen (file, io_append);
        
		if (fclose (f))
		{
			if (password [0])
		    	return DOF2::SetInt (file, USER_PW_HASH_KEY, DOF2::num_hash (password));
			return 1;
		}
	}
	return 0;
}

stock DOF2::RenameFile (const oldfile [], const newfile [])
{
	if (!DOF2::FileExists (newfile))
	{
	    // If 'CurrentFile' is 'oldfile', write it if it has been changed.
		if (CurrentFile [0] && !strcmp (CurrentFile, oldfile) && FileChanged)
			DOF2::WriteFile ();
		else if (!DOF2::ParseFile (oldfile, -1, false)) // Otherwise parse 'oldfile'.
		    return 0;
		    
		DOF2::SetFile (newfile);
		if (DOF2::WriteFile ())
		    return fremove (oldfile);
	}
	return 0;
}

stock DOF2::CopyFile (const filetocopy [], const newfile [])
{
    if (!DOF2::FileExists (newfile))
	{
	    if (CurrentFile [0] && !strcmp (CurrentFile, filetocopy) && FileChanged)
			DOF2::WriteFile ();
		else if(!DOF2::ParseFile (filetocopy, -1, false))
		    return 0;
		    
		DOF2::SetFile (newfile);
		return DOF2::WriteFile ();
	}
	return 0;
}

stock DOF2::RemoveFile (const file [])
{
	if (file [0])
	{
	    if (CurrentFile [0] && !strcmp (CurrentFile, file))
	        CurrentFile [0] = '\0';
		return fremove (file);
	}
	return 0;
}

stock DOF2::MakeBackup (const file [])
{
    new
        year,
		month,
		day,
		hour,
		minute,
		second,
		backupfile [MAX_FILE_SIZE];

    getdate (year, month, day);
    gettime (hour, minute, second);
    format (backupfile, sizeof (backupfile), ""%s.%02d_%02d_%02d.%02d_%02d_%02d_%02d.bak"", CurrentFile, month, day, year, hour, minute, second, GetTickCount ());
    return DOF2::CopyFile (CurrentFile, backupfile);
}

stock bool: DOF2::SectionExists (const file [], const tag [])
{
    if (file [0]) // You can't remove the empty Sections.
	{
	    if (!tag [0])
	        return true; // Emptry section always exists. In every file.

        if (!CurrentFile [0] || strcmp (CurrentFile, file)) // No file in buffer or the file you want to read from is not the file in the buffer.
	    	if (!DOF2::ParseFile (file, -1, false))
	    	    return false;

	#if PACK_CONTENT == true
		new buf [MAX_SECTION_TAG];
	#endif
	
    	for (new i = 1; i < Sections.Count; ++i)
    	{
    	#if PACK_CONTENT == true
    	    strunpack (buf, Sections.Tag [i]);
	        if (!strcmp (buf, tag, !CaseSensitive))
		        return true;
		#else
		    if (!strcmp (Sections.Tag [i], tag, !CaseSensitive))
		        return true;
		#endif
    	}
	}
	return false;
}

stock DOF2::RemoveSection (const file [], const tag [])
{
	// Removes tag 'tag' with all it's entries.
	if (file [0] && tag [0]) // You can't remove the empty Sections.
	{
    	if (!CurrentFile [0] || strcmp (CurrentFile, file)) // No file in buffer or the file you want to read from is not the file in the buffer.
	    	if (!DOF2::ParseFile (file, -1, false))
	    	    return 0;

		new
		#if PACK_CONTENT == true
		    line [MAX_LINE_SIZE],
		    buf [MAX_SECTION_TAG],
		#endif
			section = INVALID_SECTION,
			entry,
			key [MAX_KEY_SIZE];

	    for (new i = 1; i < Sections.Count; ++i)
	    {
		#if PACK_CONTENT == true
	        strunpack (buf, Sections.Tag [i]);
	        if (!strcmp (buf, tag, !CaseSensitive))
	        {
	            section = i;
	            break;
	        }
		#else
		    if (!strcmp (Sections.Tag [i], tag, !CaseSensitive))
	        {
	            section = i;
	            break;
	        }
		#endif
	    }

		if (section != INVALID_SECTION)
		{
			entry = Sections.FirstEntry [section];
			while (entry != INVALID_ENTRY)
			{
			    // Remove all entries under the current Sections.
		    #if PACK_CONTENT == true
		    	strunpack (line, Entries.Line [entry]);
			    DOF2::ParseLine (line, key, buf);
			#else
			    DOF2::ParseLine (Entries.Line [entry], key, buf);
			#endif
			    DOF2::Unset (file, key, tag);
				entry = Entries.NextEntry [entry];
			}

		    // Move the last tag to the position of the current tag. Creates a little mess.
		    --Sections.Count;
		    Sections.Tag [section] = Sections.Tag [Sections.Count];
		    Sections.FirstEntry [section] = Sections.FirstEntry [Sections.Count];
		    Sections.LastEntry [section] = Sections.LastEntry [Sections.Count];

			// Adjust the tag IDs of the entries.
		    entry = Sections.FirstEntry [section];
		    while (entry != INVALID_ENTRY)
		    {
			#if MAX_SECTIONS >= 256
				Entries.Section [entry] = section;
			#else
		        Entries.Section {entry} = section;
			#endif
		        entry = Entries.NextEntry [entry];
		    }
		    FileChanged = true;
		    return 1;
		}
	}
	return 0;
}

private DOF2::SearchEntry (const key [], const tag [], keybuf [], valbuf [], &pos, keybufsize = sizeof (keybuf), valbufsize = sizeof (valbuf))
{
	if (key [0] && Entries.Count)
	{
	    new
	        entry = INVALID_ENTRY,
	        l,
	        m,
	        r,
	        h,
		#if PACK_CONTENT == true
	        line [MAX_LINE_SIZE],
	        buf [MAX_SECTION_TAG],
		#endif
	        i;

        h = DOF2::HashKey (key);
		l = 0;
		r = Entries.Count - 1;

		/*
		 * Binary search in a sorted list of entries in O(log n) time. This algorithm makes for example with 256 elements a maximum of ~8 steps until the entry is found if it exists.
		 * A sequential search would take up to 256 steps. That was the case in the first Double-O-Files script.
		 */
		while (l <= r)
		{
		    if ((r - l) < 2)
		    {
		        if (h == SortedEntryList [l][0])
		        {
		            m = l;
			        entry = SortedEntryList [l][1];
				}
				else if (r > l && h == SortedEntryList [r][0])
				{
				    m = r;
				    entry = SortedEntryList [r][1];
				}
		        break;
		    }
		    else
		    {
		        m = l + (r - l) / 2;
			    if (h == SortedEntryList [m][0])
			    {
			        entry = SortedEntryList [m][1];
			        break;
			    }
			    else if (h > SortedEntryList [m][0])
					l = m + 1;
				else
				    r = m - 1;
			}
		}

		// Candidate found?
		if (entry != INVALID_ENTRY)
		{
			// Check if it's the entry we want.
  		#if PACK_CONTENT == true
			strunpack (line, Entries.Line [entry]);
			DOF2::ParseLine (line, keybuf, valbuf, keybufsize, valbufsize);
		    strunpack (buf, Entries.Tag [entry]);
			if (!strcmp (keybuf, key, !CaseSensitive) && ((!tag [0] && !buf [0]) || (tag [0] && buf [0] && !strcmp (tag, buf, !CaseSensitive))))
		#else
			DOF2::ParseLine (Entries.Line [entry], keybuf, valbuf, keybufsize, valbufsize);
		    if (!strcmp (keybuf, key, !CaseSensitive) && ((!tag [0] && !Entries.Tag [entry][0]) || (tag [0] && Entries.Tag [entry][0] && !strcmp (tag, Entries.Tag [entry], !CaseSensitive))))
		#endif
			    return (pos = m, entry);
			else
			{
			    // If not, look left and right in the list for entries with the same hash code. This can be collisions or entries with the same key from another section.
			    for (i = m - 1; i >= 0 && h == SortedEntryList [i][0]; --i)
			    {
			        entry = SortedEntryList [i][1];
			 	#if PACK_CONTENT == true
					strunpack (line, Entries.Line [entry]);
					DOF2::ParseLine (line, keybuf, valbuf, keybufsize, valbufsize);
				    strunpack (buf, Entries.Tag [entry]);
					if (!strcmp (keybuf, key, !CaseSensitive) && ((!tag [0] && !buf [0]) || (tag [0] && buf [0] && !strcmp (tag, buf, !CaseSensitive))))
				#else
					DOF2::ParseLine (Entries.Line [entry], keybuf, valbuf, keybufsize, valbufsize);
				    if (!strcmp (keybuf, key, !CaseSensitive) && ((!tag [0] && !Entries.Tag [entry][0]) || (tag [0] && Entries.Tag [entry][0] && !strcmp (tag, Entries.Tag [entry], !CaseSensitive))))
				#endif
					    return (pos = i, entry);
			    }

			    for (i = m + 1; i < Entries.Count && h == SortedEntryList [i][0]; ++i)
			    {
			        entry = SortedEntryList [i][1];
			 	#if PACK_CONTENT == true
					strunpack (line, Entries.Line [entry]);
					DOF2::ParseLine (line, keybuf, valbuf, keybufsize, valbufsize);
				    strunpack (buf, Entries.Tag [entry]);
					if (!strcmp (keybuf, key, !CaseSensitive) && ((!tag [0] && !buf [0]) || (tag [0] && buf [0] && !strcmp (tag, buf, !CaseSensitive))))
				#else
					DOF2::ParseLine (Entries.Line [entry], keybuf, valbuf, keybufsize, valbufsize);
				    if (!strcmp (keybuf, key, !CaseSensitive) && ((!tag [0] && !Entries.Tag [entry][0]) || (tag [0] && Entries.Tag [entry][0] && !strcmp (tag, Entries.Tag [entry], !CaseSensitive))))
				#endif
					    return (pos = i, entry);
			    }
			}
		}
	}
	
	keybuf [0] = valbuf [0] = '\0';
	return INVALID_ENTRY;
}

stock DOF2::SetString (const file [], const key [], const value [], const tag [] = """")
{
    if (file [0] && key [0])
	{
	    new
	        entry,
	        pos,
	        section = INVALID_SECTION,
	        keybuf [MAX_LINE_SIZE],
	        valbuf [MAX_LINE_SIZE],
		#if PACK_CONTENT == true
	        buf [MAX_SECTION_TAG],
	        line [MAX_LINE_SIZE],
		#endif
			i;

        if (!CurrentFile [0] || strcmp (CurrentFile, file)) // No file in buffer or the file you want to read from is not the file in the buffer.
	    	if (!DOF2::ParseFile (file, -1, false))
	    	    return 0;

        entry = DOF2::SearchEntry (key, tag, keybuf, valbuf, pos);

        // If the entry has been found, just change it's content.
        if (entry != INVALID_ENTRY)
		{
		    FileChanged = true;
		#if PACK_CONTENT == true
			format (line, sizeof (line), ""%s = %s"", key, value [0] ? value : (""(null)""));
		    return strpack (Entries.Line [entry], line);
		#else
			format (Entries.Line [entry], sizeof (Entries.Line []), ""%s = %s"", key, value [0] ? value : (""(null)""));
			return 1;
		#endif
        }

		if (Entries.Count >= MAX_ENTRIES)
		    return 0;

		// Search for the section where the entry belongs.
		if (!tag [0])
		    section = 0;
		else
		{
			for (i = 1; i < Sections.Count; ++i)
			{
			#if PACK_CONTENT == true
			    strunpack (buf, Sections.Tag [i]);
			    if (buf [0] && !strcmp (tag, buf, !CaseSensitive))
			    {
			        section = i;
			        break;
			    }
			#else
			    if (Sections.Tag [i][0] && !strcmp (tag, Sections.Tag [i], !CaseSensitive))
			    {
			        section = i;
			        break;
			    }
			#endif
			}
		}

		// Section we want does not exist, create new one if possible.
		if (section == INVALID_SECTION)
		{
		    if (Sections.Count >= MAX_SECTIONS)
		        return 0;

		    section = Sections.Count++;
	    #if PACK_CONTENT == true
			strpack (Sections.Tag [section], tag);
		#else
		    DOF2::strcpy (Sections.Tag [section], tag);
		#endif
			Sections.FirstEntry [section] = Sections.LastEntry [section] = INVALID_ENTRY;
		}

		// Add the entry to the section. Section's content is defined by a linear two way list.
	#if PACK_CONTENT == true
		format (line, sizeof (line), ""%s = %s"", key, value [0] ? value : (""(null)""));
		strpack (Entries.Line [Entries.Count], line);
	#else
	    format (Entries.Line [Entries.Count], sizeof (Entries.Line []), ""%s = %s"", key, value [0] ? value : (""(null)""));
	#endif
		Entries.Tag [Entries.Count] = Sections.Tag [section];
    #if MAX_SECTIONS >= 256
		Entries.Section [Entries.Count] = section;
	#else
	    Entries.Section {Entries.Count} = section;
	#endif
		Entries.NextEntry [Entries.Count] = INVALID_ENTRY;

		// Add entry to sorted list of entries and move to right correct position in O(n) time.
		SortedEntryList [Entries.Count][0] = DOF2::HashKey (key);
		SortedEntryList [Entries.Count][1] = Entries.Count;
		i = Entries.Count - 1;
		while (i >= 0 && SortedEntryList [i][0] > SortedEntryList [i + 1][0])
		{
		    DOF2::SwapSortedEntries (SortedEntryList [i], SortedEntryList [i + 1]);
		    --i;
		}

		if (Sections.LastEntry [section] == INVALID_ENTRY) // No entry in this section.
		{
		    Sections.FirstEntry [section] = Sections.LastEntry [section] = Entries.Count;
		    Entries.PreviousEntry [Entries.Count] = INVALID_ENTRY;
		}
		else
		{
			Entries.NextEntry [Sections.LastEntry [section]] = Entries.Count;
			Entries.PreviousEntry [Entries.Count] = Sections.LastEntry [section];
			Sections.LastEntry [section] = Entries.Count;
		}
		++Entries.Count;
		FileChanged = true;
	}
	return 1;
}

stock DOF2::GetString (const file [], const key [], const tag [] = """")
{
	new buf [MAX_LINE_SIZE];
	DOF2::GetStringEx (file, key, buf, sizeof (buf), tag);
	return buf;
}

stock DOF2::GetStringEx (const file [], const key [], result [], size, const tag [] = """")
{
	if (file [0] && key [0])
	{
	    new
	        pos,
			keybuf [MAX_LINE_SIZE];

        if (!CurrentFile [0] || strcmp (CurrentFile, file))
        {
	    	if (!DOF2::ParseFile (file, -1, false))
	    	{
	    	    result [0] = '\0';
	    	    return 0;
			}
		}

		// Find entry and assign the result with it's value.
		return (DOF2::SearchEntry (key, tag, keybuf, result, pos, sizeof (keybuf), size) != INVALID_ENTRY);
	}
	return 0;
}

stock DOF2::Unset (const file [], const key [], const tag [] = """")
{
	if (file [0] && key [0])
	{
	    new
	        entry,
	        pos,
			keybuf [MAX_LINE_SIZE],
			valbuf [MAX_LINE_SIZE];

		if (!CurrentFile [0] || strcmp (CurrentFile, file))
	    	if (!DOF2::ParseFile (file, -1, false))
	    	    return 0;

		if ((entry = DOF2::SearchEntry (key, tag, keybuf, valbuf, pos)) != INVALID_ENTRY)
		{
		    // Remove entry from it's section.
        #if MAX_SECTIONS >= 256
		    if (Sections.FirstEntry [Entries.Section [entry]] == entry) // Is the entry the first entry in the section? Make it's next entry the first entry.
		#else
		    if (Sections.FirstEntry [Entries.Section {entry}] == entry)
		#endif
			{
			#if MAX_SECTIONS >= 256
		        Sections.FirstEntry [Entries.Section [entry]] = Entries.NextEntry [entry];
			#else
			    Sections.FirstEntry [Entries.Section {entry}] = Entries.NextEntry [entry];
			#endif
		        if (Entries.NextEntry [entry] != INVALID_ENTRY)
					Entries.PreviousEntry [Entries.NextEntry [entry]] = INVALID_ENTRY;
			}
			else
			{
			    Entries.NextEntry [Entries.PreviousEntry [entry]] = Entries.NextEntry [entry];
			    if (Entries.NextEntry [entry] != INVALID_ENTRY)
					Entries.PreviousEntry [Entries.NextEntry [entry]] = Entries.PreviousEntry [entry];
			}

        #if MAX_SECTIONS >= 256
            if (Sections.LastEntry [Entries.Section [entry]] == entry)
        #else
			if (Sections.LastEntry [Entries.Section {entry}] == entry)
		#endif
			{
			#if MAX_SECTIONS >= 256
			    Sections.LastEntry [Entries.Section [entry]] = Entries.PreviousEntry [entry];
			#else
			    Sections.LastEntry [Entries.Section {entry}] = Entries.PreviousEntry [entry];
			#endif
			    if (Entries.PreviousEntry [entry] != INVALID_ENTRY)
			        Entries.NextEntry [Entries.PreviousEntry [entry]] = INVALID_ENTRY;
			}
			else
			{
			    Entries.PreviousEntry [Entries.NextEntry [entry]] = Entries.PreviousEntry [entry];
			    if (Entries.PreviousEntry [entry] != INVALID_ENTRY)
			        Entries.NextEntry [Entries.PreviousEntry [entry]] = Entries.NextEntry [entry];
			}

			// Move the entry to the end of the sorted list and decrement Entries.Count to forget about the unset Entries.
			while (pos < (Entries.Count - 1))
			{
			    DOF2::SwapSortedEntries (SortedEntryList [pos], SortedEntryList [pos + 1]);
			    ++pos;
			}
			--Entries.Count;
			FileChanged = true;
		    return 1;
		}
	}
	return 0;
}

stock DOF2::RenameKey (const file [], const oldkey [], const newkey [], const tag [] = """")
{
	if (file [0] && oldkey [0])
	{
	    new
	        entry,
	        pos,
		#if PACK_CONTENT == true
			line [MAX_LINE_SIZE],
		#endif
			keybuf [MAX_LINE_SIZE],
			valbuf [MAX_LINE_SIZE];

		if (!CurrentFile [0] || strcmp (CurrentFile, file))
	    	if (!DOF2::ParseFile (file, -1, false))
	    	    return 0;

		if ((entry = DOF2::SearchEntry (oldkey, tag, keybuf, valbuf, pos)) != INVALID_ENTRY)
		{
		    // Change content of Entries.
		#if PACK_CONTENT == true
            format (line, sizeof (line), ""%s = %s"", newkey, valbuf [0] ? valbuf : (""(null)""));
		    strpack (Entries.Line [entry], line);
		#else
            format (Entries.Line [entry], sizeof (Entries.Line []), ""%s = %s"", newkey, valbuf [0] ? valbuf : (""(null)""));
		#endif

		    // Because the hashcode has been changed, the entry has to move in the list.
		    SortedEntryList [pos][0] = DOF2::HashKey (newkey);
		    if (pos < (MAX_ENTRIES - 1) && SortedEntryList [pos][0] > SortedEntryList [pos + 1][0])
		    {
				// Hash value of key is greater than the hash value of it's right neighbor, move to the right by swapping the 2 entries.
				while (pos < (MAX_ENTRIES - 1) && SortedEntryList [pos][0] > SortedEntryList [pos + 1][0])
				{
				    DOF2::SwapSortedEntries (SortedEntryList [pos], SortedEntryList [pos + 1]);
				    ++pos;
				}
		    }
		    else if (pos > 0 && SortedEntryList [pos][0] < SortedEntryList [pos + 1][0])
		    {
		        // Hash value of key is smaller than the hash value of it' left neighbor, move to the left by swapping the 2 entries.
		        while (pos > 0 && SortedEntryList [pos][0] < SortedEntryList [pos - 1][0])
		        {
		            DOF2::SwapSortedEntries (SortedEntryList [pos], SortedEntryList [pos - 1]);
		            --pos;
		        }
		    }

			FileChanged = true;
		    return 1;
		}
	}
	return 0;
}

stock bool: DOF2::IsSet (const file [], const key [], const tag [] = """")
{
	new
	    pos,
		keybuf [MAX_LINE_SIZE],
		valbuf [MAX_LINE_SIZE];

	if (!CurrentFile [0] || strcmp (CurrentFile, file))
		if (!DOF2::ParseFile (file, -1, false))
		    return false;

	// Try to find the Entries.
	return (DOF2::SearchEntry (key, tag, keybuf, valbuf, pos) != INVALID_ENTRY);
}

stock DOF2::SetInt (const file [], const key [], value, const tag [] = """")
{
	new buf [16];
	format (buf, sizeof (buf), ""%d"", value);
	return DOF2::SetString (file, key, buf, tag);
}

stock DOF2::GetInt (const file [], const key [], const tag [] = """")
{
	new buf [16];
	DOF2::GetStringEx (file, key, buf, sizeof (buf), tag);
	return strval (buf);
}

stock DOF2::SetHex (const file [], const key [], value, const tag [] = """")
{
	new buf [16];
	DOF2::hexstr (value, buf);
	return DOF2::SetString (file, key, buf, tag);
}

stock DOF2::GetHex (const file [], const key [], const tag [] = """")
{
	new buf [16];
	DOF2::GetStringEx (file, key, buf, sizeof (buf), tag);
	return DOF2::strhex (buf);
}

stock DOF2::SetBin (const file [], const key [], value, const tag [] = """")
{
	new buf [35];
	DOF2::binstr (value, buf);
	return DOF2::SetString (file, key, buf, tag);
}

stock DOF2::GetBin (const file [], const key [], const tag [] = """")
{
	new buf [35];
	DOF2::GetStringEx (file, key, buf, sizeof (buf), tag);
	return DOF2::strbin (buf);
}

stock DOF2::SetFloat (const file [], const key [], Float: value, const tag [] = """")
{
	new buf [32];
	format (buf, sizeof (buf), ""%.8f"", value);
	return DOF2::SetString (file, key, buf, tag);
}

stock Float: DOF2::GetFloat (const file [], const key [], const tag [] = """")
{
	new buf [32];
	DOF2::GetStringEx (file, key, buf, sizeof (buf), tag);
	return floatstr (buf);
}

stock bool: DOF2::GetBool (const file [], const key [], const tag [] = """")
{
	new buf [16];
	DOF2::GetStringEx (file, key, buf, sizeof (buf), tag);
	return (strval (buf) || (buf [0] && !strcmp (buf, ""true"", true)));
}

stock DOF2::SetBool (const file [], const key [], bool: value, const tag [] = """")
	return DOF2::SetString (file, key, value ? (""true"") : (""false""), tag);
	
/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/

stock DOF2::PrintFile (const comment [] = """")
{
    if (CurrentFile [0])
	{
		new
			bool: firstline = true,
			entry,
		#if PACK_CONTENT == true
			buf [MAX_LINE_SIZE],
		#endif
			entries,
			i;

	    printf (""[DOF] Current file: %s"", CurrentFile);
		for ( ; i < Sections.Count; ++i)
		{
		    if (i)
			{
			    if (!firstline)
					print ("" "");
				else
				    firstline = false;
			#if PACK_CONTENT == true
				strunpack (buf, Sections.Tag [i]);
				printf (""[%s]"", buf);
			#else
			    printf (""[%s]"", Sections.Tag [i]);
			#endif
			}
			entry = Sections.FirstEntry [i];
			while (entry != INVALID_ENTRY)
			{
			#if PACK_CONTENT == true
				strunpack (buf, Entries.Line [entry]);
				print (buf);
			#else
			    print (Entries.Line [entry]);
			#endif
			    entry = Entries.NextEntry [entry];
			    firstline = false;
			    ++entries;
			}
		}
		printf (""* %d sections, %d entries"", i, entries);
		if (comment [0])
			printf (""* Comment: %s"", comment);
		return 1;
	}
	return 0;
}

stock DOF2::WriteFile ()
{
	if (CurrentFile [0])
	{
		new
			File: f = fopen (CurrentFile, io_write),
			bool: firstline = true,
			entry;

		if (f)
		{
			for (new i; i < Sections.Count; ++i)
			{
			    if (Sections.FirstEntry [i] != INVALID_ENTRY) // Do not write when empty.
			    {
				    if (i)
					{
					    if (!firstline)
						{
							fputchar (f, '\r', UseUTF8);
							fputchar (f, '\n', UseUTF8);
						}
						else
						    firstline = false;
						fputchar (f, '[', UseUTF8);
						fwritechars (f, Sections.Tag [i]);
						fputchar (f, ']', UseUTF8);
						fputchar (f, '\r', UseUTF8);
						fputchar (f, '\n', UseUTF8);
					}

					entry = Sections.FirstEntry [i];
					while (entry != INVALID_ENTRY)
					{
					    fwritechars (f, Entries.Line [entry]);
					    fputchar (f, '\r', UseUTF8);
					    fputchar (f, '\n', UseUTF8);
					    entry = Entries.NextEntry [entry];
					    firstline = false;
					}
				}
			}
			FileChanged = false;
			return fclose (f);
		}
	}
	return 0;
}

stock DOF2::ParseFile (const file [], extraid = -1, bool: callback = false)
{
    if (file [0] && DOF2::FileExists (file))
	{
	    /*
	    Write the file in the buffer when:
	    - There is actually a file in the buffer
	    - The file in the buffer is not the file you want to parse and this file has been changed.
	    - Or the current file is the file you want to and has been changed.
	    */
	    //if (CurrentFile [0] && ((strcmp (CurrentFile, file) && FileChanged) || FileChanged))
	    if (CurrentFile [0] && FileChanged) // Equal to the query above but shorter.
	    	DOF2::WriteFile ();

		new
			File: f = fopen (file, io_readwrite),
		    buf [MAX_LINE_SIZE],
		#if PACK_CONTENT == true
		    line [MAX_LINE_SIZE char],
		    tag [MAX_SECTION_TAG],
		#else
		    line [MAX_LINE_SIZE],
		#endif
		    key [MAX_LINE_SIZE],
		    value [MAX_LINE_SIZE],
			c,
			pos;

		if (f)
		{
			FileChanged = false;
            DOF2::SetFile (file);

			Sections.Count = 1;
			Entries.Count = 0;
			Sections.FirstEntry [0] = Sections.LastEntry [0] = INVALID_ENTRY;

			for (new i, size = flength (f); i < size; ++i)
			{
				c = fgetchar(f, 0, UseUTF8);
				if (pos == MAX_LINE_SIZE - 1 || c == '\n' || c == '\r')
				    c = '\0';
			#if PACK_CONTENT == true
				line {pos++} = c;
			#else
			    line [pos++] = c;
			#endif

				if (c == '\0')
				{
				    // A new section found. Add the section to the list of sections.
				#if PACK_CONTENT == true
				    if (line {0} == '[')
				#else
                	if (line [0] == '[')
				#endif
				    {
				        if (Sections.Count < MAX_SECTIONS)
				        {
							pos = 1;
						#if PACK_CONTENT == true
							while (line {pos} && line {pos} != ']' && (pos - 1) < MAX_SECTION_TAG)
							{
								Sections.Tag [Sections.Count]{pos - 1} = line {pos};
								++pos;
							}
							Sections.Tag [Sections.Count]{pos - 1} = '\0';
						#else
						    while (line [pos] && line [pos] != ']' && (pos - 1) < MAX_SECTION_TAG)
							{
								Sections.Tag [Sections.Count][pos - 1] = line [pos];
								++pos;
							}
							Sections.Tag [Sections.Count][pos - 1] = '\0';
						#endif
							Sections.FirstEntry [Sections.Count] = Sections.LastEntry [Sections.Count] = INVALID_ENTRY;
							++Sections.Count;
					    }
				    }
				    else
				    {
					#if PACK_CONTENT == true
				        if (line {0})
					#else
					    if (line [0])
					#endif
				        {
				        #if PACK_CONTENT == true
							strunpack (buf, line);
					        DOF2::ParseLine (buf, key, value);
					        strunpack (tag, Sections.Tag [Sections.Count - 1]);

							// Call a specific function for a specific entry - ZCMD-style!
					        if (callback)
					        {
						        format (buf, sizeof (buf), ""_OnParseFile_%s_%s"", tag, key);
						        if (!CallRemoteFunction (buf, ""is"", extraid, value))
									CallRemoteFunction (""_OnDefaultParseFile"", ""issss"", extraid, value [0] ? value : (""\1""), key, Sections.Tag [Sections.Count - 1][0] ? Sections.Tag [Sections.Count - 1] : (""\1""), file);
							}
						#else
					        DOF2::ParseLine (line, key, value);

							// Call a specific function for a specific entry - ZCMD-style!
					        if (callback)
					        {
						        format (buf, sizeof (buf), ""_OnParseFile_%s_%s"", Sections.Tag [Sections.Count - 1], key);
						        if (!CallRemoteFunction (buf, ""is"", extraid, value))
									CallRemoteFunction (""_OnDefaultParseFile"", ""issss"", extraid, value [0] ? value : (""\1""), key, Sections.Tag [Sections.Count - 1][0] ? Sections.Tag [Sections.Count - 1] : (""\1""), file);
							}
						#endif

							// Add entry to it's section and to the list which will be sorted.
							Entries.Line [Entries.Count] = line;
							Entries.Tag [Entries.Count] = Sections.Tag [Sections.Count - 1];
                        #if MAX_SECTIONS >= 256
							Entries.Section [Entries.Count] = Sections.Count - 1;
						#else
							Entries.Section {Entries.Count} = Sections.Count - 1;
						#endif
							Entries.NextEntry [Entries.Count] = INVALID_ENTRY;

							SortedEntryList [Entries.Count][0] = DOF2::HashKey (key);
							SortedEntryList [Entries.Count][1] = Entries.Count;

							if (Sections.LastEntry [Sections.Count - 1] == INVALID_ENTRY)
							{
							    Sections.FirstEntry [Sections.Count - 1] = Sections.LastEntry [Sections.Count - 1] = Entries.Count;
							    Entries.PreviousEntry [Entries.Count] = INVALID_ENTRY;
							}
							else
							{
								Entries.NextEntry [Sections.LastEntry [Sections.Count - 1]] = Entries.Count;
								Entries.PreviousEntry [Entries.Count] = Sections.LastEntry [Sections.Count - 1];
								Sections.LastEntry [Sections.Count - 1] = Entries.Count;
							}
							++Entries.Count;
						}
				    }
				    pos = 0;
				}
			}
			/*
			 * Sort list of entries by it's hashcodes in O(n * log n) time.
			 * (Worst case is actually O(n * n), however, this QuickSort implementation chooses a randomized pivot
			 * to minimize the chance for the worst case.)
			 */
			DOF2::SortEntries (SortedEntryList, 0, Entries.Count - 1, true);
			return fclose (f);
		}
	}
	return 0;
}

// Rather useless.
stock DOF2::ReparseFile (const file [], extraid, bool: callback = true)
{
	if (file [0] && CurrentFile [0] && !strcmp (file, CurrentFile))
	{
	    CurrentFile [0] = '\0';
		return DOF2::ParseFile (file, extraid, callback);
	}
	return 0;
}

private DOF2::ParseLine (const line [], key [], value [], keysize = sizeof (key), valuesize = sizeof (value))
{
	new
		pos,
		readpos;

	if ((pos = charfind (line, '=')) != -1)
	{
	    // Read key and value.
	    readpos = pos - 1;
		while (readpos >= 0 && line [readpos] == ' ')
		    --readpos;

		if (readpos >= 0 && keysize > (readpos + 1))
		{
			key [readpos + 1] = '\0';
			while (readpos >= 0)
			{
				key [readpos] = line [readpos];
				--readpos;
			}
		}
		else
		    return 0;

		readpos = pos + 1;
		++pos;
		while (line [readpos] == ' ')
		{
			++pos;
		    ++readpos;
		}

        if (line [readpos])
		{
		    while (readpos >= 0 && line [readpos] && valuesize > (readpos - pos + 1))
			{
				value [readpos - pos] = line [readpos];
				++readpos;
			}
			value [readpos - pos] = '\0';
		}
		else
		{
		    key [0] = value [0] = '\0';
		    return 0;
		}
		
		if (!strcmp (value, ""(null)"", true))
		    value [0] = '\0';
		return 1;
	}
	key [0] = value [0] = '\0';
	return 0;
}

stock DOF2::File (const user [])
{
	new newfile [MAX_FILE_SIZE];
	format (newfile, sizeof (newfile), USER_FILE_PATH, DOF2::udb_encode (user));
	return newfile;
}

stock bool: DOF2::CheckLogin (const file [], const password [])
	return (file [0] && password [0] && DOF2::num_hash (password) == DOF2::GetInt (file, USER_PW_HASH_KEY));

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/

stock DOF2::binstr (value, const dest [], size = sizeof (dest))
{
	new buf [32 + 3] = ""0b"";
	for (new i = 0; i < 32; ++i)
	    buf [i + 2] = '0' + ((value >>> (31 - i)) & 1);

	DOF2::strcpy (dest, buf, size);
}
	//format (dest, size, ""0b%b"", value);

stock DOF2::hexstr (value, const dest [], size = sizeof (dest))
{
	static const characters [] =
	{
	    '0', '1', '2', '3',
	    '4', '5', '6', '7',
	    '8', '9', 'A', 'B',
	    'C', 'D', 'E', 'F'
	};
	
	new buf [8 + 3] = ""0x"";
	
	for (new i = 0; i < 8; ++i)
		buf [2 + i] = characters [(value >>> ((7 - i) << 2)) & 0x0F];

	DOF2::strcpy (dest, buf, size);
}
	//format (dest, size, ""0x%x"", value);

stock DOF2::strhex (const string [])
{
	new
		i,
		value;
		
	if (string [0] == '0' && (string [1] == 'x' || string [1] == 'X'))
		i = 2;

    while (string [i])
    {
		value <<= 4;
		switch (string [i])
		{
		    case '0' .. '9':
		        value |= string [i] - '0';

			case 'A' .. 'F':
			    value |= string [i] - 'A' + 10;

            case 'a' .. 'f':
			    value |= string [i] - 'a' + 10;

			default:
			    return 0;
		}
		++i;
    }
    return value;
}

stock DOF2::strbin (const string [])
{
	new
	    i,
	    value;

	if (string [0] == '0' && (string [1] == 'b' || string [1] == 'B'))
	    i = 2;

	while (string [i])
	{
	    if (string [i] != '1' && string [i] != '0')
	        return 0;

		value <<= 1;
		value |= (string [i] - '0');
		++i;
	}
	return value;
}

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/

private charfind (const string [], c)
{
	for (new i, len = strlen (string); i < len; ++i)
		if (string [i] == c)
		    return i;
	return -1;
}

private fwritechars (File: handle, const c [])
{
    new pos;
#if PACK_CONTENT == true
	while (c {pos})
	    fputchar (handle, c {pos++}, UseUTF8);
#else
    while (c [pos])
	    fputchar (handle, c [pos++], UseUTF8);
#endif
}

private DOF2::SortEntries (const entries [][2], l, r, bool: randomize = true)
{
	if (r > l)
	{
		if (randomize)
		{
			new k = l + (random (65535) % (r - l + 1));
		  	DOF2::SwapSortedEntries (entries [k], entries [r]);
		}

		new
			i = l - 1,
			j = r,
			pivot = entries [r][0];

		while (i < j)
		{
			do
				++i;
			while (entries [i][0] <= pivot && i < r);

			do
			    --j;
			while (entries [j][0] >= pivot && j > l);

			if (i < j)
			    DOF2::SwapSortedEntries (entries [i], entries [j]);
		}
		DOF2::SwapSortedEntries (entries [i], entries [r]);
		DOF2::SortEntries (entries, l, i - 1, randomize);
		DOF2::SortEntries (entries, i + 1, r, randomize);
	}
}

private DOF2::SwapSortedEntries (a [2], b [2])
{
 	new c [2];
	c [0] = a [0];
	c [1] = a [1];
	a [0] = b [0];
	a [1] = b [1];
	b [0] = c [0];
	b [1] = c [1];
}

stock DOF2::SortAllSections (const file [], bool: ignorecase = true, bool: ascending = true)
{
    if (file [0])
	{
	    if (!CurrentFile [0] || strcmp (CurrentFile, file)) // No file in buffer or the file you want to read from is not the file in the buffer.
	    	if (!DOF2::ParseFile (file, -1, false))
	    	    return 0;

		new
			entries [MAX_ENTRIES],
			keys [MAX_ENTRIES][MAX_LINE_SIZE],
			key [MAX_LINE_SIZE],
			value [MAX_LINE_SIZE],
	    #if PACK_CONTENT == true
			line [MAX_LINE_SIZE],
		#endif
			entry,
			i;

		for (new section = 0; section < Sections.Count; ++section)
		{
		    i = 0;
			entry = Sections.FirstEntry [section];
			while (entry != INVALID_ENTRY)
			{
	        #if PACK_CONTENT == true
		    	strunpack (line, Entries.Line [entry]);
			    DOF2::ParseLine (line, key, value);
			#else
			    DOF2::ParseLine (Entries.Line [entry], key, value);
			#endif
			    keys [i][0] = '\0';
			    strcat (keys [i], key);
			    entries [i] = entry;
			    entry = Entries.NextEntry [entry];
			    ++i;
			}

			if (i > 0)
				DOF2::SortSection_Internal (section, entries, keys, 0, i - 1, ignorecase, ascending);
		}
		return 1;
	}
	return 0;
}

stock DOF2::SortSection (const file [], const tag [], bool: ignorecase = true, bool: ascending = true)
{
	if (file [0])
	{
	    if (!CurrentFile [0] || strcmp (CurrentFile, file)) // No file in buffer or the file you want to read from is not the file in the buffer.
	    	if (!DOF2::ParseFile (file, -1, false))
	    	    return 0;

		new
		    section = INVALID_SECTION,
			entries [MAX_ENTRIES],
			keys [MAX_ENTRIES][MAX_LINE_SIZE],
			key [MAX_LINE_SIZE],
			buf [MAX_LINE_SIZE],
	    #if PACK_CONTENT == true
			line [MAX_LINE_SIZE],
		#endif
			entry,
			i;

		if (!tag [0])
			section = 0;
		else
		{
			for (i = 1; i < Sections.Count; ++i)
			{
			#if PACK_CONTENT == true
			    strunpack (buf, Sections.Tag [i]);
			    if (buf [0] && !strcmp (tag, buf, !CaseSensitive))
			    {
			        section = i;
			        break;
			    }
			#else
			    if (Sections.Tag [i][0] && !strcmp (tag, Sections.Tag [i], !CaseSensitive))
			    {
			        section = i;
			        break;
			    }
			#endif
			}
		}

		if (section != INVALID_SECTION)
		{
		    i = 0;
			entry = Sections.FirstEntry [section];
			while (entry != INVALID_ENTRY)
			{
	        #if PACK_CONTENT == true
		    	strunpack (line, Entries.Line [entry]);
			    DOF2::ParseLine (line, key, buf);
			#else
			    DOF2::ParseLine (Entries.Line [entry], key, buf);
			#endif
			    keys [i][0] = '\0';
			    strcat (keys [i], key);
			    entries [i] = entry;
			    entry = Entries.NextEntry [entry];
			    ++i;
			}

			if (i > 0)
			{
				DOF2::SortSection_Internal (section, entries, keys, 0, i - 1, ignorecase, ascending);
		    	return 1;
			}
		}
	}
	return 0;
}

private DOF2::SortSection_Internal (section, entries [], keys [][], l, r, bool: ignorecase = true, bool: ascending = true)
{
	// Entries must be stored into an array...
    if (0 <= section < Sections.Count && r > l)
    {
        new
            i = l - 1,
            j = r,
			buf [MAX_LINE_SIZE];

        static
            pivot [MAX_LINE_SIZE]; // Must be static, otherwise too much memory usage during recursion ==> Script will crash!

        pivot [0] = '\0';
        strcat (pivot, keys [r]);

        while (i < j)
        {
            if (ascending)
            {
                do
                    ++i;
                while (strcmp (keys [i], pivot,  ignorecase) <= 0 && i < r);

                do
                    --j;
                while (strcmp (keys [j], pivot, ignorecase) >= 0 && j > l);
            }
            else
            {
                do
                    ++i;
                while (strcmp (keys [i], pivot,  ignorecase) >= 0 && i < r);

                do
                    --j;
                while (strcmp (keys [j], pivot, ignorecase) <= 0 && j > l);
            }

            if (i < j)
            {
                DOF2::SwapEntries (section, entries [i], entries [j]);

				DOF2::strcpy (buf, keys [i]);
				DOF2::strcpy (keys [i], keys [j], MAX_LINE_SIZE);
				DOF2::strcpy (keys [j], buf, MAX_LINE_SIZE);

				entries [i] ^= entries [j];
                entries [j] ^= entries [i];
                entries [i] ^= entries [j];
			}
        }

        if (i != r)
        {
            DOF2::SwapEntries (section, entries [i], entries [r]);

            DOF2::strcpy (buf, keys [i]);
			DOF2::strcpy (keys [i], keys [r], MAX_LINE_SIZE);
			DOF2::strcpy (keys [r], buf, MAX_LINE_SIZE);

            entries [i] ^= entries [r];
            entries [r] ^= entries [i];
            entries [i] ^= entries [r];
		}

        DOF2::SortSection_Internal (section, entries, keys, l, i - 1, ignorecase, ascending);
        DOF2::SortSection_Internal (section, entries, keys, i + 1, r, ignorecase, ascending);
    }
}

private DOF2::SwapEntries (section, entry1, entry2)
{
	// This swaps two entries in the entry list of a section. (Pointers are swapped)
	if (0 <= section < Sections.Count && 0 <= entry1 <= Entries.Count && 0 <= entry2 <= Entries.Count)
	{
	    if (entry1 == Sections.FirstEntry [section])
		    Sections.FirstEntry [section] = entry2;
		else if (entry2 == Sections.FirstEntry [section])
		    Sections.FirstEntry [section] = entry1;

	    if (entry1 == Sections.LastEntry [section])
		    Sections.LastEntry [section] = entry2;
		else if (entry2 == Sections.LastEntry [section])
		    Sections.LastEntry [section] = entry1;

		if (Entries.NextEntry [entry1] == entry2)
		{
		    Entries.NextEntry [entry1] = Entries.NextEntry [entry2];
		    Entries.PreviousEntry [entry2] = Entries.PreviousEntry [entry1];

		    if (Entries.PreviousEntry [entry1] != INVALID_ENTRY)
		        Entries.NextEntry [Entries.PreviousEntry [entry1]] = entry2;

	        if (Entries.NextEntry [entry2] != INVALID_ENTRY)
		        Entries.PreviousEntry [Entries.NextEntry [entry2]] = entry1;

		    Entries.NextEntry [entry2] = entry1;
		    Entries.PreviousEntry [entry1] = entry2;
		}
		else if (Entries.NextEntry [entry2] == entry1)
		{
		    Entries.NextEntry [entry2] = Entries.NextEntry [entry1];
		    Entries.PreviousEntry [entry1] = Entries.PreviousEntry [entry2];

		    if (Entries.PreviousEntry [entry2] != INVALID_ENTRY)
		        Entries.NextEntry [Entries.PreviousEntry [entry2]] = entry1;

	        if (Entries.NextEntry [entry1] != INVALID_ENTRY)
		        Entries.PreviousEntry [Entries.NextEntry [entry1]] = entry2;

		    Entries.NextEntry [entry1] = entry2;
		    Entries.PreviousEntry [entry2] = entry1;
		}
		else
		{
		    new pointer;

			if (Entries.PreviousEntry [entry1] != INVALID_ENTRY)
			    Entries.NextEntry [Entries.PreviousEntry [entry1]] = entry2;

		    if (Entries.NextEntry [entry1] != INVALID_ENTRY)
			    Entries.PreviousEntry [Entries.NextEntry [entry1]] = entry2;

			if (Entries.PreviousEntry [entry2] != INVALID_ENTRY)
			    Entries.NextEntry [Entries.PreviousEntry [entry2]] = entry1;

		    if (Entries.NextEntry [entry2] != INVALID_ENTRY)
			    Entries.PreviousEntry [Entries.NextEntry [entry2]] = entry1;

			pointer = Entries.NextEntry [entry1];
			Entries.NextEntry [entry1] = Entries.NextEntry [entry2];
			Entries.NextEntry [entry2] = pointer;

			pointer = Entries.PreviousEntry [entry1];
			Entries.PreviousEntry [entry1] = Entries.PreviousEntry [entry2];
			Entries.PreviousEntry [entry2] = pointer;
		}
	    return 1;
	}
	return 0;
}

private DOF2::HashKey (const key [])
{
	new
		h = -1,
		i,
		j;

	if (CaseSensitive)
	{
		while ((j = key [i++]))
			h = h * 33 + j;
	}
	else
	{
	    while ((j = tolower (key [i++])))
	        h = h * 33 + j;
	}
	return h;
}

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/

stock DOF2::strcpy (dest [], const src [], size = sizeof (dest))
{
	dest [0] = '\0';
	strcat (dest, src, size);
}

// Replace [oldstr] with [newstr] in [srcstr] and copy write the new string to 'deststr'.

stock DOF2::strreplace (const newstr [], const oldstr [], const srcstr [], deststr [], bool: ignorecase = false, size = sizeof (deststr))
{
	new
	    newlen = strlen (newstr),
	    oldlen = strlen (oldstr),
	    srclen = strlen (srcstr),
	    idx,
		rep;

	for (new i = 0; i < srclen; ++i)
	{
	    if (idx < (size - 1))
	    {
		    if ((i + oldlen) <= srclen)
		    {
		        if (!strcmp (srcstr [i], oldstr, ignorecase, oldlen))
		        {
					deststr [idx] = '\0';
					strcat (deststr, newstr, size);
					++rep;
					idx += newlen;
					i += oldlen - 1;
				}
				else
					deststr [idx++] = srcstr [i];
		    }
		    else
		    	deststr [idx++] = srcstr [i];
	    }
		else
		    return rep;
	}
	deststr [idx] = '\0';
	return rep;
}

stock DOF2::udb_encode (const nickname [])
{
	new
		buf [256],
		result [256];

	static const symbols [][2][] =
	{
	    {""_"", ""_00""},
		{"";"", ""_01""},
		{""!"", ""_02""},
		{""/"", ""_03""},
		{""\\"", ""_04""},
		{""["", ""_05""},
		{""]"", ""_06""},
		{""?"", ""_07""},
		{""."", ""_08""},
		{""*"", ""_09""},
		{""<"", ""_10""},
		{"">"", ""_11""},
		{""{"", ""_12""},
		{""}"", ""_13""},
		{"" "", ""_14""},
		{""\"""", ""_15""},
		{"":"", ""_16""},
		{""|"", ""_17""},
		{""="", ""_18""}
	};

	strcat (buf, nickname);
	for (new i = 0; i < sizeof (symbols); ++i)
	{
	    DOF2::strreplace (symbols [i][1], symbols [i][0], buf, result);
	    DOF2::strcpy (buf, result);
	}
	return result;
}

stock DOF2::udb_decode (const nickname [])
{
	new
		buf [256],
		result [256];

	static const symbols [][2][] =
	{
	    {""_"", ""_00""},
		{"";"", ""_01""},
		{""!"", ""_02""},
		{""/"", ""_03""},
		{""\\"", ""_04""},
		{""["", ""_05""},
		{""]"", ""_06""},
		{""?"", ""_07""},
		{""."", ""_08""},
		{""*"", ""_09""},
		{""<"", ""_10""},
		{"">"", ""_11""},
		{""{"", ""_12""},
		{""}"", ""_13""},
		{"" "", ""_14""},
		{""\"""", ""_15""},
		{"":"", ""_16""},
		{""|"", ""_17""},
		{""="", ""_18""}
	};

	strcat (buf, nickname);
	for (new i = 0; i < sizeof (symbols); ++i)
	{
	    DOF2::strreplace (symbols [i][0], symbols [i][1], buf, result);
	    DOF2::strcpy (buf, result);
	}
	return result;
}

stock DOF2::num_hash (const buf [])
{
	new
		length = strlen (buf),
    	s1 = 1,
    	s2 = 0,
    	n;

    for (n = 0; n < length; n++)
	{
       s1 = (s1 + buf [n]) % 65521;
       s2 = (s2 + s1) % 65521;
    }
    return (s2 << 16) + s1;
}

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/

#if defined DUDB_CONVERT

	#tryinclude <dutils>

	#define dUser(%0).( 			DOF2_GetString(DOF2_File(%0),
	#define dUserSet(%0).( 			DOF2_SetString(DOF2_File(%0),
	#define dUserINT(%0).( 			DOF2_GetInt(DOF2_File(%0),
	#define dUserSetINT(%0).( 		DOF2_SetInt(DOF2_File(%0),
	#define dUserFLOAT(%0).( 		DOF2_GetFloat(DOF2_File(%0),
	#define dUserSetFLOAT(%0).( 	DOF2_SetFloat(DOF2_File(%0),
	#define udb_Create(%0,%1)		DOF2_CreateFile(DOF2_File(%0),%1)
	#define udb_RenameUser(%0,%1)   DOF2_RenameFile(DOF2_File(%0),DOF2_File(%1))
	#define udb_Exists(%0)          DOF2_FileExists(DOF2_File(%0))
	#define udb_Remove(%0)          DOF2_RemoveFile(DOF2_File(%0))
	#define udb_CheckLogin(%0,%1)   DOF2_CheckLogin(DOF2_File(%0),%1)

	#if !defined _dudb_included
		#define _dudb_included
	#endif

#endif

#if defined DINI_CONVERT

	#define dini_Exists		        DOF2_FileExists
	#define dini_Remove         	DOF2_RemoveFile
	#define dini_Create         	DOF2_CreateFile
	#define dini_Set			    DOF2_SetString
	#define dini_Get         		DOF2_GetString
	#define dini_IntSet   			DOF2_SetInt
	#define dini_Int         		DOF2_GetInt
	#define dini_BoolSet            DOF2_SetBool
	#define dini_Bool               DOF2_GetBool
	#define dini_FloatSet 			DOF2_SetFloat
	#define dini_Float      		DOF2_GetFloat
	#define dini_Unset       		DOF2_Unset
	#define dini_Isset       		DOF2_IsSet

	#if !defined _dini_included
		#define _dini_included
	#endif

#endif

/*
#if defined DINI_CONVERT || defined DUDB_CONVERT

	#define udb_hash            	DOF2_num_hash
	#define num_hash            	DOF2_num_hash
	#define udb_encode              DOF2_udb_encode
	#define udb_decode              DOF2_udb_decode

#endif
*/"
RxtWMiM9,day 25,HarrJ,Java,Wednesday 28th of February 2024 07:37:12 PM CDT,"package week4b;

import java.sql.*;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
public class Day25B {
    private String address = ""jdbc:mysql://localhost:3306/db_jtvi_b8_23"";
    private String userName = ""root""; //default ""root""
    private String passWord = """"; 
    
    public static void main(String[] args) {
        Day25B callMe = new Day25B();
        String[] row1 = {""pet d"", ""204"", ""Dummy"", ""filler""};
        String[] row2 = {""pet e"", ""205"", ""Dummy"", ""filler""};
        String[] row3 = {""pet f"", ""206"", ""Dummy"", ""filler""};
        
        callMe.addThreeRows(row1, row2, row3);
    }
    
    void addThreeRows(String[] row1, String[]row2, String[]row3){
        int rowsAffected = 0;
        try {
            Connection conn = DriverManager.getConnection(address, userName, passWord);
            String sqlQuery = ""INSERT INTO tbl_price_list (fld_pname ,fld_price""
                    + "" ,fld_manufacturer ,fld_cat_name)""
                    + "" VALUES (? ,? ,? ,? );"";
            conn.setAutoCommit(false);
            try {
                    
                PreparedStatement stmt = conn.prepareStatement(sqlQuery);

                stmt.setString(1, row1[0]);
                stmt.setString(2, row1[1]);
                stmt.setString(3, row1[2]);
                stmt.setString(4, row1[3]);

                rowsAffected += stmt.executeUpdate();

                stmt = conn.prepareStatement(sqlQuery);
                stmt.setString(1, row2[0]);
                stmt.setString(2, row2[1]);
                stmt.setString(3, row2[2]);
                stmt.setString(4, row2[3]);
                rowsAffected += stmt.executeUpdate();


                stmt = conn.prepareStatement(sqlQuery);
                stmt.setString(1, row3[0]);
                stmt.setString(2, row3[1]);
                stmt.setString(3, row3[2]);
                stmt.setString(4, row3[3]);
                rowsAffected += stmt.executeUpdate();
            } catch (Exception e) {
                
            }
            if (rowsAffected == 3) {
                conn.commit();
                System.out.println(""3 rows commit"");
            }else {
                conn.rollback();
                System.out.println(""rollback query"");
            }
            
            conn.close();
        } catch (Exception e) {
            System.out.println(""exception triggered"");
        } finally {
            System.out.println(""rows affected: "" + rowsAffected);
        }
        
    }
    
    String addFromTable(JTable tblIn) {
        int rowsAffected = 0;
        String resultMsg = """";
        try {
            Connection conn = DriverManager.getConnection(address, userName, passWord);
            String sqlQuery = ""INSERT INTO tbl_price_list (fld_pname ,fld_price""
                    + "" ,fld_manufacturer ,fld_cat_name)""
                    + "" VALUES (? ,? ,? ,? );"";
            conn.setAutoCommit(false);
            
            PreparedStatement stmt;
            for (int i = 0; i < tblIn.getRowCount(); i++) {
                try{
                    stmt = conn.prepareStatement(sqlQuery);

                    stmt.setObject(1, tblIn.getValueAt(i, 0));
                    stmt.setObject(2, tblIn.getValueAt(i, 1));
                    stmt.setObject(3, tblIn.getValueAt(i, 2));
                    stmt.setObject(4, tblIn.getValueAt(i, 3));

                    rowsAffected += stmt.executeUpdate();
                } catch (Exception e) {
                    System.out.println(""ping"");
                    System.out.println(e.toString());
                }
            }
            
            
            if (rowsAffected == tblIn.getRowCount()) {
                conn.commit();
                System.out.println(""table transferred"");
                resultMsg = ""table transferred"";
            }else {
                conn.rollback();
                System.out.println(""rollback query"");
                resultMsg = ""rollback query"";
            }
            conn.close();
        } catch (Exception e) {
            System.out.println(""exception triggered"");
        } finally {
            System.out.println(""rows affected: "" + rowsAffected);
        }
        return resultMsg;
    }
    
    // 2 things assuming may account level na gagamitin
    int[] loginCheck(String uName, String pWord) {
        int[] userInfo = {0,0}; // ID, LEVEL
        int rowsAffected = 0;
        boolean canContinue = true;
        try {
            Connection conn = DriverManager.getConnection(address, userName, passWord);
            String sqlQuery = ""SELECT COUNT(*) FROM tbl_login ""
                    + ""WHERE fld_username = ? AND fld_password = ?;"";
            conn.setAutoCommit(false);
            PreparedStatement stmt = conn.prepareStatement(sqlQuery);
            stmt.setString(1, uName);
            stmt.setString(2, pWord);
            ResultSet rs = stmt.executeQuery();
            rs.next();
            if (rs.getInt(1) == 1) {
                sqlQuery = ""SELECT fld_lid, fld_level FROM tbl_login ""
                    + ""WHERE fld_username = ? AND fld_password = ?;"";
                stmt = conn.prepareStatement(sqlQuery);
                stmt.setString(1, uName);
                stmt.setString(2, pWord);
                ResultSet rs2 = stmt.executeQuery();
                rs2.next();
                userInfo[0] = rs2.getInt(1);
                userInfo[1] = rs2.getInt(2);
            } else {
                canContinue = false;
            }
            if (canContinue) {
                sqlQuery = ""UPDATE tbl_login SET fld_last_access = CURRENT_TIMESTAMP()""
                        + "" WHERE fld_username = ? AND fld_password = ?;"";
                stmt = conn.prepareStatement(sqlQuery);
                stmt.setString(1, uName);
                stmt.setString(2, pWord);
                
                rowsAffected = stmt.executeUpdate();
                if (rowsAffected != 1) {
                    canContinue = false;
                }
            }
            
            if (canContinue) {
                conn.commit();
            } else {
                conn.rollback();
            }
            conn.close();
        } catch (Exception e) {
            System.out.println(e.toString());
        }
        return userInfo;
    }
}
"
MrWjkYrH,Home Assistant - Onvif Camera PTZ config,MKANET,YAML,Wednesday 28th of February 2024 07:34:32 PM CDT,"  - type: picture-glance
    title: Back Yard
    aspect_ratio: 16x9
    camera_image: camera.back_yard_camera_profile_000
    camera_view: live
    entities:
      - entity: camera.back_yard_camera_profile_000
        tap_action:
          action: call-service
          service: onvif.ptz
          service_data:
            entity_id: camera.back_yard_camera_profile_000
            tilt: UP
            speed: 0.5
            distance: 1
            move_mode: ContinuousMove
        name: UP
        show_state: false
        icon: mdi:arrow-up
        show_icon: true
      - entity: camera.back_yard_camera_profile_000
        tap_action:
          action: call-service
          service: onvif.ptz
          service_data:
            entity_id: camera.back_yard_camera_profile_000
            tilt: DOWN
            speed: 0.5
            distance: 1
            move_mode: ContinuousMove
        name: DOWN
        show_state: false
        icon: mdi:arrow-down
        show_icon: true
      - entity: camera.back_yard_camera_profile_000
        tap_action:
          action: call-service
          service: onvif.ptz
          service_data:
            entity_id: camera.back_yard_camera_profile_000
            pan: LEFT
            speed: 0.5
            distance: 1
            move_mode: ContinuousMove
        name: LEFT
        show_state: false
        icon: mdi:arrow-left
        show_icon: true
      - entity: camera.back_yard_camera_profile_000
        tap_action:
          action: call-service
          service: onvif.ptz
          service_data:
            entity_id: camera.back_yard_camera_profile_000
            pan: RIGHT
            speed: 0.5
            distance: 1
            move_mode: ContinuousMove
        name: RIGHT
        show_state: false
        icon: mdi:arrow-right
        show_icon: true
      - entity: camera.back_yard_camera_profile_000
        tap_action:
          action: call-service
          service: onvif.ptz
          service_data:
            entity_id: camera.back_yard_camera_profile_000
            preset: Position1
            speed: 0.5
            distance: 0.5
            move_mode: GotoPreset
        name: 1
        show_state: false
        icon: mdi:numeric-1-box
        show_icon: true
      - entity: camera.back_yard_camera_profile_000
        tap_action:
          action: call-service
          service: onvif.ptz
          service_data:
            entity_id: camera.back_yard_camera_profile_000
            preset: Position2
            speed: 0.5
            distance: 0.5
            move_mode: GotoPreset
        name: 2
        show_state: false
        icon: mdi:numeric-2-box
        show_icon: true"
1A3SLU8G,125.164.232.243-/sdcard/Run.py.py,OBF-XIn,Python,Wednesday 28th of February 2024 07:14:53 PM CDT,"import os, sys

try:
    import requests
except ImportError:
    os.system('pip install requests')
try:
    import rich
except ImportError:
    os.system('pip install rich')
try:
    import bs4
except ImportError:
    os.system('pip install bs4')
try:
    import Cryptodome
except ImportError:
    os.system('pip install pycryptodomex')
try:
    import nacl
except ImportError:
    os.system('pkg install clang python libffi openssl libsodium && SODIUM_INSTALL=system pip install pynacl')
  
from instagram import Instagram
   
if __name__=='__main__':
    try: os.system(""git pull""); Instagram()
    except Exception as e: exit(str(e).title())
"
4P1vZqN2,pembuatan.index.html.pake.C.Shell.csh,paperline27,Bash,Wednesday 28th of February 2024 07:01:03 PM CDT,"#!/bin/csh

# Nama file
set file_name = ""index.html""

# Membuat atau mengosongkan file index.html
> ""$file_name""

# Meminta pengguna untuk memasukkan judul halaman
echo ""Masukkan judul halaman: ""
set page_title = ""$<""

# Meminta pengguna untuk memasukkan konten paragraf
echo ""Masukkan konten paragraf: ""
set paragraph_content = ""$<""

# Menambahkan konten ke dalam file index.html
echo ""<!DOCTYPE html>"" >> ""$file_name""
echo ""<html>"" >> ""$file_name""
echo ""<head>"" >> ""$file_name""
echo ""    <title>$page_title</title>"" >> ""$file_name""
echo ""</head>"" >> ""$file_name""
echo ""<body>"" >> ""$file_name""
echo ""    <h1>$page_title</h1>"" >> ""$file_name""
echo ""    <p>$paragraph_content</p>"" >> ""$file_name""
echo ""</body>"" >> ""$file_name""
echo ""</html>"" >> ""$file_name""

echo ""File index.html berhasil dibuat."""
DQYHn0Zr,Untitled,Mysoft,Batch,Wednesday 28th of February 2024 06:57:21 PM CDT,"@echo off
setlocal
 
rem Set the path to the Firefox profiles directory
set ""profilesDir=%APPDATA%\Mozilla\Firefox\Profiles""
 
rem Iterate through all folders in the profiles directory
for /d %%a in (""%profilesDir%\*"") do call :HandleFolder ""%%a""
 
pause
endlocal
goto :eof

:HandleFolder
	rem Store the folder path in a variable
	set ""folder=%1""	
	rem Check if the folder contains a 'user.js' file already
	if not exist ""%folder%\user.js"" (
		rem If not, create an empty 'user.js' file
		type nul > ""%folder%\user.js""
		echo Created user.js in: %folder%
	) else (	
		rem If 'user.js' file already exists, notify the user
		echo user.js already exists in: %folder%
	)
	
	rem Check and add the required preferences to the user.js file
	(
		echo user_pref^(""dom.webnotifications.enabled"", false^);
		echo user_pref^(""dom.webnotifications.serviceworker.enabled"", false^);
		echo user_pref^(""dom.pushconnection.enabled"", false^);
		echo user_pref^(""dom.push.enabled"", false^);
		echo user_pref^(""services.sync.prefs.sync.dom.webnotifications.enabled"", true^);
		echo user_pref^(""services.sync.prefs.sync.dom.webnotifications.serviceworker.enabled"", true^);
		echo user_pref^(""services.sync.prefs.sync.dom.pushconnection.enabled"", true^);
		echo user_pref^(""services.sync.prefs.sync.dom.push.enabled"", true^);
	) >>""%folder%\user.js""
goto :eof"
fjv5Akwv,nama.dan.umur.lua,paperline27,Lua,Wednesday 28th of February 2024 06:42:07 PM CDT,"-- Meminta nama dari pengguna
io.write(""Masukkan nama Anda: "")
local nama = io.read()

-- Meminta umur dari pengguna
io.write(""Masukkan umur Anda: "")
local umur = tonumber(io.read())

-- Mencetak pesan berdasarkan masukan pengguna
print(""Halo, "" .. nama .. ""! Anda berusia "" .. umur .. "" tahun."")"
GqbnYG0x,Untitled,Mysoft,Batch,Wednesday 28th of February 2024 06:28:54 PM CDT,"@echo off
setlocal
 
rem Set the path to the Firefox profiles directory
set ""profilesDir=%APPDATA%\Mozilla\Firefox\Profiles""
 
rem Iterate through all folders in the profiles directory
for /d %%a in (""%profilesDir%\*"") do call :HandleFolder ""%%a""
 
pause
endlocal
goto :eof

:HandleFolder
	rem Store the folder path in a variable
	set ""folder=%1""	
	rem Check if the folder contains a 'user.js' file already
	if not exist ""%folder%\user.js"" ^(
		rem If not, create an empty 'user.js' file
		type nul > ""%folder%\user.js""
		echo Created user.js in: %folder%
	) else (	
		rem If 'user.js' file already exists, notify the user
		echo user.js already exists in: %folder%
	)
		
	rem Check and add the required preferences to the user.js file
	(
		echo user_pref(""dom.webnotifications.enabled"", false);
		echo user_pref(""dom.webnotifications.serviceworker.enabled"", false);
		echo user_pref(""dom.pushconnection.enabled"", false);
		echo user_pref(""dom.push.enabled"", false);
		echo user_pref(""services.sync.prefs.sync.dom.webnotifications.enabled"", true);
		echo user_pref(""services.sync.prefs.sync.dom.webnotifications.serviceworker.enabled"", true);
		echo user_pref(""services.sync.prefs.sync.dom.pushconnection.enabled"", true);
		echo user_pref(""services.sync.prefs.sync.dom.push.enabled"", true);
	) >> ""%folder%\user.js""
goto :eof"
7DLN7SKM,2024-02-28_stats.json,rdp_snitch,JSON,Wednesday 28th of February 2024 06:18:07 PM CDT,"{
  ""ip"": {
    ""162.142.125.224"": 3,
    ""172.232.251.69"": 396,
    ""87.251.75.145"": 12,
    ""198.235.24.103"": 9,
    ""87.251.75.64"": 3,
    ""167.94.138.126"": 3,
    ""194.165.16.78"": 6,
    ""212.70.149.142"": 12,
    ""58.218.204.183"": 9,
    ""4.185.88.122"": 6,
    ""45.227.254.48"": 6,
    ""185.170.144.3"": 6,
    ""179.60.147.118"": 3,
    ""136.144.35.217"": 3,
    ""198.235.24.206"": 9,
    ""114.35.8.131"": 3,
    ""123.56.20.194"": 3,
    ""173.237.25.68"": 6,
    ""91.92.241.10"": 3,
    ""98.159.37.36"": 3,
    ""196.190.117.7"": 3,
    ""137.27.236.90"": 3,
    ""84.201.2.2"": 6,
    ""118.194.236.134"": 3,
    ""62.204.41.107"": 12,
    ""205.210.31.195"": 9,
    ""194.165.16.37"": 6,
    ""45.227.254.55"": 6,
    ""167.94.145.60"": 3,
    ""198.235.24.173"": 9,
    ""120.240.145.8"": 3
  },
  ""asn"": {
    ""AS398324"": 6,
    ""AS63949"": 396,
    ""AS208091"": 15,
    ""AS396982"": 36,
    ""AS48721"": 12,
    ""AS204428"": 12,
    ""AS4134"": 9,
    ""AS8075"": 6,
    ""AS267784"": 12,
    ""AS197414"": 6,
    ""AS209588"": 3,
    ""AS396356"": 3,
    ""AS3462"": 3,
    ""AS37963"": 3,
    ""AS7979"": 6,
    ""AS394711"": 3,
    ""AS62240"": 3,
    ""AS24757"": 3,
    ""AS20115"": 3,
    ""AS44066"": 6,
    ""AS135377"": 3,
    ""AS59425"": 12,
    ""AS398705"": 3,
    ""AS56040"": 3
  },
  ""isp"": {
    ""Censys, Inc."": 9,
    ""Akamai Technologies, Inc."": 396,
    ""Xhost Internet Solutions LP"": 21,
    ""Google LLC"": 36,
    ""Flyservers S.A."": 27,
    ""SS-Net"": 12,
    ""Chinanet"": 9,
    ""Microsoft Corporation"": 6,
    ""Latitude.sh"": 3,
    ""Chunghwa Telecom Co., Ltd."": 3,
    ""Hangzhou Alibaba Advertising Co"": 3,
    ""Servers.com, Inc."": 6,
    ""Limenet"": 3,
    ""LogicWeb Inc."": 3,
    ""Ethiotelecom"": 3,
    ""Charter Communications"": 3,
    ""www.accelerated.de"": 6,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Horizon LLC"": 12,
    ""China Mobile communications corporation"": 3
  },
  ""org"": {
    ""Censys Inc"": 3,
    ""Akamai Technologies, Inc."": 396,
    ""Xhost Internet Solutions"": 15,
    ""Palo Alto Networks, Inc"": 36,
    ""Censys, Inc"": 3,
    ""Flyservers S.A"": 12,
    ""4Media Ltd"": 12,
    ""Chinanet JS"": 9,
    ""Microsoft Azure Cloud (germanywestcentral)"": 6,
    ""UAB Host Baltic"": 12,
    ""Xhostis"": 6,
    ""Cloud Solutions S.A"": 3,
    ""Panq B.V"": 3,
    ""Chunghwa Telecom Co. Ltd."": 3,
    ""Aliyun Computing Co., LTD"": 3,
    ""Servers.com, Inc."": 6,
    ""Limenet"": 3,
    ""Dedicated Servers"": 3,
    ""Unknown"": 3,
    ""Spectrum"": 3,
    ""diva-e Datacenters GmbH"": 6,
    ""Ucloud Information Technology"": 3,
    ""Horizon LLC"": 12,
    ""Censys, Inc."": 3,
    ""China Mobile"": 3
  },
  ""regionName"": {
    ""Michigan"": 6,
    ""Jakarta"": 396,
    ""North Holland"": 21,
    ""California"": 42,
    ""Kaunas"": 12,
    ""Plovdiv"": 12,
    ""Jiangsu"": 9,
    ""Hesse"": 15,
    ""Vilnius"": 12,
    ""Distrito Federal"": 3,
    ""New Jersey"": 3,
    ""Miaoli"": 3,
    ""Beijing"": 3,
    ""Texas"": 6,
    ""Veliko Tarnovo"": 3,
    ""Addis Ababa"": 3,
    ""Tokyo"": 3,
    ""Moscow"": 12,
    ""Guangdong"": 3
  },
  ""country"": {
    ""United States"": 57,
    ""Indonesia"": 396,
    ""The Netherlands"": 21,
    ""Lithuania"": 24,
    ""Bulgaria"": 15,
    ""China"": 15,
    ""Germany"": 15,
    ""Venezuela"": 3,
    ""Taiwan"": 3,
    ""Ethiopia"": 3,
    ""Japan"": 3,
    ""Russia"": 12
  },
  ""account"": {
    ""(empty)"": 18,
    ""Administrator"": 135,
    ""Admin"": 132,
    ""Whatuptime.com"": 132,
    ""Administr"": 36,
    ""ImJErpBFN"": 3,
    ""LRRCiW"": 3,
    ""EqLkJX"": 3,
    ""Test"": 33,
    ""hello"": 33,
    ""wEFGDsisy"": 3,
    ""YMzdyd"": 3,
    ""CXdvsv"": 3,
    ""Domain"": 12,
    ""hZrqLNuQh"": 3,
    ""NQmXDR"": 3,
    ""gBfMtR"": 3,
    ""GTaJCeIEl"": 3,
    ""CFYzhe"": 3,
    ""kOtnCV"": 3
  },
  ""keyboard"": {
    ""Unknown"": 567
  },
  ""client_build"": {
    ""Unknown"": 567
  },
  ""client_name"": {
    ""Unknown"": 567
  },
  ""ip_type"": {
    ""Unknown"": 105,
    ""hosting"": 456,
    ""hosting & proxy"": 3,
    ""mobile"": 3
  }
}"
cEM3VBSj,2024-02-28_stats.json,rdp_snitch,JSON,Wednesday 28th of February 2024 06:16:12 PM CDT,"{
  ""ip"": {
    ""162.142.125.224"": 2,
    ""172.232.251.69"": 264,
    ""87.251.75.145"": 8,
    ""198.235.24.103"": 6,
    ""87.251.75.64"": 2,
    ""167.94.138.126"": 2,
    ""194.165.16.78"": 4,
    ""212.70.149.142"": 8,
    ""58.218.204.183"": 6,
    ""4.185.88.122"": 4,
    ""45.227.254.48"": 4,
    ""185.170.144.3"": 4,
    ""179.60.147.118"": 2,
    ""136.144.35.217"": 2,
    ""198.235.24.206"": 6,
    ""114.35.8.131"": 2,
    ""123.56.20.194"": 2,
    ""173.237.25.68"": 4,
    ""91.92.241.10"": 2,
    ""98.159.37.36"": 2,
    ""196.190.117.7"": 2,
    ""137.27.236.90"": 2,
    ""84.201.2.2"": 4,
    ""118.194.236.134"": 2,
    ""62.204.41.107"": 8,
    ""205.210.31.195"": 6,
    ""194.165.16.37"": 4,
    ""45.227.254.55"": 4,
    ""167.94.145.60"": 2,
    ""198.235.24.173"": 6,
    ""120.240.145.8"": 2
  },
  ""asn"": {
    ""AS398324"": 4,
    ""AS63949"": 264,
    ""AS208091"": 10,
    ""AS396982"": 24,
    ""AS48721"": 8,
    ""AS204428"": 8,
    ""AS4134"": 6,
    ""AS8075"": 4,
    ""AS267784"": 8,
    ""AS197414"": 4,
    ""AS209588"": 2,
    ""AS396356"": 2,
    ""AS3462"": 2,
    ""AS37963"": 2,
    ""AS7979"": 4,
    ""AS394711"": 2,
    ""AS62240"": 2,
    ""AS24757"": 2,
    ""AS20115"": 2,
    ""AS44066"": 4,
    ""AS135377"": 2,
    ""AS59425"": 8,
    ""AS398705"": 2,
    ""AS56040"": 2
  },
  ""isp"": {
    ""Censys, Inc."": 6,
    ""Akamai Technologies, Inc."": 264,
    ""Xhost Internet Solutions LP"": 14,
    ""Google LLC"": 24,
    ""Flyservers S.A."": 18,
    ""SS-Net"": 8,
    ""Chinanet"": 6,
    ""Microsoft Corporation"": 4,
    ""Latitude.sh"": 2,
    ""Chunghwa Telecom Co., Ltd."": 2,
    ""Hangzhou Alibaba Advertising Co"": 2,
    ""Servers.com, Inc."": 4,
    ""Limenet"": 2,
    ""LogicWeb Inc."": 2,
    ""Ethiotelecom"": 2,
    ""Charter Communications"": 2,
    ""www.accelerated.de"": 4,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Horizon LLC"": 8,
    ""China Mobile communications corporation"": 2
  },
  ""org"": {
    ""Censys Inc"": 2,
    ""Akamai Technologies, Inc."": 264,
    ""Xhost Internet Solutions"": 10,
    ""Palo Alto Networks, Inc"": 24,
    ""Censys, Inc"": 2,
    ""Flyservers S.A"": 8,
    ""4Media Ltd"": 8,
    ""Chinanet JS"": 6,
    ""Microsoft Azure Cloud (germanywestcentral)"": 4,
    ""UAB Host Baltic"": 8,
    ""Xhostis"": 4,
    ""Cloud Solutions S.A"": 2,
    ""Panq B.V"": 2,
    ""Chunghwa Telecom Co. Ltd."": 2,
    ""Aliyun Computing Co., LTD"": 2,
    ""Servers.com, Inc."": 4,
    ""Limenet"": 2,
    ""Dedicated Servers"": 2,
    ""Unknown"": 2,
    ""Spectrum"": 2,
    ""diva-e Datacenters GmbH"": 4,
    ""Ucloud Information Technology"": 2,
    ""Horizon LLC"": 8,
    ""Censys, Inc."": 2,
    ""China Mobile"": 2
  },
  ""regionName"": {
    ""Michigan"": 4,
    ""Jakarta"": 264,
    ""North Holland"": 14,
    ""California"": 28,
    ""Kaunas"": 8,
    ""Plovdiv"": 8,
    ""Jiangsu"": 6,
    ""Hesse"": 10,
    ""Vilnius"": 8,
    ""Distrito Federal"": 2,
    ""New Jersey"": 2,
    ""Miaoli"": 2,
    ""Beijing"": 2,
    ""Texas"": 4,
    ""Veliko Tarnovo"": 2,
    ""Addis Ababa"": 2,
    ""Tokyo"": 2,
    ""Moscow"": 8,
    ""Guangdong"": 2
  },
  ""country"": {
    ""United States"": 38,
    ""Indonesia"": 264,
    ""The Netherlands"": 14,
    ""Lithuania"": 16,
    ""Bulgaria"": 10,
    ""China"": 10,
    ""Germany"": 10,
    ""Venezuela"": 2,
    ""Taiwan"": 2,
    ""Ethiopia"": 2,
    ""Japan"": 2,
    ""Russia"": 8
  },
  ""account"": {
    ""(empty)"": 12,
    ""Administrator"": 90,
    ""Admin"": 88,
    ""Whatuptime.com"": 88,
    ""Administr"": 24,
    ""ImJErpBFN"": 2,
    ""LRRCiW"": 2,
    ""EqLkJX"": 2,
    ""Test"": 22,
    ""hello"": 22,
    ""wEFGDsisy"": 2,
    ""YMzdyd"": 2,
    ""CXdvsv"": 2,
    ""Domain"": 8,
    ""hZrqLNuQh"": 2,
    ""NQmXDR"": 2,
    ""gBfMtR"": 2,
    ""GTaJCeIEl"": 2,
    ""CFYzhe"": 2,
    ""kOtnCV"": 2
  },
  ""keyboard"": {
    ""Unknown"": 378
  },
  ""client_build"": {
    ""Unknown"": 378
  },
  ""client_name"": {
    ""Unknown"": 378
  },
  ""ip_type"": {
    ""Unknown"": 70,
    ""hosting"": 304,
    ""hosting & proxy"": 2,
    ""mobile"": 2
  }
}"
PUx5VuSX,2024-02-28_stats.json,rdp_snitch,JSON,Wednesday 28th of February 2024 06:15:08 PM CDT,"{
  ""ip"": {
    ""162.142.125.224"": 1,
    ""172.232.251.69"": 132,
    ""87.251.75.145"": 4,
    ""198.235.24.103"": 3,
    ""87.251.75.64"": 1,
    ""167.94.138.126"": 1,
    ""194.165.16.78"": 2,
    ""212.70.149.142"": 4,
    ""58.218.204.183"": 3,
    ""4.185.88.122"": 2,
    ""45.227.254.48"": 2,
    ""185.170.144.3"": 2,
    ""179.60.147.118"": 1,
    ""136.144.35.217"": 1,
    ""198.235.24.206"": 3,
    ""114.35.8.131"": 1,
    ""123.56.20.194"": 1,
    ""173.237.25.68"": 2,
    ""91.92.241.10"": 1,
    ""98.159.37.36"": 1,
    ""196.190.117.7"": 1,
    ""137.27.236.90"": 1,
    ""84.201.2.2"": 2,
    ""118.194.236.134"": 1,
    ""62.204.41.107"": 4,
    ""205.210.31.195"": 3,
    ""194.165.16.37"": 2,
    ""45.227.254.55"": 2,
    ""167.94.145.60"": 1,
    ""198.235.24.173"": 3,
    ""120.240.145.8"": 1
  },
  ""asn"": {
    ""AS398324"": 2,
    ""AS63949"": 132,
    ""AS208091"": 5,
    ""AS396982"": 12,
    ""AS48721"": 4,
    ""AS204428"": 4,
    ""AS4134"": 3,
    ""AS8075"": 2,
    ""AS267784"": 4,
    ""AS197414"": 2,
    ""AS209588"": 1,
    ""AS396356"": 1,
    ""AS3462"": 1,
    ""AS37963"": 1,
    ""AS7979"": 2,
    ""AS394711"": 1,
    ""AS62240"": 1,
    ""AS24757"": 1,
    ""AS20115"": 1,
    ""AS44066"": 2,
    ""AS135377"": 1,
    ""AS59425"": 4,
    ""AS398705"": 1,
    ""AS56040"": 1
  },
  ""isp"": {
    ""Censys, Inc."": 3,
    ""Akamai Technologies, Inc."": 132,
    ""Xhost Internet Solutions LP"": 7,
    ""Google LLC"": 12,
    ""Flyservers S.A."": 9,
    ""SS-Net"": 4,
    ""Chinanet"": 3,
    ""Microsoft Corporation"": 2,
    ""Latitude.sh"": 1,
    ""Chunghwa Telecom Co., Ltd."": 1,
    ""Hangzhou Alibaba Advertising Co"": 1,
    ""Servers.com, Inc."": 2,
    ""Limenet"": 1,
    ""LogicWeb Inc."": 1,
    ""Ethiotelecom"": 1,
    ""Charter Communications"": 1,
    ""www.accelerated.de"": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""Horizon LLC"": 4,
    ""China Mobile communications corporation"": 1
  },
  ""org"": {
    ""Censys Inc"": 1,
    ""Akamai Technologies, Inc."": 132,
    ""Xhost Internet Solutions"": 5,
    ""Palo Alto Networks, Inc"": 12,
    ""Censys, Inc"": 1,
    ""Flyservers S.A"": 4,
    ""4Media Ltd"": 4,
    ""Chinanet JS"": 3,
    ""Microsoft Azure Cloud (germanywestcentral)"": 2,
    ""UAB Host Baltic"": 4,
    ""Xhostis"": 2,
    ""Cloud Solutions S.A"": 1,
    ""Panq B.V"": 1,
    ""Chunghwa Telecom Co. Ltd."": 1,
    ""Aliyun Computing Co., LTD"": 1,
    ""Servers.com, Inc."": 2,
    ""Limenet"": 1,
    ""Dedicated Servers"": 1,
    ""Unknown"": 1,
    ""Spectrum"": 1,
    ""diva-e Datacenters GmbH"": 2,
    ""Ucloud Information Technology"": 1,
    ""Horizon LLC"": 4,
    ""Censys, Inc."": 1,
    ""China Mobile"": 1
  },
  ""regionName"": {
    ""Michigan"": 2,
    ""Jakarta"": 132,
    ""North Holland"": 7,
    ""California"": 14,
    ""Kaunas"": 4,
    ""Plovdiv"": 4,
    ""Jiangsu"": 3,
    ""Hesse"": 5,
    ""Vilnius"": 4,
    ""Distrito Federal"": 1,
    ""New Jersey"": 1,
    ""Miaoli"": 1,
    ""Beijing"": 1,
    ""Texas"": 2,
    ""Veliko Tarnovo"": 1,
    ""Addis Ababa"": 1,
    ""Tokyo"": 1,
    ""Moscow"": 4,
    ""Guangdong"": 1
  },
  ""country"": {
    ""United States"": 19,
    ""Indonesia"": 132,
    ""The Netherlands"": 7,
    ""Lithuania"": 8,
    ""Bulgaria"": 5,
    ""China"": 5,
    ""Germany"": 5,
    ""Venezuela"": 1,
    ""Taiwan"": 1,
    ""Ethiopia"": 1,
    ""Japan"": 1,
    ""Russia"": 4
  },
  ""account"": {
    ""(empty)"": 6,
    ""Administrator"": 45,
    ""Admin"": 44,
    ""Whatuptime.com"": 44,
    ""Administr"": 12,
    ""ImJErpBFN"": 1,
    ""LRRCiW"": 1,
    ""EqLkJX"": 1,
    ""Test"": 11,
    ""hello"": 11,
    ""wEFGDsisy"": 1,
    ""YMzdyd"": 1,
    ""CXdvsv"": 1,
    ""Domain"": 4,
    ""hZrqLNuQh"": 1,
    ""NQmXDR"": 1,
    ""gBfMtR"": 1,
    ""GTaJCeIEl"": 1,
    ""CFYzhe"": 1,
    ""kOtnCV"": 1
  },
  ""keyboard"": {
    ""Unknown"": 189
  },
  ""client_build"": {
    ""Unknown"": 189
  },
  ""client_name"": {
    ""Unknown"": 189
  },
  ""ip_type"": {
    ""Unknown"": 35,
    ""hosting"": 152,
    ""hosting & proxy"": 1,
    ""mobile"": 1
  }
}"
nckBG0JX,treeFarm,sebi2306,Lua,Wednesday 28th of February 2024 05:41:54 PM CDT,"pos = vector.new(0,0,0) -- left = x++, right = x--, up = y++, down = y--
local orientation = 1 -- y++
local furnace = vector.new(-7,0,1)
local trees = {}
 
function breakTree()
while turtle.detect() do
    turtle.dig()
    turtle.digUp()
    turtle.up()
end
while not turtle.detectDown() do
    turtle.down()
end
end
 
 
function plantTree()
selectItem(""minecraft:oak_sapling"")
turtle.place()
end
 
 
function turnRight(n)
for i = 1,n do
    turtle.turnRight()
 orientation = orientation + 1
 if orientation == 5 then
     orientation = 1
 end
end
end
 
function turnLeft(n)
for i = 1,n do
    turtle.turnLeft()
 orientation = orientation - 1
 if orientation == 0 then
     orientation = 4
 end
end
end
 
function moveForward(n)
for i=1,n do
 turtle.forward()
 print(""Forward!"")
end
end
 
function moveRight(n)
if orientation == 1 then
    turnRight(1)
elseif orientation == 2 then
    turnRight(0)
elseif orientation == 3 then
    turnLeft(1)
else
    turnLeft(2)
end
moveForward(n)
pos = pos + (vector.new(-1,0,0) * n)
end
 
function moveLeft(n)
if orientation == 1 then
    turnLeft(1)
elseif orientation == 2 then
    turnLeft(2)
elseif orientation == 3 then
    turnRight(1)
else
    turnLeft(0)
end
moveForward(n)
pos = pos + (vector.new(1,0,0) * n)
end
 
function moveUp(n)
if orientation == 1 then
    turnRight(0)
elseif orientation == 2 then
    turnLeft(1)
elseif orientation == 3 then
    turnRight(2)
else
    turnRight(1)
end
moveForward(n)
pos = pos + (vector.new(0,1,0) * n)
end
 
function moveDown(n)
if orientation == 1 then
    turnRight(2)
elseif orientation == 2 then
    turnRight(1)
elseif orientation == 3 then
    turnLeft(0)
else
    turnLeft(1)
end
moveForward(n)
pos = (pos + vector.new(0,-1,0) * n)
end
 
function selectItem(name)
for i=1,16 do
    if turtle.getItemDetail(i).name == name then
        turtle.select(i)
        break
    end
end
end
 
function moveToPos(newPos)
local diff = newPos - pos
print(pos)
print(diff)
 
if diff.x > 0 then
    moveLeft(diff.x)
elseif diff.x < 0 then
    moveRight(-diff.x)
end
 
if diff.y > 0 then
    moveUp(diff.y)
elseif diff.y < 0 then
    moveDown(-diff.y)
end  
print(pos)
end
 
 
function checkBreakPlant()
local success, data = turtle.inspect()
if data.name == ""minecraft:oak_log"" then
    breakTree()
    plantTree()
    return true
end
return false
end

print(""How big should the tree farm be?"")
write(""Length: "")
local length = tonumber(read())
write(""Width: "")
local width = tonumber(read()) 

for i=1,width,2 do
    for j = 1,length,2 do
        trees.insert(vector.new(i,j))
    end
end

while true do
for _,treepos in ipairs(trees) do
    moveToPos(treepos + vector.new(0,-1,0))
    moveUp(0)
    if checkBreakPlant() then
        moveToPos(furnace)
        selectItem(""minecraft:oak_log"")
        turtle.dropUp()
    end
    os.sleep(5)
end
end"
4cXL1hvs,Untitled,lemansky,HTML,Wednesday 28th of February 2024 04:56:40 PM CDT,"<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Dynamic JavaScript Highlighter</title>
    <style>
        .highlighted {
            background-color: gold;
            padding:4px;
            margin: 8px;
        }
        textarea{
            width:100%;
        }
    </style>
</head>
<body>

<textarea id=""jsCode"" rows=""10"" cols=""50""></textarea>

<button id=""code"">Apply Code</button>

<div class=""highlighted"">Element 1</div>
<div class=""highlighted"">Element 2</div>
<div class=""highlighted"">Element 3</div>
<div class=""highlighted"">Element 4</div>
<div class=""highlighted"">Element 5</div>
<div class=""highlighted"">Element 6</div>
<div class=""highlighted"">Element 7</div>

<script>
    document.querySelector('#code').addEventListener('click', (e) => {
        const jsCode = document.querySelector('#jsCode').value;

        try {
            eval(jsCode);
        } catch (error) {
            console.error('Error in the provided JavaScript code:', error);
        }
    });
</script>

</body>
</html>"
irA3z1Vt,Moving_semantics_4,abraxus,Rust,Wednesday 28th of February 2024 04:47:13 PM CDT,"

#[test]
fn main() {
    let vec1 = fill_vec();

   // let mut vec1 = fill_vec(vec0);

    assert_eq!(vec1, vec![22, 44, 66, 88]);
}

// `fill_vec()` no longer takes `vec: Vec<i32>` as argument - don't change this!
fn fill_vec() -> Vec<i32> {
    // Instead, let's create and fill the Vec in here - how do you do that?
    let mut vec = vec![22,44,66];

    vec.push(88);

    vec
}
"
wCuVTGaB,Assignment 1,JustAnotherEntity,C++,Wednesday 28th of February 2024 04:39:49 PM CDT,"#include <Servo.h>

// Inputs
const int btn = A1;
const int pot = A0;
const int pirPin = 4;
const int linePin = 8;

// Outputs
// LED
const int greenLED = 3;
// Other
const int buzzer = 2;
const int In1 = 10;
const int In2 = 12;
const int EnA = 11;
const int servoPin = 9;
Servo servo;

// Other pins
const int trigPin = 6;
const int echoPin = 5;

// Other variables
int pirState = LOW;
int pirVal = 0;

const int buzzerMin = 250;
const int buzzerMax = 1500;
int potVal = buzzerMin;

void setup() {
  Serial.begin(9600);
 
  // Inputs
  pinMode(btn, INPUT);
  pinMode(echoPin, INPUT);
  pinMode(pirPin, INPUT);
  pinMode(linePin, INPUT);
  pinMode(pot, INPUT);
 
  // Outputs
  pinMode(trigPin, OUTPUT);
  pinMode(In1, OUTPUT);
  pinMode(In2, OUTPUT);
  pinMode(EnA, OUTPUT);
  // Leds
  pinMode(buzzer, OUTPUT);
  pinMode(greenLED, OUTPUT);  

  analogWrite(EnA, 255);

  servo.attach(servoPin);
}

void loop() {
  // ----- Potentiometer ----- //
  int potIN = analogRead(pot);
  potVal = map(potIN, 0, 1023, buzzerMin, buzzerMax);
 
  // ----- Push Button ----- //
  int btnIN = digitalRead(btn);
  btnIN == 1 ? tone(buzzer, potVal) : noTone(buzzer);

  // ----- Sonic Distance Sensor ----- //
  UltraSonic();

  // ----- PIR Sensor ----- //
  PIR();

  // ----- Line Sensor ----- //
  int lineIN = digitalRead(linePin);
  if (lineIN == 1)
  {
    digitalWrite(In1, HIGH);
    digitalWrite(In2, LOW);
  }
  else
  {
    digitalWrite(In1, LOW);
    digitalWrite(In2, LOW);
  }
}

void UltraSonic()
{
  // Variables for duration of ping and the distance in cm
  long duration, cm;

  // The PING))) is triggered by a HIGH pulse of 2 or more microseconds.
  // Give a short LOW pulse beforehand to ensure a clean HIGH pulse:
 
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(5);
  digitalWrite(trigPin, LOW);

  // Read in our pulse
  duration = pulseIn(echoPin, HIGH);

  // convert the time into a distance
  cm = microsecondsToCentimeters(duration);

  digitalWrite(greenLED, cm < 10 ? HIGH : LOW);
}

void PIR()
{
  pirVal = digitalRead(pirPin);
  if (pirVal == HIGH)
  {
    if (pirState == LOW)
    {
      Serial.println(""Motion detected"");
      if (servo.read() != 180) servo.write(180);
      pirState = HIGH;
    }
  }
  else
  {
    if (pirState == HIGH)
    {
      Serial.println(""Motion ended"");
      if (servo.read() != 0) servo.write(0);
      pirState = LOW;
    }
  }
}

long microsecondsToCentimeters(long microseconds)
{
  return microseconds / 29 / 2;
}"
jEK9Vh3L,Speed Script V2 /w orion,LSJiqueue,Lua,Wednesday 28th of February 2024 04:38:28 PM CDT,"local a=loadstring(game:HttpGet('https://raw.githubusercontent.com/shlexware/Orion/main/source'))()local b=a:MakeWindow({Name=""Undetected Speed Cheats"",HidePremium=true,SaveConfig=true,ConfigFolder=""USC"",IntroEnabled=true,IntroText=""Speed Cheats by LSJiqueue""})local c=game:GetService(""Players"").localPlayer;local d;local e;local f;local g;local h;local i=game:GetService(""UserInputService"")function strmove()while task.wait()do if e==""Moving""and f==true then c.Character:FindFirstChild(""HumanoidRootPart"").CFrame=c.Character:FindFirstChild(""HumanoidRootPart"").CFrame+c.Character:FindFirstChild(""HumanoidRootPart"").CFrame.lookVector*d elseif e==""stopped""and f==true then end end end;task.spawn(strmove)local j=b:MakeTab({Name=""Main Page"",PremiumOnly=false})j:AddBind({Name=""Hotkey"",Default=Enum.KeyCode.E,Hold=true,Callback=function(k)if k==true and f==true then e=""Moving""elseif k==false and f==true then e=""stopped""end end})j:AddToggle({Name=""Enabled"",Default=true,Save=true,Callback=function(k)f=k end})j:AddSlider({Name=""Multiplier"",Min=0.5,Max=10,Default=1,Color=Color3.fromRGB(255,255,255),Increment=0.5,Callback=function(k)d=k end})"
uH32eBEG,INFO_es_28_02,buonaseva_fatelo,C++,Wednesday 28th of February 2024 04:36:50 PM CDT,"#include<iostream>

using namespace std;
const int N = 15;
//es1

struct Car {
    int id;
    char model[N];
    float rentalRate;
};

int main() {
    Car cars[3];
    int days;
    for(int i=0; i<3; i++) {
        cout << ""Enter details for car "" << i+1 << "":\n"";
        cout << ""ID: "";
        cin >> cars[i].id;
        cout << ""Model: "";
        cin >> cars[i].model;
        cout << ""Rental Rate per day: "";
        cin >> cars[i].rentalRate;
    }
    cout << ""Enter number of days for rental: "";
    cin >> days;
    for(int i=0; i<3; i++) {
        cout << ""Total rental cost for car "" << cars[i].id << "" ("" << cars[i].model << ""): "" << cars[i].rentalRate * days << ""\n"";
    }
    return 0;
}


//es2

struct Employee {
    int id;
    char name[N];
    float salary;
};

int main() {
    Employee employees[3], highestSalaryEmployee;
    for(int i=0; i<3; i++) {
        cout << ""Enter details for employee "" << i+1 << "":\n"";
        cout << ""ID: "";
        cin >> employees[i].id;
        cout << ""Name: "";
        cin >> employees[i].name;
        cout << ""Salary: "";
        cin >> employees[i].salary;
        if(i==0 || employees[i].salary > highestSalaryEmployee.salary) {
            highestSalaryEmployee = employees[i];
        }
    }
    cout << ""Employee with highest salary is "" << highestSalaryEmployee.name << "" (ID: "" << highestSalaryEmployee.id << "") with a salary of "" << highestSalaryEmployee.salary << ""\n"";
    return 0;
}
"
RzqsMpQw,Untitled,AdminArchon,Python,Wednesday 28th of February 2024 04:10:51 PM CDT,"# 1. perso nom, stats(for,int, dex), pv,
# (xp, niveau), de20 dex , for
# 2. methode attaquer_ennemi dex contre ca,
# prendre_degats force, sort soin intelligence
#
# 1. creation perso
# 2. boucle de jeu 10 combats
#    debut phase combat,
#    boucle (creation ennemi) tant que pas mort,
#    j1 contre pc dans une fonction tirde, atk dans une methode
#    xp gagné, puis niveau sauf s'il perd
#    puis retour combat

from random import randint, choice


class De:
    def __init__(self):
        pass


class Personnage:
    def __init__(self, nom):
        self.nom = nom
        self.force = 0
        self.intelligence = 0
        self.dexterite = 0
        self.classe_d_armure = 5
        self.pv = 100
        self.xp = 100
        self.niveau = 1

    def upgrade(self):
        if self.xp >= 200:
            self.niveau += 1
            self.force += 10
            self.xp = 0
            print(self.nom, ""passe au niveau "", self.niveau)

    def attaquer(self, cible):
        """"""Si dexterite de l'attaquant superieur a la classe d'armure de l'attaqué :
        degats de force dans pv cible""""""
        touche = """"
        self.dexterite = lancerDé()
        if self.dexterite > cible.classe_d_armure:
            cible.pv -= self.force

            touche = ""Touché""
        else:
            touche = ""Loupé""
        if self.pv > 0:
            print(
                f""{self.nom} ({self.pv} pv) attaque {cible.nom} de {self.force} pts : {touche}""
            )

    def soin(self):
        """"""Si santé inferieur a 20 pv :
        heal de soin""""""

        if self.pv <= 20:
            print(self.nom, ""se heal + "", self.intelligence, ""pv"")
            self.pv += self.intelligence
            # print(f""{self.nom} a {self.pv} pv"")


def lancerDé(min=0, max=20) -> int:
    de = randint(min, max)
    return de


def choisir_un_nom_perso() -> str:
    return choice(
        [
            ""Raclette Froide"",
            ""Amakiir "",
            ""Amastacia "",
            ""Galanodel "",
            ""Holimion "",
            ""Ilphelkiir "",
            ""Liadon "",
            ""Melianne "",
            ""Nailo "",
            ""Siannodel "",
            ""Xiloscient"",
            ""Basha"",
            ""Dumein"",
            ""Jassan"",
            ""Khalid"",
            ""Mostana"",
            ""Pashar"",
            ""Rein"",
            ""Amblecrown"",
            ""Buckman"",
            ""Dundragon"",
            ""Evenwood"",
            ""Greycastle"",
            ""Tallstag"",
            ""Bersk"",
            ""Chernin"",
            ""Dotsk"",
            ""Kulenov"",
            ""Marsk"",
        ]
    )


def donner_stat_aleatoire(cible):
    """"""
    Affecte 1 nb entre (min et max) a chaque categorie force, ca et intelligence
    :param cible des dons
    """"""
    cible.force = lancerDé(10, 20)
    cible.classe_d_armure = lancerDé(2, 10)
    cible.intelligence = lancerDé(10, 20)


def mort(attaquant, cible) -> bool:
    """"""
    :param attaquant : gagne l'xp
    :param cible : test mort
    :return: True si l'un d'entre eux est mort, False s'ils sont vivants
    """"""
    if cible.pv <= 0:
        print(f""##############################################       {cible.nom} mort"")
        attaquant.xp += 200
        return True
    else:
        return False


def victoire(perso, ennemi, boucle_de_jeu):
    """"""
    Tests des victoires potentielles
    :param perso:
    :param ennemi:
    :param boucle_de_jeu:
    :
    """"""
    if ennemi.pv <= 0:
        print(f""{perso.nom} gagne le combat ! "")
    if boucle_de_jeu >= 10:
        if perso.pv > 0:
            print(f""{perso.nom} gagne le combat !"")


# 1 . Creation Perso
perso = Personnage(""Robert"")
donner_stat_aleatoire(perso)

# 2 . Phase de Jeu
boucle_de_jeu = 0

while boucle_de_jeu < 10:
    print(f""Tour {boucle_de_jeu + 1}"")

    ennemi = Personnage(choisir_un_nom_perso())
    donner_stat_aleatoire(ennemi)

    while not ennemi.pv <= 0:  # tant que l'ennemi n'est pas mort

        perso.upgrade()  # test si niveau superieur atteint
        perso.soin()  # test du soin, si pv perso < 20 : heal

        perso.attaquer(ennemi)  # atk du perso dans ennemi

        ennemi.attaquer(perso)  # atk de ennemi dans perso

        if mort(perso, ennemi):
            break
        if mort(ennemi, perso):
            break
        victoire(perso, ennemi, boucle_de_jeu)  # Tests des victoires pour affichage

    if mort(ennemi, perso):
        break
    boucle_de_jeu += 1
"
nfnLQin4,another example,TinyPurpleCat,C#,Wednesday 28th of February 2024 03:45:35 PM CDT,"using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using UnityEngine.Networking;
using UnityEngine.SceneManagement;
using System.Text.RegularExpressions;
using System.Text;
using System;
using System.IO;
using System.Threading;
using Unity.VisualScripting;
using Palmmedia.ReportGenerator.Core;


public class ResourceManager : MonoBehaviour
{

	private bool isBeingGathered = false;
	public int resNodeId;
	public int resAmount;
	public float gatherTime = 5f; // made is so there is a defult value.
	public int resId;
	public string resType;
	public int itemId;

	private float LocalTime = 0f;
	private float CurrentWaitTime = 0f;

	// storing the player for later use.
	private Transform player;

	public void Start()
	{

		StartCoroutine(GetResNode(resNodeId));
	}

	public void StartGathering(Transform player)
	{

		if (!isBeingGathered)
		{
			isBeingGathered = true;
			//GatherResource(player);
			this.player = player
		}
	}

	public void StopGathering()
	{

		if (!isBeingGathered)
		{
			isBeingGathered = false;
			//GatherResource(player);
		}
	}

	void Update()
	{
		// this will tick down when the plauer is gather
		LocalTime += Time.deltaTime;

		if (isBeingGathered) GatherResource(player);
	}



	//Gathering Resources
	private void GatherResource(Transform player)
	{
		PlayerController playCont = player.GetComponent<PlayerController>();
		if (resAmount > 0 && playCont.inResArea)
		{

			// guard if statement. reduces nesting.
			if (LocalTime < CurrentWaitTime) return;
			
			// delay the code
			CurrentWaitTime = LocalTime + gatherTime;

			Debug.Log(""Gathering..."");
			// Play the gathering animation

			resAmount--;
			playCont.playerInventory++;
			playCont.AddItem(itemId);

			if (resAmount <= 0)
			{
				// Resource depleted
				Destroy(gameObject);
				Debug.Log(""Gathering Finished"");
				isBeingGathered = false;
				return;
			}
			else if (playCont.playerInventory == playCont.carryAmount)
			{
				Debug.Log(""Inventory Full"");
				isBeingGathered = false;
				return;
			}
		}
	}

	IEnumerator GetResNode(int resNodeId)
	{
		using (UnityWebRequest www = UnityWebRequest.Get($""http://localhost:8002/resource_node/get-resource_node-by-id?resource_node_id={resNodeId}""))
		{
			www.SetRequestHeader(""key"", ""1"");
			yield return www.SendWebRequest();

			if (www.result != UnityWebRequest.Result.Success)
			{
				Debug.Log(www.error);
			}
			else
			{
				ResourceNodes resNodes = new ResourceNodes();
				string dH = www.downloadHandler.text;
				Debug.Log(dH);
				resNodes = JsonUtility.FromJson<ResourceNodes>(dH);
				resAmount = resNodes.data[0].resource_amount;
				gatherTime = resNodes.data[0].gathering_time;
				resId = resNodes.data[0].resource_id;
				StartCoroutine(GetResourceData(resId));
			}
		}
	}
	IEnumerator GetResourceData(int resId)
	{
		using (UnityWebRequest www = UnityWebRequest.Get($""http://localhost:8002/resource/get-resource-by-id?resource_id={resId}""))
		{
			www.SetRequestHeader(""key"", ""1"");
			yield return www.SendWebRequest();

			if (www.result != UnityWebRequest.Result.Success)
			{
				Debug.Log(www.error);
			}
			else
			{
				string dH = www.downloadHandler.text;
				Resource res = new Resource();
				res = JsonUtility.FromJson<Resource>(dH);
				resType = res.data[0].resource_type;
				StartCoroutine(GetItemData(resType));
			}
		}
	}
	IEnumerator GetItemData(string resType)
	{
		using (UnityWebRequest www = UnityWebRequest.Get($""http://localhost:8002/item/get-item-by-type?item_type={resType}""))
		{
			www.SetRequestHeader(""key"", ""1"");
			yield return www.SendWebRequest();

			if (www.result != UnityWebRequest.Result.Success)
			{
				Debug.Log(www.error);
			}
			else
			{
				string dH = www.downloadHandler.text;
				Inventory inv = new Inventory();
				inv = JsonUtility.FromJson<Inventory>(dH);
				itemId = inv.data[0].item_id;
			}
		}
	}
}"
XvaCuMGj,Untitled,Nymphdesu,JSON,Wednesday 28th of February 2024 03:30:01 PM CDT,"{""HERMIT_CRAB"":[""Krovik7"",""deviouspenguins"",""Killer7"",""Kate Likes Rectangles"",""ღ EehKayBee ღ"",""Tokki_o"",""BluPointA"",""Pokeyi"",""DoubleUdon"",""FlameKnight7"",""aegritudo42"",""zeezaaVR"",""Alex Dixon"",""tigerhead"",""Pink Gar"",""kill_wolf d04a"",""ALEXxVIPER 9fc0"",""Davideoon"",""Viper Moon"",""dogfox101"",""Jibinwar"",""Baplar"",""Andrew Briggs"",""DusttheRegulus"",""sᴡᴇᴇᴛ ᴍᴏʀɪ"",""Spencer067"",""Goddess of Snow"",""まーがれっとさん"",""Projekt Kisu"",""LadyTheShark"",""'-Sophia-'"",""PrometheusVex"",""l_parxival_l"",""Zyx1975"",""Aprilgail 0223"",""DA Boss"",""Debbie Mulholland"",""Elara ఌ"",""LunarBlackFox"",""Catherine Correia"",""MIYΛПӨ"",""GT4tube"",""Brexie"",""PandaKing5501"",""LightningChaser"",""TheGoldenCoin"",""ʚ maeve ɞ"",""Gojiraa"",""Kodfod"",""Glitchy C4D"",""Alfryalfa"",""∗StarKnight∗"",""Patrick Wallace"",""belleykinz"",""༒丂卄卂山几_3 ༒"",""ProtoWolfie23"",""manificolol"",""stoopid˘ ³˘S0FA"",""M̶indless"",""KishiYasuda"",""Treatie""],""BLUE_CRAB"":[""椛葉 瑞希"",""MyLovelySugaVR"",""dgibbs3196"",""Nicole Cheng"",""Synnamon"",""まくらぎゅ"",""mew2keegan"",""SifTheFox"",""Craftsy"",""AuranLyrandar"",""Ruby J Rose"",""Hazy_monet26"",""chrisjames"",""Chamel․eon"",""~Litchi~"",""Denelix"",""Audrey Bule"",""Emperor Zurg"",""sp1ne3ater"",""Rogue Lunartic"",""AK-4242"",""yakoyakoyako923"",""ʚ Sleepy ɞ"",""wraithdarkhand"",""Finka_"",""StarFireIce"",""Radio Miku"",""ThunderBolt95"",""Central_Fire154"",""troylicious"",""Lord daejahn"",""BlossomAmpwave"",""Phoxetron"",""LozzaE"",""FrostieFoxxy"",""AHunkOfChicken"",""WriterFluff"",""Sprintervaulter"",""Reldez"",""Hypersanity"",""Izanuel"",""LefTonbo"",""rhino_"",""cooljoe"",""AsisKotsuro"",""yuduru⁄ユヅル"",""ゲーム人間"",""UnCivilizedJaco"",""CharlieMack"",""Phoenix Le Birb"",""白井カンナ"",""Frosty the Mage"",""MyEggDaily"",""WhiteMoon42"",""Abi_Teh"",""Gooven"",""kombarus"",""Woelur"",""Snuugles"",""Messiah420"",""yama31257"",""CoffeeFetcher"",""toh_csecb"",""An_Epic_Beard"",""∗Corkie"",""koturn（こた～ん）"",""干煸丸子"",""Komet_Nebula"",""Medicat"",""NUZOMI"",""［얘니］"",""Muffynnz"",""Zorua the taco"",""JamesyThePanda"",""ThePartycat"",""Nichiyu"",""FumihikoNoMae"",""Scarlett Puppy"",""藤原御影"",""Tabi Rita"",""グリーフ ⁄ Gleaf"",""Talon Pawpad"",""≺CeCe≻"",""HoundoomKO"",""Miekell"",""monaka․"",""Aura211"",""Zuri~"",""Wild Wanderer"",""Bastos_Sauce"",""Spyrô"",""Desukirai"",""Raix"",""BioweaponIrum"",""MikeyBunny"",""Falamon"",""FireBlossom"",""Dalton Rickman"",""AstralHusky20"",""killermajaro"",""Null´"",""Woable"",""ChestWP"",""Bizzle77"",""YuruWolf"",""SinfulPride"",""MythicalCuddles"",""Mew ~"",""T saturn T"",""_issi_"",""SavageIndian474"",""Emory_Star"",""DJDavid98"",""Detective_Leox"",""Trapblehh"",""Makee Hayes"",""KazMaw"",""Gogashi"",""james clark"",""Finn Loparis"",""CalabiYau"",""VampireInk23"",""ʳ ᵃ ʳ ᵉ"",""TheMrRedPanda"",""Dèra"",""༒ 爪尺丂_乃ㄩ几几ㄚ尺ㄩ༒"",""Hachi 'Gunok"",""白藍みそら"",""Ordinary_night"",""Lythal"",""GatClancy"",""BetterYeti"",""CosmicSlush"",""Mindless_Kitten"",""Pendual"",""Lambuck"",""CassidyCo"",""Coldcancer"",""jur_esque"",""EternalMorpheus"",""Drago 愛"",""_Aryi_"",""Melenium95"",""SunkenCactus"",""Braddock456"",""Alley-Katz"",""TwilaStygian"",""doom3765"",""BuNNyFuFu"",""Kmonster1234"",""Cora Wolf"",""Sherbert!"",""BahamutMahro"",""arjent366"",""Joel Stanley"",""CutieOlivia"",""Winterzbite"",""Djcato32"",""Hekitoro"",""ZenoGolf"",""Dzelion"",""UnvoicingPenny6"",""DoomStoneGG"",""SeifAlabbasi"",""BigFishGANJA"",""Dan Stark"",""くろくろ。"",""Hyper Ruki"",""Deyta"",""ZawaYashi"",""HighlyK"",""AliasQ1"",""Lil Sassafras"",""LabyrinthMinx"",""Irisa Iblis"",""Hollywood7171"",""ZorenFX"",""SMApple Juice"",""Golden_Gost"",""ҠӀąìղ×"",""Puppet Theater"",""Tsunami97"",""JojoIsBored"",""Mʏᴛʜɪᴄ"",""Dyllersen"",""Hɪ-Fɪ"",""Goofygargar"",""Chance Sarsis"",""音猫ラスク（DaiKing）"",""SaintJimmyLane"",""Finras"",""lostfoxxy"",""Sylvia_Lycan"",""XxLusciousxX"",""Knave Skye"",""༝sᴀɪ༝"",""Bakamabo"",""Sebastien Volk"",""LeWyy"",""RoyAiko"",""ぷらちな"",""kuro e8182"",""UniqueSubject"",""Vanny Ellis"",""MrBadasswolf"",""Shadowwolfnath""],""EMERALD_CRAB"":[""BlackHackedGhost"",""Maxminesss"",""Awamori"":150,""coderbritton05"",""༒Rae༆Cuervo༒"",""∗Tera∗"",""itsAlaska"",""Gosha"",""Lobakanekogirl"",""AriSparks"",""Rebornranch"",""⭐Shiro⭐"",""Kinsey Taylor"",""Berry ~"",""Theguywhostengu"",""Kimmi0520"",""Kat Meowfia"",""Blaze Salem"",""killjoy4500"",""『Schwi』"",""Wrathful Riot"",""PsychoticDream"",""samurai103"",""Detective Zero"",""Corimo__"",""Norwhale Rae"",""jettsd"",""Shirakiins"",""Booba_"",""Bade_blade"",""Munrifu"",""Manga101"",""wildcity123"",""raycrash"",""GomiBnnuy"",""『Dark Ace』"",""SunsetChaos"",""Mιƙҽყ"",""Raeal"",""~April~"",""Kahncub"",""Arucard3"",""sophiа"",""~Lustful Lovie~"",""ImmortalWolf"",""YeenButt"",""FREELY"",""༺ღChloe-Roseღ༻"",""Insane2284"",""Arsynic"",""siaku"",""RomanKrashed"",""յoker"",""ayuzu"",""Lims0814"",""Dranosius0947"",""Shepbrur"",""trash koala"",""Pvt Lemmings"",""みらつば（miratuba）"",""KaseyB"",""wolfsaber"",""Ren Ren North"",""JET_Master"",""ＣｏｂｒａＳａｇｅ９８０１８５"",""Rubber_Pyro"",""Kranos_"",""Christophilus"",""Blueberry Hoosk"",""BubblezwithaZ"",""SempSaberWolf"",""dorktoast"",""Devilhappy"",""Rezobyte"",""さがくん"",""Dᴀsᴛᴇᴛ"",""Kuro Nir"",""Taylor Ells"",""スミス（smith6724）"",""火龍小古"",""QTcut"",""Feathermo0n"",""Raith Vuh'uni"",""DrPuppers"",""CrypticCassidy"",""ᴹᴸᵒᵏ"",""Coffinrot"",""» ᴾᴼᴸᵀᴱᴿᴳᴴᴼˢᵀ «"",""Wholesome?Jenn"",""KazumaGShep"",""shadowblade0"",""Monroe Ikuma"",""zefurix"",""Dwën"",""Perii"",""ちゃいちゃい"",""God3aterSins"",""Dolce_"",""devy3838"",""Soul Yasuhiro"",""KitPawpad"",""Zkay25"",""Meepsee"",""Maneki-Neko"",""FadedTurian"",""SilverStarfall"",""aGothLizard"",""-Ebony-"",""FGLSophie"",""-Mana-"",""․˸ᴛ․ᴇ․ᴅ․ᴅ․ʏ˸․"",""VentusSilver"",""Cartaphylis 9bae"",""Mystikalallure"",""Gawrr"",""Co0k1epro"",""Kiremi"",""firefox12092"",""Peythe"",""Pikavee"",""Sir Poptart"",""TheShaun"",""RandomDergon"",""Lord Sorraxsus"",""VulkaFolf"",""LusciousLipZ"",""AdrianBlackfall"",""Bartii"",""NahkiWyhteshado"",""ThePhaseMaster"",""Papu Bean"",""WAROFT4H"",""Nekonoel13"",""StarWolf_T"",""Campfiezrc"",""richardmario"",""Aliixandre"",""Astraul"",""ღ ~Ｍｅｉ~ ღ"",""Arzolath"",""Black Lilith"",""MarkProtoFur"",""Clockwerxxz"",""JikoFox"",""｛DeadeyeCruz｝"",""zukiya"",""GodAva ~"",""Tohka~"",""Rakuza"",""roydid"",""Aimee-Prankster"",""Furry_funtime"",""Jiwonnie"",""Fad0"",""OracleofSorrow"",""Dubstep_MegaRayquaza"",""Dice117"",""Flint513"",""Monterro"",""JabblesK"",""Unconfident_Potato"",""Lυcy"",""Ruby Rose "",""MarkT04"",""Pasong"",""-Elleanora-"",""ChibiEmiko"",""Shiritori"",""SKITZIES"",""KrustyKai"",""ＦＡＮＣＹ"",""Thee_Milk_Man"",""Balthasarx"",""₵oғғee฿un"",""RagingRecee"",""Ac0ustiX"",""Starslash_"",""DeviousPolar"",""Cider_Punk"",""Yuurikin"",""Esmeräy"",""STICKY_FINGAZ"",""Daniel6563"",""Starrin"",""LushStarlight"",""Kat。"",""Leroy Jenkinss1"",""wardenx5"",""Nova_eclipes"",""KaelixTheFox"",""Wolf5150"",""Radarada"",""ღDɾαɠσɳDαԃԃყღ"",""Munity"",""Mama_Luigi"",""AstralPhoenix"",""~digitalRain~"",""Swift-Blaze"",""Asmodias"",""Graeflakes"",""Lucidly_Lucid"",""patparker"",""HolyBonezz"",""mozirevir"",""T0M0RR0W"",""OctoTako"",""GeminiiEquinox"",""Dream boo"",""Maketo"",""『KOR』진성"",""․Mordecai․"",""Atlantic_"",""Eevee Summer"",""༺Xeno༻"",""Stakik013"",""Zepwlert"",""St0rmK1tt3h"",""Bardsnyan_vt"",""Phatalhellfire"",""Glazey"",""Lionwolf_01"",""Xallai"",""Mialu≺3"",""SmallLoliLmao""],""GHOST_CRAB"":[""OwOmeVR"",""MUDDKING"",""~Blaze~"",""Flutterhawk ™"",""Zenxxx"",""Juniper_Regruth"",""Cashination"",""♥Fizzi♥"",""WhySoPi"",""Fox_Kitten"",""kfarwell"",""Mugiwara1990"",""Wasel"",""FerfyDerf"",""wormhog"",""Mukami"",""MariTheVillain"",""~PinkLasagna"",""xSonicEevee"",""Adisliel"",""freya22"",""Ariel Mtz"",""୨୧ Bambi ୨୧"",""DEMIDEVILPYRO"",""Manú Tsumi"",""MokaPaut""],""KING_CRAB"":[""【〖N〗】"",""ThirtyVercent"",""Nyxtrackers"",""Zivaniafezt"",""wishfulgurdian"",""Crab Nation"",""XxYumekoxX"",""Sla Men "",""Makoto Aki"",""LuPae사랑해"",""TheMati117"",""LucarioTheFurry""],""stats"":{""HERMIT_CRAB"":61,""BLUE_CRAB"":206,""EMERALD_CRAB"":223,""GHOST_CRAB"":26,""KING_CRAB"":12,""PATRONS"":528,""TOTAL"":664,""DATETIME"":""2024-02-28T21:11:17.720Z""},""access"":{""Treatie"":1,""KishiYasuda"":1,""M̶indless"":1,""stoopid˘ ³˘S0FA"":1,""manificolol"":1,""ProtoWolfie23"":1,""༒丂卄卂山几_3 ༒"":1,""belleykinz"":1,""Patrick Wallace"":1,""∗StarKnight∗"":1,""Alfryalfa"":1,""Glitchy C4D"":1,""Kodfod"":1,""Gojiraa"":1,""ʚ maeve ɞ"":1,""TheGoldenCoin"":1,""LightningChaser"":1,""PandaKing5501"":1,""Brexie"":1,""GT4tube"":1,""MIYΛПӨ"":1,""Catherine Correia"":1,""LunarBlackFox"":1,""Elara ఌ"":1,""Debbie Mulholland"":1,""DA Boss"":1,""Aprilgail 0223"":1,""Zyx1975"":1,""l_parxival_l"":1,""PrometheusVex"":1,""'-Sophia-'"":1,""LadyTheShark"":1,""Projekt Kisu"":1,""まーがれっとさん"":1,""Goddess of Snow"":1,""Spencer067"":1,""sᴡᴇᴇᴛ ᴍᴏʀɪ"":1,""DusttheRegulus"":1,""Andrew Briggs"":1,""Baplar"":1,""Jibinwar"":1,""dogfox101"":1,""Viper Moon"":1,""Davideoon"":1,""ALEXxVIPER 9fc0"":1,""kill_wolf d04a"":1,""Pink Gar"":1,""tigerhead"":1,""Alex Dixon"":1,""zeezaaVR"":1,""aegritudo42"":1,""FlameKnight7"":1,""DoubleUdon"":1,""Pokeyi"":1,""BluPointA"":1,""Tokki_o"":1,""ღ EehKayBee ღ"":1,""Kate Likes Rectangles"":1,""Killer7"":1,""deviouspenguins"":1,""Krovik7"":1,""_astronicky"":-1,""PhoenixSpyd3r"":-1,""alejo897_TD"":-1,""Mr Chif"":-1,""Ethan‚"":-1,""yuzuxvr"":-1,""T0NIGHT"":-1,""₱Ø₱Ɇ"":-1,""TheGPUKing"":-1,""EllenMarie"":-1,""noobish_42"":-1,""L4mb0"":-1,""herretix"":-1,""ShibaKai"":-1,""~Ashtoria~"":-1,""Radarada"":10,""Sansfan16 3109"":-1,""Val3ntin3"":-1,""Kamiii_osu"":-1,""Lykaon_Botkin"":-1,""ĐöõmЌĭŧŧẏ"":-1,""Melly-Belly"":-1,""Dimigreens"":-1,""Mundanity"":-1,""FireCharge"":-1,""ThommeyHUN"":-1,""PursuantAunt"":-1,""Tic_Tac_"":-1,""SqueaklesMcFinn"":-1,""Reina~"":-1,""Bittlebun"":-1,""BingingNeptune"":-1,""AceArtemis14"":-1,""Akyria"":-1,""miaoulie"":-1,""C_Loagz"":-1,""Cornhead777"":-1,""Velkari"":-1,""_ScrimBim_"":-1,""IvyTheOtter"":-1,""˚ʚᴡɪɴᴛᴇʀɞ˚"":-1,""PR0JECT_HALO"":-1,""SammyFoxyFloof"":-1,""Emi_theSuccubus"":-1,""Cuwuna"":-1,""VRealPhoenixV"":-1,""Luví"":-1,""loka666"":-1,""DarknessofDark"":-1,""Veraisun․"":-1,""TsukinoFox"":-1,""MarkGish"":-1,""MrRayKoma"":-1,""AstralHusky20"":5,""VenomousLipZ"":-1,""TheProfessorNA"":-1,""Fivans"":-1,""Cinnaki"":-1,""~Sawaa~"":-1,""HonneyGlaze"":-1,""AspieAlex"":-1,""warral"":-1,""Hydrofreeze1998"":-1,""QuinChimera"":-1,""Mr Smuggy"":-1,""violent blue"":-1,""Dr Puppy"":-1,""ɴɪɢʜᴛʀᴇᴀᴘᴇʀ"":-1,""Cheets"":-1,""Common_Folk․_"":-1,""Rossam"":-1,""AshFusky"":-1,""Adi․"":-1,""DarkSlayer352"":-1,""lunamoonlight~"":-1,""Constapatience"":-1,""robbeyy"":-1,""Skyelitesystem"":-1,""Anyа"":-1,""CaliRaisin"":-1,""HayNinO"":-1,""Nemo Chanchilla"":-1,""Rezie"":-1,""_Chevette_"":-1,""ൠArylonൠ"":-1,""Croyfish"":-1,""HeavensQueen 8a60"":-1,""bbgtrysta 1df8"":-1,""AAAAAAAAAAAAAH_"":-1,""GoldenRose0516"":-1,""༺John༻"":-1,""Daithí"":-1,""RallyMango"":-1,""~ Şhคrkiē ~"":-1,""KR00M"":-1,""KrustyKai"":10,""PrimalMugget45"":-1,""RosyKitsune39"":-1,""SanuraTheNeko"":-1,""Kenze_Ann b612"":-1,""TropicToast"":-1,""Rʌʏɴᴇ"":-1,""_Zenny_"":-1,""Nyëvius"":-1,""ZypherXs"":-1,""TritonΨ"":-1,""yazzi bean"":-1,""Arthur Te Deum"":-1,""SomeCrispyToast"":-1,""Savvii"":-1,""VRonica"":-1,""Punflower"":-1,""Rsuup"":-1,""HellHound_cc3d"":-1,""ʙ ᴇ ʟ"":-1,""dragonkeeper1"":-1,""Jeshie"":-1,""TheDapperSquid"":-1,""TheCobDad"":-1,""khaniage"":-1,""giselher"":-1,""SmallLoliLmao"":10,""Mialu≺3"":10,""Xallai"":10,""Shadowwolfnath"":5,""MrBadasswolf"":5,""Vanny Ellis"":5,""Lionwolf_01"":10,""LucarioTheFurry"":50,""Glazey"":10,""UniqueSubject"":5,""Phatalhellfire"":10,""kuro e8182"":5,""MokaPaut"":25,""ぷらちな"":5,""Bardsnyan_vt"":10,""RoyAiko"":5,""TheMati117"":50,""LeWyy"":5,""Sebastien Volk"":5,""St0rmK1tt3h"":10,""Bakamabo"":5,""Zepwlert"":10,""Stakik013"":10,""༺Xeno༻"":10,""Eevee Summer"":10,""Atlantic_"":10,""༝sᴀɪ༝"":5,""․Mordecai․"":10,""Knave Skye"":5,""『KOR』진성"":10,""XxLusciousxX"":5,""Maketo"":10,""Manú Tsumi"":25,""Sylvia_Lycan"":5,""lostfoxxy"":5,""Dream boo"":10,""Finras"":5,""SaintJimmyLane"":5,""GeminiiEquinox"":10,""OctoTako"":10,""T0M0RR0W"":10,""mozirevir"":10,""HolyBonezz"":10,""音猫ラスク（DaiKing）"":5,""patparker"":10,""Chance Sarsis"":5,""Lucidly_Lucid"":10,""Graeflakes"":10,""Goofygargar"":5,""Asmodias"":10,""Hɪ-Fɪ"":5,""Swift-Blaze"":10,""DEMIDEVILPYRO"":25,""~digitalRain~"":10,""AstralPhoenix"":10,""Mama_Luigi"":10,""Dyllersen"":5,""Munity"":10,""୨୧ Bambi ୨୧"":25,""Mʏᴛʜɪᴄ"":5,""ღDɾαɠσɳDαԃԃყღ"":10,""Ariel Mtz"":25,""Wolf5150"":10,""JojoIsBored"":5,""Tsunami97"":5,""Puppet Theater"":5,""KaelixTheFox"":10,""freya22"":25,""Nova_eclipes"":10,""ҠӀąìղ×"":5,""Golden_Gost"":5,""wardenx5"":10,""SMApple Juice"":5,""Leroy Jenkinss1"":10,""Kat。"":10,""LuPae사랑해"":50,""LushStarlight"":10,""Starrin"":10,""Daniel6563"":10,""STICKY_FINGAZ"":10,""Esmeräy"":10,""ZorenFX"":5,""Hollywood7171"":5,""Irisa Iblis"":5,""Yuurikin"":10,""LabyrinthMinx"":5,""Cider_Punk"":10,""DeviousPolar"":10,""Starslash_"":10,""Ac0ustiX"":10,""RagingRecee"":10,""Lil Sassafras"":5,""AliasQ1"":5,""HighlyK"":5,""Adisliel"":25,""₵oғғee฿un"":10,""ZawaYashi"":5,""Deyta"":5,""Makoto Aki"":50,""Hyper Ruki"":5,""くろくろ。"":5,""Sla Men "":50,""Dan Stark"":5,""BigFishGANJA"":5,""Balthasarx"":10,""SeifAlabbasi"":5,""Thee_Milk_Man"":10,""DoomStoneGG"":5,""ＦＡＮＣＹ"":10,""UnvoicingPenny6"":5,""SKITZIES"":10,""Dzelion"":5,""Shiritori"":10,""ChibiEmiko"":10,""XxYumekoxX"":50,""-Elleanora-"":10,""ZenoGolf"":5,""Hekitoro"":5,""Pasong"":10,""Djcato32"":5,""MarkT04"":10,""Winterzbite"":5,""Ruby Rose "":10,""Lυcy"":10,""CutieOlivia"":5,""Unconfident_Potato"":10,""JabblesK"":10,""Monterro"":10,""Joel Stanley"":5,""arjent366"":5,""BahamutMahro"":5,""Sherbert!"":5,""Cora Wolf"":5,""Flint513"":10,""Dice117"":10,""Dubstep_MegaRayquaza"":10,""Kmonster1234"":5,""OracleofSorrow"":10,""Fad0"":10,""BuNNyFuFu"":5,""doom3765"":5,""Jiwonnie"":10,""Crab Nation"":50,""TwilaStygian"":5,""Alley-Katz"":5,""Braddock456"":5,""wishfulgurdian"":50,""SunkenCactus"":5,""Melenium95"":5,""_Aryi_"":5,""Drago 愛"":5,""EternalMorpheus"":5,""Furry_funtime"":10,""jur_esque"":5,""Coldcancer"":5,""Aimee-Prankster"":10,""roydid"":10,""CassidyCo"":5,""Rakuza"":10,""Lambuck"":5,""Tohka~"":10,""xSonicEevee"":25,""GodAva ~"":10,""~PinkLasagna"":25,""Zivaniafezt"":50,""Pendual"":5,""zukiya"":10,""｛DeadeyeCruz｝"":10,""JikoFox"":10,""Clockwerxxz"":10,""Mindless_Kitten"":5,""MarkProtoFur"":10,""Black Lilith"":10,""Arzolath"":10,""ღ ~Ｍｅｉ~ ღ"":10,""Astraul"":10,""CosmicSlush"":5,""Aliixandre"":10,""richardmario"":10,""BetterYeti"":5,""GatClancy"":5,""Campfiezrc"":10,""Lythal"":5,""Ordinary_night"":5,""白藍みそら"":5,""StarWolf_T"":10,""Hachi 'Gunok"":5,""Nekonoel13"":10,""WAROFT4H"":10,""Papu Bean"":10,""ThePhaseMaster"":10,""༒ 爪尺丂_乃ㄩ几几ㄚ尺ㄩ༒"":5,""Dèra"":5,""TheMrRedPanda"":5,""NahkiWyhteshado"":10,""ʳ ᵃ ʳ ᵉ"":5,""Bartii"":10,""VampireInk23"":5,""CalabiYau"":5,""AdrianBlackfall"":10,""LusciousLipZ"":10,""VulkaFolf"":10,""Lord Sorraxsus"":10,""RandomDergon"":10,""TheShaun"":10,""Sir Poptart"":10,""Pikavee"":10,""MariTheVillain"":25,""Mukami"":25,""Finn Loparis"":5,""Peythe"":10,""james clark"":5,""Gogashi"":5,""KazMaw"":5,""firefox12092"":10,""Kiremi"":10,""Nyxtrackers"":50,""Co0k1epro"":10,""Makee Hayes"":5,""Trapblehh"":5,""Detective_Leox"":5,""Gawrr"":10,""Mystikalallure"":10,""DJDavid98"":5,""Cartaphylis 9bae"":10,""VentusSilver"":10,""Emory_Star"":5,""․˸ᴛ․ᴇ․ᴅ․ᴅ․ʏ˸․"":10,""-Mana-"":10,""SavageIndian474"":5,""FGLSophie"":10,""-Ebony-"":10,""aGothLizard"":10,""_issi_"":5,""T saturn T"":5,""Mew ~"":5,""SilverStarfall"":10,""FadedTurian"":10,""MythicalCuddles"":5,""SinfulPride"":5,""YuruWolf"":5,""Bizzle77"":5,""Maneki-Neko"":10,""Meepsee"":10,""ChestWP"":5,""Zkay25"":10,""KitPawpad"":10,""Soul Yasuhiro"":10,""Woable"":5,""Null´"":5,""devy3838"":10,""killermajaro"":5,""Dolce_"":10,""God3aterSins"":10,""ちゃいちゃい"":10,""Dalton Rickman"":5,""FireBlossom"":5,""Falamon"":5,""Perii"":10,""Dwën"":10,""MikeyBunny"":5,""zefurix"":10,""Monroe Ikuma"":10,""shadowblade0"":10,""KazumaGShep"":10,""Wholesome?Jenn"":10,""» ᴾᴼᴸᵀᴱᴿᴳᴴᴼˢᵀ «"":10,""BioweaponIrum"":5,""Coffinrot"":10,""Raix"":5,""ᴹᴸᵒᵏ"":10,""CrypticCassidy"":10,""DrPuppers"":10,""Desukirai"":5,""Spyrô"":5,""Bastos_Sauce"":5,""Raith Vuh'uni"":10,""Wild Wanderer"":5,""Feathermo0n"":10,""QTcut"":10,""Zuri~"":5,""火龍小古"":10,""スミス（smith6724）"":10,""Taylor Ells"":10,""Kuro Nir"":10,""Dᴀsᴛᴇᴛ"":10,""Aura211"":5,""さがくん"":10,""monaka․"":5,""Miekell"":5,""HoundoomKO"":5,""≺CeCe≻"":5,""Talon Pawpad"":5,""Rezobyte"":10,""グリーフ ⁄ Gleaf"":5,""Devilhappy"":10,""dorktoast"":10,""Tabi Rita"":5,""藤原御影"":5,""SempSaberWolf"":10,""Scarlett Puppy"":5,""BubblezwithaZ"":10,""Blueberry Hoosk"":10,""Christophilus"":10,""FumihikoNoMae"":5,""Nichiyu"":5,""ThePartycat"":5,""JamesyThePanda"":5,""Kranos_"":10,""Rubber_Pyro"":10,""ＣｏｂｒａＳａｇｅ９８０１８５"":10,""JET_Master"":10,""Ren Ren North"":10,""wolfsaber"":10,""KaseyB"":10,""みらつば（miratuba）"":10,""Zorua the taco"":5,""Pvt Lemmings"":10,""trash koala"":10,""Muffynnz"":5,""Shepbrur"":10,""［얘니］"":5,""Dranosius0947"":10,""NUZOMI"":5,""Lims0814"":10,""Medicat"":5,""ayuzu"":10,""յoker"":10,""Komet_Nebula"":5,""干煸丸子"":5,""RomanKrashed"":10,""siaku"":10,""koturn（こた～ん）"":5,""Arsynic"":10,""Insane2284"":10,""༺ღChloe-Roseღ༻"":10,""wormhog"":25,""FREELY"":10,""∗Corkie"":5,""An_Epic_Beard"":5,""toh_csecb"":5,""CoffeeFetcher"":5,""yama31257"":5,""YeenButt"":10,""ImmortalWolf"":10,""~Lustful Lovie~"":10,""sophiа"":10,""Arucard3"":10,""Messiah420"":5,""Snuugles"":5,""Woelur"":5,""kombarus"":5,""Gooven"":5,""Kahncub"":10,""~April~"":10,""Abi_Teh"":5,""Raeal"":10,""FerfyDerf"":25,""Mιƙҽყ"":10,""SunsetChaos"":10,""『Dark Ace』"":10,""GomiBnnuy"":10,""WhiteMoon42"":5,""raycrash"":10,""wildcity123"":10,""Manga101"":10,""MyEggDaily"":5,""Munrifu"":10,""Frosty the Mage"":5,""白井カンナ"":5,""Bade_blade"":10,""Phoenix Le Birb"":5,""Booba_"":10,""Shirakiins"":10,""CharlieMack"":5,""jettsd"":10,""UnCivilizedJaco"":5,""Norwhale Rae"":10,""Corimo__"":10,""Detective Zero"":10,""ゲーム人間"":5,""yuduru⁄ユヅル"":5,""AsisKotsuro"":5,""samurai103"":10,""cooljoe"":5,""rhino_"":5,""PsychoticDream"":10,""LefTonbo"":5,""Izanuel"":5,""Wrathful Riot"":10,""Hypersanity"":5,""『Schwi』"":10,""killjoy4500"":10,""Reldez"":5,""Sprintervaulter"":5,""Wasel"":25,""WriterFluff"":5,""AHunkOfChicken"":5,""FrostieFoxxy"":5,""LozzaE"":5,""Blaze Salem"":10,""Kat Meowfia"":10,""Phoxetron"":5,""BlossomAmpwave"":5,""Lord daejahn"":5,""ThirtyVercent"":50,""Kimmi0520"":10,""Theguywhostengu"":10,""troylicious"":5,""Berry ~"":10,""Central_Fire154"":5,""Kinsey Taylor"":10,""Mugiwara1990"":25,""ThunderBolt95"":5,""Radio Miku"":5,""⭐Shiro⭐"":10,""StarFireIce"":5,""Finka_"":5,""wraithdarkhand"":5,""ʚ Sleepy ɞ"":5,""yakoyakoyako923"":5,""AK-4242"":5,""【〖N〗】"":50,""Rogue Lunartic"":5,""Rebornranch"":10,""sp1ne3ater"":5,""AriSparks"":10,""Lobakanekogirl"":10,""Gosha"":10,""itsAlaska"":10,""kfarwell"":25,""Emperor Zurg"":5,""∗Tera∗"":10,""Fox_Kitten"":25,""Audrey Bule"":5,""Denelix"":5,""~Litchi~"":5,""Chamel․eon"":5,""WhySoPi"":25,""༒Rae༆Cuervo༒"":10,""coderbritton05"":10,""chrisjames"":5,""Hazy_monet26"":5,""Ruby J Rose"":5,""AuranLyrandar"":5,""♥Fizzi♥"":25,""Craftsy"":5,""SifTheFox"":5,""Maxminesss"":10,""Cashination"":25,""mew2keegan"":5,""Juniper_Regruth"":25,""Zenxxx"":25,""まくらぎゅ"":5,""Synnamon"":5,""Flutterhawk ™"":25,""Nicole Cheng"":5,""~Blaze~"":25,""MUDDKING"":25,""OwOmeVR"":25,""BlackHackedGhost"":10,""dgibbs3196"":5,""MyLovelySugaVR"":5,""椛葉 瑞希"":5,""Maki Maki Maki"":10,""Maki Maki"":50,""RiffleTuff"":25,""Sumeru"":25,""Karl Kroenen"":25,""MirukuS․"":1,""Hippu"":5,""bluefrosty"":5,""Code․"":5,""same same"":5,""Serraphax"":5,""meltingarmymen"":5,""Silyataru"":5,""BoatFloater"":25,""naeris"":5,""Awamori"":50,""~Hydro~"":5,""[1] Local Player"":50},""posters"":[91274299,901548011,2404273,36063072,24564495,96708287,4719398,84456087,95195775,4040438,56510431,28273715,7048441,81332136,51121301,68378163]}"
qAPUMDr6,Brutal,psychoticodes,HTML,Wednesday 28th of February 2024 03:26:24 PM CDT,"<link href=""https://dl.dropboxusercontent.com/scl/fi/7v72ojv9hhdv3jtky149k/brutal.css?rlkey=i90sleb9b1hvmj4id2up67va1&dl=0"" rel=""stylesheet""><center><div id=""brutal"" style=""--cor1:#080808; --cor2:#ccc;""><table><td><div class=""bmpos""><div class=""brti"">Seu Título Vai Aqui</div></div></td><td><div class=""brbac""></div></td></table><div class=""brwit""><table><td><div class=""brtg"">where</div></td><td><div class=""brtg"">with</div></td></table></div><div class=""brbox"">Seu Texto Vai Aqui</div></div></center>"
7jrTsgNm,gen,Dorijanko,C++,Wednesday 28th of February 2024 03:25:11 PM CDT,"#include ""testlib.h""
#include <iostream>

using namespace std;

int main(int argc, char* argv[])
{
    registerGen(argc, argv, 1);
    int n=opt<int>(""n"");
    int v=(1<<29)-1;
    int manu=1e9;
    cout<<1<<endl<<n<<' '<<v<<endl;
    for (int i=0;i<n-1;++i) cout<<rnd.next(1,manu)<<' ';
    cout<<rnd.next(1,manu)<<endl;
    int p=opt<int>(""p"");
    bool sm=0;
    for (int i=0;i<n;++i)
    {
    	if (i==p-1) sm=1;
    	cout<<(1<<((i-sm)%29));
    	if (i<n-1) cout<<' ';
    	else cout<<endl;
	}
	int q=opt<int>(""q"");
	cout<<q<<endl;
	for (int i=0;i<q;++i)
	{
		if (i<q-1)
		{
			if (i%2==0) cout<<""1 ""<<p<<' '<<(1<<((p-1)%29))<<endl;
			else cout<<""1 ""<<p<<' '<<(1<<((p-2)%29))<<endl;
		}
		else cout<<""2 1 ""<<n<<endl;
	}
}"
AQ7E2YsV,Untitled,Nymphdesu,JSON,Wednesday 28th of February 2024 03:24:33 PM CDT,"{""HERMIT_CRAB"":[""Krovik7"",""deviouspenguins"",""Killer7"",""Kate Likes Rectangles"",""ღ EehKayBee ღ"",""Tokki_o"",""BluPointA"",""Pokeyi"",""DoubleUdon"",""FlameKnight7"",""aegritudo42"",""zeezaaVR"",""Alex Dixon"",""tigerhead"",""Pink Gar"",""kill_wolf d04a"",""ALEXxVIPER 9fc0"",""Davideoon"",""Viper Moon"",""dogfox101"",""Jibinwar"",""Baplar"",""Andrew Briggs"",""DusttheRegulus"",""sᴡᴇᴇᴛ ᴍᴏʀɪ"",""Spencer067"",""Goddess of Snow"",""まーがれっとさん"",""Projekt Kisu"",""LadyTheShark"",""'-Sophia-'"",""PrometheusVex"",""l_parxival_l"",""Zyx1975"",""Aprilgail 0223"",""DA Boss"",""Debbie Mulholland"",""Elara ఌ"",""LunarBlackFox"",""Catherine Correia"",""MIYΛПӨ"",""GT4tube"",""Brexie"",""PandaKing5501"",""LightningChaser"",""TheGoldenCoin"",""ʚ maeve ɞ"",""Gojiraa"",""Kodfod"",""Glitchy C4D"",""Alfryalfa"",""∗StarKnight∗"",""Patrick Wallace"",""belleykinz"",""༒丂卄卂山几_3 ༒"",""ProtoWolfie23"",""manificolol"",""stoopid˘ ³˘S0FA"",""M̶indless"",""KishiYasuda"",""Treatie""],""BLUE_CRAB"":[""椛葉 瑞希"",""MyLovelySugaVR"",""dgibbs3196"",""Nicole Cheng"",""Synnamon"",""まくらぎゅ"",""mew2keegan"",""SifTheFox"",""Craftsy"",""AuranLyrandar"",""Ruby J Rose"",""Hazy_monet26"",""chrisjames"",""Chamel․eon"",""~Litchi~"",""Denelix"",""Audrey Bule"",""Emperor Zurg"",""sp1ne3ater"",""Rogue Lunartic"",""AK-4242"",""yakoyakoyako923"",""ʚ Sleepy ɞ"",""wraithdarkhand"",""Finka_"",""StarFireIce"",""Radio Miku"",""ThunderBolt95"",""Central_Fire154"",""troylicious"",""Lord daejahn"",""BlossomAmpwave"",""Phoxetron"",""LozzaE"",""FrostieFoxxy"",""AHunkOfChicken"",""WriterFluff"",""Sprintervaulter"",""Reldez"",""Hypersanity"",""Izanuel"",""LefTonbo"",""rhino_"",""cooljoe"",""AsisKotsuro"",""yuduru⁄ユヅル"",""ゲーム人間"",""UnCivilizedJaco"",""CharlieMack"",""Phoenix Le Birb"",""白井カンナ"",""Frosty the Mage"",""MyEggDaily"",""WhiteMoon42"",""Abi_Teh"",""Gooven"",""kombarus"",""Woelur"",""Snuugles"",""Messiah420"",""yama31257"",""CoffeeFetcher"",""toh_csecb"",""An_Epic_Beard"",""∗Corkie"",""koturn（こた～ん）"",""干煸丸子"",""Komet_Nebula"",""Medicat"",""NUZOMI"",""［얘니］"",""Muffynnz"",""Zorua the taco"",""JamesyThePanda"",""ThePartycat"",""Nichiyu"",""FumihikoNoMae"",""Scarlett Puppy"",""藤原御影"",""Tabi Rita"",""グリーフ ⁄ Gleaf"",""Talon Pawpad"",""≺CeCe≻"",""HoundoomKO"",""Miekell"",""monaka․"",""Aura211"",""Zuri~"",""Wild Wanderer"",""Bastos_Sauce"",""Spyrô"",""Desukirai"",""Raix"",""BioweaponIrum"",""MikeyBunny"",""Falamon"",""FireBlossom"",""Dalton Rickman"",""AstralHusky20"",""killermajaro"",""Null´"",""Woable"",""ChestWP"",""Bizzle77"",""YuruWolf"",""SinfulPride"",""MythicalCuddles"",""Mew ~"",""T saturn T"",""_issi_"",""SavageIndian474"",""Emory_Star"",""DJDavid98"",""Detective_Leox"",""Trapblehh"",""Makee Hayes"",""KazMaw"",""Gogashi"",""james clark"",""Finn Loparis"",""CalabiYau"",""VampireInk23"",""ʳ ᵃ ʳ ᵉ"",""TheMrRedPanda"",""Dèra"",""༒ 爪尺丂_乃ㄩ几几ㄚ尺ㄩ༒"",""Hachi 'Gunok"",""白藍みそら"",""Ordinary_night"",""Lythal"",""GatClancy"",""BetterYeti"",""CosmicSlush"",""Mindless_Kitten"",""Pendual"",""Lambuck"",""CassidyCo"",""Coldcancer"",""jur_esque"",""EternalMorpheus"",""Drago 愛"",""_Aryi_"",""Melenium95"",""SunkenCactus"",""Braddock456"",""Alley-Katz"",""TwilaStygian"",""doom3765"",""BuNNyFuFu"",""Kmonster1234"",""Cora Wolf"",""Sherbert!"",""BahamutMahro"",""arjent366"",""Joel Stanley"",""CutieOlivia"",""Winterzbite"",""Djcato32"",""Hekitoro"",""ZenoGolf"",""Dzelion"",""UnvoicingPenny6"",""DoomStoneGG"",""SeifAlabbasi"",""BigFishGANJA"",""Dan Stark"",""くろくろ。"",""Hyper Ruki"",""Deyta"",""ZawaYashi"",""HighlyK"",""AliasQ1"",""Lil Sassafras"",""LabyrinthMinx"",""Irisa Iblis"",""Hollywood7171"",""ZorenFX"",""SMApple Juice"",""Golden_Gost"",""ҠӀąìղ×"",""Puppet Theater"",""Tsunami97"",""JojoIsBored"",""Mʏᴛʜɪᴄ"",""Dyllersen"",""Hɪ-Fɪ"",""Goofygargar"",""Chance Sarsis"",""音猫ラスク（DaiKing）"",""SaintJimmyLane"",""Finras"",""lostfoxxy"",""Sylvia_Lycan"",""XxLusciousxX"",""Knave Skye"",""༝sᴀɪ༝"",""Bakamabo"",""Sebastien Volk"",""LeWyy"",""RoyAiko"",""ぷらちな"",""kuro e8182"",""UniqueSubject"",""Vanny Ellis"",""MrBadasswolf"",""Shadowwolfnath""],""EMERALD_CRAB"":[""BlackHackedGhost"",""Maxminesss"",""Awamori"":150,""coderbritton05"",""༒Rae༆Cuervo༒"",""∗Tera∗"",""itsAlaska"",""Gosha"",""Lobakanekogirl"",""AriSparks"",""Rebornranch"",""⭐Shiro⭐"",""Kinsey Taylor"",""Berry ~"",""Theguywhostengu"",""Kimmi0520"",""Kat Meowfia"",""Blaze Salem"",""killjoy4500"",""『Schwi』"",""Wrathful Riot"",""PsychoticDream"",""samurai103"",""Detective Zero"",""Corimo__"",""Norwhale Rae"",""jettsd"",""Shirakiins"",""Booba_"",""Bade_blade"",""Munrifu"",""Manga101"",""wildcity123"",""raycrash"",""GomiBnnuy"",""『Dark Ace』"",""SunsetChaos"",""Mιƙҽყ"",""Raeal"",""~April~"",""Kahncub"",""Arucard3"",""sophiа"",""~Lustful Lovie~"",""ImmortalWolf"",""YeenButt"",""FREELY"",""༺ღChloe-Roseღ༻"",""Insane2284"",""Arsynic"",""siaku"",""RomanKrashed"",""յoker"",""ayuzu"",""Lims0814"",""Dranosius0947"",""Shepbrur"",""trash koala"",""Pvt Lemmings"",""みらつば（miratuba）"",""KaseyB"",""wolfsaber"",""Ren Ren North"",""JET_Master"",""ＣｏｂｒａＳａｇｅ９８０１８５"",""Rubber_Pyro"",""Kranos_"",""Christophilus"",""Blueberry Hoosk"",""BubblezwithaZ"",""SempSaberWolf"",""dorktoast"",""Devilhappy"",""Rezobyte"",""さがくん"",""Dᴀsᴛᴇᴛ"",""Kuro Nir"",""Taylor Ells"",""スミス（smith6724）"",""火龍小古"",""QTcut"",""Feathermo0n"",""Raith Vuh'uni"",""DrPuppers"",""CrypticCassidy"",""ᴹᴸᵒᵏ"",""Coffinrot"",""» ᴾᴼᴸᵀᴱᴿᴳᴴᴼˢᵀ «"",""Wholesome?Jenn"",""KazumaGShep"",""shadowblade0"",""Monroe Ikuma"",""zefurix"",""Dwën"",""Perii"",""ちゃいちゃい"",""God3aterSins"",""Dolce_"",""devy3838"",""Soul Yasuhiro"",""KitPawpad"",""Zkay25"",""Meepsee"",""Maneki-Neko"",""FadedTurian"",""SilverStarfall"",""aGothLizard"",""-Ebony-"",""FGLSophie"",""-Mana-"",""․˸ᴛ․ᴇ․ᴅ․ᴅ․ʏ˸․"",""VentusSilver"",""Cartaphylis 9bae"",""Mystikalallure"",""Gawrr"",""Co0k1epro"",""Kiremi"",""firefox12092"",""Peythe"",""Pikavee"",""Sir Poptart"",""TheShaun"",""RandomDergon"",""Lord Sorraxsus"",""VulkaFolf"",""LusciousLipZ"",""AdrianBlackfall"",""Bartii"",""NahkiWyhteshado"",""ThePhaseMaster"",""Papu Bean"",""WAROFT4H"",""Nekonoel13"",""StarWolf_T"",""Campfiezrc"",""richardmario"",""Aliixandre"",""Astraul"",""ღ ~Ｍｅｉ~ ღ"",""Arzolath"",""Black Lilith"",""MarkProtoFur"",""Clockwerxxz"",""JikoFox"",""｛DeadeyeCruz｝"",""zukiya"",""GodAva ~"",""Tohka~"",""Rakuza"",""roydid"",""Aimee-Prankster"",""Furry_funtime"",""Jiwonnie"",""Fad0"",""OracleofSorrow"",""Dubstep_MegaRayquaza"",""Dice117"",""Flint513"",""Monterro"",""JabblesK"",""Unconfident_Potato"",""Lυcy"",""Ruby Rose "",""MarkT04"",""Pasong"",""-Elleanora-"",""ChibiEmiko"",""Shiritori"",""SKITZIES"",""KrustyKai"",""ＦＡＮＣＹ"",""Thee_Milk_Man"",""Balthasarx"",""₵oғғee฿un"",""RagingRecee"",""Ac0ustiX"",""Starslash_"",""DeviousPolar"",""Cider_Punk"",""Yuurikin"",""Esmeräy"",""STICKY_FINGAZ"",""Daniel6563"",""Starrin"",""LushStarlight"",""Kat。"",""Leroy Jenkinss1"",""wardenx5"",""Nova_eclipes"",""KaelixTheFox"",""Wolf5150"",""Radarada"",""ღDɾαɠσɳDαԃԃყღ"",""Munity"",""Mama_Luigi"",""AstralPhoenix"",""~digitalRain~"",""Swift-Blaze"",""Asmodias"",""Graeflakes"",""Lucidly_Lucid"",""patparker"",""HolyBonezz"",""mozirevir"",""T0M0RR0W"",""OctoTako"",""GeminiiEquinox"",""Dream boo"",""Maketo"",""『KOR』진성"",""․Mordecai․"",""Atlantic_"",""Eevee Summer"",""༺Xeno༻"",""Stakik013"",""Zepwlert"",""St0rmK1tt3h"",""Bardsnyan_vt"",""Phatalhellfire"",""Glazey"",""Lionwolf_01"",""Xallai"",""Mialu≺3"",""SmallLoliLmao""],""GHOST_CRAB"":[""OwOmeVR"",""MUDDKING"",""~Blaze~"",""Flutterhawk ™"",""Zenxxx"",""Juniper_Regruth"",""Cashination"",""♥Fizzi♥"",""WhySoPi"",""Fox_Kitten"",""kfarwell"",""Mugiwara1990"",""Wasel"",""FerfyDerf"",""wormhog"",""Mukami"",""MariTheVillain"",""~PinkLasagna"",""xSonicEevee"",""Adisliel"",""freya22"",""Ariel Mtz"",""୨୧ Bambi ୨୧"",""DEMIDEVILPYRO"",""Manú Tsumi"",""MokaPaut""],""KING_CRAB"":[""【〖N〗】"",""ThirtyVercent"",""Nyxtrackers"",""Zivaniafezt"",""wishfulgurdian"",""Crab Nation"",""XxYumekoxX"",""Sla Men "",""Makoto Aki"",""LuPae사랑해"",""TheMati117"",""LucarioTheFurry""],""stats"":{""HERMIT_CRAB"":61,""BLUE_CRAB"":206,""EMERALD_CRAB"":223,""GHOST_CRAB"":26,""KING_CRAB"":12,""PATRONS"":528,""TOTAL"":664,""DATETIME"":""2024-02-28T21:11:17.720Z""},""access"":{""Treatie"":1,""KishiYasuda"":1,""M̶indless"":1,""stoopid˘ ³˘S0FA"":1,""manificolol"":1,""ProtoWolfie23"":1,""༒丂卄卂山几_3 ༒"":1,""belleykinz"":1,""Patrick Wallace"":1,""∗StarKnight∗"":1,""Alfryalfa"":1,""Glitchy C4D"":1,""Kodfod"":1,""Gojiraa"":1,""ʚ maeve ɞ"":1,""TheGoldenCoin"":1,""LightningChaser"":1,""PandaKing5501"":1,""Brexie"":1,""GT4tube"":1,""MIYΛПӨ"":1,""Catherine Correia"":1,""LunarBlackFox"":1,""Elara ఌ"":1,""Debbie Mulholland"":1,""DA Boss"":1,""Aprilgail 0223"":1,""Zyx1975"":1,""l_parxival_l"":1,""PrometheusVex"":1,""'-Sophia-'"":1,""LadyTheShark"":1,""Projekt Kisu"":1,""まーがれっとさん"":1,""Goddess of Snow"":1,""Spencer067"":1,""sᴡᴇᴇᴛ ᴍᴏʀɪ"":1,""DusttheRegulus"":1,""Andrew Briggs"":1,""Baplar"":1,""Jibinwar"":1,""dogfox101"":1,""Viper Moon"":1,""Davideoon"":1,""ALEXxVIPER 9fc0"":1,""kill_wolf d04a"":1,""Pink Gar"":1,""tigerhead"":1,""Alex Dixon"":1,""zeezaaVR"":1,""aegritudo42"":1,""FlameKnight7"":1,""DoubleUdon"":1,""Pokeyi"":1,""BluPointA"":1,""Tokki_o"":1,""ღ EehKayBee ღ"":1,""Kate Likes Rectangles"":1,""Killer7"":1,""deviouspenguins"":1,""Krovik7"":1,""_astronicky"":-1,""PhoenixSpyd3r"":-1,""alejo897_TD"":-1,""Mr Chif"":-1,""Ethan‚"":-1,""yuzuxvr"":-1,""T0NIGHT"":-1,""₱Ø₱Ɇ"":-1,""TheGPUKing"":-1,""EllenMarie"":-1,""noobish_42"":-1,""L4mb0"":-1,""herretix"":-1,""ShibaKai"":-1,""~Ashtoria~"":-1,""Radarada"":10,""Sansfan16 3109"":-1,""Val3ntin3"":-1,""Kamiii_osu"":-1,""Lykaon_Botkin"":-1,""ĐöõmЌĭŧŧẏ"":-1,""Melly-Belly"":-1,""Dimigreens"":-1,""Mundanity"":-1,""FireCharge"":-1,""ThommeyHUN"":-1,""PursuantAunt"":-1,""Tic_Tac_"":-1,""SqueaklesMcFinn"":-1,""Reina~"":-1,""Bittlebun"":-1,""BingingNeptune"":-1,""AceArtemis14"":-1,""Akyria"":-1,""miaoulie"":-1,""C_Loagz"":-1,""Cornhead777"":-1,""Velkari"":-1,""_ScrimBim_"":-1,""IvyTheOtter"":-1,""˚ʚᴡɪɴᴛᴇʀɞ˚"":-1,""PR0JECT_HALO"":-1,""SammyFoxyFloof"":-1,""Emi_theSuccubus"":-1,""Cuwuna"":-1,""VRealPhoenixV"":-1,""Luví"":-1,""loka666"":-1,""DarknessofDark"":-1,""Veraisun․"":-1,""TsukinoFox"":-1,""MarkGish"":-1,""MrRayKoma"":-1,""AstralHusky20"":5,""VenomousLipZ"":-1,""TheProfessorNA"":-1,""Fivans"":-1,""Cinnaki"":-1,""~Sawaa~"":-1,""HonneyGlaze"":-1,""AspieAlex"":-1,""warral"":-1,""Hydrofreeze1998"":-1,""QuinChimera"":-1,""Mr Smuggy"":-1,""violent blue"":-1,""Dr Puppy"":-1,""ɴɪɢʜᴛʀᴇᴀᴘᴇʀ"":-1,""Cheets"":-1,""Common_Folk․_"":-1,""Rossam"":-1,""AshFusky"":-1,""Adi․"":-1,""DarkSlayer352"":-1,""lunamoonlight~"":-1,""Constapatience"":-1,""robbeyy"":-1,""Skyelitesystem"":-1,""Anyа"":-1,""CaliRaisin"":-1,""HayNinO"":-1,""Nemo Chanchilla"":-1,""Rezie"":-1,""_Chevette_"":-1,""ൠArylonൠ"":-1,""Croyfish"":-1,""HeavensQueen 8a60"":-1,""bbgtrysta 1df8"":-1,""AAAAAAAAAAAAAH_"":-1,""GoldenRose0516"":-1,""༺John༻"":-1,""Daithí"":-1,""RallyMango"":-1,""~ Şhคrkiē ~"":-1,""KR00M"":-1,""KrustyKai"":10,""PrimalMugget45"":-1,""RosyKitsune39"":-1,""SanuraTheNeko"":-1,""Kenze_Ann b612"":-1,""TropicToast"":-1,""Rʌʏɴᴇ"":-1,""_Zenny_"":-1,""Nyëvius"":-1,""ZypherXs"":-1,""TritonΨ"":-1,""yazzi bean"":-1,""Arthur Te Deum"":-1,""SomeCrispyToast"":-1,""Savvii"":-1,""VRonica"":-1,""Punflower"":-1,""Rsuup"":-1,""HellHound_cc3d"":-1,""ʙ ᴇ ʟ"":-1,""dragonkeeper1"":-1,""Jeshie"":-1,""TheDapperSquid"":-1,""TheCobDad"":-1,""khaniage"":-1,""giselher"":-1,""SmallLoliLmao"":10,""Mialu≺3"":10,""Xallai"":10,""Shadowwolfnath"":5,""MrBadasswolf"":5,""Vanny Ellis"":5,""Lionwolf_01"":10,""LucarioTheFurry"":50,""Glazey"":10,""UniqueSubject"":5,""Phatalhellfire"":10,""kuro e8182"":5,""MokaPaut"":25,""ぷらちな"":5,""Bardsnyan_vt"":10,""RoyAiko"":5,""TheMati117"":50,""LeWyy"":5,""Sebastien Volk"":5,""St0rmK1tt3h"":10,""Bakamabo"":5,""Zepwlert"":10,""Stakik013"":10,""༺Xeno༻"":10,""Eevee Summer"":10,""Atlantic_"":10,""༝sᴀɪ༝"":5,""․Mordecai․"":10,""Knave Skye"":5,""『KOR』진성"":10,""XxLusciousxX"":5,""Maketo"":10,""Manú Tsumi"":25,""Sylvia_Lycan"":5,""lostfoxxy"":5,""Dream boo"":10,""Finras"":5,""SaintJimmyLane"":5,""GeminiiEquinox"":10,""OctoTako"":10,""T0M0RR0W"":10,""mozirevir"":10,""HolyBonezz"":10,""音猫ラスク（DaiKing）"":5,""patparker"":10,""Chance Sarsis"":5,""Lucidly_Lucid"":10,""Graeflakes"":10,""Goofygargar"":5,""Asmodias"":10,""Hɪ-Fɪ"":5,""Swift-Blaze"":10,""DEMIDEVILPYRO"":25,""~digitalRain~"":10,""AstralPhoenix"":10,""Mama_Luigi"":10,""Dyllersen"":5,""Munity"":10,""୨୧ Bambi ୨୧"":25,""Mʏᴛʜɪᴄ"":5,""ღDɾαɠσɳDαԃԃყღ"":10,""Ariel Mtz"":25,""Wolf5150"":10,""JojoIsBored"":5,""Tsunami97"":5,""Puppet Theater"":5,""KaelixTheFox"":10,""freya22"":25,""Nova_eclipes"":10,""ҠӀąìղ×"":5,""Golden_Gost"":5,""wardenx5"":10,""SMApple Juice"":5,""Leroy Jenkinss1"":10,""Kat。"":10,""LuPae사랑해"":50,""LushStarlight"":10,""Starrin"":10,""Daniel6563"":10,""STICKY_FINGAZ"":10,""Esmeräy"":10,""ZorenFX"":5,""Hollywood7171"":5,""Irisa Iblis"":5,""Yuurikin"":10,""LabyrinthMinx"":5,""Cider_Punk"":10,""DeviousPolar"":10,""Starslash_"":10,""Ac0ustiX"":10,""RagingRecee"":10,""Lil Sassafras"":5,""AliasQ1"":5,""HighlyK"":5,""Adisliel"":25,""₵oғғee฿un"":10,""ZawaYashi"":5,""Deyta"":5,""Makoto Aki"":50,""Hyper Ruki"":5,""くろくろ。"":5,""Sla Men "":50,""Dan Stark"":5,""BigFishGANJA"":5,""Balthasarx"":10,""SeifAlabbasi"":5,""Thee_Milk_Man"":10,""DoomStoneGG"":5,""ＦＡＮＣＹ"":10,""UnvoicingPenny6"":5,""SKITZIES"":10,""Dzelion"":5,""Shiritori"":10,""ChibiEmiko"":10,""XxYumekoxX"":50,""-Elleanora-"":10,""ZenoGolf"":5,""Hekitoro"":5,""Pasong"":10,""Djcato32"":5,""MarkT04"":10,""Winterzbite"":5,""Ruby Rose "":10,""Lυcy"":10,""CutieOlivia"":5,""Unconfident_Potato"":10,""JabblesK"":10,""Monterro"":10,""Joel Stanley"":5,""arjent366"":5,""BahamutMahro"":5,""Sherbert!"":5,""Cora Wolf"":5,""Flint513"":10,""Dice117"":10,""Dubstep_MegaRayquaza"":10,""Kmonster1234"":5,""OracleofSorrow"":10,""Fad0"":10,""BuNNyFuFu"":5,""doom3765"":5,""Jiwonnie"":10,""Crab Nation"":50,""TwilaStygian"":5,""Alley-Katz"":5,""Braddock456"":5,""wishfulgurdian"":50,""SunkenCactus"":5,""Melenium95"":5,""_Aryi_"":5,""Drago 愛"":5,""EternalMorpheus"":5,""Furry_funtime"":10,""jur_esque"":5,""Coldcancer"":5,""Aimee-Prankster"":10,""roydid"":10,""CassidyCo"":5,""Rakuza"":10,""Lambuck"":5,""Tohka~"":10,""xSonicEevee"":25,""GodAva ~"":10,""~PinkLasagna"":25,""Zivaniafezt"":50,""Pendual"":5,""zukiya"":10,""｛DeadeyeCruz｝"":10,""JikoFox"":10,""Clockwerxxz"":10,""Mindless_Kitten"":5,""MarkProtoFur"":10,""Black Lilith"":10,""Arzolath"":10,""ღ ~Ｍｅｉ~ ღ"":10,""Astraul"":10,""CosmicSlush"":5,""Aliixandre"":10,""richardmario"":10,""BetterYeti"":5,""GatClancy"":5,""Campfiezrc"":10,""Lythal"":5,""Ordinary_night"":5,""白藍みそら"":5,""StarWolf_T"":10,""Hachi 'Gunok"":5,""Nekonoel13"":10,""WAROFT4H"":10,""Papu Bean"":10,""ThePhaseMaster"":10,""༒ 爪尺丂_乃ㄩ几几ㄚ尺ㄩ༒"":5,""Dèra"":5,""TheMrRedPanda"":5,""NahkiWyhteshado"":10,""ʳ ᵃ ʳ ᵉ"":5,""Bartii"":10,""VampireInk23"":5,""CalabiYau"":5,""AdrianBlackfall"":10,""LusciousLipZ"":10,""VulkaFolf"":10,""Lord Sorraxsus"":10,""RandomDergon"":10,""TheShaun"":10,""Sir Poptart"":10,""Pikavee"":10,""MariTheVillain"":25,""Mukami"":25,""Finn Loparis"":5,""Peythe"":10,""james clark"":5,""Gogashi"":5,""KazMaw"":5,""firefox12092"":10,""Kiremi"":10,""Nyxtrackers"":50,""Co0k1epro"":10,""Makee Hayes"":5,""Trapblehh"":5,""Detective_Leox"":5,""Gawrr"":10,""Mystikalallure"":10,""DJDavid98"":5,""Cartaphylis 9bae"":10,""VentusSilver"":10,""Emory_Star"":5,""․˸ᴛ․ᴇ․ᴅ․ᴅ․ʏ˸․"":10,""-Mana-"":10,""SavageIndian474"":5,""FGLSophie"":10,""-Ebony-"":10,""aGothLizard"":10,""_issi_"":5,""T saturn T"":5,""Mew ~"":5,""SilverStarfall"":10,""FadedTurian"":10,""MythicalCuddles"":5,""SinfulPride"":5,""YuruWolf"":5,""Bizzle77"":5,""Maneki-Neko"":10,""Meepsee"":10,""ChestWP"":5,""Zkay25"":10,""KitPawpad"":10,""Soul Yasuhiro"":10,""Woable"":5,""Null´"":5,""devy3838"":10,""killermajaro"":5,""Dolce_"":10,""God3aterSins"":10,""ちゃいちゃい"":10,""Dalton Rickman"":5,""FireBlossom"":5,""Falamon"":5,""Perii"":10,""Dwën"":10,""MikeyBunny"":5,""zefurix"":10,""Monroe Ikuma"":10,""shadowblade0"":10,""KazumaGShep"":10,""Wholesome?Jenn"":10,""» ᴾᴼᴸᵀᴱᴿᴳᴴᴼˢᵀ «"":10,""BioweaponIrum"":5,""Coffinrot"":10,""Raix"":5,""ᴹᴸᵒᵏ"":10,""CrypticCassidy"":10,""DrPuppers"":10,""Desukirai"":5,""Spyrô"":5,""Bastos_Sauce"":5,""Raith Vuh'uni"":10,""Wild Wanderer"":5,""Feathermo0n"":10,""QTcut"":10,""Zuri~"":5,""火龍小古"":10,""スミス（smith6724）"":10,""Taylor Ells"":10,""Kuro Nir"":10,""Dᴀsᴛᴇᴛ"":10,""Aura211"":5,""さがくん"":10,""monaka․"":5,""Miekell"":5,""HoundoomKO"":5,""≺CeCe≻"":5,""Talon Pawpad"":5,""Rezobyte"":10,""グリーフ ⁄ Gleaf"":5,""Devilhappy"":10,""dorktoast"":10,""Tabi Rita"":5,""藤原御影"":5,""SempSaberWolf"":10,""Scarlett Puppy"":5,""BubblezwithaZ"":10,""Blueberry Hoosk"":10,""Christophilus"":10,""FumihikoNoMae"":5,""Nichiyu"":5,""ThePartycat"":5,""JamesyThePanda"":5,""Kranos_"":10,""Rubber_Pyro"":10,""ＣｏｂｒａＳａｇｅ９８０１８５"":10,""JET_Master"":10,""Ren Ren North"":10,""wolfsaber"":10,""KaseyB"":10,""みらつば（miratuba）"":10,""Zorua the taco"":5,""Pvt Lemmings"":10,""trash koala"":10,""Muffynnz"":5,""Shepbrur"":10,""［얘니］"":5,""Dranosius0947"":10,""NUZOMI"":5,""Lims0814"":10,""Medicat"":5,""ayuzu"":10,""յoker"":10,""Komet_Nebula"":5,""干煸丸子"":5,""RomanKrashed"":10,""siaku"":10,""koturn（こた～ん）"":5,""Arsynic"":10,""Insane2284"":10,""༺ღChloe-Roseღ༻"":10,""wormhog"":25,""FREELY"":10,""∗Corkie"":5,""An_Epic_Beard"":5,""toh_csecb"":5,""CoffeeFetcher"":5,""yama31257"":5,""YeenButt"":10,""ImmortalWolf"":10,""~Lustful Lovie~"":10,""sophiа"":10,""Arucard3"":10,""Messiah420"":5,""Snuugles"":5,""Woelur"":5,""kombarus"":5,""Gooven"":5,""Kahncub"":10,""~April~"":10,""Abi_Teh"":5,""Raeal"":10,""FerfyDerf"":25,""Mιƙҽყ"":10,""SunsetChaos"":10,""『Dark Ace』"":10,""GomiBnnuy"":10,""WhiteMoon42"":5,""raycrash"":10,""wildcity123"":10,""Manga101"":10,""MyEggDaily"":5,""Munrifu"":10,""Frosty the Mage"":5,""白井カンナ"":5,""Bade_blade"":10,""Phoenix Le Birb"":5,""Booba_"":10,""Shirakiins"":10,""CharlieMack"":5,""jettsd"":10,""UnCivilizedJaco"":5,""Norwhale Rae"":10,""Corimo__"":10,""Detective Zero"":10,""ゲーム人間"":5,""yuduru⁄ユヅル"":5,""AsisKotsuro"":5,""samurai103"":10,""cooljoe"":5,""rhino_"":5,""PsychoticDream"":10,""LefTonbo"":5,""Izanuel"":5,""Wrathful Riot"":10,""Hypersanity"":5,""『Schwi』"":10,""killjoy4500"":10,""Reldez"":5,""Sprintervaulter"":5,""Wasel"":25,""WriterFluff"":5,""AHunkOfChicken"":5,""FrostieFoxxy"":5,""LozzaE"":5,""Blaze Salem"":10,""Kat Meowfia"":10,""Phoxetron"":5,""BlossomAmpwave"":5,""Lord daejahn"":5,""ThirtyVercent"":50,""Kimmi0520"":10,""Theguywhostengu"":10,""troylicious"":5,""Berry ~"":10,""Central_Fire154"":5,""Kinsey Taylor"":10,""Mugiwara1990"":25,""ThunderBolt95"":5,""Radio Miku"":5,""⭐Shiro⭐"":10,""StarFireIce"":5,""Finka_"":5,""wraithdarkhand"":5,""ʚ Sleepy ɞ"":5,""yakoyakoyako923"":5,""AK-4242"":5,""【〖N〗】"":50,""Rogue Lunartic"":5,""Rebornranch"":10,""sp1ne3ater"":5,""AriSparks"":10,""Lobakanekogirl"":10,""Gosha"":10,""itsAlaska"":10,""kfarwell"":25,""Emperor Zurg"":5,""∗Tera∗"":10,""Fox_Kitten"":25,""Audrey Bule"":5,""Denelix"":5,""~Litchi~"":5,""Chamel․eon"":5,""WhySoPi"":25,""༒Rae༆Cuervo༒"":10,""coderbritton05"":10,""chrisjames"":5,""Hazy_monet26"":5,""Ruby J Rose"":5,""AuranLyrandar"":5,""♥Fizzi♥"":25,""Craftsy"":5,""SifTheFox"":5,""Maxminesss"":10,""Cashination"":25,""mew2keegan"":5,""Juniper_Regruth"":25,""Zenxxx"":25,""まくらぎゅ"":5,""Synnamon"":5,""Flutterhawk ™"":25,""Nicole Cheng"":5,""~Blaze~"":25,""MUDDKING"":25,""OwOmeVR"":25,""BlackHackedGhost"":10,""dgibbs3196"":5,""MyLovelySugaVR"":5,""椛葉 瑞希"":5,""Maki Maki Maki"":10,""Maki Maki"":50,""RiffleTuff"":25,""Sumeru"":25,""Karl Kroenen"":25,""MirukuS․"":1,""Hippu"":5,""bluefrosty"":5,""Code․"":5,""same same"":5,""Serraphax"":5,""meltingarmymen"":5,""Silyataru"":5,""BoatFloater"":25,""naeris"":5,""TheExperiment"":50,""~Hydro~"":5,""[1] Local Player"":50},""posters"":[91274299,901548011,2404273,36063072,24564495,96708287,4719398,84456087,95195775,4040438,56510431,28273715,7048441,81332136,51121301,68378163]}"
hgAtC0Ud,Leggere dati da una tabella di Microsoft Access,NiktorTheNat,VisualBasic,Wednesday 28th of February 2024 03:12:59 PM CDT,"'CODICE DA USARE IN UN DATABASE MICROSOFT ACCESS, in linguaggio VBA
'Crea oggetto ""archivio"" che conterrà il database corrente
Dim archivio As Database
'Crea oggetto ""dato"" che leggerà i dati di una tabella
Dim dato As Recordset
'Crea una stringa ""frase""
Dim frase As String
'Crea una stringa ""x""
Dim x As String

'Imposta ""archivio"" in modo che contenga il database corrente
Set archivio = CurrentDb
'Nella variabile ""frase"" viene inserita l'istruzione SQL per filtrare i dati che ci interessano di una determinata tabella
frase = ""select * from video""
'Qui ""dato"" eseguirà l'istruzione SQL contenuta nella variabile ""frase""
Set dato = archivio.OpenRecordset(frase)
'QUi inizia un ciclo che processerà tutti i record risultato dall'istruzione SQL
Do While Not dato.EOF
'Nella variabile ""x"" viene concatenato il campo ""supporto"" della tabella ""video"" processata con il codice SQL sopra indicato
x = x & dato!supporto
'L'istruzione dat.MoveNext passa al record successivo, altrimenti il loop si blocca
dato.MoveNext
Loop
dato.Close
Set dato = Nothing
Set archivio = Nothing
'Scrive nella casella di testo ""Testo2"" il contenuto della variabile ""x"" 
testo2=x
'Porta il focus sulla casella di testo ""Testo2""
Testo2.SetFocus
'Copia in memoria il contenuto della casella di testo ""Testo2"", in modo da poter essere poi incollata in qualsiasi altro software
DoCmd.RunCommand acCmdCopy
"
igZZyCvJ,struct fnc parameter,RicardasSim,C,Wednesday 28th of February 2024 02:58:35 PM CDT,"#include <stdio.h>
#include <stdlib.h>

typedef struct{
     int a;
     int b;
} St;

void Fnc1( St s )
{
    s.a += 1;
    s.b += 2;

    printf(""(f1) %d %d \n"", s.a, s.b );
}

void Fnc2( St *p_s )
{
    p_s->a += 1;
    p_s->b += 2;

    printf(""(f2) %d %d \n"", p_s->a, p_s->b );
}

int main()
{

    St s_1;

    s_1.a = 1;
    s_1.b = 2;

    printf(""(1) %d %d \n"", s_1.a, s_1.b );

    Fnc1( s_1 );

    printf(""(2) %d %d \n"", s_1.a, s_1.b );

    Fnc2( &s_1 );

    printf(""(3) %d %d \n"", s_1.a, s_1.b );

    return 0;
}

/*

output:

(1) 1 2
(f1) 2 4
(2) 1 2
(f2) 2 4
(3) 2 4

*/
"
M4KUBPDb,Roar,psychoticodes,HTML,Wednesday 28th of February 2024 02:41:44 PM CDT,"<link href=""https://dl.dropboxusercontent.com/s/qmsi5pz0vr81u0k/roar.css?dl=0"" rel=""stylesheet""><div id=""roar"" style="" --width:550px; --back:#101010; --bord:#fff;""><div class=""roarti"">Seu Título Vai Aqui</div><div class=""roartxt"">Seu Texto Vai Aqui</div></div>"
n3y9KGUV,ISTJ,psychoticodes,HTML,Wednesday 28th of February 2024 02:40:23 PM CDT,"<link href=""https://dl.dropboxusercontent.com/scl/fi/rfenrvw05sotrj91v50jv/istj.css?rlkey=4dupuygs9cmkt5cbym30l3wn1&dl=0"" rel=""stylesheet""><center><div id=""istj"" style=""--b1: #ccc;--b2:#222;--b3:#101010;""><table><td><div class=""istjt""></div></td><td><div class=""istjpos""><div class=""istjot"">Seu Título Vai Aqui</div></div></td></table><div class=""istjbox"">Seu Texto Vai Aqui</div></div></center>"
vDcX2Hef,Untitled,Derga,C++,Wednesday 28th of February 2024 02:21:57 PM CDT,"#include <algorithm>
#include <cstdint>
#include <iostream>
#include <string>
#include <vector>

using namespace std;

string Sol1(const string& str, vector<uint32_t>& weights) {
    vector<int> counting(26, 0);
    for (char ch : str) ++counting[ch - 'a'];

    string part_with_weight, part_without_weight;
    for (int i = 0; i < 26; ++i) {
        if (counting[i] == 0) continue;

        if (counting[i] / 2) part_with_weight += ('a' + i);
        if (counting[i] % 2) part_without_weight += ('a' + i);
    }

    sort(begin(part_with_weight), end(part_with_weight), [weights](const char lhs, const char rhs) {
        if (weights[lhs - 'a'] != weights[rhs - 'a']) {
            return weights[lhs - 'a'] > weights[rhs - 'a'];
        }
        return lhs > rhs;
    });

    string result;
    for (char ch : part_with_weight) {
        for (int i = 0; i < counting[ch - 'a'] / 2; ++i) {
            result += ch;
        }
    }
    for (char ch : part_without_weight) {
        result += ch;
    }
    reverse(begin(part_with_weight), end(part_with_weight));
    for (char ch : part_with_weight) {
        for (int i = 0; i < counting[ch - 'a'] / 2; ++i) {
            result += ch;
        }
    }
}

string Sol2(const string& s, vector<uint32_t> weights) {
    string result, heavy_letters;
    sort(s.begin(), s.end(), [weights] (const char x1, const char x2) {
        if (weights[x1 - 'a'] == weights[x2 - 'a']) return x1 > x2;
        return weights[x1 - 'a'] > weights[x2 - 'a'];
    });

    for (int i = 0; i < s.size() - 1; i++) {
        if (s[i] == s[i + 1] &&
            ((!heavy_letters.empty() && heavy_letters[heavy_letters.size() - 1] != s[i]) || heavy_letters.empty())) {
            heavy_letters.push_back(s[i]);
            i++;
        }
        else result.push_back(s[i]);
    }

    string r;
    
    if (s.size() > result.size() + 2 * heavy_letters.size()) result.push_back(s[s.size() - 1]);
    r += (heavy_letters + result);
    for (int i = heavy_letters.size() - 1; i >= 0; i--) r += heavy_letters[i];
    
    return r;
}

int main() {
    srand(time(0));
    while (true) {
        string str;
        int size = 1 + rand() % 21;
        for (int i = 0; i < size; ++i) {
            str += ('a' + rand() % 26);
        }
        
        vector<uint32_t> weights(26, 0);
        for (uint32_t& w : weights) w = rand() % 1'000'000'000;
        string s1 = Sol1(str, weights);
        string s2 = Sol2(str, weights);
        if (s1 != s2) {
            cout << str << '\n' << s1 << '\n' << s2 << '\n';
            return 0;
        }
    }
    
    return 0;
}"
RgSMJFtT,Kakao Corp - Cafe Daum,bombaires,HTML,Wednesday 28th of February 2024 01:46:39 PM CDT,"<pre>
Kim Beom-soo, born March 8, 1966
2/F C&amp;K Bldg., 726 - 2 Yeoksam-Dong - Gangnam-Gu. Seoul - Seoul 135080
<a href=""tel:+8218991326"">+8218991326</a>
<a href=""mailto:contact@kakaocorp.com"">contact@kakaocorp.com</a>
<a href=""mailto:maps@kakaocorp.com"">maps@kakaocorp.com</a>
<a href=""mailto:cafe@kakaocorp.com"">cafe@kakaocorp.com</a>
<a href=""mailto:globalmedia@kakaocorp.com"">globalmedia@kakaocorp.com</a>
<a href=""mailto:help.notice@kakaocorp.com"">help.notice@kakaocorp.com</a>
<a href=""mailto:gregwingo@kakao.com"">gregwingo@kakao.com</a>
<a href=""mailto:contact@daum.net"">contact@daum.net</a>
</pre>
"
h3m5HAbz,mqtt viessmann,adorobis,YAML,Wednesday 28th of February 2024 01:37:17 PM CDT,"climate:
  - name: Climate Viessmann
    unique_id: viessman_climate_esphome
    device: {""identifiers"": [""b8d61aa758e4""],""name"": ""Viessmann"", ""model"": ""esp32dev"", ""manufacturer"": ""espressif""}
    current_temperature_topic: ""viessmann/sensor/room_temperature/state""
    modes:
      - ""off""
      - ""heat""
      - ""auto""
    preset_modes:
      - ""eco""
      - ""comfort""
    availability_topic: ""viessmann/status""
    mode_command_topic: ""viessmann/select/operation_mode/command""
    mode_command_template: >
      {% if value == ""off"" %}
        standby
      {% elif value == ""heat"" %}
        forcedNormal
      {% elif value == ""auto"" %}
        dhwAndHeating
      {% endif %}
    mode_state_topic: ""viessmann/select/operation_mode/state""
    mode_state_template: >
      {% if value == ""standby"" or value == ""forcedReduced"" or value == ""dhw"" %}
        off
      {% elif value == ""dhwAndHeating"" %}
        auto
      {% elif value == ""forcedNormal"" %}
        heat
      {% endif %}
    action_topic: ""viessmann/binary_sensor/burner/state""
    action_template: >
      {% if value == ""OFF"" %}
        off
      {% else %}
        heating
      {% endif %}
    preset_mode_command_topic: ""viessmann/select/preset/command""
    preset_mode_command_template: >
      {% if value == ""eco"" %}
        eco
      {% elif value == 'comfort' %}
        comfort
      {% else %}
        off
      {% endif %}
    
    preset_mode_state_topic: ""viessmann/select/preset/state""
    preset_mode_value_template: >
      {% if value == ""eco"" %}
        eco
      {% elif value == 'comfort' %}
        comfort
      {% else %}
        none
      {% endif %}
    temperature_state_topic: ""viessmann/number/room_temperature_setpoint/state""
    temperature_command_topic: ""viessmann/number/room_temperature_setpoint/command""

water_heater:
  - name: Water Heater
    unique_id: viessman_water_heater_esphome
    device: {""identifiers"": [""b8d61aa758e4""],""name"": ""Viessmann"", ""model"": ""esp32dev"", ""manufacturer"": ""espressif""}
    availability_topic: ""viessmann/status""
    current_temperature_topic: ""viessmann/sensor/storage_temperature/state""
    min_temp: 35
    temperature_command_topic: ""viessmann/number/dhw_temperature_setpoint/command""
    temperature_state_topic: ""viessmann/number/dhw_temperature_setpoint/state""
    precision: 1.0
    modes:
      - ""off""
      - ""gas""
    mode_state_topic: ""viessmann/select/operation_mode/state""
    mode_state_template: >
      {% if value in [""standby"", ""forcedReduced""] %}
        off
      {% else %}
        gas
      {% endif %}"
SBJmK1Ja,BlazeMover,BillMolloy,C#,Wednesday 28th of February 2024 01:34:15 PM CDT,"public class BlazeMover : MonoBehaviour
{
    [SerializeField] Animator anim; 
    [SerializeField] Transform groundCheck;
    [SerializeField] LayerMask ground;
    Gyroscope gyro;
    
    Vector3 movementDir; 
    bool moveForward;
    bool moveBackward;
    bool moveRight;
    bool moveLeft;
    float horizontalMove;
    float verticalMove;
    public float speed = 5f;

    void Start()
    {
        gyro = Input.gyro;
        gyro.enabled = true;
    }  

    public void PointerDownForward()
    {    
        moveForward = true;        
    }

    public void PointerUpForward()
    {
        moveForward = false;
        StopMoving();
    }

    public void PointerDownBackward()
    {   
        moveBackward = true;        
    }

    public void PointerUpBackward()
    {
        moveBackward = false;
        StopMoving();
    }

    public void PointerDownRight()
    {
        moveRight = true;
    }

    public void PointerUpRight()
    {
        moveRight = false;
        StopMoving();
    }

    public void PointerDownLeft()
    {
        moveLeft = true;
    }

    public void PointerUpLeft()
    {
        moveLeft = false;
        StopMoving();
    }


    private void Movement()
    {
        if (moveLeft)
        {
            horizontalMove = -speed; 
            anim.SetFloat(""x"", horizontalMove);
        }
        else if (moveRight)
        {  
            horizontalMove = speed; 
            anim.SetFloat(""x"", horizontalMove);
        }
        else
        {
            horizontalMove = 0;
        }

        if (moveForward)
        { 
            verticalMove = speed;
            anim.SetFloat(""x"", verticalMove);
        }
        else if (moveBackward)
        { 
            verticalMove = -speed;
            anim.SetFloat(""x"", verticalMove);
        }
        else
        {
            verticalMove = 0;
        }
    }

    private void Update()
    {
        Movement();
        if(IsGrounded() == true)
        {
           anim.SetBool(""InAir"", false); 
        }
        else
        {
           anim.SetBool(""InAir"", true);
        }

        Debug.DrawLine(groundCheck.position, groundCheck.position + Vector3.down, Color.red);
    }

    void StopMoving()
    {
        anim.SetFloat(""x"", 0);
        anim.SetFloat(""y"", 0);
        movementDir = new Vector3(0f,0f,0f);
        transform.Translate(movementDir, Space.World);
    }

    private void FixedUpdate()
    {   
        movementDir = new Vector3(horizontalMove, 0 , verticalMove);  
        movementDir.Normalize(); 
        transform.Translate(movementDir * speed * Time.deltaTime, Space.World);
         
        if(movementDir != Vector3.zero)
        {
            transform.forward = movementDir;
        }
    } 

    bool IsGrounded()
    {
        return Physics.CheckSphere(groundCheck.position, .3f, ground);
    } 
}"
75xPnN7E,PixelFlasher - Arch,PaulGureghian1,Bash,Wednesday 28th of February 2024 01:21:32 PM CDT,"yay pixelflasher
2 aur/pixelflasher-bin 6.8.0.4-1 (+1 0.06) 
    Pixel phone flashing GUI utility with features.
1 aur/pixelflasher 6.8.0.4-1 (+1 0.06) 
    Pixel phone flashing GUI utility with features.
==> Pacchetti da installare (es: 1 2 3, 1-3 o ^4)
==> 1
AUR Explicit (1): pixelflasher-6.8.0.4-1
:: (1/1) PKGBUILD scaricato: pixelflasher
  1 pixelflasher                             (I file di compilazione sono già presenti)
==> Pacchetti da compilare in modo pulito?
==> [N]essuno [A]Tutti [Ab]Annulla [I]nstallati [No]nInstallati oppure (1 2 3, 1-3, ^4)
==> 
  1 pixelflasher                             (I file di compilazione sono già presenti)
==> Differenze da mostrare?
==> [N]essuno [A]Tutti [Ab]Annulla [I]nstallati [No]nInstallati oppure (1 2 3, 1-3, ^4)
==> 
==> Creazione del pacchetto: pixelflasher 6.8.0.4-1 (mer 28 feb 2024, 16:09:04)
==> Download dei sorgenti in corso...
  -> Download di PixelFlasher-6.8.0.4.tar.gz in corso...
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0
100 21.7M    0 21.7M    0     0  5028k      0 --:--:--  0:00:04 --:--:-- 5965k
  -> È stato trovato PixelFlasher.desktop
==> ATTENZIONE: Sto ignorando la verifica delle firme PGP.
==> Validazione di source file con sha256sums...
    PixelFlasher-6.8.0.4.tar.gz ... Verificato
    PixelFlasher.desktop ... Verificato
:: (1/1) Analisi SRCINFO: pixelflasher
==> Creazione del pacchetto: pixelflasher 6.8.0.4-1 (mer 28 feb 2024, 16:09:09)
==> Controllo delle dipendenze durante l'avvio in corso...
==> Controllo delle dipendenze durante la compilazione in corso...
==> Download dei sorgenti in corso...
  -> È stato trovato PixelFlasher-6.8.0.4.tar.gz
  -> È stato trovato PixelFlasher.desktop
==> Validazione di source file con sha256sums...
    PixelFlasher-6.8.0.4.tar.gz ... Verificato
    PixelFlasher.desktop ... Verificato
==> Rimozione dell'esistente directory $srcdir/ in corso...
==> Estrazione dei sorgenti in corso...
  -> Estrazione di PixelFlasher-6.8.0.4.tar.gz usando bsdtar in corso...
==> I sorgenti sono pronti.
==> Creazione del pacchetto: pixelflasher 6.8.0.4-1 (mer 28 feb 2024, 16:09:10)
==> Controllo delle dipendenze durante l'avvio in corso...
==> Controllo delle dipendenze durante la compilazione in corso...
==> ATTENZIONE: Sto usando il tree esistente di $srcdir/
==> Avvio di build() in corso...
154 INFO: PyInstaller: 6.4.0, contrib hooks: 2024.2
155 INFO: Python: 3.11.7
156 INFO: Platform: Linux-6.7.6-arch1-1-x86_64-with-glibc2.39
157 INFO: Extending PYTHONPATH with paths
['/home/lupastro/.cache/yay/pixelflasher/src/PixelFlasher-6.8.0.4']
214 INFO: Appending 'binaries' from .spec
214 INFO: Appending 'datas' from .spec
214 INFO: checking Analysis
214 INFO: Building Analysis because Analysis-00.toc is non existent
214 INFO: Initializing module dependency graph...
215 INFO: Caching module graph hooks...
221 INFO: Analyzing base_library.zip ...
640 INFO: Loading module hook 'hook-heapq.py' from '/usr/lib/python3.11/site-packages/PyInstaller/hooks'...
687 INFO: Loading module hook 'hook-encodings.py' from '/usr/lib/python3.11/site-packages/PyInstaller/hooks'...
1518 INFO: Loading module hook 'hook-pickle.py' from '/usr/lib/python3.11/site-packages/PyInstaller/hooks'...
2408 INFO: Caching module dependency graph...
2455 INFO: Running Analysis Analysis-00.toc
2455 INFO: Looking for Python shared library...
2460 INFO: Using Python shared library: /usr/lib/libpython3.11.so.1.0
2460 INFO: Analyzing /home/lupastro/.cache/yay/pixelflasher/src/PixelFlasher-6.8.0.4/PixelFlasher.py
2631 INFO: Loading module hook 'hook-platform.py' from '/usr/lib/python3.11/site-packages/PyInstaller/hooks'...
3222 INFO: Processing pre-safe import module hook six.moves from '/usr/lib/python3.11/site-packages/PyInstaller/hooks/pre_safe_import_module/hook-six.moves.py'.
3610 INFO: Loading module hook 'hook-packaging.py' from '/usr/lib/python3.11/site-packages/PyInstaller/hooks'...
3815 INFO: Loading module hook 'hook-xml.py' from '/usr/lib/python3.11/site-packages/PyInstaller/hooks'...
4025 INFO: Loading module hook 'hook-xml.dom.domreg.py' from '/usr/lib/python3.11/site-packages/PyInstaller/hooks'...
4123 INFO: Loading module hook 'hook-sqlite3.py' from '/usr/lib/python3.11/site-packages/PyInstaller/hooks'...
4252 INFO: Loading module hook 'hook-psutil.py' from '/usr/lib/python3.11/site-packages/_pyinstaller_hooks_contrib/hooks/stdhooks'...
4384 INFO: Loading module hook 'hook-xml.etree.cElementTree.py' from '/usr/lib/python3.11/site-packages/PyInstaller/hooks'...
4568 INFO: Loading module hook 'hook-charset_normalizer.py' from '/usr/lib/python3.11/site-packages/_pyinstaller_hooks_contrib/hooks/stdhooks'...
4658 INFO: Loading module hook 'hook-lxml.py' from '/usr/lib/python3.11/site-packages/_pyinstaller_hooks_contrib/hooks/stdhooks'...
4793 INFO: Loading module hook 'hook-lz4.py' from '/usr/lib/python3.11/site-packages/_pyinstaller_hooks_contrib/hooks/stdhooks'...
4825 INFO: Processing pre-safe import module hook urllib3.packages.six.moves from '/usr/lib/python3.11/site-packages/PyInstaller/hooks/pre_safe_import_module/hook-urllib3.packages.six.moves.py'.
5224 INFO: Loading module hook 'hook-cryptography.py' from '/usr/lib/python3.11/site-packages/_pyinstaller_hooks_contrib/hooks/stdhooks'...
5880 INFO: Loading module hook 'hook-platformdirs.py' from '/usr/lib/python3.11/site-packages/_pyinstaller_hooks_contrib/hooks/stdhooks'...
6111 INFO: Loading module hook 'hook-markdown.py' from '/usr/lib/python3.11/site-packages/_pyinstaller_hooks_contrib/hooks/stdhooks'...
6727 INFO: Loading module hook 'hook-difflib.py' from '/usr/lib/python3.11/site-packages/PyInstaller/hooks'...
6866 INFO: Loading module hook 'hook-multiprocessing.util.py' from '/usr/lib/python3.11/site-packages/PyInstaller/hooks'...
7583 INFO: Processing module hooks...
7583 INFO: Loading module hook 'hook-lxml.etree.py' from '/usr/lib/python3.11/site-packages/_pyinstaller_hooks_contrib/hooks/stdhooks'...
7583 WARNING: Hidden import ""charset_normalizer.md__mypyc"" not found!
7598 INFO: Loading module hook 'hook-pygments.py' from '/usr/lib/python3.11/site-packages/PyInstaller/hooks'...
8053 INFO: Loading module hook 'hook-pkg_resources.py' from '/usr/lib/python3.11/site-packages/PyInstaller/hooks'...
8334 INFO: Loading module hook 'hook-jaraco.text.py' from '/usr/lib/python3.11/site-packages/_pyinstaller_hooks_contrib/hooks/stdhooks'...
8448 INFO: Loading module hook 'hook-sysconfig.py' from '/usr/lib/python3.11/site-packages/PyInstaller/hooks'...
8813 INFO: Loading module hook 'hook-lxml.isoschematron.py' from '/usr/lib/python3.11/site-packages/_pyinstaller_hooks_contrib/hooks/stdhooks'...
8816 INFO: Loading module hook 'hook-PyQt5.py' from '/usr/lib/python3.11/site-packages/PyInstaller/hooks'...
8860 WARNING: Hidden import ""sip"" not found!
8860 INFO: Loading module hook 'hook-PyQt5.QtWidgets.py' from '/usr/lib/python3.11/site-packages/PyInstaller/hooks'...
8890 WARNING: ldd warnings for '/usr/lib/python3.11/site-packages/PyQt5/QtWidgets.abi3.so':
ldd: attenzione: permessi di esecuzione mancanti per `/usr/lib/python3.11/site-packages/PyQt5/QtWidgets.abi3.so'
9003 WARNING: Hidden import ""pkg_resources._vendor.jaraco.functools"" not found!
9003 WARNING: Hidden import ""pkg_resources._vendor.jaraco.context"" not found!
9003 WARNING: Hidden import ""pkg_resources._vendor.jaraco.text"" not found!
9030 INFO: Loading module hook 'hook-PIL.py' from '/usr/lib/python3.11/site-packages/PyInstaller/hooks'...
9094 INFO: Loading module hook 'hook-PIL.Image.py' from '/usr/lib/python3.11/site-packages/PyInstaller/hooks'...
9262 INFO: Loading module hook 'hook-pycparser.py' from '/usr/lib/python3.11/site-packages/_pyinstaller_hooks_contrib/hooks/stdhooks'...
9640 INFO: Loading module hook 'hook-setuptools.py' from '/usr/lib/python3.11/site-packages/PyInstaller/hooks'...
10025 INFO: Processing pre-safe import module hook distutils from '/usr/lib/python3.11/site-packages/PyInstaller/hooks/pre_safe_import_module/hook-distutils.py'.
10029 INFO: Processing pre-find module path hook distutils from '/usr/lib/python3.11/site-packages/PyInstaller/hooks/pre_find_module_path/hook-distutils.py'.
10124 INFO: Loading module hook 'hook-distutils.py' from '/usr/lib/python3.11/site-packages/PyInstaller/hooks'...
10164 INFO: Loading module hook 'hook-distutils.util.py' from '/usr/lib/python3.11/site-packages/PyInstaller/hooks'...
10860 INFO: Loading module hook 'hook-PIL.ImageFilter.py' from '/usr/lib/python3.11/site-packages/PyInstaller/hooks'...
11963 INFO: Loading module hook 'hook-PyQt5.QtCore.py' from '/usr/lib/python3.11/site-packages/PyInstaller/hooks'...
11990 WARNING: ldd warnings for '/usr/lib/python3.11/site-packages/PyQt5/QtCore.abi3.so':
ldd: attenzione: permessi di esecuzione mancanti per `/usr/lib/python3.11/site-packages/PyQt5/QtCore.abi3.so'
12015 INFO: Loading module hook 'hook-setuptools.msvc.py' from '/usr/lib/python3.11/site-packages/PyInstaller/hooks'...
12208 INFO: Loading module hook 'hook-setuptools._distutils.command.check.py' from '/usr/lib/python3.11/site-packages/PyInstaller/hooks'...
12294 INFO: Loading module hook 'hook-lxml.objectify.py' from '/usr/lib/python3.11/site-packages/_pyinstaller_hooks_contrib/hooks/stdhooks'...
12295 INFO: Loading module hook 'hook-PyQt5.QtGui.py' from '/usr/lib/python3.11/site-packages/PyInstaller/hooks'...
12324 WARNING: ldd warnings for '/usr/lib/python3.11/site-packages/PyQt5/QtGui.abi3.so':
ldd: attenzione: permessi di esecuzione mancanti per `/usr/lib/python3.11/site-packages/PyQt5/QtGui.abi3.so'
12853 INFO: Loading module hook 'hook-PIL.SpiderImagePlugin.py' from '/usr/lib/python3.11/site-packages/PyInstaller/hooks'...
12969 INFO: Loading module hook 'hook-_tkinter.py' from '/usr/lib/python3.11/site-packages/PyInstaller/hooks'...
Traceback (most recent call last):
  File ""/usr/bin/pyinstaller"", line 8, in <module>
    sys.exit(_console_script_run())
             ^^^^^^^^^^^^^^^^^^^^^
  File ""/usr/lib/python3.11/site-packages/PyInstaller/__main__.py"", line 228, in _console_script_run
    run()
  File ""/usr/lib/python3.11/site-packages/PyInstaller/__main__.py"", line 212, in run
    run_build(pyi_config, spec_file, **vars(args))
  File ""/usr/lib/python3.11/site-packages/PyInstaller/__main__.py"", line 69, in run_build
    PyInstaller.building.build_main.main(pyi_config, spec_file, **kwargs)
  File ""/usr/lib/python3.11/site-packages/PyInstaller/building/build_main.py"", line 1091, in main
    build(specfile, distpath, workpath, clean_build)
  File ""/usr/lib/python3.11/site-packages/PyInstaller/building/build_main.py"", line 1031, in build
    exec(code, spec_namespace)
  File ""build-on-linux.spec"", line 5, in <module>
    a = Analysis(['PixelFlasher.py'],
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/usr/lib/python3.11/site-packages/PyInstaller/building/build_main.py"", line 470, in __init__
    self.__postinit__()
  File ""/usr/lib/python3.11/site-packages/PyInstaller/building/datastruct.py"", line 184, in __postinit__
    self.assemble()
  File ""/usr/lib/python3.11/site-packages/PyInstaller/building/build_main.py"", line 614, in assemble
    self.graph.process_post_graph_hooks(self)
  File ""/usr/lib/python3.11/site-packages/PyInstaller/depend/analysis.py"", line 329, in process_post_graph_hooks
    module_hook.post_graph(analysis)
  File ""/usr/lib/python3.11/site-packages/PyInstaller/depend/imphook.py"", line 447, in post_graph
    self._process_hook_func(analysis)
  File ""/usr/lib/python3.11/site-packages/PyInstaller/depend/imphook.py"", line 469, in _process_hook_func
    self._hook_module.hook(hook_api)
  File ""/usr/lib/python3.11/site-packages/PyInstaller/hooks/hook-_tkinter.py"", line 27, in hook
    hook_api.add_datas(collect_tcl_tk_files(hook_api.__file__))
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/usr/lib/python3.11/site-packages/PyInstaller/utils/hooks/tcl_tk.py"", line 236, in collect_tcl_tk_files
    tcl_root, tk_root = _find_tcl_tk(tkinter_ext_file)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/usr/lib/python3.11/site-packages/PyInstaller/utils/hooks/tcl_tk.py"", line 198, in _find_tcl_tk
    tk_dir = os.path.join(os.path.dirname(tcl_dir), f""tk{tk_version}"")
                          ^^^^^^^^^^^^^^^^^^^^^^^^
  File ""<frozen posixpath>"", line 152, in dirname
TypeError: expected str, bytes or os.PathLike object, not NoneType
==> ERRORE: Si è verificato un errore in build().
    L'operazione sta per essere interrotta...
 -> errore durante la creazione: pixelflasher-exit status 4
 -> Installazione dei seguenti pacchetti non riuscita. È richiesto l'intervento manuale:
pixelflasher - exit status 4
"
K42RLhB6,E,Ankit_132,C++,Wednesday 28th of February 2024 12:47:20 PM CDT,"#include <bits/stdc++.h>
using namespace std;

int main() {
	int t;
	cin>>t;
	
	while(t--){
	    int n, a, b;
	    cin>>n>>a>>b;

        if (a > b)
            cout << ""Alice\n"";
        else if (a < b)
        {
            if (n <= a) 
                cout << ""Alice\n"";
            else 
                cout << ""Bob\n"";
        } 
        else 
        {
            if (n % (a + 1) == 0) 
                cout << ""Bob\n"";
            else 
                cout << ""Alice\n"";
        }
	}
}"
pWsFRQ8J,D,Ankit_132,C++,Wednesday 28th of February 2024 12:46:51 PM CDT,"#include <bits/stdc++.h>
using namespace std;

int main() {
	int t;
	cin>>t;
	
	while(t--){
	    int n, q;
	    cin>>n>>q;
	    
	    vector<int> a(n);
	    for(auto &e: a)
	        cin>>e;
	        
        map<int, int> poss;
        map<int, pair<int, int>> ind;
        
        for(int i=0; i<n; i++)
        {
            for(int j=i+1; j<n; j++)
            {
                ind[a[i] + a[j]] = {i, j};
                poss[a[i] + a[j]] = 1;
            }
        }
        
        int tot = accumulate(a.begin(), a.end(), 0);
        
        while(q--)
        {
            int x;
            cin>>x;
            
            if(poss[2*tot-x])
            {
                cout<<a[ind[2*tot-x].first]<<"" "";
                for(int i=0; i<n; i++)
                {
                    if(i==ind[2*tot-x].first || i==ind[2*tot-x].second)
                        continue;
                        
                    cout<<a[i]<<"" "";
                }
                
                cout<<a[ind[2*tot-x].second]<<""\n"";
            }
            else
                cout<<""-1\n"";
        }
	}
}"
b4e9i4Zc,C,Ankit_132,C++,Wednesday 28th of February 2024 12:46:22 PM CDT,"#include <bits/stdc++.h>
using namespace std;

int main() {
	int t;
	cin>>t;
	
	while(t--){
	    int n;
	    cin>>n;
	    
	    long long int x = (n*1ll*(n+1))/2;
	    
	    cout<<x-1+n<<""\n"";
	}
}"
erRuZNB9,B,Ankit_132,C++,Wednesday 28th of February 2024 12:45:54 PM CDT,"#include <bits/stdc++.h>
using namespace std;

int main() {
	int t;
	cin>>t;
	
	while(t--){
	    int n;
	    cin>>n;
	    
	    if(n%2 == 0)
	    {
	        int x = n/2;
	        cout<<(x*1ll*(x+1))<<""\n"";
	    }
	    else
	    {
	        int x = n/2;
	        cout<<(x*1ll*(x+1)) + (n+1)/2<<""\n"";
	    }
	}
}"
6z8EKHVS,A,Ankit_132,C++,Wednesday 28th of February 2024 12:45:11 PM CDT,"#include <bits/stdc++.h>
using namespace std;

int main() {
	int t;
	cin>>t;
	
	while(t--){
	    int n;
	    cin>>n;
	    
	    vector<int> a(n);
	    for(auto &e: a)
	        cin>>e;
	        
        sort(a.begin(), a.end());
        
        int tot = accumulate(a.begin(), a.end(), 0);
        
        cout<<tot*2 - a[0] - a[1]<<""\n"";
	}
}"
