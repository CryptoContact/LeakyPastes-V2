id,title,username,language,date,content
u0uAseRK,2023-12-14_stats.json,rdp_snitch,JSON,Thursday 14th of December 2023 06:15:09 PM CDT,"{
  ""ip"": {
    ""110.86.3.66"": 2,
    ""194.165.17.21"": 14,
    ""31.43.185.3"": 2,
    ""45.227.254.8"": 2,
    ""20.204.6.102"": 1,
    ""185.229.59.65"": 1,
    ""138.68.232.124"": 4,
    ""45.33.95.124"": 1,
    ""141.98.9.34"": 1,
    ""87.251.75.145"": 3,
    ""62.204.41.240"": 4,
    ""198.235.24.106"": 3,
    ""185.170.144.3"": 2,
    ""45.140.17.46"": 3,
    ""185.170.144.113"": 12,
    ""194.165.16.73"": 4,
    ""198.235.24.77"": 3,
    ""162.142.125.217"": 1,
    ""45.93.20.204"": 3,
    ""87.251.75.120"": 2,
    ""81.19.135.47"": 6,
    ""45.227.254.22"": 3,
    ""165.154.138.85"": 1,
    ""58.218.204.183"": 3,
    ""198.235.24.234"": 3,
    ""196.190.117.7"": 1,
    ""62.204.61.207"": 1,
    ""47.254.254.42"": 68,
    ""51.75.160.42"": 8,
    ""103.183.121.117"": 1,
    ""43.129.75.233"": 1,
    ""152.32.206.247"": 1,
    ""205.210.31.43"": 3,
    ""193.37.69.150"": 3,
    ""68.183.79.68"": 1
  },
  ""asn"": {
    ""AS4134"": 5,
    ""AS48721"": 18,
    ""AS211736"": 2,
    ""AS267784"": 5,
    ""AS8075"": 1,
    ""AS147049"": 1,
    ""AS14061"": 5,
    ""AS63949"": 1,
    ""AS209588"": 7,
    ""AS208091"": 8,
    ""AS59425"": 4,
    ""AS396982"": 12,
    ""AS197414"": 14,
    ""AS198953"": 3,
    ""AS398324"": 1,
    ""AS57523"": 3,
    ""AS135377"": 2,
    ""AS24757"": 1,
    ""AS34412"": 1,
    ""AS45102"": 68,
    ""AS16276"": 8,
    ""AS135918"": 1,
    ""AS132203"": 1
  },
  ""isp"": {
    ""Chinanet"": 5,
    ""Flyservers S.A."": 30,
    ""FOP Dmytro Nedilskyi"": 2,
    ""Microsoft Corporation"": 1,
    ""PacketHub S.A."": 1,
    ""DigitalOcean, LLC"": 5,
    ""Akamai Technologies, Inc."": 1,
    ""Xhost Internet Solutions LP"": 19,
    ""Horizon LLC"": 4,
    ""Google LLC"": 12,
    ""Proton66 OOO"": 3,
    ""Censys, Inc."": 1,
    ""Chang Way Technologies Co. Limited"": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Ethiotelecom"": 1,
    ""Saba Hour Yeganeh Co. ( Private Joint Stock)"": 1,
    ""Alibaba (US) Technology Co., Ltd."": 68,
    ""OVH SAS"": 8,
    ""GRCITY"": 1,
    ""Aceville Pte.ltd"": 1,
    ""Xhost Internet Solutions"": 3
  },
  ""org"": {
    ""Chinanet FJ"": 2,
    ""Flyservers S.A"": 18,
    ""FOP Dmytro Nedilskyi"": 2,
    ""UAB Host Baltic"": 5,
    ""Microsoft Azure Cloud (centralindia)"": 1,
    ""NordVPN"": 1,
    ""DigitalOcean, LLC"": 5,
    ""Linode"": 1,
    ""Alviva Holding Limited"": 7,
    ""Xhost Internet Solutions"": 5,
    ""Horizon LLC"": 4,
    ""Palo Alto Networks, Inc"": 12,
    ""Xhostis"": 14,
    ""Proton66 LLC"": 3,
    ""Censys Inc"": 1,
    ""Starcrecium Limited"": 3,
    ""Ucloud Information Technology (hk) Limited"": 1,
    ""Chinanet JS"": 3,
    ""Unknown"": 2,
    ""Saba Abr Mizban LLC"": 1,
    ""Alibaba.com LLC"": 68,
    ""OVH Ltd"": 8,
    ""GREEN CITY Construction Investment Joint Stock Company"": 1,
    ""Ucloud Information Technology"": 1,
    ""XHOSTIS"": 3
  },
  ""regionName"": {
    ""Fujian"": 2,
    ""Kaunas"": 18,
    ""Dnipropetrovsk Oblast"": 2,
    ""Vilnius"": 5,
    ""Maharashtra"": 1,
    ""Missouri"": 1,
    ""California"": 16,
    ""New Jersey"": 1,
    ""North Holland"": 23,
    ""Moscow"": 10,
    ""Michigan"": 1,
    ""Sverdlovsk Oblast"": 6,
    ""Hesse"": 2,
    ""Jiangsu"": 3,
    ""Addis Ababa"": 1,
    ""Tehran"": 1,
    ""Kuala Lumpur"": 68,
    ""England"": 8,
    ""Gia Lai"": 1,
    ""Central and Western District"": 1,
    ""Virginia"": 1
  },
  ""country"": {
    ""China"": 5,
    ""Lithuania"": 23,
    ""Ukraine"": 2,
    ""India"": 1,
    ""United States"": 20,
    ""The Netherlands"": 23,
    ""Russia"": 16,
    ""Germany"": 2,
    ""Ethiopia"": 1,
    ""Iran"": 1,
    ""Malaysia"": 68,
    ""United Kingdom"": 8,
    ""Vietnam"": 1,
    ""Hong Kong"": 1
  },
  ""account"": {
    ""(empty)"": 5,
    ""hello"": 89,
    ""Administr"": 10,
    ""Test"": 17,
    ""0x24l7ap"": 4,
    ""beio"": 1,
    ""cQTlzYEcu"": 1,
    ""jTJGnv"": 1,
    ""bmftmB"": 1,
    ""Domain"": 32,
    ""nCYhrIHpz"": 1,
    ""rzfKhe"": 1,
    ""KYyCeS"": 1,
    ""Administrator"": 2,
    ""dfBZTqGNe"": 1,
    ""avDebl"": 1,
    ""ZpLpwy"": 1,
    ""scyepUaHt"": 1,
    ""XEQIbC"": 1,
    ""cSNyHL"": 1
  },
  ""keyboard"": {
    ""Unknown"": 172
  },
  ""client_build"": {
    ""Unknown"": 172
  },
  ""client_name"": {
    ""Unknown"": 172
  },
  ""ip_type"": {
    ""mobile"": 3,
    ""Unknown"": 64,
    ""hosting"": 94,
    ""proxy"": 7,
    ""hosting & proxy"": 4
  }
}"
viKSD2Ss,Untitled,LightMoon,Bash,Thursday 14th of December 2023 06:14:24 PM CDT,"	 - Grott extension processing disabled 

	 - Growatt packet received:
		  <socket.socket fd=5, family=2, type=1, proto=0, laddr=('172.30.33.3', 5279), raddr=('192.168.10.92', 2006)>
	 - Data less then minimum record length, data not processed

	 - Growatt packet received:
		  <socket.socket fd=4, family=2, type=1, proto=0, laddr=('172.30.33.3', 39098), raddr=('47.91.67.66', 5279)>
	 - Growatt original Data:
		 \x00\x45\x00\x06\x01\x0e\x01\x20\x1f\x35\x2b\x41\x22\x39\x47\x76\x27\x21\x77
		 \x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72
		 \x3c\x27\x2c\x46\x30\x05\x37\x5f\x43\x55\x74\x74\x47\x72\x6f\x77\x61\x74\x74
		 \x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x76\x78\x7b\x4c\x75\x4f\x77\xa9
		 \x74\x74\x47\xf6\x6f\x77\x68\xf9\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f
		 \xd7\x61\x74\x74\x47\x72\x6f\x77\x61\x8b\x8b\x39\xdd\x6f\x77\x61\x74\x74\x47
		 \x72\x6f\x77\x61\xfb\x9e\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x36\xa0\x74
		 \x74\x47\x72\x6f\x77\x61\x74\x8b\xb8\x8e\xea\x77\x61\x74\x74\x47\x72\x6f\x77
		 \x9e\x8b\x0a\xe8\x72\x6f\xf8\x8b\x74\x74\x06\xb3\x90\x88\x9d\xf1\x74\x47\x73
		 \x9b\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x7a\x65\x74\x74
		 \x0f\xd8\x6f\x77\x5b\x08\x74\x47\x77\x4a\x77\x61\x74\x74\x47\x72\x3a\xd9\x61
		 \x74\x4b\xe5\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f
		 \x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47
		 \x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74
		 \x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x9f\x4e
	 - Grott automatic protocol detection
	 - Grott data record length 278
	 - layout   :  T060120
	 - Record layout used :  T060120
	 - Growatt data decrypted V2
	 - Grott Growatt data decrypted
	 - Growatt plain data:
		 00450006010e012058474436434d3331554e00000000000000000000000000000000000000005
		 3504d324442453034340000000000000000000000000000000000000000170c0f0b072000c800
		 0000840000098d0000000000000000000000a00000000000000000ffff7eaf000000000000000
		 000008fea0000000000000000000041c10000000000000000fffffc850000000000000000ffff
		 7eaf00008fea000041c1fffffc85000001f400000000000000000000000000000d04000048aa0
		 0003a7c0000052500000000000055ae00003fa200000000000000000000000000000000000000
		 00000000000000000000000000000000000000000000000000000000000000000000000000000
		 0000000000000f039
	 - Growatt new layout processing
		 - decrypt       :  True
		 - offset        :  6
		 - record layout :  T060120

	 - Grott data record date/time processing started
	 - date-time:  2023-12-15T11:07:32
	 - Grott values retrieved:
		 -  datalogserial        :  XGD6CM31UN
		 -  pvserial             :  SPM2DBE044
		 -  voltage_l1           :  244.5
		 -  voltage_l2           :  0.0
		 -  voltage_l3           :  0.0
		 -  Current_l1           :  16.0
		 -  Current_l2           :  0.0
		 -  Current_l3           :  0.0
		 -  act_power_l1         :  -3310.5
		 -  act_power_l2         :  0.0
		 -  act_power_l3         :  0.0
		 -  app_power_l1         :  3684.2
		 -  app_power_l2         :  0.0
		 -  app_power_l3         :  0.0
		 -  react_power_l1       :  1683.3
		 -  react_power_l2       :  0.0
		 -  react_power_l3       :  0.0
		 -  powerfactor_l1       :  -0.9
		 -  powerfactor_l2       :  0.0
		 -  powerfactor_l3       :  0.0
		 -  pos_rev_act_power    :  -3310.5
		 -  pos_act_power        :  -3310.5
		 -  rev_act_power        :  -3310.5
		 -  app_power            :  3684.2
		 -  react_power          :  1683.3
		 -  powerfactor          :  -0.9
		 -  frequency            :  50.0
		 -  L1-2_voltage         :  0.0
		 -  L2-3_voltage         :  0.0
		 -  L3-1_voltage         :  0.0
		 -  pos_act_energy       :  333.2
		 -  rev_act_energy       :  1860.2
	 - MQTT jsonmsg: 
			 {""device"": ""XGD6CM31UN"", ""time"": ""2023-12-15T11:07:32"", ""buffered"": ""no"",
			 ""values"": {""datalogserial"": ""XGD6CM31UN"", ""pvserial"": ""SPM2DBE044"",
			 ""voltage_l1"": 2445, ""voltage_l2"": 0, ""voltage_l3"": 0, ""Current_l1"": 160,
			 ""Current_l2"": 0, ""Current_l3"": 0, ""act_power_l1"": -33105, ""act_power_l2"": 0,
			 ""act_power_l3"": 0, ""app_power_l1"": 36842, ""app_power_l2"": 0, ""app_power_l3"":
			 0, ""react_power_l1"": 16833, ""react_power_l2"": 0, ""react_power_l3"": 0,
			 ""powerfactor_l1"": -891, ""powerfactor_l2"": 0, ""powerfactor_l3"": 0,
			 ""pos_rev_act_power"": -33105, ""pos_act_power"": -33105, ""rev_act_power"":
			 -33105, ""app_power"": 36842, ""react_power"": 16833, ""powerfactor"": -891,
			 ""frequency"": 500, ""L1-2_voltage"": 0, ""L2-3_voltage"": 0, ""L3-1_voltage"": 0,
			 ""pos_act_energy"": 3332, ""rev_act_energy"": 18602}}
	 - Grott MQTT topic used : energy/growatt
	 - MQTT message message sent
	 - Grott Send data to PVOutput disabled 
	 - Grott Send data to Influx disabled 
	 - Grott extension processing disabled 

	 - Growatt packet received:
		  <socket.socket fd=5, family=2, type=1, proto=0, laddr=('172.30.33.3', 5279), raddr=('192.168.10.92', 2006)>
	 - Data less then minimum record length, data not processed"
THFXKfgD,BTC Wallet Credentials have been reset,VQ-Moe,GetText,Thursday 14th of December 2023 05:51:51 PM CDT,"Dear Moe,
We have received a request to reset the login information for your Bitcoin wallet. If you did not make this request, please contact us immediately.

Your new login credentials will be 
chefman440:Jmh3x9ZB on 149.28.231.183
You can connect via SSH.

Regards,
GM-826059"
BUq94H2S,G2A Refund Exploit Dec 2023,G2ARefundExploit,GetText,Thursday 14th of December 2023 04:39:09 PM CDT,"G2A refund exploit updated guide - any item for free on G2A.com

https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view#g2a_refund_exploit.pdf

Working as of 
13 December 2023

401634"
GnErDTNW,AoC 2023 day 13 (Smalltalk),musifter,Smalltalk,Thursday 14th of December 2023 04:09:24 PM CDT,"#!/usr/local/bin/gst -q

Symbol extend     [ value: obj     [^obj perform: self] ]

Integer extend    [ oneBitSet      [^(self bitAnd: (self - 1)) = 0] ]
Collection extend [ reduceAsBinary [^self inject: 0 into: [:num :dig | num*2 + dig]] ]

Array extend [
    "" Method for finding index of reflection line in part 1: ""
    findMirrorIndex [
        | stack |
        stack := OrderedCollection with: (self first).
        self allButFirst keysAndValuesDo: [:i :val |
            (val = stack last) ifTrue:  [ stack removeLast ]
                               ifFalse: [ stack add: val   ].

            (stack isEmpty) ifTrue: [ ^(i+1) / 2 ]
        ].
        ^0
    ]

    "" Method for finding index of reflection line in part 2: ""
    findSmudgedIndex [
        | check pushVal popVal back |

        (1 to: self size // 2) do: [:depth |
            back  := depth * 2 + 1.
            check := 0.
            (1 to: depth) do: [:i |
                pushVal := self at: i.
                popVal  := self at: back - i.
                (pushVal ~= popVal) ifTrue: [
                    "" add one if 1 bit, 2 if more ""
                    check := check + ((pushVal bitXor: popVal) oneBitSet ifTrue:  [1]
                                                                         ifFalse: [2]).
                ].
            ].

            "" Check equals 1 only when exactly one 1-bit difference is seen ""
            (check = 1) ifTrue: [ ^depth ].
        ].
        ^0
    ]

    "" Scoring for problem: ""
    score  [ ^100 * self first + self second ]

    scanForMirrors: symMethod [
        | score |
        "" Try backwards mirrors: ""
        score := ((self collect: #reverse) collect: [:list | |val|
                     val := list perform: symMethod.
                     (val ~= 0) ifTrue: [ list size - val ] ifFalse: [0].
                 ]) score.

        "" Try forwards mirrors: ""
        score := score + (self collect: symMethod) score.

        ^score
    ]
]

""
| Mainline
""
input := stdin contents tokenize: '\n\n'.

grids := input collect: [:grid |
             (grid tokenize: '\n') collect: [:line |
                 line asArray collect: [:chr | (chr = $#) ifTrue: [1] ifFalse: [0]].
             ]
         ].

part1 := 0.
part2 := 0.

grids do: [:grid |
    "" dimArrays has two elements: array of rows and array of cols ""
    dimArrays := {
        "" Parse rows as binary numbers: ""
        grid collect: #reduceAsBinary.

        "" Parse cols as binary numbers: ""
        (1 to: grid first size) collect: [:col |
            (grid collect: [:row | row at: col]) reduceAsBinary
        ].
    }.

    part1 := part1 + (dimArrays scanForMirrors: #findMirrorIndex).
    part2 := part2 + (dimArrays scanForMirrors: #findSmudgedIndex).
].


('Part 1: %1' % {part1}) displayNl.
('Part 2: %1' % {part2}) displayNl."
TuR5w90f,AoC 2023 day 14 (Perl),musifter,Perl,Thursday 14th of December 2023 04:05:23 PM CDT,"#!/usr/bin/perl

use strict;
use warnings;

use feature         qw(say);
use List::AllUtils  qw(indexes);

$| = 1;

# Read in text grid:
use Math::Vector::Real;

my ($vy,$vx) = Math::Vector::Real->canonical_base(2);

# Read in grid:
my @Grid = map { chomp; ['#', split(//), '#'] } <>;
my $Size = scalar( @Grid );                 # ASSUME: square platform
unshift( @Grid, [('#') x ($Size + 2)] );
push( @Grid, [('#') x ($Size + 2)] );

my @Dirs  = (-$vy, -$vx, $vy, $vx);         #  NWSE (order required)
my @Perp  = ( $vx,  $vy, $vx, $vy);

my @Start = (V($Size,1), V(1,$Size), V(1,1), V(1,1));

sub grid_at  ($)  { my $p = shift; return ($Grid[$p->[0]][$p->[1]]) }
sub grid_set ($$) { my ($p,$c) = @_; $Grid[$p->[0]][$p->[1]] = $c   }
sub print_grid    { say ""\t"", join( '', @$_ ) foreach (@Grid)       }

sub shift_grid {
    my $d = shift;

    my $count = 0;
    my $y = $Start[$d];
    for (my $i = 0; $i < $Size; $i++) {

        my $x = $y;
        for (my $j = 0; $j <= $Size; $j++) {
            if (grid_at($x) eq 'O') {
                grid_set($x, '.');
                $count++;

            } elsif (grid_at($x) eq '#') {
                my $p = $x - $Dirs[$d];
                for (my $k = 0; $k < $count; $k++) {
                    grid_set($p, 'O');
                    $p -= $Dirs[$d];
                }

                $count = 0;
            }
            $x += $Dirs[$d];
        }
        $y += $Perp[$d];
    }
}

sub score_grid {
    my $score = 0;
    my @stones;

    foreach (my $y = 1; $y <= $Size; $y++) {
        my $h = @Grid - $y - 1;
        my @s = indexes { $_ eq 'O' } $Grid[$y]->@*;

        $score += $h * @s;
        push( @stones, ""$y:"" . join(',', @s) );
    }

    return ($score, join(';', @stones));
}

#
# Part 1
#
&shift_grid(0);
say ""Part 1: "", (&score_grid)[0];

#
# Part 2
#
my $Num_Cycles = 1_000_000_000;

my %hash;
my @scores;

CYCLE:
foreach my $i (0 .. $Num_Cycles - 1) {
    &shift_grid($_) foreach (0 .. 3);

    my ($score, $stones) = &score_grid;
    push( @scores, $score );

    print ::stderr ""Cycle: $i; Score: $score \r""  if ($i % 10 == 0);

    if (!exists $hash{$stones}) {
        $hash{$stones} = $i;
        next CYCLE;
    }

    my $cycle_len = $i - $hash{$stones};
    my $mod = ($Num_Cycles - 1) % $cycle_len;

    say ""\nPart 2: "", $scores[$i - $cycle_len + ($mod - $i % $cycle_len)];
    last;
}"
57pvsaJN,illuminate.java,tchnmncr,Java,Thursday 14th of December 2023 04:05:01 PM CDT,"/* This code was generated by ChatGPT with this header comment added my me.

This code requires the necessary permissions for camera access and audio recording (for voice recognition), which need to be declared in your AndroidManifest.xml file:

<uses-permission android:name=""android.permission.CAMERA"" />
<uses-feature android:name=""android.hardware.camera"" />
<uses-feature android:name=""android.hardware.camera.flash"" />
<uses-permission android:name=""android.permission.RECORD_AUDIO"" />
<uses-permission android:name=""android.permission.INTERNET"" />

*/

import android.Manifest;
import android.content.pm.PackageManager;
import android.hardware.camera2.CameraAccessException;
import android.hardware.camera2.CameraManager;
import android.os.Bundle;
import android.speech.RecognizerIntent;
import android.speech.SpeechRecognizer;
import android.content.Intent;
import android.speech.RecognitionListener;
import android.support.annotation.NonNull;
import android.support.v4.app.ActivityCompat;
import android.support.v7.app.AppCompatActivity;
import android.widget.Toast;
import java.util.ArrayList;
import java.util.Locale;

public class MainActivity extends AppCompatActivity {

    private SpeechRecognizer speechRecognizer;
    private CameraManager cameraManager;
    private String cameraId;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        cameraManager = (CameraManager) getSystemService(CAMERA_SERVICE);
        try {
            cameraId = cameraManager.getCameraIdList()[0];
        } catch (CameraAccessException e) {
            e.printStackTrace();
        }

        speechRecognizer = SpeechRecognizer.createSpeechRecognizer(this);
        Intent speechRecognizerIntent = new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);
        speechRecognizerIntent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL, RecognizerIntent.LANGUAGE_MODEL_FREE_FORM);
        speechRecognizerIntent.putExtra(RecognizerIntent.EXTRA_LANGUAGE, Locale.getDefault());

        speechRecognizer.setRecognitionListener(new RecognitionListener() {
            @Override
            public void onResults(Bundle bundle) {
                ArrayList<String> data = bundle.getStringArrayList(SpeechRecognizer.RESULTS_RECOGNITION);
                if (data != null && data.get(0).equalsIgnoreCase(""Illuminate"")) {
                    toggleFlashLight();
                }
            }

            // Implement other necessary methods of RecognitionListener interface
        });

        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.RECORD_AUDIO) != PackageManager.PERMISSION_GRANTED) {
            ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.RECORD_AUDIO}, 1);
        } else {
            speechRecognizer.startListening(speechRecognizerIntent);
        }
    }

    private void toggleFlashLight() {
        try {
            if (getPackageManager().hasSystemFeature(PackageManager.FEATURE_CAMERA_FLASH)) {
                cameraManager.setTorchMode(cameraId, true); // Turn on
                Toast.makeText(this, ""Flashlight turned on"", Toast.LENGTH_SHORT).show();
            }
        } catch (CameraAccessException e) {
            e.printStackTrace();
        }
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        if (speechRecognizer != null) {
            speechRecognizer.destroy();
        }
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        if (requestCode == 1 && grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
            speechRecognizer.startListening(new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH));
        }
    }
}


"
sSkrMhjU,17.1,myloyo,C#,Thursday 14th of December 2023 04:01:41 PM CDT,"using System;
using System.IO;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Security.Cryptography.X509Certificates;

namespace myloyorrr
{
    class Program
    {
        class SPoint
        {
            private int x, y;
            public SPoint() { } //конструктор с нулевыми координатами
            public SPoint(int x, int y) { //конструктор с заданными координатами
                this.x = x; this.y = y ; 
            }
            public SPoint(SPoint a) 
            {
                this.x = a.x; this.y = a.y;
            }
            public void Show(StreamWriter sw) // выводим координаты точки на экран
            {
                sw.WriteLine(""({0}, {1})"", this.x, this.y);
            }
            public double Distance() // расстояние от начала координат до точки
            {
                return Math.Sqrt(x * x + y * y);
            }
            public int[] Vector(int a, int b) // перемещаем точку на вектор
            {
                this.x = x + a;
                this.y = y + b;
                int[] coord = {x, y};
                return coord;
            }
            public int X //получить-установить точку х
            {
                get { return x; }
                set { x = value; }
            }
            public int Y //получить-установить точку y
            {
                get { return y; }
                set { y = value; }
            }
            public int Mul //умножаем точку на скаляр
            {
                set
                {
                    x *= value;
                    y *= value;
                }
            }
            public int this[int i] //индексатор
            {
                get
                {
                    if (i == 0)
                    {
                        return x;
                    }
                    else if (i == 1)
                    {
                        return y;
                    }
                    else
                    {
                        throw new IndexOutOfRangeException(""unacceptable index"");
                    }
                }
                set
                {
                    if (i == 0)
                    {
                        x = value;
                    }
                    else if (i == 1)
                    {
                        y = value;
                    }
                    else
                    {
                        throw new IndexOutOfRangeException(""unacceptable index"");
                    }
                }
            }
            public static SPoint operator++(SPoint x)
            {
                SPoint p = new SPoint(x);
                p.x++;
                p.y++;
                return p;
            }
            public static SPoint operator --(SPoint x)
            {
                SPoint p = new SPoint(x);
                p.x -= 1;
                p.y -= 1;
                return p;
            }
            public static bool operator true(SPoint a)
            {
                if (a.x != a.y)
                {
                    return false;
                }
                return true;
            }
            public static bool operator false(SPoint a)
            {
                if (a.x == a.y)
                {
                    return false;
                }
                return true;
            }
            public static SPoint operator +(SPoint t, int a)
            {
                SPoint temp = new SPoint(t);
                temp.x += a;
                temp.y += a;
                return temp;

            }
            public static SPoint operator -(SPoint t, int a)
            {
                SPoint temp = new SPoint(t);
                temp.x -= a;
                temp.y -= a;
                return temp;
            }

        }
        static void Main()
        {
            using (StreamReader sr = new StreamReader(""C:/Настя/книит/in.txt""))
            {
                using (StreamWriter sw = new StreamWriter(""C:/Настя/книит/out.txt""))
                {
                    SPoint t = new SPoint (3, 3); // создаем точку (2,3)
                    t.Show(sw);

                    double r = t.Distance();
                    sw.WriteLine(r); // расстояние от начала координат до точки

                    t.Vector(3, 4); // перемещаем точку на вектор
                    t.Show(sw);

                    t.X = -5; // изменяем координату точки х
                    t.Y = -3; // изменяем координату точки у
                    t.Show(sw);

                    t.Mul = 5;
                    t.Show(sw);

                    sw.WriteLine(t[0]);
                    sw.WriteLine(t[1]);

                    t++;
                    t.Show(sw);
                    t--;
                    t.Show(sw);

                    if (t)
                    {
                        sw.WriteLine(""значения полей одинаковые"");
                    }
                    else
                    {
                        sw.WriteLine(""значения полей разные"");
                    }

                    t.X = -15;
                    if (t)
                    {
                        sw.WriteLine(""значения полей одинаковые"");
                    }
                    else
                    {
                        sw.WriteLine(""значения полей разные"");
                    }

                    t = t + 4;
                    t.Show(sw);

                    t = t - 10;
                    t.Show(sw);

                    sw.WriteLine(t[2]);

                }
            }

        }
    }
}"
LH34Gwb2,"Vaughan Aleman Frases Clave, Audios",bpmircea,BrainFuck,Thursday 14th of December 2023 03:59:21 PM CDT,"Vaughan Aleman Frases Clave
Audios

Uploading..."
55MBekDP,WooCommerce:  Modifica el precio de los productos para países específicos,YordanSoares,PHP,Thursday 14th of December 2023 03:35:40 PM CDT,"<?php
/**
 * WooCommerce:
 * Modifica el precio de los productos para países específicos
 */
add_filter( 'woocommerce_product_get_price', 'wc_return_custom_price', 10, 2 );
add_filter( 'woocommerce_product_variation_get_price', 'wc_return_custom_price', 10, 2 );
function wc_return_custom_price( $price, $product ) {    
    global $woocommerce;
	
    // Array que contiene los códigos de los países donde se aplicará el precio modificado
    $countries = array( 'US', 'GB' );
    
    // Si es la página de finalizar pago y el país de facturación del cliente está en el array...
    if ( is_checkout() && in_array( $woocommerce->customer->get_billing_country(), $countries ) ){
        // ...devuelve el precio modificado
        return ( $price / 260 ) * 1.25;
    } else {
        // Si no, devuelve el precio normal
        return $price;
    }
}"
A7s0K20s,AoC 2023 Day 14 String Method,illuminati229,Python,Thursday 14th of December 2023 03:11:08 PM CDT,"from time import time


def timer_func(func):
    # This function shows the execution time of
    # the function object passed
    def wrap_func(*args, **kwargs):
        t1 = time()
        result = func(*args, **kwargs)
        t2 = time()
        print(f'Function {func.__name__!r} executed in {(t2 - t1):.4f}s')
        return result

    return wrap_func


def tilt_east(rock_map: tuple):
    # rock map is a tuple of strings
    return tuple('#'.join([''.join(sorted(p)) for p in row.split('#')]) for row in rock_map)


def tilt_north(m: tuple):
    return rotate_counterclockwise(tilt_east(rotate_clockwise(m)))


def transpose(m: tuple):
    # transposes a tuple of strings
    return tuple(''.join(i) for i in list(zip(*m)))


def flip(m: tuple):
    # flip a tuple north-south
    return m[::-1]


def rotate_clockwise(m: tuple):
    # rotate clockwise a tuple of string
    return transpose(flip(m))


def rotate_counterclockwise(m: tuple):
    # rotate counterclockwise a tuple of strings
    return flip(transpose(m))


def spin_platform(rock_map):
    for _ in range(4):
        rock_map = rotate_clockwise(rock_map)
        rock_map = tilt_east(rock_map)
    return rock_map


def north_load(m):
    return sum([row.count('O') * i for i, row in enumerate(m[::-1], 1)])


@timer_func
def day14(filepath, part2=False):
    with open(filepath) as fin:
        rock_map = tuple(line.strip() for line in fin.readlines())

    if not part2:
        return north_load(tilt_north(rock_map))
    else:
        rm_dict = {}
        for i in range(1, 1000000000):
            rock_map = spin_platform(rock_map)
            if rock_map in rm_dict:
                loop_start = rm_dict[rock_map]
                loop_length = i - loop_start
                i_f = (1000000000 - loop_start) % loop_length + loop_start
                for rock_map, j in rm_dict.items():
                    if j == i_f:
                        return north_load(rock_map)
            else:
                rm_dict[rock_map] = i


def main():
    assert day14('test14') == 136
    print(f""Part 1: {day14('input14')}"")

    assert day14('test14', True) == 64
    print(f""Part 2: {day14('input14', True)}"")


if __name__ == '__main__':
    main()
"
3ahEs2vX,test,RealDjox,JavaScript,Thursday 14th of December 2023 03:05:54 PM CDT,"var chance = Math.random();

if (user.toLowerCase() === ""realdjox"") {
    if (chance < 0.5) {
        success = ""И у него это получилось VeryPog"";
    } else {
        success = ""MmmHmm"";
    }
    result = ""Дурачок пытается КАМнуть в себя же. "" + success;
} else {
    var negodnik = ""негодяй camonBra "";
    
    if (user.toLowerCase() === ""lizkasosiska19"") {
        negodnik = ""негодяйка Jammies "";
    }

    if (chance < 0.5) {
        result = user + "" стреляет КАМом прям в RealDjox и попадает же, "" + negodnik;
    } else {
        result = user + "" стреляет КАМом прям в RealDjox, но не попадает happyReset"";
    }
}
"
71PBabaZ,AoC 2023 Day 14,illuminati229,Python,Thursday 14th of December 2023 03:02:22 PM CDT,"from time import time


def timer_func(func):
    # This function shows the execution time of
    # the function object passed
    def wrap_func(*args, **kwargs):
        t1 = time()
        result = func(*args, **kwargs)
        t2 = time()
        print(f'Function {func.__name__!r} executed in {(t2 - t1):.4f}s')
        return result

    return wrap_func


def tilt_north(rock_map: list):
    move = True
    while move:
        move = False
        for x, line in enumerate(rock_map[1:]):
            # x will be off by one
            for y, c in enumerate(line):
                if rock_map[x + 1][y] in '.#':
                    continue
                if rock_map[x][y] in '#O':
                    continue
                else:
                    rock_map[x][y] = 'O'
                    rock_map[x + 1][y] = '.'
                    move = True
    return rock_map


def transpose(m: list):
    # transposes a list of lists
    return [list(r) for r in list(zip(*m))]


def flip(m: list):
    return m[::-1]


def spin_platform(rock_map):
    for _ in range(4):
        rock_map = tilt_north(rock_map)
        rock_map = flip(rock_map)
        rock_map = transpose(rock_map)
    return rock_map


@timer_func
def day14(filepath, part2=False):
    with open(filepath) as fin:
        lines = [line.strip() for line in fin.readlines()]

    if not part2:
        round_rocks = []
        cube_rocks = set()
        stuck_rocks = set()
        for x, line in enumerate(lines):
            for y, c in enumerate(line):
                if c == '#':
                    cube_rocks.add(complex(x, y))
                elif c == 'O':
                    round_rocks.append(complex(x, y))
        while round_rocks:
            moved_rocks = []
            for rock in round_rocks:
                if rock.real == 0:
                    stuck_rocks.add(rock)
                elif stuck_rocks.intersection([rock - 1]) or cube_rocks.intersection([rock - 1]):
                    stuck_rocks.add(rock)
                else:
                    moved_rocks.append(rock - 1)
            round_rocks = [*moved_rocks]
        round_rocks = stuck_rocks
        rock_load = 0
        height = len(lines)
        for rock in round_rocks:
            rock_load += height - rock.real

        return int(rock_load)
    else:
        rock_map = [list(x) for x in lines]
        rm_dict = {}
        loop_start = 0
        loop_length = 0
        for i in range(1, 1000000000):
            rock_map = spin_platform(rock_map)
            # make a string representation of the map for hashing
            rmh = ''.join(''.join(r) for r in rock_map)
            if rmh in rm_dict:
                loop_start = rm_dict[rmh]
                loop_length = i - loop_start
                break
            else:
                rm_dict[rmh] = i
        i_f = (1000000000 - loop_start) % loop_length + loop_start
        rmh = 0
        for rmh, i in rm_dict.items():
            if i == i_f:
                break
        # unpack the string map into something easier to calculate on
        n = len(rock_map[0])
        rock_map = [rmh[i:i+n] for i in range(0, len(rmh), n)]
        load = 0
        for i, row in enumerate(rock_map[::-1]):
            load += row.count('O') * (i + 1)
        return load


def main():
    assert day14('test14') == 136
    print(f""Part 1: {day14('input14')}"")

    assert day14('test14', True) == 64
    print(f""Part 2: {day14('input14', True)}"")


if __name__ == '__main__':
    main()
"
nTgACQqg,yopta,Ab0ba,C++,Thursday 14th of December 2023 02:37:23 PM CDT,"﻿#include <iostream>
#include <functional>
#include <chrono>
#include <omp.h>

using namespace std;

using GetEllapsedTimeFn = function<chrono::duration<double>()>;

constexpr unsigned ITERATIONS_COUNT = 1000000000;

GetEllapsedTimeFn StartTimer();
double syncCalculatePi(int iterations);
double parallelForCalculatePi(int iterations);
double atomicCalculatePi(int iterations);
double reductionCalculatePi(int iterations);


int main()
{
    double syncPi = syncCalculatePi(ITERATIONS_COUNT);
    cout << syncPi << endl;

    double parallelPi = parallelForCalculatePi(ITERATIONS_COUNT);
    cout << parallelPi << endl;

    double atomicPi = atomicCalculatePi(ITERATIONS_COUNT / 10);
    cout << atomicPi << endl;

    double reductionPi = reductionCalculatePi(ITERATIONS_COUNT);
    cout << reductionPi << endl;

    return 0;
}


GetEllapsedTimeFn StartTimer()
{
    chrono::steady_clock::time_point start = chrono::steady_clock::now();

    return [start]()
    {
        return chrono::steady_clock::now() - start;
    };
}

double syncCalculatePi(int iterations)
{
    auto getEllapsedTime = StartTimer();

    double result = 0.0;
    for (int i = 0; i < iterations; ++i)
    {
        result += (i % 2 == 0 ? 1.0 : -1.0) / (2.0 * i + 1);
    }
    result *= 4;

    cout << ""syncCalculatePi time: "" << getEllapsedTime().count() << endl;

    return result;
}

double parallelForCalculatePi(int iterations)
{
    auto getEllapsedTime = StartTimer();

    double result = 0.0;
#pragma omp parallel for
    for (int i = 0; i < iterations; ++i)
    {
        result += (i % 2 == 0 ? 1.0 : -1.0) / (2.0 * i + 1);
    }
    result *= 4;

    cout << ""parallelForCalculatePi time: "" << getEllapsedTime().count() << endl;

    return result;
}

double atomicCalculatePi(int iterations)
{
    auto getEllapsedTime = StartTimer();

    double result = 0.0;
#pragma omp parallel for
    for (int i = 0; i < iterations; ++i)
    {
        double term = (i % 2 == 0 ? 1.0 : -1.0) / (2.0 * i + 1);
#pragma omp atomic
        result += term;
    }
    result *= 4;

    cout << ""atomicCalculatePi time: "" << getEllapsedTime().count() * 10 << endl;

    return result;
}

double reductionCalculatePi(int iterations)
{
    auto getEllapsedTime = StartTimer();

    double result = 0.0;
#pragma omp parallel for reduction(+:result)
    for (int i = 0; i < iterations; ++i)
    {
        result += (i % 2 == 0 ? 1.0 : -1.0) / (2.0 * i + 1);
    }
    result *= 4;

    cout << ""reductionCalculatePi time: "" << getEllapsedTime().count() << endl;

    return result;
}"
ruyLW40M,Enderchest-ME,MagmaLP,Lua,Thursday 14th of December 2023 02:31:48 PM CDT,"Sensorside = ""bottom""
PIPE_SIDE = ""right""

function ClearPages()
    sleep(0.5)
    redstone.setBundledOutput(""back"",colors.combine(redstone.getBundledOutput(""back""), colors.black))
    sleep(0.5)
    redstone.setBundledOutput(""back"",colors.subtract(redstone.getBundledOutput(""back""), colors.black))
    sleep(2)
end
 
function ResetSignals()
    sleep(0.5)
    redstone.setBundledOutput(""back"",colors.subtract(redstone.getBundledOutput(""back""), colors.orange))
    sleep(0.5)
    redstone.setBundledOutput(""back"",colors.combine(redstone.getBundledOutput(""back""), colors.blue))
end

function RequestItems()
    -- IMPLEMENTATION
    function convertNBT(nbt)
        local conv = {}
        if (nbt == nil) then
            return nil
        elseif (nbt[""type""] == ""NBTTagCompound"") or (nbt[""type""] == ""NBTTagList"") then
            for key, value in pairs(nbt[""value""]) do
                conv[key] = convertNBT(value)
            end
        else
            conv = nbt[""value""]
        end
        return conv
    end
 
    function getItems(pipe)
        pipe.getAvailableItems()
        local event, result = os.pullEvent(""available_items_return"")
        return result
    end
 
    -- Funktion inList anpassen, um Variablen zu verwenden
    function inList(item)
        local id = item.id
        local dmg = item.dmg
        local idKey = tostring(id)
        local exists, requestAmount = false, 0
 
        local variantKey = idKey .. "":"" .. tostring(dmg)
        if REQUEST_IDS[variantKey] then
            exists = true
            requestAmount = REQUEST_IDS[variantKey]
        end
 
        return exists, requestAmount
    end
 
    -- MAIN
    local pipe = peripheral.wrap(PIPE_SIDE)
    for i, result in pairs(getItems(pipe)) do
        local iid, amount = unpack(result)
        local item = {
            id = pipe.getItemID(iid),
            dmg = pipe.getItemDamage(iid),
            nbt = convertNBT(pipe.getNBTTagCompound(iid))
        }
        local exists, requestAmount = inList(item)
        if exists then
            pipe.makeRequest(iid, requestAmount)
            sleep(0.15)
        end
    end
end

function ladeItems(page)
    local datei = fs.open(""ItemsInPage"" .. page, ""r"")  -- Datei im Lesemodus öffnen
    if not datei then
        print(""Fehler: Datei nicht gefunden"")
        return
    end
 
    local items = {
        ItemName = {},
        ItemSize = {},
        ItemID_1 = {},
        ItemID_2 = {}
    }
 
    -- Schleife durch jede Zeile der Datei
    MaxItems = 0
    repeat
        local zeile = datei.readLine()
        if zeile then
            local itemName, itemSize, itemID = zeile:match(""([^%-]+)%-([^%-]+)%-(.+)"")
            if itemName and itemSize and itemID then
                table.insert(items.ItemName, itemName)
                table.insert(items.ItemSize, tonumber(itemSize))
                table.insert(items.ItemID_1, tonumber(itemID:match(""%d+"")))
                table.insert(items.ItemID_2, tonumber(itemID:match("":(%d+)"")))
                MaxItems = MaxItems + 1
            else
                print(""Fehlerhafte Zeile in der Datei: "" .. zeile)
            end
        end
    until not zeile
 
    datei:close()  -- Datei schließen
 
    return items
end

function RequestPage()
	local ItemsInPage = ladeItems(Page)  -- Lade Items aus der Page
 	for a = 1, MaxItems do
        ItemID_1 = ItemsInPage.ItemID_1[a]
        ItemID_2 = ItemsInPage.ItemID_2[a]
        ItemSize = ItemsInPage.ItemSize[a]

        io.write(ItemsInPage.ItemName[a] .. "" "")
        io.write(ItemsInPage.ItemID_1[a] .. "":"")
        io.write(ItemsInPage.ItemID_2[a] .. "" "")
        io.write(ItemsInPage.ItemSize[a] .. "" "")
        io.write(""\n"")

        REQUEST_IDS = {
            [tostring(ItemID_1) .. "":"" .. tostring(ItemID_2)] = ItemSize,}
        RequestItems()
        sleep(0.2)
    end
end

------programm start------
sle = 0.1 --Sleep zwischen jeder Request
os.loadAPI(""ocs/apis/sensor"")
sen = sensor.wrap(""bottom"")

redstone.setBundledOutput(""back"",colors.combine(redstone.getBundledOutput(""back""), colors.orange))  --orange an
sleep(0.5)
redstone.setBundledOutput(""back"",colors.subtract(redstone.getBundledOutput(""back""), colors.blue))   --blau aus
 
while true do
    s = sen.getTargets()
    function getS()
        for v, k  in pairs(s) do
            if k.Name == ""ME Wireless Access Point"" then   
                target = v
            end
        end
        return target
    end
 
    f = getS()
    s1 = sen.getTargetDetails(target)
    
    local Page1 = 0
    local Page2 = 0
    local Page3 = 0
    local Page4 = 0
    local Page5 = 0
    local Page6 = 0
    local Page7 = 0
    local Page8 = 0
    local Page9 = 0
 
    for _, item in pairs(s1.Items) do
        if item.Name == ""ME Wireless Access Terminal"" then
            Page1 = item.Size -- Werte ermittels und setzen
        end
        if item.Name == ""Advanced Solar Panel"" then
            Page2 = item.Size -- Werte ermittels und setzen
        end
        if item.Name == ""Remote Orderer"" then
            Page3 = item.Size -- Werte ermittels und setzen
        end
        if item.Name == ""Cobblestone"" then
            Page4 = item.Size -- Werte ermittels und setzen
        end
        if item.Name == ""tile.machineBlock"" then
            Page5 = item.Size -- Werte ermittels und setzen
        end
        if item.Name == ""item.PipeItemsDiamond"" then
            Page6 = item.Size -- Werte ermittels und setzen
        end
        if item.Name == ""Electric Furnace"" then
            Page7 = item.Size -- Werte ermittels und setzen
        end
        if item.Name == ""Clay Dust"" then
            Page8 = item.Size -- Werte ermittels und setzen
        end
        if item.Name == ""Wooden Axe"" then
            Page9 = item.Size -- Werte ermittels und setzen
        end
        if item.Size < 0 then
            os.reboot()
        end
    end
    
    term.setCursorPos(1,1)
    term.clear()
    print(""1: ""..Page1)
    print(""2: ""..Page2)
    print(""3: ""..Page3)
    print(""4: ""..Page4)
    print(""5: ""..Page5)
    print(""6: ""..Page6)
    print(""7: ""..Page7)
    print(""8: ""..Page8)
    print(""9: ""..Page9)
    
    reboot = 1
    if Page1 < 1 or Page2 < 1 or Page3 < 1 or Page4 < 1 or Page5 < 1 or Page6 < 1 or Page7 < 1 or Page8 < 1 or Page9 < 1 then
        ResetSignals()
        ClearPages()  
        
        if Page1 < 1 then
            Page = 1
        elseif Page2 < 1 then
            Page = 2
        elseif Page3 < 1 then
            Page = 3
        elseif Page4 < 1 then
            Page = 4
        elseif Page4 < 1 then
            Page = 5
        elseif Page4 < 1 then
            Page = 6
        elseif Page4 < 1 then
            Page = 7
        elseif Page4 < 1 then
            Page = 8
        elseif Page4 < 1 then
            Page = 9
        end
    
        if Page1 < 1 or Page2 < 1 or Page3 < 1 or Page4 < 1 or Page5 < 1 or Page6 < 1 or Page7 < 1 or Page8 < 1 or Page9 < 1 then
            RequestPage()
            sleep(2)
            reboot = 0
        end
    end
    
    if reboot == 0 then
        os.reboot()
    end
    sleep(1)
end"
U2MjFpKy,basic_example_spectrum_python,Danila_lipatov,Python,Thursday 14th of December 2023 02:12:45 PM CDT,"Fs = 1024
sampling_rate = 100 #signal freq
N = int(Fs / sampling_rate) #number of samples
t_step = 1 / Fs
t = np.linspace(0, (N - 1) * t_step, N) #time interval
freq = Fs / N #freq step
f = np.linspace(0, (N - 1) * freq, N) # freq interval

data = np.sin(2 * np.pi * sampling_rate * t)
fureir = scipy.fft.fft(data)
fureier_abs = abs(fureir / N)
data_spec = f[0 : int(N / 2 + 1)]
furier_abs_plot = 2 * fureier_abs[0 : int(N / 2 + 1)]
fureier_abs[0] /= 2
fig, [ax1, ax2] = plt.subplots(nrows=2, ncols=1)
ax1.plot(t, data)
ax2.plot(data_spec, furier_abs_plot)
plt.show()"
TXFzHQW2,pluto bootstrap charmed-hpc,Kangarooo,Bash,Thursday 14th of December 2023 02:09:36 PM CDT,"pluto bootstrap charmed-hpc



Deploying cluster charmed-hpc. This will take several minutes...                
Deploying HPC services... \ (4.5s)                                              Traceback (most recent call last):
  File ""/snap/pluto/3/bin/pluto"", line 8, in <module>
    sys.exit(main())
  File ""/snap/pluto/3/lib/python3.10/site-packages/pluto/main.py"", line 49, in main
    exit_code = dispatcher.run()
  File ""/snap/pluto/3/lib/python3.10/site-packages/craft_cli/dispatcher.py"", line 448, in run
    return self._loaded_command.run(self._parsed_command_args)
  File ""/snap/pluto/3/lib/python3.10/site-packages/pluto/cmd/bootstrap.py"", line 328, in run
    loop.run_until_complete(
  File ""/usr/lib/python3.10/asyncio/base_events.py"", line 649, in run_until_complete
    return future.result()
  File ""/snap/pluto/3/lib/python3.10/site-packages/pluto/cmd/bootstrap.py"", line 117, in _bootstrap
    await asyncio.gather(
  File ""/snap/pluto/3/lib/python3.10/site-packages/juju/model.py"", line 1723, in deploy
    is_sub = await self.charmhub.is_subordinate(url.name)
  File ""/snap/pluto/3/lib/python3.10/site-packages/juju/charmhub.py"", line 35, in is_subordinate
    conn, headers, path_prefix = self.model.connection().https_connection()
  File ""/snap/pluto/3/lib/python3.10/site-packages/juju/client/connection.py"", line 699, in https_connection
    host, int(port),
ValueError: invalid literal for int() with base 10: 'a5aa:9178:cee6:216:3eff:fead:27d]:17070'



user@user-300E5EV-300E4EV-270E5EV-270E4EV:~$ pluto bootstrap -n 1 charmed-hpc
Usage: pluto [options] command [args]...
Try 'pluto bootstrap -h' for help.

Error: unrecognized arguments: -n charmed-hpc

"
RvRTKFhd,juju bootstrap localhost,Kangarooo,Bash,Thursday 14th of December 2023 02:01:26 PM CDT,"juju bootstrap localhost
Since Juju 3 is being run for the first time, it has downloaded the latest public cloud information.
Creating Juju controller ""localhost-localhost"" on localhost/localhost
Looking for packaged Juju agent version 3.1.6 for amd64
Located Juju agent version 3.1.6-ubuntu-amd64 at https://streams.canonical.com/juju/tools/agent/3.1.6/juju-3.1.6-linux-amd64.tgz
To configure your system to better support LXD containers, please see: https://documentation.ubuntu.com/lxd/en/latest/explanation/performance_tuning/
Launching controller instance(s) on localhost/localhost...
 - juju-848e49-0 (arch=amd64)                   
Installing Juju agent on bootstrap instance
Waiting for address
Attempting to connect to fd42:a5aa:9178:cee6:216:3eff:fead:27d:22
Attempting to connect to 10.22.28.134:22
Connected to fd42:a5aa:9178:cee6:216:3eff:fead:27d
Running machine configuration script...
Bootstrap agent now started
Contacting Juju controller at 10.22.28.134 to verify accessibility...

Bootstrap complete, controller ""localhost-localhost"" is now available
Controller machines are in the ""controller"" model

Now you can run
        juju add-model <model-name>
to create a new model to deploy workloads."
MsRnAMN2,Untitled,Maliuga,C++,Thursday 14th of December 2023 01:50:39 PM CDT,"std::vector<GatheringEvent> FindGatherEvents(const ItemGathererProvider& provider) {

    std::vector<GatheringEvent> detected_events;

    static auto eq_pt = [](geom::Point2D p1, geom::Point2D p2) {
        return p1.x == p2.x && p1.y == p2.y;
    };

    for (size_t g = 0; g < provider.GatherersCount(); ++g) {
        Gatherer gatherer = provider.GetGatherer(g);
        if (eq_pt(gatherer.start_pos, gatherer.end_pos)) {
            continue;
        }
        for (size_t i = 0; i < provider.ItemsCount(); ++i) {
            Item item = provider.GetItem(i);
            auto collect_result
                = TryCollectPoint(gatherer.start_pos, gatherer.end_pos, item.position);

            if (collect_result.IsCollected(gatherer.width + item.width)) {
                GatheringEvent evt{.item_id = i,
                                   .gatherer_id = g,
                                   .sq_distance = collect_result.sq_distance,
                                   .time = collect_result.proj_ratio};
                detected_events.push_back(evt);
            }
        }
    }

    std::sort(detected_events.begin(), detected_events.end(),
              [](const GatheringEvent& e_l, const GatheringEvent& e_r) {
                  return e_l.time < e_r.time;
              });

    return detected_events;
}"
8JkZuak8,Advent of code 2023 day 14 fast,hhoppe,Python,Thursday 14th of December 2023 01:06:42 PM CDT,"@numba.njit
def day14_slide_left(grid):
  for row in grid:
    open = 0
    for x, v in enumerate(row):
      if v == ord('.'):
        pass
      elif v == ord('O'):
        if open < x:
          row[open], row[x] = ord('O'), ord('.')
        open += 1
      else:
        open = x + 1


def day14(s, *, part2=False, num=1_000_000_000):
  grid = np.array([[ord(ch) for ch in line] for line in s.splitlines()], np.uint8)
  grid = np.rot90(grid)  # North is now left.
  grid = np.ascontiguousarray(grid)  # Layout in C-order, for tobytes().

  if not part2:
    day14_slide_left(grid)

  else:
    configs: dict[Any, int] = {}  # hashed_grid -> index.
    period = -1
    index = 0
    while True:
      if period < 0:
        if (prev_index := configs.setdefault(grid.tobytes(), index)) != index:
          period = index - prev_index
          print(f'At {index=}, found cycle with {period=}.')
          index = num - (num - index) % period
      if index == num:
        break
      for _ in range(4):
        day14_slide_left(grid)
        grid = np.rot90(grid, -1)
      index += 1

  return sum(len(grid[0]) - x for _, x in np.argwhere(grid == ord('O')))"
D2DDzvhK,Untitled,Josif_tepe,C++,Thursday 14th of December 2023 01:01:28 PM CDT,"#include <iostream>
#include <vector>
#include <string>
#include <map>
#include <set>
#include <queue>
#include <bits/stdc++.h>
using namespace std;

int main() {
    ios_base::sync_with_stdio(false);
    int n;
    cin >> n;
    string s;
    cin >> s;
    if(n > 30) {
        cout << ""GRESHKA"" << endl;
        return 0;
    }
    queue<string> q_s;
    queue<int> q;
    q_s.push(s);
    q.push(0);
    unordered_map<string, bool> visited;
    visited[s] = true;
    while(!q_s.empty()) {
        string t = q_s.front();
        q_s.pop();
        int cekor = q.front();
        q.pop();
        bool ok = true;
        int i = 0, j = n - 1;
        while(i < j) {
            if(t[i] != t[j]) {
                ok = false;
                break;
            }
            i++;
            j--;
        }
        if(ok) {
            cout << cekor << endl;
            return 0;
        }
        for(int i = 0; i + 1 < n; i++) {
            swap(t[i], t[i + 1]);
            if(!visited[t]) {
                visited[t] = true;
                q_s.push(t);
                q.push(cekor + 1);
            }
            swap(t[i], t[i + 1]);
            
        }
    }
    cout << ""GRESHKA"" << endl;
    return 0;
}
"
sdrnwy6W,Untitled,Hazkin,C#,Thursday 14th of December 2023 12:58:43 PM CDT,"public class Character
{
	public string Name { get; private set; }
	//some code to set new name
}

public interface IBackEndAPI
{
	UniTask<string> SetNameAsync(Character character, string newName);
}

public class RenameService : IBackEndAPI
{
	public async UniTask<string> SetNameAsync(Character character, string newName)
	{
		var tx = RenameHero(character, newName);
		await tx.Invoke();
		// get character Name here
		//[...]
		return characterName;
	}
}

public class Mediator
{
	private Character _character;
	private IBackEndAPI _api;

	public Mediator(Character character, IBackEndAPI api)
	{
		_api = api;
		_character = character;
	}

	public async UniTask<string> SetName(string newName)
	{
		var result = await _api.SetNameAsync(_character, newName);
		return result;
	}
}

public class CharacterNameView : MonoBehaviour
{
	[SerializeField] private TMP_Text characterName;
	[SerializeField] private Button setNewName;
	[SerializeField] private TMP_InputField input;
	[SerializeField] private GameObject dimmer;
	
	private Mediator _mediator;

	private void Awake()
	{
		setNewName.onClick.AddListener(OnSetNewName);
	}
	
	public void SetupChangeNameMediator(Mediator mediator)
	{
		_mediator = mediator;
	}

	private async void OnSetNewName()
	{
		if (_mediator == null) 
			return;
		dimmer.SetActive(true);
		var result = await _mediator.SetName(input.text);
		characterName.text = result;
		dimmer.SetActive(false);
	}
}"
i4tGQ2Fs,Untitled,makinotori14,C++,Thursday 14th of December 2023 12:54:03 PM CDT,"#include <bits/stdc++.h>

using namespace std;

using ll = long long;
using ld = long double;
using ull = unsigned long long;
using pii = pair<int, int>;

mt19937 rnd(chrono::high_resolution_clock::now().time_since_epoch().count());

template <typename T1, typename T2>
ostream& operator <<(ostream& out, pair<T1, T2> &p) {
    out << '{' << p.first << "", "" << p.second << '}';
    return out;
}

template <typename T>
ostream& operator <<(ostream& out, set<T> &s) {
    for (auto &x : s)
        out << x << ' ';
    return out;
}

template <typename T>
ostream& operator <<(ostream &out, multiset<T> &s) {
    for (auto &x : s)
        out << x << ' ';
    return out;
}

template <typename T>
bool ckmin(T &a, T b) {
    return (a > b ? a = b, true : false);
}

template <typename T>
bool ckmax(T &a, T b) {
    return (a < b ? a = b, true : false);
}

template <typename T>
ostream& operator <<(ostream& out, vector<T> &v) {
    for (auto &x : v)
        cout << x << ' ';
    return out;
}

void visit(vector<vector<int>> &g, vector<char> &vis, int v) {
    vis[v] = 1;
    for (auto &u : g[v]) {
        if (!vis[u])
            visit(g, vis, u);
    }
}

bool check_comp(vector<vector<int>> &g) {
    vector<vector<int>> g_unor((int)g.size());
    for (int v = 0; v < (int)g.size(); ++v) {
        for (auto &u : g[v]) {
            g_unor[v].push_back(u);
            g_unor[u].push_back(v);
        }
    }

    vector<char> vis((int)g.size());
    visit(g_unor, vis, 0);

    return count(vis.begin(), vis.end(), 1) == (int)g.size();
}

bool ts_dfs(vector<vector<int>> &g, vector<char> &vis, int v, vector<int> &ts) {
    vis[v] = 1;
    for (auto &u : g[v]) {
        if (vis[u] == 1) {
            return false;
        }
        if (!vis[u]) {
            if (!ts_dfs(g, vis, u, ts))
                return false;
        }
    }
    vis[v] = 2;
    ts.push_back(v);
    return true;
}

vector<int> topsort(vector<vector<int>> &g) {
    int n = (int)g.size();
    vector<char> vis(n);
    vector<int> ts;
    for (int i = 0; i < n; ++i) {
        if (!vis[i]) {
            if (!ts_dfs(g, vis, i, ts)) {
                return {};
            }
        }
    }
    reverse(ts.begin(), ts.end());
    return ts;
}

vector<int> clear_edges(vector<int> &ts, vector<vector<int>> &g, vector<int> &tin, vector<int> &tout) {
    int n = (int)g.size();
    vector<vector<int>> ng(n);
    vector<int> last(n, -1);
    for (auto &v : ts) {
        for (auto &u : g[v]) {
            if (last[u] != -1) {
                if (!(tin[last[u]] < tin[v] && tout[last[u]] > tout[v])) {
                    cout << ""No\n"";
                    exit(0);
                }
            }
            last[u] = v;
        }
    }
    for (int v = 0; v < n; ++v) {
        if (last[v] == -1) continue;
        ng[last[v]].push_back(v);
    }
    g = ng;
    return last;
}

void time_dfs(vector<vector<int>> &g, vector<char> &vis, int v, vector<int> &tin, vector<int> &tout, int &cur) {
    vis[v] = 1;
    tin[v] = cur++;

    for (auto &u : g[v]) {
        if (!vis[u])
            time_dfs(g, vis, u, tin, tout, cur);
    }

    tout[v] = cur++;
}

bool check_time(vector<vector<int>> &g, vector<char> &vis, int v, vector<int> &tin, vector<int> &tout) {
    vis[v] = 1;
    for (auto &u : g[v]) {
        if (!(tin[v] < tin[u] && tout[v] > tout[u]))
            return false;
        if (!vis[u]) {
            if (!check_time(g, vis, u, tin, tout))
                return false;
        }
    }
    return true;
}

void solve() {
    int n, m;
    cin >> n >> m;

    map<pii, char> used;

    vector<vector<int>> g(n);
    for (int i = 0; i < m; ++i) {
        int v, u;
        cin >> v >> u, --v, --u;

        if (!used[{v, u}]) {
            g[v].push_back(u);
            used[{v, u}] = 1;
        }
    }

    if (!check_comp(g)) {
        cout << ""No\n"";
        return;
    }

    vector<int> ts = topsort(g);

    if (ts.empty()) {
        cout << ""No\n"";
        return;
    }

    vector<char> vis(n);
    vector<int> tin(n), tout(n);
    int cur = 0;
    time_dfs(g, vis, ts[0], tin, tout, cur);

    vector<int> ans = clear_edges(ts, g, tin, tout);

    fill(vis.begin(), vis.end(), 0);
    visit(g, vis, ts[0]);
    if ((int)count(vis.begin(), vis.end(), 1) != n) {
        cout << ""No\n"";
        return;
    }

    cout << ""Yes\n"";
    for (auto &x : ans) {
        if (x == -1)
            cout << -1 << ' ';
        else
            cout << x + 1 << ' ';
    }
    cout << '\n';
}

signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout << fixed << setprecision(9);
    int t = 1;
    //cin >> t;
    while (t--) {
        solve();
    }
}
"
jnh4YMkX,Untitled,Josif_tepe,C++,Thursday 14th of December 2023 12:45:42 PM CDT,"#include <iostream>
#include <vector>
#include <string>
#include <map>
#include <set>
#include <algorithm>
using namespace std;

int main() {
    ios_base::sync_with_stdio(false);
    string s;
    cin >> s;
    int res =0 ;
    int n = (int) s.size();
    vector<int> v[26];
    
    for(int i = 0; i < n; i++) {
        v[s[i] - 'A'].push_back(i);
    }
    
    for(int i = 0; i < n; i++) {
        int c = s[i] - 'A';
       
        for(int k = (int) v[c].size() - 1; k >= 0; k--) {
            int p = v[c][k];
            if(p <= i) break;
            int sz = p - i + 1;
                if(sz % 4 == 0) {
                    sz /= 4;
                    int cnt = 1;
                    bool ok = true;
                    for(int j = i; j < i + sz; j++) {
                        if(s[j] == s[i + 2 * sz - cnt] and s[j] == s[j + 2 * sz] and s[j] == s[i + 4 * sz - cnt]) {
                            
                        }
                        else {
                            ok = false;
                            break;
                        }
                        cnt++;
                    }
                    if(ok) {
                        res = max(res, 4 * sz);
                        i = p;
                        break;
                    }
                }
            }
        
    }
    cout << res << endl;
    return 0;
}
"
ET3j5XBx,Untitled,Josif_tepe,C++,Thursday 14th of December 2023 12:19:20 PM CDT,"#include <iostream>
#include <vector>
#include <string>
#include <map>
#include <set>
#include <algorithm>
using namespace std;

int main() {
    ios_base::sync_with_stdio(false);
    string s;
    cin >> s;
    int res =0 ;
    int n = (int) s.size();
    for(int sz = n / 4; sz >= 0; sz--) {
        for(int i = 0; i < n; i++) {
            if(i + 4 * sz - 1 < n) {
                
                if(s[i] == s[i + 2 * sz - 1] and s[i] == s[i + 2 * sz] and s[i] == s[i + 4 * sz - 1]) {
                    bool ok = true;
                    int cnt = 1;
                    for(int j = i + 1; j < i + sz; j++) {
                        
                        if(s[j] != s[i + 2 * sz - 1 - cnt] or s[j] != s[j + 2 * sz] or s[j] != s[i + 4 * sz - 1 - cnt]) {
                            ok = false;
                            break;
                        }
                        cnt++;
                    }
                    if(ok) {
                        cout << sz * 4 << endl;
                        return 0;
                    }
                }
            }
        }
    }
    cout << res * 4 << endl;
    return 0;
}
"
T0hfQbbD,mat,Dmaxiya,Java,Thursday 14th of December 2023 12:09:01 PM CDT,"import java.util.Scanner;

public class Main {
    public static int t(int n, int m) {
        if (m == 1) {
            return 1;
        } else if (m == 2) {
            return n + 1;
        } else if (n == 2) {
            int fz = 0;
            for (int i = 1; i <= m; i++) {
                for (int j = 1; j <= m; j++) {
                    if (gcd(i, j) == 1) {
                        fz++;
                    }
                }
            }
            return fz;
        } else {
            return 0;
        }
    }

    // 返回最大公约数
    private static int gcd(int a, int b) {
        while(true) {
            int t = a % b;
            if (t == 0) {
                break;
            } else {
                a = b;
                b = t;
            }
        }
        return b;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        System.out.println(t(n, m));
    }
}
"
i9nTy5j4,Untitled,Josif_tepe,C++,Thursday 14th of December 2023 11:54:06 AM CDT,"#include <iostream>
#include <vector>
#include <string>
#include <map>
#include <set>
#include <algorithm>
using namespace std;

int main() {
    ios_base::sync_with_stdio(false);
    string s;
    cin >> s;
    int n = (int) s.size();
    if(n <= 1000) {
        int res = 0;
        for(int i = 0; i < n; i++) {
            string tmp = """";
            for(int j = i; j < n; j++) {
                tmp += s[j];
                string rev_tmp = tmp;
                reverse(rev_tmp.begin(), rev_tmp.end());
                string x = tmp + rev_tmp + tmp + rev_tmp;
                if(s.find(x) != string::npos) {
                    res = max(res, (int) x.size());
                }
            }
        }
        cout << res << endl;
    }
    
    return 0;
}
"
VkNa2eQE,Untitled,Nikaas,C#,Thursday 14th of December 2023 11:37:36 AM CDT,"        public override void SetItem<T>(string name, T value)
        {
            string playerPrefsKey = GetPlayerPrefsKey(name);
            switch (value)
            {
                case int:
                case Enum:
                    PlayerPrefs.SetInt(playerPrefsKey, (int)(object)value);
                    break;
                case float:
                    PlayerPrefs.SetFloat(playerPrefsKey, (float)(object)value);
                    break;
                case string:
                    PlayerPrefs.SetString(playerPrefsKey, (string)(object)value);
                    break;
                case not int and not Enum and not float and not string:
                    throw new Exception($""Can not set data item named {name} of type {typeof(T)}. "" +
                        $""{nameof(PlayerPrefs)} stores only {nameof(Int32)}, {nameof(Single)} or {nameof(String)}."");
            }
        }"
HNHSYknF,Untitled,Josif_tepe,C++,Thursday 14th of December 2023 11:36:31 AM CDT,"class Solution {
public:
    int repeatedStringMatch(string a, string b) {
        int n = a.size(), m = b.size();
        int rep = m / n;
        string s = """";
        for(int i = 0; i < rep; i++) {
            s += a;
        }
        for(int i = 0; i < 5; i++)  {
            if(s.find(b) != string::npos) {
                return rep + i;
            }
            s += a;
            
        }
        return -1;
    }
};"
urE08mkP,Untitled,Josif_tepe,C++,Thursday 14th of December 2023 11:27:37 AM CDT,"class Solution {
public:
    vector<string> findRepeatedDnaSequences(string s) {
        vector<string> res;
        unordered_map<string, int> m;
        int n = s.size();
        for(int i = 0; i < n; i++) {
            string tmp = """";
            for(int j = i; j < min(i + 10, n); j++) {
                tmp += s[j];
            }
            if(tmp.size() == 10) {
                m[tmp]++;
            }
        }
        for(unordered_map<string, int>::iterator it = m.begin(); it != m.end(); it++) {
            if(it->second > 1) {
                res.push_back(it->first);
            }
        }
        return res;
    }
};"
EBS7NNmY,Script para sincronizar el AppScript de Google Sheet con Divi,oscarviedma,HTML,Thursday 14th of December 2023 11:21:07 AM CDT,"<section id=""ov-listado-menu"">
<!-- Aquí es donde se cargará el contenido dinámico -->
</section>

<script>
// Hacer una solicitud GET a la URL de la aplicación web de Google Apps Script
fetch('https://script.google.com/macros/s/AKfycbzeXVrsOq7dvgbnQQn-0Mektvb6P9wLe_BRKoZsq6CqlMh6w-XGUWleBDaYX7f6u9Qr/exec')
	.then(response => response.json())
  .then(data => {
  // Procesar los datos y construir el HTML
    var html = '';
    for (var section in data) {
    	html += '<h2 class=""titulo-seccion"">' + section + '</h2>\n';
    		for (var i = 0; i < data[section].length; i++) {
      		var dish = data[section][i];
          html += '<div class=""card-menu"">\n';
          html += '<div class=""img-cover"">\n';
          html += '<img src=""' + dish.image + '"" alt=""' + dish.name + '"">\n';
          html += '</div>\n';
          html += '<div class=""info-menu"">\n';
          html += '<h3 class=""titulo"">' + dish.name + '</h3>\n';
          html += '<p class=""descripcion"">' + dish.description + '</p>\n';
          html += '<div class=""precio"">' + dish.price + '</div>\n';
          html += '</div>\n';
          html += '</div>\n';
        }
      }
    // Insertar el contenido dinámico en el contenedor
      document.getElementById('ov-listado-menu').innerHTML = html;
    })
    .catch(error => console.error('Error al obtener el contenido:', error));
</script>"
gJy0eapT,filecheck,iconoclasthero,Bash,Thursday 14th of December 2023 11:19:30 AM CDT,"filecheck() {
if [[ ""$1"" != *\ --\ Audiobook.m4b ]] && printf 'The file specified: %s\nis not in the correct format of\n* -- Audiobook.m4b, checking directory for an m4b file...""
elif [[ ""$1"" == *\ --\ Audiobook.m4b ]] && [[ -f ""$1"" ]]  #suggested this is poor design to ignore the input if it is not in the correct format.
 then
   m4bin=""$1""
   echo ""$m4bin""
else
#   for i in *m4b
#    do
      files=(*m4b)
      elif [[ -f ""$files"" ]] && [[ ""${#files[@]}"" == 1 ]]
       then
         if [[ ""$files"" == *\ --\ Audiobook.m4b ]]
          then
            m4bin=""$files""
         elif [[ ""$files"" == *m4b ]]
          then
            m4bin=""${files/.m4b/ -- Audiobook.m4b}""
            mv ""$files"" ""$m4bin""
         fi
      else
        echo ""No single & appropriate input file found or specified, please check and retry...""
        ls
        exit 1
      fi
fi
}

"
aXC0YVbj,Untitled,Josif_tepe,C++,Thursday 14th of December 2023 11:15:14 AM CDT,"#include <iostream>
#include <vector>
#include <string>
#include <map>
#include <set>
using namespace std;
typedef long long ll;
const int maxn = 205;
int n, o;
const int alphabet_size = 26;
int trie[maxn][alphabet_size];
ll dp[alphabet_size][1 << 9][maxn];
map<int, int> at_trie_end_of_word;
ll rek(int at, int visited, int at_trie) {
    if(at == o and __builtin_popcount(visited) == n) {
        return 1;
    }
    if(at >= o) {
        return 0;
    }
    if(dp[at][visited][at_trie] != -1) {
        return dp[at][visited][at_trie];
    }
    ll res = 0;
    for(int i = 0; i < 26; i++) {
        int c = trie[at_trie][i];
        res += rek(at + 1, visited | at_trie_end_of_word[c], c);
    }
    return dp[at][visited][at_trie] = res;
}
set<string> words;
void gen_strings(int at, int visited, int at_trie, string s) {
    if(at == o and __builtin_popcount(visited) == n) {
        words.insert(s);
        return;
    }
    if(at >= o) {
        return;
    }
    for(int i = 0; i < 26; i++) {
        int c = trie[at_trie][i];
        if(rek(at + 1, visited | at_trie_end_of_word[c], c) > 0) {
            gen_strings(at + 1, visited | at_trie_end_of_word[c], c, s + (char) (i + 'a'));
        }
    }
}
int main() {
    ios_base::sync_with_stdio(false);
    memset(dp, -1, sizeof dp);
    cin >> o >> n;
    vector<string> v(n);
    
    for(int i = 0; i < n; i++) {
        cin >> v[i];
    }
    map<string, int> m1;
    map<int, string> m2;
    int cnt = 1;
    for(int i = 0; i < n; i++) {
        string tmp = """";
        for(int j = 0; j < (int) v[i].size(); j++) {
            tmp += v[i][j];
            m1[tmp] = cnt;
            m2[cnt] = tmp;
            cnt++;
        }
    }
    m1[""""] = 0;
    m2[0] = """";
    for(int i = 0; i <= 100; i++) {
        if(m2.find(i) != m2.end()) {
            for(int j = 0; j < n; j++) {
                if((int) m2[i].size() >= (int) v[j].size() and m2[i].find(v[j]) != string::npos) {
                    at_trie_end_of_word[i] |= (1 << j);
                }
            }
        }
        string tmp = """";
        for(int j = 0; j < 26; j++) {
            tmp = m2[i] + (char) (j + 'a');
            while(m1.find(tmp) == m1.end()) {
                tmp.erase(tmp.begin());
            }
            trie[i][j] = m1[tmp];
        }
        
    }
    ll res = rek(0, 0, 0);
    if(res <= 30) {
        cout << res << endl;
        gen_strings(0, 0, 0, """");
        for(string s : words) {
            cout << s << ""\n"";
        }
    }
    else {
        cout << res << endl;
    }
    return 0;
}
"
JKb1RH4n,Node-RED power monitor,zhexo,JSON,Thursday 14th of December 2023 11:00:38 AM CDT,"[
    {
        ""id"": ""f5feb4f34a9d21a0"",
        ""type"": ""tab"",
        ""label"": ""Flow 1"",
        ""disabled"": false,
        ""info"": """",
        ""env"": []
    },
    {
        ""id"": ""5d3fa99708536e48"",
        ""type"": ""random"",
        ""z"": ""f5feb4f34a9d21a0"",
        ""name"": ""Machine 1"",
        ""low"": 1,
        ""high"": 10,
        ""inte"": ""true"",
        ""property"": ""payload"",
        ""x"": 310,
        ""y"": 140,
        ""wires"": [
            [
                ""969ec03067c25088"",
                ""65184d8e8df51bdf"",
                ""2f37d955cb717f01""
            ]
        ]
    },
    {
        ""id"": ""7a1e5699db5ba318"",
        ""type"": ""random"",
        ""z"": ""f5feb4f34a9d21a0"",
        ""name"": ""Machine 2"",
        ""low"": 1,
        ""high"": 10,
        ""inte"": ""true"",
        ""property"": ""payload"",
        ""x"": 310,
        ""y"": 220,
        ""wires"": [
            [
                ""32b45174fabda3b9"",
                ""22506ffce87ae681"",
                ""c2707c23f7108db9""
            ]
        ]
    },
    {
        ""id"": ""35b5761543c7e83c"",
        ""type"": ""random"",
        ""z"": ""f5feb4f34a9d21a0"",
        ""name"": ""Machine 3"",
        ""low"": 1,
        ""high"": 10,
        ""inte"": ""true"",
        ""property"": ""payload"",
        ""x"": 310,
        ""y"": 300,
        ""wires"": [
            [
                ""7037845f1b6fbb05"",
                ""841a73baf48df2bf"",
                ""93caf6d52b988881""
            ]
        ]
    },
    {
        ""id"": ""783c99fc6f875824"",
        ""type"": ""random"",
        ""z"": ""f5feb4f34a9d21a0"",
        ""name"": ""Machine 4"",
        ""low"": 1,
        ""high"": 10,
        ""inte"": ""true"",
        ""property"": ""payload"",
        ""x"": 310,
        ""y"": 380,
        ""wires"": [
            [
                ""0a9ffe41295556a0"",
                ""1068a2c6147fb98d"",
                ""afcefcb4f443dcc9""
            ]
        ]
    },
    {
        ""id"": ""261121d35b08329e"",
        ""type"": ""random"",
        ""z"": ""f5feb4f34a9d21a0"",
        ""name"": ""Machine 5"",
        ""low"": 1,
        ""high"": 10,
        ""inte"": ""true"",
        ""property"": ""payload"",
        ""x"": 310,
        ""y"": 460,
        ""wires"": [
            [
                ""6477b1fe5bcfaa33"",
                ""79595d42f1ee1f80"",
                ""6bd80e52fc22117d""
            ]
        ]
    },
    {
        ""id"": ""e9f7cad779d3aaee"",
        ""type"": ""inject"",
        ""z"": ""f5feb4f34a9d21a0"",
        ""name"": ""5 sec"",
        ""props"": [
            {
                ""p"": ""payload""
            },
            {
                ""p"": ""topic"",
                ""vt"": ""str""
            }
        ],
        ""repeat"": ""1"",
        ""crontab"": """",
        ""once"": true,
        ""onceDelay"": 0.1,
        ""topic"": """",
        ""payload"": """",
        ""payloadType"": ""date"",
        ""x"": 110,
        ""y"": 260,
        ""wires"": [
            [
                ""5d3fa99708536e48"",
                ""7a1e5699db5ba318"",
                ""35b5761543c7e83c"",
                ""783c99fc6f875824"",
                ""261121d35b08329e""
            ]
        ]
    },
    {
        ""id"": ""969ec03067c25088"",
        ""type"": ""ui_gauge"",
        ""z"": ""f5feb4f34a9d21a0"",
        ""name"": """",
        ""group"": ""0be107e5ba0dc7e2"",
        ""order"": 1,
        ""width"": 3,
        ""height"": 3,
        ""gtype"": ""gage"",
        ""title"": ""Power output 1"",
        ""label"": ""W"",
        ""format"": ""{{value}}"",
        ""min"": 0,
        ""max"": 10,
        ""colors"": [
            ""#00b500"",
            ""#e6e600"",
            ""#ca3838""
        ],
        ""seg1"": """",
        ""seg2"": """",
        ""diff"": false,
        ""className"": """",
        ""x"": 500,
        ""y"": 80,
        ""wires"": []
    },
    {
        ""id"": ""32b45174fabda3b9"",
        ""type"": ""ui_gauge"",
        ""z"": ""f5feb4f34a9d21a0"",
        ""name"": """",
        ""group"": ""73ef8a147b2fd5f3"",
        ""order"": 1,
        ""width"": 3,
        ""height"": 3,
        ""gtype"": ""gage"",
        ""title"": ""Power output 2"",
        ""label"": ""W"",
        ""format"": ""{{value}}"",
        ""min"": 0,
        ""max"": 10,
        ""colors"": [
            ""#00b500"",
            ""#e6e600"",
            ""#ca3838""
        ],
        ""seg1"": """",
        ""seg2"": """",
        ""diff"": false,
        ""className"": """",
        ""x"": 500,
        ""y"": 160,
        ""wires"": []
    },
    {
        ""id"": ""2f37d955cb717f01"",
        ""type"": ""ui_chart"",
        ""z"": ""f5feb4f34a9d21a0"",
        ""name"": """",
        ""group"": ""0be107e5ba0dc7e2"",
        ""order"": 4,
        ""width"": ""5"",
        ""height"": ""5"",
        ""label"": ""Graph1"",
        ""chartType"": ""line"",
        ""legend"": ""false"",
        ""xformat"": ""HH:mm:ss"",
        ""interpolate"": ""linear"",
        ""nodata"": """",
        ""dot"": false,
        ""ymin"": ""1"",
        ""ymax"": ""10"",
        ""removeOlder"": 1,
        ""removeOlderPoints"": """",
        ""removeOlderUnit"": ""60"",
        ""cutout"": 0,
        ""useOneColor"": false,
        ""useUTC"": false,
        ""colors"": [
            ""#1e78b8"",
            ""#aec7e8"",
            ""#ff7f0e"",
            ""#2ca02c"",
            ""#98df8a"",
            ""#d62728"",
            ""#ff9896"",
            ""#9467bd"",
            ""#c5b0d5""
        ],
        ""outputs"": 1,
        ""useDifferentColor"": false,
        ""className"": """",
        ""x"": 800,
        ""y"": 120,
        ""wires"": [
            []
        ]
    },
    {
        ""id"": ""c2707c23f7108db9"",
        ""type"": ""ui_chart"",
        ""z"": ""f5feb4f34a9d21a0"",
        ""name"": """",
        ""group"": ""73ef8a147b2fd5f3"",
        ""order"": 4,
        ""width"": ""5"",
        ""height"": ""5"",
        ""label"": ""Graph 2"",
        ""chartType"": ""line"",
        ""legend"": ""false"",
        ""xformat"": ""HH:mm:ss"",
        ""interpolate"": ""linear"",
        ""nodata"": """",
        ""dot"": false,
        ""ymin"": ""1"",
        ""ymax"": ""10"",
        ""removeOlder"": 1,
        ""removeOlderPoints"": """",
        ""removeOlderUnit"": ""60"",
        ""cutout"": 0,
        ""useOneColor"": false,
        ""useUTC"": false,
        ""colors"": [
            ""#1f77b4"",
            ""#aec7e8"",
            ""#ff7f0e"",
            ""#2ca02c"",
            ""#98df8a"",
            ""#d62728"",
            ""#ff9896"",
            ""#9467bd"",
            ""#c5b0d5""
        ],
        ""outputs"": 1,
        ""useDifferentColor"": false,
        ""className"": """",
        ""x"": 800,
        ""y"": 200,
        ""wires"": [
            []
        ]
    },
    {
        ""id"": ""841a73baf48df2bf"",
        ""type"": ""ui_chart"",
        ""z"": ""f5feb4f34a9d21a0"",
        ""name"": """",
        ""group"": ""f8b87db8db4def0a"",
        ""order"": 4,
        ""width"": ""5"",
        ""height"": ""5"",
        ""label"": ""Graph 3"",
        ""chartType"": ""line"",
        ""legend"": ""false"",
        ""xformat"": ""HH:mm:ss"",
        ""interpolate"": ""linear"",
        ""nodata"": """",
        ""dot"": false,
        ""ymin"": ""1"",
        ""ymax"": ""10"",
        ""removeOlder"": 1,
        ""removeOlderPoints"": """",
        ""removeOlderUnit"": ""60"",
        ""cutout"": 0,
        ""useOneColor"": false,
        ""useUTC"": false,
        ""colors"": [
            ""#1f77b4"",
            ""#aec7e8"",
            ""#ff7f0e"",
            ""#2ca02c"",
            ""#98df8a"",
            ""#d62728"",
            ""#ff9896"",
            ""#9467bd"",
            ""#c5b0d5""
        ],
        ""outputs"": 1,
        ""useDifferentColor"": false,
        ""className"": """",
        ""x"": 800,
        ""y"": 280,
        ""wires"": [
            []
        ]
    },
    {
        ""id"": ""afcefcb4f443dcc9"",
        ""type"": ""ui_chart"",
        ""z"": ""f5feb4f34a9d21a0"",
        ""name"": """",
        ""group"": ""09eee1ee8667a9f4"",
        ""order"": 4,
        ""width"": ""5"",
        ""height"": ""5"",
        ""label"": ""Graph 4"",
        ""chartType"": ""line"",
        ""legend"": ""false"",
        ""xformat"": ""HH:mm:ss"",
        ""interpolate"": ""linear"",
        ""nodata"": """",
        ""dot"": false,
        ""ymin"": ""1"",
        ""ymax"": ""10"",
        ""removeOlder"": 1,
        ""removeOlderPoints"": """",
        ""removeOlderUnit"": ""60"",
        ""cutout"": 0,
        ""useOneColor"": false,
        ""useUTC"": false,
        ""colors"": [
            ""#1f77b4"",
            ""#aec7e8"",
            ""#ff7f0e"",
            ""#2ca02c"",
            ""#98df8a"",
            ""#d62728"",
            ""#ff9896"",
            ""#9467bd"",
            ""#c5b0d5""
        ],
        ""outputs"": 1,
        ""useDifferentColor"": false,
        ""className"": """",
        ""x"": 800,
        ""y"": 360,
        ""wires"": [
            []
        ]
    },
    {
        ""id"": ""6bd80e52fc22117d"",
        ""type"": ""ui_chart"",
        ""z"": ""f5feb4f34a9d21a0"",
        ""name"": """",
        ""group"": ""d00a672806fb8dd6"",
        ""order"": 4,
        ""width"": ""5"",
        ""height"": ""5"",
        ""label"": ""Graph 5"",
        ""chartType"": ""line"",
        ""legend"": ""false"",
        ""xformat"": ""HH:mm:ss"",
        ""interpolate"": ""linear"",
        ""nodata"": """",
        ""dot"": false,
        ""ymin"": ""1"",
        ""ymax"": ""10"",
        ""removeOlder"": 1,
        ""removeOlderPoints"": """",
        ""removeOlderUnit"": ""60"",
        ""cutout"": 0,
        ""useOneColor"": false,
        ""useUTC"": false,
        ""colors"": [
            ""#1f77b4"",
            ""#aec7e8"",
            ""#ff7f0e"",
            ""#2ca02c"",
            ""#98df8a"",
            ""#d62728"",
            ""#ff9896"",
            ""#9467bd"",
            ""#c5b0d5""
        ],
        ""outputs"": 1,
        ""useDifferentColor"": false,
        ""className"": """",
        ""x"": 800,
        ""y"": 440,
        ""wires"": [
            []
        ]
    },
    {
        ""id"": ""65184d8e8df51bdf"",
        ""type"": ""ui_text"",
        ""z"": ""f5feb4f34a9d21a0"",
        ""group"": ""0be107e5ba0dc7e2"",
        ""order"": 2,
        ""width"": 2,
        ""height"": 2,
        ""name"": ""Value 1"",
        ""label"": """",
        ""format"": ""{{msg.payload}} W"",
        ""layout"": ""col-center"",
        ""className"": """",
        ""style"": false,
        ""font"": """",
        ""fontSize"": """",
        ""color"": ""#000000"",
        ""x"": 660,
        ""y"": 100,
        ""wires"": []
    },
    {
        ""id"": ""22506ffce87ae681"",
        ""type"": ""ui_text"",
        ""z"": ""f5feb4f34a9d21a0"",
        ""group"": ""73ef8a147b2fd5f3"",
        ""order"": 2,
        ""width"": 2,
        ""height"": 2,
        ""name"": ""Value 2"",
        ""label"": """",
        ""format"": ""{{msg.payload}} W"",
        ""layout"": ""row-left"",
        ""className"": """",
        ""style"": false,
        ""font"": """",
        ""fontSize"": """",
        ""color"": ""#000000"",
        ""x"": 660,
        ""y"": 180,
        ""wires"": []
    },
    {
        ""id"": ""7037845f1b6fbb05"",
        ""type"": ""ui_text"",
        ""z"": ""f5feb4f34a9d21a0"",
        ""group"": ""f8b87db8db4def0a"",
        ""order"": 2,
        ""width"": 2,
        ""height"": 2,
        ""name"": ""Value 3"",
        ""label"": """",
        ""format"": ""{{msg.payload}} W"",
        ""layout"": ""row-left"",
        ""className"": """",
        ""style"": false,
        ""font"": """",
        ""fontSize"": """",
        ""color"": ""#000000"",
        ""x"": 660,
        ""y"": 260,
        ""wires"": []
    },
    {
        ""id"": ""93caf6d52b988881"",
        ""type"": ""ui_gauge"",
        ""z"": ""f5feb4f34a9d21a0"",
        ""name"": """",
        ""group"": ""f8b87db8db4def0a"",
        ""order"": 1,
        ""width"": 3,
        ""height"": 3,
        ""gtype"": ""gage"",
        ""title"": ""Power output 3"",
        ""label"": ""W"",
        ""format"": ""{{value}}"",
        ""min"": ""1"",
        ""max"": 10,
        ""colors"": [
            ""#00b500"",
            ""#e6e600"",
            ""#ca3838""
        ],
        ""seg1"": """",
        ""seg2"": """",
        ""diff"": false,
        ""className"": """",
        ""x"": 500,
        ""y"": 240,
        ""wires"": []
    },
    {
        ""id"": ""0a9ffe41295556a0"",
        ""type"": ""ui_gauge"",
        ""z"": ""f5feb4f34a9d21a0"",
        ""name"": """",
        ""group"": ""09eee1ee8667a9f4"",
        ""order"": 1,
        ""width"": 3,
        ""height"": 3,
        ""gtype"": ""gage"",
        ""title"": ""Power output 4"",
        ""label"": ""W"",
        ""format"": ""{{value}}"",
        ""min"": ""1"",
        ""max"": 10,
        ""colors"": [
            ""#00b500"",
            ""#e6e600"",
            ""#ca3838""
        ],
        ""seg1"": """",
        ""seg2"": """",
        ""diff"": false,
        ""className"": """",
        ""x"": 500,
        ""y"": 320,
        ""wires"": []
    },
    {
        ""id"": ""1068a2c6147fb98d"",
        ""type"": ""ui_text"",
        ""z"": ""f5feb4f34a9d21a0"",
        ""group"": ""09eee1ee8667a9f4"",
        ""order"": 2,
        ""width"": 2,
        ""height"": 2,
        ""name"": ""Value 4"",
        ""label"": """",
        ""format"": ""{{msg.payload}} W"",
        ""layout"": ""row-left"",
        ""className"": """",
        ""style"": false,
        ""font"": """",
        ""fontSize"": """",
        ""color"": ""#000000"",
        ""x"": 660,
        ""y"": 340,
        ""wires"": []
    },
    {
        ""id"": ""6477b1fe5bcfaa33"",
        ""type"": ""ui_gauge"",
        ""z"": ""f5feb4f34a9d21a0"",
        ""name"": """",
        ""group"": ""d00a672806fb8dd6"",
        ""order"": 1,
        ""width"": 3,
        ""height"": 3,
        ""gtype"": ""gage"",
        ""title"": ""Power output 5"",
        ""label"": ""W"",
        ""format"": ""{{value}}"",
        ""min"": ""1"",
        ""max"": 10,
        ""colors"": [
            ""#00b500"",
            ""#e6e600"",
            ""#ca3838""
        ],
        ""seg1"": """",
        ""seg2"": """",
        ""diff"": false,
        ""className"": """",
        ""x"": 500,
        ""y"": 400,
        ""wires"": []
    },
    {
        ""id"": ""79595d42f1ee1f80"",
        ""type"": ""ui_text"",
        ""z"": ""f5feb4f34a9d21a0"",
        ""group"": ""d00a672806fb8dd6"",
        ""order"": 2,
        ""width"": 2,
        ""height"": 2,
        ""name"": ""Value 5"",
        ""label"": """",
        ""format"": ""{{msg.payload}} W"",
        ""layout"": ""row-left"",
        ""className"": """",
        ""style"": false,
        ""font"": """",
        ""fontSize"": """",
        ""color"": ""#000000"",
        ""x"": 660,
        ""y"": 420,
        ""wires"": []
    },
    {
        ""id"": ""d8fe5265aaf01a57"",
        ""type"": ""ui_spacer"",
        ""z"": ""f5feb4f34a9d21a0"",
        ""name"": ""spacer"",
        ""group"": ""0be107e5ba0dc7e2"",
        ""order"": 3,
        ""width"": 2,
        ""height"": 1
    },
    {
        ""id"": ""1f4894a315b3ca54"",
        ""type"": ""ui_spacer"",
        ""z"": ""f5feb4f34a9d21a0"",
        ""name"": ""spacer"",
        ""group"": ""73ef8a147b2fd5f3"",
        ""order"": 3,
        ""width"": 2,
        ""height"": 1
    },
    {
        ""id"": ""8f44c9d861787e5e"",
        ""type"": ""ui_spacer"",
        ""z"": ""f5feb4f34a9d21a0"",
        ""name"": ""spacer"",
        ""group"": ""f8b87db8db4def0a"",
        ""order"": 3,
        ""width"": 2,
        ""height"": 1
    },
    {
        ""id"": ""01390f1bc578e7f8"",
        ""type"": ""ui_spacer"",
        ""z"": ""f5feb4f34a9d21a0"",
        ""name"": ""spacer"",
        ""group"": ""09eee1ee8667a9f4"",
        ""order"": 3,
        ""width"": 2,
        ""height"": 1
    },
    {
        ""id"": ""6d5519680587d5c0"",
        ""type"": ""ui_spacer"",
        ""z"": ""f5feb4f34a9d21a0"",
        ""name"": ""spacer"",
        ""group"": ""d00a672806fb8dd6"",
        ""order"": 3,
        ""width"": 2,
        ""height"": 1
    },
    {
        ""id"": ""0be107e5ba0dc7e2"",
        ""type"": ""ui_group"",
        ""name"": ""Machine 1"",
        ""tab"": ""cac63cb1962e3f68"",
        ""order"": 1,
        ""disp"": true,
        ""width"": ""5"",
        ""collapse"": false,
        ""className"": """"
    },
    {
        ""id"": ""73ef8a147b2fd5f3"",
        ""type"": ""ui_group"",
        ""name"": ""Machine 2"",
        ""tab"": ""cac63cb1962e3f68"",
        ""order"": 2,
        ""disp"": true,
        ""width"": ""5"",
        ""collapse"": false,
        ""className"": """"
    },
    {
        ""id"": ""f8b87db8db4def0a"",
        ""type"": ""ui_group"",
        ""name"": ""Machine 3"",
        ""tab"": ""cac63cb1962e3f68"",
        ""order"": 3,
        ""disp"": true,
        ""width"": ""5"",
        ""collapse"": false,
        ""className"": """"
    },
    {
        ""id"": ""09eee1ee8667a9f4"",
        ""type"": ""ui_group"",
        ""name"": ""Machine 4"",
        ""tab"": ""cac63cb1962e3f68"",
        ""order"": 4,
        ""disp"": true,
        ""width"": ""5"",
        ""collapse"": false,
        ""className"": """"
    },
    {
        ""id"": ""d00a672806fb8dd6"",
        ""type"": ""ui_group"",
        ""name"": ""Machine 5"",
        ""tab"": ""cac63cb1962e3f68"",
        ""order"": 5,
        ""disp"": true,
        ""width"": ""5"",
        ""collapse"": false,
        ""className"": """"
    },
    {
        ""id"": ""cac63cb1962e3f68"",
        ""type"": ""ui_tab"",
        ""name"": ""Power monitor"",
        ""icon"": ""dashboard"",
        ""order"": 2,
        ""disabled"": false,
        ""hidden"": false
    }
]"
0rMNhC4P,Untitled,Kirsiina,PHP,Thursday 14th of December 2023 10:26:16 AM CDT,"<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Authentication Language Lines
    |--------------------------------------------------------------------------
    |
    | The following language lines are used during authentication for various
    | messages that we need to display to the user. You are free to modify
    | these language lines according to your application's requirements.
    |
    */

    'failed'   => 'These credentials do not match our records.',
    'throttle' => 'Too many login attempts. Please try again in :seconds seconds.',

    // Activation items
    'sentEmail'        => 'We have sent an email to :email.',
    'clickInEmail'     => 'Please click the link in it to activate your account.',
    'anEmailWasSent'   => 'An email was sent to :email on :date.',
    'clickHereResend'  => 'Click here to resend the email.',
    'successActivated' => 'Success, your account has been activated.',
    'unsuccessful'     => 'Your account could not be activated; please try again.',
    'notCreated'       => 'Your account could not be created; please try again.',
    'tooManyEmails'    => 'Too many activation emails have been sent to :email. <br />Please try again in <span class=""label label-danger"">:hours hours</span>.',
    'regThanks'        => 'Thank you for registering, ',
    'invalidToken'     => 'Invalid activation token. ',
    'activationSent'   => 'Activation email sent. ',
    'alreadyActivated' => 'Already activated. ',

    // Labels
    'whoops'          => 'Whoops! ',
    'someProblems'    => 'There were some problems with your input.',
    'email'           => 'E-Mail Address',
    'password'        => 'Password',
    'rememberMe'      => ' Remember Me',
    'login'           => 'Login',
    'forgot'          => 'Forgot Your Password?',
    'forgot_message'  => 'Password Troubles?',
    'name'            => 'Username',
    'first_name'      => 'First Name',
    'last_name'       => 'Last Name',
    'confirmPassword' => 'Confirm Password',
    'register'        => 'Register',

    // Placeholders
    'ph_name'          => 'Username',
    'ph_email'         => 'E-mail Address',
    'ph_firstname'     => 'First Name',
    'ph_lastname'      => 'Last Name',
    'ph_password'      => 'Password',
    'ph_password_conf' => 'Confirm Password',

    // User flash messages
    'sendResetLink' => 'Send Password Reset Link',
    'resetPassword' => 'Reset Password',
    'loggedIn'      => 'You are logged in!',

    // email links
    'pleaseActivate'    => 'Please activate your account.',
    'clickHereReset'    => 'Click here to reset your password: ',
    'clickHereActivate' => 'Click here to activate your account: ',

    // Validators
    'userNameTaken'    => 'Username is taken',
    'userNameRequired' => 'Username is required',
    'fNameRequired'    => 'First Name is required',
    'lNameRequired'    => 'Last Name is required',
    'emailRequired'    => 'Email is required',
    'emailInvalid'     => 'Email is invalid',
    'passwordRequired' => 'Password is required',
    'PasswordMin'      => 'Password needs to have at least 6 characters',
    'PasswordMax'      => 'Password maximum length is 20 characters',
    'captchaRequire'   => 'Captcha is required',
    'CaptchaWrong'     => 'Wrong captcha, please try again.',
    'roleRequired'     => 'User role is required.',

];"
SRFprMEg,Netplan VLAN example,sleekkeepup,YAML,Thursday 14th of December 2023 10:24:17 AM CDT,"---
network:
  version: 2
  renderer: networkd
  ethernets:
    enp0s17: {}
  vlans:
    vlan.2:
      id: 2
      link: enp0s17
      addresses:
        - fd00:2600:1410:1000::b63
      nameservers:
        addresses:
          - fd00:2600:1410:1000::b62
      routes:
        - to: default
          via: fd00:2600:1410:1000::b62
"
QSDYWEnd,filecheck(),iconoclasthero,Bash,Thursday 14th of December 2023 10:10:24 AM CDT,"
filecheck1() {
#[[ ! $1 =~ .+\ --\ Audiobook.m4b ]] && echo ""No file name give..."" && exit
if [[ ""$1"" == *\ --\ Audiobook.m4b ]]
 then
   m4bin=""$1""
   echo ""$m4bin""
else
   for i in *m4b
    do
      files=(*m4b)
      if [[ ""${#files[@]}"" == 1 ]] && [[ ""$files"" == *\ --\ Audiobook.m4b ]]
       then
         m4bin=""$i""
      elif [[ ""${#files[@]}"" == 1 ]] && [[ ""$files"" == *m4b ]]
       then
         m4bin=""${files/.m4b/ -- Audiobook.m4b}""
         mv ""$files"" ""$m4bin""
      else
        echo ""No input file found or specified, please check and retry...""
        ls
        exit
      fi
    done
fi
}


filecheck2() {
if [[ ""$1"" == *\ --\ Audiobook.m4b ]] && [[ -f ""$1"" ]]
 then
   m4bin=""$1""
   echo ""$m4bin""
else
   for i in *m4b
    do
      files=(*m4b)
      if [[ -f ""$i"" ]] && [[ ""${#files[@]}"" == 1 ]]
       then
         if [[ ""$files"" == *\ --\ Audiobook.m4b ]]
          then
            m4bin=""$i""
         elif [[ ""$files"" == *m4b ]]
          then
            m4bin=""${files/.m4b/ -- Audiobook.m4b}""
            mv ""$files"" ""$m4bin""
         fi
      else
        echo ""No single & appropriate input file found or specified, please check and retry...""
        ls
        exit 1
      fi
    done
fi
}



####################################
#start

[[ ""$1"" == @(edit|e|nano) ]] && editscript

filecheck2 ""$1""
if ! filecheck2 ""$1""; then exit; fi

mediainfo ""$m4bin""
"
1Tb7KzgP,Untitled,skft185,Python,Thursday 14th of December 2023 10:09:25 AM CDT,"def convertToArray():
    try:
        numCount = input(""Введите число N: "")
        resultArray = []
        for i in range(int(numCount)):
            num = input(f""Введите число {i + 1}: "")
            resultArray.append(int(num))
        return resultArray
    except ValueError:
        print(""Incorrect num"")


print(convertToArray())"
Jam3Cjss,termometr,sdfdsfdsfhhhh,C,Thursday 14th of December 2023 09:46:18 AM CDT,"DHT dht22(2, DHT22);
 
 
void setup(){
  pinMode(6, OUTPUT);
  pinMode(7, OUTPUT);
  pinMode(2, INPUT);
  Serial.begin(9600);
  }
 
void loop(){
 
 float temp = dht22.readTemperature();
 float hum = dht22.readHumidity();
 
 Serial.println (""Temperatura:"");
 Serial.println (temp);
 Serial.println (""Wilgotnosc:"");
 Serial.println (hum);
 
  delay(2000);
 
  if (temp >26) {
    digitalWrite(6, HIGH);
}
  if (temp <25){ 
    digitalWrite (6, LOW);
  }
    
  if (temp >26) {
    digitalWrite(7, HIGH);
}
  if ( temp <25){ 
    digitalWrite (7, LOW);
  }

 
}"
20SUFcwH,Untitled,jamieburchell,JSON,Thursday 14th of December 2023 09:44:16 AM CDT,"{
    ""version"": ""2.6.1"",
    ""cluster.messagebus.debug"": false,
    ""cluster.messagebus.enabled"": false,
    ""cluster.messagebus.sns.region"": """",
    ""cluster.messagebus.sns.api_key"": """",
    ""cluster.messagebus.sns.api_secret"": """",
    ""cluster.messagebus.sns.topic_arn"": """",
    ""dbcache.configuration_overloaded"": false,
    ""dbcache.debug"": false,
    ""dbcache.debug_purge"": false,
    ""dbcache.enabled"": false,
    ""dbcache.engine"": ""file"",
    ""dbcache.file.gc"": 3600,
    ""dbcache.file.locking"": false,
    ""dbcache.lifetime"": 180,
    ""dbcache.memcached.persistent"": true,
    ""dbcache.memcached.aws_autodiscovery"": false,
    ""dbcache.memcached.servers"": [
        ""127.0.0.1:11211""
    ],
    ""dbcache.memcached.username"": """",
    ""dbcache.memcached.password"": """",
    ""dbcache.memcached.binary_protocol"": true,
    ""dbcache.redis.persistent"": true,
    ""dbcache.redis.servers"": [
        ""127.0.0.1:6379""
    ],
    ""dbcache.redis.verify_tls_certificates"": true,
    ""dbcache.redis.password"": """",
    ""dbcache.redis.dbid"": 0,
    ""dbcache.redis.timeout"": 0,
    ""dbcache.redis.retry_interval"": 0,
    ""dbcache.redis.read_timeout"": 0,
    ""dbcache.use_filters"": false,
    ""dbcache.reject.constants"": [
        ""APP_REQUEST"",
        ""DOING_CRON"",
        ""DONOTCACHEDB"",
        ""SHORTINIT"",
        ""XMLRPC_REQUEST""
    ],
    ""dbcache.reject.cookie"": [],
    ""dbcache.reject.logged"": true,
    ""dbcache.reject.sql"": [
        ""gdsr_"",
        ""wp_rg_"",
        ""_wp_session_"",
        ""_wc_session_""
    ],
    ""dbcache.reject.uri"": [],
    ""dbcache.reject.words"": [
        ""^\\s*insert\\b"",
        ""^\\s*delete\\b"",
        ""^\\s*update\\b"",
        ""^\\s*replace\\b"",
        ""^\\s*create\\b"",
        ""^\\s*alter\\b"",
        ""^\\s*show\\b"",
        ""^\\s*set\\b"",
        ""\\bautoload\\s+=\\s+'yes'"",
        ""\\bsql_calc_found_rows\\b"",
        ""\\bfound_rows\\(\\)""
    ],
    ""docroot_fix.enable"": false,
    ""lazyload.enabled"": true,
    ""lazyload.threshold"": """",
    ""lazyload.process_img"": false,
    ""lazyload.process_background"": true,
    ""lazyload.googlemaps.google_maps_easy"": false,
    ""lazyload.googlemaps.wp_google_maps"": false,
    ""lazyload.googlemaps.wp_google_map_plugin"": false,
    ""lazyload.exclude"": [
        ""avia-bg-style-fixed"",
        ""data-bgposition="",
        ""data-envira-src="",
        ""data-large_image="",
        ""data-lazy-original="",
        ""data-lazy-src="",
        ""data-lazyload="",
        ""data-lazysrc="",
        ""data-no-lazy="",
        ""data-src="",
        ""data-srcset="",
        ""fullurl="",
        ""lazy-slider-img="",
        ""loading=\""eager\"""",
        ""no-lazy"",
        ""rev-slidebg"",
        ""skip-lazy"",
        ""soliloquy-image"",
        ""swatch-img"",
        ""w3-total-cache"",
        ""woocommerce\/assets\/images\/placeholder.png"",
        ""wpcf7_captcha""
    ],
    ""lazyload.embed_method"": ""async_head"",
    ""objectcache.configuration_overloaded"": false,
    ""objectcache.enabled"": true,
    ""objectcache.debug"": false,
    ""objectcache.debug_purge"": false,
    ""objectcache.enabled_for_wp_admin"": false,
    ""objectcache.fallback_transients"": true,
    ""objectcache.engine"": ""memcached"",
    ""objectcache.file.gc"": 3600,
    ""objectcache.file.locking"": false,
    ""objectcache.memcached.servers"": [
        ""127.0.0.1:11211""
    ],
    ""objectcache.memcached.persistent"": true,
    ""objectcache.memcached.aws_autodiscovery"": false,
    ""objectcache.memcached.username"": """",
    ""objectcache.memcached.password"": """",
    ""objectcache.memcached.binary_protocol"": true,
    ""objectcache.redis.persistent"": true,
    ""objectcache.redis.servers"": [
        ""127.0.0.1:6379""
    ],
    ""objectcache.redis.verify_tls_certificates"": true,
    ""objectcache.redis.password"": """",
    ""objectcache.redis.dbid"": 0,
    ""objectcache.redis.timeout"": 0,
    ""objectcache.redis.retry_interval"": 0,
    ""objectcache.redis.read_timeout"": 0,
    ""objectcache.groups.global"": [
        ""users"",
        ""userlogins"",
        ""usermeta"",
        ""user_meta"",
        ""site-transient"",
        ""site-options"",
        ""site-lookup"",
        ""blog-lookup"",
        ""blog-details"",
        ""rss"",
        ""global-posts""
    ],
    ""objectcache.groups.nonpersistent"": [
        ""counts"",
        ""plugins""
    ],
    ""objectcache.lifetime"": 180,
    ""objectcache.purge.all"": false,
    ""pgcache.configuration_overloaded"": false,
    ""pgcache.enabled"": true,
    ""pgcache.comment_cookie_ttl"": 1800,
    ""pgcache.debug"": false,
    ""pgcache.debug_purge"": false,
    ""pgcache.engine"": ""file_generic"",
    ""pgcache.file.gc"": 3600,
    ""pgcache.file.nfs"": false,
    ""pgcache.file.locking"": false,
    ""pgcache.lifetime"": 3600,
    ""pgcache.memcached.servers"": [
        ""127.0.0.1:11211""
    ],
    ""pgcache.memcached.persistent"": true,
    ""pgcache.memcached.aws_autodiscovery"": false,
    ""pgcache.memcached.username"": """",
    ""pgcache.memcached.password"": """",
    ""pgcache.memcached.binary_protocol"": true,
    ""pgcache.redis.persistent"": true,
    ""pgcache.redis.servers"": [
        ""127.0.0.1:6379""
    ],
    ""pgcache.redis.verify_tls_certificates"": true,
    ""pgcache.redis.password"": """",
    ""pgcache.redis.dbid"": 0,
    ""pgcache.redis.timeout"": 0,
    ""pgcache.redis.retry_interval"": 0,
    ""pgcache.redis.read_timeout"": 0,
    ""pgcache.cache.query"": false,
    ""pgcache.cache.home"": true,
    ""pgcache.cache.feed"": true,
    ""pgcache.cache.nginx_handle_xml"": true,
    ""pgcache.cache.ssl"": true,
    ""pgcache.cache.404"": false,
    ""pgcache.cache.headers"": [
        ""Last-Modified"",
        ""Content-Type"",
        ""X-Pingback"",
        ""P3P"",
        ""Link""
    ],
    ""pgcache.compatibility"": false,
    ""pgcache.remove_charset"": false,
    ""pgcache.accept.uri"": [
        ""sitemap(_index)?\\.xml(\\.gz)?"",
        ""([a-z0-9_\\-]+)?sitemap\\.xsl"",
        ""[a-z0-9_\\-]+-sitemap([0-9]+)?\\.xml(\\.gz)?""
    ],
    ""pgcache.accept.files"": [
        ""wp-comments-popup.php"",
        ""wp-links-opml.php"",
        ""wp-locations.php""
    ],
    ""pgcache.accept.qs"": [
        ""_branch_match_id"",
        ""_bta_c"",
        ""_bta_tid"",
        ""_ga"",
        ""_gl"",
        ""_ke"",
        ""adgroupid"",
        ""adid"",
        ""age-verified"",
        ""ao_noptimize"",
        ""campaignid"",
        ""campid"",
        ""cn-reloaded"",
        ""customid"",
        ""dm_i"",
        ""ef_id"",
        ""epik"",
        ""fb_action_ids"",
        ""fb_action_types"",
        ""fb_source"",
        ""fbclid"",
        ""gclid"",
        ""gclsrc"",
        ""gdffi"",
        ""gdfms"",
        ""gdftrk"",
        ""hsa_acc"",
        ""hsa_ad"",
        ""hsa_cam"",
        ""hsa_grp"",
        ""hsa_kw"",
        ""hsa_mt"",
        ""hsa_net"",
        ""hsa_src"",
        ""hsa_tgt"",
        ""hsa_ver"",
        ""igshid"",
        ""matomo_campaign"",
        ""matomo_cid"",
        ""matomo_content"",
        ""matomo_group"",
        ""matomo_keyword"",
        ""matomo_medium"",
        ""matomo_placement"",
        ""matomo_source"",
        ""mc_cid"",
        ""mc_eid"",
        ""mkcid"",
        ""mkevt"",
        ""mkrid"",
        ""mkwid"",
        ""msclkid"",
        ""mtm_campaign"",
        ""mtm_cid"",
        ""mtm_content"",
        ""mtm_group"",
        ""mtm_keyword"",
        ""mtm_medium"",
        ""mtm_placement"",
        ""mtm_source"",
        ""pcrid"",
        ""piwik_campaign"",
        ""piwik_keyword"",
        ""piwik_kwd"",
        ""pk_campaign"",
        ""pk_cid"",
        ""pk_content"",
        ""pk_keyword"",
        ""pk_kwd"",
        ""pk_medium"",
        ""pk_source"",
        ""pp"",
        ""redirect_log_mongo_id"",
        ""redirect_mongo_id"",
        ""ref"",
        ""s_kwcid"",
        ""sb_referer_host"",
        ""si"",
        ""sscid"",
        ""toolid"",
        ""trk_contact"",
        ""trk_module"",
        ""trk_msg"",
        ""trk_sid"",
        ""usqp"",
        ""utm_campaign"",
        ""utm_content"",
        ""utm_expid"",
        ""utm_id"",
        ""utm_medium"",
        ""utm_source"",
        ""utm_term""
    ],
    ""pgcache.migrated.qsexempts"": 1687783496,
    ""pgcache.late_init"": false,
    ""pgcache.late_caching"": false,
    ""pgcache.mirrors.enabled"": false,
    ""pgcache.mirrors.home_urls"": [
        """"
    ],
    ""pgcache.reject.front_page"": false,
    ""pgcache.reject.logged"": true,
    ""pgcache.reject.logged_roles"": false,
    ""pgcache.reject.roles"": [
        """"
    ],
    ""pgcache.reject.uri"": [
        ""wp-.*\\.php"",
        ""index\\.php""
    ],
    ""pgcache.reject.categories"": [
        """"
    ],
    ""pgcache.reject.tags"": [
        """"
    ],
    ""pgcache.reject.authors"": [
        """"
    ],
    ""pgcache.reject.custom"": [
        """"
    ],
    ""pgcache.reject.ua"": [
        """"
    ],
    ""pgcache.reject.cookie"": [
        ""wptouch_switch_toggle""
    ],
    ""pgcache.reject.request_head"": false,
    ""pgcache.purge.front_page"": true,
    ""pgcache.purge.home"": true,
    ""pgcache.purge.post"": true,
    ""pgcache.purge.comments"": true,
    ""pgcache.purge.author"": true,
    ""pgcache.purge.terms"": true,
    ""pgcache.purge.archive.daily"": true,
    ""pgcache.purge.archive.monthly"": true,
    ""pgcache.purge.archive.yearly"": true,
    ""pgcache.purge.feed.blog"": true,
    ""pgcache.purge.feed.comments"": true,
    ""pgcache.purge.feed.author"": true,
    ""pgcache.purge.feed.terms"": true,
    ""pgcache.purge.feed.types"": [
        ""rss2""
    ],
    ""pgcache.purge.postpages_limit"": 10,
    ""pgcache.purge.pages"": [
        ""\/who-we-are\/"",
        """"
    ],
    ""pgcache.purge.sitemap_regex"": ""([a-z0-9_\\-]*?)sitemap([a-z0-9_\\-]*)?\\.xml"",
    ""pgcache.prime.enabled"": true,
    ""pgcache.prime.interval"": 900,
    ""pgcache.prime.limit"": 50,
    ""pgcache.prime.sitemap"": ""\/sitemap_index.xml"",
    ""pgcache.prime.post.enabled"": true,
    ""pgcache.rest"": """",
    ""pgcache.cookiegroups.enabled"": false,
    ""pgcache.cookiegroups.groups"": {
        ""mobile"": {
            ""enabled"": false,
            ""cache"": true,
            ""cookies"": [
                ""wptouch-pro-view=mobile"",
                ""wptouch-pro-cache-state=mobile""
            ]
        },
        ""loggedin"": {
            ""enabled"": false,
            ""cache"": true,
            ""cookies"": [
                ""wordpress_logged_in_.*""
            ]
        },
        ""subscribers"": {
            ""enabled"": false,
            ""cache"": true,
            ""cookies"": [
                ""role=subscriber"",
                ""role=member""
            ]
        }
    },
    ""stats.enabled"": false,
    ""stats.slot_seconds"": 60,
    ""stats.slots_count"": 60,
    ""stats.cpu.enabled"": false,
    ""stats.access_log.enabled"": false,
    ""stats.access_log.filename"": """",
    ""stats.access_log.format"": ""%h %l %u %t \\\""%r\\\"" %>s %O \\\""%{Referer}i\\\"" \\\""%{User-Agent}i\\\"""",
    ""stats.access_log.webserver"": ""apache"",
    ""minify.configuration_overloaded"": false,
    ""minify.enabled"": true,
    ""minify.auto"": true,
    ""minify.debug"": false,
    ""minify.engine"": ""file"",
    ""minify.error.notification"": """",
    ""minify.file.gc"": 86400,
    ""minify.file.nfs"": false,
    ""minify.file.locking"": false,
    ""minify.memcached.servers"": [
        ""127.0.0.1:11211""
    ],
    ""minify.memcached.persistent"": true,
    ""minify.memcached.aws_autodiscovery"": false,
    ""minify.memcached.username"": """",
    ""minify.memcached.password"": """",
    ""minify.memcached.binary_protocol"": true,
    ""minify.redis.persistent"": true,
    ""minify.redis.servers"": [
        ""127.0.0.1:6379""
    ],
    ""minify.redis.verify_tls_certificates"": true,
    ""minify.redis.password"": """",
    ""minify.redis.dbid"": 0,
    ""minify.redis.timeout"": 0,
    ""minify.redis.retry_interval"": 0,
    ""minify.redis.read_timeout"": 0,
    ""minify.rewrite"": true,
    ""minify.options"": [],
    ""minify.symlinks"": [],
    ""minify.lifetime"": 86400,
    ""minify.upload"": true,
    ""minify.html.enable"": false,
    ""minify.html.engine"": ""html"",
    ""minify.html.reject.feed"": false,
    ""minify.html.inline.css"": false,
    ""minify.html.inline.js"": false,
    ""minify.html.strip.crlf"": false,
    ""minify.html.comments.ignore"": [
        ""google_ad_"",
        ""RSPEAK_"",
        ""mfunc""
    ],
    ""minify.css.enable"": true,
    ""minify.css.engine"": ""css"",
    ""minify.css.method"": ""both"",
    ""minify.css.http2push"": false,
    ""minify.css.strip.comments"": false,
    ""minify.css.strip.crlf"": false,
    ""minify.css.embed"": false,
    ""minify.css.imports"": ""process"",
    ""minify.css.groups"": [],
    ""minify.js.http2push"": false,
    ""minify.js.enable"": true,
    ""minify.js.engine"": ""js"",
    ""minify.js.method"": ""both"",
    ""minify.js.combine.header"": false,
    ""minify.js.header.embed_type"": ""blocking"",
    ""minify.js.combine.body"": false,
    ""minify.js.body.embed_type"": ""blocking"",
    ""minify.js.combine.footer"": false,
    ""minify.js.footer.embed_type"": ""blocking"",
    ""minify.js.strip.comments"": false,
    ""minify.js.strip.crlf"": false,
    ""minify.js.groups"": [],
    ""minify.yuijs.path.java"": ""java"",
    ""minify.yuijs.path.jar"": ""yuicompressor.jar"",
    ""minify.yuijs.options.line-break"": 5000,
    ""minify.yuijs.options.nomunge"": false,
    ""minify.yuijs.options.preserve-semi"": false,
    ""minify.yuijs.options.disable-optimizations"": false,
    ""minify.yuicss.path.java"": ""java"",
    ""minify.yuicss.path.jar"": ""yuicompressor.jar"",
    ""minify.yuicss.options.line-break"": 5000,
    ""minify.ccjs.path.java"": ""java"",
    ""minify.ccjs.path.jar"": ""compiler.jar"",
    ""minify.ccjs.options.compilation_level"": ""SIMPLE_OPTIMIZATIONS"",
    ""minify.ccjs.options.formatting"": """",
    ""minify.csstidy.options.remove_bslash"": true,
    ""minify.csstidy.options.compress_colors"": false,
    ""minify.csstidy.options.compress_font-weight"": false,
    ""minify.csstidy.options.lowercase_s"": false,
    ""minify.csstidy.options.optimise_shorthands"": 0,
    ""minify.csstidy.options.remove_last_;"": false,
    ""minify.csstidy.options.remove_space_before_important"": false,
    ""minify.csstidy.options.case_properties"": 1,
    ""minify.csstidy.options.sort_properties"": false,
    ""minify.csstidy.options.sort_selectors"": false,
    ""minify.csstidy.options.merge_selectors"": 0,
    ""minify.csstidy.options.discard_invalid_selectors"": false,
    ""minify.csstidy.options.discard_invalid_properties"": false,
    ""minify.csstidy.options.css_level"": ""CSS3.0"",
    ""minify.csstidy.options.preserve_css"": false,
    ""minify.csstidy.options.timestamp"": false,
    ""minify.csstidy.options.template"": ""highest_compression"",
    ""minify.htmltidy.options.clean"": false,
    ""minify.htmltidy.options.hide-comments"": true,
    ""minify.htmltidy.options.wrap"": 0,
    ""minify.reject.logged"": false,
    ""minify.reject.ua"": [
        """"
    ],
    ""minify.reject.uri"": [
        """"
    ],
    ""minify.reject.files.js"": [
        """"
    ],
    ""minify.reject.files.css"": [
        """"
    ],
    ""minify.cache.files"": [
        """"
    ],
    ""minify.cache.files_regexp"": false,
    ""cdn.configuration_overloaded"": false,
    ""cdn.enabled"": false,
    ""cdn.debug"": false,
    ""cdn.flush_manually"": false,
    ""cdn.engine"": ""stackpath2"",
    ""cdn.uploads.enable"": true,
    ""cdn.includes.enable"": true,
    ""cdn.includes.files"": ""*.css;*.js;*.gif;*.png;*.jpg;*.xml"",
    ""cdn.theme.enable"": true,
    ""cdn.theme.files"": ""*.css;*.js;*.gif;*.png;*.jpg;*.ico;*.ttf;*.otf;*.woff;*.woff2;*.less"",
    ""cdn.minify.enable"": true,
    ""cdn.custom.enable"": true,
    ""cdn.custom.files"": [
        ""favicon.ico"",
        ""{wp_content_dir}\/gallery\/*"",
        ""{wp_content_dir}\/uploads\/avatars\/*"",
        ""{plugins_dir}\/wordpress-seo\/css\/xml-sitemap.xsl"",
        ""{plugins_dir}\/wp-minify\/min*"",
        ""{plugins_dir}\/*.js"",
        ""{plugins_dir}\/*.css"",
        ""{plugins_dir}\/*.gif"",
        ""{plugins_dir}\/*.jpg"",
        ""{plugins_dir}\/*.png""
    ],
    ""cdn.import.files"": false,
    ""cdn.queue.interval"": 900,
    ""cdn.queue.limit"": 25,
    ""cdn.force.rewrite"": false,
    ""cdn.autoupload.enabled"": false,
    ""cdn.autoupload.interval"": 3600,
    ""cdn.canonical_header"": false,
    ""cdn.admin.media_library"": false,
    ""cdn.cors_header"": true,
    ""cdn.ftp.host"": """",
    ""cdn.ftp.type"": """",
    ""cdn.ftp.user"": """",
    ""cdn.ftp.pass"": """",
    ""cdn.ftp.path"": """",
    ""cdn.ftp.pasv"": false,
    ""cdn.ftp.domain"": [],
    ""cdn.ftp.ssl"": ""auto"",
    ""cdn.ftp.default_keys"": true,
    ""cdn.ftp.pubkey"": """",
    ""cdn.ftp.privkey"": """",
    ""cdn.google_drive.client_id"": """",
    ""cdn.google_drive.refresh_token"": """",
    ""cdn.google_drive.folder.id"": """",
    ""cdn.google_drive.folder.title"": """",
    ""cdn.google_drive.folder.url"": """",
    ""cdn.highwinds.account_hash"": """",
    ""cdn.highwinds.api_token"": """",
    ""cdn.highwinds.host.hash_code"": """",
    ""cdn.highwinds.host.domains"": [],
    ""cdn.highwinds.ssl"": ""auto"",
    ""cdn.s3.key"": """",
    ""cdn.s3.secret"": """",
    ""cdn.s3.bucket"": """",
    ""cdn.s3.bucket.location"": ""us-east-1"",
    ""cdn.s3.cname"": [],
    ""cdn.s3.ssl"": ""auto"",
    ""cdn.s3.public_objects"": ""enabled"",
    ""cdn.s3_compatible.api_host"": ""auto"",
    ""cdn.cf.key"": """",
    ""cdn.cf.secret"": """",
    ""cdn.cf.bucket"": """",
    ""cdn.cf.bucket.location"": ""us-east-1"",
    ""cdn.cf.id"": """",
    ""cdn.cf.cname"": [],
    ""cdn.cf.ssl"": ""auto"",
    ""cdn.cf.public_objects"": ""enabled"",
    ""cdn.cf2.key"": """",
    ""cdn.cf2.secret"": """",
    ""cdn.cf2.id"": """",
    ""cdn.cf2.cname"": [],
    ""cdn.cf2.ssl"": """",
    ""cdn.rscf.user"": """",
    ""cdn.rscf.key"": """",
    ""cdn.rscf.location"": ""us"",
    ""cdn.rscf.container"": """",
    ""cdn.rscf.cname"": [],
    ""cdn.rscf.ssl"": ""auto"",
    ""cdn.rackspace_cdn.user_name"": """",
    ""cdn.rackspace_cdn.api_key"": """",
    ""cdn.rackspace_cdn.region"": """",
    ""cdn.rackspace_cdn.service.access_url"": """",
    ""cdn.rackspace_cdn.service.id"": """",
    ""cdn.rackspace_cdn.service.name"": """",
    ""cdn.rackspace_cdn.service.protocol"": ""http"",
    ""cdn.rackspace_cdn.domains"": [],
    ""cdn.azure.user"": """",
    ""cdn.azure.key"": """",
    ""cdn.azure.container"": """",
    ""cdn.azure.cname"": [],
    ""cdn.azure.ssl"": ""auto"",
    ""cdn.mirror.domain"": [],
    ""cdn.mirror.ssl"": ""auto"",
    ""cdn.limelight.short_name"": """",
    ""cdn.limelight.username"": """",
    ""cdn.limelight.api_key"": """",
    ""cdn.limelight.host.domains"": [],
    ""cdn.limelight.ssl"": ""auto"",
    ""cdn.cotendo.username"": """",
    ""cdn.cotendo.password"": """",
    ""cdn.cotendo.zones"": [],
    ""cdn.cotendo.domain"": [],
    ""cdn.cotendo.ssl"": ""auto"",
    ""cdn.akamai.username"": """",
    ""cdn.akamai.password"": """",
    ""cdn.akamai.email_notification"": [],
    ""cdn.akamai.action"": ""invalidate"",
    ""cdn.akamai.zone"": ""production"",
    ""cdn.akamai.domain"": [],
    ""cdn.akamai.ssl"": ""auto"",
    ""cdn.edgecast.account"": """",
    ""cdn.edgecast.token"": """",
    ""cdn.edgecast.domain"": [],
    ""cdn.edgecast.ssl"": ""auto"",
    ""cdn.att.account"": """",
    ""cdn.att.token"": """",
    ""cdn.att.domain"": [],
    ""cdn.att.ssl"": ""auto"",
    ""cdn.stackpath.authorization_key"": """",
    ""cdn.stackpath.domain"": [],
    ""cdn.stackpath.ssl"": ""auto"",
    ""cdn.stackpath.zone_id"": 0,
    ""cdn.stackpath2.client_id"": """",
    ""cdn.stackpath2.client_secret"": """",
    ""cdn.stackpath2.stack_id"": """",
    ""cdn.stackpath2.site_id"": 0,
    ""cdn.stackpath2.site_root_domain"": 0,
    ""cdn.stackpath2.domain"": [],
    ""cdn.stackpath2.ssl"": ""auto"",
    ""cdn.reject.admins"": false,
    ""cdn.reject.logged_roles"": false,
    ""cdn.reject.roles"": [],
    ""cdn.reject.ua"": [],
    ""cdn.reject.uri"": [],
    ""cdn.reject.files"": [
        ""{uploads_dir}\/wpcf7_captcha\/*"",
        ""{uploads_dir}\/imagerotator.swf"",
        ""{plugins_dir}\/wp-fb-autoconnect\/facebook-platform\/channel.html""
    ],
    ""cdn.reject.ssl"": false,
    ""cdnfsd.enabled"": false,
    ""cdnfsd.engine"": """",
    ""cdnfsd.debug"": false,
    ""cdnfsd.cloudfront.access_key"": """",
    ""cdnfsd.cloudfront.secret_key"": """",
    ""cdnfsd.cloudfront.distribution_id"": """",
    ""cdnfsd.limelight.short_name"": """",
    ""cdnfsd.limelight.username"": """",
    ""cdnfsd.limelight.api_key"": """",
    ""cdnfsd.stackpath.api_key"": """",
    ""cdnfsd.stackpath.zone_id"": 0,
    ""cdnfsd.stackpath2.client_id"": """",
    ""cdnfsd.stackpath2.client_secret"": """",
    ""cdnfsd.stackpath2.stack_id"": """",
    ""cdnfsd.stackpath2.site_id"": 0,
    ""cdnfsd.stackpath2.site_root_domain"": 0,
    ""cdnfsd.stackpath2.domain"": [],
    ""cdnfsd.stackpath2.ssl"": ""auto"",
    ""cdnfsd.transparentcdn.client_id"": """",
    ""cdnfsd.transparentcdn.client_secret"": """",
    ""cdnfsd.transparentcdn.company_id"": """",
    ""varnish.configuration_overloaded"": false,
    ""varnish.enabled"": false,
    ""varnish.debug"": false,
    ""varnish.servers"": [
        """"
    ],
    ""browsercache.configuration_overloaded"": false,
    ""browsercache.enabled"": true,
    ""browsercache.rewrite"": false,
    ""browsercache.no404wp"": false,
    ""browsercache.no404wp.exceptions"": [
        ""robots\\.txt"",
        ""[a-z0-9_\\-]*sitemap[a-z0-9_\\.\\-]*\\.(xml|xsl|html)(\\.gz)?""
    ],
    ""browsercache.cssjs.last_modified"": true,
    ""browsercache.cssjs.compression"": false,
    ""browsercache.cssjs.brotli"": false,
    ""browsercache.cssjs.expires"": false,
    ""browsercache.cssjs.lifetime"": 31536000,
    ""browsercache.cssjs.nocookies"": false,
    ""browsercache.cssjs.cache.control"": false,
    ""browsercache.cssjs.cache.policy"": ""cache_public_maxage"",
    ""browsercache.cssjs.etag"": false,
    ""browsercache.cssjs.w3tc"": false,
    ""browsercache.cssjs.replace"": true,
    ""browsercache.cssjs.querystring"": false,
    ""browsercache.html.compression"": false,
    ""browsercache.html.brotli"": false,
    ""browsercache.html.last_modified"": true,
    ""browsercache.html.expires"": false,
    ""browsercache.html.lifetime"": 31536000,
    ""browsercache.html.cache.control"": false,
    ""browsercache.html.cache.policy"": ""cache_public_maxage"",
    ""browsercache.html.etag"": false,
    ""browsercache.html.w3tc"": false,
    ""browsercache.html.replace"": false,
    ""browsercache.other.last_modified"": true,
    ""browsercache.other.compression"": false,
    ""browsercache.other.brotli"": false,
    ""browsercache.other.expires"": false,
    ""browsercache.other.lifetime"": 31536000,
    ""browsercache.other.nocookies"": false,
    ""browsercache.other.cache.control"": false,
    ""browsercache.other.cache.policy"": ""cache_public_maxage"",
    ""browsercache.other.etag"": false,
    ""browsercache.other.w3tc"": false,
    ""browsercache.other.replace"": false,
    ""browsercache.other.querystring"": false,
    ""browsercache.replace.exceptions"": [
        """"
    ],
    ""browsercache.security.session.cookie_httponly"": """",
    ""browsercache.security.session.cookie_secure"": """",
    ""browsercache.security.session.use_only_cookies"": """",
    ""browsercache.hsts"": false,
    ""browsercache.security.hsts.directive"": ""maxage"",
    ""browsercache.security.xfo"": false,
    ""browsercache.security.xfo.directive"": ""same"",
    ""browsercache.security.xfo.allow"": """",
    ""browsercache.security.xss"": false,
    ""browsercache.security.xss.directive"": ""block"",
    ""browsercache.security.xcto"": false,
    ""browsercache.security.pkp"": false,
    ""browsercache.security.pkp.pin"": """",
    ""browsercache.security.pkp.pin.backup"": """",
    ""browsercache.security.pkp.extra"": ""maxage"",
    ""browsercache.security.pkp.report.url"": """",
    ""browsercache.security.pkp.report.only"": ""0"",
    ""browsercache.security.referrer.policy"": false,
    ""browsercache.security.referrer.policy.directive"": ""no-referrer-when-downgrade"",
    ""browsercache.security.csp"": false,
    ""browsercache.security.csp.reporturi"": """",
    ""browsercache.security.csp.reportto"": """",
    ""browsercache.security.csp.base"": """",
    ""browsercache.security.csp.frame"": """",
    ""browsercache.security.csp.connect"": """",
    ""browsercache.security.csp.font"": """",
    ""browsercache.security.csp.script"": """",
    ""browsercache.security.csp.style"": """",
    ""browsercache.security.csp.img"": """",
    ""browsercache.security.csp.media"": """",
    ""browsercache.security.csp.object"": """",
    ""browsercache.security.csp.plugin"": """",
    ""browsercache.security.csp.form"": """",
    ""browsercache.security.csp.frame.ancestors"": """",
    ""browsercache.security.csp.sandbox"": """",
    ""browsercache.security.csp.child"": """",
    ""browsercache.security.csp.manifest"": """",
    ""browsercache.security.csp.scriptelem"": """",
    ""browsercache.security.csp.scriptattr"": """",
    ""browsercache.security.csp.styleelem"": """",
    ""browsercache.security.csp.styleattr"": """",
    ""browsercache.security.csp.worker"": """",
    ""browsercache.security.csp.default"": """",
    ""browsercache.security.cspro"": false,
    ""browsercache.security.cspro.reporturi"": """",
    ""browsercache.security.cspro.reportto"": """",
    ""browsercache.security.cspro.base"": """",
    ""browsercache.security.cspro.frame"": """",
    ""browsercache.security.cspro.connect"": """",
    ""browsercache.security.cspro.font"": """",
    ""browsercache.security.cspro.script"": """",
    ""browsercache.security.cspro.style"": """",
    ""browsercache.security.cspro.img"": """",
    ""browsercache.security.cspro.media"": """",
    ""browsercache.security.cspro.object"": """",
    ""browsercache.security.cspro.plugin"": """",
    ""browsercache.security.cspro.form"": """",
    ""browsercache.security.cspro.frame.ancestors"": """",
    ""browsercache.security.cspro.sandbox"": """",
    ""browsercache.security.cspro.child"": """",
    ""browsercache.security.cspro.manifest"": """",
    ""browsercache.security.cspro.scriptelem"": """",
    ""browsercache.security.cspro.scriptattr"": """",
    ""browsercache.security.cspro.styleelem"": """",
    ""browsercache.security.cspro.styleattr"": """",
    ""browsercache.security.cspro.worker"": """",
    ""browsercache.security.cspro.default"": """",
    ""browsercache.security.fp"": false,
    ""browsercache.security.fp.values"": [],
    ""mobile.configuration_overloaded"": false,
    ""mobile.enabled"": false,
    ""mobile.rgroups"": {
        ""tablets"": {
            ""theme"": """",
            ""enabled"": false,
            ""redirect"": """",
            ""agents"": [
                ""a1-32ab0"",
                ""a210"",
                ""a211"",
                ""b6000-h"",
                ""b8000-h"",
                ""bnrv200"",
                ""bntv400"",
                ""darwin"",
                ""gt-n8005"",
                ""gt-p3105"",
                ""gt-p6810"",
                ""gt-p7510"",
                ""hmj37"",
                ""hp-tablet"",
                ""hp\\sslate"",
                ""hp\\sslatebook"",
                ""ht7s3"",
                ""ideatab_a1107"",
                ""ideataba2109a"",
                ""ideos\\ss7"",
                ""imm76d"",
                ""ipad"",
                ""k00f"",
                ""kfjwi"",
                ""kfot"",
                ""kftt"",
                ""kindle"",
                ""l-06c"",
                ""lg-f200k"",
                ""lg-f200l"",
                ""lg-f200s"",
                ""m470bsa"",
                ""m470bse"",
                ""maxwell"",
                ""me173x"",
                ""mediapad"",
                ""midc497"",
                ""msi\\senjoy\\s10\\splus"",
                ""mz601"",
                ""mz616"",
                ""nexus"",
                ""nookcolor"",
                ""pg09410"",
                ""pg41200"",
                ""pmp5570c"",
                ""pmp5588c"",
                ""pocketbook"",
                ""qmv7a"",
                ""sgp311"",
                ""sgpt12"",
                ""shv-e230k"",
                ""shw-m305w"",
                ""shw-m380w"",
                ""sm-p605"",
                ""smarttab"",
                ""sonysgp321"",
                ""sph-p500"",
                ""surfpad"",
                ""tab07-200"",
                ""tab10-201"",
                ""tab465euk"",
                ""tab474"",
                ""tablet"",
                ""tegranote"",
                ""tf700t"",
                ""thinkpad"",
                ""viewpad"",
                ""voltaire""
            ]
        },
        ""phones"": {
            ""theme"": """",
            ""enabled"": false,
            ""redirect"": """",
            ""agents"": [
                ""(android|bb\\d+|meego).+mobile"",
                ""240x320"",
                ""2.0\\ mmp"",
                ""\\bppc\\b"",
                ""acer\\ s100"",
                ""alcatel"",
                ""amoi"",
                ""archos5"",
                ""asus"",
                ""au-mic"",
                ""audiovox"",
                ""avantgo"",
                ""bada"",
                ""benq"",
                ""bird"",
                ""blackberry"",
                ""blazer"",
                ""cdm"",
                ""cellphone"",
                ""cupcake"",
                ""danger"",
                ""ddipocket"",
                ""docomo"",
                ""docomo\\ ht-03a"",
                ""dopod"",
                ""dream"",
                ""elaine\/3.0"",
                ""ericsson"",
                ""eudoraweb"",
                ""fly"",
                ""froyo"",
                ""googlebot-mobile"",
                ""haier"",
                ""hiptop"",
                ""hp.ipaq"",
                ""htc"",
                ""htc\\ hero"",
                ""htc\\ magic"",
                ""htc_dream"",
                ""htc_magic"",
                ""huawei"",
                ""i-mobile"",
                ""iemobile"",
                ""iemobile\/7"",
                ""iemobile\/7.0"",
                ""iemobile\/9"",
                ""incognito"",
                ""iphone"",
                ""ipod"",
                ""j-phone"",
                ""kddi"",
                ""konka"",
                ""kwc"",
                ""kyocera\/wx310k"",
                ""lenovo"",
                ""lg"",
                ""lg\/u990"",
                ""lg-gw620"",
                ""lge\\ vx"",
                ""liquid\\ build"",
                ""maemo"",
                ""midp"",
                ""midp-2.0"",
                ""mmef20"",
                ""mmp"",
                ""mobilephone"",
                ""mot-mb200"",
                ""mot-mb300"",
                ""mot-v"",
                ""motorola"",
                ""msie\\ 10.0"",
                ""netfront"",
                ""newgen"",
                ""newt"",
                ""nexus\\ 7"",
                ""nexus\\ one"",
                ""nintendo\\ ds"",
                ""nintendo\\ wii"",
                ""nitro"",
                ""nokia"",
                ""novarra"",
                ""openweb"",
                ""opera\\ mini"",
                ""opera\\ mobi"",
                ""opera.mobi"",
                ""p160u"",
                ""palm"",
                ""panasonic"",
                ""pantech"",
                ""pdxgw"",
                ""pg"",
                ""philips"",
                ""phone"",
                ""playbook"",
                ""playstation\\ portable"",
                ""portalmmm"",
                ""proxinet"",
                ""psp"",
                ""qtek"",
                ""s8000"",
                ""sagem"",
                ""samsung"",
                ""samsung-s8000"",
                ""sanyo"",
                ""sch"",
                ""sch-i800"",
                ""sec"",
                ""sendo"",
                ""series60.*webkit"",
                ""series60\/5.0"",
                ""sgh"",
                ""sharp"",
                ""sharp-tq-gx10"",
                ""small"",
                ""smartphone"",
                ""softbank"",
                ""sonyericsson"",
                ""sonyericssone10"",
                ""sonyericssonu20"",
                ""sonyericssonx10"",
                ""sph"",
                ""symbian"",
                ""symbian\\ os"",
                ""symbianos"",
                ""t-mobile\\ mytouch\\ 3g"",
                ""t-mobile\\ opal"",
                ""tattoo"",
                ""toshiba"",
                ""touch"",
                ""treo"",
                ""ts21i-10"",
                ""up.browser"",
                ""up.link"",
                ""uts"",
                ""vertu"",
                ""vodafone"",
                ""wap"",
                ""webmate"",
                ""webos"",
                ""willcome"",
                ""windows\\ ce"",
                ""windows.ce"",
                ""winwap"",
                ""xda"",
                ""xoom"",
                ""zte""
            ]
        }
    },
    ""referrer.configuration_overloaded"": false,
    ""referrer.enabled"": false,
    ""referrer.rgroups"": {
        ""search_engines"": {
            ""theme"": """",
            ""enabled"": false,
            ""redirect"": """",
            ""referrers"": [
                ""google\\.com"",
                ""yahoo\\.com"",
                ""bing\\.com"",
                ""ask\\.com"",
                ""msn\\.com""
            ]
        }
    },
    ""common.track_usage"": false,
    ""common.tweeted"": false,
    ""config.check"": false,
    ""config.path"": """",
    ""widget.latest.items"": 3,
    ""widget.latest_news.items"": 5,
    ""widget.pagespeed.enabled"": false,
    ""widget.pagespeed.access_token"": """",
    ""widget.pagespeed.w3tc_pagespeed_key"": """",
    ""timelimit.email_send"": 180,
    ""timelimit.varnish_purge"": 300,
    ""timelimit.cache_flush"": 600,
    ""timelimit.cache_gc"": 600,
    ""timelimit.cdn_upload"": 600,
    ""timelimit.cdn_delete"": 300,
    ""timelimit.cdn_purge"": 300,
    ""timelimit.cdn_import"": 600,
    ""timelimit.cdn_test"": 300,
    ""timelimit.domain_rename"": 120,
    ""timelimit.minify_recommendations"": 600,
    ""common.instance_id"": 1290655265,
    ""common.force_master"": true,
    ""extensions.active"": {
        ""user-experience-emoji"": ""w3-total-cache\/UserExperience_Emoji_Extension.php"",
        ""user-experience-oembed"": ""w3-total-cache\/UserExperience_OEmbed_Extension.php""
    },
    ""extensions.active_frontend"": {
        ""user-experience-emoji"": ""*"",
        ""user-experience-oembed"": ""*""
    },
    ""extensions.active_dropin"": [],
    ""plugin.license_key"": """",
    ""plugin.type"": """",
    ""jquerymigrate.disabled"": false,
    ""imageservice"": {
        ""compression"": ""lossy"",
        ""auto"": ""enabled"",
        ""visibility"": ""never""
    },
    ""imageservice.configuration_overloaded"": true,
    ""fragmentcache"": {
        ""engine"": """"
    },
    ""cdn.maxcdn.authorization_key"": """",
    ""cdn.maxcdn.domain"": [],
    ""cdn.maxcdn.ssl"": ""auto"",
    ""cdn.maxcdn.zone_id"": 0,
    ""cdnfsd.maxcdn.api_key"": """",
    ""cdnfsd.maxcdn.zone_id"": 0,
    ""widget.pagespeed.key"": """",
    ""widget.pagespeed.key.restrict.referrer"": """",
    ""widget.pagespeed.show_in_admin_bar"": false,
    ""pgcache.bad_behavior_path"": """",
    ""newrelic"": {
        ""monitoring_type"": ""apm""
    },
    ""page"": ""w3tc_userexperience"",
    ""_wpnonce"": ""437056305c"",
    ""_wp_http_referer"": ""\/wp\/wp-admin\/admin.php?page=w3tc_userexperience"",
    ""w3tc_save_options"": ""Save Settings""
}"
cJECMNn0,Button fence,Samuil_Krumov,HTML,Thursday 14th of December 2023 09:14:03 AM CDT,"<!DOCTYPE html>
<html lang=""en"">
<head>
  <meta charset=""UTF-8"">
  <title>Fence Button</title>
  <style>
    body, html {
      margin: 0;
      padding: 0;
    }

    .center {
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
    }
    .fence-button {
      padding: 15px 30px;
      font-size: 18px;
      background-color: #3498db;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      position: relative;
      overflow: hidden;
    }
    .fence-button::before,
    .fence-button::after {
      content: '';
      position: absolute;
      top: 0;
      bottom: 0;
      width: 4px;
      background-color: black; 
      transform: scaleX(0); 
      transition: transform 0.5s ease-in-out;
    }

    .fence-button::before {
      left: 25%;
      height: 100%;
    }

    .fence-button::after {
      right: 25%;
      height: 100%;
    }

    
    .fence-button:hover::before,
    .fence-button:hover::after {
      transform: scaleX(1); 
    }
    .fence-button:hover {
      cursor: no-drop; 
    }
  </style>
</head>
<body>

<div class=""center"">
  <button class=""fence-button"">Hover Me</button>
</div>

</body>
</html>
"
7eFmDXiF,News Dec14 23,Newscaster_Ned,Email,Thursday 14th of December 2023 09:00:05 AM CDT,".‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎1‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎2‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎3‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎T‎e‎s‎t‎ ‎c‎o‎m‎p‎l‎e‎t‎e‎.‎

H‎e‎y‎,‎ ‎g‎u‎y‎s‎.‎ ‎N‎e‎w‎s‎c‎a‎s‎t‎e‎r‎ ‎N‎e‎d‎ ‎h‎e‎r‎e‎ ‎t‎o‎ ‎g‎i‎v‎e‎ ‎y‎o‎u‎ ‎t‎h‎e‎ ‎n‎e‎w‎s‎.‎

B‎a‎d‎ ‎D‎a‎y‎ ‎f‎o‎r‎ ‎B‎i‎d‎e‎n‎s‎

H‎o‎u‎s‎e‎ ‎V‎o‎t‎e‎s‎ ‎t‎o‎ ‎F‎o‎r‎m‎a‎l‎i‎z‎e‎ ‎I‎m‎p‎e‎a‎c‎h‎m‎e‎n‎t‎ ‎I‎n‎q‎u‎i‎r‎y‎ ‎i‎n‎t‎o‎ ‎J‎o‎e‎ ‎B‎i‎d‎e‎n‎

V‎o‎t‎e‎ ‎C‎o‎m‎e‎s‎ ‎J‎u‎s‎t‎ ‎H‎o‎u‎r‎s‎ ‎a‎f‎t‎e‎r‎ ‎H‎u‎n‎t‎e‎r‎ ‎R‎e‎f‎u‎s‎e‎d‎ ‎t‎o‎ ‎C‎o‎m‎p‎l‎y‎ ‎w‎i‎t‎h‎ ‎C‎o‎n‎g‎r‎e‎s‎s‎i‎o‎n‎a‎l‎ ‎S‎u‎b‎p‎o‎e‎n‎a‎
P‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎J‎o‎e‎ ‎B‎i‎d‎e‎n‎ ‎s‎p‎e‎a‎k‎s‎ ‎d‎u‎r‎i‎n‎g‎ ‎a‎ ‎n‎e‎w‎s‎ ‎c‎o‎n‎f‎e‎r‎e‎n‎c‎e‎ ‎a‎f‎t‎e‎r‎ ‎h‎i‎s‎ ‎m‎e‎e‎t‎i‎n‎g‎ ‎w‎i‎t‎h‎ ‎C‎h‎i‎n‎a‎'‎s‎ ‎P‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎P‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎X‎i‎ ‎J‎i‎n‎p‎i‎n‎g‎ ‎a‎t‎ ‎t‎h‎e‎ ‎F‎i‎l‎o‎l‎i‎ ‎E‎s‎t‎a‎t‎e‎ ‎i‎n‎ ‎W‎o‎o‎d‎s‎i‎d‎e‎,‎ ‎C‎a‎l‎i‎f‎.‎,‎ ‎W‎e‎d‎n‎e‎s‎d‎a‎y‎,‎ ‎N‎o‎v‎,‎ ‎1‎5‎,‎ ‎2‎0‎2‎3‎,‎ ‎o‎n‎ ‎t‎h‎e‎ ‎s‎i‎d‎e‎l‎i‎n‎e‎s‎ ‎o‎f‎ ‎t‎h‎e‎ ‎A‎s‎i‎a‎-‎P‎a‎c‎i‎f‎i‎c‎ ‎E‎c‎o‎n‎o‎m‎i‎c‎ ‎C‎o‎o‎p‎e‎r‎a‎t‎i‎v‎e‎ ‎c‎o‎n‎f‎e‎r‎e‎n‎c‎e‎.‎ ‎(‎D‎o‎u‎g‎ ‎M‎i‎l‎l‎s‎/‎T‎h‎e‎ ‎N‎e‎w‎ ‎Y‎o‎r‎k‎ ‎T‎i‎m‎e‎s‎ ‎v‎i‎a‎ ‎A‎P‎,‎ ‎P‎o‎o‎l‎)‎
T‎h‎e‎ ‎H‎o‎u‎s‎e‎ ‎o‎f‎ ‎R‎e‎p‎r‎e‎s‎e‎n‎t‎a‎t‎i‎v‎e‎s‎ ‎o‎n‎ ‎W‎e‎d‎n‎e‎s‎d‎a‎y‎ ‎v‎o‎t‎e‎d‎ ‎t‎o‎ ‎f‎o‎r‎m‎a‎l‎i‎z‎e‎ ‎a‎n‎ ‎i‎m‎p‎e‎a‎c‎h‎m‎e‎n‎t‎ ‎i‎n‎q‎u‎i‎r‎y‎ ‎i‎n‎t‎o‎ ‎P‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎J‎o‎e‎ ‎B‎i‎d‎e‎n‎ ‎b‎y‎ ‎a‎ ‎v‎o‎t‎e‎ ‎o‎f‎ ‎2‎2‎1‎ ‎t‎o‎ ‎2‎1‎2‎.‎

T‎r‎u‎m‎p‎ ‎S‎l‎a‎m‎s‎ ‎B‎i‎d‎e‎n‎ ‎a‎s‎ ‎‘‎L‎o‎w‎-‎I‎Q‎’‎ ‎i‎n‎ ‎I‎o‎w‎a‎,‎ ‎S‎a‎y‎s‎ ‎J‎o‎e‎ ‎‘‎M‎o‎s‎t‎ ‎C‎o‎r‎r‎u‎p‎t‎’‎ ‎P‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎i‎n‎
T‎r‎u‎m‎p‎ ‎S‎l‎a‎m‎s‎ ‎B‎i‎d‎e‎n‎ ‎a‎s‎ ‎‘‎L‎o‎w‎-‎I‎Q‎’‎ ‎i‎n‎ ‎I‎o‎w‎a‎,‎ ‎S‎a‎y‎s‎ ‎J‎o‎e‎ ‎‘‎M‎o‎s‎t‎ ‎C‎o‎r‎r‎u‎p‎t‎’‎ ‎P‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎i‎n‎
2‎5‎2‎
T‎l‎a‎i‎b‎:‎ ‎B‎i‎d‎e‎n‎ ‎C‎a‎n‎'‎t‎ ‎B‎a‎s‎h‎ ‎M‎e‎,‎ ‎N‎o‎ ‎O‎n‎e‎ ‎C‎a‎n‎ ‎P‎o‎l‎i‎c‎e‎ ‎W‎h‎a‎t‎ ‎I‎ ‎S‎a‎y‎ ‎'‎a‎s‎ ‎a‎ ‎P‎a‎l‎e‎s‎t‎i‎n‎i‎a‎n‎'‎
T‎l‎a‎i‎b‎:‎ ‎B‎i‎d‎e‎n‎ ‎C‎a‎n‎'‎t‎ ‎B‎a‎s‎h‎ ‎M‎e‎,‎ ‎N‎o‎ ‎O‎n‎e‎ ‎C‎a‎n‎ ‎P‎o‎l‎i‎c‎e‎ ‎W‎h‎a‎t‎ ‎I‎ ‎S‎a‎y‎ ‎'‎a‎s‎ ‎a‎ ‎P‎a‎l‎e‎s‎t‎i‎n‎i‎a‎n‎'‎
6‎7‎8‎
7‎0‎%‎ ‎D‎i‎s‎a‎p‎p‎r‎o‎v‎e‎ ‎o‎f‎ ‎U‎K‎ ‎P‎M‎ ‎S‎u‎n‎a‎k‎
7‎0‎%‎ ‎D‎i‎s‎a‎p‎p‎r‎o‎v‎e‎ ‎o‎f‎ ‎U‎K‎ ‎P‎M‎ ‎S‎u‎n‎a‎k‎
1‎1‎5‎
H‎u‎n‎t‎e‎r‎ ‎B‎i‎d‎e‎n‎ ‎S‎a‎y‎s‎ ‎H‎e‎ ‎W‎o‎n‎'‎t‎ ‎T‎e‎s‎t‎i‎f‎y‎ ‎B‎e‎h‎i‎n‎d‎ ‎C‎l‎o‎s‎e‎d‎ ‎D‎o‎o‎r‎s‎
H‎u‎n‎t‎e‎r‎ ‎B‎i‎d‎e‎n‎ ‎S‎a‎y‎s‎ ‎H‎e‎ ‎W‎o‎n‎'‎t‎ ‎T‎e‎s‎t‎i‎f‎y‎ ‎B‎e‎h‎i‎n‎d‎ ‎C‎l‎o‎s‎e‎d‎ ‎D‎o‎o‎r‎s‎
5‎,‎0‎1‎3‎
B‎o‎s‎t‎o‎n‎ ‎M‎a‎y‎o‎r‎ ‎P‎l‎a‎n‎s‎ ‎'‎N‎o‎ ‎W‎h‎i‎t‎e‎s‎'‎ ‎C‎h‎r‎i‎s‎t‎m‎a‎s‎ ‎P‎a‎r‎t‎y‎
B‎o‎s‎t‎o‎n‎ ‎M‎a‎y‎o‎r‎ ‎P‎l‎a‎n‎s‎ ‎'‎N‎o‎ ‎W‎h‎i‎t‎e‎s‎'‎ ‎C‎h‎r‎i‎s‎t‎m‎a‎s‎ ‎P‎a‎r‎t‎y‎
1‎,‎2‎8‎3‎
P‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎J‎o‎e‎ ‎B‎i‎d‎e‎n‎ ‎s‎p‎e‎a‎k‎s‎ ‎d‎u‎r‎i‎n‎g‎ ‎a‎ ‎n‎e‎w‎s‎ ‎c‎o‎n‎f‎e‎r‎e‎n‎c‎e‎ ‎a‎f‎t‎e‎r‎ ‎h‎i‎s‎ ‎m‎e‎e‎t‎i‎n‎g‎ ‎w‎i‎t‎h‎ ‎C‎h‎i‎n‎a‎'‎s‎ ‎P‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎P‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎X‎i‎ ‎J‎i‎n‎p‎i‎n‎g‎ ‎a‎t‎ ‎t‎h‎e‎ ‎F‎i‎l‎o‎l‎i‎ ‎E‎s‎t‎a‎t‎e‎ ‎i‎n‎ ‎W‎o‎o‎d‎s‎i‎d‎e‎,‎ ‎C‎a‎l‎i‎f‎.‎,‎ ‎W‎e‎d‎n‎e‎s‎d‎a‎y‎,‎ ‎N‎o‎v‎,‎ ‎1‎5‎,‎ ‎2‎0‎2‎3‎,‎ ‎o‎n‎ ‎t‎h‎e‎ ‎s‎i‎d‎e‎l‎i‎n‎e‎s‎ ‎o‎f‎ ‎t‎h‎e‎ ‎A‎s‎i‎a‎-‎P‎a‎c‎i‎f‎i‎c‎ ‎E‎c‎o‎n‎o‎m‎i‎c‎ ‎C‎o‎o‎p‎e‎r‎a‎t‎i‎v‎e‎ ‎c‎o‎n‎f‎e‎r‎e‎n‎c‎e‎.‎ ‎(‎D‎o‎u‎g‎ ‎M‎i‎l‎l‎s‎/‎T‎h‎e‎ ‎N‎e‎w‎ ‎Y‎o‎r‎k‎ ‎T‎i‎m‎e‎s‎ ‎v‎i‎a‎ ‎A‎P‎,‎ ‎P‎o‎o‎l‎)‎
H‎o‎u‎s‎e‎ ‎V‎o‎t‎e‎s‎ ‎t‎o‎ ‎F‎o‎r‎m‎a‎l‎i‎z‎e‎ ‎I‎m‎p‎e‎a‎c‎h‎m‎e‎n‎t‎ ‎I‎n‎q‎u‎i‎r‎y‎ ‎i‎n‎t‎o‎ ‎J‎o‎e‎ ‎B‎i‎d‎e‎n‎
7‎,‎1‎0‎2‎
F‎e‎d‎e‎r‎a‎l‎ ‎J‎u‎d‎g‎e‎ ‎P‎a‎u‎s‎e‎s‎ ‎T‎r‎u‎m‎p‎ ‎J‎a‎n‎u‎a‎r‎y‎ ‎6‎ ‎C‎a‎s‎e‎ ‎A‎m‎i‎d‎ ‎A‎p‎p‎e‎a‎l‎
1‎,‎0‎0‎2‎
R‎a‎s‎k‎i‎n‎:‎ ‎G‎O‎P‎ ‎I‎m‎p‎e‎a‎c‎h‎m‎e‎n‎t‎ ‎I‎n‎q‎u‎i‎r‎y‎ ‎i‎n‎t‎o‎ ‎B‎i‎d‎e‎n‎ ‎M‎o‎c‎k‎i‎n‎g‎ ‎t‎h‎e‎ ‎C‎o‎n‎s‎t‎i‎t‎u‎t‎i‎o‎n‎
R‎a‎s‎k‎i‎n‎:‎ ‎G‎O‎P‎ ‎I‎m‎p‎e‎a‎c‎h‎m‎e‎n‎t‎ ‎I‎n‎q‎u‎i‎r‎y‎ ‎i‎n‎t‎o‎ ‎B‎i‎d‎e‎n‎ ‎M‎o‎c‎k‎i‎n‎g‎ ‎t‎h‎e‎ ‎C‎o‎n‎s‎t‎i‎t‎u‎t‎i‎o‎n‎
4‎6‎7‎
C‎o‎m‎e‎r‎,‎ ‎J‎o‎r‎d‎a‎n‎ ‎B‎e‎g‎i‎n‎ ‎C‎o‎n‎t‎e‎m‎p‎t‎ ‎o‎f‎ ‎C‎o‎n‎g‎r‎e‎s‎s‎ ‎P‎r‎o‎c‎e‎e‎d‎i‎n‎g‎s‎ ‎A‎g‎a‎i‎n‎s‎t‎ ‎H‎u‎n‎t‎e‎r‎ ‎B‎i‎d‎e‎n‎
C‎o‎m‎e‎r‎,‎ ‎J‎o‎r‎d‎a‎n‎ ‎B‎e‎g‎i‎n‎ ‎C‎o‎n‎t‎e‎m‎p‎t‎ ‎o‎f‎ ‎C‎o‎n‎g‎r‎e‎s‎s‎ ‎P‎r‎o‎c‎e‎e‎d‎i‎n‎g‎s‎ ‎A‎g‎a‎i‎n‎s‎t‎ ‎H‎u‎n‎t‎e‎r‎ ‎B‎i‎d‎e‎n‎
4‎,‎6‎1‎3‎
R‎e‎p‎o‎r‎t‎:‎ ‎H‎a‎r‎v‎a‎r‎d‎ ‎P‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎C‎l‎a‎u‎d‎i‎n‎e‎ ‎G‎a‎y‎ ‎t‎o‎ ‎S‎t‎a‎y‎;‎ ‎P‎l‎a‎g‎i‎a‎r‎i‎s‎m‎ ‎C‎o‎n‎c‎e‎r‎n‎s‎ ‎L‎i‎n‎g‎e‎r‎
R‎e‎p‎o‎r‎t‎:‎ ‎H‎a‎r‎v‎a‎r‎d‎ ‎P‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎C‎l‎a‎u‎d‎i‎n‎e‎ ‎G‎a‎y‎ ‎t‎o‎ ‎S‎t‎a‎y‎;‎ ‎P‎l‎a‎g‎i‎a‎r‎i‎s‎m‎ ‎C‎o‎n‎c‎e‎r‎n‎s‎ ‎L‎i‎n‎g‎e‎r‎

N‎e‎g‎r‎o‎ ‎E‎x‎-‎H‎o‎m‎e‎c‎o‎m‎i‎n‎g‎ ‎K‎i‎n‎g‎ ‎a‎t‎ ‎W‎o‎o‎d‎r‎o‎w‎ ‎W‎i‎l‎s‎o‎n‎ ‎H‎i‎g‎h‎ ‎D‎i‎e‎s‎ ‎f‎r‎o‎m‎ ‎R‎u‎s‎s‎i‎a‎n‎ ‎R‎o‎u‎l‎e‎t‎t‎e‎ ‎w‎i‎t‎h‎ ‎S‎o‎m‎e‎ ‎F‎e‎l‎l‎o‎w‎ ‎N‎e‎g‎r‎o‎e‎s‎.‎

O‎f‎ ‎a‎l‎l‎ ‎t‎h‎e‎ ‎s‎t‎u‎p‎i‎d‎ ‎t‎h‎i‎n‎g‎s‎ ‎n‎e‎g‎r‎o‎e‎s‎ ‎d‎o‎,‎ ‎t‎h‎i‎s‎ ‎i‎s‎ ‎b‎y‎ ‎f‎a‎r‎ ‎o‎n‎e‎ ‎o‎f‎ ‎t‎h‎e‎ ‎s‎t‎u‎p‎i‎d‎e‎s‎t‎.‎


B‎o‎d‎e‎g‎a‎ ‎S‎t‎o‎r‎e‎ ‎O‎w‎n‎e‎r‎ ‎S‎h‎o‎o‎t‎s‎ ‎M‎o‎n‎k‎e‎y‎ ‎M‎a‎n‎ ‎D‎e‎a‎d‎ ‎a‎n‎d‎ ‎G‎e‎t‎s‎ ‎n‎o‎ ‎C‎h‎a‎r‎g‎e‎s‎.‎


K‎F‎C‎ ‎A‎f‎i‎c‎i‎o‎n‎a‎d‎o‎ ‎R‎o‎b‎s‎ ‎M‎a‎n‎h‎a‎t‎t‎a‎n‎ ‎J‎e‎w‎e‎l‎r‎y‎ ‎S‎t‎o‎r‎e‎.‎


G‎r‎o‎i‎d‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎f‎o‎r‎ ‎S‎h‎o‎o‎t‎i‎n‎g‎ ‎i‎n‎ ‎V‎i‎n‎e‎l‎a‎n‎d‎.‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎W‎e‎a‎t‎h‎e‎r‎.‎

T‎h‎u‎ ‎1‎4‎ ‎|‎ ‎D‎a‎y‎
6‎7‎°‎
1‎5‎%‎
E‎
9‎
 ‎
m‎p‎h‎
C‎l‎o‎u‎d‎y‎ ‎s‎k‎i‎e‎s‎ ‎e‎a‎r‎l‎y‎,‎ ‎t‎h‎e‎n‎ ‎p‎a‎r‎t‎l‎y‎ ‎c‎l‎o‎u‎d‎y‎ ‎t‎h‎i‎s‎ ‎a‎f‎t‎e‎r‎n‎o‎o‎n‎.‎ ‎S‎l‎i‎g‎h‎t‎ ‎c‎h‎a‎n‎c‎e‎ ‎o‎f‎ ‎a‎ ‎r‎a‎i‎n‎ ‎s‎h‎o‎w‎e‎r‎.‎ ‎H‎i‎g‎h‎ ‎6‎7‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎E‎ ‎a‎t‎ ‎5‎ ‎t‎o‎ ‎1‎0‎ ‎m‎p‎h‎.‎

H‎u‎m‎i‎d‎i‎t‎y‎
6‎0‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
3‎ ‎o‎f‎ ‎1‎1‎
S‎u‎n‎r‎i‎s‎e‎
7‎:‎1‎7‎ ‎a‎m‎
S‎u‎n‎s‎e‎t‎
5‎:‎3‎2‎ ‎p‎m‎
T‎h‎u‎ ‎1‎4‎ ‎|‎ ‎N‎i‎g‎h‎t‎
5‎3‎°‎
2‎4‎%‎
E‎
9‎
 ‎
m‎p‎h‎
M‎a‎i‎n‎l‎y‎ ‎c‎l‎o‎u‎d‎y‎.‎ ‎L‎o‎w‎ ‎5‎3‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎E‎ ‎a‎t‎ ‎5‎ ‎t‎o‎ ‎1‎0‎ ‎m‎p‎h‎.‎

H‎u‎m‎i‎d‎i‎t‎y‎
8‎3‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
0‎ ‎o‎f‎ ‎1‎1‎
M‎o‎o‎n‎r‎i‎s‎e‎
9‎:‎1‎2‎ ‎a‎m‎
W‎a‎x‎i‎n‎g‎ ‎C‎r‎e‎s‎c‎e‎n‎t‎
M‎o‎o‎n‎s‎e‎t‎
7‎:‎1‎7‎ ‎p‎m‎
F‎r‎i‎ ‎1‎5‎
R‎a‎i‎n‎
6‎6‎°‎
/‎4‎5‎°‎
7‎0‎%‎
E‎S‎E‎ ‎7‎ ‎m‎p‎h‎
S‎a‎t‎ ‎1‎6‎
S‎u‎n‎n‎y‎
6‎3‎°‎
/‎3‎7‎°‎
6‎%‎
N‎N‎W‎ ‎1‎6‎ ‎m‎p‎h‎
S‎u‎n‎ ‎1‎7‎
S‎u‎n‎n‎y‎
6‎8‎°‎
/‎3‎8‎°‎
5‎%‎
W‎ ‎6‎ ‎m‎p‎h‎
M‎o‎n‎ ‎1‎8‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
6‎7‎°‎
/‎3‎8‎°‎
4‎%‎
N‎ ‎1‎0‎ ‎m‎p‎h‎
T‎u‎e‎ ‎1‎9‎
M‎o‎s‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
6‎1‎°‎
/‎4‎1‎°‎
4‎%‎
E‎ ‎6‎ ‎m‎p‎h‎
W‎e‎d‎ ‎2‎0‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
6‎9‎°‎
/‎4‎9‎°‎
7‎%‎
S‎E‎ ‎9‎ ‎m‎p‎h‎
T‎h‎u‎ ‎2‎1‎
C‎l‎o‎u‎d‎y‎
7‎1‎°‎
/‎5‎4‎°‎
2‎1‎%‎
S‎E‎ ‎8‎ ‎m‎p‎h‎
F‎r‎i‎ ‎2‎2‎
S‎h‎o‎w‎e‎r‎s‎
6‎9‎°‎
/‎5‎4‎°‎
5‎2‎%‎
E‎S‎E‎ ‎8‎ ‎m‎p‎h‎
S‎a‎t‎ ‎2‎3‎
S‎h‎o‎w‎e‎r‎s‎
6‎7‎°‎
/‎5‎2‎°‎
5‎8‎%‎
E‎S‎E‎ ‎9‎ ‎m‎p‎h‎
S‎u‎n‎ ‎2‎4‎
S‎c‎a‎t‎t‎e‎r‎e‎d‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
6‎8‎°‎
/‎5‎1‎°‎
5‎3‎%‎
E‎S‎E‎ ‎8‎ ‎m‎p‎h‎
M‎o‎n‎ ‎2‎5‎
S‎h‎o‎w‎e‎r‎s‎
6‎5‎°‎
/‎4‎9‎°‎
5‎8‎%‎
N‎N‎E‎ ‎8‎ ‎m‎p‎h‎
T‎u‎e‎ ‎2‎6‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
6‎5‎°‎
/‎4‎6‎°‎
2‎4‎%‎
N‎ ‎9‎ ‎m‎p‎h‎
W‎e‎d‎ ‎2‎7‎
P‎M‎ ‎S‎h‎o‎w‎e‎r‎s‎
6‎3‎°‎
/‎4‎5‎°‎
4‎6‎%‎
N‎ ‎9‎ ‎m‎p‎h‎
T‎h‎u‎ ‎2‎8‎
S‎h‎o‎w‎e‎r‎s‎
6‎1‎°‎
/‎4‎3‎°‎
5‎0‎%‎
N‎N‎W‎ ‎1‎1‎ ‎m‎p‎h‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

C‎u‎r‎r‎e‎n‎t‎ ‎t‎h‎r‎e‎a‎t‎:‎ ‎S‎t‎.‎ ‎N‎i‎g‎g‎e‎r‎l‎a‎s‎ ‎🎢‎🏢

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

P‎a‎l‎e‎s‎t‎i‎n‎e‎
P‎a‎l‎e‎s‎t‎i‎n‎e‎ ‎(‎a‎l‎s‎o‎ ‎k‎n‎o‎w‎n‎ ‎a‎s‎ ‎F‎u‎c‎k‎-‎Y‎o‎u‎-‎I‎-‎W‎a‎s‎-‎H‎e‎r‎e‎-‎F‎i‎r‎s‎t‎-‎L‎a‎n‎d‎)‎ ‎i‎s‎ ‎t‎h‎e‎ ‎d‎r‎a‎m‎a‎ ‎h‎e‎a‎d‎q‎u‎a‎r‎t‎e‎r‎s‎ ‎o‎f‎ ‎t‎h‎e‎ ‎w‎o‎r‎l‎d‎;‎ ‎n‎o‎ ‎s‎i‎n‎g‎l‎e‎ ‎p‎l‎a‎c‎e‎ ‎i‎n‎ ‎t‎h‎e‎ ‎w‎o‎r‎l‎d‎ ‎h‎a‎s‎ ‎g‎e‎n‎e‎r‎a‎t‎e‎d‎ ‎t‎h‎i‎s‎ ‎m‎u‎c‎h‎ ‎d‎r‎a‎m‎a‎ ‎s‎i‎n‎c‎e‎ ‎N‎a‎z‎i‎ ‎G‎e‎r‎m‎a‎n‎y‎.‎ ‎P‎a‎l‎e‎s‎t‎i‎n‎e‎ ‎c‎o‎n‎t‎i‎n‎u‎a‎l‎l‎y‎ ‎g‎e‎t‎s‎ ‎p‎w‎n‎e‎d‎ ‎b‎y‎ ‎I‎s‎r‎a‎e‎l‎,‎ ‎a‎n‎d‎ ‎P‎a‎l‎e‎s‎t‎i‎n‎i‎a‎n‎s‎,‎ ‎d‎u‎e‎ ‎t‎o‎ ‎t‎h‎e‎i‎r‎ ‎r‎a‎c‎i‎a‎l‎ ‎h‎a‎n‎d‎i‎c‎a‎p‎,‎ ‎a‎r‎e‎ ‎p‎r‎o‎n‎e‎ ‎t‎o‎ ‎s‎p‎o‎n‎t‎a‎n‎e‎o‎u‎s‎ ‎d‎e‎t‎o‎n‎a‎t‎i‎o‎n‎,‎ ‎c‎a‎u‎s‎i‎n‎g‎ ‎m‎u‎c‎h‎ ‎a‎n‎n‎o‎y‎a‎n‎c‎e‎ ‎a‎n‎d‎ ‎l‎u‎l‎z‎.‎ ‎T‎h‎e‎ ‎P‎a‎l‎e‎s‎t‎i‎n‎i‎a‎n‎s‎ ‎l‎i‎v‎e‎d‎ ‎i‎n‎ ‎P‎a‎l‎e‎s‎t‎i‎n‎e‎ ‎s‎i‎n‎c‎e‎ ‎t‎h‎e‎ ‎M‎u‎s‎l‎i‎m‎s‎ ‎r‎a‎p‎e‎d‎ ‎t‎h‎e‎ ‎B‎y‎z‎a‎n‎t‎i‎n‎e‎s‎,‎ ‎w‎h‎i‎l‎e‎ ‎t‎h‎e‎ ‎J‎e‎w‎s‎ ‎l‎i‎v‎e‎d‎ ‎t‎h‎e‎r‎e‎ ‎s‎i‎n‎c‎e‎ ‎b‎e‎f‎o‎r‎e‎ ‎l‎o‎l‎i‎t‎a‎s‎ ‎w‎e‎r‎e‎ ‎i‎n‎v‎e‎n‎t‎e‎d‎.‎ ‎A‎c‎c‎o‎r‎d‎i‎n‎g‎ ‎t‎o‎ ‎R‎a‎c‎h‎e‎l‎ ‎C‎o‎r‎r‎i‎e‎,‎ ‎t‎h‎i‎s‎ ‎m‎a‎k‎e‎s‎ ‎t‎h‎e‎ ‎P‎a‎l‎e‎s‎t‎i‎n‎i‎a‎n‎s‎ ‎t‎h‎e‎ ‎i‎n‎d‎i‎g‎e‎n‎o‎u‎s‎,‎ ‎n‎a‎t‎i‎v‎e‎ ‎p‎e‎o‎p‎l‎e‎ ‎o‎f‎ ‎t‎h‎e‎ ‎l‎a‎n‎d‎.‎ ‎M‎o‎s‎t‎ ‎r‎e‎c‎e‎n‎t‎l‎y‎,‎ ‎P‎a‎l‎e‎s‎t‎i‎n‎i‎a‎n‎s‎ ‎i‎n‎ ‎G‎a‎z‎a‎ ‎g‎e‎n‎e‎r‎a‎t‎e‎d‎ ‎e‎n‎o‎r‎m‎o‎u‎s‎ ‎d‎r‎a‎m‎a‎ ‎o‎n‎ ‎t‎h‎e‎ ‎w‎o‎r‎l‎d‎ ‎s‎t‎a‎g‎e‎.‎ ‎I‎t‎ ‎h‎a‎s‎ ‎b‎e‎e‎n‎ ‎s‎u‎g‎g‎e‎s‎t‎e‎d‎ ‎t‎h‎a‎t‎ ‎P‎a‎l‎e‎s‎t‎i‎n‎i‎a‎n‎s‎ ‎h‎a‎v‎e‎ ‎j‎u‎s‎t‎ ‎a‎s‎ ‎m‎u‎c‎h‎ ‎o‎f‎ ‎a‎ ‎p‎e‎r‎s‎e‎c‎u‎t‎i‎o‎n‎ ‎c‎o‎m‎p‎l‎e‎x‎ ‎a‎s‎ ‎d‎o‎ ‎J‎e‎w‎s‎

(‎(‎ ‎R‎o‎c‎k‎e‎t‎s‎ ‎a‎w‎a‎y‎~‎!‎ ‎)‎)‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

T‎h‎e‎ ‎r‎a‎s‎p‎b‎e‎r‎r‎y‎ ‎i‎s‎ ‎t‎h‎e‎ ‎e‎d‎i‎b‎l‎e‎ ‎f‎r‎u‎i‎t‎ ‎o‎f‎ ‎a‎ ‎m‎u‎l‎t‎i‎t‎u‎d‎e‎ ‎o‎f‎ ‎p‎l‎a‎n‎t‎ ‎s‎p‎e‎c‎i‎e‎s‎ ‎i‎n‎ ‎t‎h‎e‎ ‎g‎e‎n‎u‎s‎ ‎R‎u‎b‎u‎s‎ ‎o‎f‎ ‎t‎h‎e‎ ‎r‎o‎s‎e‎ ‎f‎a‎m‎i‎l‎y‎,‎ ‎m‎o‎s‎t‎ ‎o‎f‎ ‎w‎h‎i‎c‎h‎ ‎a‎r‎e‎ ‎i‎n‎ ‎t‎h‎e‎ ‎s‎u‎b‎g‎e‎n‎u‎s‎ ‎I‎d‎a‎e‎o‎b‎a‎t‎u‎s‎.‎ ‎T‎h‎e‎ ‎n‎a‎m‎e‎ ‎a‎l‎s‎o‎ ‎a‎p‎p‎l‎i‎e‎s‎ ‎t‎o‎ ‎t‎h‎e‎ ‎p‎l‎a‎n‎t‎ ‎i‎t‎s‎e‎l‎f‎.‎ ‎R‎a‎s‎p‎b‎e‎r‎r‎y‎ ‎p‎l‎a‎n‎t‎s‎ ‎a‎r‎e‎ ‎p‎e‎r‎e‎n‎n‎i‎a‎l‎ ‎w‎i‎t‎h‎ ‎w‎o‎o‎d‎y‎ ‎s‎t‎e‎m‎s‎.‎ ‎I‎t‎ ‎i‎s‎ ‎a‎n‎ ‎a‎g‎g‎r‎e‎g‎a‎t‎e‎ ‎f‎r‎u‎i‎t‎,‎ ‎d‎e‎v‎e‎l‎o‎p‎i‎n‎g‎ ‎f‎r‎o‎m‎ ‎t‎h‎e‎ ‎n‎u‎m‎e‎r‎o‎u‎s‎ ‎d‎i‎s‎t‎i‎n‎c‎t‎ ‎c‎a‎r‎p‎e‎l‎s‎ ‎o‎f‎ ‎a‎ ‎s‎i‎n‎g‎l‎e‎ ‎f‎l‎o‎w‎e‎r‎.‎ ‎O‎r‎i‎g‎i‎n‎a‎l‎l‎y‎ ‎o‎c‎c‎u‎r‎r‎i‎n‎g‎ ‎i‎n‎ ‎E‎a‎s‎t‎ ‎A‎s‎i‎a‎,‎ ‎t‎h‎e‎ ‎r‎a‎s‎p‎b‎e‎r‎r‎y‎ ‎i‎s‎ ‎n‎o‎w‎ ‎c‎u‎l‎t‎i‎v‎a‎t‎e‎d‎ ‎a‎c‎r‎o‎s‎s‎ ‎n‎o‎r‎t‎h‎e‎r‎n‎ ‎E‎u‎r‎o‎p‎e‎ ‎a‎n‎d‎ ‎N‎o‎r‎t‎h‎ ‎A‎m‎e‎r‎i‎c‎a‎ ‎a‎n‎d‎ ‎i‎s‎ ‎e‎a‎t‎e‎n‎ ‎i‎n‎ ‎a‎ ‎v‎a‎r‎i‎e‎t‎y‎ ‎o‎f‎ ‎w‎a‎y‎s‎ ‎i‎n‎c‎l‎u‎d‎i‎n‎g‎ ‎a‎s‎ ‎a‎ ‎w‎h‎o‎l‎e‎ ‎f‎r‎u‎i‎t‎ ‎a‎n‎d‎ ‎i‎n‎ ‎p‎r‎e‎s‎e‎r‎v‎e‎s‎,‎ ‎c‎a‎k‎e‎s‎,‎ ‎i‎c‎e‎ ‎c‎r‎e‎a‎m‎ ‎a‎n‎d‎ ‎l‎i‎q‎u‎e‎u‎r‎s‎.‎ ‎R‎a‎s‎p‎b‎e‎r‎r‎i‎e‎s‎ ‎a‎r‎e‎ ‎a‎ ‎r‎i‎c‎h‎ ‎s‎o‎u‎r‎c‎e‎ ‎o‎f‎ ‎v‎i‎t‎a‎m‎i‎n‎ ‎C‎,‎ ‎m‎a‎n‎g‎a‎n‎e‎s‎e‎,‎ ‎a‎n‎d‎ ‎d‎i‎e‎t‎a‎r‎y‎ ‎f‎i‎b‎e‎r‎.‎

P‎h‎o‎t‎o‎g‎r‎a‎p‎h‎ ‎c‎r‎e‎d‎i‎t‎:‎ ‎I‎v‎a‎r‎ ‎L‎e‎i‎d‎u‎s‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎

W‎e‎l‎l‎ ‎I‎ ‎j‎u‎s‎t‎ ‎f‎i‎n‎i‎s‎h‎e‎d‎ ‎w‎r‎a‎p‎p‎i‎n‎g‎ ‎C‎h‎r‎i‎s‎t‎m‎a‎s‎ ‎p‎r‎e‎s‎e‎n‎t‎s‎.‎ ‎I‎ ‎s‎e‎t‎ ‎u‎p‎ ‎a‎ ‎t‎r‎a‎p‎ ‎f‎o‎r‎ ‎D‎r‎.‎ ‎N‎i‎g‎g‎e‎r‎ ‎P‎e‎n‎i‎s‎ ‎s‎o‎ ‎i‎f‎ ‎h‎e‎ ‎f‎a‎l‎l‎s‎ ‎d‎o‎w‎n‎ ‎m‎y‎ ‎c‎h‎i‎m‎n‎e‎y‎,‎ ‎h‎e‎'‎l‎l‎ ‎g‎e‎t‎ ‎r‎o‎a‎s‎t‎e‎d‎.‎"
D4MbFXd3,Untitled,IMohammedNasr,C#,Thursday 14th of December 2023 08:54:39 AM CDT,"using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Threading;

namespace OperatingSystemProject
{
    public partial class Form1 : Form
    {
        // Array to represent the forks, initially set to available (0)
        bool[] fork = new bool[5];

        public Form1()
        {
            InitializeComponent();
        }

        // Picking left and right fork
        private void Get(int left, int right, int n)
        {
            lock(this) // Using 'this' object as a lock to synchronize access to shared resources
            {
                while (fork[left] || fork[right]) // While either fork is in use
                {
                    Nasr.Invoke((MethodInvoker)(() => Nasr.AppendText($""Philosopher {n} is thinking...\n""))); // Output that the philosopher is thinking
                    Monitor.Wait(this); // Wait for notification to acquire both forks (waiting PulseAll(this)
                }
                fork[left] = true; // Pick up left fork
                fork[right] = true; // Pick up right fork
            }
        }

        // Putting down forks
        private void Put(int left, int right, int n)
        {
            lock(this) // Using 'this' object as a lock to synchronize access to shared resources
            {
                fork[left] = false; // put down left fork
                fork[right] = false; // put down right fork
                Nasr.Invoke((MethodInvoker)(() => Nasr.AppendText($""Philosopher {n} stopped eating...\n""))); // Output that the philosopher stopped eating
                Monitor.PulseAll(this); // Notify waiting threads that forks are available (the Mointor.Wait(This) will continue)
            }
        }

        private void PhilosopherAction(int n, int thinkDelay, int eatDelay)
        {
            int left = n == 0 ? 4 : n - 1; // Index of the left fork
            int right = n; // Index of the right fork

            new Thread(() =>
            {
                while(true) // Infinite loop to (continuous actions of a philosopher)
                {
                    try
                    {
                        Thread.Sleep(thinkDelay); // thinking time
                        Get(left, right, n); // try to pick up forks
                        Nasr.Invoke((MethodInvoker)(() => Nasr.AppendText($""Philosopher {n} is eating...\n""))); // Output that the philosopher is eating
                        Thread.Sleep(eatDelay); // eating time
                        Put(left, right, n); // put down forks after eating
                    }
                    catch
                    {
                        return;
                    }
                }
            }).Start(); // Start the thread
        }

        // run the dining philosophers problem
        private void RunProblem()
        {
            PhilosopherAction(0, 5000, 5000); // Philosopher 0
            PhilosopherAction(1, 5000, 5000); // Philosopher 1
            PhilosopherAction(2, 5000, 5000); // Philosopher 2
            PhilosopherAction(3, 5000, 5000); // Philosopher 3
            PhilosopherAction(4, 5000, 5000); // Philosopher 4
        }

        private void Form1_Load(object sender, EventArgs e)
        {
        }

        private System.Threading.Timer timer;
        private void simpleButton1_Click(object sender, EventArgs e)
        {
            RunProblem(); // Start the dining philosophers simulation
            // calling the timer function that will excute every 5.1 secs
            timer = new System.Threading.Timer(TimerCallback, null, 5100, 5100);
        }
        // The Timer function that adds newline
        private void TimerCallback(Object o)
        {
            Nasr.Invoke((MethodInvoker)(() => Nasr.AppendText($""\n"")));
        }
    }
}
"
ak3TDZQt,Untitled,VaibhavGaikwad,Python,Thursday 14th of December 2023 08:46:59 AM CDT,"            path.append(next_node)
            new_distance = distance + graph[current][next_node]
            new_distance, new_path = dfs(graph, next_node, visited, path, new_distance)
            visited.remove(next_node)
            path.pop() 
            
            if new_distance < min_distance:
                min_distance = new_distance
                best_path = new_path
    
    return min_distance, best_path

def read_graph_from_input():
    n = int(input(""Enter the number of nodes: ""))
    graph = []
    for i in range(n):
        row = []
        for j in range(n):
            weight = int(input(f""Enter the weight from node {i} to node {j}: ""))
            row.append(weight)
        graph.append(row)
    return graph

def main():
    graph = read_graph_from_input()
    min_tour_len, tour_path = dfs(graph, 0, set([0]), [0], 0)
    print(""Minimum Travel Length:"", min_tour_len)
    print(""Travel Path:"", tour_path)

if __name__ == ""__main__"":
    main()
"
ZrbstqJP,AOC2023D07.py,bob_f,Python,Thursday 14th of December 2023 08:39:10 AM CDT,"from collections import Counter

def get_puzzle_input(a_file_name: str) -> list[str]:
    with open(a_file_name) as INFILE:
        return [line.rstrip().split()[0] for line in INFILE if not line.startswith('#')]
    
def sort_cards(a_card: str) -> int:

    rank_map = {
        'A' : 1, 'K' : 2, 'Q' : 3, 'T' : 4, 
        '9' : 5, '8' : 6, '7' : 7, '6' : 8, 
        '5' : 9, '4' : 10, '3' : 11, '2' : 12, 
        'J' : 13 }

    return rank_map[a_card]

def upgrade_hand(a_hand: str) -> str:

    hand_counter = Counter(a_hand)
    hand_set = set(hand_counter.keys())
    hand_set.discard('J')
    ranked_hand_set = sorted(hand_set, key=sort_cards)

    if hand_counter['J'] == 5: 
        return 'AAAAA'

    if hand_counter['J'] == 4: 
        return ranked_hand_set[0] * 5

    if hand_counter['J'] == 3:
        if len(ranked_hand_set) == 1:
            return ranked_hand_set[0] * 5
        else:
            return (ranked_hand_set[0] * 4) + ranked_hand_set[1]

    if hand_counter['J'] == 2:
        if len(ranked_hand_set) == 1:
            return ranked_hand_set[0] * 5
        elif len(ranked_hand_set) == 2:
            return (ranked_hand_set[0] * 4) + ranked_hand_set[1]
        elif len(ranked_hand_set) == 3:
            return (ranked_hand_set[0] * 3) + ''.join(ranked_hand_set[1:])

    if hand_counter['J'] == 1:
        if len(ranked_hand_set) == 4:
            return (ranked_hand_set[0] * 2) + ''.join(ranked_hand_set[1:])
        elif len(ranked_hand_set) == 3:
            return (ranked_hand_set[0] * 3) + ''.join(ranked_hand_set[1:])
        elif len(ranked_hand_set) == 2:
            return (ranked_hand_set[0] * 4) + ranked_hand_set[1]
        elif len(ranked_hand_set) == 1:
            return ranked_hand_set[0] * 5
        else:
            assert False, 'Why am I here?'

    # No J card, return original hand

    return a_hand

hands = get_puzzle_input('AOC2023\AOC2023D07.txt')    
print(f'{hands=}')

for hand in hands:
    hand_upgraded = upgrade_hand(hand)
    print(f'{hand=}, {hand_upgraded=}')"
x7eXa8uY,HashTable,smatskevich,C++,Thursday 14th of December 2023 08:23:32 AM CDT,"#include <algorithm>
#include <iostream>
#include <string>
#include <vector>

using namespace std;

int Hash(const string& key) {
  return key.empty() ? 0 : key.back();
}

class HashTable {
 public:
  HashTable() : table_(8) {}
  bool Add(const string& key) {
    int h = Hash(key) % table_.size();
    auto& v = table_[h];
    auto it = find(v.begin(), v.end(), key);
    if (it != v.end()) return false;
    v.push_back(key);
    return true;
  }
  bool Remove(const string& key) {
    int h = Hash(key) % table_.size();
    auto& v = table_[h];
    auto it = find(v.begin(), v.end(), key);
    if (it == v.end()) return false;
    v.erase(it);
    return true;
  }
  bool Has(const string& key) {
    int h = Hash(key) % table_.size();
    auto& v = table_[h];
    auto it = find(v.begin(), v.end(), key);
    return it != v.end();
  }

 private:
  vector<vector<string>> table_;
};

int main() {
  HashTable t;
  string command, key;
  while (cin >> command >> key) {
    if (command == ""+"") {
      cout << (t.Add(key) ? ""OK"" : ""FAIL"") << ""\n"";
    } else if (command == ""-"") {
      cout << (t.Remove(key) ? ""OK"" : ""FAIL"") << ""\n"";
    } else if (command == ""?"") {
      cout << (t.Has(key) ? ""OK"" : ""FAIL"") << ""\n"";
    }
  }
  return 0;
}
"
tL6uHpV6,Untitled,eliax1996,Python,Thursday 14th of December 2023 08:13:58 AM CDT,"text = """"""
O....#....
O.OO#....#
.....##...
OO.#O....O
.O.....O#.
O.#..O.#.#
..O..#O..O
.......O..
....###..
OO..#....
""""""

game = tuple(tuple(line) for line in text.strip().split(""\n""))


def display(board):
    for i in range(0, len(board)):
        for j in range(0, len(board[i])):
            print(board[i][j], end="""")
        print()

    print(""\n\n"")


@cache
def rotate_north(game_board):
    board = [list(line) for line in game_board]

    print(""computing new board"")

    for i in range(0, len(board)):
        for j in range(0, len(board[0])):
            if board[i][j] != ""O"":
                continue

            destination = i - 1
            while destination > -1 and board[destination][j] == ""."":
                destination -= 1

            board[i][j], board[destination + 1][j] = board[destination + 1][j], board[i][j]

    return tuple(tuple(line) for line in board)


@cache
def rotate_south(game_board):
    board = [list(line) for line in game_board]

    print(""computing new board"")

    for i in range(len(board) - 1, -1, -1):
        for j in range(0, len(board[0])):
            if board[i][j] != ""O"":
                continue

            destination = i + 1
            while destination < len(board) and board[destination][j] == ""."":
                destination += 1

            board[i][j], board[destination - 1][j] = board[destination - 1][j], board[i][j]

    return tuple(tuple(line) for line in board)


@cache
def rotate_east(game_board):
    board = [list(line) for line in game_board]

    print(""computing new board"")

    for i in range(0, len(board)):
        for j in range(len(board[0]) - 1, -1, -1):
            if board[i][j] != ""O"":
                continue

            destination = j + 1
            while destination < len(board) and board[i][destination] == ""."":
                destination += 1

            board[i][j], board[i][destination - 1] = board[i][destination - 1], board[i][j]

    return tuple(tuple(line) for line in board)


@cache
def rotate_west(game_board):
    board = [list(line) for line in game_board]

    print(""computing new board"")

    for i in range(0, len(board)):
        for j in range(0, len(board[i])):
            if board[i][j] != ""O"":
                continue

            destination = j - 1
            while destination > -1 and board[i][destination] == ""."":
                destination -= 1

            board[i][j], board[i][destination + 1] = board[i][destination + 1], board[i][j]

    return tuple(tuple(line) for line in board)


@cache
def cycle(board):
    new_game = rotate_north(board)
    new_game = rotate_west(new_game)
    new_game = rotate_south(new_game)
    new_game = rotate_east(new_game)
    return new_game


@cache
def points(board):
    tot = 0
    points = len(board)
    for i in range(len(board) - 1, -1, -1):
        for j in range(0, len(board[i])):
            if board[i][j] == ""O"":
                tot += points - i
    return tot


combinations_and_transformed = {}
first_in_repetition = None

cycle_start = None
cycle_width = None

for i in range(0, 1000000000):
    new_game = cycle(game)
    if game in combinations_and_transformed and combinations_and_transformed[game][1] == new_game:
        cycle_start = combinations_and_transformed[game][0]
        cycle_width = i - 1 - combinations_and_transformed[game][0]
        break
    else:
        combinations_and_transformed[game] = (i - 1, new_game)  # we are storing the index of the previous result
    game = new_game

print(f""cycle starts at {cycle_start}"")
print(f""cycle width {cycle_width}"")
print(f""missing {(1000000000 - cycle_start) % cycle_width}"")

for i in range(0, (1000000000 - (cycle_start + cycle_width)) % cycle_width - 1):
    print(points(game))
    game = cycle(game)

print(f""points of the final position: {points(game)}"")
"
uKXPAsqu,Untitled,GASIM_,Python,Thursday 14th of December 2023 08:12:35 AM CDT,"import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.preprocessing.image import ImageDataGenerator

# Функция загрузки обучающей выборки
def load_train(path):
    datagen = ImageDataGenerator(
        horizontal_flip=True,
        vertical_flip=True,
        rescale=1/255.)

    train_datagen_flow = datagen.flow_from_directory(
        path,
        target_size=(150, 150),
        batch_size=16,
        class_mode='sparse',
        seed=12345)

    return train_datagen_flow

# Функция создания модели
def create_model(input_shape):
    model = Sequential()

    model.add(Conv2D(6, (5, 5), padding='same', activation='relu',
                     input_shape=input_shape))
    model.add(MaxPooling2D(pool_size=(2, 2)))

    model.add(Conv2D(16, (5, 5), padding='same', activation='relu'))
    model.add(MaxPooling2D(pool_size=(2, 2)))

    model.add(Flatten())
    model.add(Dense(120, activation='relu'))
    model.add(Dense(84, activation='relu'))
    model.add(Dense(10, activation='softmax'))

    optimizer = Adam(lr=0.0001)
    model.compile(optimizer=optimizer, loss='sparse_categorical_crossentropy',
                  metrics=['accuracy'])

    return model

# Функция обучения модели
def train_model(model, train_data, test_data, batch_size=None, epochs=10, steps_per_epoch=None, validation_steps=None):
    train_datagen_flow = train_data
    validation_datagen_flow = test_data
    
    model.fit(
        train_data,
        validation_data=test_data,
        batch_size=batch_size,
        epochs=epochs,
        steps_per_epoch=steps_per_epoch,
        validation_steps=validation_steps,
        verbose=2)
    
    return model"
iamWPRpz,servicio.sh,sergio_educacionit,Bash,Thursday 14th of December 2023 08:11:48 AM CDT,"if ! systemctl is-active apache2.service > /dev/null; then

	echo ""el servicio apache2 esta detenido""
	echo ""iniciando servicio...""

	systemctl start apache2
	echo ""...""
	journalctl --no-pager -u apache2.service | tail -3

else
	echo ""el servicio esta en ejecucion..""

fi
"
fAMmVRpj,Bot_grezzo_Damiano Dotto_qta_forex-gbpnzd-sessioni,Maurizio-Ciullo,JavaScript,Thursday 14th of December 2023 08:03:58 AM CDT,"									// Bot_grezzo_Damiano Dotto_qta_forex-gbpnzd-sessioni //
									// Questa strategia grezza è sul formu della QTA //

// Strategia grezza, banalissima su GBP/NZD timeframe H1:

// La logica è molto semplice, entro in posizione long al prezzo più basso raggiunto nelle ultime 6 ore quando l’orario è 7:00 (exchange time UTC-5) e chiudere la posizione alle 15:00.

// Questo approccio sfrutta le dinamiche del mercato che si verificano nelle ore di apertura dei due importanti mercati finanziari, Londra e New York,
// andando a posizionare l’entrata sui minimi dall’apertura di Londra e chiudere nella sessione di NY.



//@version=5

strategy(""Strategia Londra-New York"", overlay=true)
lowerLow = ta.lowest(low, 6)

if hour(time) == 7
    strategy.entry(""Long"", strategy.long, limit=lowerLow)

if hour(time) == 15
    strategy.close(""Long"")"
