id,title,username,language,date,content
vHfepQy3,data856,TestGuy1,JSON,Friday 1st of March 2024 06:00:05 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: 'b427a6ed07dfcee5ac56ae9cb2dd31a4d258d145a8d14ae80457810ce31b38e976a4bf21a73d7ed9e0477fafe0310fa554cd3a611c2b0bfc1aef296ed1a5d1de97c5099d4fcac73867e49859f562cb1c0910829ed7891e05dc93ba6c264c9df49c3c23ed68938ff3a1e6e50c6e7dbaf83d37c38281d5334d335df2223a3fc828',
  otherdata: [
    '74c5faa2661e82ae3b320f1d93a93099',
    '867ac9031112c16bc404f3f01091cd9f',
    '692d4cf2051afebecc5550e2b93f6429',
    '08e9f333115efaa035e5f7f1fc48aa36',
    'ccd9c0f2170590acd7009d8b732d13e7',
    'df73d1e4fb9737c5294ea3781d28ed62',
    '5063e6d0d1886f276fca9b41f5869584',
    '548f71cc45ff66afa4460432a9478c1b'
  ]
}"
cYvUfUas,sg,PIBogdanov,C,Friday 1st of March 2024 05:54:26 AM CDT,"#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>
#include <Windows.h>
#include <conio.h>

#pragma warning(disable : 4996)

#define MaxCharacters 100

#define MinGroupsCount 1
#define MaxGroupsCount 6

#define MinStudentsInTheGroupCount 2
#define MaxStudentsInTheGroupCount 30

#define MinSubjectsCount 2
#define MaxSubjectsCount 10

#define MinGrade 2.0f
#define MaxGrade 6.0f

/*
typedef struct
{
	char** subjectNames;
	
	unsigned short subjectsCount;
} Subject;

typedef struct
{
	Subject* subjects;

	float** grades;

	char** studentNames;

	char** facultyNumbers;
} Student;

typedef struct
{
	Student* students;

	unsigned short* studentsInTheGroupsCount;

	char** groupNames;

	unsigned short groupsCount;
} Group;

typedef struct
{
	Group* groups;

	char** majorNames;

	unsigned short majorsCount;
} Major;

typedef struct
{
	Major* majors;

	char** facultyNames;

	unsigned short facultiesCount;
} Faculty;

typedef struct 
{
	Faculty* faculties;

	char** universityNames;

	unsigned short universitiesCount;
} University;
*/

typedef struct
{
	float** grades;

	char** studentNames;

	char** facultyNumbers;

	char** subjectNames;

	unsigned short studentsInTheGroupCount;

	unsigned short subjectsCount;
} Student;

void inputStudentsInTheGroupCount(Student*);

void initializeStudentsInTheGroupCount(Student*, unsigned short);

void inputSubjectsCount(Student*);

void initializeSubjectsCount(Student*, unsigned short);

void inputSubjectNames(Student*);

void initialiseSubjectNames(Student*, char[][MaxSubjectsCount]);

void freeSubjectNames(Student*);

void inputStudentNames(Student*);

void inputStudentName(Student*, char[][MaxCharacters]);

void initialiseStudentNames(Student*, char[][MaxSubjectsCount]);

void freeStudentNames(Student*);

void inputFacultyNumbers(Student*);

void inputFacultyNumber(Student*, char[][MaxCharacters]);

void initialiseFacultyNumbers(Student*, char[][MaxCharacters]);

void freeFacultyNumbers(Student*);

void inputGrades(Student*);

void inputGrade(Student*, float[][MaxSubjectsCount]);

bool isValidGrade(float);

void initialiseGrades(Student*, float[][MaxSubjectsCount]);

void freeGrades(Student*);

void inputStudentInformation(Student*);

void printStudentInformation(Student*);

void initialiseStructMembers(Student*);

void freeStructMembers(Student*);

void removeNewlineCharacterIfItExists(char*);

void pressTheEnterKeyToContinue();

void isCursorVisible(bool);

void clearTheInputBufferIfNeededAndTheScreen(bool, bool);

void mainMenu(Student*);

void displayMenu(char*[], unsigned short, unsigned short);

void menuControls(Student*, unsigned short*, unsigned short, bool*);

void searchForAStudent(Student*);

bool isStudentPresentInTheGroup(Student*, char[], unsigned short*);

void printInformationAboutTheStudent(Student*, unsigned short);

int main()
{
	isCursorVisible(false);

	Student students;

	initialiseStructMembers(&students);

	clearTheInputBufferIfNeededAndTheScreen(false, true);

	printStudentInformation(&students);

	pressTheEnterKeyToContinue();

	mainMenu(&students);

	return 0;
}

void inputStudentsInTheGroupCount(Student* students)
{
	unsigned short studentsInTheGroupCount;

	inputStudentsInTheGroupCount:
	printf(""How many students are in the group? [%hu - %hu]\nStudents in the group count: "", MinStudentsInTheGroupCount, MaxStudentsInTheGroupCount);
	scanf(""%hu"", &studentsInTheGroupCount);

	if ( (studentsInTheGroupCount < MinStudentsInTheGroupCount) || (studentsInTheGroupCount > MaxStudentsInTheGroupCount) )
	{
		printf(""\n\nInvalid input!\n\n"");

		goto inputStudentsInTheGroupCount;
	}

	initializeStudentsInTheGroupCount(students, studentsInTheGroupCount);
}

void initializeStudentsInTheGroupCount(Student* students, unsigned short studentsInTheGroupCount)
{
	students->studentsInTheGroupCount = studentsInTheGroupCount;
}

void inputSubjectsCount(Student* students)
{
	unsigned short subjectsCount;

	inputSubjectsCount:
	printf(""How many subjects do the students have? [%hu - %hu]\nStudents in the group count: "", MinSubjectsCount, MaxSubjectsCount);
	scanf(""%hu"", &subjectsCount);

	if ( (subjectsCount < MinSubjectsCount) || (subjectsCount > MaxSubjectsCount) )
	{
		printf(""\n\nInvalid input!\n\n"");

		goto inputSubjectsCount;
	}

	initializeSubjectsCount(students, subjectsCount);
}

void initializeSubjectsCount(Student* students, unsigned short subjectsCount)
{
	students->subjectsCount = subjectsCount;
}

void inputSubjectNames(Student* students)
{
	printf(""Input the names of the subjects:\n\n\n"");

	char subjectNames[MaxSubjectsCount][MaxCharacters] = { { '\0' } };

	for (unsigned short i = 0; i < students->subjectsCount; i++)
	{
		printf(""Subject %hu: "", i + 1);

		while (fgets(subjectNames[i], MaxCharacters, stdin) == NULL)
		{
			printf(""\n\nToo many inputted characters! The max value of characters is %hu. Input a new subject name.\n\nSubject %hu: "", MaxCharacters, i + 1);
		}

		removeNewlineCharacterIfItExists(subjectNames[i]);
	}

	initialiseSubjectNames(students, subjectNames);
}

void initialiseSubjectNames(Student* students, char subjectNames[][MaxCharacters])
{
	students->subjectNames = malloc(students->subjectsCount * sizeof(char*));

	for (size_t i = 0; i < students->subjectsCount; i++)
	{
		students->subjectNames[i] = strdup(subjectNames[i]);
	}
}

void freeSubjectNames(Student* students)
{
	for (size_t i = 0; i < students->subjectsCount; i++)
	{
		free(students->subjectNames[i]);
	}

	free(students->subjectNames);
}

void inputStudentNames(Student* students)
{
	printf(""Input the names of the students:\n\n\n"");

	char studentNames[MaxStudentsInTheGroupCount][MaxCharacters] = { { '\0' } };

	for (unsigned short i = 0; i < students->studentsInTheGroupCount; i++)
	{
		printf(""Student %hu: \n"", i + 1);

		printf(""Name: "");

		while (fgets(studentNames[i], MaxCharacters, stdin) == NULL)
		{
			printf(""\n\nToo many inputted characters! The max value of characters is %hu. Input a new student name.\n\nName: "", MaxCharacters);
		}

		removeNewlineCharacterIfItExists(studentNames[i]);

		printf(""\n\n"");
	}

	initialiseStudentNames(students, studentNames);
}

void inputStudentName(Student* students, char studentNames[][MaxCharacters])
{
	for (unsigned short i = 0; i < students->studentsInTheGroupCount; i++)
	{
		if (!strcmp(studentNames[i], ""\0""))
		{
			while (fgets(studentNames[i], MaxCharacters, stdin) == NULL)
			{
				printf(""\n\nToo many inputted characters! The max value of characters is %hu. Input a new student name.\n\nName: "", MaxCharacters);
			}

			removeNewlineCharacterIfItExists(studentNames[i]);

			return;
		}
	}
}

void initialiseStudentNames(Student* students, char studentNames[][MaxCharacters])
{
	students->studentNames = malloc(students->studentsInTheGroupCount * sizeof(char*));

	for (size_t i = 0; i < students->studentsInTheGroupCount; i++)
	{
		students->studentNames[i] = strdup(studentNames[i]);
	}
}

void freeStudentNames(Student* students)
{
	for (size_t i = 0; i < students->studentsInTheGroupCount; i++)
	{
		free(students->studentNames[i]);
	}

	free(students->studentNames);
}

void inputFacultyNumbers(Student* students)
{
	printf(""Input the faculty numbers of the students:\n\n\n"");

	char facultyNumbers[MaxStudentsInTheGroupCount][MaxCharacters] = { { '\0' } };

	for (unsigned short i = 0; i < students->studentsInTheGroupCount; i++)
	{
		printf(""Student %hu: \n"", i + 1);

		printf(""Name: %s\n"", students->studentNames[i]);

		printf(""Faculty number: "");

		while (fgets(facultyNumbers[i], MaxCharacters, stdin) == NULL)
		{
			printf(""\n\nToo many inputted characters! The max value of characters is %hu. Input a faculty number.\n\nFaculty number: "", MaxCharacters);
		}

		removeNewlineCharacterIfItExists(facultyNumbers[i]);

		printf(""\n\n"");
	}

	initialiseFacultyNumbers(students, facultyNumbers);
}

void inputFacultyNumber(Student* students, char facultyNumbers[][MaxCharacters])
{
	for (unsigned short i = 0; i < students->studentsInTheGroupCount; i++)
	{
		if (!strcmp(facultyNumbers[i], ""\0""))
		{
			while (fgets(facultyNumbers[i], MaxCharacters, stdin) == NULL)
			{
				printf(""\n\nToo many inputted characters! The max value of characters is %hu. Input a faculty number.\n\nFaculty number: "", MaxCharacters);
			}

			removeNewlineCharacterIfItExists(facultyNumbers[i]);

			return;
		}
	}
}

void initialiseFacultyNumbers(Student* students, char facultyNumbers[][MaxCharacters])
{
	students->facultyNumbers = malloc(students->studentsInTheGroupCount * sizeof(char*));

	for (size_t i = 0; i < students->studentsInTheGroupCount; i++)
	{
		students->facultyNumbers[i] = strdup(facultyNumbers[i]);
	}
}

void freeFacultyNumbers(Student* students)
{
	for (size_t i = 0; i < students->studentsInTheGroupCount; i++)
	{
		free(students->facultyNumbers[i]);
	}

	free(students->facultyNumbers);
}

void inputGrades(Student* students)
{
	printf(""Input the students' grades on each subject:\n\n\n"");

	float grades[MaxStudentsInTheGroupCount][MaxSubjectsCount];

	for (unsigned short i = 0; i < students->studentsInTheGroupCount; i++)
	{
		printf(""Student %hu: \n"", i + 1);

		printf(""Name: %s\n"", students->studentNames[i]);

		printf(""Faculty number: %s\n"", students->facultyNumbers[i]);

		for (size_t j = 0; j < students->subjectsCount; j++)
		{
			inputAGrade:
			printf(""%s: "", students->subjectNames[j]);
			scanf(""%f"", &grades[i][j]);

			if (!isValidGrade(grades[i][j]))
			{
				printf(""\n\nIvalid grade! Input a new one.\n\n"");

				goto inputAGrade;
			}
		}

		printf(""\n\n"");
	}

	initialiseGrades(students, grades);
}

void inputGrade(Student* students, float grades[][MaxSubjectsCount])
{
	for (unsigned short i = 0; i < students->studentsInTheGroupCount; i++)
	{
		for (size_t j = 0; j < students->subjectsCount; j++)
		{
			if (grades[i][j] == 0.0f)
			{
				inputAGrade:
				scanf(""%f"", &grades[i][j]);

				if (!isValidGrade(grades[i][j]))
				{
					printf(""\n\nIvalid grade! Input a new one.\n\n%s: "", students->subjectNames[j]);

					goto inputAGrade;
				}

				return;
			}
		}
	}
}

bool isValidGrade(float grade)
{
	return (grade >= MinGrade) && (grade <= MaxGrade);
}

void initialiseGrades(Student* students, float grades[][MaxSubjectsCount])
{
	students->grades = malloc(students->studentsInTheGroupCount * sizeof(float*));

	for (size_t i = 0; i < students->studentsInTheGroupCount; i++)
	{
		students->grades[i] = malloc(students->subjectsCount * sizeof(float));

		memcpy(students->grades[i], grades[i], students->subjectsCount * sizeof(float));
	}
}

void freeGrades(Student* students)
{
	for (size_t i = 0; i < students->studentsInTheGroupCount; i++)
	{
		free(students->grades[i]);
	}

	free(students->grades);
}

void inputStudentInformation(Student* students)
{
	printf(""Input information for each student in the group:\n\n\n"");

	char studentNames[MaxStudentsInTheGroupCount][MaxCharacters] = { { '\0' } };

	char facultyNumbers[MaxStudentsInTheGroupCount][MaxCharacters] = { { '\0' } };

	float grades[MaxStudentsInTheGroupCount][MaxSubjectsCount] = { { 0.0f } };

	for (size_t i = 0; i < students->studentsInTheGroupCount; i++)
	{
		printf(""Student %llu:\n\n"", i + 1);

		printf(""Name: "");
		inputStudentName(students, studentNames);

		printf(""Faculty number: "");
		inputFacultyNumber(students, facultyNumbers);

		for (size_t j = 0; j < students->subjectsCount; j++)
		{
			printf(""%s: "", students->subjectNames[j]);
			inputGrade(students, grades);
		}

		printf(""\n\n"");

		clearTheInputBufferIfNeededAndTheScreen(true, false);
	}

	initialiseStudentNames(students, studentNames);

	initialiseFacultyNumbers(students, facultyNumbers);

	initialiseGrades(students, grades);
}

void printStudentInformation(Student* students)
{
	clearTheInputBufferIfNeededAndTheScreen(false, true);

	printf(""Group information:\n\n\n"");

	for (size_t i = 0; i < students->studentsInTheGroupCount; i++)
	{
		printf(""Student %llu:\n\n"", i + 1);

		printf(""Name: %s\n"", students->studentNames[i]);

		printf(""Faculty number: %s\n"", students->facultyNumbers[i]);

		for (size_t j = 0; j < students->subjectsCount; j++)
		{
			printf(""%s: %.2f\n"", students->subjectNames[j], students->grades[i][j]);
		}

		printf(""\n\n"");
	}
}

void initialiseStructMembers(Student* students)
{
	inputStudentsInTheGroupCount(students);

	clearTheInputBufferIfNeededAndTheScreen(true, true);

	inputSubjectsCount(students);
	
	clearTheInputBufferIfNeededAndTheScreen(true, true);

	inputSubjectNames(students);

	clearTheInputBufferIfNeededAndTheScreen(false, true);

	if (false)
	{
		inputStudentNames(students);

		clearTheInputBufferIfNeededAndTheScreen(false, true);

		inputFacultyNumbers(students);

		clearTheInputBufferIfNeededAndTheScreen(false, true);

		inputGrades(students);
	}
	
	else
	{
		inputStudentInformation(students);
	}
}

void freeStructMembers(Student* students)
{
	freeSubjectNames(students);
	
	freeStudentNames(students);

	freeFacultyNumbers(students);

	freeGrades(students);
}

void removeNewlineCharacterIfItExists(char* string)
{
	size_t stringLength = strlen(string);

	if ( (stringLength > 0) && (string[stringLength - 1] == '\n') )
	{
		string[stringLength - 1] = '\0';
	}
}

// Function, which waits the user to press the ""ENTER / RETURN"" key

void pressTheEnterKeyToContinue()
{
	printf(""\n\n\nPress \""ENTER\"" to go back to the Main Menu"");

	while (_getch() != 13); // ""\r"" - The ""ENTER / RETURN"" key
}

// Function, which decides to either turn on or turn off the cursor by giving a bool value either ""true / 1"" or ""false / 0""

void isCursorVisible(bool isVisible)
{
	HANDLE consoleHandle = GetStdHandle(STD_OUTPUT_HANDLE);

	CONSOLE_CURSOR_INFO cursorInfo;
	GetConsoleCursorInfo(consoleHandle, &cursorInfo);

	cursorInfo.bVisible = isVisible;
	SetConsoleCursorInfo(consoleHandle, &cursorInfo);
}

// Function, which clears the input buffer from the newline character and clears the screen

void clearTheInputBufferIfNeededAndTheScreen(bool clearBuffer, bool clearScreen)
{
	if (clearBuffer) 
	{
		char character = getchar();

		while ( (character != '\n') && (character != EOF) );
	}

	if (clearScreen)
	{
		system(""cls"");
	}
}

void mainMenu(Student* students)
{
	char* options[] = { { ""1. Search for a student"" }, { ""2. Option 2"" }, { ""3. Option 3"" }, { ""4. Exit"" } };

	unsigned short totalOptions = sizeof(options) / sizeof(options[0]);

	unsigned short selectedOption = 1;

	bool isExit = false;

	while (!isExit)
	{
		system(""cls"");

		displayMenu(options, selectedOption, totalOptions);

		menuControls(students, &selectedOption, totalOptions, &isExit);
	}
}

void displayMenu(char* options[], unsigned short selectedOption, unsigned short totalOptions)
{
	printf(""          Menu:\n\n"");

	for (size_t i = 0; i < totalOptions; i++)
	{
		printf(""%s%s\n"", (selectedOption == (i + 1)) ? ""--> "" : ""    "", options[i]);
	}
}

void menuControls(Student* students, unsigned short* selectedOption, unsigned short totalOptions, bool* isExit)
{
	char key = getch();

	switch (key)
	{
		case 'W': case 'w': case 72: // Up arrow key
		*selectedOption = (*selectedOption > 1) ? *selectedOption - 1 : totalOptions; break;

		case 'S': case 's': case 80: // Down arrow key
		*selectedOption = (*selectedOption < totalOptions) ? *selectedOption + 1 : 1; break;

		case 13: // Enter key
		switch (*selectedOption)
		{
			case 1: searchForAStudent(students); pressTheEnterKeyToContinue(); break;

			case 2: break;

			case 3: break;

			case 4: freeStructMembers(students); *isExit = true;
		}

		break;
	}
}

void searchForAStudent(Student* students)
{
	clearTheInputBufferIfNeededAndTheScreen(false, true);

	char studentName[MaxCharacters];

	unsigned short indexOfTheStudent = 0;

	inputAStudentName:

	printf(""Input a name of a student to search: "");

	while (fgets(studentName, MaxCharacters, stdin) == NULL)
	{
		printf(""\n\nToo many inputted characters! The max value of characters is %hu. Input a new name.\n\nInput a name of a student to search: "", MaxCharacters);
	}

	removeNewlineCharacterIfItExists(studentName);

	clearTheInputBufferIfNeededAndTheScreen(false, true);

	if (!isStudentPresentInTheGroup(students, studentName, &indexOfTheStudent))
	{
		printf(""There's no student with this name in this group.\n\n\n"");

		goto inputAStudentName;
	}

	printf(""Student with this name has been found.\n\n\n"");

	printInformationAboutTheStudent(students, indexOfTheStudent);
}

bool isStudentPresentInTheGroup(Student* students, char studentName[], unsigned short* indexOfTheStudent)
{
	for (size_t i = 0; i < students->studentsInTheGroupCount; i++)
	{
		if (!strcmp(students->studentNames[i], studentName))
		{
			*indexOfTheStudent = i;

			return true;
		}
	}

	return false;
}

void printInformationAboutTheStudent(Student* students, unsigned short indexOfTheStudent)
{
	printf(""Student %llu:\n\n"", indexOfTheStudent + 1);

	printf(""Name: %s\n"", students->studentNames[indexOfTheStudent]);

	printf(""Faculty number: %s\n"", students->facultyNumbers[indexOfTheStudent]);

	for (size_t j = 0; j < students->subjectsCount; j++)
	{
		printf(""%s: %.2f\n"", students->subjectNames[j], students->grades[indexOfTheStudent][j]);
	}
}"
06ZtXKx8,Add ellipsis [...] on the post archive,fahimmurshed,PHP,Friday 1st of March 2024 05:53:07 AM CDT,"/**
 * Theme's overridden of excerpt function
 */
function astra_the_excerpt() {

	$excerpt_type = apply_filters( 'astra_excerpt_type', astra_get_option( 'blog-post-content' ) );

	do_action( 'astra_the_excerpt_before', $excerpt_type );
	?>
		<div class=""ast-excerpt-container ast-blog-single-element"">
			<?php
			if ( 'full-content' === $excerpt_type ) {
				the_content();
			} else {
				the_excerpt();
			}
			?>
		</div>
	<?php

	do_action( 'astra_the_excerpt_after', $excerpt_type );
}

/**
 * Filter to change the excerpt more string to dots ...
 */
add_filter( 'excerpt_more', 'extended_excerpt_more' );
function extended_excerpt_more( $more ) {
	return '[...]';
}"
NsVzGpnn,G2A.com Free Gift Card Guide Mar 2024,ounnuo,GetText,Friday 1st of March 2024 05:47:32 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_501708.pdf

Working as of:
01 March 2024"
hZCyLaFG,tool,nq1s788,Python,Friday 1st of March 2024 05:31:31 AM CDT,"from random import choices


class Tool:
    rarity = 'Обычная'
    durability = 100
    ratio = 2
    hardness = [('Обычная', 2), ('Редкая', 1.25), ('Легендарная', 0.65)]
    probability = [50, 35, 15]

    def get_new_tool(self):
        self.rarity, self.ratio = choices(self.hardness, weights=self.probability)
        self.durability = 100


class Pickaxe(Tool):
    metal_hardness = 25

    def mine_metal(self):
        self.durability -= self.ratio * self.metal_hardness


class Shovel(Tool):
    dirt_hardness = 15

    def clear_dirt(self):
        self.durability -= self.ratio * self.dirt_hardness


def start():
    score = 0
    metal = 0
    dirt = 0
    pickaxe = Pickaxe()
    shovel = Shovel()
    print('Вы начинаете игру')
    print('Инструменты:')
    print('- ""' + pickaxe.rarity + '"" кирка', str(pickaxe.durability) + '/100')
    print('- ""' + pickaxe.rarity + '"" лопата', str(pickaxe.durability) + '/100')
    
"
5RZWeeE1,Soccer Prediction Betting Tips 01032024,livebetpro,PHP,Friday 1st of March 2024 05:22:49 AM CDT,https://www.livebetpro.com/soccer-prediction-betting-tips-01032024/
sYdmZmmz,Untitled,35657,C++,Friday 1st of March 2024 05:19:08 AM CDT,"#include <iostream>
using namespace std;
struct date_time {
	int day;
	int month;
	int year;
	int hour;
	int minutes;
	int seconds;
};
struct cases {
	char title[100];
	char description[100];
	date_time dt;
	int priority;
};
struct list_cases {
	cases store[100];//хранилище
	int cases_number = 0;//текущее количество элементов хранилища
};
//Добавить задание(+)
void add_cases(list_cases& some_list, const char* title, const char* description, const date_time dt, const int priority) {
	if (some_list.cases_number == 100) {
		cout << ""Задание не может быть добавлено"" << endl;
		return;
	}
	strcpy(some_list.store[some_list.cases_number].title, title);
	strcpy(some_list.store[some_list.cases_number].description, description);
	some_list.store[some_list.cases_number].dt = dt;
	some_list.store[some_list.cases_number].priority = priority;
	some_list.cases_number++;
}
//Удалить задание(+)
void del_case(list_cases& some_list, const char* title) {
	for (int i = 0; i < some_list.cases_number; i++) {
		if (!strcmp(some_list.store[i].title, title)) {
			for (int j = i; j < some_list.cases_number - 1; j++) {
				some_list.store[j] = some_list.store[j + 1];
			}
			some_list.cases_number--;
		}
	}
}

//Найти задание по названию(+)
void find_case_by_title(struct list_cases& some_list, const char* title) {
	for (int i = 0; i < some_list.cases_number; i++) {
		if (!strcmp(some_list.store[i].title, title)) {
			cout << some_list.store[i].title << "", описание - "" << some_list.store[i].description << "", дата - "" << some_list.store[i].dt.day << '.' << some_list.store[i].dt.month << '.' << some_list.store[i].dt.year << "" "" << "", время - "" << some_list.store[i].dt.hour << "":"" << some_list.store[i].dt.minutes << "":"" << some_list.store[i].dt.seconds << "", важность - "" << some_list.store[i].priority << endl;
		}
	}
	cout << endl;
}
//по важности(+)
void find_case_by_priority(struct list_cases& some_list, const int priority) {
	int max = 0, num;
	for (int i = 0; i < some_list.cases_number; i++) {
		if (some_list.store[i].priority == priority) {
			if (some_list.store[i].priority > max) {
				max = some_list.store[i].priority;
				num = i;
			}

			cout << some_list.store[num].title << "", описание - "" << some_list.store[num].description << "", дата - "" << some_list.store[num].dt.day << '.' << some_list.store[num].dt.month << '.' << some_list.store[num].dt.year << "" "" << "", время - "" << some_list.store[num].dt.hour << "":"" << some_list.store[num].dt.minutes << "":"" << some_list.store[num].dt.seconds << "", важность - "" << some_list.store[num].priority << endl;
		}
	}
}
//по дате и времени(+) ура!!! заработало))
void find_case_by_dt(list_cases& some_list, struct date_time d) {
	for (int i = 0; i < some_list.cases_number; i++) {
		if (some_list.store[i].dt.day == d.day && some_list.store[i].dt.month == d.month && some_list.store[i].dt.year == d.year || some_list.store[i].dt.hour == d.hour && some_list.store[i].dt.minutes == d.minutes && some_list.store[i].dt.seconds == d.seconds) {
			cout << some_list.store[i].title << "", описание - "" << some_list.store[i].description << "", дата - "" << some_list.store[i].dt.day << '.' << some_list.store[i].dt.month << '.' << some_list.store[i].dt.year << "" "" << "", время - "" << some_list.store[i].dt.hour << "":"" << some_list.store[i].dt.minutes << "":"" << some_list.store[i].dt.seconds << "", важность - "" << some_list.store[i].priority << endl;
		}
	}
}
//по описанию(+)
void find_case_by_description(struct list_cases& some_list, const char* description) {
	for (int i = 0; i < some_list.cases_number; i++) {
		if (!strcmp(some_list.store[i].description, description)) {
			cout << some_list.store[i].title << "", описание - "" << some_list.store[i].description << "", дата - "" << some_list.store[i].dt.day << '.' << some_list.store[i].dt.month << '.' << some_list.store[i].dt.year << "" "" << "", время - "" << some_list.store[i].dt.hour << "":"" << some_list.store[i].dt.minutes << "":"" << some_list.store[i].dt.seconds << "", важность - "" << some_list.store[i].priority << endl;
		}
	}
	cout << endl;
};
//редактировать задание(работает)
void edit_case(list_cases& some_list, const char* title, int index, int value) {
	for (int i = 0; i < some_list.cases_number; i++) {
		if (!strcmp(some_list.store[i].title, title)) {
			if (index < 0 || index > some_list.cases_number) {
				cout << ""Индекс некорректный"" << endl;
				return;
			}
			for (int i = 0; i < some_list.cases_number; i++) {
				some_list.store[index].priority = value;
			}
		}
	}
}

//сортировка в порядке возрастания приоритета (для сортировки в порядке убывания поменять знак в if)
void sort_by_priority(list_cases& some_list) {
	cases temp;
	for (int i = 0; i < some_list.cases_number - 1; i++) {
		for (int j = i + 1; j < some_list.cases_number; j++) {
			if (some_list.store[j].priority < some_list.store[i].priority) {
				temp = some_list.store[i];
				some_list.store[i] = some_list.store[j];
				some_list.store[j] = temp;
			}
		}
	}
}


//Вывели все задания
void print(const list_cases& some_list) {
	for (int i = 0; i < some_list.cases_number; i++) {
		cout << some_list.store[i].title << "", описание - "" << some_list.store[i].description << "", дата - "" << some_list.store[i].dt.day << '.' << some_list.store[i].dt.month << '.' << some_list.store[i].dt.year << "" "" << "", время - "" << some_list.store[i].dt.hour << "":"" << some_list.store[i].dt.minutes << "":"" << some_list.store[i].dt.seconds << "", важность - "" << some_list.store[i].priority << endl;
	};
	cout << endl;
}
int main()
{
	setlocale(LC_ALL, ""ru"");
	list_cases my_cases;
	add_cases(my_cases, ""Case1"", ""Description1"", { 01,02,2024,11,00,00 }, 3);
	add_cases(my_cases, ""Case2"", ""Description2"", { 02,02,2024,12,00,00 }, 4);
	add_cases(my_cases, ""Case3"", ""Description3"", { 03,02,2024,13,00,00 }, 5);
	add_cases(my_cases, ""Case4"", ""Description4"", { 04,02,2024,14,00,00 }, 2);
	add_cases(my_cases, ""Case5"", ""Description5"", { 05,02,2024,15,00,00 }, 1);

	print(my_cases);
	//del_case(my_cases, ""Case2"");//Удалить Case2
	//print(my_cases);//Вывод после удаления Case2
	//find_case_by_title(my_cases, ""Case4"");
	//find_case_by_priority(my_cases, 5);
	//find_case_by_description(my_cases, ""Description4"");
	//find_case_by_dt(my_cases, { 03,02,2024, 13,0,0});//поиск по дате и времени
	//edit_case(my_cases, ""Case2"", 3, 444);//для int
	sort_by_priority(my_cases);
	print(my_cases);
	//cout << endl;
	//print(my_cases);

}


"
BDxSGGnj,Drag & Drop File Upload - Append Folder,CodeDropz,PHP,Friday 1st of March 2024 05:18:17 AM CDT,"add_filter('dndmfu_cf7_upload_folder', function( $folder ){
	if( $folder ){
		if( isset( $_POST['posted_data'] ) ){
			wp_parse_str( $_POST['posted_data'], $data );
			return ( isset( $data['company-name'] ) ? $folder .'-'. $data['company-name'] : $folder );
		}
		return $folder;
	}
}, 10 , 1);"
xaZxCKiG,Matchs (Soccer Point),AhmadXploit,Dart,Friday 1st of March 2024 05:01:20 AM CDT,"[
	{
      ""week"": ""Week 10"",
      ""image1"": ""https://res.cloudinary.com/dybvjvrib/image/upload/v1709234264/Soccer%20Point/Premier%20League/mc_wmfvab.png"",
      ""team1"": ""Man City"",
      ""image2"": ""https://res.cloudinary.com/dybvjvrib/image/upload/v1709234285/Soccer%20Point/Premier%20League/mu_mb8kn8.png"",
      ""team2"": ""Barcelona"",
      ""date"": ""8 Oct"",
      ""time"": ""06:00""
    },
    {
      ""week"": ""Week 11"",
      ""image1"": ""https://res.cloudinary.com/dybvjvrib/image/upload/v1709234264/Soccer%20Point/Premier%20League/mc_wmfvab.png"",
      ""team1"": ""Man City"",
      ""image2"": ""https://res.cloudinary.com/dybvjvrib/image/upload/v1709234285/Soccer%20Point/Premier%20League/mu_mb8kn8.png"",
      ""team2"": ""Man United"",
      ""date"": ""10 Oct"",
      ""time"": ""06:00""
    }
]"
SwXgGmSg,ml_plot_iris.py,rric,Python,Friday 1st of March 2024 04:37:03 AM CDT,"# https://scikit-learn.org/0.18/auto_examples/svm/plot_iris.html
# Copyright 2010-2016, scikit-learn developers
# Copyright 2022 Roland Richter
# used and released under BSD 3-Clause License

import numpy as np
import matplotlib.pyplot as plt
from matplotlib.colors import ListedColormap

from sklearn import datasets
from sklearn.neighbors import KNeighborsClassifier
from sklearn.linear_model import Perceptron
from sklearn.tree import DecisionTreeClassifier
from sklearn import svm
from sklearn.neural_network import MLPClassifier

# import iris dataset, but use only two features
features = [0, 2]
iris = datasets.load_iris()
X = iris.data[:, features]
labels = iris.target

# create instances of methods, and fit data
nbrs = KNeighborsClassifier(n_neighbors=5).fit(X, labels)
dtree = DecisionTreeClassifier().fit(X, labels)
ptron = Perceptron(shuffle=True).fit(X, labels)
svm_lin = svm.LinearSVC(C=1.0).fit(X, labels)
svm_rbf = svm.SVC(kernel=""rbf"", gamma=0.7, C=1.0).fit(X, labels)
nn_mlp = MLPClassifier(
    shuffle=True, hidden_layer_sizes=(20,), activation=""tanh"", random_state=42
).fit(X, labels)

# create a mesh to plot in
h = 0.02  # step size in the mesh
x_min, x_max = X[:, 0].min() - 0.3, X[:, 0].max() + 0.3
y_min, y_max = X[:, 1].min() - 0.3, X[:, 1].max() + 0.3
xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))

# title for the plots
titles = [
    ""k nearest neighbours"",
    ""decision tree"",
    ""perceptron"",
    ""SVM with linear kernel"",
    ""SVM with RBF kernel"",
    ""multi-layer perceptron"",
]

colormap = ListedColormap([""red"", ""green"", ""blue""])

for i, clf in enumerate((nbrs, dtree, ptron, svm_lin, svm_rbf, nn_mlp)):
    # Plot the decision boundary. For that, we will assign a color to each
    # point in the mesh [x_min, x_max]x[y_min, y_max].
    plt.subplot(2, 3, i + 1)
    plt.subplots_adjust(wspace=0.3, hspace=0.4)

    Z = clf.predict(np.c_[xx.ravel(), yy.ravel()])

    # put the result into a color plot
    Z = Z.reshape(xx.shape)
    plt.contourf(xx, yy, Z, cmap=colormap, alpha=0.3)

    # plot the training points
    plt.scatter(X[:, 0], X[:, 1], s=4.0, c=labels, cmap=colormap)
    plt.xlabel(iris.feature_names[features[0]])
    plt.ylabel(iris.feature_names[features[1]])
    plt.xlim(xx.min(), xx.max())
    plt.ylim(yy.min(), yy.max())
    plt.xticks(())
    plt.yticks(())
    plt.title(titles[i])

plt.show()
"
tNvQA8Kx,Analyse du temps en C++ avec la bibliothèque ctime,AntonioVillanueva,C++,Friday 1st of March 2024 04:33:43 AM CDT,"#include <ctime>
#include <iostream>
using namespace std;
#define CTRL_TIME 4

bool minuteur (double begin, double end,double ctrl){
	
	double elapsed_secs = double(end - begin) / CLOCKS_PER_SEC;
	if (ctrl <elapsed_secs){return true;}
	return false;
	
}

void chronometre(double begin, double end) {

  double elapsed_secs = double(end - begin) / CLOCKS_PER_SEC;
  cout <<elapsed_secs<<endl;
  
}

int main (){
	clock_t begin = clock();//Obtient l'heure initiale
	clock_t end = clock();
	
	while (true){
		end = clock();//Obtient l'heure actuelle
		chronometre (begin, end);
		if (minuteur(begin, end,CTRL_TIME)){return -1;}
	}
	
	return 0;
}"
eYzneqXA,Lenovo QFIL v3,ot_inc,JSON,Friday 1st of March 2024 04:22:46 AM CDT,"[
  {
    ""FileType"": ""TOOL"",
    ""FileUrl"": ""https://download.lenovo.com/lsa/Resource/Tools/TAB/QFil-V3.zip"",
    ""DownloadUrl"": ""https://download.lenovo.com/lsa/Resource/Tools/TAB/QFil-V3.zip"",
    ""OriginalFileName"": ""QFil-V3.zip"",
    ""LocalPath"": ""C:\\ProgramData\\RSA\\Download\\ToolFiles\\"",
    ""FileSize"": 0,
    ""MD5"": null,
    ""ShowInUI"": true,
    ""CreateDateTime"": ""2024-01-18T12:15:23.023321+09:00"",
    ""NeedTakesTime"": ""00:00:00"",
    ""Status"": ""UNZIPSUCCESS"",
    ""UnZip"": true,
    ""ZipPwd"": ""W1BKY/g4TjtuEv0FW2Xt0aOgbbYWw8gbakRkqhLaRUo="",
    ""IsManualMatch"": false
  }
]
"
2D2Ry4Rj,Untitled,boris-vlasenko,Python,Friday 1st of March 2024 03:42:57 AM CDT,"from random import randint

import pygame


pygame.init()

# Константы для размеров поля и сетки:
SCREEN_WIDTH, SCREEN_HEIGHT = 640, 480
GRID_SIZE = 20
GRID_WIDTH = SCREEN_WIDTH // GRID_SIZE
GRID_HEIGHT = SCREEN_HEIGHT // GRID_SIZE

# Направления движения:
UP = (0, -1)
DOWN = (0, 1)
LEFT = (-1, 0)
RIGHT = (1, 0)

# Цвет фона - черный:
BOARD_BACKGROUND_COLOR = (0, 0, 0)

# Цвет границы ячейки
BORDER_COLOR = (93, 216, 228)

# Цвет яблока
APPLE_COLOR = (255, 0, 2)

# Цвет змейки
SNAKE_COLOR = (111, 111, 111)

# Скорость движения змейки:
SPEED = 20

# Настройка игрового окна:
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT), 0, 32)

# Заголовок окна игрового поля:
pygame.display.set_caption('Змейка')

# Настройка времени:
clock = pygame.time.Clock()


class GameObject:
    """"""Базовый класс.""""""

    def __init__(self):
        """"""Метод инициализации.""""""
        self.body_color = None
        self.position = [SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2]

    def draw(self):
        """"""Метод отрисовки.""""""
        raise NotImplementedError


class Snake(GameObject):
    """"""Класс змейки.""""""

    def __init__(self):
        """"""Метод инициализации.""""""
        super().__init__()
        self.positions = [self.position]
        self.reset()

    def update_direction(self):
        """"""Метод обновления метонахождения змейки.""""""
        if self.next_direction is not None:
            if self.next_direction == UP and self.direction != DOWN:
                self.direction = UP
            if self.next_direction == DOWN and self.direction != UP:
                self.direction = DOWN
            if self.next_direction == LEFT and self.direction != RIGHT:
                self.direction = LEFT
            if self.next_direction == RIGHT and self.direction != LEFT:
                self.direction = RIGHT
            self.next_direction = None

    def move(self):
        """"""Метод движения.""""""
        head_position = list(self.get_head_position())
        head_position[0] += self.direction[0] * GRID_SIZE
        head_position[1] += self.direction[1] * GRID_SIZE

        head_position[0] = head_position[0] % SCREEN_WIDTH
        head_position[1] = head_position[1] % SCREEN_HEIGHT

        self.positions.insert(0, head_position)
        if len(self.positions) > self.length:
            self.positions.pop()

    def draw(self):
        """"""Метод отрисовки.""""""
        for pos in self.positions:
            pygame.draw.rect(screen, self.body_color, pygame.Rect(pos[0],
                                                                  pos[1],
                                                                  GRID_SIZE,
                                                                  GRID_SIZE))

    def get_head_position(self):
        """"""Метод расположения головы.""""""
        return self.positions[0]

    def reset(self):
        """"""Метод сброса.""""""
        self.length = 1
        self.positions = [self.position]
        self.direction = RIGHT
        self.next_direction = None
        self.body_color = SNAKE_COLOR


class Apple(GameObject):
    """"""Класс яблока.""""""

    def __init__(self):
        """"""Метод инициализации.""""""
        super().__init__()
        self.body_color = APPLE_COLOR
        self.randomize_position()

    def randomize_position(self, snake=None):
        """"""Метод случайного появления яблока.""""""
        while True:
            self.position = [randint(1, GRID_WIDTH - 1) * GRID_SIZE,
                             randint(1, GRID_HEIGHT - 1) * GRID_SIZE]
            if snake is None:
                return
            if self.position not in snake.positions:
                return 

    def draw(self):
        """"""Метод отрисовки.""""""
        pygame.draw.rect(screen, self.body_color, pygame.Rect(self.position[0],
                                                              self.position[1],
                                                              GRID_SIZE,
                                                              GRID_SIZE))


def handle_keys(snake):
    """"""Метод привязки движения.""""""
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_UP:
                snake.next_direction = UP
            elif event.key == pygame.K_DOWN:
                snake.next_direction = DOWN
            elif event.key == pygame.K_LEFT:
                snake.next_direction = LEFT
            elif event.key == pygame.K_RIGHT:
                snake.next_direction = RIGHT


def main():
    """"""Основная функция игры.""""""
    snake = Snake()
    apple = Apple()

    while True:
        handle_keys(snake)
        snake.update_direction()
        snake.move()

        if snake.get_head_position() == apple.position:
            apple.randomize_position(snake)
            snake.length += 1

        for position in snake.positions[1:]:
            if snake.get_head_position() == position:
                snake.reset()

        if apple.position in snake.positions:
            apple.randomize_position()

        screen.fill(BOARD_BACKGROUND_COLOR)
        snake.draw()
        apple.draw()
        pygame.display.update()
        clock.tick(SPEED)


if __name__ == '__main__':
    main()
"
A2VQdnCQ,convertString,deddyprianto,JavaScript,Friday 1st of March 2024 03:32:31 AM CDT,"  const convertString = (inputString) => {
    const words = inputString.split(""_"");
    const capitalizedWords = words.map(
      (word) => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase(),
    );
    const result = capitalizedWords.join("" "");
    return result;
  };"
uX2VRZJj,Contrôle du temps en C++,AntonioVillanueva,C++,Friday 1st of March 2024 03:10:05 AM CDT,"/*
 * contrôle du temps avec library chrono ... C++ A.Villanueva
 */
#include <iostream>
#include <chrono>
using namespace std;

#define TEMPS_REF 4

//
bool chronometre( std::chrono::time_point<std::chrono::system_clock> t1,
		std::chrono::time_point<std::chrono::system_clock> t0,
		std::chrono::duration<double> ref){

	 std::chrono::duration<double> segundos = t1 - t0;
	 if (segundos > ref){ return true;}
	 
	 return false;
	 
}

//temps écoulé
void tempsEcoule( std::chrono::time_point<std::chrono::system_clock> t1,
       std::chrono::time_point<std::chrono::system_clock> t0){

	 std::chrono::duration<double> segundos = t1 - t0;
	 cout << ""temps écoulé : "" << segundos.count() << endl;
	 
}


int main (){
	 std::chrono::duration<double> t_ref(TEMPS_REF);
	std::chrono::time_point<std::chrono::system_clock> t0, t1,ctrl;
	
	t0= std::chrono::system_clock::now();

	
	while (true){
		t1= std::chrono::system_clock::now();//heure actuelle
		tempsEcoule(t1,t0);//DEBUG analyse du temps écoulé
		
		//Le programme se termine lorsqu'il atteint le temps t_ref
		if (chronometre(t1,t0,t_ref)){return (0);}

	}
	return 0;
}"
ZzpZEHFF,Turtle world eater NO ENDERCHEST update,BioPrince,Lua,Friday 1st of March 2024 02:53:34 AM CDT,"-- pastebin get ZzpZEHFF worldeater
   
local i = 0
local block = ""false""
local data = ""false""
local height = 0
---------------------
function bottom() --bottom out to find y level
  height = 0
  while true do
    block,data = turtle.digDown()
      if data == ""Cannot break unbreakable block"" then
        break
      end
    while turtle.dig() do
    end
	height = height + 1
    turtle.down()
  end
end
-----------------------
function empty() -- place soryn chest and empty. this function is run after clear()
  while turtle.dig() do
    sleep(.2)
  end
  while turtle.digUp() do
	sleep(.2)
  end
  turtle.turnRight()
  turtle.turnRight()
  while turtle.dig() do
    sleep(.3)
  end
  turtle.select(16)
  turtle.place()
  for i = 1, 14 do
    turtle.select(i)
    turtle.drop()
  end
  turtle.turnRight()
  turtle.turnRight()
  turtle.select(1)
  while turtle.dig() do
    sleep(.2)
  end
  turtle.forward()
  while turtle.dig() do
    sleep(.2)
  end
  turtle.forward()
end

-----------------------
function turtleRefuel()
  if turtle.getFuelLevel() < 5000 then
  for i=1,14 do
    turtle.select(i)
    turtle.refuel(64)
    turtle.select(1)
  end
  end
end
-----------------------
function lowFuel() -- checks for low fuel and waits if at top of loop
  if turtle.getFuelLevel() < 200 then
  turtle.select(15)
  turtle.refuel(turtle.getItemCount(15)-1)
  turtle.select(1)
  print(""WARNING: Low Fuel"")
  if turtle.getFuelLevel() < height then
    print(""Waiting for fuel"")
    os.pullEvent(""turtle_inventory"")
  end
  end
end
---------------------
function self()
  turtleRefuel()
  lowFuel()
  lowFuel()
  turtle.getFuelLevel()
end
--------------------
function minerUp() -- bottom to top mining
  for i=1,height do
  while turtle.digUp() do
    sleep(.2)
  end
  while turtle.dig() do
    sleep(.2)
  end
  turtle.up()
  end
end
-------------------
function inventory() -- check for fuel and enderchest
  print(""fuel in slot 15"")
  print(""64x chests in slot 16"")
  turtle.dig() --just in case it is placed before a restart
  while turtle.getItemCount(16) == 0 do
    os.pullEvent(""turtle_inventory"")
  end
end
--------------------
-- Main function
-- start with going to bedrock

inventory()
-- the turtle miner is now ready

while turtle.getItemCount(16) > 1 do
bottom()
self()-- fuel check
empty()-- place chest, empty, ""leave"" chest, move into postion
  print(""Mining Up"")
minerUp()
self()-- fuel check
empty()-- place chest, empty, ""leave"" chest, move into postion
  print(""Mining Down"")
end"
mRxXnfJw,"part of the Jury on Roe, that you don't become Iran",shiftdot515,CSS,Friday 1st of March 2024 02:52:47 AM CDT,"X is now a Catholic University Joke
They say they won't have anything remotely controversial as 1st Amendment Speech.
Is now in their rules.
So, what If I wanted to add to the micro-blog, knowing the personal writing need defense:

Where you say throughout the bill, that you want the wealth, but not the expertise,
so the bill is Religious Bigotry.  (Proper Noun)  
Just like in the Bible -- properly discussed.  And, not in your state and perhaps nowhere to found on Earth.

Furthermore, it's already part of the Jury on Roe, that you don't become Iran just because Monetary Credit should be found illegal in your state, if used by human beings somehow."
Yu2xzP0h,Untitled,Larme,Swift,Friday 1st of March 2024 02:52:46 AM CDT,"func formatsDates() {
    let dateFormatter = DateFormatter()
    dateFormatter.dateFormat = ""yyyy-MM-dd""
 
    let ids: [Calendar.Identifier] = [.buddhist, .chinese, .coptic, .ethiopicAmeteAlem, .ethiopicAmeteMihret, .gregorian, .hebrew, .indian, .islamic, .islamicCivil, .islamicTabular, .islamicUmmAlQura, .iso8601, .japanese, .persian, .republicOfChina]
    
    ids.forEach {
        dateFormatter.calendar = Calendar(identifier: $0)
        print(""For \($0) got: \(dateFormatter.string(from: Date()))"")
    }
}


Output:

For buddhist got: 2567-03-01
For chinese got: 0041-01-21
For coptic got: 1740-06-22
For ethioaa got: 2024-03-01
For ethiopic got: 2016-06-22
For gregorian got: 2024-03-01
For hebrew got: 5784-06-21
For indian got: 1945-12-11
For islamic got: 1445-08-21
For islamic-civil got: 1445-08-20
For islamic-tbla got: 1445-08-21
For islamic-umalqura got: 1445-08-20
For iso8601 got: 2024-03-01
For japanese got: 0006-03-01
For persian got: 1402-12-11
For roc got: 0113-03-01"
0HCcQWct,[WordPress][MySQL] supprimer proprement des posts depuis phpMyAdmin,rAthus,MySQL,Friday 1st of March 2024 02:51:48 AM CDT,"-- cet exemple supprime les 1000 premiers CTP de type ""commande"" dont la meta ""boutique"" vaut ""14513""
CREATE TEMPORARY TABLE akn_temp_table (post INT);
INSERT INTO akn_temp_table SELECT ID FROM wp_posts WHERE post_type=""commande"" AND ID IN (SELECT post_id FROM wp_postmeta WHERE meta_key=""boutique"" AND meta_value=""14513"") ORDER BY ID ASC LIMIT 0,1000;
DELETE FROM wp_posts WHERE ID IN (SELECT post FROM akn_temp_table);
DELETE FROM wp_posts WHERE post_parent IN (SELECT post FROM akn_temp_table);
DELETE FROM wp_postmeta WHERE post_id IN (SELECT post FROM akn_temp_table);
DELETE FROM wp_term_relationships WHERE object_id IN (SELECT post FROM akn_temp_table);
DELETE FROM wp_comments WHERE comment_post_id IN (SELECT post FROM akn_temp_table);
DELETE FROM wp_commentmeta WHERE comment_id NOT IN (SELECT comment_ID FROM wp_comments);"
iAvu5v2d,Stylized Water 2 - Set custom time,Staggart,C#,Friday 1st of March 2024 02:50:42 AM CDT,"using UnityEngine;

namespace StylizedWater2.Examples
{
    [ExecuteAlways]
    public class SetWaterTimeOffset : MonoBehaviour
    {
        public enum Mode
        {
            None,
            Interval,
            Time,
			EditorTime,
            Custom
        }

        public Mode mode = Mode.Custom;

        public float interval = 0.2f;
        public float customTime = 0f;
        private float elapsedTime;

        void Update()
        {
            if (mode == Mode.None)
            {
                OnDisable();
                return;
            }

            if (mode == Mode.Interval)
            {
                elapsedTime += Time.deltaTime;

                if (elapsedTime >= interval)
                {
                    elapsedTime = 0;

                    StylizedWater2.WaterObject.CustomTime = Time.time;
                }
            }

            if (mode == Mode.Time)
            {
                StylizedWater2.WaterObject.CustomTime = Time.time;
            }
			
			#if UNITY_EDITOR
			if (mode == Mode.EditorTime)
            {
                StylizedWater2.WaterObject.CustomTime = (float)UnityEditor.EditorApplication.timeSinceStartup;
            }
			#endif

            if (mode == Mode.Custom)
            {
                StylizedWater2.WaterObject.CustomTime = customTime;
            }
        }

        private void OnDisable()
        {
            //Revert to using normal time
            StylizedWater2.WaterObject.CustomTime = -1;
        }
    }
}"
hkGBPvde,max?,_who___,Python,Friday 1st of March 2024 02:48:06 AM CDT,"import numpy as np
from scipy.optimize import linprog
import matplotlib.pyplot as plt
import networkx as nx

# Define the directed graph representing the network flow
G = nx.DiGraph()
G.add_nodes_from([""S"", ""A"", ""B"", ""C"", ""D"", ""T""])
edges = [(""S"", ""A"", 3), (""S"", ""B"", 2), (""A"", ""C"", 3), (""A"", ""D"", 2),
         (""B"", ""C"", 1), (""B"", ""D"", 1), (""C"", ""T"", 3), (""D"", ""T"", 2)]
for u, v, w in edges:
    G.add_edge(u, v, capacity=w)

# Visualize the original graph
plt.figure()
pos = nx.circular_layout(G)
nx.draw(G, pos, with_labels=True, node_size=1000, node_color='skyblue')
nx.draw_networkx_edge_labels(G, pos, edge_labels={(u, v): str(d['capacity']) for u, v, d in G.edges(data=True)})
plt.title(""Original Network Flow Graph"")
plt.show()

# Linear programming problem setup
num_edges = len(G.edges)
num_nodes = len(G.nodes)
c = np.zeros(num_edges)  # Initialize cost function
bounds = [(0, G[u][v]['capacity']) for u, v in G.edges]  # Flow bounds are from 0 to edge capacity

node_indices = {node: i for i, node in enumerate(G.nodes)}
A_ub = np.zeros((num_nodes - 2, num_edges))  # One row for each node except source and sink
b_ub = np.zeros(num_nodes - 2)

# Set up the optimization problem
for i, ((u, v), w) in enumerate(G.edges.items()):
    if u == 'S':
        c[i] = -1  # Maximize flow from the source
    elif v == 'T':
        c[i] = 1  # Minimize flow to the sink

# Flow conservation constraints for nodes except source and sink
for i, node in enumerate(node for node in G.nodes if node not in ('S', 'T')):
    for j, (u, v) in enumerate(G.edges()):
        if v == node:
            A_ub[i, j] = -1  # Outgoing flow decreases
        if u == node:
            A_ub[i, j] = 1   # Incoming flow increases
    b_ub[i] = 0  # Flow conservation for nodes except source and sink

# Solve the linear programming problem
result = linprog(c, A_ub=A_ub, b_ub=b_ub, bounds=bounds, method='highs')
max_flow = -result.fun  # Negate because we minimized the negative flow

# Update graph with flow values
flow_values = result.x
for i, (u, v) in enumerate(G.edges()):
    G[u][v]['flow'] = flow_values[i]

# Visualize the solution graph with flow values
plt.figure()
plt.title(""Optimal Flow in the Network"")
nx.draw(G, pos, with_labels=True, node_size=1000, node_color='lightgreen')
nx.draw_networkx_edge_labels(G, pos, edge_labels={(u, v): f""{G[u][v]['flow']}/{G[u][v]['capacity']}"" for u, v in G.edges()})
plt.show()"
zPg1CLNQ,Base 4,VIzlo,C#,Friday 1st of March 2024 02:37:35 AM CDT,"using System;

internal class Program
{
    static void Main(string[] args)
    {
        Random random = new Random();
        int minRandomNumber = 1;
        int maxRandomNumber = 101;
        int number = random.Next(minRandomNumber, maxRandomNumber);

        int divisionNumber1 = 3;
        int divisionNumber2 = 5;
        int numberConclusion = 0;

        Console.WriteLine($""Рандомное число: {number}"");

        for (int i = 0; i <= number; i++)
        {
            if ((i % divisionNumber1 == 0) || (i % divisionNumber2 == 0))
            {
                numberConclusion += i;
                Console.WriteLine($""Новое число {i}"");
            }
        }

        Console.WriteLine($""Сумма всех сложенных чисел = {numberConclusion}"");
        Console.ReadLine();
    }
}"
rXFES0FB,Base 3,VIzlo,C#,Friday 1st of March 2024 02:33:54 AM CDT,"using System;

internal class Program
{
    static void Main(string[] args)
    {
        int minNumber = 5;
        int stepNumber = 7;
        int maxNumber = 103;

        for(int i = minNumber; i <= maxNumber; i += stepNumber)
        {
            Console.WriteLine(i);
        }

        Console.ReadLine();
    }
}"
a4E1Cqvg,max,_who___,Python,Friday 1st of March 2024 02:23:50 AM CDT,"import numpy as np
from scipy.optimize import linprog
import networkx as nx
import matplotlib.pyplot as plt


def max_flow(graph, source, sink):
    # Создаем матрицу инцидентности
    num_nodes = len(graph)
    num_edges = sum(len(edges) for edges in graph.values())
    A_eq = np.zeros((num_nodes + num_edges, num_edges))
    b_eq = np.zeros(num_nodes + num_edges)
    c = np.zeros(num_edges)
    edge_index = 0

    for i, node in enumerate(graph):
        for neighbor, capacity in graph[node].items():
            if node != source and node != sink:
                A_eq[i, edge_index] = 1
                A_eq[num_nodes + edge_index, edge_index] = -1
                b_eq[i] = 0
                c[edge_index] = -1
                edge_index += 1
            if node == source:
                A_eq[num_nodes + edge_index, edge_index] = -1
                b_eq[num_nodes + edge_index] = -capacity
                c[edge_index] = -1
                edge_index += 1
            elif node == sink:
                A_eq[num_nodes + edge_index, edge_index] = 1
                b_eq[num_nodes + edge_index] = capacity
                c[edge_index] = -1
                edge_index += 1

    # Решаем задачу линейного программирования
    res = linprog(c, A_eq=A_eq, b_eq=b_eq)

    # Создаем словарь потока
    flow = {}
    for node in graph:
        flow[node] = {}

    # Заполняем значениями потока
    edge_index = 0
    for i, node in enumerate(graph):
        for neighbor, _ in graph[node].items():
            flow[node][neighbor] = res.x[edge_index]
            edge_index += 1

    return flow

def visualize_flow(graph, flow):
    G = nx.DiGraph()
    for node, neighbors in graph.items():
        for neighbor, capacity in neighbors.items():
            G.add_edge(node, neighbor, capacity=capacity)

    pos = nx.spring_layout(G)

    plt.figure(figsize=(10, 5))

    # Рисуем исходный граф
    plt.subplot(1, 2, 1)
    nx.draw(G, pos, with_labels=True, node_color='lightblue', node_size=2000, font_size=10)
    plt.title('Original Graph')

    # Рисуем граф с потоком
    plt.subplot(1, 2, 2)
    for node, neighbors in graph.items():
        for neighbor, capacity in neighbors.items():
            flow_value = flow[node][neighbor]
            nx.draw_networkx_edge_labels(G, pos, edge_labels={(node, neighbor): str(flow_value)}, label_pos=0.3)

    nx.draw(G, pos, with_labels=True, node_color='lightblue', node_size=2000, font_size=10)
    plt.title('Graph with Max Flow')

    plt.show()


# Пример графа для тестирования
graph = {
    'A': {'B': 10, 'C': 5},
    'B': {'D': 15},
    'C': {'D': 10},
    'D': {}
}

source = 'A'
sink = 'D'

# Рассчитываем максимальный поток
flow = max_flow(graph, source, sink)

# Создаем словарь потока для визуализации
flow_dict = {}
nodes = list(graph.keys())
edge_index = 0
for i, node in enumerate(nodes):
    flow_dict[node] = {}
    for neighbor, _ in graph[node].items():
        flow_dict[node][neighbor] = flow[node][neighbor]

# Визуализируем поток
visualize_flow(graph, flow_dict)"
Ru3PzKp6,Base 2,VIzlo,C#,Friday 1st of March 2024 02:20:12 AM CDT,"using System;

internal class Program
{
    static void Main(string[] args)
    {
        string inputText = """";
        string exit = ""exit"";

        while (inputText != exit)
        {
            Console.Clear();

            Console.Write($""Для выхода из программы укажите *{exit}*: "");
            inputText = Console.ReadLine();
        }
    }
}"
swdaQsL8,ASaikinHeroCharacter (Movement Broken),Okami,C++,Friday 1st of March 2024 02:14:30 AM CDT,"// Copyright 2020 Dan Kestranek.


#include ""Characters/Heroes/SaikinHeroCharacter.h""
#include ""AI/SaikinHeroAIController.h""
#include ""Camera/CameraComponent.h""
#include ""Characters/Abilities/AttributeSets/SaikinAttributeSetBase.h""
#include ""Characters/Abilities/SaikinAbilitySystemComponent.h"" // Ensure correct header
#include <EnhancedInputComponent.h>
#include ""Components/CapsuleComponent.h""
#include ""Components/DecalComponent.h""
#include ""Components/WidgetComponent.h""
#include ""GameFramework/SpringArmComponent.h""
#include ""Saikin/SaikinGameMode.h""
#include ""Kismet/GameplayStatics.h""
#include ""Kismet/KismetMathLibrary.h""
#include ""Player/SaikinPlayerController.h""
#include ""Player/SaikinPlayerState.h""
#include ""UObject/ConstructorHelpers.h""


ASaikinHeroCharacter::ASaikinHeroCharacter(const class FObjectInitializer& ObjectInitializer) : Super(ObjectInitializer)
{
	CameraBoom = CreateDefaultSubobject<USpringArmComponent>(FName(""CameraBoom""));
	CameraBoom->SetupAttachment(RootComponent);
	CameraBoom->bUsePawnControlRotation = true;
	CameraBoom->SetRelativeLocation(FVector(0, 0, 70.0));

	FollowCamera = CreateDefaultSubobject<UCameraComponent>(FName(""FollowCamera""));
	FollowCamera->SetupAttachment(CameraBoom);
	FollowCamera->FieldOfView = 80.0f;
	
	// Create ability system component, and set it to be explicitly replicated
	HardRefAbilitySystemComponent = CreateDefaultSubobject<USaikinAbilitySystemComponent>(TEXT(""AbilitySystemComponent""));
	HardRefAbilitySystemComponent->SetIsReplicated(true);

	// Minimal Mode means that no GameplayEffects will replicate. They will only live on the Server. Attributes, GameplayTags, and GameplayCues will still replicate to us.
	HardRefAbilitySystemComponent->SetReplicationMode(EGameplayEffectReplicationMode::Minimal);

	// Set our parent's TWeakObjectPtr
	AbilitySystemComponent = HardRefAbilitySystemComponent;

	// Create the attribute set, this replicates by default
	// Adding it as a subobject of the owning actor of an AbilitySystemComponent
	// automatically registers the AttributeSet with the AbilitySystemComponent
	HardRefAttributeSetBase = CreateDefaultSubobject<USaikinAttributeSetBase>(TEXT(""AttributeSetBase""));

	// Set our parent's TWeakObjectPtr
	AttributeSetBase = HardRefAttributeSetBase;


	GetCapsuleComponent()->SetCollisionResponseToChannel(ECollisionChannel::ECC_Camera, ECollisionResponse::ECR_Ignore);

	// Makes sure that the animations play on the Server so that we can use bone and socket transforms
	// to do things like spawning projectiles and other FX.
	GetMesh()->VisibilityBasedAnimTickOption = EVisibilityBasedAnimTickOption::AlwaysTickPoseAndRefreshBones;
	GetMesh()->SetCollisionEnabled(ECollisionEnabled::NoCollision);
	GetMesh()->SetCollisionProfileName(FName(""NoCollision""));
	
	AIControllerClass = ASaikinHeroAIController::StaticClass();

	DeadTag = FGameplayTag::RequestGameplayTag(FName(""State.Dead""));
}

// Called to bind functionality to input
void ASaikinHeroCharacter::SetupPlayerInputComponent(UInputComponent* PlayerInputComponent)
{
	Super::SetupPlayerInputComponent(PlayerInputComponent);

	if (auto* EnhancedInputComponent = CastChecked<UEnhancedInputComponent>(PlayerInputComponent))
	{
		EnhancedInputComponent->BindAction(MoveAction, ETriggerEvent::Triggered, this, &ASaikinHeroCharacter::Move);
		EnhancedInputComponent->BindAction(LookAction, ETriggerEvent::Triggered, this, &ASaikinHeroCharacter::Look);
		EnhancedInputComponent->BindAction(JumpAction, ETriggerEvent::Started, this, &ASaikinHeroCharacter::Jump);
		EnhancedInputComponent->BindAction(JumpAction, ETriggerEvent::Completed, this, &ASaikinHeroCharacter::StopJumping);
	}
	
	// Bind player input to the AbilitySystemComponent. Also called in OnRep_PlayerState because of a potential race condition.
	BindASCInput();
}

// Server only
void ASaikinHeroCharacter::PossessedBy(AController * NewController)
{
	Super::PossessedBy(NewController);

	ASaikinPlayerState* PS = GetPlayerState<ASaikinPlayerState>();
	if (PS)
	{
		InitializeStartingValues(PS);

		AddStartupEffects();
		AddCharacterAbilities();

		ASaikinPlayerController* PC = Cast<ASaikinPlayerController>(GetController());
		if (PC)
		{
			//PC->CreateHUD();
		}

		InitializeFloatingStatusBar();
	}
}

USpringArmComponent * ASaikinHeroCharacter::GetCameraBoom()
{
	return CameraBoom;
}

UCameraComponent * ASaikinHeroCharacter::GetFollowCamera()
{
	return FollowCamera;
}

float ASaikinHeroCharacter::GetStartingCameraBoomArmLength()
{
	return StartingCameraBoomArmLength;
}

FVector ASaikinHeroCharacter::GetStartingCameraBoomLocation()
{
	return StartingCameraBoomLocation;
}

USaikinFloatingStatusBarWidget * ASaikinHeroCharacter::GetFloatingStatusBar()
{
	//return UIFloatingStatusBar;
	return nullptr;
}

void ASaikinHeroCharacter::FinishDying()
{
	if (GetLocalRole() == ROLE_Authority)
	{
		ASaikinGameMode* GM = Cast<ASaikinGameMode>(GetWorld()->GetAuthGameMode());

		if (GM)
		{
			GM->HeroDied(GetController());
		}
	}

	Super::FinishDying();
}

/**
* On the Server, Possession happens before BeginPlay.
* On the Client, BeginPlay happens before Possession.
* So we can't use BeginPlay to do anything with the AbilitySystemComponent because we don't have it until the PlayerState replicates from possession.
*/
void ASaikinHeroCharacter::BeginPlay()
{
	Super::BeginPlay();

	StartingCameraBoomArmLength = CameraBoom->TargetArmLength;
	StartingCameraBoomLocation = CameraBoom->GetRelativeLocation();

	if (auto* PlayerController = Cast<ASaikinPlayerController>(GetController()))
	{
		if (auto* Subsystem =  ULocalPlayer::GetSubsystem<UEnhancedInputLocalPlayerSubsystem>(PlayerController->GetLocalPlayer()))
		{
			Subsystem->AddMappingContext(DefaultMappingContext, 0);
		}
	}

	// Only needed for Heroes placed in world and when the player is the Server.
	// On respawn, they are set up in PossessedBy.
	// When the player a client, the floating status bars are all set up in OnRep_PlayerState.
	InitializeFloatingStatusBar();

	StartingCameraBoomArmLength = CameraBoom->TargetArmLength;
	StartingCameraBoomLocation = CameraBoom->GetRelativeLocation();
}

void ASaikinHeroCharacter::PostInitializeComponents()
{
	Super::PostInitializeComponents();

	if (GunComponent && GetMesh())
	{
		GunComponent->AttachToComponent(GetMesh(), FAttachmentTransformRules::SnapToTargetNotIncludingScale, FName(""GunSocket""));
	}
}

void ASaikinHeroCharacter::Look(const FInputActionValue& Value)
{
	// input is a Vector2D
	FVector2D LookAxisVector = Value.Get<FVector2D>();

	if (Controller != nullptr && IsAlive())
	{
		// add yaw and pitch input to controller
		AddControllerYawInput(LookAxisVector.X);
		AddControllerPitchInput(LookAxisVector.Y);
	}
}


void ASaikinHeroCharacter::Move(const FInputActionValue& Value)
{
	// input is a Vector2D
	FVector2D MovementVector = Value.Get<FVector2D>();

	if (Controller != nullptr && IsAlive())
	{
		UE_LOG(LogTemp, Warning, TEXT(""Moving: %f1, %f2""), MovementVector.X, MovementVector.Y);

		// find out which way is forward
		const FRotator Rotation = Controller->GetControlRotation();
		const FRotator YawRotation(0, Rotation.Yaw, 0);

		// get forward vector
		const FVector ForwardDirection = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::X);

		// get right vector 
		const FVector RightDirection = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::Y);

		// add movement 
		AddMovementInput(ForwardDirection, MovementVector.Y * 100);
		AddMovementInput(RightDirection, MovementVector.X * 100);
	}
}

void ASaikinHeroCharacter::InitializeFloatingStatusBar()
{
	// Only create once
	if (/*UIFloatingStatusBar ||*/ !IsValid(AbilitySystemComponent))
	{
		return;
	}

	// Setup UI for Locally Owned Players only, not AI or the server's copy of the PlayerControllers
	ASaikinPlayerController* PC = Cast<ASaikinPlayerController>(UGameplayStatics::GetPlayerController(GetWorld(), 0));
	if (PC && PC->IsLocalPlayerController())
	{
		//if (UIFloatingStatusBarClass)
		//{
		//	UIFloatingStatusBar = CreateWidget<USaikinFloatingStatusBarWidget>(PC, UIFloatingStatusBarClass);
		//	if (UIFloatingStatusBar && UIFloatingStatusBarComponent)
		//	{
		//		UIFloatingStatusBarComponent->SetWidget(UIFloatingStatusBar);

		//		// Setup the floating status bar
		//		UIFloatingStatusBar->SetHealthPercentage(GetHealth() / GetMaxHealth());
		//		UIFloatingStatusBar->SetManaPercentage(GetMana() / GetMaxMana());
		//	}
		//}
	}
}

// Client only
void ASaikinHeroCharacter::OnRep_PlayerState()
{
	Super::OnRep_PlayerState();

	ASaikinPlayerState* PS = GetPlayerState<ASaikinPlayerState>();
	if (PS)
	{
		InitializeStartingValues(PS);
		BindASCInput();
		InitializeAttributes();
	}
}

void ASaikinHeroCharacter::InitializeStartingValues(ASaikinPlayerState* PS)
{
	// Set the ASC for clients. Server does this in PossessedBy.
	AbilitySystemComponent = Cast<USaikinAbilitySystemComponent>(PS->GetAbilitySystemComponent());

	// Init ASC Actor Info for clients. Server will init its ASC when it possesses a new Actor.
	AbilitySystemComponent->InitAbilityActorInfo(PS, this);

	// Set the AttributeSetBase for convenience attribute functions
	AttributeSetBase = PS->GetAttributeSetBase();

	// Forcibly set the DeadTag count to 0
	AbilitySystemComponent->SetTagMapCount(DeadTag, 0);

	// Set Health/Mana/Stamina to their max. This is only necessary for *Respawn*.
	SetHealth(GetMaxHealth());
	SetMana(GetMaxMana());
	SetStamina(GetMaxStamina());

	// If we handle players disconnecting and rejoining in the future, we'll have to change this so that posession from rejoining doesn't reset attributes.
	// For now assume possession = spawn/respawn.
	InitializeAttributes();

	ASaikinPlayerController* PC = Cast<ASaikinPlayerController>(GetController());
	if (PC)
	{
		//PC->CreateHUD();
	}

	// Simulated on proxies don't have their PlayerStates yet when BeginPlay is called so we call it again here
	InitializeFloatingStatusBar();

	// Respawn specific things that won't affect first possession.

}


void ASaikinHeroCharacter::BindASCInput()
{
	if (!ASCInputBound && IsValid(AbilitySystemComponent) && IsValid(InputComponent))
	{
		UEnhancedInputComponent* EnhancedInputComponent = Cast<UEnhancedInputComponent>(InputComponent);
		if (EnhancedInputComponent)
		{
			//FGameplayTag ConfirmTag = FGameplayTags::MakeTag(""Ability.Confirm"");
			//FGameplayTag CancelTag = FGameplayTags::MakeTag(""Ability.Cancel"");

			AbilitySystemComponent->BindAbilityActivationToInputComponent(EnhancedInputComponent,
				FGameplayAbilityInputBinds(FString(""ConfirmTarget""), FString(""CancelTarget""), FString(""ESaikinAbilityInputID""),
				static_cast<int32>(ESaikinAbilityInputID::Confirm), static_cast<int32>(ESaikinAbilityInputID::Cancel)));

			//EnhancedInputComponent->BindAction(ConfirmTag, IE_Pressed, AbilitySystemComponent.Get(), &USaikinAbilitySystemComponent::TryActivateAbilityByTag, ConfirmTag);
			//EnhancedInputComponent->BindAction(CancelTag, IE_Pressed, AbilitySystemComponent.Get(), &USaikinAbilitySystemComponent::Cancel); // Corrected function name

			ASCInputBound = true;
		}
		else
		{
			// Handle case where EnhancedInputComponent is not available (e.g., fallback)
			// ... (implement alternative binding if needed)
		}
	}
}
"
VTVw7ucC,Base 1,VIzlo,C#,Friday 1st of March 2024 02:12:07 AM CDT,"using System;

internal class Program
{
    static void Main(string[] args)
    {
        int numberIterations;

        Console.Write(""Введите необходимое количество итераций цикла: "");
        numberIterations = int.Parse(Console.ReadLine());

        for (int i = 1; i <= numberIterations; i++)
        {
            Console.WriteLine($""Итерация #{i}"");
        }

        Console.WriteLine(""Перечисление окончено"");
        Console.ReadLine();
    }
}"
63bYSTDJ,Untitled,Krisna93,JavaScript,Friday 1st of March 2024 02:10:28 AM CDT,"using PlayFab;
using PlayFab.ClientModels;
using PlayFab.CloudScriptModels;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using TMPro;
using Newtonsoft.Json;
using System;

namespace SIDJI.TraktirID
{
    public class IslandManager : MonoBehaviour
    {
        #region =================================================== VARIABLES ===================================================
        [Header(""CS Paramaters"")]
        [Space]

        // Island identifiers
        private string islandID; // ID of the current island
        private string islandIDNext; // ID of the next island
        private string islandAssetID; // Asset ID of the current island

        // Island state information
        private string islandStorageInfo; // Information about the island's storage
        private string islandBuildingLevel; // Level of the island's building
        private int totalBuildingLevel = 0; // Total level of all buildings on the island
        private bool isUpgradingIsland = false; // Flag indicating if the island is currently being upgraded

        // General purpose variables
        private int repeatCounter = 3; // Counter for repeating actions
        private bool generalPurposeFlag = true; // General purpose flag
        private bool checkpointFlag; // Checkpoint flag for tracking progress

        // Time tracking
        private long now = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds(); // Current time in milliseconds since Unix epoch

        // Island asset data
        private IslandAssetData islandAssetData;

        [Header(""UI Elements"")]
        [SerializeField] 
        private GameObject defaultBanner; // Default banner for the island
        [SerializeField]
        private IslandUI islandUI; // User interface for the island
        [SerializeField]
        private IslandBuildings islandBuildings; // Buildings present on the island
        [SerializeField]
        private IslandAssets islandAssets; // Assets related to the island
        [SerializeField]
        private IslandPopups islandPopups; // Popups for the island

        [Header(""Building Information"")]
        [HideInInspector]
        public int destructionLevel; // Level of destruction of the building
        [HideInInspector]
        public string buildingID; // Identifier for the building
        [HideInInspector]
        public string scopeType; // Type of the scope

        [Header(""User Interactions"")]
        [HideInInspector]
        public bool isUpgradeTriggered = false; // Flag to check if upgrade is triggered
        [HideInInspector]
        public bool isRedeemTriggered = false; // Flag to check if redeem is triggered
        [HideInInspector]
        public bool canRedeemStorage = false; // Flag to check if storage can be redeemed

        [Header(""Audio Clips"")]
        [SerializeField]
        private AudioClip islandBGM; // Background music for the island
        public AudioClip buildingSFX; // Sound effect for building
        
        [Header(""UI Main Panel"")]
        [Space]

        // Text fields for displaying various information
        [SerializeField]
        private TMP_Text textGoldenTicketCurrency; // Amount of golden tickets
        [SerializeField]
        private TMP_Text textBrickCurrency; // Amount of bricks
        [SerializeField]
        private TMP_Text textShieldCurrency; // Amount of shields
        [SerializeField]
        private Text textIslandLevel; // Island level
        [SerializeField]
        private Text textIslandName; // Island name
        [SerializeField]
        private Text textTotalRegenValue; // Total regeneration value
        [SerializeField]
        private Text textStorageInfo; // Storage information
        [SerializeField]
        private Text textTotalIslandBuildingLevel1; // Total level of island buildings (part 1)
        [SerializeField]
        private Text textTotalIslandBuildingLevel2; // Total level of island buildings (part 2)

        // Images for various UI elements
        [SerializeField]
        private Image buttonRedeemGoldenTicketImage; // Redeem golden ticket button
        [SerializeField]
        private Image barChestProgression; // Chest progression bar
        [SerializeField]
        private Image barIslandProgression1; // Island progression bar (part 1)
        [SerializeField]
        private Image barIslandProgression2; // Island progression bar (part 2)

        // Array of game objects for map lock icons
        [SerializeField]
        private GameObject[] mapLockIcons;

        [Header(""UI Building Panels"")]
        [Space]

        [SerializeField]
        private Text[] textCostValue; // Array of text fields for displaying the cost values

        [SerializeField]
        private Image[] buildingUpgradeButtonImage; // Array of images for the building upgrade buttons

        [SerializeField]
        private Sprite[] buildingUpgradeButtonImageVariants; // Array of sprites for the building upgrade button variants

        // Arrays of images for the upgrade level icons for each building
        [SerializeField]
        private Image[] upgradeLevelIconBuilding1; // Building 1
        [SerializeField]
        private Image[] upgradeLevelIconBuilding2; // Building 2
        [SerializeField]
        private Image[] upgradeLevelIconBuilding3; // Building 3
        [SerializeField]
        private Image[] upgradeLevelIconBuilding4; // Building 4
        [SerializeField]
        private Image[] upgradeLevelIconBuilding5; // Building 5

        [SerializeField]
        private Sprite[] upgradeLevelIconVariants; // Array of sprites for the upgrade level icon variants

        [SerializeField]
        private Sprite destroyedBuildingSprite; // Sprite for the destroyed building

        [Header(""Island Assets"")]
        [Space]

        [SerializeField]
        private SpriteRenderer islandBG; // Background image for the island

        [SerializeField]
        private SpriteRenderer spriteBuilding1; // Sprite for the first building on the island

        [SerializeField]
        private SpriteRenderer spriteBuilding2; // Sprite for the second building on the island

        [SerializeField]
        private SpriteRenderer spriteBuilding3; // Sprite for the third building on the island

        [SerializeField]
        private SpriteRenderer spriteBuilding4; // Sprite for the fourth building on the island

        [SerializeField]
        private SpriteRenderer spriteBuilding5; // Sprite for the fifth building on the island

        [Header(""Popup Panels"")]
        [Space]

        // Panels
        [SerializeField]
        private GameObject panelShade; // Panel for shading
        [SerializeField]
        private GameObject panelAdsBrick; // Panel for ads related to bricks
        [SerializeField]
        private GameObject panelInsufficientBrick; // Panel for displaying insufficient bricks
        [SerializeField]
        private GameObject panelRedeemGoldenTicket; // Panel for redeeming golden tickets
        [SerializeField]
        private GameObject panelUpgradeIsland; // Panel for upgrading the island
        [SerializeField]
        private GameObject panelMap; // Panel for the map
        [SerializeField]
        private GameObject panelGoldenTicketGain; // Panel for gaining golden tickets
        [SerializeField]
        private GameObject panelBlocker; // Panel for blocking

        // Text fields
        [SerializeField]
        private TMP_Text textAdsCountdown; // Text field for displaying the countdown for ads
        [SerializeField]
        private TMP_Text textNextIslandName; // Text field for displaying the name of the next island
        [SerializeField]
        private TMP_Text textCurrentIslandRegenValue; // Text field for displaying the regeneration value of the current island
        [SerializeField]
        private TMP_Text textNextIslandRegenValue; // Text field for displaying the regeneration value of the next island
        [SerializeField]
        private TMP_Text textCurrentIslandStorage; // Text field for displaying the storage of the current island
        [SerializeField]
        private TMP_Text textNextIslandStorage; // Text field for displaying the storage of the next island
        [SerializeField]
        private Text textUpgradeCost; // Text field for displaying the cost of upgrading
        [SerializeField]
        private Text textGoldenTicketGain; // Text field for displaying the gain of golden tickets
        [SerializeField]
        private Text textGoldenTicketCurrentAmount; // Text field for displaying the current amount of golden tickets

        // Images
        [SerializeField]
        private Image goldenTicketPercentage; // Image for the percentage of golden tickets
        [SerializeField]
        private Image iconNextIsland; // Image for the icon of the next island

        // Other game objects
        [SerializeField]
        private GameObject mapContent; // Content for the map
        [SerializeField]
        private GameObject[] fireAnim; // Array of game objects for the fire animation
        [SerializeField]
        private GameObject obj_ShipSailing; // Game object for the ship sailing animation
        [SerializeField]
        private GameObject obj_WhiteScreen; // Game object for the white screen

        #endregion

        #region =================================================== NAVIGATION ===================================================
        // This region handles navigation-related functionality

        /// <summary>
        /// Handles initialization of the island.
        /// </summary>
        private void Start()
        {
            Debug.Log(""IslandManager: Initialization started."");
        
            // Play the island background music
            GlobalScriptScene.Instance.PlayAudioMusic(islandBGM);
        
            // Retrieve island data
            GetIslandData();
        
            // If the island hasn't been initialized yet, open the tutorial panel and update the status
            if (!DataCenter.playerInfo.onBoardingCheckpoint.isInitIsland)
            {
                OpenTutorialPanel();
                UpdatePlayerIslandInitStatus();
            }
        
            // Set the default banner active state based on the configuration variable
            defaultBanner.SetActive(DataCenter.configVariable.defaultBannerToggle.island);
        
            // Show the banner ad
            ShowBannerAd();
        
            Debug.Log(""IslandManager: Initialization completed."");
        }
        
        /// <summary>
        /// Checks for the escape button press every frame.
        /// </summary>
        private void Update()
        {
            Debug.Log(""IslandManager: Checking for escape button press."");
            GlobalScriptScene.Instance.EscapeButtonExit();
        }
        
        /// <summary>
        /// Loads and displays banner ads.
        /// </summary>
        public void ShowBannerAd()
        {
            Debug.Log(""IslandManager: Preparing to load ads."");
        
            // Check if ads are preferred and the AppLovin banner is not null
            if (GeneralAdManager.AdPreference && GeneralAdManager.Instance.appLovinManager.appLovinBanner != null)
            {
                Debug.Log(""IslandManager: Displaying AppLovin banner."");
                GeneralAdManager.Instance.appLovinManager.appLovinBanner.ShowHideBanner(true);
                defaultBanner.SetActive(false);
            }
            // Check if the Maticoo banner is not null
            else if(GeneralAdManager.Instance.maticooManager.maticooBanner != null)
            {
                Debug.Log(""IslandManager: Loading Maticoo banner."");
                GeneralAdManager.Instance.maticooManager.maticooBanner.ShowHideBanner(true);
                defaultBanner.SetActive(false);
            }
        }

        /// <summary>
        /// Updates the player's island initialization status.
        /// </summary>
        private void UpdatePlayerIslandInitStatus()
        {
            Debug.Log(""UpdatePlayerIslandInitStatus: Updating status."");

            DataCenter.playerInfo.onBoardingCheckpoint.isInitIsland = true;
            var userUpdateData = CreateUserUpdateData();
            var req = CreateUpdateUserDataRequest(userUpdateData);

            PlayFabClientAPI.UpdateUserData(
                req,
                UpdateUserIslandDataResult,
                UpdateUserIslandDataError
            );
        }

        /// <summary>
        /// Creates a dictionary to hold the data to be added.
        /// </summary>
        private Dictionary<string, string> CreateUserUpdateData()
        {
            Debug.Log(""CreateUserUpdateData: Creating data dictionary."");

            return new Dictionary<string, string>
            {
                {
                    CONSTANT_VARIABLE.KEY_ON_BOARDING,
                    JsonConvert.SerializeObject(DataCenter.playerInfo.onBoardingCheckpoint)
                }
            };
        }

        /// <summary>
        /// Creates a new UpdateUserDataRequest and sets its Data property.
        /// </summary>
        private UpdateUserDataRequest CreateUpdateUserDataRequest(Dictionary<string, string> userUpdateData)
        {
            Debug.Log(""CreateUpdateUserDataRequest: Creating request."");

            return new UpdateUserDataRequest { Data = userUpdateData };
        }

        /// <summary>
        /// Handles the result of updating the user's player island data.
        /// </summary>
        private void UpdateUserIslandDataResult(UpdateUserDataResult result)
        {
            Debug.Log(""UpdateUserIslandDataResult: Update successful."");

            AnalyticEventModel.SendIslandDataTrackerData(DataCenter.islandDataStruct.detail.islandLevel);
        }

        /// <summary>
        /// Handles errors when updating the player's island initialization status.
        /// </summary>
        private void UpdateUserIslandDataError(PlayFabError error)
        {
            Debug.Log(""UpdateUserIslandDataError: Error occurred."");

            if (repeatCounter > 0)
            {
                repeatCounter--;
                UpdatePlayerIslandInitStatus();
            }
            else
            {
                ShowErrorMessage(""Request timeout, check your internet connection and try again"");
            }
        }

        /// <summary>
        /// Shows error message.
        /// </summary>
        private void ShowErrorMessage(string message)
        {
            Debug.Log(""ShowErrorMessage: Showing error message."");
            GlobalScriptScene.Instance.ShowPopUpClose(message, null);
        }

        /// <summary>
        /// Compares redeem times.
        /// </summary>
        private void CompareRedeemTime()
        {
            Debug.Log(""CompareRedeemTime: Comparing times."");

            now = TemporaryData.Date2Timestamp(System.DateTime.UtcNow)*1000;
            long lastRedeem = long.Parse(DataCenter.islandDataStruct.detail.storage.lastRedeem);
            long newRedeemTime = lastRedeem + DataCenter.islandData.islandChestRedeemInterval;

            var redeemButton = buttonRedeemGoldenTicketImage.gameObject.GetComponent<Button>();

            if (newRedeemTime < now)
            {
                Debug.Log(""CompareRedeemTime: Redeem time is less than current time."");
                redeemButton.interactable = true;
                canRedeemStorage = true;
            }
            else
            {
                Debug.Log(""CompareRedeemTime: Redeem time is not less than current time."");
                redeemButton.interactable = false;
                canRedeemStorage = false;
            }
        }

        /// <summary>
        /// Handles scene exit.
        /// </summary>
        public void ExitScene()
        {
            Debug.Log(""ExitScene: Exiting scene."");

            GlobalScriptScene.Instance.playDefaultClickButton();
            ClearAddressablesAssets();
            GlobalScriptScene.Instance.PlayLoadingClose(CONSTANT_VARIABLE.SLOT_SCENE, true);
        }

        /// <summary>
        /// Opens tutorial panel.
        /// </summary>
        public void OpenTutorialPanel()
        {
            Debug.Log(""OpenTutorialPanel: Starting."");

            GlobalScriptScene.Instance.playDefaultClickButton();

            if (!generalPurposeFlag)
            {
                Debug.Log(""OpenTutorialPanel: Flag not set. Exiting."");
                return;
            }

            generalPurposeFlag = false;
            Debug.Log(""OpenTutorialPanel: Flag set to false."");

            var oprTutorial = UnityEngine.AddressableAssets.Addressables.InstantiateAsync(""CanvasTutorial_Island"");
            Debug.Log(""OpenTutorialPanel: Instantiating tutorial canvas."");

            oprTutorial.Completed += (resu) =>
            {
                generalPurposeFlag = true;
                Debug.Log(""OpenTutorialPanel: Tutorial canvas instantiated. Flag set to true."");
            };
        }

        /// <summary>
        /// Retrieves island data.
        /// </summary>
        public void RunGetIslandData()
        {
            Debug.Log(""RunGetIslandData: Starting."");

            PlayDefaultClickButtonSound();
            GetIslandData();
        }

        /// <summary>
        /// Upgrades island.
        /// </summary>
        public void RunUpgradeIsland()
        {
            Debug.Log(""RunUpgradeIsland: Starting."");

            PlayDefaultClickButtonSound();

            if (!HasEnoughBricksForUpgrade())
            {
                Debug.Log(""RunUpgradeIsland: Insufficient bricks. Showing popup."");
                ShowInsufficientBricksPopup();
            }
            else if (!AreAllBuildingsMaxLevel())
            {
                Debug.Log(""RunUpgradeIsland: Not all buildings at max level. Showing popup."");
                ShowNotMaxLevelPopup();
            }
            else
            {
                Debug.Log(""RunUpgradeIsland: Starting island upgrade process."");
                StartIslandUpgradeProcess();
            }
        }

        /// <summary>
        /// Checks bricks for upgrade.
        /// </summary>
        private bool HasEnoughBricksForUpgrade()
        {
            Debug.Log(""HasEnoughBricksForUpgrade: Checking bricks."");

            return DataCenter.playerInfo.GetItemRemainingUse(CONSTANT_VARIABLE.ITEM_ISLAND_BRICK) >= DataCenter.islandData.islandMetadata[islandIDNext].islandCost;
        }

        /// <summary>
        /// Shows insufficient bricks popup.
        /// </summary>
        private void ShowInsufficientBricksPopup()
        {
            Debug.Log(""ShowInsufficientBricksPopup: Showing popup."");

            GlobalScriptScene.Instance.ShowPopUpClose(""Tidak memiliki cukup batu bata untuk pindah pulau"", null);
        }

        /// <summary>
        /// Checks if all buildings are at the maximum level.
        /// </summary>
        private bool AreAllBuildingsMaxLevel()
        {
            Debug.Log(""AreAllBuildingsMaxLevel: Checking building levels."");
            return totalBuildingLevel >= 25;
        }

        /// <summary>
        /// Shows a popup message indicating that not all buildings are at the maximum level.
        /// </summary>
        private void ShowNotMaxLevelPopup()
        {
            Debug.Log(""ShowNotMaxLevelPopup: Showing popup."");
            GlobalScriptScene.Instance.ShowPopUpClose(""Tidak dapat pindah pulau bila ada bangunan yang belum level max"", null);
        }

        /// <summary>
        /// Starts the island upgrade process.
        /// </summary>
        private void StartIslandUpgradeProcess()
        {
            Debug.Log(""StartIslandUpgradeProcess: Starting."");

            StartCoroutine(StartShipLoading());

            // Enable all building upgrade buttons
            for (int i = 0; i < 5; i++)
            {
                Debug.Log($""StartIslandUpgradeProcess: Enabling building upgrade button {i}."");
                EnableBuildingUpgradeButton(i);
            }

            // Set the upgrading island flag to true
            isUpgradingIsland = true;
            Debug.Log(""StartIslandUpgradeProcess: Set isUpgradingIsland to true."");

            // Clear the Addressables assets
            ClearAddressablesAssets();
            Debug.Log(""StartIslandUpgradeProcess: Cleared Addressables assets."");

            // Invoke the UpgradeIsland method after 1 second
            Invoke(""UpgradeIsland"", 1f);
            Debug.Log(""StartIslandUpgradeProcess: Invoked UpgradeIsland after 1 second."");
        }

        /// <summary>
        /// Enables the building upgrade button.
        /// </summary>
        private void EnableBuildingUpgradeButton(int index)
        {
            Debug.Log($""EnableBuildingUpgradeButton: Enabling button at index {index}."");
            buildingUpgradeButtonImage[index].gameObject.GetComponent<Button>().enabled = true;
        }

        /// <summary>
        /// Starts the ship loading animation.
        /// </summary>
        IEnumerator StartShipLoading()
        {
            Debug.Log(""StartShipLoading: Starting."");

            ToggleWhiteScreen(true);
            yield return new WaitForSeconds(0.25f);

            ToggleShipSailing(true);
            yield return new WaitForSeconds(0.25f);

            ToggleWhiteScreen(false);
            Debug.Log(""StartShipLoading: Completed."");
        }

        /// <summary>
        /// Shows the ship sailing animation.
        /// </summary>
        private void ShowShipSailing()
        {
            Debug.Log(""ShowShipSailing: Showing animation."");
            obj_ShipSailing.SetActive(true);
        }

        /// <summary>
        /// Triggers the building upgrade process.
        /// </summary>
        public void RunUpgradeBuilding()
        {
            Debug.Log(""RunUpgradeBuilding: Starting."");

            PlayDefaultClickButtonSound();
            UpgradeBuilding();
            Debug.Log(""RunUpgradeBuilding: Completed."");
        }

        /// <summary>
        /// Triggers the building repair process.
        /// </summary>
        public void RunFixBuilding()
        {
            Debug.Log(""RunFixBuilding: Starting."");

            PlayDefaultClickButtonSound();
            FixBuilding();
            Debug.Log(""RunFixBuilding: Completed."");
        }

        /// <summary>
        /// Triggers the storage redemption process.
        /// </summary>
        public void RunRedeemStorage()
        {
            Debug.Log(""RunRedeemStorage: Starting."");

            if (!isRedeemTriggered)
            {
                if (IsStorageEmpty())
                {
                    Debug.Log(""RunRedeemStorage: Storage is empty. Showing popup."");
                    ShowEmptyStoragePopup();
                }
                else
                {
                    Debug.Log(""RunRedeemStorage: Storage is not empty. Starting redemption process."");
                    PlayDefaultClickButtonSound();
                    ShowWaitingPopup();
                    isRedeemTriggered = true;
                    RedeemStorage();
                }
            }
        }

        /// <summary>
        /// Checks if the storage is empty.
        /// </summary>
        /// <returns>True if the storage is empty, false otherwise.</returns>
        private bool IsStorageEmpty()
        {
            Debug.Log(""IsStorageEmpty: Checking storage."");
            return DataCenter.islandDataStruct.detail.storage.currentAmount <= 0;
        }

        /// <summary>
        /// Shows a popup message indicating that the storage is empty.
        /// </summary>
        private void ShowEmptyStoragePopup()
        {
            Debug.Log(""ShowEmptyStoragePopup: Showing popup."");
            GlobalScriptScene.Instance.ShowPopUpClose(""Tidak terdapat golden ticket di dalam storage"", null);
        }

        /// <summary>
        /// Shows a waiting popup.
        /// </summary>
        private void ShowWaitingPopup()
        {
            Debug.Log(""ShowWaitingPopup: Showing popup."");
            GlobalScriptScene.Instance.SetPopupWait(true, false);
        }

        /// <summary>
        /// Closes the insufficient brick panel.
        /// </summary>
        public void CloseLackBrickPanel()
        {
            Debug.Log(""CloseLackBrickPanel: Starting."");
            PlayDefaultClickButtonSound();
            panelInsufficientBrick.SetActive(false);

            if (!panelUpgradeIsland.activeInHierarchy)
            {
                Debug.Log(""CloseLackBrickPanel: Hiding shade panel."");
                panelShade.SetActive(false);
            }
        }

        /// <summary>
        /// Opens the panel for redeeming golden tickets.
        /// </summary>
        public void OpenRedeemGoldenTicketPanel()
        {
            Debug.Log(""OpenRedeemGoldenTicketPanel: Starting."");

            PlayDefaultClickButtonSound();
            UpdateGoldenTicketAmount();
            CalculateGoldenTicketProgress();
            ShowRedeemGoldenTicketPanel();
            HideBannerAds();

            Debug.Log(""OpenRedeemGoldenTicketPanel: Completed."");
        }

        /// <summary>
        /// Updates the text field with the current amount of golden tickets.
        /// </summary>
        private void UpdateGoldenTicketAmount()
        {
            Debug.Log(""UpdateGoldenTicketAmount: Updating."");
            textGoldenTicketCurrentAmount.text = islandStorageInfo;
        }

        /// <summary>
        /// Calculates and sets the fill amount for the golden ticket progress bar.
        /// </summary>
        private void CalculateGoldenTicketProgress()
        {
            Debug.Log(""CalculateGoldenTicketProgress: Calculating."");
            goldenTicketPercentage.fillAmount = (float)DataCenter.islandDataStruct.detail.storage.currentAmount / DataCenter.islandDataStruct.detail.storage.totalAmount;
        }

        /// <summary>
        /// Shows the shade and redeem golden ticket panels.
        /// </summary>
        private void ShowRedeemGoldenTicketPanel()
        {
            Debug.Log(""ShowRedeemGoldenTicketPanel: Showing."");
            panelShade.SetActive(true);
            panelRedeemGoldenTicket.SetActive(true);
        }

        /// <summary>
        /// Closes the panel for redeeming golden tickets.
        /// </summary>
        public void CloseRedeemGoldenTicketPanel()
        {
            Debug.Log(""CloseRedeemGoldenTicketPanel: Starting."");

            PlayDefaultClickButtonSound();
            HidePanel(panelShade);
            HidePanel(panelRedeemGoldenTicket);
            ShowBannerAd();

            Debug.Log(""CloseRedeemGoldenTicketPanel: Completed."");
        }

        /// <summary>
        /// Opens the panel for upgrading the island.
        /// </summary>
        public void OpenUpgradeIslandPanel()
        {
            Debug.Log(""OpenUpgradeIslandPanel: Starting."");

            PlayDefaultClickButtonSound();
            ShowPanel(panelShade);
            ShowPanel(panelUpgradeIsland);
            SetIslandUpgradeTextFields();
            SetIslandProgressionBar();

            Debug.Log(""OpenUpgradeIslandPanel: Completed."");
        }

        /// <summary>
        /// Closes the panel for upgrading the island.
        /// </summary>
        public void CloseUpgradeIslandPanel()
        {
            Debug.Log(""CloseUpgradeIslandPanel: Starting."");

            PlayDefaultClickButtonSound();
            HidePanel(panelShade);
            HidePanel(panelUpgradeIsland);

            Debug.Log(""CloseUpgradeIslandPanel: Completed."");
        }

        /// <summary>
        /// Opens the map panel.
        /// </summary>
        public void OpenMapPanel()
        {
            Debug.Log(""OpenMapPanel: Starting."");

            PlayDefaultClickButtonSound();
            SetMapContentPosition();
            ShowPanel(panelShade);
            ShowPanel(panelMap);

            Debug.Log(""OpenMapPanel: Completed."");
        }

        /// <summary>
        /// Sets the text fields for the island upgrade panel.
        /// </summary>
        private void SetIslandUpgradeTextFields()
        {
            Debug.Log(""SetIslandUpgradeTextFields: Starting."");

            // Set the text fields with the current and next island data
            textNextIslandName.text = DataCenter.islandData.islandMetadata[islandIDNext].islandSubName.ToUpper();
            textCurrentIslandRegenValue.text = (DataCenter.islandData.islandMetadata[islandID].islandBaseRegen + 20).ToString().ToUpper();
            textNextIslandRegenValue.text = (DataCenter.islandData.islandMetadata[islandIDNext].islandBaseRegen + 20).ToString().ToUpper();
            textCurrentIslandStorage.text = ""Kapasitas\n"" + DataCenter.islandData.islandMetadata[islandID].islandStorage.ToString().ToUpper();
            textNextIslandStorage.text = ""Kapasitas\n"" + DataCenter.islandData.islandMetadata[islandIDNext].islandStorage.ToString().ToUpper();
            textUpgradeCost.text = DataCenter.islandData.islandMetadata[islandIDNext].islandCost.ToString();

            Debug.Log(""SetIslandUpgradeTextFields: Completed."");
        }

        /// <summary>
        /// Sets the fill amount for the island progression bar and the total island building level text.
        /// </summary>
        private void SetIslandProgressionBar()
        {
            Debug.Log(""SetIslandProgressionBar: Starting."");

            barIslandProgression2.fillAmount = (float)totalBuildingLevel / 25;
            textTotalIslandBuildingLevel2.text = totalBuildingLevel + ""/25"";

            Debug.Log(""SetIslandProgressionBar: Completed."");
        }

        /// <summary>
        /// Sets the new position for the map content.
        /// </summary>
        private void SetMapContentPosition()
        {
            Debug.Log(""SetMapContentPosition: Starting."");

            float newPosition = -DataCenter.islandDataStruct.detail.islandLevel * 605 + 605;
            mapContent.GetComponent<RectTransform>().anchoredPosition = new Vector2(0, newPosition);

            Debug.Log(""SetMapContentPosition: Completed."");
        }

        /// <summary>
        /// Closes the map panel.
        /// </summary>
        public void CloseMapPanel()
        {
            Debug.Log(""CloseMapPanel: Starting."");

            PlayDefaultClickButtonSound();
            HidePanel(panelShade);
            HidePanel(panelMap);

            Debug.Log(""CloseMapPanel: Completed."");
        }

        /// <summary>
        /// Shows a panel.
        /// </summary>
        private void ShowPanel(GameObject panel)
        {
            Debug.Log(""ShowPanel: Showing panel."");

            panel.SetActive(true);
        }

        /// <summary>
        /// Hides a panel.
        /// </summary>
        private void HidePanel(GameObject panel)
        {
            Debug.Log(""HidePanel: Hiding panel."");

            panel.SetActive(false);
        }

        /// <summary>
        /// Hides banner ads.
        /// </summary>
        private void HideBannerAds()
        {
            Debug.Log(""HideBannerAds: Starting."");

            if (GeneralAdManager.AdPreference && GeneralAdManager.Instance.appLovinManager.appLovinBanner != null)
            {
                GeneralAdManager.Instance.appLovinManager.appLovinBanner.ShowHideBanner(false);
            }
            else if(GeneralAdManager.Instance.maticooManager.maticooBanner != null)
            {
                GeneralAdManager.Instance.maticooManager.maticooBanner.ShowHideBanner(false);
            }

            defaultBanner.SetActive(false);

            Debug.Log(""HideBannerAds: Completed."");
        }

        /// <summary>
        /// Plays the default click button sound.
        /// </summary>
        private void PlayDefaultClickButtonSound()
        {
            Debug.Log(""PlayDefaultClickButtonSound: Playing sound."");
            GlobalScriptScene.Instance.playDefaultClickButton();
        }

        #endregion

        #region CLOUDSCRIPT FUNCTIONS

        /// <summary>
        /// Fetches the island data from the server.
        /// </summary>
        private void GetIslandData()
        {
            Debug.Log(""GetIslandData: Starting."");

            // Create a new request for the island data
            var req = CreateIslandDataRequest();

            // Execute the function to get the island data
            PlayFabCloudScriptAPI.ExecuteFunction(
                req,
                OnIslandDataResult,
                OnIslandDataError
            );

            Debug.Log(""GetIslandData: Completed."");
        }

        /// <summary>
        /// Creates a new request for the island data.
        /// </summary>
        private ExecuteFunctionRequest CreateIslandDataRequest()
        {
            Debug.Log(""CreateIslandDataRequest: Creating request."");

            return new ExecuteFunctionRequest
            {
                Entity = new PlayFab.CloudScriptModels.EntityKey
                {
                    Id = PlayFabSettings.staticPlayer.EntityId,
                    Type = PlayFabSettings.staticPlayer.EntityType
                },
                FunctionName = CONSTANT_VARIABLE.FUNC_AZURE_ISLAND_GETISLANDDATA,
                GeneratePlayStreamEvent = false
            };
        }

        /// <summary>
        /// Handles the server response when the island data is received.
        /// </summary>
        private void OnIslandDataResult(ExecuteFunctionResult result)
        {
            Debug.Log(""OnIslandDataResult: Processing result."");

            // Deserialize the server response and store it in the local database
            DataCenter.islandDataStruct = JsonConvert.DeserializeObject<IslandDataStruct>(
                result.FunctionResult.ToString()
            );

            // Check the server response code and act accordingly
            switch (DataCenter.islandDataStruct.code)
            {
                case 200:
                    // If the response code is 200, set the island data
                    SetIslandData();
                    break;
                default:
                    // If the response code is not 200, show an error message to the user
                    ShowErrorMessage(DataCenter.islandDataStruct.message);
                    break;
            }

            Debug.Log(""OnIslandDataResult: Completed."");
        }

        /// <summary>
        /// Handles errors that occur when fetching the island data.
        /// </summary>
        private void OnIslandDataError(PlayFabError error)
        {
            Debug.Log(""OnIslandDataError: Processing error."");

            if (repeatCounter > 0)
            {
                // If the repeat counter is greater than 0, decrement it and try to get the island data again
                repeatCounter--;
                GetIslandData();
            }
            else
            {
                // If the repeat counter is 0, show an error message to the user
                ShowErrorMessage(""Request timeout, check your internet connection and try again."");
            }

            Debug.Log(""OnIslandDataError: Completed."");
        }

        /// <summary>
        /// Sets the island data.
        /// </summary>
        private void SetIslandData()
        {
            Debug.Log(""SetIslandData: Starting."");

            totalBuildingLevel = CalculateTotalBuildingLevel();
            GenerateIslandIDs();
            GenerateIslandStorageInfo();
            GenerateIslandBuildingLevel();
            DataCenter.islandDataStruct.detail.Mapper();
            AddBuildingLevelsToDictionary();
            AddBuildingStatesToDictionary();
            ResetBuildingInfoPanel();
            LoadIslandBuildingAssets();

            Debug.Log(""SetIslandData: Completed."");
        }

        /// <summary>
        /// Calculates the total building level.
        /// </summary>
        /// <returns>The total building level.</returns>
        private int CalculateTotalBuildingLevel()
        {
            Debug.Log(""CalculateTotalBuildingLevel: Calculating."");

            return DataCenter.islandDataStruct.detail.buildingLevel.building1
                + DataCenter.islandDataStruct.detail.buildingLevel.building2
                + DataCenter.islandDataStruct.detail.buildingLevel.building3
                + DataCenter.islandDataStruct.detail.buildingLevel.building4
                + DataCenter.islandDataStruct.detail.buildingLevel.building5;
        }

        /// <summary>
        /// Generates the island IDs.
        /// </summary>
        private void GenerateIslandIDs()
        {
            Debug.Log(""GenerateIslandIDs: Generating."");

            islandID = string.Concat(""island"", DataCenter.islandDataStruct.detail.islandLevel);
            islandIDNext = string.Concat(""island"", DataCenter.islandDataStruct.detail.islandLevel + 1);
            islandAssetID = string.Concat(""islandAsset_"", DataCenter.islandDataStruct.detail.islandLevel);
        }

        /// <summary>
        /// Generates the island storage info.
        /// </summary>
        private void GenerateIslandStorageInfo()
        {
            Debug.Log(""GenerateIslandStorageInfo: Generating."");

            islandStorageInfo = string.Concat(
                DataCenter.islandDataStruct.detail.storage.currentAmount,
                ""/"",
                DataCenter.islandDataStruct.detail.storage.totalAmount
            );
        }

        /// <summary>
        /// Generates the island building level.
        /// </summary>
        private void GenerateIslandBuildingLevel()
        {
            Debug.Log(""GenerateIslandBuildingLevel: Generating."");

            islandBuildingLevel = string.Concat(totalBuildingLevel, ""/25"");
        }

        /// <summary>
        /// Adds the building levels to the dictionary.
        /// </summary>
        private void AddBuildingLevelsToDictionary()
        {
            Debug.Log(""AddBuildingLevelsToDictionary: Adding."");

            DataCenter.islandDataStruct.detail.dictBuildingMax.Add(""building1"", DataCenter.islandDataStruct.detail.buildingLevel.building1);
            DataCenter.islandDataStruct.detail.dictBuildingMax.Add(""building2"", DataCenter.islandDataStruct.detail.buildingLevel.building2);
            DataCenter.islandDataStruct.detail.dictBuildingMax.Add(""building3"", DataCenter.islandDataStruct.detail.buildingLevel.building3);
            DataCenter.islandDataStruct.detail.dictBuildingMax.Add(""building4"", DataCenter.islandDataStruct.detail.buildingLevel.building4);
            DataCenter.islandDataStruct.detail.dictBuildingMax.Add(""building5"", DataCenter.islandDataStruct.detail.buildingLevel.building5);
        }

        /// <summary>
        /// Adds the building states to the dictionary.
        /// </summary>
        private void AddBuildingStatesToDictionary()
        {
            Debug.Log(""AddBuildingStatesToDictionary: Adding."");

            DataCenter.islandDataStruct.detail.dictBuildingState.Add(""building1"", DataCenter.islandDataStruct.detail.buildingState.building1);
            DataCenter.islandDataStruct.detail.dictBuildingState.Add(""building2"", DataCenter.islandDataStruct.detail.buildingState.building2);
            DataCenter.islandDataStruct.detail.dictBuildingState.Add(""building3"", DataCenter.islandDataStruct.detail.buildingState.building3);
            DataCenter.islandDataStruct.detail.dictBuildingState.Add(""building4"", DataCenter.islandDataStruct.detail.buildingState.building4);
            DataCenter.islandDataStruct.detail.dictBuildingState.Add(""building5"", DataCenter.islandDataStruct.detail.buildingState.building5);
        }

        /// <summary>
        /// Releases the loaded island asset data.
        /// </summary>
        private void ClearAddressablesAssets()
        {
            Debug.Log(""ClearAddressablesAssets: Start"");

            if (islandAssetData != null)
            {
                UnityEngine.AddressableAssets.Addressables.Release(islandAssetData);
            }

            Debug.Log(""ClearAddressablesAssets: End"");
        }

        /// <summary>
        /// Loads the island building assets.
        /// </summary>
        private void LoadIslandBuildingAssets()
        {
            Debug.Log(""LoadIslandBuildingAssets: Start"");

            var oprIsland = UnityEngine.AddressableAssets.Addressables.LoadAssetAsync<IslandAssetData>(islandAssetID);
            oprIsland.Completed += (resu) =>
            {
                islandAssetData = resu.Result;
                SetIslandBuildingAsset();
            };

            Debug.Log(""LoadIslandBuildingAssets: End"");
        }

        /// <summary>
        /// Sets the island building assets.
        /// </summary>
        private void SetIslandBuildingAsset()
        {
            Debug.Log(""SetIslandBuildingAsset: Start"");

            ClearBuildingSprites();
            int[] buildingLevels = GetBuildingLevels();
            SetBuildingSprites(buildingLevels);
            islandBG.sprite = islandAssetData.islandBackground;
            iconNextIsland.sprite = islandAssetData.nextIslandIcon;
            checkpointFlag = true;
            StartCoroutine(SetIslandInfoDisplayWait());

            Debug.Log(""SetIslandBuildingAsset: End"");
        }

        /// <summary>
        /// Clears the building sprites.
        /// </summary>
        private void ClearBuildingSprites()
        {
            Debug.Log(""ClearBuildingSprites: Start"");

            spriteBuilding1.sprite = null;
            spriteBuilding2.sprite = null;
            spriteBuilding3.sprite = null;
            spriteBuilding4.sprite = null;
            spriteBuilding5.sprite = null;

            Debug.Log(""ClearBuildingSprites: End"");
        }

        /// <summary>
        /// Gets the building levels.
        /// </summary>
        private int[] GetBuildingLevels()
        {
            Debug.Log(""GetBuildingLevels: Start"");

            int[] buildingLevels = new int[]
            {
                DataCenter.islandDataStruct.detail.buildingState.building1,
                DataCenter.islandDataStruct.detail.buildingState.building2,
                DataCenter.islandDataStruct.detail.buildingState.building3,
                DataCenter.islandDataStruct.detail.buildingState.building4,
                DataCenter.islandDataStruct.detail.buildingState.building5
            };

            Debug.Log(""GetBuildingLevels: End"");

            return buildingLevels;
        }

        /// <summary>
        /// Sets building sprites.
        /// </summary>
        private void SetBuildingSprites(int[] buildingLevels)
        {
            Debug.Log(""SetBuildingSprites: Start"");

            for (int i = 0; i < buildingLevels.Length; i++)
            {
                if (buildingLevels[i] > 0)
                {
                    Sprite sprite = islandAssetData.buildingContent[i].levelBuilding[buildingLevels[i] - 1];
                    switch (i)
                    {
                        case 0:
                            spriteBuilding1.sprite = sprite;
                            break;
                        case 1:
                            spriteBuilding2.sprite = sprite;
                            break;
                        case 2:
                            spriteBuilding3.sprite = sprite;
                            break;
                        case 3:
                            spriteBuilding4.sprite = sprite;
                            break;
                        case 4:
                            spriteBuilding5.sprite = sprite;
                            break;
                    }
                }
            }

            Debug.Log(""SetBuildingSprites: End"");
        }

        /// <summary>
        /// Sets island info display.
        /// </summary>
        private IEnumerator SetIslandInfoDisplayWait()
        {
            Debug.Log(""SetIslandInfoDisplayWait: Start"");

            yield return new WaitUntil(() => checkpointFlag);
            SetIslandInfoDisplay();
            checkpointFlag = false;

            Debug.Log(""SetIslandInfoDisplayWait: End"");
        }

        /// <summary>
        /// Checks bricks for upgrade.
        /// </summary>
        private void CheckBrickToUpgrade(int buttonID)
        {
            Debug.Log(""CheckBrickToUpgrade: Start"");

            if (DataCenter.playerInfo.GetItemRemainingUse(CONSTANT_VARIABLE.ITEM_ISLAND_BRICK) < DataCenter.islandData.buildingUpgradeCost)
            {
                SetButtonState(buttonID, 1, false);
            }

            Debug.Log(""CheckBrickToUpgrade: End"");
        }

        /// <summary>
        /// Checks bricks for fix.
        /// </summary>
        private void CheckBrickToFix(int buttonID)
        {
            Debug.Log(""CheckBrickToFix: Start"");

            if (DataCenter.playerInfo.GetItemRemainingUse(CONSTANT_VARIABLE.ITEM_ISLAND_BRICK) < DataCenter.islandData.buildingFixCost)
            {
                SetButtonState(buttonID, 3, false);
            }

            Debug.Log(""CheckBrickToFix: End"");
        }

        /// <summary>
        /// Sets button state.
        /// </summary>
        private void SetButtonState(int buttonID, int spriteVariantIndex, bool isEnabled)
        {
            Debug.Log(""SetButtonState: Start"");

            buildingUpgradeButtonImage[buttonID].sprite = buildingUpgradeButtonImageVariants[spriteVariantIndex];
            buildingUpgradeButtonImage[buttonID].gameObject.GetComponent<Button>().enabled = isEnabled;

            Debug.Log(""SetButtonState: End"");
        }

        /// <summary>
        /// Sets island info display.
        /// </summary>
        private void SetIslandInfoDisplay()
        {
            Debug.Log(""SetIslandInfoDisplay: Start"");

            // Get the shield count, capped at 3
            int shieldCount = Math.Min(3, DataCenter.playerInfo.GetItemRemainingUse(CONSTANT_VARIABLE.ITEM_ISLAND_SHIELD));

            // Update the display of various currencies and items
            textGoldenTicketCurrency.text = DataCenter.GetFormatDecimalNumber(DataCenter.playerInfo.playerCurrency.GetCurrencyValue(CURRENCY.TG));
            textBrickCurrency.text = DataCenter.GetFormatDecimalNumber(DataCenter.playerInfo.GetItemRemainingUse(CONSTANT_VARIABLE.ITEM_ISLAND_BRICK));
            textShieldCurrency.text = $""{shieldCount}/{DataCenter.islandData.maxShieldLimit}"";

            // Update the display of island level and name
            textIslandLevel.text = DataCenter.islandData.islandMetadata[islandID].islandName.ToUpper();
            textIslandName.text = DataCenter.islandData.islandMetadata[islandID].islandSubName.ToUpper();

            // Update the display of regeneration value and storage info
            textTotalRegenValue.text = DataCenter.islandDataStruct.detail.regen.regen.ToString();
            textStorageInfo.text = islandStorageInfo;
            textTotalIslandBuildingLevel1.text = islandBuildingLevel;

            // Update the progression bars
            barChestProgression.fillAmount = (float)DataCenter.islandDataStruct.detail.storage.currentAmount / DataCenter.islandDataStruct.detail.storage.totalAmount;
            barIslandProgression1.fillAmount = (float)totalBuildingLevel / 25;

            // Compare the redeem time
            CompareRedeemTime();

            // Unlock the map icons up to the current island level
            for (int i = 0; i < DataCenter.islandDataStruct.detail.islandLevel; i++)
            {
                mapLockIcons[i].SetActive(false);
            }

            // Update the info for all buildings
            SetAllBuildingsInfo();

            Debug.Log(""SetIslandInfoDisplay: End"");
        }

        /// <summary>
        /// Sets all buildings info and handles island upgrade.
        /// </summary>
        private void SetAllBuildingsInfo()
        {
            Debug.Log(""SetAllBuildingsInfo: Start"");

            // Set information for each building
            SetBuildingInfo1();
            SetBuildingInfo2();
            SetBuildingInfo3();
            SetBuildingInfo4();
            SetBuildingInfo5();

            // If the island is being upgraded, send analytics data and stop ship sailing
            if (isUpgradingIsland)
            {
                AnalyticEventModel.SendIslandDataTrackerData(DataCenter.islandDataStruct.detail.islandLevel);
                StartCoroutine(StopShipSailing());
                isUpgradingIsland = false;
            }

            // Play loading open animation, disable popup wait and deactivate panel blocker
            GlobalScriptScene.Instance.PlayLoadingOpen();
            GlobalScriptScene.Instance.SetPopupWait(false);
            panelBlocker.SetActive(false);

            Debug.Log(""SetAllBuildingsInfo: End"");
        }

        /// <summary>
        /// Sets building info for building 1.
        /// </summary>
        private void SetBuildingInfo1()
        {
            Debug.Log(""SetBuildingInfo1: Start"");

            // Check if building state equals building level and is less than 5
            if (DataCenter.islandDataStruct.detail.buildingState.building1 == DataCenter.islandDataStruct.detail.buildingLevel.building1 && DataCenter.islandDataStruct.detail.buildingState.building1 < 5)
            {
                textCostValue[0].text = DataCenter.islandData.buildingUpgradeCost.ToString();
                buildingUpgradeButtonImage[0].sprite = buildingUpgradeButtonImageVariants[0];
                CheckBrickToUpgrade(0);
            }
            // Check if building state is less than building level
            else if (DataCenter.islandDataStruct.detail.buildingState.building1 < DataCenter.islandDataStruct.detail.buildingLevel.building1)
            {
                if (DataCenter.islandDataStruct.detail.buildingState.building1 == 0)
                {
                    spriteBuilding1.sprite = destroyedBuildingSprite;
                }
                textCostValue[0].text = (DataCenter.islandData.buildingFixCost * (DataCenter.islandDataStruct.detail.buildingLevel.building1 - DataCenter.islandDataStruct.detail.buildingState.building1)).ToString();
                buildingUpgradeButtonImage[0].sprite = buildingUpgradeButtonImageVariants[2];
                spriteBuilding1.color = new Color32(130, 130, 130, 255);
                fireAnim[0].SetActive(true);
                CheckBrickToFix(0);
            }
            // Check if building state is 5
            else if (DataCenter.islandDataStruct.detail.buildingState.building1 == 5)
            {
                buildingUpgradeButtonImage[0].sprite = buildingUpgradeButtonImageVariants[4];
                buildingUpgradeButtonImage[0].gameObject.GetComponent<Button>().enabled = false;
            }

            // Set upgrade level icons for building 1
            for (int i = 0; i < DataCenter.islandDataStruct.detail.buildingState.building1; i++)
            {
                upgradeLevelIconBuilding1[i].sprite = upgradeLevelIconVariants[1];
            }

            Debug.Log(""SetBuildingInfo1: End"");
        }

        /// <summary>
        /// Sets building info for building 2.
        /// </summary>
        private void SetBuildingInfo2()
        {
            Debug.Log(""SetBuildingInfo2: Start"");

            // Check if building state equals building level and is less than 5
            if (DataCenter.islandDataStruct.detail.buildingState.building2 == DataCenter.islandDataStruct.detail.buildingLevel.building2 && DataCenter.islandDataStruct.detail.buildingState.building2 < 5)
            {
                textCostValue[1].text = DataCenter.islandData.buildingUpgradeCost.ToString();
                buildingUpgradeButtonImage[1].sprite = buildingUpgradeButtonImageVariants[0];
                CheckBrickToUpgrade(1);
            }
            // Check if building state is less than building level
            else if (DataCenter.islandDataStruct.detail.buildingState.building2 < DataCenter.islandDataStruct.detail.buildingLevel.building2)
            {
                if (DataCenter.islandDataStruct.detail.buildingState.building2 == 0)
                {
                    spriteBuilding2.sprite = destroyedBuildingSprite;
                }
                textCostValue[1].text = (DataCenter.islandData.buildingFixCost * (DataCenter.islandDataStruct.detail.buildingLevel.building2 - DataCenter.islandDataStruct.detail.buildingState.building2)).ToString();
                buildingUpgradeButtonImage[1].sprite = buildingUpgradeButtonImageVariants[2];
                spriteBuilding2.color = new Color32(130, 130, 130, 255);
                fireAnim[1].SetActive(true);
                CheckBrickToFix(1);
            }
            // Check if building state is 5
            else if (DataCenter.islandDataStruct.detail.buildingState.building2 == 5)
            {
                buildingUpgradeButtonImage[1].sprite = buildingUpgradeButtonImageVariants[4];
                buildingUpgradeButtonImage[1].gameObject.GetComponent<Button>().enabled = false;
            }

            // Set upgrade level icons for building 2
            for (int i = 0; i < DataCenter.islandDataStruct.detail.buildingState.building2; i++)
            {
                upgradeLevelIconBuilding2[i].sprite = upgradeLevelIconVariants[1];
            }

            Debug.Log(""SetBuildingInfo2: End"");
        }

        /// <summary>
        /// Sets building info for building 3.
        /// </summary>
        private void SetBuildingInfo3()
        {
            Debug.Log(""SetBuildingInfo3: Start"");

            // Check if building state equals building level and is less than 5
            if (DataCenter.islandDataStruct.detail.buildingState.building3 == DataCenter.islandDataStruct.detail.buildingLevel.building3 && DataCenter.islandDataStruct.detail.buildingState.building3 < 5)
            {
                textCostValue[2].text = DataCenter.islandData.buildingUpgradeCost.ToString();
                buildingUpgradeButtonImage[2].sprite = buildingUpgradeButtonImageVariants[0];
                CheckBrickToUpgrade(2);
            }
            // Check if building state is less than building level
            else if (DataCenter.islandDataStruct.detail.buildingState.building3 < DataCenter.islandDataStruct.detail.buildingLevel.building3)
            {
                if (DataCenter.islandDataStruct.detail.buildingState.building3 == 0)
                {
                    spriteBuilding3.sprite = destroyedBuildingSprite;
                }
                textCostValue[2].text = (DataCenter.islandData.buildingFixCost * (DataCenter.islandDataStruct.detail.buildingLevel.building3 - DataCenter.islandDataStruct.detail.buildingState.building3)).ToString();
                buildingUpgradeButtonImage[2].sprite = buildingUpgradeButtonImageVariants[2];
                spriteBuilding3.color = new Color32(130, 130, 130, 255);
                fireAnim[2].SetActive(true);
                CheckBrickToFix(2);
            }
            // Check if building state is 5
            else if (DataCenter.islandDataStruct.detail.buildingState.building3 == 5)
            {
                buildingUpgradeButtonImage[2].sprite = buildingUpgradeButtonImageVariants[4];
                buildingUpgradeButtonImage[2].gameObject.GetComponent<Button>().enabled = false;
            }

            // Set upgrade level icons for building 3
            for (int i = 0; i < DataCenter.islandDataStruct.detail.buildingState.building3; i++)
            {
                upgradeLevelIconBuilding3[i].sprite = upgradeLevelIconVariants[1];
            }

            Debug.Log(""SetBuildingInfo3: End"");
        }

        /// <summary>
        /// Sets building info for building 4.
        /// </summary>
        private void SetBuildingInfo4()
        {
            Debug.Log(""SetBuildingInfo4: Start"");

            // Check if building state equals building level and is less than 5
            if (DataCenter.islandDataStruct.detail.buildingState.building4 == DataCenter.islandDataStruct.detail.buildingLevel.building4 && DataCenter.islandDataStruct.detail.buildingState.building4 < 5)
            {
                textCostValue[3].text = DataCenter.islandData.buildingUpgradeCost.ToString();
                buildingUpgradeButtonImage[3].sprite = buildingUpgradeButtonImageVariants[0];
                CheckBrickToUpgrade(3);
            }
            // Check if building state is less than building level
            else if (DataCenter.islandDataStruct.detail.buildingState.building4 < DataCenter.islandDataStruct.detail.buildingLevel.building4)
            {
                if (DataCenter.islandDataStruct.detail.buildingState.building4 == 0)
                {
                    spriteBuilding4.sprite = destroyedBuildingSprite;
                }
                textCostValue[3].text = (DataCenter.islandData.buildingFixCost * (DataCenter.islandDataStruct.detail.buildingLevel.building4 - DataCenter.islandDataStruct.detail.buildingState.building4)).ToString();
                buildingUpgradeButtonImage[3].sprite = buildingUpgradeButtonImageVariants[2];
                spriteBuilding4.color = new Color32(130, 130, 130, 255);
                fireAnim[3].SetActive(true);
                CheckBrickToFix(3);
            }
            // Check if building state is 5
            else if (DataCenter.islandDataStruct.detail.buildingState.building4 == 5)
            {
                buildingUpgradeButtonImage[3].sprite = buildingUpgradeButtonImageVariants[4];
                buildingUpgradeButtonImage[3].gameObject.GetComponent<Button>().enabled = false;
            }

            // Set upgrade level icons for building 4
            for (int i = 0; i < DataCenter.islandDataStruct.detail.buildingState.building4; i++)
            {
                upgradeLevelIconBuilding4[i].sprite = upgradeLevelIconVariants[1];
            }

            Debug.Log(""SetBuildingInfo4: End"");
        }

        /// <summary>
        /// Sets building info for building 5.
        /// </summary>
        private void SetBuildingInfo5()
        {
            Debug.Log(""SetBuildingInfo5: Start"");

            // Check if building state equals building level and is less than 5
            if (DataCenter.islandDataStruct.detail.buildingState.building5 == DataCenter.islandDataStruct.detail.buildingLevel.building5 && DataCenter.islandDataStruct.detail.buildingState.building5 < 5)
            {
                textCostValue[4].text = DataCenter.islandData.buildingUpgradeCost.ToString();
                buildingUpgradeButtonImage[4].sprite = buildingUpgradeButtonImageVariants[0];
                CheckBrickToUpgrade(4);
            }
            // Check if building state is less than building level
            else if (DataCenter.islandDataStruct.detail.buildingState.building5 < DataCenter.islandDataStruct.detail.buildingLevel.building5)
            {
                if (DataCenter.islandDataStruct.detail.buildingState.building5 == 0)
                {
                    spriteBuilding5.sprite = destroyedBuildingSprite;
                }
                textCostValue[4].text = (DataCenter.islandData.buildingFixCost * (DataCenter.islandDataStruct.detail.buildingLevel.building5 - DataCenter.islandDataStruct.detail.buildingState.building5)).ToString();
                buildingUpgradeButtonImage[4].sprite = buildingUpgradeButtonImageVariants[2];
                spriteBuilding5.color = new Color32(130, 130, 130, 255);
                fireAnim[4].SetActive(true);
                CheckBrickToFix(4);
            }
            // Check if building state is 5
            else if (DataCenter.islandDataStruct.detail.buildingState.building5 == 5)
            {
                buildingUpgradeButtonImage[4].sprite = buildingUpgradeButtonImageVariants[4];
                buildingUpgradeButtonImage[4].gameObject.GetComponent<Button>().enabled = false;
            }

            // Set upgrade level icons for building 5
            for (int i = 0; i < DataCenter.islandDataStruct.detail.buildingState.building5; i++)
            {
                upgradeLevelIconBuilding5[i].sprite = upgradeLevelIconVariants[1];
            }

            Debug.Log(""SetBuildingInfo5: End"");
        }

        /// <summary>
        /// Resets the building information panel to its default state.
        /// </summary>
        private void ResetBuildingInfoPanel()
        {
            Debug.Log(""ResetBuildingInfoPanel: Start"");

            // Define the number of buildings
            const int numberOfBuildings = 5;

            // Loop through each building
            for (int i = 0; i < numberOfBuildings; i++)
            {
                // Reset cost value and upgrade button image
                textCostValue[i].text = ""0"";
                buildingUpgradeButtonImage[i].sprite = buildingUpgradeButtonImageVariants[0];

                // Reset upgrade level icons for each building
                upgradeLevelIconBuilding1[i].sprite = upgradeLevelIconVariants[0];
                upgradeLevelIconBuilding2[i].sprite = upgradeLevelIconVariants[0];
                upgradeLevelIconBuilding3[i].sprite = upgradeLevelIconVariants[0];
                upgradeLevelIconBuilding4[i].sprite = upgradeLevelIconVariants[0];
                upgradeLevelIconBuilding5[i].sprite = upgradeLevelIconVariants[0];
            }

            Debug.Log(""ResetBuildingInfoPanel: End"");
        }

        /// <summary>
        /// Upgrades the island by making a request to the PlayFab CloudScript API.
        /// </summary>
        private void UpgradeIsland()
        {
            Debug.Log(""UpgradeIsland: Start"");

            // Create a new request for the PlayFab CloudScript API
            var req = CreateUpgradeRequest();

            // Execute the function
            PlayFabCloudScriptAPI.ExecuteFunction(
                req,
                UpgradeIslandResult,
                UpgradeIslandError
            );

            Debug.Log(""UpgradeIsland: End"");
        }

        /// <summary>
        /// Creates a new request for the PlayFab CloudScript API to upgrade the island.
        /// </summary>
        /// <returns>The created request.</returns>
        private ExecuteFunctionRequest CreateUpgradeRequest()
        {
            Debug.Log(""CreateUpgradeRequest: Start"");

            var request = new ExecuteFunctionRequest
            {
                Entity = new PlayFab.CloudScriptModels.EntityKey()
                {
                    Id = PlayFabSettings.staticPlayer.EntityId,
                    Type = PlayFabSettings.staticPlayer.EntityType
                },
                FunctionName = CONSTANT_VARIABLE.FUNC_AZURE_ISLAND_UPGRADEISLAND,
                GeneratePlayStreamEvent = false
            };

            Debug.Log(""CreateUpgradeRequest: End"");

            return request;
        }

        /// <summary>
        /// Handles the result of the island upgrade request.
        /// </summary>
        /// <param name=""result"">The result of the request.</param>
        private void UpgradeIslandResult(ExecuteFunctionResult result)
        {
            Debug.Log(""UpgradeIslandResult: Start"");

            // Parse the result
            DataCenter.genericStruct = JsonConvert.DeserializeObject<GenericStruct>(
                result.FunctionResult.ToString()
            );

            // If the request was successful
            if (DataCenter.genericStruct.code == 200)
            {
                HandleSuccessfulUpgrade();
            }
            // If there was an error
            else if (DataCenter.genericStruct.code == 400)
            {
                HandleUpgradeError();
            }

            Debug.Log(""UpgradeIslandResult: End"");
        }

        /// <summary>
        /// Handles a successful island upgrade.
        /// </summary>
        private void HandleSuccessfulUpgrade()
        {
            Debug.Log(""HandleSuccessfulUpgrade: Start"");

            // Update the remaining uses of the item
            DataCenter.playerInfo.UpdateItemRemainingUse(
                CONSTANT_VARIABLE.ITEM_ISLAND_BRICK,
                DataCenter.islandData.islandMetadata[islandIDNext].islandCost,
                CHANGE_TYPE.DEC
            );

            // Update the brick currency text
            textBrickCurrency.text = DataCenter.GetFormatDecimalNumber(
                DataCenter.playerInfo.GetItemRemainingUse(
                    CONSTANT_VARIABLE.ITEM_ISLAND_BRICK
                )
            );

            // Close the upgrade island panel and get the island data
            CloseUpgradeIslandPanel();
            GetIslandData();

            Debug.Log(""HandleSuccessfulUpgrade: End"");
        }

        /// <summary>
        /// Handles an error during island upgrade.
        /// </summary>
        private void HandleUpgradeError()
        {
            Debug.Log(""HandleUpgradeError: Start"");

            // Show an error popup and stop the ship sailing
            ShowErrorMessage(DataCenter.genericStruct.message);
            StartCoroutine(StopShipSailing());

            Debug.Log(""HandleUpgradeError: End"");
        }

        /// <summary>
        /// Handles errors during the island upgrade process.
        /// </summary>
        private void UpgradeIslandError(PlayFabError error)
        {
            Debug.Log(""UpgradeIslandError: Start"");

            // If there are remaining retries
            if (repeatCounter > 0)
            {
                // Decrement the counter and try upgrading again
                repeatCounter--;
                UpgradeIsland();
            }
            else
            {
                // If no retries left, show an error message
                ShowErrorMessage(""Request timeout, check your internet connection and try again"");
            }

            Debug.Log(""UpgradeIslandError: End"");
        }

        /// <summary>
        /// Stops the ship sailing animation with a fade in/out effect.
        /// </summary>
        /// <returns>An IEnumerator to be used in a coroutine.</returns>
        IEnumerator StopShipSailing()
        {
            Debug.Log(""StopShipSailing: Start"");

            // Show the white screen
            ToggleWhiteScreen(true);
            yield return new WaitForSeconds(0.25f);

            // Hide the ship sailing
            ToggleShipSailing(false);
            yield return new WaitForSeconds(0.25f);

            // Hide the white screen
            ToggleWhiteScreen(false);
            yield return new WaitForSeconds(1f);

            Debug.Log(""StopShipSailing: End"");
        }

        /// <summary>
        /// Toggles the visibility of the white screen.
        /// </summary>
        /// <param name=""state"">Whether to show (true) or hide (false) the white screen.</param>
        private void ToggleWhiteScreen(bool state)
        {
            Debug.Log($""ToggleWhiteScreen: {state}"");
            obj_WhiteScreen.SetActive(state);
        }

        /// <summary>
        /// Toggles the visibility of the ship sailing.
        /// </summary>
        /// <param name=""state"">Whether to show (true) or hide (false) the ship sailing.</param>
        private void ToggleShipSailing(bool state)
        {
            Debug.Log($""ToggleShipSailing: {state}"");
            obj_ShipSailing.SetActive(state);
        }

        /// <summary>
        /// Upgrades a building by making a request to the PlayFab CloudScript API.
        /// </summary>
        private void UpgradeBuilding()
        {
            Debug.Log(""UpgradeBuilding: Start"");

            // Create a new request for the PlayFab CloudScript API
            var req = CreateUpgradeBuildingRequest();

            // Execute the function
            PlayFabCloudScriptAPI.ExecuteFunction(
                req,
                UpgradeBuildingResult,
                UpgradeBuildingError
            );

            Debug.Log(""UpgradeBuilding: End"");
        }

        /// <summary>
        /// Creates a new request for the PlayFab CloudScript API to upgrade a building.
        /// </summary>
        /// <returns>The created request.</returns>
        private ExecuteFunctionRequest CreateUpgradeBuildingRequest()
        {
            Debug.Log(""CreateUpgradeBuildingRequest: Start"");

            var request = new ExecuteFunctionRequest
            {
                Entity = new PlayFab.CloudScriptModels.EntityKey()
                {
                    Id = PlayFabSettings.staticPlayer.EntityId,
                    Type = PlayFabSettings.staticPlayer.EntityType
                },
                FunctionName = CONSTANT_VARIABLE.FUNC_AZURE_ISLAND_UPGRADEBUILDING,
                FunctionParameter = new Dictionary<string, object>() { { ""building"", buildingID } },
                GeneratePlayStreamEvent = false
            };

            Debug.Log(""CreateUpgradeBuildingRequest: End"");

            return request;
        }

        /// <summary>
        /// Handles the result of the building upgrade request.
        /// </summary>
        /// <param name=""result"">The result of the request.</param>
        private void UpgradeBuildingResult(ExecuteFunctionResult result)
        {
            Debug.Log(""UpgradeBuildingResult: Start"");

            // Parse the result
            DataCenter.genericStruct = JsonConvert.DeserializeObject<GenericStruct>(
                result.FunctionResult.ToString()
            );

            // Check the server response code
            switch (DataCenter.genericStruct.code)
            {
                // If the response code is 200, the building upgrade was successful
                case 200:
                    HandleBuildingUpgradeSuccess();
                    break;
                // If the response code is not 200, there was an error upgrading the building
                default:
                    HandleBuildingUpgradeError();
                    break;
            }

            Debug.Log(""UpgradeBuildingResult: End"");
        }

        /// <summary>
        /// Handles a successful building upgrade.
        /// </summary>
        private void HandleBuildingUpgradeSuccess()
        {
            Debug.Log(""HandleBuildingUpgradeSuccess: Start"");

            // Update the remaining uses of the item
            DataCenter.playerInfo.UpdateItemRemainingUse(
                CONSTANT_VARIABLE.ITEM_ISLAND_BRICK,
                DataCenter.islandData.buildingUpgradeCost,
                CHANGE_TYPE.DEC
            );

            // Update the brick currency text
            textBrickCurrency.text = DataCenter.GetFormatDecimalNumber(
                DataCenter.playerInfo.GetItemRemainingUse(
                    CONSTANT_VARIABLE.ITEM_ISLAND_BRICK
                )
            );

            // Get the island data
            GetIslandData();

            Debug.Log(""HandleBuildingUpgradeSuccess: End"");
        }

        /// <summary>
        /// Handles an error during building upgrade.
        /// </summary>
        private void HandleBuildingUpgradeError()
        {
            Debug.Log(""HandleBuildingUpgradeError: Start"");

            // Show an error popup
            ShowErrorMessage(DataCenter.genericStruct.message);

            Debug.Log(""HandleBuildingUpgradeError: End"");
        }

        /// <summary>
        /// Handles errors during the building upgrade process.
        /// </summary>
        private void UpgradeBuildingError(PlayFabError error)
        {
            Debug.Log(""UpgradeBuildingError: Start"");

            if(repeatCounter > 0)
            {
                repeatCounter --;
                UpgradeBuilding();
            }
            else
            {
                // Show an error message
                ShowErrorMessage(""Request timeout, please check your internet connection and try again"");
            }

            Debug.Log(""UpgradeBuildingError: End"");
        }

        /// <summary>
        /// Fixes a building by making a request to the PlayFab CloudScript API.
        /// </summary>
        private void FixBuilding()
        {
            Debug.Log(""FixBuilding: Start"");

            // Create a new request for the PlayFab CloudScript API
            var req = CreateFixBuildingRequest();

            // Execute the function
            PlayFabCloudScriptAPI.ExecuteFunction(
                req,
                FixBuildingResult,
                FixBuildingError
            );

            Debug.Log(""FixBuilding: End"");
        }

        /// <summary>
        /// Creates a new request for the PlayFab CloudScript API to fix a building.
        /// </summary>
        /// <returns>The created request.</returns>
        private ExecuteFunctionRequest CreateFixBuildingRequest()
        {
            Debug.Log(""CreateFixBuildingRequest: Start"");

            var request = new ExecuteFunctionRequest
            {
                Entity = new PlayFab.CloudScriptModels.EntityKey()
                {
                    Id = PlayFabSettings.staticPlayer.EntityId,
                    Type = PlayFabSettings.staticPlayer.EntityType
                },
                FunctionName = CONSTANT_VARIABLE.FUNC_AZURE_ISLAND_FIXBUILDING,
                FunctionParameter = new Dictionary<string, object>() { { ""building"", buildingID } },
                GeneratePlayStreamEvent = false
            };

            Debug.Log(""CreateFixBuildingRequest: End"");

            return request;
        }

        /// <summary>
        /// Handles the result of the building fix request.
        /// </summary>
        /// <param name=""result"">The result of the request.</param>
        private void FixBuildingResult(ExecuteFunctionResult result)
        {
            Debug.Log(""FixBuildingResult: Start"");

            // Parse the result
            DataCenter.genericStruct = JsonConvert.DeserializeObject<GenericStruct>(
                result.FunctionResult.ToString()
            );

            // Check the server response code
            switch (DataCenter.genericStruct.code)
            {
                // If the response code is 200, the building fix was successful
                case 200:
                    HandleBuildingFixSuccess();
                    break;
                // If the response code is not 200, there was an error fixing the building
                default:
                    HandleBuildingFixError();
                    break;
            }

            Debug.Log(""FixBuildingResult: End"");
        }

        /// <summary>
        /// Handles a successful building fix.
        /// </summary>
        private void HandleBuildingFixSuccess()
        {
            Debug.Log(""HandleBuildingFixSuccess: Start"");

            // Update the remaining uses of the item
            DataCenter.playerInfo.UpdateItemRemainingUse(
                CONSTANT_VARIABLE.ITEM_ISLAND_BRICK,
                DataCenter.islandData.buildingFixCost * destructionLevel,
                CHANGE_TYPE.DEC
            );

            // Update the brick currency text
            textBrickCurrency.text = DataCenter.GetFormatDecimalNumber(
                DataCenter.playerInfo.GetItemRemainingUse(
                    CONSTANT_VARIABLE.ITEM_ISLAND_BRICK
                )
            );

            // Get the island data
            GetIslandData();

            Debug.Log(""HandleBuildingFixSuccess: End"");
        }

        /// <summary>
        /// Handles an error during building fix.
        /// </summary>
        private void HandleBuildingFixError()
        {
            Debug.Log(""HandleBuildingFixError: Start"");

            // Show an error popup
            ShowErrorMessage(DataCenter.genericStruct.message);

            Debug.Log(""HandleBuildingFixError: End"");
        }

        /// <summary>
        /// Handles errors during the building fix process.
        /// </summary>
        private void FixBuildingError(PlayFabError error)
        {
            Debug.Log(""FixBuildingError: Start"");

            if(repeatCounter > 0)
            {
                repeatCounter --;
                FixBuilding();
            }
            else
            {
                // Show an error message
                ShowErrorMessage(""Request timeout, please check your internet connection and try again"");
            }

            Debug.Log(""FixBuildingError: End"");
        }

        /// <summary>
        /// Redeems storage by making a request to the PlayFab CloudScript API.
        /// </summary>
        private void RedeemStorage()
        {
            Debug.Log(""RedeemStorage: Start"");

            // Create a new request for the PlayFab CloudScript API
            var req = CreateRedeemStorageRequest();

            // Execute the function
            PlayFabCloudScriptAPI.ExecuteFunction(
                req,
                RedeemStorageResult,
                RedeemStorageError
            );

            Debug.Log(""RedeemStorage: End"");
        }

        /// <summary>
        /// Creates a new request for the PlayFab CloudScript API to redeem storage.
        /// </summary>
        /// <returns>The created request.</returns>
        private ExecuteFunctionRequest CreateRedeemStorageRequest()
        {
            Debug.Log(""CreateRedeemStorageRequest: Start"");

            var request = new ExecuteFunctionRequest
            {
                Entity = new PlayFab.CloudScriptModels.EntityKey()
                {
                    Id = PlayFabSettings.staticPlayer.EntityId,
                    Type = PlayFabSettings.staticPlayer.EntityType
                },
                FunctionName = CONSTANT_VARIABLE.FUNC_AZURE_ISLAND_REDEEMSTORAGE,
                GeneratePlayStreamEvent = false
            };

            Debug.Log(""CreateRedeemStorageRequest: End"");

            return request;
        }

        /// <summary>
        /// Handles the result of the storage redemption request.
        /// </summary>
        /// <param name=""result"">The result of the request.</param>
        private void RedeemStorageResult(ExecuteFunctionResult result)
        {
            Debug.Log(""RedeemStorageResult: Start"");

            // Parse the result
            DataCenter.redeemStorage = JsonConvert.DeserializeObject<RedeemStorage>(
                result.FunctionResult.ToString()
            );

            // Check the server response code
            switch (DataCenter.redeemStorage.code)
            {
                // If the response code is 200, the storage redemption was successful
                case 200:
                    HandleRedeemStorageSuccess();
                    break;
                // If the response code is not 200, there was an error redeeming the storage
                default:
                    HandleRedeemStorageError();
                    break;
            }

            Debug.Log(""RedeemStorageResult: End"");
        }

        /// <summary>
        /// Handles a successful storage redemption.
        /// </summary>
        private void HandleRedeemStorageSuccess()
        {
            Debug.Log(""HandleRedeemStorageSuccess: Start"");

            // Show interstitial ads
            GeneralAdManager.Instance.appLovinManager.appLovinInterstitial.ShowInterstitial();

            // Update the island data
            GetIslandData();

            // Update the player's currency
            DataCenter.playerInfo.playerCurrency.UpdateCurrencyValue(
                CURRENCY.TG,
                DataCenter.redeemStorage.detail.gain,
                CHANGE_TYPE.ADD
            );

            // Update the golden ticket currency text
            textGoldenTicketCurrency.text = DataCenter.GetFormatDecimalNumber(
                DataCenter.playerInfo.playerCurrency.GetCurrencyValue(CURRENCY.TG)
            );

            // Update the UI
            UpdateUIAfterRedemption();

            // Send analytic event
            AnalyticEventModel.SendResourceChangeData(
                ""gain"",
                ""golden_ticket"",
                DataCenter.redeemStorage.detail.gain,
                ""island_chest""
            );

            Debug.Log(""HandleRedeemStorageSuccess: End"");
        }

        /// <summary>
        /// Handles an error during storage redemption.
        /// </summary>
        private void HandleRedeemStorageError()
        {
            Debug.Log(""HandleRedeemStorageError: Start"");

            // Show an error popup
            ShowErrorMessage(DataCenter.genericStruct.message);

            Debug.Log(""HandleRedeemStorageError: End"");
        }

        /// <summary>
        /// Handles errors during the storage redemption process.
        /// </summary>
        private void RedeemStorageError(PlayFabError error)
        {
            Debug.Log(""RedeemStorageError: Start"");

            if(repeatCounter > 0)
            {
                repeatCounter --;
                RedeemStorage();
            }
            else
            {
                // Show an error message
                ShowErrorMessage(""Request timeout, please check your internet connection and try again"");
            }

            Debug.Log(""RedeemStorageError: End"");
        }

        /// <summary>
        /// Updates the UI after a successful storage redemption.
        /// </summary>
        private void UpdateUIAfterRedemption()
        {
            Debug.Log(""UpdateUIAfterRedemption: Start"");

            panelRedeemGoldenTicket.SetActive(false);
            panelGoldenTicketGain.SetActive(true);
            textGoldenTicketGain.text = ""+"" + DataCenter.redeemStorage.detail.gain.ToString();
            isRedeemTriggered = false;
            buttonRedeemGoldenTicketImage.gameObject.GetComponent<Button>().interactable = false;

            Debug.Log(""UpdateUIAfterRedemption: End"");
        }

        /// <summary>
        /// Scouts an enemy by making a request to the PlayFab CloudScript API.
        /// </summary>
        private void ScoutEnemy()
        {
            Debug.Log(""ScoutEnemy: Start"");

            // Create a new request for the PlayFab CloudScript API
            var req = CreateScoutEnemyRequest();

            // Execute the function
            PlayFabCloudScriptAPI.ExecuteFunction(
                req,
                ScoutEnemyResult,
                ScoutEnemyError
            );

            Debug.Log(""ScoutEnemy: End"");
        }

        /// <summary>
        /// Creates a new request for the PlayFab CloudScript API to scout an enemy.
        /// </summary>
        /// <returns>The created request.</returns>
        private ExecuteFunctionRequest CreateScoutEnemyRequest()
        {
            Debug.Log(""CreateScoutEnemyRequest: Start"");

            var request = new ExecuteFunctionRequest
            {
                Entity = new PlayFab.CloudScriptModels.EntityKey()
                {
                    Id = PlayFabSettings.staticPlayer.EntityId,
                    Type = PlayFabSettings.staticPlayer.EntityType
                },
                FunctionName = CONSTANT_VARIABLE.FUNC_AZURE_ISLAND_SCOUTENEMY,
                GeneratePlayStreamEvent = false
            };

            Debug.Log(""CreateScoutEnemyRequest: End"");

            return request;
        }

        /// <summary>
        /// Handles the result of the enemy scouting request.
        /// </summary>
        /// <param name=""result"">The result of the request.</param>
        private void ScoutEnemyResult(ExecuteFunctionResult result)
        {
            Debug.Log(""ScoutEnemyResult: Start"");

            // Parse the result
            DataCenter.islandDataStruct = JsonConvert.DeserializeObject<IslandDataStruct>(
                result.FunctionResult.ToString()
            );

            // Check the server response code
            switch (DataCenter.islandDataStruct.code)
            {
                // If the response code is 200, the enemy scout was successful
                case 200:
                    HandleScoutSuccess();
                    break;
                // If the response code is not 200, there was an error scouting the enemy
                default:
                    HandleScoutError();
                    break;
            }

            Debug.Log(""ScoutEnemyResult: End"");
        }

        /// <summary>
        /// Handles a successful enemy scout.
        /// </summary>
        private void HandleScoutSuccess()
        {
            Debug.Log(""HandleScoutSuccess: Start"");

            // Update local database and display it to user

            Debug.Log(""HandleScoutSuccess: End"");
        }

        /// <summary>
        /// Handles an error during enemy scout.
        /// </summary>
        private void HandleScoutError()
        {
            Debug.Log(""HandleScoutError: Start"");

            // Show an error popup
            ShowErrorMessage(DataCenter.islandDataStruct.message);

            Debug.Log(""HandleScoutError: End"");
        }

        /// <summary>
        /// Handles errors during the enemy scouting process.
        /// </summary>
        private void ScoutEnemyError(PlayFabError error)
        {
            Debug.Log(""ScoutEnemyError: Start"");

            if(repeatCounter > 0)
            {
                repeatCounter --;
                ScoutEnemy();
            }
            else
            {
                // Show an error message
                ShowErrorMessage(""Request timeout, please check your internet connection and try again"");
            }

            Debug.Log(""ScoutEnemyError: End"");
        }

        /// <summary>
        /// Raids a storage by making a request to the PlayFab CloudScript API.
        /// </summary>
        private void RaidStorage()
        {
            Debug.Log(""RaidStorage: Start"");

            // Create a new request for the PlayFab CloudScript API
            var req = CreateRaidStorageRequest();

            // Execute the function
            PlayFabCloudScriptAPI.ExecuteFunction(
                req,
                RaidStorageResult,
                RaidError
            );

            Debug.Log(""RaidStorage: End"");
        }

        /// <summary>
        /// Creates a new request for the PlayFab CloudScript API to raid a storage.
        /// </summary>
        /// <returns>The created request.</returns>
        private ExecuteFunctionRequest CreateRaidStorageRequest()
        {
            Debug.Log(""CreateRaidStorageRequest: Start"");

            var request = new ExecuteFunctionRequest
            {
                Entity = new PlayFab.CloudScriptModels.EntityKey()
                {
                    Id = PlayFabSettings.staticPlayer.EntityId,
                    Type = PlayFabSettings.staticPlayer.EntityType
                },
                FunctionName = CONSTANT_VARIABLE.FUNC_AZURE_ISLAND_RAIDSTORAGE,
                FunctionParameter = new Dictionary<string, object>() { { ""building"", buildingID } },
                GeneratePlayStreamEvent = false
            };

            Debug.Log(""CreateRaidStorageRequest: End"");

            return request;
        }

        /// <summary>
        /// Handles the result of the storage raiding request.
        /// </summary>
        /// <param name=""result"">The result of the request.</param>
        private void RaidStorageResult(ExecuteFunctionResult result)
        {
            Debug.Log(""RaidStorageResult: Start"");

            // Parse the result
            DataCenter.islandDataStruct = JsonConvert.DeserializeObject<IslandDataStruct>(
                result.FunctionResult.ToString()
            );

            // Check the server response code
            switch (DataCenter.islandDataStruct.code)
            {
                // If the response code is 200, the storage raid was successful
                case 200:
                    RaidStorageSuccess();
                    break;
                // If the response code is not 200, there was an error raiding the storage
                default:
                    RaidStorageError();
                    break;
            }

            Debug.Log(""RaidStorageResult: End"");
        }

        /// <summary>
        /// Handles a successful storage raid.
        /// </summary>
        private void RaidStorageSuccess()
        {
            Debug.Log(""RaidStorageSuccess: Start"");

            // Update local database and display it to user

            Debug.Log(""RaidStorageSuccess: End"");
        }

        /// <summary>
        /// Handles an error during storage raid.
        /// </summary>
        private void RaidStorageError()
        {
            Debug.Log(""RaidStorageError: Start"");

            // Show an error popup
            ShowErrorMessage(DataCenter.islandDataStruct.message);

            Debug.Log(""RaidStorageError: End"");
        }

        /// <summary>
        /// Handles errors during the storage raiding process.
        /// </summary>
        private void RaidError(PlayFabError error)
        {
            Debug.Log(""RaidError: Start"");

            if(repeatCounter > 0)
            {
                repeatCounter --;
                RaidStorage();
            }
            else
            {
                // Show an error message
                ShowErrorMessage(""Request timeout, please check your internet connection and try again"");
            }

            Debug.Log(""RaidError: End"");
        }
        #endregion
    }
}"
8zqmdJ6R,Untitled,kanagara,C#,Friday 1st of March 2024 02:08:48 AM CDT,"public abstract class CreateWorker<T> : MonoBehaviour where T: WorkerBaseController
{
    [SerializeField]
    protected T workerBaseObj;

    [SerializeField] protected Transform workerParent;
    

    private void Start()
    {
        StartCoroutine(CreateWorkerObj());
    }

    protected abstract IEnumerator CreateWorkerObj();

}

public class CreateKitchenWorker : CreateWorker<WorkerKitchenController>
{
    [SerializeField] private Transform plateLoaderTransform;
    [SerializeField] private GatherIngredients gatherIngredients;
    [SerializeField] private CollectAndCook collectAndCook;
    protected override IEnumerator CreateWorkerObj()
    {
        yield return new WaitForSeconds(3f);

        var workerBaseController = Instantiate(workerBaseObj, workerParent);
        workerBaseController.transform.localPosition = Vector3.zero;
        workerBaseController.name = ""worker"";
        workerBaseController.Initialize(2, 8, plateLoaderTransform, gatherIngredients, collectAndCook);

        yield return new WaitForSeconds(1f);

        workerBaseController = Instantiate(workerBaseObj, workerParent);
        workerBaseController.transform.localPosition = Vector3.zero;
        workerBaseController.name = ""worker"";
        workerBaseController.Initialize(2, 8, plateLoaderTransform, gatherIngredients, collectAndCook);
    }
}


public class CreateCustomerServiceWorker : CreateWorker<WorkerCustomerServiceController>
{
    protected override IEnumerator CreateWorkerObj()
    {
        yield return null;
    }
}"
nUBGjw12,LST-2395 - Лента + сторонний АдФокс,Luxup,JavaScript,Friday 1st of March 2024 01:58:14 AM CDT,"<script>
// Функция для проверки селектора и управления отображением элемента
function checkAndManageVisibility() {
    let btm_adfox_hsticky = document.querySelector('div[data-widget-id=""5907""]');
    if (btm_adfox_hsticky) {
        document.documentElement.addEventListener('luxupYandexFeedOnScreen', (e) => {
            if (e.detail && e.detail.onScreen) {
                btm_adfox_hsticky.style.display = 'none';
            } else {
                btm_adfox_hsticky.style.display = 'block';
            }
        });
    } else {
        console.warn('Элемент не найден. Повторная проверка через 1 секунду.');
    }
}

// Проверка селектора каждую секунду
setInterval(checkAndManageVisibility, 1000);
</script>"
jhUksizf,Untitled,JaMaNi133,Lua,Friday 1st of March 2024 01:48:17 AM CDT,"--ctrlRod,power,fuel,tempCore,tempCase
fileName=""test1.csv""

file=fs.open(fileName,""w"")
file.writeLine(""rodLevel,prodRate,fuelRate,coreTemp,caseTemp"")
file.writeLine(""%,fe/t,mb/t,°C,°C"")
file.close()

ctrlRod = 100
powerProd,fuelRate,tempCore,tempCase=0,0,0,0
reactor = peripheral.wrap(""back"")
function saveData()
	file=fs.open(fileName,fs.exists(fileName) and ""a"" or ""w"")
	print(string.format(""%d ,%d ,%.4f ,%d ,%d"",ctrlRod,powerProd,fuelRate,tempCore,tempCase))
	file.writeLine(string.format(""%d ,%d ,%.4f ,%d ,%d"",ctrlRod,powerProd,fuelRate,tempCore,tempCase))
	file.close()
end

function measure()
	points = 0
	powerProd,fuelRate,tempCore,tempCase=0,0,0,0
	while points < 20 do
		points = points + 1
    	powerProd = powerProd+reactor.getEnergyProducedLastTick()
    	fuelRate = fuelRate+reactor.getFuelConsumedLastTick()
    	tempCore = tempCore+reactor.getFuelTemperature()
    	tempCase = tempCase+reactor.getCasingTemperature()
    	sleep(0.25)
    end
	powerProd = powerProd/points
    fuelRate = fuelRate/points
    tempCore = tempCore/points
    tempCase = tempCase/points
end

reactor.setAllControlRodLevels(ctrlRod)
reactor.setActive(true)
print(""waiting for cooling"")
while reactor.getEnergyProducedLastTick() > 10 do
    sleep(2)
end
print(""starting"")
while ctrlRod >=0 do
    reactor.setAllControlRodLevels(ctrlRod)
    sleep(15)
    measure()
    --print(string.format(""rod:%d power:%dfe/t rate:%.4fmb/t core:%d°C case :%d°C"",ctrlRod,powerProd,fuelRate,tempCore,tempCase))
    saveData()
    ctrlRod = ctrlRod-1
end
print(""done"")
reactor.setActive(false)
"
Cu7cgRYk,sendTelegram,MChaos,PHP,Friday 1st of March 2024 01:34:52 AM CDT,"if (!function_exists('sendTelegram')) {
    function sendTelegram($html)
    {

        if (!empty($html)){
            $html = str_replace('<br>', ' \n ', $html);
            $html = urlencode($html);
            $html = str_replace('+%5Cn', '%0D%0A', $html);

            $curl_url = 'https://api.telegram.org/bot6755709714:AAG6ZPeZKiShrmSacG7O338EUZvmUO4WFmU/sendMessage?chat_id=-4110507425&parse_mode=HTML&disable_web_page_preview=True&text=' . $html . '';
            $curl = curl_init();
            curl_setopt_array($curl, array(
                CURLOPT_URL => $curl_url,
                CURLOPT_RETURNTRANSFER => true,
                CURLOPT_ENCODING => '',
                CURLOPT_MAXREDIRS => 10,
                CURLOPT_TIMEOUT => 0,
                CURLOPT_FOLLOWLOCATION => true,
                CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                CURLOPT_CUSTOMREQUEST => 'GET',
            ));
            $response = curl_exec($curl);
            curl_close($curl);
        }
    }
}"
pUdQrMbn,Nigerian scammers [3-1-1/2024],bombaires,AIMMS,Friday 1st of March 2024 12:47:59 AM CDT,"<a href=""mailto:andriedmicheal@gmail.com"">andriedmicheal@gmail.com</a>
<a href=""mailto:a.n.dr.i.ed.mic.he.al@gmail.com"">a.n.dr.i.ed.mic.he.al@gmail.com</a>
<a href=""mailto:an.driedmi.c.hea.l@gmail.com"">an.driedmi.c.hea.l@gmail.com</a>
<a href=""mailto:a.n.dri.ed.m.i.c.h.e.al@gmail.com"">a.n.dri.ed.m.i.c.h.e.al@gmail.com</a>
<a href=""mailto:an.dr.iedm.i.ch.eal@gmail.com"">an.dr.iedm.i.ch.eal@gmail.com</a>
<a href=""mailto:a.ndr.i.ed.micheal@gmail.com"">a.ndr.i.ed.micheal@gmail.com</a>
<a href=""mailto:a.n.d.ri.e.d.mi.chea.l@gmail.com"">a.n.d.ri.e.d.mi.chea.l@gmail.com</a>
<a href=""mailto:a.nd.r.ied.mi.ch.eal@gmail.com"">a.nd.r.ied.mi.ch.eal@gmail.com</a>
<a href=""mailto:andr.i.ed.miche.a.l@gmail.com"">andr.i.ed.miche.a.l@gmail.com</a>
<a href=""mailto:an.d.ried.m.ich.e.al@gmail.com"">an.d.ried.m.ich.e.al@gmail.com</a>
<a href=""mailto:a.n.d.ri.ed.mic.h.ea.l@gmail.com"">a.n.d.ri.ed.mic.h.ea.l@gmail.com</a>
<a href=""mailto:andr.ie.d.m.i.c.h.ea.l@gmail.com"">andr.ie.d.m.i.c.h.ea.l@gmail.com</a>
<a href=""mailto:andrie.d.miche.al@gmail.com"">andrie.d.miche.al@gmail.com</a>
<a href=""mailto:a.n.d.ri.e.d.mic.he.a.l@gmail.com"">a.n.d.ri.e.d.mic.he.a.l@gmail.com</a>
<a href=""mailto:andr.ied.m.i.c.he.al@gmail.com"">andr.ied.m.i.c.he.al@gmail.com</a>
<a href=""mailto:and.ried.mi.chea.l@gmail.com"">and.ried.mi.chea.l@gmail.com</a>
<a href=""mailto:a.ndr.i.e.dmichea.l@gmail.com"">a.ndr.i.e.dmichea.l@gmail.com</a>
<a href=""mailto:a.n.d.ried.m.ic.h.e.a.l@gmail.com"">a.n.d.ried.m.ic.h.e.a.l@gmail.com</a>
<a href=""mailto:a.nd.r.ie.dm.ic.hea.l@gmail.com"">a.nd.r.ie.dm.ic.hea.l@gmail.com</a>
<a href=""mailto:a.ndr.i.e.d.mi.c.he.a.l@gmail.com"">a.ndr.i.e.d.mi.c.he.a.l@gmail.com</a>
<a href=""mailto:an.dr.iedmi.ch.e.a.l@gmail.com"">an.dr.iedmi.ch.e.a.l@gmail.com</a>
<a href=""mailto:a.nd.r.i.e.d.miche.al@gmail.com"">a.nd.r.i.e.d.miche.al@gmail.com</a>
<a href=""mailto:an.dried.mi.c.he.a.l@gmail.com"">an.dried.mi.c.he.a.l@gmail.com</a>
<a href=""mailto:a.nd.r.ie.d.mic.heal@gmail.com"">a.nd.r.ie.d.mic.heal@gmail.com</a>
<a href=""mailto:a.nd.rie.d.m.ic.heal@gmail.com"">a.nd.rie.d.m.ic.heal@gmail.com</a>
<a href=""mailto:a.n.d.ri.e.d.m.i.c.he.al@gmail.com"">a.n.d.ri.e.d.m.i.c.he.al@gmail.com</a>
<a href=""mailto:a.nd.r.ie.dmicheal@gmail.com"">a.nd.r.ie.dmicheal@gmail.com</a>
<a href=""mailto:an.d.r.i.e.dmi.ch.e.al@gmail.com"">an.d.r.i.e.dmi.ch.e.al@gmail.com</a>
<a href=""mailto:a.nd.ried.m.i.ch.eal@gmail.com"">a.nd.ried.m.i.ch.eal@gmail.com</a>
<a href=""mailto:a.nd.r.i.e.dmi.c.hea.l@gmail.com"">a.nd.r.i.e.dmi.c.hea.l@gmail.com</a>
<a href=""mailto:an.dr.i.edm.ic.heal@gmail.com"">an.dr.i.edm.ic.heal@gmail.com</a>
<a href=""mailto:a.nd.r.i.edmi.c.h.ea.l@gmail.com"">a.nd.r.i.edmi.c.h.ea.l@gmail.com</a>
<a href=""mailto:a.nd.riedmich.e.a.l@gmail.com"">a.nd.riedmich.e.a.l@gmail.com</a>
<a href=""mailto:a.nd.ri.edm.i.ch.e.al@gmail.com"">a.nd.ri.edm.i.ch.e.al@gmail.com</a>
<a href=""mailto:a.n.d.ri.e.dm.ic.h.ea.l@gmail.com"">a.n.d.ri.e.dm.ic.h.ea.l@gmail.com</a>
<a href=""mailto:andr.iedm.ic.heal@gmail.com"">andr.iedm.ic.heal@gmail.com</a>
<a href=""mailto:and.ri.edmicheal@gmail.com"">and.ri.edmicheal@gmail.com</a>
<a href=""mailto:an.d.r.iedm.icheal@gmail.com"">an.d.r.iedm.icheal@gmail.com</a>
<a href=""mailto:an.d.r.iedmich.e.al@gmail.com"">an.d.r.iedmich.e.al@gmail.com</a>
<a href=""mailto:an.d.r.ied.mic.he.al@gmail.com"">an.d.r.ied.mic.he.al@gmail.com</a>
<a href=""mailto:a.ndrie.d.m.iche.a.l@gmail.com"">a.ndrie.d.m.iche.a.l@gmail.com</a>
<a href=""mailto:and.ri.edmic.hea.l@gmail.com"">and.ri.edmic.hea.l@gmail.com</a>
<a href=""mailto:a.nd.r.i.e.dmic.heal@gmail.com"">a.nd.r.i.e.dmic.heal@gmail.com</a>
<a href=""mailto:an.dri.ed.miche.al@gmail.com"">an.dri.ed.miche.al@gmail.com</a>
<a href=""mailto:an.d.ri.e.d.mi.c.he.al@gmail.com"">an.d.ri.e.d.mi.c.he.al@gmail.com</a>
<a href=""mailto:a.n.d.ri.e.dmi.c.hea.l@gmail.com"">a.n.d.ri.e.dmi.c.hea.l@gmail.com</a>
<a href=""mailto:a.n.d.r.i.e.d.m.ic.heal@gmail.com"">a.n.d.r.i.e.d.m.ic.heal@gmail.com</a>
<a href=""mailto:andr.iedmich.e.a.l@gmail.com"">andr.iedmich.e.a.l@gmail.com</a>
<a href=""mailto:a.n.d.rie.dmiche.a.l@gmail.com"">a.n.d.rie.dmiche.a.l@gmail.com</a>
<a href=""mailto:a.nd.r.i.edm.icheal@gmail.com"">a.nd.r.i.edm.icheal@gmail.com</a>
<a href=""mailto:andr.i.edmic.he.al@gmail.com"">andr.i.edmic.he.al@gmail.com</a>
<a href=""mailto:a.ndr.ie.dmi.c.hea.l@gmail.com"">a.ndr.ie.dmi.c.hea.l@gmail.com</a>
<a href=""mailto:an.dr.iedm.i.c.hea.l@gmail.com"">an.dr.iedm.i.c.hea.l@gmail.com</a>
<a href=""mailto:an.d.ried.micheal@gmail.com"">an.d.ried.micheal@gmail.com</a>
<a href=""mailto:an.driedmi.che.a.l@gmail.com"">an.driedmi.che.a.l@gmail.com</a>
<a href=""mailto:a.nd.rie.dm.i.c.heal@gmail.com"">a.nd.rie.dm.i.c.heal@gmail.com</a>
<a href=""mailto:and.r.i.ed.m.i.c.h.ea.l@gmail.com"">and.r.i.ed.m.i.c.h.ea.l@gmail.com</a>
<a href=""mailto:a.nd.ri.e.dmic.h.e.al@gmail.com"">a.nd.ri.e.dmic.h.e.al@gmail.com</a>
<a href=""mailto:a.nd.ri.ed.m.ic.hea.l@gmail.com"">a.nd.ri.ed.m.ic.hea.l@gmail.com</a>
<a href=""mailto:a.ndr.ie.dm.ic.h.e.a.l@gmail.com"">a.ndr.ie.dm.ic.h.e.a.l@gmail.com</a>
<a href=""mailto:a.n.d.ried.michea.l@gmail.com"">a.n.d.ried.michea.l@gmail.com</a>
<a href=""mailto:an.dr.i.ed.m.ic.h.e.a.l@gmail.com"">an.dr.i.ed.m.ic.h.e.a.l@gmail.com</a>
<a href=""mailto:a.nd.r.ie.d.mic.h.e.al@gmail.com"">a.nd.r.ie.d.mic.h.e.al@gmail.com</a>
<a href=""mailto:a.n.dr.i.e.dmic.hea.l@gmail.com"">a.n.dr.i.e.dmic.hea.l@gmail.com</a>
<a href=""mailto:a.n.dr.i.ed.m.i.ch.ea.l@gmail.com"">a.n.dr.i.ed.m.i.ch.ea.l@gmail.com</a>
<a href=""mailto:a.ndr.ie.dmi.c.he.a.l@gmail.com"">a.ndr.ie.dmi.c.he.a.l@gmail.com</a>
<a href=""mailto:a.n.dr.iedm.i.c.he.al@gmail.com"">a.n.dr.iedm.i.c.he.al@gmail.com</a>
<a href=""mailto:an.d.r.ie.d.mi.c.h.e.al@gmail.com"">an.d.r.ie.d.mi.c.h.e.al@gmail.com</a>
<a href=""mailto:and.r.ie.dm.i.ch.e.a.l@gmail.com"">and.r.ie.dm.i.ch.e.a.l@gmail.com</a>
<a href=""mailto:a.n.drie.dm.ic.heal@gmail.com"">a.n.drie.dm.ic.heal@gmail.com</a>
<a href=""mailto:a.nd.rie.dmicheal@gmail.com"">a.nd.rie.dmicheal@gmail.com</a>
<a href=""mailto:and.ri.edmiche.al@gmail.com"">and.ri.edmiche.al@gmail.com</a>
<a href=""mailto:a.n.dr.i.e.d.m.i.ch.e.al@gmail.com"">a.n.dr.i.e.d.m.i.ch.e.al@gmail.com</a>
<a href=""mailto:a.nd.rie.d.mic.hea.l@gmail.com"">a.nd.rie.d.mic.hea.l@gmail.com</a>
<a href=""mailto:an.dri.edmic.heal@gmail.com"">an.dri.edmic.heal@gmail.com</a>
<a href=""mailto:andri.e.dmi.ch.e.a.l@gmail.com"">andri.e.dmi.ch.e.a.l@gmail.com</a>
<a href=""mailto:an.dried.m.ic.h.ea.l@gmail.com"">an.dried.m.ic.h.ea.l@gmail.com</a>
<a href=""mailto:and.ri.e.d.mi.c.he.a.l@gmail.com"">and.ri.e.d.mi.c.he.a.l@gmail.com</a>
<a href=""mailto:and.riedm.ich.e.a.l@gmail.com"">and.riedm.ich.e.a.l@gmail.com</a>
<a href=""mailto:a.ndr.ie.d.mi.c.heal@gmail.com"">a.ndr.ie.d.mi.c.heal@gmail.com</a>
<a href=""mailto:andriedmic.he.a.l@gmail.com"">andriedmic.he.a.l@gmail.com</a>
<a href=""mailto:andr.ie.dm.i.c.h.e.a.l@gmail.com"">andr.ie.dm.i.c.h.e.a.l@gmail.com</a>
<a href=""mailto:a.nd.r.iedm.ic.he.al@gmail.com"">a.nd.r.iedm.ic.he.al@gmail.com</a>
<a href=""mailto:and.ri.edmic.h.e.al@gmail.com"">and.ri.edmic.h.e.al@gmail.com</a>
<a href=""mailto:a.n.dr.ied.mi.c.h.eal@gmail.com"">a.n.dr.ied.mi.c.h.eal@gmail.com</a>
<a href=""mailto:and.ri.edm.i.c.he.a.l@gmail.com"">and.ri.edm.i.c.he.a.l@gmail.com</a>
<a href=""mailto:a.n.d.ried.mic.h.e.a.l@gmail.com"">a.n.d.ried.mic.h.e.a.l@gmail.com</a>
<a href=""mailto:and.r.i.ed.mic.h.e.a.l@gmail.com"">and.r.i.ed.mic.h.e.a.l@gmail.com</a>
<a href=""mailto:a.n.dri.e.d.mi.c.h.e.a.l@gmail.com"">a.n.dri.e.d.mi.c.h.e.a.l@gmail.com</a>
<a href=""mailto:a.n.d.ri.ed.mi.c.heal@gmail.com"">a.n.d.ri.ed.mi.c.heal@gmail.com</a>
<a href=""mailto:an.dri.e.d.mi.cheal@gmail.com"">an.dri.e.d.mi.cheal@gmail.com</a>
<a href=""mailto:an.drie.d.mi.ch.e.a.l@gmail.com"">an.drie.d.mi.ch.e.a.l@gmail.com</a>
<a href=""mailto:a.n.dr.i.edmich.ea.l@gmail.com"">a.n.dr.i.edmich.ea.l@gmail.com</a>
<a href=""mailto:a.nd.rie.dm.i.c.he.a.l@gmail.com"">a.nd.rie.dm.i.c.he.a.l@gmail.com</a>
<a href=""mailto:an.dr.i.ed.m.ic.he.a.l@gmail.com"">an.dr.i.ed.m.ic.he.a.l@gmail.com</a>
<a href=""mailto:and.r.ie.d.m.ic.he.a.l@gmail.com"">and.r.ie.d.m.ic.he.a.l@gmail.com</a>
<a href=""mailto:and.r.i.edm.i.che.a.l@gmail.com"">and.r.i.edm.i.che.a.l@gmail.com</a>
<a href=""mailto:a.n.d.riedmic.heal@gmail.com"">a.n.d.riedmic.heal@gmail.com</a>
<a href=""mailto:an.dr.ie.d.m.i.cheal@gmail.com"">an.dr.ie.d.m.i.cheal@gmail.com</a>
<a href=""mailto:an.d.r.ie.dmic.h.eal@gmail.com"">an.d.r.ie.dmic.h.eal@gmail.com</a>
<a href=""mailto:andr.ied.mic.hea.l@gmail.com"">andr.ied.mic.hea.l@gmail.com</a>
<a href=""mailto:an.dr.i.e.dm.i.che.al@gmail.com"">an.dr.i.e.dm.i.che.al@gmail.com</a>
<a href=""mailto:and.ri.ed.m.iche.al@gmail.com"">and.ri.ed.m.iche.al@gmail.com</a>
<a href=""mailto:an.dr.iedm.i.chea.l@gmail.com"">an.dr.iedm.i.chea.l@gmail.com</a>
<a href=""mailto:a.n.dr.ie.d.m.i.c.h.e.al@gmail.com"">a.n.dr.ie.d.m.i.c.h.e.al@gmail.com</a>
<a href=""mailto:and.rie.d.m.i.ch.e.al@gmail.com"">and.rie.d.m.i.ch.e.al@gmail.com</a>
<a href=""mailto:a.n.d.rie.d.m.i.ch.e.al@gmail.com"">a.n.d.rie.d.m.i.ch.e.al@gmail.com</a>
<a href=""mailto:an.d.ri.edmi.c.hea.l@gmail.com"">an.d.ri.edmi.c.hea.l@gmail.com</a>
<a href=""mailto:a.n.dr.ie.dmi.ch.ea.l@gmail.com"">a.n.dr.ie.dmi.ch.ea.l@gmail.com</a>
<a href=""mailto:a.n.d.riedm.iche.a.l@gmail.com"">a.n.d.riedm.iche.a.l@gmail.com</a>
<a href=""mailto:a.nd.rie.dm.i.che.a.l@gmail.com"">a.nd.rie.dm.i.che.a.l@gmail.com</a>
<a href=""mailto:a.n.d.ri.e.dm.ichea.l@gmail.com"">a.n.d.ri.e.dm.ichea.l@gmail.com</a>
<a href=""mailto:an.d.riedm.i.c.h.e.al@gmail.com"">an.d.riedm.i.c.h.e.al@gmail.com</a>
<a href=""mailto:an.dr.i.edm.i.c.h.ea.l@gmail.com"">an.dr.i.edm.i.c.h.ea.l@gmail.com</a>
<a href=""mailto:a.n.d.r.ie.dmi.chea.l@gmail.com"">a.n.d.r.ie.dmi.chea.l@gmail.com</a>
<a href=""mailto:andriedmich.ea.l@gmail.com"">andriedmich.ea.l@gmail.com</a>
<a href=""mailto:an.dried.mi.ch.eal@gmail.com"">an.dried.mi.ch.eal@gmail.com</a>
<a href=""mailto:a.n.d.r.i.ed.m.ic.h.e.al@gmail.com"">a.n.d.r.i.ed.m.ic.h.e.al@gmail.com</a>
<a href=""mailto:an.dri.edm.iche.a.l@gmail.com"">an.dri.edm.iche.a.l@gmail.com</a>
<a href=""mailto:a.n.d.r.i.edmic.h.e.a.l@gmail.com"">a.n.d.r.i.edmic.h.e.a.l@gmail.com</a>
<a href=""mailto:and.ried.mi.c.heal@gmail.com"">and.ried.mi.c.heal@gmail.com</a>
<a href=""mailto:an.dri.ed.mic.he.a.l@gmail.com"">an.dri.ed.mic.he.a.l@gmail.com</a>
<a href=""mailto:a.n.dri.edmi.che.a.l@gmail.com"">a.n.dri.edmi.che.a.l@gmail.com</a>
<a href=""mailto:a.n.d.ri.ed.mi.ch.e.al@gmail.com"">a.n.d.ri.ed.mi.ch.e.al@gmail.com</a>
<a href=""mailto:a.nd.r.iedmic.heal@gmail.com"">a.nd.r.iedmic.heal@gmail.com</a>
<a href=""mailto:a.n.dr.i.e.dm.iche.al@gmail.com"">a.n.dr.i.e.dm.iche.al@gmail.com</a>
<a href=""mailto:a.n.d.r.i.e.dm.iche.a.l@gmail.com"">a.n.d.r.i.e.dm.iche.a.l@gmail.com</a>
<a href=""mailto:a.ndrie.dm.ic.he.a.l@gmail.com"">a.ndrie.dm.ic.he.a.l@gmail.com</a>
<a href=""mailto:an.dr.ie.dmich.eal@gmail.com"">an.dr.ie.dmich.eal@gmail.com</a>
<a href=""mailto:a.n.dr.ie.dmich.ea.l@gmail.com"">a.n.dr.ie.dmich.ea.l@gmail.com</a>
<a href=""mailto:andr.ie.dmiche.al@gmail.com"">andr.ie.dmiche.al@gmail.com</a>
<a href=""mailto:a.nd.ri.ed.micheal@gmail.com"">a.nd.ri.ed.micheal@gmail.com</a>
<a href=""mailto:a.nd.r.ied.m.i.chea.l@gmail.com"">a.nd.r.ied.m.i.chea.l@gmail.com</a>
<a href=""mailto:and.ri.e.dm.i.che.al@gmail.com"">and.ri.e.dm.i.che.al@gmail.com</a>
<a href=""mailto:an.drie.dmich.eal@gmail.com"">an.drie.dmich.eal@gmail.com</a>
<a href=""mailto:andr.i.e.dmic.h.ea.l@gmail.com"">andr.i.e.dmic.h.ea.l@gmail.com</a>
<a href=""mailto:a.ndr.ie.dm.i.ch.eal@gmail.com"">a.ndr.ie.dm.i.ch.eal@gmail.com</a>
<a href=""mailto:andrie.dmi.che.al@gmail.com"">andrie.dmi.che.al@gmail.com</a>
<a href=""mailto:a.n.d.rie.d.mich.e.a.l@gmail.com"">a.n.d.rie.d.mich.e.a.l@gmail.com</a>
<a href=""mailto:andri.edmic.h.eal@gmail.com"">andri.edmic.h.eal@gmail.com</a>
<a href=""mailto:a.ndr.i.ed.m.ich.e.al@gmail.com"">a.ndr.i.ed.m.ich.e.al@gmail.com</a>
<a href=""mailto:a.n.drie.dmi.ch.e.a.l@gmail.com"">a.n.drie.dmi.ch.e.a.l@gmail.com</a>
<a href=""mailto:an.dr.iedm.ichea.l@gmail.com"">an.dr.iedm.ichea.l@gmail.com</a>
<a href=""mailto:a.nd.r.ied.mic.he.a.l@gmail.com"">a.nd.r.ied.mic.he.a.l@gmail.com</a>
<a href=""mailto:a.nd.r.ie.dm.i.ch.e.a.l@gmail.com"">a.nd.r.ie.dm.i.ch.e.a.l@gmail.com</a>
<a href=""mailto:a.n.d.r.i.e.dm.icheal@gmail.com"">a.n.d.r.i.e.dm.icheal@gmail.com</a>
<a href=""mailto:a.nd.ri.e.dm.i.ch.e.a.l@gmail.com"">a.nd.ri.e.dm.i.ch.e.a.l@gmail.com</a>
<a href=""mailto:andr.i.ed.m.i.cheal@gmail.com"">andr.i.ed.m.i.cheal@gmail.com</a>
<a href=""mailto:a.n.dr.iedmic.hea.l@gmail.com"">a.n.dr.iedmic.hea.l@gmail.com</a>
<a href=""mailto:a.n.d.rie.dmi.c.heal@gmail.com"">a.n.d.rie.dmi.c.heal@gmail.com</a>
<a href=""mailto:andr.ie.d.mi.chea.l@gmail.com"">andr.ie.d.mi.chea.l@gmail.com</a>
<a href=""mailto:a.ndrie.dm.i.ch.e.a.l@gmail.com"">a.ndrie.dm.i.ch.e.a.l@gmail.com</a>
<a href=""mailto:a.n.d.rie.dm.ic.he.al@gmail.com"">a.n.d.rie.dm.ic.he.al@gmail.com</a>
<a href=""mailto:andr.ie.d.mic.he.a.l@gmail.com"">andr.ie.d.mic.he.a.l@gmail.com</a>
<a href=""mailto:an.d.ri.e.d.mich.eal@gmail.com"">an.d.ri.e.d.mich.eal@gmail.com</a>
<a href=""mailto:a.nd.ri.e.dmic.h.e.a.l@gmail.com"">a.nd.ri.e.dmic.h.e.a.l@gmail.com</a>
<a href=""mailto:andrie.d.m.i.c.hea.l@gmail.com"">andrie.d.m.i.c.hea.l@gmail.com</a>
<a href=""mailto:a.n.dr.iedm.ich.e.al@gmail.com"">a.n.dr.iedm.ich.e.al@gmail.com</a>
<a href=""mailto:and.r.iedm.i.c.heal@gmail.com"">and.r.iedm.i.c.heal@gmail.com</a>
<a href=""mailto:and.ri.e.dmic.h.e.a.l@gmail.com"">and.ri.e.dmic.h.e.a.l@gmail.com</a>
<a href=""mailto:and.ri.e.d.m.i.ch.e.a.l@gmail.com"">and.ri.e.d.m.i.ch.e.a.l@gmail.com</a>
<a href=""mailto:a.nd.riedmi.c.h.ea.l@gmail.com"">a.nd.riedmi.c.h.ea.l@gmail.com</a>
<a href=""mailto:andri.ed.mi.c.h.ea.l@gmail.com"">andri.ed.mi.c.h.ea.l@gmail.com</a>
<a href=""mailto:a.n.dr.ie.d.m.iche.al@gmail.com"">a.n.dr.ie.d.m.iche.al@gmail.com</a>
<a href=""mailto:a.n.dri.e.d.m.iche.al@gmail.com"">a.n.dri.e.d.m.iche.al@gmail.com</a>
<a href=""mailto:a.n.d.ri.ed.m.i.ch.e.al@gmail.com"">a.n.d.ri.ed.m.i.ch.e.al@gmail.com</a>
<a href=""mailto:an.dri.edm.ichea.l@gmail.com"">an.dri.edm.ichea.l@gmail.com</a>
<a href=""mailto:an.dr.ied.mi.c.he.a.l@gmail.com"">an.dr.ied.mi.c.he.a.l@gmail.com</a>
<a href=""mailto:an.dr.i.e.d.m.i.c.hea.l@gmail.com"">an.dr.i.e.d.m.i.c.hea.l@gmail.com</a>
<a href=""mailto:andr.ie.d.m.ic.hea.l@gmail.com"">andr.ie.d.m.ic.hea.l@gmail.com</a>
<a href=""mailto:a.n.d.ri.e.d.mi.c.h.e.a.l@gmail.com"">a.n.d.ri.e.d.mi.c.h.e.a.l@gmail.com</a>
<a href=""mailto:a.n.d.rie.dm.i.chea.l@gmail.com"">a.n.d.rie.dm.i.chea.l@gmail.com</a>
<a href=""mailto:and.r.i.e.dmic.heal@gmail.com"">and.r.i.e.dmic.heal@gmail.com</a>
<a href=""mailto:a.nd.r.i.ed.mi.c.h.eal@gmail.com"">a.nd.r.i.ed.mi.c.h.eal@gmail.com</a>
<a href=""mailto:a.n.dr.i.edmic.he.al@gmail.com"">a.n.dr.i.edmic.he.al@gmail.com</a>
<a href=""mailto:an.d.r.iedmi.c.h.e.a.l@gmail.com"">an.d.r.iedmi.c.h.e.a.l@gmail.com</a>
<a href=""mailto:a.ndried.m.ich.e.a.l@gmail.com"">a.ndried.m.ich.e.a.l@gmail.com</a>
<a href=""mailto:andr.ie.d.mi.c.h.e.al@gmail.com"">andr.ie.d.mi.c.h.e.al@gmail.com</a>
<a href=""mailto:and.riedmic.h.e.a.l@gmail.com"">and.riedmic.h.e.a.l@gmail.com</a>
<a href=""mailto:a.nd.rie.d.mi.c.he.al@gmail.com"">a.nd.rie.d.mi.c.he.al@gmail.com</a>
<a href=""mailto:a.nd.r.ie.d.mi.ch.e.al@gmail.com"">a.nd.r.ie.d.mi.ch.e.al@gmail.com</a>
<a href=""mailto:a.nd.r.ie.dmich.e.a.l@gmail.com"">a.nd.r.ie.dmich.e.a.l@gmail.com</a>
<a href=""mailto:a.n.d.rie.d.mic.h.e.al@gmail.com"">a.n.d.rie.d.mic.h.e.al@gmail.com</a>
<a href=""mailto:an.dr.ied.mic.h.ea.l@gmail.com"">an.dr.ied.mic.h.ea.l@gmail.com</a>
<a href=""mailto:an.d.r.ie.d.mich.e.al@gmail.com"">an.d.r.ie.d.mich.e.al@gmail.com</a>
<a href=""mailto:an.d.ri.e.d.mi.cheal@gmail.com"">an.d.ri.e.d.mi.cheal@gmail.com</a>
<a href=""mailto:and.r.i.edmi.che.a.l@gmail.com"">and.r.i.edmi.che.a.l@gmail.com</a>
<a href=""mailto:andri.e.dmiche.al@gmail.com"">andri.e.dmiche.al@gmail.com</a>
<a href=""mailto:a.ndr.i.ed.mich.eal@gmail.com"">a.ndr.i.ed.mich.eal@gmail.com</a>
<a href=""mailto:an.d.r.ie.dmichea.l@gmail.com"">an.d.r.ie.dmichea.l@gmail.com</a>
<a href=""mailto:andr.i.e.dmi.ch.eal@gmail.com"">andr.i.e.dmi.ch.eal@gmail.com</a>
<a href=""mailto:a.n.dri.ed.m.ichea.l@gmail.com"">a.n.dri.ed.m.ichea.l@gmail.com</a>
<a href=""mailto:a.ndri.edmi.c.h.e.a.l@gmail.com"">a.ndri.edmi.c.h.e.a.l@gmail.com</a>
<a href=""mailto:and.ried.miche.a.l@gmail.com"">and.ried.miche.a.l@gmail.com</a>
<a href=""mailto:a.n.dried.m.ic.h.e.al@gmail.com"">a.n.dried.m.ic.h.e.al@gmail.com</a>
<a href=""mailto:a.nd.ri.e.d.m.ic.h.eal@gmail.com"">a.nd.ri.e.d.m.ic.h.eal@gmail.com</a>
<a href=""mailto:an.dr.i.edm.ic.h.eal@gmail.com"">an.dr.i.edm.ic.h.eal@gmail.com</a>
<a href=""mailto:and.r.iedm.ich.ea.l@gmail.com"">and.r.iedm.ich.ea.l@gmail.com</a>
<a href=""mailto:a.ndr.i.e.d.mic.h.ea.l@gmail.com"">a.ndr.i.e.d.mic.h.ea.l@gmail.com</a>
<a href=""mailto:a.ndr.ie.dm.iche.al@gmail.com"">a.ndr.ie.dm.iche.al@gmail.com</a>
<a href=""mailto:a.n.dr.iedmi.c.h.ea.l@gmail.com"">a.n.dr.iedmi.c.h.ea.l@gmail.com</a>
<a href=""mailto:rulaghani01@gmail.com"">rulaghani01@gmail.com</a>
<a href=""mailto:rula.gh.a.n.i0.1@gmail.com"">rula.gh.a.n.i0.1@gmail.com</a>
<a href=""mailto:rul.a.g.ha.ni0.1@gmail.com"">rul.a.g.ha.ni0.1@gmail.com</a>
<a href=""mailto:r.u.la.g.h.a.n.i.0.1@gmail.com"">r.u.la.g.h.a.n.i.0.1@gmail.com</a>
<a href=""mailto:r.ula.gha.n.i01@gmail.com"">r.ula.gha.n.i01@gmail.com</a>
<a href=""mailto:r.ul.agh.ani01@gmail.com"">r.ul.agh.ani01@gmail.com</a>
<a href=""mailto:rula.g.h.an.i.0.1@gmail.com"">rula.g.h.an.i.0.1@gmail.com</a>
<a href=""mailto:rulag.ha.n.i.01@gmail.com"">rulag.ha.n.i.01@gmail.com</a>
<a href=""mailto:rul.ag.h.an.i.0.1@gmail.com"">rul.ag.h.an.i.0.1@gmail.com</a>
<a href=""mailto:r.ul.aghan.i.0.1@gmail.com"">r.ul.aghan.i.0.1@gmail.com</a>
<a href=""mailto:r.u.lagh.an.i.01@gmail.com"">r.u.lagh.an.i.01@gmail.com</a>
<a href=""mailto:rula.gha.ni.0.1@gmail.com"">rula.gha.ni.0.1@gmail.com</a>
<a href=""mailto:r.ul.a.gh.a.ni0.1@gmail.com"">r.ul.a.gh.a.ni0.1@gmail.com</a>
<a href=""mailto:r.ula.gh.an.i01@gmail.com"">r.ula.gh.an.i01@gmail.com</a>
<a href=""mailto:rula.g.h.ani.01@gmail.com"">rula.g.h.ani.01@gmail.com</a>
<a href=""mailto:rul.a.g.h.an.i.0.1@gmail.com"">rul.a.g.h.an.i.0.1@gmail.com</a>
<a href=""mailto:r.ulagh.a.n.i0.1@gmail.com"">r.ulagh.a.n.i0.1@gmail.com</a>
<a href=""mailto:rula.gh.a.n.i.0.1@gmail.com"">rula.gh.a.n.i.0.1@gmail.com</a>
<a href=""mailto:ru.l.a.g.h.ani.01@gmail.com"">ru.l.a.g.h.ani.01@gmail.com</a>
<a href=""mailto:r.ul.a.g.h.a.n.i0.1@gmail.com"">r.ul.a.g.h.a.n.i0.1@gmail.com</a>
<a href=""mailto:rula.gh.ani.0.1@gmail.com"">rula.gh.ani.0.1@gmail.com</a>
<a href=""mailto:rulag.h.an.i.01@gmail.com"">rulag.h.an.i.01@gmail.com</a>
<a href=""mailto:r.u.l.agh.a.ni.01@gmail.com"">r.u.l.agh.a.ni.01@gmail.com</a>
<a href=""mailto:r.ul.a.ghan.i01@gmail.com"">r.ul.a.ghan.i01@gmail.com</a>
<a href=""mailto:rul.aghani0.1@gmail.com"">rul.aghani0.1@gmail.com</a>
<a href=""mailto:ru.l.agha.ni0.1@gmail.com"">ru.l.agha.ni0.1@gmail.com</a>
<a href=""mailto:r.ul.a.g.han.i.0.1@gmail.com"">r.ul.a.g.han.i.0.1@gmail.com</a>
<a href=""mailto:ru.l.agha.n.i.01@gmail.com"">ru.l.agha.n.i.01@gmail.com</a>
<a href=""mailto:r.u.lagh.ani.01@gmail.com"">r.u.lagh.ani.01@gmail.com</a>
<a href=""mailto:rul.agh.ani0.1@gmail.com"">rul.agh.ani0.1@gmail.com</a>
<a href=""mailto:ru.lagh.an.i.01@gmail.com"">ru.lagh.an.i.01@gmail.com</a>
<a href=""mailto:ru.la.gh.a.n.i.0.1@gmail.com"">ru.la.gh.a.n.i.0.1@gmail.com</a>
<a href=""mailto:r.ul.a.gha.ni.0.1@gmail.com"">r.ul.a.gha.ni.0.1@gmail.com</a>
<a href=""mailto:rul.a.g.h.an.i.01@gmail.com"">rul.a.g.h.an.i.01@gmail.com</a>
<a href=""mailto:r.ul.a.g.h.a.ni01@gmail.com"">r.ul.a.g.h.a.ni01@gmail.com</a>
<a href=""mailto:r.ula.gh.a.n.i0.1@gmail.com"">r.ula.gh.a.n.i0.1@gmail.com</a>
<a href=""mailto:ru.lagh.ani.01@gmail.com"">ru.lagh.ani.01@gmail.com</a>
<a href=""mailto:ru.la.gha.n.i0.1@gmail.com"">ru.la.gha.n.i0.1@gmail.com</a>
<a href=""mailto:ru.la.ghani.0.1@gmail.com"">ru.la.ghani.0.1@gmail.com</a>
<a href=""mailto:r.ula.gh.a.ni.0.1@gmail.com"">r.ula.gh.a.ni.0.1@gmail.com</a>
<a href=""mailto:r.ula.g.han.i01@gmail.com"">r.ula.g.han.i01@gmail.com</a>
<a href=""mailto:ru.la.g.ha.ni.0.1@gmail.com"">ru.la.g.ha.ni.0.1@gmail.com</a>
<a href=""mailto:ru.l.a.gh.a.n.i.0.1@gmail.com"">ru.l.a.gh.a.n.i.0.1@gmail.com</a>
<a href=""mailto:rul.a.g.ha.n.i.0.1@gmail.com"">rul.a.g.ha.n.i.0.1@gmail.com</a>
<a href=""mailto:r.u.l.a.g.hani.0.1@gmail.com"">r.u.l.a.g.hani.0.1@gmail.com</a>
<a href=""mailto:rul.aghan.i.0.1@gmail.com"">rul.aghan.i.0.1@gmail.com</a>
<a href=""mailto:r.u.l.a.gha.ni.01@gmail.com"">r.u.l.a.gha.ni.01@gmail.com</a>
<a href=""mailto:r.u.la.ghan.i01@gmail.com"">r.u.la.ghan.i01@gmail.com</a>
<a href=""mailto:rul.a.g.h.an.i0.1@gmail.com"">rul.a.g.h.an.i0.1@gmail.com</a>
<a href=""mailto:rul.a.g.h.a.n.i.01@gmail.com"">rul.a.g.h.a.n.i.01@gmail.com</a>
<a href=""mailto:ru.lag.hani01@gmail.com"">ru.lag.hani01@gmail.com</a>
<a href=""mailto:ru.la.g.han.i.0.1@gmail.com"">ru.la.g.han.i.0.1@gmail.com</a>
<a href=""mailto:rulag.hani01@gmail.com"">rulag.hani01@gmail.com</a>
<a href=""mailto:r.u.lag.h.ani.0.1@gmail.com"">r.u.lag.h.ani.0.1@gmail.com</a>
<a href=""mailto:r.ula.g.ha.ni01@gmail.com"">r.ula.g.ha.ni01@gmail.com</a>
<a href=""mailto:rulag.ha.n.i01@gmail.com"">rulag.ha.n.i01@gmail.com</a>
<a href=""mailto:rulag.h.a.ni.0.1@gmail.com"">rulag.h.a.ni.0.1@gmail.com</a>
<a href=""mailto:r.u.la.gha.n.i.01@gmail.com"">r.u.la.gha.n.i.01@gmail.com</a>
<a href=""mailto:r.u.l.ag.h.a.n.i.0.1@gmail.com"">r.u.l.ag.h.a.n.i.0.1@gmail.com</a>
<a href=""mailto:r.u.l.agh.a.ni01@gmail.com"">r.u.l.agh.a.ni01@gmail.com</a>
<a href=""mailto:rul.a.gh.ani.01@gmail.com"">rul.a.gh.ani.01@gmail.com</a>
<a href=""mailto:r.ula.gh.an.i.0.1@gmail.com"">r.ula.gh.an.i.0.1@gmail.com</a>
<a href=""mailto:rul.a.g.h.ani01@gmail.com"">rul.a.g.h.ani01@gmail.com</a>
<a href=""mailto:r.u.la.g.hani01@gmail.com"">r.u.la.g.hani01@gmail.com</a>
<a href=""mailto:r.ul.ag.h.a.ni.0.1@gmail.com"">r.ul.ag.h.a.ni.0.1@gmail.com</a>
<a href=""mailto:r.u.l.agh.a.n.i.0.1@gmail.com"">r.u.l.agh.a.n.i.0.1@gmail.com</a>
<a href=""mailto:r.u.l.a.gha.n.i0.1@gmail.com"">r.u.l.a.gha.n.i0.1@gmail.com</a>
<a href=""mailto:rulaghani01@gmail.com"">rulaghani01@gmail.com</a>
<a href=""mailto:ru.la.g.han.i01@gmail.com"">ru.la.g.han.i01@gmail.com</a>
<a href=""mailto:r.ul.a.gh.ani.0.1@gmail.com"">r.ul.a.gh.ani.0.1@gmail.com</a>
<a href=""mailto:r.u.l.agh.ani0.1@gmail.com"">r.u.l.agh.ani0.1@gmail.com</a>
<a href=""mailto:ru.lag.h.a.n.i.01@gmail.com"">ru.lag.h.a.n.i.01@gmail.com</a>
<a href=""mailto:ru.l.a.gh.an.i01@gmail.com"">ru.l.a.gh.an.i01@gmail.com</a>
<a href=""mailto:ru.l.a.g.h.a.ni0.1@gmail.com"">ru.l.a.g.h.a.ni0.1@gmail.com</a>
<a href=""mailto:r.ul.agh.a.ni.01@gmail.com"">r.ul.agh.a.ni.01@gmail.com</a>
<a href=""mailto:rulagha.n.i.01@gmail.com"">rulagha.n.i.01@gmail.com</a>
<a href=""mailto:ru.l.a.g.h.a.n.i.0.1@gmail.com"">ru.l.a.g.h.a.n.i.0.1@gmail.com</a>
<a href=""mailto:r.ul.agha.ni.01@gmail.com"">r.ul.agha.ni.01@gmail.com</a>
<a href=""mailto:r.ulag.h.ani.01@gmail.com"">r.ulag.h.ani.01@gmail.com</a>
<a href=""mailto:ru.lag.h.a.ni.01@gmail.com"">ru.lag.h.a.ni.01@gmail.com</a>
<a href=""mailto:r.ul.a.ghani.01@gmail.com"">r.ul.a.ghani.01@gmail.com</a>
<a href=""mailto:r.u.lag.h.a.n.i01@gmail.com"">r.u.lag.h.a.n.i01@gmail.com</a>
<a href=""mailto:r.u.lag.h.ani01@gmail.com"">r.u.lag.h.ani01@gmail.com</a>
<a href=""mailto:ru.l.ag.h.a.ni.0.1@gmail.com"">ru.l.ag.h.a.ni.0.1@gmail.com</a>
<a href=""mailto:ru.l.a.g.ha.n.i0.1@gmail.com"">ru.l.a.g.ha.n.i0.1@gmail.com</a>
<a href=""mailto:rul.a.gha.ni01@gmail.com"">rul.a.gha.ni01@gmail.com</a>
<a href=""mailto:ru.l.a.g.h.an.i01@gmail.com"">ru.l.a.g.h.an.i01@gmail.com</a>
<a href=""mailto:ru.lagh.ani.0.1@gmail.com"">ru.lagh.ani.0.1@gmail.com</a>
<a href=""mailto:rul.agh.an.i01@gmail.com"">rul.agh.an.i01@gmail.com</a>
<a href=""mailto:r.ul.a.gh.ani01@gmail.com"">r.ul.a.gh.ani01@gmail.com</a>
<a href=""mailto:r.ul.a.g.hani01@gmail.com"">r.ul.a.g.hani01@gmail.com</a>
<a href=""mailto:r.ula.g.h.ani0.1@gmail.com"">r.ula.g.h.ani0.1@gmail.com</a>
<a href=""mailto:r.u.l.a.g.h.ani.0.1@gmail.com"">r.u.l.a.g.h.ani.0.1@gmail.com</a>
<a href=""mailto:r.u.l.agh.a.ni.0.1@gmail.com"">r.u.l.agh.a.ni.0.1@gmail.com</a>
<a href=""mailto:r.u.la.g.h.an.i.01@gmail.com"">r.u.la.g.h.an.i.01@gmail.com</a>
<a href=""mailto:ru.laghan.i.01@gmail.com"">ru.laghan.i.01@gmail.com</a>
<a href=""mailto:r.u.l.ag.ha.n.i0.1@gmail.com"">r.u.l.ag.ha.n.i0.1@gmail.com</a>
<a href=""mailto:rul.agh.a.ni0.1@gmail.com"">rul.agh.a.ni0.1@gmail.com</a>
<a href=""mailto:r.u.lagha.n.i.01@gmail.com"">r.u.lagha.n.i.01@gmail.com</a>
<a href=""mailto:r.ul.a.g.ha.ni.01@gmail.com"">r.ul.a.g.ha.ni.01@gmail.com</a>
<a href=""mailto:r.u.la.gh.a.ni0.1@gmail.com"">r.u.la.gh.a.ni0.1@gmail.com</a>
<a href=""mailto:rul.a.gh.a.n.i.0.1@gmail.com"">rul.a.gh.a.n.i.0.1@gmail.com</a>
<a href=""mailto:r.ul.a.gh.an.i0.1@gmail.com"">r.ul.a.gh.an.i0.1@gmail.com</a>
<a href=""mailto:r.u.l.a.ghan.i0.1@gmail.com"">r.u.l.a.ghan.i0.1@gmail.com</a>
<a href=""mailto:r.ulag.h.ani.0.1@gmail.com"">r.ulag.h.ani.0.1@gmail.com</a>
<a href=""mailto:r.u.l.a.gh.an.i0.1@gmail.com"">r.u.l.a.gh.an.i0.1@gmail.com</a>
<a href=""mailto:r.u.la.g.h.ani0.1@gmail.com"">r.u.la.g.h.ani0.1@gmail.com</a>
<a href=""mailto:rul.a.gh.a.ni.0.1@gmail.com"">rul.a.gh.a.ni.0.1@gmail.com</a>
<a href=""mailto:r.ulag.hani.01@gmail.com"">r.ulag.hani.01@gmail.com</a>
<a href=""mailto:rula.g.h.a.n.i.01@gmail.com"">rula.g.h.a.n.i.01@gmail.com</a>
<a href=""mailto:rul.ag.h.a.n.i.01@gmail.com"">rul.ag.h.a.n.i.01@gmail.com</a>
<a href=""mailto:ru.lag.h.an.i01@gmail.com"">ru.lag.h.an.i01@gmail.com</a>
<a href=""mailto:r.u.lag.h.a.ni0.1@gmail.com"">r.u.lag.h.a.ni0.1@gmail.com</a>
<a href=""mailto:rulag.h.an.i01@gmail.com"">rulag.h.an.i01@gmail.com</a>
<a href=""mailto:r.u.la.ghani01@gmail.com"">r.u.la.ghani01@gmail.com</a>
<a href=""mailto:r.u.l.agha.ni.0.1@gmail.com"">r.u.l.agha.ni.0.1@gmail.com</a>
<a href=""mailto:r.ul.a.ghani01@gmail.com"">r.ul.a.ghani01@gmail.com</a>
<a href=""mailto:r.ul.aghan.i0.1@gmail.com"">r.ul.aghan.i0.1@gmail.com</a>
<a href=""mailto:r.ul.ag.han.i.0.1@gmail.com"">r.ul.ag.han.i.0.1@gmail.com</a>
<a href=""mailto:r.u.lagha.n.i0.1@gmail.com"">r.u.lagha.n.i0.1@gmail.com</a>
<a href=""mailto:rula.ghani.0.1@gmail.com"">rula.ghani.0.1@gmail.com</a>
<a href=""mailto:r.ulagh.ani01@gmail.com"">r.ulagh.ani01@gmail.com</a>
<a href=""mailto:r.ul.a.gha.n.i.0.1@gmail.com"">r.ul.a.gha.n.i.0.1@gmail.com</a>
<a href=""mailto:r.u.l.aghan.i.01@gmail.com"">r.u.l.aghan.i.01@gmail.com</a>
<a href=""mailto:r.ul.aghani0.1@gmail.com"">r.ul.aghani0.1@gmail.com</a>
<a href=""mailto:ru.la.gh.a.n.i.01@gmail.com"">ru.la.gh.a.n.i.01@gmail.com</a>
<a href=""mailto:r.ula.ghani01@gmail.com"">r.ula.ghani01@gmail.com</a>
<a href=""mailto:ru.lagha.n.i.01@gmail.com"">ru.lagha.n.i.01@gmail.com</a>
<a href=""mailto:ru.la.g.han.i0.1@gmail.com"">ru.la.g.han.i0.1@gmail.com</a>
<a href=""mailto:r.u.lagha.n.i01@gmail.com"">r.u.lagha.n.i01@gmail.com</a>
<a href=""mailto:r.ula.ghan.i01@gmail.com"">r.ula.ghan.i01@gmail.com</a>
<a href=""mailto:r.u.l.aghan.i0.1@gmail.com"">r.u.l.aghan.i0.1@gmail.com</a>
<a href=""mailto:r.ul.a.gha.n.i.01@gmail.com"">r.ul.a.gha.n.i.01@gmail.com</a>
<a href=""mailto:rula.gh.an.i.01@gmail.com"">rula.gh.an.i.01@gmail.com</a>
<a href=""mailto:rul.a.gha.ni.0.1@gmail.com"">rul.a.gha.ni.0.1@gmail.com</a>
<a href=""mailto:ru.l.a.gh.an.i.0.1@gmail.com"">ru.l.a.gh.an.i.0.1@gmail.com</a>
<a href=""mailto:ru.la.gh.a.n.i0.1@gmail.com"">ru.la.gh.a.n.i0.1@gmail.com</a>
<a href=""mailto:r.ul.ag.h.a.n.i.0.1@gmail.com"">r.ul.ag.h.a.n.i.0.1@gmail.com</a>
<a href=""mailto:rula.ghani.01@gmail.com"">rula.ghani.01@gmail.com</a>
<a href=""mailto:ru.l.a.ghani.01@gmail.com"">ru.l.a.ghani.01@gmail.com</a>
<a href=""mailto:r.u.l.a.gh.a.n.i0.1@gmail.com"">r.u.l.a.gh.a.n.i0.1@gmail.com</a>
<a href=""mailto:ru.l.a.g.ha.ni01@gmail.com"">ru.l.a.g.ha.ni01@gmail.com</a>
<a href=""mailto:rul.a.ghani.0.1@gmail.com"">rul.a.ghani.0.1@gmail.com</a>
<a href=""mailto:rul.a.gh.an.i.01@gmail.com"">rul.a.gh.an.i.01@gmail.com</a>
<a href=""mailto:rula.g.han.i01@gmail.com"">rula.g.han.i01@gmail.com</a>
<a href=""mailto:ru.l.a.g.h.an.i0.1@gmail.com"">ru.l.a.g.h.an.i0.1@gmail.com</a>
<a href=""mailto:r.ul.ag.h.an.i01@gmail.com"">r.ul.ag.h.an.i01@gmail.com</a>
<a href=""mailto:r.u.l.agh.a.n.i.01@gmail.com"">r.u.l.agh.a.n.i.01@gmail.com</a>
<a href=""mailto:rulag.h.ani.01@gmail.com"">rulag.h.ani.01@gmail.com</a>
<a href=""mailto:r.u.la.gh.a.ni.01@gmail.com"">r.u.la.gh.a.ni.01@gmail.com</a>
<a href=""mailto:ru.l.a.g.hani.01@gmail.com"">ru.l.a.g.hani.01@gmail.com</a>
<a href=""mailto:r.ulagha.ni.01@gmail.com"">r.ulagha.ni.01@gmail.com</a>
<a href=""mailto:r.u.l.ag.han.i01@gmail.com"">r.u.l.ag.han.i01@gmail.com</a>
<a href=""mailto:ru.l.a.g.hani.0.1@gmail.com"">ru.l.a.g.hani.0.1@gmail.com</a>
<a href=""mailto:ru.lagha.ni.01@gmail.com"">ru.lagha.ni.01@gmail.com</a>
<a href=""mailto:r.ul.a.g.h.ani0.1@gmail.com"">r.ul.a.g.h.ani0.1@gmail.com</a>
<a href=""mailto:r.u.l.a.gha.n.i.01@gmail.com"">r.u.l.a.gha.n.i.01@gmail.com</a>
<a href=""mailto:r.ul.a.g.ha.n.i01@gmail.com"">r.ul.a.g.ha.n.i01@gmail.com</a>
<a href=""mailto:ru.la.g.h.ani.01@gmail.com"">ru.la.g.h.ani.01@gmail.com</a>
<a href=""mailto:rula.g.hani.0.1@gmail.com"">rula.g.hani.0.1@gmail.com</a>
<a href=""mailto:r.u.l.a.g.h.an.i0.1@gmail.com"">r.u.l.a.g.h.an.i0.1@gmail.com</a>
<a href=""mailto:r.u.l.a.g.h.a.n.i.0.1@gmail.com"">r.u.l.a.g.h.a.n.i.0.1@gmail.com</a>
<a href=""mailto:r.u.l.a.g.ha.ni.0.1@gmail.com"">r.u.l.a.g.ha.ni.0.1@gmail.com</a>
<a href=""mailto:r.ul.a.g.h.an.i0.1@gmail.com"">r.ul.a.g.h.an.i0.1@gmail.com</a>
<a href=""mailto:r.ulag.h.ani0.1@gmail.com"">r.ulag.h.ani0.1@gmail.com</a>
<a href=""mailto:r.u.l.a.g.h.a.n.i0.1@gmail.com"">r.u.l.a.g.h.a.n.i0.1@gmail.com</a>
<a href=""mailto:rul.a.g.h.a.n.i0.1@gmail.com"">rul.a.g.h.a.n.i0.1@gmail.com</a>
<a href=""mailto:r.u.lag.ha.n.i0.1@gmail.com"">r.u.lag.ha.n.i0.1@gmail.com</a>
<a href=""mailto:r.ul.ag.ha.ni01@gmail.com"">r.ul.ag.ha.ni01@gmail.com</a>
<a href=""mailto:ru.l.agh.ani.01@gmail.com"">ru.l.agh.ani.01@gmail.com</a>
<a href=""mailto:r.u.l.ag.hani.0.1@gmail.com"">r.u.l.ag.hani.0.1@gmail.com</a>
<a href=""mailto:r.ula.g.h.a.n.i.0.1@gmail.com"">r.ula.g.h.a.n.i.0.1@gmail.com</a>
<a href=""mailto:r.ul.a.gha.n.i01@gmail.com"">r.ul.a.gha.n.i01@gmail.com</a>
<a href=""mailto:rula.ghani01@gmail.com"">rula.ghani01@gmail.com</a>
<a href=""mailto:rulag.hani0.1@gmail.com"">rulag.hani0.1@gmail.com</a>
<a href=""mailto:r.u.l.aghani01@gmail.com"">r.u.l.aghani01@gmail.com</a>
<a href=""mailto:ru.lagh.a.ni01@gmail.com"">ru.lagh.a.ni01@gmail.com</a>
<a href=""mailto:r.u.l.a.gha.ni0.1@gmail.com"">r.u.l.a.gha.ni0.1@gmail.com</a>
<a href=""mailto:r.u.l.a.g.h.a.n.i01@gmail.com"">r.u.l.a.g.h.a.n.i01@gmail.com</a>
<a href=""mailto:ru.la.gh.an.i0.1@gmail.com"">ru.la.gh.an.i0.1@gmail.com</a>
<a href=""mailto:ru.l.a.g.hani0.1@gmail.com"">ru.l.a.g.hani0.1@gmail.com</a>
<a href=""mailto:rul.a.g.h.a.ni.0.1@gmail.com"">rul.a.g.h.a.ni.0.1@gmail.com</a>
<a href=""mailto:r.u.la.gh.a.n.i.0.1@gmail.com"">r.u.la.gh.a.n.i.0.1@gmail.com</a>
<a href=""mailto:r.u.l.ag.h.an.i.0.1@gmail.com"">r.u.l.ag.h.an.i.0.1@gmail.com</a>
<a href=""mailto:r.ul.agh.a.n.i0.1@gmail.com"">r.ul.agh.a.n.i0.1@gmail.com</a>
<a href=""mailto:r.u.l.a.g.han.i01@gmail.com"">r.u.l.a.g.han.i01@gmail.com</a>
<a href=""mailto:ru.l.a.gh.an.i0.1@gmail.com"">ru.l.a.gh.an.i0.1@gmail.com</a>
<a href=""mailto:rula.gha.ni01@gmail.com"">rula.gha.ni01@gmail.com</a>
<a href=""mailto:ru.la.g.hani.01@gmail.com"">ru.la.g.hani.01@gmail.com</a>
<a href=""mailto:rul.a.gh.a.ni0.1@gmail.com"">rul.a.gh.a.ni0.1@gmail.com</a>
<a href=""mailto:rul.a.gh.a.ni01@gmail.com"">rul.a.gh.a.ni01@gmail.com</a>
<a href=""mailto:ru.l.agh.an.i.0.1@gmail.com"">ru.l.agh.an.i.0.1@gmail.com</a>
<a href=""mailto:rul.a.gh.a.ni.01@gmail.com"">rul.a.gh.a.ni.01@gmail.com</a>
<a href=""mailto:rul.agh.ani.0.1@gmail.com"">rul.agh.ani.0.1@gmail.com</a>
<a href=""mailto:r.ulag.hani0.1@gmail.com"">r.ulag.hani0.1@gmail.com</a>
<a href=""mailto:r.ul.ag.h.ani0.1@gmail.com"">r.ul.ag.h.ani0.1@gmail.com</a>
<a href=""mailto:r.ul.a.g.ha.n.i0.1@gmail.com"">r.ul.a.g.ha.n.i0.1@gmail.com</a>
<a href=""mailto:r.u.l.ag.h.a.ni.0.1@gmail.com"">r.u.l.ag.h.a.ni.0.1@gmail.com</a>
<a href=""mailto:rul.a.g.h.a.ni01@gmail.com"">rul.a.g.h.a.ni01@gmail.com</a>
<a href=""mailto:r.u.lagh.a.ni.0.1@gmail.com"">r.u.lagh.a.ni.0.1@gmail.com</a>
<a href=""mailto:r.u.l.a.g.h.a.ni01@gmail.com"">r.u.l.a.g.h.a.ni01@gmail.com</a>
<a href=""mailto:officefilrty@gmail.com"">officefilrty@gmail.com</a>
<a href=""mailto:of.f.i.c.e.fil.r.t.y@gmail.com"">of.f.i.c.e.fil.r.t.y@gmail.com</a>
<a href=""mailto:o.f.f.i.c.ef.i.l.rt.y@gmail.com"">o.f.f.i.c.ef.i.l.rt.y@gmail.com</a>
<a href=""mailto:o.f.f.i.ce.fi.l.rt.y@gmail.com"">o.f.f.i.ce.fi.l.rt.y@gmail.com</a>
<a href=""mailto:off.ic.ef.i.lr.t.y@gmail.com"">off.ic.ef.i.lr.t.y@gmail.com</a>
<a href=""mailto:of.f.i.cef.il.r.ty@gmail.com"">of.f.i.cef.il.r.ty@gmail.com</a>
<a href=""mailto:o.f.f.i.ce.f.ilr.t.y@gmail.com"">o.f.f.i.ce.f.ilr.t.y@gmail.com</a>
<a href=""mailto:o.f.f.ice.filrt.y@gmail.com"">o.f.f.ice.filrt.y@gmail.com</a>
<a href=""mailto:o.f.f.ice.f.il.rt.y@gmail.com"">o.f.f.ice.f.il.rt.y@gmail.com</a>
<a href=""mailto:o.ffi.ce.filrty@gmail.com"">o.ffi.ce.filrty@gmail.com</a>
<a href=""mailto:o.fficef.il.rt.y@gmail.com"">o.fficef.il.rt.y@gmail.com</a>
<a href=""mailto:off.ic.e.f.ilr.t.y@gmail.com"">off.ic.e.f.ilr.t.y@gmail.com</a>
<a href=""mailto:o.ff.ice.filr.t.y@gmail.com"">o.ff.ice.filr.t.y@gmail.com</a>
<a href=""mailto:offi.c.e.fi.l.rty@gmail.com"">offi.c.e.fi.l.rty@gmail.com</a>
<a href=""mailto:o.f.f.ic.e.f.i.lr.ty@gmail.com"">o.f.f.ic.e.f.i.lr.ty@gmail.com</a>
<a href=""mailto:of.fi.cefilrty@gmail.com"">of.fi.cefilrty@gmail.com</a>
<a href=""mailto:of.fi.ce.f.il.r.ty@gmail.com"">of.fi.ce.f.il.r.ty@gmail.com</a>
<a href=""mailto:of.ficefil.r.ty@gmail.com"">of.ficefil.r.ty@gmail.com</a>
<a href=""mailto:o.f.fi.c.efi.lr.ty@gmail.com"">o.f.fi.c.efi.lr.ty@gmail.com</a>
<a href=""mailto:o.ffi.cef.i.lr.t.y@gmail.com"">o.ffi.cef.i.lr.t.y@gmail.com</a>
<a href=""mailto:o.ff.icefi.l.r.ty@gmail.com"">o.ff.icefi.l.r.ty@gmail.com</a>
<a href=""mailto:offic.e.f.ilr.ty@gmail.com"">offic.e.f.ilr.ty@gmail.com</a>
<a href=""mailto:officefil.r.t.y@gmail.com"">officefil.r.t.y@gmail.com</a>
<a href=""mailto:o.ffi.cef.i.lrty@gmail.com"">o.ffi.cef.i.lrty@gmail.com</a>
<a href=""mailto:o.f.fice.filr.t.y@gmail.com"">o.f.fice.filr.t.y@gmail.com</a>
<a href=""mailto:offi.c.ef.il.r.ty@gmail.com"">offi.c.ef.il.r.ty@gmail.com</a>
<a href=""mailto:o.ff.ic.e.fi.lrt.y@gmail.com"">o.ff.ic.e.fi.lrt.y@gmail.com</a>
<a href=""mailto:o.f.fic.e.fil.r.t.y@gmail.com"">o.f.fic.e.fil.r.t.y@gmail.com</a>
<a href=""mailto:of.f.i.cefi.l.r.t.y@gmail.com"">of.f.i.cefi.l.r.t.y@gmail.com</a>
<a href=""mailto:o.f.ficef.i.lrt.y@gmail.com"">o.f.ficef.i.lrt.y@gmail.com</a>
<a href=""mailto:officefi.lr.ty@gmail.com"">officefi.lr.ty@gmail.com</a>
<a href=""mailto:o.f.ficef.ilrt.y@gmail.com"">o.f.ficef.ilrt.y@gmail.com</a>
<a href=""mailto:o.f.f.i.c.efi.lr.t.y@gmail.com"">o.f.f.i.c.efi.lr.t.y@gmail.com</a>
<a href=""mailto:o.f.f.i.c.ef.ilrt.y@gmail.com"">o.f.f.i.c.ef.ilrt.y@gmail.com</a>
<a href=""mailto:of.fic.ef.i.lrt.y@gmail.com"">of.fic.ef.i.lrt.y@gmail.com</a>
<a href=""mailto:off.i.ce.f.i.lr.t.y@gmail.com"">off.i.ce.f.i.lr.t.y@gmail.com</a>
<a href=""mailto:of.fic.ef.i.lr.t.y@gmail.com"">of.fic.ef.i.lr.t.y@gmail.com</a>
<a href=""mailto:of.f.ice.f.i.lr.ty@gmail.com"">of.f.ice.f.i.lr.ty@gmail.com</a>
<a href=""mailto:off.ice.fi.lrty@gmail.com"">off.ice.fi.lrty@gmail.com</a>
<a href=""mailto:o.ffi.c.e.f.i.lr.t.y@gmail.com"">o.ffi.c.e.f.i.lr.t.y@gmail.com</a>
<a href=""mailto:of.f.ice.filr.t.y@gmail.com"">of.f.ice.filr.t.y@gmail.com</a>
<a href=""mailto:o.ff.i.cefil.r.ty@gmail.com"">o.ff.i.cefil.r.ty@gmail.com</a>
<a href=""mailto:o.ff.ic.ef.i.lrty@gmail.com"">o.ff.ic.ef.i.lrty@gmail.com</a>
<a href=""mailto:o.ff.i.c.e.f.il.r.ty@gmail.com"">o.ff.i.c.e.f.il.r.ty@gmail.com</a>
<a href=""mailto:of.f.i.c.e.f.il.rt.y@gmail.com"">of.f.i.c.e.f.il.rt.y@gmail.com</a>
<a href=""mailto:offi.c.e.filr.ty@gmail.com"">offi.c.e.filr.ty@gmail.com</a>
<a href=""mailto:o.ff.i.c.e.fi.lr.ty@gmail.com"">o.ff.i.c.e.fi.lr.ty@gmail.com</a>
<a href=""mailto:o.f.fi.ce.f.il.r.ty@gmail.com"">o.f.fi.ce.f.il.r.ty@gmail.com</a>
<a href=""mailto:offic.ef.ilrt.y@gmail.com"">offic.ef.ilrt.y@gmail.com</a>
<a href=""mailto:o.ff.ic.e.f.ilr.ty@gmail.com"">o.ff.ic.e.f.ilr.ty@gmail.com</a>
<a href=""mailto:of.f.ic.e.f.i.lrty@gmail.com"">of.f.ic.e.f.i.lrty@gmail.com</a>
<a href=""mailto:o.f.f.i.c.e.fi.l.r.ty@gmail.com"">o.f.f.i.c.e.fi.l.r.ty@gmail.com</a>
<a href=""mailto:offi.ce.f.i.lr.ty@gmail.com"">offi.ce.f.i.lr.ty@gmail.com</a>
<a href=""mailto:of.f.i.cef.ilrt.y@gmail.com"">of.f.i.cef.ilrt.y@gmail.com</a>
<a href=""mailto:o.f.ficefilr.ty@gmail.com"">o.f.ficefilr.ty@gmail.com</a>
<a href=""mailto:office.f.i.l.r.ty@gmail.com"">office.f.i.l.r.ty@gmail.com</a>
<a href=""mailto:of.f.icefil.rt.y@gmail.com"">of.f.icefil.rt.y@gmail.com</a>
<a href=""mailto:officef.i.l.rt.y@gmail.com"">officef.i.l.rt.y@gmail.com</a>
<a href=""mailto:o.f.f.i.c.ef.il.r.t.y@gmail.com"">o.f.f.i.c.ef.il.r.t.y@gmail.com</a>
<a href=""mailto:o.f.fi.c.efil.r.ty@gmail.com"">o.f.fi.c.efil.r.ty@gmail.com</a>
<a href=""mailto:of.fi.c.ef.i.l.r.ty@gmail.com"">of.fi.c.ef.i.l.r.ty@gmail.com</a>
<a href=""mailto:o.ff.ic.ef.i.lr.t.y@gmail.com"">o.ff.ic.ef.i.lr.t.y@gmail.com</a>
<a href=""mailto:of.f.ice.f.i.lrty@gmail.com"">of.f.ice.f.i.lrty@gmail.com</a>
<a href=""mailto:o.ff.ice.fil.rt.y@gmail.com"">o.ff.ice.fil.rt.y@gmail.com</a>
<a href=""mailto:o.ff.icef.ilr.ty@gmail.com"">o.ff.icef.ilr.ty@gmail.com</a>
<a href=""mailto:off.i.c.e.f.ilrt.y@gmail.com"">off.i.c.e.f.ilrt.y@gmail.com</a>
<a href=""mailto:off.i.c.ef.ilr.ty@gmail.com"">off.i.c.ef.ilr.ty@gmail.com</a>
<a href=""mailto:of.fi.cef.i.l.r.t.y@gmail.com"">of.fi.cef.i.l.r.t.y@gmail.com</a>
<a href=""mailto:o.f.ficefilrty@gmail.com"">o.f.ficefilrty@gmail.com</a>
<a href=""mailto:o.f.f.i.ce.f.il.rty@gmail.com"">o.f.f.i.ce.f.il.rty@gmail.com</a>
<a href=""mailto:off.i.cefi.lrty@gmail.com"">off.i.cefi.lrty@gmail.com</a>
<a href=""mailto:o.ff.icef.i.lr.t.y@gmail.com"">o.ff.icef.i.lr.t.y@gmail.com</a>
<a href=""mailto:of.f.i.ce.fil.r.t.y@gmail.com"">of.f.i.ce.fil.r.t.y@gmail.com</a>
<a href=""mailto:o.f.fi.cefi.l.r.t.y@gmail.com"">o.f.fi.cefi.l.r.t.y@gmail.com</a>
<a href=""mailto:o.f.f.ice.fi.l.rty@gmail.com"">o.f.f.ice.fi.l.rty@gmail.com</a>
<a href=""mailto:o.ff.ic.e.f.i.lrt.y@gmail.com"">o.ff.ic.e.f.i.lrt.y@gmail.com</a>
<a href=""mailto:off.ic.e.filr.t.y@gmail.com"">off.ic.e.filr.t.y@gmail.com</a>
<a href=""mailto:of.fic.e.f.i.lr.t.y@gmail.com"">of.fic.e.f.i.lr.t.y@gmail.com</a>
<a href=""mailto:o.ff.i.ce.fil.rty@gmail.com"">o.ff.i.ce.fil.rty@gmail.com</a>
<a href=""mailto:o.f.fi.cef.i.l.rt.y@gmail.com"">o.f.fi.cef.i.l.rt.y@gmail.com</a>
<a href=""mailto:of.f.i.ce.filrty@gmail.com"">of.f.i.ce.filrty@gmail.com</a>
<a href=""mailto:o.f.f.ic.e.fil.rt.y@gmail.com"">o.f.f.ic.e.fil.rt.y@gmail.com</a>
<a href=""mailto:o.ff.i.cef.il.rt.y@gmail.com"">o.ff.i.cef.il.rt.y@gmail.com</a>
<a href=""mailto:o.f.f.ic.efil.r.t.y@gmail.com"">o.f.f.ic.efil.r.t.y@gmail.com</a>
<a href=""mailto:of.fic.efilrty@gmail.com"">of.fic.efilrty@gmail.com</a>
<a href=""mailto:o.ffic.e.fil.r.ty@gmail.com"">o.ffic.e.fil.r.ty@gmail.com</a>
<a href=""mailto:off.ic.e.fi.l.rty@gmail.com"">off.ic.e.fi.l.rty@gmail.com</a>
<a href=""mailto:o.f.f.ice.f.ilr.t.y@gmail.com"">o.f.f.ice.f.ilr.t.y@gmail.com</a>
<a href=""mailto:off.ic.e.fi.lrt.y@gmail.com"">off.ic.e.fi.lrt.y@gmail.com</a>
<a href=""mailto:office.f.il.r.ty@gmail.com"">office.f.il.r.ty@gmail.com</a>
<a href=""mailto:of.fice.fil.r.t.y@gmail.com"">of.fice.fil.r.t.y@gmail.com</a>
<a href=""mailto:of.f.i.ce.f.i.l.r.t.y@gmail.com"">of.f.i.ce.f.i.l.r.t.y@gmail.com</a>
<a href=""mailto:o.ffic.e.f.i.lrt.y@gmail.com"">o.ffic.e.f.i.lrt.y@gmail.com</a>
<a href=""mailto:of.f.i.c.e.filr.t.y@gmail.com"">of.f.i.c.e.filr.t.y@gmail.com</a>
<a href=""mailto:o.ff.i.c.efi.l.r.ty@gmail.com"">o.ff.i.c.efi.l.r.ty@gmail.com</a>
<a href=""mailto:of.f.icef.i.lrt.y@gmail.com"">of.f.icef.i.lrt.y@gmail.com</a>
<a href=""mailto:of.f.i.c.efil.rt.y@gmail.com"">of.f.i.c.efil.rt.y@gmail.com</a>
<a href=""mailto:of.fic.e.fil.r.t.y@gmail.com"">of.fic.e.fil.r.t.y@gmail.com</a>
<a href=""mailto:off.ic.efi.lrty@gmail.com"">off.ic.efi.lrty@gmail.com</a>
<a href=""mailto:o.ff.i.c.e.f.il.rt.y@gmail.com"">o.ff.i.c.e.f.il.rt.y@gmail.com</a>
<a href=""mailto:of.f.icef.il.rty@gmail.com"">of.f.icef.il.rty@gmail.com</a>
<a href=""mailto:o.fficef.il.r.ty@gmail.com"">o.fficef.il.r.ty@gmail.com</a>
<a href=""mailto:o.ff.icefi.lr.t.y@gmail.com"">o.ff.icefi.lr.t.y@gmail.com</a>
<a href=""mailto:o.ffic.e.fi.l.r.t.y@gmail.com"">o.ffic.e.fi.l.r.t.y@gmail.com</a>
<a href=""mailto:offi.c.e.f.il.rt.y@gmail.com"">offi.c.e.f.il.rt.y@gmail.com</a>
<a href=""mailto:of.fi.c.e.fi.lr.t.y@gmail.com"">of.fi.c.e.fi.lr.t.y@gmail.com</a>
<a href=""mailto:o.f.fi.c.ef.ilrt.y@gmail.com"">o.f.fi.c.ef.ilrt.y@gmail.com</a>
<a href=""mailto:o.ffic.ef.i.l.rty@gmail.com"">o.ffic.ef.i.l.rty@gmail.com</a>
<a href=""mailto:o.ffice.fi.l.rty@gmail.com"">o.ffice.fi.l.rty@gmail.com</a>
<a href=""mailto:o.ffic.efil.r.t.y@gmail.com"">o.ffic.efil.r.t.y@gmail.com</a>
<a href=""mailto:o.f.f.i.ce.fi.lrty@gmail.com"">o.f.f.i.ce.fi.lrty@gmail.com</a>
<a href=""mailto:offi.c.e.f.i.l.rt.y@gmail.com"">offi.c.e.f.i.l.rt.y@gmail.com</a>
<a href=""mailto:o.f.f.ice.f.i.l.rty@gmail.com"">o.f.f.ice.f.i.l.rty@gmail.com</a>
<a href=""mailto:officef.i.l.r.ty@gmail.com"">officef.i.l.r.ty@gmail.com</a>
<a href=""mailto:o.ff.icefi.lr.ty@gmail.com"">o.ff.icefi.lr.ty@gmail.com</a>
<a href=""mailto:o.f.fice.fi.lr.ty@gmail.com"">o.f.fice.fi.lr.ty@gmail.com</a>
<a href=""mailto:of.fi.ce.f.i.lrt.y@gmail.com"">of.fi.ce.f.i.lrt.y@gmail.com</a>
<a href=""mailto:of.f.ic.efi.l.r.ty@gmail.com"">of.f.ic.efi.l.r.ty@gmail.com</a>
<a href=""mailto:offi.c.e.fi.lrty@gmail.com"">offi.c.e.fi.lrty@gmail.com</a>
<a href=""mailto:o.ffic.ef.ilr.ty@gmail.com"">o.ffic.ef.ilr.ty@gmail.com</a>
<a href=""mailto:o.f.f.ic.efilrt.y@gmail.com"">o.f.f.ic.efilrt.y@gmail.com</a>
<a href=""mailto:of.fice.f.il.r.ty@gmail.com"">of.fice.f.il.r.ty@gmail.com</a>
<a href=""mailto:of.f.i.ce.f.ilr.ty@gmail.com"">of.f.i.ce.f.ilr.ty@gmail.com</a>
<a href=""mailto:of.f.i.c.ef.i.lrty@gmail.com"">of.f.i.c.ef.i.lrty@gmail.com</a>
<a href=""mailto:o.ffi.c.efi.lr.t.y@gmail.com"">o.ffi.c.efi.lr.t.y@gmail.com</a>
<a href=""mailto:o.ffi.cef.i.lr.ty@gmail.com"">o.ffi.cef.i.lr.ty@gmail.com</a>
<a href=""mailto:off.icefil.rty@gmail.com"">off.icefil.rty@gmail.com</a>
<a href=""mailto:o.ffic.ef.ilrty@gmail.com"">o.ffic.ef.ilrty@gmail.com</a>
<a href=""mailto:of.f.i.c.e.f.i.lrt.y@gmail.com"">of.f.i.c.e.f.i.lrt.y@gmail.com</a>
<a href=""mailto:off.ice.f.il.rt.y@gmail.com"">off.ice.f.il.rt.y@gmail.com</a>
<a href=""mailto:o.ff.i.ce.f.i.l.rty@gmail.com"">o.ff.i.ce.f.i.l.rty@gmail.com</a>
<a href=""mailto:off.ic.efilr.ty@gmail.com"">off.ic.efilr.ty@gmail.com</a>
<a href=""mailto:o.f.ficef.i.lr.t.y@gmail.com"">o.f.ficef.i.lr.t.y@gmail.com</a>
<a href=""mailto:of.f.i.c.e.filr.ty@gmail.com"">of.f.i.c.e.filr.ty@gmail.com</a>
<a href=""mailto:o.f.f.icef.ilr.ty@gmail.com"">o.f.f.icef.ilr.ty@gmail.com</a>
<a href=""mailto:o.ffi.ce.f.ilrt.y@gmail.com"">o.ffi.ce.f.ilrt.y@gmail.com</a>
<a href=""mailto:off.i.cef.i.lrty@gmail.com"">off.i.cef.i.lrty@gmail.com</a>
<a href=""mailto:of.f.icefi.lrt.y@gmail.com"">of.f.icefi.lrt.y@gmail.com</a>
<a href=""mailto:officef.il.rty@gmail.com"">officef.il.rty@gmail.com</a>
<a href=""mailto:of.f.ic.ef.i.lrt.y@gmail.com"">of.f.ic.ef.i.lrt.y@gmail.com</a>
<a href=""mailto:o.ffi.c.ef.il.rty@gmail.com"">o.ffi.c.ef.il.rty@gmail.com</a>
<a href=""mailto:of.f.i.cefi.l.rty@gmail.com"">of.f.i.cefi.l.rty@gmail.com</a>
<a href=""mailto:of.f.i.c.efi.lrt.y@gmail.com"">of.f.i.c.efi.lrt.y@gmail.com</a>
<a href=""mailto:o.f.f.icefi.l.r.ty@gmail.com"">o.f.f.icefi.l.r.ty@gmail.com</a>
<a href=""mailto:off.ice.fi.l.rt.y@gmail.com"">off.ice.fi.l.rt.y@gmail.com</a>
<a href=""mailto:of.fic.e.f.ilrty@gmail.com"">of.fic.e.f.ilrty@gmail.com</a>
<a href=""mailto:o.ffi.c.efilr.t.y@gmail.com"">o.ffi.c.efilr.t.y@gmail.com</a>
<a href=""mailto:of.fic.e.f.il.rty@gmail.com"">of.fic.e.f.il.rty@gmail.com</a>
<a href=""mailto:o.f.ficef.i.l.rt.y@gmail.com"">o.f.ficef.i.l.rt.y@gmail.com</a>
<a href=""mailto:of.ficef.i.l.r.ty@gmail.com"">of.ficef.i.l.r.ty@gmail.com</a>
<a href=""mailto:o.ff.ic.e.f.ilr.t.y@gmail.com"">o.ff.ic.e.f.ilr.t.y@gmail.com</a>
<a href=""mailto:o.ffi.c.e.f.il.rty@gmail.com"">o.ffi.c.e.f.il.rty@gmail.com</a>
<a href=""mailto:o.f.f.ic.e.f.i.l.r.t.y@gmail.com"">o.f.f.ic.e.f.i.l.r.t.y@gmail.com</a>
<a href=""mailto:o.ffic.e.f.i.lr.t.y@gmail.com"">o.ffic.e.f.i.lr.t.y@gmail.com</a>
<a href=""mailto:o.ff.ic.e.f.il.rt.y@gmail.com"">o.ff.ic.e.f.il.rt.y@gmail.com</a>
<a href=""mailto:of.f.ic.efilr.ty@gmail.com"">of.f.ic.efilr.ty@gmail.com</a>
<a href=""mailto:of.f.ic.ef.i.lrty@gmail.com"">of.f.ic.ef.i.lrty@gmail.com</a>
<a href=""mailto:o.ffi.c.efil.rt.y@gmail.com"">o.ffi.c.efil.rt.y@gmail.com</a>
<a href=""mailto:o.ffi.cef.il.r.ty@gmail.com"">o.ffi.cef.il.r.ty@gmail.com</a>
<a href=""mailto:of.fi.cef.ilrt.y@gmail.com"">of.fi.cef.ilrt.y@gmail.com</a>
<a href=""mailto:of.fi.ce.f.i.lr.t.y@gmail.com"">of.fi.ce.f.i.lr.t.y@gmail.com</a>
<a href=""mailto:of.ficef.il.r.ty@gmail.com"">of.ficef.il.r.ty@gmail.com</a>
<a href=""mailto:o.f.f.ice.f.i.lrt.y@gmail.com"">o.f.f.ice.f.i.lrt.y@gmail.com</a>
<a href=""mailto:offi.c.efilrty@gmail.com"">offi.c.efilrty@gmail.com</a>
<a href=""mailto:o.f.fic.ef.ilr.ty@gmail.com"">o.f.fic.ef.ilr.ty@gmail.com</a>
<a href=""mailto:of.f.icefil.r.ty@gmail.com"">of.f.icefil.r.ty@gmail.com</a>
<a href=""mailto:o.ffic.efi.l.rt.y@gmail.com"">o.ffic.efi.l.rt.y@gmail.com</a>
<a href=""mailto:office.filr.ty@gmail.com"">office.filr.ty@gmail.com</a>
<a href=""mailto:of.f.i.c.e.fil.rty@gmail.com"">of.f.i.c.e.fil.rty@gmail.com</a>
<a href=""mailto:o.f.f.i.cefil.r.t.y@gmail.com"">o.f.f.i.cefil.r.t.y@gmail.com</a>
<a href=""mailto:o.ffi.ce.fi.lrty@gmail.com"">o.ffi.ce.fi.lrty@gmail.com</a>
<a href=""mailto:o.ff.icefil.rt.y@gmail.com"">o.ff.icefil.rt.y@gmail.com</a>
<a href=""mailto:of.f.i.cefi.lr.ty@gmail.com"">of.f.i.cefi.lr.ty@gmail.com</a>
<a href=""mailto:offi.c.ef.il.rt.y@gmail.com"">offi.c.ef.il.rt.y@gmail.com</a>
<a href=""mailto:offi.c.ef.i.lr.ty@gmail.com"">offi.c.ef.i.lr.ty@gmail.com</a>
<a href=""mailto:o.fficef.il.rty@gmail.com"">o.fficef.il.rty@gmail.com</a>
<a href=""mailto:of.fic.efilrt.y@gmail.com"">of.fic.efilrt.y@gmail.com</a>
<a href=""mailto:o.ff.i.ce.fi.l.rty@gmail.com"">o.ff.i.ce.fi.l.rty@gmail.com</a>
<a href=""mailto:off.i.ce.f.il.r.t.y@gmail.com"">off.i.ce.f.il.r.t.y@gmail.com</a>
<a href=""mailto:of.fic.e.f.il.rt.y@gmail.com"">of.fic.e.f.il.rt.y@gmail.com</a>
<a href=""mailto:o.f.f.i.c.ef.i.lrty@gmail.com"">o.f.f.i.c.ef.i.lrty@gmail.com</a>
<a href=""mailto:o.ff.i.cefilrty@gmail.com"">o.ff.i.cefilrty@gmail.com</a>
<a href=""mailto:o.f.f.i.ce.f.i.l.r.ty@gmail.com"">o.f.f.i.ce.f.i.l.r.ty@gmail.com</a>
<a href=""mailto:of.fi.ce.fi.lr.t.y@gmail.com"">of.fi.ce.fi.lr.t.y@gmail.com</a>
<a href=""mailto:o.f.fi.ce.f.i.lr.ty@gmail.com"">o.f.fi.ce.f.i.lr.ty@gmail.com</a>
<a href=""mailto:of.fic.ef.i.l.r.t.y@gmail.com"">of.fic.ef.i.l.r.t.y@gmail.com</a>
<a href=""mailto:o.ffice.f.il.r.ty@gmail.com"">o.ffice.f.il.r.ty@gmail.com</a>
<a href=""mailto:o.ffic.ef.i.l.rt.y@gmail.com"">o.ffic.ef.i.l.rt.y@gmail.com</a>
<a href=""mailto:o.f.f.i.cef.i.l.r.ty@gmail.com"">o.f.f.i.cef.i.l.r.ty@gmail.com</a>
<a href=""mailto:of.f.icef.i.l.r.ty@gmail.com"">of.f.icef.i.l.r.ty@gmail.com</a>
<a href=""mailto:o.f.f.i.cef.ilr.t.y@gmail.com"">o.f.f.i.cef.ilr.t.y@gmail.com</a>
<a href=""mailto:of.fi.ce.filr.ty@gmail.com"">of.fi.ce.filr.ty@gmail.com</a>
<a href=""mailto:o.ff.ic.efi.lr.ty@gmail.com"">o.ff.ic.efi.lr.ty@gmail.com</a>
<a href=""mailto:o.f.f.i.c.efi.l.r.ty@gmail.com"">o.f.f.i.c.efi.l.r.ty@gmail.com</a>
<a href=""mailto:o.fficefi.l.r.ty@gmail.com"">o.fficefi.l.r.ty@gmail.com</a>
<a href=""mailto:o.ffi.ce.fi.l.rty@gmail.com"">o.ffi.ce.fi.l.rty@gmail.com</a>
<a href=""mailto:offi.cef.i.lr.ty@gmail.com"">offi.cef.i.lr.ty@gmail.com</a>
<a href=""mailto:of.fic.efil.r.t.y@gmail.com"">of.fic.efil.r.t.y@gmail.com</a>
<a href=""mailto:o.ff.ic.e.filrty@gmail.com"">o.ff.ic.e.filrty@gmail.com</a>
<a href=""mailto:o.ffi.c.e.f.ilrt.y@gmail.com"">o.ffi.c.e.f.ilrt.y@gmail.com</a>
<a href=""mailto:offi.cefi.lr.ty@gmail.com"">offi.cefi.lr.ty@gmail.com</a>"
WqpNDhCc,snowybot in action,coinwalk,JavaScript,Thursday 29th of February 2024 11:36:35 PM CDT,"var organic = parseFloat(document.getElementById('pct_balance').value);
var beverse = Number((organic/500).toFixed(8));
var eights = (beverse*8);
var fives = (beverse*4.9);
var sixes = (beverse*5.9)
var snowy = (beverse*50)
var james = beverse;
var frances = 0;
var whatever = organic;
 
 
 
function soiled(){
whatever = document.getElementById('pct_balance').value;
var dog = ((whatever-organic).toFixed(8));
console.log(""profit"");
console.log(dog);
if ((whatever>(((Math.floor(whatever/eights))*eights)+fives))&&(whatever<(((Math.floor(whatever/eights))*eights)+sixes))&&(whatever!=frances)){
    james = james*2;
    frances = parseFloat(whatever);
}
if (((james*3)>=snowy)&&(whatever<(((Math.floor(whatever/eights))*eights)+fives))){
    james = beverse;
    frances = 0;
}
if ((whatever<=(james*50))&&(whatever<(((Math.floor(whatever/eights))*eights)+fives))){
    james = beverse;
    frances = 0;
}
if (((james*3)>=snowy)&&(whatever>(((Math.floor(whatever/eights))*eights)+sixes))){
    james = beverse;
    frances = 0;
}
if ((whatever<=(james*50))&&(whatever>(((Math.floor(whatever/eights))*eights)+sixes))){
    james = beverse;
    frances = 0;
}
if (((james*3)>=snowy)&&(whatever>(((Math.floor(whatever/eights))*eights)+fives))&&(whatever<(((Math.floor(whatever/eights))*eights)+sixes))){
    james = beverse*2;
    frances = parseFloat(whatever);
}
if ((whatever<=(james*50))&&(whatever>(((Math.floor(whatever/eights))*eights)+fives))&&(whatever<(((Math.floor(whatever/eights))*eights)+sixes))){
    james = beverse*2;
    frances = parseFloat(whatever);
}
if (whatever>=(organic*2)){
console.log(""winner winner chicken dinner"");
return;
}
$('#pct_chance').val(49.5);
$('#pct_bet').val(((james*1).toFixed(8)));
$('#a_lo').click();
setTimeout(() =>soiled(), 1000);
}
soiled();
"
XpSsWq1X,log2,rpd_v21,Java,Thursday 29th of February 2024 11:30:57 PM CDT,"java.lang.RuntimeException: Unable to start activity ComponentInfo{com.kursach.fitnessapp/com.kursach.fitnessapp.MainActivity}: com.google.gson.JsonSyntaxException: java.lang.IllegalStateException: Expected a string but was BEGIN_OBJECT at line 1 column 45 path $[0][0].uri
                                                                                                    	at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:3698)
                                                                                                    	at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:3855)
                                                                                                    	at android.app.servertransaction.LaunchActivityItem.execute(LaunchActivityItem.java:105)
                                                                                                    	at android.app.servertransaction.TransactionExecutor.executeCallbacks(TransactionExecutor.java:136)
                                                                                                    	at android.app.servertransaction.TransactionExecutor.execute(TransactionExecutor.java:96)
                                                                                                    	at android.app.ActivityThread$H.handleMessage(ActivityThread.java:2267)
                                                                                                    	at android.os.Handler.dispatchMessage(Handler.java:106)
                                                                                                    	at android.os.Looper.loopOnce(Looper.java:201)
                                                                                                    	at android.os.Looper.loop(Looper.java:288)
                                                                                                    	at android.app.ActivityThread.main(ActivityThread.java:7964)
                                                                                                    	at java.lang.reflect.Method.invoke(Native Method)
                                                                                                    	at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:553)
                                                                                                    	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:1003)
                                                                                                    Caused by: com.google.gson.JsonSyntaxException: java.lang.IllegalStateException: Expected a string but was BEGIN_OBJECT at line 1 column 45 path $[0][0].uri
                                                                                                    	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:397)
                                                                                                    	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.read(TypeAdapterRuntimeTypeWrapper.java:40)
                                                                                                    	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.read(CollectionTypeAdapterFactory.java:82)
                                                                                                    	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.read(CollectionTypeAdapterFactory.java:61)
                                                                                                    	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.read(TypeAdapterRuntimeTypeWrapper.java:40)
                                                                                                    	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.read(CollectionTypeAdapterFactory.java:82)
                                                                                                    	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.read(CollectionTypeAdapterFactory.java:61)
                                                                                                    	at com.google.gson.Gson.fromJson(Gson.java:1227)
                                                                                                    	at com.google.gson.Gson.fromJson(Gson.java:1137)
                                                                                                    	at com.google.gson.Gson.fromJson(Gson.java:1047)
                                                                                                    	at com.google.gson.Gson.fromJson(Gson.java:1014)
                                                                                                    	at com.kursach.fitnessapp.MainActivity.loadRecView(MainActivity.java:82)
                                                                                                    	at com.kursach.fitnessapp.MainActivity.onCreate(MainActivity.java:39)
                                                                                                    	at android.app.Activity.performCreate(Activity.java:8069)
                                                                                                    	at android.app.Activity.performCreate(Activity.java:8049)
                                                                                                    	at android.app.Instrumentation.callActivityOnCreate(Instrumentation.java:1329)
                                                                                                    	at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:3668)
                                                                                                    	at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:3855) 
                                                                                                    	at android.app.servertransaction.LaunchActivityItem.execute(LaunchActivityItem.java:105) 
                                                                                                    	at android.app.servertransaction.TransactionExecutor.executeCallbacks(TransactionExecutor.java:136) 
                                                                                                    	at android.app.servertransaction.TransactionExecutor.execute(TransactionExecutor.java:96) 
                                                                                                    	at android.app.ActivityThread$H.handleMessage(ActivityThread.java:2267) 
                                                                                                    	at android.os.Handler.dispatchMessage(Handler.java:106) 
                                                                                                    	at android.os.Looper.loopOnce(Looper.java:201) 
                                                                                                    	at android.os.Looper.loop(Looper.java:288) 
                                                                                                    	at android.app.ActivityThread.main(ActivityThread.java:7964) 
                                                                                                    	at java.lang.reflect.Method.invoke(Native Method) 
                                                                                                    	at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:553) 
                                                                                                    	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:1003) 
                                                                                                    Caused by: java.lang.IllegalStateException: Expected a string but was BEGIN_OBJECT at line 1 column 45 path $[0][0].uri
                                                                                                    	at com.google.gson.stream.JsonReader.nextString(JsonReader.java:836)
                                                                                                    	at com.google.gson.internal.bind.TypeAdapters$15.read(TypeAdapters.java:421)
                                                                                                    	at com.google.gson.internal.bind.TypeAdapters$15.read(TypeAdapters.java:409)
                                                                                                    	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.readIntoField(ReflectiveTypeAdapterFactory.java:212)
                                                                                                    	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$FieldReflectionAdapter.readField(ReflectiveTypeAdapterFactory.java:433)
                                                                                                    	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:393)
                                                                                                    	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.read(TypeAdapterRuntimeTypeWrapper.java:40) 
                                                                                                    	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.read(CollectionTypeAdapterFactory.java:82) 
                                                                                                    	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.read(CollectionTypeAdapterFactory.java:61) 
                                                                                                    	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.read(TypeAdapterRuntimeTypeWrapper.java:40) 
                                                                                                    	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.read(CollectionTypeAdapterFactory.java:82) 
                                                                                                    	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.read(CollectionTypeAdapterFactory.java:61) 
                                                                                                    	at com.google.gson.Gson.fromJson(Gson.java:1227) 
                                                                                                    	at com.google.gson.Gson.fromJson(Gson.java:1137) 
                                                                                                    	at com.google.gson.Gson.fromJson(Gson.java:1047) 
                                                                                                    	at com.google.gson.Gson.fromJson(Gson.java:1014) 
                                                                                                    	at com.kursach.fitnessapp.MainActivity.loadRecView(MainActivity.java:82) 
                                                                                                    	at com.kursach.fitnessapp.MainActivity.onCreate(MainActivity.java:39) 
                                                                                                    	at android.app.Activity.performCreate(Activity.java:8069) 
                                                                                                    	at android.app.Activity.performCreate(Activity.java:8049) 
                                                                                                    	at android.app.Instrumentation.callActivityOnCreate(Instrumentation.java:1329) 
                                                                                                    	at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:3668) 
                                                                                                    	at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:3855) 
                                                                                                    	at android.app.servertransaction.LaunchActivityItem.execute(LaunchActivityItem.java:105) 
                                                                                                    	at android.app.servertransaction.TransactionExecutor.executeCallbacks(TransactionExecutor.java:136) 
                                                                                                    	at android.app.servertransaction.TransactionExecutor.execute(TransactionExecutor.java:96) 
                                                                                                    	at android.app.ActivityThread$H.handleMessage(ActivityThread.java:2267) 
                                                                                                    	at android.os.Handler.dispatchMessage(Handler.java:106) 
                                                                                                    	at android.os.Looper.loopOnce(Looper.java:201) 
                                                                                                    	at android.os.Looper.loop(Looper.java:288) 
                                                                                                    	at android.app.ActivityThread.main(ActivityThread.java:7964) 
                                                                                                    	at java.lang.reflect.Method.invoke(Native Method) 
                                                                                                    	at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:553) 
                                                                                                    	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:1003) 
"
2kuKSJPk,Review Pastebin Alternative,xxsa,PHP,Thursday 29th of February 2024 11:25:50 PM CDT,https://pastes.io/ - Pastebin Alternative
wJXkp0P1,News Feb29 24,Newscaster_Ned,Email,Thursday 29th of February 2024 10:48:49 PM CDT,".‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎T‎‎‎e‎‎‎s‎‎‎t‎‎‎ ‎‎‎1‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎
.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎T‎‎‎e‎‎‎s‎‎‎t‎‎‎ ‎‎‎2‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎
.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎T‎‎‎e‎‎‎s‎‎‎t‎‎‎ ‎‎‎3‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎
.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎ ‎‎‎T‎‎‎e‎‎‎s‎‎‎t‎‎‎ ‎‎‎c‎‎‎o‎‎‎m‎‎‎p‎‎‎l‎‎‎e‎‎‎t‎‎‎e‎‎‎.‎‎‎

H‎e‎y‎,‎ ‎a‎l‎l‎.‎ ‎I‎t‎'‎s‎ ‎N‎e‎w‎s‎c‎a‎s‎t‎e‎r‎ ‎N‎e‎d‎.‎

E‎x‎c‎l‎u‎s‎i‎v‎e‎ ‎—‎ ‎H‎o‎u‎s‎e‎ ‎M‎a‎j‎o‎r‎i‎t‎y‎ ‎W‎h‎i‎p‎ ‎T‎o‎m‎ ‎E‎m‎m‎e‎r‎:‎ ‎B‎i‎d‎e‎n‎ ‎H‎a‎s‎ ‎‘‎B‎l‎o‎o‎d‎ ‎o‎n‎ ‎H‎i‎s‎ ‎H‎a‎n‎d‎s‎’‎ ‎o‎v‎e‎r‎ ‎I‎l‎l‎e‎g‎a‎l‎ ‎A‎l‎i‎e‎n‎ ‎M‎u‎r‎d‎e‎r‎s‎

J‎o‎e‎ ‎‘‎H‎a‎s‎ ‎C‎a‎u‎s‎e‎d‎ ‎D‎e‎a‎t‎h‎ ‎a‎n‎d‎ ‎D‎e‎s‎t‎r‎u‎c‎t‎i‎o‎n‎’‎
W‎A‎S‎H‎I‎N‎G‎T‎O‎N‎,‎ ‎D‎C‎ ‎-‎ ‎F‎E‎B‎R‎U‎A‎R‎Y‎ ‎2‎3‎:‎ ‎U‎.‎S‎.‎ ‎P‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎J‎o‎e‎ ‎B‎i‎d‎e‎n‎ ‎s‎p‎e‎a‎k‎s‎ ‎t‎o‎ ‎g‎o‎v‎e‎r‎n‎o‎r‎s‎ ‎f‎r‎o‎m‎ ‎a‎c‎r‎o‎s‎s‎ ‎t‎h‎
H‎o‎u‎s‎e‎ ‎M‎a‎j‎o‎r‎i‎t‎y‎ ‎W‎h‎i‎p‎ ‎T‎o‎m‎ ‎E‎m‎m‎e‎r‎ ‎(‎R‎-‎M‎N‎)‎ ‎t‎o‎l‎d‎ ‎B‎r‎e‎i‎t‎b‎a‎r‎t‎ ‎N‎e‎w‎s‎ ‎i‎n‎ ‎a‎n‎ ‎e‎x‎c‎l‎u‎s‎i‎v‎e‎ ‎i‎n‎t‎e‎r‎v‎i‎e‎w‎ ‎o‎n‎ ‎T‎h‎u‎r‎s‎d‎a‎y‎ ‎t‎h‎a‎t‎ ‎P‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎J‎o‎e‎ ‎B‎i‎d‎e‎n‎’‎s‎ ‎r‎e‎f‎u‎s‎a‎l‎ ‎t‎o‎ ‎c‎u‎r‎b‎ ‎t‎h‎e‎ ‎m‎i‎g‎r‎a‎n‎t‎ ‎c‎r‎i‎s‎i‎s‎ ‎m‎e‎a‎n‎s‎ ‎t‎h‎a‎t‎ ‎h‎e‎ ‎“‎h‎a‎s‎ ‎b‎l‎o‎o‎d‎ ‎o‎n‎ ‎h‎i‎s‎ ‎h‎a‎n‎d‎s‎”‎ ‎o‎v‎e‎r‎ ‎i‎l‎l‎e‎g‎a‎l‎ ‎a‎l‎i‎e‎n‎ ‎m‎u‎r‎d‎e‎r‎s‎.‎

M‎c‎C‎o‎n‎n‎e‎l‎l‎ ‎A‎n‎n‎o‎u‎n‎c‎e‎s‎ ‎U‎p‎c‎o‎m‎i‎n‎g‎ ‎R‎e‎t‎i‎r‎e‎m‎e‎n‎t‎ ‎a‎s‎ ‎R‎e‎p‎u‎b‎l‎i‎c‎a‎n‎ ‎L‎e‎a‎d‎e‎r‎:‎ ‎‘‎I‎t‎’‎s‎ ‎T‎i‎m‎e‎ ‎f‎o‎r‎ ‎t‎h‎e‎ ‎N‎e‎x‎t‎ ‎G‎
M‎c‎C‎o‎n‎n‎e‎l‎l‎ ‎A‎n‎n‎o‎u‎n‎c‎e‎s‎ ‎U‎p‎c‎o‎m‎i‎n‎g‎ ‎R‎e‎t‎i‎r‎e‎m‎e‎n‎t‎ ‎a‎s‎ ‎R‎e‎p‎u‎b‎l‎i‎c‎a‎n‎ ‎L‎e‎a‎d‎e‎r‎
4‎,‎5‎1‎0‎
J‎o‎e‎ ‎B‎i‎d‎e‎n‎’‎s‎ ‎W‎h‎i‎t‎e‎ ‎H‎o‎u‎s‎e‎ ‎B‎e‎g‎i‎n‎s‎ ‎R‎e‎f‎e‎r‎r‎i‎n‎g‎ ‎t‎o‎ ‎I‎l‎l‎e‎g‎a‎l‎ ‎A‎l‎i‎e‎n‎s‎ ‎a‎s‎ ‎‘‎N‎e‎w‎c‎o‎m‎e‎r‎s‎’‎
B‎i‎d‎e‎n‎'‎s‎ ‎W‎H‎ ‎B‎e‎g‎i‎n‎s‎ ‎R‎e‎f‎e‎r‎r‎i‎n‎g‎ ‎t‎o‎ ‎I‎l‎l‎e‎g‎a‎l‎ ‎A‎l‎i‎e‎n‎s‎ ‎a‎s‎ ‎'‎N‎e‎w‎c‎o‎m‎e‎r‎s‎'‎
3‎,‎0‎5‎1‎
E‎x‎c‎l‎u‎s‎i‎v‎e‎ ‎—‎ ‎H‎o‎u‎s‎e‎ ‎M‎a‎j‎o‎r‎i‎t‎y‎ ‎W‎h‎i‎p‎ ‎T‎o‎m‎ ‎E‎m‎m‎e‎r‎:‎ ‎J‎o‎e‎ ‎B‎i‎d‎e‎n‎ ‎H‎a‎s‎ ‎‘‎B‎l‎o‎o‎d‎ ‎o‎n‎ ‎H‎i‎s‎ ‎H‎a‎n‎d‎s‎’‎ ‎o‎v‎e‎r‎ ‎I‎
T‎o‎m‎ ‎E‎m‎m‎e‎r‎:‎ ‎J‎o‎e‎ ‎B‎i‎d‎e‎n‎ ‎H‎a‎s‎ ‎'‎B‎l‎o‎o‎d‎ ‎o‎n‎ ‎H‎i‎s‎ ‎H‎a‎n‎d‎s‎'‎ ‎o‎v‎e‎r‎ ‎I‎l‎l‎e‎g‎a‎l‎ ‎A‎l‎i‎e‎n‎ ‎M‎u‎r‎d‎e‎r‎s‎
1‎,‎7‎3‎2‎
W‎a‎t‎c‎h‎ ‎L‎i‎v‎e‎:‎ ‎J‎o‎e‎ ‎B‎i‎d‎e‎n‎ ‎V‎i‎s‎i‎t‎s‎ ‎B‎r‎o‎w‎n‎s‎v‎i‎l‎l‎e‎,‎ ‎T‎X‎ ‎t‎o‎ ‎S‎p‎e‎a‎k‎ ‎o‎n‎ ‎B‎o‎r‎d‎e‎r‎ ‎S‎e‎c‎u‎r‎i‎t‎y‎
W‎a‎t‎c‎h‎ ‎L‎i‎v‎e‎:‎ ‎J‎o‎e‎ ‎B‎i‎d‎e‎n‎ ‎V‎i‎s‎i‎t‎s‎ ‎B‎r‎o‎w‎n‎s‎v‎i‎l‎l‎e‎,‎ ‎T‎X‎ ‎t‎o‎ ‎S‎p‎e‎a‎k‎ ‎o‎n‎ ‎B‎o‎r‎d‎e‎r‎ ‎S‎e‎c‎u‎r‎i‎t‎y‎
3‎4‎1‎
N‎o‎l‎t‎e‎:‎ ‎B‎u‎d‎ ‎L‎i‎g‎h‎t‎ ‎B‎o‎y‎c‎o‎t‎t‎ ‎C‎o‎s‎t‎ ‎T‎r‎a‎n‎h‎e‎u‎s‎e‎r‎-‎B‎u‎s‎c‎h‎ ‎$‎1‎.‎4‎ ‎B‎i‎l‎l‎i‎o‎n‎
N‎o‎l‎t‎e‎:‎ ‎B‎u‎d‎ ‎L‎i‎g‎h‎t‎ ‎B‎o‎y‎c‎o‎t‎t‎ ‎C‎o‎s‎t‎ ‎T‎r‎a‎n‎h‎e‎u‎s‎e‎r‎-‎B‎u‎s‎c‎h‎ ‎$‎1‎.‎4‎ ‎B‎i‎l‎l‎i‎o‎n‎
7‎9‎6‎
T‎r‎u‎m‎p‎ ‎S‎p‎e‎a‎k‎s‎ ‎w‎i‎t‎h‎ ‎‘‎D‎e‎v‎a‎s‎t‎a‎t‎e‎d‎’‎ ‎A‎n‎g‎e‎l‎ ‎P‎a‎r‎e‎n‎t‎s‎ ‎o‎f‎ ‎‘‎I‎n‎c‎r‎e‎d‎i‎b‎l‎e‎’‎ ‎L‎a‎k‎e‎n‎ ‎R‎i‎l‎e‎y‎
T‎r‎u‎m‎p‎ ‎S‎p‎e‎a‎k‎s‎ ‎w‎i‎t‎h‎ ‎'‎D‎e‎v‎a‎s‎t‎a‎t‎e‎d‎'‎ ‎A‎n‎g‎e‎l‎ ‎P‎a‎r‎e‎n‎t‎s‎ ‎o‎f‎ ‎'‎I‎n‎c‎r‎e‎d‎i‎b‎l‎e‎'‎ ‎L‎a‎k‎e‎n‎ ‎R‎i‎l‎e‎y‎
2‎4‎8‎
W‎a‎t‎c‎h‎ ‎L‎i‎v‎e‎:‎ ‎D‎o‎n‎a‎l‎d‎ ‎T‎r‎u‎m‎p‎ ‎I‎n‎s‎p‎e‎c‎t‎s‎ ‎B‎i‎d‎e‎n‎’‎s‎ ‎B‎r‎o‎k‎e‎n‎ ‎B‎o‎r‎d‎e‎r‎ ‎i‎n‎ ‎V‎i‎s‎i‎t‎ ‎t‎o‎ ‎E‎a‎g‎l‎e‎ ‎P‎a‎s‎s‎,‎ ‎T‎X‎
W‎a‎t‎c‎h‎ ‎L‎i‎v‎e‎:‎ ‎D‎o‎n‎a‎l‎d‎ ‎T‎r‎u‎m‎p‎ ‎I‎n‎s‎p‎e‎c‎t‎s‎ ‎B‎i‎d‎e‎n‎'‎s‎ ‎B‎r‎o‎k‎e‎n‎ ‎B‎o‎r‎d‎e‎r‎
1‎,‎0‎6‎9‎
M‎i‎t‎c‎h‎ ‎M‎c‎C‎o‎n‎n‎e‎l‎l‎ ‎t‎o‎ ‎S‎t‎a‎n‎d‎ ‎D‎o‎w‎n‎ ‎a‎s‎ ‎S‎e‎n‎a‎t‎e‎ ‎R‎e‎p‎u‎b‎l‎i‎c‎a‎n‎ ‎L‎e‎a‎d‎e‎r‎ ‎i‎n‎ ‎N‎o‎v‎e‎m‎b‎e‎r‎
M‎i‎t‎c‎h‎ ‎M‎c‎C‎o‎n‎n‎e‎l‎l‎ ‎t‎o‎ ‎S‎t‎e‎p‎ ‎d‎o‎w‎n‎ ‎a‎s‎ ‎S‎e‎n‎a‎t‎e‎ ‎R‎e‎p‎u‎b‎l‎i‎c‎a‎n‎ ‎L‎e‎a‎d‎e‎r‎ ‎i‎n‎ ‎N‎o‎v‎e‎m‎b‎e‎r‎
3‎,‎5‎3‎0‎
S‎u‎p‎r‎e‎m‎e‎ ‎C‎o‎u‎r‎t‎ ‎W‎i‎l‎l‎ ‎D‎e‎c‎i‎d‎e‎ ‎I‎f‎ ‎T‎r‎u‎m‎p‎ ‎I‎m‎m‎u‎n‎e‎ ‎f‎r‎o‎m‎ ‎P‎r‎o‎s‎e‎c‎u‎t‎i‎o‎n‎ ‎f‎o‎r‎ ‎A‎l‎l‎e‎g‎e‎d‎l‎y‎ ‎A‎t‎t‎e‎m‎p‎t‎i‎n‎g‎ ‎t‎o‎ ‎O‎v‎e‎r‎t‎u‎r‎n‎ ‎E‎l‎e‎
S‎u‎p‎r‎e‎m‎e‎ ‎C‎o‎u‎r‎t‎ ‎W‎i‎l‎l‎ ‎D‎e‎c‎i‎d‎e‎ ‎I‎f‎ ‎T‎r‎u‎m‎p‎ ‎I‎s‎ ‎I‎m‎m‎u‎n‎e‎ ‎f‎r‎o‎m‎ ‎P‎r‎o‎s‎e‎c‎u‎t‎i‎o‎n‎
7‎,‎1‎5‎3‎
L‎a‎k‎e‎n‎ ‎R‎i‎l‎e‎y‎ ‎M‎u‎r‎d‎e‎r‎:‎ ‎A‎t‎h‎e‎n‎s‎ ‎S‎h‎e‎r‎i‎f‎f‎ ‎O‎p‎p‎o‎s‎e‎d‎ ‎T‎u‎r‎n‎i‎n‎g‎ ‎C‎r‎i‎m‎i‎n‎a‎l‎ ‎I‎l‎l‎e‎g‎a‎l‎ ‎A‎l‎i‎e‎n‎s‎ ‎O‎v‎e‎r‎ ‎t‎o‎ ‎I‎C‎E‎ ‎f‎o‎r‎ ‎D‎e‎p‎o‎r‎t‎a‎t‎
L‎a‎k‎e‎n‎ ‎R‎i‎l‎e‎y‎ ‎M‎u‎r‎d‎e‎r‎:‎ ‎S‎h‎e‎r‎i‎f‎f‎ ‎O‎p‎p‎o‎s‎e‎d‎ ‎T‎u‎r‎n‎i‎n‎g‎ ‎C‎r‎i‎m‎i‎n‎a‎l‎ ‎I‎l‎l‎e‎g‎a‎l‎s‎ ‎O‎v‎e‎r‎ ‎t‎o‎ ‎I‎C‎E‎

T‎o‎r‎o‎n‎t‎o‎:‎ ‎N‎e‎g‎r‎o‎i‎d‎ ‎V‎e‎t‎e‎r‎a‎n‎ ‎G‎e‎t‎s‎ ‎8‎-‎H‎o‎u‎r‎s‎ ‎P‎a‎y‎ ‎A‎f‎t‎e‎r‎ ‎S‎e‎x‎u‎a‎l‎l‎y‎ ‎H‎a‎r‎a‎s‎s‎i‎n‎g‎ ‎E‎m‎p‎l‎o‎y‎e‎e‎.‎

L‎i‎o‎n‎e‎l‎ ‎R‎i‎c‎h‎i‎e‎,‎ ‎f‎u‎c‎k‎ ‎o‎f‎f‎.‎

 ‎
N‎e‎g‎r‎o‎ ‎F‎a‎g‎ ‎W‎o‎o‎d‎l‎a‎n‎d‎ ‎H‎i‎g‎h‎ ‎T‎e‎a‎c‎h‎e‎r‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎A‎f‎t‎e‎r‎ ‎R‎a‎p‎i‎n‎g‎ ‎2‎ ‎Y‎o‎u‎n‎g‎ ‎B‎o‎y‎s‎.‎


G‎a‎u‎t‎i‎e‎r‎ ‎B‎a‎b‎o‎o‎n‎ ‎G‎e‎t‎s‎ ‎6‎0‎ ‎Y‎e‎a‎r‎s‎ ‎A‎f‎t‎e‎r‎ ‎R‎a‎p‎i‎n‎g‎ ‎1‎2‎-‎Y‎e‎a‎r‎-‎O‎l‎d‎ ‎G‎i‎r‎l‎.‎


C‎h‎a‎r‎g‎e‎s‎ ‎F‎i‎l‎e‎d‎ ‎A‎g‎a‎i‎n‎s‎t‎ ‎W‎e‎t‎b‎a‎c‎k‎ ‎W‎h‎o‎ ‎K‎i‎l‎l‎e‎d‎ ‎C‎u‎l‎t‎s‎ ‎L‎i‎n‎e‎b‎a‎c‎k‎e‎r‎ ‎i‎n‎ ‎D‎r‎u‎n‎k‎ ‎D‎r‎i‎v‎i‎n‎g‎ ‎C‎r‎a‎s‎h‎.‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎W‎e‎a‎t‎h‎e‎r‎.‎

T‎h‎u‎ ‎2‎9‎ ‎|‎ ‎D‎a‎y‎
5‎0‎°‎
1‎5‎%‎
N‎E‎
1‎1‎
m‎p‎h‎
C‎l‎o‎u‎d‎y‎.‎ ‎S‎l‎i‎g‎h‎t‎ ‎c‎h‎a‎n‎c‎e‎ ‎o‎f‎ ‎a‎ ‎r‎a‎i‎n‎ ‎s‎h‎o‎w‎e‎r‎.‎ ‎H‎i‎g‎h‎ ‎a‎r‎o‎u‎n‎d‎ ‎5‎0‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎N‎E‎ ‎a‎t‎ ‎1‎0‎ ‎t‎o‎ ‎1‎5‎ ‎m‎p‎h‎.‎
H‎u‎m‎i‎d‎i‎t‎y‎
5‎4‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
3‎ ‎o‎f‎ ‎1‎1‎
S‎u‎n‎r‎i‎s‎e‎
6‎:‎5‎6‎ ‎a‎m‎
S‎u‎n‎s‎e‎t‎
6‎:‎2‎8‎ ‎p‎m‎
T‎h‎u‎ ‎2‎9‎ ‎|‎ ‎N‎i‎g‎h‎t‎
4‎1‎°‎
1‎5‎%‎
N‎N‎E‎
5‎
m‎p‎h‎
C‎l‎o‎u‎d‎y‎ ‎s‎k‎i‎e‎s‎ ‎e‎a‎r‎l‎y‎,‎ ‎t‎h‎e‎n‎ ‎p‎a‎r‎t‎l‎y‎ ‎c‎l‎o‎u‎d‎y‎ ‎a‎f‎t‎e‎r‎ ‎m‎i‎d‎n‎i‎g‎h‎t‎.‎ ‎S‎l‎i‎g‎h‎t‎ ‎c‎h‎a‎n‎c‎e‎ ‎o‎f‎ ‎a‎ ‎r‎a‎i‎n‎ ‎s‎h‎o‎w‎e‎r‎.‎ ‎L‎o‎w‎ ‎4‎1‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎l‎i‎g‎h‎t‎ ‎a‎n‎d‎ ‎v‎a‎r‎i‎a‎b‎l‎e‎.‎
H‎u‎m‎i‎d‎i‎t‎y‎
8‎6‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
0‎ ‎o‎f‎ ‎1‎1‎
M‎o‎o‎n‎r‎i‎s‎e‎
1‎1‎:‎1‎5‎ ‎p‎m‎
W‎a‎n‎i‎n‎g‎ ‎G‎i‎b‎b‎o‎u‎s‎
M‎o‎o‎n‎s‎e‎t‎
9‎:‎3‎0‎ ‎a‎m‎
F‎r‎i‎ ‎0‎1‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
7‎3‎°‎
/‎5‎1‎°‎
1‎5‎%‎
S‎E‎ ‎7‎ ‎m‎p‎h‎
S‎a‎t‎ ‎0‎2‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
7‎8‎°‎
/‎5‎9‎°‎
9‎%‎
S‎S‎W‎ ‎9‎ ‎m‎p‎h‎
S‎u‎n‎ ‎0‎3‎
A‎M‎ ‎S‎h‎o‎w‎e‎r‎s‎
8‎0‎°‎
/‎6‎4‎°‎
3‎3‎%‎
S‎ ‎1‎2‎ ‎m‎p‎h‎
M‎o‎n‎ ‎0‎4‎
M‎o‎s‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎1‎°‎
/‎5‎9‎°‎
2‎4‎%‎
S‎ ‎9‎ ‎m‎p‎h‎
T‎u‎e‎ ‎0‎5‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎0‎°‎
/‎5‎7‎°‎
2‎2‎%‎
N‎N‎E‎ ‎1‎0‎ ‎m‎p‎h‎
W‎e‎d‎ ‎0‎6‎
P‎M‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
7‎9‎°‎
/‎6‎0‎°‎
3‎8‎%‎
E‎S‎E‎ ‎9‎ ‎m‎p‎h‎
T‎h‎u‎ ‎0‎7‎
A‎M‎ ‎S‎h‎o‎w‎e‎r‎s‎
7‎8‎°‎
/‎5‎7‎°‎
4‎4‎%‎
N‎ ‎1‎2‎ ‎m‎p‎h‎
F‎r‎i‎ ‎0‎8‎
A‎M‎ ‎S‎h‎o‎w‎e‎r‎s‎
7‎6‎°‎
/‎5‎4‎°‎
3‎7‎%‎
N‎W‎ ‎1‎1‎ ‎m‎p‎h‎
S‎a‎t‎ ‎0‎9‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
7‎3‎°‎
/‎4‎8‎°‎
2‎4‎%‎
N‎N‎W‎ ‎1‎4‎ ‎m‎p‎h‎
S‎u‎n‎ ‎1‎0‎
M‎o‎s‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
7‎1‎°‎
/‎5‎0‎°‎
1‎%‎
N‎ ‎1‎1‎ ‎m‎p‎h‎
M‎o‎n‎ ‎1‎1‎
M‎o‎s‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
7‎4‎°‎
/‎5‎4‎°‎
1‎6‎%‎
S‎ ‎1‎1‎ ‎m‎p‎h‎
T‎u‎e‎ ‎1‎2‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
7‎9‎°‎
/‎6‎0‎°‎
2‎3‎%‎
S‎ ‎1‎2‎ ‎m‎p‎h‎
W‎e‎d‎ ‎1‎3‎
A‎M‎ ‎S‎h‎o‎w‎e‎r‎s‎
8‎0‎°‎
/‎6‎2‎°‎
3‎6‎%‎
S‎ ‎1‎4‎ ‎m‎p‎h‎
T‎h‎u‎ ‎1‎4‎
M‎o‎s‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎1‎°‎
/‎6‎1‎°‎
2‎4‎%‎
S‎S‎W‎ ‎1‎4‎ ‎m‎p‎h‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

C‎u‎r‎r‎e‎n‎t‎ ‎t‎h‎r‎e‎a‎t‎:‎ ‎D‎o‎n‎'‎t‎ ‎d‎o‎n‎'‎t‎ ‎d‎o‎n‎'‎t‎!‎ ‎T‎h‎i‎s‎ ‎w‎i‎l‎l‎ ‎h‎u‎r‎t‎ ‎s‎o‎m‎e‎o‎n‎e‎!‎ ‎👴🏻

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

H‎.‎P‎.‎ ‎L‎o‎v‎e‎c‎r‎a‎f‎t‎
H‎.‎P‎.‎ ‎L‎o‎v‎e‎c‎r‎a‎f‎t‎ ‎i‎s‎ ‎t‎h‎e‎ ‎a‎u‎t‎h‎o‎r‎ ‎o‎f‎ ‎v‎a‎r‎i‎o‎u‎s‎ ‎s‎c‎i‎e‎n‎c‎e‎ ‎f‎i‎c‎t‎i‎o‎n‎-‎h‎o‎r‎r‎o‎r‎ ‎n‎o‎v‎e‎l‎s‎ ‎a‎n‎d‎ ‎t‎a‎l‎e‎s‎,‎ ‎o‎f‎ ‎w‎h‎i‎c‎h‎ ‎g‎e‎n‎r‎e‎ ‎h‎e‎ ‎d‎u‎b‎b‎e‎d‎ ‎""‎c‎o‎s‎m‎i‎c‎ ‎h‎o‎r‎r‎o‎r‎""‎.‎ ‎A‎t‎ ‎a‎ ‎y‎o‎u‎n‎g‎ ‎a‎g‎e‎,‎ ‎b‎o‎t‎h‎ ‎o‎f‎ ‎L‎o‎v‎e‎c‎r‎a‎f‎t‎'‎s‎ ‎p‎a‎r‎e‎n‎t‎s‎ ‎w‎e‎r‎e‎ ‎a‎w‎a‎r‎d‎e‎d‎ ‎t‎o‎ ‎a‎n‎ ‎i‎n‎s‎a‎n‎i‎t‎y‎ ‎a‎s‎y‎l‎u‎m‎,‎ ‎w‎h‎e‎r‎e‎ ‎t‎h‎e‎y‎ ‎l‎i‎v‎e‎d‎ ‎t‎h‎e‎ ‎r‎e‎s‎t‎ ‎o‎f‎ ‎t‎h‎e‎i‎r‎ ‎l‎i‎f‎e‎ ‎a‎n‎d‎ ‎d‎i‎e‎d‎,‎ ‎w‎h‎i‎c‎h‎ ‎w‎o‎u‎l‎d‎ ‎e‎x‎p‎l‎a‎i‎n‎ ‎t‎h‎e‎ ‎c‎o‎n‎s‎t‎a‎n‎t‎ ‎t‎h‎e‎m‎e‎s‎ ‎o‎f‎ ‎u‎n‎f‎a‎t‎h‎o‎m‎a‎b‎l‎e‎ ‎i‎n‎s‎a‎n‎i‎t‎y‎ ‎c‎o‎n‎s‎i‎s‎t‎e‎n‎t‎ ‎i‎n‎ ‎h‎i‎s‎ ‎w‎r‎i‎t‎i‎n‎g‎s‎.‎ ‎A‎s‎i‎d‎e‎ ‎f‎r‎o‎m‎ ‎g‎i‎v‎i‎n‎g‎ ‎y‎o‎u‎ ‎a‎n‎ ‎i‎n‎s‎i‎g‎h‎t‎ ‎i‎n‎t‎o‎ ‎a‎ ‎m‎a‎d‎m‎a‎n‎'‎s‎ ‎r‎a‎m‎b‎l‎i‎n‎g‎,‎ ‎H‎.‎P‎.‎ ‎L‎o‎v‎e‎c‎r‎a‎f‎t‎'‎s‎ ‎b‎o‎o‎k‎s‎ ‎o‎f‎t‎e‎n‎ ‎e‎x‎p‎r‎e‎s‎s‎ ‎t‎h‎e‎ ‎i‎d‎e‎a‎ ‎t‎h‎a‎t‎ ‎w‎e‎ ‎a‎r‎e‎ ‎a‎l‎o‎n‎e‎ ‎a‎n‎d‎ ‎i‎n‎s‎i‎g‎n‎i‎f‎i‎c‎a‎n‎t‎ ‎i‎n‎ ‎t‎h‎i‎s‎ ‎w‎o‎r‎l‎d‎.‎ ‎T‎h‎i‎s‎ ‎i‎s‎ ‎c‎l‎e‎a‎r‎l‎y‎ ‎r‎e‎m‎i‎n‎i‎s‎c‎e‎n‎t‎ ‎o‎f‎ ‎h‎i‎s‎ ‎s‎o‎c‎i‎a‎l‎ ‎l‎i‎f‎e‎ ‎b‎e‎c‎a‎u‎s‎e‎ ‎h‎e‎ ‎h‎a‎d‎ ‎v‎e‎r‎y‎ ‎f‎e‎w‎ ‎f‎r‎i‎e‎n‎d‎s‎ ‎a‎p‎a‎r‎t‎ ‎f‎r‎o‎m‎ ‎h‎i‎s‎ ‎p‎u‎b‎l‎i‎s‎h‎i‎n‎g‎ ‎n‎e‎t‎w‎o‎r‎k‎ ‎a‎n‎d‎ ‎h‎i‎s‎ ‎c‎a‎t‎.‎


(‎(‎ ‎C‎T‎H‎U‎L‎H‎U‎ ‎C‎A‎L‎L‎S‎ ‎)‎)‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎D‎i‎d‎ ‎y‎o‎u‎ ‎m‎i‎s‎s‎ ‎t‎h‎o‎s‎e‎ ‎a‎s‎s‎ ‎p‎i‎r‎a‎t‎e‎s‎ ‎o‎n‎ ‎#‎L‎R‎H‎?‎.‎.‎.‎.‎ ‎N‎o‎?‎.‎.‎.‎.‎ ‎W‎e‎l‎l‎ ‎h‎e‎r‎e‎ ‎t‎h‎e‎y‎ ‎a‎r‎e‎ ‎a‎g‎a‎i‎n‎.‎

[‎2‎2‎:‎0‎9‎]‎ ‎<‎+‎D‎w‎a‎i‎n‎e‎>‎ ‎h‎a‎d‎ ‎a‎ ‎l‎o‎n‎g‎ ‎t‎i‎m‎e‎ ‎o‎u‎t‎
[‎2‎2‎:‎0‎9‎]‎ ‎<‎+‎t‎u‎l‎p‎a‎>‎ ‎d‎n‎s‎k‎ ‎i‎ ‎d‎o‎ ‎n‎o‎t‎ ‎h‎a‎v‎e‎ ‎i‎t‎
[‎2‎2‎:‎1‎0‎]‎ ‎<‎+‎D‎w‎a‎i‎n‎e‎>‎ ‎d‎o‎n‎'‎t‎ ‎c‎a‎r‎e‎ ‎t‎o‎ ‎e‎l‎a‎b‎o‎r‎a‎t‎e‎
[‎2‎2‎:‎1‎0‎]‎ ‎<‎+‎D‎w‎a‎i‎n‎e‎>‎ ‎I‎ ‎t‎r‎u‎l‎y‎ ‎p‎r‎a‎y‎ ‎f‎o‎r‎ ‎a‎l‎l‎
[‎2‎2‎:‎1‎1‎]‎ ‎<‎+‎D‎w‎a‎i‎n‎e‎>‎ ‎a‎n‎d‎ ‎y‎e‎s‎ ‎r‎e‎c‎a‎l‎l‎ ‎n‎e‎a‎r‎l‎y‎ ‎a‎l‎l‎ ‎n‎i‎c‎k‎s‎
[‎2‎2‎:‎1‎2‎]‎ ‎<‎+‎D‎w‎a‎i‎n‎e‎>‎ ‎-‎ ‎-‎ ‎N‎e‎w‎e‎s‎t‎ ‎M‎e‎s‎s‎ ‎J‎u‎n‎e‎ ‎2‎8‎ ‎2‎0‎1‎7‎ ‎ ‎A‎q‎u‎a‎ ‎-‎ ‎A‎q‎u‎a‎r‎i‎u‎m‎ ‎(‎1‎9‎9‎7‎)‎
[‎2‎2‎:‎1‎2‎]‎ ‎<‎+‎d‎n‎s‎k‎>‎ ‎t‎u‎l‎p‎a‎,‎ ‎h‎t‎t‎p‎s‎:‎/‎/‎w‎e‎.‎t‎l‎/‎t‎-‎g‎x‎V‎a‎U‎n‎9‎s‎v‎w‎
[‎2‎2‎:‎1‎3‎]‎ ‎<‎+‎d‎n‎s‎k‎>‎ ‎t‎h‎a‎t‎'‎s‎ ‎t‎h‎e‎ ‎s‎i‎n‎g‎l‎e‎
[‎2‎2‎:‎1‎3‎]‎ ‎<‎+‎d‎n‎s‎k‎>‎ ‎F‎L‎A‎C‎
[‎2‎2‎:‎1‎3‎]‎ ‎<‎+‎d‎n‎s‎k‎>‎ ‎I‎t‎'‎s‎ ‎g‎o‎o‎d‎ ‎T‎E‎C‎H‎N‎O‎
[‎2‎2‎:‎1‎3‎]‎ ‎<‎+‎D‎w‎a‎i‎n‎e‎>‎ ‎n‎o‎t‎ ‎m‎u‎c‎h‎ ‎o‎f‎ ‎f‎l‎a‎c‎
‎0‎6‎[‎2‎2‎:‎1‎4‎]‎ ‎*‎ ‎+‎d‎n‎s‎k‎ ‎i‎s‎ ‎n‎o‎w‎ ‎p‎l‎a‎y‎i‎n‎g‎:‎ ‎L‎o‎r‎d‎s‎ ‎o‎f‎ ‎A‎c‎i‎d‎ ‎-‎ ‎I‎ ‎S‎i‎t‎ ‎O‎n‎ ‎A‎c‎i‎d‎ ‎(‎o‎r‎i‎g‎i‎n‎a‎l‎)‎
[‎2‎2‎:‎1‎4‎]‎ ‎<‎+‎d‎n‎s‎k‎>‎ ‎t‎u‎l‎p‎a‎,‎ ‎I‎ ‎l‎o‎v‎e‎ ‎t‎h‎i‎s‎ ‎t‎u‎n‎e‎
[‎2‎2‎:‎1‎4‎]‎ ‎<‎+‎t‎u‎l‎p‎a‎>‎ ‎:‎D‎
[‎2‎2‎:‎1‎4‎]‎ ‎<‎+‎D‎w‎a‎i‎n‎e‎>‎ ‎p‎r‎e‎f‎e‎r‎ ‎r‎o‎c‎k‎ ‎b‎u‎t‎ ‎n‎o‎t‎ ‎o‎p‎p‎o‎s‎e‎d‎ ‎t‎o‎ ‎o‎t‎e‎r‎ ‎g‎e‎n‎r‎e‎s‎
[‎2‎2‎:‎1‎4‎]‎ ‎<‎+‎D‎w‎a‎i‎n‎e‎>‎ ‎o‎t‎h‎e‎r‎
[‎2‎2‎:‎1‎5‎]‎ ‎<‎+‎d‎n‎s‎k‎>‎ ‎I‎ ‎d‎o‎n‎'‎t‎ ‎r‎e‎a‎l‎l‎y‎ ‎p‎r‎e‎f‎e‎r‎ ‎a‎n‎y‎t‎h‎i‎n‎g‎ ‎s‎p‎e‎c‎i‎f‎i‎c‎,‎ ‎b‎u‎t‎ ‎r‎i‎g‎h‎t‎ ‎n‎o‎w‎ ‎i‎t‎'‎s‎ ‎e‎l‎e‎c‎t‎r‎o‎/‎d‎a‎r‎k‎/‎t‎e‎c‎h‎n‎o‎/‎a‎c‎i‎d‎.‎
[‎2‎2‎:‎1‎5‎]‎ ‎<‎+‎D‎w‎a‎i‎n‎e‎>‎ ‎p‎r‎e‎f‎e‎r‎ ‎r‎o‎c‎k‎ ‎b‎u‎t‎ ‎l‎o‎t‎s‎ ‎o‎f‎ ‎a‎l‎t‎e‎r‎n‎a‎t‎i‎v‎e‎s‎
[‎2‎2‎:‎1‎6‎]‎ ‎<‎D‎a‎R‎e‎d‎W‎o‎r‎m‎>‎ ‎d‎n‎s‎k‎:‎ ‎i‎ ‎l‎i‎k‎e‎ ‎a‎c‎i‎d‎e‎c‎o‎r‎e‎,‎ ‎a‎n‎d‎ ‎h‎a‎r‎d‎c‎o‎r‎e‎ ‎t‎o‎o‎
[‎2‎2‎:‎1‎7‎]‎ ‎<‎+‎d‎n‎s‎k‎>‎ ‎D‎a‎R‎e‎d‎W‎o‎r‎m‎,‎ ‎t‎h‎a‎t‎ ‎i‎s‎ ‎v‎e‎r‎y‎ ‎n‎i‎c‎e‎!‎ ‎
[‎2‎2‎:‎1‎7‎]‎ ‎<‎+‎D‎w‎a‎i‎n‎e‎>‎ ‎M‎o‎n‎t‎r‎o‎s‎e‎ ‎-‎ ‎L‎i‎v‎e‎ ‎I‎n‎ ‎C‎l‎e‎v‎e‎l‎a‎n‎d‎ ‎1‎9‎7‎4‎ ‎(‎3‎2‎0‎ ‎k‎b‎p‎s‎)‎
[‎2‎2‎:‎1‎7‎]‎ ‎<‎+‎D‎w‎a‎i‎n‎e‎>‎ ‎R‎o‎c‎k‎ ‎t‎h‎e‎ ‎N‎a‎t‎i‎o‎n‎
[‎2‎2‎:‎1‎7‎]‎ ‎<‎D‎a‎R‎e‎d‎W‎o‎r‎m‎>‎ ‎a‎n‎d‎ ‎m‎u‎s‎i‎c‎ ‎o‎f‎ ‎t‎h‎e‎ ‎s‎e‎v‎e‎n‎t‎i‎e‎s‎ ‎t‎o‎o‎
[‎2‎2‎:‎1‎7‎]‎ ‎<‎+‎d‎n‎s‎k‎>‎ ‎I‎ ‎a‎m‎ ‎v‎e‎r‎y‎ ‎d‎a‎r‎k‎ ‎a‎t‎ ‎t‎h‎i‎s‎ ‎p‎o‎i‎n‎t‎ ‎i‎n‎ ‎s‎p‎a‎c‎e‎t‎i‎m‎e‎ ‎r‎e‎g‎a‎r‎d‎i‎n‎g‎ ‎m‎u‎s‎i‎c‎
[‎2‎2‎:‎1‎8‎]‎ ‎<‎+‎t‎u‎l‎p‎a‎>‎ ‎l‎a‎t‎e‎ ‎h‎e‎r‎e‎
[‎2‎2‎:‎1‎8‎]‎ ‎<‎+‎t‎u‎l‎p‎a‎>‎ ‎n‎e‎e‎d‎ ‎t‎o‎ ‎c‎r‎a‎s‎h‎ ‎o‎u‎t‎ ‎f‎o‎l‎k‎s‎
[‎2‎2‎:‎1‎8‎]‎ ‎<‎+‎d‎n‎s‎k‎>‎ ‎D‎a‎R‎e‎d‎W‎o‎r‎m‎,‎ ‎h‎t‎t‎p‎s‎:‎/‎/‎s‎o‎u‎n‎d‎c‎l‎o‎u‎d‎.‎c‎o‎m‎/‎d‎n‎s‎k‎s‎e‎/‎i‎n‎f‎i‎n‎i‎t‎y‎g‎h‎x‎s‎t‎-‎m‎e‎e‎t‎s‎-‎w‎o‎o‎l‎y‎m‎a‎m‎m‎o‎t‎h‎-‎d‎n‎s‎k‎-‎m‎a‎s‎h‎u‎p‎
[‎2‎2‎:‎1‎8‎]‎ ‎<‎+‎t‎u‎l‎p‎a‎>‎ ‎d‎n‎s‎k‎ ‎i‎'‎l‎l‎ ‎p‎l‎a‎y‎ ‎i‎t‎ ‎t‎o‎m‎o‎r‎r‎o‎w‎
[‎2‎2‎:‎1‎8‎]‎ ‎<‎+‎D‎w‎a‎i‎n‎e‎>‎ ‎r‎e‎s‎t‎ ‎B‎r‎o‎t‎h‎e‎r‎
[‎2‎2‎:‎1‎8‎]‎ ‎<‎+‎d‎n‎s‎k‎>‎ ‎t‎u‎l‎p‎a‎,‎ ‎d‎a‎t‎s‎ ‎c‎o‎o‎l‎
[‎2‎2‎:‎1‎8‎]‎ ‎<‎+‎D‎w‎a‎i‎n‎e‎>‎ ‎l‎o‎v‎e‎ ‎y‎o‎u‎
[‎2‎2‎:‎1‎8‎]‎ ‎<‎+‎t‎u‎l‎p‎a‎>‎ ‎:‎)‎
[‎2‎2‎:‎1‎8‎]‎ ‎<‎+‎d‎n‎s‎k‎>‎ ‎t‎u‎l‎p‎a‎,‎ ‎s‎l‎e‎e‎p‎ ‎w‎e‎l‎l‎
[‎2‎2‎:‎1‎8‎]‎ ‎<‎+‎d‎n‎s‎k‎>‎ ‎<‎3‎
[‎2‎2‎:‎1‎8‎]‎ ‎<‎+‎t‎u‎l‎p‎a‎>‎ ‎n‎i‎n‎i‎ ‎f‎r‎e‎n‎s‎
[‎2‎2‎:‎1‎9‎]‎ ‎<‎+‎d‎n‎s‎k‎>‎ ‎n‎i‎e‎n‎i‎e‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

L‎e‎s‎ ‎H‎u‎g‎u‎e‎n‎o‎t‎s‎ ‎i‎s‎ ‎a‎n‎ ‎o‎p‎e‎r‎a‎ ‎i‎n‎ ‎f‎i‎v‎e‎ ‎a‎c‎t‎s‎ ‎b‎y‎ ‎G‎i‎a‎c‎o‎m‎o‎ ‎M‎e‎y‎e‎r‎b‎e‎e‎r‎.‎ ‎O‎n‎e‎ ‎o‎f‎ ‎t‎h‎e‎ ‎m‎o‎s‎t‎ ‎p‎o‎p‎u‎l‎a‎r‎ ‎a‎n‎d‎ ‎s‎p‎e‎c‎t‎a‎c‎u‎l‎a‎r‎ ‎e‎x‎a‎m‎p‎l‎e‎s‎ ‎o‎f‎ ‎g‎r‎a‎n‎d‎ ‎o‎p‎e‎r‎a‎,‎ ‎i‎t‎ ‎s‎e‎t‎s‎ ‎a‎ ‎F‎r‎e‎n‎c‎h‎-‎l‎a‎n‎g‎u‎a‎g‎e‎ ‎l‎i‎b‎r‎e‎t‎t‎o‎ ‎b‎y‎ ‎E‎u‎g‎è‎n‎e‎ ‎S‎c‎r‎i‎b‎e‎ ‎a‎n‎d‎ ‎É‎m‎i‎l‎e‎ ‎D‎e‎s‎c‎h‎a‎m‎p‎s‎ ‎a‎n‎d‎ ‎p‎r‎e‎m‎i‎e‎r‎e‎d‎ ‎i‎n‎ ‎P‎a‎r‎i‎s‎ ‎o‎n‎ ‎2‎9‎ ‎F‎e‎b‎r‎u‎a‎r‎y‎ ‎1‎8‎3‎6‎.‎ ‎T‎h‎i‎s‎ ‎w‎a‎t‎e‎r‎c‎o‎l‎o‎u‎r‎ ‎i‎l‎l‎u‎s‎t‎r‎a‎t‎i‎o‎n‎ ‎s‎h‎o‎w‎s‎ ‎t‎h‎e‎ ‎c‎o‎s‎t‎u‎m‎e‎ ‎d‎e‎s‎i‎g‎n‎s‎ ‎b‎y‎ ‎E‎u‎g‎è‎n‎e‎ ‎D‎u‎ ‎F‎a‎g‎e‎t‎ ‎f‎o‎r‎ ‎t‎h‎e‎ ‎f‎i‎r‎s‎t‎ ‎p‎e‎r‎f‎o‎r‎m‎a‎n‎c‎e‎ ‎o‎f‎ ‎L‎e‎s‎ ‎H‎u‎g‎u‎e‎n‎o‎t‎s‎.‎ ‎T‎h‎e‎ ‎t‎h‎r‎e‎e‎ ‎r‎o‎l‎e‎s‎ ‎d‎e‎p‎i‎c‎t‎e‎d‎ ‎a‎n‎d‎ ‎t‎h‎e‎ ‎p‎r‎e‎m‎i‎e‎r‎e‎ ‎c‎a‎s‎t‎,‎ ‎f‎r‎o‎m‎ ‎l‎e‎f‎t‎ ‎t‎o‎ ‎r‎i‎g‎h‎t‎,‎ ‎a‎r‎e‎ ‎M‎a‎r‎g‎u‎e‎r‎i‎t‎e‎ ‎(‎J‎u‎l‎i‎e‎ ‎D‎o‎r‎u‎s‎-‎G‎r‎a‎s‎)‎,‎ ‎R‎a‎o‎u‎l‎ ‎(‎A‎d‎o‎l‎p‎h‎e‎ ‎N‎o‎u‎r‎r‎i‎t‎)‎ ‎a‎n‎d‎ ‎V‎a‎l‎e‎n‎t‎i‎n‎e‎ ‎(‎C‎o‎r‎n‎é‎l‎i‎e‎ ‎F‎a‎l‎c‎o‎n‎)‎.‎

I‎l‎l‎u‎s‎t‎r‎a‎t‎i‎o‎n‎ ‎c‎r‎e‎d‎i‎t‎:‎ ‎E‎u‎g‎è‎n‎e‎ ‎D‎u‎ ‎F‎a‎g‎e‎t‎;‎ ‎r‎e‎s‎t‎o‎r‎e‎d‎ ‎b‎y‎ ‎A‎d‎a‎m‎ ‎C‎u‎e‎r‎d‎e‎n‎

.‎.‎.‎.‎.‎.‎.‎

A‎l‎r‎i‎g‎h‎t‎ ‎I‎ ‎f‎i‎g‎u‎r‎e‎d‎ ‎I‎'‎d‎ ‎t‎e‎l‎l‎ ‎y‎o‎u‎ ‎g‎u‎y‎s‎ ‎t‎h‎e‎ ‎t‎r‎u‎t‎h‎ ‎a‎b‎o‎u‎t‎ ‎T‎o‎u‎c‎a‎n‎ ‎S‎a‎m‎.‎ ‎I‎ ‎w‎a‎s‎ ‎r‎a‎p‎e‎d‎ ‎i‎n‎ ‎t‎h‎e‎ ‎a‎s‎s‎ ‎b‎y‎ ‎h‎i‎m‎ ‎w‎h‎e‎n‎ ‎I‎ ‎w‎a‎s‎ ‎5‎.‎ ‎I‎ ‎d‎o‎n‎'‎t‎ ‎l‎i‎k‎e‎ ‎t‎o‎ ‎t‎a‎l‎k‎ ‎a‎b‎o‎u‎t‎ ‎t‎h‎i‎s‎,‎ ‎b‎u‎t‎ ‎I‎ ‎f‎i‎g‎u‎r‎e‎d‎ ‎I‎'‎d‎ ‎t‎e‎l‎l‎ ‎y‎o‎u‎ ‎g‎u‎y‎s‎.‎ ‎I‎'‎m‎ ‎t‎h‎i‎n‎k‎i‎n‎g‎ ‎a‎b‎o‎u‎t‎ ‎g‎e‎t‎t‎i‎n‎g‎ ‎r‎e‎v‎e‎n‎g‎e‎ ‎o‎n‎ ‎h‎i‎m‎ ‎f‎o‎r‎ ‎r‎a‎p‎i‎n‎g‎ ‎m‎e‎.‎"
mcUL5GQu,IPTV-CHECK-ONLINE.py,Najeebsk,Python,Thursday 29th of February 2024 09:59:31 PM CDT,"import tkinter as tk
from tkinter import filedialog, messagebox, Scrollbar
import concurrent.futures
import requests
import re
import subprocess

# Set VLC path with quotes
vlc_path = r'C:\Program Files\VideoLAN\VLC\vlc.exe'

def download_m3u_file(url):
    try:
        response = requests.get(url, timeout=5)
        if response.status_code == 200:
            return response.text
    except Exception as e:
        pass
    return None

def extract_urls_from_m3u(content):
    return re.findall(r'(https?://[^\s]+)', content)

def check_url(url):
    try:
        response = requests.get(url, timeout=2)
        if response.status_code == 200:
            return url, ""Working""
    except Exception as e:
        pass
    return url, ""Not Working""

def check_m3u_urls():
    m3u_url = m3u_url_entry.get()
    if m3u_url:
        if m3u_url.startswith(""https://"") or m3u_url.startswith(""http://""):
            m3u_content = download_m3u_file(m3u_url)
            if m3u_content:
                urls = extract_urls_from_m3u(m3u_content)
                for url in urls:
                    status = check_url(url)
                    if status[1] == ""Working"":
                        working_urls_text.insert(tk.END, f""{status[0]} - {status[1]}\n"")
                    else:
                        not_working_urls_text.insert(tk.END, f""{status[0]} - {status[1]}\n"")
            else:
                messagebox.showerror(""Error"", ""Failed to download M3U file."")
        else:
            try:
                with open(m3u_url, 'r') as file:
                    content = file.read()
                    urls = extract_urls_from_m3u(content)
                    for url in urls:
                        status = check_url(url)
                        if status[1] == ""Working"":
                            working_urls_text.insert(tk.END, f""{status[0]} - {status[1]}\n"")
                        else:
                            not_working_urls_text.insert(tk.END, f""{status[0]} - {status[1]}\n"")
            except Exception as e:
                messagebox.showerror(""Error"", f""Failed to open local M3U file: {e}"")
    else:
        messagebox.showerror(""Error"", ""Please provide a valid M3U URL."")

def run_in_vlc(event):
    # Get the index of the clicked line
    index = event.widget.index(tk.CURRENT)
    # Get the text from the clicked line
    line_text = event.widget.get(index + "" linestart"", index + "" lineend"")
    # Extract the URL from the line
    url = line_text.strip().split("" - "")[0]
    # Open the URL in VLC
    if url:
        subprocess.Popen([vlc_path, url])
    else:
        messagebox.showwarning(""Warning"", ""No URL found in the line."")

root = tk.Tk()
root.config(bg='white')
root.title(""NAJEEB M3U M3U8 URL CHECKER AND PLAY VLC PLAYER"")

# Entry field to input M3U URL
m3u_url_label = tk.Label(root, text=""Enter M3U URL OR Path:"")
m3u_url_label.grid(row=0, column=0, padx=5, pady=5, sticky=""w"")

m3u_url_entry = tk.Entry(root, width=100)
m3u_url_entry.grid(row=0, column=1, padx=5, pady=5)

# Button to check M3U URLs
check_m3u_urls_button = tk.Button(root, text=""Check M3U URLs"", command=check_m3u_urls)
check_m3u_urls_button.grid(row=0, column=2, padx=5, pady=5)

# Text field to display working URLs
working_urls_label = tk.Label(root, text=""Working URLs:"")
working_urls_label.grid(row=1, column=0, padx=5, pady=5, sticky=""w"")

working_urls_text = tk.Text(root, width=100, height=10)
working_urls_text.grid(row=2, column=0, columnspan=3, padx=5, pady=5, sticky=""nsew"")

working_urls_scrollbar = Scrollbar(root, orient=tk.VERTICAL, command=working_urls_text.yview)
working_urls_scrollbar.grid(row=2, column=3, sticky=""ns"")
working_urls_text.config(yscrollcommand=working_urls_scrollbar.set)

working_urls_text.bind(""<Double-Button-1>"", run_in_vlc)

# Text field to display not working URLs
not_working_urls_label = tk.Label(root, text=""Not Working URLs:"")
not_working_urls_label.grid(row=3, column=0, padx=5, pady=5, sticky=""w"")

not_working_urls_text = tk.Text(root, width=100, height=10)
not_working_urls_text.grid(row=4, column=0, columnspan=3, padx=5, pady=5, sticky=""nsew"")

not_working_urls_scrollbar = Scrollbar(root, orient=tk.VERTICAL, command=not_working_urls_text.yview)
not_working_urls_scrollbar.grid(row=4, column=3, sticky=""ns"")
not_working_urls_text.config(yscrollcommand=not_working_urls_scrollbar.set)

not_working_urls_text.bind(""<Double-Button-1>"", run_in_vlc)

# Configure grid weights for resizing
root.grid_rowconfigure(2, weight=1)
root.grid_columnconfigure(2, weight=1)

root.mainloop()
"
1dA2r2Gu,ErrorLog,Okami,C#,Thursday 29th of February 2024 09:24:05 PM CDT,"Build started...
1>------ Build started: Project: Saikin, Configuration: Development_Editor x64 ------
1>Using bundled DotNet SDK version: 6.0.302
1>Running UnrealBuildTool: dotnet ""..\..\Engine\Binaries\DotNET\UnrealBuildTool\UnrealBuildTool.dll"" SaikinEditor Win64 Development -Project=""D:\SaikinDev\Saikin\Saikin.uproject"" -WaitMutex -FromMsBuild
1>Log file: C:\Users\Okashi\AppData\Local\UnrealBuildTool\Log.txt
1>Creating makefile for SaikinEditor (no existing makefile)
1>Parsing headers for SaikinEditor
1>  Running Internal UnrealHeaderTool D:\SaikinDev\Saikin\Saikin.uproject D:\SaikinDev\Saikin\Intermediate\Build\Win64\SaikinEditor\Development\SaikinEditor.uhtmanifest -WarningsAsErrors -installed
1>Total of 50 written
1>Reflection code generated for SaikinEditor in 1.8784009 seconds
1>Building SaikinEditor...
1>Using Visual Studio 2022 14.36.32542 toolchain (C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.36.32532) and Windows 10.0.22621.0 SDK (C:\Program Files (x86)\Windows Kits\10).
1>[Upgrade]
1>[Upgrade] Using backward-compatible include order. The latest version of UE has changed the order of includes, which may require code changes. The current setting is:
1>[Upgrade]     IncludeOrderVersion = EngineIncludeOrderVersion.Unreal5_0
1>[Upgrade] Suppress this message by setting 'IncludeOrderVersion = EngineIncludeOrderVersion.Latest;' in SaikinEditor.Target.cs.
1>[Upgrade] Alternatively you can set this to 'EngineIncludeOrderVersion.Latest' to always use the latest include order. This will potentially cause compile errors when integrating new versions of the engine.
1>[Upgrade]
1>Determining max actions to execute in parallel (6 physical cores, 12 logical cores)
1>  Executing up to 6 processes, one per physical core
1>------ Building 17 action(s) started ------
1>[1/17] Resource Default.rc2
1>[2/17] Resource Default.rc2
1>[3/17] Compile [x64] SharedPCH.UnrealEd.Cpp20.InclOrderUnreal5_0.cpp
1>[4/17] Compile [x64] Module.OWSPlugin.5.cpp
1>[5/17] Compile [x64] Module.OWSPlugin.1.cpp
1>[6/17] Compile [x64] Module.OWSPlugin.4.cpp
1>[7/17] Compile [x64] Module.OWSPlugin.2.cpp
1>[8/17] Compile [x64] Module.OWSPlugin.7.cpp
1>D:\SaikinDev\Saikin\Plugins\OWSPlugin\Source\OWSPlugin\Private\OWSCharacterMovementComponent.cpp(156): warning C4996: 'APlayerController::SetDeprecatedInputYawScale': SetDeprecatedInputYawScale is deprecated, please use the Enhanced Input plugin Scalar Modifier instead. Please update your code to the new API before upgrading to the next release, otherwise your project will no longer compile.
1>D:\SaikinDev\Saikin\Plugins\OWSPlugin\Source\OWSPlugin\Private\OWSCharacterMovementComponent.cpp(172): warning C4996: 'APlayerController::SetDeprecatedInputYawScale': SetDeprecatedInputYawScale is deprecated, please use the Enhanced Input plugin Scalar Modifier instead. Please update your code to the new API before upgrading to the next release, otherwise your project will no longer compile.
1>D:\SaikinDev\Saikin\Plugins\OWSPlugin\Source\OWSPlugin\Private\OWSCharacterMovementComponent.cpp(589): warning C4996: 'APlayerController::SetDeprecatedInputYawScale': SetDeprecatedInputYawScale is deprecated, please use the Enhanced Input plugin Scalar Modifier instead. Please update your code to the new API before upgrading to the next release, otherwise your project will no longer compile.
1>D:\SaikinDev\Saikin\Plugins\OWSPlugin\Source\OWSPlugin\Private\OWSGameInstance.cpp(204): warning C4996: ANY_PACKAGE has been deprecated. Either use full path name of objects (including classes) or provide a valid Outer for *FindObject* functions Please update your code to the new API before upgrading to the next release, otherwise your project will no longer compile.
1>D:\SaikinDev\Saikin\Plugins\OWSPlugin\Source\OWSPlugin\Private\OWSGameInstance.cpp(213): warning C4996: ANY_PACKAGE has been deprecated. Either use full path name of objects (including classes) or provide a valid Outer for *FindObject* functions Please update your code to the new API before upgrading to the next release, otherwise your project will no longer compile.
1>[9/17] Compile [x64] Module.OWSPlugin.8.cpp
1>[10/17] Compile [x64] Module.Saikin.cpp
1>D:\SaikinDev\Saikin\Source\Saikin\Private\Characters\Heroes\SaikinHeroCharacter.cpp(322): error C2653: 'FGameplayTags': is not a class or namespace name
1>D:\SaikinDev\Saikin\Source\Saikin\Private\Characters\Heroes\SaikinHeroCharacter.cpp(322): error C3861: 'MakeTag': identifier not found
1>D:\SaikinDev\Saikin\Source\Saikin\Private\Characters\Heroes\SaikinHeroCharacter.cpp(323): error C2653: 'FGameplayTags': is not a class or namespace name
1>D:\SaikinDev\Saikin\Source\Saikin\Private\Characters\Heroes\SaikinHeroCharacter.cpp(323): error C3861: 'MakeTag': identifier not found
1>D:\SaikinDev\Saikin\Source\Saikin\Private\Characters\Heroes\SaikinHeroCharacter.cpp(326): error C2039: 'TryActivateAbilityByTag': is not a member of 'USaikinAbilitySystemComponent'
1>D:\SaikinDev\Saikin\Intermediate\Build\Win64\UnrealEditor\Inc\Saikin\UHT\SaikinAT_WaitReceiveDamage.generated.h(13): note: see declaration of 'USaikinAbilitySystemComponent'
1>D:\SaikinDev\Saikin\Source\Saikin\Private\Characters\Heroes\SaikinHeroCharacter.cpp(326): error C2065: 'TryActivateAbilityByTag': undeclared identifier
1>D:\SaikinDev\Saikin\Source\Saikin\Private\Characters\Heroes\SaikinHeroCharacter.cpp(327): error C2039: 'CancelActiveAbility': is not a member of 'USaikinAbilitySystemComponent'
1>D:\SaikinDev\Saikin\Intermediate\Build\Win64\UnrealEditor\Inc\Saikin\UHT\SaikinAT_WaitReceiveDamage.generated.h(13): note: see declaration of 'USaikinAbilitySystemComponent'
1>D:\SaikinDev\Saikin\Source\Saikin\Private\Characters\Heroes\SaikinHeroCharacter.cpp(327): error C2065: 'CancelActiveAbility': undeclared identifier
1>[11/17] Compile [x64] Module.OWSPlugin.3.cpp
1>[12/17] Compile [x64] Module.OWSPlugin.6.cpp
1>[13/17] Link [x64] UnrealEditor-OWSPlugin.lib
1>   Creating library D:\SaikinDev\Saikin\Plugins\OWSPlugin\Intermediate\Build\Win64\x64\UnrealEditor\Development\OWSPlugin\UnrealEditor-OWSPlugin.lib and object D:\SaikinDev\Saikin\Plugins\OWSPlugin\Intermediate\Build\Win64\x64\UnrealEditor\Development\OWSPlugin\UnrealEditor-OWSPlugin.exp
1>[14/17] Link [x64] UnrealEditor-OWSPlugin.dll
1>   Creating library D:\SaikinDev\Saikin\Plugins\OWSPlugin\Intermediate\Build\Win64\x64\UnrealEditor\Development\OWSPlugin\UnrealEditor-OWSPlugin.sup.lib and object D:\SaikinDev\Saikin\Plugins\OWSPlugin\Intermediate\Build\Win64\x64\UnrealEditor\Development\OWSPlugin\UnrealEditor-OWSPlugin.sup.exp
1>Total time in Parallel executor: 53.71 seconds
1>Total execution time: 60.00 seconds
1>C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Microsoft\VC\v170\Microsoft.MakeFile.Targets(44,5): error MSB3073: The command """"C:\Program Files\Epic Games\UE_5.3\Engine\Build\BatchFiles\Build.bat"" SaikinEditor Win64 Development -Project=""D:\SaikinDev\Saikin\Saikin.uproject"" -WaitMutex -FromMsBuild"" exited with code 6.
1>Done building project ""Saikin.vcxproj"" -- FAILED.
========== Build: 0 succeeded, 1 failed, 10 up-to-date, 0 skipped ==========
========== Build started at 9:08 PM and took 01:00.943 minutes ==========
"
UuEhhb4x,HoneyBadgerLib,hackedprofile,Python,Thursday 29th of February 2024 09:15:54 PM CDT,"import socket, time, requests, os, pyautogui
from requests import get

# System call
os.system("""")

# Chocolate's hello world.


class app:

  def chocolate():
    print(""Hey! I'm chocolate!"")

  # Display Commands, Displays to console

  def display(type, string, style=0):
    if type == ""header"":
      if style == 0:
        print(""<----- "" + string + "" ----->"")
      else:
        print(style + ""<----- "" + string + "" ----->"" + endstyle)

    if type == ""error"":
      if style == 0:
        print(""ERROR [X]: "" + string)
      else:
        print(style + ""ERROR [X]: "" + string + endstyle)

    if type == ""warn"":
      if style == 0:
        print(""WARN [!]: "" + string)
      else:
        print(style + ""WARN [!]: "" + string + endstyle)

    if type == ""info"":
      if style == 0:
        print(""INFO [+]: "" + string)
      else:
        print(style + ""INFO [+]: "" + string + endstyle)

    if type == ""write"":
      if style == 0:
        print(string)
      else:
        print(style + string + endstyle)

    if type == ""capture"":
      if style == 0:
        input(string)
      else:
        input(style + string + endstyle)

  # End of output

  # Formatting Commands

  def linebreak():
    print("""")

  def pause(string):
    input(string)

  def wait(num):
    time.sleep(num)

  # End of formatting

  # Data types

  def getip(mode):
    if mode == 1:
      print(socket.gethostbyname(socket.gethostname()))
    if mode == 2:
      ipadd = get('https://api.ipify.org').text
      print(format(ipadd))

  def resolve(hostname):
    print(socket.gethostbyname(hostname))

  def http(type, website, reponsetype=0):
    if type == ""get"":
      website = get(website).text
      print(format(website))


class input:
  pass


class gui:

  def alert(string):
    pyautogui.alert(string)

  def confirm(string, answer=0):
    if answer == 0:
      pyautogui.confirm(string)
    else:
      pyautogui.confirm(string, buttons=answer)

  def prompt(string):
    pyautogui.prompt(string)

  def password(string):
    pyautogui.password(string)


# Stylesheet

endstyle = '\033[0m'


class style():
  BLACK = '\033[30m'
  RED = '\033[31m'
  GREEN = '\033[32m'
  YELLOW = '\033[33m'
  BLUE = '\033[34m'
  MAGENTA = '\033[35m'
  CYAN = '\033[36m'
  WHITE = '\033[37m'
  UNDERLINE = '\033[4m'
  NONE = '\033[0m'
"
XUCyWury,Untitled,Menadh,Python,Thursday 29th of February 2024 08:06:07 PM CDT,"import random

class Unit:
    def __init__(self, unit_type, mp, sp, mo):
        self.unit_type = unit_type
        self.mp = mp
        self.sp = sp
        self.mo = mo
        self.mp_roll = None
        self.sp_roll = None
        self.mo_roll = None
        self.initial_mp = mp
        self.initial_sp = sp
        self.initial_mo = mo

def roll_dice(n):
    return [random.randint(1, 4) for _ in range(n)]

def calculate_attack_values(army):
    mp_rolls = roll_dice(len(army))
    sp_rolls = roll_dice(len(army))
    mo_rolls = roll_dice(len(army))

    mp_attack = sum(mp_rolls)
    sp_attack = sum(sp_rolls)
    mo_attack = sum(mo_rolls)

    for unit, mp_roll, sp_roll, mo_roll in zip(army, mp_rolls, sp_rolls, mo_rolls):
        unit.mp_roll = mp_roll
        unit.sp_roll = sp_roll
        unit.mo_roll = mo_roll

    return mp_attack, sp_attack, mo_attack

def apply_attack(army, mp_attack, sp_attack, mo_attack):
    for unit in army:
        unit.mp -= mp_attack
        unit.sp -= sp_attack
        unit.mo -= mo_attack

def print_army_details(army, mp_attack, sp_attack, mo_attack):
    print(f""MP Attack Value: {mp_attack}"")
    print(f""SP Attack Value: {sp_attack}"")
    print(f""MO Attack Value: {mo_attack}"")
    print(""Unit Details:"")
    for unit in army:
        print(f""{unit.unit_type}: MP {unit.mp}, SP {unit.sp}, MO {unit.mo} (Rolls: MP {unit.mp_roll}, SP {unit.sp_roll}, MO {unit.mo_roll})"")

def print_total_mp_decrease(army):
    total_mp_decrease = sum(unit.initial_mp - unit.mp for unit in army)
    print(f""Total MP number decrease: {total_mp_decrease}"")

def print_total_sp_decrease(army):
    total_sp_decrease = sum(unit.initial_sp - unit.sp for unit in army)
    print(f""Total SP number decrease: {total_sp_decrease}"")

def print_total_mo_decrease(army):
    total_mo_decrease = sum(unit.initial_mo - unit.mo for unit in army)
    print(f""Total MO number decrease: {total_mo_decrease}"")

# Army 1 units
army1_units = [
    Unit(""INF 1"", 6, 6, 6),
    Unit(""INF 2"", 6, 6, 6),
    Unit(""CAV 1"", 8, 8, 8)
]

# Army 2 units
army2_units = [
    Unit(""CAV 1"", 8, 8, 8),
    Unit(""CAV 2"", 8, 8, 8)
]

# Step 3-8: Calculate attack values for Army 1
army1_mp_attack, army1_sp_attack, army1_mo_attack = calculate_attack_values(army1_units)

# Step 11-16: Calculate attack values for Army 2
army2_mp_attack, army2_sp_attack, army2_mo_attack = calculate_attack_values(army2_units)

# Step 17-28: Apply attacks and update unit details
if army1_mp_attack > army2_mp_attack:
    final_mp_attack = army1_mp_attack - army2_mp_attack
    apply_attack(army2_units, final_mp_attack, 0, 0)
elif army2_mp_attack > army1_mp_attack:
    final_mp_attack = army2_mp_attack - army1_mp_attack
    apply_attack(army1_units, final_mp_attack, 0, 0)

if army1_sp_attack > army2_sp_attack:
    final_sp_attack = army1_sp_attack - army2_sp_attack
    apply_attack(army2_units, 0, final_sp_attack, 0)
elif army2_sp_attack > army1_sp_attack:
    final_sp_attack = army2_sp_attack - army1_sp_attack
    apply_attack(army1_units, 0, final_sp_attack, 0)

if army1_mo_attack > army2_mo_attack:
    final_mo_attack = army1_mo_attack - army2_mo_attack
    apply_attack(army2_units, 0, 0, final_mo_attack)
elif army2_mo_attack > army1_mo_attack:
    final_mo_attack = army2_mo_attack - army1_mo_attack
    apply_attack(army1_units, 0, 0, final_mo_attack)

# Print unit details after the battle for Army 1
print(""Army 1 after battle:"")
print_army_details(army1_units, army1_mp_attack, army1_sp_attack, army1_mo_attack)

# Print total MP number decrease for Army 1
print_total_mp_decrease(army1_units)

# Print total SP number decrease for Army 1
print_total_sp_decrease(army1_units)

# Print total MO number decrease for Army 1
print_total_mo_decrease(army1_units)

print(""\nArmy 2 after battle:"")
print_army_details(army2_units, army2_mp_attack, army2_sp_attack, army2_mo_attack)

# Print total MP number decrease for Army 2
print_total_mp_decrease(army2_units)

# Print total SP number decrease for Army 2
print_total_sp_decrease(army2_units)

# Print total MO number decrease for Army 2
print_total_mo_decrease(army2_units)

# Calculate and print the total losses for Army 1
total_losses_army1 = sum(unit.initial_mp - unit.mp + unit.initial_sp - unit.sp + unit.initial_mo - unit.mo for unit in army1_units)
print(f""\nTotal Army 1 losses: {total_losses_army1}"")

# Calculate and print the total losses for Army 2
total_losses_army2 = sum(unit.initial_mp - unit.mp + unit.initial_sp - unit.sp + unit.initial_mo - unit.mo for unit in army2_units)
print(f""Total Army 2 losses: {total_losses_army2}"")

# Determine the winner or stalemate
if total_losses_army1 > total_losses_army2:
    print(""Army 2 wins"")
elif total_losses_army2 > total_losses_army1:
    print(""Army 1 wins"")
else:
    print(""Stalemate"")

# Flip a coin
coin_flip_result = random.randint(0, 1)  # 0 for heads, 1 for tails

# Determine the fate of the lost resources based on the coin flip
if coin_flip_result == 0:  # Heads
    if total_losses_army1 < total_losses_army2:
        print(""Army 1 captures resources."")
    elif total_losses_army2 < total_losses_army1:
        print(""Army 2 captures resources."")
    else:
        print(""Resources are lost."")
else:  # Tails
    print(""Resources are lost."")
"
isr6QUGW,Untitled,Menadh,Python,Thursday 29th of February 2024 07:39:46 PM CDT,"import random

class Unit:
    def __init__(self, unit_type, mp, sp, mo):
        self.unit_type = unit_type
        self.mp = mp
        self.sp = sp
        self.mo = mo
        self.mp_roll = None
        self.sp_roll = None
        self.mo_roll = None
        self.initial_mp = mp
        self.initial_sp = sp
        self.initial_mo = mo

def roll_dice(n):
    return [random.randint(1, 4) for _ in range(n)]

def calculate_attack_values(army):
    mp_rolls = roll_dice(len(army))
    sp_rolls = roll_dice(len(army))
    mo_rolls = roll_dice(len(army))

    mp_attack = sum(mp_rolls)
    sp_attack = sum(sp_rolls)
    mo_attack = sum(mo_rolls)

    for unit, mp_roll, sp_roll, mo_roll in zip(army, mp_rolls, sp_rolls, mo_rolls):
        unit.mp_roll = mp_roll
        unit.sp_roll = sp_roll
        unit.mo_roll = mo_roll

    return mp_attack, sp_attack, mo_attack

def apply_attack(army, mp_attack, sp_attack, mo_attack):
    for unit in army:
        unit.mp -= mp_attack
        unit.sp -= sp_attack
        unit.mo -= mo_attack

def print_army_details(army, mp_attack, sp_attack, mo_attack):
    print(f""MP Attack Value: {mp_attack}"")
    print(f""SP Attack Value: {sp_attack}"")
    print(f""MO Attack Value: {mo_attack}"")
    print(""Unit Details:"")
    for unit in army:
        print(f""{unit.unit_type}: MP {unit.mp}, SP {unit.sp}, MO {unit.mo} (Rolls: MP {unit.mp_roll}, SP {unit.sp_roll}, MO {unit.mo_roll})"")

def print_total_mp_decrease(army):
    total_mp_decrease = sum(unit.initial_mp - unit.mp for unit in army)
    print(f""Total MP number decrease: {total_mp_decrease}"")

def print_total_sp_decrease(army):
    total_sp_decrease = sum(unit.initial_sp - unit.sp for unit in army)
    print(f""Total SP number decrease: {total_sp_decrease}"")

def print_total_mo_decrease(army):
    total_mo_decrease = sum(unit.initial_mo - unit.mo for unit in army)
    print(f""Total MO number decrease: {total_mo_decrease}"")

# Army 1 units
army1_units = [
    Unit(""INF 1"", 6, 6, 6),
    Unit(""INF 2"", 6, 6, 6),
    Unit(""CAV 1"", 8, 8, 8)
]

# Army 2 units
army2_units = [
    Unit(""CAV 1"", 8, 8, 8),
    Unit(""CAV 2"", 8, 8, 8)
]

# Step 3-8: Calculate attack values for Army 1
army1_mp_attack, army1_sp_attack, army1_mo_attack = calculate_attack_values(army1_units)

# Step 11-16: Calculate attack values for Army 2
army2_mp_attack, army2_sp_attack, army2_mo_attack = calculate_attack_values(army2_units)

# Step 17-28: Apply attacks and update unit details
if army1_mp_attack > army2_mp_attack:
    final_mp_attack = army1_mp_attack - army2_mp_attack
    apply_attack(army2_units, final_mp_attack, 0, 0)
elif army2_mp_attack > army1_mp_attack:
    final_mp_attack = army2_mp_attack - army1_mp_attack
    apply_attack(army1_units, final_mp_attack, 0, 0)

if army1_sp_attack > army2_sp_attack:
    final_sp_attack = army1_sp_attack - army2_sp_attack
    apply_attack(army2_units, 0, final_sp_attack, 0)
elif army2_sp_attack > army1_sp_attack:
    final_sp_attack = army2_sp_attack - army1_sp_attack
    apply_attack(army1_units, 0, final_sp_attack, 0)

if army1_mo_attack > army2_mo_attack:
    final_mo_attack = army1_mo_attack - army2_mo_attack
    apply_attack(army2_units, 0, 0, final_mo_attack)
elif army2_mo_attack > army1_mo_attack:
    final_mo_attack = army2_mo_attack - army1_mo_attack
    apply_attack(army1_units, 0, 0, final_mo_attack)

# Print unit details after the battle for Army 1
print(""Army 1 after battle:"")
print_army_details(army1_units, army1_mp_attack, army1_sp_attack, army1_mo_attack)

# Print total MP number decrease for Army 1
print_total_mp_decrease(army1_units)

# Print total SP number decrease for Army 1
print_total_sp_decrease(army1_units)

# Print total MO number decrease for Army 1
print_total_mo_decrease(army1_units)

print(""\nArmy 2 after battle:"")
print_army_details(army2_units, army2_mp_attack, army2_sp_attack, army2_mo_attack)

# Print total MP number decrease for Army 2
print_total_mp_decrease(army2_units)

# Print total SP number decrease for Army 2
print_total_sp_decrease(army2_units)

# Print total MO number decrease for Army 2
print_total_mo_decrease(army2_units)

# Calculate and print the total losses for Army 1
total_losses_army1 = sum(unit.initial_mp - unit.mp + unit.initial_sp - unit.sp + unit.initial_mo - unit.mo for unit in army1_units)
print(f""\nTotal Army 1 losses: {total_losses_army1}"")

# Calculate and print the total losses for Army 2
total_losses_army2 = sum(unit.initial_mp - unit.mp + unit.initial_sp - unit.sp + unit.initial_mo - unit.mo for unit in army2_units)
print(f""Total Army 2 losses: {total_losses_army2}"")

# Determine the winner or stalemate
if total_losses_army1 > total_losses_army2:
    print(""Army 2 wins"")
elif total_losses_army2 > total_losses_army1:
    print(""Army 1 wins"")
else:
    print(""Stalemate"")
"
PDid3snw,Truth Detection Ireland,spidspun,HTML,Thursday 29th of February 2024 07:11:10 PM CDT,"LIE DETECTOR LTD. IS THE LONGEST ESTABLISHED POLYGRAPH BUSINESS IN IRELAND
BPA / APA QUALIFIED, CERTIFIED | SIAN DEVINE MBA, M.SC.
When you choose us, you are choosing the most experienced and reliable examiners in Ireland. We are also the longest established polygraph business in Ireland. You can depend on us to deliver trustworthy results which will stand up to professional scrutiny. Our polygraph services are provided to corporate entities, businesses, government agencies, the legal profession and the general public. All our examiners are highly qualified and professional. We offer a reliable, flexible discreet service. All enquiries are treated in the strictest of confidence and all general enquiries are welcome.
<embed><a href=""https://liedetector.ie/"">Lie Detector LTD Ireland</a></embed>
01 685 4715
<embed>https://maps.app.goo.gl/z2vzojkfJKmiLPgw5 </embed>Lie Detector LTD Ireland "
fFq705pX,Review New Pastesbin,xxsa,PHP,Thursday 29th of February 2024 07:10:27 PM CDT,https://pastes.io/ - #1 Pastebin Alternative
aXwqTG2q,tijo1,Rementai,Java,Thursday 29th of February 2024 06:47:35 PM CDT,"//Main.java
public class Main {
    public static void main(String[] args) {
        assertAddMethod();
        MaxFinderTest.testMaxFinder();
    }

    static void assertAddMethod() {
        int result = add(1, 2);
        assert result == 3 : ""Given 1 and 2, When add method is called, Then it should return 3"";
        System.out.println(""Add method test passed"");
    }

    static int add(int first, int second) {
        return first + second;
    }
}


//MaxFinder.java
public class MaxFinder {
    public static Integer max(Integer[] digits) {
        if (digits == null || digits.length == 0) {
            return null;
        }

        Integer max = digits[0];
        for (int i = 1; i < digits.length; i++) {
            if (digits[i] != null && (max == null || digits[i] > max)) {
                max = digits[i];
            }
        }

        return max;
    }
}


//MaxFinderTest.java
public class MaxFinderTest {
    public static void testMaxFinder() {
        testNullInput();
        testEmptyArray();
        testSingleElementArray();
        testMultipleElementsArray();
        System.out.println(""All tests passed successfully."");
    }

    private static void testNullInput() {
        Integer[] digits = null;
        assert MaxFinder.max(digits) == null : ""Given null input, When max method is called, Then it should return null"";
        System.out.println(""Test for null input passed"");
    }

    private static void testEmptyArray() {
        Integer[] digits = {};
        assert MaxFinder.max(digits) == null : ""Given empty array, When max method is called, Then it should return null"";
        System.out.println(""Test for empty array passed"");
    }

    private static void testSingleElementArray() {
        Integer[] digits = {5};
        assert MaxFinder.max(digits) == 5 : ""Given single element array, When max method is called, Then it should return the element itself"";
        System.out.println(""Test for single element array passed"");
    }

    private static void testMultipleElementsArray() {
        Integer[] digits = {5, 3, 9, 1, 7};
        assert MaxFinder.max(digits) == 9 : ""Given multiple elements array, When max method is called, Then it should return the maximum element"";
        System.out.println(""Test for multiple elements array passed"");
    }
}


"
xRCRdh9a,modem_port_register,Zeehao,Lua,Thursday 29th of February 2024 06:39:21 PM CDT,"local event = require(""event"")

local modem_port_event = {
    registered_port = {}
}

function modem_port_event.register_port(port, callback) 
    modem_port_event.registered_port[tostring(port)] = callback
end

function modem_port_event.unregister_port(port) 
    modem_port_event.registered_port[tostring(port)] = nil
end

modem_port_event.event_id = event.listen(""modem_message"", function( _, _, from, port, _, message) 
    local callback = modem_port_event.registered_port[tostring(port)]
    if callback then 
        callback( _, _, from, port, _, message)
    end
end)

return modem_port_event
"
VW6My4Xw,tijo2,Rementai,Java,Thursday 29th of February 2024 06:31:36 PM CDT,"PRIME CHECKER

// Main.java
public class Main {
    public static void main(String[] args) {

        System.out.println(""Is 97 prime? "" + PrimeChecker.isPrime(97));
        System.out.println(""Is 12 prime? "" + PrimeChecker.isPrime(12));

        System.out.println("""");

        ShoppingCartTest.main(null);

    }
}

=============================================================================
-----------------------------------------------------------------------------
=============================================================================

// PrimeChecker.java
public class PrimeChecker {
    public static boolean isPrime(Integer digit) {
        if (digit == null || digit <= 1) {
            return false;
        }
        for (int i = 2; i <= Math.sqrt(digit); i++) {
            if (digit % i == 0) {
                return false;
            }
        }
        return true;
    }
}

=============================================================================
-----------------------------------------------------------------------------
=============================================================================

// PrimeCheckerTest.java
public class PrimeCheckerTest {

    public static void main(String[] args) {
        testNullInput();
        testNegativeInput();
        testZeroInput();
        testOneInput();
        testPrimeInput();
        testLargePrimeInput();
        testCompositeInput();
    }

    public static void testNullInput() {
        Integer input = null;
        boolean result = PrimeChecker.isPrime(input);
        assert !result : ""Failed: Null input should return false"";
    }

    public static void testNegativeInput() {
        Integer input = -10;
        boolean result = PrimeChecker.isPrime(input);
        assert !result : ""Failed: Negative input should return false"";
    }

    public static void testZeroInput() {
        Integer input = 0;
        boolean result = PrimeChecker.isPrime(input);
        assert !result : ""Failed: Zero input should return false"";
    }

    public static void testOneInput() {
        Integer input = 1;
        boolean result = PrimeChecker.isPrime(input);
        assert !result : ""Failed: One input should return false"";
    }

    public static void testPrimeInput() {
        Integer input = 2;
        boolean result = PrimeChecker.isPrime(input);
        assert result : ""Failed: Prime input should return true"";
    }

    public static void testLargePrimeInput() {
        Integer input = 97;
        boolean result = PrimeChecker.isPrime(input);
        assert result : ""Failed: Large prime input should return true"";
    }

    public static void testCompositeInput() {
        Integer input = 10;
        boolean result = PrimeChecker.isPrime(input);
        assert !result : ""Failed: Composite input should return false"";
    }
}







KOSZYK ZAKUPOWY


// ShoppingCartTest.java
import java.util.List;

public class ShoppingCartTest {
    public static void main(String[] args) {
        testAddProduct();
        testRemoveProduct();
        testUpdateQuantity();
        testGetProducts();
        testGetTotalPrice();
        testApplyDiscountCode();
        testCheckout();
        System.out.println(""All tests passed successfully."");
    }

    private static void testAddProduct() {
        ShoppingCart shoppingCart = new ShoppingCart();
        boolean result = shoppingCart.addProduct(""Product1"", 10.0, 2);
        // Assert
        assert result == true : ""testAddProduct failed"";
        System.out.println(""testAddProduct passed"");
    }

    private static void testRemoveProduct() {
        ShoppingCart shoppingCart = new ShoppingCart();
        shoppingCart.addProduct(""Product1"", 10.0, 2);
        boolean result = shoppingCart.removeProduct(""Product1"");
        // Assert
        assert result == true : ""testRemoveProduct failed"";
        System.out.println(""testRemoveProduct passed"");
    }

    private static void testUpdateQuantity() {
        ShoppingCart shoppingCart = new ShoppingCart();
        shoppingCart.addProduct(""Product1"", 10.0, 2);
        boolean result = shoppingCart.updateQuantity(""Product1"", 3);
        // Assert
        assert result == true : ""testUpdateQuantity failed"";
        System.out.println(""testUpdateQuantity passed"");
    }

    private static void testGetProducts() {
        ShoppingCart shoppingCart = new ShoppingCart();
        shoppingCart.addProduct(""Product1"", 10.0, 2);
        List<String> products = shoppingCart.getProducts();
        // Assert
        assert products.size() == 1 && products.contains(""Product1"") : ""testGetProducts failed"";
        System.out.println(""testGetProducts passed"");
    }

    private static void testGetTotalPrice() {
        ShoppingCart shoppingCart = new ShoppingCart();
        shoppingCart.addProduct(""Product1"", 10.0, 2);
        double totalPrice = shoppingCart.getTotalPrice();
        // Assert
        assert totalPrice == 20.0 : ""testGetTotalPrice failed"";
        System.out.println(""testGetTotalPrice passed"");
    }


    private static void testApplyDiscountCode() {
        ShoppingCart shoppingCart = new ShoppingCart();
        boolean result = shoppingCart.applyDiscountCode(""DISCOUNT"");
        // Assert
        assert result == true : ""testApplyDiscountCode failed"";
        System.out.println(""testApplyDiscountCode passed"");
    }

    private static void testCheckout() {
        ShoppingCart shoppingCart = new ShoppingCart();
        boolean result = shoppingCart.checkout();
        // Assert
        assert result == true : ""testCheckout failed"";
        System.out.println(""testCheckout passed"");
    }
}

=============================================================================
-----------------------------------------------------------------------------
=============================================================================

// ShoppingCart.java
import java.util.ArrayList;
import java.util.List;

class ShoppingCart implements ShoppingCartOperation {
    private List<String> products = new ArrayList<>();
    private double totalPrice = 0.0;

    @Override
    public boolean addProduct(String productName, double price, int quantity) {
        products.add(productName);
        totalPrice += price * quantity;
        return true;
    }

    @Override
    public boolean removeProduct(String productName) {
        if (products.contains(productName)) {
            products.remove(productName);
            return true;
        }
        return false;
    }

    @Override
    public boolean updateQuantity(String productName, int newQuantity) {
        return true;
    }

    @Override
    public List<String> getProducts() {
        return products;
    }

    @Override
    public double getTotalPrice() {
        return totalPrice;
    }

    @Override
    public boolean applyDiscountCode(String discountCode) {
        return true;
    }

    @Override
    public boolean checkout() {
        System.out.println(""Zamówienie zrealizowane. Potwierdzenie zostanie wysłane na podany adres email."");
        return true;
    }
}

"
c7Z6UTZK,2024-02-29_stats.json,rdp_snitch,JSON,Thursday 29th of February 2024 06:18:30 PM CDT,"{
  ""ip"": {
    ""211.117.14.229"": 3,
    ""196.190.117.7"": 3,
    ""174.138.17.240"": 3,
    ""87.251.75.145"": 12,
    ""205.210.31.53"": 9,
    ""45.227.254.26"": 12,
    ""212.70.149.142"": 9,
    ""85.209.11.23"": 3,
    ""80.66.76.92"": 6,
    ""141.98.81.148"": 6,
    ""185.196.220.41"": 9,
    ""193.142.146.227"": 9,
    ""123.56.20.194"": 3,
    ""62.204.41.107"": 18,
    ""94.232.45.92"": 9,
    ""162.142.125.217"": 3,
    ""103.47.73.122"": 6,
    ""45.227.254.9"": 9,
    ""187.191.116.227"": 12,
    ""185.170.144.3"": 6,
    ""15.235.189.151"": 3,
    ""198.235.24.240"": 9,
    ""185.129.51.52"": 3,
    ""36.91.222.100"": 3,
    ""173.255.206.82"": 12,
    ""142.93.206.143"": 3,
    ""143.198.220.26"": 6,
    ""103.143.207.200"": 870,
    ""152.32.156.117"": 3,
    ""49.157.47.214"": 6,
    ""176.113.115.58"": 3,
    ""130.85.190.243"": 3,
    ""205.210.31.175"": 9,
    ""185.122.204.179"": 9,
    ""101.36.114.124"": 3,
    ""87.251.75.64"": 3,
    ""120.240.145.8"": 3,
    ""194.165.16.76"": 6,
    ""194.165.16.37"": 6,
    ""136.144.35.217"": 3,
    ""198.235.24.196"": 9
  },
  ""asn"": {
    ""AS9318"": 3,
    ""AS24757"": 3,
    ""AS14061"": 12,
    ""AS208091"": 21,
    ""AS396982"": 36,
    ""AS267784"": 21,
    ""AS204428"": 9,
    ""AS57523"": 12,
    ""AS209588"": 6,
    ""AS208046"": 18,
    ""AS37963"": 3,
    ""AS59425"": 18,
    ""AS212482"": 9,
    ""AS398324"": 3,
    ""AS133676"": 6,
    ""AS262545"": 12,
    ""AS197414"": 6,
    ""AS16276"": 3,
    ""AS200532"": 3,
    ""AS7713"": 3,
    ""AS63949"": 12,
    ""AS18403"": 870,
    ""AS135377"": 6,
    ""AS9658"": 6,
    ""AS57678"": 3,
    ""AS11131"": 3,
    ""AS56040"": 3,
    ""AS48721"": 12,
    ""AS396356"": 3
  },
  ""isp"": {
    ""SK Broadband Co Ltd"": 3,
    ""Ethiotelecom"": 3,
    ""DigitalOcean, LLC"": 12,
    ""Xhost Internet Solutions LP"": 36,
    ""Google LLC"": 36,
    ""Flyservers S.A."": 39,
    ""SS-Net"": 9,
    ""Chang Way Technologies Co. Limited"": 12,
    ""ColocationX Ltd."": 18,
    ""Hangzhou Alibaba Advertising Co"": 3,
    ""Horizon LLC"": 18,
    ""Censys, Inc."": 3,
    ""Precious netcom pvt ltd"": 6,
    ""Mandic S.A."": 12,
    ""OVH Singapore PTE. LTD"": 3,
    ""LLP \""Kompaniya Hoster.KZ\"""": 3,
    ""PT Telekomunikasi Indonesia"": 3,
    ""Akamai Technologies, Inc."": 12,
    ""Vietnam Internet Network Information Center"": 870,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 6,
    ""Eastern Telecommunications Philippines, Inc."": 6,
    ""Cat Technologies Co. Limited"": 3,
    ""University of Maryland Baltimore County"": 3,
    ""China Mobile communications corporation"": 3,
    ""Latitude.sh"": 3
  },
  ""org"": {
    ""SK Broadband Co Ltd"": 3,
    ""Unknown"": 3,
    ""DigitalOcean, LLC"": 12,
    ""Xhost Internet Solutions"": 21,
    ""Palo Alto Networks, Inc"": 36,
    ""UAB Host Baltic"": 21,
    ""4Media Ltd"": 9,
    ""Chang Way Technologies Co. Limited"": 3,
    ""Flyservers S.A"": 18,
    ""Makut Investments"": 9,
    ""ColocationX Ltd"": 9,
    ""Aliyun Computing Co., LTD"": 3,
    ""Horizon LLC"": 18,
    ""Dmitriy Panchenko"": 9,
    ""Censys Inc"": 3,
    ""Gstech Software Systems Pvt Ltd"": 6,
    ""Mandic S.A"": 12,
    ""Xhostis"": 6,
    ""Patrice, Auffret"": 3,
    ""Hosterkz Network"": 3,
    ""Telekomunikasi Indonesia"": 3,
    ""Linode"": 12,
    ""Everest Global Joint Stock Company"": 870,
    ""Ucloud Information Technology (hk) Limited"": 6,
    ""DSL Network"": 6,
    ""Cat Technologies Co. Limited"": 3,
    ""University of Maryland Baltimore County"": 3,
    ""Starcrecium Limited"": 9,
    ""China Mobile"": 3,
    ""Panq B.V"": 3
  },
  ""regionName"": {
    ""Incheon"": 3,
    ""Addis Ababa"": 3,
    ""South West"": 9,
    ""North Holland"": 36,
    ""California"": 36,
    ""Vilnius"": 21,
    ""Plovdiv"": 9,
    ""Moscow"": 33,
    ""Drenthe"": 6,
    ""Virginia"": 9,
    ""Beijing"": 3,
    ""Perm Krai"": 9,
    ""Michigan"": 3,
    ""National Capital Territory of Delhi"": 6,
    ""Sao Paulo"": 12,
    ""North West"": 3,
    ""Karaganda"": 3,
    ""Jakarta"": 3,
    ""Texas"": 12,
    ""New Jersey"": 6,
    ""Hanoi"": 870,
    ""Maharashtra"": 3,
    ""Metro Manila"": 6,
    ""Maryland"": 3,
    ""Seoul"": 3,
    ""Guangdong"": 3,
    ""Kaunas"": 12
  },
  ""country"": {
    ""South Korea"": 6,
    ""Ethiopia"": 3,
    ""Singapore"": 12,
    ""The Netherlands"": 42,
    ""United States"": 69,
    ""Lithuania"": 33,
    ""Bulgaria"": 9,
    ""Russia"": 42,
    ""China"": 6,
    ""India"": 9,
    ""Brazil"": 12,
    ""Kazakhstan"": 3,
    ""Indonesia"": 3,
    ""Vietnam"": 870,
    ""Philippines"": 6
  },
  ""account"": {
    ""(empty)"": 12,
    ""Test"": 42,
    ""hello"": 906,
    ""Administr"": 63,
    ""tAGzHuhjj"": 3,
    ""MEYMac"": 3,
    ""FKpdTr"": 3,
    ""Domain"": 39,
    ""Administrator"": 9,
    ""WDLhNieRX"": 3,
    ""rxlqNM"": 3,
    ""TQMKAM"": 3,
    ""fvlmf2qr"": 12,
    ""beio"": 3,
    ""IIZIkMA"": 3,
    ""aXQDnYsnH"": 3,
    ""hhWCiL"": 3,
    ""RZrIPt"": 3,
    ""oJcQMQbqT"": 3,
    ""EMppHB"": 3,
    ""WtyWgi"": 3
  },
  ""keyboard"": {
    ""Unknown"": 1125
  },
  ""client_build"": {
    ""Unknown"": 1125
  },
  ""client_name"": {
    ""Unknown"": 1125
  },
  ""ip_type"": {
    ""Unknown"": 1005,
    ""hosting & proxy"": 9,
    ""hosting"": 78,
    ""proxy"": 21,
    ""mobile"": 12
  }
}"
690P6EQm,2024-02-29_stats.json,rdp_snitch,JSON,Thursday 29th of February 2024 06:16:17 PM CDT,"{
  ""ip"": {
    ""211.117.14.229"": 2,
    ""196.190.117.7"": 2,
    ""174.138.17.240"": 2,
    ""87.251.75.145"": 8,
    ""205.210.31.53"": 6,
    ""45.227.254.26"": 8,
    ""212.70.149.142"": 6,
    ""85.209.11.23"": 2,
    ""80.66.76.92"": 4,
    ""141.98.81.148"": 4,
    ""185.196.220.41"": 6,
    ""193.142.146.227"": 6,
    ""123.56.20.194"": 2,
    ""62.204.41.107"": 12,
    ""94.232.45.92"": 6,
    ""162.142.125.217"": 2,
    ""103.47.73.122"": 4,
    ""45.227.254.9"": 6,
    ""187.191.116.227"": 8,
    ""185.170.144.3"": 4,
    ""15.235.189.151"": 2,
    ""198.235.24.240"": 6,
    ""185.129.51.52"": 2,
    ""36.91.222.100"": 2,
    ""173.255.206.82"": 8,
    ""142.93.206.143"": 2,
    ""143.198.220.26"": 4,
    ""103.143.207.200"": 580,
    ""152.32.156.117"": 2,
    ""49.157.47.214"": 4,
    ""176.113.115.58"": 2,
    ""130.85.190.243"": 2,
    ""205.210.31.175"": 6,
    ""185.122.204.179"": 6,
    ""101.36.114.124"": 2,
    ""87.251.75.64"": 2,
    ""120.240.145.8"": 2,
    ""194.165.16.76"": 4,
    ""194.165.16.37"": 4,
    ""136.144.35.217"": 2,
    ""198.235.24.196"": 6
  },
  ""asn"": {
    ""AS9318"": 2,
    ""AS24757"": 2,
    ""AS14061"": 8,
    ""AS208091"": 14,
    ""AS396982"": 24,
    ""AS267784"": 14,
    ""AS204428"": 6,
    ""AS57523"": 8,
    ""AS209588"": 4,
    ""AS208046"": 12,
    ""AS37963"": 2,
    ""AS59425"": 12,
    ""AS212482"": 6,
    ""AS398324"": 2,
    ""AS133676"": 4,
    ""AS262545"": 8,
    ""AS197414"": 4,
    ""AS16276"": 2,
    ""AS200532"": 2,
    ""AS7713"": 2,
    ""AS63949"": 8,
    ""AS18403"": 580,
    ""AS135377"": 4,
    ""AS9658"": 4,
    ""AS57678"": 2,
    ""AS11131"": 2,
    ""AS56040"": 2,
    ""AS48721"": 8,
    ""AS396356"": 2
  },
  ""isp"": {
    ""SK Broadband Co Ltd"": 2,
    ""Ethiotelecom"": 2,
    ""DigitalOcean, LLC"": 8,
    ""Xhost Internet Solutions LP"": 24,
    ""Google LLC"": 24,
    ""Flyservers S.A."": 26,
    ""SS-Net"": 6,
    ""Chang Way Technologies Co. Limited"": 8,
    ""ColocationX Ltd."": 12,
    ""Hangzhou Alibaba Advertising Co"": 2,
    ""Horizon LLC"": 12,
    ""Censys, Inc."": 2,
    ""Precious netcom pvt ltd"": 4,
    ""Mandic S.A."": 8,
    ""OVH Singapore PTE. LTD"": 2,
    ""LLP \""Kompaniya Hoster.KZ\"""": 2,
    ""PT Telekomunikasi Indonesia"": 2,
    ""Akamai Technologies, Inc."": 8,
    ""Vietnam Internet Network Information Center"": 580,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 4,
    ""Eastern Telecommunications Philippines, Inc."": 4,
    ""Cat Technologies Co. Limited"": 2,
    ""University of Maryland Baltimore County"": 2,
    ""China Mobile communications corporation"": 2,
    ""Latitude.sh"": 2
  },
  ""org"": {
    ""SK Broadband Co Ltd"": 2,
    ""Unknown"": 2,
    ""DigitalOcean, LLC"": 8,
    ""Xhost Internet Solutions"": 14,
    ""Palo Alto Networks, Inc"": 24,
    ""UAB Host Baltic"": 14,
    ""4Media Ltd"": 6,
    ""Chang Way Technologies Co. Limited"": 2,
    ""Flyservers S.A"": 12,
    ""Makut Investments"": 6,
    ""ColocationX Ltd"": 6,
    ""Aliyun Computing Co., LTD"": 2,
    ""Horizon LLC"": 12,
    ""Dmitriy Panchenko"": 6,
    ""Censys Inc"": 2,
    ""Gstech Software Systems Pvt Ltd"": 4,
    ""Mandic S.A"": 8,
    ""Xhostis"": 4,
    ""Patrice, Auffret"": 2,
    ""Hosterkz Network"": 2,
    ""Telekomunikasi Indonesia"": 2,
    ""Linode"": 8,
    ""Everest Global Joint Stock Company"": 580,
    ""Ucloud Information Technology (hk) Limited"": 4,
    ""DSL Network"": 4,
    ""Cat Technologies Co. Limited"": 2,
    ""University of Maryland Baltimore County"": 2,
    ""Starcrecium Limited"": 6,
    ""China Mobile"": 2,
    ""Panq B.V"": 2
  },
  ""regionName"": {
    ""Incheon"": 2,
    ""Addis Ababa"": 2,
    ""South West"": 6,
    ""North Holland"": 24,
    ""California"": 24,
    ""Vilnius"": 14,
    ""Plovdiv"": 6,
    ""Moscow"": 22,
    ""Drenthe"": 4,
    ""Virginia"": 6,
    ""Beijing"": 2,
    ""Perm Krai"": 6,
    ""Michigan"": 2,
    ""National Capital Territory of Delhi"": 4,
    ""Sao Paulo"": 8,
    ""North West"": 2,
    ""Karaganda"": 2,
    ""Jakarta"": 2,
    ""Texas"": 8,
    ""New Jersey"": 4,
    ""Hanoi"": 580,
    ""Maharashtra"": 2,
    ""Metro Manila"": 4,
    ""Maryland"": 2,
    ""Seoul"": 2,
    ""Guangdong"": 2,
    ""Kaunas"": 8
  },
  ""country"": {
    ""South Korea"": 4,
    ""Ethiopia"": 2,
    ""Singapore"": 8,
    ""The Netherlands"": 28,
    ""United States"": 46,
    ""Lithuania"": 22,
    ""Bulgaria"": 6,
    ""Russia"": 28,
    ""China"": 4,
    ""India"": 6,
    ""Brazil"": 8,
    ""Kazakhstan"": 2,
    ""Indonesia"": 2,
    ""Vietnam"": 580,
    ""Philippines"": 4
  },
  ""account"": {
    ""(empty)"": 8,
    ""Test"": 28,
    ""hello"": 604,
    ""Administr"": 42,
    ""tAGzHuhjj"": 2,
    ""MEYMac"": 2,
    ""FKpdTr"": 2,
    ""Domain"": 26,
    ""Administrator"": 6,
    ""WDLhNieRX"": 2,
    ""rxlqNM"": 2,
    ""TQMKAM"": 2,
    ""fvlmf2qr"": 8,
    ""beio"": 2,
    ""IIZIkMA"": 2,
    ""aXQDnYsnH"": 2,
    ""hhWCiL"": 2,
    ""RZrIPt"": 2,
    ""oJcQMQbqT"": 2,
    ""EMppHB"": 2,
    ""WtyWgi"": 2
  },
  ""keyboard"": {
    ""Unknown"": 750
  },
  ""client_build"": {
    ""Unknown"": 750
  },
  ""client_name"": {
    ""Unknown"": 750
  },
  ""ip_type"": {
    ""Unknown"": 670,
    ""hosting & proxy"": 6,
    ""hosting"": 52,
    ""proxy"": 14,
    ""mobile"": 8
  }
}"
Uj7a6E4F,2024-02-29_stats.json,rdp_snitch,JSON,Thursday 29th of February 2024 06:15:09 PM CDT,"{
  ""ip"": {
    ""211.117.14.229"": 1,
    ""196.190.117.7"": 1,
    ""174.138.17.240"": 1,
    ""87.251.75.145"": 4,
    ""205.210.31.53"": 3,
    ""45.227.254.26"": 4,
    ""212.70.149.142"": 3,
    ""85.209.11.23"": 1,
    ""80.66.76.92"": 2,
    ""141.98.81.148"": 2,
    ""185.196.220.41"": 3,
    ""193.142.146.227"": 3,
    ""123.56.20.194"": 1,
    ""62.204.41.107"": 6,
    ""94.232.45.92"": 3,
    ""162.142.125.217"": 1,
    ""103.47.73.122"": 2,
    ""45.227.254.9"": 3,
    ""187.191.116.227"": 4,
    ""185.170.144.3"": 2,
    ""15.235.189.151"": 1,
    ""198.235.24.240"": 3,
    ""185.129.51.52"": 1,
    ""36.91.222.100"": 1,
    ""173.255.206.82"": 4,
    ""142.93.206.143"": 1,
    ""143.198.220.26"": 2,
    ""103.143.207.200"": 290,
    ""152.32.156.117"": 1,
    ""49.157.47.214"": 2,
    ""176.113.115.58"": 1,
    ""130.85.190.243"": 1,
    ""205.210.31.175"": 3,
    ""185.122.204.179"": 3,
    ""101.36.114.124"": 1,
    ""87.251.75.64"": 1,
    ""120.240.145.8"": 1,
    ""194.165.16.76"": 2,
    ""194.165.16.37"": 2,
    ""136.144.35.217"": 1,
    ""198.235.24.196"": 3
  },
  ""asn"": {
    ""AS9318"": 1,
    ""AS24757"": 1,
    ""AS14061"": 4,
    ""AS208091"": 7,
    ""AS396982"": 12,
    ""AS267784"": 7,
    ""AS204428"": 3,
    ""AS57523"": 4,
    ""AS209588"": 2,
    ""AS208046"": 6,
    ""AS37963"": 1,
    ""AS59425"": 6,
    ""AS212482"": 3,
    ""AS398324"": 1,
    ""AS133676"": 2,
    ""AS262545"": 4,
    ""AS197414"": 2,
    ""AS16276"": 1,
    ""AS200532"": 1,
    ""AS7713"": 1,
    ""AS63949"": 4,
    ""AS18403"": 290,
    ""AS135377"": 2,
    ""AS9658"": 2,
    ""AS57678"": 1,
    ""AS11131"": 1,
    ""AS56040"": 1,
    ""AS48721"": 4,
    ""AS396356"": 1
  },
  ""isp"": {
    ""SK Broadband Co Ltd"": 1,
    ""Ethiotelecom"": 1,
    ""DigitalOcean, LLC"": 4,
    ""Xhost Internet Solutions LP"": 12,
    ""Google LLC"": 12,
    ""Flyservers S.A."": 13,
    ""SS-Net"": 3,
    ""Chang Way Technologies Co. Limited"": 4,
    ""ColocationX Ltd."": 6,
    ""Hangzhou Alibaba Advertising Co"": 1,
    ""Horizon LLC"": 6,
    ""Censys, Inc."": 1,
    ""Precious netcom pvt ltd"": 2,
    ""Mandic S.A."": 4,
    ""OVH Singapore PTE. LTD"": 1,
    ""LLP \""Kompaniya Hoster.KZ\"""": 1,
    ""PT Telekomunikasi Indonesia"": 1,
    ""Akamai Technologies, Inc."": 4,
    ""Vietnam Internet Network Information Center"": 290,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Eastern Telecommunications Philippines, Inc."": 2,
    ""Cat Technologies Co. Limited"": 1,
    ""University of Maryland Baltimore County"": 1,
    ""China Mobile communications corporation"": 1,
    ""Latitude.sh"": 1
  },
  ""org"": {
    ""SK Broadband Co Ltd"": 1,
    ""Unknown"": 1,
    ""DigitalOcean, LLC"": 4,
    ""Xhost Internet Solutions"": 7,
    ""Palo Alto Networks, Inc"": 12,
    ""UAB Host Baltic"": 7,
    ""4Media Ltd"": 3,
    ""Chang Way Technologies Co. Limited"": 1,
    ""Flyservers S.A"": 6,
    ""Makut Investments"": 3,
    ""ColocationX Ltd"": 3,
    ""Aliyun Computing Co., LTD"": 1,
    ""Horizon LLC"": 6,
    ""Dmitriy Panchenko"": 3,
    ""Censys Inc"": 1,
    ""Gstech Software Systems Pvt Ltd"": 2,
    ""Mandic S.A"": 4,
    ""Xhostis"": 2,
    ""Patrice, Auffret"": 1,
    ""Hosterkz Network"": 1,
    ""Telekomunikasi Indonesia"": 1,
    ""Linode"": 4,
    ""Everest Global Joint Stock Company"": 290,
    ""Ucloud Information Technology (hk) Limited"": 2,
    ""DSL Network"": 2,
    ""Cat Technologies Co. Limited"": 1,
    ""University of Maryland Baltimore County"": 1,
    ""Starcrecium Limited"": 3,
    ""China Mobile"": 1,
    ""Panq B.V"": 1
  },
  ""regionName"": {
    ""Incheon"": 1,
    ""Addis Ababa"": 1,
    ""South West"": 3,
    ""North Holland"": 12,
    ""California"": 12,
    ""Vilnius"": 7,
    ""Plovdiv"": 3,
    ""Moscow"": 11,
    ""Drenthe"": 2,
    ""Virginia"": 3,
    ""Beijing"": 1,
    ""Perm Krai"": 3,
    ""Michigan"": 1,
    ""National Capital Territory of Delhi"": 2,
    ""Sao Paulo"": 4,
    ""North West"": 1,
    ""Karaganda"": 1,
    ""Jakarta"": 1,
    ""Texas"": 4,
    ""New Jersey"": 2,
    ""Hanoi"": 290,
    ""Maharashtra"": 1,
    ""Metro Manila"": 2,
    ""Maryland"": 1,
    ""Seoul"": 1,
    ""Guangdong"": 1,
    ""Kaunas"": 4
  },
  ""country"": {
    ""South Korea"": 2,
    ""Ethiopia"": 1,
    ""Singapore"": 4,
    ""The Netherlands"": 14,
    ""United States"": 23,
    ""Lithuania"": 11,
    ""Bulgaria"": 3,
    ""Russia"": 14,
    ""China"": 2,
    ""India"": 3,
    ""Brazil"": 4,
    ""Kazakhstan"": 1,
    ""Indonesia"": 1,
    ""Vietnam"": 290,
    ""Philippines"": 2
  },
  ""account"": {
    ""(empty)"": 4,
    ""Test"": 14,
    ""hello"": 302,
    ""Administr"": 21,
    ""tAGzHuhjj"": 1,
    ""MEYMac"": 1,
    ""FKpdTr"": 1,
    ""Domain"": 13,
    ""Administrator"": 3,
    ""WDLhNieRX"": 1,
    ""rxlqNM"": 1,
    ""TQMKAM"": 1,
    ""fvlmf2qr"": 4,
    ""beio"": 1,
    ""IIZIkMA"": 1,
    ""aXQDnYsnH"": 1,
    ""hhWCiL"": 1,
    ""RZrIPt"": 1,
    ""oJcQMQbqT"": 1,
    ""EMppHB"": 1,
    ""WtyWgi"": 1
  },
  ""keyboard"": {
    ""Unknown"": 375
  },
  ""client_build"": {
    ""Unknown"": 375
  },
  ""client_name"": {
    ""Unknown"": 375
  },
  ""ip_type"": {
    ""Unknown"": 335,
    ""hosting & proxy"": 3,
    ""hosting"": 26,
    ""proxy"": 7,
    ""mobile"": 4
  }
}"
