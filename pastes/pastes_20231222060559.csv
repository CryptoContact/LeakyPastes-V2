id,title,username,language,date,content
2wbPqAxm,Linux. Unzip all archives in separate (own) folder,sytchenko,Bash,Friday 22nd of December 2023 12:00:17 AM CDT,"find . -name '*.zip' -exec sh -c 'unzip -d ""${1%.*}"" ""$1""' _ {} \;"
1mm8Zdiq,BTC Wallet Credentials have been reset,VQ-Moe,GetText,Thursday 21st of December 2023 11:53:48 PM CDT,"Dear Moe,
We have received a request to reset the login information for your Bitcoin wallet. If you did not make this request, please contact us immediately.

Your new login credentials will be 
chefman440:Jmh3x9ZB on 149.28.231.183
You can connect via SSH.

Regards,
GM-585844"
ZRNZq55b,fgdrjdrj,gadungw71,PHP,Thursday 21st of December 2023 11:32:45 PM CDT,"•	https://gamma.app/public/HD-2-Aquaman-2-2023-315gnstthx036w4
•	https://gamma.app/public/TH-2-2023-Aquaman-2-the-Lost-Kingdom-M-THAI-HD-09i5pm3ejx2kqzu
•	https://gamma.app/public/4-Kings-II-4-2-2023-1080p-eu9k419zhbagjuw
•	https://gamma.app/public/4-Kings-II-2023-4Kings-2-M-THAI-HD-tx0o0zmdvp3jgyd
•	https://github.com/apps/aquaman2fullhdthai4k
•	https://github.com/apps/watch4kings2fullhdthai4k
•	https://gist.github.com/4kings2full/5e25afd8bfe8ed81e8d1759581ae4175
•	https://groups.google.com/g/--2-aquaman-2--2023----hd/c/25YAH383etA
•	https://groups.google.com/g/ibm.software.network.directory-integrator/c/P4Pa7TajIWI
•	https://groups.google.com/a/chromium.org/g/chromium-reviews/c/iI8iKieeSCI
•	https://groups.google.com/g/-4-kings-ii-2023--4kings--2--hd/c/y4G72kVaghU
•	https://groups.google.com/g/ibm.software.network.directory-integrator/c/Quhml5UxUtM
•	https://groups.google.com/g/ibm.software.network.directory-integrator/c/jlWsHZX8j4U
•	https://vk.com/@movpcinemark-2-aquaman-2-2023-hd-1080p
•	https://vk.com/@692487455-sub-thai-2023
•	https://vk.com/@simonamarkova-2-2023-hd-1080thai
•	https://baskadia.com/post/1v16i
•	https://baskadia.com/post/1v1us
•	https://baskadia.com/post/1vgzv
v"
ZctxqsRH,G2A.com Refund Exploit Dec 2023,G2ARefundExploit,GetText,Thursday 21st of December 2023 10:43:01 PM CDT,"G2A refund exploit updated guide - any item for free on G2A.com

https://drive.google.com/file/d/1AKxSk9vs38aBF7GEDJxf8mNi-_NVRLQ9/view#g2a_refund_exploit.pdf

Working as of 
21 December 2023

516638"
Rn7C0735,# tk_ink_blotches.py,here2share,Python,Thursday 21st of December 2023 10:30:41 PM CDT,"# tk_ink_blotches.py

import tkinter as tk
import random
from PIL import Image, ImageTk, ImageFilter

ww = 512
hh = 512

root = tk.Tk()
root.title(""tk_ink_blotches"")
root.geometry(""%dx%d+%d+%d"" %(ww, hh, 10, 10))

canvas = tk.Canvas(root, width=ww, height=hh)
canvas.pack()

def apply_blur(image, radius):
    return image.filter(ImageFilter.GaussianBlur(radius))

def apply_sharpen(image, factor):
    return image.filter(ImageFilter.UnsharpMask(factor))

def generate(event=None):
	for size in layers:
		interpolate(size)
	draw()

def interpolate(size):
	img = Image.new(""RGBA"", (size, size))
	pixels = img.load()
	for y in range(size):
		for x in range(size):
			red = random.randint(0, 255)
			green = random.randint(0, 255)
			blue = random.randint(0, 255)
			pixels[x, y] = (red, green, blue, 255)
	img = img.resize((ww, hh))
	layers[size] = img

def draw(event=None):
	buffer = Image.new(""RGBA"", (ww, hh), (255, 255, 255, 255))
	for size, layer_image in layers.items():
		if size != 4:
			alpha = (float(opacity_slider[size].get()) + 512) / 2056.0
		else:
			alpha = 1
		buffer = Image.blend(buffer, layer_image, alpha)
	
	pixel_data = [(0, 0, 0, 255) if sum(pixel) % 128 < 64 else (255, 255, 255, 255) for pixel in buffer.getdata()]
	contour_layer = Image.new(""RGBA"", (ww, hh))
	contour_layer.putdata(pixel_data)
	
	contour_layer = apply_blur(contour_layer, 2.5)
	contour_layer = apply_sharpen(contour_layer, 25)
	
	photo = ImageTk.PhotoImage(contour_layer)
	canvas.create_image(0, 0, anchor=tk.NW, image=photo)
	canvas.image = photo

opacity_label = tk.Toplevel(root)
opacity_title = tk.Label(opacity_label, text=""Spacebar To Randomize"")
opacity_title.pack()
opacity_slider = {}
layers = {}

size = 4
interpolate(size)
sizes = []
sizes += [size]
while size + 6 < 18:
	size += 7
	sizes += [size]
	opacity_slider[size] = tk.Scale(opacity_label, from_=512, to=0, orient=tk.VERTICAL, label='', command=draw)
	opacity_slider[size].pack(side=tk.LEFT, fill='both', expand=True)
	opacity_slider[size].set(5)
	interpolate(size)

opacity_slider[sizes[1]].set(300)
opacity_slider[sizes[2]].set(300)

canvas.update()
t = opacity_label.winfo_width()
opacity_label.geometry(""%dx300+%d+%d"" %(t+20, 50, 50))
for t in (root, opacity_label):
	t.bind(""<space>"", generate)
opacity_label.wm_transient(root)

draw()
root.mainloop()"
s4MRXfLy,AoC 2023 day 20 (Smalltalk),musifter,Smalltalk,Thursday 21st of December 2023 10:10:31 PM CDT,"#!/usr/local/bin/gst -q

Symbol extend [ value: arg [^arg perform: self] ]

""
|  Classes for circuit components
""
Object subclass: Gate [  "" Virtual parent class ""
    | out in |
    Gate class >> new  [ ^super new gateInit ]
    gateInit [ in := Set new. out := Set new. ^self ]

    addOuts: array  [ ^out := array asSet ]
    getOuts         [ ^out                ]
    addIn: name     [ ^in add: name       ]
    getIns          [ ^in                 ]

    pulse: level from: src  [ ^self NotImplemented ]
]

Gate subclass: FlipFlop  [
    | state |
    FlipFlop class >> new  [ ^(super new) init     ]
    init                   [ state := false. ^self ]

    setState: level [ ^state := level ]
    printOn: stream [ stream nextPutAll: ('FlipFlop (%1)' % {state}) ]

    pulse: level from: src [
        level ifFalse: [ ^state := state not ].
        ^nil
    ]
]

Gate subclass: NANDGate [
    NANDGate class >> new  [ ^(super new) init           ]
    init                   [ in := Dictionary new. ^self ]

    printOn: stream [ stream nextPutAll: ('NANDGate (%1)' % {in}) ]

    addIn: name  [ ^in at: name put: false ]
    getIns       [ ^in keys                ]

    pulse: level from: src [
        in at: src put: level.
        ^(in values inject: true into: [:a :b | a & b]) not
    ]
]

""
| Mainline
""
input := stdin contents lines collect: [:line | line subStrings: '-> ,' ].

"" Read in circuit making forward links: ""
circuit := Dictionary new.
input do: [ :line |
    | gate name |
    (line first = 'broadcaster') ifTrue: [
        gate := circuit at: #broadcaster put: FlipFlop new.

    ] ifFalse: [
        name := line first allButFirst asSymbol.
        (line first first = $%) ifTrue: [
            gate := circuit at: name put: FlipFlop new.
        ] ifFalse: [
            gate := circuit at: name put: NANDGate new.
        ]
    ].

    gate addOuts: (line allButFirst collect: #asSymbol).
].

"" Add back links: ""
circuit keys do: [ :src |
    (circuit at: src) getOuts do: [ :dest |
        | gate |
        gate := circuit at: dest ifAbsent: [circuit at: dest put: FlipFlop new].
        gate ifNotNil: [ gate addIn: src ]
    ]
].

pulses := Bag new.

collectors := (circuit at: ((circuit at: #rx) getIns anyOne)) getIns.
cycle := OrderedCollection new.

"" Run machine: ""
(1 to: 4096) do: [ :press |
    ((press \\ 100) = 0) ifTrue: [
        stderr nextPutAll: ('Press: %1' % {press}) displayString; cr; flush.
    ].

    (circuit at: #broadcaster) setState: true.
    queue := OrderedCollection with: {false. #button. #broadcaster}.

    [queue isEmpty] whileFalse: [
        signal := queue removeFirst.
        level := signal first.
        src   := signal second.
        curr  := signal third.

        ""('%1 -%<high|low>2-> %3' % {src. level. curr}) displayNl.""
        pulses add: level.

        send := (circuit at: curr) pulse: level from: src.

        ((collectors includes: curr) and: [send]) ifTrue: [cycle add: press].

        send ifNotNil: [
            outs := (circuit at: curr) getOuts.
            queue addAll: (outs collect: [:next | {send. curr. next}])
        ]
    ].

    (press = 1000) ifTrue: [
        part1 := (pulses occurrencesOf: true) * (pulses occurrencesOf: false).
        ('Part 1: %1' % {part1}) displayNl.
    ].
].

part2 := cycle fold: [:a :b | a lcm: b].
('Part 2: %1' % {part2}) displayNl."
nDkah4P9,Battle NPC,GoodNoodle,C#,Thursday 21st of December 2023 10:03:24 PM CDT,"using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Rendering;

public class BattleNpcMove : MonoBehaviour
{

    public bool shouldRotate;

    public Creature creature;

    public float checkRadius, attackRadius;

    public float speed;

    public LayerMask whatLayer;

    private Transform target;

    public CharecterAnimator anim;

    private Rigidbody2D therb;

    private Vector2 movement;

    public Vector3 dir;

    private bool isInChaseRange, isInAttackRange;

    
    // Start is called before the first frame update
    void Start()
    {
        therb= GetComponent<Rigidbody2D>();

        anim= GetComponent<CharecterAnimator>();

        target = GameObject.FindWithTag(""NpcAlly"").transform;


        creature = GetComponentInParent<Party>().creatures[0];
    }

    // Update is called once per frame
    void Update()
    {

        isInChaseRange = Physics2D.OverlapCircle(transform.position, checkRadius, whatLayer);
        isInAttackRange = Physics2D.OverlapCircle(transform.position, attackRadius, whatLayer);

        dir = target.position - transform.position;

        float angle = Mathf.Atan2(dir.y,dir.x) * Mathf.Rad2Deg;
        dir.Normalize();
        movement = dir;
        if(shouldRotate)
        {

        }

        if (creature.HP == 0)
        {
            Destroy(this.gameObject);
        }
    }

    private void FixedUpdate()
    {
        if (isInChaseRange && !isInAttackRange)
        {
            MoveCharecter(movement);
        }

        if (isInAttackRange)
        {
            therb.velocity = Vector2.zero;
            StartCoroutine(Damage());
        }
    }
    private void MoveCharecter(Vector2 dir)
    {
        therb.MovePosition((Vector2)transform.position + (dir * speed * Time.deltaTime));
    }

    private IEnumerator Damage( )
    {    
            yield return new WaitForSeconds(0.5f);
            creature.DecreaseHP(creature.MaxHP / creature.MaxHP);
    }
}
"
1FvWYP10,Untitled,glados123123123123,C#,Thursday 21st of December 2023 09:27:31 PM CDT,"using HarmonyLib;
using GameNetcodeStuff;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UnityEngine.AI;
using UnityEngine;

namespace TombsMadnessMod.Patches
{
    [HarmonyPatch(typeof(StartOfRound))]
    internal class StartOfRoundPatch
    {
        [HarmonyPatch(""Start"")]
        [HarmonyPrefix]
        static void ForestGiantPatch(ref ForestGiantAI __instance)
        {
            
            if (__instance != null)
            {
                for (int i = 0; i < 101; i++)
                {
                    TombsMadnessModBase.mls.LogInfo(""StartOfRoundPatch Runninng ForestGiantPatch!!!"");
                }
            }
            else
            {
                for (int i = 0; i < 101; i++)
                {
                    TombsMadnessModBase.mls.LogInfo(""!!!lord do we have an issue here!!!"");
                }
            }
            GameObject testObject = LC_API.BundleAPI.BundleLoader.GetLoadedAsset<GameObject>(""testobject"");
            UnityEngine.Object.Instantiate(testObject);
            TombsMadnessModBase.mls.LogInfo(""here have a cube"");
            __instance.enemyType.canDie = true;
            __instance.agent.speed = 5000;
            __instance.enemyType.isDaytimeEnemy = true;
        }

    }
}
"
QRG8Kng4,Get List Of Files,Gabarito,JavaScript,Thursday 21st of December 2023 07:25:24 PM CDT,"// This script file can be executed with Alt+Shift+R after opening it in
// UltraEdit or UEStudio to use the function and get a list of files.

// === GetListOfFiles ========================================================

/* Script Name:   GetListOfFiles
   Creation Date: 2008-04-16
   Last Modified: 2018-11-14
   Copyright:     Copyright (c) 2018 by Mofi
   Original:      https://www.ultraedit.com/resources/scripts/GetListOfFiles.js
                  http://forums.ultraedit.com/viewtopic.php?f=52&t=5442

The function   GetListOfFiles   creates in an edit window a list of files
according to the arguments passed to the function. It uses the command
Find in Files   with advanced option   Results to edit window   for
creating the file list.

The return value of the function is   true   if a file list could be created
with at least one file name, otherwise   false   is returned by the function.

The new file with the file list is the active file and the caret is at top
of the file on success finding at least one file matching the criteria.

The function requires UltraEdit for Windows >= v13.10 or UEStudio >= v6.30.

Unicode file names are supported by UltraEdit for Windows >= v24.00 and
UEStudio >= v17.00. For former versions don't use this function on file names
containing a character not included in system code page for non-Unicode aware
applications and set value of variable   bNoUnicode   in the function below
to value   true   to get ANSI encoded file names.

The function expects 1 number, 2 strings and 1 boolean as input parameters:

  1) nFileList - is the number which specifies the kind of file list
                 to be created by the function.

     The possible values are:

        0 ... get list of files in a specified directory.
        1 ... get list of open files.
        2 ... get list of favorite files.
        3 ... get list of project files.
        4 ... get list of solution files (only supported by UEStudio).

     Value 0 is used by default if this parameter is not specified
     at all, or is not of type number, or contains a wrong number.

     The other three function parameters are evaluated only if 0 is used
     for the first function parameter and should be omitted on using 1-4.

  2) sDirectory - is the initial directory for the search.

     The current working directory "".\"" is used by the function if this
     string is empty and a search in a directory is set by first parameter.

     This parameter is ignored for all other file list types.

     The working directory is by default the directory active on start
     of UltraEdit/UEStudio. In the properties of a shortcut the working
     directory can be specified in the edit field named ""Start in"".

  3) sFileType - contains the file type specification like ""*.txt"" or
     ""ga*.htm;et*.htm"".

     This string is only used for the search in a specified directory.

     ""*"" is used by the function if this parameter is not correct specified.

  4) bSubDirs - is a boolean parameter which determines to find files only
     in the specified directory with value false, or also in subdirectories
     with value true.

     This boolean is only used for the search in a specified directory.

     The default value is false if the parameter is not correct specified.

NOTE:

An existing edit window from a previous Find in Files run is not closed
and therefore the results of the search for the file names are appended
to the existing content of the file. This makes it possible to run this
function multiple times with different values for the parameters to get
one large file list.

ATTENTION:

The first two strings in the function code below must be adapted to used
version of UE/UES if a localized version of UltraEdit or UEStudio is used
because otherwise the function does not work as designed. And the function
uses also a non-regular expression search and sets all find parameters as
needed for this search.

A debug message is shown by the function on an error condition if a global
variable named   g_nDebugMessage   exists and has the value 1 for debugging
to output window or 2 for debugging with message boxes. No debug messages
are displayed if there is no global variable with name g_nDebugMessage with
a valid value.

This function is copyright protected by Mofi for free usage by UE/UES
users. The author cannot be made responsible for any damage caused by
this function. You use it at your own risk.

HINT:

The list can be loaded into an array of file names with following code:

UltraEdit.activeDocument.selectAll();
var asFileNames = UltraEdit.activeDocument.selection.split(""\r\n"");
// Last element of array is usually an empty string because all file
// names in the list are terminated usually with a DOS line termination.
// This empty string is removed from the array. The number of file names
// is then equal the number of array elements (length property).
if (asFileNames[asFileNames.length-1] == """") asFileNames.pop();
// The results file with the list of file names is no longer needed
// when using now the file names in the array asFileNames.
UltraEdit.closeFile(UltraEdit.activeDocument.path,2);

The main script can use next a for loop to open a found file, modify
the opened file, save and close it, and continue with next file until
all files have been modified. Extra code is needed to make the already
opened file active instead of opening it if it is possible that some of
the files in the list are already opened. For details see on forum topic
http://forums.ultraedit.com/viewtopic.php?f=52&t=4596#p26710 the hint on
common mistake ""Opening a file already open from within script does not
result in reloading file content and making the file active"". */


function GetListOfFiles (nFileList, sDirectory, sFileType, bSubDirs)
{
   /* The summary info line at bottom of a Find in Files result depends
      on application language as also the name of the results file.
      Please adapt the following two strings to your version of UE/UES.

      Please click on ribbon tab ""Advanced"" or in menu ""Advanced"" on
      ""Settings"" or ""Configuration"", expand tree item ""Search"" and select
      item ""Find output format"" or ""Set Find Output Format"". The displayed
      configuration dialog contains the ""Find summary"" definition at bottom
      with the format string to assign below to variable sSummaryInfo.

      Even better is executing once the command ""Find in Files"" with an
      empty search string with advanced (gearwheel) option ""Results to
      edit window"" checked. The ""Find in Files"" floating window or docked
      view can be opened by

      a) pressing default hotkey Ctrl+Shift+F;
      b) clicking on ribbon tab ""Home"" in second group ""Search"" on
         last item ""Find/replace in files"" on using ribbon mode;
      c) clicking in menu ""Home"" on the menu item ""Find/replace in files""
         on using toolbar/menu mode with contemporary menus;
      d) clicking in menu ""Search"" on menu item ""Find/replace in files""
         respectively ""Find in Files"" on using toolbar/menu mode with
         traditional menus or UE < v23.00 respectively UES < v16.00.

      After running ""Find in Files"" with an empty search string listing
      with results written to an edit window with at least one file name
      in results window , look on file tab of results window and last
      line in results file and adapt the two strings below accordingly.

      It is also possible to just open GetListOfFiles.js and execute it with
      Alt+Shift+R to see how the find results look like in used version of
      UE/UES on having entered the parameters correct during script execution.

      Please note that variable sSummaryInfo must be initialized with
      an empty string on having disabled the ""Find summary"" completely. */

//   var sSummaryInfo = ""Search complete, found"";
   var sSummaryInfo = """";
   var sResultsDocTitle = ""** Find Results ** "";  // Note the space at end!

   // The default strings for German UltraEdit are:
   // var sSummaryInfo = ""Suche abgeschlossen, "";
   // var sResultsDocTitle = ""** Suchergebnisse ** "";

   /* Modify the value of this variable to true on using UltraEdit
      for Windows < v24.00 or UEStudio < v17.00 which do not support
      correct loading Unicode strings from Unicode files into memory. */
   var bNoUnicode = false;


   /* Determine the type of output for debug messages from the global
      variable g_nDebugMessage: 1 ... debug to output window, 2 ... debug
      to message dialog, all others ... no debug messages. A debug message
      is displayed with a popup message box like on using the value 2 if
      a global number variable g_nDebugMessage does not exist at all. */
   var nOutputType = (typeof(g_nDebugMessage) == ""number"") ? g_nDebugMessage : 2;
   if ((nOutputType < 1) || (nOutputType > 2)) nOutputType = 0;

   if (typeof(nFileList) != ""number"" || nFileList < 0 || nFileList > 4) nFileList = 0;

   if (!nFileList)      // Search in a specified directory?
   {
      // Use current working directory if no directory is specified.
      if ((typeof(sDirectory) != ""string"") || (!sDirectory.length)) sDirectory = "".\\"";
      // Append a backslash if it is missing at end of the directory string.
      else if (sDirectory[sDirectory.length-1] != ""\\"") sDirectory += ""\\"";
      // Search for all files if no file type is specified.
      if ((typeof(sFileType) != ""string"") || (!sFileType.length)) sFileType = ""*"";
      if (typeof(bSubDirs) != ""boolean"") bSubDirs = false;
   }
   else
   {
      sDirectory = """";    // For the list of open, favorite, project
      sFileType = """";     // or solution files the other 3 parameters
      bSubDirs = false;   // have always the same default values.
   }

   // Remember current regular expression engine.
   var nRegexEngine = UltraEdit.regexMode;
   /* A regular expression engine must be defined or the find
      for the last line in the Unicode results could fail. */
   UltraEdit.ueReOn();

   /* Run a Find in Files with an empty search string to get the
      list of files stored in the specified directory in an edit
      window and delete the last line with the summary info. */
   UltraEdit.frInFiles.directoryStart=sDirectory;
   UltraEdit.frInFiles.filesToSearch=nFileList;
   UltraEdit.frInFiles.matchCase=false;
   UltraEdit.frInFiles.matchWord=false;
   UltraEdit.frInFiles.regExp=false;
   UltraEdit.frInFiles.searchInFilesTypes=sFileType;
   UltraEdit.frInFiles.searchSubs=bSubDirs;
   UltraEdit.frInFiles.unicodeSearch=false;
   UltraEdit.frInFiles.useOutputWindow=false;
   if (typeof(UltraEdit.frInFiles.openMatchingFiles) == ""boolean"")
   {
      UltraEdit.frInFiles.openMatchingFiles=false;
   }
   UltraEdit.frInFiles.find("""");

   /* The results of the search above are appended if the Find in Files
      results window was already opened before running Find in Files. But
      the results file does not get automatically the focus as it does if
      there was no results file open from a previous search. Therefore care
      must be taken that the file with the Find in Files results is the
      active document after the search to continue on correct file. */
   var bListCreated = false;
   if (UltraEdit.activeDocument.path == sResultsDocTitle) bListCreated = true;
   else
   {
      for (var nDocIndex = 0; nDocIndex < UltraEdit.document.length; nDocIndex++)
      {
         if (UltraEdit.document[nDocIndex].path == sResultsDocTitle)
         {
            UltraEdit.document[nDocIndex].setActive();
            bListCreated = true;
            break;
         }
      }
   }
   if (bListCreated && sSummaryInfo.length)
   {
      // Search for the summary info at bottom of the results.
      UltraEdit.activeDocument.findReplace.searchDown=false;
      UltraEdit.activeDocument.findReplace.matchCase=true;
      UltraEdit.activeDocument.findReplace.matchWord=false;
      UltraEdit.activeDocument.findReplace.regExp=false;
      UltraEdit.activeDocument.findReplace.find(sSummaryInfo);
      bListCreated = UltraEdit.activeDocument.isFound();
   }
   UltraEdit.activeDocument.findReplace.searchDown=true;
   switch (nRegexEngine)     // Restore original regular expression engine.
   {
      case 1:  UltraEdit.unixReOn(); break;
      case 2:  UltraEdit.perlReOn(); break;
      default: UltraEdit.ueReOn();   break;
   }
   /* Check next if the Find above was successful on finding last line in
      the active document which should contain the Find in Files results. */
   if (!bListCreated)
   {
      if (nOutputType == 2)
      {
         UltraEdit.messageBox('There is a problem with command frInFiles or the strings of the two script variables ""sSummaryInfo"" and ""sResultsDocTitle"" are not adapted to used version of UltraEdit/UEStudio!',""GetListOfFiles Error"");
      }
      else if (nOutputType == 1)
      {
         if (!UltraEdit.outputWindow.visible) UltraEdit.outputWindow.showWindow(true);
         UltraEdit.outputWindow.write('GetListOfFiles: There is a problem with command frInFiles or the strings of the two script variables');
         UltraEdit.outputWindow.write('                ""sSummaryInfo"" and ""sResultsDocTitle"" are not adapted to used version of UltraEdit/UEStudio!');
      }
      return false;
   }

   // Delete last line in results file if line with summary info was found.
   if (sSummaryInfo.length) UltraEdit.activeDocument.deleteLine();
   UltraEdit.activeDocument.top();

   /* Next convert the file into an ASCII/ANSI file for better handling of
      the file names by UltraEdit for Windows < v24.00 and UEStudio < v17.00.
      Unicode file names are not supported by these versions of UE/UES. There
      is no need for this conversion if the file with the results is already
      an ASCII file from a previous execution of function GetListOfFiles. */
   if (bNoUnicode)
   {
      UltraEdit.activeDocument.key(""RIGHT ARROW"");
      if (UltraEdit.activeDocument.currentPos > 1) UltraEdit.activeDocument.unicodeToASCII();
      else UltraEdit.activeDocument.top();
   }

   // No files were found if top of file is also end of file.
   if (UltraEdit.activeDocument.isEof())
   {
      if (nOutputType > 0)
      {
         var sMessage;
         switch (nFileList)
         {
            case 0:  sMessage = ""No file "" + sFileType + "" was found in directory"" +
                                ((nOutputType == 2) ? ""\n\n"" : "" "") + sDirectory; break;
            case 1:  sMessage = ""There are no opened files.""; break;
            case 2:  sMessage = ""There are no favorite files.""; break;
            case 3:  sMessage = ""There are no project files or no project is opened.""; break;
            case 4:  sMessage = ""There are no solution files or no solution is opened.""; break;
            default: sMessage = """"; break;
         }
         if (nOutputType == 1)
         {
            if (!UltraEdit.outputWindow.visible) UltraEdit.outputWindow.showWindow(true);
            UltraEdit.outputWindow.write(""GetListOfFiles: ""+sMessage);
         }
         else UltraEdit.messageBox(sMessage,""GetListOfFiles Error"");
      }
      UltraEdit.closeFile(UltraEdit.activeDocument.path,2);
      return false;
   }
   return true;
}  // End of function GetListOfFiles


// === GetListOfFiles demonstration ==========================================

// Code to demonstrate the usage of the function GetListOfFiles.

var g_nDebugMessage=2;  // Enable debug messages with message boxes.
var nSearchIn=0;        // Stores users choice where to search.
var sFolder="""";         // Stores the search root folder specified by the user.
var sFiles="""";          // Stores the search files/types specified by the user.
var bSubFolders=false;  // Stores the users choice for searching in subdirectories.
var bNewOpened=false;   // Is set to true if a new file had to be opened.

UltraEdit.outputWindow.showStatus=false;
UltraEdit.outputWindow.clear();
if (!UltraEdit.outputWindow.visible) UltraEdit.outputWindow.showWindow(true);

/* The scripting commands getValue and getString do not open message boxes
   for user input and return always 0 respectively null on using UltraEdit
   for Windows < v22.20.0.37 and UEStudio < v15.30.0.12 and no file is
   opened at the moment. As workaround open a new file and later close
   that file without saving before using function GetListOfFiles.
   The condition below as well as definition of variable bNewOpened above
   and the last but one line in this script file can be removed on using
   UltraEdit for Windows >= v22.20.0.37 and UEStudio >= v15.30.0.12. */
if (UltraEdit.document.length < 1)
{
   UltraEdit.newFile();
   bNewOpened = true;
}

nSearchIn = UltraEdit.getValue(""Search in a directory (= 0) or in special file group (= 1)?"",1);
if (nSearchIn)
{
   nSearchIn = UltraEdit.getValue(""Group: 1 = open, 2 = favorites, 3 = project, 4 = solution"",1);
   switch (nSearchIn)
   {
      case 1: UltraEdit.outputWindow.write(""Get list of open files"");     break;
      case 2: UltraEdit.outputWindow.write(""Get list of favorite files""); break;
      case 3: UltraEdit.outputWindow.write(""Get list of project files"");  break;
      case 4: UltraEdit.outputWindow.write(""Get list of solution files""); break;
      default: nSearchIn = 0; break;
   }
}
if (!nSearchIn)
{
   UltraEdit.outputWindow.write(""Get list of files: in directory"");
   sFolder = UltraEdit.getString(""Please enter the path to the directory:"",1);
   if ((!sFolder.length) || (sFolder == "".\\""))
   {
      UltraEdit.outputWindow.write(""Search directory:  .\\ (= working directory)"");
   }
   else
   {
      UltraEdit.outputWindow.write(""Search directory:  "" + sFolder);
   }
   sFiles = UltraEdit.getString(""Please enter the files/types to find:"",1);
   if (!sFiles.length) sFiles = ""*"";
   UltraEdit.outputWindow.write(""Find files/types:  "" + sFiles);
   var nSubFolders = UltraEdit.getValue(""Search in subdirectories (0/1 = no/yes)?"",1);
   if (nSubFolders) bSubFolders = true;
   var sUsersChoice = bSubFolders ? ""true"" : ""false"";
   UltraEdit.outputWindow.write(""Search subfolders: "" + sUsersChoice);
}
if (bNewOpened) UltraEdit.closeFile(UltraEdit.document[0].path,2);
GetListOfFiles(nSearchIn,sFolder,sFiles,bSubFolders);
"
aMDZrKvh,Show TLS Negotiations from Event Log,guyrleech,PowerShell,Thursday 21st of December 2023 06:36:54 PM CDT,"## Gather data from Secure Channel (schannel) negotiation events
## Enable logging via EventLogging REG_DWORD = 1 in HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL

## Get cipher suites so we can look them up for each event
$csuites = Get-TlsCipherSuite

## Get the events and use the ""properties"" array, which is used to construct the message, to show individual elements 
Get-WinEvent -FilterHashtable @{ ProviderName = 'Schannel' ; Id = 36880 } | select timecreated,@{n='Type';e={$_.Properties[0].value}},@{n='TLS';e={$_.Properties[1].Value }},@{n='CipherSuite';e={($csuites|Where CipherSuite -eq $_.Properties[2].Value).Name}} ,@{n='TargetName';e={$_.Properties[5].value}},@{n='Local Cert Subject';e={$_.Properties[6].Value}},@{n='Remote Cert Subject';e={$_.Properties[7].Value}}"
tAcVerhC,2023-12-21_stats.json,rdp_snitch,JSON,Thursday 21st of December 2023 06:18:16 PM CDT,"{
  ""ip"": {
    ""194.165.16.11"": 6,
    ""130.162.52.206"": 3,
    ""89.248.170.88"": 3,
    ""23.92.26.235"": 39,
    ""87.251.75.145"": 9,
    ""60.172.239.9"": 3,
    ""103.77.214.248"": 1023,
    ""179.60.147.5"": 3,
    ""167.248.133.38"": 3,
    ""205.210.31.66"": 9,
    ""62.204.41.208"": 18,
    ""87.251.75.64"": 3,
    ""167.94.146.57"": 3,
    ""185.170.144.113"": 27,
    ""196.190.117.7"": 3,
    ""221.162.28.157"": 3,
    ""194.165.16.78"": 6,
    ""62.233.50.179"": 6,
    ""185.170.144.3"": 6,
    ""167.94.138.51"": 3,
    ""198.235.24.110"": 9,
    ""110.86.3.66"": 3,
    ""31.43.185.3"": 6,
    ""185.36.81.28"": 3,
    ""172.234.49.188"": 3,
    ""45.93.20.204"": 9,
    ""179.60.147.47"": 18,
    ""161.35.3.68"": 12,
    ""50.116.52.4"": 3,
    ""128.14.237.9"": 3,
    ""81.19.135.47"": 6,
    ""80.66.76.92"": 6,
    ""45.227.254.55"": 6,
    ""198.235.24.234"": 9,
    ""51.75.160.42"": 6,
    ""185.222.243.154"": 3,
    ""113.160.91.206"": 3,
    ""213.109.202.232"": 6,
    ""205.210.31.78"": 9,
    ""195.181.244.184"": 3,
    ""111.38.223.196"": 3,
    ""45.129.14.198"": 3
  },
  ""asn"": {
    ""AS48721"": 12,
    ""AS31898"": 3,
    ""AS202425"": 3,
    ""AS63949"": 45,
    ""AS208091"": 18,
    ""AS4134"": 6,
    ""AS140810"": 1023,
    ""AS209588"": 27,
    ""AS398324"": 6,
    ""AS396982"": 36,
    ""AS59425"": 18,
    ""AS398705"": 3,
    ""AS197414"": 33,
    ""AS24757"": 3,
    ""AS4766"": 3,
    ""AS57523"": 15,
    ""AS211736"": 6,
    ""AS209605"": 3,
    ""AS14061"": 12,
    ""AS135377"": 3,
    ""AS267784"": 6,
    ""AS16276"": 6,
    ""AS136787"": 3,
    ""AS45899"": 3,
    ""AS208312"": 6,
    ""AS212531"": 3,
    ""AS9808"": 3,
    ""AS198465"": 3
  },
  ""isp"": {
    ""Flyservers S.A."": 45,
    ""Oracle Corporation"": 3,
    ""IP Volume inc"": 3,
    ""Akamai Technologies, Inc."": 45,
    ""Xhost Internet Solutions LP"": 51,
    ""Chinanet"": 6,
    ""Megacore Technology Company Limited"": 1023,
    ""Censys, Inc."": 9,
    ""Google LLC"": 36,
    ""Horizon LLC"": 18,
    ""Ethiotelecom"": 3,
    ""Korea Telecom"": 3,
    ""Chang Way Technologies Co. Limited"": 15,
    ""FOP Dmytro Nedilskyi"": 6,
    ""SERVEROFFER LT"": 3,
    ""DigitalOcean, LLC"": 12,
    ""Zenlayer Inc"": 3,
    ""OVH SAS"": 6,
    ""Tefincom S.A."": 3,
    ""VietNam Post and Telecom Corporation"": 3,
    ""Red Byte LLC"": 6,
    ""UAB \""Interneto vizija\"""": 3,
    ""China Mobile communications corporation"": 3,
    ""BtHoster LTD"": 3
  },
  ""org"": {
    ""Flyservers S.A"": 12,
    ""Oracle Cloud Infrastructure (eu-frankfurt-1)"": 3,
    ""Quasi Networks LTD."": 3,
    ""Linode"": 42,
    ""Xhost Internet Solutions"": 18,
    ""Chinanet AH"": 3,
    ""Vinasite Viet NAM Company Limited"": 1023,
    ""Cloud Solutions S.A"": 21,
    ""Censys, Inc."": 6,
    ""Palo Alto Networks, Inc"": 36,
    ""Horizon LLC"": 18,
    ""Xhostis"": 33,
    ""Unknown"": 6,
    ""Kornet"": 3,
    ""Sierra LLC"": 6,
    ""Censys, Inc"": 3,
    ""Chinanet FJ"": 3,
    ""FOP Dmytro Nedilskyi"": 6,
    ""Akamai Technologies, Inc."": 3,
    ""Starcrecium Limited"": 9,
    ""DigitalOcean, LLC"": 12,
    ""UCLOUD"": 3,
    ""Alviva Holding Limited"": 6,
    ""UAB Host Baltic"": 6,
    ""OVH Ltd"": 6,
    ""Packethub S.A"": 3,
    ""Vietnam Posts and Telecommunications Group"": 3,
    ""Chang Way Technologies Co. Limited"": 6,
    ""RACKRAY"": 3,
    ""China Mobile"": 3,
    ""BtHoster LTD"": 3
  },
  ""regionName"": {
    ""Kaunas"": 18,
    ""Hesse"": 12,
    ""North Holland"": 48,
    ""California"": 75,
    ""Anhui"": 3,
    ""Hanoi"": 1026,
    ""Distrito Federal"": 21,
    ""Michigan"": 6,
    ""Moscow"": 39,
    ""Addis Ababa"": 3,
    ""Jeju-do"": 3,
    ""Fujian"": 3,
    ""Dnipropetrovsk Oblast"": 6,
    ""North West"": 3,
    ""New Jersey"": 15,
    ""Taiwan"": 3,
    ""England"": 15,
    ""Vilnius"": 6,
    ""Texas"": 3,
    ""Guangdong"": 3
  },
  ""country"": {
    ""Lithuania"": 24,
    ""Germany"": 12,
    ""The Netherlands"": 48,
    ""United States"": 99,
    ""China"": 9,
    ""Vietnam"": 1026,
    ""Venezuela"": 21,
    ""Russia"": 39,
    ""Ethiopia"": 3,
    ""South Korea"": 3,
    ""Ukraine"": 6,
    ""Singapore"": 3,
    ""Taiwan"": 3,
    ""United Kingdom"": 15
  },
  ""account"": {
    ""Test"": 33,
    ""hello"": 1077,
    ""Administr"": 63,
    ""(empty)"": 24,
    ""uKUdfVeYS"": 3,
    ""CtqjZs"": 3,
    ""oPdWto"": 3,
    ""Domain"": 60,
    ""HKGNdODUL"": 3,
    ""fUpvpc"": 3,
    ""mIjtHz"": 3,
    ""fdgjbl1a"": 12,
    ""beio"": 3,
    ""Administrator"": 3,
    ""loKAtnKOG"": 3,
    ""UjPHuM"": 3,
    ""SbemRB"": 3,
    ""KReKwCVoi"": 3,
    ""xOwOZY"": 3,
    ""MQLZAT"": 3
  },
  ""keyboard"": {
    ""Unknown"": 1311
  },
  ""client_build"": {
    ""Unknown"": 1311
  },
  ""client_name"": {
    ""Unknown"": 1311
  },
  ""ip_type"": {
    ""Unknown"": 1188,
    ""hosting"": 93,
    ""mobile"": 6,
    ""proxy"": 12,
    ""hosting & proxy"": 12
  }
}"
QuM1cKEV,2023-12-21_stats.json,rdp_snitch,JSON,Thursday 21st of December 2023 06:16:19 PM CDT,"{
  ""ip"": {
    ""194.165.16.11"": 4,
    ""130.162.52.206"": 2,
    ""89.248.170.88"": 2,
    ""23.92.26.235"": 26,
    ""87.251.75.145"": 6,
    ""60.172.239.9"": 2,
    ""103.77.214.248"": 682,
    ""179.60.147.5"": 2,
    ""167.248.133.38"": 2,
    ""205.210.31.66"": 6,
    ""62.204.41.208"": 12,
    ""87.251.75.64"": 2,
    ""167.94.146.57"": 2,
    ""185.170.144.113"": 18,
    ""196.190.117.7"": 2,
    ""221.162.28.157"": 2,
    ""194.165.16.78"": 4,
    ""62.233.50.179"": 4,
    ""185.170.144.3"": 4,
    ""167.94.138.51"": 2,
    ""198.235.24.110"": 6,
    ""110.86.3.66"": 2,
    ""31.43.185.3"": 4,
    ""185.36.81.28"": 2,
    ""172.234.49.188"": 2,
    ""45.93.20.204"": 6,
    ""179.60.147.47"": 12,
    ""161.35.3.68"": 8,
    ""50.116.52.4"": 2,
    ""128.14.237.9"": 2,
    ""81.19.135.47"": 4,
    ""80.66.76.92"": 4,
    ""45.227.254.55"": 4,
    ""198.235.24.234"": 6,
    ""51.75.160.42"": 4,
    ""185.222.243.154"": 2,
    ""113.160.91.206"": 2,
    ""213.109.202.232"": 4,
    ""205.210.31.78"": 6,
    ""195.181.244.184"": 2,
    ""111.38.223.196"": 2,
    ""45.129.14.198"": 2
  },
  ""asn"": {
    ""AS48721"": 8,
    ""AS31898"": 2,
    ""AS202425"": 2,
    ""AS63949"": 30,
    ""AS208091"": 12,
    ""AS4134"": 4,
    ""AS140810"": 682,
    ""AS209588"": 18,
    ""AS398324"": 4,
    ""AS396982"": 24,
    ""AS59425"": 12,
    ""AS398705"": 2,
    ""AS197414"": 22,
    ""AS24757"": 2,
    ""AS4766"": 2,
    ""AS57523"": 10,
    ""AS211736"": 4,
    ""AS209605"": 2,
    ""AS14061"": 8,
    ""AS135377"": 2,
    ""AS267784"": 4,
    ""AS16276"": 4,
    ""AS136787"": 2,
    ""AS45899"": 2,
    ""AS208312"": 4,
    ""AS212531"": 2,
    ""AS9808"": 2,
    ""AS198465"": 2
  },
  ""isp"": {
    ""Flyservers S.A."": 30,
    ""Oracle Corporation"": 2,
    ""IP Volume inc"": 2,
    ""Akamai Technologies, Inc."": 30,
    ""Xhost Internet Solutions LP"": 34,
    ""Chinanet"": 4,
    ""Megacore Technology Company Limited"": 682,
    ""Censys, Inc."": 6,
    ""Google LLC"": 24,
    ""Horizon LLC"": 12,
    ""Ethiotelecom"": 2,
    ""Korea Telecom"": 2,
    ""Chang Way Technologies Co. Limited"": 10,
    ""FOP Dmytro Nedilskyi"": 4,
    ""SERVEROFFER LT"": 2,
    ""DigitalOcean, LLC"": 8,
    ""Zenlayer Inc"": 2,
    ""OVH SAS"": 4,
    ""Tefincom S.A."": 2,
    ""VietNam Post and Telecom Corporation"": 2,
    ""Red Byte LLC"": 4,
    ""UAB \""Interneto vizija\"""": 2,
    ""China Mobile communications corporation"": 2,
    ""BtHoster LTD"": 2
  },
  ""org"": {
    ""Flyservers S.A"": 8,
    ""Oracle Cloud Infrastructure (eu-frankfurt-1)"": 2,
    ""Quasi Networks LTD."": 2,
    ""Linode"": 28,
    ""Xhost Internet Solutions"": 12,
    ""Chinanet AH"": 2,
    ""Vinasite Viet NAM Company Limited"": 682,
    ""Cloud Solutions S.A"": 14,
    ""Censys, Inc."": 4,
    ""Palo Alto Networks, Inc"": 24,
    ""Horizon LLC"": 12,
    ""Xhostis"": 22,
    ""Unknown"": 4,
    ""Kornet"": 2,
    ""Sierra LLC"": 4,
    ""Censys, Inc"": 2,
    ""Chinanet FJ"": 2,
    ""FOP Dmytro Nedilskyi"": 4,
    ""Akamai Technologies, Inc."": 2,
    ""Starcrecium Limited"": 6,
    ""DigitalOcean, LLC"": 8,
    ""UCLOUD"": 2,
    ""Alviva Holding Limited"": 4,
    ""UAB Host Baltic"": 4,
    ""OVH Ltd"": 4,
    ""Packethub S.A"": 2,
    ""Vietnam Posts and Telecommunications Group"": 2,
    ""Chang Way Technologies Co. Limited"": 4,
    ""RACKRAY"": 2,
    ""China Mobile"": 2,
    ""BtHoster LTD"": 2
  },
  ""regionName"": {
    ""Kaunas"": 12,
    ""Hesse"": 8,
    ""North Holland"": 32,
    ""California"": 50,
    ""Anhui"": 2,
    ""Hanoi"": 684,
    ""Distrito Federal"": 14,
    ""Michigan"": 4,
    ""Moscow"": 26,
    ""Addis Ababa"": 2,
    ""Jeju-do"": 2,
    ""Fujian"": 2,
    ""Dnipropetrovsk Oblast"": 4,
    ""North West"": 2,
    ""New Jersey"": 10,
    ""Taiwan"": 2,
    ""England"": 10,
    ""Vilnius"": 4,
    ""Texas"": 2,
    ""Guangdong"": 2
  },
  ""country"": {
    ""Lithuania"": 16,
    ""Germany"": 8,
    ""The Netherlands"": 32,
    ""United States"": 66,
    ""China"": 6,
    ""Vietnam"": 684,
    ""Venezuela"": 14,
    ""Russia"": 26,
    ""Ethiopia"": 2,
    ""South Korea"": 2,
    ""Ukraine"": 4,
    ""Singapore"": 2,
    ""Taiwan"": 2,
    ""United Kingdom"": 10
  },
  ""account"": {
    ""Test"": 22,
    ""hello"": 718,
    ""Administr"": 42,
    ""(empty)"": 16,
    ""uKUdfVeYS"": 2,
    ""CtqjZs"": 2,
    ""oPdWto"": 2,
    ""Domain"": 40,
    ""HKGNdODUL"": 2,
    ""fUpvpc"": 2,
    ""mIjtHz"": 2,
    ""fdgjbl1a"": 8,
    ""beio"": 2,
    ""Administrator"": 2,
    ""loKAtnKOG"": 2,
    ""UjPHuM"": 2,
    ""SbemRB"": 2,
    ""KReKwCVoi"": 2,
    ""xOwOZY"": 2,
    ""MQLZAT"": 2
  },
  ""keyboard"": {
    ""Unknown"": 874
  },
  ""client_build"": {
    ""Unknown"": 874
  },
  ""client_name"": {
    ""Unknown"": 874
  },
  ""ip_type"": {
    ""Unknown"": 792,
    ""hosting"": 62,
    ""mobile"": 4,
    ""proxy"": 8,
    ""hosting & proxy"": 8
  }
}"
fgdmPPNy,2023-12-21_stats.json,rdp_snitch,JSON,Thursday 21st of December 2023 06:15:09 PM CDT,"{
  ""ip"": {
    ""194.165.16.11"": 2,
    ""130.162.52.206"": 1,
    ""89.248.170.88"": 1,
    ""23.92.26.235"": 13,
    ""87.251.75.145"": 3,
    ""60.172.239.9"": 1,
    ""103.77.214.248"": 341,
    ""179.60.147.5"": 1,
    ""167.248.133.38"": 1,
    ""205.210.31.66"": 3,
    ""62.204.41.208"": 6,
    ""87.251.75.64"": 1,
    ""167.94.146.57"": 1,
    ""185.170.144.113"": 9,
    ""196.190.117.7"": 1,
    ""221.162.28.157"": 1,
    ""194.165.16.78"": 2,
    ""62.233.50.179"": 2,
    ""185.170.144.3"": 2,
    ""167.94.138.51"": 1,
    ""198.235.24.110"": 3,
    ""110.86.3.66"": 1,
    ""31.43.185.3"": 2,
    ""185.36.81.28"": 1,
    ""172.234.49.188"": 1,
    ""45.93.20.204"": 3,
    ""179.60.147.47"": 6,
    ""161.35.3.68"": 4,
    ""50.116.52.4"": 1,
    ""128.14.237.9"": 1,
    ""81.19.135.47"": 2,
    ""80.66.76.92"": 2,
    ""45.227.254.55"": 2,
    ""198.235.24.234"": 3,
    ""51.75.160.42"": 2,
    ""185.222.243.154"": 1,
    ""113.160.91.206"": 1,
    ""213.109.202.232"": 2,
    ""205.210.31.78"": 3,
    ""195.181.244.184"": 1,
    ""111.38.223.196"": 1,
    ""45.129.14.198"": 1
  },
  ""asn"": {
    ""AS48721"": 4,
    ""AS31898"": 1,
    ""AS202425"": 1,
    ""AS63949"": 15,
    ""AS208091"": 6,
    ""AS4134"": 2,
    ""AS140810"": 341,
    ""AS209588"": 9,
    ""AS398324"": 2,
    ""AS396982"": 12,
    ""AS59425"": 6,
    ""AS398705"": 1,
    ""AS197414"": 11,
    ""AS24757"": 1,
    ""AS4766"": 1,
    ""AS57523"": 5,
    ""AS211736"": 2,
    ""AS209605"": 1,
    ""AS14061"": 4,
    ""AS135377"": 1,
    ""AS267784"": 2,
    ""AS16276"": 2,
    ""AS136787"": 1,
    ""AS45899"": 1,
    ""AS208312"": 2,
    ""AS212531"": 1,
    ""AS9808"": 1,
    ""AS198465"": 1
  },
  ""isp"": {
    ""Flyservers S.A."": 15,
    ""Oracle Corporation"": 1,
    ""IP Volume inc"": 1,
    ""Akamai Technologies, Inc."": 15,
    ""Xhost Internet Solutions LP"": 17,
    ""Chinanet"": 2,
    ""Megacore Technology Company Limited"": 341,
    ""Censys, Inc."": 3,
    ""Google LLC"": 12,
    ""Horizon LLC"": 6,
    ""Ethiotelecom"": 1,
    ""Korea Telecom"": 1,
    ""Chang Way Technologies Co. Limited"": 5,
    ""FOP Dmytro Nedilskyi"": 2,
    ""SERVEROFFER LT"": 1,
    ""DigitalOcean, LLC"": 4,
    ""Zenlayer Inc"": 1,
    ""OVH SAS"": 2,
    ""Tefincom S.A."": 1,
    ""VietNam Post and Telecom Corporation"": 1,
    ""Red Byte LLC"": 2,
    ""UAB \""Interneto vizija\"""": 1,
    ""China Mobile communications corporation"": 1,
    ""BtHoster LTD"": 1
  },
  ""org"": {
    ""Flyservers S.A"": 4,
    ""Oracle Cloud Infrastructure (eu-frankfurt-1)"": 1,
    ""Quasi Networks LTD."": 1,
    ""Linode"": 14,
    ""Xhost Internet Solutions"": 6,
    ""Chinanet AH"": 1,
    ""Vinasite Viet NAM Company Limited"": 341,
    ""Cloud Solutions S.A"": 7,
    ""Censys, Inc."": 2,
    ""Palo Alto Networks, Inc"": 12,
    ""Horizon LLC"": 6,
    ""Xhostis"": 11,
    ""Unknown"": 2,
    ""Kornet"": 1,
    ""Sierra LLC"": 2,
    ""Censys, Inc"": 1,
    ""Chinanet FJ"": 1,
    ""FOP Dmytro Nedilskyi"": 2,
    ""Akamai Technologies, Inc."": 1,
    ""Starcrecium Limited"": 3,
    ""DigitalOcean, LLC"": 4,
    ""UCLOUD"": 1,
    ""Alviva Holding Limited"": 2,
    ""UAB Host Baltic"": 2,
    ""OVH Ltd"": 2,
    ""Packethub S.A"": 1,
    ""Vietnam Posts and Telecommunications Group"": 1,
    ""Chang Way Technologies Co. Limited"": 2,
    ""RACKRAY"": 1,
    ""China Mobile"": 1,
    ""BtHoster LTD"": 1
  },
  ""regionName"": {
    ""Kaunas"": 6,
    ""Hesse"": 4,
    ""North Holland"": 16,
    ""California"": 25,
    ""Anhui"": 1,
    ""Hanoi"": 342,
    ""Distrito Federal"": 7,
    ""Michigan"": 2,
    ""Moscow"": 13,
    ""Addis Ababa"": 1,
    ""Jeju-do"": 1,
    ""Fujian"": 1,
    ""Dnipropetrovsk Oblast"": 2,
    ""North West"": 1,
    ""New Jersey"": 5,
    ""Taiwan"": 1,
    ""England"": 5,
    ""Vilnius"": 2,
    ""Texas"": 1,
    ""Guangdong"": 1
  },
  ""country"": {
    ""Lithuania"": 8,
    ""Germany"": 4,
    ""The Netherlands"": 16,
    ""United States"": 33,
    ""China"": 3,
    ""Vietnam"": 342,
    ""Venezuela"": 7,
    ""Russia"": 13,
    ""Ethiopia"": 1,
    ""South Korea"": 1,
    ""Ukraine"": 2,
    ""Singapore"": 1,
    ""Taiwan"": 1,
    ""United Kingdom"": 5
  },
  ""account"": {
    ""Test"": 11,
    ""hello"": 359,
    ""Administr"": 21,
    ""(empty)"": 8,
    ""uKUdfVeYS"": 1,
    ""CtqjZs"": 1,
    ""oPdWto"": 1,
    ""Domain"": 20,
    ""HKGNdODUL"": 1,
    ""fUpvpc"": 1,
    ""mIjtHz"": 1,
    ""fdgjbl1a"": 4,
    ""beio"": 1,
    ""Administrator"": 1,
    ""loKAtnKOG"": 1,
    ""UjPHuM"": 1,
    ""SbemRB"": 1,
    ""KReKwCVoi"": 1,
    ""xOwOZY"": 1,
    ""MQLZAT"": 1
  },
  ""keyboard"": {
    ""Unknown"": 437
  },
  ""client_build"": {
    ""Unknown"": 437
  },
  ""client_name"": {
    ""Unknown"": 437
  },
  ""ip_type"": {
    ""Unknown"": 396,
    ""hosting"": 31,
    ""mobile"": 2,
    ""proxy"": 4,
    ""hosting & proxy"": 4
  }
}"
hNqEBw3j,Exercício Pessoas + IMC,hercioneto,C,Thursday 21st of December 2023 06:13:00 PM CDT,"// Online C compiler to run C program online
#include <stdio.h>

typedef struct // Cria uma STRUCT para armazenar os dados de uma pessoa

{
   char Nome[50];
    int Idade;
    float Peso;
    float Altura;
    float Imc;

} Pessoa; // Define o nome do novo tipo criado

void ImprimePessoa(Pessoa P) // declara o parâmetro como uma struct

{

  printf(""Nome: %s Idade: %d  Peso: %f Altura: %f IMC: %f \n"",P.Nome, P.Idade, P.Peso, P.Altura, P.Imc);

}

int main()

{

    Pessoa Povo[10];
    char nome[50];
    float somaIMC=0;
    float mediaIMC=0;
   for (int i = 0 ; i<=1; i++) {
       printf(""Digite o nome da pessoa %i: "",i+1);
       scanf(""%s"",&Povo[i].Nome);
       printf(""Digite a altura da pessoa %i: "",i+1);
       scanf(""%f"",&Povo[i].Altura);
       printf(""Digite peso da pessoa %i: "",i+1);
       scanf(""%f"",&Povo[i].Peso);
       Povo[i].Imc = (Povo[i].Peso / (Povo[i].Altura * Povo[i].Altura));
       somaIMC = somaIMC + Povo[i].Imc;
    }
    for (int i = 0 ; i<=1; i++) {
    ImprimePessoa(Povo[i]);
    }
    mediaIMC = somaIMC / 2;
    printf(""Media de IMCs %f: "",mediaIMC);


   return 0;

}"
Yw6e7Tec,door.lua,forestfire97,Lua,Thursday 21st of December 2023 06:08:21 PM CDT,"-- Load the Keypad API
local keypad = require(""keyAPI"")

-- List of monitor names
local monitors = {""monitor_1"", ""monitor_2""}  -- Replace with your monitor names
local redstoneOutput = ""back""  -- Replace with your desired redstone output side

-- Function to run the keypad interface on a single monitor
local function runKeypadOnMonitor(monitor, redstoneOutput)
    local monitorObj = peripheral.wrap(monitor)
    keypad(monitorObj, redstoneOutput)
end

-- Start the keypad interface on each monitor separately
for _, monitorName in ipairs(monitors) do
    parallel.waitForAny(function()
        runKeypadOnMonitor(monitorName, redstoneOutput)
    end)
end"
V70aJJ22,Untitled,glados123123123123,C#,Thursday 21st of December 2023 06:05:52 PM CDT,"using HarmonyLib;
using GameNetcodeStuff;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UnityEngine.AI;


namespace TombsMadnessMod.Patches
{
    [HarmonyPatch(typeof(ForestGiantAI))]
    internal class ForestGiantAIPatch
    {
        [HarmonyPatch(""Start"")]
        [HarmonyPostfix]
        static void ForestGiantSpeedPatch(ref ForestGiantAI __instance)
        {
            TombsMadnessModBase.mls.LogInfo(""setting da settings!"");
            __instance.agent.speed = 5000;
            __instance.enemyType.isDaytimeEnemy = true;
        }

    }
}
"
ajeHu89b,Untitled,glados123123123123,C#,Thursday 21st of December 2023 06:04:31 PM CDT,"[HarmonyPatch(typeof(ForestGiantAI))]
    internal class ForestGiantPatch
    {
        [HarmonyPatch(""Start"")]
        [HarmonyPostfix]
        static void ForestGiantSpeedPatch(ref ForestGiantAI __instance)
        {
            TombsMadnessModBase.mls.LogInfo(""setting da settings!"");
            __instance.agent.speed = 5000;
            __instance.enemyType.isDaytimeEnemy = true;
        }

    }"
x3ftuVdV,Untitled,iradap,C++,Thursday 21st of December 2023 05:56:53 PM CDT,"// ==UserScript==
// @name         AUTOX NI
// @namespace    http://tampermonkey.net/
// @version      2.3
// @description  Skrypt automatycznie biega za graczem, wraca na kordy po zabiciu itd.
// @author       Padonim
// @match        https://gordion.margonem.pl/
// @start-at     document-idle
// @grant        GM_setValue
// @grant        GM_getValue
// ==/UserScript==
(async (window, sleep) => {

    const initCSS = () => {

        const $container2 = $('<div id=""p4d0k1ll""></div>').css({
            'width':'110px',
            'position':'absolute',
            'z-index':'999',
            'background':'rgba(15, 15, 15, 0.85)',
            'border':'1px solid orange',
            'color':'white'
        });
        const $head = $('<div id=""p4d0k1ll-head""></div>').css({
            'width':'110px',
            'height':'25px',
        });

        const $body = $('<div id=""p4d0k1ll-body""></div>').css({
            'width':'110px',
            'height':'40px',
            'font-size':'8px'
        })

        const $settings_input = $('<div id=""p4d0k1ll-settings"">⚙️</div>').css({
            'float':'left'
        });

        const $mode_input = $('<input type=""checkbox"" id=""mode"" tabindex=""0"">').css({
            'float':'left'
        });

        const $levels_input = $('<input type=""text"" id=""levels"" autocomplete=""off"" placeholder=""MIN-MAX"">').css({
            'width':'65px',
            'height':'15px',
            'background':'rgba(15, 15, 15, 0.45)',
            'border':'0',
            'border-bottom':'1px dotted orange',
            'color':'orange',
            'text-align':'center',
            'float':'left'
        });

        const $backmode_input = $('<input type=""checkbox"" id=""backmode"" tabindex=""0""><small>KORDY</small>').css({
            'float':'left'
        });

        const $coords_input = $('<input type=""text"" id=""coords"" autocomplete=""off"" placeholder=""X,Y"">').css({
            'width':'55px',
            'height':'15px',
            'background':'rgba(15, 15, 15, 0.45)',
            'border':'0',
            'border-bottom':'1px dotted orange',
            'color':'orange',
            'text-align':'center',
            'float':'left'
        });

        const $automode_input = $('<span style=""clear: both;""></span><input type=""checkbox"" id=""automode""><small>AUTO F</small><br>').css({
            'float':'left',
            'text-align':'left'
        });

        const $follow_input = $('<input type=""checkbox"" id=""follow""><small>FOLLOW</small>').css({
            'float':'left',
            'text-align':'left'
        });

        $(""body"").append($container2);
        $(""#p4d0k1ll"").append($head, $body);
        $(""#p4d0k1ll-head"").append($settings_input, $mode_input, $levels_input);
        $(""#p4d0k1ll-body"").append($backmode_input, $coords_input, $automode_input, $follow_input);

        $('#p4d0k1ll-settings').click(function () {
            $('#p4d0k1ll-body').toggle('slow');
        });

    }
    window.onload = initCSS();

    GM_getValue('p4d0k1llni') || GM_setValue('p4d0k1llni', JSON.stringify({ x: 0, y: 0 }));

    let padoPosition = JSON.parse(GM_getValue('p4d0k1llni'));

    document.querySelector('#p4d0k1ll').style.left = `${padoPosition.x}`;
    document.querySelector('#p4d0k1ll').style.top = `${padoPosition.y}`;
    document.querySelector('#p4d0k1ll').style.position = 'absolute';

    $(document.querySelector('#p4d0k1ll')).draggable({
        stop: () => {
            padoPosition.x = document.querySelector('#p4d0k1ll').style.left;
            padoPosition.y = document.querySelector('#p4d0k1ll').style.top;
            GM_setValue('p4d0k1llni', JSON.stringify(padoPosition));

            document.querySelector('#p4d0k1ll').style.left = padoPosition.x;
            document.querySelector('#p4d0k1ll').style.top = padoPosition.y;
            document.querySelector('#p4d0k1ll').style.position = 'absolute';
        }
    });

    const loadSettings = () => {
        sleep(4000);
        if (GM_getValue('status' + getCookie(""mchar_id"")) == true) {
            document.getElementById('mode').setAttribute('checked', 'checked');
        }
        if (GM_getValue('backmode' + getCookie(""mchar_id"")) == true) {
            document.getElementById('backmode').setAttribute('checked', 'checked');
        }
        if (GM_getValue('automode' + getCookie(""mchar_id"")) == true) {
            document.getElementById('automode').setAttribute('checked', 'checked');
        }
        if (GM_getValue('follow' + getCookie(""mchar_id"")) == true) {
            document.getElementById('follow').setAttribute('checked', 'checked');
        }
        if (GM_getValue('coords' + getCookie(""mchar_id"")) == null || GM_getValue('coords' + getCookie(""mchar_id"")) == undefined) {
            GM_setValue('coords' + getCookie(""mchar_id""), '00,00');
        }
        if (GM_getValue(""levels"" + getCookie(""mchar_id"")) == null || GM_getValue('levels' + getCookie(""mchar_id"")) == undefined) {
            GM_setValue(""levels"" + getCookie(""mchar_id""), '0-500');
        }
        document.getElementById(""levels"").value = GM_getValue(""levels"" + getCookie(""mchar_id""));
        document.getElementById(""coords"").value = GM_getValue(""coords"" + getCookie(""mchar_id""));
        console.log('[P4D0K1LL] Załadowano ustawienia.');
    }
    window.onload = loadSettings();

    document.getElementById('levels').onchange = () => {
        GM_setValue(""levels"" + getCookie(""mchar_id""), document.getElementById(""levels"").value);
        console.log('[P4D0K1LL] Zapisano ustawienia.');
    }

    document.getElementById('coords').onchange = () => {
        GM_setValue(""coords"" + getCookie(""mchar_id""), document.getElementById(""coords"").value);
        console.log('[P4D0K1LL] Zapisano ustawienia.');
    }

    document.getElementById('follow').addEventListener('click', () => {
        GM_setValue(""follow"" + getCookie(""mchar_id""), document.getElementById(`follow`).checked);
        console.log('[P4D0K1LL] Zapisano ustawienia.');
    });

    document.getElementById('mode').addEventListener('click', () => {
        GM_setValue(""status"" + getCookie(""mchar_id""), document.getElementById(`mode`).checked);
        console.log('[P4D0K1LL] Zapisano ustawienia.');
    });

    document.getElementById('automode').addEventListener('click', () => {
        GM_setValue(""automode"" + getCookie(""mchar_id""), document.getElementById(`automode`).checked);
        console.log('[P4D0K1LL] Zapisano ustawienia.');
    });

    document.getElementById('backmode').addEventListener('click', () => {
        GM_setValue(""backmode"" + getCookie(""mchar_id""), document.getElementById(`backmode`).checked);
        console.log('[P4D0K1LL] Zapisano ustawienia.');
    });

    const sendAttackReq = (id) => {
        if (new Date() / 60 - lastAttackReq < 0.3) return;
        window._g('fight&a=attack&id=' + id);
        lastAttackReq = new Date() / 60;
    }
    let lastAttackReq = new Date() / 60;

    const getOnlines = async () => {
        while (true) {
            fetch(""https://padonim.cytr.us/ping?"" + new URLSearchParams({
                accid: getCookie('user_id'),
                chid: getCookie('mchar_id')
            }))
                .then(response => response.json())
                .then((res) => {
                    $('#ponline').html(res.online)
                });
            await sleep(60000);
        }
    }
    window.onload = getOnlines();

    const initX = async () => {
        while (true) {
            let targets = [];
            const getOthers = Engine.others.getDrawableList().filter(obj => {
                return obj.d;
            }).filter(obj => {
                return (obj.d.relation == 'en' || obj.d.relation == 'cl-en' || obj.d.relation == '') && (obj.d.lvl >= document.getElementById(""levels"").value.split(""-"")[0] && obj.d.lvl <= document.getElementById(""levels"").value.split(""-"")[1]);
            });
            if (document.getElementById('mode').checked && Engine.map.d.pvp == 2) {
                for (const i in getOthers) {
                    const emotion = getOthers[i].onSelfEmoList[0];
                    if (emotion == undefined) {
                        targets.push({
                            id: getOthers[i].d.id,
                            x: getOthers[i].d.x,
                            y: getOthers[i].d.y,
                            distance: Math.abs(Engine.hero.d.x - getOthers[i].d.x) + Math.abs(Engine.hero.d.y - getOthers[i].d.y)
                        });
                    } else if (emotion.name != 'battle' && emotion.name != 'pvpprotected') {
                        targets.push({
                            id: getOthers[i].d.id,
                            x: getOthers[i].d.x,
                            y: getOthers[i].d.y,
                            distance: Math.abs(Engine.hero.d.x - getOthers[i].d.x) + Math.abs(Engine.hero.d.y - getOthers[i].d.y)
                        })
                    }
                }
                if (targets != '') {
                    targets = targets.sort((a, b) => (a.distance > b.distance) ? 1 : -1);
                    if (targets[0].distance > 2 && document.getElementById(""follow"").checked) {
                        Engine.hero.autoGoTo({
                            x: targets[0].x,
                            y: targets[0].y
                        });
                    } else sendAttackReq(targets[0].id);
                } else if (document.getElementById(""backmode"").checked) {
                    if (Engine.hero.d.x != document.getElementById(""coords"").value.split("","")[0] || Engine.hero.d.y != document.getElementById(""coords"").value.split("","")[1]) {
                        Engine.hero.autoGoTo({
                            x: parseInt(document.getElementById(""coords"").value.split("","")[0]),
                            y: parseInt(document.getElementById(""coords"").value.split("","")[1])
                        });
                    }
                } else if (document.getElementById(""automode"").checked) {
                    if (Engine.battle) {
                        API.addCallbackToEvent(""open_battle_window"", () => {
                            eval('Engine.battle.autoFight()')
                        });
                    }
                }
            }
            await sleep(50000);
        }
    }
    window.onload = initX();
})(typeof unsafeWindow !== ""undefined"" ? unsafeWindow : window, (ms) => new Promise((resolve) => setTimeout(resolve, ms)));"
Yq4wKwij,Caixa de código em Markdown,Gabarito,JavaScript,Thursday 21st of December 2023 05:13:34 PM CDT,"Teste de caixa de código em Markdown:

```javascript
Running script: F:\Meus documentos\Downloads\1\SameName 02 - ChatGPT - Sugestão 07.js
========================================================================================================
An error occurred on line 53:
     var uniqueSimilarFileNames = [...new Set(similarFileNames)];
Script failed.
```
"
BsLSqY2F,Untitled,glados123123123123,C#,Thursday 21st of December 2023 04:51:17 PM CDT,"using HarmonyLib;
using GameNetcodeStuff;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UnityEngine.AI;


namespace TombsMadnessMod.Patches
{
    [HarmonyPatch(typeof(ForestGiantAI))]
    internal class ForestGiantPatch
    {
        [HarmonyPatch(""Start"")]
        [HarmonyPostfix]
        static void ForestGiantSpeedPatch(ref NavMeshAgent ___agent, ref bool ___isDaytimeEnemy)
        {
            TombsMadnessModBase.mls.LogInfo(""setting da settings!"");
            ___agent.speed = 5000;
            ___isDaytimeEnemy = true;
            TombsMadnessModBase.mls.LogInfo(""done with da settings!"");
        }

    }
}
"
DWzyHwry,Полезные возможности в ConditionalEvents #2,JaycobYT,YAML,Thursday 21st of December 2023 04:43:28 PM CDT,"#---------------------------------------
#  
#  Создайте файл с названием events.yml
#  в папке ConditionalEvents/events/
#
#  Скопируйте полностью код этого конфига
#  и вставьте его в этот файл (events.yml)
#
#  Для работы некоторых плейсхолдеров нужно
#  установить расширение для PlacholderAPI:
#
#  /papi ecloud download WorldGuard
#  /papi reload
#
#---------------------------------------
Events:
  # -------------------------------------
  #  Урон игроку при ломании  
  #  блока с определённым шансом
  # -------------------------------------
  block_break_damage:
    enabled: true
    type: block_break
    conditions:
    - '%block% == ANCIENT_DEBRIS'
    - '%random_1_10% >= 5'
    actions:
      default:
      - 'damage: 6'
  # -------------------------------------
  #  Рандомное количество второй
  #  валюты за убийство игроков
  # -------------------------------------
  player_kill_reward:
    enabled: true
    type: player_kill
    conditions:
    - '%victim% == PLAYER'
    actions:
      default:
      - 'console_command: points give %player% %random_1_5%'
      - 'actionbar: &fВы убили &c%target:player%;140'
  # -------------------------------------
  #  Отображение напоминания игроку,
  #  когда уровень еды ниже указанного
  # -------------------------------------
  food_level_notification:
    enabled: true
    type: player_change_food
    conditions:
    - '%new_food_level% <= 6'
    actions:
      default:
      - 'title: 10;60;10;none;&fВы голодны, подкрепитесь!'
      - 'playsound: ENTITY_ZOMBIE_AMBIENT;1;1'
  # -------------------------------------
  #  Выдача эффектов игроку при 
  #  подборе определённого дропа
  # -------------------------------------
  item_pickup_effect:
    enabled: true
    type: item_pickup
    conditions:
    - '%item% == SLIME_BALL'
    - '%item_name% == Слизь Замедления'
    actions:
      default:
      - 'give_potion_effect: SLOW;120;5;false'
      - 'give_potion_effect: BLINDNESS;120;2;false'
      - 'title: 10;60;10;none;&fВы вступили в какую-то жижу...'
      - 'playsound: ENTITY_SLIME_JUMP;1;1'
  # -------------------------------------
  #  Запрет использования жителя
  #  на чужом регионе (WorldGuard)
  # -------------------------------------
  region_blocked_villager:
    enabled: true
    type: player_open_inventory
    conditions:
    - '%inventory_type% == MERCHANT'
    - '%worldguard_region_name% != %empty%'
    - '%worldguard_region_owner% !contains %player%'
    - '%worldguard_region_members% !contains %player%'
    actions:
      default:
      - 'cancel_event: true'
      - 'message: &fНельзя взаимодействовать с жителем на чужом регионе'"
w7vqmVsF,Agon-Demo-01,lovejoy777,ZXBasic,Thursday 21st of December 2023 04:40:00 PM CDT,"   10 REM ******************************
   20 REM *        AGON LIGHT 2        *
   30 REM *                            *
   40 REM *       BBC BASIC DEMO       *
   50 REM *     WRITTEN FOR MODE 8     *
   60 REM *      BY STEVE LOVEJOY      *
   70 REM ******************************
   80 :
   90 REM MAIN SETUP.
   95 CLEAR
  100 PROC_LOAD_VARS : REM CALL LOAD_VARS.
  110 PROC_LOAD_CHARS : REM CALL LOAD_CHARS.
  120 PROC_INIT_SCREEN : REM CALL INITSCREEN.
  130 PROC_MAINLOOP : REM CALL MAIN LOOP.
  140 VDU 30 : REM MOVES CURSOR HOME (TOP LEFT) | 0,0).
  250 END : REM END MAIN SETUP.
  260 :
 1000 DEF PROC_MAINLOOP : REM ****** MAIN LOOP ******
 1010 CLS : REM CLEAR THE SCREEN.
 1020 NX = 16 : REM SET X.
 1030 NY = 0 : REM SET Y AT THE TOP OF THE SCREEN.
 1040 :
 1050 FOR J=1 TO 64 : REM LOOP FOR COLOUR CHANGE.
 1055 CLS : REM CLEAR THE SCREEN BETWEEN EACH COLOUR CHANGE.
 1060 COLOUR J : REM ASSIGN COLOUR OF J.
 1065 PROC_DRAW_HUD : REM DRAW THE HUD (BORDER).
 1070 IF NY <=29 THEN NY = NY+1 : REM INCREMENT THE Y POSITION EACH COLOUR LOOP.
 1075 IF NY >29 THEN NY = 0 : REM RESET Y AFTER IT MOVES OFF THE SCREEN.
 1080 PROC_DRAW_AGON(NX,NY) : REM THIS ALLOWS YOU TO MOVE THE TEXT WITH CODE.
 1085 ANYKEY%=INKEY(4) : REM DELAY
 1090 NEXT J : REM LOOP J.
 1100 :
 2000 ENDPROC : REM END MAIN_LOOP.
 2010 :
 5500 DEF PROC_INIT_SCREEN : REM ***** INIT_SCREEN ****
 5510 :
 5520 MODE mode% : REM SETS SCREEN MODE FROM VARS.
 5530 CLS : REM CLEAR TEXT SCREEN.
 5540 CLG : REM CLEAR GRAPHICS SCREEN.
 5550 PROC_HIDE_CURSOR : REM CALL HIDE_CURSOR.
 5560 ENDPROC : REM END INIT_SCREEN
 5570 :
 5580 DEF PROC_HIDE_CURSOR : REM ******* HIDE_CURSOR *******
 5590 VDU 23,1,0;0;0;0;
 5600 ENDPROC
 5610 :
 5620 DEF PROC_SHOW_CURSOR : REM ****** SHOW_CURSOR *******
 5630 VDU 23,1,1;0;0;0;
 5640 ENDPROC
 5650 :
 7710 DEF PROC_LOAD_CHARS : REM ****** LOAD_CHARS TO MEMORY ******
 7720 REM ASSIGN A to CHRS.
 7730 VDU 23,201,0,0,0,0,1,1,7,7
 7740 VDU 23,202,30,30,126,126,254,254,254,254
 7750 VDU 23,203,31,31,126,126,120,120,0,0
 7760 VDU 23,204,158,158,30,30,30,30,6,6
 7770 REM ASSIGN G to CHARS.
 7780 VDU 23,205,127,127,127,112,112,112,112,112
 7790 VDU 23,206,254,254,254,0,0,6,6,30
 7800 VDU 23,207,112,112,112,127,127,127,0,0
 7810 VDU 23,208,30,30,30,254,254,254,30,24
 7820 REM ASSIGN O to CHARS.
 7830 VDU 23,209,127,127,127,112,112,112,112,112
 7840 VDU 23,210,254,254,254,14,14,14,14,14
 7850 VDU 23,211,112,112,112,127,127,127,0,0
 7860 VDU 23,212,14,14,14,254,254,254,0,0
 7870 REM ASSIGN N to CHARS.
 7880 VDU 23,213,96,120,120,126,126,127,127,127
 7890 VDU 23,214,14,14,14,14,14,142,142,254
 7900 VDU 23,215,127,113,113,112,112,112,0,0
 7910 VDU 23,216,254,254,254,126,126,30,30,6
 8170 :
 8190 REM HUD CHARS.
 8200 VDU 23,237,255,255,192,192,192,192,192,192 : REM TOP LEFT CORNER.
 8210 VDU 23,238,255,255,3,3,3,3,3,3 : REM TOP RIGHT CORNER.
 8220 VDU 23,239,192,192,192,192,192,192,255,255 : REM BOT LEFT CORNER.
 8230 VDU 23,240,3,3,3,3,3,3,255,255 : REM BOT RIGHT CORNER.
 8240 VDU 23,241,255,255,0,0,0,0,0,0 : REM TOP STRAIGHT.
 8250 VDU 23,242,0,0,0,0,0,0,255,255 : REM BOT STRAIGHT.
 8260 VDU 23,243,192,192,192,192,192,192,192,192 : REM LEFT STRAIGHT.
 8270 VDU 23,244,3,3,3,3,3,3,3,3 : REM RIGHT STRAIGHT.
 8280 :
 8290 ENDPROC : REM END LOAD_CHARS.
 8300 :
 8400 DEF PROC_LOAD_VARS : REM **** LOAD_VARS *****
 8410 REM GIVE COLOURS A NAME.
 8411 COLBLACK% = 0
 8412 COLRED% = 1
 8413 COLGREEN% = 2
 8414 COLYELLOW% = 3
 8415 COLBLUE% = 4
 8416 COLMAGENTA% = 5
 8417 COLCYAN% = 6
 8418 COLWHITE% = 7
 8419 COLINTRED% = 9
 8420 COLINTGREEN% = 10
 8421 COLINTYELLOW% = 11
 8422 COLINTBLUE% = 12
 8423 COLINTMAGENTA% = 13
 8424 COLINTCYAN% = 14
 8425 COLINTWHITE% = 15
 8450 mode% = 8 : REM SET MODE HERE.
 8460 RT% = 31 : REM SET RIGHT TEXT.
 8470 LT% = 2 : REM SET LEFT TEXT.
 8480 T1X = 0 : REM TITLE TEXT AGON X.
 8490 T1Y = 0 : REM TITLE TEXT AGON Y.
 8500 :
 8700 ENDPROC : REM END LOAD_VARS.
 8800 :
 9000 DEF PROC_DRAW_AGON(T1X,T1Y) : REM ****** DRAW_AGON ******
 9010 :
 9020 REM FROM CUSTOM CHARS DEFINED PREVIOUSLY.
 9030 REM AGON.
 9040 REM DISPLAY A (2x2) CHARS.
 9060 PRINT TAB(T1X,T1Y);CHR$(201);CHR$(202)
 9070 PRINT TAB(T1X,T1Y+1);CHR$(203);CHR$(204)
 9080 REM DISPLAY G (2x2) CHARS.
 9090 PRINT TAB(T1X+2,T1Y);CHR$(205);CHR$(206)
 9100 PRINT TAB(T1X+2,T1Y+1);CHR$(207);CHR$(208)
 9110 REM DISPLAY O (2x2) CHARS.
 9120 PRINT TAB(T1X+4,T1Y);CHR$(209);CHR$(210)
 9130 PRINT TAB(T1X+4,T1Y+1);CHR$(211);CHR$(212)
 9140 REM DISPLAY N (2x2) CHARS.
 9150 PRINT TAB(T1X+6,T1Y);CHR$(213);CHR$(214)
 9160 PRINT TAB(T1X+6,T1Y+1);CHR$(215);CHR$(216)
 9260 ENDPROC : REM END DRAW_AGON.
 9270 :
 9600 DEF PROC_DRAW_HUD : REM ***** DRAW_HUD *******
 9610 :
 9620 PRINT TAB(0,0);CHR$(237) : REM TL CORNER.
 9630 FOR TB = 1 TO 38 : REM TOP BORDER.
 9640  PRINT TAB(TB,0)CHR$(241)
 9650 NEXT TB
 9660 PRINT TAB(39,0)CHR$(238) : REM TR CORNER.
 9670 FOR LB = 1 TO 27 : REM LEFT BORDER.
 9680  PRINT TAB(0,LB)CHR$(243)
 9690 NEXT LB
 9700 FOR RB = 1 TO 27 : REM RIGHT BORDER.
 9710  PRINT TAB(39,RB)CHR$(244)
 9720 NEXT RB
 9730 PRINT TAB(0,27);CHR$(239) : REM BL CORNER.
 9740 FOR BB = 1 TO 38 : REM BOTTOM BORDER.
 9750  PRINT TAB(BB,27)CHR$(242)
 9760 NEXT BB
 9770 PRINT TAB(39,27);CHR$(240) : REM BR CORNER.
10000 ENDPROC : REM END DRAW_HUD.
"
tNceTNMU,Untitled,glados123123123123,C#,Thursday 21st of December 2023 04:39:49 PM CDT,"using BepInEx;
using BepInEx.Logging;
using HarmonyLib;
using System;
using System.Collections.Generic;
using System.Collections;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TombsMadnessMod.Patches;
using UnityEngine;
using UnityEngine.PlayerLoop;
using UnityEngine.Windows;
using DunGen;
using Microsoft.VisualBasic.Devices;

namespace TombsMadnessMod
{
    [BepInPlugin(modGUID, modName, modVersion)]

    public class TombsMadnessModBase : BaseUnityPlugin
    {
        private const string modGUID = ""TombVali.TombsMadnessMod"";
        private const string modName = ""Tomb's Madness Mod"";
        private const string modVersion = ""1.0.0.0"";

        private readonly Harmony harmony = new Harmony(modGUID);

        private static TombsMadnessModBase Instance;

        static internal ManualLogSource mls;

        void Awake()
        {
            if(Instance == null)
            {
                Instance = null;
            }
            mls = BepInEx.Logging.Logger.CreateLogSource(modGUID);


            mls.LogInfo(""TOMB IN DA SHIZOUCE :)"");
            harmony.PatchAll(typeof(TombsMadnessModBase));
            harmony.PatchAll(typeof(PlayerControlerBPatch));
            harmony.PatchAll(typeof(ForestGiantAI));

        }
        
        void Update()
        {
            GameObject testObject = LC_API.BundleAPI.BundleLoader.GetLoadedAsset<GameObject>(""testobject"");
            Instantiate(testObject);
            mls.LogInfo(""here have a cube"");
        }

    }
}
"
rV3HatSb,keypadAPI,forestfire97,Lua,Thursday 21st of December 2023 04:21:50 PM CDT,"-- Keypad API

-- Define the correct code
local correctCode = ""1234""  -- Replace with your desired code

function keypadInterface(monitor, redstoneOutput)
    local inputCode = """"
    local codeEntered = false
    local bgColor = colors.lightBlue
    
    while not codeEntered do
        monitor.setBackgroundColor(bgColor)
        monitor.clear()
        
        -- Display the keypad interface
        monitor.setTextColor(colors.white)
        monitor.setCursorPos(1, 1)
        monitor.write(""Enter Code:"")
        monitor.setCursorPos(1, 2)
        monitor.write(inputCode)
        
        -- Display the buttons
        local buttonLabels = {""1"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""0"", ""Enter""}
        local buttonX = {1, 5, 9, 1, 5, 9, 1, 5, 9, 1, 5}
        local buttonY = {4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7}
        
        for i = 1, #buttonLabels do
            monitor.setCursorPos(buttonX[i], buttonY[i])
            monitor.write(buttonLabels[i])
        end
        
        -- Check for button presses
		local event, side, x, y = os.pullEvent(""monitor_touch"")
		if side == monitorName then
            for i = 1, #buttonLabels do
                if x == buttonX[i] and y == buttonY[i] then
                    local buttonValue = buttonLabels[i]
                    if buttonValue == ""Enter"" then
                        if inputCode == correctCode then
                            codeEntered = true
                            monitor.setBackgroundColor(colors.green)
                            monitor.clear()
                            redstone.setOutput(redstoneOutput, true)
                            sleep(2)
                            break
                        else
                            inputCode = """"
                            bgColor = colors.red
                            sleep(2)
                            break
                        end
                    else
                        inputCode = inputCode .. buttonValue
                        break
                    end
                end
            end
        end
    end
    
    redstone.setOutput(redstoneOutput, false)
end

return keypadInterface"
v4xZqDXh,CalculatorView,LinneuDM,JavaScript,Thursday 21st of December 2023 04:20:43 PM CDT,"<template>
  <div>
    <Page
      title=""Calculator""
      backURI="":back""
    >
      <template #body>
        <div class=""roi-list no-bg mb-3"">
          <div class=""input-group size-sm"">
            <Dropdown
              label=""Account""
              :list=""fleetList""
            />
          </div>
        </div>
        <PageTabs>
          <PageTab title=""Params"">
            <div class=""roi-list"">
              <div
                v-for=""(param, key) in roiParameters""
                :key=""param.id""
                class=""roi-item""
                :class=""{'border-bottom': (roiParameters.length > 1 && key < roiParameters.length - 1)}""
              >
                <button
                  class=""remove-btn""
                  @click=""removeRoi(param.id)""
                >
                  <Icon icon=""fal fa-circle-xmark"" />
                </button>
                <aside class=""roi-identification"">
                  Population {{ key+1 }}
                </aside>
                <div class=""form"">
                  <div class=""input-group"">
                    <InputList
                      label=""Locations""
                      :list=""locationsList""
                      v-model=""param.locations""
                    />
                  </div>
                  <div class=""input-group"">
                    <InputList
                      label=""Types""
                      :list=""typesList""
                      v-model=""param.types""
                    />
                  </div>
                  <div class=""input-group"">
                    <InputList
                      label=""Fleet""
                      :list=""fleetList""
                      v-model=""param.fleets""
                    />
                  </div>
                  <div class=""input-group"">
                    <div class=""flex-group"">
                      <div class=""flex-item dropdown"">
                        <Dropdown
                          label=""ATIS Family""
                          :list=""fleetList""
                          v-model=""param.fleets""
                        />
                      </div>
                      <div class=""flex-item checkbox"">
                        <Checkbox
                          label=""Group as pop""
                          v-model=""param.groupAsPop""
                        />
                      </div>
                      <div class=""flex-item checkbox"">
                        <Checkbox
                          label=""Moving""
                          v-model=""param.moving""
                        />
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div
                class=""data-plan-footer""
              >
                <button
                  class=""icon-btn""
                  @click=""addNewROIItem()""
                >
                  <Icon icon=""fal fa-plus-circle"" />
                </button>
              </div>
            </div>
            <div class=""roi-list mt-3 flex-inputs"">
              <div class=""input-group custom date-between size-sm"">
                <TextInput
                  type=""date""
                  label=""To""
                />
              </div>
              <div class=""input-group custom date-between size-sm"">
                <TextInput
                  type=""date""
                  label=""From""
                />
              </div>
            </div>
            <div class=""input-group bottom"">
              <FormButton @click=""createTabCalculator()"">
                Submit
              </FormButton>
            </div>
          </PageTab>
          <PageTab
            v-for=""(calcTab, index) in calcTabs""
            :key=""index""
            :title=""'Tab ' + index""
            :closeable=""true""
            @close=""closeTab(calcTab.id)""
          >
            <p>Tab {{ index }}</p>
          </PageTab>
        </PageTabs>
      </template>
    </Page>
  </div>
</template>

<script lang=""ts"" setup>
import '@assets/shared.less'
import Checkbox from '@components/Checkbox.vue'
import Dropdown from '@components/Dropdown.vue'
import FormButton from '@components/FormButton.vue'
import InputList, { type ListOption } from '@components/InputList.vue'
import Page from '@components/Page.vue'
import PageTab from '@components/PageTab.vue'
import PageTabs from '@components/PageTabs.vue'
import TextInput from '@components/TextInput.vue'
import { reactive, ref } from 'vue'
import { fleets, locations, types } from './lists'

let lastIndex = 1
let lastTabIndex = 1

interface ROIObject {
  id: number
  locations: ListOption[]
  types: ListOption[]
  fleets: ListOption[]
  groupAsPop: boolean
  moving: boolean
}

interface TabResult{
  id: number
}

const roiParameters = reactive([createNewROIInstance(1)])

const calcTabs = reactive<TabResult[]>([])

const locationsList = ref(locations)

const typesList = ref(types)

const fleetList = ref(fleets)

function createNewROIInstance (id: number): ROIObject {
  return {
    id,
    locations: [],
    types: [],
    fleets: [],
    groupAsPop: false,
    moving: false
  }
}

function addNewROIItem (): void {
  roiParameters.push(Object.assign(createNewROIInstance(lastIndex++)))
}

function clearFields (item: ROIObject): void {
  Object.assign(item, createNewROIInstance(item.id))
}

function removeRoi (index: number): boolean {
  if (roiParameters.length === 1) {
    clearFields(roiParameters[0])
  } else if (index > 0) {
    const indexToRemove = roiParameters.findIndex(item => item.id === index)
    if (indexToRemove !== -1) {
      roiParameters.splice(indexToRemove, 1)
      return true
    }
  }
  return false
}

function createTabCalculator (): void {
  calcTabs.push(Object.assign({ id: lastTabIndex++ }))
}

function closeTab (index: number): boolean {
  const indexToRemove = calcTabs.findIndex(item => item.id === index)
  if (indexToRemove !== -1) {
    calcTabs.splice(indexToRemove, 1)
    console.log(calcTabs)
    return true
  }
  return false
}
/*
watch(roiParameters, () => {
  console.log(roiParameters)
}, { deep: true })
*/
</script>"
BdHuk3ra,RPi Pico W blink,zhexo,Python,Thursday 21st of December 2023 04:03:12 PM CDT,"import machine
import time

led = machine.Pin('LED', machine.Pin.OUT) #LED Pin

while True:
    led.value(True)   #ukljuci LED
    time.sleep(1)     #pauziraj 1 sekundu
    led.value(False)  #iskljuci LED
    time.sleep(1)     #pauziraj 1 sekundu
"
XvqnpneG,Untitled,sissou123,Python,Thursday 21st of December 2023 03:56:47 PM CDT,"Python 3: Deep Dive (Part 4 - OOP)
Python Object Oriented Programming (OOP)
In-depth functional Python programming

functions, closures, scopes, decorators (using and writing them)

zip, sorted, any, all, and the itertools module in general

for more:https://cuty.io/TNNbbJOwjy"
A0YYkmAp,Untitled,JeffGrigg,Java 5,Thursday 21st of December 2023 03:51:41 PM CDT,"public void onBarcode(final String barcode) {
    if (barcode.isEmpty()) {
        display.displayEmptyBarcodeMessage();
    } else {

        final Price price = catalog.findPrice(barcode);

        if (price == null) {
            display.displayProductNotFoundMessage(barcode);
        } else {
            display.displayPrice(price);
        }
    }
}"
S1TjpaXS,CC Colony 2,GauHelldragon,Lua,Thursday 21st of December 2023 03:44:05 PM CDT,"monitor = peripheral.wrap(""left"")
colony = peripheral.wrap(""down"")


while true do
	sleep(1)
	requests = colony.getRequests()
	monitor.clear()
    monitor.setCursorPos(1,1)
    monitor.write(""Colony Requests"")
	
	foodList = {}
	nonFoodList = {}
	
	for i,v in ipairs(requests) do
	     if ( v.target == ""Resturant"" ) then
			table.insert(foodList,v.desc)
		 else
			table.insert(nonFoodList,v.desc)
		 end 

	end
	i = 1
	for _ , desc in ipairs(nonFoodList) do 
		 monitor.setCursorPos(1,i)
		 i = i + 1
         monitor.write(desc)	  
	end
	monitor.setCursorPos(1,i)
	i = i + 1
    monitor.write(""-----"")
	for _ , desc in ipairs(nonFoodList) do 
		 monitor.setCursorPos(1,i)
		 i = i + 1
         monitor.write(desc)	  
	end
	
end"
4mCbYikM,Untitled,glados123123123123,C#,Thursday 21st of December 2023 03:38:43 PM CDT,"using BepInEx;
using BepInEx.Logging;
using HarmonyLib;
using System;
using System.Collections.Generic;
using System.Collections;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TombsMadnessMod.Patches;
using UnityEngine;
using UnityEngine.PlayerLoop;
using UnityEngine.Windows;
using DunGen;
using Microsoft.VisualBasic.Devices;

namespace TombsMadnessMod
{
    [BepInPlugin(modGUID, modName, modVersion)]

    public class TombsMadnessModBase : BaseUnityPlugin
    {
        private const string modGUID = ""TombVali.TombsMadnessMod"";
        private const string modName = ""Tomb's Madness Mod"";
        private const string modVersion = ""1.0.0.0"";

        private readonly Harmony harmony = new Harmony(modGUID);

        private static TombsMadnessModBase Instance;

        internal ManualLogSource mls;

        void Awake()
        {
            if(Instance == null)
            {
                Instance = null;
            }
            mls = BepInEx.Logging.Logger.CreateLogSource(modGUID);


            mls.LogInfo(""TOMB IN DA SHIZOUCE :)"");
            harmony.PatchAll(typeof(TombsMadnessModBase));
            harmony.PatchAll(typeof(PlayerControlerBPatch));
            harmony.PatchAll(typeof(ForestGiantAI));

        }
        
        void Update()
        {
            GameObject testObject = LC_API.BundleAPI.BundleLoader.GetLoadedAsset<GameObject>(""testobject"");
            Instantiate(testObject);
            mls.LogInfo(""here have a cube"");
        }

    }
}
"
ZZL5XCk3,fin.cp.20231219_stw03_20231222,Dale_Scorcher,Java,Thursday 21st of December 2023 03:31:24 PM CDT,"public class mainCode {

    private static int [][] matrix = {
        {10, 23, 93, 44},
        {22, 34, 25, 3},
        {84, 11, 7, 52},
    };

    public static void addElements () {


        int sum = 0;
        //System.out.print(matrix[0].length);

        for (int i = 0; i <= 2; i++) {
            for (int j = 0; j <= matrix[i].length - 1; j++) {
                if (j == 0 || j == 2) {
                    sum += matrix[i][j];
                }
                //System.out.println(i + "" "" + j);
            }
        }

        System.out.println(""addElement result:"" + sum);

    }

    public static void displayMatrix() {
        System.out.println(""Displaying first and second row of matrix array: "");
        for (int i = 0; i <= 1; i++) {
            for (int j = 0; j <= matrix[i].length - 1; j++) {
                System.out.print(matrix[i][j] + "" "");
                if (j == matrix[i].length -1) {
                    System.out.println("""");
                }
            }
        }
    } 
    
    public static void compareMatrix() {
        int temp = 0;
        for (int i = 0; i <= matrix.length - 1; i++) {
            if (matrix[i][0] >= 0) {
                temp = matrix[i][0];
            } 
        } 

        System.out.println(""The largest number in colum 0 is: "" + temp);
    }
    public static void main(String[] args) {
        addElements();
        displayMatrix();
        compareMatrix();
    }
}"
rtZfK0dK,Untitled,Ilmen,Nim,Thursday 21st of December 2023 03:28:40 PM CDT,"func first_in[T](
   prop: proc (e: T): bool {.noSideEffect.},
   s: seq[T]
): Option[T]

func first_in[T](
   prop: proc (e: T): bool {.noSideEffect.},
   s: seq[T]
): Option[T] =
   for i, e in s:
      if prop(e):
         return some(e)
   return none(T)

func with_optimal_joker_mutation(
   counts: HandCounts
): HandCounts =
   let r: Option[CharCounter] = first_in(
      (e: CharCounter) => (e.item == 'J'), counts)
   if r.isSome:
      let jn = r.get()
      return counts
   else:
      return counts"
AmGu4P7p,Untitled,Ilmen,Nim,Thursday 21st of December 2023 03:27:18 PM CDT,"func first_in[T](
   prop: proc (e: T): bool {.noSideEffect.},
   s: seq[T]
): Option[T]

func with_optimal_joker_mutation(
   counts: HandCounts
): HandCounts =
   let r: Option[CharCounter] = first_in(
      (e: CharCounter) => (e.item == 'J'), counts)
   if r.isSome:
      let jn = r.get()
      return counts
   else:
      return counts

func first_in[T](
   prop: proc (e: T): bool {.noSideEffect.},
   s: seq[T]
): Option[T] =
   for i, e in s:
      if prop(e):
         return some(e)
   return none(T)"
GMFtrscW,G2A Refund Exploit Dec 2023,G2ARefundExploit,GetText,Thursday 21st of December 2023 03:26:01 PM CDT,"G2A refund exploit updated guide - any item for free on G2A.com

https://drive.google.com/file/d/1AKxSk9vs38aBF7GEDJxf8mNi-_NVRLQ9/view#g2a_refund_exploit.pdf

Working as of 
13 December 2023

720386"
mMYSGrER,Minigame Tower,robinmollen,Lua,Thursday 21st of December 2023 03:21:19 PM CDT,require(15704675315)()
uLCzRBYj,dominorunner,Melvinbossyolosweg,C#,Thursday 21st of December 2023 02:17:32 PM CDT,"	partial class DominoRunner : Node
	{
		readonly string[] events;
		readonly StateChart stateChart;

		string topplingEvent;
		int dominoIndex;

		internal DominoRunner(StateChart stateChart, string[] events)
		{
			this.events = events;
			this.stateChart = stateChart;
		}

		void OnEventReceived(StringName @event)
		{
			GD.Print($""Received {@event}."");
			if (@event != topplingEvent)
			{
				GD.Print($""{@event} was not {topplingEvent}."");
				//return;
			}

			dominoIndex++;

			if (dominoIndex >= events.Length)
			{
				GD.Print(""Finished domino."");
				QueueFree();
				return;
			}

			topplingEvent = events[dominoIndex];

			GD.Print($""Toppling {topplingEvent}, index {dominoIndex}."");
			stateChart.Wrapped.CallDeferred(""send_event"", topplingEvent);
		}

		internal void Topple()
		{
			dominoIndex = 0;
			topplingEvent = events[dominoIndex];

			foreach (string str in events)
			{
				GD.Print($""{str} in domino list."");
			}

			stateChart.Connect(""event_received"", new Callable(this, nameof(OnEventReceived)));
			GD.Print($""Toppling initial event {topplingEvent}, index {dominoIndex}."");
			stateChart.SendEvent(topplingEvent);
		}

		static string[] SortEventsByWeight(string[] events)
		{
			Dictionary<string, int> weights = new()
		{
			{ ""usable"", 1 }
		};

			return events.OrderBy(item => weights.ContainsKey(item) ? weights[item] : 0).ToArray();
		}
	}
"
sTXbQpey,Untitled,TakePen,AutoIt,Thursday 21st of December 2023 01:56:58 PM CDT,"Global Const $afWAYPOINTS = [[7], _
    [-2.637649e+02, -1.050344e+04], _
    [ 2.452009e+03, -1.072666e+04], _
    [ 4.870164e+03, -1.018722e+04], _
    [ 6.135045e+03, -9.591983e+03], _
    [ 8.069568e+03, -8.234096e+03], _
    [ 8.795015e+03, -7.080822e+03], _
    [ 9.092634e+03, -5.778739e+03]]


Global Const $afWAYPOINTS = [[7], _
    [-2.637649e+02, -1.050344e+04], _
    [ 2.452009e+03, -1.072666e+04], _
    [ 4.870164e+03, -1.018722e+04], _
    [ 6.135045e+03, -9.591983e+03], _
    [ 8.069568e+03, -8.234096e+03], _
    [ 8.795015e+03, -7.080822e+03], _
    [ 9.092634e+03, -5.778739e+03]]


Global Const $afWAYPOINTS = [[7], _
    [ -263.7649, -10503.4412], _
    [ 2452.0089, -10726.6555], _
    [ 4870.1637, -10187.2210], _
    [ 6135.0446, -9591.9829], _
    [ 8069.5685, -8234.0960], _
    [ 8795.0149, -7080.8222], _
    [ 9092.6339, -5778.7388]]



_asdgjgfsjf($asdggfhfgjkz, 4.870164e+03, -1.018722e+04)
"
mKmKZvUD,Window-Name,TonyR0XX,Lua,Thursday 21st of December 2023 01:51:07 PM CDT,"--lua
-- Change Window name to Cha name in Talisman Online V.6024
log 'clear' log'mode compact'
local TO = findwindow(""Talisman Online"")

function charName()
    local CHAR_NAME_POINTER = readmem(0x01139C0C, ""d"")
    local name = readmem(CHAR_NAME_POINTER + 0xBC, ""s"", 30)

    if string.match(name, ""^[%w]+$"") then return name
    else
        return readmem(readmem(CHAR_NAME_POINTER + 0xBC, ""d"") + 0x0, ""s"", 30)
    end
end

if TO then
    for i = 1, #TO
    do
        workwindow(TO[i][1])
        local name = charName()
        log(charName())
        setwindowtext(TO[i][1], name)
    end
end"
1TUMiDSH,race_selenium,davide1409,Java,Thursday 21st of December 2023 01:20:14 PM CDT,"package com.example.race_selenium;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertTrue;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;


public class MileEKm {
    @Test
    public void Test_Mile_E_Km(){
        String []token;
        Double mile;

        // ottengo quanto vale in miglia un kilometro
        System.setProperty(""webdriver.chrome.driver"", "".\\driver_selenium\\chromedriver.exe"");
        WebDriver driver = new ChromeDriver();
        driver.manage().window().maximize();
        driver.get(""https://www.unitconverters.net/length/km-to-miles.htm"");
        driver.findElement(By.xpath(""//*[@id=\""ucfrom\""]"")).sendKeys(""1"");
        token = driver.findElement(By.xpath(""//*[@id=\""ucresult\""]"")).getText().split(""="");
        mile = Double.parseDouble(token[1].split("" "")[1]);
        driver.close();
        // --------------------------------------------
        
        Double dimpath = mile*20; // quando sono 20 klm in miglia
        int newSpeed = 75; int oldSpeed = 55;

        // Time = ore
        double newTime = dimpath/newSpeed;
        double oldTime = dimpath/oldSpeed;
        double savedTime = oldTime-newTime; // tempo risparmiato in ore
        double savedTimesec = savedTime*3600; // converto ore in secondi

        double upperboundSec = 10*60;
        double lowerboundSec = 10;

        assertTrue(savedTimesec<=upperboundSec && savedTimesec>=lowerboundSec);
    }
}
"
yWMj2Kdn,Дипломы олимпиады ПГУ,letu,PostgreSQL,Thursday 21st of December 2023 01:18:52 PM CDT,"SELECT entrant.surname || ' ' || entrant.name AS ""ФИО"",
faculty.name AS ""Факультет"",
speciality.name AS ""Специальность"",
(SELECT subject.name FROM subject, prof_subject
WHERE subject.id = prof_subject.subject_id
AND prof_subject.allset_id = allset.id LIMIT 1) AS ""Предмет"",
split_part(documents.data, '#', 2) AS ""Место"",
split_part(documents.data, '#', 1) AS ""ДипломОлимпиадыПГУ""
FROM entrant, documents, allset, speciality, faculty
WHERE entrant.id = documents.entrant_id
AND documents.list_documents_id = 48
AND entrant.allset_id = allset.id
AND allset.speciality_id = speciality.id
AND speciality.faculty_id = faculty.id"
VRbhfaxp,Crop It macro,marcusa3000,Lua,Thursday 21st of December 2023 12:59:52 PM CDT,"{
	Tools = ordered() {
		CropIt = GroupOperator {
			CtrlWZoom = false,
			CustomData = {
				Path = {
					Map = {
						[""Setting:""] = ""Macros:/""
					}
				},
			},
			Inputs = ordered() {
				Input = InstanceInput {
					SourceOp = ""CrpTrans"",
					Source = ""Input"",
				},
				Mode = InstanceInput {
					SourceOp = ""CrpCTRL"",
					Source = ""Mode"",
					Page = ""Controls"",
					Default = 0,
				},
				ApplyBlank0 = InstanceInput {
					SourceOp = ""CrpPreMrg"",
					Source = ""ApplyBlank1"",
				},
				FixedNest = InstanceInput {
					SourceOp = ""CrpNmbFrmA"",
					Source = ""FixedNest"",
					Expression = ""CrpCTRL.Mode==0 and 0 or 1"",
					Page = ""Controls"",
				},
				Width = InstanceInput {
					SourceOp = ""CrpCTRL"",
					Source = ""NumberIn5"",
					Page = ""Controls"",
					Default = 500,
				},
				Height = InstanceInput {
					SourceOp = ""CrpCTRL"",
					Source = ""NumberIn6"",
					Page = ""Controls"",
					Default = 400,
				},
				ApplyBlank8 = InstanceInput {
					SourceOp = ""CrpPreMrg"",
					Source = ""ApplyBlank1"",
				},
				FreeNest = InstanceInput {
					SourceOp = ""CrpNmbFrmA"",
					Source = ""FreeNest"",
					Expression = ""CrpCTRL.Mode==1 and 0 or 1"",
					Page = ""Controls"",
				},
				Top = InstanceInput {
					SourceOp = ""CrpPntFrmB"",
					Source = ""Point2"",
					Name = ""Top Right"",
					Page = ""Controls"",
					DefaultX = 0.9,
					DefaultY = 0.9,
				},
				Bottom = InstanceInput {
					SourceOp = ""CrpPntFrmA"",
					Source = ""Point1"",
					Name = ""Bottom Left"",
					Page = ""Controls"",
					DefaultX = 0.1,
					DefaultY = 0.1,
				},
				ApplyBlank10 = InstanceInput {
					SourceOp = ""CrpPreMrg"",
					Source = ""ApplyBlank1"",
				},
				Offset = InstanceInput {
					SourceOp = ""CrpNmbFrmC"",
					Source = ""Center"",
					Name = ""Offset"",
					Page = ""Controls"",
					DefaultX = 0.5,
					DefaultY = 0.5,
				},
				ApplyBlank1 = InstanceInput {
					SourceOp = ""CrpPreMrg"",
					Source = ""ApplyBlank1"",
				},
				Center = InstanceInput {
					SourceOp = ""CrpCTRL"",
					Source = ""GuideCenter"",
					Name = ""Center Guides"",
					Page = ""Controls"",
					Default = 0,
				},
				Third = InstanceInput {
					SourceOp = ""CrpCTRL"",
					Source = ""GuideThird"",
					Name = ""Rule of Third Guides"",
					Page = ""Controls"",
					Default = 1,
				},
				ApplyBlank7 = InstanceInput {
					SourceOp = ""CrpPreMrg"",
					Source = ""ApplyBlank1"",
				},
				FlipHoriz = InstanceInput {
					SourceOp = ""CrpTrans"",
					Source = ""FlipHoriz"",
					ControlGroup = 4,
					Default = 0,
				},
				FlipVert = InstanceInput {
					SourceOp = ""CrpTrans"",
					Source = ""FlipVert"",
					ControlGroup = 4,
					Default = 0,
				},
				Edges = InstanceInput {
					SourceOp = ""CrpTrans"",
					Source = ""Edges"",
					Default = 2,
				},
				AngleNest = InstanceInput {
					SourceOp = ""CrpNmbFrmA"",
					Source = ""AngleNest"",
					Name = ""Size and Rotation"",
					Page = ""Controls"",
				},
				ScaleX = InstanceInput {
					SourceOp = ""CrpNmbFrmB"",
					Source = ""Width"",
					Default = 1,
				},
				ScaleY = InstanceInput {
					SourceOp = ""CrpNmbFrmB"",
					Source = ""Height"",
					Expression = ""Width"",
					Default = 1,
				},
				ApplyBlank5 = InstanceInput {
					SourceOp = ""CrpPreMrg"",
					Source = ""ApplyBlank1"",
				},
				AngleInfo = InstanceInput {
					SourceOp = ""CrpNmbFrmA"",
					Source = ""AngleInfo"",
					Page = ""Controls"",
				},
				Pivot = InstanceInput {
					SourceOp = ""CrpNmbFrmA"",
					Source = ""Center"",
					Page = ""Controls"",
					DefaultX = 0.5,
					DefaultY = 0.5,
				},
				Angle = InstanceInput {
					SourceOp = ""CrpNmbFrmA"",
					Source = ""ZRotation"",
					Page = ""Controls"",
					Default = 0,
				},
				ApplyBlank6 = InstanceInput {
					SourceOp = ""CrpPreMrg"",
					Source = ""ApplyBlank1"",
				},
				FilterMethod = InstanceInput {
					SourceOp = ""CrpTrans"",
					Source = ""FilterMethod"",
					Default = 2,
				},
				GUINest = InstanceInput {
					SourceOp = ""CrpNmbFrmA"",
					Source = ""GUINest"",
					Name = ""UI Settings"",
					Page = ""Controls"",
				},
				GuideBlend = InstanceInput {
					SourceOp = ""CrpCTRL"",
					Source = ""GuideBlend"",
					Page = ""Controls"",
					Default = 0.5,
				},
				Highlight = InstanceInput {
					SourceOp = ""CrpCTRL"",
					Source = ""Highlight"",
					Page = ""Controls"",
					Default = 0,
				},
				Hue = InstanceInput {
					SourceOp = ""CrpCTRL"",
					Source = ""Hue"",
					Page = ""Controls"",
					Default = 0,
				},
				ApplyBlank3 = InstanceInput {
					SourceOp = ""CrpPreMrg"",
					Source = ""ApplyBlank1"",
				},
				FontBlend = InstanceInput {
					SourceOp = ""CrpCTRL"",
					Source = ""Size"",
					Page = ""Controls"",
					Default = 0.5,
				},
				FontSize = InstanceInput {
					SourceOp = ""CrpCTRL"",
					Source = ""FontSize"",
					Name = ""Size"",
					Page = ""Controls"",
					Default = 48,
				},
				ApplyBlank4 = InstanceInput {
					SourceOp = ""CrpPreMrg"",
					Source = ""ApplyBlank1"",
				},
				FrameBlend = InstanceInput {
					SourceOp = ""CrpCTRL"",
					Source = ""FrameBlend"",
					Page = ""Controls"",
					Default = 0.899999976158142,
				},
				Tone = InstanceInput {
					SourceOp = ""CrpCTRL"",
					Source = ""Tone"",
					Page = ""Controls"",
					Default = 0.100000001490116,
				},
				Blur = InstanceInput {
					SourceOp = ""CrpCTRL"",
					Source = ""Blur"",
					Page = ""Controls"",
					Default = 3,
				},
				Saturation = InstanceInput {
					SourceOp = ""CrpCTRL"",
					Source = ""Saturation"",
					Page = ""Controls"",
					Default = 0.5,
				},
				Operation = InstanceInput {
					SourceOp = ""CrpCTRL"",
					Source = ""Operation"",
					Page = ""Controls"",
					Default = 0,
				}
			},
			Outputs = {
				MainOutput1 = InstanceOutput {
					SourceOp = ""CrpSwitch"",
					Source = ""Output"",
				}
			},
			ViewInfo = GroupInfo {
				Pos = { -330, -775.5 },
				Flags = {
					AllowPan = false,
					GridSnap = true,
					ConnectedSnap = true,
					AutoSnap = true,
					RemoveRouters = true
				},
				Size = { 456, 616.59, 228, 24.2424 },
				Direction = ""Vertical"",
				PipeStyle = ""Direct"",
				Scale = 1,
				Offset = { 0, 0 }
			},
			Tools = ordered() {
				CrpTrans = Transform {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Center = Input { Expression = ""CrpNmbFrmC.Center"", },
						Pivot = Input { Expression = ""CrpNmbFrmA.Center"", },
						UseSizeAndAspect = Input { Value = 0, },
						Size = Input { Expression = ""CrpNmbFrmB.Width"", },
						XSize = Input {
							Value = 1,
							Expression = ""CrpNmbFrmB.Width"",
						},
						YSize = Input {
							Value = 1,
							Expression = ""CrpNmbFrmB.Height"",
						},
						Angle = Input { Expression = ""CrpNmbFrmA.ZRotation"", },
					},
					ViewInfo = OperatorInfo { Pos = { -165, 16.5 } },
				},
				CrpPntFrmA = TriangleMask {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Filter = Input { Value = FuID { ""Fast Gaussian"" }, },
						MaskWidth = Input { Value = 960, },
						MaskHeight = Input { Value = 540, },
						PixelAspect = Input { Value = { 1, 1 }, },
						UseFrameFormatSettings = Input { Value = 1, },
						ClippingMode = Input { Value = FuID { ""None"" }, },
						Point1 = Input { Value = { 0.1, 0.1 }, },
						Point2 = Input { Value = { 0.891447368421053, 0.819444444444444 }, },
						Point3 = Input { Value = { 0.5, 0.9 }, },
						ShowViewControls = Input { Expression = ""1-CrpCTRL.Operation"", },
					},
					ViewInfo = OperatorInfo { Pos = { 0, 49.5 } },
					Colors = { TileColor = { R = 0.6, G = 0.450980392156863, B = 0.627450980392157 }, },
					UserControls = ordered() { Point1 = { INP_DefaultX = 0, INPID_PreviewControl = ""CrosshairControl"", INP_DefaultY = 0, LINKID_DataType = ""Point"", ICS_ControlPage = ""Controls"", INPID_InputControl = ""OffsetControl"", CHC_Style = ""NormalCross"", LINKS_Name = ""Bottom"", }, Point2 = { INP_DefaultX = 1, INPID_PreviewControl = ""CrosshairControl"", INP_DefaultY = 1, LINKID_DataType = ""Point"", ICS_ControlPage = ""Controls"", INPID_InputControl = ""OffsetControl"", CHC_Style = ""NormalCross"", LINKS_Name = ""Top"", }, Point3 = { INP_DefaultX = 0.5, INPID_PreviewControl = ""CrosshairControl"", INP_DefaultY = 0.5, LINKID_DataType = ""Point"", ICS_ControlPage = ""Controls"", INPID_InputControl = ""OffsetControl"", CHC_Style = ""NormalCross"", LINKS_Name = ""Offset"", }, ShowViewControls = { INP_MaxAllowed = 1, INP_Integer = false, INPID_InputControl = ""CheckboxControl"", INP_MaxScale = 1, INP_Default = 1, INP_MinAllowed = 0, INP_MinScale = 0, INP_External = true, LINKID_DataType = ""Number"", CBC_TriState = false, INP_Passive = true, ICS_ControlPage = ""Controls"", LINKS_Name = ""Show View Controls"" } }
				},
				CrpPntFrmB = TriangleMask {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Filter = Input { Value = FuID { ""Fast Gaussian"" }, },
						MaskWidth = Input { Value = 960, },
						MaskHeight = Input { Value = 540, },
						PixelAspect = Input { Value = { 1, 1 }, },
						UseFrameFormatSettings = Input { Value = 1, },
						ClippingMode = Input { Value = FuID { ""None"" }, },
						Point1 = Input { Value = { 0.162974, 0.332407407407407 }, },
						Point2 = Input { Value = { 0.9, 0.9 }, },
						Point3 = Input { Value = { 0.690724, 0.509259259259259 }, },
						ShowViewControls = Input { Expression = ""CrpCTRL.Operation==1 and 0 or CrpCTRL.Mode==1 and 0 or 1"", },
					},
					ViewInfo = OperatorInfo { Pos = { 110, 49.5 } },
					Colors = { TileColor = { R = 0.6, G = 0.450980392156863, B = 0.627450980392157 }, },
					UserControls = ordered() { Point1 = { INP_DefaultX = 0, INPID_PreviewControl = ""CrosshairControl"", INP_DefaultY = 0, LINKID_DataType = ""Point"", ICS_ControlPage = ""Controls"", INPID_InputControl = ""OffsetControl"", CHC_Style = ""NormalCross"", LINKS_Name = ""Bottom"", }, Point2 = { INP_DefaultX = 1, INPID_PreviewControl = ""CrosshairControl"", INP_DefaultY = 1, LINKID_DataType = ""Point"", ICS_ControlPage = ""Controls"", INPID_InputControl = ""OffsetControl"", CHC_Style = ""NormalCross"", LINKS_Name = ""Top"", }, Point3 = { INP_DefaultX = 0.5, INPID_PreviewControl = ""CrosshairControl"", INP_DefaultY = 0.5, LINKID_DataType = ""Point"", ICS_ControlPage = ""Controls"", INPID_InputControl = ""OffsetControl"", CHC_Style = ""NormalCross"", LINKS_Name = ""Offset"", }, ShowViewControls = { INP_MaxAllowed = 1, INP_Integer = false, INPID_InputControl = ""CheckboxControl"", INP_MaxScale = 1, INP_Default = 1, INP_External = true, INP_MinScale = 0, INP_MinAllowed = 0, LINKID_DataType = ""Number"", ICS_ControlPage = ""Controls"", INP_Passive = true, CBC_TriState = false, LINKS_Name = ""Show View Controls"" } }
				},
				CrpNmbFrmA = PolylineMask {
					DrawMode = ""ClickAppend"",
					DrawMode2 = ""InsertAndModify"",
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Filter = Input { Value = FuID { ""Fast Gaussian"" }, },
						OutputSize = Input { Value = FuID { ""Custom"" }, },
						MaskWidth = Input { Value = 608, },
						MaskHeight = Input { Value = 1080, },
						PixelAspect = Input { Value = { 1, 1 }, },
						ClippingMode = Input { Value = FuID { ""None"" }, },
						Polyline = Input {
							Value = Polyline {
							},
						},
						Polyline2 = Input {
							Value = Polyline {
							},
							Disabled = true,
						},
						ShowViewControls = Input { Expression = ""CrpNmbFrmA.AngleNest==0 and 0 or CrpCTRL.Operation==1 and 0 or 1"", },
						FixedNest = Input { Expression = ""CrpCTRL.Mode==0 and 0 or 1"", },
						FreeNest = Input { Expression = ""CrpCTRL.Mode==1 and 0 or 1"", },
					},
					ViewInfo = OperatorInfo { Pos = { -55, 82.5 } },
					Colors = { TileColor = { R = 0.6, G = 0.450980392156863, B = 0.627450980392157 }, },
					UserControls = ordered() { ShowViewControls = { INP_MaxAllowed = 1, INP_Integer = false, INPID_InputControl = ""CheckboxControl"", INP_MaxScale = 1, INP_Default = 1, INP_External = true, INP_MinScale = 0, INP_MinAllowed = 0, LINKID_DataType = ""Number"", ICS_ControlPage = ""Controls"", INP_Passive = true, CBC_TriState = false, LINKS_Name = ""Show View Controls"" }, AngleNest = { INP_Integer = false, LBLC_DropDownButton = true, INPID_InputControl = ""LabelControl"", LBLC_NumInputs = 8, INP_Default = 0, LINKID_DataType = ""Number"", INP_Passive = true, ICS_ControlPage = ""Controls"", LINKS_Name = ""Angle Nest"", }, GUINest = { INP_Integer = false, LBLC_DropDownButton = true, INPID_InputControl = ""LabelControl"", LBLC_NumInputs = 11, INP_Default = 0, LINKID_DataType = ""Number"", INP_Passive = true, ICS_ControlPage = ""Controls"", LINKS_Name = ""GUI Nest"", }, FixedNest = { INP_Integer = false, LBLC_DropDownButton = true, INPID_InputControl = ""LabelControl"", LBLC_NumInputs = 3, LINKS_Name = ""Fixed Nest"", LINKID_DataType = ""Number"", INP_Passive = true, LBLC_NestLevel = 1, ICS_ControlPage = ""Controls"", IC_Visible = false, }, FreeNest = { INP_Integer = false, LBLC_DropDownButton = true, INPID_InputControl = ""LabelControl"", LBLC_NumInputs = 1, LINKS_Name = ""Free Nest"", LINKID_DataType = ""Number"", INP_Passive = true, LBLC_NestLevel = 1, ICS_ControlPage = ""Controls"", IC_Visible = false, }, Center = { INP_DefaultX = 0.5, INPID_PreviewControl = ""CrosshairControl"", INP_DefaultY = 0.5, LINKID_DataType = ""Point"", ICS_ControlPage = ""Controls"", INPID_InputControl = ""OffsetControl"", CHC_Style = ""DiagonalCross"", LINKS_Name = ""Pivot"", }, ZRotation = { INP_MaxAllowed = 1000000, INP_Integer = false, INPID_InputControl = ""ScrewControl"", IC_Steps = 3601, INP_MaxScale = 360, INP_Default = 0, INPID_PreviewControl = ""AngleControl"", INP_MinAllowed = -1000000, LINKID_DataType = ""Number"", ICS_ControlPage = ""Controls"", INP_MinScale = 0, LINKS_Name = ""Angle"" }, AngleInfo = { INP_MaxAllowed = 1000000, INP_Integer = false, LBLC_DropDownButton = false, INPID_InputControl = ""LabelControl"", INP_MaxScale = 1, INP_MinScale = 0, INP_MinAllowed = -1000000, LINKID_DataType = ""Number"", INP_Passive = true, ICS_ControlPage = ""Controls"", LINKS_Name = ""Tip: Set Pivot before Offset and Angle"" } }
				},
				CrpCTRL = Custom {
					CtrlWShown = false,
					NameSet = true,
					CustomData = {
						Settings = {
						}
					},
					Inputs = {
						Blend = Input { Value = 0.9, },
						LUTIn1 = Input {
							SourceOp = ""CrpCTRLLUTIn1"",
							Source = ""Value"",
						},
						LUTIn2 = Input {
							SourceOp = ""CrpCTRLLUTIn2"",
							Source = ""Value"",
						},
						LUTIn3 = Input {
							SourceOp = ""CrpCTRLLUTIn3"",
							Source = ""Value"",
						},
						LUTIn4 = Input {
							SourceOp = ""CrpCTRLLUTIn4"",
							Source = ""Value"",
						},
						NumberControls = Input { Value = 1, },
						ShowNumber1 = Input { Value = 0, },
						NameforNumber1 = Input { Value = ""asdfadf"", },
						ShowNumber2 = Input { Value = 0, },
						ShowNumber3 = Input { Value = 0, },
						ShowNumber4 = Input { Value = 0, },
						NameforNumber5 = Input { Value = ""Width"", },
						NameforNumber6 = Input { Value = ""Height"", },
						ShowNumber7 = Input { Value = 0, },
						NameforNumber7 = Input { Value = ""Angle"", },
						ShowNumber8 = Input { Value = 0, },
						NameforNumber8 = Input { Value = ""Size"", },
						PointControls = Input { Value = 1, },
						ShowPoint1 = Input { Value = 0, },
						NameforPoint1 = Input { Value = ""TopORG"", },
						NameforPoint2 = Input { Value = ""Bottom"", },
						NameforPoint3 = Input { Value = ""Fixed Size"", },
						NameforPoint4 = Input { Value = ""Top"", },
						ShowLUT1 = Input { Value = 0, },
						ShowLUT2 = Input { Value = 0, },
						ShowLUT3 = Input { Value = 0, },
						ShowLUT4 = Input { Value = 0, },
						Offset = Input {
							SourceOp = ""Publish8_4"",
							Source = ""Value"",
						},
						Preview = Input { Expression = ""Operation==1 and 0 or 1"", },
						Tone = Input { Value = 0.1, },
						GuideBlend = Input { Value = 1, },
						Highlight = Input { Value = 0, },
						NumberIn1 = Input { Value = 0, },
						PointIn1 = Input { Value = { -0.289473684210526, 0.665740740740741 }, },
						PointIn2 = Input {
							Value = { 0.146381578947368, 0.332407407407407 },
							Expression = ""CrpPntFrmA.Point1"",
						},
						FontSize = Input { Value = 48, },
						FrameBlend = Input { Value = 0.9, },
						NumberIn8 = Input { Value = 0, },
						NumberIn7 = Input { Value = -20.9, },
						PointIn4 = Input {
							Value = { 0.891447368421053, 0.841666666666667 },
							Expression = ""CrpPntFrmB.Point2"",
						},
						NumberIn5 = Input { Value = 400, },
						NumberIn6 = Input { Value = 400, },
						PointIn3 = Input {
							Value = { 42, 42 },
							Expression = ""CrpCTRL.Mode==1 and Point(CrpCTRL.PointIn2.X+((1/CrpTrans.Input.Width)*CrpCTRL.NumberIn5), CrpCTRL.PointIn2.Y+((1/CrpTrans.Input.Height)*CrpCTRL.NumberIn6)) or Point(42, 42)"",
						},
						Operation = Input { Value = 0, },
						Topapa = Input {
							Value = { 0.880447, 0.878667 },
							Expression = ""CrpPntFrmB.Point2"",
						},
					},
					ViewInfo = OperatorInfo { Pos = { 55, 115.5 } },
					Colors = { TileColor = { R = 0.584313725490196, G = 0.294117647058824, B = 0.803921568627451 }, },
					UserControls = ordered() { Offset = { INPID_InputControl = ""OffsetControl"", CHC_Style = ""NormalCross"", INP_DefaultX = 0.5, INPID_PreviewControl = ""CrosshairControl"", INP_DefaultY = 0.5, LINKID_DataType = ""Point"", INP_External = false, INP_Passive = true, ICS_ControlPage = ""Controls"", LINKS_Name = ""Offset"", }, Preview = { CBC_TriState = false, INP_Integer = false, LINKID_DataType = ""Number"", INP_Default = 1, ICS_ControlPage = ""Controls"", INPID_InputControl = ""CheckboxControl"", LINKS_Name = ""Preview"", }, Tone = { INP_MaxAllowed = 1, INP_Integer = false, INPID_InputControl = ""SliderControl"", INP_MaxScale = 1, INP_Default = 0.100000001490116, INP_MinScale = 0, INP_MinAllowed = 0, LINKID_DataType = ""Number"", INP_External = false, ICS_ControlPage = ""Controls"", LINKS_Name = ""Tone"" }, GuideBlend = { INP_MaxAllowed = 1, INP_Integer = false, INPID_InputControl = ""SliderControl"", INP_MaxScale = 1, INP_Default = 0.5, INP_MinScale = 0, INP_MinAllowed = 0, LINKID_DataType = ""Number"", ICS_ControlPage = ""Controls"", LINKS_Name = ""Guide Blend"" }, GuideCenter = { CBC_TriState = false, INP_Integer = false, ICS_ControlPage = ""Controls"", INP_Default = 1, INP_External = false, LINKID_DataType = ""Number"", INP_Passive = true, INPID_InputControl = ""CheckboxControl"", LINKS_Name = ""Guide Center"", }, GuideThird = { CBC_TriState = false, INP_Integer = false, ICS_ControlPage = ""Controls"", INP_Default = 0, INP_External = false, LINKID_DataType = ""Number"", INP_Passive = true, INPID_InputControl = ""CheckboxControl"", LINKS_Name = ""Guide Third"", }, Highlight = { INP_MaxAllowed = 1, INP_Integer = false, INPID_InputControl = ""SliderControl"", INP_MaxScale = 1, INP_Default = 0.5, INP_MinScale = 0, INP_MinAllowed = 0, LINKID_DataType = ""Number"", ICS_ControlPage = ""Controls"", LINKS_Name = ""Highlight"" }, Hue = { INP_MaxAllowed = 1, INP_Integer = false, INPID_InputControl = ""SliderControl"", INP_MaxScale = 1, INP_Default = 0, INP_MinScale = 0, INP_MinAllowed = 0, LINKID_DataType = ""Number"", ICS_ControlPage = ""Controls"", LINKS_Name = ""Hue"" }, NumberIn1 = { INP_MaxAllowed = 1000000, INP_Integer = false, INPID_InputControl = ""SliderControl"", INP_MaxScale = 5, INP_Default = 1, INP_MinScale = 0, INP_MinAllowed = 0, LINKID_DataType = ""Number"", ICS_ControlPage = ""Controls"", ICD_Center = 1, LINKS_Name = ""Size"" }, PointIn1 = { INP_DefaultX = 1, INP_DefaultY = 1, LINKID_DataType = ""Point"", ICS_ControlPage = ""Controls"", INPID_InputControl = ""OffsetControl"", LINKS_Name = ""Top"", }, PointIn2 = { INP_DefaultX = 0, INPID_PreviewControl = ""CrosshairControl"", INP_DefaultY = 0, LINKID_DataType = ""Point"", ICS_ControlPage = ""Controls"", INPID_InputControl = ""OffsetControl"", CHC_Style = ""NormalCross"", LINKS_Name = ""Bottom"", }, FontSize = { INP_MaxAllowed = 1000000, INP_Integer = true, INPID_InputControl = ""SliderControl"", INP_MaxScale = 60, INP_Default = 30, INP_MinScale = 15, INP_MinAllowed = 8, LINKID_DataType = ""Number"", INP_External = false, ICS_ControlPage = ""Controls"", LINKS_Name = ""Font Size"" }, Size = { INP_MaxAllowed = 1000000, INP_Integer = false, INPID_InputControl = ""SliderControl"", INP_MaxScale = 1, INP_Default = 0.5, INP_MinScale = 0, INP_MinAllowed = -1000000, LINKID_DataType = ""Number"", INP_External = false, ICS_ControlPage = ""Controls"", LINKS_Name = ""Font Blend"" }, Saturation = { INP_MaxAllowed = 2, INP_Integer = false, INPID_InputControl = ""SliderControl"", INP_MaxScale = 1, INP_Default = 0.5, INP_MinScale = 0, INP_MinAllowed = 0, LINKID_DataType = ""Number"", INP_External = false, ICS_ControlPage = ""Controls"", LINKS_Name = ""Saturation"" }, FrameBlend = { INP_MaxAllowed = 1, INP_Integer = false, INPID_InputControl = ""SliderControl"", INP_MaxScale = 1, INP_Default = 0.899999976158142, INP_MinScale = 0, INP_MinAllowed = 0, LINKID_DataType = ""Number"", INP_External = false, ICS_ControlPage = ""Controls"", LINKS_Name = ""Frame Blend"" }, NumberIn8 = { INP_MaxAllowed = 1000000, INP_Integer = false, INPID_InputControl = ""SliderControl"", INP_MaxScale = 5, INP_Default = 1, INP_MinScale = 0, INP_MinAllowed = 0, LINKID_DataType = ""Number"", ICS_ControlPage = ""Controls"", ICD_Center = 1, LINKS_Name = ""Size"" }, NumberIn7 = { INP_MaxAllowed = 1000000, INP_Integer = false, INPID_InputControl = ""ScrewControl"", IC_Steps = 3601, INP_MaxScale = 360, INP_MinScale = 0, INP_MinAllowed = -1000000, LINKID_DataType = ""Number"", ICS_ControlPage = ""Controls"", LINKS_Name = ""Angle"" }, PointIn4 = { INP_DefaultX = 0.5, INPID_PreviewControl = ""CrosshairControl"", INP_DefaultY = 0.600000023841858, LINKID_DataType = ""Point"", ICS_ControlPage = ""Controls"", INPID_InputControl = ""OffsetControl"", CHC_Style = ""NormalCross"", LINKS_Name = ""TopCtrl"", }, NumberIn5 = { INP_MaxAllowed = 1000000, INP_Integer = true, INPID_InputControl = ""ScrewControl"", INP_MaxScale = 242, INP_Default = 42, INP_MinScale = 1, INP_MinAllowed = 1, LINKID_DataType = ""Number"", ICS_ControlPage = ""Controls"", LINKS_Name = ""Width"" }, NumberIn6 = { INP_MaxAllowed = 1000000, INP_Integer = true, INPID_InputControl = ""ScrewControl"", INP_MaxScale = 242, INP_Default = 42, INP_MinScale = 1, INP_MinAllowed = 1, LINKID_DataType = ""Number"", ICS_ControlPage = ""Controls"", LINKS_Name = ""Height"" }, Mode = { { MBTNC_AddButton = ""Free"" }, { MBTNC_AddButton = ""Fixed"" }, INP_MaxAllowed = 1000000, INP_Integer = false, INPID_InputControl = ""MultiButtonControl"", MBTNC_ShowBasicButton = true, INP_MaxScale = 1, INP_Default = 0, ICS_ControlPage = ""Controls"", INP_MinScale = 0, INP_MinAllowed = -1000000, LINKID_DataType = ""Number"", MBTNC_ShowName = false, MBTNC_StretchToFit = false, MBTNC_ShowToolTip = false, LINKS_Name = ""Mode"" }, PointIn3 = { INPID_PreviewControl = ""CrosshairControl"", LINKID_DataType = ""Point"", ICS_ControlPage = ""Controls"", INPID_InputControl = ""OffsetControl"", CHC_Style = ""Circle"", LINKS_Name = ""Fixed Size"", }, Operation = { { MBTNC_AddButton = ""Preview"" }, { MBTNC_AddButton = ""Just Crop It"" }, INP_Integer = false, INPID_InputControl = ""MultiButtonControl"", MBTNC_ShowBasicButton = true, INP_Default = 9, ICS_ControlPage = ""Controls"", LINKID_DataType = ""Number"", MBTNC_ShowName = false, MBTNC_StretchToFit = false, MBTNC_ShowToolTip = false, LINKS_Name = ""Operation"", }, Blur = { INP_MaxAllowed = 20, INP_Integer = true, INPID_InputControl = ""SliderControl"", INP_MaxScale = 10, INP_Default = 3, INP_MinScale = 0, INP_MinAllowed = 0, LINKID_DataType = ""Number"", ICS_ControlPage = ""Controls"", ICD_Center = 3, LINKS_Name = ""Blur"" }, Pivot = { INP_DefaultX = 0.5, INPID_PreviewControl = ""CrosshairControl"", INP_DefaultY = 0.5, LINKID_DataType = ""Point"", ICS_ControlPage = ""Controls"", INPID_InputControl = ""OffsetControl"", CHC_Style = ""DiagonalCross"", LINKS_Name = ""Pivot"", }, Topapa = { ICS_ControlPage = ""Controls"", INPID_InputControl = ""OffsetControl"", LINKID_DataType = ""Point"", LINKS_Name = ""Topapa"", }, OffsetNew = { INP_DefaultX = 0.5, INPID_PreviewControl = ""CrosshairControl"", INP_DefaultY = 0.5, LINKID_DataType = ""Point"", ICS_ControlPage = ""Controls"", INPID_InputControl = ""OffsetControl"", CHC_Style = ""NormalCross"", LINKS_Name = ""Offset New"", } }
				},
				CrpCTRLLUTIn1 = LUTBezier {
					KeyColorSplines = {
						[0] = {
							[0] = { 0, RH = { 0.333333333333333, 0.333333333333333 }, Flags = { Linear = true } },
							[1] = { 1, LH = { 0.666666666666667, 0.666666666666667 }, Flags = { Linear = true } }
						}
					},
					SplineColor = { Red = 204, Green = 0, Blue = 0 },
					CtrlWZoom = false,
				},
				CrpCTRLLUTIn2 = LUTBezier {
					KeyColorSplines = {
						[0] = {
							[0] = { 0, RH = { 0.333333333333333, 0.333333333333333 }, Flags = { Linear = true } },
							[1] = { 1, LH = { 0.666666666666667, 0.666666666666667 }, Flags = { Linear = true } }
						}
					},
					SplineColor = { Red = 0, Green = 204, Blue = 0 },
					CtrlWZoom = false,
				},
				CrpCTRLLUTIn3 = LUTBezier {
					KeyColorSplines = {
						[0] = {
							[0] = { 0, RH = { 0.333333333333333, 0.333333333333333 }, Flags = { Linear = true } },
							[1] = { 1, LH = { 0.666666666666667, 0.666666666666667 }, Flags = { Linear = true } }
						}
					},
					SplineColor = { Red = 0, Green = 0, Blue = 204 },
					CtrlWZoom = false,
				},
				CrpCTRLLUTIn4 = LUTBezier {
					KeyColorSplines = {
						[0] = {
							[0] = { 0, RH = { 0.333333333333333, 0.333333333333333 }, Flags = { Linear = true } },
							[1] = { 1, LH = { 0.666666666666667, 0.666666666666667 }, Flags = { Linear = true } }
						}
					},
					SplineColor = { Red = 204, Green = 204, Blue = 204 },
					CtrlWZoom = false,
				},
				Publish8_4 = PublishPoint {
					CtrlWZoom = false,
					Inputs = {
						Value = Input { Value = { 0.667763157894737, 0.5 }, },
					},
				},
				CrpBlur = Blur {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						EffectMask = Input {
							SourceOp = ""CrpFrame"",
							Source = ""Mask"",
						},
						Filter = Input { Value = FuID { ""Box"" }, },
						XBlurSize = Input {
							Value = 3,
							Expression = ""CrpCTRL.Blur"",
						},
						ClippingMode = Input { Value = FuID { ""Domain"" }, },
						Input = Input {
							SourceOp = ""CrpCD"",
							Source = ""Output"",
						},
					},
					ViewInfo = OperatorInfo { Pos = { 0, 181.5 } },
				},
				CrpCD = ChangeDepth {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Depth = Input { Value = 1, },
						Input = Input {
							SourceOp = ""CrpTrans"",
							Source = ""Output"",
						},
					},
					ViewInfo = OperatorInfo { Pos = { -110, 181.5 } },
				},
				Filter1 = Filter {
					CtrlWShown = false,
					Inputs = {
						EffectMask = Input {
							SourceOp = ""CrpFrame"",
							Source = ""Mask"",
						},
						Blend = Input { Value = 0.5, },
						FilterType = Input { Value = 6, },
						Power = Input {
							Value = 2,
							Expression = ""CrpCTRL.Blur/2"",
						},
						Animated = Input { Value = 0, },
						Input = Input {
							SourceOp = ""CrpBlur"",
							Source = ""Output"",
						},
					},
					ViewInfo = OperatorInfo { Pos = { 0, 214.5 } },
				},
				CrpThird = PaintMask {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Level = Input {
							Value = 0,
							Expression = ""(1*CrpCTRL.GuideThird)*CrpCTRL.GuideBlend"",
						},
						Filter = Input { Value = FuID { ""Fast Gaussian"" }, },
						PaintMode = Input { Value = FuID { ""None"" }, },
						MaskWidth = Input { Value = 960, },
						MaskHeight = Input { Value = 540, },
						PixelAspect = Input { Value = { 1, 1 }, },
						UseFrameFormatSettings = Input { Value = 1, },
						ClippingMode = Input { Value = FuID { ""None"" }, },
						Paint = Input {
							SourceOp = ""PolylineStroke6"",
							Source = ""Out"",
						},
					},
					ViewInfo = OperatorInfo { Pos = { 165, 247.5 } },
				},
				PolylineStroke6 = PolylineStroke {
					Points = {
					},
					IsThreaded = true,
					Brushes = { ""CircleBrush"" },
					ApplyModes = { ""PaintApplyColor"" },
					CtrlWZoom = false,
					CurrentSettings = 2,
					CustomData = {
						Settings = {
							[1] = {
								Tools = ordered() {
									PolylineStroke6 = PolylineStroke { ApplyModes = { ""PaintApplyColor"" }, Inputs = { Point0 = Input { Value = { 0.786184210526316, 1 }, Expression = ""CTRLCrop.Mode==1 and Point(CTRLCrop.PointIn2.X + ((CTRLCrop.PointIn3.X - CTRLCrop.PointIn2.X)/3)*2, 1.0) or Point(CTRLCrop.PointIn2.X + ((CTRLCrop.PointIn1.X - CTRLCrop.PointIn2.X)/3)*2, 1.0)"" }, Paint = Input { SourceOp = ""PolylineStroke5"", Source = ""Out"" }, BrushShape = Input { Value = FuID { ""CircleBrush"" } }, Spacing = Input { Value = 1 }, Point1 = Input { Value = { 0.786184210526316, 0 }, Expression = ""CTRLCrop.Mode==1 and Point(CTRLCrop.PointIn2.X + ((CTRLCrop.PointIn3.X - CTRLCrop.PointIn2.X)/3)*2, 0.0) or Point(CTRLCrop.PointIn2.X + ((CTRLCrop.PointIn1.X - CTRLCrop.PointIn2.X)/3)*2, 0.0)"" }, Polyline = Input { Value = Polyline { Points = { { Y = 0.5, X = 0.286184210526316, Linear = true, RY = -0.333333333333333, PublishID = ""Point0"", RX = 0 }, { Y = -0.5, X = 0.286184210526316, Linear = true, PublishID = ""Point1"", LY = 0.333333333333333, LX = 0 } } } }, [""CircleBrush.Size""] = Input { Value = 0.00164473684210526, Expression = ""PolylineStroke3.CircleBrush.Size"" } }, CustomData = {
										}, CtrlWZoom = false, IsThreaded = true, Points = {
										}, Brushes = { ""CircleBrush"" } },
									PolylineStroke5 = PolylineStroke { Inputs = { Point0 = Input { Value = { 0.43859649122807, 1 }, Expression = ""CTRLCrop.Mode==1 and Point(CTRLCrop.PointIn2.X + ((CTRLCrop.PointIn3.X - CTRLCrop.PointIn2.X)/3), 1.0) or Point(CTRLCrop.PointIn2.X + ((CTRLCrop.Topapa.X - CTRLCrop.PointIn2.X)/3), 1.0)"" }, Paint = Input { SourceOp = ""PolylineStroke4"", Source = ""Out"" }, BrushShape = Input { Value = FuID { ""CircleBrush"" } }, Spacing = Input { Value = 1 }, Point1 = Input { Value = { 0.43859649122807, 0 }, Expression = ""CTRLCrop.Mode==1 and Point(CTRLCrop.PointIn2.X + ((CTRLCrop.PointIn3.X - CTRLCrop.PointIn2.X)/3), 0.0) or Point(CTRLCrop.PointIn2.X + ((CTRLCrop.Topapa.X - CTRLCrop.PointIn2.X)/3), 0.0)"" }, Polyline = Input { Value = Polyline { Points = { { Y = 0.5, X = -0.0614035087719298, Linear = true, RY = -0.333333333333333, PublishID = ""Point0"", RX = 0 }, { Y = -0.5, X = -0.0614035087719298, Linear = true, PublishID = ""Point1"", LY = 0.333333333333333, LX = 0 } } } }, [""CircleBrush.Size""] = Input { Value = 0.00164473684210526, Expression = ""PolylineStroke3.CircleBrush.Size"" } }, CtrlWZoom = false, IsThreaded = true, Brushes = { ""CircleBrush"" }, ApplyModes = { ""PaintApplyColor"" }, Points = {
										}, CurrentSettings = 2, CustomData = {
											Settings = {
												[1] = {
													Tools = ordered() {
														PolylineStroke5 = PolylineStroke { ApplyModes = { ""PaintApplyColor"" }, Inputs = { Point0 = Input { Value = { 0.5, 1 }, Expression = ""CTRLCrop.Mode==1 and Point(CTRLCrop.PointIn2.X + ((CTRLCrop.PointIn3.X - CTRLCrop.PointIn2.X)/3), 1.0) or Point(CTRLCrop.PointIn2.X + ((CTRLCrop.PointIn1.X - CTRLCrop.PointIn2.X)/3), 1.0)"" }, Paint = Input { SourceOp = ""PolylineStroke4"", Source = ""Out"" }, BrushShape = Input { Value = FuID { ""CircleBrush"" } }, Spacing = Input { Value = 1 }, Point1 = Input { Value = { 0.5, 0 }, Expression = ""CTRLCrop.Mode==1 and Point(CTRLCrop.PointIn2.X + ((CTRLCrop.PointIn3.X - CTRLCrop.PointIn2.X)/3), 0.0) or Point(CTRLCrop.PointIn2.X + ((CTRLCrop.PointIn1.X - CTRLCrop.PointIn2.X)/3), 0.0)"" }, Polyline = Input { Value = Polyline { Points = { { Y = 0.5, X = 0, Linear = true, RY = -0.333333333333333, PublishID = ""Point0"", RX = 0 }, { Y = -0.5, X = 0, Linear = true, PublishID = ""Point1"", LY = 0.333333333333333, LX = 0 } } } }, [""CircleBrush.Size""] = Input { Value = 0.00164473684210526, Expression = ""PolylineStroke3.CircleBrush.Size"" } }, CustomData = {
															}, CtrlWZoom = false, IsThreaded = true, Points = {
															}, Brushes = { ""CircleBrush"" } },
														PolylineStroke4 = PolylineStroke { Inputs = { Point0 = Input { Value = { 0, 0.435493827160494 }, Expression = ""CTRLCrop.Mode==1 and Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)) or Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.Topapa.Y - CTRLCrop.PointIn2.Y)/3))"" }, Paint = Input { SourceOp = ""PolylineStroke3"", Source = ""Out"" }, BrushShape = Input { Value = FuID { ""CircleBrush"" } }, Spacing = Input { Value = 1 }, Point1 = Input { Value = { 1, 0.435493827160494 }, Expression = ""CTRLCrop.Mode==1 and Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)) or Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.Topapa.Y - CTRLCrop.PointIn2.Y)/3))"" }, Polyline = Input { Value = Polyline { Points = { { Y = -0.0645061728395062, X = -0.5, Linear = true, RY = 0, PublishID = ""Point0"", RX = 0.333333333333333 }, { Y = -0.0645061728395062, X = 0.5, Linear = true, PublishID = ""Point1"", LY = 0, LX = -0.333333333333333 } } } }, [""CircleBrush.Size""] = Input { Value = 0.00164473684210526, Expression = ""PolylineStroke3.CircleBrush.Size"" } }, CtrlWZoom = false, IsThreaded = true, Brushes = { ""CircleBrush"" }, ApplyModes = { ""PaintApplyColor"" }, Points = {
															}, CurrentSettings = 2, CustomData = {
																Settings = {
																	[1] = {
																		Tools = ordered() {
																			PolylineStroke4 = PolylineStroke { ApplyModes = { ""PaintApplyColor"" }, Inputs = { Point0 = Input { Value = { 0, 0.408333333333333 }, Expression = ""CTRLCrop.Mode==1 and Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)) or Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn1.Y - CTRLCrop.PointIn2.Y)/3))"" }, Paint = Input { SourceOp = ""PolylineStroke3"", Source = ""Out"" }, BrushShape = Input { Value = FuID { ""CircleBrush"" } }, Spacing = Input { Value = 1 }, Point1 = Input { Value = { 1, 0.408333333333333 }, Expression = ""CTRLCrop.Mode==1 and Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)) or Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn1.Y - CTRLCrop.PointIn2.Y)/3))"" }, Polyline = Input { Value = Polyline { Points = { { Y = -0.0916666666666667, X = -0.5, Linear = true, RY = 0, PublishID = ""Point0"", RX = 0.333333333333333 }, { Y = -0.0916666666666667, X = 0.5, Linear = true, PublishID = ""Point1"", LY = 0, LX = -0.333333333333333 } } } }, [""CircleBrush.Size""] = Input { Value = 0.00164473684210526, Expression = ""PolylineStroke3.CircleBrush.Size"" } }, CustomData = {
																				}, CtrlWZoom = false, IsThreaded = true, Points = {
																				}, Brushes = { ""CircleBrush"" } },
																			PolylineStroke3 = PolylineStroke { Inputs = { Point0 = Input { Value = { 0, 0.677469135802469 }, Expression = ""CTRLCrop.Mode==1 and Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)*2) or Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.Topapa.Y - CTRLCrop.PointIn2.Y)/3)*2)"" }, BrushShape = Input { Value = FuID { ""CircleBrush"" } }, Spacing = Input { Value = 1 }, Point1 = Input { Value = { 1, 0.677469135802469 }, Expression = ""CTRLCrop.Mode==1 and Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)*2) or Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.Topapa.Y - CTRLCrop.PointIn2.Y)/3)*2)"" }, Polyline = Input { Value = Polyline { Points = { { Y = 0.177469135802469, X = -0.5, Linear = true, RY = 0, PublishID = ""Point0"", RX = 0.333333333333333 }, { Y = 0.177469135802469, X = 0.5, Linear = true, PublishID = ""Point1"", LY = 0, LX = -0.333333333333333 } } } }, [""CircleBrush.Size""] = Input { Value = 0.00164473684210526, Expression = ""1/CrpTrans.Output.Width"" } }, CtrlWZoom = false, IsThreaded = true, Brushes = { ""CircleBrush"" }, ApplyModes = { ""PaintApplyColor"" }, Points = {
																				}, CurrentSettings = 2, CustomData = {
																					Settings = {
																						[1] = {
																							Tools = ordered() {
																								PolylineStroke3 = PolylineStroke { ApplyModes = { ""PaintApplyColor"" }, Inputs = { Point0 = Input { Value = { 0, 0.623148148148148 }, Expression = ""CTRLCrop.Mode==1 and Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)*2) or Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn1.Y - CTRLCrop.PointIn2.Y)/3)*2)"" }, BrushShape = Input { Value = FuID { ""CircleBrush"" } }, Spacing = Input { Value = 1 }, Point1 = Input { Value = { 1, 0.623148148148148 }, Expression = ""CTRLCrop.Mode==1 and Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)*2) or Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn1.Y - CTRLCrop.PointIn2.Y)/3)*2)"" }, Polyline = Input { Value = Polyline { Points = { { Y = 0.123148148148148, X = -0.5, Linear = true, RY = 0, PublishID = ""Point0"", RX = 0.333333333333333 }, { Y = 0.123148148148148, X = 0.5, Linear = true, PublishID = ""Point1"", LY = 0, LX = -0.333333333333333 } } } }, [""CircleBrush.Size""] = Input { Value = 0.00164473684210526, Expression = ""1/CrpTrans.Output.Width"" } }, CustomData = {
																									}, CtrlWZoom = false, IsThreaded = true, Points = {
																									}, Brushes = { ""CircleBrush"" } }
																							}
																						}
																					}
																				} }
																		}
																	}
																}
															} },
														PolylineStroke3 = PolylineStroke { Inputs = { Point0 = Input { Value = { 0, 0.677469135802469 }, Expression = ""CTRLCrop.Mode==1 and Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)*2) or Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.Topapa.Y - CTRLCrop.PointIn2.Y)/3)*2)"" }, BrushShape = Input { Value = FuID { ""CircleBrush"" } }, Spacing = Input { Value = 1 }, Point1 = Input { Value = { 1, 0.677469135802469 }, Expression = ""CTRLCrop.Mode==1 and Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)*2) or Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.Topapa.Y - CTRLCrop.PointIn2.Y)/3)*2)"" }, Polyline = Input { Value = Polyline { Points = { { Y = 0.177469135802469, X = -0.5, Linear = true, RY = 0, PublishID = ""Point0"", RX = 0.333333333333333 }, { Y = 0.177469135802469, X = 0.5, Linear = true, PublishID = ""Point1"", LY = 0, LX = -0.333333333333333 } } } }, [""CircleBrush.Size""] = Input { Value = 0.00164473684210526, Expression = ""1/CrpTrans.Output.Width"" } }, CtrlWZoom = false, IsThreaded = true, Brushes = { ""CircleBrush"" }, ApplyModes = { ""PaintApplyColor"" }, Points = {
															}, CurrentSettings = 2, CustomData = {
																Settings = {
																	[1] = {
																		Tools = ordered() {
																			PolylineStroke3 = PolylineStroke { ApplyModes = { ""PaintApplyColor"" }, Inputs = { Point0 = Input { Value = { 0, 0.623148148148148 }, Expression = ""CTRLCrop.Mode==1 and Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)*2) or Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn1.Y - CTRLCrop.PointIn2.Y)/3)*2)"" }, BrushShape = Input { Value = FuID { ""CircleBrush"" } }, Spacing = Input { Value = 1 }, Point1 = Input { Value = { 1, 0.623148148148148 }, Expression = ""CTRLCrop.Mode==1 and Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)*2) or Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn1.Y - CTRLCrop.PointIn2.Y)/3)*2)"" }, Polyline = Input { Value = Polyline { Points = { { Y = 0.123148148148148, X = -0.5, Linear = true, RY = 0, PublishID = ""Point0"", RX = 0.333333333333333 }, { Y = 0.123148148148148, X = 0.5, Linear = true, PublishID = ""Point1"", LY = 0, LX = -0.333333333333333 } } } }, [""CircleBrush.Size""] = Input { Value = 0.00164473684210526, Expression = ""1/CrpTrans.Output.Width"" } }, CustomData = {
																				}, CtrlWZoom = false, IsThreaded = true, Points = {
																				}, Brushes = { ""CircleBrush"" } }
																		}
																	}
																}
															} }
													}
												}
											}
										} },
									PolylineStroke4 = PolylineStroke { Inputs = { Point0 = Input { Value = { 0, 0.435493827160494 }, Expression = ""CTRLCrop.Mode==1 and Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)) or Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.Topapa.Y - CTRLCrop.PointIn2.Y)/3))"" }, Paint = Input { SourceOp = ""PolylineStroke3"", Source = ""Out"" }, BrushShape = Input { Value = FuID { ""CircleBrush"" } }, Spacing = Input { Value = 1 }, Point1 = Input { Value = { 1, 0.435493827160494 }, Expression = ""CTRLCrop.Mode==1 and Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)) or Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.Topapa.Y - CTRLCrop.PointIn2.Y)/3))"" }, Polyline = Input { Value = Polyline { Points = { { Y = -0.0645061728395062, X = -0.5, Linear = true, RY = 0, PublishID = ""Point0"", RX = 0.333333333333333 }, { Y = -0.0645061728395062, X = 0.5, Linear = true, PublishID = ""Point1"", LY = 0, LX = -0.333333333333333 } } } }, [""CircleBrush.Size""] = Input { Value = 0.00164473684210526, Expression = ""PolylineStroke3.CircleBrush.Size"" } }, CtrlWZoom = false, IsThreaded = true, Brushes = { ""CircleBrush"" }, ApplyModes = { ""PaintApplyColor"" }, Points = {
										}, CurrentSettings = 2, CustomData = {
											Settings = {
												[1] = {
													Tools = ordered() {
														PolylineStroke4 = PolylineStroke { ApplyModes = { ""PaintApplyColor"" }, Inputs = { Point0 = Input { Value = { 0, 0.408333333333333 }, Expression = ""CTRLCrop.Mode==1 and Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)) or Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn1.Y - CTRLCrop.PointIn2.Y)/3))"" }, Paint = Input { SourceOp = ""PolylineStroke3"", Source = ""Out"" }, BrushShape = Input { Value = FuID { ""CircleBrush"" } }, Spacing = Input { Value = 1 }, Point1 = Input { Value = { 1, 0.408333333333333 }, Expression = ""CTRLCrop.Mode==1 and Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)) or Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn1.Y - CTRLCrop.PointIn2.Y)/3))"" }, Polyline = Input { Value = Polyline { Points = { { Y = -0.0916666666666667, X = -0.5, Linear = true, RY = 0, PublishID = ""Point0"", RX = 0.333333333333333 }, { Y = -0.0916666666666667, X = 0.5, Linear = true, PublishID = ""Point1"", LY = 0, LX = -0.333333333333333 } } } }, [""CircleBrush.Size""] = Input { Value = 0.00164473684210526, Expression = ""PolylineStroke3.CircleBrush.Size"" } }, CustomData = {
															}, CtrlWZoom = false, IsThreaded = true, Points = {
															}, Brushes = { ""CircleBrush"" } },
														PolylineStroke3 = PolylineStroke { Inputs = { Point0 = Input { Value = { 0, 0.677469135802469 }, Expression = ""CTRLCrop.Mode==1 and Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)*2) or Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.Topapa.Y - CTRLCrop.PointIn2.Y)/3)*2)"" }, BrushShape = Input { Value = FuID { ""CircleBrush"" } }, Spacing = Input { Value = 1 }, Point1 = Input { Value = { 1, 0.677469135802469 }, Expression = ""CTRLCrop.Mode==1 and Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)*2) or Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.Topapa.Y - CTRLCrop.PointIn2.Y)/3)*2)"" }, Polyline = Input { Value = Polyline { Points = { { Y = 0.177469135802469, X = -0.5, Linear = true, RY = 0, PublishID = ""Point0"", RX = 0.333333333333333 }, { Y = 0.177469135802469, X = 0.5, Linear = true, PublishID = ""Point1"", LY = 0, LX = -0.333333333333333 } } } }, [""CircleBrush.Size""] = Input { Value = 0.00164473684210526, Expression = ""1/CrpTrans.Output.Width"" } }, CtrlWZoom = false, IsThreaded = true, Brushes = { ""CircleBrush"" }, ApplyModes = { ""PaintApplyColor"" }, Points = {
															}, CurrentSettings = 2, CustomData = {
																Settings = {
																	[1] = {
																		Tools = ordered() {
																			PolylineStroke3 = PolylineStroke { ApplyModes = { ""PaintApplyColor"" }, Inputs = { Point0 = Input { Value = { 0, 0.623148148148148 }, Expression = ""CTRLCrop.Mode==1 and Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)*2) or Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn1.Y - CTRLCrop.PointIn2.Y)/3)*2)"" }, BrushShape = Input { Value = FuID { ""CircleBrush"" } }, Spacing = Input { Value = 1 }, Point1 = Input { Value = { 1, 0.623148148148148 }, Expression = ""CTRLCrop.Mode==1 and Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)*2) or Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn1.Y - CTRLCrop.PointIn2.Y)/3)*2)"" }, Polyline = Input { Value = Polyline { Points = { { Y = 0.123148148148148, X = -0.5, Linear = true, RY = 0, PublishID = ""Point0"", RX = 0.333333333333333 }, { Y = 0.123148148148148, X = 0.5, Linear = true, PublishID = ""Point1"", LY = 0, LX = -0.333333333333333 } } } }, [""CircleBrush.Size""] = Input { Value = 0.00164473684210526, Expression = ""1/CrpTrans.Output.Width"" } }, CustomData = {
																				}, CtrlWZoom = false, IsThreaded = true, Points = {
																				}, Brushes = { ""CircleBrush"" } }
																		}
																	}
																}
															} }
													}
												}
											}
										} },
									PolylineStroke3 = PolylineStroke { Inputs = { Point0 = Input { Value = { 0, 0.677469135802469 }, Expression = ""CTRLCrop.Mode==1 and Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)*2) or Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.Topapa.Y - CTRLCrop.PointIn2.Y)/3)*2)"" }, BrushShape = Input { Value = FuID { ""CircleBrush"" } }, Spacing = Input { Value = 1 }, Point1 = Input { Value = { 1, 0.677469135802469 }, Expression = ""CTRLCrop.Mode==1 and Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)*2) or Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.Topapa.Y - CTRLCrop.PointIn2.Y)/3)*2)"" }, Polyline = Input { Value = Polyline { Points = { { Y = 0.177469135802469, X = -0.5, Linear = true, RY = 0, PublishID = ""Point0"", RX = 0.333333333333333 }, { Y = 0.177469135802469, X = 0.5, Linear = true, PublishID = ""Point1"", LY = 0, LX = -0.333333333333333 } } } }, [""CircleBrush.Size""] = Input { Value = 0.00164473684210526, Expression = ""1/CrpTrans.Output.Width"" } }, CtrlWZoom = false, IsThreaded = true, Brushes = { ""CircleBrush"" }, ApplyModes = { ""PaintApplyColor"" }, Points = {
										}, CurrentSettings = 2, CustomData = {
											Settings = {
												[1] = {
													Tools = ordered() {
														PolylineStroke3 = PolylineStroke { ApplyModes = { ""PaintApplyColor"" }, Inputs = { Point0 = Input { Value = { 0, 0.623148148148148 }, Expression = ""CTRLCrop.Mode==1 and Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)*2) or Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn1.Y - CTRLCrop.PointIn2.Y)/3)*2)"" }, BrushShape = Input { Value = FuID { ""CircleBrush"" } }, Spacing = Input { Value = 1 }, Point1 = Input { Value = { 1, 0.623148148148148 }, Expression = ""CTRLCrop.Mode==1 and Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)*2) or Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn1.Y - CTRLCrop.PointIn2.Y)/3)*2)"" }, Polyline = Input { Value = Polyline { Points = { { Y = 0.123148148148148, X = -0.5, Linear = true, RY = 0, PublishID = ""Point0"", RX = 0.333333333333333 }, { Y = 0.123148148148148, X = 0.5, Linear = true, PublishID = ""Point1"", LY = 0, LX = -0.333333333333333 } } } }, [""CircleBrush.Size""] = Input { Value = 0.00164473684210526, Expression = ""1/CrpTrans.Output.Width"" } }, CustomData = {
															}, CtrlWZoom = false, IsThreaded = true, Points = {
															}, Brushes = { ""CircleBrush"" } }
													}
												}
											}
										} }
								}
							}
						}
					},
					Inputs = {
						Paint = Input {
							SourceOp = ""PolylineStroke5"",
							Source = ""Out"",
						},
						BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
						[""CircleBrush.Size""] = Input {
							Value = 0.000925925925925926,
							Expression = ""PolylineStroke3.CircleBrush.Size"",
						},
						Spacing = Input { Value = 1, },
						Polyline = Input {
							Value = Polyline {
								Points = {
									{ Linear = true, X = 0.0679859293447977, Y = 0.5, RX = 0, RY = -0.333333333333333, PublishID = ""Point0"" },
									{ Linear = true, X = 0.0679859293447977, Y = -0.5, LX = 0, LY = 0.333333333333333, PublishID = ""Point1"" }
								}
							},
						},
						Point0 = Input {
							Value = { 0.567985929344798, 1 },
							Expression = ""CrpCTRL.Mode==1 and Point(CrpCTRL.PointIn2.X + ((CrpCTRL.PointIn3.X - CrpCTRL.PointIn2.X)/3)*2, 1.0) or Point(CrpCTRL.PointIn2.X + ((CrpCTRL.Topapa.X - CrpCTRL.PointIn2.X)/3)*2, 1.0)"",
						},
						Point1 = Input {
							Value = { 0.567985929344798, 0 },
							Expression = ""CrpCTRL.Mode==1 and Point(CrpCTRL.PointIn2.X + ((CrpCTRL.PointIn3.X - CrpCTRL.PointIn2.X)/3)*2, 0.0) or Point(CrpCTRL.PointIn2.X + ((CrpCTRL.Topapa.X - CrpCTRL.PointIn2.X)/3)*2, 0.0)"",
						},
					},
				},
				PolylineStroke5 = PolylineStroke {
					Points = {
					},
					IsThreaded = true,
					Brushes = { ""CircleBrush"" },
					ApplyModes = { ""PaintApplyColor"" },
					CtrlWZoom = false,
					CurrentSettings = 2,
					CustomData = {
						Settings = {
							[1] = {
								Tools = ordered() {
									PolylineStroke5 = PolylineStroke { ApplyModes = { ""PaintApplyColor"" }, Inputs = { Point0 = Input { Value = { 0.5, 1 }, Expression = ""CTRLCrop.Mode==1 and Point(CTRLCrop.PointIn2.X + ((CTRLCrop.PointIn3.X - CTRLCrop.PointIn2.X)/3), 1.0) or Point(CTRLCrop.PointIn2.X + ((CTRLCrop.PointIn1.X - CTRLCrop.PointIn2.X)/3), 1.0)"" }, Paint = Input { SourceOp = ""PolylineStroke4"", Source = ""Out"" }, BrushShape = Input { Value = FuID { ""CircleBrush"" } }, Spacing = Input { Value = 1 }, Point1 = Input { Value = { 0.5, 0 }, Expression = ""CTRLCrop.Mode==1 and Point(CTRLCrop.PointIn2.X + ((CTRLCrop.PointIn3.X - CTRLCrop.PointIn2.X)/3), 0.0) or Point(CTRLCrop.PointIn2.X + ((CTRLCrop.PointIn1.X - CTRLCrop.PointIn2.X)/3), 0.0)"" }, Polyline = Input { Value = Polyline { Points = { { Y = 0.5, X = 0, Linear = true, RY = -0.333333333333333, PublishID = ""Point0"", RX = 0 }, { Y = -0.5, X = 0, Linear = true, PublishID = ""Point1"", LY = 0.333333333333333, LX = 0 } } } }, [""CircleBrush.Size""] = Input { Value = 0.00164473684210526, Expression = ""PolylineStroke3.CircleBrush.Size"" } }, CustomData = {
										}, CtrlWZoom = false, IsThreaded = true, Points = {
										}, Brushes = { ""CircleBrush"" } },
									PolylineStroke4 = PolylineStroke { Inputs = { Point0 = Input { Value = { 0, 0.435493827160494 }, Expression = ""CTRLCrop.Mode==1 and Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)) or Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.Topapa.Y - CTRLCrop.PointIn2.Y)/3))"" }, Paint = Input { SourceOp = ""PolylineStroke3"", Source = ""Out"" }, BrushShape = Input { Value = FuID { ""CircleBrush"" } }, Spacing = Input { Value = 1 }, Point1 = Input { Value = { 1, 0.435493827160494 }, Expression = ""CTRLCrop.Mode==1 and Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)) or Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.Topapa.Y - CTRLCrop.PointIn2.Y)/3))"" }, Polyline = Input { Value = Polyline { Points = { { Y = -0.0645061728395062, X = -0.5, Linear = true, RY = 0, PublishID = ""Point0"", RX = 0.333333333333333 }, { Y = -0.0645061728395062, X = 0.5, Linear = true, PublishID = ""Point1"", LY = 0, LX = -0.333333333333333 } } } }, [""CircleBrush.Size""] = Input { Value = 0.00164473684210526, Expression = ""PolylineStroke3.CircleBrush.Size"" } }, CtrlWZoom = false, IsThreaded = true, Brushes = { ""CircleBrush"" }, ApplyModes = { ""PaintApplyColor"" }, Points = {
										}, CurrentSettings = 2, CustomData = {
											Settings = {
												[1] = {
													Tools = ordered() {
														PolylineStroke4 = PolylineStroke { ApplyModes = { ""PaintApplyColor"" }, Inputs = { Point0 = Input { Value = { 0, 0.408333333333333 }, Expression = ""CTRLCrop.Mode==1 and Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)) or Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn1.Y - CTRLCrop.PointIn2.Y)/3))"" }, Paint = Input { SourceOp = ""PolylineStroke3"", Source = ""Out"" }, BrushShape = Input { Value = FuID { ""CircleBrush"" } }, Spacing = Input { Value = 1 }, Point1 = Input { Value = { 1, 0.408333333333333 }, Expression = ""CTRLCrop.Mode==1 and Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)) or Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn1.Y - CTRLCrop.PointIn2.Y)/3))"" }, Polyline = Input { Value = Polyline { Points = { { Y = -0.0916666666666667, X = -0.5, Linear = true, RY = 0, PublishID = ""Point0"", RX = 0.333333333333333 }, { Y = -0.0916666666666667, X = 0.5, Linear = true, PublishID = ""Point1"", LY = 0, LX = -0.333333333333333 } } } }, [""CircleBrush.Size""] = Input { Value = 0.00164473684210526, Expression = ""PolylineStroke3.CircleBrush.Size"" } }, CustomData = {
															}, CtrlWZoom = false, IsThreaded = true, Points = {
															}, Brushes = { ""CircleBrush"" } },
														PolylineStroke3 = PolylineStroke { Inputs = { Point0 = Input { Value = { 0, 0.677469135802469 }, Expression = ""CTRLCrop.Mode==1 and Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)*2) or Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.Topapa.Y - CTRLCrop.PointIn2.Y)/3)*2)"" }, BrushShape = Input { Value = FuID { ""CircleBrush"" } }, Spacing = Input { Value = 1 }, Point1 = Input { Value = { 1, 0.677469135802469 }, Expression = ""CTRLCrop.Mode==1 and Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)*2) or Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.Topapa.Y - CTRLCrop.PointIn2.Y)/3)*2)"" }, Polyline = Input { Value = Polyline { Points = { { Y = 0.177469135802469, X = -0.5, Linear = true, RY = 0, PublishID = ""Point0"", RX = 0.333333333333333 }, { Y = 0.177469135802469, X = 0.5, Linear = true, PublishID = ""Point1"", LY = 0, LX = -0.333333333333333 } } } }, [""CircleBrush.Size""] = Input { Value = 0.00164473684210526, Expression = ""1/CrpTrans.Output.Width"" } }, CtrlWZoom = false, IsThreaded = true, Brushes = { ""CircleBrush"" }, ApplyModes = { ""PaintApplyColor"" }, Points = {
															}, CurrentSettings = 2, CustomData = {
																Settings = {
																	[1] = {
																		Tools = ordered() {
																			PolylineStroke3 = PolylineStroke { ApplyModes = { ""PaintApplyColor"" }, Inputs = { Point0 = Input { Value = { 0, 0.623148148148148 }, Expression = ""CTRLCrop.Mode==1 and Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)*2) or Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn1.Y - CTRLCrop.PointIn2.Y)/3)*2)"" }, BrushShape = Input { Value = FuID { ""CircleBrush"" } }, Spacing = Input { Value = 1 }, Point1 = Input { Value = { 1, 0.623148148148148 }, Expression = ""CTRLCrop.Mode==1 and Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)*2) or Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn1.Y - CTRLCrop.PointIn2.Y)/3)*2)"" }, Polyline = Input { Value = Polyline { Points = { { Y = 0.123148148148148, X = -0.5, Linear = true, RY = 0, PublishID = ""Point0"", RX = 0.333333333333333 }, { Y = 0.123148148148148, X = 0.5, Linear = true, PublishID = ""Point1"", LY = 0, LX = -0.333333333333333 } } } }, [""CircleBrush.Size""] = Input { Value = 0.00164473684210526, Expression = ""1/CrpTrans.Output.Width"" } }, CustomData = {
																				}, CtrlWZoom = false, IsThreaded = true, Points = {
																				}, Brushes = { ""CircleBrush"" } }
																		}
																	}
																}
															} }
													}
												}
											}
										} },
									PolylineStroke3 = PolylineStroke { Inputs = { Point0 = Input { Value = { 0, 0.677469135802469 }, Expression = ""CTRLCrop.Mode==1 and Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)*2) or Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.Topapa.Y - CTRLCrop.PointIn2.Y)/3)*2)"" }, BrushShape = Input { Value = FuID { ""CircleBrush"" } }, Spacing = Input { Value = 1 }, Point1 = Input { Value = { 1, 0.677469135802469 }, Expression = ""CTRLCrop.Mode==1 and Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)*2) or Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.Topapa.Y - CTRLCrop.PointIn2.Y)/3)*2)"" }, Polyline = Input { Value = Polyline { Points = { { Y = 0.177469135802469, X = -0.5, Linear = true, RY = 0, PublishID = ""Point0"", RX = 0.333333333333333 }, { Y = 0.177469135802469, X = 0.5, Linear = true, PublishID = ""Point1"", LY = 0, LX = -0.333333333333333 } } } }, [""CircleBrush.Size""] = Input { Value = 0.00164473684210526, Expression = ""1/CrpTrans.Output.Width"" } }, CtrlWZoom = false, IsThreaded = true, Brushes = { ""CircleBrush"" }, ApplyModes = { ""PaintApplyColor"" }, Points = {
										}, CurrentSettings = 2, CustomData = {
											Settings = {
												[1] = {
													Tools = ordered() {
														PolylineStroke3 = PolylineStroke { ApplyModes = { ""PaintApplyColor"" }, Inputs = { Point0 = Input { Value = { 0, 0.623148148148148 }, Expression = ""CTRLCrop.Mode==1 and Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)*2) or Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn1.Y - CTRLCrop.PointIn2.Y)/3)*2)"" }, BrushShape = Input { Value = FuID { ""CircleBrush"" } }, Spacing = Input { Value = 1 }, Point1 = Input { Value = { 1, 0.623148148148148 }, Expression = ""CTRLCrop.Mode==1 and Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)*2) or Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn1.Y - CTRLCrop.PointIn2.Y)/3)*2)"" }, Polyline = Input { Value = Polyline { Points = { { Y = 0.123148148148148, X = -0.5, Linear = true, RY = 0, PublishID = ""Point0"", RX = 0.333333333333333 }, { Y = 0.123148148148148, X = 0.5, Linear = true, PublishID = ""Point1"", LY = 0, LX = -0.333333333333333 } } } }, [""CircleBrush.Size""] = Input { Value = 0.00164473684210526, Expression = ""1/CrpTrans.Output.Width"" } }, CustomData = {
															}, CtrlWZoom = false, IsThreaded = true, Points = {
															}, Brushes = { ""CircleBrush"" } }
													}
												}
											}
										} }
								}
							}
						}
					},
					Inputs = {
						Paint = Input {
							SourceOp = ""PolylineStroke4"",
							Source = ""Out"",
						},
						BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
						[""CircleBrush.Size""] = Input {
							Value = 0.000925925925925926,
							Expression = ""PolylineStroke3.CircleBrush.Size"",
						},
						Spacing = Input { Value = 1, },
						Polyline = Input {
							Value = Polyline {
								Points = {
									{ Linear = true, X = -0.155024964423754, Y = 0.5, RX = 0, RY = -0.333333333333333, PublishID = ""Point0"" },
									{ Linear = true, X = -0.155024964423754, Y = -0.5, LX = 0, LY = 0.333333333333333, PublishID = ""Point1"" }
								}
							},
						},
						Point0 = Input {
							Value = { 0.344975035576246, 1 },
							Expression = ""CrpCTRL.Mode==1 and Point(CrpCTRL.PointIn2.X + ((CrpCTRL.PointIn3.X - CrpCTRL.PointIn2.X)/3), 1.0) or Point(CrpCTRL.PointIn2.X + ((CrpCTRL.Topapa.X - CrpCTRL.PointIn2.X)/3), 1.0)"",
						},
						Point1 = Input {
							Value = { 0.344975035576246, 0 },
							Expression = ""CrpCTRL.Mode==1 and Point(CrpCTRL.PointIn2.X + ((CrpCTRL.PointIn3.X - CrpCTRL.PointIn2.X)/3), 0.0) or Point(CrpCTRL.PointIn2.X + ((CrpCTRL.Topapa.X - CrpCTRL.PointIn2.X)/3), 0.0)"",
						},
					},
				},
				PolylineStroke4 = PolylineStroke {
					Points = {
					},
					IsThreaded = true,
					Brushes = { ""CircleBrush"" },
					ApplyModes = { ""PaintApplyColor"" },
					CtrlWZoom = false,
					CurrentSettings = 2,
					CustomData = {
						Settings = {
							[1] = {
								Tools = ordered() {
									PolylineStroke4 = PolylineStroke { ApplyModes = { ""PaintApplyColor"" }, Inputs = { Point0 = Input { Value = { 0, 0.408333333333333 }, Expression = ""CTRLCrop.Mode==1 and Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)) or Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn1.Y - CTRLCrop.PointIn2.Y)/3))"" }, Paint = Input { SourceOp = ""PolylineStroke3"", Source = ""Out"" }, BrushShape = Input { Value = FuID { ""CircleBrush"" } }, Spacing = Input { Value = 1 }, Point1 = Input { Value = { 1, 0.408333333333333 }, Expression = ""CTRLCrop.Mode==1 and Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)) or Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn1.Y - CTRLCrop.PointIn2.Y)/3))"" }, Polyline = Input { Value = Polyline { Points = { { Y = -0.0916666666666667, X = -0.5, Linear = true, RY = 0, PublishID = ""Point0"", RX = 0.333333333333333 }, { Y = -0.0916666666666667, X = 0.5, Linear = true, PublishID = ""Point1"", LY = 0, LX = -0.333333333333333 } } } }, [""CircleBrush.Size""] = Input { Value = 0.00164473684210526, Expression = ""PolylineStroke3.CircleBrush.Size"" } }, CustomData = {
										}, CtrlWZoom = false, IsThreaded = true, Points = {
										}, Brushes = { ""CircleBrush"" } },
									PolylineStroke3 = PolylineStroke { Inputs = { Point0 = Input { Value = { 0, 0.677469135802469 }, Expression = ""CTRLCrop.Mode==1 and Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)*2) or Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.Topapa.Y - CTRLCrop.PointIn2.Y)/3)*2)"" }, BrushShape = Input { Value = FuID { ""CircleBrush"" } }, Spacing = Input { Value = 1 }, Point1 = Input { Value = { 1, 0.677469135802469 }, Expression = ""CTRLCrop.Mode==1 and Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)*2) or Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.Topapa.Y - CTRLCrop.PointIn2.Y)/3)*2)"" }, Polyline = Input { Value = Polyline { Points = { { Y = 0.177469135802469, X = -0.5, Linear = true, RY = 0, PublishID = ""Point0"", RX = 0.333333333333333 }, { Y = 0.177469135802469, X = 0.5, Linear = true, PublishID = ""Point1"", LY = 0, LX = -0.333333333333333 } } } }, [""CircleBrush.Size""] = Input { Value = 0.00164473684210526, Expression = ""1/CrpTrans.Output.Width"" } }, CtrlWZoom = false, IsThreaded = true, Brushes = { ""CircleBrush"" }, ApplyModes = { ""PaintApplyColor"" }, Points = {
										}, CurrentSettings = 2, CustomData = {
											Settings = {
												[1] = {
													Tools = ordered() {
														PolylineStroke3 = PolylineStroke { ApplyModes = { ""PaintApplyColor"" }, Inputs = { Point0 = Input { Value = { 0, 0.623148148148148 }, Expression = ""CTRLCrop.Mode==1 and Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)*2) or Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn1.Y - CTRLCrop.PointIn2.Y)/3)*2)"" }, BrushShape = Input { Value = FuID { ""CircleBrush"" } }, Spacing = Input { Value = 1 }, Point1 = Input { Value = { 1, 0.623148148148148 }, Expression = ""CTRLCrop.Mode==1 and Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)*2) or Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn1.Y - CTRLCrop.PointIn2.Y)/3)*2)"" }, Polyline = Input { Value = Polyline { Points = { { Y = 0.123148148148148, X = -0.5, Linear = true, RY = 0, PublishID = ""Point0"", RX = 0.333333333333333 }, { Y = 0.123148148148148, X = 0.5, Linear = true, PublishID = ""Point1"", LY = 0, LX = -0.333333333333333 } } } }, [""CircleBrush.Size""] = Input { Value = 0.00164473684210526, Expression = ""1/CrpTrans.Output.Width"" } }, CustomData = {
															}, CtrlWZoom = false, IsThreaded = true, Points = {
															}, Brushes = { ""CircleBrush"" } }
													}
												}
											}
										} }
								}
							}
						}
					},
					Inputs = {
						Paint = Input {
							SourceOp = ""PolylineStroke3"",
							Source = ""Out"",
						},
						BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
						[""CircleBrush.Size""] = Input {
							Value = 0.000925925925925926,
							Expression = ""PolylineStroke3.CircleBrush.Size"",
						},
						Spacing = Input { Value = 1, },
						Polyline = Input {
							Value = Polyline {
								Points = {
									{ Linear = true, X = -0.5, Y = -0.0253342370190197, RX = 0.333333333333333, RY = 0, PublishID = ""Point0"" },
									{ Linear = true, X = 0.5, Y = -0.0253342370190197, LX = -0.333333333333333, LY = 0, PublishID = ""Point1"" }
								}
							},
						},
						Point0 = Input {
							Value = { 0, 0.47466576298098 },
							Expression = ""CrpCTRL.Mode==1 and Point(0.0, CrpCTRL.PointIn2.Y + ((CrpCTRL.PointIn3.Y - CrpCTRL.PointIn2.Y)/3)) or Point(0.0, CrpCTRL.PointIn2.Y + ((CrpCTRL.Topapa.Y - CrpCTRL.PointIn2.Y)/3))"",
						},
						Point1 = Input {
							Value = { 1, 0.47466576298098 },
							Expression = ""CrpCTRL.Mode==1 and Point(1.0, CrpCTRL.PointIn2.Y + ((CrpCTRL.PointIn3.Y - CrpCTRL.PointIn2.Y)/3)) or Point(1.0, CrpCTRL.PointIn2.Y + ((CrpCTRL.Topapa.Y - CrpCTRL.PointIn2.Y)/3))"",
						},
					},
				},
				PolylineStroke3 = PolylineStroke {
					Points = {
					},
					IsThreaded = true,
					Brushes = { ""CircleBrush"" },
					ApplyModes = { ""PaintApplyColor"" },
					CtrlWZoom = false,
					CurrentSettings = 2,
					CustomData = {
						Settings = {
							[1] = {
								Tools = ordered() {
									PolylineStroke3 = PolylineStroke { ApplyModes = { ""PaintApplyColor"" }, Inputs = { Point0 = Input { Value = { 0, 0.623148148148148 }, Expression = ""CTRLCrop.Mode==1 and Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)*2) or Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn1.Y - CTRLCrop.PointIn2.Y)/3)*2)"" }, BrushShape = Input { Value = FuID { ""CircleBrush"" } }, Spacing = Input { Value = 1 }, Point1 = Input { Value = { 1, 0.623148148148148 }, Expression = ""CTRLCrop.Mode==1 and Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)*2) or Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn1.Y - CTRLCrop.PointIn2.Y)/3)*2)"" }, Polyline = Input { Value = Polyline { Points = { { Y = 0.123148148148148, X = -0.5, Linear = true, RY = 0, PublishID = ""Point0"", RX = 0.333333333333333 }, { Y = 0.123148148148148, X = 0.5, Linear = true, PublishID = ""Point1"", LY = 0, LX = -0.333333333333333 } } } }, [""CircleBrush.Size""] = Input { Value = 0.00164473684210526, Expression = ""1/CrpTrans.Output.Width"" } }, CustomData = {
										}, CtrlWZoom = false, IsThreaded = true, Points = {
										}, Brushes = { ""CircleBrush"" } }
								}
							}
						}
					},
					Inputs = {
						BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
						[""CircleBrush.Size""] = Input {
							Value = 0.000925925925925926,
							Expression = ""1/CrpTrans.Output.Width"",
						},
						Spacing = Input { Value = 1, },
						Polyline = Input {
							Value = Polyline {
								Points = {
									{ Linear = true, X = -0.5, Y = 0.0928360739502043, RX = 0.333333333333333, RY = 0, PublishID = ""Point0"" },
									{ Linear = true, X = 0.5, Y = 0.0928360739502043, LX = -0.333333333333333, LY = 0, PublishID = ""Point1"" }
								}
							},
						},
						Point0 = Input {
							Value = { 0, 0.592836073950204 },
							Expression = ""CrpCTRL.Mode==1 and Point(0.0, CrpCTRL.PointIn2.Y + ((CrpCTRL.PointIn3.Y - CrpCTRL.PointIn2.Y)/3)*2) or Point(0.0, CrpCTRL.PointIn2.Y + ((CrpCTRL.Topapa.Y - CrpCTRL.PointIn2.Y)/3)*2)"",
						},
						Point1 = Input {
							Value = { 1, 0.592836073950204 },
							Expression = ""CrpCTRL.Mode==1 and Point(1.0, CrpCTRL.PointIn2.Y + ((CrpCTRL.PointIn3.Y - CrpCTRL.PointIn2.Y)/3)*2) or Point(1.0, CrpCTRL.PointIn2.Y + ((CrpCTRL.Topapa.Y - CrpCTRL.PointIn2.Y)/3)*2)"",
						},
					},
				},
				CrpSat = BrightnessContrast {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Saturation = Input {
							Value = 0.5,
							Expression = ""CrpCTRL.Saturation"",
						},
						Input = Input {
							SourceOp = ""Filter1"",
							Source = ""Output"",
						},
					},
					ViewInfo = OperatorInfo { Pos = { -55, 255.242 } },
				},
				CrpTone = BrightnessContrast {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Blend = Input {
							Value = 0.9,
							Expression = ""CrpCTRL.FrameBlend"",
						},
						Gain = Input {
							Value = 0.1,
							Expression = ""CrpCTRL.Tone"",
						},
						Lift = Input {
							Value = 0.1,
							Expression = ""Gain"",
						},
						Input = Input {
							SourceOp = ""CrpSat"",
							Source = ""Output"",
						},
					},
					ViewInfo = OperatorInfo { Pos = { -55, 288.242 } },
				},
				CrpTarget = PaintMask {
					CtrlWShown = false,
					NameSet = true,
					CurrentSettings = 2,
					CustomData = {
						Settings = {
							[1] = {
								Tools = ordered() {
									CrpTarget = PaintMask { Inputs = { Paint = Input { SourceOp = ""PolylineStroke2_1"", Source = ""Out"" }, PaintMode = Input { Value = FuID { ""Maximum"" } }, MaskWidth = Input { Value = 1080 }, PixelAspect = Input { Value = { 1, 1 } }, EffectMask = Input { SourceOp = ""CrpThird"", Source = ""Mask"" }, ClippingMode = Input { Value = FuID { ""None"" } }, Filter = Input { Value = FuID { ""Fast Gaussian"" } }, Level = Input { Expression = ""CTRLCrop.GuideCenter*CTRLCrop.GuideBlend"" }, UseFrameFormatSettings = Input { Value = 1 }, MaskHeight = Input { Value = 1080 } }, CtrlWZoom = false, NameSet = true, ViewInfo = OperatorInfo { Pos = { 385, 412.5 } }, CustomData = {
										} },
									PolylineStroke2_1 = PolylineStroke { Inputs = { Point0 = Input { Value = { 0.547222222222222, 0.227407407407407 } }, Paint = Input { SourceOp = ""PolylineStroke1_1"", Source = ""Out"" }, BrushShape = Input { Value = FuID { ""CircleBrush"" } }, ApplyControls = Input { Value = 0 }, Point1 = Input { Value = { 0.544444444444444, 0.476296296296296 } }, Polyline = Input { Value = Polyline { Points = { { Y = 0.5, X = 0.125822368421053, Linear = true, RY = -0.333333333333333, PublishID = ""Point4"", RX = 0 }, { Y = -0.5, X = 0.125822368421053, Linear = true, PublishID = ""Point5"", LY = 0.333333333333333, LX = 0 } } } }, Point5 = Input { Value = { 0.625822368421053, 0 }, Expression = ""Point(Point4.X, 0)"" }, Point3 = Input { Value = { 0.544444444444444, 0.476296296296296 } }, Spacing = Input { Value = 1 }, StrokeControls = Input { Value = 1 }, Point4 = Input { Value = { 0.625822368421053, 1 }, Expression = ""CTRLCrop.Mode==1 and Point(CTRLCrop.PointIn2.X + ((CTRLCrop.PointIn3.X - CTRLCrop.PointIn2.X)/2), 1) or Point(CTRLCrop.PointIn2.X + ((CTRLCrop.PointIn1.X - CTRLCrop.PointIn2.X)/2), 1)"" }, Point2 = Input { Value = { 0.547222222222222, 0.227407407407407 } }, [""CircleBrush.Size""] = Input { Value = 0.00164473684210526, Expression = ""PolylineStroke1_1.CircleBrush.Size"" } }, ApplyModes = { ""PaintApplyColor"" }, CtrlWZoom = false, IsThreaded = false, Points = {
										}, Brushes = { ""CircleBrush"" } },
									PolylineStroke1_1 = PolylineStroke { Inputs = { Point0 = Input { Value = { 0, 0.520833333333333 }, Expression = ""CTRLCrop.Mode==1 and Point(0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/2)) or Point(0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn1.Y - CTRLCrop.PointIn2.Y)/2))"" }, StrokeControls = Input { Value = 1 }, BrushShape = Input { Value = FuID { ""CircleBrush"" } }, Spacing = Input { Value = 1 }, Point1 = Input { Value = { 1, 0.520833333333333 }, Expression = ""Point(1.0, Point0.Y)"" }, Polyline = Input { Value = Polyline { Points = { { Y = 0.0208333333333333, X = -0.5, Linear = true, RY = 0, PublishID = ""Point0"", RX = 0.333333333333333 }, { Y = 0.0208333333333333, X = 0.5, Linear = true, PublishID = ""Point1"", LY = 0, LX = -0.333333333333333 } } } }, BrushControls = Input { Value = 1 }, [""CircleBrush.Size""] = Input { Value = 0.00164473684210526, Expression = ""1/CrpTrans.Output.Width"" } }, ApplyModes = { ""PaintApplyColor"" }, CtrlWZoom = false, IsThreaded = false, Points = {
										}, Brushes = { ""CircleBrush"" } }
								}
							}
						}
					},
					Inputs = {
						EffectMask = Input {
							SourceOp = ""CrpThird"",
							Source = ""Mask"",
						},
						Level = Input { Expression = ""CrpCTRL.GuideCenter*CrpCTRL.GuideBlend"", },
						Filter = Input { Value = FuID { ""Fast Gaussian"" }, },
						PaintMode = Input { Value = FuID { ""Maximum"" }, },
						MaskWidth = Input { Value = 960, },
						MaskHeight = Input { Value = 540, },
						PixelAspect = Input { Value = { 1, 1 }, },
						UseFrameFormatSettings = Input { Value = 1, },
						ClippingMode = Input { Value = FuID { ""None"" }, },
						Paint = Input {
							SourceOp = ""PolylineStroke2_1"",
							Source = ""Out"",
						},
					},
					ViewInfo = OperatorInfo { Pos = { 165, 280.5 } },
				},
				PolylineStroke2_1 = PolylineStroke {
					Points = {
					},
					IsThreaded = false,
					Brushes = { ""CircleBrush"" },
					ApplyModes = { ""PaintApplyColor"" },
					CtrlWZoom = false,
					Inputs = {
						Paint = Input {
							SourceOp = ""PolylineStroke1_1"",
							Source = ""Out"",
						},
						BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
						[""CircleBrush.Size""] = Input {
							Value = 0.000925925925925926,
							Expression = ""PolylineStroke1_1.CircleBrush.Size"",
						},
						ApplyControls = Input { Value = 0, },
						StrokeControls = Input { Value = 1, },
						Spacing = Input { Value = 1, },
						Polyline = Input {
							Value = Polyline {
								Points = {
									{ Linear = true, X = -0.043519517539478, Y = 0.5, RX = 0, RY = -0.333333333333333, PublishID = ""Point4"" },
									{ Linear = true, X = -0.043519517539478, Y = -0.5, LX = 0, LY = 0.333333333333333, PublishID = ""Point5"" }
								}
							},
						},
						Point0 = Input { Value = { 0.547222222222222, 0.227407407407407 }, },
						Point1 = Input { Value = { 0.544444444444444, 0.476296296296296 }, },
						Point2 = Input { Value = { 0.547222222222222, 0.227407407407407 }, },
						Point3 = Input { Value = { 0.544444444444444, 0.476296296296296 }, },
						Point4 = Input {
							Value = { 0.456480482460522, 1 },
							Expression = ""CrpCTRL.Mode==1 and Point(CrpCTRL.PointIn2.X + ((CrpCTRL.PointIn3.X - CrpCTRL.PointIn2.X)/2), 1) or Point(CrpCTRL.PointIn2.X + ((CrpCTRL.Topapa.X - CrpCTRL.PointIn2.X)/2), 1)"",
						},
						Point5 = Input {
							Value = { 0.456480482460522, 0 },
							Expression = ""Point(Point4.X, 0)"",
						},
					},
				},
				PolylineStroke1_1 = PolylineStroke {
					Points = {
					},
					IsThreaded = false,
					Brushes = { ""CircleBrush"" },
					ApplyModes = { ""PaintApplyColor"" },
					CtrlWZoom = false,
					Inputs = {
						BrushControls = Input { Value = 1, },
						BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
						[""CircleBrush.Size""] = Input {
							Value = 0.000925925925925926,
							Expression = ""1/CrpTrans.Output.Width"",
						},
						StrokeControls = Input { Value = 1, },
						Spacing = Input { Value = 1, },
						Polyline = Input {
							Value = Polyline {
								Points = {
									{ Linear = true, X = -0.5, Y = 0.0337509184655924, RX = 0.333333333333333, RY = 0, PublishID = ""Point0"" },
									{ Linear = true, X = 0.5, Y = 0.0337509184655924, LX = -0.333333333333333, LY = 0, PublishID = ""Point1"" }
								}
							},
						},
						Point0 = Input {
							Value = { 0, 0.533750918465592 },
							Expression = ""CrpCTRL.Mode==1 and Point(0, CrpCTRL.PointIn2.Y + ((CrpCTRL.PointIn3.Y - CrpCTRL.PointIn2.Y)/2)) or Point(0, CrpCTRL.PointIn2.Y + ((CrpCTRL.Topapa.Y - CrpCTRL.PointIn2.Y)/2))"",
						},
						Point1 = Input {
							Value = { 1, 0.533750918465592 },
							Expression = ""Point(1.0, Point0.Y)"",
						},
					},
				},
				CrpCrop = Crop {
					CtrlWShown = false,
					NameSet = true,
					CurrentSettings = 2,
					CustomData = {
						Settings = {
							[1] = {
								Tools = ordered() {
									CrpCrop = Crop { Inputs = { YSize = Input { Value = 400, Expression = ""CTRLCrop.Mode==1 and math.abs(((CrpTone.Output.Height/1)*CTRLCrop.PointIn3.Y)-((CrpTone.Output.Height/1)*CTRLCrop.PointIn2.Y)) or math.abs(((CrpTone.Output.Height/1)*CTRLCrop.PointIn1.Y)-((CrpTone.Output.Height/1)*CTRLCrop.PointIn2.Y))"" }, XOffset = Input { Value = 28, Expression = ""((CrpTone.Output.Width/1)*CTRLCrop.PointIn2.X)"" }, XSize = Input { Value = 500, Expression = ""CTRLCrop.Mode==1 and math.abs(((CrpTone.Output.Width/1)*CTRLCrop.PointIn3.X)-((CrpTone.Output.Width/1)*CTRLCrop.PointIn2.X)) or math.abs(((CrpTone.Output.Width/1)*CTRLCrop.PointIn1.X)-((CrpTone.Output.Width/1)*CTRLCrop.PointIn2.X))"" }, Input = Input { SourceOp = ""CrpTrans"", Source = ""Output"" }, YOffset = Input { Value = 371, Expression = ""((CrpTone.Output.Height/1)*CTRLCrop.PointIn2.Y)"" } }, CtrlWZoom = false, NameSet = true, ViewInfo = OperatorInfo { Pos = { 55, 445.5 } }, CustomData = {
										} }
								}
							}
						}
					},
					Inputs = {
						XOffset = Input {
							Value = 132,
							Expression = ""((CrpTone.Output.Width/1)*CrpCTRL.PointIn2.X)"",
						},
						YOffset = Input {
							Value = 684,
							Expression = ""((CrpTone.Output.Height/1)*CrpCTRL.PointIn2.Y)"",
						},
						XSize = Input {
							Value = 723,
							Expression = ""CrpCTRL.Mode==1 and math.abs(((CrpTone.Output.Width/1)*CrpCTRL.PointIn3.X)-((CrpTone.Output.Width/1)*CrpCTRL.PointIn2.X)) or math.abs(((CrpTone.Output.Width/1)*CrpCTRL.PointIn4.X)-((CrpTone.Output.Width/1)*CrpCTRL.PointIn2.X))"",
						},
						YSize = Input {
							Value = 681,
							Expression = ""CrpCTRL.Mode==1 and math.abs(((CrpTone.Output.Height/1)*CrpCTRL.PointIn3.Y)-((CrpTone.Output.Height/1)*CrpCTRL.PointIn2.Y)) or math.abs(((CrpTone.Output.Height/1)*CrpCTRL.PointIn4.Y)-((CrpTone.Output.Height/1)*CrpCTRL.PointIn2.Y))"",
						},
						Input = Input {
							SourceOp = ""CrpTrans"",
							Source = ""Output"",
						},
					},
					ViewInfo = OperatorInfo { Pos = { -165, 313.5 } },
				},
				CrpPreMrg = Merge {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						EffectMask = Input {
							SourceOp = ""CrpFrame"",
							Source = ""Mask"",
						},
						Background = Input {
							SourceOp = ""Filter1"",
							Source = ""Output"",
						},
						Foreground = Input {
							SourceOp = ""CrpTone"",
							Source = ""Output"",
						},
						Operator = Input { Value = FuID { ""Conjoint"" }, },
						PerformDepthMerge = Input { Value = 0, },
					},
					ViewInfo = OperatorInfo { Pos = { 0, 313.5 } },
				},
				CrpFrame = PolylineMask {
					DrawMode = ""InsertAndModify"",
					DrawMode2 = ""InsertAndModify"",
					CtrlWShown = false,
					NameSet = true,
					CurrentSettings = 2,
					CustomData = {
						Settings = {
							[1] = {
								Tools = ordered() {
									CrpFrame = PolylineMask { CtrlWZoom = false, Inputs = { Point0 = Input { Value = { 0.0707236842105262, 0.939814814814815 }, Expression = ""CTRLCrop.Mode==1 and Point(CTRLCrop.PointIn2.X, CTRLCrop.PointIn3.Y) or Point(CTRLCrop.PointIn2.X, CTRLCrop.PointIn1.Y)"" }, MaskHeight = Input { Value = 1080 }, MaskWidth = Input { Value = 1080 }, PixelAspect = Input { Value = { 1, 1 } }, EffectMask = Input { SourceOp = ""CrpTarget"", Source = ""Mask"" }, ClippingMode = Input { Value = FuID { ""None"" } }, Point2 = Input { Value = { 0.759868421052633, 0.269444444444444 }, Expression = ""CTRLCrop.Mode==1 and Point(CTRLCrop.PointIn3.X, CTRLCrop.PointIn2.Y) or Point(CTRLCrop.PointIn1.X, CTRLCrop.PointIn2.Y)"" }, Point1 = Input { Value = { 0.0707236842105262, 0.269444444444444 }, Expression = ""Point(CTRLCrop.PointIn2.X, CTRLCrop.PointIn2.Y)"" }, Point3 = Input { Value = { 0.759868421052633, 0.939814814814815 }, Expression = ""CTRLCrop.Mode==1 and Point(CTRLCrop.PointIn3.X, CTRLCrop.PointIn3.Y) or Point(CTRLCrop.PointIn1.X, CTRLCrop.PointIn1.Y)"" }, Filter = Input { Value = FuID { ""Fast Gaussian"" } }, Polyline = Input { Value = Polyline { Points = { { Y = 0.439814814814815, X = -0.429276315789474, Linear = true, RY = -0.223456790123457, RX = 0, PublishID = ""Point0"", LY = 0, LX = 0.229714912280702 }, { Y = -0.230555555555556, X = -0.429276315789474, Linear = true, RY = 0, RX = 0.229714912280702, PublishID = ""Point1"", LY = 0.223456790123457, LX = 0 }, { Y = -0.230555555555556, X = 0.259868421052633, Linear = true, RY = 0.223456790123457, RX = 0, PublishID = ""Point2"", LY = 0, LX = -0.229714912280702 }, { Y = 0.439814814814815, X = 0.259868421052633, Linear = true, RY = 0, RX = -0.229714912280702, PublishID = ""Point3"", LY = -0.223456790123457, LX = 0 } }, Closed = true } }, UseFrameFormatSettings = Input { Value = 1 }, Invert = Input { Value = 1 }, Polyline2 = Input {
												Value = Polyline {
												},
												Disabled = true
											} }, DrawMode2 = ""InsertAndModify"", DrawMode = ""InsertAndModify"", NameSet = true, ViewInfo = OperatorInfo { Pos = { 385, 445.5 } }, CustomData = {
										} }
								}
							}
						}
					},
					Inputs = {
						EffectMask = Input {
							SourceOp = ""CrpTarget"",
							Source = ""Mask"",
						},
						Filter = Input { Value = FuID { ""Fast Gaussian"" }, },
						Invert = Input { Value = 1, },
						MaskWidth = Input { Value = 960, },
						MaskHeight = Input { Value = 540, },
						PixelAspect = Input { Value = { 1, 1 }, },
						UseFrameFormatSettings = Input { Value = 1, },
						ClippingMode = Input { Value = FuID { ""None"" }, },
						Polyline = Input {
							Value = Polyline {
								Closed = true,
								Points = {
									{ Linear = true, X = -0.378035858192305, Y = 0.211006384919428, LX = 0.223010893768551, LY = 0, RX = 0, RY = -0.118170310969224, PublishID = ""Point0"" },
									{ Linear = true, X = -0.378035858192305, Y = -0.143504547988244, LX = 0, LY = 0.118170310969224, RX = 0.223010893768551, RY = 0, PublishID = ""Point1"" },
									{ Linear = true, X = 0.290996823113349, Y = -0.143504547988244, LX = -0.223010893768551, LY = 0, RX = 0, RY = 0.118170310969224, PublishID = ""Point2"" },
									{ Linear = true, X = 0.290996823113349, Y = 0.211006384919428, LX = 0, LY = -0.118170310969224, RX = -0.223010893768551, RY = 0, PublishID = ""Point3"" }
								}
							},
						},
						Polyline2 = Input {
							Value = Polyline {
							},
							Disabled = true,
						},
						Point0 = Input {
							Value = { 0.121964141807695, 0.711006384919428 },
							Expression = ""CrpCTRL.Mode==1 and Point(CrpCTRL.PointIn2.X, CrpCTRL.PointIn3.Y) or Point(CrpCTRL.PointIn2.X, CrpCTRL.Topapa.Y)"",
						},
						Point1 = Input {
							Value = { 0.121964141807695, 0.356495452011756 },
							Expression = ""Point(CrpCTRL.PointIn2.X, CrpCTRL.PointIn2.Y)"",
						},
						Point2 = Input {
							Value = { 0.790996823113349, 0.356495452011756 },
							Expression = ""CrpCTRL.Mode==1 and Point(CrpCTRL.PointIn3.X, CrpCTRL.PointIn2.Y) or Point(CrpCTRL.Topapa.X, CrpCTRL.PointIn2.Y)"",
						},
						Point3 = Input {
							Value = { 0.790996823113349, 0.711006384919428 },
							Expression = ""CrpCTRL.Mode==1 and Point(CrpCTRL.PointIn3.X, CrpCTRL.PointIn3.Y) or Point(CrpCTRL.Topapa.X, CrpCTRL.Topapa.Y)"",
						},
					},
					ViewInfo = OperatorInfo { Pos = { 165, 313.5 } },
				},
				CrpFrameHighlight = PolylineMask {
					DrawMode = ""InsertAndModify"",
					DrawMode2 = ""InsertAndModify"",
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						EffectMask = Input {
							SourceOp = ""CrpFrame"",
							Source = ""Mask"",
						},
						Filter = Input { Value = FuID { ""Fast Gaussian"" }, },
						BorderWidth = Input {
							Value = 0.00222222222222222,
							Expression = ""2/CrpTrans.Output.Width"",
						},
						PaintMode = Input { Value = FuID { ""Subtract"" }, },
						Invert = Input { Value = 1, },
						MaskWidth = Input { Value = 960, },
						MaskHeight = Input { Value = 540, },
						PixelAspect = Input { Value = { 1, 1 }, },
						UseFrameFormatSettings = Input { Value = 1, },
						ClippingMode = Input { Value = FuID { ""None"" }, },
						Polyline = Input {
							Value = Polyline {
								Closed = true,
								Points = {
									{ Linear = true, X = -0.378035858192305, Y = 0.211006384919428, LX = 0.223010893768551, LY = 0, RX = 0, RY = -0.118170310969224, PublishID = ""Point0"" },
									{ Linear = true, X = -0.378035858192305, Y = -0.143504547988244, LX = 0, LY = 0.118170310969224, RX = 0.223010893768551, RY = 0, PublishID = ""Point1"" },
									{ Linear = true, X = 0.290996823113349, Y = -0.143504547988244, LX = -0.223010893768551, LY = 0, RX = 0, RY = 0.118170310969224, PublishID = ""Point2"" },
									{ Linear = true, X = 0.290996823113349, Y = 0.211006384919428, LX = 0, LY = -0.118170310969224, RX = -0.223010893768551, RY = 0, PublishID = ""Point3"" }
								}
							},
						},
						Polyline2 = Input {
							Value = Polyline {
							},
							Disabled = true,
						},
						Point0 = Input {
							Value = { 0.144444444444444, 0.966666666666667 },
							Expression = ""CrpCTRL.Mode==1 and Point(CrpCTRL.PointIn2.X, CrpCTRL.PointIn3.Y) or Point(CrpCTRL.PointIn2.X, CrpCTRL.Topapa.Y)"",
						},
						Point1 = Input {
							Value = { 0.144444444444444, 0.308888888888889 },
							Expression = ""Point(CrpCTRL.PointIn2.X, CrpCTRL.PointIn2.Y)"",
						},
						Point2 = Input {
							Value = { 0.886666666666667, 0.308888888888889 },
							Expression = ""CrpCTRL.Mode==1 and Point(CrpCTRL.PointIn3.X, CrpCTRL.PointIn2.Y) or Point(CrpCTRL.Topapa.X, CrpCTRL.PointIn2.Y)"",
						},
						Point3 = Input {
							Value = { 0.886666666666667, 0.966666666666667 },
							Expression = ""CrpCTRL.Mode==1 and Point(CrpCTRL.PointIn3.X, CrpCTRL.PointIn3.Y) or Point(CrpCTRL.Topapa.X, CrpCTRL.Topapa.Y)"",
						},
					},
					ViewInfo = OperatorInfo { Pos = { 55, 346.5 } },
				},
				CrpBgA = Background {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						EffectMask = Input {
							SourceOp = ""CrpFrameHighlight"",
							Source = ""Mask"",
						},
						GlobalOut = Input { Value = 149, },
						Width = Input {
							Value = 900,
							Expression = ""CrpTone.Output.Width"",
						},
						Height = Input {
							Value = 900,
							Expression = ""CrpTone.Output.Height"",
						},
						UseFrameFormatSettings = Input { Value = 1, },
						Depth = Input { Value = 1, },
						[""Gamut.SLogVersion""] = Input { Value = FuID { ""SLog2"" }, },
						TopLeftRed = Input { Value = 1, },
						TopRightRed = Input { Value = 1, },
						TopRightGreen = Input { Value = 1, },
						TopRightBlue = Input { Value = 1, },
						BottomLeftRed = Input { Value = 1, },
						BottomLeftGreen = Input { Value = 0.5, },
						BottomRightGreen = Input { Value = 0.5, },
						BottomRightBlue = Input { Value = 1, },
						GradientType = Input { Value = FuID { ""Radial"" }, },
						Start = Input { Value = { 0.5, 0.5 }, },
						Gradient = Input {
							Value = Gradient {
								Colors = {
									[0] = { 1, 1, 1, 1 },
									[1] = { 0, 0, 0, 1 }
								}
							},
						},
					},
					ViewInfo = OperatorInfo { Pos = { 165, 379.5 } },
				},
				ColorCorrector1 = ColorCorrector {
					CtrlWShown = false,
					Inputs = {
						WheelHue1 = Input {
							Value = 0.14,
							Expression = ""CrpCTRL.Hue+0.14"",
						},
						TintMode = Input { Value = 0, },
						Hue1 = Input { Expression = ""CrpCTRL.Hue+0.14"", },
						MasterRGBGain = Input { Value = 3.5, },
						ColorRanges = Input {
							Value = ColorCurves {
								Curves = {
									{
										Points = {
											{ 0, 1 },
											{ 0.4, 0.2 },
											{ 0.6, 0 },
											{ 1, 0 }
										}
									},
									{
										Points = {
											{ 0, 0 },
											{ 0.4, 0 },
											{ 0.6, 0.2 },
											{ 1, 1 }
										}
									}
								}
							},
						},
						PreDividePostMultiply = Input { Value = 1, },
						HistogramIgnoreTransparent = Input { Value = 1, },
						Input = Input {
							SourceOp = ""CrpBgA"",
							Source = ""Output"",
						},
					},
					ViewInfo = OperatorInfo { Pos = { 55, 379.5 } },
				},
				CrpHighlight = Merge {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Blend = Input { Expression = ""CrpCTRL.Highlight"", },
						Background = Input {
							SourceOp = ""CrpPreMrg"",
							Source = ""Output"",
						},
						Foreground = Input {
							SourceOp = ""ColorCorrector1"",
							Source = ""Output"",
						},
						PerformDepthMerge = Input { Value = 0, },
					},
					ViewInfo = OperatorInfo { Pos = { -55, 379.5 } },
				},
				CrpText = TextPlus {
					CtrlWShown = false,
					NameSet = true,
					CurrentSettings = 2,
					CustomData = {
						Settings = {
							[1] = {
								Tools = ordered() {
									CrpText = TextPlus { Inputs = { LayoutRotation = Input { Value = 1 }, Name2 = Input { Value = ""Black Outline"" }, Position1 = Input { Value = 1 }, HorizontalJustificationNew = Input { Value = 3 }, HorizontalLeftCenterRight = Input { Value = 1 }, OutsideOnly2 = Input { Value = 1 }, StyledText = Input { Value = ""X: 742  Y: 1295 "", Expression = ""Text(\""W: \"" .. CrpCrop.XSize .. \""  H: \"" .. CrpCrop.YSize .. \"" \"")"" }, Center = Input { Value = { 1, 0.193518518518519 }, Expression = ""CTRLCrop.Mode==1 and Point(CTRLCrop.PointIn3.X<=1 and CTRLCrop.PointIn3.X or 1, CrpCrop.YOffset>=0 and CTRLCrop.PointIn2.Y or 0) or Point(CTRLCrop.PointIn1.X<=1 and CTRLCrop.PointIn1.X or 1, CrpCrop.YOffset>=0 and CTRLCrop.PointIn2.Y or 0)"" }, Softness1 = Input { Value = 1 }, Size = Input { Value = 0.0789473684210526, Expression = ""(1/Width)*CTRLCrop.FontSize"" }, TransformRotation = Input { Value = 1 }, Softness2 = Input { Value = 1 }, Thickness2 = Input { Value = 0.1 }, Opacity2 = Input { Value = 0.5 }, Height = Input { Value = 1080, Expression = ""CrpTone.Output.Height"" }, Red2 = Input { Value = 0 }, Width = Input { Value = 608, Expression = ""CrpTone.Output.Width"" }, VerticalJustificationNew = Input { Value = 3 }, Font = Input { Value = ""Open Sans"" }, Style = Input { Value = ""Semibold"" }, Enabled2 = Input { Value = 1 }, GlobalOut = Input { Value = 127 }, [""Gamut.SLogVersion""] = Input { Value = FuID { ""SLog2"" } }, VerticalTopCenterBottom = Input { Value = -1.75, Expression = ""CrpCrop.YOffset>=(CTRLCrop.FontSize*0.8) and -1.75 or 1.75"" }, Position2 = Input { Value = 1 } }, CtrlWZoom = false, NameSet = true, ViewInfo = OperatorInfo { Pos = { 385, 544.5 } }, CustomData = {
										} }
								}
							}
						}
					},
					Inputs = {
						GlobalOut = Input { Value = 149, },
						Width = Input {
							Value = 1080,
							Expression = ""CrpTone.Output.Width"",
						},
						Height = Input {
							Value = 1920,
							Expression = ""CrpTone.Output.Height"",
						},
						[""Gamut.SLogVersion""] = Input { Value = FuID { ""SLog2"" }, },
						Center = Input {
							Value = { 0.790996823113349, 0.356495452011756 },
							Expression = ""CrpCTRL.Mode==1 and Point(CrpCTRL.PointIn3.X<=1 and CrpCTRL.PointIn3.X or 1, CrpCrop.YOffset>=0 and CrpCTRL.PointIn2.Y or 0) or Point(CrpCTRL.Topapa.X<=1 and CrpCTRL.Topapa.X or 1, CrpCrop.YOffset>=0 and CrpCTRL.PointIn2.Y or 0)"",
						},
						LayoutRotation = Input { Value = 1, },
						TransformRotation = Input { Value = 1, },
						Name2 = Input { Value = ""Black Outline"", },
						Enabled2 = Input { Value = 1, },
						Softness1 = Input { Value = 1, },
						Position1 = Input { Value = 1, },
						StyledText = Input {
							Value = ""X: 742  Y: 1295 "",
							Expression = ""Text(\""W: \"" .. CrpCrop.XSize .. \""  H: \"" .. CrpCrop.YSize .. \"" \"")"",
						},
						Font = Input { Value = ""Open Sans"", },
						Style = Input { Value = ""Semibold"", },
						Size = Input {
							Value = 0.0444444444444444,
							Expression = ""(1/Width)*CrpCTRL.FontSize"",
						},
						VerticalTopCenterBottom = Input {
							Value = -1.75,
							Expression = ""CrpCrop.YOffset>=(CrpCTRL.FontSize*0.8) and -1.75 or 1.75"",
						},
						VerticalJustificationNew = Input { Value = 3, },
						HorizontalLeftCenterRight = Input { Value = 1, },
						HorizontalJustificationNew = Input { Value = 3, },
						Opacity2 = Input { Value = 0.5, },
						Thickness2 = Input { Value = 0.1, },
						OutsideOnly2 = Input { Value = 1, },
						Red2 = Input { Value = 0, },
						Softness2 = Input { Value = 1, },
						Position2 = Input { Value = 1, },
					},
					ViewInfo = OperatorInfo { Pos = { 165, 412.5 } },
				},
				CrpTextMerge = Merge {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Blend = Input {
							Value = 0.5,
							Expression = ""CrpCTRL.Size"",
						},
						Background = Input {
							SourceOp = ""CrpHighlight"",
							Source = ""Output"",
						},
						Foreground = Input {
							SourceOp = ""CrpText"",
							Source = ""Output"",
						},
						FlattenTransform = Input { Value = 1, },
						PerformDepthMerge = Input { Value = 0, },
					},
					ViewInfo = OperatorInfo { Pos = { -55, 412.5 } },
				},
				CrpSwitch = Dissolve {
					Transitions = {
						[0] = ""DFTDissolve""
					},
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Mix = Input {
							Value = 0,
							Expression = ""1-CrpCTRL.Preview"",
						},
						Background = Input {
							SourceOp = ""CrpBgFix"",
							Source = ""Output"",
						},
						Foreground = Input {
							SourceOp = ""CrpCrop"",
							Source = ""Output"",
						},
					},
					ViewInfo = OperatorInfo { Pos = { -110, 544.5 } },
				},
				CrpBgT = Background {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						EffectMask = Input {
							SourceOp = ""CrpFrame"",
							Source = ""Mask"",
						},
						GlobalOut = Input { Value = 149, },
						Width = Input {
							Value = 1080,
							Expression = ""CrpTone.Output.Width"",
						},
						Height = Input {
							Value = 1920,
							Expression = ""CrpTone.Output.Height"",
						},
						UseFrameFormatSettings = Input { Value = 1, },
						Depth = Input { Value = 1, },
						[""Gamut.SLogVersion""] = Input { Value = FuID { ""SLog2"" }, },
						TopLeftAlpha = Input { Value = 0.85, },
						TopRightRed = Input { Value = 1, },
						TopRightGreen = Input { Value = 1, },
						TopRightBlue = Input { Value = 1, },
						BottomLeftRed = Input { Value = 1, },
						BottomLeftGreen = Input { Value = 0.5, },
						BottomRightGreen = Input { Value = 0.5, },
						BottomRightBlue = Input { Value = 1, },
						GradientType = Input { Value = FuID { ""Radial"" }, },
						Start = Input { Value = { 0.5, 0.5 }, },
						Gradient = Input {
							Value = Gradient {
								Colors = {
									[0] = { 1, 1, 1, 1 },
									[1] = { 0, 0, 0, 1 }
								}
							},
						},
					},
					ViewInfo = OperatorInfo { Pos = { 55, 478.5 } },
				},
				CrpBgFix = Merge {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Background = Input {
							SourceOp = ""CrpBgT"",
							Source = ""Output"",
						},
						Foreground = Input {
							SourceOp = ""CrpTextMerge"",
							Source = ""Output"",
						},
						PerformDepthMerge = Input { Value = 0, },
					},
					ViewInfo = OperatorInfo { Pos = { -55, 478.5 } },
				},
				CrpNmbFrmB = RectangleMask {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Filter = Input { Value = FuID { ""Fast Gaussian"" }, },
						MaskWidth = Input { Value = 960, },
						MaskHeight = Input { Value = 540, },
						PixelAspect = Input { Value = { 1, 1 }, },
						UseFrameFormatSettings = Input { Value = 1, },
						ClippingMode = Input { Value = FuID { ""None"" }, },
						Width = Input { Value = 1, },
						Height = Input {
							Value = 1,
							Expression = ""Width"",
						},
						Angle = Input {
							Value = -0.0874560776553608,
							Expression = ""CrpNmbFrmA.ZRotation"",
						},
						ShowViewControls = Input { Expression = ""CrpNmbFrmA.AngleNest==0 and 0 or CrpCTRL.Operation==1 and 0 or 1"", },
					},
					ViewInfo = OperatorInfo { Pos = { 55, 82.5 } },
					Colors = { TileColor = { R = 0.6, G = 0.450980392156863, B = 0.627450980392157 }, },
					UserControls = ordered() { ShowViewControls = { INP_MaxAllowed = 1, INP_Integer = false, INPID_InputControl = ""CheckboxControl"", INP_MaxScale = 1, INP_Default = 1, INP_External = true, INP_MinScale = 0, INP_MinAllowed = 0, LINKID_DataType = ""Number"", ICS_ControlPage = ""Controls"", INP_Passive = true, CBC_TriState = false, LINKS_Name = ""Show View Controls"" } }
				},
				CrpNmbFrmC = RectangleMask {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Filter = Input { Value = FuID { ""Fast Gaussian"" }, },
						MaskWidth = Input { Value = 960, },
						MaskHeight = Input { Value = 540, },
						PixelAspect = Input { Value = { 1, 1 }, },
						UseFrameFormatSettings = Input { Value = 1, },
						ClippingMode = Input { Value = FuID { ""None"" }, },
						ShowViewControls = Input { Expression = ""1-CrpCTRL.Operation"", },
					},
					ViewInfo = OperatorInfo { Pos = { 165, 82.5 } },
					Colors = { TileColor = { R = 0.6, G = 0.450980392156863, B = 0.627450980392157 }, },
					UserControls = ordered() { ShowViewControls = { INP_MaxAllowed = 1, INP_Integer = false, INPID_InputControl = ""CheckboxControl"", INP_MaxScale = 1, INP_Default = 1, INP_MinAllowed = 0, INP_MinScale = 0, INP_External = true, LINKID_DataType = ""Number"", CBC_TriState = false, INP_Passive = true, ICS_ControlPage = ""Controls"", LINKS_Name = ""Show View Controls"" } }
				}
			},
		}
	},
	ActiveTool = ""CropIt""
}"
wJTaPH0P,Files,Petro_zzz,C++,Thursday 21st of December 2023 12:55:53 PM CDT,"#include <cstdio>
#include <iostream>
#include <string>

void write_to_file(const char* filename,
	const char* str) {
	FILE* pfile = nullptr;
	fopen_s(&pfile, filename, ""a"");
	if (pfile != nullptr) {
		fprintf(pfile,""%\n"", str);
		fclose(pfile);
		printf(""%s\n"", ""Job done."");
	}
	else {
		printf(""%s\n"",""Can not open the file."");
	}
}

void write_to_binfile(
	const char* filename,
	const int* arr, 
	const int size
) {	
	FILE* pfile = nullptr;
	fopen_s(&pfile, filename, ""w"");
	if (pfile != nullptr) {
		fwrite(arr, sizeof(arr[0]), size, pfile);
		//fprintf(pfile, ""%\n"", str);
		fclose(pfile);
		printf(""%s\n"", ""Job done."");
	}
	else {
		printf(""%s\n"", ""Can not open the file."");
	}
}


int main() {	


	int arr[]{ 1,2,3,4,5 };
	write_to_binfile(""text.dat"", arr, 5);
	return 0;
}"
m3a22jwB,Untitled,sissou123,Python,Thursday 21st of December 2023 12:47:52 PM CDT,"100 Days of Code: The Complete Python Pro Bootcamp for 2023
Master Python by building 100 projects in 100 days. Learn data science, automation, build websites, games and apps! 
for more:https://cuty.io/gtzUOaJOV9s
"
1K01ixnx,MATH_MOD,575,Python,Thursday 21st of December 2023 12:41:47 PM CDT,"import numpy as np
import math
import copy
from scipy.optimize import minimize

def cor(V,x,eps):
    s = list()

    for i in V:
        s.append(1 / (np.linalg.norm(x - i, ord=2) + eps))

    S = list()

    for i in s:
        S.append(i / sum(s))

    print(S)
    print(V)
    return S[0] * V[0] + S[1] * V[1] + S[2] * V[2] + S[3] * V[3]

def coeffs(coef_lambda):
    c = list()

    for i in coef_lambda:
        c.append(sum(coef_lambda) / i)

    c1 = list()

    for i in c:
        c1.append(i / sum(c))

    return c1

def step_alg(A, eps):
    m = A.shape[1]
    w = np.array([[]])

    for i in range(m):
        w = np.append(w, [[1 / m]], axis=1)

    lam = pow(10, 10)
    k = 0
    w = w.T

    while True:
        k = k + 1
        w1 = copy.copy(w)
        w = np.dot(A, w)
        s = 0

        for i in range(A.shape[1]):
            s = s+w[i][0] / w1[i][0]

        lam1 = copy.copy(lam)
        lam = 1 / m * s
        m = max(w.T[0])

        for i in range(A.shape[1]):
            w[i][0] = w[i][0] / m

        if abs(lam - lam1) > eps:
            continue

        else:
            s=sum(w.T[0])

            for i in range(A.shape[1]):
                w[i][0] = w[i][0] / s

            break;
    return w

def St(x):
    sums = list()

    for i in V:
        sums.append(np.linalg.norm(x - i, ord=2))

    sums = np.array(sums)
    return sums

def Stein(x):
    return np.sum(C * St(x))

A1=np.array([[1, 3, 7, 9],
             [1/3, 1, 3, 1],
             [1/7, 1/3, 1, 1],
             [1/9, 1, 1, 1]])
A2=np.array([[1, 5, 7, 9],
             [1/5, 1, 3, 1],
             [1/7, 1/3, 1, 1],
             [1/9, 1, 1, 1]])
A3=np.array([[1, 3, 7, 3],
             [1/3, 1, 3, 1],
             [1/7, 1/3, 1, 1,],
             [1/3, 1, 1, 1]])
A4=np.array([[1, 3, 7, 5],
             [1/3, 1, 3, 1],
             [1/7, 1/3, 1, 1],
             [1/5, 1, 1, 1]])

w1=step_alg(A1, 0.0001)
w2=step_alg(A2, 0.0001)
w3=step_alg(A3, 0.0001)
w4=step_alg(A4, 0.0001)

V = copy.deepcopy(w1.T)

V = np.append(V, copy.deepcopy(w2.T), axis=0)
V = np.append(V, copy.deepcopy(w3.T), axis=0)
V = np.append(V, copy.deepcopy(w4.T), axis=0)

lambda1,v = np.linalg.eig(A1)
lambda2,v = np.linalg.eig(A2)
lambda3,v1 = np.linalg.eig(A3)
lambda4,v1 = np.linalg.eig(A4)

lambda1 = max(lambda1)
lambda2 = max(lambda2)
lambda3 = max(lambda3)
lambda4 = max(lambda4)
print(lambda1, lambda2, lambda3, lambda4)

C = np.array(coeffs([lambda1, lambda2, lambda3, lambda4]))

x0=np.array([0, 0, 0, 0])
x=minimize(Stein, x0, method='nelder-mead', options={'xtol':1e-3,'disp':True}).x
print(cor(V, x, 0.0001))"
V78y2AdK,step by step cframe animation (walk+run),LikeableEmmec,Lua,Thursday 21st of December 2023 12:38:37 PM CDT,"local walktable = {
	[""Keyframes""] = {
		[0.29] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.31,0.42,-0) * CFrame.Angles(math.rad(0),math.rad(-0),math.rad(-31.59))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(-0.03,-0.03,0) * CFrame.Angles(math.rad(-0),math.rad(0),math.rad(-28.86))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(-0),math.rad(-35.47))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(-6.24),math.rad(0),math.rad(0))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(0),math.rad(-34.88))
								}
							},
							[""CFrame""] = CFrame.new(-0,0,0.09) * CFrame.Angles(math.rad(9.27),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[0.13] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.52,0.2,-0) * CFrame.Angles(math.rad(0),math.rad(-0),math.rad(34.14))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.39,0.01,0) * CFrame.Angles(math.rad(-0),math.rad(0),math.rad(16.52))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(0),math.rad(20.12))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(-5.81),math.rad(0),math.rad(0))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(0),math.rad(21.46))
								}
							},
							[""CFrame""] = CFrame.Angles(math.rad(9.27),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[0.46] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.41,-0.04,-0) * CFrame.Angles(math.rad(-0),math.rad(-0),math.rad(-26.08))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.37,0.06,0) * CFrame.Angles(math.rad(0),math.rad(0),math.rad(-45.78))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(-0),math.rad(-38.65))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(-6.71),math.rad(0),math.rad(0))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(0),math.rad(-40.38))
								}
							},
							[""CFrame""] = CFrame.Angles(math.rad(9.27),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[0.42] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.38,-0.02,-0) * CFrame.Angles(math.rad(-0),math.rad(-0),math.rad(-32.37))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.17,0.01,0) * CFrame.Angles(math.rad(0),math.rad(0),math.rad(-46.47))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(-0),math.rad(-44.57))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(-8.22),math.rad(0),math.rad(0))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(0),math.rad(-46.06))
								}
							},
							[""CFrame""] = CFrame.Angles(math.rad(9.27),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[0.5] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.39,-0.03,-0) * CFrame.Angles(math.rad(-0),math.rad(-0),math.rad(-17.57))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.51,0.17,0) * CFrame.Angles(math.rad(0),math.rad(0),math.rad(-40.23))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(-0),math.rad(-29.15))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(-5.95),math.rad(0),math.rad(0))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(0),math.rad(-30.89))
								}
							},
							[""CFrame""] = CFrame.Angles(math.rad(9.27),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[0.33] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.3,0.23,-0) * CFrame.Angles(math.rad(0),math.rad(-0),math.rad(-35.95))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(-0.06,-0.02,0) * CFrame.Angles(math.rad(-0),math.rad(0),math.rad(-37.28))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(-0),math.rad(-43.05))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(-8.24),math.rad(0),math.rad(0))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(0),math.rad(-43.34))
								}
							},
							[""CFrame""] = CFrame.new(0,0,0.08) * CFrame.Angles(math.rad(9.27),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[0.04] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.15,0.01,-0) * CFrame.Angles(math.rad(0),math.rad(-0),math.rad(40.06))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.33,0.2,0) * CFrame.Angles(math.rad(-0),math.rad(0),math.rad(32.98))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(0),math.rad(39.66))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(-8.29),math.rad(0),math.rad(0))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(-0),math.rad(0),math.rad(40.25))
								}
							},
							[""CFrame""] = CFrame.Angles(math.rad(9.27),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[0.38] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.33,0.05,-0) * CFrame.Angles(math.rad(0),math.rad(-0),math.rad(-35.86))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.Angles(math.rad(-0),math.rad(0),math.rad(-43.31))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(-0),math.rad(-46.22))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(-9.29),math.rad(0),math.rad(0))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(0),math.rad(-47.25))
								}
							},
							[""CFrame""] = CFrame.new(0,0,0.05) * CFrame.Angles(math.rad(9.27),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[0.08] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.4,0.07,-0) * CFrame.Angles(math.rad(0),math.rad(-0),math.rad(42.33))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.4,0.09,0) * CFrame.Angles(math.rad(-0),math.rad(0),math.rad(26.15))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(0),math.rad(31.9))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(-6.71),math.rad(0),math.rad(0))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(0),math.rad(32.82))
								}
							},
							[""CFrame""] = CFrame.Angles(math.rad(9.27),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[0.21] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.44,0.51,-0) * CFrame.Angles(math.rad(0),math.rad(-0),math.rad(-3.74))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.19,-0.05,0) * CFrame.Angles(math.rad(-0),math.rad(0),math.rad(-6.88))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(-0),math.rad(-9.81))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(-5.18),math.rad(0),math.rad(0))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(0),math.rad(-8.09))
								}
							},
							[""CFrame""] = CFrame.new(-0,0,0.05) * CFrame.Angles(math.rad(9.27),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[0.63] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.21,-0.02,-0) * CFrame.Angles(math.rad(0),math.rad(-0),math.rad(13.6))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.54,0.56,0) * CFrame.Angles(math.rad(0),math.rad(0),math.rad(-3.07))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(0),math.rad(11.06))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(-5.17),math.rad(0),math.rad(0))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(0),math.rad(10.35))
								}
							},
							[""CFrame""] = CFrame.new(-0,0,0.06) * CFrame.Angles(math.rad(9.27),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[0.67] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.13,-0.01,-0) * CFrame.Angles(math.rad(0),math.rad(-0),math.rad(22.86))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.46,0.59,0) * CFrame.Angles(math.rad(-0),math.rad(0),math.rad(11.13))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(0),math.rad(23.67))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(-5.15),math.rad(0),math.rad(0))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(0),math.rad(23.42))
								}
							},
							[""CFrame""] = CFrame.new(0,0,0.08) * CFrame.Angles(math.rad(9.27),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[0.79] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(-0),math.rad(36.73))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.26,0.37,0) * CFrame.Angles(math.rad(-0),math.rad(0),math.rad(35.59))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(0),math.rad(42.47))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(-9.29),math.rad(0),math.rad(0))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(-0),math.rad(0),math.rad(42.93))
								}
							},
							[""CFrame""] = CFrame.new(0,0,0.05) * CFrame.Angles(math.rad(9.27),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[0.58] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.28,-0.02,-0) * CFrame.Angles(math.rad(-0),math.rad(-0),math.rad(3.16))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.58,0.46,0) * CFrame.Angles(math.rad(0),math.rad(0),math.rad(-17.46))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(-0),math.rad(-2.96))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(-5.25),math.rad(0),math.rad(0))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(0),math.rad(-4.14))
								}
							},
							[""CFrame""] = CFrame.new(-0,0,0.03) * CFrame.Angles(math.rad(9.27),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[0.25] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.35,0.54,-0) * CFrame.Angles(math.rad(0),math.rad(-0),math.rad(-21.22))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.07,-0.05,0) * CFrame.Angles(math.rad(-0),math.rad(0),math.rad(-18.52))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(-0),math.rad(-24.08))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(-5.15),math.rad(0),math.rad(0))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(-0),math.rad(0),math.rad(-22.72))
								}
							},
							[""CFrame""] = CFrame.new(0,0,0.08) * CFrame.Angles(math.rad(9.27),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[0.17] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.51,0.38,-0) * CFrame.Angles(math.rad(0),math.rad(-0),math.rad(16.9))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.31,-0.03,0) * CFrame.Angles(math.rad(-0),math.rad(0),math.rad(5.16))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(0),math.rad(5.61))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(-5.35),math.rad(0),math.rad(0))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(0),math.rad(7.28))
								}
							},
							[""CFrame""] = CFrame.Angles(math.rad(9.27),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[0] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(-0),math.rad(36.73))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.28,0.25,0) * CFrame.Angles(math.rad(-0),math.rad(0),math.rad(35.59))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(0),math.rad(42.47))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(-9.29),math.rad(0),math.rad(0))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(-0),math.rad(0),math.rad(42.93))
								}
							},
							[""CFrame""] = CFrame.new(0,0,0.05) * CFrame.Angles(math.rad(9.27),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[0.75] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(-0),math.rad(35))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.29,0.42,0) * CFrame.Angles(math.rad(-0),math.rad(0),math.rad(32.3))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(0),math.rad(40.14))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(-8.22),math.rad(0),math.rad(0))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(0),math.rad(40.51))
								}
							},
							[""CFrame""] = CFrame.new(0,0,0.06) * CFrame.Angles(math.rad(9.27),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[0.54] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.35,-0.03,-0) * CFrame.Angles(math.rad(-0),math.rad(-0),math.rad(-7.54))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.57,0.31,0) * CFrame.Angles(math.rad(0),math.rad(0),math.rad(-30.38))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(-0),math.rad(-16.86))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(-5.49),math.rad(0),math.rad(0))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(0),math.rad(-18.41))
								}
							},
							[""CFrame""] = CFrame.Angles(math.rad(9.27),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[0.71] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.06,-0.01,-0) * CFrame.Angles(math.rad(0),math.rad(-0),math.rad(30.2))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.37,0.52,0) * CFrame.Angles(math.rad(-0),math.rad(0),math.rad(23.56))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(0),math.rad(33.65))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(-6.23),math.rad(0),math.rad(0))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(0),math.rad(33.78))
								}
							},
							[""CFrame""] = CFrame.new(0,0,0.07) * CFrame.Angles(math.rad(9.27),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		}
	},
}
local idleanim = {
	[""Keyframes""] = {
		[2.7] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.47,0.14,0.01) * CFrame.Angles(math.rad(-4.92),math.rad(3.3),math.rad(1.08))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.new(-0.04,-0.07,-0.01) * CFrame.Angles(math.rad(-3.93),math.rad(-7.31),math.rad(-3.76))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0.22),math.rad(0),math.rad(-0))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.34,0.1,0.07) * CFrame.Angles(math.rad(-5.02),math.rad(-11.54),math.rad(-9.59))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.new(-0.06,-0.05,0.01) * CFrame.Angles(math.rad(-2.76),math.rad(13.32),math.rad(0.57))
								}
							},
							[""CFrame""] = CFrame.new(-0,-0.03,-0.09) * CFrame.Angles(math.rad(2.74),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[2.83] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.45,0.14,0.01) * CFrame.Angles(math.rad(-4.87),math.rad(3.33),math.rad(0.07))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.new(-0.04,-0.06,-0.01) * CFrame.Angles(math.rad(-3.97),math.rad(-7.29),math.rad(-4.09))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0.07),math.rad(0),math.rad(-0))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.32,0.1,0.07) * CFrame.Angles(math.rad(-4.92),math.rad(-11.58),math.rad(-8.57))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.new(-0.05,-0.05,0.01) * CFrame.Angles(math.rad(-2.84),math.rad(13.31),math.rad(0.88))
								}
							},
							[""CFrame""] = CFrame.new(-0,-0.03,-0.08) * CFrame.Angles(math.rad(3.07),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[2.3] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.51,0.15,0.01) * CFrame.Angles(math.rad(-4.99),math.rad(3.27),math.rad(2.83))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.new(-0.03,-0.07,-0.01) * CFrame.Angles(math.rad(-3.72),math.rad(-7.43),math.rad(-2.14))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0.95),math.rad(0),math.rad(-0))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.38,0.11,0.08) * CFrame.Angles(math.rad(-5.17),math.rad(-11.5),math.rad(-11.34))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.new(-0.07,-0.05,0.01) * CFrame.Angles(math.rad(-2.36),math.rad(13.36),math.rad(-1))
								}
							},
							[""CFrame""] = CFrame.new(-0,-0.03,-0.1) * CFrame.Angles(math.rad(2.34),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[2.1] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.52,0.16,0.01) * CFrame.Angles(math.rad(-4.99),math.rad(3.3),math.rad(2.97))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.new(-0.02,-0.07,-0.01) * CFrame.Angles(math.rad(-3.6),math.rad(-7.48),math.rad(-1.21))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(1.37),math.rad(0),math.rad(-0))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.39,0.11,0.08) * CFrame.Angles(math.rad(-5.15),math.rad(-11.52),math.rad(-11.47))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.new(-0.07,-0.05,0.01) * CFrame.Angles(math.rad(-2.13),math.rad(13.38),math.rad(-1.9))
								}
							},
							[""CFrame""] = CFrame.new(-0,-0.03,-0.11) * CFrame.Angles(math.rad(2.52),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[0.97] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.45,0.16,0.01) * CFrame.Angles(math.rad(-4.66),math.rad(3.65),math.rad(-3.14))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.new(-0.02,-0.08,-0.01) * CFrame.Angles(math.rad(-3.56),math.rad(-7.5),math.rad(-0.92))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(1.51),math.rad(0),math.rad(-0))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.31,0.12,0.07) * CFrame.Angles(math.rad(-4.21),math.rad(-11.88),math.rad(-5.06))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.new(-0.07,-0.05,0.01) * CFrame.Angles(math.rad(-2.05),math.rad(13.38),math.rad(-2.19))
								}
							},
							[""CFrame""] = CFrame.new(-0,-0.07,-0.09) * CFrame.Angles(math.rad(5.92),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[0.23] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.41,0.14,0.01) * CFrame.Angles(math.rad(-4.72),math.rad(3.49),math.rad(-2.82))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.new(-0.04,-0.07,-0.01) * CFrame.Angles(math.rad(-3.95),math.rad(-7.3),math.rad(-3.95))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0.14),math.rad(0),math.rad(-0))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.28,0.1,0.06) * CFrame.Angles(math.rad(-4.49),math.rad(-11.74),math.rad(-5.57))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.new(-0.05,-0.05,0.01) * CFrame.Angles(math.rad(-2.81),math.rad(13.32),math.rad(0.74))
								}
							},
							[""CFrame""] = CFrame.new(-0,-0.05,-0.07) * CFrame.Angles(math.rad(4.62),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[0.6] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.42,0.15,0.01) * CFrame.Angles(math.rad(-4.65),math.rad(3.61),math.rad(-3.69))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.new(-0.03,-0.07,-0.01) * CFrame.Angles(math.rad(-3.78),math.rad(-7.4),math.rad(-2.6))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0.75),math.rad(0),math.rad(-0))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.29,0.11,0.06) * CFrame.Angles(math.rad(-4.23),math.rad(-11.85),math.rad(-4.55))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.new(-0.06,-0.05,0.01) * CFrame.Angles(math.rad(-2.47),math.rad(13.35),math.rad(-0.56))
								}
							},
							[""CFrame""] = CFrame.new(-0,-0.06,-0.08) * CFrame.Angles(math.rad(5.7),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[1.93] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.53,0.16,0.01) * CFrame.Angles(math.rad(-4.98),math.rad(3.34),math.rad(2.72))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.new(-0.02,-0.08,-0.01) * CFrame.Angles(math.rad(-3.51),math.rad(-7.53),math.rad(-0.51))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(1.69),math.rad(0),math.rad(-0))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.39,0.12,0.08) * CFrame.Angles(math.rad(-5.07),math.rad(-11.56),math.rad(-11.17))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.new(-0.08,-0.05,0.01) * CFrame.Angles(math.rad(-1.95),math.rad(13.38),math.rad(-2.58))
								}
							},
							[""CFrame""] = CFrame.new(-0,-0.03,-0.11) * CFrame.Angles(math.rad(2.86),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[1.8] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.53,0.17,0.01) * CFrame.Angles(math.rad(-4.95),math.rad(3.39),math.rad(2.25))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.new(-0.02,-0.08,-0.01) * CFrame.Angles(math.rad(-3.45),math.rad(-7.55),math.rad(-0.05))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(1.9),math.rad(0),math.rad(-0))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.39,0.12,0.08) * CFrame.Angles(math.rad(-4.97),math.rad(-11.61),math.rad(-10.66))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.new(-0.08,-0.05,0.01) * CFrame.Angles(math.rad(-1.84),math.rad(13.39),math.rad(-3.03))
								}
							},
							[""CFrame""] = CFrame.new(-0,-0.04,-0.11) * CFrame.Angles(math.rad(3.27),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[2.43] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.5,0.15,0.01) * CFrame.Angles(math.rad(-4.98),math.rad(3.27),math.rad(2.46))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.new(-0.03,-0.07,-0.01) * CFrame.Angles(math.rad(-3.8),math.rad(-7.39),math.rad(-2.75))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0.68),math.rad(0),math.rad(-0))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.37,0.11,0.07) * CFrame.Angles(math.rad(-5.15),math.rad(-11.5),math.rad(-10.97))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.new(-0.06,-0.05,0.01) * CFrame.Angles(math.rad(-2.51),math.rad(13.35),math.rad(-0.41))
								}
							},
							[""CFrame""] = CFrame.new(-0,-0.03,-0.1) * CFrame.Angles(math.rad(2.37),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[1.37] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.49,0.17,0.01) * CFrame.Angles(math.rad(-4.78),math.rad(3.56),math.rad(-0.78))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.new(-0.01,-0.08,-0.01) * CFrame.Angles(math.rad(-3.4),math.rad(-7.57),math.rad(0.34))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(2.07),math.rad(0),math.rad(-0))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.35,0.12,0.07) * CFrame.Angles(math.rad(-4.5),math.rad(-11.79),math.rad(-7.5))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.new(-0.08,-0.05,0.01) * CFrame.Angles(math.rad(-1.74),math.rad(13.39),math.rad(-3.4))
								}
							},
							[""CFrame""] = CFrame.new(-0,-0.06,-0.1) * CFrame.Angles(math.rad(4.97),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[1.13] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.46,0.16,0.01) * CFrame.Angles(math.rad(-4.7),math.rad(3.63),math.rad(-2.38))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.new(-0.02,-0.08,-0.01) * CFrame.Angles(math.rad(-3.48),math.rad(-7.54),math.rad(-0.26))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(1.8),math.rad(0),math.rad(-0))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.33,0.12,0.07) * CFrame.Angles(math.rad(-4.29),math.rad(-11.86),math.rad(-5.85))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.new(-0.08,-0.05,0.01) * CFrame.Angles(math.rad(-1.89),math.rad(13.39),math.rad(-2.82))
								}
							},
							[""CFrame""] = CFrame.new(-0,-0.06,-0.09) * CFrame.Angles(math.rad(5.67),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[3] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.41,0.13,0.01) * CFrame.Angles(math.rad(-4.8),math.rad(3.37),math.rad(-1.55))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.new(-0.04,-0.06,-0.01) * CFrame.Angles(math.rad(-3.99),math.rad(-7.28),math.rad(-4.25))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.new()
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.28,0.1,0.06) * CFrame.Angles(math.rad(-4.75),math.rad(-11.63),math.rad(-6.95))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.new(-0.05,-0.05,0.01) * CFrame.Angles(math.rad(-2.88),math.rad(13.31),math.rad(1.04))
								}
							},
							[""CFrame""] = CFrame.new(-0,-0.04,-0.07) * CFrame.Angles(math.rad(3.59),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[0] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.41,0.13,0.01) * CFrame.Angles(math.rad(-4.8),math.rad(3.37),math.rad(-1.55))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.new(-0.04,-0.06,-0.01) * CFrame.Angles(math.rad(-3.99),math.rad(-7.28),math.rad(-4.25))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.new()
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.28,0.1,0.06) * CFrame.Angles(math.rad(-4.75),math.rad(-11.63),math.rad(-6.95))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.new(-0.05,-0.05,0.01) * CFrame.Angles(math.rad(-2.88),math.rad(13.31),math.rad(1.04))
								}
							},
							[""CFrame""] = CFrame.new(-0,-0.04,-0.07) * CFrame.Angles(math.rad(3.59),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[0.37] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.41,0.14,0.01) * CFrame.Angles(math.rad(-4.69),math.rad(3.54),math.rad(-3.3))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.new(-0.04,-0.07,-0.01) * CFrame.Angles(math.rad(-3.9),math.rad(-7.33),math.rad(-3.55))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0.32),math.rad(0),math.rad(-0))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.28,0.11,0.06) * CFrame.Angles(math.rad(-4.38),math.rad(-11.79),math.rad(-5.03))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.new(-0.06,-0.05,0.01) * CFrame.Angles(math.rad(-2.71),math.rad(13.33),math.rad(0.36))
								}
							},
							[""CFrame""] = CFrame.new(-0,-0.06,-0.07) * CFrame.Angles(math.rad(5.09),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[2.57] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.49,0.15,0.01) * CFrame.Angles(math.rad(-4.95),math.rad(3.28),math.rad(1.88))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.new(-0.04,-0.07,-0.01) * CFrame.Angles(math.rad(-3.87),math.rad(-7.35),math.rad(-3.3))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0.43),math.rad(0),math.rad(-0))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.36,0.1,0.07) * CFrame.Angles(math.rad(-5.1),math.rad(-11.52),math.rad(-10.39))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.new(-0.06,-0.05,0.01) * CFrame.Angles(math.rad(-2.65),math.rad(13.34),math.rad(0.12))
								}
							},
							[""CFrame""] = CFrame.new(-0,-0.03,-0.09) * CFrame.Angles(math.rad(2.51),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[0.73] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.43,0.15,0.01) * CFrame.Angles(math.rad(-4.65),math.rad(3.64),math.rad(-3.67))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.new(-0.03,-0.07,-0.01) * CFrame.Angles(math.rad(-3.7),math.rad(-7.44),math.rad(-1.98))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(1.02),math.rad(0),math.rad(-0))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.29,0.11,0.06) * CFrame.Angles(math.rad(-4.19),math.rad(-11.88),math.rad(-4.55))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.new(-0.07,-0.05,0.01) * CFrame.Angles(math.rad(-2.32),math.rad(13.37),math.rad(-1.16))
								}
							},
							[""CFrame""] = CFrame.new(-0,-0.07,-0.08) * CFrame.Angles(math.rad(5.9),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[1.53] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.51,0.17,0.01) * CFrame.Angles(math.rad(-4.85),math.rad(3.5),math.rad(0.59))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.new(-0.01,-0.08,-0.01) * CFrame.Angles(math.rad(-3.39),math.rad(-7.58),math.rad(0.44))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(2.12),math.rad(0),math.rad(-0))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.37,0.12,0.08) * CFrame.Angles(math.rad(-4.69),math.rad(-11.72),math.rad(-8.92))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.new(-0.08,-0.05,0.01) * CFrame.Angles(math.rad(-1.71),math.rad(13.39),math.rad(-3.5))
								}
							},
							[""CFrame""] = CFrame.new(-0,-0.05,-0.11) * CFrame.Angles(math.rad(4.31),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		}
	},
}

local frames = {
	0;
	0.04;
	0.08;
	0.13;
	0.17;
	0.21;
	0.25;
	0.29;
	0.33;
	0.38;
	0.42;
	0.46;
	0.5;
	0.54;
	0.58;
	0.63;
	0.67;
	0.71;
	0.75;
	0.79;
}

local idleframes = {
	0;
	0.23;
	0.37;
	0.6;
	0.73;
	0.97;
	1.13;
	1.37;
	1.53;
	1.8;
	1.93;
	2.1;
	2.3;
	2.43;
	2.57;
	2.7;
	2.83;
	3;
}

local character = owner.Character
local hrp = character.HumanoidRootPart

local function weld(name,parent,part0,part1,c0,c1)
	local weld = Instance.new(""Weld"")
	weld.Name = name
	weld.Part0 = part0
	weld.Part1 = part1
	weld.C0 = c0
	weld.C1 = c1
	weld.Parent = parent
	return weld
end

local welds = {}
local naturalwelds = {}

for i, v in pairs(character.Torso:GetChildren()) do
	if v:IsA(""Motor6D"") then
		welds[v.Part1.Name] = weld(v.Name,v.Parent,v.Part0,v.Part1,v.C0,v.C1)
		naturalwelds[v.Part1.Name] = welds[v.Part1.Name].C0
	end
end
for i, v in pairs(hrp:GetChildren()) do -- im too lazy to type out the hrp bit manually :P
	if v:IsA(""Motor6D"") then
		welds[v.Part1.Name] = weld(v.Name,v.Parent,v.Part0,v.Part1,v.C0,v.C1)
		naturalwelds[v.Part1.Name] = welds[v.Part1.Name].C0
	end
end

local pos = 0
local prevpos = 1

local idlepos = 0
local previdlepos = 1

while true do
	if character.Humanoid.MoveDirection ~= Vector3.zero then
		idlepos=0;previdlepos=1
		pos+=1
		if not frames[pos] then pos = 1 prevpos = 1 end
		local newpos = walktable[""Keyframes""][frames[pos]].Poses.HumanoidRootPart.SubPoses
		local torsopos = newpos.Torso.SubPoses
		task.spawn(function()
			local curpos = pos
			while curpos == pos do
				for i, v in pairs(torsopos) do
					welds[i].C0 = welds[i].C0:Lerp(naturalwelds[i] * torsopos[i].CFrame,.2)
				end
				welds[""Torso""].C0 = welds[""Torso""].C0:Lerp(naturalwelds[""Torso""] * newpos.Torso.CFrame,.1)
				task.wait()
			end
		end)
		task.wait(frames[pos]-frames[prevpos])
		prevpos=pos
	else
		pos=0;prevpos=1
		idlepos+=1
		if not idleframes[idlepos] then idlepos = 1 previdlepos = 1 end
		local newpos = idleanim[""Keyframes""][idleframes[idlepos]].Poses.HumanoidRootPart.SubPoses
		local torsopos = newpos.Torso.SubPoses
		task.spawn(function()
			local curpos = pos
			while curpos == pos do
				for i, v in pairs(torsopos) do
					welds[i].C0 = welds[i].C0:Lerp(naturalwelds[i] * torsopos[i].CFrame,.2)
				end
				welds[""Torso""].C0 = welds[""Torso""].C0:Lerp(naturalwelds[""Torso""] * newpos.Torso.CFrame,.1)
				task.wait()
			end
		end)
		task.wait(idleframes[idlepos]-idleframes[previdlepos])
		previdlepos=idlepos
	end
end"
Pb4nUaSk,Museum.Hours.2012.Deu.720p.h264.aac.Subs-bp,bpmircea,BrainFuck,Thursday 21st of December 2023 12:32:55 PM CDT,"Museum Hours (Museum Hours) (Jem Cohen, 2012)
aka
Museum.Hours.2012.Deu.720p.h264.aac.Subs-bp
https://www.imdb.com/title/tt2268732/

https://filecrypt.cc/Container/7726FF3634.html

Audio tracks: de/en(Original) | Subtitles: en(Forced) es pt-BR ro ru"
bivj1aNE,Museum.Hours.2012.Deu.720p.h264.ac3.Subs-bp,bpmircea,BrainFuck,Thursday 21st of December 2023 12:31:43 PM CDT,"Museum Hours (Museum Hours) (Jem Cohen, 2012)
aka
Museum.Hours.2012.Deu.720p.h264.ac3.Subs-bp
https://www.imdb.com/title/tt2268732/

https://filecrypt.cc/Container/3990AE065B.html

Audio tracks: de/en(Original) | Subtitles: en(Forced) es pt-BR ro ru"
Tarvi6pD,Museum.Hours.2012.Deu.720p.h264.dts.Subs-bp,bpmircea,BrainFuck,Thursday 21st of December 2023 12:30:35 PM CDT,"Museum Hours (Museum Hours) (Jem Cohen, 2012)
aka
Museum.Hours.2012.Deu.720p.h264.dts.Subs-bp
https://www.imdb.com/title/tt2268732/

https://filecrypt.cc/Container/6541DCC771.html

Audio tracks: de/en(Original) | Subtitles: en(Forced) es pt-BR ro ru"
R3AYzYBY,Registros - BD,hercioneto,C,Thursday 21st of December 2023 11:51:32 AM CDT,"#include <stdio.h>
#include <string.h>

// Definindo uma estrutura para representar os dados
struct Pessoa {
    char nome[50];
    int idade;
    float peso;
    float altura;
    float imc;
    // Adicione outros campos conforme necessário
};

int main() {
    // Definindo um array para armazenar dados de pessoas (simulação de um banco de dados)
    struct Pessoa bancoDeDados[100]; // Por exemplo, assumindo que há no máximo 100 registros

    // Simulando a adição de dados ao ""banco de dados""
    strcpy(bancoDeDados[0].nome, ""Joao"");
    bancoDeDados[0].idade = 25;
    bancoDeDados[0].peso = 85;
    bancoDeDados[0].altura = 170;

    strcpy(bancoDeDados[1].nome, ""Maria"");
    bancoDeDados[1].idade = 30;
    bancoDeDados[1].peso = 68;
    bancoDeDados[1].altura = 167;

    // Simulando a recuperação e exibição de dados do ""banco de dados""
    for (int i = 0; i < 2; ++i) {
        printf(""Nome: %s, Idade: %d\n"", bancoDeDados[i].nome, bancoDeDados[i].idade);
    }

    return 0;
}"
qH8Aa4AJ,Updated DataStore,Richbadniss,Lua,Thursday 21st of December 2023 11:45:11 AM CDT,"-- Import necessary services
local DataStoreService = game:GetService(""DataStoreService"")
local Players = game:GetService(""Players"")
local RunService = game:GetService(""RunService"")

-- Create a DataStore for player data
local dataStore = DataStoreService:GetDataStore(""Players"")

-- Define the default player data structure
local default = {
    SessionLock = false,
    Coins = 0,
    Gems = 0
}

-- Define the request type and a function to wait for request budget
local updateAsync = Enum.DataStoreRequestType.UpdateAsync
local function waitForRequestBudget()
    local currentBudget = DataStoreService:GetRequestBudgetForRequestType(updateAsync)

    while currentBudget < 1 do
        currentBudget = DataStoreService:GetRequestBudgetForRequestType(updateAsync)
        wait(5)
    end
end

-- Function to set up player data when they join
local function setUp(player)
    local name = player.Name
    local userId = player.UserId
    local key = ""Player_"" .. userId

    -- Create a leaderstats folder
    local leaderstats = Instance.new(""Folder"")
    leaderstats.Name = ""leaderstats""

    -- Set initial values for Gems and Coins
    local gems = Instance.new(""IntValue"", leaderstats)
    gems.Name = ""Gems""
    gems.Value = 0

    local coins = Instance.new(""IntValue"", leaderstats)
    coins.Name = ""Coins""
    coins.Value = 0

    local success, data, shouldWait
    repeat
        waitForRequestBudget()
        -- Update player data in DataStore
        success = pcall(dataStore.UpdateAsync, dataStore, key, function(oldData)
            oldData = oldData or default
            if oldData.SessionLock then
                if os.time() - oldData.SessionLock < 1800 then
                    shouldWait = true
                else
                    oldData.SessionLock = os.time()
                    data = oldData
                    return data
                end
            else
                oldData.SessionLock = os.time()
                data = oldData
                return data
            end
        end)

        if shouldWait then
            task.wait(5)
            shouldWait = false
        end
    until (success and data) or not Players:FindFirstChild(name)

    -- If successful, update leaderstats with stored values
    if success and data then
        for _, v in pairs(data) do
            leaderstats[v.Name] = v
        end
        leaderstats.Parent = player
    end
end

-- Function to save player data when they leave
local function save(player, dontLeave, dontWait)
    local userId = player.UserId
    local key = ""Player_"" .. userId

    local leaderstats = player:FindFirstChild(""leaderstats"")

    if leaderstats then
        local coinsValue = leaderstats.Coins.Value  -- Corrected to use ""Coins"" instead of ""Cash""
        local success

        repeat
            if not dontWait then
                waitForRequestBudget()
            end
            -- Update player data in DataStore
            success = pcall(dataStore.UpdateAsync, dataStore, key, function()
                return {
                    SessionLock = dontLeave and os.time() or nil,
                    Coins = coinsValue  -- Changed ""Cash"" to ""Coins""
                }
            end)
        until success
    end
end

-- Function to save player data on server shutdown
local function onShutdown()
    if RunService:IsStudio() then
        task.wait(2)
    else
        local finished = Instance.new(""BindableEvent"")
        local allPlayers = Players:GetPlayers()
        local leftPlayers = #allPlayers

        for _, player in ipairs(allPlayers) do
            coroutine.wrap(function()
                save(player, nil, true)
                leftPlayers -= 1
                if leftPlayers == 0 then
                    finished:Fire()
                end
            end)()
        end

        finished.Event:Wait()
    end
end

-- Set up existing players
for _, player in ipairs(Players:GetPlayers()) do
    coroutine.wrap(setUp)(player)
end

-- Connect functions to events
Players.PlayerAdded:Connect(setUp)
Players.PlayerRemoving:Connect(save)
game:BindToClose(onShutdown)

-- Periodically save player data
while true do
    wait(60)
    for _, player in ipairs(Players:GetPlayers()) do
        coroutine.wrap(save)(player, true)
    end
end"
