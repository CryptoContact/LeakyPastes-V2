id,title,username,language,date,content
z9FRUWMd,Ekopyraton final?,evolse,PowerShell,Saturday 30th of March 2024 07:02:09 AM CDT,"<p style=""background:#459b69;padding:12px;border-radius:4px;font-size:16px;color:#000000;text-align:center;""><strong><span style=""color:#FFFFFF;""><span style=""font-family:verdana,geneva,sans-serif;"">Posprzątajmy Poznań!</span></span></strong></p>

<p style=""text-align:justify;""><span style=""font-family:verdana,geneva,sans-serif;""><span style=""font-size:14px;""><strong>22 kwietnia przypada Dzień Ziemi</strong> – chyba najbardziej znane i najhuczniej obchodzone z ekologicznych świąt.</span></span></p>

<p style=""text-align:justify;""><span style=""font-family:verdana,geneva,sans-serif;""><span style=""font-size:14px;"">Jak podaje wikipedia: <em>„Dzień Ziemi (ang. Earth Day), znany też jako Światowy Dzień Ziemi lub Międzynarodowy Dzień Ziemi – akcje prowadzone corocznie wiosną, których celem jest promowanie postaw proekologicznych w społeczeństwie. Organizatorzy Dnia Ziemi chcą uświadomić politykom i obywatelom, jak kruchy jest ekosystem planety ludzi. Na obchody składa się zwykle wiele wydarzeń organizowanych przez różnorodne instytucje.”</em></span><br />
<br />
<span style=""font-size:14px;"">Do listy tych różnorodnych i niewątpliwie szacownych instytucji dołącza i <strong>GEOpyra</strong>. Wykorzystując oferowane przez Urząd Miasta Poznania wsparcie – narzędzia do sprzątania (worki i rękawice) oraz odbiór worków z zebranymi odpadami, chcemy przyłączyć się do wielkiej akcji wiosennego sprzątania. A że nasza troska o przyrodę i Ziemię powinna być nie sprintem, a maratonem, zapraszamy serdecznie na:</span></span></p>

<p style=""text-align:center;""><span style=""font-family:verdana,geneva,sans-serif;""><span style=""font-size:14px;""><span style=""font-size:20px;""><span style=""color:#008000;""><strong><img alt src=""https://www.dropbox.com/scl/fi/mxuotzjocy9c8lgq27bmd/ecology-and-environment.png?rlkey=x5f57a6czv21raweqgrz9pnt4&amp;dl=0"" /><img alt src=""https://www.dropbox.com/scl/fi/d7ewpyg4eiawmsfxthohc/cito-200.png?rlkey=ieiapu3l4g01irvy89u5hhiwn&amp;raw=1"" style=""width:120px;height:120px;"" /></strong></span></span></span><br />
<span style=""color:#02874D;""><span style=""font-size:14px;""><span style=""font-size:20px;""><strong>EkoPyraton 2024</strong></span></span><br />
<br />
<span style=""font-size:14px;""><strong>W ramach tego cyklu, w dniach 18-22 kwietnia, spotkamy się codziennie w różnych obszarach miasta, nie tylko wykorzystując czas na geopogawędki i integrację, ale i zrobienie czegoś dobrego dla planety!</strong></span></span></span><br />
 </p>

<p style=""background:#459b69;padding:12px;border-radius:4px;font-size:16px;color:#000000;text-align:center;""><span style=""color:#FFFFFF;""><span style=""font-family:verdana,geneva,sans-serif;""><strong>Termin i harmonogram</strong></span></span></p>

<p><span style=""font-family:verdana,geneva,sans-serif;""><span style=""font-size:14px;""><strong>Termin: </strong>22 kwietnia, godzina 17:30<img alt src=""https://img.geocaching.com:443/229d9a42-fdf9-44af-856c-eff47d51fb40.png"" style=""width:250px;height:250px;float:right;border-width:3px;border-style:solid;border-color:rgb(224, 230, 204);"" /><br />
<strong>Gdzie: </strong>Tereny Nadwarciańskie pod Mostem Lecha (Wschód)</span></span></p>

<p><span style=""font-family:verdana,geneva,sans-serif;""><span style=""font-size:14px;""><strong>Plan działania:<br />
<span style=""font-size:12px;"">17:30</span></strong><span style=""font-size:12px;""> - Zbiórka na współrzędnych i zaopatrzenie<br />
<strong>17:45</strong> - Rozpoczęcia sprzątania<br />
<strong>18:45</strong> - Znoszenie worków do miejsca składowania (waypoint)<br />
<strong>19:00</strong> - Zakończenie sprzątania i pamiątkowe zdjęcie</span><br />
<br />
<strong>Organizator zapewnia: </strong>worki na śmieci, rękawiczki jednorazowe. </span></span></p>

<p><span style=""font-family:verdana,geneva,sans-serif;""><span style=""font-size:14px;"">Uwaga: Warto zabrać ze sobą własne rękawiczki materiałowe, dla lepszej ochrony</span></span></p>

<p> </p>

<p style=""text-align:center;""><span style=""font-family:verdana,geneva,sans-serif;""><span style=""color:#02874D;""><span style=""font-size:14px;""><strong>Bez względu na to, czy keszujesz 3 lata, czy 3 miesiące, ile typów keszy pokazuje ci project-gc oraz czy z założenia uczestniczysz, czy nie uczestniczysz w eventach - tym razem nie może Ciebie zabraknąć.</strong></span></span></span></p>

<p style=""text-align:center;""><span style=""font-family:verdana,geneva,sans-serif;""><span style=""color:#02874D;""><span style=""font-size:14px;""><strong>A być może na najwytrwalszych będzie czekać jakaś niespodzianka? ;)</strong></span></span></span></p>

<p style=""text-align:center;""><span style=""font-family:verdana,geneva,sans-serif;""><span style=""color:#02874D;""><span style=""font-size:14px;""><strong>Do zobaczenia!</strong></span></span></span></p>

<p style=""text-align:right;""><span style=""font-family:verdana,geneva,sans-serif;""><span style=""color:#FFFFFF;""><span style=""font-size:8px;""><em>Image source: flaticon.com</em></span></span></span></p>
"
gGP7wNL5,data881,TestGuy1,JSON,Saturday 30th of March 2024 07:00:05 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '2b4d4c4b1b9fde3259c93fa0e59214a94257ef89a2fae8d40c6a2ef48a466033193252cc080cae2ad0f5b63fba336287887eef683fc0e15b4e5aac4f64d3bbd42e3e98edf714f871673eb0a2fef368f49dd7ebd05a5df36ac932256e31c408c3b414f1caf6fe542a19aa6bf31c709c7d6b1ecafa3c7e5900e818e8a2c676c8ec',
  otherdata: [
    '164c692b319d0cdc318c67d2c8fcfb80',
    'a1275244940e25dece60731cbce76ae3',
    '2fefa46da22d142d08e02041686e0e7c',
    '2103c58eb0a1d4a58185d6e03abbe3cd',
    '0025106f92c25a12ba25629d61690847',
    'f6fc17e824cf533585f4831e7b3a7671',
    'd3180e8dcd1c42e9daa273a6efa3b16d',
    'eb281e0ce5f5d1aa79922ccf3f8e1e5d'
  ]
}"
WWnPCP2t,Untitled,MisterQuirk,Python,Saturday 30th of March 2024 06:52:12 AM CDT,"# #Task 1
#
# a = [2, 4, 6, 8]
# b = {1, 3, 5, 7}
# a_itera = iter(a)
# b_iterb = iter(b)
# next(iter(a_itera))
# print(next(iter(a_itera)))
# next(iter(b_iterb))
# print(next(iter(b_iterb)))
# 4
# 3

#Task 2

# str = 'ППШ'
# iterator = iter(str)
#
# for x in iterator:
#     print(x)
#П
#П
#Ш

#Task 3

# d = {1: 'bee', 2: 'racoon', 3: 'snake'}
# iterator = iter(d)
# print(d[next(iterator)])
#bee

#Task 4

# a = [int(s) for s in range(1, 20)]
# iterator = iter(a)
# print(9 in iterator)
# print(9 in iterator)
#True
#False

#Task 5

# a = (i ** 2 for i in range(10) if i % 3 != 0)
# print(next(a))
# print(next(a))
# print(next(a))
#1
#4
#16

#Task 6

# a = (i ** 2 for i in range(1, 6))
# iter_a = iter(a)
# print(next(iter_a))
# next(iter_a)
# print(next(iter_a))
# next(iter_a)
# print(next(iter_a))

#Task 7

# a = []
# for i in ('Пики', 'Буби', 'Черви', 'Крести'):
#     for y in ('6', '7', '8', '9', 'J', 'Q', 'K', 'A'):
#         a.append(i + ' ' + y)
# a_iter = iter(a)
# for z in range(1,36):
#     print(next(a_iter))
"
TStkHfd6,09. Left and Right Sum,myrdok123,Java,Saturday 30th of March 2024 06:24:35 AM CDT,"package ForLoop;

import java.util.Scanner;

public class P09LeftAndRightSum {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int n = Integer.parseInt(scanner.nextLine());

        int sumLeft = 0;
        int sumRight = 0;

        for (int i = 1; i <= 2 * n ; i++) {

            int currentNumber = Integer.parseInt(scanner.nextLine());
            if(i <= n){
                sumLeft += currentNumber;
            }else {
                sumRight += currentNumber;
            }
        }

        if(sumLeft == sumRight){
            System.out.printf(""Yes, sum = %d"", sumLeft);
        }else {
            int diff = Math.abs(sumLeft - sumRight);
            System.out.printf(""No, diff = %d"", diff);
        }


    }
}
"
hdagpvAt,08. Number sequence,myrdok123,Java,Saturday 30th of March 2024 06:06:48 AM CDT,"package ForLoop;

import java.util.Scanner;

public class P08NumberSequence {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int countNumber = Integer.parseInt(scanner.nextLine());

        int maxNumber = Integer.MIN_VALUE;
        int minNumber = Integer.MAX_VALUE;

        for (int i = 1; i <= countNumber ; i++) {

            int currentNumber = Integer.parseInt(scanner.nextLine());

            if (currentNumber <= minNumber){
                minNumber = currentNumber;
            }

            if(currentNumber >= maxNumber){
                maxNumber = currentNumber;
            }



        }

        System.out.printf(""Max number: %d%n"", maxNumber);
        System.out.printf(""Min number: %d%n"", minNumber);

    }
}
"
y84wuFTB,07. Sum Numbers,myrdok123,Java,Saturday 30th of March 2024 06:06:15 AM CDT,"package ForLoop;

import java.util.Scanner;

public class P07SumNumbers {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int countNumbers = Integer.parseInt(scanner.nextLine());

        int sum = 0;

        for (int i = 1; i <= countNumbers ; i++) {

            int currentNumber = Integer.parseInt(scanner.nextLine());

            sum += currentNumber; // sum = sum + currentNumber
        }

        System.out.println(sum);


    }
}
"
rLXn81MY,psimedia cmake fix,KukuRuzo,C++,Saturday 30th of March 2024 06:05:40 AM CDT,"diff --git a/CMakeLists.txt b/CMakeLists.txt
index bc18428..c15c139 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -125,8 +125,8 @@ endif()
 if(BUILD_DEMO)
     add_subdirectory(demo)
     add_subdirectory(gstplugin)
-    add_subdirectory(gstprovider)
 endif()
 if(BUILD_PSIPLUGIN)
     add_subdirectory(psiplugin)
 endif()
+add_subdirectory(gstprovider)
diff --git a/psiplugin/CMakeLists.txt b/psiplugin/CMakeLists.txt
index 5ea0f8b..59cfde3 100644
--- a/psiplugin/CMakeLists.txt
+++ b/psiplugin/CMakeLists.txt
@@ -19,7 +19,7 @@ get_filename_component(ABS_PLUGINS_ROOT_DIR ""${CMAKE_CURRENT_LIST_DIR}/.."" ABSOL
 set(PLUGINS_ROOT_DIR ""${ABS_PLUGINS_ROOT_DIR}"" CACHE STRING ""Plugins root path. Path where include directory placed"")
 
 if(NOT BUILD_DEMO)
-    include(${ABS_PLUGINS_ROOT_DIR}/gstprovider/CMakeLists.txt)
+    #include(${ABS_PLUGINS_ROOT_DIR}/gstprovider/CMakeLists.txt)
     include_directories(
         ${ABS_PLUGINS_ROOT_DIR}/gstprovider
         ${ABS_PLUGINS_ROOT_DIR}/gstprovider/devices
"
EsaF8PRd,Untitled,Josif_tepe,C++,Saturday 30th of March 2024 06:05:33 AM CDT,"#include <iostream>
#include <cmath>
#include <algorithm>
#include <queue>
#include <map>
#include <vector>
using namespace std;

int main() {
    int n, m;
    cin >> n >> m;
    
    vector<vector<char>> mat(n, vector<char>(m));
    bool visited[n][m];
    int si, sj;
    int ei, ej;
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < m; j++) {
            cin >> mat[i][j];
            visited[i][j] = false;
            if(mat[i][j] == 'S') {
                si = i;
                sj = j;
            }
            if(mat[i][j] == 'E') {
                ei = i;
                ej = j;
            }
        }
    }
    queue<int> q;
    q.push(si);
    q.push(sj);
    q.push(0);
    
    int di[] = {-1, 1, 0, 0};
    int dj[] = {0, 0, -1, 1};
    
    while(!q.empty()) {
        int ci = q.front();
        q.pop();
        int cj = q.front();
        q.pop();
        int cekor = q.front();
        q.pop();
        
        if(ci == ei and cj == ej) {
            cout << cekor << endl;
            return 0;
        }
        for(int i = 0; i < 4; i++) {
            int ti = ci + di[i];
            int tj = cj + dj[i];
            
            if(ti >= 0 and ti < n and tj >= 0 and tj < m and mat[ti][tj] != '#' and !visited[ti][tj]) {
                q.push(ti);
                q.push(tj);
                q.push(cekor + 1);
                visited[ti][tj] = true;
            }
        }
    }
    return 0;
}
/**
 
 ....S##...
 E....##..
 ##..##
 ...###...
 
 
 **/
"
jLEj51Ma,Untitled,35657,C++,Saturday 30th of March 2024 05:59:49 AM CDT,"#include <iostream>

using namespace std;

class Set {

public:

    struct Node {
        int value;
        Node* left;
        Node* right;
        Node* parent;
    };

    Set() : root_(nullptr), size_(0) {}

    void insert(const int& val) {
        if (root_ == nullptr) {
            root_ = new Node{ val, nullptr, nullptr, nullptr };
            size_++;
            return;
        }
        Node* parent = nullptr;
        Node* node = root_;
        while (node != nullptr && node->value != val) {
            parent = node;
            node = node->value > val ? node->left : node->right;
        }
        if (node == nullptr) {
            node = new Node{ val, nullptr, nullptr, parent };
            parent->value > val ? parent->left = node : parent->right = node;
            size_++;
        }
    }

    void erase(const int& val) {
        Node* parent = nullptr;
        Node* node = root_;
        while (node != nullptr && node->value != val) {
            parent = node;
            node = node->value > val ? node->left : node->right;
        }
        if (node != nullptr) {
            if (node->left == nullptr && node->right == nullptr) {
                if (node == root_) {
                    root_ = nullptr;
                }
                else {
                    node == parent->right ? parent->right = nullptr : parent->left = nullptr;
                }
                delete node;
            }
            else if (node->left == nullptr) {
                node->right->parent = node->parent;
                if (node == root_) {
                    root_ = node->right;
                }
                else {
                    node == parent->right ? parent->right = node->right : parent->left = node->right;
                }
                delete node;
            }
            else if (node->right == nullptr) {
                node->left->parent = node->parent;
                if (node == root_) {
                    root_ = node->left;
                }
                else {
                    node == parent->right ? parent->right = node->left : parent->left = node->left;
                }
                delete node;
            }
            else {
                Node* temp = min(node->right);
                node->value = temp->value;
                if (temp->right != nullptr) {
                    temp->right->parent = temp->parent;
                }
                temp == temp->parent->right ? temp->parent->right = temp->right : temp->parent->left = temp->right;
                delete temp;
            }
            size_--;
        }
    }

    Node* min(Node* node) {
        if (node != nullptr) {
            while (node->left != nullptr) {
                node = node->left;
            }
        }
        return node;
    }

    Node* max(Node* node) {
        if (node != nullptr) {
            while (node->right != nullptr) {
                node = node->right;
            }
        }
        return node;
    }

    void print() {
        print(root_);
        cout << endl;
    }

    int size() const {
        return size_;
    }

private:

    void print(Node* node) {
        if (node != nullptr) {
            print(node->left);
            cout << node->value << "" "";
            print(node->right);
        }
    }

    Node* root_;
    int size_;
};


int main() {

    int arr[]{ 45,30,50,27,39,90,15,70,103 };

    Set st;

    for (int i = 0; i < 9; i++) {
        st.insert(arr[i]);
    }

    st.print();
    cout << st.size() << endl;

    st.erase(15);
    st.erase(50);
    st.erase(45);

    st.print();
    cout << st.size() << endl;

}"
1H1eggj3,Untitled,Josif_tepe,C++,Saturday 30th of March 2024 05:59:37 AM CDT,"#include <iostream>
#include <cmath>
#include <algorithm>
#include <queue>
#include <map>
#include <vector>
using namespace std;

int main() {
    int n, m;
    cin >> n >> m;
    
    vector<vector<char>> mat(n, vector<char>(m));
    bool visited[n][m];
    int si, sj;
    int ei, ej;
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < m; j++) {
            cin >> mat[i][j];
            visited[i][j] = false;
            if(mat[i][j] == 'S') {
                si = i;
                sj = j;
            }
            if(mat[i][j] == 'E') {
                ei = i;
                ej = j;
            }
        }
    }
    queue<int> q;
    q.push(si);
    q.push(sj);
    q.push(0);
    
    while(!q.empty()) {
        int ci = q.front();
        q.pop();
        int cj = q.front();
        q.pop();
        int cekor = q.front();
        q.pop();
        
        if(ci == ei and cj == ej) {
            cout << cekor << endl;
            return 0;
        }
        if(ci + 1 < n and mat[ci + 1][cj] != '#' and !visited[ci + 1][cj]) {
            visited[ci + 1][cj] = true;
            q.push(ci + 1);
            q.push(cj);
            q.push(cekor + 1);
        }
        if(ci - 1 >= 0 and mat[ci - 1][cj] != '#' and !visited[ci - 1][cj]) {
            visited[ci - 1][cj] = true;
            q.push(ci - 1);
            q.push(cj);
            q.push(cekor + 1);
        }
        if(cj + 1 < m and mat[ci][cj + 1] != '#' and !visited[ci][cj + 1]) {
            visited[ci][cj + 1] = true;
            q.push(ci);
            q.push(cj + 1);
            q.push(cekor + 1);
        }
        if(cj - 1 >= 0 and mat[ci][cj - 1] != '#' and !visited[ci][cj - 1]) {
            visited[ci][cj - 1] = true;
            q.push(ci);
            q.push(cj - 1);
            q.push(cekor + 1);
        }
    }
    return 0;
}
/**
 
 ....S##...
 E....##..
 ##..##
 ...###...
 
 
 **/
"
f65NQKZM,Untitled,evstratbg,JSON,Saturday 30th of March 2024 05:58:26 AM CDT,"{""openapi"":""3.1.0"",""info"":{""title"":""FastAPI"",""version"":""0.1.0""},""paths"":{""/sessions"":{""post"":{""tags"":[""Sessions""],""summary"":""Create Session"",""operationId"":""create_session_sessions_post"",""parameters"":[{""name"":""X-User-Id"",""in"":""header"",""required"":true,""schema"":{""type"":""integer"",""title"":""User ID""}}],""responses"":{""201"":{""description"":""Successful Response"",""content"":{""application/json"":{""schema"":{}}}},""422"":{""description"":""Validation Error"",""content"":{""application/json"":{""schema"":{""$ref"":""#/components/schemas/HTTPValidationError""}}}}}}},""/sessions/{session_id}"":{""get"":{""tags"":[""Sessions""],""summary"":""Get Info By Session Id"",""operationId"":""get_info_by_session_id_sessions__session_id__get"",""parameters"":[{""name"":""session_id"",""in"":""path"",""required"":true,""schema"":{""type"":""integer"",""title"":""Session Id""}}],""responses"":{""200"":{""description"":""Successful Response"",""content"":{""application/json"":{""schema"":{}}}},""422"":{""description"":""Validation Error"",""content"":{""application/json"":{""schema"":{""$ref"":""#/components/schemas/HTTPValidationError""}}}}}}},""/daily_pricing_batch"":{""get"":{""tags"":[""Daily Pricing Batch""],""summary"":""Get Daily Pricing Batch"",""operationId"":""get_daily_pricing_batch_daily_pricing_batch_get"",""parameters"":[{""name"":""X-Session-Id"",""in"":""header"",""required"":true,""schema"":{""type"":""integer"",""title"":""Session ID""}},{""name"":""X-User-Id"",""in"":""header"",""required"":true,""schema"":{""type"":""integer"",""title"":""User ID""}}],""responses"":{""200"":{""description"":""Successful Response"",""content"":{""application/json"":{""schema"":{""$ref"":""#/components/schemas/DailyPricingBatchResponse""}}}},""401"":{""description"":""Invalid session""},""404"":{""description"":""No more days to fill""},""422"":{""description"":""Validation Error"",""content"":{""application/json"":{""schema"":{""$ref"":""#/components/schemas/HTTPValidationError""}}}}}}},""/prices"":{""post"":{""tags"":[""Prices""],""summary"":""Upload Prices"",""operationId"":""upload_prices_prices_post"",""parameters"":[{""name"":""X-Session-Id"",""in"":""header"",""required"":true,""schema"":{""type"":""integer"",""title"":""Session ID""}},{""name"":""X-User-Id"",""in"":""header"",""required"":true,""schema"":{""type"":""integer"",""title"":""User ID""}}],""requestBody"":{""required"":true,""content"":{""application/json"":{""schema"":{""$ref"":""#/components/schemas/PricesRequest""}}}},""responses"":{""201"":{""description"":""Prices uploaded successfully"",""content"":{""application/json"":{""schema"":{}}}},""409"":{""description"":""Data conflict""},""401"":{""description"":""Invalid session""},""422"":{""description"":""Validation Error"",""content"":{""application/json"":{""schema"":{""$ref"":""#/components/schemas/HTTPValidationError""}}}}}}},""/results"":{""get"":{""tags"":[""Results""],""summary"":""Get Results"",""operationId"":""get_results_results_get"",""parameters"":[{""name"":""ds"",""in"":""query"",""required"":true,""schema"":{""type"":""string"",""format"":""date"",""title"":""Ds""}},{""name"":""X-Session-Id"",""in"":""header"",""required"":true,""schema"":{""type"":""integer"",""title"":""Session ID""}},{""name"":""X-User-Id"",""in"":""header"",""required"":true,""schema"":{""type"":""integer"",""title"":""User ID""}}],""responses"":{""200"":{""description"":""Successful Response"",""content"":{""application/json"":{""schema"":{""$ref"":""#/components/schemas/Result""}}}},""409"":{""description"":""Data conflict""},""401"":{""description"":""Invalid session""},""201"":{""description"":""Prices uploaded successfully""},""422"":{""description"":""Validation Error"",""content"":{""application/json"":{""schema"":{""$ref"":""#/components/schemas/HTTPValidationError""}}}}}}},""/metrics"":{""get"":{""tags"":[""Metrics""],""summary"":""Get Metrics"",""operationId"":""get_metrics_metrics_get"",""parameters"":[{""name"":""X-Session-Id"",""in"":""header"",""required"":true,""schema"":{""type"":""integer"",""title"":""Session ID""}},{""name"":""X-User-Id"",""in"":""header"",""required"":true,""schema"":{""type"":""integer"",""title"":""User ID""}}],""responses"":{""200"":{""description"":""Successful Response"",""content"":{""application/json"":{""schema"":{""$ref"":""#/components/schemas/MetricsResponse""}}}},""422"":{""description"":""Validation Error"",""content"":{""application/json"":{""schema"":{""$ref"":""#/components/schemas/HTTPValidationError""}}}}}}},""/liveness"":{""get"":{""summary"":""Liveness"",""operationId"":""liveness_liveness_get"",""responses"":{""200"":{""description"":""Successful Response"",""content"":{""application/json"":{""schema"":{}}}}}}}},""components"":{""schemas"":{""DailyPricingBatchResponse"":{""properties"":{""ds"":{""type"":""string"",""format"":""date"",""title"":""Ds""},""sku_ids"":{""prefixItems"":[{""type"":""integer""}],""type"":""array"",""maxItems"":1,""minItems"":1,""title"":""Sku Ids""},""user_ids"":{""prefixItems"":[{""type"":""integer""}],""type"":""array"",""maxItems"":1,""minItems"":1,""title"":""User Ids""}},""type"":""object"",""required"":[""ds"",""sku_ids"",""user_ids""],""title"":""DailyPricingBatchResponse""},""HTTPValidationError"":{""properties"":{""detail"":{""items"":{""$ref"":""#/components/schemas/ValidationError""},""type"":""array"",""title"":""Detail""}},""type"":""object"",""title"":""HTTPValidationError""},""Metrics"":{""properties"":{""revenue"":{""type"":""integer"",""title"":""Revenue""},""margin"":{""type"":""integer"",""title"":""Margin""},""orders"":{""type"":""integer"",""title"":""Orders""}},""type"":""object"",""required"":[""revenue"",""margin"",""orders""],""title"":""Metrics""},""MetricsResponse"":{""properties"":{""control"":{""$ref"":""#/components/schemas/Metrics""},""predicted"":{""$ref"":""#/components/schemas/Metrics""}},""type"":""object"",""required"":[""control"",""predicted""],""title"":""MetricsResponse""},""PricesRequest"":{""properties"":{""ds"":{""type"":""string"",""format"":""date"",""title"":""Ds""},""sku_ids"":{""items"":{""type"":""integer""},""type"":""array"",""maxItems"":55000,""minItems"":55000,""title"":""Sku Ids""},""user_ids"":{""items"":{""type"":""integer""},""type"":""array"",""maxItems"":55000,""minItems"":55000,""title"":""User Ids""},""prices"":{""items"":{""type"":""integer""},""type"":""array"",""maxItems"":55000,""minItems"":55000,""title"":""Prices""}},""type"":""object"",""required"":[""ds"",""sku_ids"",""user_ids"",""prices""],""title"":""PricesRequest""},""Result"":{""properties"":{""ds"":{""items"":{""type"":""string"",""format"":""date""},""type"":""array"",""title"":""Ds""},""sku_id"":{""items"":{""type"":""integer""},""type"":""array"",""title"":""Sku Id""},""user_id"":{""items"":{""type"":""integer""},""type"":""array"",""title"":""User Id""},""price"":{""items"":{""type"":""integer""},""type"":""array"",""title"":""Price""},""is_bought"":{""items"":{""type"":""boolean""},""type"":""array"",""title"":""Is Bought""}},""type"":""object"",""required"":[""ds"",""sku_id"",""user_id"",""price"",""is_bought""],""title"":""Result""},""ValidationError"":{""properties"":{""loc"":{""items"":{""anyOf"":[{""type"":""string""},{""type"":""integer""}]},""type"":""array"",""title"":""Location""},""msg"":{""type"":""string"",""title"":""Message""},""type"":{""type"":""string"",""title"":""Error Type""}},""type"":""object"",""required"":[""loc"",""msg"",""type""],""title"":""ValidationError""}}}}"
ZBF6G2Pr,Untitled,m3m3mm,C++,Saturday 30th of March 2024 05:47:46 AM CDT,"#include <algorithm>
#include <iostream>
#include <set>
#include <string>
#include <utility>
#include <vector>

using namespace std;

const int MAX_RESULT_DOCUMENT_COUNT = 5;

string ReadLine() {
    string s;
    getline(cin, s);
    return s;
}

int ReadLineWithNumber() {
    int result = 0;
    cin >> result;
    ReadLine();
    return result;
}

vector<string> SplitIntoWords(const string& text) {
    vector<string> words;
    string word;
    for (const char c : text) {
        if (c == ' ') {
            if (!word.empty()) {
                words.push_back(word);
                word.clear();
            }
        } else {
            word += c;
        }
    }
    if (!word.empty()) {
        words.push_back(word);
    }

    return words;
}

struct DocumentContent {
    int id = 0;
    vector<string> words;
};

struct Document {
    int id;
    int relevance;
};

bool HasDocumentGreaterRelevance(const Document& lhs, const Document& rhs) {
    return lhs.relevance > rhs.relevance;
}

    set<string> ParseQuery(const string& text, const set<string>& stop_words) {
    set<string> query_words;
    for (const string& word : SplitIntoWords(text)) {
        query_words.insert(word);
    }
    return query_words;
}

void AddDocument(vector<DocumentContent>& documents, const set<string>& stop_words, int document_id,
                 const string& document) {
    const vector<string> words = SplitIntoWords(document);
    documents.push_back({document_id, words});
}

set<string> ParseStopWords(const string& text) {
    set<string> stop_words;
    for (const string& word : SplitIntoWords(text)) {
        stop_words.insert(word);
    }
    return stop_words;
}
class SearchServer {
public:
    struct DocumentContent
    {
    int id = 0;
    vector<string> words;
    };
    
    void AddDocument(int document_id, const string& document) {
        set<string> stop_words = words_;
        const vector<string> words = SplitIntoWordsNoStop(document);
        documents_.push_back({document_id, words});
    }
    
    void SetStopWords(const string& text)
    {
        
    for (const string& word : SplitIntoWords(text))
        {
        stop_words_.insert(word);
        }
    }
    
    vector<Document> FindTopDocuments(const string& raw_query) {
    const set<string> query_words = ParseQuery(raw_query, stop_words_);
    auto matched_documents = FindAllDocuments(query_words);

    sort(matched_documents.begin(), matched_documents.end(), HasDocumentGreaterRelevance);
    if (matched_documents.size() > MAX_RESULT_DOCUMENT_COUNT) {
        matched_documents.resize(MAX_RESULT_DOCUMENT_COUNT);
    }
    return matched_documents;
}
       
private:
    vector<DocumentContent> documents_;
    set<string> words_;
    
    set<string> stop_words_;
    
    vector<Document> FindAllDocuments(const set<string>& query_words) {
    vector<Document> matched_documents;
    for (const auto& document : documents_) {
        const int relevance = MatchDocument(document, query_words);
        if (relevance > 0) {
            matched_documents.push_back({document.id, relevance});
        }
    }
    return matched_documents;
}
    
    vector<string> SplitIntoWordsNoStop(const string& text) {
    vector<string> words;
    for (const string& word : SplitIntoWords(text)) {
        if (words_.count(word) == 0) {
            words.push_back(word);
        }
    }
    return words;
}
    
    static int MatchDocument(const DocumentContent& content, const set<string>& query_words) {
    if (query_words.empty()) {
        return 0;
    }
    set<string> matched_words;
    for (const string& word : content.words) {
        if (matched_words.count(word) != 0) {
            continue;
        }
        if (query_words.count(word) != 0) {
            matched_words.insert(word);
        }
    }
    return static_cast<int>(matched_words.size());
}
    
};

SearchServer CreateSearchServer()
    {
        SearchServer search_server;
        cout << ""Input the stop-words, split with Space: ""s  << endl;
        const string stop_words_joined = ReadLine();
        search_server.SetStopWords(stop_words_joined);
        vector<DocumentContent> documents;
        cout << ""Input the amount of documents: ""s << endl;
        const int document_count = ReadLineWithNumber();
        for (int id = 0; id < document_count; ++id)
        {
            cout << ""Input document info: ""s;
            string info = ReadLine();
            search_server.AddDocument(id, info);
        }
        
        return search_server;
    }

    int main() {
        SearchServer search_server;
    const string stop_words_joined = ReadLine();
    const set<string> stop_words = ParseStopWords(stop_words_joined);
    
    // Read documents
    vector<DocumentContent> documents;
    const int document_count = ReadLineWithNumber();
    for (int document_id = 0; document_id < document_count; ++document_id)
    {
        AddDocument(documents, stop_words, document_id, ReadLine());
    }

    const string query = ReadLine();
    for (auto [document_id, relevance] : search_server.FindTopDocuments(query))
    {
        cout << ""{ document_id = ""s << document_id << "", relevance = ""s << relevance << "" }""s
             << endl;
    }
}
"
GiZi1SNh,C# Storage mock,prr133f,C#,Saturday 30th of March 2024 05:41:34 AM CDT,"using System.IO;
using System.Text.Json;
namespace storage
{
	public class Storage
	{
		private const string __storageFile = ""Data/Data.txt"";
		private System.Collections.Generic.List<Data> __data;
		public Storage()
		{
			try
			{
				__data = LoadData();
			}
			catch(DirectoryNotFoundException ex)
			{
				System.Console.WriteLine($""Directory not found: {ex.Data}"");
			}
			catch (FileNotFoundException ex)
			{
				System.Console.WriteLine($""File not found: {ex.Data}"");
			}
		}

        public struct Data
        {
			public int id;
			public string value;
        }

		public System.Collections.Generic.List<Data> GetList()
		{
			return __data;
		}

		public void AddData(Data row)
		{
			__data.Add(row);
			SaveRow(row);
		}

		public Data GetDataById(int id)
		{
			foreach(Data row in __data)
			{
				if(row.id == id)
				{
					return row;
				}
			}
			throw new RowNotFoundException($""Row with id {id} not found"");
		}

		public void DeleteData(int id)
		{
            foreach (Data row in __data)
            {
                if (row.id == id)
                {
					__data.Remove(row);
                }
            }
        }

		private void SaveRow(Data row)
		{
			string json = JsonSerializer.Serialize(row);
			using StreamWriter writer = new StreamWriter(__storageFile, true);
			writer.WriteLine(json);
		}

		private System.Collections.Generic.List<Data> LoadData()
		{
			System.Collections.Generic.List<Data> data = new System.Collections.Generic.List<Data>();
            using StreamReader reader = new StreamReader(__storageFile);
            string? line;
            while ((line = reader.ReadLine()) != null)
            {
				Data temp = JsonSerializer.Deserialize<Data>(line);
                data.Add(temp);
            }
			return data;
        }
    }

    class RowNotFoundException : System.Exception
    {
        public RowNotFoundException(string message)
            : base(message)
        { }
    }
}

"
6epmFbv2,Turbine Monitor,tbouttier,Lua,Saturday 30th of March 2024 05:38:11 AM CDT,"-- Load the required APIs
local component = require(""component"")
local term = require(""term"")
local event = require(""event"")

-- Define the side where the Advanced Peripherals block reader is connected
local readerSide = ""back""  -- Change this to the side where your block reader is placed

-- Define the side where the ComputerCraft monitor is connected
local monitorSide = ""left""  -- Change this to the side where your monitor is placed

-- Wrap the block reader peripheral
local reader = peripheral.wrap(readerSide)

-- Function to clear the monitor screen
local function clearMonitor()
    term.clear()
    term.setCursorPos(1, 1)
end

-- Function to update and display turbine data on the monitor
local function updateMonitor()
    -- Get turbine data from the block reader
    local turbineData = reader.getTurbineData()

    -- Clear the monitor
    clearMonitor()

    -- Check if turbineData is not nil
    if turbineData then
        -- Display turbine data on the monitor
        term.write(""Turbine Data:\n"")
        term.write(""---------------\n"")
        term.write(""Status: "" .. turbineData.status .. ""\n"")
        term.write(""Blade Efficiency: "" .. turbineData.bladeEfficiency .. ""\n"")
        term.write(""Rotor Speed: "" .. turbineData.rotorSpeed .. ""\n"")
        term.write(""Energy Produced: "" .. turbineData.energyProduced .. ""\n"")
        term.write(""Fluid Flow Rate: "" .. turbineData.fluidFlowRate .. ""\n"")
    else
        -- Display error message if turbine data is nil
        term.write(""Error: Turbine data not available.\n"")
    end
end

-- Function to handle monitor touch events
local function handleTouch(_, _, _, _, _, player)
    if player == ""SlyDower"" then  -- Replace ""YourUsername"" with your Minecraft username
        updateMonitor()
    end
end

-- Open a connection to the monitor
local monitor = peripheral.wrap(monitorSide)
monitor.setTextScale(0.5)

-- Initialize the monitor
updateMonitor()

-- Register event listeners
event.listen(""monitor_touch"", handleTouch)

-- Wait for events
while true do
    os.sleep(1)
end
"
3X5nbB7B,head_procedure,stronk_8s,T-SQL,Saturday 30th of March 2024 05:30:51 AM CDT,"USE [temp]

GO

CREATE PROCEDURE FamilyHeadInsert

			@Username nvarchar(100),-- FamilyHead Table
			@FirstName nvarchar(60),
			@MiddleName nvarchar(60),
			@LastName nvarchar(60),
			@BirthDate datetime2(7),
			@Email nvarchar(200),
																															
			@GenderName nvarchar(10),
			@VillageName nvarchar(50),
			@CasteName nvarchar(30),
			@MarritalName nvarchar(40),

			@EducationName nvarchar(50),--Literacy Table
			@Year smallint,
			@Insitute nvarchar(60),
			@Description nvarchar(100),

			@OccupationName nvarchar(50),-- Profession Table
			@WorkPlace nvarchar(80),

			@AddressLine1 nvarchar(200),--Address Table
			@AddressLine2 nvarchar(200),
			@NationName nvarchar(50),
			@StateName nvarchar(50),
			@DistrictName nvarchar(50),
			@Pincode int,
			@AddressRecordPriority bit,

			@CountryCode smallint,--User Table
			@MobileNo bigint,
			@Password nvarchar(200),

			@MobileRecordPriority bit,--Mobile Table
			
			@IsAccountLocked bit,
			@FailedLoginAttempts smallint,
			@PasswordResetToken uniqueidentifier,

			@RecordStatus tinyint,         
			@CreatedOn datetime2(7),
			@CreatedBy int
			
			AS

			BEGIN
			
			DECLARE 
					@FamilyHeadId uniqueidentifier,

					@GenderId smallint,
					@VillageId bigint,
					@CasteId int,
					@MarritalId smallint,
					@EducationId int,
					@OccupationId int,
					
					@NationId smallint,
					@StateId bigint,
					@DistrictId bigint,

					@CountryCodeId smallint;

			--FETCH ALL ID
				SELECT @GenderId = [Id] FROM [dbo].[Gender] WHERE [Name] = @GenderName;
				SELECT @VillageId= [Id] FROM [dbo].[Village] WHERE [Name] = @VillageName;
				SELECT @CasteId= [Id] FROM [dbo].[Caste] WHERE [Name] = @CasteName;
				SELECT @MarritalId = [Id] FROM [dbo].[Marrital] WHERE [Status] = @MarritalName;
				SELECT @EducationId = [Id] FROM [dbo].[Education] WHERE [Education] = @EducationName;
				SELECT @OccupationId = [Id] FROM [dbo].[Occupation] WHERE [Occupation] = @OccupationName;

				SELECT @NationId = [Id] FROM [dbo].[Nation] WHERE [Name] = @NationName;
				SELECT @StateId = [Id] FROM [dbo].[State] WHERE [Name] = @StateName;
				SELECT @DistrictId = [Id] FROM [dbo].[District] WHERE [Name] = @DistrictName;
	
				SELECT @CountryCodeId = [Id] FROM [dbo].[CountryCode] WHERE [CountryCode] = @CountryCode; 


			--FAMILY HEAD INSERT
			INSERT INTO [dbo].[FamilyHead]
			([Username],[FirstName],[MiddleName],[LastName],[BirthDate],[Email],[GenderId],[VillageId],[CasteId],[MarritalId],[RecordStatus],[CreatedOn],[CreatedBy])
			VALUES
			(@Username,@FirstName,@MiddleName,@LastName,@BirthDate,@Email,@GenderId,@VillageId,@CasteId,@MarritalId,@RecordStatus,@CreatedOn,@CreatedBy);

			--FETCH HEAD ID IN LOCAL VARIABLE
			SELECT @FamilyHeadId = [Id] FROM [dbo].[FamilyHead] WHERE [Username] = @Username;
			
			--LITERACY INSERT
			INSERT INTO [dbo].[Literacy]
			([FamilyHeadId],[EducationId],[Year],[Insitute],[Description],[RecordStatus],[CreatedOn],[CreatedBy])
			VALUES
			(@FamilyHeadId,@EducationId,@Year,@Insitute,@Description,@RecordStatus,@CreatedOn,@CreatedBy)

			--PROFESSION INSERT
			INSERT INTO [dbo].[Profession]
			([FamilyHeadId],[OccupationId],[WorkPlace],[RecordStatus],[CreatedOn],[CreatedBy])
			VALUES
			(@FamilyHeadId,@OccupationId,@WorkPlace,@RecordStatus,@CreatedOn,@CreatedBy);

			

			
			--ADDRESS INSERT
			INSERT INTO [dbo].[Address]
			([FamilyHeadId],[AddressLine1],[AddressLine2],[NationId],[StateId],[DistrictId],[Pincode],[RecordPriority],[RecordStatus],[CreatedOn],[CreatedBy])
			VALUES
			(@FamilyHeadId,@AddressLine1,@AddressLine2,@NationId,@StateId,@DistrictId,@Pincode,@AddressRecordPriority,@RecordStatus,@CreatedOn,@CreatedBy);


			--USER INSERT			
			INSERT INTO [dbo].[User]
			([FamilyHeadId],[Username],[FirstName],[MiddleName],[LastName],[Email],[CountryCodeId],[MobileNo],[Password],[RecordStatus],[CreatedOn],[CreatedBy])
			VALUES
			(@FamilyHeadId,@Username,@FirstName,@MiddleName,@LastName,@Email,@CountryCodeId,@MobileNo,@Password,@RecordStatus,@CreatedOn,@CreatedBy);


			--MOBILE INSERT
			INSERT INTO [dbo].[Mobile]
			([FamilyHeadId],[CountryCodeId],[MobileNo],[RecordPriority],[RecordStatus],[CreatedOn],[CreatedBy])
			VALUES
			(@FamilyHeadId,@CountryCodeId,@MobileNo,@MobileRecordPriority,@RecordStatus,@CreatedOn,@CreatedBy);

END






GO	"
2n4hYiuG,Untitled,Josif_tepe,C++,Saturday 30th of March 2024 05:30:38 AM CDT,"#include <iostream>
#include <cmath>
#include <algorithm>
#include <map>
using namespace std;

int main() {
    int n;
    cin >> n;
    
    int niza[n];
    for(int i = 0; i < n; i++) {
        cin >> niza[i];
    }
    sort(niza, niza + n);
    
    int S = 0, E = n - 1;
    int res = 0;
    while(S < E) {
        while(niza[S] > 0 and S < E) {
            niza[S]--;
            E--;
            res++;
        }
        S++;
    }
    cout << res << endl;
    
    return 0;
}
"
CPnn1KCZ,06. Vowels Sum,myrdok123,Java,Saturday 30th of March 2024 05:20:03 AM CDT,"package ForLoop;

import java.util.Scanner;

public class P06VowelsSum {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        String  input = scanner.nextLine();

        int sum = 0;

        //буква	    a	e	i	o	u
        //стойност	1	2	3	4	5

        for (int i = 0; i < input.length(); i++) {

            char currentSymbol = input.charAt(i);

            switch (currentSymbol){

                case 'a':
                    sum += 1; // sum = sum + 1
                    break;
                case 'e':
                    sum += 2;
                    break;
                case 'i':
                    sum += 3;
                    break;
                case 'o':
                    sum += 4;
                    break;
                case 'u':
                    sum += 5;
                    break;
            }
        }

        System.out.println(sum);
    }
}
"
LmgUcZjb,05. Character Sequence,myrdok123,Java,Saturday 30th of March 2024 05:19:15 AM CDT,"package ForLoop;

import java.util.Scanner;

public class P05CharacterSequence {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        String input = scanner.nextLine();

        for (int i = 0; i <= input.length() - 1; i++) {

            char symbol = input.charAt(i);

            System.out.println(symbol);
        }

    }
}
"
30R4iNum,04. Even Powers of 2,myrdok123,Java,Saturday 30th of March 2024 05:18:29 AM CDT,"package ForLoop;

import java.util.Scanner;

public class P04EvenPowersOf2 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int number = Integer.parseInt(scanner.nextLine());



        for (int i = 0; i <= number ; i+=2) {


            System.out.println(Math.pow(2, i));

        }


    }
}
"
2GmeG1LU,Untitled,MisterQuirk,Python,Saturday 30th of March 2024 05:13:45 AM CDT,"import copy
import sys

# Task 1

# R = [45, 84, 10, 58]
# A = R
# R[0] = 54
# print(A[0] + R[0])
# 108

# Task 2

# a = [int(input()) for i in range(5)]
# a1 = a[:]
# a2 = a.copy()
# a3 = copy.copy(a)
# a4 = copy.deepcopy(a)
# a5 = list(a)
# print(5, sum(a))
# 5 35

#Task 3

# AR = [[90, 99, 109, 119]] * 4
# AR[0][0], AR[3][3] = 890, 76
# print(AR[1][0] + AR[2][3])
# 966

#Task 4
#
# animals = ['cat', 'cat', 'dog', 'dog', 'bird', 'capybara', 'capybara', 'capybara']
# animal = {'cat' : 2, 'dog' : 2, 'capybara' : 3, 'bird' : 1}
# print(sys.getrefcount('cat') + sys.getrefcount('capybara') + sys.getrefcount('bird') + sys.getrefcount('dog'))
# print(sys.getrefcount(1) + sys.getrefcount(2) + sys.getrefcount(3))

#Task 5

# s1 = 0
# s2 = 0
# backpack = ['capybara', 'capybara', 'capyba', 'capyba', 'capybara', 2999, 2999, 'capybara', [7, 7, 7], [7, 7, 7], [7, 7, 7], [7, 7, 7]] + [[8, 8]] * 5
# for i in range(len(backpack)):
#     for j in range(i + 1, len(backpack)):
#         s1 += (backpack[i] is backpack[j])
#         s2 += (backpack[i] == backpack[j])
# print(s1, s2)

#Task 6

# r_c_s = ['lettuce', 'chicken', 'cheese', 'sauce', 'tomatoes', 'croutons']
# r_c_s.append(r_c_s)
# r_c_s[6].append('salt')
# r_c_s[6].append('pepper')
# print(r_c_s[4])
# print(r_c_s[-1])
"
cPTCqUqZ,MySQLi example,neil_pearce,PHP,Saturday 30th of March 2024 04:31:06 AM CDT,"$nr = 0;  // replace this with your existing code


$sql = 'INSERT INTO %s(nr, mailadress, pnr) VALUES (?, ?, ?)';
$utskick = mysqli_prepare($db, sprintf($sql, 'utskick'));
$yahooadr = mysqli_prepare($db, sprintf($sql, 'yahooadr'));

while ($rad = mysqli_fetch_row($result)) {
    $stmt = strpos($rad[0], 'yahoo') !== false ? $yahooadr : $utskick;
    mysqli_execute($stmt, [$nr, $rad[0], $rad[1]]);
    $nr++;
}
"
jcxnsV0f,03. Numbers 1...N with Step 3,myrdok123,Java,Saturday 30th of March 2024 04:16:48 AM CDT,"package ForLoop;

import java.util.Scanner;

public class P03Numbers1ToNWithStep3 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);


        int number = Integer.parseInt(scanner.nextLine());

        for (int i = 1; i <= number ; i+=3) {

            System.out.println(i);

        }
    }
}
"
8W1dQ5Bn,Untitled,Josif_tepe,C++,Saturday 30th of March 2024 04:16:26 AM CDT,"#include <iostream>
#include <cmath>
#include <algorithm>
#include <map>
using namespace std;

int main() {
    int n, m;
    cin >> n >> m;
    
    int niza[n];
    for(int i = 0; i < n; i++) {
        cin >> niza[i];
    }
    
    int j = 0, sum = 0;
    int res = 0;
    for(int i = 0; i < n; i++) {
        while(j < n and sum + niza[j] <= m) {
            sum += niza[j];
            j++;
            res = max(res, j - i);
        }
        sum -= niza[i];
    }
    cout << res << endl;
        return 0;
}
"
AkA5yCWV,02. Numbers N...1,myrdok123,Java,Saturday 30th of March 2024 04:15:48 AM CDT,"package ForLoop;

import java.util.Scanner;

public class P02NumbersNTo1 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);


        int number = Integer.parseInt(scanner.nextLine());

        for (int i = number; i >= 1 ; i--) {
            System.out.println(i);
        }
    }
}
"
UCLNGa8p,01. Numbers from 1 to 100,myrdok123,Java,Saturday 30th of March 2024 04:15:11 AM CDT,"package ForLoop;

import java.util.Scanner;

public class P01NumbersFrom1To100 {
    public static void main(String[] args) {


        for (int i = 1; i <= 100; i++) {

            System.out.println(i);
        }

    }
}
"
BYEVxgRf,MainScriptController-CleanTheSea-GameJam,KazaruRoblox,Lua,Saturday 30th of March 2024 04:05:44 AM CDT,"-- BY KAZARUGAMING
-- EVENTS
local GameEvent = game.ReplicatedStorage.GameStart
local AnimationEvent = game.ReplicatedStorage.Animation  
local ResultEvent = game.ReplicatedStorage.Result
local DialogEvent = game.ReplicatedStorage.Dialog
-- GRAPHIC
local Blur = game.Lighting.Blur
-- SFX
local Song = game.Workspace.FunSong
local Yay = game.Workspace.YaySound
local Lose = game.Workspace.LoseSound
-- THINGS
local StartWall = game.Workspace:WaitForChild(""StartWall"")
local Net = game.ServerStorage:WaitForChild(""Net"")
local Trashes = game.Workspace:WaitForChild(""Trashes"")
local TouchPart = game.Workspace:WaitForChild(""TouchPart"")
-- COOLDOWN
local completed = false
local debounce = true
local debounceTouch = true

-- SERVER SCRIPT MAIN HANDLER

game.Players.PlayerAdded:Connect(function(plr) -- since the game is only for single player, so I can use it to store multiple data to this player without worrying it affect other player
    -- when the player joined, it will create an int value and it will be used to calculate the ending
	local score = Instance.new(""IntValue"")
	score.Name = ""score""
	score.Parent = plr
	score.Value = 0
	
    -- this BoolValue is created to check if the player has started the game    
	local GameStarted = Instance.new(""BoolValue"")
	GameStarted.Name = ""GameStarted""
	GameStarted.Parent = plr
	GameStarted.Value = false
    
    -- duplicating the tool and the controll of the tool, the parent is still on server storage and havent duplicate to the player    
   	local Net = game.ServerStorage:WaitForChild(""Net"") 
    local Char = plr.Character
    local Humanoid = Char:WaitForChild(""Humanoid"")
    local SwingAnim = script.Parent:WaitForChild(""Animation"")
    local Active = false
    local ClickBool = script.Parent:WaitForChild(""Clicked"")    
        
    NetTool.Activated:Connect(function()
        if Active ~= true then		
            Active = true
            local Track = Humanoid:LoadAnimation(SwingAnim)
            Track:Play()
            task.wait(.4) -- cooldown 
            ClickBool.Value = true
            Track.Stopped:Wait()
            ClickBool.Value = false
            Active = false	
        end
    end)
end)

GameEvent.OnServerEvent:Connect(function(plr,jumpPower,walkSpeed)
    -- This will trigger when the player completed the dialog which is fired from a Local Script
    -- It fired from local to server because I need to manipulate the player's camera, and when its done It triggers this event 
	task.wait()
	local Timer = plr.PlayerGui:FindFirstChild(""MainGui"").TimerFrame.Timer
	local MainGui = Timer.Parent.Parent
	local StartText = MainGui.StartText
	local ResultFrame = MainGui.ResultBackground.ResultFrame
	local GameStarted = plr:FindFirstChild(""GameStarted"")
	local Score = plr:FindFirstChild(""score"")
	local Character = plr.Character or plr.CharacterAdded:Wait()
	
    -- Before starting the game, this effect is enabled (its like a countdown effect)    
	Blur.Enabled = true
	MainGui.Enabled = true
	StartText.Visible = true
        
	for start = 5,0,-1 do
		StartText.Text = start
		wait(1)
	end
	
	StartText.Text = ""GO!""
	wait(1)
	StartWall:Destroy() 
	Song:Play()
	task.wait()
	print(""Walkspeed=""..walkSpeed)
	Character.Humanoid.WalkSpeed = walkSpeed + 10
	Character.Humanoid.JumpPower = jumpPower - 1
	Blur.Enabled = false	
	StartText.Visible = false
	
	Character.Humanoid.UseJumpPower = true
	Character.Humanoid.JumpPower = jumpPower	
	GameStarted.Value = true

	Net.Parent = plr.Backpack -- put the net on the Player's Backpack
	MainGui.TimerFrame.Visible = true
	MainGui.ScoreFrame.Visible = true
	
	for number = 50,0,-1 do -- this is the countdown of the gameplay, and when the time is over it will calculate the result ending
		Timer.Text = number
		wait(1)
		if Score.Value >= 50 then -- they need atleast reach score 50 to get the win ending
			completed = true
			Song:Pause()
			Yay:Play()
			ResultEvent:FireClient(plr,Score,ResultFrame,Character,Blur)
        else -- lose ending
            Song:Pause()
            Lose:Play()
            ResultEvent:FireClient(plr,Score,ResultFrame,Character,Blur)    
		end
	end
end)

local function CollectTrashes(trash,hit,health) -- this function is to detect the trashes and adding points
	local player = game.Players:FindFirstChild(hit.Parent.Name)
	if player then
		local tool = player.Character:FindFirstChild(""Net"")
		local TrashPoint = trash:FindFirstChild(""TrashPoint"").Value	
		local IsPlaying = player:FindFirstChild(""GameStarted"").Value
		local PlayerScore = player:FindFirstChild(""score"")
		
		if tool and TrashPoint and IsPlaying == true and PlayerScore then
			if debounce and health > 1 and tool.Clicked.Value == true then -- this detect if the health of the trash is more than 1
				debounce = false
				print(""done"")
				trash:SetAttribute(""Health"",health - 1) -- and it makes the health removed by 1
				task.wait(.5) 
				debounce = true
				
			elseif debounce and health <= 1 and tool.Clicked.Value == true then -- When you hit trash and the trash only has 1 health 																					 left, then after hitting it it will be destroyed
				debounce = false
				PlayerScore.Value += TrashPoint -- adding the player's score
				trash:SetAttribute(""Health"",health - 1)
				
				if PlayerScore.Value > 50 then -- check if the amout of score is more than 50, it will convert it to 50 (because 50 												  is the maximum score I want)
					PlayerScore.Value = 50
				end
                
				task.wait(.5) 
				trash:Destroy()
				debounce = true
			end
		end
	end
end

for i, trash in pairs(Trashes:GetChildren()) do -- detecting reach of the trashes
	if trash:IsA(""Model"") and trash:FindFirstChild(""HitPart"") then
		local Maxhealth = trash:GetAttribute(""Health"")
		local mainFrame = trash:WaitForChild(""BillboardGui"").MainHealthFrame
		local HealthBar = mainFrame:WaitForChild(""HealthBar"")
		local HealthText = mainFrame:WaitForChild(""HealthText"")
		
		HealthText.Text = Maxhealth.. ""/"" ..Maxhealth
        
		trash.HitPart.Touched:Connect(function(hit) -- function if the trash is being hit
			local health = trash:GetAttribute(""Health"")
			CollectTrashes(trash,hit,health)
		end)
		
		trash:GetAttributeChangedSignal(""Health""):Connect(function() -- this is basically update the health bar everytime thr trash 																		attribute health is changed
			local CurrentHealth = trash:GetAttribute(""Health"")
			HealthBar:TweenSize(UDim2.new(CurrentHealth/Maxhealth,0,HealthBar.Size.Y.Scale,0), Enum.EasingDirection.Out, 			 			 Enum.EasingStyle.Sine, .5)
			HealthText.Text = CurrentHealth..""/""..Maxhealth
		end)
	end
end

-- FUNCTION FOR THE NPC ANIMATIONS
local function AnimationNPC(plr,HumanoidRootPart)
        
    local NPC_Alexa = script.Parent:WaitForChild(""Alexa"")
    local NPC_John = script.Parent:WaitForChild(""John"")

    local Alexa_Humanoid = NPC_Alexa:WaitForChild(""Humanoid"")
    local John_Humanoid = NPC_John:WaitForChild(""Humanoid"")

    local Alexa_Anim2 = NPC_Alexa:WaitForChild(""Animation2"") -- wave animation
    local John_Anim2 = NPC_John:WaitForChild(""Animation2"") -- wave animation

    local Idle_Alexa = NPC_Alexa:WaitForChild(""Idle"") -- idle animation
    local Idle_John = NPC_John:WaitForChild(""Idle"") -- idle animation

    local TweenService = game:GetService(""TweenService"")
    local Tweeninfo = TweenInfo.new(.5,Enum.EasingStyle.Quad,Enum.EasingDirection.Out)
	
    -- this is where the npcs humanoidrootpart tween looking at the player position    
	local TweenAlexa = TweenService:Create(NPC_Alexa.PrimaryPart, Tweeninfo, {CFrame = CFrame.new(NPC_Alexa.PrimaryPart.Position, Vector3.new(plr.Character.HumanoidRootPart.Position.X, NPC_Alexa.PrimaryPart.Position.Y, plr.Character.HumanoidRootPart.Position.Z))})
	local TweenJohn = TweenService:Create(NPC_John.PrimaryPart, Tweeninfo, {CFrame = CFrame.new(NPC_John.PrimaryPart.Position, Vector3.new(plr.Character.HumanoidRootPart.Position.X, NPC_Alexa.PrimaryPart.Position.Y, plr.Character.HumanoidRootPart.Position.Z))})
	
	local wave1 = Alexa_Humanoid:LoadAnimation(Alexa_Anim2) 
	local wave2 = John_Humanoid:LoadAnimation(John_Anim2)
	
	local idle1 = Alexa_Humanoid:LoadAnimation(Idle_Alexa)
	local idle2 = John_Humanoid:LoadAnimation(Idle_John)
	
	TweenAlexa:Play()
	TweenJohn:Play()
	
	TweenJohn.Completed:Wait() -- wait one of the npc to completed the tween

	wave1:Play()
	wave2:Play()
	wave2.Stopped:Wait()
	idle1:Play()
	idle2:Play()
	
end)

-- This function if the player has touched the start part
TouchPart.Touched:Connect(function(hit)
	local target = hit.Parent:WaitForChild(""HumanoidRootPart"")
    local Char = target.Parent
	if not target then return end	-- if the hit part isnt player then return
    if not debounceTouch then return end -- avoid spam touch
    debounceTouch = true
	print(""touched"")
	Char:FindFirstChild(""Beam""):Destroy()
	Char.Humanoid.UseJumpPower = true
	Char.Humanoid.JumpPower = 0
	Char.Humanoid.WalkSpeed = 0
	
    DialogEvent:FireAllClients() -- fired the dialogevent and because its a singleplayer game it wont get triggered more than 1 time
    AnimationNPC()
	
end) 

		"
3A1rtWbG,FightWithBoss,SaNik74,C#,Saturday 30th of March 2024 03:52:35 AM CDT,"    internal class Program
    {
        static void Main(string[] args)
        {
            const string MagicFireballCommand = ""Fireball"";
            const string MagicHealthRegenCommand = ""Regen"";
            const string NormalPunchCommand = ""Punch"";
            const string MagicBangCommand = ""Boom"";

            Random random = new Random();

            int minPlayerDamage = 1;
            int maxPlayerDamage = 20;
            int playerDamage;
            int minStartPlayerHealth = 50;
            int maxStartPlayerHealth = 100;
            int minManaPlayer = 10;
            int maxManaPlayer = 50;
            int manaPlayerRegen = 2;
            float playerHealth = random.Next(minStartPlayerHealth, maxStartPlayerHealth);

            int minEnemyDamage = 2;
            int maxEnemyDamage = 30;
            int enemyDamage;
            int minStartEnemyHealth = 80;
            int maxStartEnemyHealth = 200;
            int enemyHealth = random.Next(minStartEnemyHealth, maxStartEnemyHealth);

            int fireballDamage = 20;
            int quantityRegenHealth = 35;
            int bangAttackDamage = 50;
            bool isFierballAttackUsed = false;

            int minNumberForCriticalDamage = 1;
            int maxNumberForCriticalDamage = 5;
            int minCoefficentCriticalDamage = 2;
            int maxCoefficentCriticalDamage = 4;
            int coefficentCriticalDamage;
            int probablyCriticalDamage;
            int needNumberForCriticalDamage;

            while (playerHealth > 0 && enemyHealth > 0)
            {
                string? userInput;
                int quantityManaForMagicFireball = 3;
                int quantityManaForMagicHealthRegen = 5;
                int quantityManaForBang = 6;
                int coefficentSplitDamage = 2;

                probablyCriticalDamage = random.Next(minNumberForCriticalDamage, maxNumberForCriticalDamage);
                needNumberForCriticalDamage = random.Next(minNumberForCriticalDamage, maxNumberForCriticalDamage);
                coefficentCriticalDamage = random.Next(minCoefficentCriticalDamage, maxCoefficentCriticalDamage);
                playerDamage = random.Next(minPlayerDamage, maxPlayerDamage);
                enemyDamage = random.Next(minEnemyDamage, maxEnemyDamage);

                Console.WriteLine($""{playerHealth} - здоровья игрока. {minManaPlayer} - мана игрока."");
                Console.WriteLine($""{enemyHealth} - здоровья босса."");
                Console.WriteLine();

                Console.WriteLine($""У вас есть несколько комнд для боя с боссом:\n"" +
                    $""{NormalPunchCommand} - нанести обычный удар.\n"" +
                    $""{MagicFireballCommand} - удар огненным шаром. Необходимо {quantityManaForMagicFireball} ед маны.\n"" +
                    $""{MagicBangCommand} - произвести взрыв. Необходимо {quantityManaForBang} маны и воспользоваться огненным ударом.\n"" +
                    $""{MagicHealthRegenCommand} - восстановить {quantityRegenHealth} жизней. Необходимо {quantityManaForMagicHealthRegen} маны\n"");
                Console.WriteLine();

                Console.Write(""Введите команду: "");
                userInput = Console.ReadLine();

                switch (userInput)
                {
                    case NormalPunchCommand:
                        if (probablyCriticalDamage == needNumberForCriticalDamage)
                        {
                            playerDamage *= coefficentCriticalDamage;
                            enemyHealth -= playerDamage;
                        }
                        else
                        {
                            enemyHealth -= playerDamage;
                        }

                        break;

                    case MagicFireballCommand:
                        if (minManaPlayer >= quantityManaForMagicFireball)
                        {
                            minManaPlayer -= quantityManaForMagicFireball;
                            enemyHealth -= fireballDamage;
                            isFierballAttackUsed = true;
                        }
                        else
                        {
                            if (probablyCriticalDamage == needNumberForCriticalDamage)
                            {
                                playerDamage *= coefficentCriticalDamage;
                                enemyHealth -= playerDamage;
                            }
                            else
                            {
                                enemyHealth -= playerDamage;
                            }
                        }

                        break;

                    case MagicBangCommand:
                        if (minManaPlayer >= quantityManaForBang && isFierballAttackUsed == true)
                        {
                            minManaPlayer -= quantityManaForBang;
                            enemyHealth -= bangAttackDamage;
                            isFierballAttackUsed = false;
                        }
                        else
                        {
                            if (probablyCriticalDamage == needNumberForCriticalDamage)
                            {
                                playerDamage *= coefficentCriticalDamage;
                                enemyHealth -= playerDamage;
                            }
                            else
                            {
                                enemyHealth -= playerDamage;
                            }
                        }

                        break;

                    case MagicHealthRegenCommand:
                        if (minManaPlayer >= quantityManaForMagicHealthRegen)
                        {
                            playerHealth += quantityRegenHealth;
                            minManaPlayer -= quantityManaForMagicHealthRegen;

                            if (playerHealth > maxStartPlayerHealth)
                            {
                                playerHealth = maxStartPlayerHealth;
                            }
                        }
                        else
                        {
                            if (probablyCriticalDamage == needNumberForCriticalDamage)
                            {
                                playerDamage *= coefficentCriticalDamage;
                                enemyHealth -= playerDamage;
                            }
                            else
                            {
                                enemyHealth -= playerDamage;
                            }
                        }

                        break;

                    default:
                        Console.WriteLine(""Вы промахнулись и нанесли 0 единиц урона.\nНажмите любую клавишу..."");
                        Console.ReadKey();

                        break;
                }

                if (minManaPlayer > maxManaPlayer)
                {
                    minManaPlayer = maxManaPlayer;
                }

                if (playerHealth > maxStartPlayerHealth)
                {
                    playerHealth = maxStartPlayerHealth;
                }

                if (probablyCriticalDamage == needNumberForCriticalDamage)
                {
                    enemyDamage *= coefficentCriticalDamage;
                    playerHealth -= enemyDamage;
                }
                else
                {
                    playerHealth -= enemyDamage;
                }

                minManaPlayer += manaPlayerRegen;

                Console.Clear();
            }

            if (playerHealth <= 0 && enemyHealth > 0)
            {
                Console.WriteLine($""Босс победил.\n"" +
                    $""Ваши жизни {playerHealth}\n"" +
                    $""Жизни противника: {enemyHealth}\n"");
            }
            else if (playerHealth > 0 && enemyHealth <= 0)
            {
                Console.WriteLine($""Вы победили!\n"" +
                 $""Ваши жизни {playerHealth}\n"" +
                $""Жизни противника: {enemyHealth}\n"");
            }
            else if (playerHealth <= 0 && enemyHealth <= 0)
            {
                Console.WriteLine($""Ничья. Оба мертвы.\n"" +
                 $""Ваши жизни {playerHealth}\n"" +
                $""Жизни противника: {enemyHealth}\n"");
            }

            Console.ReadKey();
        }
    }
}"
xyEATwpw,Untitled,Josif_tepe,C++,Saturday 30th of March 2024 03:24:24 AM CDT,"#include <iostream>
#include <cmath>
#include <algorithm>
#include <map>
using namespace std;

int main() {
    int n;
    cin >> n;
    int k;
    cin >> k;
    int niza[n];
    
    for(int i = 0; i < n; i++) {
        cin >> niza[i];
    }
    
    map<int, int> m;
    
    for(int i = 0; i < n; i++) {
        int razlika = k - niza[i];
        if(m.count(razlika)) {
            cout << i + 1 << "" "" << m[razlika] + 1 << endl;
        }
        
        m[niza[i]] = i;
    }
    
        return 0;
}
"
KQSzpH7F,Untitled,Josif_tepe,C++,Saturday 30th of March 2024 02:40:43 AM CDT,"#include <iostream>
#include <cmath>
#include <algorithm>
using namespace std;

int main() {
    int n;
    cin >> n;
    int niza[n];
    
    for(int i = 0; i < n; i++) {
        cin >> niza[i];
    }
    sort(niza, niza + n);
    int S = 0, E = n - 1;
    int res = 0;
    while(S < E) {
        while(niza[S] > 0 and S < E) {
            E--;
            niza[S]--;
            res++;
        }
        S++;
    }
    cout << res << endl;
    return 0;
}
"
JjVL8DpS,Untitled,PadmaJS,Erlang,Saturday 30th of March 2024 02:31:42 AM CDT,"<!DOCTYPE html>
<html lang=""en"">
<head>
  <title>Registration form</title>
  <meta charset=""utf-8"">
  <meta name=""viewport"" content=""width=device-width, initial-scale=1"">
  <link rel=""stylesheet"" href=""css/style.css"">
  <?php include ""links.php"" ?>
</head>
<body?>
<div class=""container register"">
    <div class=""row"">
        <div class=""col-md-3 register-left"">
            <h3>Welcome</h3>
            <p>Travelling – it leaves you speechless, then turns you into a storyteller</p>
            <input type=""submit"" value=""Login""/><br/>
        </div>
        <div class=""col-md-9 register-right"">
            <ul class=""nav nav-tabs nav-justified"" id=""myTab"" role=""tablist"">
                <li class=""nav-item"">
                    <a onclick=""setUserType('guest')"" class=""nav-link active"" id=""home-tab"" data-toggle=""tab"" href=""#home"" role=""tab"" aria-controls=""home"" aria-selected=""true"">Guide</a>
                </li>
                <li class=""nav-item"">
                    <a onclick=""setUserType('client')"" class=""nav-link"" id=""profile-tab"" data-toggle=""tab"" href=""#profile"" role=""tab"" aria-controls=""profile"" aria-selected=""false"">Client</a>
                </li>
            </ul>
            <div class=""tab-content"" id=""myTabContent"">
                <div class=""tab-pane fade show active"" id=""home"" role=""tabpanel"" aria-labelledby=""home-tab"">
                    <h3 class=""register-heading"">Form for Guide</h3>
                    <form action="""" method=""POST"">
                        <div class=""row register-form"">
                            <div class=""col-md-6"">
                                <div class=""form-group"">
                                    <input type=""text"" name=""firstName"" class=""form-control"" placeholder=""First Name *"" value="""" />
                                </div>
                                <div class=""form-group"">
                                    <input type=""text"" name=""lastName"" class=""form-control"" placeholder=""Last Name *"" value="""" />
                                </div>
                                <div class=""form-group"">
                                    <input type=""email"" name=""email"" class=""form-control"" placeholder=""Your Email *"" value="""" />
                                </div>
                                <div class=""form-group"">
                                    <input type=""password"" name=""password"" class=""form-control"" placeholder=""Password *"" value="""" />
                                </div>
                                
                            </div>
                            <div class=""col-md-6"">
                                <div class=""form-group"">
                                    <input type=""text"" name=""phonenumber"" minlength=""10"" maxlength=""10"" class=""form-control"" placeholder=""Your Phone *"" value="""" />
                                </div>
                                <div class=""form-group"">
                                <input type=""text"" name=""qualification"" class=""form-control"" placeholder=""Your Qualification *"" value="""" required />
                            </div>
                            <div class=""form-group"">
                                <input type=""text"" name=""experience"" class=""form-control"" placeholder=""Your experience *"" value="""" required />
                            </div>
                                <input type=""submit"" name=""submit_guide"" class=""btnRegister"" value=""Register""/>
                            </div>
                        </div>
                    </form>
                </div>
                <div class=""tab-pane fade show"" id=""profile"" role=""tabpanel"" aria-labelledby=""profile-tab"">
                    <h3 class=""register-heading"">Form for client</h3>
                    <form action="""" method=""POST"">
                        <div class=""row register-form"">
                            <div class=""col-md-6"">
                                <div class=""form-group"">
                                    <input type=""text"" name=""first_name"" class=""form-control"" placeholder=""First Name *"" value="""" />
                                </div>
                                <div class=""form-group"">
                                    <input type=""text"" name=""last_name"" class=""form-control"" placeholder=""Last Name *"" value="""" />
                                </div>
                                <div class=""form-group"">
                                    <input type=""email"" name=""email"" class=""form-control"" placeholder=""Email *"" value="""" />
                                </div>
                                
                            </div>
                            <div class=""col-md-6"">
                                <div class=""form-group"">
                                <div class=""form-group"">
                                    <input type=""text"" name=""phone_number"" maxlength=""10"" minlength=""10"" class=""form-control"" placeholder=""Phone *"" value="""" />
                                </div>
                                    <input type=""password"" name=""password"" class=""form-control"" placeholder=""Password *"" value="""" />
                                </div>
                                <input type=""hidden"" name=""user_type"" id=""user_type"" value="""" />
                                <input type=""submit"" name=""submit_client"" class=""btnRegister"" value=""Register""/>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
</body>
</html>
<script>
  function setUserType(type) {
document.getElementById('user_type').value = type;
}
 </script>
<?php

$servername = ""localhost"";
$username = ""root"";
$password = """";
$dbname = ""contact"";
$conn = new mysqli($servername, $username, $password, $dbname);
if ($conn->connect_error) {
    die(""Connection failed: "" . $conn->connect_error);
}


if(isset($_POST['submit_client']) && isset($_POST['first_name'])) {
    $first_name = $_POST[""first_name""];
    $last_name = $_POST[""last_name""];
    $email = $_POST['email'];
    $phone_number = $_POST['phone_number'];
    $password = $_POST['password'];
    
    // Insert data into the register table for clients
    $insertquery = ""INSERT INTO register (first_name, last_name, email, phone_number, password) 
                    VALUES (?, ?, ?, ?, ?)"";
    $stmt = mysqli_prepare($conn, $insertquery);
    mysqli_stmt_bind_param($stmt, ""sssss"", $first_name, $last_name, $email, $phone_number, $password);
    if(mysqli_stmt_execute($stmt)){
        echo '<script>alert(""Client data inserted properly"");</scrip>';
    } else {
        echo '<script>alert(""Client data not inserted: ' . mysqli_error($conn) . '"");</script>';
    }
    mysqli_stmt_close($stmt);
}

if(isset($_POST['submit_guide']) && isset($_POST['firstName'])) {
    $firstName = $_POST[""firstName""];
    $lastName = $_POST[""lastName""];
    $email = $_POST['email'];
    $password = $_POST['password'];
    $phonenumber = $_POST['phonenumber'];
    $qualification = $_POST['qualification'];
    $experience = $_POST['experience'];
    
    // Insert data into the register_guide table for guides
    $insertquery = ""INSERT INTO `register_guide` (firstName, lastName, email, password, phonenumber, qualification,experience) 
                    VALUES (?, ?, ?, ?, ?, ?, ?)"";
    $stmt = mysqli_prepare($conn, $insertquery);
    mysqli_stmt_bind_param($stmt, ""sssssss"", $firstName, $lastName, $email, $password, $phonenumber,  $qualification, $experience);
    if(mysqli_stmt_execute($stmt)){
       // echo '<script>alert(""Guide data inserted properly"");</script>';
    } else {
        echo '<script>(""Guide data not inserted: ' . mysqli_error($conn) . '"");</script>';
        
    }
    mysqli_stmt_close($stmt);
}

$conn->close();

/*$sql = ""INSERT INTO register_guide (first_name, last_name, email, password, phone_number, qualification, experience)
        VALUES ('$firstName', '$lastName', '$email', '$password', '$phonenumber', '$qualification', '$experience')"";

if ($conn->query($sql) === TRUE) {
    echo ""New record inserted successfully!"";
} else {
    echo ""Error: "" . $sql . ""<br>"" . $conn->error;
}
}*/
?>"
Cb6bzBS7,邀您一起看：古龙小说全集,xiaomianao666,JavaScript,Saturday 30th of March 2024 02:28:07 AM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥古龙小说全集@@eyJkYXRhIjoie1wiYXNzb2NpYXRlZE1vZGVsc01hcEZvckpvaW5UYWJsZVwiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhGS1wiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhvdXRGS1wiOnt9LFwiZmllbGRzVG9TZXRUb0RlZmF1bHRcIjpbXSxcImdtdE1vZGlmaWVkXCI6MCxcImlkXCI6MCxcImxpc3RUb0NsZWFyQXNzb2NpYXRlZEZLXCI6W10sXCJsaXN0VG9DbGVhclNlbGZGS1wiOltdLFwicGFnZUxpc3RcIjpbXSxcInNhdmVkXCI6ZmFsc2UsXCJ0aXRsZVwiOlwi5aWH5aaZ5bel5YW3566xXCIsXCJ2ZXJzaW9uXCI6MCxcInVybFwiOlwiaGlrZXI6Ly9lbXB0eVwiLFwiY29sX3R5cGVcIjpcIng1X3dlYnZpZXdfc2luZ2xlXCIsXCJmaW5kX3J1bGVcIjpcImpzOnNldFJlc3VsdChbe1xcbiAgICB1cmw6XFxcImh0dHBzOi8vaGFpa3Vvc2hpamllLmNuL2FyY2hpdmVzLzIwMjRuaWFuLTN5dWUtdHVpLWppYW5cXFwiLFxcbmRlc2M6XFxcIjEwMCUmJmZsb2F0XFxcIixcXG5leHRyYTp7Y2FuQmFjazogdHJ1ZX1cXG59XSk7XCIsXCJncm91cFwiOlwi8J+NiuW3peWFt1wiLFwicGFnZXNcIjpcIltdXCJ9IiwidGl0bGUiOiLlj6TpvpnlsI/or7Tlhajpm4YifQ==
KSHdGnvv,fibonacci series,Divyansh_Chourey,C,Saturday 30th of March 2024 02:05:36 AM CDT,"#include<stdio.h>

int fibonacii(int n);

int main(){
    int number;
    printf(""Enter the number: "");
    scanf(""%d"", &number);
    printf(""Fibonacii series upto %dth number is: "", number);
    for (int i=0; i<number; i++){
        printf(""%d, "", fibonacii(i));
    }
    return 0;
}

int fibonacii(int n){
    if (n==1){
        return 1;
    }
    else if(n==0){
        return 0;
    }
    else{
        return fibonacii(n-1) + fibonacii(n-2);
    }
}
//output: Enter the number: 9
//Fibonacii series upto 9th number is: 0, 1, 1, 2, 3, 5, 8, 13, 21,"
tNCv1YMD,Código JavaScript Catálogo Productos WA GS OV,oscarviedma,JavaScript,Saturday 30th of March 2024 01:40:56 AM CDT,"  let carrito = [];
  let carritoTotal = 0;
  let datosFiltrados = []; 

  const preloader = document.getElementById('preloader');
  preloader.style.display = 'block';

  let datosProductos = [];
  const contenedorProductos = document.getElementById('contenedor-productos');
  const mensajeNoEncontrado = document.getElementById('mensaje-no-encontrado'); 
  contenedorProductos.style.opacity = '0';

  function formatearPrecio(precio) {
    return precio.toLocaleString('en-US');
    // return precio.toLocaleString('es-ES', { style: 'currency', currency: 'EUR' });
    // return precio.toLocaleString('es-MX', { style: 'currency', currency: 'MXN' });
    // return precio.toLocaleString('es-CO', { style: 'currency', currency: 'COP' });
  }

  fetch('https://script.google.com/macros/s/AKfycbzxho78Qr07ADOpzdfF-acJxTztln4aZnQUoptrYHJcNNLMPS1Z_oIzrTfbQbC6Bwlc/exec')
    .then(response => response.json())
    .then(data => {
      datosProductos = data;
      datosFiltrados = data; 
      renderizarProductos(datosFiltrados);
      preloader.style.display = 'none';
      contenedorProductos.style.opacity = '1';
      document.getElementById('contenedor-buscador').style.display = '';
      generarCategorias(data);
    })
    .catch(error => {
      console.error('Error al obtener el JSON:', error);
      preloader.style.display = 'none';
    });

  function renderizarProductos(productos) {
    contenedorProductos.innerHTML = '';
    if (productos.length === 0) {
      mensajeNoEncontrado.style.display = 'block';
    } else {
      mensajeNoEncontrado.style.display = 'none';
      productos.forEach((producto, index) => {
        var productoDiv = document.createElement('div');
        productoDiv.className = 'producto';

        productoDiv.innerHTML = `
            <div class=""imagen"">
                <img src=""${producto.imagen}"" alt=""Imagen del producto"">
            </div>
            <div class=""info"">
                <h4 class=""titulo"">${producto.titulo}</h4>
                <h3 class=""precio"">$${formatearPrecio(producto.precio)} USD</h3>
                <div class=""metadatos"" id=""atributo${index}"">
                    ${producto.atributos && Object.keys(producto.atributos).length > 0 ?
                      Object.entries(producto.atributos).map(([nombreAtributo, valores]) => {
                        const nombreAtributoLowerCase = nombreAtributo.toLowerCase();
                        if (valores.filter(Boolean).length > 0) {
                          return `<div class=""meta"">
                                      <label for=""${nombreAtributoLowerCase}${index}"">${nombreAtributo}:</label>
                                      <select id=""${nombreAtributoLowerCase}${index}"">
                                          <option value="""" selected=""selected"" disabled=""disabled"">Seleccionar ${nombreAtributo}</option>
                                          ${valores.map(valor => `<option value=""${valor}"">${valor}</option>`).join('')}
                                      </select>
                                  </div>`;
                        } else {
                          return ''; 
                        }
                      }).join('') : ''}
                </div>
                <button class=""agregar"" data-info='${JSON.stringify({ nombre: producto.titulo, precio: producto.precio, atributos: producto.atributos, index: index })}'>Agregar al carrito</button>
            </div>
        `;

        contenedorProductos.appendChild(productoDiv);
      });
    }

    inicializarFuncionalidad();
  }

  function generarCategorias(productos) {
    // Inicialmente, asume que no hay categorías válidas (excluyendo 'Todos').
    let categoriasValidasEncontradas = false;

    let categorias = ['Todos'];
    productos.forEach(producto => {
      if (producto.categorias && producto.categorias.length > 0) {
        // Aquí se asume que `producto.categorias` es un array de las categorías de cada producto.
        producto.categorias.forEach(categoria => {
          if (categoria && !categorias.includes(categoria)) {
            categorias.push(categoria);
            categoriasValidasEncontradas = true; // Marca que se encontró al menos una categoría válida.
          }
        });
      }
    });

    const contenedorCategorias = document.getElementById('categorias-contenedor');
    contenedorCategorias.innerHTML = '';

    // Oculta el contenedor de categorías si no se encontraron categorías válidas.
    if (!categoriasValidasEncontradas) {
      contenedorCategorias.style.display = 'none';
    } else {
      // Si hay categorías válidas, muestra el contenedor y genera los botones.
      contenedorCategorias.style.display = '';
      categorias.forEach((categoria, index) => {
        let botonCategoria = document.createElement('button');
        botonCategoria.textContent = categoria;
        // Asigna la clase 'active' por defecto al botón 'Todos'
        if (categoria === 'Todos') {
          botonCategoria.classList.add('active');
        }
        botonCategoria.onclick = () => filtrarPorCategoria(categoria, botonCategoria);
        contenedorCategorias.appendChild(botonCategoria);
      });
    }
  }

  // Agrega la funcionalidad de búsqueda aquí
  document.getElementById('buscar-producto').addEventListener('input', function(e) {
    const busqueda = e.target.value.toLowerCase();
    datosFiltrados = datosProductos.filter(producto => producto.titulo.toLowerCase().includes(busqueda));
    renderizarProductos(datosFiltrados);
    document.getElementById('limpiar-busqueda').style.display = busqueda ? '' : 'none';
      
    // Reinicializar la funcionalidad del carrito después de la búsqueda
    reinicializarFuncionalidad();
  });
  
  // Agregar el evento de clic al botón de limpiar.
  document.getElementById('limpiar-busqueda').addEventListener('click', function() {
    document.getElementById('buscar-producto').value = '';
    this.style.display = 'none';
    datosFiltrados = datosProductos; 
    renderizarProductos(datosFiltrados); 

    // Reinicializar la funcionalidad del carrito después de limpiar la búsqueda
    reinicializarFuncionalidad();
  });

  // Filtrar por categorias
  function filtrarPorCategoria(categoriaSeleccionada, botonClickeado) {
    if (categoriaSeleccionada === 'Todos') {
      renderizarProductos(datosProductos);
    } else {
      const productosFiltrados = datosProductos.filter(producto => producto.categorias.includes(categoriaSeleccionada));
      renderizarProductos(productosFiltrados);
    }
  
    // Actualización de la clase 'active'
    const botonesCategoria = document.querySelectorAll('#categorias-contenedor button');
    botonesCategoria.forEach(boton => {
      boton.classList.remove('active');
    });
    botonClickeado.classList.add('active');
  
    // Reinicializar la funcionalidad del carrito después del filtrado
    reinicializarFuncionalidad();
  }

  function reinicializarFuncionalidad() {
    eliminarEventosAgregarAlCarrito();
    inicializarFuncionalidad();
  }

  function eliminarEventosAgregarAlCarrito() {
    const productos = document.querySelectorAll('.producto');
    productos.forEach(producto => {
      const agregarButton = producto.querySelector('.agregar');
      agregarButton.removeEventListener('click', agregarProductoAlCarrito);
    });
  }

  function inicializarFuncionalidad() {
    const productos = document.querySelectorAll('.producto');
    const carritoLista = document.getElementById('carrito-lista');
    const total = document.getElementById('total');
    const carritoContainer = document.getElementById('carrito-container');
    const carritoIcon = document.getElementById('carrito-icon');
    const carritoContador = document.getElementById('carrito-contador');
    const cerrarCarrito = document.getElementById('cerrar-carrito');
    const carritoVacioMensaje = document.getElementById('carrito-vacio-mensaje');
    const vaciarCarritoButton = document.getElementById('vaciar-carrito');

    carritoIcon.addEventListener('click', function () {
      const carritoVisible = carritoContainer.style.right === '0px';
      carritoContainer.style.right = carritoVisible ? '-350px' : '0px';

      if (carritoVisible) {
        carritoVacioMensaje.style.display = 'none';
      }
    });

    cerrarCarrito.addEventListener('click', function () {
      carritoContainer.style.right = '-350px';
    });
    
    // Función para desplazar el carrito
    function desplazarCarrito() {
      const anchoPantalla = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;

      if (anchoPantalla > 768) {
        carritoContainer.style.right = '0px';
        carritoVacioMensaje.style.display = 'none';
      }
    }
    
    // Función para mostrar u ocultar el mensaje de carrito vacío
    function mostrarMensajeCarritoVacio() {
      if (carrito.length === 0) {
        carritoVacioMensaje.style.display = 'block';
      } else {
        carritoVacioMensaje.style.display = 'none';
      }
    }

    // Agregar producto al carrito
    function agregarProductoAlCarrito(info) {
      const { nombre, precio, atributos, index } = JSON.parse(info || '{}');

      // Validar atributos seleccionados
      if (!validarAtributosSeleccionados(index)) {
        return;
      }

      // Obtener dinámicamente los valores de los atributos seleccionados
      let nombreConVariantes = `${nombre}`;
      for (const [nombreAtributo, valorSeleccionado] of Object.entries(atributos)) {
        const selectElement = document.getElementById(`${nombreAtributo.toLowerCase()}${index}`);
        const valorSeleccionado = selectElement ? selectElement.value : null;

        if (valorSeleccionado) {
          nombreConVariantes += ` - ${nombreAtributo}: ${valorSeleccionado}`;
        }

        // Añadir la clase de vibración al icono del carrito
        const carritoIcon = document.getElementById('carrito-icon');
        carritoIcon.classList.add('shaking');

        setTimeout(() => {
          // Eliminar la clase de vibración después de 500 milisegundos (ajusta según sea necesario)
          carritoIcon.classList.remove('shaking');
        }, 500);
      }

      const producto = { nombre: nombreConVariantes, precio };
      carrito.push(producto);

      const listItem = document.createElement('li');
      listItem.textContent = `${nombreConVariantes} - $${formatearPrecio(producto.precio)}`;
      const eliminarButton = document.createElement('a');
      eliminarButton.innerHTML = '';
      eliminarButton.classList.add('eliminar');
      eliminarButton.addEventListener('click', () => eliminarProductoDelCarrito(producto, listItem));
      listItem.appendChild(eliminarButton);
      carritoLista.appendChild(listItem);

      // Actualizar el total
      carritoTotal += precio;
      total.textContent = formatearPrecio(carritoTotal);

      // Actualizar el contador del carrito
      carritoContador.textContent = carrito.length;

      // Desplazar automáticamente al carrito
      desplazarCarrito();

      // Mostrar u ocultar el mensaje de carrito vacío
      mostrarMensajeCarritoVacio();
    }

    // Eliminar producto del carrito
    function eliminarProductoDelCarrito(producto, listItem) {
      const index = carrito.indexOf(producto);
      if (index !== -1) {
        carrito.splice(index, 1);
        carritoLista.removeChild(listItem);
        carritoTotal -= producto.precio;
        total.textContent = formatearPrecio(carritoTotal);

        // Actualizar el contador del carrito
        carritoContador.textContent = carrito.length;

        // Mostrar u ocultar el mensaje de carrito vacío
        mostrarMensajeCarritoVacio();
      }
    }

    // Evento para agregar producto al carrito
    productos.forEach((producto, index) => {
      const agregarButton = producto.querySelector('.agregar');
      const info = agregarButton.getAttribute('data-info');

      agregarButton.addEventListener('click', () => {
        agregarProductoAlCarrito(info);
      });
    });

    // Inicialmente, mostrar el mensaje de carrito vacío
    mostrarMensajeCarritoVacio();
  }

  // Evento para enviar detalles del carrito a WhatsApp
  document.addEventListener('DOMContentLoaded', (event) => {
    const enviarWhatsAppButton = document.getElementById('enviar-whatsapp');
    enviarWhatsAppButton.addEventListener('click', () => {
      // Este es el código que ""permanece igual""
      const carritoTexto = carrito.map(producto => {
        return `${producto.nombre} - $${formatearPrecio(producto.precio)}`;
      }).join('\n'); // Usamos \n para separar líneas en WhatsApp
  
      const mensajeWhatsApp = '*Mi Pedido:*\n' + carritoTexto + '\n*TOTAL: $' + formatearPrecio(carritoTotal) + '*';
      const whatsappURL = `https://wa.me/529512345678?text=${encodeURIComponent(mensajeWhatsApp)}`;
      window.open(whatsappURL, '_blank');
    });

  });
  
  function validarAtributosSeleccionados(index) {
    const selects = document.querySelectorAll(`#atributo${index} select`);
    for (const select of selects) {
      if (select.value === """") {
        alert(""Por favor, selecciona todas las opciones antes de agregar al carrito."");
        return false;
      }
    }
    return true;
  }"
DeXBzSeb,Estructura HTML Catálogo Productos WA GS,oscarviedma,HTML,Saturday 30th of March 2024 01:31:33 AM CDT,"<div id=""preloader"" class=""loadingio-spinner-rolling-zt8qwybayi"">
  <div class=""ldio-pk6mhbe1fco"">
    <div></div>
  </div>
</div>

<div id=""contenedor-buscador"" style=""display: none;"">
  <div class=""input-container"">
     <input type=""text"" id=""buscar-producto"" placeholder=""Buscar producto..."">
     <button id=""limpiar-busqueda"" style=""display: none;""></button>
	</div>
</div>

<div id=""categorias-contenedor"" class=""categorias-contenedor""></div>
<div id=""contenedor-productos"" class=""contenedor-productos""></div>
<div id=""mensaje-no-encontrado"" style=""display: none;"">No se encontraron productos.</div>"
2APWvcp6,Untitled,35657,C++,Saturday 30th of March 2024 01:27:06 AM CDT,"
#include <iostream> 


using namespace std;


void print(int* arr, int size) { 
    for (int i = 0; i < size; i++) {
        cout << *(arr + i) << "" "";
    }
    cout << endl;
}

void init(int* arr, int size) {
    for (int i = 0; i < size; i++) {
        *(arr + i) = rand() % 100;
    }
}

void merge(int* arr1, int size1, int* arr2, int size2, int* arr3, int size3) {
    
    int i1 = 0, i2 = 0;

    for (int i = 0; i < size3; i++) {
        if (i1 == size1) {
            for (int j = i; j < size3; j++) {
                *(arr3 + j) = *(arr2 + i2);
                i2++;
            }
            return;
        }

        if (i2 == size2) {
            for (int j = i; j < size3; j++) {
                *(arr3 + j) = *(arr1 + i1);
                i1++;
            }
            return;
        }

        if (*(arr1 + i1) > *(arr2 + i2)) {
            *(arr3 + i) = *(arr2 + i2);
            i2++;
        }
        else {
            *(arr3 + i) = *(arr1 + i1);
            i1++;
        }
    }

}


int main() {
    setlocale(LC_ALL, ""ru"");

    srand(time(NULL));

    const int size1 = 5, size2 = 8;

    int arr1[size1]{ 1,3,5,7,9 };
    int arr2[size2]{ 0,2,4,6,8,10,12,14 };

    const int size3 = size1 + size2;
    int arr3[size3];
    
    merge(arr1, size1, arr2, size2, arr3, size3);

    print(arr3, size3);
}"
7UdcM7WD,Untitled,35657,C++,Saturday 30th of March 2024 12:42:12 AM CDT,"
#include <iostream> 


using namespace std;


void print(int* arr, int size) { 
    for (int i = 0; i < size; i++) {
        cout << *(arr + i) << "" "";
    }
    cout << endl;
}

void init(int* arr, int size) {
    for (int i = 0; i < size; i++) {
        *(arr + i) = rand() % 100;
    }
}

void change(int* arr, int size) {
    for (int i = 0; i < size - 1; i += 2) {
        int temp = *(arr + i);
        *(arr + i) = *(arr + i + 1);
        *(arr + i + 1) = temp;
    }
}


int main() {
    setlocale(LC_ALL, ""ru"");

    srand(time(NULL));

    const int size = 10;

    int arr[size];

    init(arr, size);

    print(arr, size);

    change(arr, size);

    print(arr, size);

  
}"
QuzYCTfM,possellkey,NaingAungPhyo,JSON,Saturday 30th of March 2024 12:37:29 AM CDT,"{
""Password"":""12345""
}"
Vw3vMp3K,Untitled,35657,C++,Saturday 30th of March 2024 12:14:39 AM CDT,"
#include <iostream> 


using namespace std;

// равносильно print(int arr[], int size)
void print(int* arr, int size) { 
    for (int i = 0; i < size; i++) {
        cout << *(arr + i) << "" "";
    }
    cout << endl;
}


int main() {
    setlocale(LC_ALL, ""ru"");

    const int size = 5;

    int arr[size]{ 33,45,67,22,38 };

    print(arr, size);

    *(arr + 3) = 128;

    print(arr, size);
}"
1DFk566Q,Untitled,35657,C++,Saturday 30th of March 2024 12:05:46 AM CDT,"
#include <iostream> 


using namespace std;




int main() {
    setlocale(LC_ALL, ""ru"");

    const int size = 5;

    int arr[size]{ 33,45,67,22,38 };

    for (int i = 0; i < size; i++) {
        cout << *(arr + i) << "" "";
    }
    cout << endl;

    *(arr + 3) = 128;

    for (int i = 0; i < size; i++) {
        cout << *(arr + i) << "" "";
    }
    cout << endl;
}"
SqJaykPB,Untitled,35657,C++,Friday 29th of March 2024 11:50:44 PM CDT,"
#include <iostream> 

using namespace std;

int main() {
    setlocale(LC_ALL, ""ru"");

    const int size = 5;

    int arr[size]{ 33,45,67,22,38 };

    cout << arr << endl;
    cout << &arr[0] << endl;
    cout << &arr[1] << endl;
    cout << &arr[2] << endl;

    int* ptr = arr;

    cout << *ptr << endl;

    ptr++; // сдвигает указатель вправо на количество байт, занимаемое типом данных, на который он указывает (в случае int - 4 байта)
    cout << *ptr << endl;

    ptr--; // сдвигает влево на количество байт, которое занимает тип данных

    cout << *ptr << endl;

    ptr += 4; // подвинет указатель на 16 байт (4 * 4)

    cout << *ptr << endl;

    cout << *(arr + 4) << endl; // равносильно arr[4]
}"
pdSNaist,t1,dbkarashev,C++,Friday 29th of March 2024 11:35:09 PM CDT,"#include <stdio.h>
#include <mpi.h>
#include <math.h>

int main(int argc, char **argv)
{
    int rank, size;
    MPI_Init(&argc, &argv);
    MPI_Comm_size(MPI_COMM_WORLD, &size);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Status status;
    int x = rank;
    int s = x, s1;
    int q = log2(size);

    printf(""rank = %d, sum = %d\n"", rank, s);

    if (q != log2(size))
    {
        printf( ""error"");
        MPI_Finalize();
        return 0;
    }
    else
    {
        for (int k = 0; k < q; k++)
        {
            if ((rank + 1) % (int)pow(2, k+1) == (int)pow(2, k))
            {
                MPI_Send(&s, 1, MPI_INT, rank + (int)pow(2, k), 99, MPI_COMM_WORLD);
            }
            if ((rank + 1) % (int)pow(2, k+1) == 0)
            {
                MPI_Recv(&s1, 1, MPI_INT, rank - (int)pow(2, k), 99, MPI_COMM_WORLD, &status);
                s += s1;
                
            }
        }
    }

    if (rank == size - 1) printf(""rank = %d, final sum = %d\n"", rank, s);

    MPI_Finalize();
    return 0;
}"
1w4nfH15,Sammple Json Applicant,bhosley,JSON,Friday 29th of March 2024 11:34:17 PM CDT,"{
  ""firstName"": ""John"",
  ""lastName"": ""Doe"",
  ""middleName"": ""Smith"",
  ""dob"": ""1990-05-15"",
  ""gender"": ""Male"",
  ""citizenship"": ""US"",
  ""emailId"": ""john.doe@example.com"",
  ""phoneNo"": 1234567890,
  ""serviceId"": ""SRV456"",
  ""personalInfo"": {
    ""passportNo"": ""AB123456"",
    ""issueDate"": ""2022-01-15"",
    ""expiryDate"": ""2027-01-15"",
    ""issueCountry"": ""USA"",
    ""cityOfBirth"": ""New York"",
    ""countryOfBirth"": ""USA"",
    ""nationality"": ""American"",
    ""citizenship"": ""American"",
    ""isCitizenMoreThanOneCountry"": false,
    ""isLivingAndStudyingInOtherCountry"": true
  },
  ""address"": [
    {
      ""floorOrFlatNo"": 10,
      ""street"": ""Main Street"",
      ""country"": ""USA"",
      ""state"": ""California"",
      ""city"": ""Los Angeles"",
      ""pincode"": 90001,
      ""addressType"": ""PERMANENT""
    },
    {
      ""floorOrFlatNo"": 5,
      ""street"": ""Park Avenue"",
      ""country"": ""USA"",
      ""state"": ""New York"",
      ""city"": ""New York City"",
      ""pincode"": 10001,
      ""addressType"": ""MAIL""
    }
  ],
  ""otherInfo"": {
    ""appliedImmigrationToOtherCountry"": ""No"",
    ""sufferFromHealthCondition"": ""No"",
    ""visaRefusalForAnyCountry"": ""No"",
    ""convictedToCriminalOffence"": ""No"",
    ""emergencyInfoName"": ""Jane Doe"",
    ""emergencyInfoPhone"": 9876543210,
    ""emergencyInfoEmail"": ""jane.doe@example.com"",
    ""relationWithApplicant"": ""Spouse"",
    ""additionalInfo"": ""None""
  },
  ""academicQualifications"": [
    {
      ""universityOrCollegeName"": ""ABC University"",
      ""degreeName"": ""Computer Science"",
      ""location"": ""New York"",
      ""courseStartDate"": ""2022-09-01"",
      ""courseEndDate"": ""2026-05-30"",
      ""educationLevel"": ""UG""
    },
    {
      ""universityOrCollegeName"": ""XYZ College"",
      ""degreeName"": ""Master of Business Administration"",
      ""location"": ""Los Angeles"",
      ""courseStartDate"": ""2023-01-15"",
      ""courseEndDate"": ""2024-12-20"",
      ""educationLevel"": ""PG""
    }
  ],
  ""workExperiences"": [
    {
      ""workExperience"": ""Software Engineer"",
      ""startFrom"": ""2018-01-01"",
      ""endDate"": ""2022-12-31"",
      ""companyName"": ""Tech Solutions"",
      ""fieldOfArea"": ""Information Technology""
    },
    {
      ""workExperience"": ""Project Manager"",
      ""startFrom"": ""2023-01-01"",
      ""endDate"": null,
      ""companyName"": ""Global Corp"",
      ""fieldOfArea"": ""Management""
    }
  ],
  ""tests"": [
    {
      ""testName"": ""IELTS"",
      ""dateOfCompletion"": ""2020-05-01"",
      ""dateOfExpiry"": ""2023-05-01"",
      ""overallPercentage"": ""7.5""
    },
    {
      ""testName"": ""GRE"",
      ""dateOfCompletion"": ""2019-08-15"",
      ""dateOfExpiry"": ""2024-08-15"",
      ""overallPercentage"": ""320""
    }
  ],
  ""appliedPrograms"": [
    {
      ""programId"": 1,
      ""appliedDate"": ""2024-03-01"",
      ""appliedUserId"": 1,
      ""programStatus"": ""Pending"",
      ""applicantStatus"": ""Submitted"",
      ""subStatus"": ""Initial Review"",
      ""isOpen"": true
    },
    {
      ""programId"": 2,
      ""appliedDate"": ""2024-03-15"",
      ""appliedUserId"": 1,
      ""programStatus"": ""Approved"",
      ""applicantStatus"": ""Accepted"",
      ""subStatus"": ""Final Review"",
      ""isOpen"": false
    }
  ]
}"
QL34wVRK,Untitled,35657,C++,Friday 29th of March 2024 11:31:34 PM CDT,"
#include <iostream> 


using namespace std;




int main() {
    setlocale(LC_ALL, ""ru"");

    int a = 10;

    cout << &a << endl; // получение адреса переменной

    int* ptr = &a; // сохранение адреса переменной 

    cout << ptr << endl;

    cout << *ptr << endl; // вывод переменной через указатель на неё

    *ptr = 20; // изменение значения переменной через указатель на неё

    cout << a << endl;
}"
3KtYg1gg,Untitled,35657,C++,Friday 29th of March 2024 11:19:47 PM CDT,"
#include <iostream> 


using namespace std;

void tower(int n, char src, char dest, char temp) {
    if (n == 0) {
        return;
    }
    tower(n - 1, src, temp, dest);
    cout << n << "" "" << src << "" -> "" << dest << endl;
    tower(n - 1, temp, dest, src);
}




int main() {
    setlocale(LC_ALL, ""ru"");

    tower(5, 'A', 'C', 'B');
    
}"
Fn9byMGY,Destruction Sim Inf Money Script,GETFREEROBUX,Lua,Friday 29th of March 2024 11:15:00 PM CDT,"loadstring(game:HttpGet(('https://raw.githubusercontent.com/BirthScripts/starhook/main/destruction%20sim.lua'),true))()"
c2KvcNTT,Untitled,robjones90,Python,Friday 29th of March 2024 09:38:58 PM CDT,"from tkinter import *

class App:
    def __init__(self, master):
        frame = Frame(master)
        frame.pack()
        Label(frame, text='deg C').grid(row=0, column=0)
        self.c_var = DoubleVar()
        Entry(frame, textvariable=self.c_var).grid(row=0, column=1)
        
        Label(frame, text='deg F').grid(row=1, column=0)
        self.result_var = DoubleVar()
        Entry(frame, textvariable=self.result_var).grid(row=1, column=1)

    def convert (self):
        print ('Not implemented')

root = Tk()
root.wm_title('Temp Converter')
app = App(root)
root.mainloop()"
zhmTFg6Z,SpawnPoint Command,LegendzHackz,Lua,Friday 29th of March 2024 09:14:11 PM CDT,"local Workspace = game:GetService(""Workspace"")
local Players = game:GetService(""Players"")
local Player = Players.LocalPlayer

getgenv().Settings = {
    Prefix = "";"",
    Coordinates = {},
    Spawn = false
}

function InsertTable(Table, Value)
    if type(Table) == ""table"" then
        table.insert(Table, Value)
        return Table
    end
end

function Notify(Value, Delay)
    if Workspace:FindFirstChild(""Hint"") then
        Workspace:FindFirstChild(""Hint"")
    end

    local Hint = Instance.new(""Hint"", Workspace)

    Hint.Text = Value
    task.wait(Delay)
    Hint:Destroy()
end

Player.CharacterAdded:Connect(function()
    if getgenv().Settings.Spawn then
        local Coordinates = getgenv().Settings.Coordinates[1]
        Player.Character:WaitForChild(""HumanoidRootPart"", 0.1).CFrame = CFrame.new(Coordinates)
    end
end)

Player.Chatted:Connect(function(Message)
    Message = Message:lower()

    if string.sub(Message, 1, 3) == ""/e "" then
        Message = string.sub(Message, 4)
    end

    if string.sub(Message, 1, 1) == getgenv().Settings.Prefix then
        local Command
        local Space = string.find(Message, "" "")
        if Space then
            Command = string.sub(Message, 2, Space - 1)
        else
            Command = string.sub(Message, 2)
        end
        if Command == ""spawn"" then
            Notify(""Set Spawn Point, "" .. tostring(Player.Character.HumanoidRootPart.CFrame), 1)
            getgenv().Settings.Spawn = true
            InsertTable(getgenv().Settings.Coordinates, Player.Character.HumanoidRootPart.Position)
        elseif Command == ""unspawn"" then
            Notify(""Removed Spawn Point"", 1)
            getgenv().Settings.Spawn = false
            table.clear(getgenv().Settings.Coordinates)
        end
    end
end)"
XXjNb3ne,CMDER.pyw,Najeebsk,Python,Friday 29th of March 2024 09:08:43 PM CDT,"import tkinter as tk
from tkinter import ttk
import subprocess
import configparser
import os


class AliasButtonExample(tk.Tk):
    def __init__(self):
        super().__init__()
        self.geometry('1000x675')
        self.config(bg='green')
        self.title(""Najeeb CMD ALIASES COMMANDS RUNNER"")

        self.console_frame = ConsoleFrame(self)
        self.console_frame.grid(row=0, column=0, columnspan=3, padx=5, pady=5, sticky=""nsew"")

        self.aliases = {}

        self.create_widgets()

    def create_widgets(self):
        style = ttk.Style()
        style.configure(""TButton"", foreground=""blue"", background=""lightgray"", font=('Arial', 10, 'bold'))
        style.configure(""TLabel"", foreground=""darkblue"", background=""lightgray"", font=('Arial', 10))

        tk.Label(self, text=""Command:"").grid(row=1, column=0, padx=5, pady=5)
        tk.Label(self, text=""Najeeb Aliases:"").grid(row=3, column=0, sticky=""n"", padx=5, pady=5)

        self.command_entry = tk.Entry(self, width=100)
        self.command_entry.grid(row=1, column=1, padx=5, pady=5)

        self.run_button = ttk.Button(self, text=""Run Command"", command=self.run_command, style=""TButton"")
        self.run_button.grid(row=1, column=2, rowspan=1, padx=5, pady=5, sticky=""nsew"")

        self.aliases_frame = tk.Frame(self)
        self.aliases_frame.grid(row=4, column=0, columnspan=3, padx=5, pady=5, sticky=""nsew"")

        self.aliases_text = tk.Text(self.aliases_frame, wrap=""word"", state=""normal"", height=10, width=106, font=('Arial', 12))
        self.aliases_text.grid(row=0, column=0, padx=5, pady=5, sticky=""nsew"")

        self.aliases_scrollbar = tk.Scrollbar(self.aliases_frame, orient=""vertical"", command=self.aliases_text.yview)
        self.aliases_scrollbar.grid(row=0, column=1, sticky=""ns"")
        self.aliases_text.config(yscrollcommand=self.aliases_scrollbar.set)

        self.search_label = tk.Label(self, text=""Search Aliases:"")
        self.search_label.grid(row=5, column=0, padx=5, pady=5, sticky=""e"")

        self.search_entry = tk.Entry(self, width=100)
        self.search_entry.grid(row=5, column=1, padx=5, pady=5)

        self.search_button = ttk.Button(self, text=""Search"", command=self.search_aliases, style=""TButton"")
        self.search_button.grid(row=5, column=2, padx=5, pady=5)

        self.save_button = ttk.Button(self, text=""Save Console Text"", command=self.save_console_text, style=""TButton"")
        self.save_button.grid(row=3, column=1, padx=5, pady=5)

        self.grid_columnconfigure(1, weight=1)

        self.read_aliases()

    def run_command(self):
        command = self.command_entry.get().strip()
        if command in self.aliases:
            command = self.aliases[command]
        process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        stdout, stderr = process.communicate()
        output = stdout.decode()
        error = stderr.decode()
        self.console_frame.console_window.append_text(output)
        if error:
            self.console_frame.console_window.append_text(error, tag=""error"")

    def read_aliases(self):
        try:
            config = configparser.ConfigParser()
            config.read(r""C:\Users\Najeeb\Desktop\CMDER\Aliases.ini"")
            for section in config.sections():
                for option in config.options(section):
                    try:
                        command = config.get(section, option)
                        self.aliases[option] = command
                        self.aliases_text.insert(""end"", f""{option}: {command}\n"")
                    except configparser.InterpolationSyntaxError as e:
                        print(f""Error reading alias '{option}' in section '{section}': {e}"")
        except configparser.Error as e:
            print(f""Error reading configuration file: {e}"")

    def search_aliases(self):
        query = self.search_entry.get().strip().lower()
        self.aliases_text.delete('1.0', tk.END)
        if query:
            for alias, command in self.aliases.items():
                if query in alias.lower() or query in command.lower():
                    self.aliases_text.insert(tk.END, f""{alias}: {command}\n"")

    def save_console_text(self):
        text_to_save = self.console_frame.console_window.get_text()
        with open(""console_output.txt"", ""w"") as file:
            file.write(text_to_save)


class ConsoleFrame(tk.Frame):
    def __init__(self, parent):
        super().__init__(parent)
        self.console_window = ConsoleWindow(self)
        self.console_window.pack(expand=True, fill=""both"")
        self.clear_button = ttk.Button(self, text=""Clear Console"", command=self.clear_console)
        self.clear_button.pack()

    def clear_console(self):
        self.console_window.clear_text()


class ConsoleWindow(tk.Frame):
    def __init__(self, parent):
        super().__init__(parent)
        self.text_area = tk.Text(self, wrap=""word"", state=""normal"", height=15, width=100, font=('Arial', 12))
        self.text_area.pack(expand=True, fill=""both"")
        self.scrollbar = tk.Scrollbar(self, command=self.text_area.yview)
        self.scrollbar.pack(side=""right"", fill=""y"")
        self.text_area.config(yscrollcommand=self.scrollbar.set)

        # Bind the text widget to automatically copy selected text to the clipboard
        self.text_area.bind(""<Control-c>"", self.copy_to_clipboard)

    def append_text(self, text, tag=None):
        self.text_area.config(state=""normal"")
        if tag:
            self.text_area.insert(""end"", text, tag)
        else:
            self.text_area.insert(""end"", text)
        self.text_area.config(state=""disabled"")
        self.text_area.see(""end"")

    def clear_text(self):
        self.text_area.config(state=""normal"")
        self.text_area.delete(""1.0"", ""end"")
        self.text_area.config(state=""disabled"")

    def get_text(self):
        return self.text_area.get(""1.0"", ""end-1c"")

    def copy_to_clipboard(self, event=None):
        self.clipboard_clear()
        text = self.text_area.get(tk.SEL_FIRST, tk.SEL_LAST)
        self.clipboard_append(text)


if __name__ == ""__main__"":
    app = AliasButtonExample()
    app.mainloop()
"
z9REt2TH,Check firmware UNO R4 WiFi,hwthinker,Arduino,Friday 29th of March 2024 09:08:19 PM CDT,"/*
  Simple code to check WiFi Firmware on Arduino Uno R4 WiFi

  Wi-Fi support is enabled via the built-in WiFiS3 library that is shipped 
  with the Arduino UNO R4 Core. 
  Installing the core automatically installs the WiFiS3 library.

  ref: UNO R4 WiFi Network Examples
  https://docs.arduino.cc/tutorials/uno-r4-wifi/wifi-examples
*/
#include <WiFiS3.h>

void setup() {
  delay(500);

  //Initialize serial and wait for port to open:
  Serial.begin(9600);
  while (!Serial) {
    ; // wait for serial port to connect. Needed for native USB port only
  }
  delay(500);
  Serial.println(""- Check Arduino Uno R4 WiFi firmware version -"");

  // check for the WiFi module:
  if (WiFi.status() == WL_NO_MODULE) {
    Serial.println(""Communication with WiFi module failed!"");
    // don't continue
    while (true);
  }

  String fv = WiFi.firmwareVersion();
  Serial.println(""Your WiFi firmware version is:"");
  Serial.println(fv);
  Serial.println();

  if (fv < WIFI_FIRMWARE_LATEST_VERSION) {
    Serial.println(""Please upgrade the firmware"");
    Serial.println(WIFI_FIRMWARE_LATEST_VERSION);
  }
  else{
    Serial.println(""It's the latest version."");
  }
}

void loop() {
  // put your main code here, to run repeatedly:

}
"
ZXEktF70,Jeu de paires,AdminArchon,Python,Friday 29th of March 2024 08:38:36 PM CDT,"from tinydb import TinyDB, Query
import yaml

db = TinyDB('db.json')
user = Query()

LISTE_JOUEURS = [el[""nom""] for el in [element for element in db.all()]]
print(LISTE_JOUEURS)
with open(""config.yml"") as config:
    document = yaml.full_load(config)

print(document)


class Grille_de_jeu:
    def __init__(self, colonnes=2, lignes=2, niveau=0):
        self.colonnes = colonnes
        self.lignes = lignes
        self.niveau = niveau

    def definir_taille_grille(self):
        pass


class Joueur:
    def __init__(self, nom):
        self.nom = nom
        self.niveau = 0

    def creer_joueur_db(self, nom_joueur):
        if not nom_joueur in LISTE_JOUEURS: db.insert({'nom': self.nom, 'niveau': self.niveau})

    def sauvegarder_partie(self, niveau_joueur):
        db.update({'niveau': niveau_joueur}, user.nom == self.nom)

    def charger_partie(self):
        joueur_trouve = db.search(user.nom == self.nom)
        return joueur_trouve[0][""niveau""]


# Creation
print(""Bienvenue au Jeu de Paires !\n"")
# nom_joueur = input(""Comment t'appelles-tu ?\n"").lower().title()
perso = Joueur('Didier')
perso.creer_joueur_db(perso.nom)

# Recherche existant
print(perso.charger_partie())



"
