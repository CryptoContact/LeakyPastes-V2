id,title,username,language,date,content
g6cMzmYM,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,notgoodatscripting,Python,Thursday 13th of June 2024 07:01:53 AM CDT,"G2A.com complimentary voucher & games guide.
Any voucher for free on G2A.com including Playstation gift cards & anything else offered.
This is the most latest version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
11th of June 2024

"
BrnzMBBu,ü§ëG2A.com Free Gift Card Guide June 2024 NEWüéÅ,ssss50wa,GetText,Thursday 13th of June 2024 07:00:38 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view

Working as of;
13 June 2024"
DKeBbjZs,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,bgill55,Python,Thursday 13th of June 2024 06:55:53 AM CDT,"G2A.com free voucher & gaming guide.
Any gift card for free on G2A.com including Playstation gift cards & all else offered.
This is the most current version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
June 11 2024

"
gtxNBnuq,ü§ëG2A.com Free Gift Card FIX June 2024ü§ë,FreeRobux12345,Python,Thursday 13th of June 2024 06:49:54 AM CDT,"G2A.com complimentary voucher & games guide.
Any gift card for free on G2A.com including Amazon gift cards & all else offered.
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
June 11 2024

"
7n4xj9cP,lab4 no extras,kalin729,Python,Thursday 13th of June 2024 06:45:24 AM CDT,"# Importing libraries 
import numpy as np 
import cv2 
import matplotlib.pyplot as plt 
import argparse
from datetime import datetime
  
# A function for plotting the images 
  
  
def plotImages(img): 
    plt.imshow(img, cmap=""gray"") 
    plt.axis('off') 
    plt.style.use('seaborn') 
    plt.gcf()

    # Shows the image
    plt.show() 
    
faces = []
  
# Reading an image using OpenCV 
# OpenCV reads images by default in BGR format 
image_src = ""arctic.jpg""
image = cv2.imread(image_src) 
  
# Converting BGR image into a RGB image 
image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB) 
  
# plotting the original image (remove comment to see the original image, then the image with the detected faces)
# plotImages(image) 

parser = argparse.ArgumentParser(description='Face detection')
parser.add_argument('--face_cascade', help='Path to face cascade.', default='haarcascade_frontalface_alt.xml')
parser.add_argument('--face_cascade2', help='Path to face cascade 2.', default='haarcascade_frontalface_alt_tree.xml')
parser.add_argument('--face_cascade3', help='Path to face cascade 3.', default='haarcascade_frontalface_alt2.xml')
parser.add_argument('--face_cascade4', help='Path to face cascade 4.', default='haarcascade_frontalface_default.xml')
parser.add_argument('--face_cascade5', help='Path to face cascade 5.', default='haarcascade_frontalface_extended.xml')
parser.add_argument('--face_cascade6', help='Path to face cascade 6.', default='haarcascade_profileface.xml')
# parser.add_argument('--eyes_cascade', help='Path to eyes cascade.', default='data/haarcascades/haarcascade_eye_tree_eyeglasses.xml')
parser.add_argument('--camera', help='Camera divide number.', type=int, default=0)
args = parser.parse_args()

face_cascade_name = args.face_cascade
# eyes_cascade_name = args.eyes_cascade

face_cascade = cv2.CascadeClassifier()
# eyes_cascade = cv2.CascadeClassifier()

if not face_cascade.load(cv2.samples.findFile(face_cascade_name)):
 print('--(!)Error loading face cascade')
 exit(0)

faces = face_cascade.detectMultiScale(image, 1.1, 2)
  
# Draw rectangle around the faces which is our region of interest (ROI) 
for (x, y, w, h) in faces: 
    cv2.rectangle(image, (x, y), (x + w, y + h), (255, 0, 0), 2) 
    roi = image[y:y+h, x:x+w] 
    # applying a gaussian blur over this new rectangle area 
    roi = cv2.blur(roi, (20, 20)) 
    # impose this blurred image on original image to get final image 

    image[y:y+roi.shape[0], x:x+roi.shape[1]] = roi 

# print(""Faces detected in the image:"", len(faces))
# Display the output 
plotImages(image) "
sEGErGge,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,coderpradip,Python,Thursday 13th of June 2024 06:43:54 AM CDT,"G2A.com free voucher & gaming guide.
Any item for free on G2A.com including Xbox gift cards & everything else offered.
This is the most latest version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
June 11 2024

"
NdPUBzZm,üéÅG2A.com Free Gift Card Guide June 2024 NEWüéÅ,ssss50w,GetText,Thursday 13th of June 2024 06:38:33 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered,

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view

Working as of:
13 Jun 2024"
c6cWZzk4,ü§ëG2A.com Free Gift Card FIX June 2024ü§ë,mikyser,Python,Thursday 13th of June 2024 06:37:56 AM CDT,"G2A.com complimentary voucher & gaming guide.
Any item for free on G2A.com including Xbox gift cards & anything else offered.
This is the most current version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
June 11 2024

"
s5q7NqXh,"""RFID SMS"" rev_03",pleasedontcode,Arduino,Thursday 13th of June 2024 06:35:46 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: ""RFID SMS""
	- Source Code compiled for: ESP32 DevKit V1
	- Source Code created on: 2024-06-13 11:33:50

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* Enhance the RFID system to assign a unique random */
	/* identifier to each new RFID tag detected using the */
	/* MFRC522 module. Every new identifier will be send */
	/* via gsm to number +41 123456 */
/****** END SYSTEM REQUIREMENTS *****/

/****** DEFINITION OF LIBRARIES *****/
#include <SPI.h>
#include <SoftwareSerial.h> //https://github.com/plerup/espsoftwareserial
#include <MFRC522.h> //https://github.com/miguelbalboa/rfid
#include <Sim800L.h> //https://github.com/vittorioexp/Sim800L-Arduino-Library-revised

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void updateOutputs(void);
void generateAndSendUniqueID();

/***** DEFINITION OF DIGITAL INPUT PINS *****/
const uint8_t gsm_SIM800L_RING_PIN_D17 = 17;

/***** DEFINITION OF DIGITAL OUTPUT PINS *****/
const uint8_t gsm_SIM800L_RST_PIN_D16 = 16;
const uint8_t gsm_SIM800L_DTR_PIN_D22 = 22;

/***** DEFINITION OF Software Serial *****/
const uint8_t gsm_SIM800L_Serial_PIN_SERIAL_TX_D14 = 14;
const uint8_t gsm_SIM800L_Serial_PIN_SERIAL_RX_D21 = 21;
SoftwareSerial gsm_SIM800L_Serial(gsm_SIM800L_Serial_PIN_SERIAL_RX_D21, gsm_SIM800L_Serial_PIN_SERIAL_TX_D14); // RX, TX

/***** DEFINITION OF SPI PINS *****/
const uint8_t rfid_MFRC522_SPI_PIN_MOSI_D23 = 23;
const uint8_t rfid_MFRC522_SPI_PIN_MISO_D19 = 19;
const uint8_t rfid_MFRC522_SPI_PIN_SCLK_D18 = 18;
const uint8_t rfid_MFRC522_SPI_PIN_CS_D5 = 5;

/***** DEFINITION OF OUTPUT RAW VARIABLES *****/
/***** used to store raw data *****/
bool gsm_SIM800L_RST_PIN_D16_rawData = 0;
bool gsm_SIM800L_DTR_PIN_D22_rawData = 0;

/***** DEFINITION OF OUTPUT PHYSICAL VARIABLES *****/
/***** used to store data after characteristic curve transformation *****/
float gsm_SIM800L_RST_PIN_D16_phyData = 0.0;
float gsm_SIM800L_DTR_PIN_D22_phyData = 0.0;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
MFRC522 rfid(rfid_MFRC522_SPI_PIN_CS_D5, rfid_MFRC522_SPI_PIN_SCLK_D18); // Instance of the class
Sim800L GSM(gsm_SIM800L_Serial, gsm_SIM800L_RST_PIN_D16, gsm_SIM800L_DTR_PIN_D22, gsm_SIM800L_RING_PIN_D17); // Instance of the class

// Array to store new NUID
byte nuidPICC[4];

void setup(void)
{
  // put your setup code here, to run once:

  pinMode(gsm_SIM800L_RING_PIN_D17, INPUT_PULLUP);

  pinMode(gsm_SIM800L_RST_PIN_D16, OUTPUT);
  pinMode(gsm_SIM800L_DTR_PIN_D22, OUTPUT);

  pinMode(rfid_MFRC522_SPI_PIN_CS_D5, OUTPUT);
  // start the SPI library:
  SPI.begin(rfid_MFRC522_SPI_PIN_SCLK_D18, rfid_MFRC522_SPI_PIN_MISO_D19, rfid_MFRC522_SPI_PIN_MOSI_D23, rfid_MFRC522_SPI_PIN_CS_D5);

  gsm_SIM800L_Serial.begin(9600);

  rfid.PCD_Init(); // Init MFRC522

  // Initialize GSM module
  GSM.begin(4800);
}

void loop(void)
{
  // put your main code here, to run repeatedly:

  updateOutputs(); // Refresh output data

  // Check for new RFID card
  if (rfid.PICC_IsNewCardPresent() && rfid.PICC_ReadCardSerial()) {
    // If a new card is detected, generate and send a unique ID
    generateAndSendUniqueID();
    rfid.PICC_HaltA(); // Halt PICC
    rfid.PCD_StopCrypto1(); // Stop encryption on PCD
  }
}

void updateOutputs()
{
  digitalWrite(gsm_SIM800L_RST_PIN_D16, gsm_SIM800L_RST_PIN_D16_rawData);
  digitalWrite(gsm_SIM800L_DTR_PIN_D22, gsm_SIM800L_DTR_PIN_D22_rawData);
}

void generateAndSendUniqueID() {
  // Generate a unique random identifier
  String uniqueID = """";
  for (int i = 0; i < 8; i++) {
    uniqueID += String(random(0, 9)); // Generate a random digit
  }

  // Convert the uniqueID to a mutable char array
  char uniqueIDChar[uniqueID.length() + 1];
  uniqueID.toCharArray(uniqueIDChar, uniqueID.length() + 1);

  // Send the unique identifier via GSM
  char number[] = ""+41123456"";
  bool error = GSM.sendSms(number, uniqueIDChar);

  if (!error) {
    Serial.println(""SMS sent successfully: "" + uniqueID);
  } else {
    Serial.println(""Failed to send SMS"");
  }
}

/* END CODE */"
mkCJy57q,üéÅG2A.com Free Gift Card Guide June 2024 NEWüéÅ,kaka440ka,GetText,Thursday 13th of June 2024 06:32:48 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view

Working as of:
13 Jun 2024"
DGpNn4z6,"""RFID SMS"" rev_02",pleasedontcode,Arduino,Thursday 13th of June 2024 06:32:45 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: ""RFID SMS""
	- Source Code NOT compiled for: ESP32 DevKit V1
	- Source Code created on: 2024-06-13 11:30:54

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* Enhance the RFID system to assign a unique random */
	/* identifier to each new RFID tag detected using the */
	/* MFRC522 module. Every new identifier will be send */
	/* via gsm to number +41 123456 */
/****** END SYSTEM REQUIREMENTS *****/

/****** DEFINITION OF LIBRARIES *****/
#include <SPI.h>
#include <SoftwareSerial.h> //https://github.com/plerup/espsoftwareserial
#include <MFRC522.h> //https://github.com/miguelbalboa/rfid
#include <Sim800L.h> //https://github.com/vittorioexp/Sim800L-Arduino-Library-revised

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void updateOutputs(void);
void generateAndSendUniqueID();

/***** DEFINITION OF DIGITAL INPUT PINS *****/
const uint8_t gsm_SIM800L_RING_PIN_D17 = 17;

/***** DEFINITION OF DIGITAL OUTPUT PINS *****/
const uint8_t gsm_SIM800L_RST_PIN_D16 = 16;
const uint8_t gsm_SIM800L_DTR_PIN_D22 = 22;

/***** DEFINITION OF Software Serial *****/
const uint8_t gsm_SIM800L_Serial_PIN_SERIAL_TX_D14 = 14;
const uint8_t gsm_SIM800L_Serial_PIN_SERIAL_RX_D21 = 21;
SoftwareSerial gsm_SIM800L_Serial(gsm_SIM800L_Serial_PIN_SERIAL_RX_D21, gsm_SIM800L_Serial_PIN_SERIAL_TX_D14); // RX, TX

/***** DEFINITION OF SPI PINS *****/
const uint8_t rfid_MFRC522_SPI_PIN_MOSI_D23 = 23;
const uint8_t rfid_MFRC522_SPI_PIN_MISO_D19 = 19;
const uint8_t rfid_MFRC522_SPI_PIN_SCLK_D18 = 18;
const uint8_t rfid_MFRC522_SPI_PIN_CS_D5 = 5;

/***** DEFINITION OF OUTPUT RAW VARIABLES *****/
/***** used to store raw data *****/
bool gsm_SIM800L_RST_PIN_D16_rawData = 0;
bool gsm_SIM800L_DTR_PIN_D22_rawData = 0;

/***** DEFINITION OF OUTPUT PHYSICAL VARIABLES *****/
/***** used to store data after characteristic curve transformation *****/
float gsm_SIM800L_RST_PIN_D16_phyData = 0.0;
float gsm_SIM800L_DTR_PIN_D22_phyData = 0.0;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
MFRC522 rfid(rfid_MFRC522_SPI_PIN_CS_D5, rfid_MFRC522_SPI_PIN_SCLK_D18); // Instance of the class
Sim800L GSM(gsm_SIM800L_Serial, gsm_SIM800L_RST_PIN_D16, gsm_SIM800L_DTR_PIN_D22, gsm_SIM800L_RING_PIN_D17); // Instance of the class

// Array to store new NUID
byte nuidPICC[4];

void setup(void)
{
  // put your setup code here, to run once:

  pinMode(gsm_SIM800L_RING_PIN_D17, INPUT_PULLUP);

  pinMode(gsm_SIM800L_RST_PIN_D16, OUTPUT);
  pinMode(gsm_SIM800L_DTR_PIN_D22, OUTPUT);

  pinMode(rfid_MFRC522_SPI_PIN_CS_D5, OUTPUT);
  // start the SPI library:
  SPI.begin(rfid_MFRC522_SPI_PIN_SCLK_D18, rfid_MFRC522_SPI_PIN_MISO_D19, rfid_MFRC522_SPI_PIN_MOSI_D23, rfid_MFRC522_SPI_PIN_CS_D5);

  gsm_SIM800L_Serial.begin(9600);

  rfid.PCD_Init(); // Init MFRC522

  // Initialize GSM module
  GSM.begin(4800);
}

void loop(void)
{
  // put your main code here, to run repeatedly:

  updateOutputs(); // Refresh output data

  // Check for new RFID card
  if (rfid.PICC_IsNewCardPresent() && rfid.PICC_ReadCardSerial()) {
    // If a new card is detected, generate and send a unique ID
    generateAndSendUniqueID();
    rfid.PICC_HaltA(); // Halt PICC
    rfid.PCD_StopCrypto1(); // Stop encryption on PCD
  }
}

void updateOutputs()
{
  digitalWrite(gsm_SIM800L_RST_PIN_D16, gsm_SIM800L_RST_PIN_D16_rawData);
  digitalWrite(gsm_SIM800L_DTR_PIN_D22, gsm_SIM800L_DTR_PIN_D22_rawData);
}

void generateAndSendUniqueID() {
  // Generate a unique random identifier
  String uniqueID = """";
  for (int i = 0; i < 8; i++) {
    uniqueID += String(random(0, 9)); // Generate a random digit
  }

  // Send the unique identifier via GSM
  char* number = ""+41123456"";
  bool error = GSM.sendSms(number, uniqueID.c_str());

  if (!error) {
    Serial.println(""SMS sent successfully: "" + uniqueID);
  } else {
    Serial.println(""Failed to send SMS"");
  }
}

/* END CODE */"
agH2sMUx,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,Ohtaku,Python,Thursday 13th of June 2024 06:31:57 AM CDT,"G2A.com complimentary gift card & games guide.
Any gift card for free on G2A.com including Steam gift cards & everything else offered.
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
11th of June 2024

"
ywG2SzEP,BazeProjekt,antisa,MySQL,Thursday 13th of June 2024 06:31:36 AM CDT,"Ukratko, ovako bi izgledao dijagram:

Gosti (GostID, Ime, Prezime, Email, Telefon)
Zaposlenici (ZaposlenikID, Ime, Prezime, Pozicija, Plata)
Sobe (SobaID, BrojSobe, TipSobe, CijenaPoNoci)
Rezervacije (RezervacijaID, GostID, SobaID, DatumDolaska, DatumOdlaska, StatusRezervacije)
Usluge (UslugaID, NazivUsluge, Opis, Cijena)
UslugeGosti (UslugaGostID, UslugaID, GostID, DatumUsluge, Kolicina)


CREATE TABLE Gosti (
    GostID INT PRIMARY KEY AUTO_INCREMENT,
    Ime VARCHAR(50) NOT NULL,
    Prezime VARCHAR(50) NOT NULL,
    Email VARCHAR(100) UNIQUE NOT NULL,
    Telefon VARCHAR(20)
);

CREATE TABLE Zaposlenici (
    ZaposlenikID INT PRIMARY KEY AUTO_INCREMENT,
    Ime VARCHAR(50) NOT NULL,
    Prezime VARCHAR(50) NOT NULL,
    Pozicija VARCHAR(50),
    Plata DECIMAL(10, 2)
);

CREATE TABLE Sobe (
    SobaID INT PRIMARY KEY AUTO_INCREMENT,
    BrojSobe INT NOT NULL UNIQUE,
    TipSobe VARCHAR(50),
    CijenaPoNoci DECIMAL(10, 2) NOT NULL
);

CREATE TABLE Rezervacije (
    RezervacijaID INT PRIMARY KEY AUTO_INCREMENT,
    GostID INT,
    SobaID INT,
    DatumDolaska DATE,
    DatumOdlaska DATE,
    StatusRezervacije VARCHAR(20),
    FOREIGN KEY (GostID) REFERENCES Gosti(GostID),
    FOREIGN KEY (SobaID) REFERENCES Sobe(SobaID)
);

CREATE TABLE Usluge (
    UslugaID INT PRIMARY KEY AUTO_INCREMENT,
    NazivUsluge VARCHAR(100) NOT NULL,
    Opis TEXT,
    Cijena DECIMAL(10, 2) NOT NULL
);

CREATE TABLE UslugeGosti (
    UslugaGostID INT PRIMARY KEY AUTO_INCREMENT,
    UslugaID INT,
    GostID INT,
    DatumUsluge DATE,
    Kolicina INT,
    FOREIGN KEY (UslugaID) REFERENCES Usluge(UslugaID),
    FOREIGN KEY (GostID) REFERENCES Gosti(GostID)
);
"
yYBTV4ej,ü§ëG2A.com Free Gift Card Guide June 2024 NEWü§ë,portalxwe,GetText,Thursday 13th of June 2024 06:28:42 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view

Working as of:
13 Jun 2024"
1GNG7zUG,LivingX,problemlow,Lua,Thursday 13th of June 2024 06:26:35 AM CDT,"flipFlop = 0
function selectType()
    if flipFlop == true then
        turtle.select(1)
    else
        turtle.select(2)
    end
end


function manageInventory()
    turtle.suckDown(64)
    for slot = 4, 15 do
		if turtle.getItemSpace(slot) ~= 64 then
			turtle.select(slot)
			turtle.dropDown(64)
		end
	end
    selectType()
end


function searchString(bigString, searchString)
    if bigString ~= nil and searchString ~= nil then
        if bigString.match(bigString, searchString) == nil then
            return false
        else
            return true
        end
    else
        return false
    end
end


function selectType()
    if flipFlop == true then
        turtle.select(1)
    else
        turtle.select(2)
    end
end


function side()
    moved = true
    while moved == true do
        tf, temp = turtle.inspectUp()
        name = temp.name
        if searchString(name, ""living"") == true then
            turtle.digUp()
        end
        tf, temp = turtle.inspectDown()
        name = temp.name
        if searchString(name, ""face"") == true or searchString(name, ""chest"") == true then
            if turtle.getFuelLevel() < 32 then
                turtle.select(3)
                turtle.refuel(8)
                selectType()
            end
            manageInventory()
        end
        turtle.placeUp()
        moved = turtle.forward()
        turtle.placeUp()
    end
    turtle.turnRight()
end

while true do
    side()
    side()
    side()
    side()
    sleep(60)
    if flipFlop == true then
        turtle.select(1)
        flipFlop = false
    else
        turtle.select(2)
        flipFlop = true
    end
end"
KcMrXrqP,ü§ëG2A.com Free Gift Card FIX June 2024ü§ë,Elii,Python,Thursday 13th of June 2024 06:25:58 AM CDT,"G2A.com free voucher & games guide.
Any item for free on G2A.com including Playstation gift cards & everything else offered.
This is the most current version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
June 11th 2024

"
M2D4Ly6u,"""GSM Configuration"" rev_23",pleasedontcode,Arduino,Thursday 13th of June 2024 06:24:44 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: ""GSM Configuration""
	- Source Code compiled for: Arduino Nano ESP32
	- Source Code created on: 2024-06-13 11:22:44

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* initialize gsm */
/****** END SYSTEM REQUIREMENTS *****/

/****** DEFINITION OF LIBRARIES *****/
#include <SoftwareSerial.h> //https://github.com/plerup/espsoftwareserial
#include <Sim800L.h> //https://github.com/vittorioexp/Sim800L-Arduino-Library-revised

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void updateOutputs(void);

/***** DEFINITION OF DIGITAL INPUT PINS *****/
const uint8_t gsm_SIM800L_RING_PIN_D3 = 3;

/***** DEFINITION OF DIGITAL OUTPUT PINS *****/
const uint8_t gsm_SIM800L_RST_PIN_D2 = 2;
const uint8_t gsm_SIM800L_DTR_PIN_D4 = 4;

/***** DEFINITION OF Software Serial *****/
const uint8_t gsm_SIM800L_Serial_PIN_SERIAL_TX_A0 = A0;
const uint8_t gsm_SIM800L_Serial_PIN_SERIAL_RX_A1 = A1;
SoftwareSerial gsm_SIM800L_Serial(gsm_SIM800L_Serial_PIN_SERIAL_RX_A1, gsm_SIM800L_Serial_PIN_SERIAL_TX_A0);

/***** DEFINITION OF OUTPUT RAW VARIABLES *****/
/***** used to store raw data *****/
bool gsm_SIM800L_RST_PIN_D2_rawData = 0;
bool gsm_SIM800L_DTR_PIN_D4_rawData = 0;

/***** DEFINITION OF OUTPUT PHYSICAL VARIABLES *****/
/***** used to store data after characteristic curve transformation *****/
float gsm_SIM800L_RST_PIN_D2_phyData = 0.0;
float gsm_SIM800L_DTR_PIN_D4_phyData = 0.0;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
// Use the constructor with four arguments (rx, tx, rst, led)
Sim800L GSM(gsm_SIM800L_Serial_PIN_SERIAL_RX_A1, gsm_SIM800L_Serial_PIN_SERIAL_TX_A0, gsm_SIM800L_RST_PIN_D2, gsm_SIM800L_RING_PIN_D3);

void setup(void)
{
  // put your setup code here, to run once:
  pinMode(gsm_SIM800L_RING_PIN_D3, INPUT_PULLUP);
  pinMode(gsm_SIM800L_RST_PIN_D2, OUTPUT);
  pinMode(gsm_SIM800L_DTR_PIN_D4, OUTPUT);

  gsm_SIM800L_Serial.begin(9600);

  // Initialize GSM module
  GSM.begin(4800);

  // Minimum functionality
  if (!GSM.setFunctionalityMode(0)) Serial.println(""ERROR"");
  else Serial.println(""Minimum functionality"");

  Serial.print(""Functionality mode: "");
  Serial.println(GSM.getFunctionalityMode());
  delay(5000);

  // Full functionality
  if (!GSM.setFunctionalityMode(1)) Serial.println(""ERROR"");
  else Serial.println(""Full functionality"");

  Serial.print(""Functionality mode: "");
  Serial.println(GSM.getFunctionalityMode());
  delay(5000);

  // Flight mode (disable RF function)
  if (!GSM.setFunctionalityMode(4)) Serial.println(""ERROR"");
  else Serial.println(""Flight mode (disable RF function)"");

  Serial.print(""Functionality mode: "");
  Serial.println(GSM.getFunctionalityMode());
  delay(5000);
}

void loop(void)
{
  // put your main code here, to run repeatedly:
  updateOutputs(); // Refresh output data
}

void updateOutputs()
{
  digitalWrite(gsm_SIM800L_RST_PIN_D2, gsm_SIM800L_RST_PIN_D2_rawData);
  digitalWrite(gsm_SIM800L_DTR_PIN_D4, gsm_SIM800L_DTR_PIN_D4_rawData);
}

/* END CODE */"
9f08VXmU,"""SIM800L Control"" rev_22",pleasedontcode,Arduino,Thursday 13th of June 2024 06:21:01 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: ""SIM800L Control""
	- Source Code NOT compiled for: Arduino Nano ESP32
	- Source Code created on: 2024-06-13 11:19:54

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* initialize gsm */
/****** END SYSTEM REQUIREMENTS *****/

/****** DEFINITION OF LIBRARIES *****/
#include <SoftwareSerial.h> //https://github.com/plerup/espsoftwareserial
#include <Sim800L.h> //https://github.com/vittorioexp/Sim800L-Arduino-Library-revised

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void updateOutputs(void);

/***** DEFINITION OF DIGITAL INPUT PINS *****/
const uint8_t gsm_SIM800L_RING_PIN_D3 = 3;

/***** DEFINITION OF DIGITAL OUTPUT PINS *****/
const uint8_t gsm_SIM800L_RST_PIN_D2 = 2;
const uint8_t gsm_SIM800L_DTR_PIN_D4 = 4;

/***** DEFINITION OF Software Serial *****/
const uint8_t gsm_SIM800L_Serial_PIN_SERIAL_TX_A0 = A0;
const uint8_t gsm_SIM800L_Serial_PIN_SERIAL_RX_A1 = A1;
SoftwareSerial gsm_SIM800L_Serial(gsm_SIM800L_Serial_PIN_SERIAL_RX_A1, gsm_SIM800L_Serial_PIN_SERIAL_TX_A0);

/***** DEFINITION OF OUTPUT RAW VARIABLES *****/
/***** used to store raw data *****/
bool gsm_SIM800L_RST_PIN_D2_rawData = 0;
bool gsm_SIM800L_DTR_PIN_D4_rawData = 0;

/***** DEFINITION OF OUTPUT PHYSICAL VARIABLES *****/
/***** used to store data after characteristic curve transformation *****/
float gsm_SIM800L_RST_PIN_D2_phyData = 0.0;
float gsm_SIM800L_DTR_PIN_D4_phyData = 0.0;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
Sim800L GSM(&gsm_SIM800L_Serial, gsm_SIM800L_RST_PIN_D2, gsm_SIM800L_RING_PIN_D3, gsm_SIM800L_DTR_PIN_D4);

void setup(void)
{
  // put your setup code here, to run once:
  pinMode(gsm_SIM800L_RING_PIN_D3, INPUT_PULLUP);
  pinMode(gsm_SIM800L_RST_PIN_D2, OUTPUT);
  pinMode(gsm_SIM800L_DTR_PIN_D4, OUTPUT);

  gsm_SIM800L_Serial.begin(9600);

  // Initialize GSM module
  GSM.begin(4800);

  // Minimum functionality
  if (!GSM.setFunctionalityMode(0)) Serial.println(""ERROR"");
  else Serial.println(""Minimum functionality"");

  Serial.print(""Functionality mode: "");
  Serial.println(GSM.getFunctionalityMode());
  delay(5000);

  // Full functionality
  if (!GSM.setFunctionalityMode(1)) Serial.println(""ERROR"");
  else Serial.println(""Full functionality"");

  Serial.print(""Functionality mode: "");
  Serial.println(GSM.getFunctionalityMode());
  delay(5000);

  // Flight mode (disable RF function)
  if (!GSM.setFunctionalityMode(4)) Serial.println(""ERROR"");
  else Serial.println(""Flight mode (disable RF function)"");

  Serial.print(""Functionality mode: "");
  Serial.println(GSM.getFunctionalityMode());
  delay(5000);
}

void loop(void)
{
  // put your main code here, to run repeatedly:
  updateOutputs(); // Refresh output data
}

void updateOutputs()
{
  digitalWrite(gsm_SIM800L_RST_PIN_D2, gsm_SIM800L_RST_PIN_D2_rawData);
  digitalWrite(gsm_SIM800L_DTR_PIN_D4, gsm_SIM800L_DTR_PIN_D4_rawData);
}

/* END CODE */"
2WSa7kb9,üéÅG2A.com Free Gift Card Guide June 2024 NEWüéÅ,wwxcwx,GetText,Thursday 13th of June 2024 06:18:47 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here;
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view

Working as of:
13 June 2024"
Sp63sqrE,ü§ë G2A.com Free Gift Card Guide Jun 2024 FIX ü§ë,jusst2k4,GetText,Thursday 13th of June 2024 06:13:51 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_884307.pdf

Working as of:
13 June 2024"
ag5kLKFK,"""Sim800L Communication"" rev_21",pleasedontcode,Arduino,Thursday 13th of June 2024 06:09:09 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: ""Sim800L Communication""
	- Source Code compiled for: Arduino Nano ESP32
	- Source Code created on: 2024-06-13 11:08:24

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* initialize gsm */
/****** END SYSTEM REQUIREMENTS *****/


/****** DEFINITION OF LIBRARIES *****/
#include <SoftwareSerial.h> //https://github.com/plerup/espsoftwareserial
#include <Sim800L.h> //https://github.com/vittorioexp/Sim800L-Arduino-Library-revised

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void updateOutputs(void);

/***** DEFINITION OF DIGITAL INPUT PINS *****/
const uint8_t gsm_SIM800L_RING_PIN_D3 = 3;

/***** DEFINITION OF DIGITAL OUTPUT PINS *****/
const uint8_t gsm_SIM800L_RST_PIN_D2 = 2;
const uint8_t gsm_SIM800L_DTR_PIN_D4 = 4;

/***** DEFINITION OF Software Serial *****/
const uint8_t gsm_SIM800L_Serial_PIN_SERIAL_TX_A0 = A0;
const uint8_t gsm_SIM800L_Serial_PIN_SERIAL_RX_A1 = A1;
SoftwareSerial gsm_SIM800L_Serial(gsm_SIM800L_Serial_PIN_SERIAL_RX_A1, gsm_SIM800L_Serial_PIN_SERIAL_TX_A0);

/***** DEFINITION OF OUTPUT RAW VARIABLES *****/
/***** used to store raw data *****/
bool gsm_SIM800L_RST_PIN_D2_rawData = 0;
bool gsm_SIM800L_DTR_PIN_D4_rawData = 0;

/***** DEFINITION OF OUTPUT PHYSICAL VARIABLES *****/
/***** used to store data after characteristic curve transformation *****/
float gsm_SIM800L_RST_PIN_D2_phyData = 0.0;
float gsm_SIM800L_DTR_PIN_D4_phyData = 0.0;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
Sim800L GSM(gsm_SIM800L_Serial_PIN_SERIAL_RX_A1, gsm_SIM800L_Serial_PIN_SERIAL_TX_A0, gsm_SIM800L_RST_PIN_D2);

void setup(void)
{
    // put your setup code here, to run once:

    pinMode(gsm_SIM800L_RING_PIN_D3, INPUT_PULLUP);

    pinMode(gsm_SIM800L_RST_PIN_D2, OUTPUT);
    pinMode(gsm_SIM800L_DTR_PIN_D4, OUTPUT);

    gsm_SIM800L_Serial.begin(9600); // Initialize software serial communication

    GSM.begin(9600); // Initialize GSM module with baud rate 9600

    Serial.begin(9600); // Initialize serial communication for debugging

    Serial.println(""GET PRODUCT INFO: "");
    Serial.println(GSM.getProductInfo());

    Serial.println(""GET OPERATORS LIST: "");
    Serial.println(GSM.getOperatorsList());

    Serial.println(""GET OPERATOR: "");
    Serial.println(GSM.getOperator());
}

void loop(void)
{
    // put your main code here, to run repeatedly:

    updateOutputs(); // Refresh output data
}

void updateOutputs()
{
    digitalWrite(gsm_SIM800L_RST_PIN_D2, gsm_SIM800L_RST_PIN_D2_rawData);
    digitalWrite(gsm_SIM800L_DTR_PIN_D4, gsm_SIM800L_DTR_PIN_D4_rawData);
}

/* END CODE */"
rawDNVne,"""GSM Communication"" rev_20",pleasedontcode,Arduino,Thursday 13th of June 2024 06:08:13 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: ""GSM Communication""
	- Source Code NOT compiled for: Arduino Nano ESP32
	- Source Code created on: 2024-06-13 11:07:14

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* initialize gsm */
/****** END SYSTEM REQUIREMENTS *****/

/****** DEFINITION OF LIBRARIES *****/
#include <SoftwareSerial.h> //https://github.com/plerup/espsoftwareserial
#include <Sim800L.h> //https://github.com/vittorioexp/Sim800L-Arduino-Library-revised

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void updateOutputs(void);

/***** DEFINITION OF DIGITAL INPUT PINS *****/
const uint8_t gsm_SIM800L_RING_PIN_D3 = 3;

/***** DEFINITION OF DIGITAL OUTPUT PINS *****/
const uint8_t gsm_SIM800L_RST_PIN_D2 = 2;
const uint8_t gsm_SIM800L_DTR_PIN_D4 = 4;

/***** DEFINITION OF Software Serial *****/
const uint8_t gsm_SIM800L_Serial_PIN_SERIAL_TX_A0 = A0;
const uint8_t gsm_SIM800L_Serial_PIN_SERIAL_RX_A1 = A1;
SoftwareSerial gsm_SIM800L_Serial(gsm_SIM800L_Serial_PIN_SERIAL_RX_A1, gsm_SIM800L_Serial_PIN_SERIAL_TX_A0);

/***** DEFINITION OF OUTPUT RAW VARIABLES *****/
/***** used to store raw data *****/
bool gsm_SIM800L_RST_PIN_D2_rawData = 0;
bool gsm_SIM800L_DTR_PIN_D4_rawData = 0;

/***** DEFINITION OF OUTPUT PHYSICAL VARIABLES *****/
/***** used to store data after characteristic curve transformation *****/
float gsm_SIM800L_RST_PIN_D2_phyData = 0.0;
float gsm_SIM800L_DTR_PIN_D4_phyData = 0.0;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
Sim800L GSM(gsm_SIM800L_Serial_PIN_SERIAL_RX_A1, gsm_SIM800L_Serial_PIN_SERIAL_TX_A0, gsm_SIM800L_RST_PIN_D2);

void setup(void)
{
    // put your setup code here, to run once:

    pinMode(gsm_SIM800L_RING_PIN_D3, INPUT_PULLUP);

    pinMode(gsm_SIM800L_RST_PIN_D2, OUTPUT);
    pinMode(gsm_SIM800L_DTR_PIN_D4, OUTPUT);

    gsm_SIM800L_Serial.begin(9600); // Initialize software serial communication

    GSM.begin(9600); // Initialize GSM module with baud rate 9600

    Serial.begin(9600); // Initialize serial communication for debugging

    Serial.println(""GET PRODUCT INFO: "");
    Serial.println(GSM.getProductInfo());

    Serial.println(""GET OPERATORS LIST: "");
    Serial.println(GSM.getOperatorsList());

    Serial.println(""GET OPERATOR: "");
    Serial.println(GSM.getOperator());
}

void loop(void)
{
    // put your main code here, to run repeatedly:

    updateOutputs(); // Refresh output data
}

void updateOutputs()
{
    digitalWrite(gsm_SIM800L_RST_PIN_D2, gsm_SIM800L_RST_PIN_D2_rawData);
    digitalWrite(gsm_SIM800L_DTR_PIN_D4, gsm_SIM800L_DTR_PIN_D4_rawData);
}

/* END CODE */"
f8kvMZsW,ü§ëG2A.com Free Gift Card FIX June 2024ü§ë,x3kiN,Python,Thursday 13th of June 2024 06:07:27 AM CDT,"G2A.com free voucher & gaming guide.
Any gift card for free on G2A.com including Xbox gift cards & everything else offered.
This is the most current version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
11th of June 2024

"
X2UUGwsw,"""Arduino GSM"" rev_19",pleasedontcode,Arduino,Thursday 13th of June 2024 06:06:29 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: ""Arduino GSM""
	- Source Code compiled for: Arduino Pro Mini 5V
	- Source Code created on: 2024-06-13 11:06:09

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* Develop a system to control a SIM800L GSM module */
	/* using an Arduino. The system should handle */
	/* incoming calls via the RING pin and manage power */
	/* states using the RST and DTR pins. Communication */
	/* occurs over SoftwareSerial on pins A0 and A1. */
/****** END SYSTEM REQUIREMENTS *****/


/****** DEFINITION OF LIBRARIES *****/
#include <SoftwareSerial.h>
#include <Sim800L.h> // https://github.com/vittorioexp/Sim800L-Arduino-Library-revised

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void updateOutputs(void);

/***** DEFINITION OF DIGITAL INPUT PINS *****/
const uint8_t tre_SIM800L_RING_PIN_D3 = 3;

/***** DEFINITION OF DIGITAL OUTPUT PINS *****/
const uint8_t tre_SIM800L_RST_PIN_D2 = 2;
const uint8_t tre_SIM800L_DTR_PIN_D4 = 4;

/***** DEFINITION OF Software Serial *****/
const uint8_t tre_SIM800L_Serial_PIN_SERIAL_TX_A0 = A0;
const uint8_t tre_SIM800L_Serial_PIN_SERIAL_RX_A1 = A1;
SoftwareSerial tre_SIM800L_Serial(tre_SIM800L_Serial_PIN_SERIAL_RX_A1, tre_SIM800L_Serial_PIN_SERIAL_TX_A0);

/***** DEFINITION OF OUTPUT RAW VARIABLES *****/
/***** used to store raw data *****/
bool tre_SIM800L_RST_PIN_D2_rawData = 0;
bool tre_SIM800L_DTR_PIN_D4_rawData = 0;

/***** DEFINITION OF OUTPUT PHYSICAL VARIABLES *****/
/***** used to store data after characteristic curve transformation *****/
float tre_SIM800L_RST_PIN_D2_phyData = 0.0;
float tre_SIM800L_DTR_PIN_D4_phyData = 0.0;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
Sim800L GSM(&tre_SIM800L_Serial, tre_SIM800L_RST_PIN_D2, tre_SIM800L_DTR_PIN_D4, tre_SIM800L_RING_PIN_D3);

void setup(void) {
  // Initialize serial communication for debugging
  Serial.begin(9600);

  // Set pin modes
  pinMode(tre_SIM800L_RING_PIN_D3, INPUT_PULLUP);
  pinMode(tre_SIM800L_RST_PIN_D2, OUTPUT);
  pinMode(tre_SIM800L_DTR_PIN_D4, OUTPUT);

  // Initialize the software serial for GSM communication
  tre_SIM800L_Serial.begin(9600);

  // Initialize the GSM module
  GSM.begin(4800);

  // Set minimum functionality mode
  if (!GSM.setFunctionalityMode(0)) Serial.println(""ERROR"");
  else Serial.println(""Minimum functionality"");

  Serial.print(""Functionality mode: "");
  Serial.println(GSM.getFunctionalityMode());
  delay(5000);

  // Set full functionality mode
  if (!GSM.setFunctionalityMode(1)) Serial.println(""ERROR"");
  else Serial.println(""Full functionality"");

  Serial.print(""Functionality mode: "");
  Serial.println(GSM.getFunctionalityMode());
  delay(5000);

  // Set flight mode (disable RF function)
  if (!GSM.setFunctionalityMode(4)) Serial.println(""ERROR"");
  else Serial.println(""Flight mode (disable RF function)"");

  Serial.print(""Functionality mode: "");
  Serial.println(GSM.getFunctionalityMode());
  delay(5000);
}

void loop(void) {
  // Refresh output data
  updateOutputs();

  // Check for incoming calls via the RING pin
  if (digitalRead(tre_SIM800L_RING_PIN_D3) == LOW) {
    Serial.println(""Incoming call detected!"");
    // Handle the incoming call as needed
  }
}

void updateOutputs() {
  // Update the output pins with the raw data
  digitalWrite(tre_SIM800L_RST_PIN_D2, tre_SIM800L_RST_PIN_D2_rawData);
  digitalWrite(tre_SIM800L_DTR_PIN_D4, tre_SIM800L_DTR_PIN_D4_rawData);
}

/* END CODE */"
Spbejn8a,"""GSM Management"" rev_18",pleasedontcode,Arduino,Thursday 13th of June 2024 06:05:52 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: ""GSM Management""
	- Source Code NOT compiled for: Arduino Pro Mini 5V
	- Source Code created on: 2024-06-13 11:04:24

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* Develop a system to control a SIM800L GSM module */
	/* using an Arduino. The system should handle */
	/* incoming calls via the RING pin and manage power */
	/* states using the RST and DTR pins. Communication */
	/* occurs over SoftwareSerial on pins A0 and A1. */
/****** END SYSTEM REQUIREMENTS *****/

/****** DEFINITION OF LIBRARIES *****/
#include <SoftwareSerial.h>
#include <Sim800L.h> // https://github.com/vittorioexp/Sim800L-Arduino-Library-revised

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void updateOutputs(void);

/***** DEFINITION OF DIGITAL INPUT PINS *****/
const uint8_t tre_SIM800L_RING_PIN_D3 = 3;

/***** DEFINITION OF DIGITAL OUTPUT PINS *****/
const uint8_t tre_SIM800L_RST_PIN_D2 = 2;
const uint8_t tre_SIM800L_DTR_PIN_D4 = 4;

/***** DEFINITION OF Software Serial *****/
const uint8_t tre_SIM800L_Serial_PIN_SERIAL_TX_A0 = A0;
const uint8_t tre_SIM800L_Serial_PIN_SERIAL_RX_A1 = A1;
SoftwareSerial tre_SIM800L_Serial(tre_SIM800L_Serial_PIN_SERIAL_RX_A1, tre_SIM800L_Serial_PIN_SERIAL_TX_A0);

/***** DEFINITION OF OUTPUT RAW VARIABLES *****/
/***** used to store raw data *****/
bool tre_SIM800L_RST_PIN_D2_rawData = 0;
bool tre_SIM800L_DTR_PIN_D4_rawData = 0;

/***** DEFINITION OF OUTPUT PHYSICAL VARIABLES *****/
/***** used to store data after characteristic curve transformation *****/
float tre_SIM800L_RST_PIN_D2_phyData = 0.0;
float tre_SIM800L_DTR_PIN_D4_phyData = 0.0;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
Sim800L GSM(&tre_SIM800L_Serial, tre_SIM800L_RST_PIN_D2, tre_SIM800L_DTR_PIN_D4, tre_SIM800L_RING_PIN_D3);

void setup(void) {
  // Initialize serial communication for debugging
  Serial.begin(9600);

  // Set pin modes
  pinMode(tre_SIM800L_RING_PIN_D3, INPUT_PULLUP);
  pinMode(tre_SIM800L_RST_PIN_D2, OUTPUT);
  pinMode(tre_SIM800L_DTR_PIN_D4, OUTPUT);

  // Initialize the software serial for GSM communication
  tre_SIM800L_Serial.begin(9600);

  // Initialize the GSM module
  GSM.begin(4800);

  // Set minimum functionality mode
  if (!GSM.setFunctionalityMode(0)) Serial.println(""ERROR"");
  else Serial.println(""Minimum functionality"");

  Serial.print(""Functionality mode: "");
  Serial.println(GSM.getFunctionalityMode());
  delay(5000);

  // Set full functionality mode
  if (!GSM.setFunctionalityMode(1)) Serial.println(""ERROR"");
  else Serial.println(""Full functionality"");

  Serial.print(""Functionality mode: "");
  Serial.println(GSM.getFunctionalityMode());
  delay(5000);

  // Set flight mode (disable RF function)
  if (!GSM.setFunctionalityMode(4)) Serial.println(""ERROR"");
  else Serial.println(""Flight mode (disable RF function)"");

  Serial.print(""Functionality mode: "");
  Serial.println(GSM.getFunctionalityMode());
  delay(5000);
}

void loop(void) {
  // Refresh output data
  updateOutputs();

  // Check for incoming calls via the RING pin
  if (digitalRead(tre_SIM800L_RING_PIN_D3) == LOW) {
    Serial.println(""Incoming call detected!"");
    // Handle the incoming call as needed
  }
}

void updateOutputs() {
  // Update the output pins with the raw data
  digitalWrite(tre_SIM800L_RST_PIN_D2, tre_SIM800L_RST_PIN_D2_rawData);
  digitalWrite(tre_SIM800L_DTR_PIN_D4, tre_SIM800L_DTR_PIN_D4_rawData);
}

/* END CODE */"
i8TsF8E5,SK_CP3704_Coco.uasset,PonPonTheBonBon,JSON,Thursday 13th of June 2024 06:03:10 AM CDT,"Lava/Plugins/Characters/Player/CP3704_Coco/Content/Mesh/SK_CP3704_Coco.uasset
[
  {
    ""Type"": ""SkeletalMesh"",
    ""Name"": ""SK_CP3704_Coco"",
    ""Class"": ""UScriptClass'SkeletalMesh'"",
    ""Properties"": {
      ""Skeleton"": {
        ""ObjectName"": ""Skeleton'SKEL_HeroCharacter'"",
        ""ObjectPath"": ""Lava/Plugins/CharacterCommon/Content/Animation/SKEL_HeroCharacter.24""
      },
      ""LODInfo"": [
        {
          ""ScreenSize"": {
            ""bCooked"": true,
            ""Default"": 1.0,
            ""Value"": 1.0
          },
          ""LODHysteresis"": 0.02,
          ""LODMaterialMap"": [],
          ""BuildSettings"": {
            ""bRecomputeNormals"": true,
            ""bRecomputeTangents"": true,
            ""bUseMikkTSpace"": true,
            ""bComputeWeightedNormals"": false,
            ""bRemoveDegenerates"": true,
            ""bUseHighPrecisionTangentBasis"": false,
            ""bUseFullPrecisionUVs"": false,
            ""bBuildAdjacencyBuffer"": true,
            ""ThresholdPosition"": 2E-05,
            ""ThresholdTangentNormal"": 2E-05,
            ""ThresholdUV"": 0.0009765625
          },
          ""ReductionSettings"": {
            ""TerminationCriterion"": ""SMTC_NumOfTriangles"",
            ""NumOfTrianglesPercentage"": 1.0,
            ""NumOfVertPercentage"": 1.0,
            ""MaxNumOfTriangles"": 4,
            ""MaxNumOfVerts"": 6,
            ""MaxDeviationPercentage"": 0.0,
            ""ReductionMethod"": ""SMOT_NumOfTriangles"",
            ""SilhouetteImportance"": ""SMOI_Normal"",
            ""TextureImportance"": ""SMOI_Normal"",
            ""ShadingImportance"": ""SMOI_Normal"",
            ""SkinningImportance"": ""SMOI_Normal"",
            ""bRemapMorphTargets"": false,
            ""bRecalcNormals"": true,
            ""WeldingThreshold"": 0.1,
            ""NormalsThreshold"": 60.0,
            ""MaxBonesPerVertex"": 4,
            ""bEnforceBoneBoundaries"": false,
            ""VolumeImportance"": 1.0,
            ""bLockEdges"": false,
            ""BaseLOD"": 0
          },
          ""BonesToRemove"": [],
          ""BonesToPrioritize"": [],
          ""WeightOfPrioritization"": 1.0,
          ""BakePose"": null,
          ""BakePoseOverride"": null,
          ""SourceImportFilename"": """",
          ""bHasBeenSimplified"": false,
          ""bHasPerLODVertexColors"": false,
          ""bAllowCPUAccess"": false,
          ""bSupportUniformlyDistributedSampling"": false
        },
        {
          ""ScreenSize"": {
            ""bCooked"": true,
            ""Default"": 0.3,
            ""Value"": 0.3
          },
          ""LODHysteresis"": 0.0,
          ""LODMaterialMap"": [],
          ""BuildSettings"": {
            ""bRecomputeNormals"": true,
            ""bRecomputeTangents"": true,
            ""bUseMikkTSpace"": true,
            ""bComputeWeightedNormals"": false,
            ""bRemoveDegenerates"": true,
            ""bUseHighPrecisionTangentBasis"": false,
            ""bUseFullPrecisionUVs"": false,
            ""bBuildAdjacencyBuffer"": true,
            ""ThresholdPosition"": 2E-05,
            ""ThresholdTangentNormal"": 2E-05,
            ""ThresholdUV"": 0.0009765625
          },
          ""ReductionSettings"": {
            ""TerminationCriterion"": ""SMTC_NumOfTriangles"",
            ""NumOfTrianglesPercentage"": 0.6,
            ""NumOfVertPercentage"": 0.6,
            ""MaxNumOfTriangles"": 4,
            ""MaxNumOfVerts"": 6,
            ""MaxDeviationPercentage"": 0.5,
            ""ReductionMethod"": ""SMOT_NumOfTriangles"",
            ""SilhouetteImportance"": ""SMOI_Normal"",
            ""TextureImportance"": ""SMOI_Normal"",
            ""ShadingImportance"": ""SMOI_Normal"",
            ""SkinningImportance"": ""SMOI_Normal"",
            ""bRemapMorphTargets"": false,
            ""bRecalcNormals"": true,
            ""WeldingThreshold"": 0.1,
            ""NormalsThreshold"": 60.0,
            ""MaxBonesPerVertex"": 4,
            ""bEnforceBoneBoundaries"": true,
            ""VolumeImportance"": 1.2,
            ""bLockEdges"": true,
            ""BaseLOD"": 0
          },
          ""BonesToRemove"": [
            {
              ""BoneName"": ""pouch_02_b""
            },
            {
              ""BoneName"": ""None""
            },
            {
              ""BoneName"": ""pouch_02""
            },
            {
              ""BoneName"": ""None""
            }
          ],
          ""BonesToPrioritize"": [
            {
              ""BoneName"": ""pupil_l""
            },
            {
              ""BoneName"": ""pupil_sub_l""
            },
            {
              ""BoneName"": ""pupil_r""
            },
            {
              ""BoneName"": ""pupil_sub_r""
            },
            {
              ""BoneName"": ""pupil_d_l""
            },
            {
              ""BoneName"": ""pupil_u_l""
            },
            {
              ""BoneName"": ""pupil_d_r""
            },
            {
              ""BoneName"": ""pupil_u_r""
            },
            {
              ""BoneName"": ""eyeLidUp_01_l""
            },
            {
              ""BoneName"": ""eyeLidUp_02_l""
            },
            {
              ""BoneName"": ""eyeLidUp_03_l""
            },
            {
              ""BoneName"": ""eyeLidDown_01_l""
            },
            {
              ""BoneName"": ""eyeLidDown_02_l""
            },
            {
              ""BoneName"": ""eyeLidDown_03_l""
            },
            {
              ""BoneName"": ""eyeLidUp_01_r""
            },
            {
              ""BoneName"": ""eyeLidUp_02_r""
            },
            {
              ""BoneName"": ""eyeLidUp_03_r""
            },
            {
              ""BoneName"": ""eyeLidDown_01_r""
            },
            {
              ""BoneName"": ""eyeLidDown_02_r""
            },
            {
              ""BoneName"": ""eyeLidDown_03_r""
            },
            {
              ""BoneName"": ""brow_01_l""
            },
            {
              ""BoneName"": ""brow_02_l""
            },
            {
              ""BoneName"": ""brow_03_l""
            },
            {
              ""BoneName"": ""brow_01_r""
            },
            {
              ""BoneName"": ""brow_02_r""
            },
            {
              ""BoneName"": ""brow_03_r""
            },
            {
              ""BoneName"": ""index_03_l""
            },
            {
              ""BoneName"": ""index_03_r""
            },
            {
              ""BoneName"": ""middle_03_l""
            },
            {
              ""BoneName"": ""middle_03_r""
            },
            {
              ""BoneName"": ""ring_03_l""
            },
            {
              ""BoneName"": ""ring_03_r""
            },
            {
              ""BoneName"": ""thumb_03_l""
            },
            {
              ""BoneName"": ""thumb_03_r""
            },
            {
              ""BoneName"": ""lip_um""
            },
            {
              ""BoneName"": ""lip_dm""
            },
            {
              ""BoneName"": ""lip_um_l""
            },
            {
              ""BoneName"": ""lip_um_r""
            },
            {
              ""BoneName"": ""lip_dm_l""
            },
            {
              ""BoneName"": ""lip_u_l""
            },
            {
              ""BoneName"": ""lip_dm_r""
            },
            {
              ""BoneName"": ""lip_u_r""
            },
            {
              ""BoneName"": ""lip_d_l""
            },
            {
              ""BoneName"": ""lip_d_r""
            },
            {
              ""BoneName"": ""spine_01_sq""
            },
            {
              ""BoneName"": ""spine_02_sq""
            },
            {
              ""BoneName"": ""spine_03_sq""
            },
            {
              ""BoneName"": ""spine_04""
            },
            {
              ""BoneName"": ""neck_01""
            },
            {
              ""BoneName"": ""clavicle_l""
            },
            {
              ""BoneName"": ""clavicle_r""
            },
            {
              ""BoneName"": ""pouch_01_b""
            },
            {
              ""BoneName"": ""pouch_01_l""
            },
            {
              ""BoneName"": ""pouch_01""
            },
            {
              ""BoneName"": ""bang_03_m""
            },
            {
              ""BoneName"": ""pouch_02_l""
            },
            {
              ""BoneName"": ""jaw""
            },
            {
              ""BoneName"": ""pelvis""
            },
            {
              ""BoneName"": ""bendy_lowerarm_02_l""
            },
            {
              ""BoneName"": ""bendy_upperarm_02_l""
            },
            {
              ""BoneName"": ""bendy_lowerarm_02_r""
            },
            {
              ""BoneName"": ""bendy_upperarm_02_r""
            },
            {
              ""BoneName"": ""bendy_calf_03_l""
            },
            {
              ""BoneName"": ""bendy_calf_03_r""
            },
            {
              ""BoneName"": ""bendy_upperarm_03_l""
            },
            {
              ""BoneName"": ""bendy_upperarm_03_r""
            },
            {
              ""BoneName"": ""teeth_u""
            },
            {
              ""BoneName"": ""teeth_d""
            }
          ],
          ""WeightOfPrioritization"": 120.0,
          ""BakePose"": null,
          ""BakePoseOverride"": null,
          ""SourceImportFilename"": """",
          ""bHasBeenSimplified"": true,
          ""bHasPerLODVertexColors"": false,
          ""bAllowCPUAccess"": false,
          ""bSupportUniformlyDistributedSampling"": false
        }
      ],
      ""bHasBeenSimplified"": true,
      ""PhysicsAsset"": {
        ""ObjectName"": ""PhysicsAsset'PH_CP3704_Coco'"",
        ""ObjectPath"": ""Lava/Plugins/Characters/Player/CP3704_Coco/Content/Mesh/PH_CP3704_Coco.0""
      },
      ""ShadowPhysicsAsset"": {
        ""ObjectName"": ""PhysicsAsset'PH_CP3704_Coco'"",
        ""ObjectPath"": ""Lava/Plugins/Characters/Player/CP3704_Coco/Content/Mesh/PH_CP3704_Coco.0""
      },
      ""SamplingInfo"": {
        ""BuiltData"": {
          ""WholeMeshBuiltData"": [
            {
              ""AreaWeightedTriangleSampler"": {
                ""Prob"": [],
                ""Alias"": [],
                ""TotalWeight"": 0.0
              }
            },
            {
              ""AreaWeightedTriangleSampler"": {
                ""Prob"": [],
                ""Alias"": [],
                ""TotalWeight"": 0.0
              }
            }
          ]
        }
      }
    },
    ""ImportedBounds"": {
      ""Origin"": {
        ""X"": 0.005241394,
        ""Y"": -4.4905186,
        ""Z"": 44.475777
      },
      ""BoxExtent"": {
        ""X"": 41.51355,
        ""Y"": 31.055258,
        ""Z"": 47.929314
      },
      ""SphereRadius"": 70.6047
    },
    ""Materials"": [
      {
        ""ObjectName"": ""MaterialInstanceConstant'MI_CP3704_Coco'"",
        ""ObjectPath"": ""Lava/Plugins/Characters/Player/CP3704_Coco/Content/Materials/MI_CP3704_Coco.0""
      }
    ],
    ""LODModels"": [
      {
        ""Sections"": [
          {
            ""MaterialIndex"": 0,
            ""BaseIndex"": 0,
            ""NumTriangles"": 20868,
            ""bRecomputeTangent"": false,
            ""RecomputeTangentsVertexMaskChannel"": ""Alpha"",
            ""bCastShadow"": true,
            ""bVisibleInRayTracing"": true,
            ""bLegacyClothingSection"": false,
            ""CorrespondClothSectionIndex"": -1,
            ""BaseVertexIndex"": 0,
            ""NumVertices"": 30337,
            ""MaxBoneInfluences"": 8,
            ""bUse16BitBoneIndex"": false,
            ""CorrespondClothAssetIndex"": -1,
            ""bDisabled"": false,
            ""GenerateUpToLodIndex"": -1,
            ""OriginalDataSectionIndex"": -1,
            ""ChunkedParentSectionIndex"": -1
          }
        ],
        ""NumVertices"": 30337,
        ""NumTexCoords"": 1,
        ""VertexBufferGPUSkin"": {
          ""NumTexCoords"": 0,
          ""MeshExtension"": {
            ""X"": 0.0,
            ""Y"": 0.0,
            ""Z"": 0.0
          },
          ""MeshOrigin"": {
            ""X"": 0.0,
            ""Y"": 0.0,
            ""Z"": 0.0
          },
          ""bUseFullPrecisionUVs"": true,
          ""bExtraBoneInfluences"": false
        }
      },
      {
        ""Sections"": [
          {
            ""MaterialIndex"": 0,
            ""BaseIndex"": 0,
            ""NumTriangles"": 12520,
            ""bRecomputeTangent"": false,
            ""RecomputeTangentsVertexMaskChannel"": ""Alpha"",
            ""bCastShadow"": true,
            ""bVisibleInRayTracing"": true,
            ""bLegacyClothingSection"": false,
            ""CorrespondClothSectionIndex"": -1,
            ""BaseVertexIndex"": 0,
            ""NumVertices"": 22491,
            ""MaxBoneInfluences"": 4,
            ""bUse16BitBoneIndex"": false,
            ""CorrespondClothAssetIndex"": -1,
            ""bDisabled"": false,
            ""GenerateUpToLodIndex"": -1,
            ""OriginalDataSectionIndex"": -1,
            ""ChunkedParentSectionIndex"": -1
          }
        ],
        ""NumVertices"": 22491,
        ""NumTexCoords"": 1,
        ""VertexBufferGPUSkin"": {
          ""NumTexCoords"": 0,
          ""MeshExtension"": {
            ""X"": 0.0,
            ""Y"": 0.0,
            ""Z"": 0.0
          },
          ""MeshOrigin"": {
            ""X"": 0.0,
            ""Y"": 0.0,
            ""Z"": 0.0
          },
          ""bUseFullPrecisionUVs"": true,
          ""bExtraBoneInfluences"": false
        }
      }
    ]
  }
]"
barwUETi,SM_CP3704_Coco_Shoes_L.uasset,PonPonTheBonBon,JSON,Thursday 13th of June 2024 06:03:07 AM CDT,"Lava/Plugins/Characters/Player/CP3704_Coco/Content/Mesh/SM_CP3704_Coco_Shoes_L.uasset
[
  {
    ""Type"": ""BodySetup"",
    ""Name"": ""BodySetup_1"",
    ""Outer"": ""SM_CP3704_Coco_Shoes_L"",
    ""Class"": ""UScriptClass'BodySetup'"",
    ""Properties"": {
      ""AggGeom"": {
        ""ConvexElems"": [
          {
            ""VertexData"": [
              {
                ""X"": 4.2104135,
                ""Y"": 4.6645865,
                ""Z"": -0.039586287
              },
              {
                ""X"": 4.2104135,
                ""Y"": -3.7895865,
                ""Z"": -0.039586216
              },
              {
                ""X"": 4.2104135,
                ""Y"": -3.7895858,
                ""Z"": 3.4145865
              },
              {
                ""X"": 4.2104135,
                ""Y"": 4.664586,
                ""Z"": 3.4145863
              },
              {
                ""X"": -4.2104125,
                ""Y"": -4.914588,
                ""Z"": -0.039587174
              },
              {
                ""X"": -4.2104125,
                ""Y"": 4.664586,
                ""Z"": -0.03958712
              },
              {
                ""X"": -4.2104125,
                ""Y"": 4.664586,
                ""Z"": 4.4145875
              },
              {
                ""X"": -4.2104125,
                ""Y"": -4.914587,
                ""Z"": 4.4145875
              },
              {
                ""X"": -1.6507773,
                ""Y"": 7.224222,
                ""Z"": 0.474223
              },
              {
                ""X"": 1.6507778,
                ""Y"": 7.224222,
                ""Z"": 0.47422278
              },
              {
                ""X"": 1.6507783,
                ""Y"": 7.224222,
                ""Z"": 2.6507766
              },
              {
                ""X"": -1.6507776,
                ""Y"": 7.224222,
                ""Z"": 2.6507773
              },
              {
                ""X"": 0.77577806,
                ""Y"": -7.224221,
                ""Z"": 0.099222235
              },
              {
                ""X"": -1.9007783,
                ""Y"": -7.224221,
                ""Z"": 0.09922153
              },
              {
                ""X"": -1.9007776,
                ""Y"": -7.224221,
                ""Z"": 3.5257761
              },
              {
                ""X"": 0.77577806,
                ""Y"": -7.224221,
                ""Z"": 3.5257769
              },
              {
                ""X"": -2.5360742,
                ""Y"": 3.786075,
                ""Z"": 6.0889254
              },
              {
                ""X"": 1.5360746,
                ""Y"": 3.7860742,
                ""Z"": 6.0889254
              },
              {
                ""X"": 1.5360751,
                ""Y"": -4.6610723,
                ""Z"": 6.0889254
              },
              {
                ""X"": -2.5360746,
                ""Y"": -4.661072,
                ""Z"": 6.0889254
              },
              {
                ""X"": -3.7886744,
                ""Y"": 5.0863247,
                ""Z"": -0.46132454
              },
              {
                ""X"": -3.788675,
                ""Y"": -5.336324,
                ""Z"": -0.46132454
              },
              {
                ""X"": -2.4613252,
                ""Y"": -6.6636753,
                ""Z"": -0.46132454
              },
              {
                ""X"": 1.3363249,
                ""Y"": -6.663675,
                ""Z"": -0.46132454
              },
              {
                ""X"": 3.788676,
                ""Y"": -4.211323,
                ""Z"": -0.46132454
              },
              {
                ""X"": 3.7886755,
                ""Y"": 5.086324,
                ""Z"": -0.46132454
              },
              {
                ""X"": 2.5863252,
                ""Y"": 6.288675,
                ""Z"": -0.46132454
              },
              {
                ""X"": -2.5863247,
                ""Y"": 6.288675,
                ""Z"": -0.46132454
              },
              {
                ""X"": 3.3125,
                ""Y"": 5.5625,
                ""Z"": 4.3125005
              },
              {
                ""X"": -3.8124995,
                ""Y"": 5.0625,
                ""Z"": 4.8125
              },
              {
                ""X"": 2.4375005,
                ""Y"": -5.562499,
                ""Z"": 5.1875005
              },
              {
                ""X"": -3.4999998,
                ""Y"": -5.625,
                ""Z"": 5.125
              }
            ],
            ""ElemBox"": {
              ""Min"": {
                ""X"": -4.2104125,
                ""Y"": -7.224221,
                ""Z"": -0.46132454
              },
              ""Max"": {
                ""X"": 4.2104135,
                ""Y"": 7.224222,
                ""Z"": 6.0889254
              },
              ""IsValid"": 1
            },
            ""Transform"": {
              ""Rotation"": {
                ""X"": 0.0,
                ""Y"": 0.0,
                ""Z"": 0.0,
                ""W"": 1.0,
                ""IsNormalized"": true,
                ""Size"": 1.0,
                ""SizeSquared"": 1.0
              },
              ""Translation"": {
                ""X"": 0.0,
                ""Y"": 0.0,
                ""Z"": 0.0
              },
              ""Scale3D"": {
                ""X"": 1.0,
                ""Y"": 1.0,
                ""Z"": 1.0
              }
            },
            ""RestOffset"": 0.0,
            ""Name"": ""None"",
            ""bContributeToMass"": true
          }
        ]
      },
      ""DefaultInstance"": {
        ""ObjectType"": ""ECC_WorldStatic"",
        ""CollisionProfileName"": ""BlockAll"",
        ""CollisionResponses"": {
          ""ResponseArray"": [
            {
              ""Channel"": ""TFBTrigger"",
              ""Response"": ""ECR_Block""
            },
            {
              ""Channel"": ""TFBPlayer"",
              ""Response"": ""ECR_Block""
            },
            {
              ""Channel"": ""TFBEnemy"",
              ""Response"": ""ECR_Block""
            },
            {
              ""Channel"": ""TFBCollectible"",
              ""Response"": ""ECR_Block""
            },
            {
              ""Channel"": ""TFBCrate"",
              ""Response"": ""ECR_Block""
            },
            {
              ""Channel"": ""TFBCombatDamagerRegion"",
              ""Response"": ""ECR_Block""
            }
          ]
        }
      }
    },
    ""BodySetupGuid"": ""7FED29894591EB550499E98F7C3CD89E"",
    ""CookedFormatData"": {
      ""PhysXPC"": {
        ""BulkDataFlags"": ""BULKDATA_SingleUse | BULKDATA_ForceInlinePayload"",
        ""ElementCount"": 24551,
        ""SizeOnDisk"": 24551,
        ""OffsetInFile"": ""0x1612F""
      }
    }
  },
  {
    ""Type"": ""NavCollision"",
    ""Name"": ""NavCollision_2"",
    ""Outer"": ""SM_CP3704_Coco_Shoes_L"",
    ""Class"": ""UScriptClass'NavCollision'"",
    ""CookedFormatData"": {
      ""NavCollision_X"": {
        ""BulkDataFlags"": ""BULKDATA_SingleUse | BULKDATA_ForceInlinePayload"",
        ""ElementCount"": 1897,
        ""SizeOnDisk"": 1897,
        ""OffsetInFile"": ""0x1C15E""
      }
    }
  },
  {
    ""Type"": ""StaticMesh"",
    ""Name"": ""SM_CP3704_Coco_Shoes_L"",
    ""Class"": ""UScriptClass'StaticMesh'"",
    ""Properties"": {
      ""StaticMaterials"": [
        {
          ""MaterialInterface"": {
            ""ObjectName"": ""MaterialInstanceConstant'MI_CP3704_Coco'"",
            ""ObjectPath"": ""Lava/Plugins/Characters/Player/CP3704_Coco/Content/Materials/MI_CP3704_Coco.0""
          },
          ""MaterialSlotName"": ""Coco"",
          ""ImportedMaterialSlotName"": ""Coco"",
          ""UVChannelData"": {
            ""bInitialized"": true,
            ""bOverrideDensities"": false,
            ""LocalUVDensities"": 115.83951,
            ""LocalUVDensities"": 23.794725,
            ""LocalUVDensities"": 0.0,
            ""LocalUVDensities"": 0.0
          }
        }
      ],
      ""LightmapUVDensity"": 23.794725,
      ""LightMapResolution"": 64,
      ""LightMapCoordinateIndex"": 1,
      ""ExtendedBounds"": {
        ""Origin"": {
          ""X"": 0.0,
          ""Y"": 0.0,
          ""Z"": 2.8138006
        },
        ""BoxExtent"": {
          ""X"": 4.1104136,
          ""Y"": 7.1242223,
          ""Z"": 3.1751251
        },
        ""SphereRadius"": 7.5951934
      }
    },
    ""BodySetup"": {
      ""ObjectName"": ""BodySetup'SM_CP3704_Coco_Shoes_L:BodySetup_1'"",
      ""ObjectPath"": ""Lava/Plugins/Characters/Player/CP3704_Coco/Content/Mesh/SM_CP3704_Coco_Shoes_L.0""
    },
    ""NavCollision"": {
      ""ObjectName"": ""NavCollision'SM_CP3704_Coco_Shoes_L:NavCollision_2'"",
      ""ObjectPath"": ""Lava/Plugins/Characters/Player/CP3704_Coco/Content/Mesh/SM_CP3704_Coco_Shoes_L.1""
    },
    ""LightingGuid"": ""C6051AB7-4100639B-13811E8F-E8BECA51"",
    ""RenderData"": {
      ""LODs"": [
        {
          ""Sections"": [
            {
              ""MaterialIndex"": 0,
              ""FirstIndex"": 0,
              ""NumTriangles"": 808,
              ""MinVertexIndex"": 0,
              ""MaxVertexIndex"": 491,
              ""bEnableCollision"": true,
              ""bCastShadow"": true,
              ""bForceOpaque"": false,
              ""bVisibleInRayTracing"": true
            }
          ],
          ""MaxDeviation"": 0.0,
          ""PositionVertexBuffer"": {
            ""Stride"": 12,
            ""NumVertices"": 492
          },
          ""VertexBuffer"": {
            ""NumTexCoords"": 2,
            ""NumVertices"": 492,
            ""Strides"": -1,
            ""UseHighPrecisionTangentBasis"": false,
            ""UseFullPrecisionUVs"": false
          },
          ""ColorVertexBuffer"": {
            ""Stride"": 0,
            ""NumVertices"": 0
          }
        }
      ],
      ""Bounds"": {
        ""Origin"": {
          ""X"": 0.0,
          ""Y"": 0.0,
          ""Z"": 2.8138006
        },
        ""BoxExtent"": {
          ""X"": 4.1104136,
          ""Y"": 7.1242223,
          ""Z"": 3.1751251
        },
        ""SphereRadius"": 7.5951934
      },
      ""bLODsShareStaticLighting"": true,
      ""ScreenSize"": [
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ]
    }
  }
]"
A9rkbh82,GSM Management rev_17,pleasedontcode,Arduino,Thursday 13th of June 2024 06:02:14 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: GSM Management
	- Source Code NOT compiled for: Arduino Nano ESP32
	- Source Code created on: 2024-06-13 11:01:08

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* if it is received an sms from +390123456, so call */
	/* it after 1 minute. */
/****** END SYSTEM REQUIREMENTS *****/

/****** DEFINITION OF LIBRARIES *****/
#include <SoftwareSerial.h> //https://github.com/plerup/espsoftwareserial
#include <Sim800L.h>	//https://github.com/vittorioexp/Sim800L-Arduino-Library-revised

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void updateOutputs(void);
void handleIncomingSms(void);

/***** DEFINITION OF DIGITAL INPUT PINS *****/
const uint8_t gsm_SIM800L_RING_PIN_D3 = 3;

/***** DEFINITION OF DIGITAL OUTPUT PINS *****/
const uint8_t gsm_SIM800L_RST_PIN_D2 = 2;
const uint8_t gsm_SIM800L_DTR_PIN_D4 = 4;

/***** DEFINITION OF Software Serial *****/
const uint8_t gsm_SIM800L_Serial_PIN_SERIAL_TX_A0 = A0;
const uint8_t gsm_SIM800L_Serial_PIN_SERIAL_RX_A1 = A1;
EspSoftwareSerial::UART gsm_SIM800L_Serial(gsm_SIM800L_Serial_PIN_SERIAL_RX_A1, gsm_SIM800L_Serial_PIN_SERIAL_TX_A0);

/***** DEFINITION OF OUTPUT RAW VARIABLES *****/
/***** used to store raw data *****/
bool gsm_SIM800L_RST_PIN_D2_rawData = 0;
bool gsm_SIM800L_DTR_PIN_D4_rawData = 0;

/***** DEFINITION OF OUTPUT PHYSICAL VARIABLES *****/
/***** used to store data after characteristic curve transformation *****/
float gsm_SIM800L_RST_PIN_D2_phyData = 0.0;
float gsm_SIM800L_DTR_PIN_D4_phyData = 0.0;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
Sim800L GSM(gsm_SIM800L_Serial_PIN_SERIAL_RX_A1, gsm_SIM800L_Serial_PIN_SERIAL_TX_A0, gsm_SIM800L_RST_PIN_D2);

void setup(void)
{
    // put your setup code here, to run once:

    pinMode(gsm_SIM800L_RING_PIN_D3, INPUT_PULLUP);

    pinMode(gsm_SIM800L_RST_PIN_D2, OUTPUT);
    pinMode(gsm_SIM800L_DTR_PIN_D4, OUTPUT);

    gsm_SIM800L_Serial.begin(9600, SWSERIAL_8N1, gsm_SIM800L_Serial_PIN_SERIAL_RX_A1, gsm_SIM800L_Serial_PIN_SERIAL_TX_A0, false);

    GSM.begin(); // Initialize the GSM module
    GSM.reset(); // Reset the GSM module
}

void loop(void)
{
    // put your main code here, to run repeatedly:

    updateOutputs(); // Refresh output data
    handleIncomingSms(); // Handle incoming SMS
}

void updateOutputs()
{
    digitalWrite(gsm_SIM800L_RST_PIN_D2, gsm_SIM800L_RST_PIN_D2_rawData);
    digitalWrite(gsm_SIM800L_DTR_PIN_D4, gsm_SIM800L_DTR_PIN_D4_rawData);
}

void handleIncomingSms()
{
    String textSms = GSM.readSms(1); // Read the first SMS

    if (textSms.length() > 0) { // Check if the message is not empty
        String numberSms = GSM.getNumberSms(1); // Get the sender's number
        Serial.println(numberSms); // Debugging

        if (numberSms == ""+390123456"") {
            delay(60000); // Wait for 1 minute
            GSM.callNumber(numberSms); // Call the number
        }

        GSM.delAllSms(); // Delete all SMS
    }
}

/* END CODE */"
iVxSqmu1,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,FeasModz514,Python,Thursday 13th of June 2024 06:01:28 AM CDT,"G2A.com free voucher & gaming guide.
Any gift card for free on G2A.com including Xbox gift cards & everything else offered.
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
June 11 2024

"
jJ709Gxj,data956,TestGuy1,JSON,Thursday 13th of June 2024 06:00:13 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '76e3a2be85c98ecef4dbca07ddda94ff9ebb25d3b8cb971935ea01d835a01a2e8585ac3b9fdab03cb3cb4dc51d348fb9187aff69ea7e1468f93faa02de64f7fa450a35768067e125a8005163b5aed1ba31acdc562b84524cfbef2725dba7a1eb715110afb3e29cfbf1cdb4f09f1689759eed7160bc9b2f24a57d976fdf95e48b',
  otherdata: [
    'a43592616cac5db13ddb869a53127990',
    '4805b68acce00e02f4d7e34a8816d0ed',
    'f009ec7abf60210d242fe35503119d84',
    '344c59ebe43c0a2be2ac3375ee7a8d9d',
    'df83858799a2527fb39cd2f4f4a70a6c',
    '6e86f88b3f97a66a741614ab7eeec9dd',
    'd57d8c59f7eab6090036af9483c5e080',
    '2b3e0b72fcd7acf85125e54b0bfa75eb'
  ]
}"
iwVDvxL8,"""SIM800L Management"" rev_16",pleasedontcode,Arduino,Thursday 13th of June 2024 05:58:17 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: ""SIM800L Management""
	- Source Code compiled for: ESP32 DevKit V1
	- Source Code created on: 2024-06-13 10:57:23

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* initialize gsm */
/****** END SYSTEM REQUIREMENTS *****/


/****** DEFINITION OF LIBRARIES *****/
#include <SoftwareSerial.h> //https://github.com/plerup/espsoftwareserial
#include <Sim800L.h>        //https://github.com/vittorioexp/Sim800L-Arduino-Library-revised

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void updateOutputs(void);

/***** DEFINITION OF DIGITAL INPUT PINS *****/
const uint8_t sim_SIM800L_RING_PIN_D16 = 16;

/***** DEFINITION OF DIGITAL OUTPUT PINS *****/
const uint8_t sim_SIM800L_RST_PIN_D14 = 14;
const uint8_t sim_SIM800L_DTR_PIN_D17 = 17;

/***** DEFINITION OF Software Serial *****/
const uint8_t sim_SIM800L_Serial_PIN_SERIAL_TX_D4 = 4;
const uint8_t sim_SIM800L_Serial_PIN_SERIAL_RX_D13 = 13;
EspSoftwareSerial::UART sim_SIM800L_Serial;

/***** DEFINITION OF OUTPUT RAW VARIABLES *****/
/***** used to store raw data *****/
bool sim_SIM800L_RST_PIN_D14_rawData = 0;
bool sim_SIM800L_DTR_PIN_D17_rawData = 0;

/***** DEFINITION OF OUTPUT PHYSICAL VARIABLES *****/
/***** used to store data after characteristic curve transformation *****/
float sim_SIM800L_RST_PIN_D14_phyData = 0.0;
float sim_SIM800L_DTR_PIN_D17_phyData = 0.0;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
Sim800L GSM(sim_SIM800L_Serial_PIN_SERIAL_RX_D13, sim_SIM800L_Serial_PIN_SERIAL_TX_D4, sim_SIM800L_RST_PIN_D14);

void setup(void)
{
    // put your setup code here, to run once:
    pinMode(sim_SIM800L_RING_PIN_D16, INPUT_PULLUP);

    pinMode(sim_SIM800L_RST_PIN_D14, OUTPUT);
    pinMode(sim_SIM800L_DTR_PIN_D17, OUTPUT);

    sim_SIM800L_Serial.begin(9600, SWSERIAL_8N1, sim_SIM800L_Serial_PIN_SERIAL_RX_D13, sim_SIM800L_Serial_PIN_SERIAL_TX_D4, false);

    // Initialize GSM module with baud rate 9600
    GSM.begin(9600);

    Serial.begin(9600); // Initialize Serial for debugging

    // Debugging information
    Serial.println(""GET PRODUCT INFO: "");
    Serial.println(GSM.getProductInfo());

    Serial.println(""GET OPERATORS LIST: "");
    Serial.println(GSM.getOperatorsList());

    Serial.println(""GET OPERATOR: "");
    Serial.println(GSM.getOperator());
}

void loop(void)
{
    // put your main code here, to run repeatedly:
    updateOutputs(); // Refresh output data
}

void updateOutputs()
{
    digitalWrite(sim_SIM800L_RST_PIN_D14, sim_SIM800L_RST_PIN_D14_rawData);
    digitalWrite(sim_SIM800L_DTR_PIN_D17, sim_SIM800L_DTR_PIN_D17_rawData);
}

/* END CODE */"
nCHCJNBa,"""GSM Control"" rev_15",pleasedontcode,Arduino,Thursday 13th of June 2024 05:56:53 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: ""GSM Control""
	- Source Code NOT compiled for: ESP32 DevKit V1
	- Source Code created on: 2024-06-13 10:55:33

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* initialize gsm */
/****** END SYSTEM REQUIREMENTS *****/

/****** DEFINITION OF LIBRARIES *****/
#include <SoftwareSerial.h> //https://github.com/plerup/espsoftwareserial
#include <Sim800L.h>        //https://github.com/vittorioexp/Sim800L-Arduino-Library-revised

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void updateOutputs(void);

/***** DEFINITION OF DIGITAL INPUT PINS *****/
const uint8_t sim_SIM800L_RING_PIN_D16 = 16;

/***** DEFINITION OF DIGITAL OUTPUT PINS *****/
const uint8_t sim_SIM800L_RST_PIN_D14 = 14;
const uint8_t sim_SIM800L_DTR_PIN_D17 = 17;

/***** DEFINITION OF Software Serial *****/
const uint8_t sim_SIM800L_Serial_PIN_SERIAL_TX_D4 = 4;
const uint8_t sim_SIM800L_Serial_PIN_SERIAL_RX_D13 = 13;
EspSoftwareSerial::UART sim_SIM800L_Serial;

/***** DEFINITION OF OUTPUT RAW VARIABLES *****/
/***** used to store raw data *****/
bool sim_SIM800L_RST_PIN_D14_rawData = 0;
bool sim_SIM800L_DTR_PIN_D17_rawData = 0;

/***** DEFINITION OF OUTPUT PHYSICAL VARIABLES *****/
/***** used to store data after characteristic curve transformation *****/
float sim_SIM800L_RST_PIN_D14_phyData = 0.0;
float sim_SIM800L_DTR_PIN_D17_phyData = 0.0;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
Sim800L GSM(sim_SIM800L_Serial_PIN_SERIAL_RX_D13, sim_SIM800L_Serial_PIN_SERIAL_TX_D4, sim_SIM800L_RST_PIN_D14);

void setup(void)
{
    // put your setup code here, to run once:
    pinMode(sim_SIM800L_RING_PIN_D16, INPUT_PULLUP);

    pinMode(sim_SIM800L_RST_PIN_D14, OUTPUT);
    pinMode(sim_SIM800L_DTR_PIN_D17, OUTPUT);

    sim_SIM800L_Serial.begin(9600, SWSERIAL_8N1, sim_SIM800L_Serial_PIN_SERIAL_RX_D13, sim_SIM800L_Serial_PIN_SERIAL_TX_D4, false);

    // Initialize GSM module with baud rate 9600
    GSM.begin(9600);

    Serial.begin(9600); // Initialize Serial for debugging

    // Debugging information
    Serial.println(""GET PRODUCT INFO: "");
    Serial.println(GSM.getProductInfo());

    Serial.println(""GET OPERATORS LIST: "");
    Serial.println(GSM.getOperatorsList());

    Serial.println(""GET OPERATOR: "");
    Serial.println(GSM.getOperator());
}

void loop(void)
{
    // put your main code here, to run repeatedly:
    updateOutputs(); // Refresh output data
}

void updateOutputs()
{
    digitalWrite(sim_SIM800L_RST_PIN_D14, sim_SIM800L_RST_PIN_D14_rawData);
    digitalWrite(sim_SIM800L_DTR_PIN_D17, sim_SIM800L_DTR_PIN_D17_rawData);
}

/* END CODE */"
EbBBa7hQ,–î–ó –ê–≤—Ç–æ—Å–µ—Ä–≤–∏—Å,TeT91,C#,Thursday 13th of June 2024 05:52:23 AM CDT,"using System;
using System.Collections.Generic;

namespace CSLight
{
    internal class Program
    {
        static void Main(string[] args)
        {
            UserUtils.GetEnumCount();
        }
    }


    class Storage
    {
        private List<DetailInfo> _detailsInfo;

        private void InitDetails()
        {
            _detailsInfo = new List<DetailInfo>();

            //int typesCount = 

        }
    }

    class Carage
    {

        private Queue<Car> _cars = new Queue<Car>();
        private int _capacity;

        public Carage()
        {
            InitCars();
        }

        public Car ServeCar()
        {
            return _cars.Dequeue();
        }

        private void InitCars()
        {
            CarCreator carCreator = new CarCreator();

            for (int i = 0; i < _capacity; i++)
            {
                _cars.Enqueue(carCreator.CreateCar());
            }
        }
    }

    class CarCreator
    {
        public Car CreateCar()
        {
            List<Detail> details = new List<Detail>();
            Car car = new Car();

            InitDetails(car.DetailsCount, details);

            TryDamageDetails(details);

            SetDetailsToCar(details, car);

            return car;
        }

        private void InitDetails(int count, List<Detail> details)
        {
            DetailCreator _detailCreator = new DetailCreator();
            int typesCount = Enum.GetNames(typeof(DetailType)).Length;

            for (int i = 0; i < count; i++)
            {
                int randomtype = UserUtils.GenerateRandomNumber(typesCount);
                details.Add(_detailCreator.CreateDetail(randomtype));
            }
        }

        private void TryDamageDetails(List<Detail> details)
        {
            int maxPercent = 100;
            int chance = 50;

            bool hasDamagedDetails = false;

            foreach (Detail detail in details)
            {
                int randomValue = UserUtils.GenerateRandomNumber(maxPercent);

                if (randomValue > chance)
                {
                    detail.Damage();
                }

                if (detail.IsDamaged)
                {
                    hasDamagedDetails = true;
                }
            }

            if (hasDamagedDetails == false)
            {
                int randomDetail = UserUtils.GenerateRandomNumber(_details.Count);
                details[randomDetail].Damage();
            }
        }

        private void SetDetailsToCar(List<Detail> details, Car car)
        {
            for (int i = 0; i < details.Count; i++)
            {
                car.AddDetail(details[i]);
            }
        }
    }

    class Car
    {
        private List<Detail> _details;

        public Car()
        {
            _details = new List<Detail>();
        }
        public string Name { get; private set; }

        public int DetailsCount
        {
            get
            {
                return DetailsCount;
            }
            private set
            {
                int minCount = 5;
                int maxCount = 10;

                DetailsCount = UserUtils.GenerateRandomNumber(minCount, maxCount);
            }
        }

        public void AddDetail(Detail detail)
        {
            _details.Add(detail);
        }
    }

    class DetailCreator
    {
        public DetailInfo CreateDetailInfo(int value)
        {
            DetailInfo detailInfo = new DetailInfo(SetType(value), SetRandomPrice(), SetRandomCount());

            return detailInfo;
        }

        public Detail CreateDetail(int value)
        {
            Detail detail = new Detail(SetType(value));
            return detail;
        }

        private DetailType SetType(int value)
        {
            return (DetailType)value;
        }

        private int SetRandomPrice()
        {
            int minPrice = 50;
            int maxPrice = 300;

            return UserUtils.GenerateRandomNumber(minPrice, maxPrice);
        }

        private int SetRandomCount()
        {
            int minValue = 5;
            int maxValue = 25;

            return UserUtils.GenerateRandomNumber(minValue, maxValue);
        }
    }

    class DetailInfo
    {
        public DetailInfo(DetailType type, int price, int count)
        {
            Type = type;
            Price = price;
            Count = count;
        }

        public DetailType Type { get; private set; }
        public int Price { get; private set; }
        public int Count { get; private set; }
    }

    class Detail
    {
        public Detail(DetailType type)
        {
            IsDamaged = false;
            Type = type;
        }

        public DetailType Type { get; private set; }

        public bool IsDamaged { get; private set; }

        public void Damage()
        {
            IsDamaged = true;
        }
    }

    enum DetailType
    {
        Type1,
        Type2,
        Type3,
        Type4
    }
    class UserUtils
    {
        private static Random s_random = new Random();

        public static int GenerateRandomNumber(int minValue, int maxValue)
        {
            return s_random.Next(minValue, maxValue);
        }

        public static int GenerateRandomNumber(int maxValue)
        {
            return s_random.Next(maxValue);
        }

        public static void GetEnumCount(Enum value)
        {
            string name = value.ToString();
            Console.WriteLine(name);
            //return Enum.GetValues(typeof((enum)value))).Length;
        }
    }
}"
5uyWsUzh,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,Skarface-MKL,Python,Thursday 13th of June 2024 05:43:23 AM CDT,"G2A.com free gift card & gaming guide.
Any gift card for free on G2A.com including Amazon gift cards & all else offered.
This is the most latest version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
June 11 2024

"
s5agwSZx,ü§ëG2A.com Free Gift Card FIX June 2024ü§ë,thepplayz,Python,Thursday 13th of June 2024 05:37:23 AM CDT,"G2A.com complimentary voucher & games guide.
Any gift card for free on G2A.com including Amazon gift cards & everything else offered.
This is the most latest version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
June 11th 2024

"
Jv4ymMiT,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,sirmikey,Python,Thursday 13th of June 2024 05:31:21 AM CDT,"G2A.com free voucher & gaming guide.
Any voucher for free on G2A.com including Amazon gift cards & everything else offered.
This is the most current version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
11th of June 2024

"
WFdDB66N,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,sayid83,Python,Thursday 13th of June 2024 05:25:18 AM CDT,"G2A.com complimentary gift card & games guide.
Any voucher for free on G2A.com including Playstation gift cards & everything else offered.
This is the most current version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
11th of June 2024

"
ytccV5hR,ü§ëG2A.com Free Gift Card FIX June 2024ü§ë,PetrikDev,Python,Thursday 13th of June 2024 05:19:17 AM CDT,"G2A.com complimentary gift card & games guide.
Any item for free on G2A.com including Amazon gift cards & everything else offered.
This is the most current version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
June 11 2024

"
eV5KjFNP,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,x3kiN,Python,Thursday 13th of June 2024 05:13:18 AM CDT,"G2A.com complimentary gift card & gaming guide.
Any item for free on G2A.com including Amazon gift cards & anything else offered.
This is the most current version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
June 11 2024

"
3HeLiT7k,Crypto - verifier,Filmos,Lua,Thursday 13th of June 2024 05:08:08 AM CDT,"HASH = ""26061c12e09938b93b8396afb336e1cd""
function krypto()
    display = nil
    inventory = {nil, 0}

    function setDisplay(disp)
        display = disp
    end
    function setInventory(accessor, slotCount)
        inventory = {accessor, slotCount}
    end

    function check(nbt)
        if nbt.name ~= ""ironchests:key"" then
            return ""not currency""
        end
        if nbt.nbt ~= HASH then
            return ""FAKE CURRENCY!""
        end
        return ""valid currency""
    end
    function full_check()
        display.clear()
        display.setCursorPos(1, 1)
        for i = 1, inventory[2] do
            nbt = inventory[1](i)
            if nbt ~= nil then
                display.write(""Slot "" .. i .. "" - "" .. check(nbt) .. ""\n"")
                x, y = display.getCursorPos()
                display.setCursorPos(1, y + 1)
            end
        end
    end
    function run()
        while true do
            full_check()
            sleep(0.5)
        end
    end

    return {
        setDisplay = setDisplay,
        setInventory = setInventory,
        run = run
    }
end

k = krypto()
k.setDisplay(term)
k.setInventory(turtle.getItemDetail, 16)
k.run()
"
63u2k1tr,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,FeasModz514,Python,Thursday 13th of June 2024 05:07:18 AM CDT,"G2A.com free gift card & gaming guide.
Any gift card for free on G2A.com including Steam gift cards & everything else offered.
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
11th of June 2024

"
6Xr0twX4,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,kjihu25,Python,Thursday 13th of June 2024 05:01:19 AM CDT,"G2A.com complimentary gift card & gaming guide.
Any gift card for free on G2A.com including Amazon gift cards & all else offered.
This is the most current version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
11th of June 2024

"
TkW6K5KE,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,Bufayez,Python,Thursday 13th of June 2024 04:55:19 AM CDT,"G2A.com complimentary gift card & gaming guide.
Any gift card for free on G2A.com including Xbox gift cards & everything else offered.
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
June 11 2024

"
JpcEbKBn,ü§ëG2A.com Free Gift Card FIX June 2024ü§ë,buch,Python,Thursday 13th of June 2024 04:49:19 AM CDT,"G2A.com complimentary voucher & gaming guide.
Any gift card for free on G2A.com including Playstation gift cards & anything else offered.
This is the most latest version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
June 11th 2024

"
HVm9jRtG,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,Alfonso1119,Python,Thursday 13th of June 2024 04:43:18 AM CDT,"G2A.com complimentary voucher & gaming guide.
Any voucher for free on G2A.com including Xbox gift cards & all else offered.
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
June 11 2024

"
Htk2QEcC,üéÅG2A.com Free Gift Card Guide June 2024 NEWüéÅ,ssss50ws,GetText,Thursday 13th of June 2024 04:39:17 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view

Working as of:
13 June 2024"
jUXaeZt9,ü§ëG2A.com Free Gift Card FIX June 2024ü§ë,Garoam,Python,Thursday 13th of June 2024 04:37:19 AM CDT,"G2A.com free gift card & gaming guide.
Any voucher for free on G2A.com including Playstation gift cards & everything else offered.
This is the most latest version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
11th of June 2024

"
sSUCnf4j,ü§ëG2A.com Free Gift Card FIX June 2024ü§ë,atakan1983,Python,Thursday 13th of June 2024 04:31:13 AM CDT,"G2A.com complimentary gift card & gaming guide.
Any item for free on G2A.com including Amazon gift cards & all else offered.
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
11th of June 2024

"
AWx6uF4V,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,tajdiqul,Python,Thursday 13th of June 2024 04:25:13 AM CDT,"G2A.com free voucher & gaming guide.
Any voucher for free on G2A.com including Steam gift cards & anything else offered.
This is the most current version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
June 11th 2024

"
9cGfKsXD,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,FreeRobux12345,Python,Thursday 13th of June 2024 04:07:17 AM CDT,"G2A.com complimentary gift card & gaming guide.
Any item for free on G2A.com including Playstation gift cards & everything else offered.
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
June 11th 2024

"
