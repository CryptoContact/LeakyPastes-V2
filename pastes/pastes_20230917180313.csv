id,title,username,language,date,content
krYWrTBR,Horor_CPP3_Done,Neo_Feo,C,Sunday 17th of September 2023 12:59:30 PM CDT,"#include <stdio.h>
#include <stdlib.h>
#include <math.h>

int suma(int lenght, int height,int array [lenght][height]){
    if(height<2){
        printf(""\033[31m Nu exista  coloana cu numarul 2 \033[0m"");
        exit(-6);
    }
    int sum = 0;
    for(int i = 0; i<lenght;++i){
        sum += array[i][1];
    }
    return sum;
}

int produsul (int row, int col,int array [row][col]){
        if(col<2){
            printf(""\033[31m Nu exista  coloana cu numarul 2 \033[0m"");
            exit(-6);
        }
        int prod = 1;
        for(int i = 0; i<row;++i){
            prod *= array[i][1];
        }
        return prod;
}

void input_into_Array(int row,int col, int array[row][col]){
        for (int i = 0; i < row; i++){
            printf(""Introduceti elementele randului %i\n"",i+1);
            for(int j = 0; j < col; j++){
                printf(""%i : "", j+1);
                scanf(""%i"",&array[i][j]);
            }
        }
}

int main()
{
    int row, col;

    printf(""Introduceti numarul de coloane: "");
    scanf(""%i"",&col);
    printf(""Introduceti numarul de randuri: "");
    scanf(""%i"",&row);

    row = abs(row);
    col = abs(col);

    int i [row][col];

    input_into_Array(row,col,i);

    printf(""suma este: %i\n"",suma(row,col,i));
    printf(""produsul este: %i"",produsul(row,col,i));
    return 0;
}
"
MRyZ37y1,Untitled,skaram,Python,Sunday 17th of September 2023 12:54:48 PM CDT,"n = int(input())
s = input()
x = int(s, 2)
g = 0
for i in s:
    if i == '1':
        g += 1
if g == 1:
    for i in s:
        if i == '1':
            print(0)
        else:
            print(1)
    exit(0)
if g == 0:
    print(""1\n"" * n)
    exit(0)
a = x % (g - 1)
ap = 1
c = x % (g + 1)
cp = 1
ans = []
shit = [0]
for i in range(1, 200100):
    shit.append(0)
    k = 1
    while k <= i:
        if i & k:
            shit[i] += 1
        k *= 2
for i in range(n - 1, -1, -1):
    if s[i] == '0':
        b = (c + cp) % (g + 1)
    else:
        b = (a - ap) % (g - 1)
    cnt = 1
    while True:
        h = shit[b]
        if h == 0:
            ans.append(cnt)
            break
        cnt += 1
        b %= h
    ap = 2 * ap % (g - 1)
    cp = 2 * cp % (g + 1)
for i in range(len(ans) - 1, -1, -1):
    print(ans[i])
"
biVJmKpw,SumSeconds,MladenKarachanov,Java,Sunday 17th of September 2023 12:54:00 PM CDT,"package programmingBasics;

import java.util.Scanner;

public class SumSeconds {
    public static void main(String[] args) {
        Scanner scanner= new Scanner(System.in);
        int firstTime=Integer.parseInt(scanner.nextLine());
        int secondTime=Integer.parseInt(scanner.nextLine());
        int treeTime=Integer.parseInt(scanner.nextLine());
        int totaltime=firstTime+secondTime+treeTime;
        int minutes=totaltime/60;
        int second=totaltime % 60;
        if (second<10) {
            System.out.printf(""%d:0%d %n"", minutes, second);
        }else{
            System.out.printf("" %d:%d"",minutes,second);
        }
    }
}
"
cPSZ8LVc,Easter Bakery,Spocoman,C++,Sunday 17th of September 2023 12:50:14 PM CDT,"#include <iostream>
#include <cmath>

using namespace std;

int main() {
    double flourKg, flourPrice, sugarKg, eggPack, yeast;
    cin >> flourKg >> flourPrice >> sugarKg >> eggPack >> yeast;

    double flourTotal = flourKg * flourPrice;
    double sugarTotal = flourKg * sugarKg * 0.75;
    double eggPackTotal = flourKg * eggPack * 1.1;
    double yeastTotal = flourKg * 0.75 * yeast * 0.2;
    double sum = flourTotal + sugarTotal + eggPackTotal + yeastTotal;
    
    printf(""%.2f\n"", sum);

    return 0;
}"
45eFGf2v,snowzybot,coinwalk,JavaScript,Sunday 17th of September 2023 12:46:43 PM CDT,"var measly = parseFloat(document.getElementById('pct_balance').value);
var baby = Number((measly/80).toFixed(8));
var moon = baby;
var taget = (measly*2000);
var tens = (baby*10);
var sevens = (baby*6.5);
var eights = (baby*7.5);
var threes = (baby*3.5);
var nobbolance = 0;
var couunt = 0;
var baboon = false;
var high = measly;  
var foilhat = 0;
var olzerer = measly;
var upper = 6.9;
var downer = 2.9;
var zoom = ((Math.floor(measly/tens))*tens);
var olly = (((Math.floor(measly/tens))*tens)-tens);
var muel = parseFloat(document.getElementById('pct_balance').value);
var zuel = parseFloat(document.getElementById('pct_balance').value);
var bart = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var lisa = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
 
function get(){
var look = (((zuel+moon)*1).toFixed(8));
var mean = (((zuel-moon)*1).toFixed(8));
muel = parseFloat(document.getElementById('pct_balance').value);
if ((look!=muel)&&(mean!=muel)&&(zuel!=muel)){
console.log(""hacked"");
return;
}else{
zuel = parseFloat(document.getElementById('pct_balance').value);
}
if (zuel>=(zoom+(moon*upper))) {
    moon = Number((moon*2).toFixed(8));
    upper = 4.9;
    downer = 4.9;
    couunt = couunt+1;
    zoom = parseFloat(zuel);
}
if (zuel<=(zoom-(moon*downer))) {
    moon = Number((moon*2).toFixed(8));
    upper = 4.9;
    downer = 4.9;
    couunt = couunt+1;
    zoom = parseFloat(zuel);
}
if ((couunt>=1)&&(zuel<olly)&&(zuel<(((Math.floor(zuel/tens))*tens)+threes))){
    moon = baby;
    couunt = 0;
    upper = 2.9;
    downer = 6.9;
    zoom = ((Math.floor((parseFloat(zuel))/tens))*tens);
    nobbolance = parseFloat(zuel);
    olzerer = parseFloat(zuel); 
	olly =  (((Math.floor((parseFloat(zuel))/tens))*tens)-tens);
}
if (zuel>=(olly+tens)){
	olly =  (((Math.floor((parseFloat(zuel))/tens))*tens)-tens);
}
if (zuel>olzerer){
  olzerer = parseFloat(zuel); 
  }
if ((zuel>=olzerer)&&(couunt>=3)&&(zuel<(((Math.floor(zuel/tens))*tens)+sevens))){
    moon = baby;
    couunt = 0;
    nobbolance = 0;
    upper = 2.9;
    downer = 6.9;
    zoom = ((Math.floor((parseFloat(zuel))/tens))*tens);
    olzerer = parseFloat(zuel); 
	olly =  (((Math.floor((parseFloat(zuel))/tens))*tens)-tens);
}
    if (zuel >= taget) {
        console.log(""winner winner chicken dinner"");
        return;
    }     
    lisa = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
     if ((lisa > bart)&&(baboon)) {
var funeral = Number((muel - measly).toFixed(8));
console.log(""profit"");
console.log(funeral); 
      baboon = false; 
       bart = parseFloat(lisa);
    }
    if ((lisa == bart)&&(!baboon)) { 
        baboon = true; 
        $('#pct_chance').val(49.5);
        $('#pct_bet').val(((moon*1).toFixed(8)));
        $('#a_lo').click();
    }
    setTimeout(() => get(), 1);
}
get();"
hy56kuRH,open closed ex,STANAANDREY,Java,Sunday 17th of September 2023 12:46:21 PM CDT,"
class Footballer {
    String name;
    Role role;

    public Footballer(String name, Role role) {
        this.name = name;
        this.role = role;
    }

    void executeMove() {
        this.role.executeMove();
    }
}

interface Role {
    void executeMove();
}

class Gatekeeper implements Role {
    @Override
    public void executeMove() {
        System.out.println(""dive"");
    }
}

class Defender implements Role {
    @Override
    public void executeMove() {
        System.out.println(""dispossess"");
    }
}

class Midfielder implements Role {
    @Override
    public void executeMove() {
        System.out.println(""pass"");
    }
}

class Striker implements Role {
    @Override
    public void executeMove() {
        System.out.println(""shoot"");
    }
}

public class Main {

    public static void main(String[] args) {
        Footballer f1 = new Footballer(""Tatarusanu"", new Gatekeeper());
        Footballer f2 = new Footballer(""Ronaldo"", new Striker());
        f1.executeMove();
        f2.executeMove();
    }
}
"
kB7xBsUj,ComputerCraft Weather,ozraru,Lua,Sunday 17th of September 2023 12:21:44 PM CDT,"top_monitor = peripheral.wrap(""top"")

function requestWeather()
    print(""request sent"")
    http.request(""http://wttr.in/tokyo?AnT"")
end

function recieveWeather(handle)
--    handle = http.get(""http://wttr.in/tokyo?AnT"")
    print(""updated weather"")
    top_monitor.setTextScale(1)
    top_monitor.setBackgroundColor(colors.white)
    top_monitor.setTextColor(colors.lightBlue)
    top_monitor.clear()
    lineNum = 1
    while true do
        top_monitor.setCursorPos(1, lineNum)
        line = handle.readLine()
        if line == nil then
            break
        end
        top_monitor.write(line)
        lineNum = lineNum + 1
    end
end

left_monitor = peripheral.wrap(""left"")
last_update = 0

function updateClock()
    if last_update < os.day() then
        requestWeather()
        last_update = os.day()
    end
    left_monitor.clear()
    left_monitor.setTextScale(1)
    left_monitor.setCursorPos(1,1)
    left_monitor.write(""Day ""..os.day())
    left_monitor.setCursorPos(1,2)
    hour = math.floor(os.time())
    minute = math.floor((os.time() - hour) * 60)
    left_monitor.write(string.format(""%02d:%02d"",hour,minute))
end

os.startTimer(0.1)
while true do
    event, data1, data2 = os.pullEvent()
    if event == ""timer"" then
        updateClock()
        os.startTimer(0.1)
    elseif event == ""http_success"" then
        recieveWeather(data2)
    end
end
"
Ey3bq7LP,snowzybot,coinwalk,JavaScript,Sunday 17th of September 2023 12:12:37 PM CDT,"var measly = parseFloat(document.getElementById('pct_balance').value);
var baby = Number((measly/800).toFixed(8));
var moon = baby;
var taget = (measly*2000);
var tens = (baby*10);
var sevens = (baby*6.5);
var eights = (baby*7.5);
var threes = (baby*3.5);
var nobbolance = 0;
var couunt = 0;
var baboon = false;
var high = measly;  
var foilhat = 0;
var olzerer = measly;
var olly =  ((Math.floor(measly/tens))*tens);
var muel = parseFloat(document.getElementById('pct_balance').value);
var zuel = parseFloat(document.getElementById('pct_balance').value);
var bart = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var lisa = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
 
function get(){
var look = (((zuel+moon)*1).toFixed(8));
var mean = (((zuel-moon)*1).toFixed(8));
muel = parseFloat(document.getElementById('pct_balance').value);
if ((look!=muel)&&(mean!=muel)&&(zuel!=muel)){
console.log(""hacked"");
return;
}else{
zuel = parseFloat(document.getElementById('pct_balance').value);
}
if ((zuel>(((Math.floor(zuel/tens))*tens)+sevens))&&(zuel<(((Math.floor(zuel/tens))*tens)+eights))&&(zuel>nobbolance)){
    moon = Number((moon*2).toFixed(8));
    couunt = couunt+1;
    nobbolance = parseFloat(zuel);
}
if ((zuel>(((Math.floor(zuel/tens))*tens)+sevens))&&(zuel<(((Math.floor(zuel/tens))*tens)+eights))&&(zuel<nobbolance)){
    moon = Number((moon*2).toFixed(8));
    couunt = couunt+1;
    nobbolance = parseFloat(zuel);
}  
if ((couunt>=1)&&(zuel<olly)&&(zuel<(((Math.floor(zuel/tens))*tens)+threes))){
    moon = baby;
    couunt = 0;
    nobbolance = parseFloat(zuel);
    olzerer = parseFloat(zuel); 
	olly =  ((Math.floor((parseFloat(zuel))/tens))*tens);
}
if (zuel>=(olly+tens)){
	olly =  ((Math.floor((parseFloat(zuel))/tens))*tens);
}
if (zuel>olzerer){
  olzerer = parseFloat(zuel); 
  }
if ((zuel>=olzerer)&&(couunt>=3)&&(zuel<(((Math.floor(zuel/tens))*tens)+sevens))){
    moon = baby;
    couunt = 0;
    nobbolance = 0;
    olzerer = parseFloat(zuel); 
	olly =  ((Math.floor((parseFloat(zuel))/tens))*tens);
}
    if (zuel >= taget) {
        console.log(""winner winner chicken dinner"");
        return;
    }     
    lisa = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
     if ((lisa > bart)&&(baboon)) {
var funeral = Number((muel - measly).toFixed(8));
console.log(""profit"");
console.log(funeral); 
      baboon = false; 
       bart = parseFloat(lisa);
    }
    if ((lisa == bart)&&(!baboon)) { 
        baboon = true; 
        $('#pct_chance').val(49.5);
        $('#pct_bet').val(((moon*1).toFixed(8)));
        $('#a_lo').click();
    }
    setTimeout(() => get(), 1);
}
get();"
YUzQvHL8,Untitled,dllbridge,C,Sunday 17th of September 2023 12:05:38 PM CDT,"

#include   <stdio.h>





////////////////////////////////////////////////////
int foo()
{
	
return 117;	
}



////////////////////////////////////////////////////
int main()                                        // 
{
	

	
    printf(""foo() returned %d \n"", foo() );

}



















/*

#include   <stdio.h>






int n = 4;



////////////////////////////////////////////////////
int main()                                        // 
{
	
	
    int i = 1;
    

L_01:		
	    printf(""%d * %d = %2d \n"", n, i, n*i); 
		
		i++;
		
		if( i < 10) 
		{
			goto L_01;
	    }

}


*/




















/*
#include   <stdio.h>






int n = 7;



////////////////////////////////////////////////////
int main()                                        // 
{

    for(int i = 1; i < 10; i++)
    {
		
		printf(""%d * %d = %d \n"", n, i, n*i); 
		
	}
 

}



*/




"
N41UvJmv,Mi CSS para Just Read,rfog,CSS,Sunday 17th of September 2023 11:55:20 AM CDT,"@import url(""https://fonts.googleapis.com/css?family=Merriweather|Source+Sans+Pro:400,700"");

body {
  font-family: ""Merriweather"", serif;
  background-color: #fff;
  line-height: 1.6;
  font-size: 17px;
  text-rendering: optimizeLegibility;
  text-align:	justify;	
  -webkit-hyphens: auto;
  -ms-hyphens: auto;
  hyphens: auto;
}

p {
    text-align:	justify;	
}

h1,
h2 {
  font-family: ""Source Sans Pro"", sans-serif;
  font-weight: 700;
  text-align:	center;	
}

h1 {
  font-size: 1.875em;
  line-height: 1.125;
  text-align:	center;	
}

h2 {
  font-size: 1.45em;
  line-height: 1.2625em;
    text-align:	center;
}

h3 {
  font-family: ""Merriweather"", serif;
  font-size: 1.25em;
  line-height: 1.5;
}

hr {
  height: 1px;
  background-color: #d8d8d8;
  border: none;
  width: 100%;
  margin: 0px;
}

a[href] {
  color: #27aae1;
}

a[href]:hover {
  color: #4ecaff;
}

.simple-container {
  -webkit-print-color-adjust: exact;
}

.youtubeContainer {
  position: relative;
  width: 100%;
  height: 0;
  padding-bottom: 56.25%;
  padding-top: 25px;
}
iframe {
  width: 100%;
  height: 300px;
}
iframe[src*=""youtube.com/embed/""] {
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  left: 0;
}

video,
img {
  max-width: 100%;
  display: block;
  margin-left: auto;
  margin-right: auto;
}


li {
  line-height: 1.5em;
  margin-bottom: 5px;
}

td {
  border: 1px solid black;
  padding: 3px 7px;
}

pre {
  padding: 10px;
  overflow: auto;
}
pre,
code {
  background-color: #e0e0e0;
}

blockquote {
  border-left: 4px solid;
  margin-left: 0;
  padding: 1px 7% 1px 7%;
  margin: 0em 0;
  font-size: 1em;
  line-height: 1.4;
}
blockquote > *:first-child {
  margin-top: 0;
}
blockquote > *:last-child {
  margin-bottom: 0;
}

figure {
  margin: 0 0 10px;
}
figcaption {
  font-size: 0.9em;
  opacity: 0.7;
  border: 1px solid #eee;
  padding: 17px 17px 12px;
}

aside,
[class*=""sidebar""],
[id*=""sidebar""] {
  max-width: 90%;
  margin: 0 auto;
  border: 1px solid lightgrey;
  padding: 5px 15px;
}

.simple-date {
  display: inline-block;
  font-family: ""Source Sans Pro"", sans-serif;
  font-size: 18px;
  padding-right: 15px;
  padding-top: 10px;
  padding-bottom: 10px;
  border-right: 1px solid #d8d8d8;
}
.rtl .simple-date {
  border-left: 1px solid #d8d8d8;
  border-right: none;
  padding-right: 0;
  padding-left: 15px;
}

.simple-author {
  display: inline-block;
  font-family: ""Source Sans Pro"", sans-serif;
  font-size: 18px;
  color: #27aae1;
  line-height: 22px;
  padding-left: 10px;
  padding-top: 10px;
  padding-bottom: 10px;
}
.rtl .simple-author {
  padding-left: 0;
  padding-right: 10px;
}

.simple-article-container {
  max-width: 600px;
}

/* Make emojis and icons a reasonable size */
.content-container svg,
[class*=""emoji""],
[class*=""icon""]:not([class*=""no-icon""]) {
  width: 1em;
}
[class*=""inline""] {
  display: inline-block;
  min-width: 2rem;
}
"
dDBbkrdU,Horor_CPP2_Done,Neo_Feo,C,Sunday 17th of September 2023 11:53:36 AM CDT,"#include <stdio.h>
#include <stdlib.h>

int min (int *a, int size){
    int m_min = a[0];
    for(int i = 1; i< size;++i){
        if(m_min < a[i])
            continue;
        m_min = a[i];
    }
    return m_min;
}
void swap(int * x,int * y){
    int temp = *x;
    *x = *y;
    *y = temp;
}

int main()
{
    int a[] = {1,2,3,4,-9,4,5,44};
    int MIN = min(a,sizeof(a)/sizeof(int));
    swap(&MIN,&a[0]);
    printf(""%i"",a[0]);
    return 0;
}"
YCTwCNxH,sehgseh,gadungw71,PHP,Sunday 17th of September 2023 11:26:37 AM CDT,"https://eventsframe.com/e/tzpHQ8XrG/2023-1080p/
https://eventsframe.com/e/t6rZskc6s/tw-2023-4k-1080p/
https://eventsframe.com/e/nrmNGjsf6/20231080p/
https://eventsframe.com/e/pDrIS1YVG/oppenheimer-2023tw/
https://eventsframe.com/e/ulhYoQwdW/tw-hd-1080p-oppenheimer-2023/
https://eventsframe.com/e/q1HWVZFba/hd-4k/
https://eventsframe.com/e/sYySnPb9e/hd-180-4k/
https://eventsframe.com/e/sXeYlG9yw/hd-180-4k/
https://eventsframe.com/e/nf9l7pT1u/2023-hd-1080p/
https://eventsframe.com/e/sATrs4JX2/2023hd-tw-hk/
https://eventsframe.com/e/q132tSwdW/2023-hd-1080p/
https://eventsframe.com/e/mIevtBLJm/2023-1080p/
https://eventsframe.com/e/lcxl20TTi/hd-1080p2023/
https://eventsframe.com/e/mhAIWOdfq/2023-1080p-hd/
https://eventsframe.com/e/ru4T70Pvy/2023-4k-hd-1080p/
https://eventsframe.com/e/n4rIsptGE/hd-hd-1080p-2023/
https://eventsframe.com/e/oxiyHR5Sg/2023-4k-hd-1080p/
https://eventsframe.com/e/kVk61fDW0/2023-hd1080/
https://eventsframe.com/e/qkdaOMvbW/tw-2023-hd-1080p/
https://eventsframe.com/e/q8vBBTOqQ/4-hd-2023-1080hd/
https://eventsframe.com/e/lj60JV6k8/4-2023/
https://eventsframe.com/e/ovqOufKWk/4-hd-quality/
https://eventsframe.com/e/tF8UDKrgQ/4-hdtv-1080i/
https://eventsframe.com/e/m2wmHkW3e/4-4k/
https://eventsframe.com/e/nQBgBH3jy/4-2023/
https://eventsframe.com/e/rAKKFDAXe/4-2023-1080p/
https://eventsframe.com/e/qdTd44Qec/2023-tw-1080p/
https://eventsframe.com/e/mnXU5RX8Y/2023-1080p/
https://eventsframe.com/e/ljI7H9o2s/2023-hd-1080p/
https://eventsframe.com/e/mG1OuEnJu/dust-to-dust-2023-hd-quality/
https://eventsframe.com/e/nu2IFEQZq/hd-2023-1080hd/
https://eventsframe.com/e/lxLy4fTm8/dust-to-dust-2023-1080hd/
https://eventsframe.com/e/udooWsuOI/hd-1080p-high-quality-2023/
https://eventsframe.com/e/q1m63JPWw/2023-hd/
https://eventsframe.com/e/uiCOP52vK/full-hd-1080p-2023/
https://eventsframe.com/e/mq5VnL6Ew/dust-to-dust-hd-1080p-high-quality-2023/
https://eventsframe.com/e/lNjBp9dwA/hd-quality-1080p-2023/
https://eventsframe.com/e/oUURaFQ64/2023-hd-1080p-hd/
https://eventsframe.com/e/lUeEtwQbS/2023-4k-1080p/
https://eventsframe.com/e/rXdW4SvPq/a-haunting-in-venice-2023-hd-quality/
https://eventsframe.com/e/q8Gbi9SWA/no-1-460p-720p-1080p-brrip-dvdrip-4kuhd-2023/
https://eventsframe.com/e/mtuujX1mg/hd-2023-1080hd/
https://eventsframe.com/e/p0vnh1D20/2023-1080p/
https://eventsframe.com/e/qx1gUW4PC/hdtv-1080i-2023/
https://eventsframe.com/e/sTfpsu9AQ/2023-tw-1080p/
https://codeberg.org/massdhohd/CAXAS/issues/1149
https://codeberg.org/massdhohd/CAXAS/issues/1150
https://codeberg.org/massdhohd/CAXAS/issues/1158
https://m.facebook.com/media/set/?set=a.317095067642595
https://m.facebook.com/media/set/?set=a.317096177642484
https://wandb.ai/taepile580/ebtdrstb/reports/-3-2023---Vmlldzo1NDEyOTM5
https://wandb.ai/pragmatics/wanted/reports/-3-2023-1080P--Vmlldzo1NDEzMDI4
https://wandb.ai/fullversion/esgty/reports/-4-TW-1080p-HD-2023-4K--Vmlldzo1NDEzMjAy?accessToken=kl5c4zpgn54kvzrglux3da5iumvxkwwy92yatfes5z1aea6d93xibedkleg3xe03
https://codeberg.org/duyungsiren637/awwfas/issues/1
https://codeberg.org/massdhohd/CAXAS/issues/1835
https://wandb.ai/duyungsiren637/wFRAW/reports/-1080p---Vmlldzo1NDE5OTI3?accessToken=b6h5ulzm8kdc41anndj5sa7h7smww90os0y5ny4a8vqivzp8nqq2qa327syl092j
https://wandb.ai/serestvgest/mlbb/reports/-2023-4K-HD-1080p---Vmlldzo1NDE5OTY2?accessToken=k6yu5fntzug3xurcn5r3qgpnro969xt8o4pkqmqugbpntkkuo3rezj6ws9figc4h
https://groups.google.com/g/tainted-love-2023-hd1080/c/0dm0Paz-6SY
https://colab.research.google.com/drive/11calbpz7wV7a9E5KffMEKnMZ6e91_sIU
https://codeberg.org/nielsenyuj/expend4blesfullversion/issues/1
https://codeberg.org/massdhohd/CAXAS/issues/1836
https://groups.google.com/u/1/g/expend4bles-fullhd-4k/c/oltEFl_NCnk
https://colab.research.google.com/drive/1fArqh7vvyOCj38QsiHD7v9Kw5ueU2fhe
https://wandb.ai/l-ore-nzofi-s-h-er44-4/gameloft/reports/-4-2023-HD-TW-HK--Vmlldzo1NDIwMzQx?accessToken=ypyd1atdrspx6u79n6f6jq662puxqtojey7b1jlzd1he0gsmu7eqpjfz03g4eicb
https://wandb.ai/nielsenyuj/Expend4bles/reports/-4-2023-1080P--Vmlldzo1NDIwMTQ4?accessToken=ylhfadhzx8x0s8r0xuseckdhabc7k54yn4clsvbs6qcmtpofttri218kpydhnfll"
Cy35AMiy,Easter Bake,Spocoman,C++,Sunday 17th of September 2023 11:24:44 AM CDT,"#include <iostream>
#include <cmath>

using namespace std;

int main() {
    int volume, sugar, flour, maxSugar = 0, maxFlour = 0;
    cin >> volume;

    double totalSugar = 0, totalFlour = 0;

    for (int i = 0; i < volume; i++) {
        cin >> sugar >> flour;

        if (maxSugar < sugar) {
            maxSugar = sugar;
        }
        if (maxFlour < flour) {
            maxFlour = flour;
        }

        totalSugar += sugar;
        totalFlour += flour;
    }

    cout << ""Sugar: "" << ceil(totalSugar / 950) << endl << ""Flour: "" << ceil(totalFlour / 750) << endl
        << ""Max used flour is "" << maxFlour << "" grams, max used sugar is "" << maxSugar << "" grams.\n"";

    return 0;
}"
UHGkf41A,IA tests GGUF,arcagamer,HTML,Sunday 17th of September 2023 11:20:24 AM CDT,"Testes com valor das camadas usadas pela GPU e CPU entre ():

tulpar 7b(35 camadas) testing benchmark:

#Testes com contexto curto(21 tokens)

CPU(35) GPU(0):
```
llama_print_timings:        load time =  2776.49 ms
llama_print_timings:      sample time =    28.02 ms /   100 runs   (    0.28 ms per token,  3569.52 tokens per second)
llama_print_timings: prompt eval time =  1225.50 ms /    11 tokens (  111.41 ms per token,     8.98 tokens per second)
llama_print_timings:        eval time = 19845.56 ms /    99 runs   (  200.46 ms per token,     4.99 tokens per second)
llama_print_timings:       total time = 21449.92 ms
Output generated in 21.81 seconds (4.59 tokens/s, 100 tokens, context 21, seed 80807575)
```
Velocidade: 4.59 tokens por segundo

CPU(30) GPU(5):
```
llama_print_timings:        load time =  2380.79 ms
llama_print_timings:      sample time =    28.52 ms /   100 runs   (    0.29 ms per token,  3505.94 tokens per second)
llama_print_timings: prompt eval time =     0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
llama_print_timings:        eval time = 17758.01 ms /   100 runs   (  177.58 ms per token,     5.63 tokens per second)
llama_print_timings:       total time = 18136.91 ms
Output generated in 18.49 seconds (5.41 tokens/s, 100 tokens, context 21, seed 80807575)
```
Velocidade: 5.41 tokens por segundo
CPU(25) GPU(10):
```
llama_print_timings:        load time =  2139.83 ms
llama_print_timings:      sample time =    28.17 ms /   100 runs   (    0.28 ms per token,  3550.13 tokens per second)
llama_print_timings: prompt eval time =     0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
llama_print_timings:        eval time = 16001.52 ms /   100 runs   (  160.02 ms per token,     6.25 tokens per second)
llama_print_timings:       total time = 16382.37 ms
Output generated in 16.73 seconds (5.98 tokens/s, 100 tokens, context 21, seed 80807575)
```
Velocidade: 5.98 tokens por segundo
CPU(15) GPU(20) Low vram:
```
llama_print_timings:        load time =  1455.39 ms
llama_print_timings:      sample time =    28.39 ms /   100 runs   (    0.28 ms per token,  3522.74 tokens per second)
llama_print_timings: prompt eval time =     0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
llama_print_timings:        eval time = 12303.83 ms /   100 runs   (  123.04 ms per token,     8.13 tokens per second)
llama_print_timings:       total time = 12699.78 ms
Output generated in 13.07 seconds (7.65 tokens/s, 100 tokens, context 21, seed 80807575)
```
Velocidade: 7.65 tokens por segundo

#Testes com contexto longo(1179)

CPU(35) GPU(0):
```
llama_print_timings:        load time =  6006.68 ms
llama_print_timings:      sample time =    28.43 ms /   100 runs   (    0.28 ms per token,  3517.66 tokens per second)
llama_print_timings: prompt eval time =     0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
llama_print_timings:        eval time = 23526.07 ms /   100 runs   (  235.26 ms per token,     4.25 tokens per second)
llama_print_timings:       total time = 23910.16 ms
Output generated in 24.28 seconds (4.12 tokens/s, 100 tokens, context 1179, seed 80807575)
```
Velocidade: 4.12 tokens por segundo
CPU(30) GPU(5):
```
llama_print_timings:        load time =  5556.94 ms
llama_print_timings:      sample time =    25.83 ms /    92 runs   (    0.28 ms per token,  3561.75 tokens per second)
llama_print_timings: prompt eval time =     0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
llama_print_timings:        eval time = 19757.52 ms /    92 runs   (  214.76 ms per token,     4.66 tokens per second)
llama_print_timings:       total time = 20113.70 ms
Output generated in 20.48 seconds (4.44 tokens/s, 91 tokens, context 1179, seed 80807575)
```
Velocidade: 4.44 tokens por segundo
CPU(25) GPU(10):
```
llama_print_timings:        load time =  5161.97 ms
llama_print_timings:      sample time =    25.74 ms /    92 runs   (    0.28 ms per token,  3574.20 tokens per second)
llama_print_timings: prompt eval time =     0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
llama_print_timings:        eval time = 18213.97 ms /    92 runs   (  197.98 ms per token,     5.05 tokens per second)
llama_print_timings:       total time = 18574.51 ms
Output generated in 18.93 seconds (4.81 tokens/s, 91 tokens, context 1179, seed 80807575)
```
Velocidade: 4.81 tokens por segundo
CPU(15) GPU(20) Low vram:
```
llama_print_timings:        load time =  4627.16 ms
llama_print_timings:      sample time =    11.01 ms /    39 runs   (    0.28 ms per token,  3542.23 tokens per second)
llama_print_timings: prompt eval time =     0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
llama_print_timings:        eval time =  6192.65 ms /    39 runs   (  158.79 ms per token,     6.30 tokens per second)
llama_print_timings:       total time =  6343.34 ms
Output generated in 6.72 seconds (5.66 tokens/s, 38 tokens, context 1179, seed 80807575)
```
Velocidade: 5.66 tokens por segundo

Mlewdchat L2 13b q4_K_S(43 camadas) testing benchmark:

#Testes com contexto curto(21 tokens)

CPU(43) GPU(0):
```
llama_print_timings:        load time = 33123.68 ms
llama_print_timings:      sample time =    28.14 ms /   100 runs   (    0.28 ms per token,  3554.29 tokens per second)
llama_print_timings: prompt eval time =     0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
llama_print_timings:        eval time = 36035.70 ms /   100 runs   (  360.36 ms per token,     2.78 tokens per second)
llama_print_timings:       total time = 36417.16 ms
Output generated in 36.79 seconds (2.72 tokens/s, 100 tokens, context 21, seed 80807575)
```
Velocidade: 2.72 tokens por segundo
CPU(38) GPU(5):
```
llama_print_timings:        load time =  4640.32 ms
llama_print_timings:      sample time =    28.01 ms /   100 runs   (    0.28 ms per token,  3570.66 tokens per second)
llama_print_timings: prompt eval time =     0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
llama_print_timings:        eval time = 31952.95 ms /   100 runs   (  319.53 ms per token,     3.13 tokens per second)
llama_print_timings:       total time = 32338.01 ms
Output generated in 32.70 seconds (3.06 tokens/s, 100 tokens, context 21, seed 80807575)
```
Velocidade: 3.06 tokens por segundo
CPU(33) GPU(10):
```
llama_print_timings:        load time =  4213.47 ms
llama_print_timings:      sample time =    28.12 ms /   100 runs   (    0.28 ms per token,  3556.19 tokens per second)
llama_print_timings: prompt eval time =     0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
llama_print_timings:        eval time = 29386.01 ms /   100 runs   (  293.86 ms per token,     3.40 tokens per second)
llama_print_timings:       total time = 29800.18 ms
Output generated in 30.16 seconds (3.32 tokens/s, 100 tokens, context 21, seed 80807575)
```
Velocidade: 3.32 tokens por segundo
CPU(23) GPU(20) Low vram:
```
llama_print_timings:        load time =  3102.83 ms
llama_print_timings:      sample time =    28.72 ms /   100 runs   (    0.29 ms per token,  3481.53 tokens per second)
llama_print_timings: prompt eval time =     0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
llama_print_timings:        eval time = 23273.40 ms /   100 runs   (  232.73 ms per token,     4.30 tokens per second)
llama_print_timings:       total time = 23662.53 ms
Output generated in 24.04 seconds (4.16 tokens/s, 100 tokens, context 21, seed 80807575)
```
Velocidade: 4.16 tokens por segundo

#Testes com contexto longo(1179)

CPU(23) GPU(20) Low vram:
```
llama_print_timings:        load time =  3102.83 ms
llama_print_timings:      sample time =    29.02 ms /   100 runs   (    0.29 ms per token,  3446.26 tokens per second)
llama_print_timings: prompt eval time =     0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
llama_print_timings:        eval time = 28811.66 ms /   100 runs   (  288.12 ms per token,     3.47 tokens per second)
llama_print_timings:       total time = 29202.11 ms
Output generated in 29.57 seconds (3.38 tokens/s, 100 tokens, context 1179, seed 80807575)
```
Velocidade: 3.38 tokens por segundo"
ZVpUpLze,Division Without Remainder,Spocoman,C++,Sunday 17th of September 2023 11:00:19 AM CDT,"#include <iostream>
#include <string>

using namespace std;

int main() {
    int n, number, p1 = 0, p2 = 0, p3 = 0;
    cin >> n;

        for (int i = 1; i <= n; i++) {
            cin >> number;
            if (number % 2 == 0) {
                p1++;
            }

            if (number % 3 == 0) {
                p2++;
            }

            if (number % 4 == 0) {
                p3++;
            }
        }

        printf(""%.2f%%\n%.2f%%\n%.2f%%\n"", 100.0 * p1 / n, 100.0 * p2 / n, 100.0 * p3 / n);
       
    return 0;
}"
YKNkpY34,Deer Of Santa,Spocoman,C++,Sunday 17th of September 2023 10:46:54 AM CDT,"#include <iostream>
#include <string>

using namespace std;

int main() {
    int days;
    cin >> days;

    double availableFood, deer1, deer2, deer3;
    cin >> availableFood >> deer1 >> deer2 >> deer3;

    availableFood -= (deer1 + deer2 + deer3) * days;

    if (availableFood >= 0){
        cout << floor(availableFood) << "" kilos of food left.\n"";
    }
    else {
        cout << ceil(abs(availableFood)) << "" more kilos of food are needed.\n"";
    }
    return 0;
}"
P6UYYZts,Untitled,Sreekar_0125,C++,Sunday 17th of September 2023 10:46:26 AM CDT,"class SegmentTree
{
public:
    int n;
    vi lazy, tree, v;
    void build(int low, int high, int ind)
    {
        if (low == high)
        {
            tree[ind] = v[low];
            return;
        }
        int mid = (low + high) >> 1;

        build(low, mid, 2 * ind + 1);
        build(mid + 1, high, 2 * ind + 2);

        tree[ind] = max(tree[2 * ind + 1], tree[2 * ind + 2]);
    }
    SegmentTree(vi &v)
    {
        this->v = v;
        this->n = v.size();
        lazy.resize(4 * n, 0);
        tree.resize(4 * n);
        this->build(0, n - 1, 0);
    }
    void update(int low, int high, int l, int r, int value, int ind)
    {
        if (lazy[ind])
        {
            tree[ind] += (high - low + 1) * lazy[ind];
            if (low != high)
            {
                lazy[2 * ind + 1] += lazy[ind];
                lazy[2 * ind + 2] += lazy[ind];
            }
            lazy[ind] = 0;
        }
        int mid = (low + high) >> 1;
        if (low > r || high < l)
        {
            return;
        }
        else if (low >= l && high <= r)
        {
            tree[ind] += (high - low + 1) * value;
            if (low != high)
            {
                lazy[2 * ind + 1] += value;
                lazy[2 * ind + 2] += value;
            }
            return;
        }

        update(low, mid, l, r, value, 2 * ind + 1);
        update(mid + 1, high, l, r, value, 2 * ind + 2);

        tree[ind] = max(tree[2 * ind + 1], tree[2 * ind + 2]);
    }
    int query(int low, int high, int l, int r, int ind)
    {
        if (lazy[ind])
        {
            tree[ind] += (high - low + 1) * lazy[ind];
            if (low != high)
            {
                lazy[2 * ind + 1] += lazy[ind];
                lazy[2 * ind + 2] += lazy[ind];
            }
            lazy[ind] = 0;
        }
        int mid = (low + high) >> 1;
        if (low > r || high < l)
        {
            return LLONG_MIN;
        }
        if (low >= l && high <= r)
        {
            return tree[ind];
        }
        int left = query(low, mid, l, r, 2 * ind + 1);
        int right = query(mid + 1, high, l, r, 2 * ind + 2);

        return max(left, right);
    }
};

void solve()
{
    int n;
    cin >> n;

    vi v(n);
    input(v);

    SegmentTree st(v);

    int q;
    cin >> q;

    while (q--)
    {
        int choice;
        cin >> choice;

        if (choice == 2)
        {
            int l, r, value;
            cin >> l >> r >> value;
            l--;
            r--;
            st.update(0, n - 1, l, r, value, 0);
        }
        else
        {
            int l, r;
            cin >> l >> r;
            l--;
            r--;
            println(st.query(0, n - 1, l, r, 0));
        }
    }
    cout << endl;
}

signed main()
{
    // init_code();
    fast();
    int t = 1;
    cin >> t;
    // gensieve();
    while (t--)
    {
        solve();
    }
    return 0;
}
"
n0DNeXV4,Untitled,Sreekar_0125,C++,Sunday 17th of September 2023 10:45:38 AM CDT,"#include <bits/stdc++.h>
using namespace std;
// #define cerr if(false)cerr
#define int long long
#define pb push_back
#define F first
#define S second
#define yes cout << ""Yes\n""
#define no cout << ""No\n""
#define yn(x) x ? yes : no
#define f(i, s, e) for (int i = s; i < e; i++)
#define traverse(i, a) for (auto i : a)
#define set_bits(x) __builtin_popcountll(x)
#define leading_zero(x) __builtin_clz(x)
#define trailing_zero(x) __builtin_ctz(x)
#define vi vector<int>
#define vb vector<bool>
#define pii pair<int, int>
#define vpi vector<pii>
#define umi unordered_map<int, int>
#define mi map<int, int>
#define si set<int>
#define sc set<char>
#define maxheap priority_queue<int>
#define minheap priority_queue<int, vector<int>, greater<int>>
#define all(x) x.begin(), x.end()
#define minele(x) *min_element(all(x))
#define maxele(x) *max_element(all(x))
#define MOD 1000000007
#define endl '\n'

#ifndef ONLINE_JUDGE
#define debug(x)            \
    cerr << (#x) << "" is ""; \
    _print(x)
#define dbg(x) \
    cerr << (#x) << "" is "" << x << endl;
#else
#define debug(x)
#define dbg(x)
#endif

const int N = 2e5;

template <typename T>
void _print(T a)
{
    cerr << a;
}
template <typename T>
void print(T a)
{
    cout << a << ' ';
}
template <typename T>
void println(T a)
{
    cout << a << endl;
}

template <typename T>
void input(vector<T> &v)
{
    f(i, 0, (int)v.size()) cin >> v[i];
}

template <typename T>
void input(T &a)
{
    cin >> a;
}

template <typename T>
void print(vector<T> &v)
{
    f(i, 0, (int)v.size()) cout << v[i] << ' ';
    cout << endl;
}

template <class T, class V>
void _print(pair<T, V> p);
template <class T>
void _print(vector<T> v);
template <class T>
void _print(set<T> v);
template <class T, class V>
void _print(map<T, V> v);
template <class T>
void _print(multiset<T> v);
template <class T, class V>
void _print(pair<T, V> p)
{
    cerr << ""{"";
    _print(p.F);
    cerr << "","";
    _print(p.S);
    cerr << ""} "";
}
template <class T>
void _print(vector<T> v)
{
    cerr << ""[ "";
    for (T i : v)
    {
        _print(i);
        cerr << "" "";
    }
    cerr << ""]"";
    cerr << endl;
}
template <class T>
void _print(set<T> v)
{
    cerr << ""[ "";
    for (T i : v)
    {
        _print(i);
        cerr << "" "";
    }
    cerr << ""]"";
    cerr << endl;
}
template <class T>
void _print(multiset<T> v)
{
    cerr << ""[ "";
    for (T i : v)
    {
        _print(i);
        cerr << "" "";
    }
    cerr << ""]"";
    cerr << endl;
}
template <class T, class V>
void _print(map<T, V> v)
{
    cerr << ""[ "";
    for (auto i : v)
    {
        _print(i);
        cerr << "" "";
    }
    cerr << ""]"";
    cerr << endl;
}
template <class T, class V>
void _print(unordered_map<T, V> v)
{
    cerr << ""[ "";
    for (auto i : v)
    {
        _print(i);
        cerr << "" "";
    }
    cerr << ""]"";
    cerr << endl;
}

/////////////Sieve///////////////
// vb sieve(N + 5, true);
// vi primes;
// void gensieve()
// {
//     sieve[0] = sieve[1] = false;
//     for (int i = 2; i <= sqrt(N); i++)
//     {
//         if (sieve[i])
//         {
//             for (int j = i * i; j <= N; j += i)
//                 sieve[j] = false;
//         }
//     }
//     for (int i = 2; i <= N; i++)
//     {
//         if (sieve[i])
//             primes.pb(i);
//     }
// }
////////////////////////////////

int binpow(int a, int b, int m)
{
    a %= m;
    int ans = 1;
    while (b > 0)
    {
        if (b & 1)
        {
            ans = (ans * a) % MOD;
        }
        a = (a * a) % MOD;
        b >>= 1;
    }
    return ans;
}

int modadd(int a, int b)
{
    return (a % MOD + b % MOD) % MOD;
}
int modsub(int a, int b)
{
    return ((a % MOD - b % MOD) % MOD + MOD) % MOD;
}
int modmul(int a, int b)
{
    return (a % MOD * b % MOD) % MOD;
}
int moddiv(int a, int b)
{
    return ((a % MOD) * (binpow(b, MOD - 2, MOD))) % MOD;
}

int lbnd(vi &v, int x)
{
    int n = v.size();
    int low = 0;
    int high = n - 1;
    int ans = -1;
    while (low <= high)
    {
        int mid = (low + high) >> 1;
        if (v[mid] <= x)
        {
            ans = mid;
            low = mid + 1;
        }
        else
        {
            high = mid - 1;
        }
    }
    return ans;
}

int ubnd(vi &v, int x)
{
    int n = v.size();
    int low = 0;
    int high = n - 1;
    int ans = -1;
    while (low <= high)
    {
        int mid = (low + high) >> 1;
        if (v[mid] >= x)
        {
            ans = mid;
            high = mid - 1;
        }
        else
        {
            low = mid + 1;
        }
    }
    return ans;
}

// vpi moves = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}, {1, 1}, {1, -1}, {-1, 1}, {-1, -1}};
// vi graph[N + 1];
// vb visited(N + 1, false);
// vi parent(N + 1, -1);
// vi level(N + 1, 0);

// void bfs(vi *graph, vb &visited, vi &parent, vi &level, int start)
// {
//     queue<int> q;
//     visited[start] = true;
//     q.push(start);
//     while (!q.empty())
//     {
//         int node = q.front();
//         traverse(i, graph[node])
//         {
//             if (!visited[i])
//             {
//                 if (parent[i] == -1)
//                     parent[i] = node;
//                 if (level[i] == 0)
//                     level[i] = 1 + level[node];
//                 visited[i] = true;
//                 q.push(i);
//             }
//         }
//         q.pop();
//     }
// }

// void dfs(vi *graph, vb &visited, int start)
// {
//     visited[start] = true;
//     traverse(i, graph[start])
//     {
//         if (!visited[i])
//         {
//             visited[i] = true;
//             dfs(graph, visited, i);
//         }
//     }
// }

void fast()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
}

void init_code()
{
#ifndef ONLINE_JUDGE
    freopen(""input.txt"", ""r"", stdin);
    freopen(""output.txt"", ""w"", stdout);
    freopen(""error.txt"", ""w"", stderr);
#endif // ONLINE_JUDGE
}

class SegmentTree
{
public:
    int n;
    vi lazy, tree, v;
    void build(int low, int high, int ind)
    {
        if (low == high)
        {
            tree[ind] = v[low];
            return;
        }
        int mid = (low + high) >> 1;

        build(low, mid, 2 * ind + 1);
        build(mid + 1, high, 2 * ind + 2);

        tree[ind] = max(tree[2 * ind + 1], tree[2 * ind + 2]);
    }
    SegmentTree(vi &v)
    {
        this->v = v;
        this->n = v.size();
        lazy.resize(4 * n, 0);
        tree.resize(4 * n);
        this->build(0, n - 1, 0);
    }
    void update(int low, int high, int l, int r, int value, int ind)
    {
        if (lazy[ind])
        {
            tree[ind] += (high - low + 1) * lazy[ind];
            if (low != high)
            {
                lazy[2 * ind + 1] += lazy[ind];
                lazy[2 * ind + 2] += lazy[ind];
            }
            lazy[ind] = 0;
        }
        int mid = (low + high) >> 1;
        if (low > r || high < l)
        {
            return;
        }
        else if (low >= l && high <= r)
        {
            tree[ind] += (high - low + 1) * value;
            if (low != high)
            {
                lazy[2 * ind + 1] += value;
                lazy[2 * ind + 2] += value;
            }
            return;
        }

        update(low, mid, l, r, value, 2 * ind + 1);
        update(mid + 1, high, l, r, value, 2 * ind + 2);

        tree[ind] = max(tree[2 * ind + 1], tree[2 * ind + 2]);
    }
    int query(int low, int high, int l, int r, int ind)
    {
        if (lazy[ind])
        {
            tree[ind] += (high - low + 1) * lazy[ind];
            if (low != high)
            {
                lazy[2 * ind + 1] += lazy[ind];
                lazy[2 * ind + 2] += lazy[ind];
            }
            lazy[ind] = 0;
        }
        int mid = (low + high) >> 1;
        if (low > r || high < l)
        {
            return LLONG_MIN;
        }
        if (low >= l && high <= r)
        {
            return tree[ind];
        }
        int left = query(low, mid, l, r, 2 * ind + 1);
        int right = query(mid + 1, high, l, r, 2 * ind + 2);

        return max(left, right);
    }
};

void solve()
{
    int n;
    cin >> n;

    vi v(n);
    input(v);

    SegmentTree st(v);

    int q;
    cin >> q;

    while (q--)
    {
        int choice;
        cin >> choice;

        if (choice == 2)
        {
            int l, r, value;
            cin >> l >> r >> value;
            l--;
            r--;
            st.update(0, n - 1, l, r, value, 0);
        }
        else
        {
            int l, r;
            cin >> l >> r;
            l--;
            r--;
            println(st.query(0, n - 1, l, r, 0));
        }
    }
    cout << endl;
}

signed main()
{
    // init_code();
    fast();
    int t = 1;
    cin >> t;
    // gensieve();
    while (t--)
    {
        solve();
    }
    return 0;
}
"
jJLBqECh,Darts,Spocoman,C++,Sunday 17th of September 2023 10:33:05 AM CDT,"#include <iostream>
#include <string>

using namespace std;

int main() {
    string name, zone;
    getline(cin, name);
    cin >> zone;

    int dots, yesCount = 0, noCount = 0, total = 301;

    while (zone != ""Retire"") {
        cin >> dots;

        if (zone == ""Double"") {
            dots *= 2;
        }
        else if (zone == ""Triple"") {
            dots *= 3;
        }

        if (total < dots) {
            noCount++;
        }
        else {
            total -= dots;
            yesCount++;
        }

        if (total == 0) {
            break;
        }

        cin >> zone;
    }

    if (total == 0) {
        cout << name << "" won the leg with "" << yesCount << "" shots.\n"";
    }
    else {
        cout << name << "" retired after "" << noCount << "" unsuccessful shots.\n"";
    }

    return 0;
}"
h4LGEREx,邀您一起看：云口令,xiaomianao666,JavaScript,Sunday 17th of September 2023 10:24:51 AM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥云口令@@eyJkYXRhIjoie1wiYXNzb2NpYXRlZE1vZGVsc01hcEZvckpvaW5UYWJsZVwiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhGS1wiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhvdXRGS1wiOnt9LFwiZmllbGRzVG9TZXRUb0RlZmF1bHRcIjpbXSxcImdtdE1vZGlmaWVkXCI6MCxcImlkXCI6MCxcImxpc3RUb0NsZWFyQXNzb2NpYXRlZEZLXCI6W10sXCJsaXN0VG9DbGVhclNlbGZGS1wiOltdLFwicGFnZUxpc3RcIjpbXSxcInNhdmVkXCI6ZmFsc2UsXCJ0aXRsZVwiOlwi5LqR5Y+j5LukXCIsXCJ2ZXJzaW9uXCI6MCxcInVybFwiOlwiaGlrZXI6Ly9lbXB0eVwiLFwiY29sX3R5cGVcIjpcIng1X3dlYnZpZXdfc2luZ2xlXCIsXCJmaW5kX3J1bGVcIjpcImpzOnNldFJlc3VsdChbe1xcbiAgICB1cmw6XFxcImh0dHBzOi8vd3d3LjEyM3Bhbi5jb20vcy9mYWpBLWk0NlFoLmh0bWxcXFwiLFxcbmRlc2M6XFxcIjEwMCUmJmZsb2F0XFxcIixcXG5leHRyYTp7Y2FuQmFjazogdHJ1ZX1cXG59XSk7XCIsXCJncm91cFwiOlwiXCJ9IiwidGl0bGUiOiLkupHlj6Pku6QifQ==
6dEMFTgP,Horor_CPP1_Done,Neo_Feo,C,Sunday 17th of September 2023 10:20:31 AM CDT,"#include <stdio.h>
#include <stdlib.h>
#include <math.h>

typedef struct Result{
    double a,b;
}Result;

typedef struct Data{
    double x,y,z;
}Data;

Result my_ecuation (Data data){
    Result rezult;
    double x = data.x, y = data.y, z = data.z;
    rezult.a = fabs(x*y*x-sqrt(y)/x*3);
    rezult.b = (y-x)*y - z*y-x*1*(x*y)*2;
    return rezult;
}

void printResult(Result ecuation){
    printf(""a = %lf\n"",ecuation.a);
    printf(""b = %lf"",ecuation.b);
}

Data scanData(){
    Data data;
    printf(""Introduceti o valoare pentru x:"");
    scanf(""%lf"",&data.x);
    printf(""Introduceti o valoare pentru y:"");
    scanf(""%lf"",&data.y);
    printf(""Introduceti o valoare pentru z:"");
    scanf(""%lf"",&data.z);
    return data;
}
int main()
{
    printResult(my_ecuation(scanData()));
    return 0;
}

//1.825,18.225,-3.298
"
g5gYzgFY,Dance Hall,Spocoman,C++,Sunday 17th of September 2023 10:10:50 AM CDT,"#include <iostream>

using namespace std;

int main() {
    double l, w, a;
    cin >> l >> w >> a;

    double space = l * w - (l * w / 10) - a * a;
    int dancers = (int)(space / 0.7040);
    
    cout << dancers << endl;

    return 0;
}"
Zw10bW2d,Courier Express,Spocoman,C++,Sunday 17th of September 2023 10:00:20 AM CDT,"#include <iostream>
#include <string>
#include <iomanip>

using namespace std;

int main() {
    double weight;
    cin >> weight;

    string service;
    cin >> service;

    int distance;
    cin >> distance;

    double standardPrice = 0;

    if (weight < 1) {
        standardPrice = 0.03;
    }
    else if (weight >= 1 && weight < 10) {
        standardPrice = 0.05;
    }
    else if (weight >= 10 && weight < 40) {
        standardPrice = 0.10;
    }
    else if (weight >= 40 && weight < 90) {
        standardPrice = 0.15;
    }
    else if (weight >= 90 && weight < 150) {
        standardPrice = 0.20;
    }

    double expressKiloPrice = 0;

    if (service == ""express"") {
        if (weight < 1) {
            expressKiloPrice = standardPrice * 0.80;
        }
        else if (weight >= 1 && weight < 10) {
            expressKiloPrice = standardPrice * 0.40;
        }
        else if (weight >= 10 && weight < 40) {
            expressKiloPrice = standardPrice * 0.05;
        }
        else if (weight >= 40 && weight < 90) {
            expressKiloPrice = standardPrice * 0.02;
        }
        else if (weight >= 90 && weight < 150) {
            expressKiloPrice = standardPrice * 0.01;
        }
    }

    double totalPrice = standardPrice * distance + expressKiloPrice * weight * distance;

    cout << ""The delivery of your shipment with weight of ""
        << fixed << setprecision(3) << weight << "" kg.would cost ""
        << setprecision(2) << totalPrice << "" lv."" << endl;

    return 0;
}

Решение с тернарен оператор и printf():

#include <iostream>
#include <string>

using namespace std;

int main() {
    double weight;
    cin >> weight;

    string service;
    cin >> service;

    int distance;
    cin >> distance;

    double standardPrice =
        weight < 1 ? 0.03 :
        weight < 10 ? 0.05 :
        weight < 40 ? 0.10 :
        weight < 90 ? 0.15 :
        weight < 150 ? 0.20 : 0;

    double expressPrice = 0;

    if (service == ""express"") {

        expressPrice *=
            (weight < 1 ? 0.80 :
            weight < 10 ? 0.40 :
            weight < 40 ? 0.05 :
            weight < 90 ? 0.02 :
            weight < 150 ? 0.01 : 0) * standardPrice * weight;
    }
    
    double totalPrice = (standardPrice + expressPrice) * distance;

    printf(""The delivery of your shipment with weight of %.3f kg. would cost %.2f lv.\n"", weight, totalPrice);

    return 0;
}"
k3YGdHcv,Untitled,remico,JavaScript,Sunday 17th of September 2023 09:42:19 AM CDT,"function tradeCommissions (inputArray){
let city = inputArray[0];
let sales = Number (inputArray[1]);
let commission = 0;
if ( sales >=0 || sales <=500) {
   switch (city){
    case 'Sofia':
        commission = sales*0.05;
        break;
    case 'Varna':
        commission = sales*0.45;
        break;
    case 'Plovdiv':
        commission = sales*0.55;
        break;
        default:
        console.log('error');
   }
}else if ( sales > 500 || sales <=1000) {
    switch (city){
     case 'Sofia' :
        commission = sales*0.07;
        break;
     case 'Varna' :
        commission = sales*0.75;
        break
     case 'Plovdiv':
        commission = sales*0.08;
         break
    }
}else if ( sales > 1000 || sales <=10000) {
    switch (city){
     case 'Sofia' :
        commission = sales*0.08;
        break;
     case 'Varna' :
        commission = sales*0.10;
        break;
     case 'Plovdiv':
        commission = sales*0.12;
         break;
    }
    }else if (sales >10000) {
        switch (city){
         case 'Sofia' :
            commission = sales*0.12;
            break;
         case 'Varna' :
            commission = sales*0.13;
            break;
         case 'Plovdiv':
            commission = sales*0.145;
             break;
        } 
        }else {
            console.log('error')
        }
console.log (commission.toFixed(2));
}
//tradeCommissions ([""Sofia"",""1500""]);
//tradeCommissions ([""Plovdiv"",""499.99""]);
//tradeCommissions ([""Varna"",""3874.50""]);
//tradeCommissions ([""Kaspichan"",""-50""]);"
PJU8BAPP,Untitled,Rofyda_Elghadban1,C++,Sunday 17th of September 2023 09:38:43 AM CDT," #include <bits/stdc++.h> 
 
 #define ll long long
 #define ull unsigned long long
 #define pi 3.141592654
 #define NUM 1e18
 #define Mod  1'000'000'007
 #define fixed(n) fixed<<setprecision(n)
 #define cin(v) for(auto &i:v) cin >> i ;
 #define cout(v) for(auto &i:v) cout << i  <<"" "";
 #define vowel(x) (x=='e'||x=='a'||x=='i'||x=='o'||x=='u')
 #define small(x) (x>=97&&x<=122)
 #define capital(x) (x>=65&&x<=90)
 #define Tolower(s) transform(s.begin(),s.end(),s.begin(),::tolower);
 #define Toupper(s) transform(s.begin(),s.end(),s.begin(),::toupper); 
 #define all(v) ((v).begin()), ((v).end())
 #define allr(v) ((v).rbegin()), ((v).rend())
 #define updmax(a,b) a=max(a,b)
 #define updmin(a,b) a=min(a,b)
 #define ceil(a,b) ((a/b)+(a%b?1:0))
 /* asc -> 1 2 3 ,des -> 3 2 1 */
 
 /***********************************************************************************/
 
 using namespace std;
 
 void Rofyda_Elghadban(){
  #ifndef ONLINE_JUDGE   
    freopen(""input.txt"", ""r"", stdin), freopen(""output.txt"", ""w"", stdout);
   #endif
    ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);
 }


 void solve(){
  int n,t,counter=0;
  cin>>n>>t;
  vector<int>v(n),ans;
  cin(v);
  int freq[100001]{};
  for(int i=n-1;i>=0;i--){
    freq[v[i]]++;
    if(freq[v[i]]==1){
      counter++;
    }
    ans.push_back(counter);
    //cout<<counter<<"" "";
  }
  //cout(ans);
  reverse(all(ans));
  while(t--){
    int q;
    cin>>q;
    cout<<ans[q-1]<<""\n"";
  }
 }
 
 
 int main(){
 Rofyda_Elghadban();
 //freopen(""input.txt"",""r"",stdin);
 //freopen(""output.txt"",""r"",stdout);
  solve();

 

 
 
 return 0;
}
 
 "
6Yw8daJE,Algotriacontathlon Source Code,AlgicosathlonFun,Java,Sunday 17th of September 2023 09:34:24 AM CDT,"int[] start = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
int[] toadd = {70,100,500,4,350,125,175,275,300,400,25,1,6,150,325,30,225,250,10,3,50,15,2,40,20,450,8,375,200,12};
String[] names = {""Magenta"",""Purple"",""Tan"",""Orange"",""Lime"",""Red"",""Blue"",""Lavender"",""Yellow"",""Brown"",""Gray"",""Navy"",""Olive"",""Pink"",""Cyan"",""Green"",""White"",""Black"",""Mint"",""Scarlet"",""Gold"",""Silver"",""RoyalBlue"",""LightBrown"",""Sky"",""Cream"",""Teal"",""Lilac"",""Maroon"",""Crimson""};
int[] waias = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30};
int[] waiae = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30};
boolean[] taken = {false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
false,false,false,false,false,false,false,false,false,false,false,false,false,false};
int timer, maxScore, x, y;
int[][] colors = {{255,0,255},{120,0,255},{210,180,140},{255,120,0},{0,255,0},{255,0,0},{0,120,255},{202,145,222},{255,255,0},{130,65,0},{120,120,120},{0,30,145},{130,130,0},{248,174,207},{0,255,255},{0,145,0},{255,255,255},{65,65,65},{191,248,151},{255,55,0},{255,190,4},{192,192,192},{0,0,255},{174,127,0},{143,216,245},{249,248,158},{49,133,156},{238,188,248},{130,0,0},{220,20,60}};
String[] after = {""st"",""nd"",""rd"",""th"",""th"",""th"",
""th"",""th"",""th"",""th"",""th"",""th"",""th"",""th"",""th"",""th"",""th"",""th"",""th"",""th"",""st"",""nd"",""rd"",""th"",""th"",""th"",""th"",""th"",""th"",""th"",""st""};
PFont font;
PFont font2;
int margin = 250;
float perc = 0;
void setup(){
  font = loadFont(""Helvetica-48.vlw"");
  font2 = loadFont(""HelveticaNeueLTCom-BlkCn-48.vlw"");
  size(1530,960);    
  for(int i = 0; i < 30; i++){
    int record = 0;
    int recordHolder = 0;
    for(int j = 29; j >= 0; j--){
      if(start[j] >= record && !taken[j]){
        record = start[j];
        recordHolder = j;
      }
    }
    taken[recordHolder] = true;
    waias[recordHolder] = i;
  }
  for(int i = 0; i < 30; i++){
    taken[i] = false;
  }
  for(int i = 0; i < 30; i++){
    int record = 0;
    int recordHolder = 0;
    for(int j = 29; j >= 0; j--){
      if(start[j]+toadd[j] >= record && !taken[j]){
        record = start[j]+toadd[j];
        recordHolder = j;
      }
    }
    taken[recordHolder] = true;
    waiae[recordHolder] = i;
    if(i == 0) maxScore = record;
  }
  textFont(font,30);
  noStroke();
  frameRate(60);
}
void draw(){
  background(0);
  if(timer < 1200){
    fill(80);
    rect(0,0,margin,height);
    timer++;
    textAlign(RIGHT);
    fill(255);
    for(int i = 0; i < 30; i++){
      text((i+1)+after[i],margin-100,27+32*i);
    }
    if(timer < 480){
      perc = max((float(timer)-180)/300,0);
    }else{
      perc = min(max((float(timer)-480)/300,0),1);
      perc = -cos(perc*PI)/2+0.5;
    }
    for(int j = 0; j < 30; j++){
      fill(colors[j][0],colors[j][1],colors[j][2]);
      if(timer < 480){
        x = int(790*(start[j]+float(toadd[j])*perc)/maxScore);
        y = 32*waias[j];
      }else{
        x = int(790*(start[j]+toadd[j])/maxScore);
        y = int((waias[j]+(float(waiae[j])-float(waias[j]))*perc)*32);
      }
      rect(margin,5+y,x,25.5);
      textAlign(LEFT);
      text(names[j],margin+x+5,27+y);
      fill(0);
      textAlign(RIGHT);
      if(timer < 480){
        text(addCommas(round((start[j]+toadd[j]*perc))),margin+x,27.5+y);
      }else{
        text(addCommas(start[j]+toadd[j]),margin+x,27.5+y);
      }
      if(waiae[j] >= 30){
        fill(255,25,0);
        textFont(font2,33);
        textAlign(LEFT);
        text(""ELIMINATED"",names[j].length()*20+305+x,27+y);
        textFont(font,30);
      }
    }
    saveFrame(""images\\####.png"");
  }
}
String addCommas(int n){
  String s = n+"""";
  String output = """";
  for(int i = 0; i < s.length(); i++){
    if(i >= 1 && (s.length()-i)%3 == 0){
      output = output+"","";
    }
    output = output+s.charAt(i);
  }
  return output;
}"
GAPizZBJ,woops overnight rocked,coinwalk,JavaScript,Sunday 17th of September 2023 09:28:49 AM CDT,"var measly = parseFloat(document.getElementById('pct_balance').value);
var baby = Number((0.001).toFixed(8));
var moon = baby;
var taget = 15000;
var tens = (baby*10);
var sevens = (baby*6.5);
var eights = (baby*7.5);
var threes = (baby*3.5);
var nobbolance = 0;
var couunt = 0;
var baboon = false;
var high = measly;  
var olzerer = ((Math.floor(measly/tens))*tens);
var muel = parseFloat(document.getElementById('pct_balance').value);
var zuel = parseFloat(document.getElementById('pct_balance').value);
var bart = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var lisa = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
 
function get(){
var look = (((zuel+moon)*1).toFixed(8));
var mean = (((zuel-moon)*1).toFixed(8));
muel = parseFloat(document.getElementById('pct_balance').value);
if ((look!=muel)&&(mean!=muel)&&(zuel!=muel)){
console.log(""hacked"");
return;
}else{
zuel = parseFloat(document.getElementById('pct_balance').value);
}
if ((zuel>(((Math.floor(zuel/tens))*tens)+sevens))&&(zuel<(((Math.floor(zuel/tens))*tens)+eights))&&(zuel>nobbolance)&&(zuel<olzerer)) {
    moon = Number((moon*2).toFixed(8));
    couunt = couunt+1;
    nobbolance = parseFloat(zuel);
}
if ((zuel>(((Math.floor(zuel/tens))*tens)+sevens))&&(zuel<(((Math.floor(zuel/tens))*tens)+eights))&&(zuel<nobbolance)&&(zuel<olzerer)) {
    moon = Number((moon*2).toFixed(8));
    couunt = couunt+1;
    nobbolance = parseFloat(zuel);
}
if ((zuel>(((Math.floor(zuel/tens))*tens)+sevens))&&(zuel<(((Math.floor(zuel/tens))*tens)+eights))&&(zuel>nobbolance)&&(zuel>=olzerer)) {
    moon = Number((moon*2).toFixed(8));
    nobbolance = parseFloat(zuel);
}
if ((zuel>(((Math.floor(zuel/tens))*tens)+sevens))&&(zuel<(((Math.floor(zuel/tens))*tens)+eights))&&(zuel<nobbolance)&&(zuel>=olzerer)) {
    moon = Number((moon*2).toFixed(8));
    nobbolance = parseFloat(zuel);
}
if ((couunt>=2)&&(zuel<=olzerer)&&(zuel<(((Math.floor(zuel/tens))*tens)+threes))){
    moon = baby;
    couunt = 0;
    nobbolance = parseFloat(zuel);
    olzerer = parseFloat(zuel); 
}
if ((zuel>=(olzerer+(tens*4)))&&(zuel<(((Math.floor(zuel/tens))*tens)+sevens))){
    moon = baby;
    couunt = 0;
    nobbolance = 0;
    olzerer = parseFloat(zuel); 
}
    if (zuel >= taget) {
        console.log(""winner winner chicken dinner"");
        return;
    }     
    lisa = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
     if ((lisa > bart)&&(baboon)) {
var funeral = Number((muel - measly).toFixed(8));
console.log(""profit"");
console.log(funeral); 
      baboon = false; 
       bart = parseFloat(lisa);
    }
    if ((lisa == bart)&&(!baboon)) { 
        baboon = true; 
        $('#pct_chance').val(49.5);
        $('#pct_bet').val(((moon*1).toFixed(8)));
        $('#a_lo').click();
    }
    setTimeout(() => get(), 1);
}
get();
"
JA4iqXMy,Aquarium,M0Hk,C#,Sunday 17th of September 2023 09:09:23 AM CDT,"using System;
using System.Diagnostics.Metrics;

namespace firstLesson
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int length = int.Parse(Console.ReadLine());
            int width = int.Parse(Console.ReadLine());
            int height = int.Parse(Console.ReadLine());
            double percent = double.Parse(Console.ReadLine());

            double volumeLiters = length * width * height * 0.001;
            double waterPercent = 1 - (percent / 100);

            double result = volumeLiters * waterPercent;

            string formattedResult = result.ToString(""F2"");

            Console.WriteLine(formattedResult);

        }
    }
}"
vfVq0c22,BIKES Car Dealership Tycoon,Robloxian_Roblox,Lua,Sunday 17th of September 2023 09:02:30 AM CDT,"local player = game.Players.LocalPlayer
local vim = game:GetService(""VirtualInputManager"")

local HelmetHunt = {
    Vector3.new(-3371.6923828125, 624.4136962890625, 3052.853515625),
    Vector3.new(-2968.164306640625, 637.1951904296875, 3378.19921875),
    Vector3.new(-2123.02490234375, 602.3893432617188, 4331.6572265625),
    Vector3.new(-3460.60009765625, 612.138427734375, 4571),
    Vector3.new(-1976.06396484375, 605.3045043945312, 1419.04833984375),
    Vector3.new(-3836.704345703125, 657.777587890625, 1338.281494140625),
    Vector3.new(-2140.14501953125, 602.5863647460938, 5301.537109375),
    Vector3.new(283.885009765625, 604.4849243164062, 4836.28515625),
    Vector3.new(2816.722900390625, 708.7045288085938, 5216.296875),
    Vector3.new(2261.099365234375, 845.08837890625, -19.430133819580078),
    Vector3.new(-3960.5849609375, 709.4404907226562, -527.2471313476562),
    Vector3.new(-2487.569580078125, 644.0382080078125, 3231.83056640625),
    Vector3.new(-4102.49755859375, 588.6536865234375, 3718.556396484375),
    Vector3.new(-3374.0791015625, 612.1380004882812, 5434.51904296875),
    Vector3.new(-308.9728698730469, 604.8051147460938, 2399.836669921875),
    Vector3.new(-4032.32861328125, 602.1383056640625, 2299.9931640625),
    Vector3.new(-773.3427734375, 602.3892822265625, 3653.885986328125),
    Vector3.new(-641.1165771484375, 806.1907348632812, -962.1224975585938),
    Vector3.new(882.7306518554688, 845.1383666992188, 98.329833984375),
    Vector3.new(-2019.0501708984375, 602.1383666992188, 3930.199462890625),
    Vector3.new(2290.731689453125, 797.9816284179688, 3133.3544921875),
    Vector3.new(-2629.07568359375, 604.4945068359375, 5004.40625),
    Vector3.new(-2770.75, 602.1600952148438, 1120.7525634765625),
    Vector3.new(-2339.668701171875, 602.2282104492188, 1630.7938232421875),
    Vector3.new(-3750.099853515625, 612.1383666992188, 4901.85009765625),
    Vector3.new(-2148.892822265625, 602.1383666992188, 3084.07080078125),
    Vector3.new(1820.2227783203125, 687.3861083984375, 1662.5872802734375),
    Vector3.new(-749.720458984375, 602.1883544921875, 4830.85791015625),
    Vector3.new(-1202.0843505859375, 709.49072265625, -968.4118041992188),
    Vector3.new(569.74072265625, 845.1383056640625, 102.43647766113281),
    Vector3.new(-2473.773193359375, 605.4254760742188, 2060.531005859375),
    Vector3.new(-2292.302978515625, 602.3892822265625, 4893.24951171875),
    Vector3.new(-3337.575927734375, 602.1954345703125, -93.11963653564453),
    Vector3.new(-2476.91845703125, 665.2473754882812, 3286.3212890625),
    Vector3.new(-3729.2001953125, 612.1383666992188, 4482.6494140625),
    Vector3.new(-2502.098388671875, 709.48876953125, -1079.051513671875),
    Vector3.new(3281.96630859375, 754.3638305664062, 5635.61474609375),
    Vector3.new(84.78202819824219, 845.1131591796875, -292.1726379394531),
    Vector3.new(1647.013427734375, 602.1841430664062, 3393.743408203125),
    Vector3.new(-3561.693115234375, 602.7586669921875, 3487.315185546875),
    Vector3.new(-2867.37060546875, 602.1383056640625, 1405.14306640625),
    Vector3.new(1024.9287109375, 661.6253662109375, 559.8055419921875),
    Vector3.new(2310.415283203125, 697.9368896484375, 3743.09326171875),
    Vector3.new(-2084.883056640625, 604.6689453125, 3769.40625),
    Vector3.new(2138.232666015625, 602.1771240234375, 1807.806640625),
    Vector3.new(-3486.757080078125, 624.8636474609375, 3066.75341796875),
    Vector3.new(-1721.062255859375, 589.9283447265625, 3608.278564453125),
    Vector3.new(-3366.316162109375, 602.439697265625, 666.6070556640625),
    Vector3.new(741.07763671875, 602.1383056640625, 5368.9599609375),
    Vector3.new(-2645.645263671875, 592.347412109375, 5742.14404296875),
    Vector3.new(-2314.46484375, 604.8110961914062, 3283.108642578125),
    Vector3.new(-3212.429443359375, 602.1683349609375, 4931.21875),
    Vector3.new(-1586.4410400390625, 604.80615234375, 2404.667724609375),
    Vector3.new(-2508.72900390625, 602.1599731445312, 534.1445922851562),
    Vector3.new(1066.6617431640625, 602.1864013671875, 1588.86572265625),
    Vector3.new(2929.13623046875, 798.0336303710938, 2983.797119140625),
    Vector3.new(1779.4678955078125, 651.9637451171875, 5194.2177734375),
    Vector3.new(-265.27618408203125, 845.3269653320312, -578.61962890625),
    Vector3.new(990.0855102539062, 845.2308959960938, 250.36990356445312),
    Vector3.new(-3223.753173828125, 602.4390258789062, 4184.2548828125),
    Vector3.new(-2062.95458984375, 606.0277709960938, 1260.20703125),
    Vector3.new(-2126.53173828125, 602.108154296875, 100.55564880371094),
    Vector3.new(-3423.792236328125, 602.6890869140625, 171.28773498535156),
    Vector3.new(-3950.010498046875, 655.1582641601562, 172.77996826171875),
    Vector3.new(-3307.089599609375, 654.9489135742188, 1426.712890625),
    Vector3.new(-1219.2496337890625, 602.1895751953125, 2666.161376953125),
    Vector3.new(623.1087646484375, 602.188720703125, 4260.9990234375),
    Vector3.new(451.1448059082031, 613.7322387695312, 2840.939453125),
    Vector3.new(2179.70361328125, 805.8222045898438, 721.1643676757812),
    Vector3.new(1815.7587890625, 687.3861694335938, 967.6812133789062),
    Vector3.new(-2586.620849609375, 890.8740844726562, 3713.517822265625),
    Vector3.new(-1166.597412109375, 717.3380126953125, 3740.803955078125),
    Vector3.new(-567.1454467773438, 860.0741577148438, 3996.48876953125),
    Vector3.new(-774.0499267578125, 890.7598876953125, 2984.907958984375),
    Vector3.new(-2128.1845703125, 647.2274169921875, 2966.870849609375),
    Vector3.new(-2099.665771484375, 751.7745971679688, 2737.105712890625),
    Vector3.new(-2335.982666015625, 747.3991088867188, 4949.3759765625),
    Vector3.new(-1521.2591552734375, 722.0642700195312, 4327.189453125),
    Vector3.new(-1411.44482421875, 721.8243408203125, 5134.1962890625),
    Vector3.new(-937.96337890625, 751.7739868164062, 3396.692138671875)
}

local function teleportPlayer(player, destination)
    if player and player.Character then
        player.Character:SetPrimaryPartCFrame(CFrame.new(destination))
    end
end

player.CharacterAdded:Connect(function(character)
    character.Humanoid.Died:Connect(function()
        wait(5)
        teleportPlayer(player, HelmetHunt[1])
    end)
end)

for i, v in ipairs(HelmetHunt) do
    teleportPlayer(player, v)
    wait(0.3)
    teleportPlayer(player, v)
    wait(0.3)
    teleportPlayer(player, v)
    wait(0.1)
    vim:SendKeyEvent(true, Enum.KeyCode.E, false, game)
    wait(0.15)
    vim:SendKeyEvent(false, Enum.KeyCode.E, false, game)
    wait(0.3)
end"
QX7k6mz4,Sort an array according to the other,jayati,C++,Sunday 17th of September 2023 08:56:04 AM CDT,"class Solution{
    public:
    vector<int> sortA1ByA2(vector<int> A1, int N, vector<int> A2, int M) 
    {
        //Your code here
        vector<int> ans;
        map<int,int> m;
        for(int i=0;i<N;i++)
        {
            m[A1[i]]++;
        }
        for(int i=0;i<M;i++)
        {
            if(m.find(A2[i])!=m.end())
            {
                auto it =m.find(A2[i]);
                int c=it->second;
                vector<int> v(c,A2[i]);
                ans.insert(ans.end(),v.begin(),v.end());
                m.erase(A2[i]);
            }
        }
        for(auto x : m){
            auto ele = x.first;
            int count = x.second;
            vector<int> v(count, ele);
            ans.insert(ans.end(), v.begin(), v.end());
        }
        return ans;
    } 
};"
w6rq31hQ,Untitled,a_igin,YAML,Sunday 17th of September 2023 08:44:45 AM CDT,"version: ""2.2""

services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0
    ports:
      - ""9200:9200""
    environment:
      - ELASTIC_PASSWORD=some_pass
      - xpack.security.enabled=false
      - discovery.type=single-node
  logstash:
    image: docker.elastic.co/logstash/logstash:${STACK_VERSION}
    restart: unless-stopped
    volumes:
      - ./logstash/pipelines.yml:/usr/share/logstash/config/pipelines.yml:ro
      - ./logstash/pipelines:/usr/share/logstash/config/pipelines:ro
      - ./logs:/usr/share/logstash/input
      - ./output:/usr/share/logstash/output:rw
    ports:
      - 5046:5046"
BQhQGLVG,Untitled,DugganSC,C#,Sunday 17th of September 2023 08:44:04 AM CDT,"// Player Script :
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Player : MonoBehaviour
{
    [SerializeField] 
     private float _speed = 4f; 
     private float _speedMultiplier = 2;
    [SerializeField]
     private GameObject _laserPrefab;
     [SerializeField]
     private float _firerate = 0.5f;
    [SerializeField]
    private float _canfire = -1f;
    [SerializeField]
    private int _lives = 3;
    [SerializeField]
    private SpawnManager _spawnManager;
    [SerializeField] 
    private bool _isTripleShotActive = false; 
    [SerializeField]
    private bool _isSpeedBoostActive = false; 
    [SerializeField]
    private GameObject _tripleShotPrefab;
    [SerializeField]           
    private bool _isShieldActive = false; 
    [SerializeField]
    private GameObject _shieldVisualizer; 
    [SerializeField]
    private GameObject _leftEngine , _rightEngine ;
    [SerializeField]
    private int _score; 
     [SerializeField]
     private int _bestScore; 
    private UIManager _uiManager;
    [SerializeField]
    private AudioClip _laserSoundClip; 
    
    private AudioSource _audioSource;  
     void Start()
    {
       
        transform.position = new Vector3(0,0,0);
        _spawnManager = GameObject.Find(""Spawn_Manager"").GetComponent<SpawnManager>(); 
        _uiManager = GameObject.Find(""Canvas"").GetComponent<UIManager>();
       _audioSource = GetComponent<AudioSource>(); 
        if(_spawnManager==null) {
          Debug.LogError(""The Spawn Manager is Null"");
        }  
        if(_uiManager == null) 
        {
         Debug.Log(""The UI Manager is null"");
        }
        if(_audioSource == null)
        {
          Debug.LogError(""Audio is not there""); 
        }  
        else 
        {
          _audioSource.clip = _laserSoundClip; 
        }
    }         
     
    void Update()
    { 
        CalculateMovement();

        if(Input.GetKeyDown(KeyCode.Space)&& Time.time > _canfire) {
          FireLaser();
        }
   
    } 
          
 
    void CalculateMovement () {
        float horizontalInput = Input.GetAxis(""Horizontal"");
         float verticalInput = Input.GetAxis(""Vertical"");
      
        Vector3 direction = new Vector3(horizontalInput,verticalInput,0);
       
      transform.Translate(direction*_speed*Time.deltaTime);
       
       transform.position = new Vector3(transform.position.x,Mathf.Clamp(transform.position.y,-3.8f,0),0);
      
      if(transform.position.x > 11.3f) {
        transform.position = new Vector3(-11.3f,transform.position.y,0); 
      } 
      else if(transform.position.x < -11.3f) {
        transform.position = new Vector3(11.3f,transform.position.y,0);
      }
    }

    void FireLaser() {
          _canfire = Time.time + _firerate;

         if(_isTripleShotActive == true) {
            Instantiate(_tripleShotPrefab, transform.position,Quaternion.identity);
         } 
         else {
          Instantiate(_laserPrefab,transform.position + new Vector3(0,1.05f,0),Quaternion.identity); 
         } 
         _audioSource.Play();
           } 
                             
   public void Damage() {  

    if(_isShieldActive == true) {
      _isShieldActive = false;
      _shieldVisualizer.SetActive(false);
      return; 
    } 

  _lives--;  
     
   if(_lives == 2) {
    _leftEngine.SetActive(true); 
   } 
   else if(_lives == 1) {
    _rightEngine.SetActive(true);
   }

    _uiManager.UpdateLives(_lives);  
      if(_lives <= 0) {
     _spawnManager.OnPlayerDeath();
     _uiManager.CheckForBestScore(); 
      Destroy(this.gameObject);
      
     } 
        
    }      

    public void TripleShotActive() 
    {
      _isTripleShotActive = true; 
      StartCoroutine(TripleShotPowerDownRoutine());
    }

   IEnumerator TripleShotPowerDownRoutine() 
   {
    yield return new WaitForSeconds(5.0f); 
    _isTripleShotActive = false;
   }

public void SpeedBoostActive() {
  _isSpeedBoostActive = true; 
  _speed*= _speedMultiplier;
  StartCoroutine(SpeedBoostPowerDownRoutine());
}

IEnumerator SpeedBoostPowerDownRoutine () {
  yield return new WaitForSeconds(5.0f);
  _isSpeedBoostActive = false; 
  _speed/= _speedMultiplier;
} 

public void ShieldsActive() {
  _isShieldActive = true;
  _shieldVisualizer.SetActive(true);
}

public void AddScore(int points) 
{
  _score += points;
  _uiManager.UpdatedScore(_score);
}

public void bestScore(int _score)
{
   if(_score >_bestScore )
     {
       _bestScore = _score;
       _uiManager.CheckForBestScore(_bestScore);
       
     }
}
} 


// UIManager Script
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using TMPro;
using UnityEngine.SceneManagement;

public class UIManager : MonoBehaviour
{
    [SerializeField]
    private TextMeshProUGUI _scoreText, bestText;
    [SerializeField]
    private Image _LivesImg;
    [SerializeField]
    private Sprite[] _livesSprites;
    [SerializeField]
    private TextMeshProUGUI _gameOverText; 
     [SerializeField]
     private TextMeshProUGUI _reStartKey;
     private GameManager _gameManager;
  
     
   
      void Start()
    {
        _scoreText.text = ""Score: "" + 0; 
        _gameOverText.gameObject.SetActive(false); 
       _reStartKey.gameObject.SetActive(false); 
       _gameManager = GameObject.Find(""Game_Manager"").GetComponent<GameManager>(); 

     if(_gameManager == null) {
      Debug.LogError(""Game Manager is Null"");
     }
    }
  
    public void UpdatedScore(int playerScore) 
    {
      _scoreText.text = ""Score: "" + playerScore.ToString();
    }
    
    public void CheckForBestScore(int _bestScore)
    {
    bestText.text = ""Best: "" + _bestScore.ToString();
      
    } 
  
public void UpdateLives(int cuurentLives) 
{
  _LivesImg.sprite = _livesSprites[cuurentLives];  
  if(cuurentLives==0) {
    GameOverSequence();
  } 
  }  
    
void GameOverSequence() 
{
  _gameManager.GameOver();
  _gameOverText.gameObject.SetActive(true);
    StartCoroutine(GameOverFlickerRoutine());
    _reStartKey.gameObject.SetActive(true);
}

IEnumerator GameOverFlickerRoutine() 
{
  while(true) 
  {
    _gameOverText.text = ""GAME OVER"";
    yield return new WaitForSeconds(0.5f);
    _gameOverText.text = """";
    yield return new WaitForSeconds(0.5f); 
  }
}

//Resume Play
public void ResumePlay()
{
  GameManager gm = GameObject.Find(""Game_Manager"").GetComponent<GameManager>();
  gm.ResumeGame();
}

// BackToMainMenu
public void BackToMainMenu()
"
6DrkKBtX,EmojiEncoder,LshySVK,C++,Sunday 17th of September 2023 08:40:11 AM CDT,"#include <iostream>
#include <string>
#include <stdlib.h>

using namespace std;

string letters[] = {
	""A2🚗🍍"", // A
	""B6🦫🚲🍆💣🍌💈"", // B
	""C5🍋🍬🚬🧄🧅"", // C
	""D8🍩🚪🌈💎🏠🕳️😈🐬"", // D 👨‍⚕️
	""E1⚡"", // E
	""F3📸👨‍🌾🫘"", // F
	""G4🎱🔮🏌️🦍"", // G
	""H+18🍟🪗🐍🦛🫛🌭💩🏔️⌚🕊️🪿🧑‍🚒🧯🍔⭐🎻🍄🪹"", // H
	""I1🪡"", // I
	""J7🦎👅🍓🍎🍏🦔🦄"", // J
	""K+31🥥🐐🦘🧭⚓☕🛴🐓🌽🌵🩸🦴🔨🐄🦀📦⛸️👑🐊🛼🐎🐢🗑️🐨👒🪨🦆🐤🤡🔑🥝"", // K
	""L9🍭🦊🦥✈️🍃🐞🦙🚢🦁"", // L
	""M+20🖱️🧼🍉🥕🦋🦣🪰🧠🔬🧹🐚🏍️🐈🐜🧈🦣🐻🎤🐀🌙"", // M
	""N9🦇🦵🔪🧵🥷💻🦏👃🗞️"", // N ✂️
	""O+10🐑☁️🫏🐝🪟🦧🦅👀👓🔥"", // O
	""P+22🍺🍿🍴🧩🍊🥞🍕🌴🪶🕷️👄🐼🪤📏🪚👮‍♂️🚓🐖🦚🐕🦩🫁"", // P
	""Q1Q."", // Q
	""R4🍅🦀🐟⛓️"", // R
	""S+20🚦🍣🕯️🧀🥩🦨🐔⛄🐘🫀⛺🪑🥓🐌📎🚿🛷🎅🪓🧂"", // S
	""T+14🐧🐅🌡️🌪️📺🎃👟🎺☎️🔭🎾🎒🌷🦭"", // T
	""U3🥒👂🛸"", // U
	""V+11🐿️🐳🦦🥚🍷⚖️🐃🐦🐝🚅🐺"", // V
	""W1🚾"", // W
	""X1❎"", // X
	""Y1💴"", // Y
	""Z+10🦓🪞🚽🔓🔔🐇🦷🪥🍦🍧"" // Z
};

string special[] = {
	""Á1Á"", //Á
	""Ä1Ä"", // Ä
	""Č3🫖🍫🌶️"", // Č
	""Ď1🔭"", // Ď
	""É1É"", // É
	""Í1Í"", // Í
	""Ĺ1Ĺ"", // Ĺ
	""Ľ1🧊"", // Ľ
	""Ň1Ň"", // Ň
	""Ó1Ó"", // Ó
	""Ô1Ô"", // Ô
	""Ŕ1Ŕ"", // Ŕ
	""Š6🛝🥂🏟️🖌️🧽🍾"", // Š
	""Ť1🐫"", // Ť
	""Ú1Ú"",// Ú
	""Ž5🦒🐸💡🪒🦈"" // Ž
};

int main(int argc, char *argv[]) {
	
	//int a = letters[0].at(1) - '0';
	//cout << stoi(letters[7].substr(2,2));
	srand(9731);
	
	
	cout << ""Input text: "";
	string input;
	getline(cin, input);
	system(""cls"");
	
	bool isSpecial = 0;
	short n = 0;
	for (char c : input) {
		c = toupper(c);
		
		if (c < 'A' || c > 'Z') { // ak sa jedna o specialny znak
			isSpecial = 1;
			n++;
			continue;
		}
		
		string printedEmoji;
		short numOfEmojis;
		if (isSpecial == 0) { //not special char
		c = c - 'A';
			if (letters[c].at(1) == '+') { //longer than 9
				numOfEmojis = stoi(letters[c].substr(2, 2));
			}
			else { //not longer than 9
				numOfEmojis = letters[c].at(1) - '0';
			}
			//printedEmoji = random
			cout << "" "" << numOfEmojis << "" "";
		}
		
		
		else { //special char
			string specialChar = input.substr(n-1, 2);
			
			short specialPos = 0;
			while(specialChar != special[specialPos].substr(0,2)) {
				specialPos++;
				if (specialPos < 15) {
					throw;
				}
			}
			
			numOfEmojis = 0;
			cout << "" "" << numOfEmojis << "" "";
		}
		
		n++;
	}
	
	
	
}"
y6ab7Uw6,Basketball Equipment,M0Hk,C#,Sunday 17th of September 2023 08:27:14 AM CDT,"using System;
using System.Diagnostics.Metrics;

namespace firstLesson
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int annualFee = int.Parse(Console.ReadLine());

            double sneakersPrice = annualFee * 0.6;
            double teamPrice = sneakersPrice * 0.8;
            double basketballPrice = teamPrice * 0.25;
            double accessoriesPrice = basketballPrice * 0.2;

            double totalBasketCost = annualFee + sneakersPrice + teamPrice + basketballPrice + accessoriesPrice;

            Console.WriteLine(totalBasketCost);
            


        }
    }
}"
0yfSnZJF,REVERT ROBLOX TO 32 BIT DOWNLOAD,Artani,Lua,Sunday 17th of September 2023 08:18:43 AM CDT,"WATCH VIDEO FOR TUTORIAL ON HOW TO REVERT ROBLOX UWP / MICROSOFT STORE VERSION OF ROBLOX TO 32 BIT!
https://www.youtube.com/watch?v=VoGRL7Uih0E&t=105s"
ixSNrvEF,Food Delivery,M0Hk,C#,Sunday 17th of September 2023 08:17:31 AM CDT,"using System;
using System.Diagnostics.Metrics;

namespace firstLesson
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int chickenMenus = int.Parse(Console.ReadLine());
            int fishMenus = int.Parse(Console.ReadLine());
            int veganMenus = int.Parse(Console.ReadLine());

            double chickenPrice = chickenMenus * 10.35;
            double fishPrice = fishMenus * 12.40;
            double veganPrice = veganMenus * 8.15;

            double totalMenusPrice = chickenPrice + fishPrice + veganPrice;
            double desertPrice = totalMenusPrice * 0.2;

            double grandTotal = totalMenusPrice + desertPrice + 2.5;

            Console.WriteLine(grandTotal);


        }
    }
}"
ennx34Xi,ROBLOX BYFRON BYPASS,Artani,Lua,Sunday 17th of September 2023 08:17:04 AM CDT,"WATCH VIDEO FOR TUTORIAL ON HOW TO REVERT ROBLOX TO 32 BIT!
https://www.youtube.com/watch?v=VoGRL7Uih0E&t=105s"
cMYAEDkk,Untitled,MeglenaLazarova,C#,Sunday 17th of September 2023 08:11:13 AM CDT,"namespace _04._Fishing_Boat
{
    internal class Program
    {
        static void Main(string[] args)
        {
          int budget = int.Parse(Console.ReadLine());
          string season = Console.ReadLine();
          int fisherman = int.Parse(Console.ReadLine());

          double boat = 0;
          

            
            switch (season)
            {
                case ""Spring"":
                    boat = 3000;
                    break;

                case ""Summer"":
                    boat = 4200;
                    break;

                case ""Autumn"":
                    boat = 4200;
                    break;

                case ""Winter"":
                    boat = 2600;
                    break;
            }
            if (fisherman <= 6)
            {
                boat = boat * 0.90;
                
            } 
            else if (fisherman >= 7 && fisherman <= 11)
            {
                boat = boat * 0.85;
                
            } 
            else if (fisherman >= 12)
            {
                boat = boat * 0.75;
                
            }
            if (fisherman % 2 == 0 && !season.Equals(""Autumn"") )
            {
                boat = boat * 0.95;
            }
            if (budget >= boat)
            {
                double left = budget - boat;
                Console.WriteLine($""Yes! You have {left:f2} leva left."");
            }
            else
            {
                double need = boat - budget;
                Console.WriteLine($""Not enough money! You need {need:f2} leva."");
            }
        }
    }
"
DH5xZnRw,Redecorating,M0Hk,C#,Sunday 17th of September 2023 08:08:18 AM CDT,"using System;
using System.Diagnostics.Metrics;

namespace firstLesson
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int nylonAmount = int.Parse(Console.ReadLine());
            int paintLiters = int.Parse(Console.ReadLine());
            int thinnerLiters = int.Parse(Console.ReadLine());
            int craftsmanHours = int.Parse(Console.ReadLine());

            double nylonPrice = (nylonAmount + 2) * 1.50;
            double paintPrice = paintLiters * 1.1 * 14.50;
            double thinnerPrice = thinnerLiters * 5;
            
            double totalMats = nylonPrice + paintPrice + thinnerPrice + 0.40;
            double craftsmanHourPrice = totalMats * 0.3;

            double grandTotal = totalMats + craftsmanHourPrice * craftsmanHours;

            Console.WriteLine(grandTotal);


        }
    }
}"
NTRSULQf,Wallpaper,DanilaI,C#,Sunday 17th of September 2023 08:03:16 AM CDT,"using System;
using UnityEngine;
using UnityEngine.UI;

public class WallpaperChanger : MonoBehaviour
{
    public Texture[] wallpapers; 
    private RawImage wallpaperImage;

    private void Start()
    {
        wallpaperImage = GetComponent<RawImage>();
        UpdateWallpaper();
    }

    private void Update()
    {

        DateTime currentTime = DateTime.Now;


        int hour = currentTime.Hour;

        if (hour >= 5 && hour < 12)
        {
            SetWallpaper(0); 
        }
        else if (hour >= 12 && hour < 18)
        {
            SetWallpaper(1); 
        }
        else if (hour >= 18 && hour < 21)
        {
            SetWallpaper(2); 
        }
        else
        {
            SetWallpaper(3); 
        }
    }

    private void UpdateWallpaper()
    {
        Update();
    }

    public void SetWallpaper(int index)
    {

        if (index >= 0 && index < wallpapers.Length)
        {
            wallpaperImage.texture = wallpapers[index];
        }
    }
}
"
dPhCqg5K,RAD to DEG,M0Hk,C#,Sunday 17th of September 2023 07:52:52 AM CDT,"using System;

namespace firstLesson
{
    internal class Program
    {
        static void Main(string[] args)
        {
            double radians = double.Parse(Console.ReadLine());
            double degrees = radians * 180 / Math.PI;

            Console.WriteLine(degrees);
                   
         



        }
    }
}"
6RtmiLdb,Deposit Calculator,M0Hk,C#,Sunday 17th of September 2023 07:52:14 AM CDT,"using System;

namespace firstLesson
{
    internal class Program
    {
        static void Main(string[] args)
        {
            double amount = double.Parse(Console.ReadLine());
            int months = int.Parse(Console.ReadLine());
            double interest = double.Parse(Console.ReadLine());

            double finalAmount = amount + months * (amount * (interest / 100)) / 12;
            Console.WriteLine(finalAmount); 
                   
         



        }
    }
}"
GpnLhev2,Mandatory Literature,M0Hk,C#,Sunday 17th of September 2023 07:51:35 AM CDT,"using System;

namespace firstLesson
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int totalPages = int.Parse(Console.ReadLine());
            int pagesPerHour = int.Parse(Console.ReadLine());
            int readingDays = int.Parse(Console.ReadLine());

            int hoursForTheBook = totalPages / pagesPerHour;
            int hoursReadingPeDay = hoursForTheBook / readingDays;

            Console.WriteLine(hoursReadingPeDay);
                   
         



        }
    }
}"
W8XhSg97,Teaching materials,M0Hk,C#,Sunday 17th of September 2023 07:50:24 AM CDT,"using System;
using System.Diagnostics.Metrics;

namespace firstLesson
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int packagesOfPens = int.Parse(Console.ReadLine());
            int packetsOfMarkers = int.Parse(Console.ReadLine());
            int litersOfBoardCleaner = int.Parse(Console.ReadLine());
            int discount = int.Parse(Console.ReadLine());

            double pensPrice = 5.80 * packagesOfPens;
            double markersPrice = 7.20 * packetsOfMarkers;
            double boarderCleanerPrice = 1.20 * litersOfBoardCleaner;
            double priceOfAll = pensPrice + markersPrice + boarderCleanerPrice;
            double discountAmount = priceOfAll * discount / 100;
            double neededMoney = priceOfAll - discountAmount;

            Console.WriteLine(neededMoney);
            

        }
    }
}"
VJsqKFa8,Adding very big numbers,Miquel_Fuster,C,Sunday 17th of September 2023 07:37:28 AM CDT,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char *sumar(char *n1, char *n2);
void compactar(char *numero);

int main() {
    char *ns1 = malloc(101);
    char *ns2 = malloc(101);
    char *res;
    
    printf(""Introduce n1: "");
    scanf(""%100s"", ns1);
    
    printf(""Introduce n2: "");
    scanf(""%100s"", ns2);
    
    res = sumar(ns1, ns2);
    
    free(ns1);
    free(ns2);
    
    printf(""\nEl resultado: %s"", res);
    
    free(res);
}

// Elimina los '0' de la izquierda.
void compactar(char *numero) {
    int i;
    
    // Busca el índice donde el número no tenga '0'
    for(i = 0; numero && numero[i] == '0'; ++i);
    
    // Copia al inicio de la cadena a partir de la posición con
    //   dígitos relevantes
    if(i) {
        memcpy(numero, numero + i, (strlen(numero) + 1 - i) * sizeof(char));
    }
    
    return numero;
}

char *sumar(char *n1, char *n2) {
    int n1_ind, n2_ind, res_ind, res_len;
    int digit_1, digit_2, digit_res;
    int carry = 0;
    char *res, *aux;
    
    compactar(n1);
    compactar(n2);
    
    // Índices apuntan al último carácter.
    n1_ind = strlen(n1) - 1;
    n2_ind = strlen(n2) - 1;
    
    // La longitud del resultado sera un carácter mas grande que el
    //   mayor numero, por si hay acarreo fina.l
    res_len = (n1_ind > n2_ind? n1_ind : n2_ind) + 2;
    
    // Se aloja la cadena resultado.
    res = malloc((res_len + 1) * sizeof(char));
    
    // Hacer la cadena imprimible.
    res[res_len] = '\0';
    
    // Índice apunta al ultimo carácter.
    res_ind = res_len - 1;
    
    // Suma los dos números desde el final hasta el principio. Si
    //   uno de ellos se queda demasido corto con el otro su
    //   dígito será 0.
    while(n1_ind >= 0 || n2_ind >= 0) {
        digit_1 = n1_ind >= 0? n1[n1_ind] - '0' : 0;
        digit_2 = n2_ind >= 0? n2[n2_ind] - '0' : 0;
        digit_res = digit_1 + digit_2 + carry;
        
        // Control del acarreo.
        if(digit_res > 9) {
            carry = 1;
            digit_res %= 10;
        } else {
            carry = 0;
        }
        
        // Posicionado del dígito resultado.
        res[res_ind] = digit_res + '0';
        
        // Actualización de los índices.
        --n1_ind;
        --n2_ind;
        --res_ind;
    }
    
    // El primer dígito del resultado es el valor de acarreo.
    res[res_ind] = carry + '0';
    
    compactar(res);
    
    
    return res;
}"
x2s5GVnZ,Snake in GGEZ rust,psychloor,Rust,Sunday 17th of September 2023 07:27:06 AM CDT,"use std::collections::VecDeque;

use ggez::conf::WindowMode;
use ggez::conf::WindowSetup;
use ggez::event;
use ggez::glam::*;
use ggez::graphics::Rect;
use ggez::graphics::Text;
use ggez::graphics::{self, Color};
use ggez::{Context, GameResult};
use rand::rngs::ThreadRng;
use rand::Rng;

const WIDTH: usize = 25;
const HEIGHT: usize = 20;
const TIME_BETWEEN_MOVES: f32 = 1.0 / 10.0;
const TILE_SIZE: f32 = 32.0;
const TILE_ROUNDED_SIZE: f32 = TILE_SIZE / 4.0;

#[derive(PartialEq, Eq)]
enum SnakeState {
    Running,
    GameOver,
    GameWin,
}

#[derive(PartialEq, Eq)]
enum Direction {
    None,
    Left,
    Right,
    Up,
    Down,
}

impl Direction {
    fn move_allowed(&self, new_dir: &Direction) -> bool {
        match self {
            Direction::None => true,
            Direction::Left => new_dir != &Direction::Right,
            Direction::Right => new_dir != &Direction::Left,
            Direction::Up => new_dir != &Direction::Down,
            Direction::Down => new_dir != &Direction::Up,
        }
    }

    fn to_delta_direction(&self) -> Option<Vec2> {
        match self {
            Direction::None => None,
            Direction::Left => Some(Vec2 { x: -1f32, y: 0f32 }),
            Direction::Right => Some(Vec2 { x: 1f32, y: 0f32 }),
            Direction::Up => Some(Vec2 { x: 0f32, y: -1f32 }),
            Direction::Down => Some(Vec2 { x: 0f32, y: 1f32 }),
        }
    }
}

struct SnakeGame {
    body: VecDeque<Vec2>,
    fruit: Option<Vec2>,
    cur_direction: Direction,
    score: usize,
    elapsed_last_move: f32,
    current_state: SnakeState,
    extensions_left: usize,
    rng: ThreadRng,
    dir_locked: bool,
}

impl SnakeGame {
    fn new() -> GameResult<Self> {
        let mut snake = Self {
            body: VecDeque::new(),
            fruit: None,
            cur_direction: Direction::None,
            score: 0,
            elapsed_last_move: 0f32,
            current_state: SnakeState::Running,
            extensions_left: 2,
            rng: rand::thread_rng(),
            dir_locked: false,
        };

        snake.body.push_front(Vec2 {
            x: (WIDTH / 2) as f32,
            y: (HEIGHT / 2) as f32,
        });
        snake.place_fruit();

        Ok(snake)
    }

    fn reset(&mut self) {
        self.body.clear();
        self.fruit = None;
        self.cur_direction = Direction::None;
        self.score = 0;
        self.elapsed_last_move = 0f32;
        self.current_state = SnakeState::Running;
        self.extensions_left = 2;

        self.body.push_front(Vec2 {
            x: (WIDTH / 2) as f32,
            y: (HEIGHT / 2) as f32,
        });

        self.place_fruit();
    }

    fn tick(&mut self) -> SnakeState {
        self.dir_locked = false;
        if self.current_state == SnakeState::GameOver {
            return SnakeState::GameOver;
        }
        if self.current_state == SnakeState::GameWin {
            return SnakeState::GameWin;
        }

        let new_pos;
        if let Some(delta_pos) = self.cur_direction.to_delta_direction() {
            new_pos = *self
                .body
                .front()
                .expect(""head should exist by this function"")
                + delta_pos;
        } else {
            return SnakeState::Running;
        }

        // check borders
        if new_pos.x < 0 as f32 || new_pos.x >= WIDTH as f32 {
            return SnakeState::GameOver;
        }

        if new_pos.y < 0 as f32 || new_pos.y >= HEIGHT as f32 {
            return SnakeState::GameOver;
        }

        // check for body collision
        for part in &self.body {
            if *part == new_pos {
                return SnakeState::GameOver;
            }
        }

        // check against fruit
        let ate_fruit;
        if let Some(fruit_pos) = self.fruit {
            ate_fruit = new_pos == fruit_pos;
        } else {
            ate_fruit = false;
        }

        // push new head pos to front
        self.body.push_front(new_pos);

        // if we ate fruit keep it extended and increase score and so
        if ate_fruit {
            self.score += 1;
            self.extensions_left += 1;
            if self.score >= WIDTH * HEIGHT {
                return SnakeState::GameWin;
            } else {
                self.place_fruit();
            }
        }

        if self.extensions_left > 0 {
            self.extensions_left -= 1;
        } else {
            self.body.pop_back();
        }

        SnakeState::Running
    }

    fn change_direction(&mut self, new_dir: Direction) {
        if self.cur_direction.move_allowed(&new_dir) {
            self.dir_locked = true;
            self.cur_direction = new_dir
        }
    }

    fn place_fruit(&mut self) {
        const MAX_INDEX: usize = WIDTH * HEIGHT;
 
        'fruit_placement: loop { // comment here to enable syntax highlightning again '
            let rand_index = self.rng.gen_range(0..MAX_INDEX);
            let rand_pos = Vec2::new((rand_index % WIDTH) as f32, (rand_index / WIDTH) as f32);

            // check if a body position occupy this spot
            for part in &self.body {
                if *part == rand_pos {
                    continue 'fruit_placement;
                }
            }

            // not taken so
            self.fruit = Some(rand_pos);
            break 'fruit_placement;
        }
    }
}

impl event::EventHandler<ggez::GameError> for SnakeGame {
    fn update(&mut self, ctx: &mut Context) -> GameResult {
        let delta_time = ctx.time.delta().as_secs_f32();
        self.elapsed_last_move += delta_time;

        while self.elapsed_last_move >= TIME_BETWEEN_MOVES {
            self.elapsed_last_move -= TIME_BETWEEN_MOVES;

            self.current_state = self.tick();
        }

        Ok(())
    }

    fn draw(&mut self, ctx: &mut Context) -> GameResult {
        let mut canvas =
            graphics::Canvas::from_frame(ctx, graphics::Color::from([0.1, 0.1, 0.1, 1.0]));
        let tile_bounds = Rect::new(0f32, 0f32, TILE_SIZE, TILE_SIZE);

        let body_mesh = graphics::Mesh::new_rounded_rectangle(
            ctx,
            graphics::DrawMode::fill(),
            tile_bounds,
            TILE_ROUNDED_SIZE,
            Color::BLUE,
        )?;

        for part in &self.body {
            canvas.draw(&body_mesh, *part * TILE_SIZE);
        }

        if let Some(fruit_pos) = self.fruit {
            let fruit_mesh = graphics::Mesh::new_rounded_rectangle(
                ctx,
                graphics::DrawMode::fill(),
                tile_bounds,
                TILE_ROUNDED_SIZE,
                Color::RED,
            )?;

            canvas.draw(&fruit_mesh, fruit_pos * TILE_SIZE);
        }

        let score = Text::new(format!(""Score: {}"", self.score));
        canvas.draw(&score, Vec2::new(8f32, 8f32));

        canvas.finish(ctx)?;
        Ok(())
    }

    fn key_down_event(
        &mut self,
        _ctx: &mut Context,
        input: ggez::input::keyboard::KeyInput,
        _repeated: bool,
    ) -> Result<(), ggez::GameError> {
        if self.current_state == SnakeState::Running && !self.dir_locked {
            if input.keycode == Some(ggez::winit::event::VirtualKeyCode::Up) {
                self.change_direction(Direction::Up);
            }

            if input.keycode == Some(ggez::winit::event::VirtualKeyCode::Down) {
                self.change_direction(Direction::Down);
            }

            if input.keycode == Some(ggez::winit::event::VirtualKeyCode::Left) {
                self.change_direction(Direction::Left);
            }

            if input.keycode == Some(ggez::winit::event::VirtualKeyCode::Right) {
                self.change_direction(Direction::Right);
            }
        }

        if input.keycode == Some(ggez::winit::event::VirtualKeyCode::R) {
            self.reset();
        }

        Ok(())
    }
}

pub fn main() -> GameResult {
    let window_mode =
        WindowMode::default().dimensions(WIDTH as f32 * TILE_SIZE, HEIGHT as f32 * TILE_SIZE);

    let window_setup = WindowSetup::default().title(""Snake"").vsync(true);

    let cb = ggez::ContextBuilder::new(""Snake"", ""Psychloor"")
        .window_mode(window_mode)
        .window_setup(window_setup);
    let (ctx, event_loop) = cb.build()?;
    let state = SnakeGame::new()?;
    event::run(ctx, event_loop, state)
}
"
NvLnsQw6,Cone,Spocoman,C++,Sunday 17th of September 2023 07:08:24 AM CDT,"#define _USE_MATH_DEFINES
#include <iostream>
#include <string>
#include <cmath>

using namespace std;

int main() {
    double radius, height;
    cin >> radius >> height;

    double volume = M_PI * radius * radius * height / 3;

    double area = M_PI * radius * (radius + sqrt(radius * radius + height * height));

    printf(""volume = %.4f\narea = %.4f\n"", volume, area);

    return 0;
}"
0WeyGnSF,Computer Room,Spocoman,C++,Sunday 17th of September 2023 06:41:52 AM CDT,"#include <iostream>

using namespace std;

int main() {
    string month;
    cin >> month;

    int hours, personCount;
    cin >> hours >> personCount;

    string timeOfDay;
    cin >> timeOfDay;

    double personPrice = 0;

    if (month == ""march"" || month == ""april"" || month == ""may"") {
        if (timeOfDay == ""day"") {
            personPrice = 10.50;
        }
        else {
            personPrice = 8.40;
        }
    }
    else if (month == ""june"" || month == ""july"" || month == ""august"") {
        if (timeOfDay == ""day"") {
            personPrice = 12.60;
        }
        else {
            personPrice = 10.20;
        }
    }

    if (personCount >= 4) {
        personPrice *= 0.9;
    }

    if (hours >= 5) {
        personPrice /= 2;
    }

    double total = personPrice * personCount * hours;

    cout.setf(ios::fixed);
    cout.precision(2);

    cout << ""Price per person for one hour: "" << personPrice << endl;
    cout << ""Total cost of the visit: "" << total << endl;

    return 0;
}

Решение с тернарен оператор и printf():

#include <iostream>
#include <string>

using namespace std;

int main() {
    string month;
    cin >> month;

    int hours, personCount;
    cin >> hours >> personCount;

    string timeOfDay;
    cin >> timeOfDay;

    double personPrice =
        month == ""march"" || month == ""april"" || month == ""may"" ? (timeOfDay == ""day"" ? 10.50 : 8.40) :
        month == ""june"" || month == ""july"" || month == ""august"" ? (timeOfDay == ""day"" ? 12.60 : 10.20) : 0;

    if (personCount >= 4) {
        personPrice *= 0.9;
    }

    if (hours >= 5) {
        personPrice /= 2;
    }

    double total = personPrice * personCount * hours;

    printf(""Price per person for one hour: %.2f\nTotal cost of the visit: %.2f\n"", personPrice, total);

    return 0;
}"
tb7rFVvp,Hackers R faggots,coinwalk,JavaScript,Sunday 17th of September 2023 06:37:05 AM CDT,"var measly = parseFloat(document.getElementById('pct_balance').value);
var baby = Number((0.0001).toFixed(8));
var moon = baby;
var taget = 15000;
var tens = (baby*10);
var sevens = (baby*6.5);
var eights = (baby*7.5);
var threes = (baby*3.5);
var nobbolance = 0;
var couunt = 0;
var baboon = false;
var high = measly;  
var olzerer = ((Math.floor(measly/tens))*tens);
var muel = parseFloat(document.getElementById('pct_balance').value);
var zuel = parseFloat(document.getElementById('pct_balance').value);
var bart = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var lisa = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
 
function get(){
var look = (((zuel+moon)*1).toFixed(8));
var mean = (((zuel-moon)*1).toFixed(8));
muel = parseFloat(document.getElementById('pct_balance').value);
if ((look!=muel)&&(mean!=muel)&&(zuel!=muel)){
console.log(""hacked"");
return;
}else{
zuel = parseFloat(document.getElementById('pct_balance').value);
}
if ((zuel>(((Math.floor(zuel/tens))*tens)+sevens))&&(zuel<(((Math.floor(zuel/tens))*tens)+eights))&&(zuel>nobbolance)&&(zuel<olzerer)) {
    moon = Number((moon*2).toFixed(8));
    couunt = couunt+1;
    nobbolance = parseFloat(zuel);
}
if ((zuel>(((Math.floor(zuel/tens))*tens)+sevens))&&(zuel<(((Math.floor(zuel/tens))*tens)+eights))&&(zuel<nobbolance)&&(zuel<olzerer)) {
    moon = Number((moon*2).toFixed(8));
    couunt = couunt+1;
    nobbolance = parseFloat(zuel);
}
if ((zuel>(((Math.floor(zuel/tens))*tens)+sevens))&&(zuel<(((Math.floor(zuel/tens))*tens)+eights))&&(zuel>nobbolance)&&(zuel>=olzerer)) {
    moon = Number((moon*2).toFixed(8));
    nobbolance = parseFloat(zuel);
}
if ((zuel>(((Math.floor(zuel/tens))*tens)+sevens))&&(zuel<(((Math.floor(zuel/tens))*tens)+eights))&&(zuel<nobbolance)&&(zuel>=olzerer)) {
    moon = Number((moon*2).toFixed(8));
    nobbolance = parseFloat(zuel);
}
if ((couunt>=2)&&(zuel<(((Math.floor(zuel/tens))*tens)+threes))){
    moon = baby;
    couunt = 0;
    nobbolance = parseFloat(zuel);
}
if ((zuel>=(olzerer+(tens*4)))&&(zuel<(((Math.floor(zuel/tens))*tens)+sevens))){
    moon = baby;
    couunt = 0;
    nobbolance = 0;
    olzerer = parseFloat(zuel); 
}
    if (zuel >= taget) {
        console.log(""winner winner chicken dinner"");
        return;
    }     
    lisa = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
     if ((lisa > bart)&&(baboon)) {
var funeral = Number((muel - measly).toFixed(8));
console.log(""profit"");
console.log(funeral); 
      baboon = false; 
       bart = parseFloat(lisa);
    }
    if ((lisa == bart)&&(!baboon)) { 
        baboon = true; 
        $('#pct_chance').val(49.5);
        $('#pct_bet').val(((moon*1).toFixed(8)));
        $('#a_lo').click();
    }
    setTimeout(() => get(), 1);
}
get();
"
bLsGj3Fd,Copy Places for roblox,01KIkoSK,HTML,Sunday 17th of September 2023 06:24:57 AM CDT,"<!DOCTYPE html>
<html lang=""en"">
<head>
  <title>Roblox Place Copy Script</title>
</head>
<body>
  <script>
    // Import the Roblox API
    const robloxApi = require(""roblox-api"");

    // Get the place ID
    const placeId = prompt(""Enter the place ID:"");

    // Get the place data
    const placeData = robloxApi.getPlaceData(placeId);

    // Copy the place data
    const placeCopied = JSON.stringify(placeData);

    // Save the place data
    const fs = require(""fs"");
    fs.writeFile(""place.json"", placeCopied, (err) => {
      if (err) {
        console.log(""Error copying place: "" + err);
      } else {
        console.log(""Place successfully copied!"");
      }
    });
  </script>
</body>
</html>
"
