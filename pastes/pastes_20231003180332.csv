id,title,username,language,date,content
u8fKutVj,Untitled,Chefir,C#,Tuesday 3rd of October 2023 01:00:29 PM CDT,"static void Main(string[] args)
        {
            const string CommandAdd = ""1"";
            const string CommandRemove = ""2"";
            const string CommandDelete = ""3"";
            const string CommandInsert = ""4"";
            const string СommandExit = ""5"";

            string[] names = new string[0];
            string[] positions = new string[0];
            bool isUsed = true;

            while (isUsed)
            {
                Console.WriteLine($""{CommandAdd}. Добавить досье."");
                Console.WriteLine($""{CommandRemove}. Вывести все досье."");
                Console.WriteLine($""{CommandDelete}. Удалить досье."");
                Console.WriteLine($""{CommandInsert}. Поиск по Фамилии."");
                Console.WriteLine($""{СommandExit}. Выход."");
                string inputUser = Console.ReadLine();

                switch (inputUser)
                {
                    case CommandAdd:
                        AddInfo(ref names, ref positions);
                        break;

                    case CommandRemove:
                        WriteInfo(names, positions);
                        break;

                    case CommandDelete:
                        DeleteInfo(ref names, ref positions);
                        break;

                    case CommandInsert:
                        SearchName(names, positions);
                        break;

                    case СommandExit:
                            isUsed = false;
                        break;

                    default:
                        Console.WriteLine(""\nнет такой команды!!!"");
                        break;
                }
            }

            Console.WriteLine(""\nПрограмма завершена!!!"");
        }

        static void AddInfo(ref string[] names, ref string[] positions)
        {
            Console.WriteLine();
            Console.WriteLine(""Введите ФИО"");
            string inputNames = Console.ReadLine();    
            Console.WriteLine(""Введите должность"");
            string inputPositions = Console.ReadLine();
            names = IncreaseArray(names, inputNames);
            positions = IncreaseArray(positions, inputPositions);
            Console.WriteLine();
        }

        static string[] IncreaseArray(string[] array, string input)
        {
            Console.WriteLine();
            string[] tempArray = new string[array.Length + 1];   

            for (int i = 0; i < array.Length; i++)
            {
                tempArray[i] = array[i];
            }

            tempArray[tempArray.Length - 1] = input;
            Console.WriteLine();
            return tempArray;
        }

        static void WriteInfo(string[] names, string[] positions)
        {
            Console.WriteLine();
            Console.WriteLine(""Список досье:"");               

            for (int i = 0; i < names.Length; i++)
            {
                Console.WriteLine($""{(i + 1)}. {names[i]} - {positions[i]}"");
            }
            Console.WriteLine();
        }

        static void SearchName(string[] names, string[] positions)
        {
            Console.WriteLine();
            Console.WriteLine(""Введите фамилию:"");               
            string searchName = Console.ReadLine();

            for (int i = 0; i < names.Length; i++)
            {
                if (names[i].StartsWith(searchName))
                {
                    Console.WriteLine($""{(i + 1)}. {names[i]} - {positions[i]}"");
                }
            }

            Console.WriteLine();
        }

        static void DeleteInfo(ref string[] names, ref string[] positions)
        {
            Console.WriteLine();
            Console.WriteLine(""Введите номер досье"");
            int inputIndex = Convert.ToInt32(Console.ReadLine());       

            if ((inputIndex - 1) < names.Length && (inputIndex - 1) >= 0)
            {
                names = DecreaseArray(names, inputIndex);
                positions = DecreaseArray(positions, inputIndex);
                Console.WriteLine(""Досье успешно удалено"");
            }
            else
            {
                Console.WriteLine(""Недопустимый номер досье"");
            }

            Console.WriteLine();
        }

        static string[] DecreaseArray(string[] array, int input)
        {
            string[] tempArray = new string[array.Length - 1];
            
            for (int i = 0; i < input - 1; i++)
                tempArray[i] = array[i];

            for (int i = input; i < array.Length; i++)
                tempArray[i - 1] = array[i];

            return tempArray;
        }
"
wFFpT9fF,Ms-Gaming - Overlay (2023),faelcolt,PowerShell,Tuesday 3rd of October 2023 12:03:43 PM CDT,"Desative todas as opções de Xbox Games em Configurações do Windows
Depois abra o CMD como administrador e digite:

""Dism /online /cleanup-image /RestoreHealth"""
g22evnKQ,Untitled,sissou123,HTML,Tuesday 3rd of October 2023 11:58:39 AM CDT,"Generate Pdf from Html by using Django  
for more: 
https://cuty.io/A8Kmk"
559rrbE4,playerlist.lua,HomelessMage,Lua,Tuesday 3rd of October 2023 11:51:50 AM CDT,"Hook.Add(""chatMessage"", ""playerslist"", function(msg, client)
    if msg ~= ""!players"" then return end
    if bit32.band(client.Permissions, 0x40) == 0x40 then
        local msg = """"
        -- you have to loop through Client.ClientList do find the client that is controlling the character, or use Util.FindClientCharacter(character)
        -- Loop through alive players
        for player in Client.ClientList do
            if player.Character.IsHuman then
                    msg = msg .. ""\n"" .. ""[Alive]: "" .. player.Character.Name .. ""\n"" .. ""[Nickname]: "" .. player.Name .. ""\n"" ..  ""[SteamID]: "" .. player.SteamID ..""\n""
            end
        end
        -- Now loop through dead ones
        for character in Character.CharacterList do
            if character.IsHuman and character.IsDead and not character.IsBot then
                msg = msg .. ""\n"" .. ""[Dead]: "" .. character.Name .. ""\n""
            end
        end

        print(msg)

        return true
    end
end)"
UwDmMtsQ,Untitled,sissou123,JavaScript,Tuesday 3rd of October 2023 11:47:09 AM CDT," 20 projets en JavaScript
 https://cuty.io/I0EawA"
u2Mzddxh,Unlock Your Trading Potential with XM Group 50% Trading Bonus,fxvnpro,PHP,Tuesday 3rd of October 2023 11:46:21 AM CDT,https://www.fxvnpro.com/unlock-your-trading-potential-with-xm-group-50-trading-bonus/
Z67Dv6Ve,Последовательность,Yaniha,C#,Tuesday 3rd of October 2023 11:44:29 AM CDT,"using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Web;
using static System.Net.Mime.MediaTypeNames;

namespace CSLight
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int startNumber = 5;
            int maxNamber = 96;
            int step = 7;

            for (int i = startNumber; i <= maxNamber; i += step)
            {
                Console.WriteLine(i);
            }

            Console.ReadKey();
        }
    }
}"
CdTfUUbn,Untitled,sissou123,JavaScript,Tuesday 3rd of October 2023 11:40:46 AM CDT,"JavaScript:La Formation Ultime  
CLIQUER ici: 
https://cuty.io/kpzRL"
ZzA6ZCTi,Контроль выхода,Yaniha,C#,Tuesday 3rd of October 2023 11:39:08 AM CDT,"using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Web;
using static System.Net.Mime.MediaTypeNames;

namespace CSLight
{
    internal class Program
    {
        static void Main(string[] args)
        {
            string exit = ""exit"";
            string userInput;
            bool isWorking = true;

            while (isWorking)
            {
                userInput = Console.ReadLine();

                if (userInput == ""exit"") 
                {
                    Console.WriteLine(""Программа закрылась!"");
                    isWorking = false;
                }

            }

            Console.ReadKey();
        }
    }
}"
fmDntXYT,Освоение циклов,Yaniha,C#,Tuesday 3rd of October 2023 11:28:35 AM CDT,"using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Web;
using static System.Net.Mime.MediaTypeNames;

namespace CSLight
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int countRepetitions;
            string userInput;

            Console.WriteLine(""Введите любое слово) "");
            userInput = Console.ReadLine();
            Console.WriteLine(""Всколько раз повторять? "");
            countRepetitions = Convert.ToInt32(Console.ReadLine());

            for (int i = 0; i < countRepetitions; i++)
            {
                Console.WriteLine(userInput);
            }

            Console.ReadKey();
        }
    }
}"
xKpJCKw4,Roman Task 3.1,bogdanlinee,TypeScript,Tuesday 3rd of October 2023 11:15:15 AM CDT,"function summ(a: SumType2) {
    if (!a) {
        return 2022;
    }

    const x = Object.keys(a).map((k) => {
        const elem = a[k];

        if (typeof elem === undefined) {
            return 2022;
        }

        if (typeof elem.cvalue === 'object') {
            return summ(elem.cvalue);
        }

        if (typeof elem.cvalue === 'string') {
            return +elem.cvalue || 2022;
        }

        if (typeof elem.cvalue === 'undefined') {
            return 2022;
        }

        return elem.cvalue;
    });

    if (x.indexOf(2022) !== -1) {
        return 2022;
    }

    let sum = 0;

    for (let i = 0; i < x.length; i++) {
        sum += x[i];
    }

    return sum;
}

type SumType1 = {
    cvalue?: string | number | undefined | SumType1,
    [key: string]: SumType1,
};

type SumType2 = SumType1 | undefined;

let result = summ({
    hello: {
        cvalue: 2
    },
    world: {
        cvalue: {
            yay: {
                cvalue: ""2""
            }
        }
    }
});

console.log({result});"
sYLQTeSq,Untitled,AlexCoder12345,C++,Tuesday 3rd of October 2023 11:08:43 AM CDT,"#include <bits/stdc++.h>
using namespace std;

template<typename T>
struct single_list_first{
    struct front_node{
        T val;
        front_node* next;

        front_node(T _val) : val(_val), next(nullptr){}
    };

    front_node* first;

    single_list_first() : first(nullptr){}

    bool empty() {
        return first == nullptr;
    }

    void push_forward(T _val){
        auto n = new front_node(_val);

        if (empty()){
            first = n;
            return;
        }

        front_node* temp = first;
        first = n;
        first->next = temp;
    }

    void print(){
        front_node* cur = first;
        while (cur != nullptr){
            std::cout << cur->val << ' ';
            cur = cur->next;
        }

        std::cout << std::endl;
    }

    void print_backwards(){
        single_list_first list;
        front_node* cur = first;
        while (cur != nullptr){
            list.push_forward(cur->val);
            cur = cur->next;
        }

        cur = list.first;
        while (cur != nullptr){
            cout << cur->val << ' ';
            cur = cur->next;
        }

        cout << endl;
    }

    bool find(T _val){
        front_node* cur = first;
        bool found = false;
        while (cur != nullptr){
            if (cur->val == _val){
                found = true;
                break;
            }
            cur = cur->next;
        }

        return found;
    }

    int count(T _val){
        front_node* cur = first;
        int cnt = 0;
        while (cur != nullptr){
            if (cur->val == _val){
                ++cnt;
            }
            cur = cur->next;
        }

        return cnt;
    }

    void remove(T _val){
        if (!find(_val)){
            return;
        } else {
            front_node* cur = first;
            while (cur->next->val != _val){
                cur = cur->next;
            }

            cur->next = cur->next->next;
        }
    }
};

template<typename T>
struct single_list_last{
    struct back_node{
        T val;
        back_node* prev;

        back_node(T _val) : val(_val), prev(nullptr){}
    };

    back_node* last;

    single_list_last() : last(nullptr){}

    bool empty() {
        return last == nullptr;
    }

    void push_back(T _val){
        auto n = new back_node(_val);

        if (empty()){
            last = n;
            return;
        }

        back_node* temp = last;
        last = n;
        last->prev = temp;
    }

    void print(){
        single_list_last list;
        back_node* cur = last;
        while (cur != nullptr){
            list.push_back(cur->val);
            cur = cur->prev;
        }

        cur = list.last;
        while (cur != nullptr){
            cout << cur->val << ' ';
            cur = cur->prev;
        }

        cout << endl;
    }

    void print_backwards(){
        back_node* cur = last;
        while (cur != nullptr){
            cout << cur->val << ' ';
            cur = cur->prev;
        }

        cout << endl;
    }

    bool find(T _val){
        back_node* cur = last;
        bool found = false;
        while (cur != nullptr){
            if (cur->val == _val){
                found = true;
                break;
            }
            cur = cur->prev;
        }

        return found;
    }

    int count(T _val){
        back_node* cur = last;
        int cnt = 0;
        while (cur != nullptr){
            if (cur->val == _val){
                ++cnt;
            }
            cur = cur->prev;
        }

        return cnt;
    }

    void remove(T _val){
        if (!find(_val)){
            return;
        } else {
            back_node* cur = last;
            while (cur->prev->val != _val){
                cur = cur->prev;
            }

            cur->prev = cur->prev->prev;
        }
    }
};

template<typename T>
struct sorted_single_list{
    struct front_node{
        T val;
        front_node* next;

        front_node(T _val) : val(_val), next(nullptr){}
    };

    front_node* first;

    sorted_single_list() : first(nullptr){}

    bool empty() {
        return first == nullptr;
    }

    void insert(T _val){
        auto n = new front_node(_val);

        if (empty()){
            first = n;
            return;
        }

        front_node* cur = first;
        while (cur->val < _val && cur->next != nullptr){
            cur = cur->next;
        }

        n->next = cur->next;
        cur->next = n;
    }

    void print(){
        front_node* cur = first;
        while (cur != nullptr){
            std::cout << cur->val << ' ';
            cur = cur->next;
        }

        std::cout << std::endl;
    }

    void print_backwards(){
        sorted_single_list list;
        front_node* cur = first;
        while (cur != nullptr){
            list.push_forward(cur->val);
            cur = cur->next;
        }

        cur = list.first;
        while (cur != nullptr){
            std::cout << cur->val << ' ';
            cur = cur->next;
        }

        std::cout << std::endl;
    }

    bool find(T _val){
        front_node* cur = first;
        bool found = false;
        while (cur != nullptr){
            if (cur->val == _val){
                found = true;
                break;
            }
            cur = cur->next;
        }

        return found;
    }

    int count(T _val){
        front_node* cur = first;
        int cnt = 0;
        while (cur != nullptr){
            if (cur->val == _val){
                ++cnt;
            }
            cur = cur->next;
        }

        return cnt;
    }

    void remove(T _val){
        if (!find(_val)){
            return;
        } else {
            front_node* cur = first;
            while (cur->next->val != _val){
                cur = cur->next;
            }

            cur->next = cur->next->next;
        }
    }
};

template<typename T>
struct sorted_double_list{
    struct node{
        T val;
        node* next;
        node* prev;

        node(T _val) : val(_val), next(nullptr), prev(nullptr){}
    };

    node* first;
    node* last;

    sorted_double_list() : first(nullptr){}

    bool empty() {
        return first == nullptr;
    }

    void insert(T _val){
        auto n = new node(_val);

        if (empty()){
            first = n;
            last = n;
            return;
        }

        node* cur = first;
        while (cur->val < _val && cur->next != nullptr){
            cur = cur->next;
        }

        if (cur->val >= _val){
            cur = cur->prev;
        }

        if (cur == last){
            node* temp = last;
            last = n;
            last->prev = temp;
            temp->next = last;
        } else if (cur == first){
            node* temp = first;
            first = n;
            first->next = temp;
            temp->prev = first;
        } else {
            node* temp = cur->next;
            cur->next = n;
            n->next = temp;
            n->prev = cur;
            temp->prev = n;
        }
    }

    void print(){
        node* cur = first;
        while (cur != nullptr){
            std::cout << cur->val << ' ';
            cur = cur->next;
        }

        std::cout << std::endl;
    }

    void print_backwards(){
        node* cur = last;
        while (cur != nullptr){
            std::cout << cur->val << ' ';
            cur = cur->prev;
        }

        std::cout << std::endl;
    }

    bool find(T _val){
        node* cur = first;
        bool found = false;
        while (cur != nullptr){
            if (cur->val == _val){
                found = true;
                break;
            }
            cur = cur->next;
        }

        return found;
    }

    int count(T _val){
        node* cur = first;
        int cnt = 0;
        while (cur != nullptr){
            if (cur->val == _val){
                ++cnt;
            }
            cur = cur->next;
        }

        return cnt;
    }

    void remove(T _val){
        if (!find(_val)){
            return;
        } else {
            node* cur = first;
            while (cur->val != _val && cur->next != nullptr){
                cur = cur->next;
            }

            if (cur == first){
                first = cur->next;
                first->prev = nullptr;
            } else if (cur == last){
                last = cur->prev;
                last->next = nullptr;
            } else {
                node* temp = cur;
                temp->prev->next = cur->next;
                temp->next->prev = cur->prev;
            }
        }
    }
};

int main() {
    sorted_double_list<int> list;
    list.insert(1);
    list.insert(2);
    list.insert(3);
    list.insert(5);
    list.insert(4);
    list.print();
    list.remove(3);
    list.print();
}
"
2FbnNv9Z,Untitled,Denis_Konstantinov,JSON,Tuesday 3rd of October 2023 10:25:55 AM CDT,"{
    ""version"": ""2.4"",
    ""elements"": [
        {
            ""type"": ""standalone"",
            ""document"": {
                ""name"": ""Rental agreement"",
                ""type"": ""document"",
                ""count"": ""1"",
                ""galleryEnabled"": true,
                ""registrationParameters"": [
                    {
                        ""key"": ""Key"",
                        ""value"": ""Value""
                    }
                ],
                ""pages"": [
                    {
                        ""name"": ""Page"",
                        ""count"": ""any"",
                        ""detectors"": null
                    }
                ]
            }
        },
        {
            ""type"": ""standalone"",
            ""document"": {
                ""name"": ""Utility bill"",
                ""type"": ""document"",
                ""count"": ""1"",
                ""galleryEnabled"": true,
                ""registrationParameters"": null,
                ""pages"": [
                    {
                        ""name"": ""Page"",
                        ""count"": ""any"",
                        ""detectors"": null
                    }
                ]
            }
        },
        {
            ""type"": ""standalone"",
            ""document"": {
                ""name"": ""Additional utility bill"",
                ""type"": ""document"",
                ""count"": ""any"",
                ""galleryEnabled"": true,
                ""registrationParameters"": null,
                ""pages"": [
                    {
                        ""name"": ""Page"",
                        ""count"": ""any"",
                        ""detectors"": null
                    }
                ]
            }
        },
        {
            ""type"": ""single_choice"",
            ""name"": ""Proof of residence"",
            ""documents"": [
                {
                    ""name"": ""Rental agreement"",
                    ""type"": ""document"",
                    ""count"": ""1"",
                    ""galleryEnabled"": true,
                    ""registrationParameters"": null,
                    ""pages"": [
                        {
                            ""name"": ""Page"",
                            ""count"": ""any"",
                            ""detectors"": null
                        }
                    ]
                },
                {
                    ""name"": ""Utility bill"",
                    ""type"": ""document"",
                    ""count"": ""2"",
                    ""galleryEnabled"": true,
                    ""registrationParameters"": null,
                    ""pages"": [
                        {
                            ""name"": ""Page"",
                            ""count"": ""any"",
                            ""detectors"": null
                        }
                    ]
                }
            ]
        },
        {
            ""type"": ""single_choice"",
            ""name"": ""Proof of identity"",
            ""documents"": [
                {
                    ""name"": ""Residence permit"",
                    ""type"": ""idcard"",
                    ""count"": ""1"",
                    ""galleryEnabled"": true,
                    ""registrationParameters"": null,
                    ""pages"": [
                        {
                            ""name"": ""Front side"",
                            ""count"": ""1"",
                            ""detectors"": [
                                ""face""
                            ]
                        },
                        {
                            ""name"": ""Back side"",
                            ""count"": ""1"",
                            ""detectors"": [
                                ""barcode""
                            ]
                        }
                    ]
                },
                {
                    ""name"": ""Passport"",
                    ""type"": ""passport"",
                    ""count"": ""1"",
                    ""galleryEnabled"": true,
                    ""registrationParameters"": null,
                    ""pages"": [
                        {
                            ""name"": ""Photo page spread"",
                            ""count"": ""1"",
                            ""detectors"": [
                                ""face""
                            ]
                        }
                    ]
                },
                {
                    ""name"": ""International passport"",
                    ""type"": ""passport"",
                    ""count"": ""1"",
                    ""galleryEnabled"": true,
                    ""registrationParameters"": null,
                    ""pages"": [
                        {
                            ""name"": ""Photo page spread"",
                            ""count"": ""1"",
                            ""detectors"": [
                                ""face""
                            ]
                        },
                        {
                            ""name"": ""Page"",
                            ""count"": ""any"",
                            ""detectors"": null
                        }
                    ]
                },
                {
                    ""name"": ""Birth certificate"",
                    ""type"": ""document"",
                    ""count"": ""1"",
                    ""galleryEnabled"": true,
                    ""registrationParameters"": null,
                    ""pages"": [
                        {
                            ""name"": ""Page"",
                            ""count"": ""any"",
                            ""detectors"": null
                        }
                    ]
                }
            ]
        }
    ]
}
"
9xrLc0Dz,Cert checker,MrShandy,Python,Tuesday 3rd of October 2023 09:41:23 AM CDT,"import socket
import ssl
import datetime
from urllib.parse import urlparse
from dateutil import parser


def notification(days):
    print(f""Пора обновить сертификат. Дней до истечения: {days}"")


def check_ssl_expiry(domain):
    try:
        context = ssl.create_default_context()
        conn = context.wrap_socket(socket.socket(socket.AF_INET), server_hostname=domain)
        conn.settimeout(3.0)

        with conn:
            conn.connect((domain, 443))
            cert = conn.getpeercert()

            expiry_date = parser.parse(cert['notAfter'])

            days_until_expiry = (expiry_date.replace(tzinfo=None) - datetime.datetime.utcnow()).days
            print(f'Дней до истечения: {days_until_expiry}')
            if days_until_expiry < 30:
                notification(days_until_expiry)

    except (ssl.CertificateError, ssl.SSLError, socket.timeout, ConnectionRefusedError) as e:
        print(f""Ошибка при проверке SSL: {e}"")


url = ""https://shandy-dev.ru""
parsed_url = urlparse(url)
domain = parsed_url.netloc

check_ssl_expiry(domain)
"
wkSCrgB3,AUTO_MODERATION_MAX_RULES_OF_TYPE_EXCEEDED,tomtomvader298,JavaScript,Tuesday 3rd of October 2023 09:17:58 AM CDT,"//error
DiscordAPIError[50035]: Invalid Form Body
0[AUTO_MODERATION_MAX_RULES_OF_TYPE_EXCEEDED]: Maximum number of rules with trigger type 4 is 1
    at handleErrors (C:\Users\USER\Desktop\Cheese Technician\node_modules\@discordjs\rest\dist\index.js:687:13)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at async SequentialHandler.runRequest (C:\Users\USER\Desktop\Cheese Technician\node_modules\@discordjs\rest\dist\index.js:1072:23)
    at async SequentialHandler.queueRequest (C:\Users\darth\Desktop\Cheese Technician\node_modules\@discordjs\rest\dist\index.js:913:14)
    at async _REST.request (C:\Users\USER\Desktop\Cheese Technician\node_modules\@discordjs\rest\dist\index.js:1218:22)
    at async AutoModerationRuleManager.create (C:\Users\USER\Desktop\Cheese Technician\node_modules\discord.js\src\managers\AutoModerationRuleManager.js:118:18) {
  requestBody: {
    files: undefined,
    json: {
      name: 'Bad Words',
      event_type: 1,
      trigger_type: 4,
      trigger_metadata: {
        keyword_filter: undefined,
        regex_patterns: undefined,
        presets: [ 1, 2, 3 ],
        allow_list: undefined,
        mention_total_limit: undefined,
        mention_raid_protection_enabled: undefined
      },
      actions: [
        {
          type: 1,
          metadata: {
            duration_seconds: undefined,
            channel_id: undefined,
            custom_message: 'undefined Please refrain from using inappropriate language.'
          }
        },
        {
          type: 2,
          metadata: {
            duration_seconds: undefined,
            channel_id: '917549440347299840',
            custom_message: 'A User (undefined) Was Flagged For: ** using inappropriate language**'
          }
        }
      ],
      enabled: undefined,
      exempt_roles: undefined,
      exempt_channels: undefined
    }
  },
  rawError: {
    message: 'Invalid Form Body',
    code: 50035,
    errors: {
      _errors: [
        {
          code: 'AUTO_MODERATION_MAX_RULES_OF_TYPE_EXCEEDED',
          message: 'Maximum number of rules with trigger type 4 is 1'
        }
      ]
    }
  },
  code: 50035,
  status: 400,
  method: 'POST',
  url: ''
}

//Bad Word Detection:
async function setupBadWordAutoModeration(guild) {
  const filter = new Filter()
  const badWordRule = {
    name: 'Bad Words',
    reason: 'Using Inappropriate Language Is Not Allowed In This Server.',
    eventType: AutoModerationRuleEventType.MessageSend,
    triggerType: AutoModerationRuleTriggerType.KeywordPreset,
    triggerMetadata: {
      presets: [AutoModerationRuleKeywordPresetType.Profanity, AutoModerationRuleKeywordPresetType.SexualContent, AutoModerationRuleKeywordPresetType.Slurs], // Include all three presets in triggerMetadata
    },
    validate: async (message) => {
      if (message.member.permissions.has(PermissionFlagsBits.Administrator)) {
        return false; // Administration Bypass
      }
      const content = message.content.toLowerCase();
      const presets = [AutoModerationRuleKeywordPresetType.Profanity, AutoModerationRuleKeywordPresetType.SexualContent, AutoModerationRuleKeywordPresetType.Slurs];// Include all three presets
      return presets.some((preset) => filter.isProfane(content, { preset }));
    },
    actions: [
      {
        type: AutoModerationActionType.BlockMessage,
        metadata: { customMessage: `${guild.member} Please refrain from using inappropriate language.` },
      },
      {
        type: AutoModerationActionType.SendAlertMessage,
        metadata: { customMessage: `A User (${guild.member}) Was Flagged For: ** using inappropriate language**`, channel: '917549440347299840' }
      },
    ]
  };


  guild.autoModerationRules.create(badWordRule);
  guild.autoModerationEnabled = true;
}

//Bad Nickname Detection:
async function setupBlockedNicknameAutoModeration(guild) {
  const filter = new Filter()

  const blockedNicknameRule = {
    name: 'Blocked Nicknames',
    reason: 'We Do Not Condemn Inappropriate Knicknames In This Server.',
    eventType: AutoModerationRuleEventType.guildMemberUpdate,
    triggerType: AutoModerationRuleTriggerType.Keyword,
    triggerMetadata: { regexPatterns: filter.isProfane(), mentionRaidProtectionEnabled: false },

    validate: async (member) => {
      if (message.member.permissions.has(PermissionFlagsBits.Administrator)) {
        return false; // Administration Bypass
      }
      const nickname = member.displayName.toLowerCase();
      return filter.isProfane(nickname).then(member.setNickname(''));

    },
    actions: [
      {
        type: AutoModerationRuleEventType.guildMemberUpdate,
        metadata: { customMessage: `${guild.member} Please refrain from using inappropriate nicknames.` }
      },
      {
        type: AutoModerationActionType.SendAlertMessage,
        metadata: { customMessage: `A User (${guild.member}) Was Flagged For: **We Do Not Condemn Inappropriate Knicknames In This Server**`, channel: '917549440347299840' }
      },
    ]
  };

  guild.autoModerationRules.create(blockedNicknameRule);
  guild.autoModerationEnabled = true;
}

//Mass Mention Detection:
async function setupMentionSpamAutoModeration(guild) {

  const mentionSpamRule = {
    name: 'Mention Spam',
    reason: 'Excessive mention spam is not allowed in this server.',
    eventType: AutoModerationRuleEventType.MessageSend,
    triggerType: AutoModerationRuleTriggerType.MentionSpam,
    triggerMetadata: {
      mentionTotalLimit: 6, mentionRaidProtectionEnabled: true // Maximum number of allowed mentions
    },
    validate: async (message) => {
      if (message.member.permissions.has(PermissionFlagsBits.Administrator)) {
        return false; // Administration Bypass
      }
      const mentionCount = message.mentions.users.size;
      if (mentionCount > 6) {
        return true; // Block if excessive mentions are detected
      }
      return false; // Do not block if within limits
    },
    actions: [
      {
        type: AutoModerationActionType.BlockMessage,
        metadata: { customMessage: `${guild.member} Please refrain from Excessive Mention Spam.` },
      },
      {
        type: AutoModerationActionType.Timeout,
        metadata: { durationSeconds: 1200 },//Must Use Seconds !!IMPORTANT!!
      },
      {
        type: AutoModerationActionType.SendAlertMessage,
        metadata: { customMessage: `A User (${guild.member}) Was Flagged For: ** Excessive mention spam alert**, Timed-Out For \`20 Minutes\``, channel: '917549440347299840' }
      },
    ]

  };

  guild.autoModerationRules.create(mentionSpamRule);
  guild.autoModerationEnabled = true;

}

//Mass Spam Detection:
async function setupMassSpamAutoModeration(guild) {


  const spamRule = {
    name: 'Spam Rule',
    reason: 'Sending multiple messages within a short time frame is considered spamming.',
    eventType: AutoModerationRuleEventType.MessageSend,
    triggerType: AutoModerationRuleTriggerType.Spam,
    triggerMetadata: { mentionRaidProtectionEnabled: true },
    validate: async (message) => {
      if (message.member.permissions.has(PermissionFlagsBits.Administrator)) {
        return false; // Administration Bypass
      }
      const channelMessages = await message.channel.messages.fetch({ limit: 5 });
      if (channelMessages.size >= 5) {
        return true; // Block if message rate limit exceeded
      }
      return false; // Do not block if within limits
    },
    actions: [
      {
        type: AutoModerationActionType.BlockMessage,
        metadata: { customMessage: `${guild.member} Please refrain from Excessive Spamming.` },
      },
      {
        type: AutoModerationActionType.SendAlertMessage,
        metadata: { customMessage: `A User (${guild.member}) Was Flagged For: ** Excessive spamming alert**`, channel: '917549440347299840' }
      },
    ]
  };


  guild.autoModerationRules.create(spamRule);
  guild.autoModerationEnabled = true;
}

//Block Unallowed Discord Server Invites:
async function setupInviteLinkAutoModeration(guild) {

  const inviteLinkRule = {
    name: 'Invite Link Filter',
    reason: 'Sending invite links is restricted to administrators only.',
    eventType: AutoModerationRuleEventType.MessageSend,
    triggerType: AutoModerationRuleTriggerType.Keyword,
    triggerMetadata: {
      regexPatterns: /(https?:\/\/)?(www\.)?(discord\.(gg|io|me|li)|discord(app)?\.com\/invite)\/.+[a-z]/i,
    },
    validate: async (message) => {
      if (message.member.permissions.has(PermissionFlagsBits.Administrator)) {
        return false; // Administration Bypass
      }
    },
    actions: [
      {
        type: AutoModerationActionType.BlockMessage,
        metadata: { customMessage: `${guild.member} Please refrain from sending invite links, not allowed.` },
      },
      {
        type: AutoModerationActionType.Timeout,
        metadata: { durationSeconds: 1200 },//Must Use Seconds !!IMPORTANT!!
      },
      {
        type: AutoModerationActionType.SendAlertMessage,
        metadata: { customMessage: `A User (${guild.member}) Was Flagged For: **Invite link alert**, Timed-Out For \`20 Minutes\``, channel: '917549440347299840' }
      },
    ]
  };

  guild.autoModerationRules.create(inviteLinkRule);
  guild.autoModerationEnabled = true;
}"
aca1sggx,Sub Sum JS Advanced,TZinovieva,JavaScript,Tuesday 3rd of October 2023 09:15:14 AM CDT,"function subSum(arr, startIndex, endIndex) {
    if (!Array.isArray(arr)) {
        return NaN;
    }

    if (arr.length === 0) {
        return 0;
    }

    startIndex = Math.max(startIndex, 0);

    endIndex = Math.min(endIndex, arr.length - 1);

    let sum = 0;

    for (let i = startIndex; i <= endIndex; i++) {
        if (typeof arr[i] !== ""number"") {
            return NaN;
        }
        sum += arr[i];
    }

    return sum;
}"
Yk3VnGf5,News Oct3 23,Newscaster_Ned,Email,Tuesday 3rd of October 2023 08:33:32 AM CDT,".‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎1‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎2‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎3‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎T‎e‎s‎t‎ ‎c‎o‎m‎p‎l‎e‎t‎e‎.‎

M‎o‎r‎n‎i‎n‎g‎,‎ ‎e‎v‎e‎r‎y‎o‎n‎e‎.‎ ‎H‎e‎r‎e‎'‎s‎ ‎t‎h‎e‎ ‎n‎e‎w‎s‎.‎

F‎a‎r‎a‎g‎e‎'‎s‎ ‎I‎n‎f‎l‎u‎e‎n‎c‎e‎ ‎o‎n‎ ‎N‎e‎x‎t‎ ‎T‎o‎r‎y‎ ‎L‎e‎a‎d‎e‎r‎ ‎a‎s‎ ‎P‎a‎r‎t‎y‎ ‎W‎a‎k‎e‎s‎ ‎U‎p‎ ‎t‎o‎ ‎T‎r‎a‎d‎ ‎V‎a‎l‎u‎e‎s‎
U‎K‎ ‎t‎o‎ ‎B‎a‎n‎ ‎T‎r‎a‎n‎s‎g‎e‎n‎d‎e‎r‎s‎ ‎f‎r‎o‎m‎ ‎F‎e‎m‎a‎l‎e‎ ‎H‎o‎s‎p‎i‎t‎a‎l‎ ‎W‎a‎r‎d‎s‎
R‎o‎b‎e‎r‎t‎ ‎P‎a‎t‎t‎i‎n‎s‎o‎n‎ ‎R‎e‎v‎e‎a‎l‎s‎ ‎A‎n‎x‎i‎e‎t‎y‎ ‎O‎v‎e‎r‎ ‎L‎a‎c‎k‎ ‎o‎f‎ ‎J‎o‎b‎ ‎S‎e‎c‎u‎r‎i‎t‎y‎ ‎i‎n‎ ‎F‎i‎l‎m‎ ‎I‎n‎d‎u‎s‎t‎r‎y‎
‘‎B‎r‎e‎a‎k‎i‎n‎g‎ ‎B‎i‎d‎e‎n‎’‎:‎ ‎C‎h‎i‎n‎a‎-‎L‎i‎n‎k‎e‎d‎ ‎U‎n‎i‎v‎.‎ ‎o‎f‎ ‎D‎e‎l‎a‎w‎a‎r‎e‎ ‎B‎i‎d‎e‎n‎ ‎P‎a‎r‎t‎n‎e‎r‎s‎h‎i‎p‎
N‎e‎w‎s‎o‎m‎ ‎U‎p‎e‎n‎d‎s‎ ‎2‎0‎2‎4‎ ‎S‎e‎n‎a‎t‎e‎ ‎R‎a‎c‎e‎:‎ ‎L‎a‎p‎h‎o‎n‎z‎a‎ ‎B‎u‎t‎l‎e‎r‎ ‎C‎a‎n‎ ‎R‎u‎n‎ ‎I‎f‎ ‎S‎h‎e‎ ‎W‎a‎n‎t‎s‎
I‎s‎r‎a‎e‎l‎i‎ ‎P‎o‎l‎i‎c‎e‎ ‎A‎r‎r‎e‎s‎t‎ ‎F‎u‎g‎i‎t‎i‎v‎e‎ ‎M‎e‎x‎i‎c‎a‎n‎ ‎D‎i‎p‎l‎o‎m‎a‎t‎ ‎o‎n‎ ‎R‎a‎p‎e‎ ‎C‎h‎a‎r‎g‎e‎s‎
S‎i‎n‎a‎l‎o‎a‎’‎s‎ ‎C‎h‎a‎p‎i‎t‎o‎s‎ ‎P‎l‎a‎c‎e‎ ‎B‎a‎n‎n‎e‎r‎ ‎O‎r‎d‎e‎r‎i‎n‎g‎ ‎a‎ ‎S‎t‎o‎p‎ ‎t‎o‎ ‎A‎l‎l‎ ‎F‎e‎n‎t‎a‎n‎y‎l‎ ‎P‎r‎o‎d‎u‎c‎t‎i‎o‎n‎
G‎e‎t‎ ‎A‎l‎l‎ ‎B‎r‎e‎i‎t‎b‎a‎r‎t‎ ‎N‎e‎w‎s‎ ‎H‎e‎r‎e‎
E‎x‎c‎l‎u‎s‎i‎v‎e‎:‎ ‎C‎h‎i‎n‎a‎-‎L‎i‎n‎k‎e‎d‎ ‎U‎n‎i‎v‎e‎r‎s‎i‎t‎y‎ ‎o‎f‎ ‎D‎e‎l‎a‎w‎a‎r‎e‎ ‎B‎i‎d‎e‎n‎ ‎P‎a‎r‎t‎n‎e‎r‎s‎h‎i‎p‎ ‎W‎a‎s‎ ‎H‎u‎n‎t‎e‎r‎’‎s‎ ‎’‎B‎a‎b‎y‎’‎

R‎e‎v‎e‎a‎l‎e‎d‎:‎ ‎P‎a‎r‎t‎ ‎o‎f‎ ‎‘‎W‎e‎a‎l‎t‎h‎ ‎C‎r‎e‎a‎t‎i‎o‎n‎’‎ ‎S‎t‎r‎a‎t‎e‎g‎y‎ ‎f‎o‎r‎ ‎J‎o‎e‎

F‎a‎m‎i‎l‎y‎,‎ ‎F‎r‎i‎e‎n‎d‎s‎ ‎B‎a‎g‎g‎e‎d‎ ‎C‎a‎s‎h‎

*‎’‎B‎r‎e‎a‎k‎i‎n‎g‎ ‎B‎i‎d‎e‎n‎’‎ ‎H‎i‎t‎s‎ ‎S‎h‎e‎l‎v‎e‎s‎*‎
U‎D‎-‎B‎i‎d‎e‎n‎-‎B‎B‎
T‎h‎e‎ ‎f‎o‎l‎l‎o‎w‎ ‎a‎r‎t‎i‎c‎l‎e‎ ‎w‎a‎s‎ ‎a‎d‎a‎p‎t‎e‎d‎ ‎f‎r‎o‎m‎ ‎B‎r‎e‎i‎t‎b‎a‎r‎t‎ ‎E‎d‎i‎t‎o‎r‎-‎i‎n‎-‎C‎h‎i‎e‎f‎ ‎A‎l‎e‎x‎ ‎M‎a‎r‎l‎o‎w‎’‎s‎ ‎n‎e‎w‎ ‎b‎o‎o‎k‎ ‎“‎B‎r‎e‎a‎k‎i‎n‎g‎ ‎B‎i‎d‎e‎n‎:‎ ‎E‎x‎p‎o‎s‎i‎n‎g‎ ‎t‎h‎e‎ ‎H‎i‎d‎d‎e‎n‎ ‎F‎o‎r‎c‎e‎s‎ ‎a‎n‎d‎ ‎S‎e‎c‎r‎e‎t‎ ‎M‎o‎n‎e‎y‎ ‎M‎a‎c‎h‎i‎n‎e‎ ‎B‎e‎h‎i‎n‎d‎ ‎J‎o‎e‎ ‎B‎i‎d‎e‎n‎,‎ ‎H‎i‎s‎ ‎F‎a‎m‎i‎l‎y‎,‎ ‎a‎n‎d‎ ‎H‎i‎s‎ ‎A‎d‎m‎i‎n‎i‎s‎t‎r‎a‎t‎i‎o‎n‎,‎”‎ ‎w‎h‎i‎c‎h‎ ‎i‎s‎ ‎o‎u‎t‎ ‎n‎o‎w‎.‎ ‎

L‎a‎p‎h‎o‎n‎z‎a‎ ‎B‎u‎t‎l‎e‎r‎ ‎R‎e‎m‎o‎v‎e‎s‎ ‎'‎M‎a‎r‎y‎l‎a‎n‎d‎'‎ ‎a‎s‎ ‎R‎e‎s‎i‎d‎e‎n‎c‎e‎ ‎A‎f‎t‎e‎r‎ ‎C‎A‎ ‎S‎e‎n‎a‎t‎e‎ ‎S‎e‎a‎t‎ ‎P‎i‎c‎k‎
L‎a‎p‎h‎o‎n‎z‎a‎ ‎B‎u‎t‎l‎e‎r‎ ‎R‎e‎m‎o‎v‎e‎s‎ ‎'‎M‎a‎r‎y‎l‎a‎n‎d‎'‎ ‎a‎s‎ ‎R‎e‎s‎i‎d‎e‎n‎c‎e‎ ‎A‎f‎t‎e‎r‎ ‎C‎A‎ ‎S‎e‎n‎a‎t‎e‎ ‎S‎e‎a‎t‎ ‎P‎i‎c‎k‎
4‎,‎7‎6‎2‎

M‎a‎r‎k‎ ‎L‎e‎v‎i‎n‎ ‎H‎i‎t‎s‎ ‎G‎a‎e‎t‎z‎:‎ ‎M‎c‎C‎a‎r‎t‎h‎y‎ ‎I‎s‎ ‎‘‎M‎o‎r‎e‎ ‎C‎o‎n‎s‎e‎r‎v‎a‎t‎i‎v‎e‎ ‎T‎h‎a‎n‎ ‎H‎e‎ ‎I‎s‎’‎
9‎0‎0‎
E‎U‎ ‎W‎i‎l‎l‎ ‎E‎x‎p‎a‎n‎d‎ ‎i‎n‎t‎o‎ ‎R‎u‎s‎s‎i‎a‎n‎-‎C‎o‎n‎t‎r‎o‎l‎l‎e‎d‎ ‎A‎r‎e‎a‎s‎ ‎o‎f‎ ‎U‎k‎r‎a‎i‎n‎e‎:‎ ‎G‎e‎r‎m‎a‎n‎ ‎M‎i‎n‎i‎s‎t‎e‎r‎
E‎U‎ ‎W‎i‎l‎l‎ ‎E‎x‎p‎a‎n‎d‎ ‎i‎n‎t‎o‎ ‎R‎u‎s‎s‎i‎a‎n‎-‎C‎o‎n‎t‎r‎o‎l‎l‎e‎d‎ ‎A‎r‎e‎a‎s‎ ‎o‎f‎ ‎U‎k‎r‎a‎i‎n‎e‎:‎ ‎G‎e‎r‎m‎a‎n‎ ‎M‎i‎n‎i‎s‎t‎e‎r‎
1‎6‎8‎
O‎r‎e‎g‎o‎n‎ ‎M‎i‎d‎d‎l‎e‎ ‎S‎c‎h‎o‎o‎l‎ ‎W‎o‎n‎'‎t‎ ‎S‎a‎y‎ ‎i‎f‎ ‎S‎t‎u‎d‎e‎n‎t‎ ‎W‎h‎o‎ ‎A‎t‎t‎a‎c‎k‎e‎d‎ ‎G‎i‎r‎l‎s‎ ‎i‎s‎ ‎T‎r‎a‎n‎s‎g‎e‎n‎d‎e‎r‎
O‎r‎e‎g‎o‎n‎ ‎M‎i‎d‎d‎l‎e‎ ‎S‎c‎h‎o‎o‎l‎ ‎W‎o‎n‎'‎t‎ ‎S‎a‎y‎ ‎i‎f‎ ‎S‎t‎u‎d‎e‎n‎t‎ ‎W‎h‎o‎ ‎A‎t‎t‎a‎c‎k‎e‎d‎ ‎G‎i‎r‎l‎s‎ ‎i‎s‎ ‎T‎r‎a‎n‎s‎g‎e‎n‎d‎e‎r‎
4‎0‎6‎
S‎u‎r‎v‎e‎y‎:‎ ‎M‎o‎r‎e‎ ‎T‎h‎a‎n‎ ‎4‎ ‎i‎n‎ ‎1‎0‎ ‎T‎r‎a‎n‎s‎g‎e‎n‎d‎e‎r‎ ‎A‎d‎u‎l‎t‎s‎ ‎F‎e‎e‎l‎ ‎D‎e‎p‎r‎e‎s‎s‎i‎o‎n‎,‎ ‎A‎n‎x‎i‎e‎t‎y‎
S‎u‎r‎v‎e‎y‎:‎ ‎M‎o‎r‎e‎ ‎T‎h‎a‎n‎ ‎4‎ ‎i‎n‎ ‎1‎0‎ ‎T‎r‎a‎n‎s‎g‎e‎n‎d‎e‎r‎ ‎A‎d‎u‎l‎t‎s‎ ‎F‎e‎e‎l‎ ‎D‎e‎p‎r‎e‎s‎s‎i‎o‎n‎,‎ ‎A‎n‎x‎i‎e‎t‎y‎
4‎6‎2‎
R‎e‎p‎o‎r‎t‎:‎ ‎N‎e‎w‎s‎o‎m‎ ‎W‎i‎l‎l‎ ‎A‎p‎p‎o‎i‎n‎t‎ ‎L‎a‎p‎h‎o‎n‎z‎a‎ ‎B‎u‎t‎l‎e‎r‎ ‎t‎o‎ ‎R‎e‎p‎l‎a‎c‎e‎ ‎F‎e‎i‎n‎s‎t‎e‎i‎n‎
R‎e‎p‎o‎r‎t‎:‎ ‎N‎e‎w‎s‎o‎m‎ ‎W‎i‎l‎l‎ ‎A‎p‎p‎o‎i‎n‎t‎ ‎L‎a‎p‎h‎o‎n‎z‎a‎ ‎B‎u‎t‎l‎e‎r‎ ‎t‎o‎ ‎R‎e‎p‎l‎a‎c‎e‎ ‎F‎e‎i‎n‎s‎t‎e‎i‎n‎
6‎,‎7‎2‎1‎
R‎e‎p‎.‎ ‎J‎a‎m‎a‎a‎l‎ ‎B‎o‎w‎m‎a‎n‎ ‎T‎h‎r‎o‎w‎s‎ ‎S‎t‎a‎f‎f‎e‎r‎ ‎U‎n‎d‎e‎r‎ ‎t‎h‎e‎ ‎B‎u‎s‎ ‎f‎o‎r‎ ‎'‎N‎a‎z‎i‎'‎ ‎C‎o‎n‎t‎r‎o‎v‎e‎r‎s‎y‎
R‎e‎p‎.‎ ‎J‎a‎m‎a‎a‎l‎ ‎B‎o‎w‎m‎a‎n‎ ‎T‎h‎r‎o‎w‎s‎ ‎S‎t‎a‎f‎f‎e‎r‎ ‎U‎n‎d‎e‎r‎ ‎t‎h‎e‎ ‎B‎u‎s‎ ‎f‎o‎r‎ ‎'‎N‎a‎z‎i‎'‎ ‎C‎o‎n‎t‎r‎o‎v‎e‎r‎s‎y‎
7‎3‎1‎
W‎h‎i‎t‎e‎ ‎H‎o‎u‎s‎e‎:‎ ‎C‎r‎u‎c‎i‎a‎l‎ ‎W‎e‎ ‎F‎u‎n‎d‎ ‎U‎k‎r‎a‎i‎n‎e‎ ‎t‎o‎ ‎F‎u‎n‎d‎ ‎G‎o‎v‎'‎t‎,‎ ‎W‎e‎'‎l‎l‎ ‎S‎e‎e‎ ‎A‎b‎o‎u‎t‎ ‎B‎o‎r‎d‎e‎r‎
W‎h‎i‎t‎e‎ ‎H‎o‎u‎s‎e‎:‎ ‎C‎r‎u‎c‎i‎a‎l‎ ‎W‎e‎ ‎F‎u‎n‎d‎ ‎U‎k‎r‎a‎i‎n‎e‎ ‎t‎o‎ ‎F‎u‎n‎d‎ ‎G‎o‎v‎'‎t‎,‎ ‎W‎e‎'‎l‎l‎ ‎S‎e‎e‎ ‎A‎b‎o‎u‎t‎ ‎B‎o‎r‎d‎e‎r‎
2‎1‎7‎

R‎e‎p‎.‎ ‎M‎a‎t‎t‎ ‎G‎a‎e‎t‎z‎ ‎F‎o‎r‎m‎a‎l‎l‎y‎ ‎M‎a‎k‎e‎s‎ ‎H‎i‎s‎ ‎M‎o‎v‎e‎ ‎t‎o‎ ‎O‎u‎s‎t‎ ‎S‎p‎e‎a‎k‎e‎r‎ ‎K‎e‎v‎i‎n‎ ‎M‎c‎C‎a‎r‎t‎h‎y‎
5‎,‎9‎8‎6‎
T‎r‎u‎m‎p‎ ‎C‎a‎l‎l‎e‎d‎ ‎o‎n‎ ‎‘‎D‎e‎m‎o‎c‎r‎a‎t‎ ‎O‎p‎e‎r‎a‎t‎i‎v‎e‎’‎ ‎J‎u‎d‎g‎e‎ ‎i‎n‎ ‎N‎Y‎ ‎C‎a‎s‎e‎ ‎t‎o‎ ‎B‎e‎ ‎‘‎D‎i‎s‎b‎a‎r‎r‎e‎d‎’‎
T‎r‎u‎m‎p‎ ‎C‎a‎l‎l‎e‎d‎ ‎o‎n‎ ‎‘‎D‎e‎m‎o‎c‎r‎a‎t‎ ‎O‎p‎e‎r‎a‎t‎i‎v‎e‎’‎ ‎J‎u‎d‎g‎e‎ ‎i‎n‎ ‎N‎Y‎ ‎C‎a‎s‎e‎ ‎t‎o‎ ‎B‎e‎ ‎‘‎D‎i‎s‎b‎a‎r‎r‎e‎d‎’‎

N‎e‎g‎r‎e‎s‎s‎ ‎B‎i‎t‎c‎h‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎A‎f‎t‎e‎r‎ ‎S‎h‎o‎o‎t‎i‎n‎g‎ ‎u‎p‎ ‎G‎o‎o‎d‎y‎e‎a‎r‎ ‎W‎a‎l‎m‎a‎r‎t‎.‎

D‎i‎z‎ ‎s‎o‎w‎ ‎s‎h‎o‎o‎t‎ ‎u‎p‎ ‎d‎a‎t‎ ‎W‎a‎l‎m‎a‎r‎t‎.‎


O‎l‎d‎ ‎N‎i‎g‎g‎a‎ ‎S‎h‎o‎v‎e‎s‎ ‎W‎h‎i‎t‎e‎ ‎M‎a‎n‎ ‎o‎n‎t‎o‎ ‎M‎a‎n‎h‎a‎t‎t‎a‎n‎ ‎S‎u‎b‎w‎a‎y‎ ‎T‎r‎a‎c‎k‎s‎.‎


M‎o‎n‎k‎e‎y‎ ‎t‎o‎ ‎F‎a‎c‎e‎ ‎L‎i‎f‎e‎ ‎A‎f‎t‎e‎r‎ ‎K‎i‎l‎l‎i‎n‎g‎ ‎F‎e‎l‎l‎o‎w‎ ‎O‎x‎f‎o‎r‎d‎ ‎H‎i‎g‎h‎ ‎S‎t‎u‎d‎e‎n‎t‎s‎.‎


P‎o‎l‎i‎c‎e‎ ‎S‎e‎a‎r‎c‎h‎i‎n‎g‎ ‎f‎o‎r‎ ‎N‎i‎g‎ ‎W‎h‎o‎ ‎K‎i‎l‎l‎e‎d‎ ‎W‎h‎i‎t‎e‎ ‎E‎c‎o‎M‎a‎p‎T‎e‎c‎h‎ ‎C‎E‎O‎.‎


2‎ ‎S‎p‎i‎c‎ ‎M‎i‎g‎r‎a‎n‎t‎s‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎a‎t‎ ‎R‎o‎o‎s‎e‎v‎e‎l‎t‎ ‎H‎o‎t‎e‎l‎ ‎i‎n‎ ‎M‎a‎n‎h‎a‎t‎t‎a‎n‎.‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎W‎e‎a‎t‎h‎e‎r‎.‎

T‎o‎d‎a‎y‎
I‎s‎o‎l‎a‎t‎e‎d‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
9‎3‎°‎
/‎7‎6‎°‎
3‎1‎%‎
E‎S‎E‎ ‎1‎1‎ ‎m‎p‎h‎
T‎u‎e‎ ‎0‎3‎ ‎|‎ ‎D‎a‎y‎
9‎3‎°‎
3‎1‎%‎
E‎S‎E‎
1‎1‎
 ‎
m‎p‎h‎
C‎l‎o‎u‎d‎y‎ ‎e‎a‎r‎l‎y‎ ‎w‎i‎t‎h‎ ‎i‎s‎o‎l‎a‎t‎e‎d‎ ‎t‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎ ‎d‎e‎v‎e‎l‎o‎p‎i‎n‎g‎ ‎t‎h‎i‎s‎ ‎a‎f‎t‎e‎r‎n‎o‎o‎n‎.‎ ‎H‎i‎g‎h‎ ‎9‎3‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎E‎S‎E‎ ‎a‎t‎ ‎1‎0‎ ‎t‎o‎ ‎1‎5‎ ‎m‎p‎h‎.‎ ‎C‎h‎a‎n‎c‎e‎ ‎o‎f‎ ‎r‎a‎i‎n‎ ‎3‎0‎%‎.‎

H‎u‎m‎i‎d‎i‎t‎y‎
6‎5‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
8‎ ‎o‎f‎ ‎1‎1‎
S‎u‎n‎r‎i‎s‎e‎
7‎:‎2‎4‎ ‎a‎m‎
S‎u‎n‎s‎e‎t‎
7‎:‎1‎3‎ ‎p‎m‎
T‎u‎e‎ ‎0‎3‎ ‎|‎ ‎N‎i‎g‎h‎t‎
7‎6‎°‎
3‎4‎%‎
S‎E‎
1‎1‎
 ‎
m‎p‎h‎
P‎a‎r‎t‎l‎y‎ ‎c‎l‎o‎u‎d‎y‎ ‎w‎i‎t‎h‎ ‎a‎ ‎s‎l‎i‎g‎h‎t‎ ‎c‎h‎a‎n‎c‎e‎ ‎o‎f‎ ‎t‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎ ‎o‎v‎e‎r‎n‎i‎g‎h‎t‎.‎ ‎L‎o‎w‎ ‎7‎6‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎S‎E‎ ‎a‎t‎ ‎1‎0‎ ‎t‎o‎ ‎1‎5‎ ‎m‎p‎h‎.‎ ‎C‎h‎a‎n‎c‎e‎ ‎o‎f‎ ‎r‎a‎i‎n‎ ‎3‎0‎%‎.‎

H‎u‎m‎i‎d‎i‎t‎y‎
8‎4‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
0‎ ‎o‎f‎ ‎1‎1‎
M‎o‎o‎n‎r‎i‎s‎e‎
1‎0‎:‎1‎6‎ ‎p‎m‎
W‎a‎n‎i‎n‎g‎ ‎G‎i‎b‎b‎o‎u‎s‎
M‎o‎o‎n‎s‎e‎t‎
1‎1‎:‎5‎9‎ ‎a‎m‎
W‎e‎d‎ ‎0‎4‎
I‎s‎o‎l‎a‎t‎e‎d‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
9‎3‎°‎
/‎7‎4‎°‎
3‎2‎%‎
S‎S‎E‎ ‎1‎4‎ ‎m‎p‎h‎
T‎h‎u‎ ‎0‎5‎
T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
8‎1‎°‎
/‎6‎9‎°‎
8‎1‎%‎
N‎N‎E‎ ‎9‎ ‎m‎p‎h‎
F‎r‎i‎ ‎0‎6‎
C‎l‎o‎u‎d‎y‎
8‎4‎°‎
/‎5‎9‎°‎
1‎8‎%‎
N‎N‎E‎ ‎1‎2‎ ‎m‎p‎h‎
S‎a‎t‎ ‎0‎7‎
C‎l‎o‎u‎d‎y‎
7‎0‎°‎
/‎5‎3‎°‎
7‎%‎
N‎N‎E‎ ‎1‎6‎ ‎m‎p‎h‎
S‎u‎n‎ ‎0‎8‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
7‎4‎°‎
/‎5‎1‎°‎
5‎%‎
N‎N‎E‎ ‎7‎ ‎m‎p‎h‎
M‎o‎n‎ ‎0‎9‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
7‎9‎°‎
/‎5‎7‎°‎
9‎%‎
S‎E‎ ‎7‎ ‎m‎p‎h‎
T‎u‎e‎ ‎1‎0‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎3‎°‎
/‎6‎3‎°‎
8‎%‎
S‎S‎E‎ ‎7‎ ‎m‎p‎h‎
W‎e‎d‎ ‎1‎1‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎6‎°‎
/‎6‎7‎°‎
1‎4‎%‎
S‎E‎ ‎9‎ ‎m‎p‎h‎
T‎h‎u‎ ‎1‎2‎
M‎o‎s‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎7‎°‎
/‎6‎7‎°‎
2‎4‎%‎
S‎E‎ ‎1‎1‎ ‎m‎p‎h‎
F‎r‎i‎ ‎1‎3‎
A‎M‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
9‎0‎°‎
/‎6‎7‎°‎
3‎6‎%‎
E‎S‎E‎ ‎1‎1‎ ‎m‎p‎h‎
S‎a‎t‎ ‎1‎4‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎7‎°‎
/‎6‎3‎°‎
2‎4‎%‎
N‎N‎E‎ ‎1‎0‎ ‎m‎p‎h‎
S‎u‎n‎ ‎1‎5‎
A‎M‎ ‎S‎h‎o‎w‎e‎r‎s‎
8‎5‎°‎
/‎6‎1‎°‎
3‎3‎%‎
N‎N‎E‎ ‎8‎ ‎m‎p‎h‎
M‎o‎n‎ ‎1‎6‎
S‎h‎o‎w‎e‎r‎s‎
8‎4‎°‎
/‎5‎9‎°‎
4‎4‎%‎
N‎N‎E‎ ‎9‎ ‎m‎p‎h‎
T‎u‎e‎ ‎1‎7‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
8‎4‎°‎
/‎5‎8‎°‎
8‎%‎
N‎N‎E‎ ‎1‎0‎ ‎m‎p‎h‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

C‎u‎r‎r‎e‎n‎t‎ ‎t‎h‎r‎e‎a‎t‎:‎ ‎V‎a‎m‎p‎i‎r‎e‎s‎.‎ 🧛‍♂️

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

D‎a‎n‎ ‎S‎c‎h‎n‎e‎i‎d‎e‎r‎
D‎a‎n‎ ‎S‎c‎h‎n‎e‎i‎d‎e‎r‎ ‎w‎a‎s‎ ‎t‎h‎e‎ ‎f‎a‎t‎,‎ ‎g‎r‎e‎a‎s‎y‎ ‎p‎e‎d‎o‎p‎h‎i‎l‎e‎ ‎r‎e‎s‎p‎o‎n‎s‎i‎b‎l‎e‎ ‎f‎o‎r‎ ‎N‎i‎c‎k‎e‎l‎o‎d‎e‎o‎n‎'‎s‎ ‎t‎r‎a‎n‎s‎i‎t‎i‎o‎n‎ ‎f‎r‎o‎m‎ ‎d‎e‎c‎e‎n‎t‎ ‎c‎a‎r‎t‎o‎o‎n‎ ‎c‎h‎a‎n‎n‎e‎l‎ ‎i‎n‎t‎o‎ ‎a‎ ‎s‎m‎o‎r‎g‎a‎s‎b‎o‎r‎d‎ ‎o‎f‎ ‎t‎e‎r‎r‎i‎b‎l‎e‎ ‎l‎i‎v‎e‎ ‎a‎c‎t‎i‎o‎n‎ ‎s‎i‎t‎c‎o‎m‎s‎ ‎g‎e‎a‎r‎e‎d‎ ‎t‎o‎w‎a‎r‎d‎s‎ ‎c‎h‎i‎l‎d‎r‎e‎n‎,‎ ‎m‎o‎s‎t‎ ‎o‎f‎ ‎w‎h‎i‎c‎h‎ ‎c‎o‎n‎t‎a‎i‎n‎e‎d‎ ‎t‎r‎a‎n‎s‎p‎a‎r‎e‎n‎t‎ ‎f‎e‎t‎i‎s‎h‎ ‎f‎a‎p‎ ‎m‎a‎t‎e‎r‎i‎a‎l‎,‎ ‎u‎n‎t‎i‎l‎ ‎t‎h‎e‎y‎ ‎f‎i‎n‎a‎l‎l‎y‎,‎ ‎m‎e‎r‎c‎i‎f‎u‎l‎l‎y‎ ‎c‎u‎t‎ ‎t‎i‎e‎s‎ ‎w‎i‎t‎h‎ ‎S‎c‎h‎n‎e‎i‎d‎e‎r‎ ‎i‎n‎ ‎M‎a‎r‎c‎h‎ ‎o‎f‎ ‎2‎0‎1‎8‎.‎ ‎S‎c‎h‎n‎e‎i‎d‎e‎r‎'‎s‎ ‎w‎o‎r‎k‎s‎ ‎i‎n‎c‎l‎u‎d‎e‎ ‎D‎r‎a‎k‎e‎ ‎&‎ ‎J‎o‎s‎h‎,‎ ‎A‎l‎l‎ ‎T‎h‎a‎t‎,‎ ‎S‎a‎m‎ ‎&‎ ‎C‎a‎t‎,‎ ‎V‎i‎c‎t‎o‎r‎i‎o‎u‎s‎,‎ ‎i‎C‎a‎r‎l‎y‎,‎ ‎T‎h‎e‎ ‎A‎m‎a‎n‎d‎a‎ ‎S‎h‎o‎w‎,‎ ‎Z‎o‎e‎y‎ ‎1‎0‎1‎,‎ ‎G‎o‎o‎d‎ ‎B‎u‎r‎g‎e‎r‎,‎ ‎H‎e‎n‎r‎y‎ ‎D‎a‎n‎g‎e‎r‎ ‎a‎n‎d‎,‎ ‎m‎o‎s‎t‎ ‎r‎e‎c‎e‎n‎t‎l‎y‎,‎ ‎G‎a‎m‎e‎ ‎S‎h‎a‎k‎e‎r‎s‎.‎ ‎H‎e‎ ‎i‎s‎ ‎n‎o‎t‎o‎r‎i‎o‎u‎s‎ ‎f‎o‎r‎ ‎h‎a‎v‎i‎n‎g‎ ‎a‎ ‎f‎o‎o‎t‎ ‎f‎e‎t‎i‎s‎h‎,‎ ‎a‎n‎d‎ ‎h‎a‎s‎ ‎r‎e‎g‎u‎l‎a‎r‎l‎y‎ ‎f‎e‎a‎t‎u‎r‎e‎d‎ ‎q‎u‎e‎s‎t‎i‎o‎n‎a‎b‎l‎e‎ ‎s‎c‎e‎n‎e‎s‎ ‎i‎n‎ ‎h‎i‎s‎ ‎s‎h‎o‎w‎s‎ ‎i‎n‎v‎o‎l‎v‎i‎n‎g‎ ‎y‎o‎u‎n‎g‎ ‎a‎c‎t‎r‎e‎s‎s‎e‎s‎'‎ ‎f‎e‎e‎t‎.‎ ‎M‎a‎n‎y‎ ‎w‎i‎l‎l‎s‎ ‎w‎e‎r‎e‎ ‎b‎r‎o‎k‎e‎n‎ ‎d‎u‎r‎i‎n‎g‎ ‎t‎h‎e‎ ‎m‎a‎k‎i‎n‎g‎ ‎o‎f‎ ‎h‎i‎s‎ ‎s‎h‎o‎w‎s‎,‎ ‎a‎n‎d‎ ‎s‎o‎m‎e‎ ‎h‎a‎v‎e‎ ‎g‎o‎n‎e‎ ‎o‎f‎f‎ ‎t‎o‎ ‎d‎o‎ ‎m‎o‎r‎e‎ ‎u‎n‎d‎e‎s‎i‎r‎a‎b‎l‎e‎ ‎t‎h‎i‎n‎g‎s‎ ‎t‎o‎ ‎s‎u‎p‎p‎r‎e‎s‎s‎ ‎t‎h‎e‎ ‎t‎r‎a‎u‎m‎a‎ ‎b‎r‎o‎u‎g‎h‎t‎ ‎o‎n‎ ‎f‎r‎o‎m‎ ‎D‎a‎n‎n‎y‎'‎s‎ ‎i‎r‎o‎n‎ ‎f‎i‎s‎t‎ ‎o‎f‎ ‎p‎e‎d‎o‎p‎h‎i‎l‎i‎a‎ ‎p‎o‎w‎e‎r‎.‎

(‎(‎ ‎I‎N‎V‎E‎S‎T‎I‎G‎A‎T‎E‎ ‎D‎A‎N‎ ‎S‎C‎H‎N‎E‎I‎D‎E‎R‎ ‎)‎)‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

T‎h‎e‎ ‎y‎e‎l‎l‎o‎w‎-‎b‎e‎l‎l‎i‎e‎d‎ ‎s‎a‎p‎s‎u‎c‎k‎e‎r‎ ‎(‎S‎p‎h‎y‎r‎a‎p‎i‎c‎u‎s‎ ‎v‎a‎r‎i‎u‎s‎)‎ ‎i‎s‎ ‎a‎ ‎m‎e‎d‎i‎u‎m‎-‎s‎i‎z‎e‎d‎ ‎w‎o‎o‎d‎p‎e‎c‎k‎e‎r‎ ‎w‎h‎i‎c‎h‎ ‎i‎s‎ ‎f‎o‎u‎n‎d‎ ‎a‎c‎r‎o‎s‎s‎ ‎C‎a‎n‎a‎d‎a‎,‎ ‎e‎a‎s‎t‎e‎r‎n‎ ‎A‎l‎a‎s‎k‎a‎ ‎a‎n‎d‎ ‎t‎h‎e‎ ‎n‎o‎r‎t‎h‎e‎a‎s‎t‎e‎r‎n‎ ‎U‎n‎i‎t‎e‎d‎ ‎S‎t‎a‎t‎e‎s‎.‎ ‎T‎h‎e‎s‎e‎ ‎b‎i‎r‎d‎s‎ ‎w‎i‎n‎t‎e‎r‎ ‎i‎n‎ ‎t‎h‎e‎ ‎e‎a‎s‎t‎e‎r‎n‎ ‎U‎n‎i‎t‎e‎d‎ ‎S‎t‎a‎t‎e‎s‎,‎ ‎W‎e‎s‎t‎ ‎I‎n‎d‎i‎e‎s‎ ‎a‎n‎d‎ ‎C‎e‎n‎t‎r‎a‎l‎ ‎A‎m‎e‎r‎i‎c‎a‎.‎ ‎T‎h‎e‎y‎ ‎h‎a‎v‎e‎ ‎a‎l‎s‎o‎ ‎b‎e‎e‎n‎ ‎f‎o‎u‎n‎d‎ ‎a‎s‎ ‎a‎ ‎v‎e‎r‎y‎ ‎r‎a‎r‎e‎ ‎v‎a‎g‎r‎a‎n‎t‎ ‎i‎n‎ ‎I‎r‎e‎l‎a‎n‎d‎ ‎a‎n‎d‎ ‎G‎r‎e‎a‎t‎ ‎B‎r‎i‎t‎a‎i‎n‎.‎ ‎T‎h‎e‎ ‎y‎e‎l‎l‎o‎w‎-‎b‎e‎l‎l‎i‎e‎d‎ ‎s‎a‎p‎s‎u‎c‎k‎e‎r‎ ‎h‎a‎s‎ ‎a‎ ‎l‎e‎n‎g‎t‎h‎ ‎o‎f‎ ‎a‎r‎o‎u‎n‎d‎ ‎2‎0‎ ‎c‎e‎n‎t‎i‎m‎e‎t‎r‎e‎s‎ ‎a‎n‎d‎ ‎a‎n‎ ‎a‎v‎e‎r‎a‎g‎e‎ ‎w‎e‎i‎g‎h‎t‎ ‎o‎f‎ ‎a‎r‎o‎u‎n‎d‎ ‎5‎0‎ ‎g‎r‎a‎m‎s‎,‎ ‎w‎i‎t‎h‎ ‎a‎ ‎w‎i‎n‎g‎s‎p‎a‎n‎ ‎t‎h‎a‎t‎ ‎r‎a‎n‎g‎e‎s‎ ‎f‎r‎o‎m‎ ‎3‎4‎ ‎t‎o‎ ‎4‎0‎ ‎c‎e‎n‎t‎i‎m‎e‎t‎r‎e‎s‎.‎ ‎T‎h‎e‎ ‎f‎o‎r‎e‎h‎e‎a‎d‎ ‎i‎s‎ ‎c‎o‎l‎o‎u‎r‎e‎d‎ ‎b‎r‎i‎g‎h‎t‎ ‎r‎e‎d‎ ‎i‎n‎ ‎t‎h‎e‎ ‎m‎a‎l‎e‎ ‎(‎a‎n‎d‎ ‎v‎e‎r‎y‎ ‎o‎c‎c‎a‎s‎i‎o‎n‎a‎l‎l‎y‎ ‎y‎e‎l‎l‎o‎w‎)‎,‎ ‎a‎n‎d‎ ‎a‎ ‎l‎i‎g‎h‎t‎e‎r‎ ‎s‎h‎a‎d‎e‎ ‎o‎f‎ ‎r‎e‎d‎ ‎i‎n‎ ‎t‎h‎e‎ ‎f‎e‎m‎a‎l‎e‎.‎ ‎T‎h‎i‎s‎ ‎m‎a‎l‎e‎ ‎w‎a‎s‎ ‎p‎h‎o‎t‎o‎g‎r‎a‎p‎h‎e‎d‎ ‎i‎n‎ ‎C‎e‎n‎t‎r‎a‎l‎ ‎P‎a‎r‎k‎,‎ ‎N‎e‎w‎ ‎Y‎o‎r‎k‎ ‎C‎i‎t‎y‎,‎ ‎U‎n‎i‎t‎e‎d‎ ‎S‎t‎a‎t‎e‎s‎.‎

P‎h‎o‎t‎o‎g‎r‎a‎p‎h‎ ‎c‎r‎e‎d‎i‎t‎:‎ ‎R‎h‎o‎d‎o‎d‎e‎n‎d‎r‎i‎t‎e‎s‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

W‎e‎l‎l‎,‎ ‎g‎u‎y‎s‎.‎ ‎I‎ ‎g‎o‎t‎t‎a‎ ‎g‎o‎.‎ ‎P‎l‎e‎a‎s‎e‎ ‎d‎o‎n‎'‎t‎ ‎t‎e‎l‎l‎ ‎m‎y‎ ‎h‎o‎u‎s‎e‎p‎l‎a‎n‎t‎ ‎t‎h‎a‎t‎ ‎I‎ ‎w‎a‎s‎ ‎c‎h‎e‎a‎t‎i‎n‎g‎ ‎o‎n‎ ‎h‎e‎r‎.‎.‎.‎ ‎I‎ ‎h‎a‎d‎ ‎s‎e‎x‎ ‎w‎i‎t‎h‎ ‎a‎ ‎c‎a‎n‎t‎a‎l‎o‎u‎p‎e‎ ‎t‎h‎a‎t‎ ‎I‎ ‎c‎u‎t‎ ‎i‎n‎ ‎h‎a‎l‎f‎.‎"
1x0PXi94,StackCalc,andarz,C#,Tuesday 3rd of October 2023 08:05:42 AM CDT,"namespace StackCalc
{
    internal class Program
    {
        public static void Main(string[] args)
        {
            string expr = Console.ReadLine();
            string[] tokens = expr.Split(' ');
            Stack<string> tokenStack = new Stack<string>();
            foreach (string x in tokens)
            {
                tokenStack.Push(x);
            }
            Stack<string> reversedTokensStack = ReverseStack(tokenStack);
            int result = int.Parse(reversedTokensStack.Pop());

            while (reversedTokensStack.Count > 0)
            {
                string sign = reversedTokensStack.Pop();
                int number = int.Parse(reversedTokensStack.Pop());

                switch (sign)
                {
                    case ""+"":
                        result += number;
                        break;
                    case ""-"":
                        result -= number;
                        break;
                }
            }Console.WriteLine(result);
        }
        public static Stack<T> ReverseStack<T>(Stack<T> inputStack)
        {
            // Создаем временный список для хранения элементов
            List<T> tempList = new List<T>();

            // Переносим элементы из стека в список
            while (inputStack.Count > 0)
            {
                tempList.Add(inputStack.Pop());
            }

            return new Stack<T>(tempList);
        }

    }
}


"
uN1vvPRX,triggermetada registering duplicate?,tomtomvader298,JavaScript,Tuesday 3rd of October 2023 08:02:08 AM CDT,"
DiscordAPIError[50035]: Invalid Form Body
trigger_metadata.presets[1][SET_TYPE_ALREADY_CONTAINS_VALUE]: The set already contains this value
trigger_metadata.presets[2][SET_TYPE_ALREADY_CONTAINS_VALUE]: The set already contains this value
//links to diff libs
name: 'Bad Words',
      event_type: 1,
      trigger_type: 4,
      trigger_metadata: {
        keyword_filter: undefined,
        regex_patterns: undefined,
        presets: [ undefined, undefined, undefined ],
        allow_list: undefined,
        mention_total_limit: undefined,
        mention_raid_protection_enabled: undefined
      },
      actions: [
        {
          type: 1,
          metadata: {
            duration_seconds: undefined,
            channel_id: undefined,
            custom_message: 'Please refrain from using inappropriate language.'
          }
        },
        {
          type: 3,
          metadata: {
            duration_seconds: 3600,
            channel_id: undefined,
            custom_message: undefined
          }
        },
        {
          type: 2,
          metadata: {
            duration_seconds: undefined,
            channel_id: '917549440347299840',
            custom_message: 'A User Was Flagged For: ** using inappropriate language**'
          }
        }
      ],
      enabled: undefined,
      exempt_roles: undefined,
      exempt_channels: undefined
    }
  },
//in index
async function setupBadWordAutoModeration(guild) {
  const filter = new Filter()
  const badWordRule = {
    name: 'Bad Words',
    reason: 'Using Inappropriate Language Is Not Allowed In This Server.',
    eventType: AutoModerationRuleEventType.MessageSend,
    triggerType: AutoModerationRuleTriggerType.KeywordPreset,
    triggerMetadata: {
      presets: [AutoModerationRuleKeywordPresetType.Swear, AutoModerationRuleKeywordPresetType.Sexual, AutoModerationRuleKeywordPresetType.Racial], // Include all three presets in triggerMetadata
    },
    validate: async (message) => {
      if (message.member.permissions.has(PermissionFlagsBits.Administrator)) {
        return false; // Administration Bypass
      }
      const content = message.content.toLowerCase();
      const presets = [AutoModerationRuleKeywordPresetType.Swear, AutoModerationRuleKeywordPresetType.Sexual, AutoModerationRuleKeywordPresetType.Racial];// Include all three presets
      return presets.some((preset) => filter.isProfane(content, { preset }));
    },
    actions: [
      {
        type: AutoModerationActionType.BlockMessage,
        metadata: { customMessage: `Please refrain from using inappropriate language.`},
      },
      {
        type: AutoModerationActionType.Timeout,
        metadata: { durationSeconds: 3600},//Must Use Seconds !!IMPORTANT!!
      },
      {
        type: AutoModerationActionType.SendAlertMessage,
        metadata: { customMessage: `A User Was Flagged For: ** using inappropriate language**`, channel: '917549440347299840'  }
      },
    ]
  };


  guild.autoModerationRules.create(badWordRule);
  guild.autoModerationEnabled = true;
}
"
diNm1bgV,Untitled,OKyJIucT,JSON,Tuesday 3rd of October 2023 07:32:22 AM CDT,"{
	""AffilateId"":4106,
	""AffilateName"":""dimnikovoleg"",
	""SiteId"":5024,
	""SiteName"":""http://dimnikovoleg.oleg"",
	""SubId"":""2drots"",
	""PlayerId"":111792807,
	""Country"":""Ukraine"",
	""FirstDepDate"":""\/Date(1559941200000)\/"",
	""SumFirstDep"":0,
	""SumDep"":2.860,
	""CountDep"":1,
	""Bonus"":0.00,
	""Income"":5.48,
	""Profit"":2.48,
	""Chargebacks"":0.090,
	""RegistrationDate"":""\/Date(1559929625000)\/"",
	""CPA"":0.00,
	""ComissionSum"":0,
	""ItogComission"":0.00,
	""GR"":0,
	""MediaId"":2170,
	""DtEndHold"":""\/Date(-62135596800000)\/"",
	""BlockPayCPA"":false,
	""DateInstall"":""\/Date(-62135596800000)\/"",
	""AppInstallUnique"":0,
	""ClickId"":"""",
	""TargetUrl"":""""
}"
DsheZekW,Untitled,OKyJIucT,JSON,Tuesday 3rd of October 2023 07:32:03 AM CDT,"{
    ""product_id"": 8,
    ""currency"": ""USD"",
    ""date"": ""2023-09-25"",
    ""aff_id"": 1928091,
    ""site_id"": 2675203,
    ""deal_id"": 0,
    ""player_id"": 690444231,
    ""country_id"": 19,
    ""sub_id"": ""ml_281119"",
    ""reg_date"": ""2023-09-25"",
    ""ftd_date"": ""2023-09-25"",
    ""ftd_sum"": 2.72,
    ""dep_sum"": 2.72,
    ""bonus"": 0,
    ""income"": 0.14,
    ""net_rev"": -0.02,
    ""comission_sum"": -0.01,
    ""total_comission_sum"": -0.01,
    ""dep_sum_rub"": 0,
    ""dep_sum_usd"": 2.72,
    ""click_id"": null
}"
LYrLV12D,Obsidian Digger,aravind1027,Lua,Tuesday 3rd of October 2023 07:09:49 AM CDT,"--Initializing variables--
if(arg[1]==nil) then    
    level=75
    depth=60
else
    level=arg[1]
    depth=arg[2]    
end

level=tonumber(level)
depth=tonumber(depth)
--1st turns right--
direction=1

--Refueling (Ideally requires 4 coal)
turtle.select(1)
turtle.refuel()

--Digging--
function dig()
    for i=1,5 do
        for j=1,4 do
            turtle.digDown()
            turtle.digUp()
            turtle.dig()
            turtle.forward()
        end
        turtle.digDown()
        turtle.digUp()
        if(i<5) then
            if(direction==1) then   --turns right--
                turtle.turnRight()
                turtle.dig()
                turtle.forward()
                turtle.turnRight()
                direction=direction-1
            else                    --turns left--
                turtle.turnLeft()
                turtle.dig()
                turtle.forward()
                turtle.turnLeft()
                direction=direction+1
            end
        else
            print(""i = "",i,"" | direction = "",direction)
        end
    end

end

function go_down()
    if(direction==1) then   --turns left--
        turtle.turnLeft()
        direction=0
    else                    --turns right--
        turtle.turnRight()
        direction=1
    end
    for i=1,3 do
        turtle.digDown()
        turtle.down()
        level=level-1
    end
end

--BEGIN--

--digging--
while(level>depth) do
    dig()
    print(""Level : "",level)
    go_down()
end

turtle.up()
turtle.up()
--END--"
k4TRF0d3,SatisfactionSupervisorExpr,cepxuozab,C++,Tuesday 3rd of October 2023 07:09:06 AM CDT,"void SatisfactionSupervisorExpr() {
        Student p(""ivan""s, 37);
        SatisfactionSupervisor sup{103, 107};
        p.SetObserver(&sup);
        ASSERT_EQUAL(p.GetDanceCount(), 0);
        ASSERT_EQUAL(p.GetSatisfaction(), 100);
        p.Dance();
        ASSERT_EQUAL(p.GetDanceCount(), 1);
        ASSERT_EQUAL(p.GetSatisfaction(), 101);
    }"
uD4wzjbZ,ROBLOX BLADE BALL KEYLESS SCRIPTS,Artani,Lua,Tuesday 3rd of October 2023 06:28:21 AM CDT,"GET THE SCRIPTS HERE
https://artanisrbx.com/blade-ball-script-gui-hack-auto-win-auto-farm-auto-parry-infinite-coins-pastebin-2023/
COPY LINK INTO BROWSER"
B0wKRuUZ,Split Table Function,slanda,Lua,Tuesday 3rd of October 2023 06:27:41 AM CDT,"function split(inStr, sep)
    local t = {}
    for str in string.gmatch(inStr, ""([^""..sep..""]+)"") do
        table.insert(t, str)
    end
    return t
end

return {split = split}"
fkLpeFjH,Pastebin Installer,slanda,Lua,Tuesday 3rd of October 2023 06:25:46 AM CDT,"-- By: Lua Nub
function Pastebin( sCode, sPath )
	local response = http.get(""http://pastebin.com/raw.php?i=""..textutils.urlEncode( sCode ))
	if response then
    	local sResponse = response.readAll()
    	response.close()
    	local file = fs.open( sPath, ""w"" )
    	file.write( sResponse )
    	file.close()
	end
end

local filename = ""startup.lua""
local code = ""7wzqwmAz""

if not fs.exists(filename) then
  Pastebin(code, filename)
end"
hB1hEhyK,10. Online Store,horozov86,Python,Tuesday 3rd of October 2023 06:25:27 AM CDT,"CREATE TABLE item_types (
    id SERIAL PRIMARY KEY,
    item_type_name VARCHAR(50)
);

CREATE TABLE items (
    id SERIAL PRIMARY KEY,
    item_name VARCHAR(50),
    item_type_id INT,

    CONSTRAINT fk_items_item_types
    FOREIGN KEY (item_type_id)
    REFERENCES item_types(id)
);

CREATE TABLE cities (
    id SERIAL PRIMARY KEY,
    city_name VARCHAR(50)
);

CREATE TABLE customers (
    id SERIAL PRIMARY KEY,
    customer_name VARCHAR(100),
    birthday DATE,
    city_id INT,

    CONSTRAINT fk_customers_cities
    FOREIGN KEY (city_id)
    REFERENCES cities(id)
);

CREATE TABLE orders (
    id SERIAL PRIMARY KEY,
    customer_id INT,

    CONSTRAINT fk_orders_customers
    FOREIGN KEY (customer_id)
    REFERENCES customers(id)
);

CREATE TABLE order_items (
    order_id INT,
    item_id INT,

    CONSTRAINT pk_order_items
    PRIMARY KEY (order_id, item_id),

    CONSTRAINT fk_order_items_orders
    FOREIGN KEY (order_id)
    REFERENCES orders(id),

    CONSTRAINT fk_order_items_items
    FOREIGN KEY (item_id)
    REFERENCES items(id)
    
);"
7wzqwmAz,PlayerWatch,slanda,Lua,Tuesday 3rd of October 2023 06:16:02 AM CDT,"split = require(""split"").split
local pd = peripheral.wrap(""right"")
local range = 10
os.startTimer(1)

function checkTable(t, i)
    for _, item in t do
        if item == i then
            return true
        end
    end
    return false
end

while true do
    local event = os.pullEvent()
    local players = {}
    if event == ""timer"" then
        local file = fs.open(""players.txt"", ""r"")
        local oldPlayers = split(file.readAll(), "","")
        file.close()
        local newTable = {}
        players = pd.getPlayersInRange(range)
        for _, player in pairs(players) do
            if not checkTable(oldPlayers, player) then
                table.insert(newTable, player)
            end
        end
        local file = fs.open(""players.txt"", ""a"")
        file.write(newTable)
        file.close()
    end
end"
NU3BB7zu,Untitled,andarz,C#,Tuesday 3rd of October 2023 06:13:02 AM CDT,"public static Stack<T> ReverseStack<T>(Stack<T> inputStack)
{
    // Создаем временный список для хранения элементов
    List<T> tempList = new List<T>();

    // Переносим элементы из стека в список
    while (inputStack.Count > 0)
    {
        tempList.Add(inputStack.Pop());
    }

    return new Stack<T>(tempList);"
mRjM7sGB,data714,TestGuy1,JSON,Tuesday 3rd of October 2023 06:00:05 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '3af4d5954b77574371df28c38ca05ee37279b13a35a24c631260bac6ad43f8e7312f14557c4898a85799716acc26a5e6098e62593baf83739ef2a93f960bedcf1d60ad153e865309c7e1e21155e879c98a4edac8688606f22891e71ce889342141120613e36d5d36366edd9d32a2099c555399960cdd90aa156f373d0f95bfbb',
  otherdata: [
    '0e8246c233efbf3ddf0b1f7b501904c4',
    'e343a27f8cd21dc94563aa958a54359c',
    '9d211c73ebdfdd8c905a32acfb40bd1c',
    'c8157b0e9d4e91ab529fa9a766f604e4',
    '7347be69110f37b7debf941334a81cf9',
    'b72593a6d181ce80b77f75d8ddeded3b',
    '319dabbb5dad4a1b1d5ead6bb4e9de2a',
    'a100c63c184611169662b261e06f3ca4'
  ]
}"
RfRsCESc,purchase datalayer script - phhennestrand.dk,chiragsolanki,JavaScript,Tuesday 3rd of October 2023 05:41:35 AM CDT,"window.dataLayer = window.dataLayer || [];
window.dataLayer.push({
  event: 'GA4_purchase',            // name of the event. In this case, it always must be GA4_purchase
  ecommerce: {
    currency: 'DKK',
    value: 4,944.00,                       // order total (price of all products + shipping). If you want, it can be only price of all products
    tax: 824.00,                          // tax
    shipping: 20.00,                 // shipping costs
    transaction_id: 'abc123',           // transaction id
    coupon: 'ENDOFSUMMER',          // if coupon was applied to the order, include it here          
    items: [{                           // an array with all products
      item_name: 'ELVINE, AYDEN JAKKE I SAND',           // insert an actual product name
      item_id: 'product1',              // insert an actual product ID
      price: 1,600.00,                 // insert an actual product price. Number or a string. Don't include currency code
      item_brand: 'brand A',            // insert an actual product brand
      item_category: 'Elvine',         // insert an actual product top-level category
      quantity: '1',                    // product quantity
      item_coupon: 'SUMMER20'           // if a coupon was applied not to the entire order but to one product, use item_coupon
    },{
      item_name: 'MILESTONE, TERENZ SKINDJAKKE I GRØN',
      item_id: 'product2',
      price: 2,500.00,
      item_brand: 'Brand B',
      item_category: 'Milestone',
      quantity: '1'
    }]
  }
});"
6srq7sxx,Sorted List,nm9505,Latex,Tuesday 3rd of October 2023 05:38:15 AM CDT,"using System;
using System.Text.RegularExpressions;
using System.IO;
using Mono.CSharp;
using Android.Widget;
using Android.Content;
using Android.Views.InputMethods;
using System.Threading.Tasks;
using NativeUiLib; //This ads the GUI contols. Minor abstractions over Xamarin.Android/Mono.Android
namespace SORTED
{
	public static class Program
	{
		public static async void Main()
		{
			var Bolas = ""01234567890987654321012345678901234567890123456789"";
			string lista = null;
			int[] sf = new int[10];
			int z=0;
			var sort = new char[5]; var bola = new Random(); 
			var lay1 = new LinearLayout();
			//lay1.Orientation = Android.Widget.Orientation.Vertical;
			
			var lbl = lay1.AddTextView();
			var valor = lay1.AddEditText(true);
			
			
			//var lay2 = new LinearLayout();
			//lay2.Orientation = Android.Widget.Orientation.Horizontal;
			int N = 50000;
			var btn = lay1.AddButton();
			var btn1 = lay1.AddButton();
			var lbl1 = lay1.AddTextView();
			
			lbl1.SetPadding(4,5,5,0);
			if (valor.Text != """")
			{
				N = Convert.ToInt32(valor.Text);
			}
			string[] sorteo = new string[N]; 
			lbl.Text = "" Xamarin.Forms/Mono.Android/App "";
			btn.Text = "" SORTEAR "";
			btn1.Text = "" BORRAR "";
			lay1.Show(); Console.Clear();
			//lay2.Show();
			await Task.Delay(300);
			btn.Click += delegate
			{
				if (valor.Text != """")
				{
					N = Convert.ToInt32(valor.Text);
				}
				lista = null;
				for(int j=0; j<N; j++)
				{
					for (int i=0; i < sort.Length; i++)
					{
						sort[i] = Bolas[bola.Next(Bolas.Length)];
					}
					sorteo [j] = new String(sort);
				}
				for(int k=0; k<N; k++)
				{
					lista = lista + sorteo[k] + ""  "";
				}
				for (int i=0; i<10; i++)
				{
					sf[i]=0; z=0;
					for(int j=0; j<N; j++)
					{
						string x = Convert.ToString(sorteo[j][4]);
						if (x == $""{i}"")
						{
							z++;
						}
					}
					sf[i]=z;
				}
				lbl1.Text = $""Terminaciones de 0, 1, 2, 3, 4, 5, 6, 7, 8 y 9 respectivamente:\n {sf[0]},{sf[1]},{sf[2]},{sf[3]},{sf[4]},{sf[5]},{sf[6]},{sf[7]},{sf[8]},{sf[9]}\n\n"" + lista;
			};
			btn1.Click += delegate
			{
				lbl1.Text = """";
				valor.Text = """";
				N=0;
				for (int i=0; i<10; i++)
				{
					sf[i]=0;
				}
			};
		}
	}
}"
Er6uzFVW,8.Study Session,horozov86,Python,Tuesday 3rd of October 2023 05:19:29 AM CDT,"CREATE TABLE students(
    id SERIAL PRIMARY KEY,
    student_name VARCHAR(20)
);

CREATE TABLE exams(
    id INTEGER GENERATED ALWAYS AS IDENTITY (START WITH 101 INCREMENT 1) PRIMARY KEY,
    exam_name VARCHAR(20)
);

CREATE TABLE study_halls(
    id SERIAL PRIMARY KEY,
    study_hall_name VARCHAR(30),
    exam_id INTEGER,

    CONSTRAINT fk_study_halls_exams
    FOREIGN KEY (exam_id)
    REFERENCES exams(id)
);


CREATE TABLE students_exams(
    student_id INT,
    exam_id INT,

    CONSTRAINT pk_students_exams
    PRIMARY KEY (student_id, exam_id),
    
    CONSTRAINT fk_students_exams_students
    FOREIGN KEY (student_id)
    REFERENCES students(id),

    CONSTRAINT fk_students_exams_exams
    FOREIGN KEY (exam_id)
    REFERENCES exams(id)

);

INSERT INTO students(student_name)
VALUES
    ('Mila'),
    ('Toni'),
    ('Ron');

INSERT INTO exams(exam_name)
VALUES
    ('Python Advanced'),
    ('Python OOP'),
    ('PostgreSQL');

INSERT INTO study_halls(study_hall_name, exam_id)
VALUES
    ('Open Source Hall', 102),
    ('Inspiration Hall', 101),
    ('Creative Hall', 103),
    ('Masterclass Hall', 103),
    ('Information Security Hall', 103);

INSERT INTO students_exams
VALUES 
    (1, 101),
    (1, 102),
    (2, 101),
    (3, 103), 
    (2, 102),
    (2, 103);"
8Y9s0nER,Untitled,frolkin28,HTML,Tuesday 3rd of October 2023 05:07:45 AM CDT,"# coding: utf-8
<%inherit file=""/bigl_portable/base.mako""/>
<%namespace name=""bgl_common"" file=""/bigl/portlets/common.mako""/>


<%def name=""alredy_answered()"">
    <div class=""ek-box ek-box_padding-tb_s"">
        <span class=""ek-text ek-text_align_center"">
            <div class=""ek-grid ek-grid_column_1 ek-grid_indent_s"">
                <div class=""ek-grid__item"">
                    <span class=""ek-text ek-text_size_h3 ek-text_weight_medium"">
                        ${_(u""Спасибо, Ваша оценка записана."")}
                        <br>
                        ${_(u""Благодарим за то, что помогаете нам стать лучше"")}
                    </span>
                </div>
                <div class=""ek-grid__item"">
                    <span class=""ek-text ek-text_size_h5"">
                        <a class=""ek-link ek-link_color_link"" href=""${h.url.bigl('main_page')}"">
                            ${_(u'Вернуться к покупкам')}</a>
                    </span>
                </div>
                <div class=""ek-grid__item"">
                    <div class=""ek-box ek-box_padding-tb_s"">
                        <img
                            class='ek-image ek-image_align_center ek-box_width_4-10 ek-box_width_1-4@medium'
                            src=""${h.url.static('/bigl/images/dogs/dog-with-paper.svg')}""
                            alt=""""
                        >
                    </div>
                </div>
            </div>
        </span>
    </div>
</%def>


<%def name=""placeholder()"">
    <div class=""ek-box ek-box_margin-tb_xxs ek-box_padding-tb_3xl"">
        <span class=""ek-text ek-text_align_center"">
            ${bgl_common.preloader(size=""medium"")}
        </span>
    </div>
</%def>


<%def name=""content()"">
    <div class=""ek-box ek-box_margin-top_xxs ek-box_margin-bottom_m"">
        <span class=""ek-text ek-text_size_h3 ek-text_weight_medium"">
            ${_(u""Расскажите нам"")}
        </span>
    </div>
</%def>


<div class=""ek-box ek-box_background_gray ek-box_padding_xs ek-box_padding_m@small"">
    <div class=""ek-box ek-box_margin-lr_auto ek-box_width_8-10@small ek-box_width_6-10@medium"">

        <div class=""ek-box ek-box_background_white ek-box_padding_xs ek-box_padding_m@small ek-box_round_l"">
            <div
                data-bazooka=""ColbertQuestionnaire""
                data-colbert-questionnaire-id=${h.to_json(h.get_config('bigl.colbert.question.nps'))|n}
            >
                <div data-colbert-questionnaire-placeholder-node>
                    ${placeholder()}
                </div>
                <div data-colbert-questionnaire-mount-node hidden>
                    ${content()}
                </div>
                <div data-colbert-questionnaire-alredy-answered-node hidden>
                    ${alredy_answered()}
                </div>
            </div>
        </div>

    </div>
</div>
"
bpdRfefU,Untitled,frolkin28,JavaScript,Tuesday 3rd of October 2023 05:06:57 AM CDT,"/* eslint-disable max-classes-per-file */
import React from 'react';
import PropTypes from 'prop-types';


function ColbertMountNode(props) {
    return <div>{props.children}</div>;
}


function ColbertPreloader(props) {
    return <div>{props.children}</div>;
}


class ColbertQuestionnaireError extends Error {}


class ColbertQuestionnaire extends React.Component {
    static propTypes = {
        questionId: PropTypes.string.isRequired,
    };

    constructor(props) {
        super(props);
        this.references = {};
    }

    state = {
        loading: true,
        mounted: false,
    };

    componentDidMount() {
        if (!window.colbert) {
            this.hide();
            return;
        }
        if (!this.references.mountNode) {
            throw new ColbertQuestionnaireError('""ColbertMountNode"" is not found in child components');
        }
        const options = {
            id: this.props.questionId,
            onSuccess: this.onSuccess,
            onFailure: this.onFailure,
        };
        window.colbert('mountQuestionnaire', this.references.mountNode, options);
    }

    onSuccess = () => {
        if (this.isStillMounted()) {
            this.setState({ loading: false, mounted: true });
        }
    };

    onFailure = () => {
        if (this.isStillMounted()) {
            this.hide();
        }
    };

    getOptsForComponent = (component) => {
        switch (component.type) {
            case ColbertPreloader:
                return { hidden: !this.state.loading };
            case ColbertMountNode:
                return {
                    ref: (ref) => { this.references.mountNode = ref; },
                    hidden: !this.state.mounted,
                };
            default:
                return null;
        }
    };

    isStillMounted = () => {
        // This component has methods that's used as callbacks in external library
        // so we should check that's this component is still mounted
        return this.references.mountNode;
    };

    hide = () => {
        this.setState({ loading: false, mounted: false });
    };

    childrenWithRefs = () => {
        return React.Children.map(this.props.children, (child) => {
            const opts = this.getOptsForComponent(child);
            if (!opts) {
                return child;
            }
            return (
                <div className={child.props.className} {...opts}>
                    {child}
                </div>
            );
        });
    };

    render() {
        const hidden = !(this.state.loading || this.state.mounted);
        return (
            <div className={this.props.className} hidden={hidden}>
                {this.childrenWithRefs()}
            </div>
        );
    }
}

export {
    ColbertQuestionnaire,
    ColbertMountNode,
    ColbertPreloader,
};"
Vrz20HG1,Поляков 6207,Aleks_Basher,Python,Tuesday 3rd of October 2023 04:43:36 AM CDT,"maxValue = 0
for x in range(0, 67):
    num1 = 1 * 81**0 + 2 * 81**1 + x * 81**2 + 3 * 81**3
    num2 = 4 * 67**0 + x * 67**1 + 7 * 67**2 + 1 * 67**3
    summ = num1 + num2
    if summ % 35 == 0:
        maxValue = summ / 35
print(maxValue)"
qqbiRjLB,Untitled,okpalan,Python,Tuesday 3rd of October 2023 04:10:35 AM CDT,"import hashlib

class CustomPRNG:
    def __init__(self, seed=None):
        if seed is None:
            seed = self._generate_seed()
        self.state = seed

    def _generate_seed(self):
        return hashlib.sha256(str(hash(time.time())).encode()).digest()

    def _hash_state(self):
        return hashlib.sha256(self.state).digest()

    def random(self):
        # Use the current state as the seed for the next state
        self.state = self._hash_state()
        
        # Convert the hashed state to a float in the range [0, 1)
        return int.from_bytes(self.state, byteorder='big') / (2**256)

# Usage
prng = CustomPRNG()
for _ in range(10):
    print(prng.random())
"
dkT1Qy3j,binding,vahotm,Swift,Tuesday 3rd of October 2023 03:54:12 AM CDT,"struct ParentView: View {
    @State var selectedId: String?
    
    var body: some View {
        ChildView($selectedId)
    }
}

struct ChildView: View {
    @Binding var selectedId: String?
    
    init(_ selectedId: Binding<String?> = Binding.constant(nil)) {
        self._selectedId = selectedId
    }
    
    var body: some View {
		// Magic
    }
}"
Ncm1bnZs,SvgTestDoc,cepxuozab,C++,Tuesday 3rd of October 2023 03:47:28 AM CDT,"void Polymorph() {
    using namespace std;
        {
            Document doc;
            doc.Render(cout);
            cout << endl;
        } {
            Document doc;
            doc.Add(Circle().SetCenter({20, 20}).SetRadius(10));
            doc.Render(cout);
            cout << endl;
        } {
            Document doc;
            doc.Add(Circle().SetCenter({20, 20}).SetRadius(10));
            doc.Add(Text()
                            .SetFontFamily(""Verdana""s)
                            .SetPosition({35, 20})
                            .SetOffset({0, 6})
                            .SetFontSize(12)
                            .SetFontWeight(""bold""s)
                            .SetData(""Hello C++""s));
            doc.Add(Polyline().AddPoint({20, 20}).AddPoint({10, 15}).AddPoint({0, 10}));
            doc.Render(cout);
            cout << endl;
        } {
            Document doc;
            doc.AddPtr(make_unique<Circle>(move(
                    Circle().SetCenter({20, 20}).SetRadius(10))));
            doc.AddPtr(make_unique<Text>(move(
                        Text()
                        .SetFontFamily(""Verdana""s)
                        .SetPosition({35, 20})
                        .SetOffset({0, 6})
                        .SetFontSize(12)
                        .SetFontWeight(""bold""s)
                        .SetData(""Hello C++""s))));
            doc.AddPtr(make_unique<Polyline>(move(
                    Polyline().AddPoint({20, 20}).AddPoint({10, 15}).AddPoint({0, 10}))));
            doc.Render(cout);
        }
    }

<?xml version=""1.0"" encoding=""UTF-8"" ?>
<svg xmlns=""http://www.w3.org/2000/svg"" version=""1.1"">
</svg>
<?xml version=""1.0"" encoding=""UTF-8"" ?>
<svg xmlns=""http://www.w3.org/2000/svg"" version=""1.1"">
  <circle cx=""20"" cy=""20"" r=""10"" />
</svg>
<?xml version=""1.0"" encoding=""UTF-8"" ?>
<svg xmlns=""http://www.w3.org/2000/svg"" version=""1.1"">
  <circle cx=""20"" cy=""20"" r=""10"" />
  <text x=""35"" y=""20"" dx=""0"" dy=""6"" font-size=""12"" font-family=""Verdana"" font-weight=""bold"">Hello C++</text>
  <polyline points=""20,20 10,15 0,10"" />
</svg>
<?xml version=""1.0"" encoding=""UTF-8"" ?>
<svg xmlns=""http://www.w3.org/2000/svg"" version=""1.1"">
  <circle cx=""20"" cy=""20"" r=""10"" />
  <text x=""35"" y=""20"" dx=""0"" dy=""6"" font-size=""12"" font-family=""Verdana"" font-weight=""bold"">Hello C++</text>
  <polyline points=""20,20 10,15 0,10"" />
</svg>"
TtDy0SFW,TestSvgDoc,cepxuozab,C++,Tuesday 3rd of October 2023 03:43:31 AM CDT,"void Doc() {
    using namespace std;
        {
            Document doc;
            doc.Render(cout);
            cout << endl;
        } {
            Document doc;
            doc.Add(Circle().SetCenter({20, 20}).SetRadius(10));
            doc.Render(cout);
            cout << ""endl"";
        } {
            Document doc;
            doc.Add(Circle().SetCenter({20, 20}).SetRadius(10));
            doc.Add(Text()
                            .SetFontFamily(""Verdana""s)
                            .SetPosition({35, 20})
                            .SetOffset({0, 6})
                            .SetFontSize(12)
                            .SetFontWeight(""bold""s)
                            .SetData(""Hello C++""s));
            doc.Add(Polyline().AddPoint({20, 20}).AddPoint({10, 15}).AddPoint({0, 10}));
            doc.Render(cout);
            cout << endl;
        } {
            Document doc;
            doc.AddPtr(make_unique<Circle>(move(
                    Circle().SetCenter({20, 20}).SetRadius(10))));
            doc.AddPtr(make_unique<Text>(move(
                        Text()
                        .SetFontFamily(""Verdana""s)
                        .SetPosition({35, 20})
                        .SetOffset({0, 6})
                        .SetFontSize(12)
                        .SetFontWeight(""bold""s)
                        .SetData(""Hello C++""s))));
            doc.AddPtr(make_unique<Polyline>(move(
                    Polyline().AddPoint({20, 20}).AddPoint({10, 15}).AddPoint({0, 10}))));
            doc.Render(cout);
        }
    }


<?xml version=""1.0"" encoding=""UTF-8"" ?>
<svg xmlns=""http://www.w3.org/2000/svg"" version=""1.1"">
</svg>
<?xml version=""1.0"" encoding=""UTF-8"" ?>
<svg xmlns=""http://www.w3.org/2000/svg"" version=""1.1"">
  <circle cx=""20"" cy=""20"" r=""10"" />
</svg>endl<?xml version=""1.0"" encoding=""UTF-8"" ?>
<svg xmlns=""http://www.w3.org/2000/svg"" version=""1.1"">
  <circle cx=""20"" cy=""20"" r=""10"" />
  <text x=""35"" y=""20"" dx=""0"" dy=""6"" font-size=""12"" font-family=""Verdana"" font-weight=""bold"">Hello C++</text>
  <polyline points=""20,20 10,15 0,10"" />
</svg>
<?xml version=""1.0"" encoding=""UTF-8"" ?>
<svg xmlns=""http://www.w3.org/2000/svg"" version=""1.1"">
  <circle cx=""20"" cy=""20"" r=""10"" />
  <text x=""35"" y=""20"" dx=""0"" dy=""6"" font-size=""12"" font-family=""Verdana"" font-weight=""bold"">Hello C++</text>
  <polyline points=""20,20 10,15 0,10"" />
</svg>"
h2VPGMvA,Armor,Win4Win,Lua,Tuesday 3rd of October 2023 03:19:07 AM CDT,"local sensor = peripheral.wrap(""top"")
for i, v in pairs(sensor.sense()) do
    local Meta = sensor.getMetaByID(v.id)
    if not Meta or not Meta.food then
    else
        for i, v in pairs(Meta.potionEffects) do
            print(i)
            print(v)
            sleep(3)
        end
    end
end"
jBT3AcJR,Some git aliases for your .gitconfig,reywillow,Bash,Tuesday 3rd of October 2023 03:09:18 AM CDT,"[alias]
	gone = ""!f() { git fetch --all --prune; git branch -vv | awk '/: gone]/{print \"" gone: \""$1}'; }; f""
	rmgone = ""!f() { git fetch --all --prune; git branch -vv | awk '/: gone]/{print $1}' | xargs git branch -D; }; f""
    graph = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(auto)%d%C(reset)' --all"
A4Z8pfCF,Untitled,burcev,PHP,Tuesday 3rd of October 2023 02:56:56 AM CDT,"$ar = [
            '{catalog_list}' => array(
                'ru' => array(
                    'meta_title' => '{$section_name} — {$ending_title}',
                    'description' => '{$section_name} — в магазині ⭐INTERTOP⭐ ✅ Лучшие цены в интернете {$ending_description}',
                ),
                'ua' => array(
                    'meta_title' => '{$section_name} — {$ending_title}',
                    'description' => '{$section_name} — в магазине ⭐INTERTOP⭐ ✅ Найкращі ціни в інтернеті {$ending_description}',
                )
            ),
            '{catalog_detail}' => array(
                'ru' => array(
                    'meta_title' => '{$subtype_or_good_type} {$brand} {$model_or_collection} {$fabric_article} {$gender_product} {$color} - {$ending_title}',
                    'description' => '{$subtype_or_good_type} {$brand} {$model_or_collection} {$fabric_article} ➦ {$ending_description}',
                ),
                'ua' => array(
                    'meta_title' => '{$subtype_or_good_type} {$brand} {$model_or_collection} {$fabric_article} {$gender_product} {$color} - {$ending_title}',
                    'description' => '{$subtype_or_good_type} {$brand} {$model_or_collection} {$fabric_article} ➦ {$ending_description}',
                )
            ),
            '{brands_detail}' => array(
                'ru' => array(
                    'meta_title' => '{$brand} - {$ending_title}',
                    'description' => 'Каталог товаров【{$brand}】в магазине ⭐INTERTOP⭐ Широкий выбор товаров бренда ✅Лучшие цены в интернете {$ending_description}',
                ),
                'ua' => array(
                    'meta_title' => '{$brand} - {$ending_title}',
                    'description' => 'Каталог товарів 【{$brand}】в магазині ⭐INTERTOP⭐ Широкий вибір товарів бренду ✅ Кращі ціни в інтернеті {$ending_description}',
                ),
            ),
        ];"
QrFtjtX6,Soal 2 Pertemuan 1,ZeeXy,Java,Tuesday 3rd of October 2023 01:45:37 AM CDT,"package Pertemuan1;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;

public class YesYes2 {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        ArrayList<Double> nilaiKelasA = new ArrayList<>();
        ArrayList<Double> nilaiKelasB = new ArrayList<>();

        while (true) {
            System.out.println(""\nMenu:"");
            System.out.println(""1. Input Nilai Kelas A"");
            System.out.println(""2. Input Nilai Kelas B"");
            System.out.println(""3. Lihat Statistik Kelas A"");
            System.out.println(""4. Lihat Statistik Kelas B"");
            System.out.println(""5. Keluar"");
            System.out.print(""Pilih menu (1/2/3/4/5): "");
            int pilihan = input.nextInt();

            switch (pilihan) {
                case 1:
                    System.out.print(""Masukkan nilai PBO untuk Kelas A: "");
                    double nilaiA = input.nextDouble();
                    nilaiKelasA.add(nilaiA);
                    break;
                case 2:
                    System.out.print(""Masukkan nilai PBO untuk Kelas B: "");
                    double nilaiB = input.nextDouble();
                    nilaiKelasB.add(nilaiB);
                    break;
                case 3:
                    tampilkanStatistik(""Kelas A"", nilaiKelasA);
                    break;
                case 4:
                    tampilkanStatistik(""Kelas B"", nilaiKelasB);
                    break;
                case 5:
                    System.out.println(""Terima kasih! Program selesai."");
                    System.exit(0);
                default:
                    System.out.println(""Pilihan tidak valid. Silakan coba lagi."");
            }
        }
    }

    private static void tampilkanStatistik(String kelas, ArrayList<Double> nilaiKelas) {
        if (nilaiKelas.isEmpty()) {
            System.out.println(""Tidak ada nilai PBO yang tersimpan untuk "" + kelas);
            return;
        }

        double rataRata = hitungRataRata(nilaiKelas);
        double nilaiTertinggi = Collections.max(nilaiKelas);
        double nilaiTerendah = Collections.min(nilaiKelas);

        System.out.println(""Statistik untuk "" + kelas + "":"");
        System.out.println(""Nilai Tersimpan: "" + nilaiKelas);
        System.out.println(""Rata-rata: "" + rataRata);
        System.out.println(""Nilai Tertinggi: "" + nilaiTertinggi);
        System.out.println(""Nilai Terendah: "" + nilaiTerendah);
    }

    private static double hitungRataRata(ArrayList<Double> nilaiKelas) {
        double total = 0;
        for (double nilai : nilaiKelas) {
            total += nilai;
        }
        return total / nilaiKelas.size();
    }

}"
8E55QsPi,cuci mobil,firzaelbuho,C++,Tuesday 3rd of October 2023 01:34:52 AM CDT,"#include <iostream>
#include <string>
using namespace std;

// Struktur data untuk menyimpan detail kendaraan
struct Car {
    string ownerName;
    string carBrand;
    string platNumber;
    char status; // 'n' untuk belum dicuci, 'y' untuk sudah dicuci
    char carType; // 'a' untuk Matic, 'b' untuk Manual
    char package; // 'a' untuk Regular Wash, 'b' untuk Premium Wash, 'c' untuk Grooming Wash
    int price;
    Car* next;
};

// Inisialisasi linked list
Car* head = NULL;

// Fungsi untuk menambah data ke dalam linked list
void inputData() {
    int n;
    cout << ""Masukkan jumlah data yang akan diinput: "";
    cin >> n;

    for (int i = 0; i < n; i++) {
        Car* newCar = new Car;
        cout << ""Owner Name: "";
        cin.ignore();
        getline(cin, newCar->ownerName);
        cout << ""Car Brand: "";
        getline(cin, newCar->carBrand);
        cout << ""Plat Number: "";
        getline(cin, newCar->platNumber);
        cout << ""Status (y/n): "";
        cin >> newCar->status;

        cout << ""Pilih Tipe Mobil:"" << endl;
        cout << ""a. Matic"" << endl;
        cout << ""b. Manual"" << endl;
        cout << ""Pilih: "";
        cin >> newCar->carType;

        cout << ""Pilih Paket Pencucian:"" << endl;
        cout << ""a. Regular Wash"" << endl;
        cout << ""b. Premium Wash"" << endl;
        cout << ""c. Grooming Wash"" << endl;
        cout << ""Pilih: "";
        cin >> newCar->package;

        // Set harga berdasarkan tipe mobil dan paket cuci
        if (newCar->carType == 'a') { // Matic
            if (newCar->package == 'a') // Reguler Wash
                newCar->price = 50000;
            else if (newCar->package == 'b') // Premium Wash
                newCar->price = 100000;
            else if (newCar->package == 'c') // Grooming Wash
                newCar->price = 200000;
        } else if (newCar->carType == 'b') { // Manual
            if (newCar->package == 'a') // Reguler Wash
                newCar->price = 55000;
            else if (newCar->package == 'b') // Premium Wash
                newCar->price = 105000;
            else if (newCar->package == 'c') // Grooming Wash
                newCar->price = 200000;
        }

        // Tambahkan ke linked list
        newCar->next = head;
        head = newCar;

        if (i < n - 1) {
            cout << endl; // Beri jarak antara data inputan
        }
    }
    cout << ""Data berhasil diinput."" << endl;
}

// Fungsi bantu untuk menukar dua objek Car pada proses Quick Sort
int partition(Car* arr[], int low, int high) {
    Car* pivot = arr[high];
    int i = (low - 1);

    for (int j = low; j <= high - 1; j++) {
        if (arr[j]->platNumber < pivot->platNumber) {
            i++;
            swap(arr[i], arr[j]);
        }
    }
    swap(arr[i + 1], arr[high]);
    return (i + 1);
}

// Fungsi untuk melakukan Quick Sort pada data antrian
void quickSort(Car* arr[], int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

// Fungsi untuk melihat data antrian mobil yang sudah diurutkan
void lihatDataAntrian() {
    int count = 1;
    Car* current = head;

    cout << ""--------------------------------"" << endl;
    cout << ""Lihat Data Antrian"" << endl;
    cout << ""--------------------------------"" << endl;

    int size = 0;
    while (current != NULL) {
        size++;
        current = current->next;
    }

    Car* arr[size];
    current = head;

    for (int i = 0; i < size; i++) {
        arr[i] = current;
        current = current->next;
    }

    quickSort(arr, 0, size - 1);

    for (int i = 0; i < size; i++) {
        cout << ""["" << count << ""] Data Antrian"" << endl;
        cout << ""Owner Name: "" << arr[i]->ownerName << endl;
        cout << ""Car Brand: "" << arr[i]->carBrand << endl;
        cout << ""Plat Number: "" << arr[i]->platNumber << endl;
        cout << ""Status: "" << arr[i]->status << endl;
        cout << ""Harga: "" << arr[i]->price << endl;
        cout << endl;

        count++;
    }
}

// Fungsi untuk mencari dan mengubah status pencucian
void ubahStatus() {
    string ownerName;
    cout << ""Input nama Owner: "";
    cin.ignore();
    getline(cin, ownerName);

    Car* current = head;
    bool found = false;

    while (current != NULL) {
        if (current->ownerName == ownerName) {
            found = true;
            cout << ""["" << current->ownerName << ""] ditemukan dengan plat nomor mobil ["" << current->platNumber << ""]"" << endl;
            char choice;
            cout << ""Ubah Status (y/n) ?: "";
            cin >> choice;
            if (choice == 'y') {
                current->status = 'y';
                cout << ""Status berhasil diubah."" << endl;
            }
            break;
        }
        current = current->next;
    }

    if (!found) {
        cout << ""Data tidak ditemukan."" << endl;
    }
}

// Fungsi untuk menghapus data berdasarkan nomor plat
void hapusData() {
    string platNumber;
    cout << ""Masukkan nomor plat yang akan dihapus: "";
    cin.ignore();
    getline(cin, platNumber);

    Car* current = head;
    Car* prev = NULL;
    bool found = false;

    while (current != NULL) {
        if (current->platNumber == platNumber) {
            found = true;
            if (prev == NULL) {
                head = current->next;
            } else {
                prev->next = current->next;
            }
            delete current;
            cout << ""Data berhasil dihapus."" << endl;
            break;
        }
        prev = current;
        current = current->next;
    }

    if (!found) {
        cout << ""Data tidak ditemukan."" << endl;
    }
}

int main() {
    char choice;
    do {
        cout << ""---------------------"" << endl;
        cout << ""Car Wash IF-D"" << endl;
        cout << ""---------------------"" << endl;
        cout << ""1. Input Data"" << endl;
        cout << ""2. Lihat Data Antrian"" << endl;
        cout << ""3. Lihat Status Pencucian"" << endl;
        cout << ""4. Hapus Data"" << endl;
        cout << ""5. Exit"" << endl;
        cout << ""Pilih: "";
        cin >> choice;

        switch (choice) {
            case '1':
                inputData();
                break;
            case '2':
                lihatDataAntrian();
                break;
            case '3':
                ubahStatus();
                break;
            case '4':
                hapusData();
                break;
            case '5':
                return 0;
            default:
                cout << ""Pilihan tidak valid."" << endl;
        }

        cout << ""Kembali ke Menu utama? (y/n): "";
        cin >> choice;
    } while (choice == 'y' || choice == 'Y');

    return 0;
}
"
3yrfwDta,addRemove_Stacks,andarz,C#,Tuesday 3rd of October 2023 01:23:30 AM CDT,"namespace DemoStacks
{
    internal class Program
    {
        static void Main(string[] args)
        {
            string inputLine = Console.ReadLine();
            string[] digits = inputLine.Split(' ');
            int[] intDigits = Array.ConvertAll(digits, int.Parse);
            Stack<int> myStack = new Stack<int>();
            int sum = 0;
            
            foreach (int digitChar in intDigits)
            {
                myStack.Push(digitChar);
            }
            string command = Console.ReadLine();

            while (command != ""end"")
            {
                string[] commArr = command.Split(' ');
                string token = """";
                foreach (string elem in commArr)
                {
                    
                    if (int.TryParse(elem, out _))
                    {
                        int number = int.Parse(elem.ToString());

                        switch (token)
                        {
                            case ""add"":
                                myStack.Push(number);
                                break;
                            case ""remove"":
                                if (number > myStack.Count)
                                    continue;
                                for (int i = 0; i < number; i++)
                                {
                                    myStack.Pop();
                                }
                                break;
                        }
                    }
                    else
                    {
                        token = elem.ToLower();
                    }
                }
                command = Console.ReadLine().ToLower();
            }
            foreach (int i in myStack)
            {
                sum += i;
            }
            Console.WriteLine($""Sum: {sum}"");
        }
    }
}
"
ATYEQEXJ,Longest Consecutive 1's,jayati,C++,Tuesday 3rd of October 2023 01:16:18 AM CDT,"//{ Driver Code Starts
//Initial Template for C++

#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
//User function Template for C++

/*  Function to calculate the longest consecutive ones
*   N: given input to calculate the longest consecutive ones
*/
class Solution
{
    public:
    int maxConsecutiveOnes(int N)
    {
        int ans = 0;
        int c = 0;

        while (N != 0)
        {
            if (N & 1)
            {
                c++;
                ans = max(ans, c);
            }
            else
            {
                
                c = 0;
            }

            N = N >> 1;
        }

        ans = max(ans, c);

        return ans;
    }
};


//{ Driver Code Starts.

// Driver Code
int main() {
	int t;
	cin>>t;//testcases
	while(t--)
	{
		int n;
		cin>>n;//input n
		Solution obj;
		//calling maxConsecutiveOnes() function
		cout<<obj.maxConsecutiveOnes(n)<<endl;
	}
	return 0;
}
// } Driver Code Ends"
bGsHVtex,utils.lua,hugohamon,Lua,Tuesday 3rd of October 2023 01:13:52 AM CDT,"-- Utils file for ChunkEater
local utils = {}

-- Constants
local VERSION = ""0.0.0""
local PASTEBIN = ""bGsHVtex""

-- isUpToDate: Check if the utils file is up to date with the latest version
function utils.isUpToDate()
    shell.run(""pastebin"", ""get"", PASTEBIN, ""update.lua"")
    local file = fs.open(""update.lua"", ""r"")
    local content = file.readAll()
    file.close()
    fs.delete(""update.lua"")
    local version = string.match(content, ""local VERSION = \""%d+.%d+.%d+\"""")
    version = string.match(version, ""%d+.%d+.%d+"")
    return VERSION == version
end

return utils"
Ur7n2RBP,Factorial calculator function,lofty248,C++,Tuesday 3rd of October 2023 01:09:38 AM CDT,"/*
 Function:  factorial() 
 
  
  input: number to find the factorial of
  
  Function will print each digit of the result

  Method inspiration taken from https://www.javatpoint.com/extra-long-factorials-in-c 
  and adapted to work for the given application
 */
void factorial(int n) {
  int result[1000];    //store digits of the factorial
  result[0] = 1;       //initialize with 1
  int resultSize = 1;  //number of digits in the result
  //loop through numbers from 2 to n
  for (int i = 2; i <= n; i++) {
    int remainder = 0;  //initialize remainder for multiplication
    //loop through each digit of the result
    for (int j = 0; j < resultSize; j++) {
      int product = result[j] * i + remainder;  //calculate digit * i + remainder
      result[j] = product % 10;                 //store least significant digit
      remainder = product / 10;                 //update remainder for next iteration
    }
    //factor in any remainder
    while (remainder) {
      result[resultSize] = remainder % 10;  //store remainder as new digit
      remainder /= 10;                      //update remainder
      resultSize++;                         //increase the saved size of the result array
    }
  }

  //loop through result to print the calculated factorial
  for (int i = resultSize - 1; i >= 0; i--) {  //loop through digits in reverse order
    printf(""%d"", result[i]);                   //print each digit of the result
  }
}"
ibhMia4m,V2Ray,EClsiny,JSON,Tuesday 3rd of October 2023 01:09:31 AM CDT,"2,new servers added"
