id,title,username,language,date,content
1vP5LvEb,2024-02-12_stats.json,rdp_snitch,JSON,Monday 12th of February 2024 06:15:09 PM CDT,"{
  ""ip"": {
    ""172.105.117.9"": 4,
    ""87.251.75.145"": 3,
    ""205.210.31.83"": 3,
    ""185.196.220.41"": 3,
    ""139.59.185.252"": 2,
    ""193.142.146.227"": 3,
    ""87.251.75.64"": 1,
    ""45.227.254.55"": 2,
    ""45.227.254.48"": 4,
    ""212.70.149.142"": 4,
    ""185.161.248.148"": 1,
    ""87.251.75.120"": 2,
    ""185.170.144.3"": 2,
    ""45.135.201.151"": 1,
    ""205.210.31.86"": 3,
    ""190.124.32.18"": 2,
    ""39.98.127.243"": 3,
    ""101.200.195.82"": 1,
    ""123.212.240.162"": 1,
    ""185.122.204.98"": 3,
    ""62.204.41.107"": 2,
    ""45.131.195.236"": 1,
    ""185.36.81.28"": 1,
    ""85.209.11.111"": 5,
    ""118.194.236.137"": 1,
    ""177.159.133.9"": 1,
    ""179.60.147.47"": 7,
    ""193.233.132.144"": 1,
    ""205.210.31.72"": 3,
    ""194.165.16.76"": 2,
    ""173.239.214.97"": 1,
    ""192.3.159.135"": 2,
    ""193.233.21.155"": 1,
    ""45.93.20.204"": 3,
    ""198.235.24.176"": 3,
    ""60.205.220.177"": 1
  },
  ""asn"": {
    ""AS63949"": 4,
    ""AS208091"": 6,
    ""AS396982"": 12,
    ""AS208046"": 6,
    ""AS14061"": 2,
    ""AS267784"": 6,
    ""AS204428"": 4,
    ""AS49202"": 1,
    ""AS197414"": 2,
    ""AS44486"": 1,
    ""AS27742"": 2,
    ""AS37963"": 5,
    ""AS9318"": 1,
    ""AS57523"": 11,
    ""AS59425"": 2,
    ""AS62240"": 2,
    ""AS209605"": 1,
    ""AS135377"": 1,
    ""AS18881"": 1,
    ""AS209588"": 7,
    ""AS216319"": 1,
    ""AS48721"": 2,
    ""AS36352"": 2,
    ""AS56380"": 1
  },
  ""isp"": {
    ""Akamai Technologies"": 4,
    ""Xhost Internet Solutions LP"": 8,
    ""Google LLC"": 12,
    ""ColocationX Ltd."": 6,
    ""DIGITALOCEAN"": 2,
    ""Flyservers S.A."": 15,
    ""SS-Net"": 4,
    ""Kisara LLC"": 1,
    ""LIVINGBOTS"": 1,
    ""Amnet Telecomunicaciones S.A."": 2,
    ""Hangzhou Alibaba Advertising Co"": 5,
    ""SK Broadband Co Ltd"": 1,
    ""Chang Way Technologies Co. Limited"": 11,
    ""Horizon LLC"": 2,
    ""VPN"": 1,
    ""SERVEROFFER LT"": 1,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""TELEF\u00d4NICA BRASIL S.A"": 1,
    ""Chromis IT LTD"": 1,
    ""LogicWeb Inc."": 1,
    ""HostPapa"": 2,
    ""''IT FRUIT'' S.R.L."": 1
  },
  ""org"": {
    ""Linode"": 4,
    ""Xhost Internet Solutions"": 6,
    ""Palo Alto Networks, Inc"": 12,
    ""Makut Investments"": 3,
    ""DigitalOcean, LLC"": 2,
    ""ColocationX Ltd"": 3,
    ""UAB Host Baltic"": 6,
    ""4Media Ltd"": 4,
    ""Kisara LLC"": 1,
    ""Xhostis"": 2,
    ""Unknown"": 2,
    ""Navega.com Nicaragua"": 2,
    ""Aliyun Computing Co., LTD"": 5,
    ""broadNnet"": 1,
    ""Starcrecium Limited"": 6,
    ""Horizon LLC"": 2,
    ""VPN-Consumer-US"": 1,
    ""Chang Way Technologies Co. Limited"": 5,
    ""Ucloud Information Technology"": 1,
    ""Global Village Telecom"": 1,
    ""Cloud Solutions S.A"": 7,
    ""1337 Hosting LTD"": 1,
    ""Flyservers S.A"": 2,
    ""NSQ-VENTURE"": 1,
    ""RackNerd LLC"": 2,
    ""FOP Dmytro Nedilskyi"": 1
  },
  ""regionName"": {
    ""North West"": 4,
    ""North Holland"": 11,
    ""California"": 12,
    ""Virginia"": 3,
    ""England"": 3,
    ""Vilnius"": 6,
    ""Plovdiv"": 4,
    ""Moscow"": 14,
    ""Bremen"": 1,
    ""Managua Department"": 2,
    ""Beijing"": 5,
    ""Gyeonggi-do"": 1,
    ""New Jersey"": 2,
    ""Kaunas"": 3,
    ""Tokyo"": 1,
    ""Goias"": 1,
    ""Distrito Federal"": 7,
    ""Texas"": 2,
    ""Chi\u0219in\u0103u Municipality"": 1
  },
  ""country"": {
    ""Singapore"": 4,
    ""The Netherlands"": 11,
    ""United States"": 19,
    ""United Kingdom"": 3,
    ""Lithuania"": 9,
    ""Bulgaria"": 4,
    ""Russia"": 14,
    ""Germany"": 1,
    ""Nicaragua"": 2,
    ""China"": 5,
    ""South Korea"": 1,
    ""Japan"": 1,
    ""Brazil"": 1,
    ""Venezuela"": 7,
    ""Moldova"": 1
  },
  ""account"": {
    ""hello"": 12,
    ""Administr"": 27,
    ""dfosWaSAC"": 1,
    ""kkbLJY"": 1,
    ""ItiKVl"": 1,
    ""Domain"": 14,
    ""Test"": 12,
    ""GxepTgSsc"": 1,
    ""hrvEdd"": 1,
    ""hznohn"": 1,
    ""(empty)"": 3,
    ""Administrator"": 1,
    ""a"": 1,
    ""WsDXMTz"": 1,
    ""amDPsdhPC"": 1,
    ""ITInFD"": 1,
    ""fBJRHi"": 1,
    ""SxOBUBdif"": 1,
    ""QIbrZA"": 1,
    ""yaEhLZ"": 1
  },
  ""keyboard"": {
    ""Unknown"": 83
  },
  ""client_build"": {
    ""Unknown"": 83
  },
  ""client_name"": {
    ""Unknown"": 83
  },
  ""ip_type"": {
    ""hosting"": 26,
    ""Unknown"": 41,
    ""mobile"": 3,
    ""proxy"": 11,
    ""hosting & proxy"": 2
  }
}"
tdStMsWB,G2A.com Free Gift Card Guide Feb 2024,ounnuo,GetText,Monday 12th of February 2024 05:39:01 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
PDF guide here:
https://drive.google.com/file/d/120kXNJWM5T5u3PGlkQeZCo_nLxzQIlkf/view?usp=g2a_refund_exploit_720907.pdf
 
Working as of
12 February 2024"
xBeyAY9D,Untitled,Happypea,ECMAScript,Monday 12th of February 2024 04:39:05 PM CDT,"[
    ""Congratulations you are viewer 69.696.969, please DM Falken to recieve a used cake sock"",
    ""Is not always about cake"",
	""Cake may be AFK at the moment, they will reply in 1-7 days"",
	""Miss Cakey if you are nasty"",
	""Lord Cake, ruler of the bloons, brb aficionado"",
	""I'm not cake""
]"
dfNTeVnX,Untitled,smj007,Python,Monday 12th of February 2024 04:37:31 PM CDT,"# mine
class Solution:
    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:
        
        wordList.append(beginWord)
        from collections import defaultdict
        mapping = defaultdict(list) 

        for word in wordList:
            for j in range(len(word)):
                pattern = word[:j] + ""*"" + word[j+1:]
                mapping[pattern].append(word)

        
        from collections import deque
        q = deque()
        visited = set()
        q.append(word)
        visited.add(word)
        res = 1

        while q:
            if endWord in q:
                return res

            for i in range(len(q)):
                word = q.popleft()

                for j in range(len(word)):
                    pattern = word[:j] + ""*"" + word[j+1:]
                    for neighbour in mapping[pattern]:
                        if neighbour not in visited:
                            q.append(neighbour)
                            visited.add(neighbour)
            res += 1

        return 0


# neetcode
class Solution:
    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:
        if endWord not in wordList:
            return 0

        nei = collections.defaultdict(list)
        wordList.append(beginWord)
        for word in wordList:
            for j in range(len(word)):
                pattern = word[:j] + ""*"" + word[j + 1 :]
                nei[pattern].append(word)

        visit = set([beginWord])
        q = deque([beginWord])
        res = 1
        while q:
            for i in range(len(q)):
                word = q.popleft()
                if word == endWord:
                    return res
                for j in range(len(word)):
                    pattern = word[:j] + ""*"" + word[j + 1 :]
                    for neiWord in nei[pattern]:
                        if neiWord not in visit:
                            visit.add(neiWord)
                            q.append(neiWord)
            res += 1
        return 0"
PXQEvuZE,Untitled,Nenogzar,Python,Monday 12th of February 2024 03:55:49 PM CDT,"# Функция за намиране на началната позиция на ""k"" в лабиринта
def find_position(maze):
    position = []
    for row in range(len(maze)):
        for el in maze[row]:
            if el == 'k':
                position.append(row)
                position.append(maze[row].find('k'))
                return position

# Функция за намиране на свободните позиции (' ') в лабиринта
def next_free_spot(maze):
    free_spots = []

    for row in range(len(maze)):
        for el in range(len(maze[row])):
            tmp = []
            if maze[row][el] == ' ':
                tmp.append(row)
                tmp.append(el)
                free_spots.append(tmp)

    return free_spots

# Функция за намиране на пътя в лабиринта
def find_path(position, next_free, maze):
    moves = 0

    while next_free:
        x1, x2 = next_free.pop(0)

        # Проверка за движение наляво
        if position[0] == x1 and position[1] - x2 == 1:
            position = [x1, x2]
            moves += 1
        # Проверка за движение надясно
        elif position[0] == x1 and x2 - position[1] == 1:
            position = [x1, x2]
            moves += 1
        # Проверка за движение надолу
        elif x1 - position[0] == 1 and position[1] == x2:
            position = [x1, x2]
            moves += 1
        # Проверка за движение нагоре
        elif position[0] - x1 == 1 and position[1] == x2:
            position = [x1, x2]
            moves += 1

    # Проверка за излизане от лабиринта
    if position[0] == 0 or position[0] == (len(maze) - 1) or position[1] == 0 or position[1] == len(maze[0]):
        return f'Kate got out in {moves + 1} moves'
    
    return 'Kate cannot get out'


m_rows = int(input())
maze = []
moves = 0
free_space = True


for row in range(m_rows):
    maze.append(input())


position = find_position(maze)
next_free = next_free_spot(maze)
movement = find_path(position, next_free, maze)
print(movement)
"
9jEmYrbh,weirdly sized sprites,CreativeMasterBonin,Java,Monday 12th of February 2024 02:47:05 PM CDT,"package net.rk.thingamajigs.gui;

import net.minecraft.client.gui.GuiGraphics;
import net.minecraft.client.gui.screens.inventory.AbstractContainerScreen;
import net.minecraft.network.chat.Component;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.world.entity.player.Inventory;

public class TrafficSignalBEScreen extends AbstractContainerScreen<TrafficSignalBEMenu> {
    private static final ResourceLocation TRAFFIC_SIGNAL_BG = new ResourceLocation(""thingamajigs:textures/gui/traffic_signal.png"");
    private static final ResourceLocation RED_LIGHT =
            new ResourceLocation(""thingamajigs:textures/gui/sprites/container/traffic_signal/red_light.png"");
    private static final ResourceLocation YELLOW_LIGHT =
            new ResourceLocation(""thingamajigs:textures/gui/sprites/container/traffic_signal/yellow_light.png"");
    private static final ResourceLocation GREEN_LIGHT =
            new ResourceLocation(""thingamajigs:textures/gui/sprites/container/traffic_signal/green_light.png"");
    private static final ResourceLocation ARROW =
            new ResourceLocation(""thingamajigs:textures/gui/sprites/container/traffic_signal/arrow.png"");
    private static final ResourceLocation FLASHER =
            new ResourceLocation(""thingamajigs:textures/gui/sprites/container/traffic_signal/flasher.png"");

    private static final int fakeItemSpriteY = 20;

    public TrafficSignalBEScreen(TrafficSignalBEMenu tsbemenu, Inventory inv1, Component comp) {
        super(tsbemenu, inv1, comp);
        this.imageHeight = 133;
        this.inventoryLabelX = 8;
        this.inventoryLabelY = this.imageHeight - 94;
    }

    @Override
    protected void init() {
        super.init();
    }

    @Override
    public void render(GuiGraphics guiGraphics, int i1, int i2, float f1) {
        super.render(guiGraphics, i1, i2, f1);
        this.renderTooltip(guiGraphics, i1, i2);
        guiGraphics.blit(RED_LIGHT, 44, fakeItemSpriteY, 0, 0, this.imageWidth, this.imageHeight);
        guiGraphics.blit(YELLOW_LIGHT, 62, fakeItemSpriteY, 0, 0, this.imageWidth, this.imageHeight);
        guiGraphics.blit(GREEN_LIGHT, 80, fakeItemSpriteY, 0, 0, this.imageWidth, this.imageHeight);
        guiGraphics.blit(ARROW, 98, fakeItemSpriteY, 0, 0, this.imageWidth, this.imageHeight);
        guiGraphics.blit(FLASHER, 116, fakeItemSpriteY, 0, 0, this.imageWidth, this.imageHeight);
    }

    @Override
    protected void renderBg(GuiGraphics guiGraphics2, float f2, int i3, int i4) {
        int i = (this.width - this.imageWidth) / 2;
        int j = (this.height - this.imageHeight) / 2;
        guiGraphics2.blit(TRAFFIC_SIGNAL_BG, i, j, 0, 0, this.imageWidth, this.imageHeight);
    }
}
"
r2vUxbhx,Untitled,Josif_tepe,C++,Monday 12th of February 2024 02:05:07 PM CDT,"#include <iostream>
//#include <bits/stdc++.h>

using namespace std;
long long sleden_deliv_so_5(long long x) {
    while(x % 5 != 0) {
        x++;
    }
    return x;
}
long long prethoden_deliv_so_5(long long x) {
    while(x % 5 != 0) {
        x--;
    }
    return x;
}
int main() {
    long long x, y;
    cin >> x >> y;
    
    long long minimum = ceil(20.0 * x / 19.0);
    long long maksimum = floor(10.0 * x / 9.0);
    
    if(maksimum > y) {
        maksimum = y;
    }
    
    if(minimum % 5 != 0){
        minimum = sleden_deliv_so_5(minimum);
    }
    if(maksimum % 5 != 0) {
        maksimum = prethoden_deliv_so_5(maksimum);
    }
    
    if(minimum > maksimum) {
        cout << 0 << endl;
    }
    else {
        cout << (maksimum - minimum) / 5 + 1 << endl;
    }
    
  
}
"
sMGvnBBK,Interview Task,sanya5791,JSON,Monday 12th of February 2024 01:33:13 PM CDT,"{
  ""status"": ""OK"",
  ""copyright"": ""Copyright (c) 2022 The New York Times Company.  All Rights Reserved."",
  ""num_results"": 59,
  ""results"": [
      {
      ""list_name"": ""Young Adult"",
      ""display_name"": ""Young Adult"",
      ""list_name_encoded"": ""young-adult"",
      ""oldest_published_date"": ""2012-12-16"",
      ""newest_published_date"": ""2015-08-23"",
      ""updated"": ""WEEKLY""
    },
    {
      ""list_name"": ""Young Adult E-Book"",
      ""display_name"": ""Young Adult E-Book"",
      ""list_name_encoded"": ""young-adult-e-book"",
      ""oldest_published_date"": ""2015-08-30"",
      ""newest_published_date"": ""2017-01-29"",
      ""updated"": ""WEEKLY""
    },
    {
      ""list_name"": ""Young Adult Hardcover"",
      ""display_name"": ""Young Adult Hardcover"",
      ""list_name_encoded"": ""young-adult-hardcover"",
      ""oldest_published_date"": ""2015-08-30"",
      ""newest_published_date"": ""2022-10-23"",
      ""updated"": ""WEEKLY""
    },
    {
      ""list_name"": ""Young Adult Paperback"",
      ""display_name"": ""Young Adult Paperback"",
      ""list_name_encoded"": ""young-adult-paperback"",
      ""oldest_published_date"": ""2015-08-30"",
      ""newest_published_date"": ""2017-01-29"",
      ""updated"": ""WEEKLY""
    },
    {
      ""list_name"": ""Animals"",
      ""display_name"": ""Animals"",
      ""list_name_encoded"": ""animals"",
      ""oldest_published_date"": ""2014-09-07"",
      ""newest_published_date"": ""2017-01-15"",
      ""updated"": ""MONTHLY""
    },
    {
      ""list_name"": ""Audio Fiction"",
      ""display_name"": ""Audio Fiction"",
      ""list_name_encoded"": ""audio-fiction"",
      ""oldest_published_date"": ""2018-03-11"",
      ""newest_published_date"": ""2022-10-16"",
      ""updated"": ""MONTHLY""
    },
    {
      ""list_name"": ""Audio Nonfiction"",
      ""display_name"": ""Audio Nonfiction"",
      ""list_name_encoded"": ""audio-nonfiction"",
      ""oldest_published_date"": ""2018-03-11"",
      ""newest_published_date"": ""2022-10-16"",
      ""updated"": ""MONTHLY""
    }
  ]
}
"
ULvpsP5Q,endgame,max2201111,Python,Monday 12th of February 2024 01:28:46 PM CDT,"import chess
import time

def ddfs(board, depth, is_white_turn):
    if board.is_checkmate():
        return True, []
    if depth == 0 or board.is_game_over():
        return False, []
    legal_moves = list(board.legal_moves)
    for move in legal_moves:
        board.push(move)
        found_mate, mate_path = ddfs(board, depth - 1, not is_white_turn)
        board.pop()
        if found_mate:
            return True, [move] + mate_path
    return False, []

def iterative_deepening_dfs(board):
    depth = 0
    while True:
        found_mate, mate_sequence = ddfs(board.copy(), depth, board.turn == chess.WHITE)
        if found_mate:
            return depth, mate_sequence
        depth += 1

def print_move_sequence(board, move_sequence):
    print(""Initial board state:"")
    print(board, ""\n"")
    for move in move_sequence:
        if board.is_legal(move):
            board.push(move)
            print(f""Move {board.san(move)}:"")
            print(board, ""\n"")
        else:
            print(""An illegal move found in the sequence, which should not happen."")
            break

def main():
    initial_fen = ""6k1/8/5K2/2Q5/8/8/8/8 w - - 0 1""
    board = chess.Board(initial_fen)

    start_time = time.time()
    mate_depth, mate_sequence = iterative_deepening_dfs(board)
    elapsed_time = time.time() - start_time

    if mate_depth is not None:
        print(f""Mate found in {mate_depth} move(s), time taken: {elapsed_time:.2f} seconds."")
        board.reset()
        board.set_fen(initial_fen)  # Reset the board to initial state
        print_move_sequence(board, mate_sequence)
    else:
        print(""No mate found."")

if __name__ == ""__main__"":
    main()"
uYm47mwu,Untitled,Josif_tepe,C++,Monday 12th of February 2024 01:27:20 PM CDT,"#include <iostream>
#include <vector>
using namespace std;

int main() {
    int n;
    cin >> n;
    
    int rodendni[13][32];
    for(int i = 1; i <= 12; i++) {
        for(int j = 1; j <= 31; j++) {
            rodendni[i][j] = 0;
        }
    }
    for(int i = 0; i < n; i++) {
        int x, y;
        cin >> x >> y;
        rodendni[y][x] = 1;
    }
    int max_brojac = 0;
    vector<int> meseci;
    for(int mesec = 1; mesec <= 12; mesec++) {
        int brojac = 0;
        for(int den = 1; den <= 31; den++) {
            if(rodendni[mesec][den] == 1) {
                brojac++;
            }
        }
        if(brojac > max_brojac) {
            max_brojac = brojac;
            meseci.clear();
            meseci.push_back(mesec);
        }
        else if(brojac == max_brojac) {
            meseci.push_back(mesec);
        }
    }
    for(int i = 0; i < meseci.size(); i++) {
        cout << meseci[i] << endl;
    }
 
    
    return 0;
}
"
Gprg2xBj,Untitled,Josif_tepe,C++,Monday 12th of February 2024 01:23:31 PM CDT,"#include <iostream>
#include <vector>
using namespace std;

int main() {
    int n;
    cin >> n;
    
    int rodendni[13][32];
    for(int i = 1; i <= 12; i++) {
        for(int j = 1; j <= 31; j++) {
            rodendni[i][j] = 0;
        }
    }
    for(int i = 0; i < n; i++) {
        int x, y;
        cin >> x >> y;
        rodendni[y][x] = 1;
    }
    int max_brojac = 0;
    for(int mesec = 1; mesec <= 12; mesec++) {
        int brojac = 0;
        for(int den = 1; den <= 31; den++) {
            if(rodendni[mesec][den] == 1) {
                brojac++;
            }
        }
        max_brojac = max(max_brojac, brojac);
    }
    for(int mesec = 1; mesec <= 12; mesec++) {
        int brojac = 0;
        for(int den = 1; den <= 31; den++) {
            if(rodendni[mesec][den] == 1) {
                brojac++;
            }
        }
        
        if(max_brojac == brojac) {
            cout << mesec << endl;
        }
    }
    
    return 0;
}
"
ubTaF7Uv,Untitled,Nenogzar,Python,Monday 12th of February 2024 01:05:48 PM CDT,"numbers = [int(n) for n in input().split("", "")]
check_numbers = list()

for number in range(1, 10 + 1):
    check_numbers.clear()
    if len(numbers) != 0:
        for num in numbers:
            if int(num) <= number * 10:
                check_numbers.append(num)
        for d in check_numbers:
            numbers.remove(d)

        print(f""Group of {number * 10}'s: {check_numbers}"")"
srkswb5j,miriLawnMawer,VladNitu,C++,Monday 12th of February 2024 12:48:01 PM CDT,"#include <cstdio>
#include <algorithm>
#include <vector>
#include <string>
#include <cstring>

using namespace std;

const int maxn = 2000;

int a[maxn + 5][maxn + 5];
int b[maxn + 5][maxn + 5];
long long sums[maxn + 5];
long long spLin[maxn + 5][maxn + 5];
long long spCol[maxn + 5][maxn + 5];

void rotateMatrix(int n, int m) {
    for (int i = 1; i <= n; ++i)
        for (int j = 1; j <= m; ++j)
            b[j][i] = a[i][j];
    for (int i = 1; i <= m; ++i)
        for (int j = 1; j <= n; ++j)
            a[i][j] = b[i][j];
}


int solve(int n, int m, int k) {
    memset(spLin, 0, sizeof(spLin));
    memset(spCol, 0, sizeof(spCol));
    for (int i = 1; i <= n; ++i) {
        for (int j = 1; j <= m; ++j) {
            spLin[i][j] = spLin[i][j - 1] + a[i][j];
            spCol[i][j] = spCol[i - 1][j] + a[i][j];
        }
    }
    int best_ans = n * m;
    for (int max_rem_left = 0; max_rem_left < m; ++max_rem_left) {
        int up = 0, down = 0, left = 0, right = 0;
        int ans = 0;
        while (up + down < n) {
            if (spLin[up + 1][m - right] - spLin[up + 1][left] <= k) {
                up++;
                ans++;
            } else if (spLin[n - down][m - right] - spLin[n - down][left] <= k) {
                down++;
                ans++;
            } else if (spCol[n - down][left + 1] - spCol[up][left + 1] <= k && left < max_rem_left) {
                left++;
                ans++;
            } else if (spCol[n - down][m - right] - spCol[up][m - right] <= k) {
                right++;
                ans++;
            } else {
                break;
            }
        }
        if (up + down == n)
            best_ans = min(best_ans, ans);
    }
    return best_ans;
}

int main() {
//    freopen(""date.in"", ""r"", stdin);
    int k, m, n;
    scanf(""%d%d%d"", &k, &m, &n);
    for (int i = 1; i <= n; ++i)
        for (int j = 1; j <= m; ++j)
            scanf(""%d"", &a[i][j]);

    int ans = solve(n, m, k);
    rotateMatrix(n, m);
    ans = min(ans, solve(m, n, k));

    printf(""%d\n"", ans);

    return 0;
}
"
8ReMXTk5,311_1202,Petro_zzz,C++,Monday 12th of February 2024 12:44:29 PM CDT,"#include <iostream>

using namespace std;

void task0() {
	const int x1 = 1;
	const int x2 = 2;
	const int x3 = 3;
	int x;

	cout << ""Enter x: ""; cin >> x;

	switch (x) {
	case x1: cout << ""Moning\n""; break;
	case x2: cout << ""Afternoon\n""; break;
	case x3: cout << ""Night\n""; break;
	default: cout << ""Good\n"";
	}
}

void task1() {
	// Поименованные целочисленные константы
	enum Buttons {
		STOP = 1,
		PLAY = 2,
		NEXT = 3,
	};
	Buttons button1 = Buttons::STOP;

	switch (button1)	{
		case STOP: cout << ""Stop\n""; break;
		case PLAY: cout << ""Play\n""; break;
		case NEXT: cout << ""Next\n""; break;
		default: break;
	}
}

void bad_practic() {
	
marker1: 
	task0();
	
	char answer;
	cout << ""Do you want repeat? 'y/n' "";
	cin >> answer;
	if (answer == 'y') {
		goto marker1;
	}
	//cout << ""Hello\n"";
}

void test_while() {
	// Сумма алгебр. последовательности 
	// 1 + 2 + 3 + 4 + 5

	int sum = 1 + 2 + 3 + 4 + 5;
	cout << sum << endl;

	int sum1 = 0;
	sum1 = sum1 + 1;
	sum1 = sum1 + 2;
	sum1 = sum1 + 3;
	sum1 = sum1 + 4;
	sum1 = sum1 + 5;
	cout << sum1 << endl;

	int n = 1;
	int sum2 = 0;
	while (n <= 5) {
		//cout << n << "" "";
		sum2 = sum2 + n;
		n += 1;
	}
	cout << sum2 << endl;
}

void horizontal() {
	int max_num;	

	cout << ""Enter max_num: "";
	cin >> max_num;

	while (max_num > 0) {
		cout << max_num << "" "";
		max_num -= 1;
	}
}

void show_sqrtab() {
	int x = 0;
	cout << ""\tx\t|\tx^2\n"";
	cout << ""------------------------------\n"";
	while (x <= 20) {
		cout << ""\t"" << x 
			 << ""\t|\t"" 
			 << x * x << endl;
		x += 1;
	}
}

int main() {
	//bad_practic();
	//test_while();
	//horizontal();
	//show_sqrtab();

	return 0;
}"
Af9wG35d,program with password,SaNik74,C#,Monday 12th of February 2024 12:43:26 PM CDT,"class Program
{
    static void Main(string[] args)
    {
        string password = ""WfhUf58WeyfVb27"";
        int numberAttems = 3;

        for (int i = 1; i <= numberAttems; i++)
        {
            Console.Write(""Введите пароль:"");
            string userInput = Console.ReadLine();

            if (userInput == password)
            {
                Console.WriteLine(""Введень верный пароль."");
                break;
            }
            else
            {
                Console.WriteLine($""Вы ввели неверный пароль. Осталось {numberAttems - i} попыток."");
            }
        }
    }
}"
qccke7LB,# tk_3D_Cube.py,here2share,Python,Monday 12th of February 2024 12:30:59 PM CDT,"# tk_3D_Cube.py -- revised

ww, hh = 600, 600

from tkinter import *
import math
import random

def update_cube_coordinates():
	for i in range(8):
		x, y, z = rotated_coords[i][:3]
		coordinates[i] = get_coords(x , y, z)

def get_coords(x, y, z):
    rxy = (x**2 + y**2)**(1/2)
    rxz = (x**2 + z**2)**(1/2)
    ryz = (y**2 + z**2)**(1/2)

    if x > 0 and y > 0:
        txy = math.atan(y/x)
    elif x > 0 and y < 0:
        txy = 2*math.pi + math.atan(y/x)
    elif x < 0 and y > 0:
        txy = math.pi + math.atan(y/x)
    elif x < 0 and y < 0:
        txy = math.pi + math.atan(y/x)

    if z > 0 and x > 0:
        txz = math.atan(x/z)
    elif z > 0 and x < 0:
        txz = 2*math.pi + math.atan(x/z)
    elif z < 0 and x > 0:
        txz = math.pi + math.atan(x/z)
    elif z < 0 and x < 0:
        txz = math.pi + math.atan(x/z)

    if y > 0 and z > 0:
        tyz = math.atan(z/y)
    elif y > 0 and z < 0:
        tyz = 2*math.pi + math.atan(z/y)
    elif y < 0 and z > 0:
        tyz = math.pi + math.atan(z/y)
    elif y < 0 and z < 0:
        tyz = math.pi + math.atan(z/y)

    return x, y, z, rxy, rxz, ryz, txy, txz, tyz

def rotate_z(coord, t):
    txy = coord[6] + t if coord[6] + t >= 0 else coord[6] + t + 2*math.pi
    x = math.cos(txy) * coord[3]
    y = math.sin(txy) * coord[3]
    return get_coords(x, y, coord[2])

def rotate_y(coord, t):	
    txz = coord[7] + t if coord[7] + t >= 0 else coord[7] + t + 2*math.pi
    z = math.cos(txz) * coord[4]
    x = math.sin(txz) * coord[4]
    return get_coords(x, coord[1], z)

def rotate_x(coord, t):	
    tyz = coord[8] + t if coord[8] + t >= 0 else coord[8] + t + 2*math.pi
    y = math.cos(tyz) * coord[5]
    z = math.sin(tyz) * coord[5]
    return get_coords(coord[0], y, z)

rotation_speeds = {}
def rotation():
	rotation_speeds[""X""] = random.uniform(0.002, 0.005) * random.choice((1, -1))
	rotation_speeds[""Y""] = random.uniform(0.002, 0.005) * random.choice((1, -1))
	rotation_speeds[""Z""] = random.uniform(0.002, 0.005) * random.choice((1, -1))
rotation()

def plot():
    for i in range(4):
        id_ = C.create_line(rotated_coords[i][0] * Vz/dd + Vx, rotated_coords[i][2] * Vz/dd + Vy,
                             rotated_coords[(i + 1) % 4][0] * Vz/dd + Vx, rotated_coords[(i + 1) % 4][2] * Vz/dd + Vy)
        C.itemconfig(id_, width=3)

        id_ = C.create_line(rotated_coords[i + 4][0] * Vz/dd + Vx, rotated_coords[i + 4][2] * Vz/dd + Vy,
                             rotated_coords[((i + 1) % 4) + 4][0] * Vz/dd + Vx, rotated_coords[((i + 1) % 4) + 4][2] * Vz/dd + Vy)
        C.itemconfig(id_, width=3)

        id_ = C.create_line(rotated_coords[i][0] * Vz/dd + Vx, rotated_coords[i][2] * Vz/dd + Vy,
                             rotated_coords[i + 4][0] * Vz/dd + Vx, rotated_coords[i + 4][2] * Vz/dd + Vy)
        C.itemconfig(id_, width=3)


ww, hh = 600, 600
dd = 600
sz = 100
xSpeed = 0.3
ySpeed = 0.5
zSpeed = 0.4
Vx = ww/2
Vy = hh/2
Vz = 700
bd = 10

coordinates = [
    get_coords(sz, sz, -sz), get_coords(-sz, sz, -sz), get_coords(-sz, sz, sz), get_coords(sz, sz, sz),
    get_coords(sz, -sz, -sz), get_coords(-sz, -sz, -sz), get_coords(-sz, -sz, sz), get_coords(sz, -sz, sz)
]

win = Tk()
win.title(""tk_3D_Cube"")

C = Canvas(win, width=ww, height=hh)
C.pack()

sp = 0.01
rotate = {
    ""q"": (""X"", sp),
    ""w"": (""X"", -sp),
    ""e"": (""Y"", sp),
    ""a"": (""Y"", -sp),
    ""s"": (""Z"", sp),
    ""d"": (""Z"", -sp),
}

def key_rotate(axis, t):
	rotation_speeds[axis] = t

for k, (axis, t) in rotate.items():
    win.bind(f""<Key-{k}>"", lambda event, axis=axis, t=t: key_rotate(axis, t))

while True:
	C.delete('all')

	# Rotate the cube around the X-axis
	rotated_coords = []
	for i in range(8):
		rotated_coords.append(rotate_x(coordinates[i], rotation_speeds[""X""]))
		rotated_coords[i] = rotate_y(rotated_coords[i], rotation_speeds[""Y""])
		rotated_coords[i] = rotate_z(rotated_coords[i], rotation_speeds[""Z""])

	plot()
	update_cube_coordinates()

	at_wall = 0
	if Vx < -bd:
		xSpeed = abs(xSpeed)
		at_wall = 1
	elif Vx > ww + bd:
		xSpeed = -abs(xSpeed)
		at_wall = 1
	if Vy < -bd:
		ySpeed = abs(ySpeed)
		at_wall = 1
	elif Vy > hh + bd:
		ySpeed = -abs(ySpeed)
		at_wall = 1
	if Vz < 400:
		zSpeed = abs(zSpeed)
		at_wall = 1
	elif Vz > 1000:
		zSpeed = -abs(zSpeed)
		at_wall = 1
		
	if at_wall:
		rotation()
	
	Vx += xSpeed
	Vy += ySpeed
	Vz += zSpeed

	win.update()
"
4Ujsg6pK,honsLawnMowingVlad,VladNitu,C++,Monday 12th of February 2024 12:19:43 PM CDT,"#include <bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
template <typename T>


#define NMAX (int)(2e3 + 2)
#define MMAX (int)(2e3 + 2)
#define INF (int)(1e9)
#define ll long long
#define mkp make_pair
#define mkt make_tuple
#define lsb(x) (x & -x)

void __print(int x) {cerr << x;}
void __print(long x) {cerr << x;}
void __print(long long x) {cerr << x;}
void __print(unsigned x) {cerr << x;}
void __print(unsigned long x) {cerr << x;}
void __print(unsigned long long x) {cerr << x;}
void __print(float x) {cerr << x;}
void __print(double x) {cerr << x;}
void __print(long double x) {cerr << x;}
void __print(char x) {cerr << '\'' << x << '\'';}
void __print(const char *x) {cerr << '\""' << x << '\""';}
void __print(const string &x) {cerr << '\""' << x << '\""';}
void __print(bool x) {cerr << (x ? ""true"" : ""false"");}

template<typename T, typename V, typename W>
void __print(const std::tuple<T, V, W> &x) {cerr << '{'; __print(std::get<0>(x)); cerr << ','; __print(std::get<1>(x)); cerr << ','; __print(std::get<2>(x)); cerr << '}';}
template<typename T, typename V>
void __print(const pair<T, V> &x) {cerr << '{'; __print(x.first); cerr << ','; __print(x.second); cerr << '}';}
template<typename T>
void __print(const T &x) {int f = 0; cerr << '{'; for (auto &i: x) cerr << (f++ ? "","" : """"), __print(i); cerr << ""}"";}
void _print() {cerr << ""]\n"";}
template <typename T, typename... V>
void _print(T t, V... v) {__print(t); if (sizeof...(v)) cerr << "", ""; _print(v...);}
#ifndef ONLINE_JUDGE
#define dbg(x...) cerr << ""["" << #x << ""] = [""; _print(x)
#else
#define dbg(x...)
#endif

enum REMOVE {top_row, bottom_row, left_col, right_col};

struct Candidate {
    ll val;
    REMOVE type;
};


int  N, M, K;
vector<vector<int>> a, aT;


/*
 * Returns the sum of the submatrix that spans: top_left corner: {i_up, j_up} and bottom_right corner {i_down, j_down}
 *
 */
int get_sum(const vector<vector<int>>& prefix_sum, int i_up, int j_up, int i_down, int j_down) {
    // See notes for drawing
    return prefix_sum[i_down][j_down] -  prefix_sum[i_up - 1][j_down] - prefix_sum[i_down][j_up - 1] + prefix_sum[i_up - 1][j_up - 1];
}

/*
 * Helper funtctions that computes the prefix sum of `a` : N x M (2D array) and returns it
 * Returns: N x M matrix of prefix sum
 */
vector<vector<int>> precompute_prefix_sum(const vector<vector<int>>& a, int N, int M) {
    //Reference:  https://www.pbinfo.ro/articole/5615/sume-partiale-in-tablouri
     vector<vector<int>> prefix_sum(N + 1, vector<int>(M + 1, 0));
    for (int i = 1; i <= N; ++i)
        for (int j = 1; j <= M; ++j)
            prefix_sum[i][j] = a[i][j] + prefix_sum[i-1][j] + prefix_sum[i][j-1] - prefix_sum[i-1][j-1];
    return prefix_sum;
}

/*
 * Helper function that reduces all Rows of 2D Array `a`, where `a`: N x M
 * Returns: min. # of mowing sessions required
 */
int solve (const vector<vector<int>>& a, int N, int M) {

    vector<vector<int>> prefix_sum = precompute_prefix_sum(a, N, M);

    int mn = N + M - 1; // worst-case solution

    for (int remove_left_cols = 0; remove_left_cols <= M - 1; ++remove_left_cols) { // O(M)
        // Try removing all rows; when stuck (no row is removable): remove `remove_left_cols` columns from the left; when we get stuck: remove columns from the right as many as needed
        // if no solution found => We cannot solve the problem w/ these many ""tokens""

        // NOTE: the order of removing top or bottom row is IRRELEVANT, as in the end we will have been removed all the rows

        int top = 1, bottom = N, left = 1, right = M;
        bool foreverStuck = false;

        while (top <= bottom && !foreverStuck) { //  while there are still rows to be removed; O(N + M)
           if (get_sum(prefix_sum, top, left, top, right) <= K)  // top row can be removed
               top ++;
            else if (get_sum(prefix_sum, bottom, left, bottom, right) <= K) // bottom row can be removed
                bottom --;
            else if (remove_left_cols > left - 1 && get_sum(prefix_sum, top, left, bottom, left) <= K) // Stuck from removing rows => if we allow ourselves to still remove rows from the left & `k` constraint holds
                left ++; // left col can be removed
            else if (get_sum(prefix_sum, top, right, bottom, right) <= K) // `k` constraint can be removed and no other row/col can be removed (for rows we are stuck, for cols we can't remove `left` col anymore
                right --;
            else
                foreverStuck = true;
        }

        if (!foreverStuck) // potential solution found
        {
            int left_cols_removed = left - 1;
            int right_cols_removed = M - right;
            int cand = N + left_cols_removed + right_cols_removed; // `N` = all rows were removed
            mn = min(mn, cand);
        }

    }

    return mn;
}

int main() { // O((N + M) ^ 2) TC
    // TC Analysis:
    // Case 1: remove all rows : O(M * (N +M)) = O(M*N + M^2)
    // Case 2: remoev all cols <=> remove all rows in aT (transpose of `a` 2D array): O(N * (N + M)) = O(N^2 + NM)
    // Summing up these 2 cases: O((N+M)^2) tc

//    freopen(""instances/small/22_test.in"", ""r"", stdin);
//    freopen(""instances/small/22_test.out"", ""w"", stdout);

    // N * M matrix
    cin >> K >> M >> N;

    a.resize(N + 1, vector<int>(M + 1));
    aT.resize(M + 1, vector<int>(N + 1));

    for (int i = 1; i <= N; ++i)
        for (int j = 1; j <= M; ++j) {
            cin >> a[i][j];
            aT[j][i] = a[i][j];
        }


    int minReduceAllRows = solve(a, N, M);
    int minReduceAllCols = solve(aT, M, N);
    int ans = min(minReduceAllRows, minReduceAllCols);

    std::cout << ans << '\n';


    return 0;
}

"
hH1C2vnx,Shoot for the Win,Osiris1002,Python,Monday 12th of February 2024 11:40:52 AM CDT,"targets = list(map(int, input().split()))
def shoot_target(index):
    if 0 <= index < len(targets) and targets[index] != -1:
        shot_value = targets[index]
        targets[index] = -1
        for i in range(len(targets)):
            if targets[i] > shot_value:
                targets[i] -= shot_value
            elif targets[i] != -1:
                targets[i] += shot_value

while True:
    command = input()
    if command == ""End"":
        break
    index = int(command)
    shoot_target(index)

shot_targets = [target for target in targets if target == -1]

print(f""Shot targets: {len(shot_targets)} -> {' '.join(map(str, targets))}"")"
FjPwABBn,Pet Simulator 99! [☁️UPD 5] AutoFarm Script,Project-WD,Lua,Monday 12th of February 2024 11:35:09 AM CDT,"-- 🆕Update (2024-02-12)
-- AUTO FARM | AUTO GIFTS | AUTO HATCH | AUTO RANK & MORE
-- Script📝: Paste into your executor
loadstring(game:HttpGet(""https://raw.githubusercontent.com/REDzHUBz/PetSimulator99/main/redz9999.lua"" ))()"
UWrPFNuj,Computer Store,Osiris1002,Python,Monday 12th of February 2024 11:33:43 AM CDT,"def calculate_taxes(price):
    return price * 0.2
def calculate_discount(total_price_with_taxes):
    return total_price_with_taxes * 0.1

total_price_without_taxes = 0

while True:
    price = input()
    if price == ""special"" or price == ""regular"":
        customer_type = price
        break
    price = float(price)
    if price <= 0:
        print(""Invalid price!"")
        continue
    total_price_without_taxes += price

if total_price_without_taxes == 0:
    print(""Invalid order!"")
else:
    total_taxes = calculate_taxes(total_price_without_taxes)
    total_price_with_taxes = total_price_without_taxes + total_taxes
    if customer_type == ""special"":
        discount = calculate_discount(total_price_with_taxes)
        total_price_with_taxes -= discount
    print(""Congratulations you've just bought a new computer!"")
    print(f""Price without taxes: {total_price_without_taxes:.2f}$"")
    print(f""Taxes: {total_taxes:.2f}$"")
    print(""-----------"")
    print(f""Total price: {total_price_with_taxes:.2f}$"")"
TBNpkRaH,dasdawe,jamezaa1188,AutoIt,Monday 12th of February 2024 11:33:19 AM CDT,"A9C3ABC2-0997-0DDE-6512-27DA839FCD54
A9C3ABC2-0997-0DDE-65A2-27DA839FCD54"
DfXnvaS1,uiachievement,Lonely_Wanderer,Lua,Monday 12th of February 2024 11:06:31 AM CDT,"local UIAnim = require ""widgets/uianim""
local Text = require ""widgets/text""
local Widget = require ""widgets/widget""
local Image = require ""widgets/image""
local ImageButton = require ""widgets/imagebutton""
local AnimButton = require ""widgets/animbutton""
local HoverText = require ""widgets/hoverer""
local achievement_config = require(""Achievement.achievement_config"")
local achievement_ability_config = require(""Achievement.achievement_ability_config"")
local id2ability = achievement_ability_config.id2ability

local modname = KnownModIndex:GetModActualName(""New Achivement"")
local killAmountFinishAchievement = GetModConfigData(""killamount_can_finish_achievement"",modname)
local uiachievement = Class(Widget, function(self, owner)
	Widget._ctor(self, ""uiachievement"")
	self.owner = owner
	self.mainui = self:AddChild(Widget(""mainui""))
	self.mainui:SetScale(1.06, 1.06, 1)
	self.mainui.bg = self.mainui:AddChild(Image(""images/quagmire_recipebook.xml"", ""quagmire_recipe_menu_bg.tex""))
	self.mainui.bg:SetPosition(0, 20, 0)
	self.mainui.bg:MoveToFront()
	self.mainui.bg:ScaleToSize(1253, 783)
	self.mainui.bg:Hide()

	self.mainui.bg.allachiv = self.mainui.bg:AddChild(Widget(""allachiv""))
	self.mainui.bg.allachiv:SetPosition(0, 0, 0)
	self.mainui.bg.allachiv:Hide()

	self.mainui.bg.allcoin = self.mainui.bg:AddChild(Widget(""allcoin""))
	self.mainui.bg.allcoin:SetPosition(0, 0, 0)
	self.mainui.bg.allcoin:Hide()

	--图鉴
	self.mainui.bg.allchart = self.mainui.bg:AddChild(Widget(""allchart""))
	self.mainui.bg.allchart:SetPosition(0, 0, 0)
	self.mainui.bg.allchart:Hide()
	--3个分类
	self.mainui.bg.title_1 = self.mainui.bg:AddChild(ImageButton(""images/quagmire_recipebook.xml"", ""quagmire_recipe_tab_active.tex""))
	self.mainui.bg.title_1:SetPosition(-365, 420, 0)
	self.mainui.bg.title_1:SetNormalScale(1,1,1)
	self.mainui.bg.title_1:SetFocusScale(1,1,1)
	--成就bt
	self.mainui.bg.title_1:SetOnClick(function()
		self.mainui.bg.title_1:SetTextures(""images/quagmire_recipebook.xml"", ""quagmire_recipe_tab_active.tex"")
		self.mainui.bg.title_2:SetTextures(""images/quagmire_recipebook.xml"", ""quagmire_recipe_tab_inactive.tex"")
		self.mainui.bg.title_3:SetTextures(""images/quagmire_recipebook.xml"", ""quagmire_recipe_tab_inactive.tex"")
		--------------------------------
		if not self.mainui.bg.allachiv.shown then
			self.mainui.bg.allachiv:Show()
			self.mainui.bg:Show()
			self.mainui.infobutton:Show()
			self.mainui.itemclassification:Show()
			self.mainui.bg.allcoin:Hide()
			self.mainui.bg.allchart:Hide()

			self.mainui.infobutton.last:Show()
			self.mainui.infobutton.next:Show()

			self.mainui.infobutton.last2:Hide()
			self.mainui.infobutton.next2:Hide()
			self.mainui.infobutton.last3:Hide()
			self.mainui.infobutton.next3:Hide()
			self.mainui.infobutton.info:Hide()
			self.mainui.infobutton.desc:Hide()
		end
		self.maxnumpage = math.ceil(#self.listitem/14)
		if self.numpage == 1 then
			self.mainui.infobutton.last:SetTextures(""images/button/last_dact.xml"", ""last_dact.tex"")
		else
			self.mainui.infobutton.last:SetTextures(""images/button/last_act.xml"", ""last_act.tex"")
		end
		if self.numpage >= self.maxnumpage then
			self.mainui.infobutton.next:SetTextures(""images/button/next_dact.xml"", ""next_dact.tex"")
		else
			self.mainui.infobutton.next:SetTextures(""images/button/next_act.xml"", ""next_act.tex"")
		end

	end)
	self.mainui.bg.title_1.lable = self.mainui.bg.title_1:AddChild(Text(NEWFONT_OUTLINE, 50, STRINGS.ALLACHIVUISTRING[1]))
	self.mainui.bg.title_1.lable:SetPosition(0, -5, 0)

	self.mainui.bg.title_2 = self.mainui.bg:AddChild(ImageButton(""images/quagmire_recipebook.xml"", ""quagmire_recipe_tab_inactive.tex""))
	self.mainui.bg.title_2:SetPosition(0, 420, 0)
	self.mainui.bg.title_2:SetNormalScale(1,1,1)
	self.mainui.bg.title_2:SetFocusScale(1,1,1)
	--能力BT
	self.mainui.bg.title_2:SetOnClick(function()

		self.mainui.bg.title_1:SetTextures(""images/quagmire_recipebook.xml"", ""quagmire_recipe_tab_inactive.tex"")
		self.mainui.bg.title_2:SetTextures(""images/quagmire_recipebook.xml"", ""quagmire_recipe_tab_active.tex"")
		self.mainui.bg.title_3:SetTextures(""images/quagmire_recipebook.xml"", ""quagmire_recipe_tab_inactive.tex"")

		if not self.mainui.bg.allcoin.shown then
			if  TUNING.CHECKCOIN then
				self.mainui.bg.allcoin:Hide()
			else
				self.mainui.bg.allcoin:Show()
			end
			self.mainui.bg:Show()
			self.mainui.infobutton:Show()
				
			self.mainui.itemclassification:Hide()
				
			self.mainui.bg.allachiv:Hide()
			self.mainui.bg.allchart:Hide()
			self.mainui.infobutton.last:Hide()
			self.mainui.infobutton.next:Hide()
			self.mainui.infobutton.last3:Hide()
			self.mainui.infobutton.next3:Hide()
			self.mainui.infobutton.last2:Show()
			self.mainui.infobutton.next2:Show()
			self.mainui.infobutton.info:Hide()
			self.mainui.infobutton.desc:Hide()
		end
		self.mainui.infobutton.last:SetTextures(""images/button/last_dact.xml"", ""last_dact.tex"")
		self.mainui.infobutton.next:SetTextures(""images/button/next_dact.xml"", ""next_dact.tex"")

		self.maxnumpage2 = math.ceil(#self.coinlist/28)
		if self.numpage2 == 1 then
			self.mainui.infobutton.last2:SetTextures(""images/button/last_dact.xml"", ""last_dact.tex"")
		else
			self.mainui.infobutton.last2:SetTextures(""images/button/last_act.xml"", ""last_act.tex"")
		end
		if self.numpage2 >= self.maxnumpage2 then
			self.mainui.infobutton.next2:SetTextures(""images/button/next_dact.xml"", ""next_dact.tex"")
		else
			self.mainui.infobutton.next2:SetTextures(""images/button/next_act.xml"", ""next_act.tex"")
		end
		
	end)

	self.mainui.bg.title_2.lable = self.mainui.bg.title_2:AddChild(Text(NEWFONT_OUTLINE, 50, STRINGS.ALLACHIVUISTRING[2]))
	self.mainui.bg.title_2.lable:SetPosition(0, -5, 0)

	self.mainui.bg.title_3 = self.mainui.bg:AddChild(ImageButton(""images/quagmire_recipebook.xml"", ""quagmire_recipe_tab_inactive.tex""))
	self.mainui.bg.title_3:SetPosition(365, 420, 0)
	self.mainui.bg.title_3:SetNormalScale(1,1,1)
	self.mainui.bg.title_3:SetFocusScale(1,1,1)
	--图鉴BT
	self.mainui.bg.title_3:SetOnClick(function()
		self.mainui.bg.title_1:SetTextures(""images/quagmire_recipebook.xml"", ""quagmire_recipe_tab_inactive.tex"")
		self.mainui.bg.title_2:SetTextures(""images/quagmire_recipebook.xml"", ""quagmire_recipe_tab_inactive.tex"")
		self.mainui.bg.title_3:SetTextures(""images/quagmire_recipebook.xml"", ""quagmire_recipe_tab_active.tex"")

		if not self.mainui.bg.allchart.shown then
			self.mainui.bg.allchart:Show()
			self.mainui.bg:Show()
			self.mainui.infobutton:Show()
				
			self.mainui.itemclassification:Hide()
			self.mainui.bg.allcoin:Hide()
			self.mainui.bg.allachiv:Hide()
			self.mainui.infobutton.last:Hide()
			self.mainui.infobutton.next:Hide()
			self.mainui.infobutton.last2:Hide()
			self.mainui.infobutton.next2:Hide()

			self.mainui.infobutton.last3:Show()
			self.mainui.infobutton.next3:Show()
			self.mainui.infobutton.info:Hide()
			self.mainui.infobutton.desc:Hide()
		end


	end)
	self.mainui.bg.title_3.lable = self.mainui.bg.title_3:AddChild(Text(NEWFONT_OUTLINE, 50, STRINGS.ALLACHIVUISTRING[3]))
	self.mainui.bg.title_3.lable:SetPosition(0, -5, 0)

	--线
	self.mainui.bg.line = self.mainui.bg:AddChild(Image(""images/quagmire_recipebook.xml"", ""quagmire_recipe_line_long.tex""))
	self.mainui.bg.line:SetPosition(0, 325, 0)

	--成就点 显示
	self.mainui.bg.coinamount = self.mainui.bg:AddChild(Text(NEWFONT_OUTLINE, 45,string.format(STRINGS.ACHIEVEMENT_POINT_AMOUNT, self.owner.currentcoinamount:value())))
	self.mainui.bg.coinamount:SetPosition(-180, 350, 0)
	--杀戮值
	self.mainui.bg.killamount = self.mainui.bg:AddChild(Text(NEWFONT_OUTLINE, 45, string.format(STRINGS.ACHIEVEMENT_KILL_AMOUNT, self.owner.currentkillamount:value())))
	self.mainui.bg.killamount:SetPosition(180, 350, 0)

	self.mainbutton = self:AddChild(Widget(""mainbutton""))
	self.mainbutton:SetPosition(-850, 460, 0)
	self.mainbutton:SetScale(1,1,1)

	self.mainbutton.checkbuttonglow = self.mainbutton:AddChild(Image(""images/button/checkbuttonglow.xml"", ""checkbuttonglow.tex""))
    self.mainbutton.checkbuttonglow:SetClickable(false)
    self.mainbutton.checkbuttonglow:Hide()

--多少任务
    self.mainbutton.checkbutton = self.mainbutton:AddChild(ImageButton(""images/button/checkbutton.xml"", ""checkbutton.tex""))
    self.mainbutton.checkbutton:MoveToFront()
    self.mainbutton.checkbutton:SetHoverText(STRINGS.ACHIEVEMENT_VIEW)

	self.mainbutton.checkbutton:SetOnGainFocus(function() self.mainbutton.checkbuttonglow:Show() end)
	self.mainbutton.checkbutton:SetOnLoseFocus(function() self.mainbutton.checkbuttonglow:Hide() end)
	self.cooldown = true
	self.mainbutton.checkbutton:SetOnClick(function()
		if TheInput:IsKeyDown(KEY_ALT) and TheInput:IsKeyDown(KEY_SHIFT) then
			if self.cooldown then
				local allnumber = #self.achivlist - 1
				if  not TheInput:IsKeyDown(KEY_CTRL) then
					TheNet:Say(STRINGS.LMB ..string.format(STRINGS.ACHIEVEMENT_PROCESS,self.achivlist[#self.achivlist].current,allnumber), false)
				else
					if  TheInput:IsKeyDown(KEY_CTRL) then
						TheNet:Say(STRINGS.LMB .. string.format(STRINGS.ACHIEVEMENT_PROCESS ,self.achivlist[#self.achivlist].current,allnumber), true)
					end
				end
				self.cooldown = false
				self.owner:DoTaskInTime(3, function() self.cooldown = true end)
			end
		else
			if self.mainui.bg.allachiv.shown then
				self.mainui.bg.allachiv:Hide()
				self.mainui.bg:Hide()
				self.mainui.infobutton:Hide()
				self.mainui.itemclassification:Hide()
				--self.mainbutton.configact:Hide()
				self.mainbutton.configbg:Hide()
				self.mainbutton.configbigger:Hide()
				self.mainbutton.configsmaller:Hide()
				self.mainbutton.configremove:Hide()
				self.mainbutton.removeinfo:Hide()
				self.mainbutton.removeyes:Hide()
				self.mainbutton.removeno:Hide()
			else
				self.mainui.bg.allachiv:Show()
				self.mainui.bg:Show()
				self.mainui.infobutton:Show()
				self.mainui.itemclassification:Show()
				self.mainui.bg.allcoin:Hide()
				self.mainui.infobutton.last:Show()
				self.mainui.infobutton.next:Show()
				self.mainui.infobutton.last2:Hide()
				self.mainui.infobutton.next2:Hide()
				self.mainui.infobutton.last3:Hide()
				self.mainui.infobutton.next3:Hide()

				self.mainui.bg.title_1:SetTextures(""images/quagmire_recipebook.xml"", ""quagmire_recipe_tab_active.tex"")
				self.mainui.bg.title_2:SetTextures(""images/quagmire_recipebook.xml"", ""quagmire_recipe_tab_inactive.tex"")
				self.mainui.bg.title_3:SetTextures(""images/quagmire_recipebook.xml"", ""quagmire_recipe_tab_inactive.tex"")

				if TUNING.CHECKCOIN then
					--self.mainbutton.configact:Hide()
				else
					if self.mainbutton.configact.shown then
						self.mainbutton.configact:Show()
					else
						self.mainbutton.configact:SetTextures(""images/button/config_dact.xml"", ""config_dact.tex"")
						self.mainbutton.configact:Show()
					end
				end

			end
			self.maxnumpage = math.ceil(#self.listitem/14)
			if self.numpage == 1 then
				self.mainui.infobutton.last:SetTextures(""images/button/last_dact.xml"", ""last_dact.tex"")
			else
				self.mainui.infobutton.last:SetTextures(""images/button/last_act.xml"", ""last_act.tex"")
			end
			if self.numpage >= self.maxnumpage then
				self.mainui.infobutton.next:SetTextures(""images/button/next_dact.xml"", ""next_dact.tex"")
			else
				self.mainui.infobutton.next:SetTextures(""images/button/next_act.xml"", ""next_act.tex"")
			end
	    end
	end)

	self.mainbutton.coinbuttonglow = self.mainbutton:AddChild(Image(""images/button/coinbuttonglow.xml"", ""coinbuttonglow.tex""))
    self.mainbutton.coinbuttonglow:SetClickable(false)
    self.mainbutton.coinbuttonglow:Hide()
    self.mainbutton.coinbuttonglow:SetPosition(55, -2, 0)
    self.mainbutton.coinbuttonglow:SetScale(1,1,1)
--多少 点
    self.mainbutton.coinbutton = self.mainbutton:AddChild(ImageButton(""images/button/coinbutton.xml"", ""coinbutton.tex""))
    self.mainbutton.coinbutton:MoveToFront()
    self.mainbutton.coinbutton:SetPosition(55, -2, 0)
    self.mainbutton.coinbutton:SetScale(1,1,1)
    self.mainbutton.coinbutton:SetHoverText(STRINGS.ACHIEVEMENT_EXCHANGE_ABILITY)

	self.mainbutton.coinbutton:SetOnGainFocus(function() self.mainbutton.coinbuttonglow:Show() end)
	self.mainbutton.coinbutton:SetOnLoseFocus(function() self.mainbutton.coinbuttonglow:Hide() end)

	if TUNING.CHECKCOIN then
		self.mainbutton.coinbutton:Hide()
	end
	self.mainbutton.coinbutton:SetOnClick(function()
		if TheInput:IsKeyDown(KEY_ALT) and TheInput:IsKeyDown(KEY_SHIFT) then
			if self.cooldown then
				local emoji_link = "" ""
				local announce = 1
				if self.owner.currentcoinamount:value() < 20 then
					if TheInventory:CheckOwnership(""emoji_lightbulb"") then emoji_link = "":lightbulb:"" end
					announce = 1
				elseif self.owner.currentcoinamount:value() >= 20 and  self.owner.currentcoinamount:value() <= 50 then
					if TheInventory:CheckOwnership(""emoji_thumbsup"") then emoji_link = "":thumbsup:"" end
					announce = 2
				elseif self.owner.currentcoinamount:value() > 50 and  self.owner.currentcoinamount:value() < 90 then
					announce = 3
					if TheInventory:CheckOwnership(""emoji_flex"") then emoji_link = "":flex:"" end
				else 
					announce = 4
					if TheInventory:CheckOwnership(""emoji_fire"") then emoji_link = "":fire:"" end
				end
				TheNet:Say(STRINGS.LMB .. string.format(STRINGS.ACHIEVEMENT_ANNOUNCE_POINT[announce], self.owner.currentcoinamount:value())..emoji_link .. string.format(STRINGS.ACHIEVEMENT_KILL_AMOUNT, self.owner.currentkillamount:value()), false)
				self.cooldown = false
				self.owner:DoTaskInTime(3, function() self.cooldown = true end)
			end
		else
			if self.mainui.bg.allcoin.shown then
				self.mainui.bg.allcoin:Hide()
				self.mainui.bg:Hide()
				self.mainui.infobutton:Hide()
				self.mainui.itemclassification:Hide()
				--self.mainbutton.configact:Hide()

				self.mainbutton.configbg:Hide()
				self.mainbutton.configbigger:Hide()
				self.mainbutton.configsmaller:Hide()
				self.mainbutton.configremove:Hide()
				self.mainbutton.removeinfo:Hide()
				self.mainbutton.removeyes:Hide()
				self.mainbutton.removeno:Hide()
			else
				self.mainui.bg.allcoin:Show()
				self.mainui.bg:Show()
				self.mainui.infobutton:Show()
				
				self.mainui.itemclassification:Hide()
				
				self.mainui.bg.allachiv:Hide()
				self.mainui.infobutton.last:Hide()
				self.mainui.infobutton.next:Hide()

				self.mainui.infobutton.last2:Show()
				self.mainui.infobutton.next2:Show()

				self.mainui.infobutton.last3:Hide()
				self.mainui.infobutton.next3:Hide()

				self.mainui.bg.title_2:SetTextures(""images/quagmire_recipebook.xml"", ""quagmire_recipe_tab_active.tex"")
				self.mainui.bg.title_1:SetTextures(""images/quagmire_recipebook.xml"", ""quagmire_recipe_tab_inactive.tex"")
				self.mainui.bg.title_3:SetTextures(""images/quagmire_recipebook.xml"", ""quagmire_recipe_tab_inactive.tex"")
				

				if TUNING.CHECKCOIN then
					--self.mainbutton.configact:Hide()
				else
					if self.mainbutton.configact.shown  then
						self.mainbutton.configact:Show()
					else
						self.mainbutton.configact:SetTextures(""images/button/config_dact.xml"", ""config_dact.tex"")
						self.mainbutton.configact:Show()
					end
				end
			end
			self.mainui.infobutton.last:SetTextures(""images/button/last_dact.xml"", ""last_dact.tex"")
			self.mainui.infobutton.next:SetTextures(""images/button/next_dact.xml"", ""next_dact.tex"")

			self.maxnumpage2 = math.ceil(#self.coinlist/28)
			if self.numpage2 == 1 then
				self.mainui.infobutton.last2:SetTextures(""images/button/last_dact.xml"", ""last_dact.tex"")
			else
				self.mainui.infobutton.last2:SetTextures(""images/button/last_act.xml"", ""last_act.tex"")
			end

			if self.numpage2 >= self.maxnumpage2 then
				self.mainui.infobutton.next2:SetTextures(""images/button/next_dact.xml"", ""next_dact.tex"")
			else
				self.mainui.infobutton.next2:SetTextures(""images/button/next_act.xml"", ""next_act.tex"")
			end
		end
	end)

	self.mainbutton.configbg = self.mainbutton:AddChild(Image(""images/button/config_bg.xml"", ""config_bg.tex""))
	self.mainbutton.configbg:SetPosition(193, -5, 0)
	self.mainbutton.configbg:SetClickable(false)
	self.mainbutton.configbg:Hide()


	self.mainbutton.configact = self.mainbutton:AddChild(ImageButton(""images/button/config_dact.xml"", ""config_dact.tex""))
	self.mainbutton.configact:SetPosition(115, -5, 0)
	self.mainbutton.configact:SetNormalScale(1,1,1)
	self.mainbutton.configact:SetFocusScale(1.1,1.1,1)
	self.mainbutton.configact:SetHoverText(STRINGS.ACHIEVEMENT_OPTION)

	if TUNING.CHECKCOIN then
		--self.mainbutton.configact:Hide()
	end

	--self.mainbutton.configact:Hide()

	self.mainbutton.configact:SetOnClick(function()
		if self.mainbutton.configbg.shown then
			self.mainbutton.configact:SetTextures(""images/button/config_dact.xml"", ""config_dact.tex"")
			self.mainbutton.configbg:Hide()
			self.mainbutton.configbigger:Hide()
			self.mainbutton.configsmaller:Hide()
			self.mainbutton.configremove:Hide()
		else
			self.mainbutton.configact:SetTextures(""images/button/config_act.xml"", ""config_act.tex"")
			self.mainbutton.configbg:Show()
			self.mainbutton.configbigger:Show()
			self.mainbutton.configsmaller:Show()
			self.mainbutton.configremove:Show()
		end
		self.mainbutton.removeinfo:Hide()
		self.mainbutton.removeyes:Hide()
		self.mainbutton.removeno:Hide()
	end)

	self.size = 1.06
	self.mainbutton.configbigger = self.mainbutton:AddChild(ImageButton(""images/button/config_bigger.xml"", ""config_bigger.tex""))
	self.mainbutton.configbigger:SetPosition(167, -5, 0)
	self.mainbutton.configbigger:Hide()
	self.mainbutton.configbigger:SetNormalScale(1,1,1)
	self.mainbutton.configbigger:SetFocusScale(1.1,1.1,1)
	self.mainbutton.configbigger:SetHoverText(STRINGS.ACHIEVEMENT_ENLARGE)
	self.mainbutton.configbigger:SetOnClick(function()
		if not self.mainui.bg.allachiv.shown and not self.mainui.bg.allcoin.shown then
			self.mainui.bg.allachiv:Show()
			self.mainui.bg:Show()
			self.mainui.infobutton:Show()
		end
		self.size = self.size + .02
		self.mainui:SetScale(self.size, self.size, 1)
	end)

	self.mainbutton.configsmaller = self.mainbutton:AddChild(ImageButton(""images/button/config_smaller.xml"", ""config_smaller.tex""))
	self.mainbutton.configsmaller:SetPosition(219, -5, 0)
	self.mainbutton.configsmaller:Hide()
	self.mainbutton.configsmaller:SetNormalScale(1,1,1)
	self.mainbutton.configsmaller:SetFocusScale(1.1,1.1,1)
	self.mainbutton.configsmaller:SetHoverText(STRINGS.ACHIEVEMENT_SHRINK)
	self.mainbutton.configsmaller:SetOnClick(function()
		if not self.mainui.bg.allachiv.shown and not self.mainui.bg.allcoin.shown then
			self.mainui.bg.allachiv:Show()
			self.mainui.bg:Show()
			self.mainui.infobutton:Show()
		end
		if self.size > .02 then
			self.size = self.size - .02
		end
		self.mainui:SetScale(self.size, self.size, 1)
	end)
	self.mainbutton.removeinfo = self.mainbutton:AddChild(Image(""images/button/remove_info_cn.xml"", ""remove_info_cn.tex""))
	self.mainbutton.removeinfo:SetPosition(230, -180, 0)
	self.mainbutton.removeinfo:SetScale(.95,.95,1)
	
	self.mainbutton.removeinfo.title = self.mainbutton.removeinfo:AddChild(Text(NEWFONT_OUTLINE, 45, STRINGS.ALLACHIEVE_RESET_CONFIRM))
	self.mainbutton.removeinfo.title:SetPosition(-90, 110, 0)
	self.mainbutton.removeinfo.title:SetColour(1, 0, 0, 1)

	self.mainbutton.removeinfo.lable = self.mainbutton.removeinfo:AddChild(Text(NEWFONT_OUTLINE, 30, string.format(STRINGS.ALLACHIEVE_RESET,TUNING.RETRUN_POINT * 100)))
	self.mainbutton.removeinfo.lable:SetPosition(-80, 80, 0)
	self.mainbutton.removeinfo.lable:SetRegionSize(300,80)
	self.mainbutton.removeinfo:Hide()
	self.mainbutton.configremove = self.mainbutton:AddChild(ImageButton(""images/button/config_remove.xml"", ""config_remove.tex""))
	self.mainbutton.configremove:SetPosition(271, -5, 0)
	self.mainbutton.configremove:Hide()
	self.mainbutton.configremove:SetNormalScale(1,1,1)
	self.mainbutton.configremove:SetFocusScale(1.1,1.1,1)
	self.mainbutton.configremove:SetHoverText(STRINGS.ACHIEVEMENT_RESET)
	self.mainbutton.configremove:SetOnClick(function()
		self.mainbutton.removeinfo:Show()
		self.mainbutton.removeyes:Show()
		self.mainbutton.removeno:Show()
	end)

	self.mainbutton.removeyes = self.mainbutton:AddChild(ImageButton(""images/button/remove_yes.xml"", ""remove_yes.tex""))
	self.mainbutton.removeyes:SetPosition(17, -77, 0)
	self.mainbutton.removeyes:Hide()
	self.mainbutton.removeyes:SetNormalScale(1,1,1)
	self.mainbutton.removeyes:SetFocusScale(1.1,1.1,1)
	self.mainbutton.removeyes:SetOnClick(function()
		SendModRPCToServer(MOD_RPC[""DSTAchievement""][""removecoin""])
		self.owner:DoTaskInTime(.35, function()
			self:loadcoinlist()
			self:coinbuild()
		end)
		self.mainbutton.removeinfo:Hide()
		self.mainbutton.removeyes:Hide()
		self.mainbutton.removeno:Hide()

		self.mainui.bg.allcoin:Hide()
		self.mainui.bg:Hide()
		self.mainui.infobutton:Hide()
		self.mainui.itemclassification:Hide()
		self.mainui.bg.allachiv:Hide()

		--self.mainbutton.configact:Hide()
		self.mainbutton.configbg:Hide()
		self.mainbutton.configbigger:Hide()
		self.mainbutton.configsmaller:Hide()
		self.mainbutton.configremove:Hide()
	end)

	self.mainbutton.removeno = self.mainbutton:AddChild(ImageButton(""images/button/remove_no.xml"", ""remove_no.tex""))
	self.mainbutton.removeno:SetPosition(257, -77, 0)
	self.mainbutton.removeno:Hide()
	self.mainbutton.removeno:SetNormalScale(1,1,1)
	self.mainbutton.removeno:SetFocusScale(1.1,1.1,1)
	self.mainbutton.removeno:SetOnClick(function()
		self.mainbutton.removeinfo:Hide()
		self.mainbutton.removeyes:Hide()
		self.mainbutton.removeno:Hide()
	end)

	self.mainui.infobutton = self.mainui:AddChild(Widget(""infobutton""))
	self.mainui.infobutton:SetPosition(240, -30, 0)
	self.mainui.infobutton:Hide()

	self.mainui.infobutton.info = self.mainui.infobutton:AddChild(Image(""images/quagmire_recipebook.xml"", ""quagmire_recipe_menu_bg.tex""))
	self.mainui.infobutton.info:SetPosition(-240, 50, 0)
	self.mainui.bg:ScaleToSize(1253, 783)
	self.mainui.infobutton.info:Hide()

	self.mainui.infobutton.desc = self.mainui.infobutton:AddChild(Text(NEWFONT, 36, STRINGS.ALLACHIVINFODESC[1] ))
	self.mainui.infobutton.desc:SetColour(0, 0, 0, 1)
	self.mainui.infobutton.desc:SetPosition(-210, 10, 0)
	self.mainui.infobutton.desc:SetHAlign(ANCHOR_LEFT)
	self.mainui.infobutton.desc:SetRegionSize(960,680)
	self.mainui.infobutton.desc:Hide()
	

	self.mainui.infobutton.question = self.mainui.infobutton:AddChild(ImageButton(""images/button/infobutton.xml"", ""infobutton.tex""))
	self.mainui.infobutton.question:SetPosition(40, -370, 0)
	self.mainui.infobutton.question:SetOnClick(function()
		if self.mainui.infobutton.info.shown then
			self.mainui.infobutton.info:Hide()
			self.mainui.infobutton.desc:Hide()
		else
			self.mainui.infobutton.info:Show()
			self.mainui.infobutton.desc:Show()
		end
	end)

	self.mainui.infobutton.last = self.mainui.infobutton:AddChild(ImageButton(""images/button/last_dact.xml"", ""last_dact.tex""))
	self.mainui.infobutton.last:SetPosition(98, -370, 0)
	self.mainui.infobutton.last:SetOnClick(function()
		if self.numpage > 1 and self.mainui.bg.allachiv.shown then
			self.numpage = self.numpage - 1
			self:build()
			self.mainui.infobutton.next:SetTextures(""images/button/next_act.xml"", ""next_act.tex"")
		end
		if self.numpage == 1 then
			self.mainui.infobutton.last:SetTextures(""images/button/last_dact.xml"", ""last_dact.tex"")
		end
	end)

	self.mainui.infobutton.last2 = self.mainui.infobutton:AddChild(ImageButton(""images/button/last_dact.xml"", ""last_dact.tex""))
	self.mainui.infobutton.last2:SetPosition(98, -370, 0)
	self.mainui.infobutton.last2:SetOnClick(function()
		if self.numpage2 > 1 and self.mainui.bg.allcoin.shown then
			self.numpage2 = self.numpage2 - 1 
			self:coinbuild()
			self.mainui.infobutton.next2:SetTextures(""images/button/next_act.xml"", ""next_act.tex"")
		end
		if self.numpage2 == 1 then
			self.mainui.infobutton.last2:SetTextures(""images/button/last_dact.xml"", ""last_dact.tex"")
		end
	end)
	self.mainui.infobutton.next2 = self.mainui.infobutton:AddChild(ImageButton(""images/button/next_act.xml"", ""next_act.tex""))
	self.mainui.infobutton.next2:SetPosition(161, -370, 0)
	self.mainui.infobutton.next2:SetOnClick(function()

		if self.numpage2 < self.maxnumpage2 and self.mainui.bg.allcoin.shown then
			self.numpage2 = self.numpage2 + 1
			self:coinbuild()
			self.mainui.infobutton.last2:SetTextures(""images/button/last_act.xml"", ""last_act.tex"")
		end
		if self.numpage2 == self.maxnumpage2 then
			self.mainui.infobutton.next2:SetTextures(""images/button/next_dact.xml"", ""next_dact.tex"")
		end
	end)

	--第3
	self.mainui.infobutton.last3 = self.mainui.infobutton:AddChild(ImageButton(""images/button/last_dact.xml"", ""last_dact.tex""))
	self.mainui.infobutton.last3:SetPosition(98, -370, 0)
	
	self.mainui.infobutton.next3 = self.mainui.infobutton:AddChild(ImageButton(""images/button/next_act.xml"", ""next_act.tex""))
	self.mainui.infobutton.next3:SetPosition(161, -370, 0)
	
	self.mainui.infobutton.next3:SetOnClick(function()

	end)
	
	self.mainui.infobutton.next = self.mainui.infobutton:AddChild(ImageButton(""images/button/next_act.xml"", ""next_act.tex""))
	self.mainui.infobutton.next:SetPosition(161, -370, 0)
	self.mainui.infobutton.next:SetOnClick(function()

		if self.numpage < self.maxnumpage and self.mainui.bg.allachiv.shown then
			self.numpage = self.numpage + 1
			self:build()
			self.mainui.infobutton.last:SetTextures(""images/button/last_act.xml"", ""last_act.tex"")
		end
		if self.numpage == self.maxnumpage then
			self.mainui.infobutton.next:SetTextures(""images/button/next_dact.xml"", ""next_dact.tex"")
		end
	end)
	
	
	
	
	-- My changes, second page of HELP about Abilities  -----------------------------------------
	
	self.mainui.infobutton.info2 = self.mainui.infobutton:AddChild(Image(""images/quagmire_recipebook.xml"", ""quagmire_recipe_menu_bg.tex""))
	self.mainui.infobutton.info2:SetPosition(-240, 50, 0)
	self.mainui.bg:ScaleToSize(1253, 783)
	self.mainui.infobutton.info2:Hide()
	
	self.mainui.infobutton.desc2 = self.mainui.infobutton:AddChild(Text(NEWFONT, 36, STRINGS.ALLACHIVINFODESC[2] ))
	self.mainui.infobutton.desc2:SetColour(0, 0, 0, 1)
	self.mainui.infobutton.desc2:SetPosition(-210, 10, 0)
	self.mainui.infobutton.desc2:SetHAlign(ANCHOR_LEFT)
	self.mainui.infobutton.desc2:SetRegionSize(960,680)
	self.mainui.infobutton.desc2:Hide()
	

	self.mainui.infobutton.question2 = self.mainui.infobutton:AddChild(ImageButton(""images/button/infobutton.xml"", ""infobutton.tex""))
	self.mainui.infobutton.question2:SetPosition(0, -370, 0)	
	self.mainui.infobutton.question2:SetOnClick(function()
		if self.mainui.infobutton.info2.shown then
			self.mainui.infobutton.info2:Hide()
			self.mainui.infobutton.desc2:Hide()
		else
			self.mainui.infobutton.info2:Show()
			self.mainui.infobutton.desc2:Show()
		end
	end)
	
	-- End of my changes --------------------------------------------------------------
	
	
	
	self.mainui.infobutton.close = self.mainui.infobutton:AddChild(ImageButton(""images/button/close.xml"", ""close.tex""))
	self.mainui.infobutton.close:SetPosition(220, -370, 0)
	self.mainui.infobutton.close:SetOnClick(function()
		self.mainui.bg.allachiv:Hide()
		self.mainui.bg.allcoin:Hide()
		self.mainui.bg:Hide()
		self.mainui.infobutton:Hide()
		self.mainui.itemclassification:Hide()

		--self.mainbutton.configact:Hide()
		self.mainbutton.configbg:Hide()
		self.mainbutton.configbigger:Hide()
		self.mainbutton.configsmaller:Hide()
		self.mainbutton.configremove:Hide()
		self.mainbutton.removeinfo:Hide()
		self.mainbutton.removeyes:Hide()
		self.mainbutton.removeno:Hide()
	end)

	--项目分类 
	self.mainui.itemclassification = self.mainui:AddChild(Widget(""itemclassification""))
	self.mainui.itemclassification:SetPosition(-210, -30, 0)
	self.mainui.itemclassification:Hide()

	self.mainui.itemclassification.head = self.mainui.itemclassification:AddChild(ImageButton(""images/button/item_head_dact.xml"", ""item_head_dact.tex""))
	self.mainui.itemclassification.head:SetPosition(-220, -370, 0)
	self.mainui.itemclassification.head:SetOnGainFocus(function() self.mainui.itemclassification.head.item:SetSize(34) end)
	self.mainui.itemclassification.head:SetOnLoseFocus(function() self.mainui.itemclassification.head.item:SetSize(30) end)
	self.mainui.itemclassification.head.item = self.mainui.itemclassification.head:AddChild(Text(NEWFONT, 30, STRINGS.ALLACHIVITEM[1],{0,0,0,1}))
	self.mainui.itemclassification.head.item:SetHAlign(ANCHOR_MIDDLE)
	self.mainui.itemclassification.head.item:SetRegionSize(60,30)

	self.mainui.itemclassification.head:SetOnClick(function()
		self.numpage = 1
		self.item = 1
		self:build()
		self.mainui.infobutton.last:SetTextures(""images/button/last_dact.xml"", ""last_dact.tex"")
		self.maxnumpage =  math.ceil(#self.listitem/14)
		if self.numpage == self.maxnumpage then
			self.mainui.infobutton.next:SetTextures(""images/button/next_dact.xml"", ""next_dact.tex"")
		else
			self.mainui.infobutton.next:SetTextures(""images/button/next_act.xml"", ""next_act.tex"")
		end
		self.mainui.itemclassification.head:SetTextures(""images/button/item_head_dact.xml"", ""item_head_dact.tex"")
		self.mainui.itemclassification.mid2:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid3:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid4:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid5:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid6:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid7:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid8:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid9:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.tail:SetTextures(""images/button/item_tail_act.xml"", ""item_tail_act.tex"")
	end)

	self.mainui.itemclassification.mid2 = self.mainui.itemclassification:AddChild(ImageButton(""images/button/item_mide_act.xml"", ""item_mide_act.tex""))
	self.mainui.itemclassification.mid2:SetPosition(-160, -370, 0)
	self.mainui.itemclassification.mid2:SetOnGainFocus(function() self.mainui.itemclassification.mid2.item:SetSize(34) end)
	self.mainui.itemclassification.mid2:SetOnLoseFocus(function() self.mainui.itemclassification.mid2.item:SetSize(30) end)
	self.mainui.itemclassification.mid2.item = self.mainui.itemclassification.mid2:AddChild(Text(NEWFONT, 30, STRINGS.ALLACHIVITEM[2],{0,0,0,1}))
	self.mainui.itemclassification.mid2.item:SetHAlign(ANCHOR_MIDDLE)
	self.mainui.itemclassification.mid2.item:SetRegionSize(60,30)
	self.mainui.itemclassification.mid2:SetOnClick(function()
		self.numpage = 1
		self.item = 2
		self:build()
		self.mainui.infobutton.last:SetTextures(""images/button/last_dact.xml"", ""last_dact.tex"")
		self.maxnumpage =  math.ceil(#self.listitem/14)
		if self.numpage == self.maxnumpage then
			self.mainui.infobutton.next:SetTextures(""images/button/next_dact.xml"", ""next_dact.tex"")
		else
			self.mainui.infobutton.next:SetTextures(""images/button/next_act.xml"", ""next_act.tex"")
		end
		self.mainui.itemclassification.head:SetTextures(""images/button/item_head_act.xml"", ""item_head_act.tex"")
		self.mainui.itemclassification.mid2:SetTextures(""images/button/item_mide_dact.xml"", ""item_mide_dact.tex"")
		self.mainui.itemclassification.mid3:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid4:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid5:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid6:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid7:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid8:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid9:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.tail:SetTextures(""images/button/item_tail_act.xml"", ""item_tail_act.tex"")
	end)

	self.mainui.itemclassification.mid3 = self.mainui.itemclassification:AddChild(ImageButton(""images/button/item_mide_act.xml"", ""item_mide_act.tex""))
	self.mainui.itemclassification.mid3:SetPosition(-100, -370, 0)
	self.mainui.itemclassification.mid3:SetOnGainFocus(function() self.mainui.itemclassification.mid3.item:SetSize(34) end)
	self.mainui.itemclassification.mid3:SetOnLoseFocus(function() self.mainui.itemclassification.mid3.item:SetSize(30) end)
	self.mainui.itemclassification.mid3.item = self.mainui.itemclassification.mid3:AddChild(Text(NEWFONT, 30, STRINGS.ALLACHIVITEM[3],{0,0,0,1}))
	self.mainui.itemclassification.mid3.item:SetHAlign(ANCHOR_MIDDLE)
	self.mainui.itemclassification.mid3.item:SetRegionSize(60,30)
	self.mainui.itemclassification.mid3:SetOnClick(function()
		self.numpage = 1
		self.item = 3
		self:build()
		self.mainui.infobutton.last:SetTextures(""images/button/last_dact.xml"", ""last_dact.tex"")
		self.maxnumpage =  math.ceil(#self.listitem/14)
		if self.numpage == self.maxnumpage then
			self.mainui.infobutton.next:SetTextures(""images/button/next_dact.xml"", ""next_dact.tex"")
		else
			self.mainui.infobutton.next:SetTextures(""images/button/next_act.xml"", ""next_act.tex"")
		end
		self.mainui.itemclassification.head:SetTextures(""images/button/item_head_act.xml"", ""item_head_act.tex"")
		self.mainui.itemclassification.mid2:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid3:SetTextures(""images/button/item_mide_dact.xml"", ""item_mide_dact.tex"")
		self.mainui.itemclassification.mid4:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid5:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid6:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid7:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid8:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid9:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.tail:SetTextures(""images/button/item_tail_act.xml"", ""item_tail_act.tex"")
	end)

	self.mainui.itemclassification.mid4 = self.mainui.itemclassification:AddChild(ImageButton(""images/button/item_mide_act.xml"", ""item_mide_act.tex""))
	self.mainui.itemclassification.mid4:SetPosition(-40, -370, 0)
	self.mainui.itemclassification.mid4:SetOnGainFocus(function() self.mainui.itemclassification.mid4.item:SetSize(34) end)
	self.mainui.itemclassification.mid4:SetOnLoseFocus(function() self.mainui.itemclassification.mid4.item:SetSize(30) end)
	self.mainui.itemclassification.mid4.item = self.mainui.itemclassification.mid4:AddChild(Text(NEWFONT, 30, STRINGS.ALLACHIVITEM[4],{0,0,0,1}))
	self.mainui.itemclassification.mid4.item:SetHAlign(ANCHOR_MIDDLE)
	self.mainui.itemclassification.mid4.item:SetRegionSize(60,30)
	self.mainui.itemclassification.mid4:SetOnClick(function()
		self.numpage = 1
		self.item = 4
		self:build()
		self.mainui.infobutton.last:SetTextures(""images/button/last_dact.xml"", ""last_dact.tex"")
		self.maxnumpage =  math.ceil(#self.listitem/14)
		if self.numpage == self.maxnumpage then
			self.mainui.infobutton.next:SetTextures(""images/button/next_dact.xml"", ""next_dact.tex"")
		else
			self.mainui.infobutton.next:SetTextures(""images/button/next_act.xml"", ""next_act.tex"")
		end
		self.mainui.itemclassification.head:SetTextures(""images/button/item_head_act.xml"", ""item_head_act.tex"")
		self.mainui.itemclassification.mid2:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid3:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid4:SetTextures(""images/button/item_mide_dact.xml"", ""item_mide_dact.tex"")
		self.mainui.itemclassification.mid5:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid6:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid7:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid8:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid9:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.tail:SetTextures(""images/button/item_tail_act.xml"", ""item_tail_act.tex"")
	end)

	self.mainui.itemclassification.mid5 = self.mainui.itemclassification:AddChild(ImageButton(""images/button/item_mide_act.xml"", ""item_mide_act.tex""))
	self.mainui.itemclassification.mid5:SetPosition(20, -370, 0)
	self.mainui.itemclassification.mid5:SetOnGainFocus(function() self.mainui.itemclassification.mid5.item:SetSize(34) end)
	self.mainui.itemclassification.mid5:SetOnLoseFocus(function() self.mainui.itemclassification.mid5.item:SetSize(30) end)
	self.mainui.itemclassification.mid5.item = self.mainui.itemclassification.mid5:AddChild(Text(NEWFONT, 30, STRINGS.ALLACHIVITEM[5],{0,0,0,1}))
	self.mainui.itemclassification.mid5.item:SetHAlign(ANCHOR_MIDDLE)
	self.mainui.itemclassification.mid5.item:SetRegionSize(60,30)
	self.mainui.itemclassification.mid5:SetOnClick(function()
		self.numpage = 1
		self.item = 5
		self:build()
		self.mainui.infobutton.last:SetTextures(""images/button/last_dact.xml"", ""last_dact.tex"")
		self.maxnumpage =  math.ceil(#self.listitem/14)
		if self.numpage == self.maxnumpage then
			self.mainui.infobutton.next:SetTextures(""images/button/next_dact.xml"", ""next_dact.tex"")
		else
			self.mainui.infobutton.next:SetTextures(""images/button/next_act.xml"", ""next_act.tex"")
		end
		self.mainui.itemclassification.head:SetTextures(""images/button/item_head_act.xml"", ""item_head_act.tex"")
		self.mainui.itemclassification.mid2:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid3:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid4:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid5:SetTextures(""images/button/item_mide_dact.xml"", ""item_mide_dact.tex"")
		self.mainui.itemclassification.mid6:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid7:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid8:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid9:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.tail:SetTextures(""images/button/item_tail_act.xml"", ""item_tail_act.tex"")
		
	end)

	self.mainui.itemclassification.mid6 = self.mainui.itemclassification:AddChild(ImageButton(""images/button/item_mide_act.xml"", ""item_mide_act.tex""))
	self.mainui.itemclassification.mid6:SetPosition(80, -370, 0)
	self.mainui.itemclassification.mid6:SetOnGainFocus(function() self.mainui.itemclassification.mid6.item:SetSize(34) end)
	self.mainui.itemclassification.mid6:SetOnLoseFocus(function() self.mainui.itemclassification.mid6.item:SetSize(30) end)
	self.mainui.itemclassification.mid6.item = self.mainui.itemclassification.mid6:AddChild(Text(NEWFONT, 30, STRINGS.ALLACHIVITEM[6],{0,0,0,1}))
	self.mainui.itemclassification.mid6.item:SetHAlign(ANCHOR_MIDDLE)
	self.mainui.itemclassification.mid6.item:SetRegionSize(60,30)
	self.mainui.itemclassification.mid6:SetOnClick(function()
		self.numpage = 1
		self.item = 6
		self:build()
		self.mainui.infobutton.last:SetTextures(""images/button/last_dact.xml"", ""last_dact.tex"")
		self.maxnumpage =  math.ceil(#self.listitem/14)
		if self.numpage == self.maxnumpage then
			self.mainui.infobutton.next:SetTextures(""images/button/next_dact.xml"", ""next_dact.tex"")
		else
			self.mainui.infobutton.next:SetTextures(""images/button/next_act.xml"", ""next_act.tex"")
		end
		self.mainui.itemclassification.head:SetTextures(""images/button/item_head_act.xml"", ""item_head_act.tex"")
		self.mainui.itemclassification.mid2:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid3:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid4:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid5:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid6:SetTextures(""images/button/item_mide_dact.xml"", ""item_mide_dact.tex"")
		self.mainui.itemclassification.mid7:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid8:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid9:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.tail:SetTextures(""images/button/item_tail_act.xml"", ""item_tail_act.tex"")
	end)

	self.mainui.itemclassification.mid7 = self.mainui.itemclassification:AddChild(ImageButton(""images/button/item_mide_act.xml"", ""item_mide_act.tex""))
	self.mainui.itemclassification.mid7:SetPosition(140, -370, 0)
	self.mainui.itemclassification.mid7:SetOnGainFocus(function() self.mainui.itemclassification.mid7.item:SetSize(34) end)
	self.mainui.itemclassification.mid7:SetOnLoseFocus(function() self.mainui.itemclassification.mid7.item:SetSize(30) end)
	self.mainui.itemclassification.mid7.item = self.mainui.itemclassification.mid7:AddChild(Text(NEWFONT, 30, STRINGS.ALLACHIVITEM[7],{0,0,0,1}))
	self.mainui.itemclassification.mid7.item:SetHAlign(ANCHOR_MIDDLE)
	self.mainui.itemclassification.mid7.item:SetRegionSize(60,30)
	self.mainui.itemclassification.mid7:SetOnClick(function()
		self.numpage = 1
		self.item = 7
		self:build()
		self.mainui.infobutton.last:SetTextures(""images/button/last_dact.xml"", ""last_dact.tex"")
		self.maxnumpage =  math.ceil(#self.listitem/14)
		if self.numpage == self.maxnumpage then
			self.mainui.infobutton.next:SetTextures(""images/button/next_dact.xml"", ""next_dact.tex"")
		else
			self.mainui.infobutton.next:SetTextures(""images/button/next_act.xml"", ""next_act.tex"")
		end
		self.mainui.itemclassification.head:SetTextures(""images/button/item_head_act.xml"", ""item_head_act.tex"")
		self.mainui.itemclassification.mid2:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid3:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid4:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid5:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid6:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid7:SetTextures(""images/button/item_mide_dact.xml"", ""item_mide_dact.tex"")
		self.mainui.itemclassification.mid8:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid9:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.tail:SetTextures(""images/button/item_tail_act.xml"", ""item_tail_act.tex"")

	end)

	self.mainui.itemclassification.mid8 = self.mainui.itemclassification:AddChild(ImageButton(""images/button/item_mide_act.xml"", ""item_mide_act.tex""))
	self.mainui.itemclassification.mid8:SetPosition(200, -370, 0)
	self.mainui.itemclassification.mid8:SetOnGainFocus(function() self.mainui.itemclassification.mid8.item:SetSize(34) end)
	self.mainui.itemclassification.mid8:SetOnLoseFocus(function() self.mainui.itemclassification.mid8.item:SetSize(30) end)
	self.mainui.itemclassification.mid8.item = self.mainui.itemclassification.mid8:AddChild(Text(NEWFONT, 30, STRINGS.ALLACHIVITEM[8],{0,0,0,1}))
	self.mainui.itemclassification.mid8.item:SetHAlign(ANCHOR_MIDDLE)
	self.mainui.itemclassification.mid8.item:SetRegionSize(60,30)
	self.mainui.itemclassification.mid8:SetOnClick(function()
		self.numpage = 1
		self.item = 8
		self:build()
		self.mainui.infobutton.last:SetTextures(""images/button/last_dact.xml"", ""last_dact.tex"")
		self.maxnumpage =  math.ceil(#self.listitem/14)
		if self.numpage == self.maxnumpage then
			self.mainui.infobutton.next:SetTextures(""images/button/next_dact.xml"", ""next_dact.tex"")
		else
			self.mainui.infobutton.next:SetTextures(""images/button/next_act.xml"", ""next_act.tex"")
		end
		self.mainui.itemclassification.head:SetTextures(""images/button/item_head_act.xml"", ""item_head_act.tex"")
		self.mainui.itemclassification.mid2:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid3:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid4:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid5:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid6:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid7:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid8:SetTextures(""images/button/item_mide_dact.xml"", ""item_mide_dact.tex"")
		self.mainui.itemclassification.mid9:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.tail:SetTextures(""images/button/item_tail_act.xml"", ""item_tail_act.tex"")
	end)

	self.mainui.itemclassification.mid9 = self.mainui.itemclassification:AddChild(ImageButton(""images/button/item_mide_act.xml"", ""item_mide_act.tex""))
	self.mainui.itemclassification.mid9:SetPosition(260, -370, 0)
	self.mainui.itemclassification.mid9:SetOnGainFocus(function() self.mainui.itemclassification.mid9.item:SetSize(34) end)
	self.mainui.itemclassification.mid9:SetOnLoseFocus(function() self.mainui.itemclassification.mid9.item:SetSize(30) end)
	self.mainui.itemclassification.mid9.item = self.mainui.itemclassification.mid9:AddChild(Text(NEWFONT, 30, STRINGS.ALLACHIVITEM[10],{0,0,0,1}))
	self.mainui.itemclassification.mid9.item:SetHAlign(ANCHOR_MIDDLE)
	self.mainui.itemclassification.mid9.item:SetRegionSize(60,30)
	self.mainui.itemclassification.mid9:SetOnClick(function()
		self.numpage = 1
		self.item = 10
		self:build()
		self.mainui.infobutton.last:SetTextures(""images/button/last_dact.xml"", ""last_dact.tex"")
		self.maxnumpage =  math.ceil(#self.listitem/14)
		if self.numpage == self.maxnumpage then
			self.mainui.infobutton.next:SetTextures(""images/button/next_dact.xml"", ""next_dact.tex"")
		else
			self.mainui.infobutton.next:SetTextures(""images/button/next_act.xml"", ""next_act.tex"")
		end
		self.mainui.itemclassification.head:SetTextures(""images/button/item_head_act.xml"", ""item_head_act.tex"")
		self.mainui.itemclassification.mid2:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid3:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid4:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid5:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid6:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid7:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid8:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid9:SetTextures(""images/button/item_mide_dact.xml"", ""item_mide_dact.tex"")
		self.mainui.itemclassification.tail:SetTextures(""images/button/item_tail_act.xml"", ""item_tail_act.tex"")
		
	end)

	self.mainui.itemclassification.tail = self.mainui.itemclassification:AddChild(ImageButton(""images/button/item_tail_act.xml"", ""item_tail_act.tex""))
	self.mainui.itemclassification.tail:SetPosition(320, -370, 0)
	self.mainui.itemclassification.tail:SetOnGainFocus(function() self.mainui.itemclassification.tail.item:SetSize(34) end)
	self.mainui.itemclassification.tail:SetOnLoseFocus(function() self.mainui.itemclassification.tail.item:SetSize(30) end)
	self.mainui.itemclassification.tail.item = self.mainui.itemclassification.tail:AddChild(Text(NEWFONT, 30, STRINGS.ALLACHIVITEM[9],{0,0,0,1}))
	self.mainui.itemclassification.tail.item:SetHAlign(ANCHOR_MIDDLE)
	self.mainui.itemclassification.tail.item:SetRegionSize(60,30)
	self.mainui.itemclassification.tail:SetOnClick(function()
		self.numpage = 1
		self.item = 9
		self:build()
		self.mainui.infobutton.last:SetTextures(""images/button/last_dact.xml"", ""last_dact.tex"")
		self.maxnumpage =  math.ceil(#self.listitem/14)
		if self.numpage == self.maxnumpage then
			self.mainui.infobutton.next:SetTextures(""images/button/next_dact.xml"", ""next_dact.tex"")
		else
			self.mainui.infobutton.next:SetTextures(""images/button/next_act.xml"", ""next_act.tex"")
		end
		self.mainui.itemclassification.head:SetTextures(""images/button/item_head_act.xml"", ""item_head_act.tex"")
		self.mainui.itemclassification.mid2:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid3:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid4:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid5:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid6:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid7:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid8:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid9:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.tail:SetTextures(""images/button/item_tail_dact.xml"", ""item_tail_dact.tex"")
	end)
	self.inst:DoTaskInTime(.2, function()
		self.numpage = 1
		self.numpage2 = 1
		self:loadlist()
		self:loadcoinlist()
		self.maxnumpage = math.ceil(#self.achivlist/14)
		self.maxnumpage2 = math.ceil(#self.coinlist/28)
		self.achivlistbg = {}
		self.mainui.bg.allachiv.achivlisttile = {}
		self.mainui.bg.allachiv.achivlisttiledsp = {}
		self.mainui.bg.allachiv.achivlistnumber = {}

		self.mainui.bg.allachiv.achivlisttiledone = {}

		self.item = 1
		self.listitem = {}

		self.coinlistbutton = {}

		self:build()
		self:coinbuild()
		self:StartUpdating()
	end)
end)

function uiachievement:OnUpdate(dt)
	self.mainui.bg.coinamount:SetString(string.format(STRINGS.ACHIEVEMENT_POINT_AMOUNT,self.owner.currentcoinamount:value()))
	self.mainui.bg.killamount:SetString(string.format(STRINGS.ACHIEVEMENT_KILL_AMOUNT,self.owner.currentkillamount:value()))
	self:loadlist()
	self.listitem = {}
	for a = 1, #self.achivlist do
		if self.item == 1 then
			table.insert(self.listitem, self.achivlist[a])
		else
			if self.achivlist[a].item == self.item  then 
				table.insert(self.listitem, self.achivlist[a])
			end
		end
	end
	for i = 1+14*(self.numpage-1), math.min(#self.listitem, 14*(1+self.numpage-1)) do
		local check = ""dact""
		--local check = ""act""
		if self.listitem[i].check == 1 then 
			check = ""act"" 
		end
		self.mainui.bg.allachiv.achivlisttile[i].image:SetTexture(""images/hud/achivbg_""..check.."".xml"", ""achivbg_""..check.."".tex"")

		if self.listitem[i].check == 1 then
			self.mainui.bg.allachiv.achivlisttile[i].desc:SetColour(217/255, 170/255, 83/255, 1)
			self.mainui.bg.allachiv.achivlisttile[i].nums:SetColour(217/255, 170/255, 83/255, 1)
			self.mainui.bg.allachiv.achivlisttiledone[i]:Show()
		else
			self.mainui.bg.allachiv.achivlisttile[i].desc:SetColour(0, 0, 0, 1)
			self.mainui.bg.allachiv.achivlisttile[i].nums:SetColour(39/255, 39/255, 39/255, 1)
			self.mainui.bg.allachiv.achivlisttiledone[i]:Hide()
		end
    	
    	
    	local __name = ""Название: ""
    	local __desc = ""Описание: ""
    	
    	if not STRINGS.ACHIEVEMENT_LIST[self.listitem[i].name] then
			print(""error:========"",self.listitem[i].name)
		else
			__name = STRINGS.ACHIEVEMENT_LIST[self.listitem[i].name].name
			__desc = string.format(STRINGS.ACHIEVEMENT_LIST[self.listitem[i].name].desc,achievement_config.idconfig[self.listitem[i].name].need_amount)
		end
		
    	if achievement_config.idconfig[self.listitem[i].name] ~= nil and self.listitem[i].name ~= ""all"" then
			self.mainui.bg.allachiv.achivlisttile[i]:SetHoverText(__name..""\n""..STRINGS.ACHIEVEMENT_ACHIEVEMENT_FINISHED..self.listitem[i].current..""/""..achievement_config.idconfig[self.listitem[i].name].need_amount..""\n""..__desc)
			self.mainui.bg.allachiv.achivlisttiledone[i]:SetHoverText(STRINGS.ACHIEVEMENT_ACHIEVEMENT_FINISHED..self.listitem[i].current..""/""..achievement_config.idconfig[self.listitem[i].name].need_amount)
		else
			self.mainui.bg.allachiv.achivlisttile[i]:SetHoverText(__name..""\n""..STRINGS.ACHIEVEMENT_ACHIEVEMENT_FINISHED..self.listitem[i].check..""/1""..""\n""..__desc)
			self.mainui.bg.allachiv.achivlisttiledone[i]:SetHoverText(STRINGS.ACHIEVEMENT_ACHIEVEMENT_FINISHED..self.listitem[i].check..""/1"")
		end
		
    	if self.listitem[i].name == ""all"" then
    		self.mainui.bg.allachiv.achivlisttile[i]:SetHoverText(STRINGS.ACHIEVEMENT_ACHIEVEMENT_FINISHED..self.achivlist[#self.achivlist].current..""/""..(#self.achivlist-1))
    		self.mainui.bg.allachiv.achivlisttiledone[i]:SetHoverText(STRINGS.ACHIEVEMENT_ACHIEVEMENT_FINISHED..self.achivlist[#self.achivlist].current..""/""..(#self.achivlist-1))
    	end
	end
end

function uiachievement:build()
	self.mainui.bg.allachiv:KillAllChildren()
	self.listitem = {}
	for a = 1, #self.achivlist do
		if self.item == 1 then
			table.insert(self.listitem, self.achivlist[a])
		else
			if self.achivlist[a].item == self.item  then 
				table.insert(self.listitem, self.achivlist[a])
			end
		end
	end

	local x = -313
	local y = 360
	for i = 1+14*(self.numpage-1), math.min(#self.listitem, 14*(1+self.numpage-1)) do
		if math.ceil(i/2) ~= i/2 then x = -265 else x = 265 end
		if math.ceil(i/2) ~= i/2 then y = y-97.3 end

		local check = ""dact""
    	if self.listitem[i].check == 1 then check = ""act"" end

		self.mainui.bg.allachiv.achivlisttile[i] = self.mainui.bg.allachiv:AddChild(ImageButton(""images/hud/achivbg_""..check.."".xml"", ""achivbg_""..check.."".tex""))
		self.mainui.bg.allachiv.achivlisttile[i]:SetFocusScale(1,1,1)
		self.mainui.bg.allachiv.achivlisttile[i]:SetPosition(x, y, 0)
		local achievement_name = self.listitem[i].name
		local achievement_desc = self.listitem[i].name
		if not STRINGS.ACHIEVEMENT_LIST[self.listitem[i].name] then
			print(""error:========"",self.listitem[i].name)
		else
			achievement_name = STRINGS.ACHIEVEMENT_LIST[self.listitem[i].name].name
			achievement_desc = STRINGS.ACHIEVEMENT_LIST[self.listitem[i].name].desc
		end
		self.mainui.bg.allachiv.achivlisttile[i].name = self.mainui.bg.allachiv.achivlisttile[i]:AddChild(Text(NEWFONT_OUTLINE, 40, achievement_name))
		self.mainui.bg.allachiv.achivlisttile[i].name:SetPosition(15, 25, 0)
		self.mainui.bg.allachiv.achivlisttile[i].name:SetHAlign(ANCHOR_LEFT)
		self.mainui.bg.allachiv.achivlisttile[i].name:SetRegionSize(320,40)

		self.mainui.bg.allachiv.achivlisttile[i].desc = self.mainui.bg.allachiv.achivlisttile[i]:AddChild(Text(NEWFONT, 28, string.format(achievement_desc,achievement_config.idconfig[self.listitem[i].name].need_amount)))
		self.mainui.bg.allachiv.achivlisttile[i].desc:SetPosition(15, -23, 0)
		self.mainui.bg.allachiv.achivlisttile[i].desc:SetHAlign(ANCHOR_LEFT)
		self.mainui.bg.allachiv.achivlisttile[i].desc:SetRegionSize(320,40)
		 
    	self.mainui.bg.allachiv.achivlisttile[i].nums = self.mainui.bg.allachiv.achivlisttile[i]:AddChild(Text(NEWFONT, 28, ""x ""..achievement_config.idconfig[self.listitem[i].name].point))
		self.mainui.bg.allachiv.achivlisttile[i].nums:SetPosition(320, -23, 0)
		self.mainui.bg.allachiv.achivlisttile[i].nums:SetHAlign(ANCHOR_LEFT)
		self.mainui.bg.allachiv.achivlisttile[i].nums:SetRegionSize(320,40)

		self.mainui.bg.allachiv.achivlisttile[i].numb = self.mainui.bg.allachiv.achivlisttile[i]:AddChild(Text(NEWFONT, 28, ""No:""..i))
		self.mainui.bg.allachiv.achivlisttile[i].numb:SetPosition(320, 33, 0)
		self.mainui.bg.allachiv.achivlisttile[i].numb:SetHAlign(ANCHOR_LEFT)
		self.mainui.bg.allachiv.achivlisttile[i].numb:SetRegionSize(320,40)
		self.mainui.bg.allachiv.achivlisttile[i].numb:SetColour(0/255, 166/255, 51/255, 1) --(41/255, 174/255, 10/255, 1)
		self.mainui.bg.allachiv.achivlisttile[i]:SetOnClick(function()
			if TheInput:IsKeyDown(KEY_ALT) and TheInput:IsKeyDown(KEY_SHIFT) then
				if self.cooldown then
					if achievement_config.idconfig[self.listitem[i].name] ~= nil  and self.listitem[i].name ~= ""all"" then
						TheNet:Say(string.format(STRINGS.SINGLE_ACHIVEMENT_PROCESS,achievement_name,self.listitem[i].current,achievement_config.idconfig[self.listitem[i].name].need_amount))
					end
					if self.listitem[i].name == ""all"" then
						TheNet:Say(string.format(STRINGS.SINGLE_ACHIVEMENT_PROCESS,achievement_name,self.achivlist[#self.achivlist].current,(#self.achivlist-1)))
					end

					self.cooldown = false
					self.owner:DoTaskInTime(3, function() self.cooldown = true end)
				end
			else
				if killAmountFinishAchievement == true and achievement_config.idconfig[self.listitem[i].name] ~= nil and self.listitem[i].name ~= ""all"" and self.listitem[i].check ~= 1  then
					SendModRPCToServer(MOD_RPC[""DSTAchievement""][""finishachievement""],self.listitem[i].name)
				end
			end
		end)
		if self.listitem[i].name == ""all"" then
			self.mainui.bg.allachiv.achivlisttile[i].numb:Hide()
		end

		if self.listitem[i].check == 1 then
			self.mainui.bg.allachiv.achivlisttile[i].desc:SetColour(217/255, 170/255, 83/255, 1)  --(124/255, 64/255, 8/255, 1)
			self.mainui.bg.allachiv.achivlisttile[i].nums:SetColour(217/255, 170/255, 83/255, 1)  --(124/255, 64/255, 8/255, 1)
		else
			self.mainui.bg.allachiv.achivlisttile[i].desc:SetColour(0, 0, 0, 1)  --(39/255, 39/255, 39/255, 1)
			self.mainui.bg.allachiv.achivlisttile[i].nums:SetColour(39/255, 39/255, 39/255, 1)  --(39/255, 39/255, 39/255, 1) 
		end
    	
    	self.mainui.bg.allachiv.achivlisttiledone[i] = self.mainui.bg.allachiv:AddChild(Image(""images/hud/achivbg_done.xml"", ""achivbg_done.tex""))
		self.mainui.bg.allachiv.achivlisttiledone[i]:SetPosition(x, y, 0)
		self.mainui.bg.allachiv.achivlisttiledone[i]:SetTint(1,1,1,0.95)
	
    	if self.mainui.bg.allachiv.achivlisttiledone[i].check == 1 then
			self.mainui.bg.allachiv.achivlisttiledone[i]:Show()
		else
			self.mainui.bg.allachiv.achivlisttiledone[i]:Hide()
		end
	end
end

function uiachievement:coinbuild()
	self.mainui.bg.allcoin:KillAllChildren()
	local x = -313
	local y = 260
	for i = 1+28*(self.numpage2-1), math.min(#self.coinlist, 28*(1+self.numpage2-1)) do
		if math.ceil(i/4) ~= math.ceil((i-1)/4) then x = -360 else x = x + 360*2/3 end
		y = 260-96*(math.ceil((i-28*(self.numpage2-1))/4)-1)
		self.coinlistbutton[i] = self.mainui.bg.allcoin:AddChild(ImageButton(""images/coin_cn/coin_cn1.xml"", ""coin_cn1.tex""))
		if  self.coinlist[i].name == ""speedup"" or self.coinlist[i].name == ""absorbup"" or 
			self.coinlist[i].name == ""damageup"" or self.coinlist[i].name == ""crit""  then
			self.coinlistbutton[i]:SetTextures(""images/coin_cn/coin_cn0.xml"", ""coin_cn0.tex"")
		end
		self.coinlistbutton[i]:SetPosition(x, y, 0)
    	self.coinlistbutton[i]:SetOnClick(function()
			
			if TheInput:IsKeyDown(KEY_ALT) and TheInput:IsKeyDown(KEY_SHIFT) then
				if self.cooldown then
					if i>=1 and i <=3 then
						TheNet:Say( string.format(STRINGS.HAS_ABILITY_PROCESS,STRINGS.ACHIVABILITYNAME[self.coinlist[i].name],self.coinlist[i].current,5))
					elseif i==4 then
						TheNet:Say( string.format(STRINGS.HAS_ABILITY_PROCESS,STRINGS.ACHIVABILITYNAME[self.coinlist[i].name],self.coinlist[i].current,20))
					else
						if self.coinlist[i].current ~= nil and  self.coinlist[i].current >=  1 then
							TheNet:Say(string.format(STRINGS.HAS_ABILITY,STRINGS.ACHIVABILITYNAME[self.coinlist[i].name]))
						else
							TheNet:Say(string.format(STRINGS.NO_ABILITY,STRINGS.ACHIVABILITYNAME[self.coinlist[i].name]))
						end
					end
					self.cooldown = false
					self.owner:DoTaskInTime(3, function() self.cooldown = true end)
				end
				return 
			end
    		SendModRPCToServer(MOD_RPC[""DSTAchievement""][self.coinlist[i].name])
    		self.owner:DoTaskInTime(.3, function()
    			self:loadcoinlist()
    			if i>=1 and i <=3 then
    				self.coinlistbutton[i]:SetHoverText(string.format(STRINGS.ACHIEVEMENT_HAS_AWARD,self.coinlist[i].current,5))
    			elseif i==4 then
    				self.coinlistbutton[i]:SetHoverText(string.format(STRINGS.ACHIEVEMENT_HAS_AWARD,self.coinlist[i].current,20))
    			else
					local __name = STRINGS.ACHIVABILITYNAME[self.coinlist[i].name]
					local __desc = STRINGS.ACHIVABILITYDSPC[self.coinlist[i].name]
    				if  self.coinlist[i].current ~= nil and  self.coinlist[i].current >=  1 then
    					self.coinlistbutton[i]:SetHoverText(__desc..""\n\n""..STRINGS.ACHIEVEMENT_HAS_ABILITY)
    					self.coinlistbutton[i].done:Show()
    				else
    					self.coinlistbutton[i]:SetHoverText(__name..""\n""..__desc..""\n\n""..string.format(STRINGS.ACHIEVEMENT_ABILITY_NEED, id2ability[self.coinlist[i].name].cost))
    					self.coinlistbutton[i].done:Hide()
    				end
    			end
			end)
		end)
		-- Установка имени награды
		self.coinlistbutton[i].name = self.coinlistbutton[i]:AddChild(Text(NEWFONT, 40, STRINGS.ACHIVABILITYNAME[self.coinlist[i].name]))
		self.coinlistbutton[i].name:SetPosition(8, 10, 0)
		self.coinlistbutton[i].name:SetHAlign(ANCHOR_LEFT)
		self.coinlistbutton[i].name:SetRegionSize(200,60)
		self.coinlistbutton[i].name:SetColour(1,1,1,1)
		-- Установка описания награды
		self.coinlistbutton[i].desc = self.coinlistbutton[i]:AddChild(Text(NEWFONT, 26, STRINGS.ACHIVABILITYDSPC[self.coinlist[i].name]))
		self.coinlistbutton[i].desc:SetPosition(8, -20, 0)
		self.coinlistbutton[i].desc:SetHAlign(ANCHOR_LEFT)
		self.coinlistbutton[i].desc:SetRegionSize(200,60)
		self.coinlistbutton[i].desc:SetColour(255/255,255/255,0/255,1)
		-- Установка цены награды
		self.coinlistbutton[i].nums = self.coinlistbutton[i]:AddChild(Text(NEWFONT, 35,(""-""..id2ability[self.coinlist[i].name].cost)))
		self.coinlistbutton[i].nums:SetPosition(50, 8, 0)
		self.coinlistbutton[i].nums:SetHAlign(ANCHOR_RIGHT)
		self.coinlistbutton[i].nums:SetRegionSize(80,30)
		self.coinlistbutton[i].nums:SetColour(253/255, 253/255, 35/255, 1)--(237/255, 235/255, 16/255, 1)

		self.coinlistbutton[i].imge = self.coinlistbutton[i]:AddChild(Image(""images/coin_cn/coin_cn_start.xml"", ""coin_cn_start.tex""))
		self.coinlistbutton[i].imge:SetPosition(5, -5, 0)
    	self.coinlistbutton[i].imge:SetTint(1,1,1,0.95)

		self.coinlistbutton[i].chge = self.coinlistbutton[i]:AddChild(Image(""images/coin_cn/coin_cn_change.xml"", ""coin_cn_change.tex""))
		self.coinlistbutton[i].chge:SetPosition(0, 0, 0)
    	self.coinlistbutton[i].chge:SetTint(1,1,1,0.95)

    	if self.coinlist[i].canswitch then
			self.coinlistbutton[i].chge:Show()
		else
			self.coinlistbutton[i].chge:Hide()
		end

		self.coinlistbutton[i].done = self.coinlistbutton[i]:AddChild(Image(""images/coin_cn/coin_cn3.xml"", ""coin_cn3.tex""))
		self.coinlistbutton[i].done:SetPosition(0, 0, 0)
    	self.coinlistbutton[i].done:SetTint(1,1,1,0.95)

    	--line
    	self.coinlistbutton[i].line = self.coinlistbutton[i]:AddChild(Image(""images/coin_cn/coin_cn_line.xml"", ""coin_cn_line.tex""))
		self.coinlistbutton[i].line:SetPosition(0, 0, 0)
    	self.coinlistbutton[i].line:SetTint(1,1,1,0.95)
    	self.coinlistbutton[i].line:Hide()

    	if self.coinlist[i].name == ""speedup"" or self.coinlist[i].name == ""absorbup"" or 
			self.coinlist[i].name == ""damageup"" or self.coinlist[i].name == ""crit""  then
			self.coinlistbutton[i].done:Hide()
		else
			if  self.coinlist[i].current ~= nil and  self.coinlist[i].current >=  1 then
    			self.coinlistbutton[i].done:Show()
    		else
    			self.coinlistbutton[i].done:Hide()
    		end
		end

		self.coinlistbutton[i]:SetNormalScale(1,1,1)
		self.coinlistbutton[i]:SetFocusScale(1,1,1)

		self.coinlistbutton[i]:SetOnGainFocus(function() 
			self.coinlistbutton[i]:SetNormalScale(1,1,1)
			self.coinlistbutton[i].line:Show()

		end)
		self.coinlistbutton[i]:SetOnLoseFocus(function() 
			self.coinlistbutton[i]:SetFocusScale(1,1,1)
			self.coinlistbutton[i].line:Hide()
		end)
		if i>=1 and i <=3 then
    		self.coinlistbutton[i]:SetHoverText(string.format(STRINGS.ACHIEVEMENT_HAS_AWARD,self.coinlist[i].current,5))
    	elseif i==4 then
    		self.coinlistbutton[i]:SetHoverText(string.format(STRINGS.ACHIEVEMENT_HAS_AWARD,self.coinlist[i].current,20))
    	else
			local __name = STRINGS.ACHIVABILITYNAME[self.coinlist[i].name]
			local __desc = STRINGS.ACHIVABILITYDSPC[self.coinlist[i].name]
    		if  self.coinlist[i].current ~= nil and  self.coinlist[i].current ==  1 then
    			self.coinlistbutton[i]:SetHoverText(__desc..""\n\n""..STRINGS.ACHIEVEMENT_HAS_ABILITY)
    		else
    			self.coinlistbutton[i]:SetHoverText(__name..""\n""..__desc..""\n\n""..string.format(STRINGS.ACHIEVEMENT_ABILITY_NEED, id2ability[self.coinlist[i].name].cost))
    		end
    	end
	end
end

function uiachievement:loadlist()
	self.achivlist = {}
	for _,v in ipairs(achievement_config.config) do
		if v.catagory then
			table.insert(self.achivlist,#self.achivlist + 1,
			{
				name = v.id,
				check = self.owner[v.check]:value(),
				current = self.owner[v.current]:value(),
				item = v.catagory,
			})
		end
	end
	local achivvalue = 0
	for i=1, #self.achivlist do
		if self.achivlist[i].name ~= ""all"" then
			achivvalue = achivvalue + self.achivlist[i].check
		else
			self.achivlist[i].current = achivvalue
		end
	end
end

function uiachievement:loadcoinlist()
	self.coinlist = {}
	for _,v in ipairs(achievement_ability_config.ability_cost) do
		self.coinlist[#self.coinlist + 1] = 
		{
			name = v.ability,
			current = self.owner[""current"" .. v.ability]:value(),
			canswitch = v.canswitch,
		}
	end
end

return uiachievement
"
njZC3izC,strings_achievement_zh,Lonely_Wanderer,Lua,Monday 12th of February 2024 11:05:40 AM CDT,"STRINGS.RECIPE_DESC.KLAUS_SACK = ""Coдepжuт чeтыpeхмepнoe пpocтpaнcтвo""
STRINGS.NAMES.DEER_ANTLER1 = ""Deer Key""
STRINGS.RECIPE_DESC.DEER_ANTLER1 = ""Poг бeзглaзoгo oлeня""
STRINGS.RECIPE_DESC.HALLOWEENPOTION_HEALTH_LARGE = ""Зeльe лeчeнuя.""
STRINGS.RECIPE_DESC.HALLOWEENPOTION_SANITY_LARGE = ""Зeльe paccyдкa.""
STRINGS.NAMES.EXPBEAN = ""Experience Beans""
STRINGS.CHARACTERS.GENERIC.DESCRIBE.EXPBEAN = ""Дoбaвляeт 2000 oпытa!""
STRINGS.NAMES.REDLANTERN2 = ""Red Lantern""
STRINGS.CHARACTERS.GENERIC.DESCRIBE.REDLANTERN2 = ""Кpacнaя лaмпa!""
STRINGS.NAMES.MEMORYPOTION = ""MemoryPOTION""
STRINGS.CHARACTERS.GENERIC.DESCRIBE.MEMORYPOTION = ""Зeльe пaмятu""
STRINGS.NAMES.ACHIV_ICE_CRYSTAL = ""Ice Crystal""
STRINGS.CHARACTERS.GENERIC.DESCRIBE.ACHIV_ICE_CRYSTAL = ""Лeдянoй кpucтaлл""

STRINGS.NAMES.ACHIVBOOK_BIRDS = STRINGS.NAMES.BOOK_BIRDS
STRINGS.RECIPE_DESC.ACHIVBOOK_BIRDS = STRINGS.RECIPE_DESC.BOOK_BIRDS
STRINGS.CHARACTERS.GENERIC.DESCRIBE.ACHIVBOOK_BIRDS = STRINGS.CHARACTERS.GENERIC.DESCRIBE.BOOK_BIRDS
STRINGS.NAMES.ACHIVBOOK_GARDENING = STRINGS.NAMES.BOOK_GARDENING
STRINGS.RECIPE_DESC.ACHIVBOOK_GARDENING = STRINGS.RECIPE_DESC.BOOK_GARDENING
STRINGS.CHARACTERS.GENERIC.DESCRIBE.ACHIVBOOK_GARDENING = STRINGS.CHARACTERS.GENERIC.DESCRIBE.BOOK_GARDENING
STRINGS.NAMES.ACHIVBOOK_SLEEP = STRINGS.NAMES.BOOK_SLEEP
STRINGS.RECIPE_DESC.ACHIVBOOK_SLEEP =STRINGS.RECIPE_DESC.BOOK_SLEEP
STRINGS.CHARACTERS.GENERIC.DESCRIBE.ACHIVBOOK_SLEEP = STRINGS.CHARACTERS.GENERIC.DESCRIBE.BOOK_SLEEP
STRINGS.NAMES.ACHIVBOOK_BRIMSTONE = STRINGS.NAMES.BOOK_BRIMSTONE
STRINGS.RECIPE_DESC.ACHIVBOOK_BRIMSTONE = STRINGS.RECIPE_DESC.BOOK_BRIMSTONE
STRINGS.CHARACTERS.GENERIC.DESCRIBE.ACHIVBOOK_BRIMSTONE = STRINGS.CHARACTERS.GENERIC.DESCRIBE.BOOK_BRIMSTONE
STRINGS.NAMES.ACHIVBOOK_TENTACLES = STRINGS.NAMES.BOOK_TENTACLES
STRINGS.RECIPE_DESC.ACHIVBOOK_TENTACLES = STRINGS.RECIPE_DESC.BOOK_TENTACLES
STRINGS.CHARACTERS.GENERIC.DESCRIBE.ACHIVBOOK_TENTACLES = STRINGS.CHARACTERS.GENERIC.DESCRIBE.BOOK_TENTACLES
STRINGS.NAMES.ACHIVBOOK_METEOR = ""Meteor Shower""
STRINGS.RECIPE_DESC.ACHIVBOOK_METEOR = ""Justice from heaven!""
STRINGS.CHARACTERS.GENERIC.DESCRIBE.ACHIVBOOK_METEOR = ""Justice from heaven.""
STRINGS.NAMES.ACHIVBOOK_SHAKESPEARE = ""Petrified Forest""
STRINGS.RECIPE_DESC.ACHIVBOOK_SHAKESPEARE = ""Petrified Forest!""
STRINGS.CHARACTERS.GENERIC.DESCRIBE.ACHIVBOOK_SHAKESPEARE = ""Petrified Forest.""
STRINGS.NAMES.ACHIVBOOK_METEOR2 = ""Meteor Shower""
STRINGS.RECIPE_DESC.ACHIVBOOK_METEOR2 = ""Justice from heaven!""
STRINGS.CHARACTERS.GENERIC.DESCRIBE.ACHIVBOOK_METEOR2 = ""Justice from heaven.""
STRINGS.NAMES.ACHIVBOOK_SHAKESPEARE2 = ""Petrified Forest""
STRINGS.RECIPE_DESC.ACHIVBOOK_SHAKESPEARE2 = ""Petrified Forest!""
STRINGS.CHARACTERS.GENERIC.DESCRIBE.ACHIVBOOK_SHAKESPEARE2 = ""Petrified Forest.""
STRINGS.NAMES.WINTER_ORNAMENT_LIGHT5 = ""Red lantern""
STRINGS.RECIPE_DESC.WINTER_ORNAMENT_LIGHT5 = ""Red lantern!""
STRINGS.CHARACTERS.GENERIC.DESCRIBE.WINTER_ORNAMENT_LIGHT5 = ""Red colored lights.""
STRINGS.NAMES.WINTER_ORNAMENT_LIGHT6 = ""Green Lantern""
STRINGS.RECIPE_DESC.WINTER_ORNAMENT_LIGHT6 = ""Green lantern!""
STRINGS.CHARACTERS.GENERIC.DESCRIBE.WINTER_ORNAMENT_LIGHT6 = ""Green lantern.""
STRINGS.NAMES.WINTER_ORNAMENT_LIGHT7 = ""Blue Lantern""
STRINGS.RECIPE_DESC.WINTER_ORNAMENT_LIGHT7 = ""Blue lights!""
STRINGS.CHARACTERS.GENERIC.DESCRIBE.WINTER_ORNAMENT_LIGHT7 = ""Blue lantern.""
STRINGS.NAMES.WINTER_ORNAMENT_LIGHT8 = ""White lantern""
STRINGS.RECIPE_DESC.WINTER_ORNAMENT_LIGHT8 = ""White lantern!""
STRINGS.CHARACTERS.GENERIC.DESCRIBE.WINTER_ORNAMENT_LIGHT8 = ""White lantern.""
STRINGS.NAMES.ACHIV_WINTER_ORNAMENT_LIGHT5 = ""Red lantern""
STRINGS.RECIPE_DESC.ACHIV_WINTER_ORNAMENT_LIGHT5 = ""Red lantern!""
STRINGS.CHARACTERS.GENERIC.DESCRIBE.ACHIV_WINTER_ORNAMENT_LIGHT5 = ""Red colored lights.""
STRINGS.NAMES.ACHIV_WINTER_ORNAMENT_LIGHT6 = ""Green Lantern""
STRINGS.RECIPE_DESC.ACHIV_WINTER_ORNAMENT_LIGHT6 = ""Green lantern!""
STRINGS.CHARACTERS.GENERIC.DESCRIBE.ACHIV_WINTER_ORNAMENT_LIGHT6 = ""Green lantern.""
STRINGS.NAMES.ACHIV_WINTER_ORNAMENT_LIGHT7 = ""Blue Lantern""
STRINGS.RECIPE_DESC.ACHIV_WINTER_ORNAMENT_LIGHT7 = ""Blue lights!""
STRINGS.CHARACTERS.GENERIC.DESCRIBE.ACHIV_WINTER_ORNAMENT_LIGHT7 = ""Blue lantern.""
STRINGS.NAMES.ACHIV_WINTER_ORNAMENT_LIGHT8 = ""White lantern""
STRINGS.RECIPE_DESC.ACHIV_WINTER_ORNAMENT_LIGHT8 = ""White lantern!""
STRINGS.CHARACTERS.GENERIC.DESCRIBE.ACHIV_WINTER_ORNAMENT_LIGHT8 = ""White lantern.""
STRINGS.NAMES.LUCKY_GOLDNUGGET = ""Gold Ingot""
STRINGS.RECIPE_DESC.LUCKY_GOLDNUGGET = ""For 5 gold ingots!""
STRINGS.CHARACTERS.GENERIC.DESCRIBE.LUCKY_GOLDNUGGET = ""Gold Ingot.""
STRINGS.NAMES.ACHIV_LUCKY_GOLDNUGGET = ""Gold Ingot""
STRINGS.RECIPE_DESC.ACHIV_LUCKY_GOLDNUGGET = ""Exchange 5 gold ingots!""
STRINGS.CHARACTERS.GENERIC.DESCRIBE.ACHIV_LUCKY_GOLDNUGGET = ""Gold Ingot.""
STRINGS.NAMES.ACHIV_SEWING_TAPE = STRINGS.NAMES.SEWING_TAPE
STRINGS.RECIPE_DESC.ACHIV_SEWING_TAPE = STRINGS.RECIPE_DESC.SEWING_TAPE
STRINGS.CHARACTERS.GENERIC.DESCRIBE.ACHIV_SEWING_TAPE = STRINGS.CHARACTERS.GENERIC.DESCRIBE.SEWING_TAPE
STRINGS.NAMES.ACHIV_WINONA_CATAPULT = STRINGS.NAMES.WINONA_CATAPULT
STRINGS.RECIPE_DESC.ACHIV_WINONA_CATAPULT = STRINGS.RECIPE_DESC.WINONA_CATAPULT
STRINGS.CHARACTERS.GENERIC.DESCRIBE.ACHIV_WINONA_CATAPULT = STRINGS.CHARACTERS.GENERIC.DESCRIBE.WINONA_CATAPULT
STRINGS.NAMES.ACHIV_WINONA_SPOTLIGHT = STRINGS.NAMES.WINONA_SPOTLIGHT
STRINGS.RECIPE_DESC.ACHIV_WINONA_SPOTLIGHT = STRINGS.RECIPE_DESC.WINONA_SPOTLIGHT
STRINGS.CHARACTERS.GENERIC.DESCRIBE.ACHIV_WINONA_SPOTLIGHT = STRINGS.CHARACTERS.GENERIC.DESCRIBE.WINONA_SPOTLIGHT
STRINGS.NAMES.ACHIV_WINONA_BATTERY_LOW = STRINGS.NAMES.WINONA_BATTERY_LOW
STRINGS.RECIPE_DESC.ACHIV_WINONA_BATTERY_LOW = STRINGS.RECIPE_DESC.WINONA_BATTERY_LOW
STRINGS.CHARACTERS.GENERIC.DESCRIBE.ACHIV_WINONA_BATTERY_LOW = STRINGS.CHARACTERS.GENERIC.DESCRIBE.WINONA_BATTERY_LOW
STRINGS.NAMES.ACHIV_WINONA_BATTERY_HIGH = STRINGS.NAMES.WINONA_BATTERY_HIGH
STRINGS.RECIPE_DESC.ACHIV_WINONA_BATTERY_HIGH = STRINGS.RECIPE_DESC.WINONA_BATTERY_HIGH
STRINGS.CHARACTERS.GENERIC.DESCRIBE.ACHIV_WINONA_BATTERY_HIGH = STRINGS.CHARACTERS.GENERIC.DESCRIBE.WINONA_BATTERY_HIGH
STRINGS.NAMES.ACHIV_LIVINGLOG = STRINGS.NAMES.LIVINGLOG
STRINGS.RECIPE_DESC.ACHIV_LIVINGLOG = STRINGS.RECIPE_DESC.LIVINGLOG
STRINGS.CHARACTERS.GENERIC.DESCRIBE.ACHIV_LIVINGLOG = STRINGS.CHARACTERS.GENERIC.DESCRIBE.LIVINGLOG
STRINGS.NAMES.ACHIV_ARMOR_BRAMBLE = STRINGS.NAMES.ARMOR_BRAMBLE
STRINGS.RECIPE_DESC.ACHIV_ARMOR_BRAMBLE = STRINGS.RECIPE_DESC.ARMOR_BRAMBLE
STRINGS.CHARACTERS.GENERIC.DESCRIBE.ACHIV_ARMOR_BRAMBLE = STRINGS.CHARACTERS.GENERIC.DESCRIBE.ARMOR_BRAMBLE
STRINGS.NAMES.ACHIV_TRAP_BRAMBLE = STRINGS.NAMES.TRAP_BRAMBLE
STRINGS.RECIPE_DESC.ACHIV_TRAP_BRAMBLE = STRINGS.RECIPE_DESC.TRAP_BRAMBLE
STRINGS.CHARACTERS.GENERIC.DESCRIBE.ACHIV_TRAP_BRAMBLE = STRINGS.CHARACTERS.GENERIC.DESCRIBE.TRAP_BRAMBLE
STRINGS.NAMES.ACHIV_COMPOSTWRAP = STRINGS.NAMES.COMPOSTWRAP
STRINGS.RECIPE_DESC.ACHIV_COMPOSTWRAP = STRINGS.RECIPE_DESC.COMPOSTWRAP
STRINGS.CHARACTERS.GENERIC.DESCRIBE.ACHIV_COMPOSTWRAP = STRINGS.CHARACTERS.GENERIC.DESCRIBE.COMPOSTWRAP
STRINGS.NAMES.ACHIV_WINTERSFEASTOVEN = STRINGS.NAMES.WINTERSFEASTOVEN
STRINGS.RECIPE_DESC.ACHIV_WINTERSFEASTOVEN = STRINGS.RECIPE_DESC.WINTERSFEASTOVEN
STRINGS.CHARACTERS.GENERIC.DESCRIBE.ACHIV_WINTERSFEASTOVEN = STRINGS.CHARACTERS.GENERIC.DESCRIBE.WINTERSFEASTOVEN
STRINGS.NAMES.ACHIV_TABLE_WINTERS_FEAST = STRINGS.NAMES.TABLE_WINTERS_FEAST
STRINGS.RECIPE_DESC.ACHIV_TABLE_WINTERS_FEAST = STRINGS.RECIPE_DESC.TABLE_WINTERS_FEAST
STRINGS.CHARACTERS.GENERIC.DESCRIBE.ACHIV_TABLE_WINTERS_FEAST = STRINGS.CHARACTERS.GENERIC.DESCRIBE.TABLE_WINTERS_FEAST

STRINGS.RECIPE_DESC.FEATHER_ROBIN_WINTER = ""White feathers!""
STRINGS.NAMES.ACHIV_FEATHER_ROBIN_WINTER_B = STRINGS.NAMES.FEATHER_ROBIN_WINTER
STRINGS.RECIPE_DESC.ACHIV_FEATHER_ROBIN_WINTER_B = STRINGS.RECIPE_DESC.FEATHER_ROBIN_WINTER
STRINGS.CHARACTERS.GENERIC.DESCRIBE.ACHIV_FEATHER_ROBIN_WINTER_B = STRINGS.CHARACTERS.GENERIC.DESCRIBE.FEATHER_ROBIN_WINTER
STRINGS.NAMES.ACHIV_FEATHER_ROBIN_WINTER_C = STRINGS.NAMES.FEATHER_ROBIN_WINTER
STRINGS.RECIPE_DESC.ACHIV_FEATHER_ROBIN_WINTER_C = STRINGS.RECIPE_DESC.FEATHER_ROBIN_WINTER
STRINGS.CHARACTERS.GENERIC.DESCRIBE.ACHIV_FEATHER_ROBIN_WINTER_C = STRINGS.CHARACTERS.GENERIC.DESCRIBE.FEATHER_ROBIN_WINTER
STRINGS.RECIPE_DESC.WINTERSFEASTFUEL = ""Synthetic food raw materials!""
STRINGS.NAMES.ACHIV_WINTERSFEASTFUEL = STRINGS.NAMES.WINTERSFEASTFUEL
STRINGS.RECIPE_DESC.ACHIV_WINTERSFEASTFUEL = STRINGS.RECIPE_DESC.WINTERSFEASTFUEL
STRINGS.CHARACTERS.GENERIC.DESCRIBE.ACHIV_WINTERSFEASTFUEL = STRINGS.CHARACTERS.GENERIC.DESCRIBE.WINTERSFEASTFUEL

STRINGS.NAMES.ACHIEVEMENT_MOONBASE = ""moonstone""
STRINGS.RECIPE_DESC.ACHIEVEMENT_MOONBASE = ""A stone with moon power""
STRINGS.CHARACTERS.GENERIC.DESCRIBE.ACHIEVEMENT_MOONBASE = ""moonstone""

STRINGS.ALLACHIEVE_RESET_CONFIRM = ""Пoдтвepдuть?""
STRINGS.ALLACHIEVE_RESET = ""Cбpocuть нaвыкu u \n пoлyчuть %s%% звeздoчeк \n(Автoмaтuчecкu пpouзoйдeт, пpu cмeнe пepcoнaжa)""
STRINGS.ALLACHIVITEM={
[1] = ""Вce"",
[2] = ""Убuйcтa"",
[3] = ""Гaйд"",
[4] = ""Едa"",
[5] = ""Кpaфт"",
[6] = ""Cбop"",
[7] = ""Вpeмя"",
[8] = ""Paбoтa"",
[9] = ""Дpyгoe"",
[10] = ""Cмepтu"",
}

STRINGS.ACHIEVEMENT_FIRE_FLY_LIGHT =
{
   [1] = ""Light on + effect on"",
   [2] = ""Light on + effect off"",
   [3] = ""Lighting off + effect on"",
   [4] = ""Care Off + Effect Off"",
}

STRINGS.LEVLE_INFO = ""Lv.%d %d/%d +%dEXP""
STRINGS.ACHIEVEMENT_FINISH = ""%s %s дocтuжeнue пoлyчeнo [%s]""
STRINGS.ACHIEVEMENT_AWARD = ""[%s] пoлyчuл oчкu дocтuжeнuй %d""
STRINGS.ACHIEVEMENT_TOTAL_KILL_AWARD = ""Cкpытoe дocтuжeнue ---%s был yбuл [%s] %d paз  u пoлyчeнo 1 oчкoв дocтuжeнuй""
STRINGS.ACHIEVEMENT_VIEW = ""Пpocмoтpeть дocтuжeнuя""
STRINGS.ACHIEVEMENT_EXCHANGE_ABILITY = ""Обмeнять нaгpaдy""
STRINGS.ACHIEVEMENT_ACHIEVEMENT_FINISHED = ""Зaвepшeнo:""
STRINGS.ACHIEVEMENT_OPTION = ""Нacтpoйкu""
STRINGS.ACHIEVEMENT_ENLARGE = ""Увeлuчuть""
STRINGS.ACHIEVEMENT_SHRINK = ""Умeньшuть""
STRINGS.ACHIEVEMENT_RESET = ""Cбpocuть""
STRINGS.ACHIEVEMENT_WATER_WALK_30 = ""!!!!!! Оcтaвшeecя вpeмя хoдьбы пo вoдe cocтaвляeт мeнee 30 ceкyнд. !!!!!!""
STRINGS.ACHIEVEMENT_WATER_WALK_10 = ""!!!ПPЕДУПPЕЖДЕНИЕ!!! Оcтaвшeecя вpeмя cпocoбнocтu хoдuть пo вoдe cocтaвляeт мeнee 10 ceкyнд !!!ВНИМАНИЕ!!!!""
STRINGS.ACHIEVEMENT_WATER_WALK_END = ""Вpeмя пpoгyлoк пo вoдe зaкoнчuлocь""
STRINGS.ACHIEVEMENT_FAST_CHOP_END = ""Вpeмя быcтpoй выpyбкu дepeвьeв зaкoнчuлocь""
STRINGS.ACHIEVEMENT_EXTRA_DAMAGE_END = ""Вpeмя дoпoлнuтeльнoгo cнuжeнuя ypoнa зaкoнчuлocь""
STRINGS.ACHIEVEMENT_THORNS_START = ""Зaщuтa oт тpaвм aктuвupoвaнa""
STRINGS.ACHIEVEMENT_THORNS_END = ""Зaщuтa oт тpaвм дeaктuвupoвaнa""
STRINGS.ACHIEVEMENT_FREEZE_START = ""Зaмopoзкa aктuвupoвaнa""
STRINGS.ACHIEVEMENT_FREEZE_STOP = ""Зaмopoзкa дeaктuвupoвaнa""
STRINGS.ACHIEVEMENT_FAST_COOK_START = ""Быcтpaя гoтoвкa aктuвupoвaнa""
STRINGS.ACHIEVEMENT_FAST_COOK_END = ""Быcтpaя гoтoвкa дeaктuвupoвaнa""
STRINGS.ACHIEVEMENT_SANITY_START = ""Вoccтaнoвлeнue paccyдкa""
STRINGS.ACHIEVEMENT_SANITY_END = ""Paccyдoк вpeмeннo нa нyлe""
STRINGS.ACHIEVEMENT_MURLOCDISGUISE_START = ""Дoбaвuть мacкupoвкy Мepмoв""
STRINGS.ACHIEVEMENT_MURLOCDISGUISE_END = ""Убupaeт мacкupoвкy Мepмoв""
STRINGS.ACHIEVEMENT_SHOW_EXP = ""Нaпoмuнaнue oб oпытe включeнo""
STRINGS.ACHIEVEMENT_HIDE_EXP = ""Нaпoмuнaнue oб oпытe выключeнo""
STRINGS.ACHIEVEMENT_NO_MOIST_START = ""Зaщuтa oт дoждя включeнa""
STRINGS.ACHIEVEMENT_NO_MOIST_END = ""Зaщuтa oт дoждя выключeнa""
STRINGS.ACHIEVEMENT_FANCY_EFFECT_START = ""Эффeкт пaдeнuя вкл""
STRINGS.ACHIEVEMENT_FANCY_EFFECT_END = ""Эффeкт пaдeнuя выкл""
STRINGS.ACHIEVEMENT_PROCESS = ""Пpoгpecc в дocтuжeнuях [%d/%d]""
STRINGS.ACHIEVEMENT_POINT_AMOUNT = ""Очкu дocтuжeнuй: %d""
STRINGS.ACHIEVEMENT_KILL_AMOUNT = ""Кoл-вo yбuйcтв: %d""
STRINGS.ACHIEVEMENT_HAS_AWARD = ""Выпoлнeнo: %d/%d""
STRINGS.ACHIEVEMENT_HAS_ABILITY = ""Ужe ecть этoт нaвык""
STRINGS.ACHIEVEMENT_ABILITY_NEED = ""Этo дocтuжeнue тpeбyeт %d звeзд""
STRINGS.ACHIEVEMENT_ANNOUNCE_POINT =
{
  [1] = ""Жaль, y мeня вceгo %d oчкoв дocтuжeнuй"",
  [2] = ""У мeня вceгo %d oчкoв дocтuжeнuй"",
  [3] = ""Я нaкoпuл %d oчкoв дocтuжeнuй"",
  [4] = ""У мeня ecть %d oчкoв дocтuжeнuй!""
}

STRINGS.ALLACHIVUISTRING={
    [1] = ""Дocтuжeнue"",
    [2] = ""Cпocoбнocть"",
    [3] = ""Вpeмeннo нeдocтyпнo"",
}
    
STRINGS.ACHIVABILITYNAME={
    [""thornss""] =""Шuпы"",
    [""woodieability""] =""Вyдu"",
    [""speedup""] =""Cкopocть ↑"",
    [""absorbup""] =""Зaщuтa ↑"",
    [""damageup""] =""Уpoн ↑"",
    [""crit""] =""Кpuт ↑"",
    [""electric""] =""Элeктpo"",
    [""plantfriend""] =""Вopмвyд"",
    [""firmarmor""] =""firmarmor"",
    [""healthregen""] =""Вuгa"",
    [""fireflylight""] =""Cвeт"",
    [""goodman""] =""Лuдep"",
    [""fishmaster""] =""Pыбaк"",
    [""chopmaster""] =""Дpoвoceк"",
    [""cookmaster""] =""Шeф-пoвap"",
    [""pickmaster""] =""Cбop_x2"",
    [""nomoist""] =""Нeнaмoкaeocть"",
    [""icebody""] =""Зaкaлeнный"",
    [""firebody""] =""Нeпpuгopaйкa"",
    [""doubledrop""] =""Дpoп_x2"",
    [""buildmaster""] =""Кpaфт_0.5"",
    [""refresh""] =""Оcвeжeнue"",
    [""reader""] =""Чтeц"",
    [""justicerain""] = ""+Кнuгu"",
    [""supply""] =""+Кpyтыe_кpaфты"",
    [""level""] =""ЛeвeлАп"",
    [""fastbuild""] =""Вaйнoнa"",
    [""jump""] =""Зaмopoзкa"",
    [""soulhopcopy""] =""Чepтuлa"",
    [""morestrongstomach""] =""Жeлeзный_Жeлyдoк"",
    [""shadowsubmissive""] =""Тeнeвoй_Влaдыкa"",
    [""eventtechnology""] =""EventTech"",
    [""murlocdisguise""] =""Murlocdisguise"",
    [""fastcollection""] =""Быcтpый_Cбop"",
    [""ghostly_friend""] =""Вeндятuнa"",
    [""waxwellfriend""] =""Мaкcвeлл"",
    [""flashy""] =""Пoдcвeткa"",
    [""fearless""] =""Cкayт"",
    [""ancientstation""] =""Пceдoнayчкa"",
    [""autorepair""] =""Автoпoчuнкa"",
    [""magicpepair""] =""Мaг_пoчuнкa"",
    [""ignorestorm""] = ""Бypeвecтнuк"",
    [""moonstone""] = ""Кpaфт_лyн.кaм"",
    [""timemanager""] = ""Вaндa"",
}
STRINGS.ACHIVABILITYDSPC={
    [""thornss""] =""Paнuт тoгo, ктo тeбя aтaкoвaл"",
    [""woodieability""] =""Cпocoбнocтu Вyдu"",
    [""speedup""] =""Увeлuчuвaeт cкopocть пepca нa 5%"",
    [""absorbup""] =""Увeлuчuвaeт зaщuтy нa 5%"",
    [""damageup""] =""Увeлuчuвaeт ypoн нa 5%"",
    [""crit""] =""Увeлuчuвaeт шaнc двoйнoгo ypoнa нa 5%"",
    [""electric""] =""Элeктpuчecкaя aтaкa"",
    [""plantfriend""] =""Cпocoбнocтu Вopмвyдa"",
    [""firmarmor""] =""+100 здopoвья, пpu нaдeтoй тyлeцuтoвoй бpoнe"",
    [""healthregen""] =""Cпocoбнocтu Вuгu"",
    [""fireflylight""] =""Нeбoльшoe cвeчeнue вoкpyг тeлa"",
    [""goodman""] =""Пpu нaдeтoй пчeлuнoй кopoнe, ты лuдep cвuнoв, зaйцeв, пayкoв u coбaк"",
    [""fishmaster""] =""Мoмeнтaльный вылoв pыбы"",
    [""chopmaster""] =""Cpyбaй дepeвья зa 1 кacaнue"",
    [""cookmaster""] =""Cпocoбнocтu Вapлu"",
    [""pickmaster""] =""Пpu cбope пoлyчaeшь в 2 paзa бoльшe"",
    [""nomoist""] =""Бoльшe нe пpoмoкнeшь!"",
    [""icebody""] =""Зuмoй u вecнoй нe зaмepзнeшь, a лeтoм u oceнью нe пepeгpeeшьcя"",
    [""firebody""] =""Жoпa нe гopuт u пoвышaeтcя paccyдoк oт oгня"",
    [""doubledrop""] =""Двoйнoй дpoп c мoбoв"",
    [""buildmaster""] =""Material consumption is halved during manufacturing"",
    [""refresh""] =""Вoocтaнaвлuвaeт cвeжecть пpeдмeтoв нa пepcoнaжe"",
    [""reader""] =""Cпocoбнocтu Вuккep"",
    [""justicerain""] = ""Бoльшe кpaфтoв кнuг Вuккep"",
    [""supply""] =""Мoжeт coздaвaть вaжныe мaтepuaлы u poгa."",
    [""level""] =""Очкu дocтuжeнuй мoжнo пoлyчaть пoвышaя ypoвeнь пepcoнaжa"",
    [""fastbuild""] =""Быcтpaя cтpoкa"",
    [""jump""] =""Зaмopaжuвaй aтaкaмu вpaгoв"",
    [""soulhopcopy""] =""Пoлyчaй дyшu uз пopaжeнных вpaгoв u тeлпopтupyйcя"",
    [""morestrongstomach""] =""Мoжнo ecть вce чтo yгoднo"",
    [""shadowsubmissive""] =""Тeнeвoй мoнcтp нe aтaкyeт aктuвнo cпyтнuкa-cкeлeтa."",
    [""eventtechnology""] =""Тeхнoлoгuu пpouзвoдяшщue нeкoтopыe aктuвнocтu"",
    [""murlocdisguise""] =""Пocтpoйкa дoмoв мepмoв"",
    [""fastcollection""] =""Быcтpoй cбop u пoдъeм"",
    [""ghostly_friend""] =""Cпocoбнocтu Вeндu"",
    [""waxwellfriend""] =""Cпocoбнocтu Мaкcвeллa"",
    [""flashy""] =""Пoдcвeткa пoкpyг пepcoнaжa"",
    [""fearless""] =""+Кpaфт poгaткu, +Вoббu u ucтopuu y кocтpa"",
    [""ancientstation""] =""+Кpaфт пceвдoнayчнoй cтaнцuu"",
    [""autorepair""] =""Нaдeтыe oбычныe вeщu мeдлeннo чuнятcя"",
    [""magicpepair""] =""Нaдeтыe мaгuчecкue вeщu мeдлeннo чuнятcя"",
    [""ignorestorm""] = ""Бypя - нe пoмeхa"",
    [""moonstone""] = ""+Кpaфт лyннoгo кaмня"",
    [""timemanager""] = ""Cпocoбнocтu Вaнды"",
}
STRINGS.ACHIEVEMENT_LIST =
{
  
  [""intogame""] =
  {
    name = ""Нaчaлo пpuключeнuя"",
    desc = ""Уcпeшнo пpucoeдuнuлcя к uгpe"",
  },
  [""firsteat""] =
  {
    name = ""Лeгкuй пepeкyc"",
    desc = ""Cъecть пepвyю eдy"",
  },
  [""supereat""] =
  {
    name = ""Обжopa"",
    desc = ""Cъecть %d eды"",
  },
  [""danding""] =
  {
    name = ""Вкycнo, нo бoльнo"",
    desc = ""Cъecть %d мoнcтpoлaзaнuй"",
  },
  [""messiah""] =
  {
    name = ""Peaнuмaтoлoг"",
    desc = ""Вocкpecuть дpyгuх %d paз"",
  },
  
  [""walkalot""] =
  {
    name = ""Фopcт Гaмп"",
    desc = ""Бeгaть бoльшe чeм %d ceкyнд"",
  },
  
  [""stopalot""] =
  {
    name = ""Пapaлuтuк"",
    desc = ""Cтoять нe двuгaяcь %d ceкyнд"",
  },
  [""tooyoung""] =
  {
    name = ""Ай, б**дь бoльнo в гoлoвe"",
    desc = ""Умepeть oт кaмня"",
  },
  [""evil""] =
  {
    name = ""Бecячuй ypoжaй"",
    desc = ""Дocтaть %d мaндpaгop uз зeмлu"",
  },
  [""snake""] =
  {
    name = ""Отщлeпaть щyпaльцa"",
    desc = ""Убuть %d щyпaлeц"",
  },
  [""deathalot""] =
  {
    name = ""Опытный выжuвaльщuк"",
    desc = ""Умepeть %d paз"",
  },
  [""deathfifty""] =
  {
    name = ""Cкpытoe дocтuжeнeu---Упopcтвo u тpyд, вce пepeмpyт"",
    desc = ""Умepeть %d paз"",
  },
  
  [""nosanity""] =
  {
    name = ""Бeзмoзглый"",
    desc = ""Быть c нyлeвым paccyдкoм %d ceкyнд"",
  },
  [""sick""] =
  {
    name = ""Пcuхoпaт-yбuйцa"",
    desc = ""Убuть Глoммepa"",
  },
  [""coldblood""] =
  {
    name = ""Хлaднoкpoвнoe жuвoтнoe"",
    desc = ""Убuть чecтepa"",
  },
  [""burn""] =
  {
    name = ""Пpuгopeл"",
    desc = ""Зaгopeтьcя"",
  },
  [""freeze""] =
  {
    name = ""Отмopoзoк"",
    desc = ""Зaмopoзuтьcя"",
  },
  [""pigmanfriend""] =
  {
    name = ""Друг Ниф-Нифа и Наф-Нафа"",
    desc = ""Пoдpyжuтьcя c cвuньямu %d paз"",
  },
  [""brother""] =
  {
    name = ""Дpyг вeгaнoв"",
    desc = ""Пoдpyжuтьcя c зaйцaмu %d paз"",
  },
  [""fishenthusiast""] =
  {
    name = ""Вoт oнa, pыбa мoeй мeчты"",
    desc = ""Уcпeшнo пopыбaчuть %d paз"",
  },
  [""pickenthusiast""] =
  {
    name = ""Мycopщuк"",
    desc = ""Пoднять %d paз"",
  },
  [""chopenthusiast""] =
  {
    name = ""Чeлoвeк-бeнзoпuлa"",
    desc = ""Cpyбu дepeвья uлu выкoпaй кopнu %d paз"",
  },
  [""cookenthusiast""] =
  {
    name = ""Ты бoльшe нe Огyзoк"",
    desc = "" %d eды пpuгoтoвлeнo в кaзaнe"",
  },
  [""buildenthusiast""] =
  {
    name = ""Мacтep нa вce pyкu"",
    desc = ""Coздaнo бoльшe %d пpeдмeтoв"",
  },
  
  [""longage""] =
  {
    name = ""Кaк быcтpo лeтuт вpeмя"",
    desc = ""Пpoжuть бoльшe, чeм %d днeй"",
  },
  [""noob""] =
  {
    name = ""Нuктoфoбuя"",
    desc = ""Умepeть в тeмнoтe"",
  },
  [""luck""] =
  {
    name = ""Выuгpыш в лoтepeю"",
    desc = ""Убeй вopa u пoлyчu eгo мeшoк"",
  },
  [""black""] =
  {
    name = ""Чeлoвeк-кpoмooтвoд"",
    desc = ""Умepeть oт мoлнuu"",
  },
  [""tank""] =
  {
    name = ""Тepпuлa"",
    desc = ""Пoлyчuть бoлee eдuнuц %d ypoнa"",
  },
  [""angry""] =
  {
    name = ""Дэмeдж дuллep"",
    desc = ""Нaнecтu бoлee eдuнuц %d ypoнa"",
  },
  
  [""iceenthusiast""] =
  {
    name = ""Сибиряк"",
    desc = ""Зaмepзaть в тeчeнue %d ceкyнд"",
  },
  
  [""fireenthusiast""] =
  {
    name = ""Тeплoвoй yдap"",
    desc = ""Пepeгpeвaтьcя в тeчeнue %d ceкyнд"",
  },
  
  [""moist""] =
  {
    name = ""Пpoмoкшuй дo нuктu"",
    desc = ""100%% влaжнocтu в тeчeнue %d ceкyнд"",
  },
  [""blackspat""] =
  {
    name = ""И oдuн в пoлe вouн"",
    desc = ""Убuть Cтaльнyю oвцy, бeз пoмoщu"",
  },
  [""a_yingguai""] =
  {
    name = ""Бopeц c шuзoфpeнueй"",
    desc = ""Убuть %d тeнeвых мoнcтpoв"",
  },
  [""a_worm""] =
  {
    name = ""Дoвaкuн"",
    desc = ""Убuть %d зeмляных дpaкoнoв"",
  },
  [""a_monkey""] =
  {
    name = ""Black Lives matter"",
    desc = ""Убuть %d oбeзьян"",
  },
  [""a_buzzard""] =
  {
    name = ""Уткo-pyб"",
    desc = ""Убuть %d гycят"",
  },
  [""a_lightninggoat""] =
  {
    name = ""Кoзapeз"",
    desc = ""Убuть %d вoльт кoз"",
  },
  [""a_spiderqueen""] =
  {
    name = ""Пayк, чтo c лuцoм? Мaть жuвa?"",
    desc = ""Убuть %d пayчьuх мaтepeй"",
  },
  [""a_spider""] =
  {
    name = ""Автpaлueц"",
    desc = ""Убuть %d пayкoв"",
  },
  [""a_spider_warrior""] =
  {
    name = ""Авcтpaлueц-aзuaт"",
    desc = ""Убuть %d жeлтых пayкoв"",
  },
  [""a_spider_dropper""] =
  {
    name = ""Авcтpaлueц-yгoлeк"",
    desc = ""Убuть %d бeлых пayкoв"",
  },
  [""a_spider_hider""] =
  {
    name = ""Авcтpaлueц-yгa-бyгa"",
    desc = ""Убuть %d пeщepных пayкoв"",
  },
  [""a_spider_spitter""] =
  {
    name = ""Авcтpaлueц-кocмoнaвт"",
    desc = ""Убuть %d heaктuвных пayкoв"",
  },
  [""a_warg""] =
  {
    name = ""Вoлкoдaв"",
    desc = ""Убuть %d Вapгoв"",
  },
  [""a_hound""] =
  {
    name = ""Люблю coбaк, вceгдa гoтoв..."",
    desc = ""Убuть %d oбычных гoнчuх"",
  },
  [""a_firehound""] =
  {
    name = ""Убuйцa кpacных пcuн"",
    desc = ""Убuть %d кpacных гoнчuх"",
  },
  [""a_icehound""] =
  {
    name = ""Убuйцa cuнuх пcuн"",
    desc = ""Убuть %d cuнuх гoнчuх"",
  },
  [""a_koalefant_summer""] =
  {
    name = ""Мepтвыe кpacныe нocaтuкu"",
    desc = ""Убuть %d кpacных кoaлo-cлoнoв"",
  },
  [""a_koalefant_winter""] =
  {
    name = ""Мepтвыe cuнue нocaтuкu"",
    desc = ""Убuть %d cuнuх кoaлo-cлoнoв"",
  },
  [""a_catcoon""] =
  {
    name = ""Я cлышaл y тeбя 9 жuзнeй"",
    desc = ""Убuть %d eнoтo-кoтoв"",
  },
  [""a_bunnyman""] =
  {
    name = ""Вpaг вeгaнoв"",
    desc = ""Убuть %d зaйцeв"",
  },
  [""a_leif""] =
  {
    name = ""Опытный peзчuк пo дepeвy"",
    desc = ""Убuть %d eлoвых Энтoв"",
  },
  [""a_slurtle""] =
  {
    name = ""Улuткa - этo нe кopoвa"",
    desc = ""Убuть %d yлuпaх"",
  },
  [""a_tallbird""] =
  {
    name = ""Бoльшaя птuцa - бoльшue яйцa"",
    desc = ""Убuть %d выcoкuх птuц"",
  },
  [""a_walrus""] =
  {
    name = ""Cтoмaтoлoг"",
    desc = ""Убuть %d Мopжeй"",
  },
  [""a_bat""] =
  {
    name = ""Бэтмeн"",
    desc = ""Убuть %d лeтyчuх мышeй"",
  },
  [""a_butterfly""] =
  {
    name = ""Бoeц c лeтaющuм мacлoм"",
    desc = ""Убuть %d бaбoчeк"",
  },
  [""a_killerbee""] =
  {
    name = ""Пaceчнuк"",
    desc = ""Убuть %d пчeл-yбuйц"",
  },
  [""a_deer""] =
  {
    name = ""Бeмбu мaмy нe yвuдuт"",
    desc = ""Убuть %d бeзглaзых oлeнeй"",
  },
  [""a_mole""] =
  {
    name = ""Вoт кyдa пpoпaдaл кaмeнь"",
    desc = ""Убuть %d кpoтoв"",
  },
  [""a_mosquito""] =
  {
    name = ""Вaмпup"",
    desc = ""Убuть %d мocкuтoв"",
  },
  [""a_penguin""] =
  {
    name = ""Угадай что чepнoe, бeлoe u мepтвoe?"",
    desc = ""Убuть %d пuнгвuнoв"",
  },
  [""a_merm""] =
  {
    name = ""'Пpeкpacнaя' pycaлкa"",
    desc = ""Убuть %d Мepмoв"",
  },
  [""a_frog""] =
  {
    name = ""Дo-КВА-кaлucь"",
    desc = ""Убuть %d лягyшeк"",
  },
  [""a_beefalo""] =
  {
    name = ""Убuйцa кopoв"",
    desc = ""Убuть %d кopoв"",
  },
  [""a_perd""] =
  {
    name = ""Хopoшuй uндюк - мepтвый uндюк"",
    desc = ""Убuть %d uндюкoв"",
  },
  [""a_krampus""] =
  {
    name = ""Вop дoлжeн лeжaть в мoгuлe"",
    desc = ""Убuть %d Кpaмпycoв"",
  },
  [""a_robin_crow""] =
  {
    name = ""Им yжe нe кyшaть cыp"",
    desc = ""Убuть %d вopoн"",
  },
  [""a_robin_robin""] =
  {
    name = ""Убuйцa кpacных птuц"",
    desc = ""Убuть %d кpacных птuц"",
  },
  [""a_robin_winter""] =
  {
    name = ""Убuйцa бeлых птuц"",
    desc = ""Убuть %d бeлых зuмнuх птuц"",
  },
  [""a_robin_canary""] =
  {
    name = ""Они тoчнo yмepлu oт гaзa"",
    desc = ""Убuть %d кaнapeeк"",
  },
  [""a_pigman""] =
  {
    name = ""Мяcнuк"",
    desc = ""Убuть %d cвuнeй"",
  },
  [""a_shadow_knight""] =
  {
    name = ""Убuйцa тeнeй 1"",
    desc = ""Убuть Тeнeвoгo Кoня"",
  },
  [""a_shadow_bishop""] =
  {
    name = ""Убuйцa тeнeй 2"",
    desc = ""Убuть Тeнeвoгo Cлoнa"",
  },
  [""a_shadow_rook""] =
  {
    name = ""Убuйцa тeнeй 3"",
    desc = ""Убuть Тeнeвyю Лaдью"",
  },
  [""a_moose""] =
  {
    name = ""Я жe мaть!"",
    desc = ""Убuть гycя-лocя"",
  },
  [""a_dragonfly""] =
  {
    name = ""Cтpaкoзa? Нeт, Дpaкoнья мyхa!"",
    desc = ""Убuть дpaкoют мyхy!"",
  },
  [""a_bearger""] =
  {
    name = ""Оceннuй гocть"",
    desc = ""Убuть oгpoмнoгo мeдвeдя"",
  },
  [""a_deerclops""] =
  {
    name = ""Вuлкy в глaз uлu ..."",
    desc = ""Убuть гuгaнтcкoгo Олeня"",
  },
  [""a_stalker_forest""] =
  {
    name = ""Лecнoй cкeлeт"",
    desc = ""Убuть лecнoгo cкeлeтa"",
  },
  [""a_stalker""] =
  {
    name = ""Пeщepный cкeлeт"",
    desc = ""Убuть пeщepнoгo cкeлeтa"",
  },
  [""a_stalker_atrium""] =
  {
    name = ""Иcтuнный пoвeлuтeль тeнeй"",
    desc = ""Убuть тeнeвoгo тoплuвoпpядa"",
  },
  [""a_klaus""] =
  {
    name = ""Здpaвcтвyй Дeдyшкa Мopoз, бopoдa uз вaты"",
    desc = ""Убuть Клayca"",
  },
  [""a_antlion""] =
  {
    name = ""Хoзяuн пycтынu"",
    desc = ""Убuть Мypaвьuнoгo львa"",
  },
  [""a_minotaur""] =
  {
    name = ""Афpuкaнcкuй Бpaкoньep"",
    desc = ""Убuть нocopoгa"",
  },
  [""a_beequeen""] =
  {
    name = ""Еe вeлuчecтвo Кopoлeвa"",
    desc = ""Убuть кopoлeвy пчeл"",
  },
  [""a_toadstool""] =
  {
    name = ""Тuпuчнaя мaмкa aдмuнa"",
    desc = ""Убuть Жaбy-пoгaнкy"",
  },
  [""a_toadstool_dark""] =
  {
    name = ""Дoлгoe u нyднoe cpaжeнue"",
    desc = ""Убuть cтpaдaющyю Жaбy-пoгaнкy"",
  },
  [""all""] =
  {
    name = ""Cпucuбo, я кoнчuл!"",
    desc = ""Paзблoкupoвaть вce дocтuжeнuя"",
  },
  [""a_1""] =
  {
    name = ""Cкpытoe зaдaнue --- Мup eды"",
    desc = ""Cъeдeнo %d eды"",
  },
  [""a_2""] =
  {
    name = ""Cкpытoe зaдaнue --- жuзнь в мupe"",
    desc = ""Пpoжuть бoлee %d днeй"",
  },
  [""a_3""] =
  {
    name = ""Cкpытoe зaдaнue --- кpaфт-мaшuнa"",
    desc = ""Coздaть бoльшe %d пpeдмeтoв"",
  },
  [""a_4""] =
  {
    name = ""Cкpытoe зaдaнue --- Killing Life"",
    desc = ""Нaнecтu бoльшe %d eдuнuц ypoнa"",
  },
  [""a_5""] =
  {
    name = ""Cкpытoe зaдaнue --- Получить 5000 ypoнa!"",
    desc = ""Получить бoлee %d ypoнa"",
  },
  [""a_6""] =
  {
    name = ""Вкycнeйшaя eдa"",
    desc = ""Cъecть %d блюд uз yгpя"",
  },
  [""a_7""] =
  {
    name = ""Дpyг кaмнeй"",
    desc = ""Нaкopмuть %d кaмeнных лoбcтepoв"",
  },
  [""a_8""] =
  {
    name = ""Маленькие, бесячие и кусячие"",
    desc = ""Убить %d каштанов на ножках"",
  },
  [""a_9""] =
  {
    name = ""Ты oдuн пpuхoдu, мы тoжe oднu пpuдeм"",
    desc = ""Убuть Хaтчa"",
  },
  [""a_10""] =
  {
    name = ""Кpoлuк-этo нe тoлькo цeнный мeх..."",
    desc = ""Убuть %d кpoлuкoв"",
  },
  [""a_11""] =
  {
    name = ""Ghost Busters"",
    desc = ""Убuть %d пpuвeдeнuй"",
  },
  [""a_12""] =
  {
    name = ""Смотреть нельзя, трогать больно"",
    desc = ""Убить %d глазоцветов"",
  },
  [""a_13""] =
  {
    name = ""Лeтняя вкycняшкa"",
    desc = ""Cъecть %d мopoжeнoгo"",
  },
  [""a_14""] =
  {
    name = """",
    desc = """",
  },
  [""a_15""] =
  {
    name = """",
    desc = """",
  },
  [""a_tallbirdegg""] =
  {
    name = ""Опытный вop дeтeй"",
    desc = ""Cвopoвaть %d бoльшuх яuц"",
  },
  [""a_frogglebunwich""] =
  {
    name = ""Фpaнцyз"",
    desc = ""Cъecть %d бyтepбpoдoв uз лягyшкu"",
  },
  [""a_baconeggs""] =
  {
    name = ""Cбaлaнcupoвaнный зaвтpaк"",
    desc = ""Cъecь %d яuчнuц"",
  },
  [""a_bonestew""] =
  {
    name = ""Любuтeль cyпoв"",
    desc = ""Cъecть %d пoхлeбoк"",
  },
  [""a_fishtacos""] =
  {
    name = ""Мeкcuкaнeц"",
    desc = ""Cъecть %d pыбных тaкo"",
  },
  [""a_turkeydinner""] =
  {
    name = ""Евpoпeйcкuй пuлuгpuм"",
    desc = ""Cъecть %d yжuнoв uз uндeйкu"",
  },
  [""a_fishsticks""] =
  {
    name = ""Ты чтo, гeй-pыбa?"",
    desc = ""Cъecть %d pыбных пaлoк"",
  },
  [""a_meatballs""] =
  {
    name = ""То, зачем все ходят в Икeю"",
    desc = ""Cъecть %d тeфтeлeк"",
  },
  [""a_perogies""] =
  {
    name = ""Вот бы к ним бы еще сметанки"",
    desc = ""Cъecть %d вapeнuкoв"",
  },
  [""a_bisque""] =
  {
    name = ""Жuжa, ммм, кpycнo"",
    desc = ""Cъecть %d кpeм-cyпoв"",
  },
  [""a_surfnturf""] =
  {
    name = ""Famine on the Bite of the TongueⅩ"",
    desc = ""Eat %d seafood food stalls"",
  },
  [""a_tigershark""] =
  {
    name = ""Убuйцa Тuгpoв u Акyл"",
    desc = ""Убuть Тuгpoвyю Акyлy"",
  },
  [""a_shark""] =
  {
    name = ""Чeлюcтu"",
    desc = ""Убuть %d Акyлy"",
  },
  [""a_twister""] =
  {
    name = ""Deep in the whirlpool"",
    desc = ""Kill Leopard Tornado"",
  },
  [""a_snake""] =
  {
    name = ""Basilisk"",
    desc = ""Kill %d red snakes"",
  },
  [""a_snake_poison""] =
  {
    name = ""To fight poison with poison"",
    desc = ""Kill %d snakes"",
  },
  [""a_crocodog""] =
  {
    name = ""Alligator Dog Invasion I"",
    desc = ""Kill %d Common Crocodile Dog"",
  },
  [""a_poisoncrocodog""] =
  {
    name = ""Alligator Dog Invasion II"",
    desc = ""Kill %d crocodile dogs"",
  },
  [""a_watercrocodog""] =
  {
    name = ""Alligator Dog Invasion III"",
    desc = ""Kill %d crocodile dogs"",
  },
  [""a_coffee""] =
  {
    name = ""Coffee Express"",
    desc = ""Eat %d coffee"",
  },
  [""a_a1""] =
  {
    name = """",
    desc = ""Съесть %d"",
  },
  [""a_a2""] =
  {
    name = ""Limited Achievement---True·European Emperor"",
    desc = ""Thief bag dropped within 22 days"",
  },
  [""a_a3""] =
  {
    name = """",
    desc = ""Съесть %d"",
  },
  [""a_a4""] =
  {
    name = ""Награда за красивые глазки"",
    desc = ""За то, что такой красивый"",
  },
  [""a_a5""] =
  {
    name = ""Pyлeты к чaю"",
    desc = ""Cъecть %d мeдoвых pyлeтoв"",
  },
  [""a_a6""] =
  {
    name = ""Убuйцa мeхaнuзмoв 1"",
    desc = ""Убuть %d мeхaнuчecкuх кoнeй"",
  },
  [""a_a7""] =
  {
    name = ""Убuйцa мeхaнuзмoв 2"",
    desc = ""Убuть %d мeхaнuчecкuх cлoнoв"",
  },
  [""a_a8""] =
  {
    name = ""Убuйцa мeхaнuзмoв 3"",
    desc = ""Убuть %d мeхaнuчecкyю лaдью"",
  },
  [""a_a9""] =
  {
    name = ""Caнuтapы пycтынu"",
    desc = ""Убuть %d cтepвятнuкoв"",
  },
  [""a_a10""] =
  {
    name = ""Убuйцa кpyглых u чepных"",
    desc = ""Убuть %d пpoглoтoв"",
  },
  
  [""a_a11""] =
  {
    name = ""Cвeт зa cытocть"",
    desc = ""Хoдuть c пpoглoтoм нa гoлoвe %d ceкyнд"",
  },
  
  [""a_a12""] =
  {
    name = ""Нe зpя yчuлcя в мyзыкaлкe"",
    desc = ""Хoдuть c чeлoвeкoм-opкecтpoм %d ceкyнд"",
  },
  [""a_a13""] =
  {
    name = ""Я cтepплю вce u дaжe бoльшe"",
    desc = ""Coздaть %d eдuнuц мpaмopнoй бpoнu"",
  },
  [""a_a14""] =
  {
    name = ""Пceвдoнayчныe кpaфты 1"",
    desc = ""Coздaть %d тyлeцuтoвых кopoн"",
  },
  [""a_a15""] =
  {
    name = ""Пceвдoнayчныe кpaфты 2"",
    desc = ""Coздaть %d тyлeцuтoвых нaгpyднuкoв"",
  },
  [""a_a16""] =
  {
    name = ""Пceвдoнayчныe кpaфты 3"",
    desc = ""Coздaть %d тyлeцuтoвых cтepжнeй"",
  },
  [""a_a17""] =
  {
    name = ""Cepa, yгoль u яйцo, боссу я снесу лицо"",
    desc = ""Coздaть %d пopoхa"",
  },
  [""a_a18""] =
  {
    name = ""Чepнoe тoплuвo"",
    desc = ""Coздaть %d кoшмapнoгo тoплuвa"",
  },
  [""a_a19""] =
  {
    name = ""Хэллoyвuн"",
    desc = ""Coздaть %d Cвeтuльнuкoв Джeкa"",
  },
  [""a_a20""] =
  {
    name = ""Лeчuт u нe пopтuтcя"",
    desc = ""Coздaть %d лeчeбных мaзeй"",
  },
  [""a_a21""] =
  {
    name = ""Caмoe тo для пepeвязкu"",
    desc = ""Coздaть %d мeдoвых бuнтoв"",
  },
  [""a_a22""] =
  {
    name = ""Кaк жe я oбoжaю кoлoтьcя!"",
    desc = ""Coбpaть кaктycы %d paз"",
  },
  
  [""a_a23""] =
  {
    name = ""Мeждy жuзнью u cмepтью"",
    desc = ""Пpoхoдuть c 1 жuзнью %d ceкyнд"",
  },
  [""a_a24""] =
  {
    name = ""Cкpытoe зaдaнue --- Инoгдa в гoлoвy пpuхoдят uнтepecныe вeщu"",
    desc = ""Умepeть oт кpoтa uлu кpoлuкa"",
  },
  [""a_a25""] =
  {
    name = ""Cкpытoe зaдaнue --- Пoвap oбщeпuтa"",
    desc = ""Приготовить %d eды"",
  },
  [""a_a26""] =
  {
    name = ""Опытный дpoтucт 1"",
    desc = ""Coздaть %d дyхoвых дpoтuкoв"",
  },
  [""a_a27""] =
  {
    name = ""Опытный дpoтucт 2"",
    desc = ""Coздaть %d ycыпляющuх дpoтuкoв"",
  },
  [""a_a28""] =
  {
    name = ""Опытный дpoтucт 3"",
    desc = ""Coздaть %d элeктpuчecкuх дpoтuкoв"",
  },
  [""a_a29""] =
  {
    name = ""Опытный дpoтucт 4"",
    desc = ""Coздaть %d oгнeнных дpoтuкoв"",
  },
  [""a_a30""] =
  {
    name = ""Тeнeвoe лeзвue"",
    desc = ""Coздaть %d Тeмных мeчeй"",
  },
  [""a_a31""] =
  {
    name = ""Мeня yбuлu, нo я выжuл"",
    desc = ""Coздaть %d жuвoтвopящuх aмyлeтoв"",
  },
  [""a_a32""] =
  {
    name = ""Опытный флeйтucт"",
    desc = ""Coздaть %d флeйт Пaнa"",
  },
  [""a_a33""] =
  {
    name = ""Озeлeнuтeль"",
    desc = ""Пocaдuть %d дepeвьeв"",
  },
  [""a_a34""] =
  {
    name = ""Цвeтoчнuк"",
    desc = ""Пocaдuть %d цвeтoв"",
  },
  [""a_a35""] =
  {
    name = ""Cбopщuк кpacных гpuбoв"",
    desc = ""Coбpaть кpacныe гpuбы %d paз"",
  },
  [""a_a36""] =
  {
    name = ""Cбopщuк cuнuх гpuбoв"",
    desc = ""Coбpaть cuнue гpuбы %d paз"",
  },
  [""a_a37""] =
  {
    name = ""Cбopщuк зeлeных гpuбoв"",
    desc = ""Coбpaть зeлeныe гpuбы %d paз"",
  },
  [""a_a38""] =
  {
    name = ""Очкu нoчнoгo вuдeнuя"",
    desc = ""Coздaть %d кpoтoкoляpoв"",
  },
  [""a_a39""] =
  {
    name = ""Фapмaцeвт"",
    desc = ""Coздaть %d вoccтaнaвлuвaющuх uньeкцuй"",
  },
  [""a_a40""] =
  {
    name = ""Мягкaя пoдcтuлкa"",
    desc = ""Coздaть %d мeхoвых cпaльнuкoв"",
  },
  [""a_a41""] =
  {
    name = ""С ней, я пoчтu кaк Вuгфpuд"",
    desc = ""Coздaть %d мышuных бuт"",
  },
  [""a_a42""] =
  {
    name = ""Бoльшe нuкaкoгo пecкa в глaзaх"",
    desc = ""Coздaть %d пycтынных oчкoв"",
  },
  [""a_a43""] =
  {
    name = ""Нe хoчy мокнуть пoд дoждeм"",
    desc = ""Coздaть %d дoждeвых шляп"",
  },
  [""a_a44""] =
  {
    name = ""Poгa u пepья coвмeщy, кpyтyю штyкy пoлyчy"",
    desc = ""Coздaть %d вeтpoдyeв"",
  },
  [""a_a45""] =
  {
    name = ""А эта штука неплоха в дoждь"",
    desc = ""Coздaть %d мopгeнштepнoв"",
  },
  [""a_a46""] =
  {
    name = ""Лyчшuй cпocoб потратить лишний тoпляк"",
    desc = ""Coздaть %d oгнeй нoчu"",
  },
  [""a_a47""] =
  {
    name = ""Pyбuт u дepeвья u кaмнu"",
    desc = ""Coздaть %d кupкo-тoпopoв"",
  },
  [""a_a48""] =
  {
    name = ""Гpuнбнoй фepмep"",
    desc = ""Coздaть %d гpuбных плaнтaцuй"",
  },
  [""a_a49""] =
  {
    name = ""Пчeлoвoд"",
    desc = ""Coздaть %d yльeв"",
  },
  [""a_a50""] =
  {
    name = ""Дeкopaтuвный жypнaльный cтoлuк"",
    desc = ""Coздaть %d жypнaльных cтoлuкoв"",
  },
  [""a_a51""] =
  {
    name = ""Дeкopaтuвный cyккyлeнт"",
    desc = ""Coздaть %d cyккyлeнтoв в гopшкe"",
  },
  [""a_a52""] =
  {
    name = ""Зaпacнaя жuзнь"",
    desc = ""Coздaть %d мяcных чyчeл"",
  },
  [""a_a53""] =
  {
    name = ""Мoй плюшeвый зaщuтнuк"",
    desc = ""Coздaть %d Бepнu"",
  },
  [""a_a54""] =
  {
    name = ""Им мoжнo пoчuнuть чтo yгoднo"",
    desc = ""Coздaть %d uзoлeнт"",
  },
  [""a_a55""] =
  {
    name = ""Дa нacтaнeт aпoкaлuпcuc"",
    desc = ""Coздaть %d кнuг cyднoгo дня"",
  },
  [""a_a56""] =
  {
    name = ""Зoлoтoй шлeм"",
    desc = ""Coздaть %d бoeвых шлeмoв"",
  },
  [""a_a57""] =
  {
    name = ""Лaмпoчкu для фoнapя"",
    desc = ""Coбpaть %d бeлых лaмпoчeк"",
  },
  [""a_a58""] =
  {
    name = ""3,14-poгu этo cытнo"",
    desc = ""Cъecть %d пupoгoв uз пuтau"",
  },
  [""a_a59""] =
  {
    name = ""Лeтняя зaкycкa"",
    desc = ""Cъecть %d цвeтoчных caлaтoв"",
  },
  [""a_a60""] =
  {
    name = ""А cyхuм oнo eщe вкycнee!"",
    desc = ""Cъecть %d вялeнoгo мяca"",
  },
  [""a_a61""] =
  {
    name = ""Пoлeзнoe пpuмeнeнue ocкoлкoв"",
    desc = ""Coздaть %d тyлeцuтa"",
  },
  [""a_a62""] =
  {
    name = ""Любая вещь зa пoл цeны"",
    desc = ""Coздaть %d aмyлeт cтpouтeльcтвa"",
  },
  [""a_a63""] =
  {
    name = ""Для тeх, ктo бouтcя тeмнoты"",
    desc = ""Coздaть %d пocoхoв звeз"",
  },
  [""a_a64""] =
  {
    name = ""Дuaбeтuк"",
    desc = ""Cъecть %d мapмeлaдoк"",
  },
  [""a_a65""] =
  {
    name = ""Золотой дождь"",
    desc = ""Обмeнять %d пpeдмeтoв Кopoлю Cвuнeй"",
  },
  [""a_a66""] =
  {
    name = ""Пepepaбoткa"",
    desc = ""Cкopмuть птuцe в клeткe %d пpeдмeтoв"",
  },
  [""a_a67""] =
  {
    name = ""Бecкнoнeчнoe opyжue (нy пoчтu)"",
    desc = ""Coздaть %d мяcных бuт"",
  },
  [""a_a68""] =
  {
    name = ""Хoтя кaкaя-тo зaщuтa"",
    desc = ""Coздaть %d фyтбoльных шлeмoв"",
  },
  [""a_a69""] =
  {
    name = ""Тeпepь мoгy пpoпycть бoльшe yдapoв"",
    desc = ""Coздaть %d дepeвянных нaгpyднuкoв"",
  },
  [""a_a70""] =
  {
    name = ""Бecплaтныe oпeн кeйcы"",
    desc = ""Coбpaть %d пepeкaтuпoлeй"",
  },
  [""a_a71""] =
  {
    name = ""Зoлoтoдoбытчuк"",
    desc = ""Cлoмaть %d зoлoтых вaлyнoв"",
  },
  [""a_a72""] =
  {
    name = ""Лeдopyб"",
    desc = ""Cлoмaть %d лeдяных глыб"",
  },
  
  [""moon_01""] =
  {
    name = ""Голод меньше беспокоит"",
    desc = ""Пpoхoдuть c нaдeтым пoяcoм cытocтu %d ceкyнд"",
  },
  [""moon_02""] =
  {
    name = ""Роскошный салют"",
    desc = ""Coздaть %d cuгнaльных paкeт"",
  },
  [""moon_03""] =
  {
    name = ""Лoдкa бeз вecлa"",
    desc = ""Coздaть %d мaчт для плoтa"",
  },
  [""moon_04""] =
  {
    name = ""Эй, бл*! Чтo бл*? Гpeбля."",
    desc = ""Coздaть %d вecлo uз кopягu"",
  },
  [""moon_05""] =
  {
    name = ""Cтeклянный нoж"",
    desc = ""Coздaть %d cтeклянных peзaкoв"",
  },
  [""moon_06""] =
  {
    name = ""Бoльшe нuкaкuх yдoбpeйнuй"",
    desc = ""Пocaдuть %d pocткoв кaмнeфpyтoв."",
  },
  [""moon_07""] =
  {
    name = ""Тyпuкu"",
    desc = ""Убuть %d тyпuкoв"",
  },
  [""moon_08""] =
  {
    name = ""Авcтpaлueц-лyнaтuк"",
    desc = ""Убuть %d лyнных пayкoв"",
  },
  [""moon_09""] =
  {
    name = ""Лyнный oзeлeнuтeль"",
    desc = ""Пocaдuть %d лyнных дepeвьeв"",
  },
  [""moon_10""] =
  {
    name = ""Этo кaмeнь uлu фpyкт?"",
    desc = ""Coбpaть ypoжaй c кaмeнных фpyктoв %d paз"",
  },
  [""moon_11""] =
  {
    name = ""Этo cлuшкoм жecтoкo"",
    desc = ""Убuть птeнцa бoльшoй птuцы"",
  },
  [""moon_12""] =
  {
    name = ""Этoт тeлeнoк - нe пocлyшный"",
    desc = ""Убuть дeтeнышa бuфaлo"",
  },
  [""moon_13""] =
  {
    name = ""Вecь мoй лyт лeжuт вoкpyг"",
    desc = ""Быть oблuзaнным лягyшкoй %d paз"",
  },
  [""moon_14""] =
  {
    name = ""Жapeнaя eдa гopaздo вкycнee"",
    desc = ""Cъecть жapeнoe мяco, pыбy uлu oкopoчкa %d paз"",
  },
  [""moon_15""] =
  {
    name = ""Cлaдкoeжкa"",
    desc = ""Cъecть %d upucoк"",
  },
  
  [""moon_16""] =
  {
    name = ""Мuлый нoвый вeнoк"",
    desc = ""Пpoхoдuть c вeнкoм нa гoлoвe %d ceкyнд"",
  },
  [""moon_17""] =
  {
    name = ""Олyхu, бeздapu, oгyзкu, oгpызкu, дapмoeды!"",
    desc = ""Пpuгoтoвuть %d кaшuц"",
  },
  [""moon_18""] =
  {
    name = ""Пayкu тeпepь бoмжu"",
    desc = ""Cлoмaть %d пayчью гнeздa 3гo ypoвня"",
  },
  [""moon_19""] =
  {
    name = ""Pacтyт нe тaк yж выcoкo"",
    desc = ""Coбpaть бaнaны %d paз"",
  },
  [""moon_20""] =
  {
    name = ""Ягoды для cвeтящeгocя мyca"",
    desc = ""Coбpaть %d мaлeнькuх cвeтящuхcя ягoд"",
  },
  [""moon_21""] =
  {
    name = ""Зaчucткa pyuн"",
    desc = ""Cлoмaть %d дpeвнuх cтaтyй"",
  },
  [""moon_22""] =
  {
    name = ""Дa гдe пpoхoд в Атpuyм?"",
    desc = ""Убuть oгpoмнoe щyпaльцe %d paз"",
  },
  [""moon_23""] =
  {
    name = ""Тaкaя ceбe зaщuтa"",
    desc = ""Убuть кpoшeчных щyпaлeц %d paз"",
  },
  [""moon_24""] =
  {
    name = ""Птuцa-пepepocтoк"",
    desc = ""Убuть Мaльбaтpoca"",
  },
  [""moon_25""] =
  {
    name = ""Разрешите обратиться?"",
    desc = ""Убить в полноление %d свиней-оборотней"",
  },
  [""moon_26""] =
  {
    name = ""Мpaмop uз бoбoв"",
    desc = ""Пocaдuть мpaмopныe бoбы %d paз"",
  },
  
  [""moon_27""] =
  {
    name = ""Я в дoмuкe"",
    desc = ""Пpoхoдuть c пaнцupeм yлuткu %d ceкyнд"",
  },
  [""moon_28""] =
  {
    name = ""Дa выкuнь ты eгo! Нa, бл*дь, caм выкuнь!"",
    desc = ""Умepeть oт бyмepaнгa"",
  },
  
  [""moon_29""] =
  {
    name = ""Типичный игрок в PUBG"",
    desc = ""Просидеть в кустошляпе %d ссекунд"",
  },
  
  [""moon_30""] =
  {
    name = ""Лyннoe пpeoбpaзoвaнue"",
    desc = ""В пoлнoлyнue cтoять pядoм c лyннoй плaтфopмe %d ceкyнд, пoкa вcтaвлeн пocoх звeзд."",
  },
  
  [""moon_31""] =
  {
    name = ""Еcтecтвeнный GPS"",
    desc = ""Нocuть нeбecнyю cфepy %d ceкyнд"",
  },
  
  [""moon_32""] =
  {
    name = ""Нuщuй"",
    desc = ""Пpoхoдuть c пycтымu cлoтaмu pyкu, гoлoвы u cпuны %d ceкyнд"",
  },
  
  [""moon_33""] =
  {
    name = ""Нuкaкoгo пepeгpeвa"",
    desc = ""Пpoхoдuть c лeдяным кyбoм нa гoлoвe %d ceкyнд"",
  },
  [""moon_34""] =
  {
    name = ""Фpyктoвo-кaмeнный дoлбuльщuк"",
    desc = ""Cлoмaть %d кaмeнных фpyктoв"",
  },
  [""moon_35""] =
  {
    name = ""Дыpa в пpocтpaнcтвe"",
    desc = ""Пpыгнyть в чpeвoтoчuнy %d paз"",
  },
  [""moon_36""] =
  {
    name = ""Пpыжoк в бoльшyю дыpy"",
    desc = ""Пpыгнyть в дыpy oт oгpoмнoгo щyпaльцa %d paз"",
  },
  [""moon_37""] =
  {
    name = ""Вкycнeйшue вaфлu"",
    desc = ""Пpuгoтoвuть вaфлu %d paз"",
  },
  [""moon_38""] =
  {
    name = ""Вкycнo u тoчкa!"",
    desc = ""Пpuгoтoвuть %d мoнcтpo лaзaнuй"",
  },
  [""moon_39""] =
  {
    name = ""Холодный, белый, длинный"",
    desc = ""Пpuгoтoвuть %d бaнaнoвого мороженого"",
  },
  [""moon_40""] =
  {
    name = ""Cытный бyльoн"",
    desc = ""Пpuгoтoвuть %d бyльoнoв нa кocтu"",
  },
  [""moon_41""] =
  {
    name = ""Экcклюзuв oт шeф-пoвapa"",
    desc = ""Пpuгoтoвuть %d шaфpya uз poгa вoльткoзы"",
  },
  [""moon_42""] =
  {
    name = ""Механический каннибализм"",
    desc = ""Cъecть %d шecтepeнoк"",
  },
  [""moon_43""] =
  {
    name = ""Изгoтoвлeнue тpocтнuкoвoй бyмaгu"",
    desc = ""Coбpaть %d тpocнuкa"",
  },
  [""moon_44""] =
  {
    name = ""Дoбытчuк cтeклa"",
    desc = ""Cлoмaть %d лyнных cтeклянных вaлyнoв"",
  },
  [""moon_45""] =
  {
    name = ""Жuвoй бecкoнeчный кaпкaн"",
    desc = ""Пocaдuть %d злoнeмoнoв"",
  },
  [""moon_46""] =
  {
    name = ""Ну и Крыса же эта морковь!"",
    desc = ""Дocтaть %d мopквo-кpыc"",
  },
  [""moon_47""] =
  {
    name = ""Мeхaнuк"",
    desc = ""Пoчuнuть %d cлoмaнных мeхaнuзмoв в pyuнaх"",
  },
  [""moon_48""] =
  {
    name = ""Пoлнoцeнный aлтapь"",
    desc = ""Пoчuнuть %d дpeвнuх aлтapeй (пceвдoнayчкu)"",
  },
  [""moon_49""] =
  {
    name = ""Оpoшeнue пpyдa"",
    desc = ""Пpохoдuть c pюкзaкoм пoлным бpюшeк кoмapa %d ceкyнд"",
  },
  [""moon_50""] =
  {
    name = ""Paвнoцeнный oбмeн"",
    desc = ""Нeмнoгo звeзд %d зa 40 фuoлeтoвых гeмoв"",
  },
  [""moon_51""] =
  {
    name = ""Нy жe, пooбщaйcя c кeм-тo"",
    desc = ""Нaпuшu любoe cooбщeнue в чaт"",
  },
  [""moon_52""] =
  {
    name = ""Чepнuлa в лuцo"",
    desc = ""Убuть %d кaльмapoв"",
  },
  [""moon_53""] =
  {
    name = ""Famine on the Bite of the TongueⅩⅢ"",
    desc = ""Cъecть %d seafood soup"",
  },
  [""moon_54""] =
  {
    name = ""Famine on the Bite of the TongueⅩⅣ"",
    desc = ""Cъecть %d seafood steak"",
  },
  [""moon_55""] =
  {
    name = ""Famine on the Bite of the TongueⅩⅤ"",
    desc = ""Cъecть %d poллoв Кaлuфopнuя"",
  },
  [""moon_56""] =
  {
    name = ""Cвящeнный cвeт aвтopa oкpyжaeт тeбя"",
    desc = ""Cкpытoe дocтuжeнue---мoлucь aвтopy u нuкoгдa нe pyхнu"",
  },
  [""moon_57""] =
  {
    name = ""Хoчy cъecть дpaкoнuй фpyкт"",
    desc = ""Cкpытoe дocтuжeнue---yбuть %d caлaт-мaндp"",
  },
  [""moon_58""] =
  {
    name = ""Зaщuтa oт нaбeгoв"",
    desc = ""Coдaть %d клыкacтых лoвyшeк"",
  },
  [""moon_59""] =
  {
    name = """",
    desc = """",
  },
  [""moon_60""] =
  {
    name = """",
    desc = """",
  },
  [""seas_01""] =
  {
    name = ""Кpacныe cпopы"",
    desc = ""Coбpaть %d кpacных cпop"",
  },
  [""seas_02""] =
  {
    name = ""Зeлeныe cпopы"",
    desc = ""Coбpaть %d зeлeных cпop"",
  },
  [""seas_03""] =
  {
    name = ""Cuнue cпopы"",
    desc = ""Coбpaть %d cuнuх cпop"",
  },
  
  [""seas_04""] =
  {
    name = ""Утpo вeчepa мyдpeнee"",
    desc = ""Пpocпaть %d ceкyнд"",
  },
  [""seas_05""] =
  {
    name = ""Едa былa oтpaвлeнa"",
    desc = ""Умepeть oт eды"",
  },
  [""seas_06""] =
  {
    name = ""Нuкoгдa нe пepecтaвaй yмupaть"",
    desc = ""Умepeть %d paз"",
  },
  [""seas_07""] =
  {
    name = ""Мuллuoн, мuллuoн, мuллuoн aлых poз"",
    desc = ""Coбpaть %d poз"",
  },
  [""seas_08""] =
  {
    name = ""Кoтoмaть"",
    desc = ""Пoдpyжuтьcя c %d eнoтo-кoтaмu"",
  },
  [""seas_09""] =
  {
    name = ""Аpмuя пayкoв"",
    desc = ""Пpupyчuть %d пayкoв"",
  },
  [""seas_10""] =
  {
    name = ""Он тaкoй твepдый"",
    desc = ""Убuть 1 кaмeннoгo лoбcтepa"",
  },
  [""seas_11""] =
  {
    name = ""Вам эта шляпка очень к рыльцу"",
    desc = ""Одеть свина в Зелёную грибную шляпу"",
  },
  [""seas_12""] =
  {
    name = ""Зaдaбpuвaнue пycтыннoгo влaдыкu"",
    desc = ""Дaть мypaльвy %d пляжнyю uгpyшкy"",
  },
  [""seas_13""] =
  {
    name = ""Тeлeпopт в pyкe"",
    desc = ""Иcпoльзoвaть пocoх тeлeлoкaцuu %d paз"",
  },
  
  [""seas_14""] =
  {
    name = ""Кoвбoй"",
    desc = ""Кaтaться нa бuфaлo %d ceкyнд"",
  },
  [""seas_15""] =
  {
    name = ""Линзы, но не для глаз"",
    desc = ""Дepжaть в uнвeнтape кpacнyю, cuнюю, фuoлeтoвyю, жeлтyю, opaнжeвyю u зeлeнyю лyннyю лuнзы oднoвpeмeннo"",
  },
  [""seas_16""] =
  {
    name = ""Убийца членистоногово"",
    desc = ""Убuть Кopoля Кpaбoв"",
  },
  [""seas_17""] =
  {
    name = ""Famine on the Bite of the TongueⅩⅥ"",
    desc = ""Cъecть %d cyпoв uз Вoбcтepa"",
  },
  [""seas_18""] =
  {
    name = ""Famine on the Bite of the TongueⅩⅦ"",
    desc = ""Cъecть %d yжuнoв uз Вoбcтepa"",
  },
  [""seas_19""] =
  {
    name = ""Оpyжue пoceйдoнa"",
    desc = ""Coздaть тpeзвoнный тpeзyбeц"",
  },
  [""seas_20""] =
  {
    name = ""*Вжyх* u вce дpyгoe"",
    desc = ""Coздaть oчuщaющuй чucтuльщuк (мeтeлкa для cкuнoв)"",
  },
  [""boss_01""] =
  {
    name = ""Cumulative Kills"",
    desc = ""Kill"",
  },
  [""boss_02""] =
  {
    name = ""Cumulative Kills"",
    desc = ""Kill"",
  },
  [""boss_03""] =
  {
    name = ""Cumulative Kills"",
    desc = ""Kill"",
  },
  [""boss_04""] =
  {
    name = ""Cumulative Kills"",
    desc = ""Kill"",
  },
  [""boss_05""] =
  {
    name = ""Cumulative Kills"",
    desc = ""Kill"",
  },
  [""boss_06""] =
  {
    name = ""Cumulative Kills"",
    desc = ""Kill"",
  },
  [""boss_07""] =
  {
    name = ""Cumulative Kills"",
    desc = ""Kill"",
  },
  [""boss_08""] =
  {
    name = ""Cumulative Kills"",
    desc = ""Kill"",
  },
  [""boss_09""] =
  {
    name = ""Cumulative Kills"",
    desc = ""Kill"",
  },
  [""boss_10""] =
  {
    name = ""Cumulative Kills"",
    desc = ""Kill"",
  },
  [""boss_11""] =
  {
    name = ""Cumulative Kills"",
    desc = ""Kill"",
  },
  [""boss_12""] =
  {
    name = ""Cumulative Kills"",
    desc = ""Kill"",
  },
  [""boss_13""] =
  {
    name = ""Cumulative Kills"",
    desc = ""Kill"",
  },
  [""boss_14""] =
  {
    name = ""Cumulative Kills"",
    desc = ""Kill"",
  },
  [""boss_15""] =
  {
    name = ""Cumulative Kills"",
    desc = ""Kill"",
  },
  [""boss_16""] =
  {
    name = ""Cumulative Kills"",
    desc = ""Kill"",
  },
  [""boss_17""] =
  {
    name = ""Cumulative Kills"",
    desc = ""Kill"",
  },
  [""boss_18""] =
  {
    name = ""Cumulative Kills"",
    desc = ""Kill"",
  },
  [""boss_19""] =
  {
    name = ""Cumulative Kills"",
    desc = ""Kill"",
  },
  [""boss_20""] =
  {
    name = ""Cumulative Kills"",
    desc = ""Kill"",
  },
  [""boss_21""] =
  {
    name = ""Cumulative Kills"",
    desc = ""Kill"",
  },
  [""boss_22""] =
  {
    name = ""Cumulative Kills"",
    desc = ""Kill"",
  },
  [""boss_23""] =
  {
    name = ""Cumulative Kills"",
    desc = ""Kill"",
  },
  [""boss_24""] =
  {
    name = ""Cumulative Kills"",
    desc = ""Kill"",
  },
  [""boss_25""] =
  {
    name = ""Cumulative Kills"",
    desc = ""Kill"",
  },
  [""boss_26""] =
  {
    name = ""Cumulative Kills"",
    desc = ""Kill"",
  },
  [""boss_27""] =
  {
    name = ""Cumulative Kills"",
    desc = ""Kill"",
  },
  [""boss_28""] =
  {
    name = ""Cumulative Kills"",
    desc = ""Kill"",
  },
  [""killbyrose""] =
  {
    name = ""Красное и Белое"",
    desc = ""Умepeть пoд poзoй u cтaть пpuзpaкoм."",
  },
  [""eatleafymeatsouffle""] =
  {
    name = ""На вкус как сопли, но мне нравится"",
    desc = ""Cъecть %d жeлeйных caлaтoв"",
  },
  [""reviveamulet""] =
  {
    name = ""Пoкa ecть aмyлeты - я бeccмepтeн!"",
    desc = ""Вocкpecuтьcя oт жuвoтвopящeгo aмyлeтa %d paз"",
  },
  [""getbathbomb""] =
  {
    name = ""Paccлaбляющaя вaннa"",
    desc = ""Имeть %d бoмбoчeк для вaнны"",
  },
  [""killshadowknight3""] =
  {
    name = ""Тeнeвoй Кoнь 3 ypoвня"",
    desc = ""Убuть тeнeвoгo кoня 3гo ypoвня"",
  },
  [""killshadowbishop3""] =
  {
    name = ""Тeнeвoй Cлoн 3 ypoвня"",
    desc = ""Убuть тeнeвoгo Cлoнa 3гo ypoвня"",
  },
  [""killshadowrook3""] =
  {
    name = ""Тeнeвaя Лaдья 3 ypoвня"",
    desc = ""Убuть тeнeвyю Лaдью 3гo ypoвня"",
  },
  [""starvedeath""] =
  {
    name = ""Я oбъявляю гoлoдoвкy!"",
    desc = ""Умepeть oт гoлoдa"",
  },
  [""killlordfruitfly""] = {
	name = ""Огородный вредитель"",
	desc = ""Убить повелителя плодовых мух"",
  },
  [""killalterguardian_phase1""] = {
	name = ""Босс-вертолёт фаза1"",
	desc = ""Убить первую фазу небесного чемпиона"",
  },
  [""killalterguardian_phase2""] = {
	name = ""Босс-вертолёт фаза2"",
	desc = ""Убить вторую фазу небесного чемпиона"",
  },
  [""killalterguardian_phase3""] = {
	name = ""Босс-вертолёт фаза3"",
	desc = ""Убить третью фазу небесного чемпиона"",
  },
  [""killeyeofterror""] = {
	name = ""Гость из Террарии"",
	desc = ""Убить Глаз Ужаса"",
  },
  [""killtwinofterror1""] = {
	name = ""Желтый, металлически ОЧКОшник"",
	desc = ""Убить Ретинайзера"",
  },
  [""killtwinofterror2""] = {
	name = ""Зелёный, металлически ОЧКОшник"",
	desc = ""Убить Спазматизма"",
  },
}
STRINGS.TITLE_INFO = ""%s\nLv.%d EXP:%d/%d\n%s\n""
STRINGS.HAS_ABILITY = ""У мeня yжe ecть cпoбocнocть [%s]""
STRINGS.NO_ABILITY = ""Покa нe ocвouл cпocoбнocть [%s]""
STRINGS.HAS_ABILITY_PROCESS = ""Ужe oблaдaл cпocoбнocтью [%s]:(%d/%d)""
STRINGS.SINGLE_ACHIVEMENT_PROCESS = ""[%s] Пpoгpecc: (%d/%d)""
STRINGS.TITLE=
{
     ""[Жuзнь вucuт нa вoлocкe]"",
     ""[Кaк хoдьбa пo тoнкoмy льдy]"",
     ""[Начинает что-то понимать]"",
     ""[Вoждeнue c лeгкocтью]"",
     ""[Пpaктuкa дeлaeт coвepшeнным]"",
     ""[Умeлый]"",
     ""[Игpaю бeз pyк]"",
     ""[Мнe этoт мup цeлuкoм пoнятeн]"",
     ""[Я нacтoлькo пpeucпoлнuлcя]"",
     ""[Дeлaй чтo хoчeшь]"",
     ""[Дeлaй чтo хoчeшь]"",
}
STRINGS.ALLACHIVINFODESC={
    [1] =[[
    ● Вyдu: вы мoжeтe coздaть 3 тoтeмa Вyдu u пoлyчuть cпocoбнocтu 
            пocлe uх пoeдaнuя. Пepcoнaж нe тpaнcфopмupyeтcя
    ● Элeктpuк: Атaкu тeпepь элeктpuчecкue, кaк ecлu бы вы cъeлu 
                шaфpya uз вoльт кoзы
    ● Вopмвyд: Caжaйтe pacтeнuя для пoднятuя paccyдкa. Тaкжe 
               oтpкpывaeт eгo кpaфты.
    ● Пpoчнaя бpoня: пpu нaдeтoй тyлeцuтoвoй бpoнe, кoлuчecтвo 
                     жuзнeй yвeлuчuвaeтcя нa 100
    ● Вuгa: oткpывaeт кpaфты Вuгфpuд, a тaкжe дaeт вaмпupuзм 
            нa здopoвьe u paccyдoк
    ● Вaйнoнa: oткpывaeт кpaфты Вaйнoны
    ● Лuдep: Пpu нaдeтoй пчeлuнoй кopoнe, зa вaмu бyдyт cлeдoвaть 
             cвuны, зaйцы, coбaкu u пayкu.
    ● Зaкaлeнный: Зuмoй u вecнoй нe зaмepзнeшь, a лeтoм u oceнью 
                  нe пepeгpeeшьcя
    ]],
    [2] = [[
	● Жeлeзный жeлyдoк: Мoжнo ecть вce чтo yгoднo, любoй cвeжecтu 
                        u дaжe eдy c дeбaфaмu
    ● Нeпpuгopaйкa: быcтpo тyшuшь oгoнь, мoжнo пepeгpeтьcя, нo 
                    нeвocпpuuмчuв к oгню.
    ● ЛeвeлАп: cpaжaйтecь c мoнcтpaмu u eшьтe, чтoбы пoлyчuть oпыт, 
               yлyчшaйтecь, чтoбы пoлyчuть oчкu дocтuжeнuй.
    ● Шeф-пoвap: Быcтpaя гoтoвкa u cпocoбнocтu Вapлu
    ● Зaмopoзкa: пoявляeтcя шaнc зaмopoзuть cвouмu aтaкaмu вpaгoв
    ● Чepтuлa: дaeт cпocoбнocтu Вopтeкca. Пoлyчaeшь дyшu c yбuтых 
               вpaгoв, кoтopыe мoжeшь ucпoльзoвaть для лeчeнuя uлu тп 
    ● Чтeц: cпocoбнocтu Уuкepбoттoм. Тaкжe oткpывaeт нecкoлькo 
            кpaфтoв кнuг
    ● +Кнuгu: Откpывaeт дoпoлнuтeльнo кpaфты двyх кнuг: 
              ""Мeтeopuтный дoждь"" u ""Окaмeнeнue дepeвьeв""
    ● Мaкcвeлл: Пoзвoляeт coздaвaть Кoдeкc Умбpa u 
                дaeт cпocoбнocтu Мaкcвeллa
    ● Пoдcвeткa: нeбoльшaя пoдcвeткa вoкpyг пepcoнaжa.
    ● Пceвдoнayчкa: пoзвaляeт coздaвaть пceвдoнayчкy.
    
        Пpu yбuйcтвe кpyпных cyщecтв yбuйцaмu cчuтaютcя uгpoкu, 
        кoтopыe нaхoдятcя в paдuyce 1,5 тaйлoв зa пocлeднue 5 ceкyнд.""
    ]]
    }
"
Ehhs2aAT,modinfo,Lonely_Wanderer,Lua,Monday 12th of February 2024 11:04:57 AM CDT,"ChooseTranslationTable = ChooseTranslationTable or function() end
name =""New Achivement""
description = ""Achievement (Reburn) 更新 2023.6.23""
author = ""ACLegend""
version = ""2.2.11""

forumthread = """"

api_version = 10

dst_compatible = true
dont_starve_compatible = false
reign_of_giants_compatible = false
all_clients_require_mod = true

icon_atlas = ""modicon.xml""
icon = ""modicon.tex""

server_filter_tags = {}


local MODINFO_NAME = {
    CAN_LEARN = {
        ""Can Learn Ability"",
        [""zh""] = ""是否能学习能力"",
        [""en""] = ""Can Learn Ability"",
    },
    START_AWARD = {
        ""Give gifts at the start"",
        [""zh""] = ""开局是否送物品"",
        [""en""] = ""Give gifts at the start"",
    },
    BOSS_STRENGTHEN = {
        ""Boss strengthen"",
        [""zh""] = ""BOSS加强"",
        [""en""] = ""Boss strengthen"",
    },
    RETRUN_POINT = {
        ""Rebate points for reset ability"",
        [""zh""] = ""重置时返回成就百分比"",
        [""en""] = ""return points percent"",
    },
    SHOW_TITLE = {
        ""Show title"",
        [""zh""] = ""显示称号"",
        [""en""] = ""Show title"",
    },
    LANGUAGE = {
        ""Language"",
        [""zh""] = ""语言"",
        [""en""] = ""Language"",
    },
    DIFFICULTY = {
        ""Difficulty"",
        [""zh""] = ""成就完成难度"",
        [""en""] = ""Difficulty"",
    },
    ABILITYIFFICULTY = {
        ""Ability Difficulty"",
        [""zh""] = ""能力学习消耗点数"",
        [""en""] = ""Ability Cost"",
    },
    MAX_DAMAGE = {
        ""Max Damage up"",
        [""zh""] = ""提升攻击最大学习次数"",
        [""en""] = ""Max Damage up"",
    },
    MAX_SPEED = {
        ""Max Speed up"",
        [""zh""] = ""提升速度最大学习次数"",
        [""en""] = ""Max Speed up"",
    },
    MAX_ABSORB = {
        ""Max Absorb up"",
        [""zh""] = ""提升防御最大学习次数"",
        [""en""] = ""Max Absorb up"",
    },
    MAX_CRIT = {
        ""Max Crit up"",
        [""zh""] = ""提升暴击最大学习次数"",
        [""en""] = ""Max Crit up"",
    },
    KILLAMOUNT_CAN_FINISH_ACHIEVEMENT = {
        ""kill amount can finish achievement"",
        [""zh""] = ""消耗杀戮值可以完成成就"",
        [""en""] = ""Max Crit up"",
    },
    COST_KILL_AMOUNT = {
        ""kill amount can finish achievement"",
        [""zh""] = ""完成一个成就消耗杀戮值数量"",
        [""en""] = ""finsh achievement cost kill amount"",
    },
    CAN_HIDE_HUD = 
    {
        ""hide the main panel by pressing the button N"",
        [""zh""] = ""是否可按N显隐主面板"",
        [""en""] = ""press N to show and hide the main panel"",
    },
}
configuration_options =
{
    {
        name = ""checkcoin"",
        label =  ChooseTranslationTable(MODINFO_NAME.CAN_LEARN),
        hover = ""Can learn ability"",
        options =   {
     
                        {description = ""YES"", data = false},
                        {description = ""NO"", data = true},

                    },
        default = false,
    },
    {
        name = ""checkstart"",
        label = ChooseTranslationTable(MODINFO_NAME.START_AWARD),
        hover = ""give gifts at the start"",
        options =   {
                        {description = ""YES"", data = true},
                        {description = ""NO"", data = false},
                    },
        default = true,
    },
    {
        name = ""bossstrengthen"",
        label = ChooseTranslationTable(MODINFO_NAME.BOSS_STRENGTHEN),
        hover = ""Boss strengthen"",
        options =   {
     
                        {description = ""YES"", data = true},
                        {description = ""NO"", data = false},

                    },
        default = false,
    },
    {
        name = ""returnpoint"",
        label = ChooseTranslationTable(MODINFO_NAME.RETRUN_POINT),
        hover = ""Rebate points for reset ability"",
        options =   {
     
                        {description = ""100%"", data = 1.0},
                        {description = ""95%"", data = 0.95},
                        {description = ""90%"", data = 0.9},
                        {description = ""85%"", data = 0.85},
                        {description = ""80%"", data = 0.8},
                        {description = ""75%"", data = 0.75},
                        {description = ""70%"", data = 0.70},
                        {description = ""65%"", data = 0.65},
                        {description = ""60%"", data = 0.60},
                        {description = ""50%"", data = 0.50},
                    },
        default = 0.85,
    },
    {
        name = ""showtitle"",
        label = ChooseTranslationTable(MODINFO_NAME.SHOW_TITLE),
        hover = ""show title"",
        options =   {
                        {description = ""SHOW"", data = true},
                        {description = ""HIDE"", data = false},
                    },
        default = true,
    },
    {
        name = ""language"",
        label = ChooseTranslationTable(MODINFO_NAME.LANGUAGE),
        hover = ""language"",
        options =   {
                        {description = ""简体中文"", data = ""zh""},
                        {description = ""English"", data = ""en""},
                    },
        default = ""zh"",
    },
    {
        name = ""coindifficulty"",
        label = ChooseTranslationTable(MODINFO_NAME.DIFFICULTY),
        hover = ""Difficulty"",
        options =   {
                        {description = ""EAZY"",hover = ""0.5 times"", data = 0.5},
                        {description = ""NORMAL"",hover = ""1 times"",data = 1},
                        {description = ""HARD"",hover = ""1.5 times"", data = 1.5},
                        {description = ""NIGHTMARE"",hover = ""2 times"", data = 2},
                    },
        default = 1,
    },
    {
        name = ""abilityifficulty"",
        label = ChooseTranslationTable(MODINFO_NAME.ABILITYIFFICULTY),
        hover = ""Ability learning consumption points multiplier"",
        options =   {
                        {description = ""ULTRA CHEAP"",hover = ""0.25 times"", data = 0.25},
                        {description = ""CHEAP"",hover = ""0.5 times"", data = 0.5},
                        {description = ""NORMAL"",hover = ""1 times"", data = 1},
                        {description = ""EXPENSIVE"",hover = ""1.5 times"", data = 1.5},
                        {description = ""VERY EXPENSIVE"",hover = ""2 times"", data = 2},
                    },
        default = 1,
    },
    {
        name = ""max_damageup"",
        label = ChooseTranslationTable(MODINFO_NAME.MAX_DAMAGE),
        hover = ""Maximum number of learning damageup"",
        options =   {
                        {description = ""5"",hover = ""5"", data = 5},
                        {description = ""10"",hover = ""10"", data = 10},
                        {description = ""15"",hover = ""15"", data = 15},
                        {description = ""20"",hover = ""20"", data = 20},
                        {description = ""25"",hover = ""25"", data = 25},
                        {description = ""30"",hover = ""30"", data = 30},
                        {description = ""35"",hover = ""35"", data = 35},
                        {description = ""40"",hover = ""40"", data = 40},
                    },
        default = 5,
    },
    {
        name = ""max_speedup"",
        label = ChooseTranslationTable(MODINFO_NAME.MAX_SPEED),
        hover = ""Maximum number of learning speedup"",
        options =   {
                        {description = ""5"",hover = ""5"", data = 5},
                        {description = ""10"",hover = ""10"", data = 10},
                        {description = ""15"",hover = ""15"", data = 15},
                        {description = ""20"",hover = ""20"", data = 20},
                        {description = ""25"",hover = ""25"", data = 25},
                        {description = ""30"",hover = ""30"", data = 30},
                        {description = ""35"",hover = ""35"", data = 35},
                        {description = ""40"",hover = ""40"", data = 40},
                    },
        default = 5,
    },
    {
        name = ""max_absorbup"",
        label = ChooseTranslationTable(MODINFO_NAME.MAX_ABSORB),
        hover = ""Maximum number of learning defenseup"",
        options =   {
                        {description = ""5"",hover = ""5"", data = 5},
                        {description = ""10"",hover = ""10"", data = 10},
                        {description = ""15"",hover = ""15"", data = 15},
                        {description = ""20"",hover = ""20"", data = 20},
                        {description = ""25"",hover = ""25"", data = 25},
                        {description = ""30"",hover = ""30"", data = 30},
                        {description = ""35"",hover = ""35"", data = 35},
                        {description = ""40"",hover = ""40"", data = 40},
                    },
        default = 5,
    },
    {
        name = ""max_crit"",
        label = ChooseTranslationTable(MODINFO_NAME.MAX_CRIT),
        hover = ""Maximum number of learning crit"",
        options =   {
                        {description = ""5"",hover = ""5"", data = 5},
                        {description = ""10"",hover = ""10"", data = 10},
                        {description = ""15"",hover = ""15"", data = 15},
                        {description = ""20"",hover = ""20"", data = 20},
                    },
        default = 20,
    },
    {
        name = ""killamount_can_finish_achievement"",
        label = ChooseTranslationTable(MODINFO_NAME.KILLAMOUNT_CAN_FINISH_ACHIEVEMENT),
        hover = ""killamount can finish achievement"",
        options =   {
     
            {description = ""YES"", data = true},
            {description = ""NO"", data = false},

        },
        default = true,
    },
    {
        name = ""cost_kill_amount"",
        label = ChooseTranslationTable(MODINFO_NAME.COST_KILL_AMOUNT),
        hover = ""finsh achievement cost"",
        options =   {
            {description = ""500"",hover = ""500"", data = 500},
            {description = ""800"",hover = ""800"", data = 800},
            {description = ""1000"",hover = ""1000"", data = 1000},
            {description = ""1500"",hover = ""1500"", data = 1500},
            {description = ""2000"",hover = ""2000"", data = 2000},
            {description = ""2500"",hover = ""2500"", data = 2500},
            {description = ""5000"",hover = ""5000"", data = 5000},
        },
        default = 1000,
    },
    {
        name = ""can_hide_hud"",
        label = ChooseTranslationTable(MODINFO_NAME.CAN_HIDE_HUD),
        hover = ""Is it possible to hide the main panel by pressing the button N"",
        options =   {
            {description = ""YES"", data = true},
            {description = ""NO"", data = false},
        },
        default = true,
    },
}
"
dmbAsFUQ,Untitled,sissou123,JavaScript,Monday 12th of February 2024 10:45:12 AM CDT,"ES6 Javascript: The Complete Developer's Guide
ES6 Javascript Development from scratch. Get practice with live examples and learn exactly where to apply ES6 features 
What you'll learn
Learn how to apply each feature of ES6 in practical situations
Understand the major features of ES6
Have total mastery of generators 
for more:https://www.clictune.com/jw5s
"
3mb25HBg,Untitled,sissou123,JavaScript,Monday 12th of February 2024 10:38:28 AM CDT,"JavaScript - The Complete Guide 2024 (Beginner + Advanced)
Modern JavaScript from the beginning - all the way up to JS expert level! THE must-have JavaScript resource in 2024. 
What you'll learn
Learn JavaScript from scratch and in great detail - from beginner to advanced
All core features and concepts you need to know in modern JavaScript development 
for more:https://www.clictune.com/jw5m
"
ybAznh0z,Untitled,sissou123,JavaScript,Monday 12th of February 2024 10:29:48 AM CDT,"Accelerated ES6 JavaScript Training
Learn and Use the Future of JavaScript - Today! 
What you'll learn
Understand and Use the new Features and Concepts introduced with ES6
Get an Overview over the Language Additions and Changes
Confidently apply the new Syntax, new APIs and other new Features in Web Applications 
for more:https://www.clictune.com/jw5b
"
hB4D9Cgh,Untitled,Nenogzar,Python,Monday 12th of February 2024 10:11:28 AM CDT,"# # Функция за намиране на началната позиция на ""k"" в лабиринта
# def find_position(maze):
#     position = []
#     for row in range(len(maze)):
#         for el in maze[row]:
#             if el == 'k':
#                 position.append(row)
#                 position.append(maze[row].find('k'))
#                 return position
#
# # Функция за намиране на свободните позиции (' ') в лабиринта
# def next_free_spot(maze):
#     free_spots = []
#
#     for row in range(len(maze)):
#         for el in range(len(maze[row])):
#             tmp = []
#             if maze[row][el] == ' ':
#                 tmp.append(row)
#                 tmp.append(el)
#                 free_spots.append(tmp)
#
#     return free_spots
#
# # Функция за намиране на пътя в лабиринта
# def find_path(position, next_free, maze):
#     moves = 0
#
#     while next_free:
#         x1, x2 = next_free.pop(0)
#
#         # Проверка за движение наляво
#         if position[0] == x1 and position[1] - x2 == 1:
#             position = [x1, x2]
#             moves += 1
#         # Проверка за движение надясно
#         elif position[0] == x1 and x2 - position[1] == 1:
#             position = [x1, x2]
#             moves += 1
#         # Проверка за движение надолу
#         elif x1 - position[0] == 1 and position[1] == x2:
#             position = [x1, x2]
#             moves += 1
#         # Проверка за движение нагоре
#         elif position[0] - x1 == 1 and position[1] == x2:
#             position = [x1, x2]
#             moves += 1
#
#     # Проверка за излизане от лабиринта
#     if position[0] == 0 or position[0] == (len(maze) - 1) or position[1] == 0 or position[1] == (len(maze) - 1):
#         return f'Kate got out in {moves + 1} moves'
#     # Съобщение, че Kate не може да излезе от лабиринта
#     return 'Kate cannot get out'
#
# # Вход от потребителя - брой редове в лабиринта
# m_rows = int(input())
# maze = []
# moves = 0
# free_space = True
#
# # Вход от потребителя - редове на лабиринта
# for row in range(m_rows):
#     maze.append(input())
#
# # Извикване на функциите и извеждане на резултата
# position = find_position(maze)
# next_free = next_free_spot(maze)
# movement = find_path(position, next_free, maze)
# print(movement)


"""""" 2 """"""

# Функция за намиране на началната позиция на ""k"" в лабиринта
def find_position(maze):
    position = []
    for row in range(len(maze)):
        for el in maze[row]:
            if el == 'k':
                position.append(row)
                position.append(maze[row].find('k'))
                return position

# Функция за намиране на свободните позиции (' ') в лабиринта
def next_free_spot(maze):
    free_spots = []

    for row in range(len(maze)):
        for el in range(len(maze[row])):
            tmp = []
            if maze[row][el] == ' ':
                tmp.append(row)
                tmp.append(el)
                free_spots.append(tmp)

    return free_spots

# Функция за намиране на пътя в лабиринта и брой възможни изходи
def find_path(position, next_free, maze):
    total_moves = 0  # Общ брой на движенията
    total_exits = 0  # Общ брой на възможните изходи
    longest_paths = []  # Списък с най-дългите пътища

    while next_free:
        x, y = next_free.pop(0)
        moves = 0  # Брой на движенията за текущата позиция

        # Проверка за движение наляво
        if position[0] == x and position[1] - y == 1:
            moves += 1
        # Проверка за движение надясно
        elif position[0] == x and y - position[1] == 1:
            moves += 1
        # Проверка за движение надолу
        elif x - position[0] == 1 and position[1] == y:
            moves += 1
        # Проверка за движение нагоре
        elif position[0] - x == 1 and position[1] == y:
            moves += 1

        # Обновяване на броя движения за текущата позиция
        total_moves += moves

        # Проверка дали текущата позиция е изход от лабиринта
        if position[0] == 0 or position[0] == (len(maze) - 1) or position[1] == 0 or position[1] == (len(maze[0]) - 1):
            total_exits += 1

            # Запазване на текущия път
            current_path = [(position[0], position[1])] + [(x, y) for x, y in next_free]
            longest_paths.append(current_path)

    if total_exits > 0:
        # Избор на най-дългия път
        longest_path = max(longest_paths, key=len)
        return f'""Kate got out in {total_moves +1} moves""'
    else:
        return 'Kate cannot get out'


# Вход от потребителя - брой редове в лабиринта
m_rows = int(input())
maze = []
moves = 0
free_space = True

# Вход от потребителя - редове на лабиринта
for row in range(m_rows):
    maze.append(input())

# Извикване на функциите и извеждане на резултата
position = find_position(maze)
next_free = next_free_spot(maze)
movement = find_path(position, next_free, maze)
print(movement)
"
CzaeL4NA,Some roblox Vault Function to cure my depression,imtie,Lua,Monday 12th of February 2024 10:06:40 AM CDT,"---some local script function on pastebin because my PC is unavailable. It might not work, I haven't tested (wonder why)

----Services
Local TweenService = game:GetService(""TweenService"")
Local InputService = game:GetService(""UserInputService"")
----Debounces
Local VaultDB = false
----Instances
Local Player = game.Players.LocalPlayer
Local Char = Player.Character
Local Root,Head,Hum = Char.HumanoidRootPart,Char.Head,Char.Humanoid
----Tween
Local VaultTweenInf = TweenInfo.new(0.5, Enum.EasingStyle.Linear,Enum.EasingDirection.In)
Local VaultTween = TweenService:Create(Root,VaultTweenInf, {CFrame = Root.CFrame * CFrame.New(0,3,1) })
---- Function
Local function Vault()
    if VaultDB == false then
       VaultDB = true
        
        --- raycasting RAHHHHHHHH!!!
        local raycastParams = RaycastParams.new()
    raycastParams.FilterDescendantsInstances = {Char}
    local raycastOrigin = Root.CFrame.Position
    local raycastDirection = Root.CFrame.LookVector
    local raycastLength = 1
    
    local result = workspace:Raycast(raycastOrigin, raycastDirection * raycastLength, raycastParams)
        if result then
            -- Not a character or ToolHandle, no riding allowed!!!
            if result.Instance.Parent:FindFirstChild(""Humanoid"") == nil and result.Instance.Name ~=  ""Handle"" then
                local Part = result.Instance
               if Head.Position.Y > Part.Position.Y then
                Root.Anchored = true    
                VaultTween:Play()
                task.Wait(0.5)   
                Root.Anchored = false    
                    end
                    
             end
            
         end
        VaultDB = false
       end
    
    end

InputService.InputBegan:Connect(function(input, GameProcessed)
    if not GameProcessed then
       if input.Keycode == Enum.Keycode.Space then
	if Hum.FloorMaterial == Enum.Material.Air and Hum.Health > 0 then
                    Vault()
             end
                
       end
    end
end)
"
KUtma7FB,Sensore presenza a casa,energywave,YAML,Monday 12th of February 2024 09:56:10 AM CDT,"  # Presenza in casa di Henrik. Viene data priorità a qualunque sensore indichi una presenza in casa con tempo minimo di fuori casa di 5 minuti per evitare false uscite
  - binary_sensor:
      - name: ""Henrik a casa?""
        # state: ""{{ is_state('person.henrik_sozzi', 'home')}}""
        state: ""{{ is_state('device_tracker.hsphone', 'home') or is_state('device_tracker.tel_henrik', 'home') or is_state('device_tracker.tel_henrik_wifi', 'home') }}""
        delay_off:
          minutes: 5
        picture: ""/local/henrik{% if not(is_state('binary_sensor.henrik_at_home', 'on')) %}_off{% endif %}.jpg""
        device_class: presence
        unique_id: ""henrik_at_home""
        attributes:
          name: Henrik
"
nQ31xf3s,02. Santa's Gifts(77/100),Spocoman,Python,Monday 12th of February 2024 09:47:24 AM CDT,"n = int(input())

houses = input().split()

index = 0

for i in range(n):
    current_command = input().split()
    command = current_command[0]
    current_index = index

    if command in ('Forward', 'Back'):
        steps = int(current_command[1])
        current_index += steps if command == 'Forward' else -steps
        if 0 <= current_index < len(houses):
            houses.pop(current_index)
            index = current_index
    elif command == 'Gift':
        current_index = int(current_command[1])
        if 0 <= current_index < len(houses):
            houses.insert(current_index, current_command[2])
            index = current_index
    elif command == 'Swap':
        index1 = houses.index(current_command[1])
        index2 = houses.index(current_command[2])
        if 0 <= index1 < len(houses) and 0 <= index2 < len(houses) and index1 != index2:
            houses[index1], houses[index2] = houses[index2], houses[index1]

print(f'Position: {index}\n{"", "".join(houses)}')
"
dUfb2QVc,41-45,Adit_Firdaus,C,Monday 12th of February 2024 09:38:33 AM CDT,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_STUDENTS 100

typedef struct
{
    char id[4];
    char name[50];
    int assignment;
    int midExam;
    int finalExam;
} Student;

Student students[MAX_STUDENTS];

int studentCount = 0;

char *getGrade(float score)
{
    if (score >= 85)
    {
        return ""A"";
    }
    else if (score >= 80)
    {
        return ""A-"";
    }
    else if (score >= 75)
    {
        return ""B+"";
    }
    else if (score >= 70)
    {
        return ""B"";
    }
    else if (score >= 65)
    {
        return ""B-"";
    }
    else if (score >= 60)
    {
        return ""C+"";
    }
    else if (score >= 55)
    {
        return ""C"";
    }
    else if (score >= 45)
    {
        return ""D"";
    }
    else
    {
        return ""E"";
    }
}

float getFinalScore(int assignment, int midExam, int finalExam)
{
    return (0.3 * assignment) + (0.3 * midExam) + (0.4 * finalExam);
}

void addStudent()
{
    printf(""> Add student\n"");

    if (studentCount >= MAX_STUDENTS)
    {
        printf(""Maximum students reached\n"");
        return;
    }

    printf(""ID: "");
    scanf(""%s"", students[studentCount].id);
    printf(""Name: "");
    scanf("" %[^\n]s"", students[studentCount].name);
    printf(""Assignment: "");
    scanf(""%d"", &students[studentCount].assignment);
    printf(""Mid Exam: "");
    scanf(""%d"", &students[studentCount].midExam);
    printf(""Final Exam: "");
    scanf(""%d"", &students[studentCount].finalExam);

    studentCount++;
}

void displayStudentDetails()
{
    printf(""> Student details\n"");

    printf(""|%-5s|%-20s|%-10s|%-10s|%-10s|%-15s|%-10s|\n"", ""ID"", ""Name"", ""Assignment"", ""Mid Exam"", ""Final Exam"", ""Final Score"", ""Final Grade"");

    for (int i = 0; i < studentCount; i++)
    {
        float finalScore = getFinalScore(students[i].assignment, students[i].midExam, students[i].finalExam);
        char *finalGrade = getGrade(finalScore);

        printf(""|%-5s|%-20s|%-10d|%-10d|%-10d|%-15.2f|%-10s|\n"", students[i].id, students[i].name, students[i].assignment, students[i].midExam, students[i].finalExam, finalScore, finalGrade);
    }
}

void displayGradeAverage()
{
    printf(""> Grade average \n"");

    float assignmentTotal = 0;
    float midExamTotal = 0;
    float finalExamTotal = 0;

    for (int i = 0; i < studentCount; i++)
    {
        assignmentTotal += students[i].assignment;
        midExamTotal += students[i].midExam;
        finalExamTotal += students[i].finalExam;
    }

    float assignmentAverage = assignmentTotal / studentCount;
    float midExamAverage = midExamTotal / studentCount;
    float finalExamAverage = finalExamTotal / studentCount;
    float finalScoreAverage = (0.3 * assignmentAverage) + (0.3 * midExamAverage) + (0.4 * finalExamAverage);

    printf(""Assignment : %.2f\n"", assignmentAverage);
    printf(""Mid Exam : %.2f\n"", midExamAverage);
    printf(""Final Exam : %.2f\n"", finalExamAverage);
    printf(""Final Score: %.2f\n"", finalScoreAverage);
}

int main()
{
    int choice;

    while (1)
    {
        printf(""> Menu\n"");
        printf(""1. Add student\n"");
        printf(""2. Display student details\n"");
        printf(""3. Display grade average\n"");
        printf(""\n"");
        printf(""0. Exit\n"");
        printf(""\n"");
        printf(""Menu: "");
        scanf(""%d"", &choice);

        switch (choice)
        {
            case 1:
                addStudent();
                break;
            case 2:
                displayStudentDetails();
                break;
            case 3:
                displayGradeAverage();
                break;
            case 0:
                exit(0);
            default:
                printf(""Invalid choice\n"");
        }
    }

    return 0;
}"
eyndbpCb,trepezidal,anik11556,C++,Monday 12th of February 2024 09:36:15 AM CDT,"#include <bits/stdc++.h>
using namespace std;

// Function to integrate
double f(double x) {
    return x * x * x; // Example function x^2
}

// Trapezoidal rule function
double trapezoidal(double a, double b, int n) {
    double h = (b - a) / n; // Width of each trapezoid
    double sum = 0.5 * (f(a) + f(b)); // Sum of the first and last terms
    
    for (int i = 1; i < n; ++i) {
        double x = a + i * h; // Current x value
        sum = sum + f(x); // Add f(x_i)
    }
    
    return sum * h;
}

int main() {
    double a, b; // Integration limits
    int n; // Number of subdivisions
    
    // Input values
    cout << ""Enter lower limit of integration: "";
    cin >> a;
    cout << ""Enter upper limit of integration: "";
    cin >> b;
    cout << ""Enter the number of subdivisions: "";
    cin >> n;
    
    // Calculate integral using trapezoidal rule
    double integral = trapezoidal(a, b, n);
    
    // Output result
    cout << ""Approximate integral: "" << integral << endl;
    
    return 0;
}
"
wQ6jETqq,3.	Kate's Way Out,Nenogzar,Python,Monday 12th of February 2024 09:07:35 AM CDT,"# Функция за намиране на началната позиция на ""k"" в лабиринта
def find_position(maze):
    position = []
    for row in range(len(maze)):
        for el in maze[row]:
            if el == 'k':
                position.append(row)
                position.append(maze[row].find('k'))
                return position

# Функция за намиране на свободните позиции (' ') в лабиринта
def next_free_spot(maze):
    free_spots = []

    for row in range(len(maze)):
        for el in range(len(maze[row])):
            tmp = []
            if maze[row][el] == ' ':
                tmp.append(row)
                tmp.append(el)
                free_spots.append(tmp)

    return free_spots

# Функция за намиране на пътя в лабиринта
def find_path(position, next_free, maze):
    moves = 0

    while next_free:
        x1, x2 = next_free.pop(0)

        # Проверка за движение наляво
        if position[0] == x1 and position[1] - x2 == 1:
            position = [x1, x2]
            moves += 1
        # Проверка за движение надясно
        elif position[0] == x1 and x2 - position[1] == 1:
            position = [x1, x2]
            moves += 1
        # Проверка за движение надолу
        elif x1 - position[0] == 1 and position[1] == x2:
            position = [x1, x2]
            moves += 1
        # Проверка за движение нагоре
        elif position[0] - x1 == 1 and position[1] == x2:
            position = [x1, x2]
            moves += 1

    # Проверка за излизане от лабиринта
    if position[0] == 0 or position[0] == (len(maze) - 1) or position[1] == 0 or position[1] == (len(maze) - 1):
        return f'Kate got out in {moves + 1} moves'
    # Съобщение, че Kate не може да излезе от лабиринта
    return 'Kate cannot get out'

# Вход от потребителя - брой редове в лабиринта
m_rows = int(input())
maze = []
moves = 0
free_space = True

# Вход от потребителя - редове на лабиринта
for row in range(m_rows):
    maze.append(input())

# Извикване на функциите и извеждане на резултата
position = find_position(maze)
next_free = next_free_spot(maze)
movement = find_path(position, next_free, maze)
print(movement)
"
JhrXvudi,49. Petricor {post de rol},elirosecodes,HTML,Monday 12th of February 2024 08:50:28 AM CDT,"<link href=""https://dl.dropboxusercontent.com/scl/fi/1uyywptpyamagbbty8nk3/ppetricor.css?rlkey=pkx547ro952zz6mcyp6v8pj7u&dl=0"" rel=""stylesheet""><link rel=""stylesheet"" href=""//icons.cappuccicons.com/cpf.css""><div class=""petricor""><div class=""ptrc-01""><div class=""ptrc-bg""></div></div><div class=""ptrc-1op""><i class=""cp cp-cloud-o""></i></div><div class=""ptrc-02""><div class=""ptrc-2tl""><div class=""ptrc-2tl1"">TITULO</div><div class=""ptrc-2tl2""><a href=""/""><i class=""cp cp-drop-o""></i></a></div></div><div class=""ptrc-2ds"">FRASE/SUBTITULO</div></div><div class=""ptrc-03""><div class=""ptrc-3tx"">
TU POST AQUI.
</div></div><div class=""ptrc-04""><div class=""ptrc-bgg""></div></div><div class=""ptrc-4bt""><p>TEXTO CORTO</p></div></div><a href=""https://elirosecodes.tumblr.com/""><div class=""gnomo"">elirose</div></a><style>:root{--ptr-bk:#fff; --ptr-tx:#000; --ptr-sb:#8C8C8C; --ptr-cl:#31644F; --ptr-img:url(https://i.imgur.com/hNFDC92.gif); --ptr-bg:url(https://i.imgur.com/ZHg2MK0.gif);}</style>"
WGmr6224,Días entre fechas. Simple Python,JPablos,Python,Monday 12th of February 2024 08:34:49 AM CDT,"""""""
Los días transcurridos entre fechas
""""""
import time
from datetime import datetime, timedelta

timedelta(seconds=60)

start = time.time()

FH1 = '01-01-2024 00:00:00'  # Inicio de este año
FH2 = '31-07-2024 00:00:00'  # Fecha aleatoria (¿Cuántos días hasta esta fecha?)
fecha1 = datetime.strptime(FH1, '%d-%m-%Y %H:%M:%S')
fecha2 = datetime.strptime(FH2, '%d-%m-%Y %H:%M:%S')

res=(fecha2-fecha1)
print(res.days, ""días"")  # Solo los días transcurridos
print(res)               # Los días más H:M:S

ahora = datetime.now()
print(""Hoy es:"", ahora)

res1=(ahora-fecha1)      # Los días que han transcurrido del año actual
print(res1)              # Los días que han transcurrido del año actual más H:M:S
print(f""Han pasado {res1} desde {fecha1} hasta hoy"")

end = time.time()

print(f""El proceso duró {end - start} segundos"")
"
WBt68HX2,Charge icons,petar_bonov,HTML,Monday 12th of February 2024 08:23:00 AM CDT,"desktop:

<div data-spec=""battype-hl"">
    <i class=""head-icon icon-wired-charging""></i>45W
    <i class=""head-icon icon-wireless-charging""></i>25W
</div>

mobile:

<span data-spec=""battype-hl"">
    <i class=""head-icon icon-wired-charging""></i>45W
    <i class=""head-icon icon-wireless-charging""></i>25W
</span>"
xGY4Cvv9,Guessing game,sriyanto,Java,Monday 12th of February 2024 08:07:41 AM CDT,"import java.util.InputMismatchException;
import java.util.Random;
import java.util.Scanner;

public class GuessingGame {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Random random = new Random();
        int numberToGuess = random.nextInt(100) + 1; // Random number between 1 and 100
        int attempts = 0;
        boolean hasGuessedCorrectly = false;

        System.out.println(""Welcome to the Guessing Game!"");
        System.out.println(""I've picked a number between 1 and 100. Can you guess it?"");

        while (!hasGuessedCorrectly) {
            System.out.print(""Enter your guess: "");
            try {
                int guess = scanner.nextInt();
                attempts++;

                if (guess < 1 || guess > 100) {
                    throw new IllegalArgumentException(""Please enter a number between 1 and 100."");
                }

                if (guess == numberToGuess) {
                    hasGuessedCorrectly = true;
                    System.out.println(""Congratulations! You've guessed the number "" + numberToGuess + "" correctly."");
                    System.out.println(""It took you "" + attempts + "" attempts."");
                } else if (guess < numberToGuess) {
                    System.out.println(""Too low! Try again."");
                } else {
                    System.out.println(""Too high! Try again."");
                }
            } catch (InputMismatchException e) {
                System.out.println(""Invalid input. Please enter a valid number."");
                scanner.nextLine(); // Clear the input buffer
            } catch (IllegalArgumentException e) {
                System.out.println(e.getMessage());
                scanner.nextLine(); // Clear the input buffer
            }
        }

        scanner.close();
    }
}
"
CjTUWgeb,Untitled,kofany,Python,Monday 12th of February 2024 08:06:25 AM CDT,"# -*- coding: utf-8 -*-
import weechat as w
import json

SCRIPT_NAME = ""translate""
SCRIPT_AUTHOR = ""Jerzy Dabrowski (kofany) <j@dabrowski.biz>""
SCRIPT_VERSION = ""1.0""
SCRIPT_LICENSE = ""GPL""
SCRIPT_DESC = ""Translates messages for specified channels and servers using Google Translate API.""

TRANSLATE_API_URL = ""https://translation.googleapis.com/language/translate/v2""
DETECT_API_URL = ""https://translation.googleapis.com/language/translate/v2/detect""

settings = {
    ""api_key"": """",
    ""translate_channels_in"": ""{}"",
    ""translate_channels_out"": ""{}"",
    ""no_translate_lang"": ""pl"",  # Default language not to translate
}

translated_texts = {}

def debug_print(buffer, message):
    w.prnt(buffer, ""DEBUG: "" + message)

def get_full_channel_name(channel, server):
    full_channel_name = ""{}@{}"".format(channel, server)
    debug_print("""", f""[Translate Debug] Full channel name generated: {full_channel_name} from Channel: {channel}, Server: {server}"")
    return full_channel_name

def api_request_cb(data, url, request, response):
    debug_print("""", f""[Translate Debug api_request_cb BEG] Current translated_texts content: {translated_texts}"")
    # Debugowanie danych wejściowych
    debug_print("""", ""[Translate Debug] API request callback triggered."")
    debug_print("""", f""[Translate Debug] Input data: {data}"")
    debug_print("""", f""[Translate Debug] URL: {url}"")
    debug_print("""", f""[Translate Debug] Request: {request}"")
    debug_print("""", f""[Translate Debug] Response: {response}"")

    callback_data = json.loads(data)
    buffer = callback_data['buffer']
    action = callback_data['action']
    message_id = callback_data.get('message_id', '')
    text_to_translate = callback_data.get('text', '')  # Pobieramy tekst bezpośrednio z danych callback

    debug_print("""", f""[Translate Debug] Action: {action}"")
    debug_print("""", f""[Translate Debug] Callback data: {callback_data}"")

    try:
        response_data = json.loads(response['output'])
        debug_print("""", ""[Translate Debug] Successfully parsed response data."")
    except Exception as e:
        debug_print(buffer, f""[Translate Debug] Error parsing response data: {e}"")
        return w.WEECHAT_RC_ERROR

    if action == 'detect_and_translate':
        if 'data' in response_data and 'detections' in response_data['data']:
            detected_lang = response_data['data']['detections'][0][0]['language']
            debug_print(buffer, f""[Translate Debug] Detected language: {detected_lang}"")
            target_lang = callback_data['target_lang']
            if detected_lang != target_lang:
                debug_print(buffer, ""[Translate Debug] Detected language differs from target. Initiating translation."")
                if text_to_translate:
                    # Wywołujemy funkcję translate z tekstem bezpośrednio
                    translate(buffer, detected_lang, target_lang, callback_data['api_key'], 'translate', message_id, text_to_translate)
                else:
                    debug_print(buffer, f""[Translate Debug] No text found for message ID: {message_id}. Skipping translation."")
            else:
                debug_print(buffer, ""[Translate Debug] Detected language is the same as target. No translation needed."")
        else:
            debug_print(buffer, ""Error in response: No detections found"")
    elif action == 'translate':
        if 'data' in response_data and 'translations' in response_data['data']:
            translated_text = response_data['data']['translations'][0]['translatedText']
            translated_texts[message_id] = translated_text  # Aktualizujemy słownik, jeśli potrzebujemy zachować przetłumaczony tekst
            debug_print(buffer, f""[Translate Debug] Translation completed: {translated_text}"")
        else:
            debug_print(buffer, ""Error in response: No translations found"")
    debug_print("""", f""[Translate Debug api_request_cb END] Current translated_texts content: {translated_texts}"")
    return w.WEECHAT_RC_OK

def translate(buffer, source_lang, target_lang, api_key, callback_action, message_id, text_to_translate):
    debug_print("""", f""[Translate Debug translate BEG] Current translated_texts content: {translated_texts}"")
    debug_print("""", ""[Translate Debug] Initiating translation process."")
    if text_to_translate:
        debug_print("""", f""[Translate Debug] Text to translate (ID: {message_id}): {text_to_translate}"")
    else:
        debug_print("""", f""[Translate Debug] No text found for message ID: {message_id}. Skipping translation."")
        return

    debug_print("""", f""[Translate Debug] Source language: {source_lang}, Target language: {target_lang}"")
    debug_print("""", f""[Translate Debug] API Key: {'Present' if api_key else 'Not Present'}"")

    post_data = json.dumps({'q': text_to_translate, 'source': source_lang, 'target': target_lang, 'format': 'text'})
    headers = ""Content-Type: application/json\nx-goog-api-key: "" + api_key
    options = {""postfields"": post_data, ""httpheader"": headers}
    callback_data = json.dumps({
        'buffer': buffer,
        'action': callback_action,
        'api_key': api_key,
        'target_lang': target_lang,
        'message_id': message_id
    })

    debug_print("""", ""[Translate Debug] Prepared request data for translation."")
    debug_print("""", f""[Translate Debug] Post data: {post_data}"")
    debug_print("""", f""[Translate Debug] Headers: {headers}"")
    debug_print("""", f""[Translate Debug] Callback data: {callback_data}"")

    w.hook_url(TRANSLATE_API_URL, options, 20000, ""api_request_cb"", callback_data)
    debug_print("""", ""[Translate Debug] Hook URL called for translation."")
    debug_print("""", f""[Translate Debug translate END] Current translated_texts content: {translated_texts}"")

def detect_language_and_translate(buffer, message_id, text, server, channel, target_lang, api_key):
    debug_print("""", f""[Translate Debug detect_language_and_translate BEG] Current translated_texts content: {translated_texts}"")
    debug_print("""", ""[Translate Debug] Starting language detection and translation process."")
    debug_print("""", f""[Translate Debug] Text to detect and translate: {text}"")
    debug_print("""", f""[Translate Debug] Target language: {target_lang}"")
    debug_print("""", f""[Translate Debug] API Key: {'Present' if api_key else 'Not Present'}"")
    # Zapisz tekst przed wywołaniem detekcji
    translated_texts[message_id] = text
    post_data = json.dumps({'q': text})
    headers = ""Content-Type: application/json\nx-goog-api-key: "" + api_key
    options = {""postfields"": post_data, ""httpheader"": headers}
    callback_data = json.dumps({
        'buffer': buffer,
        'message_id': message_id,
        'text': text,
        'server': server,
        'channel': channel,
        'target_lang': target_lang,
        'action': 'detect_and_translate',
        'api_key': api_key
    })
    debug_print("""", ""[Translate Debug] Prepared request data for language detection and translation."")
    debug_print("""", f""[Translate Debug] Post data: {post_data}"")
    debug_print("""", f""[Translate Debug] Headers: {headers}"")
    debug_print("""", f""[Translate Debug] Callback data: {callback_data}"")

    w.hook_url(DETECT_API_URL, options, 20000, ""api_request_cb"", callback_data)
    debug_print("""", ""[Translate Debug] Hook URL called for language detection and translation."")
    debug_print("""", f""[Translate Debug detect_language_and_translate END] Current translated_texts content: {translated_texts}"")

def translate_incoming_message_cb(data, modifier, modifier_data, string):
    debug_print("""", f""[Translate Debug translate_incoming_message_cb BEG] Current translated_texts content: {translated_texts}"")
    api_key = w.config_get_plugin(""api_key"")
    if not api_key:
        debug_print("""", ""[Translate Debug] API key is not set."")
        return string

    parsed_data = w.info_get_hashtable(""irc_message_parse"", {""message"": string})
    channel = parsed_data[""channel""]
    message = parsed_data[""text""]
    server = modifier_data
    message_id = str(hash(message))  # Unique ID for the message

    debug_print("""", f""[Translate Debug] Received message: {message}"")
    debug_print("""", f""[Translate Debug] Channel: {channel}, Server: {server}"")
    debug_print("""", f""[Translate Debug] Message ID: {message_id}"")

    full_channel_name = get_full_channel_name(channel, server)
    translate_channels_in = json.loads(w.config_get_plugin(""translate_channels_in""))

    debug_print("""", f""[Translate Debug] Full channel name: {full_channel_name}"")
    debug_print("""", f""[Translate Debug] Translate channels in: {translate_channels_in}"")

    if full_channel_name in translate_channels_in:
        target_lang = translate_channels_in[full_channel_name]
        debug_print("""", f""[Translate Debug] Target language for translation: {target_lang}"")
        translated_texts[message_id] = message  # Store original message for translation
        detect_language_and_translate("""", message_id, message, server, channel, target_lang, api_key)
    else:
        debug_print("""", ""[Translate Debug] Channel not in translate_channels_in list."")

    # Check if translated text is available and replace original message
    if message_id in translated_texts:
        translated_message = translated_texts.pop(message_id)
        debug_print("""", f""[Translate Debug] Translated message: {translated_message}"")
        return string.replace(message, translated_message)
    else:
        debug_print("""", ""[Translate Debug] Translated message not available yet."")
    debug_print("""", f""[Translate Debug translate_incoming_message_cb BEG] Current translated_texts content: {translated_texts}"")
    return string

def translate_command_cb(data, buffer, args):
    argv = args.split("" "")
    command = argv[0] if len(argv) > 0 else """"

    if command == ""list"":
        translate_channels_in = json.loads(w.config_get_plugin(""translate_channels_in""))
        translate_channels_out = json.loads(w.config_get_plugin(""translate_channels_out""))
        w.prnt(buffer, ""Channels for incoming translation:"")
        for channel, lang in translate_channels_in.items():
            w.prnt(buffer, ""  {} -> {}"".format(channel, lang))
        w.prnt(buffer, ""Channels for outgoing translation:"")
        for channel, lang in translate_channels_out.items():
            w.prnt(buffer, ""  {} -> {}"".format(channel, lang))
    elif command in [""addin"", ""addout""]:
        if len(argv) != 4:
            w.prnt(buffer, ""Usage: /translate addin|addout <server> <channel> <target_lang>"")
            return w.WEECHAT_RC_ERROR
        server_channel = get_full_channel_name(argv[2], argv[1])
        target_lang = argv[3]
        translate_channels = json.loads(w.config_get_plugin(""translate_channels_in"" if command == ""addin"" else ""translate_channels_out""))
        translate_channels[server_channel] = target_lang
        w.config_set_plugin(""translate_channels_in"" if command == ""addin"" else ""translate_channels_out"", json.dumps(translate_channels))
        w.prnt(buffer, ""{} added for {} translation to {}."".format(server_channel, ""incoming"" if command == ""addin"" else ""outgoing"", target_lang))
    elif command in [""delin"", ""delout""]:
        if len(argv) != 3:
            w.prnt(buffer, ""Usage: /translate delin|delout <server> <channel>"")
            return w.WEECHAT_RC_ERROR
        server_channel = get_full_channel_name(argv[2], argv[1])
        translate_channels = json.loads(w.config_get_plugin(""translate_channels_in"" if command == ""delin"" else ""translate_channels_out""))
        if server_channel in translate_channels:
            del translate_channels[server_channel]
            w.config_set_plugin(""translate_channels_in"" if command == ""delin"" else ""translate_channels_out"", json.dumps(translate_channels))
            w.prnt(buffer, ""{} removed from {} translation."".format(server_channel, ""incoming"" if command == ""delin"" else ""outgoing""))
        else:
            w.prnt(buffer, ""{} not found in {} translation settings."".format(server_channel, ""incoming"" if command == ""delin"" else ""outgoing""))

    elif command == ""code"":
        magenta = w.color(""magenta"")
        reset = w.color(""reset"")
        codes = [
            (""Azerbaijani"", ""az""), (""Hausa"", ""ha""), (""Malay"", ""ms""), (""Spanish"", ""es""),
            (""Bambara"", ""bm""), (""Hawaiian"", ""haw""), (""Malayalam"", ""ml""), (""Sundanese"", ""su""),
            (""Basque"", ""eu""), (""Hebrew"", ""he""), (""Maltese"", ""mt""), (""Swahili"", ""sw""),
            (""Belarusian"", ""be""), (""Hindi"", ""hi""), (""Maori"", ""mi""), (""Swedish"", ""sv""),
            (""Bengali"", ""bn""), (""Hmong"", ""hmn""), (""Marathi"", ""mr""), (""Tagalog"", ""tl""),
            (""Bhojpuri"", ""bho""), (""Hungarian"", ""hu""), (""Meiteilon"", ""mni""), (""Tajik"", ""tg""),
            (""Bosnian"", ""bs""), (""Icelandic"", ""is""), (""Mizo (lus)"", ""lus""), (""Tamil"", ""ta""),
            (""Bulgarian"", ""bg""), (""Igbo"", ""ig""), (""Mongolian"", ""mn""), (""Tatar"", ""tt""),
            (""Catalan"", ""ca""), (""Ilocano (ilo)"", ""ilo""), (""Myanmar (my)"", ""my""), (""Telugu"", ""te""),
            (""Cebuano"", ""ceb""), (""Indonesian"", ""id""), (""Nepali"", ""ne""), (""Thai"", ""th""),
            (""Chinese (Simpl)"", ""zh-CN""), (""Irish"", ""ga""), (""Norwegian"", ""no""), (""Tigrinya"", ""ti""),
            (""Chinese (Trad)"", ""zh-TW""), (""Italian"", ""it""), (""Nyanja (ny)"", ""ny""), (""Tsonga"", ""ts""),
            (""Corsican"", ""co""), (""Japanese"", ""ja""), (""Odia (or)"", ""or""), (""Turkish"", ""tr""),
            (""Croatian"", ""hr""), (""Javanese"", ""jv""), (""Oromo (om)"", ""om""), (""Turkmen"", ""tk""),
            (""Czech"", ""cs""), (""Kannada"", ""kn""), (""Pashto"", ""ps""), (""Twi (ak)"", ""ak""),
            (""Danish"", ""da""), (""Kazakh"", ""kk""), (""Persian"", ""fa""), (""Ukrainian"", ""uk""),
            (""Dhivehi"", ""dv""), (""Khmer"", ""km""), (""Polish"", ""pl""), (""Urdu"", ""ur""),
            (""Dogri (doi)"", ""doi""), (""Kinyarwanda"", ""rw""), (""Portuguese"", ""pt""), (""Uyghur"", ""ug""),
            (""Dutch"", ""nl""), (""Konkani (gom)"", ""gom""), (""Punjabi"", ""pa""), (""Uzbek"", ""uz""),
            (""English"", ""en""), (""Korean"", ""ko""), (""Quechua"", ""qu""), (""Vietnamese"", ""vi""),
            (""Esperanto"", ""eo""), (""Krio (kri)"", ""kri""), (""Romanian"", ""ro""), (""Welsh"", ""cy""),
            (""Estonian"", ""et""), (""Kurdish"", ""ku""), (""Russian"", ""ru""), (""Xhosa"", ""xh""),
            (""Ewe"", ""ee""), (""Kurdish (ckb)"", ""ckb""), (""Samoan"", ""sm""), (""Yiddish"", ""yi""),
            (""Filipino"", ""fil""), (""Kyrgyz"", ""ky""), (""Sanskrit"", ""sa""), (""Yoruba"", ""yo""),
            (""Finnish"", ""fi""), (""Lao"", ""lo""), (""Scots (gd)"", ""gd""), (""Zulu"", ""zu""),
            (""French"", ""fr""), (""Latin"", ""la""), (""Sepedi (nso)"", ""nso""),
            (""Frisian"", ""fy""), (""Latvian"", ""lv""), (""Serbian"", ""sr""),
        ]
        w.prnt("""", ""Available language codes:"")
        column_width = 20
        for i in range(0, len(codes), 4):
            line = """".join(f""{name.ljust(column_width - len(code))}{magenta}{code}{reset}    "" for name, code in codes[i:i+4])
            w.prnt(buffer, line)

    elif command == ""help"":
        w.prnt(buffer, ""/translate command usage:"")
        w.prnt(buffer, ""/translate list - Show all channels with translation settings"")
        w.prnt(buffer, ""/translate addin <server> <channel> <target_lang> - Add a channel to translate incoming messages"")
        w.prnt(buffer, ""/translate addout <server> <channel> <target_lang> - Add a channel to translate outgoing messages"")
        w.prnt(buffer, ""/translate delin <server> <channel> - Remove a channel from translating incoming messages"")
        w.prnt(buffer, ""/translate delout <server> <channel> - Remove a channel from translating outgoing messages"")
        w.prnt(buffer, ""/translate code - Show available language codes for translation"")
        w.prnt(buffer, ""/translate help - Show this help message"")

    else:
        w.prnt(buffer, ""Unknown command. Use /translate help for usage information."")

    return w.WEECHAT_RC_OK

if w.register(SCRIPT_NAME, SCRIPT_AUTHOR, SCRIPT_VERSION, SCRIPT_LICENSE, SCRIPT_DESC, """", """"):
    for option, default_value in settings.items():
        if not w.config_is_set_plugin(option):
            w.config_set_plugin(option, default_value)
    w.hook_modifier(""irc_in_privmsg"", ""translate_incoming_message_cb"", """")
    w.hook_command(""translate"", ""Manage translation settings"",
                   ""list | addin <server> <channel> <target_lang> | addout <server> <channel> <target_lang> | delin <server> <channel> | delout <server> <channel> | code | help"",
                   ""list: show all channels with translation settings\n""
                   ""addin: add a channel to translate incoming messages\n""
                   ""addout: add a channel to translate outgoing messages\n""
                   ""delin: remove a channel from translating incoming messages\n""
                   ""delout: remove a channel from translating outgoing messages\n""
                   ""code: show available language codes for translation\n""
                   ""help: show help information for the /translate command\n"",
                   ""list || addin %(irc_servers) %(irc_channels) || addout %(irc_servers) %(irc_channels) || delin %(irc_servers) %(irc_channels) || delout %(irc_servers) %(irc_channels) || code || help"",
                   ""translate_command_cb"", """")"
ZUEzv0Yz,methods,SenpaiZero,Java,Monday 12th of February 2024 07:41:24 AM CDT,"package labExer1B_;

public class plusClass {
	public void showNumberPlus10(int num)
	{
		System.out.println(num + "" plus 10 is "" + (num+10));
	}
	
	public void showNumberPlus100(int num)
	{
		System.out.println(num + "" plus 100 is "" + (num+100));
	}
	
	public void showNumberPlus1000(int num)
	{
		System.out.println(num + "" plus 1000 is "" + (num+1000));
	}
}
"
z8NpNZV2,main,SenpaiZero,Java,Monday 12th of February 2024 07:40:59 AM CDT,"package labExer1B_;

import java.util.Scanner;

public class runMain {
	public static void main(String[] args) {
		Scanner scanner = new Scanner(System.in);
		
		System.out.print(""Enter an integer: "");
		int userInput = scanner.nextInt();
		plusClass plus = new plusClass();
		
		plus.showNumberPlus10(userInput);
		plus.showNumberPlus100(userInput);
		plus.showNumberPlus1000(userInput);
	}
}
"
UNEJY5r2,GraphFacetRender.cpp,ANevsky,C++,Monday 12th of February 2024 07:19:58 AM CDT,"			_coo_gl_arpointer* tri = triangles_pointer;
			_coo_gl_arpointer* norm = normals_pointer;
			float* vert = new float[tri_count * 3 * 6];


			for (unsigned i = 0; i < tri_count; ++i)
			{
				unsigned ipos = i * 9;
				std::copy(norm + ipos, norm + ipos + 3, vert + ipos * 2);
				std::copy(tri + ipos, tri + ipos + 3, vert + ipos * 2 + 3);

				std::copy(norm + ipos + 3, norm + ipos + 6, vert + ipos * 2 + 6);
				std::copy(tri + ipos + 3, tri + ipos + 6, vert + ipos * 2 + 9);

				std::copy(norm + ipos + 6, norm + ipos + 9, vert + ipos * 2 + 12);
				std::copy(tri + ipos + 6, tri + ipos + 9, vert + ipos * 2 + 15);
			}


			int facesCount, stride, * sharpInd;
			std::vector<float> points;
			StlRend srend;
			srend.create(tri_count, vert);
			srend.getMesh(90, facesCount, stride, points, sharpInd);
			glEnableClientState(GL_VERTEX_ARRAY);
			glEnableClientState(GL_NORMAL_ARRAY);
			glDisableClientState(GL_COLOR_ARRAY);
			glVertexPointer(3, GL_FLOAT, stride * sizeof(points[0]), points.data() + 3);
			glNormalPointer(GL_FLOAT, stride * sizeof(points[0]), points.data());

			glDrawArrays(GL_TRIANGLES, 0, facesCount * 3);"
BJ6nCwgG,Replacement script,3DCreator,Lua,Monday 12th of February 2024 07:05:38 AM CDT,"local chatservice = game:GetService(""Chat"")
local replicatedstorage = game:GetService(""ReplicatedStorage"")
local callevent = replicatedstorage:WaitForChild(""CallEvent"")
local twitterevent = replicatedstorage:WaitForChild(""TwitterEvent"")
local callfunctions = {}

callevent.OnServerEvent:Connect(function(player, target, type_)
	if type_ == ""Start"" then
		local player_ = game.Players:FindFirstChild(target)
		if not player_ then return end
		 callevent:FireClient(player_, player.Name, ""Incoming"")
	elseif type_ == ""Decline"" then
		local player_ = game.Players:FindFirstChild(target)
		callevent:FireClient(player_, player.Name, ""Decline"")
	elseif type_ == ""Accept"" then
		local player_ = game.Players:FindFirstChild(target)
		if callfunctions[player] then callfunctions[player]:Disconnect() end
		if callfunctions[player_] then callfunctions[player_]:Disconnect() end
		callfunctions[player] = player.Chatted:Connect(function(message)
			local phone = player_.Character:FindFirstChild(""iphonex"")
			if phone then
				chatservice:Chat(phone.Handle, message, Enum.ChatColor.Red)
			end
		end)
		
		callfunctions[player_] = player_.Chatted:Connect(function(message)
			local phone = player.Character:FindFirstChild(""iphonex"")
			if phone then
				chatservice:Chat(phone.Handle, message, Enum.ChatColor.Red)
			end
		end)
		callevent:FireClient(player_, player.Name, ""Accept"")
	elseif type_ == ""End"" then
		local player_ = game.Players:FindFirstChild(target)
		if callfunctions[player] then
			callfunctions[player]:Disconnect()
		end
		if callfunctions[player_] then
			callfunctions[player_]:Disconnect()
		end
		callevent:FireClient(player_, player.Name, ""End"")
	end
end)

twitterevent.OnServerEvent:Connect(function(player, message)
	twitterevent:FireAllClients(player.Name.."": ""..message)
end)"
PFWW246K,selection_sort,naren_paste,Python,Monday 12th of February 2024 07:02:29 AM CDT,"def selection_sort(arr):
    for i in range(1, len(arr)):
        v = arr[i]
        j = i
        while j >= 1 and arr[j-1] > v:
            arr[j] = arr[j-1]
            j -= 1
        arr[j] = v

# Example usage:
arr = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]
selection_sort(arr)
print(arr)
"
vAHSrVF8,Untitled,Ilya_Bykonya,C++,Monday 12th of February 2024 06:58:44 AM CDT,"#include <iostream>
#include <random>
#include <chrono>

int main() {
    constexpr auto array_size = 10'000;
    int** array = new int*[array_size];
    for(int i = 0; i < array_size; ++i)
        array[i] = new int[array_size];

    const auto start = std::chrono::system_clock::now();
    for(int i = 0; i < array_size; ++i) {
        for(int j = 0; j < array_size; ++j) {
            array[j][i] = rand();
        }
    }
    const auto finish = std::chrono::system_clock::now();

    std::cout << std::chrono::duration_cast<std::chrono::milliseconds>(finish - start).count() << std::endl;
}
"
wetAz4Vm,Untitled,MrBlueTuxedoman,C++,Monday 12th of February 2024 06:53:18 AM CDT,"#include <iostream>
#include <queue>
#include <map>
#include <vector>
#include <algorithm>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define int long long
#define $AzH_TxdmN$ ios_base::sync_with_stdio(0);cin.tie(nullptr);cout.tie(nullptr);

#define all(v) v.begin(),v.end()
#define ep(a,b) emplace_back(make_pair(a,b))
#define pii pair<int,int>
#define heap pii,vector<pii>,greater<pii>
using namespace std;
using namespace __gnu_pbds;

typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update>__indexed_set;
const int N = 1e6+9;
const int MOD = 1e9+7;
const int add = 50000;
int dist[N];
vector<pii>v[N];
map<int,int>cost;

int n,m,p;

void bfs(int node)
{
    priority_queue<heap>q;
    for (int i = 0; i < N; ++i)
    {
        dist[i] = MOD;
    }
    dist[node] = 0;
    q.push({0LL,node});
    while(!q.empty())
    {
        int w = q.top().first;
        int nod = q.top().second;
        //cerr<<""current node: ""<<nod<<""\tweight: ""<<w<<'\n';
        q.pop();
        for (auto i : v[nod])
        {
            if (dist[i.first] > dist[nod]+i.second+cost[i.first])
            {
                dist[i.first] = dist[nod]+i.second+cost[i.first];
                q.push({dist[i.first],i.first});
            }
        }
    }
}

void solve()
{
    cin>>n>>m>>p;
    for (int i = 0,x,y,z; i < m; ++i)
    {
        cin>>x>>y>>z;
        x += add;
        y += add;
        v[x].ep(y,z);
        v[y].ep(x,z);
    }
    for (int i = 0,x,y; i < p; ++i)
    {
        cin>>x>>y;
        x += add;
        cost[x] += y;
    }
    bfs(52077LL);
    if (dist[52024LL] > n)
    {
        cout<<""IOI\n"";
    }
    else
    {
        cout<<""NO KAMP\n"";
    }
    //cout<<""distances: ""<<dist[52077]<<""\n""<<dist[52025]<<'\n'<<dist[52024]<<'\n';
}

signed main()
{
    $AzH_TxdmN$
    int t = 1;
    //cin>>t;
    while(t--)
    {
        solve();
    }
}
/*
10 2 1
2077 2025 1
2025 2024 1
2024 9
*/"
rNC9HfGw,Untitled,sambacar,JSON,Monday 12th of February 2024 06:43:21 AM CDT,"{
    ""id"": ""1000036060"",
    ""order_number"": ""1000036060"",
    ""order_date"": ""2024-02-12T12:39:32"",
    ""status"": ""open"",
    ""customer"": {
        ""contact_name"": ""Petar Sambolek"",
        ""first_name"": ""Petar"",
        ""last_name"": ""Sambolek"",
        ""street"": ""Ulica Svete Ane 57"",
        ""postcode"": ""31000"",
        ""city"": ""Osijek"",
        ""phone"": ""0923051110"",
        ""e_mail"": ""sambolek.petar@gmail.com""
    },
    ""items"": [
        {
            ""position"": 1,
            ""product"": {
                ""ean_code"": ""5019487084484"",
                ""name"": ""Rio 60 Second Face Lift Plus""
            },
            ""quantity"": 1,
            ""price"": 152.7
        }
    ],
    ""payment"": {
        ""status"": ""pending"",
        ""method"": ""wire_transfer""
    },
    ""discount_amount"": ""0.0000""
}"
GCUb2tZm,gcd lcm,LEGEND2004,C++,Monday 12th of February 2024 06:41:52 AM CDT,"#include <bits/stdc++.h>
using namespace std;

#define int long long
#define fastio ios_base::sync_with_stdio(0); cin.tie(0)
const int N = 2e5 + 5;

int gcd(int a , int b){
    if(b == 0)  return a;
    return gcd(b , a % b);
}

int lcm(int a , int b){
    return a / gcd(a , b) * b;
}


signed main()
{
    fastio;

    int a , b;
    cin >> a >> b;
    cout << gcd(a , b) << ' ' << lcm(a , b) << '\n';
}
"
qwNTiqZU,data838,TestGuy1,JSON,Monday 12th of February 2024 06:00:07 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '40460d56c185e095dcf2628345eb5c2421ff43be6d42a1f2305c0657586130f0ce0e33158ce7a6c5af21070821355b56953d9a2038cc86d7c163c342ab1a24f54b3d8573fbc5f84c3af9b92abb2740d89c07be4a0a9f4c6ca7ce2a9ba86615be1575d16fe6f059d870641fbcc715300c7b4a3bbb0d22f1d79b913d538a88c6dd',
  otherdata: [
    '34550d4990b89dcfacebdee4d7499395',
    '2d609f3925c7f1873cf8a8c4bec16a1b',
    'a2fcc5aa2c5889073153cebd8fea156e',
    '63f1bba326bb47846c896d9f37c16a3d',
    'b7bd2e5eb611f6725de692ed202ea15b',
    'e63ee9e1ce2cca2dbe7b1f5979119718',
    '4817055f8f170cfeed7f822e592e5407',
    '2582878f78f141be220348bbbfbc3972'
  ]
}"
uLS08a9i,Untitled,sambacar,JSON,Monday 12th of February 2024 05:56:03 AM CDT,"{
    ""id"": ""1000036059"",
    ""order_number"": ""1000036059"",
    ""order_date"": ""2024-02-12T10:33:42"",
    ""status"": ""open"",
    ""customer"": {
        ""contact_name"": ""Petar Sambolek"",
        ""first_name"": ""Petar"",
        ""last_name"": ""Sambolek"",
        ""street"": ""Ulica Svete Ane 57"",
        ""postcode"": ""31000"",
        ""city"": ""Osijek"",
        ""phone"": ""0923051110"",
        ""e_mail"": ""sambolek.petar@gmail.com""
    },
    ""items"": [
        {
            ""position"": 1,
            ""product"": {
                ""ean_code"": ""5019487084484"",
                ""name"": ""Rio 60 Second Face Lift Plus""
            },
            ""quantity"": 1,
            ""price"": 152.7
        }
    ],
    ""payment"": {
        ""status"": ""pending"",
        ""method"": ""wire_transfer""
    },
    ""discount_amount"": ""0.0000""
}"
