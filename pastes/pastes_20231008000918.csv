id,title,username,language,date,content
FWC2cUTL,bjack installer cc:tweaked,Honeth,Lua,Saturday 7th of October 2023 06:27:30 PM CDT,"local confirm = false
local install = false
function text()
    term.setCursorPos(13, 7)
    print(""this will create a startup."")
    term.setCursorPos(14, 8)
    print(""do you want to continue?"")
end
function confirmation()
    term.setCursorPos(18, 10)
    local event, key, isHeld = os.pullEvent(""key"")
    if key == keys.left then
        write("">Yes<     No "")
        confirm = true
    elseif key == keys.right then
        write("" Yes     >No<"")
        confirm = false
    end

end

term.clear()
term.setCursorPos(18, 10)
print("" Yes     >No<"")
while install == false do
    text()
    confirmation()
    local event, key, isHeld = os.pullEvent(""key"")
    if confirm and key == keys.enter then
        install = true
    end
end
term.clear()
term.setCursorPos(1, 1)
shell.run(""pastebin get 8NQMcCbP cardBack.nfp"")
shell.run(""pastebin get pvQ1sHtq card.nfp"")
shell.run(""pastebin get ti4WSLqQ logo.nfp"")
shell.run(""pastebin get KT0JCum2 cards.lua"")
shell.run(""pastebin get UGhbvpSU startup.lua"")
shell.run(""pastebin get z7RJWDBL pinapi.lua"")
shell.run(""pastebin get v7yA3n3R api.lua"")"
7uLppeke,test-key,Narayan,Python,Saturday 7th of October 2023 06:04:57 PM CDT,"#!/usr/bin/python

import random

priv_key = random.getrandbits(256)
print(""Private Key is:"", hex(priv_key))

G = {
        'x': 0x79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798,
        'y': 0x483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8
    }
print(""G point is:"", G)

pub_key = {
            'x_pub': G['x'] * priv_key,
            'y_pub': G['y'] * priv_key
          }
print(""Public Key is:"", pub_key)
print(""x Public Key in Hex:"", hex(pub_key['x_pub']))
print(""y Public Key in Hex:"", hex(pub_key['y_pub']))"
CQ2kKbZY,IP leak .bat,JannickP8,Batch,Saturday 7th of October 2023 05:00:05 PM CDT,"@echo Off
start ""https://grabify.link/116T2F"""
Kv9vSHt4,Pad_OLED,calas,YAML,Saturday 7th of October 2023 04:47:42 PM CDT,"substitutions:
  esp_devicename: Pad OLED Allarme
  deviceidname: pad-oled-allarme

esphome:
  name: pad-oled-allarme
  friendly_name: Pad OLED Allarme

esp32:
  board: esp32dev
  framework:
    type: arduino

captive_portal:

logger:
  baud_rate: 0

ota:
  password: ""24245800""

web_server:
  port: 80

wifi:
  ssid: ""LAN SOLO""
  password: !secret wifi_password
  manual_ip:
    static_ip: 192.168.178.144
    gateway: 192.168.178.1
    subnet: 255.255.255.0

  ap:
    ssid: ""${esp_devicename} Fallback AP""
    password: !secret wifi_password

api:
  encryption:
    key: ""2vY7511Y3laolOH/mo9Qx9I=""
  services:
  - service: enroll
    variables:
      finger_id: int
      num_scans: int
    then:
      - fingerprint_grow.enroll:
          finger_id: !lambda 'return finger_id;'
          num_scans: !lambda 'return num_scans;'
  - service: cancel_enroll
    then:
      - fingerprint_grow.cancel_enroll:
  - service: delete
    variables:
      finger_id: int
    then:
      - fingerprint_grow.delete:
          finger_id: !lambda 'return finger_id;'
  - service: delete_all
    then:
      - fingerprint_grow.delete_all:

################################################################################
##                  FONT
################################################
font:
  - file: 'arial.ttf'
    id: font1
    size: 18

  - file: 'arial_bold.ttf'
    id: font2
    size: 24

  - file: 'arial.ttf'
    id: font3
    size: 36

  - file: 'arial.ttf'
    id: font4
    size: 28

image:
  - file: mdi:shield-lock-outline
    id: alert
    resize: 25x25

  - file: mdi:shield-home
    id: alert_off
    resize: 75x75

  - file: mdi:thumb-up
    id: ok
    resize: 30x30

################################################################################
##                  I2C
################################################
i2c:
  sda: GPIO21
  scl: GPIO22

################################################################################
##                  UART
################################################
uart:
  rx_pin: GPIO17
  tx_pin: GPIO16
  baud_rate: 57600

################################################################################
##                  FINGERPRINT
################################################
fingerprint_grow:
  sensing_pin: GPIO12
  on_finger_scan_matched:
    - if:
        condition:
          lambda: 'return confidence > 89;'
        then:
          - homeassistant.tag_scanned: !lambda |-
              switch (finger_id) {
                case 1:
                  return ""Francesco"";
                case 2:
                  return ""Simona"";
                case 3:
                  return ""Gaia"";
                default:
                  return ""Sconosciuto"";
              }
          
          - display.page.show: page3
          
          - text_sensor.template.publish:
              id: fingerprint_state
              state: !lambda |-
                switch (finger_id) {
                  case 1:
                    return ""Francesco"";
                  case 2:
                    return ""Simona"";
                  default:
                    return ""Autorizzato"";
                }

          - fingerprint_grow.aura_led_control:
              state: BREATHING
              speed: 40
              color: GREEN
              count: 2

          - rtttl.play: 'two_short:d=32,o=8,b=100:32e6,40e6'
          - delay: 1000ms
          
          - text_sensor.template.publish:
              id: fingerprint_state
              state: ""Attesa""

          - display.page.show: page1

    - if:
        condition:
          lambda: 'return confidence < 90;'
        then:
          - display.page.show: page5
          
          - fingerprint_grow.aura_led_control:
              state: FLASHING
              speed: 30
              color: PURPLE
              count: 4

          - rtttl.play: 'two_short:d=32,o=8,b=100:32e6'
          - delay: 1000ms
          
          - text_sensor.template.publish:
              id: fingerprint_state
              state: ""Attesa""

          - display.page.show: page1


  on_finger_scan_unmatched:
    - text_sensor.template.publish:
        id: fingerprint_state
        state: ""Impronta non autorizzata""
    
    - fingerprint_grow.aura_led_control:
        state: FLASHING
        speed: 25
        color: RED
        count: 3

    - switch.turn_on: buzzer_error
    - delay: 500ms
    - switch.turn_off: buzzer_error

  on_enrollment_scan:
    - text_sensor.template.publish:
        id: fingerprint_state
        state: ""Impronta acquisita""
        
    - fingerprint_grow.aura_led_control:
        state: FLASHING
        speed: 25
        color: WHITE
        count: 2
    - fingerprint_grow.aura_led_control:
        state: ALWAYS_ON
        speed: 0
        color: YELLOW
        count: 0

  on_enrollment_failed:
    - text_sensor.template.publish:
        id: fingerprint_state
        state: ""Acquisizione impronta fallita""
    - fingerprint_grow.aura_led_control:
        state: FLASHING
        speed: 25
        color: RED
        count: 4

################################################################################
##                  PAD
################################################
matrix_keypad:
  id: mykeypad
  rows:
    - pin: GPIO19
    - pin: GPIO33
    - pin: GPIO25
    - pin: GPIO26
  columns:
    - pin: GPIO27
    - pin: GPIO13
    - pin: GPIO5
  keys: ""123456789*0#""
  has_diodes: false

################################################################################
##                  Key Collector
################################################
key_collector:
  - id: pincode_reader
    source_id: mykeypad
    min_length: 1
    max_length: 4
    back_keys: ""*""
    end_key_required: false
    clear_keys: ""#""
    allowed_keys: ""0124578""
    timeout: 4s
    on_progress:
      - logger.log:
          format: ""input progress: '%s', started by '%c'""
          args: [ 'x.c_str()', ""(start == 0 ? '~' : start)"" ]

      - text_sensor.template.publish:
          id: keypadp
          state: !lambda ""return x.c_str();"" 

    on_result:
      then:
        
        - logger.log:
            format: ""input result: '%s', started by '%c', ended by '%c''x.c_str()'""
            args: [ 'x.c_str()', ""(start == 0 ? '~' : start)"", ""(end == 0 ? '~' : end)"" ]

        - text_sensor.template.publish:
            id: keypad
            state: !lambda ""return x.c_str();""  

        - delay: 2s
        
        - text_sensor.template.publish:
            id: keypad
            state: """"
    
  - id: pincode_reader2
    source_id: mykeypad
    min_length: 1
    max_length: 4
    back_keys: ""*""
    end_key_required: false
    clear_keys: ""#""
    allowed_keys: ""0124578""
    timeout: 4s

    on_progress:
      - script.stop: timer
      - script.execute: timer

      - if:
          condition:
            lambda: 'return id(page).state != ""1"";'
          then:
            - text_sensor.template.publish:
                id: page
                state: ""2""
            - display.page.show: page2

      - text_sensor.template.publish:
          id: page
          state: ""2""

      - switch.turn_on: buzzer
      - delay: 100ms 
      - switch.turn_off: buzzer
      
      - logger.log:
          format: ""input progress: '%s', started by '%c'""
          args: [ 'x.c_str()', ""(start == 0 ? '~' : start)"" ]

      - text_sensor.template.publish:
          id: kpad
          state: !lambda ""return std::string(x.length(), 'x').c_str();""

    on_result:

      - script.stop: timer
      - text_sensor.template.publish:
          id: kpad
          state: """"

      - if:
          condition:
            lambda: 'return id(allarme_scattato).state == ""on"";'
          then:
            - display.page.show: page4
          else:
            - display.page.show: page1

      - text_sensor.template.publish:
          id: page
          state: ""1""

    on_timeout:
      - script.stop: timer
      - logger.log:
          format: ""input timeout: '%s', started by '%c'""
          args: [ 'x.c_str()', ""(start == 0 ? '~' : start)"" ]

      - text_sensor.template.publish:
          id: kpad
          state: !lambda ""return x.c_str();"" 

      - if:
          condition:
            lambda: 'return id(allarme_scattato).state == ""on"";'
          then:
            - display.page.show: page4
          else:
            - display.page.show: page1

      - text_sensor.template.publish:
          id: page
          state: ""1""

################################################################################
##                  Script
################################################
script:
  id: timer
  then:
    - delay: 4s
    - if:
        condition:
          lambda: 'return id(allarme_scattato).state == ""on"";'
        then:
          - display.page.show: page4
        else:
          - display.page.show: page1

################################################################################
##                  Display
################################################
display:
  - platform: ssd1306_i2c
    model: ""SSD1306 128x64""
    reset_pin: GPIO23
    address: 0x3C
    id: my_display
    pages:
      - id: page1
        lambda: |-
          it.clear();
          it.printf(64, 3, id(font1), TextAlign::TOP_CENTER, ""Allarme"");
          it.image(2, 2, id(alert));
          it.line(1, 0, 124, 0);
          it.line(1, 63, 124, 63);
          it.line(0, 1, 0, 62);
          it.line(125, 1, 125, 62);

          if (id(alarm_state).state.length() == 0) {
            it.printf(64, 24, id(font2), TextAlign::TOP_CENTER, ""Starting"");
          } else if (id(alarm_state).state == ""Attivo"") {
            it.printf(64, 24, id(font2), TextAlign::TOP_CENTER, id(alarm_state).state.c_str());
          } else if (id(alarm_state).state == ""...Avvio"") {
            it.printf(64, 24, id(font2), TextAlign::TOP_CENTER, id(alarm_state).state.c_str());
          } else if (id(alarm_state).state == ""Disattivato"") {
            it.clear();
          } else {
            it.clear();
          }

      - id: page2
        lambda: |-
          it.printf(64, 10, id(font3), TextAlign::TOP_CENTER, id(kpad).state.c_str());
          
      - id: page3
        lambda: |-
          it.image(50, 2, id(ok));
          it.printf(64, 30, id(font4), TextAlign::TOP_CENTER, id(fingerprint_state).state.c_str());

      - id: page4
        lambda: |-
          it.clear();
          it.printf(64, 3, id(font1), TextAlign::TOP_CENTER, ""Allarme"");
          
          static bool flashText = false;
          flashText = !flashText;
          if (flashText) {
            it.printf(64, 24, id(font2), TextAlign::TOP_CENTER, ""Scattato"");
          }
          
          it.image(2, 2, id(alert));
          it.line(1, 0, 124, 0);
          it.line(1, 63, 124, 63);
          it.line(0, 1, 0, 62);
          it.line(125, 1, 125, 62);

      - id: page5
        lambda: |-
          it.printf(64, 3, id(font1), TextAlign::TOP_CENTER, ""Poggia"");
          it.printf(64, 30, id(font4), TextAlign::TOP_CENTER, ""Meglio"");

################################################################################
##                  Text Sensor
################################################
text_sensor:
  - platform: homeassistant
    entity_id: sensor.stato_allarme_pad_oled
    name: ""Stato Allarme""
    id: alarm_state

  - platform: homeassistant
    entity_id: sensor.stato_allarme
    name: ""Stato Allarme""
    id: allarme

  - platform: homeassistant
    name: ""Allarme Scattato""
    entity_id: input_boolean.allarme_scattato
    id: allarme_scattato
    internal: true

  - platform: homeassistant
    name: ""input""
    id: input
    entity_id: sensor.pad_oled_allarme_keypad_code
    internal: true
              
  - platform: homeassistant
    name: ""error""
    id: error
    entity_id: sensor.counter_code_error
    internal: true

  - platform: wifi_info
    ip_address:
      name: ""${esp_devicename} IP""
      icon: ""mdi:lan""

  - platform: template
    name: ""Keypad code""
    id: keypad 
    
  - platform: template # Visualizza i numeri sul display
    name: ""Keypad OLED""
    id: kpad
    internal: true
    
  - platform: template
    name: ""page""
    id: page
    internal: true

  - platform: template
    id: fingerprint_state
    name: ""Stato impronta""

  - platform: template
    name: ""Keypad code test""
    id: keypadp

################################################################################
##                  SENSOR
################################################
sensor:
  - platform: wifi_signal
    name: ""${esp_devicename} WiFi Signal""
    update_interval: 10s

  - platform: fingerprint_grow
    fingerprint_count:
      name: ""Conta impronte""
    last_finger_id:
      name: ""Ultimo ID impronta""
    last_confidence:
      name: ""Affidabilità ultima impronta""
    status:
      name: ""Stato impronta""
    capacity:
      name: ""Capacità impronta""
    security_level:
      name: ""Livello di sicurezza""

################################################################################
##                  Binary Sensor
################################################
binary_sensor:
  - platform: fingerprint_grow
    id: fingerprint_enrolling
    name: ""Acquisendo impronta""

  - platform: template # Allarme Disattivato
    name: ""Allarme Disattivato""
    internal: true
    lambda: |-
      if (id(alarm_state).state == ""Disattivato"") {
        return true;
      } else {
        return false;
      }
    on_press:
      - while:
          condition:
            lambda: |-
              if (id(alarm_state).state == ""Disattivato"") {
                return true;
              } else {
                return false;
              }
          then:
            - output.turn_on: led_blu
            - delay: 50ms
            - output.turn_off: led_blu
            - delay: 3s

  - platform: template # Allarme Scattato LED
    name: ""Allarme Scattato""
    internal: true
    lambda: |-
      if (id(allarme_scattato).state == ""on"") {
        return true;
      } else {
        return false;
      }
    on_press:
      - while:
          condition:
            lambda: |-
              if (id(allarme_scattato).state == ""on"") {
                return true;
              } else {
                return false;
              }
          then:
            - output.turn_on: led_blu
            - delay: 300ms
            - output.turn_off: led_blu
            - output.turn_on: led_rosso
            - delay: 300ms
            - output.turn_off: led_rosso

  - platform: template # Allarme Attivo
    name: ""Allarme Attivo""
    internal: true
    lambda: |-
      if (id(alarm_state).state == ""Attivo"") {
        return true;
      } else {
        return false;
      }
    on_press:
      - while:
          condition:
            lambda: |-
              if (id(alarm_state).state == ""Attivo"") {
                return true;
              } else {
                return false;
              }
          then:
            - output.turn_on: led_rosso
            - delay: 80ms
            - output.turn_off: led_rosso
            - delay: 80ms
            - output.turn_on: led_rosso
            - delay: 80ms
            - output.turn_off: led_rosso
            - delay: 3s

  - platform: template # Allarme Pedding
    name: ""Allarme Pedding""
    internal: true
    lambda: |-
      if (id(alarm_state).state == ""...Avvio"") {
        return true;
      } else {
        return false;
      }
    on_press:
      - while:
          condition:
            lambda: |-
              if (id(alarm_state).state == ""...Avvio"") {
                return true;
              } else {
                return false;
              }
          then:
            - output.turn_on: led_giallo
            - delay: 500ms 
            - output.turn_off: led_giallo
            - delay: 500ms

  - platform: template # Allarme Scattato
    name: ""Allarme Scat""
    internal: true
    lambda: |-
      if (id(allarme_scattato).state == ""on"") {
        return true;
      } else {
        return false;
      }
    on_press:
      then:
        - display.page.show: page4
    on_release:
      then:
        - display.page.show: page1

################################################################################
##                  OUTPUT
################################################
output:
  - platform: ledc
    pin: GPIO15
    id: buzzer_output

  - platform: ledc
    id: led_verde
    pin: GPIO19

  - platform: ledc
    id: led_giallo
    pin: GPIO18  

  - platform: ledc
    id: led_rosso
    pin: GPIO4

  - platform: ledc
    id: led_blu
    pin: GPIO2

################################################################################
##                  RTTTL
################################################
rtttl:
  output: buzzer_output

################################################################################
##                  Switch
################################################
switch:
  - platform: output 
    internal: true
    name: 'buzzer'
    id: buzzer
    output: buzzer_output
    on_turn_on: 
      then:
        - output.turn_on: buzzer_output
        - output.ledc.set_frequency:
            id: buzzer_output
            frequency: ""2000Hz""
        - output.set_level:
            id: buzzer_output
            level: ""90%""

    on_turn_off:
      then:
        - output.turn_off: buzzer_output

  - platform: output 
    internal: true
    name: 'buzzer error'
    id: buzzer_error
    output: buzzer_output
    on_turn_on: 
      then:
        - output.turn_on: buzzer_output
        - output.ledc.set_frequency:
            id: buzzer_output
            frequency: ""200Hz""
        - output.set_level:
            id: buzzer_output
            level: ""90%""

    on_turn_off:
      then:
        - output.turn_off: buzzer_output

  - platform: restart
    name: ""Restart Pad""
    id: restart_switch"
DBSPD1as,Untitled,Chefir,C#,Saturday 7th of October 2023 04:44:36 PM CDT,"static void Main(string[] args)
        {
            double healthBar;
            int manabar = 10;
            string symbol;
            Console.Write(""Введите символ для заполннения бара: "");
            symbol = Console.ReadLine();
            Console.Write(""Введите процент заполнения бара: "");
            healthBar = Convert.ToInt32(Console.ReadLine());
            DrawBar(manabar, healthBar, symbol);  
        }

        static void DrawBar(int manabar, double healthBar, string symbol)
        {
            if ( healthBar >= 0 && healthBar <= 100)
            {
                int currentValue = (int)Math.Round (manabar * (healthBar / 100));
                string bar = """";

                for (int i = 0; i < currentValue; i++)
                {
                    bar += symbol;
                }

                Console.Write('[');
                Console.Write(bar);
                bar = """";

                for (int i = 0; i < (manabar - currentValue); i++)
                {
                    bar += ""_"";
                }

                Console.Write(bar + ']');
            }
            else
            {
                Console.WriteLine(""Введено отрицательное или превышающее предел значение"");
            }
        }"
d0Drsjim,sm02-4 algorithm,igreetyou,C++,Saturday 7th of October 2023 04:21:20 PM CDT,"#include <iostream>

int array[1001];

int main() {
    array[0 * 2 + 1] = -1;
    int size = 1;
    int option_id;
    while (std::cin >> option_id) {
        if (option_id == 0) {//push
            int parent_index, value;
            std::cin >> parent_index >> value;
            array[size * 2] = value;
            array[size * 2 + 1] = parent_index;
            ++size;
        } else {//pop
            int parent_index;
            std::cin >> parent_index;
            int grandpa_index = array[parent_index * 2 + 1];
            if (grandpa_index == -1) {
                std::cout << -1 << '\n';
            } else {
                std::cout << array[parent_index * 2] << '\n';
                array[size * 2] = array[grandpa_index * 2];
                array[size * 2 + 1] = array[grandpa_index * 2 + 1];
                ++size;
            }
        }
    }
}
"
4qUvaDYs,Aqara EU smart plug (SP-EUC01),mroizo0,JSON,Saturday 7th of October 2023 04:12:03 PM CDT,"{
  ""availability"": [
    {
      ""topic"": ""zigbee2mqtt/bridge/state""
    }
  ],
  ""device"": {
    ""identifiers"": [
      ""zigbee2mqtt_0x54ef44100075de65""
    ],
    ""manufacturer"": ""Xiaomi"",
    ""model"": ""Aqara EU smart plug (SP-EUC01)"",
    ""name"": ""plug_1""
  },
  ""device_class"": ""update"",
  ""enabled_by_default"": false,
  ""entity_category"": ""diagnostic"",
  ""json_attributes_topic"": ""zigbee2mqtt/plug_1"",
  ""name"": null,
  ""object_id"": ""plug_1_update_available"",
  ""origin"": {
    ""name"": ""Zigbee2MQTT"",
    ""sw"": ""1.33.1-dev"",
    ""url"": ""https://www.zigbee2mqtt.io""
  },
  ""payload_off"": false,
  ""payload_on"": true,
  ""state_topic"": ""zigbee2mqtt/plug_1"",
  ""unique_id"": ""0x54ef44100075de65_update_available_zigbee2mqtt"",
  ""value_template"": ""{{ value_json['update']['state'] == \""available\"" }}""
}"
27WBey32,iniold,REALshocK,PHP,Saturday 7th of October 2023 04:01:46 PM CDT,"{
   ""aimbot"" : {
      ""aimdafs"" : false,
      ""autoshoot"" : false,
      ""autowall"" : false,
      ""autowalldmg"" : 0,
      ""factor"" : 1,
      ""firstshotdelay"" : 0,
      ""flashcheck"" : false,
      ""focustarget"" : false,
      ""fov"" : 1.5,
      ""friendlyfire"" : false,
      ""hitbox"" : 1,
      ""hitscan"" : 1,
      ""ignorejump"" : false,
      ""key"" : 1,
      ""mode"" : 2,
      ""multipoint"" : false,
      ""nonsticky"" : false,
      ""norecoil"" : false,
      ""overtime"" : 0,
      ""psilent"" : false,
      ""rcs"" : 0,
      ""rcspitch"" : 0,
      ""rcsyaw"" : 0,
      ""rndsmooth"" : false,
      ""smokecheck"" : true,
      ""smooth"" : 1,
      ""smoothmode"" : 0,
      ""spherefov"" : false,
      ""time"" : 35,
      ""visibletimeout"" : 0,
      ""weaponsettings"" : true
   },
   ""misc"" : {
      ""autoaccept"" : true,
      ""autoknife"" : true,
      ""autostrafe"" : false,
      ""backtrack"" : true,
      ""backtracktime"" : 200,
      ""bunnyhop"" : true,
      ""clantag"" : 1,
      ""clantag_text"" : ""BhopUnited ~"",
      ""damageindicator"" : 0,
      ""edgejumpkey"" : 6,
      ""enemyinfo"" : false,
      ""fakelag"" : 0,
      ""fakelagkey"" : 0,
      ""fakelagticks"" : 0,
      ""fov"" : 90,
      ""fovchanger"" : false,
      ""hidewatermark"" : true,
      ""hitmarker"" : 2,
      ""lbyresolver"" : false,
      ""legitaadesync"" : 0,
      ""rankrevealer"" : true,
      ""runboostkey"" : 0,
      ""serverac"" : false,
      ""skychanger"" : 0,
      ""slidewalk"" : false,
      ""slowwalkkey"" : 0,
      ""standalonequickstop"" : false,
      ""thirdpersonkey"" : 0,
      ""viewmodel"" : 90
   },
   ""triggerbot"" : {
      ""aimhitbox"" : 1,
      ""aimkey"" : 0,
      ""autostop"" : false,
      ""backtrack"" : true,
      ""burst"" : 0,
      ""delay"" : 0,
      ""flashcheck"" : false,
      ""fov"" : 0,
      ""hitboxchest"" : true,
      ""hitboxhead"" : true,
      ""hitboxleftarm"" : false,
      ""hitboxleftleg"" : false,
      ""hitboxrightarm"" : false,
      ""hitboxrightleg"" : false,
      ""hitboxstomach"" : true,
      ""hitchance"" : 66,
      ""key"" : 5,
      ""mode"" : 0,
      ""smokecheck"" : false,
      ""smooth"" : 0,
      ""weaponsettings"" : false
   },
   ""visual"" : {
      ""autowallcrosshair"" : false,
      ""bombinfopanel"" : 2,
      ""bombinfopanelx"" : 1152,
      ""bombinfopanely"" : 310,
      ""box"" : 0,
      ""bullettracer"" : 0,
      ""c4"" : 3,
      ""chams"" : 2,
      ""chamsvisibleonly"" : true,
      ""crosshair"" : 2,
      ""defuse"" : true,
      ""distance"" : false,
      ""draw"" : 0,
      ""drawbacktrack"" : 0,
      ""drawfov"" : false,
      ""drop"" : 2,
      ""enemyonly"" : true,
      ""fakechams"" : false,
      ""faresp"" : true,
      ""faresptimeout"" : 500,
      ""glow"" : 0,
      ""grenadehelper"" : 2,
      ""grenadehelperkey"" : 4,
      ""grenadeprediction"" : true,
      ""grenadetracer"" : 1,
      ""headdot"" : true,
      ""health"" : true,
      ""healthbar"" : 0,
      ""healthbarsize"" : 0,
      ""loot"" : 3,
      ""name"" : false,
      ""nightmodescale"" : 30,
      ""radar"" : false,
      ""radarhack"" : true,
      ""radarsize"" : 150,
      ""radarx"" : 0,
      ""radary"" : 0,
      ""rank"" : false,
      ""skeleton"" : true,
      ""sniperonly"" : true,
      ""spectatingme"" : true,
      ""steps"" : 0,
      ""style"" : 0,
      ""traceline"" : false,
      ""visible"" : true,
      ""walls"" : 0,
      ""weapon"" : false
   },
   ""weapons"" : {
      ""AK-47"" : {
         ""aimbot"" : {
            ""aimdafs"" : false,
            ""autowall"" : false,
            ""autowalldmg"" : 0,
            ""factor"" : 1,
            ""firstshotdelay"" : 0,
            ""focus"" : false,
            ""fov"" : 8.8000001907348633,
            ""hitbox"" : 1,
            ""hitscan"" : 0,
            ""ignorejump"" : false,
            ""multipoint"" : false,
            ""nonsticky"" : false,
            ""overtime"" : 0,
            ""psilent"" : false,
            ""rcs"" : 3,
            ""rcspitch"" : 0,
            ""rcsyaw"" : 0,
            ""rndsmooth"" : false,
            ""smooth"" : 2,
            ""smoothmode"" : 6,
            ""spherefov"" : false,
            ""time"" : 0,
            ""visibletimeout"" : 0,
            ""weaponid"" : 7
         },
         ""triggerbot"" : {
            ""aimhitbox"" : 0,
            ""autostop"" : false,
            ""backtrack"" : false,
            ""burst"" : 2,
            ""delay"" : 0,
            ""flashcheck"" : false,
            ""fov"" : 0,
            ""hitbox_chest"" : true,
            ""hitbox_head"" : true,
            ""hitbox_leftarm"" : false,
            ""hitbox_leftleg"" : false,
            ""hitbox_rightarm"" : false,
            ""hitbox_rightleg"" : false,
            ""hitbox_stomach"" : false,
            ""hitchance"" : 50,
            ""smokecheck"" : false,
            ""smooth"" : 0
         }
      },
      ""AUG"" : {
         ""aimbot"" : {
            ""aimdafs"" : false,
            ""autowall"" : false,
            ""autowalldmg"" : 0,
            ""factor"" : 1,
            ""firstshotdelay"" : 0,
            ""focus"" : false,
            ""fov"" : 6,
            ""hitbox"" : 1,
            ""hitscan"" : 0,
            ""ignorejump"" : false,
            ""multipoint"" : false,
            ""nonsticky"" : false,
            ""overtime"" : 0,
            ""psilent"" : false,
            ""rcs"" : 3,
            ""rcspitch"" : 0,
            ""rcsyaw"" : 0,
            ""rndsmooth"" : false,
            ""smooth"" : 2,
            ""smoothmode"" : 6,
            ""spherefov"" : false,
            ""time"" : 0,
            ""visibletimeout"" : 0,
            ""weaponid"" : 8
         },
         ""triggerbot"" : {
            ""aimhitbox"" : 0,
            ""autostop"" : false,
            ""backtrack"" : false,
            ""burst"" : 0,
            ""delay"" : 0,
            ""flashcheck"" : false,
            ""fov"" : 0,
            ""hitbox_chest"" : false,
            ""hitbox_head"" : true,
            ""hitbox_leftarm"" : false,
            ""hitbox_leftleg"" : false,
            ""hitbox_rightarm"" : false,
            ""hitbox_rightleg"" : false,
            ""hitbox_stomach"" : false,
            ""hitchance"" : 50,
            ""smokecheck"" : false,
            ""smooth"" : 0
         }
      },
      ""AWP"" : {
         ""aimbot"" : {
            ""aimdafs"" : false,
            ""autowall"" : false,
            ""autowalldmg"" : 0,
            ""factor"" : 0,
            ""firstshotdelay"" : 0,
            ""focus"" : false,
            ""fov"" : 4,
            ""hitbox"" : 10,
            ""hitscan"" : 1,
            ""ignorejump"" : false,
            ""multipoint"" : false,
            ""nonsticky"" : false,
            ""overtime"" : 0,
            ""psilent"" : false,
            ""rcs"" : 0,
            ""rcspitch"" : 0,
            ""rcsyaw"" : 0,
            ""rndsmooth"" : false,
            ""smooth"" : 0,
            ""smoothmode"" : 0,
            ""spherefov"" : false,
            ""time"" : 25,
            ""visibletimeout"" : 0,
            ""weaponid"" : 9
         },
         ""triggerbot"" : {
            ""aimhitbox"" : 0,
            ""autostop"" : false,
            ""backtrack"" : false,
            ""burst"" : 0,
            ""delay"" : 0,
            ""flashcheck"" : false,
            ""fov"" : 0,
            ""hitbox_chest"" : true,
            ""hitbox_head"" : true,
            ""hitbox_leftarm"" : false,
            ""hitbox_leftleg"" : false,
            ""hitbox_rightarm"" : false,
            ""hitbox_rightleg"" : false,
            ""hitbox_stomach"" : true,
            ""hitchance"" : 50,
            ""smokecheck"" : false,
            ""smooth"" : 0
         }
      },
      ""CZ75-Auto"" : {
         ""aimbot"" : {
            ""aimdafs"" : false,
            ""autowall"" : false,
            ""autowalldmg"" : 0,
            ""factor"" : 0,
            ""firstshotdelay"" : 0,
            ""focus"" : false,
            ""fov"" : 2,
            ""hitbox"" : 1,
            ""hitscan"" : 0,
            ""ignorejump"" : false,
            ""multipoint"" : false,
            ""nonsticky"" : false,
            ""overtime"" : 0,
            ""psilent"" : false,
            ""rcs"" : 1,
            ""rcspitch"" : 0,
            ""rcsyaw"" : 0,
            ""rndsmooth"" : false,
            ""smooth"" : 0,
            ""smoothmode"" : 0,
            ""spherefov"" : false,
            ""time"" : 0,
            ""visibletimeout"" : 0,
            ""weaponid"" : 63
         },
         ""triggerbot"" : {
            ""aimhitbox"" : 0,
            ""autostop"" : false,
            ""backtrack"" : false,
            ""burst"" : 0,
            ""delay"" : 0,
            ""flashcheck"" : false,
            ""fov"" : 0,
            ""hitbox_chest"" : false,
            ""hitbox_head"" : true,
            ""hitbox_leftarm"" : false,
            ""hitbox_leftleg"" : false,
            ""hitbox_rightarm"" : false,
            ""hitbox_rightleg"" : false,
            ""hitbox_stomach"" : false,
            ""hitchance"" : 50,
            ""smokecheck"" : false,
            ""smooth"" : 0
         }
      },
      ""Desert Eagle"" : {
         ""aimbot"" : {
            ""aimdafs"" : false,
            ""autowall"" : false,
            ""autowalldmg"" : 0,
            ""factor"" : 0,
            ""firstshotdelay"" : 0,
            ""focus"" : false,
            ""fov"" : 1.7999999523162842,
            ""hitbox"" : 1,
            ""hitscan"" : 1,
            ""ignorejump"" : false,
            ""multipoint"" : false,
            ""nonsticky"" : false,
            ""overtime"" : 0,
            ""psilent"" : false,
            ""rcs"" : 0,
            ""rcspitch"" : 0,
            ""rcsyaw"" : 0,
            ""rndsmooth"" : false,
            ""smooth"" : 0,
            ""smoothmode"" : 0,
            ""spherefov"" : false,
            ""time"" : 35,
            ""visibletimeout"" : 20,
            ""weaponid"" : 1
         },
         ""triggerbot"" : {
            ""aimhitbox"" : 0,
            ""autostop"" : false,
            ""backtrack"" : false,
            ""burst"" : 0,
            ""delay"" : 0,
            ""flashcheck"" : false,
            ""fov"" : 0,
            ""hitbox_chest"" : false,
            ""hitbox_head"" : true,
            ""hitbox_leftarm"" : false,
            ""hitbox_leftleg"" : false,
            ""hitbox_rightarm"" : false,
            ""hitbox_rightleg"" : false,
            ""hitbox_stomach"" : false,
            ""hitchance"" : 40,
            ""smokecheck"" : false,
            ""smooth"" : 0
         }
      },
      ""Dual Berettas"" : {
         ""aimbot"" : {
            ""aimdafs"" : false,
            ""autowall"" : false,
            ""autowalldmg"" : 0,
            ""factor"" : 0,
            ""firstshotdelay"" : 0,
            ""focus"" : false,
            ""fov"" : 2,
            ""hitbox"" : 1,
            ""hitscan"" : 0,
            ""ignorejump"" : false,
            ""multipoint"" : false,
            ""nonsticky"" : false,
            ""overtime"" : 0,
            ""psilent"" : false,
            ""rcs"" : 1,
            ""rcspitch"" : 0,
            ""rcsyaw"" : 0,
            ""rndsmooth"" : false,
            ""smooth"" : 0,
            ""smoothmode"" : 0,
            ""spherefov"" : false,
            ""time"" : 30,
            ""visibletimeout"" : 0,
            ""weaponid"" : 2
         },
         ""triggerbot"" : {
            ""aimhitbox"" : 0,
            ""autostop"" : false,
            ""backtrack"" : false,
            ""burst"" : 0,
            ""delay"" : 0,
            ""flashcheck"" : false,
            ""fov"" : 0,
            ""hitbox_chest"" : false,
            ""hitbox_head"" : true,
            ""hitbox_leftarm"" : false,
            ""hitbox_leftleg"" : false,
            ""hitbox_rightarm"" : false,
            ""hitbox_rightleg"" : false,
            ""hitbox_stomach"" : false,
            ""hitchance"" : 50,
            ""smokecheck"" : false,
            ""smooth"" : 0
         }
      },
      ""FAMAS"" : {
         ""aimbot"" : {
            ""aimdafs"" : false,
            ""autowall"" : false,
            ""autowalldmg"" : 0,
            ""factor"" : 0,
            ""firstshotdelay"" : 0,
            ""focus"" : false,
            ""fov"" : 8,
            ""hitbox"" : 1,
            ""hitscan"" : 0,
            ""ignorejump"" : false,
            ""multipoint"" : false,
            ""nonsticky"" : false,
            ""overtime"" : 0,
            ""psilent"" : false,
            ""rcs"" : 3,
            ""rcspitch"" : 0,
            ""rcsyaw"" : 0,
            ""rndsmooth"" : false,
            ""smooth"" : 2,
            ""smoothmode"" : 6,
            ""spherefov"" : false,
            ""time"" : 0,
            ""visibletimeout"" : 0,
            ""weaponid"" : 10
         },
         ""triggerbot"" : {
            ""aimhitbox"" : 0,
            ""autostop"" : false,
            ""backtrack"" : false,
            ""burst"" : 2,
            ""delay"" : 0,
            ""flashcheck"" : false,
            ""fov"" : 0,
            ""hitbox_chest"" : false,
            ""hitbox_head"" : true,
            ""hitbox_leftarm"" : false,
            ""hitbox_leftleg"" : false,
            ""hitbox_rightarm"" : false,
            ""hitbox_rightleg"" : false,
            ""hitbox_stomach"" : false,
            ""hitchance"" : 50,
            ""smokecheck"" : false,
            ""smooth"" : 0
         }
      },
      ""Five-SeveN"" : {
         ""aimbot"" : {
            ""aimdafs"" : false,
            ""autowall"" : false,
            ""autowalldmg"" : 0,
            ""factor"" : 0,
            ""firstshotdelay"" : 0,
            ""focus"" : false,
            ""fov"" : 2,
            ""hitbox"" : 1,
            ""hitscan"" : 0,
            ""ignorejump"" : false,
            ""multipoint"" : false,
            ""nonsticky"" : false,
            ""overtime"" : 0,
            ""psilent"" : false,
            ""rcs"" : 0,
            ""rcspitch"" : 0,
            ""rcsyaw"" : 0,
            ""rndsmooth"" : false,
            ""smooth"" : 0,
            ""smoothmode"" : 0,
            ""spherefov"" : false,
            ""time"" : 30,
            ""visibletimeout"" : 0,
            ""weaponid"" : 3
         },
         ""triggerbot"" : {
            ""aimhitbox"" : 0,
            ""autostop"" : false,
            ""backtrack"" : false,
            ""burst"" : 0,
            ""delay"" : 0,
            ""flashcheck"" : false,
            ""fov"" : 0,
            ""hitbox_chest"" : false,
            ""hitbox_head"" : true,
            ""hitbox_leftarm"" : false,
            ""hitbox_leftleg"" : false,
            ""hitbox_rightarm"" : false,
            ""hitbox_rightleg"" : false,
            ""hitbox_stomach"" : false,
            ""hitchance"" : 50,
            ""smokecheck"" : false,
            ""smooth"" : 0
         }
      },
      ""G3SG1"" : {
         ""aimbot"" : {
            ""aimdafs"" : false,
            ""autowall"" : false,
            ""autowalldmg"" : 0,
            ""factor"" : 0,
            ""firstshotdelay"" : 0,
            ""focus"" : false,
            ""fov"" : 4,
            ""hitbox"" : 1,
            ""hitscan"" : 0,
            ""ignorejump"" : false,
            ""multipoint"" : false,
            ""nonsticky"" : false,
            ""overtime"" : 0,
            ""psilent"" : false,
            ""rcs"" : 1,
            ""rcspitch"" : 0,
            ""rcsyaw"" : 0,
            ""rndsmooth"" : false,
            ""smooth"" : 1,
            ""smoothmode"" : 0,
            ""spherefov"" : false,
            ""time"" : 0,
            ""visibletimeout"" : 0,
            ""weaponid"" : 11
         },
         ""triggerbot"" : {
            ""aimhitbox"" : 0,
            ""autostop"" : false,
            ""backtrack"" : false,
            ""burst"" : 0,
            ""delay"" : 0,
            ""flashcheck"" : false,
            ""fov"" : 0,
            ""hitbox_chest"" : false,
            ""hitbox_head"" : true,
            ""hitbox_leftarm"" : false,
            ""hitbox_leftleg"" : false,
            ""hitbox_rightarm"" : false,
            ""hitbox_rightleg"" : false,
            ""hitbox_stomach"" : false,
            ""hitchance"" : 50,
            ""smokecheck"" : false,
            ""smooth"" : 0
         }
      },
      ""Galil AR"" : {
         ""aimbot"" : {
            ""aimdafs"" : false,
            ""autowall"" : false,
            ""autowalldmg"" : 0,
            ""factor"" : 1,
            ""firstshotdelay"" : 0,
            ""focus"" : false,
            ""fov"" : 8,
            ""hitbox"" : 1,
            ""hitscan"" : 1,
            ""ignorejump"" : false,
            ""multipoint"" : false,
            ""nonsticky"" : false,
            ""overtime"" : 0,
            ""psilent"" : false,
            ""rcs"" : 3,
            ""rcspitch"" : 0,
            ""rcsyaw"" : 0,
            ""rndsmooth"" : false,
            ""smooth"" : 2,
            ""smoothmode"" : 6,
            ""spherefov"" : false,
            ""time"" : 0,
            ""visibletimeout"" : 0,
            ""weaponid"" : 13
         },
         ""triggerbot"" : {
            ""aimhitbox"" : 0,
            ""autostop"" : false,
            ""backtrack"" : false,
            ""burst"" : 2,
            ""delay"" : 0,
            ""flashcheck"" : false,
            ""fov"" : 0,
            ""hitbox_chest"" : true,
            ""hitbox_head"" : true,
            ""hitbox_leftarm"" : false,
            ""hitbox_leftleg"" : false,
            ""hitbox_rightarm"" : false,
            ""hitbox_rightleg"" : false,
            ""hitbox_stomach"" : false,
            ""hitchance"" : 50,
            ""smokecheck"" : false,
            ""smooth"" : 0
         }
      },
      ""Glock-18"" : {
         ""aimbot"" : {
            ""aimdafs"" : false,
            ""autowall"" : false,
            ""autowalldmg"" : 0,
            ""factor"" : 0,
            ""firstshotdelay"" : 0,
            ""focus"" : false,
            ""fov"" : 1,
            ""hitbox"" : 1,
            ""hitscan"" : 1,
            ""ignorejump"" : false,
            ""multipoint"" : false,
            ""nonsticky"" : false,
            ""overtime"" : 0,
            ""psilent"" : false,
            ""rcs"" : 0,
            ""rcspitch"" : 0,
            ""rcsyaw"" : 0,
            ""rndsmooth"" : false,
            ""smooth"" : 0,
            ""smoothmode"" : 0,
            ""spherefov"" : false,
            ""time"" : 35,
            ""visibletimeout"" : 0,
            ""weaponid"" : 4
         },
         ""triggerbot"" : {
            ""aimhitbox"" : 0,
            ""autostop"" : false,
            ""backtrack"" : false,
            ""burst"" : 0,
            ""delay"" : 0,
            ""flashcheck"" : false,
            ""fov"" : 0,
            ""hitbox_chest"" : false,
            ""hitbox_head"" : true,
            ""hitbox_leftarm"" : false,
            ""hitbox_leftleg"" : false,
            ""hitbox_rightarm"" : false,
            ""hitbox_rightleg"" : false,
            ""hitbox_stomach"" : false,
            ""hitchance"" : 50,
            ""smokecheck"" : false,
            ""smooth"" : 0
         }
      },
      ""M249"" : {
         ""aimbot"" : {
            ""aimdafs"" : false,
            ""autowall"" : false,
            ""autowalldmg"" : 0,
            ""factor"" : 1,
            ""firstshotdelay"" : 0,
            ""focus"" : false,
            ""fov"" : 8,
            ""hitbox"" : 1,
            ""hitscan"" : 0,
            ""ignorejump"" : false,
            ""multipoint"" : false,
            ""nonsticky"" : false,
            ""overtime"" : 0,
            ""psilent"" : false,
            ""rcs"" : 3,
            ""rcspitch"" : 0,
            ""rcsyaw"" : 0,
            ""rndsmooth"" : false,
            ""smooth"" : 2,
            ""smoothmode"" : 0,
            ""spherefov"" : false,
            ""time"" : 0,
            ""visibletimeout"" : 0,
            ""weaponid"" : 14
         },
         ""triggerbot"" : {
            ""aimhitbox"" : 0,
            ""autostop"" : false,
            ""backtrack"" : false,
            ""burst"" : 0,
            ""delay"" : 0,
            ""flashcheck"" : false,
            ""fov"" : 0,
            ""hitbox_chest"" : false,
            ""hitbox_head"" : true,
            ""hitbox_leftarm"" : false,
            ""hitbox_leftleg"" : false,
            ""hitbox_rightarm"" : false,
            ""hitbox_rightleg"" : false,
            ""hitbox_stomach"" : false,
            ""hitchance"" : 50,
            ""smokecheck"" : false,
            ""smooth"" : 0
         }
      },
      ""M4A1-S"" : {
         ""aimbot"" : {
            ""aimdafs"" : false,
            ""autowall"" : false,
            ""autowalldmg"" : 0,
            ""factor"" : 1,
            ""firstshotdelay"" : 0,
            ""focus"" : false,
            ""fov"" : 8,
            ""hitbox"" : 1,
            ""hitscan"" : 1,
            ""ignorejump"" : false,
            ""multipoint"" : false,
            ""nonsticky"" : false,
            ""overtime"" : 0,
            ""psilent"" : false,
            ""rcs"" : 3,
            ""rcspitch"" : 0,
            ""rcsyaw"" : 0,
            ""rndsmooth"" : false,
            ""smooth"" : 2,
            ""smoothmode"" : 6,
            ""spherefov"" : false,
            ""time"" : 0,
            ""visibletimeout"" : 0,
            ""weaponid"" : 60
         },
         ""triggerbot"" : {
            ""aimhitbox"" : 0,
            ""autostop"" : false,
            ""backtrack"" : false,
            ""burst"" : 2,
            ""delay"" : 0,
            ""flashcheck"" : false,
            ""fov"" : 0,
            ""hitbox_chest"" : true,
            ""hitbox_head"" : true,
            ""hitbox_leftarm"" : false,
            ""hitbox_leftleg"" : false,
            ""hitbox_rightarm"" : false,
            ""hitbox_rightleg"" : false,
            ""hitbox_stomach"" : false,
            ""hitchance"" : 50,
            ""smokecheck"" : false,
            ""smooth"" : 0
         }
      },
      ""M4A4"" : {
         ""aimbot"" : {
            ""aimdafs"" : false,
            ""autowall"" : false,
            ""autowalldmg"" : 0,
            ""factor"" : 1,
            ""firstshotdelay"" : 0,
            ""focus"" : false,
            ""fov"" : 8.8000001907348633,
            ""hitbox"" : 1,
            ""hitscan"" : 1,
            ""ignorejump"" : false,
            ""multipoint"" : false,
            ""nonsticky"" : false,
            ""overtime"" : 0,
            ""psilent"" : false,
            ""rcs"" : 3,
            ""rcspitch"" : 0,
            ""rcsyaw"" : 0,
            ""rndsmooth"" : false,
            ""smooth"" : 2,
            ""smoothmode"" : 6,
            ""spherefov"" : false,
            ""time"" : 0,
            ""visibletimeout"" : 0,
            ""weaponid"" : 16
         },
         ""triggerbot"" : {
            ""aimhitbox"" : 0,
            ""autostop"" : false,
            ""backtrack"" : false,
            ""burst"" : 2,
            ""delay"" : 0,
            ""flashcheck"" : false,
            ""fov"" : 0,
            ""hitbox_chest"" : true,
            ""hitbox_head"" : true,
            ""hitbox_leftarm"" : false,
            ""hitbox_leftleg"" : false,
            ""hitbox_rightarm"" : false,
            ""hitbox_rightleg"" : false,
            ""hitbox_stomach"" : false,
            ""hitchance"" : 50,
            ""smokecheck"" : false,
            ""smooth"" : 0
         }
      },
      ""MAC-10"" : {
         ""aimbot"" : {
            ""aimdafs"" : false,
            ""autowall"" : false,
            ""autowalldmg"" : 0,
            ""factor"" : 1,
            ""firstshotdelay"" : 0,
            ""focus"" : false,
            ""fov"" : 8,
            ""hitbox"" : 1,
            ""hitscan"" : 1,
            ""ignorejump"" : false,
            ""multipoint"" : false,
            ""nonsticky"" : false,
            ""overtime"" : 0,
            ""psilent"" : false,
            ""rcs"" : 3,
            ""rcspitch"" : 0,
            ""rcsyaw"" : 0,
            ""rndsmooth"" : false,
            ""smooth"" : 2,
            ""smoothmode"" : 0,
            ""spherefov"" : false,
            ""time"" : 0,
            ""visibletimeout"" : 0,
            ""weaponid"" : 17
         },
         ""triggerbot"" : {
            ""aimhitbox"" : 0,
            ""autostop"" : false,
            ""backtrack"" : false,
            ""burst"" : 3,
            ""delay"" : 0,
            ""flashcheck"" : false,
            ""fov"" : 0,
            ""hitbox_chest"" : false,
            ""hitbox_head"" : true,
            ""hitbox_leftarm"" : false,
            ""hitbox_leftleg"" : false,
            ""hitbox_rightarm"" : false,
            ""hitbox_rightleg"" : false,
            ""hitbox_stomach"" : false,
            ""hitchance"" : 50,
            ""smokecheck"" : false,
            ""smooth"" : 0
         }
      },
      ""MAG-7"" : {
         ""aimbot"" : {
            ""aimdafs"" : false,
            ""autowall"" : false,
            ""autowalldmg"" : 0,
            ""factor"" : 0,
            ""firstshotdelay"" : 0,
            ""focus"" : false,
            ""fov"" : 3,
            ""hitbox"" : 1,
            ""hitscan"" : 1,
            ""ignorejump"" : false,
            ""multipoint"" : false,
            ""nonsticky"" : false,
            ""overtime"" : 0,
            ""psilent"" : false,
            ""rcs"" : 0,
            ""rcspitch"" : 0,
            ""rcsyaw"" : 0,
            ""rndsmooth"" : false,
            ""smooth"" : 0,
            ""smoothmode"" : 0,
            ""spherefov"" : false,
            ""time"" : 30,
            ""visibletimeout"" : 0,
            ""weaponid"" : 27
         },
         ""triggerbot"" : {
            ""aimhitbox"" : 0,
            ""autostop"" : false,
            ""backtrack"" : false,
            ""burst"" : 0,
            ""delay"" : 0,
            ""flashcheck"" : false,
            ""fov"" : 0,
            ""hitbox_chest"" : false,
            ""hitbox_head"" : true,
            ""hitbox_leftarm"" : false,
            ""hitbox_leftleg"" : false,
            ""hitbox_rightarm"" : false,
            ""hitbox_rightleg"" : false,
            ""hitbox_stomach"" : false,
            ""hitchance"" : 50,
            ""smokecheck"" : false,
            ""smooth"" : 0
         }
      },
      ""MP5-SD"" : {
         ""aimbot"" : {
            ""aimdafs"" : false,
            ""autowall"" : false,
            ""autowalldmg"" : 0,
            ""factor"" : 1,
            ""firstshotdelay"" : 0,
            ""focus"" : false,
            ""fov"" : 6,
            ""hitbox"" : 1,
            ""hitscan"" : 0,
            ""ignorejump"" : false,
            ""multipoint"" : false,
            ""nonsticky"" : false,
            ""overtime"" : 0,
            ""psilent"" : false,
            ""rcs"" : 3,
            ""rcspitch"" : 0,
            ""rcsyaw"" : 0,
            ""rndsmooth"" : false,
            ""smooth"" : 2,
            ""smoothmode"" : 0,
            ""spherefov"" : false,
            ""time"" : 0,
            ""visibletimeout"" : 0,
            ""weaponid"" : 23
         },
         ""triggerbot"" : {
            ""aimhitbox"" : 0,
            ""autostop"" : false,
            ""backtrack"" : false,
            ""burst"" : 0,
            ""delay"" : 0,
            ""flashcheck"" : false,
            ""fov"" : 0,
            ""hitbox_chest"" : false,
            ""hitbox_head"" : false,
            ""hitbox_leftarm"" : false,
            ""hitbox_leftleg"" : false,
            ""hitbox_rightarm"" : false,
            ""hitbox_rightleg"" : false,
            ""hitbox_stomach"" : false,
            ""hitchance"" : 0,
            ""smokecheck"" : false,
            ""smooth"" : 0
         }
      },
      ""MP7"" : {
         ""aimbot"" : {
            ""aimdafs"" : false,
            ""autowall"" : false,
            ""autowalldmg"" : 0,
            ""factor"" : 1,
            ""firstshotdelay"" : 0,
            ""focus"" : false,
            ""fov"" : 6,
            ""hitbox"" : 1,
            ""hitscan"" : 0,
            ""ignorejump"" : false,
            ""multipoint"" : false,
            ""nonsticky"" : false,
            ""overtime"" : 0,
            ""psilent"" : false,
            ""rcs"" : 3,
            ""rcspitch"" : 0,
            ""rcsyaw"" : 0,
            ""rndsmooth"" : false,
            ""smooth"" : 2,
            ""smoothmode"" : 0,
            ""spherefov"" : false,
            ""time"" : 0,
            ""visibletimeout"" : 0,
            ""weaponid"" : 33
         },
         ""triggerbot"" : {
            ""aimhitbox"" : 0,
            ""autostop"" : false,
            ""backtrack"" : false,
            ""burst"" : 3,
            ""delay"" : 0,
            ""flashcheck"" : false,
            ""fov"" : 0,
            ""hitbox_chest"" : false,
            ""hitbox_head"" : true,
            ""hitbox_leftarm"" : false,
            ""hitbox_leftleg"" : false,
            ""hitbox_rightarm"" : false,
            ""hitbox_rightleg"" : false,
            ""hitbox_stomach"" : false,
            ""hitchance"" : 50,
            ""smokecheck"" : false,
            ""smooth"" : 0
         }
      },
      ""MP9"" : {
         ""aimbot"" : {
            ""aimdafs"" : false,
            ""autowall"" : false,
            ""autowalldmg"" : 0,
            ""factor"" : 1,
            ""firstshotdelay"" : 0,
            ""focus"" : false,
            ""fov"" : 6,
            ""hitbox"" : 1,
            ""hitscan"" : 0,
            ""ignorejump"" : false,
            ""multipoint"" : false,
            ""nonsticky"" : false,
            ""overtime"" : 0,
            ""psilent"" : false,
            ""rcs"" : 3,
            ""rcspitch"" : 0,
            ""rcsyaw"" : 0,
            ""rndsmooth"" : false,
            ""smooth"" : 2,
            ""smoothmode"" : 0,
            ""spherefov"" : false,
            ""time"" : 0,
            ""visibletimeout"" : 0,
            ""weaponid"" : 34
         },
         ""triggerbot"" : {
            ""aimhitbox"" : 0,
            ""autostop"" : false,
            ""backtrack"" : false,
            ""burst"" : 3,
            ""delay"" : 0,
            ""flashcheck"" : false,
            ""fov"" : 0,
            ""hitbox_chest"" : false,
            ""hitbox_head"" : true,
            ""hitbox_leftarm"" : false,
            ""hitbox_leftleg"" : false,
            ""hitbox_rightarm"" : false,
            ""hitbox_rightleg"" : false,
            ""hitbox_stomach"" : false,
            ""hitchance"" : 50,
            ""smokecheck"" : false,
            ""smooth"" : 0
         }
      },
      ""Negev"" : {
         ""aimbot"" : {
            ""aimdafs"" : false,
            ""autowall"" : false,
            ""autowalldmg"" : 0,
            ""factor"" : 1,
            ""firstshotdelay"" : 0,
            ""focus"" : false,
            ""fov"" : 10,
            ""hitbox"" : 1,
            ""hitscan"" : 0,
            ""ignorejump"" : false,
            ""multipoint"" : false,
            ""nonsticky"" : false,
            ""overtime"" : 0,
            ""psilent"" : false,
            ""rcs"" : 3,
            ""rcspitch"" : 0,
            ""rcsyaw"" : 0,
            ""rndsmooth"" : false,
            ""smooth"" : 2,
            ""smoothmode"" : 0,
            ""spherefov"" : false,
            ""time"" : 0,
            ""visibletimeout"" : 0,
            ""weaponid"" : 28
         },
         ""triggerbot"" : {
            ""aimhitbox"" : 0,
            ""autostop"" : false,
            ""backtrack"" : false,
            ""burst"" : 0,
            ""delay"" : 0,
            ""flashcheck"" : false,
            ""fov"" : 0,
            ""hitbox_chest"" : false,
            ""hitbox_head"" : true,
            ""hitbox_leftarm"" : false,
            ""hitbox_leftleg"" : false,
            ""hitbox_rightarm"" : false,
            ""hitbox_rightleg"" : false,
            ""hitbox_stomach"" : false,
            ""hitchance"" : 50,
            ""smokecheck"" : false,
            ""smooth"" : 0
         }
      },
      ""Nova"" : {
         ""aimbot"" : {
            ""aimdafs"" : false,
            ""autowall"" : false,
            ""autowalldmg"" : 0,
            ""factor"" : 0,
            ""firstshotdelay"" : 0,
            ""focus"" : false,
            ""fov"" : 3,
            ""hitbox"" : 1,
            ""hitscan"" : 0,
            ""ignorejump"" : false,
            ""multipoint"" : false,
            ""nonsticky"" : true,
            ""overtime"" : 0,
            ""psilent"" : false,
            ""rcs"" : 0,
            ""rcspitch"" : 0,
            ""rcsyaw"" : 0,
            ""rndsmooth"" : false,
            ""smooth"" : 0,
            ""smoothmode"" : 0,
            ""spherefov"" : false,
            ""time"" : 30,
            ""visibletimeout"" : 0,
            ""weaponid"" : 35
         },
         ""triggerbot"" : {
            ""aimhitbox"" : 0,
            ""autostop"" : false,
            ""backtrack"" : false,
            ""burst"" : 0,
            ""delay"" : 0,
            ""flashcheck"" : false,
            ""fov"" : 0,
            ""hitbox_chest"" : false,
            ""hitbox_head"" : true,
            ""hitbox_leftarm"" : false,
            ""hitbox_leftleg"" : false,
            ""hitbox_rightarm"" : false,
            ""hitbox_rightleg"" : false,
            ""hitbox_stomach"" : false,
            ""hitchance"" : 50,
            ""smokecheck"" : false,
            ""smooth"" : 0
         }
      },
      ""P2000"" : {
         ""aimbot"" : {
            ""aimdafs"" : false,
            ""autowall"" : false,
            ""autowalldmg"" : 0,
            ""factor"" : 0,
            ""firstshotdelay"" : 0,
            ""focus"" : false,
            ""fov"" : 2,
            ""hitbox"" : 1,
            ""hitscan"" : 0,
            ""ignorejump"" : false,
            ""multipoint"" : false,
            ""nonsticky"" : false,
            ""overtime"" : 0,
            ""psilent"" : false,
            ""rcs"" : 0,
            ""rcspitch"" : 0,
            ""rcsyaw"" : 0,
            ""rndsmooth"" : false,
            ""smooth"" : 0,
            ""smoothmode"" : 0,
            ""spherefov"" : false,
            ""time"" : 30,
            ""visibletimeout"" : 0,
            ""weaponid"" : 32
         },
         ""triggerbot"" : {
            ""aimhitbox"" : 0,
            ""autostop"" : false,
            ""backtrack"" : false,
            ""burst"" : 0,
            ""delay"" : 22,
            ""flashcheck"" : false,
            ""fov"" : 0,
            ""hitbox_chest"" : true,
            ""hitbox_head"" : true,
            ""hitbox_leftarm"" : false,
            ""hitbox_leftleg"" : false,
            ""hitbox_rightarm"" : false,
            ""hitbox_rightleg"" : false,
            ""hitbox_stomach"" : false,
            ""hitchance"" : 24,
            ""smokecheck"" : false,
            ""smooth"" : 0
         }
      },
      ""P250"" : {
         ""aimbot"" : {
            ""aimdafs"" : false,
            ""autowall"" : false,
            ""autowalldmg"" : 0,
            ""factor"" : 1,
            ""firstshotdelay"" : 0,
            ""focus"" : false,
            ""fov"" : 2,
            ""hitbox"" : 1,
            ""hitscan"" : 0,
            ""ignorejump"" : false,
            ""multipoint"" : false,
            ""nonsticky"" : false,
            ""overtime"" : 0,
            ""psilent"" : false,
            ""rcs"" : 0,
            ""rcspitch"" : 0,
            ""rcsyaw"" : 0,
            ""rndsmooth"" : false,
            ""smooth"" : 1,
            ""smoothmode"" : 0,
            ""spherefov"" : false,
            ""time"" : 20,
            ""visibletimeout"" : 0,
            ""weaponid"" : 36
         },
         ""triggerbot"" : {
            ""aimhitbox"" : 0,
            ""autostop"" : false,
            ""backtrack"" : false,
            ""burst"" : 0,
            ""delay"" : 0,
            ""flashcheck"" : false,
            ""fov"" : 0,
            ""hitbox_chest"" : false,
            ""hitbox_head"" : true,
            ""hitbox_leftarm"" : false,
            ""hitbox_leftleg"" : false,
            ""hitbox_rightarm"" : false,
            ""hitbox_rightleg"" : false,
            ""hitbox_stomach"" : false,
            ""hitchance"" : 50,
            ""smokecheck"" : false,
            ""smooth"" : 0
         }
      },
      ""P90"" : {
         ""aimbot"" : {
            ""aimdafs"" : false,
            ""autowall"" : false,
            ""autowalldmg"" : 0,
            ""factor"" : 1,
            ""firstshotdelay"" : 0,
            ""focus"" : false,
            ""fov"" : 8,
            ""hitbox"" : 1,
            ""hitscan"" : 0,
            ""ignorejump"" : false,
            ""multipoint"" : false,
            ""nonsticky"" : false,
            ""overtime"" : 0,
            ""psilent"" : false,
            ""rcs"" : 3,
            ""rcspitch"" : 0,
            ""rcsyaw"" : 0,
            ""rndsmooth"" : false,
            ""smooth"" : 2,
            ""smoothmode"" : 5,
            ""spherefov"" : false,
            ""time"" : 0,
            ""visibletimeout"" : 0,
            ""weaponid"" : 19
         },
         ""triggerbot"" : {
            ""aimhitbox"" : 0,
            ""autostop"" : false,
            ""backtrack"" : false,
            ""burst"" : 3,
            ""delay"" : 0,
            ""flashcheck"" : false,
            ""fov"" : 0,
            ""hitbox_chest"" : false,
            ""hitbox_head"" : true,
            ""hitbox_leftarm"" : false,
            ""hitbox_leftleg"" : false,
            ""hitbox_rightarm"" : false,
            ""hitbox_rightleg"" : false,
            ""hitbox_stomach"" : false,
            ""hitchance"" : 50,
            ""smokecheck"" : false,
            ""smooth"" : 0
         }
      },
      ""PP-Bizon"" : {
         ""aimbot"" : {
            ""aimdafs"" : false,
            ""autowall"" : false,
            ""autowalldmg"" : 0,
            ""factor"" : 1,
            ""firstshotdelay"" : 0,
            ""focus"" : false,
            ""fov"" : 6,
            ""hitbox"" : 1,
            ""hitscan"" : 0,
            ""ignorejump"" : false,
            ""multipoint"" : false,
            ""nonsticky"" : false,
            ""overtime"" : 0,
            ""psilent"" : false,
            ""rcs"" : 3,
            ""rcspitch"" : 0,
            ""rcsyaw"" : 0,
            ""rndsmooth"" : false,
            ""smooth"" : 2,
            ""smoothmode"" : 0,
            ""spherefov"" : false,
            ""time"" : 0,
            ""visibletimeout"" : 0,
            ""weaponid"" : 26
         },
         ""triggerbot"" : {
            ""aimhitbox"" : 0,
            ""autostop"" : false,
            ""backtrack"" : false,
            ""burst"" : 0,
            ""delay"" : 0,
            ""flashcheck"" : false,
            ""fov"" : 0,
            ""hitbox_chest"" : false,
            ""hitbox_head"" : true,
            ""hitbox_leftarm"" : false,
            ""hitbox_leftleg"" : false,
            ""hitbox_rightarm"" : false,
            ""hitbox_rightleg"" : false,
            ""hitbox_stomach"" : false,
            ""hitchance"" : 50,
            ""smokecheck"" : false,
            ""smooth"" : 0
         }
      },
      ""R8 Revolver"" : {
         ""aimbot"" : {
            ""aimdafs"" : false,
            ""autowall"" : false,
            ""autowalldmg"" : 0,
            ""factor"" : 0,
            ""firstshotdelay"" : 0,
            ""focus"" : false,
            ""fov"" : 2,
            ""hitbox"" : 1,
            ""hitscan"" : 0,
            ""ignorejump"" : false,
            ""multipoint"" : false,
            ""nonsticky"" : true,
            ""overtime"" : 0,
            ""psilent"" : false,
            ""rcs"" : 0,
            ""rcspitch"" : 0,
            ""rcsyaw"" : 0,
            ""rndsmooth"" : false,
            ""smooth"" : 0,
            ""smoothmode"" : 0,
            ""spherefov"" : false,
            ""time"" : 35,
            ""visibletimeout"" : 0,
            ""weaponid"" : 64
         },
         ""triggerbot"" : {
            ""aimhitbox"" : 0,
            ""autostop"" : false,
            ""backtrack"" : false,
            ""burst"" : 0,
            ""delay"" : 0,
            ""flashcheck"" : false,
            ""fov"" : 0,
            ""hitbox_chest"" : false,
            ""hitbox_head"" : true,
            ""hitbox_leftarm"" : false,
            ""hitbox_leftleg"" : false,
            ""hitbox_rightarm"" : false,
            ""hitbox_rightleg"" : false,
            ""hitbox_stomach"" : false,
            ""hitchance"" : 50,
            ""smokecheck"" : false,
            ""smooth"" : 0
         }
      },
      ""SCAR-20"" : {
         ""aimbot"" : {
            ""aimdafs"" : false,
            ""autowall"" : false,
            ""autowalldmg"" : 0,
            ""factor"" : 0,
            ""firstshotdelay"" : 0,
            ""focus"" : false,
            ""fov"" : 4,
            ""hitbox"" : 1,
            ""hitscan"" : 0,
            ""ignorejump"" : false,
            ""multipoint"" : false,
            ""nonsticky"" : false,
            ""overtime"" : 0,
            ""psilent"" : false,
            ""rcs"" : 1,
            ""rcspitch"" : 0,
            ""rcsyaw"" : 0,
            ""rndsmooth"" : false,
            ""smooth"" : 1,
            ""smoothmode"" : 0,
            ""spherefov"" : false,
            ""time"" : 0,
            ""visibletimeout"" : 0,
            ""weaponid"" : 38
         },
         ""triggerbot"" : {
            ""aimhitbox"" : 0,
            ""autostop"" : false,
            ""backtrack"" : false,
            ""burst"" : 0,
            ""delay"" : 0,
            ""flashcheck"" : false,
            ""fov"" : 0,
            ""hitbox_chest"" : false,
            ""hitbox_head"" : true,
            ""hitbox_leftarm"" : false,
            ""hitbox_leftleg"" : false,
            ""hitbox_rightarm"" : false,
            ""hitbox_rightleg"" : false,
            ""hitbox_stomach"" : false,
            ""hitchance"" : 50,
            ""smokecheck"" : false,
            ""smooth"" : 0
         }
      },
      ""SG 553"" : {
         ""aimbot"" : {
            ""aimdafs"" : false,
            ""autowall"" : false,
            ""autowalldmg"" : 0,
            ""factor"" : 0,
            ""firstshotdelay"" : 0,
            ""focus"" : false,
            ""fov"" : 4,
            ""hitbox"" : 1,
            ""hitscan"" : 0,
            ""ignorejump"" : false,
            ""multipoint"" : false,
            ""nonsticky"" : false,
            ""overtime"" : 0,
            ""psilent"" : false,
            ""rcs"" : 1,
            ""rcspitch"" : 0,
            ""rcsyaw"" : 0,
            ""rndsmooth"" : false,
            ""smooth"" : 1,
            ""smoothmode"" : 6,
            ""spherefov"" : false,
            ""time"" : 20,
            ""visibletimeout"" : 0,
            ""weaponid"" : 39
         },
         ""triggerbot"" : {
            ""aimhitbox"" : 0,
            ""autostop"" : false,
            ""backtrack"" : false,
            ""burst"" : 0,
            ""delay"" : 0,
            ""flashcheck"" : false,
            ""fov"" : 0,
            ""hitbox_chest"" : false,
            ""hitbox_head"" : true,
            ""hitbox_leftarm"" : false,
            ""hitbox_leftleg"" : false,
            ""hitbox_rightarm"" : false,
            ""hitbox_rightleg"" : false,
            ""hitbox_stomach"" : false,
            ""hitchance"" : 50,
            ""smokecheck"" : false,
            ""smooth"" : 0
         }
      },
      ""SSG 08"" : {
         ""aimbot"" : {
            ""aimdafs"" : false,
            ""autowall"" : true,
            ""autowalldmg"" : 0,
            ""factor"" : 0,
            ""firstshotdelay"" : 0,
            ""focus"" : false,
            ""fov"" : 2.7999999523162842,
            ""hitbox"" : 1,
            ""hitscan"" : 1,
            ""ignorejump"" : false,
            ""multipoint"" : false,
            ""nonsticky"" : false,
            ""overtime"" : 0,
            ""psilent"" : false,
            ""rcs"" : 0,
            ""rcspitch"" : 0,
            ""rcsyaw"" : 0,
            ""rndsmooth"" : false,
            ""smooth"" : 0,
            ""smoothmode"" : 0,
            ""spherefov"" : false,
            ""time"" : 20,
            ""visibletimeout"" : 0,
            ""weaponid"" : 40
         },
         ""triggerbot"" : {
            ""aimhitbox"" : 0,
            ""autostop"" : false,
            ""backtrack"" : false,
            ""burst"" : 0,
            ""delay"" : 0,
            ""flashcheck"" : false,
            ""fov"" : 0,
            ""hitbox_chest"" : false,
            ""hitbox_head"" : true,
            ""hitbox_leftarm"" : false,
            ""hitbox_leftleg"" : false,
            ""hitbox_rightarm"" : false,
            ""hitbox_rightleg"" : false,
            ""hitbox_stomach"" : false,
            ""hitchance"" : 50,
            ""smokecheck"" : false,
            ""smooth"" : 0
         }
      },
      ""Sawed-Off"" : {
         ""aimbot"" : {
            ""aimdafs"" : false,
            ""autowall"" : false,
            ""autowalldmg"" : 0,
            ""factor"" : 0,
            ""firstshotdelay"" : 0,
            ""focus"" : false,
            ""fov"" : 3,
            ""hitbox"" : 2,
            ""hitscan"" : 0,
            ""ignorejump"" : false,
            ""multipoint"" : false,
            ""nonsticky"" : false,
            ""overtime"" : 0,
            ""psilent"" : false,
            ""rcs"" : 0,
            ""rcspitch"" : 0,
            ""rcsyaw"" : 0,
            ""rndsmooth"" : false,
            ""smooth"" : 0,
            ""smoothmode"" : 0,
            ""spherefov"" : false,
            ""time"" : 30,
            ""visibletimeout"" : 0,
            ""weaponid"" : 29
         },
         ""triggerbot"" : {
            ""aimhitbox"" : 0,
            ""autostop"" : false,
            ""backtrack"" : false,
            ""burst"" : 0,
            ""delay"" : 0,
            ""flashcheck"" : false,
            ""fov"" : 0,
            ""hitbox_chest"" : false,
            ""hitbox_head"" : true,
            ""hitbox_leftarm"" : false,
            ""hitbox_leftleg"" : false,
            ""hitbox_rightarm"" : false,
            ""hitbox_rightleg"" : false,
            ""hitbox_stomach"" : false,
            ""hitchance"" : 50,
            ""smokecheck"" : false,
            ""smooth"" : 0
         }
      },
      ""Tec-9"" : {
         ""aimbot"" : {
            ""aimdafs"" : false,
            ""autowall"" : false,
            ""autowalldmg"" : 0,
            ""factor"" : 0,
            ""firstshotdelay"" : 0,
            ""focus"" : false,
            ""fov"" : 2,
            ""hitbox"" : 1,
            ""hitscan"" : 0,
            ""ignorejump"" : false,
            ""multipoint"" : false,
            ""nonsticky"" : false,
            ""overtime"" : 0,
            ""psilent"" : false,
            ""rcs"" : 0,
            ""rcspitch"" : 0,
            ""rcsyaw"" : 0,
            ""rndsmooth"" : false,
            ""smooth"" : 0,
            ""smoothmode"" : 0,
            ""spherefov"" : false,
            ""time"" : 31,
            ""visibletimeout"" : 0,
            ""weaponid"" : 30
         },
         ""triggerbot"" : {
            ""aimhitbox"" : 0,
            ""autostop"" : false,
            ""backtrack"" : false,
            ""burst"" : 0,
            ""delay"" : 0,
            ""flashcheck"" : false,
            ""fov"" : 0,
            ""hitbox_chest"" : false,
            ""hitbox_head"" : true,
            ""hitbox_leftarm"" : false,
            ""hitbox_leftleg"" : false,
            ""hitbox_rightarm"" : false,
            ""hitbox_rightleg"" : false,
            ""hitbox_stomach"" : false,
            ""hitchance"" : 50,
            ""smokecheck"" : false,
            ""smooth"" : 0
         }
      },
      ""UMP-45"" : {
         ""aimbot"" : {
            ""aimdafs"" : false,
            ""autowall"" : false,
            ""autowalldmg"" : 0,
            ""factor"" : 1,
            ""firstshotdelay"" : 0,
            ""focus"" : false,
            ""fov"" : 7,
            ""hitbox"" : 1,
            ""hitscan"" : 0,
            ""ignorejump"" : false,
            ""multipoint"" : false,
            ""nonsticky"" : false,
            ""overtime"" : 0,
            ""psilent"" : false,
            ""rcs"" : 3,
            ""rcspitch"" : 0,
            ""rcsyaw"" : 0,
            ""rndsmooth"" : false,
            ""smooth"" : 2,
            ""smoothmode"" : 6,
            ""spherefov"" : false,
            ""time"" : 0,
            ""visibletimeout"" : 0,
            ""weaponid"" : 24
         },
         ""triggerbot"" : {
            ""aimhitbox"" : 0,
            ""autostop"" : false,
            ""backtrack"" : false,
            ""burst"" : 3,
            ""delay"" : 0,
            ""flashcheck"" : false,
            ""fov"" : 0,
            ""hitbox_chest"" : false,
            ""hitbox_head"" : true,
            ""hitbox_leftarm"" : false,
            ""hitbox_leftleg"" : false,
            ""hitbox_rightarm"" : false,
            ""hitbox_rightleg"" : false,
            ""hitbox_stomach"" : false,
            ""hitchance"" : 50,
            ""smokecheck"" : false,
            ""smooth"" : 0
         }
      },
      ""USP-S"" : {
         ""aimbot"" : {
            ""aimdafs"" : false,
            ""autowall"" : false,
            ""autowalldmg"" : 0,
            ""factor"" : 0,
            ""firstshotdelay"" : 0,
            ""focus"" : false,
            ""fov"" : 1.5,
            ""hitbox"" : 1,
            ""hitscan"" : 1,
            ""ignorejump"" : false,
            ""multipoint"" : false,
            ""nonsticky"" : true,
            ""overtime"" : 0,
            ""psilent"" : false,
            ""rcs"" : 0,
            ""rcspitch"" : 0,
            ""rcsyaw"" : 0,
            ""rndsmooth"" : false,
            ""smooth"" : 0,
            ""smoothmode"" : 0,
            ""spherefov"" : false,
            ""time"" : 35,
            ""visibletimeout"" : 0,
            ""weaponid"" : 61
         },
         ""triggerbot"" : {
            ""aimhitbox"" : 0,
            ""autostop"" : false,
            ""backtrack"" : false,
            ""burst"" : 0,
            ""delay"" : 0,
            ""flashcheck"" : false,
            ""fov"" : 0,
            ""hitbox_chest"" : false,
            ""hitbox_head"" : true,
            ""hitbox_leftarm"" : false,
            ""hitbox_leftleg"" : false,
            ""hitbox_rightarm"" : false,
            ""hitbox_rightleg"" : false,
            ""hitbox_stomach"" : false,
            ""hitchance"" : 50,
            ""smokecheck"" : false,
            ""smooth"" : 0
         }
      },
      ""XM1014"" : {
         ""aimbot"" : {
            ""aimdafs"" : false,
            ""autowall"" : false,
            ""autowalldmg"" : 0,
            ""factor"" : 0,
            ""firstshotdelay"" : 0,
            ""focus"" : false,
            ""fov"" : 3,
            ""hitbox"" : 1,
            ""hitscan"" : 0,
            ""ignorejump"" : false,
            ""multipoint"" : false,
            ""nonsticky"" : false,
            ""overtime"" : 0,
            ""psilent"" : false,
            ""rcs"" : 1,
            ""rcspitch"" : 0,
            ""rcsyaw"" : 0,
            ""rndsmooth"" : false,
            ""smooth"" : 0,
            ""smoothmode"" : 0,
            ""spherefov"" : false,
            ""time"" : 0,
            ""visibletimeout"" : 0,
            ""weaponid"" : 25
         },
         ""triggerbot"" : {
            ""aimhitbox"" : 0,
            ""autostop"" : false,
            ""backtrack"" : false,
            ""burst"" : 0,
            ""delay"" : 0,
            ""flashcheck"" : false,
            ""fov"" : 0,
            ""hitbox_chest"" : false,
            ""hitbox_head"" : true,
            ""hitbox_leftarm"" : false,
            ""hitbox_leftleg"" : false,
            ""hitbox_rightarm"" : false,
            ""hitbox_rightleg"" : false,
            ""hitbox_stomach"" : false,
            ""hitchance"" : 50,
            ""smokecheck"" : false,
            ""smooth"" : 0
         }
      },
      ""Zeus x27"" : {
         ""aimbot"" : {
            ""aimdafs"" : false,
            ""autowall"" : false,
            ""autowalldmg"" : 0,
            ""factor"" : 0,
            ""firstshotdelay"" : 0,
            ""focus"" : false,
            ""fov"" : 8,
            ""hitbox"" : 4,
            ""hitscan"" : 0,
            ""ignorejump"" : false,
            ""multipoint"" : false,
            ""nonsticky"" : false,
            ""overtime"" : 0,
            ""psilent"" : false,
            ""rcs"" : 0,
            ""rcspitch"" : 0,
            ""rcsyaw"" : 0,
            ""rndsmooth"" : false,
            ""smooth"" : 0,
            ""smoothmode"" : 0,
            ""spherefov"" : false,
            ""time"" : 20,
            ""visibletimeout"" : 0,
            ""weaponid"" : 31
         },
         ""triggerbot"" : {
            ""aimhitbox"" : 0,
            ""autostop"" : false,
            ""backtrack"" : false,
            ""burst"" : 0,
            ""delay"" : 0,
            ""flashcheck"" : false,
            ""fov"" : 0,
            ""hitbox_chest"" : true,
            ""hitbox_head"" : true,
            ""hitbox_leftarm"" : false,
            ""hitbox_leftleg"" : false,
            ""hitbox_rightarm"" : false,
            ""hitbox_rightleg"" : false,
            ""hitbox_stomach"" : true,
            ""hitchance"" : 50,
            ""smokecheck"" : false,
            ""smooth"" : 0
         }
      }
   }
}
"
xB161VSN,Untitled,desito07,C#,Saturday 7th of October 2023 03:47:44 PM CDT,"namespace Account_Balance__new_version_;
class Program
{
    static void Main(string[] args)
    {
        string command = Console.ReadLine();
        double sum = 0.0;

        while (command != ""End!"")
        {
            double currentDeposit = double.Parse(command);
            sum += currentDeposit;
            if(currentDeposit > 0)
            {
                Console.WriteLine($""Increase: {currentDeposit:f2}"");
            }

            
            if(currentDeposit < 0)
            {
                Console.WriteLine($""Decrease: {Math.Abs(currentDeposit):f2}"");
                break;
            }

            /*if (currentDeposit == 0)
            {
                break;
            }*/
            
            command = Console.ReadLine();
        }
        Console.WriteLine($""Balance: {sum:f2}"");
    }
}

"
LFw4yiqd,excepciones,teslariu,Python,Saturday 7th of October 2023 03:38:53 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Script que divide dos numeros
def validar_numero(n):
	while True:
		try:
			a = float(input(f""Ingrese un nro {n}: ""))
		except ValueError:
			print(""Error: no ha ingresado un nro"")
		else:
			return a


def dividir(a,b):
	try:
		cociente = a / b
	
	except ZeroDivisionError:
		return ""No se puede dividir por cero...""

	except IOError:
		return ""Error de lectura de datos""

	else:
		return f""El cociente entre {a} y {b} es {a/b}""
	



a = validar_numero(""a"")
b = validar_numero(""b"")
print(dividir(a,b))


# Lanzar excepciones

def sumar(a,b):
	""""""Función que implementa la suma de dos números.
	Lanzará una excepción si los parámetros no son del tipo correcto""""""
	if not isinstance(a,(float,int)) or not isinstance(b,(float,int)):
		raise TypeError(""Se requieren dos números como parámetros"")
	return a+b
	
	
	
	
print(sumar(2,3.2))
print(sumar(""Hola"",""Chau""))		
"
G0izFk5S,Untitled,_zwj_,C++,Saturday 7th of October 2023 03:34:36 PM CDT,"#include <iostream>
#include <ctime>
#include <cstdlib>
#define N 3
#define R 3
using namespace std;

void riempi_stampa(int matrice[N][R])
{
    for (int i = 0; i < N; i++)
    {
        for (int j = 0; j < R; j++)
        {
            matrice[i][j] = rand() % 2;
            cout << matrice[i][j] << "" "";
        }
        cout << endl;
    }
}

int simmetrica(int matrice[N][R])
{

    int count = 0;

    for (int i = 0; i < N; i++)
    {
        for (int j = i + 1; j < R; j++)
        {
            if (matrice[i][j] != matrice[j][i])
            {
                count++;
            }
        }
    }
    return count;
}

int main()
{

    srand(time(NULL));
    int tabella[N][R];

    riempi_stampa(tabella);

    if (simmetrica(tabella) == 0)
        cout << ""e' simmetrica"";
    else
        cout << ""non e' simmetrica, ha "" << simmetrica(tabella) << "" errori \n"";

    // somma righe
    int SommaRighe = 0;
    int vettoreRighe[R];
    int x = 0;

    for (int i = 0; i < N; i++)
    {
        for (int j = 0; j < R; j++)
        {

            SommaRighe += tabella[i][j];
        }
        vettoreRighe[x] = SommaRighe;
        x++;
        SommaRighe = 0;
    }

    // somma colonne
    int SommaColonne = 0;
    int vettoreColonne[R];
    int y = 0;
    for (int i = 0; i < N; i++)
    {
        for (int j = 0; j < R; j++)
        {

            SommaColonne += tabella[j][i];
        };
        vettoreColonne[y] = SommaColonne;
        y++;
        SommaColonne = 0;
    }

    // stampa la riga o colonna con la somma maggiore
    int rigaMax = 0;
    for (int i = 1; i < N; i++)
    {
        if (vettoreRighe[i] > vettoreRighe[rigaMax])
        {
            rigaMax = i;
        }
    }

    int colonnaMax = 0;
    for (int i = 1; i < R; i++)
    {
        if (vettoreColonne[i] > vettoreColonne[colonnaMax])
        {
            colonnaMax = i;
        }
    }

    cout << ""\nLa colonna o riga con somma massima e': "";
    if (rigaMax >= colonnaMax)
    {
        for (int j = 0; j < R; j++)
        {
            cout << tabella[rigaMax][j] << "" "";
        }
        cout << endl;
    }
    else
    {
        for (int i = 0; i < N; i++)
        {
            cout << tabella[i][colonnaMax] << "" "";
        }
        cout << endl;
    }
    return 0;
}
"
80srfyr2,test,MartinSaviev,JavaScript,Saturday 7th of October 2023 03:32:23 PM CDT,"const { expect, assert } = require('chai');
const { sum } = require('./T04.sumNumbers');

describe('Test array of numbers(func sumNumbers)', function () {

    it('array have sum > 0', function () {

        let array = [1, 2, 3];

        expect(sum(array)).to.be.equal(6);
    });
    it('should return 0 if we pass empty array', function () {

        expect(sum([])).to.be.equal(0)

    });

    it('should return NaN if we pass string parameters', function () {

        assert.isNaN(sum(['martin', '2']));

    });

    it('array have length > 0', function () {

        let array = [1, 2, 3];

        assert.lengthOf(array, 3);

    });

    it('typeOf array have number', function () {

        let checkArray = [1, 2, 3];
        expect(checkArray[0]).to.be.a('number');
    });

});"
U6zJRbRS,array sum numbers,MartinSaviev,JavaScript,Saturday 7th of October 2023 03:30:50 PM CDT,"function sum(arr) {
    let sum = 0;
    for (let num of arr) {
        sum += Number(num);
    }
    return sum;
}"
8WwEsPeG,Stupid Password Generator,Spocoman,Python,Saturday 7th of October 2023 03:15:40 PM CDT,"n = int(input())
l = int(input())

for a in range(1, n + 1):
    for b in range(1, n + 1):
        for c in range(97, 97 + l):
            for d in range(97, 97 + l):
                for e in range(max(a, b) + 1, n + 1):
                    print(f""{a}{b}{chr(c)}{chr(d)}{e}"", end=' ')
"
BFGwK5MA,func. integrada de orden superior y otras yerbas,teslariu,Python,Saturday 7th of October 2023 03:09:00 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
# funciones 
# integradas: print(), del(), list(), int(), float(),range(),sum(),min() ,max()
#  lambda, filter, map, zip
# zip
capitales = [""Paris"", ""BsAs"", ""Roma""]
paises = [""Francia"", ""Argentina"", ""Italia""]

for c,p in zip(capitales, paises):
	print(c,p)
	
print(""---------------------"")

# funciones anónimas o inline o lambda
def sumar1(a,b):
	return a+b
	
sumar2 = lambda a,b:a+b

print(sumar1(100,200))
print(sumar2(100,200))

print(""---------------------"")

# funcion map: es una funcion de orden superior (funcion que llama a otra)
# ej: imprimir correctamente una lista de nombres
nombres = [""   jUAn "", ""JOSE"", ""      anita"",  ""\n\t   hUGO \n ""]

nombres_correctos = list(map(lambda x: x.strip().capitalize(),nombres))
print(nombres_correctos)

print(""---------------------"")

# funcion filter: filtra segun una determinada condicion
# imprimir los años bisiestos de una lista

def bisiesto(year):
	if not year%400 or (not year%4 and year%100):
		return True
	return False
	
años = [1796, 2013, 2002, 1800, 1840, 2020]

años_bisiestos = list(filter(bisiesto,años))
nombres_con_A = list(filter(lambda x: x.startswith(""A""), nombres_correctos))

print(años_bisiestos)
print(nombres_con_A)
	
	



"
66DHR5cg,Stupid Password Generator,Spocoman,JavaScript,Saturday 7th of October 2023 03:07:05 PM CDT,"function stupidPasswordGenerator(input) {
    let n = Number(input[0]);
    let l = Number(input[1]);
    let output = """";

    for (let a = 1; a <= n; a++) {
        for (let b = 1; b <= n; b++) {
            for (let c = 97; c < 97 + l; c++) {
                for (let d = 97; d < 97 + l; d++) {
                    for (let e = Math.max(a, b) + 1; e <= n; e++) {
                        output += `${a}${b}${String.fromCharCode(c)}${String.fromCharCode(d)}${e} `;
                    }
                }
            }
        }
    }

    console.log(output);
    return;
}"
H6pftRYs,Stupid Password Generator,Spocoman,C++,Saturday 7th of October 2023 02:55:46 PM CDT,"#include <iostream>
#include <cmath>

using namespace std;

int main() {
    int n, l;
    cin >> n >> l;

    for (int a = 1; a <= n; a++) {
        for (int b = 1; b <= n; b++) {
            for (int c = 97; c < 97 + l; c++) {
                for (int d = 97; d < 97 + l; d++) {
                    for (int e = max(a, b) + 1; e <= n; e++) {
                        cout << a << b << (char)c << (char)d << e << ' ';
                    }
                }
            }
        }
    }
    
    return 0;
}"
xehjdiYv,Stupid Password Generator,Spocoman,C#,Saturday 7th of October 2023 02:48:30 PM CDT,"using System;

namespace StupidPasswordGenerator
{
    class Program
    {
        static void Main(string[] args)
        {
           int n = int.Parse(Console.ReadLine());
           int l = int.Parse(Console.ReadLine());

            for (int a = 1; a <= n; a++)
            {
                for (int b = 1; b <= n; b++)
                {
                    for (int c = 97; c < 97 + l; c++)
                    {
                        for (int d = 97; d < 97 + l; d++)
                        {
                            for (int e = Math.Max(a,b) + 1; e <= n; e++)
                            {
                                Console.Write($""{a}{b}{(char)c}{(char)d}{e} "");
                            }
                        }
                    }
                }
            }
        }
    }
}"
Wt6Dgr1M,testCpp,naivecoder,C++,Saturday 7th of October 2023 02:30:05 PM CDT,"// studentset.h

#ifndef TESTPROJECT_STUDENTSET_H
#define TESTPROJECT_STUDENTSET_H

struct StudentSet {
    int ID;
    int credit;
    double GPA;
    int dummy_value;
};


#endif //TESTPROJECT_STUDENTSET_H

// main.cpp
#include <iostream>
using namespace std;

#include ""studentset.h""

StudentSet newStudentSet(){
    StudentSet set;
    set.dummy_value=0;
    return set;
}

int main() {
        StudentSet student1= newStudentSet();
        StudentSet student2= newStudentSet();

        cout << ""Please type in the FIRST student's information (ID credit GPA):"" << endl;

        cin >> student1.ID >> student1.credit >> student1.GPA;

        cout << ""Please type in the SECOND student's information (ID credit GPA):"" << endl;

        cin >> student2.ID >>student2.credit >>student2.GPA;

        return 0;
};"
sLzkkxdb,BWR - Changelog 07/10/23,SSilver,Diff,Saturday 7th of October 2023 02:29:52 PM CDT,"Panic Attack
~ Alt-Fire emits sound without needing to hold Attack
~ Holding Attack2 while deploying no longer activates Alt-Fire
Fixing some of inconsistencies with the weapon's behavior.

Natascha
+ Added 15% faster firing speed
- Increased damage penalty to -33% (was -25%)
The improved fire rate meant  to improve the weapon's healing per hit and make the ammo bonus more impactful. It's damage penalty was increased to keep it around the same total DPS.

Righteous Bison
- Reduced damage bonus to +150% (from +200%)
With it already having a fast penetrating projectile, the damage was reined in a bit dor the potential damaage that could be done to multiple targets

Pomson 6000
+ Removed clip size penalty
Returned its clip size to allow it to sustain the engineer longer as his primary.

Gas Passer
+ Ignited foes explode, igniting nearby gas-soaked enemies
- Decreased initial ignition damage to 15 (was 20)
The initial damage on ignition to a single target didn't seem to be terribly useful. By returning the chain ignition and lowering that igntion damage, this version hopes to make the gas's job as area denial more impactful.

Machina
+ Increased max building penetration distance to 512 HU (was 256)
+ Building penetration shots can headshot
Tweaking was done to make shots through buildings more consistent, so it was improved to allow for headshots and a slightly longer range.

Pain Train
+ Removed bullet vulnerability
+ Added a 3 second speed boost on defending a point or collecting objectives
- Added -15 max health on wearer
Expanding it's use with a buff for defenders or collectors of objectives in certain modes, so the item is more versatile. To make up for this, the specific type vulnerability was replaced by max health reduction that's about as impactful."
Yf7X0bTS,funciones1,teslariu,Python,Saturday 7th of October 2023 02:23:49 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
# funciones 
# integradas: print(), del(), list(), int(), float(),range(),sum(),min() ,max()
#  lambda, filter, map, zip

# funciones propias del usuario
""""""
def imprimir(lista):
	for item in lista:
		print(item)
		
		
nombres = [""Ale"",""Ana""]
numeros = [1,2,3]

imprimir(nombres)
imprimir(numeros)
imprimir(""Soy una frase"")
		 

def suma(a,b):
	return a + b
	
total = suma(23,21)
print(suma(23,21))
	
# funcion con parametros x defecto
def saludar(edad, nombre=""desconocido""):
	print(f""Hola {nombre} de {edad} años"")
	
saludar(25,""Pepe"")
saludar(18)

### Ambito global y pasaje por referencia	
def f():
	global a  3 # pasaje por referencia
	a = 3
	print(f""a dentro de la funcion: {a}"")
	
a = 10
f()
print(f""a fuera de la funcion: {a}"")


# pasaje por valor
def f(a):
	a=0
	print(f""a adentro: {a}"")
	
a = 10
f(a)
print(f""a fuera: {a}"")


# EL COMPORTAMIENTO (por valor, por referencia) ESTA DEFINIDO POR EL tipo
# de VARIABLE
print(""comportamiento POR REFERENCIA de una lista"")
def f(a):
	a.append(100)
	print(f""Lista a adentro: {a}"")
	
a = [10,20,30]
f(a)
print(f""Lista a fuera: {a}"")

print(""\ncomportamiento POR VALOR de una lista"")
def f(a):
	a = []  # CREO UNA LISTA NUEVA LOCAL
	print(f""Lista a adentro: {a}"")
	
a = [10,20,30]
f(a)
print(f""Lista a fuera: {a}"")
  

# argumentos de long variable:
def sumar(*args):
	print(args)
	print(type(args))
	total = 0
	for n in args:
		total += n
	return total


print(sumar(1,2,3,4))
print()


# argumentos con keywords
def sumar(**kwargs):
	print(type(kwargs))
	print(kwargs)
	total = 0
	for n in kwargs:
		total += kwargs[n]
	return total
	
print(sumar(a=10, b=20, c=30))

""""""	
# orden de los argumentos
def f(a,b,c,d,*args,x=100,y=200,z=300,**kwargs):
	print(f""a:{a}"")
	print(f""b:{b}"")
	print(f""c:{c}"")
	print(f""d:{d}"")
	print(f""args:{args}"")
	print(f""x:{x}"")
	print(f""y:{y}"")
	print(f""z:{z}"")
	print(f""kwargs:{kwargs}"")
	
	
f(1,2,3,4,""Pepe"",""Ana"",""Lucia"",p=""Juan"",q=12536878)	

	
	
	
"
jt9kX8vS,Untitled,Nikitasss,Java,Saturday 7th of October 2023 02:16:39 PM CDT,"package lab.web;

import java.io.IOException;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
// библиотечный класс для работы с потоками вывода
import java.io.PrintWriter;
/**
 * Servlet implementation class BooksList
 */
// @WebServlet(""/BooksList"")
public class BooksList extends HttpServlet {
    private static final long serialVersionUID = 1L;

    /**
     * @see HttpServlet#HttpServlet()
     */
    public BooksList() {
        super();
        // TODO Auto-generated constructor stud
    }

    /**
     * Processes requests for both HTTP <code>GET</code> and <code>POST</code>
     * methods.
     *
     * @param request  servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException      if an I/O error occurs
     */
    protected void processRequest(HttpServletRequest request, HttpServletResponse
            response)
            throws ServletException, IOException {
// Задание типа кодировки для параметров запроса
        request.setCharacterEncoding(""utf-8"");
        // Чтение параметра name из запроса
        String name = request.getParameter(""name"");
        // Задание типа содержимого для ответа (в том числе кодировки)
        response.setContentType(""text/html;charset=UTF-8"");
        // Получение потока для вывода ответа
        PrintWriter out = response.getWriter();
        try {
            // Создание HTML-страницы
            out.println(""<html>"");
            out.println(""<head><title>Список книг</title></head>"");
            out.println(""<body>"");
            out.println(""<h1>Список книг читателя "" + (name != null ? name :
                    ""без имени"") + ""</h1>"");
            out.println(""<table border='1'>"");
            out.println(""<tr><td><b>Автор книги</b></td><td><b>Название книги </b></td><td><b>Прочитал</b></td></tr>"");
            out.println(""<tr><td>Булгаков</td><td>Мастер и Маргарита </td><td>Да</td></tr>"");
            out.println(""<tr><td>Пелевин</td><td>Чапаев и пустота </td><td>Нет</td></tr>"");
            out.println(""</table>"");
            out.println(""</body>"");
            out.println(""</html>"");
        } finally {
            // Закрытие потока вывода
            out.close();
        }
    }
    /**
    *Handles the HTTP
 * <code>GET</code> method.
 *
         * @param request servlet request
 * @param response servlet response
 * @throws ServletException if a servlet-specific error occurs

        * @throws IOException if an I/O error occurs
 */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }
    /**
     * Handles the HTTP
     * <code>POST</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }
}

"
i3p7CQRM,Consolidation of data retrieval in Provider,Fraym,TypeScript,Saturday 7th of October 2023 02:11:55 PM CDT,"const CreateEditHabit = () => {
    const params = useParams();
	return (
		<CreateEditHabitProvider
            taskId={params.taskId}
            plannedTaskId={params.plannedTaskid}
		>
			<CreateEditHabit.Header />
			<CreateEditHabit.Body />
			<CreateEditHabit.Controls />
        </CreateEditHabitProvider>
    );
}

const CreateEditHabitProvider = ({ taskId, plannedTaskId }) => {
	const task = useTasks(taskId);
    const plannedTask = usePlannedTask(plannedTaskId);

    const data = task ?? plannedTask;

    const [description, setDescription] = useState(data.description);
    // ... many more

    const value = {
		description, setDescription
        // ... many more
    }

    return (
        <CreateEditHabitContext.Provider value={value} />
    ); 
}"
mz1b9EKm,LeetCode 167 - Two Sum II - NeetCode solution,nathanwailes,Python,Saturday 7th of October 2023 01:23:23 PM CDT,"class Solution:
    def twoSum(self, numbers: List[int], target: int) -> List[int]:
        l, r = 0, len(numbers) - 1
        
        while l < r:
            curSum = numbers[l] + numbers[r]
            
            if curSum > target:
                r -= 1
            elif curSum < target:
                l += 1
            else:
                return [l + 1, r + 1]
        return []"
BvbxPW4Q,LeetCode 167 - Two Sum II - 2023.10.08 solution,nathanwailes,Python,Saturday 7th of October 2023 01:19:48 PM CDT,"class Solution:
    def twoSum(self, numbers: List[int], target: int) -> List[int]:
        """"""
        [2,7,11,15], target = 18
        Step 1: 17, we need more, so step in from the left
        Step 2: 22, we need less, so step in from the right

        Proposed solution: We start with the two pointers at the ends and
        step inwards based on whether the current sum is greater or less
        than the target sum.
        """"""
        l = 0
        r = len(numbers) - 1

        while l < r: # TODO: Double-check this condition.
            current_sum = numbers[l] + numbers[r]
            if current_sum == target:
                return [l+1, r+1]
            elif current_sum < target:
                l += 1
            else:
                r -= 1
"
cX3eN4HW,Untitled,skimono,C++,Saturday 7th of October 2023 12:58:26 PM CDT,"struct Node {
    ll key, pr;
    ll left = -1, right = -1, cnt;
    ll sz;
};
 
struct dd {
    //Djinchuriki Djubi
    vector <Node> nodes;
    ll nodesNumber = 0;
    ll kor = -1;
    ll makeNewNode(ll x) {
        nodes.push_back({ x, (int)rnd(), -1, -1, 1, 1 });
        return nodesNumber++;
    }
    ll getSZ(ll v) { return (v >= 0) ? nodes[v].sz : 0; }
    void recalculate(ll v) {
        if (v >= 0) {
            nodes[v].sz = getSZ(nodes[v].left) + getSZ(nodes[v].right) + nodes[v].cnt;
        }
    }
    bool exists(ll root, ll x) {
        ll v = root;
        while (v != -1) {
            Node& nd = nodes[v];
            if (nd.key == x)
                return true;
            else if (nd.key > x)
                v = nodes[v].left;
            else
                v = nodes[v].right;
        }
        return false;
    }
    pair <ll, ll> split(ll root, ll x) {
        if (root == -1)
            return { -1,-1 };
        if (x < nodes[root].key) {
            pair <ll, ll> p = split(nodes[root].left, x);
            nodes[root].left = p.second;
            recalculate(root);
            return { p.first, root };
        }
        else {
            pair <ll, ll> p = split(nodes[root].right, x);
            nodes[root].right = p.first;
            recalculate(root);
            return { root,p.second };
        }
    }
    ll merge(ll root1, ll root2) {
        if (root2 == -1) {
            return root1;
        }
        if (root1 == -1) {
            return root2;
        }
        if (nodes[root1].pr > nodes[root2].pr) {
            nodes[root1].right = merge(nodes[root1].right, root2);
            recalculate(root1);
            return root1;
        }
        else {
            nodes[root2].left = merge(root1, nodes[root2].left);
            recalculate(root2);
            return root2;
        }
    }
    ll insert(ll root, ll x) {
        if (exists(root, x)) {
            pair <ll, ll> p = split(root, x);
            pair <ll, ll> pp = split(p.first, x - 1);
            nodes[pp.second].cnt++;
            nodes[pp.second].sz++;
            return merge(merge(pp.first, pp.second), p.second);
        }
        else {
            ll newNode = makeNewNode(x);
            pair <ll, ll> p = split(root, x);
            return merge(p.first, merge(newNode, p.second));
        }
    }
    ll erase(ll root, ll x) {
        if (!exists(root, x)) {
            return root;
        }
        else {
            pair <ll, ll> p = split(root, x);
            pair <ll, ll> pp = split(p.first, x - 1);
            nodes[pp.second].cnt--;
            nodes[pp.second].sz--;
            if (nodes[pp.second].cnt == 0) {
                return merge(pp.first, p.second);
            }
            else {
                return merge(merge(pp.first, pp.second), p.second);
            }
        }
    }
    ll prev(ll root, ll x) {
        ll v = root, res = -inf, ans = 0;
        while (v != -1) {
            Node& nd = nodes[v];
            if (nd.key > x) {
                v = nd.left;
            }
            else {
                if (nd.key == x) {
                    ans += getSZ(nd.left);
                }
                else {
                    ans += getSZ(nd.left) + nd.cnt;
                }
                v = nd.right;
            }
        }
        return ans;
    }
};
 
struct fnw {
    vector <dd> fn;//Fenwick
    //I want to take vseros
    void build(ll n) {
        fn.resize(n + 4);
    }
    ll sump(ll r, ll x) {
        ll ans = 0;
        for (r; r > 0; r -= r & -r) {
            ans += fn[r].prev(fn[r].kor, x);
        }
        return ans;
    }
    ll sum(ll l, ll r, ll x) {
        // Кол-во элементов с l to r меньших x
        return sump(r, x) - sump(l - 1, x);
    }
    void add(ll r, ll val) {
        for (r; r < fn.size(); r += r & -r) {
            if (val > 0) {
                fn[r].kor = fn[r].insert(fn[r].kor, val);
            }
            else {
                fn[r].kor = fn[r].erase(fn[r].kor, -val);
            }
        }
    }
};"
KVrizZ6J,mv neg to start myver,STANAANDREY,C,Saturday 7th of October 2023 12:57:34 PM CDT,"#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#define NMAX 101

void swap(int* a, int* b) {
	int tmp = *a;
	*a = *b;
	*b = tmp;
}

void moveNegsToStart(int n, int arr[]) {
	int j = 0;
	while (arr[j] < 0) {
		j++;
	}
	for (int i = j + 1; i < n; i++) {
		if (arr[i] < 0) {
			swap(&arr[i], &arr[j]);
			j++;
			while (arr[j] < 0) {
				j++;
			}
		}
	}
}

int main(void) {
	int n;
	assert(scanf_s(""%d"", &n));
	static int arr[NMAX];
	for (int i = 0; i < n; i++) {
		assert(scanf_s(""%d"", &arr[i]));
	}
	moveNegsToStart(n, arr);
	for (int i = 0; i < n; i++) {
		printf(""%d "", arr[i]);
	}
	putchar('\n');
	return 0;
}"
uBbm0X5T,dustCrafting,mitgobla,Lua,Saturday 7th of October 2023 12:23:24 PM CDT,"-- Setup by facing a glass block
-- Turn until facing the glass block

function turnToGlass()
    success, data = turtle.inspect()
    if success then
        while data.name ~= ""minecraft:glass"" do
            turtle.turnRight()
            success, data = turtle.inspect()
        end
    end
end

turnToGlass()

-- We are now facing the glass block

function getNewHammer()
    turnToGlass()
    turtle.select(1)
    turtle.turnLeft()
    -- wait until we have a hammer
    while turtle.getItemCount(1) == 0 do
        turtle.suck()
        sleep(1)
    end
    turtle.turnRight()
end

while true do
    -- First check if we have a copper hammer
    if turtle.getItemCount(1) == 0 then
        getNewHammer()
    end

    -- Now grab ores from the barrel. These are behind the turtle
    turtle.turnLeft()
    turtle.turnLeft()
    turtle.select(2)
    turtle.suck()

    -- Now craft the ores into dust
    turtle.craft()

    -- Now put dust in the barrel, which is to the right of the glass block
    turtle.turnLeft()

    for i = 2, 16 do
        turtle.select(i)
        turtle.drop()
    end

    turnToGlass()
end"
uy8Fw0UL,5,Lucian_Adrian,C,Saturday 7th of October 2023 12:16:48 PM CDT,"#include <stdio.h>

int numarMaximCutiiCubice(int inaltime) {
    // Numărul maxim de cutii este egal cu înălțimea camerei
    return inaltime;
}

int main() {
    int inaltime;
    
    printf(""Introduceti inaltimea camerei: "");
    scanf(""%d"", &inaltime);

    int rezultat = numarMaximCutiiCubice(inaltime);
    printf(""Numarul maxim de cutii cubice de latura 1 care pot incapea in camera este: %d\n"", rezultat);

    return 0;
}"
X4jCyVVM,4b,Lucian_Adrian,C,Saturday 7th of October 2023 12:13:00 PM CDT,"#include <stdio.h>

int numarCutiiCubice(int inaltime) {
    // Numărul de cutii este egal cu înălțimea camerei
    return inaltime;
}

int main() {
    int inaltime;
    
    printf(""Introduceti inaltimea camerei: "");
    scanf(""%d"", &inaltime);

    int rezultat = numarCutiiCubice(inaltime);
    printf(""Numarul de cutii cubice de latura 1 care pot fi suprapuse in camera este: %d\n"", rezultat);

    return 0;
}
"
ipTN6hyD,4a,Lucian_Adrian,C,Saturday 7th of October 2023 12:11:57 PM CDT,"#include <stdio.h>

// Functia care returneaza cate cutii cubice de latura 1 pot fi suprapuse intr-o incapere de inaltime h
int numarCutii(int h) {
    return h;
}

int main() {
    int h;

    printf(""Introduceti inaltimea incaperii (h): "");
    scanf(""%d"", &h);

    printf(""In incaperea de inaltime %d pot fi suprapuse %d cutii cubice de latura 1.\n"", h, numarCutii(h));
    
    return 0;
}"
HFrDcSMR,Untitled,Tanisha25,C++,Saturday 7th of October 2023 12:03:25 PM CDT,"//Tanisha Pareek.
// a=97, z=122, A=65, Z=90, '0'-48, '9'-57

#include <bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>

using namespace __gnu_pbds;
using namespace std;

#define pb push_back

typedef long long ll;
typedef vector<ll> vll;
typedef tree<ll, null_type, less<int>, rb_tree_tag,tree_order_statistics_node_update> pbds; // find_by_order(k)--(returns iterator of ele. at index k), order_of_key(k)--(returns index of k if k was present in set.)
typedef tree<ll, null_type, less_equal<int>, rb_tree_tag,tree_order_statistics_node_update> multipbds;

//--CONSTANTS--
const ll mod = 1e9 + 7;

//--USEFUL FUNCTIONS--
bool    isPalindrome(string str){ll low = 0,high = str.length() - 1;while (low < high){if (str[low] != str[high])return false;low++,high--;}return true;}
bool    isPrime(ll n){for(ll i=2;(i*i)<=n;i++){if((n%i) == 0) return false;}return true;}
ll      highestSmallerPower(ll num, ll p){ll cnt=0,curr=1;while((curr*p)<=num) curr*=p,cnt++;return cnt;} // gives largest power value(say x) such that p^x <= num
ll      modulerExpo(ll num,ll p,ll m){ll ans=1;num%=m;while(p){if(p&1) ans*=num;ans%=m;p = p>>1;num*=num;num%=m;}return ans;} // (num^p)%m
ll      phin(ll n){ll result = n;for(ll i=2;(i*i)<=n;i++){if(n%i == 0){while(n%i == 0) n/=i;result -= result/i;}}if(n>1) result -= (result/n);return result;}
vll primes;
void countPrimes(ll n)
{
	vector<bool> is_prime((n+1),true);
	is_prime[0] = is_prime[1] = false;

	for(ll i=2;i<=n;i++)
	{
		if((is_prime[i])&&((i*i)<=n))
		{
			for(ll j=(i*i);j<=n;j+=i) is_prime[j]=false;
		}
	}

	for(ll i=1;i<=n;i++)
	{
		if(is_prime[i]) primes.pb(i);
	}
	return;
}
ll inverse(ll i, ll m){
	if(i==1) return 1;
	return (m - ((m/i)*inverse(m%i,m))%m+m)%m;
}

// ---- Solution ----
void bfs(ll source, vector<vll> &shortestPath, vector<vll> &graph, ll n)
{
	queue<ll> q;
	q.push(source);
	vll vis(n+1,0);
	shortestPath[source][source] = 0;
	vis[source] = 1;

	while(!q.empty())
	{
		ll x = q.front();
		q.pop();

		for(auto j:graph[x])
		{
			if(vis[j] == 1) continue;
			vis[j] = 1;
			q.push(j);
			shortestPath[source][j] = shortestPath[source][x] + 1;
		}
	}
}

int main()
{
	#ifndef ONLINE_JUDGE
	freopen(""input.txt"", ""r"", stdin);
	freopen(""output.txt"", ""w"", stdout);
	#endif

	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);

	//Please read the question carefully again!

	ll n;
	cin>>n;

	vector<vll> graph(n+1,vll());
	vll isSelfLoop(n+1,0);
	for(ll i=1;i<=n;i++)
	{
		ll x;
		for(ll j=1;j<=n;j++)
		{
			cin>>x;
			if(x == 1) graph[i].pb(j);
			if((x==1)&&(j==i)) isSelfLoop[i]++;
		} 
	}

	vector<vll> shortestPath(n+1,vll(n+1,1e6));

	for(ll i=1;i<=n;i++)
	{
		bfs(i,shortestPath,graph,n);
		// for(ll j=1;j<=n;j++) cout<<shortestPath[i][j]<<"" "";
		// cout<<""\n"";
	}
	for(ll i=1;i<=n;i++)
	{
		if(isSelfLoop[i] == 1) cout<<""1\n"";
		else
		{
			ll mini = LLONG_MAX;
			for(ll j=1;j<=n;j++)
			{
				if(j == i) continue;
				mini = min(mini, (shortestPath[i][j] + shortestPath[j][i]));
			}
			
			if(mini >= 1e6) cout<<""NO WAY\n"";
			else cout<<mini<<""\n"";
		}
	}
	return 0;
}"
MeAVxXGC,2b,Lucian_Adrian,C,Saturday 7th of October 2023 11:50:48 AM CDT,"#include <stdio.h>


int ultimaCifraSuma(int numar1, int numar2) {
    int suma = numar1 + numar2;
    return suma % 10;
}

int main() {
    int numar1, numar2, numar3;

    printf(""Introduceti primul numar: "");
    scanf(""%d"", &numar1);

    printf(""Introduceti al doilea numar: "");
    scanf(""%d"", &numar2);

    printf(""Introduceti al treilea numar: "");
    scanf(""%d"", &numar3);

  
    int sumaTemp = ultimaCifraSuma(numar1, numar2);
    int sumaFinala = ultimaCifraSuma(sumaTemp, numar3);

    printf(""Ultima cifra a sumei numerelor %d, %d si %d este: %d\n"", numar1, numar2, numar3, sumaFinala);
    
    return 0;
}
"
5KWJ8qqW,2a,Lucian_Adrian,C,Saturday 7th of October 2023 11:50:17 AM CDT,"#include <stdio.h>

int ultimaCifraSuma(int numar1, int numar2) {
    int suma = numar1 + numar2;
    int ultimaCifra = suma % 10;
    return ultimaCifra;
}

int main() {
    int numar1, numar2, numar3;
    
    printf(""Introduceti primul numar: "");
    scanf(""%d"", &numar1);

    printf(""Introduceti al doilea numar: "");
    scanf(""%d"", &numar2);

    printf(""Introduceti al treilea numar: "");
    scanf(""%d"", &numar3);

    int suma1_2 = ultimaCifraSuma(numar1, numar2);
    int suma1_2_3 = ultimaCifraSuma(suma1_2, numar3);

    printf(""Ultima cifra a sumei celor trei numere este: %d\n"", suma1_2_3);

    return 0;
}
"
4d2gAedm,1b,Lucian_Adrian,C,Saturday 7th of October 2023 11:46:53 AM CDT,"#include <stdio.h>


int ultimaCifraSuma(int numar1, int numar2) {
    int suma = numar1 + numar2;
    return suma % 10;
}

int main() {
    int numar1, numar2;

    printf(""Introduceti primul numar: "");
    scanf(""%d"", &numar1);

    printf(""Introduceti al doilea numar: "");
    scanf(""%d"", &numar2);

    printf(""Ultima cifra a sumei numerelor %d si %d este: %d\n"", numar1, numar2, ultimaCifraSuma(numar1, numar2));
    
    return 0;
}"
SZ0MZbkj,1a,Lucian_Adrian,C,Saturday 7th of October 2023 11:46:11 AM CDT,"#include <stdio.h>

int ultimaCifraSuma(int numar1, int numar2) {

    int suma = numar1 + numar2;


    int ultimaCifra = suma % 10;

    return ultimaCifra;
}

int main() {
    int numar1, numar2;
    
    printf(""Introduceti primul numar: "");
    scanf(""%d"", &numar1);

    printf(""Introduceti al doilea numar: "");
    scanf(""%d"", &numar2);

    int rezultat = ultimaCifraSuma(numar1, numar2);
    printf(""Ultima cifra a sumei este: %d\n"", rezultat);

    return 0;
}"
BtUAkF8m,Untitled,drakon-firestone,C#,Saturday 7th of October 2023 11:25:28 AM CDT,"using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Lekcja3
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int a = 5;
            int b = 10;
            int c = 4;

            // dodawanie
            int suma = a + b + c;
            Console.WriteLine(suma); // 19

            // odejmowanie 
            int roznica = b - c;
            Console.WriteLine(roznica); // 6

            // mnożenie
            int mnozenie = a * b;
            Console.WriteLine(mnozenie); // 50

            // dzielenie
            int dzielenie = b / a;
            Console.WriteLine(dzielenie); // 2

            // dzielenie modulo (reszta z dzielenia)
            // b % c => 10 / 4 = 2 r. 2 => b % c = 10 % 4 = 2
            // 13 % 5 = 3 bo 13 / 5 = 2 r 3
            // 40 % 13 = 1 bo 40 / 13 = 3 r 1
            // 15 % 5 = 0 bo 15 / 5 = 3 r 0
            int modulo = b % c;
            Console.WriteLine(modulo);

            // a = 5, b = 10, c = 4
            int dzialanie = (a + b * c) / c;
            Console.WriteLine(dzialanie);

            // 21 % 8 = 5
            // 33 % 4 = 1
            // 17 % 10 = 7
            // 7 % 1 = 0


            Console.WriteLine(""Podaj imię: "");
            //string imie = Console.ReadLine();

            


            // PARSOWANIE - zamiana tekstu na inny typ
            int wzrost = int.Parse(""175"");
            Console.WriteLine(""Podaj wiek: "");
            //int wiek = int.Parse(Console.ReadLine());


            int x = 1;
            int y = 2;
            float z = x / y;
            Console.WriteLine(z);

            
            float x2 = x;
            // float = float  /  int
            float z2 =  x2   /  y;
            Console.WriteLine(z2);


            double potega = Math.Pow(2, 3); // 2 * 2 * 2 = 8

            double pierw_kwad = Math.Sqrt(9); // 3




            Console.ReadLine();
        }
    }
}
"
tynGEpnL,Nigerian scammers [7-10-1/2023],bombaires,HTML,Saturday 7th of October 2023 10:59:36 AM CDT,"<a href=""mailto:poast@email.com"">poast@email.com</a>
<a href=""mailto:burtondy@gmail.com"">burtondy@gmail.com</a>
<a href=""mailto:bu.rt.ond.y@gmail.com"">bu.rt.ond.y@gmail.com</a>
<a href=""mailto:bur.t.o.n.dy@gmail.com"">bur.t.o.n.dy@gmail.com</a>
<a href=""mailto:b.ur.ton.d.y@gmail.com"">b.ur.ton.d.y@gmail.com</a>
<a href=""mailto:burton.dy@gmail.com"">burton.dy@gmail.com</a>
<a href=""mailto:bur.tondy@gmail.com"">bur.tondy@gmail.com</a>
<a href=""mailto:bu.r.to.ndy@gmail.com"">bu.r.to.ndy@gmail.com</a>
<a href=""mailto:b.urto.nd.y@gmail.com"">b.urto.nd.y@gmail.com</a>
<a href=""mailto:b.urt.o.ndy@gmail.com"">b.urt.o.ndy@gmail.com</a>
<a href=""mailto:bur.to.n.dy@gmail.com"">bur.to.n.dy@gmail.com</a>
<a href=""mailto:b.u.rt.on.dy@gmail.com"">b.u.rt.on.dy@gmail.com</a>
<a href=""mailto:b.u.r.t.o.ndy@gmail.com"">b.u.r.t.o.ndy@gmail.com</a>
<a href=""mailto:bur.t.o.n.d.y@gmail.com"">bur.t.o.n.d.y@gmail.com</a>
<a href=""mailto:bu.r.t.ond.y@gmail.com"">bu.r.t.ond.y@gmail.com</a>
<a href=""mailto:bu.r.t.o.n.d.y@gmail.com"">bu.r.t.o.n.d.y@gmail.com</a>
<a href=""mailto:b.ur.t.o.ndy@gmail.com"">b.ur.t.o.ndy@gmail.com</a>
<a href=""mailto:bur.t.ond.y@gmail.com"">bur.t.ond.y@gmail.com</a>
<a href=""mailto:b.u.r.tondy@gmail.com"">b.u.r.tondy@gmail.com</a>
<a href=""mailto:bu.r.tondy@gmail.com"">bu.r.tondy@gmail.com</a>
<a href=""mailto:bu.r.to.n.d.y@gmail.com"">bu.r.to.n.d.y@gmail.com</a>
<a href=""mailto:bu.r.to.nd.y@gmail.com"">bu.r.to.nd.y@gmail.com</a>
<a href=""mailto:bu.rtondy@gmail.com"">bu.rtondy@gmail.com</a>
<a href=""mailto:b.u.r.t.on.d.y@gmail.com"">b.u.r.t.on.d.y@gmail.com</a>
<a href=""mailto:b.urtondy@gmail.com"">b.urtondy@gmail.com</a>
<a href=""mailto:burtond.y@gmail.com"">burtond.y@gmail.com</a>
<a href=""mailto:b.u.rton.dy@gmail.com"">b.u.rton.dy@gmail.com</a>
<a href=""mailto:bur.ton.d.y@gmail.com"">bur.ton.d.y@gmail.com</a>
<a href=""mailto:b.u.r.t.on.dy@gmail.com"">b.u.r.t.on.dy@gmail.com</a>
<a href=""mailto:b.urt.ondy@gmail.com"">b.urt.ondy@gmail.com</a>
<a href=""mailto:burt.ondy@gmail.com"">burt.ondy@gmail.com</a>
<a href=""mailto:b.ur.t.ondy@gmail.com"">b.ur.t.ondy@gmail.com</a>
<a href=""mailto:bur.ton.dy@gmail.com"">bur.ton.dy@gmail.com</a>
<a href=""mailto:bu.r.t.o.ndy@gmail.com"">bu.r.t.o.ndy@gmail.com</a>
<a href=""mailto:bur.tond.y@gmail.com"">bur.tond.y@gmail.com</a>
<a href=""mailto:bu.r.t.o.n.dy@gmail.com"">bu.r.t.o.n.dy@gmail.com</a>
<a href=""mailto:bu.rt.o.n.d.y@gmail.com"">bu.rt.o.n.d.y@gmail.com</a>
<a href=""mailto:b.u.rt.ond.y@gmail.com"">b.u.rt.ond.y@gmail.com</a>
<a href=""mailto:bur.t.o.ndy@gmail.com"">bur.t.o.ndy@gmail.com</a>
<a href=""mailto:b.u.r.tond.y@gmail.com"">b.u.r.tond.y@gmail.com</a>
<a href=""mailto:bu.rto.n.dy@gmail.com"">bu.rto.n.dy@gmail.com</a>
<a href=""mailto:b.u.r.t.o.n.d.y@gmail.com"">b.u.r.t.o.n.d.y@gmail.com</a>
<a href=""mailto:bu.rto.ndy@gmail.com"">bu.rto.ndy@gmail.com</a>
<a href=""mailto:bu.r.t.on.d.y@gmail.com"">bu.r.t.on.d.y@gmail.com</a>
<a href=""mailto:b.u.rtondy@gmail.com"">b.u.rtondy@gmail.com</a>
<a href=""mailto:bur.to.n.d.y@gmail.com"">bur.to.n.d.y@gmail.com</a>
<a href=""mailto:burt.ond.y@gmail.com"">burt.ond.y@gmail.com</a>
<a href=""mailto:b.u.r.to.n.dy@gmail.com"">b.u.r.to.n.dy@gmail.com</a>
<a href=""mailto:b.urto.n.dy@gmail.com"">b.urto.n.dy@gmail.com</a>
<a href=""mailto:bu.rto.n.d.y@gmail.com"">bu.rto.n.d.y@gmail.com</a>
<a href=""mailto:b.u.r.t.o.n.dy@gmail.com"">b.u.r.t.o.n.dy@gmail.com</a>
<a href=""mailto:bu.rt.ondy@gmail.com"">bu.rt.ondy@gmail.com</a>
<a href=""mailto:bu.rt.on.dy@gmail.com"">bu.rt.on.dy@gmail.com</a>
<a href=""mailto:b.u.r.to.ndy@gmail.com"">b.u.r.to.ndy@gmail.com</a>
<a href=""mailto:bu.r.t.on.dy@gmail.com"">bu.r.t.on.dy@gmail.com</a>
<a href=""mailto:b.ur.t.ond.y@gmail.com"">b.ur.t.ond.y@gmail.com</a>
<a href=""mailto:b.ur.ton.dy@gmail.com"">b.ur.ton.dy@gmail.com</a>
<a href=""mailto:b.ur.to.n.dy@gmail.com"">b.ur.to.n.dy@gmail.com</a>
<a href=""mailto:b.ur.t.o.nd.y@gmail.com"">b.ur.t.o.nd.y@gmail.com</a>
<a href=""mailto:b.u.rt.o.n.dy@gmail.com"">b.u.rt.o.n.dy@gmail.com</a>
<a href=""mailto:b.u.r.t.o.nd.y@gmail.com"">b.u.r.t.o.nd.y@gmail.com</a>
<a href=""mailto:b.u.r.to.nd.y@gmail.com"">b.u.r.to.nd.y@gmail.com</a>
<a href=""mailto:b.u.rt.o.ndy@gmail.com"">b.u.rt.o.ndy@gmail.com</a>
<a href=""mailto:burto.n.dy@gmail.com"">burto.n.dy@gmail.com</a>
<a href=""mailto:b.ur.tond.y@gmail.com"">b.ur.tond.y@gmail.com</a>
<a href=""mailto:bu.r.ton.d.y@gmail.com"">bu.r.ton.d.y@gmail.com</a>
<a href=""mailto:b.ur.t.o.n.dy@gmail.com"">b.ur.t.o.n.dy@gmail.com</a>
<a href=""mailto:b.urt.on.dy@gmail.com"">b.urt.on.dy@gmail.com</a>
<a href=""mailto:bu.rt.o.ndy@gmail.com"">bu.rt.o.ndy@gmail.com</a>
<a href=""mailto:bu.rt.on.d.y@gmail.com"">bu.rt.on.d.y@gmail.com</a>
<a href=""mailto:bu.rt.o.nd.y@gmail.com"">bu.rt.o.nd.y@gmail.com</a>
<a href=""mailto:bu.r.to.n.dy@gmail.com"">bu.r.to.n.dy@gmail.com</a>
<a href=""mailto:b.u.rto.n.d.y@gmail.com"">b.u.rto.n.d.y@gmail.com</a>
<a href=""mailto:b.urt.on.d.y@gmail.com"">b.urt.on.d.y@gmail.com</a>
<a href=""mailto:bur.t.ondy@gmail.com"">bur.t.ondy@gmail.com</a>
<a href=""mailto:b.ur.to.n.d.y@gmail.com"">b.ur.to.n.d.y@gmail.com</a>
<a href=""mailto:b.u.rto.ndy@gmail.com"">b.u.rto.ndy@gmail.com</a>
<a href=""mailto:bur.t.on.dy@gmail.com"">bur.t.on.dy@gmail.com</a>
<a href=""mailto:bu.r.t.ondy@gmail.com"">bu.r.t.ondy@gmail.com</a>
<a href=""mailto:bu.r.tond.y@gmail.com"">bu.r.tond.y@gmail.com</a>
<a href=""mailto:burto.n.d.y@gmail.com"">burto.n.d.y@gmail.com</a>
<a href=""mailto:burt.o.n.d.y@gmail.com"">burt.o.n.d.y@gmail.com</a>
<a href=""mailto:bur.t.on.d.y@gmail.com"">bur.t.on.d.y@gmail.com</a>
<a href=""mailto:burt.on.dy@gmail.com"">burt.on.dy@gmail.com</a>
<a href=""mailto:b.u.r.ton.d.y@gmail.com"">b.u.r.ton.d.y@gmail.com</a>
<a href=""mailto:b.u.rt.o.n.d.y@gmail.com"">b.u.rt.o.n.d.y@gmail.com</a>
<a href=""mailto:b.u.rto.n.dy@gmail.com"">b.u.rto.n.dy@gmail.com</a>
<a href=""mailto:b.urt.o.nd.y@gmail.com"">b.urt.o.nd.y@gmail.com</a>
<a href=""mailto:burt.on.d.y@gmail.com"">burt.on.d.y@gmail.com</a>
<a href=""mailto:b.u.r.t.ond.y@gmail.com"">b.u.r.t.ond.y@gmail.com</a>
<a href=""mailto:b.u.rtond.y@gmail.com"">b.u.rtond.y@gmail.com</a>
<a href=""mailto:b.ur.t.on.d.y@gmail.com"">b.ur.t.on.d.y@gmail.com</a>
<a href=""mailto:b.urt.o.n.dy@gmail.com"">b.urt.o.n.dy@gmail.com</a>
<a href=""mailto:b.urton.d.y@gmail.com"">b.urton.d.y@gmail.com</a>
<a href=""mailto:b.urt.ond.y@gmail.com"">b.urt.ond.y@gmail.com</a>
<a href=""mailto:burton.d.y@gmail.com"">burton.d.y@gmail.com</a>
<a href=""mailto:b.u.rt.on.d.y@gmail.com"">b.u.rt.on.d.y@gmail.com</a>
<a href=""mailto:burt.o.ndy@gmail.com"">burt.o.ndy@gmail.com</a>
<a href=""mailto:b.u.r.to.n.d.y@gmail.com"">b.u.r.to.n.d.y@gmail.com</a>
<a href=""mailto:b.urton.dy@gmail.com"">b.urton.dy@gmail.com</a>
<a href=""mailto:bu.rton.dy@gmail.com"">bu.rton.dy@gmail.com</a>
<a href=""mailto:b.u.rton.d.y@gmail.com"">b.u.rton.d.y@gmail.com</a>
<a href=""mailto:b.u.r.t.ondy@gmail.com"">b.u.r.t.ondy@gmail.com</a>
<a href=""mailto:burt.o.nd.y@gmail.com"">burt.o.nd.y@gmail.com</a>
<a href=""mailto:bu.r.ton.dy@gmail.com"">bu.r.ton.dy@gmail.com</a>
<a href=""mailto:bu.rt.o.n.dy@gmail.com"">bu.rt.o.n.dy@gmail.com</a>
<a href=""mailto:b.ur.tondy@gmail.com"">b.ur.tondy@gmail.com</a>
<a href=""mailto:bur.to.ndy@gmail.com"">bur.to.ndy@gmail.com</a>
<a href=""mailto:b.urt.o.n.d.y@gmail.com"">b.urt.o.n.d.y@gmail.com</a>
<a href=""mailto:bur.t.o.nd.y@gmail.com"">bur.t.o.nd.y@gmail.com</a>
<a href=""mailto:bu.r.t.o.nd.y@gmail.com"">bu.r.t.o.nd.y@gmail.com</a>
<a href=""mailto:b.urtond.y@gmail.com"">b.urtond.y@gmail.com</a>
<a href=""mailto:b.ur.to.nd.y@gmail.com"">b.ur.to.nd.y@gmail.com</a>
<a href=""mailto:b.u.rto.nd.y@gmail.com"">b.u.rto.nd.y@gmail.com</a>
<a href=""mailto:burt.o.n.dy@gmail.com"">burt.o.n.dy@gmail.com</a>
<a href=""mailto:burtondy@gmail.com"">burtondy@gmail.com</a>
<a href=""mailto:bur.to.nd.y@gmail.com"">bur.to.nd.y@gmail.com</a>
<a href=""mailto:burto.ndy@gmail.com"">burto.ndy@gmail.com</a>
<a href=""mailto:burto.nd.y@gmail.com"">burto.nd.y@gmail.com</a>
<a href=""mailto:bu.rtond.y@gmail.com"">bu.rtond.y@gmail.com</a>
<a href=""mailto:bu.rton.d.y@gmail.com"">bu.rton.d.y@gmail.com</a>
<a href=""mailto:b.ur.t.on.dy@gmail.com"">b.ur.t.on.dy@gmail.com</a>
<a href=""mailto:b.u.r.ton.dy@gmail.com"">b.u.r.ton.dy@gmail.com</a>
<a href=""mailto:b.ur.t.o.n.d.y@gmail.com"">b.ur.t.o.n.d.y@gmail.com</a>
<a href=""mailto:b.urto.ndy@gmail.com"">b.urto.ndy@gmail.com</a>
<a href=""mailto:b.ur.to.ndy@gmail.com"">b.ur.to.ndy@gmail.com</a>
<a href=""mailto:bu.rto.nd.y@gmail.com"">bu.rto.nd.y@gmail.com</a>
<a href=""mailto:b.u.rt.ondy@gmail.com"">b.u.rt.ondy@gmail.com</a>
<a href=""mailto:b.u.rt.o.nd.y@gmail.com"">b.u.rt.o.nd.y@gmail.com</a>
<a href=""mailto:b.urto.n.d.y@gmail.com"">b.urto.n.d.y@gmail.com</a>
<a href=""mailto:alexputilov241@gmail.com"">alexputilov241@gmail.com</a>
<a href=""mailto:al.ex.put.ilo.v.2.41@gmail.com"">al.ex.put.ilo.v.2.41@gmail.com</a>
<a href=""mailto:ale.x.p.ut.il.ov241@gmail.com"">ale.x.p.ut.il.ov241@gmail.com</a>
<a href=""mailto:al.e.xp.uti.lo.v241@gmail.com"">al.e.xp.uti.lo.v241@gmail.com</a>
<a href=""mailto:al.exp.u.tilo.v241@gmail.com"">al.exp.u.tilo.v241@gmail.com</a>
<a href=""mailto:al.exp.u.tilov.24.1@gmail.com"">al.exp.u.tilov.24.1@gmail.com</a>
<a href=""mailto:a.l.e.x.puti.lo.v.241@gmail.com"">a.l.e.x.puti.lo.v.241@gmail.com</a>
<a href=""mailto:a.lexput.ilo.v2.41@gmail.com"">a.lexput.ilo.v2.41@gmail.com</a>
<a href=""mailto:ale.x.puti.lov.2.4.1@gmail.com"">ale.x.puti.lov.2.4.1@gmail.com</a>
<a href=""mailto:ale.xpu.t.i.l.ov.2.4.1@gmail.com"">ale.xpu.t.i.l.ov.2.4.1@gmail.com</a>
<a href=""mailto:al.e.x.p.ut.ilo.v.241@gmail.com"">al.e.x.p.ut.ilo.v.241@gmail.com</a>
<a href=""mailto:a.le.xp.ut.il.ov.2.4.1@gmail.com"">a.le.xp.ut.il.ov.2.4.1@gmail.com</a>
<a href=""mailto:al.e.xput.i.l.o.v241@gmail.com"">al.e.xput.i.l.o.v241@gmail.com</a>
<a href=""mailto:a.lexp.util.ov2.4.1@gmail.com"">a.lexp.util.ov2.4.1@gmail.com</a>
<a href=""mailto:al.ex.putilo.v.24.1@gmail.com"">al.ex.putilo.v.24.1@gmail.com</a>
<a href=""mailto:ale.x.p.u.tilo.v.2.41@gmail.com"">ale.x.p.u.tilo.v.2.41@gmail.com</a>
<a href=""mailto:al.e.xputi.l.ov2.41@gmail.com"">al.e.xputi.l.ov2.41@gmail.com</a>
<a href=""mailto:a.lex.p.ut.i.lov.2.4.1@gmail.com"">a.lex.p.ut.i.lov.2.4.1@gmail.com</a>
<a href=""mailto:a.le.xp.utilov2.4.1@gmail.com"">a.le.xp.utilov2.4.1@gmail.com</a>
<a href=""mailto:a.l.ex.pu.t.il.ov.241@gmail.com"">a.l.ex.pu.t.il.ov.241@gmail.com</a>
<a href=""mailto:a.l.e.x.put.i.l.ov2.41@gmail.com"">a.l.e.x.put.i.l.ov2.41@gmail.com</a>
<a href=""mailto:a.l.e.xpu.t.il.ov.2.41@gmail.com"">a.l.e.xpu.t.il.ov.2.41@gmail.com</a>
<a href=""mailto:a.le.xp.u.tilo.v241@gmail.com"">a.le.xp.u.tilo.v241@gmail.com</a>
<a href=""mailto:a.le.xpu.ti.l.ov.2.4.1@gmail.com"">a.le.xpu.ti.l.ov.2.4.1@gmail.com</a>
<a href=""mailto:a.l.expu.t.i.l.o.v24.1@gmail.com"">a.l.expu.t.i.l.o.v24.1@gmail.com</a>
<a href=""mailto:al.e.xp.ut.ilov.2.41@gmail.com"">al.e.xp.ut.ilov.2.41@gmail.com</a>
<a href=""mailto:al.ex.p.u.t.ilo.v2.41@gmail.com"">al.ex.p.u.t.ilo.v2.41@gmail.com</a>
<a href=""mailto:a.l.ex.p.u.ti.l.o.v241@gmail.com"">a.l.ex.p.u.ti.l.o.v241@gmail.com</a>
<a href=""mailto:a.le.xpu.til.o.v24.1@gmail.com"">a.le.xpu.til.o.v24.1@gmail.com</a>
<a href=""mailto:ale.x.putilov.24.1@gmail.com"">ale.x.putilov.24.1@gmail.com</a>
<a href=""mailto:a.l.ex.put.i.l.ov.241@gmail.com"">a.l.ex.put.i.l.ov.241@gmail.com</a>
<a href=""mailto:al.e.x.put.il.ov2.4.1@gmail.com"">al.e.x.put.il.ov2.4.1@gmail.com</a>
<a href=""mailto:a.le.x.p.ut.i.l.ov.24.1@gmail.com"">a.le.x.p.ut.i.l.ov.24.1@gmail.com</a>
<a href=""mailto:alexp.u.t.i.l.o.v24.1@gmail.com"">alexp.u.t.i.l.o.v24.1@gmail.com</a>
<a href=""mailto:a.le.xp.u.til.ov.2.41@gmail.com"">a.le.xp.u.til.ov.2.41@gmail.com</a>
<a href=""mailto:a.le.x.putilov2.4.1@gmail.com"">a.le.x.putilov2.4.1@gmail.com</a>
<a href=""mailto:al.e.xput.il.o.v24.1@gmail.com"">al.e.xput.il.o.v24.1@gmail.com</a>
<a href=""mailto:a.le.x.p.u.tilo.v.241@gmail.com"">a.le.x.p.u.tilo.v.241@gmail.com</a>
<a href=""mailto:a.lex.p.u.t.i.l.ov.2.4.1@gmail.com"">a.lex.p.u.t.i.l.ov.2.4.1@gmail.com</a>
<a href=""mailto:a.l.e.x.p.u.t.il.ov.241@gmail.com"">a.l.e.x.p.u.t.il.ov.241@gmail.com</a>
<a href=""mailto:ale.xp.u.ti.l.o.v2.4.1@gmail.com"">ale.xp.u.ti.l.o.v2.4.1@gmail.com</a>
<a href=""mailto:alex.p.ut.i.l.o.v241@gmail.com"">alex.p.ut.i.l.o.v241@gmail.com</a>
<a href=""mailto:al.e.xput.il.ov2.41@gmail.com"">al.e.xput.il.ov2.41@gmail.com</a>
<a href=""mailto:a.lex.p.u.t.i.lo.v.241@gmail.com"">a.lex.p.u.t.i.lo.v.241@gmail.com</a>
<a href=""mailto:a.l.e.xp.uti.lo.v2.41@gmail.com"">a.l.e.xp.uti.lo.v2.41@gmail.com</a>
<a href=""mailto:al.e.x.p.u.t.il.o.v24.1@gmail.com"">al.e.x.p.u.t.il.o.v24.1@gmail.com</a>
<a href=""mailto:alex.p.ut.i.l.ov2.4.1@gmail.com"">alex.p.ut.i.l.ov2.4.1@gmail.com</a>
<a href=""mailto:al.e.xp.u.til.o.v241@gmail.com"">al.e.xp.u.til.o.v241@gmail.com</a>
<a href=""mailto:ale.xp.u.t.i.l.ov.2.4.1@gmail.com"">ale.xp.u.t.i.l.ov.2.4.1@gmail.com</a>
<a href=""mailto:a.lexp.utilov24.1@gmail.com"">a.lexp.utilov24.1@gmail.com</a>
<a href=""mailto:ale.xput.ilo.v241@gmail.com"">ale.xput.ilo.v241@gmail.com</a>
<a href=""mailto:al.e.xputilo.v24.1@gmail.com"">al.e.xputilo.v24.1@gmail.com</a>
<a href=""mailto:a.l.ex.p.u.tilov24.1@gmail.com"">a.l.ex.p.u.tilov24.1@gmail.com</a>
<a href=""mailto:a.lexp.utilov241@gmail.com"">a.lexp.utilov241@gmail.com</a>
<a href=""mailto:a.le.x.pu.t.il.o.v2.41@gmail.com"">a.le.x.pu.t.il.o.v2.41@gmail.com</a>
<a href=""mailto:a.l.e.xputi.lov24.1@gmail.com"">a.l.e.xputi.lov24.1@gmail.com</a>
<a href=""mailto:ale.xpu.tilo.v241@gmail.com"">ale.xpu.tilo.v241@gmail.com</a>
<a href=""mailto:a.l.e.x.pu.t.ilov24.1@gmail.com"">a.l.e.x.pu.t.ilov24.1@gmail.com</a>
<a href=""mailto:a.le.xput.il.o.v241@gmail.com"">a.le.xput.il.o.v241@gmail.com</a>
<a href=""mailto:al.e.xput.i.l.ov.2.41@gmail.com"">al.e.xput.i.l.ov.2.41@gmail.com</a>
<a href=""mailto:a.l.e.x.putilo.v241@gmail.com"">a.l.e.x.putilo.v241@gmail.com</a>
<a href=""mailto:al.ex.p.u.til.ov2.4.1@gmail.com"">al.ex.p.u.til.ov2.4.1@gmail.com</a>
<a href=""mailto:al.ex.p.utilo.v.2.4.1@gmail.com"">al.ex.p.utilo.v.2.4.1@gmail.com</a>
<a href=""mailto:a.lex.p.u.ti.l.ov.2.41@gmail.com"">a.lex.p.u.ti.l.ov.2.41@gmail.com</a>
<a href=""mailto:a.lexputi.l.o.v2.41@gmail.com"">a.lexputi.l.o.v2.41@gmail.com</a>
<a href=""mailto:a.l.ex.pu.t.i.lo.v.2.41@gmail.com"">a.l.ex.pu.t.i.lo.v.2.41@gmail.com</a>
<a href=""mailto:alex.pu.t.i.lo.v.2.4.1@gmail.com"">alex.pu.t.i.lo.v.2.4.1@gmail.com</a>
<a href=""mailto:alex.p.uti.lov.24.1@gmail.com"">alex.p.uti.lov.24.1@gmail.com</a>
<a href=""mailto:ale.xput.il.o.v.241@gmail.com"">ale.xput.il.o.v.241@gmail.com</a>
<a href=""mailto:a.le.xpu.til.o.v2.4.1@gmail.com"">a.le.xpu.til.o.v2.4.1@gmail.com</a>
<a href=""mailto:al.e.xpu.tilo.v24.1@gmail.com"">al.e.xpu.tilo.v24.1@gmail.com</a>
<a href=""mailto:a.le.xp.u.ti.l.o.v241@gmail.com"">a.le.xp.u.ti.l.o.v241@gmail.com</a>
<a href=""mailto:a.le.xpu.tilo.v241@gmail.com"">a.le.xpu.tilo.v241@gmail.com</a>
<a href=""mailto:a.l.ex.p.u.t.il.o.v2.41@gmail.com"">a.l.ex.p.u.t.il.o.v2.41@gmail.com</a>
<a href=""mailto:a.l.ex.p.u.ti.l.ov.241@gmail.com"">a.l.ex.p.u.ti.l.ov.241@gmail.com</a>
<a href=""mailto:ale.xpu.ti.lo.v.241@gmail.com"">ale.xpu.ti.lo.v.241@gmail.com</a>
<a href=""mailto:ale.xp.ut.ilo.v241@gmail.com"">ale.xp.ut.ilo.v241@gmail.com</a>
<a href=""mailto:al.ex.puti.lov.24.1@gmail.com"">al.ex.puti.lov.24.1@gmail.com</a>
<a href=""mailto:al.ex.p.uti.l.o.v.2.41@gmail.com"">al.ex.p.uti.l.o.v.2.41@gmail.com</a>
<a href=""mailto:alexp.u.til.o.v24.1@gmail.com"">alexp.u.til.o.v24.1@gmail.com</a>
<a href=""mailto:a.le.xpu.tilo.v.24.1@gmail.com"">a.le.xpu.tilo.v.24.1@gmail.com</a>
<a href=""mailto:al.e.xp.ut.il.o.v.241@gmail.com"">al.e.xp.ut.il.o.v.241@gmail.com</a>
<a href=""mailto:alex.p.ut.ilov241@gmail.com"">alex.p.ut.ilov241@gmail.com</a>
<a href=""mailto:a.lexput.i.lo.v2.4.1@gmail.com"">a.lexput.i.lo.v2.4.1@gmail.com</a>
<a href=""mailto:a.l.e.x.putil.ov.24.1@gmail.com"">a.l.e.x.putil.ov.24.1@gmail.com</a>
<a href=""mailto:a.l.e.x.p.u.t.i.l.o.v.2.4.1@gmail.com"">a.l.e.x.p.u.t.i.l.o.v.2.4.1@gmail.com</a>
<a href=""mailto:alexpu.t.i.l.ov241@gmail.com"">alexpu.t.i.l.ov241@gmail.com</a>
<a href=""mailto:a.l.exput.ilo.v241@gmail.com"">a.l.exput.ilo.v241@gmail.com</a>
<a href=""mailto:a.l.ex.pu.ti.l.o.v.2.4.1@gmail.com"">a.l.ex.pu.ti.l.o.v.2.4.1@gmail.com</a>
<a href=""mailto:alex.pu.t.ilov2.41@gmail.com"">alex.pu.t.ilov2.41@gmail.com</a>
<a href=""mailto:a.lexputil.ov.2.4.1@gmail.com"">a.lexputil.ov.2.4.1@gmail.com</a>
<a href=""mailto:a.lex.p.u.ti.lov.241@gmail.com"">a.lex.p.u.ti.lov.241@gmail.com</a>
<a href=""mailto:a.le.x.put.i.l.o.v241@gmail.com"">a.le.x.put.i.l.o.v241@gmail.com</a>
<a href=""mailto:alexp.uti.lo.v24.1@gmail.com"">alexp.uti.lo.v24.1@gmail.com</a>
<a href=""mailto:a.lexp.u.ti.l.ov.2.41@gmail.com"">a.lexp.u.ti.l.ov.2.41@gmail.com</a>
<a href=""mailto:alex.p.u.ti.l.o.v.241@gmail.com"">alex.p.u.ti.l.o.v.241@gmail.com</a>
<a href=""mailto:alexp.ut.i.lo.v24.1@gmail.com"">alexp.ut.i.lo.v24.1@gmail.com</a>
<a href=""mailto:a.le.xp.u.t.ilo.v.241@gmail.com"">a.le.xp.u.t.ilo.v.241@gmail.com</a>
<a href=""mailto:al.expu.t.i.lov.2.41@gmail.com"">al.expu.t.i.lov.2.41@gmail.com</a>
<a href=""mailto:a.l.e.x.pu.tilov2.41@gmail.com"">a.l.e.x.pu.tilov2.41@gmail.com</a>
<a href=""mailto:ale.x.p.ut.il.ov.2.41@gmail.com"">ale.x.p.ut.il.ov.2.41@gmail.com</a>
<a href=""mailto:a.lexputilov.24.1@gmail.com"">a.lexputilov.24.1@gmail.com</a>
<a href=""mailto:al.e.x.put.ilov2.41@gmail.com"">al.e.x.put.ilov2.41@gmail.com</a>
<a href=""mailto:al.exp.ut.ilov.2.41@gmail.com"">al.exp.ut.ilov.2.41@gmail.com</a>
<a href=""mailto:al.exputil.o.v.24.1@gmail.com"">al.exputil.o.v.24.1@gmail.com</a>
<a href=""mailto:a.lex.pu.ti.lov.2.41@gmail.com"">a.lex.pu.ti.lov.2.41@gmail.com</a>
<a href=""mailto:al.e.xp.ut.ilo.v24.1@gmail.com"">al.e.xp.ut.ilo.v24.1@gmail.com</a>
<a href=""mailto:al.e.x.p.u.ti.lo.v2.41@gmail.com"">al.e.x.p.u.ti.lo.v2.41@gmail.com</a>
<a href=""mailto:a.le.xpu.t.il.o.v24.1@gmail.com"">a.le.xpu.t.il.o.v24.1@gmail.com</a>
<a href=""mailto:a.le.x.p.u.ti.lo.v.241@gmail.com"">a.le.x.p.u.ti.lo.v.241@gmail.com</a>
<a href=""mailto:a.l.e.x.p.u.ti.l.ov2.4.1@gmail.com"">a.l.e.x.p.u.ti.l.ov2.4.1@gmail.com</a>
<a href=""mailto:a.l.e.x.pu.t.i.l.o.v.24.1@gmail.com"">a.l.e.x.pu.t.i.l.o.v.24.1@gmail.com</a>
<a href=""mailto:a.l.e.xp.util.o.v2.41@gmail.com"">a.l.e.xp.util.o.v2.41@gmail.com</a>
<a href=""mailto:ale.xp.uti.l.ov241@gmail.com"">ale.xp.uti.l.ov241@gmail.com</a>
<a href=""mailto:a.l.e.x.p.u.t.i.lov2.4.1@gmail.com"">a.l.e.x.p.u.t.i.lov2.4.1@gmail.com</a>
<a href=""mailto:a.lex.put.il.o.v.24.1@gmail.com"">a.lex.put.il.o.v.24.1@gmail.com</a>
<a href=""mailto:ale.xp.u.ti.lo.v.24.1@gmail.com"">ale.xp.u.ti.lo.v.24.1@gmail.com</a>
<a href=""mailto:ale.xpu.t.ilov2.4.1@gmail.com"">ale.xpu.t.ilov2.4.1@gmail.com</a>
<a href=""mailto:alex.pu.t.ilo.v.241@gmail.com"">alex.pu.t.ilo.v.241@gmail.com</a>
<a href=""mailto:alex.p.u.t.ilov.241@gmail.com"">alex.p.u.t.ilov.241@gmail.com</a>
<a href=""mailto:a.le.xput.il.ov24.1@gmail.com"">a.le.xput.il.ov24.1@gmail.com</a>
<a href=""mailto:al.ex.puti.lov2.41@gmail.com"">al.ex.puti.lov2.41@gmail.com</a>
<a href=""mailto:a.l.expu.til.ov241@gmail.com"">a.l.expu.til.ov241@gmail.com</a>
<a href=""mailto:a.le.xp.ut.i.lov.2.4.1@gmail.com"">a.le.xp.ut.i.lov.2.4.1@gmail.com</a>
<a href=""mailto:a.l.ex.put.i.l.ov2.41@gmail.com"">a.l.ex.put.i.l.ov2.41@gmail.com</a>
<a href=""mailto:a.l.e.xp.u.til.ov.2.4.1@gmail.com"">a.l.e.xp.u.til.ov.2.4.1@gmail.com</a>
<a href=""mailto:ale.xp.utilo.v.2.4.1@gmail.com"">ale.xp.utilo.v.2.4.1@gmail.com</a>
<a href=""mailto:alex.p.u.t.ilov241@gmail.com"">alex.p.u.t.ilov241@gmail.com</a>
<a href=""mailto:ale.x.p.uti.l.ov2.4.1@gmail.com"">ale.x.p.uti.l.ov2.4.1@gmail.com</a>
<a href=""mailto:alexputil.ov.24.1@gmail.com"">alexputil.ov.24.1@gmail.com</a>
<a href=""mailto:a.l.e.x.put.i.l.ov.241@gmail.com"">a.l.e.x.put.i.l.ov.241@gmail.com</a>
<a href=""mailto:alexput.ilo.v2.41@gmail.com"">alexput.ilo.v2.41@gmail.com</a>
<a href=""mailto:ale.x.p.u.tilov.2.41@gmail.com"">ale.x.p.u.tilov.2.41@gmail.com</a>
<a href=""mailto:a.l.ex.p.uti.lov241@gmail.com"">a.l.ex.p.uti.lov241@gmail.com</a>
<a href=""mailto:a.lex.pu.t.i.l.ov241@gmail.com"">a.lex.pu.t.i.l.ov241@gmail.com</a>
<a href=""mailto:al.e.x.p.uti.l.ov.2.4.1@gmail.com"">al.e.x.p.uti.l.ov.2.4.1@gmail.com</a>
<a href=""mailto:a.le.xp.ut.ilov24.1@gmail.com"">a.le.xp.ut.ilov24.1@gmail.com</a>
<a href=""mailto:a.l.e.x.p.u.tilo.v.24.1@gmail.com"">a.l.e.x.p.u.tilo.v.24.1@gmail.com</a>
<a href=""mailto:alex.p.util.ov2.4.1@gmail.com"">alex.p.util.ov2.4.1@gmail.com</a>
<a href=""mailto:al.e.xput.i.lov24.1@gmail.com"">al.e.xput.i.lov24.1@gmail.com</a>
<a href=""mailto:al.exp.util.o.v.2.41@gmail.com"">al.exp.util.o.v.2.41@gmail.com</a>
<a href=""mailto:a.lexputilov2.4.1@gmail.com"">a.lexputilov2.4.1@gmail.com</a>
<a href=""mailto:a.le.xputi.l.o.v.2.41@gmail.com"">a.le.xputi.l.o.v.2.41@gmail.com</a>
<a href=""mailto:a.lex.p.u.t.i.l.ov24.1@gmail.com"">a.lex.p.u.t.i.l.ov24.1@gmail.com</a>
<a href=""mailto:a.lex.p.u.til.ov2.41@gmail.com"">a.lex.p.u.til.ov2.41@gmail.com</a>
<a href=""mailto:a.l.e.x.p.u.ti.lo.v.2.41@gmail.com"">a.l.e.x.p.u.ti.lo.v.2.41@gmail.com</a>
<a href=""mailto:al.exp.u.tilo.v2.41@gmail.com"">al.exp.u.tilo.v2.41@gmail.com</a>
<a href=""mailto:al.e.x.pu.ti.l.o.v2.41@gmail.com"">al.e.x.pu.ti.l.o.v2.41@gmail.com</a>
<a href=""mailto:al.e.x.pu.ti.lo.v.241@gmail.com"">al.e.x.pu.ti.lo.v.241@gmail.com</a>
<a href=""mailto:al.e.xp.u.t.i.lov241@gmail.com"">al.e.xp.u.t.i.lov241@gmail.com</a>
<a href=""mailto:a.l.e.x.p.ut.il.o.v2.4.1@gmail.com"">a.l.e.x.p.ut.il.o.v2.4.1@gmail.com</a>
<a href=""mailto:a.l.e.x.p.u.ti.l.ov.2.4.1@gmail.com"">a.l.e.x.p.u.ti.l.ov.2.4.1@gmail.com</a>
<a href=""mailto:a.lexpu.ti.l.ov241@gmail.com"">a.lexpu.ti.l.ov241@gmail.com</a>
<a href=""mailto:a.l.ex.p.u.til.o.v.2.4.1@gmail.com"">a.l.ex.p.u.til.o.v.2.4.1@gmail.com</a>
<a href=""mailto:al.expu.t.i.l.o.v2.4.1@gmail.com"">al.expu.t.i.l.o.v2.4.1@gmail.com</a>
<a href=""mailto:al.ex.puti.lov.241@gmail.com"">al.ex.puti.lov.241@gmail.com</a>
<a href=""mailto:a.lex.put.i.lov2.41@gmail.com"">a.lex.put.i.lov2.41@gmail.com</a>
<a href=""mailto:a.lex.p.u.t.ilo.v24.1@gmail.com"">a.lex.p.u.t.ilo.v24.1@gmail.com</a>
<a href=""mailto:al.exputilo.v.2.41@gmail.com"">al.exputilo.v.2.41@gmail.com</a>
<a href=""mailto:alex.p.ut.ilo.v241@gmail.com"">alex.p.ut.ilo.v241@gmail.com</a>
<a href=""mailto:a.l.e.x.p.u.tilo.v.241@gmail.com"">a.l.e.x.p.u.tilo.v.241@gmail.com</a>
<a href=""mailto:a.lexpu.ti.lo.v241@gmail.com"">a.lexpu.ti.lo.v241@gmail.com</a>
<a href=""mailto:a.l.e.xp.u.t.i.l.o.v.241@gmail.com"">a.l.e.xp.u.t.i.l.o.v.241@gmail.com</a>
<a href=""mailto:a.lexp.ut.ilov2.41@gmail.com"">a.lexp.ut.ilov2.41@gmail.com</a>
<a href=""mailto:ale.xpu.t.ilov.2.4.1@gmail.com"">ale.xpu.t.ilov.2.4.1@gmail.com</a>
<a href=""mailto:al.ex.p.u.ti.lov.2.41@gmail.com"">al.ex.p.u.ti.lov.2.41@gmail.com</a>
<a href=""mailto:al.e.x.put.il.o.v241@gmail.com"">al.e.x.put.il.o.v241@gmail.com</a>
<a href=""mailto:al.e.x.putilov.2.41@gmail.com"">al.e.x.putilov.2.41@gmail.com</a>
<a href=""mailto:al.exput.il.o.v24.1@gmail.com"">al.exput.il.o.v24.1@gmail.com</a>
<a href=""mailto:al.ex.pu.tilov2.4.1@gmail.com"">al.ex.pu.tilov2.4.1@gmail.com</a>
<a href=""mailto:a.le.x.putil.ov241@gmail.com"">a.le.x.putil.ov241@gmail.com</a>
<a href=""mailto:al.e.x.p.uti.l.o.v2.4.1@gmail.com"">al.e.x.p.uti.l.o.v2.4.1@gmail.com</a>
<a href=""mailto:ale.x.pu.ti.l.ov2.4.1@gmail.com"">ale.x.pu.ti.l.ov2.4.1@gmail.com</a>
<a href=""mailto:ale.x.put.i.l.o.v.24.1@gmail.com"">ale.x.put.i.l.o.v.24.1@gmail.com</a>
<a href=""mailto:ale.xp.util.o.v2.41@gmail.com"">ale.xp.util.o.v2.41@gmail.com</a>
<a href=""mailto:ale.xp.u.til.ov.241@gmail.com"">ale.xp.u.til.ov.241@gmail.com</a>
<a href=""mailto:a.l.exp.u.tilov24.1@gmail.com"">a.l.exp.u.tilov24.1@gmail.com</a>
<a href=""mailto:al.exputilo.v.2.4.1@gmail.com"">al.exputilo.v.2.4.1@gmail.com</a>
<a href=""mailto:al.e.xpu.t.i.l.o.v.2.41@gmail.com"">al.e.xpu.t.i.l.o.v.2.41@gmail.com</a>
<a href=""mailto:a.le.xpu.ti.lo.v2.4.1@gmail.com"">a.le.xpu.ti.lo.v2.4.1@gmail.com</a>
<a href=""mailto:a.le.x.put.i.lov241@gmail.com"">a.le.x.put.i.lov241@gmail.com</a>
<a href=""mailto:a.l.ex.p.u.ti.lov241@gmail.com"">a.l.ex.p.u.ti.lov241@gmail.com</a>
<a href=""mailto:a.l.ex.p.u.ti.l.ov.2.4.1@gmail.com"">a.l.ex.p.u.ti.l.ov.2.4.1@gmail.com</a>
<a href=""mailto:a.lexp.u.t.ilov24.1@gmail.com"">a.lexp.u.t.ilov24.1@gmail.com</a>
<a href=""mailto:al.e.xp.u.ti.lov24.1@gmail.com"">al.e.xp.u.ti.lov24.1@gmail.com</a>
<a href=""mailto:alexpu.t.i.lo.v241@gmail.com"">alexpu.t.i.lo.v241@gmail.com</a>
<a href=""mailto:al.ex.pu.t.i.lov.2.41@gmail.com"">al.ex.pu.t.i.lov.2.41@gmail.com</a>
<a href=""mailto:a.l.exput.i.l.ov2.4.1@gmail.com"">a.l.exput.i.l.ov2.4.1@gmail.com</a>
<a href=""mailto:a.l.exputi.lo.v.2.41@gmail.com"">a.l.exputi.lo.v.2.41@gmail.com</a>
<a href=""mailto:a.le.xp.uti.lo.v241@gmail.com"">a.le.xp.uti.lo.v241@gmail.com</a>
<a href=""mailto:alexput.i.lov2.41@gmail.com"">alexput.i.lov2.41@gmail.com</a>
<a href=""mailto:ale.xpu.t.il.ov.241@gmail.com"">ale.xpu.t.il.ov.241@gmail.com</a>
<a href=""mailto:a.le.xp.u.t.i.l.o.v.241@gmail.com"">a.le.xp.u.t.i.l.o.v.241@gmail.com</a>
<a href=""mailto:a.lexp.utilo.v24.1@gmail.com"">a.lexp.utilo.v24.1@gmail.com</a>
<a href=""mailto:a.l.e.xp.u.t.i.lo.v241@gmail.com"">a.l.e.xp.u.t.i.lo.v241@gmail.com</a>
<a href=""mailto:al.e.xputil.o.v.2.41@gmail.com"">al.e.xputil.o.v.2.41@gmail.com</a>
<a href=""mailto:ale.x.p.u.t.i.l.o.v24.1@gmail.com"">ale.x.p.u.t.i.l.o.v24.1@gmail.com</a>
<a href=""mailto:al.exp.ut.i.lo.v2.41@gmail.com"">al.exp.ut.i.lo.v2.41@gmail.com</a>
<a href=""mailto:alex.pu.tilo.v.2.41@gmail.com"">alex.pu.tilo.v.2.41@gmail.com</a>
<a href=""mailto:al.ex.p.u.tilo.v.241@gmail.com"">al.ex.p.u.tilo.v.241@gmail.com</a>
<a href=""mailto:al.e.xp.u.t.ilov.24.1@gmail.com"">al.e.xp.u.t.ilov.24.1@gmail.com</a>
<a href=""mailto:info@realrulaghani.com"">info@realrulaghani.com</a>
<a href=""mailto:dd368053@gmail.com"">dd368053@gmail.com</a>
<a href=""mailto:dd.368053@gmail.com"">dd.368053@gmail.com</a>
<a href=""mailto:d.d3.68.0.5.3@gmail.com"">d.d3.68.0.5.3@gmail.com</a>
<a href=""mailto:dd.3.68.0.5.3@gmail.com"">dd.3.68.0.5.3@gmail.com</a>
<a href=""mailto:dd.36.80.5.3@gmail.com"">dd.36.80.5.3@gmail.com</a>
<a href=""mailto:dd3.68.0.5.3@gmail.com"">dd3.68.0.5.3@gmail.com</a>
<a href=""mailto:d.d.3.6.8053@gmail.com"">d.d.3.6.8053@gmail.com</a>
<a href=""mailto:d.d.36.805.3@gmail.com"">d.d.36.805.3@gmail.com</a>
<a href=""mailto:d.d3.6.8053@gmail.com"">d.d3.6.8053@gmail.com</a>
<a href=""mailto:d.d3.6.8.0.53@gmail.com"">d.d3.6.8.0.53@gmail.com</a>
<a href=""mailto:dd.368.053@gmail.com"">dd.368.053@gmail.com</a>
<a href=""mailto:d.d3.6.805.3@gmail.com"">d.d3.6.805.3@gmail.com</a>
<a href=""mailto:d.d.3.6.8.05.3@gmail.com"">d.d.3.6.8.05.3@gmail.com</a>
<a href=""mailto:dd368053@gmail.com"">dd368053@gmail.com</a>
<a href=""mailto:d.d3.6.8.0.5.3@gmail.com"">d.d3.6.8.0.5.3@gmail.com</a>
<a href=""mailto:dd36805.3@gmail.com"">dd36805.3@gmail.com</a>
<a href=""mailto:d.d.3.6.8.053@gmail.com"">d.d.3.6.8.053@gmail.com</a>
<a href=""mailto:d.d368.05.3@gmail.com"">d.d368.05.3@gmail.com</a>
<a href=""mailto:d.d3.6.8.05.3@gmail.com"">d.d3.6.8.05.3@gmail.com</a>
<a href=""mailto:d.d.3.68.0.53@gmail.com"">d.d.3.68.0.53@gmail.com</a>
<a href=""mailto:dd36.805.3@gmail.com"">dd36.805.3@gmail.com</a>
<a href=""mailto:dd3.6.80.5.3@gmail.com"">dd3.6.80.5.3@gmail.com</a>
<a href=""mailto:d.d.36.8.0.5.3@gmail.com"">d.d.36.8.0.5.3@gmail.com</a>
<a href=""mailto:d.d.3.68.05.3@gmail.com"">d.d.3.68.05.3@gmail.com</a>
<a href=""mailto:dd36.8.053@gmail.com"">dd36.8.053@gmail.com</a>
<a href=""mailto:d.d.36.8.05.3@gmail.com"">d.d.36.8.05.3@gmail.com</a>
<a href=""mailto:d.d.36.80.5.3@gmail.com"">d.d.36.80.5.3@gmail.com</a>
<a href=""mailto:d.d.368.0.5.3@gmail.com"">d.d.368.0.5.3@gmail.com</a>
<a href=""mailto:dd.3.680.53@gmail.com"">dd.3.680.53@gmail.com</a>
<a href=""mailto:d.d.368053@gmail.com"">d.d.368053@gmail.com</a>
<a href=""mailto:d.d.3.6.805.3@gmail.com"">d.d.3.6.805.3@gmail.com</a>
<a href=""mailto:dd36.80.5.3@gmail.com"">dd36.80.5.3@gmail.com</a>
<a href=""mailto:d.d.3.68.0.5.3@gmail.com"">d.d.3.68.0.5.3@gmail.com</a>
<a href=""mailto:dd.36.8.0.5.3@gmail.com"">dd.36.8.0.5.3@gmail.com</a>
<a href=""mailto:dd.3.6.8053@gmail.com"">dd.3.6.8053@gmail.com</a>
<a href=""mailto:d.d.3.6.8.0.5.3@gmail.com"">d.d.3.6.8.0.5.3@gmail.com</a>
<a href=""mailto:d.d.3680.5.3@gmail.com"">d.d.3680.5.3@gmail.com</a>
<a href=""mailto:dd3.68.0.53@gmail.com"">dd3.68.0.53@gmail.com</a>
<a href=""mailto:dd.3.68053@gmail.com"">dd.3.68053@gmail.com</a>
<a href=""mailto:dd3.6.8.05.3@gmail.com"">dd3.6.8.05.3@gmail.com</a>
<a href=""mailto:dd.3.680.5.3@gmail.com"">dd.3.680.5.3@gmail.com</a>
<a href=""mailto:dd36.80.53@gmail.com"">dd36.80.53@gmail.com</a>
<a href=""mailto:d.d3680.53@gmail.com"">d.d3680.53@gmail.com</a>
<a href=""mailto:dd368.0.5.3@gmail.com"">dd368.0.5.3@gmail.com</a>
<a href=""mailto:dd.3.6.805.3@gmail.com"">dd.3.6.805.3@gmail.com</a>
<a href=""mailto:dd36.8053@gmail.com"">dd36.8053@gmail.com</a>
<a href=""mailto:d.d36.80.53@gmail.com"">d.d36.80.53@gmail.com</a>
<a href=""mailto:d.d368053@gmail.com"">d.d368053@gmail.com</a>
<a href=""mailto:dd.3.6.80.5.3@gmail.com"">dd.3.6.80.5.3@gmail.com</a>
<a href=""mailto:dd368.053@gmail.com"">dd368.053@gmail.com</a>
<a href=""mailto:d.d36.8.0.5.3@gmail.com"">d.d36.8.0.5.3@gmail.com</a>
<a href=""mailto:d.d.36805.3@gmail.com"">d.d.36805.3@gmail.com</a>
<a href=""mailto:dd.36.8053@gmail.com"">dd.36.8053@gmail.com</a>
<a href=""mailto:dd.3.68.05.3@gmail.com"">dd.3.68.05.3@gmail.com</a>
<a href=""mailto:dd.368.0.53@gmail.com"">dd.368.0.53@gmail.com</a>
<a href=""mailto:d.d.3.68053@gmail.com"">d.d.3.68053@gmail.com</a>
<a href=""mailto:d.d3.680.53@gmail.com"">d.d3.680.53@gmail.com</a>
<a href=""mailto:dd.36.8.0.53@gmail.com"">dd.36.8.0.53@gmail.com</a>
<a href=""mailto:d.d368.053@gmail.com"">d.d368.053@gmail.com</a>
<a href=""mailto:dd3.680.5.3@gmail.com"">dd3.680.5.3@gmail.com</a>
<a href=""mailto:d.d36.8.05.3@gmail.com"">d.d36.8.05.3@gmail.com</a>
<a href=""mailto:d.d.3.68.053@gmail.com"">d.d.3.68.053@gmail.com</a>
<a href=""mailto:dd.36.80.53@gmail.com"">dd.36.80.53@gmail.com</a>
<a href=""mailto:d.d.3.6.80.53@gmail.com"">d.d.3.6.80.53@gmail.com</a>
<a href=""mailto:d.d.3.6.8.0.53@gmail.com"">d.d.3.6.8.0.53@gmail.com</a>
<a href=""mailto:dd36.8.0.53@gmail.com"">dd36.8.0.53@gmail.com</a>
<a href=""mailto:d.d368.0.5.3@gmail.com"">d.d368.0.5.3@gmail.com</a>
<a href=""mailto:d.d36.805.3@gmail.com"">d.d36.805.3@gmail.com</a>
<a href=""mailto:dd.3.6.8.0.53@gmail.com"">dd.3.6.8.0.53@gmail.com</a>
<a href=""mailto:dd.3.6.8.053@gmail.com"">dd.3.6.8.053@gmail.com</a>
<a href=""mailto:d.d3.6.80.53@gmail.com"">d.d3.6.80.53@gmail.com</a>
<a href=""mailto:d.d.36.8.0.53@gmail.com"">d.d.36.8.0.53@gmail.com</a>
<a href=""mailto:dd.36.8.05.3@gmail.com"">dd.36.8.05.3@gmail.com</a>
<a href=""mailto:d.d36.8.0.53@gmail.com"">d.d36.8.0.53@gmail.com</a>
<a href=""mailto:d.d.3680.53@gmail.com"">d.d.3680.53@gmail.com</a>
<a href=""mailto:d.d3.68053@gmail.com"">d.d3.68053@gmail.com</a>
<a href=""mailto:d.d.3.680.53@gmail.com"">d.d.3.680.53@gmail.com</a>
<a href=""mailto:dd.3.68.053@gmail.com"">dd.3.68.053@gmail.com</a>
<a href=""mailto:dd.36.8.053@gmail.com"">dd.36.8.053@gmail.com</a>
<a href=""mailto:dd3680.53@gmail.com"">dd3680.53@gmail.com</a>
<a href=""mailto:dd.36805.3@gmail.com"">dd.36805.3@gmail.com</a>
<a href=""mailto:dd3.6.8.0.53@gmail.com"">dd3.6.8.0.53@gmail.com</a>
<a href=""mailto:d.d36.8053@gmail.com"">d.d36.8053@gmail.com</a>
<a href=""mailto:d.d368.0.53@gmail.com"">d.d368.0.53@gmail.com</a>
<a href=""mailto:d.d.3.6.80.5.3@gmail.com"">d.d.3.6.80.5.3@gmail.com</a>
<a href=""mailto:dd3.6.8.0.5.3@gmail.com"">dd3.6.8.0.5.3@gmail.com</a>
<a href=""mailto:dd.3680.53@gmail.com"">dd.3680.53@gmail.com</a>
<a href=""mailto:d.d3.6.80.5.3@gmail.com"">d.d3.6.80.5.3@gmail.com</a>
<a href=""mailto:d.d3.680.5.3@gmail.com"">d.d3.680.5.3@gmail.com</a>
<a href=""mailto:dd368.0.53@gmail.com"">dd368.0.53@gmail.com</a>
<a href=""mailto:dd.368.05.3@gmail.com"">dd.368.05.3@gmail.com</a>
<a href=""mailto:d.d3680.5.3@gmail.com"">d.d3680.5.3@gmail.com</a>
<a href=""mailto:dd368.05.3@gmail.com"">dd368.05.3@gmail.com</a>
<a href=""mailto:d.d.36.80.53@gmail.com"">d.d.36.80.53@gmail.com</a>
<a href=""mailto:dd3.680.53@gmail.com"">dd3.680.53@gmail.com</a>
<a href=""mailto:dd.3.6.8.05.3@gmail.com"">dd.3.6.8.05.3@gmail.com</a>
<a href=""mailto:d.d3.6805.3@gmail.com"">d.d3.6805.3@gmail.com</a>
<a href=""mailto:d.d.36.8.053@gmail.com"">d.d.36.8.053@gmail.com</a>
<a href=""mailto:dd36.8.0.5.3@gmail.com"">dd36.8.0.5.3@gmail.com</a>
<a href=""mailto:dd.3.6.80.53@gmail.com"">dd.3.6.80.53@gmail.com</a>
<a href=""mailto:dd.36.805.3@gmail.com"">dd.36.805.3@gmail.com</a>
<a href=""mailto:dd.3.6805.3@gmail.com"">dd.3.6805.3@gmail.com</a>
<a href=""mailto:dd3680.5.3@gmail.com"">dd3680.5.3@gmail.com</a>
<a href=""mailto:d.d3.6.8.053@gmail.com"">d.d3.6.8.053@gmail.com</a>
<a href=""mailto:dd3.68053@gmail.com"">dd3.68053@gmail.com</a>
<a href=""mailto:d.d3.68.05.3@gmail.com"">d.d3.68.05.3@gmail.com</a>
<a href=""mailto:dd3.68.053@gmail.com"">dd3.68.053@gmail.com</a>
<a href=""mailto:dd.3.68.0.53@gmail.com"">dd.3.68.0.53@gmail.com</a>
<a href=""mailto:d.d.3.6805.3@gmail.com"">d.d.3.6805.3@gmail.com</a>
<a href=""mailto:dd3.6.805.3@gmail.com"">dd3.6.805.3@gmail.com</a>
<a href=""mailto:dd3.6.8.053@gmail.com"">dd3.6.8.053@gmail.com</a>
<a href=""mailto:d.d.36.8053@gmail.com"">d.d.36.8053@gmail.com</a>
<a href=""mailto:d.d36805.3@gmail.com"">d.d36805.3@gmail.com</a>
<a href=""mailto:dd3.6.8053@gmail.com"">dd3.6.8053@gmail.com</a>
<a href=""mailto:dd.3.6.8.0.5.3@gmail.com"">dd.3.6.8.0.5.3@gmail.com</a>
<a href=""mailto:d.d3.68.053@gmail.com"">d.d3.68.053@gmail.com</a>
<a href=""mailto:d.d36.8.053@gmail.com"">d.d36.8.053@gmail.com</a>
<a href=""mailto:dd.3680.5.3@gmail.com"">dd.3680.5.3@gmail.com</a>
<a href=""mailto:d.d.368.053@gmail.com"">d.d.368.053@gmail.com</a>
<a href=""mailto:d.d.368.0.53@gmail.com"">d.d.368.0.53@gmail.com</a>
<a href=""mailto:dd.368.0.5.3@gmail.com"">dd.368.0.5.3@gmail.com</a>
<a href=""mailto:d.d.368.05.3@gmail.com"">d.d.368.05.3@gmail.com</a>
<a href=""mailto:dd3.68.05.3@gmail.com"">dd3.68.05.3@gmail.com</a>
<a href=""mailto:dd36.8.05.3@gmail.com"">dd36.8.05.3@gmail.com</a>
<a href=""mailto:d.d3.68.0.53@gmail.com"">d.d3.68.0.53@gmail.com</a>
<a href=""mailto:d.d.3.680.5.3@gmail.com"">d.d.3.680.5.3@gmail.com</a>
<a href=""mailto:dd3.6805.3@gmail.com"">dd3.6805.3@gmail.com</a>
<a href=""mailto:d.d36.80.5.3@gmail.com"">d.d36.80.5.3@gmail.com</a>
<a href=""mailto:dd3.6.80.53@gmail.com"">dd3.6.80.53@gmail.com</a>
<a href=""mailto:drezeh222@gmail.com"">drezeh222@gmail.com</a>
<a href=""mailto:dr.eze.h222@gmail.com"">dr.eze.h222@gmail.com</a>
<a href=""mailto:dr.eze.h.2.2.2@gmail.com"">dr.eze.h.2.2.2@gmail.com</a>
<a href=""mailto:dr.e.zeh2.2.2@gmail.com"">dr.e.zeh2.2.2@gmail.com</a>
<a href=""mailto:d.re.ze.h222@gmail.com"">d.re.ze.h222@gmail.com</a>
<a href=""mailto:dre.z.e.h222@gmail.com"">dre.z.e.h222@gmail.com</a>
<a href=""mailto:d.r.e.zeh2.22@gmail.com"">d.r.e.zeh2.22@gmail.com</a>
<a href=""mailto:d.r.e.ze.h2.2.2@gmail.com"">d.r.e.ze.h2.2.2@gmail.com</a>
<a href=""mailto:dre.zeh2.22@gmail.com"">dre.zeh2.22@gmail.com</a>
<a href=""mailto:dr.e.zeh222@gmail.com"">dr.e.zeh222@gmail.com</a>
<a href=""mailto:d.r.e.z.e.h22.2@gmail.com"">d.r.e.z.e.h22.2@gmail.com</a>
<a href=""mailto:d.r.eze.h.2.2.2@gmail.com"">d.r.eze.h.2.2.2@gmail.com</a>
<a href=""mailto:dr.ez.eh.2.22@gmail.com"">dr.ez.eh.2.22@gmail.com</a>
<a href=""mailto:dr.ez.e.h2.22@gmail.com"">dr.ez.e.h2.22@gmail.com</a>
<a href=""mailto:d.r.e.z.eh.2.2.2@gmail.com"">d.r.e.z.eh.2.2.2@gmail.com</a>
<a href=""mailto:d.r.ez.e.h222@gmail.com"">d.r.ez.e.h222@gmail.com</a>
<a href=""mailto:d.r.e.zeh22.2@gmail.com"">d.r.e.zeh22.2@gmail.com</a>
<a href=""mailto:d.r.eze.h.2.22@gmail.com"">d.r.eze.h.2.22@gmail.com</a>
<a href=""mailto:d.r.eze.h2.2.2@gmail.com"">d.r.eze.h2.2.2@gmail.com</a>
<a href=""mailto:d.re.ze.h.2.2.2@gmail.com"">d.re.ze.h.2.2.2@gmail.com</a>
<a href=""mailto:dre.z.e.h.22.2@gmail.com"">dre.z.e.h.22.2@gmail.com</a>
<a href=""mailto:d.reze.h222@gmail.com"">d.reze.h222@gmail.com</a>
<a href=""mailto:dre.ze.h.2.2.2@gmail.com"">dre.ze.h.2.2.2@gmail.com</a>
<a href=""mailto:d.rezeh.222@gmail.com"">d.rezeh.222@gmail.com</a>
<a href=""mailto:dr.eze.h.22.2@gmail.com"">dr.eze.h.22.2@gmail.com</a>
<a href=""mailto:dr.e.z.e.h.222@gmail.com"">dr.e.z.e.h.222@gmail.com</a>
<a href=""mailto:drez.eh.2.22@gmail.com"">drez.eh.2.22@gmail.com</a>
<a href=""mailto:d.re.z.e.h.2.2.2@gmail.com"">d.re.z.e.h.2.2.2@gmail.com</a>
<a href=""mailto:dr.eze.h.2.22@gmail.com"">dr.eze.h.2.22@gmail.com</a>
<a href=""mailto:dr.e.z.eh222@gmail.com"">dr.e.z.eh222@gmail.com</a>
<a href=""mailto:d.r.ezeh22.2@gmail.com"">d.r.ezeh22.2@gmail.com</a>
<a href=""mailto:dr.ez.eh.22.2@gmail.com"">dr.ez.eh.22.2@gmail.com</a>
<a href=""mailto:drez.eh222@gmail.com"">drez.eh222@gmail.com</a>
<a href=""mailto:d.r.ezeh2.2.2@gmail.com"">d.r.ezeh2.2.2@gmail.com</a>
<a href=""mailto:dre.zeh.22.2@gmail.com"">dre.zeh.22.2@gmail.com</a>
<a href=""mailto:dr.e.z.eh2.22@gmail.com"">dr.e.z.eh2.22@gmail.com</a>
<a href=""mailto:d.r.eze.h.22.2@gmail.com"">d.r.eze.h.22.2@gmail.com</a>
<a href=""mailto:d.re.z.eh22.2@gmail.com"">d.re.z.eh22.2@gmail.com</a>
<a href=""mailto:d.re.ze.h2.2.2@gmail.com"">d.re.ze.h2.2.2@gmail.com</a>
<a href=""mailto:d.r.ez.eh.2.22@gmail.com"">d.r.ez.eh.2.22@gmail.com</a>
<a href=""mailto:d.r.ez.e.h2.22@gmail.com"">d.r.ez.e.h2.22@gmail.com</a>
<a href=""mailto:d.rezeh.2.22@gmail.com"">d.rezeh.2.22@gmail.com</a>
<a href=""mailto:d.re.z.eh222@gmail.com"">d.re.z.eh222@gmail.com</a>
<a href=""mailto:dr.ez.e.h22.2@gmail.com"">dr.ez.e.h22.2@gmail.com</a>
<a href=""mailto:dr.ezeh222@gmail.com"">dr.ezeh222@gmail.com</a>
<a href=""mailto:d.rez.e.h2.2.2@gmail.com"">d.rez.e.h2.2.2@gmail.com</a>
<a href=""mailto:drez.eh22.2@gmail.com"">drez.eh22.2@gmail.com</a>
<a href=""mailto:drezeh2.22@gmail.com"">drezeh2.22@gmail.com</a>
<a href=""mailto:dr.e.z.e.h22.2@gmail.com"">dr.e.z.e.h22.2@gmail.com</a>
<a href=""mailto:dreze.h2.2.2@gmail.com"">dreze.h2.2.2@gmail.com</a>
<a href=""mailto:d.r.ezeh.2.2.2@gmail.com"">d.r.ezeh.2.2.2@gmail.com</a>
<a href=""mailto:d.rez.e.h22.2@gmail.com"">d.rez.e.h22.2@gmail.com</a>
<a href=""mailto:dr.e.z.e.h.22.2@gmail.com"">dr.e.z.e.h.22.2@gmail.com</a>
<a href=""mailto:d.re.zeh22.2@gmail.com"">d.re.zeh22.2@gmail.com</a>
<a href=""mailto:dr.ez.eh222@gmail.com"">dr.ez.eh222@gmail.com</a>
<a href=""mailto:dre.zeh.2.22@gmail.com"">dre.zeh.2.22@gmail.com</a>
<a href=""mailto:d.re.zeh.2.2.2@gmail.com"">d.re.zeh.2.2.2@gmail.com</a>
<a href=""mailto:dr.e.zeh22.2@gmail.com"">dr.e.zeh22.2@gmail.com</a>
<a href=""mailto:d.re.zeh.2.22@gmail.com"">d.re.zeh.2.22@gmail.com</a>
<a href=""mailto:dr.e.z.eh2.2.2@gmail.com"">dr.e.z.eh2.2.2@gmail.com</a>
<a href=""mailto:drezeh.222@gmail.com"">drezeh.222@gmail.com</a>
<a href=""mailto:d.r.e.z.eh.2.22@gmail.com"">d.r.e.z.eh.2.22@gmail.com</a>
<a href=""mailto:dr.e.z.e.h.2.2.2@gmail.com"">dr.e.z.e.h.2.2.2@gmail.com</a>
<a href=""mailto:d.rez.e.h2.22@gmail.com"">d.rez.e.h2.22@gmail.com</a>
<a href=""mailto:dre.ze.h.222@gmail.com"">dre.ze.h.222@gmail.com</a>
<a href=""mailto:dr.e.ze.h.22.2@gmail.com"">dr.e.ze.h.22.2@gmail.com</a>
<a href=""mailto:drezeh.2.2.2@gmail.com"">drezeh.2.2.2@gmail.com</a>
<a href=""mailto:dre.zeh2.2.2@gmail.com"">dre.zeh2.2.2@gmail.com</a>
<a href=""mailto:dr.ezeh.2.2.2@gmail.com"">dr.ezeh.2.2.2@gmail.com</a>
<a href=""mailto:dr.ez.e.h.22.2@gmail.com"">dr.ez.e.h.22.2@gmail.com</a>
<a href=""mailto:d.reze.h.22.2@gmail.com"">d.reze.h.22.2@gmail.com</a>
<a href=""mailto:d.r.ezeh.222@gmail.com"">d.r.ezeh.222@gmail.com</a>
<a href=""mailto:drez.e.h2.22@gmail.com"">drez.e.h2.22@gmail.com</a>
<a href=""mailto:d.r.e.z.eh222@gmail.com"">d.r.e.z.eh222@gmail.com</a>
<a href=""mailto:dr.ez.e.h.2.2.2@gmail.com"">dr.ez.e.h.2.2.2@gmail.com</a>
<a href=""mailto:dr.ez.eh22.2@gmail.com"">dr.ez.eh22.2@gmail.com</a>
<a href=""mailto:d.rez.e.h.222@gmail.com"">d.rez.e.h.222@gmail.com</a>
<a href=""mailto:dr.ezeh22.2@gmail.com"">dr.ezeh22.2@gmail.com</a>
<a href=""mailto:d.rez.eh222@gmail.com"">d.rez.eh222@gmail.com</a>
<a href=""mailto:dr.ez.e.h222@gmail.com"">dr.ez.e.h222@gmail.com</a>
<a href=""mailto:d.r.ez.eh.222@gmail.com"">d.r.ez.eh.222@gmail.com</a>
<a href=""mailto:d.r.e.ze.h.2.2.2@gmail.com"">d.r.e.ze.h.2.2.2@gmail.com</a>
<a href=""mailto:dreze.h22.2@gmail.com"">dreze.h22.2@gmail.com</a>
<a href=""mailto:drez.e.h.2.22@gmail.com"">drez.e.h.2.22@gmail.com</a>
<a href=""mailto:d.re.zeh222@gmail.com"">d.re.zeh222@gmail.com</a>
<a href=""mailto:d.r.ezeh2.22@gmail.com"">d.r.ezeh2.22@gmail.com</a>
<a href=""mailto:dreze.h.22.2@gmail.com"">dreze.h.22.2@gmail.com</a>
<a href=""mailto:d.rez.eh.2.2.2@gmail.com"">d.rez.eh.2.2.2@gmail.com</a>
<a href=""mailto:d.re.ze.h.2.22@gmail.com"">d.re.ze.h.2.22@gmail.com</a>
<a href=""mailto:dre.z.eh.222@gmail.com"">dre.z.eh.222@gmail.com</a>
<a href=""mailto:d.re.ze.h.222@gmail.com"">d.re.ze.h.222@gmail.com</a>
<a href=""mailto:dre.z.e.h.2.22@gmail.com"">dre.z.e.h.2.22@gmail.com</a>
<a href=""mailto:dr.e.ze.h2.22@gmail.com"">dr.e.ze.h2.22@gmail.com</a>
<a href=""mailto:dre.zeh222@gmail.com"">dre.zeh222@gmail.com</a>
<a href=""mailto:dr.e.z.eh.2.2.2@gmail.com"">dr.e.z.eh.2.2.2@gmail.com</a>
<a href=""mailto:dr.e.z.eh22.2@gmail.com"">dr.e.z.eh22.2@gmail.com</a>
<a href=""mailto:d.reze.h.222@gmail.com"">d.reze.h.222@gmail.com</a>
<a href=""mailto:drez.eh.22.2@gmail.com"">drez.eh.22.2@gmail.com</a>
<a href=""mailto:dre.ze.h2.2.2@gmail.com"">dre.ze.h2.2.2@gmail.com</a>
<a href=""mailto:dreze.h.222@gmail.com"">dreze.h.222@gmail.com</a>
<a href=""mailto:dreze.h222@gmail.com"">dreze.h222@gmail.com</a>
<a href=""mailto:d.re.z.e.h2.22@gmail.com"">d.re.z.e.h2.22@gmail.com</a>
<a href=""mailto:d.r.e.zeh.2.2.2@gmail.com"">d.r.e.zeh.2.2.2@gmail.com</a>
<a href=""mailto:d.rez.e.h.22.2@gmail.com"">d.rez.e.h.22.2@gmail.com</a>
<a href=""mailto:d.r.ez.e.h22.2@gmail.com"">d.r.ez.e.h22.2@gmail.com</a>
<a href=""mailto:d.r.e.ze.h.222@gmail.com"">d.r.e.ze.h.222@gmail.com</a>
<a href=""mailto:d.re.z.eh.2.2.2@gmail.com"">d.re.z.eh.2.2.2@gmail.com</a>
<a href=""mailto:d.rezeh2.22@gmail.com"">d.rezeh2.22@gmail.com</a>
<a href=""mailto:dre.zeh22.2@gmail.com"">dre.zeh22.2@gmail.com</a>
<a href=""mailto:d.reze.h2.22@gmail.com"">d.reze.h2.22@gmail.com</a>
<a href=""mailto:dreze.h.2.22@gmail.com"">dreze.h.2.22@gmail.com</a>
<a href=""mailto:d.r.e.ze.h.22.2@gmail.com"">d.r.e.ze.h.22.2@gmail.com</a>
<a href=""mailto:d.re.z.eh.2.22@gmail.com"">d.re.z.eh.2.22@gmail.com</a>
<a href=""mailto:d.r.ez.eh.22.2@gmail.com"">d.r.ez.eh.22.2@gmail.com</a>
<a href=""mailto:d.r.ez.e.h.2.2.2@gmail.com"">d.r.ez.e.h.2.2.2@gmail.com</a>
<a href=""mailto:dr.e.zeh.2.2.2@gmail.com"">dr.e.zeh.2.2.2@gmail.com</a>
<a href=""mailto:dre.z.e.h.222@gmail.com"">dre.z.e.h.222@gmail.com</a>
<a href=""mailto:dr.e.ze.h.222@gmail.com"">dr.e.ze.h.222@gmail.com</a>
<a href=""mailto:dr.ezeh.2.22@gmail.com"">dr.ezeh.2.22@gmail.com</a>
<a href=""mailto:d.r.eze.h222@gmail.com"">d.r.eze.h222@gmail.com</a>
<a href=""mailto:d.r.e.z.e.h2.2.2@gmail.com"">d.r.e.z.e.h2.2.2@gmail.com</a>
<a href=""mailto:d.rezeh222@gmail.com"">d.rezeh222@gmail.com</a>
<a href=""mailto:dr.ez.e.h2.2.2@gmail.com"">dr.ez.e.h2.2.2@gmail.com</a>
<a href=""mailto:dr.e.ze.h.2.2.2@gmail.com"">dr.e.ze.h.2.2.2@gmail.com</a>
<a href=""mailto:d.r.ez.e.h.222@gmail.com"">d.r.ez.e.h.222@gmail.com</a>
<a href=""mailto:dre.z.e.h.2.2.2@gmail.com"">dre.z.e.h.2.2.2@gmail.com</a>
<a href=""mailto:dr.e.ze.h22.2@gmail.com"">dr.e.ze.h22.2@gmail.com</a>
<a href=""mailto:drez.e.h.222@gmail.com"">drez.e.h.222@gmail.com</a>
<a href=""mailto:d.r.e.zeh222@gmail.com"">d.r.e.zeh222@gmail.com</a>
<a href=""mailto:dre.z.e.h22.2@gmail.com"">dre.z.e.h22.2@gmail.com</a>
<a href=""mailto:dr.eze.h2.2.2@gmail.com"">dr.eze.h2.2.2@gmail.com</a>
<a href=""mailto:d.re.z.eh.222@gmail.com"">d.re.z.eh.222@gmail.com</a>
<a href=""mailto:d.r.e.z.e.h.2.22@gmail.com"">d.r.e.z.e.h.2.22@gmail.com</a>
<a href=""mailto:dr.eze.h22.2@gmail.com"">dr.eze.h22.2@gmail.com</a>
<a href=""mailto:d.r.e.zeh.2.22@gmail.com"">d.r.e.zeh.2.22@gmail.com</a>
<a href=""mailto:drezeh.22.2@gmail.com"">drezeh.22.2@gmail.com</a>
<a href=""mailto:d.re.z.e.h.2.22@gmail.com"">d.re.z.e.h.2.22@gmail.com</a>
<a href=""mailto:dre.z.eh2.2.2@gmail.com"">dre.z.eh2.2.2@gmail.com</a>
<a href=""mailto:dr.e.z.eh.22.2@gmail.com"">dr.e.z.eh.22.2@gmail.com</a>
<a href=""mailto:d.rez.eh.222@gmail.com"">d.rez.eh.222@gmail.com</a>
<a href=""mailto:dr.e.zeh2.22@gmail.com"">dr.e.zeh2.22@gmail.com</a>
<a href=""mailto:d.re.zeh2.2.2@gmail.com"">d.re.zeh2.2.2@gmail.com</a>
<a href=""mailto:dr.e.zeh.2.22@gmail.com"">dr.e.zeh.2.22@gmail.com</a>
<a href=""mailto:d.r.e.zeh2.2.2@gmail.com"">d.r.e.zeh2.2.2@gmail.com</a>
<a href=""mailto:d.rez.e.h.2.2.2@gmail.com"">d.rez.e.h.2.2.2@gmail.com</a>
<a href=""mailto:dr.e.z.eh.222@gmail.com"">dr.e.z.eh.222@gmail.com</a>
<a href=""mailto:dre.z.eh.22.2@gmail.com"">dre.z.eh.22.2@gmail.com</a>
<a href=""mailto:d.r.e.zeh.22.2@gmail.com"">d.r.e.zeh.22.2@gmail.com</a>
<a href=""mailto:d.re.z.eh2.22@gmail.com"">d.re.z.eh2.22@gmail.com</a>
<a href=""mailto:dr.ez.eh.2.2.2@gmail.com"">dr.ez.eh.2.2.2@gmail.com</a>
<a href=""mailto:dre.z.eh222@gmail.com"">dre.z.eh222@gmail.com</a>
<a href=""mailto:d.r.e.ze.h.2.22@gmail.com"">d.r.e.ze.h.2.22@gmail.com</a>
<a href=""mailto:d.r.e.ze.h2.22@gmail.com"">d.r.e.ze.h2.22@gmail.com</a>
<a href=""mailto:dreze.h2.22@gmail.com"">dreze.h2.22@gmail.com</a>
<a href=""mailto:dr.ez.e.h.2.22@gmail.com"">dr.ez.e.h.2.22@gmail.com</a>
<a href=""mailto:d.r.e.zeh.222@gmail.com"">d.r.e.zeh.222@gmail.com</a>
<a href=""mailto:dreze.h.2.2.2@gmail.com"">dreze.h.2.2.2@gmail.com</a>
<a href=""mailto:dr.ezeh2.22@gmail.com"">dr.ezeh2.22@gmail.com</a>
<a href=""mailto:dr.e.z.e.h.2.22@gmail.com"">dr.e.z.e.h.2.22@gmail.com</a>
<a href=""mailto:dr.e.z.e.h222@gmail.com"">dr.e.z.e.h222@gmail.com</a>
<a href=""mailto:drez.e.h.2.2.2@gmail.com"">drez.e.h.2.2.2@gmail.com</a>
<a href=""mailto:d.r.ez.eh2.22@gmail.com"">d.r.ez.eh2.22@gmail.com</a>
<a href=""mailto:dr.e.z.e.h2.22@gmail.com"">dr.e.z.e.h2.22@gmail.com</a>
<a href=""mailto:d.r.eze.h.222@gmail.com"">d.r.eze.h.222@gmail.com</a>
<a href=""mailto:d.r.e.ze.h22.2@gmail.com"">d.r.e.ze.h22.2@gmail.com</a>
<a href=""mailto:dr.e.ze.h.2.22@gmail.com"">dr.e.ze.h.2.22@gmail.com</a>
<a href=""mailto:drezeh2.2.2@gmail.com"">drezeh2.2.2@gmail.com</a>
<a href=""mailto:d.re.z.e.h22.2@gmail.com"">d.re.z.e.h22.2@gmail.com</a>
<a href=""mailto:dr.ezeh.222@gmail.com"">dr.ezeh.222@gmail.com</a>
<a href=""mailto:dre.z.eh2.22@gmail.com"">dre.z.eh2.22@gmail.com</a>
<a href=""mailto:dr.e.ze.h222@gmail.com"">dr.e.ze.h222@gmail.com</a>
<a href=""mailto:dr.ezeh.22.2@gmail.com"">dr.ezeh.22.2@gmail.com</a>
<a href=""mailto:dr.ez.e.h.222@gmail.com"">dr.ez.e.h.222@gmail.com</a>
<a href=""mailto:d.rezeh.2.2.2@gmail.com"">d.rezeh.2.2.2@gmail.com</a>
<a href=""mailto:d.r.ez.eh2.2.2@gmail.com"">d.r.ez.eh2.2.2@gmail.com</a>
<a href=""mailto:d.rez.e.h.2.22@gmail.com"">d.rez.e.h.2.22@gmail.com</a>
<a href=""mailto:dr.e.z.eh.2.22@gmail.com"">dr.e.z.eh.2.22@gmail.com</a>
<a href=""mailto:d.r.e.z.eh.22.2@gmail.com"">d.r.e.z.eh.22.2@gmail.com</a>
<a href=""mailto:d.r.e.z.e.h.22.2@gmail.com"">d.r.e.z.e.h.22.2@gmail.com</a>
<a href=""mailto:d.rez.eh2.22@gmail.com"">d.rez.eh2.22@gmail.com</a>
<a href=""mailto:dre.z.e.h2.22@gmail.com"">dre.z.e.h2.22@gmail.com</a>
<a href=""mailto:drez.e.h222@gmail.com"">drez.e.h222@gmail.com</a>
<a href=""mailto:d.reze.h22.2@gmail.com"">d.reze.h22.2@gmail.com</a>
<a href=""mailto:d.r.e.z.eh.222@gmail.com"">d.r.e.z.eh.222@gmail.com</a>
<a href=""mailto:d.re.zeh.22.2@gmail.com"">d.re.zeh.22.2@gmail.com</a>
<a href=""mailto:dre.z.eh.2.2.2@gmail.com"">dre.z.eh.2.2.2@gmail.com</a>
<a href=""mailto:dr.e.z.e.h2.2.2@gmail.com"">dr.e.z.e.h2.2.2@gmail.com</a>
<a href=""mailto:dr.ez.eh.222@gmail.com"">dr.ez.eh.222@gmail.com</a>
<a href=""mailto:d.re.zeh2.22@gmail.com"">d.re.zeh2.22@gmail.com</a>
<a href=""mailto:drez.eh2.22@gmail.com"">drez.eh2.22@gmail.com</a>
<a href=""mailto:d.r.e.z.eh2.22@gmail.com"">d.r.e.z.eh2.22@gmail.com</a>
<a href=""mailto:dr.e.zeh.222@gmail.com"">dr.e.zeh.222@gmail.com</a>
<a href=""mailto:dre.ze.h.22.2@gmail.com"">dre.ze.h.22.2@gmail.com</a>
<a href=""mailto:d.r.ezeh.2.22@gmail.com"">d.r.ezeh.2.22@gmail.com</a>
<a href=""mailto:dr.eze.h.222@gmail.com"">dr.eze.h.222@gmail.com</a>
<a href=""mailto:drezeh.2.22@gmail.com"">drezeh.2.22@gmail.com</a>
<a href=""mailto:d.re.z.eh.22.2@gmail.com"">d.re.z.eh.22.2@gmail.com</a>
<a href=""mailto:d.rez.eh22.2@gmail.com"">d.rez.eh22.2@gmail.com</a>
<a href=""mailto:d.r.e.z.e.h.2.2.2@gmail.com"">d.r.e.z.e.h.2.2.2@gmail.com</a>
<a href=""mailto:drez.e.h2.2.2@gmail.com"">drez.e.h2.2.2@gmail.com</a>
<a href=""mailto:d.rez.eh2.2.2@gmail.com"">d.rez.eh2.2.2@gmail.com</a>
<a href=""mailto:bashirbala200@gmail.com"">bashirbala200@gmail.com</a>
<a href=""mailto:ba.s.h.i.r.ba.la.2.00@gmail.com"">ba.s.h.i.r.ba.la.2.00@gmail.com</a>
<a href=""mailto:b.as.h.irbala.2.0.0@gmail.com"">b.as.h.irbala.2.0.0@gmail.com</a>
<a href=""mailto:ba.sh.ir.ba.l.a2.0.0@gmail.com"">ba.sh.ir.ba.l.a2.0.0@gmail.com</a>
<a href=""mailto:ba.shi.r.b.a.la20.0@gmail.com"">ba.shi.r.b.a.la20.0@gmail.com</a>
<a href=""mailto:bas.hi.rba.la.20.0@gmail.com"">bas.hi.rba.la.20.0@gmail.com</a>
<a href=""mailto:ba.shi.rbal.a.2.0.0@gmail.com"">ba.shi.rbal.a.2.0.0@gmail.com</a>
<a href=""mailto:b.a.shi.rba.l.a.20.0@gmail.com"">b.a.shi.rba.l.a.20.0@gmail.com</a>
<a href=""mailto:bas.hi.r.b.a.la200@gmail.com"">bas.hi.r.b.a.la200@gmail.com</a>
<a href=""mailto:b.a.s.h.i.r.ba.l.a200@gmail.com"">b.a.s.h.i.r.ba.l.a200@gmail.com</a>
<a href=""mailto:bashi.r.b.a.l.a.20.0@gmail.com"">bashi.r.b.a.l.a.20.0@gmail.com</a>
<a href=""mailto:ba.sh.i.rb.ala2.0.0@gmail.com"">ba.sh.i.rb.ala2.0.0@gmail.com</a>
<a href=""mailto:b.a.s.hirba.l.a.20.0@gmail.com"">b.a.s.hirba.l.a.20.0@gmail.com</a>
<a href=""mailto:ba.s.hirb.a.l.a20.0@gmail.com"">ba.s.hirb.a.l.a20.0@gmail.com</a>
<a href=""mailto:b.a.s.h.i.r.b.a.la.200@gmail.com"">b.a.s.h.i.r.b.a.la.200@gmail.com</a>
<a href=""mailto:bas.h.i.r.b.a.l.a200@gmail.com"">bas.h.i.r.b.a.l.a200@gmail.com</a>
<a href=""mailto:bas.h.i.rba.l.a200@gmail.com"">bas.h.i.rba.l.a200@gmail.com</a>
<a href=""mailto:bashi.r.ba.la.200@gmail.com"">bashi.r.ba.la.200@gmail.com</a>
<a href=""mailto:b.a.shir.b.ala2.0.0@gmail.com"">b.a.shir.b.ala2.0.0@gmail.com</a>
<a href=""mailto:b.ash.ir.b.al.a.2.00@gmail.com"">b.ash.ir.b.al.a.2.00@gmail.com</a>
<a href=""mailto:ba.s.h.i.rbal.a.20.0@gmail.com"">ba.s.h.i.rbal.a.20.0@gmail.com</a>
<a href=""mailto:b.as.hirba.l.a.200@gmail.com"">b.as.hirba.l.a.200@gmail.com</a>
<a href=""mailto:ba.shi.r.b.al.a2.0.0@gmail.com"">ba.shi.r.b.al.a2.0.0@gmail.com</a>
<a href=""mailto:bas.h.irb.a.la20.0@gmail.com"">bas.h.irb.a.la20.0@gmail.com</a>
<a href=""mailto:b.a.shi.rbala.2.00@gmail.com"">b.a.shi.rbala.2.00@gmail.com</a>
<a href=""mailto:ba.sh.irba.la.20.0@gmail.com"">ba.sh.irba.la.20.0@gmail.com</a>
<a href=""mailto:ba.shir.b.al.a.200@gmail.com"">ba.shir.b.al.a.200@gmail.com</a>
<a href=""mailto:bas.h.i.rba.la.200@gmail.com"">bas.h.i.rba.la.200@gmail.com</a>
<a href=""mailto:ba.s.hir.b.al.a.200@gmail.com"">ba.s.hir.b.al.a.200@gmail.com</a>
<a href=""mailto:b.a.sh.irba.l.a2.0.0@gmail.com"">b.a.sh.irba.l.a2.0.0@gmail.com</a>
<a href=""mailto:bas.hi.r.b.al.a.200@gmail.com"">bas.hi.r.b.al.a.200@gmail.com</a>
<a href=""mailto:ba.shir.ba.l.a200@gmail.com"">ba.shir.ba.l.a200@gmail.com</a>
<a href=""mailto:b.ash.i.rba.l.a.2.00@gmail.com"">b.ash.i.rba.l.a.2.00@gmail.com</a>
<a href=""mailto:ba.s.h.i.r.b.a.l.a2.0.0@gmail.com"">ba.s.h.i.r.b.a.l.a2.0.0@gmail.com</a>
<a href=""mailto:b.a.sh.irb.a.l.a.2.0.0@gmail.com"">b.a.sh.irb.a.l.a.2.0.0@gmail.com</a>
<a href=""mailto:ba.shir.b.a.la20.0@gmail.com"">ba.shir.b.a.la20.0@gmail.com</a>
<a href=""mailto:b.a.s.h.i.r.b.a.la.2.00@gmail.com"">b.a.s.h.i.r.b.a.la.2.00@gmail.com</a>
<a href=""mailto:b.a.shi.rba.la20.0@gmail.com"">b.a.shi.rba.la20.0@gmail.com</a>
<a href=""mailto:b.a.shi.rb.a.la200@gmail.com"">b.a.shi.rb.a.la200@gmail.com</a>
<a href=""mailto:ba.sh.i.rb.a.l.a2.00@gmail.com"">ba.sh.i.rb.a.l.a2.00@gmail.com</a>
<a href=""mailto:b.a.s.hi.rba.l.a200@gmail.com"">b.a.s.hi.rba.l.a200@gmail.com</a>
<a href=""mailto:b.as.hi.r.bal.a.20.0@gmail.com"">b.as.hi.r.bal.a.20.0@gmail.com</a>
<a href=""mailto:ba.s.h.i.rba.l.a.2.00@gmail.com"">ba.s.h.i.rba.l.a.2.00@gmail.com</a>
<a href=""mailto:b.as.hir.bal.a.200@gmail.com"">b.as.hir.bal.a.200@gmail.com</a>
<a href=""mailto:bashir.b.ala.20.0@gmail.com"">bashir.b.ala.20.0@gmail.com</a>
<a href=""mailto:b.ash.irb.a.la2.00@gmail.com"">b.ash.irb.a.la2.00@gmail.com</a>
<a href=""mailto:b.a.shi.rbala20.0@gmail.com"">b.a.shi.rbala20.0@gmail.com</a>
<a href=""mailto:b.ash.ir.bal.a.2.00@gmail.com"">b.ash.ir.bal.a.2.00@gmail.com</a>
<a href=""mailto:b.a.s.h.i.r.b.ala2.00@gmail.com"">b.a.s.h.i.r.b.ala2.00@gmail.com</a>
<a href=""mailto:ba.sh.i.r.b.al.a2.00@gmail.com"">ba.sh.i.r.b.al.a2.00@gmail.com</a>
<a href=""mailto:ba.s.h.i.r.bala2.00@gmail.com"">ba.s.h.i.r.bala2.00@gmail.com</a>
<a href=""mailto:b.ashir.b.ala200@gmail.com"">b.ashir.b.ala200@gmail.com</a>
<a href=""mailto:b.a.sh.i.r.bal.a20.0@gmail.com"">b.a.sh.i.r.bal.a20.0@gmail.com</a>
<a href=""mailto:b.a.s.h.i.r.b.a.la2.00@gmail.com"">b.a.s.h.i.r.b.a.la2.00@gmail.com</a>
<a href=""mailto:b.as.hi.r.b.a.l.a2.00@gmail.com"">b.as.hi.r.b.a.l.a2.00@gmail.com</a>
<a href=""mailto:b.a.sh.irb.al.a200@gmail.com"">b.a.sh.irb.al.a200@gmail.com</a>
<a href=""mailto:bas.hi.rbal.a2.0.0@gmail.com"">bas.hi.rbal.a2.0.0@gmail.com</a>
<a href=""mailto:b.a.s.hi.r.b.al.a.200@gmail.com"">b.a.s.hi.r.b.al.a.200@gmail.com</a>
<a href=""mailto:ba.sh.i.rba.la.20.0@gmail.com"">ba.sh.i.rba.la.20.0@gmail.com</a>
<a href=""mailto:b.a.shi.rb.a.la2.0.0@gmail.com"">b.a.shi.rb.a.la2.0.0@gmail.com</a>
<a href=""mailto:b.a.sh.i.rb.a.la.20.0@gmail.com"">b.a.sh.i.rb.a.la.20.0@gmail.com</a>
<a href=""mailto:ba.sh.ir.b.al.a200@gmail.com"">ba.sh.ir.b.al.a200@gmail.com</a>
<a href=""mailto:b.a.s.h.ir.b.a.la.2.0.0@gmail.com"">b.a.s.h.ir.b.a.la.2.0.0@gmail.com</a>
<a href=""mailto:ba.s.hirb.ala.2.00@gmail.com"">ba.s.hirb.ala.2.00@gmail.com</a>
<a href=""mailto:b.a.shir.ba.la.2.0.0@gmail.com"">b.a.shir.ba.la.2.0.0@gmail.com</a>
<a href=""mailto:b.a.shi.r.b.al.a20.0@gmail.com"">b.a.shi.r.b.al.a20.0@gmail.com</a>
<a href=""mailto:bas.hirbala.20.0@gmail.com"">bas.hirbala.20.0@gmail.com</a>
<a href=""mailto:b.ash.i.r.b.al.a20.0@gmail.com"">b.ash.i.r.b.al.a20.0@gmail.com</a>
<a href=""mailto:b.a.shir.b.ala20.0@gmail.com"">b.a.shir.b.ala20.0@gmail.com</a>
<a href=""mailto:b.a.s.hir.ba.l.a.20.0@gmail.com"">b.a.s.hir.ba.l.a.20.0@gmail.com</a>
<a href=""mailto:b.a.sh.i.r.bal.a.200@gmail.com"">b.a.sh.i.r.bal.a.200@gmail.com</a>
<a href=""mailto:b.a.s.hi.r.ba.l.a.20.0@gmail.com"">b.a.s.hi.r.ba.l.a.20.0@gmail.com</a>
<a href=""mailto:b.a.s.hi.r.bala.2.00@gmail.com"">b.a.s.hi.r.bala.2.00@gmail.com</a>
<a href=""mailto:b.a.s.h.irba.l.a.200@gmail.com"">b.a.s.h.irba.l.a.200@gmail.com</a>
<a href=""mailto:b.a.s.h.i.rb.a.l.a.200@gmail.com"">b.a.s.h.i.rb.a.l.a.200@gmail.com</a>
<a href=""mailto:bas.hi.r.ba.la.2.00@gmail.com"">bas.hi.r.ba.la.2.00@gmail.com</a>
<a href=""mailto:ba.s.hi.rb.a.l.a.20.0@gmail.com"">ba.s.hi.rb.a.l.a.20.0@gmail.com</a>
<a href=""mailto:b.as.hi.rbala2.00@gmail.com"">b.as.hi.rbala2.00@gmail.com</a>
<a href=""mailto:bash.i.rb.al.a2.00@gmail.com"">bash.i.rb.al.a2.00@gmail.com</a>
<a href=""mailto:ba.s.h.ir.b.ala2.00@gmail.com"">ba.s.h.ir.b.ala2.00@gmail.com</a>
<a href=""mailto:ba.s.hi.rb.ala.2.00@gmail.com"">ba.s.hi.rb.ala.2.00@gmail.com</a>
<a href=""mailto:ba.sh.irbal.a200@gmail.com"">ba.sh.irbal.a200@gmail.com</a>
<a href=""mailto:ba.s.hi.rb.a.la2.0.0@gmail.com"">ba.s.hi.rb.a.la2.0.0@gmail.com</a>
<a href=""mailto:ba.s.hirb.a.l.a2.0.0@gmail.com"">ba.s.hirb.a.l.a2.0.0@gmail.com</a>
<a href=""mailto:bas.hir.b.a.la200@gmail.com"">bas.hir.b.a.la200@gmail.com</a>
<a href=""mailto:ba.s.h.i.r.b.a.la.20.0@gmail.com"">ba.s.h.i.r.b.a.la.20.0@gmail.com</a>
<a href=""mailto:b.as.h.i.rb.al.a.20.0@gmail.com"">b.as.h.i.rb.al.a.20.0@gmail.com</a>
<a href=""mailto:bas.h.ir.b.a.l.a200@gmail.com"">bas.h.ir.b.a.l.a200@gmail.com</a>
<a href=""mailto:b.ashi.rb.ala.200@gmail.com"">b.ashi.rb.ala.200@gmail.com</a>
<a href=""mailto:ba.s.h.i.rba.la2.0.0@gmail.com"">ba.s.h.i.rba.la2.0.0@gmail.com</a>
<a href=""mailto:b.a.sh.i.rb.a.la2.00@gmail.com"">b.a.sh.i.rb.a.la2.00@gmail.com</a>
<a href=""mailto:ba.s.h.i.rba.l.a200@gmail.com"">ba.s.h.i.rba.l.a200@gmail.com</a>
<a href=""mailto:ba.shi.rb.a.l.a200@gmail.com"">ba.shi.rb.a.l.a200@gmail.com</a>
<a href=""mailto:b.a.sh.ir.bala2.00@gmail.com"">b.a.sh.ir.bala2.00@gmail.com</a>
<a href=""mailto:ba.s.hirbal.a.2.00@gmail.com"">ba.s.hirbal.a.2.00@gmail.com</a>
<a href=""mailto:ba.sh.irb.a.l.a200@gmail.com"">ba.sh.irb.a.l.a200@gmail.com</a>
<a href=""mailto:bash.ir.b.ala.2.0.0@gmail.com"">bash.ir.b.ala.2.0.0@gmail.com</a>
<a href=""mailto:b.as.h.irb.al.a.20.0@gmail.com"">b.as.h.irb.al.a.20.0@gmail.com</a>
<a href=""mailto:ba.sh.irbal.a2.0.0@gmail.com"">ba.sh.irbal.a2.0.0@gmail.com</a>
<a href=""mailto:ba.s.h.ir.ba.la.20.0@gmail.com"">ba.s.h.ir.ba.la.20.0@gmail.com</a>
<a href=""mailto:b.a.s.hirbala20.0@gmail.com"">b.a.s.hirbala20.0@gmail.com</a>
<a href=""mailto:ba.s.hi.r.b.a.l.a.2.00@gmail.com"">ba.s.hi.r.b.a.l.a.2.00@gmail.com</a>
<a href=""mailto:b.as.h.i.r.ba.la.200@gmail.com"">b.as.h.i.r.ba.la.200@gmail.com</a>
<a href=""mailto:ba.s.h.i.r.b.al.a200@gmail.com"">ba.s.h.i.r.b.al.a200@gmail.com</a>
<a href=""mailto:b.a.sh.i.r.bala200@gmail.com"">b.a.sh.i.r.bala200@gmail.com</a>
<a href=""mailto:ba.shi.rb.a.l.a2.00@gmail.com"">ba.shi.rb.a.l.a2.00@gmail.com</a>
<a href=""mailto:b.as.hirbal.a.20.0@gmail.com"">b.as.hirbal.a.20.0@gmail.com</a>
<a href=""mailto:bash.i.r.b.a.l.a.2.0.0@gmail.com"">bash.i.r.b.a.l.a.2.0.0@gmail.com</a>
<a href=""mailto:b.a.shir.ba.la.20.0@gmail.com"">b.a.shir.ba.la.20.0@gmail.com</a>
<a href=""mailto:bash.irb.a.la.2.0.0@gmail.com"">bash.irb.a.la.2.0.0@gmail.com</a>
<a href=""mailto:ba.s.hi.r.bal.a.20.0@gmail.com"">ba.s.hi.r.bal.a.20.0@gmail.com</a>
<a href=""mailto:b.ash.irb.a.l.a200@gmail.com"">b.ash.irb.a.l.a200@gmail.com</a>
<a href=""mailto:b.a.shir.b.a.la200@gmail.com"">b.a.shir.b.a.la200@gmail.com</a>
<a href=""mailto:ba.shi.rb.a.l.a.2.0.0@gmail.com"">ba.shi.rb.a.l.a.2.0.0@gmail.com</a>
<a href=""mailto:bashi.rba.l.a.20.0@gmail.com"">bashi.rba.l.a.20.0@gmail.com</a>
<a href=""mailto:ba.sh.irba.la.2.0.0@gmail.com"">ba.sh.irba.la.2.0.0@gmail.com</a>
<a href=""mailto:bas.h.i.r.bala2.00@gmail.com"">bas.h.i.r.bala2.00@gmail.com</a>
<a href=""mailto:b.a.sh.i.rb.ala200@gmail.com"">b.a.sh.i.rb.ala200@gmail.com</a>
<a href=""mailto:b.a.sh.i.r.bala.200@gmail.com"">b.a.sh.i.r.bala.200@gmail.com</a>
<a href=""mailto:b.as.h.ir.b.a.la2.00@gmail.com"">b.as.h.ir.b.a.la2.00@gmail.com</a>
<a href=""mailto:ba.s.hir.bal.a200@gmail.com"">ba.s.hir.bal.a200@gmail.com</a>
<a href=""mailto:bash.i.r.b.a.la.200@gmail.com"">bash.i.r.b.a.la.200@gmail.com</a>
<a href=""mailto:b.a.s.hir.b.al.a2.0.0@gmail.com"">b.a.s.hir.b.al.a2.0.0@gmail.com</a>
<a href=""mailto:ba.shirb.a.la.2.0.0@gmail.com"">ba.shirb.a.la.2.0.0@gmail.com</a>
<a href=""mailto:b.a.shi.r.bala.2.00@gmail.com"">b.a.shi.r.bala.2.00@gmail.com</a>
<a href=""mailto:b.a.shirb.a.la.20.0@gmail.com"">b.a.shirb.a.la.20.0@gmail.com</a>
<a href=""mailto:bashi.r.b.al.a.2.00@gmail.com"">bashi.r.b.al.a.2.00@gmail.com</a>
<a href=""mailto:bas.h.irb.a.l.a2.00@gmail.com"">bas.h.irb.a.l.a2.00@gmail.com</a>
<a href=""mailto:b.ashirba.la.20.0@gmail.com"">b.ashirba.la.20.0@gmail.com</a>
<a href=""mailto:b.a.sh.irb.ala2.00@gmail.com"">b.a.sh.irb.ala2.00@gmail.com</a>
<a href=""mailto:ba.sh.ir.bal.a.2.0.0@gmail.com"">ba.sh.ir.bal.a.2.0.0@gmail.com</a>
<a href=""mailto:bas.hi.r.b.a.la2.0.0@gmail.com"">bas.hi.r.b.a.la2.0.0@gmail.com</a>
<a href=""mailto:ba.sh.irbala.2.00@gmail.com"">ba.sh.irbala.2.00@gmail.com</a>
<a href=""mailto:ba.s.h.ir.bal.a200@gmail.com"">ba.s.h.ir.bal.a200@gmail.com</a>
<a href=""mailto:bas.h.irb.ala.200@gmail.com"">bas.h.irb.ala.200@gmail.com</a>
<a href=""mailto:b.a.s.hirbala2.0.0@gmail.com"">b.a.s.hirbala2.0.0@gmail.com</a>
<a href=""mailto:ba.sh.ir.ba.la2.00@gmail.com"">ba.sh.ir.ba.la2.00@gmail.com</a>
<a href=""mailto:bashi.rba.la2.0.0@gmail.com"">bashi.rba.la2.0.0@gmail.com</a>
<a href=""mailto:b.a.shi.r.ba.l.a200@gmail.com"">b.a.shi.r.ba.l.a200@gmail.com</a>
<a href=""mailto:b.as.hi.rba.la200@gmail.com"">b.as.hi.rba.la200@gmail.com</a>
<a href=""mailto:ba.shi.rbala200@gmail.com"">ba.shi.rbala200@gmail.com</a>
<a href=""mailto:b.as.hi.r.ba.l.a2.00@gmail.com"">b.as.hi.r.ba.l.a2.00@gmail.com</a>
<a href=""mailto:b.a.shirbal.a200@gmail.com"">b.a.shirbal.a200@gmail.com</a>
<a href=""mailto:b.ashir.bala200@gmail.com"">b.ashir.bala200@gmail.com</a>
<a href=""mailto:b.a.shi.r.b.a.la20.0@gmail.com"">b.a.shi.r.b.a.la20.0@gmail.com</a>
<a href=""mailto:b.a.sh.i.rb.a.l.a.20.0@gmail.com"">b.a.sh.i.rb.a.l.a.20.0@gmail.com</a>
<a href=""mailto:ba.sh.i.rb.al.a.20.0@gmail.com"">ba.sh.i.rb.al.a.20.0@gmail.com</a>
<a href=""mailto:b.ashi.rbal.a20.0@gmail.com"">b.ashi.rbal.a20.0@gmail.com</a>
<a href=""mailto:b.a.sh.ir.ba.la.20.0@gmail.com"">b.a.sh.ir.ba.la.20.0@gmail.com</a>
<a href=""mailto:ba.sh.ir.b.a.la2.00@gmail.com"">ba.sh.ir.b.a.la2.00@gmail.com</a>
<a href=""mailto:ba.s.h.ir.bala.20.0@gmail.com"">ba.s.h.ir.bala.20.0@gmail.com</a>
<a href=""mailto:b.ashi.rb.a.la.200@gmail.com"">b.ashi.rb.a.la.200@gmail.com</a>
<a href=""mailto:b.a.sh.i.r.ba.l.a2.0.0@gmail.com"">b.a.sh.i.r.ba.l.a2.0.0@gmail.com</a>
<a href=""mailto:b.a.sh.irba.l.a200@gmail.com"">b.a.sh.irba.l.a200@gmail.com</a>
<a href=""mailto:bas.h.ir.ba.la200@gmail.com"">bas.h.ir.ba.la200@gmail.com</a>
<a href=""mailto:bas.h.i.rba.la2.0.0@gmail.com"">bas.h.i.rba.la2.0.0@gmail.com</a>
<a href=""mailto:b.a.s.hi.rba.l.a.2.00@gmail.com"">b.a.s.hi.rba.l.a.2.00@gmail.com</a>
<a href=""mailto:b.a.s.h.ir.b.ala2.00@gmail.com"">b.a.s.h.ir.b.ala2.00@gmail.com</a>
<a href=""mailto:b.a.s.h.i.rb.a.l.a2.00@gmail.com"">b.a.s.h.i.rb.a.l.a2.00@gmail.com</a>
<a href=""mailto:b.as.h.ir.b.al.a.2.00@gmail.com"">b.as.h.ir.b.al.a.2.00@gmail.com</a>
<a href=""mailto:b.as.h.ir.bal.a2.00@gmail.com"">b.as.h.ir.bal.a2.00@gmail.com</a>
<a href=""mailto:b.a.shirb.a.l.a.20.0@gmail.com"">b.a.shirb.a.l.a.20.0@gmail.com</a>
<a href=""mailto:bash.irbal.a.20.0@gmail.com"">bash.irbal.a.20.0@gmail.com</a>
<a href=""mailto:ba.sh.irb.al.a.2.0.0@gmail.com"">ba.sh.irb.al.a.2.0.0@gmail.com</a>
<a href=""mailto:b.a.sh.i.rba.l.a2.00@gmail.com"">b.a.sh.i.rba.l.a2.00@gmail.com</a>
<a href=""mailto:b.a.sh.i.rb.a.la.2.0.0@gmail.com"">b.a.sh.i.rb.a.la.2.0.0@gmail.com</a>
<a href=""mailto:bashirbal.a.200@gmail.com"">bashirbal.a.200@gmail.com</a>
<a href=""mailto:ba.sh.ir.b.ala200@gmail.com"">ba.sh.ir.b.ala200@gmail.com</a>
<a href=""mailto:bas.h.i.r.ba.l.a2.0.0@gmail.com"">bas.h.i.r.ba.l.a2.0.0@gmail.com</a>
<a href=""mailto:bash.irbal.a2.0.0@gmail.com"">bash.irbal.a2.0.0@gmail.com</a>
<a href=""mailto:ba.shir.ba.l.a.20.0@gmail.com"">ba.shir.ba.l.a.20.0@gmail.com</a>
<a href=""mailto:ba.s.hi.r.bal.a.2.00@gmail.com"">ba.s.hi.r.bal.a.2.00@gmail.com</a>
<a href=""mailto:bashi.r.ba.l.a20.0@gmail.com"">bashi.r.ba.l.a20.0@gmail.com</a>
<a href=""mailto:b.a.sh.irbal.a2.0.0@gmail.com"">b.a.sh.irbal.a2.0.0@gmail.com</a>
<a href=""mailto:b.ashirb.ala2.0.0@gmail.com"">b.ashirb.ala2.0.0@gmail.com</a>
<a href=""mailto:b.ashi.rba.la.2.00@gmail.com"">b.ashi.rba.la.2.00@gmail.com</a>
<a href=""mailto:bash.irb.al.a.2.0.0@gmail.com"">bash.irb.al.a.2.0.0@gmail.com</a>
<a href=""mailto:b.a.shirb.a.l.a200@gmail.com"">b.a.shirb.a.l.a200@gmail.com</a>
<a href=""mailto:b.ash.ir.bala.2.00@gmail.com"">b.ash.ir.bala.2.00@gmail.com</a>
<a href=""mailto:b.a.shi.r.b.a.l.a.2.00@gmail.com"">b.a.shi.r.b.a.l.a.2.00@gmail.com</a>
<a href=""mailto:b.as.hi.r.b.a.la.20.0@gmail.com"">b.as.hi.r.b.a.la.20.0@gmail.com</a>
<a href=""mailto:bash.ir.b.ala.200@gmail.com"">bash.ir.b.ala.200@gmail.com</a>
<a href=""mailto:b.a.s.hi.r.b.ala.200@gmail.com"">b.a.s.hi.r.b.ala.200@gmail.com</a>
<a href=""mailto:ba.s.hi.r.ba.l.a.2.00@gmail.com"">ba.s.hi.r.ba.l.a.2.00@gmail.com</a>
<a href=""mailto:ba.s.h.ir.b.a.l.a.20.0@gmail.com"">ba.s.h.ir.b.a.l.a.20.0@gmail.com</a>
<a href=""mailto:bas.h.i.r.b.a.l.a20.0@gmail.com"">bas.h.i.r.b.a.l.a20.0@gmail.com</a>
<a href=""mailto:b.ashi.r.b.a.l.a2.00@gmail.com"">b.ashi.r.b.a.l.a2.00@gmail.com</a>
<a href=""mailto:b.a.s.hirba.l.a2.00@gmail.com"">b.a.s.hirba.l.a2.00@gmail.com</a>
<a href=""mailto:ba.shi.r.b.a.la200@gmail.com"">ba.shi.r.b.a.la200@gmail.com</a>
<a href=""mailto:ba.sh.i.rb.al.a20.0@gmail.com"">ba.sh.i.rb.al.a20.0@gmail.com</a>
<a href=""mailto:ba.sh.i.rb.a.la.2.00@gmail.com"">ba.sh.i.rb.a.la.2.00@gmail.com</a>
<a href=""mailto:bas.hirb.a.l.a.2.0.0@gmail.com"">bas.hirb.a.l.a.2.0.0@gmail.com</a>
<a href=""mailto:b.ash.i.r.b.al.a200@gmail.com"">b.ash.i.r.b.al.a200@gmail.com</a>
<a href=""mailto:b.a.shi.rbal.a2.0.0@gmail.com"">b.a.shi.rbal.a2.0.0@gmail.com</a>
<a href=""mailto:bas.h.ir.ba.l.a.200@gmail.com"">bas.h.ir.ba.l.a.200@gmail.com</a>
<a href=""mailto:b.as.h.irba.la200@gmail.com"">b.as.h.irba.la200@gmail.com</a>
<a href=""mailto:ba.s.hi.rb.ala200@gmail.com"">ba.s.hi.rb.ala200@gmail.com</a>
<a href=""mailto:b.ashirb.al.a2.0.0@gmail.com"">b.ashirb.al.a2.0.0@gmail.com</a>
<a href=""mailto:b.ashi.r.b.a.la.200@gmail.com"">b.ashi.r.b.a.la.200@gmail.com</a>
<a href=""mailto:b.a.sh.i.rbala.20.0@gmail.com"">b.a.sh.i.rbala.20.0@gmail.com</a>
<a href=""mailto:ba.sh.irba.la20.0@gmail.com"">ba.sh.irba.la20.0@gmail.com</a>"
QpdvEtjG,Savings,Spocoman,Python,Saturday 7th of October 2023 10:44:24 AM CDT,"salary = float(input())
months = int(input())
minimal_costs = float(input())

monthly_savings = salary * 0.70 - minimal_costs

print(f""She can save {monthly_savings / salary * 100:.2f}%\n{monthly_savings * months:.2f}"")
"
CagUWq3n,Savings,Spocoman,JavaScript,Saturday 7th of October 2023 10:31:20 AM CDT,"function savings(input) {
    let salary = Number(input[0]);
    let months = Number(input[1]);
    let minimalCosts = Number(input[2]);

    let monthlySavings = salary * 0.70 - minimalCosts;

    console.log(`She can save ${(monthlySavings / salary * 100).toFixed(2)}%\n${(monthlySavings * months).toFixed(2)}`);

    return;
}"
QcZWGq4H,Untitled,Skos_Martren,C++,Saturday 7th of October 2023 10:31:17 AM CDT,"#include <iostream>
#include<cassert>
#include <array>

using namespace std; 

constexpr int SIZE_ALPHABET = 128;

class Solution {

private:

    // https://github.com/SkosMartren/leetcode_com/blob/main/README.md#setting-the-size-of-an-array-in-a-private-section
    //constexpr int SIZE_ALPHABET = 128; // 'Solution::SIZE_ALPHABET' cannot be declared with 'constexpr' specifier // почему так?
    int LengthSubstr = 0;
public:

    int lengthOfLongestSubstringKDistinct(string_view s, int k) { // ""0 <= k <= 50""

        if (k <= 0) { return LengthSubstr; }

        array<int, SIZE_ALPHABET> CharToCount; CharToCount.fill(0);

        for (int RightBorderWindow = 0, LeftBorderWindow = 0; RightBorderWindow <= s.size() - 1; ++RightBorderWindow) { // move Right ptr

            if (++CharToCount[s[RightBorderWindow]] == 1) { // новая буква (CharToCount[RightBorderWindow]) в sliding window
                --k;
            } // RightBorderWindow указывет на последний символ sliding window 

            while (LeftBorderWindow < RightBorderWindow && k < 0) { // move Left ptr

                if (--CharToCount[s[LeftBorderWindow]] == 0) {
                    ++k;
                }
                ++LeftBorderWindow;
            } // LeftBorderWindow указывет на первый символ sliding window

            LengthSubstr = max(LengthSubstr, RightBorderWindow - LeftBorderWindow + 1);
            assert(LeftBorderWindow <= RightBorderWindow);
        }

        return LengthSubstr;
    }

};

int main() {
    cout << Solution().lengthOfLongestSubstringKDistinct(""abc"", 0) << '\n';
    cout << Solution().lengthOfLongestSubstringKDistinct(""aaa"", 0) << '\n';
    cout << Solution().lengthOfLongestSubstringKDistinct(""aAaA"", 1) << '\n';
    cout << Solution().lengthOfLongestSubstringKDistinct(""aA~aA"", 2) << '\n';
    cout << Solution().lengthOfLongestSubstringKDistinct(""aAaA"", 2) << '\n';
}
/*
0
0
1
2
4
*/"
Z9v8CPuB,Savings,Spocoman,C++,Saturday 7th of October 2023 10:25:26 AM CDT,"#include <iostream>
#include <string>

using namespace std;

int main() {
    double salary;
    cin >> salary;

    int months;
    cin >> months;

    double minimalCosts;
    cin >> minimalCosts;

    double monthlySavings = salary * 0.70 - minimalCosts;

    printf(""She can save %.2f%%\n%.2f"", monthlySavings / salary * 100, monthlySavings * months);

	return 0;
}"
2E43bzQ6,BASH Dialog Shift Log example #1,metalx1000,Bash,Saturday 7th of October 2023 10:19:49 AM CDT,"#!/bin/bash
###################################################################### 
#Copyright (C) 2023  Kris Occhipinti
#https://filmsbykris.com

#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation version 3 of the License.

#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with this program.  If not, see <http://www.gnu.org/licenses/>.
###################################################################### 

tmpfile=""/tmp/shiftlog.tmp""
logfile=""/tmp/shiftlog""
backtitle=""Cool Fire Department""

exec 3>&1;
user=""$(dialog --backtitle ""$backtitle"" --inputbox ""Enter the name"" 15 30 2>&1 1>&3)""
[[ ""$user"" ]] || exit

date=""$(dialog --backtitle ""$backtitle"" --calendar 'calendar'  5 50 2>&1 1>&3)""
echo $date
[[ ""$date"" ]] || exit


#dialog --title ""Shift Log"" --backtitle ""$backtitle"" --editbox ""$logfile"" 16 50 2> ""$tmpfile""; cp ""$tmpfile"" ""$logfile""
dialog --title ""Shift Log"" --backtitle ""$backtitle"" --editbox ""$logfile"" 16 50 2> ""$tmpfile""; cp ""$tmpfile"" ""$logfile""

clear
echo ""$user -- $date""
cat $logfile
"
tHt6KzGK,Savings,Spocoman,C#,Saturday 7th of October 2023 10:19:22 AM CDT,"using System;

namespace Savings
{
    class Program
    {
        static void Main(string[] args)
        {
            double salary = double.Parse(Console.ReadLine());
            int months = int.Parse(Console.ReadLine());
            double minimalCosts = double.Parse(Console.ReadLine());

            double monthlySavings = salary * 0.70 - minimalCosts;

            Console.WriteLine($""She can save {monthlySavings / salary * 100:f2}%\n{monthlySavings * months:f2}"");
        }
    }
}"
5q8c44WR,Print file content through stdin redirection,BenTibnam,C,Saturday 7th of October 2023 10:15:12 AM CDT,"#include <stdio.h>

int main(void)
{
    char c;

    while ((c = getchar()) != EOF)
    {
        printf(""%c"", c);
    }

    return 0;
}

// ./bin < input_file will print the input file content to stdout"
W9QBRupQ,Untitled,Skos_Martren,C++,Saturday 7th of October 2023 10:09:32 AM CDT,"/*
class Solution {
 public:
  vector<vector<int>> findRLEArray(vector<vector<int>>& encoded1, vector<vector<int>>& encoded2) {
  }
};
*/

#include <iostream>
#include<vector>
#include<algorithm>

using namespace std;

class Solution {

public:

    /*

    1 <= val_i, freq_i <= 10^4 for each encoded1[i].
    1 <= val_j, freq_j <= 10^4 for each encoded2[j].

    encoded1[i].front() == val_i, encoded1[i].back() == freq_i
    encoded2[j].front() == val_j, encoded2[j].back() == freq_j
    */
    vector<vector<int>> findRLEArray(vector<vector<int>>& encoded1, vector<vector<int>>& encoded2) {

        vector<vector<int>> Product;

        int i = 0;
        int j = 0;

        while (i < encoded1.size()) { // <-- ""The full arrays that encoded1 and encoded2 represent are the same length."" --> sum(freq_i) == sum(freq_j)

            /*
            encoded1[i].length == 2
            encoded2[j].length == 2
            */
            int product_ij = encoded1[i].front() * encoded2[j].front();

            // ""Note: Compression should be done such that the run-length encoded array has the minimum possible length.""
            int freq_ij = min(encoded1[i].back(), encoded2[j].back()); // количество  product_ij не может быть более min(encoded1[i].back(), encoded2[j].back())

            encoded1[i].back() -= freq_ij;
            encoded2[j].back() -= freq_ij;

            // хотя бы один из этих условных операторов сработает всегда ввиду определения freq_ij, а в конечном итоге i AND j одновременно укажут на i == encoded1.size() AND j == encoded2.size() --> цикл будет работать за O(|encoded1| + |encoded2|)
            if (encoded1[i].back() == 0) { ++i; }
            if (encoded2[j].back() == 0) { ++j; }

            if (Product.empty() || Product.back().front() != product_ij) { Product.push_back({ product_ij , freq_ij }); }
            else { // см. ""My ex 2"" пример в теле main
                Product.back().back() += freq_ij; 
            }
        }

        return Product;

    }
};

int main() {

    vector<vector<int>> encoded1 = { {1, 3}, {2,3} }, encoded2 = { {6, 3}, {3, 3} };

    vector<vector<int>> Ans = Solution().findRLEArray(encoded1, encoded2);

    for (auto vec : Ans) {
        for (int val : vec) {
            cout << val << ' ';
        }
        cout << '\n';
    }
}
/*
vector<vector<int>> encoded1 = { {10, 2}, {7,1}, {3, 2}, {17,1} }, encoded2 = { {11, 3}, {15, 3} };

110 2
77 1
45 2
255 1

10 10  7  3  3 17
11 11 11 15 15 15
*/"
ec0yAcqF,Summer Shopping,Spocoman,Python,Saturday 7th of October 2023 09:52:23 AM CDT,"budget = float(input())
towel = float(input())
discount = int(input())

umbrella = towel / 3 * 2
flip_flops = umbrella * 0.75
beach_bag = (towel + flip_flops) / 3

sum = (towel + umbrella + flip_flops + beach_bag) * (100 - discount) / 100

if budget >= sum:
    print(f""Annie's sum is {sum:.2f} lv. She has {budget - sum:.2f} lv. left."")
else:
    print(f""Annie's sum is {sum:.2f} lv. She needs {sum - budget:.2f} lv. more."")
"
RLdqKRk9,Untitled,Sreekar_0125,C++,Saturday 7th of October 2023 09:42:15 AM CDT,"#include <bits/stdc++.h>
using namespace std;
// #define cerr if(false)cerr
#define int long long
#define pb push_back
#define F first
#define S second
#define yes cout << ""Yes\n""
#define no cout << ""No\n""
#define yn(x) x ? yes : no
#define f(i, s, e) for (int i = s; i < e; i++)
#define traverse(i, a) for (auto i : a)
#define set_bits(x) __builtin_popcountll(x)
#define leading_zero(x) __builtin_clz(x)
#define trailing_zero(x) __builtin_ctz(x)
#define vi vector<int>
#define vb vector<bool>
#define pii pair<int, int>
#define vpi vector<pii>
#define umi unordered_map<int, int>
#define mi map<int, int>
#define si set<int>
#define sc set<char>
#define maxheap priority_queue<int>
#define minheap priority_queue<int, vector<int>, greater<int>>
#define all(x) x.begin(), x.end()
#define minele(x) *min_element(all(x))
#define maxele(x) *max_element(all(x))
#define MOD 1000000007
#define endl '\n'

#ifndef ONLINE_JUDGE
#define debug(x)            \
    cerr << (#x) << "" is ""; \
    _print(x)
#define dbg(x) \
    cerr << (#x) << "" is "" << x << endl;
#else
#define debug(x)
#define dbg(x)
#endif

const int N = 2e5;

template <typename T>
void _print(T a)
{
    cerr << a;
}
template <typename T>
void print(T a)
{
    cout << a << ' ';
}
template <typename T>
void println(T a)
{
    cout << a << endl;
}

template <typename T>
void input(vector<T> &v)
{
    f(i, 0, (int)v.size()) cin >> v[i];
}

template <typename T>
void input(T &a)
{
    cin >> a;
}

template <typename T>
void print(vector<T> &v)
{
    f(i, 0, (int)v.size()) cout << v[i] << ' ';
    cout << endl;
}

template <class T, class V>
void _print(pair<T, V> p);
template <class T>
void _print(vector<T> v);
template <class T>
void _print(set<T> v);
template <class T, class V>
void _print(map<T, V> v);
template <class T>
void _print(multiset<T> v);
template <class T, class V>
void _print(pair<T, V> p)
{
    cerr << ""{"";
    _print(p.F);
    cerr << "","";
    _print(p.S);
    cerr << ""} "";
}
template <class T>
void _print(vector<T> v)
{
    cerr << ""[ "";
    for (T i : v)
    {
        _print(i);
        cerr << "" "";
    }
    cerr << ""]"";
    cerr << endl;
}
template <class T>
void _print(set<T> v)
{
    cerr << ""[ "";
    for (T i : v)
    {
        _print(i);
        cerr << "" "";
    }
    cerr << ""]"";
    cerr << endl;
}
template <class T>
void _print(multiset<T> v)
{
    cerr << ""[ "";
    for (T i : v)
    {
        _print(i);
        cerr << "" "";
    }
    cerr << ""]"";
    cerr << endl;
}
template <class T, class V>
void _print(map<T, V> v)
{
    cerr << ""[ "";
    for (auto i : v)
    {
        _print(i);
        cerr << "" "";
    }
    cerr << ""]"";
    cerr << endl;
}
template <class T, class V>
void _print(unordered_map<T, V> v)
{
    cerr << ""[ "";
    for (auto i : v)
    {
        _print(i);
        cerr << "" "";
    }
    cerr << ""]"";
    cerr << endl;
}

/////////////Sieve///////////////
// vb sieve(N + 5, true);
// vi primes;
// void gensieve()
// {
//     sieve[0] = sieve[1] = false;
//     for (int i = 2; i <= sqrt(N); i++)
//     {
//         if (sieve[i])
//         {
//             for (int j = i * i; j <= N; j += i)
//                 sieve[j] = false;
//         }
//     }
//     for (int i = 2; i <= N; i++)
//     {
//         if (sieve[i])
//             primes.pb(i);
//     }
// }
////////////////////////////////

int binpow(int a, int b, int m)
{
    a %= m;
    int ans = 1;
    while (b > 0)
    {
        if (b & 1)
        {
            ans = (ans * a) % MOD;
        }
        a = (a * a) % MOD;
        b >>= 1;
    }
    return ans;
}

int modadd(int a, int b)
{
    return (a % MOD + b % MOD) % MOD;
}
int modsub(int a, int b)
{
    return ((a % MOD - b % MOD) % MOD + MOD) % MOD;
}
int modmul(int a, int b)
{
    return (a % MOD * b % MOD) % MOD;
}
int moddiv(int a, int b)
{
    return ((a % MOD) * (binpow(b, MOD - 2, MOD))) % MOD;
}

int lbnd(vi &v, int x)
{
    int n = v.size();
    int low = 0;
    int high = n - 1;
    int ans = -1;
    while (low <= high)
    {
        int mid = (low + high) >> 1;
        if (v[mid] <= x)
        {
            ans = mid;
            low = mid + 1;
        }
        else
        {
            high = mid - 1;
        }
    }
    return ans;
}

int ubnd(vi &v, int x)
{
    int n = v.size();
    int low = 0;
    int high = n - 1;
    int ans = -1;
    while (low <= high)
    {
        int mid = (low + high) >> 1;
        if (v[mid] >= x)
        {
            ans = mid;
            high = mid - 1;
        }
        else
        {
            low = mid + 1;
        }
    }
    return ans;
}

// vpi moves = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}, {1, 1}, {1, -1}, {-1, 1}, {-1, -1}};
// vi graph[N + 1];
// vb visited(N + 1, false);
// vi parent(N + 1, -1);
// vi level(N + 1, 0);

// void bfs(vi *graph, vb &visited, vi &parent, vi &level, int start)
// {
//     queue<int> q;
//     visited[start] = true;
//     q.push(start);
//     while (!q.empty())
//     {
//         int node = q.front();
//         traverse(i, graph[node])
//         {
//             if (!visited[i])
//             {
//                 if (parent[i] == -1)
//                     parent[i] = node;
//                 if (level[i] == 0)
//                     level[i] = 1 + level[node];
//                 visited[i] = true;
//                 q.push(i);
//             }
//         }
//         q.pop();
//     }
// }

// void dfs(vi *graph, vb &visited, int start)
// {
//     visited[start] = true;
//     traverse(i, graph[start])
//     {
//         if (!visited[i])
//         {
//             visited[i] = true;
//             dfs(graph, visited, i);
//         }
//     }
// }

void fast()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
}

void init_code()
{
#ifndef ONLINE_JUDGE
    freopen(""input.txt"", ""r"", stdin);
    freopen(""output.txt"", ""w"", stdout);
    freopen(""error.txt"", ""w"", stderr);
#endif // ONLINE_JUDGE
}

void solve()
{
    string s1, s2;
    cin >> s1 >> s2;

    vi cnt(26, 0);
    f(i, 0, s1.length())
    {
        cnt[s1[i] - 'a']++;
    }
    int ans = 0;

    f(i, 0, s2.length())
    {
        int ch = s2[i] - 'a';
        if (cnt[ch])
        {
            cnt[ch]--;
        }
        else
        {
            if (ch == 0)
            {
                if(cnt['z' - 'a'])
                {
                    cnt['z' - 'a']--;
                    ans++;
                }
                else 
                {
                    ans += 2;
                }
            }
            else 
            {
                if (cnt[ch - 1])
                {
                    cnt[ch - 1]--;
                    ans++;
                }
                else
                {
                    ans += 2;
                }
            }    
        }
    }
    cout << ans << endl;
}

signed main()
{
    init_code();
    fast();
    int t = 1;
    cin >> t;
    // gensieve();
    while (t--)
    {
        solve();
    }
    return 0;
}
"
TiWRA75d,shooter_final,zerg959,Python,Saturday 7th of October 2023 09:33:59 AM CDT,"from pygame import *
from random import randint
#подгружаем отдельно функции для работы со шрифтом
font.init()
font1 = font.Font(None, 80)
win = font1.render('YOU WIN!', True, (255, 255, 255))
lose = font1.render('YOU LOSE!', True, (180, 0, 0))


font2 = font.Font(None, 36)


#фоновая музыка
mixer.init()
mixer.music.load('space.ogg')
mixer.music.play()
fire_sound = mixer.Sound('fire.ogg')


#нам нужны такие картинки:
img_back = ""galaxy.jpg"" #фон игры
img_bullet = ""bullet.png"" #пуля
img_hero = ""rocket.png"" #герой
img_enemy = ""ufo.png"" #враг
score = 0 #сбито кораблей
goal = 10 #столько кораблей нужно сбить для победы
lost = 0 #пропущено кораблей
max_lost = 3 #проиграли, если пропустили столько
#класс-родитель для других спрайтов
class GameSprite(sprite.Sprite):
 #конструктор класса
   def __init__(self, player_image, player_x, player_y, size_x, size_y, player_speed):
       #вызываем конструктор класса (Sprite):
       sprite.Sprite.__init__(self)


       #каждый спрайт должен хранить свойство image - изображение
       self.image = transform.scale(image.load(player_image), (size_x, size_y))
       self.speed = player_speed


       #каждый спрайт должен хранить свойство rect - прямоугольник, в который он вписан
       self.rect = self.image.get_rect()
       self.rect.x = player_x
       self.rect.y = player_y
 #метод, отрисовывающий героя на окне
   def reset(self):
       window.blit(self.image, (self.rect.x, self.rect.y))


#класс главного игрока
class Player(GameSprite):
   #метод для управления спрайтом стрелками клавиатуры
   def update(self):
       keys = key.get_pressed()
       if keys[K_LEFT] and self.rect.x > 5:
           self.rect.x -= self.speed
       if keys[K_RIGHT] and self.rect.x < win_width - 80:
           self.rect.x += self.speed
 #метод ""выстрел"" (используем место игрока, чтобы создать там пулю)
   def fire(self):
       bullet = Bullet(img_bullet, self.rect.centerx, self.rect.top, 15, 20, -15)
       bullets.add(bullet)


#класс спрайта-врага  
class Enemy(GameSprite):
   #движение врага
   def update(self):
       self.rect.y += self.speed
       global lost
       #исчезает, если дойдёт до края экрана
       if self.rect.y > win_height:
           self.rect.x = randint(80, win_width - 80)
           self.rect.y = 0
           lost = lost + 1
#класс спрайта-пули  
class Bullet(GameSprite):
   # движение врага
   def update(self):
       self.rect.y += self.speed
       # исчезает, если дойдет до края экрана
       if self.rect.y < 0:
           self.kill()
#создаём окошко
win_width = 700
win_height = 500
display.set_caption(""Shooter"")
window = display.set_mode((win_width, win_height))
background = transform.scale(image.load(img_back), (win_width, win_height))
#создаём спрайты
ship = Player(img_hero, 5, win_height - 100, 80, 100, 10)
#создание группы спрайтов-врагов
monsters = sprite.Group()
for i in range(1, 6):
   monster = Enemy(img_enemy, randint(80, win_width - 80), -40, 80, 50, randint(1, 5))
   monsters.add(monster)
bullets = sprite.Group()
#переменная ""игра закончилась"": как только там True, в основном цикле перестают работать спрайты
finish = False
#основной цикл игры:
run = True #флаг сбрасывается кнопкой закрытия окна
while run:
   #с
обытие нажатия на кнопку Закрыть   for e in event.get():
       if e.type == QUIT:
           run = False
       #событие нажатия на пробел - спрайт стреляет
       elif e.type == KEYDOWN:
           if e.key == K_SPACE:
               fire_sound.play()
               ship.fire()
 #сама игра: действия спрайтов, проверка правил игры, перерисовка
   if not finish:
       #обновляем фон
       window.blit(background,(0,0))


       #производим движения спрайтов
       ship.update()
       monsters.update()
       bullets.update()


       #обновляем их в новом местоположении при каждой итерации цикла
       ship.reset()
       monsters.draw(window)
       bullets.draw(window)
       #проверка столкновения пули и монстров
       collides = sprite.groupcollide(monsters, bullets, True, True)
       for c in collides:
           #этот цикл повторится столько раз, сколько монстров подбито
           score = score + 1
           monster = Enemy(img_enemy, randint(80, win_width - 80), -40, 80, 50, randint(1, 5))
           monsters.add(monster)


       #возможный проигрыш
       if sprite.spritecollide(ship, monsters, False) or lost >= max_lost:
           finish = True #проиграли
           window.blit(lose, (200, 200))


       #проверка выигрыша
       if score >= goal:
           finish = True
           window.blit(win, (200, 200))


       #пишем текст на экране
       text = font2.render(""Счет: "" + str(score), 1, (255, 255, 255))
       window.blit(text, (10, 20))


       text_lose = font2.render(""Пропущено: "" + str(lost), 1, (255, 255, 255))
       window.blit(text_lose, (10, 50))


       display.update()

   else:
       finish = False
       score = 0
       lost = 0
       for b in bullets:
           b.kill()
       for m in monsters:
           m.kill()


       time.delay(3000)
       for i in range(1, 6):
           monster = Enemy(img_enemy, randint(80, win_width - 80), -40, 80, 50, randint(1, 5))
           monsters.add(monster)
      


   time.delay(50)"
DXbkLiQ5,MOK layout Kurdish Cyrillic,dksetiavan,JSON,Saturday 7th of October 2023 09:30:30 AM CDT,"OK_Layout_Begin
Name:Kurdish Cyrillic
'1234567890
ԛԝертйуиопӧш
асдфгһжклэщ
зхчвбнмәь
'1234567890
ԚԜЕРТЙУИОПӦШ
АСДФГҺЖКЛЭЩ
ЗХЧВБНМӘЬ
₽£¥€$%^&*()
~ˋ{}\_-=|+«»
[]@#±/÷'""‹›.
…<>!;:?,।§
1234567890
qwertyuiop
asdfghjkl'
zxcvbnm
OK_Layout_End
"
