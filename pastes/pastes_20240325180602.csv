id,title,username,language,date,content
0GWh2LxF,Untitled,iconoclasthero,Bash,Monday 25th of March 2024 12:57:12 PM CDT,"while read -r line
 do
  ignoredir=""${line%.mpdignore}""
  while read -r ignored
    do
      [[ ""$ignored"" != \#* ]] && printf '%s%s\n' ""$ignoredir"" ""$ignored""
    done < <(cat ""$line"")
 done < <(find ""$musicdir"" -name .mpdignore) | sort |uniq
"
sU0fZnLe,Woo_orders,DeniGD,PHP,Monday 25th of March 2024 12:55:33 PM CDT,"function woo_order_history( $atts ) {
extract( shortcode_atts( array(
    'order_count' => -1
), $atts ) );

ob_start();
$customer_orders = wc_get_orders( apply_filters( 'woocommerce_my_account_my_orders_query', array(
    'customer' => get_current_user_id(),
    'page'     => $current_page,
    'paginate' => true,
) ) );
wc_get_template(
    'myaccount/orders.php',
    array(
        'current_page'    => absint( $current_page ),
        'customer_orders' => $customer_orders,
        'has_orders'      => 0 < $customer_orders->total,
    )
);
return ob_get_clean();
}
add_shortcode('woocommerce_history', 'woo_order_history');"
1UVYwxnZ,bd_company,RogerFig,PostgreSQL,Monday 25th of March 2024 12:39:35 PM CDT,"Observa√ß√µes: 
	1. Criar Bancos de dados a sua escolha
	2. N√£o esquecer de usar o banco criado com \c

-- PRIMEIRA PARTE

CREATE SCHEMA company;
SET search_path TO company;
CREATE TABLE employee  (
	fname varchar  (15)  not null,
        minit char,
	lname varchar (15)  not null,
        ssn char(9)  not null,
        bdate date,
	address varchar(30),
        sex char CHECK (sex IN ('M', 'F')),
	salary DECIMAL(10, 2),
        superssn char(9),
	dno int not null,
        primary key (ssn),
	CONSTRAINT emp_superssn FOREIGN KEY (superssn)
	   REFERENCES employee(ssn) DEFERRABLE
);
CREATE TABLE department  (
	dname varchar(15)  not null,
        dnumber int not null,
	mgrssn char(9),
        mgrstartdate date,
	primary key  (dnumber),
        foreign key  (mgrssn) REFERENCES employee(ssn));
CREATE TABLE dependent (
	essn char (9)  not null,
	dependent_name varchar  (30) not null,
       	sex char,
	bdate date,
       relationship varchar(15),
       primary key  (essn,  dependent_name),
       foreign key  (essn)  REFERENCES employee(ssn)
);

-- SEGUNDA PARTE

SET CONSTRAINTS ALL DEFERRED;
SET SEARCH_PATH TO company; -- DEFINE ESQUEMA DEFAULT
INSERT INTO  employee
	VALUES ('James', 'E', 'Borg', '888665555',
		DATE '1937-11-10', '450 Stone, Houston, TX',
		'M', 55000, null, 1);
INSERT INTO  employee
	VALUES ('Franklin', 'T', 'Wong', '333445555',
		DATE '1955-12-08', '638 Voss, Houston, TX',
		'M', 40000, '888665555', 5);
INSERT INTO  employee
	VALUES ('John', 'B', 'Smith', '123456789',
		DATE '1965-01-09', '731 Fondren, Houston, TX',
		'M', 30000, '333445555', 5);
INSERT INTO  employee
	VALUES ('Jennifer', 'S', 'Wallace', '987654321',
		DATE '1941-06-20', '291 Berry, Bellaire,TX',
		'F', 43000, '888665555', 4);
INSERT INTO  employee
	VALUES ('Ramesh', 'K', 'Narayan', '666884444',
		DATE '1962-09-15', '975 Fire Oak, Humble, TX',
		'M', 38000, '333445555', 5);
INSERT INTO  employee
	VALUES ('Joyce', 'A', 'English', '453453453',
		DATE '1972-07-31', '5631 Rice, Houston,TX',
		'F', 25000, '333445555', 5);
INSERT INTO  employee
	VALUES ('Ahmad', 'V', 'Jabbar', '987987987',
		DATE '1969-03-29', '980 Dallas, Houston, TX',
		'M', 25000, '987654321', 4);
INSERT INTO  employee
	VALUES ('Alicia', 'J', 'Zelaya', '999887777',
		DATE '1968-07-19', '3321 Castle, Spring, TX',
		'F', 25000, '987654321', 4);

INSERT INTO  department
	VALUES ('Research', 5, '333445555', DATE '1988-05-22');
INSERT INTO  department
	VALUES ('Administration', 4, '987654321', DATE '1995-01-01');
INSERT INTO  department
	VALUES ('Headquarters', 1, '888665555', DATE '1981-06-19');

-- TERCEIRA PARTE

ALTER TABLE employee
	ADD CONSTRAINT emp_dno FOREIGN KEY (dno)
	REFERENCES department(dnumber)  DEFERRABLE;

CREATE TABLE dept_locations (
	dnumber int not null,
        dlocation varchar(15),
        foreign key (dnumber) REFERENCES department(dnumber)
);
CREATE TABLE project  (
	pname varchar(20),
     	pnumber int not null,
	plocation varchar(15),
     	dnum int,
     	primary key (pnumber),
     	foreign key (dnum)  REFERENCES department(dnumber)
);
CREATE TABLE works_on   (
	essn char(9) not null,
        pno int not null,
	hours decimal(4,2),
       	foreign key  (essn) REFERENCES employee(ssn),
       	foreign key  (pno)  REFERENCES project(pnumber)
);

-- QUARTA PARTE

INSERT INTO  dept_locations VALUES (1, 'Houston');
INSERT INTO  dept_locations VALUES (4, 'Stafford');
INSERT INTO  dept_locations VALUES (5, 'Bellaire');
INSERT INTO  dept_locations VALUES (5, 'Sugarland');
INSERT INTO  dept_locations VALUES (5, 'Houston');

INSERT INTO  project VALUES ('ProductX',  1, 'Bellaire', 5);
INSERT INTO  project VALUES ('ProductY',  2, 'Sugarland', 5);
INSERT INTO  project VALUES ('ProductZ',  3, 'Houston', 5);
INSERT INTO  project VALUES ('Computerization', 10, 'Stafford', 4);
INSERT INTO  project VALUES ('Reorganization',  20, 'Houston', 1);
INSERT INTO  project VALUES ('Newbenefits',     30, 'Stafford', 4);

INSERT INTO  works_on VALUES ('123456789',  1, 32.5);
INSERT INTO  works_on VALUES ('123456789',  2,  7.5);
INSERT INTO  works_on VALUES ('666884444',  3, 40.0);
INSERT INTO  works_on VALUES ('453453453',  1, 20.0);
INSERT INTO  works_on VALUES ('453453453',  2, 20.0);
INSERT INTO  works_on VALUES ('333445555',  2, 10.0);
INSERT INTO  works_on VALUES ('333445555',  3, 10.0);
INSERT INTO  works_on VALUES ('333445555', 10, 10.0);
INSERT INTO  works_on VALUES ('333445555', 20, 10.0);
INSERT INTO  works_on VALUES ('999887777', 30, 30.0);
INSERT INTO  works_on VALUES ('999887777', 10, 10.0);
INSERT INTO  works_on VALUES ('987987987', 10, 35.0);
INSERT INTO  works_on VALUES ('987987987', 30,  5.0);
INSERT INTO  works_on VALUES ('987654321', 30, 20.0);
INSERT INTO  works_on VALUES ('987654321', 20, 15.0);
INSERT INTO  works_on VALUES ('888665555', 20, null);

INSERT INTO  dependent VALUES ('333445555',  'Alice', 'F', DATE '1986-04-05', 'DAUGHTER');
INSERT INTO  dependent VALUES ('333445555',  'Theodore', 'M', DATE '1983-10-25', 'SON');
INSERT INTO  dependent VALUES ('333445555',  'Joy', 'F', DATE '1958-05-03', 'SPOUSE');
INSERT INTO  dependent VALUES ('987654321',  'Abner', 'M', DATE '1942-02-28', 'SPOUSE');
INSERT INTO  dependent VALUES ('123456789',  'Michael', 'M', DATE '1988-01-04', 'SON');
INSERT INTO  dependent VALUES ('123456789',  'Alice', 'F', DATE '1988-12-30', 'DAUGHTER');
INSERT INTO  dependent VALUES ('123456789',  'Elizabeth', 'F', DATE '1967-05-05', 'SPOUSE');
"
jQQZFnZL,PS99 Gem Dupe Script,quikzyYTbtw,Lua,Monday 25th of March 2024 12:33:00 PM CDT,"--[[
Gem Dupe Hub made by quikzy and zerqhy :)
]]
 
 
loadstring(game:HttpGet(""https://raw.githubusercontent.com/zerqhy/petsim99/main/PS99%20DUPE%20PUBLIC""))()"
LEdcbwV9,G2A.com Free Gift Card Guide Mar 2024 FIX,HastyBasher0,GetText,Monday 25th of March 2024 12:28:53 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

IMPORTANT: If you use this make sure to use the English version of G2A.com otherwise this will not work!

You can buy gift cards directly with it or you can buy popular games then put them on fresh steam accounts and then sell those accounts.
 
PDF guide here:
https://smallpdf.com/file#s=cea149fd-ead1-4939-94cf-d10a8ce7936a
 
Working as of:
25 March 2024















































"
nXiH2R44,ü§ë G2A.com Free Gift Card Guide Mar 2024 FIX ü§ë,ounnuo,GetText,Monday 25th of March 2024 12:24:57 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

If you use this make sure to use the English version of G2A.com otherwise this will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_591609.pdf

Working as of:
25 March 2024


















"
rKbQAh9V,ü§ë G2A.com Free Gift Card Guide Mar 2024 FIX ü§ë,Roobet,GetText,Monday 25th of March 2024 12:17:26 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
IMPORTANT: If you use this make sure to use the English version of G2A.com otherwise this will not work!
 
You can buy gift cards directly with it or you can buy popular games then put them on fresh steam accounts and then sell those accounts.
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view?usp=sharing
 
 
Working as of:
25 March 2024"
ytBNu38F,WeatherApp,multifacs,QML,Monday 25th of March 2024 12:08:44 PM CDT,"import QtQuick 2.0
import Sailfish.Silica 1.0

Page {

    id: page

    property double lat: 52.52
    property double lon: 13.41
    property string city: ""–ë–µ—Ä–ª–∏–Ω""

    Column {
        spacing: 100
        anchors.verticalCenter: parent.verticalCenter

        Column { // –ö–æ–ª–æ–Ω–∫–∞ - –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å—Ç–æ–ª–±–µ—Ü
            width: 720
            height: 300
            spacing: 20

            Label {
                id: cityLabel
                text: city
                font.family: ""Helvetica""; font.pixelSize: 40; font.bold: true
                anchors.horizontalCenter: parent.horizontalCenter
            }
            Row {
                Image {
                    id: weatherIcon

                    anchors.verticalCenter: parent.verticalCenter
                    source: ""https://openweathermap.org/img/wn/01d@2x.png""
                    width: 300
                    height: 300
                }

                Column {
                    width: 420
                    spacing: 10
                    anchors.verticalCenter: parent.verticalCenter

                    Label {
                        id: dateLabel
                        font.family: ""Helvetica""; font.pixelSize: 30
                        anchors.horizontalCenter: parent.horizontalCenter
                    }
                    Row {
                        anchors.horizontalCenter: parent.horizontalCenter
                        spacing: 10
                        Label {
                            id: timeLabel
                            font.family: ""Helvetica""; font.pixelSize: 70
                        }
                        Label {
                            text: ""GMT""
                            anchors.bottom: timeLabel.bottom
                            font.family: ""Helvetica""; font.pixelSize: 20
                        }
                    }

                    Rectangle {
                        height: 5
                        width: 300
                        color: ""black""
                        anchors.horizontalCenter: parent.horizontalCenter
                    }
                    Row {
                        anchors.horizontalCenter: parent.horizontalCenter
                        spacing: 20

                        Label {
                            id: temperatureLabel
                            font.family: ""Helvetica""; font.pixelSize: 70
                        }

                        Column {
                            Label {
                                id: windSpeedLabel
                                anchors.horizontalCenter: parent.horizontalCenter
                            }
                            Image {
                                anchors.horizontalCenter: parent.horizontalCenter
                                id: windDirImage
                                source: ""https://www.svgrepo.com/show/533632/arrow-up.svg""
                                width: 50
                                height: width
                            }
                        }
                    }
                }
            }
        }

        Column {
            anchors.horizontalCenter: parent.horizontalCenter
            width: 600
            spacing: 10
            Row {
                anchors.horizontalCenter: parent.horizontalCenter
                spacing: 10
                Button {
                    text: ""–ë–µ—Ä–ª–∏–Ω""
                    width: 300
                    onClicked: {
                        lat = 52.52
                        lon = 13.41
                        city = ""–ë–µ—Ä–ª–∏–Ω""
                        loadWeather()
                    }
                }
                Button {
                    text: ""–°–∏–¥–Ω–µ–π""
                    width: 300
                    onClicked: {
                        lat = -33.8678
                        lon = 151.2073
                        city = ""–°–∏–¥–Ω–µ–π""
                        loadWeather()
                    }
                }
            }

            Row {
                anchors.horizontalCenter: parent.horizontalCenter
                spacing: 10
                Button {
                    text: ""–í–∞—à–∏–Ω–≥—Ç–æ–Ω""
                    width: 300
                    onClicked: {
                        lat = 38.8951
                        lon = -77.0364
                        city = ""–í–∞—à–∏–Ω–≥—Ç–æ–Ω""
                        loadWeather()
                    }
                }
                Button {
                    text: ""–ë—É—ç–Ω–æ—Å-–ê–π—Ä–µ—Å""
                    width: 300
                    onClicked: {
                        lat = -34.6131
                        lon = -58.3772
                        city = ""–ë—É—ç–Ω–æ—Å-–ê–π—Ä–µ—Å""
                        loadWeather()
                    }
                }
            }
        }
    }

    Component.onCompleted: { // —Ç–∞–∫–∞—è —à—Ç—É–∫–∞ —á—Ç–æ–±—ã –≤–µ—Å—å –∫–æ–¥ –Ω–∏–∂–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –ø—Ä–æ–≥–∏
        loadWeather()
    }

    function loadWeather() {
        var xhr = new XMLHttpRequest(); // –≤—Å—ë –∏–∑ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏
        var weather

        xhr.open('GET', 'https://api.open-meteo.com/v1/forecast?latitude=' + lat + '&longitude=' + lon + '&current_weather=true', true); // –∞–¥—Ä–µ—Å –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –ø–æ–ª—É—á–∞–µ–º –ø–æ–≥–æ–¥—É

        xhr.onreadystatechange = function() {
            if (xhr.readyState === XMLHttpRequest.DONE) {

                weather = JSON.parse(xhr.responseText) // —Ç–µ–∫—Å—Ç –ø–æ —Å—Å—ã–ª–∫–µ –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ javascript –æ–±—ä–µ–∫—Ç
                var current_weather_units = weather.current_weather_units
                var current_weather = weather.current_weather
                console.log(current_weather.time)
                var date = new Date(current_weather.time);

                weatherIcon.source = getWeatherIcon(current_weather.weathercode, current_weather.is_day);
                dateLabel.text = date.toDateString()
                timeLabel.text = date.toTimeString().slice(0,5)
                temperatureLabel.text = current_weather.temperature + "" "" + current_weather_units.temperature
                windSpeedLabel.text = current_weather.windspeed + "" "" + current_weather_units.windspeed
                windDirImage.rotation = current_weather.winddirection

            }
        }
        xhr.send();
    }

    function getWeatherIcon(code, isDay) {
        var iconUrl = ""https://openweathermap.org/img/wn/""

        var codesDict = {
            0: ""01"",
            1: ""01"",
            2: ""02"",
            3: ""03"",
            45: ""50"", 48: ""50"",
            51: ""10"", 53: ""10"", 55: ""10"", 56: ""10"", 57: ""10"",
            61: ""10"", 63: ""10"", 65: ""10"", 66: ""10"", 67: ""10"",
            71: ""13"", 73: ""13"", 75: ""13"", 77: ""13"", 85: ""13"", 86: ""13"",
            80: ""09"", 81: ""09"", 82: ""09"",
            95: ""11"", 96: ""11"", 99: ""11""
        }

        if (codesDict[code] !== null) {
            iconUrl += codesDict[code];
        } else {
            iconUrl += ""11"";
        }

        if (isDay === 1) {
            iconUrl += ""d"";
        } else {
            iconUrl += ""n"";
        }

        iconUrl += ""@2x.png"";

        return iconUrl;
    }
}
"
Wvhcy0nH,sbdrbrnt,gadungw71,PHP,Monday 25th of March 2024 12:08:10 PM CDT,"‚Ä¢	https://github.com/phim-Godzilla-x-Kong-2-Full-Vietsub
‚Ä¢	https://github.com/Xem-phim-Godzilla-x-Kong2-2024-Vi-tsub
‚Ä¢	https://github.com/FULL-HD-Godzilla-x-Kong-D-Ch-M-i-2024
‚Ä¢	https://www.senscritique.com/liste/FULL_HD_Xem_Phim_Godzilla_x_Kong_DJe_Che_Moi_2024_Vietsub_Thuyet_Minh/3801933
‚Ä¢	https://www.senscritique.com/liste/Xem_phim_Godzilla_x_Kong_DJe_Che_Moi_20241080_FULL_Vietsub/3801942
‚Ä¢	https://www.senscritique.com/liste/Godzilla_x_Kong_DJe_Che_Moi_Full_HD4K_Vietsub_or_Xem_phim_moi_online/3801945
‚Ä¢	https://www.senscritique.com/liste/Xem_Phim_Godzilla_x_Kong_DJe_Che_Moi_2024_Full_HD_Vietsub_Mien_Phi_Online/3801950
‚Ä¢	https://scribehow.com/page/Xem_Phim-Godzilla_x_Kong_DJe_Che_Moi_4K_VietSub_2024__Thuyet_Minh_Full_HD1080P__liK_s_IuSiWhYZzXMwFoVA
‚Ä¢	https://scribehow.com/page/XEM_PHIM_Godzilla_x_Kong_DJe_Che_Moi_FULL__VIETSUBTHUYET_MINH-2024__WkGvNdnoTySlIVLa5rQsfA
‚Ä¢	https://scribehow.com/page/FULL___Xem_phim_Godzilla_x_Kong_DJe_Che_Moi_2024_Vietsub_FULL_1080p_Phimmoi__Wm8x5c0uQraRtpXWLC00Zw
‚Ä¢	https://www.artstation.com/user-6526228/profile
‚Ä¢	https://www.artstation.com/artwork/39XgbA
‚Ä¢	https://wandering.flarum.cloud/d/51199-qwebrestnmt
‚Ä¢	https://click4r.com/posts/g/15720793/dtgdrntdryndr
‚Ä¢	https://hiuderyy.hashnode.dev/egvre4bntreyn
‚Ä¢	https://www.onfeetnation.com/profiles/blogs/dsfvestnrdtb
‚Ä¢	https://medium.com/@vf5443333/phim-hd-godzilla-x-kong-%C4%91%E1%BA%BF-ch%E1%BA%BF-m%E1%BB%9Bi-online-mi%E1%BB%85n-ph%C3%AD-bc039de58a77
‚Ä¢	https://open.firstory.me/user/clu76hr2j002a0107dysx2hx7
‚Ä¢	https://open.firstory.me/story/clu76j2b5003j012c1mhy5pp2
‚Ä¢	https://forum.mush.com.br/topic/207653/xemphim-godzilla-x-kong-%C4%91%E1%BA%BF-ch%E1%BA%BF-m%E1%BB%9Bi-2024-full-hd-4k-vietsub-mi%E1%BB%85n-ph%C3%AD
‚Ä¢	https://telegra.ph/afdvest-03-25
‚Ä¢	https://paste.ee/p/nlv3s
‚Ä¢	https://start.me/w/xY21r0
‚Ä¢	https://hackmd.io/@rerewilli6/SylP3mJyR
‚Ä¢	https://rentry.co/8nsb2xob
‚Ä¢	https://muckrack.com/goldas-chuldtgo/bio
‚Ä¢	http://aldenfamilydentistry.com/UserProfile/tabid/57/userId/717446/Default.aspx
‚Ä¢	https://profile.hatena.ne.jp/sdvrsbt/
‚Ä¢	https://www.fitlynk.com/1711386404F156221
"
KAuHLgKV,Untitled,Abdula_2314124,C#,Monday 25th of March 2024 12:04:27 PM CDT,"using System;
using System.Collections;
using System.Collections.Generic;
using TMPro;
using UnityEngine;

public class PlayerPrefsss : MonoBehaviour
{
    [SerializeField] private int score;
    [SerializeField] private TextMeshProUGUI scoreText;
    private void Start()
    {
        if (PlayerPrefs.HasKey(""Score""))
        {
            score = PlayerPrefs.GetInt(""Score"");
        }

        score++;
        scoreText.text = score.ToString();

        PlayerPrefs.SetInt(""Score"", score);

        PlayerPrefs.DeleteKey(""Score"");
    }
}
"
vsUyVkC8,Untitled,Abdula_2314124,C#,Monday 25th of March 2024 12:03:30 PM CDT,"using UnityEngine;

public class MoveCube : MonoBehaviour
{
    private void Update()
    {
        //PlayerPrefs.SetFloat(""X"", transform.position.x);
        //PlayerPrefs.SetFloat(""Y"", transform.position.y);
        //PlayerPrefs.SetFloat(""Z"", transform.position.z);

        if (Input.GetKeyDown(KeyCode.A))
        {
            LoadLastPosition();
        }
    }
    private void LoadLastPosition()
    {
        var position = transform.position;
        position.x = PlayerPrefs.GetFloat(""X"");
        position.y = PlayerPrefs.GetFloat(""Y"");
        position.z = PlayerPrefs.GetFloat(""Z"");
        transform.position = position;
    }
}
"
wMkWHuw7,Untitled,Abdula_2314124,C#,Monday 25th of March 2024 12:02:34 PM CDT,"using TMPro;
using UnityEngine;

public class NameUI : MonoBehaviour
{
    [SerializeField] private TextMeshProUGUI name;
    [SerializeField] private TMP_InputField inputName;

    private bool _isLoad;
    private void Update()
    {
        name.text = inputName.text;

        if (_isLoad)
        {
            inputName.text = PlayerPrefs.GetString(""Str"");
            _isLoad = false;
        }
    }
    public void Save()
    {
        _isLoad = false;
        PlayerPrefs.SetString(""Str"", name.text);
    }
    public void Load()
    {
        _isLoad = true;
    }
}
"
jTcT8WGP,Dependencies,JohnMS,CMake,Monday 25th of March 2024 11:27:46 AM CDT,"#*******************************************************************************
#**  This file is part of Pecunia.                                           ***
#**                                                                          ***
#**  Copyright (C) 2017, 2018, 2019, 2020, 2021, 2023, 2024                  ***
#**  John Schneiderman <Licencing _AT_ Schneiderman _DOT_ me>                ***
#**                                                                          ***
#**  This program is free software: you can redistribute it and/or modify it ***
#**  under the terms of the GNU Lesser General Public License as published   ***
#**  by the Free Software Foundation, either version 3 of the License, or    ***
#**  (at your option) any later version.                                     ***
#**                                                                          ***
#**  This program is distributed in the hope that it will be useful, but     ***
#**  WITHOUT ANY WARRANTY; without even the implied warranty of              ***
#**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                    ***
#**  See the GNU Lesser General Public License for more details.             ***
#**                                                                          ***
#**  You should have received a copy of the GNU Lesser General Public License***
#**  along with this program. If not, see <http://www.gnu.org/licenses/>.    ***
#*******************************************************************************
cmake_minimum_required(VERSION 3.20 FATAL_ERROR)
project(
	pecunia
	DESCRIPTION ${Pecunia_DESCRIPTION}
	VERSION ${Pecunia_VERSION}
	HOMEPAGE_URL ${Pecunia_HOMEPAGE_URL}
	LANGUAGES CXX
)

configure_file(
	""${CMAKE_CURRENT_SOURCE_DIR}/config.hpp.in""
	""${PROJECT_BINARY_DIR}/internal/config.hpp""
)
configure_file(
	""${CMAKE_CURRENT_SOURCE_DIR}/Sizes.hpp.in""
	""${PROJECT_BINARY_DIR}/external/${PROJECT_NAME}/Sizes.hpp""
)
configure_file(
	""${CMAKE_CURRENT_SOURCE_DIR}/SizesInternal.hpp.in""
	""${PROJECT_BINARY_DIR}/internal/Sizes.hpp""
)

set(${PROJECT_NAME}_PUBLIC_DECLARATIONS
	external/${PROJECT_NAME}/Algorithm.hpp
	external/${PROJECT_NAME}/Codes.h
	external/${PROJECT_NAME}/Conversion.h
	external/${PROJECT_NAME}/Errors.h
	external/${PROJECT_NAME}/Expected.hpp
	external/${PROJECT_NAME}/FloatingPoint.h
	external/${PROJECT_NAME}/Manip.h
	external/${PROJECT_NAME}/Math.h
	external/${PROJECT_NAME}/Money.h
	""${PROJECT_BINARY_DIR}/external/${PROJECT_NAME}/${PROJECT_NAME}_export.h""
	external/${PROJECT_NAME}/Rounders.h
	external/${PROJECT_NAME}/Information.h
	external/${PROJECT_NAME}/SetUp.h
	external/${PROJECT_NAME}/Splitter.h
	""${PROJECT_BINARY_DIR}/external/${PROJECT_NAME}/Sizes.hpp""
	external/${PROJECT_NAME}/Types.h
)
set(${PROJECT_NAME}_PUBLIC_DEFINITIONS
	external/${PROJECT_NAME}/Algorithm.hpp
	external/${PROJECT_NAME}/Codes.cpp
	external/${PROJECT_NAME}/Conversion.cpp
	external/${PROJECT_NAME}/Errors.cpp
	external/${PROJECT_NAME}/Expected.hpp
	external/${PROJECT_NAME}/FloatingPoint.cpp
	external/${PROJECT_NAME}/Information.cpp
	external/${PROJECT_NAME}/Manip.cpp
	external/${PROJECT_NAME}/Math.cpp
	external/${PROJECT_NAME}/Money.cpp
	""${PROJECT_BINARY_DIR}/external/${PROJECT_NAME}/${PROJECT_NAME}_export.h""
	external/${PROJECT_NAME}/Rounders.cpp
	external/${PROJECT_NAME}/SetUp.cpp
	external/${PROJECT_NAME}/Splitter.cpp
	""${PROJECT_BINARY_DIR}/external/${PROJECT_NAME}/Sizes.hpp""
	external/${PROJECT_NAME}/Types.cpp
)
set(${PROJECT_NAME}_PRIVATE_DECLARATIONS
	internal/Adjustments.h
	internal/Attributes.hpp
	internal/BackTrace.h
	internal/config.hpp
	internal/ManipIndex.h
	internal/TraceCapture.h
	internal/Verification.h
)
set(${PROJECT_NAME}_PRIVATE_DEFINITIONS
	internal/Adjustments.cpp
	internal/Attributes.hpp
	internal/config.hpp
	internal/ManipIndex.cpp
	internal/TraceCapture.cpp
	internal/Verification.cpp
)

if (LINUX)
	message(STATUS ""Using GNU/Linux specific source code."")
	set(${PROJECT_NAME}_OS_PRIVATE_DECLARATIONS
	)
	set(${PROJECT_NAME}_OS_PRIVATE_DEFINITIONS
		internal/linux/BackTrace.cpp
	)
elseif (WIN32)
	message(STATUS ""Using Microsoft Windows specific source code."")
	set(${PROJECT_NAME}_OS_PRIVATE_DECLARATIONS
		internal/windows/DebugSymbols.h
	)
	set(${PROJECT_NAME}_OS_PRIVATE_DEFINITIONS
		internal/windows/BackTrace.cpp
		internal/windows/DebugSymbols.cpp
	)
else ()
	message(FATAL_ERROR ""OS specific files not specified."")
endif ()

add_library(${PROJECT_NAME}
	${Pecunia_LIBRARY_TYPE}
	${${PROJECT_NAME}_PUBLIC_DEFINITIONS}
	${${PROJECT_NAME}_PRIVATE_DEFINITIONS}
	${${PROJECT_NAME}_PUBLIC_DECLARATIONS}
	${${PROJECT_NAME}_PRIVATE_DECLARATIONS}
	${${PROJECT_NAME}_OS_PUBLIC_DECLARATIONS}
	${${PROJECT_NAME}_OS_PRIVATE_DEFINITIONS}
)
target_include_directories(${PROJECT_NAME}
	PUBLIC
		$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/external>
	PRIVATE
		$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
		$<BUILD_INTERFACE:${PROJECT_BINARY_DIR}>
		$<BUILD_INTERFACE:${PROJECT_BINARY_DIR}/external>
)
if (WIN32)
	message(STATUS ""Using Microsoft Windows specific libraries."")
	target_link_libraries(${PROJECT_NAME}
		PUBLIC Dbghelp
	)
endif ()

set_target_properties(${PROJECT_NAME} PROPERTIES
	VERSION ${PROJECT_VERSION}
	SOVERSION ${PROJECT_VERSION_MAJOR}
	LINKER_LANGUAGE CXX
	COMPATIBLE_INTERFACE_STRING ${PROJECT_VERSION_MAJOR}
)
set_property(TARGET ${PROJECT_NAME} PROPERTY INTERFACE_${PROJECT_NAME}_MAJOR_VERSION ${PROJECT_VERSION_MAJOR})

include(GenerateExportHeader)
generate_export_header(${PROJECT_NAME}
	EXPORT_FILE_NAME ""${PROJECT_BINARY_DIR}/external/${PROJECT_NAME}/${PROJECT_NAME}_export.h""
)

if (Pecunia_ENABLE_TESTS)
	add_subdirectory(unit-tests)
endif (Pecunia_ENABLE_TESTS)

install(
	TARGETS ${PROJECT_NAME}
	EXPORT ${PROJECT_NAME}Targets
	RUNTIME DESTINATION bin
	COMPONENT Library
	LIBRARY DESTINATION ${Pecunia_LIBRARY_INSTALL_DIR}
	COMPONENT Library
	ARCHIVE DESTINATION ${Pecunia_LIBRARY_INSTALL_DIR}
	COMPONENT Development
	INCLUDES DESTINATION include
	COMPONENT Development
)
install(
	FILES ${${PROJECT_NAME}_PUBLIC_DECLARATIONS}
	DESTINATION include/${PROJECT_NAME}
	COMPONENT Development
)
if (WIN32)
	install(
		FILES $<TARGET_PDB_FILE:${PROJECT_NAME}>
		DESTINATION bin
		COMPONENT Debug
	)
endif(WIN32)

include(CMakePackageConfigHelpers)
write_basic_package_version_file(
	${CMAKE_CURRENT_BINARY_DIR}/cmake/${PROJECT_NAME}Version.cmake
	VERSION ${PROJECT_VERSION}
	COMPATIBILITY SameMajorVersion
)
export(EXPORT ${PROJECT_NAME}Targets
	FILE ${CMAKE_CURRENT_BINARY_DIR}/cmake/${PROJECT_NAME}Targets.cmake
)
configure_file(
	${PROJECT_NAME}Config.cmake.in
	""${CMAKE_CURRENT_BINARY_DIR}/cmake/${PROJECT_NAME}Config.cmake""
	@ONLY
)
install(
	EXPORT ${PROJECT_NAME}Targets
	FILE ${PROJECT_NAME}Targets.cmake
	DESTINATION ${Pecunia_LIBRARY_INSTALL_DIR}/cmake/${PROJECT_NAME}
	COMPONENT Development
)
install(
	FILES
		${CMAKE_CURRENT_BINARY_DIR}/cmake/${PROJECT_NAME}Config.cmake
		${CMAKE_CURRENT_BINARY_DIR}/cmake/${PROJECT_NAME}Version.cmake
	DESTINATION ${Pecunia_LIBRARY_INSTALL_DIR}/cmake/${PROJECT_NAME}
	COMPONENT Development
)

if (NOT TARGET uninstall)
	configure_file(
		""${CMAKE_CURRENT_SOURCE_DIR}/cmake_uninstall.cmake.in""
		""${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake""
		IMMEDIATE @ONLY
	)
	add_custom_target(
		uninstall
		COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake
	)
endif()

set(CPACK_RESOURCE_FILE_LICENSE ""${CMAKE_SOURCE_DIR}/COPYING"")
set(CPACK_RESOURCE_FILE_README ""${CMAKE_SOURCE_DIR}/README"")
set(CPACK_PACKAGE_CHECKSUM SHA256)
set(CPACK_PACKAGE_VENDOR ""John M. Schneiderman"")
set(CPACK_PACKAGE_CONTACT ""licencing _AT_ Schneiderman _DOT_ me"")  #TODO should be controlled by variable
#set(CPACK_PACKAGE_ICON ""${CMAKE_SOURCE_DIR}/pkg/icon.png"") #TODO
set(CPACK_RESOURCE_FILE_WELCOME ""${CMAKE_SOURCE_DIR}/pkg/Welcome.txt"")
set(CPACK_THREADS 6)

set(PACKAGE_DESCRIPTION
	""A C++ library for working with currencies using the ISO-4217 standard.
The monetary representation is in a fixed size and the operations
between difference currencies is seamlessly supported.""
)
set(PACKAGE_RELEASE 1)  #TODO should be controlled by environment variable
set(CPACK_COMPONENT_Development_DEPENDS Library)
set(CPACK_COMPONENT_Debug_DEPENDS Library)

if (LINUX)
	set(CPACK_GENERATOR RPM;DEB;) # TODO should be controlled by environment variable.
	set(CPACK_RPM_PACKAGE_RELEASE ""${PACKAGE_RELEASE}"")
	set(CPACK_RPM_PACKAGE_GROUP ""Development/C++"")
	set(CPACK_RPM_PACKAGE_LICENSE ""LGPLv3+"")
	set(CPACK_RPM_COMPONENT_INSTALL ON)
	set(CPACK_RPM_PACKAGE_RELEASE_DIST ""jms"")
	set(CPACK_RPM_CHANGELOG_FILE ""${CMAKE_SOURCE_DIR}/ChangeLog"")
	set(CPACK_RPM_MAIN_COMPONENT Library)
	# set(CPACK_RPM_Development_PACKAGE_REQUIRES ""${CPACK_COMPONENT_Development_DEPENDS}"")

	set(CPACK_DEBIAN_PACKAGE_RELEASE ""${PACKAGE_RELEASE}"")
	set(CPACK_DEB_COMPONENT_INSTALL ON)
	set(CPACK_DEBIAN_ENABLE_COMPONENT_DEPENDS ON)
	set(CPACK_DEBIAN_PACKAGE_DEPENDS ""${PACKAGE_DESCRIPTION}"")
	set(CPACK_DEBIAN_PACKAGE_SECTION ""libs"")
	set(CPACK_DEBIAN_PACKAGE_SHLIBDEPS ON)
	set(CPACK_DEBIAN_PACKAGE_GENERATE_SHLIBS ON)
	set(CPACK_DEBIAN_PACKAGE_GENERATE_SHLIBS_POLICY "">="")
	set(CPACK_DEBIAN_ENABLE_COMPONENT_DEPENDS ON)
elseif (WIN32)
	set(CPACK_GENERATOR NSIS;)
	set(CPACK_PACKAGE_INSTALL_DIRECTORY ""Pecunia"")
endif ()
include(CPack)

#{ Set-up pacakge dependencies

cpack_add_component(Library
	DISPLAY_NAME ""C++ Library""
	DESCRIPTION ""${PACKAGE_DESCRIPTION}""
	REQUIRED
)
cpack_add_component(Development
	DISPLAY_NAME ""C++ Development Headers""
	DESCRIPTION ""C/C++ header files for use with ${PROJECT_NAME}.""
	DEPENDS Library
)

#}
"
ae50ph4L,sheldock_issue,dasarijit95,JSON,Monday 25th of March 2024 11:24:40 AM CDT,"POD A LOG

{""@timestamp"":""2024-03-25T12:30:00.000962468Z"",""logger_name"":""com.gopuff.consumer.referral.util.ReciprocalCouponTask"",""level"":""INFO"",""message"":""Running in POD:referral-846674f549-2694g reciprocal assignment task every 30 minutes, M-F: 2024-03-25T12:30:00.000914469Z"",""thread_name"":""scheduled-executor-thread-2"",""@version"":""7d55fddead285a289297dee992bea6066ca82676""}
{""@timestamp"":""2024-03-25T13:00:00.000936568Z"",""logger_name"":""com.gopuff.consumer.referral.util.ReciprocalCouponTask"",""level"":""INFO"",""message"":""Running in POD:referral-846674f549-2694g reciprocal assignment task every 30 minutes, M-F: 2024-03-25T13:00:00.000885268Z"",""thread_name"":""scheduled-executor-thread-3"",""@version"":""7d55fddead285a289297dee992bea6066ca82676""}
{""@timestamp"":""2024-03-25T13:30:00.00095448Z"",""logger_name"":""com.gopuff.consumer.referral.util.ReciprocalCouponTask"",""level"":""INFO"",""message"":""Running in POD:referral-846674f549-2694g reciprocal assignment task every 30 minutes, M-F: 2024-03-25T13:30:00.000907681Z"",""thread_name"":""scheduled-executor-thread-1"",""@version"":""7d55fddead285a289297dee992bea6066ca82676""}
{""@timestamp"":""2024-03-25T14:00:00.000736207Z"",""logger_name"":""com.gopuff.consumer.referral.util.ReciprocalCouponTask"",""level"":""INFO"",""message"":""Running in POD:referral-846674f549-2694g reciprocal assignment task every 30 minutes, M-F: 2024-03-25T14:00:00.000689008Z"",""thread_name"":""scheduled-executor-thread-3"",""@version"":""7d55fddead285a289297dee992bea6066ca82676""}
{""@timestamp"":""2024-03-25T14:30:00.000807391Z"",""logger_name"":""com.gopuff.consumer.referral.util.ReciprocalCouponTask"",""level"":""INFO"",""message"":""Running in POD:referral-846674f549-2694g reciprocal assignment task every 30 minutes, M-F: 2024-03-25T14:30:00.000767191Z"",""thread_name"":""scheduled-executor-thread-3"",""@version"":""7d55fddead285a289297dee992bea6066ca82676""}
{""@timestamp"":""2024-03-25T15:00:00.000822804Z"",""logger_name"":""com.gopuff.consumer.referral.util.ReciprocalCouponTask"",""level"":""INFO"",""message"":""Running in POD:referral-846674f549-2694g reciprocal assignment task every 30 minutes, M-F: 2024-03-25T15:00:00.000775404Z"",""thread_name"":""scheduled-executor-thread-3"",""@version"":""7d55fddead285a289297dee992bea6066ca82676""}
{""@timestamp"":""2024-03-25T15:30:00.000885448Z"",""logger_name"":""com.gopuff.consumer.referral.util.ReciprocalCouponTask"",""level"":""INFO"",""message"":""Running in POD:referral-846674f549-2694g reciprocal assignment task every 30 minutes, M-F: 2024-03-25T15:30:00.000841249Z"",""thread_name"":""scheduled-executor-thread-3"",""@version"":""7d55fddead285a289297dee992bea6066ca82676""}
{""@timestamp"":""2024-03-25T16:00:00.000829936Z"",""logger_name"":""com.gopuff.consumer.referral.util.ReciprocalCouponTask"",""level"":""INFO"",""message"":""Running in POD:referral-846674f549-2694g reciprocal assignment task every 30 minutes, M-F: 2024-03-25T16:00:00.000788036Z"",""thread_name"":""scheduled-executor-thread-2"",""@version"":""7d55fddead285a289297dee992bea6066ca82676""}


POD B LOG

{""@timestamp"":""2024-03-25T15:00:00.00515198Z"",""logger_name"":""com.gopuff.consumer.referral.util.ReciprocalCouponTask"",""level"":""INFO"",""message"":""Running in POD:referral-846674f549-8mkxd reciprocal assignment task every 30 minutes, M-F: 2024-03-25T15:00:00.004887163Z"",""thread_name"":""scheduled-executor-thread-2"",""@version"":""7d55fddead285a289297dee992bea6066ca82676""}
{""@timestamp"":""2024-03-25T15:30:00.000802812Z"",""logger_name"":""com.gopuff.consumer.referral.util.ReciprocalCouponTask"",""level"":""INFO"",""message"":""Running in POD:referral-846674f549-8mkxd reciprocal assignment task every 30 minutes, M-F: 2024-03-25T15:30:00.000612200Z"",""thread_name"":""scheduled-executor-thread-2"",""@version"":""7d55fddead285a289297dee992bea6066ca82676""}
{""@timestamp"":""2024-03-25T16:00:00.000709425Z"",""logger_name"":""com.gopuff.consumer.referral.util.ReciprocalCouponTask"",""level"":""INFO"",""message"":""Running in POD:referral-846674f549-8mkxd reciprocal assignment task every 30 minutes, M-F: 2024-03-25T16:00:00.000602218Z"",""thread_name"":""scheduled-executor-thread-1"",""@version"":""7d55fddead285a289297dee992bea6066ca82676""}"
T6XHhe80,zad 1,desislava_shunina,C++,Monday 25th of March 2024 10:39:30 AM CDT,"#include <fstream>
#include <iomanip>
#include <iostream>
#include <sstream>
#pragma warning(disable : 4996)
using std::cout;

namespace GlobalConstants
{
const uint16_t MAX_CELL_SIZE = 50 + 1; // for the terminating zero
const uint16_t MAX_CELLS_IN_ROW = 30;
const uint16_t MAX_ROWS_IN_TABLE = 300;
const char TABLE_TAG[] = ""table"";
const char ROW_TAG[] = ""tr"";
const char CELL_TAG[] = ""td"";
const char HEADER_TAG[] = ""th"";
const char BEGIN_TAG = '<';
const char END_TAG = '>';
const char CLOSE_TAG = '/';
const char HEADER_SYMBOL = '*';
const char EMPTY_SPACE = ' ';
const char CHARACTER_ENTITY[] = ""&#"";
const uint16_t BUFFER_SIZE = 1024;
const uint8_t MAX_TAG_SIZE = 64;

} // namespace GlobalConstants

using namespace GlobalConstants;

enum class Direction : int8_t
{
    UP = 1,
    DOWN = -1,
    UNKNOWN = 0
};

void characterEntityConvert(char *str)
{
    if (!str)
        return;

    std::stringstream ss(str);

    uint16_t indx = 0;
    char ch;
    uint16_t chConverted;

    while (true)
    {
        ch = ss.get();
        if (ss.eof())
            break;

        if (ch == CHARACTER_ENTITY[0] && ss.peek() == CHARACTER_ENTITY[1])
        {
            ss.ignore();                     // ignore the the second symbol (#)
            ss >> chConverted;               // get the asci code as int
            str[indx++] = (char)chConverted; // put the char in the new string
            continue;
        }
        str[indx++] = ch; // copy the current char in the new string
    }
    str[indx] = '\0'; // end the string
}

struct Cell
{
    char cell[MAX_CELL_SIZE] = {};
    bool isHeader = false;

    uint16_t getCellStrLength() const
    {
        return strlen(cell) + 2; // adding 2 spaces on both ends of table
    }
    void printCell(uint16_t allignement) const
    {
        cout << '|';

        if (isHeader)
            cout << HEADER_SYMBOL << cell << std::setw(allignement - strlen(cell) - 1) << HEADER_SYMBOL;
        else
            cout << EMPTY_SPACE << cell << std::setw(allignement - strlen(cell) - 1) << EMPTY_SPACE;
    }
};

class Row
{
  private:
    Cell cells[MAX_CELLS_IN_ROW] = {};
    uint16_t cellsCount = 0;

  public:
    const Cell *getCells() const
    {
        return cells;
    }
    uint16_t getCellsCount() const
    {
        return cellsCount;
    }

    Row(const Cell *_cells, uint16_t _cellsCount)
    {
        if (!_cells)
            return;

        for (uint16_t i = 0; i < _cellsCount; i++)
            cells[i] = _cells[i];

        cellsCount = _cellsCount;
    }
    Row()
    {
        cellsCount = 0;
    }

    bool modifyCell(uint16_t index, const char *newValue)
    {
        if (!newValue || index >= cellsCount || strlen(newValue) >= MAX_CELL_SIZE)
            return false;

        strcpy(cells[index].cell, newValue);
        return true;
    }
    bool addCellAtBack(const char *value, bool _isHeader)
    {
        if (!value || cellsCount >= MAX_CELLS_IN_ROW || strlen(value) >= MAX_CELL_SIZE)
            return false;

        strcpy(cells[cellsCount].cell, value);
        cells[cellsCount++].isHeader = _isHeader;
        return true;
    }
};

class Table
{
  private:
    Row rows[MAX_ROWS_IN_TABLE] = {};
    uint16_t rowsCount = 0;
    bool isGood = true;

    void shiftRowsDown(uint16_t from)
    {
        for (int16_t i = rowsCount; i > from; i--)
        {
            rows[i] = rows[i - 1];
        }
        rows[from] = {}; // empty the new opened row
        rowsCount++;
    }
    void shiftRowsUp(uint16_t from)
    {
        for (int16_t i = from; i < rowsCount - 1; i++)
        {
            rows[i] = rows[i + 1];
        }
        rows[rowsCount--] = {}; // empty the new opened row at the bottom
    }
    void shiftRows(uint16_t from, Direction dir)
    {
        if (dir == Direction::DOWN)
            shiftRowsDown(from);
        if (dir == Direction::UP)
            shiftRowsUp(from);
    }
    bool getNextTag(char *dest, std::ifstream &ifs) const
    {
        if (!dest || !ifs.good())
            return false;

        while (true)
        {
            char ch = ifs.get();
            if (ch == BEGIN_TAG)
            {
                ifs.getline(dest, MAX_TAG_SIZE, END_TAG);
                return true;
            }
            if (ifs.eof())
                return false;
        }
    }
    bool readNextCell(std::ifstream &ifs, bool isHeader)
    {
        char buff[MAX_CELL_SIZE];
        ifs.get(buff, MAX_CELL_SIZE, '<'); // failbit when trying to read empty string
        ifs.clear();
        characterEntityConvert(buff);
        rows[rowsCount].addCellAtBack(buff, isHeader);
        ifs.getline(buff, MAX_CELL_SIZE, '>');
        return true;
    }
    bool readNextRow(std::ifstream &ifs)
    {
        while (true)
        {
            char tag[MAX_TAG_SIZE];
            if (!getNextTag(tag, ifs))
                return isGood = false;

            if (strcmp(tag, CELL_TAG) == 0) // for normal tag
            {
                readNextCell(ifs, false);
            }
            else if (strcmp(tag, HEADER_TAG) == 0) // for header tag
            {
                readNextCell(ifs, true);
            }
            else // if the tag is the closing tag , may be better if we do a correctness check
            {
                rowsCount++;
                return true;
            }
        }
    }
    void calcColsAlignement(uint16_t colsCount, uint16_t *colsAlignement) const
    {
        for (uint16_t i = 0; i < colsCount; i++)
        {
            colsAlignement[i] = 0;
            for (uint16_t j = 0; j < rowsCount; j++)
            {
                if (rows[j].getCells()[i].getCellStrLength() > colsAlignement[i])
                    colsAlignement[i] = rows[j].getCells()[i].getCellStrLength();
            }
        }
    }

  public:
    const Row *getRows() const
    {
        return rows;
    }
    uint16_t getRowsCount() const
    {
        return rowsCount;
    }
    uint16_t countCols() const
    {
        uint16_t res = 0;

        for (size_t i = 0; i < rowsCount; i++)
        {
            if (rows[i].getCellsCount() > res)
                res = rows[i].getCellsCount();
        }
        return res;
    }
    bool isOk() const
    {
        return isGood;
    }
    void print() const
    {
        uint16_t colsCount = this->countCols();
        uint16_t *colsAlignement = new uint16_t[colsCount];
        this->calcColsAlignement(colsCount, colsAlignement);

        for (uint16_t i = 0; i < rowsCount; i++)
        {
            for (uint16_t j = 0; j < colsCount; j++)
            {
                rows[i].getCells()[j].printCell(colsAlignement[j]);
            }
            cout << ""|\n"";
        }

        delete[] colsAlignement;
    }

    bool edit(uint16_t row, uint16_t col, const char *newValue)
    {
        // index for users starts from 1
        row--;
        col--;

        if (row >= rowsCount || col >= rows[row].getCellsCount() || !newValue)
            return false;

        rows[row].modifyCell(col, newValue);
        return true;
    }
    bool add(uint16_t rowIndex, const Row &newRow)
    {
        rowIndex--; // index for users starts from 1

        if (rowIndex >= MAX_ROWS_IN_TABLE)
            return false;

        shiftRows(rowIndex, Direction::DOWN);
        rows[rowIndex] = newRow;
        return true;
    }
    bool remove(uint16_t row)
    {
        row--; // index for users starts from 1
        if (row > rowsCount)
            return false;

        shiftRows(row, Direction::UP); // using the advantage that the user inputs the rows starting from index 1...
        return true;
    }

    Table(const char *fileName)
    {
        if (!fileName)
        {
            isGood = false;
            return;
        }

        std::ifstream ifs(fileName);
        if (!ifs.is_open())
        {
            isGood = false;
            return;
        }

        while (true)
        {
            char tag[MAX_TAG_SIZE];
            if (!getNextTag(tag, ifs))
                return;

            if (strcmp(tag, ROW_TAG) == 0)
            {
                if (!readNextRow(ifs))
                {
                    isGood = false;
                    return;
                }
            }
        }
    }
    Table()
    {
    }
};

int main()
{
    char filePath[BUFFER_SIZE];
    std::cin >> filePath;
    Table t(filePath);
    t.print();
    // cout << ""\n"";
    // Cell cells[5] = {{""baba"", true}, {""dedo"", false}, {""Az"", true}, {""zashto tochno az"", true}, {""1232432"", false}};
    // Row r(cells, 5);
    // t.add(5, r);
    // t.print();
    //  cout << ""\n"";
    //  t.remove(1);
    //  t.print();
}
"
nPtzu9LY,USB wifi adapter,plirof2,JavaScript,Monday 25th of March 2024 10:38:01 AM CDT,"This behavior can happen because some USB wifi adapters have a built-in storage functionality that appears as a USB drive when connected to the computer. 

To switch between wifi and drive mode, you can use the `usb_modeswitch` command. This command is used to switch USB devices like modems, webcams, and wifi adapters between modes. 

First, you need to install the `usb_modeswitch` package if it's not already installed on your Linux system. You can do this by running the following command:

```
sudo apt-get install usb-modeswitch
```

Once the package is installed, you can use the `usb_modeswitch` command to switch your USB wifi adapter from storage mode to wifi mode. For example, you can use the following command to switch the adapter with the ID `1234:5678` to wifi mode:

```
sudo usb_modeswitch -v 1234 -p 5678
```

After running this command, your USB wifi adapter should switch to wifi mode and be recognized as a wifi card instead of a USB drive."
weFDG45Q,zad 2,desislava_shunina,C++,Monday 25th of March 2024 10:37:37 AM CDT,"#include <fstream>
#include <iomanip>
#include <iostream>

#pragma warning(disable : 4996)
using std::cout;

namespace GlobalConstants
{
const uint16_t MAX_SONGNAME_LENGTH = 64;
const uint16_t MAX_SONG_CONTENT_LENGTH_BYTES = 256;
const uint16_t MAX_SONGS_IN_PLAYLIST = 30;
const uint16_t MINUTES_IN_HOUR = 60;
const uint16_t SECONDS_IN_MINUTE = 60;
const uint16_t BUFFER_SIZE = 100;
const uint16_t BITS_IN_BYTE = 8;
} // namespace GlobalConstants
namespace HelpingFunctions
{
char myToLower(char ch)
{
    if (!(ch >= 'A' && ch <= 'Z'))
        return ch;

    return ch - ('A' - 'a');
}

int myMin(int a, int b)
{
    return a < b ? a : b;
}

int32_t bytesInFile(std::ifstream &ifs)
{
    if (!ifs.is_open())
        return -1;

    int32_t curPos = ifs.tellg();
    ifs.seekg(0, std::ios::end);

    int32_t endIndex = ifs.tellg();

    ifs.seekg(curPos);

    return endIndex;
}

int32_t bytesInFile(const char *fileName)
{
    if (!fileName)
        return -2; // error code

    std::ifstream ifs(fileName, std::ios::binary);
    if (!ifs.is_open())
        return -1; // error code

    int res = bytesInFile(ifs);
    ifs.close();

    return res;
}

void setBit(char &ch, uint16_t position) // indexing from 0...7
{
    if (position > 7)
        return;
    ch |= (1 << (GlobalConstants::BITS_IN_BYTE - position - 1)); // starting from left to right
}

void printBits(char ch)
{
    for (int16_t i = (GlobalConstants::BITS_IN_BYTE - 1); i >= 0; i--)
    {
        cout << (bool)(ch & (1 << i));
    }
}

void copyCharArr(char *dest, const char *source, size_t length)
{
    if (!source || !dest)
        return;
    for (size_t i = 0; i < length; i++)
    {
        dest[i] = source[i];
    }
}

} // namespace HelpingFunctions
namespace GenreInterface
{
enum class Genre : unsigned char
{
    ROCK = 1 << 0,
    POP = 1 << 1,
    HIP_HOP = 1 << 2,
    ELECTRO = 1 << 3,
    JAZZ = 1 << 4,
    UNKNOWN = 0
};
const char *getStringRepresentation(Genre genre)
{
    char buff[GlobalConstants::BUFFER_SIZE] = {};
    if (!(int)genre)
    {
        strcat(buff, ""&Unknown"");
    }
    else
    {
        if ((int)genre & (int)Genre::ROCK)
            strcat(buff, ""&Rock"");
        if ((int)genre & (int)Genre::POP)
            strcat(buff, ""&Pop"");
        if ((int)genre & (int)Genre::HIP_HOP)
            strcat(buff, ""&Hip-Hop"");
        if ((int)genre & (int)Genre::ELECTRO)
            strcat(buff, ""&Electronic"");
        if ((int)genre & (int)Genre::JAZZ)
            strcat(buff, ""&Jazz"");
    }

    char *res = new char[strlen(buff)]; // without the first & symbol

    strcpy(res, &buff[1]);

    return res;
}
Genre getGenreFromChar(char ch)
{

    switch (HelpingFunctions::myToLower(ch))
    {
    case 'r':
        return Genre::ROCK;
    case 'p':
        return Genre::POP;
    case 'h':
        return Genre::HIP_HOP;
    case 'e':
        return Genre::ELECTRO;
    case 'j':
        return Genre::JAZZ;
    default:
        return Genre::UNKNOWN;
    }
}
} // namespace GenreInterface

using namespace GlobalConstants;
using namespace GenreInterface;
using namespace HelpingFunctions;

typedef char byte;

class Time
{
  private:
    uint32_t seconds = 0;

    uint32_t getTotalMinutes() const
    {
        return seconds / SECONDS_IN_MINUTE;
    }
    uint32_t getTotalSeconds() const
    {
        return seconds;
    }

  public:
    Time()
    {
        seconds = 0;
    }
    Time(uint32_t hours, uint16_t minutes, uint16_t seconds)
    {
        this->setHours(hours);
        this->setMinutes(minutes);
        this->setSeconds(seconds);
    }

    void setSeconds(uint16_t _seconds)
    {
        seconds = seconds - this->getSeconds() + _seconds;
    }
    void setMinutes(uint16_t minutes)
    {
        seconds = seconds - this->getMinutes() * SECONDS_IN_MINUTE + minutes * SECONDS_IN_MINUTE;
    }
    void setHours(uint32_t hours)
    {
        seconds = seconds - this->getHours() * MINUTES_IN_HOUR * SECONDS_IN_MINUTE +
                  hours * MINUTES_IN_HOUR * SECONDS_IN_MINUTE;
    }

    uint16_t getMinutes() const
    {
        return this->getTotalMinutes() % MINUTES_IN_HOUR;
    }
    uint16_t getSeconds() const
    {
        return seconds % SECONDS_IN_MINUTE;
    }
    uint32_t getHours() const
    {
        return this->getTotalMinutes() / MINUTES_IN_HOUR;
    }

    void print() const
    {
        uint32_t hours_ = this->getHours();
        uint16_t minutes_ = this->getMinutes(), seconds_ = this->getSeconds();

        // printing with leading zeros if needed
        cout << std::setw(2) << std::setfill('0') << hours_ << ':' << std::setw(2) << std::setfill('0') << minutes_
             << ':' << std::setw(2) << std::setfill('0') << getSeconds();
    }
};

class Melody
{
  private:
    byte content[MAX_SONG_CONTENT_LENGTH_BYTES] = {};
    uint16_t length = 0; // in bytes
    bool isGood = true;

  public:
    Melody()
    {
        length = 0;
        isGood = this->setContent("""", 0);
    }
    Melody(const byte *_content, uint16_t _length)
    {
        isGood = this->setContent(_content, _length);
    }

    const byte *getContent() const
    {
        return content;
    }
    uint16_t getLength() const
    {
        return length;
    }
    bool isOK() const
    {
        return isGood;
    }

    bool setContent(const byte *_content, uint16_t _length)
    {
        if (_length > MAX_SONG_CONTENT_LENGTH_BYTES || !content)
            return false;

        copyCharArr(content, _content, _length);
        length = _length;
        return true;
    }

    void changeRhythm(uint16_t tactInterval)
    {
        if (tactInterval == 0) // we want a positive step
            return;

        uint16_t curBit = tactInterval - 1; // counting is from 0
        while (curBit < MAX_SONG_CONTENT_LENGTH_BYTES * BITS_IN_BYTE)
        {
            setBit(content[curBit / BITS_IN_BYTE], curBit % BITS_IN_BYTE);
            curBit += tactInterval;
        }
    }
    void print() const
    {
        for (uint16_t i = 0; i < length; i++)
        {
            printBits(content[i]);
        }
    }
};

class Song
{
  private:
    char name[MAX_SONGNAME_LENGTH] = {};
    Time duration;
    Genre genre = Genre::UNKNOWN;
    Melody melody;
    bool isGood = true;

  public:
    Song()
    {
    }
    Song(const char *_name, const Time &_duration, Genre _genre, const Melody _melody)
    {
        if (!name)
        {
            isGood = false;
            return;
        }

        strcpy(name, _name);
        duration = _duration;
        genre = _genre;
        melody = _melody;
    }

    const char *getName() const
    {
        return name;
    }
    const Time &getDuration() const
    {
        return duration;
    }
    const Genre &getGenre() const
    {
        return genre;
    }
    const Melody &getMelody() const
    {
        return melody;
    }
    bool isOK() const
    {
        return isGood;
    }

    void setName(const char *str)
    {
        if (!str)
        {
            isGood = false;
            return;
        }
        strcpy(name, str);
    }
    void setDuration(uint32_t hours, uint16_t minutes, uint16_t seconds)
    {
        duration.setHours(hours);
        duration.setMinutes(minutes);
        duration.setSeconds(seconds);
    }
    void setGenre(Genre _genre)
    {
        genre = _genre;
    }
    void setMelody(Melody _melody)
    {
        melody = _melody;
    }

    void changeRhythm(uint16_t tactInterval)
    {
        melody.changeRhythm(tactInterval);
    }
    void save(const char *destName) const
    {
        if (!destName)
            return;

        std::ofstream ofs(destName, std::ios::binary);
        if (!ofs.is_open())
            return;
        ofs.write(this->getMelody().getContent(), sizeof(byte) * this->getMelody().getLength());
        ofs.close();
    }

    void print() const
    {
        cout << name << "", "";
        duration.print();
        const char *temp_str = getStringRepresentation(genre);
        cout << "", "" << temp_str;
        delete[] temp_str;
    }
};

class Playlist
{
  private:
    uint16_t songsCount = 0;
    Song songs[MAX_SONGS_IN_PLAYLIST];
    // uint16_t songsCount[]; // we could fill the padding to save memory

  public:
    uint16_t getSongsCount() const
    {
        return songsCount;
    }
    const Song *getSongs() const
    {
        return songs;
    }

    bool add(const char *songName, unsigned hours, unsigned minutes, unsigned seconds, const char *genre,
             const char *sourceFile)
    {
        if (songsCount >= MAX_SONGS_IN_PLAYLIST)
            return false;

        if (!songName || !sourceFile || !genre)
            return false;

        std::ifstream ifs(sourceFile, std::ios::binary);

        if (!ifs.is_open())
            return false;

        songs[songsCount].setName(songName);                    // init name
        songs[songsCount].setDuration(hours, minutes, seconds); // init duration

        byte buff[MAX_SONG_CONTENT_LENGTH_BYTES];
        ifs.read(buff, sizeof(buff)); // read content
        ifs.clear();
        uint16_t newMelodyLength = bytesInFile(ifs);
        ifs.close();
        if (newMelodyLength >= MAX_SONG_CONTENT_LENGTH_BYTES || newMelodyLength == -1)
            return false;
        Melody newMelody(buff, newMelodyLength);
        songs[songsCount].setMelody(newMelody); // init melody

        Genre newGenre = Genre::UNKNOWN;
        while (*genre) // init genre
            newGenre = (Genre)((unsigned char)newGenre |
                               (unsigned char)getGenreFromChar(*(genre++))); // get all Genre configuration

        songs[songsCount].setGenre(newGenre);

        songsCount++;
        return true;
    }
    void print() const
    {
        for (uint16_t i = 0; i < songsCount; i++)
        {
            songs[i].print();
            cout << std::endl;
        }
    }
    int16_t find(const char *name) const
    {
        if (!name)
            return -2;
        for (uint16_t i = 0; i < songsCount; i++)
        {
            if (strcmp(name, songs[i].getName()) == 0)
            {
                // songs[i].print();
                return i;
            }
        }
        return -1; // not found
    }
    void findGenre(char ch) const
    {
        for (uint16_t i = 0; i < songsCount; i++)
        {
            if ((unsigned char)songs[i].getGenre() & (unsigned char)getGenreFromChar(ch)) // if they have common Genres
            {
                songs[i].print();
                cout << std::endl;
            }
        }
    }
    void selectionSortByComparator(bool (*isLess)(const Song &, const Song &))
    {

        for (uint16_t i = 0; i < songsCount - 1; i++)
        {
            uint16_t minElIndex = i;
            for (uint16_t j = i + 1; j < songsCount; j++)
            {
                if (isLess(songs[j], songs[minElIndex]))
                {
                    minElIndex = j;
                }
            }
            if (minElIndex != i)
                std::swap(songs[i], songs[minElIndex]);
        }
    }
    void sortByName()
    {
        selectionSortByComparator(
            [](const Song &first, const Song &second) { return strcmp(first.getName(), second.getName()) < 0; });
    }
    void sortByDuration()
    {
        selectionSortByComparator([](const Song &first, const Song &second) {
            return first.getDuration().getSeconds() < second.getDuration().getSeconds();
        });
    }
    void save(const char *songName, const char *destName) const
    {
        if (!songName || !destName)
            return;

        int16_t songIndex = this->find(songName);
        if (songIndex == -1)
            return; // not found

        std::ofstream ofs(destName, std::ios::binary);
        if (!ofs.is_open())
            return;

        ofs.write(songs[songIndex].getMelody().getContent(), sizeof(byte) * songs[songIndex].getMelody().getLength());
        ofs.close();
    }
    void mix(const char *song1Name, const char *song2Name)
    {
        if (!song1Name || !song2Name)
            return;

        uint16_t song1Index = this->find(song1Name);
        uint16_t song2Index = this->find(song2Name);
        if (song1Index == -1 || song2Index == -1)
            return; // song not found
        uint16_t minLengthOfMelody =
            myMin(songs[song1Index].getMelody().getLength(), songs[song2Index].getMelody().getLength());

        byte newContent[BUFFER_SIZE];
        for (uint16_t i = 0; i < minLengthOfMelody; i++)
        {
            newContent[i] =
                songs[song1Index].getMelody().getContent()[i] ^ songs[song2Index].getMelody().getContent()[i];
        }
        Melody newMelody(newContent, songs[song1Index].getMelody().getLength());
        songs[song1Index].setMelody(newMelody);
    }
};

int main()
{
    // Playlist p;
    // p.add(""Song 2"", 0, 1, 55, ""rp"", ""song2.txt"");
    // p.add(""Song 1"", 0, 1, 5, ""p"", ""song1.txt"");
    //  p.add(""A1"", 0, 1, 5, ""p"", ""song1.txt"");

    // p.print();
    //  p.getSongs()[p.find(""Song 1"")].print();
    // p.findGenre('p');
    // p.findGenre('r');
    // p.sortByName();
    // p.sortByDuration();
    // p.print();
    // p.save(""Song 2"", ""test.txt"");
    // p.mix(""Song 1"", ""Song 2"");

    // p.save(""Song 1"", ""test2.txt"");
    // Song my = p.getSongs()[p.find(""Song 2"")];
    // Melody m(""\0\0"", 2);
    // my.setMelody(m);
    // my.changeRhythm(3);
    // my.getMelody().print();
}
"
9TYmprGR,Validation of password 2,horozov86,Python,Monday 25th of March 2024 10:17:08 AM CDT,"def validate_password(password):
    if len(password) < 6:
        raise ValidationError(_(""Password must be at least 6 characters long.""))

    has_letter = False
    has_digit = False
    has_underscore = False

    for char in password:
        if char.isalpha():
            has_letter = True
        elif char.isdigit():
            has_digit = True
        elif char == '_':
            has_underscore = True

    if not has_letter:
        raise ValidationError(_(""Password must contain at least one letter.""))
    
    if not has_digit:
        raise ValidationError(_(""Password must contain at least one digit.""))
    
    if not has_underscore:
        raise ValidationError(_(""Password must contain at least one underscore.""))
"
0DdPKu7i,Validation of password,horozov86,Python,Monday 25th of March 2024 10:12:49 AM CDT,"from django.core.exceptions import ValidationError
from django.db import models
from django.utils.translation import gettext_lazy as _
from django.contrib.auth.models import AbstractBaseUser, PermissionsMixin
from django.utils import timezone

from my_holiday.accounts.managers import MyHolidayUserManager

def validate_password(password):
    if len(password) < 6:
        raise ValidationError(_(""Password must be at least 6 characters long.""))
    
    has_letter = any(char.isalpha() for char in password)
    if not has_letter:
        raise ValidationError(_(""Password must contain at least one letter.""))
    
    has_digit = any(char.isdigit() for char in password)
    if not has_digit:
        raise ValidationError(_(""Password must contain at least one digit.""))
    
    has_underscore = '_' in password
    if not has_underscore:
        raise ValidationError(_(""Password must contain at least one underscore.""))

class MyHolidayUser(AbstractBaseUser, PermissionsMixin):
    email = models.EmailField(
        _(""email address""),
        unique=True,
        error_messages={
            ""unique"": _(""A user with that email already exists.""),
        },
    )

    date_joined = models.DateTimeField(_(""date joined""), default=timezone.now)

    is_staff = models.BooleanField(
        default=False,
    )

    is_active = models.BooleanField(
        default=True,
    )

    USERNAME_FIELD = ""email""

    objects = MyHolidayUserManager()

    def save(self, *args, **kwargs):
        validate_password(self.password)
        super().save(*args, **kwargs)

    def __str__(self):
        return self.email

class Profile(models.Model):
    MAX_LENGTH_FIRST_NAME = 50
    MAX_LENGTH_LAST_NAME = 50

    first_name = models.CharField(
        max_length=MAX_LENGTH_FIRST_NAME,
        null=True,
        blank=True,
        verbose_name='First Name',
    )

    last_name = models.CharField(
        max_length=MAX_LENGTH_LAST_NAME,
        null=True,
        blank=True,
        verbose_name='Last Name',
    )

    age = models.IntegerField(
        null=True,
        blank=True,
        verbose_name='Age',
    )

    profile_photo = models.URLField(
        null=True,
        blank=True,
        verbose_name='Profile Photo',
    )

    user = models.OneToOneField(
        MyHolidayUser,
        primary_key=True,
        on_delete=models.CASCADE,
    )
"
KbPNhrRT,Untitled,ILyaCyclone,Java,Monday 25th of March 2024 09:54:25 AM CDT,"List<String> actual = new CopyOnWriteArrayList<>();
ExecutorService service = Executors.newSingleThreadExecutor();
Future<?> consumingTask = service.submit(() -> {
  while (!Thread.currentThread().isInterrupted()) {
    ConsumerRecords<String, String> records =
      consumer.poll(Duration.ofMillis(100));
    for (ConsumerRecord<String, String> rec : records) {
      actual.add(rec.value());
    }
  }
});

...

try {
  Awaitility.await().atMost(5, Seconds)
    .until(() -> List.of(""A"", ""B"").equals(actual));
} finally {
  consumingTask.cancel(true);
  service.awaitTermintion(200, MILLISECONDS);
}"
zycqkEwn,DATABASE,AlphaPenguino,MySQL,Monday 25th of March 2024 09:52:50 AM CDT,"CREATE TABLE StudentInfo (
    StudentID VARCHAR(3) PRIMARY KEY,
    LastName VARCHAR(45),
    FirstName VARCHAR(45),
    ProgramCode VARCHAR(45),
    ProgramDesc VARCHAR(255)
);

CREATE TABLE EmployeeInfo (
    LogID INT PRIMARY KEY,
    EmployeeID VARCHAR(6),
    LogDate VARCHAR(8),
    EmpName VARCHAR(255)
    
    
);

CREATE TABLE EmployeeDtr (
    EmployeeID VARCHAR(6),
    EmpName VARCHAR(255),
    LogID INT,
    LogDate VARCHAR(8),
    TimeRecID INT,
    TIn VARCHAR(5),
    TOut VARCHAR(5),
    PRIMARY KEY (EmployeeID, LogID)
);

INSERT INTO StudentInfo (StudentID, LastName, FirstName, ProgramCode, ProgramDesc)
VALUES 
('001', 'Cruz', 'Juan', 'BSCS', 'BS in Computer Science'),
('002', 'Perez', 'Henry', 'BSBA', 'BS in Business Administration'),
('003', 'Albuena', 'Andy', 'BSHRM', 'BS in Hotel and Restaurant Management'),
('004', 'Peralta', 'Vincent', 'BSED', 'BS in Education');

INSERT INTO EmployeeInfo (LogID, EmployeeID, LogDate, EmpName)
VALUES 
(1, '01-054', '11-09-11', 'Jerry Mendoza'),
(2, '01-056', '11-10-11', 'Dane Sevilla'),
(3, '01-054', '11-11-11', 'Jerry Mendoza');

INSERT INTO EmployeeDtr (EmployeeID, EmpName, LogID, LogDate, TimeRecID, TIn, TOut)
VALUES 
('01-054', 'Jerry Mendoza', 1, '11-09-11', 1, '09:00', '18:03'),
('01-054', 'Jerry Mendoza', 3, '11-10-11', 1, '09:00', '18:03'),
('01-055', 'Dane Sevilla', 0, NULL, NULL, NULL, NULL),
('01-056', 'Mylene Antonia', 2, '11-09-11', 2, '7:30', '16:55');

"
AvcEymKx,„É¨„Éó„É©„Ç≥„Éº„É≥ „Çπ„Ç≠„É´ÊúâÂäπÂåñ (8000„ÉÄ„É°„Éº„Ç∏),Riremito,Java,Monday 25th of March 2024 09:52:46 AM CDT,"            stats.setHp(MapleDataTool.getIntConvert(""maxHP"", monsterInfoData));
            if (mid == 9400583 || mid == 9400584) {
                int mp = 0;
                mp = MapleDataTool.getIntConvert(""maxMP"", monsterInfoData, 0);
                Debug.DebugLog(""MobID = "" + mid + "", MP = "" + mp);
                stats.setMp(30000);
            } else {
                stats.setMp(MapleDataTool.getIntConvert(""maxMP"", monsterInfoData, 0));
            }"
ne5yU29N,NuevoUser,vvoland,C#,Monday 25th of March 2024 09:06:00 AM CDT,"
Crear un nuevo administrador y luego usar esa cuenta para restablecer las contrase√±as de los dem√°s usuarios es definitivamente una estrategia viable, especialmente si necesitas inicializar todo el sistema. Este enfoque te permitir√≠a mantener la integridad de la estructura de la base de datos y la consistencia de las relaciones entre las tablas. Ahora, respecto a tus preguntas:

Uso de la Herramienta de Administraci√≥n de ASP.NET
La Herramienta de Administraci√≥n de Sitios Web de ASP.NET, tambi√©n conocida como ASP.NET Web Site Administration Tool, fue una caracter√≠stica de versiones anteriores de Visual Studio (hasta Visual Studio 2010) que permit√≠a administrar usuarios, roles y pol√≠ticas de acceso. Sin embargo, en versiones m√°s recientes de Visual Studio, esta herramienta ya no est√° incluida directamente.

Para versiones m√°s recientes de ASP.NET y Visual Studio, se recomienda gestionar usuarios y roles a trav√©s del c√≥digo, utilizando la API de Membership, o mediante el uso de herramientas de administraci√≥n de bases de datos para interactuar directamente con las tablas de Membership en tu base de datos.

D√≥nde Colocar el C√≥digo Utilizando la API de Membership
La decisi√≥n entre agregar el c√≥digo a tu proyecto existente o crear un nuevo proyecto de consola depende de tu situaci√≥n espec√≠fica:

Modificar el Proyecto Existente: Si el proyecto ya est√° configurado para usar Membership y tienes un lugar adecuado para ejecutar el c√≥digo (por ejemplo, un controlador en una aplicaci√≥n web ASP.NET), podr√≠as agregar el c√≥digo ah√≠ temporalmente. Esto tiene la ventaja de utilizar directamente la configuraci√≥n existente sin necesidad de configuraci√≥n adicional.

Crear un Proyecto de Consola: Si prefieres no modificar el proyecto existente o si el proyecto no se est√° ejecutando en un estado que permita agregar f√°cilmente y ejecutar el c√≥digo, crear un nuevo proyecto de consola es una buena opci√≥n. Esto te permite ejecutar operaciones de administraci√≥n de usuarios sin interferir con el proyecto principal.

Creando un Proyecto de Consola para Administrar Usuarios
Para crear un nuevo proyecto de consola que utilice la API de Membership de ASP.NET, sigue estos pasos:

Crea un Nuevo Proyecto de Consola en Visual Studio:

Selecciona ""Archivo"" > ""Nuevo"" > ""Proyecto..."".
Busca ""Consola"" y elige ""Aplicaci√≥n de consola (.NET Framework)"".
Aseg√∫rate de seleccionar una versi√≥n del framework que sea compatible con la API de Membership (por ejemplo, .NET Framework 4.8).
Agrega las Referencias Necesarias:

Necesitar√°s agregar referencias a System.Web y posiblemente a otros ensamblados relevantes para usar Membership.
Configura la Cadena de Conexi√≥n:

En el archivo App.config de tu proyecto de consola, aseg√∫rate de incluir la cadena de conexi√≥n a tu base de datos y la configuraci√≥n del proveedor de Membership, similar a como estar√≠an configurados en el web.config de una aplicaci√≥n web ASP.NET.
Escribe el C√≥digo para Administrar Usuarios:

Ahora puedes agregar el c√≥digo que te proporcion√© anteriormente para crear un nuevo usuario administrador o restablecer contrase√±as.
Ejecuta tu Proyecto de Consola:

Compila y ejecuta el proyecto de consola. Esto deber√≠a permitirte realizar las operaciones de administraci√≥n de usuarios seg√∫n lo necesites.

===========================================================================================

Usando la API de Membership de ASP.NET
Si tu aplicaci√≥n todav√≠a est√° funcionando y puedes ejecutar c√≥digo .NET dentro de su contexto (por ejemplo, a trav√©s de un controlador en una aplicaci√≥n web), puedes usar la API de Membership para cambiar la contrase√±a. Aqu√≠ tienes un ejemplo de c√≥mo hacerlo:

csharp
Copy code
using System.Web.Security;

// Aseg√∫rate de que el nombre de usuario es correcto
string username = ""nombreDelAdministrador""; // Cambia esto por el nombre de usuario real

// Obt√©n el usuario
MembershipUser user = Membership.GetUser(username);

if (user != null)
{
    // Genera una nueva contrase√±a, esto podr√≠a ser un valor fijo que conozcas
    string newPassword = ""nuevaContrase√±a!123""; // Establece una contrase√±a segura

    // Intenta restablecer la contrase√±a actual (si no conoces la actual, puedes omitir este paso)
    string resetPassword = user.ResetPassword();

    // Cambia la contrase√±a
    bool changePasswordSuccess = user.ChangePassword(resetPassword, newPassword);

    if (changePasswordSuccess)
    {
        Console.WriteLine(""La contrase√±a ha sido cambiada con √©xito."");
    }
    else
    {
        Console.WriteLine(""No se pudo cambiar la contrase√±a."");
    }
}
else
{
    Console.WriteLine(""Usuario no encontrado."");
}
Este c√≥digo asume que tienes acceso a la aplicaci√≥n y que la configuraci√≥n del Membership Provider est√° correctamente configurada en tu web.config.

Modificando Directamente la Base de Datos
Si no puedes acceder a la aplicaci√≥n (por ejemplo, si algunas partes est√°n rotas y no puedes ejecutar el c√≥digo), modificar directamente la base de datos es m√°s complicado debido al hashing y salting de las contrase√±as. Sin embargo, para casos extremos o de desarrollo, podr√≠as querer establecer una nueva contrase√±a directamente desde la base de datos. Este enfoque no es recomendable sin un buen entendimiento de c√≥mo tu aplicaci√≥n hash y salt las contrase√±as, ya que var√≠a seg√∫n la configuraci√≥n del Membership Provider.

Un enfoque m√°s seguro ser√≠a crear una peque√±a aplicaci√≥n o script que utilice la misma l√≥gica y configuraci√≥n de Membership Provider que tu aplicaci√≥n original para hash y salt nuevas contrase√±as, y luego actualizar la base de datos con estos valores.


"
amdbMim4,snowybot,coinwalk,JavaScript,Monday 25th of March 2024 09:05:03 AM CDT,"var olsenest = parseFloat(document.getElementById('pct_balance').value);
var monkey = Number((olsenest/1000).toFixed(7));
var bolux = monkey;
var tens = (monkey*10);
var sevens = (monkey*6.9);
var eights = (monkey*7.9);
var feeble = ((Math.floor(olsenest/tens))*tens);
var olsen = parseFloat(feeble);
var awesome = parseFloat(feeble);
var whare = olsenest;
var upper = 6.9;
var downer = 2.9;
var belance = olsenest;
var fran = true;
var fart = 4;
 
 
function soiled(){
belance = document.getElementById('pct_balance').value;
feeble = ((Math.floor(belance/tens))*tens);
if (belance>(olsen+(bolux*upper))){
    bolux = bolux*2;
    upper = 4.9;
    downer = 4.9;
    olsen = parseFloat(belance);
}
if (belance<(olsen-(bolux*downer))){
    bolux = bolux*2;
    upper = 4.9;
    downer = 4.9;
    olsen = parseFloat(belance);
}
if ((((belance/30)-bolux)<=0)&&(belance<(feeble+sevens))){
    bolux = parseFloat(monkey);
    upper = 6.9;
    downer = 2.9;
    olsen = parseFloat(feeble);
}
if (belance>=(awesome+(tens*4))){
    monkey = parseFloat(Number((belance/1000).toFixed(7)));
    tens = ((parseFloat(monkey))*10);
    sevens = ((parseFloat(monkey))*6.9);
    eights = ((parseFloat(monkey))*7.9);
    bolux = parseFloat(monkey);
    upper = 6.9;
    downer = 2.9;
    olsen = parseFloat(feeble);
    awesome = parseFloat(feeble);
}
if (belance>=(14400)){
console.log(""winner winner chicken dinner"");
return;
}
var dog = ((belance-olsenest).toFixed(8));
console.log(""profit"");
console.log(dog);
$('#pct_chance').val(49.5);
$('#pct_bet').val(((bolux*1).toFixed(8)));
$('#a_lo').click();
setTimeout(() =>soiled(), 1);
}
soiled();"
Q8xdbDvT,Untitled,jwow22,Lua,Monday 25th of March 2024 08:56:40 AM CDT,"-------------------------------------------------------------
-- COMMANDS
-------------------------------------------------------------

local command = {}
command.new = function()
    local self = {}
    self.name = ""default""

    function self:execute()
        table.insert(Tu.commandStack, self)
        print(string.format(""execute: %s"", self.name))
    end

    function self:undo()
        print(string.format(""undo: %s"", self.name))
    end

    return self
end

-- command forward
local com_forward = {}
com_forward.new = function ()
    local self = command.new()
    self.name = ""forward""

    local super_execute = self.execute
    function self:execute()
        local valid = turtle.forward()
        if valid == false then
            return false
        end
        super_execute(self)
        return true
    end

    local super_undo = self.undo
    function self:undo()
        local valid = turtle.back()
        if valid == false then
            return false
        end
        super_undo(self)
        return true
    end

    return self
end

-- command back
local com_back = {}
com_back.new = function ()
    local self = command.new()
    self.name = ""back""

    local super_execute = self.execute
    function self:execute()
        local valid = turtle.back()
        if valid == false then
            return false
        end
        super_execute(self)
        return true
    end

    local super_undo = self.undo
    function self:undo()
        local valid = turtle.forward()
        if valid == false then
            return false
        end
        super_undo(self)
        return true
    end

    return self
end

-- command up
local com_up = {}
com_up.new = function ()
    local self = command.new()
    self.name = ""up""

    local super_execute = self.execute
    function self:execute()
        local valid = turtle.up()
        if valid == false then
            return false
        end
        super_execute(self)
        return true
    end

    local super_undo = self.undo
    function self:undo()
        local valid = turtle.down()
        if valid == false then
            return false
        end
        super_undo(self)
        return true
    end

    return self
end

-- command down
local com_down = {}
com_down.new = function ()
    local self = command.new()
    self.name = ""down""

    local super_execute = self.execute
    function self:execute()
        local valid = turtle.down()
        if valid == false then
            return false
        end
        super_execute(self)
        return true
    end

    local super_undo = self.undo
    function self:undo()
        local valid = turtle.up()
        if valid == false then
            return false
        end
        super_undo(self)
        return true
    end

    return self
end

-- command turnLeft
local com_turnLeft = {}
com_turnLeft.new = function ()
    local self = command.new()
    self.name = ""down""

    local super_execute = self.execute
    function self:execute()
        local valid = turtle.turnLeft()
        if valid == false then
            return false
        end
        super_execute(self)
        return true
    end

    local super_undo = self.undo
    function self:undo()
        local valid = turtle.turnRight()
        if valid == false then
            return false
        end
        super_undo(self)
        return true
    end

    return self
end

-- command turnRight
local com_turnRight = {}
com_turnRight.new = function ()
    local self = command.new()
    self.name = ""down""

    local super_execute = self.execute
    function self:execute()
        local valid = turtle.turnRight()
        if valid == false then
            return false
        end
        super_execute(self)
        return true
    end

    local super_undo = self.undo
    function self:undo()
        local valid = turtle.turnLeft()
        if valid == false then
            return false
        end
        super_undo(self)
        return true
    end

    return self
end


-------------------------------------------------------------
-- INSTANCE
-------------------------------------------------------------

-- instance
Tu = {}
Tu.active = false
Tu.updateTime = 1.0
Tu.elapsedTime = 0.0

-- commands
Tu.commandStack = {}
Tu.forward = com_forward.new()
Tu.back = com_back.new()
Tu.up = com_up.new()
Tu.down = com_down.new()
Tu.turnLeft = com_turnLeft.new()
Tu.turnRight = com_turnRight.new()

function Tu.undoStack()
    for i = 1, #Tu.commandStack, 1 do
        Tu.commandStack[i]:undo()
    end
end

function Tu.getLastCommand()
    if #Tu.commandStack == 0 then
        return nil
    end
    return Tu.commandStack[#Tu.commandStack]
end

function Tu.start()
    print(""start"")
    Tu.turnRight:execute()
    Tu.turnLeft:execute()
    for i = 1, 20, 1 do
        turtle.digDown()
        Tu.down:execute()
    end
    Tu.undoStack()
end

function Tu.update()
    if turtle.getFuelLevel() > 0 then
        
    end
end

Tu.start()
while Tu.active == true do
    Tu.elapsedTime = os.clock()

    if Tu.updateTime == 0.0 then
        Tu.update()
        return
    end

    local currentTime = Tu.elapsedTime % Tu.updateTime
    if currentTime == 0.0 then
        Tu.update()
    end
end"
KJUSU5mU,UniversalFragmentPBR,romanilyin,OpenGL Shading,Monday 25th of March 2024 08:47:41 AM CDT,"void PBR_float(float3 positionWS, half3 normalWS, half3 viewDirectionWS, half3 bakedGI, half3 albedo,
    half metallic, half3 specular, half smoothness, half occlusion, half3 emission, half alpha, out float3 Color)
{
    #if defined(SHADERGRAPH_PREVIEW)
    Color = float3(1, 1, 1);
    #else
    InputData inputData;
    inputData.positionWS = positionWS;
    inputData.normalWS = NormalizeNormalPerPixel(normalWS);
    inputData.viewDirectionWS = SafeNormalize(-viewDirectionWS);
    inputData.shadowCoord = half4(0, 0, 0, 0);
    inputData.fogCoord = 0;
    inputData.vertexLighting = half3(0, 0, 0);
    inputData.normalizedScreenSpaceUV = half2(0, 0);
    inputData.shadowMask = half4(0, 0, 0, 0);
    inputData.bakedGI = bakedGI;
    Color = UniversalFragmentPBR(inputData, albedo, metallic, specular, smoothness, occlusion, emission, alpha);
    #endif
}

void PBR_half(half3 positionWS, half3 normalWS, half3 viewDirectionWS, half3 bakedGI, half3 albedo,
    half metallic, half3 specular, half smoothness, half occlusion, half3 emission, half alpha, out half3 Color)
{
    #if defined(SHADERGRAPH_PREVIEW)
    Color = half3(1, 1, 1);
    #else
    InputData inputData;
    inputData.positionWS = positionWS;
    inputData.normalWS = NormalizeNormalPerPixel(normalWS);
    inputData.viewDirectionWS = SafeNormalize(-viewDirectionWS);
    inputData.shadowCoord = half4(0, 0, 0, 0);
    inputData.fogCoord = 0;
    inputData.vertexLighting = half3(0, 0, 0);
    inputData.normalizedScreenSpaceUV = half2(0, 0);
    inputData.shadowMask = half4(0, 0, 0, 0);
    inputData.bakedGI = bakedGI;
    Color = UniversalFragmentPBR(inputData, albedo, metallic, specular, smoothness, occlusion, emission, alpha);
    #endif
}

/*
struct InputData
{
    float3  positionWS;
    half3   normalWS;
    half3   viewDirectionWS;
    float4  shadowCoord;
    half    fogCoord;
    half3   vertexLighting;
    half3   bakedGI;
    float2  normalizedScreenSpaceUV;
    half4   shadowMask;
};
*/
"
XGSvYXLi,kill xorg v2,Jakowlew,C++,Monday 25th of March 2024 08:26:11 AM CDT,"bool Session::stopX()
    {
        spdlog::info(""stopx"");

        if (!m_X) {
            spdlog::info(""Xorg app is nullptr"");
            return false;   
        }

        const auto pgidOpt = m_X->pgid();
        if (!pgidOpt) {
            spdlog::info(""failed to get pgid for Xorg, some processes may persist after kill"");
            return m_X->kill();
        }
        const auto pgid = *pgidOpt; // pgid of app process

        spdlog::info(""search for xinit and xorg"");

        for (const auto xinit: pids_by_name(""xinit"")
            | views::filter(_1->*&Pids::pgid == pgid)
        ) {
            spdlog::info(""found xinit pid={} pgid={}"", xinit.pid, xinit.pgid);
            for (const auto xorg : pids_by_name(""Xorg"")
                | views::filter(_1->*&Pids::ppid == xinit.pid)
            ) {
                spdlog::info(""found Xorg pid={} pgid={}"", xorg.pid, xorg.pgid);
                if (kill(-xorg.pgid, SIGKILL) == -1) {
                    spdlog::warn(""failed to kill Xorg"");
                }
            }
        }

        return m_X->kill();
    }"
MTnAUUw3,Kill xorg v1,Jakowlew,C++,Monday 25th of March 2024 08:25:44 AM CDT,"bool Session::stopX()
    {
        if (!m_X) {
            spdlog::info(""!m_X"");
            return false;   
        }

        const auto pgidOpt = m_X->pgid();
        if (!pgidOpt) {
            spdlog::info(""pgid is empy for m_X"");
            return false; // TODO: kill at least m_X group
        }
        const auto pgid = *pgidOpt;
        spdlog::info(""current group is {}"", pgid);

        const auto pidsByName = [](std::string const & name) {
            PROCTAB *proc = openproc(PROC_FILLCOM | PROC_FILLSTATUS);
            proc_t procInfo{};

            struct process
            {
                int pid;
                int ppid;
            };

            std::vector<std::tuple<int, int>> pids;
            while (readproc(proc, &procInfo) != nullptr)
            {
                if (procInfo.cmdline && std::strstr(procInfo.cmdline[0], name.c_str()) != nullptr)
                {
                    const int pid = procInfo.tid != 0 ? procInfo.tid : procInfo.tgid;
                    const int ppid = procInfo.ppid;
                    // closeproc(proc);
                    pids.emplace_back(pid, ppid);
                    // procInfo.
                    spdlog::info(""found process {} with pid={} ppid={}"", procInfo.cmdline[0], pid, ppid);
                }
            }
            closeproc(proc);

            return pids;
        };

        auto xinitPids = pidsByName(""xinit"");
        decltype(xinitPids) xinitInThisGroup;
        std::copy_if(
            xinitPids.cbegin(),
            xinitPids.cend(),
            std::back_inserter(xinitInThisGroup),
            [=](auto pids) {
                const auto [pid, ppid] = pids;
                const auto xinitPgid = getpgid(pid);
                if (xinitPgid == -1) {
                    spdlog::warn(""getpgid failed for xinit (pid={})"", pid);
                    return false;
                }

                return xinitPgid == pgid;
            }
        );
        if (xinitInThisGroup.empty()) {
            spdlog::warn(""no xinit in pgid={}"", pgid);
            return false; // TODO: kill at least m_X group
        }
        if (xinitInThisGroup.size() > 1) {
            spdlog::warn(""more than on xinit with pgid={} found. only first will be processd"", pgid);
        }

        // We got xinit pid.
        // Now find Xorg proces with ppid=xinitPid and kill its process group
        const auto xinitPid = std::get<0>(xinitInThisGroup.front());
        spdlog::info(""found xinit (pid={}) with pgid={}"", xinitPid, pgid);

        auto xorgPids = pidsByName(""Xorg"");
        decltype(xorgPids) xorgChildrenOfXinit;
        std::copy_if(
            xorgPids.cbegin(),
            xorgPids.cend(),
            std::back_inserter(xorgChildrenOfXinit),
            [=](auto pids) {
                const auto [pid, ppid] = pids;
                return xinitPid == ppid;
            }
        );
        // TODO: Check for empy xorgs
        for (auto xorg : xorgChildrenOfXinit) {
            const auto [pid, ppid] = xorg;
            const auto xorgPgid = getpgid(pid);
            spdlog::info(""found Xorg (pid={}) with pgid={}"", pid, xorgPgid);
            if (kill(-xorgPgid, SIGKILL) == -1) {
                spdlog::warn(""failed to kill Xorg"");
            }
        }
        return true;
    }"
Js9rYkAm,Classes and Inserts,Mishchuk_Lera,C#,Monday 25th of March 2024 08:09:25 AM CDT,"using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace laba1_24
{
    public class Dishes
    {
        public int Dish_ID { get; set; }
        public string Dish_name { get; set; }
        public int Dish_price { get; set; }
        
        public Dishes(int id, string name, int price ) 
        {
            Dish_ID = id;
            Dish_name = name;
            Dish_price = price;
        }
        
        public override string ToString()
        {
            return $""–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–≤–∏:{Dish_ID},\n –ù–∞–∑–≤–∞ —Å—Ç—Ä–∞–≤–∏: {Dish_name}, \n –¶—ñ–Ω–∞: {Dish_price} \n "";
        }
        
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace laba1_24
{
    public class Products
    {
        public int Product_ID { get; set; }
        public string Product_name { get; set; }
        public int Product_calories { get; set; }

        public Products(int id, string name, int calories) 
        {
            Product_ID = id;
            Product_name = name;
            Product_calories = calories;
        }
        
        public override string ToString()
        {
            return $""–ù–æ–º–µ—Ä –ø—Ä–æ–¥—É–∫—Ç—É:{Product_ID},\n –ù–∞–∑–≤–∞ –ø—Ä–æ–¥—É–∫—Ç—É: {Product_name}, \n –ö–∞–ª–æ—Ä—ñ–π–Ω—ñ—Å—Ç—å: {Product_calories} \n "";
        }
        
    }
}
namespace laba1_24
{
    public class Menu
    {
        public int Menu_ID { get; set; }
        public DateTime Menu_date { get; set; }

        public Menu(int id, DateTime date)
        { 
            Menu_ID = id;
            Menu_date = date;
        }

        public override string ToString()
        {
            return $""–ù–æ–º–µ—Ä –º–µ–Ω—é:{Menu_ID},\n –î–∞—Ç–∞ –º–µ–Ω—é: {Menu_date}\n "";
        }

    }

}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace laba1_24
{
    public class DishCategoryConnect
    {
        public int Dish_ID { get; set; }
        public int Category_ID { get; set; }

        public DishCategoryConnect(int dish_id, int category_id) 
        { 
            Dish_ID = dish_id;
            Category_ID = category_id;
        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace laba1_24
{
    public class DishProductConnect
    {
        public int Dish_ID { get; set; }
        public int Product_ID { get; set; }
        public int Product_quantity { get; set; }

        public DishProductConnect(int dish_id, int product_id, int quantity) 
        { 
            Dish_ID = dish_id;
            Product_ID = product_id;
            Product_quantity = quantity;
        }

    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace laba1_24
{
    public class MenuDishConnect
    {
        public int Menu_ID { get; set; }
        public int Dish_ID { get; set; }

        public MenuDishConnect(int menu_id, int dish_id) 
        {
            Menu_ID = menu_id;
            Dish_ID = dish_id;
        }

    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace laba1_24
{
    public class ClassInsert
    {
        public List<Products> Products { get; set; } = new List<Products>
        {
            new Products(1, ""–û–≥—ñ—Ä–æ–∫"", 10),
            new Products(2, ""–ü–æ–º—ñ–¥–æ—Ä"", 12),
            new Products(3, ""–ü–µ—Ä–µ—Ü—å"", 15),
            new Products(4, ""–°–∏—Ä —Ñ–µ—Ç–∞"", 30),
            new Products(5, ""–ö—É—Ä–∫–∞"", 150),
            new Products(6, ""–û–ª—ñ—è –æ–ª–∏–≤–∫–æ–≤–∞"", 120),
            new Products(7, ""–û–ª–∏–≤–∫–∏"", 50),
            new Products(8, ""–°–∏—Ä –º–æ—Ü–∞—Ä–µ–ª–∞"", 80),
            new Products(9, ""–¶–∏–±—É–ª—è"", 15),
            new Products(10, ""–ö–∞—Ä—Ç–æ–ø–ª—è"", 80),
            new Products(11, ""–ú–æ—Ä–∫–≤–∞"", 30),
            new Products(12, ""–°–∞–ª–∞—Ç"", 5),
            new Products(13, ""–Ø–π—Ü–µ"", 10),
            new Products(14, ""–°–æ—É—Å –≤–µ—Ä—à–∫–æ–≤–æ-—á–∞—Å–Ω–∏–∫–æ–≤–∏–π"", 20),
            new Products(15, ""–ì–æ—Ä–æ—à–æ–∫"", 20),
            new Products(16, ""–ö—Ä–µ–≤–µ—Ç–∫–∏"", 100),
            new Products(17, ""–°–≤–∏–Ω–∏–Ω–∞"", 70),
            new Products(18, ""–ë—É–ª–∫–∞ –±—Ä—ñ–æ—à"", 50),
            new Products(19, ""–ú–æ–ª–æ–∫–æ"", 60),
            new Products(20, ""–¶—É–∫–æ—Ä"", 40),
            new Products(21, ""–†–∏—Å"", 45),  
            new Products(22, ""–ê–Ω–∞–Ω–∞—Å"", 60), 
            new Products(23, ""–ê–≤–æ–∫–∞–¥–æ"", 80),  
            new Products(24, ""–ë–∞–Ω–∞–Ω"", 90), 
            new Products(25, ""–í–∏–Ω–æ–≥—Ä–∞–¥"", 35), 
            new Products(26, ""–ú–∞–Ω–¥–∞—Ä–∏–Ω"", 25), 
            new Products(27, ""–ê–ø–µ–ª—å—Å–∏–Ω"", 40), 
            new Products(28, ""–Ø–±–ª—É–∫–æ"", 50), 
            new Products(29, ""–ü–µ—Ä—Å–∏–∫"", 55), 
            new Products(30, ""–ë—Ä–æ–∫–æ–ª—ñ"", 60),
            new Products(31, ""–§–æ—Ä–µ–ª—å"", 145),
            new Products(32, ""–ö–∞–ø—É—Å—Ç–∞"", 27),
            new Products(33, ""–¢–µ–ª—è—Ç–∏–Ω–∞"", 100),
            new Products(34, ""–ü–∞—Å—Ç–∞"", 91),
            new Products(35, ""–õ–æ–∫—à–∏–Ω–∞ —Ä–∏—Å–æ–≤–∞"", 80),
            new Products(36, ""–ü–µ—á–µ—Ä–∏—Ü—ñ"", 45),
            new Products(37, ""–®–æ–∫–æ–ª–∞–¥"", 300),
            new Products(38, ""–ß–∞—Å–Ω–∏–∫"", 60),
            new Products(39, ""–°–∏—Ä –¥–æ—Ä–±–ª—é"", 200) 

        };


        public List<Categories> Categories = new List<Categories>
        {
            new Categories(1, ""–ü–µ—Ä—à—ñ —Å—Ç—Ä–∞–≤–∏""),
            new Categories(2, ""–î—Ä—É–≥—ñ —Å—Ç—Ä–∞–≤–∏""),
            new Categories(3, ""–°–∞–ª–∞—Ç–∏""),
            new Categories(4, ""–î–µ—Å–µ—Ä—Ç–∏""),
            new Categories(5, ""–ù–∞–ø–æ—ó""),
            new Categories(6, ""–î–∏—Ç—è—á–µ –º–µ–Ω—é""),
            new Categories(7, ""–ì–∞—Ä—è—á—ñ —Å—Ç—Ä–∞–≤–∏""),
            new Categories(8, ""–•–æ–ª–æ–¥–Ω—ñ —Å—Ç—Ä–∞–≤–∏"")

        };


        public List<Dishes> Dishes = new List<Dishes>
        {
            new Dishes(1, ""–°–∞–ª–∞—Ç –ø–æ-–≥—Ä–µ—Ü—å–∫–∏"", 120),
            new Dishes(2, ""–ë–æ—Ä—â"", 150),
            new Dishes(3, ""–•—ñ–Ω–∫–∞–ª—ñ"", 180),
            new Dishes(4, ""–ü–∞—Å—Ç–∞ –∫–∞—Ä–±–æ–Ω–∞—Ä–∞"", 200),
            new Dishes(5, ""–°—Ç–µ–π–∫ –∑ —Ç–µ–ª—è—Ç–∏–Ω–∏"", 250),
            new Dishes(6, ""–ü—ñ—Ü–∞ 4 —Å–∏—Ä–∏"", 180),
            new Dishes(7, ""–ö—Ä–µ–º-—Å—É–ø –∑ —á–µ—Ä–≤–æ–Ω–æ—é —Ä–∏–±–æ—é"", 160),
            new Dishes(8, ""–°–≤–∏–Ω—è—á–∏–π —à–∞—à–ª–∏–∫"", 220),
            new Dishes(9, ""–°—É–ø –∑ –ª–æ–∫—à–∏–Ω–æ—é"", 140),
            new Dishes(10, ""–§—ñ–ª–µ –∫—É—Ä–∫–∏ –∑ –æ–≤–æ—á–∞–º–∏"", 190),
            new Dishes(11, ""–ë—É—Ä–≥–µ—Ä"", 170), 
            new Dishes(12, ""–õ–æ—Å–æ—Å—å –∑–∞–ø–µ—á–µ–Ω–∏–π"", 280), 
            new Dishes(13, ""–°–∞–ª–∞—Ç –∑ –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç–∞–º–∏"", 200), 
            new Dishes(14, ""–ú‚Äô—è—Å–æ –ø–æ-–ø–æ–ª—Ç–∞–≤—Å—å–∫–∏"", 210), 
            new Dishes(15, ""–ö–∞—Ä—Ç–æ–ø–ª—è–Ω–µ –ø—é—Ä–µ"", 130),
            new Dishes(16, ""–°–∞–ª–∞—Ç –¶–µ–∑–∞—Ä"", 240),
            new Dishes(17, ""–°–∞–ª–∞—Ç –∑ –∞–≤–æ–∫–∞–¥–æ —ñ –∫—É—Ä–∫–æ—é"", 180),
            new Dishes(18, ""–°—É–ø –≥–∞—Å–ø–∞—á–æ"", 150),
            new Dishes(19, ""–ü–ª–æ–≤ –∑ –∫—É—Ä–∫–æ—é"", 220),
            new Dishes(20, ""–°–≤–∏–Ω—è—á—ñ —Ä–µ–±—Ä–∞ –Ω–∞ –≥—Ä–∏–ª—ñ"", 260),
            new Dishes(21, ""–°—É–ø-–ø—é—Ä–µ –∑ –±—Ä–æ–∫–æ–ª—ñ"", 160),
            new Dishes(22, ""–¢–µ–ø–ª–∏–π —Å–∞–ª–∞—Ç –∑ —Ç–µ–ª—è—Ç–∏–Ω–æ—é"", 210),
            new Dishes(23, ""–ì–æ–ª—É–±—Ü—ñ"", 190),
            new Dishes(24, ""–ö—Ä–µ–≤–µ—Ç–∫–∏ —É –≤–µ—Ä—à–∫–æ–≤–æ–º—É —Å–æ—É—Å—ñ"", 230),
            new Dishes(25, ""–û–º–ª–µ—Ç"", 140),
            new Dishes(26, ""–ë—É–ª—å–π–æ–Ω"", 120),
            new Dishes(27, ""–ü—ñ—Ü–∞ –∑ –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç–∞–º–∏"", 220),
            new Dishes(28, ""–®–∞—à–ª–∏–∫ –∑ –∫—É—Ä–∫–∏"", 200),
            new Dishes(29, ""–°–∞–ª–∞—Ç —Ñ—Ä—É–∫—Ç–æ–≤–∏–π"", 170),
            new Dishes(30, ""–®–æ–∫–æ–ª–∞–¥–Ω–∏–π –º—É—Å"", 240)

        };

        public List<Menu> Menu = new List<Menu>
        {
            new Menu(1, new DateTime(2024, 03, 1)),
            new Menu(2, new DateTime(2024, 03, 2)),
            new Menu(3, new DateTime(2024, 03, 3)),
            new Menu(4, new DateTime(2024, 03, 4)),
            new Menu(5, new DateTime(2024, 03, 5)),
            new Menu(6, new DateTime(2024, 03, 6)),
            new Menu(7, new DateTime(2024, 03, 7)),
            new Menu(8, new DateTime(2024, 03, 8)),
            new Menu(9, new DateTime(2024, 03, 9)),
            new Menu(10, new DateTime(2024, 03, 10))
        };


        public List<DishProductConnect> DishProductConnects = new List<DishProductConnect>
        {
            new DishProductConnect(1, 1, 50),
            new DishProductConnect(1, 2, 50),
            new DishProductConnect(1, 3, 50),
            new DishProductConnect(1, 4, 50),
            new DishProductConnect(1, 6, 50),
            new DishProductConnect(1, 7, 50),
            new DishProductConnect(2, 2, 50),
            new DishProductConnect(2, 10, 50),
            new DishProductConnect(2, 9, 50),
            new DishProductConnect(2, 11, 50),
            new DishProductConnect(2, 5, 40),
            new DishProductConnect(2, 32, 50),
            new DishProductConnect(3, 33, 150),
            new DishProductConnect(3, 9, 15),
            new DishProductConnect(3, 38, 10),
            new DishProductConnect(4, 34, 200), 
            new DishProductConnect(4, 8, 50),   
            new DishProductConnect(4, 38, 5),  
            new DishProductConnect(4, 6, 15),  
            new DishProductConnect(4, 9, 50),
            new DishProductConnect(5, 33, 200), 
            new DishProductConnect(5, 6, 30),   
            new DishProductConnect(5, 9, 20),   
            new DishProductConnect(5, 12, 50),
            new DishProductConnect(5, 38, 10),
            new DishProductConnect(6, 8, 80),   
            new DishProductConnect(6, 4, 100), 
            new DishProductConnect(6, 20, 20), 
            new DishProductConnect(6, 14, 20),
            new DishProductConnect(6, 39, 50),
            new DishProductConnect(7, 16, 200), 
            new DishProductConnect(7, 2, 100),  
            new DishProductConnect(7, 31, 50),  
            new DishProductConnect(7, 6, 20),   
            new DishProductConnect(7, 9, 10),
            new DishProductConnect(8, 17, 300), 
            new DishProductConnect(8, 9, 50),   
            new DishProductConnect(8, 38, 30),  
            new DishProductConnect(8, 6, 20),
            new DishProductConnect(9, 35, 200), 
            new DishProductConnect(9, 11, 100), 
            new DishProductConnect(9, 9, 50),  
            new DishProductConnect(9, 6, 20),   
            new DishProductConnect(9, 3, 10),
            new DishProductConnect(10, 5, 200), 
            new DishProductConnect(10, 3, 100), 
            new DishProductConnect(10, 9, 50),  
            new DishProductConnect(10, 36, 20),
            new DishProductConnect(11, 17, 150), 
            new DishProductConnect(11, 38, 5),  
            new DishProductConnect(11, 18, 50),  
            new DishProductConnect(11, 2, 20),
            new DishProductConnect(11, 12, 10),
            new DishProductConnect(11, 14, 20),
            new DishProductConnect(12, 31, 200), 
            new DishProductConnect(12, 9, 50),   
            new DishProductConnect(12, 6, 17),
            new DishProductConnect(13, 16, 150), 
            new DishProductConnect(13, 23, 50),  
            new DishProductConnect(13, 12, 50),  
            new DishProductConnect(13, 8, 20),
            new DishProductConnect(14, 17, 200), 
            new DishProductConnect(14, 9, 50),   
            new DishProductConnect(14, 36, 50),  
            new DishProductConnect(14, 10, 20),
            new DishProductConnect(15, 10, 200), 
            new DishProductConnect(15, 19, 50),  
            new DishProductConnect(15, 6, 20),
            new DishProductConnect(16, 5, 100),  
            new DishProductConnect(16, 12, 50),  
            new DishProductConnect(16, 14, 20),   
            new DishProductConnect(16, 2, 20),
            new DishProductConnect(16, 8, 10),
            new DishProductConnect(17, 5, 100),  
            new DishProductConnect(17, 23, 50),  
            new DishProductConnect(17, 12, 50),  
            new DishProductConnect(17, 6, 20),   
            new DishProductConnect(17, 1, 20),  
            new DishProductConnect(17, 8, 20),
            new DishProductConnect(18, 2, 100),   
            new DishProductConnect(18, 3, 50),    
            new DishProductConnect(18, 1, 50),    
            new DishProductConnect(18, 6, 20),
            new DishProductConnect(19, 38, 10),   
            new DishProductConnect(19, 11, 100),  
            new DishProductConnect(19, 9, 50),    
            new DishProductConnect(19, 5, 150),   
            new DishProductConnect(19, 21, 100),
            new DishProductConnect(20, 17, 200),  
            new DishProductConnect(20, 6, 20),    
            new DishProductConnect(20, 12, 50),   
            new DishProductConnect(20, 3, 50),
            new DishProductConnect(21, 30, 100),  
            new DishProductConnect(21, 9, 50),    
            new DishProductConnect(21, 31, 50),   
            new DishProductConnect(21, 6, 20),
            new DishProductConnect(21, 10, 20),
            new DishProductConnect(22, 33, 200),  
            new DishProductConnect(22, 12, 50),   
            new DishProductConnect(22, 4, 30),  
            new DishProductConnect(22, 3, 50),   
            new DishProductConnect(22, 6, 20),    
            new DishProductConnect(22, 2, 20),
            new DishProductConnect(23, 33, 200),  
            new DishProductConnect(23, 32, 100),  
            new DishProductConnect(23, 11, 100),  
            new DishProductConnect(23, 9, 50),    
            new DishProductConnect(23, 6, 20),    
            new DishProductConnect(23, 2, 20),
            new DishProductConnect(24, 14, 100),  
            new DishProductConnect(24, 16, 200),  
            new DishProductConnect(24, 38, 10),   
            new DishProductConnect(24, 39, 20),
            new DishProductConnect(25, 13, 200),  
            new DishProductConnect(25, 19, 100), 
            new DishProductConnect(25, 6, 40),   
            new DishProductConnect(25, 4, 20),
            new DishProductConnect(26, 5, 200),  
            new DishProductConnect(26, 9, 100),  
            new DishProductConnect(26, 11, 20),
            new DishProductConnect(27, 16, 100),  
            new DishProductConnect(27, 14, 50),   
            new DishProductConnect(27, 39, 50),   
            new DishProductConnect(27, 31, 20),
            new DishProductConnect(28, 5, 200),   
            new DishProductConnect(28, 9, 20),
            new DishProductConnect(28, 6, 20),
            new DishProductConnect(28, 38, 20),
            new DishProductConnect(29, 22, 100),  
            new DishProductConnect(29, 25, 100),  
            new DishProductConnect(29, 24, 50),   
            new DishProductConnect(29, 26, 50),   
            new DishProductConnect(29, 27, 50),   
            new DishProductConnect(29, 20, 20),
            new DishProductConnect(30, 37, 100),  
            new DishProductConnect(30, 19, 100), 
            new DishProductConnect(30, 20, 20)
        };

        public List<DishCategoryConnect> dishCategoryConnects = new List<DishCategoryConnect> 
        {
            new DishCategoryConnect(1, 3),
            new DishCategoryConnect(1, 6),
            new DishCategoryConnect(2, 1),
            new DishCategoryConnect(3, 2),
            new DishCategoryConnect(4, 2),
            new DishCategoryConnect(4, 6),
            new DishCategoryConnect(5, 2),
            new DishCategoryConnect(6, 2),
            new DishCategoryConnect(6, 6),
            new DishCategoryConnect(7, 1),
            new DishCategoryConnect(7, 6),
            new DishCategoryConnect(8, 2),
            new DishCategoryConnect(9, 1),
            new DishCategoryConnect(9, 6),
            new DishCategoryConnect(10, 2),
            new DishCategoryConnect(10, 6),
            new DishCategoryConnect(10, 7),
            new DishCategoryConnect(11, 2),
            new DishCategoryConnect(12, 2),
            new DishCategoryConnect(12, 7),
            new DishCategoryConnect(12, 6),
            new DishCategoryConnect(13, 3),
            new DishCategoryConnect(14, 2),
            new DishCategoryConnect(14, 7),
            new DishCategoryConnect(15, 2),
            new DishCategoryConnect(16, 3),
            new DishCategoryConnect(16, 6),
            new DishCategoryConnect(17, 6),
            new DishCategoryConnect(17, 3),
            new DishCategoryConnect(18, 1),
            new DishCategoryConnect(18, 8),
            new DishCategoryConnect(19, 2),
            new DishCategoryConnect(20, 7),
            new DishCategoryConnect(20, 2),
            new DishCategoryConnect(21, 7),
            new DishCategoryConnect(21, 6),
            new DishCategoryConnect(21, 1),
            new DishCategoryConnect(22, 3),
            new DishCategoryConnect(22, 7),
            new DishCategoryConnect(23, 2),
            new DishCategoryConnect(23, 7),
            new DishCategoryConnect(24, 7),
            new DishCategoryConnect(25, 6),
            new DishCategoryConnect(26, 6),
            new DishCategoryConnect(26, 1),
            new DishCategoryConnect(27, 2),
            new DishCategoryConnect(28, 7),
            new DishCategoryConnect(28, 2),
            new DishCategoryConnect(29, 4),
            new DishCategoryConnect(29, 6),
            new DishCategoryConnect(30, 4),
            new DishCategoryConnect(25, 6)

        };


        public List<MenuDishConnect> menuDishConnects = new List<MenuDishConnect> 
        { 
            new MenuDishConnect(1, 1),
            new MenuDishConnect(1, 2),  
            new MenuDishConnect(1, 3),  
            new MenuDishConnect(1, 4),
            new MenuDishConnect(1, 5),
            new MenuDishConnect(1, 6),
            new MenuDishConnect(1, 7),
            new MenuDishConnect(1, 8),
            new MenuDishConnect(1, 9),
            new MenuDishConnect(1, 10),
            new MenuDishConnect(1, 11),
            new MenuDishConnect(2, 11),
            new MenuDishConnect(2, 12),
            new MenuDishConnect(2, 13),
            new MenuDishConnect(2, 14),
            new MenuDishConnect(2, 15),
            new MenuDishConnect(2, 16),
            new MenuDishConnect(2, 17),
            new MenuDishConnect(2, 18),
            new MenuDishConnect(2, 19),
            new MenuDishConnect(2, 20),
            new MenuDishConnect(2, 21),
            new MenuDishConnect(2, 22),
            new MenuDishConnect(3, 22),
            new MenuDishConnect(3, 23),
            new MenuDishConnect(3, 24),
            new MenuDishConnect(3, 25),
            new MenuDishConnect(3, 26),
            new MenuDishConnect(3, 27),
            new MenuDishConnect(3, 28),
            new MenuDishConnect(3, 29),
            new MenuDishConnect(3, 30),
            new MenuDishConnect(3, 2)

        };
    }
}
"
Nd5XB3NC,Review OnEquity,fxvnpro,PHP,Monday 25th of March 2024 08:06:08 AM CDT,https://www.fxvnpro.com/review-onequity/
c00X08Yf,Review OnEquity,reviewbrokers,PHP,Monday 25th of March 2024 08:05:59 AM CDT,https://www.reviewbrokers.net/review-onequity/
AMkEF11P,Untitled,Mysoft,FreeBasic,Monday 25th of March 2024 07:48:59 AM CDT,"dim as long iMoveAmount(5) = {8,5,9,6,5,7}
dim as long uCat(...) = { _
  &h00000000,&h00000000,&h000003FA,&h001FFC06,&h00E00001,&h01000139,&h06000126,&h7C03FFB0,&h887C007C,&h0F80000A,&h18000005,&h28000000,&h0C000000, _
  &h00000000,&h00000000,&h00000000,&h003F87C4,&h00C0783C,&h01000002,&h06000171,&hFA07FFCE,&h06380370,&h1DC0011C,&h08000103,&h30000180,&h000000C0, _
  &h00000000,&h0007C000,&h00183008,&h00600FBC,&h00C00042,&h01208011,&h0221602E,&h7C421F40,&h005C0540,&h002018E0,&h00101030,&h00201008,&h00000804, _
  &h00000000,&h0003C000,&h00083000,&h03F00C08,&h04100218,&h181201E4,&hE0091002,&h0005A03C,&h00036FC0,&h00035800,&h0001D800,&h00008800,&h00000C00, _
  &h00000000,&h00000000,&h3F0F8000,&h40F06020,&h401018E0,&h00200710,&h00200008,&h002020F0,&h0017FB00,&h00181400,&h00142800,&h00344000,&h001B0000, _
  &h70000000,&h0F000000,&h00E3C004,&h001C301E,&h00200EE1,&h00400101,&h0040001E,&h00438020,&h00847FD0,&h01380070,&h01400000,&h00A00000,&h00780000 _
}

const Scale = 3
dim as long iCatX = -50*Scale,iCatY=rnd*((100-13)*Scale)
screenres 160*Scale,100*Scale,8

do
  for I as long = 0 to ubound(uCat) step 13
    
    line(iCatX-10*Scale,iCatY+-1*Scale)-step(43*Scale,Scale),0,bf
    for N as long = 0 to 12
      line(iCatX-10*Scale,iCatY+N*Scale)-step(43*Scale,Scale),0,bf
      for K as long = 0 to 31
        if (uCat(I+N) shl K)<0 then circle(iCatX+K*Scale,iCatY+N*Scale),(Scale\2)+1,K+32,,,,f
      next K
    next N    
    
    sleep 80,1
    
    iCatX += iMoveAmount(I\13)*Scale
    if iCatX >= ((160+30)*Scale) then 
      iCatX=-50*Scale : iCatY=rnd*(100-13*Scale)
    end if
      
    
  next I
loop

sleep
"
DEFWeiHd,# tk_streaking_fireworks.py,here2share,Python,Monday 25th of March 2024 07:26:18 AM CDT,"# tk_streaking_fireworks.py

import tkinter as tk
from PIL import Image, ImageDraw, ImageTk, ImageChops
import time
import random
import math

root = tk.Tk()
root.title(""Fireworks"")

ww = 600
hh = 600
root.geometry(f""{ww}x{hh}+0+0"")

canvas = tk.Canvas(root, width=ww, height=hh, bg='black')
canvas.pack()

fireworks = []
gravity = 0.07

def create_firework():
	r = random.randint(0, 255)
	g = random.randint(0, 255)
	b = min(255, max(0, 500 - r - g))
	x = random.randint(50, ww - 50)
	y = hh
	angle = random.uniform(1.2, 0.7)
	if x > ww // 2:
		angle *= -1
	firework = {
		'x': x,
		'y': y,
		'exploded': False,
		'angle': angle,
		'color': (r, g, b),
		'peak': random.randint(100, 400),
		'particles': []
	}
	fireworks.append(firework)

def update():
	for firework in fireworks[::-1]:
		if not firework['exploded']:
			firework['y'] -= 5
			firework['x'] += firework['angle']
			render(firework)
			if firework['y'] <= firework['peak']:
				firework['exploded'] = True
				explode(firework)
		else:
			if firework['particles']:
				for i in range(len(firework['particles']) - 1, -1, -1):
					particle = firework['particles'][i]
					particle['color'] = [max(0, i - 3) for i in particle['color']]
					particle['y'] += particle['y0'] * 3
					particle['x'] += particle['x0'] * 3
					particle['y'] += particle['gravity']
					particle['x'] += random.choice([-0.1, 0.1])
					particle['gravity'] += gravity
					render(particle)
					if sum(particle['color']) < 20:
						firework['particles'].pop(i)
			else:
				fireworks.remove(firework)

def explode(firework):
	for _ in range(20):
		angle = random.uniform(0, 2 * math.pi)
		distance = random.uniform(0, 1.0)
		x_offset = distance * math.cos(angle)
		y_offset = distance * math.sin(angle)
		particle = {
			'x': firework['x'],
			'y': firework['y'],
			'x0': x_offset,
			'y0': y_offset,
			'gravity': gravity,
			'color': firework['color'],
		}
		firework['particles'].append(particle)

def random_rgb_hex(rgb):
	return '#{:02x}{:02x}{:02x}'.format(*rgb)

def render(firework):
	color = random_rgb_hex(firework['color'])
	draw.ellipse((firework['x'], firework['y'], firework['x'] + 5, firework['y'] + 5), fill=color)

timer = 0
fade = Image.new(""RGBA"", (ww, hh), (0, 0, 0, 0))
image = Image.new(""RGBA"", (ww, hh), (0, 0, 0, 0))
while 1:
	canvas.delete('all')
	draw = ImageDraw.Draw(image)
	update()
	if timer < time.time():
		timer = time.time() + random.uniform(0.5, 5)
		if len(fireworks) < 4:
			create_firework()
		
	photo_image = ImageTk.PhotoImage(image)
	canvas.create_image(0, 0, anchor=tk.NW, image=photo_image)
	root.update()
	image = ImageChops.blend(image, fade, 0.009)

root.mainloop()"
DwfFMmxN,Untitled,Mysoft,FreeBasic,Monday 25th of March 2024 07:18:48 AM CDT,"#include ""MyTDT\GfxResize.bas""

dim as long iMoveAmount(5) = {8,5,9,6,5,7}
dim as ulong uCat(...) = { _
  &h00000000,&h00000000,&h000003FA,&h001FFC06,&h00E00001,&h01000139,&h06000126,&h7C03FFB0,&h887C007C,&h0F80000A,&h18000005,&h28000000,&h0C000000, _
  &h00000000,&h00000000,&h00000000,&h003F87C4,&h00C0783C,&h01000002,&h06000171,&hFA07FFCE,&h06380370,&h1DC0011C,&h08000103,&h30000180,&h000000C0, _
  &h00000000,&h0007C000,&h00183008,&h00600FBC,&h00C00042,&h01208011,&h0221602E,&h7C421F40,&h005C0540,&h002018E0,&h00101030,&h00201008,&h00000804, _
  &h00000000,&h0003C000,&h00083000,&h03F00C08,&h04100218,&h181201E4,&hE0091002,&h0005A03C,&h00036FC0,&h00035800,&h0001D800,&h00008800,&h00000C00, _
  &h00000000,&h00000000,&h3F0F8000,&h40F06020,&h401018E0,&h00200710,&h00200008,&h002020F0,&h0017FB00,&h00181400,&h00142800,&h00344000,&h001B0000, _
  &h70000000,&h0F000000,&h00E3C004,&h001C301E,&h00200EE1,&h00400101,&h0040001E,&h00438020,&h00847FD0,&h01380070,&h01400000,&h00A00000,&h00780000 _
}

dim as long iCatX = -50

screen 13
do
  for I as long = 0 to ubound(uCat) step 13
    
    for N as long = 0 to 12
      line(iCatX-10,N)-step(40,0),0
      line(iCatX+ 0,N)-step(15,0),15,,uCat(I+N) shr 16
      line(iCatX+16,N)-step(15,0),15,,uCat(I+N)  
    next N
    
    sleep 80,1
    iCatX += iMoveAmount(I\13)
    if iCatX >= (320+30) then iCatX=-50
    
  next I
loop

sleep
"
vTKYhsQ6,Untitled,Mysoft,FreeBasic,Monday 25th of March 2024 07:17:54 AM CDT,"dim as long iMoveAmount(5) = {8,5,9,6,5,7}
dim as ulong uCat(...) = { _
  &b00000000000000000000000000000000, _
  &b00000000000000000000000000000000, _
  &b00000000000000000000001111111010, _
  &b00000000000111111111110000000110, _
  &b00000000111000000000000000000001, _
  &b00000001000000000000000100111001, _
  &b00000110000000000000000100100110, _
  &b01111100000000111111111110110000, _
  &b10001000011111000000000001111100, _
  &b00001111100000000000000000001010, _
  &b00011000000000000000000000000101, _
  &b00101000000000000000000000000000, _
  &b00001100000000000000000000000000, _
  &b00000000000000000000000000000000, _
  &b00000000000000000000000000000000, _
  &b00000000000000000000000000000000, _
  &b00000000001111111000011111000100, _
  &b00000000110000000111100000111100, _
  &b00000001000000000000000000000010, _
  &b00000110000000000000000101110001, _
  &b11111010000001111111111111001110, _
  &b00000110001110000000001101110000, _
  &b00011101110000000000000100011100, _
  &b00001000000000000000000100000011, _
  &b00110000000000000000000110000000, _
  &b00000000000000000000000011000000, _
  &b00000000000000000000000000000000, _
  &b00000000000001111100000000000000, _
  &b00000000000110000011000000001000, _
  &b00000000011000000000111110111100, _
  &b00000000110000000000000001000010, _
  &b00000001001000001000000000010001, _
  &b00000010001000010110000000101110, _
  &b01111100010000100001111101000000, _
  &b00000000010111000000010101000000, _
  &b00000000001000000001100011100000, _
  &b00000000000100000001000000110000, _
  &b00000000001000000001000000001000, _
  &b00000000000000000000100000000100, _
  &b00000000000000000000000000000000, _
  &b00000000000000111100000000000000, _
  &b00000000000010000011000000000000, _
  &b00000011111100000000110000001000, _
  &b00000100000100000000001000011000, _
  &b00011000000100100000000111100100, _
  &b11100000000010010001000000000010, _
  &b00000000000001011010000000111100, _
  &b00000000000000110110111111000000, _
  &b00000000000000110101100000000000, _
  &b00000000000000011101100000000000, _
  &b00000000000000001000100000000000, _
  &b00000000000000000000110000000000, _
  &b00000000000000000000000000000000, _
  &b00000000000000000000000000000000, _
  &b00111111000011111000000000000000, _
  &b01000000111100000110000000100000, _
  &b01000000000100000001100011100000, _
  &b00000000001000000000011100010000, _
  &b00000000001000000000000000001000, _
  &b00000000001000000010000011110000, _
  &b00000000000101111111101100000000, _
  &b00000000000110000001010000000000, _
  &b00000000000101000010100000000000, _
  &b00000000001101000100000000000000, _
  &b00000000000110110000000000000000, _
  &b01110000000000000000000000000000, _
  &b00001111000000000000000000000000, _
  &b00000000111000111100000000000100, _
  &b00000000000111000011000000011110, _
  &b00000000001000000000111011100001, _
  &b00000000010000000000000100000001, _
  &b00000000010000000000000000011110, _
  &b00000000010000111000000000100000, _
  &b00000000100001000111111111010000, _
  &b00000001001110000000000001110000, _
  &b00000001010000000000000000000000, _
  &b00000000101000000000000000000000, _
  &b00000000011110000000000000000000 _
}

dim as long iCatX = -50

screen 13
do
  for I as long = 0 to ubound(uCat) step 13
    
    for N as long = 0 to 12
      line(iCatX-10,N)-step(40,0),0
      line(iCatX+ 0,N)-step(15,0),15,,uCat(I+N) shr 16
      line(iCatX+16,N)-step(15,0),15,,uCat(I+N)  
    next N
    
    sleep 80,1
    iCatX += iMoveAmount(I\13)
    if iCatX >= (320+30) then iCatX=-50
    
  next I
loop

sleep"
FnnW0PAL,Review ACY Securities,reviewbrokers,PHP,Monday 25th of March 2024 07:04:35 AM CDT,https://www.reviewbrokers.net/review-acy-securities/
EbaikDXJ,data876,TestGuy1,JSON,Monday 25th of March 2024 07:00:05 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '3e326e2f281b82cabdf2ee3928c78fdf0f10ac1bb703cb1677d38d79ce63d0497681b0fc3e57ac96e3d21f1104611bc452cbd508ce4dc55393f0f56b2b03bf1f912de5f1394076bd561a9ed4f2fb23c5adc3cc601f90bb5c84e1943aebf905ac00e1529099cc47519fe4bb8c16bbb18a6973e480214072685f226414f3c29e4b',
  otherdata: [
    'eca244029fda1d39c2399a118078dd9b',
    '7a580d1d9a8c472fdd2533e2eeb1e19c',
    'e6a79997444c7a41ca3549cf2d247bdd',
    'c107027c199fa33b2d0e222e9b0fa575',
    '2b438d7f247f9cfdc9c36ee563539e01',
    '8369c9f8e59afaa3982712aeda641306',
    '238fb32f19f85219b68cd8016cbae348',
    '45c2f57b311798fe562b680be03e998b'
  ]
}"
5WL2BTpe,Review Soho Markets,fxvnpro,PHP,Monday 25th of March 2024 05:57:51 AM CDT,https://www.fxvnpro.com/review-soho-markets/
hpR2KEqC,Review Soho Markets,reviewbrokers,PHP,Monday 25th of March 2024 05:54:54 AM CDT,https://www.reviewbrokers.net/review-soho-markets/
BesGCjqi,sysop_2.1.5_Full,pan7nikt,Bash,Monday 25th of March 2024 05:31:12 AM CDT,"#2.1.5.1
#ZROB cd DO FOLDERU Z PROGRAMAMI
#uruchomic w oddzielnych oknach/sesjach ssh
./prog
./sprog
#podczas, gdy procesy sa uruchomione
echo -e '\033[0;32m2.1.5.1\033[0m'
echo -e '\033[0;32mCZTERY ROZNICE\033[0m'
echo -e '\033[0;32m1. Liczba nieanonimowych segmentow pamieci w mapie pamieci (fragmentu pamieci o ciaglej logicznej adresacji pamieci)\033[0m'
pidof prog
pidof sprog
pmap -x PID_PROG
pmap -x PID_SPROG
echo -e 'r---- stale\nrw--- zmienne\nr-x-- text\nNieanonimowe bez [anon] i [stack]'
echo -e '\033[0;32mWiecej segmentow nieanonimowych dla procesu utworzonego wskutek uruchomienia programu skonsolidowanego dynamicznie\033[0m'
echo -e 'nieanonimowe segmenty to te, gdzie dane lub tekst wczytane zostaly z pliku wykonywalnego lub zawierajacego biblioteke'

echo -e '\033[0;32m2. rozmiar pliku\033[0m'
stat -c %s prog
stat -c %s sprog
echo -e '\033[0;32mPlik jest wiekszy dla programu skonsolidowanego statycznie\033[0m'

echo -e '\033[0;32m3. Biblioteki zainstalowane w systemie/jadrze (dla skonsolidowanego dynamicznie) a zewnetrzne (dla skonsolidowanego statycznie)\033[0m'       

echo -e '\033[0;32mProba uruchomiena programu skonsolidowanego dynamicznie bez biblioteki\033[0m'
sudo dnf remove libsodium -yq
ldd prog
ldd sprog
./prog
./sprog
echo -e '\033[0;32mInstalacja brakujacej biblioteki\033[0m'
sudo dnf install libsodium -yq
ldd prog
ldd sprog
./prog
./sprog

echo -e '\033[0;32m4. Liczba wywolan systemowych\033[0m'
#NIE WYSWIETLA SIE PROMPT ALE NADAL TRZEBA WPISAC ZNAKI LUB KLIKNAC ENTER PO PROSTU
strace -c ./prog |& grep 'calls\|total'
strace -c ./sprog |& grep 'calls\|total'
echo -e '\033[0;32mWiecej wywolan dla procesu utworzonego wskutek uruchomienia programu skonsolidowanego dynamicznie\033[0m'

echo -e '\033[0;32mOKRESLENIE RODZAJU ZASTOSOWANEJ KONSOLIDACJI\033[0m'
echo -e '\033[0;32mdla biblioteki\033[0m'
file /usr/lib64/libc.so.6
echo -e '\033[0;32mdla programu dynamicznie skonsolidowanego\033[0m'
file prog
echo -e '\033[0;32mdla programu statycznie skonsolidowanego\033[0m'
file sprog
 
#KOLEJNY PODPUNKT NAJLEPIEJ W NOWYM TERMINALU
#2.1.5.2
echo -e '\033[0;32m2.1.5.2\033[0m'
echo -e '\033[0;32mLista bibliotek wymaganych przez program\033[0m'
ldd prog
echo -e '\033[0;32mi biblioteke skonsolidowana dynamicznie\033[0m'
ldd /usr/lib64/libc.so.6
echo -e '\033[0;32mIlosc bibliotek w linkerze\033[0m'
ldconfig -p | grep bibliotek
echo -e '\033[0;32mWszystkie biblioteki zarzadzane przez linker\033[0m'
ldconfig -p

#KOLEJNY PODPUNKT NAJLEPIEJ W NOWYM TERMINALU
#2.1.5.3
echo -e '\033[0;32m2.1.5.3\033[0m'
echo -e '\033[0;32mCzas przetwarzania w trybie nieuprzywilejowanym i uprzywilejowanym\033[0m'
time ls
echo -e 'Suma tych czasow nie musi byc zgodna, poniewaz proces w trakcie swojego zycia nie musi byc przetwarzany w zadnym trybie (moze np. oczekiwac na input)'
echo -e 'proces pochodzi\nw uprzywilejowanym: z jadra\nw nieuprzywilejowanym: z programu lub biblioteki.'
echo -e 'Zmiana nastepuje w momencie zgloszenia wywolania systemowego przez proces (rozkaz pulapki)'

#KOLEJNY PODPUNKT NAJLEPIEJ W NOWYM TERMINALU
#2.1.5.4
echo -e '\033[0;32m2.1.5.4\033[0m'
echo -e 'Wywolanie systemowe to rozwiazanie/funkcjonalnosc (procedura obslugi wywolania systemowego), ktore umozliwia procesowi skorzystanie z funkcjonalnosci oferowanych przez jadro\nTakie wywolania umozliwia biblioteka VDSO\nFragment kodu uruchamiany po wykonaniu wywolania systemowego to PROCEDURA'
echo -e '\033[0;32mPorownanie ilosci zgloszen wywolan systemowych\033[0m'
strace -c ./prog |& grep 'calls\|total'
strace -c ./sprog |& grep 'calls\|total'"
a7MaVXwi,Untitled,Diaxon,PHP,Monday 25th of March 2024 05:13:00 AM CDT,"<?php


$conn = new mysqli(""localhost"", ""root"", """", ""contacts""); 
if ($conn){
    echo ""Connected to the database"";
} else {
    echo ""error"";
}



// Utw√≥rz formularza (lista rozwijana) z nazwami kolumn w tabeli. Po przes≈Çaniu danych z formularza
// wy≈õwietla siƒô tylko jedna kolumna z bazy. Na stronie nie mogƒÖ wy≈õwietlaƒá siƒô b≈Çƒôdy.

$sql = ""SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = N'contacts'"";
$result = $conn->query($sql);



?>

<p>Wybierz kolumnƒô</p>
<form action=""index4.php"" method=""POST"">
    <select name=""columns"">
        <?php
        for ($i = 0; $i < $result->num_rows; $i++){
            $row = $result->fetch_assoc();
            echo ""<option value='{$row['COLUMN_NAME']}'>{$row['COLUMN_NAME']}</option>"";
        }
        ?>
    </select>
    <p>Jak chcesz posortowaƒá?</p>
    <select name=""sort"">
        <option value=""ASC"">ASC</option>
        <option value=""DESC"">DESC</option>
    </select>
    <button type=""submit"">Submit</button>
<form>
<br>

<?php
if (isset($_POST['columns']) && isset($_POST['sort'])){
    $column_name = $_POST['columns'];
    $sort = $_POST['sort'];

    $sql = ""SELECT $column_name FROM contacts ORDER BY $column_name $sort"";
    $result = $conn->query($sql);
    if ($result->num_rows > 0){
        while ($row = $result->fetch_assoc()){
            echo $row[$column_name] . ""<br>"";
        }
    }
}
?>

<form action=""index4.php"" method=""POST"">
    <label>Wybierz kolumne</label>
    <select name=""columns"">
        <?php
        $sql = ""SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = N'contacts'"";
        $result = $conn->query($sql);
        
        for ($i = 0; $i < $result->num_rows; $i++){
            $row = $result->fetch_assoc();
            echo ""<option value='{$row['COLUMN_NAME']}'>{$row['COLUMN_NAME']}</option>"";
        }
        ?>
    </select>
    <label>Podaj ciƒÖg znak√≥w</label>
    <input name=""search"">
    <button type=""submit"">Submit</button>

    <?php
    if (isset($_POST['search'])){
        $search = $_POST['search'];
        $sql = ""SELECT * FROM contacts WHERE name LIKE "" . ""'%"" . ""$search"" . ""%'"";  
        $result = $conn->query($sql);
        for ($i = 0; $i < $result->num_rows; $i++){
            $row = $result->fetch_assoc();
            echo ""<p>{$row['name']}</p>"";
        }
    }


    ?>
<form>

<!-- Wy≈õwietl dane z bazy w postaci tabeli HTML -->

<table>
    <tr>
        <th>Id</th>
        <th>Name</th>
        <th>Email</th>
        <th>Phone</th>
        <th>Created at</th>
    </tr>

    <?php
    $query = ""SELECT * FROM contacts"";
    $result = $conn->query($query);
    for ($i = 0; $i < $result->num_rows; $i++){
        $row = $result->fetch_assoc();
        echo ""<tr>"";
        echo ""<td>{$row['id']}</td>"";
        echo ""<td>{$row['name']}</td>"";
        echo ""<td>{$row['email']}</td>"";
        echo ""<td>{$row['phone']}</td>"";
        echo ""<td>{$row['created_at']}</td>"";
    }
    ?>

</table>

<!-- Napisz skrypt, kt√≥ry bƒôdzie wy≈õwietla≈Ç z bazy dane wybranej osoby. -->

<form action=""index4.php"" method=""POST"">
    <label>Podaj id</label>
    <input name=""id"">
    <button type=""submit"">Submit</button>
    
    <?php

    if (isset($_POST['id'])){
        $query = ""SELECT * FROM contacts WHERE id = "" . $_POST['id'];
        $result = $conn->query($query);
        if ($result->num_rows > 0){
            $row = $result->fetch_assoc();
            echo ""<p>{$row['name']}</p>"";
            echo ""<p>{$row['email']}</p>"";
            echo ""<p>{$row['phone']}</p>"";
            echo ""<p>{$row['created_at']}</p>"";
        }
    }

    ?>
</form>



<br>
"
BFAzRNp3,cs 1.6 cfg,Nelien,SSH Config,Monday 25th of March 2024 05:11:19 AM CDT,"// Add custom configurations to the file ""userconfig.cfg"".

unbindall
bind ""TAB"" ""+showscores""
bind ""ENTER"" ""+attack""
bind ""ESCAPE"" ""cancelselect""
bind ""SPACE"" ""+jump""
bind ""'"" ""+moveup""
bind ""+"" ""sizeup""
bind "","" ""buyammo1""
bind ""-"" ""sizedown""
bind ""."" ""buyammo2""
bind ""/"" ""+movedown""
bind ""0"" ""slot10""
bind ""1"" ""slot1""
bind ""2"" ""slot2""
bind ""3"" ""slot3""
bind ""4"" ""slot4""
bind ""5"" ""slot5""
bind ""6"" ""slot6""
bind ""7"" ""slot7""
bind ""8"" ""slot8""
bind ""9"" ""slot9""
bind "";"" ""+mlook""
bind ""="" ""pb menu""
bind ""["" ""invprev""
bind ""]"" ""invnext""
bind ""`"" ""toggleconsole""
bind ""a"" ""+moveleft""
bind ""b"" ""buy;stopsound""
bind ""c"" ""radio3""
bind ""d"" ""+moveright""
bind ""e"" ""+use""
bind ""g"" ""drop""
bind ""h"" ""+commandmenu""
bind ""i"" ""showbriefing""
bind ""j"" ""cheer""
bind ""k"" ""+voicerecord""
bind ""l"" ""showbriefing""
bind ""m"" ""chooseteam""
bind ""n"" ""nightvision""
bind ""o"" ""buyequip""
bind ""q"" ""lastinv""
bind ""r"" ""+reload""
bind ""s"" ""+back""
bind ""t"" ""impulse 201""
bind ""u"" ""messagemode2""
bind ""v"" ""+attack2""
bind ""w"" ""+forward""
bind ""x"" ""radio2""
bind ""y"" ""messagemode""
bind ""z"" ""radio1""
bind ""~"" ""toggleconsole""
bind ""UPARROW"" ""+forward""
bind ""DOWNARROW"" ""+back""
bind ""LEFTARROW"" ""+moveleft""
bind ""RIGHTARROW"" ""+moveright""
bind ""ALT"" ""+strafe""
bind ""CTRL"" ""+duck""
bind ""SHIFT"" ""+speed""
bind ""F1"" ""autobuy""
bind ""F2"" ""rebuy""
bind ""F3"" ""cl_crosshair_size 1;cl_dynamiccrosshair 1""
bind ""F4"" ""cl_crosshair_size 2;cl_dynamiccrosshair 0""
bind ""F5"" ""snapshot""
bind ""F6"" ""save quick""
bind ""F7"" ""host_framerate 0""
bind ""F8"" ""host_framerate 0.1""
bind ""F10"" ""quit prompt""
bind ""DEL"" ""+reload""
bind ""HOME"" ""rhlgAZLH""
bind ""END"" ""slot3""
bind ""KP_HOME"" ""+showscores""
bind ""KP_LEFTARROW"" ""slot5""
bind ""KP_END"" ""drop""
bind ""KP_INS"" ""slot1""
bind ""MWHEELDOWN"" ""+jump""
bind ""MOUSE1"" ""+attack""
bind ""MOUSE3"" ""slot2""
bind ""PAUSE"" ""pause""
_cl_autowepswitch ""1""
_snd_mixahead ""0.1""
ati_npatch ""1.0""
ati_subdiv ""2.0""
bgmvolume ""1.000000""
bottomcolor ""6""
brightness ""5""
cl_allowdownload ""1""
cl_allowupload ""1""
cl_backspeed ""400""
cl_cmdbackup ""2""
cl_cmdrate ""101""
cl_corpsestay ""0.000000""
cl_crosshair_color ""50 250 50""
cl_crosshair_size ""medium""
cl_crosshair_translucent ""0""
cl_dlmax ""80""
cl_download_ingame ""1""
cl_dynamiccrosshair ""0""
cl_forwardspeed ""400""
cl_himodels ""0""
cl_idealpitchscale ""0.8""
cl_lc ""1""
cl_logocolor ""#Valve_Orange""
cl_logofile ""v_1""
cl_lw ""1""
cl_minmodels ""1""
cl_radartype ""0""
cl_righthand ""1""
cl_shadows ""0""
cl_timeout ""121221""
cl_updaterate ""101""
cl_vsmoothing ""0.05""
cl_weather ""0""
con_color ""0 500 0""
console ""1.000000""
crosshair ""1.000000""
fastsprites ""0""
fps_max ""100""
fps_modem ""0""
gamma ""3""
gl_dither ""1""
gl_flipmatrix ""0""
gl_fog ""1""
gl_monolights ""0""
gl_overbright ""0""
gl_polyoffset ""0.1""
hisound ""1""
hpk_maxsize ""4""
hud_capturemouse ""1""
hud_centerid ""1""
hud_draw ""1""
hud_fastswitch ""1""
hud_saytext_internal ""1""
hud_takesshots ""0""
joystick ""0""
lookspring ""0""
lookstrafe ""0.000000""
m_filter ""0""
m_forward ""1""
m_pitch ""0.022""
m_side ""0.8""
m_yaw ""0.022""
model ""gordon""
MP3FadeTime ""2.0""
MP3Volume ""0""
mp_decals ""0""
name ""AnGeL""
net_graph ""0""
net_graphpos ""1""
net_scale ""5""
r_bmodelhighfrac ""5.0""
r_detailtextures ""0""
s_a3d ""0.0""
s_automax_distance ""30""
s_automin_distance ""2""
s_bloat ""2.0""
s_distance ""60""
s_doppler ""0.0""
s_eax ""0.0""
s_leafnum ""0""
s_max_distance ""1000""
s_min_distance ""5""
s_numpolys ""200""
s_polykeep ""1000000000""
s_polysize ""10000000""
s_refdelay ""4""
s_refgain ""0.4""
s_rolloff ""1.0""
s_verbwet ""0.25""
sensitivity ""1.9""
skin """"
spec_autodirector_internal ""1""
spec_drawcone_internal ""1""
spec_drawnames_internal ""1""
spec_drawstatus_internal ""1""
spec_mode_internal ""2""
spec_pip ""0""
suitvolume ""0.250000""
sv_aim ""0""
sv_voiceenable ""1""
team """"
topcolor ""30""
viewsize ""110""
voice_enable ""0""
voice_forcemicrecord ""1""
voice_modenable ""1""
voice_scale ""2""
volume ""0.015""
setinfo ""status_monitor"" ""1""
setinfo ""_vgui_menus"" ""0""
setinfo ""_ah"" ""0""
setinfo ""_pw"" ""3AA""
+mlook
+jlook
exec userconfig.cfg
"
seNHefED,Untitled,RushFuture,Python,Monday 25th of March 2024 04:57:25 AM CDT,"#!/usr/bin/env python3
# -*- coding: utf-8 -*-

'''
–ò—Å—Ç–æ—á–Ω–∏–∫: https://developers.google.com/mediapipe/solutions/vision/face_landmarker/python

–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤:
wget -O face_landmarker_v2_with_blendshapes.task -q https://storage.googleapis.com/mediapipe-models/face_landmarker/face_landmarker/float16/1/face_landmarker.task
pip install mediapipe
'''

from mediapipe import solutions
from mediapipe.framework.formats import landmark_pb2
import numpy as np
import matplotlib.pyplot as plt
import mediapipe as mp
from mediapipe.tasks import python
from mediapipe.tasks.python import vision
import cv2

def draw_landmarks_on_image(rgb_image, detection_result):
  face_landmarks_list = detection_result.face_landmarks
  annotated_image = np.copy(rgb_image)

  # Loop through the detected faces to visualize.
  for idx in range(len(face_landmarks_list)):
    face_landmarks = face_landmarks_list[idx]

    # Draw the face landmarks.
    face_landmarks_proto = landmark_pb2.NormalizedLandmarkList()
    face_landmarks_proto.landmark.extend([
      landmark_pb2.NormalizedLandmark(x=landmark.x, y=landmark.y, z=landmark.z) for landmark in face_landmarks
    ])

    solutions.drawing_utils.draw_landmarks(
        image=annotated_image,
        landmark_list=face_landmarks_proto,
        connections=mp.solutions.face_mesh.FACEMESH_TESSELATION,
        landmark_drawing_spec=None,
        connection_drawing_spec=mp.solutions.drawing_styles
        .get_default_face_mesh_tesselation_style())
    solutions.drawing_utils.draw_landmarks(
        image=annotated_image,
        landmark_list=face_landmarks_proto,
        connections=mp.solutions.face_mesh.FACEMESH_CONTOURS,
        landmark_drawing_spec=None,
        connection_drawing_spec=mp.solutions.drawing_styles
        .get_default_face_mesh_contours_style())
    solutions.drawing_utils.draw_landmarks(
        image=annotated_image,
        landmark_list=face_landmarks_proto,
        connections=mp.solutions.face_mesh.FACEMESH_IRISES,
          landmark_drawing_spec=None,
          connection_drawing_spec=mp.solutions.drawing_styles
          .get_default_face_mesh_iris_connections_style())

  return annotated_image

def plot_face_blendshapes_bar_graph(face_blendshapes):
  # Extract the face blendshapes category names and scores.
  face_blendshapes_names = [face_blendshapes_category.category_name for face_blendshapes_category in face_blendshapes]
  face_blendshapes_scores = [face_blendshapes_category.score for face_blendshapes_category in face_blendshapes]
  # The blendshapes are ordered in decreasing score value.
  face_blendshapes_ranks = range(len(face_blendshapes_names))

  fig, ax = plt.subplots(figsize=(12, 12))
  bar = ax.barh(face_blendshapes_ranks, face_blendshapes_scores, label=[str(x) for x in face_blendshapes_ranks])
  ax.set_yticks(face_blendshapes_ranks, face_blendshapes_names)
  ax.invert_yaxis()

  # Label each bar with values
  for score, patch in zip(face_blendshapes_scores, bar.patches):
    plt.text(patch.get_x() + patch.get_width(), patch.get_y(), f""{score:.4f}"", va=""top"")

  ax.set_xlabel('Score')
  ax.set_title(""Face Blendshapes"")
  plt.tight_layout()
  plt.show()

base_options = python.BaseOptions(model_asset_path='face_landmarker_v2_with_blendshapes.task')
options = vision.FaceLandmarkerOptions(base_options=base_options,
                                       output_face_blendshapes=True,
                                       output_facial_transformation_matrixes=True,
                                       num_faces=1)
detector = vision.FaceLandmarker.create_from_options(options)


cap = cv2.VideoCapture(0)
cap.set(cv2.CAP_PROP_FRAME_WIDTH, 1280)
cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 720)
cap.set(cv2.CAP_PROP_FPS, 30)
cap.set(cv2.CAP_PROP_FORMAT, -1)

while(cap.isOpened()):
    ret, frame = cap.read()
    if ret!=True: continue

    image = mp.Image(image_format=mp.ImageFormat.SRGB, data=frame)
    detection_result = detector.detect(image)
    annotated_image = draw_landmarks_on_image(image.numpy_view(), detection_result)
    cv2.imshow('annotated', cv2.flip(annotated_image, 1))
    if cv2.waitKey(1) & 0xFF == ord('q'): break

cap.release()
cv2.destroyAllWindows()"
fgVkyRPE,PlayerController,Raketa420311,C#,Monday 25th of March 2024 04:54:51 AM CDT,"using System;
using UnityEngine;

public class PlayerController : MonoBehaviour, IPlayerController
{
    [SerializeField] private CharacterData _playerData;
    [SerializeField] private CharacterBehaviour _playerBehaviour;
    private IInputService _inputService;

    public event Action OnPlayerDead;
    
    public float PlayerPositionZ => _playerBehaviour.PositionZ;

    private void Update()
    {
        if (!_playerBehaviour.IsMoving)
            return;
        
        if (!_playerBehaviour.IsAlive)
            return;

        Vector3 inputDirection = new Vector3(_inputService.MoveAxis.x, 0, 0);
        Vector3 moveDirection = (Vector3.forward + inputDirection).normalized;
        _playerBehaviour.Move(moveDirection);
        _playerBehaviour.RotateBody(_inputService.MoveAxis.x);
    }

    public void Initialize(IInputService inputService)
    {
        _inputService = inputService;
        
        _playerBehaviour.Initialize(_playerData);
        _playerBehaviour.OnCollideObstacle += HandlePlayerCollideObstacleEvent;
        _playerBehaviour.OnKill += HandlePlayerKillEvent;
        _inputService.OnJump += HandleJumpEvent;
        _inputService.OnDown += HandleDownEvent;
    }

    public void Dispose()
    {
        _playerBehaviour.OnCollideObstacle -= HandlePlayerCollideObstacleEvent;
        _playerBehaviour.OnKill -= HandlePlayerKillEvent;
        _inputService.OnJump -= HandleJumpEvent;
        _inputService.OnDown -= HandleDownEvent;
    }

    public void ResetPlayer(Vector3 position)
    {
        _playerBehaviour.transform.position = position;
        _playerBehaviour.Reset();
    }

    public void StartMove()
    {
        _playerBehaviour.StartMove();
    }

    public void StopMove()
    {
       _playerBehaviour.StopMove();
    }

    private void HandleJumpEvent()
    {
        _playerBehaviour.Jump();
    }

    private void HandleDownEvent()
    {
        _playerBehaviour.Down();
    }

    private void HandlePlayerCollideObstacleEvent()
    {
        _playerBehaviour.Kill();
    }

    private void HandlePlayerKillEvent()
    {
        OnPlayerDead?.Invoke();
    }
}"
FM5YVimH,CharacterBehaviour,Raketa420311,C#,Monday 25th of March 2024 04:54:34 AM CDT,"using System;
using System.Collections;
using UnityEngine;

public class CharacterBehaviour : MonoBehaviour
{
    [SerializeField] private CharacterController _characterController;
    [SerializeField] private CharacterAnimator _animator;
    [SerializeField] private RagdollController _ragdollController;
    [SerializeField] private Transform _body;
    [SerializeField] private Transform _groundCheckPoint;
    [SerializeField] private float _groundCheckDistance = 0.1f;
    private int _groundLayer;
    private bool _isGrounded;
    private Vector3 _moveDirection;
    private float _moveSpeed;
    private float _rotateAngle;
    private float _jumpHeight;
    private bool _isJumping;
    private AnimationCurve _jumpCurve;
    private bool _isAlive;
    private bool _isMoving;

    public event Action OnCollideObstacle;
    public event Action OnKill;

    public bool IsAlive => _isAlive;
    public bool IsMoving => _isMoving;
    public float PositionZ => transform.position.z;

    private void Update()
    {
        if (!_isAlive)
            return;
        
        CheckingGrounded();
        HandleGravity();
    }
    
    private void OnControllerColliderHit(ControllerColliderHit hit)
    {
        Obstacle obstacle = hit.gameObject.GetComponent<Obstacle>();
        
        if (obstacle != null)
        {
            Debug.Log($""Player collide obstacle = {hit.gameObject.name}"");
            OnCollideObstacle?.Invoke();
        }
    }

    public void Initialize(CharacterData characterData)
    {
        _animator.Initialize();
        
        _moveSpeed = characterData.BaseMoveSpeed;
        _rotateAngle = characterData.BaseRotateAngle;
        _jumpHeight = characterData.BaseJumpHeight;
        _jumpCurve = characterData.JumpCurve;
        _groundLayer = 1 << LayerMask.NameToLayer(""Ground"");
        
        _ragdollController.DeactivateRagdoll();
        _isAlive = true;
    }

    public void Move(Vector3 direction)
    {
        _moveDirection = direction * _moveSpeed;
        
        _characterController.Move(_moveDirection);
    }

    public void Jump()
    {
        if (!_isGrounded || _isJumping) 
            return;
        
        _animator.PlayJumpAnimation();
        _isJumping = true;
        StartCoroutine(JumpRoutine());
            
        Debug.Log(""Jump"");
    }

    public void Down()
    {
        _animator.PlayDownAnimation();
        Debug.Log(""Down"");
    }

    public void RotateBody(float moveHorizontalAxis)
    {
        float targetRotation = Mathf.Lerp(-_rotateAngle, _rotateAngle, (moveHorizontalAxis + 1f) / 2f);
        _body.transform.localRotation = Quaternion.Euler(0f, targetRotation, 0f);
    }

    public void Kill()
    {
        if (!_isAlive)
            return;

        _isAlive = false;
        _ragdollController.ActivateRagdoll();
        
        OnKill?.Invoke();
    }

    public void Reset()
    {
        _ragdollController.DeactivateRagdoll();
        _isAlive = true;
    }
    
    public void StartMove()
    {
        _isMoving = true;
        _animator.SetRunAnimation();
    }

    public void StopMove()
    {
        _isMoving = false;
        _animator.SetIdleAnimation();
    }

    private void HandleGravity()
    {
        if (!_isGrounded)
            _characterController.Move(Physics.gravity);
    }

    private void CheckingGrounded()
    {
        Collider[] colliders = Physics.OverlapSphere(_groundCheckPoint.position, _groundCheckDistance, _groundLayer);

        _isGrounded = colliders.Length > 0;
    }

    private IEnumerator JumpRoutine()
    {
        float timer = 0f;

        while (timer <= _jumpCurve.keys[_jumpCurve.length - 1].time)
        {
            float jumpHeight = _jumpCurve.Evaluate(timer) *_jumpHeight;
            Vector3 currentTransformPosition = transform.position;
            Vector3 jumpPosition = currentTransformPosition + Vector3.up * jumpHeight;
            Vector3 jumpDirection = jumpPosition - currentTransformPosition;
            
            _characterController.Move(jumpDirection);
        
            timer += Time.deltaTime;
            
            yield return null;
        }

        _isJumping = false;
    }
}"
xnNK99VX,140.213.219.189-/sdcard/Premium/useragent_ig.py.py,OBF-XIn,Python,Monday 25th of March 2024 04:47:17 AM CDT,"# useragent
import random

class Useragent:
    def __init__(self) -> None:
        pass
        
    def useragent_api(self):
        self.nexus = ['Galaxy Nexus', 'Nexus 10', 'Nexus 2', 'Nexus 4', 'Nexus 4', 'Nexus 4', 'Nexus 4', 'Nexus 4', 'Nexus 4', 'Nexus 5', 'phone/Nexus 5', 'Nexus 5X', 'Nexus 6', 'Nexus 7', 'Nexus 9', 'Nexus One', 'Nexus One', 'Nexus One', 'Nexus One', 'Nexus One', 'Nexus One', 'Nexus Player', 'Nexus Player', 'Nexus S', 'Nexus S', 'Nexus S 4G', 'nexus S', 'Nexus S', 'Nexus s', 'Nexus S', 'Nexus S', 'Nexus S', 'Nexus S', 'Nexus S']
        self.micromax = ['Micromax 10', 'Micromax 1J', 'Micromax 86519', 'Micromax A064', 'Micromax_A064', 'Micromax A065', 'Micromax_A065', 'Micromax A066', 'Micromax_A066', 'Micromax A067', 'Micromax_A067', 'MICROMAX_A068', 'MICROMAX A068', 'Micromax A068', 'Micromax A069', 'Micromax_A069', 'Micromax A075', 'Micromax A082', 'Micromax_A082', 'Micromax A089', 'Micromax_A089', 'Micromax A091', 'Micromax A092', 'Micromax_A092', 'Micromax A093', 'Micromax_A093', 'Micromax A095', 'Micromax A096', 'Micromax_A101', 'Micromax A102', 'Micromax_A102', 'Micromax A104', 'Micromax a104', 'Micromax A105', 'Micromax_A105', 'Micromax A106', 'Micromax-A106', 'Micromax A108', 'Micromax_A109', 'Micromax A109', 'Micromax A110', 'Micromax_A110', 'Micromax A110Q', 'Micromax_A110Q', 'Micromax A111', 'Micromax A114', 'Micromax A114R', 'Micromax_A114R', 'Micromax A115', 'Micromax_A115', 'Micromax A116', 'Micromax_A116', 'Micromax A116i', 'Micromax_A116i', 'Micromax A117', 'Micromax_A117', 'Micromax A118R', 'Micromax A119', 'Micromax A120', 'Micromax A121', 'Micromax_A121', 'Micromax A15', 'Micromax A177', 'Micromax A190', 'Micromax_A190', 'Micromax A200', 'Micromax_A200', 'Micromax A21', 'Micromax A210', 'Micromax A24', 'Micromax_A24', 'Micromax A25 Smarty', 'Micromax A250', 'Micromax A255', 'Micromax_A255', 'Micromax A26', 'Micromax_A26', 'Micromax_A27', 'Micromax A27', 'Micromax_A28', 'Micromax A28/GRI40', 'Micromax A28', 'Micromax A290', 'Micromax A30', 'Micromax A300', 'Micromax A310', 'Micromax A311', 'Micromax A315', 'Micromax_A315', 'Micromax_A316', 'Micromax A316', 'Micromax_A34', 'Micromax A34', 'Micromax_A35', 'Micromax A35', 'Micromax A350', 'Micromax_A36', 'Micromax A36', 'Micromax_A37', 'Micromax A37', 'Micromax A37B', 'Micromax_A37B', 'Micromax A40', 'Micromax_A40', 'Micromax A46', 'Micromax_A46', 'Micromax A47', 'MicromaxA47', 'Micromax_A50', 'Micromax A50', 'Micromax A51', 'Micromax A52', 'Micromax A54', 'Micromax A56', 'Micromax_A57', 'Micromax A57', 'Micromax A58', 'Micromax_A58', 'Micromax A59', 'Micromax A60', 'Micromax A61', 'Micromax A62', 'Micromax_A62', 'Micromax A63', 'Micromax_A63', 'Micromax_A65', 'Micromax A65', 'Micromax_A66', 'Micromax A66', 'Micromax A67', 'Micromax A68', 'Micromax A69', 'Micromax_A69', 'Micromax_A70', 'Micromax A700', 'Micromax A71', 'Micromax_A71', 'Micromax A72', 'Micromax_A72', 'Micromax A73', 'Micromax_A74', 'Micromax A74', 'Micromax A75', 'Micromax_A76', 'Micromax A76', 'Micromax A77', 'Micromax A78', 'Micromax A79', 'en_us Micromax A80', 'Micromax A80', 'Micromax A82', 'Micromax_A82', 'Micromax A84', 'Micromax A85', 'Micromax A86', 'Micromax_A86', 'Micromax_A87', 'Micromax A87', 'Micromax A87 . Ninja 4.0', 'Micromax A88', 'Micromax_A88', 'Micromax A89', 'Micromax A90', 'Micromax A90s', 'MIcromax_A90s', 'Micromax A90S', 'Micromax A91', 'Micromax_A91', 'Micromax_A92', 'Micromax A92', 'MicromaxA93', 'Micromax A93', 'Micromax A94', 'Micromax_A94', 'Micromax A96', 'Micromax_A96', 'Micromax A97', 'Micromax_A99', 'Micromax A99', 'Micromax_AD3520', 'Micromax AD3520', 'Micromax AD3550', 'Micromax AD4500', 'Micromax_AD4500', 'Micromax AE90', 'Micromax AO5510', 'Micromax AQ5000', 'Micromax B4A', 'Micromax B5 Pro', 'B5Pro', 'Micromax_Bharat_5_Plus', 'Micromax Q402Plus', 'Micromax Q440', 'Micromax Bharat 5', 'Micromax Q4204', 'Micromax Bharat 5 Plus', 'Micromax Bharat 5 Pro', 'Micromax Bolt 3425', 'Micromax Bolt 2', 'Micromax Q402+', 'Micromax Q306', 'Micromax Q3001', 'Micromax Q301', 'Micromax Q303', 'Micromax Q324', 'Micromax Q326', 'Q327', 'Micromax Q327', 'Micromax Q3301', 'Micromax Q333', 'Micromax_Q333', 'Micromax Q338', 'Micromax Q346', 'Micromax Q354', 'Micromax Q357', 'Micromax Q383', 'Micromax_S302', 'Micromax S302', 'Micromax Q424', 'Micromax Q352', 'Micromax Q4101', 'Micromax C2A', 'Micromax C9', 'Micromax C1', 'Micromax C1A', 'Micromax C2APLS', 'Micromax Q4310', 'Micromax E4815', 'arm_64 Micromax E481', 'Micromax E481', 'Micromax E4816', 'Micromax Q462', 'Micromax Q463', 'Micromax E485', 'Micromax E484', 'Micromax AQ4501', 'Micromax AQ4502', 'A240', 'Micromax A240', 'Micromax Q391', 'Micromax E453', 'Micromax A107', 'Micromax HS2', 'Micromax HS1', 'Micromax_HS3', 'en Micromax_HS3', 'AQ5001', 'Micromax AQ5001', 'AQ5001 Canvas Power', 'Micromax Q392', 'Micromax Q465', 'Micromax Q461', 'Micromax Q350R', 'Micromax Q421', 'Micromax Q417', 'Micromax Q426', 'Micromax Q4260', 'Micromax E311', 'Micromax E352', 'Micromax E455', 'Micromax Q415', 'Micromax Q355', 'Micromax Q469', 'Micromax E451', 'Micromax E451', 'Micromax Q340', 'Micromax Q349', 'Micromax Q345', 'Micromax Q450', 'Micromax Q480', 'arm_64 Micromax Q480', 'Micromax Q380', 'Micromax Q3502', 'Micromax Q351', 'Micromax Q385', 'P70221', 'Micromax P681', 'MicromaxP802', 'Micromax Q427', 'Micromax_Q427', 'Micromax Q413', 'Micromax E313', 'Micromax D2', 'Micromax D200', 'Micromax_D200', 'Micromax D303', 'Micromax D304', 'Micromax_D304', 'Micromax D305', 'Micromax D306', 'Micromax D320', 'Micromax D321', 'Micromax D333', 'Micromax D340', 'Micromax D7517', 'Micromax DM5003', 'Micromax E353', 'Micromax E457', 'Micromax E458', 'Micromax E460', 'Micromax E471', 'Micromax E4817', 'Micromax E482', 'Micromax E483', 'Micromax E5018M', 'Micromax EG111', 'Micromax EG116', 'micromax F', 'micromax F189', 'Micromax F601', 'MicromaxF666', 'Micromax IN', 'Micromax E7533', 'Micromax E6523', 'IN_2b', 'IN_Note1', 'MICROMAX IN1', 'N8216', 'N8301', 'ione note', 'MICROMAX ione note', 'Micromax N4120', 'Micromax N8202', 'Micromax Ninja', 'Micromax Nitro', 'Micromax Note 1+', 'Micromax Note 5', 'Micromax Note3', 'Micromax NX', 'Micromax P001', 'Micromax P250(Funbook)', 'Micromax P255', 'Micromax P256', 'xx Micromax P275', 'Micromax_P275', 'Micromax P275', 'Micromax P280', 'Micromax P290', 'Micromax P310', 'Micromax P350', 'xx Micromax P350', 'Micromax P360', 'Micromax P362', 'Micromax P365', 'Micromax P410', 'Micromax P410i', 'Micromax_P410i', 'Micromax P420', 'Micromax P469', 'Micromax P470', 'MicromaxP480', 'Micromax P500(Funbook)', 'Micromax P560', 'Micromax P580', 'Micromax P580i', 'Micromax P600', 'Micromax P650', 'Micromax P650E', 'Micromax P660', 'Micromax P660', 'Micromax_P666', 'Micromax P666', 'MicromaxP680', 'Micromax P690', 'Micromax P701', 'MicromaxP702', 'Micromax P810', 'en Micromax Q300', 'Micromax_Q300', 'Micromax Q323', 'Micromax_Q323', 'Micromax Q325', 'Micromax_Q325', 'Micromax Q331', 'Micromax_Q331', 'Micromax Q332', 'Micromax_Q332', 'Micromax Q334', 'Micromax Q335', 'Micromax_Q335', 'Micromax Q336', 'Micromax_Q336', 'Micromax Q341', 'Micromax Q343', 'Micromax Q348', 'Micromax_Q353', 'en Micromax_Q353', 'Micromax_Q353P', 'Micromax Q3551', 'Micromax Q3555', 'Micromax Q361', 'Micromax Q370', 'Micromax_Q370', 'Micromax Q371', 'Micromax_Q371', 'Micromax Q375', 'Micromax_Q375', 'Micromax Q379', 'Micromax Q381', 'Micromax Q382', 'Micromax Q386', 'Micromax Q394', 'Micromax_Q394', 'Micromax Q395', 'Micromax Q397', 'Micromax Q398', 'arm Micromax Q398', 'Micromax Q400', 'Micromax_Q400', 'Micromax Q4002', 'en Micromax Q4002', 'Micromax Q401', 'Micromax Q402', 'Micromax Q402 Ultra', 'Micromax Q404', 'Micromax Q411', 'Micromax_Q411', 'Micromax Q412', 'Micromax Q414', 'Micromax Q416', 'Micromax Q419', 'Micromax Q4201', 'Micromax Q422', 'Micromax Q4220', 'Micromax Q423', 'Micromax Q428', 'Micromax_Q428', 'Micromax Q429', '720X1280 Micromax Q4309', 'Micromax Q4312', 'en_US Micromax Q437', 'Micromax Q440Plus', 'Micromax Q454', 'Micromax Q470', 'Micromax Q479', 'Micromax Q491', 'Micromax_Q491', 'Micromax Q502+', 'Micromax Q666', 'Micromax Q67', 'micromax Q68', 'micromax Q78', 'Micromax S300', 'Micromax_S300', 'Micromax S301', 'Micromax_S301', 'Micromax Q4311', 'Micromax Q4601', 'Micromax Q409A', 'Micromax Q409', 'Micromax Q452', 'Micromax Unite 3', 'Micromax Unite 2', 'Micromax Unite 2 A106', 'Micromax Q372', 'Micromax V89', 'Micromax Q4001', 'Micromax Q4202', 'Micromax Q4251', 'arm Micromax Q4251', 'Micromax W5509', 'Micromax X5098', 'Micromax-Xzoom A52', 'YU5530', 'YU5040', 'Micromax YU5900', 'YU5012', 'Micromax Z59']
        self.onpls = ['NE2213', 'NE2217', 'NE2215', 'NE2210', 'NE2210', 'CPH2423', 'CPH2411', 'CPH2417', 'CPH2413', 'CPH2415', 'CPH2449', 'CPH2487', 'ONE A2003', 'ONE A2003', 'ONE A2001', 'ONE A2005', 'ONEPLUS A3003', 'ONEPLUS A3000', 'ONEPLUS A3010', 'ONEPLUS A5000', 'ONEPLUS A5000', 'ONEPLUS A5010', 'ONEPLUS A5010', 'ONEPLUS A5010', 'ONEPLUS A5010', 'ONEPLUS A5010', 'ONEPLUS A6003', 'ONEPLUS A6000', 'ONEPLUS A6010', 'ONEPLUS A6013', 'ONEPLUS A6010', 'GM1900', 'GM1901', 'GM1903', 'GM1917', 'GM1913', 'GM1911', 'GM1910', 'GM1915', 'GM1910', 'HD1901', 'HD1903', 'HD1900 Flow', 'HD1905', 'HD1900', 'HD1907', 'HD1911', 'HD1913', 'HD1910', 'GM1925', 'HD1925', 'GM1920', 'IN2013', 'IN2015', 'IN2010', 'IN2010', 'IN2017', 'IN2019', 'IN2023', 'IN2025', 'IN2020', 'OnePlus8Pro', 'KB2005', 'KB2001', 'KB2007', 'KB2003', 'KB2000', 'OnePlus 8T 5G', 'LE2115', 'LE2113', 'LE2111', 'LE2110', 'LE2120', 'LE2125', 'LE2123', 'LE2121', 'LE2127', 'OnePlus9Pro', 'LE2101', 'LE2100', 'MT2111', 'MT2110', 'ONEPLUS A19677', 'ONEPLUS A2345', 'Oneplus A31', 'Oneplus A3331', 'ONEPLUS A35904', 'ONEPLUS A37000', 'ONEPLUS A3EVB', 'ONEPLUS A62322', 'ONEPLUS A64794', 'ONEPLUS A65369', 'ONEPLUS A68333', 'ONEPLUS A70458', 'ONEPLUS A70791', 'ONEPLUS A78637', 'ONEPLUS A80828', 'ONEPLUS A83306', 'ONEPLUS A87046', 'ONEPLUS A90641', 'Oneplus A99831', 'PGKM10', 'PGKM10', 'PHK110', 'PHK110', 'PGP110', 'PGP110', 'PGZ110', 'ONEPLUS KB2023', 'OnePlus Nord', 'Oneplus Nord 2', 'DN2103', 'DN2101', 'CPH2399', 'CPH2401', 'AC2001', 'AC2003', 'IV2201', 'CPH2409', 'CPH2381', 'CPH2465', 'EB2103', 'EB2101', 'EB2101', 'BE2025', 'BE2026', 'BE2029', 'Nord N10 5G', 'BE2028', 'BE2013', 'BE2011', 'BE2012', 'CPH2459', 'GN2200', 'CPH2469', 'DE2118', 'DE2117', 'A0001', 'ONE E1001', 'ONE E1003', 'ONE E1001', 'ONE E1005']
        self.oppo = [""CPH1869"", ""CPH1929"",""CPH2107"", ""CPH2238"", ""CPH2389"",""CPH2401"", ""CPH2407"", ""CPH2413"", ""CPH2415"", ""CPH2417"", ""CPH2419"", ""CPH2455"", ""CPH2459"", ""CPH2461"", ""CPH2471"", ""CPH2473"", ""CPH2477"", ""CPH8893"", ""CPH2321"", ""CPH2341"", ""CPH2373"", ""CPH2083"", ""CPH2071"", ""CPH2077"", ""CPH2185"", ""CPH2179"", ""CPH2269"", ""CPH2421"", ""CPH2349"", ""CPH2271"", ""CPH1923"", ""CPH1925"", ""CPH1837"", ""CPH2015"", ""CPH2073"", ""CPH2081"", ""CPH2029"", ""CPH2031"", ""CPH2137"", ""CPH1605"", ""CPH1803"", ""CPH1853"", ""CPH1805"", ""CPH1809"", ""CPH1851"", ""CPH1931"", ""CPH1959"", ""CPH1933"", ""CPH1935"", ""CPH1943"", ""CPH2061"", ""CPH2069"", ""CPH2127"", ""CPH2131"", ""CPH2139"", ""CPH2135"", ""CPH2239"", ""CPH2195"", ""CPH2273"", ""CPH2325"", ""CPH2309"", ""CPH1701"", ""CPH2387"", ""CPH1909"", ""CPH1920"", ""CPH1912"", ""CPH1901"", ""CPH1903"", ""CPH1905"", ""CPH1717"", ""CPH1801"", ""CPH2067"", ""CPH2099"", ""CPH2161"", ""CPH2219"", ""CPH2197"", ""CPH2263"", ""CPH2375"", ""CPH2339"", ""CPH1715"", ""CPH2385"", ""CPH1729"", ""CPH1827"", ""CPH1938"", ""CPH1937"", ""CPH1939"", ""CPH1941"", ""CPH2001"", ""CPH2021"", ""CPH2059"", ""CPH2121"", ""CPH2123"", ""CPH2203"", ""CPH2333"", ""CPH2365"", ""CPH1913"", ""CPH1911"", ""CPH1915"", ""CPH1969"", ""CPH2209"", ""CPH1987"", ""CPH2095"", ""CPH2119"", ""CPH2285"", ""CPH2213"", ""CPH2223"", ""CPH2363"", ""CPH1609"", ""CPH1613"", ""CPH1723"", ""CPH1727"", ""CPH1725"", ""CPH1819"", ""CPH1821"", ""CPH1825"", ""CPH1881"", ""CPH1823"", ""CPH1871"", ""CPH1875"", ""CPH2023"", ""CPH2005"", ""CPH2025"", ""CPH2207"", ""CPH2173"", ""CPH2307"", ""CPH2305"", ""CPH2337"", ""CPH1955"", ""CPH1707"", ""CPH1719"", ""CPH1721"", ""CPH1835"", ""CPH1831"", ""CPH1833"", ""CPH1879"", ""CPH1893"", ""CPH1877"", ""CPH1607"", ""CPH1611"", ""CPH1917"", ""CPH1919"", ""CPH1907"", ""CPH1989"", ""CPH1945"", ""CPH1951"", ""CPH2043"", ""CPH2035"", ""CPH2037"", ""CPH2036"", ""CPH2009"", ""CPH2013"", ""CPH2113"", ""CPH2091"", ""CPH2125"", ""CPH2109"", ""CPH2089"", ""CPH2065"", ""CPH2159"", ""CPH2145"", ""CPH2205"", ""CPH2201"", ""CPH2199"", ""CPH2217"", ""CPH1921"", ""CPH2211"", ""CPH2235"", ""CPH2251"", ""CPH2249"", ""CPH2247"", ""CPH2237"", ""CPH2371"", ""CPH2293"", ""CPH2353"", ""CPH2343"", ""CPH2359"", ""CPH2357"", ""CPH2457"", ""CPH1983"", ""CPH1979""]
        self.vivo = ['vivo 1002T', 'Vivo 1605', 'vivo 1730', 'vivo 1809', 'vivo_1820', 'vivo 1835', 'vivo 1914', 'vivo 2010', 'vivo 2019', 'vivo 2019', 'vivo 2019', 'vivo 2023', 'vivo 2027', 'vivo 3969', 'VIVO 5', 'Vivo 6', 'Vivo 7 Pro', 'Vivo 8', 'Vivo 93K Prime', 'vivo A5 ', 'vivo a54', 'Vivo A54', 'vivo a57', 'Vivo A87', 'VIVO A94', 'VIVO AIR', 'VIVO C8818', 'vivo E1', 'vivo E3', 'vivo E3', 'vivo E5', 'Vivo EGO', 'V1962BA', 'vivo h5', 'V1824A', 'V1824A', 'V1824BA', 'V2217A', 'V2217A', 'V2218A', 'V2218A', 'V2218A', 'V2243A', 'V1955A', 'I1927', 'I1928', 'V2024A', 'V2025A', 'V2025A', 'V2049A', 'V2049A', 'I2009', 'I2012', 'I2012', 'V2136A', 'V2136A', 'V2141A', 'V2171A', 'I2017', 'V2172A', 'V2172A', 'I2022', 'I2019', 'I2019', 'I2201', 'V1914A', 'V1914A', 'V1981A', 'V2055A', 'V2118A', 'V2157A', 'V2157A', 'V2154A', 'V2196A', 'V2196A', 'V2199A', 'V2231A', 'V2238A', 'V1936AL', 'V1936A', 'V1922A', 'V1922A', 'V1922A ', 'V1916A', 'V2023A', 'V2023A', 'VIVO V2023A', 'V2065A', 'V2061A', 'V2061A', 'V2143A', 'V2106A', 'V2165A', 'V2165A', 'V2180GA', 'V1986A', 'V2012A', 'V2012A', 'V2073A', 'V2073A', 'I2011', 'V2148A', 'I2018', 'V1919A', 'V2131A', 'V2220A', 'I2202', 'I2206', 'I2203', 'I2202', 'I2127', 'I2202', 'I2208', 'I2208', 'I2126', 'I2126', 'I2126', 'V2164KA', 'V2164KA', 'VIVO IV', 'VIVO IV', 'VIVO IV', 'VIVO IV', 'Vivo J5', 'vivo 1805', 'vivo 1805', 'vivo NEX', 'V1923A', 'vivo 1912', 'V1923A', 'vivo 1912', 'vivo 1913', 'V1924A', 'V1924A', 'vivo 1913', 'V1950A', 'V1950A', 'vivo NEX A', 'vivo NEX A', 'vivo 1813', 'V1821A', 'V1821A', 'vivo NEX S', 'vivo NEX S', 'Vivo ONE', 'Vivo ONE', 'PA2170', 'vivo PD1628F_EX', 'vivo PD1709', 'vivo PD1709F_EX', 'vivo PD1709F_EX', 'vivo PD1728', 'vivo PD1728', 'vivo PD1832F_EX', 'vivo PD2046F_EX', 'vivo PD2050F_EX', 'vivo PD2055F_EX', 'vivo PD2059F_EX', 'Vivo S', 'V1831A', 'V1831A', 'VIVO S1', 'Vivo S1 Prime', 'V1832A', 'V1832T', 'V2121A', 'V2121A', 'V2130A', 'V2130A', 'Vivo S11', 'Vivo S11 ', 'vivo S11t', 'vivo S11t', 'vivo S11t', 'vivo S11t', 'vivo S12', 'V2162A', 'Vivo S13', 'V2203A', 'V2207A', 'V2190A', 'V2244A', 'vivo S1Pro', 'Vivo S20 ', 'Vivo S21 ', 'Vivo S31', 'Vivo S4', 'Vivo S40', 'Vivo S41 /MMB439M', 'V1932A', 'vivo S6', 'V1962A', 'vivo S6T', 'V2020CA', 'V2020A', 'Vivo S76', 'V2031EA', 'vivo S7i(t)', 'vivo S7i(t)', 'vivo S7i(t)', 'V2080A', 'vivo S7t', 'vivo_S7t', 'vivo S7t', 'S7t 5G', 'vivo S7w', 'vivo S8', 'vivo S9', 'vivo S9', 'vivo S9', 'V2072A', 'V2048A', 'vivo S9t', 'V2168', 'V2168', 'V2153', 'V2153', 'V2150', 'V2151', 'V2151', 'V2151', 'V2143', 'vivo TD1602_EX', 'vivo U1', 'vivo 1916', 'vivo 1916', 'vivo 1921', 'V1941A', 'V1941A', 'V1928A', 'vivo V1', 'vivo V1', 'vivo V10', 'Vivo V10', 'VIVO V11', 'Vivo V11', 'vivo 1804', 'vivo 1804', 'vivo 1806', 'vivo 1806', 'vivo v11pro', 'vivo 1819', 'vivo 1818', 'vivo 1818', 'vivo 1920', 'vivo 1919', 'vivo 1907', 'vivo 1907', 'vivo 1907_19', 'vivo 1910', 'vivo 1909', 'vivo 1910', 'vivo 1933', 'vivo 1933', 'vivo V1907', 'vivo v19neo', 'vivo V1Max', 'vivo V1Max', 'vivo V2', 'V2040', 'vivo 2018', 'vivo 2018', 'V2022', 'Vivo V20A', 'Vivo V20G', 'V2066', 'V2108', 'V2050', 'V2050', 'V2050', 'V2061', 'V2055', 'Vivo V21S', 'V2130', 'V2132A', 'V2116', 'V2115', 'V2116', 'V2116', 'V2126', 'V2126', 'V2228', 'V2228', 'V2158', 'V2158', 'V2202', 'V2202', 'V2201', 'V2246', 'V2230', 'V2230', 'V2237', 'vivo V3', 'vivo V3', 'vivo V3Max A', 'vivo V3Max L', 'vivo v30', 'vivo v31', 'vivo V3L', 'vivo V3L', 'vivo V3L', 'vivo V3L', 'vivo V3M A', 'vivo V3M A', 'vivo V3MA', 'vivo_V3Max', 'vivo v45', 'vivo 1601', 'vivo V5', 'vivo 1609', 'vivo 1611', 'Vivo V51', 'Vivo V54', 'vivo 1612', 'vivo 1713', 'vivo V5S A', 'vivo 1718', 'vivo 1716', 'vivo Y79A', 'vivo Y79A', 'V2166BA', 'Vivo V8', 'vivo 1723', 'vivo V9 mini', 'vivo 1851', 'VIVO V9Pro', 'vivo 1851', 'vivo 1727', 'Vivo X', 'V2178A', 'V2229A', 'V2170A', 'V2170A', 'vivo Xplay3S', 'vivo Xplay3S', 'vivo Xplay3S', 'vivo Xplay5A', 'vivo Xplay5A', 'vivo Xplay5A', 'vivo Xplay5S', 'vivo Xplay5S', 'vivo Xplay6', 'vivo Xplay6L', 'vivo Xplay6', 'vivo Xplay6', 'vivo X710L', 'vivo X710L', 'vivo X710L', 'vivo X710L', 'vivo X1', 'vivo X1', 'vivo X1', 'vivo X1', 'Vivo X11', 'vivo X1S', 'vivo X1S', 'vivo X1S', 'vivo X1St', 'vivo X1St', 'vivo X1St', 'vivo X1St', 'vivo X1St', 'vivo X1W', 'vivo X1w', 'VIVO X2', 'VIVO X2', 'VIVO_X2', 'vivo X20', 'vivo X20A', 'vivo X20Plus A', 'vivo 1720', 'vivo X20Plus UD', 'vivo X20Plus UD', 'vivo X21', 'vivo X21A', 'vivo X21UD A', 'vivo X21i', 'vivo X21i A', 'vivo X21i', 'vivo X21i A ', 'V1814A', 'V1814T', 'V1814T', 'V1814A', 'V1809A', 'V1809A', 'V1816A', 'V1809T', 'V1816T', 'V1829A', 'V1838A', 'V1838T', 'V1829T', 'V1836A', 'V1836A', 'V1836T', 'vivo X27Pro', 'V1938CT', 'V1938T', 'V1938T', 'vivo X3F', 'vivo X3F', 'vivo X3F', 'vivo X3L', 'vivo X3L', 'vivo X3S', 'vivo X3S', 'vivo X3S', 'vivo X3S', 'vivo X3S', 'vivo X3S', 'vivo X3S W', 'vivo X3S W', 'vivo X3S W', 'vivo X3S W', 'vivo X3t', 'vivo X3t', 'vivo X3t', 'vivo X3t', 'vivo X3V', 'vivo X3V', 'vivo X3V', 'vivo X3V', 'Vivo X40', 'vivo X5L', 'vivo X5', 'vivo X5L', 'vivo X5Pro D', 'vivo X5Pro L', 'vivo X5Pro V', 'vivo X5Pro D', 'vivo X5Pro D', 'V2001A', 'V2001A', 'vivo 2004', 'vivo 2005', 'vivo 2005', 'V1937', 'vivo 1937', 'V1937', 'V1937', 'vivo 2006', 'vivo 2006', 'V2005A', 'V2011A', 'X50 Pro+', 'V1930', 'V1930', 'vivo X510t', 'vivo X510t', 'vivo X510t', 'vivo X510t', 'vivo X510t', 'vivo X520L', 'vivo X5F', 'vivo X5M', 'vivo X5M', 'vivo X5M', 'vivo X5Max ', 'vivo X5Max L', 'vivo X5Max L', 'vivo X5Max S', 'vivo X5Max V', 'vivo X5S L', 'vivo X5S L', 'vivo X5V', 'vivo X5V', 'vivo X5V', 'vivo X6D', 'vivo X6A', 'vivo X6Plus D', 'vivo X6Plus A', 'vivo X6Plus L', 'vivo X6Plus D', 'vivo X6Plus A', 'vivo X6Plus D', 'vivo X6Plus L', 'V2046A', 'V2059A', 'V2046A', 'V2045', 'V2046', 'V2047A', 'V2056A', 'V2085A', 'vivo X6S A', 'vivo X6S A', 'vivo X6S A', 'vivo X6S A', 'vivo X6SPlus D', 'vivo X6SPlus D', 'vivo X6SPlus D', 'vivo X6SPlus D', 'vivo X6SPlus A', 'vivo X7L', 'vivo X7Plus', 'vivo X7Plus', 'V2133A', 'V2104', 'V2104', 'V2105', 'V2134A', 'V2105', 'V2145A', 'V2114', 'V2145A', 'vivo X710F', 'vivo X710F', 'vivo X710F', 'vivo X710F', 'V2144', 'V2183A', 'V2144', 'V2208', 'V2185A', 'V2145', 'V2185A', 'Vivo X83', 'vivo X9', 'vivo X9L', 'vivo X9', 'vivo X9', 'vivo X9Plus', 'vivo X9Plus L', 'V2241A', 'V2242A', 'V2242A', 'V2227A', 'vivo X9i', 'vivo X9i', 'vivo X9i', 'vivo X9s', 'vivo X9s L', 'vivo X9s Plus', 'vivo X9s Plus', 'vivo X9s Plus L', 'vivo X9s Plus', 'VIVO XL', 'vivo Xplay', 'vivo Xshot', 'vivo Xshot', 'vivo Xshot', 'vivo Xshot', 'V2203', 'V2221', 'Vivo y1', 'Vivo Y1', 'V2168A', 'V2168A', 'vivo 1906', 'V2028', 'vivo Y11t', 'vivo Y11t', 'vivo Y11t', 'vivo 1904', 'V2163A', 'V2102', 'V2102', 'vivo 2007', 'vivo 2007', 'Vivo Y12I Pro', 'V2026', 'V2042', 'V2033', 'V2039', 'V2069', 'V2026_21', 'vivo Y13L', 'vivo Y13', 'vivo Y13L', 'vivo Y13L', 'vivo Y13i', 'vivo_Y13i', 'vivo Y13iL', 'vivo Y13iL', 'vivo Y13T', 'vivo Y13T', 'vivo 1901', 'vivo Y15T', 'vivo Y15T', 'V2134', 'V2147', 'V2147', 'V2212', 'V2120', 'V2204', 'V2214', 'V2204', 'vivo 1902', 'vivo 1902_19', 'VIVO 1902', 'vivo Y17T', 'vivo Y17T', 'vivo_Y17T', 'vivo Y17T', 'vivo Y17W', 'vivo Y17W', 'vivo Y17W', 'vivo Y18L', 'vivo Y18L', 'vivo Y18L', 'vivo 1915', 'vivo Y19t', 'vivo Y19t', 'vivo Y19t', 'vivo Y19t', 'Vivo Y1i', 'vivo 2015', 'vivo 2015', 'V2029', 'V2027', 'V2043_21', 'V2101', 'V2070', 'V2054', 'V2052', 'V2037', 'V2032', 'V2038', 'V2038', 'V2129', 'V2129', 'V2111', 'V2149', 'V2140', 'V2140', 'V2152', 'V2152', 'V2110', 'V2110', 'V2131', 'V2135', 'V2207', 'vivo Y22iL', 'vivo Y22iL', 'V2206', 'V2206', 'vivo Y23L', 'vivo Y23L', 'vivo y23l', 'vivo Y23L', 'vivo Y23L', 'vivo Y23L', 'vivo 1613', 'vivo Y27', 'vivo Y27L', 'vivo Y27', 'vivo Y28', 'vivo Y28', 'vivo Y28L', 'vivo Y28L', 'vivo Y29L', 'vivo Y29L', 'vivo Y29L', 'V1901A', 'V1901A', 'V1901A', 'V1901T', 'V1930A', 'vivo 1938', 'V2034A', 'V2036A', 'V2099A', 'V2099A', 'V2160', 'V2160', 'V2160', 'V2066BA', 'V2066A', 'Y30g', 'Vivo Y30S', 'vivo Y31L', 'V2068', 'V2054A', 'V2068A', 'V2068', 'V2158A', 'Vivo Y32', 'V2180A', 'V2057', 'V2109', 'V2166A', 'V2166A', 'V2146', 'V2205', 'V2205', 'vivo Y37A', 'vivo Y37', 'V2044', 'vivo Y3t', 'vivo Y3t', 'vivo Y3t', 'vivo y41', 'vivo Y5 ', 'Vivo Y5', 'vivo 1935', 'VIVO Y50(2021)', 'V2023EA', 'Y50t', 'V2035', 'vivo Y51L', 'vivo Y51A', 'V2030', 'vivo 1707', 'V2031_21', 'vivo Y51t L', 'vivo Y51t L', 'vivo Y51t L', 'V2053', 'V2057A', 'vivo Y53', 'vivo 1606A', 'vivo Y53n', 'V2058', 'V2123A', 'V2069A', 'V2045A', 'V2045A', 'vivo Y55A', 'V2127', 'V2127', 'vivo 1603', 'vivo Y55n', 'vivo 1610', 'V2164A', 'V2164A', 'V1934A', 'V2006', 'vivo Y613', 'vivo Y613', 'vivo Y613F', 'vivo Y622', 'vivo Y622', 'vivo Y622', 'vivo Y622', 'vivo Y622', 'vivo Y623', 'vivo Y623', 'vivo Y627', 'vivo Y627', 'vivo Y627', 'vivo Y627', 'vivo Y628', 'vivo Y628', 'vivo 1719', 'vivo Y66', 'vivo Y66L', 'vivo Y66i A', 'vivo Y67', 'vivo Y67A', 'vivo Y67L', 'vivo Y685', 'vivo 1714', 'vivo Y69A', 'V2002A', 'V2002A', 'vivo Y71A', 'vivo 1724', 'vivo Y71A', 'vivo 1801', 'V2041', 'V2060', 'V2102A', 'V1731CA', 'vivo Y73', 'Vivo Y73 /MMB239M', 'V2059', 'V2031A', 'V2164PA', 'V2117', 'vivo Y75A', 'V2142', 'V2142', 'vivo Y75s', 'vivo Y75s', 'vivo Y75S', 'vivo Y75s', 'V2124', 'V2156A', 'V2219A', 'V2219A', 'V2169', 'V2169', 'V1913A', 'vivo 1808i', 'vivo 1803', 'vivo 1803', 'vivo 1812', 'vivo Y81S', 'V1732A', 'V1732T', 'vivo Y83A', 'vivo 1802', 'vivo Y83A', 'vivo Y83A', 'vivo 1726', 'Vivo Y83I', 'vivo Y85A', 'vivo Y85', 'Vivo Y85i', 'Vivo Y86', 'V1730EA', 'vivo v1730ea', 'vivo 1908', 'vivo 1823', 'vivo 1908_19', 'vivo 1817', 'vivo 1811', 'vivo Y913', 'vivo Y913', 'vivo Y91C', 'vivo 1820', 'vivo 1816', 'vivo Y923', 'vivo Y923', 'vivo Y927', 'vivo Y927', 'vivo Y928', 'vivo Y928', 'vivo Y928', 'vivo 1814', 'V1818A', 'V1818A', 'vivo 1814', 'vivo Y937', 'vivo Y937', 'vivo Y937', 'V1818CT', 'V1818CA', 'vivo 1807', 'vivo Y95', 'V1813A', 'V1813T', 'V1813A', 'vivo Y97', 'V1945A', 'V1801A0', 'vivo Z1', 'vivo 1918', 'vivo 1951', 'vivo 1951', 'VIVO Z1Pro', 'vivo 1918', 'vivo 1918 Flow', 'Vivo Z10', 'vivo Z1i', 'V1730DA', 'V1730DT', 'vivo Z1i', 'vivo_1951', 'vivo 1917', 'V1813BA', 'V1813BT', 'V1813BT', 'Vivo Z34', 'vivo Z3x', 'V1730GA', 'vivo Z3x', 'vivo Z3x', 'V1921A', 'V1911A', 'V1911A', 'V1911A', 'V1990A', 'V1990A', 'V1963A', 'V1963A']
        self.infinix = [""Infinix X652B"", ""Infinix X680"", ""Infinix X690"", ""Infinix X625B"", ""Infinix X655"", ""Infinix X680B"", ""Infinix X652B"", ""Infinix X680"", ""Infinix X690"", ""Infinix X625B"", ""Infinix X655"", ""Infinix X680B"", ""Infinix X652B"", ""Infinix X680"", ""Infinix X690"", ""Infinix X625B"", ""Infinix X655"", ""Infinix X680B"", ""Infinix X652B"", ""Infinix X680"", ""Infinix X690"", ""Infinix X625B"", ""Infinix X655"", ""Infinix X680B"", ""Infinix X652B"", ""Infinix X680"", ""Infinix X690"", ""Infinix X625B"", ""Infinix X655"", ""Infinix X680B""]
        self.opp = random.choice([""OP4F97"", ""OP4BA5L1"", ""OP664D1"", ""OP5F11L1"", ""OP2A92"", ""OP8F17"", ""OP8F31"", ""OP4C9E1"", ""OP5B31"", ""OP4BA6L1"", ""OP2B87"", ""OP6F21"", ""OP6C8E1"", ""OP8F11"", ""OPPOA16"", ""OPPOA15"", ""OPPOA11"", ""OPPOA73"", ""OPPOA37"", ""OPPOA53"", ""OPPOA33"", ""OPPOA93"", ""OPPOA35"", ""OPPOA83"", ""OPPOA57"", ""OPPOA71"", ""OPPOA39"", ""OPPOA3"", ""OPPOA51"", ""OPPOA27"", ""OPPOA79""])
        self.trek = random.choice([""mt6769"", ""mt6768"", ""mt6767"", ""mt6765"", ""mt6763"", ""mt6757"", ""mt6755"", ""mt6753"", ""mt6739"", ""mt6737"", ""mt6735"", ""mt6595"", ""mt6582"", ""mt6572"", ""mt6571"", ""mt6570"", ""mt8563"", ""mt8167"", ""mt8163"", ""mt8135"", ""mt8127"", ""mt8125"", ""mt7623"", ""mt6797"", ""mt6592"", ""mt6590"", ""mt6580"", ""mt6573"", ""mt6575"", ""mt6260"", ""mt6236""])
        self.igversi = (""100.0.0.17.129,100.0.0.17.129,100.0.0.17.129,100.0.0.17.129,100.0.0.17.129,100.0.0.17.129,79.0.0.21.101,78.0.0.11.104,77.0.0.20.113,76.0.0.15.395,75.0.0.23.99,74.0.0.21.99,73.0.0.22.185,72.0.0.21.98,71.0.0.18.102,70.0.0.22.98,69.0.0.30.95,68.0.0.11.99,67.0.0.25.100,66.0.0.11.101,65.0.0.12.86,64.0.0.14.96,63.0.0.17.94,62.0.0.19.93,61.0.0.19.86,60.1.0.17.79,59.0.0.23.76,58.0.0.12.73,57.0.0.9.80,56.0.0.13.78,55.0.0.12.79,54.0.0.14.82,53.0.0.13.84,52.0.0.8.83,51.0.0.20.85,50.1.0.43.119,271.1.0.21.84,131.0.0.23.11,130.0.0.31.12,128.0.0.26.12,126.0.0.25.12,125.0.0.20.12,124.0.0.17.47,123.0.0.21.11,122.0.0.29.23,120.0.0.29.11,119.0.0.33.14,118.0.0.28.12,117.0.0.28.12,115.0.0.26.11,114.0.0.38.12,113.0.0.39.12,112.0.0.29.12,111.1.0.25.15,110.0.0.16.11,109.0.0.18.12,108.0.0.23.11,107.0.0.27.12,106.0.0.24.11,105.0.0.18.11,104.0.0.21.11,103.1.0.15.11,102.0.0.20.11,101.0.0.15.12,100.0.0.17.12,99.0.0.32.182,98.0.0.15.119,97.0.0.32.119"").split(',')
        self.dix = random.choice(self.igversi)
        self.dpi_pxl = random.choice(['240dpi; 1760x792', '240dpi; 1920x864', '320dpi; 2400x1080', '400dpi; 3200x1440', '480dpi; 1080x1920', '320dpi; 900x1600', '320dpi; 720x1280', '240dpi; 540x960', '280dpi; 1920x1080', '240dpi; 160x900', '240dpi; 1280x720', '160dpi; 960x540','160dpi; 623x1280'])
        self.dpi = random.choice([""133"",""320"",""515"",""160"",""640"",""240"",""120"",""800"",""480"",""225"",""768"",""216"",""1024""])
        self.pxl = random.choice([""1080x2161"",""1080x2158"",""1080x2290"",""720x1448"",""1080x2264"",""623x1280"",""700x1245"",""800x1280"",""1080x2340"",""1320x2400"",""1242x2688""])
        self.dvc = random.choice([""30/11"",""31/12"",""29/10""])
        return(random.choice([
             f'Instagram {self.dix} Android ({self.dvc}; 160dpi; 623x1280; INFINIX MOBILITY LIMITED/Infinix; {str(random.choice(self.infinix))}; qcom; in_ID; 158441914)',
            f'Instagram {self.dix} Android ({self.dvc}; 160dpi; 623x1280; NEXUS MOBILITY LIMITED/Nexus; {str(random.choice(self.nexus))}; qcom; in_ID; 158441914)',
            f'Instagram {self.dix} Android ({self.dvc}; 160dpi; 623x1280; MICROMAX MOBILITY LIMITED/Micromax; {str(random.choice(self.micromax))}; qcom; in_ID; 158441914)',
            f'Instagram {self.dix} Android ({self.dvc}; 160dpi; 623x1280; ONEPLUS MOBILITY LIMITED/One; {str(random.choice(self.onpls))}; qcom; in_ID; 158441914)',
            f'Instagram {self.dix} Android ({self.dvc}; 160dpi; 623x1280; OPPO MOBILITY LIMITED/Oppo; {str(random.choice(self.oppo))}; {self.opp}; qcom; in_ID; 158441914)',
            f'Instagram {self.dix} Android ({self.dvc}; 160dpi; 623x1280; VIVO MOBILITY LIMITED/Vivo; {str(random.choice(self.vivo))}; qcom; in_ID; 158441914)',
           ])
       )
        
    def useragent_ajax(self):
        self.chrome = str(random.randint(114,124))
        return(random.choice([
            f'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/{self.chrome}.0.0.0 Safari/537.36',
            f'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/{self.chrome}.0.0.0 Safari/537.36'
            ])
        )
        


"
HUyNVY1m,Exploring the Future of Cryptocurrency in 2024: Insights from BYDFi&#8217;s Chief Marketing Officer,livebetpro,PHP,Monday 25th of March 2024 03:47:57 AM CDT,https://www.livebetpro.com/exploring-the-future-of-cryptocurrency-in-2024-insights-from-bydfis-chief-marketing-officer/
sQPKa38z,sysop_2.1.5_Minimum,pan7nikt,Bash,Monday 25th of March 2024 03:44:48 AM CDT,"#2.1.5.1
#ZROB cd DO FOLDERU Z PROGRAMAMI
echo -e '\033[0;32m1. ROZMIAR PLIKU (statyczne wieksze)\033[0m'
stat -c %s prog
stat -c %s sprog
echo -e '\033[0;32m2. Biblioteki zewnetrzne a zainstalowane w systemie\033[0m'
ldd prog
ldd sprog
echo -e '\033[0;32m3. Liczba wywolan systemowych (wiecej dla skonsolidowanej dynamicznie)\033[0m'
#NIE WYSWIETLA SIE PROMPT ALE NADAL TRZEBA WPISAC ZNAKI LUB KLIKNAC ENTER PO PROSTU
strace -c ./prog |& grep 'calls\|total'
strace -c ./sprog |& grep 'calls\|total'
#uruchomic w oddzielnych oknach/sesjach ssh
./prog
./sprog
#podczas, gdy procesy sa uruchomione
echo -e '\033[0;32m4. Liczba nieanonimowych segmentow pameci w mapie pamieci (wicej dla skonsolidowanego dynamicznie)\033[0m'
pidof prog
pidof sprog
pmap -x PID_PROG
pmap -x PID_SPROG
#text/zmienne/stale?????
echo -e '\033[0;32mOkreslanie rodzaju zastosowanej konsolidacji\033[0m'
echo -e '\033[0;32mdla biblioteki\033[0m'
file /usr/lib64/libc.so.6
echo -e '\033[0;32mdla programu statycznie skonsolidowanego\033[0m'
file prog
echo -e '\033[0;32mdla programu dynamicznie skonsolidowanego\033[0m'
file sprog

#2.1.5.2
echo -e '\033[0;32mLista bibliotek wymaganych przez program\033[0m'
ldd prog
echo -e '\033[0;32mi biblioteke skonsolidowana dynamicznie\033[0m'
ldd /usr/lib64/libc.so.6
echo -e '\033[0;32mWszystkie biblioteki zarzadzane przez linker\033[0m'
ldconfig -p

#2.1.5.3
echo -e '\033[0;32mCzas przetwarzania w trybie nieuprzywilejowanym\033[0m'
time ls
echo -e '\033[0;32mCzas przetwarzania w trybie uprzywilejowanym\033[0m'
time sudo ls

#2.1.5.4
echo -e '\033[0;32mPorownanie ilosci zgloszen wywolan systemowych\033[0m'
strace -c ./prog |& grep 'calls\|total'
strace -c ./sprog |& grep 'calls\|total'"
uKSvqL1V,postfix evaluate,haikid,Java,Monday 25th of March 2024 03:43:11 AM CDT,"double evalute() {
	OurStack<String> postFixStack = new OurStack<String>();

	while (!postFix.isEmpty())
	{
		curr = postFix.remove();
		
		if (!isoperand(curr)) { 
			// curr is +, -, *, /

			double operand2 = postFixStack.pop();
			double operand1 = postFixStack.pop();

			if curr == ""+""
				postFixStack.push(operand1 + operand2);
			else if curr == ""-""
				postFixStack.push(operand1 - operand2);
			else if curr == ""*""
				postFixStack.push(operand1 * operand2);
			else
				postFixStack.push(operand1 / operand2);
		} else { 
			// curr is a number

			postFixStack.push(Double.parseDouble(curr));
		}
	}

	return postFixStack.peek(); // last number remaining on stack
}"
WKSBJYJT,admin.py for comments,horozov86,Python,Monday 25th of March 2024 02:45:55 AM CDT,"from django.contrib import admin
from .models import Comment

@admin.register(Comment)
class CommentAdmin(admin.ModelAdmin):
    list_display = ('text', 'date_time_of_publication', 'to_place')
    search_fields = ('text',)
    list_filter = ('date_time_of_publication',)
"
