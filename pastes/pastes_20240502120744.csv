id,title,username,language,date,content
PLkzyQ8E,item.py new,Gamerkin,Python,Thursday 2nd of May 2024 06:10:46 AM CDT,"{% extends 'base.html' %}
{% block content %}
    <h2>{% block title %} {{ item['title'] }} {% endblock %}</h2>
    <span class=""badge badge-primary"">{{ item['company'] }}</span>
    {% if item['status']=='–≤—ã–¥–∞–Ω' %}
        <span class=""badge badge-success""> –≤—ã–¥–∞–Ω </span>
    {% else %}
        <span class=""badge badge-danger""> –Ω–µ –≤—ã–¥–∞–Ω </span>
    {%- endif %}
    <hr>
    <table class=""table"">
        <thead>
            <tr>
                <th scope=""col"">#</th>
                <th scope=""col"">–ü–æ–∑–∏—Ü–∏—è</th>
                <th scope=""col"">–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è</th>
                <th scope=""col"">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</th>
            </tr>
            {% for p in pos %}
            <tr>
                <th scope=""col"">#</th>
                <th scope=""col"">{{ p['item'] }}</th>
                <th scope=""col"">{{ p['type'] }}</th>
                <th scope=""col"">{{ p['amount'] }}</th>
            </tr>
            {% endfor %}
        </thead>
        <tbody>
        </tbody>
    </table>
    {% if item['status']=='–≤—ã–¥–∞–Ω' %}
        <p><h5>–¢–æ–≤–∞—Ä—ã –±—ã–ª–∏ –≤—ã–¥–∞–Ω—ã {{ item['date'] }}</h5></p>
    {% else %}
        <p>
            <form method=""POST"">
                <button type=""submit"" class=""btn btn-primarybtn-sm"">–í—ã–¥–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –ø–æ –Ω–∞–∫–ª–∞–¥–Ω–æ–π</button>
            </form>
        </p>
        {%- endif %}
        </p>
{% endblock %}
 "
Q3Mpbtgb,app.py new,Gamerkin,Python,Thursday 2nd of May 2024 06:09:57 AM CDT,"import sqlite3
from flask import Flask, render_template
from werkzeug.exceptions import abort

app = Flask(__name__)


def get_db_connection(filename):
    conn = sqlite3.connect(filename)
    conn.row_factory = sqlite3.Row
    return conn


@app.route('/')
def index():
    conn = get_db_connection('database.db')
    items = conn.execute('SELECT * FROM items').fetchall()
    conn.close()
    return render_template('index.html', items=items)


def get_item(item_id):
    conn = get_db_connection('database.db')
    item = conn.execute('SELECT * FROM items WHERE id = ?', (item_id,)).fetchone()
    conn.close()
    if item is None:
        abort(404)
    return item

def get_positiona(company):
    conn = get_db_connection('mydatabase.db')
    item = conn.execute('SELECT * FROM documents WHERE company_to = ?', (company,)).fetchall()
    conn.close()
    return item

@app.route('/<int:item_id>')
def item(item_id):
    item = get_item(item_id)
    pos = get_positiona(item['company'])
    return render_template('item.html', item=item, pos=pos)


if __name__ == '__main__':
    app.run()
"
ZPAzddGy,ü§ë G2A.com Free Gift Card Guide May 2024 FIX ü§ë,jusst2k4,GetText,Thursday 2nd of May 2024 06:09:26 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_726725.pdf

Working as of:
02 May 2024"
CrMRYadQ,Python leetcode 335. Self Crossing Chatgpt,LikeRampage,Python,Thursday 2nd of May 2024 06:08:42 AM CDT,"from typing import List

class Solution:
    def isSelfCrossing(self, distance: List[int]) -> bool:
        if len(distance) < 4:
            return False
        
        for i in range(3, len(distance)):
            if distance[i] >= distance[i-2] and distance[i-1] <= distance[i-3]:
                return True
            if i >= 4 and distance[i-1] == distance[i-3] and distance[i] + distance[i-4] >= distance[i-2]:
                return True
            if i >= 5 and distance[i-2] >= distance[i-4] and distance[i] + distance[i-4] >= distance[i-2] and distance[i-1] <= distance[i-3] and distance[i-1] + distance[i-5] >= distance[i-3]:
                return True
        
        return False"
sk7fUe4M,data914,TestGuy1,JSON,Thursday 2nd of May 2024 06:00:06 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '7951d79719475639def8c49e8c34252d739b343b3818a251648e8b2b4385208b9166d25f07cbfaf6536264182e150e12ae850cab33d54b583ef8d1c18ce997c36f94cf19fef6a6c99c572254182b8471d45e58395d159833c20fae791919ad2c1ff5bf4f0de9713a4b926171f014f52f971fa2fb7299765eb7d58efc4dfcc74c',
  otherdata: [
    'aa06c787f6f10254677b37295fcf050c',
    '35f85ffb971e8b8cdaaf70bacb9eee2a',
    'e8b5dcc07c59d28b6415fc54de361d4f',
    '245d41d6b755a15d334aa142b66db63d',
    'ca0f4f66d241b2b9c5d515c73ddb4126',
    '0e01e37e4cc55d79a484f58cdf3abe92',
    '3b5c0e03ab0b258a873437a011f7dcd9',
    'a6be4a9af882716dfe9fb66b1d4d98ca'
  ]
}"
X3WGrgtx,ü§ë G2A.com Free Gift Card Guide May 2024 FIX üí∞,ssss50w,GetText,Thursday 2nd of May 2024 05:53:19 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view?usp=sharing
 
Working as of:
02 May 2024"
fyibkFPg,Das meist erwartete Event auf GrandRP!,Shpindlier,HTML,Thursday 2nd of May 2024 05:34:18 AM CDT,"<!DOCTYPE html>
<html><head><meta http-equiv=""content-type"" content=""text/html; charset=utf-8""></head><body>
	<div style=""background-color: #000;"">
		<table style=""box-sizing: border-box; background: #000; width: 600px; margin-left: auto; margin-right: auto; border-spacing: 0;"">
			<tbody>
				<tr>
					<td><a rel=""noopener noreferrer"" href=""https://gta5grand.com/?ref=2"" alt=""startimg1""><img src=""https://i.imgur.com/X2T0rTP.png"" alt=""Logo"" class=""CToWUd a6T"" data-bit=""iit"" tabindex=""0""></a></td>
				</tr>
				<tr>
					<td align=""center"" style=""padding-top: 10px;"">
						<p style=""margin: 0; padding: 24px; color: #fff; width: 500px; font-family: 'Arial'; font-size: 19px; font-weight: 500; font-style: normal; letter-spacing: normal; line-height: normal; text-align: center;"">Das Hauptereignis im Mai auf Grand RP ist die Ver√∂ffentlichung des neuen globalen Updates, √ºber das ich Ihnen jetzt kurz berichten werde. Denken Sie daran, dass die Ver√∂ffentlichung des Updates wie immer damit verbunden ist, dass jeder 15 GC erhalten kann, indem er einfach auf dem Server spielt.</p>
					</td>
				</tr>
				<tr>
					<td align=""center""><a rel=""noopener noreferrer"" href=""https://gta5grand.com/?ref=2"" alt=""startimg1""><img src=""https://i.imgur.com/Hf2zRZA.png"" alt=""Logo"" class=""CToWUd a6T"" data-bit=""iit"" tabindex=""0""></a></td>
				</tr>
				<tr>
					<td align=""center"" style=""padding-top: 10px;"">
						<p style=""margin: 0; padding: 24px; color: #fff; width: 500px; font-family: 'Arial'; font-size: 19px; font-weight: 500; font-style: normal; letter-spacing: normal; line-height: normal; text-align: center;"">Sie k√∂nnen jetzt im Handwerksmen√º f√ºr 5 Karteikarten eine Satellitensch√ºssel herstellen. Jeder Spieler kann ein Objekt herstellen und in der Welt platzieren. Nachdem das Objekt auf der Karte platziert wurde, wird das Event automatisch gestartet. Alle Regierungsbeh√∂rden werden √ºber den Datenhack informiert und m√ºssen das Objekt zerst√∂ren.</p>
					</td>
				</tr>
				<tr>
					<td align=""center""><a rel=""noopener noreferrer"" href=""https://gta5grand.com/?ref=2"" alt=""startimg1""><img src=""https://i.imgur.com/bpK2o40.png"" alt=""Logo"" class=""CToWUd a6T"" data-bit=""iit"" tabindex=""0""></a></td>
				</tr>
				<tr>
					<td align=""center"" style=""padding-top: 10px;"">
						<p style=""margin: 0; padding: 24px; color: #fff; width: 500px; font-family: 'Arial'; font-size: 19px; font-weight: 500; font-style: normal; letter-spacing: normal; line-height: normal; text-align: center;"">Gangs k√∂nnen nun einmal am Tag eine andere Gang angreifen, um der anderen Gang Waffen zu klauen. Sie k√∂nnen diesen Angriff von jedem NPC aus dem eigenen HQ starten. Nachdem Sie mit ihm gesprochen haben, w√§hlen Sie die Option ‚ÄûGang√ºberfall‚Äú und gehen Sie mit Ihrer Gang zum HQ der gegnerischen Gang.</p>
					</td>
				</tr>
				<tr>
					<td align=""center""><a rel=""noopener noreferrer"" style=""color: #fff; font-family: 'Arial'; font-size: 16px; letter-spacing: 0.01em; text-decoration-line: underline;"" href=""{{unsubscribe_url}}""><br>If you are not interested</a></td>
				</tr>
				<tr>
					<td align=""center"">
						<p style=""color: #afafaf; font-family: 'Arial'; font-size: 16px; letter-spacing: 0.01em; padding: 15px 34px 0px 40px;"">By the way, I decided to let you know because you play on Grand Rp and registered there. If you're not interested, just let me know.</p>
					</td>
				</tr>
			</tbody>
		</table>
	</div>
	</body></html>"
tnF1shtE,Notify Config,Crap-Head,Lua,Thursday 2nd of May 2024 05:21:45 AM CDT,"--[[
	Default configs
--]]
CH_Notify.Config.DefaultNotificationDesign = 1 -- The default design

CH_Notify.Config.NotifyMenuChatCommand = ""!notify"" -- The chat command to open the menu

CH_Notify.Config.YourServerIdentifier = ""ch_server"" -- This is a prefix that clients designs will save under. Try to make this unique so clients won't share designs from other servers.

CH_Notify.Config.GradientStrength = 0.1 -- How much should the gradient cover? How much will it stretch before fading.

CH_Notify.Config.NotifyFont = ""CH_Notify_Font_Size10"" -- If you wish to use another font for your notifications then you can change this.

--[[
	Default themes
	
	You can configure your styles and allow your clients to choose between them in-game.
	These are the default themes generated when someone first joins your server with this addon.
	
	Players are able to create new themes in-game ty typing !notify and clicking the icon in the top left corner.
--]]
CH_Notify.Config.NotificationDesigns = {
	[1] = {
		Name = ""Office"",
		Description = ""Use interface icons, gmod design and simple text without outline."",
		Icons = ""Interface"",
		Theme = ""GMod"",
		Text = ""Simple"",
		Rounded = false,
	},
	[2] = {
		Name = ""Rounded Office"",
		Description = ""Use interface icons, gmod design and simple text without outline."",
		Icons = ""Interface"",
		Theme = ""GMod"",
		Text = ""Simple"",
		Rounded = true,
	},
	[3] = {
		Name = ""Flat Outlined Gradient"",
		Description = ""Using flat outlined icons on a gradient background"",
		Icons = ""Outlined"",
		Theme = ""Gradient"",
		Text = ""Simple"",
		Rounded = false,
	},
	[4] = {
		Name = ""Flat Round Outlined"",
		Description = ""Using flat outlined icons on a rounded background"",
		Icons = ""Outlined"",
		Theme = ""ColorBox"",
		Text = ""Simple"",
		Rounded = true,
	},
}

--[[
	Available icon packs
	
	You can make your own and use them with NotificationDesigns config
--]]
CH_Notify.Config.NotificationIcons = {
	[""Interface""] = {
		[0] = Material( ""craphead_scripts/ch_notifications/interface/generic.png"", ""noclamp smooth"" ),
		[1] = Material( ""craphead_scripts/ch_notifications/interface/error.png"", ""noclamp smooth"" ),
		[2] = Material( ""craphead_scripts/ch_notifications/interface/undo.png"", ""noclamp smooth"" ),
		[3] = Material( ""craphead_scripts/ch_notifications/interface/hint.png"", ""noclamp smooth"" ),
		[4] = Material( ""craphead_scripts/ch_notifications/interface/cleanup.png"", ""noclamp smooth"" ),
	},
	[""Flat""] = {
		[0] = Material( ""craphead_scripts/ch_notifications/flat/generic.png"", ""noclamp smooth"" ),
		[1] = Material( ""craphead_scripts/ch_notifications/flat/error.png"", ""noclamp smooth"" ),
		[2] = Material( ""craphead_scripts/ch_notifications/flat/undo.png"", ""noclamp smooth"" ),
		[3] = Material( ""craphead_scripts/ch_notifications/flat/hint.png"", ""noclamp smooth"" ),
		[4] = Material( ""craphead_scripts/ch_notifications/flat/cleanup.png"", ""noclamp smooth"" ),
	},
	[""Outlined""] = {
		[0] = Material( ""craphead_scripts/ch_notifications/outlined/generic.png"", ""noclamp smooth"" ),
		[1] = Material( ""craphead_scripts/ch_notifications/outlined/error.png"", ""noclamp smooth"" ),
		[2] = Material( ""craphead_scripts/ch_notifications/outlined/undo.png"", ""noclamp smooth"" ),
		[3] = Material( ""craphead_scripts/ch_notifications/outlined/hint.png"", ""noclamp smooth"" ),
		[4] = Material( ""craphead_scripts/ch_notifications/outlined/cleanup.png"", ""noclamp smooth"" ),
	},
}

--[[
	Sounds
--]]
CH_Notify.Config.NotificationSounds = {
	[0] = ""craphead_scripts/ch_notifications/notification.mp3"", -- Generic
	[1] = ""craphead_scripts/ch_notifications/badinput.mp3"", -- Error
	[2] = ""craphead_scripts/ch_notifications/click3.mp3"", -- Undo
	[3] = ""craphead_scripts/ch_notifications/interface.mp3"", -- Hint
	[4] = ""craphead_scripts/ch_notifications/complete.mp3"", -- Cleanup
}"
C5KEq5SZ,snowybot manual divide,coinwalk,JavaScript,Thursday 2nd of May 2024 05:16:04 AM CDT,"var olderest = parseFloat(document.getElementById('pct_balance').value);
var basebet = Number((olderest/100).toFixed(8));
var betnext = basebet;
var tens = (basebet*10);
var fifty = (basebet*50);
var sevens = (basebet*6.9);
var eights = (basebet*7.9);
var setasseven = 0;
var chickendinner = (olderest*24);
var belance = olderest;
var stages = parseFloat(olderest);
var goodoldbal = ((Math.floor(stages/tens))*tens);
var stoogy = parseFloat(olderest);
var badoldbal = ((Math.floor(stoogy/tens))*tens);
var setsoftens = 4;
 
function go(){
belance = document.getElementById('pct_balance').value;
var dog = Number((belance-olderest).toFixed(8));
console.log(""profit"");
console.log(dog);
if ((belance>(((Math.floor(belance/tens))*tens)+sevens))&&(belance<(((Math.floor(belance/tens))*tens)+eights))&&(belance!=setasseven)){
    betnext = betnext*2;
    setasseven = parseFloat(belance);
}
if (((belance-(betnext*2))<=(badoldbal-fifty))&&(belance<(((Math.floor(belance/tens))*tens)+sevens))){
    betnext = basebet;
    setasseven = 0;
    setsoftens = 0;
    stoogy = parseFloat(belance);
    badoldbal = ((Math.floor(stoogy/tens))*tens);
}
if ((belance>=(goodoldbal+(tens*setsoftens)))&&(belance<(((Math.floor(belance/tens))*tens)+sevens))){
    betnext = basebet;
    setasseven = 0;
    setsoftens = 4;
    stoogy = parseFloat(belance);
    badoldbal = ((Math.floor(stoogy/tens))*tens);
    stages = parseFloat(belance);
goodoldbal = ((Math.floor(stages/tens))*tens);
}
if ((belance>=(goodoldbal+(tens*setsoftens)))&&(belance>(((Math.floor(belance/tens))*tens)+eights))){
    betnext = basebet;
    setasseven = 0;
    setsoftens = 4;
    stoogy = parseFloat(belance);
    badoldbal = ((Math.floor(stoogy/tens))*tens);
    stages = parseFloat(belance);
goodoldbal = ((Math.floor(stages/tens))*tens);
}
if (belance>=chickendinner){
console.log(""winner winner chicken dinner"");
return;
}
$('#pct_chance').val(49.5);
$('#pct_bet').val(((betnext*1).toFixed(8)));
$('#a_lo').click();
setTimeout(() => go(), 20);
}
go();
"
QBWLFhth,snowybot good vibe,coinwalk,JavaScript,Thursday 2nd of May 2024 05:13:52 AM CDT,"var olderest = parseFloat(document.getElementById('pct_balance').value);
var basebet = Number((olderest/1000).toFixed(8));
var betnext = basebet;
var tens = (basebet*10);
var fifty = (basebet*200);
var sevens = (basebet*6.9);
var eights = (basebet*7.9);
var setasseven = 0;
var chickendinner = (olderest*24);
var belance = olderest;
var stages = parseFloat(olderest);
var goodoldbal = ((Math.floor(stages/tens))*tens);
var stoogy = parseFloat(olderest);
var badoldbal = ((Math.floor(stoogy/tens))*tens);
var setsoftens = 4;
 
function go(){
belance = document.getElementById('pct_balance').value;
var dog = Number((belance-olderest).toFixed(8));
console.log(""profit"");
console.log(dog);
if ((belance>(((Math.floor(belance/tens))*tens)+sevens))&&(belance<(((Math.floor(belance/tens))*tens)+eights))&&(belance!=setasseven)){
    betnext = betnext*2;
    setasseven = parseFloat(belance);
}
if (((belance-(betnext*2))<=(badoldbal-fifty))&&(belance<(((Math.floor(belance/tens))*tens)+sevens))){
    betnext = basebet;
    setasseven = 0;
    setsoftens = 0;
    stoogy = parseFloat(belance);
    badoldbal = ((Math.floor(stoogy/tens))*tens);
}
if ((belance>=(goodoldbal+(tens*setsoftens)))&&(belance<(((Math.floor(belance/tens))*tens)+sevens))){
    betnext = basebet;
    setasseven = 0;
    setsoftens = 4;
    stoogy = parseFloat(belance);
    badoldbal = ((Math.floor(stoogy/tens))*tens);
    stages = parseFloat(belance);
goodoldbal = ((Math.floor(stages/tens))*tens);
}
if ((belance>=(goodoldbal+(tens*setsoftens)))&&(belance>(((Math.floor(belance/tens))*tens)+eights))){
    betnext = basebet;
    setasseven = 0;
    setsoftens = 4;
    stoogy = parseFloat(belance);
    badoldbal = ((Math.floor(stoogy/tens))*tens);
    stages = parseFloat(belance);
goodoldbal = ((Math.floor(stages/tens))*tens);
}
if (belance>=chickendinner){
console.log(""winner winner chicken dinner"");
return;
}
$('#pct_chance').val(49.5);
$('#pct_bet').val(((betnext*1).toFixed(8)));
$('#a_lo').click();
setTimeout(() => go(), 20);
}
go();
"
Ls8KzyMB,Soccer Prediction Betting Tips 02052024,livebetpro,PHP,Thursday 2nd of May 2024 04:44:57 AM CDT,"https://www.livebetpro.com/soccer-prediction-betting-tips-02052024/
 
What is Sports Betting?



Sports betting is a form of gambling where you place bets on the outcome of sporting events, hoping to win money. The typical scenario involves predicting whether a team or player will win, and you either gain a profit based on the odds set by bookmakers or lose your stake. While many bets are straightforward, with a clear win or lose outcome, some offer more complex options, such as spread betting or ""draw no bet.""



In sports betting, you can wager on a wide range of outcomes. This could be the final result of a game or tournament, or specific events within a game. For example, in a football match between Arsenal and Chelsea, you might bet on Arsenal to win, Arsenal to win 2-1, Arsenal to lead at halftime, or even a particular player to score.



Here are Prediction Betting Tips on May 02, 2024 For You:



1. Match : Kaizer Chiefs - Mamelodi Sundowns FC



League :¬†South Africa 1-Premier Soccer League



Prediction : Mamelodi Sundowns FC to win at 2.0 with¬†Stake.com



Result :



2. Match : Pogon Szczecin - Wisla Krakow



League :¬†Poland Cup 1-FA Cup



Prediction : Pogon Szczecin -0.5 at 1.8 with¬†Stake.com



Result :



Read¬†Soccer Prediction Betting Tips 27042024
"
3rvbDj16,Untitled,_KAGATUN_,C#,Thursday 2nd of May 2024 04:39:38 AM CDT,"using System;
using System.Collections.Generic;

namespace CarService
{
    class Program
    {
        static void Main(string[] args)
        {
            CarCreator createCars = new CarCreator();
            CarService carService = new CarService(createCars.ReturnQueue());

            carService.Work();
        }
    }

    public class Utilities
    {
        private static Random s_random = new Random();

        public static int GetRandomNumber(int min, int max)
        {
            return s_random.Next(min, max + 1);
        }
    }

    class Car
    {
        private List<Detail> _details = new List<Detail>();

        public Car(List<Detail> details)
        {
            _details = details;
            MakeDefectiveDetails();
        }

        public bool GetBoolFalseDetail()
        {
            for (int i = 0; i < _details.Count; i++)
            {
                if (_details[i].IsWorking == false)
                {
                    return true;
                }
            }

            return false;
        }

        public void ShowDetails()
        {
            Console.WriteLine(""–í—Å–µ –¥–µ—Ç–∞–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:\n"");

            if (_details.Count > 0)
            {
                for (int i = 0; i < _details.Count; i++)
                {
                    _details[i].ShowInfo();
                }
            }
        }

        public void ShowBrokenDetails()
        {
            bool isProperly = true;

            Console.WriteLine(""–ù–µ–∏—Å–ø—Ä–∞–≤–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:\n"");

            for (int i = 0; i < _details.Count; i++)
            {
                if (_details[i].IsWorking == false)
                {
                    _details[i].ShowInfo();

                    isProperly = false;
                }
            }

            if (isProperly == true)
            {
                Console.WriteLine(""–í—Å–µ –¥–µ—Ç–∞–ª–∏ –æ—Ç—Ä–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã"");
            }
        }

        public bool TryGetDetail(string detailType, out Detail detail)
        {
            detail = null;

            foreach (Detail selectedDetail in _details)
            {
                if (detailType == selectedDetail.Type && selectedDetail.IsWorking == false)
                {
                    detail = selectedDetail;
                    return true;
                }
            }

            return false;
        }

        public List<Detail> ReturnDetails()
        {
            return new List<Detail>(_details);
        }

        public void ReplaceDetail(Detail newDetail)
        {
            for (int i = 0; i < _details.Count; i++)
            {
                if (_details[i].Type == newDetail.Type)
                {
                    _details[i] = newDetail;

                    return;
                }
            }
        }

        private void MakeDefectiveDetails()
        {
            int maxNumberDetails = 5;
            int numberDefectiveParts = Utilities.GetRandomNumber(1, maxNumberDetails);

            for (int i = 0; i < numberDefectiveParts; i++)
            {
                int randomIndexDetail = Utilities.GetRandomNumber(1, _details.Count);
                _details[randomIndexDetail - 1].GetFalse();
            }
        }
    }

    class CarCreator
    {
        private Queue<Car> _cars = new Queue<Car>();

        private DetailCreator _detailCreator = new DetailCreator();

        public CarCreator()
        {
            GetQueue();
        }

        public Queue<Car> ReturnQueue()
        {
            return new Queue<Car>(_cars);
        }

        private void GetQueue()
        {
            int maxNumberInQueue = 7;
            int randomNumberInQueue = Utilities.GetRandomNumber(1, maxNumberInQueue);

            for (int i = 0; i < randomNumberInQueue; i++)
            {
                List<Detail> details = new List<Detail>();

                for (int j = 0; j < _detailCreator.DetailsCount; j++)
                {
                    details.Add(_detailCreator.ReturnListAll()[j].Clone());
                }

                _cars.Enqueue(new Car(details));
            }
        }
    }

    class Detail
    {
        public Detail(int price, string type, bool isWorking)
        {
            Price = price;
            Type = type;
            IsWorking = isWorking;
        }

        public int Price { get; private set; }
        public string Type { get; private set; }
        public bool IsWorking { get; private set; }

        public void ShowInfo()
        {
            Console.WriteLine($""–î–µ—Ç–∞–ª—å {Type}, —Å—Ç–æ–∏–º–æ—Å—Ç—å {Price}, —Å–æ—Å—Ç–æ—è–Ω–∏–µ {GetStatus()}"");
        }

        public void GetFalse()
        {
            IsWorking = false;
        }

        public string GetStatus()
        {
            return IsWorking ? ""–ò—Å–ø—Ä–∞–≤–Ω–æ"" : ""–ù–µ–∏—Å–ø—Ä–∞–≤–Ω–æ"";
        }

        public Detail Clone()
        {
            return new Detail(Price, Type, IsWorking);
        }
    }

    class DetailCreator
    {
        private List<Detail> _details;

        public DetailCreator()
        {
            _details = new List<Detail>
            {
                new Detail (3000, ""–ú–∞—Å–ª—è–Ω—ã–π –Ω–∞—Å–æ—Å"", true),
                new Detail (1500, ""–ö–ª–∞–ø–∞–Ω—ã"", true),
                new Detail (1500, ""–†–µ–º–µ–Ω—å"", true),
                new Detail (1000, ""–ú–∞—Ö–æ–≤–∏–∫"", true),
                new Detail (2000, ""–í–æ–¥—è–Ω–æ–π –Ω–∞—Å–æ—Å"", true),
                new Detail (2200, ""–ë–ª–æ–∫ —Ü–∏–ª–∏–Ω–¥—Ä–æ–≤"", true),
                new Detail (4000, ""–ú–∞—Å–ª—è–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä"", true),
                new Detail (2800, ""–í–æ–∑–¥—É—à–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä"", true),
                new Detail (5000, ""–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä"", true),
                new Detail (500, ""–°—Ç–∞—Ä—Ç–µ—Ä"", true),
            };
        }

        public int DetailsCount => _details.Count;

        public List<Detail> ReturnListAll()
        {
            return new List<Detail>(_details);
        }
    }

    class Warehouse
    {
        private DetailCreator _detailCreator = new DetailCreator();

        private List<Detail> _details = new List<Detail>();

        public Warehouse()
        {
            FillDetails();
        }

        public int DetailsCount => _details.Count;        

        public void RemoveDetail(string detailType)
        {
            for (int i = 0; i < _details.Count; i++)
            {
                if (_details[i].Type == detailType)
                {
                    _details.RemoveAt(i);
                    break;
                }
            }
        }

        public Detail GetDetailByIndex(int index)
        {
            return _details[index];
        }

        public void ShowAssortment()
        {
            Console.WriteLine(""\n–î–µ—Ç–∞–ª–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ:\n"");

            for (int i = 0; i < _details.Count; i++)
            {
                Console.Write($""‚Ññ {i + 1} "");
                _details[i].ShowInfo();
            }
        }

        private void FillDetails()
        {
            int capacity = 15;
            int minNumber = 0;
            int maxNumber = _detailCreator.DetailsCount;

            for (int i = 0; i < capacity; i++)
            {
                int randomNumber = Utilities.GetRandomNumber(minNumber, maxNumber - 1);

                _details.Add(_detailCreator.ReturnListAll()[randomNumber]);
            }
        }
    }

    class CarService
    {
        private Warehouse _warehouse = new Warehouse();

        private Queue<Car> _cars;

        private int _fine = 1000;
        private int _fineSkipping = 300;
        private int _income = 0;

        public CarService(Queue<Car> cars)
        {
            _cars = cars;
        }

        public void Work()
        {
            while (_cars.Count > 0)
            {
                Car car = _cars.Dequeue();

                RepairCar(car);
            }

            Console.WriteLine(""–í –æ—á–µ—Ä–µ–¥–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –º–∞—à–∏–Ω –Ω–∞ —Ä–µ–º–æ–Ω—Ç.\n–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"");
        }

        private void RepairCar(Car car)
        {
            const string CommandComplete = ""S"";

            bool isWork = true;

            while (isWork)
            {
                Console.WriteLine($""\n–ö–∞–ø–∏—Ç–∞–ª –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–∞: {_income}\n"");

                car.ShowDetails();
                Console.WriteLine();

                _warehouse.ShowAssortment();
                Console.WriteLine();

                car.ShowBrokenDetails();

                Console.WriteLine($""\n–í–≤–µ–¥–∏—Ç–µ {CommandComplete} —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –º–∞—à–∏–Ω—ã"");
                Console.WriteLine(""–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ—Ç–∞–ª–∏ —Å–æ —Å–∫–ª–∞–¥–∞ –¥–ª—è –ø–æ—á–∏–Ω–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:\n"");

                string userInput = Console.ReadLine();

                if (userInput == CommandComplete && car.GetBoolFalseDetail())
                {
                    PenaltyUnservedPart(car.ReturnDetails());

                    break;
                }
                else if (userInput == CommandComplete)
                {
                    Console.WriteLine(""–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ"");

                    break;
                }

                if (int.TryParse(userInput, out int number))
                {
                    if (number > 0 && number <= _warehouse.DetailsCount)
                    {
                        Detail warehouseDetail = _warehouse.GetDetailByIndex(number - 1);

                        if (car.TryGetDetail(warehouseDetail.Type, out Detail detail))
                        {
                            MakeProfit(detail.Price);

                            car.ReplaceDetail(warehouseDetail);

                            _warehouse.RemoveDetail(detail.Type);
                        }
                        else
                        {
                            _warehouse.RemoveDetail(warehouseDetail.Type);
                            PayForMistake();
                        }
                    }
                    else
                    {
                        Console.WriteLine(""\n–ù–µ—Ç –¥–µ—Ç–∞–ª–∏ –ø–æ–¥ —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º\n"");
                    }
                }
                else
                {
                    Console.WriteLine(""–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã"");
                }
            }
        }

        private void PayForMistake()
        {
            _income -= _fine;

            Console.WriteLine($""–ü–æ–ª—É—á–µ–Ω —à—Ç—Ä–∞—Ñ {_fine} –∑–∞ –∑–∞–º–µ–Ω—É –∏—Å–ø—Ä–∞–≤–Ω–æ–π –¥–µ—Ç–∞–ª–∏, –≤—ã —É—Ç—Ä–∞—Ç–∏–ª–∏ –∏—Å–ø—Ä–∞–≤–Ω—É—é –¥–µ—Ç–∞–ª—å —Å–æ —Å–∫–ª–∞–¥–∞\n"");
        }

        private void PenaltyUnservedPart(List<Detail> details)
        {
            int sum = 0;
            int numberDetail = 0;

            for (int i = 0; i < details.Count; i++)
            {
                if (details[i].IsWorking == false)
                {
                    _income -= _fineSkipping;
                    numberDetail++;
                    sum += _fineSkipping;
                }
            }

            Console.WriteLine($""–ü–æ–ª—É—á–µ–Ω —à—Ç—Ä–∞—Ñ {sum} –∑–∞ {numberDetail} –Ω–µ–ø–æ—á–∏–Ω–µ–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏\n"");
        }

        private void MakeProfit(int price)
        {
            int difference = 100;
            int extraChargePercent = 30;
            int priceWork = (price * extraChargePercent) / difference;
            _income += price + priceWork;

            Console.WriteLine($""–ü–æ–ª—É—á–µ–Ω–∞ –ø—Ä–∏–±—ã–ª—å {price}. –ù–∞—Ü–µ–Ω–∫–∞ –∑–∞ —Ä–µ–º–æ–Ω—Ç {extraChargePercent}% –æ—Ç –¥–µ—Ç–∞–ª–∏ {priceWork}"");
        }
    }
}

"
UpS88YPk,RGB LED Control rev_02,pleasedontcode,Arduino,Thursday 2nd of May 2024 04:37:47 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: RGB LED Control
	- Source Code NOT compiled for: Arduino Uno
	- Source Code created on: 2024-05-02 09:36:55

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* The system control an RGB LED and a piezo using */
	/* Arduino UNO.A short press on the push button (less */
	/* than 300ms) shall change the RGB status in a */
	/* sequence of: dimmed, red, green, blue. A long */
	/* press and release (more than 500ms) shall trigger */
	/* the piezo. */
/****** END SYSTEM REQUIREMENTS *****/

/****** DEFINITION OF LIBRARIES *****/
#include <EasyButton.h>	//https://github.com/evert-arias/EasyButton

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void updateOutputs(void);

/***** DEFINITION OF DIGITAL INPUT PINS *****/
const uint8_t myButton_PushButton_PIN_D2 = 2;

/***** DEFINITION OF DIGITAL OUTPUT PINS *****/
const uint8_t myRgb_LEDRGB_Red_PIN_D4 = 4;
const uint8_t myRgb_LEDRGB_Green_PIN_D5 = 5;
const uint8_t myRgb_LEDRGB_Blue_PIN_D6 = 6;

/***** DEFINITION OF OUTPUT RAW VARIABLES *****/
/***** used to store raw data *****/
bool myRgb_LEDRGB_Red_PIN_D4_rawData = 0;
bool myRgb_LEDRGB_Green_PIN_D5_rawData = 0;
bool myRgb_LEDRGB_Blue_PIN_D6_rawData = 0;

/***** DEFINITION OF OUTPUT PHYSICAL VARIABLES *****/
/***** used to store data after characteristic curve transformation *****/
float myRgb_LEDRGB_Red_PIN_D4_phyData = 0.0;
float myRgb_LEDRGB_Green_PIN_D5_phyData = 0.0;
float myRgb_LEDRGB_Blue_PIN_D6_phyData = 0.0;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/

// Instance of the button.
EasyButton button(myButton_PushButton_PIN_D2);

void setup(void)
{
	// put your setup code here, to run once:

	pinMode(myButton_PushButton_PIN_D2, INPUT_PULLUP);

	pinMode(myRgb_LEDRGB_Red_PIN_D4, OUTPUT);
	pinMode(myRgb_LEDRGB_Green_PIN_D5, OUTPUT);
	pinMode(myRgb_LEDRGB_Blue_PIN_D6, OUTPUT);

}

void loop(void)
{
	// put your main code here, to run repeatedly:

	updateOutputs(); // Refresh output data

}

void updateOutputs(void)
{
	digitalWrite(myRgb_LEDRGB_Red_PIN_D4, myRgb_LEDRGB_Red_PIN_D4_rawData);
	digitalWrite(myRgb_LEDRGB_Green_PIN_D5, myRgb_LEDRGB_Green_PIN_D5_rawData);
	digitalWrite(myRgb_LEDRGB_Blue_PIN_D6, myRgb_LEDRGB_Blue_PIN_D6_rawData);
}
"
cPBnr2xg,The most anticipated Event on Grand RP!,Shpindlier,HTML,Thursday 2nd of May 2024 04:37:13 AM CDT,"<!DOCTYPE html>
<html><head><meta http-equiv=""content-type"" content=""text/html; charset=utf-8""></head><body>
	<div style=""background-color: #000;"">
		<table style=""box-sizing: border-box; background: #000; width: 600px; margin-left: auto; margin-right: auto; border-spacing: 0;"">
			<tbody>
				<tr>
					<td><a rel=""noopener noreferrer"" href=""https://gta5grand.com/?ref=2"" alt=""startimg1""><img src=""https://i.imgur.com/X2T0rTP.png"" alt=""Logo"" class=""CToWUd a6T"" data-bit=""iit"" tabindex=""0""></a></td>
				</tr>
				<tr>
					<td align=""center"" style=""padding-top: 10px;"">
						<p style=""margin: 0; padding: 24px; color: #fff; width: 500px; font-family: 'Arial'; font-size: 19px; font-weight: 500; font-style: normal; letter-spacing: normal; line-height: normal; text-align: center;"">The main May event on Grand RP was the release of the new Global Update, which I'll tell you about briefly now. Remember that as always the release of the update is associated with the fact that everyone can get 15 GC, just playing on the server.</p>
					</td>
				</tr>
				<tr>
					<td align=""center""><a rel=""noopener noreferrer"" href=""https://gta5grand.com/?ref=2"" alt=""startimg1""><img src=""https://i.imgur.com/Hf2zRZA.png"" alt=""Logo"" class=""CToWUd a6T"" data-bit=""iit"" tabindex=""0""></a></td>
				</tr>
				<tr>
					<td align=""center"" style=""padding-top: 10px;"">
						<p style=""margin: 0; padding: 24px; color: #fff; width: 500px; font-family: 'Arial'; font-size: 19px; font-weight: 500; font-style: normal; letter-spacing: normal; line-height: normal; text-align: center;"">You can now craft a satellite dish in the crafting menu for 5 virus flashcards. Each player can craft an object and place it in the world. After the object is placed on the map and the event will be automatically triggered. All government agencies will be notified of the data hack and will be sent to destroy the object.</p>
					</td>
				</tr>
				<tr>
					<td align=""center""><a rel=""noopener noreferrer"" href=""https://gta5grand.com/?ref=2"" alt=""startimg1""><img src=""https://i.imgur.com/bpK2o40.png"" alt=""Logo"" class=""CToWUd a6T"" data-bit=""iit"" tabindex=""0""></a></td>
				</tr>
				<tr>
					<td align=""center"" style=""padding-top: 10px;"">
						<p style=""margin: 0; padding: 24px; color: #fff; width: 500px; font-family: 'Arial'; font-size: 19px; font-weight: 500; font-style: normal; letter-spacing: normal; line-height: normal; text-align: center;"">Gangs can now attack a specific gang once a day in order to take away the hostile gang's weapons. You can raid a gang from any NPC that is in the gang base. After talking to him, select the gang base raid option and go with your gang to the opposing gang's territory.</p>
					</td>
				</tr>
				<tr>
					<td align=""center""><a rel=""noopener noreferrer"" style=""color: #fff; font-family: 'Arial'; font-size: 16px; letter-spacing: 0.01em; text-decoration-line: underline;"" href=""{{unsubscribe_url}}""><br>If you are not interested</a></td>
				</tr>
				<tr>
					<td align=""center"">
						<p style=""color: #afafaf; font-family: 'Arial'; font-size: 16px; letter-spacing: 0.01em; padding: 15px 34px 0px 40px;"">By the way, I decided to let you know because you play on Grand Rp and registered there. If you're not interested, just let me know.</p>
					</td>
				</tr>
			</tbody>
		</table>
	</div>
	</body></html>"
7TvKa7BX,05 frame part 4 - button cari,dirham_yord,Java,Thursday 2nd of May 2024 04:26:12 AM CDT,"    private void btn_cariActionPerformed(java.awt.event.ActionEvent evt) {                                         
        Pert3_NPM connect = new Pert3_NPM();
        ResultSet data=null;
        PreparedStatement pst=null;
        String kodebarang = txt_carikodebarang.getText(); //txt_carikodebarang adalah nama variabel jtextfield untuk input kode barang, sesuaikan dengan variabel yang anda buat
        
        String namabarang, harga, stok;
        
        String query=""select * from barang where kd_barang='""+kodebarang+""';"";
        
        try{
            data = connect.getStatement().executeQuery(query);
            if(data.next()){
                namabarang=data.getString(""nama_brg"");
                harga=data.getString(""harga_brg"");
                stok=data.getString(""stok_brg"");
		JOptionPane.showMessageDialog(null, ""Kode Barang : ""+kodebarang+""\nNama Barang : ""+namabarang+""\nHarga : ""+harga+""\nStok : ""+stok);
            }
            txt_kodebarang.setText("""");
            txt_namabarang.setText("""");
            txt_harga.setText("""");
            txt_stok.setText("""");
        }catch(SQLException e){
            JOptionPane.showMessageDialog(null, ""tidak ditemukan"");
        }
    }"
LPfvRwjD,04 frame part 3 - button refresh,dirham_yord,Java,Thursday 2nd of May 2024 04:22:04 AM CDT,"    private void btn_refreshActionPerformed(java.awt.event.ActionEvent evt) {                                            
        Pert3_NPM connect = new Pert3_NPM();
        ResultSet data = null;
        int jumbaris = 0;
        int i = 0;
        
        String query=""select * from barang"";
        try{
            data=connect.getStatement().executeQuery(query);
            while(data.next()){
                jumbaris++;
            }
        }catch(SQLException ex){
            
        }
        String isi[][]=new String[jumbaris][5];
        try{
            data=connect.getStatement().executeQuery(query);
            while(data.next()){
                isi[i][0]=data.getString(""kd_barang""); //kd_barang adalah nama field pada table barang di database gudang
                isi[i][1]=data.getString(""nama_brg"");
                isi[i][2]=data.getString(""harga_brg"");
                isi[i][3]=data.getString(""stok_brg"");
                i++;
            }
        }catch(SQLException ex){
            
        }
        String namakolom[]={""Kode"",""Nama_Barang"",""Harga"",""Jml_Stok""}; //penamaan kolom header tabel
        DefaultTableModel model = new DefaultTableModel(isi,namakolom){};
        tbl_gudang.setModel(model); //tbl_gudang adalah nama variabel dari JTable untuk menampilkan data
    }"
EVJ9BzNk,03 frame part 2 - button simpan,dirham_yord,Java,Thursday 2nd of May 2024 04:15:47 AM CDT,"    private void btn_simpanActionPerformed(java.awt.event.ActionEvent evt) {                                           
        Pert3_NPM connect = new Pert3_NPM();
        String kodebarang = txt_kodebarang.getText(); //txt_barang adalah nama variabel untuk jtextfield input kode barang, sesuaikan dengan yang anda buat
        String namabarang = txt_namabarang.getText();
        int harga = Integer.parseInt(txt_harga.getText());
        int stok = Integer.parseInt(txt_stok.getText());
        
        String query=""insert into barang(kd_barang, nama_brg, harga_brg, stok_brg) values('""+kodebarang+""','""+namabarang+""',""+harga+"",""+stok+"")"";
        
        try{
            connect.getStatement().executeUpdate(query);
            txt_kodebarang.setText("""");
            txt_namabarang.setText("""");
            txt_harga.setText("""");
            txt_stok.setText("""");
            btn_refreshActionPerformed(null);
            JOptionPane.showMessageDialog(null, ""insert berhasil"");
        }catch(SQLException e){
            JOptionPane.showMessageDialog(null, ""insert gagal"");
        }
    }   "
ZXQ6aWQq,CarDemo,SenpaiZero,Java,Thursday 2nd of May 2024 04:07:38 AM CDT,"
public class CarDemo {
	public static void main(String[] args) {
		// Creating 2 car objects using the parameter value of Model and Color enum
		Car car1 = new Car(2014, Model.SUV, Color.RED);
		Car car2 = new Car(2018, Model.SEDAN, Color.ORANGE);
		
		// Printing the 2 car object data
		car1.print();
		System.out.println(); // For space
		car2.print();
	}
}
"
vE7Z6wEF,02 frame part 1 - initialization,dirham_yord,Java,Thursday 2nd of May 2024 04:07:28 AM CDT,"package pert3_NPM;
//ganti NPM sesuai dengan NPM anda

import java.sql.*;
import javax.swing.*;
import javax.swing.table.*;
import java.awt.*;
import java.security.*;

public class myFrame extends javax.swing.JFrame {
    public myFrame() {
        setTitle(""Data Gudang - Nama (NPM)"");
        initComponents();
    }"
Cxx7uzP7,Car,SenpaiZero,Java,Thursday 2nd of May 2024 04:07:09 AM CDT,"
public class Car {
	private int year;
	private Model model;
	private Color color;
	
	// Constructor for setting the value of data for year, model, and color
	public Car(int year, Model model, Color color) {
		this.year = year;
		this.model = model;
		this.color = color;
	}
	
	// Method for printing the value of variables
	public void print() {
		System.out.println(""Model: "" + model);
		System.out.println(""Color: "" + color);
		System.out.println(""Year: "" + year);
	}
}
"
2rGgZMcH,Model,SenpaiZero,Java,Thursday 2nd of May 2024 04:06:57 AM CDT,"
// Creating Model Enum
public enum Model {
	SEDAN,
	SUV,
	CONVERTIBLE,
	HATCHBACK
}

"
verGg7yq,Example templates.conf,BrainRTP,Kotlin,Thursday 2nd of May 2024 04:06:52 AM CDT,"#invisible
clickToBuy: ""&e‚ñ∂ Click to buy""

balanceNotEnough {
  message: ""&cNot enough money""
  sound: ""ENTITY_VILLAGER_NO""
}

successSound: ""BLOCK_NOTE_BLOCK_CHIME""

backButton {
  texture: ""bd69e06e5dadfd84e5f3d1c21063f2553b2fa945ee1d4d7152fdc5425bc12a9""
  name: ""&cBack""
}

closeButton {
  texture: ""5a6787ba32564e7c2f3a0ce64498ecbb23b89845e5a66b5cec7736f729ed37""
  name: ""&cClose""
  lore: ""&7Click to close menu""
  click{ closeMenu: true }
}

balanceIcon {
  texture: ""a9b906b2155f193787042338d05f840391c05a6d3e81623901b296bee3ffdd2""
  name: ""&fMoney: &e%vault_eco_balance%""
}"
ZnFFLbnA,Color,SenpaiZero,Java,Thursday 2nd of May 2024 04:06:23 AM CDT,"
// Creating Color enum
public enum Color {
        BLUE,
        RED,
        GREEN,
        WHITE,
        BLACK,
        ORANGE
}"
Xz1JbjEb,01 database,dirham_yord,Java,Thursday 2nd of May 2024 04:02:36 AM CDT,"package pert3_NPM;
//ganti NPM sesuai NPM anda

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;

//ganti NPM sesuai NPM anda
public class Pert3_NPM {
    private Statement data=null;
    private Connection koneksi=null;
    Statement st = null;
    ResultSet rs = null;
    PreparedStatement pst = null;
//ganti url koneksi database sesuai dengan database anda
    private String url=""jdbc:mysql://localhost:3306/gudang?zeroDateTimeBehavior=convertToNull"";
    private String user=""root"";
    private String pass="""";

//ganti NPM sesuai NPM anda
    Pert3_NPM(){
        try{
            koneksi = DriverManager.getConnection(url, user, pass);
            data = this.koneksi.createStatement();
            System.out.println(""["" + System.currentTimeMillis() + ""] Koneksi database berhasil!"");
        }catch(Throwable e){
            System.out.println(""["" + System.currentTimeMillis() + ""] Koneksi database gagal: "" + e);
            System.exit(1);
        }
    }
    public Connection getConnection(){
        return koneksi;
    }
    public Statement getStatement(){
        return data;
    }
    public static void main(String[]args){
        
    }
}"
2CHkixjj,Nz,Gaxil,C,Thursday 2nd of May 2024 03:58:07 AM CDT,"#include <stdio.h>
#include <stdlib.h>
#include <math.h>

unsigned long int moje_rand(void)
{
    static unsigned long int iterace = 1;
    const unsigned long int a = 279470273;
    const unsigned long int b = 0;
    const unsigned long int c = 4294967291;

    iterace = (a * iterace + b) % c;
    return iterace;
}

unsigned long int moje_rand2(void)
{
    static unsigned long int iterace = 7777;
    const unsigned long int a = 279470273;
    const unsigned long int b = 0;
    const unsigned long int c = 4294967291;

    iterace = (a * iterace + b) % c;
    return iterace;
}

void histo(double *value, int samples, int *bin, int num_bins)
{
    for (int i = 0; i < num_bins; i++)
        bin[i] = 0;
    for (int i = 0; i < samples; i++)
    {
        int bin_index = (int)((value[i] + 6.0) * num_bins / 12.0);

        if (bin_index >= 0 && bin_index < num_bins)
            bin[bin_index]++;
    }
}

double zvon() {
    double R1 = (double)moje_rand() / 4294967291.0;
    double R2 = (double)moje_rand2() / 4294967291.0;

    double x = sqrt(-2 * log(R1)) * cos(2 * M_PI * R2);

    return x;
}

int main()
{
    double *values;
    int N = 10000;
    int *histogram;
    int pocet_slotu = 20;
    int i;

    values = (double *)malloc(N * sizeof(double));
    histogram = (int *)malloc(pocet_slotu * sizeof(int));

    for (i = 0; i < N; i++)
    {
        values[i] = zvon();
    }

    histo(values, N, histogram, pocet_slotu);

    double bin_width = 12.0 / pocet_slotu;
    for (i = 0; i < pocet_slotu; i++)
    {
        double lower_bound = -6.0 + i * bin_width;
        double upper_bound = -6.0 + (i + 1) * bin_width;
        printf(""[%lf-%lf] - %d\n"", lower_bound, upper_bound, histogram[i]);
    }

    free(histogram);
    free(values);

    return 0;
}
"
iF7P4sbx,TP Python,dadodasyra,Python,Thursday 2nd of May 2024 03:54:57 AM CDT,"def h(x):
    return -4 * x ** 2 + 4 * x + 3


def find_max_of_h():
    xMax, yMax = 0, 0
    x = 0
    while x <= 3:
        y = h(x)
        if y > yMax:
            yMax = y
            xMax = x
        x += 0.1
    return xMax, yMax


max_x, max_y = find_max_of_h()
print(f""La valeur maximale de h(x) est {max_y} pour x = {max_x}"")
"
2Thi3vPd,ESP32-EXPRESS-MINI Sample Code,microrobotics,Arduino,Thursday 2nd of May 2024 03:53:40 AM CDT,"#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
#define OLED_RESET     -1 // Reset pin # (or -1 if sharing Arduino reset pin)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// Smiley bitmap: 8x8 pixels
const uint8_t smiley[8] = {
  0b00111100,
  0b01000010,
  0b10100101,
  0b10000001,
  0b10100101,
  0b10011001,
  0b01000010,
  0b00111100
};

int xPos = 0; // Initial x position
int yPos = 0; // Initial y position
int xMove = 2; // x movement speed
int yMove = 1; // y movement speed
int scale = 4; // Scaling factor for the bitmap

void setup() {
  Serial.begin(9600);
  
  // Initialize OLED display
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { // Address 0x3C for 128x64
    Serial.println(F(""SSD1306 allocation failed""));
    for (;;); // Don't proceed, loop forever
  }

  display.clearDisplay(); // Clear the buffer
}

void loop() {
  display.clearDisplay(); // Clear the display buffer

  // Update the position
  xPos += xMove;
  yPos += yMove;

  // Boundary detection for bouncing
  if (xPos <= 0 || xPos >= SCREEN_WIDTH - 8 * scale) {
    xMove = -xMove; // Reverse direction on x-axis
  }
  if (yPos <= 0 || yPos >= SCREEN_HEIGHT - 8 * scale) {
    yMove = -yMove; // Reverse direction on y-axis
  }

  // Draw the scaled bitmap at the new position
  displayScaledBitmap(xPos, yPos, scale);
  display.display(); // Show the updated frame

  delay(10); // Delay to control animation speed
}

void displayScaledBitmap(int x, int y, int scaleFactor) {
  for (int i = 0; i < 8; i++) {
    for (int j = 0; j < 8; j++) {
      if (smiley[i] & (1 << (7 - j))) { // Check each bit (note the bit order reversal)
        display.fillRect(x + j * scaleFactor, y + i * scaleFactor, scaleFactor, scaleFactor, SSD1306_WHITE);
      }
    }
  }
}
"
gyb5MeMV,WIP: Line Balacing Subtitle Edit,ivandrofly,C#,Thursday 2nd of May 2024 03:50:36 AM CDT,"NOTE: This is not yet completed (a lot of duplication)

        enum BreakType
        {
            None,
            Dialog,
            Command,
            Ending,
        }
public string Split(string input)
        {
            var breakEarlyDialog = true;
            
            var dp = new bool[input.Length];
            var dpBreakTypes = new BreakType[input.Length];
            var hash = new HashSet<char>();
            var comma = new HashSet<char>();
            for (int i = 0; i < input.Length; i++)
            {
                if (hash.Contains(input[i]))
                {
                    dp[i] = CanSplit(input, i);
                }
            }

            for (var i = 0; i < dp.Length; i++)
            {
                if (dpBreakTypes[i] == BreakType.None)
                {
                    continue;
                }
                
                // maybe calculate and get type break type from position
                // return with break as soon as there is a match
                
                // note: to get the best from avg move both dir
                // split from mid and find first BreakType.Dialog and check if it's what we looking for
                // if true then it will give the best split position
                // f(x) => breaktype;
                // f(x+1) => breaktype
                // f(x-1) => breaktype

                if (dpBreakTypes[i] == BreakType.Dialog && breakEarlyDialog)
                {
                    return string.Join(Environment.NewLine, input.Substring(0, i), input.Substring(i));
                }
                if (dp[i] && breakEarlyDialog && comma.Contains(input[i]))
                {
                    return string.Join(Environment.NewLine, input.Substring(0, i), input.Substring(i));
                }
                if (dp[i] && breakEarlyDialog && comma.Contains(input[i]))
                {
                    return string.Join(Environment.NewLine, input.Substring(0, i), input.Substring(i));
                }
                if (dp[i] && breakEarlyDialog && comma.Contains(input[i]))
                {
                    return string.Join(Environment.NewLine, input.Substring(0, i), input.Substring(i));
                }
                if (dp[i] && breakEarlyDialog && comma.Contains(input[i]))
                {
                    return string.Join(Environment.NewLine, input.Substring(0, i), input.Substring(i));
                }
            }

            return """";
            
        }"
58eyMpNX,snowybot manual divide 10fold,coinwalk,JavaScript,Thursday 2nd of May 2024 03:26:57 AM CDT,"var olderest = parseFloat(document.getElementById('pct_balance').value);
var basebet = Number((olderest/1000).toFixed(8));
var betnext = basebet;
var tens = (basebet*10);
var fifty = (basebet*200);
var sevens = (basebet*6.9);
var eights = (basebet*7.9);
var setasseven = 0;
var chickendinner = (olderest*24);
var belance = olderest;
var stages = parseFloat(olderest);
var goodoldbal = ((Math.floor(stages/tens))*tens);
var stoogy = parseFloat(olderest);
var badoldbal = ((Math.floor(stoogy/tens))*tens);
var setsoftens = 4;
 
function go(){
belance = document.getElementById('pct_balance').value;
var dog = Number((belance-olderest).toFixed(8));
console.log(""profit"");
console.log(dog);
if ((belance>(((Math.floor(belance/tens))*tens)+sevens))&&(belance<(((Math.floor(belance/tens))*tens)+eights))&&(belance!=setasseven)){
    betnext = betnext*2;
    setasseven = parseFloat(belance);
}
if (((belance-(betnext*2))<=(badoldbal-fifty))&&(belance<(((Math.floor(belance/tens))*tens)+sevens))){
    betnext = basebet;
    setasseven = 0;
    setsoftens = 0;
    stoogy = parseFloat(belance);
    badoldbal = ((Math.floor(stoogy/tens))*tens);
}
if ((belance>=(goodoldbal+(tens*setsoftens)))&&(belance<(((Math.floor(belance/tens))*tens)+sevens))){
    betnext = basebet;
    setasseven = 0;
    setsoftens = 4;
    stages = parseFloat(belance);
    stoogy = parseFloat(belance);
    badoldbal = ((Math.floor(stoogy/tens))*tens);
goodoldbal = ((Math.floor(stages/tens))*tens);
}
if ((belance>=(goodoldbal+(tens*setsoftens)))&&(belance>(((Math.floor(belance/tens))*tens)+eights))){
    betnext = basebet;
    setasseven = 0;
    setsoftens = 4;
    badoldbal = parseFloat(belance);
    stages = parseFloat(belance);
goodoldbal = ((Math.floor(stages/tens))*tens);
}
if (belance>=chickendinner){
console.log(""winner winner chicken dinner"");
return;
}
$('#pct_chance').val(49.5);
$('#pct_bet').val(((betnext*1).toFixed(8)));
$('#a_lo').click();
setTimeout(() => go(), 1000);
}
go();
"
8Ljy8NVY,Fast YT2MP3,About80Ninjas,Python,Thursday 2nd of May 2024 03:08:47 AM CDT,"import os
import subprocess
import time
from pytube import Playlist, YouTube
from multiprocessing import Pool


def convert_youtube_video_to_mp3(args):
    url, output_path = args
    # create a youtube object
    yt = YouTube(url)

    # get the first video stream
    stream = yt.streams.get_audio_only()

    # download the video
    stream.download(output_path=output_path)

    # get the file name
    file_name = ''.join(c for c in yt.title if c.isalnum() or c in ' _-')  # remove invalid characters

    # create the path of the downloaded video
    video_path = os.path.join(output_path, f""{file_name}.mp4"")

    # convert the video to mp3
    ffmpeg_path = ""/usr/local/bin/ffmpeg""  # replace with the actual path to ffmpeg
    mp3_path = os.path.join(output_path, f""{os.path.splitext(file_name)[0]}.mp3"")
    subprocess.check_call([ffmpeg_path, ""-i"", video_path, mp3_path])
    
    # remove the downloaded video
    os.remove(video_path)


def convert_youtube_playlist_to_mp3(playlist_url, output_path):
    """"""Converts a youtube playlist into mp3 and saves them.""""""
    # create a playlist object
    playlist = Playlist(playlist_url)

    # create a multiprocessing pool
    with Pool() as pool:
        # map the video urls to the conversion function
        pool.map(convert_youtube_video_to_mp3, [(video, output_path) for video in playlist.video_urls])
        # wait for all processes to finish
        pool.close()
        pool.join()


if __name__ == ""__main__"":
    playlist_url = ""https://www.youtube.com/watch?v=rmzJgQi354M&list=RDGMEMveQBJ5EaHfODz2alVFs-IQVMrmzJgQi354M""
    output_path = ""./downloads""
    convert_youtube_playlist_to_mp3(playlist_url, output_path)

"
AEujGVTt,Untitled,RenSafaray,Java,Thursday 2nd of May 2024 03:08:23 AM CDT,"import java.util.Scanner;

public class MyTask2Edit {
    private int[] aiArray;
    private int[] biArray;

    public void inputArray() {
        Scanner sc = new Scanner(System.in);
        System.out.println(""–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–µ–ª: "");
        int N = sc.nextInt();
        aiArray = new int[N];
        biArray = new int[N];
        System.out.println(""–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞:"");
        for (int i = 0; i < N; i++) {
            aiArray[i] = sc.nextInt();
        }
    }

    public void doTask() {
        for (int i = 0; i < aiArray.length; i++) {
            int ai = aiArray[i];
            if (ai % 2 == 0 && ai % 5 == 0) {
                biArray[i] = ai;
            } else if (ai % 2 == 0) {
                biArray[i] = ai * ai;
            } else if (ai % 5 == 0) {
                biArray[i] = ai * ai * ai;
            } else {
                biArray[i] = 1 / ai;
            }
        }
        System.out.println(""–°–ø–∏—Å–æ–∫ bi:"");
        for (int i = 0; i < biArray.length; i++) {
            System.out.println(biArray[i]);
        }
    }
}"
8L1KK5JZ,Untitled,RenSafaray,Java,Thursday 2nd of May 2024 03:08:07 AM CDT,"public class Main {
    public static void main(String[] args) {
        MyTask2Edit ob = new MyTask2Edit();
        ob.inputArray();
        ob.doTask();

        MyTaskk.DoTaskk();
    }
}
"
T2vahWV5,main.py,Daealis,Python,Thursday 2nd of May 2024 03:00:46 AM CDT,"import board

from kmk.kmk_keyboard import KMKKeyboard
from kmk.keys import KC
from kmk.handlers.sequences import simple_key_sequence
from kmk.handlers.sequences import send_string
from kmk.modules.tapdance import TapDance

keyboard = KMKKeyboard()
#keyboard.modules.append(holdtap)

tapdance = TapDance()
tapdance.tap_time = 500
keyboard.modules.append(tapdance)

keyboard.col_pins = (board.GP0,board.GP2,board.GP4,board.GP7,)
keyboard.row_pins = (board.GP1,board.GP3,board.GP5,board.GP8,)


HAIKU = simple_key_sequence(
    (
        send_string(""Sun warmed grassy plains,""),
		KC.LSHIFT(KC.ENTER), 
		send_string(""Steaming gifts dot the landscape,""),
		KC.LSHIFT(KC.ENTER), 
		send_string(""Fragrant fly hotel.""),
		KC.ENTER,
	)
)

DTRIGHT = simple_key_sequence(
    (
        KC.LGUI(no_release=True), 
        KC.LCTRL(no_release=True), 
        KC.MACRO_SLEEP_MS(30),
        KC.RIGHT,
        KC.MACRO_SLEEP_MS(30),
        KC.LGUI(no_press=True),
        KC.LCTRL(no_press=True),
    )
)
DTLEFT = simple_key_sequence(
    (
        KC.LGUI(no_release=True), 
        KC.LCTRL(no_release=True), 
        KC.MACRO_SLEEP_MS(30),
        KC.LEFT,
        KC.MACRO_SLEEP_MS(30),
        KC.LGUI(no_press=True),
        KC.LCTRL(no_press=True),
    )
)

COPY = simple_key_sequence(
    (
	    KC.LCTRL(KC.C),
    )
)
PASTE = simple_key_sequence(
    (
	    KC.LCTRL(KC.V),
    )
)

DESKTOP_TAP = KC.TD(DTRIGHT, DTLEFT, tap_time=200)


keyboard.keymap = [
    [HAIKU,0,0,0,
	0,COPY,0,0,
	0,0,PASTE,0,
	0,0,0,DESKTOP_TAP,],
]

if __name__ == '__main__':
    keyboard.go()"
PU2cSrUN,Untitled,KoctrX,JavaScript,Thursday 2nd of May 2024 02:53:50 AM CDT,"<IfModule mod_ssl.c>
<VirtualHost *:443>
    ServerName darlink.ai
    DocumentRoot /var/www/html
    Header always set Referrer-Policy ""same-origin""
    #Alias /static1 /var/www/darlink/public/static
    #Alias /uploads /var/www/darlink/public/uploads
    # Enable the proxy features
    ProxyRequests Off
    <Proxy *>
        Order deny,allow
        Allow from all
    </Proxy>

<Location ""/"">
    AuthType Basic
    AuthName ""Restricted Content""
    AuthUserFile /etc/apache2/.htpasswd
    Require valid-user
    <RequireAny>
        Require ip 194.31.175.251
#	Require ip 91.225.196.106
	Require ip 176.115.100.90
	Require ip 37.115.212.198
        Require ip 148.77.2.74
	Require ip 195.238.119.90
	Require ip 18.159.53.253
	#Require ip 188.163.40.119
  #      Require ip 188.163.40.119
        <RequireAll>
            Require valid-user
        </RequireAll>
    </RequireAny>
</Location>

<Location ""/uploads"">
    Require all granted
</Location>

<Location ""/static-default"">
    Require all granted
</Location>

	ProxyPass /ws/ ws://localhost:9000/
    ProxyPassReverse /ws/ ws://localhost:9000/

    ProxyPass /admin/adminer.php !
    # Forward requests to the local application
    ProxyPass /next http://localhost:3005/
    ProxyPassReverse /next http://localhost:3005/

    ProxyPass / http://localhost:4000/
    ProxyPassReverse / http://localhost:4000/

    ErrorLog ${APACHE_LOG_DIR}/error.log
    CustomLog ${APACHE_LOG_DIR}/access.log combined
#RewriteEngine on
#RewriteCond %{SERVER_NAME} =femlink.webstaginghub.com
#RewriteRule ^ https://%{SERVER_NAME}%{REQUEST_URI} [END,NE,R=permanent]
#RewriteEngine On
#RewriteCond %{HTTPS} off
#RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]


SSLCertificateFile /etc/letsencrypt/live/darlink.ai/fullchain.pem
SSLCertificateKeyFile /etc/letsencrypt/live/darlink.ai/privkey.pem
Include /etc/letsencrypt/options-ssl-apache.conf
</VirtualHost>
</IfModule>"
taAcPi6C,Untitled,RenSafaray,Java,Thursday 2nd of May 2024 02:48:44 AM CDT,"import java.util.Scanner;

public class MyTaskk {

    public static void DoTaskk() {
        Scanner sc = new Scanner(System.in);
        System.out.println(""–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–µ–ª: "");
        int N = sc.nextInt();
        int[] aiArray = new int[N];
        int[] biArray = new int[N];
        System.out.println(""–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞:"");
        for (int i = 0; i < N; i++) {
            aiArray[i] = sc.nextInt();
        }
        for (int i = 0; i < N; i++) {
            int ai = aiArray[i];
            if (ai % 2 == 0 && ai % 5 == 0) {
                biArray[i] = ai;
            } else if (ai % 2 == 0) {
                biArray[i] = ai * ai;
            } else if (ai % 5 == 0) {
                biArray[i] = ai * ai * ai;
            } else {
                biArray[i] = 1 / ai;
            }
        }
        System.out.println(""–°–ø–∏—Å–æ–∫ bi:"");
        for (int i = 0; i < N; i++) {
            System.out.println(biArray[i]);
        }
    }

    public void doTask() {
        Scanner sc = new Scanner(System.in);
        System.out.println(""–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–µ–ª: "");
        int N = sc.nextInt();
        int[] aiArray = new int[N];
        int[] biArray = new int[N];
        System.out.println(""–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞:"");
        for (int i = 0; i < N; i++) {
            aiArray[i] = sc.nextInt();
        }
        for (int i = 0; i < N; i++) {
            int ai = aiArray[i];
            if (ai % 2 == 0 && ai % 5 == 0) {
                biArray[i] = ai;
            } else if (ai % 2 == 0) {
                biArray[i] = ai * ai;
            } else if (ai % 5 == 0) {
                biArray[i] = ai * ai * ai;
            } else {
                biArray[i] = 1 / ai;
            }
        }
        System.out.println(""–°–ø–∏—Å–æ–∫ bi:"");
        for (int i = 0; i < N; i++) {
            System.out.println(biArray[i]);
        }
    }
}
"
SWxTH0Hc,Untitled,RenSafaray,Java,Thursday 2nd of May 2024 02:48:23 AM CDT,"import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println(""–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: "");
        System.out.println(""1. –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥"");
        System.out.println(""2. –ú–µ—Ç–æ–¥ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞"");
        int choice = sc.nextInt();
        switch (choice) {
            case 1:
                MyTaskk.DoTaskk();
                break;
            case 2:
                MyTaskk task = new MyTaskk();
                task.doTask();
                break;
            default:
                System.out.println(""–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!"");
        }
    }
}"
awCsHeuM,snowybot,coinwalk,JavaScript,Thursday 2nd of May 2024 02:35:38 AM CDT,"var olderest = parseFloat(document.getElementById('pct_balance').value);
var basebet = Number((olderest/1000).toFixed(8));
var betnext = basebet;
var tens = (basebet*10);
var fifty = (basebet*200);
var sevens = (basebet*6.9);
var eights = (basebet*7.9);
var setasseven = 0;
var chickendinner = (olderest*24);
var belance = olderest;
var stages = parseFloat(olderest);
var goodoldbal = ((Math.floor(stages/tens))*tens);
var stoogy = parseFloat(olderest);
var badoldbal = ((Math.floor(stoogy/tens))*tens);
var setsoftens = 1;
 
function go(){
belance = document.getElementById('pct_balance').value;
var dog = Number((belance-olderest).toFixed(8));
console.log(""profit"");
console.log(dog);
if ((belance>(((Math.floor(belance/tens))*tens)+sevens))&&(belance<(((Math.floor(belance/tens))*tens)+eights))&&(belance!=setasseven)){
    betnext = betnext*2;
    setasseven = parseFloat(belance);
}
if (((belance-(betnext*2))<=(badoldbal-fifty))&&(belance<(((Math.floor(belance/tens))*tens)+sevens))){
    betnext = basebet;
    setasseven = 0;
    setsoftens = 0;
    stoogy = parseFloat(belance);
    badoldbal = ((Math.floor(stoogy/tens))*tens);
}
if ((belance>=(goodoldbal+(tens*setsoftens)))&&(belance<(((Math.floor(belance/tens))*tens)+sevens))){
    betnext = basebet;
    setasseven = 0;
    setsoftens = 1;
    stages = parseFloat(belance);
    stoogy = parseFloat(belance);
    badoldbal = ((Math.floor(stoogy/tens))*tens);
goodoldbal = ((Math.floor(stages/tens))*tens);
}
if ((belance>=(goodoldbal+(tens*setsoftens)))&&(belance>(((Math.floor(belance/tens))*tens)+eights))){
    betnext = basebet;
    setasseven = 0;
    setsoftens = 1;
    badoldbal = parseFloat(belance);
    stages = parseFloat(belance);
goodoldbal = ((Math.floor(stages/tens))*tens);
}
if (belance>=chickendinner){
console.log(""winner winner chicken dinner"");
return;
}
$('#pct_chance').val(49.5);
$('#pct_bet').val(((betnext*1).toFixed(8)));
$('#a_lo').click();
setTimeout(() => go(), 1000);
}
go();"
7MKWNB7u,COCHE CODIGO ARDUINOBLOCKS,Jdus,Bash,Thursday 2nd of May 2024 02:32:45 AM CDT,"#DAVID PHUYAL PROJECT CAR
#include <HardwareSerial.h>
#include <Wire.h>
#include ""ABlocks_LiquidCrystal_I2C.h""
#include <ABLocks_TimerFreeTone.h>
#include <Adafruit_CCS811.h>
#include <Servo.h>

#include ""ABlocks_Button.h""
#include ""ABlocks_DHT.h""

double temperatura;
double comando;
double humedad;
double comando_pwm;
double nivel_ldr;
String s_datos;
boolean b_auto_ldr;
boolean b_auto_mov;
boolean b_sensor_mov;
HardwareSerial &bt_serial=Serial;
LiquidCrystal_I2C lcd_1(0x27,16,2);
byte lcd_1_customchar_0[8]={B00000,B00100,B01010,B10001,B00100,B01010,B00000,B00100};

String rtt_melody_17="":d=4,o=5,b=140:8e6,8d#6,8e6,8d#6,8e6,8b,8d6,8c6,a,8p,8c,8e,8a,b,8p,8e,8g#,8b,c6"";
String rtt_melody_16="":d=4,o=5,b=120:8p,16a,16f,16a,16c6,16b,16a,16g,16a,16g,8e,16g,16g,16g,16g,8a,16b,32c6,32b,32c6,32b,32c6,32b,8c6"";
Adafruit_CCS811 sensor_ccs811;
unsigned long sensor_ccs811_lastread=0;
double sensor_ccs811_co2_ppm=0.0;
double sensor_ccs811_co2_mgm3=0.0;
double sensor_ccs811_co2_tvoc_ppb=0.0;
Servo servo_10;
Servo servo_9;
unsigned long task_time_ms=0;

Button button_debounced_4(4,50);

Button button_debounced_8(8,50);

DHT dhtA0(A0,DHT22);

double fnc_ccs811_data(int _type)
{
	double v=0.0;
	if((millis()-sensor_ccs811_lastread)>=1000){
		if(sensor_ccs811.available() && (!sensor_ccs811.readData()) ){
			//update new values from sensor
			sensor_ccs811_co2_ppm=((double)sensor_ccs811.geteCO2());
			sensor_ccs811_co2_mgm3=((double)sensor_ccs811_co2_ppm*(double)1.8);
			sensor_ccs811_co2_tvoc_ppb=((double)sensor_ccs811.getTVOC());
			sensor_ccs811_lastread=millis();
		}
		else{
			//error reading sensor, reset values...
			sensor_ccs811_co2_ppm=0.0;
			sensor_ccs811_co2_mgm3=0.0;
			sensor_ccs811_co2_tvoc_ppb=0.0;
		}
	}
	//return value
	if(_type==0)v=sensor_ccs811_co2_ppm;
	if(_type==1)v=sensor_ccs811_co2_tvoc_ppb;
	if(_type==2)v=sensor_ccs811_co2_mgm3;

	return v;
}

void comandos_BT() {
	if ((bt_serial.available()>0)) {
		comando = bt_serial.read();
		comandos_PWM();
		if ((comando == ('a'))) {
			digitalWrite(13,HIGH);
		}
		else if ((comando == ('b'))) {
			digitalWrite(13,LOW);
		}
		else if ((comando == ('c'))) {
			digitalWrite(12,HIGH);
		}
		else if ((comando == ('d'))) {
			digitalWrite(12,LOW);
		}
		else if ((comando == ('e'))) {
			TimerFreeToneRtttl(3,(const char *)rtt_melody_17.c_str());
		}
		else if ((comando == ('f'))) {
			TimerFreeToneRtttl(3,(const char *)rtt_melody_16.c_str());
		}
		else if ((comando == ('h'))) {
			bt_serial.println(analogRead(A1));
		}
		else if ((comando == ('i'))) {
			bt_serial.println(fnc_ccs811_data(0));
		}
		else if ((comando == ('j'))) {
			bt_serial.println(analogRead(A2));
		}
		else if ((comando == ('k'))) {
			bt_serial.println(analogRead(A3));
		}
		else if ((comando == ('l'))) {
			servo_10.write(180);
		}
		else if ((comando == ('m'))) {
			servo_10.write(0);
		}
		else if ((comando == ('n'))) {
			servo_9.write(180);
		}
		else if ((comando == ('o'))) {
			servo_9.write(0);
		}
		else if ((comando == ('p'))) {
			digitalWrite(5,HIGH);
		}
		else if ((comando == ('q'))) {
			digitalWrite(5,LOW);
		}
		else if ((comando == ('r'))) {
			digitalWrite(6,HIGH);
			digitalWrite(7,LOW);
		}
		else if ((comando == ('s'))) {
			digitalWrite(6,LOW);
			digitalWrite(7,LOW);
		}

	}

}
void comandos_PWM() {
	if ((comando == ('t'))) {
		s_datos = bt_serial.readStringUntil(('#'));
		comando_pwm = String(s_datos).toFloat();
		servo_10.write(comando_pwm);
	}
	else if ((comando == ('u'))) {
		s_datos = bt_serial.readStringUntil(('#'));
		comando_pwm = String(s_datos).toFloat();
		servo_9.write(comando_pwm);
	}
	else if ((comando == ('v'))) {
		s_datos = bt_serial.readStringUntil(('#'));
		comando_pwm = String(s_datos).toFloat();
		analogWrite(5,comando_pwm);
	}
	else if ((comando == ('w'))) {
		s_datos = bt_serial.readStringUntil(('#'));
		comando_pwm = String(s_datos).toFloat();
		digitalWrite(7, LOW);
		analogWrite(6, comando_pwm);
	}

}
void modo_automatico() {
	if (button_debounced_4.pressed()) {
		b_auto_ldr = (!b_auto_ldr);
		lcd_1.clear();
		lcd_1.setCursor(0, 0);
		lcd_1.print(String(""Auto LDR: ""));
		lcd_1.setCursor(0, 1);
		lcd_1.print(b_auto_ldr);
		delay(2000);
	}

	if (button_debounced_8.pressed()) {
		b_auto_mov = (!b_auto_mov);
		lcd_1.clear();
		lcd_1.setCursor(0, 0);
		lcd_1.print(String(""Auto MOV:""));
		lcd_1.setCursor(0, 1);
		lcd_1.print(b_auto_mov);
		delay(2000);
	}

	b_sensor_mov = digitalRead(2);
	if (b_auto_mov) {
		if (b_sensor_mov) {
			digitalWrite(13,HIGH);
		}
		else {
			digitalWrite(13,LOW);
		}

	}

	nivel_ldr = analogRead(A1);
	if (b_auto_ldr) {
		if ((nivel_ldr < 200)) {
			digitalWrite(5,HIGH);
		}
		else {
			digitalWrite(5,LOW);
		}

	}

}
void saludo_LCD() {
	lcd_1.clear();
	lcd_1.setCursor(0, 0);
	lcd_1.print(String(""Maleta Innov 4.0""));
	lcd_1.setCursor(0, 1);
	lcd_1.print(String(""Smart Home IoT""));
}
void info_LCD() {
	temperatura = dhtA0.readTemperature();
	humedad = dhtA0.readHumidity();
	lcd_1.clear();
	lcd_1.setCursor(0, 0);
	lcd_1.print(String(""Temp (C): ""));
	lcd_1.setCursor(10, 0);
	lcd_1.print((String(temperatura,1)));
	lcd_1.setCursor(0, 1);
	lcd_1.print(String(""Hum. (%):""));
	lcd_1.setCursor(10, 1);
	lcd_1.print((String(humedad,0)));
	if (b_sensor_mov) {
		lcd_1.setCursor(15, 1);
		lcd_1.write((byte)0);
	}

}

void setup()
{
  	pinMode(13, OUTPUT);
	pinMode(12, OUTPUT);
	pinMode(3, OUTPUT);
	pinMode(A1, INPUT);
	pinMode(A2, INPUT);
	pinMode(A3, INPUT);
	servo_10.attach(10);
	servo_9.attach(9);
	pinMode(5, OUTPUT);
	pinMode(6, OUTPUT);
	pinMode(7, OUTPUT);
	pinMode(4, INPUT);
	pinMode(8, INPUT);
	pinMode(2, INPUT);
	pinMode(A0, INPUT);

bt_serial.begin(9600);
	sensor_ccs811.begin();

	dhtA0.begin();

	lcd_1.begin();
	lcd_1.noCursor();
	lcd_1.backlight();
	lcd_1.createChar(0, lcd_1_customchar_0);
	saludo_LCD();

}


void loop()
{

  	comandos_BT();
  	modo_automatico();
  	if((millis()-task_time_ms)>=5000){
  		task_time_ms=millis();
  		info_LCD();
  	}

}"
p2MKBBeS,Untitled,RenSafaray,Java,Thursday 2nd of May 2024 02:20:59 AM CDT,"package com.example;

import java.util.Scanner;

public class ArrayProcessor {
    private double[] a;
    private double[] b;

    public ArrayProcessor(int n) {
        a = new double[n];
        b = new double[n];
    }

    public void inputArray() {
        Scanner scanner = new Scanner(System.in);
        for (int i = 0; i < a.length; i++) {
            System.out.print(""–í–≤–µ–¥–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç a["" + i + ""]: "");
            a[i] = scanner.nextDouble();
        }
    }

    public void calculateArray() {
        for (int i = 0; i < a.length; i++) {
            if (a[i] % 2 == 0 && a[i] % 5 == 0) {
                b[i] = a[i];
            } else if (a[i] % 2 == 0) {
                b[i] = Math.pow(a[i], 2);
            } else if (a[i] % 5 == 0) {
                b[i] = Math.pow(a[i], 3);
            } else {
                b[i] = 1 / a[i];
            }
        }
    }

    public void printArray() {
        System.out.println(""–ú–∞—Å—Å–∏–≤ b:"");
        for (int i = 0; i < b.length; i++) {
            System.out.println(""b["" + i + ""] = "" + b[i]);
        }
    }
}"
c5xnqEJq,Untitled,RenSafaray,Java,Thursday 2nd of May 2024 02:20:10 AM CDT,"import com.example.ArrayProcessor;

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print(""–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: "");
        int n = scanner.nextInt();
        ArrayProcessor processor = new ArrayProcessor(n);
        processor.inputArray();
        processor.calculateArray();
        processor.printArray();
    }
}
"
YnZb396y,Odyn's Beard: General,Unhalted,Lua,Thursday 2nd of May 2024 02:05:56 AM CDT,!WA:2!TV3E0XXD99QXRDcEDivw2XVJ94nXosj2R1UYs2wjgLDxTR0ARxE2vY2XXz3z3z0ot0OzMmZS6HBYLerW4cxGlckp6LqYv8OxOHhvq5wGBjbDo0t)NY9xuoTmLwi540ekho0EpMhLWbW973FZm7dTRSDCCiPnKt06z(9(X3pF((43VHzKMmZ1EWqHdEOMgVjHMeoh7I54ZpMGHMEmnfnJJ4ZNVH81AW21BkVMQLHMIIOqmjzfbdr1JOV(iccdQYgtsm)ySNkMISOQ1PNVhElr2Hn5ZPiQVXKJRRzyXRAXgrvvROAEXXHczQ3u)YMMYQfy54LfyJwC0rnpFondbrJOUda9gJQiFMZWBiWMwttXswFolT8tiAykRPUjM3LkNzEEfrF5Gr2OYf8NZP6sZwWqROEsiv9ghc6HmXK4TYKwYqK3AEE18sAgdPjRALlw8bshNBoNQLs(mIRAr(Iwq2dQBbDHP)5DYYzLGHHXNBzJluquFTPEGI8gISjkQOWECjzlX5mela1l906IC0XGbFEAd1bNPfVHL)CJkRkBk5pk8pw(NXYqUqby6SLDB4(4zNtqmhSuGnHrVX7BOed3xulS94lAWhEgtDrfLKcM(pVzXCItalKPGslp18zIfjv6mPshHlD0IqJNtxHFArdov(Xfn9ZrlAUEf5vSKkv1HmeHQYLAO4913SfvDhc(nMAqyVq0IzbNjRZBR2yA3KNLxvECECE1bzljwqK3umLfinuWs66j7mQQMQ4IcWOflrgCSBykc7fcMZGffNzK2IooVSAcsyOcK2i7N0oPd4F36stjGSG(nnOW0Q3MjBurqqOt2Eevfn4vUaS)jAOYRmIJ4WhC(rnGPkmq4T49DbND5eysyhMlvmU4XhywtrLrPB9K16U1MufMs(IQOXlKiNfinPATbUXlccB(Jcl253ajIFU8k8MM4trnbHe8H5G1qo6MnS4YROlX7BoCok7k3iRoQMHZIK)WfLfMVVwJ06XsD)N5yh9OnL)jA8CNEotDEJXoUSGL0nnNmu3uAfnYlUTgYv0u0iZumK15x)oeKnXnY0ItzLXPfZONXsECXmWIc)4Y5ZybI1MsAkcttAD)RL0izTlsBzonlA3ZmVjUianqrdXSKnd7z(jB1pzB7EwbTm5lAAPnE2Co)7uR4ReJcwscd)G48ZewKbiUMA)IMM8feDezAoWW9M54rYeR34XoAGw87hfoZiQorqiFlRPhYawIzpm7OaAhhdn3FQEAXpl8F6yonh4bZNiXbB9GTMira2GbzlvDGiaEnWdA0jlndA9evf873RPkxwkNtu5chxUGPRqqZoDI8OSQAwSU51hS1kAWAjjQYIptzSAoGBUbAHfBF3QvBvO5G)hmXkAOwDjc2JOLBxdcEatJ7aWRfDRtGwdCjNehxKFSiqklzA4w7s5gCIk7Qlzl2px6AwsY0tWrG0R7SYsZ0z87wOG098GUTXv1KIlwnJaUy9PPzfd1biR0D0l9izjfoybfTC8kERbLhsWFu4tM8EQR8DErvu1tpg8cO(ijYHZfDW0PhS)zYX7YL3BxpFJnY2qdnu6bF(aQxtElK4suAgdp4t0rb1E6nMWq(mShRiVaYVWMo9cuqMdJ4jz0xxb3oBqd8xAvNR3b5sEpdoq6i9LlpOolZ0dTYwdU)qxWYbmECdE9(1ee1xFS(I0)qPhmAFrID0iD3DY0jhjU(Ab8UiQfrvWf9Q3rsK0Bu(8I3lDdY8EljCCVdPnjavXh7xuqM)EDsf)TTfnL4f0M8eU836ncmmreUFaYlkik0VSQezJg4UhS8mlSWPkGdlUO9fFGUN1ubuDJVNl5aPs2DCd3rV(AlPC2rboVHZAI3GT5Yd2y8MwWEkuK7D4K7T8B7nfLPIwnPzYRnUoWLzkrs4JKC(HBNVhHyAQHNk8CaNJOaLRCLBwVr0afNfgNz0QGNTuKb9cdoC6(soq8k3CobdxzjdIF0SH5Cy7WbQ(zlXrvsmTKCSH4duuezaRRKQJCAWcGMGMRTk7jWEdE7b2dBaGGPsgUXnlKceqQu81p8FUBrN0BlA9LLfJwA2kP3y5r(W6cqMKwopyXIgQPjpD9HlbUuvz9tusmsICZ34UjB)CnDEqaidFotnJC4oBwsZ(j7GWcAE50BQCEO5c08N3PBPkZjTqUvYUMXtbFtTrAzbuLbRRgcVYkjdIqOMkHZ7Ks3U1iGF)KBXVJfiM6BpwVrsNb45Zac(doWEybnl0NCuUmdoAq7zYYLhzvGE)oi7HWnLVjkTXrBP9aQwqvt7H1DfEpSz2dB5TdytiOZoS32Cs1yAJNJ3QpnWAtTjbbahDeUBVE0DEfN2lSh(WSbQEehGLxvWTZPzx9eiq1YoLEOoczhU8WT2I5oRGcvPeuvnPIgynm7qu7(ga05dLf1rJ2Uqj9W0AEyyTK(qahded0slS7DVSowUd2XZJMScdgSmlPLJECOfV0QFROPCZI1nVL0whpsnTvTAbRO1GYx)gc1OD4lH2p2kAeSS1Vv4IvtJSu9x1F3lpTL5en1b2yCfVILF0sM7KAgdSYv(fyQu(fCiv(nyy48sT9yf2Lb7(cvAtwZLf54INAObhivCG4zzgIaJexKKDhOotkpnWgffRoZsqb4bYUj3gzV(1xl6zZeIPD8zazjEYgMbhyQfueF0nOV7L3YvfXc85NoZOkAAgsNx3qRaY67y(7TVTgwbje6xXs9n4axEVfYbS(WuLCWz90Zhgy9z85O9DkhTVZRvwdn5(CScVKNU(0dS8J7X1eYGeQzjXpYgi7CrG4VSMi3ekRZEcxhmYGUm4Br3xC8ljmm(i7CwSbOj76OLRjmOFMUEcNzcztzqJCwVgteC8KSbVwtZrBX52M(MrTYzSQyqR6(aPTzlLxGDLxNTMsU0P35PzwHRs6RJMs1kAIgbE9coTtjTZpI(wQT5nlnsw0z67PLBbAXq7qKhDAYANJAZf1vLOdm4aX1Bz5gQ147ZA0B0zqt1Iw2DD9DUCnbqyNxgH3(i70a2iWIOFRlxPRsKDoAbkBuXSUvawQovD2i09M(NvVPkgKElclwQ2upJl68(KWgmAF4mh39bN1kpXb3PBfXYa2LQS1lzR32xUPKZBv09y8p2S7ouPQx70jFPDZCsIYfKScr6AKzr10QGksdjYDJ(htIr)nk93UPUoJgPlDEkElQNnMHbARLAok)us6RTmWY1CssEYDsUlhFJNMj6z00gh8SfBSELfeev5gi(iX5YnUSHbSfTaY(vYd45ObFHYmXOV16aWlpNibzML6nHjy(cyaCI0Zxr5dVR8(1VLLNHOSqL7qJUaD4luMvOmtZfkpf9Cj5RVLTC3GJi1(GV6oQllyzucdro0hmGSazLZ4jar(ljD6JBseC29o0xBvHga3bIgz40dQZU8Zjx5eWwx01lWZipzLDo)srBKE8t61p5g8FUojwKIK(yGLtYZmtmEvwmKGKw3JpYzyOXOiVgaBbRUsnPSoWO(9zipiyB3dr(m0iuSBotCHrFF14WZWQs8kGGYWjV3uyrqhFmLrvrb1kuygbTm0AMLgId)Ug8UHzKTehhvkZOVwuuTagej58PK0MCq1Slw1RN3K(pXChGE2g)ojNLA6jyJmzMCGeLvrt0s4fW2ZR5Zcw2sArFZEvMDixTBSnNcJCxl6RdlU4uG2Zm0y5H1sArdWs7uEVQV(UbVXabhwnWNz(jz7NVGC(fXkwQkzbl1F7lX1f)LTNPin2RjHrfysssZHl9AZHo4bd1E4QTeUIsxxxY9miOs7aaFwiNtFD0yhMz4H6os64zgoveaYqEpWgjyLaLtWcmNCSSZwACVPv8d(LK9Uby0)oVwn6Xq9CvodG5W79jBG8DHT23Ve5)b14Jdho9GdHIXNqISqwY9qofjENG2DYhzu4Npo5J5J8yos7FISKhNSbYtWmkM4tSTgGm6TlIB4ek)KxbXA)08eJh9giDnk67igHyGAC3KnLnQb4dDwhUZ5Psuozlvlr6vT5rKVTe55cTGhYdJHTeWxqeyaVTVNjm4tRj1EA1CKpa5GeiRnswa5Cb(dYKouwJjkQhbJkQfhsGirDw0twhyt4Owh9S(iF4SK)g8udAtF9EDhsT0TmDFcCe1gOQO(IJSvRImW0KeO5zhODY3JNSoKdH8dKi)da71Z7rTmJxlj5rjJr4FtRo(MpxNZYBKVpAeOF0nq8DMZJ(AMtwr2AA2(0Mu)MQ8Khyx4BWMqK30sFRlnzN4JdoRQkQVPLMzm(IkcgAQ6ByP5WjQZlBOVTLMEQIJpUMkBkA7TXLMB)8Yk50MI8wiRo3K8f0s29SHvnEGJm4KtgbxcADOvfQ92dgcPlNB0IkkXKnYd6(XWLKx86dx0qrFRsww6MDUV9HnqqzT9vQf2xy3q9UnA0EV5Ta8GN11j)ailfqDr5Za6Twi3URz9Zdw1uCC1uyp4dKnYHr1QO5JEdOF49jpo6hoVICbvy77g30kw5pXvyeLYaHTkegxskBTMuojJHBS8wfjUFdGqfDKGHCyYVG0vcxRiIwHTeoc)VnFKvu6mPIcyKjJ29GhFGCMu3hYjtpSjQe8A8nxEru9bAxvG(4iVvjYnbWWnUGR5JuagPPvXPGtS1mBbdzhRyxdQ2QtFZcgKOtTAyhNhK0mXZWkbqCRzKJls3jhovutSVAJSVvNZuCCy2WfkyRWgwjb7RZW5OsaqrcFuSuY5hu9aroQ1iDm(jpbiLFbSj6D6CqxNgHgJoxzrxjBMvb)Ts4pFWFxp831jrwpfpmdmXD3LOkDNbh80jkx3N72OAFbrOP0BDjSSUeILCouOuV5rQ3kv)CvAJtqoMeHBfKxq)UEfeasx1Z5LGLT9JkNjVywY22TBBTvpDZRJ8s(i)ll4O0nc1PsYDm7WdKmDMUtgVBqVlhvNli6AuuLgfgGUgKArj2FCwY7olPL5CIKdG1lqU1vq4MI5wkpVRuZI8EYx0ypJZp1DsteSTHv(WH2tOdYkOvsPHBroCpIG)2y)PzmnQAP8otZYTCNLkoOccQbnkqqTQw)JB(ndfyFqMTWExhMT1GHRTqvfuHYBkG(pOQ1uYkuRDNvLPN(TkFEjXTFuEftOwqQ0Oa6GBWOcLf0NFBd1xKtgNlt3XJ09EC1QNCGrIpq6b5ozMUhMls0K9Lm9jbcK5kxtyJygqCHQw)G1xGRwnWl5hqtms4q5tgHSZCyKGfTqMcBM9hDuEbrkZbqGCGrOujo5mh9S3gQimN8YFRq(qousgh(g4nBM2DuLVfQQCYt37DFxnSQDCXl(tjD9sgoN7xykbZ3sQsUhJZaC3jfmxbOGoVZj)jip6OY5lQynn1TgdnfA6ZQpHU75hI1BuNt(L2s)706HR25PYPsvXO9C7YMzJ2mBc1dVXOORwu9EFhy4dq7ZqTHg0)2Bx)Z)SFEd0tSW(J(rF6gAaukwPwuBMvGAn7C1KVxV394SnK5Ix8LbEWRdOCug4yDCSCA3ZjakjKe6zM3rJvNS7k)U8uWIML07UNhGe5fJtJnBw9nbm9GRlUNgon14O)vMzbA6roxBipJnZQTz8t7PNj3UYhAx5dtMAkMV7sKdCWFGFyfeTCdozj5D0yAXGoYtLI7yLbINwakcRIgOkmKtZRxzSplx0obk48snhO5tDF7903rlve7lVJyRMWKwULOHVpaQWMgIUtDQhmTShj4(qxfn3h4AuMXLnrVi1eY0AOG5u07muh4)36dAD6t70cjGmdulgaMNLpHVKMUR1dQl6fq6l)GTEX091Kbng)ph)303vD8ymuWs25x2H6L4z3igGlAkAAGLTVy2fO(QLzmzRmYcrBRTdSFYlKJ9OYwj7ErNSqThQIk56NhdloQ(Gdp)aqhsjfinoVJKtcf(cMgjv7HQwFNZ6G1ua)VCV0eBjxBhm8(dFaYTUO7TLy4yXINkfQm5DGNJHntqQjrGML5l5Tvsb0PoBMwLObQitfDwyPlSKuYsRxEfkPrwQ5w7TsFm03w9I(qOsRw1p)WLxnbomBM1Tkk7qxNL8YsuYf0dcYVml1frr18WkNvDJeJnZBtAPSoG(EbM6guJ6SzcesGP9q96Y1LaKC6g87XA7r76We7s7whJbxUI(SuvaGHlaXMnduMavqV5Jsl2PJDuGddjNp6XBV5yhyyRbuAf5JSzER2m3yv8z(9i8p3(xcxfqr9J)VWuuLTtdDsY8ENK3a6)XYWkv2fNAr7v4)J5RJuvxlh8Uo67AwRntIsusUIliPuh2m9gTTwpiq)yZCex7uxkrZVafAh0MzOTWf(qh8qTrUvBgQzPvtE0mGYs5rzGuj2mdN1Mze4V(TzgOA(auK2M5evaSDLx13rDjcatsldgRb)BZCYRqq)3bnE6EG2aGnisXM54WluCnsu)m2mDd4R8TkXFpjoAIH3)jqqjanFwFUwJGq)6bsxjAfJlg9muQbaPcugpFLbi8AdBr9G0)Y3mA1rE3atKH3ipVQ4YOih6PXm33qAwMVr0iKR(5qvUTEjW3CHB7qh8a1fGVBYlknhqCO7f74LG3ZT)w74qD0(RPaEBMm)Uas32jgPGEHPcN(iPVsH0R61xi9)4BIG0UE9NXG6Ew9bboUU9gim8vZG(kxR8bo0HwwTY3x1AL74ahmChx1G0Qr8Ho0Hc16HUQBmmc13pvUDcXW8Qt)gigGwhAyT(Jnsht(atELYaCDV(Ya8ZFteda1Nl3ZWpJ1KaYQGKv9Xu9kQO7EedVbIn4v7eW7G5Uc4gSzkqEb92RkK0dwviPRkq0CA50SIQiRxrSORKnzGQyac3XHo4vn83M5(Tzg7nqG((AnFpPIoK69pb3vkO)6FDe0d9eG7F53mP5pVKS4e0ZgmtHIYkc6IgJLPW48Yk1h84E6HVrYoGx1tHxXy)74k46HG9IhIN(zVuc0xnIVZ3YF3xDt((nNFtR6Pobf47IMVYG(UH6RcGpavaygnSuNO6a3vcZxbGhW)LX8uCETN7FjmpWNaytVJYOh)vG5Rfq6IgXdoP2RiWYvuhapsGGXCd4kasdkvs9ykElE0ebXlsqHjKtpu)J1ZirA2JEb5aRkQCugRZblem4X1Fp630X5nmK1m6KnkVLLIiBkjTIw6BOF(cIDYgH6silUxROiM3s)MhYqw00Qtw6roYIxrUoztOzyjBvuquF7XNqBmrSXueD(cd1gff8zJcoyEgr9n2TrrzOg9ZBmMxwhhKxXtIhNd3yUqT1rOwd5icUgy)928DfCy645rIYi4PP3SFQWWFagptBM1c7TnHT16zSzAoax3x9NAExjCfgQ8KXDfAAewBlF242m3GpBMBrY9SWTz2C5Za3M5M3bPPvzZS11GInBb22cz2Nw6EtNRny0ToOXUjY9zZSDBMDyZST1q23QXdEV05AF94oU7jAFsuuXMHfgCT(H2I7Xt7QE4WK1EU9s6dM1REwEJdfAY7VTZKagqxV3PmF(SKFLu1RTFt6HcJNnz)iLBgA0SLW3Pb2359SWQ9MMVq5eIgQ1w31fCoUQKQLUMKRRIIamGg8wAgnDxZ5uUUf5fGImE5UXRibEBhE(ksUPq0nvyZvVj3QkBcCEQGWOOa9RN4w8plQQH(1wULfQuk2ag5o3yluwbLzqHfQ)g)92mNdKUo7wSzExls7prtN7G2IohhU7xiR3f0WM5DMLwBqId6tNBJwaBMz8OFG28ZmN7jxKpPG05PF4IYJkN35lrK8izjpCwsl6Rhz4lFB)LnTKZBIRP5CQjiq1Xhm77p7hah17gpJ9sDWVGMYJ4KY72P9SzEVuX))vgY))SKFy2zDofeOVZsIzC8iCCjhKJ8Vq(rKFAwYpJXHOe)wtC)CwCUe59PvqoVUyjT(wL(ICSo1(pD9VyxNk0PDuFOykslyBlxbdF6QoglKIg4N)1sx9yXtK1XsUJ4E7WEcg6v8Q6Bh2hZ352g5BWqMtF77kuq8lzb)K2Sy3hl8648tnSxk67UMRAB1fOCGF)KzjFkY)e5td0Z)Ppc5ZYq(Cau6pJ8KKVcq0(nz0VL60sfRTz2j5lr()YqM)im(GX7xMCQ6C)Ndf0sZIxzj18VGH81Ki)FavdFvsrYxh69VGZK(l6J8xTzYNFAYFU0lTybfTjtq)KwuZpnJZ1SgtBb8hVVgiFZGVr)IPhsEkrfATsljNFmvG8EvZJV6EvP3wdZIV5EfA7TRx4l)LF6gAyR9213)XESN6Ix8B7dVkM94vIS0QEcVQoh(MZveRLO4Zs0glf9diN(yFYqpUgA5IsVE9zXBR3L4Qi9TLC1h7CXbDVXCO2TgOxnQfa5J3ATxrRseH7lmW7EMP4cl18XgB8E0j)MS4TFd4vDU7C1OO1YtHQR(2FRK79Kli(Xct6bul9E6GS9T1WmtWBiJxNi3pgl6Nof3e8kff1pxDTQ25ZwHAgiy3lvMdFUSbGvzFzvL(WSbCvFh4v0LV0apB3cIM3(UTz(CzNr3qdyFTMwVjqmjyBbR8(UtlHnZNh)QRdUF8tbDsYfLQu9InZF4vKEfBMhe21EiQ(dBM)B2mVDBMhgA6hPP7c5rTzEha3VnZJwMYNs6sz4rMA9gxQ1iih(LKA)lzZ8hzZ8UFfrIBZ8EGH5)9se2oeSWi(9HmZps23E2h6QJz2M59duYr7pspXRLp2M5dyZm7V7PgTzaJK(qxEInBM)46rBzZ8HVs5KSz(imOjVFuBMpgys0FInZ)tBMpoyi0JTTgSz(ehP3U(ABEZDDXl(RauMnZJdZINaZ4)fSoohSH8jHe)uRXM5t)QIAOPFTd1GnZNbiaKoQWr7w4aNi(jpXLLaO4vkbGnZ)BBMplGAQ5AwFTaUJML)kdRBZ8K3Uhi2M5lu(XV4Rx44BQU(oCzbZFLR5G513y2BTXSRSXAXZ)1vwXy5gIlz8uPlbPrK8Y1epCf(JsH16s)oXQkVlu)BAzp(jp2JbMKSJE76F7XFCWKKxeE4PEQN7Ix83(AhBY6ARs2KctnX0hDYhyYJDIjUSSjt8kNn5D9AaBIJZ8)ND(Knu)GnCzju(AxZjuIgA)hOTSWVDCq6Vh4vJLc5IpYGhno3V3wH6H2DX2Wdp3Z3qdnSXE76L6OdW6HF0RzO9eNtVs0UE)YYY6Hg((J0(LfTp5Bmq7oXM71x0(6RgTdG6sG95WaVedV)MMsuSlGfD4dwo)bwAuePyvkMfPmkJ5QaZ)TUwJ5t8)l7ZK9zZ(3(QbPZ1n3Wj7(3d0Rhq)hEGdaW6xU3U(oBF73DdnCB921lwS4d3qd(FnuT(7RsGE7rkgAylv92fp2LfOp1RCG(zFnaOtdY(1yCEttSYh6)4d
5DRutbdb,Odyn's Beard: AddOn Check [Raid Leader],Unhalted,Lua,Thursday 2nd of May 2024 02:05:29 AM CDT,!WA:2!9I1tVTXXvCrWIQ0nU12QPQokXnt32ytvlZqjBNK6aJwUuKwQLsuzjLOdmuP3)mKCQxU72zNvYY1PhemAZzLJnN05auaESh9NGfg9dqHp0pa5tqFZml5YLCLAouhbiUZmV)mV3V37n)l3EleyENIRUwXF9cdwWEb7VynTEuVd1wVr7TFLPh1gt1mSESn1ZxVPNdX(LgHS(E0g(mINBGc9OgD7gGzF9CdnCTac74rCz0wn2PE1ATgk1qfphp6VlxUC51d8nSWZtnSeI)H6bmdktrJ4sykMDHpb9voMrj96HPblDnACZ)6P2yZWUDBDKpMUr167uB36AmOJUri1yTJd8XooBAhO8QGqt8byxwtGBYtg2Ps5MT60Svz9wAHWKy67yCeMoMTDOyGn9M7uTEDDXiMBGnCy91DngGduoj0n2eugA55eoWTj3dY)nGxIPUgo7b2j4kF5XHb46KbeqsdhspxnU)FmaLs(HwmdUpN7uyQ1X9eONMJNHDnTaYtXlQpi0Hru0axXAXOBOOB5yeeWBzYmCadJ38edxYaHE(WOFyTO3sZ1Zf)cSraUjJID7X6p)lTbeHZrho(qdWwEU2bhZ5HJErL0gyqCbzJkfT68rRfDROBdnV40J8sZ44Um6TXV5FU0s)25Ml)SnYVwiXEy5h87x7d)0YwUF0JPsRe3)KaStxrgr0pqpWcCJ8NAH5ih3uuRRBktqE0PYVvT7H9VCZ)uObfJQf64GA3NWWNeWW(LD75GFVygBciwETapklQKUdh2FZJ7rj2c1U3gX5DB6czM5pTlOOkeQLd(rVcadiLZLvdYa9OM6LxFZDBEIb1QUa9E(IVqkQmRE(t4kTnXM1)npL5zDGmyFLC)nxvIT)YnSpY96binSb1gDtuzB7gUOk9Xwpg9qDdInQo2au2(OHDPq6eeJmyg5Hee)(g5)gzbtnofUDF8UBUtz9QB36uQi9Gp2lGjWyaXcQjd9nbJVlPNYjIEBc9Us()(xrFI0w)jMudBsyWZVWP8iorwFoK421JktzuOGRZtLZTG1sFXTaLWCiUGVUBR6BUDv)FUnjGxE0c)ewhPuDAxw4oXDHeKVVI)Vmd(KLvBdUYywp1kmG5nGZL)n7g6kk5lSScc(JIzHuxeV4Td29GIXtJc21wrrX)QzmdBP3kXkEdZkaqvv3hLLT0HrgBh58VuIDSRVnKwAgk(8kyLmpoYyjcWALHUrxaQRuIU41oX2RJuUhzk)6F1Xwlfh4dGlwhBHjhGTr3dvk6hDTO(pkI8K34RQ0PsFd2MaWxKxOdjVuiZWZDlCqGrpSCjNcQ7UbGUD0R2CNgB3SQ6YkNR()eLe6GgySJ2Hc1vaPXq7wnV)ki9yz3oCGjMkrBFoNfuFMvTAFCPpUuTAJycnEgQr9gCxKkQyreOg(hv0dfDtRqjLpqY59Xmy07ZZg3cZPguyzbd7dEJiuoY2sI0I4SgPxBsVG41oJZjiDrUEmumT6E8kheRp2fXBlQTkOgtvDzex)XInRicktKOLIJIGDhp1qfjXTxSbmsJXYOws9CDI2yJhxggzk3iw6XulEWKtvCg(zOsihFgmPZ9lUhmEMUfZlq6aXmvuKNvmwhNVxDw2GELzmb9k198yv8abioRRD(MYumxSNJNPHZiuiXMolOfQ0Gv)BxEKvy5qGDm2BuUSJhSncsqgY9)wfrg5gJ1e6VCVynisVM2vefk1QD7s3UuJqgFPc7NrHL3f58tqu0prPcI0yUqpBc2VDj()I(YPvYQQelCcWzAbsP20fToybJ5()jYnvTvMWNw7SGVmRkZe8KYNvAWRtStoR)Fa7oBWBIcWmboj9zqUzQBZe1If(7AylEAFDMZLSMrMOMG8mG20l0KjMjf97AitoRVMqm400XB7ixXC8YSYUidx7rnbaqvDQbCjoNhEW)tTyrj)flQoLjfDj4Ckx()aN1Ne9tJUs0cr)4JhDHb1vlfD1OFw07e9UrVD0srVNcCCMV3)y85lGtpYWRGe3sAf4qf8JXSsm0o6uctekLXEX(2Xb6aih4p)5Pc2cLHUh4Nv2OCRoWzp6uE91BST0RLZHGmCAjbHKdmLgfg348of1zt7gOvNvvhs8Xfs5alpltWXmt5KiIBC0Qyp40Lw9lKgHwbD9cp8p8j7FJLV(YiBVefX)Jzy6Glsa2OS0Z8kPMKe7y027PSjj0lNx(zYbxpLYE4Q7pfVJ2rinBRnnBJ23nnB3AA2gVmzA(U908nAHH0SDN9N1Je5EpmXJ2NNkLc6c67DimiJgIxjfbR(gU9eH)zPnk1hiER0u4xoydInotX8PE9GuOa(v0agu5whXsDQ5Ds4pPtAM0ANADXm3cxeBwoTCTlNHCjhAs0Akr4hI8EN3oEYMtjLELmekzPBrRje5ZpNcYjU2sHjWJZUQCQQTrP6tECwESroOCNDfLHYRRjE9JHI0g5190T4B6alWTOI8PFc8rPxZbnZAmJ0vFirqNFPs7iKI)L5VE1b4wY3fAlpB8xpN)7K5frJVWkZ)AN99uDW9mSoQtxhppA)Jp0JA3MA4FC74g(VBgIAT247c7FJZw1XVEqhwFaA775yFKwxpxM)LQrjpf9PHg28hKa1QvuHLwm6TEzqOj)vF4VVGRTVAgkEuik5Q4lV3jHqFxatP9JkYFLQOBk(DfXV)k(Vz(Mbj5aJ12XCZJ)4oV9WjeW3TIG147IAdRTEx07NiUsCbdkoReiQ1wz8TbMy42Lv4Lbjda9uGBSuzIH0R8YG(g2Eh(a5dRKls9lZmia3EF8BDaBtHLpu0ZVqKUgJB1zjJELKaxw01ANqx9SdSd8S7aHo8JIAP4)loB(GnqTiC)kFMjOwjHX7AQ1OvRgBfTxo6FeY6jDpk69JQp6PUk8T9PUIXUpBe2TD(ODmBwrVA1TZotE1eB4Jg6590BD4DWpDvZg6wXV74)(sxcn3CZnUr(8rZNBOCAsEz5OhOe9zkrFG4DrxDEXJzo6TnVZmJCXPhzHd(xp4)o
kgX0kCss,Shadow Priest,Unhalted,Lua,Thursday 2nd of May 2024 02:04:58 AM CDT,!WA:2!T33EWTXXzEQriALnKxz9YY0sYwquYYKsYuIpe1dBfBasasiXxgauVSDagamaZicmZOzgWhk16lMRTdtIJJdDSTIt2QsO9LQU92BR64TvUSjPUnRsYMBZRTdVDtMK4S1AAF(Qux(Nv)ZT7TNJVVVUNzWmadiPO0E1D(wvLLXmtpD3t3)((99O)6wCNDl6zpABT3rBNylL3s(TKFM9OULCkYgAkLkjKVhrPs51eKVK6UskYNxzIqJOjjOBCYqdPeIDNckALv3znpnUSoVSKXuHIWRv3R27uY8LLYfksLcf0v3rnpf()L518)ntkaDT8n6P9kuqqwxACb8PlMvrlVGwe(CJLxtrvDtrkjDLRWRLpukfLsgsQAtom08cgNpWrARDTPyx8M3588Y5ev0grrs2iBprhkv0eZZQQEukPODAooUaA85mKuK17oHUbVMrWisW3AWSfG)NUyWPn0KkwuqtFh7xZ6Np3C5fYcFTPMsvqR)OdmsSrhiIbCrc(kA8DmTUQqPsXZRhCr9kzfgxq2ijuAPjNpDpHtMkDYuHtKksfOrYQwIFkbnNInIMauSejhj6adKGENS9lWxYqmbmelOhC2kYwDHGxh(Ge0K5lDwORb9(xAwDHsfOFNKnohuHjekIFubJusHpFSi6sxry7jkxbgRcgb6G52o5abtKReVUo(RSg8LGMd)5czTgKzJqbceyeym9Oz1vQOLtiRuzvfnJe65Gxiqw2yP4CS)F08ffu3CYlxHxtiuSkLkf6CIsgcZPr7l4WvIIAkvuTkEsOpTURX(nBc72NZqj34SVOM4(4YnlLFbpWIzPVFCa300A32TnFbnyCjPHgVbFGRZMQJH3cBQSj7jr0OdnlGClZJtWDt2CmstrKvKfUMaVo(EcYfnex)c5HPnSePXjrnDkSuFASmyfrE0iL5LKH3L8OKWRNeH0dPx4NBT270rfP8ZxO1cXZlgRxLUNYcPbspcgbYcvAbPIbtWxsvKpWCyBirXDbNxsgf7ODHGlWxXa(mgwL9STK7lTVzAb(OnkjjddtJMAG4dfLmyW5ZlPJWNuctASGhX3f0P)8cSHuoYVlzJQHCv60SglTAAdPYcwxXPUPCv0nukJLyu188gcK9Si0xuW(vUZjL3qmsy4sYMGXXGKTeKS1GKTTX9tURVkmmCpKDs21cqrZjkONuuzIHLHUb()gusxxsUizpKMj7MeISJGZIsjua9bY2rND09joE22prxD01j0QOlmeC)mK9gKCVK7JSDYDt2xq1nJcOJlKIb9hujVWF0Au3PVFrSFKa)WYRU)g)rxsOiFUPsxOKIIMi5ryqdVtVrx(j8ifaQv1nftt6kHESk85rCyOuPipWo2oPPfaHquucrSY5jTuyrQ0wAE58PPcGzXXLsc7BtKheL7u3c85N2BzYqoe(iYbP)DR4Fpn2MOKZESMNpV988rJyaFOKnWrU)xsT5g)TxwjFAONkKrDVnUqQAc5KqXWaZbusc5PaGN5oMEcasFonE1PpN1psKJst0)J83TPnfAnRzno)iqaTlbikPctr2i5ewsZKaKyZFmJEV4577OdfV9JrE4aKtn9OXhjCcGCMChCK4bZQc0han2jvpyJ7F5zADsBiQjaaTs5NAE2WrvEDYzcsgiiz)zJmCQudp4mNyoDOMhJ(LCxZjbcGjPuA7AnzNGVOs8ENn3W9ONqkYfMGOtoj5ocGIolqFPekguXto1n75Aemgj8OPgUJkALu3POHHQ(jp8HX6RnjLd7uHhU9iydks22FmiX8tbC09YMV5bEvnklpwvzqXOfREF292tIruMqqdKkMvf)bYsTtqqIkJaYutJVaQpjZc4VCktglbiOfFU5zs3PfLaDxSFdDIziZOwUqfzQcWweouid47QeDeQ1GHG)ivW1TczikitVn(hukoTG84TXy3pzsbdMohAzBP2AsqoFq4)S7hy)llOV1OIEcGZi3yabb85W0dQRU9WJMiC6iHtK(CX7nv)P7P)Wd1x0ER(bnZwjtNzHIcaNOuogHZImcNEadcaCG8C4ybtTM4SoIwzOdwmzlSYGjcYtNHkbU9M4(2)SmKdUEYEUwk67f6mYqfTGgm7Ke1PJKtClyvbSlZmRZpbSb(ip9PmKNfKHZosI4rtMI2laLv5gldDQBFus8lrh(hxaMk2IffmJOBaLIs5u3LZ0JbmqQjyurtoKXJ3(tIJMKN8pAnuKC6C2kRdSOGmF2sc9PXNxc)2xuvtPiiKOZq7hyxRzTK9tgNmW2NhePYjeLoINz6S8w2e5suMylkdw8OdZviTH41OsawMBXPzPUoa5bUiW6rYzr9b1TaJ6BMnVaObzS0A2YqxJEPLbBCxNELR6FE6WeiYxrtquDR0hdSa5ekdDuK9sqlSXz5lvrGvrwfvTL4OjrfGc(e9WdepYfbdhFIrJ)GvV6btID95PVwjQY)tXAEyadOCX6UJW92lPjn4laFW192667O5UoQ6MCulAvjzwK1reH)wggPdmh96QZjSo64aHk0qzUU3ze9DCGdTM1Y6uLL00ansSYBzfl34lWmKiTc7A7lzg80bmXzzPrA0kVawwuz18itOL1ZoDa7Ila2Rr6I00SOQk6TMzNQ7bhpPdQnuLWSofP57xv9E85fy)GKEr6TRAA64W8jEhVgwqo71zVUJMMNEb2hNTrmxJ(Ch9jZrXscOEHidn8qrv3xJ60Eu0R2AJkw9Qtu3eRRxRsfg0aEKAOgvzokyNJ(WQWGzTkmmqKvDlUQF7ptRB65BpWcoVf1A0HzxBRiMiZgBSNBT63U875AXhAOOjsZ0cQEFnQxBBhO7(LTTfv7cOLh3V1KJ9t9bbiBJaEu1Tw0IjAyn8VPuaZ1)WjIFXHhkv4b8ypzlVcLJug0caMLrnlIuiZIomUJH8XIUnksDB4dfMemr0trYVDcAzf1KPfPewrqrCuHk5FV6MGxkCEeojKxi)G8tkIMnDyYrw1MccM1C(K9p4aGZO9xOeyfJBwYlWvBlkbDXJQHQqbPxYPiFyYdV(zPe56Gc6ejI3x)PUEvRhTjM)67yhpkqhx)pcG2w9HMN2M9livu04uA28IB2Xx5e8s5rVPZQluggHt0EBhPTJW6OPyfM8hNGEPiZInRkukFEb5edf9Srte5kkkL5iNoqIjyweMvK2C7KzCLJpJb0KKrndcIOVkkvN6jVf5m7y)KNVBYDT(PhNxtcvwfbvDNyCKtpGworE5IaR4(jVFZh9OtdKLQu7zUBqWRToBRgg52AFwBnxDanmiHE)V0mDplVwUbOCZpZ2jR9kQ7VMGlCw(YQsGw6qPuQKtm0dgQxQh9QTwBikyxIg7EYqJaEbwTOTux8kghOZb9mHgPeFXkcnUKXZRukKsHqxqPyXhmjVMcwRr8R5bCs(qXalGDfdgRIEF1(fPiLhL5SF(ER55PMqs3aB1yaZKvHi3ojim9qEOST3z3DCKJmDrnP8ijtZj6LCNu(oeoKtiGxV(2bArPL5t3dAiky1QTXOuh9a)3aJBaIVkLLtYQG7)Lw1YwGlZsfLj)g00TbKklziMfPuQO)m3HgycjAReh5bcIw1mTMYewnylXys)wopX4mOukt7yjcPnN4BacW9D6lv(8sdC6kQj1yrnamHgjfAhCxxanUGo2mqcshIKobfNh9Aw6nOrLGCS1LOe292qe46jiV1S4WjvD2gi9hywq0xnm6X3Uxee0HoUSrmG2cmZpr4EJpAs0xOJF7ra7(bAZQEmToYD8yG8gLKaDljEWRJfP)PYItwO0ZzvpqcbdnPSvWpkaMwcgDKpzOWGLDfrajONWq0Aohuc6BHJoPAfTI0HfhKRydQ4ELgxswiuyTSsWGItfVxFlCpGB985fCk1HwQQmHGUImODXP4OlyZvOsPs9iPLduVz5u3gOX5BMhKm5UwdzQzl0xFLA)YtAOH043bnKhlKZYpGKtiHUc9u17DMZBD4oiFSmKTne6xXosqTqpcAHc5c7yrVmfW8Q8WYLMkd5ZmhYzfU0e8tPtU3Sg8AffmOMUI3VyU8ut)NMglJx92g(WurLNid4SX1qAFQUkP867iBNhVZo7QBY5m5omvoApQ3JTlmGWlZqXqTq9)Ov1TwJ2ow4sEzS(FLmOK4vZGcHxhkwuSujzHIuK8AG7oA9hoXGXgDaq2K8f6GxEk09bqW86Jjait0NiJeiaqeKK2i51fj)Rxh5boa1O(cK)tGPpKRr(Zywb9TYq(ZbbGVbh5FCqslFfs(9tv3EGT)PD8L6B9czSe9Mnd5TbL2qr0gj8aawFiMEDY7iswu0sk9DfPIAkuLhKFnOEK8XM2EomJJoJaK3llcnfYtEFotU1GAjYyYXrEDlkQTUFWrQUb)wD8pfTUrRQVREV)j7brBLAPv0DQzZRKM5cwgKQJXxb8qiDKl(QAUZwR7oXdsJRb5dt9X3E2eS9ibLs5)bs40j5VNQ)TDhjDtU1HKXGO()WGQBZ(thvm3RKokNdtJXMxyijL49C6EpB3QK)jrGryDKVe6tND8aXyJQ15r7(OD11XbjLRzxpySzfTfym5AXEKMjTyY1kmkgv0LCGj3bn5oeicOU560cIWSpdcyVxtUJyY1Egg8fG6B3K7ym8oa9PWDtUoG6QttUUfPYa7XKRltUJ6g1AY1gvAbH)VgfatHOMCh3cHAYDIvFu6QfjdGwam7fiJq7LejdO1QWytUtIqwa7ciyxXMZgeJIpmemmdyY1JjxViXeoxfBE5kd0zE9(U8zUq3MCHfHjBCk3gtyY9OUae)oiGGbLm5EKmiWcMZPZ3U0idiEtUtzY9H9iMyY9W1kIyY9qarOj3bCJdWEvvqa9X(Ic2uTg4GZWuqamFrXa7nO1CndaqHcaqbN0ryam)JtWaOWhiadaXGtay41O4bVGaRV7vTuznWaCkhGcEXbaWaHbF16Gb7NcdAI7L)y2SAFwrlebanCbk8HtdMdzOb64)spfzjwsLfJhKIKOEheGIvQbESEkOGsyydGIn)udwO9kJn8f6pEueSa4UQeJ2WKTyJkr45j8ql4OaDPOeY25X6SJJbkTUglMBHzrWIIgE2muWWvPA(qBePGbRzEgoGof3aUaevrbumK0RzhQmFqcU0sDYLwl1m7I8Td4JBQ6oUPs(onF)6KVljn5VG87r(EKZs(p)0K)soY3N8Bi)aYpK8tYq(XtrEtoO6jE8s3Yj4BNSaJp9)cjl5VMJ83CO1q(rIKFgrMyMH8Zv3SBNWPU3r(PKHj)soYVA3K)woYFfRhZaFlk6fZ9j8GWCaEmCOBK67qrJUbFuMZA5ISO(z8rrNiSWfp)5kP255Tbrukj)aC3gfWXiKqynJpAvtmFRIcZFvz(b79bjFI276iD6Oqd5WANI5OewOQiadBJgzuzuWmt9wdyYodvkGXJrH)Ru8BdiLa87BcJddyJtb0O)WulyeaO(2OKaXKBqpitaVbGte5zJmn5gcbQiEfqIaghLbwgoWNHQp0bh6cBYGK(WbsvRSYzbxTK8u4ECQtTmAZgOy92RYCsX5XM)XUC0oJDeEPtp5JzrBcIhoSKajOBahu9(c2QbkxlyJ84mWbZ0jeIXikrugtLjc1ayNxdNwAYY9g02UP60yshnUbzjDHYwzSH1cXqKeGXSi)qOgfJbyTvez3N7)P)KDaGRgMoFm8YfkRbSDhXOLH6wCWUp)LNAzT(kOB2UpMT1xaYyvt4Tc42OudnuHCdnpd4XoYjo2XPGfpWlKqdquEueBBrgJuJcjBax2vT9I1xZYRNh70lTn2V7cflPmrmnHlxrqo3uCSOPJ37AGJs9vYks7zMgVfnFrgrAsHsZHxYcNxRZJ)2k047AnZw0(DOtYrWlZqlY5TlY1WR61kdpcqFHK0KxH2xszVMnRJ(KbKGFVbA7fHUGizQL6TXcfFBkV7pjZkN31soOk3li04VfaF(6S60LmcZtA3shEek8vp4kNkgLBUj8eMkdTKCXBWXRxlQ4XV8zM88H7nL(GJHcCvTi2RrRayFNK3IS2VU694xytJuIx3OUSkddtAOOAvOPxtDzRMvs0ijiNxTjFQ0IywRu3Bzf7QKg8A1L6C02lLIgMrd19qRl7rJxxuDplvON7vG3qSUVZuG3yJjyeAVT34h1rDX(2vk5fcxoNqjHpxbnAWGP59aLTXk(VMCBlWTcd8wXrn2K7oHgDlpZDyYDxasCZWK(MImq0yPYIbvDyzRLhipz)DKA4rm52kg6xtUhidIIACmFrY7Qb71K7d9mG7P3T4CSW90hu1RL0o0Wn5o8UMC3d5yGra7ydalSj3U2aaoBVqNd1D2P6(CAa09E3TjhqZUBwOBn5c5oWT)ouPpRi3(qMC3bPFOb2yaQI598xOUpFdeA)8LXWvPuGf1wr1M9TyNJFmbSqH1ffaWZd0Gy6kKJDRKy4RLZjiQEV(wYtxjFrC5ueBqVkMKmFPqjeYnMISKCXgfRxVrCwun0sfR3ukLkjQUt))8e4vvKfv3TVpTk4wu9(9TeGWFE64ZPXLmg)U31sfC6LTHAxKf4ztUF3Mt07mTqvpRdtX(4R8hb1mVnlnZ2XiXYRyk6pbn0T2osCvpAE39x0sZlkyqdDmChhLVqn)UKMm5EA8LX6cREYlYExo8nFwQbL4lVhGbdBNquNZzb2F4Xf0kXpfZTeOIByu2wDHxXr9FdCJ5Dn5sXH9)rn5olmGawECEtUl0Qj3f31Am5EClI(NaK5Fs8gzazV0Wn(iW)XVbtUS(RnEE3Ev3qFIa1R(7t0kWGvqP()4OKwEf7Lv2kWGVywQJqVT3007DYmx1vIghL9On2Y60bPlJHLQzkfPLzQmtQInFIYr7DYJlumY5VOTEtGKPQwZ8uAfuT5OUcnistb6qpZPzQ0HVS3RJWd1BwAkwPFGyuT8ifQwrb9MvuB(Pof593YryA)VglXLLtGeSvTd40bCseOQzeeABGs1gXK75m5(4w1Vj3m1w1ZtR6rPHX2vn7xwdAxZNfRJh(uy1YQJ5uCYTlOkSny5tc)2UvX2ZJXlSo46iVh53sE)aUE0CS1sgTZJAdeyc7mhXAXK6Cud(lNl3JPxFCfiPYwHMBSoc7y68nZDXe2N2opI3s72c9uHuuAKk0IcXGi)C2RseMFyEe)BkqZZyj))Q0FV3GAvKP5ehsMaITFCaWVVUZYEBSnaXFSSF03WvhXK7ZSmDbtUx0DtlsE5f8yzu1oXh9nOUq8z90(MCZwFBtUWbipE2o644D0DxU6b2jYl(MOIFAW9(S0E5ls5R2ZcHPj4wil4b0TE5zP9MikLmS6j7L1z(drhvEngXz9DdYxGmd5lQMUAkZXYKowgiAL7C238X74jdXd2jkRyeY(wD(KTgsrRArANvexp2oR7849ZIOoMXMY2jdWvOaRGfodiuMzBy80XfpE7wlOGDCvIOPusGEZxYYCEnwUm2H3G(TVn5SmfONZheU)6HRwFM5YlvOGuUkLmMI(gwUmq(8yvvGTLhOv7vuKfINxFTZQoUA1DbGj3ZGJOr04ZjuB4ehy)KVCg1MKkkROjyLO60SimkM8A6G8vpnDN)Gq2uDOAYnGj2RFRbRJW2HBhyYOHD8rGk4qISWpsUUlkpbxeHwbGeCOVVPg44L7OZjpYrqcWxNfkM9NqhZBgTqm77MoVsA6neTmg12NhK7Q5HtyrY4IjJrByY9PaEdmvvyuiC1vOa1xOa17u)Q1a6gBOHBnh0SWFjT4WYIH6n345E6An3aUtvF9RpmsRQyizY977JEzqH7Yfejlv33q6LbFMFrE0N5)uB1YGaLt0YRpc52WulYEAS(qOLTI4HICPIp2aNqvs50(QiUGTgyl9XEveFY60r6c04Oe7tSQ026xn9jxHAxJ5c6UcQR6WY34giU0gn7bcF1Lgct9xSQoZ19nFsxG4xLEnaLFnACR8cIVzwc5B0y0xlYhG7UcF6nye6Rlsr)LC(J8dJi))a74Z)225kP)Hl1Xwu6eRBN19ymkGOzaFkmVkYVODCDOe3GOsN6JKt9sv6ss9kFGvgGULsaRfzO56xiG6aZ3i8XnX9RU9AiKP36)3Nr(YiU8ZDJHlzOp0P7W2rb0JEVyZlymUOH(fNS8vUKVCZInWjjkl0)c3CTCZ3aOz7C(Ow48Z6bo)Hc8EEOMXRzuZxnZTg0mUsO(dMrCoai9hn)lzRqpGC9GKTq3)1CUIhVpO5)8CiA2yvGMPZswivpiAgTBCkwVgAwjl(vlY2yZx8eDESj6sUJtli9bw4msZEtA18TC0CGMJ7bnJxxpA27II5GNBWkI53k7VK45gA1WnbE(A)3r88ZEdHNrHwentjNDJHx12y5yMbc2Rc)VKt2VbIbu8FRruAV7(o6vAjSC11hcfd(GNiaiyBTwWEqZKuMCVGdK(RTUaiO(U9165R7SPdzr9JUuWZHPqBsRyiDggKhX0wwxZIEt1ydPUL6xmk7m38ZAjhXeeE1B7P(OK9TDAha6tFfwvFvAuQPTalk1OCgu9tx9vcY2wSyPXhw3B8AzM1qXqOmMWZZHlfxw2IwTNePWBt3uMofit1lXfrwK8QCw7AuRXOPLSkjh5qKppDicVtef5k6XZZIF(SzWqVu)Ee9LlsJA1bx)8UELiDFIJ3bTlZ6U7H85UMDTYYr7RAVm6GagTV8klAhgWW096ROD7mDg6QHH5cjBhLQkOHB)ar6rbHODi9Wy3td3vip7q0Qb6c3KOpu9XRQQ8jk4bYFUKpDDNTw7Dm5UQO9E8K5euD8zFdoAe(zrWFjcW)hjG1IaGb3hdYpnA)Si87Uge9Pg6)r(V9QV6xIkMzE(Z)XSeZwQACM7dnc47OUP7V728muIeSSmzXAb9vpyDziynVsA62XIU7Ltq3tHQDSSVsEHCsL5lvD)tYXO13isRR(al77ZUD2HQuola4bk8VlnsQKvqtNvQyAz67zvc1nhoBwnHXL4neyvOUpg57wnc5xGkxaTo)Q7XDQ7aArEoYIWe0xO2GrcxSxuRY6M))qMMw3)aqqvGf6X57n6Gdpu)JIhclqHn5(oS4vgGCGDKP2Dbq)pYBTz6FQ)hbybG0K7lNrDtUo0pO)L6MJwA8rJNocVw3rQyyOi3HtqiFDrR4qE6aQB21loc98gq0AB454R7HCBe2yogMbAH(1ywku5kxAS(k1LUCxzj)tmVN3Vj3BO(Ov3gYHZNxrw)joNa)yHX98Xtq3h)0FoOqEj(NijIM0FcdCFLmMSubH2ukw0K7RyhMs0iIZCrxPNXNWJcNF9ph)ZVO)h5hFF4FU3(FKF0Fa(NVK)QWoPRyucvqa8NU1ebv8bCV(iDrxFKT7QUCTskN0QKMCppReBNEX33vNLPTZPojVoRipVF9RB3QMD1fRPRTdNg87ZS74eIZ0kv14g4MR6zxI6)wh6qNJWame)oB7drPIIc6g0neInvjE4eSeLTn8GkW3xW6sNxalyCqX0KPusAGX2)X9TUOBE)Gbd24O6cqPpSizM1s22lG6TUh7f25pHZXOvwgEjs1LLSKIXoTt4AmubnfbVTLDSMCFTmoQJWIcAyuB2NDzu0lxrsfZdGqyPA1oaBFJMyA7zB)id4RiMIwpo7nhwsIHQYPf1ErL)IQ7Ej0m5sXKh))wjlBYZHwM(2IUTILMfu1DyP0GakuJhyR6L8o28t16votz5CcDxUSpEUvYBaYyrFyqAaM9K0vFkFx0a02VwTJzQj3pWK7h6Ndn1HpUQhNAG(0p6EDweoaHa6j)X2(3a2GrytWiebNUn5(RYyBA3pHAlIVtTMCl4V7ol7URy1p95XJdNSWC1T9S8ZrJYwoyy7UrS5JF(opxVhBcX(7VpRzoFeqx6zseTXGzZCqYqGcvOJpYAjjy5yvsoskWyVNsDZgtizKtSnJXpSSmOdqsWwHc2iQhWrfsBjZXlZoYoAP5bIMmz6rhP3WGg1MpuOujgnARUxtO3LEeVGt00el(Z0bUDZSpiMScWi4n7mtU2ECKuBRT2AnKBYW4Y9OuolVXak5gdL3BPz2PwwZT698GPwUtm97Wft17nE4q9jyKsQSqlTg6bdb9hVvINnOh9fov1xWtPkPKJVKtzHIz)tpLQN04RQ1w4cGo5wGM7q1ODO2)WQw6EB3vDAFg3aDfMXcT0Q7F3wUk0e8JUxF9TAHbNQtHX1Tw00HvfG(r9JaU)JDx5Oh5i(wgGgT6f(wc)Xo(Fa7aOOjQEM94QnQEdBvFoTh2dOS5ppGT(0QvgzGWxiAI0rFSrJpYGrhkLDDJa0WXHlhEOyX7Zc3c31Q8jhjApXdpq8lgov8HhQ6lnWW4ogTV0SJZT09gpz4ideT3q0tjVKoNmqFsYNILCcS4W8rGFMrKugmJLhmSLEICrYrA5RAY95RAXA3FN7mZFYDM5nUZmwSqU3WQfYSGeDBANtGAWpnEiwgYgov)NziA(g5Wvv8EOCvI4XVfqxjr5NolL4PxhhPYcobOlyKvxeZSms0AFUj3BMqTsjDbFOTotqYLWmvzCtUVhAa6jgLV05g(CtouNJrnVfONuDDuBzYjBRGZA9YnMcP(aviJsolPcJzU0ZChKb2oyonzSayg1(HyNxcBV2KrvQeM(GQ3BT5sQ(u5eLYfkzonb(Y1LzSdYdwv0ReM8p1F(oQuwsgplcqV5R7PdiWRYoTcKmeR7WoiSCrHsqZgdJeHGwDNWcEozjRljxbkymDmz5YhM6OysUsZ5uVlREdtyvG20MfLLWQuJy2S4nX2wztMCkMCQMCxMUCC3flRw3ZZPU)LjlrDsWX92GeHegDXmYCa8u6Or55ycbv885GMGOhSb1Ja9C8dBsWErdbkjAJsFZeczRmgux7zPY)ZKgcc5B0rmG72ljFonPc0pYww2chtdQvLYIw5VmMsWpyDPemtIn289fF8y9FSeTACI4UpkiW809UbBn0xYCcML(5GjeGwATQ5cmllGp(T7ELOiRhZSAAgeJcIipbkj(nxlZAUngWo7s3kNvWRxQT0g12JmOABvM6QIcSn6pOIMLNNNQAmHKSOUlaQILov7hQ9oosO8kU1ARlucMnBPJdHAAzPIvC5ckTi1ARHo1PcjLVEfuw2XlvNsbRt5TGbzDmAw)HUsa9OA7KT0(r764hR1GbDuYkPN0vci6(JWJNCvRu3EKzOvrWPBWA9YkG7kkJdYjNk0OYsgrNushv95CFWegm9UAbRvSaX1JHhun5DxKd5yUdRWUEKRMID8paTdwvvBx6lWEM7sJNvFqzRwoyUHvk7VtwjoLZlZ6NoDu7VeRN2knR18(fy9i3D)goCzDV462Z(0jGwCgOpe2DyP(gMi)FexPAOJ3O0noPOplVnnwSAc4rOkM54UZ(Oh(FLR1tHTj4GBzVt2GwzCRZOW)WLXN(vLTMlVDMwJlEAkVG0wA1lShCPhne55n5EbQ1i25E5(2o8v8DxbFfJAFc)w3Nt1NCJ8Dv9TC9b6XuXAdHrTFGUTZJcbUvEUmSI2n(EwUQynX9I)zzAI7tSj4VEHO4cxPEJLOx7hjuRUmSSS9Y3vE9VZA7b6SYRN4k9DMEVuUjJxwZALxzE)U8l8un5G8)3)6oTElfr(FEaSr3ualt6AHmd)9EK739x3o)IXFA7mAJtyRv5UryLCGF8kEJcbdh92272oCN1bFupd2nBauYv4KCB8imac4LbpUW4YxS9UgmUgnQfEI3WBHOR6oCpCY8WpaMEkwbcPrlpFDNS01PKPkcJcPQMcvu8Mle2tnrDAwGB9Azy7XSLkUJRyIimRM(Ai9Z)MBS8az1sx6MZIHqOlMHp0wl6e2Xbz5LN4XluSLUNSZ(owzxlyogfYpaUG5RF5WxorUBR2hheRqISPZudrwtbAURAXz075a0AWMXFfDQAvNAVFOh1EFUF7nMAVvTAAReWdGlaGl28fIflC)z7P)Jvr13WO(2(sR5jHs)ai12ToCN4ka3XDFLRd3H3ZpCxdcq)neY77BJ8E5Vjd(DJG8SJBVldUUjYriF47ENAntt)ejBT)joVO2LY(b)eeA9ojw)6B4UrD1QhTjUFX3QEGgCpBG2n0gs1oHFO1Wscsp9sds)NP9rQ)5D3TOTpQFMp8wOe1)UvvA351MZB6mVZhPQ)R1AfXfd3R0LNC84r7Z25hGQZ9onD52eORwbRLOc)KR2ntA9Iw34BIutUNVUL3dgsQB59WWT7A18m5(PUnYT6I09XjPn5a5ZFMt0LXyj8Pn5(5wRs3G)lRs3)F2Q0LmApdpuVHtCH0)Z06155FPDOKXxkdYhVIx4mtUFrWQNoMh01jUX7yFi18l9BrYYi6)IKzY9MMC)kKDkA93)VfVF98x4Iy9uMC)n0v9d1dowakN23JYs5DrXE36xumWGHZCIJCM8hvCICYOo0kv)3pg6sJTFY4ZCmtUDAYPqw7fvdv3j)TUGQaEI)d3cf6Q70yHUey0)zYqDR18Oy85fu3DJoEYJwolUdCR7WHHMizwPJBsrjHs5TplVX)vRz6udpc70qW1H4YnZzXYQx1cW597BYTjYVbxBdtU9eRbNNj2Rje9BPrlC0a8tfcUUFE586InyLXSQi3RrL)lAeRPWLm6ScYffOl(L1cVr35ABmWk(4Kbfyqyn9qEX1kgzY9DVgMoIXspcLmgxKiNfpAxBGTMq4kU2jPRL4GK52yR6eAH78jJoq0Esflr4bJIRrfPFuZ8Osh)XgC4(seF4sSLZCZ(FCLCBl)UiEfgw)NTwxsUTZSpNy6b)0vm9A4o95goIlno8Cql2yxExfrpSAm9CI0cy)ZfhDsHJoAIbLVy9bZ7)1s51RD(ET6DVCWGRK1fmyJDT06CTSgl(NU(iN9N(w1f5m4wl75X7)Nk8)yc4)uRk3pTdIbc)AqgG9Ev3QjdY8KCOXIo0PdxI)cN5soB1QB7MyYerwoZLlXrT7kmYa1fA93Wrk8n2x9bw)w6z9ZnCGeWdmN)J(FG5aYWVX(wIiS7Atg55WYj28voD7d1AUJPmWX723Da6V1zhGoOl5sCs0kuu3IKlBi5QFcLtx3S6Yeo7h6RwNqjCRvCugxXlaY(PtrGi2x2LtPoYxhQHX02(i6dgrCF4j4RFLVFvMsMFLd054QNrUskXZOBjJznrEZjMDlF3dUcNpxbHvzV1oBU3LkYD3siyxXqaukDIgkLU3Bog21UM6yypJ6Luo(56Qt1SDvtS62XnxCXUTTm(h637)9p
6SPGW78H,Retribution Paladin,Unhalted,Lua,Thursday 2nd of May 2024 02:04:45 AM CDT,!WA:2!T33c0TX15zQHmYpGTJLKLvKPKJHPTLjPPOjbfPOuISnabijOijibajLusmWaGHygrWzgndaPOs8UT6KMQ2tsAw6M02CCItyCsAE0TD5MhBt8jDJAA3SPD3CJY20jzBpjvjRtZPXPUQzZ(UD))V3zgmdWmGqKY7zJD9XGAWDUZDUp((F)FVGBU9ONBGE6luphBplTNc7PWLUF19KxrUSMsPscfgwuQubnb5Fv1hmPqznPCvklPihCA(s8fKKpEWPucgUIgFWWQQLKekO2UN1kQKUQqPGJjusvqtThpRZWAv0XRkgmfC3ff0dMwJp)Iq9FapR)ykLwn40kRiOfmcVMFV4vL5xskFWivwybD1GEwNP1KwIxB1g0kPeGjKcnUorfwqqwxAzbSoxnNIwbbTiq)VGMIQ6UIus6cxGxRqW0kkLklPQD(eqhsO8PAT3E6BTIAkvuJdVJ93YE(YBWlNxurBAfj5Y5go2uPJLCdwZnSsjfTX544AfMyW3U(Gj1lZRvoqUfKKL0fdeb(NYbUi09kwuqtVTdPzE57y9cc5G5G0RclaJfBIPhz2jIug(ssEy1l0fXLNsXlOh4Q6vYjSSGC5uqTLo)gzgoCQ0zsLoCY0rQanEo1s8RkOLeMwf0dKKw1CJjWxQSO9JoTMa8OjtnDSjMyTkYMDHaxdgqcAY8LMd6AqV)PxtxO0c0XjzxRdpCsHI4GkqKsk8fgjxz(sqJTVKlvbMXceb6I53hP7ajZxIxxhVkIU0feWlUsoZjA2muRT260W86a50vQOLxiN0sQkALtQNhAWwZXMlfxN9VXkuuqD3PoxfEnHGJuPuPGZlkvwyDnAFbNUssxDmREk4nUZlZUMTcERRxwj)YSr0(5(LLBxQG6D5bcznEzaMHLmi5Ug5Yc86caoxqUyzXBM0wezfzHRuawlWAKbxz00POo9lIvf7iKhpYs8sYJqEm4bipo5jiHjrG)DV1wss(sQI8TEngqAenyPcF(CPgozSytfQIuHno5yhB5r51g8mYZLdEllivmG2QSb0FXDEf(kLHhmHkfJfWe9fxgUzRRJ9jjZBijVGIgBqfyJfW3dmK4lZ36EY)H66sDaZBLljjdZuZMEI4tflzE6YZyp(3Bx7k4o2XoSVO1w3OaWHaqwPfoF5RvdpLROlYxqzLtZ6ECK7KSl1GoQFgwNiJAMYsljy(no1DLVIEzLLWAmRAb(YcK2VkmWuW(B(5Lkuwmsy4RK9aRhbi7na5Udq23R9qKx3NdMlpWAiDbfKF8C9nu)hP)bs2FOqH6p0rgCGRanrErb9uIkRKqg6E4)mPKUoW8I0o5bipi5Hihma5EjVEY9rcsU)aaRnHPGgllz)K7HCOaQ7gjGxwinJ0ysLccF6DO2U)dQLukKbMzfYQEi)RujHI85xnZcLuu0ejDKlsI0PtmzKfaM5Q7AenPleCMk8fWfOGPtt6ST9rA7kazhs8GyC5cKUw4QuQRm8YfYqj4YHdQscVlYJGeAKEW)QUhy4KXDfZsomTcpk(3lIVsKu5(nx7oL1A3rJug63xCfarnVgV6fN38cYjqQIAr2dV5yD1d458b7IK40sb1hW)PmvnH8siPBRKjdqUdo1hX)6wGjljtzrnbynVuHv1olaXKwyvYUiVbtAFsRK4bijALe7IZgF6Wjb(3KX5iJUX8XpDNXsKE8f7nh5KbYPc8Ba(EVXnytqvzTVoW6uOafF(2VDYubip8tFPoittMbEksQwiZsjaiZXrMhWANICAka(ZTEXskRKbP20VTRsVUSOu(fHVQVZnOFNjYicIwzvybnHZvrqo)QCxZ87acLY6zTzNkE6rsgEYyShLXai7flOKrhXjIxfba0BrjPZUg7nIClNg6(L0GAIfLL98LOS56ePW27(UQOubHm8LkrRHEwgr3L27gmjudJWQdLtvrsxroRgSCG8)YsotaYtsYGKwRlvuwrtifi8i7gusrOxaIz2tFxJDN4YldRP5kHKBAJfo5KGWU1XX9WLaUSWBmR41WbGJxywkXkq7QExoAXeaxy(YkAT)yNaONXb9KvVzwG2EiKvHz)jQaFHSaToqEt4)07GKlljpqfskqeilWO2ifjDT864RMjBtKiUpIeJ2AF7N79mrwgbMjT0zZYiNilE)KsaTdzjaHc4bIk5CeTwjRcaezIcjPNSujLDclFnaeCWXMV8PgA5HM7ytsrOKki0eGRRqEJe9vjNNcarcba2XiirknGGZbbznLS3Al5sHxxha3lsrW7CDjqErkQy4dUdebpERi89k0QKuPmv2bxOkALupGy5YQ6h)rF0v4lQ0JKYJoWzRCUfoDXsN9rpweSzePngdXHY4B9QcY8WQ8OAG8vC28AlkiOgg5gvoj2W0z)lMJ3uXPXE8xy5L)fOts1EbhOEKoFzu8RG4LPDoghRtZPExfnB)eA4FP941hlrY4NjXuPdpbPRpM7vX)W9Kfx5EVmIeQIvlkRSISOZ1w19I3u48arPJQKD9QxV)BQ7hJT8RUlOUHlG8AekiuysjOPoQgkFcgAAi)0kAGom2QyMKxQaQeAKlOOSexs6OjldjqI2kB1XwrPwDoApfxoCYpE01SN7rSXg8MVC4vhQVE79k5bLybMwYPwrsfejTBxRMOWSiHNnDIlBvnuhlrY((Giz(DRzQQzB5osVdccwVOLsp7jesCVbtQDgKjbGYrXLajvB5yfFntEWrnFMSwvhz9SbOlCzHkmz9O431Yedu6y04NjgP91hwzPC8LdoHsrMsQ6QJo8eXM94uTuZen8KHhnM5xMmEQuXIg0XTTANGZhoZ0HNnvSmPMp(uJMjD8jJL8QS(GvFQ9ab2WELpoWs45p)T01cvKPSF7a47r7M6Dt7fDhefTaLSKA3bbzXXyfIJ(H5HPCnOuk1ZOZgpQ11OMewxpsj(I6wFbx5nlaWZLzpdEf7jWRCCBh12SVAEbR290tpDgii8FLuafNdY07hBYGNi4SGLa4LD0oR42DwtWIKIcLRRMSIDvt9vaLlsdtaMvmC5YGUiPufek4zltN5G6Apj(MAV93c9(sleKoFg8eNiy7ddk9eoDMjsmAMyZbcGZm7uJeFcWoQyrBpyWYIcY0NX85Qo)IpSJHP7AAwBzLYMDd8U29O36tfuqUqTv2AbL2RCJKApiO5K18oEFg1a7Lg8WhUoRHD124)HmaYiiVCps6XaDSlcQBbnuWYAveCvxHs6cqFPdp6mmuF7bv08QRYidAVZ67Pd1)qdql1cLHf7yz39GamqNngQBiaDlVhfSHr9laBYyFbEyS65dqxN6r48QsmIutqxvayxbdf8rcoQqz8BD0zdAevEG6UzEB5f5Ll69AsDJdKlGguZHZGVFTEMsyf6fDy3d7oOnpKodoVa)IOjs69KkpVmDHtVJ29I5eS8baZ6hpc(139SqNluSUkU6J0cUl(4X1hgS6ua9Ce0n9D9R(X(XzpNpZ81sBTfxrAW6FZT2VjlP12nD(DRRnjhRYTkv6WPNnv71XxQ540W6xOYT12PAyp2CIttPiylJo6DaOgTtnxQ9AQeAZ8yG8O6MFz32s8TZzZUcfOzN47k0Ju)eFnlRE0Z1eqxHGShR)1w3mSN0fUNV3IVXnFY2ATYLilSjWVqVJMaO)Mm7jGAZ0AKktcfjMnzErH8lcMMCFKGRxTCsWRXu7yoEnjulyDqVdYH2h55H)fu06Dq(IKNhun)5jpV6s2CoaUiLb10krvoVtljNvlY9KInfkZzyhpLqzMl6O1TJABjCOcFiFjOZ(vHpxwDFHNnz4mrcNmZ8XJMESmdpw4PgnwuQwDOJroua0VpNL27wwieV8QQ7X0RnmhJaARjLVfQ5up8tFvl4kZEIUo4oAzlBLIMPh7UlsNDrnmZ0xiGf)cmFHKtuqQOy5dCvQYTraZ1kGA2gkC0O1Qqo)5fj9rcbgNTMLXgHAO1gRrnKrhiQsMm(OJLgSGdvf30vu39HipFlRbwqZMkYs2BGnODIXO9OxhyjNQKsUc9w8cloNO5TKkuqqosKePhJ6DMHnv9g6Yjr3gLtxyjyiNSVE6RNJcw(ncAt4or78sCRjxH5Sb19APWo68JOs6iSQGP5qPnnZOT4OtCxGpVWBosLYLvK1FZZpw80Xg6udPjjJZQczVwvpkT5wETHsvZQiphy85fT6fzbttV0Xi)g3n53LJ87Tw(edRNukYPxHAUkZosYVfh5Zs(CK3F9wpAx9hTp3U4dnd5Bbl53hZnw850v0OEWgxEP(b4QvlNvw7jPXzaSeznv8c0AJ7cnXabXGrlxeFa074zVcELDDSC3hLEeVKsps(tiFPCi9FfDgDc5pL2qib7Hcq(pa)Zxx9G20SLbQllEeVP(ElusmKG4dWWmp8ttiusb0td)5qzGf8Fiyg)N8KpjBI(h)x8xUd6fF)(7)jqpdq(WIKFtWA8VrRKoVGf4NCLlT7Ruwk)Iz0SSk)Y0VAgOcURr)MdZKPg5yA9PO6DrVnO9CEHLGLt0HLcRfU80caLQCzwtzzQAhvXqOroaVuWA138SXpC1VD4uiOBd6JX8E0jUMBYF926QByu3Mgq1Iv7AU7a6T1EOEv3LTdFnBLSxL1tS8nwRRt)EEB3VX6PMUc3CkWYBsSUZssAAkAIS3xoKVaDWs(ZU0Uj)uoY)voYptK8FtK8FN8)G8)K8)I8)(eK)pM9vY)a5FST2psVgC7iRb8Ym4AH(sn4ALZG71aLTtrdUBQ5BQbVX1ud5rtHnd2CMn1YMrcidg3LwVI5xyrzieW5J02AO7KPfBgJehZSMXeR6SP53fkuuGmOvRPy6O4pcWl4zejDTmZ5kRHGnzqKUMOPNOpCv)rx1rz)Ni)zKVLi5BEak)4TQpLjRt9k2jdq(TfjhL8jix9TF7Ke3mXG8Tj)qG06l0wBaHuR1FrRK)YKtbMCMK8F(eKpj5tr(DejFAoY3dy72Bp9w1zC3e5halbrrxWnc5FjJoE0nQ0R4cHM8mQ9htM8cIOR((RPmejtTVna5s5fy65NL8bfV0GRXRLFckK(TVpsl)QQD5zqjddprruNL5bswXGhMghuFINQPXAwvQBFcK7YsYcbtkORiJkSBv7UAuTdRLtci4TQBNEw3yNxTIwrMQKhoyuQRzv717rvjWqtXhMxl40vUWfkjemIY5TACVJTCKs8xqiNKmGWEy9GJPOSqJRFQYkAlD4yaBoS(ruO9jS(KBJC7iW41MRV(hyOJ2)flQjvavFU9KrxFHkLknSKwEaCFrnLvawy5fA1TWN2Cik4aUJrKDKJaTIaQMkljZAGCO7hROdqWTkEojFjPIYa49HF6Rbc1kp2Q5WEnkEFodU7giUFDWN9bFUh4Z(f1aHtO2xCKodGUpehfO0LUgXdApwaFaYZjKwsQSiPx7WVc0qASGEcccVdAKUj9366O8abn6C2ejjhrKmazW1anPudJbA6(ihBNjlHn1TfbuHyfGciksCmt6HhluKl05Ostso6LnDdinYSxf0Lc6WYLhHppSSLlz4OXNnf6G7JFRrWHlmryt5DZOwdRHlAufxVnkfiQpXeTsgFgkxJD7Wl4x0wy4L6GkZ0urTXzbH5ZKL85fjpJvim2xYYyglebf6qEXSxPOGSGMuEwycPbGiCPv4xvhwSzEiekPy(cmTeWvEet8JZEzuVBQ)wKkO3wY(7BOHoc5LYQUBAqxC2MGMjQ3JLQEbN2u(yWosHpCNQ3vn(yMgbYRObQ6KY6R3sIh9k2oRKfHYdgynDh3MIobukLdmD8LfdEsmSztz5ItZqEa6I8SIBzDYr9sm1gFbdUxli35Mbzq3MPSOBhKfDhKbjTzWfG8nNeLmW457oek8zRg8ega99kIIeWvwk38NbzS(JYs(0igTFaxVll1UPePaF)VVic5SGmabc5Qts(UzPqLeiwCYrxqvO34ZihEvKr9kaQIPcglYjNmqtbwm4oIb3aaoXGBqdUJcGcdUHOybdUiznXcgChRTCHaiWXgGIqOrPYG7nAWDc4EpgS(yW94znvf1G7jOf8gGBfolazCSUyPJ4UOZYhNnltNmzt11mnJZ9x6GQ3pQYgvVnFJBQ69uxD0nVG84RzFV2FiD1Dr)wTb88QSsTsfKnyrTMAxeOvjEp3rTNC6RXEz2Xj9x8kmDqoTTwB49TIn73EDkrSaAbtKPsmvm1G(nQSJYUzdAf2A194ONBhlBMQNWnmVTRN5wxNww1GvTM57tUmzb1xVF9aRKxW5l0AyDf7wGMniZW(UvO0jkSHTL6vMZ2osMi1DhFQPILmJZj4h0VoIRCjW1a0S709oQ2FWq9FFQD6xBvFGZ9a0yfZEY5mPUFV1gD0S(eDu3u3i14uuI4TS6FoLyp6g8lm04NmwKfRSWuwmn(UzDWEyFi7HemD5IsJ(pWt4KyYeG8daonpR4LomLFWV3Alm6OL67CNVSgnuOo5ly(obt)vhSEVTA7wg)CAkAu43jRDkS8TOwAImlqrlOIfix8lR(gCetlQVzcp90tepwuNfLm2KjMlw0GrHRsLyQWtnCSmPJp8jrMmp)5V5tzByQzCScAgil74f5Y3BjMoD8etLYl3Tz5kS3Q7WMKN6lX(hyWboYrgQBx3Bz(svqVh2V7ID4cYbCFN687OTVgd(i1wxVDgQ76uRVqDFx3U)Z99C4H2Q34PSVYPtaD62WRZGBHELhwhCpzZIDwMUdUem64lk0nETUwEw4bZy9)vJyODrMkHa9BOrD6BAZwYrWICIMQ6bz7ihjrdQt)dDKEdDmx31zeK8jQI4)vxKeAacAZqrnaj1y001lIQzrvBg2Xx8JBm0MhqjmBA7OUM2JED1qn5zWq8o8t1YWO9UPD3o9kmj1)k73vjUFOAPoC4LFFqIMmXUEqI1er5TlaTbmXVEJcwTHvQAp1kWp1h4lh1PbbTYZjw)cuvDRV2SBCp95hR(ESi6QROdhSVanFhhdSEDn6jc2BJys4)evJMcQPnCYzWR73yEdnKxpk)((dqDhmQM)xI8hq(AQXz81C8ARs(x37Q6TSMMBxUYs5aqA3bEk)me4BStBBbqn(nThOoBbETCx6En4sbMjmc5Xn4gn3drFhgCJzwZ4gCJBWDsYPn4M4x0GBg4bNeQ9uKDzWLWGBAdUKWxJ1Q69wNEF0wY2GbShK2GB2B1GBoQAZgCZtG(2PGh)0WNZqMXG7nrum4EZW74TyW9KgCzen4Y29om44VpdUCRAWL3uhYphr8qOcKDVV3vw7SZ62nZoR1SZH1SKpQiPhOMAthEIWrJpLToMgC3Pi5JV)xZh)KUv1ClRzPPoQGsHGQHEe0cB9dF0qufzbLjnv5004tqTwM3e7ZHgOVouxtq1tMzQJUH8qtinzLyIlDMrrDrnnd9zYALK14onqZu0iQRCvfun4eW2YdntVBMYPgClG6zsvY8NrTr9RzWjr10eupeHUOYMOPSrYY050GRifoJq7SIu7zpsVdESJoGzSr2mC5MyJQlCjyKjd8vdE0cMwdMeXkXGIx0FChfxHapeKrXDueid4HqqeyI4oeFBJ7O4glZw0YsbxgClX8gHbxjkIdqHoGNmBA8fRTf8MIjwBkyY7CgCulosA5Q5vo65kuC2ujZPXBbWaWtug(YGtXb4A)uGyv3FWSV5zYsE)gCY1zHdcGW6xNppMc95X(n95bm3DutVE8szrVEG(SGIAqhy4WvyiWstzf5eYLwL5lK(hQ)(pYGE7dekO7fbCxowUir9cY(j)ASOQ9F0xKwxndsR(v2)TV7))KvwZL17atZ8XoZKQXuh)KZOfEZwzVhesu7clDv1ls(jB7qKV6GKxxRxCzZmoih6IEHcjPCW50ysR1B7qgCV1Sxe07vfdck5dxpaXLTVoEHoEBwgYY4XGCkqEialgh(j3Y15ilg6sVdwmam5Od1hJ5ud4X0vZi7JUY)TAannSEtxEnx)P5wUuzHLeoxfjvHcz3WXxAB)T8t)OMyIQGe17X6zYKtrUIUuHm06dpGOBqZZk6wicqBTLLgzUrfGL)VRT)qRbJ0gLAMjBbqqJUXahzm(PLcDSINDyZGuL0KFjfkcst(83qKMqLBGRUoKNyUTAQrAcSuFSqdwJ0KTPBODPxuJ8e9LoiteId5pGuG6eavJGhuefk8jf3ne5omXBEdtpRtKQb3VOftkdU)5qR8lGWXR2uCRO0PnsMYKNzIrRKyUbvuhaHkmUoEJQoafvvf7zltX2n6a4git9xQInxJbVSPfG0uapuQWNE9ckzmllRM5fRBgcV(6vNS35m4UK6(PLKyzW04GXdQxrBzPLbtnoENKNVfdUFjdU3b57ats)Yvzfz5XEM)1RXL91iZI6vFeBE0JEKb63pPvpHz4vqWD9ES)zf9ul9gHgFHRGBPMrS3xpmxuJLDzG)YOLmD7E2lIfrDI8VeDFdXcKCN0nRJP7Dp4oO7PNQ7tGiv3ppNYQk0xxA79ze9jsr3LLxgV0kJ4BLEJjO7nj67lcB)errSVGtelODU6Uq2G4IPfhWa1GGT0nVgC8p7FWjo2INSBqmdF5IbkZtTSW(y6cxVbTh0cQdawMhFhDJ5R0B8yYANzMzojIG3YCI)8Iv5F(mzV0qgCDtEoslFh171ZWtpELcfXKCr9H8lA3fecQSaup9Ys5f8zhlpp)I0Afwxuq3NKcWDceOEWgL5a(S9QntcG0kLk5ZEiFejz(sWdNFrfmblvFyFsqaH8SIsHrqwggxE3CJXVe6UfyKX603NN1kTMK8IcLd(a9TzviK6b8E(tGxvr2NeLWXMkpigEeStdyE78hWG7ErEzgC3haFpeqh)6Bpz0TsUcyWD)0KaRJqPtaIwEyaj9arMi2iPZHHppHSPEzaaEVVDGd2dHb13GRFUToy1)0aaJIE14)BWfegxDiUolpghf6oTq6hkQZQb(3GRlmI)gCpYTrjqJc3(b)Jn4Eoyy8bHpFe4Zhg(So8bj2Fw4Zhh(8XGpFa4Zhc(8ma5SbxpgCaN1EzX93GRpNr9)was1JoqHXtV4Kjo9fGzPqvd8FCuzudU2F73URi)dmfmJIBTAWyhb39wN8aMXmSLSKuVnAjpaxYACyBXLtQqGx0BHanRUQZs6695iWzwRsF0SvZvQpgWBeFJEf(mtECtz74HBqrrt4y913cxqsSJWZGCAt4ma7pd5QZALnu2AdScSQzQoWXzwEGQeTAOWtfnhnLO17cTgbkADfzRCGam9GZS0lZ2XkYjr0pwUb3BJABY4To2JtS2TKMxapWtrs641yW9VYGBdR3Gb3)AhT8g0wEwA6X6QH9AxyA1WJ4SLA1322G7Z6SjZIpo1cQnnPcEYnhsAW97AHhPEQPkGC)Tq(hDJiXsO63yHiHM)fSAcR7tZDHRY2)7vxcOTihT5EjML9u94v3pnDrcggt2BMdnr1VkXVQPD63tn2PVDtLKXBkvMm4ENWTFAGpY7gk(xJaQ(9E60G7FXbbyWAS5AOEVldUFDSKFd4XFFWN3lWY6382m4(TY6Hfa(4vuMraFBNgbGAV7Vrax)o9Cw)slMC34tlMpas16mTyupR(XQOnK00cLQHaE86PSmPhqPtAffGjT36E6TDf12)NDcBkHpZwLQ1Mw733RM9Z200SZHp5B8eBgXQ73MBsxwNdalRsEkgHF17Ih5j90FpOcXnFAdT3AtBiVjWPKDojWB9h(LDqGZ81gRWWzn1KyBLQq15gw)nd2McaXWmFWUPMbBrsTzMcptw)jc(Y53CIae0Edn7rMP)JKEOPhyGXNCilAlxurFql6hgXKRSh54nPaPTbPsZie6Lv5ApROjQhN59Xtrb8d7tvzAiX6KU9sUW(3YB7DwJ2wVT3PPOnkzYnUKxS5cL2bBMqwudPcLAIfdTgjTGsVG0e1sNyr)CAUQsmYi2abgnrEuAYNQQqdgJJNjRP0cx649SwA3Xu1B0ngO4C9vju5JnQCothjICCELpM)6LtVdD58dU)I1WQ)x5p3dw9yH(7IPTS3o9a6IS1DaDrKCJD25PTqUU4YxvxhkoUUaTn72ijbpzGBSC5JTAO09o5WNv8KNXZCe8dz5Aja9BhQfFSW5vQC6VdUTdQp7MH635xC)1J6Pf6bQFlVS)ZXKkEXLpCtzwqvNbu1SalKV4zpD)9joAHEptN1XZ)dFDyx)Rur9BvE9nPD778X(e1y3ouIl72F5xR(AaXw212ynv8ZUwlCTlBBNKRby4Z1CA1xvnLTSkEBIbXRxRbXNn68JF2jxPJzhC2xnPvplJIyOEFsZ9Qh2IBzdA35j(HEWVhlSodA9snNntd9MoOU1znBteu3RBRzRvnNl)30uQ5uNZCT1qhyCNk2fo2roBu9ztIizxQR8rm1tX1wAajI2YYnF1LgoEfYGTL)zVLN8BwJjSp53SrENfVTjb1NJ9emhYYAU3qwtlK)8(75vlcMxr4evFnlgPzDAsCJ1wkr2QYyoS3sAyeyaw47ZiyQrKHxEa65QvSrOOxqEc1093zNNYr6BcCsBGFu9XxNVs3fQgCFHT1zvzNounB9QNxWQFQA2aeMhht2jRVOurrb9YStMjZ852kPX9PU9GjkUNpG5xTFaSIXLliC(0k45MMCX3KNTf9KajqGa1ZQ5DJSAUhgRMlIztbUvE5QzNMksVtQskLpaBpNsTwILhlrWBzXkIY(af(Q2UhB14yysAG5IqqSP6SERXy7c5Y4rpOIMvdK9Yw57g(uv)gDhi7WInKN0xx9(CDwO4id6DECOuNkUnzwDcu7l4kEP2Hj1XbACnu5a)rgj(2vvYdr(oIKNVf3ChCzd1h1TnuJUX0jo5kRUaF0oN5uwsLrwdwzNPt5x1QvgiFQtt5tgCx2G7p0thU6OpXoYoVhlHwFfohcUOWIHa(N)r3Rt8dEyDAW9h7uogI7(AMIE(3N1o7N(Qwafus0)UQl6StGBOnyVSVww2RcFs4v1(vId4KGXmZni6(O36ChIjVd6N7V1d8nSfRfIVujYx3G7pPrXuVX728Tcgzldn8uBTHp5zowYeRm8uQJvNz2Fm3UwLPTMdPgBk0aWYamQb2P6Yv8pzZGjU)xgWepDwYzAtD3tYRTiMCpJSQ2dZxIVm86QayK1WdRD1s4z)6AT)yGeNiI08M5DTN(izzzJ3r67id0FipYi8RB)G(aOghQTx3Mzjup1DETh0)kzUzVT01r9q(xvxBh7QMDZucAUXRkp3PKDuZgBZRRAtHlDQm1Ns9b8)D7yV(FapRL9g3UQkyGQxE2K4HK1W4PNT9o(HQDM6J4)RV(DpotxruFnulop7u6oA)tXzA)2Ox(HC0dOkcU1OTzHkhOdDgXdV4E)XRnQhvMnSuhQNuB1vY72MQTaJcVjS7QkH9(G)QUhwuMDE2aygdIhHEQYJDbVpt5zccu7Y7D75eXsLkZSthnC6yjBV7GPtoBSoDgTUxWElO)fbKXxieULLSYATVe5AOPmxwTY0te(0XsMj2mZgF6jXDZS5rei2GHJdFnXuJeFuZ3duQz9tnDSHJhEI4NjmU7YR(qtKa3)wJMH9lDrMOXtfoYeXIgKUZqtzF(d(8NVLHT1Pa336bDQ5wCz2zf9ek5xevwP6U90ZZOtBLZkXdAeQOvtbVrh7cWdheMfQFBk6(boHpNePSTXTvDXtbzZlDvlR97B4fklO1b866Et2lVSMLEea6OnToYhHUY00FPc6OtNx3t(kA4v0JFd)oXyRIBIRB(Bjscvb5n7CH1QRmqV963zb7MCA16nG17ZIsa6Us1JWshVJo9C3GATHnds17e3fc3pZ)to2(b4PZFEr6jZVRt()3hQlpEIfzVZpg8RCNz)m3z2N7oZAY75SzPP1mLZZvKOhRr5zz2oljO3iASWPh7Ktrp0iTzoT49qzovIdpe)XFLaqwkZrzxeH5dMCapCDHY50fXKAfzImSR7BW9cjvRusxaVv9CAWFObaXK5YQUBh)MYWadI4Veb0KOezl683CadUFBlTjm9LuQwawGNAkTCfvYT60dnoQEY7xD3LxrQCEXEkV8JklRuSOKGZFjcaMy3fUzakyNv0VFFYh3Kc5QSOG6H2KKc2kPOFaFYDAjz6XU9e4zTPpPgCsbv8iRetb5o8PveO)AWq1trtqOGYsQpYMwtWQQYcuAvFop1Cw5u851Kwahi3FJs76uLH3UFNYzo)zTQUSuMEkBIBgcAMjVBt1GWu69qT6wJqFtu5Q7huNjQSb3Nyll0ZGdu96tAW9Pm4(0gCp47WG7fb1G(jWNRbF(7Gp)y4ZFp85LGp)TI2j8mMFVOmUUgXKOXzYl)i1N8YygkSuUzgix0ZeVyVyAmBW970O0x2m)QdXYJ5QjKmlvKp(T6uXaYTsZaBtZ6oj14pAgHJgMDFzzzGmMl3ntoFE3EVTuOPja9S9Y(Klw0r(Xq9vOt)PZTYpS6gtb)gD1JQrVdNmUS5rk8NCtCqYwsw4Mlh00WFxVkj9uoY03oCDweha9pcQTXxnN5Vlew8QrLsWtlz1)OMyKmR1VHz1nKQENRNXw1NY5zeGtXz16tOAhKoLfrff53(B964avZzAJp4(5Ep)bz3p3VYUG)8UJLTQ)oz7V1pwwx59FTHB7wVXLEfhc3HGGcBQmfvkkWo15aLZSoueSxaLmfAdQ(hu6e91DFH6nybfxNBecLagSDeQBCApm9PIlVGshsD2jEesivOEvtmxjKQ)8XWcIz(Btb2RqVzb9OA7KDCSbd1FFDgiGpRNoheUqHvBuNooK(BJGv3G92xsbO0vwMIOWtPKyNxshv6XUCZFgh6aBvScX1hbp3Ll4SkDBROlRYoUvD)8EaVhSPQ(EPpG5VXhoQnAUfu3Q1dwBy1YACYQXjSFyw)0UJAnsS(5dPtSfCpcmVLZUVVtxMLfx3A1Nrqzpr3n2DyNNwJUrK4LpAhh5mreoL3jV5p2o5nNClL8M17u7F(m3n9Ft(AfL37Ub7DsdUFMOJK6PwjtPhWzCEPzd0tGL14t4WMFND3m7wM0d0O4RUn9fS)Up4fTDFWKm3hOC(4htqFL(gBPzyUp4wPE47v1PuGDs0C3nBWvrOha5CP9Zx5qo1(5RCO61(XnoBBLbzB3d50)nntkVyjdU(C2kELLhn(5othQZnUNWUFIjEZvEBzVt)FvwEP772)7U9pXvCWrJg6SAzPDltLREEA0cd78xqqpJvrtCkL4rAX(73SPf7nM4A1O4D)3w7XPRAO5p6YJXpWfo6ywm1E1sccoL15NWMg8L96iYCSdtNMd)zg8fxWVOHRYRlAyNC6S2pe1znXnc2DnbYTgtqSS(aaWFXRptqyizhzTQ9UsWfw8LQfl2z6op)5Mz(voJEbtMEiC8Fsa72eX9dE8QiUFWJ)ZhiU)0RFJE9A)t6KW1J9fZFxTQ4L4SdE6(uNiD(Od8QnXUBdqOytacVLdCqhh9kh4GBcmClj61F40x76dovn1nVH5gfkeC0nYlKC4HhzMlSW5c7P85R5LrTVAsOSZm5eh3(NaZp521SJw(rpHdZoGV5PtxDVV7Hk9I2P6Ip71(RNu7SXO6xzT)491IQ)QMDJWSDOgPzYtFcX7m14tm009nJNgF937LXxMCd20Tt)RItdu2ETXkNgUv))PYNXj0G776CBi8cUoW8)cgCFp7KvW8e3HE633YK)tPnWRYsBGuXgoXurdN80zEzkbcUSb3Ffngv0qsvnfcaM11NcbgCFFpYEadUFqahNkAN1kDcyNBA)x8ktbE)gC)n0CfiVigUXCzRpPba2xgCa))FynjlGv5)1EWItFvmDagDJJDKY6XIp0sNwscLFcAZ5oZa(P1KzaXdqJ95ps0k0)ykh4i2)h1GRBdUpjPLX9j((MH72ri0BVHHfxusOubFcD(e8Rge((y8Yf09ja)SNhJd)CcYffWubGg0C0BrMhMxSJ2RGTUDouVMOvZt0luS4doIrl3SOrl3e8zNWNBr0mMZ9JH4ERlwY8yVQbhRxJUrKPto6Chn1afo3fCgKCmO1ySXj35ftNyA2VLPocrU6UCKUi0)C5yLwE2rYmnLZink5wN(xGiVbidIzhW4yu1BqWZdGPMa7m8AJuXMi2WPhjz4jJrr20F2(yhOAye)ndK(dvvDUaxxEZtSz8M3(VPoFU6DNhR0A9NhzB9Rw72iGU(fzdSBU5X2aOF92ZEovDPLDwRTStFUfNyGtnM0evI68mEOTBKgk6xUr4TXIooXoDFGHuRQ5pyhvvm)b7yZnv8)hfpGMzjf6U(K0QnAJCF2chv)CZEUfuJpBT7hWwUjF(joYuF02UbyXfqz2mbtCQnlJx2KGj(R)W1tPIL5AhNSD2oj(AHXNFZTWWLtl3MHtSgpD2YnxRNoN)SJn35tFULNF05DyHbYG8gl95M5iNTMDZFJ5CA383yopcx3lh0NBAWK9ETFLM(W0PruOjIiNVZ5KgCLbJxhf6T4ffkUyEdKe9o42ZYVMN6)7
rqrJjAQN,Dead State,LeeMace,C#,Thursday 2nd of May 2024 02:04:13 AM CDT,"public class CharacterDeadState : BaseCharacterState
{
    public CharacterDeadState(CharacterBehaviour stateMachine) : base(stateMachine) {


    }
}"
2tLFrFWa,Better M+ Window,Unhalted,Lua,Thursday 2nd of May 2024 02:04:06 AM CDT,!WA:2!1QZYUTrY1gfdKlcXGehVW(IKGKkCINHeMMx2Ksupa8fGpLOhkrfskRzGGaNIDxKSJAwDNQBkj6z8gJaKS25pqRZk9jmls2syKVG5ty(bsovv9B2KsJhK2py3vFoN68(CQQ6nA(OPps7rA)vfM5mhdDkH15K(TBDuJHxHhB2Q(722XsT0l3AyRBuNz7yoTp5ANR34FpAgv1r3KMjBkeCzyQInqJmzo6J0jAOxGWZy4be6L5TDWoK8bVYKHkechN5mmLQZVDjKc9oFSsA6QzAaVF1ZzNljS(6tjimvdLE0iCj(FsZjQpkgKljgcczF2uDAMrgMMSmbS9)hQu2COYzpprEFfCqaaF4SqiLquEq8FmIZmgfz7W0PJ5s8uStM0FT6tTFQ2xZsNlMsk0ZaLwnwXKSWdKnfHQ9E7jynZR(IoJgztC24wmvDIj7ytDQZWAnoQFJUwinDBld8CUdZa5umWAGdOdCFAdRhg4sDILgOW6cAaQtXzmJFmdl8VSl3fuLmNudhPt1TNKQk8JZNmuI51p5F6R9I4ivBqTjyddcDm5qtns(9jovgns)6w0rMz2nBkFSc7YUwKukKnvaAtXwTQBd48vcRWzBwOW5WtoSzKCON)Cu)jmtkbzoc5mHG6RRrSLawA3DJbib1a8ngc26PE0QueqQAGvVa1108c0bMgAEaPebO6y2ftiGIcOOU6fehpW2mcyvCWgFAD8RXmV3xoY7pfpxLrSDqhIPM(WSvSP6kQNKbQgU9GyVhAFSb(cqQ1(uButqn6HCX7dYhoJz(AjUD1TjOuVjKYouCrGgxOVHaj5v6CYrvChvHmAuHcEJw0D0cf2UGMM3OLChfxQ0weI3OB6t3DkeqHTChLuwvDh)rl7txvvGh4mT(ie10jiMMrgdEX59DSSBYWtjhWnMGkGgkzIhkHYIiEBTb88gS8vg5qyzuKtn)kwkyVR2MyTkAADOzsx1q)1GPwlWV2(KwPJcEmoBpoR1tLPBbje6q7nX8kEse)PcDkbFrfG)SZ3tftBWJxTZKUwZb9oOZP8mhGLolcsreDAUpkePBIpAane3ls4Kkf48CiCZZBYmTDMAcz9iIbBRpKHzZtLsQgB3QA3kD)Ibhv5WgCRdhhWRQ(myUmPO(edIfeZJQoZXbsVK2hpjzaugS)zHjY5(gvpq8nCb4uJrG0xcrjtAXpGQimvYgKY2fR8hw54bTQpOFNb9oUr72W998DV5x8OfgueMoYqF8ehupc2gKafFa8cU(Qs7wQ42LEJmc3ymXzYNIzOkQynY05bGxuPGh4BxUSe8AGI0Hhq2dYYAhc2cHGDtjShaMmBoSVcB4MCiConbBSLlD7oB4CqshrqhBAAeIWkLfXsFLYw7UZU7kbUNOyYutq6QoJPdwJ9H2rOAH5NZH)NJwjLIfC5N(KPwg(jzFjiTGoIzbEKHvrkbQi3PJNZTYRNXiGGmZicW(cDXYfda(iZlMmtdbf7iuB9ldCrVlBvXW0ERaAVTK2vHICxqOtGYd8u7gMxfsG3uc)Mkqwlfj8nzeYeVsaHZFlO6oLIzMG8RZSHGTWw1YbeDhj4hrmCMGzaCqysBSolm13mq5voc4ZcBB2sjGQBgO2oHQrymZWk4s74d5ofcG8vqej5A0X6ukw1GeMdk5ZbfDTiNyOHNIP7HAtgJvNZL0(Zz3BBsPW6yP8TzXnv2X1MeRcP0N11bNd3wUA5KQk7c8o(ax2f4KRolLWYL8bF3TFZklsUIcSU0yZ7jnIvNnCy5oEHL7wq5nRO3e5STvz)zBt)OKK73XvnhsJ4YEj0OXBcsr6vVXlx5ETa2hYlO)AsOQDUPLBzlk3XR7r0wzrVGS2Ex2eJr71fkhzdfwffYYKUs96DoAq7ovQ3OEScLYoTxQ6uexUGIJNIDuNSFT6Hy3W8DSYFIvf4m3IKj2lYl7lol6f8gnC1kPxwwMa(H2eviNghO4ujhkTKoHkLJGA5EAxz1l3sKUfgZeRiEIY76jqQW4LSDvYw7d8yFOmHJUvglmdSeWAtSiggTQNdP7B6Jy5ZeORBjS9WkzG(wieOjfPX2BTrH5CoICFMaIku98HcXe71YUZvuWzsYmRHEYEhKs8Go0guWvcC1L4ThSaIGwPeVlD2LyLOiFxtfL7T8ceNYcfeFPjUQQe80IsBpXjrpYw2cc(zuZRO(uCzhnjxiwswoKgO(fMZagQgOb1ctIiyh5HWkCicUTof6DcflQljGe6ayHZ9B0UXXD62N3cv9toA)gDoAntNB2cbRZXM)GVaSKCUQ5w2QwZkTA3O(GJ60FWNDuNtpkhsjhQa83OZpXWMatBGA6fOc8Po8abUXJv1Q7(ImzV)Cu3gvQ)fIzxjrg4(jwevOQGDFt(AnYOs0nYivuplGzFo3ilEF2SzxLehYHDPj))(g8FqwSeZWfMI8fdfkFE8fMfj1QO4YDMDluo21NNmHeSXPL9YPw8FZDKuXfoimwW29G1iP6ufQolZXupZYtHeXHcoXfVZKm05ClvK1dj5xO2dv3ihYJTt3IkRyvriQsGeT0ZlufmtY5aykNkggIDyYEPezUW4vmVPjRMb0NfSW0k051H0rWKZV9eRKjSJdthEe4vEryoWcj(UawcuG1mbOJN))dXljXfvN0u0MGVmEnEWxynv2KogHb4aO3nzT)OZxel8lCN(pmpx7O9WLPfTM50HyN2MQxiQDCpkGhRdNV3iK3LJAb59wt8rWMTao1d4v88Xc6HarjxdMP1rAKM5YnDMu0CikNtavs7pWzHGsUhKNVC(R1Bp6i3ZMmIDAnhcZgReXAigx0UzKEHxUEealhzbOj3ZDY1WeAGe7NpceNqz37wZJu15EPfUpP4ab8J9gf9)JuwwCCDk8sF67q4JvmJ)3VwTIUWdpIUeiHf(vPmI4khLE2NPC(YkSa9u4myCdrK0lClvou(85DtL55CjgrK(WBR7cm4PsL0I6ENM5a5E6)LVfYVoEmHz)Z(eM7T)JQ88YlE03ApBOWbT3m(gZF7GAv61FqV(v62FXhn8ac2Wzs1zazhYp5bcRlVZb7usCST(DUBtjeYEqL2TBaDqm4Wo1BmOwNdpUDJ(nQ)wPwrZo1TsUzaFIVvCAoZKhrH6eI6fl(iFw5yynx6x3veJU4rx)tES)MLY3hgoI25qUrBc9IudhjuZB7t9xms8Tl9a9XtaN128DcxSxPCabQf1RX1FuDIUHgKOM7qQBH1z2zwF2VyUPXwmPh5GQIG7aucn3s(G(Im3liBIEXIuAHfd3kn3P)8AAP3JZsIUO1heCNk4qBgD0ujGowK5LRDLk3yNkue9P7E7Z9w7PAYi2IZz6W5ot0vp2yMn)qMKBmfpzufF44lSdAJ5qSvgbvtErBHP7kwQM)bC1IQrUMF4cb4WpUeUJu0HYlxJzOdZm4qY4qRio0YqOuCzQu8oPsrXAW0nsGLdojVFa8COJd8hcthJmjY1rpOdVG(ZK1NJSL((bdWkj8ovSLEP6emeCQTY3l9(EH83eIfdDIMXm(Xf4OV(C5bTjoQ91qw)tY(7n5nDXCzIh5SBJB(Jt2yVF9SDcNa)hWm4X5ri)BwFphULzfzrGxCJgziu0QpuoHDqJ2h38K2VBg1T(wkRFb)4UVK0x(m)4N)7)iRFvIhHU8MU8tsx7705RQGInEfuVeYJ93EhppRyvsl(Pw)6eWxTO7DvPMuI1Vjbq4bbU3VOq1rMuhRh2KP)A0FygwJHDWO(9zxkNWF7nqDWUICO2)YhV4jVhECiw9IXIdWPQHjwRzvBOe)J7oDgSaJuvHkSQpEXUP6QAGTT53n0bd1MC43(w(S1da)zdTnNXujd1NYpUoRFFc8zGzYNB)gzv7kIphHR34jXoJ0vSZRRTb(LQWEro0LFOLwbgWTmrKSmYVwe54j2hORZ06MRZU4C09QRy4FVdt1Nk2vNYl(5n)gO(dPNduiDSZK)NfpzrH37TPpI2Fy2YDh6TC44oWGxXuSoT5I6cOx0yrZf7d)(W4J82RmzANYWwV9u3BUrwVLtLQoGT8giQJODQUMZK)8hz9Sv)nJOnhCl1vh4mbIq5hc28Bdbm7PQkPEQAr21UFrkdboEK(4uwF8QjPfJOQZDIFW7XZCahMowIp5KKrYpBMVZ2qBYu(XJOKVqELnz)rW1tF08f)0BCmvDdp(F34VqtRRz9WQeh(wdF4ZqNQtHf56(b085EFanJ42tWgarxp47KFnnctmxrnS2j9635q2CxGlotx72I2xWO)PTl9Q9B(Ta3BYnNQc9y1kWJDv5FVeV8bW1TYPs8bu8Yn2yJhCd3AQlf1B1PsXbE6X3c3QsKNP)xMC2dfFP)r2d3kVsX87(Ol)xF()5p
AKND9MDY,Whose Key Is It?,Unhalted,Lua,Thursday 2nd of May 2024 02:03:50 AM CDT,!WA:2!LIv3UTXX1)Yk46gMGgBfhvdN0MPm9VTeSmTeLOKSAfce)YIj0sYlPSsQQa1S7oK7eTC3nZoRKOACbIqqAUQxiJE7)l0DfOxXxGc4l61dm6tGEe8tqpZSljxkszB4SGy5U7CMZCo)oFnNjXtg3xpB6zZK(bJ3ACZXn)XLofZmQqCAYT((jox3Lzsy5Wg7BYC98UwoB6XhJzMOAUU2CQN(H4MULlCALJES1bBI9Q(cCa3YLTHhN664NK1EJgn8j8A3Od2XagytxQdxpFX1RvutNHnPb(F)7DwJaB78uMHnzpnFpSb5Qzcy2EFKfN75V89VVCvstDVFVL5(lYWgQLybnFoMXtMJ6q5j1Ba)5BL8eoJ2SjH5FRBZIE8hoZKOh0OrT2Ee2AfRSzPTQKJdVOHdy4mN47rSTlB6N8C)aDYbehEvGA6rDQNF1Q1QxT2QA16n0MmcmKw1nlwPIMdUfXpPMAa91iyBUvUaqA09SXTjStdCIeHKDmCTdA5uvQIJ9sajimhS9ta5euLNDsGpPcTfLBPHTPnDejpTjZnWRSHRJE2mzNDU5pf7qBHLk(cIRxsCZCoUoKNtW(KQCMYOD1xycQJKI6sLJ5tGzB6FIKgPQlMoxlm1bMRyAX9UQiT4(IzGh)Gl(LtyUCfFsWoiuaF)Za1xJ0m0YcWUuNsCQpXUHYSMP2gBMZ2fBwsNJTbWycTwbGxsYCa2AmHy5KAg2yFF5t58PhtKp0j0fRSd4Lm2l0J80Y7A7Y(8XgBSnhBM0zZbWWH5kSX2RR77gWmi60wEUmUMVbSoJDMbrIKsTlvfn9qgADw4)fnBs8UE1VjaZiOsGFgABlkNCgtPhY58CZ2GfKAOW6OzvfKUROzlngVlyeOMBtn5wVl7Oq35eDAWaJoG5yoESt95eVvDAAt(KZbWgaghEjW90LPRTAHYBvnNpiSIPFEiVdzX7O7tAbaR2SPNj9cNXDnIq5BM4V5KIA6DTTTC9jOVG0gv2hvM)zSqBpr6D4zHh7LHruLKsIup0RMxRyX1Zeqn7u6aThx5RFcTG7J1brQbTzYxkfI1ARdktnSUnzINxH6ZrUnKlHVvKDie4tKiXyG9)Wqh1ZKEq0Wa6ouNgUSqxWKNirgfSRvyCJB9JRDgNC0xgbrIRM07UMuFzqqnYr86HZRUxDoTfPEeOxNBXi(wU2MTf)YeI3Hb(qvkwQMh6YNA4Bje)kX7NJcY2EEPUCIB5AwhSsK9odIUIYAT3l3NawmPxjxtQk7DYHG2Vnd7DY2rp4DNrWtjsXHiUkqSUD0hftdjw8XCzuhXkxdxhU31kXOhJECa2u6GGQvtS0)XBCqaQtA0awu6bHSWIrDuUDtO7tLoqAQ3ovsPTIaXdKbjI)O8(zMuiHKbes1EcXH6TAZTOgDK0gXL9oxnP6UqCpgC)UvQvw5C549N4EAksUvQfNr8huSEf59x4BHnDpSNTRCoWsY9UHbayW3DKGqbQV0VX0sST0hv8NgtupP3KVcyAnyYewFCcszscJK((3dKxUn1bch2QwLYRxuCfXVqZOByp4ZfaSOLKREZ1iWrLSFYPsIGlgbaBhKmTDDIZbPHLBvBcJljojXXmjCfPqFvKc9IUks1dPEK98UwF2VLNjy4eON3LezgdlXn(73w8H)4hEcKRO16qewcVRlrYMeqKPgvTCpCdN9EXaVEUV6V8r8rKs8PrQHmdEQKjfti(1IBQh(ToH)v3IAs0KUQMIps8XIpj5Zvw0OLDpbY7MD5iAtMBtiCXhnzzy8PEEilQYHSM()8Wkt(D0kUAHVQE(1kM)lIwEjJ8(Nxafhj8Hwbn52RwpVmnTkvGCQtUfumt9qQWkAPMAku60OutJO(O2qgz0DtLoDCgQ8UtNofIBrq7tA)zPEZnDjfp7OR(d9K2nHQ7T76r5pnsPLHCJ2a54Y7ZTn8ioAyQPCvDqksKxEqugFYEubJlf(LrBAllkIklZyd1fQq17YG0OAwGQz4cf2HPtOHKqmrhcvNrFRrPslnZsZuQubchtT9)DOc4w4Me0JiqHOVLHCzXiQiKMgPKlz(h)VLLocnIHinW2GOO(QegK)RUz7cL4qkm4rKw6qjcWe9xEA8XuMeP5bgzylvmkRp9i(LpGbBCGRabhds5caxEiP)7q6(ihMUqUYaGwzfuQyEAklTtpTciRSFzNhkZkn5udoM8csjGOWkn70YfB9GwkkJ0qycMUdq(ircPE6hkTXuB54GZiDAeNfqMAi2WL5WsdguWRBY4460dX7bNCxZYfFo5BcN7zJ6ZZH8AtRr(MaIpVRVEbO0rjMBlfRMCQHxqjiwFaXgrDqupmfWW4cWq4ziw2RAgf2joRnaLdlta42LmLRqm2oi8mWl0gdX8HCb6lh0iFTUg0EsrxNqGxLl4VZqUQ7oedh6dGKmi7hPCednJtDm4CaMms)ZlzfLbk5RN3sM(WPj5rUMejO(iS3wLvi6faQ0HL130oWhOPCHPUCjU71Gzi3jMjAxzYIx5CLxYYwaHY4LPFTeByHb1W8nMEVOswYTjctkLQsxQx)862fdmNSVEQHUoDxdkK(glwDHlycdxVlUtEuTI7Ms(WfTvQ9sPOaPgpUH)vkcp9voQoJG3)sPiEYNx33V43gvsSbQ3evoscIY6XIBb9Szrm2xG6UFfzxLDa1Ktcu7C6KUwQXZk(nIFR43pbu)orXlSBJEzCKqZ0iveDVQqOxtis(6pQxqHCKno0Hy21w0FEYWLjNk(6bFAa2czrU01s1uu8sDrjeuSvMjimrWiy5aPdGW)Wz8xxjulho(nogpcJbQ3gHs2b2C9xRaYdizGf1B8O9TgEEcvCBsn8UBpOMpWMS47Kzxeg4hFN52nINExhRywedKkW)6N59rJS9POTT)p8U9L3DLnPj2OD9g2UUmlXDdpuIbpyHzF9h1Wi7FRR9Tx7dEF8iOYit)XV9RGls3UEukM79hPoB0JcDlcTPf)7gjz(9i7ez3EYZkyvror(rsStpIpxMKs25SHQfOCRcVkikBSCsYEeyZpx2mZ)G59UwSE7v38Urr7d2QC98WcILTnP(AUJDDBLqSL4jIB)mXcIKIDe)zVp9YTxWEznOYtzymv7ODBSa8d0u9ilBNUQ6iwUsNyC50)VU4i7RbhqAJ2IKPOMcS4AGj)2INbn3CQPB9qVtlX4WNo6k))dVX8vK7YUkpqFziOlkl6KPITZ77nB6zGnTM8s2dqV6zQB37E7SZkJ6A3DV396rrHslJQc70hQLSHmH)Wu8Q5H62oZo)IlQkNMQg0sZAqWOV8StEcgkAK6Pthru2fNTpr5bGuDalqdAm)(en7IlesuvvpQTCbjlxaJcjSKBd2XSpTpyHz2ffYqslpBIKBYwQ(CmuRRkHbOgVlXVDqsTdDFRHKfZoFOIuIriYZWPVoU08XaITCmjmMBpjDNfYUyx1cg(jUmo5i0MuhhSHnPptMp7sHmzDIn3cZa)274JQa5H)jQZwG8IElDdwiY4vaZ23Ia7uq2ROX(eEmVGzIu(C2qN5inx39rRni8SqMqk2g32a2EehkA4e3rAXfMlKGvHgpVtb8X4ydMzXh0hClEaHPd5FB1hDNFUEOltUhNiNMAWgK67ALjBex6vdcuPdD6smu4vEI6KLrpeBJ3h4JjG9La)(yBE7sMXJcyUhhobnQpjLI(FswSsYdz4TZlnt2mrwdTa92q(Nge0MY(WJHezISPRA3KWTUdMHw1aIWA1ognZMTpMV6XbmWVfhyZJtXc9PyD39TcmrB0ObXXhk42NS5ZgjoBzBIBHDwgvrvevcJ1AZIZVhmG3FWasCuYOEjIa0pqMyponZe5fYaVqIJ8GMKUH2Uhkj6PI)9EIpiPyJX0ouwp67gD91z7x1C(BnH4MVWpqxEk9nvzQyuh5XwtSeRNOt4rU1)eKfMjpP7HQTNy3oBmv5hEWShVnzPYJFW)9l)Fp
C90uHpAB,Who Died?,Unhalted,Lua,Thursday 2nd of May 2024 02:03:36 AM CDT,!WA:2!nI1xVTnYr8OQ2gaF9HyJw7d(qBzeqmIBLLLK)tCsR6Ds2YX6I)JkLSDcoFGCj5kX9m1s2DxzB5ETOqOfn4ER66Na9qVE3J6X(y(cucJ(CrH)iKVaxNDjLSvUeyBykU)z2zMDM53m7YeBovRPCMY5LpDqlFhSxf((uIWLD2EnAWXIeSornQ)Jds5q4bEOo1XNjmA4ZAHegnBtCmyyKxldkQfwNIpbZgy5ZCWS1998zFCYKjRMmBMvY3M5f8bUcra)jlU4POM(zi(lwo7YgTonptFXCmKTG4t5RQZfiM4Lt)6ME(NA0Gb81q0ja3B)DRuFt9I7u(vQzErSkg175X9674B0cZ5OMyxg0woPBxOb3Vn1XSNIyj70Rsod7PRgoiBfQaZAGSXhv0Xzpk)OdXOJl2MH4hTd2HGoQMKo(r75URFg)MndMnwiJzjIAxI6tX9vcYJqX837YiH6sSpg6Y)bbtoCXcb34eFInoX3HHs7zC7WzE1OfaAE(AfFblEGE2wiThiP9YyZf(31gtT7KyGQFKRWmQJhM2u4oFWmVPOgjNlBZXktMHT07fVUiptjUR)PxOSxg2Uikf7zTdId2nRgekH7o9LUehSbYZtXcUzjyyXCw2T5c)wPMyIEGBiQJBFqq1999eKa3UNck5Hmuq3dJB8UJ1qwwm8jeKa723bZrcWfbT7Y8fiPsMOudFQi4EBYiNR9BBJCGPrA1RxYZh58YzyeAtMF7GP1B1gK9e9K7xvqRRUThIZNZIdK4H13qF)kBeU2Qd2OCX6B9SDR80TQBg(RnzhwuF79w)zMLGaw80HRnXfkBMKR1iNJD19a25nBQCRuId9Nl8xPhaXZDcx7GW1n7YTXueJ4BMxGPM9fNIPIoniNGnTIABYeiWrjYl5DxjVLSXLHA0acy5YrTIOq2KDoeRvXH)9kXdW2YruBjKNKJxQufd)amyf8zZM63uOVdb4JnS57aeFGfvAB9m7boupz4bOgUygerAoqqAHpf5DmypmTA1rg(AkHisZSs0rAXskHgCsWvkLsfuYw5NHyPwwiH5fekaTP2rrXaHRoP59n)5GL03tzj7YJcEXjVG7IC8pDeOMHBcsToSSsciKWYqGS8Wt5WK9AZWblCfaU6bv3uM04Ok2q6ez3fkjJwzluUfSOwlSw(G5U54lJwOZMKPskACEI(cFBikHdAX7N4VsZd0o4f4I7xD1sn9Q)8(sFJZHehH7F(hbHccjWNT3(13UYULVmcewczFSdZpi4EL8iNFoI5OfJaSKPdRSrVrzdJ3(dZWfRfNLi4ErWhPAVFGdOLwTvVUe1gggqa2kDOurOBxbJ0SjOZ7ohlU5lNTp4bSp2GqB4RBdqzrxhjcc2wtTupvkh5uLqWGV2PdmaXEJycCVK32cCQurvgg2V61QwE7TdMufIcbFeiUYOnG4nhePLgY0b6YWiNO1XVC9TlV)tK5Xn2Os5ngXWATLb3dmwVyT6g1QxuVoaUTGbLEC2wL3U6M7VDxqiEEqS(eLKXpHPvXwUqXhHR7qrkNzaShf4idZfnXGJGyxdYDTh9vC1RIqm8j4lawdGrrehMDQS6kDXAlv)sYDILc5MJ1MQMQK0k3pss7c2QZs8dB0MQaepC(j0G)in0KModm9KmsRP2FSGgL4PbcHQiq(NNVnYtZiTMkJJwbnzj31LTF4ylE(rRayBeTJXNR4LkznWi9Iv2Wy9TlwRMX67T9E61(e1Y(0mkcQjyJTwggGouTuFUDQmruKjZykqMmP(CwQrRbtDMy4B5Zv)fM(Se)3rMcEAL1kTM01NwBOtoTClF9)LaU0AsbLwltMmrB3HMXHRsRqbTuJIysPHOoACbdQ448WigKQkaKXSuZRMJ6lu2Zk8nXKM0nWiH7dvwZXnEJAW)KuP(uW297hZ2ixrbLQn2Wsjwqj2XgwgwvqWA)gulRs2e78wMrgiTfGoEltnepwyPXhhFwajAM6GzTWtHZKbVF48A)sT3GsgI4SdIDmSPg28kc(dFxlqCCGuvgFYHoCP3wvjsHU1TDX2hh(3Iq(JbImdMES(xR0tHc6sZjhkoqJZgnx4FYm8ld)7dGKXFMk45eCEeTtWKiv76rKTdK8l5RjY87uK3brjH)sgY5ezTe3EikPLYUSA4ehe(fHZ0fJGdxitrmZRKnH4E1bFU7fdTTQ0emogkq4WTcyyilBjOe(PLAHi0x(tSuOb9KwCaDHplzpKxGlsYYUqShI00versPKrVFAmjBcBJGdL2SrOHaMFtqaCaiipxBAnivUaneBhB7vtbEYruR9lUoDroI4k7GyCLBZW)b88pd)6ErLybTWvxnBIiDQyYP6KONQPYyK2sDijCIWVPVIUQT944icK69zF)AJuAwoaEcpwWdcEy5H(WJf8GYFnKAC(NVtISubXGYRrfddOvy3HPaJ8AJHfKlDU0zhd3hZka0RGUApJkT2Pgh8(w4u2mp6rPZMjxE4N8lDTO7idiSthN5maeFZCnxMSzbgU8JHFYU8nWZTAlJrVnQ6QsvDTLKCELBGP7aNt)2WYLZjzPuzF8nPN74tp(wWY05xzL05wj7nWTQipKdHEB0XhVkOEatbF1s3exzemxClDqJ(5gyQUFZ24BTtxPTlN7g4znxul0TA3RcKww6LE0nWZdrmaXCB8rzwznPjv67F0J1EBr9VdSICzRkx2YawzHf0arcxkHLwl6WWcmuL1tI886OjVYagsHkYmEvHRL)6nfsATCXhri8RUBuw0ojN6SeHZFWOuxF1DLzVc)glUlCTSJdMekdyd8dBm6YCS4JCNSpCCaD1Da4ZoD4xCb01cohR8wxuh4glsnDRpAPVE6V9B)2)s4)Y8cR4dBp(hHOR8YHYBPv0cUhluOYI0kWNjc(G3Y9bU6wX6QnqsROZX72p6DzNM4s7cx)I9zWjcjn6yTE5DRxwpEAPyUF)OtUhazYcEW66Wvj3xV8I1QwrVs9TkxC7Y6lwdkRteYdDIzzALVhCffQJSMNEPTlV7gXFmLkuOe1mwTimgKNhsWtBqAorpo2RrvFO2y4)o4N(UUtJkdF4t0pvE1GT(Oxqx6o35op3IJBbMxDiApt2GF27AXXFsdz7ueNEh66RTbb78HX3jPtIbQVqduJfUODYxdLKDHYjYHuLl3Vs1I6GzrxPeF8wF4)7E3tde)Ogjto4AIEWdKccI4Wo3FqeVI3EVkYoeDJO3Bq0fKI8UjsKizFzPCI6dinXa5vyyrNjyUbqtBCz11pmdEF4iH(m8EbkkvJwwAr5MxahjdKw8mtmf3AfOysMhp1j)NN)))d
1XaRSngE,Targeted Spells,Unhalted,Lua,Thursday 2nd of May 2024 02:03:25 AM CDT,!WA:2!TMrxZTTXXqZ2Mg6(GTsQSDAQdSARezImJLCSMgnXPvuFyZgzjfqk7K46H8aWrcybcGChG(WzCMjQPP5zL)b8NaFQp7370RQPzY0hv)h4FbD37aije)W2DQ8yWd7T7E7TFDlUnZDNGBCJIZnFX3BIwtynH138(LAY83R9T3uV8NU5gvxA9og(mlkBzFxF2FitMmzprbOeXChlMFqW5k568OhrywAv99DdDcm2J00V8kh9jx9wFy5h(zBCVJjrH2(SndcD8945ocwHOGYM(Ex8m)OWdBYCSQEqaDk9voIWmxN61m0(RMm4CCBcJATgJ0IUoDxQRD7grUUl7WmDP115betA25JyUbA2HHb8fFN3bx4Io(VtvcRjnKAvjG66YFNBe8QMr8q)wl5zcYXwu22EoHN5WqMtZMug)1NMfp8RBBrnIA0aLh2TxD9TwB71lfcVOtIyK5pKJmSSfp3j8idqM8cRay7SFNAlVuLQ1QuDj9QDNAlgfMsVYwRU(66EWUGNtxoHXTPe3q7srGuye4soGYokYlweY1X03nQLxf5(ZGrSCI4F1p7iINtlcQaxqNhsyHRjUqjpFp6tOeoTsitQ2E5JTa5eXQgk1mof0Yw8drCW9KiFPwehpGwrErHxw8wI3wmRiVrdhphU9PbRtCDA6zS8QBuDvD2bB2ObNgUv2RvCUoeLM03XluCTonqBeidKqswgiD4(idBxy9bj5STbfIoTP02hCUionLzOoJyk9lwqmtUsGCeMtumxjxFIvJJaKRz6s4CBJqIlO6MuVve4JLJ9iyRdgIZucmjMtkUzoDjE4OsCNhrXbpfKokZJ4ExLK8ThBe70Q8MZMnlUBUXHWYSUtlNqBdUFeZKA40kWNfEiejOmd6Cty5Z22KICu6TUUUHkqWUT63vTAsdoFLplc8A1wd8u1UNTti9iEinyjVMU03mgXkG49JlXHfa08G9PHtZCht6xNC02BuU6A6lDNvbriuApZagJaBs2tacanSx4AGAZNzOV0kL3UY8rowDOhSXhV7s3Q1AvV2tuRKYI9kgCAlWyOpxX5koF7qFZylZfZ8x8MYX6PjHlAQ4fDxuxC2JWaZ75yfAF2NQKozOiU5nQSS(QRUbB)(DjulzzpaqwMYBLA3Mjn8irpX6aiiWXug9FeN62i29Pn6J6OYn0XXRHpt5OpDhyOjDvmKHxp4IGVOpJgNfrcDvgZNXR)uuxE7dmWejedx6KNKEhzpH5R)nfB7aRtfP99nEjXll(PcJmTv5fQs3pmOAJipPNy(AZ27FGU2ChEHCAWFon0uVQr8Ssg(bAZPfAt90y0WiMxcyQNvo4)I5YiMxCTJnHuJw(75vzpNaADX5eNVeko1fV6F9NCMPfV23lUGHsw6O(rg)2bywinkWcE(uf87syo4EKVFMf(CPuLeXRDtTqweDwjq6(bokWvDArtnvSa2piVaZYwaefdLm1HJjMaytTrGPw5vMA2UZHsgoHxuldklEIhhZCvcYrXlP545KvYGxweyUHT7Oyy5(rAim2a07jSv(m3JfVPqtCfXuIxx8leVH4xQswZdoFv9Y36wRQV48lE9fF3fVXIliUmKvXMAUdqYLYj47pXFRRpcX1TcAC4ZQjPFwT483Be1Q7yfgDDEKiQDtqS2CRQL3CJktj9C6k0U(qwgTwK9bjhcbSlcHrw(TYF9cADXbcj0CG5NBwjIw(DNPhh6ZJOF2m3nkKc5UBH7h6Zbj2RzENcpiLMo5p8KkuDQoSQp9CYFDDQ6FbxOWGi2NSLmCqKgW79w0qCu(cAV9yidJOqvZ1NF(5MFWPdy(nzuoVASVriWrRHSxGQv8VTJv6OMuBwB)9g5KM2eVMuRHo)J7zhX8djJJZCG4RcED5uWDPNdf6Z454Qb2(7rj7SeOb4flZJtfUza1d0mPCLuSmx)Ruo1EJrQr92TysTpGCoimyD(8hpC8VFpPcDvw2p4azo38dXLx(4Qxf8j2HQr0AakFBTqeBn)gA7ztc75dIk1ixlndLkq5i7hfgeHoEXsd68pYWmiHHwaXHXZpGqxO)4eKj7qpin19io9(40byx9Q3f8mBUcDxSy3AlzzTcu0tkIMf8S671fNQyXEYCXItHloce(PWqcEvvGSTkGRFgvS3mdlMNYdhgrjWh2k1nxD6Lrbofb4jF9Kl80VHYxCI8i0YEBbLOEq(eSkGUuQj0jowdbohF2f(SDt1uOWGRqx7RQ4PInyoGtU7biZ88dJz4AsO57MZQVDWWyks4PzSQIJkqPkPzTuwFoyCQqYHzMV12Lxb0)iP4W89XPrqhQHonvD1MdMrSr)luIDt(YqLTbCoMpuwj1hsXtBJHvSyctgh9YOQBghcF)by3dgkTG8IAzfXJuc7TkjfUavtsndZVaylczqXbG5zMRoZS9V5bd4mZuOWiz4if0HEG4qoCSRV7yrwjryA3p)(9KUheFCXJFgeNCk7Cpd86gzhpA8OhFUzQSaiSXtvQ6o7pJZipFEShXNIhPND8CYKWdJpspfpsG)m27NQkZ0kH(NC88jXtm0xvlBEjaz(TRnEkFEll5fQeLN7Yv6wAYqNbRezKK0FWA8Ht8u(0Yplco)NVJtaIn8U0APThHRbLjz5c1j1G53cYmP5dZ2909NvuWiwWB2RgQNbXjbsPE9T1MB8(kngNxQ27hZTtbESPXslwVibfpNS8zfLo(GupRCVOZnm4Ngw)VNmo53ruHLk9muxGAq6QQkmok77l1MQ74HtVsNXLU1qbHXLFUNJRluxkutDl)DPDleDNz12TVAot4CQsg3TylcBN18z6sA73bT3(vt9b(9jDtbRzOTgaLOIpI31qTg7qPbWxQb8bCzvLr7yANi42elmwsXW(kKM4DWYYVlbKGgKKGACxmW5DZgVTpvzXkGP2C9((XHEO5yNU3xymyjdJJWCP9UpT2f)ijqHA57ntyS9c(WdfJ3dZg5eodhlaxZHRSWWM6uIrVpGRNMkrB1WH6Ab2DIB0a6gPmpWhma5mKeP9fqQDvUQP6MyuvFzCnbk8gAjCiNVVC6hG8rT8JmVsk0JXEOiM(tv)FkQnwct40aYKYmnMfQFpZutoyEbnB8eVyp9woCoghagHPKwXPEHcmbz(0XMdi77wm(KZ0(bQP()Zw65pHLgPri(5qJLWKfgjmzCmjX3XqxWYlN8NlMu8RYPU(rXvIVTDFpADwKN8YQkHfACyYzftmxWKio(EBltWGv7QUP164fPjVqTlLtC5C4fQxdllUU4nlTmCIpWCSbiWxmfsvR6KIRi(tjRCWeibedUpt2BK74BrRFspyY3pUj1JYCmRagLn9oHl)z547vvCfdvsIJza9YRzCdybZCmYeEYR1pQ7WmI3uCyW5XPtX36IVSUuritWwVNkAxuqfFfoVe4FUoYbXv0B4BgXhpoLm85pdu0jmQhbWPJLd)HYBzCx68G5k48e54QQtRqvrwrPV9KKYgv3O9B9gV0zetVGyMt3dhXvhasXtdPn8PlKq0itTf34SIfwCsXfoMhzGTlbVUEpRgIlCecqEh)Xx1FnSplzJB1qnZt3GWA76WX6MRNGo1QjvS(XXV5lBDqMV5Ybtes3pSgho7YFVpw1rHmbxscu(q1qGA84bI8h1DUP(nMdbZG4b6YsPd(1dbbCMAU0MeZdQ1W13NzFIsksAlrNsBwT6M3rV8TUD1GxvohglGDMWu2uKslbV(ufxD2NQ6uYxg3hNKTr8RFs8RprI(dJ4HonoqxY72Yg8qXoquAJn3y1aTrjTT8TQHMO6bxEqDJSa2UkOHGrmtuVLrCbgynX5J1(Pe7xPTeMzstYYEumN8cdo3AmNhP9rrelSBFAvRMIbXB0zFPug10B)e3IJLVTh4nCpgj4W7fp44URLSjSBUD11ldQLZ13QinqbNV8gBSQET(TtNRVfTxdRdUYO0gbmQPd2jSS9wvS7CxkOWOijUjw1cTXBZes(CWqCan7AjmSPonTdxsS4xl(GZG3Xo29RjnWZUCP6QEHHPBW8TmBX7J9TSdcig16IFpcs87KpxcFQ6HQf6grTOw3HSVTyvXA69SxcNPfp0wSJ9Pr1XZwqfSoXDqjPh8pfRQCjStQH6yMEBXR8wqIkJq)MGucHRnirydRH8eMbxetuk)ooowOfvZ4anPOopux1Hj3fhdw4va0Rxct8FSKM1INtFpmwjlMk8Vle1f)JGxBfzfBYZBHS5kUl(NT7DbCI)vDX33PSQGjjGFiR4ED29D)0nB2WPCZpkqunR4hwsC9SLEKVFRmIVOU4pg3HtrlXNkUV8uMKdmG8O6Y8D1fKGxlP9Cyy4koC8kQTQl2AAX)UU47SbZg2XuQ9tsWd71RT43c5BxGz5xRPR)E2c(zocgRAtNT49Mgai(p2IItdppbRDPgCAUexEDHDUdtywDrtX1My3V7J)V)
0ZyePUSy,Move State,LeeMace,C#,Thursday 2nd of May 2024 02:03:22 AM CDT,"public class CharacterMoveState : BaseCharacterState {
    public CharacterMoveState(CharacterBehaviour stateMachine) : base(stateMachine) {
    }

    public override void UpdateState() {
        base.UpdateState();
        Debug.Log(""CharacterMoveState hello from MoveState"");
        if (characterBehaviour.moveInput.magnitude == 0) {
            ExitState(new CharacterIdleState(characterBehaviour));
        }

            Vector3 vector3 = new Vector3(characterBehaviour.moveInput.x, 0, characterBehaviour.moveInput.y);
        characterBehaviour.transform.position += vector3 * Time.deltaTime;

    }
}"
