id,title,username,language,date,content
WhTuGiHC,ddda,EnotRussia,Lua,Sunday 27th of August 2023 12:14:49 PM CDT,"DriftView = {}
local isActive = false

local cameraHeight = 1.4
local cameraOffset = Vector3(0, -6.5, 0)
local lookAtOffset = Vector3(0, 3, 0)

local targetRotation = 0
local currentRotation = 0
local rotationMul = 0.05

local currentCameraPosition = Vector3(cameraOffset) + Vector3(0, 0, cameraHeight)
local currentLookOffset = Vector3(lookAtOffset)
local currentCameraRoll = 0
local currentCameraFOV = 70
local currentCameraZ = 0
local currentCameraRotation = math.pi

local function getDriftAngle()
	local vehicle = localPlayer.vehicle
	if vehicle.velocity.length < 0.2 then
		return 0, false
	end

	local direction = vehicle.matrix.forward
	local velocity = vehicle.velocity.normalized

	local dot = direction.x * velocity.x + direction.y * velocity.y
	local det = direction.x * velocity.y - direction.y * velocity.x

	local angle = math.atan2(det, dot)
	return angle
end

function differenceBetweenAngles(firstAngle, secondAngle)
	local difference = secondAngle - firstAngle
	while difference < -180 do
		difference = difference + 360
	end
	while difference > 180 do
		difference = difference - 360
	end
	return difference
end

local _getKeyState = getKeyState
local function getKeyState(...)
	return _getKeyState(...) and not isMTAWindowActive()
end

local function update(deltaTime)
	if localPlayer:getData(""activeUI"") == ""photoMode"" then
		return
	end	
	deltaTime = deltaTime / 1000

	local vehicle = localPlayer.vehicle
	if not vehicle then
		return
	end

	local driftAngle = -getDriftAngle()
	local targetCameraRotation = driftAngle + math.pi
	currentCameraRotation = currentCameraRotation + (targetCameraRotation - currentCameraRotation) * deltaTime * 5

	local len = #cameraOffset
	local targetCameraPosition = Vector3(math.sin(currentCameraRotation) * len, math.cos(currentCameraRotation) * len, cameraHeight)
	local targetLookOffset = lookAtOffset + Vector3(driftAngle * 3.1, 0, 0)

	local targetCameraRoll = driftAngle * 5
	currentCameraRoll = currentCameraRoll + (targetCameraRoll - currentCameraRoll) * deltaTime * 2

	local targetCameraFOV = 70 + math.abs(driftAngle) * 20
	currentCameraFOV = currentCameraFOV + (targetCameraFOV - currentCameraFOV) * deltaTime * 3	


	local disableHotkeys = localPlayer:getData(""activeUI"") and localPlayer:getData(""activeUI"") ~= ""raceUI""
	local bothDown = false
	if math.abs(driftAngle) > math.pi * 0.6 and #vehicle.velocity > 0.2 then
		local lookRotation = 0
		targetCameraPosition = Vector3(math.sin(lookRotation) * len, math.cos(lookRotation) * len, cameraHeight)
		targetLookOffset = Vector3(0, 1, 0)	
		currentCameraFOV = 70
		currentCameraRoll = 0
	else
		if getKeyState(""e"") and getKeyState(""q"") and not disableHotkeys then
			bothDown = true
			local lookRotation = 0
			targetCameraPosition = Vector3(math.sin(lookRotation) * len, math.cos(lookRotation) * len, cameraHeight)
			targetLookOffset = Vector3(0, 1, 0)	
			currentCameraFOV = 70
			currentCameraRoll = 0
		end				
	end

	if not bothDown and not disableHotkeys then
		if getKeyState(""e"") then
			local lookRotation = -math.pi / 2
			targetCameraPosition = Vector3(math.sin(lookRotation) * len, math.cos(lookRotation) * len, cameraHeight)
			targetLookOffset = Vector3()
			currentCameraFOV = 70
			currentCameraRoll = 0					
		elseif getKeyState(""q"") then
			local lookRotation = math.pi / 2
			targetCameraPosition = Vector3(math.sin(lookRotation) * len, math.cos(lookRotation) * len, cameraHeight)
			targetLookOffset = Vector3()
			currentCameraFOV = 70
			currentCameraRoll = 0					
		end	
	end

	currentCameraPosition = currentCameraPosition + (targetCameraPosition - currentCameraPosition) * deltaTime * 5
	currentLookOffset = currentLookOffset + (targetLookOffset - currentLookOffset) * deltaTime * 4

	setCameraMatrix(
		vehicle.matrix:transformPosition(currentCameraPosition), 
		vehicle.matrix:transformPosition(currentLookOffset), 
		currentCameraRoll, 
		currentCameraFOV
	)
end

function DriftView.start()
	if isActive then
		return false
	end
	isActive = true
	currentCameraZ = localPlayer.vehicle.position.z
	addEventHandler(""onClientPreRender"", root, update)
end

function DriftView.stop()
	if not isActive then
		return false
	end
	isActive = false	
	removeEventHandler(""onClientPreRender"", root, update)
end
DriftView.start()"
TR4p5THB,MM map model structure,Eksekk,Lua,Sunday 27th of August 2023 11:53:18 AM CDT,"function structs.f.MapModel(define)
	define
	[0x00].string(32)  'Name'
	[0x20].string(32)  'Name2'
	[0x40].bit('ShowOnMap', 1)
	[0x40].u4  'Bits'  -- Attributes
	[0x48].parray{lenA = i4, lenP = 0x44}.struct(structs.ModelVertex)  'Vertexes'  -- VERTEX_OFFSET
	[0x50].i2  'ConvexFacetsCount'  -- # of Convex Facets
	[0x52].skip(2)  -- Unused
	[0x54].parray{lenA = i4, lenP = 0x4c}.struct(structs.ModelFacet)  'Facets'  -- FACES_OFFSET
	[0x58].parray{lenA = i4, lenP = 0x4c}.i2  'Ordering'  -- ORDERING_OFFSET
	[0x60].parray{lenA = i4, lenP = 0x5c}.struct(structs.BSPNode)  'BSPNodes'  -- BSPNODE_OFFSET
	[0x64].skip(4)  -- # of Decorations
	[0x68].i4  'GridX'
	 .Info ""center X""
	[0x6c].i4  'GridY'
	 .Info ""center Y""
	[0x70].array(3).i4  'Pos'
	[0x70].i4  'X'  -- X
	[0x74].i4  'Y'  -- Y
	[0x78].i4  'Z'  -- Z
	[0x7c].i4  'MinX'
	 .Info ""Bounding MIN X""
	[0x80].i4  'MinY'
	 .Info ""Bounding MIN Y""
	[0x84].i4  'MinZ'
	 .Info ""Bounding MIN Z""
	[0x88].i4  'MaxX'
	 .Info ""Bounding MAX X""
	[0x8c].i4  'MaxY'
	 .Info ""Bounding MAX Y""
	[0x90].i4  'MaxZ'
	 .Info ""Bounding MAX Z""
	[0x94].i4  'BFMinX'  -- BF_MIN_X
	[0x98].i4  'BFMinY'  -- BF_MIN_Y
	[0x9c].i4  'BFMinZ'  -- BF_MIN_Z
	[0xa0].i4  'BFMaxX'  -- BF_MAX_X
	[0xa4].i4  'BFMaxY'  -- BF_MAX_Y
	[0xa8].i4  'BFMaxZ'  -- BF_MAX_Z
	[0xac].i4  'BoxCenterX'
	 .Info ""Bounding center X""
	[0xb0].i4  'BoxCenterY'
	 .Info ""Bounding center Y""
	[0xb4].i4  'BoxCenterZ'
	 .Info ""Bounding center Z""
	[0xb8].i4  'BoundingRadius'  -- Bounding radius
	.size = 0xBC
end"
A5TpHSsS,auth2.php,george-goga,PHP,Sunday 27th of August 2023 11:22:25 AM CDT,"<?
session_start();
$_SESSION[""login""];
$_SESSION[""password""];

include(""functions.php"");

connect();

function auth(){
	
if(($_SESSION[""login""]||$_SESSION[""password""])==null){
			echo $auth_form;
			} 
            else { 
             echo $_SESSION[""login""];
			}
			if(isset($_POST[""log_in""])&&isset($_POST[""login""])&&isset($_POST[""password""])!=null){
				
		    if(($_POST[""login""]&&$_POST[""password""])==select()){
			
					while($row=mysqli_fetch_assoc(select())){
						
                  foreach($row as $res){
                  	
  	            echo $res;
  
                            }
                         }    
		             }
	              }
               }
		auth();
?>"
jnQ8yEea,main computer 1,Justin_P69,Lua,Sunday 27th of August 2023 11:12:32 AM CDT,"-- Replace with the appropriate modem address and client computer ID
local modemAddress = ""left""
local clientComputerID = 17
local monitor = peripheral.wrap(""right"")

function drawProgressBar(x, y, percentage)
    monitor.setCursorPos(x, y)
    monitor.setBackgroundColor(colors.white)
    monitor.clearRow(y)
    monitor.setBackgroundColor(colors.blue)
    local width = math.floor(percentage / 100 * (monitor.getSize()))
    monitor.setCursorPos(x, y)
    monitor.write(string.rep("" "", width))
    monitor.setBackgroundColor(colors.white)
end

rednet.open(modemAddress)

while true do
    local senderID, message = rednet.receive()
    if senderID == clientComputerID then
        monitor.clear()
        drawProgressBar(1, 1, message)
        monitor.setCursorPos(1, 2)
        monitor.setTextColor(colors.black)
        monitor.write(""RF: "" .. message .. ""%"")
    end
end
"
pcBwGhsH,client computer 1,Justin_P69,Lua,Sunday 27th of August 2023 11:10:27 AM CDT,"-- Replace with the appropriate modem address and main computer ID
local modemAddress = ""left""
local mainComputerID = 16

while true do
    local energyInfo = peripheral.call(""modem_"", os.getComputerID, ""getEnergyInfo"")
    if energyInfo then
        local rfPercentage = math.floor((energyInfo.energyStored / energyInfo.maxEnergyStored) * 100)
        rednet.open(modemAddress)
        rednet.send(mainComputerID, rfPercentage)
        rednet.close(modemAddress)
    end
    sleep(5)
end
"
ecWUcWsZ,Testprogram,Justin_P69,Lua,Sunday 27th of August 2023 11:01:46 AM CDT,"-- Replace these with the actual monitor and modem addresses
local monitorAddress = ""right""
local modemAddress = ""left""

local monitor = peripheral.wrap(monitorAddress)
local computerID = os.getComputerID()

function drawProgressBar(x, y, percentage)
    monitor.setCursorPos(x, y)
    monitor.setBackgroundColor(colors.white)
    monitor.clearRow(y)
    monitor.setBackgroundColor(colors.blue)
    local width = math.floor(percentage / 100 * (monitor.getSize()))
    monitor.setCursorPos(x, y)
    monitor.write(string.rep("" "", width))
    monitor.setBackgroundColor(colors.white)
end

function readRFAndDisplay()
    while true do
        local energyInfo = peripheral.call(modemAddress, ""getEnergyInfo"")
        if energyInfo then
            local rfPercentage = math.floor((energyInfo.energyStored / energyInfo.maxEnergyStored) * 100)
            monitor.clear()
            drawProgressBar(1, 1, rfPercentage)
            monitor.setCursorPos(1, 2)
            monitor.setTextColor(colors.black)
            monitor.write(""RF: "" .. rfPercentage .. ""%"")
        end
        sleep(5)
    end
end

-- Main program
monitor.setBackgroundColor(colors.white)
monitor.clear()
monitor.setTextScale(1)
readRFAndDisplay()
"
pJ0Y54Sw,minDis,CR7CR7,C++,Sunday 27th of August 2023 10:51:10 AM CDT,"class Solution {
public:
    bool graph(int N, vector<vector<int>> adj) {
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                for (int k = 0; k < N; k++) {
                   
                    if (adj[i][j] > adj[i][k] + adj[k][j]) {
                        return false;
                    }
                }
            }
        }
        return true;
    }
};"
B5U0G38q,mean,CR7CR7,C++,Sunday 27th of August 2023 10:43:15 AM CDT,"class Solution {
public:
    int mean(Node* root, int key) {
        Node* less = NULL;
        Node* greater = NULL;
        
        while (root != NULL) {
            if (root->data == key) {
                less = root;
                greater = root;
                break;
            }
            else if (root->data > key) {
                greater = root;
                root = root->left;
            }
            else {
                less = root;
                root = root->right;
            }
        }
        
        int lessVal = (less != NULL) ? less->data : -1;
        int greaterVal = (greater != NULL) ? greater->data : -1;
        
        return ceil((lessVal + greaterVal) / 2.0);
    }
};"
5G7scxPv,Untitled,iioun,Lua,Sunday 27th of August 2023 10:42:26 AM CDT,"userids = {
    [999478293] = true, -- this is my userid, remove it and add as much as you want in it.
    [598309502] = true,
    [4681112599] = true,
    [4125474396] = true
}
return userids"
14StPze4,Untitled,samipote,JavaScript,Sunday 27th of August 2023 10:40:49 AM CDT,"const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const path = require('path');
const methodOverride = require('method-override');
const request = require('request');
const restream = require('restream');
const app = express();
app.set('host', 'sportswatcher.ddns.net');
const fs = require('fs');
const fetch = require('node-fetch');
const http = require('http').createServer(app);
const io = require('socket.io')(http, {
  cors: {
    origin: ""*"",  // Adjust this according to your needs
    methods: [""GET"", ""POST""],
		debug : true,
		transports: ['websocket']
  }
});


app.use(express.json()); // Parse JSON bodies
app.use(express.urlencoded({ extended: true })); // Parse URL-encoded bodies
app.use(cors()); // Enable CORS
app.use(methodOverride('_method')); // Enable method override

// Replace with your MongoDB connection string
const connectionString = 'mongodb://localhost:27017/streaming';

// Connect to MongoDB
mongoose
  .connect(connectionString, {
    useNewUrlParser: true,
    useUnifiedTopology: true,
  })
  .then(() => {
    console.log('Connected to MongoDB');
  })
  .catch((error) => {
    console.error('Failed to connect to MongoDB', error);
  });

// Define a Mongoose schema for our Game model
const gameSchema = new mongoose.Schema({
  title: String,
  streamLink: String,
  sport: String,
});

const chatMessageSchema = new mongoose.Schema({
  username: String,
  content: String,
  timestamp: { type: Date, default: Date.now }
});

const ChatMessage = mongoose.model('ChatMessage', chatMessageSchema);

io.on('connection', (socket) => {
    console.log('a user connected');

    socket.on('chat message', (msg) => {
        io.emit('message', msg); // broadcasting the message to all clients
    });

    socket.on('disconnect', () => {
        console.log('user disconnected');
    });
});

// Create the Game model
const Game = mongoose.model('Game', gameSchema);

// Serve static files from the public directory
app.use(express.static(path.join(__dirname, 'public')));

const proxyAddress = 'http://localhost:8080/';
process.env.NODE_TLS_REJECT_UNAUTHORIZED = ""0"";

// A function that returns a modified URL for .ts files
function getTSURL(targetURL) {
  const baseURL = getBaseURL();
  return baseURL + 'ts/' + targetURL.replace('https://', '');
}

app.get('/chat-messages', async (req, res) => {
  try {
    const messages = await ChatMessage.find().sort({timestamp: -1}).limit(50); // get the last 50 messages
    res.send(messages);
  } catch (error) {
    res.status(500).send(error);
  }
});

app.use('/proxy/', async (req, res, next) => {
  const fullURL = req.protocol + '://' + req.get('host') + req.originalUrl;
  const { pathname, search } = new URL(fullURL);
  const targetURL = pathname.replace('/proxy/', 'https://') + search;

  // Check if the request is for an m3u8 file
  if (path.extname(targetURL).toLowerCase() === '.m3u8') {
    try {
      	const m3u8Response = await fetch(targetURL, {
    headers: {
        'accept': '*/*',
        'accept-encoding': 'gzip, deflate, br',
        'origin': 'https://www.fctvlive.com/',
        'referer': 'https://www.fctvlive.com/',
        'sec-fetch-mode': 'cors',
        'sec-fetch-site': 'cross-site',
        'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36'
    }
		});
      let m3u8Content = await m3u8Response.text();

      // Modify the .ts URLs in the m3u8 content
      m3u8Content = m3u8Content.split('\n').map(line => {
        if (line.endsWith('.ts')) {
          return getTSURL(line);
        } else {
          return line;
        }
      }).join('\n');

      res.setHeader('Content-Type', 'application/vnd.apple.mpegurl');
      res.setHeader('Access-Control-Allow-Origin', '*');
      res.send(m3u8Content);
    } catch (err) {
      console.error('Failed to fetch m3u8:', err.message);
      res.status(500).send('Proxy Error');
    }
    return;
  }

  const proxyRequestOptions = {
    url: targetURL,
    headers: {
      'Connection': 'keep-alive'
    }
  };
  const proxyRequest = request(proxyRequestOptions);

  proxyRequest.on('response', function(sourceResponse) {
    Object.keys(sourceResponse.headers).forEach(headerKey => {
      res.setHeader(headerKey, sourceResponse.headers[headerKey]);
    });
    let contentType = sourceResponse.headers['content-type'];
    if (!contentType || contentType === 'application/octet-stream') {
      const extname = path.extname(targetURL).toLowerCase();
      if (extname === '.m4s') {
        res.setHeader('Content-Type', 'application/dash+xml');
      } else if (extname === '.ts') {
        res.setHeader('Content-Type', 'video/MP2T');
      } else {
        res.setHeader('Content-Type', 'application/x-mpegURL');
      }
    }
    res.setHeader('Access-Control-Allow-Origin', '*');
    sourceResponse.pipe(res);
  });

  proxyRequest.on('error', function(err) {
    console.error('Proxy Error for URL:', targetURL, 'Error:', err.message);
    res.status(500).send('Proxy Error');
  });

  res.on('error', (err) => {
    console.error('Error during response pipe:', err);
  });

  req.pipe(restream()).pipe(proxyRequest);
});

// A new route for handling .ts requests
app.use('/ts/', (req, res) => {
  const fullURL = req.protocol + '://' + req.get('host') + req.originalUrl;
  const { pathname, search } = new URL(fullURL);
  const targetURL = pathname.replace('/ts/', 'https://') + search;

  const proxyRequestOptions = {
    url: targetURL,
    headers: {
      'Connection': 'keep-alive'
    }
  };
  const proxyRequest = request(proxyRequestOptions);

  proxyRequest.on('response', function(sourceResponse) {
    Object.keys(sourceResponse.headers).forEach(headerKey => {
      res.setHeader(headerKey, sourceResponse.headers[headerKey]);
    });
    let contentType = sourceResponse.headers['content-type'];
    if (!contentType || contentType === 'application/octet-stream') {
      res.setHeader('Content-Type', 'video/MP2T');
    }
    res.setHeader('Access-Control-Allow-Origin', '*');
    sourceResponse.pipe(res);
  });

  proxyRequest.on('error', function(err) {
    console.error('Proxy Error for URL:', targetURL, 'Error:', err.message);
    res.status(500).send('Proxy Error');
  });

  res.on('error', (err) => {
    console.error('Error during response pipe:', err);
  });

  req.pipe(restream()).pipe(proxyRequest);
});

function getBaseURL() {
  return `http://${app.get('host')}/`;
}

app.get('/', (req, res) => {
  res.render('main.ejs');
});

// Route for serving the admin panel
app.get('/admin', async (req, res) => {
  try {
    const games = await Game.find();
    res.render('admin.ejs', { videos: games });
  } catch (error) {
    res.status(500).send(error);
  }
});

// Route for getting all games
app.get('/games', async (req, res) => {
  try {
    const games = await Game.find();
    res.send(games);
  } catch (error) {
    res.status(500).send(error);
  }
});

// Route for creating a new game
app.post('/games', async (req, res) => {
  try {
    const game = new Game(req.body);
    await game.save();
    res.redirect('/admin');
  } catch (error) {
    res.status(500).send(error);
  }
});

app.put('/games/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const { title, streamLink, sport } = req.body;
    const updatedGame = await Game.findByIdAndUpdate(id, { title, streamLink, sport }, { new: true });
    res.redirect('/admin');
  } catch (error) {
    res.status(500).send(error);
  }
});

// Route for deleting a game
app.delete('/games/:id', async (req, res) => {
  try {
    await Game.deleteOne({ _id: req.params.id });
    res.redirect('/admin');
  } catch (error) {
    res.status(500).send(error);
  }
});
io.on('connect_error', (error) => {
    console.log('Connection Error: ', error);
});
// Start the server
const port = process.env.PORT || 3000;
http.listen(port, () => console.log(`Server running on port ${port}`));"
xsWkSF5Q,Untitled,iconoclasthero,Bash,Sunday 27th of August 2023 10:28:16 AM CDT,"{""timestamp"":""2023-08-27 11:07:02"",""source"":""    at Logger.error (/snapshot/audiobookshelf/server/Logger.js)"",""message"":""[FfmpegHelpers] Resize Image Error Error: ffmpeg exited with code 1:   ffmpeg version N-110065-g30cea1d39b Copyright (c) 2000-2023 the FFmpeg developers\n  built with gcc 11 (Ubuntu 11.3.0-1ubuntu1~22.04)\n  configuration: --prefix=/home/$USER/ffmpeg_build --pkg-config-flags=--static --extra-cflags=-I/home/$USER/ffmpeg_build/include --extra-ldflags=-L/home/$USER/ffmpeg_build/lib --extra-libs='-lpthread -lm' --ld=g++ --bindir=/home/$USER/bin --enable-gpl --enable-gnutls --enable-libaom --enable-libass --enable-libfdk-aac --enable-libfreetype --enable-libmp3lame --enable-libopus --enable-libsvtav1 --enable-libdav1d --enable-libvorbis --enable-libvpx --enable-libx264 --enable-libx265 --enable-nonfree\n  libavutil      58.  5.100 / 58.  5.100\n  libavcodec     60.  6.101 / 60.  6.101\n  libavformat    60.  4.100 / 60.  4.100\n  libavdevice    60.  2.100 / 60.  2.100\n  libavfilter     9.  4.100 /  9.  4.100\n  libswscale      7.  2.100 /  7.  2.100\n  libswresample   4. 11.100 /  4. 11.100\n  libpostproc    57.  2.100 / 57.  2.100\nInput #0, image2, from '/library/books/opus/Zito, Salena & Todd, Brad - The Great Revolt (2018)/The Great Revolt -- Cover.jpg':\n  Duration: 00:00:00.04, start: 0.000000, bitrate: 7642 kb/s\n  Stream #0:0: Video: mjpeg (Progressive), yuvj420p(pc, bt470bg/unknown/unknown), 329x500 [SAR 1:1 DAR 329:500], 25 fps, 25 tbr, 25 tbn\n[vost#0:0 @ 0x55a9a590c6c0] Automatic encoder selection failed Default encoder for format webp (codec webp) is probably disabled. Please choose an encoder manually.\n[vost#0:0 @ 0x55a9a590c6c0] Error selecting an encoder\n"",""levelName"":""ERROR"",""level"":4}
"
WFdr8MG9,Untitled,iconoclasthero,Bash,Sunday 27th of August 2023 10:26:42 AM CDT,"/library/books/opus/Wolff, Daniel -- Grown-Up Anger (2017)/Grown-Up Anger -- Cover-2.jpg':\n  Duration: 00:00:00.04, start: 0.000000, bitrate: 9783 kb/s\n  Stream #0:0: Video: mjpeg (Progressive), yuvj420p(pc, bt470bg/unknown/unknown), 314x475 [SAR 96:96 DAR 314:475], 25 fps, 25 tbr, 25 tbn\n[vost#0:0 @ 0x5579107a06c0] Automatic encoder selection failed Default encoder for format webp (codec webp) is probably disabled. Please choose an encoder manually.\n[vost#0:0 @ 0x5579107a06c0] Error selecting an encoder\n"",""levelName"":""ERROR"",""level"":4}
"
chnPJGNv,handbreaker snowybot,coinwalk,JavaScript,Sunday 27th of August 2023 10:03:08 AM CDT,"var kozster = parseFloat($('#pct_balance').val());
var gobbie = 0.0001;
var zeggar = gobbie;
var target = 5;
var tens = (gobbie*10);
var sevens = (gobbie*6.1);
var eights = (gobbie*7.9);
var burgzie = kozster;
var smick = ((Math.floor(kozster/tens))*tens);
var dude = ((Math.floor(kozster/tens))*tens);
var joe = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var doh = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var boggart = 0;
var bear = true;
var tuba = ((Math.floor(kozster/tens))*tens);
var razzle;
var oldDegen = 0;
var nope = 1;
 
 
function go(){
burgzie = $('#pct_balance').val();
var bog = ((burgzie-kozster).toFixed(8));
console.log(""profit:"");
console.log(bog);
if ((burgzie>(((Math.floor(burgzie/tens))*tens)+sevens))&&(burgzie<(((Math.floor(burgzie/tens))*tens)+eights))&&(burgzie != oldDegen)&&(burgzie>tuba)){
    zeggar = zeggar*2;
    oldDegen = parseFloat(burgzie);
}
if ((burgzie>(((Math.floor(burgzie/tens))*tens)+sevens))&&(burgzie<(((Math.floor(burgzie/tens))*tens)+eights))&&(burgzie != oldDegen)&&(burgzie<tuba)){
    zeggar = zeggar*2;
	nope = 0;
    oldDegen = parseFloat(burgzie);
}
if ((burgzie>=(tuba+(tens*nope)))&&(burgzie<(((Math.floor(burgzie/tens))*tens)+sevens))){
    zeggar = gobbie;
    oldDegen = 0;
    nope = 1;
    tuba = ((Math.floor(burgzie/tens))*tens);
}
if ((burgzie>=(tuba+(tens*nope)))&&(burgzie>(((Math.floor(burgzie/tens))*tens)+sevens))&&(burgzie<(((Math.floor(burgzie/tens))*tens)+eights))){
    zeggar = gobbie*2;
    oldDegen = 0;
    nope = 1;
    tuba = ((Math.floor(burgzie/tens))*tens);
}
if ((burgzie<=(dude-tens))&&(burgzie<(((Math.floor(burgzie/tens))*tens)+sevens))){
    zeggar = gobbie;
    oldDegen = 0;
    nope = 1;
    dude = ((Math.floor(burgzie/tens))*tens);
}
if ((burgzie>=(smick+(gobbie*40)))&&(burgzie<(((Math.floor(burgzie/tens))*tens)+sevens))){
    zeggar = gobbie;
    oldDegen = 0;
    nope = 1;
    tuba = ((Math.floor(burgzie/tens))*tens);
    dude = ((Math.floor(burgzie/tens))*tens);
	smick = ((Math.floor(burgzie/tens))*tens);
}
if (burgzie>=target){
console.log(""snowybot rocks"");
return;
}
doh = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var milk = document.getElementById('me').firstChild.lastChild.firstChild.children[11].innerText;
if ((milk==razzle)&&(boggart>=1)&&(doh>joe)&&(!bear)){
joe = parseFloat(doh);
bear = true;
}
if ((milk!=razzle)&&(boggart>=1)&&(doh>joe)){
console.log(""hacker attack"");
console.log(""someone else played:"");
console.log(milk);
return;
}
if ((doh==joe)&&(bear)){
razzle = ((zeggar*1).toFixed(8));
$('#pct_chance').val(49.5);
$('#pct_bet').val(razzle);
$('#a_lo').click();
boggart = boggart+1;
bear = false;
doh = 0;
}
setTimeout(() => go(), 1);
}
go();

"
6BHsnRtn,Untitled,touhidurrr,JavaScript,Sunday 27th of August 2023 10:00:24 AM CDT,"const flagColors = {
  bd: [""green"", ""red""],
  in: [""green"", ""orange"", ""white""],
  pk: [""green"", ""white""],
  us: [""red"", ""blue"", ""white""],
  uk: [""red"", ""blue"", ""white""],
  al: [""red"", ""black""],
};

const countries = Object.keys(flagColors);
const colors = [...new Set(Object.values(flagColors).flat())];

function solve(
  takenColors = [],
  ans = { steps: 0, possible: false, solution: {} }
) {
  ans.steps++;
  if (ans.possible) return ans;
  if (takenColors.length === countries.length) {
    ans.possible = true;
    ans.solution = takenColors.reduce((acc, color, i) => {
      acc[countries[i]] = color;
      return acc;
    }, {});
    return ans;
  }
  for (let i = takenColors.length; i < countries.length; i++) {
    if (ans.possible) return ans;
    const country = countries[i];
    for (let color of flagColors[country]) {
      if (ans.possible) return ans;
      if (takenColors.includes(color)) continue;
      solve([...takenColors, color], ans);
    }
  }
  return ans;
}

console.dir(flagColors, { depth: null });
console.dir(solve(), { depth: null });
"
bmMtMdzC,Untitled,CHEAT_THE_GAME,C++,Sunday 27th of August 2023 09:57:11 AM CDT,"#include <Windows.h>
#include <stdio.h>
#include <Psapi.h>

#include <cstring>

DWORD64   GObjObjects_offset = NULL;
DWORD64   Names_offset = NULL;
DWORD   Offset_Name = 0x18;

MODULEINFO GetModuleInfo(LPCTSTR lpModuleName)
{
	MODULEINFO miInfos = { NULL };

	HMODULE hmModule = GetModuleHandle(lpModuleName);

	if (hmModule)
	{
		GetModuleInformation(GetCurrentProcess(), hmModule, &miInfos, sizeof(MODULEINFO));
	}

	return miInfos;
}

template < class T > struct TArray
{
	T*              Data;
	DWORD   Num;
	DWORD   Max;
};

struct UObject
{
	UCHAR   Unknown[0x18];       // unknowed data
	DWORD   NameIndex;                              // struct FName
};

class FUObjectItem
{
public:
	UObject * Object;
	__int32 Flags;
	__int32 ClusterIndex;
	__int32 SerialNumber;
	char unknowndata_00[0x4]; //New
};

class PreFUObjectItem
{
public:
	FUObjectItem * Object_1;
	FUObjectItem * Object_2;
};

class TUObjectArray
{
public:
	PreFUObjectItem * Objects;
	char unknowndata_00[0x8]; //New
	__int32 MaxElements;
	__int32 NumElements;
};

class FUObjectArray
{
public:
	__int32 ObjFirstGCIndex; //0x0000
	__int32 ObjLastNonGCIndex; //0x0004
	__int32 MaxObjectsNotConsideredByGC; //0x0008
	__int32 OpenForDisregardForGC; //0x000C

	TUObjectArray ObjObjects;
};

struct FNameEntry
{
	int Index;
	char pad_0x0004[0x4];
	FNameEntry* HashNext;
	char AnsiName[1024];
};

class TNameEntryArray
{
private:
	DWORD64 * chunks;

public:
	FNameEntry const* const& GetById(int Index) const
	{
		if (!chunks ||
			!*(DWORD64*)chunks ||
			!(DWORD64*)(*(DWORD64*)chunks) ||
			!(DWORD64*)(*(DWORD64*)(chunks + 1)) ||
			!(DWORD64*)(*(DWORD64*)(chunks + 2)) ||
			!(DWORD64*)(*(DWORD64*)(chunks + 3))) return NULL;

		if (Index * 0x8 < 0x20000)
			return *(FNameEntry**)(*(DWORD64*)chunks + (Index * 0x8));
		else if (Index * 0x8 >= 0x20000
			&& Index * 0x8 < (0x20000 * 2))
			return *(FNameEntry**)(*(DWORD64*)(chunks + 1) + (Index * 0x8 - 0x20000));
		else if (Index * 0x8 >= (0x20000 * 2)
			&& Index * 0x8 < (0x20000 * 3))
			return *(FNameEntry**)(*(DWORD64*)(chunks + 2) + (Index * 0x8 - (0x20000 * 2)));
		else if (Index * 0x8 >= (0x20000 * 3)
			&& Index * 0x8 < (0x20000 * 4))
		{
			if (!*(DWORD64*)(chunks + 3)
				|| !*(DWORD64*)(*(DWORD64*)(chunks + 3) + (Index * 0x8 - (0x20000 * 3)))
				|| !*(DWORD64**)(*(DWORD64*)(chunks + 3) + (Index * 0x8 - (0x20000 * 3))))
				return NULL;

			return *(FNameEntry**)(*(DWORD64*)(chunks + 3) + (Index * 0x8 - (0x20000 * 3)));
		}
		else
			return NULL;
	}

	bool IsValidIndex(int index) const
	{
		return index >= 0 && index < (0x20000 * 4) && GetById(index) != nullptr;
	}
};

FUObjectArray* GObjObjects = NULL;
TNameEntryArray* Names = NULL;

char* GetName(UObject* Object)
{
	DWORD NameIndex = *(PDWORD)((DWORD64)Object + Offset_Name);

	if (NameIndex < 0 || NameIndex >(0x20000 * 4))
	{
		static char ret[256];
		sprintf_s(ret, ""INVALID NAME INDEX : %i > %i"", NameIndex, (0x20000 * 4));
		return ret;
	}
	else
	{
		return (char*)Names->GetById(NameIndex)->AnsiName;
	}
}

void ObjectDump()
{
	FILE* Log = NULL;
	fopen_s(&Log, ""ObjectDump.txt"", ""w+"");

	for (DWORD64 i = 0x0; i < (GObjObjects->ObjObjects.NumElements - 2); i++)
	{
		if (i <= 0xFFFF)
		{
			if (!GObjObjects->ObjObjects.Objects->Object_1[i].Object) { continue; }

			fprintf(Log, ""UObject[%06i] %-50s 0x%llX\n"", i, GetName(GObjObjects->ObjObjects.Objects->Object_1[i].Object), GObjObjects->ObjObjects.Objects->Object_1[i].Object);
		}
		else if (i > 0xFFFF && i <= 0x1FFFE)
		{
			if (!GObjObjects->ObjObjects.Objects->Object_2[(i - 0xFFFF)].Object) { continue; }

			fprintf(Log, ""UObject[%06i] %-50s 0x%llX\n"", i, GetName(GObjObjects->ObjObjects.Objects->Object_2[(i - 0xFFFF)].Object), GObjObjects->ObjObjects.Objects->Object_2[(i - 0xFFFF)].Object);
		}
		else
		{
			fclose(Log);
			return;
		}
	}

	fclose(Log);
}

void NameDump()
{
	FILE* Log = NULL;
	fopen_s(&Log, ""NameDump.txt"", ""w+"");

	for (DWORD64 i = 0x0; i < (0x20000 * 4); i++)
	{
		if (!Names->GetById(i)) { continue; }

		fprintf(Log, ""Name[%06i] %s\n"", i, Names->GetById(i)->AnsiName);
	}

	fclose(Log);
}

void onAttach()
{
	MODULEINFO miGame = GetModuleInfo(NULL);

	GObjObjects_offset = (DWORD64)((DWORD64)miGame.lpBaseOfDll + 0x3272CE8);
	Names_offset = ((DWORD64)miGame.lpBaseOfDll + 0x326E880);

	GObjObjects = (FUObjectArray*)GObjObjects_offset;
	Names = (TNameEntryArray*)Names_offset;

	NameDump();
	ObjectDump();
}

BOOL WINAPI DllMain(HMODULE hModule, DWORD dwReason, LPVOID lpReserved)
{
	switch (dwReason)
	{
	case DLL_PROCESS_ATTACH:
		DisableThreadLibraryCalls(hModule);
		CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)onAttach, NULL, 0, NULL);
		return true;
		break;

	case DLL_PROCESS_DETACH:
		return true;
		break;
	}
}"
h5JMgpJx,News Aug27 23,Newscaster_Ned,Email,Sunday 27th of August 2023 08:53:16 AM CDT,".‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎1‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎2‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎3‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎T‎e‎s‎t‎ ‎c‎o‎m‎p‎l‎e‎t‎e‎.‎

W‎e‎l‎l‎,‎ ‎c‎h‎*‎n‎k‎ ‎t‎*‎*‎t‎s‎ ‎I‎'‎m‎ ‎n‎o‎t‎ ‎a‎l‎l‎o‎w‎e‎d‎ ‎t‎o‎ ‎s‎w‎e‎a‎r‎ ‎a‎n‎y‎m‎o‎r‎e‎ ‎b‎e‎c‎a‎u‎s‎e‎ ‎o‎f‎ ‎P‎a‎s‎t‎e‎b‎i‎n‎'‎s‎ ‎n‎e‎w‎ ‎g‎u‎i‎d‎e‎l‎i‎n‎e‎s‎.‎ ‎F‎*‎*‎k‎ ‎s‎h‎*‎t‎ ‎b‎*‎*‎*‎*‎ ‎n‎*‎*‎*‎e‎r‎!‎!‎!‎!‎!‎

V‎i‎k‎t‎o‎r‎ ‎S‎h‎o‎k‎i‎n‎:‎ ‎J‎o‎e‎ ‎a‎n‎d‎ ‎H‎u‎n‎t‎e‎r‎ ‎B‎i‎d‎e‎n‎ ‎W‎e‎r‎e‎ ‎B‎e‎i‎n‎g‎ ‎B‎r‎i‎b‎e‎d‎

U‎k‎r‎a‎i‎n‎e‎ ‎P‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎’‎f‎i‎r‎e‎d‎ ‎m‎e‎ ‎a‎t‎ ‎t‎h‎e‎ ‎i‎n‎s‎i‎s‎t‎e‎n‎c‎e‎ ‎o‎f‎ ‎t‎h‎e‎ ‎t‎h‎e‎n‎-‎V‎i‎c‎e‎ ‎P‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎B‎i‎d‎e‎n‎ ‎b‎e‎c‎a‎u‎s‎e‎ ‎I‎ ‎w‎a‎s‎ ‎i‎n‎v‎e‎s‎t‎i‎g‎a‎t‎i‎n‎g‎ ‎B‎u‎r‎i‎s‎m‎a‎’‎
S‎h‎o‎k‎i‎n‎
O‎n‎ ‎S‎a‎t‎u‎r‎d‎a‎y‎’‎s‎ ‎b‎r‎o‎a‎d‎c‎a‎s‎t‎ ‎o‎f‎ ‎F‎N‎C‎’‎s‎ ‎“‎O‎n‎e‎ ‎N‎a‎t‎i‎o‎n‎,‎”‎ ‎f‎o‎r‎m‎e‎r‎ ‎U‎k‎r‎a‎i‎n‎i‎a‎n‎ ‎P‎r‎o‎s‎e‎c‎u‎t‎o‎r‎ ‎G‎e‎n‎e‎r‎a‎l‎ ‎V‎i‎k‎t‎o‎r‎ ‎S‎h‎o‎k‎i‎n‎ ‎s‎a‎i‎d‎ ‎h‎e‎ ‎b‎e‎l‎i‎e‎v‎e‎d‎ ‎t‎h‎a‎t‎ ‎b‎o‎t‎h‎ ‎P‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎J‎o‎e‎ ‎B‎i‎d‎e‎n‎ ‎a‎n‎d‎ ‎h‎i‎s‎ ‎s‎o‎n‎ ‎H‎u‎n‎t‎e‎r‎ ‎B‎i‎d‎e‎n‎ ‎w‎e‎r‎e‎ ‎b‎r‎i‎b‎e‎d‎.‎

R‎a‎m‎a‎s‎w‎a‎m‎y‎:‎ ‎‘‎N‎e‎o‎c‎o‎n‎ ‎E‎s‎t‎a‎b‎l‎i‎s‎h‎m‎e‎n‎t‎’‎ ‎T‎h‎r‎e‎a‎t‎e‎n‎e‎d‎ ‎o‎f‎ ‎M‎y‎ ‎V‎i‎e‎w‎s‎ ‎o‎n‎ ‎U‎k‎r‎a‎i‎n‎e‎ ‎
R‎a‎m‎a‎s‎w‎a‎m‎y‎:‎ ‎‘‎N‎e‎o‎c‎o‎n‎ ‎E‎s‎t‎a‎b‎l‎i‎s‎h‎m‎e‎n‎t‎’‎ ‎T‎h‎r‎e‎a‎t‎e‎n‎e‎d‎ ‎o‎f‎ ‎M‎y‎ ‎V‎i‎e‎w‎s‎ ‎o‎n‎ ‎U‎k‎r‎a‎i‎n‎e‎ ‎
6‎7‎3‎
N‎H‎ ‎W‎e‎i‎g‎h‎s‎ ‎U‎s‎i‎n‎g‎ ‎1‎4‎t‎h‎ ‎A‎m‎e‎n‎d‎m‎e‎n‎t‎ ‎t‎o‎ ‎K‎e‎e‎p‎ ‎T‎r‎u‎m‎p‎ ‎O‎f‎f‎ ‎B‎a‎l‎l‎o‎t‎
N‎H‎ ‎W‎e‎i‎g‎h‎s‎ ‎U‎s‎i‎n‎g‎ ‎1‎4‎t‎h‎ ‎A‎m‎e‎n‎d‎m‎e‎n‎t‎ ‎t‎o‎ ‎K‎e‎e‎p‎ ‎T‎r‎u‎m‎p‎ ‎O‎f‎f‎ ‎B‎a‎l‎l‎o‎t‎
4‎,‎2‎3‎4‎
M‎c‎C‎a‎r‎t‎h‎y‎ ‎O‎r‎d‎e‎r‎s‎ ‎C‎a‎p‎i‎t‎o‎l‎ ‎F‎l‎a‎g‎ ‎t‎o‎ ‎H‎a‎l‎f‎-‎S‎t‎a‎f‎f‎ ‎t‎o‎ ‎H‎o‎n‎o‎r‎ ‎1‎3‎ ‎K‎i‎l‎l‎e‎d‎ ‎i‎n‎ ‎A‎f‎g‎h‎a‎n‎i‎s‎t‎a‎
M‎c‎C‎a‎r‎t‎h‎y‎ ‎O‎r‎d‎e‎r‎s‎ ‎C‎a‎p‎i‎t‎o‎l‎ ‎F‎l‎a‎g‎ ‎t‎o‎ ‎H‎a‎l‎f‎-‎S‎t‎a‎f‎f‎ ‎t‎o‎ ‎H‎o‎n‎o‎r‎ ‎1‎3‎ ‎K‎i‎l‎l‎e‎d‎ ‎i‎n‎ ‎A‎f‎g‎h‎a‎n‎i‎s‎t‎a‎
1‎,‎7‎8‎1‎
T‎w‎o‎ ‎H‎i‎g‎h‎-‎R‎a‎n‎k‎i‎n‎g‎ ‎U‎k‎r‎a‎i‎n‎e‎ ‎O‎f‎f‎i‎c‎i‎a‎l‎s‎ ‎F‎o‎u‎n‎d‎ ‎t‎o‎ ‎H‎a‎v‎e‎ ‎M‎i‎s‎a‎p‎p‎r‎o‎p‎r‎i‎a‎t‎e‎d‎ ‎$‎1‎.‎6‎ ‎M‎i‎l‎l‎i‎
T‎w‎o‎ ‎H‎i‎g‎h‎-‎R‎a‎n‎k‎i‎n‎g‎ ‎U‎k‎r‎a‎i‎n‎e‎ ‎O‎f‎f‎i‎c‎i‎a‎l‎s‎ ‎F‎o‎u‎n‎d‎ ‎t‎o‎ ‎H‎a‎v‎e‎ ‎M‎i‎s‎a‎p‎p‎r‎o‎p‎r‎i‎a‎t‎e‎d‎ ‎$‎1‎.‎6‎ ‎M‎i‎l‎l‎i‎
1‎1‎0‎

T‎h‎e‎ ‎B‎e‎s‎t‎ ‎T‎r‎u‎m‎p‎ ‎M‎u‎g‎s‎h‎o‎t‎ ‎M‎e‎m‎e‎s‎ ‎T‎a‎k‎i‎n‎g‎ ‎o‎v‎e‎r‎ ‎S‎o‎c‎i‎a‎l‎ ‎M‎e‎d‎i‎a‎
9‎,‎1‎9‎6‎
m‎u‎g‎s‎h‎o‎t‎
T‎r‎u‎m‎p‎ ‎C‎a‎m‎p‎a‎i‎g‎n‎ ‎R‎a‎i‎s‎e‎s‎ ‎$‎7‎.‎1‎ ‎M‎i‎l‎l‎i‎o‎n‎ ‎A‎f‎t‎e‎r‎ ‎F‎u‎l‎t‎o‎n‎ ‎C‎o‎u‎n‎t‎y‎ ‎M‎u‎g‎s‎h‎o‎t‎ ‎
1‎,‎0‎3‎3‎
L‎e‎a‎v‎i‎t‎t‎:‎ ‎T‎r‎u‎m‎p‎ ‎M‎u‎g‎s‎h‎o‎t‎ ‎‘‎R‎a‎l‎l‎i‎e‎d‎’‎ ‎A‎m‎e‎r‎i‎c‎a‎n‎s‎ ‎A‎c‎r‎o‎s‎s‎ ‎t‎h‎e‎ ‎P‎o‎l‎i‎t‎i‎c‎a‎l‎ ‎S‎p‎e‎c‎t‎r‎u‎m‎ ‎
L‎e‎a‎v‎i‎t‎t‎:‎ ‎T‎r‎u‎m‎p‎ ‎M‎u‎g‎s‎h‎o‎t‎ ‎‘‎R‎a‎l‎l‎i‎e‎d‎’‎ ‎A‎m‎e‎r‎i‎c‎a‎n‎s‎ ‎A‎c‎r‎o‎s‎s‎ ‎t‎h‎e‎ ‎P‎o‎l‎i‎t‎i‎c‎a‎l‎ ‎S‎p‎e‎c‎t‎r‎u‎m‎ ‎
3‎7‎8‎
T‎r‎u‎m‎p‎
E‎x‎c‎l‎u‎s‎i‎v‎e‎ ‎—‎ ‎F‎a‎k‎e‎ ‎N‎e‎w‎s‎ ‎B‎u‎s‎t‎e‎d‎:‎ ‎D‎o‎n‎a‎l‎d‎ ‎T‎r‎u‎m‎p‎ ‎J‎r‎.‎ ‎D‎i‎d‎ ‎N‎o‎t‎ ‎A‎c‎q‎u‎i‎r‎e‎ ‎M‎a‎r‎-‎a‎-‎L‎a‎g‎o‎
4‎,‎0‎2‎5‎
S‎h‎e‎r‎i‎f‎f‎:‎ ‎S‎u‎s‎p‎e‎c‎t‎e‎d‎ ‎J‎a‎c‎k‎s‎o‎n‎v‎i‎l‎l‎e‎ ‎S‎h‎o‎o‎t‎e‎r‎ ‎'‎H‎a‎t‎e‎d‎ ‎B‎l‎a‎c‎k‎ ‎P‎e‎o‎p‎l‎e‎'‎
S‎h‎e‎r‎i‎f‎f‎:‎ ‎S‎u‎s‎p‎e‎c‎t‎e‎d‎ ‎J‎a‎c‎k‎s‎o‎n‎v‎i‎l‎l‎e‎ ‎S‎h‎o‎o‎t‎e‎r‎ ‎'‎H‎a‎t‎e‎d‎ ‎B‎l‎a‎c‎k‎ ‎P‎e‎o‎p‎l‎e‎'‎

T‎e‎e‎n‎a‎p‎e‎r‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎A‎f‎t‎e‎r‎ ‎K‎i‎d‎n‎a‎p‎p‎i‎n‎g‎ ‎E‎l‎d‎e‎r‎l‎y‎ ‎W‎h‎i‎t‎e‎ ‎C‎o‎u‎p‎l‎e‎ ‎a‎n‎d‎ ‎T‎h‎e‎n‎ ‎S‎h‎o‎o‎t‎i‎n‎g‎ ‎W‎h‎i‎t‎e‎ ‎M‎a‎n‎ ‎t‎o‎ ‎D‎e‎a‎t‎h‎.‎

H‎i‎s‎ ‎s‎i‎m‎i‎a‎n‎ ‎D‎N‎A‎ ‎g‎o‎t‎ ‎t‎h‎e‎ ‎b‎e‎s‎t‎ ‎o‎f‎ ‎h‎i‎m‎.‎


N‎i‎g‎ ‎G‎e‎t‎s‎ ‎8‎ ‎D‎a‎y‎s‎ ‎A‎f‎t‎e‎r‎ ‎R‎a‎p‎i‎n‎g‎ ‎G‎i‎r‎l‎ ‎U‎n‎d‎e‎r‎ ‎1‎2‎.‎


G‎r‎o‎i‎d‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎i‎n‎ ‎D‎a‎y‎t‎o‎n‎ ‎f‎o‎r‎ ‎K‎i‎d‎n‎a‎p‎p‎i‎n‎g‎ ‎a‎n‎d‎ ‎D‎o‎m‎e‎s‎t‎i‎c‎ ‎V‎i‎o‎l‎e‎n‎c‎e‎.‎


L‎i‎b‎e‎r‎i‎a‎n‎ ‎N‎e‎g‎r‎o‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎f‎o‎r‎ ‎W‎a‎r‎ ‎C‎r‎i‎m‎e‎s‎ ‎A‎g‎a‎i‎n‎s‎t‎ ‎U‎S‎.‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎T‎i‎m‎e‎ ‎f‎o‎r‎ ‎t‎h‎e‎ ‎w‎e‎a‎t‎h‎e‎r‎.‎.‎.‎ ‎I‎ ‎g‎u‎e‎s‎s‎.‎

T‎o‎d‎a‎y‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
1‎0‎8‎°‎
/‎7‎8‎°‎
1‎5‎%‎
N‎W‎ ‎6‎ ‎m‎p‎h‎
S‎u‎n‎ ‎2‎7‎ ‎|‎ ‎D‎a‎y‎
1‎0‎8‎°‎
1‎5‎%‎
N‎W‎
6‎
 ‎
m‎p‎h‎
S‎u‎n‎s‎h‎i‎n‎e‎ ‎t‎o‎ ‎s‎t‎a‎r‎t‎,‎ ‎t‎h‎e‎n‎ ‎a‎ ‎f‎e‎w‎ ‎a‎f‎t‎e‎r‎n‎o‎o‎n‎ ‎c‎l‎o‎u‎d‎s‎.‎ ‎A‎ ‎s‎t‎r‎a‎y‎ ‎s‎h‎o‎w‎e‎r‎ ‎o‎r‎ ‎t‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎ ‎i‎s‎ ‎p‎o‎s‎s‎i‎b‎l‎e‎.‎ ‎H‎i‎g‎h‎ ‎1‎0‎8‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎N‎W‎ ‎a‎t‎ ‎5‎ ‎t‎o‎ ‎1‎0‎ ‎m‎p‎h‎.‎

H‎u‎m‎i‎d‎i‎t‎y‎
3‎4‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
1‎0‎ ‎o‎f‎ ‎1‎1‎
S‎u‎n‎r‎i‎s‎e‎
7‎:‎0‎4‎ ‎a‎m‎
S‎u‎n‎s‎e‎t‎
7‎:‎5‎8‎ ‎p‎m‎
S‎u‎n‎ ‎2‎7‎ ‎|‎ ‎N‎i‎g‎h‎t‎
7‎8‎°‎
3‎1‎%‎
N‎
8‎
 ‎
m‎p‎h‎
I‎s‎o‎l‎a‎t‎e‎d‎ ‎t‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎ ‎e‎a‎r‎l‎y‎,‎ ‎t‎h‎e‎n‎ ‎p‎a‎r‎t‎l‎y‎ ‎c‎l‎o‎u‎d‎y‎ ‎a‎f‎t‎e‎r‎ ‎m‎i‎d‎n‎i‎g‎h‎t‎.‎ ‎L‎o‎w‎ ‎7‎8‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎N‎ ‎a‎t‎ ‎5‎ ‎t‎o‎ ‎1‎0‎ ‎m‎p‎h‎.‎ ‎C‎h‎a‎n‎c‎e‎ ‎o‎f‎ ‎r‎a‎i‎n‎ ‎3‎0‎%‎.‎

H‎u‎m‎i‎d‎i‎t‎y‎
5‎4‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
0‎ ‎o‎f‎ ‎1‎1‎
M‎o‎o‎n‎r‎i‎s‎e‎
5‎:‎4‎6‎ ‎p‎m‎
W‎a‎x‎i‎n‎g‎ ‎G‎i‎b‎b‎o‎u‎s‎
M‎o‎o‎n‎s‎e‎t‎
2‎:‎4‎8‎ ‎a‎m‎
M‎o‎n‎ ‎2‎8‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
1‎0‎1‎°‎
/‎7‎4‎°‎
1‎9‎%‎
N‎ ‎1‎2‎ ‎m‎p‎h‎
T‎u‎e‎ ‎2‎9‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
9‎9‎°‎
/‎7‎1‎°‎
2‎%‎
N‎N‎E‎ ‎1‎4‎ ‎m‎p‎h‎
W‎e‎d‎ ‎3‎0‎
S‎u‎n‎n‎y‎
1‎0‎0‎°‎
/‎7‎0‎°‎
0‎%‎
N‎N‎E‎ ‎1‎1‎ ‎m‎p‎h‎
T‎h‎u‎ ‎3‎1‎
S‎u‎n‎n‎y‎
1‎0‎2‎°‎
/‎6‎9‎°‎
0‎%‎
N‎E‎ ‎7‎ ‎m‎p‎h‎
F‎r‎i‎ ‎0‎1‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
1‎0‎2‎°‎
/‎7‎1‎°‎
3‎%‎
S‎S‎E‎ ‎7‎ ‎m‎p‎h‎
S‎a‎t‎ ‎0‎2‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
1‎0‎1‎°‎
/‎7‎4‎°‎
6‎%‎
S‎S‎E‎ ‎7‎ ‎m‎p‎h‎
S‎u‎n‎ ‎0‎3‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
1‎0‎2‎°‎
/‎7‎4‎°‎
5‎%‎
S‎ ‎8‎ ‎m‎p‎h‎
M‎o‎n‎ ‎0‎4‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
1‎0‎2‎°‎
/‎7‎6‎°‎
7‎%‎
S‎ ‎9‎ ‎m‎p‎h‎
T‎u‎e‎ ‎0‎5‎
S‎u‎n‎n‎y‎
1‎0‎4‎°‎
/‎7‎5‎°‎
1‎2‎%‎
S‎ ‎1‎0‎ ‎m‎p‎h‎
W‎e‎d‎ ‎0‎6‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
1‎0‎3‎°‎
/‎7‎5‎°‎
1‎3‎%‎
S‎S‎E‎ ‎9‎ ‎m‎p‎h‎
T‎h‎u‎ ‎0‎7‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
1‎0‎2‎°‎
/‎7‎5‎°‎
1‎2‎%‎
S‎S‎E‎ ‎9‎ ‎m‎p‎h‎
F‎r‎i‎ ‎0‎8‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
1‎0‎1‎°‎
/‎7‎5‎°‎
1‎0‎%‎
S‎S‎E‎ ‎1‎0‎ ‎m‎p‎h‎
S‎a‎t‎ ‎0‎9‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
1‎0‎1‎°‎
/‎7‎5‎°‎
2‎3‎%‎
S‎E‎ ‎9‎ ‎m‎p‎h‎
S‎u‎n‎ ‎1‎0‎
I‎s‎o‎l‎a‎t‎e‎d‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
1‎0‎1‎°‎
/‎7‎4‎°‎
3‎4‎%‎
S‎E‎ ‎9‎ ‎m‎p‎h‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

C‎u‎r‎r‎e‎n‎t‎ ‎t‎h‎r‎e‎a‎t‎:‎ ‎E‎n‎d‎ ‎o‎f‎ ‎S‎u‎m‎m‎e‎r‎.‎ 🍥🔥

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

S‎a‎l‎v‎a‎d‎o‎r‎ ‎R‎a‎m‎o‎s‎
S‎a‎l‎v‎a‎d‎o‎r‎ ‎R‎a‎m‎o‎s‎ ‎a‎.‎k‎.‎a‎.‎ ‎A‎d‎a‎m‎ ‎T‎r‎a‎n‎z‎a‎ ‎w‎a‎s‎ ‎a‎ ‎t‎r‎a‎n‎n‎y‎ ‎w‎h‎o‎ ‎t‎r‎i‎e‎d‎ ‎t‎o‎ ‎b‎e‎a‎t‎ ‎t‎h‎e‎ ‎S‎a‎n‎d‎y‎ ‎H‎o‎o‎k‎ ‎r‎e‎c‎o‎r‎d‎.‎ ‎H‎e‎ ‎k‎i‎l‎l‎e‎d‎ ‎h‎i‎s‎ ‎n‎a‎g‎g‎i‎n‎g‎ ‎n‎a‎n‎n‎y‎ ‎j‎u‎s‎t‎ ‎l‎i‎k‎e‎ ‎L‎a‎n‎z‎a‎,‎ ‎t‎h‎e‎n‎ ‎w‎e‎n‎t‎ ‎t‎o‎ ‎a‎ ‎l‎o‎c‎a‎l‎ ‎s‎c‎h‎o‎o‎l‎ ‎a‎n‎d‎ ‎o‎p‎e‎n‎e‎d‎ ‎f‎i‎r‎e‎ ‎o‎n‎ ‎a‎ ‎b‎u‎n‎c‎h‎ ‎o‎f‎ ‎k‎i‎d‎s‎,‎ ‎c‎r‎e‎a‎t‎i‎n‎g‎ ‎a‎ ‎l‎u‎l‎z‎f‎e‎s‎t‎ ‎i‎n‎ ‎t‎h‎e‎ ‎s‎c‎h‎o‎o‎l‎.‎ ‎H‎e‎ ‎u‎n‎f‎o‎r‎t‎u‎n‎a‎t‎e‎l‎y‎ ‎o‎n‎l‎y‎ ‎g‎o‎t‎ ‎u‎p‎ ‎t‎o‎ ‎1‎9‎ ‎c‎o‎n‎f‎i‎r‎m‎e‎d‎ ‎k‎i‎l‎l‎s‎ ‎o‎n‎ ‎t‎h‎e‎ ‎l‎o‎l‎i‎s‎ ‎b‎e‎f‎o‎r‎e‎ ‎t‎h‎e‎ ‎c‎o‎p‎s‎ ‎g‎o‎t‎ ‎t‎o‎ ‎h‎i‎m‎ ‎a‎n‎d‎ ‎p‎u‎t‎ ‎h‎i‎m‎ ‎d‎o‎w‎n‎.‎


(‎(‎ ‎H‎I‎S‎T‎O‎R‎I‎C‎ ‎F‎I‎R‎S‎T‎ ‎T‎R‎A‎N‎S‎ ‎L‎A‎T‎I‎N‎X‎ ‎S‎C‎H‎O‎O‎L‎ ‎S‎H‎O‎O‎T‎E‎R‎!‎ ‎)‎)‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

J‎o‎h‎n‎ ‎A‎d‎a‎m‎s‎ ‎(‎1‎7‎3‎5‎–‎1‎8‎2‎6‎)‎ ‎w‎a‎s‎ ‎a‎n‎ ‎A‎m‎e‎r‎i‎c‎a‎n‎ ‎s‎t‎a‎t‎e‎s‎m‎a‎n‎,‎ ‎a‎t‎t‎o‎r‎n‎e‎y‎,‎ ‎d‎i‎p‎l‎o‎m‎a‎t‎,‎ ‎w‎r‎i‎t‎e‎r‎,‎ ‎a‎n‎d‎ ‎F‎o‎u‎n‎d‎i‎n‎g‎ ‎F‎a‎t‎h‎e‎r‎ ‎w‎h‎o‎ ‎s‎e‎r‎v‎e‎d‎ ‎a‎s‎ ‎t‎h‎e‎ ‎s‎e‎c‎o‎n‎d‎ ‎p‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎o‎f‎ ‎t‎h‎e‎ ‎U‎n‎i‎t‎e‎d‎ ‎S‎t‎a‎t‎e‎s‎ ‎f‎r‎o‎m‎ ‎1‎7‎9‎7‎ ‎t‎o‎ ‎1‎8‎0‎1‎.‎ ‎B‎e‎f‎o‎r‎e‎ ‎h‎i‎s‎ ‎p‎r‎e‎s‎i‎d‎e‎n‎c‎y‎,‎ ‎h‎e‎ ‎w‎a‎s‎ ‎a‎ ‎l‎e‎a‎d‎e‎r‎ ‎o‎f‎ ‎t‎h‎e‎ ‎A‎m‎e‎r‎i‎c‎a‎n‎ ‎R‎e‎v‎o‎l‎u‎t‎i‎o‎n‎ ‎t‎h‎a‎t‎ ‎a‎c‎h‎i‎e‎v‎e‎d‎ ‎i‎n‎d‎e‎p‎e‎n‎d‎e‎n‎c‎e‎ ‎f‎r‎o‎m‎ ‎G‎r‎e‎a‎t‎ ‎B‎r‎i‎t‎a‎i‎n‎.‎ ‎D‎u‎r‎i‎n‎g‎ ‎t‎h‎e‎ ‎l‎a‎t‎t‎e‎r‎ ‎p‎a‎r‎t‎ ‎o‎f‎ ‎t‎h‎e‎ ‎R‎e‎v‎o‎l‎u‎t‎i‎o‎n‎a‎r‎y‎ ‎W‎a‎r‎ ‎a‎n‎d‎ ‎i‎n‎ ‎t‎h‎e‎ ‎e‎a‎r‎l‎y‎ ‎y‎e‎a‎r‎s‎ ‎o‎f‎ ‎t‎h‎e‎ ‎n‎e‎w‎ ‎n‎a‎t‎i‎o‎n‎,‎ ‎h‎e‎ ‎s‎e‎r‎v‎e‎d‎ ‎t‎h‎e‎ ‎U‎.‎S‎.‎ ‎g‎o‎v‎e‎r‎n‎m‎e‎n‎t‎ ‎a‎s‎ ‎a‎ ‎s‎e‎n‎i‎o‎r‎ ‎d‎i‎p‎l‎o‎m‎a‎t‎ ‎i‎n‎ ‎E‎u‎r‎o‎p‎e‎.‎ ‎A‎d‎a‎m‎s‎ ‎w‎a‎s‎ ‎t‎h‎e‎ ‎f‎i‎r‎s‎t‎ ‎p‎e‎r‎s‎o‎n‎ ‎t‎o‎ ‎h‎o‎l‎d‎ ‎t‎h‎e‎ ‎o‎f‎f‎i‎c‎e‎ ‎o‎f‎ ‎V‎i‎c‎e‎ ‎P‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎o‎f‎ ‎t‎h‎e‎ ‎U‎n‎i‎t‎e‎d‎ ‎S‎t‎a‎t‎e‎s‎,‎ ‎s‎e‎r‎v‎i‎n‎g‎ ‎i‎n‎ ‎t‎h‎e‎ ‎r‎o‎l‎e‎ ‎f‎r‎o‎m‎ ‎1‎7‎8‎9‎ ‎t‎o‎ ‎1‎7‎9‎7‎.‎ ‎H‎e‎ ‎w‎a‎s‎ ‎a‎ ‎d‎e‎d‎i‎c‎a‎t‎e‎d‎ ‎d‎i‎a‎r‎i‎s‎t‎ ‎a‎n‎d‎ ‎r‎e‎g‎u‎l‎a‎r‎l‎y‎ ‎c‎o‎r‎r‎e‎s‎p‎o‎n‎d‎e‎d‎ ‎w‎i‎t‎h‎ ‎i‎m‎p‎o‎r‎t‎a‎n‎t‎ ‎c‎o‎n‎t‎e‎m‎p‎o‎r‎a‎r‎i‎e‎s‎,‎ ‎i‎n‎c‎l‎u‎d‎i‎n‎g‎ ‎h‎i‎s‎ ‎w‎i‎f‎e‎ ‎a‎n‎d‎ ‎a‎d‎v‎i‎s‎e‎r‎ ‎A‎b‎i‎g‎a‎i‎l‎ ‎A‎d‎a‎m‎s‎ ‎a‎n‎d‎ ‎h‎i‎s‎ ‎f‎r‎i‎e‎n‎d‎ ‎a‎n‎d‎ ‎p‎o‎l‎i‎t‎i‎c‎a‎l‎ ‎r‎i‎v‎a‎l‎ ‎T‎h‎o‎m‎a‎s‎ ‎J‎e‎f‎f‎e‎r‎s‎o‎n‎.‎ ‎T‎h‎i‎s‎ ‎o‎i‎l‎-‎o‎n‎-‎c‎a‎n‎v‎a‎s‎ ‎p‎a‎i‎n‎t‎i‎n‎g‎ ‎o‎f‎ ‎A‎d‎a‎m‎s‎ ‎w‎a‎s‎ ‎p‎r‎o‎d‎u‎c‎e‎d‎ ‎b‎y‎ ‎G‎i‎l‎b‎e‎r‎t‎ ‎S‎t‎u‎a‎r‎t‎,‎ ‎a‎p‎p‎r‎o‎x‎i‎m‎a‎t‎e‎l‎y‎ ‎b‎e‎t‎w‎e‎e‎n‎ ‎1‎8‎0‎0‎ ‎a‎n‎d‎ ‎1‎8‎1‎5‎,‎ ‎a‎n‎d‎ ‎i‎s‎ ‎i‎n‎ ‎t‎h‎e‎ ‎N‎a‎t‎i‎o‎n‎a‎l‎ ‎G‎a‎l‎l‎e‎r‎y‎ ‎o‎f‎ ‎A‎r‎t‎ ‎i‎n‎ ‎W‎a‎s‎h‎i‎n‎g‎t‎o‎n‎,‎ ‎D‎.‎C‎.‎

P‎a‎i‎n‎t‎i‎n‎g‎ ‎c‎r‎e‎d‎i‎t‎:‎ ‎G‎i‎l‎b‎e‎r‎t‎ ‎S‎t‎u‎a‎r‎t‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

B‎y‎e‎,‎ ‎g‎u‎y‎s‎.‎ ‎I‎'‎m‎ ‎g‎o‎n‎n‎a‎ ‎g‎o‎ ‎t‎o‎ ‎t‎h‎e‎ ‎f‎l‎e‎a‎ ‎m‎a‎r‎k‎e‎t‎ ‎w‎i‎t‎h‎ ‎m‎y‎ ‎g‎r‎a‎n‎d‎m‎o‎t‎h‎e‎r‎.‎.‎.‎ ‎O‎h‎ ‎j‎u‎s‎t‎ ‎s‎h‎u‎t‎ ‎t‎h‎e‎ ‎f‎u‎c‎k‎ ‎u‎p‎,‎ ‎I‎'‎m‎ ‎n‎o‎t‎ ‎h‎a‎p‎p‎y‎ ‎a‎b‎o‎u‎t‎ ‎t‎h‎i‎s‎ ‎e‎i‎t‎h‎e‎r‎,‎ ‎b‎i‎t‎c‎h‎!‎"
7Gx4QJUp,steamengine.lua,Commandcracker,Lua,Sunday 27th of August 2023 08:52:05 AM CDT,"local logging = require(""logging"")
local logger = logging.Logger.new(shell.getRunningProgram())

local kupplung = ""right""
local startergetriebe = ""back""
local starterkurbel = ""top""
local pumpkontrolle = peripheral.wrap(""Create_RotationSpeedController_0"")
local brunnen = peripheral.wrap(""Create_RotationSpeedController_1"")
local speedometer = peripheral.wrap(""Create_Speedometer_0"")
local treibstoff = ""front""

local function ist_treibstoff_vorhanden()
	return redstone.getInput(treibstoff)
end

local function setze_arbeits_pumpengeschwindigkeit()
	local current_speed = pumpkontrolle.getTargetSpeed()
	local speed_with_fuel = 100
	local speed_without_fuel = 30

	if ist_treibstoff_vorhanden() then
		pumpkontrolle.setTargetSpeed(speed_with_fuel)
		brunnen.setTargetSpeed(110)
	else
		pumpkontrolle.setTargetSpeed(speed_without_fuel)
		brunnen.setTargetSpeed(40)
	end
end

local function startSteamEngine()
	pumpkontrolle.setTargetSpeed(150)

	redstone.setOutput(kupplung, true)
	redstone.setOutput(startergetriebe, false)

	local start_zeit = os.clock()
	local kurbel_zeit = 8.5

	repeat
		turtle.placeUp() -- starterkurbel
	until os.clock() - start_zeit >= kurbel_zeit

	redstone.setOutput(startergetriebe, true)
	sleep(6)
	setze_arbeits_pumpengeschwindigkeit()
	redstone.setOutput(kupplung, false)
end

while true do
	local speed = speedometer.getSpeed()
	logger:debug(""Speed:"", speed)
	if speed <= 0 then
		logger:info(""Versuche steam engine zu starten!"")
		startSteamEngine()
	end
	setze_arbeits_pumpengeschwindigkeit()
	sleep(1)
end
"
Sx3CBRQy,Untitled,bolo17,Python,Sunday 27th of August 2023 08:45:56 AM CDT,"Python sample codes for robotics algorithms.
Learn how to program robot perception, planning & control with Python, and download a free prebuilt robot programming runtime environment.
Most robotics processes are characterized by three steps:

Perception – what does the environment look like?
Planning and Prediction – how can the robot best navigate the environment?
Control – how can the robot best interact with the objects in the environment?
https://dz4link.com/QpGIt"
KfSY6LMs,CC / TAPE WIPER,Microstar301,Lua,Sunday 27th of August 2023 08:44:03 AM CDT,"-- 
-- CC TAPE WIPER
--
-- made for CC Tweaked / Computercraft and Computronics
-- by Microstar301
-- 
--

tape = peripheral.find(""tape_drive"")
while tape.isReady()==false do
    term.clear()
    term.setCursorPos(1,1)
    print(""Insert Tape"")
    term.setCursorBlink(true)
    sleep(1)
end
term.setCursorBlink(false)
while (tape.getState()~=""REWINDING"") do
    term.clear()
    term.setCursorPos(1,1)
    print(""Please REWIND tape"")
    sleep(0.1)
end
term.clear()
term.setCursorPos(1,1)
write(""Rewinding"")
while (tape.getState()~=""STOPPED"" or tape.isEnd()==true) do
    write(""."")
    sleep(0.5)
end

function round(num, numDecimalPlaces)
  local mult = 10^(numDecimalPlaces or 0)
  return math.floor(num * mult + 0.5) / mult
end

function wipe()
    term.clear()
    term.setCursorPos(1,1)
    print(""-Press ANY KEY to Interrupt-"")
    X=0
    xs=tape.getSize()
    while (tape.isEnd()==false and tape.isReady()==true) do
        for t=1,4096 do
            tape.write(0)
        end
        write(""Wiped "")
        write(X)
        write(""\t of \t"")
        write(xs)
        write(""b.\t"")
        progress = (X/xs)*100
        progress = round(progress,2)
        print(progress ,""%"")
        X=X+4096
        sleep(0.1)
    end
    print(""Tape has been wiped."")
    sleep(3)
end
function interr()
    os.pullEvent(""char"")
end
parallel.waitForAny(wipe,interr)
term.clear()
term.setCursorPos(1,1)
"
DHH6HFue,CodinGame_2023_08_27__15_41_05__mountains.fs,MonsterScripter,F#,Sunday 27th of August 2023 08:41:16 AM CDT,"(* The while loop represents the game. *)
(* Each iteration represents a turn of the game *)
(* where you are given inputs (the heights of the mountains) *)
(* and where you have to print an output (the index of the mountain to fire on) *)
(* The inputs you are given are automatically updated according to your last actions. *)
open System

let maxM = 8
let mutable index_highest_mountain = 0
let mutable max_highest_mounter = 0

(* game loop *)
while true do
    for i in 0 .. maxM - 1 do
        let mountainH = int(Console.In.ReadLine()) (* represents the height of one mountain. *)
        if max_highest_mounter < mountainH then
            max_highest_mounter <- mountainH
            index_highest_mountain <- i
    printfn ""%d"" index_highest_mountain // L'indice de la montagne à viser.
    max_highest_mounter <- 0
    index_highest_mountain <- 0
    ()
"
vLDVVK2c,CodinGame_2023_08_27__15_40_03__mountains.d,MonsterScripter,D,Sunday 27th of August 2023 08:40:50 AM CDT,"import std;

/**
 * The while loop represents the game.
 * Each iteration represents a turn of the game
 * where you are given inputs (the heights of the mountains)
 * and where you have to print an output (the index of the mountain to fire on)
 * The inputs you are given are automatically updated according to your last actions.
 **/

void main()
{
    const int maxM = 8;
    int index_highest_mountain = 0;
    int max_highest_mounter = 0;
    // game loop
    while (1) {
        for (int i = 0; i < maxM; i++) {
            int mountainH = readln.chomp.to!int; // represents the height of one mountain.
            if (max_highest_mounter < mountainH) {
                max_highest_mounter = mountainH;
                index_highest_mountain = i;
            }
        }
        writeln(index_highest_mountain); // The index of the mountain to fire on.
        max_highest_mounter = 0;
        index_highest_mountain = 0;
    }
}
"
jQkMq6Yg,Untitled,itsspynex,C++,Sunday 27th of August 2023 08:38:44 AM CDT,"#include <SFML/Audio.hpp>
#include <SFML/Graphics.hpp>
#include <SFML/Network.hpp>
#include <SFML/Main.hpp>
#include <SFML/System.hpp>
#include <SFML/Window.hpp>
#include <SFML/OpenGL.hpp>
#include ""PerlinNoise-master/PerlinNoise.hpp""
#include <iostream>

using namespace std;


    const int screen_width = 800;
    const int screen_height = 800;
    const int a = 800;
    const int b = 800;
    sf::Uint8* pixels = new sf::Uint8[a * b * 4];

void regen()
{
    uint8_t * pixel = new uint8_t[a * b * 4];
    
    //Noise function perameters
    int random = rand();
    const siv::PerlinNoise::seed_type seed = rand();
    const siv::PerlinNoise perlin{ seed };

    //Draw Pixels
    std::vector<int[screen_width]> arr(screen_height);
    std::vector<int[screen_width]> arr1(screen_height);
    std::vector<int[screen_width]> arr2(screen_height);
    for(int32_t i = 0; i < screen_height; ++i)
    {
        for(int32_t j = 0; j < screen_width; ++j)
        {
            int p_value[3];
            const double noise = perlin.octave2D_01((i * 0.01), (j * 0.01), 4);
            if(noise <= 0.5) 
            {
                arr[i][j] = {0};
                arr1[i][j] = {66};
                arr2[i][j] = {137}; 
            }
            else
            {
                arr[i][j] = {66};
                arr1[i][j] = {98};
                arr2[i][j] = {32};
            }


            //Convert 2d representation of each index to 1d
            int CurrentPixelIndex2 = ((i * screen_height) + j);
            pixel[4 * CurrentPixelIndex2] = arr[i][j];
            pixel[4 * CurrentPixelIndex2 +1] = arr1[i][j];
            pixel[4 * CurrentPixelIndex2 +2] = arr2[i][j];
            pixel[4 * CurrentPixelIndex2 +3] = 255;
        }
    }
    for(int32_t i = 0; i < screen_width*screen_height*4; i+=4)
    {
        pixels[i] = pixel[i];
        pixels[i+1] = pixel[i+1];
        pixels[i+2] = pixel[i+2];
        pixels[i+3] = pixel[i+3];
    }


}



int main()
{


    //window renderer
    sf::RenderWindow window(sf::VideoMode(screen_width, screen_height), ""Procedural Generation"");
    window.setVerticalSyncEnabled(true);


    //Texture
    sf::Texture Texture;
    Texture.create(screen_width, screen_height);


    //Sprite
    sf::Sprite sprite(Texture);
    regen();

    //TODO: i need to make a 2d array with some grayscale intensity values in each row
    //R, G, B
    //Next row...

    // then make 1 dimentional pixel and pixels pointer int arrays, one to be used for sfml to store pixel data with width*height*4(for each grayscale value RGBA)

    //CurrentPixelIndex2 int maps the 2D position of the pixel to its linear index in the pixel array.

    //The same value from arr2[x][y] is assigned to all color components (R, G, B) of the pixel at that index.


    
    while (window.isOpen()) //Main Game Loop
    {

        sf::Event event;
        while (window.pollEvent(event))
        {

            if (event.type == sf::Event::Closed)
                window.close();
            
            if(event.type == sf::Event::KeyReleased && event.key.code == sf::Keyboard::Enter)
                regen();

        };

        
        Texture.update(pixels);
        window.clear();
        window.draw(sprite);
        window.display();

    }

    return 0;
}
"
N8trJbyP,CodinGame_2023_08_27__15_31_39__mountains.sh,MonsterScripter,Bash,Sunday 27th of August 2023 08:31:51 AM CDT,"# The while loop represents the game.
# Each iteration represents a turn of the game
# where you are given inputs (the heights of the mountains)
# and where you have to print an output (the index of the mountain to fire on)
# The inputs you are given are automatically updated according to your last actions.

index_highest_mountain=""0""
max_highest_mounter=""0""
# game loop
while true; do
    for ((i=0; i<8; i++)); do
        # mountainH: représente la hauteur d'une montagne.
        read -r mountainH
        if [[ ""$max_highest_mounter"" -lt ""$mountainH"" ]]; then
            max_highest_mounter=""$mountainH""
            index_highest_mountain=""$i""
        fi
    done
    printf ""%s\n"" ""$index_highest_mountain""
    max_highest_mounter=""0""
    index_highest_mountain=""0""
done"
qyUD8QRB,Prevent Volume Up When Bluetooth Headset Disconnects (W10),Lorenzo501,Autohotkey,Sunday 27th of August 2023 08:21:03 AM CDT,"#Requires AutoHotkey 2.0.5
#NoTrayIcon
SetWinDelay(-1)
ProcessSetPriority(""High"")
Persistent()

#hotIf MouseIsOver(""ahk_class Shell_TrayWnd"") ; Argument is WinTitle (can add 3 other optional string arguments seperated with a comma)
*Volume_Up::
{
    if WinExist(""ahk_class Shell_TrayWnd"")
    {
        WinActivate()
        WinWaitNotActive()
    }
}
#hotIf
*Volume_Up::return

Volume_Up(false)

wmi  := ComObjGet(""winmgmts:"")
sink := ComObject(""WbemScripting.SWbemSink"")
ComObjConnect(sink, ""SINK_"")

; The numeral next to WITHIN is the interval in seconds and can be changed if needed
wmi.ExecNotificationQueryAsync(sink, ""SELECT * FROM __InstanceCreationEvent WITHIN 1 WHERE TargetInstance ISA `""Win32_PnPEntity`"""")
wmi.ExecNotificationQueryAsync(sink, ""SELECT * FROM __InstanceDeletionEvent WITHIN 1 WHERE TargetInstance ISA `""Win32_PnPEntity`"""")

OnExit(StopListening)

SINK_OnObjectReady(Obj, *)
{
    Event      := (Obj.Path_.Class = ""__InstanceCreationEvent"" ? ""Connected"" : ""Disconnected"")
    DeviceName := Obj.TargetInstance.Name

    if (DeviceName = ""Bluetooth Audio Renderer (2- Bluetooth stereo-audio)"")
        if (Event = ""Connected"")
            Volume_Up(true)
        else
        {
            StopListening()
            Hotkey(""*Volume_Up Up"", (*) => (Send(""{Volume_Up}""), ExitApp()), ""On"")
        }
}

StopListening(*) => ComObjConnect(sink)

Volume_Up(hk := """")
{
    status := hk ? ""On"" : ""Off""
    Hotif(""MouseIsOver(`""ahk_class Shell_TrayWnd`"")"")
    Hotkey(""*Volume_Up"", status)
    Hotif()
    Hotkey(""*Volume_Up"", status)
}

MouseIsOver(params_WinTitle_WinText_ExcludeTitle_ExcludeText*) => (MouseGetPos(,, &winId), winId = WinExist(params_WinTitle_WinText_ExcludeTitle_ExcludeText*))"
Zs5BQ10h,CodinGame_2023_08_27__15_19_21__mountain.c,MonsterScripter,C,Sunday 27th of August 2023 08:19:51 AM CDT,"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <stdbool.h>

/**
 * The while loop represents the game.
 * Each iteration represents a turn of the game
 * where you are given inputs (the heights of the mountains)
 * and where you have to print an output (the index of the mountain to fire on)
 * The inputs you are given are automatically updated according to your last actions.
 **/

typedef struct pair {
    int v1;
    int v2;
} pair;

int compare(const void* a, const void* b) {
    const pair* p1 = (const pair*)a;
    const pair* p2 = (const pair*)b;
    return p1->v2 > p2->v2;
}

int main() {
    const int maxM = 8;
    int index_highest_mountain = 0;
    int max_highest_mounter = 0;
    // game loop
    while (1) {
        for (int i = 0; i < maxM; i++) {
            // represents the height of one mountain.
            int mountain_h;
            scanf(""%d"", &mountain_h);
            if (max_highest_mounter < mountain_h) {
                max_highest_mounter = mountain_h;
                index_highest_mountain = i;
            }
        }
        printf(""%d\n"", index_highest_mountain);
        max_highest_mounter = 0;
        index_highest_mountain = 0;
    }
    return 0;
}
"
wwwvY2Nc,CC / TAPE WRITER,Microstar301,Lua,Sunday 27th of August 2023 08:05:00 AM CDT,"-- 
-- CC TAPE WRITER
--
-- made for CC Tweaked / Computercraft and Computronics
-- by Microstar301
-- 
--

tape = peripheral.find(""tape_drive"")
tape.setSpeed(1)
while tape.isReady()==false do
    term.clear()
    term.setCursorPos(1,1)
    print(""Insert Tape"")
    term.setCursorBlink(true)
    sleep(1)
end
term.setCursorBlink(false)
while (tape.getState()~=""STOPPED"" or tape.isEnd()==true) do
    term.clear()
    term.setCursorPos(1,1)
    print(""Please press the STOP button on the Tape drive"")
    sleep(0.1)
end
term.clear()
term.setCursorPos(1,1)
print(""Press ANY KEY to continue"")
print(""Press Q to cancel"")
e,k = os.pullEvent(""char"")
if k==""q"" or k==""Q"" then
    term.clear()
    print(""Cancelled"")
    return
end
term.clear()
term.setCursorPos(1,1)
function writetape()
    --xs=fs.getSize(""audio"")
    --xa=fs.open(""audio"",""rb"")
    xa = http.get(""https://example.com"", nil, true)
    --i=0
    --while (tape.isEnd()==false and tape.isReady()==true) do
        --X=xa.readAll()   
        tape.write(xa.readAll())
        print(""Wrote "",#xa.readAll(),""b."")
    --end
end
function keypress()
    os.pullEvent(""char"")
end
parallel.waitForAny(writetape,keypress)
term.clearLine()
term.setCursorPos(1,1)
"
wd2wsszF,Untitled,A_K_Alien,Python,Sunday 27th of August 2023 08:03:12 AM CDT,"import json

def build_category_tree(categories):
    category_dict = {}
    root_categories = []

    for category in categories:
        category_id = category['id']
        parent_id = category.get('parent')

        category_dict[category_id] = {
            'id': category_id,
            'name': category['name'],
            'next': []
        }

        if parent_id is None:
            root_categories.append(category_dict[category_id])
        else:
            if 'next' not in category_dict[parent_id]:
                category_dict[parent_id]['next'] = []
            category_dict[parent_id]['next'].append(category_dict[category_id])

    return root_categories

# Считывание количества наборов входных данных
num_sets = int(input())

# Цикл по наборам входных данных
for _ in range(num_sets):
    num_categories = int(input())
    input_data = json.loads(""["" + "", "".join(input() for _ in range(num_categories)) + ""]"")

    category_tree = build_category_tree(input_data)
    print(json.dumps(category_tree, indent=2))
"
KiCNwryF,Huawei Bootloader Pattern CLQX9SRFI3PMWG1H Key Generator,LikeRampage,Python,Sunday 27th of August 2023 07:55:32 AM CDT,"import random

key = ""CLQX9SRFI3PMWG1H""
number_of_keys = 10

keys = []

for _ in range(number_of_keys):
    random_key = ''.join(random.choice(key) for _ in range(len(key)))
    keys.append(random_key)

print(""Generated Keys:"")
for generated_key in keys:
    print(generated_key)"
sFDVWET7,CC / TEST TAPE CREATOR,Microstar301,Lua,Sunday 27th of August 2023 07:42:40 AM CDT,"-- 
-- CC TEST TAPE CREATOR
--
-- made for CC Tweaked / Computercraft and Computronics
-- 
--

tape = peripheral.wrap(""bottom"")
tape.seek(-tape.getSize())

--PITCH IS EXPONENTIAL
-- 3 = 1000hz
-- 6 = 500hz
-- 12 = 250hz
-- 24 = 125hz
--in HZ !
pitch=300

pitch=((3*1000)/pitch)
for i=1,333*(5/pitch) do
    for t=1,pitch do
        tape.write(155)
    end
    for t=1,pitch do
        tape.write(100)
    end
    if ((i%500)==0) then
        sleep(0.1)
    end
    write(""*"")
end"
TW7ft2US,Untitled,den4ik2003,C++,Sunday 27th of August 2023 07:21:47 AM CDT,"#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <unordered_set>

int SuitToNum(char suit) {
  if (suit == 'S') return 0;
  if (suit == 'C') return 1;
  if (suit == 'D') return 2;
  return 3;
}

char NumToSuit(int num) {
  if (num == 0) return 'S';
  if (num == 1) return 'C';
  if (num == 2) return 'D';
  return 'H';
}

int ValToNum(char val) {
  if (val <= '9' && val >= '2') {
    return val - '2';
  }
  if (val == 'T') return 8;
  if (val == 'J') return 9;
  if (val == 'Q') return 10;
  if (val == 'K') return 11;
  return 12;
}

std::string NumToVal(int num) {
  if (num >= 0 && num <= 7) return std::to_string(num + 2);
  if (num == 8) return ""T"";
  if (num == 9) return ""J"";
  if (num == 10) return ""Q"";
  if (num == 11) return ""K"";
  return ""A"";
}

std::pair<int, int> Input(std::vector<std::vector<bool>>& used,
                          std::vector<std::pair<std::string, std::string>>& cards,
                          int n) {
  std::string myFirstCard, mySecondCard;
  std::cin >> myFirstCard >> mySecondCard;
  used[SuitToNum(myFirstCard[1])][SuitToNum(myFirstCard[0])] = true;
  used[SuitToNum(mySecondCard[1])][SuitToNum(mySecondCard[0])] = true;
  cards[0] = {myFirstCard, mySecondCard};

  for (int i = 1; i < n; ++i) {
    std::string firstCard, secondCard;
    std::cin >> firstCard >> secondCard;
    used[SuitToNum(firstCard[1])][SuitToNum(firstCard[0])] = true;
    used[SuitToNum(secondCard[1])][SuitToNum(secondCard[0])] = true;
    cards[i] = {firstCard, secondCard};
  }
  return {ValToNum(myFirstCard[0]), ValToNum(mySecondCard[0])};
}

std::vector<std::string> SameCardsCase(std::vector<std::vector<bool>> used,
                                       std::vector<std::pair<std::string, std::string>>& cards,
                                       int val, int n) {
  std::vector<std::string> answer;
  std::vector<char> suits = {'S', 'C', 'D', 'H'};
  // set case
  for (char suit : suits) {
    if (!used[SuitToNum(suit)][val]) {
      std::string cval(NumToVal(val));
      cval += suit;
      answer.push_back(cval);
    }
  }
  // pair case
  bool isImpossible = false;
  std::vector<int> withSame; // кому нельзя дать сет
  for (int i = 1; i < n; ++i) {
    char val1 = cards[i].first[0];
    char val2 = cards[i].first[1];
    int numVal1 = ValToNum(val1);
    int numVal2 = ValToNum(val2);
    if (val1 == val2) { // нельзя, тк сет
      if (numVal1 > val) {
        isImpossible = true;
        break;
      }
      for (char suit : suits) {
        used[SuitToNum(suit)][val1] = true;
      }
    }
    int numValMax = std::max(numVal1, numVal2);
    if (numValMax > val) { // нельзя, тк будет пара сильнее моей
      for (char suit : suits) {
        used[SuitToNum(suit)][val] = true;
      }
    }
  }
  if (isImpossible) return answer;
  for (int i = 0; i < 4; ++i) {
    for (int j = 0; j < 13; ++j) {
      if (!used[i][j]) {
        std::string cval(NumToVal(j));
        cval += NumToSuit(i);
        answer.push_back(cval);
      }
    }
  }
  return answer;
}

int main() {
  int t;
  std::cin >> t;
  for (int iter = 0; iter < t; ++iter) {
    int n;
    std::cin >> n;
    std::vector<std::vector<bool>> used(4, std::vector<bool>(13));
    std::vector<std::pair<std::string, std::string>> cards(n);
    std::pair<int, int> myCards;
    myCards = Input(used, cards, n);

    if (myCards.first == myCards.second) { // 2 одинаковые
      auto answer = SameCardsCase(used, cards, myCards.first, n);
      std::cout << answer.size() << ""\n"";
      for (auto& el : answer) {
        std::cout << el << ""\n"";
      }
    }


  }
}
"
f4t6ewaF,Baba is SNES,milk_cool,C,Sunday 27th of August 2023 07:08:21 AM CDT,"#include <snes.h>

extern char tilfont, palfont;
extern char gfxbaba, gfxbaba_end, palbaba, palbaba_end;

//---------------------------------------------------------------------------------
int main(void) {
	char baba_x = 0; // baba x
	char baba_y = 0; // baba y
	char baba_s = 0; // baba state
	char baba_f = 0; // baba bigger frame
	char baba_S = 0; // baba stage, smaller frame
	
	
	
	// Initialize SNES
	consoleInit();

	// Initialize text console with our font
	consoleSetTextVramBGAdr(0x6800);
	consoleSetTextVramAdr(0x3000);
	consoleSetTextOffset(0x0100);
	consoleInitText(0, 16 * 2, &tilfont, &palfont);

	// Init background
	bgSetGfxPtr(0, 0x2000);
	bgSetMapPtr(0, 0x6800, SC_32x32);

	// Init sprites
	oamInitGfxSet(&gfxbaba, (&gfxbaba_end-&gfxbaba), &palbaba, (&palbaba_end-&palbaba), 0, 0x16000, OBJ_SIZE32_L64);

	// Now Put in 16 color mode and disable Bgs except current
	setMode(BG_MODE1, 0);
	bgSetDisable(1);
	bgSetDisable(2);

	// Draw a BABA
	
	oamSetEx(0, OBJ_SMALL, OBJ_SHOW);

	// Wait for nothing :P
	setScreenOn();

	while (1)
	{
		baba_S += 1;
		baba_S %= 60;
		unsigned short int pad0 = padsCurrent(0);
		if(pad0 && baba_S % 5 == 0) {
			if(pad0 & KEY_UP) {
				baba_y -= 1;
				baba_s = 1;
			}
			if(pad0 & KEY_DOWN) {
				baba_y += 1;
				baba_s = 3;
			}
			if(pad0 & KEY_LEFT) {
				baba_x -= 1;
				baba_s = 2;
			}
			if(pad0 & KEY_RIGHT) {
				baba_x += 1;
				baba_s = 0;
			}
			baba_x %= 10;
			baba_y %= 9;
			baba_f += 1;
			baba_f %= 4;
		}
		unsigned short int baba_p = baba_s * 4 * 3 + baba_f * 3 + baba_S / 20;
		oamSet(0, baba_x * 24, baba_y * 24, 0, 0, 0, (baba_p / 4) * 64 + (baba_p % 4) * 4, 0);
		WaitForVBlank();
	}
	return 0;
}"
9XWXDzcV,Calculator,webbersof,Python,Sunday 27th of August 2023 06:52:23 AM CDT,"def exit_condition():
    return 'Thank you for using the calculator. Goodbye!'

def invalid_condition():
    return 'Invalid input. Please try again.'

def error_statement():
    return 'Error: Cannot divide by zero!'

def comparing(x, y):
    if x > y:
        return f'{x} > {y}'
    elif x < y:
        return f'{x} < {y}'
    else:
        return f'{x} = {y}'

def _execute_operation(choice, x, y):
    operations = {
        ""1"": lambda: x + y,
        ""2"": lambda: x - y,
        ""3"": lambda: x * y,
        ""4"": lambda: x / y if y != 0 else error_statement(),
        ""5"": lambda: x ** y,
        ""6"": lambda: x % y if y != 0 else error_statement(),
        ""7"": lambda: comparing(x, y),
    }
    return operations[choice]()

def calculator():
    print(""Welcome to the Advanced Calculator!"")

    while True:
        print(""\nSelect an operation:"")
        print(""1. Addition"")
        print(""2. Subtraction"")
        print(""3. Multiplication"")
        print(""4. Division"")
        print(""5. Grading"")
        print(""6. Modulo"")
        print(""7. Comparing"")
        print(""8. Exit"")

        choice = input(""Enter the operation number (1/2/3/4/5/6/7/8): "")

        if choice == ""8"":
            print(exit_condition())
            break
        elif choice not in (""1"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7""):
            print(invalid_condition())
            continue

        num1 = float(input(""Enter the first number: ""))
        num2 = float(input(""Enter the second number: ""))

        operation_result = _execute_operation(choice, num1, num2)
        print(f""Result: {operation_result}"")

if __name__ == ""__main__"":
    calculator()
"
JxdB2QzC,Untitled,itsspynex,C++,Sunday 27th of August 2023 06:41:57 AM CDT,"#include <SFML/Audio.hpp>
#include <SFML/Graphics.hpp>
#include <SFML/Network.hpp>
#include <SFML/Main.hpp>
#include <SFML/System.hpp>
#include <SFML/Window.hpp>
#include <SFML/OpenGL.hpp>
#include ""PerlinNoise-master/PerlinNoise.hpp""
#include <iostream>

using namespace std;


    const int screen_width = 800;
    const int screen_height = 800;
    const int a = 800;
    const int b = 800;
    sf::Uint8* pixels = new sf::Uint8[a * b * 4];

void regen()
{
    uint8_t * pixel = new uint8_t[a * b * 4];
    
    //Noise function perameters
    int random = rand();
    const siv::PerlinNoise::seed_type seed = rand();
    const siv::PerlinNoise perlin{ seed };

    //Draw Pixels
    std::vector<int[screen_width]> arr(screen_height);
    std::vector<int[screen_width]> arr1(screen_height);
    std::vector<int[screen_width]> arr2(screen_height);
    for(int32_t i = 0; i < screen_height; ++i)
    {
        for(int32_t j = 0; j < screen_width; ++j)
        {
            int p_value[3];
            const double noise = perlin.octave2D_01((i * 0.01), (j * 0.01), 4);
            if(noise <= 0.5) 
            {
                arr[i][j] = {0};
                arr1[i][j] = {66};
                arr2[i][j] = {137}; 
            }
            else
            {
                arr[i][j] = {66};
                arr1[i][j] = {98};
                arr2[i][j] = {32};
            }


            //Convert 2d representation of each index to 1d
            int CurrentPixelIndex2 = ((i * screen_height) + j);
            pixel[4 * CurrentPixelIndex2] = arr[i][j];
            pixel[4 * CurrentPixelIndex2 +1] = arr1[i][j];
            pixel[4 * CurrentPixelIndex2 +2] = arr2[i][j];
            pixel[4 * CurrentPixelIndex2 +3] = 255;
        }
    }
    for(int32_t i = 0; i < screen_width*screen_height; i+=4)
    {
        pixels[i] = pixel[i];
        pixels[i+1] = pixel[i+1];
        pixels[i+2] = pixel[i+2];
        pixels[i+3] = pixel[i+3];
    }


}



int main()
{


    //window renderer
    sf::RenderWindow window(sf::VideoMode(screen_width, screen_height), ""Procedural Generation"");
    window.setVerticalSyncEnabled(true);


    //Texture
    sf::Texture Texture;
    Texture.create(screen_width, screen_height);


    //Sprite
    sf::Sprite sprite(Texture);


    //TODO: i need to make a 2d array with some grayscale intensity values in each row
    //R, G, B
    //Next row...

    // then make 1 dimentional pixel and pixels pointer int arrays, one to be used for sfml to store pixel data with width*height*4(for each grayscale value RGBA)

    //CurrentPixelIndex2 int maps the 2D position of the pixel to its linear index in the pixel array.

    //The same value from arr2[x][y] is assigned to all color components (R, G, B) of the pixel at that index.


    
    while (window.isOpen()) //Main Game Loop
    {

        sf::Event event;
        while (window.pollEvent(event))
        {

            if (event.type == sf::Event::Closed)
                window.close();
            
            if(event.type == sf::Event::KeyReleased && event.key.code == sf::Keyboard::Enter)
                regen();

        };

        
        Texture.update(pixels);
        window.clear();
        window.draw(sprite);
        window.display();

    }

    return 0;
}
"
jYp5CMf3,SubtitleEdit: FixExtraSpaces,ivandrofly,C#,Sunday 27th of August 2023 06:39:14 AM CDT,"public static string FixExtraSpaces(this string s)
{
	if (string.IsNullOrEmpty(s))
	{
		return s;
	}

	const char whiteSpace = ' ';
	var k = -1;
	for (var i = s.Length - 1; i >= 0; i--)
	{
		var ch = s[i];
		if (k < 2)
		{
			if (ch == whiteSpace)
			{
				k = i + 1;
			}
		}
		else if (ch != whiteSpace)
		{
			// only keep white space if it doesn't succeed/precede CRLF
			// 2: when we `if (k - (i + skipCount) >= 1) = > 0`
			var skipCount = (ch == '\n' || ch == '\r') || (k < s.Length && (s[k] == '\n' || s[k] == '\r')) ? 1 : 2;

			// extra space found
			if (k - (i + skipCount) >= 1)
			{
				s = s.Remove(i + 1, k - (i + skipCount));
			}

			// Reset remove length.
			k = -1;
		}
	}

	return s;
}


Note: there is a note that explain why we return 2!"
M3n3kvEz,just variables,RealSpeshul,JSON,Sunday 27th of August 2023 06:24:31 AM CDT,"{
  ""changelog"": [
    {
     ""details"": {
        ""date"": ""August 27, 2023"",
        ""semver"": ""Patch"",
        ""stamp"": ""1693144718"",
        ""url"": ""https://pastebin.com/raw/Jz8bHbKS""
      },
        ""build"": ""1"",
        ""version"": ""0.0.1""
    }
  ]
}"
TVMNPcke,data677,TestGuy1,JSON,Sunday 27th of August 2023 06:00:06 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '863dd69b1b1c6e77a6ea35d726454b562fce7f84ce0351d199b83ad8ea918e89500d7aaac8fc02a2662229cdc70887c7bf859272d741208c0775ad7152f141a8cdf2973556a240e559e76bdbb97731b68443fe0301fa9898d5b225c35c9eb548aca5c6b8176ad6d5dca455745180cc4be36f1248c09f368fb13cd846f4b3b418',
  otherdata: [
    '62bbd957114e340ca4fd3f9e0570e299',
    '1eca4db493ebedfa93b729f71fa15e03',
    '55bf80beff3c67a03d7631021022cfc7',
    'f8b23cdf3124654fbfda0822cd0d6418',
    'a0f77f5a03d878caf1affe532e1bdf8f',
    'b6d65c56e9b1e0be7ae30f711bd89847',
    '86e258090ba093fea8e8dddeb3093549',
    'bd5e916df64063555caa124e7a51e6ae'
  ]
}"
Yg4DZkr9,Untitled,Josif_tepe,C++,Sunday 27th of August 2023 05:37:03 AM CDT,"#include <queue>
#include <iostream>
#include <vector>
#include <cstring>
using namespace std;
typedef long long ll;
const int maxn = 3e5 + 10;
vector<int> graph[maxn];
ll dp[maxn][1 << 5];
int color[maxn];
ll dfs(int node, int bitmask, int length) {
    if(dp[node][bitmask] != -1) {
        return dp[node][bitmask];
    }
    ll res = 0;
    if(dp[node][bitmask] != -1) {
        return dp[node][bitmask];
    }
    if(length >= 2) {
        res++;
    }
    for(int neighbour : graph[node]) {
        if(!(bitmask & (1 << color[neighbour]))) {
            res += dfs(neighbour, bitmask | (1 << color[neighbour]), length + 1);
        }
    }
    return dp[node][bitmask] = res;
}
int main(int argc, const char * argv[]) {
    int n, m, k;
    cin >> n >> m >> k;
    
    for(int i = 0; i < n; i++) {
        cin >> color[i];
        color[i]--;
    }
    for(int i = 0; i < m; i++) {
        int a, b;
        cin >> a >> b;
        a--;
        b--;
        graph[a].push_back(b);
        graph[b].push_back(a);
    }
    memset(dp, -1, sizeof dp);
    ll res = 0;
    for(int i = 0; i < n; i++) {
        res += dfs(i, (1 << color[i]), 1);
    }
    cout << res << endl;
    return 0;
}

//4 3 3 1 2 1 3 1 2
//2 3
//4 2
"
Y6fwFWnm,PrintTable,Urara_Chiya,Lua,Sunday 27th of August 2023 04:48:01 AM CDT,"key = """"
function PrintTable(table , level)
  level = level or 1
  local indent = """"
  for i = 1, level do
    indent = indent..""  ""
  end

  if key ~= """" then
    print(indent..key.."" ""..""="".."" ""..""{"")
  else
    print(indent .. ""{"")
  end

  key = """"
  for k,v in pairs(table) do
     if type(v) == ""table"" then
        key = k
        PrintTable(v, level + 1)
     else
        local content = string.format(""%s%s = %s"", indent .. ""  "",tostring(k), tostring(v))
      print(content)  
      end
  end
  print(indent .. ""}"")

end"
cyUtnx7V,CodinGame_2023_08_27__11_45_06__mars_lander.java,MonsterScripter,Java,Sunday 27th of August 2023 04:45:27 AM CDT,"import java.util.*;
import java.io.*;
import java.math.*;

class Player {

    public static void main(String args[]) {
        Scanner in = new Scanner(System.in);
        
        int surfaceN = in.nextInt(); // le nombre de points utilisés pour dessiner la surface de Mars.
        for (int i = 0; i < surfaceN; i++) {
            int landX = in.nextInt(); // Coordonnée X d'un point de la surface.
            int landY = in.nextInt(); // Coordonnée Y d'un point de la surface. En reliant tous les points ensemble de manière séquentielle, vous formez la surface de Mars.
        }

        // Boucle de jeu
        int prevVSpeed = 0;
        while (true) {
            int X = in.nextInt();
            int Y = in.nextInt();
            int hSpeed = in.nextInt(); // la vitesse horizontale (en m/s), peut être négative.
            int vSpeed = in.nextInt(); // la vitesse verticale (en m/s), peut être négative.
            int fuel = in.nextInt(); // la quantité de carburant restante en litres.
            int rotate = in.nextInt(); // l'angle de rotation en degrés (-90 à 90).
            int power = in.nextInt(); // la puissance des fusées (0 à 4).
            rotate = 0; // la zone d'atterrissage est juste en dessous du robot. Vous pouvez donc ignorer la rotation et toujours indiquer 0 en angle de rotation.
            if (vSpeed <= -40) {
                power = 4;
            }
            if (vSpeed > -40) {
                power = 0;
            }
            System.out.println(String.format(""%d %d"", rotate, power));
        }
    }
}

/**

 	Objectif
L'objectif de votre programme est de faire atterrir, sans crash, la capsule ""Mars Lander"" qui contient le rover Opportunity. La capsule “Mars Lander” permettant de débarquer le rover est pilotée par un programme qui échoue trop souvent dans le simulateur de la NASA.

Notez que ce problème peut sembler difficile, mais en réalité il est simple à résoudre. Ce puzzle constitue le premier des trois niveaux, par conséquent, certains contrôles sont présentés mais ne sont pas nécessaires pour résoudre ce premier niveau.
 	Règles
Sous forme de jeu, le simulateur place Mars Lander dans une zone du ciel de Mars.

	La zone fait 7000m de large et 3000m de haut.

Pour ce niveau, Mars Lander se situe au dessus de la zone d’atterrissage, en position verticale, avec aucune vitesse initiale.

Il existe une unique zone d'atterrissage plane sur la surface de Mars et elle mesure au moins 1000 mètres de large.Toutes les secondes, en fonction des paramètres d’entrée (position, vitesse, fuel, etc.), le programme doit fournir le nouvel angle de rotation souhaité ainsi que la nouvelle puissance des fusées de Mars Lander:
	Angle de -90° à 90°. Puissance des fusées de 0 à 4.

Pour ce niveau, vous n'avez besoin de contrôler que la puissance des fusées : l'angle doit rester à 0.Le jeu modélise une chute libre sans atmosphère. La gravité sur Mars est de 3,711 m/s². Pour une puissance des fusées de X, on génère une poussée équivalente à X m/s² et on consomme X litres de fuel. Il faut donc une poussée de 4 quasi verticale pour compenser la gravité de Mars.

Pour qu’un atterrissage soit réussi, la capsule doit :
atterrir sur un sol plat
atterrir dans une position verticale (angle = 0°)
la vitesse verticale doit être limitée ( ≤ 40 m/s en valeur absolue)
la vitesse horizontale doit être limitée ( ≤ 20 m/s en valeur absolue)

Souvenez-vous que ce puzzle a été simplifié, ainsi :
la zone d'atterrissage est juste en dessous du robot. Vous pouvez donc ignorer la rotation et toujours indiquer 0 en angle de rotation.
vous n'avez pas besoin de tenir compte des coordonnées de la surface.
il vous suffit que votre vitesse d'atterrissage soit entre 0 et 40m/s.
lorsque la capsule descend vers le sol, la vitesse verticale est négative. Lorsque la capsule s'élève dans les airs, la vitesse verticale est positive.
 	Note
Pour ce premier niveau d'introduction, Mars Lander doit passer un unique test.

Les validateurs sont différents des tests mais restent très similaires. Un programme qui passe un test passera le validateur correspondant sans problème.
 	Entrées du jeu
Le programme doit d'abord lire les données d'initialisation depuis l'entrée standard, puis, dans une boucle infinie, lire depuis l'entrée standard les données relatives à Mars Lander et fournir sur la sortie standard les instructions de mouvement de Mars Lander.
Entrées d'initialisation
Ligne 1 : le nombre surfaceN de points formant le sol de Mars.
Les surfaceN lignes suivantes : un couple d'entiers landX landY donnant les coordonnées d’un point du sol. En reliant les points entre eux de manière séquentielle on obtient la surface de Mars formée de segments. Pour le premier point, landX = 0 et pour le dernier point, landX = 6999.
Entrées pour un tour de jeu
Une ligne unique constituée de 7 entiers : X Y hSpeed vSpeed fuel rotate power
X,Y sont les coordonnées en mètres de la capsule.
hSpeed et vSpeed sont respectivement la vitesse horizontale et la vitesse verticale de Mars Lander (en m/s). Suivant le déplacement de Mars Lander, les vitesses peuvent être négatives.
fuel est la quantité de fuel restant en litre. Quand le fuel vient à manquer, la puissance des fusées tombe à zéro.
rotate est l’angle de rotation de Mars Lander en degré.
power est la puissance des fusées de la capsule.
Sortie pour un tour de jeu
Une ligne unique constituée de 2 entiers : rotate power
rotate est l’angle de rotation souhaité pour Mars Lander. à noter que la rotation effective d’un tour à l’autre est limitée à +/- 15° par rapport à l’angle du tour précedent.
power est la puissance des fusées. 0 = éteintes. 4 = puissance maximum. La puissance effective d'un tour à l'autre est limitée à +/- 1.
Contraintes
2 ≤ surfaceN < 30
0 ≤ X < 7000
0 ≤ Y < 3000
-500 < hSpeed, vSpeed < 500
0 ≤ fuel ≤ 2000
-90 ≤ rotate ≤ 90
0 ≤ power ≤ 4
Temps de réponse pour un tour ≤ 100ms
Exemple
Entrée d'initialisation
6         	(surfaceN) Surface faite de 6 points
0 1500      	(landX landY)
1000 2000	(landX landY)
2000 500	(landX landY) Début zone de plat
3500 500	(landX landY) Fin zone de plat
5000 1500	(landX landY)
6999 1000	(landX landY)
Aucune sortie attendue
Vous pouvez ignorer ceci mais vous devez toutefois lire les données.
Entrée pour le tour 1
2500 2500 0 0 500 0 0 	(X Y hSpeed vSpeed fuel rotate power)
Sortie pour le tour 1
0 3
Entrée pour le tour 2
2500 2499 0 -3 499 0 1 	(X Y hSpeed vSpeed fuel rotate power)
Sortie pour le tour 2
0 3
Entrée pour le tour 3
2500 2495 0 -4 497 0 2 	(X Y hSpeed vSpeed fuel rotate power)
Sortie pour le tour 3
0 2
 */
"
cU2m4sJR,Lyrics,TUYU01,Python,Sunday 27th of August 2023 04:24:31 AM CDT,"import re
import requests
from bs4 import BeautifulSoup

def get_lyrics(query):
    headers = {
        ""User-Agent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36""
    }
    try:
        req = requests.get(f""https://www.google.com/search?q={query.replace(' ', '+')}+lyrics"", headers=headers).text
        soup = BeautifulSoup(req, ""html.parser"")
        data = soup.findAll(""div"", {""data-lyricid"": True})
        if data:
            content = re.sub('</span></div><div.*?>', ""\n</span>"", str(data[0]))
            parse = BeautifulSoup(content, ""html.parser"")
            lyrics = ""\n"".join([x.get_text() for x in parse.find_all(""span"", attrs={""jsname"": True})])
            author = soup.find(""div"", attrs={""class"": ""auw0zb""}).text
            return {""message"": ""success"", ""lyrics"": lyrics, ""author"": author if author else ""unknown"", ""source"": ""google.com""}
        else:
            url = requests.get(f""https://www.musixmatch.com/search/{query.replace(' ', '+')}"", headers=headers).text
            try:
               mxm = re.search('<a class=""title"" href=""(.*?)""', url).group(1)
            except AttributeError:
               return {""message"": ""Sorry, no result found.""}
            if mxm:
                sop = BeautifulSoup(requests.get(f""https://www.musixmatch.com{mxm}"", headers=headers).text, ""html.parser"")
                mxm_data = sop.findAll(class_=""lyrics__content__ok"", text=True)
                if len(mxm_data) > 0:
                   lyrics = ""\n"".join(x.text for x in mxm_data)
                else:
                   lyrics = sop.find(class_=""lyrics__content__warning"", text=True)
                author = sop.select_one('.mxm-track-title__artist-link').text
                return {""message"": ""success"", ""lyrics"": lyrics if lyrics else f""https://www.musixmatch.com{mxm}"", ""author"": author, ""source"": ""musixmatch.com""}
    except Exception as e:
        print(e)
        return ""Sorry, an error occurred.""
    
lyrics = get_lyrics(""miku"")
print(lyrics)"
QcdBywRF,Untitled,Josif_tepe,C++,Sunday 27th of August 2023 04:22:56 AM CDT,"#include <queue>
#include <iostream>
#include <vector>
#include <cstring>
using namespace std;
const int maxn = 50005;
int color[maxn];
int invitation[maxn];
vector<int> graph[maxn];
int main(int argc, const char * argv[]) {
    int n;
    cin >> n;
    for(int i = 0; i < n; i++) {
        cin >> invitation[i];
    }
    int m;
    cin >> m;
    for(int i = 0; i < m; i++) {
        int a, b;
        cin >> a >> b;
        a--; b--;
        graph[a].push_back(b);
        graph[b].push_back(a);
    }
    queue<int> q;
    int initial_accepts = 0;
    memset(color, 0, sizeof color);
    for(int i = 0; i < n; i++) {
        if(invitation[i] == 1) {
            color[i] = 1;
            q.push(i);
            initial_accepts++;
        }
        if((int) graph[i].size() == 0) {
            color[i] = 0;
        }
    }
    while(!q.empty()) {
        int node = q.front();
        q.pop();
        if(color[node] == 1) {
            for(int neighbour : graph[node]) {
                if(color[neighbour] == 0) {
                    color[neighbour] = 2;
                    q.push(neighbour);
                }
                else if(color[neighbour] == 1) {
                    color[neighbour] = 3;
                    q.push(neighbour);
                }
            }
        }
        else if(color[node] == 2) {
            for(int neighbour : graph[node]) {
                if(color[neighbour] == 0) {
                    color[neighbour] = 1;
                    q.push(neighbour);
                }
                else if(color[neighbour] == 2) {
                    color[neighbour] = 3;
                    q.push(neighbour);
                }
            }
        }
        else if(color[node] == 3) {
            for(int neighbour : graph[node]) {
                if(color[neighbour] != 3) {
                    color[neighbour] = 3;
                    q.push(neighbour);
                }
            }
        }
    }
    for(int i = 0; i < n; i++) {
        if(color[i] == 3) {
            q.push(i);
        }
    }
    vector<bool> visited(n, false);
    while(!q.empty()) {
        int node = q.front();
        q.pop();
        for(int neighbour : graph[node]) {
            if(!visited[neighbour]) {
                visited[neighbour] = true;
                color[neighbour] = 3;
                q.push(neighbour);
            }
        }
    }
    int ones = 0, twos = 0, threes = 0;
    for(int i = 0; i < n; i++) {
        if(color[i] == 1) {
            ones++;
        }
        else if(color[i] == 2) {
            twos++;
        }
        else if(color[i] == 3) {
            threes++;
        }
    }
    int res1 = threes + max(ones, twos);
    cout << max(res1, initial_accepts) << endl;
    return 0;
}
"
in0URm1G,paginator_test,Coolaidman,Python,Sunday 27th of August 2023 04:01:31 AM CDT,"{""embed"": {""title"": ""title"", ""description"": ""description""}}"
L073xueJ,Untitled,Dawate,Lua,Sunday 27th of August 2023 02:50:14 AM CDT,"local component = require(""component"")
for 1, 20 do
component.note_block.trigger()
end"
3MMKhERY,Unreal Engine - video 12,fcamuso,C++,Sunday 27th of August 2023 02:10:58 AM CDT,"//teletrasportatore.h

// Fill out your copyright notice in the Description page of Project Settings.

#pragma once

#include ""CoreMinimal.h""
#include ""Components/ActorComponent.h""
#include ""Teletrasportatore.generated.h""


UCLASS( ClassGroup=(Custom), meta=(BlueprintSpawnableComponent) )
class FPS_TEST_API UTeletrasportatore : public UActorComponent
{
	GENERATED_BODY()

public:	
	// Sets default values for this component's properties
	UTeletrasportatore();

protected:
	// Called when the game starts
	virtual void BeginPlay() override;

	UInputComponent* InputComponent;
	

	public:	
	// Called every frame
	virtual void TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction* ThisTickFunction) override;
	
	UFUNCTION(BlueprintCallable, Category = ""Movement"")
	 void TentaTeletrasporto(float DeltaTime, bool forzato = false);

private:
	AActor* owner = nullptr;
	float TempoTrascorso = 0.0;

	UPROPERTY(EditAnywhere)
		bool AutoTele = false;
		
};
//==================================================================================
//==================================================================================
//==================================================================================


//teletrasportatore.cpp
// Fill out your copyright notice in the Description page of Project Settings.


#include ""Teletrasportatore.h""

// Sets default values for this component's properties
UTeletrasportatore::UTeletrasportatore()
{
	// Set this component to be initialized when the game starts, and to be ticked every frame.  You can turn these features
	// off to improve performance if you don't need them.
	PrimaryComponentTick.bCanEverTick = true;
	
	// ...
}


// Called when the game starts
void UTeletrasportatore::BeginPlay()
{
	Super::BeginPlay();
	owner = GetOwner();


	// ...
	
}


// Called every frame
void UTeletrasportatore::TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction* ThisTickFunction)
{
	Super::TickComponent(DeltaTime, TickType, ThisTickFunction);

	if (!AutoTele) return;

	TentaTeletrasporto(DeltaTime);
}

void UTeletrasportatore::TentaTeletrasporto(float DeltaTime, bool forzato)
{
	TempoTrascorso += DeltaTime;

	if (TempoTrascorso >= 5 || forzato)
	{

		if (FMath::FRand() > 0.99 || forzato)
		{
			TempoTrascorso = 0;

			owner->SetActorLocation(FVector(1500, 1500, 0) + FVector(
				FMath::RandRange(0, 100),
				FMath::RandRange(0, 100),
				400));
		}
	}
}

"
BKqpLwyU,Solving doors in RS by distance to anchor,WarPie90,Delphi,Sunday 27th of August 2023 01:09:24 AM CDT,"program new;
{$DEFINE SRL_USE_REMOTEINPUT}
{$I SRL/osr.simba}

(*
  This solution assumes that you have an anchor that is either perpendicular or parallel to the door
  So it's either in the angle of facing the closed door, or it's facing the open door.

  Concept: 
    Find the door, and find an object which we call anchor, in this case it's a black ledger
    
    Now we can use the distance from the ledger to the door to determine if the door is open. The door state
    can be defined as; if the distance is less than some value we can state that the door is open because
    the door in this state would be closer to the anchor.

    The door is closed if it's above this value. So for example an open door would have a distance between
    18..19, while a closed door would have a distance between 21..22.. we can now say the cutoff between
    the states is approximately 20..

    This implementation, how you choose to attack it is up to you.. so long as you can generate a varying distance
    value between states to something else (an anchor), you can use this concept.  
*)

var
  door,ledger: TPointArray;
  p,q: Vector3;
  me,ledger_pt,door_pt: TPoint;
  ATPA: T2DPointArray;
  LeadgerSearchBox, DoorSearchBox: TBox;
  RSW: TRSWalker;
begin
  RSW.Setup([[2656-500, 2734-500, 2656+500, 2734+500]]);
  RSClient.Image.setFontSize(15);
  RSClient.Image.setFontAntialiasing(False);
  WriteLn RSW.GetMyPos();

  while True do
  begin
    MM2MS.ZoomLevel := Options.GetZoomLevel();

    // my location for efficieny, avoidng computing twice
    me := RSW.GetMyPos();

    // rough area of where the ledger and door is
    LeadgerSearchBox := RSW.GetTileMSEx(me, [2656, 2734]).Expand(10).Bounds();
    DoorSearchBox    := RSW.GetTileMSEx(me, [2646, 2754]).Expand(30).Bounds();

    // find the ledger, and the door tpas
    srl.FindColors(ledger, CTS2(1776416, 1, 0.01, 0.01),  LeadgerSearchBox);
    srl.FindColors(door,   CTS2(1993096, 13, 0.08, 1.02), DoorSearchBox);

    // cluster door just in case of noise... and get the big one
    door := door.Erode(1).Grow(1);
    ATPA := door.Cluster(2);
    door := ATPA.Biggest();

    // cluster ledger just in case of noise... and get the big one
    ATPA := ledger.Cluster(2);
    ledger := ATPA.Biggest();

    // ensure no failure
    if (length(ledger) = 0) or (length(door) = 0) then continue;

    // find the point in the ledger that's closest to the door and vice versa
    // alternatively we could just use the mean and skip this step in many cases.
    ledger.Sort(door.Mean());
    ledger_pt := ledger[0];

    door.Sort(ledger_pt);
    door_pt := door[0];


    // convert to minimap to work in 2d space, so distance is always the same no matter position,
    // camera angle and zoom.
    p := MainScreen.PointToMM(door_pt);
    q := MainScreen.PointToMM(ledger_pt);

    WriteLn p.Distance(q); // write the distance output for debugging

    // draw state on client
    RSClient.Image.Clear();
    if p.Distance(q) <= 20 then
      RSClient.Image.DrawText('Open', Door.Mean(), 1)
    else
      RSClient.Image.DrawText('Closed', Door.Mean(), 1);

    RSClient.Image.DrawTPA(TPAFromLine(door_pt, ledger_pt), 255); // draw distance line
  end;
end."
2PjeuFkx,CodinGame_2023_08_26__22_14_56__nearest_zero.cpp,MonsterScripter,C++,Sunday 27th of August 2023 12:59:59 AM CDT,"#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <cmath>
#include <climits>
#include <cstdlib>

using namespace std;

/**
 * Objectif
 * Dans cet exercice, vous devez analyser un relevé de températures pour trouver quelle température se rapproche le plus de zéro.
 * 
 * Exemple de températures
 * Ici, -1 est le plus proche de 0.
 * 
 * Règles
 * Écrivez un programme qui affiche la température la plus proche de 0 parmi les données d'entrée.
 * Si deux nombres sont aussi proches de zéro, alors l'entier positif sera considéré comme étant le plus proche de zéro
 * (par exemple, si les températures sont -5 et 5, alors afficher 5).
 * 
 * Entrées du jeu
 * Votre programme doit lire les données depuis l'entrée standard et écrire le résultat sur la sortie standard.
 * 
 * Entrée
 * Ligne 1 : Le nombre N de températures à analyser.
 * Ligne 2 : Une chaîne de caractères contenant les N températures exprimées sous la forme de nombres entiers allant de -273 à 5526
 * 
 * Sortie
 * Affichez 0 (zéro) si aucune température n'est fournie. Sinon, affichez la température la plus proche de 0.
 * 
 * Contraintes
 * 0 ≤ N < 10000
 * 
 * Exemple
 * Entrée
 * 5
 * 1 -2 -8 4 5
 * Sortie
 * 1
 */

int main()
{
    int n; // Le nombre de températures à analyser
    cin >> n; cin.ignore();
    int nearZero = n != 0 ? abs(INT_MAX) : 0;
    for (int i = 0; i < n; i++) {
        int t; // Une température exprimée sous forme d'un entier allant de -273 à 5526
        cin >> t; cin.ignore();
        nearZero = (abs(t) <= abs(nearZero) ? (abs(t) == nearZero ? abs(t) : t) : nearZero);
    }
    cout << nearZero << endl;
    return EXIT_SUCCESS; // Indique que le programme s'est exécuté avec succès
}
"
cuetWBBb,CodinGame_2023_08_26__20_08_44__planet_attacked.sh,MonsterScripter,Bash,Sunday 27th of August 2023 12:59:22 AM CDT,"#!/bin/bash

# Objectif
# Votre programme doit détruire les vaisseaux ennemis en tirant sur l'ennemi le plus proche à chaque tour.

# Règles
# Les vaisseaux ennemis approchent en ligne droite vers votre canon.
# À chaque début d'un tour de jeu (dans la boucle game loop), vous obtenez les informations des deux ennemis les plus proches :
# - variable enemy1 : le nom de l'ennemi 1.
# - variable dist1 : la distance à laquelle se trouve l'ennemi 1.
# - variable enemy2 : le nom de l'ennemi 2.
# - variable dist2 : la distance à laquelle se trouve l'ennemi 2.
# Avant la fin du tour (fin de la boucle), vous devez indiquer en sortie le nom de l'ennemi le plus proche.
# Pour afficher le nom de l'ennemi le plus proche, vous devez utiliser la variable enemy1 ou enemy2.

# Boucle de jeu
while true; do
    # enemy1: nom de l'ennemi 1
    read -r enemy1
    # dist1: distance jusqu'à l'ennemi 1
    read -r dist1
    # enemy2: nom de l'ennemi 2
    read -r enemy2
    # dist2: distance jusqu'à l'ennemi 2
    read -r dist2
    
    # Condition pour choisir le nom de l'ennemi le plus proche
    if [ ""$dist1"" -lt ""$dist2"" ]; then
        echo ""$enemy1""
    else
        echo ""$enemy2""
    fi
done
"
vYqyEyTr,CodinGame_2023_08_26__19_39_00__largest_ascii.cpp,MonsterScripter,C++,Sunday 27th of August 2023 12:58:44 AM CDT,"#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <cstdlib>

using namespace std;

/**
 * Objectif
 * Retourner le code ASCII le plus grand parmi les caractères contenus dans le mot !
 *
 * Entrée
 * Ligne 1 : le mot
 *
 * Sortie
 * Ligne 1 : le code ASCII le plus grand
 *
 * Contraintes
 * 1 <= longueur(mot) <= 100
 * Le mot ne contient pas d'espace.
 *
 * Exemple
 * Entrée
 * a
 * Sortie
 * 97
 */

int main()
{
    string word;
    getline(cin, word);
    sort(word.begin(), word.end()); // Trie le mot par ordre croissant des caractères ASCII
    cout << (int) word[word.length() - 1] << endl; // Affiche le code ASCII du dernier caractère (le plus grand)
    return EXIT_SUCCESS;
}
"
WEvs2Jss,CodinGame_2023_08_26__18_45_00__thor.sh,MonsterScripter,Bash,Sunday 27th of August 2023 12:58:29 AM CDT,"#!/bin/bash

width=40
height=18

# lightX: la position X de la lumière de puissance
# lightY: la position Y de la lumière de puissance
# initialTX: la position X initiale de Thor
# initialTY: la position Y initiale de Thor
read -r lightX lightY initialTX initialTY

# Boucle de jeu
while true; do
    # remainingTurns: Le nombre de tours restants pendant lesquels Thor peut se déplacer. Ne pas supprimer cette ligne.
    read -r remainingTurns
    
    # Si la position Y de la lumière est inférieure à la position Y de Thor et que la position Y de Thor est supérieure à 0
    if [[ ""$lightY"" -lt ""$initialTY"" && ""$initialTY"" -gt 0 ]] ; then
        echo ""N""
        ((initialTY--)) # Décrémente la position Y de Thor
    fi

    # Si la position Y de la lumière est supérieure à la position Y de Thor et que la position Y de Thor est inférieure à la hauteur
    if [[ ""$lightY"" -gt ""$initialTY"" && ""$initialTY"" -lt ""$height"" ]] ; then
        echo ""S""
        ((initialTY++)) # Incrémente la position Y de Thor
    fi

    # Si la position X de la lumière est supérieure à la position X de Thor et que la position X de Thor est inférieure à la largeur
    if [[ ""$lightX"" -gt ""$initialTX"" && ""$initialTX"" -lt ""$width"" ]] ; then
        echo ""E""
        ((initialTX++)) # Incrémente la position X de Thor
    fi

    # Si la position X de la lumière est inférieure à la position X de Thor et que la position X de Thor est supérieure à 0
    if [[ ""$lightX"" -lt ""$initialTX"" && ""$initialTX"" -gt 0 ]] ; then
        echo ""W""
        ((initialTX--)) # Décrémente la position X de Thor
    fi

done
"
XbMHm9hj,CodinGame_2023_08_26__18_25_36__stars_string.cpp,MonsterScripter,C++,Sunday 27th of August 2023 12:58:11 AM CDT,"#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

/**
 * Programme pour encadrer une chaîne de caractères avec des étoiles.
 * 
 * @param a La chaîne de caractères à encadrer
 */
int main() {
    string a;
    getline(cin, a); // Lecture de la chaîne de caractères

    string s1(a.size() + 4, '*'); // Création d'une ligne d'étoiles

    // Affichage de la première ligne d'étoiles
    cout << s1 << endl;

    // Affichage de la ligne encadrant la chaîne avec des étoiles
    cout << ""* "" << a << "" *"" << endl;

    // Affichage de la dernière ligne d'étoiles
    cout << s1 << endl;
    
    return 0; // Retourner 0 pour indiquer que le programme s'est exécuté correctement
}
"
