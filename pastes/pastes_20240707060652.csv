id,title,username,language,date,content
dSCLGZ1i,ü§ëG2A.com Free Gift Card FIX July 2024üéÅ,Axel_Jax,JavaScript,Sunday 7th of July 2024 01:01:43 AM CDT,"G2A.com free voucher & gaming guide.
Any item for free on G2A.com including Playstation gift cards & all else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?01842

Working as of:
July 5 2024

"
piGg2m3G,ü§ëG2A.com Free Gift Card FIX July 2024ü§ë,FunkyMonkey22,JavaScript,Sunday 7th of July 2024 12:55:40 AM CDT,"G2A.com complimentary gift card & games guide.
Any item for free on G2A.com including Amazon gift cards & everything else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?01842

Working as of:
July 5 2024

"
RzfQ16qX,ü§ëG2A.com Free Gift Card FIX July 2024ü§ë,Darkew,JavaScript,Sunday 7th of July 2024 12:49:23 AM CDT,"G2A.com free gift card & gaming guide.
Any voucher for free on G2A.com including Playstation gift cards & anything else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?01842

Working as of:
5th of July 2024

"
2zVKZmWP,üéÅ G2A.COM FREE GIFT CARD GUIDE JUL 2024 V2 üéÅ,jusst2k4,GetText,Sunday 7th of July 2024 12:47:56 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_175379.pdf
 
Working as of:
07 July 2024"
1e1HekYi,"Story05Js :: ""history book counter""",jargon,JavaScript,Sunday 7th of July 2024 12:46:27 AM CDT,"function totalSum (data) {
	data[book].reduce((acc, page) => acc + page.value, 0);
}
function totalTally (data) {
	data[book].reduce((acc, page) => acc + 1, 0);
}"
nR6REMbw,ü§ëG2A.com Free Gift Card FIX July 2024ü§ë,angeloee,JavaScript,Sunday 7th of July 2024 12:43:15 AM CDT,"G2A.com free voucher & games guide.
Any voucher for free on G2A.com including Xbox gift cards & all else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?01842

Working as of:
July 5 2024

"
117GRRQP,ü§ëG2A.com Free Gift Card FIX July 2024ü§ë,jcxeq,JavaScript,Sunday 7th of July 2024 12:37:11 AM CDT,"G2A.com complimentary gift card & gaming guide.
Any gift card for free on G2A.com including Xbox gift cards & all else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?01842

Working as of:
July 5 2024

"
xmEgtWeQ,ü§ëG2A.com Free Gift Card FIX July 2024üéÅ,PAUL-A8,JavaScript,Sunday 7th of July 2024 12:31:08 AM CDT,"G2A.com complimentary voucher & gaming guide.
Any item for free on G2A.com including Amazon gift cards & anything else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?01842

Working as of:
July 5 2024

"
HMdu4X9P,ü§ëG2A.com Free Gift Card FIX July 2024ü§ë,Kevin_Chen1,JavaScript,Sunday 7th of July 2024 12:25:04 AM CDT,"G2A.com complimentary gift card & games guide.
Any voucher for free on G2A.com including Playstation gift cards & all else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?01842

Working as of:
July 5 2024

"
Jj4gxAAW,ü§ëG2A.com Free Gift Card FIX July 2024ü§ë,mano03,JavaScript,Sunday 7th of July 2024 12:18:59 AM CDT,"G2A.com free voucher & gaming guide.
Any voucher for free on G2A.com including Xbox gift cards & everything else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?01842

Working as of:
5th of July 2024

"
iYdyhmry,ü§ëG2A.com Free Gift Card FIX July 2024üéÅ,gigi1964,JavaScript,Sunday 7th of July 2024 12:12:56 AM CDT,"G2A.com free voucher & gaming guide.
Any item for free on G2A.com including Steam gift cards & anything else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?01842

Working as of:
5th of July 2024

"
Le1YK9b8,ü§ëG2A.com Free Gift Card FIX July 2024ü§ë,TeleBot,JavaScript,Sunday 7th of July 2024 12:06:54 AM CDT,"G2A.com free gift card & games guide.
Any item for free on G2A.com including Xbox gift cards & anything else offered.
This is the most latest version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?01842

Working as of:
5th of July 2024

"
SWG5yNLU,Successful Pom File with Shade,allLogarithmsEqual,XML,Saturday 6th of July 2024 11:36:43 PM CDT,"<?xml version=""1.0"" encoding=""UTF-8""?>

<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
  xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.themathjester</groupId>
  <artifactId>JarDemo</artifactId>
  <version>1.0-SNAPSHOT</version>

  <name>Finances-Parser</name>
  <!-- FIXME change it to the project's website -->
  <url>http://www.themathjester.com</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>17</maven.compiler.source>
    <maven.compiler.target>17</maven.compiler.target>
  </properties>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.12</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.seleniumhq.selenium</groupId>
      <artifactId>selenium-java</artifactId>
<!--      <version>4.0.0-alpha-1</version> -->
      <version>4.22.0</version>
    </dependency>
    <dependency>
      <groupId>org.seleniumhq.selenium</groupId>
      <artifactId>selenium-firefox-driver</artifactId>
<!--      <version>4.0.0-alpha-1</version> -->
      <version>4.22.0</version>
    </dependency>
    <dependency>
      <groupId>org.seleniumhq.selenium</groupId>
      <artifactId>selenium-api</artifactId>
<!--      <version>4.0.0-alpha-1</version> -->
      <version>4.22.0</version>
    </dependency>
<!--    <dependency>
      <groupId>org.seleniumhq.selenium</groupId>
      <artifactId>selenium-remote-driver</artifactId> -->
<!--      <version>4.0.0-alpha-1</version> -->
<!--      <version>4.22.0</version>
    </dependency> -->
    <dependency>
      <groupId>org.bouncycastle</groupId>
      <artifactId>bcpg-jdk18on</artifactId>
<!--      <version>1.71</version> -->
      <version>1.78.1</version>
    </dependency>
    <dependency>
      <groupId>org.bouncycastle</groupId>
      <artifactId>bcprov-jdk18on</artifactId>
<!--      <version>1.71</version> -->
      <version>1.78.1</version>
    </dependency>
    <dependency>
      <groupId>com.squareup.okhttp3</groupId>
      <artifactId>okhttp</artifactId>
      <version>5.0.0-alpha.14</version>
    </dependency>
<!--
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-exec</artifactId>
      <version>1.3</version>
      <classifier></classifier>
    </dependency>
     -->
  </dependencies>

  <build>
    <!-- <pluginManagement>< ! - - lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
    <!-- apparently I need to comment-out pluginManagement! See https://stackoverflow.com/a/42231035 -->
      <plugins>
        <!-- clean lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#clean_Lifecycle -->
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.1.0</version>
        </plugin>
        <!-- default lifecycle, jar packaging: see https://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging -->
        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.8.0</version>
        </plugin>
        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.22.1</version>
        </plugin>
        <plugin>
          <artifactId>maven-jar-plugin</artifactId>
          <version>3.0.2</version>
          <configuration>
            <archive>
              <manifest>
                <addClasspath>true</addClasspath>
                <mainClass>com.themathjester.ExecuteJarEntry</mainClass>
              </manifest>
            </archive>
          </configuration>
        </plugin>
        <plugin>
          <artifactId>maven-install-plugin</artifactId>
          <version>2.5.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>2.8.2</version>
        </plugin>
        <!-- site lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#site_Lifecycle -->
        <plugin>
          <artifactId>maven-site-plugin</artifactId>
          <version>3.7.1</version>
        </plugin>
        <plugin>
          <artifactId>maven-project-info-reports-plugin</artifactId>
          <version>3.0.0</version>
        </plugin>
<!--        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-assembly-plugin</artifactId>
          <version>2.4.1</version>
          <configuration>
            < !  - - get all project dependencies - - >
            <descriptorRefs>
              <descriptorRef>jar-with-dependencies</descriptorRef>
            </descriptorRefs>
            <!- - MainClass in mainfest make a executable jar - ->
            <archive>
              <manifest>
                <mainClass>chozorho.ExecuteParseFinance</mainClass>
              </manifest>
            </archive>
          </configuration>
          <executions>
            <execution>
            <id>make-assembly</id>
            <! - - bind to the packaging phase - - >
            <phase>package</phase> 
            <goals>
              <goal>single</goal>
            </goals>
            </execution>
          </executions>
        </plugin> -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-shade-plugin</artifactId>
          <version>3.4.1</version>
          <configuration>
            <artifactSet>
              <includes>
                <include>com.themathjester:Computations</include>
                <include>com.themathjester:ExecuteJarEntry</include>
                <include>com.themathjester:ExecuteDrm</include>
                <include>org.seleniumhq.selenium:selenium-java</include>
                <include>org.seleniumhq.selenium:selenium-firefox-driver</include>
                <include>org.seleniumhq.selenium:selenium-api</include>
                <include>org.seleniumhq.selenium:selenium-remote-driver</include>
                <include>com.google.guava:guava</include>
                <include>com.squareup.okhttp3:okhttp</include>
<!--                         org.openqa.selenium.remote.internal.OkHttpClient -->
                <include>com.squareup.okio:okio</include>
                <include>org.apache.commons:commons-exec</include>
                <include>commons-logging:commons-logging</include>
                <include>org.bouncycastle:bcpg-jdk18on</include>
                <include>org.bouncycastle:bcprov-jdk18on</include>
              </includes>
              <excludes>
                <exclude>junit:junit</exclude>
                <exclude>org.apache.maven:lib:tests</exclude>
              </excludes>
            </artifactSet>
            <minimizeJar>true</minimizeJar>
            <filters>
              <filter>
                <artifact>*:*</artifact>
                <excludes>
                  <exclude>META-INF/*.SF</exclude>
                  <exclude>META-INF/*.DSA</exclude>
                  <exclude>META-INF/*.RSA</exclude>
                </excludes>
              </filter>
            </filters>
            <transformers>
              <transformer implementation=""org.apache.maven.plugins.shade.resource.ManifestResourceTransformer"">
                <manifestEntries>
                  <mainClass>com.themathjester.ExecuteJarEntry</mainClass>
                </manifestEntries>
              </transformer>
            </transformers>
          </configuration>
          <executions>
            <execution>
              <phase>package</phase>
              <goals><goal>shade</goal></goals>
            </execution>
          </executions>
        </plugin>
      </plugins>
<!--    </pluginManagement> -->
    <resources>
      <resource>
        <directory>src/main/resources</directory>
      </resource>
    </resources>
  </build>
</project>
"
ZffnQkfk,Untitled,hoavinh2001nd,Python,Saturday 6th of July 2024 09:59:37 PM CDT,"import numpy as np
import requests
from PIL import Image
from io import BytesIO
import json


def generate_coordinate_grid(boundaries, image_size, gsd):
    degree_interval = image_size * gsd / 111111
    topleft_coordinate = (boundaries[0], boundaries[1])
    bottomright_coordinate = (boundaries[2], boundaries[3])
    lattidues_range = np.arange(topleft_coordinate[1], bottomright_coordinate[1], degree_interval)
    longitudes_range = np.arange(topleft_coordinate[0], bottomright_coordinate[0], degree_interval)
    grid = []
    for lat_index, lat in enumerate(lattidues_range[:-1]):
        for lot_index, lot in enumerate(longitudes_range[:-1]):
            next_lat = lattidues_range[lat_index + 1]
            next_lot = longitudes_range[lot_index + 1]
            grid.append([lot, lat, next_lot, next_lat])
    return grid


def create_common_params(boundaries, image_size):
    return {
        'bbox': f""{boundaries[0]},{boundaries[1]},{boundaries[2]},{boundaries[3]}"",
        'size': f'{image_size},{image_size}',
        'bboxSR': '4326',
        'imageSR': '4326',
        'f': 'image',
        'transparent': 'true'
    }


def count_white_pixels(image):
    image_array = np.array(image).flatten()
    _, counts = np.unique(image_array, return_counts=True)
    return max(counts)


def export_boundary_json(boundary, region_id):
    bound = {
        ""region_id"": region_id,
        ""west"": boundary[0],
        ""south"": boundary[1],
        ""east"": boundary[2],
        ""north"": boundary[3]
    }

    filename = f""region_{region_id}_boundary.json""
    with open(filename, 'w') as f:
        json.dump(bound, f, indent=4)


def get_historical_stlouis_image(year, params):
    if not isinstance(boundaries, list) or len(boundaries) != 4:
        raise ValueError(""Boundaries must be a list of 4 elements"")
    base_url = f""https://maps.stlouisco.com/arcgis/rest/services/Aerials/Aerials{year}/MapServer/export""
    try:
        response = requests.get(base_url, params=params)
        response.raise_for_status()
        fetched_image = Image.open(BytesIO(response.content))
        white_pixels = count_white_pixels(fetched_image)
        if white_pixels > 0.3 * fetched_image.size[0] * fetched_image.size[1]:
            print(f""WARNING: BBox: {boundaries} for year {year} is mostly white"")
            return None
        return fetched_image
    except Exception as e:
        print(f""ERROR: Boundary {boundaries} for year {year} and image size {image_size} generated an error: {e}"")
        return None


def get_base_layer_map(region_id, params):
    base_url = ""https://maps.stlouisco.com/arcgis/rest/services/Maps/RevBase/MapServer/export""
    parcels_url = ""https://maps.stlouisco.com/arcgis/rest/services/Maps/Parcels/MapServer/export""
    base_response = requests.get(base_url, params=params)
    parcels_response = requests.get(parcels_url, params=params)
    if base_response.status_code == 200 and parcels_response.status_code == 200:
        base_image = Image.open(BytesIO(base_response.content)).convert(""RGBA"")
        parcels_image = Image.open(BytesIO(parcels_response.content)).convert(""RGBA"")
        combined_image = Image.alpha_composite(base_image, parcels_image)
        combined_image.save(f'stlouis_region_{region_id}_layout.png')
        print(f""Combined image saved for region {region_id}"")
    else:
        print(f""Failed to retrieve images for region {region_id}."")
        print(f""Base layer status code: {base_response.status_code}"")
        print(f""Parcels layer status code: {parcels_response.status_code}"")


if __name__ == ""__main__"":
    years = ['1937', '1955', '1966', '1970_72', '1981', '1995_97', '2000', '2002', '2004', '2006', '2008', '2010',
             '2012', '2014', '2016', '2018']
    boundaries = [-90.351285426142047, 38.651355259782670, -90.23493198031807, 38.712597643600475]

    image_size = 512
    grid = generate_coordinate_grid(boundaries, image_size, 0.6)
    region_id = 0
    for boundary in grid:
        region_image_found = False
        params = create_common_params(boundary, image_size)
        for year in years:
            image = get_historical_stlouis_image(year, params)
            if image:
                image.save(f""stlouis_region_{region_id}_{year}.png"")
                region_image_found = True
        if region_image_found:
            get_base_layer_map(region_id, params)
            export_boundary_json(boundary, region_id)
            region_id += 1
"
e45nf48W,err,theultraman20,Rust,Saturday 6th of July 2024 09:53:40 PM CDT,"
error: expected identifier, found `<`
   --> src/compile.rs:142:61
    |
142 | ...en => ParseRule{ prefix: Compiler::<'b>::<'b>::grouping, infix: null...
    |          ---------                          ^ expected identifier
    |          |
    |          while parsing this struct

error[E0308]: mismatched types
   --> src/compile.rs:142:84
    |
139 | ... = || {};
    |       -- the found closure
...
142 | ...en => ParseRule{ prefix: Compiler::<'b>::<'b>::grouping, infix: null_fn, p...
    |                                                                    ^^^^^^^ incorrect number of function parameters
    |
    = note: expected fn pointer `for<'a, 'b> fn(&'a mut Compiler<'b>)`
                  found closure `{closure@src/compile.rs:139:23: 139:25}`

error[E0308]: mismatched types
   --> src/compile.rs:143:45
    |
143 | ...x: Compiler::<'b>::unary, infix: Compiler::<'b>::binary, prec: Term },
    |       ^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other
    |
    = note: expected fn pointer `for<'a, 'b> fn(&'a mut Compiler<'b>)`
                  found fn item `for<'b> fn(&'b mut Compiler<'_>) {Compiler::<'_>::unary}`

error[E0599]: no function or associated item named `binary` found for struct `Compiler` in the current scope
   --> src/compile.rs:143:91
    |
44  | pub struct Compiler<'a> {
    | ----------------------- function or associated item `binary` not found for this struct
...
143 |             Minus =>     ParseRule{ prefix: Compiler::<'b>::unary, infix: Compiler::<'b>::binary, p...
    |                                                                                           ^^^^^^ function or associated item not found in `Compiler<'b>`
    |
note: if you're trying to build a new `Compiler<'b>`, consider using `Compiler::<'a>::new` which returns `Compiler<'_>`
   --> src/compile.rs:53:5
    |
53  |     pub fn new(tokens: Vec<Token<'a>>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: there is a method `unary` with a similar name
    |
143 |             Minus =>     ParseRule{ prefix: Compiler::<'b>::unary, infix: Compiler::<'b>::unary, prec: Term },
    |                                                                                           ~~~~~

error[E0308]: mismatched types
   --> src/compile.rs:144:45
    |
139 | ... let null_fn = || {};
    |                   -- the found closure
...
144 | ...     Plus =>      ParseRule{ prefix: null_fn, infix: Compiler::<'b>:...
    |                                         ^^^^^^^ incorrect number of function parameters
    |
    = note: expected fn pointer `for<'a, 'b> fn(&'a mut Compiler<'b>)`
                  found closure `{closure@src/compile.rs:139:23: 139:25}`

error[E0599]: no function or associated item named `binary` found for struct `Compiler` in the current scope
   --> src/compile.rs:144:77
    |
44  | pub struct Compiler<'a> {
    | ----------------------- function or associated item `binary` not found for this struct
...
144 |             Plus =>      ParseRule{ prefix: null_fn, infix: Compiler::<'b>::binary, p...
    |                                                                             ^^^^^^ function or associated item not found in `Compiler<'b>`
    |
note: if you're trying to build a new `Compiler<'b>`, consider using `Compiler::<'a>::new` which returns `Compiler<'_>`
   --> src/compile.rs:53:5
    |
53  |     pub fn new(tokens: Vec<Token<'a>>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: there is a method `unary` with a similar name
    |
144 |             Plus =>      ParseRule{ prefix: null_fn, infix: Compiler::<'b>::unary, prec: Term },
    |                                                                             ~~~~~

error[E0308]: mismatched types
   --> src/compile.rs:145:45
    |
139 | ... let null_fn = || {};
    |                   -- the found closure
...
145 | ...     Slash =>     ParseRule{ prefix: null_fn, infix: Compiler::<'b>:...
    |                                         ^^^^^^^ incorrect number of function parameters
    |
    = note: expected fn pointer `for<'a, 'b> fn(&'a mut Compiler<'b>)`
                  found closure `{closure@src/compile.rs:139:23: 139:25}`

error[E0599]: no function or associated item named `binary` found for struct `Compiler` in the current scope
   --> src/compile.rs:145:77
    |
44  | pub struct Compiler<'a> {
    | ----------------------- function or associated item `binary` not found for this struct
...
145 |             Slash =>     ParseRule{ prefix: null_fn, infix: Compiler::<'b>::binary, p...
    |                                                                             ^^^^^^ function or associated item not found in `Compiler<'b>`
    |
note: if you're trying to build a new `Compiler<'b>`, consider using `Compiler::<'a>::new` which returns `Compiler<'_>`
   --> src/compile.rs:53:5
    |
53  |     pub fn new(tokens: Vec<Token<'a>>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: there is a method `unary` with a similar name
    |
145 |             Slash =>     ParseRule{ prefix: null_fn, infix: Compiler::<'b>::unary, prec: Factor },
    |                                                                             ~~~~~

error[E0308]: mismatched types
   --> src/compile.rs:146:45
    |
139 | ... let null_fn = || {};
    |                   -- the found closure
...
146 | ...     Star =>      ParseRule{ prefix: null_fn, infix: Compiler::<'b>:...
    |                                         ^^^^^^^ incorrect number of function parameters
    |
    = note: expected fn pointer `for<'a, 'b> fn(&'a mut Compiler<'b>)`
                  found closure `{closure@src/compile.rs:139:23: 139:25}`

error[E0599]: no function or associated item named `binary` found for struct `Compiler` in the current scope
   --> src/compile.rs:146:77
    |
44  | pub struct Compiler<'a> {
    | ----------------------- function or associated item `binary` not found for this struct
...
146 |             Star =>      ParseRule{ prefix: null_fn, infix: Compiler::<'b>::binary, p...
    |                                                                             ^^^^^^ function or associated item not found in `Compiler<'b>`
    |
note: if you're trying to build a new `Compiler<'b>`, consider using `Compiler::<'a>::new` which returns `Compiler<'_>`
   --> src/compile.rs:53:5
    |
53  |     pub fn new(tokens: Vec<Token<'a>>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: there is a method `unary` with a similar name
    |
146 |             Star =>      ParseRule{ prefix: null_fn, infix: Compiler::<'b>::unary, prec: Factor },
    |                                                                             ~~~~~

error[E0308]: mismatched types
   --> src/compile.rs:147:45
    |
147 | ...x: Compiler::<'b>::number, infix: null_fn, prec: Null },
    |       ^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other
    |
    = note: expected fn pointer `for<'a, 'b> fn(&'a mut Compiler<'b>)`
                  found fn item `for<'b> fn(&'b mut Compiler<'_>) {Compiler::<'_>::number}`

error[E0308]: mismatched types
   --> src/compile.rs:147:76
    |
139 | ... = || {};
    |       -- the found closure
...
147 | ...=>    ParseRule{ prefix: Compiler::<'b>::number, infix: null_fn, pre...
    |                                                            ^^^^^^^ incorrect number of function parameters
    |
    = note: expected fn pointer `for<'a, 'b> fn(&'a mut Compiler<'b>)`
                  found closure `{closure@src/compile.rs:139:23: 139:25}`

error[E0308]: mismatched types
   --> src/compile.rs:148:45
    |
139 | ... let null_fn = || {};
    |                   -- the found closure
...
148 | ...     _ =>         ParseRule{ prefix: null_fn, infix: null_fn, prec: ...
    |                                         ^^^^^^^ incorrect number of function parameters
    |
    = note: expected fn pointer `for<'a, 'b> fn(&'a mut Compiler<'b>)`
                  found closure `{closure@src/compile.rs:139:23: 139:25}`

error[E0308]: mismatched types
   --> src/compile.rs:148:61
    |
139 | ...ull_fn = || {};
    |             -- the found closure
...
148 | ... =>         ParseRule{ prefix: null_fn, infix: null_fn, prec: Null },
    |                                                   ^^^^^^^ incorrect number of function parameters
    |
    = note: expected fn pointer `for<'a, 'b> fn(&'a mut Compiler<'b>)`
                  found closure `{closure@src/compile.rs:139:23: 139:25}`

warning: unused variable: `level`
   --> src/compile.rs:134:36
    |
134 |     fn parse_precedence(&mut self, level: Precedence) {
    |                                    ^^^^^ help: if this is intentional, prefix it with an underscore: `_level`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `tokens`
  --> src/main.rs:27:13
   |
27 |         let tokens = lex(&source).unwrap();
   |             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_tokens`

warning: variable does not need to be mutable
  --> src/main.rs:17:9
   |
17 |     let mut chunk = Chunk::new();
   |         ----^^^^^
   |         |
   |         help: remove this `mut`
   |
   = note: `#[warn(unused_mut)]` on by default

Some errors have detailed explanations: E0308, E0599.
For more information about an error, try `rustc --explain E0308`.
warning: `crafting-interpreters` (bin ""crafting-interpreters"") generated 3 warnings
"
KDpcE4gW,Untitled,jabela,Python,Saturday 6th of July 2024 09:29:31 PM CDT,"import urllib.request
import re
import ssl

def fetch_robots_txt(url):
    try:
        # Create an SSL context that doesn't verify SSL certificates
        context = ssl._create_unverified_context()
        with urllib.request.urlopen(url, context=context) as response:
            return response.read().decode('utf-8')
    except Exception as e:
        print(f""Error fetching the robots.txt: {e}"")
        return """"


def is_scraping_allowed(robots_txt, user_agent=""*""):
    # Regular expression to find the user-agent and disallow directives
    user_agent_pattern = re.compile(rf""User-agent:\s*{re.escape(user_agent)}"", re.IGNORECASE)
    disallow_pattern = re.compile(r""Disallow:\s*(.*)"", re.IGNORECASE)

    user_agent_found = False
    for line in robots_txt.splitlines():
        if user_agent_pattern.match(line):
            user_agent_found = True
        elif user_agent_found:
            disallow_match = disallow_pattern.match(line)
            if disallow_match:
                disallowed_path = disallow_match.group(1).strip()
                if disallowed_path == ""/"" or disallowed_path == """":
                    return False
                else:
                    continue
            elif line.startswith(""User-agent""):
                user_agent_found = False
    return True


def fetch_page(url):
    try:
        # Create an SSL context that doesn't verify SSL certificates
        context = ssl._create_unverified_context()
        with urllib.request.urlopen(url, context=context) as response:
            return response.read().decode('utf-8')
    except Exception as e:
        print(f""Error fetching the page: {e}"")
        return """"


def extract_first_paragraph(page_content):
    # Regular expression to find the first paragraph
    match = re.search(r'<p>(.*?)</p>', page_content, re.DOTALL)
    if match:
        # Remove HTML tags from the extracted paragraph
        first_paragraph = re.sub(r'<.*?>', '', match.group(1))
        return first_paragraph.strip()
    return ""No paragraph found""


def check_scraping_permissions(base_url):
    robots_txt_url = f""{base_url}/robots.txt""
    print(f""Fetching {robots_txt_url}"")
    robots_txt = fetch_robots_txt(robots_txt_url)
    if robots_txt:
        print(f""Fetched robots.txt content:\n{robots_txt}"")
        if is_scraping_allowed(robots_txt):
            print(f""Scraping is allowed on {base_url}"")
            return True
        else:
            print(f""Scraping is not allowed on {base_url}"")
            return False
    else:
        print(f""Failed to retrieve robots.txt from {base_url}"")
        return False


def scrape_site(url):
    base_url = '/'.join(url.split('/')[:3])
    if check_scraping_permissions(base_url):
        page_content = fetch_page(url)
        if page_content:
            first_paragraph = extract_first_paragraph(page_content)
            print(f""First paragraph: {first_paragraph}"")
        else:
            print(""Failed to retrieve content from the page."")
    else:
        print(""Scraping is not allowed according to robots.txt."")

# Try http://www.reddit.com not allowed
# Try Wikipedia where it is allowed https://en.wikipedia.org/wiki/Web_scraping
url = 'https://en.wikipedia.org/wiki/Web_scraping'
scrape_site(url)
"
L8m7V7P0,Rounded text bg corners,marcusa3000,Lua,Saturday 6th of July 2024 09:24:18 PM CDT,"{
	Tools = ordered() {
		Blur1 = Blur {
			NameSet = true,
			Inputs = {
				MaskChannel = Input { Value = 5, },
				Filter = Input { Value = FuID { ""Fast Gaussian"" }, },
				XBlurSize = Input { Value = 15, },
				Input = Input {
					SourceOp = ""Text"",
					Source = ""Output"",
				},
			},
			ViewInfo = OperatorInfo { Pos = { -4070, -280.5 } },
		},
		Text = TextPlus {
			NameSet = true,
			Inputs = {
				GlobalOut = Input { Value = 78, },
				Width = Input { Value = 1080, },
				Height = Input { Value = 1080, },
				UseFrameFormatSettings = Input { Value = 1, },
				[""Gamut.SLogVersion""] = Input { Value = FuID { ""SLog2"" }, },
				LayoutRotation = Input { Value = 1, },
				LineSpacing = Input { Value = 0.681, },
				TransformRotation = Input { Value = 1, },
				ElementShape1 = Input { Value = 2, },
				Level1 = Input { Value = 1, },
				ExtendHorizontal1 = Input { Value = 0.017, },
				ExtendVertical1 = Input { Value = -0.018, },
				Softness1 = Input { Value = 1, },
				Position1 = Input { Value = 1, },
				Offset1 = Input { Value = { 0, -0.008 }, },
				StyledText = Input { Value = ""Just\nCroooop\nIt"", },
				Font = Input { Value = ""Helvetica Neue"", },
				Style = Input { Value = ""Bold"", },
				Size = Input { Value = 0.242, },
				VerticalJustificationNew = Input { Value = 3, },
				HorizontalJustificationNew = Input { Value = 3, },
			},
			ViewInfo = OperatorInfo { Pos = { -4070, -313.5 } },
		},
		BrightnessContrast = BrightnessContrast {
			NameSet = true,
			Inputs = {
				MaskChannel = Input { Value = 5, },
				Alpha = Input { Value = 1, },
				Low = Input { Value = 0.495, },
				High = Input { Value = 0.55, },
				ClipBlack = Input { Value = 1, },
				ClipWhite = Input { Value = 1, },
				Input = Input {
					SourceOp = ""Blur1"",
					Source = ""Output"",
				},
			},
			ViewInfo = OperatorInfo { Pos = { -4070, -247.5 } },
		},
		Instance_Text = TextPlus {
			NameSet = true,
			SourceOp = ""Text"",
			Inputs = {
				SettingsNest = Input { },
				ImageNest = Input { },
				[""Gamut.ColorSpaceNest""] = Input { },
				[""Gamut.GammaSpaceNest""] = Input { },
				Layout = Input { },
				LayoutRotation = Input { Value = 1, },
				Background = Input { },
				TransformTransform = Input { },
				TransformRotation = Input { Value = 1, },
				TransformShear = Input { },
				TransformSize = Input { },
				Properties1 = Input { },
				ElementShape1 = Input { },
				Red1 = Input { Value = 0, },
				Green1 = Input { Value = 0, },
				Blue1 = Input { Value = 0, },
				Alpha1 = Input { },
				Softness1 = Input { Value = 1, },
				Position1 = Input { Value = 1, },
				Offset1 = Input { },
				Rotation1 = Input { },
				Shear1 = Input { },
				Size1 = Input { },
				TextText = Input { },
				TabSpacing = Input { },
				AdvancedFontControls = Input { },
				Internal = Input { },
				CommentsNest = Input { },
				FrameRenderScriptNest = Input { },
				StartRenderScripts = Input { },
				EndRenderScripts = Input { },
				EffectMask = Input { }
			},
			ViewInfo = OperatorInfo { Pos = { -4180, -181.5 } },
		},
		Merge1 = Merge {
			CtrlWZoom = false,
			NameSet = true,
			Inputs = {
				MaskChannel = Input { Value = 5, },
				Background = Input {
					SourceOp = ""BrightnessContrast"",
					Source = ""Output"",
				},
				Foreground = Input {
					SourceOp = ""Instance_Text"",
					Source = ""Output"",
				},
				PerformDepthMerge = Input { Value = 0, },
			},
			ViewInfo = OperatorInfo { Pos = { -4070, -181.5 } },
		}
	}
}"
g29njbDv,Untitled,dereksir,Python,Saturday 6th of July 2024 08:34:09 PM CDT,"import requests

# define your proxy server address
proxy_url = 'http://189.240.60.166:9090'

# create a dictionary with the proxy configuration
proxies = {
    'http': proxy_url,
    'https': proxy_url
}

# make a request using the proxy
response = requests.get('https://httpbin.org/ip', proxies=proxies)

# verify it works
print(response.text)"
Xn9KqcTg,"Story05Js :: ""canvasRenderCommands.js""",jargon,JavaScript,Saturday 6th of July 2024 08:24:27 PM CDT,"
var imageCache = [];
var missingCache = [];

var frontCanvas = false;
var frontContext = false;

var backCanvas = false
var backContext = false;

makeCanvas ( );

function makeCanvas ( ) {

	//document.addEventListener(""DOMContentLoaded"",  ( ) => {

	let fragment;

	// Create an on-screen canvas

	fragment = document.createDocumentFragment ( );

	frontCanvas = document.createElement('canvas');

	fragment.appendChild(frontCanvas);

	frontCanvas.style.zIndex = -1;
	
	frontCanvas.width = 320;
	frontCanvas.height = 240;
	
	frontCanvas.style.width = `320px`;
	frontCanvas.style.height = `240px`;

	frontCanvas.id = `frontCanvas`;

	frontContext = frontCanvas.getContext('2d');

	frontContext.width = 320;
	frontContext.height = 200;
	
	// Create an off-screen canvas

	backCanvas = document.createElement('canvas');

	fragment.appendChild(backCanvas);

	// Append all changes at once to reduce reflows
	document.body.appendChild(fragment);

	backCanvas.style.width = frontCanvas.style.width;

	backCanvas.style.height = frontCanvas.style.height;
	
	backCanvas.width = frontCanvas.width;
	backCanvas.height = frontCanvas.height;

	backContext.width = frontContext.width;

	backContext.height = frontContext.height;

	backCanvas.style.zIndex = -2;

	backCanvas.style.visibility = 'hidden';

	backCanvas.id = `backCanvas`;

	backContext = backCanvas.getContext('2d');

}
	
function selectCanvas(id){
	workCanvas = document.getElementById(id);
}

function drawRectangle(x, y, width, height, color = 'black',fill = 'gray'){
	
	backContext.strokeStyle = color; 
	
	if(fill === ''){
		fill = 'rgba(0,0,0,0.0)';
	}
	backContext.fillStyle = fill; 
	
	backContext.fillRect(x, y, width, height);

	backContext.strokeRect(x, y, width, height);
}


function drawLine(x,y,x2,y2,color = 'black',width = 5){
	backContext.strokeStyle = color; 
	backContext.lineWidth = width; 
	backContext.beginPath ( ); 
	backContext.moveTo(x, y); 
	backContext.lineTo(x2, y2); 
	backContext.stroke ( ); 
}


function drawCircle(x,y,radius = 50, color = 'black',fill = '#00FF00', width = 5){
	backContext.beginPath ( ); 
	backContext.arc(x, y, radius, 0, 2 * Math.PI); 
	backContext.fillStyle = '#00FF00'; 
	backContext.fill ( ); 
	backContext.strokeStyle = '#000000'; 
	backContext.lineWidth = width; 
	backContext.stroke ( ); 
}
	

function drawText(x,y,font = '30px Arial',fill = '#000000',text = 'Hello backcanvas!'){
	backContext.font = font; 
	backContext.fillStyle = fill; 
	backContext.fillText(text, x, y); 
}

function drawImageStack(imageStack, x, y, width = 24, height = 24) {
	
	// console.log({imageStack: imageStack});
	
	for(index = 0; index < imageStack.length; index++){
		
		if( imageStack[index] === undefined ){
			continue;
		}	
		
		imageStack[index] = basename(imageStack[index],`.png`);
		imageStack[index] = left( imageStack[index] + `________`, 8 );
		
		// console.log(imageStack[index]);
		
		drawImage( imageStack[index], x, y, width, height );
		
	}			
	
	if(DEBUG.GUI){
		if( index > 0 ){
			
			// drawImage(`dooropen`, x, y, width, height);
			
			// drawRectangle(x, y, width, height, 'rgba(255,0,0,0.7)','');
	
			// drawText(x,y+16,'12px Impact', 'rgba(255,0,0,0.7)','TEST');
		}
	}
}

function drawImage(imagePath, x, y, width = 24, height = 24) {
	
	var cachedImage = loadImage(imagePath);
	
	if (cachedImage === undefined) {
		return;
	}

	backContext.drawImage(cachedImage, x, y, width, height);
}

function loadImageStack(imageStack, width = 24, height = 24) {
	
	if(!Array.isArray(imageStack)) {
		imageStack = [imageStack];
	}	
	
	for(let index = 0; index < imageStack.length; index++){
		imageStack[index] = loadImage(imageStack[index], width, height);
	}
	
	return imageStack;
	
}

function loadImage(imagePath, width = 24, height = 24) {
	
	if (imagePath === undefined) {
		return undefined;
	}
	
	if(isObject(imagePath)) {
		return undefined;
	}
	
	if(Array.isArray(imagePath)) {
		return loadImageStack(imagePath, width, height)[0];
	}	
	
	if ( right ( imagePath, 4 )  === `.png` ) {
		imagePath = left( imagePath, len(imagePath) - 4 );
	}
	
	var fullPath = ``;
	if ( left ( imagePath, len ( `{{ project root }` ) ) === `{{ project root }}` ) {
		imagePath = mid ( imagePath, len( `{{ project root }` ) + 1 );
	}
		fullPath = `{{ project root }}${imagePath}.png`;
	if ( len ( imagePath ) === 4 || len ( imagePath ) === 8 ) {
		imagePath = left(imagePath + `________`, 8);
		
		if (imagePath === `________`) {
			// logFeats(`Placeholder Image: ${fullPath}`);
			return undefined;
		}
		
		fullPath = `${host}/GFX/${imagePath}.png`;
		
	} else {		
		
		fullPath = `{{ project root }}${imagePath}.png`;
	
	}
	
	let cachedImage = imageCache.find(img => img.src === fullPath);

	if (!cachedImage) {
		cachedImage = new Image(width, height);
		cachedImage.src = fullPath;
		
		cachedImage.onload = function ( ) {
			imageCache.push(cachedImage);
			logFeats(`Loaded: ${cachedImage.src}`);
			// backContext.drawImage(cachedImage, x, y, width, height); // Draw image after loading
		};

		cachedImage.onerror = function ( ) {
			logFeats(`Failed to load: ${cachedImage.src}`);
			cachedImage = undefined;
		};
	} else {
		// logFeats(`Drawing Image: ${cachedImage.src}`);
		return cachedImage;
	}
}


function doubleBuffer ( ) {
	
	frontContext.clearRect(0, 0, frontCanvas.width, frontCanvas.height);
	
	frontContext.drawImage(backCanvas, 0, 0);
}

function getColorAtPoint(x, y) {
	const imageData = backCanvas.getImageData(x, y, 1, 1); // Step 4
	const data = imageData.data;
	const rgba = `rgba(${data[0]}, ${data[1]}, ${data[2]}, ${data[3] / 255})`; // Step 5
	return rgba;
}
	
function grabColor(fg){
	if(left(fg,1) === '#'){
		fg = mid(fg,2);
		fg = sections(fg,2);
	}else if( ( left( fg, 5 ) === 'rgba(' ) && ( right( fg, 1 ) === ')' ) ){
		fg = mid(fg,6);
		fg = left(fg,len(fg)-1);
		fg = fg.replace(' ','');
		fg = fg.split(',');
	}else{
		fg = grabColor(fg);
	}

	return fg;
}

function calcTextWidth( font, text ){
	
	let fontTemp = backContext.font;
	
	backContext.font = font;
	
	const textMetrics = backContext.measureText(text);
	const textWidth = textMetrics.width;
	
	backContext.font = fontTemp;

	return textWidth;
}

function wrapText(x, y, maxWidth, lineHeight, font, fill, text) {
	
	const words = text.split(' ');
	let buffer = '';

	backContext.font = font;
	backContext.fillStyle = fill;
	
	for (let index = 0; index < words.length; index++) {
		
		const testLine = buffer + (buffer.length > 0 ? ' ' : '') + words[index];
		
		const metrics = backContext.measureText(testLine);
		
		if (metrics.width > maxWidth) {
			backContext.fillText(buffer, x, y);
			buffer = words[index];
			y += lineHeight;
		} else {
			buffer = testLine;
		}
	}
	
	if (buffer.length > 0) {
		backContext.fillText(buffer, x, y);
	}
	
	// Copy the contents of backContext to frontContext
	frontContext.clearRect(0, 0, frontContext.canvas.width, frontContext.canvas.height);
	frontContext.drawImage(backContext.canvas, 0, 0);
}

/* {{ #/{{ project root }}/scripts/js/canvas/canvas3dRenderCommands.js }} */
"
i6VKienE,"Story05Js :: ""canvasPageLogic.js""",jargon,JavaScript,Saturday 6th of July 2024 08:18:32 PM CDT,"function canvasCheckPage() {
    const [px, py, pz] = cursorState(layers.gui);

    if (typeof book === 'undefined') {
        book = `""Puzzlum's Palace"" (No.1)`;
    }

    if (typeof page === 'undefined') {
        page = `""Puzzlum's Palace"" (No.1)`;
    }

    return true;
}

// List of keys to capture
var keysToCapture = [];

// Object to hold the state of pressed keys
var keysPressed = {};

// Event listener for keydown to update the keysPressed object
document.addEventListener('keydown', function(event) {
    if (keysToCapture.includes(event.code)) {
        keysPressed[event.code] = true;
    }
});

// Event listener for keyup to update the keysPressed object
document.addEventListener('keyup', function(event) {
    if (keysToCapture.includes(event.code)) {
        keysPressed[event.code] = false;
    }
});

// Function to handle key captures and page rendering
function canvasRenderPage() {
    
	keysToCapture = [];

    if (typeof history === 'undefined') {
        history = {};
    }

    if (typeof history[book] === 'undefined') {
        history[book] = {};
    }

    if (typeof history[book][page] === 'undefined') {
        history[book][page] = 0;
    }

    if (history[book][page] === 0) {
        history[book][page] = 1;
    }

    const width = backContext.width;
    const height = backContext.height;
    const defaultRowspan = 12;
    let rowspan = defaultRowspan;
    let row = 0;
    let xOffset = 0;
    let yOffset = 0;
    
	/*
	var imageStack = [];
	
	for ( let index = 1; index <= books[book][page]['header']['count']; index++ )
	{
		imageStack.push ( `/assets`+books[book][page]['header'][index]['illustration'] );
	}
	
	var stack = loadImageStack(imageStack);
	
	for ( let index = 0; index < stack.length; index++ )
	{
		backContext.drawImage(stack[index],stack[index].naturalWidth,stack[index].naturalHeight);
	}
	*/
	
    function incrementRow() {
        yOffset += (row + 1) * rowspan;
        row = 0;
    }

    function renderText(text, font = '12px Arial', color = '#000000') {
        wrapText(xOffset, yOffset + row * rowspan, width, rowspan, font, color, text);
        row++;
    }

    incrementRow();
    renderText(book.split(`""`)[1], `${rowspan}px Arial`);

    incrementRow();
    const captionCount = parseInt(books[book][page]['caption']['count']);
    for (let caption = 1; caption <= captionCount; caption++) {
        let text = books[book][page]['caption'][caption]['caption'];
        if (text) {
            renderText(text, `${rowspan}px Small Fonts`);
        }
    }

    incrementRow();
    const entityCount = parseInt(books[book][page]['entity']['count']);
    for (let entity = 1; entity <= entityCount; entity++) {
        let { name, sprite, text, mood } = books[book][page]['entity'][entity];
        if (text) {
            renderText(`${mood} ${name}: ${text}`, '12px Small Fonts');
        }
    }

    incrementRow();
    const optionCount = parseInt(books[book][page]['option']['count']);
    for (let option = 1; option <= optionCount; option++) {
        
		keysToCapture[option] = {};

        let { key, dest, preq, caption, condition } = books[book][page]['option'][option];
        let approval = false;

        switch (ucwords(condition)) {
            case ""Contrary"":
                if (!history[book][page] || history[book][preq] === 0) {
                    approval = true;
                }
                break;
            case ""Mandatory"":
                if (history[book][page] && history[book][preq] > 0) {
                    approval = true;
                }
                break;
            case ""Elective"":
                approval = true;
                break;
        }

        if (approval) {
            
			keysToCapture[option] = { key, dest };
            renderText(`${key}: ${caption}`, '12px Small Fonts');
        }
    }

    incrementRow();
    const visitedPagesCount = Object.values(history).reduce((acc, value) => acc + (value > 0 ? 1 : 0), 0);
    renderText(`Pages visited: ${visitedPagesCount}`, '12px Small Fonts');

    canvasPageKeys(keysToCapture);
    return true;
}

// Function to handle the pressed keys and page navigation
function canvasPageKeys(keysToCapture) {
    for (let option = 1; option < keysToCapture.length - 1; option++) {
        let key = keysToCapture[option]['key'];
        switch (key) {
            case 'SP':
            case 'SPC':
            case 'SPACE':
                key = 'Space';
                break;
            case 'CR':
            case 'ENTER':
                key = 'Enter';
                break;
            case 'ESC':
            case 'ESCAPE':
                key = 'Escape';
                break;
            case 'TAB':
            case 'HTAB':
                key = 'Tab';
                break;
            case 'DEL':
            case 'DELETE':
                key = 'Delete';
                break;
            case 'BS':
            case 'BKSP':
                key = 'Backspace';
                break;
        }
		
		page = keysToCapture[option]['dest'];
    }
}

// Set up the interval to check key presses every 100 milliseconds
setInterval(canvasRenderPage, 100);
"
tUXS29dR,Untitled,dereksir,Bash,Saturday 6th of July 2024 08:12:35 PM CDT,HTTPError: 403 Client Error: Forbidden for https://www.godaddy.com/en-uk
UbUpY7Uw,"Story05Js :: ""loadImage ( );""",jargon,JavaScript,Saturday 6th of July 2024 08:06:19 PM CDT,"function loadImageStack(imageStack, width = 24, height = 24) {
	
	if(!Array.isArray(imageStack)) {
		imageStack = [imageStack];
	}	
	
	for(let index = 0; index < imageStack.length; index++){
		imageStack[index] = loadImage(imageStack[index], width, height);
	}
	
	return imageStack;
	
}

function loadImage(imagePath, width = 24, height = 24) {
	
	if (imagePath === undefined) {
		return undefined;
	}
	
	if(isObject(imagePath)) {
		return undefined;
	}
	
	if(Array.isArray(imagePath)) {
		return loadImageStack(imagePath, width, height)[0];
	}	
	
	if ( right ( imagePath, 4 )  === `.png` ) {
		imagePath = left( imagePath, len(imagePath) - 4 );
	}
	
	if ( len ( imagePath ) === 4 || len ( imagePath ) === 8 ) {
		imagePath = left(imagePath + `________`, 8);
		
		if (imagePath === `________`) {
			// logFeats(`Placeholder Image: ${fullPath}`);
			return undefined;
		}
		
		let fullPath = `${host}/GFX/${imagePath}.png`;
		
	} else {		
		
		let fullPath = `{{ project root }}${imagePath}.png`;
	
	}
	
	let cachedImage = imageCache.find(img => img.src === fullPath);

	if (!cachedImage) {
		cachedImage = new Image(width, height);
		cachedImage.src = fullPath;
		
		cachedImage.onload = function ( ) {
			imageCache.push(cachedImage);
			logFeats(`Loaded: ${cachedImage.src}`);
			// backContext.drawImage(cachedImage, x, y, width, height); // Draw image after loading
		};

		cachedImage.onerror = function ( ) {
			logFeats(`Failed to load: ${cachedImage.src}`);
			cachedImage = undefined;
		};
	} else {
		// logFeats(`Drawing Image: ${cachedImage.src}`);
		return cachedImage;
	}
}
"
kduMAD6G,FE Eletcrokinesis/Photokinesis Script,KipTheHacke_r666,Lua,Saturday 6th of July 2024 07:22:17 PM CDT,"local RunService = game:GetService(""RunService"")
local Players = game:GetService(""Players"")
local ReplicatedStorage = game:GetService(""ReplicatedStorage"")
local UserInputService = game:GetService(""UserInputService"")
local TweenService = game:GetService(""TweenService"")
local Debris = game:GetService(""Debris"")

-- Constants for damage calculation
local DAMAGE = 100 -- Damage per strike
local RADIUS = 95 -- Damage radius
local EXPLOSION_RADIUS = 100 -- Radius of the lightning explosion
local STORM_RADIUS = 100 -- Radius of the lightning storm

-- Create a RemoteEvent for client-server communication
local LightningStrikeEvent = Instance.new(""RemoteEvent"")
LightningStrikeEvent.Name = ""LightningStrikeEvent""
LightningStrikeEvent.Parent = ReplicatedStorage

-- Server-side code
if RunService:IsServer() then
    local function performLightningStrike(player)
        print(""Lightning strike received from "" .. player.Name)
        local character = player.Character
        if character and character:FindFirstChild(""HumanoidRootPart"") then
            local hrp = character.HumanoidRootPart
            local strikePos = hrp.Position

            -- Apply damage to nearby players
            for _, otherPlayer in pairs(Players:GetPlayers()) do
                local otherCharacter = otherPlayer.Character
                if otherCharacter and otherCharacter:FindFirstChild(""Humanoid"") then
                    local humanoid = otherCharacter.Humanoid
                    local rootPart = otherCharacter:FindFirstChild(""HumanoidRootPart"")
                    if rootPart then
                        local distance = (rootPart.Position - strikePos).Magnitude
                        if distance <= RADIUS then
                            local damageMultiplier = 1 - (distance / RADIUS)
                            local actualDamage = DAMAGE * damageMultiplier
                            humanoid:TakeDamage(actualDamage)
                            print(otherPlayer.Name .. "" took "" .. actualDamage .. "" damage from lightning"")
                        end
                    end
                end
            end

            -- Trigger visual effects for all clients
            LightningStrikeEvent:FireAllClients(strikePos)
        end
    end

    LightningStrikeEvent.OnServerEvent:Connect(performLightningStrike)
    print(""Server-side lightning storm script loaded"")
end

-- Client-side code
if RunService:IsClient() then
    local player = Players.LocalPlayer

    local function createLightningBolt(startPos, endPos)
        local bolt = Instance.new(""Part"")
        bolt.Anchored = true
        bolt.CanCollide = false
        bolt.Transparency = 1
        bolt.Position = startPos
        bolt.Parent = workspace

        local attachment0 = Instance.new(""Attachment"")
        attachment0.Position = Vector3.new(0, 0, 0)
        attachment0.Parent = bolt

        local attachment1 = Instance.new(""Attachment"")
        attachment1.Position = endPos - startPos
        attachment1.Parent = bolt

        local beam = Instance.new(""Beam"")
        beam.Attachment0 = attachment0
        beam.Attachment1 = attachment1
        beam.Width0 = 70
        beam.Width1 = 70
        beam.LightEmission = 1
        beam.LightInfluence = 0
        beam.Texture = ""rbxassetid://446111271""
        beam.TextureSpeed = 3
        beam.TextureLength = 1
        beam.FaceCamera = true
        beam.Brightness = 3
        beam.Color = ColorSequence.new(Color3.new(0.5, 0.7, 1), Color3.new(1, 1, 1))
        beam.Parent = bolt

        for i = 1, 3 do
            beam.Enabled = true
            wait(0.05)
            beam.Enabled = false
            wait(0.05)
        end

        Debris:AddItem(bolt, 0.5)
    end

    local function createLightningEffect(position, duration)
        local part = Instance.new(""Part"")
        part.Anchored = true
        part.CanCollide = false
        part.Transparency = 1
        part.Position = position
        part.Size = Vector3.new(1, 1, 1)
        part.Parent = workspace

        local emitter = Instance.new(""ParticleEmitter"")
        emitter.Texture = ""rbxassetid://6101261905"" -- Lightning texture
        emitter.Color = ColorSequence.new(Color3.new(0.5, 0.7, 1), Color3.new(1, 1, 1))
        emitter.LightEmission = 1
        emitter.LightInfluence = 0
        emitter.Size = NumberSequence.new({
            NumberSequenceKeypoint.new(0, 5),
            NumberSequenceKeypoint.new(1, 10)
        })
        emitter.Transparency = NumberSequence.new({
            NumberSequenceKeypoint.new(0, 0),
            NumberSequenceKeypoint.new(0.8, 0),
            NumberSequenceKeypoint.new(1, 1)
        })
        emitter.Lifetime = NumberRange.new(0.5, 1)
        emitter.Rate = 50
        emitter.Speed = NumberRange.new(30, 50)
        emitter.SpreadAngle = Vector2.new(0, 180)
        emitter.Parent = part

        delay(duration, function()
            emitter.Enabled = false
            Debris:AddItem(part, 2)
        end)

        return part
    end

    local function createDebrisEffect(position)
        local colors = {
            Color3.new(0.5, 0.5, 0.5),
            Color3.new(0.6, 0.4, 0.2),
            Color3.new(0.8, 0.8, 0.8)
        }

        for i = 1, 30 do  -- Increased number of debris particles
            local debris = Instance.new(""Part"")
            debris.Size = Vector3.new(math.random(5, 20) / 10, math.random(5, 20) / 10, math.random(5, 20) / 10)
            debris.Position = position + Vector3.new(math.random(-3, 3), 0.5, math.random(-3, 3))
            debris.Anchored = false
            debris.CanCollide = true
            debris.Color = Color3.new(math.random(8, 10) / 10, math.random(8, 10) / 10, math.random(6, 8) / 10)  -- Yellowish colors
            debris.Material = Enum.Material.Rock
            debris.Parent = workspace

            local bodyForce = Instance.new(""BodyForce"")
            bodyForce.Force = Vector3.new(math.random(-100, 100), math.random(200, 400), math.random(-100, 100))
            bodyForce.Parent = debris

            debris.Velocity = Vector3.new(math.random(-30, 30), math.random(40, 60), math.random(-30, 30))

            Debris:AddItem(debris, 2)
            TweenService:Create(debris, TweenInfo.new(1.5, Enum.EasingStyle.Quad, Enum.EasingDirection.In, 0, false, 0.5), {Transparency = 1}):Play()
        end
    end

    local function playLightningSound()
        local sound = Instance.new(""Sound"")
        sound.SoundId = ""rbxassetid://5801257793""
        sound.Volume = 1
        sound.Parent = workspace
        sound:Play()
        Debris:AddItem(sound, 3)
    end

    local function shakeCamera(intensity, duration)
        local camera = workspace.CurrentCamera
        local startTime = tick()
        local originalCFrame = camera.CFrame

        while tick() - startTime < duration do
            local elapsed = tick() - startTime
            local damping = 1 - (elapsed / duration)
            local x = math.random(-10, 10) * intensity * damping
            local y = math.random(-10, 10) * intensity * damping
            local z = math.random(-10, 10) * intensity * damping

            camera.CFrame = originalCFrame * CFrame.new(x, y, z)
            RunService.RenderStepped:Wait()
        end

        camera.CFrame = originalCFrame
    end

    local function createLightBeam(basePos)
        local beamHeight = math.random(50, 100)
        local startPos = basePos + Vector3.new(0, beamHeight, 0)
        local endPos = basePos

        local beam = Instance.new(""Beam"")
        beam.Transparency = NumberSequence.new(0, 0.5)
        beam.Color = ColorSequence.new(Color3.new(1, 1, 0.7))  -- Light yellow color
        beam.FaceCamera = true
        beam.Brightness = 8
        beam.Width0 = math.random(2, 5)  -- Random width between 2 and 5
        beam.Width1 = beam.Width0
        beam.Segments = 1
        beam.Parent = workspace

        local attachment0 = Instance.new(""Attachment"")
        attachment0.Position = startPos
        attachment0.Parent = workspace.Terrain

        local attachment1 = Instance.new(""Attachment"")
        attachment1.Position = endPos
        attachment1.Parent = workspace.Terrain

        beam.Attachment0 = attachment0
        beam.Attachment1 = attachment1

        -- Create a glow effect at the impact point
        local pointLight = Instance.new(""PointLight"")
        pointLight.Color = Color3.new(1, 1, 0.7)
        pointLight.Range = 10
        pointLight.Brightness = 1
        pointLight.Parent = attachment1

        -- Animate the beam
        local tweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Linear)
        local tween = TweenService:Create(beam, tweenInfo, {Width0 = 0, Width1 = 0, Brightness = 0})
        tween:Play()

        -- Create debris effect at the impact point
        createDebrisEffect(endPos)

        -- Shake camera
        shakeCamera(0.2, 0.3)

        Debris:AddItem(attachment0, 0.3)
        Debris:AddItem(attachment1, 0.3)
        Debris:AddItem(beam, 0.3)
        Debris:AddItem(pointLight, 0.3)
    end

    local function createLightningExplosion(basePos)
        local mainEffect = createLightningEffect(basePos, 3)
        for i = 1, 10 do
            local angle = math.rad(math.random(0, 360))
            local distance = math.random(5, EXPLOSION_RADIUS)
            local offsetX = math.cos(angle) * distance
            local offsetZ = math.sin(angle) * distance
            local position = basePos + Vector3.new(offsetX, math.random(-5, 20), offsetZ)
            createLightningEffect(position, math.random(15, 25) / 10)
            wait(0.1)
        end
    end

    local function performLightningStrike(basePos)
        -- Create main lightning explosion
        createLightningExplosion(basePos)

        -- Create lightning storm and light beams simultaneously
        for i = 1, 15 do
            local targetPos = basePos + Vector3.new(math.random(-STORM_RADIUS, STORM_RADIUS), 0, math.random(-STORM_RADIUS, STORM_RADIUS))
            local startPos = targetPos + Vector3.new(math.random(-10, 10), 200, math.random(-10, 10))
            
            -- Create lightning bolt
            createLightningBolt(startPos, targetPos)
            createDebrisEffect(targetPos)
            
            -- Create light beams (5-7 beams per lightning bolt)
            for j = 1, math.random(5, 7) do
                local beamPos = basePos + Vector3.new(math.random(-STORM_RADIUS, STORM_RADIUS), 0, math.random(-STORM_RADIUS, STORM_RADIUS))
                createLightBeam(beamPos)
            end
            
            wait(math.random(1, 10) / 100)
        end

        -- Play sound
        playLightningSound()

        -- Create additional ground strikes
        for i = 1, 5 do
            local targetPos = basePos + Vector3.new(math.random(-STORM_RADIUS, STORM_RADIUS), 0, math.random(-STORM_RADIUS, STORM_RADIUS))
            createLightningEffect(targetPos, math.random(10, 20) / 10)
            createDebrisEffect(targetPos)
            wait(0.2)
        end
    end

    local function onInputBegan(input, gameProcessed)
        if not gameProcessed and input.KeyCode == Enum.KeyCode.F then
            print(""F key pressed"")
            local character = player.Character
            if character and character:FindFirstChild(""HumanoidRootPart"") then
                local hrp = character.HumanoidRootPart
                LightningStrikeEvent:FireServer()
                performLightningStrike(hrp.Position)
            end
        end
    end

    UserInputService.InputBegan:Connect(onInputBegan)
    LightningStrikeEvent.OnClientEvent:Connect(performLightningStrike)
    print(""Lightning storm script loaded for "" .. player.Name)
end"
PE49Ef8q,2024-07-06_stats.json,rdp_snitch,JSON,Saturday 6th of July 2024 07:18:03 PM CDT,"{
  ""ip"": {
    ""45.156.129.105"": 3,
    ""43.157.40.109"": 3,
    ""165.232.56.186"": 12,
    ""165.22.15.41"": 3,
    ""159.223.176.117"": 12,
    ""67.205.170.59"": 3,
    ""185.170.144.3"": 6,
    ""64.124.50.139"": 3,
    ""104.248.154.46"": 6,
    ""205.210.31.254"": 9,
    ""87.251.75.64"": 3,
    ""91.238.181.22"": 6,
    ""135.26.109.26"": 3,
    ""62.215.34.181"": 6,
    ""162.248.225.122"": 12,
    ""142.93.225.173"": 9,
    ""87.251.75.120"": 6,
    ""91.238.181.20"": 6,
    ""44.213.128.94"": 891,
    ""147.185.132.106"": 9,
    ""88.214.25.63"": 6,
    ""88.214.25.65"": 12,
    ""167.94.146.58"": 3,
    ""150.223.56.176"": 108,
    ""164.92.104.215"": 3,
    ""170.187.228.62"": 396,
    ""206.168.34.35"": 3,
    ""206.238.220.98"": 3,
    ""58.218.199.219"": 15,
    ""218.238.204.46"": 3,
    ""220.248.76.186"": 3,
    ""205.210.31.213"": 9,
    ""194.165.16.37"": 6,
    ""179.60.149.8"": 6,
    ""88.214.25.62"": 6,
    ""47.106.214.128"": 3,
    ""106.38.113.226"": 3,
    ""111.231.6.252"": 3,
    ""205.210.31.215"": 9
  },
  ""asn"": {
    ""AS211680"": 3,
    ""AS132203"": 3,
    ""AS14061"": 48,
    ""AS197414"": 6,
    ""AS6461"": 3,
    ""AS396982"": 36,
    ""AS208091"": 9,
    ""AS49434"": 12,
    ""AS6300"": 3,
    ""AS21050"": 6,
    ""AS14576"": 12,
    ""AS14618"": 891,
    ""AS29551"": 24,
    ""AS398705"": 3,
    ""AS58519"": 108,
    ""AS63949"": 396,
    ""AS398324"": 3,
    ""AS399077"": 3,
    ""AS4134"": 15,
    ""AS9318"": 3,
    ""AS17621"": 3,
    ""AS48721"": 6,
    ""AS395839"": 6,
    ""AS37963"": 3,
    ""AS4847"": 3,
    ""AS45090"": 3
  },
  ""isp"": {
    ""NSEC - Sistemas Informaticos, S.A."": 3,
    ""Shenzhen Tencent Computer Systems Company Limited"": 6,
    ""DigitalOcean, LLC"": 48,
    ""Xhost Internet Solutions LP"": 15,
    ""Zayo Bandwidth"": 3,
    ""Google LLC"": 36,
    ""Datacenter location PAR1 France"": 12,
    ""Consolidated Communications, Inc."": 3,
    ""Fast Telecommunications Company W.L.L."": 6,
    ""Hosting Solution Ltd."": 12,
    ""Amazon.com"": 891,
    ""NOC EMAIL: noc@one-host.net"": 24,
    ""Censys, Inc."": 6,
    ""Cloud Computing Corporation"": 108,
    ""Akamai Technologies, Inc."": 396,
    ""Tcloudnet"": 3,
    ""Chinanet"": 15,
    ""SK Broadband Co Ltd"": 3,
    ""China Unicom CncNet"": 3,
    ""Flyservers S.A."": 6,
    ""HOSTKEY"": 6,
    ""Hangzhou Alibaba Advertising Co"": 3,
    ""China Networks Inter-Exchange"": 3
  },
  ""org"": {
    ""Inap CHI"": 3,
    ""Tencent Cloud Computing"": 3,
    ""DigitalOcean, LLC"": 45,
    ""Digital Ocean"": 3,
    ""Xhostis"": 6,
    ""Microsoft Corporation"": 3,
    ""Palo Alto Networks, Inc"": 36,
    ""Xhost Internet Solutions"": 9,
    ""ThinkTech Technology Industrial CO. Limited"": 36,
    ""Consolidated Communications, Inc."": 3,
    ""Fasttelco"": 6,
    ""IT Hosting Group"": 12,
    ""AWS EC2 (us-east-1)"": 891,
    ""Censys, Inc."": 3,
    ""Chinanet SD"": 108,
    ""Linode"": 396,
    ""Censys Inc"": 3,
    ""Tcloudnet, Inc"": 3,
    ""Chinanet JS"": 15,
    ""SK Broadband Co Ltd"": 3,
    ""Unknown"": 3,
    ""Flyservers S.A"": 6,
    ""Safe VPN S.A"": 6,
    ""Aliyun Computing Co., LTD"": 3,
    ""Chinanet BJ"": 3,
    ""Tencent cloud computing (Beijing) Co., Ltd."": 3
  },
  ""regionName"": {
    ""Illinois"": 6,
    ""Hesse"": 30,
    ""California"": 63,
    ""New Jersey"": 18,
    ""North Holland"": 24,
    ""Virginia"": 894,
    ""Central Singapore"": 6,
    ""\u00cele-de-France"": 12,
    ""Texas"": 3,
    ""Hawalli"": 6,
    ""Shandong"": 108,
    ""North West"": 399,
    ""Jiangsu"": 15,
    ""Daegu"": 3,
    ""Shanghai"": 6,
    ""Kaunas"": 6,
    ""Managua Department"": 6,
    ""Guangdong"": 3,
    ""Beijing"": 3
  },
  ""country"": {
    ""United States"": 984,
    ""Germany"": 30,
    ""The Netherlands"": 24,
    ""Singapore"": 405,
    ""France"": 12,
    ""Kuwait"": 6,
    ""China"": 135,
    ""South Korea"": 3,
    ""Lithuania"": 6,
    ""Nicaragua"": 6
  },
  ""account"": {
    ""jtia556l"": 3,
    ""hello"": 1347,
    ""lvgszcls"": 12,
    ""beio"": 6,
    ""bor5bcns"": 12,
    ""Administr"": 15,
    ""Test"": 63,
    ""wVgKYVrvG"": 3,
    ""WohltF"": 3,
    ""YWwGzR"": 3,
    ""ZKdNuStsa"": 3,
    ""xTkJaz"": 3,
    ""evVyYm"": 3,
    ""(empty)"": 9,
    ""Administrator"": 27,
    ""Admin"": 27,
    ""Whatuptime.com"": 27,
    ""Jakartakini123#"": 27,
    ""mKGusNYgz"": 3,
    ""kTfFrT"": 3,
    ""boRkHt"": 3,
    ""gxFBpqiRH"": 3,
    ""cYPkzn"": 3,
    ""vTOLHz"": 3
  },
  ""keyboard"": {
    ""Unknown"": 1611
  },
  ""client_build"": {
    ""Unknown"": 1611
  },
  ""client_name"": {
    ""Unknown"": 1611
  },
  ""ip_type"": {
    ""Unknown"": 72,
    ""hosting"": 1500,
    ""hosting & proxy"": 39
  }
}"
YvKL6348,2024-07-06_stats.json,rdp_snitch,JSON,Saturday 6th of July 2024 07:16:15 PM CDT,"{
  ""ip"": {
    ""45.156.129.105"": 2,
    ""43.157.40.109"": 2,
    ""165.232.56.186"": 8,
    ""165.22.15.41"": 2,
    ""159.223.176.117"": 8,
    ""67.205.170.59"": 2,
    ""185.170.144.3"": 4,
    ""64.124.50.139"": 2,
    ""104.248.154.46"": 4,
    ""205.210.31.254"": 6,
    ""87.251.75.64"": 2,
    ""91.238.181.22"": 4,
    ""135.26.109.26"": 2,
    ""62.215.34.181"": 4,
    ""162.248.225.122"": 8,
    ""142.93.225.173"": 6,
    ""87.251.75.120"": 4,
    ""91.238.181.20"": 4,
    ""44.213.128.94"": 594,
    ""147.185.132.106"": 6,
    ""88.214.25.63"": 4,
    ""88.214.25.65"": 8,
    ""167.94.146.58"": 2,
    ""150.223.56.176"": 72,
    ""164.92.104.215"": 2,
    ""170.187.228.62"": 264,
    ""206.168.34.35"": 2,
    ""206.238.220.98"": 2,
    ""58.218.199.219"": 10,
    ""218.238.204.46"": 2,
    ""220.248.76.186"": 2,
    ""205.210.31.213"": 6,
    ""194.165.16.37"": 4,
    ""179.60.149.8"": 4,
    ""88.214.25.62"": 4,
    ""47.106.214.128"": 2,
    ""106.38.113.226"": 2,
    ""111.231.6.252"": 2,
    ""205.210.31.215"": 6
  },
  ""asn"": {
    ""AS211680"": 2,
    ""AS132203"": 2,
    ""AS14061"": 32,
    ""AS197414"": 4,
    ""AS6461"": 2,
    ""AS396982"": 24,
    ""AS208091"": 6,
    ""AS49434"": 8,
    ""AS6300"": 2,
    ""AS21050"": 4,
    ""AS14576"": 8,
    ""AS14618"": 594,
    ""AS29551"": 16,
    ""AS398705"": 2,
    ""AS58519"": 72,
    ""AS63949"": 264,
    ""AS398324"": 2,
    ""AS399077"": 2,
    ""AS4134"": 10,
    ""AS9318"": 2,
    ""AS17621"": 2,
    ""AS48721"": 4,
    ""AS395839"": 4,
    ""AS37963"": 2,
    ""AS4847"": 2,
    ""AS45090"": 2
  },
  ""isp"": {
    ""NSEC - Sistemas Informaticos, S.A."": 2,
    ""Shenzhen Tencent Computer Systems Company Limited"": 4,
    ""DigitalOcean, LLC"": 32,
    ""Xhost Internet Solutions LP"": 10,
    ""Zayo Bandwidth"": 2,
    ""Google LLC"": 24,
    ""Datacenter location PAR1 France"": 8,
    ""Consolidated Communications, Inc."": 2,
    ""Fast Telecommunications Company W.L.L."": 4,
    ""Hosting Solution Ltd."": 8,
    ""Amazon.com"": 594,
    ""NOC EMAIL: noc@one-host.net"": 16,
    ""Censys, Inc."": 4,
    ""Cloud Computing Corporation"": 72,
    ""Akamai Technologies, Inc."": 264,
    ""Tcloudnet"": 2,
    ""Chinanet"": 10,
    ""SK Broadband Co Ltd"": 2,
    ""China Unicom CncNet"": 2,
    ""Flyservers S.A."": 4,
    ""HOSTKEY"": 4,
    ""Hangzhou Alibaba Advertising Co"": 2,
    ""China Networks Inter-Exchange"": 2
  },
  ""org"": {
    ""Inap CHI"": 2,
    ""Tencent Cloud Computing"": 2,
    ""DigitalOcean, LLC"": 30,
    ""Digital Ocean"": 2,
    ""Xhostis"": 4,
    ""Microsoft Corporation"": 2,
    ""Palo Alto Networks, Inc"": 24,
    ""Xhost Internet Solutions"": 6,
    ""ThinkTech Technology Industrial CO. Limited"": 24,
    ""Consolidated Communications, Inc."": 2,
    ""Fasttelco"": 4,
    ""IT Hosting Group"": 8,
    ""AWS EC2 (us-east-1)"": 594,
    ""Censys, Inc."": 2,
    ""Chinanet SD"": 72,
    ""Linode"": 264,
    ""Censys Inc"": 2,
    ""Tcloudnet, Inc"": 2,
    ""Chinanet JS"": 10,
    ""SK Broadband Co Ltd"": 2,
    ""Unknown"": 2,
    ""Flyservers S.A"": 4,
    ""Safe VPN S.A"": 4,
    ""Aliyun Computing Co., LTD"": 2,
    ""Chinanet BJ"": 2,
    ""Tencent cloud computing (Beijing) Co., Ltd."": 2
  },
  ""regionName"": {
    ""Illinois"": 4,
    ""Hesse"": 20,
    ""California"": 42,
    ""New Jersey"": 12,
    ""North Holland"": 16,
    ""Virginia"": 596,
    ""Central Singapore"": 4,
    ""\u00cele-de-France"": 8,
    ""Texas"": 2,
    ""Hawalli"": 4,
    ""Shandong"": 72,
    ""North West"": 266,
    ""Jiangsu"": 10,
    ""Daegu"": 2,
    ""Shanghai"": 4,
    ""Kaunas"": 4,
    ""Managua Department"": 4,
    ""Guangdong"": 2,
    ""Beijing"": 2
  },
  ""country"": {
    ""United States"": 656,
    ""Germany"": 20,
    ""The Netherlands"": 16,
    ""Singapore"": 270,
    ""France"": 8,
    ""Kuwait"": 4,
    ""China"": 90,
    ""South Korea"": 2,
    ""Lithuania"": 4,
    ""Nicaragua"": 4
  },
  ""account"": {
    ""jtia556l"": 2,
    ""hello"": 898,
    ""lvgszcls"": 8,
    ""beio"": 4,
    ""bor5bcns"": 8,
    ""Administr"": 10,
    ""Test"": 42,
    ""wVgKYVrvG"": 2,
    ""WohltF"": 2,
    ""YWwGzR"": 2,
    ""ZKdNuStsa"": 2,
    ""xTkJaz"": 2,
    ""evVyYm"": 2,
    ""(empty)"": 6,
    ""Administrator"": 18,
    ""Admin"": 18,
    ""Whatuptime.com"": 18,
    ""Jakartakini123#"": 18,
    ""mKGusNYgz"": 2,
    ""kTfFrT"": 2,
    ""boRkHt"": 2,
    ""gxFBpqiRH"": 2,
    ""cYPkzn"": 2,
    ""vTOLHz"": 2
  },
  ""keyboard"": {
    ""Unknown"": 1074
  },
  ""client_build"": {
    ""Unknown"": 1074
  },
  ""client_name"": {
    ""Unknown"": 1074
  },
  ""ip_type"": {
    ""Unknown"": 48,
    ""hosting"": 1000,
    ""hosting & proxy"": 26
  }
}"
K2f8NH1A,2024-07-06_stats.json,rdp_snitch,JSON,Saturday 6th of July 2024 07:15:09 PM CDT,"{
  ""ip"": {
    ""45.156.129.105"": 1,
    ""43.157.40.109"": 1,
    ""165.232.56.186"": 4,
    ""165.22.15.41"": 1,
    ""159.223.176.117"": 4,
    ""67.205.170.59"": 1,
    ""185.170.144.3"": 2,
    ""64.124.50.139"": 1,
    ""104.248.154.46"": 2,
    ""205.210.31.254"": 3,
    ""87.251.75.64"": 1,
    ""91.238.181.22"": 2,
    ""135.26.109.26"": 1,
    ""62.215.34.181"": 2,
    ""162.248.225.122"": 4,
    ""142.93.225.173"": 3,
    ""87.251.75.120"": 2,
    ""91.238.181.20"": 2,
    ""44.213.128.94"": 297,
    ""147.185.132.106"": 3,
    ""88.214.25.63"": 2,
    ""88.214.25.65"": 4,
    ""167.94.146.58"": 1,
    ""150.223.56.176"": 36,
    ""164.92.104.215"": 1,
    ""170.187.228.62"": 132,
    ""206.168.34.35"": 1,
    ""206.238.220.98"": 1,
    ""58.218.199.219"": 5,
    ""218.238.204.46"": 1,
    ""220.248.76.186"": 1,
    ""205.210.31.213"": 3,
    ""194.165.16.37"": 2,
    ""179.60.149.8"": 2,
    ""88.214.25.62"": 2,
    ""47.106.214.128"": 1,
    ""106.38.113.226"": 1,
    ""111.231.6.252"": 1,
    ""205.210.31.215"": 3
  },
  ""asn"": {
    ""AS211680"": 1,
    ""AS132203"": 1,
    ""AS14061"": 16,
    ""AS197414"": 2,
    ""AS6461"": 1,
    ""AS396982"": 12,
    ""AS208091"": 3,
    ""AS49434"": 4,
    ""AS6300"": 1,
    ""AS21050"": 2,
    ""AS14576"": 4,
    ""AS14618"": 297,
    ""AS29551"": 8,
    ""AS398705"": 1,
    ""AS58519"": 36,
    ""AS63949"": 132,
    ""AS398324"": 1,
    ""AS399077"": 1,
    ""AS4134"": 5,
    ""AS9318"": 1,
    ""AS17621"": 1,
    ""AS48721"": 2,
    ""AS395839"": 2,
    ""AS37963"": 1,
    ""AS4847"": 1,
    ""AS45090"": 1
  },
  ""isp"": {
    ""NSEC - Sistemas Informaticos, S.A."": 1,
    ""Shenzhen Tencent Computer Systems Company Limited"": 2,
    ""DigitalOcean, LLC"": 16,
    ""Xhost Internet Solutions LP"": 5,
    ""Zayo Bandwidth"": 1,
    ""Google LLC"": 12,
    ""Datacenter location PAR1 France"": 4,
    ""Consolidated Communications, Inc."": 1,
    ""Fast Telecommunications Company W.L.L."": 2,
    ""Hosting Solution Ltd."": 4,
    ""Amazon.com"": 297,
    ""NOC EMAIL: noc@one-host.net"": 8,
    ""Censys, Inc."": 2,
    ""Cloud Computing Corporation"": 36,
    ""Akamai Technologies, Inc."": 132,
    ""Tcloudnet"": 1,
    ""Chinanet"": 5,
    ""SK Broadband Co Ltd"": 1,
    ""China Unicom CncNet"": 1,
    ""Flyservers S.A."": 2,
    ""HOSTKEY"": 2,
    ""Hangzhou Alibaba Advertising Co"": 1,
    ""China Networks Inter-Exchange"": 1
  },
  ""org"": {
    ""Inap CHI"": 1,
    ""Tencent Cloud Computing"": 1,
    ""DigitalOcean, LLC"": 15,
    ""Digital Ocean"": 1,
    ""Xhostis"": 2,
    ""Microsoft Corporation"": 1,
    ""Palo Alto Networks, Inc"": 12,
    ""Xhost Internet Solutions"": 3,
    ""ThinkTech Technology Industrial CO. Limited"": 12,
    ""Consolidated Communications, Inc."": 1,
    ""Fasttelco"": 2,
    ""IT Hosting Group"": 4,
    ""AWS EC2 (us-east-1)"": 297,
    ""Censys, Inc."": 1,
    ""Chinanet SD"": 36,
    ""Linode"": 132,
    ""Censys Inc"": 1,
    ""Tcloudnet, Inc"": 1,
    ""Chinanet JS"": 5,
    ""SK Broadband Co Ltd"": 1,
    ""Unknown"": 1,
    ""Flyservers S.A"": 2,
    ""Safe VPN S.A"": 2,
    ""Aliyun Computing Co., LTD"": 1,
    ""Chinanet BJ"": 1,
    ""Tencent cloud computing (Beijing) Co., Ltd."": 1
  },
  ""regionName"": {
    ""Illinois"": 2,
    ""Hesse"": 10,
    ""California"": 21,
    ""New Jersey"": 6,
    ""North Holland"": 8,
    ""Virginia"": 298,
    ""Central Singapore"": 2,
    ""\u00cele-de-France"": 4,
    ""Texas"": 1,
    ""Hawalli"": 2,
    ""Shandong"": 36,
    ""North West"": 133,
    ""Jiangsu"": 5,
    ""Daegu"": 1,
    ""Shanghai"": 2,
    ""Kaunas"": 2,
    ""Managua Department"": 2,
    ""Guangdong"": 1,
    ""Beijing"": 1
  },
  ""country"": {
    ""United States"": 328,
    ""Germany"": 10,
    ""The Netherlands"": 8,
    ""Singapore"": 135,
    ""France"": 4,
    ""Kuwait"": 2,
    ""China"": 45,
    ""South Korea"": 1,
    ""Lithuania"": 2,
    ""Nicaragua"": 2
  },
  ""account"": {
    ""jtia556l"": 1,
    ""hello"": 449,
    ""lvgszcls"": 4,
    ""beio"": 2,
    ""bor5bcns"": 4,
    ""Administr"": 5,
    ""Test"": 21,
    ""wVgKYVrvG"": 1,
    ""WohltF"": 1,
    ""YWwGzR"": 1,
    ""ZKdNuStsa"": 1,
    ""xTkJaz"": 1,
    ""evVyYm"": 1,
    ""(empty)"": 3,
    ""Administrator"": 9,
    ""Admin"": 9,
    ""Whatuptime.com"": 9,
    ""Jakartakini123#"": 9,
    ""mKGusNYgz"": 1,
    ""kTfFrT"": 1,
    ""boRkHt"": 1,
    ""gxFBpqiRH"": 1,
    ""cYPkzn"": 1,
    ""vTOLHz"": 1
  },
  ""keyboard"": {
    ""Unknown"": 537
  },
  ""client_build"": {
    ""Unknown"": 537
  },
  ""client_name"": {
    ""Unknown"": 537
  },
  ""ip_type"": {
    ""Unknown"": 24,
    ""hosting"": 500,
    ""hosting & proxy"": 13
  }
}"
5essRHSx,Equipar Itens na Primeira Classe Acis 401,-JRGames-,Java,Saturday 6th of July 2024 06:11:10 PM CDT,"diff --git a/acis_public-master/aCis_gameserver/java/net/sf/l2j/gameserver/model/actor/Player.java b/acis_public-master/aCis_gameserver/java/net/sf/l2j/gameserver/model/actor/Player.java
index 023516a..0fef0f9 100644
--- a/acis_public-master/aCis_gameserver/java/net/sf/l2j/gameserver/model/actor/Player.java
+++ b/acis_public-master/aCis_gameserver/java/net/sf/l2j/gameserver/model/actor/Player.java
 		return gms;
 	}
+
+	// Determina quais itens devem equipar com base na classe do personagem
+	public void equipItemsBasedOnClass() {
+		int[] itemIds;
+
+		switch (this.getClassId()) {
+		case WARRIOR:
+			itemIds = new int[] { 352, 2378, 2411, 2425, 2449, 2525, 881, 881, 850, 850, 913, 297, 1463, 728, 1539, 736,
+					9612 };
+			break;
+		case KNIGHT:
+		case TEMPLE_KNIGHT:
+		case PALUS_KNIGHT:
+		case SCAVENGER:
+		case ARTISAN:
+			itemIds = new int[] { 352, 2378, 2411, 2425, 2449, 2499, 881, 881, 850, 850, 913, 2493, 159, 1463, 728,
+					1539, 736, 9612 };
+			break;
+		case ROGUE:
+		case ELVEN_SCOUT:
+		case ASSASSIN:
+			itemIds = new int[] { 395, 417, 2424, 2448, 2412, 225, 881, 881, 850, 850, 913, 280, 1463, 728, 1539, 736,
+					9612 };
+			break;
+		case HUMAN_WIZARD:
+		case CLERIC:
+		case ELVEN_WIZARD:
+		case ELVEN_ORACLE:
+		case DARK_WIZARD:
+		case SHILLIEN_ORACLE:
+		case ORC_SHAMAN:
+			itemIds = new int[] { 437, 470, 2450, 2426, 2412, 189, 881, 881, 850, 850, 913, 629, 1463, 728, 1539, 736,
+					9613 };
+			break;
+		case ORC_RAIDER:
+			itemIds = new int[] { 352, 2378, 2411, 2425, 2449, 70, 881, 881, 850, 850, 913, 297, 1463, 728, 1539, 736,
+					9612 };
+			break;
+		case MONK:
+			itemIds = new int[] { 395, 417, 2424, 2448, 2412, 262, 881, 881, 850, 850, 913, 1463, 728, 1539, 736,
+					9612 };
+			break;
+		default:
+			// Classe n√£o encontrada, sair
+			return;
+		}
+
+		equipItems(itemIds);
+
+		// Adicionar itens ao invent√°rio
+		this.getInventory().addItem(""Soul Shot Grade D"", 1463, 2000, this, null);
+		this.getInventory().addItem(""Spirit Shot Grade D"", 3948, 2000, this, null);
+		this.getInventory().addItem(""Mana Potion"", 728, 200, this, null);
+		this.getInventory().addItem(""Greater Healing Potion"", 1539, 200, this, null);
+		this.getInventory().addItem(""Scroll of Scape"", 736, 5, this, null);
+	}
+
+	private void equipItems(int... itemIds) {
+		for (int itemId : itemIds) {
+			ItemInstance item = this.getInventory().addItem(""Armor"", itemId, 1, this, null);
+			// Verificar se o item pode ser equipado
+			if (item.getItem().getBodyPart() != 0) {
+				this.getInventory().equipItemAndRecord(item);
+			}
+		}
+
+		this.getInventory().updateDatabase();
+		this.sendPacket(new ItemList(this, true));
+		MagicSkillUse MSU = new MagicSkillUse(this, this, 2024, 1, 1, 0);
+		this.broadcastPacket(MSU);
+	}
 }
\ No newline at end of file
diff --git a/acis_public-master/aCis_gameserver/java/net/sf/l2j/gameserver/model/actor/instance/ClassMaster.java b/acis_public-master/aCis_gameserver/java/net/sf/l2j/gameserver/model/actor/instance/ClassMaster.java
index 766a843..36f3ee4 100644
--- a/acis_public-master/aCis_gameserver/java/net/sf/l2j/gameserver/model/actor/instance/ClassMaster.java
+++ b/acis_public-master/aCis_gameserver/java/net/sf/l2j/gameserver/model/actor/instance/ClassMaster.java
 		player.refreshHennaList();
 		player.broadcastUserInfo();
+
+		// After class change is successful, equip items based on class
+		player.equipItemsBasedOnClass();
+
 		return true;
 	}

\ No newline at end of file
"
bR50bkkC,Turtle,kekkekkeekkek,Lua,Saturday 6th of July 2024 05:18:31 PM CDT,"local Vector3 = {}
Vector3.__index = Vector3
Vector3.__tostring = function(self, append)
	local vectorString = string.format(""%d, %d, %d"", self.X, self.Y, self.Z)
	return (append ~= nil and vectorString .. "" "" .. append) or vectorString
end
function Vector3.new(x, y, z)
	return setmetatable({X = x, Y = y, Z = z}, Vector3)
end
local Vector2 = {}
Vector2.__index = Vector2
Vector2.__tostring = function(self, append)
	local vectorString = string.format(""%d, %d"", self.X, self.Y)
	return (append ~= nil and vectorString .. "" "" .. append) or vectorString
end
function Vector2.new(x, y)
	return setmetatable({X = x, Y = y}, Vector2)
end

local Util = {}
function Util.OutputStats()
	print(""\n---- Turtle Stats ----"")
	print(""  Fuel"", turtle.getFuelLevel())
	print(""\n"")
end
function Util.GetIntInput(message)
	print(message)
	return tonumber(io.read())
end
function Util.FindFuel()
	for i = 1, 16, 1 do
		local itemInformation = turtle.getItemDetail(i)
		if itemInformation ~= nil then
			local name = string.lower(itemInformation.name)
			local count = itemInformation.count
			
			if string.find(name, ""coal"") or string.find(name, ""log"") then
				return {i, name, count}
			end
		end
	end
	return false
end
function Util.Refuel()
	local fuelInformation = Util.FindFuel()
	if fuelInformation ~= false then
		turtle.select(fuelInformation[1])
		turtle.refuel(1)
		turtle.select(1)
		return true
	else
		print(""No fuel"")
	end
	return false
end
function Util.CheckFuel()
	local currentFuel = turtle.getFuelLevel() or 0
	if currentFuel == 0 and Util.Refuel() == true then
		print(""Refueled Turtle"")
		return true
	end
	return false
end;

local Miner = {}
function Miner.Quarry(vec3)
	
end
function Miner.Stip(length)
	for i = 1, length do
		Util.CheckFuel()
		
		if turtle.detect() then turtle.dig() end
		if turtle.detectUp() then turtle.digUp() end
		
		turtle.forward()
	end
end

--local x = Util.GetIntInput(""Input X"")
--local y = Util.GetIntInput(""Input Y"")
--local z = Util.GetIntInput(""Input Z"")
--Miner.Quarry(Vector3.new(x, y, z))

local x = Util.GetIntInput(""Length"")
Miner.Stip(x)"
BU03CFQy,soda script for juan zorro,Kurome76,Lua,Saturday 6th of July 2024 04:21:03 PM CDT,"if SERVER then
    AddCSLuaFile()
end

SWEP.PrintName = ""Drink Can""
SWEP.Author = ""Juanzorro1997""
SWEP.Instructions = ""Left click to drink (up to 3 times), then throw the can.""

SWEP.Spawnable = true
SWEP.AdminOnly = false

SWEP.Primary.ClipSize = -1
SWEP.Primary.DefaultClip = -1
SWEP.Primary.Automatic = false
SWEP.Primary.Ammo = ""none""

SWEP.Secondary.ClipSize = -1
SWEP.Secondary.DefaultClip = -1
SWEP.Secondary.Automatic = false
SWEP.Secondary.Ammo = ""none""

SWEP.UseHands = true
SWEP.ViewModel = ""models/props_junk/PopCan01a.mdl""
SWEP.WorldModel = ""models/props_junk/PopCan01a.mdl""

SWEP.DrinkCount = 0
SWEP.MaxDrinks = 3

function SWEP:Initialize()
    self:SetHoldType(""slam"")
end

function SWEP:PrimaryAttack()
    if SERVER then
        if self.DrinkCount < self.MaxDrinks then
            self.DrinkCount = self.DrinkCount + 1
            self.Owner:ChatPrint(""Tomas un sorbo! ("" .. self.DrinkCount .. ""/"" .. self.MaxDrinks .. "")"")
            self.Owner:EmitSound(""npc/barnacle/barnacle_gulp1.wav"")
        else
            self:ThrowCan()
        end
    end
end

function SWEP:SecondaryAttack()

end

function SWEP:ThrowCan()
    if SERVER then
        local can = ents.Create(""prop_physics"")
        if not IsValid(can) then return end

        can:SetModel(self.WorldModel)
        can:SetPos(self.Owner:EyePos() + (self.Owner:GetAimVector() * 16))
        can:SetAngles(self.Owner:EyeAngles())
        can:Spawn()

        local phys = can:GetPhysicsObject()
        if not IsValid(phys) then can:Remove() return end

        local velocity = self.Owner:GetAimVector() * 500
        phys:ApplyForceCenter(velocity)

        self.Owner:StripWeapon(self:GetClass())
    end
end

if CLIENT then
	local WorldModel = ClientsideModel(SWEP.WorldModel)

	--WorldModel:SetSkin(1)
	WorldModel:SetNoDraw(true)

	function SWEP:DrawWorldModel()
		--self:Drawspiral()
		--self.Weapon:DrawModel()
		local _Owner = self:GetOwner()
		local ownervalid = IsValid(_Owner)

		if ownervalid then
            -- Specify a good position
			local offsetVec = Vector(2, -2, -1)
			local offsetAng = Angle(0, 0, 180)
			
			local boneid = _Owner:LookupBone(""ValveBiped.Bip01_R_Hand"") -- Right Hand
			if !boneid then return end

			local matrix = _Owner:GetBoneMatrix(boneid)
			if !matrix then return end

			local newPos, newAng = LocalToWorld(offsetVec, offsetAng, matrix:GetTranslation(), matrix:GetAngles())

			WorldModel:SetPos(newPos)
			WorldModel:SetAngles(newAng)

            WorldModel:SetupBones()
		else
			WorldModel:SetPos(self:GetPos())
			WorldModel:SetAngles(self:GetAngles())
		end
		WorldModel:DrawModel()
	end
end"
3EbZYq8a,Untitled,Mysoft,QBasic,Saturday 6th of July 2024 04:19:49 PM CDT,"10 PCLEAR8:PMODE4,1:SCREEN1,0
20 DIM LE$(26)
30 FORK=0TO26:READ LE$(K):NEXT
40 FORK=0TO9:READ NU$(K):NEXT
50 GOTO5000
500 RA=AD*C:VX=IAS*SIN(RA)
510 VY=IAS*COS(RA):RETURN
1000 PZ=PZ+GZ:PY=PY+GY:PX=PX+GX
1020 IAS=IAS+16*(TC*30-IAS-8*PT)/IAS
1030 IFST=1THENPMODE4,1:DRAW""BM108,40C0"":A$=""STALL"":GOSUB4000:DRAW""C5"":ST=0:GOTO1050
1040 IFIAS<30GOSUB1500
1050 AD=AD+RL:IFAD<0THENAD=AD+360
1060 IFAD>359THENAD=AD-360
1070 VZ=IAS*SIN(PT*C)-10+IAS/15
1080 GZ=VZ:GY=VY+WY:GX=VX+WX
1090 IFVY=0THENGD=-PI/2:GOTO1110
1100 GD=-ATN(VX/VY)/C
1110 GOSUB500
1120 RETURN
1500 PMODE4,1:ST=1:DRAW""BM108,40"":A$=""STALL"":GOSUB4000:PLAY""T20AGFEDCAGFEDC""
1510 RL=RND(21)-10:PT=-20-RND(5)
1520 RETURN
2000 PCOPY5TO7:PCOPY6TO8:PMODE4,5
2010 LINE(35,120)-(35+20*SIN(IAS*PI/200),120-20*COS(IAS*PI/200)),PSET
2020 TN=PZ/1000:UN=PZ-1000*INT(TN):LINE(155,120)-(155+15*SIN(TN*PI/5),120-15*COS(TN*PI/5)),PSET
2030 LINE(155,120)-(155+20*SIN(UN*PI/500),120-20*COS(UN*PI/500)),PSET
2040 LINE(215,120)-(215+20*SIN(TC*PI/5),120-20*COS(TC*PI/5)),PSET
2050 DRAW""BM16,172S8"":A$=STR$(ABS(INT(AD))):GOSUB4000
2060 IFPY=0THENRB=0ELSERB=ATN(PX/PY)/C:IFPY>0THENRB=RB+180
2070 IFRB<0THENRB=RB+360
2080 DRAW""BM80,172"":A$=STR$(INT(RB)):GOSUB4000:DRAW""BM140,172"":A$=STR$(ABS(INT(PX))):GOSUB4000
2090 DRAW""BM196,172"":A$=STR$(INT(SQR(PY*PY+PX*PX))):GOSUB4000
2100 YC=120+PT:X1=80:X2=110:Y1=YC+17*TAN(RL*2*C):Y2=YC-17*TAN(RL*2*C)
2110 IF(YC<105ORYC>135)ANDRL=0THEN2320
2120 IFY1<105THENX1=95-(95-X1)*(105-YC)/(Y1-YC):Y1=105:GOTO2140
2130 IFY>135THENX1=95-(95-X1)*(135-YC)/(Y1-YC):Y1=135
2140 IFY2<105THENX2=95-(95-X2)*(105-YC)/(Y2-YC):Y2=105:GOTO2160
2150 IFY2>135THENX2=95-(95-X2)*(135-YC)/(Y2-YC):Y2=135
2160 IFX1<80ORX2>110THEN2180
2170 LINE(X1,Y1)-(X2,Y2),PSET
2180 PMODE4,1:IFX5-R>10ANDX5+R<245ANDY5>0ANDY5<80THENCIRCLE(X5,Y5),R,0,10,0,.5
2190 IFRL=RR ANDPP=PT THEN2290
2200 IFHF=1THENLINE(X3,Y3)-(X4,Y4),PRESET
2210 HF=0:YC=33+PT*4:X3=11:X4=244:Y3=YC+118*TAN(RL*2*C):Y4=YC-118*TAN(RL*2*C)
2220 IF(YC<10ORYC>79)ANDRL=0THEN2290
2230 IFY3<1THENX3=128-(128-X3)*(1-YC)/(Y3-YC):Y3=1:GOTO2250
2240 IFY3>79THENX3=128-(128-X3)*(79-YC)/(Y3-YC):Y3=79
2250 IFY4<1THENX4=128-(128-X4)*(1-YC)/(Y4-YC):Y4=1:GOTO2270
2260 IFY4>79THENX4=128-(128-X4)*(79-YC)/(Y4-YC):Y4=79
2270 IFX3<11ORX4>244THEN2290
2280 HF=1:LINE(X3,Y3)-(X4,Y4),PSET
2290 WB=AD:IFAD>180THENWB=WB-360
2300 IFRB>180THENWB=WB+360-RB ELSEWB=WB-RB
2310 IFABS(WB)>60ANDABS(PY)>1000THEN2370
2320 AN=118/(60*SQR((X3-X4)*(X3-X4)+(Y3-Y4)*(Y3-Y4))):X5=(X3+X4)/2+SGN(X3-X4)+WB*AN*(X3-X4)
2330 Y5=(Y3+Y4)/2+2+WB*AN*(Y3-Y4):IFX5<11ORX5>244ORY5<1ORY5>79THEN2370
2340 IFABS(PY)<1000THENR=8-Y5/10ELSER=4000/ABS(PY):IFR*10+Y5>80THENR=8-Y5/10
2350 IFY5<1ORY5>79ORX5-R<11ORX5+R>244THEN2370
2360 CIRCLE(X5,Y5),R,5,10,0,.5
2370 PCOPY7TO3:PCOPY8TO4
2380 RR=RL:PP=PT:RETURN
3000 IFPEEK(337)=255THENRETURN
3010 IFPEEK(341)=251ANDTC>.2THENTC=TC-.2
3020 IFPEEK(344)=254ANDTC<8.8THENTC=TC+.2
3030 IFPEEK(341)=247THENPT=PT+1
3040 IFPEEK(342)=247THENPT=PT-1
3050 IFPEEK(343)=247ANDRL>-30THENRL=RL-1
3060 IFPEEK(344)=247ANDRL<30THENRL=RL+1
3070 RETURN
4000 FORK=1TOLEN(A$):B$=MID$(A$,K,1)
4020 IFB$>=""0""ANDB$<=""9""THENDRAWNU$(VAL(B$)):GOTO4050
4030 N=ASC(B$)-64:N=N>0ANDN:DRAW LE$(N)
4050 NEXT:RETURN
5000 PP=-1:RR=-1
5010 PI=4*ATN(1):C=PI/180:PY=-20000:PZ=2000:IAS=150
5020 CLS:INPUT""INPUT WIND SPEED(1-50) M/S"";X0
5025 IF X0>50 OR X0<1 THEN 5020
5030 INPUT""WIND DIRECTION (0-359) DEGREES"";X1
5035 IF X1>359 OR X1<0 THEN5030
5040 X0=X0/3
5050 PRINT:PRINT""WIND SPEED="";3*X0;""M/S"":PRINT""DIRECTION="";X1;""DEGREES""
5060 WY=X0*COS(X1*C)
5070 WX=-X0*SIN(X1*C)
5080 GZ=VZ:GY=VY+WY:GX=VX+WX
5090 TC=5
5100 RT=3:TP=5:WR=50
5110 PCLS:LINE(10,0)-(245,80),PSET,B
5120 FORK=0TO3:CIRCLE(35+K*60,120),25,5:NEXT
5130 DRAW""BM18,88SS4"":A$=""AIRSPEED"":GOSUB4000:DRAW""BM80,88"":A$=""HORIZON"":GOSUB4000
5140 DRAW""BM140,88"":A$=""ALTITUDE"":GOSUB4000:DRAW""BM208,88"":A$=""RPM"":GOSUB4000
5150 DRAW""BM18,160"":A$=""BEARING"":GOSUB4000:DRAW""BM82,152"":A$=""RUNWAY"":GOSUB4000:DRAW""BM80,160"":A$=""BEARING"":GOSUB4000
5160 DRAW""BM144,160"":A$=""DRIFT"":GOSUB4000:DRAW""BM200,160"":A$=""DISTANCE"":GOSUB4000
5170 DRAW""BM81,118R9F5E5R9""
5180 X=35:Y=120:GOSUB7000:X=155:GOSUB7000:X=215:GOSUB7000
5190 PCOPY3TO5:PCOPY3TO7:PCOPY4TO6:PCOPY4TO8:SCREEN1,1
5500 GOSUB3000:GOSUB1000
5510 IFPZ<=0THEN6000
5520 GOSUB2000
5530 GOTO5500
6000 IFABS(RL)>RT ORPT>TP ORPT<0 ORIAS>80THEN6100
6010 IFABS(PX)>WR ORABS(PY)>1000THEN6200
6020 CLS:PRINT"" CONGRATULATIONS A SUECESSFULL    LANDING"":GOTO6500
6100 LINE(0,0)-(RND(128)+63,RND(96)+48),PSET:LINE-(255,191),PSET:LINE(255,0)-(RND(128)+63,RND(96)+48),PSET:LINE-(0,191),PSET
6110 FORK=1TO2000:NEXT
6120 CLS:PRINT"" A CRASH LIKE THAT HAS WRECKED   THE AIRFACT AND KILLED YOUR    PASSENGERS"":GOTO6500
6200 CLS:PRINT"" YOU LANDED OFF THE RUNWAY""
6210 IF IAS<40 THEN PRINT "" FORTUNATELY YOU WEREN'T GOING   FAST ENOUGH TO DO MUCH DAMAGE"":GOTO6500
6220 IF IAS<80 THEN PRINT"" AT THAT SPEED YOU GOT AWAY WITH LIGHT DAMAGE AND A FEW BRUISES"":GOTO6500
6230 PRINT"" MISSING THE RUNWAY AT THAT      SPEED HAS LEFT NO SURVIVORS!""
6500 PRINT:PRINT"" FINAL FLIGHT DETAILS""
6510 PRINT:PRINT"" AIRSPEED ="";INT(IAS);""M/S"":PRINT"" DISTANCE ="";INT(SQR(PY*PY+PX*PX)):PRINT"" PITCH    = "";PT
6520 PRINT"" ROLL     ="";RL:A$=STR$(INT(TC))+"".""+MID$(STR$((TC-INT(TC))*10),2)
6525 PRINT"" RPM      ="";A$;"" X 1000""
6530 PRINT"" DRIFT    ="";INT(ABS(PX));""METRES"":PRINT"" BEARING  ="";AD;""DEGREES""
6540 PRINT:PRINT"" DO YOU WANT ANOTHER GO (Y/N)?""
6550 A$=INKEY$:IFA$<>""Y""ANDA$<>""N""THEN6550
6560 IFA$=""N""THENCLS:END
6570 RUN
7000 FORK=0TO9:LINE(X+24*SIN(K*PI/5),Y-24*COS(K*PI/5))-(X+21*SIN(K*PI/5),Y-21*COS(K*PI/5)),PSET:NEXT:RETURN
9050 DATA BR2,ND4R3D2NL3ND2BE2,ND4R3DGNL2FDNL3BU4BR2,NR3D4R3BU4BR2,ND4R2FD2GL2BE4BR,NR3D2NR2D2R3BU4BR2
9060 DATA NR3D2NR2D2BE4BR,NR3D4R3U2LBE2BR,D4BR3U2NL3U2BR2,ND4BR2,BD4REU3L2R3BR2,D2ND2NF2E2BR2
9070 DATA D4R3BU4BR2,ND4FREND4BR2,ND4F3DU4BR2,NR3D4R3U4BR2,ND4R3D2NL3BE2,NR3D4R3NHU4BR2
9080 DATA ND4R2D2L2F2BU4BR2,BD4R3U2L3U2R3BR2,RND4RBR2,D4R2U4BR2,D3FEU3BR2,D4EFU4BR2
9090 DATA DF2DBL2UE2UBR2,DFND2EUBR2,R3G3DR3BU4BR2
9100 DATA NR2D4R2U4BR2,BDEND4BR2,R2D2L2D2R2BU4BR2,NR2BD2NR2BD2R2U4BR2,D2R2D2U4BR2,NR2D2R2D2L2BE4,D4R2U2L2BE2BR2,R2ND4BR2,NR2D4R2U2NL2U2BR2,NR2D2R2D2U4BR2
"
yzJNuh3c,ZeekUze/Sanity script submission for lua application,JoshXploits,Lua,Saturday 6th of July 2024 03:30:45 PM CDT,"--Player Props
local Player = game.Players.LocalPlayer
local cam = workspace.CurrentCamera
local mouse = Player:GetMouse()

--Services
local UIS = game:GetService(""UserInputService"")
local TweenS = game:GetService(""TweenService"")

--Character stuff
local Character = Player.Character or Player.CharacterAdded:Wait()
local Root = Player.Character:WaitForChild(""HumanoidRootPart"")

--Variables
local ObjectEquipedMode = false
local ObjectCount = 0
local selectedObject = nil
local previousObject = nil
local Objects =  {} --object being carries
local tempObjects = {} -- objects that use telekinisis
local TikCd 
local IsActive = true
local c = 0
local KeyBodyParts = { --Body Parts to change SmartBone properties.
	[""Hair""] = Character.Model.Head.s4studio_mesh_3;
	[""Skirt""] = Character.Meshes.UpperTorso.skirt;
}
local Anims = { --Move Anims
	[""RightHandTelikeniesis""] = script.Anims.RightHandTelikeniesis;
	[""BothHandTelikeniesis""] = script.Anims.BothHandTelikeniesis;
	[""RightHandPush""] = script.Anims.RightHandPush;
	[""BothHandPush""] = script.Anims.BothHandPush;
}

--Settings
local settings = require(script.Settings) --Settings mainly for cooldown

function ClickCooldownSystem(Type) -- if there is no cooldown time then it will return true else if there is it will be false
	if not TikCd then TikCd = tick() return true end
	if (tick() - TikCd ) < settings[Type] then
		return false 
	else
		TikCd = tick()
		return true
	end
end
local CurrentAnim --See what anims are currently Playing

function LoadAnimation(Anim) --Loads any Anim given the Animation handle
	local Track = Character.Humanoid.Animator:LoadAnimation(Anim)
	Track:Play()
	return Track
end
function AddParticles(tp,Type) --Enables Particles depending on the parameter Type if its true or false
	if tp:FindFirstChild(""AttachmentP"") then
		if not Type then
			game.Debris:AddItem(tp.AttachmentP, 0.6)
		end
		if Type then
			for _, particles in pairs(tp.AttachmentP:GetChildren()) do
				particles.Enabled = Type
			end
		end
	else
		local Attachment = Instance.new(""Attachment"") -- attachment for the object
		Attachment.Parent = tp
		Attachment.WorldCFrame = tp.CFrame
		Attachment.Name = ""AttachmentP""
		print(""make atach"")
		for _, particles in pairs(script:GetChildren()) do
			
			if particles:IsA(""ParticleEmitter"") then
				particles:Clone().Parent = Attachment
			end
		end
	end
end
function SelectObject()-- ""selects"" the object and makes the objects networkownership to the player
	local target = mouse.Target
	local targetPart = target
	if target and targetPart then
		if target.Parent:IsA(""Model"") and not (target.Parent == workspace) then
			targetPart = target
			target = target.Parent
			print(""c"")
		end
		print(Objects)
		if target:FindFirstChild(""Tek"") and ClickCooldownSystem(""ClickCooldown"") then --Check if the object is valid to for telikeniesis and checks if cooldown has been met
			if target:FindFirstChild(""Tek""):FindFirstChild(""Locked"") then if not (target:FindFirstChild(""Tek""):FindFirstChild(""Locked"").Value == Player.Name)  then return end end --check if part is not owned to anyone
			if Objects[target.Name] then if Objects[target.Name][2] then return end end --Checks if carried object is not being carried again
			if (Character.HumanoidRootPart.Position - targetPart.Position).Magnitude <= 30 then --  30 is the range for pickup
				game.TweenService:Create(target.Highlight, TweenInfo.new(0.4), {OutlineTransparency = 0}):Play()
				game.ReplicatedStorage.ap:FireServer(target, ""Select"")
				if #Objects == 0 and not previousObject then
					print(#Objects, Objects)

					game.ReplicatedStorage.UI:FireServer(""ShiftCentre"") --ShiftLock system to centre
				end
				previousObject = target
				selectedObject = target
				game.ReplicatedStorage.UI:FireServer(""tele"") --UI change 
				print(""About to do this func:"")
				AddParticles(targetPart, true)
				if not Objects[target.Name] then
					ObjectCount += 1
				end
				
				if c <= 1 then
					CurrentAnim = LoadAnimation(Anims.RightHandTelikeniesis)
				else
					CurrentAnim:Stop()
					CurrentAnim = LoadAnimation(Anims.BothHandTelikeniesis)
				end
				tempObjects[selectedObject.Name] = {selectedObject}
				print(ObjectCount,target)
				
			end
		end
	end
end

mouse.Button1Down:Connect(function()
	SelectObject() 
end)
mouse.Button1Up:Connect(function() --Opposite of selectedObject, Deselects the object (not much needed too haha)
	if selectedObject and not ObjectEquipedMode then
		game.TweenService:Create(previousObject.Highlight, TweenInfo.new(0.4), {OutlineTransparency = 1}):Play()
		game.ReplicatedStorage.UI:FireServer(""Disable"") --Disables shiftlock
		game.ReplicatedStorage.ap:FireServer(selectedObject, ""Deselect"") --removes players network ownership of the [art]
		AddParticles(selectedObject, false)
		selectedObject = nil
		CurrentAnim:Stop()
	end
	if selectedObject and ObjectEquipedMode then -- Mkaes it possible so even though a object has been equiped to throw it can still float in the air
		game.TweenService:Create(previousObject.Highlight, TweenInfo.new(0.4), {OutlineTransparency = 1}):Play()
		selectedObject = nil
	end
	
end)

UIS.InputBegan:Connect(function(Input,gpe)
	if gpe then return end
	if Input.KeyCode == Enum.KeyCode.E then -- equip object and removes it from telekiniesis
		if selectedObject and Objects then --Normal checks if the object selected is not nil and if is in the dictionary Object
			c += 1
			Objects[selectedObject.Name] = {selectedObject,true,c}
			tempObjects[selectedObject.Name] = nil
			ObjectEquipedMode = true
			game.ReplicatedStorage.UI:FireServer(""carrying"")
			game.ReplicatedStorage.ap:FireServer(selectedObject, ""Equip"")
			game.ReplicatedStorage.UI:FireServer(""CarryItemShake"")
			coroutine.resume(coroutine.create(function() --For wind replication on the hair and skirt.
				repeat 
					local firstWindFlunc = TweenS:Create(workspace, TweenInfo.new(1), {GlobalWind = Vector3.new(math.random(1,20),math.random(5,60),math.random(1,20))})
					firstWindFlunc:Play()
					wait(0.8)
				until not ObjectEquipedMode
			end))
			if c == 1 then -- Check how much has been equipped so, in this instance only one has bee equipped.
				print(22)
				game.ReplicatedStorage.UI:FireServer(""ShiftRight"")
			elseif c == 2 then -- two has been equipped
				game.ReplicatedStorage.UI:FireServer(""ShiftCentre"") --ShiftLock System
			end
		end
		
	end
	
	if Input.KeyCode == Enum.KeyCode.G then -- Instead of throw, you could just drop the objects
		if ObjectEquipedMode then
			CurrentAnim:Stop()
			for _,obj in pairs(Objects) do
				game.ReplicatedStorage.ap:FireServer(obj[1], ""Deselect"") --removes network ownership of the player
				AddParticles(obj[1], false)
			end
			for _,obj in pairs(tempObjects) do
				game.ReplicatedStorage.ap:FireServer(obj[1], ""Deselect"") --removes network ownership of the player
				AddParticles(obj[1], false)
			end
			game.ReplicatedStorage.UI:FireServer(""CarryItemShakeDisable"") --CameraShake handler
			game.ReplicatedStorage.UI:FireServer(""Disable"") --ShiftLock Disabling
			
			--Resets all vars as there should not be no objects being carried
			ObjectCount = 0
			selectedObject = nil
			c = 0
			ObjectEquipedMode = false
			Objects = {}
		end
		
	end
	
	if Input.KeyCode == Enum.KeyCode.F then
		if ObjectEquipedMode then
			CurrentAnim:Stop()
			local animationTracks = Character.Humanoid:GetPlayingAnimationTracks()

			for _, track in pairs(animationTracks) do
				track:Stop()
			end
			if c == 1 then
				LoadAnimation(Anims.RightHandPush)
			else 
				LoadAnimation(Anims.BothHandPush)
			end
				--Reason why I swapped this around is because there are diffrent animations for each object being carried
				local TOClone = tempObjects
				local ObjsClone = Objects
				--Resets all vars as there should not be no objects being carried
				Objects = {}
				ObjectCount = 0
				selectedObject = nil
				c = 0
				ObjectEquipedMode = false
				wait(.8)
				
				for _,obj in pairs(TOClone) do --Loops through tempoary objects (objects that are floating) and removes the network ownership deselecting them and making them drop
					game.ReplicatedStorage.ap:FireServer(obj[1], ""Deselect"")
					AddParticles(obj[1], false)
				end
				for _,obj in pairs(ObjsClone) do -- Same thing as (TOClone) if I didnt mention I use AlignPosition to make the object float which is deleted when the object is ""Deselcted"".
					game.ReplicatedStorage.ap:FireServer(obj[1], ""Throw"",mouse.Hit.LookVector, mouse.hit.Position)
					game.ReplicatedStorage.ap:FireServer(obj[1], ""Deselect"")
					AddParticles(obj[1], false)
				end
				game.ReplicatedStorage.UI:FireServer(""Disable"")
				game.ReplicatedStorage.UI:FireServer(""CarryItemShakeDisable"")
				game.ReplicatedStorage.UI:FireServer(""ThrowShake"")
			
			
		end
		
	end
end)
game:GetService(""RunService"").Heartbeat:Connect(function() --countinued loop to check if there is any objects that have been selected and need to be floated and if so it updates their postion everytime the characters postion changes

	if selectedObject and not Objects[selectedObject]  then -- for telikenisis hold click
		local part = selectedObject:IsA(""Part"") or selectedObject:IsA(""MeshPart"") and selectedObject or selectedObject.PrimaryPart --Check if object is just a standalone part or also a object if so we can get its primarypart (has to be welded) and we can float it
		if part then --Checks we actually have the part
			local ap = part:FindFirstChild(""AlignPosition"")
			if ap then --Checks if AlignPosition is present
				local mouseCF = mouse.Hit
				local mousePos = mouseCF.Position --Mouses Position

				local pos = cam.CFrame.Position + (mousePos - cam.CFrame.Position).Unit * (15 + (cam.CFrame.Position - Character.HumanoidRootPart.Position).Magnitude) --Calculates the right position for the mouse including the HumanoidRootPart so there can be a max position that it can be away from the character

				ap.Position = pos --sets the AlignPosition to the pos variable
			end
		end
	end
	
	
		for _,v in pairs(Objects) do --repeats to make equuped object float
			if v[2] then
			local part = v[1]:IsA(""Part"") or v[1]:IsA(""MeshPart"")  and v[1] or v[1].PrimaryPart--Check if object is just a standalone part or also a object if so we can get its primarypart (has to be welded) and we can float it
				if part then
					local ap = part:FindFirstChild(""AlignPosition"") 
					if ap  then--Checks if AlignPosition is present
						
						--v[3] is the stored amount for the count for example the object first equpped would be 1 and so on
						--Deppending on which object came first,second or last there is an assigned position for number
						--which is presented below
						if v[3] == 1 then
						ap.Position = CFrame.new(Root.CFrame.X,0,Root.CFrame.Z) * Root.CFrame.Rotation * Vector3.new(5,2+Root.CFrame.Y,2) --Cframe times by rotation so it can stay in the same place no matter where the player is facing and also the vector3 value to place the object
						end
						if v[3] == 2 then
						ap.Position = CFrame.new(Root.CFrame.X,0,Root.CFrame.Z) * Root.CFrame.Rotation * Vector3.new(-7,2+Root.CFrame.Y,2)
						end
						if v[3] == 3 then
						ap.Position = CFrame.new(Root.CFrame.X,0,Root.CFrame.Z) * Root.CFrame.Rotation * Vector3.new(0,2+Root.CFrame.Y,-4)
						end
					end
				end
			end
	end
end)

--The end, rushed the script a bit but 99% it works now."
K4T7hW7Y,smartHopper.lua,nauseant,Lua,Saturday 6th of July 2024 03:23:41 PM CDT,"function isInventoryFull()
    local inv = peripheral.wrap(""bottom"")
    local invSize = inv.size()
    local invUsed = 0
        for slot, item in pairs(inv.list()) do
            invUsed = invUsed + 1
        end
        if invUsed == invSize then
            return true
        else
            return false
        end
end

while true do
    if isInventoryFull() == false then
        turtle.suckUp()
        turtle.dropDown()
    end
    os.sleep(0.5)
end"
KVLYJhkA,BWR - Changelog 06/07/24,SSilver,Diff,Saturday 6th of July 2024 02:54:26 PM CDT,"Soda Popper
+ Reduced air jump cost to 20% Hype (was 25%)
- Removed reload speed bonus
The burst damage on the weapon was seen as potentially too strong for how spammable, so it was nerfed to increase downtime between bursts and require more care to use. Hype jumps were made cheaper to compensate for dealing less damage.

Flying Guillotine
- Increased long distance hit for minicrit to 1 second of airtime (was 0.5 second)
Minicrits appeared to occur far too soon, this change ought to make it more of a reward for longer range skill shots that enemies have more time to react to.

The Sandman
+ Mark for Death starts at 3 seconds in duration
- Increased minimum distance to mark target to 256 HU (was 200 HU)
- Mark for Death no longer increases in duration with distance
A mix of issues was that the Sandman's debuff was seen as not useful enough in distances the Scout can better capitalize on it, while being probably too punishing for longer range where it's safer to use. This change making it uniform should give scouts in mid-range more ease in making use of it's bonus while still being in more danger from their squishiness.

Thermal Thruster
- Mini-Boost's air strafe controls were reduced
A big concern of the mini-boost was how much maneuverability it provided the pyro, particularly when paired with airblast jumps. By forcing the Pyro have reduced control during it, it becomes more of a commitment to use and easier for enemies to predict the pyro's movement.

Iron Bomber
- Increased roller proximity detonation time to 0.5 second (was 0.33 second)
A mix of buff and nerf technically. The bombs are easier to trip safely for enemies aware of them, however they also become easier to jump with for the demo using it.

Shields
~ The following changes are used a base for all shields:
+ Added: Press SPECIAL ATTACK to perform a LEAP
~ Consumes 50% charge meter, requires demoman to be grounded
- Leap has reduced air strafe controls
There was a discussion over how demoknight generally has limited options mechanically making him feel too simplistic. Rather than simply waiting at the sidelines to charge, a new movement mechanic was added to provide demoman more ways to use his charge meter. This leap should allow the demoknight to reach more flank routes, as well as jump over or away from enemies to throw off their aim.

Chargin' Targe
- Removed push forced resistance
In ways, the resistance was a mix of bad to use and bad to fight. It removed some counterplay versus demoknight by making him less capable of being stopped with strategic knockback, however he similarly had less opportunity to strategically surf damage for his benefit.

Jarate
- Reduced splash radius by -25%
The effect was seen as particularly powerful despite the nerf to how often it could be used. Splash radius was nerfed to make it require more accuracy and better limit how many enemies can be affected. It might be nerfed further if it's not impactful enough.

The Vaccinator
+ Increased uber duration to 4 seconds (was 3 seconds)
- Decreased uber resistance to 40% (was 45%)
The window for the bubbles was seen as not long enough to enable the multitasking it was meant to provide. The strength was decreased in compensation to make it a little easier to fight."
6Ze8ARRH,very good attacks_mask NOPar fixed AKakBb,max2201111,Python,Saturday 6th of July 2024 02:50:55 PM CDT,"import chess
import time
from functools import lru_cache
import traceback
from typing import Iterator
from chess import Move, BB_ALL, Bitboard, scan_reversed

# Definice nov√Ωch figur
AMAZON = 7

class CustomBoard(chess.Board):
    def __init__(self, fen=None):
        self.amazons = chess.BB_EMPTY
        self.custom_bishops_white = chess.BB_EMPTY
        self.custom_bishops_black = chess.BB_EMPTY
        super().__init__(fen)
        print(""≈†achovnice inicializov√°na"")
        self.debug_amazons()
        self.debug_custom_bishops()

    def set_chess_fen(self, fen):
        super().set_chess_fen(fen)
        self.custom_bishops_white = self.bishops & self.occupied_co[chess.WHITE]
        self.custom_bishops_black = self.bishops & self.occupied_co[chess.BLACK]
        print(f""Po nastaven√≠ FEN, bitboard amazonek: {self.amazons:064b}"")
        print(f""Po nastaven√≠ FEN, bitboard b√≠l√Ωch vlastn√≠ch st≈ôelc≈Ø: {self.custom_bishops_white:064b}"")
        print(f""Po nastaven√≠ FEN, bitboard ƒçern√Ωch vlastn√≠ch st≈ôelc≈Ø: {self.custom_bishops_black:064b}"")

    def _set_piece_at(self, square, piece, promoted=False):
        super()._set_piece_at(square, piece, promoted)
        if piece is not None:
            piece_type = piece if isinstance(piece, int) else piece.piece_type
            if piece_type == chess.BISHOP:
                color = self.color_at(square)
                if color == chess.WHITE:
                    self.custom_bishops_white |= chess.BB_SQUARES[square]
                else:
                    self.custom_bishops_black |= chess.BB_SQUARES[square]
        else:
            self.custom_bishops_white &= ~chess.BB_SQUARES[square]
            self.custom_bishops_black &= ~chess.BB_SQUARES[square]

    def set_piece_at(self, square, piece, promoted=False):
        self._set_piece_at(square, piece, promoted)

    def piece_type_at(self, square):
        if self.amazons & chess.BB_SQUARES[square]:
            return AMAZON
        return super().piece_type_at(square)

    def generate_pseudo_legal_moves(self, from_mask: Bitboard = BB_ALL, to_mask: Bitboard = BB_ALL) -> Iterator[Move]:
        print(""Generov√°n√≠ pseudo-leg√°ln√≠ch tah≈Ø..."")
        
        # Generov√°n√≠ standardn√≠ch tah≈Ø
        print(""Generov√°n√≠ standardn√≠ch tah≈Ø..."")
        for move in super().generate_pseudo_legal_moves(from_mask, to_mask):
            if self.piece_type_at(move.from_square) != AMAZON:
                print(f""Standardn√≠ pseudo-leg√°ln√≠ tah: {move}"")
                yield move

        # Generov√°n√≠ tah≈Ø vlastn√≠ch st≈ôelc≈Ø
        print(""Generov√°n√≠ tah≈Ø vlastn√≠ch st≈ôelc≈Ø..."")
        our_bishops = self.custom_bishops_white if self.turn == chess.WHITE else self.custom_bishops_black
        our_bishops &= from_mask
        print(f""Na≈°i st≈ôelci: {our_bishops:064b}"")
        for from_square in chess.scan_forward(our_bishops):
            print(f""Generov√°n√≠ tah≈Ø pro st≈ôelce na {chess.SQUARE_NAMES[from_square]}"")
            attacks = self.bishop_attacks(from_square)
            print(f""√ötoky st≈ôelce: {attacks:064b}"")
            valid_moves = attacks & ~self.occupied & to_mask
            print(f""Platn√© c√≠lov√© pole: {valid_moves:064b}"")
            for to_square in chess.scan_forward(valid_moves):
                move = Move(from_square, to_square)
                print(f""Pseudo-leg√°ln√≠ tah vlastn√≠ho st≈ôelce: {move}"")
                yield move

        # Generov√°n√≠ tah≈Ø amazonek
        print(""Generov√°n√≠ tah≈Ø amazonek..."")
        our_amazons = self.amazons & self.occupied_co[self.turn] & from_mask
        print(f""Na≈°e amazonky: {our_amazons:064b}"")
        for from_square in chess.scan_forward(our_amazons):
            print(f""Generov√°n√≠ tah≈Ø pro amazonku na {chess.SQUARE_NAMES[from_square]}"")
            attacks = self.amazon_attacks(from_square)
            print(f""√ötoky amazonky: {attacks:064b}"")
            valid_moves = attacks & ~self.occupied & to_mask
            print(f""Platn√© c√≠lov√© pole: {valid_moves:064b}"")
            for to_square in chess.scan_forward(valid_moves):
                move = Move(from_square, to_square)
                print(f""Pseudo-leg√°ln√≠ tah amazonky: {move}"")
                yield move

        print(""Dokonƒçeno generov√°n√≠ pseudo-leg√°ln√≠ch tah≈Ø"")

    def amazon_attacks(self, square):
        return (self.attacks_mask(chess.QUEEN, square, self.occupied) | 
                self.attacks_mask(chess.KNIGHT, square, self.occupied))
    
    def attacks_mask(self, piece_type, square=None, occupied=None, mask=BB_ALL):
        if square is None or occupied is None:
            return 0
        
        if piece_type == chess.QUEEN:
            return (chess.BB_DIAG_ATTACKS[square][occupied & chess.BB_DIAG_MASKS[square]] |
                    chess.BB_RANK_ATTACKS[square][occupied] |
                    chess.BB_FILE_ATTACKS[square][occupied]) & mask
        elif piece_type == chess.KNIGHT:
            return chess.BB_KNIGHT_ATTACKS[square] & mask
        elif piece_type == chess.BISHOP:
            return chess.BB_DIAG_ATTACKS[square][occupied & chess.BB_DIAG_MASKS[square]] & mask
        return 0

    

    def bishop_attacks(self, square):
        attacks = self.attacks_mask(chess.BISHOP, square, self.occupied)
        print(f""Bishop attacks from {chess.SQUARE_NAMES[square]}: {attacks:064b}"")
        return attacks

    def is_pseudo_legal(self, move):
        # Kontrola, zda je tah v r√°mci ≈°achovnice
        if not (chess.A1 <= move.from_square < chess.H8 and chess.A1 <= move.to_square < chess.H8):
            return False

        # Kontrola, zda je na v√Ωchoz√≠m poli figura
        piece = self.piece_at(move.from_square)
        if not piece:
            return False

        # Kontrola, zda figura pat≈ô√≠ hr√°ƒçi na tahu
        if piece.color != self.turn:
            return False

        # Kontrola, zda c√≠lov√© pole nen√≠ obsazeno vlastn√≠ figurou
        if self.color_at(move.to_square) == self.turn:
            return False

        # Speci√°ln√≠ kontrola pro vlastn√≠ st≈ôelce
        if piece.piece_type == chess.BISHOP and (self.custom_bishops_white & chess.BB_SQUARES[move.from_square] or self.custom_bishops_black & chess.BB_SQUARES[move.from_square]):
            return bool(self.bishop_attacks(move.from_square) & chess.BB_SQUARES[move.to_square])

        # Kontrola pro ostatn√≠ figury
        return move in super().generate_pseudo_legal_moves()

    def is_legal(self, move):
        print(f""Kontrola legality tahu: {move}"")
        if not self.is_pseudo_legal(move):
            print(f""Tah {move} nen√≠ pseudo-leg√°ln√≠"")
            return False
        if self.is_into_check(move):
            print(f""Tah {move} stav√≠ vlastn√≠ho kr√°le do ≈°achu"")
            return False
        print(f""Tah {move} je leg√°ln√≠"")
        return True

    def piece_symbol(self, piece):
        if piece is None:
            return '.'
        if piece.piece_type == AMAZON:
            return 'A' if piece.color == chess.WHITE else 'a'
        return piece.symbol()

    def debug_amazons(self):
        print(f""Bitboard amazonek: {format(self.amazons, '064b')}"")
        for square in chess.SQUARES:
            if self.amazons & chess.BB_SQUARES[square]:
                print(f""Amazonka na {chess.SQUARE_NAMES[square]}"")

    def debug_custom_bishops(self):
        print(f""Bitboard b√≠l√Ωch vlastn√≠ch st≈ôelc≈Ø: {format(self.custom_bishops_white, '064b')}"")
        print(f""Bitboard ƒçern√Ωch vlastn√≠ch st≈ôelc≈Ø: {format(self.custom_bishops_black, '064b')}"")
        for square in chess.SQUARES:
            if self.custom_bishops_white & chess.BB_SQUARES[square]:
                print(f""B√≠l√Ω vlastn√≠ st≈ôelec na {chess.SQUARE_NAMES[square]}"")
            if self.custom_bishops_black & chess.BB_SQUARES[square]:
                print(f""ƒåern√Ω vlastn√≠ st≈ôelec na {chess.SQUARE_NAMES[square]}"")

    @property
    def legal_moves(self):
        legal_moves = [move for move in self.generate_pseudo_legal_moves() if self.is_legal(move)]
        for move in legal_moves:
            print(f""Leg√°ln√≠ tah: {move}"")
        return legal_moves

if __name__ == ""__main__"":
    start_fen = ""1b6/3k4/8/8/1B6/8/8/6K1 w - - 0 1""
    
    try:
        print(f""Vytv√°≈ôen√≠ ≈°achovnice s FEN: {start_fen}"")
        initial_board = CustomBoard(start_fen)
        
        print(""Ladƒõn√≠ amazonek..."")
        print(f""Bitboard amazonek: {initial_board.amazons:064b}"")
        print(f""Bitboard b√≠l√Ωch vlastn√≠ch st≈ôelc≈Ø: {initial_board.custom_bishops_white:064b}"")
        print(f""Bitboard ƒçern√Ωch vlastn√≠ch st≈ôelc≈Ø: {initial_board.custom_bishops_black:064b}"")
        
        initial_board.debug_amazons()
        initial_board.debug_custom_bishops()
        
        print(""Souƒçasn√° pozice:"")
        print(initial_board)
        
        print(""Generov√°n√≠ leg√°ln√≠ch tah≈Ø pro poƒç√°teƒçn√≠ pozici..."")
        legal_moves = list(initial_board.legal_moves)
        print(f""Poƒçet leg√°ln√≠ch tah≈Ø: {len(legal_moves)}"")
        
        print(""Leg√°ln√≠ tahy:"")
        for move in legal_moves:
            from_square = chess.SQUARE_NAMES[move.from_square]
            to_square = chess.SQUARE_NAMES[move.to_square]
            piece = initial_board.piece_at(move.from_square)
            print(f""{initial_board.piece_symbol(piece)}: {from_square}-{to_square}"")
        
    except Exception as e:
        print(f""Do≈°lo k chybƒõ: {str(e)}"")
        traceback.print_exc()"
94byB9c6,ATMOre,Dex52,Lua,Saturday 6th of July 2024 02:30:32 PM CDT,"scanner = peripheral.wrap(""back"")

while true do
term.clear()
term.setCursorPos(1, 1)
blocks, err = scanner.scan(16)
found = false

for id, block in pairs(blocks) do
	if block[""name""] == ""allthemodium:allthemodium_ore"" or block[""name""] == ""allthemodium:allthemodium_slate_ore"" then
	found = true
	term.write(block[""name""])
	term.write("" at "")
	print(string.format(""x:%d z:%d y:%d"", block[""x""], block[""z""], block[""y""]))
end
end
if not found then
print(""Nothing found"")
end
sleep(5)
end"
YcmyXfN1,Zoo,AlexKayn,C#,Saturday 6th of July 2024 02:16:44 PM CDT,"using System.Diagnostics;
using System.Runtime.InteropServices;

namespace Zoo
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Zoo zoo = new Zoo();
            
            zoo.Work();
        }
    }

    class Zoo
    {
        private readonly List<Aviary> _aviaries = new List<Aviary>();

        public Zoo()
        {
            Full();
        }
 
        public void Work()
        {
            bool isWork = true;
            const string Exit = ""exit"";

            while (isWork)
            {
                Console.WriteLine(""-----------–ó–û–û–û–ü–ê–†–ö!!!!!!!!!!!!!--------------"");
                Console.WriteLine(""–ö –∫–∞–∫–æ–º—É –≤–æ–ª—å–µ—Ä—É –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ–¥–æ–π—Ç–∏"");
                Console.WriteLine(""–í–≤–µ–¥–∏—Ç–µ exit –¥–ª—è –≤—ã—Ö–æ–¥–∞"");
            
                ShowNumber();
            
                Console.Write(""> "");
                string userInput = Console.ReadLine();

                if (userInput == Exit)
                {
                    isWork = false;
                }

                foreach (Aviary aviary in _aviaries)
                {
                    if (aviary.Number == userInput)
                    {
                        aviary.ShowInfo();
                    }
                }
            }
        }

        private void ShowNumber()
        {
            foreach (Aviary aviary in _aviaries)
            {
                Console.WriteLine(aviary.Number + "".–í–æ–ª—å–µ—Ä"");
            }
        }

        private void Full()
        {
            List<Aviary> aviaries = new List<Aviary>()
            {
                new Aviary(""1"", ""–¢–∏–≥—Ä""),
                new Aviary(""2"", ""–õ–µ–≤""),
                new Aviary(""3"", ""–ü–∏–Ω–≥–≤–∏–Ω""),
                new Aviary(""4"", ""–õ–∏–º—É—Ä"")
            };

            for (int i = 0; i < aviaries.Count; i++)
            {
                _aviaries.Add(aviaries[i]);
                _aviaries[i].Create();
            }
        }
    }

    class Aviary
    {
        private readonly List<Animal> _animals = new List<Animal>();
        
        public Aviary(string number, string nameAnimal)
        {
            Number = number;
            NameAnimal = nameAnimal;
        }

        public string Number { get; private set; }
        public string NameAnimal { get; private set; }

        public void ShowInfo()
        {
            Console.WriteLine($""–í–æ–ª—å–µ—Ä {Number}"");
            Console.WriteLine($""–ñ–∏–≤–æ—Ç–Ω—ã—Ö –∑–¥–µ—Å—å {_animals.Count}"");

            for (int i = 0; i < _animals.Count; i++)
            {
                _animals[i].ShowStats();
            }
        }

        public void Create()
        {
            Random random = new Random();
            
            List<Animal> animals = new List<Animal>()
            {
                new Animal(""–¢–∏–≥—Ä"", ""–º—É–∂—Å–∫–æ–π"", ""—Ä-—Ä-—Ä""),
                new Animal(""–¢–∏–≥—Ä"", ""–∂–µ–Ω—Å–∫–∏–π"", ""—Ä-—Ä-—Ä""),
                new Animal(""–õ–µ–≤"", ""–º—É–∂—Å–∫–æ–π"", ""–º—Ä-–º—Ä-–º—Ä""),
                new Animal(""–õ–µ–≤"", ""–∂–µ–Ω—Å–∫–∏–π"", ""–º—Ä-–º—Ä-–º—Ä""),
                new Animal(""–õ–∏–º—É—Ä"", ""–º—É–∂—Å–∫–æ–π"", ""–ø–∏—É-–ø–∏—É-–ø–∏—É""),
                new Animal(""–õ–∏–º—É—Ä"", ""–∂–µ–Ω—Å–∫–∏–π"", ""–ø–∏—É-–ø–∏—É-–ø–∏—É""),
                new Animal(""–ü–∏–Ω–≥–≤–∏–Ω"", ""–º—É–∂—Å–∫–æ–π"", ""–∏—É-–∏—É-–∏—É""),
                new Animal(""–ü–∏–Ω–≥–≤–∏–Ω"", ""–∂–µ–Ω—Å–∫–∏–π"", ""–∏—É-–∏—É-–∏—É""),
            };

            for (int i = 0; i < animals.Count; i++)
            {
                if (animals[i].Name == NameAnimal)
                {
                    _animals.Add(animals[i]);
                }
            }
        }
    }

    class Animal
    {
        public Animal(string name, string male, string sound)
        {
            Name = name;
            Sound = sound;
            Male = male;
        }

        public string Name { get; private set; }
        public string Sound { get; private set; }
        public string Male { get; private set; }

        public void ShowStats()
        {
            Console.WriteLine($""–ñ–∏–≤–æ—Ç–Ω–æ–µ {Name}, –ø–æ–ª {Male}, {Sound}"");
        }
    }
}
"
4qwTU053,This account has been discontinued,WaiLightning,Bash,Saturday 6th of July 2024 02:07:51 PM CDT,This account has been discontinued
YLgPQWTC,Untitled,DS_Raja,C++,Saturday 6th of July 2024 01:24:56 PM CDT,"#include <bits/stdc++.h>
using namespace std;
#define ll long long
const int N = 1e5 + 5;
ll a[N];
ll t[4 * N], lazy[4 * N],q[N], d[N];
int l[N], r[N];

void push(int n, int b, int e) {
  if (lazy[n] == -1) return;
  t[n] = t[n] + lazy[n];
  if (b != e) {
    int l = 2 * n;
    int r = (2 * n) + 1;
    if (lazy[l] == -1) lazy[l] = lazy[n];
    else lazy[l] += lazy[n];
    if (lazy[r] == -1) lazy[r] = lazy[n];
    else lazy[r] += lazy[n];
  }
  lazy[n] = -1;
}

ll merge(ll l, ll r) {
  return l + r;
}

void build(int n, int b, int e) {
  lazy[n] = -1;
  if (b == e) {
    t[n] = a[b]; 
    return;
  }
  int l = 2 * n;
  int r = (2 * n) + 1;
  int mid = (b + e) / 2;
  build(l, b, mid);
  build(r, mid + 1, e);
  t[n] = merge(t[l], t[r]);
}

ll query(int n, int b, int e, int i) {
  push(n, b, e);
  if (b > i or e < i) return 0;
  if (b == e) return t[n];
  int l = 2 * n;
  int r = (2 * n) + 1;
  int mid = (b + e) / 2;
  if (i <= mid) return query(l, b, mid, i);
  else return query(r, mid + 1, e, i);
}

void upd(int n, int b, int e, int i, int j, int v) {
  push(n, b, e);
  if (b > j or e < i) return;
  if (b >= i and e <= j) {
    lazy[n] = v;
    push(n, b, e);
    return;
  }
  int l = 2 * n;
  int r = (2 * n) + 1;
  int mid = (b + e) / 2;
  upd(l, b, mid, i, j, v);
  upd(r, mid + 1, e, i, j, v);
  t[n] = merge(t[l], t[r]);
}

int32_t main() {
  ios_base::sync_with_stdio(0); cin.tie(0);

  int n, m, k; cin >> n >> m >> k;
  for (int i = 1; i <= n; i++) {
    cin >> a[i];
  }
  build(1, 1, n);
  for (int i = 1; i <= m; i++) {
   cin >> l[i] >> r[i] >> d[i];
  }
  for (int i = 1; i <= k; i++) {
    int x, y; cin >> x >> y;
    q[x]++;
    q[y + 1]--;
  }
  for (int i = 1; i <= m; i++) {
    q[i] += q[i - 1];
  }
  for (int i = 1; i <= m; i++) {
    d[i] = q[i] * d[i];
    upd(1, 1, n, l[i], r[i], d[i]);
  }
  for (int i = 1; i <= n; i++) {
    cout << query(1, 1, n, i) << ' ';
  }
  cout << '\n';
}
"
9TY6dTJi,Control Shell Script Menu with Game Controller Joystick,metalx1000,Bash,Saturday 6th of July 2024 01:07:49 PM CDT,"#!/bin/bash
######################################################################
#Copyright (C) 2024  Kris Occhipinti
#https://filmsbykris.com

#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation version 3 of the License.

#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with this program.  If not, see <http://www.gnu.org/licenses/>.
######################################################################

#uses the first game controller to select items from menu

let i=""0""
list=(""continue"" ""reboot"" ""poweroff"" ""thunar"")

function next() {
	[[ $1 ]] && let i+=1 || let i-=1
	[[ $i == ${#list[@]} ]] && let i=0
	[[ $i -lt 0 ]] && let i=${#list[@]}-1
	selected
}

function selected() {
	clear
	echo ""What would you like to do?""
	echo ${list[$i]}
}

function select_item() {
	[[ ${list[$i]} == ""continue"" ]] && exit
	eval ${list[$i]}
	exit
}

selected

jstest --event /dev/input/js0 | while read l; do
	[[ ""$l"" == *""number 1, value 1""* ]] && select_item
	[[ ""$l"" == *""number 2, value 1""* ]] && select_item
	[[ ""$l"" == *""number 5, value -32767""* ]] && next
	[[ ""$l"" == *""number 5, value 32767""* ]] && next 1
done
"
yWNdQj8g,–ü–∞—Ä—Å–∏–Ω–≥ –¥–æ–º–æ–≤,Dinarchak,Python,Saturday 6th of July 2024 11:29:14 AM CDT,"import aiohttp
import asyncio
from bs4 import BeautifulSoup
import lxml

main_page_url = 'https://z500proekty.ru/doma/poisk/domy.html'
domen = 'https://z500proekty.ru'


async def parse_house(session, url):
    async with session.get(url) as resp:
        soup = BeautifulSoup(await resp.text(), 'lxml')
        print(soup.find('div', class_='title').get_text())


async def parse_page(num: int=1) -> None:
    async with aiohttp.ClientSession() as session:
        async with session.get(main_page_url + f'?view=small&page={num}') as resp:
            soup = BeautifulSoup(await resp.text(), 'lxml')

            cards = soup.find('div', class_='project-listing').find_all('div', class_='project')
            links = [domen + card.find('a')['href'] for card in cards]

        for link in links:
            await parse_house(session, link)

    
if __name__ == '__main__':
    asyncio.run(parse_page())"
pN4hJ5VP,Plot Resets Monitor,MagmaLP,Lua,Saturday 6th of July 2024 11:16:38 AM CDT,"os.loadAPI(""json"")
mon = peripheral.wrap(""top"")
mon.clear()

w, h = mon.getSize()

-- Lade JSON Daten von der URL
a = http.get(""http://lyco-web.justin-wittwer.de/old_players"")
rawJson = a.readAll()
parsedJson = json.json_decode(rawJson)

-- Finde die maximale L√§nge des Namens f√ºr Formatierung
maxLen = -1
for k, v in pairs(parsedJson) do
    len = string.len(k)
    if len > maxLen then
        maxLen = len
    end
end

-- Setze den Header Text
mon.setCursorPos(1, 1)
mon.setTextColor(colors.orange)
mon.write(""Player plot resets in 60 days"")

-- Starte die Liste bei Zeile 3
i = 3
for k, v in pairs(parsedJson) do
    -- √úberpr√ºfe, ob die Zahl gr√∂√üer als 365 ist
    if tonumber(v) <= 365 then
        -- Abwechselnde Farben f√ºr die Zeilen
        if i % 2 == 0 then
            mon.setTextColor(colors.gray)
        else
            mon.setTextColor(colors.lightGray)
        end

        -- Schreibe den Namen und die Zahl in die Liste
        mon.setCursorPos(1, i)
        mon.write(k)
        mon.setCursorPos(w - 2, i)
        mon.write(v)
        i = i + 1
    end
end
"
av8imDgy,Algoverse_adesh_37,kucheasysa,Python,Saturday 6th of July 2024 10:43:18 AM CDT,"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def detectCycle(self, root: Optional[ListNode]) -> Optional[ListNode]:
        n=1000000
        while( root!=None and root.val!=1000000):
            root.val=1000000
            root=root.next
        return root"
FqCMCzd8,Untitled,hmbashar,CSS,Saturday 6th of July 2024 10:08:48 AM CDT,".ekit-wid-con .elementskit-image-accordion-wraper .elementskit-single-image-accordion .elementskit-accordion-title-wraper {
  top: 50px;
  opacity: 1;
  visibility: visible;
}
.bashar-elements-kits-btn-icon{
	display:inline-flex;
	gap:5px;
}
.bashar-elements-kits-btn-icon svg, .bashar-elements-kits-btn-icon i {
	width:18px;
	height:18px;
	font-size:18px;
}
#bashar-elementskit-accordion-title.elementskit-accordion-title.bashar-elementskit-accordion-title {
	font-size:18px;
	font-weight:400;
	font-style:italic;
	color: #FFA43A;
	margin-top:5px;
}
.ekit-wid-con .elementskit-image-accordion-wraper .elementskit-single-image-accordion::before {
	opacity:1;
	top:0;
}"
yjiEDhSD,Add fields for Image Accoridant on ElementsKit,hmbashar,PHP,Saturday 6th of July 2024 10:07:31 AM CDT,"<?php
namespace Elementor;

use \Elementor\ElementsKit_Widget_Image_Accordion_Handler as Handler;
use \ElementsKit_Lite\Modules\Controls\Controls_Manager as ElementsKit_Controls_Manager;

if ( ! defined( 'ABSPATH' ) ) exit;


class ElementsKit_Widget_Image_Accordion extends Widget_Base {
    use \ElementsKit_Lite\Widgets\Widget_Notice;

	public $base;

    public function get_name() {
        return Handler::get_name();
    }

    public function get_title() {
        return Handler::get_title();
    }

    public function get_icon() {
        return Handler::get_icon();
    }

    public function get_categories() {
        return Handler::get_categories();
    }

    public function get_keywords() {
        return Handler::get_keywords();
    }

    public function get_help_url() {
        return 'https://wpmet.com/doc/image-accordion/';
    }

    protected function register_controls() {

        $this->start_controls_section(
            'ekit_img_accordion_content_tab',
            [
                'label' => esc_html__('Content', 'elementskit-lite'),
                'tab' => Controls_Manager::TAB_CONTENT,
            ]
        );
            $repeater = new \Elementor\Repeater();

            $repeater->add_control(
                'ekit_img_accordion_active',
                [
                    'label'     => esc_html__('Active ? ', 'elementskit-lite'),
                    'type'      => Controls_Manager::SWITCHER,
                    'default'   => 'no',
                    'label_on'  => esc_html__( 'Yes', 'elementskit-lite' ),
                    'label_off' => esc_html__( 'No', 'elementskit-lite' ),
                ]
            );

            $repeater->add_control(
                'ekit_img_accordion_bg',
                [
                    'label'     => esc_html__( 'Background Image', 'elementskit-lite' ),
                    'type'      => Controls_Manager::MEDIA,
					'dynamic'	=> [
						'active' => true,
					],
                    'default'   => [
                        'url' => Utils::get_placeholder_image_src(),
                        'id'    => -1
                    ],
                ]
            );

            $repeater->add_control(
                'ekit_img_accordion_title',
                [
                    'label'         => esc_html__('Title', 'elementskit-lite'),
                    'type'          => Controls_Manager::TEXT,
					'dynamic'		=> [
						'active' => true,
					],
                    'label_block'   => true,
                    'default'       => esc_html__('Image accordion Title', 'elementskit-lite'),
                ]
            );

            $repeater->add_control(
                'ekit_img_accordion_subtitle',
                [
                    'label'         => esc_html__('Subtitle', 'elementskit-lite'),
                    'type'          => Controls_Manager::TEXT,
					'dynamic'		=> [
						'active' => true,
					],
                    'label_block'   => true,
                    'default'       => esc_html__('Image accordion Subtitle', 'elementskit-lite'),
                ]
            );

            $repeater->add_control(
                'ekit_img_accordion_enable_icon',
                [
                    'label'         => esc_html__( 'Enable Icon', 'elementskit-lite' ),
                    'type'          => Controls_Manager::SWITCHER,
                    'label_on'      => esc_html__( 'Yes', 'elementskit-lite' ),
                    'label_off'     => esc_html__( 'No', 'elementskit-lite' ),
                    'return_value'  => 'yes',
                    'default'       => '',
                ]
            );

            $repeater->add_control(
                'ekit_img_accordion_title_icons',
                [
                    'label'             => esc_html__('Icon for title', 'elementskit-lite'),
                    'type'              => Controls_Manager::ICONS,
                    'fa4compatibility'  => 'ekit_img_accordion_title_icon',
                    'default'           => [
                        'value' => '',
                    ],
                    'condition'         => [
                        'ekit_img_accordion_enable_icon' => 'yes',
                    ]
                ]
            );

            $repeater->add_control(
                'ekit_img_accordion_title_icon_position',
                [
                    'label'     => esc_html__( 'Icon Position', 'elementskit-lite' ),
                    'type'      => Controls_Manager::SELECT,
                    'default'   => 'left',
                    'options'   => [
                        'left'      => esc_html__( 'Before', 'elementskit-lite' ),
                        'right'     => esc_html__( 'After', 'elementskit-lite' ),
                    ],
                    'condition' => [
                        'ekit_img_accordion_title_icons!' => '',
                        'ekit_img_accordion_enable_icon' => 'yes',
                    ],
                ]
            );

            $repeater->add_control(
                'ekit_img_accordion_enable_wrap_link',
                [
                    'label'         => esc_html__( 'Enable Wrap Link', 'elementskit-lite' ),
                    'type'          => Controls_Manager::SWITCHER,
                    'label_on'      => esc_html__( 'Yes', 'elementskit-lite' ),
                    'label_off'     => esc_html__( 'No', 'elementskit-lite' ),
                    'return_value'  => 'yes',
                    'default'       => 'no',
                    'separator'     => 'before',
                ]
            );

            $repeater->add_control(
                'ekit_img_accordion_wrap_link_url',
                [
                    'label'     => esc_html__('Wrap URL', 'elementskit-lite'),
                    'type'      => Controls_Manager::URL,
					'dynamic'	=> [
						'active' => true,
					],
                    'condition' => [
                        'ekit_img_accordion_enable_wrap_link' => 'yes',
                    ],
                ]
            );

            $repeater->add_control(
                'ekit_img_accordion_enable_button',
                [
                    'label'         => esc_html__( 'Enable Button', 'elementskit-lite' ),
                    'type'          => Controls_Manager::SWITCHER,
                    'label_on'      => esc_html__( 'Yes', 'elementskit-lite' ),
                    'label_off'     => esc_html__( 'No', 'elementskit-lite' ),
                    'return_value'  => 'yes',
                    'default'       => 'yes',
                    'separator'     => 'before',
                ]
            );
            $repeater->add_control(
                'ekit_img_accordion_button_icon',
                [
                    'label' => esc_html__( 'Button Icon', 'elementskit-lit' ),
                    'type' => \Elementor\Controls_Manager::ICONS,
                    'condition'     => [
                        'ekit_img_accordion_enable_button' => 'yes',
                    ],
                ]
            );

            $repeater->add_control(
                'ekit_img_accordion_button_label',
                [
                    'label'         => esc_html__('Button Label', 'elementskit-lite'),
                    'type'          => Controls_Manager::TEXT,
					'dynamic'		=> [
						'active' => true,
					],
                    'label_block'   => true,
                    'default'       => esc_html__('Read More','elementskit-lite'),
                    'condition'     => [
                        'ekit_img_accordion_enable_button' => 'yes',
                    ],
                ]
            );

            $repeater->add_control(
                'ekit_img_accordion_button_url',
                [
                    'label'     => esc_html__('Button URL', 'elementskit-lite'),
                    'type'      => Controls_Manager::URL,
					'dynamic'	=> [
						'active' => true,
					],
                    'condition' => [
                        'ekit_img_accordion_enable_button' => 'yes',
                    ],
                ]
            );

            $repeater->add_control(
                'ekit_img_accordion_enable_pupup',
                [
                    'label'         => esc_html__( 'Enable Popup', 'elementskit-lite' ),
                    'type'          => Controls_Manager::SWITCHER,
                    'label_on'      => esc_html__( 'Yes', 'elementskit-lite' ),
                    'label_off'     => esc_html__( 'No', 'elementskit-lite' ),
                    'return_value'  => 'yes',
                    'default'       => '',
                    'separator'     => 'before',
                ]
            );

            $repeater->add_control(
                'ekit_img_accordion_pup_up_icons',
                [
                    'label'             => esc_html__('Pupup Icon', 'elementskit-lite'),
                    'type'              => Controls_Manager::ICONS,
                    'fa4compatibility'  => 'ekit_img_accordion_pup_up_icon',
                    'default'           => [
                        'value'     => 'icon icon-plus',
                        'library'   => 'ekiticons'
                    ],
                    'label_block'       => true,
                    'condition'         => [
                        'ekit_img_accordion_enable_pupup' => 'yes'
                    ]
                ]
            );

            $repeater->add_control(
                'ekit_img_accordion_enable_project_link',
                [
                    'label'         => esc_html__( 'Enable Project Link', 'elementskit-lite' ),
                    'type'          => Controls_Manager::SWITCHER,
                    'label_on'      => esc_html__( 'Yes', 'elementskit-lite' ),
                    'label_off'     => esc_html__( 'No', 'elementskit-lite' ),
                    'return_value'  => 'yes',
                    'separator'     => 'before',
                ]
            );

            $repeater->add_control(
                'ekit_img_accordion_project_link',
                [
                    'label'         => esc_html__( 'Project Link', 'elementskit-lite' ),
                    'type'          => Controls_Manager::URL,
					'dynamic'		=> [
						'active' => true,
					],
                    'placeholder'   => esc_html__( 'https://wpmet.com', 'elementskit-lite' ),
                    'condition'     => [
                        'ekit_img_accordion_enable_project_link' => 'yes'
                    ],
                ]
            );

            $repeater->add_control(
                'ekit_img_accordion_project_link_icons',
                [
                    'label'             => esc_html__('Project Link Icon', 'elementskit-lite'),
                    'type'              => Controls_Manager::ICONS,
                    'fa4compatibility'  => 'ekit_img_accordion_project_link_icon',
                    'default'           => [
                        'value' => 'icon icon icon-link',
                        'library'   => 'ekiticons'
                    ],
                    'label_block'       => true,
                    'condition'         => [
                        'ekit_img_accordion_enable_project_link' => 'yes'
                    ],
                ]
            );

            $this->add_control(
                'ekit_img_accordion_items',
                [
                    'label' => esc_html__('Accordion Items', 'elementskit-lite'),
                    'type' => Controls_Manager::REPEATER,
                    'default' => [
                        [ 'ekit_img_accordion_title' => esc_html__('This is title','elementskit-lite') ],
                        [ 'ekit_img_accordion_icon' => esc_attr('icon icon-minus') ],
                        [ 'ekit_img_accordion_link' => esc_url('#') ],
                        [ 'ekit_img_accordion_button_label' => esc_html__('Read More','elementskit-lite') ],
                    ],
                    'fields' => $repeater->get_controls(),
                    'title_field' => '{{ ekit_img_accordion_title }}',
                ]
            );

            $this->add_responsive_control(
                'items_style',
                [
                    'label'         => esc_html__('Style', 'elementskit-lite'),
                    'type'          => Controls_Manager::SELECT,
                    'options'       => [
                        ''              => esc_html__('Default', 'elementskit-lite'),
                        'horizontal'    => esc_html__('Horizontal', 'elementskit-lite'),
                        'vertical'      => esc_html__('Vertical', 'elementskit-lite'),
                    ],
                    'default'       => 'horizontal',
                    'prefix_class'  => 'ekit-image-accordion%s-',
                ]
            );

            $this->add_control(
                'active_behavior',
                [
                    'label'         => esc_html__('Active Behaivor', 'elementskit-lite'),
                    'type'          => Controls_Manager::SELECT,
                    'options'       => [
                        'click' => esc_html__('Click', 'elementskit-lite'),
                        'hover' => esc_html__('Hover', 'elementskit-lite'),
                    ],
                    'default'       => 'click',
                    'prefix_class'  => 'ekit-image-accordion-',
                ]
            );
        $this->end_controls_section();

        /** Tab Style (Image accordion General Style) */
      $this->start_controls_section(
        'ekit_img_accordion_general_settings',
        [
          'label' => esc_html__( 'General', 'elementskit-lite' ),
          'tab' => Controls_Manager::TAB_STYLE
        ]
      );

      $this->add_responsive_control(
        'ekit_img_accordion_min_height',
        [
            'label' => esc_html__( 'Min Height', 'elementskit-lite' ),
            'type' => Controls_Manager::SLIDER,
            'size_units' => [ 'px' ],

            'range' => [
                'px' => [
                    'min' => 0,
                    'max' => 1000,
                ],
            ],
            'default' => [
                'unit' => 'px',
                'size' => 460,
            ],
            'selectors' => [
                '{{WRAPPER}} .elementskit-single-image-accordion' => 'min-height: {{SIZE}}{{UNIT}};',
                '{{WRAPPER}} .elementskit-image-accordion-wraper' => 'height: {{SIZE}}{{UNIT}};',
            ],
        ]
    );


      $this->add_responsive_control(
        'ekit_img_accordion_gutter',
        [
          'label' => esc_html__( 'Gutter', 'elementskit-lite' ),
          'type' => Controls_Manager::SLIDER,
          'range' => [
            'px' => [
                'min' => 0,
                'max' => 100,
            ],
          ],
          'selectors' => [
              '{{WRAPPER}} .elementskit-image-accordion-wraper .elementskit-single-image-accordion' => 'margin-left: {{SIZE}}{{UNIT}}; margin-right: {{SIZE}}{{UNIT}};',
              '{{WRAPPER}} .elementskit-image-accordion-wraper' => 'margin-left: -{{SIZE}}{{UNIT}}; margin-right: -{{SIZE}}{{UNIT}};',
          ],
        ]
      );
      
	   $this->add_control(
        'ekit_img_accordion_active_background_text',
        [
          'label' => esc_html__( 'Active Item Background', 'elementskit-lite' ),
          'type' => Controls_Manager::HEADING,
          'separator' => 'before'
        ]
      );

      $this->add_group_control(
        Group_Control_Background::get_type(),
            array(
                'name'     => 'ekit_img_accordion_bg_active_color',
                'selector' => '{{WRAPPER}} .elementskit-single-image-accordion:before',
			)
        );
      $this->add_responsive_control(
        'ekit_img_accordion_container_padding',
        [
          'label' => esc_html__( 'Padding', 'elementskit-lite' ),
          'type' => Controls_Manager::DIMENSIONS,
          'size_units' => [ 'px', 'em', '%' ],
		  'separator' => 'before',
          'selectors' => [
              '{{WRAPPER}} .elementskit-image-accordion-wraper' => 'padding: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};',
          ],
        ]
      );

      $this->add_responsive_control(
        'ekit_img_accordion_container_margin',
        [
          'label' => esc_html__( 'Margin', 'elementskit-lite' ),
          'type' => Controls_Manager::DIMENSIONS,
          'size_units' => [ 'px', 'em', '%' ],
          'selectors' => [
              '{{WRAPPER}} .elementskit-image-accordion-wraper' => 'margin: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};',
          ],
        ]
      );
      $this->add_group_control(
        Group_Control_Border::get_type(),
        [
          'name' => 'ekit_img_accordion_border_group',
          'label' => esc_html__( 'Border', 'elementskit-lite' ),
          'selector' => '{{WRAPPER}} .elementskit-image-accordion-wraper',
        ]
      );

      $this->add_control(
        'ekit_img_accordion_border_radius',
        [
          'label' => esc_html__( 'Border Radius', 'elementskit-lite' ),
          'type' => Controls_Manager::SLIDER,
          'range' => [
            'px' => [
              'max' => 500,
            ],
          ],
          'selectors' => [
            '{{WRAPPER}} .elementskit-image-accordion-wraper' => 'border-radius: {{SIZE}}px;',
          ],
        ]
      );
      $this->add_group_control(
        Group_Control_Box_Shadow::get_type(),
        [
          'name' => 'ekit_img_accordion_shadow',
          'selector' => '{{WRAPPER}} .elementskit-image-accordion-wraper',
        ]
      );

      $this->end_controls_section();


        /** Tab Style (Image accordion Content Style) */
        $this->start_controls_section(
            'ekit_img_accordion_section_img_accordion_title_settings',
            [
            'label' => esc_html__( 'Title', 'elementskit-lite' ),
            'tab' => Controls_Manager::TAB_STYLE
            ]
        );

        $this->add_control(
            'ekit_img_accordion_section_img_accordion_icon_title',
            [
                'label' => esc_html_x( 'Margin', 'Border Control', 'elementskit-lite' ),
                'type' => Controls_Manager::DIMENSIONS,
				'default' => [
					'top' => '0',
					'bottom' => '20',
					'left' => '0',
					'right' => '0',
					'unit' => 'px',
				],
                'selectors' => [
                    '{{WRAPPER}} .elementskit-single-image-accordion .elementskit-accordion-title-wraper' => 'margin: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};',
                ],
            ]
        );
        $this->add_control(
            'ekit_img_accordion_section_img_accordion_title_icon_spacing',
            [
                'label' => esc_html_x( 'Title Icon Spacing', 'Border Control', 'elementskit-lite' ),
                'type' => Controls_Manager::DIMENSIONS,
                'selectors' => [
                    '{{WRAPPER}} .elementskit-single-image-accordion .elementskit-accordion-title-wraper .icon-title > i, {{WRAPPER}} .elementskit-single-image-accordion .elementskit-accordion-title-wraper .icon-title > svg' => 'margin: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};',
                ],
            ]
        );
		$this->add_control(
			'ekit_img_accordion_title_color',
			[
			  'label' => esc_html__( 'Color', 'elementskit-lite' ),
			  'type' => Controls_Manager::COLOR,
			  'default' => '#fff',
			  'selectors' => [
                '{{WRAPPER}} .elementskit-image-accordion-wraper .elementskit-accordion-title-wraper .elementskit-accordion-title ' => 'color: {{VALUE}};',
                '{{WRAPPER}} .elementskit-image-accordion-wraper .elementskit-accordion-title-wraper .elementskit-accordion-title svg path' => 'stroke: {{VALUE}}; fill: {{VALUE}};',
			  ],
			]
          );
          
          $this->add_responsive_control(
            'ekit_img_accordion_title_icon_size',
            [
                'label' => esc_html__( 'Icon Size', 'elementskit-lite' ),
                'type' => Controls_Manager::SLIDER,
                'size_units' => [ 'px', '%' ],
                'range' => [
                    'px' => [
                        'min' => 1,
                        'max' => 100,
                        'step' => 5,
                    ],
                    '%' => [
                        'min' => 1,
                        'max' => 100,
                    ],
                ],
                'selectors' => [
                    '{{WRAPPER}} .elementskit-image-accordion-wraper .elementskit-accordion-title-wraper .elementskit-accordion-title i' => 'font-size: {{SIZE}}{{UNIT}};',
                    '{{WRAPPER}} .elementskit-image-accordion-wraper .elementskit-accordion-title-wraper .elementskit-accordion-title svg' => 'max-width: {{SIZE}}{{UNIT}}; height: auto',
                ],
            ]
        );

		  $this->add_group_control(
			Group_Control_Typography::get_type(),
			[
			  'name' => 'ekit_img_accordion_title_typography_group',
			  'selector' => '{{WRAPPER}} .elementskit-image-accordion-wraper .elementskit-accordion-title-wraper .elementskit-accordion-title',
			]
		  );


        $this->add_control(
            'ekit_img_accordion_sub_title_color',
            [
                'label' => esc_html__( 'Subtitle Color', 'elementskit-lite' ),
                'type' => Controls_Manager::COLOR,                
                'selectors' => [
                    '{{WRAPPER}} #bashar-elementskit-accordion-title.elementskit-accordion-title.bashar-elementskit-accordion-title' => 'color: {{VALUE}};',
                ],
            ]
        );
        
        $this->add_group_control(
            Group_Control_Typography::get_type(),
            [
                'name' => 'ekit_img_accordion_sub_title_typography_group',
                'label' => esc_html__( 'Subtitle Typography', 'elementskit-lite' ),
                'selector' => '{{WRAPPER}} #bashar-elementskit-accordion-title.elementskit-accordion-title.bashar-elementskit-accordion-title',
            ]
        );

      $this->end_controls_section();

        /** Tab Style (Image accordion Content Style) */
        $this->start_controls_section(
            'ekit_img_accordion_section_img_accordion_content_settings',
            [
            'label' => esc_html__( 'Content', 'elementskit-lite' ),
            'tab' => Controls_Manager::TAB_STYLE
            ]
        );
        $this->add_responsive_control(
            'ekit_img_accordion_section_img_accordion_content_align',
            [
                'label' =>esc_html__( 'Alignment', 'elementskit-lite' ),
                'type' => Controls_Manager::CHOOSE,
                'options' => [
                    'left'    => [
                        'title' =>esc_html__( 'Left', 'elementskit-lite' ),
                        'icon' => 'eicon-text-align-left',
                    ],
                    'center' => [
                        'title' =>esc_html__( 'Center', 'elementskit-lite' ),
                        'icon' => 'eicon-text-align-center',
                    ],
                    'right' => [
                        'title' =>esc_html__( 'Right', 'elementskit-lite' ),
                        'icon' => 'eicon-text-align-right',
                    ],
                ],
                'selectors' => [
                    '{{WRAPPER}} .elementskit-single-image-accordion .elementskit-accordion-content' => 'text-align: {{VALUE}};'
                ],
                'default' => 'center',
            ]
        );
        $this->add_responsive_control(
            'ekit_img_accordion_section_img_accordion_content_padding',
            [
                'label' =>esc_html__( 'Padding', 'elementskit-lite' ),
                'type' => Controls_Manager::DIMENSIONS,
                'size_units' => [ 'px', 'em', '%' ],
                'selectors' => [
                    '{{WRAPPER}} .elementskit-single-image-accordion .elementskit-accordion-content' => 'padding: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};',
                ],
            ]
        );

        $this->add_responsive_control(
            'ekit_img_accordion_section_img_accordion_content_position',
            [
                'label' => esc_html__( 'Vertical Position', 'elementskit-lite' ),
                'type' => Controls_Manager::CHOOSE,
                'label_block' => false,
                'options' => [
                    'flex-start' => [
                        'title' => esc_html__( 'Top', 'elementskit-lite' ),
                        'icon' => 'eicon-v-align-top',
                    ],
                    'center' => [
                        'title' => esc_html__( 'Center', 'elementskit-lite' ),
                        'icon' => 'eicon-v-align-middle',
                    ],
                    'flex-end' => [
                        'title' => esc_html__( 'Bottom', 'elementskit-lite' ),
                        'icon' => 'eicon-v-align-bottom',
                    ],
                ],
                'default' => 'center',
                'selectors' => [
                    '{{WRAPPER}} .elementskit-image-accordion-wraper .elementskit-single-image-accordion' => 'align-items: {{VALUE}}',
                ],
            ]
        );


      $this->end_controls_section();

        // Button
        $this->start_controls_section(
            'ekit_img_accordion_button_style_settings',
            [
                'label' => esc_html__( 'Button', 'elementskit-lite' ),
                'tab' => Controls_Manager::TAB_STYLE,
            ]
        );


        $this->add_responsive_control(
            'ekit_img_accordion_button_icon_size',
            [
                'label' => esc_html__( 'Icon Size', 'elementskit-lite' ),
                'type' => Controls_Manager::SLIDER,
                'size_units' => ['px'],
                'selectors' => [
                    '{{WRAPPER}} .elementskit-accordion-content a.bashar-elements-kits-btn-icon svg' => 'width: {{SIZE}}{{UNIT}}; height: {{SIZE}}{{UNIT}}; max-width: {{SIZE}}{{UNIT}}; max-height: {{SIZE}}{{UNIT}};',
                    '{{WRAPPER}} .elementskit-accordion-content a.bashar-elements-kits-btn-icon i' => 'font-size: {{SIZE}}{{UNIT}}',
                ],
            ]
        );

        
       
        $this->add_responsive_control(
            'ekit_img_accordion_text_padding',
            [
                'label' =>esc_html__( 'Padding', 'elementskit-lite' ),
                'type' => Controls_Manager::DIMENSIONS,
                'size_units' => [ 'px', 'em', '%' ],
                'default' => [
                    'top' => 15,
                    'right' => 20,
                    'bottom' => 15,
                    'left' => 20,
                    'unit' => 'px',
                    'isLinked' => true,
                ],
                'selectors' => [
                    '{{WRAPPER}} .elementskit-accordion-content .elementskit-btn' => 'padding: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};',
                ],
            ]
        );

        $this->add_group_control(
            Group_Control_Typography::get_type(),
            [
                'name' => 'ekit_img_accordion_btn_typography',
                'label' =>esc_html__( 'Typography', 'elementskit-lite' ),
                'selector' => '{{WRAPPER}} .elementskit-accordion-content .elementskit-btn',
            ]
        );

        $this->start_controls_tabs( 'ekit_img_accordion_tabs_button_style' );

        $this->start_controls_tab(
            'ekit_img_accordion_tab_button_normal',
            [
                'label' =>esc_html__( 'Normal', 'elementskit-lite' ),
            ]
        );

        $this->add_control(
            'ekit_img_accordion_button_icon_color',
            [
                'label' => esc_html__( 'Icon Color', 'elementskit-lite' ),
                'type' => Controls_Manager::COLOR,
                'default' => '',
                'selectors' => [
                    '{{WRAPPER}} .elementskit-accordion-content a.bashar-elements-kits-btn-icon svg *' => 'stroke: {{VALUE}}; fill: {{VALUE}};',
                    '{{WRAPPER}} .elementskit-accordion-content a.bashar-elements-kits-btn-icon i' => 'color: {{VALUE}}',
                ],
            ]
        );


        $this->add_control(
            'ekit_img_accordion_btn_text_color',
            [
                'label' =>esc_html__( 'Text Color', 'elementskit-lite' ),
                'type' => Controls_Manager::COLOR,
                'default' => '#ffffff',
                'selectors' => [
                    '{{WRAPPER}} .elementskit-accordion-content .elementskit-btn' => 'color: {{VALUE}};',
                ],
            ]
        );
        $this->add_group_control(
            Group_Control_Background::get_type(),
            array(
                'name'     => 'ekit_img_accordion_btn_bg_color_group',
				'label' => esc_html__( 'Background', 'elementskit-lite' ),
                'selector' => '{{WRAPPER}} .elementskit-accordion-content .elementskit-btn',
				'fields_options' => [
                    'background' => [
						'color' => [
								'default' => '#fff'
							],
                    ],

				],

            )
        );

		$this->add_control(
            'ekit_img_accordion_btn_border_color',
            [
                'label' => esc_html__( 'Border', 'elementskit-lite' ),
                'type' => Controls_Manager::HEADING,
                'separator' => 'before',

            ]
        );

        $this->add_group_control(
            Group_Control_Border::get_type(),
            [
                'name' => 'ekit_img_accordion_btn_border_group',
                'label' => esc_html__( 'Border', 'elementskit-lite' ),
                'selector' => '{{WRAPPER}} .elementskit-accordion-content .elementskit-btn',
				'fields_options' => [
                    'border' => [
                        'default' => 'solid',
                    ],
                    'width' => [
                        'default' => [
                            'top' => '1',
                            'right' => '1',
                            'bottom' => '1',
                            'left' => '1',
                            'unit' => 'px'
                        ],
                    ],
                    'color' => [
                        'default' => '#ffffff',
                    ],
                ],
            ]
        );
        $this->add_control(
            'ekit_img_accordion_btn_border_radius',
            [
                'label' => esc_html__( 'Border Radius', 'elementskit-lite' ),
                'type' => Controls_Manager::DIMENSIONS,
                'size_units' => [ 'px', '%' ],
				'default' => ['top' => '5', 'bottom' => '5', 'left' => '5', 'right' => '5', 'unit' => 'px'],
                'selectors' => [
                    '{{WRAPPER}} .elementskit-accordion-content .elementskit-btn' => 'border-radius: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};',
                ],
            ]
        );

        $this->end_controls_tab();

        $this->start_controls_tab(
            'ekit_img_accordion_btn_tab_button_hover',
            [
                'label' =>esc_html__( 'Hover', 'elementskit-lite' ),
            ]
        );
        $this->add_control(
            'ekit_img_accordion_button_icon_hover_color',
            [
                'label' => esc_html__( 'Icon Color', 'elementskit-lite' ),
                'type' => Controls_Manager::COLOR,
                'default' => '',
                'selectors' => [
                    '{{WRAPPER}} .elementskit-accordion-content:hover a.bashar-elements-kits-btn-icon svg *' => 'stroke: {{VALUE}}; fill: {{VALUE}};',
                    '{{WRAPPER}} .elementskit-accordion-content:hover a.bashar-elements-kits-btn-icon i' => 'color: {{VALUE}}',
                ],
            ]
        );

        $this->add_control(
            'ekit_img_accordion_btn_hover_color',
            [
                'label' =>esc_html__( 'Text Color', 'elementskit-lite' ),
                'type' => Controls_Manager::COLOR,
                'default' => '#fff',
                'selectors' => [
                    '{{WRAPPER}} .elementskit-accordion-content .elementskit-btn:hover' => 'color: {{VALUE}};',
                ],
            ]
        );

        $this->add_group_control(
            Group_Control_Background::get_type(),
            array(
                'name'     => 'ekit_img_accordion_btn_bg_hover_color_group',
                'selector' => '{{WRAPPER}} .elementskit-accordion-content .elementskit-btn:hover',
            )
        );
        $this->add_control(
            'ekit_img_accordion_btn_border_color_hover',
            [
                'label' => esc_html__( 'Border', 'elementskit-lite' ),
                'type' => Controls_Manager::HEADING,
                'separator' => 'before',
            ]
        );

        $this->add_group_control(
            Group_Control_Border::get_type(),
            [
                'name' => 'ekit_img_accordion_btn_border_hover_group',
                'label' => esc_html__( 'Border', 'elementskit-lite' ),
                'selector' => '{{WRAPPER}} .elementskit-accordion-content .elementskit-btn:hover',
            ]
        );
        $this->add_control(
            'btn_border_radius_hover',
            [
                'label' => esc_html__( 'Border Radius', 'elementskit-lite' ),
                'type' => Controls_Manager::DIMENSIONS,
                'size_units' => [ 'px', '%' ],
                'selectors' => [
                    '{{WRAPPER}} .elementskit-accordion-content .elementskit-btn:hover' => 'border-radius: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};',
                ],
            ]
        );
        $this->end_controls_tab();
        $this->end_controls_tabs();
        $this->end_controls_section();
        // PopUp

        $this->start_controls_section(
            'ekit_img_accordion_style_section',
            [
                'label' => esc_html__( 'Action Icon', 'elementskit-lite' ),
                'tab' => Controls_Manager::TAB_STYLE,
            ]
        );

        $this->add_control(
            'actions_width',
            [
                'label'     => esc_html__( 'Width', 'elementskit-lite' ),
                'type'      => Controls_Manager::SLIDER,
                'selectors' => [
                    '{{WRAPPER}} .ekit-image-accordion-actions > a' => 'width: {{SIZE}}{{UNIT}}; height: {{SIZE}}{{UNIT}};',
                ]
            ]
        );

        $this->add_control(
            'ekit_img_accordion_section_img_accordion_icon_left_spacing',
            [
                'label' => esc_html__( 'Icon Left Spacing', 'elementskit-lite' ),
                'type' => Controls_Manager::SLIDER,
                'range' => [
                    'px' => [
                        'min' => 0,
                        'max' => 100,
                    ],
                ],
                'selectors' => [
                    '{{WRAPPER}} .elementskit-single-image-accordion .elementskit-icon-wraper > a:not(:last-child)' => 'margin-right: {{SIZE}}px',
                ],
            ]
        );

        $this->add_control(
            'ekit_img_accordion_section_img_accordion_icon_spacing',
            [
                'label' => esc_html_x( 'Icon Container Spacing', 'Border Control', 'elementskit-lite' ),
                'type' => Controls_Manager::DIMENSIONS,
                'selectors' => [
                    '{{WRAPPER}} .elementskit-single-image-accordion .elementskit-icon-wraper' => 'margin: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};',
                ],
            ]
        );

        $this->add_control(
            'actions_border_width',
            [
                'label'         => esc_html__( 'Border Width', 'elementskit-lite' ),
                'type'          => Controls_Manager::NUMBER,
                'placeholder'   => '1',
                'selectors'     => [
                    '{{WRAPPER}} .ekit-image-accordion-actions > a' => 'border-width: {{VALUE}}px;',
                ],
            ]
        );

        $this->start_controls_tabs('ekit_img_accordion_pup_up_style_tabs');

        $this->start_controls_tab(
            'ekit_img_accordion_pupup_normal_tab',
            [
                'label' => esc_html__( 'Normal', 'elementskit-lite' ),
            ]
        );
        $this->add_control(
            'ekit_img_accordion_pup_up_icon_color',
            [
                'label' => esc_html__( 'Popup Icon Color', 'elementskit-lite' ),
                'type' => Controls_Manager::COLOR,
                'selectors' => [
                    '{{WRAPPER}} .elementskit-icon-wraper a:first-child' => 'color: {{VALUE}};',
                    '{{WRAPPER}} .elementskit-icon-wraper a:first-child svg path' => 'fill: {{VALUE}};',
                ],
            ]
        );

        $this->add_control(
            'ekit_img_accordion_pup_up_project_color',
            [
                'label' => esc_html__( 'Link Icon Color', 'elementskit-lite' ),
                'type' => Controls_Manager::COLOR,
                'selectors' => [
                    '{{WRAPPER}} .elementskit-icon-wraper a:last-child' => 'color: {{VALUE}};',
                    '{{WRAPPER}} .elementskit-icon-wraper a:last-child svg path'   => 'fill: {{VALUE}};',
                ],
            ]
        );

            $this->add_control(
                'action_btn_bg',
                [
                    'label'     => esc_html__( 'Background Color', 'elementskit-lite' ),
                    'type'      => Controls_Manager::COLOR,
                    'selectors' => [
                        '{{WRAPPER}} .ekit-image-accordion-actions > a' => 'background-color: {{VALUE}}; border-color: {{VALUE}};',
                    ],
                ]
            );

        $this->end_controls_tab();

        $this->start_controls_tab(
            'ekit_img_accordion_pup_up_hover_tab',
            [
                'label' => esc_html__( 'Hover', 'elementskit-lite' ),
            ]
        );

        $this->add_control(
            'ekit_img_accordion_pup_up_icon_color_hover',
            [
                'label' => esc_html__( 'Popup Icon color', 'elementskit-lite' ),
                'type' => Controls_Manager::COLOR,
                'selectors' => [
                    '{{WRAPPER}} .elementskit-icon-wraper a:first-child:hover' => 'color: {{VALUE}}',
                    '{{WRAPPER}} .elementskit-icon-wraper a:first-child:hover svg path'   => 'fill: {{VALUE}};',
                ],
            ]
        );

        $this->add_control(
            'ekit_img_accordion_pup_up_project_color_hover',
            [
                'label' => esc_html__( 'Link Icon color', 'elementskit-lite' ),
                'type' => Controls_Manager::COLOR,
                'selectors' => [
                    '{{WRAPPER}} .elementskit-icon-wraper a:last-child:hover' => 'color: {{VALUE}};',
                    '{{WRAPPER}} .elementskit-icon-wraper a:last-child:hover svg path'   => 'fill: {{VALUE}};',
                ],
            ]
        );

            $this->add_control(
                'action_btn_bg_hover',
                [
                    'label'     => esc_html__( 'Background Color (Hover)', 'elementskit-lite' ),
                    'type'      => Controls_Manager::COLOR,
                    'selectors' => [
                        '{{WRAPPER}} .ekit-image-accordion-actions > a:hover' => 'background-color: {{VALUE}}; border-color: {{VALUE}};',
                    ],
                ]
            );

        $this->end_controls_tab();

        $this->end_controls_tabs();

      $this->end_controls_section();

      $this->insert_pro_message();
    }

    protected function render( ) {
        echo '<div class=""ekit-wid-con"" >';
            $this->render_raw();
        echo '</div>';
    }

	protected function render_raw( ) {
		$settings = $this->get_settings_for_display();
		extract($settings);
		?>
		<div class=""ekit-image-accordion elementskit-image-accordion-wraper"">
			<?php foreach ( $ekit_img_accordion_items as $key => $item ) :

				$this->add_render_attribute( 'wrap-input-' . $key,[
					'type' => 'radio',
					'name' => 'ekit_ia_' . $this->get_id(),
					'id' => 'ekit_ia_' . $this->get_id() .'_'. $key,
					'class' => 'elementskit-single-image-accordion--input',
				] );

				if($item['ekit_img_accordion_active'] == 'yes') {
					$this->add_render_attribute( 'wrap-input-' . $key, 'checked', 'checked' );
				}

				$this->add_render_attribute( 'wrap-link-' . $key, [
					'for' => 'ekit_ia_' . $this->get_id() .'_'. $key,
					'class' => 'elementskit-single-image-accordion ekit-image-accordion-item',
					'style' => 'background-image: url('.esc_url($item['ekit_img_accordion_bg']['url']).')',
				] );

				// enabling wrap link
				if(isset($item['ekit_img_accordion_enable_wrap_link']) && $item['ekit_img_accordion_enable_wrap_link'] == 'yes') {
					$wrap_link = $item['ekit_img_accordion_wrap_link_url'] ?? [];
					$wrap_link['url'] = !empty($wrap_link['url']) ? esc_url($wrap_link['url']) : '';

					$this->add_render_attribute( 'wrap-link-' . $key, 'data-link', wp_json_encode($wrap_link) );
					$this->add_render_attribute( 'wrap-link-' . $key, 'data-behavior', $active_behavior );
					$this->add_render_attribute( 'wrap-link-' . $key, 'data-active', $item['ekit_img_accordion_active'] );
				}
                ?>
                <input <?php $this->print_render_attribute_string( 'wrap-input-' . $key ); ?> hidden>
                <label <?php $this->print_render_attribute_string( 'wrap-link-' . $key ); ?>>
                   
                    <span class=""elementskit-accordion-content"">
						<?php if($item['ekit_img_accordion_enable_pupup'] == 'yes' || $item['ekit_img_accordion_enable_project_link'] == 'yes') {
							if (!empty($item['ekit_img_accordion_project_link']['url'])) {
								$this->add_link_attributes( 'projectlink', $item['ekit_img_accordion_project_link'] );
							}
							?>
							<span class=""elementskit-icon-wraper ekit-image-accordion-actions"">
							<?php if($item['ekit_img_accordion_enable_pupup'] == 'yes') { 

								$this->add_lightbox_data_attributes( 'link' . $key, 
									$item['ekit_img_accordion_bg']['id'], 
									$item['ekit_img_accordion_enable_pupup'], 
									$this->get_id() 
								);

								$this->add_render_attribute( 'link' . $key, 
									[
										'href' =>  esc_url($item['ekit_img_accordion_bg']['url']),
										'aria-label' => ""pupup-button"", 
										'class' => ""icon-outline circle"",
									]
								);
								?>
									<a <?php $this->print_render_attribute_string( 'link' . $key ); ?>>
									<?php 
										$migrated = isset( $item['__fa4_migrated']['ekit_img_accordion_pup_up_icons'] );
										// Check if its a new widget without previously selected icon using the old Icon control
										$is_new = empty( $item['ekit_img_accordion_pup_up_icon'] );
										if ( $is_new || $migrated ) {

											// new icon
											Icons_Manager::render_icon( $item['ekit_img_accordion_pup_up_icons'], [ 'aria-hidden' => 'true'] );
										} else {
											?>
											<i class=""<?php echo esc_attr($item['ekit_img_accordion_pup_up_icon']); ?>"" aria-hidden=""true""></i>
											<?php
										}
									?>
									</a>
							<?php } ?>
							<?php if($item['ekit_img_accordion_enable_project_link'] == 'yes') {
									if ( ! empty( $item['ekit_img_accordion_project_link']['url'] ) ) {
										$this->add_link_attributes( 'button-2' . $key, $item['ekit_img_accordion_project_link'] );
										$this->add_render_attribute( 'button-2' . $key, ['role' => ""link"", 'aria-label' => ""button-link""] );
									}
								?>
									<a <?php $this->print_render_attribute_string( 'button-2' . esc_attr($key) ); ?> class=""icon-outline circle"">
									<?php
										$migrated = isset( $item['__fa4_migrated']['ekit_img_accordion_project_link_icons'] );
										// Check if its a new widget without previously selected icon using the old Icon control
										$is_new = empty( $item['ekit_img_accordion_project_link_icon'] );
										if ( $is_new || $migrated ) {

											// new icon
											Icons_Manager::render_icon( $item['ekit_img_accordion_project_link_icons'], [ 'aria-hidden' => 'true'] );
										} else {
											?>
											<i class=""<?php echo esc_attr($item['ekit_img_accordion_project_link_icon']); ?>"" aria-hidden=""true""></i>
											<?php
										}
									?>
									</a>
								<?php } ?>
							</span>
							<?php } ?>
							<span class=""elementskit-accordion-title-wraper"">
								<span class=""elementskit-accordion-title <?php echo esc_attr($item['ekit_img_accordion_title_icons'] != '') ? 'icon-title' : ''?>"">
								<?php if($item['ekit_img_accordion_enable_icon']  == 'yes'): ?>
									<?php if($item['ekit_img_accordion_title_icon_position'] == 'left'): ?>
										<!-- same-1 -->
										<?php

											$migrated = isset( $item['__fa4_migrated']['ekit_img_accordion_title_icons'] );
											// Check if its a new widget without previously selected icon using the old Icon control
											$is_new = empty( $item['ekit_img_accordion_title_icon'] );
											if ( $is_new || $migrated ) {

												// new icon
												Icons_Manager::render_icon( $item['ekit_img_accordion_title_icons'], [ 'aria-hidden' => 'true'] );
											} else {
												?>
												<i class=""<?php echo esc_attr($item['ekit_img_accordion_title_icon']); ?>"" aria-hidden=""true""></i>
												<?php
											}
										?>
									<?php endif; ?>
								<?php endif; ?>

								<?php echo esc_html($item['ekit_img_accordion_title']); ?>
                               
								<?php if($item['ekit_img_accordion_enable_icon']  == 'yes'): ?>
									<?php if($item['ekit_img_accordion_title_icon_position'] == 'right'): ?>
										<!-- same-1 -->
										<?php

											$migrated = isset( $item['__fa4_migrated']['ekit_img_accordion_title_icons'] );
											// Check if its a new widget without previously selected icon using the old Icon control
											$is_new = empty( $item['ekit_img_accordion_title_icon'] );
											if ( $is_new || $migrated ) {

												// new icon
												Icons_Manager::render_icon( $item['ekit_img_accordion_title_icons'], [ 'aria-hidden' => 'true'] );
											} else {
												?>
												<i class=""<?php echo esc_attr($item['ekit_img_accordion_title_icon']); ?>"" aria-hidden=""true""></i>
												<?php
											}
										?>
									<?php endif; ?>
								<?php endif; ?>
								</span>
                                <span class=""elementskit-accordion-title bashar-elementskit-accordion-title"" id=""bashar-elementskit-accordion-title"">
                                    <?php echo esc_html($item['ekit_img_accordion_subtitle']); ?>
                                </span>
							</span>
							<?php if($item['ekit_img_accordion_enable_button'] == 'yes') :
							if ( ! empty( $item['ekit_img_accordion_button_url']['url'] ) ) {
								$this->add_link_attributes( 'button-' . $key, $item['ekit_img_accordion_button_url'] );
							}
							?>
							<span class=""elementskit-btn-wraper"">
								<a class=""ekit-image-accordion--btn elementskit-btn whitespace--normal bashar-elements-kits-btn-icon"" <?php $this->print_render_attribute_string( 'button-' . esc_attr($key) ); ?>>
                                <?php \Elementor\Icons_Manager::render_icon( $item['ekit_img_accordion_button_icon'], [ 'aria-hidden' => 'true' ] ); ?>
									<?php echo esc_html($item['ekit_img_accordion_button_label']); ?>
								</a>
							</span>
						<?php endif; ?>
                    </span>
                </label>
            <?php endforeach; ?>
        </div>
    <?php }
}
"
epHhnsTH,Multiples,Lyuben_Andreev,Python,Saturday 6th of July 2024 09:52:44 AM CDT,"# –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞:
A = {2 * k + 1 for k in range(5)}
B = {2 * k for k in range(5)}
C = {2 * k + 1 for k in range(3, 8)}
# –°—ä–¥—ä—Ä–∂–∞–Ω–∏–µ –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞—Ç–∞:
print(""–°—ä–∑–¥–∞–¥–µ–Ω–∏ —Å–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞—Ç–∞:"")
print(f""–ê = {A}"")
print(f""B = {B}"")
print(f""C = {C}"")
# –û–±–∏–¥–∏–Ω–µ–Ω–∏–µ –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–∞–≤–∞:
print(""–û–±–∏–¥–∏–Ω–µ–Ω–∏–µ –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞—Ç–∞:"")
print(f""A | B = {A.union(B)}"")
print(f""B | A = {B.union(A)}"")
print(f""A | C = {A | C}"")
# –°–µ—á–µ–Ω–∏–µ –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞:
print(""–°–µ—á–µ–Ω–∏–µ –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞:"")
print(f""A & B ={A.intersection(B)}"")
print(f""A & C = {A & C}"")
# –†–∞–∑–ª–∏–∫–∞ –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞:
print(""–†–∞–∑–ª–∏–∫–∞ –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞: "")
print(f""A - C = {A - C}"")
print(f""C - A = {C.difference(A)}"")
# –°–∏–º–µ—Ç—Ä–∏—á–Ω–∞ —Ä–∞–∑–ª–∏–∫–∞ –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞:
print(f""A ^ C = {A ^ C}"")
print(f""C ^ A ={C.symmetric_difference(A)}"")
# –ò–∑—Ö–æ–¥–Ω–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–∞:
print(""–ò–∑—Ö–æ–¥–Ω–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–∞:"")
print(f""–ê = {A}"")
print(f""B = {B}"")
print(f""C = {C}"")
"
BQBNvz0P,esp for roblox by lamehaxx,3EloHIyChay123123,Lua,Saturday 6th of July 2024 09:28:57 AM CDT,"local custom_theme = {} --soon

local function CreateInstance(cls,props)
local inst = Instance.new(cls)
for i,v in pairs(props) do
	inst[i] = v
end
return inst
end
	
local age1 = CreateInstance('ScreenGui',{DisplayOrder=0,Enabled=true,ResetOnSpawn=true,Name='age1', Parent=game.CoreGui})
local p_visuals = CreateInstance('Frame',{Style=Enum.FrameStyle.Custom,Active=true,AnchorPoint=Vector2.new(0, 0),BackgroundColor3=Color3.new(0.121569, 0.12549, 0.172549),BackgroundTransparency=0,BorderColor3=Color3.new(1, 0, 0.498039),BorderSizePixel=2,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0, 50, 0, 60),Rotation=0,Selectable=false,Size=UDim2.new(0, 200, 0, 254),SizeConstraint=Enum.SizeConstraint.RelativeXY,Visible=true,ZIndex=1,Name = 'p_visuals',Parent = age1})
local UIListLayout = CreateInstance('UIListLayout', {Padding = UDim.new(0, 1), FillDirection = Enum.FillDirection.Vertical, HorizontalAlignment = Enum.HorizontalAlignment.Left, SortOrder = Enum.SortOrder.LayoutOrder, VerticalAlignment = Enum.VerticalAlignment.Top, Name = 'UIListLayout', Parent = p_visuals })
local title1 = CreateInstance('TextLabel',{Font=Enum.Font.GothamBlack,FontSize=Enum.FontSize.Size18,Text='Player visuals',TextColor3=Color3.new(1, 1, 1),TextScaled=false,TextSize=18,TextStrokeColor3=Color3.new(0, 0, 0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=Enum.TextXAlignment.Left,TextYAlignment=Enum.TextYAlignment.Center,Active=true,AnchorPoint=Vector2.new(0, 0),BackgroundColor3=Color3.new(1, 0, 0.498039),BackgroundTransparency=0,BorderColor3=Color3.new(1, 0, 0.498039),BorderSizePixel=0,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0, 0, 0, 0),Rotation=0,Selectable=true,Size=UDim2.new(1, 0, 0, 24),SizeConstraint=Enum.SizeConstraint.RelativeXY,Visible=true,ZIndex=1,Name='title1',Parent = p_visuals})
local b_b = CreateInstance('TextButton',{Font=Enum.Font.SourceSans,FontSize=Enum.FontSize.Size18,Text='Bounding box',TextColor3=Color3.new(1, 0, 0.498039),TextScaled=false,TextSize=16,TextStrokeColor3=Color3.new(0, 0, 0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=Enum.TextXAlignment.Left,TextYAlignment=Enum.TextYAlignment.Center,AutoButtonColor=true,Modal=false,Selected=false,Style=Enum.ButtonStyle.Custom,Active=false,AnchorPoint=Vector2.new(0, 0),BackgroundColor3=Color3.new(1, 0, 0.498039),BackgroundTransparency=1,BorderColor3=Color3.new(1, 0, 0.498039),BorderSizePixel=0,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0, 0, 0, 0),Rotation=0,Selectable=true,Size=UDim2.new(1, -2, 0, 18),SizeConstraint=Enum.SizeConstraint.RelativeXY,Visible=true,ZIndex=1,Name='b_b',Parent = p_visuals})
local v = CreateInstance('TextLabel',{Font=Enum.Font.Gotham,FontSize=Enum.FontSize.Size14,Text='ON',TextColor3=Color3.new(0, 1, 0),TextScaled=false,TextSize=14,TextStrokeColor3=Color3.new(0, 0, 0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=Enum.TextXAlignment.Right,TextYAlignment=Enum.TextYAlignment.Center,Active=false,AnchorPoint=Vector2.new(1, 0),BackgroundColor3=Color3.new(1, 1, 1),BackgroundTransparency=1,BorderColor3=Color3.new(0.105882, 0.164706, 0.207843),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(1, 0, 0, 0),Rotation=0,Selectable=false,Size=UDim2.new(0, 18, 0, 18),SizeConstraint=Enum.SizeConstraint.RelativeXY,Visible=true,ZIndex=1,Name='v',Parent = b_b})
local b_f = CreateInstance('TextButton',{Font=Enum.Font.SourceSans,FontSize=Enum.FontSize.Size18,Text='Fill alpha',TextColor3=Color3.new(1, 0, 0.498039),TextScaled=false,TextSize=16,TextStrokeColor3=Color3.new(0, 0, 0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=Enum.TextXAlignment.Left,TextYAlignment=Enum.TextYAlignment.Center,AutoButtonColor=true,Modal=false,Selected=false,Style=Enum.ButtonStyle.Custom,Active=false,AnchorPoint=Vector2.new(0, 0),BackgroundColor3=Color3.new(1, 0, 0.498039),BackgroundTransparency=1,BorderColor3=Color3.new(1, 0, 0.498039),BorderSizePixel=0,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0, 0, 0, 0),Rotation=0,Selectable=true,Size=UDim2.new(1, -2, 0, 18),SizeConstraint=Enum.SizeConstraint.RelativeXY,Visible=true,ZIndex=1,Name='b_f',Parent = p_visuals})
local v = CreateInstance('TextLabel',{Font=Enum.Font.Gotham,FontSize=Enum.FontSize.Size14,Text='ON',TextColor3=Color3.new(0, 1, 0),TextScaled=false,TextSize=14,TextStrokeColor3=Color3.new(0, 0, 0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=Enum.TextXAlignment.Right,TextYAlignment=Enum.TextYAlignment.Center,Active=false,AnchorPoint=Vector2.new(1, 0),BackgroundColor3=Color3.new(1, 1, 1),BackgroundTransparency=1,BorderColor3=Color3.new(0.105882, 0.164706, 0.207843),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(1, 0, 0, 0),Rotation=0,Selectable=false,Size=UDim2.new(0, 18, 0, 18),SizeConstraint=Enum.SizeConstraint.RelativeXY,Visible=true,ZIndex=1,Name='v',Parent = b_f})
local b_rt = CreateInstance('TextButton',{Font=Enum.Font.SourceSans,FontSize=Enum.FontSize.Size18,Text='Render team',TextColor3=Color3.new(1, 0, 0.498039),TextScaled=false,TextSize=16,TextStrokeColor3=Color3.new(0, 0, 0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=Enum.TextXAlignment.Left,TextYAlignment=Enum.TextYAlignment.Center,AutoButtonColor=true,Modal=false,Selected=false,Style=Enum.ButtonStyle.Custom,Active=false,AnchorPoint=Vector2.new(0, 0),BackgroundColor3=Color3.new(1, 0, 0.498039),BackgroundTransparency=1,BorderColor3=Color3.new(1, 0, 0.498039),BorderSizePixel=0,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0, 0, 0, 0),Rotation=0,Selectable=true,Size=UDim2.new(1, -2, 0, 18),SizeConstraint=Enum.SizeConstraint.RelativeXY,Visible=true,ZIndex=1,Name='b_rt',Parent = p_visuals})
local v = CreateInstance('TextLabel',{Font=Enum.Font.Gotham,FontSize=Enum.FontSize.Size14,Text='ON',TextColor3=Color3.new(0, 1, 0),TextScaled=false,TextSize=14,TextStrokeColor3=Color3.new(0, 0, 0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=Enum.TextXAlignment.Right,TextYAlignment=Enum.TextYAlignment.Center,Active=false,AnchorPoint=Vector2.new(1, 0),BackgroundColor3=Color3.new(1, 1, 1),BackgroundTransparency=1,BorderColor3=Color3.new(0.105882, 0.164706, 0.207843),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(1, 0, 0, 0),Rotation=0,Selectable=false,Size=UDim2.new(0, 18, 0, 18),SizeConstraint=Enum.SizeConstraint.RelativeXY,Visible=true,ZIndex=1,Name='v',Parent = b_rt})
local b_tc = CreateInstance('TextButton',{Font=Enum.Font.SourceSans,FontSize=Enum.FontSize.Size18,Text='Use TeamColor',TextColor3=Color3.new(1, 0, 0.498039),TextScaled=false,TextSize=16,TextStrokeColor3=Color3.new(0, 0, 0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=Enum.TextXAlignment.Left,TextYAlignment=Enum.TextYAlignment.Center,AutoButtonColor=true,Modal=false,Selected=false,Style=Enum.ButtonStyle.Custom,Active=false,AnchorPoint=Vector2.new(0, 0),BackgroundColor3=Color3.new(1, 0, 0.498039),BackgroundTransparency=1,BorderColor3=Color3.new(1, 0, 0.498039),BorderSizePixel=0,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0, 0, 0, 0),Rotation=0,Selectable=true,Size=UDim2.new(1, -2, 0, 18),SizeConstraint=Enum.SizeConstraint.RelativeXY,Visible=true,ZIndex=1,Name='b_tc',Parent = p_visuals})
local v = CreateInstance('TextLabel',{Font=Enum.Font.Gotham,FontSize=Enum.FontSize.Size14,Text='ON',TextColor3=Color3.new(0, 1, 0),TextScaled=false,TextSize=14,TextStrokeColor3=Color3.new(0, 0, 0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=Enum.TextXAlignment.Right,TextYAlignment=Enum.TextYAlignment.Center,Active=false,AnchorPoint=Vector2.new(1, 0),BackgroundColor3=Color3.new(1, 1, 1),BackgroundTransparency=1,BorderColor3=Color3.new(0.105882, 0.164706, 0.207843),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(1, 0, 0, 0),Rotation=0,Selectable=false,Size=UDim2.new(0, 18, 0, 18),SizeConstraint=Enum.SizeConstraint.RelativeXY,Visible=true,ZIndex=1,Name='v',Parent = b_tc})
local b_sn = CreateInstance('TextButton',{Font=Enum.Font.SourceSans,FontSize=Enum.FontSize.Size18,Text='Show name',TextColor3=Color3.new(1, 0, 0.498039),TextScaled=false,TextSize=16,TextStrokeColor3=Color3.new(0, 0, 0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=Enum.TextXAlignment.Left,TextYAlignment=Enum.TextYAlignment.Center,AutoButtonColor=true,Modal=false,Selected=false,Style=Enum.ButtonStyle.Custom,Active=false,AnchorPoint=Vector2.new(0, 0),BackgroundColor3=Color3.new(1, 0, 0.498039),BackgroundTransparency=1,BorderColor3=Color3.new(1, 0, 0.498039),BorderSizePixel=0,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0, 0, 0, 0),Rotation=0,Selectable=true,Size=UDim2.new(1, -2, 0, 18),SizeConstraint=Enum.SizeConstraint.RelativeXY,Visible=true,ZIndex=1,Name='b_sn',Parent = p_visuals})
local v = CreateInstance('TextLabel',{Font=Enum.Font.Gotham,FontSize=Enum.FontSize.Size14,Text='ON',TextColor3=Color3.new(0, 1, 0),TextScaled=false,TextSize=14,TextStrokeColor3=Color3.new(0, 0, 0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=Enum.TextXAlignment.Right,TextYAlignment=Enum.TextYAlignment.Center,Active=false,AnchorPoint=Vector2.new(1, 0),BackgroundColor3=Color3.new(1, 1, 1),BackgroundTransparency=1,BorderColor3=Color3.new(0.105882, 0.164706, 0.207843),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(1, 0, 0, 0),Rotation=0,Selectable=false,Size=UDim2.new(0, 18, 0, 18),SizeConstraint=Enum.SizeConstraint.RelativeXY,Visible=true,ZIndex=1,Name='v',Parent = b_sn})
local b_sd = CreateInstance('TextButton',{Font=Enum.Font.SourceSans,FontSize=Enum.FontSize.Size18,Text='Show distance',TextColor3=Color3.new(1, 0, 0.498039),TextScaled=false,TextSize=16,TextStrokeColor3=Color3.new(0, 0, 0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=Enum.TextXAlignment.Left,TextYAlignment=Enum.TextYAlignment.Center,AutoButtonColor=true,Modal=false,Selected=false,Style=Enum.ButtonStyle.Custom,Active=false,AnchorPoint=Vector2.new(0, 0),BackgroundColor3=Color3.new(1, 0, 0.498039),BackgroundTransparency=1,BorderColor3=Color3.new(1, 0, 0.498039),BorderSizePixel=0,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0, 0, 0, 0),Rotation=0,Selectable=true,Size=UDim2.new(1, -2, 0, 18),SizeConstraint=Enum.SizeConstraint.RelativeXY,Visible=true,ZIndex=1,Name='b_sd',Parent = p_visuals})
local v = CreateInstance('TextLabel',{Font=Enum.Font.Gotham,FontSize=Enum.FontSize.Size14,Text='ON',TextColor3=Color3.new(0, 1, 0),TextScaled=false,TextSize=14,TextStrokeColor3=Color3.new(0, 0, 0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=Enum.TextXAlignment.Right,TextYAlignment=Enum.TextYAlignment.Center,Active=false,AnchorPoint=Vector2.new(1, 0),BackgroundColor3=Color3.new(1, 1, 1),BackgroundTransparency=1,BorderColor3=Color3.new(0.105882, 0.164706, 0.207843),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(1, 0, 0, 0),Rotation=0,Selectable=false,Size=UDim2.new(0, 18, 0, 18),SizeConstraint=Enum.SizeConstraint.RelativeXY,Visible=true,ZIndex=1,Name='v',Parent = b_sd})
local b_sh = CreateInstance('TextButton',{Font=Enum.Font.SourceSans,FontSize=Enum.FontSize.Size18,Text='Show health',TextColor3=Color3.new(1, 0, 0.498039),TextScaled=false,TextSize=16,TextStrokeColor3=Color3.new(0, 0, 0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=Enum.TextXAlignment.Left,TextYAlignment=Enum.TextYAlignment.Center,AutoButtonColor=true,Modal=false,Selected=false,Style=Enum.ButtonStyle.Custom,Active=false,AnchorPoint=Vector2.new(0, 0),BackgroundColor3=Color3.new(1, 0, 0.498039),BackgroundTransparency=1,BorderColor3=Color3.new(1, 0, 0.498039),BorderSizePixel=0,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0, 0, 0, 0),Rotation=0,Selectable=true,Size=UDim2.new(1, -2, 0, 18),SizeConstraint=Enum.SizeConstraint.RelativeXY,Visible=true,ZIndex=1,Name='b_sh',Parent = p_visuals})
local v = CreateInstance('TextLabel',{Font=Enum.Font.Gotham,FontSize=Enum.FontSize.Size14,Text='ON',TextColor3=Color3.new(0, 1, 0),TextScaled=false,TextSize=14,TextStrokeColor3=Color3.new(0, 0, 0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=Enum.TextXAlignment.Right,TextYAlignment=Enum.TextYAlignment.Center,Active=false,AnchorPoint=Vector2.new(1, 0),BackgroundColor3=Color3.new(1, 1, 1),BackgroundTransparency=1,BorderColor3=Color3.new(0.105882, 0.164706, 0.207843),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(1, 0, 0, 0),Rotation=0,Selectable=false,Size=UDim2.new(0, 18, 0, 18),SizeConstraint=Enum.SizeConstraint.RelativeXY,Visible=true,ZIndex=1,Name='v',Parent = b_sh})
local b_ht = CreateInstance('TextButton',{Font=Enum.Font.SourceSans,FontSize=Enum.FontSize.Size18,Text='Health type',TextColor3=Color3.new(1, 0, 0.498039),TextScaled=false,TextSize=16,TextStrokeColor3=Color3.new(0, 0, 0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=Enum.TextXAlignment.Left,TextYAlignment=Enum.TextYAlignment.Center,AutoButtonColor=true,Modal=false,Selected=false,Style=Enum.ButtonStyle.Custom,Active=false,AnchorPoint=Vector2.new(0, 0),BackgroundColor3=Color3.new(1, 0, 0.498039),BackgroundTransparency=1,BorderColor3=Color3.new(1, 0, 0.498039),BorderSizePixel=0,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0, 0, 0, 0),Rotation=0,Selectable=true,Size=UDim2.new(1, -2, 0, 18),SizeConstraint=Enum.SizeConstraint.RelativeXY,Visible=true,ZIndex=1,Name='b_ht',Parent = p_visuals})
local v = CreateInstance('TextLabel',{Font=Enum.Font.SourceSans,FontSize=Enum.FontSize.Size18,Text='Both',TextColor3=Color3.new(0, 1, 1),TextScaled=false,TextSize=16,TextStrokeColor3=Color3.new(0, 0, 0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=Enum.TextXAlignment.Right,TextYAlignment=Enum.TextYAlignment.Center,Active=false,AnchorPoint=Vector2.new(1, 0),BackgroundColor3=Color3.new(1, 1, 1),BackgroundTransparency=1,BorderColor3=Color3.new(0.105882, 0.164706, 0.207843),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(1, 0, 0, 0),Rotation=0,Selectable=false,Size=UDim2.new(0, 18, 0, 18),SizeConstraint=Enum.SizeConstraint.RelativeXY,Visible=true,ZIndex=1,Name='v',Parent = b_ht})
local b_f_t = CreateInstance('TextButton',{Font=Enum.Font.SourceSans,FontSize=Enum.FontSize.Size18,Text='Fill transparency',TextColor3=Color3.new(1, 0, 0.498039),TextScaled=false,TextSize=16,TextStrokeColor3=Color3.new(0, 0, 0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=Enum.TextXAlignment.Left,TextYAlignment=Enum.TextYAlignment.Center,AutoButtonColor=true,Modal=false,Selected=false,Style=Enum.ButtonStyle.Custom,Active=false,AnchorPoint=Vector2.new(0, 0),BackgroundColor3=Color3.new(1, 0, 0.498039),BackgroundTransparency=1,BorderColor3=Color3.new(1, 0, 0.498039),BorderSizePixel=0,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0, 0, 0, 0),Rotation=0,Selectable=true,Size=UDim2.new(1, -2, 0, 18),SizeConstraint=Enum.SizeConstraint.RelativeXY,Visible=true,ZIndex=1,Name='b_f_t',Parent = p_visuals})
local v = CreateInstance('TextLabel',{Font=Enum.Font.Gotham,FontSize=Enum.FontSize.Size14,Text='1',TextColor3=Color3.new(0, 1, 1),TextScaled=false,TextSize=14,TextStrokeColor3=Color3.new(0, 0, 0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=Enum.TextXAlignment.Right,TextYAlignment=Enum.TextYAlignment.Center,Active=false,AnchorPoint=Vector2.new(1, 0),BackgroundColor3=Color3.new(1, 1, 1),BackgroundTransparency=1,BorderColor3=Color3.new(0.105882, 0.164706, 0.207843),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(1, 0, 0, 0),Rotation=0,Selectable=false,Size=UDim2.new(0, 18, 0, 18),SizeConstraint=Enum.SizeConstraint.RelativeXY,Visible=true,ZIndex=1,Name='v',Parent = b_f_t})
local title1_2 = CreateInstance('TextLabel',{Font=Enum.Font.SourceSansBold,FontSize=Enum.FontSize.Size18,Text='ESP',TextColor3=Color3.new(1, 0, 0.498039),TextScaled=false,TextSize=18,TextStrokeColor3=Color3.new(0, 0, 0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=Enum.TextXAlignment.Left,TextYAlignment=Enum.TextYAlignment.Center,Active=false,AnchorPoint=Vector2.new(0, 0),BackgroundColor3=Color3.new(0.121569, 0.12549, 0.172549),BackgroundTransparency=0,BorderColor3=Color3.new(1, 0, 0.498039),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0, 0, 0, 0),Rotation=0,Selectable=true,Size=UDim2.new(1, 0, 0, 18),SizeConstraint=Enum.SizeConstraint.RelativeXY,Visible=true,ZIndex=1,Name='title1_2',Parent = p_visuals})
local b_ct = CreateInstance('TextLabel',{Font=Enum.Font.SourceSans,FontSize=Enum.FontSize.Size18,Text='Team color',TextColor3=Color3.new(1, 0, 0.498039),TextScaled=false,TextSize=16,TextStrokeColor3=Color3.new(0, 0, 0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=Enum.TextXAlignment.Left,TextYAlignment=Enum.TextYAlignment.Center,Active=false,AnchorPoint=Vector2.new(0, 0),BackgroundColor3=Color3.new(1, 0, 0.498039),BackgroundTransparency=1,BorderColor3=Color3.new(1, 0, 0.498039),BorderSizePixel=0,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0, 0, 0, 0),Rotation=0,Selectable=true,Size=UDim2.new(1, -2, 0, 18),SizeConstraint=Enum.SizeConstraint.RelativeXY,Visible=true,ZIndex=1,Name='b_ct',Parent = p_visuals})
local ct_b = CreateInstance('TextBox',{ClearTextOnFocus=true,Font=Enum.Font.Gotham,FontSize=Enum.FontSize.Size14,MultiLine=false,Text='',TextColor3=Color3.new(0, 0, 1), PlaceholderText='', PlaceholderColor3=Color3.new(0, 0, 1),TextScaled=false,TextSize=14,TextStrokeColor3=Color3.new(0, 0, 0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=Enum.TextXAlignment.Center,TextYAlignment=Enum.TextYAlignment.Center,Active=true,AnchorPoint=Vector2.new(1, 0),BackgroundColor3=Color3.new(0.121569, 0.12549, 0.172549),BackgroundTransparency=0,BorderColor3=Color3.new(1, 0, 0.498039),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(1, -2, 0, 2),Rotation=0,Selectable=true,Size=UDim2.new(0, 27, 0, 14),SizeConstraint=Enum.SizeConstraint.RelativeXY,Visible=true,ZIndex=1,Name='ct_b',Parent = b_ct})
local ct_g = CreateInstance('TextBox',{ClearTextOnFocus=true,Font=Enum.Font.Gotham,FontSize=Enum.FontSize.Size14,MultiLine=false,Text='',TextColor3=Color3.new(0, 1, 0), PlaceholderText='', PlaceholderColor3=Color3.new(0, 1, 0),TextScaled=false,TextSize=14,TextStrokeColor3=Color3.new(0, 0, 0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=Enum.TextXAlignment.Center,TextYAlignment=Enum.TextYAlignment.Center,Active=true,AnchorPoint=Vector2.new(1, 0),BackgroundColor3=Color3.new(0.121569, 0.12549, 0.172549),BackgroundTransparency=0,BorderColor3=Color3.new(1, 0, 0.498039),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(1, -29, 0, 2),Rotation=0,Selectable=true,Size=UDim2.new(0, 27, 0, 14),SizeConstraint=Enum.SizeConstraint.RelativeXY,Visible=true,ZIndex=1,Name='ct_g',Parent = b_ct})
local ct_r = CreateInstance('TextBox',{ClearTextOnFocus=true,Font=Enum.Font.Gotham,FontSize=Enum.FontSize.Size14,MultiLine=false,Text='',TextColor3=Color3.new(1, 0, 0), PlaceholderText='', PlaceholderColor3=Color3.new(1, 0, 0),TextScaled=false,TextSize=14,TextStrokeColor3=Color3.new(0, 0, 0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=Enum.TextXAlignment.Center,TextYAlignment=Enum.TextYAlignment.Center,Active=true,AnchorPoint=Vector2.new(1, 0),BackgroundColor3=Color3.new(0.121569, 0.12549, 0.172549),BackgroundTransparency=0,BorderColor3=Color3.new(1, 0, 0.498039),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(1, -56, 0, 2),Rotation=0,Selectable=true,Size=UDim2.new(0, 27, 0, 14),SizeConstraint=Enum.SizeConstraint.RelativeXY,Visible=true,ZIndex=1,Name='ct_r',Parent = b_ct})
local b_ce = CreateInstance('TextLabel',{Font=Enum.Font.SourceSans,FontSize=Enum.FontSize.Size18,Text='Enemy color',TextColor3=Color3.new(1, 0, 0.498039),TextScaled=false,TextSize=16,TextStrokeColor3=Color3.new(0, 0, 0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=Enum.TextXAlignment.Left,TextYAlignment=Enum.TextYAlignment.Center,Active=false,AnchorPoint=Vector2.new(0, 0),BackgroundColor3=Color3.new(1, 0, 0.498039),BackgroundTransparency=1,BorderColor3=Color3.new(1, 0, 0.498039),BorderSizePixel=0,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0, 0, 0, 0),Rotation=0,Selectable=true,Size=UDim2.new(1, -2, 0, 18),SizeConstraint=Enum.SizeConstraint.RelativeXY,Visible=true,ZIndex=1,Name='b_ce',Parent = p_visuals})
local ce_b = CreateInstance('TextBox',{ClearTextOnFocus=true,Font=Enum.Font.Gotham,FontSize=Enum.FontSize.Size14,MultiLine=false,Text='',TextColor3=Color3.new(0, 0, 1), PlaceholderText='', PlaceholderColor3=Color3.new(0, 0, 1),TextScaled=false,TextSize=14,TextStrokeColor3=Color3.new(0, 0, 0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=Enum.TextXAlignment.Center,TextYAlignment=Enum.TextYAlignment.Center,Active=true,AnchorPoint=Vector2.new(1, 0),BackgroundColor3=Color3.new(0.121569, 0.12549, 0.172549),BackgroundTransparency=0,BorderColor3=Color3.new(1, 0, 0.498039),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(1, -2, 0, 2),Rotation=0,Selectable=true,Size=UDim2.new(0, 27, 0, 14),SizeConstraint=Enum.SizeConstraint.RelativeXY,Visible=true,ZIndex=1,Name='ce_b',Parent = b_ce})
local ce_g = CreateInstance('TextBox',{ClearTextOnFocus=true,Font=Enum.Font.Gotham,FontSize=Enum.FontSize.Size14,MultiLine=false,Text='',TextColor3=Color3.new(0, 1, 0), PlaceholderText='', PlaceholderColor3=Color3.new(0, 1, 0),TextScaled=false,TextSize=14,TextStrokeColor3=Color3.new(0, 0, 0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=Enum.TextXAlignment.Center,TextYAlignment=Enum.TextYAlignment.Center,Active=true,AnchorPoint=Vector2.new(1, 0),BackgroundColor3=Color3.new(0.121569, 0.12549, 0.172549),BackgroundTransparency=0,BorderColor3=Color3.new(1, 0, 0.498039),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(1, -29, 0, 2),Rotation=0,Selectable=true,Size=UDim2.new(0, 27, 0, 14),SizeConstraint=Enum.SizeConstraint.RelativeXY,Visible=true,ZIndex=1,Name='ce_g',Parent = b_ce})
local ce_r = CreateInstance('TextBox',{ClearTextOnFocus=true,Font=Enum.Font.Gotham,FontSize=Enum.FontSize.Size14,MultiLine=false,Text='',TextColor3=Color3.new(1, 0, 0), PlaceholderText='', PlaceholderColor3=Color3.new(1, 0, 0),TextScaled=false,TextSize=14,TextStrokeColor3=Color3.new(0, 0, 0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=Enum.TextXAlignment.Center,TextYAlignment=Enum.TextYAlignment.Center,Active=true,AnchorPoint=Vector2.new(1, 0),BackgroundColor3=Color3.new(0.121569, 0.12549, 0.172549),BackgroundTransparency=0,BorderColor3=Color3.new(1, 0, 0.498039),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(1, -56, 0, 2),Rotation=0,Selectable=true,Size=UDim2.new(0, 27, 0, 14),SizeConstraint=Enum.SizeConstraint.RelativeXY,Visible=true,ZIndex=1,Name='ce_r',Parent = b_ce})
local watermark = CreateInstance('TextLabel',{Font=Enum.Font.Code,FontSize=Enum.FontSize.Size14,Text='lamehaxx v0.01',TextColor3=Color3.new(0, 0, 0),TextScaled=false,TextSize=14,TextStrokeColor3=Color3.new(0, 0, 0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=Enum.TextXAlignment.Left,TextYAlignment=Enum.TextYAlignment.Top,Active=false,AnchorPoint=Vector2.new(0, 0),BackgroundColor3=Color3.new(1, 1, 1),BackgroundTransparency=1,BorderColor3=Color3.new(0.105882, 0.164706, 0.207843),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0, 2, 0, -34),Rotation=0,Selectable=false,Size=UDim2.new(0, 200, 0, 20),SizeConstraint=Enum.SizeConstraint.RelativeXY,Visible=true,ZIndex=20,Name='watermark',Parent = age1})
local watermark1 = CreateInstance('TextLabel',{Font=Enum.Font.Code,FontSize=Enum.FontSize.Size14,Text='lamehaxx v0.01',TextColor3=Color3.new(1, 0, 0.498039),TextScaled=false,TextSize=14,TextStrokeColor3=Color3.new(0, 0, 0),TextStrokeTransparency=0,TextTransparency=0,TextWrapped=false,TextXAlignment=Enum.TextXAlignment.Left,TextYAlignment=Enum.TextYAlignment.Top,Active=false,AnchorPoint=Vector2.new(0, 0),BackgroundColor3=Color3.new(1, 1, 1),BackgroundTransparency=1,BorderColor3=Color3.new(0.105882, 0.164706, 0.207843),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0, -2, 0, -2),Rotation=0,Selectable=false,Size=UDim2.new(0, 200, 0, 20),SizeConstraint=Enum.SizeConstraint.RelativeXY,Visible=true,ZIndex=20,Name='watermark1',Parent = watermark})
p_visuals.Draggable = true

title1.LayoutOrder = 0 title1_2.LayoutOrder = 1
b_b.LayoutOrder = 1 b_f.LayoutOrder = 2 b_f_t.LayoutOrder = 3 b_sd.LayoutOrder = 4 b_sn.LayoutOrder = 5 b_sh.LayoutOrder = 6 b_ht.LayoutOrder = 7 b_rt.LayoutOrder = 8 b_tc.LayoutOrder = 9 b_ct.LayoutOrder = 10 b_ce.LayoutOrder = 11

local localplayer = game:GetService""Players"".LocalPlayer
local uis = game:GetService""UserInputService""

local cheats = {
	b_b = true;
	b_f = true;
	b_f_t = 1;
	b_sd = true;
	b_sn = true;
	b_sh = true;
	b_ht = ""Both"";
	b_rt = true;
	b_tc = true;
}

local cheatsf = Instance.new(""Folder"", game.CoreGui) cheatsf.Name = ""cheats""
local espf = Instance.new(""Folder"", cheatsf) espf.Name = ""esp""

function addEsp(player)
	local bbg = Instance.new(""BillboardGui"", espf)
	bbg.Name = player.Name
	bbg.AlwaysOnTop = true
	bbg.Size = UDim2.new(4,0,5.4,0)
	bbg.ClipsDescendants = false
	
	local outlines = Instance.new(""Frame"", bbg)
	outlines.Size = UDim2.new(1,0,1,0)
	outlines.BorderSizePixel = 0
	outlines.BackgroundTransparency = 1
	local left = Instance.new(""Frame"", outlines)
	left.BorderSizePixel = 0
	left.Size = UDim2.new(0,1,1,0)
	local right = left:Clone()
	right.Parent = outlines
	right.Size = UDim2.new(0,-1,1,0)
	right.Position = UDim2.new(1,0,0,0)
	local up = left:Clone()
	up.Parent = outlines
	up.Size = UDim2.new(1,0,0,1)
	local down = left:Clone()
	down.Parent = outlines
	down.Size = UDim2.new(1,0,0,-1)
	down.Position = UDim2.new(0,0,1,0)
	
	local info = Instance.new(""BillboardGui"", bbg)
	info.Name = ""info""
	info.Size = UDim2.new(3,0,0,54)
	info.StudsOffset = Vector3.new(3.6,-3,0)
	info.AlwaysOnTop = true
	info.ClipsDescendants = false
	local namelabel = Instance.new(""TextLabel"", info)
	namelabel.Name = ""namelabel""
	namelabel.BackgroundTransparency = 1
	namelabel.TextStrokeTransparency = 0
	namelabel.TextXAlignment = Enum.TextXAlignment.Left
	namelabel.Size = UDim2.new(0,100,0,18)
	namelabel.Position = UDim2.new(0,0,0,0)
	namelabel.Text = player.Name
	local distancel = Instance.new(""TextLabel"", info)
	distancel.Name = ""distancelabel""
	distancel.BackgroundTransparency = 1
	distancel.TextStrokeTransparency = 0
	distancel.TextXAlignment = Enum.TextXAlignment.Left
	distancel.Size = UDim2.new(0,100,0,18)
	distancel.Position = UDim2.new(0,0,0,18)
	local healthl = Instance.new(""TextLabel"", info)
	healthl.Name = ""healthlabel""
	healthl.BackgroundTransparency = 1
	healthl.TextStrokeTransparency = 0
	healthl.TextXAlignment = Enum.TextXAlignment.Left
	healthl.Size = UDim2.new(0,100,0,18)
	healthl.Position = UDim2.new(0,0,0,36)
	
	local uill = Instance.new(""UIListLayout"", info)
	
	local forhealth = Instance.new(""BillboardGui"", bbg)
	forhealth.Name = ""forhealth""
	forhealth.Size = UDim2.new(5,0,6,0)
	forhealth.AlwaysOnTop = true
	forhealth.ClipsDescendants = false
	
	local healthbar = Instance.new(""Frame"", forhealth)
	healthbar.Name = ""healthbar""
	healthbar.BackgroundColor3 = Color3.fromRGB(40,40,40)
	healthbar.BorderColor3 = Color3.fromRGB(0,0,0)
	healthbar.Size = UDim2.new(0.04,0,0.9,0)
	healthbar.Position = UDim2.new(0,0,0.05,0)
	local bar = Instance.new(""Frame"", healthbar)
	bar.Name = ""bar""
	bar.BorderSizePixel = 0
	bar.BackgroundColor3 = Color3.fromRGB(94,255,69)
	bar.AnchorPoint = Vector2.new(0,1)
	bar.Position = UDim2.new(0,0,1,0)
	bar.Size = UDim2.new(1,0,1,0)
	
	local co = coroutine.create(function()
		while wait(0.1) do
			if (player.Character and player.Character:FindFirstChild""HumanoidRootPart"") then
				bbg.Adornee = player.Character.HumanoidRootPart
				info.Adornee = player.Character.HumanoidRootPart
				forhealth.Adornee = player.Character.HumanoidRootPart
				
				if (player.Team ~= localplayer.Team) then
					bbg.Enabled = true
					info.Enabled = true
					forhealth.Enabled = true
				end
				if player.Character:FindFirstChild(""ForceField"") then
					outlines.BackgroundTransparency = 0.4
					left.BackgroundTransparency = 0.4
					right.BackgroundTransparency = 0.4
					up.BackgroundTransparency = 0.4
					down.BackgroundTransparency = 0.4
					healthl.TextTransparency = 0.4
					healthl.TextStrokeTransparency = 0.8
					distancel.TextTransparency = 0.4
					distancel.TextStrokeTransparency = 0.8
					namelabel.TextTransparency = 0.4
					namelabel.TextStrokeTransparency = 0.8
					bar.BackgroundTransparency = 0.4
					healthbar.BackgroundTransparency = 0.8
				else
					outlines.BackgroundTransparency = 0
					left.BackgroundTransparency = 0
					right.BackgroundTransparency = 0
					up.BackgroundTransparency = 0
					down.BackgroundTransparency = 0
					healthl.TextTransparency = 0
					healthl.TextStrokeTransparency = 0
					distancel.TextTransparency = 0
					distancel.TextStrokeTransparency = 0
					namelabel.TextTransparency = 0
					namelabel.TextStrokeTransparency = 0
					bar.BackgroundTransparency = 0
					healthbar.BackgroundTransparency = 0
				end
				if cheats.b_b == true then
					outlines.Visible = true
				else
					outlines.Visible = false
				end
				if cheats.b_f == true then
					if player.Character:FindFirstChild(""ForceField"") then
						outlines.BackgroundTransparency = 0.9
					else
						outlines.BackgroundTransparency = cheats.b_f_t
					end
				else
					outlines.BackgroundTransparency = 1
				end
				if cheats.b_sh == true then
					if (player.Character:FindFirstChild""Humanoid"") then
						healthl.Text = ""Health: ""..math.floor(player.Character:FindFirstChild""Humanoid"".Health)
						healthbar.bar.Size = UDim2.new(1,0,player.Character:FindFirstChild""Humanoid"".Health/player.Character:FindFirstChild""Humanoid"".MaxHealth,0)
					end
					if cheats.b_ht == ""Text"" then
						healthbar.Visible = false
						healthl.Visible = true
					end
					if cheats.b_ht == ""Bar"" then
						healthl.Visible = false
						healthbar.Visible = true
					end
					if cheats.b_ht == ""Both"" then
						healthl.Visible = true
						healthbar.Visible = true
					end
				else
					healthl.Visible = false
					healthbar.Visible = false
				end
				if cheats.b_sn then
					namelabel.Visible = true
				else
					namelabel.Visible = false
				end
				if cheats.b_sd == true then
					distancel.Visible = true
					if (localplayer.Character and localplayer.Character:FindFirstChild""HumanoidRootPart"") then
						distancel.Text = ""Distance: ""..math.floor(0.5+(localplayer.Character:FindFirstChild""HumanoidRootPart"".Position - player.Character:FindFirstChild""HumanoidRootPart"".Position).magnitude)
					end
				else
					distancel.Visible = false
				end
				if cheats.b_rt == true then
					if (player.Team == localplayer.Team) then
						bbg.Enabled = true
						info.Enabled = true
						forhealth.Enabled = true
					end
				else
					if (player.Team == localplayer.Team) then
						bbg.Enabled = false
						info.Enabled = false
						forhealth.Enabled = false
					end
				end
				if cheats.b_tc == true then
					outlines.BackgroundColor3 = player.TeamColor.Color
					left.BackgroundColor3 = player.TeamColor.Color
					right.BackgroundColor3 = player.TeamColor.Color
					up.BackgroundColor3 = player.TeamColor.Color
					down.BackgroundColor3 = player.TeamColor.Color
					healthl.TextColor3 = player.TeamColor.Color
					distancel.TextColor3 = player.TeamColor.Color
					namelabel.TextColor3 = player.TeamColor.Color
				else
					if (player.Team == localplayer.Team) then
						outlines.BackgroundColor3 = Color3.fromRGB(ct_r.Text, ct_g.Text, ct_b.Text)
						left.BackgroundColor3 = Color3.fromRGB(ct_r.Text, ct_g.Text, ct_b.Text)
						right.BackgroundColor3 = Color3.fromRGB(ct_r.Text, ct_g.Text, ct_b.Text)
						up.BackgroundColor3 = Color3.fromRGB(ct_r.Text, ct_g.Text, ct_b.Text)
						down.BackgroundColor3 = Color3.fromRGB(ct_r.Text, ct_g.Text, ct_b.Text)
						healthl.TextColor3 = Color3.fromRGB(ct_r.Text, ct_g.Text, ct_b.Text)
						distancel.TextColor3 = Color3.fromRGB(ct_r.Text, ct_g.Text, ct_b.Text)
						namelabel.TextColor3 = Color3.fromRGB(ct_r.Text, ct_g.Text, ct_b.Text)
					else
						outlines.BackgroundColor3 = Color3.fromRGB(ce_r.Text, ce_g.Text, ce_b.Text)
						left.BackgroundColor3 = Color3.fromRGB(ce_r.Text, ce_g.Text, ce_b.Text)
						right.BackgroundColor3 = Color3.fromRGB(ce_r.Text, ce_g.Text, ce_b.Text)
						up.BackgroundColor3 = Color3.fromRGB(ce_r.Text, ce_g.Text, ce_b.Text)
						down.BackgroundColor3 = Color3.fromRGB(ce_r.Text, ce_g.Text, ce_b.Text)
						healthl.TextColor3 = Color3.fromRGB(ce_r.Text, ce_g.Text, ce_b.Text)
						distancel.TextColor3 = Color3.fromRGB(ce_r.Text, ce_g.Text, ce_b.Text)
						namelabel.TextColor3 = Color3.fromRGB(ce_r.Text, ce_g.Text, ce_b.Text)
					end
				end
			end
			if not (game:GetService""Players"":FindFirstChild(player.Name)) then
				print(player.Name.."" has left. Clearing esp."")
				espf:FindFirstChild(player.Name):Destroy()
				coroutine.yield()
			end
		end
	end)
	coroutine.resume(co)
end

--main
do
	wait(2)
	--menu buttons
	for _,button in pairs(age1:GetDescendants()) do
		if button:IsA""TextButton"" then
			button.MouseButton1Click:connect(function()
				if button.Name == ""b_f_t"" then
					if cheats.b_f_t >= 0 then
						cheats.b_f_t = cheats.b_f_t+0.1
						if cheats.b_f_t > 1 then
							cheats.b_f_t = 0
						end
					end
					button.v.Text = cheats.b_f_t
				elseif button.Name == ""b_ht"" then
					if cheats.b_ht == ""Text"" then
						cheats.b_ht = ""Bar""
					elseif cheats.b_ht == ""Bar"" then
						cheats.b_ht = ""Both""
					else
						cheats.b_ht = ""Text""
					end
					button.v.Text = cheats.b_ht
				else
					if cheats[button.Name] == true then
						cheats[button.Name] = false
						button.v.Text = ""OFF""
						button.v.TextColor3 = Color3.fromRGB(255,0,0)
					else
						cheats[button.Name] = true
						button.v.Text = ""ON""
						button.v.TextColor3 = Color3.fromRGB(0,255,0)
					end
				end	
			end)
		end
	end
	
	--initial player addition
	for _,v in pairs(game:GetService(""Players""):GetChildren()) do
		if not (v.Name == localplayer.Name) then
			if not (espf:FindFirstChild(v.Name)) then
				addEsp(v)
			end
		end
	end
	
	--open/close gui
	game:GetService(""UserInputService"").InputBegan:connect(function(input, gameProcessed)
		if input.KeyCode == Enum.KeyCode.KeypadOne then
			if not gameProcessed then
				age1.Enabled = not age1.Enabled
			end
		end
	end)
	
	--auto-update
	while wait(10) do
		for _,v in pairs(game:GetService(""Players""):GetChildren()) do
			if not (v.Name == localplayer.Name) then
				if not (espf:FindFirstChild(v.Name)) then
					addEsp(v)
				end
			end
		end
	end
end"
JrAxN98Z,Problem,DS_Raja,C++,Saturday 6th of July 2024 09:28:00 AM CDT,"#include <bits/stdc++.h>
using namespace std;
#define ll long long
const int N = 1e5 + 5;
struct tup {
  int left, right, value;
};
map<int, tup> Q;
ll a[N];
ll t[4 * N], lazy[4 * N];
int q[N];

void push(int n, int b, int e) {
  if (lazy[n] == 0) return;
  t[n] = t[n] + lazy[n] * (e - b + 1);
  if (b != e) {
    int l = 2 * n;
    int r = (2 * n) + 1;
    lazy[l] += lazy[n];
    lazy[r] += lazy[n];
  }
  lazy[n] = 0;
}

ll merge(ll l, ll r) {
  return min(l, r);
}

void build(int n, int b, int e) {
  if (b == e) {
    t[n] = a[b]; return;
  }
  int l = 2 * n;
  int r = (2 * n) + 1;
  int mid = (b + e) / 2;
  build(l, b, mid);
  build(r, mid + 1, e);
  t[n] = merge(t[l], t[r]);
}

ll query(int n, int b, int e, int i) {
  if (b > i or i > e) return LLONG_MAX;
  push(n, b, e);
  if (b == e) return t[n];
  int l = 2 * n;
  int r = (2 * n) + 1;
  int mid = (b + e) / 2;
  if (i <= mid) return query(l, b, mid, i);
  else return query(r, mid + 1, e, i);
}

void upd(int n, int b, int e, int i, int j, int v) {
  push(n, b, e);
  if (b > j or e < i) return;
  if (b >= i and e <= j) {
    lazy[n] = v;
    push(n, b, e);
    return;
  }
  int l = 2 * n;
  int r = (2 * n) + 1;
  int mid = (b + e) / 2;
  upd(l, b, mid, i, j, v);
  upd(r, mid + 1, e, i, j, v);
  t[n] = merge(t[l], t[r]);
}

int32_t main() {
  ios_base::sync_with_stdio(0); cin.tie(0);

  int n, m, k; cin >> n >> m >> k;
  for (int i = 1; i <= n; i++) {
    cin >> a[i];
  }
  build(1, 1, n);
  for (int i = 1; i <= m; i++) {
    int l, r, d; cin >> l >> r >> d;
    l++, r++;
    Q[i] = {l, r, d};
  }
  for (int i = 1; i <= k; i++) {
    int l, r; cin >> l >> r;
    q[l]++;
    q[r + 1]--;
  }
  for (int i = 1; i <= m; i++) {
    q[i] += q[i - 1];
  }
  for (int i = 1; i <= m; i++) {
    int l = Q[i].left;
    int r = Q[i].right;
    int d = Q[i].value;
    d = q[i] * d;
    upd(1, 1, n, l, r, d);
  }
  for (int i = 1; i <= n; i++) {
    cout << query(1, 1, n, i) << ' ';
  }
  cout << '\n';
}
"
SYkwdL2z,LF Colors Editor - Edits the LF colors file.,subbass,Python,Saturday 6th of July 2024 09:14:21 AM CDT,"#!/usr/bin/env python3
#Version 1.25

#      LF colors Editor
#
#  editor to tweak the colors for 
#  lf (list files) file manager
#  I couldn't find one already made 
#  so I made.
#
#  it hard parses the theme colours from the kitty theme
# if you don't use kitty.... Sucks.
#
#
# cursors nav, pg up/dn and can add paths as well as extensions
# file saved to ~/.config/lf/colors
#
# can edit filetype/extension/path
# read whats acceptable, I'm not parsing it.
# https://github.com/gokcehan/lf/blob/master/doc.md 
# almost at the very very bottom...
#
# this works for me, the code is prolly horrid.
# I will prolly do an LS_COLORS version too.
# I'm sick of tweaking that by hand...
#


import os
import curses
import re
from datetime import datetime
import shutil

COLOR_MAP = {
    30: curses.COLOR_BLACK, 31: curses.COLOR_RED, 32: curses.COLOR_GREEN,
    33: curses.COLOR_YELLOW, 34: curses.COLOR_BLUE, 35: curses.COLOR_MAGENTA,
    36: curses.COLOR_CYAN, 37: curses.COLOR_WHITE,
    90: 8, 91: 9, 92: 10, 93: 11, 94: 12, 95: 13, 96: 14, 97: 15  # Bright colors
}

REVERSE_COLOR_MAP = {v: k for k, v in COLOR_MAP.items()}

def ansi_to_curses_color(ansi_code):
    codes = ansi_code.split(';')
    fg = -1
    bg = -1
    attr = curses.A_NORMAL

    for code in codes:
        if code == '01':
            attr |= curses.A_BOLD
        elif code.isdigit():
            code_int = int(code)
            if 30 <= code_int <= 37:
                fg = code_int - 30
            elif 90 <= code_int <= 97:
                fg = code_int - 90
                attr |= curses.A_BOLD
            elif 40 <= code_int <= 47:
                bg = code_int - 40

    return fg, bg, attr

def create_color_popup(stdscr, title, current_color):
    height, width = stdscr.getmaxyx()
    popup = curses.newwin(14, 32, height//2 - 7, width//2 - 16)
    popup.keypad(1)
    curses.curs_set(0)
    popup.box()
    popup.addstr(0, 1, title)
    colors = [
        (""Black"", curses.COLOR_BLACK),
        (""Red"", curses.COLOR_RED),
        (""Green"", curses.COLOR_GREEN),
        (""Yellow"", curses.COLOR_YELLOW),
        (""Blue"", curses.COLOR_BLUE),
        (""Magenta"", curses.COLOR_MAGENTA),
        (""Cyan"", curses.COLOR_CYAN),
        (""White"", curses.COLOR_WHITE),
        (""No Background"", -1)
    ]
    
    for i, (_, color) in enumerate(colors):
        if color != -1:
            curses.init_pair(100 + i, color, curses.COLOR_BLACK)
    
    current_pos = next((i for i, (_, color) in enumerate(colors) if color == current_color % 8), 0)
    
    while True:
        popup.clear()
        popup.box()
        popup.addstr(0, 1, title)
        
        for i, (color_name, color) in enumerate(colors):
            if i == current_pos:
                popup.addstr(i+1, 2, ""-> "", curses.A_BOLD)
            else:
                popup.addstr(i+1, 2, ""   "")
            if color != -1:
                popup.addstr(f""{color_name:<13}"", curses.color_pair(100 + i))
            else:
                popup.addstr(f""{color_name:<13}"")
        
        popup.addstr(12, 2, ""Enter to select, q to cancel"")
        popup.refresh()
        
        key = popup.getch()
        
        if key == ord('\n'):
            return colors[current_pos][1]
        elif key == ord('q'):
            return None
        elif key == curses.KEY_UP and current_pos > 0:
            current_pos -= 1
        elif key == curses.KEY_DOWN and current_pos < len(colors) - 1:
            current_pos += 1

def display_colors(stdscr, kitty_colors, lf_colors, lf_colors_path):
    curses.curs_set(0)
    stdscr.clear()
    height, width = stdscr.getmaxyx()

    # Initialize color pairs
    curses.use_default_colors()  # Allow using the terminal's default colors
    for i in range(16):
        curses.init_pair(i + 1, i, -1)  # -1 means use the default background
        for j in range(8):
            curses.init_pair(i * 8 + j + 17, i, j)

    items = list(lf_colors.items())
    current_pos = 0
    offset = 0

    while True:
        stdscr.clear()
        
        stdscr.addstr(0, 0, ""File Type          | LF Color | Example"", curses.A_BOLD)
        stdscr.addstr(1, 0, ""-"" * (width - 1), curses.A_BOLD)

        for i in range(height - 3):
            if i + offset < len(items):
                file_type, color_code = items[i + offset]
                fg_color, bg_color, attr = ansi_to_curses_color(color_code)
                
                if i + offset == current_pos:
                    stdscr.addstr(i + 2, 0, ""-> "")
                else:
                    stdscr.addstr(i + 2, 0, ""   "")
                
                stdscr.addstr(i + 2, 3, f""{file_type:<15} | {color_code:<8} | "", curses.A_BOLD)
                
                # Correctly apply foreground and background colors
                if bg_color == -1:
                    # Only foreground color is set, use default background
                    color_pair = curses.color_pair(fg_color + 1 if fg_color != -1 else 0)
                else:
                    # Both foreground and background colors are set
                    color_pair = curses.color_pair(fg_color * 8 + bg_color + 17)
                
                stdscr.addstr(f""{file_type.capitalize()} Example"", color_pair | attr)

        stdscr.addstr(height-1, 0, ""a:add f:fg b:bg t:toggle-bold s:save e:edit q:quit PgUp/PgDn: scroll"")
        stdscr.refresh()

        key = stdscr.getch()
        if key == ord('q'):
            break
        elif key == ord('a'):
            found_pos = find_or_add_extension(stdscr, items, lf_colors)
            if found_pos != -1:
                current_pos = found_pos
                offset = max(0, min(current_pos - height + 4, len(items) - height + 2))
        elif key == ord('s'):
            save_message = save_colors(lf_colors, lf_colors_path)
            stdscr.addstr(height-1, 0, save_message)
            stdscr.clrtoeol()
            stdscr.refresh()
            curses.napms(2000)
        elif key == curses.KEY_UP and current_pos > 0:
            current_pos -= 1
            if current_pos < offset:
                offset = current_pos
        elif key == curses.KEY_DOWN and current_pos < len(items) - 1:
            current_pos += 1
            if current_pos >= offset + height - 3:
                offset = current_pos - (height - 4)
        elif key == curses.KEY_PPAGE:  # Page Up
            current_pos = max(0, current_pos - (height - 3))
            offset = max(0, offset - (height - 3))
        elif key == curses.KEY_NPAGE:  # Page Down
            current_pos = min(len(items) - 1, current_pos + (height - 3))
            offset = min(len(items) - (height - 3), offset + (height - 3))
        elif key == ord('f'):  # Foreground color
            file_type, color_code = items[current_pos]
            current_fg, current_bg, current_attr = ansi_to_curses_color(color_code)
            new_color = create_color_popup(stdscr, ""Select Foreground Color"", current_fg)
            if new_color is not None:
                new_color_code = []
                if current_attr & curses.A_BOLD:
                    new_color_code.append('01')
                new_fg_code = 30 + new_color if new_color < 8 else 90 + new_color - 8
                new_color_code.append(str(new_fg_code))
                if current_bg != -1:
                    new_color_code.append(str(current_bg + 40))
                new_color_code = ';'.join(new_color_code)
                lf_colors[file_type] = new_color_code
                items[current_pos] = (file_type, new_color_code)
        elif key == ord('b'):  # Background color
            file_type, color_code = items[current_pos]
            current_fg, current_bg, current_attr = ansi_to_curses_color(color_code)
            new_color = create_color_popup(stdscr, ""Select Background Color"", current_bg)
            if new_color is not None:
                new_color_code = []
                if current_attr & curses.A_BOLD:
                    new_color_code.append('01')
                if current_fg != -1:
                    new_fg_code = 30 + current_fg if current_fg < 8 else 90 + current_fg - 8
                    new_color_code.append(str(new_fg_code))
                if new_color != -1:
                    new_color_code.append(str(new_color + 40))
                new_color_code = ';'.join(new_color_code)
                lf_colors[file_type] = new_color_code
                items[current_pos] = (file_type, new_color_code)
        elif key == ord('t'):  # Toggle brightness
            file_type, color_code = items[current_pos]
            current_fg, current_bg, current_attr = ansi_to_curses_color(color_code)
            if current_attr & curses.A_BOLD:
                new_attr = current_attr & ~curses.A_BOLD
                new_fg_code = 30 + current_fg if current_fg < 8 else current_fg + 30
            else:
                new_attr = current_attr | curses.A_BOLD
                new_fg_code = 90 + current_fg if current_fg < 8 else current_fg + 60
            new_color_code = ['01'] if new_attr & curses.A_BOLD else []
            new_color_code.append(str(new_fg_code))
            if current_bg != -1:
                new_color_code.append(str(current_bg + 40))
            new_color_code = ';'.join(new_color_code)
            lf_colors[file_type] = new_color_code
            items[current_pos] = (file_type, new_color_code)
        elif key == ord('e'):  # Edit file type or extension
            file_type, color_code = items[current_pos]
            new_file_type = edit_file_type_popup(stdscr, file_type)
            if new_file_type:
                lf_colors[new_file_type] = lf_colors.pop(file_type)
                items[current_pos] = (new_file_type, color_code)

def find_current_theme(kitty_conf_path):
    try:
        with open(kitty_conf_path, 'r') as file:
            for line in file:
                if line.strip().startswith('include'):
                    theme_path = line.split()[1]
                    if theme_path.startswith('~'):
                        theme_path = os.path.expanduser(theme_path)
                    return os.path.basename(theme_path)
    except IOError:
        print(f""Error: Unable to read {kitty_conf_path}"")
    return None

def find_or_add_extension(stdscr, items, lf_colors):
    height, width = stdscr.getmaxyx()
    input_win = curses.newwin(5, 60, height//2 - 2, width//2 - 30)
    input_win.box()
    input_win.addstr(0, 1, ""Enter extension or path (e.g., *.txt, ~/Documents):"")
    input_win.addstr(1, 1, ""Warning: Your input is not parsed/sanitized. Ensure it matches lf's expected format."", curses.A_BOLD)
    input_win.refresh()
    
    curses.echo()
    curses.curs_set(1)
    extension = input_win.getstr(3, 1, 58).decode('utf-8').strip()
    curses.noecho()
    curses.curs_set(0)

    if not extension:
        return -1

    for idx, (file_type, _) in enumerate(items):
        if file_type == extension:
            return idx

    new_color = ""00;37""
    lf_colors[extension] = new_color
    items.append((extension, new_color))
    return len(items) - 1

def edit_file_type_popup(stdscr, current_file_type):
    height, width = stdscr.getmaxyx()
    edit_win = curses.newwin(3, 60, height//2 - 1, width//2 - 30)
    edit_win.box()
    edit_win.addstr(0, 1, ""Edit file type or path (e.g., *.txt, ~/Documents):"")
    edit_win.refresh()
    
    curses.echo()
    curses.curs_set(1)
    edit_win.addstr(1, 1, current_file_type)
    new_file_type = edit_win.getstr(1, 1, 58).decode('utf-8').strip()
    curses.noecho()
    curses.curs_set(0)

    return new_file_type if new_file_type else None

def main(stdscr):
    kitty_conf_path = os.path.expanduser('~/.config/kitty/kitty.conf')
    themes_root = '/home/subbass/.config/kitty/themes/'
    lf_colors_path = os.path.expanduser('~/.config/lf/colors')

    current_theme = find_current_theme(kitty_conf_path)
    if not current_theme:
        stdscr.addstr(""Couldn't find the current theme in kitty.conf"")
        stdscr.refresh()
        stdscr.getch()
        return

    theme_path = os.path.join(themes_root, current_theme)
    if not os.path.exists(theme_path):
        stdscr.addstr(f""Theme file not found: {theme_path}"")
        stdscr.refresh()
        stdscr.getch()
        return

    kitty_colors = parse_theme_colors(theme_path)
    lf_colors = parse_lf_colors(lf_colors_path)

    display_colors(stdscr, kitty_colors, lf_colors, lf_colors_path)

def parse_lf_colors(lf_colors_path):
    lf_colors = {}
    if not os.path.exists(lf_colors_path):
        return lf_colors
    with open(lf_colors_path, 'r') as file:
        for line in file:
            line = line.strip()
            if line and not line.startswith('#'):
                parts = line.split()
                if len(parts) >= 2:
                    lf_colors[parts[0]] = parts[1]
    return lf_colors

def parse_theme_colors(theme_file_path):
    colors = {}
    with open(theme_file_path, 'r') as file:
        for line in file:
            line = line.strip()
            if line and not line.startswith('#'):
                key, value = line.split(maxsplit=1)
                colors[key] = value
    return colors

def save_colors(lf_colors, lf_colors_path):
    timestamp = datetime.now().strftime(""%Y%m%d_%H%M%S"")
    backup_path = f""{lf_colors_path}.backup_{timestamp}""
    try:
        shutil.copy2(lf_colors_path, backup_path)
    except Exception as e:
        return f""Failed to create backup: {str(e)}""

    try:
        with open(lf_colors_path, 'r') as file:
            original_lines = file.readlines()
    except Exception as e:
        return f""Failed to read original file: {str(e)}""

    updated_lines = []
    processed_entries = set()
    for line in original_lines:
        stripped_line = line.strip()
        if stripped_line and not stripped_line.startswith('#'):
            parts = stripped_line.split()
            if len(parts) >= 2:
                file_type = parts[0]
                if file_type in lf_colors:
                    updated_line = f""{file_type}\t{lf_colors[file_type]}\n""
                    updated_lines.append(updated_line)
                    processed_entries.add(file_type)
                    continue
        updated_lines.append(line)

    for file_type, color in lf_colors.items():
        if file_type not in processed_entries:
            updated_lines.append(f""{file_type}\t{color}\n"")

    try:
        with open(lf_colors_path, 'w') as file:
            file.writelines(updated_lines)
        return ""Colors saved successfully!""
    except Exception as e:
        return f""Failed to save colors: {str(e)}""

if __name__ == ""__main__"":
    curses.wrapper(main)
"
fZzEgSmP,Our First Code,BeetrootIT,Python,Saturday 6th of July 2024 08:58:28 AM CDT,"
print('Test')
"
9Yz4geNt,Our First Code,BeetrootIT,Python,Saturday 6th of July 2024 08:56:43 AM CDT,"
print(""Report"")
a = 1
b = 2
print(a + b)
"
