id,title,username,language,date,content
6eaxEqVv,data812,TestGuy1,JSON,Sunday 14th of January 2024 06:00:05 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '81c137373b362ab962dce5ed2df5bd3d135ba64c765eee2624510d1e9babf387e617222c578726e211ab5557bcb7873bb6fbd76eaccc467ca61654e3c013c7df248dc43ce2dc17f095494e731513af28110a92f84ee1d8f96c8e7a83bd9b73340063594403a3fc85aeb7e6cad4943d198aaaa83275f4e1e33208a8a3a23e705a',
  otherdata: [
    'bf2791364d449badf3445d96c087ef93',
    'e5d153f2785ee0bdbb549d390a6d8cfb',
    'afa132f83719487a932fb7701f9e52e0',
    'd4bd61ba398ed93187e077b51d51c658',
    '9c1702ae983e3cabee9fd05aaff1ddbf',
    '8746e66183dfc23d3d4be6e5c954b412',
    'c7b66cc9a7e35f1168af802f7bbb8048',
    '8459731257ba18cff8931ca256130fa2'
  ]
}"
TLcqG9RM,09.YardGreening,IvanITD,C#,Sunday 14th of January 2024 05:50:19 AM CDT,"double squareMeters = double.Parse(Console.ReadLine());

double perOneSquareMeter = 7.61;
double discount = 0.18;

double totalGreeningPrice = squareMeters * perOneSquareMeter;
double discountedPrice = discount * totalGreeningPrice;
double finalPrice = totalGreeningPrice - discountedPrice;

Console.WriteLine($""The final price is: {finalPrice} lv."");
Console.WriteLine($""The discount is: {discountedPrice} lv."");"
JL1HcdkT,08. Lunch Break,myrdok123,Java,Sunday 14th of January 2024 05:49:21 AM CDT,"package W02ConditionalStatements.Exercises;

import java.util.Scanner;

public class P08LunchBreak {
    public static void main(String[] args) {


        Scanner scanner = new Scanner(System.in);



        String serialName = scanner.nextLine();
        int duration = Integer.parseInt(scanner.nextLine());
        int lunchBreak = Integer.parseInt(scanner.nextLine());

        //Пресмятаме колко време ще обядваме и колко време ще ни е почивка
        double timeForEat = lunchBreak / 8.0;
        double timeForRest = lunchBreak / 4.0;

        //Пресмятаме времето за гледане на сериала
        double timeForWatch = lunchBreak - timeForEat - timeForRest;

        //Проверяваме дали оставащото време е достатъчно, за да изгледаме 1 серия от сериала



        double diff = Math.ceil(Math.abs(timeForWatch - duration));


        if (timeForWatch >= duration){
            System.out.printf(""You have enough time to watch %s and left with %.0f minutes free time."",
                    serialName, diff);
        }else {
            System.out.printf(""You don't have enough time to watch %s, you need %.0f more minutes."",
                    serialName, diff);
        }
    }
}
"
LRnEE7Jb,08.PetShop,IvanITD,C#,Sunday 14th of January 2024 05:49:13 AM CDT,"int dogFood = int.Parse(Console.ReadLine());
int catFood = int.Parse(Console.ReadLine());

double oneDogPack = 2.50;
double oneCatPack = 4.0;

double totalDogFoodPrice = dogFood * oneDogPack;
double totalCatFoodPrice = catFood * oneCatPack;

double totalExpence = totalDogFoodPrice + totalCatFoodPrice;

Console.WriteLine($""{totalExpence} lv."");"
dD35Wn0V,06. World Swimming Record,myrdok123,Java,Sunday 14th of January 2024 05:48:51 AM CDT,"package W02ConditionalStatements.Exercises;

import java.util.Scanner;

public class P06WorldSwimmingRecord {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        double recordInSeconds = Double.parseDouble(scanner.nextLine());
        double distance = Double.parseDouble(scanner.nextLine());
        double timeForOneMeter = Double.parseDouble(scanner.nextLine());


        //Пресмятаме забавянето -> за всеки 15 метра той се забавя 12.5 секунди
        double delay = (Math.floor(distance / 15)) * 12.5;

        //Пресмятаме резултата от плуването
        double result = distance * timeForOneMeter + delay;

        //Проверяваме дали рекордът е подобрен
        if(result < recordInSeconds){
            System.out.printf(""Yes, he succeeded! The new world record is %.2f seconds."", result);
        }else {
            double diff = result - recordInSeconds;
            System.out.printf(""No, he failed! He was %.2f seconds slower."", diff);
        }
    }
}
"
eWSfWYWp,05. Godzilla vs. Kong,myrdok123,Java,Sunday 14th of January 2024 05:48:22 AM CDT,"package W02ConditionalStatements.Exercises;

import java.util.Scanner;

public class P05GodzillaVsKong {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);


        double budget = Double.parseDouble(scanner.nextLine());
        int countExtra = Integer.parseInt(scanner.nextLine());
        double priceForClothsForOnePerson = Double.parseDouble(scanner.nextLine());

        //Пресмятаме цената за декора
        double decorPrice = budget * 0.1;

        //Пресметнем цената за облеклото
        double priceForCloths = priceForClothsForOnePerson * countExtra;

        //Проверяваме дали статистите са повече от 150 -> пресмятаме 10% отстъпка от облеклото
        if(countExtra > 150){

            priceForCloths = priceForCloths * 0.9;
        }

        //Пресмятаме общата сума и да намерим разликата между общата сума и бюджета
        double finalSum = priceForCloths + decorPrice;
        double difference = Math.abs(finalSum - budget);

        //Проверяваме дали бюджетът е достатъчен
        if (finalSum > budget){
            System.out.println(""Not enough money!"");
            System.out.printf(""Wingard needs %.2f leva more."", difference);
        }else {
            System.out.println(""Action!"");
            System.out.printf(""Wingard starts filming with %.2f leva left."", difference);
        }


    }
}
"
ZGknV4LG,07.ProjectCreation,IvanITD,C#,Sunday 14th of January 2024 05:47:56 AM CDT,"string architectName = Console.ReadLine();
int projectAmmount = int.Parse(Console.ReadLine());

int timePerProject = 3;

int neededHours = projectAmmount * timePerProject;

Console.WriteLine($""The architect {architectName} will need {neededHours} "" +
    $""hours to complete {projectAmmount} project/s."");
"
PUvXgB0a,04. Toy Shop,myrdok123,Java,Sunday 14th of January 2024 05:47:50 AM CDT,"package W02ConditionalStatements.Exercises;

import java.util.Scanner;

public class P04ToyShop {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);


        double tripPrice = Double.parseDouble(scanner.nextLine());

        int puzzlesCount = Integer.parseInt(scanner.nextLine());
        int dollsCount = Integer.parseInt(scanner.nextLine());
        int teddyBearsCount = Integer.parseInt(scanner.nextLine());
        int minionsCount = Integer.parseInt(scanner.nextLine());
        int trucksCount = Integer.parseInt(scanner.nextLine());

/*       •	Пъзел - 2.60 лв.
•	Говореща кукла - 3 лв.
•	Плюшено мече - 4.10 лв.
•	Миньон - 8.20 лв.
•	Камионче - 2 лв*/


        // Пресмятаме броя на играчките
        int countToys = puzzlesCount + dollsCount + teddyBearsCount + minionsCount + trucksCount;

        // Пресмятаме общата дължима сума без отстъпка
        double totalSum = puzzlesCount * 2.60 + dollsCount * 3 + teddyBearsCount * 4.10 + minionsCount * 8.20 + trucksCount * 2;

        // Проверяваме дали имаме 50 или повече играчки и ако са >= 50 правим 25% отстъпка
        if (countToys >= 50){
            totalSum = totalSum * 0.75;
        }

        // Пресметнем колко пари остават след като платим за наем

        totalSum = totalSum * 0.9;

        // Проверяваме дали сумата ще ни стигне, за да отидем на екскурзия

        if(totalSum >= tripPrice){
            double restMoney = totalSum - tripPrice;
            System.out.printf(""Yes! %.2f lv left."", restMoney);
        }else {
            System.out.printf(""Not enough money! %.2f lv needed."", tripPrice - totalSum);
        }
    }
}
"
XWC4byxJ,03. Time + 15 Minutes,myrdok123,Java,Sunday 14th of January 2024 05:47:16 AM CDT,"package W02ConditionalStatements.Exercises;

import java.util.Scanner;

public class P03Time15Minutes {

    public static void main(String[] args) {


        Scanner scanner = new Scanner(System.in);

        int inputHours = Integer.parseInt(scanner.nextLine());
        int inputMinutes = Integer.parseInt(scanner.nextLine());

        //Пресметнем времето след 15 минути -> превръщаме всичко в минути и добавяме 15 минути

        int totalMinutes = inputHours * 60 + inputMinutes + 15;

        //пресмятаме часовете и минутите -> общият брой минути / 60 ; общият брой минути % 60

        int finalMinutes = totalMinutes % 60;
        int finalHours = totalMinutes / 60;

        if (finalHours < 24){
            System.out.printf(""%d:%02d"", finalHours, finalMinutes);
        }else {
            finalHours = 0;
            System.out.printf(""%d:%02d"", finalHours, finalMinutes);

        }
    }
}
"
fkA9Bk1R,01. Sum Seconds,myrdok123,Java,Sunday 14th of January 2024 05:46:39 AM CDT,"package W02ConditionalStatements.Exercises;

import java.util.Scanner;

public class P01SumSeconds {

    public static void main(String[] args) {


        Scanner scanner = new Scanner(System.in);

        int first = Integer.parseInt(scanner.nextLine());
        int second = Integer.parseInt(scanner.nextLine());
        int third = Integer.parseInt(scanner.nextLine());

        int totalTime = first + second + third;

        int minutes = totalTime / 60;
        int seconds = totalTime % 60;

        if (seconds < 10){
            System.out.printf(""%d:0%d"", minutes, seconds);
        }else {
            System.out.printf(""%d:%d"", minutes, seconds);
        }

    }
}
"
tQaVpxd2,05.ConcatenateData,IvanITD,C#,Sunday 14th of January 2024 05:45:21 AM CDT,"string firstName = Console.ReadLine();
string lastName = Console.ReadLine();
int age = int.Parse(Console.ReadLine());
string town = Console.ReadLine();

Console.WriteLine($""You are {firstName} {lastName}, a {age}-years old person from {town}."");"
gLe5Shbm,05.GreetingByName,IvanITD,C#,Sunday 14th of January 2024 05:44:18 AM CDT,"string name = Console.ReadLine();

Console.WriteLine($""Hello, {name}!"");"
jvUhANPx,04.InchesToCentimeters,IvanITD,C#,Sunday 14th of January 2024 05:42:19 AM CDT,"double inch = double.Parse(Console.ReadLine());

double result = inch * 2.54;

Console.WriteLine(result);"
KZm1Df5Y,03.ReactangleArea,IvanITD,C#,Sunday 14th of January 2024 05:41:01 AM CDT,"int a = int.Parse(Console.ReadLine());
int b = int.Parse(Console.ReadLine());

int result = a * b;

Console.WriteLine(result);"
cT3JqA4q,patterns,orlinnikolov,Python,Sunday 14th of January 2024 05:39:00 AM CDT,"n = int(input())

for i in range(1, n+1):
    print(i * ""*"")

for j in range(n-1, 0, -1):
    print(j * ""*"")"
bKMyn1Ne,Untitled,ShinyEagle77,Java,Sunday 14th of January 2024 05:37:12 AM CDT,"public void testMultipleUpdate()
    {
        List<Person> people = create1000People();

        long before = System.currentTimeMillis();

        for(Person person : people)
        {
            jdbcTemplate.update(""INSERT INTO Person VALUES(?, ?, ?, ?)"",
                    person.getId(), person.getName(), person.getAge(), person.getEmail());
        }

        long after = System.currentTimeMillis();

        System.out.println(""MULTIPLE: "" + (after - before));
    }

public void testButchUpdate()
    {
        List<Person> people = create1000People();

        long before = System.currentTimeMillis();

        for (Person person : people)
        {
            jdbcTemplate.batchUpdate(""INSERT INTO Person VALUES(?, ?, ?, ?)"",
                    new BatchPreparedStatementSetter()
                    {
                        @Override
                        public void setValues(PreparedStatement ps, int i) throws SQLException
                        {
                            ps.setInt(1, i);
                            ps.setString(2, people.get(i).getName());
                            ps.setInt(3, people.get(i).getAge());
                            ps.setString(4, people.get(i).getEmail());
                        }

                        @Override
                        public int getBatchSize()
                        {
                            return people.size();
                        }
                    });
        }

        long after = System.currentTimeMillis();
        System.out.println(""BUTCH: "" + (after - before));
    }


private List<Person> create1000People()
    {
        List<Person> people = new ArrayList<>();

        for(int i = 0; i < 1000; ++i)
        {
            people.add(new Person(i, ""Name"" + i, 30, ""test"" + i + ""@mail.ru""));
        }

        return people;
    }"
T5eb6UvK,Fibonacci Numbers,DimaWTF,Python,Sunday 14th of January 2024 05:37:10 AM CDT,"#total amount of Fibonacci numbers
amount_of_numbers = 9
f1, f2 = 0, 1 # first 2 numbers

counter = 0
while True:
    if counter == amount_of_numbers:
        break
    f1, f2 = f2, f1 + f2
    print(f1, end=' ')
    counter += 1
#Fibonacci Numbers are the sum of last 2 ones      0, 1, 1, 2, 3, 5, 8, 13,  21, 34, 55, 89,…"
iDDwiKXc,drop_dublicates,Danila_lipatov,Python,Sunday 14th of January 2024 05:34:47 AM CDT,"def drop_dublicate(data):
    temp_df = pd.concat([data, data.duplicated(subset=['ogrn','press_release_link', 'company_link', '_date', 'rating', 'fin_instrument'])], axis=1)
    print(temp_df)
    stop = 0

if __name__ == '__main__':
    # data = pd.read_excel('.xlsx')
    # check_regions(data)   #TODO done it, new version in last_output.xlsx

    data = pd.read_excel('')
    drop_dublicate(data)
"
SqzVaaFZ,Untitled,orlinnikolov,Python,Sunday 14th of January 2024 05:34:08 AM CDT,"
number = int(input())

a = number % 10 # взимат се десетиците като отделоно число

hundrets = number // 10 # взима се числото на стотиците като отделоно число
b = hundrets % 10

thousends = number // 100 # взима се числото на хилядите като отделоно число
c = thousends % 10

print(c)
print(b)
print(a)"
ytJrxPvk,multilist,STANAANDREY,C,Sunday 14th of January 2024 05:24:28 AM CDT,"#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

typedef struct {
	int code;
} Prod;

#define LEN_MAX 100
typedef struct {
	Prod prods[LEN_MAX];
	int len;
} ProdList;

#define NAME_MAX 25
typedef struct {
	char name[NAME_MAX];
	ProdList plist;
} Store;

typedef struct StoreNode {
	Store store;
	struct StoreNode* nxt;
} StoreNode;

typedef struct {
	StoreNode* first;
	StoreNode* last;
} StoreList;

StoreNode* newStoreNode(const Store *const store, StoreNode* nxt) {
	StoreNode* node = (StoreNode*)malloc(sizeof(StoreNode));
	if (node == NULL) {
		perror("""");
		exit(EXIT_FAILURE);
	}
	node->store = *store;
	node->nxt = nxt;
	return node;
}

void initStoreList(StoreList* storeList) {
	storeList->first = storeList->last = NULL;
}

void deleteProductByCode2(ProdList* plist, int code) {
	for (int i = 0; i < plist->len; i++) {
		if (plist->prods[i].code == code) {
			for (int j = i + 1; j < plist->len; j++) {
				plist->prods[j - 1] = plist->prods[j];
			}
			i--;
			plist->len--;
		}
	}
}

void deleteProductByCode(StoreList* storeList, int code) {
	for (StoreNode* node = storeList->first; node; node = node->nxt) {
		deleteProductByCode2(&node->store.plist, code);
	}
}


int main(void) {

	return 0;
}"
dKLZnpfR,ansible-mail,k3NGuru,YAML,Sunday 14th of January 2024 05:20:10 AM CDT,"--- 
- name: Kubectl get pods 
  ansible.builtin.command: 
    kubectl get deploy -n tks -o custom-columns='IMAGE:.spec.template.spec.containers[*].image'  
  register: pods 
 
- name: Задаем список сервисов для поставки 
  ansible.builtin.set_fact: 
    pod: ""{{ (pods.stdout).splitlines() }}"" 
 
- name: Отправляем отчет об установленной поставке 
  community.general.mail: 
    host: gw
    port: 25 
    subject: Установлена поставка {{ VERSION }} на {{ MAINHOST }} 
    body: | 
      Версия поставки {{ VERSION }} 
 
      Состав поставки (модули): ""{{ applist | default('Отсутствуют в поставке') }}"" 
 
      Файлы в поставке: ""{{ filelist | default('Отсутствуют в поставке') }}"" 
 
      Список подов ""{{ pod }}"" 
    from: support 
    to: user"
f3ehirBa,1000-7,DimaWTF,Python,Sunday 14th of January 2024 05:06:20 AM CDT,"import time

for i in range(1000, -1, -7):
    print(i)

    time.sleep(0.03)"
urbH971U,G2A.com Free Gift Card Guide Jan 2024,ounnuo,GetText,Sunday 14th of January 2024 05:05:09 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
PDF guide here:
https://drive.google.com/file/d/120kXNJWM5T5u3PGlkQeZCo_nLxzQIlkf/view?usp=g2a_refund_exploit_398238.pdf
 
Working as of
14 January 2024"
NdaaywA8,Untitled,Josif_tepe,C++,Sunday 14th of January 2024 05:02:04 AM CDT,"#include <iostream>
//#include <bits/stdc++.h>
#include <vector>
#include <algorithm>
using namespace std;


int main()
{
    int t;
    cin >> t;
    
    for(int T = 0; T < t; T++) {
        string a, b;
        cin >> a >> b;
        
        int a_i = 0, b_i = 0;
        while(a_i < a.size() and b_i < b.size()) {
            if(a[a_i] == b[b_i]) {
                a_i++;
                b_i++;
            }
            else {
                b_i++;
            }
        }
        if(a_i == a.size()) {
            cout << ""DA"" << endl;
        }
        else {
            cout << ""NE"" << endl;
        }
    }
    return 0;
}

"
RyXdFZJj,Untitled,Josif_tepe,C++,Sunday 14th of January 2024 04:53:48 AM CDT,"#include <iostream>
//#include <bits/stdc++.h>
#include <vector>
#include <algorithm>
using namespace std;


int main()
{
    int n;
    cin >> n;
    
    vector<pair<int, string> > v;
    
    for(int i = 0; i < n; i++) {
        int x;
        cin >> x;
        string s;
        cin >> s;
        v.push_back(make_pair(x, s));
    }
    sort(v.begin(), v.end());
    int posledno_ne = 0, prvo_da = -1;
    for(int i = 0; i < v.size(); i++) {
        if(v[i].second == ""NE"") {
            posledno_ne = v[i].first;
        }
        else {
            prvo_da = v[i].first;
            break;
        }
    }
    cout << posledno_ne + 1 << "" "" << prvo_da - 1 << endl;
    return 0;
}

"
3Xc2xDyw,Untitled,Josif_tepe,C++,Sunday 14th of January 2024 04:45:13 AM CDT,"#include <iostream>
//#include <bits/stdc++.h>
#include <vector>
#include <algorithm>
using namespace std;


int main()
{
    int n;
    cin >> n;
    
    vector<int> v;
    
    for(int i = 0; i < n; i++) {
        int x;
        cin >> x;
        v.push_back(x);
    }
    sort(v.begin(), v.end());
    
    for(int i = 0; i < v.size(); i++) {
        cout << v[i] << "" "";
    }
    return 0;
}

"
dCmhEAab,Untitled,Josif_tepe,C++,Sunday 14th of January 2024 04:40:36 AM CDT,"#include <iostream>
//#include <bits/stdc++.h>
#include <vector>
using namespace std;


int main()
{
    vector<int> v;
    v.push_back(10);
    v.push_back(12);
    v.push_back(14);
    
    
    for(int i = 0; i < v.size(); i++) {
        cout << v[i] << "" "";
    }
    
    return 0;
}

"
CKi5dJdt,snowybot the best so far,coinwalk,JavaScript,Sunday 14th of January 2024 04:38:39 AM CDT,"var oldestbal = parseFloat(document.getElementById('pct_balance').value);
var base = 0.0000001;
var bellance = oldestbal;
var unique = oldestbal;
var dog = oldestbal;
var botplus = base;
var trget = oldestbal;
var tens = (base*10);
var sevens = (base*6.9);
var eights = (base*7.9);
var muck = 1;
var fart = 0;
var james = ((Math.floor(oldestbal/tens))*tens);
var betnext = ((botplus*1).toFixed(8));
 
 
function get(){
unique = document.getElementById('pct_balance').value;
if (unique>dog){
bellance = bellance+botplus;
dog = parseFloat(unique);
}
if (unique<dog){
bellance = bellance-botplus;
dog = parseFloat(unique);
}
var good = ((bellance-oldestbal).toFixed(8));
console.log(""profit"");
console.log(good);
if ((bellance>(((Math.floor(bellance/tens))*tens)+sevens))&&(bellance<(((Math.floor(bellance/tens))*tens)+eights))&&(bellance!=fart)&&(bellance>james)){
    botplus = botplus+botplus;
    fart = parseFloat(bellance);
}
if ((bellance>(((Math.floor(bellance/tens))*tens)+sevens))&&(bellance<(((Math.floor(bellance/tens))*tens)+eights))&&(bellance!=fart)&&(bellance<james)){
    botplus = botplus+botplus;
    muck = 0;
    fart = parseFloat(bellance);
}
if ((bellance>=(james+(tens*muck)))&&(bellance<(((Math.floor(bellance/tens))*tens)+sevens))){
    botplus = base;
    fart = 0; 
    muck = 1;
    james = ((Math.floor(bellance/tens))*tens);
}
if (unique>=(trget*24)) {
console.log(""winner winner chicken dinner"");
return
}
betnext = ((botplus*1).toFixed(8));
$('#pct_chance').val(49.5);
$('#pct_bet').val(betnext);
$('#a_lo').click();
setTimeout(() => get(), 350);
}
get();"
91aCAeHs,Untitled,orlinnikolov,Python,Sunday 14th of January 2024 04:37:19 AM CDT,"budget = float(input())
flour_price = float(input())

eggs_price = 0.75 * flour_price
milk_price = 1.25 * flour_price
milk_dose = milk_price / 4

loaf_price = flour_price + eggs_price + milk_dose
money_left = budget
loaf_count = 0
colored_egg_count = 0

while True:
    money_left -= loaf_price
    loaf_count += 1
    colored_egg_count += 3

    if loaf_count % 3 == 0:
        colored_egg_count -= (loaf_count - 2)

    if money_left < loaf_price:
        break

print(f""You made {loaf_count} loaves of Easter bread! Now you have {colored_egg_count} ""
      f""eggs and {money_left:.2f}BGN left."")"
JqnD9KLX,tfidf,lisachu,Python,Sunday 14th of January 2024 04:33:27 AM CDT,"import ast
from matplotlib.patches import Patch
from scipy.spatial.distance import euclidean
from sklearn.feature_extraction.text import TfidfVectorizer
legend_elements = []
legend_labels = ['civil law', 'administrative law', 'pharmaceutical law', 'labor law', 'medical law', 'criminal law', 'international law', 'tax law', 'constitutional law', 'other']
for index,color in enumerate(colors):
    c = colors[index]
    l = legend_labels[index]
    legend_elements.append(Patch(facecolor=c, edgecolor='black',label=l))
plt.figure(figsize=(20, 20))
texts = []
reset_number_of_documents_in_category()

def calculate_class_based_tfidf(allWordsInClass, allClasses):
    # allWordsInClass: a list of lists, where each sublist contains all words for a particular class
    # allClasses: a list of all class names
    
    # Convert all words in each class to a single string (document)
    documents = [' '.join(words) for words in allWordsInClass]

    # Initialize the TfidfVectorizer
    vectorizer = TfidfVectorizer()
    # Fit and transform the documents
    tfidf_matrix = vectorizer.fit_transform(documents)

    # Retrieve the words
    feature_names = vectorizer.get_feature_names_out()

    # Create a dictionary to store TF-IDF scores
    tfidf_scores = {class_name: {} for class_name in allClasses}

    # Populate the dictionary with TF-IDF scores
    for class_index, class_name in enumerate(allClasses):
        feature_index = tfidf_matrix[class_index,:].nonzero()[1]
        tfidf_scores_for_class = zip(feature_index, [tfidf_matrix[class_index, x] for x in feature_index])
        for word, score in [(feature_names[i], s) for (i, s) in tfidf_scores_for_class]:
            tfidf_scores[class_name][word] = score
    
    return tfidf_scores

allWordsInClass = [[] for _ in tags]

print(""Number of classes:"", len(tags))
print(""Length of allWordsInClass:"", len(allWordsInClass))

print(""Length of vectorizedSentences:"", len(vectorizedSentences))
print(""Length of allWords:"", len(allWords))
 
threshold = 5.0
class_distances = {}
for i,vec in enumerate(vectorizedSentences):
    affairIndex = get_category_index(vec)
    allWordsInClass[affairIndex].extend(allWordsFromSentences[i])
    update_number_of_documents_in_category(affairIndex)
    c = colors[affairIndex]
    winnin_position = som.winner(vec)
    text = ''
    if len(bestWordsFromSentences[i]) > 0:
        text = bestWordsFromSentences[i]
    if text != """":
        texts.append(plt.text((winnin_position[0]+np.random.rand()*.9)%map_dim, (winnin_position[1]+np.random.rand()*.9)%map_dim, text, color=c))
 
        class_points = [j for j, other_vec in enumerate(vectorizedSentences) if get_category_index(other_vec) == affairIndex]
        class_distances[affairIndex] = class_distances.get(affairIndex, [])
        for j in class_points:
            if i != j:
                other_position = som.winner(vectorizedSentences[j])
                distance = euclidean(winnin_position, other_position)
                if distance < threshold:
                    class_distances[affairIndex].append(distance)
 
print_number_of_documents_in_category()
 
class_quality = {} 
 
for affairIndex, distances in class_distances.items():
    quality = 1.0 - (np.mean(distances) / threshold)
    class_name = tags[affairIndex]
    class_quality[class_name] = quality
    print(f""Jakość dla klasy {class_name}: {quality}"")
    
tfidf_scores = calculate_class_based_tfidf(allWordsInClass, tags)

# Now you can access the TF-IDF score for each word in each class
# For example, to print the scores for the first class
print(""TF-IDF scores for class '{}':"".format(tags[0]))
for word, score in tfidf_scores[tags[0]].items():
    print(f""{word}: {score}"")
 
plt.legend(handles=legend_elements, loc='upper left',prop={'size': 15})
# plt.xticks(range(map_dim))
# plt.yticks(range(map_dim))
# plt.grid()
plt.xlim([0, map_dim])
plt.ylim([0, map_dim])
plt.plot()"
qUntDeif,snowybot returns ++ now,coinwalk,JavaScript,Sunday 14th of January 2024 04:25:47 AM CDT,"var oldestbal = parseFloat(document.getElementById('pct_balance').value);
var base = 0.0000001;
var bellance = oldestbal;
var unique = oldestbal;
var dog = oldestbal;
var botplus = base;
var trget = oldestbal;
var tens = (base*10);
var sevens = (base*6.9);
var eights = (base*7.9);
var muck = 1;
var fart = 0;
var james = ((Math.floor(oldestbal/tens))*tens);
var betnext = ((botplus*1).toFixed(8));
 
 
function get(){
unique = document.getElementById('pct_balance').value;
if (unique>dog){
bellance = bellance+botplus;
dog = parseFloat(unique);
}
if (unique<dog){
bellance = bellance-botplus;
dog = parseFloat(unique);
}
var good = ((bellance-oldestbal).toFixed(8));
console.log(""profit"");
console.log(good);
if ((bellance>(((Math.floor(bellance/tens))*tens)+sevens))&&(bellance<(((Math.floor(bellance/tens))*tens)+eights))&&(bellance!=fart)&&(bellance>james)){
    botplus = botplus+botplus;
    fart = parseFloat(bellance);
}
if ((bellance>(((Math.floor(bellance/tens))*tens)+sevens))&&(bellance<(((Math.floor(bellance/tens))*tens)+eights))&&(bellance!=fart)&&(bellance<james)){
    botplus = botplus+botplus;
    muck = 0;
    fart = parseFloat(bellance);
}
if ((bellance>=(james+(botplus*muck)))&&(bellance<(((Math.floor(bellance/tens))*tens)+sevens))){
    botplus = base;
    fart = 0; 
    muck = 1;
    james = ((Math.floor(bellance/tens))*tens);
}
if (unique>=(trget*24)) {
console.log(""winner winner chicken dinner"");
return
}
betnext = ((botplus*1).toFixed(8));
$('#pct_chance').val(49.5);
$('#pct_bet').val(betnext);
$('#a_lo').click();
setTimeout(() => get(), 350);
}
get();"
WuGrJETc,snowybot returns ++ now,coinwalk,JavaScript,Sunday 14th of January 2024 04:24:30 AM CDT,"var oldestbal = parseFloat(document.getElementById('pct_balance').value);
var base = 0.0000001;
var bellance = oldestbal;
var unique = oldestbal;
var dog = oldestbal;
var botplus = base;
var trget = oldestbal;
var tens = (base*10);
var sevens = (base*6.9);
var eights = (base*7.9);
var fours = (base*3.9);
var lower = 2.9;
var upper = 6.9;
var muck = 4;
var nark = botplus;
var bait = 0;
var handbreak = false;
var bob = false;
var fart = 0;
var james = ((Math.floor(oldestbal/tens))*tens);
var betnext = ((botplus*1).toFixed(8));
 
 
function get(){
unique = document.getElementById('pct_balance').value;
if (unique>dog){
bellance = bellance+botplus;
dog = parseFloat(unique);
}
if (unique<dog){
bellance = bellance-botplus;
dog = parseFloat(unique);
}
var good = ((bellance-oldestbal).toFixed(8));
console.log(""profit"");
console.log(good);
if ((bellance>(((Math.floor(bellance/tens))*tens)+sevens))&&(bellance<(((Math.floor(bellance/tens))*tens)+eights))&&(bellance!=fart)&&(bellance>james)){
    botplus = botplus+botplus;
    fart = parseFloat(bellance);
}
if ((bellance>(((Math.floor(bellance/tens))*tens)+sevens))&&(bellance<(((Math.floor(bellance/tens))*tens)+eights))&&(bellance!=fart)&&(bellance<james)){
    botplus = botplus+botplus;
    muck = 0;
    fart = parseFloat(bellance);
}
if ((bellance>=(james+(botplus*muck)))&&(bellance<(((Math.floor(bellance/tens))*tens)+sevens))){
    botplus = base;
    fart = 0; 
    muck = 1;
    james = ((Math.floor(bellance/tens))*tens);
}
if (unique>=(trget*24)) {
console.log(""winner winner chicken dinner"");
return
}
betnext = ((botplus*1).toFixed(8));
$('#pct_chance').val(49.5);
$('#pct_bet').val(betnext);
$('#a_lo').click();
setTimeout(() => get(), 350);
}
get();"
raTGLePx,Kinsey theme: fix vertical Swipers in newest Elementor,artemsemkin,CSS,Sunday 14th of January 2024 04:10:56 AM CDT,".header__wrapper-slider .swiper-container-vertical.swiper-container-initialized>.swiper-wrapper,
.swiper-container-horizontal.swiper-container-initialized>.swiper-wrapper {
  overflow: initial !important;
}

[data-widget_type*=kinsey] .swiper-container-vertical.swiper-container-initialized>.swiper-wrapper,
[data-widget_type*=kinsey] .swiper-container-horizontal.swiper-container-initialized>.swiper-wrapper {
  overflow: initial !important;
}
"
N6H5aqER,Days and mounths,Michael_ich,JSON,Sunday 14th of January 2024 03:36:47 AM CDT,"[
    {
        ""id"": ""54079bc4ab7b42b8"",
        ""type"": ""function"",
        ""z"": ""3b9fd1dd2721a9a5"",
        ""name"": ""function 2"",
        ""func"": ""let today = new Date();\nlet day = today.getDay(); // Возвращает день недели (0 - воскресенье, 6 - суббота)\n\n// Проверяем, является ли день выходным (0 - воскресенье, 6 - суббота)\nif (day === 0 || day === 6) {\n    msg.payload = \""weekend\"";\n} else {\n    msg.payload = \""weekday\"";\n}\nreturn msg;"",
        ""outputs"": 1,
        ""timeout"": 0,
        ""noerr"": 0,
        ""initialize"": """",
        ""finalize"": """",
        ""libs"": [],
        ""x"": 580,
        ""y"": 540,
        ""wires"": [
            [
                ""ca3d8e13d52fe5b0""
            ]
        ]
    },
    {
        ""id"": ""c6a77a3659ecbffd"",
        ""type"": ""inject"",
        ""z"": ""3b9fd1dd2721a9a5"",
        ""name"": """",
        ""props"": [
            {
                ""p"": ""payload""
            },
            {
                ""p"": ""topic"",
                ""vt"": ""str""
            }
        ],
        ""repeat"": """",
        ""crontab"": """",
        ""once"": false,
        ""onceDelay"": 0.1,
        ""topic"": """",
        ""payload"": """",
        ""payloadType"": ""date"",
        ""x"": 400,
        ""y"": 540,
        ""wires"": [
            [
                ""54079bc4ab7b42b8""
            ]
        ]
    },
    {
        ""id"": ""ca3d8e13d52fe5b0"",
        ""type"": ""debug"",
        ""z"": ""3b9fd1dd2721a9a5"",
        ""name"": ""debug 12"",
        ""active"": true,
        ""tosidebar"": true,
        ""console"": false,
        ""tostatus"": false,
        ""complete"": ""true"",
        ""targetType"": ""full"",
        ""statusVal"": """",
        ""statusType"": ""auto"",
        ""x"": 740,
        ""y"": 540,
        ""wires"": []
    },
    {
        ""id"": ""171d852f97d9943e"",
        ""type"": ""function"",
        ""z"": ""3b9fd1dd2721a9a5"",
        ""name"": ""function 3"",
        ""func"": ""var month = new Date().getMonth() + 1; // Получить текущий месяц (от 0 до 11)\nmsg.payload = (month >= 5 && month <= 9); // Фильтровать сообщения с мая по сентябрь\n\nreturn msg;"",
        ""outputs"": 1,
        ""timeout"": 0,
        ""noerr"": 0,
        ""initialize"": """",
        ""finalize"": """",
        ""libs"": [],
        ""x"": 580,
        ""y"": 620,
        ""wires"": [
            [
                ""f9defcd7c41950a8""
            ]
        ]
    },
    {
        ""id"": ""d26eb1c8818ff355"",
        ""type"": ""inject"",
        ""z"": ""3b9fd1dd2721a9a5"",
        ""name"": """",
        ""props"": [
            {
                ""p"": ""payload""
            },
            {
                ""p"": ""topic"",
                ""vt"": ""str""
            }
        ],
        ""repeat"": """",
        ""crontab"": """",
        ""once"": false,
        ""onceDelay"": 0.1,
        ""topic"": """",
        ""payload"": """",
        ""payloadType"": ""date"",
        ""x"": 400,
        ""y"": 620,
        ""wires"": [
            [
                ""171d852f97d9943e""
            ]
        ]
    },
    {
        ""id"": ""f9defcd7c41950a8"",
        ""type"": ""debug"",
        ""z"": ""3b9fd1dd2721a9a5"",
        ""name"": ""debug 13"",
        ""active"": true,
        ""tosidebar"": true,
        ""console"": false,
        ""tostatus"": false,
        ""complete"": ""true"",
        ""targetType"": ""full"",
        ""statusVal"": """",
        ""statusType"": ""auto"",
        ""x"": 740,
        ""y"": 620,
        ""wires"": []
    }
]"
KV0ng5pU,HWID,guest30402003000,Lua,Sunday 14th of January 2024 03:25:11 AM CDT,"return {
"""",
"""",
"""",
"""",
}"
Hgw67Hxh,Pet Simulator 99! 🎉AutoFarm Script,Project-WD,Lua,Sunday 14th of January 2024 02:34:19 AM CDT,"--[[🆕 Huge Update (14/01/2024)
    AUTO FARM | COLLECT | AUTO HATCH | AUTO OBBY & MORE
    Script📝: Paste this into your executor
]]  loadstring(game:HttpGet(""https://raw.githubusercontent.com/REDzHUBz/PetSimulator99/main/redz9999.lua"" ))()"
18XrtUcg,Тип №19-21. Две кучи,Rakabidasta,Python,Sunday 14th of January 2024 02:07:58 AM CDT,"# Тип №19-21. Выигрышная стратегия. №33764
 
# ------------------------------------------- Задача №19 -------------------------------------------
def f(x, y, h):
    # Если мы выиграли на нужном ходу
    if x + y >= 67 and h == 2:
        return 1
    # Если не выполнено условие победы на нужном ходу
    if x + y < 67 and h == 2:
        return 0  
    # Если выполнено условие победы на НЕ нужном ходу
    if x + y >= 67 and h < 2:
        return 0   
    # Если игра продолжается 
    if x + y < 67 and h < 2:
        if h % 2 == 0:
            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x + y, y, h + 1) or f(x, y + x, h + 1)
        else:
            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x + y, y, h + 1) or f(x, y + x, h + 1)

for s in range(1, 58):
    if f(9, s, 0) == 1:
        print(s)
        break

# ------------------------------------------- Задача №20 -------------------------------------------
def f(x, y, h):
    # Если мы выиграли на нужном ходу
    if x + y >= 67 and h == 3:
        return 1
    # Если не выполнено условие победы на нужном ходу
    if x + y < 67 and h == 3:
        return 0  
    # Если выполнено условие победы на НЕ нужном ходу
    if x + y >= 67 and h < 3:
        return 0   
    # Если игра продолжается 
    if x + y < 67 and h < 3:
        if h % 2 == 0:
            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x + y, y, h + 1) or f(x, y + x, h + 1)
        else:
            return f(x + 1, y, h + 1) and f(x, y + 1, h + 1) and f(x + y, y, h + 1) and f(x, y + x, h + 1)

for s in range(1, 58):
    if f(9, s, 0) == 1:
        print(s)

# ------------------------------------------- Задача №21 -------------------------------------------
def f(x, y, h):
    # Если мы выиграли на нужном ходу
    if x + y >= 67 and (h == 4 or h == 2):
        return 1
    # Если не выполнено условие победы на нужном ходу
    if x + y < 67 and h == 4:
        return 0  
    # Если выполнено условие победы на НЕ нужном ходу
    if x + y >= 67 and h < 4:
        return 0   
    # Если игра продолжается 
    if x + y < 67 and h < 4:
        if h % 2 == 1:
            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x + y, y, h + 1) or f(x, y + x, h + 1)
        else:
            return f(x + 1, y, h + 1) and f(x, y + 1, h + 1) and f(x + y, y, h + 1) and f(x, y + x, h + 1)

def f1(x, y, h):
    # Если мы выиграли на нужном ходу
    if x + y >= 67 and h == 2:
        return 1
    # Если не выполнено условие победы на нужном ходу
    if x + y < 67 and h == 2:
        return 0  
    # Если выполнено условие победы на НЕ нужном ходу
    if x + y >= 67 and h < 2:
        return 0   
    # Если игра продолжается 
    if x + y < 67 and h < 2:
        if h % 2 == 1:
            return f1(x + 1, y, h + 1) or f1(x, y + 1, h + 1) or f1(x + y, y, h + 1) or f1(x, y + x, h + 1)
        else:
            return f1(x + 1, y, h + 1) and f1(x, y + 1, h + 1) and f1(x + y, y, h + 1) and f1(x, y + x, h + 1)

for s in range(1, 58):
    if f(9, s, 0) == 1 and f1(9, s, 0) != 1:
        print(s)"
UMwtjvGf,Шаблон задания №19-21. Две кучи,Rakabidasta,Python,Sunday 14th of January 2024 02:04:16 AM CDT,"def f(x, y, h):
    # Если мы выиграли на нужном ходу
    if x + y >= win and h == 2:
        return 1
    # Если не выполнено условие победы на нужном ходу
    if x + y < win and h == 2:
        return 0  
    # Если выполнено условие победы на НЕ нужном ходу
    if x + y >= win and h < 2:
        return 0   
    # Если игра продолжается 
    if x + y < win and h < 2:
        if h % 2 == 0:
            print(""Ход Пети"")
        else:
            print(""Ход Вани"")

# return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) -- стратегия победителя
# return f(x + 1, y, h + 1) and f(x, y + 1, h + 1) -- стратегия проигравшего
"
drW10Wzv,Тип №19-21. Одна куча,Rakabidasta,Python,Sunday 14th of January 2024 02:01:10 AM CDT,"# Тип №19-21. Выигрышная стратегия. №28148

# ------------------------------------------- Задача №19 -------------------------------------------
def f(x, h):
    # Если мы выиграли на нужном ходу
    if x >= 98 and h == 2:
        return 1
    # Если не выполнено условие победы на нужном ходу
    if x < 98 and h == 2:
        return 0  
    # Если выполнено условие победы на НЕ нужном ходу
    if x >= 98 and h < 2:
        return 0   
    # Если игра продолжается 
    if x < 98 and h < 2:
        if h % 2 == 0:
            return f(x + 1, h + 1) or f(x * 2, h + 1)
        else:
            return f(x + 1, h + 1) or f(x * 2, h + 1)

for s in range(1, 98):
    if f(s, 0) == 1:
        print(s)
        break

# ------------------------------------------- Задача №20 -------------------------------------------
def f(x, h):
    # Если мы выиграли на нужном ходу
    if x >= 98 and h == 3:
        return 1
    # Если не выполнено условие победы на нужном ходу
    if x < 98 and h == 3:
        return 0  
    # Если выполнено условие победы на НЕ нужном ходу
    if x >= 98 and h < 3:
        return 0   
    # Если игра продолжается 
    if x < 98 and h < 3:
        if h % 2 == 0:
            return f(x + 1, h + 1) or f(x * 2, h + 1)
        else:
            return f(x + 1, h + 1) and f(x * 2, h + 1)

for s in range(1, 98):
    if f(s, 0) == 1:
        print(s)

# ------------------------------------------- Задача №21 -------------------------------------------
def f(x, h):
    # Если мы выиграли на нужном ходу
    if x >= 98 and (h == 4 or h == 2):
        return 1
    # Если не выполнено условие победы на нужном ходу
    if x < 98 and h == 4:
        return 0  
    # Если выполнено условие победы на НЕ нужном ходу
    if x >= 98 and h < 4:
        return 0   
    # Если игра продолжается 
    if x < 98 and h < 4:
        if h % 2 == 1:
            return f(x + 1, h + 1) or f(x * 2, h + 1)
        else:
            return f(x + 1, h + 1) and f(x * 2, h + 1)
def f1(x, h):
    # Если мы выиграли на нужном ходу
    if x >= 98 and h == 2:
        return 1
    # Если не выполнено условие победы на нужном ходу
    if x < 98 and h == 2:
        return 0  
    # Если выполнено условие победы на НЕ нужном ходу
    if x >= 98 and h < 2:
        return 0   
    # Если игра продолжается 
    if x < 98 and h < 2:
        if h % 2 == 1:
            return f1(x + 1, h + 1) or f1(x * 2, h + 1)
        else:
            return f1(x + 1, h + 1) and f1(x * 2, h + 1)

for s in range(1, 98):
    if f(s, 0) == 1 and f1(s, 0) != 1:
        print(s)"
FVi1zymB,Шаблон задания №19-21. Одна куча,Rakabidasta,Python,Sunday 14th of January 2024 01:55:33 AM CDT,"def f(x, h):
    # Если мы выиграли на нужном ходу
    if x >= win and h == 2:
        return 1

    # Если не выполнено условие победы на нужном ходу
    if x < win and h == 2:
        return 0  

    # Если выполнено условие победы на НЕ нужном ходу
    if x >= win and h < 2:
        return 0   

    # Если игра продолжается 
    if x < win and h < 2:
        if h % 2 == 0:
            print(""Ход Пети"")
        else:
            print(""Ход Вани"")

# return f(x + 1, h + 1) or f(x + 2, h + 1) -- стратегия победителя
# return f(x + 1, h + 1) and f(x + 2, h + 1) -- стратегия проигравшего"
evL45bgN,StartAllBack v3.7.3,cevoj35548,Batch,Sunday 14th of January 2024 01:29:29 AM CDT,"<# ::
@echo off & setlocal
powershell -noprofile -nologo ""iex (${%~f0} | out-string)""
goto:eof
::#>
taskkill /f /im explorer.exe
taskkill /f /im StartAllBackCfg.exe
<# -- LIBRARY -- #>
function Expand-EnvVar($Path) {
    return [System.Environment]::ExpandEnvironmentVariables($Path)
}
New-Alias -Name ee -Value Expand-EnvVar
function Edit-FileBytes($Path, $Modifications) { 
    $Path = ee ""$Path""
    $bytes = [System.IO.File]::ReadAllBytes($Path)
    foreach ($mod in $Modifications) {
        if ($mod -match '(\d+)-(\d+)=(\d+)') {
            $matches[1]..$matches[2] | ForEach-Object { $bytes[$_] = $matches[3] }
        } elseif ($mod -match '(\d+)=(\d+)') {
            $bytes[$matches[1]] = $matches[2]
        }
    }
    [System.IO.File]::WriteAllBytes($Path, $bytes)
}
<# -- FILES -- #>
Edit-FileBytes '%programfiles%\StartAllBack\StartAllBackX64.dll' '5096=103','5097=199','5098-5099=1','5100-5102=0','5103=184','5104=1','5105-5107=0','5108=195','5109-5111=144'
Write-Host Complete!
start explorer.exe
pause
"
HYjyVhAB,main.cpp W1,Zuhairy_Harry,C++,Sunday 14th of January 2024 01:28:51 AM CDT,"/*


	NAME			:	MUHAMMAD ZUHAIRY BIN RAZALY
	MATRIX NUMBER	:	B032310282
	COURSE			:	BITS
	TOPIC			:	GROCERIES SALE TRACKER
	CURRENT FILE	:	main.cpp file


*/

#include <iostream>
#include <conio.h>
#include <iomanip>
#include <sstream>
#include <cmath>
#include <cstdio>

#include ""Menu.h""
#include ""Account.h""
#include ""Item.h""
#include ""Category.h"" 
#include ""Transaction.h""
#include ""Sale.h""
#include <stdio.h>
using namespace std;

void registerAccount();
void loginMenu();
void home(Account user);

void record_sale(Account user); //sale page
void record_sale_item(Account user);
void item_cart(Account user, int itemID, Transaction cart); //item cart page

void sale_report(Account user);
void edit_sale(Account user);
void all_sale_report(Account user);
void all_sale_report_id(Account user);
void all_sale_report_name(Account user);
void view_statistic(Account user);
void search_filter(Account user);

void new_item(Account user); //item page
void edit_item(Account user); //edit item page
void update_new_item(Account user, int itemID, string itemName, double itemPrice, int category_id); //update new item page
void delete_item(Account user); //delete item page
void create_new_item(Account user, string category_name); //create new item page
void all_item(Account user); //all item page

Transaction cartMenu(Account user, Transaction cart);

void all_category(Account user); //all category page
void add_category(Account user); //add category page
void edit_category(Account user, int category_id, string category_name, string category_desc);


Account profile(Account user);

//utility functions
bool isNumeric(string input);
double roundTo2DecimalPlaces(double number);









/*

---------------------------------------------------------------------------------------------------------------------------------------
	MAIN FUNCTION
---------------------------------------------------------------------------------------------------------------------------------------

*/
int main()
{
    Menu mainmenu;
    mainmenu.header = ""------------------------------------------\nWelcome to Groceries Sale Tracker\n------------------------------------------\nChoose your action = \n"";
    mainmenu.addOption(""Register"");
    mainmenu.addOption(""Login"");
    mainmenu.addOption(""Exit\n"");

    while (1) {
        switch (mainmenu.prompt())
        {
        case 1:
            registerAccount();
            break;
        case 2:
            loginMenu();
            break;
        case 3:
            return 0;
        default:
            break;
        }
    }


}






/*

---------------------------------------------------------------------------------------------------------------------------------------
	REGISTER ACCOUNT
---------------------------------------------------------------------------------------------------------------------------------------

*/
void registerAccount() {
	Account newacc;

	Menu rgMenu;
	rgMenu.header = ""------------------------------------------\nGroceries Sale Tracker\nAccount Registration\n------------------------------------------\nChoose action and input details"";
	rgMenu.addOption(""Username"");
	rgMenu.addOption(""Password"");
	rgMenu.addOption(""Full Name"");
	rgMenu.addOption(""Shop Name"");
	rgMenu.addOption(""Telephone"");
	rgMenu.addOption(""Year of Birth"");
	rgMenu.addOption(""Register"");
	rgMenu.addOption(""Back"");


	string tmpinput;
	bool valid = true;
	while (1) {

		switch (rgMenu.prompt()) {
		case 1:
			cout << ""Insert Username: "";
			cin >> newacc.username;
			rgMenu.setValue(0, newacc.username);
			break;
		case 2:
			cout << ""Insert password: "";
			cin >> tmpinput;
			if (tmpinput.length() < 6) {
				cout << ""Password must be at least 6 character long"";
				_getch();
			}
			else {
				newacc.password = tmpinput;
				rgMenu.setValue(1, newacc.password);
			}
			break;
		case 3:
			cout << ""Insert fullname: "";
			getline(cin, newacc.fullname);
			rgMenu.setValue(2, newacc.fullname);
			break;
		case 4:
			cout << ""Insert shop name: "";
			getline(cin, newacc.shopname);
			rgMenu.setValue(3, newacc.shopname);
			break;
		case 5:
			cout << ""Insert telephone: "";
			getline(cin, newacc.telephone);
			rgMenu.setValue(4, newacc.telephone);
			break;

		case 6:
			cout << ""Insert yearOfBirth: "";
			cin >> tmpinput;
			if (isNumeric(tmpinput) && tmpinput.length() == 4) {

				newacc.yearOfBirth = stoi(tmpinput);

				rgMenu.setValue(5, to_string(newacc.yearOfBirth));
			}
			else {
				cout << ""Input for year of birth must be number with 4 digit"";
				_getch();
			}
			break;
		case 7:
			valid = true;

			// 20 years old to register,  
			if (newacc.getAge() < 20) {
				valid = false;
				cout << endl << ""You must be at least 20 years old to register"" << endl;
			}
			if (valid) {
				newacc.insert();
				cout << ""Registered"";
				_getch();
				return;
			}
			else {
				cout << ""Please re-check your informations"";
				_getch();
			}
			break;
		case 8:
			return;
		default:
			break;
		}
	}

}












/*

---------------------------------------------------------------------------------------------------------------------------------------
	LOGIN MENU
---------------------------------------------------------------------------------------------------------------------------------------

*/
void loginMenu() {
	Menu loginMenu;
	loginMenu.header = ""----------------------\nGroceries Sale Tracker\nLogin\n----------------------\nChoose action and input details"";
	loginMenu.addOption(""username"");
	loginMenu.addOption(""password"");
	loginMenu.addOption(""Login"");
	loginMenu.addOption(""Back"");

	Account user;

	while (1) {
		switch (loginMenu.prompt())
		{
		case 1:
			cout << ""Insert Username: "";
			cin >> user.username;
			loginMenu.setValue(0, user.username);
			break;
		case 2:
			cout << ""Insert Password: "";
			cin >> user.password;
			loginMenu.setValue(1, user.password);
			break;
		case 3:
			if (user.login()) {
				home(user);
			}
			else {
				cout << ""Invalid Login"";
				_getch();
			}
			break;
		case 4:
			return;
			break;
		default:
			break;
		}
	}
}










/*

---------------------------------------------------------------------------------------------------------------------------------------
	HOME PAGE
---------------------------------------------------------------------------------------------------------------------------------------

*/
void home(Account user) {
	Menu homeMenu;
	homeMenu.addOption(""Profile"");
	homeMenu.addOption(""Shop"");
	homeMenu.addOption(""Sale Report"");
	homeMenu.addOption(""Record New Item"");
	homeMenu.addOption(""Logout"");
	while (1) {
		homeMenu.header = ""------------------------------\nWelcome to "" + user.shopname + ""\n------------------------------\nThis is your home page\nPlease choose your action\n"";
		switch (homeMenu.prompt())
		{
		case 1:
			user = profile(user);
			break;
		case 2:
			record_sale(user);
			break;
		case 3:
			sale_report(user);
			break;
		case 4:
			new_item(user);
			break;
		case 5:
			return;
			break;
		default:
			break;
		}
	}
}








/*

---------------------------------------------------------------------------------------------------------------------------------------
	USER PROFILE
---------------------------------------------------------------------------------------------------------------------------------------

*/
Account profile(Account user) {

	Account temp = user; // copy the object

	Menu profileMenu;
	profileMenu.header = ""----------------------\nGroceries Sale Tracker\nYour Profile\n----------------------\nChoose action and input details"";
	profileMenu.addOption(""username"");
	profileMenu.addOption(""password"");
	profileMenu.addOption(""fullname"");
	profileMenu.addOption(""shopname"");
	profileMenu.addOption(""telephone"");
	profileMenu.addOption(""yearOfBirth"");
	profileMenu.addOption(""Reset"");
	profileMenu.addOption(""Save"");
	profileMenu.addOption(""Back"");
	profileMenu.addOption(""Delete Account"");

	string tmpInput;
	while (1) {
		profileMenu.setValue(0, temp.username);
		profileMenu.setValue(1, temp.password);
		profileMenu.setValue(2, temp.fullname);
		profileMenu.setValue(3, temp.shopname);
		profileMenu.setValue(4, temp.telephone);
		profileMenu.setValue(5, to_string(temp.yearOfBirth));
		profileMenu.footer = ""You are "" + to_string(temp.getAge()) + "" Years old\nSelect Option and press Enter"";
		profileMenu.prompt();

		//char choice;
		string option;
		cin >> option;
		//cin >> choice;

		if (option == ""1"") {
			cout << ""\nInsert Username: "";
			cin >> temp.username;
		}
		else if (option == ""2"") {
			cout << ""\nInsert password: "";
			cin >> temp.password;
		}
		else if (option == ""3"") {
			cout << ""\nInsert full name: "";
			std::cin.clear();
			std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
			getline(cin, temp.fullname);
		}
		else if (option == ""4"") {
			cout << ""\nInsert shop name: "";
			std::cin.clear();
			std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
			getline(cin, temp.shopname);
		}
		else if (option == ""5"") {
			cout << ""\nInsert telephone: "";
			cin >> temp.telephone;
		}
		else if (option == ""6"") {
			cout << ""\nInsert year of birth: "";
			//cin >> temp.yearOfBirth;
			cin >> tmpInput;
			if (isNumeric(tmpInput)) {
				temp.yearOfBirth = stoi(tmpInput);
			}
			else {
				cout << ""\nInput for year of birth must be numeric"";
				_getch();
			}
		}
		else if (option == ""7"") {
			temp = user;
		}
		else if (option == ""8"") {
			cout << ""\nDo you want to update these details? (y/n)"";
			char confirm;
			confirm = _getch();
			if (confirm == 'Y' || confirm == 'y') {
				user = temp;
				user.update();
				cout << ""\nAccount Updated"";
				_getch();
			}
		}
		else if (option == ""9"") {
			return user;
			break;
		}
		else if (option == ""10"") {
			cout << ""\nDelete your account? (y/n)"";
			char confirm;
			confirm = _getch();
			if (confirm == 'Y' || confirm == 'y') {
				user = temp;
				user.remove();
				main();
			}
		}
		else {
			cout << ""Enter a valid option!"";
			_getch();
		}
		
	}
}











/*

---------------------------------------------------------------------------------------------------------------------------------------
	RECORD SALE MAIN PAGE
---------------------------------------------------------------------------------------------------------------------------------------

*/
void record_sale(Account user) {

	Transaction cart; //initialize a transaction to hold product values
	cart.userId = user.accountId; // put currently logge in user id into the transaction


	Account temp = user;
	vector<Item> items;
	int itemID, quantity, category_id;
	string category_name, category;
	char choice;
	vector<Category> category1;
	DBConnection db;

	Item item;

	Menu saleMenu;
	saleMenu.addOption(""View All Item in Cart"");
	saleMenu.addOption(""Show All Item"");
	saleMenu.addOption(""Choose by Category"");
	saleMenu.addOption(""Clear cart"");
	saleMenu.addOption(""Back"");
	while (1) {
		saleMenu.header = ""----------------------\n"" + user.shopname + ""\nShop\n----------------------\nItems in cart = "" + to_string(cart.count()) + ""\nTotal price = "" + to_string(cart.total()) + ""\n"";
		switch (saleMenu.prompt())
		{
		case 1:
			cart = cartMenu(user, cart);
			break;
		case 2:
			items = Item::findItem();

			cout << ""\nChoose Item ID = "";
			cin >> itemID;

			item = Item::findItemSale(itemID);

			if (item.itemId != NULL) {
				cout << ""\nInsert Quantity = "";
				cin >> quantity;

				if (quantity > 0) {
					cout << ""\nItem Name = "" +item.itemName;
					cout << ""\nItem Price = "" +to_string(item.itemPrice)+""\n"";
					cout << ""\nQuantity = "" + to_string(quantity);
					cout << ""\nTotal Price = "" +to_string(quantity*item.itemPrice);
					cout << ""\nTotal after add = "" + to_string(cart.total() + (quantity * item.itemPrice));
					cout << ""\nAre you sure? (y-yes, n-no) \n"";
					cin >> choice;

					if (choice == 'y') {
						cart.addItem(item, quantity);

						cout << endl << ""Item Added into cart"";

					}
					else {
						cout << endl << ""Item Not Added into cart"";
					}

				}
			}

			_getch();
			break;


		case 3:
			category1 = Category::findCategory();
			cout << ""\nInsert Category ID: "";
			cin >> category_id;

			if (!cin.fail()) {
				db.prepareStatement(""SELECT category_name FROM category WHERE category_id=?"");
				db.stmt->setInt(1, category_id);


				db.QueryResult();

				if (db.res->rowsCount() > 0) {
					while (db.res->next()) {
						category_name = db.res->getString(""category_name"");
						cout << ""You choose "" << category_name << ""\n"";

						category = category_name;

						items = Item::findItembyCategory(category_id);

						cout << ""\nChoose Item ID = "";
						cin >> itemID;

						item = Item::findItemSaleCategory(itemID, category_id);

						if (item.itemId != NULL) {
							cout << ""\nInsert Quantity = "";
							cin >> quantity;

							if (quantity > 0) {
								cout << ""\nItem Name = "" + item.itemName;
								cout << ""\nItem Price = "" + to_string(item.itemPrice) + ""\n"";
								cout << ""\nQuantity = "" + to_string(quantity);
								cout << ""\nTotal Price = "" + to_string(quantity * item.itemPrice);
								cout << ""\nTotal after add = "" + to_string(cart.total() + (quantity * item.itemPrice));
								cout << ""\nAre you sure? (y-yes, n-no) \n"";
								cin >> choice;

								if (choice == 'y') {
									cart.addItem(item, quantity);

									cout << endl << ""Item Added into cart"";

								}
								else {
									cout << endl << ""Item Not Added into cart"";
								}

							}
						}
					}
				}
				else {
					cout << ""No category found!"" << endl;
				}
			}
			else {
				std::cin.clear();
				std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
				std::cout << ""Invalid input. Please enter an integer."" << std::endl;
			}

			_getch();
			break;
		case 4:
			record_sale(user);
			break;
		case 5:
			home(user);
			break;
		default:
			break;
		}
	}
}






















/*

---------------------------------------------------------------------------------------------------------------------------------------
	SALE REPORT ITEM SECTION
---------------------------------------------------------------------------------------------------------------------------------------

*/
void record_sale_item(Account user) {


	Transaction cart; //initialize a transaction to hold product values
	cart.userId = user.accountId; // put currently logge in user id into the transaction


	Account temp = user;
	vector<Sale> sales;
	vector<Category> category1;
	vector<Item> items;
	Item item;
	int itemID, quantity;

	int categoryID;
	string category, category_name;
	char choice;

	DBConnection db, db1;

	Menu homeMenu;
	homeMenu.addOption(""Show All"");
	homeMenu.addOption(""Search by Keyword"");
	homeMenu.addOption(""Search by Price"");
	homeMenu.addOption(""Back"");
	while (1) {
		homeMenu.header = ""----------------------\n"" + user.shopname + ""\nSale Report\n----------------------\nChoose action and input details"";
		switch (homeMenu.prompt())
		{
		case 1:
			items = Item::findItem();

			cout << ""\nChoose Item ID = "";
			cin >> itemID;

			item = Item::findItemSale(itemID);

			if (item.itemId != NULL) {
				cout << ""\nInsert Quantity = "";
				cin >> quantity;

				if (quantity > 0) {
					cout << ""\nItem Name = "" + item.itemName;
					cout << ""\nItem Price = "" + to_string(item.itemPrice) + ""\n"";
					cout << ""\nQuantity = "" + to_string(quantity);
					cout << ""\nTotal Price = "" + to_string(quantity * item.itemPrice);
					cout << ""\nTotal after add = "" + to_string(cart.total() + (quantity * item.itemPrice));
					cout << ""\nAre you sure? (y-yes, n-no) \n"";
					cin >> choice;

					if (choice == 'y') {
						cart.addItem(item, quantity);

						cout << endl << ""Item Added into cart"";

					}
					else {
						cout << endl << ""Item Not Added into cart"";
					}

				}
			}
			
			_getch();
			record_sale(user);
			break;
		case 2:
			cout << ""Find by Keyword"" << endl;
			_getch();
			break;
		case 3:
			cout << ""Find by Price"" << endl;
			_getch();
			break;
		case 4:
			return;
			break;
		default:
			break;
		}
	}
}
















/*

---------------------------------------------------------------------------------------------------------------------------------------
	CART MENU
---------------------------------------------------------------------------------------------------------------------------------------

*/
Transaction cartMenu(Account user, Transaction cart) {
	Menu cartM;
	cartM.header = ""----------------------\n"" + user.shopname + ""\nShop\n----------------------\nItems in cart = "" + to_string(cart.count()) + ""\nTotal price = "" + to_string(cart.total()) + ""\n\nActions"";
	cartM.addOption(""Checkout"");
	cartM.addOption(""Empty Cart"");
	cartM.addOption(""Back"");
	stringstream ss;
	ss << ""---------------------------------------------------------------------------------"" << endl;
	ss << fixed << setprecision(2) << ""Item\t\t\t\t|Price\t\t|Quantity\t|Subtotal\t|"" << endl;
	ss << ""---------------------------------------------------------------------------------"" << endl;
	for (int i = 0; i < cart.items.size(); i++) {

		if ((cart.items[i].first.itemName).length() >= 8 && (cart.items[i].first.itemName).length() <= 13) {
			ss << cart.items[i].first.itemName << ""\t\t\t|"" << cart.items[i].first.itemPrice << ""\t\t|"" << cart.items[i].second
				<< ""\t\t|"" << (cart.items[i].first.itemPrice * cart.items[i].second) << ""\t\t|"" << endl;
		}
		else if ((cart.items[i].first.itemName).length() > 13 && (cart.items[i].first.itemName).length() <= 16) {
			ss << cart.items[i].first.itemName << ""\t\t|"" << cart.items[i].first.itemPrice << ""\t\t|"" << cart.items[i].second
				<< ""\t\t|"" << (cart.items[i].first.itemPrice * cart.items[i].second) << ""\t\t|"" << endl;
		}

		else if ((cart.items[i].first.itemName).length() > 16) {
			ss << cart.items[i].first.itemName << ""\t\t|"" << cart.items[i].first.itemPrice << ""\t\t|"" << cart.items[i].second
				<< ""\t\t|"" << (cart.items[i].first.itemPrice * cart.items[i].second) << ""\t\t|"" << endl;
		}
		else {
			ss << cart.items[i].first.itemName << ""\t\t\t\t|"" << cart.items[i].first.itemPrice << ""\t\t|"" << cart.items[i].second
				<< ""\t\t|"" << (cart.items[i].first.itemPrice * cart.items[i].second) << ""\t\t|"" << endl;
		}
	}
	ss << ""---------------------------------------------------------------------------------"" << endl;
	ss << ""\nSUM"" << ""\t\t\t\t|\t\t|"" << cart.count() << ""\t\t|"" << cart.total() << ""\t\t|"";
	cartM.footer = ""\nCart Items\n"" + ss.str();
	char confirm;
	while (1)
	{
		switch (cartM.prompt())
		{
		case 1:
			cout << ""\nCheck out? (y/n)\n"";
			confirm = _getch();
			if (confirm == 'Y' || confirm == 'y') {

				if (cart.count() == 0) {
					cout << ""\nEmpty Cart!"";
				}
				else {
					cart.insert(cart.total());
					cout << ""\nTransaction saved"";
				}

				_getch();
				record_sale(user); // go back to shop with empty cart
				break;
			}
			else {
				_getch();
				break;
			}
			
		case 2:
			cout << ""\nClear your cart? (y/n)\n"";
			confirm = _getch();
			if (confirm == 'Y' || confirm == 'y') {
				cout << ""\nYour cart is empty"";
				_getch();
				record_sale(user); // go back to shop with empty cart
			}
			_getch();
			break;
		case 3:
			return cart;
		}

	}
}







/*

---------------------------------------------------------------------------------------------------------------------------------------
	ITEM CART
---------------------------------------------------------------------------------------------------------------------------------------

*/
void item_cart(Account user, int itemID, Transaction cart) {
	Account temp = user;

	Menu cartMenu;
	cartMenu.addOption(""Insert Quantity"");
	cartMenu.addOption(""Total Price"");
	cartMenu.addOption(""Back"");
	while (1) {
		cartMenu.header = ""----------------------\n"" + user.shopname + ""\nSale Report\n----------------------\nChoose action and input details"";
		switch (cartMenu.prompt())
		{
		case 1:
			cout << ""Total Item"";
			_getch();
			break;
		case 2:
			cout << ""Total Price"";
			_getch();
			break;
		case 3:
			return;
			break;
		default:
			break;
		}
	}
}










/*

---------------------------------------------------------------------------------------------------------------------------------------
	SALE REPORT MAIN SECTION
---------------------------------------------------------------------------------------------------------------------------------------

*/
void sale_report(Account user) {

	Account temp = user;
	vector<Sale> sales;
	vector<Category> category1;
	vector<Item> items;

	int categoryID;
	string category, category_name;

	DBConnection db, db1;

	Menu homeMenu;
	homeMenu.addOption(""Show All Sale Report"");
	homeMenu.addOption(""Show by Month"");
	homeMenu.addOption(""Show by Category"");
	homeMenu.addOption(""Show by Item"");
	homeMenu.addOption(""View Statistics"");
	homeMenu.addOption(""Edit Sales"");
	homeMenu.addOption(""Back"");
	while (1) {
		homeMenu.header = ""----------------------\n"" + user.shopname + ""\nSale Report\n----------------------\nChoose action and input details"";
		switch (homeMenu.prompt())
		{
		case 1:
			all_sale_report(user);
			break;
		case 2:
			sales = Sale::findSaleDate();
			_getch();
			break;
		case 3:

			category1 = Category::findCategory();
			cout << ""\nInsert Category ID: "";
			cin >> categoryID;


			if (!cin.fail()) {
				db.prepareStatement(""SELECT category_name FROM category WHERE category_id=?"");
				db.stmt->setInt(1, categoryID);


				db.QueryResult();

				if (db.res->rowsCount() > 0) {
					while (db.res->next()) {
						category_name = db.res->getString(""category_name"");
						cout << ""\nYou choose "" << category_name << ""\n"";

						category = category_name;


						items = Item::findItembyCategory(categoryID);
						sales = Sale::findSaleCategory(categoryID);
					}
				}
				else {
					cout << ""No item found!"" << endl;
				}
			}
			else {
				std::cin.clear();
				std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
				std::cout << ""Invalid input. Please enter an integer."" << std::endl;
			}


			_getch();
			break;
		case 4:
			all_sale_report_id(user);
			break;
		case 5:
			view_statistic(user);
			break;
		case 6:
			view_statistic(user);
			break;
		case 7:
			return;
			break;
		default:
			break;
		}
	}
}









/*

---------------------------------------------------------------------------------------------------------------------------------------
	EDIT SALE SECTION
---------------------------------------------------------------------------------------------------------------------------------------

*/
void edit_sale(Account user) {

	Account temp = user;
	vector<Sale> sales;
	vector<Category> category1;
	vector<Item> items;

	int categoryID;
	string category, category_name;

	DBConnection db, db1;

	Menu homeMenu;
	homeMenu.addOption(""Show All Sale Report"");
	homeMenu.addOption(""Show by Month"");
	homeMenu.addOption(""Show by Category"");
	homeMenu.addOption(""Show by Item"");
	homeMenu.addOption(""View Statistics"");
	homeMenu.addOption(""Edit Sales"");
	homeMenu.addOption(""Back"");
	while (1) {
		homeMenu.header = ""----------------------\n"" + user.shopname + ""\nSale Report\n----------------------\nChoose action and input details"";
		switch (homeMenu.prompt())
		{
		case 1:
			all_sale_report(user);
			break;
		case 2:
			sales = Sale::findSaleDate();
			_getch();
			break;
		case 3:

			category1 = Category::findCategory();
			cout << ""\nInsert Category ID: "";
			cin >> categoryID;


			if (!cin.fail()) {
				db.prepareStatement(""SELECT category_name FROM category WHERE category_id=?"");
				db.stmt->setInt(1, categoryID);


				db.QueryResult();

				if (db.res->rowsCount() > 0) {
					while (db.res->next()) {
						category_name = db.res->getString(""category_name"");
						cout << ""\nYou choose "" << category_name << ""\n"";

						category = category_name;


						items = Item::findItembyCategory(categoryID);
						sales = Sale::findSaleCategory(categoryID);
					}
				}
				else {
					cout << ""No item found!"" << endl;
				}
			}
			else {
				std::cin.clear();
				std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
				std::cout << ""Invalid input. Please enter an integer."" << std::endl;
			}


			_getch();
			break;
		case 4:
			all_sale_report_id(user);
			break;
		case 5:
			view_statistic(user);
			break;
		case 6:
			view_statistic(user);
			break;
		case 7:
			return;
			break;
		default:
			break;
		}
	}
}





/*

---------------------------------------------------------------------------------------------------------------------------------------
	ALL SALE REPORT BY ID
---------------------------------------------------------------------------------------------------------------------------------------

*/
void all_sale_report_id(Account user) {

	Account temp = user;
	vector<Sale> sales;
	vector<Item> items;
	DBConnection db;

	int item_id;
	string item_name;
	string itemNamePattern;

	Menu homeMenu;
	homeMenu.addOption(""Show by Item Name"");
	homeMenu.addOption(""Show by Item ID"");
	homeMenu.addOption(""Back"");
	while (1) {
		homeMenu.header = ""----------------------\n"" + user.shopname + ""\nSale Report\n----------------------\nChoose action and input details"";
		switch (homeMenu.prompt())
		{
		case 1:
			/*cout << ""\nInsert Item Keyword = "" << endl;
			cin >> item_name;

			itemNamePattern = ""%"" + item_name + ""%"";
			items = Item::findItembyPattern(itemNamePattern);

			db.prepareStatement(""SELECT * FROM item WHERE item_name LIKE ?"");
			db.stmt->setString(1, itemNamePattern);
			db.QueryResult();




			if (db.res->rowsCount() > 0) {

				while (db.res->next()) {
					item_id = db.res->getInt(""item_id"");
					sales = Sale::findSaleItemID(item_id);
				}
			}*/

			all_sale_report_name(user);

			break;
		case 2:
			cout << ""\nInsert Item ID = "" << endl;
			cin >> item_id;

			items = Item::findItembyId(item_id);

			sales = Sale::findSaleItemID(item_id);
			_getch();
			break;
		case 3:
			return;
			break;
		default:
			break;
		}
	}
}













/*

---------------------------------------------------------------------------------------------------------------------------------------
	ALL SALE REPORT BY NAME
---------------------------------------------------------------------------------------------------------------------------------------

*/
void all_sale_report_name(Account user) {

	Account temp = user;
	vector<Sale> sales;
	vector<Item> items;
	DBConnection db;

	int item_id;
	string item_name;
	string itemNamePattern;

	Menu homeMenu;
	homeMenu.addOption(""Insert Item Full Name"");
	homeMenu.addOption(""Insert Item Keyword"");
	homeMenu.addOption(""Back"");
	while (1) {
		homeMenu.header = ""----------------------\n"" + user.shopname + ""\nSale Report\n----------------------\nChoose action and input details"";
		switch (homeMenu.prompt())
		{
		case 1:
			cout << ""\nInsert Item Name = "" << endl;
			cin >> item_name;
			items = Item::findItembyName(item_name);

			db.prepareStatement(""SELECT * FROM item WHERE item_name=?"");
			db.stmt->setString(1, item_name);
			db.QueryResult();



			if (db.res->rowsCount() > 0) {

				while (db.res->next()) {
					item_id = db.res->getInt(""item_id"");
					sales = Sale::findSaleItemID(item_id);
				}
			}

			_getch();
			break;
		case 2:
			cout << ""\nInsert Item Keyword = "" << endl;
			cin >> item_name;

			itemNamePattern = ""%"" + item_name + ""%"";
			items = Item::findItembyPattern(itemNamePattern);

			db.prepareStatement(""SELECT * FROM item WHERE item_name LIKE ?"");
			db.stmt->setString(1, itemNamePattern);
			db.QueryResult();




			if (db.res->rowsCount() > 0) {

				while (db.res->next()) {
					item_id = db.res->getInt(""item_id"");
					sales = Sale::findSaleItemID(item_id);
				}
			}

			_getch();
			break;
		case 3:
			return;
			break;
		default:
			break;
		}
	}
}











/*

---------------------------------------------------------------------------------------------------------------------------------------
	ALL SALE REPORT
---------------------------------------------------------------------------------------------------------------------------------------

*/
void all_sale_report(Account user) {

	Account temp = user;
	vector<Sale> sales;

	Menu homeMenu;
	homeMenu.addOption(""Show All Sale Report by User"");
	homeMenu.addOption(""Show All Sale Report by Item"");
	homeMenu.addOption(""Search and Filter"");
	homeMenu.addOption(""Back"");
	while (1) {
		homeMenu.header = ""----------------------\n"" + user.shopname + ""\nSale Report\n----------------------\nChoose action and input details"";
		switch (homeMenu.prompt())
		{
		case 1:
			cout << ""\nAll Sale Report"";

			sales = Sale::findSaleDate();

			_getch();
			break;
		case 2:
			cout << ""\nAll Sale Report"";

			sales = Sale::findSaleItem();
			_getch();
			break;
		case 3:
			search_filter(user);

			break;
		case 4:
			return;
			break;
		default:
			break;
		}
	}
}










/*

---------------------------------------------------------------------------------------------------------------------------------------
	SEARCH AND FILTER
---------------------------------------------------------------------------------------------------------------------------------------

*/

void search_filter(Account user) {

	Account temp = user;
	string categoryName, maxName, proceed;
	double maxValue, minValue;
	vector<Sale> sales;
	maxValue = 0;
	minValue = 0;

	DBConnection db;

	Menu itemMenu;
	itemMenu.addOption(""Input Maximum"");
	itemMenu.addOption(""Input Mimimum"");
	itemMenu.addOption(""Search"");
	itemMenu.addOption(""Back"");
	while (1) {
		itemMenu.header = ""----------------------\n"" + user.shopname + ""\nItem Directories\n----------------------\nChoose action and input details"";
		switch (itemMenu.prompt())
		{
		case 1:
			cout << ""Input maximum price value = "";
			cin >> maxValue;
			_getch();
			itemMenu.setValue(0, to_string(maxValue));
			break;
		case 2:
			cout << ""Input minimum price value = "";
			cin >> minValue;
			_getch();
			itemMenu.setValue(1, to_string(minValue));
			break;
		case 3:

			if ((maxValue == 0) && (minValue == 0)) {
				cout << ""\nPlease input maximum or minimum subtotal value first!"";
			}
			else if ((maxValue >= 0) && (minValue == 0)) {

				cout << ""\nYou only input maximum subtotal value, do you want to proceed? (y-yes, n-no)"" << endl;
				cin >> proceed;

				if ((proceed == ""Y"") || (proceed == ""y"")) {

					sales = Sale::findSaleRangeMax(maxValue);
				}
				else {
					cout << ""\nDenied!"";
				}

			}
			else if ((maxValue == 0) && (minValue >= 0)) {
				cout << ""\nYou only input minimum subtotal value, do you want to proceed? (y-yes, n-no)"" << endl;
				cin >> proceed;


				if ((proceed == ""Y"") || (proceed == ""y"")) {

					sales = Sale::findSaleRangeMin(minValue);
				}
				else {
					cout << ""\nDenied!"";
				}

			}
			else if ((maxValue >= 0) && (minValue >= 0)) {
				sales = Sale::findSaleRange(minValue, maxValue);
			}
			
			_getch();


			break;
		case 4:
			return;
			break;
		default:
			break;
		}
	}
}

















/*

---------------------------------------------------------------------------------------------------------------------------------------
	VIEW STATISTIC
---------------------------------------------------------------------------------------------------------------------------------------

*/

void view_statistic(Account user) {

	Account temp = user;
	vector<Sale> sales;
	DBConnection db, db1;
	double maxmin_sale;
	int total_item;

	Menu statMenu;
	statMenu.addOption(""View by Item"");
	statMenu.addOption(""Highest and Lowest Sale"");
	statMenu.addOption(""Average Sale"");
	statMenu.addOption(""Sum Sale"");
	statMenu.addOption(""Back"");
	while (1) {
		statMenu.header = ""----------------------\n"" + user.shopname + ""\nSale Report\n----------------------\nChoose action and input details"";
		switch (statMenu.prompt())
		{
		case 1:
			sales = Sale::findHighLowSale();
			_getch();
			break;
		case 2:
			cout << ""\nHighest Sale"";
			db.prepareStatement(""SELECT MAX(subtotal) FROM sale"");
			db.QueryResult();
			//cout << max_sale;

			while (db.res->next()) {
				maxmin_sale = db.res->getDouble(1);
				
				sales = Sale::findSaleMaxMin(maxmin_sale);

			}

			cout << ""\nLowest Sale"";
			db.prepareStatement(""SELECT MIN(subtotal) FROM sale"");
			db.QueryResult();
			//cout << max_sale;

			while (db.res->next()) {
				maxmin_sale = db.res->getDouble(1);

				sales = Sale::findSaleMaxMin(maxmin_sale);

			}

			_getch();
			break;
		case 3:

			db.prepareStatement(""SELECT AVG(subtotal) FROM sale"");
			db.QueryResult();

			while (db.res->next()) {
				maxmin_sale = db.res->getDouble(1);
				
				db1.prepareStatement(""SELECT COUNT(sale_id) FROM sale"");
				db1.QueryResult();

				while (db1.res->next()) {
					total_item = db1.res->getInt(1);
					cout << ""\nTotal Average Sale = "" << maxmin_sale << endl;
					cout << ""Total Sale Recorded = "" << total_item << endl;
				}


			}
			_getch();
			break;
		case 4:
			db.prepareStatement(""SELECT SUM(subtotal) FROM sale"");
			db.QueryResult();

			while (db.res->next()) {
				maxmin_sale = db.res->getDouble(1);

				db1.prepareStatement(""SELECT COUNT(sale_id) FROM sale"");
				db1.QueryResult();

				while (db1.res->next()) {
					total_item = db1.res->getInt(1);
					cout << ""\nTotal Sum of every Sale = "" << maxmin_sale << endl;
					cout << ""Total Sale Recorded = "" << total_item << endl;
				}


			}
			_getch();
			break;
		case 5:
			return;
			break;
		default:
			break;
		}
	}
}










/*

---------------------------------------------------------------------------------------------------------------------------------------
	NEW ITEM SECTION
---------------------------------------------------------------------------------------------------------------------------------------

*/
void new_item(Account user) {

	Account temp = user;
	string categoryName = ""d"";

	Menu itemMenu;
	itemMenu.addOption(""Edit Item"");
	itemMenu.addOption(""New Item"");
	itemMenu.addOption(""Delete Item"");
	itemMenu.addOption(""All Item List"");
	itemMenu.addOption(""Show Category"");
	itemMenu.addOption(""Back"");
	while (1) {
		itemMenu.header = ""----------------------\n""+user.shopname+""\nItem Directories\n----------------------\nChoose action and input details"";
		switch (itemMenu.prompt())
		{
		case 1:
			edit_item(user);

			break;
		case 2:
			create_new_item(user, categoryName);

			break;
		case 3:
			delete_item(user);
			break;
		case 4:
			all_item(user);
			break;
		case 5:
			all_category(user);

			break;
		case 6:
			return;
			break;
		default:
			break;
		}
	}
}











/*

---------------------------------------------------------------------------------------------------------------------------------------
	EDIT ITEM SECTION
---------------------------------------------------------------------------------------------------------------------------------------

*/
void edit_item(Account user) {

	Account temp = user;
	vector<Item> items;
	vector<Category> category1;
	DBConnection db;
	int itemID, categoryID, category_id;
	double itemPrice;
	string itemName, category, itemNameFind;
	Item itemSingleName;

	Menu homeMenu;
	homeMenu.addOption(""Choose by Item ID"");
	homeMenu.addOption(""Choose by Item Name"");
	homeMenu.addOption(""Choose by Category"");
	homeMenu.addOption(""Back"");
	while (1) {
		homeMenu.header = ""----------------------\n"" + user.shopname + ""\nEdit Item\n----------------------\nChoose action and input details"";
		switch (homeMenu.prompt())
		{
		case 1:
			items = Item::findItem();

			cout << ""Insert Item ID = "";
			cin >> itemID;

			if (!cin.fail()) {
				db.prepareStatement(""SELECT * FROM item WHERE item_id=?"");
				db.stmt->setInt(1, itemID);


				db.QueryResult();

				if (db.res->rowsCount() > 0) {
					while (db.res->next()) {
						itemName = db.res->getString(""item_name"");
						itemPrice = db.res->getDouble(""item_price"");
						category_id = db.res->getInt(""category_id"");
						update_new_item(user, itemID, itemName, itemPrice, category_id);
					}
				}
				else {
					cout << ""No item found!"" << endl;
				}
			}
			else {
				std::cin.clear();
				std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
				std::cout << ""Invalid input. Please enter an integer."" << std::endl;
			}

			_getch();
			break;
		case 2:
			items = Item::findItem();

			cout << ""Insert Item Name = "";
			std::cin.clear();
			getline(cin, itemNameFind);

			db.prepareStatement(""SELECT * FROM item WHERE item_name=?"");
			db.stmt->setString(1, itemNameFind);

			db.QueryResult();

			if (db.res->rowsCount() > 1) {
				cout << ""There are more than 1 item with same name, please choose one item ID\n"";
				cout << ""\nITEM ID\t\t|ITEM NAME\t\t\t\t|ITEM PRICE\t\t|CATEGORY\t\t|"" << endl;
				cout << ""---------------------------------------------------------------------------------------------------------"" << endl;
				while (db.res->next()) {
					Item tmpItem(db.res);
					items.push_back(tmpItem);

					if ((db.res->getString(""item_name"")).length() > 8 && (db.res->getString(""item_name"")).length() <= 12) {
						cout << """" << db.res->getInt(""item_id"") << ""\t\t|"" << db.res->getString(""item_name"") << ""      \t\t\t|"" << db.res->getDouble(""item_price"") << ""      \t\t|"" << db.res->getInt(""category_id"") << ""\t\t\t|"" << endl;
						cout << fixed << showpoint;
						cout << setprecision(2);
					}
					else if ((db.res->getString(""item_name"")).length() > 12 && (db.res->getString(""item_name"")).length() <= 16) {
						cout << """" << db.res->getInt(""item_id"") << ""\t\t|"" << db.res->getString(""item_name"") << ""      \t\t\t|"" << db.res->getDouble(""item_price"") << ""      \t\t|"" << db.res->getInt(""category_id"") << ""\t\t\t|"" << endl;
						cout << fixed << showpoint;
						cout << setprecision(2);
					}
					else if ((db.res->getString(""item_name"")).length() > 16) {
						cout << """" << db.res->getInt(""item_id"") << ""\t\t|"" << db.res->getString(""item_name"") << ""      \t\t|"" << db.res->getDouble(""item_price"") << ""      \t\t|"" << db.res->getInt(""category_id"") << ""\t\t\t|"" << endl;
						cout << fixed << showpoint;
						cout << setprecision(2);
					}
					else {
						cout << """" << db.res->getInt(""item_id"") << ""\t\t|"" << db.res->getString(""item_name"") << ""      \t\t\t\t|"" << db.res->getDouble(""item_price"") << ""      \t\t|"" << db.res->getInt(""category_id"") << ""\t\t\t|"" << endl;
						cout << fixed << showpoint;
						cout << setprecision(2);
					}

				}
				cout << ""\nEnter item ID = "";
				cin >> itemID;

				if (!cin.fail()) {
					db.prepareStatement(""SELECT * FROM item WHERE item_id=? AND item_name=?"");
					db.stmt->setInt(1, itemID);
					db.stmt->setString(2, itemNameFind);

					db.QueryResult();

					if (db.res->rowsCount() > 0) {
						while (db.res->next()) {
							itemName = db.res->getString(""item_name"");
							itemPrice = db.res->getDouble(""item_price"");
							category_id = db.res->getInt(""category_id"");
							update_new_item(user, itemID, itemName, itemPrice, category_id);
						}
					}
					else {
						cout << ""No item found in this name!"" << endl;
					}
				}
				else {
					std::cin.clear();
					std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
					std::cout << ""Invalid input. Please enter an integer."" << std::endl;
				}
			}
			else if (db.res->rowsCount() == 1) {
				db.prepareStatement(""SELECT * FROM item WHERE item_name=?"");
				db.stmt->setString(1, itemNameFind);

				db.QueryResult();

				if (db.res->rowsCount() > 0) {
					while (db.res->next()) {
						itemID = db.res->getInt(""item_id"");
						itemName = db.res->getString(""item_name"");
						itemPrice = db.res->getDouble(""item_price"");
						category_id = db.res->getInt(""category_id"");
						update_new_item(user, itemID, itemName, itemPrice, category_id);
					}
				}
				else {
					cout << ""No item found!"" << endl;
					_getch();
				}
			}
			else {
				cout << ""No item found!"" << endl;
			}

			_getch();
			break;
		case 3:
			category1 = Category::findCategory();
			cout << ""\nInsert Category ID: "";
			cin >> categoryID;
			db.prepareStatement(""SELECT category_name FROM category WHERE category_id=?"");
			db.stmt->setInt(1, categoryID);

			db.QueryResult();

			if (db.res->rowsCount() > 0) {
				while (db.res->next()) {
					category = db.res->getString(""category_name"");
					cout << ""\nYou choose "" << category;
					cout << ""\nList of all item in "" << category << "" category\n"";

					db.prepareStatement(""SELECT * FROM item WHERE category_id=?"");
					db.stmt->setInt(1, categoryID);


					db.QueryResult();

					if (db.res->rowsCount() > 0) {
						cout << ""\nITEM ID\t\t|ITEM NAME\t\t\t\t|ITEM PRICE\t\t|CATEGORY\t\t|"" << endl;
						cout << ""---------------------------------------------------------------------------------------------------------"" << endl;
						while (db.res->next()) {
							Item tmpItem(db.res);
							items.push_back(tmpItem);

							if ((db.res->getString(""item_name"")).length() > 8 && (db.res->getString(""item_name"")).length() <= 12) {
								cout << """" << db.res->getInt(""item_id"") << ""\t\t|"" << db.res->getString(""item_name"") << ""      \t\t\t|"" << db.res->getDouble(""item_price"") << ""      \t\t|"" << db.res->getInt(""category_id"") << ""\t\t\t|"" << endl;
								cout << fixed << showpoint;
								cout << setprecision(2);
							}
							else if ((db.res->getString(""item_name"")).length() > 12 && (db.res->getString(""item_name"")).length() <= 16) {
								cout << """" << db.res->getInt(""item_id"") << ""\t\t|"" << db.res->getString(""item_name"") << ""      \t\t\t|"" << db.res->getDouble(""item_price"") << ""      \t\t|"" << db.res->getInt(""category_id"") << ""\t\t\t|"" << endl;
								cout << fixed << showpoint;
								cout << setprecision(2);
							}
							else if ((db.res->getString(""item_name"")).length() > 16) {
								cout << """" << db.res->getInt(""item_id"") << ""\t\t|"" << db.res->getString(""item_name"") << ""      \t\t|"" << db.res->getDouble(""item_price"") << ""      \t\t|"" << db.res->getInt(""category_id"") << ""\t\t\t|"" << endl;
								cout << fixed << showpoint;
								cout << setprecision(2);
							}
							else {
								cout << """" << db.res->getInt(""item_id"") << ""\t\t|"" << db.res->getString(""item_name"") << ""      \t\t\t\t|"" << db.res->getDouble(""item_price"") << ""      \t\t|"" << db.res->getInt(""category_id"") << ""\t\t\t|"" << endl;
								cout << fixed << showpoint;
								cout << setprecision(2);
							}

						}
						cout << ""\nEnter item ID = "";
						cin >> itemID;

						if (!cin.fail()) {
							db.prepareStatement(""SELECT * FROM item WHERE item_id=? AND category_id=?"");
							db.stmt->setInt(1, itemID);
							db.stmt->setInt(2, categoryID);


							db.QueryResult();

							if (db.res->rowsCount() > 0) {
								while (db.res->next()) {
									itemName = db.res->getString(""item_name"");
									itemPrice = db.res->getDouble(""item_price"");
									category_id = db.res->getInt(""category_id"");
									update_new_item(user, itemID, itemName, itemPrice, category_id);
								}
							}
							else {
								cout << ""This Item ID unavailable in this category!"" << endl;
							}
						}
						else {
							std::cin.clear();
							std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
							std::cout << ""Invalid input. Please enter an integer."" << std::endl;
						}
					}
				}
			}
			else {
				cout << ""Invalid Category ID!"" << endl;
			}

			_getch();
			break;
		case 4:
			return;
			break;
		default:
			break;
		}
	}
}













/*

---------------------------------------------------------------------------------------------------------------------------------------
	UPDATE ITEM SECTION
---------------------------------------------------------------------------------------------------------------------------------------

*/
void update_new_item(Account user, int itemID, string itemName, double itemPrice, int category_id) {
	vector<Category> categoryitem;
	//Account temp = user;
	Item newitem;
	Item newItem = newitem;
	Account temp = user; // copy the object

	Category category1;
	DBConnection db;
	int item_ID;
	string item_name, item_category, category_name;
	double item_price = itemPrice;

	newitem.itemId = itemID;
	newitem.itemName = itemName;
	newitem.itemPrice = itemPrice;
	newitem.categoryId = category_id;
	string item_price1;
	item_price1 = to_string(newitem.itemPrice);

	Menu homeMenu;

	homeMenu.addOption(""Item ID"");
	homeMenu.addOption(""Item Name"");
	homeMenu.addOption(""Item Price"");
	homeMenu.addOption(""Item Category"");
	homeMenu.addOption(""Reset"");
	homeMenu.addOption(""Save"");
	homeMenu.addOption(""Back"");

	homeMenu.setValue(0, to_string(newitem.itemId));
	homeMenu.setValue(1, newitem.itemName);
	homeMenu.setValue(2, to_string(newitem.itemPrice));
	homeMenu.setValue(3, to_string(newitem.categoryId));
	while (1) {
		homeMenu.header = ""----------------------\n"" + user.shopname + ""\nRecord New Item\n----------------------\nChoose action and input new data"";
		switch (homeMenu.prompt())
		{
		case 1:
			cout << ""Item ID is : "" << newitem.itemId;
			cout << ""\nYou cannot change Item ID!"";
			_getch();
			break;
		case 2:
			cout << ""Insert Item Name: "";
			std::cin.clear();
			getline(cin, newitem.itemName);
			homeMenu.setValue(1, newitem.itemName);
			break;
		case 3:
			cout << ""Insert Item Price: "";
			cin >> newitem.itemPrice;
			item_price1 = to_string(newitem.itemPrice);

			cout << fixed << showpoint;
			cout << setprecision(2);

			homeMenu.setValue(2, to_string(newitem.itemPrice));
			break;
		case 4:
			categoryitem = Category::findCategory();
			cout << ""Choose Category ID: "";
			cin >> category_id;
			db.prepareStatement(""SELECT category_name FROM category WHERE category_id=?"");
			db.stmt->setInt(1, category_id);


			db.QueryResult();

			if (db.res->rowsCount() > 0) {
				while (db.res->next()) {
					category_name = db.res->getString(""category_name"");
					cout << ""You choose "" << category_name;
				}
			}
			else {
				cout << ""No item found!"" << endl;
			}

			newitem.categoryId = category_id;
			homeMenu.setValue(3, to_string(newitem.categoryId));
			_getch();
			break;
		case 5:
			homeMenu.setValue(1, itemName);
			homeMenu.setValue(2, to_string(itemPrice));
			homeMenu.setValue(3, to_string(category_id));
			break;
		case 6:
			newItem = newitem;
			newItem.update_item();
			cout << ""Item Successfully Saved"";
			_getch();
			new_item(user);

			break;
		case 7:
			return;
			break;
		default:
			break;
		}
	}
}














/*

---------------------------------------------------------------------------------------------------------------------------------------
	CREATE NEW ITEM
---------------------------------------------------------------------------------------------------------------------------------------

*/
void create_new_item(Account user, string category_name) {

	vector<Category> category;
	Account temp = user;
	Item newitem;
	Category category1;
	DBConnection db;
	int category_id;
	string CategoryName;
	double item_price;
	Menu homeMenu;
	homeMenu.addOption(""Insert Item Name"");
	homeMenu.addOption(""Insert Item Price"");
	homeMenu.addOption(""Choose Item Category"");
	homeMenu.addOption(""Save"");
	homeMenu.addOption(""Back"");
	while (1) {
		homeMenu.header = ""----------------------\n"" + user.shopname + ""\nRecord New Item\n----------------------\nChoose action and input new data"";
		switch (homeMenu.prompt())
		{
		case 1:
			cout << ""Item Name should not more than 25 characters"";
			cout << ""\nInsert Item Name: "";
			std::cin.clear();
			getline(cin, newitem.itemName);

			if ((newitem.itemName).length() > 25) {
				cout << ""\nItem Name must less than 26 characters!"";
				cout << ""\nTotal characters = "" + to_string((newitem.itemName).length());
				cout << ""\nPlease type back!"";
				_getch();
				homeMenu.setValue(0, """");
			}
			else if ((newitem.itemName).length() <= 25) {
				cout << ""\nYou type = "" +newitem.itemName;
				cout << ""\nTotal characters = "" + to_string((newitem.itemName).length());
				_getch();
				homeMenu.setValue(0, newitem.itemName);
			}
			break;
		case 2:
			cout << ""Insert Item Price: "";
			cin >> newitem.itemPrice;

			cout << fixed << showpoint;
			cout << setprecision(2);

			homeMenu.setValue(1, to_string(newitem.itemPrice));
			break;
		case 3:
			category = Category::findCategory();
			cout << ""\nInsert Category ID: "";
			cin >> category_id;
			db.prepareStatement(""SELECT category_name FROM category WHERE category_id=?"");
			db.stmt->setInt(1, category_id);


			db.QueryResult();

			if (db.res->rowsCount() > 0) {
				while (db.res->next()) {
					category_name = db.res->getString(""category_name"");
					cout << ""You choose "" << category_name;
					newitem.categoryId = category_id;
					homeMenu.setValue(2, to_string(newitem.categoryId));
				}
			}
			else {
				cout << ""No category found!"" << endl;
			}


			_getch();
			break;
		case 4:
			newitem.insert_item();
			cout << ""Item Successfully Saved"";
			_getch();
			new_item(user);
			break;
		case 5:
			return;
			break;
		default:
			break;
		}
	}
}












/*

---------------------------------------------------------------------------------------------------------------------------------------
	DELETE ITEM SECTION
---------------------------------------------------------------------------------------------------------------------------------------

*/
void delete_item(Account user) {

	vector<Category> categoryitem;
	vector<Category> category1;
	Account temp = user;
	Item item;
	Item temp1 = item;
	string itemName, category, item_name, delete_decision;
	int itemId, itemIdDelete, category_id;
	vector<Item> items, items2;
	DBConnection db;


	Menu itemMenu;
	itemMenu.addOption(""List out all item"");
	itemMenu.addOption(""List by Category"");
	itemMenu.addOption(""Back"");
	while (1) {
		itemMenu.header = ""----------------------\n"" + user.shopname + ""\nDelete Item\n----------------------\nChoose action\n"";
		switch (itemMenu.prompt())
		{
		case 1:
			items = Item::findItem();

			cout << ""\nInsert Item ID to Delete = "";
			cin >> itemIdDelete;

			db.prepareStatement(""SELECT * FROM item WHERE item_id=?"");
			db.stmt->setInt(1, itemIdDelete);


			db.QueryResult();

			if (db.res->rowsCount() > 0) {
				while (db.res->next()) {
					item_name = db.res->getString(""item_name"");

					items = Item::findItembyId(itemIdDelete);

					cout << ""\nDelete this item? (y/n) = "";
					char confirm;
					confirm = _getch();
					if (confirm == 'Y' || confirm == 'y') {
						item = temp1;
						cout << ""\nItem ID "" << itemIdDelete << "" = "" << item_name << "" successfully deleted!"";
						item.remove_item(itemIdDelete);
					}
				}
			}
			else {
				cout << ""No item found!"" << endl;
			}


			_getch();
			break;

		case 2:
			categoryitem = Category::findCategory();
			cout << ""\nInsert Category ID to show: "";
			cin >> category_id;

			db.prepareStatement(""SELECT * FROM category WHERE category_id=?"");
			db.stmt->setInt(1, category_id);

			db.QueryResult();

			if (db.res->rowsCount() > 0) {
				cout << ""\nCATEGORY ID\t|CATEGORY NAME\t\t|CATEGORY DESC\t\t\t\t|"" << endl;
				cout << ""---------------------------------------------------------------------------------"" << endl;
				while (db.res->next()) {
					Category tmpCategory(db.res);
					category1.push_back(tmpCategory);

					cout << """" << db.res->getInt(""category_id"") << ""\t\t|"" << db.res->getString(""category_name"") << ""      \t\t|"" << db.res->getString(""category_desc"") << ""      \t\t\t|"" << endl;
					cout << fixed << showpoint;
					cout << setprecision(2);

					cout << ""\nList of item available in this category = \n"";

					category_id = db.res->getInt(""category_id"");

					db.prepareStatement(""SELECT * FROM item WHERE category_id=?"");
					db.stmt->setInt(1, category_id);


					db.QueryResult();

					if (db.res->rowsCount() > 0) {
						cout << ""\nITEM ID\t\t|ITEM NAME\t\t\t\t|ITEM PRICE\t\t|CATEGORY\t\t|"" << endl;
						cout << ""---------------------------------------------------------------------------------------------------------"" << endl;
						while (db.res->next()) {
							Item tmpItem(db.res);
							items.push_back(tmpItem);

							if ((db.res->getString(""item_name"")).length() > 8 && (db.res->getString(""item_name"")).length() <= 12) {
								cout << """" << db.res->getInt(""item_id"") << ""\t\t|"" << db.res->getString(""item_name"") << ""      \t\t\t|"" << db.res->getDouble(""item_price"") << ""      \t\t|"" << db.res->getInt(""category_id"") << ""\t\t\t|"" << endl;
								cout << fixed << showpoint;
								cout << setprecision(2);
							}
							else if ((db.res->getString(""item_name"")).length() > 12 && (db.res->getString(""item_name"")).length() <= 16) {
								cout << """" << db.res->getInt(""item_id"") << ""\t\t|"" << db.res->getString(""item_name"") << ""      \t\t\t|"" << db.res->getDouble(""item_price"") << ""      \t\t|"" << db.res->getInt(""category_id"") << ""\t\t\t|"" << endl;
								cout << fixed << showpoint;
								cout << setprecision(2);
							}
							else if ((db.res->getString(""item_name"")).length() > 16) {
								cout << """" << db.res->getInt(""item_id"") << ""\t\t|"" << db.res->getString(""item_name"") << ""      \t\t|"" << db.res->getDouble(""item_price"") << ""      \t\t|"" << db.res->getInt(""category_id"") << ""\t\t\t|"" << endl;
								cout << fixed << showpoint;
								cout << setprecision(2);
							}
							else {
								cout << """" << db.res->getInt(""item_id"") << ""\t\t|"" << db.res->getString(""item_name"") << ""      \t\t\t\t|"" << db.res->getDouble(""item_price"") << ""      \t\t|"" << db.res->getInt(""category_id"") << ""\t\t\t|"" << endl;
								cout << fixed << showpoint;
								cout << setprecision(2);
							}

						}
						cout << ""\nEnter item ID = "";
						cin >> itemId;

						if (!cin.fail()) {
							db.prepareStatement(""SELECT * FROM item WHERE item_id=? AND category=?"");
							db.stmt->setInt(1, itemId);
							db.stmt->setString(2, category);


							db.QueryResult();

							if (db.res->rowsCount() > 0) {
								while (db.res->next()) {


									items2 = Item::findItembyId(itemId);

									cout << ""\nDelete this item? (y/n) = "";
									char confirm;
									confirm = _getch();
									if (confirm == 'Y' || confirm == 'y') {
										item = temp1;
										db.prepareStatement(""DELETE FROM item WHERE item_id=?"");
										db.stmt->setInt(1, itemId);

										db.QueryResult();

										cout << ""\nItem ID "" << itemId << "" successfully deleted!"";

									}

									db.prepareStatement(""DELETE FROM item WHERE item_id=?"");
									db.stmt->setInt(1, itemId);

								}
							}
							else {
								cout << ""This Item ID unavailable in this category!"" << endl;
							}
						}
						else {
							std::cin.clear();
							std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
							std::cout << ""Invalid input. Please enter an integer."" << std::endl;
						}
					}



				}
			}
			else {
				cout << ""Invalid Category ID!"" << endl;
			}


			_getch();
			break;
		case 3:
			return;
			break;
		default:
			break;
		}
	}
}









/*

---------------------------------------------------------------------------------------------------------------------------------------
	ALL ITEM
---------------------------------------------------------------------------------------------------------------------------------------

*/
void all_item(Account user) {

	Account temp = user;
	string itemName, category, category_name;
	int itemId, categoryId;
	vector<Item> items;
	vector<Category> categoryFind;
	DBConnection db;

	Menu itemMenu;
	itemMenu.addOption(""List out all item"");
	itemMenu.addOption(""Choose Item by Category"");
	itemMenu.addOption(""Choose Item by ID"");
	itemMenu.addOption(""Choose Item by Name"");
	itemMenu.addOption(""Back"");
	while (1) {
		itemMenu.header = ""----------------------\n"" + user.shopname + ""\nAll Item List\n----------------------\nChoose action\n"";
		switch (itemMenu.prompt())
		{
		case 1:
			items = Item::findItem();
			_getch();
			break;

		case 2:
			categoryFind = Category::findCategory();
			cout << ""\nInsert Category ID: "";
			cin >> categoryId;

			if (!cin.fail()) {
				db.prepareStatement(""SELECT category_name FROM category WHERE category_id=?"");
				db.stmt->setInt(1, categoryId);


				db.QueryResult();

				if (db.res->rowsCount() > 0) {
					while (db.res->next()) {
						category_name = db.res->getString(""category_name"");
						cout << ""You choose "" << category_name << ""\n"";

						category = category_name;

						items = Item::findItembyCategory(categoryId);
					}
				}
				else {
					cout << ""No item found!"" << endl;
				}
			}
			else {
				std::cin.clear();
				std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
				std::cout << ""Invalid input. Please enter an integer."" << std::endl;
			}

			_getch();
			break;
		case 3:
			cout << ""Insert Item Id to Select: "";
			cin >> itemId;
			items = Item::findItembyId(itemId);
			_getch();
			break;
		case 4:
			cout << ""Insert Item Name to Show: "";

			std::cin.clear();
			getline(cin, itemName);
			items = Item::findItembyName(itemName);
			_getch();
			break;
		case 5:
			return;
			break;
		default:
			break;
		}
	}
}









/*

---------------------------------------------------------------------------------------------------------------------------------------
	ALL CATEGORY
---------------------------------------------------------------------------------------------------------------------------------------

*/
void all_category(Account user) {

	Account temp = user;
	vector<Category> category;
	int category_id;
	DBConnection db;
	Category category1;
	string category_name, category_desc;

	Menu categoryMenu;
	categoryMenu.addOption(""List All Category"");
	categoryMenu.addOption(""Add New Category"");
	categoryMenu.addOption(""Edit Category"");
	categoryMenu.addOption(""Delete Category"");
	categoryMenu.addOption(""Back"");
	while (1) {
		categoryMenu.header = ""----------------------\n"" + user.shopname + ""\nCategory Section\n----------------------\nChoose action"";
		switch (categoryMenu.prompt())
		{
		case 1:
			category = Category::findCategory();
			_getch();
			break;
		case 2:
			add_category(user);
			break;
		case 3:
			category = Category::findCategory();

			cout << ""\nChoose category ID to edit = "";
			cin >> category_id;

			db.prepareStatement(""SELECT * FROM category WHERE category_id=?"");
			db.stmt->setInt(1, category_id);

			db.QueryResult();


			if (db.res->rowsCount() > 0) {
				while (db.res->next()) {
					category_name = db.res->getString(""category_name"");
					category_desc = db.res->getString(""category_desc"");
					edit_category(user, category_id, category_name, category_desc);
				}
			}
			else {
				cout << ""Category ID not available!"" << endl;
			}

			_getch();
			break;
		case 4:
			return;
			break;
		case 5:
			return;
			break;
		default:
			break;
		}
	}
}









/*

---------------------------------------------------------------------------------------------------------------------------------------
	ADD NEW CATEGORY
---------------------------------------------------------------------------------------------------------------------------------------

*/
void add_category(Account user) {

	Account temp = user;
	Category newcategory;

	Menu categoryMenu;
	categoryMenu.addOption(""Category Name"");
	categoryMenu.addOption(""Category Description"");
	categoryMenu.addOption(""Save"");
	categoryMenu.addOption(""Back"");
	while (1) {
		categoryMenu.header = ""----------------------\n"" + user.shopname + ""\nAdd New Category\n----------------------\nChoose action and input details"";
		switch (categoryMenu.prompt())
		{
		case 1:
			cout << ""Insert Category Name: "";
			std::cin.clear();
			//std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
			getline(cin, newcategory.categoryName);
			categoryMenu.setValue(0, newcategory.categoryName);
			break;
		case 2:
			cout << ""Insert Category Description: "";
			std::cin.clear();
			getline(cin, newcategory.categoryDesc);
			categoryMenu.setValue(1, newcategory.categoryDesc);
			break;

			
		case 3:
			newcategory.insert_category();
			cout << ""Category Successfully Saved"";
			_getch();
		case 4:
			return;
			break;
		default:
			break;
		}
	}
}








/*

---------------------------------------------------------------------------------------------------------------------------------------
	EDIT CURRENT CATEGORY
---------------------------------------------------------------------------------------------------------------------------------------

*/
void edit_category(Account user, int category_id, string category_name, string category_desc) {

	Account temp = user;
	Category newcategory;
	newcategory.categoryId = category_id;
	newcategory.categoryName = category_name;
	newcategory.categoryDesc = category_desc;

	Menu categoryMenu;
	categoryMenu.addOption(""Category ID"");
	categoryMenu.addOption(""Category Name"");
	categoryMenu.addOption(""Category Description"");
	categoryMenu.addOption(""Reset"");
	categoryMenu.addOption(""Save"");
	categoryMenu.addOption(""Back"");


	categoryMenu.setValue(0, to_string(category_id));
	categoryMenu.setValue(1, category_name);
	categoryMenu.setValue(2, category_desc);
	while (1) {
		categoryMenu.header = ""----------------------\n"" + user.shopname + ""\nAdd New Category\n----------------------\nChoose action and input details"";
		switch (categoryMenu.prompt())
		{
		case 1:
			cout << ""Category ID cannot be changed!"";
			_getch();
			break;
		case 2:
			cout << ""Insert new Category Name = \n"";
			cin >> newcategory.categoryName;

			categoryMenu.setValue(1, newcategory.categoryName);

			break;
		case 3:
			cout << ""Insert new Category Description = \n"";

			std::cin.clear();
			std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
			getline(cin, newcategory.categoryDesc);
			categoryMenu.setValue(2, newcategory.categoryDesc);

			break;
		case 4:
			categoryMenu.setValue(1, category_name);
			categoryMenu.setValue(2, category_desc);
			break;
		case 5:
			newcategory.update_category();
			cout << ""\nCategory Successfully Saved"";
			_getch();

			all_category(user);
			break;
		case 6:
			return;
			break;
		default:
			break;
		}
	}
}















/*

---------------------------------------------------------------------------------------------------------------------------------------
	MENU
---------------------------------------------------------------------------------------------------------------------------------------

*/
bool isNumeric(string input) {
	for (int i = 0; i < input.length(); i++) {
		// loop through the string and if the character at index is not digit return false
		if (!isdigit(input.at(i))) {
			return false;
		}
	}
	// if loop finishes means all is digit so return true
	return true;
}

"
9mZMVSu6,2023 Fall CP3 核電廠 AC Code,penguin71630,C++,Sunday 14th of January 2024 01:12:03 AM CDT,"#include <bits/stdc++.h>
using namespace std;
 
#define fastio ios_base::sync_with_stdio(false); cin.tie(0);
#define endl '\n'
 
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
 
/* -------------------------------------------- */
 
#define x first
#define y second
 
ll dis(pll a, pll b) {
    return (a.x-b.x) * (a.x-b.x) + (a.y-b.y) * (a.y-b.y);
}
 
struct info {
    ll a, b, w;
    // if w is positive => house
    // if w is 0 or negative => query
    info(ll a, ll b, ll w):
        a(a), b(b), w(w) {}
    info():
        a(0), b(0), w(0) {}
};
 
int n, q;
ll sumCost;
pll A, B;
vector<info> v;
vector<ll> ans;
 
void init() {
    cin >> n >> q;
    cin >> A.x >> A.y >> B.x >> B.y;
    v.clear();
    sumCost = 0;
    for (int i = 0; i < n; ++i) {
        pll p; ll c;
        cin >> p.x >> p.y >> c;
        v.emplace_back(info(dis(p, A), dis(p, B), c));
        sumCost += c;
    }
 
    ans.clear(); ans.resize(q, 0);
    for (int i = 0; i < q; ++i) {
        pll r; cin >> r.x >> r.y;
        v.emplace_back(info(r.x*r.x, r.y*r.y, -i));
    }
}
 
void divide(int l, int r) {
    if (l == r) return;
    
    int mid = (l+r) / 2;
    divide(l, mid);
    divide(mid+1, r);
 
    vector<info> t;
    int Lptr = l, Rptr = mid+1;
    ll cnt = 0;
 
    while (Lptr <= mid && Rptr <= r) {
        if (v[Lptr].b > v[Rptr].b) {
            if (v[Lptr].w > 0) cnt += v[Lptr].w;
            t.emplace_back(v[Lptr]); Lptr++;
        } else {
            if (v[Rptr].w <= 0) ans[-v[Rptr].w] += cnt;
            t.emplace_back(v[Rptr]); Rptr++;
        }
    }
 
    while (Lptr <= mid) {
        if (v[Lptr].w > 0) cnt += v[Lptr].w;
        t.emplace_back(v[Lptr]); Lptr++;
    }
    while (Rptr <= r) {
        if (v[Rptr].w <= 0) ans[-v[Rptr].w] += cnt;
        t.emplace_back(v[Rptr]); Rptr++;
    }
 
    for (int i = 0, j = l; j <= r; i++, j++) {
        v[j] = t[i];
    }
}
 
void solve() {
    sort(v.begin(), v.end(), [&](const info& s, const info& t) {
        return (s.a == t.a ? s.b < t.b : s.a > t.a);
    });
    divide(0, n+q-1);
 
    for (auto& x : ans) cout << sumCost - x << endl;
}
 
 
int main() {
    fastio
 
    init();
    solve();
 
    return 0;
}
"
gYbDChJj,Untitled,Maiky_M,YAML,Saturday 13th of January 2024 11:51:56 PM CDT,"apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-vol
  labels:
    app: nginx 
spec:
  strategy:
    type: RollingUpdate
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:latest
        ports:
        - containerPort: 80
        volumeMounts:
         - name: www-data
           mountPath: /usr/share/nginx/html
      volume:
      - name: www-data
        persistentVolumeClaim:
          claimName: nfc-claim  "
neJD5Hbu,Untitled,Maiky_M,YAML,Saturday 13th of January 2024 11:48:14 PM CDT,"apiVersion: v1 
kind: PersistentVolumeClaim
metadata:
  name: nfs-claim
spec:
  storageClassName: nfs
  accessModes:
    - ReadWriteMany 
  resources:
    requests:
      storage: 5G"
SSbw0RVz,Untitled,Maiky_M,YAML,Saturday 13th of January 2024 11:46:19 PM CDT,"apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: nfs-client
  # annotations:
  #   storageclass.kubernetes.io/is-default-class: ""true""
provisioner: cluster.local/nfs-subdir-external-provisioner #registry.k8s.io/nfs-subdir-external-provisioner
parameters:
  server: 10.129.0.6 #REMEMBER
  path: /NFS
  readOnly: ""false""
 "
BLDv9awR,About me,nerpon,JavaScript,Saturday 13th of January 2024 11:02:01 PM CDT,"Close people I consider friends.
 
Aze. Tommy. Woe. Lolo. Angel. mhm7753. Frames. Tim. Bento.
none of these are in order.


Information regarding roblox:
"" https://www.roblox.com/groups/13947145/Drippy-Clothing-Store#!/ ""about My clothing store which I make anime related content.

'Items' I own and wish to sell through gamepass purchases. Im trusted and willing to budge prices on my items
Dough boy shades: ""https://www.roblox.com/catalog/14354427873/Doughboys-Shades"" - Resale price 29k as of 1/14/2024. My price: 15k
Astra scythe ""https://www.roblox.com/catalog/13912445232/Astra-Scythe-of-the-Dominator"" - Resale price 9k as of 1/14/2023. My price 6k
FRMS SHADES ""https://www.roblox.com/catalog/15330508009/FRMS-SHADES""  - Reslae price 0 as of 1/14/2023. Pre selling for 5-3k."
bbwZyyXz,Nigerian scammers [13-1-3/2024],bombaires,AIMMS,Saturday 13th of January 2024 10:50:22 PM CDT,"<a href=""mailto:barristeradansonh@gmail.com"">barristeradansonh@gmail.com</a>
<a href=""mailto:b.a.rr.i.stera.d.an.s.onh@gmail.com"">b.a.rr.i.stera.d.an.s.onh@gmail.com</a>
<a href=""mailto:ba.r.r.is.t.e.r.ada.n.so.n.h@gmail.com"">ba.r.r.is.t.e.r.ada.n.so.n.h@gmail.com</a>
<a href=""mailto:b.ar.rist.e.ra.d.an.s.on.h@gmail.com"">b.ar.rist.e.ra.d.an.s.on.h@gmail.com</a>
<a href=""mailto:bar.r.i.ste.r.a.d.a.n.sonh@gmail.com"">bar.r.i.ste.r.a.d.a.n.sonh@gmail.com</a>
<a href=""mailto:b.arr.ist.erad.ans.o.n.h@gmail.com"">b.arr.ist.erad.ans.o.n.h@gmail.com</a>
<a href=""mailto:b.a.rr.ister.a.dans.onh@gmail.com"">b.a.rr.ister.a.dans.onh@gmail.com</a>
<a href=""mailto:b.arr.i.s.t.erad.ans.o.nh@gmail.com"">b.arr.i.s.t.erad.ans.o.nh@gmail.com</a>
<a href=""mailto:ba.rrist.era.da.n.s.o.nh@gmail.com"">ba.rrist.era.da.n.s.o.nh@gmail.com</a>
<a href=""mailto:ba.r.r.i.st.e.ra.dan.so.nh@gmail.com"">ba.r.r.i.st.e.ra.dan.so.nh@gmail.com</a>
<a href=""mailto:b.a.rr.i.s.t.erad.an.so.n.h@gmail.com"">b.a.rr.i.s.t.erad.an.so.n.h@gmail.com</a>
<a href=""mailto:ba.rr.is.ter.a.d.an.s.on.h@gmail.com"">ba.rr.is.ter.a.d.an.s.on.h@gmail.com</a>
<a href=""mailto:bar.ri.s.t.er.a.d.an.s.on.h@gmail.com"">bar.ri.s.t.er.a.d.an.s.on.h@gmail.com</a>
<a href=""mailto:barristeradan.son.h@gmail.com"">barristeradan.son.h@gmail.com</a>
<a href=""mailto:ba.r.ri.s.tera.d.a.n.so.n.h@gmail.com"">ba.r.ri.s.tera.d.a.n.so.n.h@gmail.com</a>
<a href=""mailto:b.a.r.ris.ter.ad.a.n.s.o.nh@gmail.com"">b.a.r.ris.ter.ad.a.n.s.o.nh@gmail.com</a>
<a href=""mailto:barristera.d.a.n.s.o.nh@gmail.com"">barristera.d.a.n.s.o.nh@gmail.com</a>
<a href=""mailto:bar.ri.s.t.er.adan.s.o.nh@gmail.com"">bar.ri.s.t.er.adan.s.o.nh@gmail.com</a>
<a href=""mailto:bar.r.i.stera.dan.s.o.n.h@gmail.com"">bar.r.i.stera.dan.s.o.n.h@gmail.com</a>
<a href=""mailto:b.a.rr.ister.adan.s.onh@gmail.com"">b.a.rr.ister.adan.s.onh@gmail.com</a>
<a href=""mailto:ba.rri.s.t.er.a.dans.on.h@gmail.com"">ba.rri.s.t.er.a.dans.on.h@gmail.com</a>
<a href=""mailto:b.a.rr.ist.erad.a.n.sonh@gmail.com"">b.a.rr.ist.erad.a.n.sonh@gmail.com</a>
<a href=""mailto:barr.i.s.te.r.a.da.nson.h@gmail.com"">barr.i.s.te.r.a.da.nson.h@gmail.com</a>
<a href=""mailto:b.arr.is.t.e.r.a.danson.h@gmail.com"">b.arr.is.t.e.r.a.danson.h@gmail.com</a>
<a href=""mailto:ba.rr.i.sterada.ns.o.nh@gmail.com"">ba.rr.i.sterada.ns.o.nh@gmail.com</a>
<a href=""mailto:barr.i.s.t.era.da.n.so.nh@gmail.com"">barr.i.s.t.era.da.n.so.nh@gmail.com</a>
<a href=""mailto:ba.rr.is.ter.ad.ans.o.nh@gmail.com"">ba.rr.is.ter.ad.ans.o.nh@gmail.com</a>
<a href=""mailto:b.a.r.riste.r.ad.ans.o.n.h@gmail.com"">b.a.r.riste.r.ad.ans.o.n.h@gmail.com</a>
<a href=""mailto:barr.i.ste.ra.danson.h@gmail.com"">barr.i.ste.ra.danson.h@gmail.com</a>
<a href=""mailto:bar.r.is.t.erad.an.s.o.n.h@gmail.com"">bar.r.is.t.erad.an.s.o.n.h@gmail.com</a>
<a href=""mailto:b.a.rr.is.tera.danson.h@gmail.com"">b.a.rr.is.tera.danson.h@gmail.com</a>
<a href=""mailto:b.ar.r.i.st.e.rada.ns.o.n.h@gmail.com"">b.ar.r.i.st.e.rada.ns.o.n.h@gmail.com</a>
<a href=""mailto:b.a.r.ri.st.e.r.ad.a.n.sonh@gmail.com"">b.a.r.ri.st.e.r.ad.a.n.sonh@gmail.com</a>
<a href=""mailto:b.a.rri.s.t.er.a.d.an.s.o.n.h@gmail.com"">b.a.rri.s.t.er.a.d.an.s.o.n.h@gmail.com</a>
<a href=""mailto:b.a.rris.te.r.a.d.a.ns.onh@gmail.com"">b.a.rris.te.r.a.d.a.ns.onh@gmail.com</a>
<a href=""mailto:ba.r.r.i.s.ter.ada.nsonh@gmail.com"">ba.r.r.i.s.ter.ada.nsonh@gmail.com</a>
<a href=""mailto:ba.r.r.ist.er.a.da.ns.onh@gmail.com"">ba.r.r.ist.er.a.da.ns.onh@gmail.com</a>
<a href=""mailto:b.a.r.ri.s.t.e.ra.dan.s.o.nh@gmail.com"">b.a.r.ri.s.t.e.ra.dan.s.o.nh@gmail.com</a>
<a href=""mailto:bar.rist.e.r.a.dan.s.onh@gmail.com"">bar.rist.e.r.a.dan.s.onh@gmail.com</a>
<a href=""mailto:ba.rr.isteradans.o.n.h@gmail.com"">ba.rr.isteradans.o.n.h@gmail.com</a>
<a href=""mailto:b.arri.st.e.r.a.da.n.s.o.n.h@gmail.com"">b.arri.st.e.r.a.da.n.s.o.n.h@gmail.com</a>
<a href=""mailto:b.ar.rist.eradan.sonh@gmail.com"">b.ar.rist.eradan.sonh@gmail.com</a>
<a href=""mailto:ba.rr.i.s.te.radan.s.o.n.h@gmail.com"">ba.rr.i.s.te.radan.s.o.n.h@gmail.com</a>
<a href=""mailto:barr.is.t.er.a.dans.o.nh@gmail.com"">barr.is.t.er.a.dans.o.nh@gmail.com</a>
<a href=""mailto:bar.ri.s.t.e.ra.d.a.n.s.o.n.h@gmail.com"">bar.ri.s.t.e.ra.d.a.n.s.o.n.h@gmail.com</a>
<a href=""mailto:b.ar.r.i.s.t.e.rad.a.n.so.n.h@gmail.com"">b.ar.r.i.s.t.e.rad.a.n.so.n.h@gmail.com</a>
<a href=""mailto:bar.ri.st.eradans.o.n.h@gmail.com"">bar.ri.st.eradans.o.n.h@gmail.com</a>
<a href=""mailto:bar.ris.t.e.ra.danso.nh@gmail.com"">bar.ris.t.e.ra.danso.nh@gmail.com</a>
<a href=""mailto:ba.rr.ist.er.ada.n.s.on.h@gmail.com"">ba.rr.ist.er.ada.n.s.on.h@gmail.com</a>
<a href=""mailto:b.ar.ri.ster.a.dan.so.nh@gmail.com"">b.ar.ri.ster.a.dan.so.nh@gmail.com</a>
<a href=""mailto:b.ar.r.i.st.e.r.a.danson.h@gmail.com"">b.ar.r.i.st.e.r.a.danson.h@gmail.com</a>
<a href=""mailto:bar.ris.terad.an.sonh@gmail.com"">bar.ris.terad.an.sonh@gmail.com</a>
<a href=""mailto:b.a.r.ris.t.e.r.adan.so.nh@gmail.com"">b.a.r.ris.t.e.r.adan.so.nh@gmail.com</a>
<a href=""mailto:b.a.r.r.i.st.e.r.a.da.n.so.n.h@gmail.com"">b.a.r.r.i.st.e.r.a.da.n.so.n.h@gmail.com</a>
<a href=""mailto:bar.ris.t.e.rad.a.ns.on.h@gmail.com"">bar.ris.t.e.rad.a.ns.on.h@gmail.com</a>
<a href=""mailto:ba.r.risterad.a.n.s.o.n.h@gmail.com"">ba.r.risterad.a.n.s.o.n.h@gmail.com</a>
<a href=""mailto:b.a.r.ris.te.radans.on.h@gmail.com"">b.a.r.ris.te.radans.on.h@gmail.com</a>
<a href=""mailto:b.ar.r.ist.er.a.dans.on.h@gmail.com"">b.ar.r.ist.er.a.dans.on.h@gmail.com</a>
<a href=""mailto:ba.r.riste.r.a.d.a.nson.h@gmail.com"">ba.r.riste.r.a.d.a.nson.h@gmail.com</a>
<a href=""mailto:ba.r.rist.e.r.a.dansonh@gmail.com"">ba.r.rist.e.r.a.dansonh@gmail.com</a>
<a href=""mailto:b.arri.ster.adan.son.h@gmail.com"">b.arri.ster.adan.son.h@gmail.com</a>
<a href=""mailto:ba.rri.s.terad.a.ns.o.nh@gmail.com"">ba.rri.s.terad.a.ns.o.nh@gmail.com</a>
<a href=""mailto:b.arrist.era.d.a.ns.onh@gmail.com"">b.arrist.era.d.a.ns.onh@gmail.com</a>
<a href=""mailto:b.arri.ster.a.d.ans.o.nh@gmail.com"">b.arri.ster.a.d.ans.o.nh@gmail.com</a>
<a href=""mailto:b.a.rristera.da.nso.nh@gmail.com"">b.a.rristera.da.nso.nh@gmail.com</a>
<a href=""mailto:b.a.rri.st.e.r.adans.o.nh@gmail.com"">b.a.rri.st.e.r.adans.o.nh@gmail.com</a>
<a href=""mailto:b.a.r.rist.e.r.a.d.an.s.onh@gmail.com"">b.a.r.rist.e.r.a.d.an.s.onh@gmail.com</a>
<a href=""mailto:b.arr.i.st.e.ra.d.an.sonh@gmail.com"">b.arr.i.st.e.ra.d.an.sonh@gmail.com</a>
<a href=""mailto:bar.ri.st.era.d.an.son.h@gmail.com"">bar.ri.st.era.d.an.son.h@gmail.com</a>
<a href=""mailto:ba.rrist.e.rad.a.n.s.o.n.h@gmail.com"">ba.rrist.e.rad.a.n.s.o.n.h@gmail.com</a>
<a href=""mailto:bar.r.is.ter.ad.a.ns.o.n.h@gmail.com"">bar.r.is.ter.ad.a.ns.o.n.h@gmail.com</a>
<a href=""mailto:b.ar.r.is.t.e.rad.a.nsonh@gmail.com"">b.ar.r.is.t.e.rad.a.nsonh@gmail.com</a>
<a href=""mailto:barri.ster.a.da.ns.on.h@gmail.com"">barri.ster.a.da.ns.on.h@gmail.com</a>
<a href=""mailto:b.ar.r.is.t.er.adan.s.on.h@gmail.com"">b.ar.r.is.t.er.adan.s.on.h@gmail.com</a>
<a href=""mailto:b.ar.ris.tera.dans.o.nh@gmail.com"">b.ar.ris.tera.dans.o.nh@gmail.com</a>
<a href=""mailto:ba.rriste.r.a.dansonh@gmail.com"">ba.rriste.r.a.dansonh@gmail.com</a>
<a href=""mailto:ba.rr.ist.e.rad.a.n.s.onh@gmail.com"">ba.rr.ist.e.rad.a.n.s.onh@gmail.com</a>
<a href=""mailto:b.a.r.ri.s.t.e.r.a.dan.s.o.nh@gmail.com"">b.a.r.ri.s.t.e.r.a.dan.s.o.nh@gmail.com</a>
<a href=""mailto:b.arri.st.e.r.a.d.a.nso.n.h@gmail.com"">b.arri.st.e.r.a.d.a.nso.n.h@gmail.com</a>
<a href=""mailto:ba.r.r.i.s.ter.ada.nso.nh@gmail.com"">ba.r.r.i.s.ter.ada.nso.nh@gmail.com</a>
<a href=""mailto:b.ar.r.i.st.e.ra.da.n.s.o.n.h@gmail.com"">b.ar.r.i.st.e.ra.da.n.s.o.n.h@gmail.com</a>
<a href=""mailto:b.a.rri.s.tera.d.an.s.o.nh@gmail.com"">b.a.rri.s.tera.d.an.s.o.nh@gmail.com</a>
<a href=""mailto:b.ar.ri.st.e.rad.a.n.so.n.h@gmail.com"">b.ar.ri.st.e.rad.a.n.so.n.h@gmail.com</a>
<a href=""mailto:b.a.rr.iste.rad.a.ns.o.n.h@gmail.com"">b.a.rr.iste.rad.a.ns.o.n.h@gmail.com</a>
<a href=""mailto:barr.is.te.ra.d.a.n.son.h@gmail.com"">barr.is.te.ra.d.a.n.son.h@gmail.com</a>
<a href=""mailto:b.ar.r.i.sterad.a.nsonh@gmail.com"">b.ar.r.i.sterad.a.nsonh@gmail.com</a>
<a href=""mailto:barri.s.t.er.adan.son.h@gmail.com"">barri.s.t.er.adan.son.h@gmail.com</a>
<a href=""mailto:b.ar.r.i.s.t.era.dan.son.h@gmail.com"">b.ar.r.i.s.t.era.dan.son.h@gmail.com</a>
<a href=""mailto:ba.rris.te.radan.s.o.nh@gmail.com"">ba.rris.te.radan.s.o.nh@gmail.com</a>
<a href=""mailto:bar.rist.e.rad.anso.n.h@gmail.com"">bar.rist.e.rad.anso.n.h@gmail.com</a>
<a href=""mailto:ba.r.r.is.te.radan.s.onh@gmail.com"">ba.r.r.is.te.radan.s.onh@gmail.com</a>
<a href=""mailto:bar.ris.te.radanso.nh@gmail.com"">bar.ris.te.radanso.nh@gmail.com</a>
<a href=""mailto:bar.r.i.s.te.r.a.d.a.nso.nh@gmail.com"">bar.r.i.s.te.r.a.d.a.nso.nh@gmail.com</a>
<a href=""mailto:ba.rri.steradansonh@gmail.com"">ba.rri.steradansonh@gmail.com</a>
<a href=""mailto:ba.r.r.i.s.ter.a.dan.s.onh@gmail.com"">ba.r.r.i.s.ter.a.dan.s.onh@gmail.com</a>
<a href=""mailto:b.ar.r.is.t.e.ra.d.an.sonh@gmail.com"">b.ar.r.is.t.e.ra.d.an.sonh@gmail.com</a>
<a href=""mailto:ba.r.riste.rad.a.ns.o.n.h@gmail.com"">ba.r.riste.rad.a.ns.o.n.h@gmail.com</a>
<a href=""mailto:b.a.rri.s.ter.a.d.an.s.o.nh@gmail.com"">b.a.rri.s.ter.a.d.an.s.o.nh@gmail.com</a>
<a href=""mailto:b.arr.i.s.t.e.ra.d.ansonh@gmail.com"">b.arr.i.s.t.e.ra.d.ansonh@gmail.com</a>
<a href=""mailto:ba.r.r.is.t.e.r.a.d.a.n.son.h@gmail.com"">ba.r.r.is.t.e.r.a.d.a.n.son.h@gmail.com</a>
<a href=""mailto:ba.r.r.is.t.er.ad.an.s.o.n.h@gmail.com"">ba.r.r.is.t.er.ad.an.s.o.n.h@gmail.com</a>
<a href=""mailto:barr.i.st.e.r.ad.a.nson.h@gmail.com"">barr.i.st.e.r.ad.a.nson.h@gmail.com</a>
<a href=""mailto:barr.is.t.e.r.a.d.a.ns.o.n.h@gmail.com"">barr.is.t.e.r.a.d.a.ns.o.n.h@gmail.com</a>
<a href=""mailto:b.a.r.rist.e.r.ad.a.n.so.nh@gmail.com"">b.a.r.rist.e.r.ad.a.n.so.nh@gmail.com</a>
<a href=""mailto:bar.r.i.s.te.r.a.danso.nh@gmail.com"">bar.r.i.s.te.r.a.danso.nh@gmail.com</a>
<a href=""mailto:barri.st.er.ada.ns.o.nh@gmail.com"">barri.st.er.ada.ns.o.nh@gmail.com</a>
<a href=""mailto:b.ar.r.i.s.t.er.ad.an.son.h@gmail.com"">b.ar.r.i.s.t.er.ad.an.son.h@gmail.com</a>
<a href=""mailto:b.ar.ri.ster.a.dan.so.n.h@gmail.com"">b.ar.ri.ster.a.dan.so.n.h@gmail.com</a>
<a href=""mailto:ba.r.ris.t.e.ra.d.a.n.s.onh@gmail.com"">ba.r.ris.t.e.ra.d.a.n.s.onh@gmail.com</a>
<a href=""mailto:bar.r.i.s.te.ra.dan.s.on.h@gmail.com"">bar.r.i.s.te.ra.dan.s.on.h@gmail.com</a>
<a href=""mailto:bar.r.ist.e.r.ad.an.s.on.h@gmail.com"">bar.r.ist.e.r.ad.an.s.on.h@gmail.com</a>
<a href=""mailto:b.arris.ter.ada.nso.nh@gmail.com"">b.arris.ter.ada.nso.nh@gmail.com</a>
<a href=""mailto:b.arr.i.s.te.r.a.dan.so.nh@gmail.com"">b.arr.i.s.te.r.a.dan.so.nh@gmail.com</a>
<a href=""mailto:b.arr.i.s.tera.d.ans.o.n.h@gmail.com"">b.arr.i.s.tera.d.ans.o.n.h@gmail.com</a>
<a href=""mailto:b.a.r.ris.t.e.r.a.d.a.ns.o.n.h@gmail.com"">b.a.r.ris.t.e.r.a.d.a.ns.o.n.h@gmail.com</a>
<a href=""mailto:b.a.r.ri.steradan.s.o.nh@gmail.com"">b.a.r.ri.steradan.s.o.nh@gmail.com</a>
<a href=""mailto:b.ar.ris.terad.an.s.onh@gmail.com"">b.ar.ris.terad.an.s.onh@gmail.com</a>
<a href=""mailto:ba.rr.i.s.t.er.a.d.an.s.o.n.h@gmail.com"">ba.rr.i.s.t.er.a.d.an.s.o.n.h@gmail.com</a>
<a href=""mailto:b.a.r.r.ist.eradan.s.o.n.h@gmail.com"">b.a.r.r.ist.eradan.s.o.n.h@gmail.com</a>
<a href=""mailto:ba.r.rister.ada.n.s.on.h@gmail.com"">ba.r.rister.ada.n.s.on.h@gmail.com</a>
<a href=""mailto:ba.r.riste.r.a.d.anso.n.h@gmail.com"">ba.r.riste.r.a.d.anso.n.h@gmail.com</a>
<a href=""mailto:barri.s.te.rada.nso.n.h@gmail.com"">barri.s.te.rada.nso.n.h@gmail.com</a>
<a href=""mailto:b.a.rri.s.ter.ad.a.n.s.o.nh@gmail.com"">b.a.rri.s.ter.ad.a.n.s.o.nh@gmail.com</a>
<a href=""mailto:b.ar.r.i.ster.a.d.a.nsonh@gmail.com"">b.ar.r.i.ster.a.d.a.nsonh@gmail.com</a>
<a href=""mailto:bar.ris.t.er.ada.n.s.on.h@gmail.com"">bar.ris.t.er.ada.n.s.on.h@gmail.com</a>
<a href=""mailto:b.a.r.ris.tera.d.a.ns.o.nh@gmail.com"">b.a.r.ris.tera.d.a.ns.o.nh@gmail.com</a>
<a href=""mailto:ba.rrist.e.r.ada.nso.n.h@gmail.com"">ba.rrist.e.r.ada.nso.n.h@gmail.com</a>
<a href=""mailto:bar.r.i.ster.a.d.a.n.s.o.nh@gmail.com"">bar.r.i.ster.a.d.a.n.s.o.nh@gmail.com</a>
<a href=""mailto:b.a.rristeradan.so.nh@gmail.com"">b.a.rristeradan.so.nh@gmail.com</a>
<a href=""mailto:barr.istera.da.nso.nh@gmail.com"">barr.istera.da.nso.nh@gmail.com</a>
<a href=""mailto:b.ar.r.is.te.ra.da.n.so.nh@gmail.com"">b.ar.r.is.te.ra.da.n.so.nh@gmail.com</a>
<a href=""mailto:b.a.r.rist.eradan.sonh@gmail.com"">b.a.r.rist.eradan.sonh@gmail.com</a>
<a href=""mailto:barris.te.r.ad.ans.o.n.h@gmail.com"">barris.te.r.ad.ans.o.n.h@gmail.com</a>
<a href=""mailto:b.arr.iste.r.ad.an.so.nh@gmail.com"">b.arr.iste.r.ad.an.so.nh@gmail.com</a>
<a href=""mailto:b.a.rri.s.te.ra.d.a.n.son.h@gmail.com"">b.a.rri.s.te.ra.d.a.n.son.h@gmail.com</a>
<a href=""mailto:ba.rr.i.st.e.r.a.d.a.n.son.h@gmail.com"">ba.rr.i.st.e.r.a.d.a.n.son.h@gmail.com</a>
<a href=""mailto:ba.r.ris.te.rad.an.s.o.n.h@gmail.com"">ba.r.ris.te.rad.an.s.o.n.h@gmail.com</a>
<a href=""mailto:b.a.rr.i.st.e.rad.an.son.h@gmail.com"">b.a.rr.i.st.e.rad.an.son.h@gmail.com</a>
<a href=""mailto:b.a.rr.i.st.e.ra.dan.s.o.n.h@gmail.com"">b.a.rr.i.st.e.ra.dan.s.o.n.h@gmail.com</a>
<a href=""mailto:b.a.r.r.i.s.t.er.ad.an.so.nh@gmail.com"">b.a.r.r.i.s.t.er.ad.an.so.nh@gmail.com</a>
<a href=""mailto:bar.r.ist.er.ad.a.ns.onh@gmail.com"">bar.r.ist.er.ad.a.ns.onh@gmail.com</a>
<a href=""mailto:ba.rr.i.ster.ada.n.sonh@gmail.com"">ba.rr.i.ster.ada.n.sonh@gmail.com</a>
<a href=""mailto:bar.r.i.ste.radan.s.o.n.h@gmail.com"">bar.r.i.ste.radan.s.o.n.h@gmail.com</a>
<a href=""mailto:ba.rr.is.t.e.rad.a.ns.on.h@gmail.com"">ba.rr.is.t.e.rad.a.ns.on.h@gmail.com</a>
<a href=""mailto:b.a.rr.i.ster.adanso.n.h@gmail.com"">b.a.rr.i.ster.adanso.n.h@gmail.com</a>
<a href=""mailto:b.arri.st.e.ra.danso.nh@gmail.com"">b.arri.st.e.ra.danso.nh@gmail.com</a>
<a href=""mailto:b.ar.ris.te.r.a.d.an.son.h@gmail.com"">b.ar.ris.te.r.a.d.an.son.h@gmail.com</a>
<a href=""mailto:bar.ri.s.terada.ns.o.n.h@gmail.com"">bar.ri.s.terada.ns.o.n.h@gmail.com</a>
<a href=""mailto:barris.t.er.ad.ans.on.h@gmail.com"">barris.t.er.ad.ans.on.h@gmail.com</a>
<a href=""mailto:b.a.rriste.r.a.dan.s.on.h@gmail.com"">b.a.rriste.r.a.dan.s.on.h@gmail.com</a>
<a href=""mailto:b.a.r.riste.r.ad.ans.o.nh@gmail.com"">b.a.r.riste.r.ad.ans.o.nh@gmail.com</a>
<a href=""mailto:b.a.r.r.is.t.era.dan.s.on.h@gmail.com"">b.a.r.r.is.t.era.dan.s.on.h@gmail.com</a>
<a href=""mailto:b.arri.ste.r.a.d.a.n.s.o.nh@gmail.com"">b.arri.ste.r.a.d.a.n.s.o.nh@gmail.com</a>
<a href=""mailto:b.arri.s.t.era.d.a.n.so.nh@gmail.com"">b.arri.s.t.era.d.a.n.so.nh@gmail.com</a>
<a href=""mailto:b.ar.r.iste.r.a.d.an.so.nh@gmail.com"">b.ar.r.iste.r.a.d.an.so.nh@gmail.com</a>
<a href=""mailto:b.arr.is.t.e.r.adan.so.n.h@gmail.com"">b.arr.is.t.e.r.adan.so.n.h@gmail.com</a>
<a href=""mailto:b.a.r.rist.eradanso.nh@gmail.com"">b.a.r.rist.eradanso.nh@gmail.com</a>
<a href=""mailto:b.a.rr.is.tera.d.a.ns.onh@gmail.com"">b.a.rr.is.tera.d.a.ns.onh@gmail.com</a>
<a href=""mailto:b.ar.r.is.t.er.a.da.ns.o.n.h@gmail.com"">b.ar.r.is.t.er.a.da.ns.o.n.h@gmail.com</a>
<a href=""mailto:barr.i.s.ter.a.d.ansonh@gmail.com"">barr.i.s.ter.a.d.ansonh@gmail.com</a>
<a href=""mailto:barri.s.te.r.ada.ns.o.nh@gmail.com"">barri.s.te.r.ada.ns.o.nh@gmail.com</a>
<a href=""mailto:bar.r.is.t.e.rada.n.s.o.n.h@gmail.com"">bar.r.is.t.e.rada.n.s.o.n.h@gmail.com</a>
<a href=""mailto:ba.r.risterada.ns.onh@gmail.com"">ba.r.risterada.ns.onh@gmail.com</a>
<a href=""mailto:bar.r.i.s.t.er.a.da.nso.n.h@gmail.com"">bar.r.i.s.t.er.a.da.nso.n.h@gmail.com</a>
<a href=""mailto:b.a.rriste.ra.d.a.n.s.on.h@gmail.com"">b.a.rriste.ra.d.a.n.s.on.h@gmail.com</a>
<a href=""mailto:ba.r.ri.s.te.r.ad.anson.h@gmail.com"">ba.r.ri.s.te.r.ad.anson.h@gmail.com</a>
<a href=""mailto:bar.ris.t.era.d.a.n.so.nh@gmail.com"">bar.ris.t.era.d.a.n.so.nh@gmail.com</a>
<a href=""mailto:b.arr.is.ter.a.d.a.n.sonh@gmail.com"">b.arr.is.ter.a.d.a.n.sonh@gmail.com</a>
<a href=""mailto:b.arr.i.st.er.a.d.an.s.o.nh@gmail.com"">b.arr.i.st.er.a.d.an.s.o.nh@gmail.com</a>
<a href=""mailto:b.a.r.ristera.d.anson.h@gmail.com"">b.a.r.ristera.d.anson.h@gmail.com</a>
<a href=""mailto:b.arr.ist.er.adanso.n.h@gmail.com"">b.arr.ist.er.adanso.n.h@gmail.com</a>
<a href=""mailto:barr.i.s.t.eradans.on.h@gmail.com"">barr.i.s.t.eradans.on.h@gmail.com</a>
<a href=""mailto:b.a.r.ri.s.tera.d.ans.o.nh@gmail.com"">b.a.r.ri.s.tera.d.ans.o.nh@gmail.com</a>
<a href=""mailto:b.a.r.ri.s.t.er.a.d.a.ns.onh@gmail.com"">b.a.r.ri.s.t.er.a.d.a.ns.onh@gmail.com</a>
<a href=""mailto:b.a.rr.i.s.t.er.ada.n.sonh@gmail.com"">b.a.rr.i.s.t.er.ada.n.sonh@gmail.com</a>
<a href=""mailto:barr.ist.era.d.anso.n.h@gmail.com"">barr.ist.era.d.anso.n.h@gmail.com</a>
<a href=""mailto:b.arr.ist.erad.ans.on.h@gmail.com"">b.arr.ist.erad.ans.on.h@gmail.com</a>
<a href=""mailto:b.ar.r.is.t.er.a.d.a.n.sonh@gmail.com"">b.ar.r.is.t.er.a.d.a.n.sonh@gmail.com</a>
<a href=""mailto:bar.r.i.s.t.e.r.ada.n.s.o.nh@gmail.com"">bar.r.i.s.t.e.r.ada.n.s.o.nh@gmail.com</a>
<a href=""mailto:ba.rr.ist.e.r.ad.a.nso.n.h@gmail.com"">ba.rr.ist.e.r.ad.a.nso.n.h@gmail.com</a>
<a href=""mailto:bar.r.i.st.eradan.son.h@gmail.com"">bar.r.i.st.eradan.son.h@gmail.com</a>
<a href=""mailto:bar.r.is.t.era.dans.o.nh@gmail.com"">bar.r.is.t.era.dans.o.nh@gmail.com</a>
<a href=""mailto:b.a.rr.i.s.te.rad.a.ns.o.n.h@gmail.com"">b.a.rr.i.s.te.rad.a.ns.o.n.h@gmail.com</a>
<a href=""mailto:b.ar.r.i.ste.r.a.da.ns.o.n.h@gmail.com"">b.ar.r.i.ste.r.a.da.ns.o.n.h@gmail.com</a>
<a href=""mailto:b.a.rr.is.t.er.ad.anso.nh@gmail.com"">b.a.rr.is.t.er.ad.anso.nh@gmail.com</a>
<a href=""mailto:ba.r.ri.sterad.an.s.on.h@gmail.com"">ba.r.ri.sterad.an.s.on.h@gmail.com</a>
<a href=""mailto:b.a.rr.is.t.er.adan.son.h@gmail.com"">b.a.rr.is.t.er.adan.son.h@gmail.com</a>
<a href=""mailto:ba.r.r.i.ste.r.a.da.nson.h@gmail.com"">ba.r.r.i.ste.r.a.da.nson.h@gmail.com</a>
<a href=""mailto:barr.i.s.te.rad.a.ns.on.h@gmail.com"">barr.i.s.te.rad.a.ns.on.h@gmail.com</a>
<a href=""mailto:bar.ristera.dansonh@gmail.com"">bar.ristera.dansonh@gmail.com</a>
<a href=""mailto:bar.r.i.ste.ra.dans.on.h@gmail.com"">bar.r.i.ste.ra.dans.on.h@gmail.com</a>
<a href=""mailto:ba.rr.i.s.tera.d.anso.n.h@gmail.com"">ba.rr.i.s.tera.d.anso.n.h@gmail.com</a>
<a href=""mailto:b.arris.terada.ns.o.n.h@gmail.com"">b.arris.terada.ns.o.n.h@gmail.com</a>
<a href=""mailto:b.ar.r.i.st.e.rad.ansonh@gmail.com"">b.ar.r.i.st.e.rad.ansonh@gmail.com</a>
<a href=""mailto:barr.i.st.eradan.s.o.nh@gmail.com"">barr.i.st.eradan.s.o.nh@gmail.com</a>
<a href=""mailto:b.a.rrist.eradanso.nh@gmail.com"">b.a.rrist.eradanso.nh@gmail.com</a>
<a href=""mailto:b.arri.s.te.r.a.dans.o.nh@gmail.com"">b.arri.s.te.r.a.dans.o.nh@gmail.com</a>
<a href=""mailto:ba.rrist.e.ra.d.a.ns.o.n.h@gmail.com"">ba.rrist.e.ra.d.a.ns.o.n.h@gmail.com</a>
<a href=""mailto:b.ar.r.ister.a.da.ns.o.n.h@gmail.com"">b.ar.r.ister.a.da.ns.o.n.h@gmail.com</a>
<a href=""mailto:b.a.r.ri.s.te.rad.an.s.on.h@gmail.com"">b.a.r.ri.s.te.rad.an.s.on.h@gmail.com</a>
<a href=""mailto:ba.rrist.erada.ns.o.n.h@gmail.com"">ba.rrist.erada.ns.o.n.h@gmail.com</a>"
vnN02bVQ,pdm_py5_install_log,maggotbrain,Python,Saturday 13th of January 2024 10:27:57 PM CDT,"pdm.termui: Error occurs
Traceback (most recent call last):
  File ""/home/local_user/.local/pipx/venvs/pdm/lib/python3.12/site-packages/pdm/termui.py"", line 246, in logging
    yield logger
  File ""/home/local_user/.local/pipx/venvs/pdm/lib/python3.12/site-packages/pdm/cli/actions.py"", line 154, in resolve_candidates_from_lockfile
    return {
           ^
  File ""/home/local_user/.local/pipx/venvs/pdm/lib/python3.12/site-packages/pdm/models/repositories.py"", line 605, in evaluate_candidates
    and not can.req.marker.evaluate(self.environment.marker_environment)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/local_user/.local/pipx/venvs/pdm/lib/python3.12/site-packages/pdm/models/markers.py"", line 50, in evaluate
    return self.inner.evaluate(environment)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/local_user/.local/pipx/venvs/pdm/lib/python3.12/site-packages/dep_logic/markers/multi.py"", line 139, in evaluate
    return all(m.evaluate(environment) for m in self.markers)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/local_user/.local/pipx/venvs/pdm/lib/python3.12/site-packages/dep_logic/markers/multi.py"", line 139, in <genexpr>
    return all(m.evaluate(environment) for m in self.markers)
               ^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/local_user/.local/pipx/venvs/pdm/lib/python3.12/site-packages/dep_logic/markers/single.py"", line 50, in evaluate
    return pkg_marker.evaluate(environment)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/local_user/.local/pipx/venvs/pdm/lib/python3.12/site-packages/packaging/markers.py"", line 252, in evaluate
    return _evaluate_markers(self._markers, current_environment)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/local_user/.local/pipx/venvs/pdm/lib/python3.12/site-packages/packaging/markers.py"", line 158, in _evaluate_markers
    groups[-1].append(_eval_op(lhs_value, op, rhs_value))
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/local_user/.local/pipx/venvs/pdm/lib/python3.12/site-packages/packaging/markers.py"", line 116, in _eval_op
    return spec.contains(lhs, prereleases=True)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/local_user/.local/pipx/venvs/pdm/lib/python3.12/site-packages/packaging/specifiers.py"", line 568, in contains
    normalized_item = _coerce_version(item)
                      ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/local_user/.local/pipx/venvs/pdm/lib/python3.12/site-packages/packaging/specifiers.py"", line 36, in _coerce_version
    version = Version(version)
              ^^^^^^^^^^^^^^^^
  File ""/home/local_user/.local/pipx/venvs/pdm/lib/python3.12/site-packages/packaging/version.py"", line 200, in __init__
    raise InvalidVersion(f""Invalid version: '{version}'"")
packaging.version.InvalidVersion: Invalid version: '6.1.0-17-amd64'
"
cjJrJnCb,triggers,berg,C,Saturday 13th of January 2024 09:49:37 PM CDT,"<triggers>
  <trigger
   enabled=""y""
   group=""1""
   ignore_case=""y""
   keep_evaluating=""y""
   match=""* You think that *'s * * skill has improved. *""
   send_to=""12""
   sequence=""100""
   sound=""C:\Program Files (x86)\MUSHclient\sounds\Metal_Gong-Dianakc-109711828.wav""
  >
  <send>
test = ""%2"" .. ""_"" .. ""%3"" ..  ""_"" .. ""%4""
SetVariable(test, (GetVariable(test) or 0) + 1)</send>
  </trigger>
  <trigger
   enabled=""y""
   group=""1""
   ignore_case=""y""
   match=""* You think that *'s * skill has improved. *""
   send_to=""12""
   sequence=""100""
   sound=""C:\Program Files (x86)\MUSHclient\sounds\gong1-94016.wav""
  >
  <send>
test = ""%2"" .. ""_"" .. ""%3""
SetVariable(test, (GetVariable(test) or 0) + 1)
Send(""ooc %2"" .. ""_"" .. ""%3"" .. ""+"")
--Send(""show wally's skills"")</send>
  </trigger>
  <trigger
   enabled=""y""
   group=""1""
   keep_evaluating=""y""
   match=""* You think your * * skill has improved. *""
   send_to=""12""
   sequence=""100""
  >
  <send>test = ""%2"" .. ""_"" .. ""%3""
SetVariable(test , (GetVariable(test ) or 0) + 1)</send>
  </trigger>
  <trigger
   enabled=""y""
   group=""1""
   keep_evaluating=""y""
   match=""* You think your * skill has improved. *""
   send_to=""12""
   sequence=""100""
   sound=""C:\Program Files (x86)\MUSHclient\sounds\Metal_Gong-Dianakc-109711828.wav""
  >
  <send>
SetVariable(""%2"" , (GetVariable(""%2"" ) or 0) + 1)</send>
  </trigger>
  <trigger
   enabled=""y""
   group=""1""
   keep_evaluating=""y""
   match=""* You think your *'* skill has improved. *""
   send_to=""12""
   sequence=""100""
  >
  <send>test = ""%2"" .. ""_"" .. ""%3""
SetVariable(test , (GetVariable(test ) or 0) + 1)</send>
  </trigger>
  <trigger
   enabled=""y""
   group=""1""
   keep_evaluating=""y""
   match=""* You think your language#* skill has improved. *""
   send_to=""12""
   sequence=""100""
  >
  <send>
SetVariable(""language_"" .. ""%2"" , (GetVariable(""language_"" ..""%2"" ) or 0) + 1)</send>
  </trigger>
  <trigger
   enabled=""y""
   group=""1""
   keep_evaluating=""y""
   match=""*You think your two-handed * skill has improved*""
   send_to=""12""
   sequence=""100""
  >
  <send>test = (""two_handed_"" .. ""%2"")
SetVariable(test , (GetVariable(test ) or 0) + 1)
Send(""ooc two_handed_%2"")</send>
  </trigger>
  <trigger
   enabled=""y""
   group=""1""
   keep_evaluating=""y""
   match=""* You think your * skill has improved. *""
   name=""imp""
   send_to=""12""
   sequence=""101""
   sound=""C:\Program Files (x86)\MUSHclient\sounds\gong1-94016.wav""
  >
  <send>Send(""ooc +1 %2"")

--ColourNote (""cyan"", ""blue"", GetVariable(""tell_skill""))
--output = Replace(""%2 is trash"", ""  "", ""_"", true)</send>
  </trigger>
</triggers>
"
