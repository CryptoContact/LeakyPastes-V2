id,title,username,language,date,content
drwhweW6,2024-02-04_stats.json,rdp_snitch,JSON,Sunday 4th of February 2024 06:16:09 PM CDT,"{
  ""ip"": {
    ""179.43.133.211"": 2,
    ""194.165.16.11"": 4,
    ""106.116.169.71"": 4,
    ""45.227.254.49"": 4,
    ""91.240.118.29"": 4,
    ""205.210.31.40"": 6,
    ""117.102.70.35"": 2,
    ""196.190.117.7"": 4,
    ""87.251.75.145"": 4,
    ""120.240.145.8"": 2,
    ""171.226.227.85"": 2,
    ""113.200.79.70"": 2,
    ""185.170.144.3"": 4,
    ""45.227.254.8"": 4,
    ""198.235.24.112"": 6,
    ""45.227.254.26"": 4,
    ""81.19.135.2"": 6,
    ""62.204.41.195"": 8,
    ""173.237.25.68"": 4,
    ""80.66.76.92"": 6,
    ""152.32.183.13"": 2,
    ""2.57.149.186"": 4,
    ""43.129.180.247"": 102,
    ""167.94.145.54"": 2,
    ""198.235.24.255"": 6,
    ""13.68.210.18"": 2,
    ""167.94.138.35"": 2,
    ""173.239.218.80"": 2,
    ""194.165.16.73"": 4,
    ""129.226.147.239"": 2,
    ""194.165.16.78"": 4,
    ""173.239.218.23"": 2,
    ""198.235.24.254"": 6
  },
  ""asn"": {
    ""AS51852"": 2,
    ""AS48721"": 12,
    ""AS4134"": 4,
    ""AS267784"": 12,
    ""AS57523"": 4,
    ""AS396982"": 24,
    ""AS38482"": 2,
    ""AS24757"": 4,
    ""AS208091"": 10,
    ""AS56040"": 2,
    ""AS7552"": 2,
    ""AS4837"": 2,
    ""AS197414"": 4,
    ""AS209588"": 6,
    ""AS59425"": 8,
    ""AS7979"": 4,
    ""AS135377"": 2,
    ""AS208312"": 4,
    ""AS132203"": 104,
    ""AS398705"": 2,
    ""AS8075"": 2,
    ""AS398324"": 2,
    ""AS62240"": 4
  },
  ""isp"": {
    ""Private Layer INC"": 2,
    ""Flyservers S.A."": 30,
    ""Chinanet"": 4,
    ""Chang Way Technologies Co. Limited"": 4,
    ""Google LLC"": 24,
    ""Biznet Networks"": 2,
    ""Ethiotelecom"": 4,
    ""Xhost Internet Solutions LP"": 14,
    ""China Mobile communications corporation"": 2,
    ""Viettel Corporation"": 2,
    ""CNC Group CHINA169 Shannxi Province Network"": 2,
    ""Horizon LLC"": 8,
    ""Servers.com, Inc."": 4,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Red Byte LLC"": 4,
    ""Aceville Pte.ltd"": 102,
    ""Censys, Inc."": 4,
    ""Microsoft Corporation"": 2,
    ""LogicWeb Inc."": 4,
    ""Tencent Cloud Computing (Beijing) Co"": 2
  },
  ""org"": {
    ""Private Layer Inc"": 2,
    ""Flyservers S.A"": 12,
    ""Chinanet HE"": 4,
    ""UAB Host Baltic"": 12,
    ""Chang Way Technologies Co. Limited"": 8,
    ""Palo Alto Networks, Inc"": 24,
    ""Pengadilan Agama KLS 1A Bandung"": 2,
    ""Unknown"": 110,
    ""Xhost Internet Solutions"": 10,
    ""China Mobile"": 2,
    ""VIETEL"": 2,
    ""Xhostis"": 4,
    ""Alviva Holding Limited"": 6,
    ""Horizon LLC"": 8,
    ""Servers.com, Inc."": 4,
    ""Ucloud Information Technology"": 2,
    ""Censys, Inc."": 2,
    ""Microsoft Azure Cloud (eastus)"": 2,
    ""Censys, Inc"": 2,
    ""NSQ-VENTURE"": 4
  },
  ""regionName"": {
    ""Zurich"": 2,
    ""Kaunas"": 12,
    ""Hebei"": 4,
    ""Vilnius"": 12,
    ""Moscow"": 12,
    ""California"": 28,
    ""West Java"": 2,
    ""Addis Ababa"": 4,
    ""North Holland"": 14,
    ""Guangdong"": 2,
    ""Ho Chi Minh"": 2,
    ""Shaanxi"": 2,
    ""Hesse"": 8,
    ""Texas"": 4,
    ""Virginia"": 4,
    ""Lesser Poland"": 4,
    ""Central and Western District"": 102,
    ""Michigan"": 2,
    ""North West"": 2
  },
  ""country"": {
    ""Switzerland"": 2,
    ""Lithuania"": 24,
    ""China"": 8,
    ""Russia"": 12,
    ""United States"": 38,
    ""Indonesia"": 2,
    ""Ethiopia"": 4,
    ""The Netherlands"": 14,
    ""Vietnam"": 2,
    ""Germany"": 8,
    ""Poland"": 4,
    ""Hong Kong"": 102,
    ""Singapore"": 2
  },
  ""account"": {
    ""Administr"": 20,
    ""Test"": 32,
    ""(empty)"": 16,
    ""jAjKUapcW"": 2,
    ""izUcUJ"": 2,
    ""IUiOOl"": 2,
    ""hello"": 110,
    ""a"": 2,
    ""etAbWGeaJ"": 2,
    ""KfJkxc"": 2,
    ""fXsOhr"": 2,
    ""Domain"": 14,
    ""Administrator"": 2,
    ""eXWQroFvp"": 2,
    ""kRuQzG"": 2,
    ""uQHafB"": 2,
    ""pamn"": 2,
    ""QePqZqiBx"": 2,
    ""VkHrdj"": 2,
    ""ehXxFN"": 2
  },
  ""keyboard"": {
    ""Unknown"": 222
  },
  ""client_build"": {
    ""Unknown"": 222
  },
  ""client_name"": {
    ""Unknown"": 222
  },
  ""ip_type"": {
    ""hosting"": 138,
    ""Unknown"": 74,
    ""proxy"": 4,
    ""mobile"": 2,
    ""hosting & proxy"": 4
  }
}"
43Z1gKLj,2024-02-04_stats.json,rdp_snitch,JSON,Sunday 4th of February 2024 06:15:08 PM CDT,"{
  ""ip"": {
    ""179.43.133.211"": 1,
    ""194.165.16.11"": 2,
    ""106.116.169.71"": 2,
    ""45.227.254.49"": 2,
    ""91.240.118.29"": 2,
    ""205.210.31.40"": 3,
    ""117.102.70.35"": 1,
    ""196.190.117.7"": 2,
    ""87.251.75.145"": 2,
    ""120.240.145.8"": 1,
    ""171.226.227.85"": 1,
    ""113.200.79.70"": 1,
    ""185.170.144.3"": 2,
    ""45.227.254.8"": 2,
    ""198.235.24.112"": 3,
    ""45.227.254.26"": 2,
    ""81.19.135.2"": 3,
    ""62.204.41.195"": 4,
    ""173.237.25.68"": 2,
    ""80.66.76.92"": 3,
    ""152.32.183.13"": 1,
    ""2.57.149.186"": 2,
    ""43.129.180.247"": 51,
    ""167.94.145.54"": 1,
    ""198.235.24.255"": 3,
    ""13.68.210.18"": 1,
    ""167.94.138.35"": 1,
    ""173.239.218.80"": 1,
    ""194.165.16.73"": 2,
    ""129.226.147.239"": 1,
    ""194.165.16.78"": 2,
    ""173.239.218.23"": 1,
    ""198.235.24.254"": 3
  },
  ""asn"": {
    ""AS51852"": 1,
    ""AS48721"": 6,
    ""AS4134"": 2,
    ""AS267784"": 6,
    ""AS57523"": 2,
    ""AS396982"": 12,
    ""AS38482"": 1,
    ""AS24757"": 2,
    ""AS208091"": 5,
    ""AS56040"": 1,
    ""AS7552"": 1,
    ""AS4837"": 1,
    ""AS197414"": 2,
    ""AS209588"": 3,
    ""AS59425"": 4,
    ""AS7979"": 2,
    ""AS135377"": 1,
    ""AS208312"": 2,
    ""AS132203"": 52,
    ""AS398705"": 1,
    ""AS8075"": 1,
    ""AS398324"": 1,
    ""AS62240"": 2
  },
  ""isp"": {
    ""Private Layer INC"": 1,
    ""Flyservers S.A."": 15,
    ""Chinanet"": 2,
    ""Chang Way Technologies Co. Limited"": 2,
    ""Google LLC"": 12,
    ""Biznet Networks"": 1,
    ""Ethiotelecom"": 2,
    ""Xhost Internet Solutions LP"": 7,
    ""China Mobile communications corporation"": 1,
    ""Viettel Corporation"": 1,
    ""CNC Group CHINA169 Shannxi Province Network"": 1,
    ""Horizon LLC"": 4,
    ""Servers.com, Inc."": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""Red Byte LLC"": 2,
    ""Aceville Pte.ltd"": 51,
    ""Censys, Inc."": 2,
    ""Microsoft Corporation"": 1,
    ""LogicWeb Inc."": 2,
    ""Tencent Cloud Computing (Beijing) Co"": 1
  },
  ""org"": {
    ""Private Layer Inc"": 1,
    ""Flyservers S.A"": 6,
    ""Chinanet HE"": 2,
    ""UAB Host Baltic"": 6,
    ""Chang Way Technologies Co. Limited"": 4,
    ""Palo Alto Networks, Inc"": 12,
    ""Pengadilan Agama KLS 1A Bandung"": 1,
    ""Unknown"": 55,
    ""Xhost Internet Solutions"": 5,
    ""China Mobile"": 1,
    ""VIETEL"": 1,
    ""Xhostis"": 2,
    ""Alviva Holding Limited"": 3,
    ""Horizon LLC"": 4,
    ""Servers.com, Inc."": 2,
    ""Ucloud Information Technology"": 1,
    ""Censys, Inc."": 1,
    ""Microsoft Azure Cloud (eastus)"": 1,
    ""Censys, Inc"": 1,
    ""NSQ-VENTURE"": 2
  },
  ""regionName"": {
    ""Zurich"": 1,
    ""Kaunas"": 6,
    ""Hebei"": 2,
    ""Vilnius"": 6,
    ""Moscow"": 6,
    ""California"": 14,
    ""West Java"": 1,
    ""Addis Ababa"": 2,
    ""North Holland"": 7,
    ""Guangdong"": 1,
    ""Ho Chi Minh"": 1,
    ""Shaanxi"": 1,
    ""Hesse"": 4,
    ""Texas"": 2,
    ""Virginia"": 2,
    ""Lesser Poland"": 2,
    ""Central and Western District"": 51,
    ""Michigan"": 1,
    ""North West"": 1
  },
  ""country"": {
    ""Switzerland"": 1,
    ""Lithuania"": 12,
    ""China"": 4,
    ""Russia"": 6,
    ""United States"": 19,
    ""Indonesia"": 1,
    ""Ethiopia"": 2,
    ""The Netherlands"": 7,
    ""Vietnam"": 1,
    ""Germany"": 4,
    ""Poland"": 2,
    ""Hong Kong"": 51,
    ""Singapore"": 1
  },
  ""account"": {
    ""Administr"": 10,
    ""Test"": 16,
    ""(empty)"": 8,
    ""jAjKUapcW"": 1,
    ""izUcUJ"": 1,
    ""IUiOOl"": 1,
    ""hello"": 55,
    ""a"": 1,
    ""etAbWGeaJ"": 1,
    ""KfJkxc"": 1,
    ""fXsOhr"": 1,
    ""Domain"": 7,
    ""Administrator"": 1,
    ""eXWQroFvp"": 1,
    ""kRuQzG"": 1,
    ""uQHafB"": 1,
    ""pamn"": 1,
    ""QePqZqiBx"": 1,
    ""VkHrdj"": 1,
    ""ehXxFN"": 1
  },
  ""keyboard"": {
    ""Unknown"": 111
  },
  ""client_build"": {
    ""Unknown"": 111
  },
  ""client_name"": {
    ""Unknown"": 111
  },
  ""ip_type"": {
    ""hosting"": 69,
    ""Unknown"": 37,
    ""proxy"": 2,
    ""mobile"": 1,
    ""hosting & proxy"": 2
  }
}"
dzALdn6h,Untitled,ZodWasTaken,Lua,Sunday 4th of February 2024 05:49:19 PM CDT,"monitor = peripheral.wrap(""back"")

success, blockData = turtle.inspect()
print(""Starting . . ."")
while(true) do
    success, blockData = turtle.inspect()
    if success then
        if blockData.state.age == 7 then
            turtle.select(1)
            turtle.dig()
            turtle.suck()
            turtle.select(1)
            turtle.dropUp()
            turtle.select(2)
            turtle.place()
         end
    end
    turtle.turnRight()
	os.sleep(1)
end"
SVenhuQ6,G2A.com Free Gift Card Guide Feb 2024,ounnuo,GetText,Sunday 4th of February 2024 05:36:31 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
PDF guide here:
https://drive.google.com/file/d/120kXNJWM5T5u3PGlkQeZCo_nLxzQIlkf/view?usp=g2a_refund_exploit_680891.pdf
 
Working as of
04 February 2024"
ZHwFFmgk,Naruto Movement System Hidden Dev Application,TheCubrixCode,Lua,Sunday 4th of February 2024 05:32:48 PM CDT,"-- Customization
local SPRINT_KEYNBIND = Enum.KeyCode.LeftShift
local CHAKRAJUMP_KEYBIND = Enum.KeyCode.LeftControl
local DASH_KEYBIND = Enum.KeyCode.Q
local DashCD = 1.5
local SprintSpeed = 30
-- random variables used
local UIS = game:GetService('UserInputService')
local ReplicatedStorage = game:GetService('ReplicatedStorage')
local Assets = ReplicatedStorage.Assets
local Player = game:GetService('Players').LocalPlayer
local Character = Player.Character
local Humanoid = Character:WaitForChild('Humanoid')
local WalkSpeed = Humanoid.WalkSpeed
local Animator = Humanoid:FindFirstChildOfClass('Animator')
local HumRP = Character.HumanoidRootPart
local RunAnimation = Animator:LoadAnimation(Assets.Animations.Movement.Misc.Run)
local DoubleJumpAnimation = Animator:LoadAnimation(Assets.Animations.Movement.Misc.DoubleJump)
local ForWardDashAnim = Animator:LoadAnimation(Assets.Animations.Movement.Dashes:WaitForChild(""FrontDash""))
local LeftDashAnim = Animator:LoadAnimation(Assets.Animations.Movement.Dashes:WaitForChild(""LeftDash""))
local RightDashAnim = Animator:LoadAnimation(Assets.Animations.Movement.Dashes:WaitForChild(""RightDash""))
local BackDashAnim = Animator:LoadAnimation(Assets.Animations.Movement.Dashes:WaitForChild(""BackDash""))
local LeftAerialAnim = Animator:LoadAnimation(Assets.Animations.Movement.AerialDashes:WaitForChild('LeftAerialDash'))
local RightAerialAnim = Animator:LoadAnimation(Assets.Animations.Movement.AerialDashes:WaitForChild('RightAerialDash'))
local ChakraJumpChargeAnim = Animator:LoadAnimation(Assets.Animations.Movement.ChakraJump:WaitForChild('ChakraJumpCharge'))
local ChakraJumpAnim = Animator:LoadAnimation(Assets.Animations.Movement.ChakraJump:WaitForChild('ChakraJump'))
-- Variables
local SPRINTING = false
local DashDebounce = false
local DashingDebounce = false
-- Setting Prioritzation
ForWardDashAnim.Priority = Enum.AnimationPriority.Action2
LeftDashAnim.Priority = Enum.AnimationPriority.Action2
RightDashAnim.Priority = Enum.AnimationPriority.Action2
BackDashAnim.Priority = Enum.AnimationPriority.Action2
LeftAerialAnim.Priority = Enum.AnimationPriority.Action2
RightDashAnim.Priority = Enum.AnimationPriority.Action2
-- Other Variables
local Velocity = 120
local debounce = false
local duration = 0.25
local MaxForce = 20000
local NumberOfJumps = 0
local Stun = false
local charging = false
local charge = 0
local RPS = 50
-- Jump Power
Humanoid.JumpPower = 70
local JumpPower = Humanoid.JumpPower
Humanoid.UseJumpPower = true
-- Checking input
UIS.InputBegan:Connect(function(input: InputObject, gameProcessedEvent: boolean) 
	if gameProcessedEvent then return end
	if input.KeyCode == SPRINT_KEYNBIND and not Stun then
		if not SPRINTING then
			SPRINTING = true
			Humanoid.WalkSpeed = 0
			Character.Animate.walk.WalkAnim.AnimationId = Assets.Animations.Movement.Misc.Run.AnimationId
			task.wait(.1)
			Humanoid.WalkSpeed = SprintSpeed
		else
			SPRINTING = false
			Humanoid.WalkSpeed = 0
			Character.Animate.walk.WalkAnim.AnimationId = 'rbxassetid://16245459598'
			task.wait(.1)
			Humanoid.WalkSpeed = WalkSpeed
		end
	elseif input.KeyCode == DASH_KEYBIND and not Stun then
		-- Dashing and checking direction
		if DashDebounce == false then
			DashDebounce = true
			local BV = Instance.new(""BodyVelocity"")
			BV.Parent = HumRP
			BV.MaxForce = Vector3.new(MaxForce,0,MaxForce)
			if LeftDown and ForwardDown then

				ForWardDashAnim:Play()
				DashingDebounce = true
				task.delay(duration, function()
					BV:Destroy()
				end)
				task.delay(DashCD,function()
					DashDebounce = false
				end)
				HumRP.CFrame = HumRP.CFrame * CFrame.Angles(0,math.rad(-45),0)
				task.spawn(function()
					repeat
						task.wait()
						BV.Velocity = HumRP.CFrame.RightVector * -Velocity
					until BV == nil
				end)
				
			elseif RightDown and ForwardDown then

				ForWardDashAnim:Play()
				DashingDebounce = true
				task.delay(duration, function()
					BV:Destroy()
				end)
				task.delay(DashCD,function()
					DashDebounce = false
				end)
				HumRP.CFrame = HumRP.CFrame * CFrame.Angles(0,math.rad(45),0)
				task.spawn(function()
					repeat
						task.wait()
						BV.Velocity = HumRP.CFrame.RightVector * Velocity
					until BV == nil
				end)
				
			elseif RightDown and BackDown then

				BackDashAnim:Play()
				DashingDebounce = true
				task.delay(duration, function()
					BV:Destroy()
				end)
				task.delay(DashCD,function()
					DashDebounce = false
				end)
				HumRP.CFrame = HumRP.CFrame * CFrame.Angles(0,math.rad(-45),0)

				task.spawn(function()
					repeat
						task.wait()
						BV.Velocity = HumRP.CFrame.RightVector * Velocity
					until BV == nil
				end)
			elseif LeftDown and BackDown then

				BackDashAnim:Play()
				DashingDebounce = true
				task.delay(duration, function()
					BV:Destroy()
				end)
				task.delay(DashCD,function()
					DashDebounce = false
				end)
				HumRP.CFrame = HumRP.CFrame * CFrame.Angles(0,math.rad(45),0)
				task.spawn(function()
					repeat
						task.wait()
						BV.Velocity = HumRP.CFrame.RightVector * -Velocity
					until BV == nil
				end)
				
			elseif ForwardDown then
				ForWardDashAnim:Play()
				DashingDebounce = true
				task.delay(duration, function()
					BV:Destroy()
				end)
				task.delay(DashCD,function()
					DashDebounce = false
				end)
				task.spawn(function()
					repeat
						task.wait()
						BV.Velocity = HumRP.CFrame.lookVector * Velocity
					until BV == nil
				end)
				

			elseif LeftDown then
				-- aerial dash check
				if NumberOfJumps < 1 then
					LeftDashAnim:Play()
				else
					LeftAerialAnim:Play()
				end
			
				DashingDebounce = true
				task.delay(duration, function()
					BV:Destroy()
				end)
				task.delay(DashCD,function()
					DashDebounce = false
				end)

				task.spawn(function()
					repeat
						task.wait()
						BV.Velocity = HumRP.CFrame.rightVector * -Velocity
					until BV == nil
				end)

			elseif RightDown then
				-- aerial dash check
				if NumberOfJumps < 1 then
					RightDashAnim:Play()
				else
					RightAerialAnim:Play()
				end
				DashingDebounce = true
				task.delay(duration, function()
					BV:Destroy()
				end)
				task.delay(DashCD,function()
					DashDebounce = false
				end)

				task.spawn(function()
					repeat
						task.wait()
						BV.Velocity = HumRP.CFrame.rightVector * Velocity
					until BV == nil
				end)
				
			elseif BackDown then

				BackDashAnim:Play()
				DashingDebounce = true
				task.delay(duration, function()
					BV:Destroy()
				end)
				task.delay(DashCD,function()
					DashDebounce = false
				end)

				task.spawn(function()
					repeat
						task.wait()
						BV.Velocity = HumRP.CFrame.lookVector * -Velocity
					until BV == nil
				end)
				
			else

				BackDashAnim:Play()
				DashingDebounce = true
				task.delay(duration, function()
					BV:Destroy()
				end)
				task.delay(DashCD,function()
					DashDebounce = false
				end)
				task.spawn(function()
					repeat
						task.wait()
						BV.Velocity = HumRP.CFrame.lookVector * -Velocity
					until BV == nil
				end)
				
			end
		end
	elseif input.KeyCode == CHAKRAJUMP_KEYBIND then
		-- checking if the user is on/near the floor to charge the jump
		local raycastParams = RaycastParams.new()
		local rayOrigin = HumRP.Position
		raycastParams.FilterDescendantsInstances = {script.Parent}
		raycastParams.FilterType = Enum.RaycastFilterType.Exclude
		local rayDirection = Vector3.new(HumRP.Position.X,HumRP.Position.Y-7,HumRP.Position.Z)
		local raycastResult = workspace:Raycast(rayOrigin, rayDirection, raycastParams)
		if not raycastResult then return end
			Stun = true
			Humanoid.WalkSpeed = 0
			Humanoid.JumpPower = 0
			SPRINTING = false
			charging = true
			Character.Animate.walk.WalkAnim.AnimationId = 'rbxassetid://16245459598'
			for i,v in pairs(Animator:GetPlayingAnimationTracks()) do
				v:Stop()
			end
			ChakraJumpChargeAnim:Play()
			task.wait(.4)
			ChakraJumpChargeAnim:AdjustSpeed(0)
			-- freezing the charge animation until its ready to jump
	end
end)
UIS.InputEnded:Connect(function(input: InputObject, gameProcessedEvent: boolean)  
	if gameProcessedEvent then return end
	if input.KeyCode == CHAKRAJUMP_KEYBIND and charging == true then
		-- release jump
		charging = false
		Stun = false
		-- play chakra jump effect server sided
		script.RemoteEvent:FireServer()
		ChakraJumpChargeAnim:AdjustSpeed(1)
		ChakraJumpChargeAnim:Stop()
		ChakraJumpAnim:Play()
		Humanoid.WalkSpeed = WalkSpeed
		Humanoid.JumpPower = JumpPower
		local BV = Instance.new('BodyVelocity')
		BV.Parent = HumRP
		BV.MaxForce = Vector3.new(MaxForce,MaxForce,MaxForce)
		BV.Velocity = HumRP.CFrame.upVector*(50+(100*(charge/100)))
		game.Debris:AddItem(BV,.5)
		charge = 0
	end
end)
local CanJump = false
local JumpCooldown = .2
local MaxJumps = 2
-- Double jump system and counting jumps for aerial dashing
Humanoid.StateChanged:Connect(function(oldstate, newstate)
	if Enum.HumanoidStateType.Landed == newstate then
		NumberOfJumps = 0
		CanJump = false
	elseif Enum.HumanoidStateType.Freefall == newstate then
		task.wait(JumpCooldown)
		CanJump = true
	elseif Enum.HumanoidStateType.Jumping == newstate then
		CanJump = false
		NumberOfJumps += 1
	end
end)
-- checking if they can double jump
UIS.JumpRequest:Connect(function()
	if CanJump and NumberOfJumps < MaxJumps and Humanoid.JumpPower ~= 0 then
		Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
		if NumberOfJumps == 1 then
			DoubleJumpAnimation:Play()
		end
	end
end)

-- checking which direction the user is moving for dashing
game:GetService('RunService').RenderStepped:Connect(function()
	local Player = game.Players.LocalPlayer
	local Char = Player.Character
	local Hum = Char:FindFirstChild(""Humanoid"")
		if UIS:IsKeyDown(Enum.KeyCode.W) then
			ForwardDown = true

		else
			ForwardDown = false
		end
		if UIS:IsKeyDown(Enum.KeyCode.A)  then
			LeftDown = true

		else
			LeftDown = false
		end
		if UIS:IsKeyDown(Enum.KeyCode.S) then
			BackDown = true

		else 
			BackDown = false
		end
		if UIS:IsKeyDown(Enum.KeyCode.D)then
			RightDown = true

		else 
			RightDown = false
		end
end)
-- charging for chakra dash
game:GetService('RunService').Stepped:Connect(function(Time,step)
	if charging then
		if (charge < 100) then
			local increment = RPS*step
			if (charge + increment) < 100 then
				charge += increment
				
			else
				charge = 100						
			end
		end
	end
end)"
T0yiKpY2,WooCommerce:  Disable WooCommerce admin features,YordanSoares,PHP,Sunday 4th of February 2024 05:14:49 PM CDT,"<?php
/**
 * WooCommerce:
 * Disable WooCommerce admin features
 */
add_filter( 'woocommerce_admin_features', function( $features ) {
    // Uncomment the features you want to be disabled
	$features_to_be_disabled = array(
		// 'activity-panels',
		// 'analytics',
		// 'product-block-editor',
		// 'coupons',
		// 'core-profiler',
		// 'customer-effort-score-tracks',
		// 'import-products-task',
		// 'experimental-fashion-sample-products',
		// 'shipping-smart-defaults',
		// 'shipping-setting-tour',
		// 'homescreen',
		// 'marketing',
		// 'mobile-app-banner',
		// 'navigation',
		// 'onboarding',
		// 'onboarding-tasks',
		// 'product-variation-management',
		// 'product-virtual-downloadable',
		// 'product-external-affiliate',
		// 'product-grouped',
		// 'remote-inbox-notifications',
		// 'remote-free-extensions',
		// 'payment-gateway-suggestions',
		// 'shipping-label-banner',
		// 'subscriptions',
		// 'store-alerts',
		// 'transient-notices',
		// 'woo-mobile-welcome',
		// 'wc-pay-promotion',
		// 'wc-pay-welcome-page',
	);
	 foreach( $features as $key => $feature ) {
		if ( in_array( $feature, $features_to_be_disabled ) ) {
			unset( $features[$key] );
		}
	 }
	return $features;
} );"
04YRhis9,latest,chemelli74,Python,Sunday 4th of February 2024 05:06:56 PM CDT,"""""""Support for Comelit SimpleHome.""""""
import asyncio
import functools
import threading
from abc import abstractmethod
from dataclasses import dataclass
from datetime import datetime
from http.cookies import SimpleCookie
from typing import Any

import aiohttp
import pint
from yarl import URL

from .const import (
    _LOGGER,
    ALARM_AREA_STATUS,
    ALARM_AREAS,
    ALARM_ZONE_STATUS,
    ALARM_ZONES,
    BRIDGE,
    CLIMATE,
    COVER,
    IRRIGATION,
    LIGHT,
    OTHER,
    SCENARIO,
    SLEEP_BETWEEN_BRIDGE_CALLS,
    SLEEP_BETWEEN_VEDO_CALLS,
    STATE_COVER,
    STATE_ON,
    VEDO,
    WATT,
    AlarmAreaState,
    AlarmZoneState,
)
from .exceptions import CannotAuthenticate, CannotConnect, CannotRetrieveData


@dataclass
class ComelitSerialBridgeObject:
    """"""Comelit SimpleHome Serial bridge class.""""""

    index: int
    name: str
    status: int
    human_status: str
    type: str
    val: int | dict[Any, Any]  # Temperature or Humidity (CLIMATE)
    protected: int
    zone: str
    power: float
    power_unit: str = WATT


@dataclass
class ComelitVedoAreaObject:
    """"""Comelit SimpleHome VEDO area class.""""""

    index: int
    name: str
    p1: bool
    p2: bool
    ready: bool
    armed: bool
    alarm: bool
    alarm_memory: bool
    sabotage: bool
    anomaly: bool
    in_time: bool
    out_time: bool
    human_status: AlarmAreaState


@dataclass
class ComelitVedoZoneObject:
    """"""Comelit SimpleHome VEDO zone class.""""""

    index: int
    name: str
    status_api: str
    status: int
    human_status: AlarmZoneState


class ComelitCommonApi:
    """"""Common API calls for Comelit SimpleHome devices.""""""

    def __init__(self, host: str, port: int, pin: int) -> None:
        """"""Initialize the session.""""""
        self.host = f""{host}:{port}""
        self.device_pin = pin
        self.base_url = f""http://{host}:{port}""
        self._headers = {
            ""User-Agent"": ""Mozilla/5.0 (X11; Fedora; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0"",
            ""Accept-Language"": ""en-GB,en;q=0.5"",
            ""X-Requested-With"": ""XMLHttpRequest"",
            ""Connection"": ""keep-alive"",
        }
        self._session: aiohttp.ClientSession

    async def _get_page_result(
        self, page: str, reply_json: bool = True
    ) -> tuple[int, dict[str, Any]]:
        """"""Return status and data from a GET query.""""""
        _LOGGER.debug(""GET page %s [%s]"", page, self.host)
        timestamp = datetime.now().strftime(""%Y-%m-%d %H:%M:%S"")
        url = f""{self.base_url}{page}&_={timestamp}""
        try:
            response = await self._session.get(
                url,
                headers=self._headers,
                timeout=10,
            )
        except (asyncio.TimeoutError, aiohttp.ClientConnectorError) as exc:
            raise CannotConnect(""Connection error during GET"") from exc

        _LOGGER.debug(""GET response %s [%s]"", await response.text(), self.host)

        if response.status != 200:
            raise CannotRetrieveData(f""GET response status {response.status}"")

        if not reply_json:
            _LOGGER.debug(""GET response is empty [%s]"", self.host)
            return response.status, {}

        return response.status, await response.json()

    async def _post_page_result(
        self, page: str, payload: dict[str, Any]
    ) -> SimpleCookie:
        """"""Return status and data from a POST query.""""""
        _LOGGER.debug(""POST page %s [%s]"", page, self.host)
        url = f""{self.base_url}{page}""
        try:
            response = await self._session.post(
                url,
                data=payload,
                headers=self._headers,
                timeout=10,
            )
        except (asyncio.TimeoutError, aiohttp.ClientConnectorError) as exc:
            raise CannotConnect(""Connection error during POST"") from exc

        _LOGGER.debug(""POST response %s [%s]"", await response.text(), self.host)

        if response.status != 200:
            raise CannotRetrieveData(f""POST response status {response.status}"")

        return response.cookies

    async def _is_session_active(self) -> bool:
        """"""Check if aiohttp session is still active.""""""
        if not hasattr(self, ""_session"") or self._session.closed:
            return False

        return True

    async def _check_logged_in(self, host_type: str) -> bool:
        """"""Check if login is active.""""""

        reply_status, reply_json = await self._get_page_result(""/login.json"")

        _LOGGER.debug(""%s login reply: %s"", host_type, reply_json)
        if host_type == BRIDGE:
            logged = reply_json[""domus""] != ""000000000000""
        else:
            logged = reply_json[""logged""] == 1

        return logged

    async def _sleep_between_call(self, seconds: float) -> None:
        """"""Sleep between one call and the next one.""""""
        _LOGGER.debug(""Sleeping for %s seconds before next call"", seconds)
        await asyncio.sleep(seconds)

    @abstractmethod
    async def login(self) -> bool:
        """"""Login to Comelit device.""""""

    async def _login(self, payload: dict[str, Any], host_type: str) -> bool:
        """"""Login into Comelit device.""""""
        _LOGGER.debug(""Logging into host %s [%s]"", self.host, host_type)

        if not await self._is_session_active():
            _LOGGER.debug(""Creating HTTP ClientSession"")
            jar = aiohttp.CookieJar(unsafe=True)
            connector = aiohttp.TCPConnector(force_close=True)
            self._session = aiohttp.ClientSession(cookie_jar=jar, connector=connector)

        if await self._check_logged_in(host_type):
            return True

        cookies = await self._post_page_result(""/login.cgi"", payload)
        _LOGGER.debug(""Cookies for host %s: %s"", self.host, cookies)

        if not cookies:
            _LOGGER.warning(
                ""Authentication failed for host %s [%s]: no cookies received"",
                self.host,
                host_type,
            )
            raise CannotAuthenticate

        self._session.cookie_jar.update_cookies(cookies, URL(self.base_url))

        return await self._check_logged_in(host_type)

    async def logout(self) -> None:
        """"""Comelit Simple Home logout.""""""
        if await self._is_session_active():
            payload = {""logout"": 1}
            await self._post_page_result(""/login.cgi"", payload)
            self._session.cookie_jar.clear()

    async def close(self) -> None:
        """"""Comelit Simple Home close session.""""""
        if await self._is_session_active():
            await self._session.close()


class ComeliteSerialBridgeApi(ComelitCommonApi):
    """"""Queries Comelit SimpleHome Serial bridge.""""""

    def __init__(self, host: str, port: int, bridge_pin: int) -> None:
        """"""Initialize the session.""""""
        super().__init__(host, port, bridge_pin)
        self._devices: dict[str, dict[int, ComelitSerialBridgeObject]] = {}
        self._last_clima_command: datetime | None = None
        self._semaphore = threading.Semaphore()

    async def _translate_device_status(self, dev_type: str, dev_status: int) -> str:
        """"""Makes status human readable.""""""

        if dev_type == COVER:
            return STATE_COVER[dev_status]

        return ""on"" if dev_status == STATE_ON else ""off""

    async def set_clima_status(self, index: int, action: str, temp: float = 0) -> bool:
        """"""Set clima status.

        action:
            auto, man, on, off, set

        """"""
        self._semaphore.acquire()
        if self._last_clima_command:
            delta_seconds = SLEEP_BETWEEN_BRIDGE_CALLS - round(
                (datetime.now() - self._last_clima_command).total_seconds(), 2
            )
            if delta_seconds > 0:
                _LOGGER.debug(
                    ""Climate calls needs to be queued (%ss) for proper execution"",
                    delta_seconds,
                )
                await self._sleep_between_call(delta_seconds)

        reply_status = await self._get_page_result(
            f""/user/action.cgi?clima={index}&thermo={action}&val={int(temp*10)}"", False
        )
        self._last_clima_command = datetime.now()
        self._semaphore.release()
        return reply_status == 200

    async def set_device_status(
        self, device_type: str, index: int, action: int
    ) -> bool:
        """"""Set device action.

        action:
            0 = off/close
            1 = on/open

        """"""
        reply_status = await self._get_page_result(
            f""/user/action.cgi?type={device_type}&num{action}={index}"", False
        )
        return reply_status == 200

    async def get_device_status(self, device_type: str, index: int) -> int:
        """"""Get device status.""""""
        reply_status, reply_json = await self._get_page_result(
            f""/user/icon_status.json?type={device_type}""
        )
        _LOGGER.debug(
            ""Device %s[%s] status: %s"", device_type, index, reply_json[""status""][index]
        )
        return reply_json[""status""][index]

    async def login(self) -> bool:
        """"""Login to Serial Bridge device.""""""
        payload = {""dom"": self.device_pin}
        return await self._login(payload, BRIDGE)

    async def get_all_devices(self) -> dict[str, dict[int, ComelitSerialBridgeObject]]:
        """"""Get all connected devices.""""""

        _LOGGER.debug(""Getting all devices for host %s"", self.host)

        loop = asyncio.get_running_loop()
        ureg = await loop.run_in_executor(
            None, functools.partial(pint.UnitRegistry, cache_folder="":auto:"")
        )
        ureg.default_format = ""~""

        for dev_type in (CLIMATE, COVER, LIGHT, IRRIGATION, OTHER, SCENARIO):
            reply_status, reply_json = await self._get_page_result(
                f""/user/icon_desc.json?type={dev_type}""
            )
            _LOGGER.debug(
                ""List of devices of type %s: %s"",
                dev_type,
                reply_json,
            )
            reply_counter_json: dict[str, Any] = {}
            if dev_type == OTHER and reply_json[""num""] > 0:
                reply_status, reply_counter_json = await self._get_page_result(
                    ""/user/counter.json""
                )
            devices = {}
            for i in range(reply_json[""num""]):
                # Guard against ""scenario"", that has 32 devices even if none is configured
                if reply_json[""desc""][i] == """":
                    continue
                status = reply_json[""status""][i]
                power = 0.0
                if instant_values := reply_counter_json.get(""instant""):
                    instant = ureg(instant_values[i])
                    if not instant.dimensionless:
                        power = ureg.convert(
                            instant.magnitude, str(instant.units), WATT
                        )
                dev_info = ComelitSerialBridgeObject(
                    index=i,
                    name=reply_json[""desc""][i],
                    status=status,
                    human_status=await self._translate_device_status(dev_type, status),
                    type=dev_type,
                    val=reply_json[""val""][i],
                    protected=reply_json[""protected""][i],
                    zone=reply_json[""env_desc""][reply_json[""env""][i]]
                    if not dev_type == SCENARIO
                    else """",
                    power=power,
                )
                devices.update({i: dev_info})
            self._devices.update({dev_type: devices})

        return self._devices


class ComelitVedoApi(ComelitCommonApi):
    """"""Queries Comelit SimpleHome VEDO alarm.""""""

    _json_data: list[dict[Any, Any]] = [{}, {}, {}, {}, {}]

    async def _translate_zone_status(
        self, zone: ComelitVedoZoneObject
    ) -> AlarmZoneState:
        """"""Translate ZONE status.""""""

        for status in ALARM_ZONE_STATUS:
            if zone.status & status != 0:
                return ALARM_ZONE_STATUS[status]

        return AlarmZoneState.REST

    async def _translate_area_status(
        self, area: ComelitVedoAreaObject
    ) -> AlarmAreaState:
        """"""Translate AREA status.""""""

        for field in ALARM_AREA_STATUS:
            if getattr(area, field):
                return ALARM_AREA_STATUS[field]

        return AlarmAreaState.DISARMED

    async def _create_area_object(
        self, json_area_desc: dict[str, Any], json_area_stat: dict[str, Any], index: int
    ) -> ComelitVedoAreaObject:
        """"""Get area status.""""""

        area = ComelitVedoAreaObject(
            index=index,
            name=json_area_desc[""description""][index],
            p1=json_area_desc[""p1_pres""][index],
            p2=json_area_desc[""p2_pres""][index],
            ready=json_area_stat[""ready""][index],
            armed=json_area_stat[""armed""][index],
            alarm=json_area_stat[""alarm""][index],
            alarm_memory=json_area_stat[""alarm_memory""][index],
            sabotage=json_area_stat[""sabotage""][index],
            anomaly=json_area_stat[""anomaly""][index],
            in_time=json_area_stat[""in_time""][index],
            out_time=json_area_stat[""out_time""][index],
            human_status=AlarmAreaState.UNKNOWN,
        )
        area.human_status = await self._translate_area_status(area)
        _LOGGER.debug(area)
        return area

    async def _create_zone_object(
        self, json_zone_desc: dict[str, Any], json_zone_stat: dict[str, Any], index: int
    ) -> ComelitVedoZoneObject:
        """"""Create zone object.""""""

        status_api = json_zone_stat[""status""].split("","")[index]

        zone = ComelitVedoZoneObject(
            index=index,
            name=json_zone_desc[""description""][index],
            status=int(status_api, 16),
            status_api=status_api,
            human_status=AlarmZoneState.UNKNOWN,
        )
        zone.human_status = await self._translate_zone_status(zone)
        _LOGGER.debug(zone)
        return zone

    async def _async_get_page_data(
        self, desc: str, page: str, present_check: str | int | None = None
    ) -> tuple[bool, dict[str, Any]]:
        """"""Return status and data from a specific GET query.""""""
        reply_status, reply_json = await self._get_page_result(page)
        _LOGGER.debug(""Alarm %s: %s"", desc, reply_json)
        present = present_check in reply_json[""present""] if ""_desc"" in page else True
        return (reply_json[""logged""] and present), reply_json

    async def set_zone_status(
        self, index: int, action: str, force: bool = False
    ) -> bool:
        """"""Set zone action.

        action:
            tot = enable
            dis = disable

        index:
            32 = all zones
             n = specific zone

        force:
            False = don't force action
            True  = force action

        """"""

        reply_status = await self._get_page_result(
            f""/action.cgi?vedo=1&{action}={index}&force={int(force)}"", False
        )
        return reply_status == 200

    async def login(self) -> bool:
        """"""Login to VEDO system.""""""
        payload = {""code"": self.device_pin}
        return await self._login(payload, VEDO)

    async def get_area_status(
        self, area: ComelitVedoAreaObject
    ) -> ComelitVedoAreaObject:
        """"""Get AREA status.""""""

        reply_status, reply_json_area_stat = await self._async_get_page_data(
            ""AREA statistics"", ""/user/area_stat.json""
        )
        description = {""description"": area.name, ""p1_pres"": area.p1, ""p2_pres"": area.p2}

        return await self._create_area_object(
            description, reply_json_area_stat, area.index
        )

    async def get_all_areas_and_zones(
        self,
    ) -> dict[str, dict[int, Any]]:
        """"""Get all VEDO system AREA and ZONE.""""""

        queries: dict[int, dict[str, Any]] = {
            1: {
                ""desc"": ""AREA description"",
                ""page"": ""/user/area_desc.json"",
                ""present"": 1,
            },
            2: {
                ""desc"": ""ZONE description"",
                ""page"": ""/user/zone_desc.json"",
                ""present"": ""1"",
            },
            3: {
                ""desc"": ""AREA statistics"",
                ""page"": ""/user/area_stat.json"",
                ""present"": None,
            },
            4: {
                ""desc"": ""ZONE statistics"",
                ""page"": ""/user/zone_stat.json"",
                ""present"": None,
            },
        }

        for index, info in queries.items():
            desc = info[""desc""]
            page = info[""page""]
            present = info[""present""]
            if ""_desc"" in page and self._json_data[index]:
                _LOGGER.debug(""Data for %s already retrieved, skipping"", desc)
                continue
            await self._sleep_between_call(SLEEP_BETWEEN_VEDO_CALLS)
            reply_status, reply_json = await self._async_get_page_data(
                desc, page, present
            )
            if not reply_status:
                _LOGGER.info(""Login expired accessing %s, re-login attempt"", desc)
                await self.login()
                await self._sleep_between_call(SLEEP_BETWEEN_VEDO_CALLS)
                reply_status, reply_json = await self._async_get_page_data(
                    desc, page, present
                )
                if not reply_status:
                    raise CannotRetrieveData(
                        ""Login expired and not working after a retry""
                    )
                _LOGGER.info(""Re-login successful"")
            self._json_data.insert(index, reply_json)

        list_areas: list[int] = self._json_data[1][""present""]
        areas = {}
        for i in range(len(list_areas)):
            if not list_areas[i]:
                _LOGGER.debug(""Alarm skipping non present AREA [%i]"", i)
                continue
            area = await self._create_area_object(
                self._json_data[1], self._json_data[3], i
            )
            areas.update({i: area})

        list_zones: list[int] = self._json_data[2][""present""]
        zones = {}
        for i in range(len(list_zones)):
            if not int(list_zones[i]):
                _LOGGER.debug(""Alarm skipping non present ZONE [%i]"", i)
                continue
            zone = await self._create_zone_object(
                self._json_data[2], self._json_data[4], i
            )
            zones.update({i: zone})

        return {ALARM_AREAS: areas, ALARM_ZONES: zones}
"
AgN4chrt,List of all FREE Crypto Airdrops!,jusst2k4,GetText,Sunday 4th of February 2024 05:06:50 PM CDT,"Looking for a list of all the current, free airdrops from all blockchains?
Check out NetDrop - https://claim-netdrop.netlify.app/

NetDrop provides a list of all active airdrops, which is updated every minute so you can claim the newest airdrops as soon as they are available.
No more finding airdrops; the airdrops find you.

Visit NetDrop completely free now, no sign-up required.
https://claim-netdrop.netlify.app/

130868"
5LLkCT8q,Untitled,Rofyda_Elghadban1,C++,Sunday 4th of February 2024 04:51:58 PM CDT," #include <bits/stdc++.h> 
 #define ll long long
 #define ull unsigned long long
 #define pi 3.141592654
 #define NUM 1e18
 #define Mod  1'000'000'007
 #define fixed(n) fixed<<setprecision(n)
 #define cin(v) for(auto &i:v) cin >> i ;
 #define cout(v) for(auto &i:v) cout << i  <<"" "";
 #define vowel(x) (x=='e'||x=='a'||x=='i'||x=='o'||x=='u')
 #define small(x) (x>=97&&x<=122)
 #define capital(x) (x>=65&&x<=90)
 #define Tolower(s) transform(s.begin(),s.end(),s.begin(),::tolower);
 #define Toupper(s) transform(s.begin(),s.end(),s.begin(),::toupper); 
 #define sz(x) (int)(x.size())
 #define all(v) ((v).begin()), ((v).end())
 #define allr(v) ((v).rbegin()), ((v).rend())
 #define updmax(a,b) a=max(a,b)
 #define updmin(a,b) a=min(a,b)
 #define ceil(a,b) ((a/b)+(a%b?1:0))
 /* asc -> 1 2 3 ,des -> 3 2 1 */

 /***********************************************************************************/
 using namespace std;
 void Rofyda_Elghadban(){
  #ifndef ONLINE_JUDGE   
    freopen(""input.txt"", ""r"", stdin), freopen(""output.txt"", ""w"", stdout);
   #endif
    ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);
 }

 bool BS(ll n,ll k,vector<ll>&v,ll s){
  ll temp=v[0]+s;
  int counter=1;
  for(int i=1;i<n;i++){
    if(v[i]>=temp){
      temp=v[i]+s;
      counter++;
    }else{
      continue;
    }
  }
  if(counter<=k){
    return true;
  }else{
    return false;
  }
 }

 void solve(){
  ll n,k;
  cin>>n>>k;
  vector<ll>v(n);
  cin(v);
  ll l=0,r=1e9,ans=0;
  while(l<=r){
    ll mid=l+(r-l)/2;
    if(BS(n,k,v,mid)){
      ans=mid;
      r=mid-1;
    }else{
      l=mid+1;
    }
  }
  cout<<ans<<""\n"";
 }

 int main(){
  Rofyda_Elghadban(); 
  int t;
  cin>>t;
  while(t--){
    solve();
  }
  // solve();
  return 0;
 }"
ZxGJfrMy,rework,chemelli74,Python,Sunday 4th of February 2024 04:51:00 PM CDT,"""""""Support for Comelit SimpleHome.""""""
import asyncio
import functools
from abc import abstractmethod
from dataclasses import dataclass
from datetime import datetime
from http.cookies import SimpleCookie
from typing import Any

import aiohttp
import pint
from yarl import URL

from .const import (
    _LOGGER,
    ALARM_AREA_STATUS,
    ALARM_AREAS,
    ALARM_ZONE_STATUS,
    ALARM_ZONES,
    BRIDGE,
    CLIMATE,
    COVER,
    IRRIGATION,
    LIGHT,
    OTHER,
    SCENARIO,
    SLEEP_BETWEEN_BRIDGE_CALLS,
    SLEEP_BETWEEN_VEDO_CALLS,
    STATE_COVER,
    STATE_ON,
    VEDO,
    WATT,
    AlarmAreaState,
    AlarmZoneState,
)
from .exceptions import CannotAuthenticate, CannotConnect, CannotRetrieveData


@dataclass
class ComelitSerialBridgeObject:
    """"""Comelit SimpleHome Serial bridge class.""""""

    index: int
    name: str
    status: int
    human_status: str
    type: str
    val: int | dict[Any, Any]  # Temperature or Humidity (CLIMATE)
    protected: int
    zone: str
    power: float
    power_unit: str = WATT


@dataclass
class ComelitVedoAreaObject:
    """"""Comelit SimpleHome VEDO area class.""""""

    index: int
    name: str
    p1: bool
    p2: bool
    ready: bool
    armed: bool
    alarm: bool
    alarm_memory: bool
    sabotage: bool
    anomaly: bool
    in_time: bool
    out_time: bool
    human_status: AlarmAreaState


@dataclass
class ComelitVedoZoneObject:
    """"""Comelit SimpleHome VEDO zone class.""""""

    index: int
    name: str
    status_api: str
    status: int
    human_status: AlarmZoneState


class ComelitCommonApi:
    """"""Common API calls for Comelit SimpleHome devices.""""""

    def __init__(self, host: str, port: int, pin: int) -> None:
        """"""Initialize the session.""""""
        self.host = f""{host}:{port}""
        self.device_pin = pin
        self.base_url = f""http://{host}:{port}""
        self._headers = {
            ""User-Agent"": ""Mozilla/5.0 (X11; Fedora; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0"",
            ""Accept-Language"": ""en-GB,en;q=0.5"",
            ""X-Requested-With"": ""XMLHttpRequest"",
            ""Connection"": ""keep-alive"",
        }
        self._session: aiohttp.ClientSession

    async def _get_page_result(
        self, page: str, reply_json: bool = True
    ) -> tuple[int, dict[str, Any]]:
        """"""Return status and data from a GET query.""""""
        _LOGGER.debug(""GET page %s [%s]"", page, self.host)
        timestamp = datetime.now().strftime(""%Y-%m-%d %H:%M:%S"")
        url = f""{self.base_url}{page}&_={timestamp}""
        try:
            response = await self._session.get(
                url,
                headers=self._headers,
                timeout=10,
            )
        except (asyncio.TimeoutError, aiohttp.ClientConnectorError) as exc:
            raise CannotConnect(""Connection error during GET"") from exc

        _LOGGER.debug(""GET response %s [%s]"", await response.text(), self.host)

        if response.status != 200:
            raise CannotRetrieveData(f""GET response status {response.status}"")

        if not reply_json:
            _LOGGER.debug(""GET response is empty [%s]"", self.host)
            return response.status, {}

        return response.status, await response.json()

    async def _post_page_result(
        self, page: str, payload: dict[str, Any]
    ) -> SimpleCookie:
        """"""Return status and data from a POST query.""""""
        _LOGGER.debug(""POST page %s [%s]"", page, self.host)
        url = f""{self.base_url}{page}""
        try:
            response = await self._session.post(
                url,
                data=payload,
                headers=self._headers,
                timeout=10,
            )
        except (asyncio.TimeoutError, aiohttp.ClientConnectorError) as exc:
            raise CannotConnect(""Connection error during POST"") from exc

        _LOGGER.debug(""POST response %s [%s]"", await response.text(), self.host)

        if response.status != 200:
            raise CannotRetrieveData(f""POST response status {response.status}"")

        return response.cookies

    async def _is_session_active(self) -> bool:
        """"""Check if aiohttp session is still active.""""""
        if not hasattr(self, ""_session"") or self._session.closed:
            return False

        return True

    async def _check_logged_in(self, host_type: str) -> bool:
        """"""Check if login is active.""""""

        reply_status, reply_json = await self._get_page_result(""/login.json"")

        _LOGGER.debug(""%s login reply: %s"", host_type, reply_json)
        if host_type == BRIDGE:
            logged = reply_json[""domus""] != ""000000000000""
        else:
            logged = reply_json[""logged""] == 1

        return logged

    async def _sleep_between_call(self, seconds: float) -> None:
        """"""Sleep between one call and the next one.""""""
        _LOGGER.debug(""Sleeping for %s seconds before next call"", seconds)
        await asyncio.sleep(seconds)

    @abstractmethod
    async def login(self) -> bool:
        """"""Login to Comelit device.""""""

    async def _login(self, payload: dict[str, Any], host_type: str) -> bool:
        """"""Login into Comelit device.""""""
        _LOGGER.debug(""Logging into host %s [%s]"", self.host, host_type)

        if not await self._is_session_active():
            _LOGGER.debug(""Creating HTTP ClientSession"")
            jar = aiohttp.CookieJar(unsafe=True)
            connector = aiohttp.TCPConnector(force_close=True)
            self._session = aiohttp.ClientSession(cookie_jar=jar, connector=connector)

        if await self._check_logged_in(host_type):
            return True

        cookies = await self._post_page_result(""/login.cgi"", payload)
        _LOGGER.debug(""Cookies for host %s: %s"", self.host, cookies)

        if not cookies:
            _LOGGER.warning(
                ""Authentication failed for host %s [%s]: no cookies received"",
                self.host,
                host_type,
            )
            raise CannotAuthenticate

        self._session.cookie_jar.update_cookies(cookies, URL(self.base_url))

        return await self._check_logged_in(host_type)

    async def logout(self) -> None:
        """"""Comelit Simple Home logout.""""""
        if await self._is_session_active():
            payload = {""logout"": 1}
            await self._post_page_result(""/login.cgi"", payload)
            self._session.cookie_jar.clear()

    async def close(self) -> None:
        """"""Comelit Simple Home close session.""""""
        if await self._is_session_active():
            await self._session.close()


class ComeliteSerialBridgeApi(ComelitCommonApi):
    """"""Queries Comelit SimpleHome Serial bridge.""""""

    def __init__(self, host: str, port: int, bridge_pin: int) -> None:
        """"""Initialize the session.""""""
        super().__init__(host, port, bridge_pin)
        self._devices: dict[str, dict[int, ComelitSerialBridgeObject]] = {}
        self._last_clima_command: datetime | None = None

    async def _translate_device_status(self, dev_type: str, dev_status: int) -> str:
        """"""Makes status human readable.""""""

        if dev_type == COVER:
            return STATE_COVER[dev_status]

        return ""on"" if dev_status == STATE_ON else ""off""

    async def set_clima_status(self, index: int, action: str, temp: float = 0) -> bool:
        """"""Set clima status.

        action:
            auto, man, on, off, set

        """"""
        await self._sleep_between_call(0.25)
        if self._last_clima_command:
            delta_seconds = SLEEP_BETWEEN_BRIDGE_CALLS - round(
                (datetime.now() - self._last_clima_command).total_seconds(), 2
            )
            if delta_seconds > 0:
                _LOGGER.debug(
                    ""Climate calls needs to be queued (%ss) for proper execution"",
                    delta_seconds,
                )
                await self._sleep_between_call(delta_seconds)

        reply_status = await self._get_page_result(
            f""/user/action.cgi?clima={index}&thermo={action}&val={int(temp*10)}"", False
        )
        self._last_clima_command = datetime.now()

        return reply_status == 200

    async def set_device_status(
        self, device_type: str, index: int, action: int
    ) -> bool:
        """"""Set device action.

        action:
            0 = off/close
            1 = on/open

        """"""
        reply_status = await self._get_page_result(
            f""/user/action.cgi?type={device_type}&num{action}={index}"", False
        )
        return reply_status == 200

    async def get_device_status(self, device_type: str, index: int) -> int:
        """"""Get device status.""""""
        reply_status, reply_json = await self._get_page_result(
            f""/user/icon_status.json?type={device_type}""
        )
        _LOGGER.debug(
            ""Device %s[%s] status: %s"", device_type, index, reply_json[""status""][index]
        )
        return reply_json[""status""][index]

    async def login(self) -> bool:
        """"""Login to Serial Bridge device.""""""
        payload = {""dom"": self.device_pin}
        return await self._login(payload, BRIDGE)

    async def get_all_devices(self) -> dict[str, dict[int, ComelitSerialBridgeObject]]:
        """"""Get all connected devices.""""""

        _LOGGER.debug(""Getting all devices for host %s"", self.host)

        loop = asyncio.get_running_loop()
        ureg = await loop.run_in_executor(
            None, functools.partial(pint.UnitRegistry, cache_folder="":auto:"")
        )
        ureg.default_format = ""~""

        for dev_type in (CLIMATE, COVER, LIGHT, IRRIGATION, OTHER, SCENARIO):
            reply_status, reply_json = await self._get_page_result(
                f""/user/icon_desc.json?type={dev_type}""
            )
            _LOGGER.debug(
                ""List of devices of type %s: %s"",
                dev_type,
                reply_json,
            )
            reply_counter_json: dict[str, Any] = {}
            if dev_type == OTHER and reply_json[""num""] > 0:
                reply_status, reply_counter_json = await self._get_page_result(
                    ""/user/counter.json""
                )
            devices = {}
            for i in range(reply_json[""num""]):
                # Guard against ""scenario"", that has 32 devices even if none is configured
                if reply_json[""desc""][i] == """":
                    continue
                status = reply_json[""status""][i]
                power = 0.0
                if instant_values := reply_counter_json.get(""instant""):
                    instant = ureg(instant_values[i])
                    if not instant.dimensionless:
                        power = ureg.convert(
                            instant.magnitude, str(instant.units), WATT
                        )
                dev_info = ComelitSerialBridgeObject(
                    index=i,
                    name=reply_json[""desc""][i],
                    status=status,
                    human_status=await self._translate_device_status(dev_type, status),
                    type=dev_type,
                    val=reply_json[""val""][i],
                    protected=reply_json[""protected""][i],
                    zone=reply_json[""env_desc""][reply_json[""env""][i]]
                    if not dev_type == SCENARIO
                    else """",
                    power=power,
                )
                devices.update({i: dev_info})
            self._devices.update({dev_type: devices})

        return self._devices


class ComelitVedoApi(ComelitCommonApi):
    """"""Queries Comelit SimpleHome VEDO alarm.""""""

    _json_data: list[dict[Any, Any]] = [{}, {}, {}, {}, {}]

    async def _translate_zone_status(
        self, zone: ComelitVedoZoneObject
    ) -> AlarmZoneState:
        """"""Translate ZONE status.""""""

        for status in ALARM_ZONE_STATUS:
            if zone.status & status != 0:
                return ALARM_ZONE_STATUS[status]

        return AlarmZoneState.REST

    async def _translate_area_status(
        self, area: ComelitVedoAreaObject
    ) -> AlarmAreaState:
        """"""Translate AREA status.""""""

        for field in ALARM_AREA_STATUS:
            if getattr(area, field):
                return ALARM_AREA_STATUS[field]

        return AlarmAreaState.DISARMED

    async def _create_area_object(
        self, json_area_desc: dict[str, Any], json_area_stat: dict[str, Any], index: int
    ) -> ComelitVedoAreaObject:
        """"""Get area status.""""""

        area = ComelitVedoAreaObject(
            index=index,
            name=json_area_desc[""description""][index],
            p1=json_area_desc[""p1_pres""][index],
            p2=json_area_desc[""p2_pres""][index],
            ready=json_area_stat[""ready""][index],
            armed=json_area_stat[""armed""][index],
            alarm=json_area_stat[""alarm""][index],
            alarm_memory=json_area_stat[""alarm_memory""][index],
            sabotage=json_area_stat[""sabotage""][index],
            anomaly=json_area_stat[""anomaly""][index],
            in_time=json_area_stat[""in_time""][index],
            out_time=json_area_stat[""out_time""][index],
            human_status=AlarmAreaState.UNKNOWN,
        )
        area.human_status = await self._translate_area_status(area)
        _LOGGER.debug(area)
        return area

    async def _create_zone_object(
        self, json_zone_desc: dict[str, Any], json_zone_stat: dict[str, Any], index: int
    ) -> ComelitVedoZoneObject:
        """"""Create zone object.""""""

        status_api = json_zone_stat[""status""].split("","")[index]

        zone = ComelitVedoZoneObject(
            index=index,
            name=json_zone_desc[""description""][index],
            status=int(status_api, 16),
            status_api=status_api,
            human_status=AlarmZoneState.UNKNOWN,
        )
        zone.human_status = await self._translate_zone_status(zone)
        _LOGGER.debug(zone)
        return zone

    async def _async_get_page_data(
        self, desc: str, page: str, present_check: str | int | None = None
    ) -> tuple[bool, dict[str, Any]]:
        """"""Return status and data from a specific GET query.""""""
        reply_status, reply_json = await self._get_page_result(page)
        _LOGGER.debug(""Alarm %s: %s"", desc, reply_json)
        present = present_check in reply_json[""present""] if ""_desc"" in page else True
        return (reply_json[""logged""] and present), reply_json

    async def set_zone_status(
        self, index: int, action: str, force: bool = False
    ) -> bool:
        """"""Set zone action.

        action:
            tot = enable
            dis = disable

        index:
            32 = all zones
             n = specific zone

        force:
            False = don't force action
            True  = force action

        """"""

        reply_status = await self._get_page_result(
            f""/action.cgi?vedo=1&{action}={index}&force={int(force)}"", False
        )
        return reply_status == 200

    async def login(self) -> bool:
        """"""Login to VEDO system.""""""
        payload = {""code"": self.device_pin}
        return await self._login(payload, VEDO)

    async def get_area_status(
        self, area: ComelitVedoAreaObject
    ) -> ComelitVedoAreaObject:
        """"""Get AREA status.""""""

        reply_status, reply_json_area_stat = await self._async_get_page_data(
            ""AREA statistics"", ""/user/area_stat.json""
        )
        description = {""description"": area.name, ""p1_pres"": area.p1, ""p2_pres"": area.p2}

        return await self._create_area_object(
            description, reply_json_area_stat, area.index
        )

    async def get_all_areas_and_zones(
        self,
    ) -> dict[str, dict[int, Any]]:
        """"""Get all VEDO system AREA and ZONE.""""""

        queries: dict[int, dict[str, Any]] = {
            1: {
                ""desc"": ""AREA description"",
                ""page"": ""/user/area_desc.json"",
                ""present"": 1,
            },
            2: {
                ""desc"": ""ZONE description"",
                ""page"": ""/user/zone_desc.json"",
                ""present"": ""1"",
            },
            3: {
                ""desc"": ""AREA statistics"",
                ""page"": ""/user/area_stat.json"",
                ""present"": None,
            },
            4: {
                ""desc"": ""ZONE statistics"",
                ""page"": ""/user/zone_stat.json"",
                ""present"": None,
            },
        }

        for index, info in queries.items():
            desc = info[""desc""]
            page = info[""page""]
            present = info[""present""]
            if ""_desc"" in page and self._json_data[index]:
                _LOGGER.debug(""Data for %s already retrieved, skipping"", desc)
                continue
            await self._sleep_between_call(SLEEP_BETWEEN_VEDO_CALLS)
            reply_status, reply_json = await self._async_get_page_data(
                desc, page, present
            )
            if not reply_status:
                _LOGGER.info(""Login expired accessing %s, re-login attempt"", desc)
                await self.login()
                await self._sleep_between_call(SLEEP_BETWEEN_VEDO_CALLS)
                reply_status, reply_json = await self._async_get_page_data(
                    desc, page, present
                )
                if not reply_status:
                    raise CannotRetrieveData(
                        ""Login expired and not working after a retry""
                    )
                _LOGGER.info(""Re-login successful"")
            self._json_data.insert(index, reply_json)

        list_areas: list[int] = self._json_data[1][""present""]
        areas = {}
        for i in range(len(list_areas)):
            if not list_areas[i]:
                _LOGGER.debug(""Alarm skipping non present AREA [%i]"", i)
                continue
            area = await self._create_area_object(
                self._json_data[1], self._json_data[3], i
            )
            areas.update({i: area})

        list_zones: list[int] = self._json_data[2][""present""]
        zones = {}
        for i in range(len(list_zones)):
            if not int(list_zones[i]):
                _LOGGER.debug(""Alarm skipping non present ZONE [%i]"", i)
                continue
            zone = await self._create_zone_object(
                self._json_data[2], self._json_data[4], i
            )
            zones.update({i: zone})

        return {ALARM_AREAS: areas, ALARM_ZONES: zones}
"
QUmwdkzh,no val=0,chemelli74,Python,Sunday 4th of February 2024 04:42:54 PM CDT,"""""""Support for Comelit SimpleHome.""""""
import asyncio
import functools
from abc import abstractmethod
from dataclasses import dataclass
from datetime import datetime
from http.cookies import SimpleCookie
from typing import Any

import aiohttp
import pint
from yarl import URL

from .const import (
    _LOGGER,
    ALARM_AREA_STATUS,
    ALARM_AREAS,
    ALARM_ZONE_STATUS,
    ALARM_ZONES,
    BRIDGE,
    CLIMATE,
    COVER,
    IRRIGATION,
    LIGHT,
    OTHER,
    SCENARIO,
    SLEEP_BETWEEN_BRIDGE_CALLS,
    SLEEP_BETWEEN_VEDO_CALLS,
    STATE_COVER,
    STATE_ON,
    VEDO,
    WATT,
    AlarmAreaState,
    AlarmZoneState,
)
from .exceptions import CannotAuthenticate, CannotConnect, CannotRetrieveData


@dataclass
class ComelitSerialBridgeObject:
    """"""Comelit SimpleHome Serial bridge class.""""""

    index: int
    name: str
    status: int
    human_status: str
    type: str
    val: int | dict[Any, Any]  # Temperature or Humidity (CLIMATE)
    protected: int
    zone: str
    power: float
    power_unit: str = WATT


@dataclass
class ComelitVedoAreaObject:
    """"""Comelit SimpleHome VEDO area class.""""""

    index: int
    name: str
    p1: bool
    p2: bool
    ready: bool
    armed: bool
    alarm: bool
    alarm_memory: bool
    sabotage: bool
    anomaly: bool
    in_time: bool
    out_time: bool
    human_status: AlarmAreaState


@dataclass
class ComelitVedoZoneObject:
    """"""Comelit SimpleHome VEDO zone class.""""""

    index: int
    name: str
    status_api: str
    status: int
    human_status: AlarmZoneState


class ComelitCommonApi:
    """"""Common API calls for Comelit SimpleHome devices.""""""

    def __init__(self, host: str, port: int, pin: int) -> None:
        """"""Initialize the session.""""""
        self.host = f""{host}:{port}""
        self.device_pin = pin
        self.base_url = f""http://{host}:{port}""
        self._headers = {
            ""User-Agent"": ""Mozilla/5.0 (X11; Fedora; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0"",
            ""Accept-Language"": ""en-GB,en;q=0.5"",
            ""X-Requested-With"": ""XMLHttpRequest"",
            ""Connection"": ""keep-alive"",
        }
        self._session: aiohttp.ClientSession

    async def _get_page_result(
        self, page: str, reply_json: bool = True
    ) -> tuple[int, dict[str, Any]]:
        """"""Return status and data from a GET query.""""""
        _LOGGER.debug(""GET page %s [%s]"", page, self.host)
        timestamp = datetime.now().strftime(""%Y-%m-%d %H:%M:%S"")
        url = f""{self.base_url}{page}&_={timestamp}""
        try:
            response = await self._session.get(
                url,
                headers=self._headers,
                timeout=10,
            )
        except (asyncio.TimeoutError, aiohttp.ClientConnectorError) as exc:
            raise CannotConnect(""Connection error during GET"") from exc

        _LOGGER.debug(""GET response %s [%s]"", await response.text(), self.host)

        if response.status != 200:
            raise CannotRetrieveData(f""GET response status {response.status}"")

        if not reply_json:
            _LOGGER.debug(""GET response is empty [%s]"", self.host)
            return response.status, {}

        return response.status, await response.json()

    async def _post_page_result(
        self, page: str, payload: dict[str, Any]
    ) -> SimpleCookie:
        """"""Return status and data from a POST query.""""""
        _LOGGER.debug(""POST page %s [%s]"", page, self.host)
        url = f""{self.base_url}{page}""
        try:
            response = await self._session.post(
                url,
                data=payload,
                headers=self._headers,
                timeout=10,
            )
        except (asyncio.TimeoutError, aiohttp.ClientConnectorError) as exc:
            raise CannotConnect(""Connection error during POST"") from exc

        _LOGGER.debug(""POST response %s [%s]"", await response.text(), self.host)

        if response.status != 200:
            raise CannotRetrieveData(f""POST response status {response.status}"")

        return response.cookies

    async def _is_session_active(self) -> bool:
        """"""Check if aiohttp session is still active.""""""
        if not hasattr(self, ""_session"") or self._session.closed:
            return False

        return True

    async def _check_logged_in(self, host_type: str) -> bool:
        """"""Check if login is active.""""""

        reply_status, reply_json = await self._get_page_result(""/login.json"")

        _LOGGER.debug(""%s login reply: %s"", host_type, reply_json)
        if host_type == BRIDGE:
            logged = reply_json[""domus""] != ""000000000000""
        else:
            logged = reply_json[""logged""] == 1

        return logged

    async def _sleep_between_call(self, seconds: float) -> None:
        """"""Sleep between one call and the next one.""""""
        _LOGGER.debug(""Sleeping for %s seconds before next call"", seconds)
        await asyncio.sleep(seconds)

    @abstractmethod
    async def login(self) -> bool:
        """"""Login to Comelit device.""""""

    async def _login(self, payload: dict[str, Any], host_type: str) -> bool:
        """"""Login into Comelit device.""""""
        _LOGGER.debug(""Logging into host %s [%s]"", self.host, host_type)

        if not await self._is_session_active():
            _LOGGER.debug(""Creating HTTP ClientSession"")
            jar = aiohttp.CookieJar(unsafe=True)
            connector = aiohttp.TCPConnector(force_close=True)
            self._session = aiohttp.ClientSession(cookie_jar=jar, connector=connector)

        if await self._check_logged_in(host_type):
            return True

        cookies = await self._post_page_result(""/login.cgi"", payload)
        _LOGGER.debug(""Cookies for host %s: %s"", self.host, cookies)

        if not cookies:
            _LOGGER.warning(
                ""Authentication failed for host %s [%s]: no cookies received"",
                self.host,
                host_type,
            )
            raise CannotAuthenticate

        self._session.cookie_jar.update_cookies(cookies, URL(self.base_url))

        return await self._check_logged_in(host_type)

    async def logout(self) -> None:
        """"""Comelit Simple Home logout.""""""
        if await self._is_session_active():
            payload = {""logout"": 1}
            await self._post_page_result(""/login.cgi"", payload)
            self._session.cookie_jar.clear()

    async def close(self) -> None:
        """"""Comelit Simple Home close session.""""""
        if await self._is_session_active():
            await self._session.close()


class ComeliteSerialBridgeApi(ComelitCommonApi):
    """"""Queries Comelit SimpleHome Serial bridge.""""""

    def __init__(self, host: str, port: int, bridge_pin: int) -> None:
        """"""Initialize the session.""""""
        super().__init__(host, port, bridge_pin)
        self._devices: dict[str, dict[int, ComelitSerialBridgeObject]] = {}
        self._last_clima_command: datetime | None = None

    async def _translate_device_status(self, dev_type: str, dev_status: int) -> str:
        """"""Makes status human readable.""""""

        if dev_type == COVER:
            return STATE_COVER[dev_status]

        return ""on"" if dev_status == STATE_ON else ""off""

    async def set_clima_status(self, index: int, action: str, temp: float = 0) -> bool:
        """"""Set clima status.

        action:
            auto, man, on, off, set

        """"""
        if self._last_clima_command:
            delta_seconds = SLEEP_BETWEEN_BRIDGE_CALLS - round(
                (datetime.now() - self._last_clima_command).total_seconds(), 2
            )
            if delta_seconds > 0:
                _LOGGER.debug(
                    ""Climate calls needs to be queued (%ss) for proper execution"",
                    delta_seconds,
                )
                await self._sleep_between_call(delta_seconds)

        val = f""&val={int(temp*10)}"" if temp != 0 else """"
        reply_status = await self._get_page_result(
            f""/user/action.cgi?clima={index}&thermo={action}{val}"", False
        )
        self._last_clima_command = datetime.now()

        return reply_status == 200

    async def set_device_status(
        self, device_type: str, index: int, action: int
    ) -> bool:
        """"""Set device action.

        action:
            0 = off/close
            1 = on/open

        """"""
        reply_status = await self._get_page_result(
            f""/user/action.cgi?type={device_type}&num{action}={index}"", False
        )
        return reply_status == 200

    async def get_device_status(self, device_type: str, index: int) -> int:
        """"""Get device status.""""""
        reply_status, reply_json = await self._get_page_result(
            f""/user/icon_status.json?type={device_type}""
        )
        _LOGGER.debug(
            ""Device %s[%s] status: %s"", device_type, index, reply_json[""status""][index]
        )
        return reply_json[""status""][index]

    async def login(self) -> bool:
        """"""Login to Serial Bridge device.""""""
        payload = {""dom"": self.device_pin}
        return await self._login(payload, BRIDGE)

    async def get_all_devices(self) -> dict[str, dict[int, ComelitSerialBridgeObject]]:
        """"""Get all connected devices.""""""

        _LOGGER.debug(""Getting all devices for host %s"", self.host)

        loop = asyncio.get_running_loop()
        ureg = await loop.run_in_executor(
            None, functools.partial(pint.UnitRegistry, cache_folder="":auto:"")
        )
        ureg.default_format = ""~""

        for dev_type in (CLIMATE, COVER, LIGHT, IRRIGATION, OTHER, SCENARIO):
            reply_status, reply_json = await self._get_page_result(
                f""/user/icon_desc.json?type={dev_type}""
            )
            _LOGGER.debug(
                ""List of devices of type %s: %s"",
                dev_type,
                reply_json,
            )
            reply_counter_json: dict[str, Any] = {}
            if dev_type == OTHER and reply_json[""num""] > 0:
                reply_status, reply_counter_json = await self._get_page_result(
                    ""/user/counter.json""
                )
            devices = {}
            for i in range(reply_json[""num""]):
                # Guard against ""scenario"", that has 32 devices even if none is configured
                if reply_json[""desc""][i] == """":
                    continue
                status = reply_json[""status""][i]
                power = 0.0
                if instant_values := reply_counter_json.get(""instant""):
                    instant = ureg(instant_values[i])
                    if not instant.dimensionless:
                        power = ureg.convert(
                            instant.magnitude, str(instant.units), WATT
                        )
                dev_info = ComelitSerialBridgeObject(
                    index=i,
                    name=reply_json[""desc""][i],
                    status=status,
                    human_status=await self._translate_device_status(dev_type, status),
                    type=dev_type,
                    val=reply_json[""val""][i],
                    protected=reply_json[""protected""][i],
                    zone=reply_json[""env_desc""][reply_json[""env""][i]]
                    if not dev_type == SCENARIO
                    else """",
                    power=power,
                )
                devices.update({i: dev_info})
            self._devices.update({dev_type: devices})

        return self._devices


class ComelitVedoApi(ComelitCommonApi):
    """"""Queries Comelit SimpleHome VEDO alarm.""""""

    _json_data: list[dict[Any, Any]] = [{}, {}, {}, {}, {}]

    async def _translate_zone_status(
        self, zone: ComelitVedoZoneObject
    ) -> AlarmZoneState:
        """"""Translate ZONE status.""""""

        for status in ALARM_ZONE_STATUS:
            if zone.status & status != 0:
                return ALARM_ZONE_STATUS[status]

        return AlarmZoneState.REST

    async def _translate_area_status(
        self, area: ComelitVedoAreaObject
    ) -> AlarmAreaState:
        """"""Translate AREA status.""""""

        for field in ALARM_AREA_STATUS:
            if getattr(area, field):
                return ALARM_AREA_STATUS[field]

        return AlarmAreaState.DISARMED

    async def _create_area_object(
        self, json_area_desc: dict[str, Any], json_area_stat: dict[str, Any], index: int
    ) -> ComelitVedoAreaObject:
        """"""Get area status.""""""

        area = ComelitVedoAreaObject(
            index=index,
            name=json_area_desc[""description""][index],
            p1=json_area_desc[""p1_pres""][index],
            p2=json_area_desc[""p2_pres""][index],
            ready=json_area_stat[""ready""][index],
            armed=json_area_stat[""armed""][index],
            alarm=json_area_stat[""alarm""][index],
            alarm_memory=json_area_stat[""alarm_memory""][index],
            sabotage=json_area_stat[""sabotage""][index],
            anomaly=json_area_stat[""anomaly""][index],
            in_time=json_area_stat[""in_time""][index],
            out_time=json_area_stat[""out_time""][index],
            human_status=AlarmAreaState.UNKNOWN,
        )
        area.human_status = await self._translate_area_status(area)
        _LOGGER.debug(area)
        return area

    async def _create_zone_object(
        self, json_zone_desc: dict[str, Any], json_zone_stat: dict[str, Any], index: int
    ) -> ComelitVedoZoneObject:
        """"""Create zone object.""""""

        status_api = json_zone_stat[""status""].split("","")[index]

        zone = ComelitVedoZoneObject(
            index=index,
            name=json_zone_desc[""description""][index],
            status=int(status_api, 16),
            status_api=status_api,
            human_status=AlarmZoneState.UNKNOWN,
        )
        zone.human_status = await self._translate_zone_status(zone)
        _LOGGER.debug(zone)
        return zone

    async def _async_get_page_data(
        self, desc: str, page: str, present_check: str | int | None = None
    ) -> tuple[bool, dict[str, Any]]:
        """"""Return status and data from a specific GET query.""""""
        reply_status, reply_json = await self._get_page_result(page)
        _LOGGER.debug(""Alarm %s: %s"", desc, reply_json)
        present = present_check in reply_json[""present""] if ""_desc"" in page else True
        return (reply_json[""logged""] and present), reply_json

    async def set_zone_status(
        self, index: int, action: str, force: bool = False
    ) -> bool:
        """"""Set zone action.

        action:
            tot = enable
            dis = disable

        index:
            32 = all zones
             n = specific zone

        force:
            False = don't force action
            True  = force action

        """"""

        reply_status = await self._get_page_result(
            f""/action.cgi?vedo=1&{action}={index}&force={int(force)}"", False
        )
        return reply_status == 200

    async def login(self) -> bool:
        """"""Login to VEDO system.""""""
        payload = {""code"": self.device_pin}
        return await self._login(payload, VEDO)

    async def get_area_status(
        self, area: ComelitVedoAreaObject
    ) -> ComelitVedoAreaObject:
        """"""Get AREA status.""""""

        reply_status, reply_json_area_stat = await self._async_get_page_data(
            ""AREA statistics"", ""/user/area_stat.json""
        )
        description = {""description"": area.name, ""p1_pres"": area.p1, ""p2_pres"": area.p2}

        return await self._create_area_object(
            description, reply_json_area_stat, area.index
        )

    async def get_all_areas_and_zones(
        self,
    ) -> dict[str, dict[int, Any]]:
        """"""Get all VEDO system AREA and ZONE.""""""

        queries: dict[int, dict[str, Any]] = {
            1: {
                ""desc"": ""AREA description"",
                ""page"": ""/user/area_desc.json"",
                ""present"": 1,
            },
            2: {
                ""desc"": ""ZONE description"",
                ""page"": ""/user/zone_desc.json"",
                ""present"": ""1"",
            },
            3: {
                ""desc"": ""AREA statistics"",
                ""page"": ""/user/area_stat.json"",
                ""present"": None,
            },
            4: {
                ""desc"": ""ZONE statistics"",
                ""page"": ""/user/zone_stat.json"",
                ""present"": None,
            },
        }

        for index, info in queries.items():
            desc = info[""desc""]
            page = info[""page""]
            present = info[""present""]
            if ""_desc"" in page and self._json_data[index]:
                _LOGGER.debug(""Data for %s already retrieved, skipping"", desc)
                continue
            await self._sleep_between_call(SLEEP_BETWEEN_VEDO_CALLS)
            reply_status, reply_json = await self._async_get_page_data(
                desc, page, present
            )
            if not reply_status:
                _LOGGER.info(""Login expired accessing %s, re-login attempt"", desc)
                await self.login()
                await self._sleep_between_call(SLEEP_BETWEEN_VEDO_CALLS)
                reply_status, reply_json = await self._async_get_page_data(
                    desc, page, present
                )
                if not reply_status:
                    raise CannotRetrieveData(
                        ""Login expired and not working after a retry""
                    )
                _LOGGER.info(""Re-login successful"")
            self._json_data.insert(index, reply_json)

        list_areas: list[int] = self._json_data[1][""present""]
        areas = {}
        for i in range(len(list_areas)):
            if not list_areas[i]:
                _LOGGER.debug(""Alarm skipping non present AREA [%i]"", i)
                continue
            area = await self._create_area_object(
                self._json_data[1], self._json_data[3], i
            )
            areas.update({i: area})

        list_zones: list[int] = self._json_data[2][""present""]
        zones = {}
        for i in range(len(list_zones)):
            if not int(list_zones[i]):
                _LOGGER.debug(""Alarm skipping non present ZONE [%i]"", i)
                continue
            zone = await self._create_zone_object(
                self._json_data[2], self._json_data[4], i
            )
            zones.update({i: zone})

        return {ALARM_AREAS: areas, ALARM_ZONES: zones}
"
pqKAaHHZ,Server,enderop44,Python,Sunday 4th of February 2024 04:24:28 PM CDT,"from flask import Flask, Response
import pyautogui
import time

resx = 320
resy = 240
app = Flask(__name__)

def generate_screenshot():
    # Capture the screen and convert to the specified format
    # screenshot = pyautogui.screenshot().resize((240, 135))
    screenshot = pyautogui.screenshot().resize((resx, resy))
    pixels = list(screenshot.getdata())
    formatted_pixels = [f""\""{pixel[0]},{pixel[1]},{pixel[2]}\"""" for pixel in pixels]
    formatted_row = "","".join(formatted_pixels)
    yield f""{{\""RGB\"": [{formatted_row}]}}\n""

@app.route('/')
def index():
    return Response(generate_screenshot(), mimetype='text/plain')

@app.route('/res')
def resolution():
    return Response(f""{{\""RES\"": [{resx},{resy}]}}"", mimetype='text/plain')

if __name__ == '__main__':
    app.run(port=8080)
"
AtbRALwy,Sorter_Child,JW4L13,Lua,Sunday 4th of February 2024 04:23:38 PM CDT,"-- This program is run by the sorting turtles of the system




-- TEST CODE

function setup()
    name = os.getComputerID()
    peripheral.find(""modem"", rednet.open)
end

setup()
sender, message, protocol = rednet.receive()
rednet.send(sender, ""TEST broadcast"", ""REQUEST"")"
T9CD9ETp,Sorter_Mother,JW4L13,Lua,Sunday 4th of February 2024 04:23:11 PM CDT,"-- This is the program run by the ""mothership"" of the sorting system

-- Monitor Logging

function colors(color)
    if color == ""white"" then
        return 1
    end
    if color == ""orange"" then
        return 2
    end
    if color == ""red"" then
        return 16384
    end
    if color == ""magenta"" then
        return 4
    end
    if color == ""green"" then
        return 8192
    end
    if color == ""blue"" then
        return 2048
    end
    if color == ""purple"" then
        return 1024
    end
    if color == ""pink"" then
        return 64
    end
    if color == ""black"" then
        return 32768
    end
    if color == ""brown"" then
        return 4096
    end
    if color == ""yellow"" then
        return 16
    end
    return 1

end

function write(color, message)
    mon.setTextColor(color)
    mon.scroll(1)
    mon.write(message)
    mon.setCursorPos(1,max2)
    mon.setTextColor(1)
end

function mon_setup()
    mon = peripheral.find(""monitor"")
    mon.clear()
    mon.setTextScale(.5)
    max1, max2 = mon.getSize()
    mon.setCursorPos(1,max2)
end

function log(sender, message, product)
    log1 = ""Turtle "" .. tostring(sender) .. "" made "" .. message .. "" Request""
    log2 = ""Mother Responded "" .. product
    spaceindex = string.find(product, "" "")
    tab_product = {string.sub(product, 0, spaceindex-1), string.sub(product, spaceindex + 1)}
    log_col = colors(""red"")
    if tab_product[1] == ""SUCCESS"" then
        log_col = colors(""green"")
    end
    write(colors(""blue""), log1)
    write(log_col, log2)
end

-- Decode Message

function decode(message)
    spaceindex = string.find(message, "" "")
    tab_message = {string.sub(message, 0, spaceindex-1), string.sub(message, spaceindex + 1)}
    product1, product2 = get_info(tab_message[1], tab_message[2])
    product = product1 .. "" "" .. product2
    return product
end

function get_info(type, val)
    if type == ""LOCATION"" then
        if val == ""minecraft:cobblestone"" then
            return ""SUCCESS"", ""12""
        end
    end
    return ""FAILURE"", ""UNKNOWN""
end


function location(val)
    if val == ""minecraft:cobblestone"" then
        return ""SUCCESS"", ""12""
    end
    return ""FAILURE"", ""UNKNOWN""
end



-- MAIN

function main()
    mon_setup()
    setup()
    while true do
        sender, message, protocol = rednet.receive(""REQUEST"")
        product = decode(message)
        rednet.send(sender, product, ""ORDER"")
        log(sender, message, product)
    end
end


-- TEST CODE

function setup()
    name = os.getComputerID()
    rednet.open(""back"")
    rednet.broadcast(name, ""ORDER"")
end

main()"
brJ7DR0c,Extract multiple muiti-part archives at once,Nom1fan,Winbatch,Sunday 4th of February 2024 04:11:16 PM CDT,"REM Copy all multi-part archive files in current dir into dest
for /r %i in (*.rar *.r*) do copy ""%i"" ""..\dest\""
REM Then extract all of them at once
for %i in (*.r00"") do ""C:\Program Files\WinRAR\unRAR.exe"" x i%
 
"
H3433Az9,smallShop,AtcheTsr,JavaScript,Sunday 4th of February 2024 03:57:00 PM CDT,"function smallShop(input) {
    let product = input[0];
    let city = input[1];
    let quantity = Number(input[2]);

    let finalResult = 0;
    
    if (city ===""Sofia"") {
        switch (product) {
            case ""coffeе"" : finalResult = quantity * 0.50; break;
            case ""water"" : finalResult = quantity * 0.80; break;
            case ""beer"" : finalResult = quantity * 1.20; break;
            case ""sweets"" : finalResult = quantity * 1.45; break;
            case ""peanuts"" : finalResult = quantity * 1.60; break;
        }
    } else if (city ===""Plovdiv"") {
        switch (product) {
            case ""coffeе"" : finalResult = quantity * 0.40; break;
            case ""water"" : finalResult = quantity * 0.70; break;
            case ""beer"" : finalResult = quantity * 1.15; break;
            case ""sweets"" : finalResult = quantity * 1.30; break;
            case ""peanuts"" : finalResult = quantity * 1.50; break;
        }
    } else if (city ===""Varna"") {
        switch (product) {
            case ""coffеe"" : finalResult = quantity * 0.45; break;
            case ""water"" : finalResult = quantity * 0.70; break;
            case ""beer"" :  finalResult = quantity * 1.10; break;
            case ""sweets"" : finalResult = quantity * 1.35; break;
            case ""peanuts"" : finalResult = quantity * 1.55; break;
        }
    }

    console.log(finalResult);

}smallShop([""coffe"",""Sofia"",""2""]);"
SMb01WJL,Product of Three Numbers,desito07,C#,Sunday 4th of February 2024 03:11:15 PM CDT,"﻿namespace _24._Product_of_Three_Numbers
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int n1 = int.Parse(Console.ReadLine());
            int n2 = int.Parse(Console.ReadLine());
            int n3 = int.Parse(Console.ReadLine());

            if(n1 == 0 || n2 == 0 || n3 == 0)
            {
                Console.WriteLine(""zero"");            
            }
            else if(n1 > 0 && n2 > 0 && n3 > 0)
            {
                Console.WriteLine(""positive"");
            }
            else if(n1 > 0 && n2 > 0 && n3 < 0)
            {
                Console.WriteLine(""negative"");
            }
            else if( n1 > 0 && n2 < 0 && n3 > 0)
            {
                Console.WriteLine(""negative"");
            }
            else if(n1 > 0 && n2 < 0 && n3 < 0)
            {
                Console.WriteLine(""positive"");
            }
            else if(n1 < 0 && n2 > 2 && n3 > 0)
            {
                Console.WriteLine(""negative"");
            }
            else if(n1 < 0 && n2 > 0 && n3 < 0)
            {
                Console.WriteLine(""positive"");
            }
            else if(n1 < 0 && n2 < 0 && n3 > 0)
            {
                Console.WriteLine(""positive"");
            }
            else if(n1 < 0 && n2 < 0 && n3 < 0)
            {
                Console.WriteLine(""negative"");
            }
        }
    }
}"
uCT6pVkN,The Minted List - Fog of War Edition Playset 1.0,MellyKusjes,JSON,Sunday 4th of February 2024 03:04:59 PM CDT,"{""game"":""ck3"",""name"":""The Minted List - Fog of War Edition"",""mods"":[{""displayName"":""Unofficial Patch"",""enabled"":true,""position"":0,""steamId"":""2871648329""},{""displayName"":""Extended Outliner"",""enabled"":true,""position"":1,""steamId"":""2219611817""},{""displayName"":""Foundational Framework"",""enabled"":true,""position"":2,""steamId"":""2975079361""},{""displayName"":""Gamerule Gadget"",""enabled"":true,""position"":3,""steamId"":""2826829936""},{""displayName"":""Extended Family Actions"",""enabled"":true,""position"":4,""steamId"":""2430932902""},{""displayName"":""Knight Manager Continued"",""enabled"":true,""position"":5,""steamId"":""2974850904""},{""displayName"":""Cultural And Religional Battle Music"",""enabled"":true,""position"":6,""steamId"":""3097729014""},{""displayName"":""Loading Screens +"",""enabled"":true,""position"":7,""steamId"":""3065042937""},{""displayName"":""Historical Quotes"",""enabled"":true,""position"":8,""steamId"":""2893554112""},{""displayName"":""Better Barbershop"",""enabled"":false,""position"":9,""steamId"":""2220326926""},{""displayName"":""Lulu's Events (1.11)"",""enabled"":true,""position"":10,""steamId"":""3085141091""},{""displayName"":""Regional Travel Events"",""enabled"":true,""position"":11,""steamId"":""3000657129""},{""displayName"":""Regional Travel Events - Byzantium"",""enabled"":true,""position"":12,""steamId"":""3144275526""},{""displayName"":""REvents"",""enabled"":true,""position"":13,""steamId"":""2976674003""},{""displayName"":""VIET Events - A Flavor and Immersion Event Mod"",""enabled"":true,""position"":14,""steamId"":""2227658180""},{""displayName"":""Regional Immersion and Cultural Enrichment (RICE)"",""enabled"":true,""position"":15,""steamId"":""2273832430""},{""displayName"":""[FSF] Browse the Bookstore"",""enabled"":true,""position"":16,""steamId"":""2751980550""},{""displayName"":""Medieval Arts"",""enabled"":true,""position"":17,""steamId"":""2452585382""},{""displayName"":""Medieval Arts - More Special Buildings"",""enabled"":true,""position"":18,""steamId"":""2692079378""},{""displayName"":""No more special building religious requirements"",""enabled"":true,""position"":19,""steamId"":""2432516187""},{""displayName"":""No more sbr req fix"",""enabled"":true,""position"":20,""steamId"":""3020808086""},{""displayName"":""More Cultural Names"",""enabled"":true,""position"":21,""steamId"":""2217534250""},{""displayName"":""[KET] Advanced Trait Icons"",""enabled"":true,""position"":22,""steamId"":""2790176208""},{""displayName"":""[KET] Population Variations"",""enabled"":true,""position"":23,""steamId"":""2894033194""},{""displayName"":""Community Flavor Pack"",""enabled"":true,""position"":24,""steamId"":""2220098919""},{""displayName"":""Ethnicities & Portraits Expanded"",""enabled"":true,""position"":25,""steamId"":""2507209632""},{""displayName"":""CFP + EPE Compatibility Patch"",""enabled"":true,""position"":26,""steamId"":""2996881191""},{""displayName"":""RICE + EPE Compatibility Patch"",""enabled"":true,""position"":27,""steamId"":""2553043828""},{""displayName"":""Social Relations Expanded (SRE)"",""enabled"":true,""position"":28,""steamId"":""2825977309""},{""displayName"":""Inheritable Relations"",""enabled"":true,""position"":29,""steamId"":""2829009590""},{""displayName"":""Rescue & Vengeance"",""enabled"":true,""position"":30,""steamId"":""3089046758""},{""displayName"":""Dynamic Regency"",""enabled"":true,""position"":31,""steamId"":""3096490417""},{""displayName"":""Social Relations Expanded Lite"",""enabled"":true,""position"":32,""steamId"":""2825975085""},{""displayName"":""Interaction Icon Project Lite"",""enabled"":true,""position"":33,""steamId"":""2378432770""},{""displayName"":""IR Terrain"",""enabled"":true,""position"":34,""steamId"":""2438882835""},{""displayName"":""Better Map Graphics"",""enabled"":true,""position"":35,""steamId"":""3051778961""},{""displayName"":""Improved Cursors"",""enabled"":true,""position"":36,""steamId"":""2788773553""},{""displayName"":""More Background Illustrations"",""enabled"":true,""position"":37,""steamId"":""2986496756""},{""displayName"":""Meditation Removes Negative Coping Mechanisms"",""enabled"":true,""position"":38,""steamId"":""3148978566""},{""displayName"":""Cat's Coat of Arm Family & Title 1.11"",""enabled"":true,""position"":39,""steamId"":""2356992605""},{""displayName"":""Cat's Coat of Arms Emblem 1.11"",""enabled"":true,""position"":40,""steamId"":""2748438194""},{""displayName"":""Unit Packs Expanded"",""enabled"":true,""position"":41,""steamId"":""2818979385""},{""displayName"":""Better Battles Updated"",""enabled"":true,""position"":42,""steamId"":""3101905160""},{""displayName"":""Big Battle View"",""enabled"":true,""position"":43,""steamId"":""3030427202""},{""displayName"":""Historic Invasions"",""enabled"":true,""position"":44,""steamId"":""2837398670""},{""displayName"":""Multilingual Education"",""enabled"":true,""position"":45,""steamId"":""2756456587""},{""displayName"":""Call for Trial - Unlanded & Tribal"",""enabled"":true,""position"":46,""steamId"":""3113930804""},{""displayName"":""Higher Mortality Mod"",""enabled"":true,""position"":47,""steamId"":""2428173603""},{""displayName"":""Travelers"",""enabled"":true,""position"":48,""steamId"":""3082182371""},{""displayName"":""Prisoners of War"",""enabled"":true,""position"":49,""steamId"":""2511247871""},{""displayName"":""Prisoners of War Fixes/Tweaks for 1.11"",""enabled"":true,""position"":50,""steamId"":""3098184700""},{""displayName"":""Artifacts Variations"",""enabled"":true,""position"":51,""steamId"":""3047311833""},{""displayName"":""Unique Artifacts +"",""enabled"":true,""position"":52,""steamId"":""3043581652""},{""displayName"":""Councillor's experience trait"",""enabled"":true,""position"":53,""steamId"":""2721974781""},{""displayName"":""Glory of Ancestors (updated)"",""enabled"":true,""position"":54,""steamId"":""2981379536""},{""displayName"":""Lifestyle Completion Reward (Updated)"",""enabled"":true,""position"":55,""steamId"":""2940687974""},{""displayName"":""More Congenital Traits - Compatibility Version"",""enabled"":true,""position"":56,""steamId"":""2956974755""},{""displayName"":""[submod] More Congenital Traits - More Dynamic Traits"",""enabled"":true,""position"":57,""steamId"":""3007271571""},{""displayName"":""More Congenital Traits - CV - Positive Giant SA"",""enabled"":true,""position"":58,""steamId"":""3042398608""},{""displayName"":""Same Dynasty Renown"",""enabled"":true,""position"":59,""steamId"":""3144454714""},{""displayName"":""More Legacies"",""enabled"":true,""position"":60,""steamId"":""2859278694""},{""displayName"":""House Unity Balanced"",""enabled"":true,""position"":61,""steamId"":""3122203007""},{""displayName"":""A New Sensible Family 3"",""enabled"":true,""position"":62,""steamId"":""3045026915""},{""displayName"":""Culture List View"",""enabled"":true,""position"":63,""steamId"":""3120915379""},{""displayName"":""Chat GPT Flavor Pack  (Complete)"",""enabled"":true,""position"":64,""steamId"":""3122170466""},{""displayName"":""More Legacies Art +"",""enabled"":true,""position"":65,""steamId"":""2977838440""},{""displayName"":""Overextension"",""enabled"":true,""position"":66,""steamId"":""3034367754""},{""displayName"":""Traditions Art +"",""enabled"":true,""position"":67,""steamId"":""2976385354""},{""displayName"":""Traditions Art + Medieval Arts submod"",""enabled"":true,""position"":68,""steamId"":""2992308709""},{""displayName"":""Traditions Art + Rice submod"",""enabled"":true,""position"":69,""steamId"":""2990017583""},{""displayName"":""Useful Court Physicians"",""enabled"":true,""position"":70,""steamId"":""2463831513""},{""displayName"":""Lover's Pox Curable"",""enabled"":true,""position"":71,""steamId"":""2464663984""},{""displayName"":""Better AI Education"",""enabled"":true,""position"":72,""steamId"":""2753934263""},{""displayName"":""Ward Limit Based On Learning"",""enabled"":true,""position"":73,""steamId"":""2906654841""},{""displayName"":""Ward Limit + Better AI Education Compatch"",""enabled"":true,""position"":74,""steamId"":""2906656010""},{""displayName"":""Dynamic Trade Routes"",""enabled"":true,""position"":75,""steamId"":""2821835496""},{""displayName"":""DTR PoW"",""enabled"":true,""position"":76,""steamId"":""2854343196""},{""displayName"":""DTR KM"",""enabled"":true,""position"":77,""steamId"":""2906054697""},{""displayName"":""DTR Nameplates"",""enabled"":true,""position"":78,""steamId"":""3039020778""},{""displayName"":""Trade Maps DTR"",""enabled"":true,""position"":79,""steamId"":""2821874072""},{""displayName"":""Holding Sprawl DTR"",""enabled"":true,""position"":80,""steamId"":""2824465219""},{""displayName"":""Brighter Text Colors"",""enabled"":true,""position"":81,""steamId"":""2234245906""},{""displayName"":""Fog Of War"",""enabled"":true,""position"":82,""steamId"":""3013354800""},{""displayName"":""Dynamic Trade Routes - Fog of War - Overextension Submod"",""enabled"":true,""position"":83,""steamId"":""3116493940""},{""displayName"":""R&V + FoW Compatibility Patch"",""enabled"":true,""position"":84,""steamId"":""3154170747""},{""displayName"":""PoW + FoW Compatibility Patch"",""enabled"":true,""position"":85,""steamId"":""3154170068""}]}"
tGh2WRa7,MySQL Reset Forgotten Password,metalx1000,MySQL,Sunday 4th of February 2024 02:41:05 PM CDT,"sudo service mysql stop 
sudo killall mysqld
sudo mkdir -p /var/run/mysqld
sudo chown mysql:mysql /var/run/mysqld

mysqld_safe --skip-grant-tables --skip-networking &
sudo mysql -u root
quit

sudo service mysql stop 
sudo killall mysqld
sudo service mysql start

mysql -u root -p"
pXeRCYMM,MySQL Users and Privileges,metalx1000,MySQL,Sunday 4th of February 2024 02:37:38 PM CDT,"# Create MySQL Password
# change 'newpassword' to your new password
sudo mysql -uroot
ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'newpassword';
quit

mysql -uroot -p

# Create user with privileges 
CREATE USER 'jon'@'localhost' IDENTIFIED BY 'jonspassword';
CREATE DATABASE IF NOT EXISTS jonsdb;
GRANT SELECT, UPDATE, DELETE, INSERT ON jonsdb.* TO 'jon'@'localhost';

"
q0ND454e,# global_vs_local.py,here2share,Python,Sunday 4th of February 2024 02:22:03 PM CDT,"# global_vs_local.py

from time import perf_counter

global_var = 10
ttt = range(5_000_000)

for i in '.'*50:
	start = perf_counter()
	def local_func():
		ans = 0
		local_var = global_var
		for i in ttt: 
			ans += global_var
		return ans
	local_func()
	local_time = perf_counter()-start

	start = perf_counter()
	def global_func():
		ans = 0
		for i in ttt: 
			ans += global_var
		return ans
	global_func()
	global_time = perf_counter()-start

	print(f"""")
	print(f""local_time = {local_time:0f}"")
	print(f""global_time = {global_time:0f}"")
	a, b = 'local_func', 'global_func'
	t = global_time-local_time
	if local_time > global_time:
		a, b = b, a
		t = local_time-global_time
	print(f""{a} is {t:0f} seconds faster then {b}"")"
nBzk7NBn,LT2 SCRIPT 2024,Artani,Lua,Sunday 4th of February 2024 02:20:42 PM CDT,"LT2 SCRIPT PASTEBIN 2024 LUMBER TYCOON SCRIPT WORKING MOBILE
https://link-hub.net/576009/lumber-tycoon-2-script"
rcULDRyC,Untitled,poxipox,Lua,Sunday 4th of February 2024 02:04:11 PM CDT,"	rateSpellCriticalTab = {
	    [0] = 1.04, -- {name = ""Glove""},
		[1] = 1.20, -- {name = ""Wave""},
		[2] = 1.2, -- {name = ""Distanse""},
		[3] = 1.4, -- {name = ""Area""},
		[4] = 1.4, -- {name = ""Area_one""}, -- attack to see pos
		[5] = 1.0,-- {name = ""Blast""}, -- sp/ki blast / makanskosappo
		[6] = 1.2, -- {name = ""Runes""}, -- Spells
		[7] = 1.0, -- {name = ""Bolt""}, -- bolt ammo
		[8] = 1.0, -- {name = ""Sword""}, -- sword
		[9] = 1.0, -- = {name = ""Distanse""}, -- Distanse_ mana absrob
	}
	
	
	skillConfigTab = { -- rateSkill = 70.0
	--[sID] = {rate, baseSkill, maxLevel} ~= baseSkill skill change only reset!!
		[0] = {1.0, 50, 150}, -- rateSkill_glove
		[2] = {1.0, 50, 150}, -- rateSkill_sword
		[4] = {1.0, 50, 150}, -- rateSkill_distance
		[1] = {1.0, 50, 60}, -- rateSkill_speed 
		[9] = {1.0, 500, 75}, -- rateSkill_fattack
		[7] = {1.0, 1000, 10}, -- rateSkill_critical
		[8] = {1.0, 1000, 20}, -- rateSkill_criticalspell
		
		[5] = {1.0, 450, 100}, -- rateSkill_shield rateSkillDef = 0.5   --only defense/shield skill

		[6] = {1.0, 50, 100}, -- rateSkill_fish

		[10] = {1.0, 400, 100}, -- rateSkill_magic -- rateMagic = 27.0
		[11] = {14.0, 0, 100}, -- rateSkill_experience rateExperience == 14
		[12] = {1.0, 0, 1000}, -- SKILL__HELLLEVEL
		
	-- unsles
		[3] = {1.0, 1, 100}, -- rateSkill_ypower
	}


galobalevent start.lua?

przed: : function onStartup()
local skillConfigTab = getConfigValue('skillConfigTab')
local rateSpellCriticalTab = getConfigValue('rateSpellCriticalTab')


po function onStartup()

	if skillConfigTab and type(skillConfigTab) == 'table' then
		print('>>>>>> skillConfigTab')
		for skill, data in pairs(skillConfigTab) do
			setServerRate(skill, data[1], data[2], data[3])
		end
	end	
	
	if rateSpellCriticalTab and type(rateSpellCriticalTab) == 'table' then
		print('>>>>>> rateSpellCriticalTab')
		for skillId, data in pairs(rateSpellCriticalTab) do
			doSetRateCriticaSpell(skillId, data)
		end
	end

	"
Jmt8wT8F,JavaScript script that extracts all dates from the text,bai_onzi,JavaScript,Sunday 4th of February 2024 02:02:10 PM CDT,"const text = `Hi, 
my name is Jane and my phone number is 555-123-4567. 
My email address is jane_doe@example.com. 
I live on 123 Main St. Apt. #456, and I was born on January 11th, 1990. I have an appointment on 2023-05-15 at 2:30pm at 789 Oak Ln. #3 and backup on 2023/05/21. 
Please give me a call or send me an email to confirm. In case the dates are unavailable, please set up a meeting sometime in June. I would love June 19h.
Thank you!`;

const dates =
  /\b\d{4}[-/]\d{2}[-/]\d{2}\b|\b(?:January|February|March|April|May|June|July|August|September|October|November|December)\s\d{1,2}(?:st|nd|rd|th)?,\s\d{4}\b|\b(?:January|February|March|April|May|June|July|August|September|October|November|December)\s\d{1,2}(?:st|nd|rd|th)?\b|\b(?:January|February|March|April|May|June|July|August|September|October|November|December)\s\d{1,2}(?:st|nd|rd|th)?,\s\d{4}\b/g;

const extractDates = text.match(dates);

console.log(""Extracted Dates:"");
extractDates.forEach((date) => {
  console.log(date);
});
"
y2xtvj5Q,Untitled,poxipox,Lua,Sunday 4th of February 2024 01:58:54 PM CDT,"CREATE TABLE `guild_war` (
  `id` int(11) NOT NULL,
  `guild_1` int(11) NOT NULL,
  `guild_2` int(11) NOT NULL,
  `start` int(11) NOT NULL,
  `end` int(11) NOT NULL,
  `maxkill` int(11) NOT NULL DEFAULT 10,
  `kill_1` int(11) NOT NULL DEFAULT 0,
  `kill_2` int(11) NOT NULL DEFAULT 0,
  `active` tinyint(4) NOT NULL DEFAULT 0
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

--
-- Indeksy dla zrzutów tabel
--

--
-- Indeksy dla tabeli `guild_war`
--
ALTER TABLE `guild_war`
  ADD PRIMARY KEY (`id`);

--
-- AUTO_INCREMENT dla tabel zrzutów
--

--
-- AUTO_INCREMENT dla tabeli `guild_war`
--
ALTER TABLE `guild_war`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
COMMIT;"
UxrUndRw,Calculadora com polimorfismo em tempo de execução em C++,jacknpoe,C++,Sunday 4th of February 2024 01:52:34 PM CDT,"#include <iostream>
#include <locale.h>

using namespace std;

// CLASSE PAI ""Operacao""
class Operacao {
	public:	virtual double operacao(double num1, double num2) {};
};

// CLASSES FILHAS
class Soma: public Operacao {
	public: virtual double operacao(double num1, double num2) { return num1 + num2; };
};

class Subtracao: public Operacao {
	public: virtual double operacao(double num1, double num2) { return num1 - num2; };
};

class Multiplicacao: public Operacao {
	public: virtual double operacao(double num1, double num2) { return num1 * num2; };
};

class Divisao: public Operacao {
	public: virtual double operacao(double num1, double num2) { return num1 / num2; };
};

// MAIN
int main(){
	double numero1, numero2;
	int operacaoSelecionada;

	Operacao* operacoes[4];
	operacoes[0] = new Soma();
	operacoes[1] = new Subtracao();
	operacoes[2] = new Multiplicacao();
	operacoes[3] = new Divisao();

	setlocale( LC_ALL, """");		// caracteres acentuados

	cout << ""Escolha uma operação: 0: adição, 1: subtração, 2: multiplicação, 3: divisão: "";
	cin >> operacaoSelecionada;
	if(operacaoSelecionada < 0 || operacaoSelecionada > 3) {
		cout << ""Operação incorreta!"" << endl;
		return -1;
	}
	
	cout << ""Número 1: "";
	cin >> numero1;

	cout << ""Número 2: "";
	cin >> numero2;
	
	cout << ""Resultado: "" << operacoes[operacaoSelecionada]->operacao(numero1, numero2) << endl;
	
	return 0;
}
"
X3YsMnFS,Reinstall Broken MySQL Server,metalx1000,Bash,Sunday 4th of February 2024 01:51:23 PM CDT,"# If you are having trouble with mysql not starting
# And having issues with removing it and reinstalling it
# try this
# WARNING - THIS WILL ERASE ALL YOUR DATABASES
# BACK THEM UP FIRST

# in BASH (zsh will not autocomplete '*' )
sudo systemctl stop mysql
sudo apt purge mysql-server mysql-client mysql-common mysql-server-core-* mysql-client-core-*
sudo rm -rf /etc/mysql /var/lib/mysql /var/log/mysql
sudo apt autoremove
sudo apt autoclean
sudo aptitude install mysql-server
"
7YGy8J1D,Wireguard IPTables Configuration,pablopc,Bash,Sunday 4th of February 2024 01:51:17 PM CDT,"# Interfaces
# LAN enp0s3
# TUN wg0

*nat
-P POSTROUTING ACCEPT
-P PREROUTING ACCEPT
# NAT the VPN client traffic to LAN
-A POSTROUTING -s 10.10.10.0/24 -o enp0s3 -j MASQUERADE

COMMIT

*filter
# Default Politics
-P INPUT DROP
-P FORWARD DROP
-P OUTPUT ACCEPT

# Allow traffic between TUN & LAN
-A FORWARD -i wg+ -o enp0s3 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT
-A FORWARD -i enp0s3 -o wg+ -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT

# Allow apt update/upgrade
-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
# Allowed Services
-A INPUT -p udp --dport 51820 -j ACCEPT
-A INPUT -p tcp --dport 22 -j ACCEPT
-A INPUT -p icmp -s 10.10.10.0/24 -j ACCEPT

-A INPUT -j DROP
-A FORWARD -j DROP
-A OUTPUT -j ACCEPT

COMMIT"
EFKhD8Y9,fixed sleep 0,chemelli74,Python,Sunday 4th of February 2024 01:40:15 PM CDT,"""""""Support for Comelit SimpleHome.""""""
import asyncio
import functools
from abc import abstractmethod
from dataclasses import dataclass
from datetime import datetime
from http.cookies import SimpleCookie
from typing import Any

import aiohttp
import pint
from yarl import URL

from .const import (
    _LOGGER,
    ALARM_AREA_STATUS,
    ALARM_AREAS,
    ALARM_ZONE_STATUS,
    ALARM_ZONES,
    BRIDGE,
    CLIMATE,
    COVER,
    IRRIGATION,
    LIGHT,
    OTHER,
    SCENARIO,
    SLEEP_BETWEEN_BRIDGE_CALLS,
    SLEEP_BETWEEN_VEDO_CALLS,
    STATE_COVER,
    STATE_ON,
    VEDO,
    WATT,
    AlarmAreaState,
    AlarmZoneState,
)
from .exceptions import CannotAuthenticate, CannotConnect, CannotRetrieveData


@dataclass
class ComelitSerialBridgeObject:
    """"""Comelit SimpleHome Serial bridge class.""""""

    index: int
    name: str
    status: int
    human_status: str
    type: str
    val: int | dict[Any, Any]  # Temperature or Humidity (CLIMATE)
    protected: int
    zone: str
    power: float
    power_unit: str = WATT


@dataclass
class ComelitVedoAreaObject:
    """"""Comelit SimpleHome VEDO area class.""""""

    index: int
    name: str
    p1: bool
    p2: bool
    ready: bool
    armed: bool
    alarm: bool
    alarm_memory: bool
    sabotage: bool
    anomaly: bool
    in_time: bool
    out_time: bool
    human_status: AlarmAreaState


@dataclass
class ComelitVedoZoneObject:
    """"""Comelit SimpleHome VEDO zone class.""""""

    index: int
    name: str
    status_api: str
    status: int
    human_status: AlarmZoneState


class ComelitCommonApi:
    """"""Common API calls for Comelit SimpleHome devices.""""""

    def __init__(self, host: str, port: int, pin: int) -> None:
        """"""Initialize the session.""""""
        self.host = f""{host}:{port}""
        self.device_pin = pin
        self.base_url = f""http://{host}:{port}""
        self._headers = {
            ""User-Agent"": ""Mozilla/5.0 (X11; Fedora; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0"",
            ""Accept-Language"": ""en-GB,en;q=0.5"",
            ""X-Requested-With"": ""XMLHttpRequest"",
            ""Connection"": ""keep-alive"",
        }
        self._session: aiohttp.ClientSession

    async def _get_page_result(
        self, page: str, reply_json: bool = True
    ) -> tuple[int, dict[str, Any]]:
        """"""Return status and data from a GET query.""""""
        _LOGGER.debug(""GET page %s [%s]"", page, self.host)
        timestamp = datetime.now().strftime(""%Y-%m-%d %H:%M:%S"")
        url = f""{self.base_url}{page}&_={timestamp}""
        try:
            response = await self._session.get(
                url,
                headers=self._headers,
                timeout=10,
            )
        except (asyncio.TimeoutError, aiohttp.ClientConnectorError) as exc:
            raise CannotConnect(""Connection error during GET"") from exc

        _LOGGER.debug(""GET response %s [%s]"", await response.text(), self.host)

        if response.status != 200:
            raise CannotRetrieveData(f""GET response status {response.status}"")

        if not reply_json:
            _LOGGER.debug(""GET response is empty [%s]"", self.host)
            return response.status, {}

        return response.status, await response.json()

    async def _post_page_result(
        self, page: str, payload: dict[str, Any]
    ) -> SimpleCookie:
        """"""Return status and data from a POST query.""""""
        _LOGGER.debug(""POST page %s [%s]"", page, self.host)
        url = f""{self.base_url}{page}""
        try:
            response = await self._session.post(
                url,
                data=payload,
                headers=self._headers,
                timeout=10,
            )
        except (asyncio.TimeoutError, aiohttp.ClientConnectorError) as exc:
            raise CannotConnect(""Connection error during POST"") from exc

        _LOGGER.debug(""POST response %s [%s]"", await response.text(), self.host)

        if response.status != 200:
            raise CannotRetrieveData(f""POST response status {response.status}"")

        return response.cookies

    async def _is_session_active(self) -> bool:
        """"""Check if aiohttp session is still active.""""""
        if not hasattr(self, ""_session"") or self._session.closed:
            return False

        return True

    async def _check_logged_in(self, host_type: str) -> bool:
        """"""Check if login is active.""""""

        reply_status, reply_json = await self._get_page_result(""/login.json"")

        _LOGGER.debug(""%s login reply: %s"", host_type, reply_json)
        if host_type == BRIDGE:
            logged = reply_json[""domus""] != ""000000000000""
        else:
            logged = reply_json[""logged""] == 1

        return logged

    async def _sleep_between_call(self, seconds: float) -> None:
        """"""Sleep between one call and the next one.""""""
        _LOGGER.debug(""Sleeping for %s seconds before next call"", seconds)
        await asyncio.sleep(seconds)

    @abstractmethod
    async def login(self) -> bool:
        """"""Login to Comelit device.""""""

    async def _login(self, payload: dict[str, Any], host_type: str) -> bool:
        """"""Login into Comelit device.""""""
        _LOGGER.debug(""Logging into host %s [%s]"", self.host, host_type)

        if not await self._is_session_active():
            _LOGGER.debug(""Creating HTTP ClientSession"")
            jar = aiohttp.CookieJar(unsafe=True)
            connector = aiohttp.TCPConnector(force_close=True)
            self._session = aiohttp.ClientSession(cookie_jar=jar, connector=connector)

        if await self._check_logged_in(host_type):
            return True

        cookies = await self._post_page_result(""/login.cgi"", payload)
        _LOGGER.debug(""Cookies for host %s: %s"", self.host, cookies)

        if not cookies:
            _LOGGER.warning(
                ""Authentication failed for host %s [%s]: no cookies received"",
                self.host,
                host_type,
            )
            raise CannotAuthenticate

        self._session.cookie_jar.update_cookies(cookies, URL(self.base_url))

        return await self._check_logged_in(host_type)

    async def logout(self) -> None:
        """"""Comelit Simple Home logout.""""""
        if await self._is_session_active():
            payload = {""logout"": 1}
            await self._post_page_result(""/login.cgi"", payload)
            self._session.cookie_jar.clear()

    async def close(self) -> None:
        """"""Comelit Simple Home close session.""""""
        if await self._is_session_active():
            await self._session.close()


class ComeliteSerialBridgeApi(ComelitCommonApi):
    """"""Queries Comelit SimpleHome Serial bridge.""""""

    def __init__(self, host: str, port: int, bridge_pin: int) -> None:
        """"""Initialize the session.""""""
        super().__init__(host, port, bridge_pin)
        self._devices: dict[str, dict[int, ComelitSerialBridgeObject]] = {}
        self._last_clima_command: datetime | None = None

    async def _translate_device_status(self, dev_type: str, dev_status: int) -> str:
        """"""Makes status human readable.""""""

        if dev_type == COVER:
            return STATE_COVER[dev_status]

        return ""on"" if dev_status == STATE_ON else ""off""

    async def set_clima_status(self, index: int, action: str, temp: float = 0) -> bool:
        """"""Set clima status.

        action:
            auto, man, on, off, set

        """"""
        if self._last_clima_command:
            delta_seconds = SLEEP_BETWEEN_BRIDGE_CALLS - round(
                (datetime.now() - self._last_clima_command).total_seconds(), 2
            )
            if delta_seconds > 0:
                _LOGGER.debug(
                    ""Climate calls needs to be queued (%ss) for proper execution"",
                    delta_seconds,
                )
                await self._sleep_between_call(delta_seconds)

        reply_status = await self._get_page_result(
            f""/user/action.cgi?clima={index}&thermo={action}&val={int(temp*10)}"", False
        )
        self._last_clima_command = datetime.now()

        return reply_status == 200

    async def set_device_status(
        self, device_type: str, index: int, action: int
    ) -> bool:
        """"""Set device action.

        action:
            0 = off/close
            1 = on/open

        """"""
        reply_status = await self._get_page_result(
            f""/user/action.cgi?type={device_type}&num{action}={index}"", False
        )
        return reply_status == 200

    async def get_device_status(self, device_type: str, index: int) -> int:
        """"""Get device status.""""""
        reply_status, reply_json = await self._get_page_result(
            f""/user/icon_status.json?type={device_type}""
        )
        _LOGGER.debug(
            ""Device %s[%s] status: %s"", device_type, index, reply_json[""status""][index]
        )
        return reply_json[""status""][index]

    async def login(self) -> bool:
        """"""Login to Serial Bridge device.""""""
        payload = {""dom"": self.device_pin}
        return await self._login(payload, BRIDGE)

    async def get_all_devices(self) -> dict[str, dict[int, ComelitSerialBridgeObject]]:
        """"""Get all connected devices.""""""

        _LOGGER.debug(""Getting all devices for host %s"", self.host)

        loop = asyncio.get_running_loop()
        ureg = await loop.run_in_executor(
            None, functools.partial(pint.UnitRegistry, cache_folder="":auto:"")
        )
        ureg.default_format = ""~""

        for dev_type in (CLIMATE, COVER, LIGHT, IRRIGATION, OTHER, SCENARIO):
            reply_status, reply_json = await self._get_page_result(
                f""/user/icon_desc.json?type={dev_type}""
            )
            _LOGGER.debug(
                ""List of devices of type %s: %s"",
                dev_type,
                reply_json,
            )
            reply_counter_json: dict[str, Any] = {}
            if dev_type == OTHER and reply_json[""num""] > 0:
                reply_status, reply_counter_json = await self._get_page_result(
                    ""/user/counter.json""
                )
            devices = {}
            for i in range(reply_json[""num""]):
                # Guard against ""scenario"", that has 32 devices even if none is configured
                if reply_json[""desc""][i] == """":
                    continue
                status = reply_json[""status""][i]
                power = 0.0
                if instant_values := reply_counter_json.get(""instant""):
                    instant = ureg(instant_values[i])
                    if not instant.dimensionless:
                        power = ureg.convert(
                            instant.magnitude, str(instant.units), WATT
                        )
                dev_info = ComelitSerialBridgeObject(
                    index=i,
                    name=reply_json[""desc""][i],
                    status=status,
                    human_status=await self._translate_device_status(dev_type, status),
                    type=dev_type,
                    val=reply_json[""val""][i],
                    protected=reply_json[""protected""][i],
                    zone=reply_json[""env_desc""][reply_json[""env""][i]]
                    if not dev_type == SCENARIO
                    else """",
                    power=power,
                )
                devices.update({i: dev_info})
            self._devices.update({dev_type: devices})

        return self._devices


class ComelitVedoApi(ComelitCommonApi):
    """"""Queries Comelit SimpleHome VEDO alarm.""""""

    _json_data: list[dict[Any, Any]] = [{}, {}, {}, {}, {}]

    async def _translate_zone_status(
        self, zone: ComelitVedoZoneObject
    ) -> AlarmZoneState:
        """"""Translate ZONE status.""""""

        for status in ALARM_ZONE_STATUS:
            if zone.status & status != 0:
                return ALARM_ZONE_STATUS[status]

        return AlarmZoneState.REST

    async def _translate_area_status(
        self, area: ComelitVedoAreaObject
    ) -> AlarmAreaState:
        """"""Translate AREA status.""""""

        for field in ALARM_AREA_STATUS:
            if getattr(area, field):
                return ALARM_AREA_STATUS[field]

        return AlarmAreaState.DISARMED

    async def _create_area_object(
        self, json_area_desc: dict[str, Any], json_area_stat: dict[str, Any], index: int
    ) -> ComelitVedoAreaObject:
        """"""Get area status.""""""

        area = ComelitVedoAreaObject(
            index=index,
            name=json_area_desc[""description""][index],
            p1=json_area_desc[""p1_pres""][index],
            p2=json_area_desc[""p2_pres""][index],
            ready=json_area_stat[""ready""][index],
            armed=json_area_stat[""armed""][index],
            alarm=json_area_stat[""alarm""][index],
            alarm_memory=json_area_stat[""alarm_memory""][index],
            sabotage=json_area_stat[""sabotage""][index],
            anomaly=json_area_stat[""anomaly""][index],
            in_time=json_area_stat[""in_time""][index],
            out_time=json_area_stat[""out_time""][index],
            human_status=AlarmAreaState.UNKNOWN,
        )
        area.human_status = await self._translate_area_status(area)
        _LOGGER.debug(area)
        return area

    async def _create_zone_object(
        self, json_zone_desc: dict[str, Any], json_zone_stat: dict[str, Any], index: int
    ) -> ComelitVedoZoneObject:
        """"""Create zone object.""""""

        status_api = json_zone_stat[""status""].split("","")[index]

        zone = ComelitVedoZoneObject(
            index=index,
            name=json_zone_desc[""description""][index],
            status=int(status_api, 16),
            status_api=status_api,
            human_status=AlarmZoneState.UNKNOWN,
        )
        zone.human_status = await self._translate_zone_status(zone)
        _LOGGER.debug(zone)
        return zone

    async def _async_get_page_data(
        self, desc: str, page: str, present_check: str | int | None = None
    ) -> tuple[bool, dict[str, Any]]:
        """"""Return status and data from a specific GET query.""""""
        reply_status, reply_json = await self._get_page_result(page)
        _LOGGER.debug(""Alarm %s: %s"", desc, reply_json)
        present = present_check in reply_json[""present""] if ""_desc"" in page else True
        return (reply_json[""logged""] and present), reply_json

    async def set_zone_status(
        self, index: int, action: str, force: bool = False
    ) -> bool:
        """"""Set zone action.

        action:
            tot = enable
            dis = disable

        index:
            32 = all zones
             n = specific zone

        force:
            False = don't force action
            True  = force action

        """"""

        reply_status = await self._get_page_result(
            f""/action.cgi?vedo=1&{action}={index}&force={int(force)}"", False
        )
        return reply_status == 200

    async def login(self) -> bool:
        """"""Login to VEDO system.""""""
        payload = {""code"": self.device_pin}
        return await self._login(payload, VEDO)

    async def get_area_status(
        self, area: ComelitVedoAreaObject
    ) -> ComelitVedoAreaObject:
        """"""Get AREA status.""""""

        reply_status, reply_json_area_stat = await self._async_get_page_data(
            ""AREA statistics"", ""/user/area_stat.json""
        )
        description = {""description"": area.name, ""p1_pres"": area.p1, ""p2_pres"": area.p2}

        return await self._create_area_object(
            description, reply_json_area_stat, area.index
        )

    async def get_all_areas_and_zones(
        self,
    ) -> dict[str, dict[int, Any]]:
        """"""Get all VEDO system AREA and ZONE.""""""

        queries: dict[int, dict[str, Any]] = {
            1: {
                ""desc"": ""AREA description"",
                ""page"": ""/user/area_desc.json"",
                ""present"": 1,
            },
            2: {
                ""desc"": ""ZONE description"",
                ""page"": ""/user/zone_desc.json"",
                ""present"": ""1"",
            },
            3: {
                ""desc"": ""AREA statistics"",
                ""page"": ""/user/area_stat.json"",
                ""present"": None,
            },
            4: {
                ""desc"": ""ZONE statistics"",
                ""page"": ""/user/zone_stat.json"",
                ""present"": None,
            },
        }

        for index, info in queries.items():
            desc = info[""desc""]
            page = info[""page""]
            present = info[""present""]
            if ""_desc"" in page and self._json_data[index]:
                _LOGGER.debug(""Data for %s already retrieved, skipping"", desc)
                continue
            await self._sleep_between_call(SLEEP_BETWEEN_VEDO_CALLS)
            reply_status, reply_json = await self._async_get_page_data(
                desc, page, present
            )
            if not reply_status:
                _LOGGER.info(""Login expired accessing %s, re-login attempt"", desc)
                await self.login()
                await self._sleep_between_call(SLEEP_BETWEEN_VEDO_CALLS)
                reply_status, reply_json = await self._async_get_page_data(
                    desc, page, present
                )
                if not reply_status:
                    raise CannotRetrieveData(
                        ""Login expired and not working after a retry""
                    )
                _LOGGER.info(""Re-login successful"")
            self._json_data.insert(index, reply_json)

        list_areas: list[int] = self._json_data[1][""present""]
        areas = {}
        for i in range(len(list_areas)):
            if not list_areas[i]:
                _LOGGER.debug(""Alarm skipping non present AREA [%i]"", i)
                continue
            area = await self._create_area_object(
                self._json_data[1], self._json_data[3], i
            )
            areas.update({i: area})

        list_zones: list[int] = self._json_data[2][""present""]
        zones = {}
        for i in range(len(list_zones)):
            if not int(list_zones[i]):
                _LOGGER.debug(""Alarm skipping non present ZONE [%i]"", i)
                continue
            zone = await self._create_zone_object(
                self._json_data[2], self._json_data[4], i
            )
            zones.update({i: zone})

        return {ALARM_AREAS: areas, ALARM_ZONES: zones}
"
djtJcqJi,Speed gui by me,SOU1LESSSIMREAL,Lua,Sunday 4th of February 2024 01:36:21 PM CDT,"local gui = Instance.new(""ScreenGui"")
gui.Name = ""SpeedGUI""
gui.Parent = game.Players.LocalPlayer:WaitForChild(""PlayerGui"")


local frame = Instance.new(""Frame"")
frame.Size = UDim2.new(0, 150, 0, 50)
frame.Position = UDim2.new(0, 10, 0, 10)
frame.BackgroundColor3 = Color3.new(0.5, 0.5, 0.5)
frame.Parent = gui


local speedLabel = Instance.new(""TextLabel"")
speedLabel.Size = UDim2.new(1, -10, 0, 20)
speedLabel.Position = UDim2.new(0, 5, 0, 5)
speedLabel.Text = ""Walkspeed: "" .. tostring(game.Players.LocalPlayer.Character.Humanoid.WalkSpeed)
speedLabel.TextColor3 = Color3.new(1, 1, 1)
speedLabel.BackgroundTransparency = 1
speedLabel.Parent = frame


local increaseButton = Instance.new(""TextButton"")
increaseButton.Size = UDim2.new(0.4, -5, 0, 20)
increaseButton.Position = UDim2.new(0, 5, 0, 30)
increaseButton.Text = ""+""
increaseButton.Parent = frame


local decreaseButton = Instance.new(""TextButton"")
decreaseButton.Size = UDim2.new(0.4, -5, 0, 20)
decreaseButton.Position = UDim2.new(0.6, 0, 0, 30)
decreaseButton.Text = ""-""
decreaseButton.Parent = frame


increaseButton.MouseButton1Click:Connect(function()
    game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = game.Players.LocalPlayer.Character.Humanoid.WalkSpeed + 5
    speedLabel.Text = ""Walkspeed: "" .. tostring(game.Players.LocalPlayer.Character.Humanoid.WalkSpeed)
end)


decreaseButton.MouseButton1Click:Connect(function()
    game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = game.Players.LocalPlayer.Character.Humanoid.WalkSpeed - 5
    speedLabel.Text = ""Walkspeed: "" .. tostring(game.Players.LocalPlayer.Character.Humanoid.WalkSpeed)
end)"
GS6g2Sb1,Nigerian scammers [4-2-4/2024],bombaires,AIMMS,Sunday 4th of February 2024 01:32:52 PM CDT,"<a href=""mailto:diplomatjlewis@gmail.com"">diplomatjlewis@gmail.com</a>
<a href=""mailto:di.p.lom.a.t.jl.e.w.is@gmail.com"">di.p.lom.a.t.jl.e.w.is@gmail.com</a>
<a href=""mailto:dip.l.omat.jle.wi.s@gmail.com"">dip.l.omat.jle.wi.s@gmail.com</a>
<a href=""mailto:d.i.p.l.om.atjle.wis@gmail.com"">d.i.p.l.om.atjle.wis@gmail.com</a>
<a href=""mailto:diplomat.j.le.w.i.s@gmail.com"">diplomat.j.le.w.i.s@gmail.com</a>
<a href=""mailto:d.i.pl.oma.tjl.ew.i.s@gmail.com"">d.i.pl.oma.tjl.ew.i.s@gmail.com</a>
<a href=""mailto:di.p.lo.ma.t.jlewi.s@gmail.com"">di.p.lo.ma.t.jlewi.s@gmail.com</a>
<a href=""mailto:di.p.lom.atj.lew.is@gmail.com"">di.p.lom.atj.lew.is@gmail.com</a>
<a href=""mailto:d.iplo.m.atjl.e.wis@gmail.com"">d.iplo.m.atjl.e.wis@gmail.com</a>
<a href=""mailto:d.i.p.l.o.m.at.jl.ew.is@gmail.com"">d.i.p.l.o.m.at.jl.ew.is@gmail.com</a>
<a href=""mailto:d.i.pl.o.ma.tjl.e.wi.s@gmail.com"">d.i.pl.o.ma.tjl.e.wi.s@gmail.com</a>
<a href=""mailto:d.ipl.om.at.jl.ewi.s@gmail.com"">d.ipl.om.at.jl.ewi.s@gmail.com</a>
<a href=""mailto:d.ip.l.om.a.tjl.ew.is@gmail.com"">d.ip.l.om.a.tjl.ew.is@gmail.com</a>
<a href=""mailto:di.pl.o.ma.tjl.ewi.s@gmail.com"">di.pl.o.ma.tjl.ewi.s@gmail.com</a>
<a href=""mailto:di.p.lomat.jle.w.is@gmail.com"">di.p.lomat.jle.w.is@gmail.com</a>
<a href=""mailto:d.i.p.lom.a.tjle.w.i.s@gmail.com"">d.i.p.lom.a.tjle.w.i.s@gmail.com</a>
<a href=""mailto:d.iploma.tjl.e.wi.s@gmail.com"">d.iploma.tjl.e.wi.s@gmail.com</a>
<a href=""mailto:d.i.p.lo.m.atjle.w.i.s@gmail.com"">d.i.p.lo.m.atjle.w.i.s@gmail.com</a>
<a href=""mailto:d.i.p.l.o.m.a.t.jl.ewi.s@gmail.com"">d.i.p.l.o.m.a.t.jl.ewi.s@gmail.com</a>
<a href=""mailto:d.iplo.mat.jle.w.is@gmail.com"">d.iplo.mat.jle.w.is@gmail.com</a>
<a href=""mailto:diploma.t.j.le.wis@gmail.com"">diploma.t.j.le.wis@gmail.com</a>
<a href=""mailto:di.pl.om.atj.l.e.wi.s@gmail.com"">di.pl.om.atj.l.e.wi.s@gmail.com</a>
<a href=""mailto:d.iplom.at.j.le.w.is@gmail.com"">d.iplom.at.j.le.w.is@gmail.com</a>
<a href=""mailto:di.plom.at.j.l.e.w.i.s@gmail.com"">di.plom.at.j.l.e.w.i.s@gmail.com</a>
<a href=""mailto:d.ip.lo.m.at.jl.e.w.is@gmail.com"">d.ip.lo.m.at.jl.e.w.is@gmail.com</a>
<a href=""mailto:dip.l.om.a.t.jl.e.wis@gmail.com"">dip.l.om.a.t.jl.e.wis@gmail.com</a>
<a href=""mailto:d.i.plom.atjl.e.w.is@gmail.com"">d.i.plom.atjl.e.w.is@gmail.com</a>
<a href=""mailto:d.i.plo.mat.jl.e.w.is@gmail.com"">d.i.plo.mat.jl.e.w.is@gmail.com</a>
<a href=""mailto:d.i.pl.omat.j.le.wis@gmail.com"">d.i.pl.omat.j.le.wis@gmail.com</a>
<a href=""mailto:diploma.tj.l.e.w.i.s@gmail.com"">diploma.tj.l.e.w.i.s@gmail.com</a>
<a href=""mailto:d.i.plo.mat.j.le.wis@gmail.com"">d.i.plo.mat.j.le.wis@gmail.com</a>
<a href=""mailto:dip.lo.ma.t.jl.e.w.i.s@gmail.com"">dip.lo.ma.t.jl.e.w.i.s@gmail.com</a>
<a href=""mailto:dip.l.o.m.at.jle.w.i.s@gmail.com"">dip.l.o.m.at.jle.w.i.s@gmail.com</a>
<a href=""mailto:d.i.pl.om.at.j.lew.i.s@gmail.com"">d.i.pl.om.at.j.lew.i.s@gmail.com</a>
<a href=""mailto:di.p.l.o.matj.lewis@gmail.com"">di.p.l.o.matj.lewis@gmail.com</a>
<a href=""mailto:di.pl.o.m.a.tj.le.w.is@gmail.com"">di.pl.o.m.a.tj.le.w.is@gmail.com</a>
<a href=""mailto:d.ip.l.o.mat.j.l.ew.is@gmail.com"">d.ip.l.o.mat.j.l.ew.is@gmail.com</a>
<a href=""mailto:di.plom.a.tjlewis@gmail.com"">di.plom.a.tjlewis@gmail.com</a>
<a href=""mailto:d.i.p.lo.m.a.tjl.ew.is@gmail.com"">d.i.p.lo.m.a.tjl.ew.is@gmail.com</a>
<a href=""mailto:di.p.lo.ma.t.j.le.wis@gmail.com"">di.p.lo.ma.t.j.le.wis@gmail.com</a>
<a href=""mailto:dipl.omat.jlewi.s@gmail.com"">dipl.omat.jlewi.s@gmail.com</a>
<a href=""mailto:d.i.p.lo.m.a.tj.le.wis@gmail.com"">d.i.p.lo.m.a.tj.le.wis@gmail.com</a>
<a href=""mailto:di.plomat.j.l.e.w.is@gmail.com"">di.plomat.j.l.e.w.is@gmail.com</a>
<a href=""mailto:di.p.lom.at.jl.e.w.is@gmail.com"">di.p.lom.at.jl.e.w.is@gmail.com</a>
<a href=""mailto:d.i.plo.m.at.jl.e.wi.s@gmail.com"">d.i.plo.m.at.jl.e.wi.s@gmail.com</a>
<a href=""mailto:d.i.p.lom.at.j.l.ewis@gmail.com"">d.i.p.lom.at.j.l.ewis@gmail.com</a>
<a href=""mailto:d.i.pl.o.m.a.tj.l.ew.i.s@gmail.com"">d.i.pl.o.m.a.tj.l.ew.i.s@gmail.com</a>
<a href=""mailto:d.ip.l.om.atjlew.i.s@gmail.com"">d.ip.l.om.atjlew.i.s@gmail.com</a>
<a href=""mailto:di.pl.om.atjle.wis@gmail.com"">di.pl.om.atjle.wis@gmail.com</a>
<a href=""mailto:di.p.lom.a.t.jle.w.is@gmail.com"">di.p.lom.a.t.jle.w.is@gmail.com</a>
<a href=""mailto:d.ipl.o.m.a.t.j.lewi.s@gmail.com"">d.ipl.o.m.a.t.j.lewi.s@gmail.com</a>
<a href=""mailto:diplo.matj.l.ewi.s@gmail.com"">diplo.matj.l.ewi.s@gmail.com</a>
<a href=""mailto:dip.lo.ma.t.jl.e.wi.s@gmail.com"">dip.lo.ma.t.jl.e.wi.s@gmail.com</a>
<a href=""mailto:d.ip.l.om.a.tjl.ewis@gmail.com"">d.ip.l.om.a.tjl.ewis@gmail.com</a>
<a href=""mailto:dip.lo.m.a.t.j.le.w.i.s@gmail.com"">dip.lo.m.a.t.j.le.w.i.s@gmail.com</a>
<a href=""mailto:dip.lo.m.a.t.jle.wis@gmail.com"">dip.lo.m.a.t.jle.wis@gmail.com</a>
<a href=""mailto:dip.l.o.matj.l.ew.i.s@gmail.com"">dip.l.o.matj.l.ew.i.s@gmail.com</a>
<a href=""mailto:d.i.pl.om.at.j.le.wis@gmail.com"">d.i.pl.om.at.j.le.wis@gmail.com</a>
<a href=""mailto:dip.l.om.a.tjl.ew.is@gmail.com"">dip.l.om.a.tjl.ew.is@gmail.com</a>
<a href=""mailto:d.ip.l.o.m.a.t.jlew.is@gmail.com"">d.ip.l.o.m.a.t.jlew.is@gmail.com</a>
<a href=""mailto:diplom.a.t.jl.ew.i.s@gmail.com"">diplom.a.t.jl.ew.i.s@gmail.com</a>
<a href=""mailto:dip.loma.t.jl.e.w.i.s@gmail.com"">dip.loma.t.jl.e.w.i.s@gmail.com</a>
<a href=""mailto:dip.l.o.mat.j.l.e.w.i.s@gmail.com"">dip.l.o.mat.j.l.e.w.i.s@gmail.com</a>
<a href=""mailto:d.i.p.l.oma.t.j.l.e.w.i.s@gmail.com"">d.i.p.l.oma.t.j.l.e.w.i.s@gmail.com</a>
<a href=""mailto:d.i.p.lo.m.atjl.ewis@gmail.com"">d.i.p.lo.m.atjl.ewis@gmail.com</a>
<a href=""mailto:d.iplo.mat.jl.e.wis@gmail.com"">d.iplo.mat.jl.e.wis@gmail.com</a>
<a href=""mailto:di.p.l.om.at.j.lewi.s@gmail.com"">di.p.l.om.at.j.lewi.s@gmail.com</a>
<a href=""mailto:d.iploma.t.j.l.e.w.i.s@gmail.com"">d.iploma.t.j.l.e.w.i.s@gmail.com</a>
<a href=""mailto:d.i.p.lomat.jlewi.s@gmail.com"">d.i.p.lomat.jlewi.s@gmail.com</a>
<a href=""mailto:d.ip.l.oma.t.j.l.e.w.is@gmail.com"">d.ip.l.oma.t.j.l.e.w.is@gmail.com</a>
<a href=""mailto:dip.l.omat.j.le.wis@gmail.com"">dip.l.omat.j.le.wis@gmail.com</a>
<a href=""mailto:d.ipl.o.mat.jlewis@gmail.com"">d.ipl.o.mat.jlewis@gmail.com</a>
<a href=""mailto:d.i.pl.om.atjle.w.is@gmail.com"">d.i.pl.om.atjle.w.is@gmail.com</a>
<a href=""mailto:d.ip.lo.m.a.t.j.l.ewi.s@gmail.com"">d.ip.lo.m.a.t.j.l.ewi.s@gmail.com</a>
<a href=""mailto:d.i.p.l.o.m.a.t.jlew.i.s@gmail.com"">d.i.p.l.o.m.a.t.jlew.i.s@gmail.com</a>
<a href=""mailto:diploma.t.jlewi.s@gmail.com"">diploma.t.jlewi.s@gmail.com</a>
<a href=""mailto:d.ipl.oma.tj.lew.i.s@gmail.com"">d.ipl.oma.tj.lew.i.s@gmail.com</a>
<a href=""mailto:di.pl.o.ma.tjl.e.w.i.s@gmail.com"">di.pl.o.ma.tjl.e.w.i.s@gmail.com</a>
<a href=""mailto:dip.l.om.a.t.jlewi.s@gmail.com"">dip.l.om.a.t.jlewi.s@gmail.com</a>
<a href=""mailto:dip.lo.m.at.j.l.e.w.is@gmail.com"">dip.lo.m.at.j.l.e.w.is@gmail.com</a>
<a href=""mailto:di.pl.o.m.a.tjl.ew.i.s@gmail.com"">di.pl.o.m.a.tjl.ew.i.s@gmail.com</a>
<a href=""mailto:di.p.l.omatj.l.ew.i.s@gmail.com"">di.p.l.omatj.l.ew.i.s@gmail.com</a>
<a href=""mailto:d.i.p.l.o.ma.t.jl.e.w.i.s@gmail.com"">d.i.p.l.o.ma.t.jl.e.w.i.s@gmail.com</a>
<a href=""mailto:di.plom.a.t.jlewis@gmail.com"">di.plom.a.t.jlewis@gmail.com</a>
<a href=""mailto:d.ip.lomat.jle.w.is@gmail.com"">d.ip.lomat.jle.w.is@gmail.com</a>
<a href=""mailto:d.i.plo.ma.tj.l.e.w.is@gmail.com"">d.i.plo.ma.tj.l.e.w.is@gmail.com</a>
<a href=""mailto:dipl.om.a.t.jlewis@gmail.com"">dipl.om.a.t.jlewis@gmail.com</a>
<a href=""mailto:d.i.p.lo.m.a.tj.l.ewi.s@gmail.com"">d.i.p.lo.m.a.tj.l.ewi.s@gmail.com</a>
<a href=""mailto:di.p.l.o.ma.tj.le.wis@gmail.com"">di.p.l.o.ma.tj.le.wis@gmail.com</a>
<a href=""mailto:d.ip.l.o.m.a.tj.l.ewis@gmail.com"">d.ip.l.o.m.a.tj.l.ewis@gmail.com</a>
<a href=""mailto:d.ip.lo.m.atjl.e.wi.s@gmail.com"">d.ip.lo.m.atjl.e.wi.s@gmail.com</a>
<a href=""mailto:di.p.loma.t.j.le.w.i.s@gmail.com"">di.p.loma.t.j.le.w.i.s@gmail.com</a>
<a href=""mailto:dipl.o.matj.le.wi.s@gmail.com"">dipl.o.matj.le.wi.s@gmail.com</a>
<a href=""mailto:d.i.p.l.o.m.atj.l.ewis@gmail.com"">d.i.p.l.o.m.atj.l.ewis@gmail.com</a>
<a href=""mailto:dip.l.o.ma.t.j.le.wi.s@gmail.com"">dip.l.o.ma.t.j.le.wi.s@gmail.com</a>
<a href=""mailto:di.p.lom.a.tjl.ewis@gmail.com"">di.p.lom.a.tjl.ewis@gmail.com</a>
<a href=""mailto:dip.lo.m.a.tjlewi.s@gmail.com"">dip.lo.m.a.tjlewi.s@gmail.com</a>
<a href=""mailto:diplomatjl.e.wis@gmail.com"">diplomatjl.e.wis@gmail.com</a>
<a href=""mailto:di.p.l.o.ma.tj.l.e.wi.s@gmail.com"">di.p.l.o.ma.tj.l.e.wi.s@gmail.com</a>
<a href=""mailto:d.i.plomatj.l.ewi.s@gmail.com"">d.i.plomatj.l.ewi.s@gmail.com</a>
<a href=""mailto:dip.lo.mat.j.lewi.s@gmail.com"">dip.lo.mat.j.lewi.s@gmail.com</a>
<a href=""mailto:di.plom.a.t.jlew.i.s@gmail.com"">di.plom.a.t.jlew.i.s@gmail.com</a>
<a href=""mailto:di.p.l.oma.tj.lewis@gmail.com"">di.p.l.oma.tj.lewis@gmail.com</a>
<a href=""mailto:diplo.ma.t.j.l.ew.i.s@gmail.com"">diplo.ma.t.j.l.ew.i.s@gmail.com</a>
<a href=""mailto:d.i.p.l.oma.t.jle.w.is@gmail.com"">d.i.p.l.oma.t.jle.w.is@gmail.com</a>
<a href=""mailto:d.ip.lom.atj.l.e.wis@gmail.com"">d.ip.lom.atj.l.e.wis@gmail.com</a>
<a href=""mailto:di.p.l.om.atj.lewis@gmail.com"">di.p.l.om.atj.lewis@gmail.com</a>
<a href=""mailto:di.pl.oma.tjl.ewi.s@gmail.com"">di.pl.oma.tjl.ewi.s@gmail.com</a>
<a href=""mailto:d.i.p.l.oma.t.j.l.e.wis@gmail.com"">d.i.p.l.oma.t.j.l.e.wis@gmail.com</a>
<a href=""mailto:di.pl.om.a.tj.lew.is@gmail.com"">di.pl.om.a.tj.lew.is@gmail.com</a>
<a href=""mailto:dip.lo.m.atj.le.wi.s@gmail.com"">dip.lo.m.atj.le.wi.s@gmail.com</a>
<a href=""mailto:d.ipl.o.matjle.wi.s@gmail.com"">d.ipl.o.matjle.wi.s@gmail.com</a>
<a href=""mailto:d.ip.lo.ma.tjl.e.w.i.s@gmail.com"">d.ip.lo.ma.tjl.e.w.i.s@gmail.com</a>
<a href=""mailto:di.pl.o.m.a.t.jle.wi.s@gmail.com"">di.pl.o.m.a.t.jle.wi.s@gmail.com</a>
<a href=""mailto:dipl.o.m.at.j.l.e.wis@gmail.com"">dipl.o.m.at.j.l.e.wis@gmail.com</a>
<a href=""mailto:d.ip.loma.tjlewis@gmail.com"">d.ip.loma.tjlewis@gmail.com</a>
<a href=""mailto:d.ip.lo.ma.t.jlew.i.s@gmail.com"">d.ip.lo.ma.t.jlew.i.s@gmail.com</a>
<a href=""mailto:d.iplo.m.atj.l.e.wi.s@gmail.com"">d.iplo.m.atj.l.e.wi.s@gmail.com</a>
<a href=""mailto:di.p.lo.ma.t.jlewis@gmail.com"">di.p.lo.ma.t.jlewis@gmail.com</a>
<a href=""mailto:d.ip.l.o.mat.jl.e.wis@gmail.com"">d.ip.l.o.mat.jl.e.wis@gmail.com</a>
<a href=""mailto:di.p.lo.m.a.t.j.l.e.wis@gmail.com"">di.p.lo.m.a.t.j.l.e.wis@gmail.com</a>
<a href=""mailto:d.i.p.l.oma.tjle.w.is@gmail.com"">d.i.p.l.oma.tjle.w.is@gmail.com</a>
<a href=""mailto:d.ipl.o.m.atjl.ewis@gmail.com"">d.ipl.o.m.atjl.ewis@gmail.com</a>
<a href=""mailto:d.i.p.lo.m.a.t.jl.ewis@gmail.com"">d.i.p.lo.m.a.t.jl.ewis@gmail.com</a>
<a href=""mailto:di.pl.omatjl.ew.i.s@gmail.com"">di.pl.omatjl.ew.i.s@gmail.com</a>
<a href=""mailto:d.i.pl.o.ma.tjlewis@gmail.com"">d.i.pl.o.ma.tjlewis@gmail.com</a>
<a href=""mailto:d.i.plomat.j.lewi.s@gmail.com"">d.i.plomat.j.lewi.s@gmail.com</a>
<a href=""mailto:d.ip.lo.m.a.t.j.lew.i.s@gmail.com"">d.ip.lo.m.a.t.j.lew.i.s@gmail.com</a>
<a href=""mailto:d.ip.l.o.matj.l.ew.i.s@gmail.com"">d.ip.l.o.matj.l.ew.i.s@gmail.com</a>
<a href=""mailto:d.i.plom.atj.l.e.wi.s@gmail.com"">d.i.plom.atj.l.e.wi.s@gmail.com</a>
<a href=""mailto:di.pl.o.m.a.tjlewis@gmail.com"">di.pl.o.m.a.tjlewis@gmail.com</a>
<a href=""mailto:d.i.p.l.omatjl.ewis@gmail.com"">d.i.p.l.omatjl.ewis@gmail.com</a>
<a href=""mailto:diplom.a.tjl.e.w.is@gmail.com"">diplom.a.tjl.e.w.is@gmail.com</a>
<a href=""mailto:dip.lom.atj.lew.i.s@gmail.com"">dip.lom.atj.lew.i.s@gmail.com</a>
<a href=""mailto:d.ip.l.o.mat.j.lewi.s@gmail.com"">d.ip.l.o.mat.j.lewi.s@gmail.com</a>
<a href=""mailto:dip.lomat.j.lewis@gmail.com"">dip.lomat.j.lewis@gmail.com</a>
<a href=""mailto:dip.lom.atjlew.i.s@gmail.com"">dip.lom.atjlew.i.s@gmail.com</a>
<a href=""mailto:di.p.l.omatjl.ew.is@gmail.com"">di.p.l.omatjl.ew.is@gmail.com</a>
<a href=""mailto:di.p.lom.atjle.wis@gmail.com"">di.p.lom.atjle.wis@gmail.com</a>
<a href=""mailto:di.p.loma.tjl.e.wi.s@gmail.com"">di.p.loma.tjl.e.wi.s@gmail.com</a>
<a href=""mailto:d.i.plo.ma.t.j.l.ew.is@gmail.com"">d.i.plo.ma.t.j.l.ew.is@gmail.com</a>
<a href=""mailto:dip.lo.m.a.t.j.lew.is@gmail.com"">dip.lo.m.a.t.j.lew.is@gmail.com</a>
<a href=""mailto:diplo.matjle.w.i.s@gmail.com"">diplo.matjle.w.i.s@gmail.com</a>
<a href=""mailto:diplo.matj.le.wis@gmail.com"">diplo.matj.le.wis@gmail.com</a>
<a href=""mailto:d.ip.l.omatjl.ew.is@gmail.com"">d.ip.l.omatjl.ew.is@gmail.com</a>
<a href=""mailto:dip.lom.at.jlew.is@gmail.com"">dip.lom.at.jlew.is@gmail.com</a>
<a href=""mailto:d.i.plom.a.tjl.e.w.is@gmail.com"">d.i.plom.a.tjl.e.w.is@gmail.com</a>
<a href=""mailto:d.i.p.lo.ma.t.jl.ewis@gmail.com"">d.i.p.lo.ma.t.jl.ewis@gmail.com</a>
<a href=""mailto:d.ip.l.o.m.at.jlew.i.s@gmail.com"">d.ip.l.o.m.at.jlew.i.s@gmail.com</a>
<a href=""mailto:d.i.p.l.o.m.at.jle.wis@gmail.com"">d.i.p.l.o.m.at.jle.wis@gmail.com</a>
<a href=""mailto:d.ipl.oma.t.j.l.e.w.i.s@gmail.com"">d.ipl.oma.t.j.l.e.w.i.s@gmail.com</a>
<a href=""mailto:di.pl.om.a.tj.l.e.wis@gmail.com"">di.pl.om.a.tj.l.e.wis@gmail.com</a>
<a href=""mailto:d.i.p.lo.matjlew.i.s@gmail.com"">d.i.p.lo.matjlew.i.s@gmail.com</a>
<a href=""mailto:dip.l.om.a.t.j.lewi.s@gmail.com"">dip.l.om.a.t.j.lewi.s@gmail.com</a>
<a href=""mailto:di.pl.om.atj.lew.i.s@gmail.com"">di.pl.om.atj.lew.i.s@gmail.com</a>
<a href=""mailto:dipl.o.ma.tjl.ewi.s@gmail.com"">dipl.o.ma.tjl.ewi.s@gmail.com</a>
<a href=""mailto:dip.lo.matjl.ewis@gmail.com"">dip.lo.matjl.ewis@gmail.com</a>
<a href=""mailto:diplo.ma.tjle.w.is@gmail.com"">diplo.ma.tjle.w.is@gmail.com</a>
<a href=""mailto:dip.lo.ma.t.j.l.ewis@gmail.com"">dip.lo.ma.t.j.l.ewis@gmail.com</a>
<a href=""mailto:d.ipl.o.matjlew.is@gmail.com"">d.ipl.o.matjlew.is@gmail.com</a>
<a href=""mailto:d.ip.lo.ma.tjl.ewis@gmail.com"">d.ip.lo.ma.tjl.ewis@gmail.com</a>
<a href=""mailto:d.i.plomat.j.lew.is@gmail.com"">d.i.plomat.j.lew.is@gmail.com</a>
<a href=""mailto:di.pl.oma.tjl.ew.i.s@gmail.com"">di.pl.oma.tjl.ew.i.s@gmail.com</a>
<a href=""mailto:di.pl.o.m.atjle.wi.s@gmail.com"">di.pl.o.m.atjle.wi.s@gmail.com</a>
<a href=""mailto:d.i.p.l.oma.t.j.l.e.wi.s@gmail.com"">d.i.p.l.oma.t.j.l.e.wi.s@gmail.com</a>
<a href=""mailto:di.p.lo.ma.tj.le.wi.s@gmail.com"">di.p.lo.ma.tj.le.wi.s@gmail.com</a>
<a href=""mailto:d.ipl.omatjlew.is@gmail.com"">d.ipl.omatjlew.is@gmail.com</a>
<a href=""mailto:d.ip.lo.m.a.tj.l.ew.is@gmail.com"">d.ip.lo.m.a.tj.l.ew.is@gmail.com</a>
<a href=""mailto:d.i.p.l.o.m.at.jl.ew.i.s@gmail.com"">d.i.p.l.o.m.at.jl.ew.i.s@gmail.com</a>
<a href=""mailto:d.ip.l.o.m.a.t.j.le.w.is@gmail.com"">d.ip.l.o.m.a.t.j.le.w.is@gmail.com</a>
<a href=""mailto:diploma.tj.l.ewi.s@gmail.com"">diploma.tj.l.ewi.s@gmail.com</a>
<a href=""mailto:d.i.pl.o.m.a.tjlewi.s@gmail.com"">d.i.pl.o.m.a.tjlewi.s@gmail.com</a>
<a href=""mailto:d.i.plo.m.atj.lew.i.s@gmail.com"">d.i.plo.m.atj.lew.i.s@gmail.com</a>
<a href=""mailto:dip.lom.atjl.e.wi.s@gmail.com"">dip.lom.atjl.e.wi.s@gmail.com</a>
<a href=""mailto:di.p.loma.tjl.ew.i.s@gmail.com"">di.p.loma.tjl.ew.i.s@gmail.com</a>
<a href=""mailto:d.i.plomatj.l.ew.i.s@gmail.com"">d.i.plomatj.l.ew.i.s@gmail.com</a>
<a href=""mailto:d.i.pl.oma.tj.le.w.i.s@gmail.com"">d.i.pl.oma.tj.le.w.i.s@gmail.com</a>
<a href=""mailto:di.p.l.o.m.at.jl.e.wis@gmail.com"">di.p.l.o.m.at.jl.e.wis@gmail.com</a>
<a href=""mailto:diplo.m.a.t.j.le.w.i.s@gmail.com"">diplo.m.a.t.j.le.w.i.s@gmail.com</a>
<a href=""mailto:d.i.pl.oma.tjl.e.wi.s@gmail.com"">d.i.pl.oma.tjl.e.wi.s@gmail.com</a>
<a href=""mailto:dipl.om.atj.l.ew.is@gmail.com"">dipl.om.atj.l.ew.is@gmail.com</a>
<a href=""mailto:d.ipl.o.matj.l.e.w.i.s@gmail.com"">d.ipl.o.matj.l.e.w.i.s@gmail.com</a>
<a href=""mailto:d.ip.l.om.at.jle.wis@gmail.com"">d.ip.l.om.at.jle.wis@gmail.com</a>
<a href=""mailto:d.i.plomat.jlew.i.s@gmail.com"">d.i.plomat.jlew.i.s@gmail.com</a>
<a href=""mailto:dip.l.o.m.a.tj.l.e.wi.s@gmail.com"">dip.l.o.m.a.tj.l.e.wi.s@gmail.com</a>
<a href=""mailto:d.i.plom.at.jl.ewi.s@gmail.com"">d.i.plom.at.jl.ewi.s@gmail.com</a>
<a href=""mailto:diplom.a.tj.lew.i.s@gmail.com"">diplom.a.tj.lew.i.s@gmail.com</a>
<a href=""mailto:d.ip.l.om.a.tjl.e.w.is@gmail.com"">d.ip.l.om.a.tjl.e.w.is@gmail.com</a>
<a href=""mailto:diplo.m.a.tj.le.w.i.s@gmail.com"">diplo.m.a.tj.le.w.i.s@gmail.com</a>
<a href=""mailto:di.p.l.oma.t.j.l.ewi.s@gmail.com"">di.p.l.oma.t.j.l.ewi.s@gmail.com</a>
<a href=""mailto:d.ip.lo.m.a.tj.lew.i.s@gmail.com"">d.ip.lo.m.a.tj.lew.i.s@gmail.com</a>
<a href=""mailto:d.iploma.tj.le.wis@gmail.com"">d.iploma.tj.le.wis@gmail.com</a>
<a href=""mailto:d.i.ploma.t.jle.wi.s@gmail.com"">d.i.ploma.t.jle.wi.s@gmail.com</a>
<a href=""mailto:d.iploma.t.j.l.ewi.s@gmail.com"">d.iploma.t.j.l.ewi.s@gmail.com</a>
<a href=""mailto:dip.l.o.mat.j.lewi.s@gmail.com"">dip.l.o.mat.j.lewi.s@gmail.com</a>
<a href=""mailto:di.p.loma.t.j.l.e.wis@gmail.com"">di.p.loma.t.j.l.e.wis@gmail.com</a>
<a href=""mailto:d.ip.l.omat.j.lew.i.s@gmail.com"">d.ip.l.omat.j.lew.i.s@gmail.com</a>
<a href=""mailto:d.i.p.lo.m.at.j.l.ewi.s@gmail.com"">d.i.p.lo.m.at.j.l.ewi.s@gmail.com</a>
<a href=""mailto:dip.loma.tj.lewi.s@gmail.com"">dip.loma.tj.lewi.s@gmail.com</a>
<a href=""mailto:dipl.o.m.atj.le.w.i.s@gmail.com"">dipl.o.m.atj.le.w.i.s@gmail.com</a>
<a href=""mailto:d.ipl.o.ma.t.jlew.is@gmail.com"">d.ipl.o.ma.t.jlew.is@gmail.com</a>
<a href=""mailto:imfbenin4@gmail.com"">imfbenin4@gmail.com</a>
<a href=""mailto:imf.ben.in.4@gmail.com"">imf.ben.in.4@gmail.com</a>
<a href=""mailto:im.f.be.n.in.4@gmail.com"">im.f.be.n.in.4@gmail.com</a>
<a href=""mailto:im.f.b.e.n.in.4@gmail.com"">im.f.b.e.n.in.4@gmail.com</a>
<a href=""mailto:i.m.fbenin4@gmail.com"">i.m.fbenin4@gmail.com</a>
<a href=""mailto:i.m.f.be.n.in4@gmail.com"">i.m.f.be.n.in4@gmail.com</a>
<a href=""mailto:i.mf.benin4@gmail.com"">i.mf.benin4@gmail.com</a>
<a href=""mailto:i.m.f.b.en.i.n.4@gmail.com"">i.m.f.b.en.i.n.4@gmail.com</a>
<a href=""mailto:i.m.fbe.ni.n4@gmail.com"">i.m.fbe.ni.n4@gmail.com</a>
<a href=""mailto:im.f.be.nin.4@gmail.com"">im.f.be.nin.4@gmail.com</a>
<a href=""mailto:imf.b.enin4@gmail.com"">imf.b.enin4@gmail.com</a>
<a href=""mailto:im.f.be.ni.n.4@gmail.com"">im.f.be.ni.n.4@gmail.com</a>
<a href=""mailto:imfb.e.n.in4@gmail.com"">imfb.e.n.in4@gmail.com</a>
<a href=""mailto:im.fb.en.in4@gmail.com"">im.fb.en.in4@gmail.com</a>
<a href=""mailto:i.m.f.b.eni.n4@gmail.com"">i.m.f.b.eni.n4@gmail.com</a>
<a href=""mailto:imfb.e.n.in.4@gmail.com"">imfb.e.n.in.4@gmail.com</a>
<a href=""mailto:im.fb.e.nin4@gmail.com"">im.fb.e.nin4@gmail.com</a>
<a href=""mailto:im.fbe.n.in4@gmail.com"">im.fbe.n.in4@gmail.com</a>
<a href=""mailto:imf.ben.i.n4@gmail.com"">imf.ben.i.n4@gmail.com</a>
<a href=""mailto:im.fb.e.ni.n4@gmail.com"">im.fb.e.ni.n4@gmail.com</a>
<a href=""mailto:imfbe.ni.n4@gmail.com"">imfbe.ni.n4@gmail.com</a>
<a href=""mailto:i.mf.be.n.in4@gmail.com"">i.mf.be.n.in4@gmail.com</a>
<a href=""mailto:i.mfben.in4@gmail.com"">i.mfben.in4@gmail.com</a>
<a href=""mailto:im.fbe.nin4@gmail.com"">im.fbe.nin4@gmail.com</a>
<a href=""mailto:imf.b.e.nin.4@gmail.com"">imf.b.e.nin.4@gmail.com</a>
<a href=""mailto:im.fb.en.i.n4@gmail.com"">im.fb.en.i.n4@gmail.com</a>
<a href=""mailto:im.f.ben.i.n.4@gmail.com"">im.f.ben.i.n.4@gmail.com</a>
<a href=""mailto:i.m.f.benin4@gmail.com"">i.m.f.benin4@gmail.com</a>
<a href=""mailto:im.f.b.enin.4@gmail.com"">im.f.b.enin.4@gmail.com</a>
<a href=""mailto:i.mfb.e.n.in.4@gmail.com"">i.mfb.e.n.in.4@gmail.com</a>
<a href=""mailto:i.mf.ben.i.n4@gmail.com"">i.mf.ben.i.n4@gmail.com</a>
<a href=""mailto:i.mfbenin4@gmail.com"">i.mfbenin4@gmail.com</a>
<a href=""mailto:imfb.e.n.i.n4@gmail.com"">imfb.e.n.i.n4@gmail.com</a>
<a href=""mailto:imf.b.e.n.in.4@gmail.com"">imf.b.e.n.in.4@gmail.com</a>
<a href=""mailto:i.m.f.ben.in.4@gmail.com"">i.m.f.ben.in.4@gmail.com</a>
<a href=""mailto:i.mf.b.e.nin.4@gmail.com"">i.mf.b.e.nin.4@gmail.com</a>
<a href=""mailto:i.mfbe.n.in.4@gmail.com"">i.mfbe.n.in.4@gmail.com</a>
<a href=""mailto:i.m.fb.e.ni.n.4@gmail.com"">i.m.fb.e.ni.n.4@gmail.com</a>
<a href=""mailto:im.f.b.eni.n.4@gmail.com"">im.f.b.eni.n.4@gmail.com</a>
<a href=""mailto:imf.beni.n4@gmail.com"">imf.beni.n4@gmail.com</a>
<a href=""mailto:i.mf.be.ni.n4@gmail.com"">i.mf.be.ni.n4@gmail.com</a>
<a href=""mailto:i.m.fbe.nin.4@gmail.com"">i.m.fbe.nin.4@gmail.com</a>
<a href=""mailto:i.mfb.enin.4@gmail.com"">i.mfb.enin.4@gmail.com</a>
<a href=""mailto:im.f.ben.i.n4@gmail.com"">im.f.ben.i.n4@gmail.com</a>
<a href=""mailto:im.fb.eni.n.4@gmail.com"">im.fb.eni.n.4@gmail.com</a>
<a href=""mailto:imfb.en.i.n.4@gmail.com"">imfb.en.i.n.4@gmail.com</a>
<a href=""mailto:imfben.i.n4@gmail.com"">imfben.i.n4@gmail.com</a>
<a href=""mailto:imf.b.e.nin4@gmail.com"">imf.b.e.nin4@gmail.com</a>
<a href=""mailto:imf.be.nin4@gmail.com"">imf.be.nin4@gmail.com</a>
<a href=""mailto:im.fb.e.ni.n.4@gmail.com"">im.fb.e.ni.n.4@gmail.com</a>
<a href=""mailto:i.mf.be.n.in.4@gmail.com"">i.mf.be.n.in.4@gmail.com</a>
<a href=""mailto:im.f.b.enin4@gmail.com"">im.f.b.enin4@gmail.com</a>
<a href=""mailto:im.f.b.e.nin.4@gmail.com"">im.f.b.e.nin.4@gmail.com</a>
<a href=""mailto:im.f.b.e.n.i.n.4@gmail.com"">im.f.b.e.n.i.n.4@gmail.com</a>
<a href=""mailto:im.fb.enin.4@gmail.com"">im.fb.enin.4@gmail.com</a>
<a href=""mailto:imf.be.nin.4@gmail.com"">imf.be.nin.4@gmail.com</a>
<a href=""mailto:i.m.f.b.en.i.n4@gmail.com"">i.m.f.b.en.i.n4@gmail.com</a>
<a href=""mailto:i.mf.b.eni.n.4@gmail.com"">i.mf.b.eni.n.4@gmail.com</a>
<a href=""mailto:i.m.f.be.ni.n4@gmail.com"">i.m.f.be.ni.n4@gmail.com</a>
<a href=""mailto:im.fb.e.n.i.n4@gmail.com"">im.fb.e.n.i.n4@gmail.com</a>
<a href=""mailto:i.m.fbe.n.i.n4@gmail.com"">i.m.fbe.n.i.n4@gmail.com</a>
<a href=""mailto:imfbe.n.in.4@gmail.com"">imfbe.n.in.4@gmail.com</a>
<a href=""mailto:i.mf.beni.n.4@gmail.com"">i.mf.beni.n.4@gmail.com</a>
<a href=""mailto:im.fbe.ni.n4@gmail.com"">im.fbe.ni.n4@gmail.com</a>
<a href=""mailto:im.fbe.nin.4@gmail.com"">im.fbe.nin.4@gmail.com</a>
<a href=""mailto:i.mfb.e.n.i.n.4@gmail.com"">i.mfb.e.n.i.n.4@gmail.com</a>
<a href=""mailto:i.mf.b.e.ni.n.4@gmail.com"">i.mf.b.e.ni.n.4@gmail.com</a>
<a href=""mailto:i.mf.b.en.i.n4@gmail.com"">i.mf.b.en.i.n4@gmail.com</a>
<a href=""mailto:i.m.f.beni.n4@gmail.com"">i.m.f.beni.n4@gmail.com</a>
<a href=""mailto:i.mfb.eni.n.4@gmail.com"">i.mfb.eni.n.4@gmail.com</a>
<a href=""mailto:i.m.f.b.en.in.4@gmail.com"">i.m.f.b.en.in.4@gmail.com</a>
<a href=""mailto:imf.ben.i.n.4@gmail.com"">imf.ben.i.n.4@gmail.com</a>
<a href=""mailto:i.m.f.b.e.n.in.4@gmail.com"">i.m.f.b.e.n.in.4@gmail.com</a>
<a href=""mailto:im.f.benin4@gmail.com"">im.f.benin4@gmail.com</a>
<a href=""mailto:i.mf.be.ni.n.4@gmail.com"">i.mf.be.ni.n.4@gmail.com</a>
<a href=""mailto:imfb.enin4@gmail.com"">imfb.enin4@gmail.com</a>
<a href=""mailto:i.m.f.b.e.nin.4@gmail.com"">i.m.f.b.e.nin.4@gmail.com</a>
<a href=""mailto:i.mfb.e.nin.4@gmail.com"">i.mfb.e.nin.4@gmail.com</a>
<a href=""mailto:i.m.fb.en.in.4@gmail.com"">i.m.fb.en.in.4@gmail.com</a>
<a href=""mailto:i.mfb.e.ni.n.4@gmail.com"">i.mfb.e.ni.n.4@gmail.com</a>
<a href=""mailto:imf.be.n.i.n4@gmail.com"">imf.be.n.i.n4@gmail.com</a>
<a href=""mailto:i.mfb.en.i.n4@gmail.com"">i.mfb.en.i.n4@gmail.com</a>
<a href=""mailto:imf.b.en.in4@gmail.com"">imf.b.en.in4@gmail.com</a>
<a href=""mailto:imfb.en.in.4@gmail.com"">imfb.en.in.4@gmail.com</a>
<a href=""mailto:im.f.b.e.ni.n.4@gmail.com"">im.f.b.e.ni.n.4@gmail.com</a>
<a href=""mailto:imf.be.n.in4@gmail.com"">imf.be.n.in4@gmail.com</a>
<a href=""mailto:i.mfbe.nin.4@gmail.com"">i.mfbe.nin.4@gmail.com</a>
<a href=""mailto:i.m.fbeni.n.4@gmail.com"">i.m.fbeni.n.4@gmail.com</a>
<a href=""mailto:imfben.in.4@gmail.com"">imfben.in.4@gmail.com</a>
<a href=""mailto:i.m.f.be.nin.4@gmail.com"">i.m.f.be.nin.4@gmail.com</a>
<a href=""mailto:i.m.fbe.ni.n.4@gmail.com"">i.m.fbe.ni.n.4@gmail.com</a>
<a href=""mailto:im.fbe.ni.n.4@gmail.com"">im.fbe.ni.n.4@gmail.com</a>
<a href=""mailto:i.m.fbe.n.i.n.4@gmail.com"">i.m.fbe.n.i.n.4@gmail.com</a>
<a href=""mailto:i.mf.ben.in4@gmail.com"">i.mf.ben.in4@gmail.com</a>
<a href=""mailto:im.fbenin4@gmail.com"">im.fbenin4@gmail.com</a>
<a href=""mailto:im.fbe.n.in.4@gmail.com"">im.fbe.n.in.4@gmail.com</a>
<a href=""mailto:imf.b.e.ni.n4@gmail.com"">imf.b.e.ni.n4@gmail.com</a>
<a href=""mailto:i.mf.be.n.i.n4@gmail.com"">i.mf.be.n.i.n4@gmail.com</a>
<a href=""mailto:i.mfbe.n.i.n.4@gmail.com"">i.mfbe.n.i.n.4@gmail.com</a>
<a href=""mailto:im.f.ben.in.4@gmail.com"">im.f.ben.in.4@gmail.com</a>
<a href=""mailto:imfb.en.i.n4@gmail.com"">imfb.en.i.n4@gmail.com</a>
<a href=""mailto:i.m.fb.en.i.n.4@gmail.com"">i.m.fb.en.i.n.4@gmail.com</a>
<a href=""mailto:i.m.fb.eni.n4@gmail.com"">i.m.fb.eni.n4@gmail.com</a>
<a href=""mailto:i.m.fb.enin4@gmail.com"">i.m.fb.enin4@gmail.com</a>
<a href=""mailto:im.f.be.n.i.n4@gmail.com"">im.f.be.n.i.n4@gmail.com</a>
<a href=""mailto:i.mf.ben.i.n.4@gmail.com"">i.mf.ben.i.n.4@gmail.com</a>
<a href=""mailto:i.m.fb.enin.4@gmail.com"">i.m.fb.enin.4@gmail.com</a>
<a href=""mailto:i.m.f.ben.i.n4@gmail.com"">i.m.f.ben.i.n4@gmail.com</a>
<a href=""mailto:i.mf.be.nin.4@gmail.com"">i.mf.be.nin.4@gmail.com</a>
<a href=""mailto:imfben.in4@gmail.com"">imfben.in4@gmail.com</a>
<a href=""mailto:im.f.be.n.i.n.4@gmail.com"">im.f.be.n.i.n.4@gmail.com</a>
<a href=""mailto:im.f.b.en.in4@gmail.com"">im.f.b.en.in4@gmail.com</a>
<a href=""mailto:i.m.f.b.enin4@gmail.com"">i.m.f.b.enin4@gmail.com</a>
<a href=""mailto:im.fbenin.4@gmail.com"">im.fbenin.4@gmail.com</a>
<a href=""mailto:imf.ben.in4@gmail.com"">imf.ben.in4@gmail.com</a>
<a href=""mailto:i.mfb.enin4@gmail.com"">i.mfb.enin4@gmail.com</a>
<a href=""mailto:imfben.i.n.4@gmail.com"">imfben.i.n.4@gmail.com</a>
<a href=""mailto:i.m.fb.e.n.i.n4@gmail.com"">i.m.fb.e.n.i.n4@gmail.com</a>
<a href=""mailto:i.mfbe.nin4@gmail.com"">i.mfbe.nin4@gmail.com</a>
<a href=""mailto:imf.be.n.i.n.4@gmail.com"">imf.be.n.i.n.4@gmail.com</a>
<a href=""mailto:imfbenin4@gmail.com"">imfbenin4@gmail.com</a>
<a href=""mailto:i.m.fb.en.i.n4@gmail.com"">i.m.fb.en.i.n4@gmail.com</a>
<a href=""mailto:im.f.b.en.i.n4@gmail.com"">im.f.b.en.i.n4@gmail.com</a>
<a href=""mailto:imfbe.n.i.n.4@gmail.com"">imfbe.n.i.n.4@gmail.com</a>
<a href=""mailto:imfb.e.ni.n4@gmail.com"">imfb.e.ni.n4@gmail.com</a>
<a href=""mailto:i.m.f.b.e.ni.n.4@gmail.com"">i.m.f.b.e.ni.n.4@gmail.com</a>
<a href=""mailto:i.mfbe.n.i.n4@gmail.com"">i.mfbe.n.i.n4@gmail.com</a>
<a href=""mailto:im.fben.in.4@gmail.com"">im.fben.in.4@gmail.com</a>
<a href=""mailto:i.m.fb.e.nin.4@gmail.com"">i.m.fb.e.nin.4@gmail.com</a>
<a href=""mailto:im.fb.eni.n4@gmail.com"">im.fb.eni.n4@gmail.com</a>
<a href=""mailto:imf.be.ni.n.4@gmail.com"">imf.be.ni.n.4@gmail.com</a>
<a href=""mailto:im.fben.in4@gmail.com"">im.fben.in4@gmail.com</a>
<a href=""mailto:imfbe.nin.4@gmail.com"">imfbe.nin.4@gmail.com</a>
<a href=""mailto:i.m.f.be.n.in.4@gmail.com"">i.m.f.be.n.in.4@gmail.com</a>
<a href=""mailto:im.f.benin.4@gmail.com"">im.f.benin.4@gmail.com</a>
<a href=""mailto:i.mf.benin.4@gmail.com"">i.mf.benin.4@gmail.com</a>
<a href=""mailto:imfbeni.n.4@gmail.com"">imfbeni.n.4@gmail.com</a>
<a href=""mailto:i.m.f.be.nin4@gmail.com"">i.m.f.be.nin4@gmail.com</a>
<a href=""mailto:i.m.fben.i.n4@gmail.com"">i.m.fben.i.n4@gmail.com</a>
<a href=""mailto:imfb.e.ni.n.4@gmail.com"">imfb.e.ni.n.4@gmail.com</a>
<a href=""mailto:imfb.e.nin.4@gmail.com"">imfb.e.nin.4@gmail.com</a>
<a href=""mailto:im.fbe.n.i.n.4@gmail.com"">im.fbe.n.i.n.4@gmail.com</a>
<a href=""mailto:i.m.f.benin.4@gmail.com"">i.m.f.benin.4@gmail.com</a>
<a href=""mailto:im.f.b.eni.n4@gmail.com"">im.f.b.eni.n4@gmail.com</a>
<a href=""mailto:i.m.fb.e.n.i.n.4@gmail.com"">i.m.fb.e.n.i.n.4@gmail.com</a>
<a href=""mailto:im.f.ben.in4@gmail.com"">im.f.ben.in4@gmail.com</a>
<a href=""mailto:i.m.fben.in4@gmail.com"">i.m.fben.in4@gmail.com</a>
<a href=""mailto:i.mfbenin.4@gmail.com"">i.mfbenin.4@gmail.com</a>
<a href=""mailto:i.mf.beni.n4@gmail.com"">i.mf.beni.n4@gmail.com</a>
<a href=""mailto:imfbeni.n4@gmail.com"">imfbeni.n4@gmail.com</a>
<a href=""mailto:imf.b.enin.4@gmail.com"">imf.b.enin.4@gmail.com</a>
<a href=""mailto:im.f.b.en.in.4@gmail.com"">im.f.b.en.in.4@gmail.com</a>
<a href=""mailto:im.f.be.nin4@gmail.com"">im.f.be.nin4@gmail.com</a>
<a href=""mailto:i.m.fb.e.ni.n4@gmail.com"">i.m.fb.e.ni.n4@gmail.com</a>
<a href=""mailto:i.m.f.b.e.n.i.n.4@gmail.com"">i.m.f.b.e.n.i.n.4@gmail.com</a>
<a href=""mailto:i.m.fbenin.4@gmail.com"">i.m.fbenin.4@gmail.com</a>
<a href=""mailto:i.mf.b.en.i.n.4@gmail.com"">i.mf.b.en.i.n.4@gmail.com</a>
<a href=""mailto:im.f.b.e.n.in4@gmail.com"">im.f.b.e.n.in4@gmail.com</a>
<a href=""mailto:imf.b.e.n.i.n4@gmail.com"">imf.b.e.n.i.n4@gmail.com</a>
<a href=""mailto:imf.b.eni.n4@gmail.com"">imf.b.eni.n4@gmail.com</a>
<a href=""mailto:im.fben.i.n.4@gmail.com"">im.fben.i.n.4@gmail.com</a>
<a href=""mailto:i.mfbeni.n.4@gmail.com"">i.mfbeni.n.4@gmail.com</a>
<a href=""mailto:i.mf.be.nin4@gmail.com"">i.mf.be.nin4@gmail.com</a>
<a href=""mailto:i.mfb.en.i.n.4@gmail.com"">i.mfb.en.i.n.4@gmail.com</a>
<a href=""mailto:i.m.fben.in.4@gmail.com"">i.m.fben.in.4@gmail.com</a>
<a href=""mailto:i.m.f.b.enin.4@gmail.com"">i.m.f.b.enin.4@gmail.com</a>
<a href=""mailto:imf.b.en.in.4@gmail.com"">imf.b.en.in.4@gmail.com</a>
<a href=""mailto:imf.benin.4@gmail.com"">imf.benin.4@gmail.com</a>
<a href=""mailto:i.m.fbe.n.in.4@gmail.com"">i.m.fbe.n.in.4@gmail.com</a>
<a href=""mailto:i.m.f.ben.in4@gmail.com"">i.m.f.ben.in4@gmail.com</a>
<a href=""mailto:i.m.f.b.eni.n.4@gmail.com"">i.m.f.b.eni.n.4@gmail.com</a>
<a href=""mailto:i.mfb.eni.n4@gmail.com"">i.mfb.eni.n4@gmail.com</a>
<a href=""mailto:i.mf.ben.in.4@gmail.com"">i.mf.ben.in.4@gmail.com</a>
<a href=""mailto:imfb.enin.4@gmail.com"">imfb.enin.4@gmail.com</a>
<a href=""mailto:i.mf.b.e.n.in.4@gmail.com"">i.mf.b.e.n.in.4@gmail.com</a>
<a href=""mailto:i.m.f.b.e.n.i.n4@gmail.com"">i.m.f.b.e.n.i.n4@gmail.com</a>
<a href=""mailto:im.fb.e.n.in.4@gmail.com"">im.fb.e.n.in.4@gmail.com</a>
<a href=""mailto:i.mfb.e.nin4@gmail.com"">i.mfb.e.nin4@gmail.com</a>
<a href=""mailto:im.fb.en.in.4@gmail.com"">im.fb.en.in.4@gmail.com</a>
<a href=""mailto:im.f.be.ni.n4@gmail.com"">im.f.be.ni.n4@gmail.com</a>
<a href=""mailto:im.fb.e.n.i.n.4@gmail.com"">im.fb.e.n.i.n.4@gmail.com</a>
<a href=""mailto:imfb.en.in4@gmail.com"">imfb.en.in4@gmail.com</a>
<a href=""mailto:i.mf.b.eni.n4@gmail.com"">i.mf.b.eni.n4@gmail.com</a>
<a href=""mailto:im.f.beni.n.4@gmail.com"">im.f.beni.n.4@gmail.com</a>
<a href=""mailto:imf.beni.n.4@gmail.com"">imf.beni.n.4@gmail.com</a>
<a href=""mailto:i.m.f.beni.n.4@gmail.com"">i.m.f.beni.n.4@gmail.com</a>
<a href=""mailto:i.mfb.en.in.4@gmail.com"">i.mfb.en.in.4@gmail.com</a>
<a href=""mailto:imfbe.ni.n.4@gmail.com"">imfbe.ni.n.4@gmail.com</a>
<a href=""mailto:i.mfbe.ni.n.4@gmail.com"">i.mfbe.ni.n.4@gmail.com</a>
<a href=""mailto:i.mf.b.e.n.i.n4@gmail.com"">i.mf.b.e.n.i.n4@gmail.com</a>
<a href=""mailto:imfb.eni.n.4@gmail.com"">imfb.eni.n.4@gmail.com</a>
<a href=""mailto:i.mfbeni.n4@gmail.com"">i.mfbeni.n4@gmail.com</a>
<a href=""mailto:im.fben.i.n4@gmail.com"">im.fben.i.n4@gmail.com</a>
<a href=""mailto:im.f.b.e.n.i.n4@gmail.com"">im.f.b.e.n.i.n4@gmail.com</a>
<a href=""mailto:i.m.f.b.e.n.in4@gmail.com"">i.m.f.b.e.n.in4@gmail.com</a>
<a href=""mailto:im.fb.en.i.n.4@gmail.com"">im.fb.en.i.n.4@gmail.com</a>
<a href=""mailto:imf.be.n.in.4@gmail.com"">imf.be.n.in.4@gmail.com</a>
<a href=""mailto:i.m.fbe.nin4@gmail.com"">i.m.fbe.nin4@gmail.com</a>
<a href=""mailto:i.m.fbe.n.in4@gmail.com"">i.m.fbe.n.in4@gmail.com</a>
<a href=""mailto:i.mfben.in.4@gmail.com"">i.mfben.in.4@gmail.com</a>
<a href=""mailto:im.f.beni.n4@gmail.com"">im.f.beni.n4@gmail.com</a>
<a href=""mailto:loydodey8@gmail.com"">loydodey8@gmail.com</a>
<a href=""mailto:l.o.yd.od.ey8@gmail.com"">l.o.yd.od.ey8@gmail.com</a>
<a href=""mailto:loy.d.o.de.y8@gmail.com"">loy.d.o.de.y8@gmail.com</a>
<a href=""mailto:loy.dode.y8@gmail.com"">loy.dode.y8@gmail.com</a>
<a href=""mailto:l.o.yd.odey8@gmail.com"">l.o.yd.odey8@gmail.com</a>
<a href=""mailto:l.oy.do.d.e.y8@gmail.com"">l.oy.do.d.e.y8@gmail.com</a>
<a href=""mailto:l.oy.d.od.e.y.8@gmail.com"">l.oy.d.od.e.y.8@gmail.com</a>
<a href=""mailto:lo.y.d.od.ey8@gmail.com"">lo.y.d.od.ey8@gmail.com</a>
<a href=""mailto:loy.d.od.ey.8@gmail.com"">loy.d.od.ey.8@gmail.com</a>
<a href=""mailto:l.o.y.dod.ey8@gmail.com"">l.o.y.dod.ey8@gmail.com</a>
<a href=""mailto:l.o.ydod.ey.8@gmail.com"">l.o.ydod.ey.8@gmail.com</a>
<a href=""mailto:l.o.y.dod.e.y8@gmail.com"">l.o.y.dod.e.y8@gmail.com</a>
<a href=""mailto:l.o.y.d.od.e.y8@gmail.com"">l.o.y.d.od.e.y8@gmail.com</a>
<a href=""mailto:l.o.y.d.ode.y8@gmail.com"">l.o.y.d.ode.y8@gmail.com</a>
<a href=""mailto:l.oydo.dey8@gmail.com"">l.oydo.dey8@gmail.com</a>
<a href=""mailto:l.o.y.d.o.d.e.y8@gmail.com"">l.o.y.d.o.d.e.y8@gmail.com</a>
<a href=""mailto:lo.y.dod.ey8@gmail.com"">lo.y.dod.ey8@gmail.com</a>
<a href=""mailto:lo.y.d.o.d.e.y.8@gmail.com"">lo.y.d.o.d.e.y.8@gmail.com</a>
<a href=""mailto:lo.y.dod.e.y.8@gmail.com"">lo.y.dod.e.y.8@gmail.com</a>
<a href=""mailto:l.oyd.od.ey.8@gmail.com"">l.oyd.od.ey.8@gmail.com</a>
<a href=""mailto:lo.y.d.od.ey.8@gmail.com"">lo.y.d.od.ey.8@gmail.com</a>
<a href=""mailto:lo.y.d.odey.8@gmail.com"">lo.y.d.odey.8@gmail.com</a>
<a href=""mailto:lo.ydo.d.ey.8@gmail.com"">lo.ydo.d.ey.8@gmail.com</a>
<a href=""mailto:lo.y.d.o.de.y.8@gmail.com"">lo.y.d.o.de.y.8@gmail.com</a>
<a href=""mailto:l.oyd.o.de.y8@gmail.com"">l.oyd.o.de.y8@gmail.com</a>
<a href=""mailto:l.o.yd.o.d.e.y.8@gmail.com"">l.o.yd.o.d.e.y.8@gmail.com</a>
<a href=""mailto:l.o.yd.ode.y.8@gmail.com"">l.o.yd.ode.y.8@gmail.com</a>
<a href=""mailto:l.o.yd.o.de.y8@gmail.com"">l.o.yd.o.de.y8@gmail.com</a>
<a href=""mailto:l.oy.dod.e.y8@gmail.com"">l.oy.dod.e.y8@gmail.com</a>
<a href=""mailto:lo.y.dodey8@gmail.com"">lo.y.dodey8@gmail.com</a>
<a href=""mailto:loydod.ey.8@gmail.com"">loydod.ey.8@gmail.com</a>
<a href=""mailto:l.oy.d.od.e.y8@gmail.com"">l.oy.d.od.e.y8@gmail.com</a>
<a href=""mailto:lo.yd.od.e.y.8@gmail.com"">lo.yd.od.e.y.8@gmail.com</a>
<a href=""mailto:l.o.y.do.d.e.y.8@gmail.com"">l.o.y.do.d.e.y.8@gmail.com</a>
<a href=""mailto:l.o.y.dode.y8@gmail.com"">l.o.y.dode.y8@gmail.com</a>
<a href=""mailto:lo.y.do.d.ey8@gmail.com"">lo.y.do.d.ey8@gmail.com</a>
<a href=""mailto:lo.yd.o.d.ey8@gmail.com"">lo.yd.o.d.ey8@gmail.com</a>
<a href=""mailto:l.o.yd.odey.8@gmail.com"">l.o.yd.odey.8@gmail.com</a>
<a href=""mailto:lo.ydod.e.y8@gmail.com"">lo.ydod.e.y8@gmail.com</a>
<a href=""mailto:l.o.yd.ode.y8@gmail.com"">l.o.yd.ode.y8@gmail.com</a>
<a href=""mailto:lo.ydod.ey8@gmail.com"">lo.ydod.ey8@gmail.com</a>
<a href=""mailto:loy.d.o.d.e.y8@gmail.com"">loy.d.o.d.e.y8@gmail.com</a>
<a href=""mailto:loydo.de.y8@gmail.com"">loydo.de.y8@gmail.com</a>
<a href=""mailto:lo.yd.ode.y.8@gmail.com"">lo.yd.ode.y.8@gmail.com</a>
<a href=""mailto:l.oyd.od.e.y8@gmail.com"">l.oyd.od.e.y8@gmail.com</a>
<a href=""mailto:l.oy.do.dey.8@gmail.com"">l.oy.do.dey.8@gmail.com</a>
<a href=""mailto:l.oy.d.o.d.e.y.8@gmail.com"">l.oy.d.o.d.e.y.8@gmail.com</a>
<a href=""mailto:l.oy.dod.ey.8@gmail.com"">l.oy.dod.ey.8@gmail.com</a>
<a href=""mailto:l.o.yd.o.d.e.y8@gmail.com"">l.o.yd.o.d.e.y8@gmail.com</a>
<a href=""mailto:l.o.yd.od.e.y.8@gmail.com"">l.o.yd.od.e.y.8@gmail.com</a>
<a href=""mailto:loy.do.dey.8@gmail.com"">loy.do.dey.8@gmail.com</a>
<a href=""mailto:l.oyd.o.dey8@gmail.com"">l.oyd.o.dey8@gmail.com</a>
<a href=""mailto:lo.yd.od.e.y8@gmail.com"">lo.yd.od.e.y8@gmail.com</a>
<a href=""mailto:l.o.ydod.e.y.8@gmail.com"">l.o.ydod.e.y.8@gmail.com</a>
<a href=""mailto:l.o.y.do.d.e.y8@gmail.com"">l.o.y.do.d.e.y8@gmail.com</a>
<a href=""mailto:lo.ydo.dey.8@gmail.com"">lo.ydo.dey.8@gmail.com</a>
<a href=""mailto:loy.d.ode.y8@gmail.com"">loy.d.ode.y8@gmail.com</a>
<a href=""mailto:l.o.y.d.od.ey.8@gmail.com"">l.o.y.d.od.ey.8@gmail.com</a>
<a href=""mailto:loydo.dey8@gmail.com"">loydo.dey8@gmail.com</a>
<a href=""mailto:lo.ydode.y.8@gmail.com"">lo.ydode.y.8@gmail.com</a>
<a href=""mailto:l.oydo.d.ey8@gmail.com"">l.oydo.d.ey8@gmail.com</a>
<a href=""mailto:lo.yd.o.dey8@gmail.com"">lo.yd.o.dey8@gmail.com</a>
<a href=""mailto:lo.yd.o.d.ey.8@gmail.com"">lo.yd.o.d.ey.8@gmail.com</a>
<a href=""mailto:loyd.ode.y.8@gmail.com"">loyd.ode.y.8@gmail.com</a>
<a href=""mailto:loy.do.d.ey8@gmail.com"">loy.do.d.ey8@gmail.com</a>
<a href=""mailto:loy.d.od.e.y.8@gmail.com"">loy.d.od.e.y.8@gmail.com</a>
<a href=""mailto:l.oyd.od.ey8@gmail.com"">l.oyd.od.ey8@gmail.com</a>
<a href=""mailto:l.o.y.d.odey.8@gmail.com"">l.o.y.d.odey.8@gmail.com</a>
<a href=""mailto:l.o.y.d.od.e.y.8@gmail.com"">l.o.y.d.od.e.y.8@gmail.com</a>
<a href=""mailto:l.oydodey.8@gmail.com"">l.oydodey.8@gmail.com</a>
<a href=""mailto:l.o.ydo.d.ey8@gmail.com"">l.o.ydo.d.ey8@gmail.com</a>
<a href=""mailto:l.oy.d.o.d.ey8@gmail.com"">l.oy.d.o.d.ey8@gmail.com</a>
<a href=""mailto:l.oydodey8@gmail.com"">l.oydodey8@gmail.com</a>
<a href=""mailto:lo.yd.o.de.y.8@gmail.com"">lo.yd.o.de.y.8@gmail.com</a>
<a href=""mailto:loydo.de.y.8@gmail.com"">loydo.de.y.8@gmail.com</a>
<a href=""mailto:l.o.yd.od.ey.8@gmail.com"">l.o.yd.od.ey.8@gmail.com</a>
<a href=""mailto:l.oydod.ey8@gmail.com"">l.oydod.ey8@gmail.com</a>
<a href=""mailto:l.oy.do.d.ey8@gmail.com"">l.oy.do.d.ey8@gmail.com</a>
<a href=""mailto:l.o.yd.o.de.y.8@gmail.com"">l.o.yd.o.de.y.8@gmail.com</a>
<a href=""mailto:loy.d.o.d.ey8@gmail.com"">loy.d.o.d.ey8@gmail.com</a>
<a href=""mailto:l.o.y.do.de.y.8@gmail.com"">l.o.y.do.de.y.8@gmail.com</a>
<a href=""mailto:loyd.o.d.ey8@gmail.com"">loyd.o.d.ey8@gmail.com</a>
<a href=""mailto:loydode.y.8@gmail.com"">loydode.y.8@gmail.com</a>
<a href=""mailto:l.oydod.e.y8@gmail.com"">l.oydod.e.y8@gmail.com</a>
<a href=""mailto:l.o.ydod.ey8@gmail.com"">l.o.ydod.ey8@gmail.com</a>
<a href=""mailto:loy.dode.y.8@gmail.com"">loy.dode.y.8@gmail.com</a>
<a href=""mailto:l.o.y.do.dey8@gmail.com"">l.o.y.do.dey8@gmail.com</a>
<a href=""mailto:l.oy.d.od.ey.8@gmail.com"">l.oy.d.od.ey.8@gmail.com</a>
<a href=""mailto:loyd.odey.8@gmail.com"">loyd.odey.8@gmail.com</a>
<a href=""mailto:lo.y.d.o.d.ey.8@gmail.com"">lo.y.d.o.d.ey.8@gmail.com</a>
<a href=""mailto:l.oydo.de.y8@gmail.com"">l.oydo.de.y8@gmail.com</a>
<a href=""mailto:loyd.o.d.e.y.8@gmail.com"">loyd.o.d.e.y.8@gmail.com</a>
<a href=""mailto:lo.y.do.dey8@gmail.com"">lo.y.do.dey8@gmail.com</a>
<a href=""mailto:l.o.ydo.dey8@gmail.com"">l.o.ydo.dey8@gmail.com</a>
<a href=""mailto:loy.do.d.ey.8@gmail.com"">loy.do.d.ey.8@gmail.com</a>
<a href=""mailto:lo.y.d.odey8@gmail.com"">lo.y.d.odey8@gmail.com</a>
<a href=""mailto:lo.y.dod.ey.8@gmail.com"">lo.y.dod.ey.8@gmail.com</a>
<a href=""mailto:loy.dod.ey8@gmail.com"">loy.dod.ey8@gmail.com</a>
<a href=""mailto:l.o.y.d.odey8@gmail.com"">l.o.y.d.odey8@gmail.com</a>
<a href=""mailto:l.o.yd.o.dey8@gmail.com"">l.o.yd.o.dey8@gmail.com</a>
<a href=""mailto:l.oyd.odey.8@gmail.com"">l.oyd.odey.8@gmail.com</a>
<a href=""mailto:l.oy.d.o.d.e.y8@gmail.com"">l.oy.d.o.d.e.y8@gmail.com</a>
<a href=""mailto:l.o.y.d.o.dey.8@gmail.com"">l.o.y.d.o.dey.8@gmail.com</a>
<a href=""mailto:l.oyd.ode.y.8@gmail.com"">l.oyd.ode.y.8@gmail.com</a>
<a href=""mailto:lo.ydo.d.ey8@gmail.com"">lo.ydo.d.ey8@gmail.com</a>
<a href=""mailto:lo.ydode.y8@gmail.com"">lo.ydode.y8@gmail.com</a>
<a href=""mailto:loydod.e.y8@gmail.com"">loydod.e.y8@gmail.com</a>
<a href=""mailto:l.oy.do.d.ey.8@gmail.com"">l.oy.do.d.ey.8@gmail.com</a>
<a href=""mailto:l.oyd.o.d.e.y8@gmail.com"">l.oyd.o.d.e.y8@gmail.com</a>
<a href=""mailto:l.oy.d.ode.y8@gmail.com"">l.oy.d.ode.y8@gmail.com</a>
<a href=""mailto:l.oydode.y.8@gmail.com"">l.oydode.y.8@gmail.com</a>
<a href=""mailto:l.oydo.d.ey.8@gmail.com"">l.oydo.d.ey.8@gmail.com</a>
<a href=""mailto:l.o.ydo.de.y.8@gmail.com"">l.o.ydo.de.y.8@gmail.com</a>
<a href=""mailto:lo.yd.o.dey.8@gmail.com"">lo.yd.o.dey.8@gmail.com</a>
<a href=""mailto:lo.ydo.d.e.y8@gmail.com"">lo.ydo.d.e.y8@gmail.com</a>
<a href=""mailto:l.o.y.d.o.de.y.8@gmail.com"">l.o.y.d.o.de.y.8@gmail.com</a>
<a href=""mailto:l.o.yd.o.d.ey.8@gmail.com"">l.o.yd.o.d.ey.8@gmail.com</a>
<a href=""mailto:l.oy.d.o.de.y.8@gmail.com"">l.oy.d.o.de.y.8@gmail.com</a>
<a href=""mailto:lo.y.do.d.e.y.8@gmail.com"">lo.y.do.d.e.y.8@gmail.com</a>
<a href=""mailto:l.oy.dode.y8@gmail.com"">l.oy.dode.y8@gmail.com</a>
<a href=""mailto:loy.dodey8@gmail.com"">loy.dodey8@gmail.com</a>
<a href=""mailto:l.o.y.dodey8@gmail.com"">l.o.y.dodey8@gmail.com</a>
<a href=""mailto:l.o.y.do.de.y8@gmail.com"">l.o.y.do.de.y8@gmail.com</a>
<a href=""mailto:loyd.o.d.ey.8@gmail.com"">loyd.o.d.ey.8@gmail.com</a>
<a href=""mailto:lo.y.d.ode.y.8@gmail.com"">lo.y.d.ode.y.8@gmail.com</a>
<a href=""mailto:l.o.y.d.o.d.e.y.8@gmail.com"">l.o.y.d.o.d.e.y.8@gmail.com</a>
<a href=""mailto:l.o.y.d.o.de.y8@gmail.com"">l.o.y.d.o.de.y8@gmail.com</a>
<a href=""mailto:loydo.d.e.y8@gmail.com"">loydo.d.e.y8@gmail.com</a>
<a href=""mailto:l.o.ydo.d.e.y.8@gmail.com"">l.o.ydo.d.e.y.8@gmail.com</a>
<a href=""mailto:loyd.o.dey.8@gmail.com"">loyd.o.dey.8@gmail.com</a>
<a href=""mailto:l.oy.d.odey8@gmail.com"">l.oy.d.odey8@gmail.com</a>
<a href=""mailto:l.oydode.y8@gmail.com"">l.oydode.y8@gmail.com</a>
<a href=""mailto:loyd.o.de.y.8@gmail.com"">loyd.o.de.y.8@gmail.com</a>
<a href=""mailto:l.oydo.d.e.y.8@gmail.com"">l.oydo.d.e.y.8@gmail.com</a>
<a href=""mailto:loydodey.8@gmail.com"">loydodey.8@gmail.com</a>
<a href=""mailto:loy.d.o.de.y.8@gmail.com"">loy.d.o.de.y.8@gmail.com</a>
<a href=""mailto:loydo.d.ey.8@gmail.com"">loydo.d.ey.8@gmail.com</a>
<a href=""mailto:l.o.ydo.dey.8@gmail.com"">l.o.ydo.dey.8@gmail.com</a>
<a href=""mailto:l.o.y.do.d.ey8@gmail.com"">l.o.y.do.d.ey8@gmail.com</a>
<a href=""mailto:l.o.ydode.y.8@gmail.com"">l.o.ydode.y.8@gmail.com</a>
<a href=""mailto:loy.d.od.ey8@gmail.com"">loy.d.od.ey8@gmail.com</a>
<a href=""mailto:l.o.y.dodey.8@gmail.com"">l.o.y.dodey.8@gmail.com</a>
<a href=""mailto:l.o.ydo.d.ey.8@gmail.com"">l.o.ydo.d.ey.8@gmail.com</a>
<a href=""mailto:l.oy.dodey.8@gmail.com"">l.oy.dodey.8@gmail.com</a>
<a href=""mailto:l.o.ydo.d.e.y8@gmail.com"">l.o.ydo.d.e.y8@gmail.com</a>
<a href=""mailto:loy.dod.e.y.8@gmail.com"">loy.dod.e.y.8@gmail.com</a>
<a href=""mailto:loyd.ode.y8@gmail.com"">loyd.ode.y8@gmail.com</a>
<a href=""mailto:loy.d.o.d.ey.8@gmail.com"">loy.d.o.d.ey.8@gmail.com</a>
<a href=""mailto:loydode.y8@gmail.com"">loydode.y8@gmail.com</a>
<a href=""mailto:l.oyd.o.d.e.y.8@gmail.com"">l.oyd.o.d.e.y.8@gmail.com</a>
<a href=""mailto:loy.d.o.dey8@gmail.com"">loy.d.o.dey8@gmail.com</a>
<a href=""mailto:loy.d.ode.y.8@gmail.com"">loy.d.ode.y.8@gmail.com</a>
<a href=""mailto:lo.yd.od.ey8@gmail.com"">lo.yd.od.ey8@gmail.com</a>
<a href=""mailto:loy.dod.e.y8@gmail.com"">loy.dod.e.y8@gmail.com</a>
<a href=""mailto:loy.do.de.y.8@gmail.com"">loy.do.de.y.8@gmail.com</a>
<a href=""mailto:l.o.y.d.o.d.ey.8@gmail.com"">l.o.y.d.o.d.ey.8@gmail.com</a>
<a href=""mailto:lo.ydo.de.y.8@gmail.com"">lo.ydo.de.y.8@gmail.com</a>
<a href=""mailto:lo.y.d.o.dey.8@gmail.com"">lo.y.d.o.dey.8@gmail.com</a>
<a href=""mailto:loy.d.od.e.y8@gmail.com"">loy.d.od.e.y8@gmail.com</a>
<a href=""mailto:loyd.od.ey8@gmail.com"">loyd.od.ey8@gmail.com</a>
<a href=""mailto:l.oy.d.o.d.ey.8@gmail.com"">l.oy.d.o.d.ey.8@gmail.com</a>
<a href=""mailto:loydod.ey8@gmail.com"">loydod.ey8@gmail.com</a>
<a href=""mailto:loydodey8@gmail.com"">loydodey8@gmail.com</a>
<a href=""mailto:loydo.d.e.y.8@gmail.com"">loydo.d.e.y.8@gmail.com</a>
<a href=""mailto:l.o.ydo.de.y8@gmail.com"">l.o.ydo.de.y8@gmail.com</a>
<a href=""mailto:lo.y.d.o.dey8@gmail.com"">lo.y.d.o.dey8@gmail.com</a>
<a href=""mailto:loy.d.o.d.e.y.8@gmail.com"">loy.d.o.d.e.y.8@gmail.com</a>
<a href=""mailto:lo.yd.od.ey.8@gmail.com"">lo.yd.od.ey.8@gmail.com</a>
<a href=""mailto:loyd.o.de.y8@gmail.com"">loyd.o.de.y8@gmail.com</a>
<a href=""mailto:l.o.yd.o.dey.8@gmail.com"">l.o.yd.o.dey.8@gmail.com</a>
<a href=""mailto:lo.y.d.o.d.ey8@gmail.com"">lo.y.d.o.d.ey8@gmail.com</a>
<a href=""mailto:lo.yd.odey.8@gmail.com"">lo.yd.odey.8@gmail.com</a>
<a href=""mailto:lo.y.d.od.e.y.8@gmail.com"">lo.y.d.od.e.y.8@gmail.com</a>
<a href=""mailto:loyd.o.d.e.y8@gmail.com"">loyd.o.d.e.y8@gmail.com</a>
<a href=""mailto:lo.y.dode.y.8@gmail.com"">lo.y.dode.y.8@gmail.com</a>
<a href=""mailto:l.o.y.do.d.ey.8@gmail.com"">l.o.y.do.d.ey.8@gmail.com</a>
<a href=""mailto:lo.ydod.ey.8@gmail.com"">lo.ydod.ey.8@gmail.com</a>
<a href=""mailto:loyd.odey8@gmail.com"">loyd.odey8@gmail.com</a>
<a href=""mailto:lo.yd.ode.y8@gmail.com"">lo.yd.ode.y8@gmail.com</a>
<a href=""mailto:l.oyd.odey8@gmail.com"">l.oyd.odey8@gmail.com</a>
<a href=""mailto:loy.do.d.e.y8@gmail.com"">loy.do.d.e.y8@gmail.com</a>
<a href=""mailto:l.oyd.o.d.ey.8@gmail.com"">l.oyd.o.d.ey.8@gmail.com</a>
<a href=""mailto:l.oyd.o.de.y.8@gmail.com"">l.oyd.o.de.y.8@gmail.com</a>
<a href=""mailto:l.oydo.de.y.8@gmail.com"">l.oydo.de.y.8@gmail.com</a>
<a href=""mailto:l.oyd.o.dey.8@gmail.com"">l.oyd.o.dey.8@gmail.com</a>
<a href=""mailto:lo.yd.odey8@gmail.com"">lo.yd.odey8@gmail.com</a>
<a href=""mailto:loydod.e.y.8@gmail.com"">loydod.e.y.8@gmail.com</a>
<a href=""mailto:l.oy.do.dey8@gmail.com"">l.oy.do.dey8@gmail.com</a>
<a href=""mailto:lo.ydod.e.y.8@gmail.com"">lo.ydod.e.y.8@gmail.com</a>
<a href=""mailto:l.oy.d.o.de.y8@gmail.com"">l.oy.d.o.de.y8@gmail.com</a>
<a href=""mailto:l.oydo.d.e.y8@gmail.com"">l.oydo.d.e.y8@gmail.com</a>
<a href=""mailto:l.oy.d.o.dey8@gmail.com"">l.oy.d.o.dey8@gmail.com</a>
<a href=""mailto:l.o.y.dod.e.y.8@gmail.com"">l.o.y.dod.e.y.8@gmail.com</a>
<a href=""mailto:lo.y.d.ode.y8@gmail.com"">lo.y.d.ode.y8@gmail.com</a>
<a href=""mailto:lo.y.d.o.d.e.y8@gmail.com"">lo.y.d.o.d.e.y8@gmail.com</a>
<a href=""mailto:loy.dod.ey.8@gmail.com"">loy.dod.ey.8@gmail.com</a>
<a href=""mailto:l.oy.do.de.y.8@gmail.com"">l.oy.do.de.y.8@gmail.com</a>
<a href=""mailto:l.oyd.o.d.ey8@gmail.com"">l.oyd.o.d.ey8@gmail.com</a>
<a href=""mailto:lo.ydo.dey8@gmail.com"">lo.ydo.dey8@gmail.com</a>
<a href=""mailto:l.o.y.do.dey.8@gmail.com"">l.o.y.do.dey.8@gmail.com</a>
<a href=""mailto:lo.ydodey.8@gmail.com"">lo.ydodey.8@gmail.com</a>
<a href=""mailto:jmaghjama@gmail.com"">jmaghjama@gmail.com</a>
<a href=""mailto:jm.ag.hjama@gmail.com"">jm.ag.hjama@gmail.com</a>
<a href=""mailto:j.m.a.gh.j.a.m.a@gmail.com"">j.m.a.gh.j.a.m.a@gmail.com</a>
<a href=""mailto:j.m.a.g.hjama@gmail.com"">j.m.a.g.hjama@gmail.com</a>
<a href=""mailto:jm.a.g.hjama@gmail.com"">jm.a.g.hjama@gmail.com</a>
<a href=""mailto:j.m.a.gh.ja.m.a@gmail.com"">j.m.a.gh.ja.m.a@gmail.com</a>
<a href=""mailto:jm.a.ghja.m.a@gmail.com"">jm.a.ghja.m.a@gmail.com</a>
<a href=""mailto:j.m.a.g.hjam.a@gmail.com"">j.m.a.g.hjam.a@gmail.com</a>
<a href=""mailto:j.m.ag.h.ja.m.a@gmail.com"">j.m.ag.h.ja.m.a@gmail.com</a>
<a href=""mailto:jmagh.j.ama@gmail.com"">jmagh.j.ama@gmail.com</a>
<a href=""mailto:jm.ag.h.j.a.m.a@gmail.com"">jm.ag.h.j.a.m.a@gmail.com</a>
<a href=""mailto:jma.g.hj.ama@gmail.com"">jma.g.hj.ama@gmail.com</a>
<a href=""mailto:jma.g.h.j.a.ma@gmail.com"">jma.g.h.j.a.ma@gmail.com</a>
<a href=""mailto:j.magh.jama@gmail.com"">j.magh.jama@gmail.com</a>
<a href=""mailto:j.mag.h.j.ama@gmail.com"">j.mag.h.j.ama@gmail.com</a>
<a href=""mailto:j.m.a.ghj.a.ma@gmail.com"">j.m.a.ghj.a.ma@gmail.com</a>
<a href=""mailto:j.mag.hj.am.a@gmail.com"">j.mag.hj.am.a@gmail.com</a>
<a href=""mailto:j.mag.hja.ma@gmail.com"">j.mag.hja.ma@gmail.com</a>
<a href=""mailto:jma.ghj.a.ma@gmail.com"">jma.ghj.a.ma@gmail.com</a>
<a href=""mailto:jm.aghja.ma@gmail.com"">jm.aghja.ma@gmail.com</a>
<a href=""mailto:jm.a.g.h.jama@gmail.com"">jm.a.g.h.jama@gmail.com</a>
<a href=""mailto:jm.ag.hj.a.m.a@gmail.com"">jm.ag.hj.a.m.a@gmail.com</a>
<a href=""mailto:j.maghj.ama@gmail.com"">j.maghj.ama@gmail.com</a>
<a href=""mailto:jmaghjam.a@gmail.com"">jmaghjam.a@gmail.com</a>
<a href=""mailto:jm.aghj.am.a@gmail.com"">jm.aghj.am.a@gmail.com</a>
<a href=""mailto:jma.gh.jama@gmail.com"">jma.gh.jama@gmail.com</a>
<a href=""mailto:j.m.a.g.h.j.am.a@gmail.com"">j.m.a.g.h.j.am.a@gmail.com</a>
<a href=""mailto:jm.agh.j.ama@gmail.com"">jm.agh.j.ama@gmail.com</a>
<a href=""mailto:jmag.hj.a.m.a@gmail.com"">jmag.hj.a.m.a@gmail.com</a>
<a href=""mailto:j.m.ag.hj.ama@gmail.com"">j.m.ag.hj.ama@gmail.com</a>
<a href=""mailto:jm.agh.ja.m.a@gmail.com"">jm.agh.ja.m.a@gmail.com</a>
<a href=""mailto:jma.g.h.j.ama@gmail.com"">jma.g.h.j.ama@gmail.com</a>
<a href=""mailto:j.m.a.g.h.ja.m.a@gmail.com"">j.m.a.g.h.ja.m.a@gmail.com</a>
<a href=""mailto:jma.ghjam.a@gmail.com"">jma.ghjam.a@gmail.com</a>
<a href=""mailto:jma.g.hja.m.a@gmail.com"">jma.g.hja.m.a@gmail.com</a>
<a href=""mailto:j.ma.g.hjama@gmail.com"">j.ma.g.hjama@gmail.com</a>
<a href=""mailto:jm.a.g.h.j.am.a@gmail.com"">jm.a.g.h.j.am.a@gmail.com</a>
<a href=""mailto:j.ma.ghj.ama@gmail.com"">j.ma.ghj.ama@gmail.com</a>
<a href=""mailto:jma.g.hj.am.a@gmail.com"">jma.g.hj.am.a@gmail.com</a>
<a href=""mailto:j.maghja.m.a@gmail.com"">j.maghja.m.a@gmail.com</a>
<a href=""mailto:j.m.a.ghj.ama@gmail.com"">j.m.a.ghj.ama@gmail.com</a>
<a href=""mailto:j.m.aghj.a.m.a@gmail.com"">j.m.aghj.a.m.a@gmail.com</a>
<a href=""mailto:j.ma.g.hj.ama@gmail.com"">j.ma.g.hj.ama@gmail.com</a>
<a href=""mailto:jmag.h.ja.ma@gmail.com"">jmag.h.ja.ma@gmail.com</a>
<a href=""mailto:j.ma.g.hj.a.m.a@gmail.com"">j.ma.g.hj.a.m.a@gmail.com</a>
<a href=""mailto:j.m.ag.hj.a.ma@gmail.com"">j.m.ag.hj.a.ma@gmail.com</a>
<a href=""mailto:jmag.h.j.ama@gmail.com"">jmag.h.j.ama@gmail.com</a>
<a href=""mailto:jm.ag.h.j.am.a@gmail.com"">jm.ag.h.j.am.a@gmail.com</a>
<a href=""mailto:j.ma.ghj.a.m.a@gmail.com"">j.ma.ghj.a.m.a@gmail.com</a>
<a href=""mailto:j.m.aghj.ama@gmail.com"">j.m.aghj.ama@gmail.com</a>
<a href=""mailto:jma.gh.j.am.a@gmail.com"">jma.gh.j.am.a@gmail.com</a>
<a href=""mailto:j.ma.g.h.ja.ma@gmail.com"">j.ma.g.h.ja.ma@gmail.com</a>
<a href=""mailto:jm.aghj.a.ma@gmail.com"">jm.aghj.a.ma@gmail.com</a>
<a href=""mailto:jmaghj.ama@gmail.com"">jmaghj.ama@gmail.com</a>
<a href=""mailto:j.m.a.g.h.j.ama@gmail.com"">j.m.a.g.h.j.ama@gmail.com</a>
<a href=""mailto:j.ma.g.hja.m.a@gmail.com"">j.ma.g.hja.m.a@gmail.com</a>
<a href=""mailto:jmagh.j.a.ma@gmail.com"">jmagh.j.a.ma@gmail.com</a>
<a href=""mailto:jmaghja.ma@gmail.com"">jmaghja.ma@gmail.com</a>
<a href=""mailto:jm.a.gh.ja.m.a@gmail.com"">jm.a.gh.ja.m.a@gmail.com</a>
<a href=""mailto:jmaghj.a.ma@gmail.com"">jmaghj.a.ma@gmail.com</a>
<a href=""mailto:j.mag.h.ja.ma@gmail.com"">j.mag.h.ja.ma@gmail.com</a>
<a href=""mailto:jma.gh.jam.a@gmail.com"">jma.gh.jam.a@gmail.com</a>
<a href=""mailto:jm.a.ghj.ama@gmail.com"">jm.a.ghj.ama@gmail.com</a>
<a href=""mailto:j.ma.g.hj.am.a@gmail.com"">j.ma.g.hj.am.a@gmail.com</a>
<a href=""mailto:j.ma.g.h.jam.a@gmail.com"">j.ma.g.h.jam.a@gmail.com</a>
<a href=""mailto:jma.gh.j.a.ma@gmail.com"">jma.gh.j.a.ma@gmail.com</a>
<a href=""mailto:jma.g.hja.ma@gmail.com"">jma.g.hja.ma@gmail.com</a>
<a href=""mailto:jma.gh.j.a.m.a@gmail.com"">jma.gh.j.a.m.a@gmail.com</a>
<a href=""mailto:j.m.aghja.m.a@gmail.com"">j.m.aghja.m.a@gmail.com</a>
<a href=""mailto:j.m.agh.j.a.m.a@gmail.com"">j.m.agh.j.a.m.a@gmail.com</a>
<a href=""mailto:jmag.hjama@gmail.com"">jmag.hjama@gmail.com</a>
<a href=""mailto:j.m.a.ghja.m.a@gmail.com"">j.m.a.ghja.m.a@gmail.com</a>
<a href=""mailto:j.m.ag.h.j.am.a@gmail.com"">j.m.ag.h.j.am.a@gmail.com</a>
<a href=""mailto:j.m.a.ghj.a.m.a@gmail.com"">j.m.a.ghj.a.m.a@gmail.com</a>
<a href=""mailto:jma.g.h.ja.m.a@gmail.com"">jma.g.h.ja.m.a@gmail.com</a>
<a href=""mailto:jm.a.ghjam.a@gmail.com"">jm.a.ghjam.a@gmail.com</a>
<a href=""mailto:j.maghj.a.ma@gmail.com"">j.maghj.a.ma@gmail.com</a>
<a href=""mailto:jma.ghjama@gmail.com"">jma.ghjama@gmail.com</a>
<a href=""mailto:j.mag.hj.ama@gmail.com"">j.mag.hj.ama@gmail.com</a>
<a href=""mailto:j.m.ag.hj.am.a@gmail.com"">j.m.ag.hj.am.a@gmail.com</a>
<a href=""mailto:jm.ag.hj.ama@gmail.com"">jm.ag.hj.ama@gmail.com</a>
<a href=""mailto:j.ma.gh.j.ama@gmail.com"">j.ma.gh.j.ama@gmail.com</a>
<a href=""mailto:j.maghjam.a@gmail.com"">j.maghjam.a@gmail.com</a>
<a href=""mailto:jmagh.j.am.a@gmail.com"">jmagh.j.am.a@gmail.com</a>
<a href=""mailto:jmaghj.a.m.a@gmail.com"">jmaghj.a.m.a@gmail.com</a>
<a href=""mailto:jmag.h.j.a.ma@gmail.com"">jmag.h.j.a.ma@gmail.com</a>
<a href=""mailto:jm.a.gh.j.a.ma@gmail.com"">jm.a.gh.j.a.ma@gmail.com</a>
<a href=""mailto:j.m.a.g.hja.ma@gmail.com"">j.m.a.g.hja.ma@gmail.com</a>
<a href=""mailto:jm.a.gh.ja.ma@gmail.com"">jm.a.gh.ja.ma@gmail.com</a>
<a href=""mailto:j.magh.jam.a@gmail.com"">j.magh.jam.a@gmail.com</a>
<a href=""mailto:jma.g.hj.a.ma@gmail.com"">jma.g.hj.a.ma@gmail.com</a>
<a href=""mailto:j.m.a.ghjam.a@gmail.com"">j.m.a.ghjam.a@gmail.com</a>
<a href=""mailto:j.m.agh.j.a.ma@gmail.com"">j.m.agh.j.a.ma@gmail.com</a>
<a href=""mailto:j.ma.gh.ja.m.a@gmail.com"">j.ma.gh.ja.m.a@gmail.com</a>
<a href=""mailto:j.m.a.g.hj.am.a@gmail.com"">j.m.a.g.hj.am.a@gmail.com</a>
<a href=""mailto:j.ma.g.h.j.a.ma@gmail.com"">j.ma.g.h.j.a.ma@gmail.com</a>
<a href=""mailto:j.m.ag.hjam.a@gmail.com"">j.m.ag.hjam.a@gmail.com</a>
<a href=""mailto:j.ma.ghja.m.a@gmail.com"">j.ma.ghja.m.a@gmail.com</a>
<a href=""mailto:j.magh.j.ama@gmail.com"">j.magh.j.ama@gmail.com</a>
<a href=""mailto:jmag.hj.a.ma@gmail.com"">jmag.hj.a.ma@gmail.com</a>
<a href=""mailto:jm.agh.j.a.ma@gmail.com"">jm.agh.j.a.ma@gmail.com</a>
<a href=""mailto:jm.a.g.hj.a.m.a@gmail.com"">jm.a.g.hj.a.m.a@gmail.com</a>
<a href=""mailto:jm.a.g.h.jam.a@gmail.com"">jm.a.g.h.jam.a@gmail.com</a>
<a href=""mailto:jma.ghja.ma@gmail.com"">jma.ghja.ma@gmail.com</a>
<a href=""mailto:jmag.hjam.a@gmail.com"">jmag.hjam.a@gmail.com</a>
<a href=""mailto:jm.a.g.h.j.a.m.a@gmail.com"">jm.a.g.h.j.a.m.a@gmail.com</a>
<a href=""mailto:j.m.ag.h.ja.ma@gmail.com"">j.m.ag.h.ja.ma@gmail.com</a>
<a href=""mailto:j.maghja.ma@gmail.com"">j.maghja.ma@gmail.com</a>
<a href=""mailto:j.m.ag.h.j.ama@gmail.com"">j.m.ag.h.j.ama@gmail.com</a>
<a href=""mailto:j.mag.h.j.am.a@gmail.com"">j.mag.h.j.am.a@gmail.com</a>
<a href=""mailto:j.m.ag.h.jama@gmail.com"">j.m.ag.h.jama@gmail.com</a>
<a href=""mailto:jm.ag.h.jama@gmail.com"">jm.ag.h.jama@gmail.com</a>
<a href=""mailto:jm.ag.hja.m.a@gmail.com"">jm.ag.hja.m.a@gmail.com</a>
<a href=""mailto:j.ma.ghj.a.ma@gmail.com"">j.ma.ghj.a.ma@gmail.com</a>
<a href=""mailto:jma.g.hjama@gmail.com"">jma.g.hjama@gmail.com</a>
<a href=""mailto:jm.ag.h.ja.ma@gmail.com"">jm.ag.h.ja.ma@gmail.com</a>
<a href=""mailto:jma.g.h.jam.a@gmail.com"">jma.g.h.jam.a@gmail.com</a>
<a href=""mailto:j.magh.ja.ma@gmail.com"">j.magh.ja.ma@gmail.com</a>
<a href=""mailto:j.m.ag.h.j.a.m.a@gmail.com"">j.m.ag.h.j.a.m.a@gmail.com</a>
<a href=""mailto:jm.a.g.h.ja.ma@gmail.com"">jm.a.g.h.ja.ma@gmail.com</a>
<a href=""mailto:jmag.hj.ama@gmail.com"">jmag.hj.ama@gmail.com</a>
<a href=""mailto:j.magh.j.a.ma@gmail.com"">j.magh.j.a.ma@gmail.com</a>
<a href=""mailto:j.m.aghj.a.ma@gmail.com"">j.m.aghj.a.ma@gmail.com</a>
<a href=""mailto:j.mag.hjama@gmail.com"">j.mag.hjama@gmail.com</a>
<a href=""mailto:j.m.a.ghj.am.a@gmail.com"">j.m.a.ghj.am.a@gmail.com</a>
<a href=""mailto:jm.a.g.hj.am.a@gmail.com"">jm.a.g.hj.am.a@gmail.com</a>
<a href=""mailto:jma.gh.j.ama@gmail.com"">jma.gh.j.ama@gmail.com</a>
<a href=""mailto:jm.a.g.hj.a.ma@gmail.com"">jm.a.g.hj.a.ma@gmail.com</a>
<a href=""mailto:j.ma.ghjam.a@gmail.com"">j.ma.ghjam.a@gmail.com</a>
<a href=""mailto:jm.a.gh.jama@gmail.com"">jm.a.gh.jama@gmail.com</a>
<a href=""mailto:j.ma.ghja.ma@gmail.com"">j.ma.ghja.ma@gmail.com</a>
<a href=""mailto:jm.ag.h.jam.a@gmail.com"">jm.ag.h.jam.a@gmail.com</a>
<a href=""mailto:j.mag.h.jam.a@gmail.com"">j.mag.h.jam.a@gmail.com</a>
<a href=""mailto:j.m.a.g.h.j.a.m.a@gmail.com"">j.m.a.g.h.j.a.m.a@gmail.com</a>
<a href=""mailto:j.mag.hjam.a@gmail.com"">j.mag.hjam.a@gmail.com</a>
<a href=""mailto:j.m.aghjam.a@gmail.com"">j.m.aghjam.a@gmail.com</a>
<a href=""mailto:jm.aghj.a.m.a@gmail.com"">jm.aghj.a.m.a@gmail.com</a>
<a href=""mailto:jma.gh.ja.m.a@gmail.com"">jma.gh.ja.m.a@gmail.com</a>
<a href=""mailto:jmag.h.ja.m.a@gmail.com"">jmag.h.ja.m.a@gmail.com</a>
<a href=""mailto:j.m.agh.j.am.a@gmail.com"">j.m.agh.j.am.a@gmail.com</a>
<a href=""mailto:jmagh.ja.ma@gmail.com"">jmagh.ja.ma@gmail.com</a>
<a href=""mailto:jmag.h.j.a.m.a@gmail.com"">jmag.h.j.a.m.a@gmail.com</a>
<a href=""mailto:j.m.a.gh.j.a.ma@gmail.com"">j.m.a.gh.j.a.ma@gmail.com</a>
<a href=""mailto:jmag.h.jam.a@gmail.com"">jmag.h.jam.a@gmail.com</a>
<a href=""mailto:jm.a.g.hja.ma@gmail.com"">jm.a.g.hja.ma@gmail.com</a>
<a href=""mailto:j.ma.gh.jam.a@gmail.com"">j.ma.gh.jam.a@gmail.com</a>
<a href=""mailto:jm.ag.hj.am.a@gmail.com"">jm.ag.hj.am.a@gmail.com</a>
<a href=""mailto:jmag.hja.m.a@gmail.com"">jmag.hja.m.a@gmail.com</a>
<a href=""mailto:jma.g.h.ja.ma@gmail.com"">jma.g.h.ja.ma@gmail.com</a>
<a href=""mailto:j.m.a.gh.jam.a@gmail.com"">j.m.a.gh.jam.a@gmail.com</a>
<a href=""mailto:jm.aghjama@gmail.com"">jm.aghjama@gmail.com</a>
<a href=""mailto:jm.a.ghj.am.a@gmail.com"">jm.a.ghj.am.a@gmail.com</a>
<a href=""mailto:j.m.agh.ja.ma@gmail.com"">j.m.agh.ja.ma@gmail.com</a>
<a href=""mailto:jmaghja.m.a@gmail.com"">jmaghja.m.a@gmail.com</a>
<a href=""mailto:j.m.ag.hja.m.a@gmail.com"">j.m.ag.hja.m.a@gmail.com</a>
<a href=""mailto:j.m.aghjama@gmail.com"">j.m.aghjama@gmail.com</a>
<a href=""mailto:j.ma.ghjama@gmail.com"">j.ma.ghjama@gmail.com</a>
<a href=""mailto:jm.a.gh.j.ama@gmail.com"">jm.a.gh.j.ama@gmail.com</a>
<a href=""mailto:j.ma.g.hjam.a@gmail.com"">j.ma.g.hjam.a@gmail.com</a>
<a href=""mailto:j.ma.g.h.j.am.a@gmail.com"">j.ma.g.h.j.am.a@gmail.com</a>
<a href=""mailto:j.m.ag.hjama@gmail.com"">j.m.ag.hjama@gmail.com</a>
<a href=""mailto:jm.ag.h.ja.m.a@gmail.com"">jm.ag.h.ja.m.a@gmail.com</a>
<a href=""mailto:j.m.agh.jam.a@gmail.com"">j.m.agh.jam.a@gmail.com</a>
<a href=""mailto:jm.agh.j.am.a@gmail.com"">jm.agh.j.am.a@gmail.com</a>
<a href=""mailto:jm.agh.jama@gmail.com"">jm.agh.jama@gmail.com</a>
<a href=""mailto:jm.a.g.hjam.a@gmail.com"">jm.a.g.hjam.a@gmail.com</a>
<a href=""mailto:j.mag.h.ja.m.a@gmail.com"">j.mag.h.ja.m.a@gmail.com</a>
<a href=""mailto:jm.aghja.m.a@gmail.com"">jm.aghja.m.a@gmail.com</a>
<a href=""mailto:j.m.ag.hja.ma@gmail.com"">j.m.ag.hja.ma@gmail.com</a>
<a href=""mailto:jma.g.hj.a.m.a@gmail.com"">jma.g.hj.a.m.a@gmail.com</a>
<a href=""mailto:jmag.hja.ma@gmail.com"">jmag.hja.ma@gmail.com</a>
<a href=""mailto:j.mag.h.j.a.m.a@gmail.com"">j.mag.h.j.a.m.a@gmail.com</a>
<a href=""mailto:jmaghjama@gmail.com"">jmaghjama@gmail.com</a>
<a href=""mailto:j.m.a.g.hj.a.m.a@gmail.com"">j.m.a.g.hj.a.m.a@gmail.com</a>
<a href=""mailto:jma.g.hjam.a@gmail.com"">jma.g.hjam.a@gmail.com</a>
<a href=""mailto:jmagh.jama@gmail.com"">jmagh.jama@gmail.com</a>
<a href=""mailto:jm.a.g.hj.ama@gmail.com"">jm.a.g.hj.ama@gmail.com</a>
<a href=""mailto:j.m.a.gh.j.ama@gmail.com"">j.m.a.gh.j.ama@gmail.com</a>
<a href=""mailto:jma.ghj.am.a@gmail.com"">jma.ghj.am.a@gmail.com</a>
<a href=""mailto:j.magh.j.am.a@gmail.com"">j.magh.j.am.a@gmail.com</a>
<a href=""mailto:j.ma.g.hj.a.ma@gmail.com"">j.ma.g.hj.a.ma@gmail.com</a>
<a href=""mailto:j.ma.g.h.jama@gmail.com"">j.ma.g.h.jama@gmail.com</a>
<a href=""mailto:jm.a.ghj.a.ma@gmail.com"">jm.a.ghj.a.ma@gmail.com</a>
<a href=""mailto:j.m.a.gh.jama@gmail.com"">j.m.a.gh.jama@gmail.com</a>
<a href=""mailto:j.m.a.gh.j.am.a@gmail.com"">j.m.a.gh.j.am.a@gmail.com</a>
<a href=""mailto:jmag.h.jama@gmail.com"">jmag.h.jama@gmail.com</a>
<a href=""mailto:j.m.aghja.ma@gmail.com"">j.m.aghja.ma@gmail.com</a>
<a href=""mailto:jm.a.ghjama@gmail.com"">jm.a.ghjama@gmail.com</a>
<a href=""mailto:j.ma.gh.jama@gmail.com"">j.ma.gh.jama@gmail.com</a>
<a href=""mailto:jm.a.gh.j.a.m.a@gmail.com"">jm.a.gh.j.a.m.a@gmail.com</a>
<a href=""mailto:j.maghj.a.m.a@gmail.com"">j.maghj.a.m.a@gmail.com</a>
<a href=""mailto:j.m.a.g.hj.ama@gmail.com"">j.m.a.g.hj.ama@gmail.com</a>
<a href=""mailto:jmag.h.j.am.a@gmail.com"">jmag.h.j.am.a@gmail.com</a>
<a href=""mailto:j.ma.gh.j.a.m.a@gmail.com"">j.ma.gh.j.a.m.a@gmail.com</a>
<a href=""mailto:jm.aghj.ama@gmail.com"">jm.aghj.ama@gmail.com</a>
<a href=""mailto:j.m.agh.j.ama@gmail.com"">j.m.agh.j.ama@gmail.com</a>
<a href=""mailto:j.ma.ghj.am.a@gmail.com"">j.ma.ghj.am.a@gmail.com</a>
<a href=""mailto:j.m.a.g.h.j.a.ma@gmail.com"">j.m.a.g.h.j.a.ma@gmail.com</a>
<a href=""mailto:j.mag.h.jama@gmail.com"">j.mag.h.jama@gmail.com</a>
<a href=""mailto:jm.ag.hja.ma@gmail.com"">jm.ag.hja.ma@gmail.com</a>
<a href=""mailto:j.m.a.ghja.ma@gmail.com"">j.m.a.ghja.ma@gmail.com</a>
<a href=""mailto:marysocct1@gmail.com"">marysocct1@gmail.com</a>
<a href=""mailto:mary.s.o.cc.t1@gmail.com"">mary.s.o.cc.t1@gmail.com</a>
<a href=""mailto:marysoc.c.t.1@gmail.com"">marysoc.c.t.1@gmail.com</a>
<a href=""mailto:mary.s.oc.ct1@gmail.com"">mary.s.oc.ct1@gmail.com</a>
<a href=""mailto:m.ar.y.socc.t.1@gmail.com"">m.ar.y.socc.t.1@gmail.com</a>
<a href=""mailto:m.ary.so.c.ct.1@gmail.com"">m.ary.so.c.ct.1@gmail.com</a>
<a href=""mailto:mar.y.so.c.ct1@gmail.com"">mar.y.so.c.ct1@gmail.com</a>
<a href=""mailto:m.ar.y.soc.ct1@gmail.com"">m.ar.y.soc.ct1@gmail.com</a>
<a href=""mailto:m.ar.ys.o.c.c.t1@gmail.com"">m.ar.ys.o.c.c.t1@gmail.com</a>
<a href=""mailto:m.arys.o.c.c.t.1@gmail.com"">m.arys.o.c.c.t.1@gmail.com</a>
<a href=""mailto:mar.ysoc.c.t1@gmail.com"">mar.ysoc.c.t1@gmail.com</a>
<a href=""mailto:maryso.c.c.t1@gmail.com"">maryso.c.c.t1@gmail.com</a>
<a href=""mailto:mary.s.oc.ct.1@gmail.com"">mary.s.oc.ct.1@gmail.com</a>
<a href=""mailto:m.a.r.ys.o.cc.t.1@gmail.com"">m.a.r.ys.o.cc.t.1@gmail.com</a>
<a href=""mailto:m.a.r.yso.c.ct1@gmail.com"">m.a.r.yso.c.ct1@gmail.com</a>
<a href=""mailto:m.ary.s.oc.ct.1@gmail.com"">m.ary.s.oc.ct.1@gmail.com</a>
<a href=""mailto:m.a.ry.s.occ.t.1@gmail.com"">m.a.ry.s.occ.t.1@gmail.com</a>
<a href=""mailto:marys.occt.1@gmail.com"">marys.occt.1@gmail.com</a>
<a href=""mailto:m.ary.so.cct.1@gmail.com"">m.ary.so.cct.1@gmail.com</a>
<a href=""mailto:m.a.ry.so.c.c.t1@gmail.com"">m.a.ry.so.c.c.t1@gmail.com</a>
<a href=""mailto:m.a.r.y.soc.c.t1@gmail.com"">m.a.r.y.soc.c.t1@gmail.com</a>
<a href=""mailto:m.a.rysoc.ct1@gmail.com"">m.a.rysoc.ct1@gmail.com</a>
<a href=""mailto:mar.y.soc.c.t.1@gmail.com"">mar.y.soc.c.t.1@gmail.com</a>
<a href=""mailto:m.ar.y.s.o.c.c.t1@gmail.com"">m.ar.y.s.o.c.c.t1@gmail.com</a>
<a href=""mailto:m.a.ryso.c.c.t.1@gmail.com"">m.a.ryso.c.c.t.1@gmail.com</a>
<a href=""mailto:m.a.r.ysoc.ct.1@gmail.com"">m.a.r.ysoc.ct.1@gmail.com</a>
<a href=""mailto:ma.ryso.cc.t1@gmail.com"">ma.ryso.cc.t1@gmail.com</a>
<a href=""mailto:ma.r.ys.occ.t1@gmail.com"">ma.r.ys.occ.t1@gmail.com</a>
<a href=""mailto:mar.ys.occt1@gmail.com"">mar.ys.occt1@gmail.com</a>
<a href=""mailto:m.arys.occ.t1@gmail.com"">m.arys.occ.t1@gmail.com</a>
<a href=""mailto:ma.r.y.so.c.ct.1@gmail.com"">ma.r.y.so.c.ct.1@gmail.com</a>
<a href=""mailto:mary.s.o.c.c.t1@gmail.com"">mary.s.o.c.c.t1@gmail.com</a>
<a href=""mailto:mar.yso.cct.1@gmail.com"">mar.yso.cct.1@gmail.com</a>
<a href=""mailto:m.a.r.ys.occ.t1@gmail.com"">m.a.r.ys.occ.t1@gmail.com</a>
<a href=""mailto:marys.occt1@gmail.com"">marys.occt1@gmail.com</a>
<a href=""mailto:m.a.ry.s.o.cc.t.1@gmail.com"">m.a.ry.s.o.cc.t.1@gmail.com</a>
<a href=""mailto:ma.ry.socc.t1@gmail.com"">ma.ry.socc.t1@gmail.com</a>
<a href=""mailto:m.a.r.ysocc.t1@gmail.com"">m.a.r.ysocc.t1@gmail.com</a>
<a href=""mailto:m.a.rys.o.cc.t.1@gmail.com"">m.a.rys.o.cc.t.1@gmail.com</a>
<a href=""mailto:m.ar.y.so.cc.t1@gmail.com"">m.ar.y.so.cc.t1@gmail.com</a>
<a href=""mailto:m.a.rysocct1@gmail.com"">m.a.rysocct1@gmail.com</a>
<a href=""mailto:m.ary.so.cct1@gmail.com"">m.ary.so.cct1@gmail.com</a>
<a href=""mailto:m.ary.so.cc.t1@gmail.com"">m.ary.so.cc.t1@gmail.com</a>
<a href=""mailto:m.arysocct.1@gmail.com"">m.arysocct.1@gmail.com</a>
<a href=""mailto:m.a.ry.so.cct1@gmail.com"">m.a.ry.so.cct1@gmail.com</a>
<a href=""mailto:mary.soc.ct1@gmail.com"">mary.soc.ct1@gmail.com</a>
<a href=""mailto:maryso.cct1@gmail.com"">maryso.cct1@gmail.com</a>
<a href=""mailto:mar.y.so.cc.t.1@gmail.com"">mar.y.so.cc.t.1@gmail.com</a>
<a href=""mailto:m.arysoc.ct.1@gmail.com"">m.arysoc.ct.1@gmail.com</a>
<a href=""mailto:ma.ry.s.occ.t.1@gmail.com"">ma.ry.s.occ.t.1@gmail.com</a>
<a href=""mailto:mar.ys.o.cc.t.1@gmail.com"">mar.ys.o.cc.t.1@gmail.com</a>
<a href=""mailto:mary.s.occ.t1@gmail.com"">mary.s.occ.t1@gmail.com</a>
<a href=""mailto:m.a.r.y.so.c.c.t1@gmail.com"">m.a.r.y.so.c.c.t1@gmail.com</a>
<a href=""mailto:m.ar.y.so.c.ct.1@gmail.com"">m.ar.y.so.c.ct.1@gmail.com</a>
<a href=""mailto:mary.s.o.cc.t.1@gmail.com"">mary.s.o.cc.t.1@gmail.com</a>
<a href=""mailto:ma.r.ys.oc.ct1@gmail.com"">ma.r.ys.oc.ct1@gmail.com</a>
<a href=""mailto:m.ary.s.o.cc.t.1@gmail.com"">m.ary.s.o.cc.t.1@gmail.com</a>
<a href=""mailto:ma.r.y.s.o.c.ct.1@gmail.com"">ma.r.y.s.o.c.ct.1@gmail.com</a>
<a href=""mailto:ma.r.y.s.o.cc.t.1@gmail.com"">ma.r.y.s.o.cc.t.1@gmail.com</a>
<a href=""mailto:ma.rys.oc.ct1@gmail.com"">ma.rys.oc.ct1@gmail.com</a>
<a href=""mailto:ma.ryso.c.ct1@gmail.com"">ma.ryso.c.ct1@gmail.com</a>
<a href=""mailto:m.ary.s.occt.1@gmail.com"">m.ary.s.occt.1@gmail.com</a>
<a href=""mailto:m.a.rys.occ.t1@gmail.com"">m.a.rys.occ.t1@gmail.com</a>
<a href=""mailto:m.ar.y.so.cc.t.1@gmail.com"">m.ar.y.so.cc.t.1@gmail.com</a>
<a href=""mailto:maryso.c.ct.1@gmail.com"">maryso.c.ct.1@gmail.com</a>
<a href=""mailto:m.ar.y.soc.ct.1@gmail.com"">m.ar.y.soc.ct.1@gmail.com</a>
<a href=""mailto:m.a.r.y.s.occt.1@gmail.com"">m.a.r.y.s.occt.1@gmail.com</a>
<a href=""mailto:m.a.r.y.s.o.cc.t1@gmail.com"">m.a.r.y.s.o.cc.t1@gmail.com</a>
<a href=""mailto:ma.r.y.socct.1@gmail.com"">ma.r.y.socct.1@gmail.com</a>
<a href=""mailto:ma.rys.o.cc.t.1@gmail.com"">ma.rys.o.cc.t.1@gmail.com</a>
<a href=""mailto:mar.y.s.o.cc.t.1@gmail.com"">mar.y.s.o.cc.t.1@gmail.com</a>
<a href=""mailto:ma.r.yso.cct1@gmail.com"">ma.r.yso.cct1@gmail.com</a>
<a href=""mailto:m.ar.ys.o.c.ct.1@gmail.com"">m.ar.ys.o.c.ct.1@gmail.com</a>
<a href=""mailto:marys.o.c.c.t1@gmail.com"">marys.o.c.c.t1@gmail.com</a>
<a href=""mailto:mary.s.oc.c.t1@gmail.com"">mary.s.oc.c.t1@gmail.com</a>
<a href=""mailto:ma.r.ys.o.cc.t.1@gmail.com"">ma.r.ys.o.cc.t.1@gmail.com</a>
<a href=""mailto:ma.r.y.s.oc.c.t.1@gmail.com"">ma.r.y.s.oc.c.t.1@gmail.com</a>
<a href=""mailto:ma.ry.so.c.ct1@gmail.com"">ma.ry.so.c.ct1@gmail.com</a>
<a href=""mailto:ma.rys.o.cct.1@gmail.com"">ma.rys.o.cct.1@gmail.com</a>
<a href=""mailto:mar.ys.occ.t.1@gmail.com"">mar.ys.occ.t.1@gmail.com</a>
<a href=""mailto:m.ary.s.occ.t.1@gmail.com"">m.ary.s.occ.t.1@gmail.com</a>
<a href=""mailto:mar.y.s.oc.ct.1@gmail.com"">mar.y.s.oc.ct.1@gmail.com</a>
<a href=""mailto:m.a.r.ys.occ.t.1@gmail.com"">m.a.r.ys.occ.t.1@gmail.com</a>
<a href=""mailto:m.ar.ys.o.cct.1@gmail.com"">m.ar.ys.o.cct.1@gmail.com</a>
<a href=""mailto:m.ar.ys.o.cc.t1@gmail.com"">m.ar.ys.o.cc.t1@gmail.com</a>
<a href=""mailto:ma.r.y.so.c.c.t1@gmail.com"">ma.r.y.so.c.c.t1@gmail.com</a>
<a href=""mailto:ma.ryso.cct.1@gmail.com"">ma.ryso.cct.1@gmail.com</a>
<a href=""mailto:m.aryso.c.c.t1@gmail.com"">m.aryso.c.c.t1@gmail.com</a>
<a href=""mailto:ma.ryso.c.c.t.1@gmail.com"">ma.ryso.c.c.t.1@gmail.com</a>
<a href=""mailto:m.ary.socct1@gmail.com"">m.ary.socct1@gmail.com</a>
<a href=""mailto:m.a.r.yso.c.c.t1@gmail.com"">m.a.r.yso.c.c.t1@gmail.com</a>
<a href=""mailto:mar.ys.o.cc.t1@gmail.com"">mar.ys.o.cc.t1@gmail.com</a>
<a href=""mailto:m.ar.ys.o.cct1@gmail.com"">m.ar.ys.o.cct1@gmail.com</a>
<a href=""mailto:ma.rysocc.t.1@gmail.com"">ma.rysocc.t.1@gmail.com</a>
<a href=""mailto:m.a.r.y.s.oc.ct.1@gmail.com"">m.a.r.y.s.oc.ct.1@gmail.com</a>
<a href=""mailto:m.a.r.ysocc.t.1@gmail.com"">m.a.r.ysocc.t.1@gmail.com</a>
<a href=""mailto:m.ary.so.cc.t.1@gmail.com"">m.ary.so.cc.t.1@gmail.com</a>
<a href=""mailto:ma.r.y.s.o.cct.1@gmail.com"">ma.r.y.s.o.cct.1@gmail.com</a>
<a href=""mailto:m.arysoc.c.t1@gmail.com"">m.arysoc.c.t1@gmail.com</a>
<a href=""mailto:ma.r.ys.occt1@gmail.com"">ma.r.ys.occt1@gmail.com</a>
<a href=""mailto:ma.ry.s.occ.t1@gmail.com"">ma.ry.s.occ.t1@gmail.com</a>
<a href=""mailto:m.ar.y.socct1@gmail.com"">m.ar.y.socct1@gmail.com</a>
<a href=""mailto:m.a.ry.so.cct.1@gmail.com"">m.a.ry.so.cct.1@gmail.com</a>
<a href=""mailto:m.a.ry.so.cc.t.1@gmail.com"">m.a.ry.so.cc.t.1@gmail.com</a>
<a href=""mailto:mar.ysoc.ct1@gmail.com"">mar.ysoc.ct1@gmail.com</a>
<a href=""mailto:ma.rys.o.c.c.t1@gmail.com"">ma.rys.o.c.c.t1@gmail.com</a>
<a href=""mailto:m.ar.y.s.occt1@gmail.com"">m.ar.y.s.occt1@gmail.com</a>
<a href=""mailto:m.aryso.c.c.t.1@gmail.com"">m.aryso.c.c.t.1@gmail.com</a>
<a href=""mailto:m.a.r.yso.c.ct.1@gmail.com"">m.a.r.yso.c.ct.1@gmail.com</a>
<a href=""mailto:mar.yso.cct1@gmail.com"">mar.yso.cct1@gmail.com</a>
<a href=""mailto:ma.ry.so.c.c.t.1@gmail.com"">ma.ry.so.c.c.t.1@gmail.com</a>
<a href=""mailto:ma.rys.o.c.ct1@gmail.com"">ma.rys.o.c.ct1@gmail.com</a>
<a href=""mailto:maryso.cct.1@gmail.com"">maryso.cct.1@gmail.com</a>
<a href=""mailto:ma.r.ys.occt.1@gmail.com"">ma.r.ys.occt.1@gmail.com</a>
<a href=""mailto:ma.ry.so.c.ct.1@gmail.com"">ma.ry.so.c.ct.1@gmail.com</a>
<a href=""mailto:m.a.r.y.s.o.cc.t.1@gmail.com"">m.a.r.y.s.o.cc.t.1@gmail.com</a>
<a href=""mailto:mary.so.c.ct.1@gmail.com"">mary.so.c.ct.1@gmail.com</a>
<a href=""mailto:ma.r.ys.o.cct1@gmail.com"">ma.r.ys.o.cct1@gmail.com</a>
<a href=""mailto:ma.r.ys.oc.c.t1@gmail.com"">ma.r.ys.oc.c.t1@gmail.com</a>
<a href=""mailto:mar.y.s.oc.c.t.1@gmail.com"">mar.y.s.oc.c.t.1@gmail.com</a>
<a href=""mailto:ma.rysocct.1@gmail.com"">ma.rysocct.1@gmail.com</a>
<a href=""mailto:ma.ry.so.cc.t1@gmail.com"">ma.ry.so.cc.t1@gmail.com</a>
<a href=""mailto:m.a.ry.s.o.c.c.t.1@gmail.com"">m.a.ry.s.o.c.c.t.1@gmail.com</a>
<a href=""mailto:marys.o.c.ct.1@gmail.com"">marys.o.c.ct.1@gmail.com</a>
<a href=""mailto:mar.ysocc.t.1@gmail.com"">mar.ysocc.t.1@gmail.com</a>
<a href=""mailto:m.a.r.y.soc.ct.1@gmail.com"">m.a.r.y.soc.ct.1@gmail.com</a>
<a href=""mailto:m.a.r.y.so.cct.1@gmail.com"">m.a.r.y.so.cct.1@gmail.com</a>
<a href=""mailto:mar.ysoc.ct.1@gmail.com"">mar.ysoc.ct.1@gmail.com</a>
<a href=""mailto:m.arysocct1@gmail.com"">m.arysocct1@gmail.com</a>
<a href=""mailto:maryso.c.c.t.1@gmail.com"">maryso.c.c.t.1@gmail.com</a>
<a href=""mailto:ma.rys.o.cct1@gmail.com"">ma.rys.o.cct1@gmail.com</a>
<a href=""mailto:ma.rys.oc.c.t.1@gmail.com"">ma.rys.oc.c.t.1@gmail.com</a>
<a href=""mailto:ma.ry.socc.t.1@gmail.com"">ma.ry.socc.t.1@gmail.com</a>
<a href=""mailto:m.ar.ys.occ.t1@gmail.com"">m.ar.ys.occ.t1@gmail.com</a>
<a href=""mailto:ma.r.y.so.c.ct1@gmail.com"">ma.r.y.so.c.ct1@gmail.com</a>
<a href=""mailto:m.a.r.ys.o.c.c.t1@gmail.com"">m.a.r.ys.o.c.c.t1@gmail.com</a>
<a href=""mailto:ma.r.ys.o.c.c.t.1@gmail.com"">ma.r.ys.o.c.c.t.1@gmail.com</a>
<a href=""mailto:mar.y.s.o.c.ct1@gmail.com"">mar.y.s.o.c.ct1@gmail.com</a>
<a href=""mailto:m.ar.y.so.cct1@gmail.com"">m.ar.y.so.cct1@gmail.com</a>
<a href=""mailto:mary.so.c.ct1@gmail.com"">mary.so.c.ct1@gmail.com</a>
<a href=""mailto:ma.r.ysoc.ct1@gmail.com"">ma.r.ysoc.ct1@gmail.com</a>
<a href=""mailto:marys.o.cct.1@gmail.com"">marys.o.cct.1@gmail.com</a>
<a href=""mailto:m.a.r.ys.o.c.ct1@gmail.com"">m.a.r.ys.o.c.ct1@gmail.com</a>
<a href=""mailto:m.ar.ys.o.c.c.t.1@gmail.com"">m.ar.ys.o.c.c.t.1@gmail.com</a>
<a href=""mailto:mar.yso.c.ct1@gmail.com"">mar.yso.c.ct1@gmail.com</a>
<a href=""mailto:m.arysocc.t.1@gmail.com"">m.arysocc.t.1@gmail.com</a>
<a href=""mailto:mary.socct.1@gmail.com"">mary.socct.1@gmail.com</a>
<a href=""mailto:m.ar.yso.c.ct1@gmail.com"">m.ar.yso.c.ct1@gmail.com</a>
<a href=""mailto:m.a.rysoc.ct.1@gmail.com"">m.a.rysoc.ct.1@gmail.com</a>
<a href=""mailto:ma.r.ys.o.c.ct1@gmail.com"">ma.r.ys.o.c.ct1@gmail.com</a>
<a href=""mailto:ma.ry.so.cc.t.1@gmail.com"">ma.ry.so.cc.t.1@gmail.com</a>
<a href=""mailto:mar.y.so.cct1@gmail.com"">mar.y.so.cct1@gmail.com</a>
<a href=""mailto:m.a.r.y.s.occt1@gmail.com"">m.a.r.y.s.occt1@gmail.com</a>
<a href=""mailto:ma.r.y.s.o.c.c.t.1@gmail.com"">ma.r.y.s.o.c.c.t.1@gmail.com</a>
<a href=""mailto:m.ar.ys.oc.ct.1@gmail.com"">m.ar.ys.oc.ct.1@gmail.com</a>
<a href=""mailto:m.ar.ys.oc.ct1@gmail.com"">m.ar.ys.oc.ct1@gmail.com</a>
<a href=""mailto:m.ary.socc.t1@gmail.com"">m.ary.socc.t1@gmail.com</a>
<a href=""mailto:m.a.r.y.s.oc.ct1@gmail.com"">m.a.r.y.s.oc.ct1@gmail.com</a>
<a href=""mailto:ma.r.y.socct1@gmail.com"">ma.r.y.socct1@gmail.com</a>
<a href=""mailto:ma.r.ysocc.t1@gmail.com"">ma.r.ysocc.t1@gmail.com</a>
<a href=""mailto:mar.y.s.occt.1@gmail.com"">mar.y.s.occt.1@gmail.com</a>
<a href=""mailto:ma.ry.soc.ct1@gmail.com"">ma.ry.soc.ct1@gmail.com</a>
<a href=""mailto:marysocc.t.1@gmail.com"">marysocc.t.1@gmail.com</a>
<a href=""mailto:m.ar.yso.c.c.t.1@gmail.com"">m.ar.yso.c.c.t.1@gmail.com</a>
<a href=""mailto:m.ar.ys.occt.1@gmail.com"">m.ar.ys.occt.1@gmail.com</a>
<a href=""mailto:ma.ryso.c.ct.1@gmail.com"">ma.ryso.c.ct.1@gmail.com</a>
<a href=""mailto:m.a.rysoc.c.t.1@gmail.com"">m.a.rysoc.c.t.1@gmail.com</a>
<a href=""mailto:m.ar.ys.o.cc.t.1@gmail.com"">m.ar.ys.o.cc.t.1@gmail.com</a>
<a href=""mailto:m.a.r.y.s.o.c.ct1@gmail.com"">m.a.r.y.s.o.c.ct1@gmail.com</a>
<a href=""mailto:marysocct.1@gmail.com"">marysocct.1@gmail.com</a>
<a href=""mailto:m.ary.s.oc.c.t1@gmail.com"">m.ary.s.oc.c.t1@gmail.com</a>
<a href=""mailto:m.ar.ysocc.t.1@gmail.com"">m.ar.ysocc.t.1@gmail.com</a>
<a href=""mailto:m.ary.soc.c.t1@gmail.com"">m.ary.soc.c.t1@gmail.com</a>
<a href=""mailto:m.a.ry.s.o.cct1@gmail.com"">m.a.ry.s.o.cct1@gmail.com</a>
<a href=""mailto:ma.r.ys.oc.ct.1@gmail.com"">ma.r.ys.oc.ct.1@gmail.com</a>
<a href=""mailto:m.arys.oc.c.t1@gmail.com"">m.arys.oc.c.t1@gmail.com</a>
<a href=""mailto:ma.rys.occ.t.1@gmail.com"">ma.rys.occ.t.1@gmail.com</a>
<a href=""mailto:marys.o.c.c.t.1@gmail.com"">marys.o.c.c.t.1@gmail.com</a>
<a href=""mailto:ma.rys.occt.1@gmail.com"">ma.rys.occt.1@gmail.com</a>
<a href=""mailto:m.ar.yso.c.c.t1@gmail.com"">m.ar.yso.c.c.t1@gmail.com</a>
<a href=""mailto:mar.ys.o.c.c.t1@gmail.com"">mar.ys.o.c.c.t1@gmail.com</a>
<a href=""mailto:mar.y.so.c.c.t1@gmail.com"">mar.y.so.c.c.t1@gmail.com</a>
<a href=""mailto:ma.ry.s.oc.c.t.1@gmail.com"">ma.ry.s.oc.c.t.1@gmail.com</a>
<a href=""mailto:ma.ryso.c.c.t1@gmail.com"">ma.ryso.c.c.t1@gmail.com</a>
<a href=""mailto:m.ar.ysoc.c.t1@gmail.com"">m.ar.ysoc.c.t1@gmail.com</a>
<a href=""mailto:m.a.rys.o.c.c.t.1@gmail.com"">m.a.rys.o.c.c.t.1@gmail.com</a>
<a href=""mailto:mary.so.cct1@gmail.com"">mary.so.cct1@gmail.com</a>
<a href=""mailto:m.a.ry.socc.t1@gmail.com"">m.a.ry.socc.t1@gmail.com</a>
<a href=""mailto:m.a.rys.oc.ct1@gmail.com"">m.a.rys.oc.ct1@gmail.com</a>
<a href=""mailto:ma.r.y.soc.ct1@gmail.com"">ma.r.y.soc.ct1@gmail.com</a>
<a href=""mailto:m.a.rysocc.t.1@gmail.com"">m.a.rysocc.t.1@gmail.com</a>
<a href=""mailto:mary.s.oc.c.t.1@gmail.com"">mary.s.oc.c.t.1@gmail.com</a>
<a href=""mailto:m.a.ry.soc.ct.1@gmail.com"">m.a.ry.soc.ct.1@gmail.com</a>
<a href=""mailto:m.a.r.ysocct.1@gmail.com"">m.a.r.ysocct.1@gmail.com</a>
<a href=""mailto:marys.oc.ct1@gmail.com"">marys.oc.ct1@gmail.com</a>
<a href=""mailto:m.a.rys.oc.c.t.1@gmail.com"">m.a.rys.oc.c.t.1@gmail.com</a>
<a href=""mailto:m.aryso.cc.t1@gmail.com"">m.aryso.cc.t1@gmail.com</a>
<a href=""mailto:m.a.rys.occt1@gmail.com"">m.a.rys.occt1@gmail.com</a>
<a href=""mailto:m.ary.s.occt1@gmail.com"">m.ary.s.occt1@gmail.com</a>
<a href=""mailto:ma.r.y.s.o.cc.t1@gmail.com"">ma.r.y.s.o.cc.t1@gmail.com</a>
<a href=""mailto:m.a.r.y.socc.t1@gmail.com"">m.a.r.y.socc.t1@gmail.com</a>"
eVS38sdn,Dump MySQL Databases,metalx1000,Bash,Sunday 4th of February 2024 01:30:21 PM CDT,"# BACKUP and RESTORE MySQL Databases

# All Databases and Tables
sudo mysqldump --all-databases

# Select Database to backup
sudo mysqldump office
sudo mysqldump office > office.sql

"
Qag3PYBJ,СПРИНТ № 5 | Алгоритмы поиска | Урок 2: Поиск в неотсортированном векторе,chevengur,C++,Sunday 4th of February 2024 01:23:11 PM CDT,"#include <iostream>
#include <algorithm>

using namespace std;

void PrintSpacesPositions(string& str) {
    for(auto i = find(str.begin(), str.end(), ' '); // поиск первого пробела {от начала до первого сопадения}
        i != str.end();                             // ищем пока не дойдём до конца строки
        i = find(next(i), str.end(), ' '))          // переходим на следующий пробел, если это не конец строки.
    {
        cout << distance(str.begin(), i) << endl;   // выводим диапазон от начала до пробела.
    }

}
int main() {
    string str = ""He said: one and one and one is three""s;
    PrintSpacesPositions(str);
    return 0;
}
"
DTMQZUfr,Borg-Backup-Fehler,heisenberg80,Bash,Sunday 4th of February 2024 01:00:24 PM CDT,"/home/caro/.config/borg/borg_backup.sh: line 4: export: `4': not a valid identifier
/home/caro/.config/borg/borg_backup.sh: line 4: export: `18:29:28': not a valid identifier
/home/caro/.config/borg/borg_backup.sh: line 4: export: `2024': not a valid identifier
Syncing backup files ...
usage: borg create [-h] [--critical] [--error] [--warning] [--info] [--debug]
                   [--debug-topic TOPIC] [-p] [--iec] [--log-json]
                   [--lock-wait SECONDS] [--bypass-lock] [--show-version]
                   [--show-rc] [--umask M] [--remote-path PATH]
                   [--remote-ratelimit RATE] [--upload-ratelimit RATE]
                   [--remote-buffer UPLOAD_BUFFER]
                   [--upload-buffer UPLOAD_BUFFER] [--consider-part-files]
                   [--debug-profile FILE] [--rsh RSH] [-n] [-s] [--list]
                   [--filter STATUSCHARS] [--json] [--no-cache-sync]
                   [--stdin-name NAME] [--stdin-user USER]
                   [--stdin-group GROUP] [--stdin-mode M]
                   [--content-from-command] [--paths-from-stdin]
                   [--paths-from-command] [--paths-delimiter DELIM]
                   [-e PATTERN] [--exclude-from EXCLUDEFILE]
                   [--pattern PATTERN] [--patterns-from PATTERNFILE]
                   [--exclude-caches] [--exclude-if-present NAME]
                   [--keep-exclude-tags] [--exclude-nodump] [-x]
                   [--numeric-owner] [--numeric-ids] [--noatime] [--atime]
                   [--noctime] [--nobirthtime] [--nobsdflags] [--noflags]
                   [--noacls] [--noxattrs] [--sparse] [--files-cache MODE]
                   [--read-special] [--comment COMMENT]
                   [--timestamp TIMESTAMP] [-c SECONDS]
                   [--chunker-params PARAMS] [-C COMPRESSION]
                   ARCHIVE [PATH ...]
borg create: error: the following arguments are required: ARCHIVE, PATH
/home/caro/.config/borg/borg_backup.sh: line 10: ::{now:%Y-%m-%d_%H:%M}: command not found
/home/caro/.config/borg/borg_backup.sh: line 12: /etc: Is a directory
/home/caro/.config/borg/borg_backup.sh: line 14: /root: Is a directory
/home/caro/.config/borg/borg_backup.sh: line 16: /var/www: No such file or directory
/home/caro/.config/borg/borg_backup.sh: line 17: /home: Is a directory
Deleting outdated files > 6 months
Remote: Host key verification failed.
Connection closed by remote host. Is borg working on the server?
######Finished backup on Sun Feb  4 18:29:30 CET 2024 ######"
iYQnNUx8,Basic MySQL Examples,metalx1000,MySQL,Sunday 4th of February 2024 12:49:11 PM CDT,"sudo apt install mysql-server

sudo mysql

#Create DataBase and 
SHOW DATABASES;
CREATE DATABASE office;
SHOW DATABASES;
USE office;
CREATE TABLE employees ( id INT NOT NULL AUTO_INCREMENT , fname char(255) NOT NULL, lname char(255) NOT NULL, address char(255) NOT NULL, age int(100), phone char(20), PRIMARY KEY (id));
DESCRIBE employees;

# Enter Data
INSERT INTO employees VALUES(null,'John','Smith','123 Pine St',35,'555-555-5555');
SELECT * FROM employees;
INSERT INTO employees VALUES(null,'Jake','Simpson','123 Oak Lane',26,'555-555-5551');
INSERT INTO employees VALUES(null,'John','Peterson','564 1st Ave',45,'555-555-5531');
INSERT INTO employees VALUES(null,'Sally','Smith','123 Oak Lane',29,'555-555-5871');
INSERT INTO employees VALUES(null,'Jake','Ericsson','543 Oak Lane',29,NULL);
INSERT INTO employees VALUES(null,'Jim','Johnson','423 Pine Lane',38,'555-555-5341');
INSERT INTO employees VALUES(null,'Tom','Ericsson','543 Oak Lane',29,'555-555-2351');

# Search Data
SELECT * FROM employees;
SELECT * FROM employees WHERE lname = 'Smith';
SELECT * FROM employees WHERE address LIKE '%Oak%';
SELECT * FROM employees WHERE age > 30;
SELECT * FROM employees WHERE age < 30 ORDER BY age;
SELECT * FROM employees WHERE age < 30 ORDER BY age DESC;
SELECT * FROM employees WHERE age < 30 ORDER BY age LIMIT 2;
SELECT * FROM employees WHERE age < 30 ORDER BY age DESC LIMIT 2;

SELECT fname FROM employees WHERE lname = 'Smith';
SELECT fname,lname FROM employees WHERE address LIKE '%Oak%';

#update entry
SELECT * FROM employees WHERE phone is NULL;
UPDATE employees SET phone=""555-555-3333"" WHERE id=5;
SELECT * FROM employees;

# Delete Entry
DELETE FROM employees WHERE id = '2';
SELECT * FROM employees;

# Delete Table
DROP TABLE employees;
SELECT * FROM employees;

# Delete DATABASE
DROP DATABASE office;
SHOW DATABASES;

# EXIT
quit"
MpxRxftu,all like photos habbo,Fabriciool,JavaScript,Sunday 4th of February 2024 12:31:15 PM CDT,"// Seleciona todos os elementos <span> com translate=""LIKE""
var likeSpans = document.querySelectorAll('span[translate=""LIKE""]');

// Itera sobre os elementos selecionados
likeSpans.forEach(function(likeSpan) {
    // Simula um clique no elemento
    likeSpan.click();
});"
iNe4z8XD,123,chemelli74,Python,Sunday 4th of February 2024 12:22:40 PM CDT,"""""""Support for Comelit SimpleHome.""""""
import asyncio
import functools
from abc import abstractmethod
from dataclasses import dataclass
from datetime import datetime
from http.cookies import SimpleCookie
from typing import Any

import aiohttp
import pint
from yarl import URL

from .const import (
    _LOGGER,
    ALARM_AREA_STATUS,
    ALARM_AREAS,
    ALARM_ZONE_STATUS,
    ALARM_ZONES,
    BRIDGE,
    CLIMATE,
    COVER,
    IRRIGATION,
    LIGHT,
    OTHER,
    SCENARIO,
    SLEEP_BETWEEN_BRIDGE_CALLS,
    SLEEP_BETWEEN_VEDO_CALLS,
    STATE_COVER,
    STATE_ON,
    VEDO,
    WATT,
    AlarmAreaState,
    AlarmZoneState,
)
from .exceptions import CannotAuthenticate, CannotConnect, CannotRetrieveData


@dataclass
class ComelitSerialBridgeObject:
    """"""Comelit SimpleHome Serial bridge class.""""""

    index: int
    name: str
    status: int
    human_status: str
    type: str
    val: int | dict[Any, Any]  # Temperature or Humidity (CLIMATE)
    protected: int
    zone: str
    power: float
    power_unit: str = WATT


@dataclass
class ComelitVedoAreaObject:
    """"""Comelit SimpleHome VEDO area class.""""""

    index: int
    name: str
    p1: bool
    p2: bool
    ready: bool
    armed: bool
    alarm: bool
    alarm_memory: bool
    sabotage: bool
    anomaly: bool
    in_time: bool
    out_time: bool
    human_status: AlarmAreaState


@dataclass
class ComelitVedoZoneObject:
    """"""Comelit SimpleHome VEDO zone class.""""""

    index: int
    name: str
    status_api: str
    status: int
    human_status: AlarmZoneState


class ComelitCommonApi:
    """"""Common API calls for Comelit SimpleHome devices.""""""

    def __init__(self, host: str, port: int, pin: int) -> None:
        """"""Initialize the session.""""""
        self.host = f""{host}:{port}""
        self.device_pin = pin
        self.base_url = f""http://{host}:{port}""
        self._headers = {
            ""User-Agent"": ""Mozilla/5.0 (X11; Fedora; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0"",
            ""Accept-Language"": ""en-GB,en;q=0.5"",
            ""X-Requested-With"": ""XMLHttpRequest"",
            ""Connection"": ""keep-alive"",
        }
        self._session: aiohttp.ClientSession

    async def _get_page_result(
        self, page: str, reply_json: bool = True
    ) -> tuple[int, dict[str, Any]]:
        """"""Return status and data from a GET query.""""""
        _LOGGER.debug(""GET page %s [%s]"", page, self.host)
        timestamp = datetime.now().strftime(""%Y-%m-%d %H:%M:%S"")
        url = f""{self.base_url}{page}&_={timestamp}""
        try:
            response = await self._session.get(
                url,
                headers=self._headers,
                timeout=10,
            )
        except (asyncio.TimeoutError, aiohttp.ClientConnectorError) as exc:
            raise CannotConnect(""Connection error during GET"") from exc

        _LOGGER.debug(""GET response %s [%s]"", await response.text(), self.host)

        if response.status != 200:
            raise CannotRetrieveData(f""GET response status {response.status}"")

        if not reply_json:
            _LOGGER.debug(""GET response is empty [%s]"", self.host)
            return response.status, {}

        return response.status, await response.json()

    async def _post_page_result(
        self, page: str, payload: dict[str, Any]
    ) -> SimpleCookie:
        """"""Return status and data from a POST query.""""""
        _LOGGER.debug(""POST page %s [%s]"", page, self.host)
        url = f""{self.base_url}{page}""
        try:
            response = await self._session.post(
                url,
                data=payload,
                headers=self._headers,
                timeout=10,
            )
        except (asyncio.TimeoutError, aiohttp.ClientConnectorError) as exc:
            raise CannotConnect(""Connection error during POST"") from exc

        _LOGGER.debug(""POST response %s [%s]"", await response.text(), self.host)

        if response.status != 200:
            raise CannotRetrieveData(f""POST response status {response.status}"")

        return response.cookies

    async def _is_session_active(self) -> bool:
        """"""Check if aiohttp session is still active.""""""
        if not hasattr(self, ""_session"") or self._session.closed:
            return False

        return True

    async def _check_logged_in(self, host_type: str) -> bool:
        """"""Check if login is active.""""""

        reply_status, reply_json = await self._get_page_result(""/login.json"")

        _LOGGER.debug(""%s login reply: %s"", host_type, reply_json)
        if host_type == BRIDGE:
            logged = reply_json[""domus""] != ""000000000000""
        else:
            logged = reply_json[""logged""] == 1

        return logged

    async def _sleep_between_call(self, seconds: float) -> None:
        """"""Sleep between one call and the next one.""""""
        _LOGGER.debug(""Sleeping for %s seconds before next call"", seconds)
        await asyncio.sleep(seconds)

    @abstractmethod
    async def login(self) -> bool:
        """"""Login to Comelit device.""""""

    async def _login(self, payload: dict[str, Any], host_type: str) -> bool:
        """"""Login into Comelit device.""""""
        _LOGGER.debug(""Logging into host %s [%s]"", self.host, host_type)

        if not await self._is_session_active():
            _LOGGER.debug(""Creating HTTP ClientSession"")
            jar = aiohttp.CookieJar(unsafe=True)
            connector = aiohttp.TCPConnector(force_close=True)
            self._session = aiohttp.ClientSession(cookie_jar=jar, connector=connector)

        if await self._check_logged_in(host_type):
            return True

        cookies = await self._post_page_result(""/login.cgi"", payload)
        _LOGGER.debug(""Cookies for host %s: %s"", self.host, cookies)

        if not cookies:
            _LOGGER.warning(
                ""Authentication failed for host %s [%s]: no cookies received"",
                self.host,
                host_type,
            )
            raise CannotAuthenticate

        self._session.cookie_jar.update_cookies(cookies, URL(self.base_url))

        return await self._check_logged_in(host_type)

    async def logout(self) -> None:
        """"""Comelit Simple Home logout.""""""
        if await self._is_session_active():
            payload = {""logout"": 1}
            await self._post_page_result(""/login.cgi"", payload)
            self._session.cookie_jar.clear()

    async def close(self) -> None:
        """"""Comelit Simple Home close session.""""""
        if await self._is_session_active():
            await self._session.close()


class ComeliteSerialBridgeApi(ComelitCommonApi):
    """"""Queries Comelit SimpleHome Serial bridge.""""""

    def __init__(self, host: str, port: int, bridge_pin: int) -> None:
        """"""Initialize the session.""""""
        super().__init__(host, port, bridge_pin)
        self._devices: dict[str, dict[int, ComelitSerialBridgeObject]] = {}
        self._last_clima_command: datetime | None = None

    async def _translate_device_status(self, dev_type: str, dev_status: int) -> str:
        """"""Makes status human readable.""""""

        if dev_type == COVER:
            return STATE_COVER[dev_status]

        return ""on"" if dev_status == STATE_ON else ""off""

    async def set_clima_status(self, index: int, action: str, temp: float = 0) -> bool:
        """"""Set clima status.

        action:
            auto, man, on, off, set

        """"""
        if self._last_clima_command:
            time_elapsed = round(
                (datetime.now() - self._last_clima_command).total_seconds(), 2
            )
            if sleep_seconds := (SLEEP_BETWEEN_BRIDGE_CALLS - time_elapsed) > 0:
                _LOGGER.debug(
                    ""Climate calls needs to be queued (%ss) for proper execution"",
                    sleep_seconds,
                )
                await self._sleep_between_call(sleep_seconds)

        reply_status = await self._get_page_result(
            f""/user/action.cgi?clima={index}&thermo={action}&val={int(temp*10)}"", False
        )
        self._last_clima_command = datetime.now()

        return reply_status == 200

    async def set_device_status(
        self, device_type: str, index: int, action: int
    ) -> bool:
        """"""Set device action.

        action:
            0 = off/close
            1 = on/open

        """"""
        reply_status = await self._get_page_result(
            f""/user/action.cgi?type={device_type}&num{action}={index}"", False
        )
        return reply_status == 200

    async def get_device_status(self, device_type: str, index: int) -> int:
        """"""Get device status.""""""
        reply_status, reply_json = await self._get_page_result(
            f""/user/icon_status.json?type={device_type}""
        )
        _LOGGER.debug(
            ""Device %s[%s] status: %s"", device_type, index, reply_json[""status""][index]
        )
        return reply_json[""status""][index]

    async def login(self) -> bool:
        """"""Login to Serial Bridge device.""""""
        payload = {""dom"": self.device_pin}
        return await self._login(payload, BRIDGE)

    async def get_all_devices(self) -> dict[str, dict[int, ComelitSerialBridgeObject]]:
        """"""Get all connected devices.""""""

        _LOGGER.debug(""Getting all devices for host %s"", self.host)

        loop = asyncio.get_running_loop()
        ureg = await loop.run_in_executor(
            None, functools.partial(pint.UnitRegistry, cache_folder="":auto:"")
        )
        ureg.default_format = ""~""

        for dev_type in (CLIMATE, COVER, LIGHT, IRRIGATION, OTHER, SCENARIO):
            reply_status, reply_json = await self._get_page_result(
                f""/user/icon_desc.json?type={dev_type}""
            )
            _LOGGER.debug(
                ""List of devices of type %s: %s"",
                dev_type,
                reply_json,
            )
            reply_counter_json: dict[str, Any] = {}
            if dev_type == OTHER and reply_json[""num""] > 0:
                reply_status, reply_counter_json = await self._get_page_result(
                    ""/user/counter.json""
                )
            devices = {}
            for i in range(reply_json[""num""]):
                # Guard against ""scenario"", that has 32 devices even if none is configured
                if reply_json[""desc""][i] == """":
                    continue
                status = reply_json[""status""][i]
                power = 0.0
                if instant_values := reply_counter_json.get(""instant""):
                    instant = ureg(instant_values[i])
                    if not instant.dimensionless:
                        power = ureg.convert(
                            instant.magnitude, str(instant.units), WATT
                        )
                dev_info = ComelitSerialBridgeObject(
                    index=i,
                    name=reply_json[""desc""][i],
                    status=status,
                    human_status=await self._translate_device_status(dev_type, status),
                    type=dev_type,
                    val=reply_json[""val""][i],
                    protected=reply_json[""protected""][i],
                    zone=reply_json[""env_desc""][reply_json[""env""][i]]
                    if not dev_type == SCENARIO
                    else """",
                    power=power,
                )
                devices.update({i: dev_info})
            self._devices.update({dev_type: devices})

        return self._devices


class ComelitVedoApi(ComelitCommonApi):
    """"""Queries Comelit SimpleHome VEDO alarm.""""""

    _json_data: list[dict[Any, Any]] = [{}, {}, {}, {}, {}]

    async def _translate_zone_status(
        self, zone: ComelitVedoZoneObject
    ) -> AlarmZoneState:
        """"""Translate ZONE status.""""""

        for status in ALARM_ZONE_STATUS:
            if zone.status & status != 0:
                return ALARM_ZONE_STATUS[status]

        return AlarmZoneState.REST

    async def _translate_area_status(
        self, area: ComelitVedoAreaObject
    ) -> AlarmAreaState:
        """"""Translate AREA status.""""""

        for field in ALARM_AREA_STATUS:
            if getattr(area, field):
                return ALARM_AREA_STATUS[field]

        return AlarmAreaState.DISARMED

    async def _create_area_object(
        self, json_area_desc: dict[str, Any], json_area_stat: dict[str, Any], index: int
    ) -> ComelitVedoAreaObject:
        """"""Get area status.""""""

        area = ComelitVedoAreaObject(
            index=index,
            name=json_area_desc[""description""][index],
            p1=json_area_desc[""p1_pres""][index],
            p2=json_area_desc[""p2_pres""][index],
            ready=json_area_stat[""ready""][index],
            armed=json_area_stat[""armed""][index],
            alarm=json_area_stat[""alarm""][index],
            alarm_memory=json_area_stat[""alarm_memory""][index],
            sabotage=json_area_stat[""sabotage""][index],
            anomaly=json_area_stat[""anomaly""][index],
            in_time=json_area_stat[""in_time""][index],
            out_time=json_area_stat[""out_time""][index],
            human_status=AlarmAreaState.UNKNOWN,
        )
        area.human_status = await self._translate_area_status(area)
        _LOGGER.debug(area)
        return area

    async def _create_zone_object(
        self, json_zone_desc: dict[str, Any], json_zone_stat: dict[str, Any], index: int
    ) -> ComelitVedoZoneObject:
        """"""Create zone object.""""""

        status_api = json_zone_stat[""status""].split("","")[index]

        zone = ComelitVedoZoneObject(
            index=index,
            name=json_zone_desc[""description""][index],
            status=int(status_api, 16),
            status_api=status_api,
            human_status=AlarmZoneState.UNKNOWN,
        )
        zone.human_status = await self._translate_zone_status(zone)
        _LOGGER.debug(zone)
        return zone

    async def _async_get_page_data(
        self, desc: str, page: str, present_check: str | int | None = None
    ) -> tuple[bool, dict[str, Any]]:
        """"""Return status and data from a specific GET query.""""""
        reply_status, reply_json = await self._get_page_result(page)
        _LOGGER.debug(""Alarm %s: %s"", desc, reply_json)
        present = present_check in reply_json[""present""] if ""_desc"" in page else True
        return (reply_json[""logged""] and present), reply_json

    async def set_zone_status(
        self, index: int, action: str, force: bool = False
    ) -> bool:
        """"""Set zone action.

        action:
            tot = enable
            dis = disable

        index:
            32 = all zones
             n = specific zone

        force:
            False = don't force action
            True  = force action

        """"""

        reply_status = await self._get_page_result(
            f""/action.cgi?vedo=1&{action}={index}&force={int(force)}"", False
        )
        return reply_status == 200

    async def login(self) -> bool:
        """"""Login to VEDO system.""""""
        payload = {""code"": self.device_pin}
        return await self._login(payload, VEDO)

    async def get_area_status(
        self, area: ComelitVedoAreaObject
    ) -> ComelitVedoAreaObject:
        """"""Get AREA status.""""""

        reply_status, reply_json_area_stat = await self._async_get_page_data(
            ""AREA statistics"", ""/user/area_stat.json""
        )
        description = {""description"": area.name, ""p1_pres"": area.p1, ""p2_pres"": area.p2}

        return await self._create_area_object(
            description, reply_json_area_stat, area.index
        )

    async def get_all_areas_and_zones(
        self,
    ) -> dict[str, dict[int, Any]]:
        """"""Get all VEDO system AREA and ZONE.""""""

        queries: dict[int, dict[str, Any]] = {
            1: {
                ""desc"": ""AREA description"",
                ""page"": ""/user/area_desc.json"",
                ""present"": 1,
            },
            2: {
                ""desc"": ""ZONE description"",
                ""page"": ""/user/zone_desc.json"",
                ""present"": ""1"",
            },
            3: {
                ""desc"": ""AREA statistics"",
                ""page"": ""/user/area_stat.json"",
                ""present"": None,
            },
            4: {
                ""desc"": ""ZONE statistics"",
                ""page"": ""/user/zone_stat.json"",
                ""present"": None,
            },
        }

        for index, info in queries.items():
            desc = info[""desc""]
            page = info[""page""]
            present = info[""present""]
            if ""_desc"" in page and self._json_data[index]:
                _LOGGER.debug(""Data for %s already retrieved, skipping"", desc)
                continue
            await self._sleep_between_call(SLEEP_BETWEEN_VEDO_CALLS)
            reply_status, reply_json = await self._async_get_page_data(
                desc, page, present
            )
            if not reply_status:
                _LOGGER.info(""Login expired accessing %s, re-login attempt"", desc)
                await self.login()
                await self._sleep_between_call(SLEEP_BETWEEN_VEDO_CALLS)
                reply_status, reply_json = await self._async_get_page_data(
                    desc, page, present
                )
                if not reply_status:
                    raise CannotRetrieveData(
                        ""Login expired and not working after a retry""
                    )
                _LOGGER.info(""Re-login successful"")
            self._json_data.insert(index, reply_json)

        list_areas: list[int] = self._json_data[1][""present""]
        areas = {}
        for i in range(len(list_areas)):
            if not list_areas[i]:
                _LOGGER.debug(""Alarm skipping non present AREA [%i]"", i)
                continue
            area = await self._create_area_object(
                self._json_data[1], self._json_data[3], i
            )
            areas.update({i: area})

        list_zones: list[int] = self._json_data[2][""present""]
        zones = {}
        for i in range(len(list_zones)):
            if not int(list_zones[i]):
                _LOGGER.debug(""Alarm skipping non present ZONE [%i]"", i)
                continue
            zone = await self._create_zone_object(
                self._json_data[2], self._json_data[4], i
            )
            zones.update({i: zone})

        return {ALARM_AREAS: areas, ALARM_ZONES: zones}
"
s8xjpH5k,autumn adventures,Grossos,JavaScript,Sunday 4th of February 2024 12:16:54 PM CDT,"window.addEventListener('load', solve);

function solve() {

    const input = {
        time: document.getElementById('time'),
        date: document.getElementById('date'),
        place: document.getElementById('place'),
        name: document.getElementById('event-name'),
        email: document.getElementById('email')
    };

    const secondField = document.querySelector('.content-second').children[0].children[1];
    const thirdField = document.querySelector('.content-first').children[1].children[1];
    const fourthField = document.querySelector('.content-second').children[1].children[1];

    document.getElementById('add-btn').addEventListener('click', addEvent);

    function addEvent() {

        if (input.time.value == '' || input.date.value == '' || input.place.value == '' || input.name.value == '', input.email.value == '') {
            return;
        }

        const li = create('li', '', 'event-content');
        secondField.appendChild(li);

        const article = create('article');
        li.appendChild(article);

        const values = [input.time.value, input.date.value, input.place.value, input.name.value, input.email.value];

        const begins = create('p', `Begins: ${input.date.value} at: ${input.time.value}`);
        const place = create('p', `In: ${input.place.value}`);
        const event = create('p', `Event: ${input.name.value}`);
        const contact = create('p', `Contact: ${input.email.value}`);
        article.appendChild(begins);
        article.appendChild(place);
        article.appendChild(event);
        article.appendChild(contact);

        document.getElementById('add-btn').disabled = true;
        Object.values(input).forEach(el => el.value = '');

        const editBtn = create('button', 'Edit', 'edit-btn');
        const continueBtn = create('button', 'Continue', 'continue-btn');
        const finishedBtn = create('button', 'Move to Finished', 'finished-btn');

        li.appendChild(editBtn);
        li.appendChild(continueBtn);
        editBtn.addEventListener('click', onEdit);
        continueBtn.addEventListener('click', onContinue);
        finishedBtn.addEventListener('click', onFinished);
        document.getElementById('clear').addEventListener('click', onClear);

        function onEdit() {
            document.getElementById('time').value = values[0];
            document.getElementById('date').value = values[1];
            document.getElementById('place').value = values[2];
            document.getElementById('event-name').value = values[3];
            document.getElementById('email').value = values[4];
            document.getElementById('add-btn').disabled = false;
            li.remove();

        }

        function onContinue() {
            thirdField.appendChild(li);
            editBtn.remove();
            continueBtn.remove();
            li.appendChild(finishedBtn);
        }

        function onFinished() {
            finishedBtn.remove();
            fourthField.appendChild(li);
            document.getElementById('add-btn').disabled = false;
        }

        function onClear(e) {
            li.remove();
        }
    }

    function create(type, content, className) {
        const element = document.createElement(type);
        element.textContent = content;
        if (className) {
            element.className = className;
        }
        return element;
    }
}




"
vywN6Djs,Borg-Backup,heisenberg80,Bash,Sunday 4th of February 2024 12:15:48 PM CDT,"#!/bin/bash
export BORG_REPO=""ssh://user@user.your-storagebox.de:23/./Backup-Raspberry/Paperless-Caro
export BORG_PASSPHRASE=phrase
echo ""###### Starting backup on $(date) ######""
echo ""Syncing backup files ...""

borg create -v --stats --progress --compress lz4 --one-file-system \

        ::'{now:%Y-%m-%d_%H:%M}'        \

        /etc                            \

        /root                           \

        /var/www                        \

        /home

echo ""Deleting outdated files > 6 months""
borg prune --progress --stats --keep-daily=7 --keep-weekly=4 --keep-monthly=6
echo ""######Finished backup on $(date) ######"""
khR3mBtb,Untitled,dllbridge,C,Sunday 4th of February 2024 12:12:56 PM CDT,"#include   <stdio.h>



int n = 7;




////////////////////////////////////////////////////
int main()                                        // 
{
	
	int i = 1;

	for(int i = 1; i < 10; i++)
	{
	   	printf(""%d * %d = %d\n"", n, i, n*i);
	}


    n = 8;

L_01:	
		
	printf(""%d * %d = %d\n"", n, i, n*i);	

   // i  = i + 1;
   // i += 1;
      i ++;

	if(i < 9) goto L_01;
	
}










/*



#include   <stdio.h>



int n = 100;




////////////////////////////////////////////////////
int main()                                        // 
{

    if(n <  100) printf(""n = %d < 100\n"", n);
    if(n >  100) printf(""n = %d > 100\n"", n);
    if(n == 100) printf(""n = %d ==100\n"", n);
}


*/














/*

#include   <stdio.h>





char sz[99] = ""SONY"";



////////////////////////////////////////////////////
int main()                                        // 
{


    int n = 71;

    printf(""Enter n:"");

    scanf(""%d"", &n);

    printf(""n = %d"", n);
    
}

*/


"
Kd5dNBED,01. Shopping List,Spocoman,C++,Sunday 4th of February 2024 12:11:23 PM CDT,"#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    int n;
    cin >> n;
    cin.ignore();

    double totalSum = 0;

    string product, price, count;

    vector<pair<string, double>> productPrices;

    for (size_t i = 0; i < n; i++) {
        getline(cin, product);
        getline(cin, price);
        getline(cin, count);

        productPrices.push_back(make_pair(product, stod(price) * stoi(count)));
        totalSum += productPrices.rbegin()->second;
    }

    sort(productPrices.begin(), productPrices.end(),
        [](const pair <string, double>& a, const pair <string, double>& b) {
            return a.second > b.second;
        });

    cout << ""The total sum is: "" << totalSum << "" lv.\n"";

    for (auto& p : productPrices) {
        cout << p.first << ' ' << p.second << endl;
    }

    return 0;
}"
0Hxh1Ss4,recheck before commit,chemelli74,Python,Sunday 4th of February 2024 12:10:13 PM CDT,"""""""Support for Comelit SimpleHome.""""""
import asyncio
import functools
from abc import abstractmethod
from dataclasses import dataclass
from datetime import datetime
from http.cookies import SimpleCookie
from typing import Any

import aiohttp
import pint
from yarl import URL

from .const import (
    _LOGGER,
    ALARM_AREA_STATUS,
    ALARM_AREAS,
    ALARM_ZONE_STATUS,
    ALARM_ZONES,
    BRIDGE,
    CLIMATE,
    COVER,
    IRRIGATION,
    LIGHT,
    OTHER,
    SCENARIO,
    SLEEP_BETWEEN_BRIDGE_CALLS,
    SLEEP_BETWEEN_VEDO_CALLS,
    STATE_COVER,
    STATE_ON,
    VEDO,
    WATT,
    AlarmAreaState,
    AlarmZoneState,
)
from .exceptions import CannotAuthenticate, CannotConnect, CannotRetrieveData


@dataclass
class ComelitSerialBridgeObject:
    """"""Comelit SimpleHome Serial bridge class.""""""

    index: int
    name: str
    status: int
    human_status: str
    type: str
    val: int | dict[Any, Any]  # Temperature or Humidity (CLIMATE)
    protected: int
    zone: str
    power: float
    power_unit: str = WATT


@dataclass
class ComelitVedoAreaObject:
    """"""Comelit SimpleHome VEDO area class.""""""

    index: int
    name: str
    p1: bool
    p2: bool
    ready: bool
    armed: bool
    alarm: bool
    alarm_memory: bool
    sabotage: bool
    anomaly: bool
    in_time: bool
    out_time: bool
    human_status: AlarmAreaState


@dataclass
class ComelitVedoZoneObject:
    """"""Comelit SimpleHome VEDO zone class.""""""

    index: int
    name: str
    status_api: str
    status: int
    human_status: AlarmZoneState


class ComelitCommonApi:
    """"""Common API calls for Comelit SimpleHome devices.""""""

    def __init__(self, host: str, port: int, pin: int) -> None:
        """"""Initialize the session.""""""
        self.host = f""{host}:{port}""
        self.device_pin = pin
        self.base_url = f""http://{host}:{port}""
        self._headers = {
            ""User-Agent"": ""Mozilla/5.0 (X11; Fedora; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0"",
            ""Accept-Language"": ""en-GB,en;q=0.5"",
            ""X-Requested-With"": ""XMLHttpRequest"",
            ""Connection"": ""keep-alive"",
        }
        self._session: aiohttp.ClientSession

    async def _get_page_result(
        self, page: str, reply_json: bool = True
    ) -> tuple[int, dict[str, Any]]:
        """"""Return status and data from a GET query.""""""
        _LOGGER.debug(""GET page %s [%s]"", page, self.host)
        timestamp = datetime.now().strftime(""%Y-%m-%d %H:%M:%S"")
        url = f""{self.base_url}{page}&_={timestamp}""
        try:
            response = await self._session.get(
                url,
                headers=self._headers,
                timeout=10,
            )
        except (asyncio.TimeoutError, aiohttp.ClientConnectorError) as exc:
            raise CannotConnect(""Connection error during GET"") from exc

        _LOGGER.debug(""GET response %s [%s]"", await response.text(), self.host)

        if response.status != 200:
            raise CannotRetrieveData(f""GET response status {response.status}"")

        if not reply_json:
            _LOGGER.debug(""GET response is empty [%s]"", self.host)
            return response.status, {}

        return response.status, await response.json()

    async def _post_page_result(
        self, page: str, payload: dict[str, Any]
    ) -> SimpleCookie:
        """"""Return status and data from a POST query.""""""
        _LOGGER.debug(""POST page %s [%s]"", page, self.host)
        url = f""{self.base_url}{page}""
        try:
            response = await self._session.post(
                url,
                data=payload,
                headers=self._headers,
                timeout=10,
            )
        except (asyncio.TimeoutError, aiohttp.ClientConnectorError) as exc:
            raise CannotConnect(""Connection error during POST"") from exc

        _LOGGER.debug(""POST response %s [%s]"", await response.text(), self.host)

        if response.status != 200:
            raise CannotRetrieveData(f""POST response status {response.status}"")

        return response.cookies

    async def _is_session_active(self) -> bool:
        """"""Check if aiohttp session is still active.""""""
        if not hasattr(self, ""_session"") or self._session.closed:
            return False

        return True

    async def _check_logged_in(self, host_type: str) -> bool:
        """"""Check if login is active.""""""

        reply_status, reply_json = await self._get_page_result(""/login.json"")

        _LOGGER.debug(""%s login reply: %s"", host_type, reply_json)
        if host_type == BRIDGE:
            logged = reply_json[""domus""] != ""000000000000""
        else:
            logged = reply_json[""logged""] == 1

        return logged

    async def _sleep_between_call(self, seconds: float) -> None:
        """"""Sleep between one call and the next one.""""""
        _LOGGER.debug(""Sleeping for %s seconds before next call"", seconds)
        await asyncio.sleep(seconds)

    @abstractmethod
    async def login(self) -> bool:
        """"""Login to Comelit device.""""""

    async def _login(self, payload: dict[str, Any], host_type: str) -> bool:
        """"""Login into Comelit device.""""""
        _LOGGER.debug(""Logging into host %s [%s]"", self.host, host_type)

        if not await self._is_session_active():
            _LOGGER.debug(""Creating HTTP ClientSession"")
            jar = aiohttp.CookieJar(unsafe=True)
            connector = aiohttp.TCPConnector(force_close=True)
            self._session = aiohttp.ClientSession(cookie_jar=jar, connector=connector)

        if await self._check_logged_in(host_type):
            return True

        cookies = await self._post_page_result(""/login.cgi"", payload)
        _LOGGER.debug(""Cookies for host %s: %s"", self.host, cookies)

        if not cookies:
            _LOGGER.warning(
                ""Authentication failed for host %s [%s]: no cookies received"",
                self.host,
                host_type,
            )
            raise CannotAuthenticate

        self._session.cookie_jar.update_cookies(cookies, URL(self.base_url))

        return await self._check_logged_in(host_type)

    async def logout(self) -> None:
        """"""Comelit Simple Home logout.""""""
        if await self._is_session_active():
            payload = {""logout"": 1}
            await self._post_page_result(""/login.cgi"", payload)
            self._session.cookie_jar.clear()

    async def close(self) -> None:
        """"""Comelit Simple Home close session.""""""
        if await self._is_session_active():
            await self._session.close()


class ComeliteSerialBridgeApi(ComelitCommonApi):
    """"""Queries Comelit SimpleHome Serial bridge.""""""

    def __init__(self, host: str, port: int, bridge_pin: int) -> None:
        """"""Initialize the session.""""""
        super().__init__(host, port, bridge_pin)
        self._devices: dict[str, dict[int, ComelitSerialBridgeObject]] = {}
        self._last_clima_command: datetime | None = None

    async def _translate_device_status(self, dev_type: str, dev_status: int) -> str:
        """"""Makes status human readable.""""""

        if dev_type == COVER:
            return STATE_COVER[dev_status]

        return ""on"" if dev_status == STATE_ON else ""off""

    async def set_clima_status(self, index: int, action: str, temp: float = 0) -> bool:
        """"""Set clima status.

        action:
            auto, man, on, off, set

        """"""

        if self._last_clima_command:
            last_call_elapsed = round(
                (datetime.now() - self._last_clima_command).total_seconds(), 2
            )
            if 0 < last_call_elapsed < SLEEP_BETWEEN_BRIDGE_CALLS:
                _LOGGER.debug(
                    ""Climate calls needs to be queued (%ss) for proper execution"",
                    last_call_elapsed,
                )
                await self._sleep_between_call(
                    SLEEP_BETWEEN_BRIDGE_CALLS - last_call_elapsed
                )

        reply_status = await self._get_page_result(
            f""/user/action.cgi?clima={index}&thermo={action}&val={int(temp*10)}"", False
        )
        self._last_clima_command = datetime.now()

        return reply_status == 200

    async def set_device_status(
        self, device_type: str, index: int, action: int
    ) -> bool:
        """"""Set device action.

        action:
            0 = off/close
            1 = on/open

        """"""
        reply_status = await self._get_page_result(
            f""/user/action.cgi?type={device_type}&num{action}={index}"", False
        )
        return reply_status == 200

    async def get_device_status(self, device_type: str, index: int) -> int:
        """"""Get device status.""""""
        reply_status, reply_json = await self._get_page_result(
            f""/user/icon_status.json?type={device_type}""
        )
        _LOGGER.debug(
            ""Device %s[%s] status: %s"", device_type, index, reply_json[""status""][index]
        )
        return reply_json[""status""][index]

    async def login(self) -> bool:
        """"""Login to Serial Bridge device.""""""
        payload = {""dom"": self.device_pin}
        return await self._login(payload, BRIDGE)

    async def get_all_devices(self) -> dict[str, dict[int, ComelitSerialBridgeObject]]:
        """"""Get all connected devices.""""""

        _LOGGER.debug(""Getting all devices for host %s"", self.host)

        loop = asyncio.get_running_loop()
        ureg = await loop.run_in_executor(
            None, functools.partial(pint.UnitRegistry, cache_folder="":auto:"")
        )
        ureg.default_format = ""~""

        for dev_type in (CLIMATE, COVER, LIGHT, IRRIGATION, OTHER, SCENARIO):
            reply_status, reply_json = await self._get_page_result(
                f""/user/icon_desc.json?type={dev_type}""
            )
            _LOGGER.debug(
                ""List of devices of type %s: %s"",
                dev_type,
                reply_json,
            )
            reply_counter_json: dict[str, Any] = {}
            if dev_type == OTHER and reply_json[""num""] > 0:
                reply_status, reply_counter_json = await self._get_page_result(
                    ""/user/counter.json""
                )
            devices = {}
            for i in range(reply_json[""num""]):
                # Guard against ""scenario"", that has 32 devices even if none is configured
                if reply_json[""desc""][i] == """":
                    continue
                status = reply_json[""status""][i]
                power = 0.0
                if instant_values := reply_counter_json.get(""instant""):
                    instant = ureg(instant_values[i])
                    if not instant.dimensionless:
                        power = ureg.convert(
                            instant.magnitude, str(instant.units), WATT
                        )
                dev_info = ComelitSerialBridgeObject(
                    index=i,
                    name=reply_json[""desc""][i],
                    status=status,
                    human_status=await self._translate_device_status(dev_type, status),
                    type=dev_type,
                    val=reply_json[""val""][i],
                    protected=reply_json[""protected""][i],
                    zone=reply_json[""env_desc""][reply_json[""env""][i]]
                    if not dev_type == SCENARIO
                    else """",
                    power=power,
                )
                devices.update({i: dev_info})
            self._devices.update({dev_type: devices})

        return self._devices


class ComelitVedoApi(ComelitCommonApi):
    """"""Queries Comelit SimpleHome VEDO alarm.""""""

    _json_data: list[dict[Any, Any]] = [{}, {}, {}, {}, {}]

    async def _translate_zone_status(
        self, zone: ComelitVedoZoneObject
    ) -> AlarmZoneState:
        """"""Translate ZONE status.""""""

        for status in ALARM_ZONE_STATUS:
            if zone.status & status != 0:
                return ALARM_ZONE_STATUS[status]

        return AlarmZoneState.REST

    async def _translate_area_status(
        self, area: ComelitVedoAreaObject
    ) -> AlarmAreaState:
        """"""Translate AREA status.""""""

        for field in ALARM_AREA_STATUS:
            if getattr(area, field):
                return ALARM_AREA_STATUS[field]

        return AlarmAreaState.DISARMED

    async def _create_area_object(
        self, json_area_desc: dict[str, Any], json_area_stat: dict[str, Any], index: int
    ) -> ComelitVedoAreaObject:
        """"""Get area status.""""""

        area = ComelitVedoAreaObject(
            index=index,
            name=json_area_desc[""description""][index],
            p1=json_area_desc[""p1_pres""][index],
            p2=json_area_desc[""p2_pres""][index],
            ready=json_area_stat[""ready""][index],
            armed=json_area_stat[""armed""][index],
            alarm=json_area_stat[""alarm""][index],
            alarm_memory=json_area_stat[""alarm_memory""][index],
            sabotage=json_area_stat[""sabotage""][index],
            anomaly=json_area_stat[""anomaly""][index],
            in_time=json_area_stat[""in_time""][index],
            out_time=json_area_stat[""out_time""][index],
            human_status=AlarmAreaState.UNKNOWN,
        )
        area.human_status = await self._translate_area_status(area)
        _LOGGER.debug(area)
        return area

    async def _create_zone_object(
        self, json_zone_desc: dict[str, Any], json_zone_stat: dict[str, Any], index: int
    ) -> ComelitVedoZoneObject:
        """"""Create zone object.""""""

        status_api = json_zone_stat[""status""].split("","")[index]

        zone = ComelitVedoZoneObject(
            index=index,
            name=json_zone_desc[""description""][index],
            status=int(status_api, 16),
            status_api=status_api,
            human_status=AlarmZoneState.UNKNOWN,
        )
        zone.human_status = await self._translate_zone_status(zone)
        _LOGGER.debug(zone)
        return zone

    async def _async_get_page_data(
        self, desc: str, page: str, present_check: str | int | None = None
    ) -> tuple[bool, dict[str, Any]]:
        """"""Return status and data from a specific GET query.""""""
        reply_status, reply_json = await self._get_page_result(page)
        _LOGGER.debug(""Alarm %s: %s"", desc, reply_json)
        present = present_check in reply_json[""present""] if ""_desc"" in page else True
        return (reply_json[""logged""] and present), reply_json

    async def set_zone_status(
        self, index: int, action: str, force: bool = False
    ) -> bool:
        """"""Set zone action.

        action:
            tot = enable
            dis = disable

        index:
            32 = all zones
             n = specific zone

        force:
            False = don't force action
            True  = force action

        """"""

        reply_status = await self._get_page_result(
            f""/action.cgi?vedo=1&{action}={index}&force={int(force)}"", False
        )
        return reply_status == 200

    async def login(self) -> bool:
        """"""Login to VEDO system.""""""
        payload = {""code"": self.device_pin}
        return await self._login(payload, VEDO)

    async def get_area_status(
        self, area: ComelitVedoAreaObject
    ) -> ComelitVedoAreaObject:
        """"""Get AREA status.""""""

        reply_status, reply_json_area_stat = await self._async_get_page_data(
            ""AREA statistics"", ""/user/area_stat.json""
        )
        description = {""description"": area.name, ""p1_pres"": area.p1, ""p2_pres"": area.p2}

        return await self._create_area_object(
            description, reply_json_area_stat, area.index
        )

    async def get_all_areas_and_zones(
        self,
    ) -> dict[str, dict[int, Any]]:
        """"""Get all VEDO system AREA and ZONE.""""""

        queries: dict[int, dict[str, Any]] = {
            1: {
                ""desc"": ""AREA description"",
                ""page"": ""/user/area_desc.json"",
                ""present"": 1,
            },
            2: {
                ""desc"": ""ZONE description"",
                ""page"": ""/user/zone_desc.json"",
                ""present"": ""1"",
            },
            3: {
                ""desc"": ""AREA statistics"",
                ""page"": ""/user/area_stat.json"",
                ""present"": None,
            },
            4: {
                ""desc"": ""ZONE statistics"",
                ""page"": ""/user/zone_stat.json"",
                ""present"": None,
            },
        }

        for index, info in queries.items():
            desc = info[""desc""]
            page = info[""page""]
            present = info[""present""]
            if ""_desc"" in page and self._json_data[index]:
                _LOGGER.debug(""Data for %s already retrieved, skipping"", desc)
                continue
            await self._sleep_between_call(SLEEP_BETWEEN_VEDO_CALLS)
            reply_status, reply_json = await self._async_get_page_data(
                desc, page, present
            )
            if not reply_status:
                _LOGGER.info(""Login expired accessing %s, re-login attempt"", desc)
                await self.login()
                await self._sleep_between_call(SLEEP_BETWEEN_VEDO_CALLS)
                reply_status, reply_json = await self._async_get_page_data(
                    desc, page, present
                )
                if not reply_status:
                    raise CannotRetrieveData(
                        ""Login expired and not working after a retry""
                    )
                _LOGGER.info(""Re-login successful"")
            self._json_data.insert(index, reply_json)

        list_areas: list[int] = self._json_data[1][""present""]
        areas = {}
        for i in range(len(list_areas)):
            if not list_areas[i]:
                _LOGGER.debug(""Alarm skipping non present AREA [%i]"", i)
                continue
            area = await self._create_area_object(
                self._json_data[1], self._json_data[3], i
            )
            areas.update({i: area})

        list_zones: list[int] = self._json_data[2][""present""]
        zones = {}
        for i in range(len(list_zones)):
            if not int(list_zones[i]):
                _LOGGER.debug(""Alarm skipping non present ZONE [%i]"", i)
                continue
            zone = await self._create_zone_object(
                self._json_data[2], self._json_data[4], i
            )
            zones.update({i: zone})

        return {ALARM_AREAS: areas, ALARM_ZONES: zones}
"
xktiBXdE,Nigerian scammers [4-2-3/2024],bombaires,AIMMS,Sunday 4th of February 2024 12:08:51 PM CDT,"<a href=""mailto:efccchairmaoffice5555@gmail.com"">efccchairmaoffice5555@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+11440@gmail.com"">efccchairmaoffice5555+11440@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+28787@gmail.com"">efccchairmaoffice5555+28787@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+18807@gmail.com"">efccchairmaoffice5555+18807@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+28587@gmail.com"">efccchairmaoffice5555+28587@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+5970@gmail.com"">efccchairmaoffice5555+5970@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+7278@gmail.com"">efccchairmaoffice5555+7278@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+7832@gmail.com"">efccchairmaoffice5555+7832@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+17430@gmail.com"">efccchairmaoffice5555+17430@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+311@gmail.com"">efccchairmaoffice5555+311@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+25224@gmail.com"">efccchairmaoffice5555+25224@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+6548@gmail.com"">efccchairmaoffice5555+6548@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+23334@gmail.com"">efccchairmaoffice5555+23334@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+27465@gmail.com"">efccchairmaoffice5555+27465@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+1790@gmail.com"">efccchairmaoffice5555+1790@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+25916@gmail.com"">efccchairmaoffice5555+25916@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+23916@gmail.com"">efccchairmaoffice5555+23916@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+4755@gmail.com"">efccchairmaoffice5555+4755@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+23100@gmail.com"">efccchairmaoffice5555+23100@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+13425@gmail.com"">efccchairmaoffice5555+13425@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+5046@gmail.com"">efccchairmaoffice5555+5046@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+23399@gmail.com"">efccchairmaoffice5555+23399@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+1014@gmail.com"">efccchairmaoffice5555+1014@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+3405@gmail.com"">efccchairmaoffice5555+3405@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+27512@gmail.com"">efccchairmaoffice5555+27512@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+16655@gmail.com"">efccchairmaoffice5555+16655@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+25108@gmail.com"">efccchairmaoffice5555+25108@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+27862@gmail.com"">efccchairmaoffice5555+27862@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+18423@gmail.com"">efccchairmaoffice5555+18423@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+24489@gmail.com"">efccchairmaoffice5555+24489@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+29383@gmail.com"">efccchairmaoffice5555+29383@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+22621@gmail.com"">efccchairmaoffice5555+22621@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+24298@gmail.com"">efccchairmaoffice5555+24298@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+29344@gmail.com"">efccchairmaoffice5555+29344@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+25979@gmail.com"">efccchairmaoffice5555+25979@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+26078@gmail.com"">efccchairmaoffice5555+26078@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+14427@gmail.com"">efccchairmaoffice5555+14427@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+5193@gmail.com"">efccchairmaoffice5555+5193@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+13842@gmail.com"">efccchairmaoffice5555+13842@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+15014@gmail.com"">efccchairmaoffice5555+15014@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+4825@gmail.com"">efccchairmaoffice5555+4825@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+9253@gmail.com"">efccchairmaoffice5555+9253@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+8869@gmail.com"">efccchairmaoffice5555+8869@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+32399@gmail.com"">efccchairmaoffice5555+32399@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+21694@gmail.com"">efccchairmaoffice5555+21694@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+5497@gmail.com"">efccchairmaoffice5555+5497@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+12306@gmail.com"">efccchairmaoffice5555+12306@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+27882@gmail.com"">efccchairmaoffice5555+27882@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+19613@gmail.com"">efccchairmaoffice5555+19613@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+32319@gmail.com"">efccchairmaoffice5555+32319@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+29088@gmail.com"">efccchairmaoffice5555+29088@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+23296@gmail.com"">efccchairmaoffice5555+23296@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+10716@gmail.com"">efccchairmaoffice5555+10716@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+9513@gmail.com"">efccchairmaoffice5555+9513@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+27653@gmail.com"">efccchairmaoffice5555+27653@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+4256@gmail.com"">efccchairmaoffice5555+4256@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+4008@gmail.com"">efccchairmaoffice5555+4008@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+3251@gmail.com"">efccchairmaoffice5555+3251@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+4001@gmail.com"">efccchairmaoffice5555+4001@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+15417@gmail.com"">efccchairmaoffice5555+15417@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+27835@gmail.com"">efccchairmaoffice5555+27835@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+22587@gmail.com"">efccchairmaoffice5555+22587@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+1327@gmail.com"">efccchairmaoffice5555+1327@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+25067@gmail.com"">efccchairmaoffice5555+25067@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+12049@gmail.com"">efccchairmaoffice5555+12049@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+8741@gmail.com"">efccchairmaoffice5555+8741@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+8705@gmail.com"">efccchairmaoffice5555+8705@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+24228@gmail.com"">efccchairmaoffice5555+24228@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+26476@gmail.com"">efccchairmaoffice5555+26476@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+30639@gmail.com"">efccchairmaoffice5555+30639@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+26102@gmail.com"">efccchairmaoffice5555+26102@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+16597@gmail.com"">efccchairmaoffice5555+16597@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+28012@gmail.com"">efccchairmaoffice5555+28012@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+19859@gmail.com"">efccchairmaoffice5555+19859@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+25600@gmail.com"">efccchairmaoffice5555+25600@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+5708@gmail.com"">efccchairmaoffice5555+5708@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+14568@gmail.com"">efccchairmaoffice5555+14568@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+20354@gmail.com"">efccchairmaoffice5555+20354@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+4372@gmail.com"">efccchairmaoffice5555+4372@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+27067@gmail.com"">efccchairmaoffice5555+27067@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+8732@gmail.com"">efccchairmaoffice5555+8732@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+11888@gmail.com"">efccchairmaoffice5555+11888@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+24596@gmail.com"">efccchairmaoffice5555+24596@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+31217@gmail.com"">efccchairmaoffice5555+31217@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+11408@gmail.com"">efccchairmaoffice5555+11408@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+21433@gmail.com"">efccchairmaoffice5555+21433@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+26209@gmail.com"">efccchairmaoffice5555+26209@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+1661@gmail.com"">efccchairmaoffice5555+1661@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+16261@gmail.com"">efccchairmaoffice5555+16261@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+5126@gmail.com"">efccchairmaoffice5555+5126@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+2329@gmail.com"">efccchairmaoffice5555+2329@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+14429@gmail.com"">efccchairmaoffice5555+14429@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+32581@gmail.com"">efccchairmaoffice5555+32581@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+6044@gmail.com"">efccchairmaoffice5555+6044@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+1003@gmail.com"">efccchairmaoffice5555+1003@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+17153@gmail.com"">efccchairmaoffice5555+17153@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+29604@gmail.com"">efccchairmaoffice5555+29604@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+6214@gmail.com"">efccchairmaoffice5555+6214@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+7891@gmail.com"">efccchairmaoffice5555+7891@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+17640@gmail.com"">efccchairmaoffice5555+17640@gmail.com</a>
<a href=""mailto:efccchairmaoffice5555+27288@gmail.com"">efccchairmaoffice5555+27288@gmail.com</a>"
eGt9FzRG,grado sto bil pameten,VMaksimoski008,C++,Sunday 4th of February 2024 11:54:30 AM CDT,"#include <bits/stdc++.h>
 
#define pb push_back
#define eb emplace_back
#define sz(x) (int)x.size()
#define all(x) x.begin(), x.end()
#define uniq(x) x.erase(unique(all(x)), x.end())
#define rall(x) x.rbegin(), x.rend()
//#define int long long
 
using namespace std;
 
using ll = long long;
using ull = unsigned long long;
using ld = long double;
using pii = pair<int, int>;
using pll = pair<ll, ll>;
 
const int mod = 1e9 + 7;
const int LOG = 20;
const int maxn = 1e5 + 5;
const double eps = 1e-9;
 
void setIO() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
}
 
struct SegTree {
    int n;
    vector<vector<ll> > tree;
 
    SegTree(int _n) {
        n = _n;
        tree.resize(2, vector<ll>(4*n+5));
    }
 
    void update(int u, int tl, int tr, int pos, int val, int id) {
        if(tl == tr) {
            tree[id][u] = val;
        } else {
            int tm = (tl + tr) / 2;
            if(pos <= tm)
                update(2*u, tl, tm, pos, val, id);
            else
                update(2*u+1, tm+1, tr, pos, val, id);
            tree[id][u] = tree[id][2*u] + tree[id][2*u+1]; 
        }
    }
 
    ll query(int u, int tl, int tr, int l, int r, int id) {
        if(tl > tr || tl > r || l > tr) return 0;
        if(l <= tl && tr <= r) return tree[id][u];
        int tm = (tl + tr) / 2;
        return (query(2*u, tl, tm, l, r, id)
        + query(2*u+1, tm+1, tr, l, r, id)) % mod;
    }
 
    ll query(int t, int l, int r) {
        return query(1, 0, n-1, l, r, t);
    }
 
    void update(int t, int pos, int val) {
        update(1, 0, n-1, pos, val, t);
    }
};
 
int32_t main() {
    setIO();
 
    ll d[2];
    int n;
    cin >> d[0] >> d[1] >> n;
 
    vector<ll> v(n+1);
    vector<int> log_dp(n+2);
    v[0] = -1e18;
    for(int i=1; i<=n; i++) cin >> v[i];
 
    log_dp[1] = 0;
    for(int i=2; i<=n+1; i++) log_dp[i] = log_dp[i/2] + 1;
 
    vector<vector<ll> > table(n+2, vector<ll>(LOG, 1e18));
    for(int i=1; i<=n; i++) table[i][0] = v[i] - v[i-1];
 
    for(int j=1; j<LOG; j++)
        for(int i=0; i+(1<<j)-1<=n; i++)
            table[i][j] = min(table[i][j-1], table[i+(1<<(j-1))][j-1]);
 
    auto sparseQuery = [&](int l, int r) {
        if(l > r) return ll(1e18);
        int len = r-l+1;
        int k = log_dp[len];
        return min(table[l][k], table[r-(1<<k)+1][k]);
    };
 
    ll dp[n+1][2];
    SegTree tree(n+1);
    memset(dp, 0, sizeof(dp));
    dp[0][0] = 1, dp[0][1] = 1;
    tree.update(0, 0, 1);
    tree.update(1, 0, 1);
 
    vector<int> l(2);
    for(int i=1; i<=n; i++) {
        while(l[0]+1 < i && v[i] - v[l[0]+1] >= d[0]) l[0]++;
        while(l[1]+1 < i && v[i] - v[l[1]+1] >= d[1]) l[1]++;
        // cout << ""P: "" << l[0] << "" - "" << i << '\n';
        // cout << ""B: "" << l[1] << "" - "" << i << '\n';
 
        // cout << ""POSITION: "" << i << '\n';
         
        for(int j=0; j<2; j++) {
            int pos = i;
            int lp=0, rp=l[j];
 
            while(lp <= rp) {
                int mid = (lp + rp) / 2;
 
                if(mid+2 > i) pos = mid, rp = mid - 1;
                else if(sparseQuery(mid+2, i-1) >= d[1-j]) pos = mid, rp = mid - 1;
                else lp = mid + 1;
            }
 
            // if(j == 0)
            //     cout << ""P: "" << pos << "" "" << l[j] << '\n';
            // else
            //     cout << ""B: "" << pos << "" "" << l[j] << '\n';
 
            dp[i][j] = tree.query(j, pos, l[j]);
        }
 
        tree.update(0, i, dp[i][0]);
        tree.update(1, i, dp[i][1]);
        // cout << ""dp["" << i << ""]["" << 0 << ""]: "" << dp[i][0] << '\n';
        // cout << ""dp["" << i << ""]["" << 1 << ""]: "" << dp[i][1] << '\n';
    }
 
    cout << (dp[n][0] + dp[n][1]) % mod << '\n';
    return 0;
}"
JTPznpbL,cssfoundry,Zendarino,CSS,Sunday 4th of February 2024 11:45:14 AM CDT,"* {
  box-sizing: border-box;
}

/* Set a background color */
body {
  background-color: #474e5d;
  font-family: Helvetica, sans-serif;
}

/* The actual timeline (the vertical ruler) */
.timeline {
  position: relative;
  max-width: 1200px;
  margin: 0 auto;
}

/* The actual timeline (the vertical ruler) */
.timeline::after {
  content: '';
  position: absolute;
  width: 6px;
  background-color: white;
  top: 0;
  bottom: 0;
  left: 50%;
  margin-left: -3px;
}

/* Container around content */
.container {
  padding: 10px 40px;
  position: relative;
  background-color: inherit;
  width: 50%;
}

/* The circles on the timeline */
.container::after {
  content: '';
  position: absolute;
  width: 25px;
  height: 25px;
  right: -17px;
  background-color: white;
  border: 4px solid #FF9F55;
  top: 15px;
  border-radius: 50%;
  z-index: 1;
}

/* Place the container to the left */
.left {
  left: 0;
}

/* Place the container to the right */
.right {
  left: 50%;
}

/* Add arrows to the left container (pointing right) */
.left::before {
  content: "" "";
  height: 0;
  position: absolute;
  top: 22px;
  width: 0;
  z-index: 1;
  right: 30px;
  border: medium solid white;
  border-width: 10px 0 10px 10px;
  border-color: transparent transparent transparent white;
}

/* Add arrows to the right container (pointing left) */
.right::before {
  content: "" "";
  height: 0;
  position: absolute;
  top: 22px;
  width: 0;
  z-index: 1;
  left: 30px;
  border: medium solid white;
  border-width: 10px 10px 10px 0;
  border-color: transparent white transparent transparent;
}

/* Fix the circle for containers on the right side */
.right::after {
  left: -16px;
}

/* The actual content */
.content {
  padding: 20px 30px;
  background-color: white;
  position: relative;
  border-radius: 6px;
}

/* Media queries - Responsive timeline on screens less than 600px wide */
@media screen and (max-width: 600px) {
/* Place the timelime to the left */
  .timeline::after {
    left: 31px;
  }

/* Full-width containers */
  .container {
    width: 100%;
    padding-left: 70px;
    padding-right: 25px;
  }

/* Make sure that all arrows are pointing leftwards */
  .container::before {
    left: 60px;
    border: medium solid white;
    border-width: 10px 10px 10px 0;
    border-color: transparent white transparent transparent;
  }

/* Make sure all circles are at the same spot */
  .left::after, .right::after {
    left: 15px;
  }

/* Make all right containers behave like the left ones */
  .right {
    left: 0%;
  }
}"
a8725Znu,Nightlight Script,Liver_zMods,Lua,Sunday 4th of February 2024 11:43:21 AM CDT,"loadstring(game:HttpGet(""https://abre.ai/lm-nightlight""))();"
7G6LXvxm,savetodevice.lua,TIMAS_Bro,Lua,Sunday 4th of February 2024 11:17:55 AM CDT,"local _, files = os.pullEvent(""file_transfer"")
for _, file in ipairs(files.getFiles()) do
  local size = file.seek(""end"")
  file.seek(""set"", 0)
  local f = fs.open(""songs/"" .. file.getName(), ""w"")
  f.write(file.readAll())
  f.close()
  print(""Sucessfully wrote song to device. Play with 'play \"""" .. file.getName() .. ""\""'."")
end"
RD8aDxy8,Disable/Enable Razr automatic download of Synapse,SHADOWOPS,PowerShell,Sunday 4th of February 2024 11:10:21 AM CDT,"# Check for elevated privileges
if (-not ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] ""Administrator"")) {
    Write-Error ""This script must be run as an Administrator. Please run it again with elevated privileges.""
    exit
}

param(
    [Parameter(Mandatory=$true)]
    [ValidateSet(""Enable"",""Disable"")]
    [string]$Action
)

function Backup-Registry {
    $backupFile = ""HKLM_SOFTWARE_Policies_Microsoft_Windows_DeviceInstall_Settings.reg""
    reg export ""HKLM\SOFTWARE\Policies\Microsoft\Windows\DeviceInstall\Settings"" $backupFile
    Write-Host ""Registry backup created: $backupFile""
}

function Set-DeviceInstallPolicy {
    param([string]$Action)
    
    Backup-Registry
    
    $path = ""HKLM:\SOFTWARE\Policies\Microsoft\Windows\DeviceInstall\Settings""
    $disableSystemUpdateAccessValue = if ($Action -eq ""Disable"") { 1 } else { 0 }
    $disableDeviceMetadataRetrievalValue = if ($Action -eq ""Disable"") { 1 } else { 0 }
    
    New-ItemProperty -Path $path -Name ""DisableSystemUpdateAccess"" -Value $disableSystemUpdateAccessValue -PropertyType DWord -Force | Out-Null
    New-ItemProperty -Path $path -Name ""DisableDeviceMetadataRetrieval"" -Value $disableDeviceMetadataRetrievalValue -PropertyType DWord -Force | Out-Null
    
    if ($Action -eq ""Disable"") {
        Write-Host ""Automatic downloading of manufacturer apps and custom icons is now disabled.""
    } else {
        Write-Host ""Automatic downloading of manufacturer apps and custom icons is now enabled.""
    }
}

# Execute the function with the provided action
Set-DeviceInstallPolicy -Action $Action"
yphvULS8,xss.js,JackSparrow1337,JavaScript,Sunday 4th of February 2024 11:06:10 AM CDT,alert('Wizer');
gb19yZkh,yardGreening,zarkoto223,JavaScript,Sunday 4th of February 2024 11:03:41 AM CDT,"function a(input){

    let quadM=input[0];

    let price=(quadM*7.61)-(quadM*7.61)*0.18;
    let discount=(quadM*7.61)*0.18;



    console.log('The final price is: '+price+' lv.')
    console.log('The discount is: '+discount+ ' lv.')
}"
