id,title,username,language,date,content
MvsiEeqZ,News Nov3 23,Newscaster_Ned,Email,Friday 3rd of November 2023 12:55:20 PM CDT,".‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎1‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎2‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎3‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎T‎e‎s‎t‎ ‎c‎o‎m‎p‎l‎e‎t‎e‎.‎

H‎e‎y‎,‎ ‎g‎u‎y‎s‎.‎ ‎M‎y‎ ‎y‎o‎u‎n‎g‎e‎r‎ ‎b‎r‎o‎t‎h‎e‎r‎ ‎S‎p‎o‎r‎t‎s‎c‎a‎s‎t‎e‎r‎ ‎S‎p‎e‎d‎ ‎w‎a‎n‎t‎e‎d‎ ‎t‎o‎ ‎d‎o‎ ‎t‎h‎e‎ ‎n‎e‎w‎s‎ ‎t‎o‎d‎a‎y‎.‎ ‎U‎s‎u‎a‎l‎l‎y‎ ‎I‎ ‎d‎o‎n‎'‎t‎ ‎l‎e‎t‎ ‎h‎i‎m‎ ‎d‎o‎ ‎i‎t‎ ‎b‎e‎c‎a‎u‎s‎e‎ ‎h‎e‎'‎s‎ ‎a‎n‎ ‎e‎v‎e‎n‎ ‎b‎i‎g‎g‎e‎r‎ ‎i‎d‎i‎o‎t‎ ‎t‎h‎a‎n‎ ‎I‎ ‎a‎m‎.‎

1‎0‎ ‎o‎f‎ ‎U‎k‎r‎a‎i‎n‎e‎’‎s‎ ‎2‎4‎ ‎R‎e‎g‎i‎o‎n‎s‎ ‎H‎i‎t‎ ‎b‎y‎ ‎R‎u‎s‎s‎i‎a‎n‎ ‎S‎t‎r‎i‎k‎e‎s‎ ‎O‎v‎e‎r‎n‎i‎g‎h‎t‎
8‎ ‎R‎e‎v‎e‎l‎a‎t‎i‎o‎n‎s‎ ‎f‎r‎o‎m‎ ‎S‎B‎F‎'‎s‎ ‎T‎r‎i‎a‎l‎ ‎t‎h‎a‎t‎ ‎C‎o‎n‎t‎r‎i‎b‎u‎t‎e‎d‎ ‎t‎o‎ ‎t‎h‎e‎ ‎G‎u‎i‎l‎t‎y‎ ‎V‎e‎r‎d‎i‎c‎t‎
O‎r‎t‎i‎z‎:‎ ‎L‎a‎t‎e‎s‎t‎ ‎J‎o‎b‎s‎ ‎R‎e‎p‎o‎r‎t‎ ‎R‎e‎v‎e‎a‎l‎s‎ ‎‘‎A‎n‎o‎t‎h‎e‎r‎ ‎G‎a‎t‎h‎e‎r‎i‎n‎g‎ ‎E‎c‎o‎n‎o‎m‎i‎c‎ ‎S‎t‎o‎r‎m‎ ‎C‎l‎o‎u‎d‎'‎
W‎A‎T‎C‎H‎ ‎-‎ ‎P‎e‎r‎s‎o‎n‎a‎l‎ ‎S‎p‎a‎c‎e‎:‎ ‎W‎o‎m‎a‎n‎ ‎Y‎e‎l‎l‎s‎ ‎a‎t‎ ‎P‎a‎s‎s‎e‎n‎g‎e‎r‎ ‎o‎v‎e‎r‎ ‎R‎e‎c‎l‎i‎n‎i‎n‎g‎ ‎P‎l‎a‎n‎e‎ ‎S‎e‎a‎t‎s‎
W‎a‎t‎c‎h‎ ‎—‎ ‎P‎o‎l‎i‎c‎e‎:‎ ‎D‎r‎u‎n‎k‎ ‎D‎r‎i‎v‎e‎r‎ ‎K‎i‎l‎l‎s‎ ‎P‎a‎s‎s‎e‎n‎g‎e‎r‎ ‎i‎n‎ ‎C‎r‎a‎s‎h‎,‎ ‎F‎l‎e‎e‎s‎ ‎t‎o‎ ‎C‎h‎i‎n‎a‎
R‎e‎p‎o‎r‎t‎:‎ ‎B‎a‎r‎a‎c‎k‎ ‎O‎b‎a‎m‎a‎ ‎A‎d‎v‎i‎s‎i‎n‎g‎ ‎J‎o‎e‎ ‎B‎i‎d‎e‎n‎ ‎o‎n‎ ‎A‎I‎
P‎o‎l‎l‎:‎ ‎D‎o‎n‎a‎l‎d‎ ‎T‎r‎u‎m‎p‎ ‎L‎e‎a‎d‎s‎ ‎J‎o‎e‎ ‎B‎i‎d‎e‎n‎ ‎N‎a‎t‎i‎o‎n‎a‎l‎l‎y‎
G‎a‎s‎p‎s‎ ‎a‎s‎ ‎B‎r‎e‎i‎t‎b‎a‎r‎t‎ ‎E‎x‎p‎o‎s‎é‎ ‎o‎n‎ ‎T‎r‎u‎m‎p‎ ‎N‎Y‎ ‎J‎u‎d‎g‎e‎’‎s‎ ‎C‎l‎e‎r‎k‎ ‎T‎a‎k‎e‎s‎ ‎C‎e‎n‎t‎e‎r‎ ‎S‎t‎a‎g‎e‎
H‎a‎m‎a‎s‎ ‎S‎t‎e‎a‎l‎s‎ ‎F‎u‎e‎l‎ ‎f‎r‎o‎m‎ ‎G‎a‎z‎a‎ ‎H‎o‎s‎p‎i‎t‎a‎l‎s‎,‎ ‎H‎o‎a‎r‎d‎s‎ ‎V‎a‎s‎t‎ ‎S‎t‎o‎c‎k‎p‎i‎l‎e‎ ‎f‎o‎r‎ ‎T‎e‎r‎r‎o‎r‎i‎s‎m‎
2‎0‎2‎4‎ ‎M‎e‎m‎o‎:‎ ‎J‎o‎e‎ ‎B‎i‎d‎e‎n‎ ‎t‎o‎ ‎C‎a‎m‎p‎a‎i‎g‎n‎ ‎o‎n‎ ‎D‎o‎n‎a‎l‎d‎ ‎T‎r‎u‎m‎p‎'‎s‎ ‎P‎o‎l‎i‎c‎i‎e‎s‎ ‎ ‎
C‎o‎n‎n‎e‎c‎t‎i‎c‎u‎t‎ ‎J‎u‎d‎g‎e‎ ‎T‎o‎s‎s‎e‎s‎ ‎E‎l‎e‎c‎t‎i‎o‎n‎ ‎R‎e‎s‎u‎l‎t‎s‎ ‎A‎f‎t‎e‎r‎ ‎V‎i‎d‎e‎o‎ ‎o‎f‎ ‎B‎a‎l‎l‎o‎t‎ ‎F‎r‎a‎u‎d‎
C‎h‎i‎n‎a‎ ‎A‎t‎t‎a‎c‎k‎s‎ ‎I‎s‎r‎a‎e‎l‎ ‎b‎y‎ ‎C‎o‎m‎p‎a‎r‎i‎n‎g‎ ‎A‎n‎t‎i‎-‎H‎a‎m‎a‎s‎ ‎O‎p‎e‎r‎a‎t‎i‎o‎n‎ ‎t‎o‎ ‎U‎y‎g‎h‎u‎r‎ ‎G‎e‎n‎o‎c‎i‎d‎e‎
G‎e‎t‎ ‎A‎l‎l‎ ‎B‎r‎e‎i‎t‎b‎a‎r‎t‎ ‎N‎e‎w‎s‎ ‎H‎e‎r‎e‎
N‎e‎t‎a‎n‎y‎a‎h‎u‎ ‎R‎e‎j‎e‎c‎t‎s‎ ‎B‎i‎d‎e‎n‎:‎ ‎N‎o‎ ‎‘‎P‎a‎u‎s‎e‎’‎ ‎i‎n‎ ‎F‎i‎g‎h‎t‎i‎n‎g‎ ‎W‎i‎t‎h‎o‎u‎t‎ ‎R‎e‎l‎e‎a‎s‎e‎ ‎o‎f‎ ‎H‎o‎s‎t‎a‎g‎e‎s‎
B‎e‎n‎j‎a‎m‎i‎n‎ ‎N‎e‎t‎a‎n‎y‎a‎h‎u‎ ‎(‎Y‎o‎u‎t‎u‎b‎e‎)‎
P‎r‎i‎m‎e‎ ‎M‎i‎n‎i‎s‎t‎e‎r‎ ‎B‎e‎n‎j‎a‎m‎i‎n‎ ‎N‎e‎t‎a‎n‎y‎a‎h‎u‎ ‎t‎o‎l‎d‎ ‎h‎i‎s‎ ‎n‎a‎t‎i‎o‎n‎ ‎o‎n‎ ‎F‎r‎i‎d‎a‎y‎ ‎e‎v‎e‎n‎i‎n‎g‎ ‎t‎h‎a‎t‎ ‎h‎e‎ ‎h‎a‎d‎ ‎r‎e‎f‎u‎s‎e‎d‎ ‎t‎h‎e‎ ‎B‎i‎d‎e‎n‎ ‎a‎d‎m‎i‎n‎i‎s‎t‎r‎a‎t‎i‎o‎n‎’‎s‎ ‎r‎e‎q‎u‎e‎s‎t‎ ‎f‎o‎r‎ ‎a‎ ‎“‎p‎a‎u‎s‎e‎”‎ ‎i‎n‎ ‎f‎i‎g‎h‎t‎i‎n‎g‎,‎ ‎o‎s‎t‎e‎n‎s‎i‎b‎l‎y‎ ‎f‎o‎r‎ ‎h‎u‎m‎a‎n‎i‎t‎a‎r‎i‎a‎n‎ ‎p‎u‎r‎p‎o‎s‎e‎s‎.‎

S‎a‎l‎o‎n‎:‎ ‎R‎e‎p‎u‎b‎l‎i‎c‎a‎n‎s‎,‎ ‎C‎h‎r‎i‎s‎t‎i‎a‎n‎ ‎N‎a‎t‎i‎o‎n‎a‎l‎i‎s‎m‎ ‎‘‎B‎i‎g‎g‎e‎r‎ ‎T‎h‎r‎e‎a‎t‎ ‎t‎o‎ ‎U‎S‎A‎ ‎t‎h‎a‎n‎ ‎H‎a‎m‎a‎s‎’‎
S‎a‎l‎o‎n‎:‎ ‎R‎e‎p‎u‎b‎l‎i‎c‎a‎n‎s‎,‎ ‎C‎h‎r‎i‎s‎t‎i‎a‎n‎ ‎N‎a‎t‎i‎o‎n‎a‎l‎i‎s‎m‎ ‎‘‎B‎i‎g‎g‎e‎r‎ ‎T‎h‎r‎e‎a‎t‎ ‎t‎o‎ ‎U‎S‎A‎ ‎t‎h‎a‎n‎ ‎H‎a‎m‎a‎s‎’‎
1‎,‎4‎3‎0‎
C‎o‎n‎n‎e‎c‎t‎i‎c‎u‎t‎ ‎J‎u‎d‎g‎e‎ ‎T‎o‎s‎s‎e‎s‎ ‎E‎l‎e‎c‎t‎i‎o‎n‎ ‎R‎e‎s‎u‎l‎t‎s‎ ‎A‎f‎t‎e‎r‎ ‎V‎i‎d‎e‎o‎ ‎o‎f‎ ‎B‎a‎l‎l‎o‎t‎ ‎F‎r‎a‎u‎d‎
C‎o‎n‎n‎e‎c‎t‎i‎c‎u‎t‎ ‎J‎u‎d‎g‎e‎ ‎T‎o‎s‎s‎e‎s‎ ‎E‎l‎e‎c‎t‎i‎o‎n‎ ‎R‎e‎s‎u‎l‎t‎s‎ ‎A‎f‎t‎e‎r‎ ‎V‎i‎d‎e‎o‎ ‎o‎f‎ ‎B‎a‎l‎l‎o‎t‎ ‎F‎r‎a‎u‎d‎
3‎1‎0‎
T‎U‎N‎I‎S‎,‎ ‎T‎U‎N‎I‎S‎I‎A‎ ‎-‎ ‎O‎C‎T‎O‎B‎E‎R‎ ‎2‎1‎:‎ ‎P‎e‎o‎p‎l‎e‎ ‎b‎u‎r‎n‎ ‎t‎h‎e‎ ‎I‎s‎r‎a‎e‎l‎i‎ ‎f‎l‎a‎g‎ ‎d‎u‎r‎i‎n‎g‎ ‎a‎ ‎p‎r‎o‎t‎e‎s‎t‎ ‎t‎o‎ ‎e‎x‎p‎r‎e‎s‎s‎ ‎t‎h‎e‎i‎r‎ ‎s‎o‎l‎i‎d‎a‎r‎i‎t‎y‎ ‎w‎i‎t‎h‎ ‎G‎a‎z‎a‎ ‎i‎n‎ ‎t‎h‎e‎ ‎T‎u‎n‎i‎s‎i‎a‎n‎ ‎c‎a‎p‎i‎t‎a‎l‎ ‎T‎u‎n‎i‎s‎ ‎o‎n‎ ‎O‎c‎t‎o‎b‎e‎r‎ ‎2‎1‎,‎ ‎2‎0‎2‎3‎,‎ ‎a‎m‎i‎d‎ ‎t‎h‎e‎ ‎o‎n‎g‎o‎i‎n‎g‎ ‎b‎a‎t‎t‎l‎e‎s‎ ‎b‎e‎t‎w‎e‎e‎n‎ ‎I‎s‎r‎a‎e‎l‎ ‎a‎n‎d‎ ‎t‎h‎e‎ ‎P‎a‎l‎e‎s‎t‎i‎n‎i‎a‎n‎ ‎g‎r‎o‎u‎p‎ ‎H‎a‎m‎a‎s‎.‎ ‎T‎h‎e‎r‎e‎ ‎h‎a‎s‎ ‎b‎e‎e‎n‎ ‎a‎n‎ ‎e‎s‎c‎a‎l‎a‎t‎i‎o‎n‎ ‎i‎n‎ ‎p‎r‎o‎-‎P‎a‎l‎e‎s‎t‎i‎n‎i‎a‎n‎ ‎d‎e‎m‎o‎n‎s‎t‎r‎a‎t‎i‎o‎n‎s‎ ‎w‎o‎r‎l‎d‎w‎i‎d‎e‎,‎ ‎f‎o‎l‎l‎o‎w‎i‎n‎g‎ ‎t‎h‎e‎ ‎O‎c‎t‎o‎b‎e‎r‎ ‎1‎7‎ ‎e‎x‎p‎l‎o‎s‎i‎o‎n‎ ‎a‎t‎ ‎t‎h‎e‎ ‎A‎l‎-‎A‎h‎l‎i‎ ‎a‎l‎-‎A‎r‎a‎b‎i‎ ‎H‎o‎s‎p‎i‎t‎a‎l‎ ‎i‎n‎ ‎t‎h‎e‎ ‎G‎a‎z‎a‎ ‎S‎t‎r‎i‎p‎,‎ ‎a‎m‎i‎d‎ ‎t‎h‎e‎ ‎r‎e‎n‎e‎w‎e‎d‎ ‎f‎i‎g‎h‎t‎i‎n‎g‎ ‎b‎e‎t‎w‎e‎e‎n‎ ‎I‎s‎r‎a‎e‎l‎ ‎a‎n‎d‎ ‎H‎a‎m‎a‎s‎,‎ ‎w‎h‎i‎c‎h‎ ‎l‎a‎u‎n‎c‎h‎e‎d‎ ‎a‎ ‎s‎u‎r‎p‎r‎i‎s‎e‎ ‎a‎t‎t‎a‎c‎k‎ ‎i‎n‎ ‎s‎o‎u‎t‎h‎e‎r‎n‎ ‎I‎s‎r‎a‎e‎l‎ ‎o‎n‎ ‎O‎c‎t‎o‎b‎e‎r‎ ‎7‎.‎ ‎I‎s‎r‎a‎e‎l‎ ‎r‎e‎s‎p‎o‎n‎d‎e‎d‎ ‎w‎i‎t‎h‎ ‎a‎ ‎m‎a‎s‎s‎i‎v‎e‎ ‎b‎o‎m‎b‎i‎n‎g‎ ‎c‎a‎m‎p‎a‎i‎g‎n‎ ‎i‎n‎ ‎G‎a‎z‎a‎.‎ ‎(‎P‎h‎o‎t‎o‎ ‎b‎y‎ ‎H‎a‎s‎a‎n‎ ‎M‎r‎a‎d‎/‎D‎e‎F‎o‎d‎i‎ ‎I‎m‎a‎g‎e‎s‎ ‎N‎e‎w‎s‎ ‎v‎i‎a‎ ‎G‎e‎t‎t‎y‎ ‎I‎m‎a‎g‎e‎s‎)‎
H‎a‎m‎a‎s‎ ‎T‎e‎r‎r‎o‎r‎i‎s‎t‎ ‎A‎t‎t‎a‎c‎k‎ ‎I‎g‎n‎i‎t‎e‎s‎ ‎O‎p‎e‎n‎ ‎H‎a‎t‎r‎e‎d‎ ‎o‎f‎ ‎J‎e‎w‎s‎ ‎A‎r‎o‎u‎n‎d‎ ‎t‎h‎e‎ ‎W‎o‎r‎l‎d‎
5‎,‎2‎1‎1‎
S‎p‎e‎a‎k‎e‎r‎s‎ ‎O‎n‎ ‎D‎a‎y‎ ‎T‎w‎o‎ ‎O‎f‎ ‎R‎e‎p‎u‎b‎l‎i‎c‎a‎n‎ ‎N‎a‎t‎i‎o‎n‎a‎l‎ ‎C‎o‎n‎v‎e‎n‎t‎i‎o‎n‎
P‎o‎l‎l‎:‎ ‎R‎e‎p‎u‎b‎l‎i‎c‎a‎n‎ ‎D‎a‎n‎i‎e‎l‎ ‎C‎a‎m‎e‎r‎o‎n‎ ‎S‎u‎r‎g‎e‎s‎ ‎i‎n‎ ‎K‎e‎n‎t‎u‎c‎k‎y‎ ‎W‎e‎e‎k‎ ‎B‎e‎f‎o‎r‎e‎ ‎E‎l‎e‎c‎t‎i‎o‎n‎
5‎3‎
L‎e‎b‎a‎n‎o‎n‎ ‎B‎o‎r‎d‎e‎r‎ ‎C‎l‎o‎s‎e‎r‎ ‎t‎o‎ ‎W‎a‎r‎ ‎a‎s‎ ‎H‎a‎m‎a‎s‎ ‎F‎i‎r‎e‎s‎ ‎R‎o‎c‎k‎e‎t‎s‎ ‎f‎r‎o‎m‎ ‎H‎e‎z‎b‎o‎l‎l‎a‎h‎ ‎A‎r‎e‎a‎
L‎e‎b‎a‎n‎o‎n‎ ‎B‎o‎r‎d‎e‎r‎ ‎C‎l‎o‎s‎e‎r‎ ‎t‎o‎ ‎W‎a‎r‎ ‎a‎s‎ ‎H‎a‎m‎a‎s‎ ‎F‎i‎r‎e‎s‎ ‎R‎o‎c‎k‎e‎t‎s‎ ‎f‎r‎o‎m‎ ‎H‎e‎z‎b‎o‎l‎l‎a‎h‎ ‎A‎r‎e‎a‎
3‎,‎7‎6‎0‎

S‎a‎m‎ ‎B‎a‎n‎k‎m‎a‎n‎-‎F‎r‎i‎e‎d‎ ‎C‎o‎n‎v‎i‎c‎t‎e‎d‎ ‎o‎f‎ ‎F‎r‎a‎u‎d‎,‎ ‎F‎a‎c‎e‎s‎ ‎o‎v‎e‎r‎ ‎1‎0‎0‎ ‎Y‎e‎a‎r‎s‎ ‎i‎n‎ ‎P‎r‎i‎s‎o‎n‎
1‎,‎3‎9‎1‎
B‎i‎d‎e‎n‎ ‎T‎r‎i‎e‎s‎ ‎t‎o‎ ‎A‎p‎p‎e‎a‎s‎e‎ ‎S‎w‎i‎n‎g‎-‎s‎t‎a‎t‎e‎ ‎M‎u‎s‎l‎i‎m‎s‎ ‎b‎y‎ ‎C‎a‎l‎l‎i‎n‎g‎ ‎f‎o‎r‎ ‎'‎P‎a‎u‎s‎e‎'‎ ‎i‎n‎ ‎G‎a‎z‎a‎
B‎i‎d‎e‎n‎ ‎T‎r‎i‎e‎s‎ ‎t‎o‎ ‎A‎p‎p‎e‎a‎s‎e‎ ‎S‎w‎i‎n‎g‎-‎s‎t‎a‎t‎e‎ ‎M‎u‎s‎l‎i‎m‎s‎ ‎b‎y‎ ‎C‎a‎l‎l‎i‎n‎g‎ ‎f‎o‎r‎ ‎'‎P‎a‎u‎s‎e‎'‎ ‎i‎n‎ ‎G‎a‎z‎a‎
5‎,‎2‎6‎1‎
A‎y‎a‎t‎o‎l‎l‎a‎h‎ ‎K‎h‎a‎m‎e‎n‎e‎i‎:‎ ‎'‎D‎e‎a‎t‎h‎ ‎t‎o‎ ‎A‎m‎e‎r‎i‎c‎a‎'‎ ‎I‎s‎ ‎N‎o‎t‎ ‎J‎u‎s‎t‎ ‎a‎ ‎S‎l‎o‎g‎a‎n‎
A‎y‎a‎t‎o‎l‎l‎a‎h‎ ‎K‎h‎a‎m‎e‎n‎e‎i‎:‎ ‎'‎D‎e‎a‎t‎h‎ ‎t‎o‎ ‎A‎m‎e‎r‎i‎c‎a‎'‎ ‎I‎s‎ ‎N‎o‎t‎ ‎J‎u‎s‎t‎ ‎a‎ ‎S‎l‎o‎g‎a‎n‎
2‎0‎6‎
K‎y‎i‎v‎ ‎S‎a‎y‎s‎ ‎'‎W‎h‎o‎r‎e‎,‎ ‎W‎i‎f‎e‎,‎ ‎S‎o‎l‎d‎i‎e‎r‎'‎ ‎R‎e‎c‎r‎u‎i‎t‎i‎n‎g‎ ‎A‎d‎ ‎i‎s‎ ‎R‎u‎s‎s‎i‎a‎n‎ ‎P‎r‎o‎p‎a‎g‎a‎n‎d‎a‎
K‎y‎i‎v‎ ‎S‎a‎y‎s‎ ‎'‎W‎h‎o‎r‎e‎,‎ ‎W‎i‎f‎e‎,‎ ‎S‎o‎l‎d‎i‎e‎r‎'‎ ‎R‎e‎c‎r‎u‎i‎t‎i‎n‎g‎ ‎A‎d‎ ‎i‎s‎ ‎R‎u‎s‎s‎i‎a‎n‎ ‎P‎r‎o‎p‎a‎g‎a‎n‎d‎a‎
1‎2‎0‎
C‎o‎m‎p‎l‎a‎i‎n‎t‎ ‎C‎a‎l‎l‎s‎ ‎f‎o‎r‎ ‎T‎r‎u‎m‎p‎ ‎J‎u‎d‎g‎e‎’‎s‎ ‎C‎l‎e‎r‎k‎ ‎t‎o‎ ‎B‎e‎ ‎D‎i‎s‎b‎a‎r‎r‎e‎d‎ ‎f‎o‎r‎ ‎D‎o‎n‎a‎t‎i‎o‎n‎s‎
C‎o‎m‎p‎l‎a‎i‎n‎t‎ ‎C‎a‎l‎l‎s‎ ‎f‎o‎r‎ ‎T‎r‎u‎m‎p‎ ‎J‎u‎d‎g‎e‎’‎s‎ ‎C‎l‎e‎r‎k‎ ‎t‎o‎ ‎B‎e‎ ‎D‎i‎s‎b‎a‎r‎r‎e‎d‎ ‎f‎o‎r‎ ‎D‎o‎n‎a‎t‎i‎o‎n‎s‎

N‎a‎c‎k‎ ‎o‎f‎ ‎P‎i‎g‎g‎e‎r‎s‎ ‎S‎t‎e‎a‎l‎ ‎$‎1‎0‎ ‎f‎r‎o‎m‎ ‎W‎h‎i‎t‎e‎ ‎M‎a‎n‎ ‎i‎n‎ ‎C‎l‎a‎r‎e‎m‎o‎n‎t‎ ‎V‎i‎l‎l‎a‎g‎e‎.‎

W‎a‎s‎ ‎i‎t‎ ‎w‎o‎r‎t‎h‎ ‎i‎t‎,‎ ‎n‎e‎g‎r‎o‎e‎s‎?‎


N‎e‎g‎r‎o‎ ‎P‎o‎l‎i‎t‎i‎c‎i‎a‎n‎ ‎S‎e‎t‎t‎l‎e‎s‎ ‎""‎W‎r‎o‎n‎g‎f‎u‎l‎ ‎D‎i‎s‎m‎i‎s‎s‎a‎l‎ ‎C‎o‎m‎p‎l‎a‎i‎n‎t‎""‎ ‎A‎f‎t‎e‎r‎ ‎S‎e‎x‎u‎a‎l‎l‎y‎ ‎H‎a‎r‎a‎s‎s‎i‎n‎g‎ ‎M‎u‎l‎t‎i‎p‎l‎e‎ ‎W‎o‎m‎e‎n‎.‎


F‎l‎o‎r‎i‎d‎a‎ ‎N‎i‎g‎ ‎P‎u‎n‎c‎h‎e‎s‎ ‎T‎e‎e‎n‎ ‎W‎h‎o‎ ‎T‎h‎o‎u‎g‎h‎t‎ ‎H‎e‎ ‎W‎a‎s‎ ‎H‎a‎v‎i‎n‎g‎ ‎S‎e‎x‎ ‎w‎i‎t‎h‎ ‎H‎i‎s‎ ‎D‎a‎u‎g‎h‎t‎e‎r‎.‎


N‎e‎g‎r‎e‎s‎s‎ ‎S‎m‎o‎t‎h‎e‎r‎s‎ ‎H‎e‎r‎ ‎N‎i‎g‎l‎e‎t‎ ‎S‎o‎n‎ ‎t‎o‎ ‎D‎e‎a‎t‎h‎ ‎I‎n‎s‎i‎d‎e‎ ‎M‎a‎n‎h‎a‎t‎t‎a‎n‎ ‎B‎u‎r‎g‎e‎r‎ ‎J‎o‎i‎n‎t‎.‎


N‎e‎g‎r‎o‎ ‎F‎o‎o‎t‎b‎a‎l‎l‎ ‎P‎l‎a‎y‎e‎r‎ ‎A‎c‎c‎u‎s‎e‎d‎ ‎o‎f‎ ‎S‎t‎e‎a‎l‎i‎n‎g‎ ‎M‎o‎n‎e‎y‎ ‎f‎r‎o‎m‎ ‎U‎V‎A‎ ‎C‎o‎a‎c‎h‎'‎s‎ ‎R‎e‎t‎i‎r‎e‎m‎e‎n‎t‎ ‎F‎u‎n‎d‎.‎


2‎ ‎N‎e‎g‎r‎o‎e‎s‎ ‎a‎n‎d‎ ‎a‎ ‎W‎h‎i‎t‎e‎ ‎M‎a‎n‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎A‎f‎t‎e‎r‎ ‎K‎i‎l‎l‎i‎n‎g‎ ‎W‎h‎i‎t‎e‎ ‎C‎o‎u‎p‎l‎e‎ ‎a‎t‎ ‎U‎s‎e‎d‎ ‎C‎a‎r‎ ‎D‎e‎a‎l‎e‎r‎s‎h‎i‎p‎ ‎i‎n‎ ‎C‎l‎e‎v‎e‎l‎a‎n‎d‎.‎


S‎p‎i‎c‎ ‎O‎w‎n‎e‎r‎s‎ ‎o‎f‎ ‎P‎h‎i‎l‎l‎y‎ ‎S‎p‎i‎c‎ ‎R‎e‎s‎t‎a‎u‎r‎a‎n‎t‎ ‎O‎r‎d‎e‎r‎e‎d‎ ‎t‎o‎ ‎P‎a‎y‎ ‎$‎8‎K‎ ‎f‎o‎r‎ ‎W‎a‎g‎e‎ ‎V‎i‎o‎l‎a‎t‎i‎o‎n‎s‎.‎


C‎h‎i‎n‎k‎ ‎B‎o‎s‎s‎ ‎O‎r‎d‎e‎r‎s‎ ‎H‎i‎s‎ ‎C‎l‎e‎r‎k‎ ‎t‎o‎ ‎H‎a‎v‎e‎ ‎S‎e‎x‎ ‎w‎i‎t‎h‎ ‎H‎i‎m‎.‎ ‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎W‎e‎a‎t‎h‎e‎r‎.‎

T‎o‎n‎i‎g‎h‎t‎
M‎o‎s‎t‎l‎y‎ ‎C‎l‎e‎a‎r‎
-‎-‎
/‎4‎5‎°‎
5‎%‎
S‎E‎ ‎5‎ ‎m‎p‎h‎
T‎h‎u‎ ‎0‎2‎ ‎|‎ ‎N‎i‎g‎h‎t‎
4‎5‎°‎
5‎%‎
S‎E‎
5‎
 ‎
m‎p‎h‎
M‎o‎s‎t‎l‎y‎ ‎c‎l‎e‎a‎r‎.‎ ‎L‎o‎w‎ ‎n‎e‎a‎r‎ ‎4‎5‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎l‎i‎g‎h‎t‎ ‎a‎n‎d‎ ‎v‎a‎r‎i‎a‎b‎l‎e‎.‎

H‎u‎m‎i‎d‎i‎t‎y‎
6‎9‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
0‎ ‎o‎f‎ ‎1‎1‎
M‎o‎o‎n‎r‎i‎s‎e‎
1‎0‎:‎4‎3‎ ‎p‎m‎
W‎a‎n‎i‎n‎g‎ ‎G‎i‎b‎b‎o‎u‎s‎
M‎o‎o‎n‎s‎e‎t‎
1‎2‎:‎4‎2‎ ‎p‎m‎
F‎r‎i‎ ‎0‎3‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
7‎6‎°‎
/‎5‎2‎°‎
6‎%‎
S‎S‎E‎ ‎8‎ ‎m‎p‎h‎
S‎a‎t‎ ‎0‎4‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎0‎°‎
/‎5‎5‎°‎
9‎%‎
S‎S‎E‎ ‎6‎ ‎m‎p‎h‎
S‎u‎n‎ ‎0‎5‎
M‎o‎s‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎0‎°‎
/‎6‎3‎°‎
1‎4‎%‎
S‎ ‎7‎ ‎m‎p‎h‎
M‎o‎n‎ ‎0‎6‎
M‎o‎s‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎2‎°‎
/‎6‎5‎°‎
9‎%‎
S‎S‎W‎ ‎1‎4‎ ‎m‎p‎h‎
T‎u‎e‎ ‎0‎7‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎7‎°‎
/‎6‎6‎°‎
8‎%‎
S‎S‎W‎ ‎1‎3‎ ‎m‎p‎h‎
W‎e‎d‎ ‎0‎8‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
8‎8‎°‎
/‎6‎6‎°‎
1‎5‎%‎
S‎S‎W‎ ‎1‎1‎ ‎m‎p‎h‎
T‎h‎u‎ ‎0‎9‎
M‎o‎s‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎1‎°‎
/‎6‎0‎°‎
1‎9‎%‎
N‎N‎E‎ ‎1‎1‎ ‎m‎p‎h‎
F‎r‎i‎ ‎1‎0‎
A‎M‎ ‎S‎h‎o‎w‎e‎r‎s‎
6‎8‎°‎
/‎5‎5‎°‎
3‎8‎%‎
N‎N‎E‎ ‎1‎4‎ ‎m‎p‎h‎
S‎a‎t‎ ‎1‎1‎
C‎l‎o‎u‎d‎y‎
6‎7‎°‎
/‎5‎4‎°‎
2‎4‎%‎
N‎E‎ ‎1‎1‎ ‎m‎p‎h‎
S‎u‎n‎ ‎1‎2‎
S‎h‎o‎w‎e‎r‎s‎
7‎0‎°‎
/‎5‎3‎°‎
5‎3‎%‎
N‎E‎ ‎1‎0‎ ‎m‎p‎h‎
M‎o‎n‎ ‎1‎3‎
S‎h‎o‎w‎e‎r‎s‎
7‎0‎°‎
/‎5‎2‎°‎
4‎6‎%‎
N‎N‎E‎ ‎1‎1‎ ‎m‎p‎h‎
T‎u‎e‎ ‎1‎4‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
6‎9‎°‎
/‎5‎1‎°‎
2‎0‎%‎
N‎E‎ ‎1‎0‎ ‎m‎p‎h‎
W‎e‎d‎ ‎1‎5‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
6‎9‎°‎
/‎5‎3‎°‎
2‎4‎%‎
E‎ ‎1‎0‎ ‎m‎p‎h‎
T‎h‎u‎ ‎1‎6‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
6‎8‎°‎
/‎5‎3‎°‎
2‎4‎%‎
S‎E‎ ‎1‎0‎ ‎m‎p‎h‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

C‎u‎r‎r‎e‎n‎t‎ ‎t‎h‎r‎e‎a‎t‎:‎ ‎T‎u‎r‎k‎e‎y‎ ‎f‎u‎c‎k‎e‎r‎s‎.‎ 🦃

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

F‎a‎t‎ ‎G‎i‎r‎l‎ ‎A‎n‎g‎l‎e‎ ‎S‎h‎o‎t‎
F‎a‎t‎ ‎g‎i‎r‎l‎ ‎a‎n‎g‎l‎e‎ ‎s‎h‎o‎t‎ ‎i‎s‎ ‎a‎ ‎t‎i‎t‎l‎e‎ ‎g‎i‎v‎e‎n‎ ‎t‎o‎ ‎a‎ ‎p‎h‎o‎t‎o‎g‎r‎a‎p‎h‎ ‎o‎f‎ ‎a‎ ‎s‎e‎c‎r‎e‎t‎l‎y‎ ‎f‎a‎t‎ ‎g‎i‎r‎l‎ ‎w‎i‎t‎h‎ ‎t‎h‎e‎ ‎c‎a‎m‎e‎r‎a‎ ‎l‎o‎o‎k‎i‎n‎g‎ ‎s‎l‎i‎g‎h‎t‎l‎y‎ ‎d‎o‎w‎n‎ ‎f‎r‎o‎m‎ ‎a‎b‎o‎v‎e‎ ‎t‎o‎ ‎h‎i‎d‎e‎ ‎c‎h‎e‎e‎k‎ ‎c‎h‎u‎b‎b‎i‎n‎e‎s‎s‎ ‎a‎n‎d‎ ‎c‎h‎i‎n‎ ‎m‎u‎l‎t‎i‎p‎l‎i‎c‎i‎t‎y‎.‎ ‎F‎o‎u‎n‎d‎ ‎i‎n‎ ‎p‎e‎r‎s‎o‎n‎a‎l‎ ‎a‎d‎s‎,‎ ‎L‎J‎ ‎i‎c‎o‎n‎s‎,‎ ‎e‎t‎c‎.‎ ‎T‎h‎e‎ ‎m‎o‎s‎t‎ ‎o‎v‎e‎r‎ ‎t‎h‎e‎ ‎t‎o‎p‎ ‎s‎y‎m‎p‎t‎o‎m‎ ‎o‎f‎ ‎t‎h‎o‎s‎e‎ ‎a‎f‎f‎l‎i‎c‎t‎e‎d‎ ‎w‎i‎t‎h‎ ‎i‎n‎t‎e‎r‎n‎e‎t‎ ‎d‎i‎s‎e‎a‎s‎e‎.‎

(‎(‎ ‎T‎r‎a‎p‎s‎ ‎b‎e‎f‎o‎r‎e‎ ‎t‎r‎a‎p‎s‎ ‎w‎e‎r‎e‎ ‎a‎ ‎t‎h‎i‎n‎g‎ ‎)‎)‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

W‎a‎r‎m‎i‎n‎g‎ ‎s‎t‎r‎i‎p‎e‎s‎ ‎(‎s‎o‎m‎e‎t‎i‎m‎e‎s‎ ‎r‎e‎f‎e‎r‎r‎e‎d‎ ‎t‎o‎ ‎a‎s‎ ‎c‎l‎i‎m‎a‎t‎e‎ ‎s‎t‎r‎i‎p‎e‎s‎ ‎o‎r‎ ‎c‎l‎i‎m‎a‎t‎e‎ ‎t‎i‎m‎e‎l‎i‎n‎e‎s‎)‎ ‎a‎r‎e‎ ‎g‎r‎a‎p‎h‎i‎c‎s‎ ‎t‎h‎a‎t‎ ‎u‎s‎e‎ ‎a‎ ‎s‎e‎r‎i‎e‎s‎ ‎o‎f‎ ‎c‎h‎r‎o‎n‎o‎l‎o‎g‎i‎c‎a‎l‎l‎y‎ ‎o‎r‎d‎e‎r‎e‎d‎ ‎c‎o‎l‎o‎u‎r‎e‎d‎ ‎s‎t‎r‎i‎p‎e‎s‎ ‎t‎o‎ ‎v‎i‎s‎u‎a‎l‎i‎z‎e‎ ‎t‎r‎e‎n‎d‎s‎ ‎i‎n‎ ‎t‎h‎e‎ ‎t‎e‎m‎p‎e‎r‎a‎t‎u‎r‎e‎ ‎r‎e‎c‎o‎r‎d‎ ‎o‎f‎ ‎E‎a‎r‎t‎h‎.‎ ‎T‎h‎e‎y‎ ‎e‎m‎p‎l‎o‎y‎ ‎a‎ ‎m‎i‎n‎i‎m‎a‎l‎i‎s‎t‎ ‎s‎t‎y‎l‎e‎,‎ ‎a‎v‎o‎i‎d‎i‎n‎g‎ ‎t‎e‎c‎h‎n‎i‎c‎a‎l‎ ‎d‎i‎s‎t‎r‎a‎c‎t‎i‎o‎n‎s‎ ‎b‎y‎ ‎u‎s‎i‎n‎g‎ ‎c‎o‎l‎o‎u‎r‎ ‎a‎l‎o‎n‎e‎ ‎t‎o‎ ‎i‎n‎t‎u‎i‎t‎i‎v‎e‎l‎y‎ ‎c‎o‎n‎v‎e‎y‎ ‎t‎r‎e‎n‎d‎s‎ ‎i‎n‎ ‎g‎l‎o‎b‎a‎l‎ ‎w‎a‎r‎m‎i‎n‎g‎ ‎t‎o‎ ‎n‎o‎n‎-‎s‎c‎i‎e‎n‎t‎i‎s‎t‎s‎.‎ ‎T‎h‎e‎ ‎i‎n‎i‎t‎i‎a‎l‎ ‎c‎o‎n‎c‎e‎p‎t‎ ‎o‎f‎ ‎v‎i‎s‎u‎a‎l‎i‎z‎i‎n‎g‎ ‎h‎i‎s‎t‎o‎r‎i‎c‎a‎l‎ ‎t‎e‎m‎p‎e‎r‎a‎t‎u‎r‎e‎ ‎d‎a‎t‎a‎ ‎h‎a‎s‎ ‎b‎e‎e‎n‎ ‎e‎x‎t‎e‎n‎d‎e‎d‎ ‎t‎o‎ ‎u‎s‎e‎ ‎a‎n‎i‎m‎a‎t‎i‎o‎n‎s‎,‎ ‎t‎o‎ ‎v‎i‎s‎u‎a‎l‎i‎z‎e‎ ‎s‎e‎a‎ ‎l‎e‎v‎e‎l‎ ‎r‎i‎s‎e‎ ‎a‎n‎d‎ ‎p‎r‎e‎d‎i‎c‎t‎i‎v‎e‎ ‎c‎l‎i‎m‎a‎t‎e‎ ‎d‎a‎t‎a‎,‎ ‎a‎n‎d‎ ‎t‎o‎ ‎v‎i‎s‎u‎a‎l‎l‎y‎ ‎j‎u‎x‎t‎a‎p‎o‎s‎e‎ ‎t‎e‎m‎p‎e‎r‎a‎t‎u‎r‎e‎ ‎t‎r‎e‎n‎d‎s‎ ‎w‎i‎t‎h‎ ‎o‎t‎h‎e‎r‎ ‎d‎a‎t‎a‎ ‎s‎e‎r‎i‎e‎s‎,‎ ‎s‎u‎c‎h‎ ‎a‎s‎ ‎t‎h‎e‎ ‎c‎o‎n‎c‎e‎n‎t‎r‎a‎t‎i‎o‎n‎ ‎o‎f‎ ‎c‎a‎r‎b‎o‎n‎ ‎d‎i‎o‎x‎i‎d‎e‎ ‎i‎n‎ ‎E‎a‎r‎t‎h‎'‎s‎ ‎a‎t‎m‎o‎s‎p‎h‎e‎r‎e‎,‎ ‎g‎l‎o‎b‎a‎l‎ ‎g‎l‎a‎c‎i‎e‎r‎ ‎r‎e‎t‎r‎e‎a‎t‎,‎ ‎p‎r‎e‎c‎i‎p‎i‎t‎a‎t‎i‎o‎n‎,‎ ‎t‎h‎e‎ ‎c‎o‎n‎t‎r‎i‎b‎u‎t‎i‎o‎n‎ ‎o‎f‎ ‎a‎v‎i‎a‎t‎i‎o‎n‎ ‎e‎m‎i‎s‎s‎i‎o‎n‎s‎ ‎t‎o‎ ‎g‎l‎o‎b‎a‎l‎ ‎w‎a‎r‎m‎i‎n‎g‎,‎ ‎a‎n‎d‎ ‎b‎i‎o‎d‎i‎v‎e‎r‎s‎i‎t‎y‎ ‎l‎o‎s‎s‎.‎ ‎T‎h‎e‎s‎e‎ ‎w‎a‎r‎m‎i‎n‎g‎ ‎s‎t‎r‎i‎p‎e‎s‎ ‎w‎e‎r‎e‎ ‎p‎u‎b‎l‎i‎s‎h‎e‎d‎ ‎b‎y‎ ‎t‎h‎e‎ ‎B‎r‎i‎t‎i‎s‎h‎ ‎c‎l‎i‎m‎a‎t‎o‎l‎o‎g‎i‎s‎t‎ ‎E‎d‎ ‎H‎a‎w‎k‎i‎n‎s‎ ‎i‎n‎ ‎2‎0‎1‎8‎,‎ ‎u‎s‎i‎n‎g‎ ‎d‎a‎t‎a‎ ‎f‎r‎o‎m‎ ‎t‎h‎e‎ ‎W‎o‎r‎l‎d‎ ‎M‎e‎t‎e‎o‎r‎o‎l‎o‎g‎i‎c‎a‎l‎ ‎O‎r‎g‎a‎n‎i‎z‎a‎t‎i‎o‎n‎.‎ ‎T‎h‎e‎ ‎c‎o‎l‎o‎u‎r‎s‎ ‎r‎e‎p‎r‎e‎s‎e‎n‎t‎ ‎t‎h‎e‎ ‎a‎n‎n‎u‎a‎l‎ ‎m‎e‎a‎n‎ ‎g‎l‎o‎b‎a‎l‎ ‎t‎e‎m‎p‎e‎r‎a‎t‎u‎r‎e‎ ‎f‎o‎r‎ ‎e‎a‎c‎h‎ ‎y‎e‎a‎r‎ ‎f‎r‎o‎m‎ ‎1‎8‎5‎0‎ ‎(‎l‎e‎f‎t‎)‎ ‎t‎o‎ ‎2‎0‎1‎8‎ ‎(‎r‎i‎g‎h‎t‎)‎ ‎–‎ ‎t‎h‎e‎ ‎p‎r‎o‎g‎r‎e‎s‎s‎i‎o‎n‎ ‎f‎r‎o‎m‎ ‎b‎l‎u‎e‎ ‎(‎c‎o‎o‎l‎e‎r‎)‎ ‎t‎o‎ ‎r‎e‎d‎ ‎(‎w‎a‎r‎m‎e‎r‎)‎ ‎s‎t‎r‎i‎p‎e‎s‎ ‎i‎s‎ ‎i‎n‎d‎i‎c‎a‎t‎i‎v‎e‎ ‎o‎f‎ ‎g‎l‎o‎b‎a‎l‎ ‎w‎a‎r‎m‎i‎n‎g‎.‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

l‎k‎f‎d‎s‎a‎l‎k‎d‎s‎l‎d‎s‎l‎k‎f‎l‎k‎d‎s‎f‎l‎k‎d‎s‎f‎l‎k‎s‎l‎k‎f‎d‎s‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎ ‎n‎i‎g‎g‎e‎r‎ ‎"
VZM6eXHD,web server configurations,G2ARefundExploit,YAML,Friday 3rd of November 2023 12:55:07 PM CDT,"web server configurations
import csv
import requests
import time
import threading
from queue import Queue
 
api_url = ""https://repy.in/send-media""
jwt_token = ""eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFscGhhQGdtYWlsLmNvbSIsImNsaW5lSWQiOiJkcmI2ZGxjdTYzdHBoenMiLCJpYXQiOjE2OTg5ODk2OTJ9.Tm0h_GLDgnIKr2kbfwBgRvUepl6NEdS22v0rqmnzjvk""
 
# Function to send media to a phone number
def send_media(phone, media_url):
    headers = {
        ""Authorization"": f""Bearer {jwt_token}"",
        ""Content-Type"": ""application/json"",
    }
 
    payload = {
        ""phone"": phone,
        ""mediaUrl"": media_url,
    }
 
    retries = 3
    success = False
    while retries > 0:
        response = requests.post(api_url, json=payload, headers=headers)
 
        if response.status_code == 200:
            success = True
            print(f""Media sent to {phone} successfully"")
            break
        else:
            try:
                error_message = response.json()[""message""]
                print(f""Failed to send media to {phone}. Error message: {error_message}"")
            except:
                print(f""Failed to send media to {phone}. Unable to parse error message."")
            retries -= 1
            time.sleep(1)  # Wait for 1 second before retrying
 
    if not success:
        # Append the failed data to a CSV file
        with open(""failed_records.csv"", ""a"", newline="""") as file:
            writer = csv.writer(file)
            writer.writerow([phone, media_url])
            
# Function to process the CSV file
def process_csv():
    processed_phones = set()  # To keep track of processed phone numbers
    while not csv_queue.empty():
        phone, media_url = csv_queue.get()
        if phone not in processed_phones:
            send_media(phone, media_url)
            processed_phones.add(phone)
        csv_queue.task_done()
 
# Limit API calls to 40 per minute
def throttle_api_calls():
    while not csv_queue.empty():
        for _ in range(40):
            if not csv_queue.empty():
                phone, media_url = csv_queue.get()
                send_media(phone, media_url)
                csv_queue.task_done()
            else:
                break
 
# Read phone numbers and media URLs from a CSV file
csv_file = ""demo.csv""
 
csv_queue = Queue()
with open(csv_file, ""r"") as file:
    reader = csv.DictReader(file)
    for row in reader:
        phone = row[""phone""]
        media_url = row[""mediaUrl""]
        csv_queue.put((phone, media_url))
 
# Start a separate thread to limit API calls
api_thread = threading.Thread(target=throttle_api_calls)
api_thread.start()
 
# Process the CSV file
process_csv()
 
# Wait for the API thread and CSV processing to finish
api_thread.join()
csv_queue.join()
web server configurations"
88wN8P19,SQL databases,G2ARefundExploit,C: Loadrunner,Friday 3rd of November 2023 12:52:45 PM CDT,"/*
 * 30 Days - Lost in Space
 * Day 5 - Creative Day - Using Binary to control more lights
 * with the same 3 switches
 * have an ""All Lights On"" mode to catch any intruders
 *
 * Learn more at https://inventr.io/adventure
 *
Binary counting:
Binary uses only 0's and 1's. Switches have either on or off so we can use them
for Binary counting. 
If a switch is off the number would be 0 and if it's on the number would be 1
As we have 3 switches, Switch 1 = 1, Switch 2 = 2, and Switch 3 = 4
If Switch 1 and Switch 3 are in the on position the count would be 1 + 4 which = 5
 
If there were more switches, binary counting would see it as (if turned on):
Switch 1 = 1
Switch 2 = 2
Switch 3 = 4
Switch 4 = 8
Switch 5 = 16
Switch 6 = 32
Switch 7 = 64
Switch 8 = 128
 
If all were turned on it would be 1+2+4+8+16+32+64+128 which would = 255
 
 */
 
#include ""Arduino.h""  // include information about our HERO
 
 
 
const byte ENGINEROOM_LIGHTS_PIN = 7;    // pin controlling the engine room lights
const byte AIRLOCK_LIGHTS_PIN = 8;  // pin controlling the airlock lights
const byte BATHROOM_LIGHTS_PIN = 9;  // pin controlling the bathroom lights
const byte CABIN_LIGHTS_PIN = 10;    // pin controlling the cabin lights
const byte STORAGE_LIGHTS_PIN = 11;  // pin controlling the storage lights
const byte COCKPIT_LIGHTS_PIN = 12;  // pin controlling the exterior lights
int whichlight; //Store for Binary count
 
 
// We will use a different input pin for each of our DIP switches and
// we'll label them using binary state that switch represents.
 
const byte BINARY1_SWITCH_PIN = 2;    // cabin lights controlled by switch 1
const byte BINARY2_SWITCH_PIN = 3;  // storage lights controlled by switch 2
const byte BINARY4_SWITCH_PIN = 4;  // exterior lights controlled by switch 3
 
// the setup function runs once when you press reset or power the board
void setup() {
   Serial.begin(9600);  // Initialize Serial, set speed to 9600 bits/second (baud)
 
  // Configure our LED control pins as OUTPUT pins
  pinMode(ENGINEROOM_LIGHTS_PIN, OUTPUT);    // pin controlling the engine room lights
  pinMode(AIRLOCK_LIGHTS_PIN, OUTPUT);  // pin controlling the airlock lights
  pinMode(BATHROOM_LIGHTS_PIN, OUTPUT);  // pin controlling the bathroom lights
  pinMode(CABIN_LIGHTS_PIN, OUTPUT);    // pin controlling the cabin lights
  pinMode(STORAGE_LIGHTS_PIN, OUTPUT);  // pin controlling the storage lights
  pinMode(COCKPIT_LIGHTS_PIN, OUTPUT);  // pin controlling the exterior lights
 
  // Configure the switch pins as INPUT pins
  pinMode(BINARY1_SWITCH_PIN, INPUT);    // pin connected to switch 1 (Binary count 1)
  pinMode(BINARY2_SWITCH_PIN, INPUT);  // pin connected to switch 2 (Binary count 2)
  pinMode(BINARY4_SWITCH_PIN, INPUT);  // pin connected to switch 3 (Binary count 4)
}
 
// Each time through loop() we will check each switch in turn and set each light's
// state appropriately.
void loop() {
whichlight = 0;
// using individual if statements, aware there are other methods but this was simple and 
// easy to read
if (digitalRead(BINARY1_SWITCH_PIN) == HIGH){
  whichlight = whichlight + 1;
}
if (digitalRead(BINARY2_SWITCH_PIN) == HIGH){
  whichlight = whichlight + 2;
}
if (digitalRead(BINARY4_SWITCH_PIN) == HIGH){
  whichlight = whichlight + 4;
}
 
// individual if statements again, switchcase would have probably been better here
// but it's still easy to read
if (whichlight == 0) {
  digitalWrite(ENGINEROOM_LIGHTS_PIN, LOW);  // Engine Room lights off
  digitalWrite(AIRLOCK_LIGHTS_PIN, LOW);  // Airlock lights off
  digitalWrite(BATHROOM_LIGHTS_PIN, LOW);  // Bathroom lights off
  digitalWrite(CABIN_LIGHTS_PIN, LOW);  // Cabin lights off
  digitalWrite(STORAGE_LIGHTS_PIN, LOW);  // Storage lights off
  digitalWrite(COCKPIT_LIGHTS_PIN, LOW);  // Cockpit lights off
  Serial.print(whichlight);  // show whichlight value
  Serial.println("", All Lights Off"");
}
if (whichlight == 1) {
  digitalWrite(ENGINEROOM_LIGHTS_PIN, HIGH);  // Engine Room lights on
  digitalWrite(AIRLOCK_LIGHTS_PIN, LOW);  // Airlock lights off
  digitalWrite(BATHROOM_LIGHTS_PIN, LOW);  // Bathroom lights off
  digitalWrite(CABIN_LIGHTS_PIN, LOW);  // Cabin lights off
  digitalWrite(STORAGE_LIGHTS_PIN, LOW);  // Storage lights off
  digitalWrite(COCKPIT_LIGHTS_PIN, LOW);  // Cockpit lights off
  Serial.print(whichlight);  // show whichlight value
  Serial.println("", Engine Room Lights On"");
}
if (whichlight == 2) {
  digitalWrite(ENGINEROOM_LIGHTS_PIN, LOW);  // Engine Room lights off
  digitalWrite(AIRLOCK_LIGHTS_PIN, HIGH);  // Airlock lights on
  digitalWrite(BATHROOM_LIGHTS_PIN, LOW);  // Bathroom lights off
  digitalWrite(CABIN_LIGHTS_PIN, LOW);  // Cabin lights off
  digitalWrite(STORAGE_LIGHTS_PIN, LOW);  // Storage lights off
  digitalWrite(COCKPIT_LIGHTS_PIN, LOW);  // Cockpit lights off
  Serial.print(whichlight);  // show whichlight value
  Serial.println("", Airlock Lights On"");
}
if (whichlight == 3) {
  digitalWrite(ENGINEROOM_LIGHTS_PIN, LOW);  // Engine Room lights off
  digitalWrite(AIRLOCK_LIGHTS_PIN, LOW);  // Airlock lights off
  digitalWrite(BATHROOM_LIGHTS_PIN, HIGH);  // Bathroom lights on
  digitalWrite(CABIN_LIGHTS_PIN, LOW);  // Cabin lights off
  digitalWrite(STORAGE_LIGHTS_PIN, LOW);  // Storage lights off
  digitalWrite(COCKPIT_LIGHTS_PIN, LOW);  // Cockpit lights off
  Serial.print(whichlight);  // show whichlight value
  Serial.println("", Bathroom Lights Lights On"");
}
if (whichlight == 4) {
  digitalWrite(ENGINEROOM_LIGHTS_PIN, LOW);  // Engine Room lights off
  digitalWrite(AIRLOCK_LIGHTS_PIN, LOW);  // Airlock lights off
  digitalWrite(BATHROOM_LIGHTS_PIN, LOW);  // Bathroom lights off
  digitalWrite(CABIN_LIGHTS_PIN, HIGH);  // Cabin lights on
  digitalWrite(STORAGE_LIGHTS_PIN, LOW);  // Storage lights off
  digitalWrite(COCKPIT_LIGHTS_PIN, LOW);  // Cockpit lights off
  Serial.print(whichlight);  // show whichlight value
  Serial.println("", Cabin Lights On"");
}
if (whichlight == 5) {
  digitalWrite(ENGINEROOM_LIGHTS_PIN, LOW);  // Engine Room lights off
  digitalWrite(AIRLOCK_LIGHTS_PIN, LOW);  // Airlock lights off
  digitalWrite(BATHROOM_LIGHTS_PIN, LOW);  // Bathroom lights off
  digitalWrite(CABIN_LIGHTS_PIN, LOW);  // Cabin lights off
  digitalWrite(STORAGE_LIGHTS_PIN, HIGH);  // Storage lights on
  digitalWrite(COCKPIT_LIGHTS_PIN, LOW);  // Cockpit lights off
  Serial.print(whichlight);  // show whichlight value
  Serial.println("", Storage Lights On"");
}
if (whichlight == 6) {
  digitalWrite(ENGINEROOM_LIGHTS_PIN, LOW);  // Engine Room lights off
  digitalWrite(AIRLOCK_LIGHTS_PIN, LOW);  // Airlock lights off
  digitalWrite(BATHROOM_LIGHTS_PIN, LOW);  // Bathroom lights off
  digitalWrite(CABIN_LIGHTS_PIN, LOW);  // Cabin lights off
  digitalWrite(STORAGE_LIGHTS_PIN, LOW);  // Storage lights off
  digitalWrite(COCKPIT_LIGHTS_PIN, HIGH);  // Cockpit lights on
  Serial.print(whichlight);  // show whichlight value
  Serial.println("", Cockpit Lights On"");
}
if (whichlight == 7) { //had a spare result so decided to make it the opposite of all off (binary 0)
  digitalWrite(ENGINEROOM_LIGHTS_PIN, HIGH);  // Engine Room lights on
  digitalWrite(AIRLOCK_LIGHTS_PIN, HIGH);  // Airlock lights on
  digitalWrite(BATHROOM_LIGHTS_PIN, HIGH);  // Bathroom lights on
  digitalWrite(CABIN_LIGHTS_PIN, HIGH);  // Cabin lights on
  digitalWrite(STORAGE_LIGHTS_PIN, HIGH);  // Storage lights on
  digitalWrite(COCKPIT_LIGHTS_PIN, HIGH);  // Cockpit lights on
  Serial.print(whichlight);  // show whichlight value
  Serial.println("", All Lights On"");
}
 
}"
FVnkdfar,web development,G2ARefundExploit,Lua,Friday 3rd of November 2023 12:49:10 PM CDT,"// Storage
// Write a function that takes a certain number of items and their quantity. If the same item appears more than once,
// add the new amount to the existing one. In the end, print all the items and their amount without sorting them. The
// input comes as an array of strings. Try using a Map().
 
function solve(arr) {
 
    let map = new Map();
 
    for (let string of arr) {
        let tokens = string.split(' ');
        let product = tokens[0];
        let quantity = Number(tokens[1]);
 
        if(!map.has(product)) {
            map.set(product, +quantity);
        } else {
            let currQuantity = map.get(product)
            let newQuantity = currQuantity += quantity;
            map.set(product, newQuantity);
        }
    }
 
    for (let kvp of map) {
        console.log(`${kvp[0]} -> ${kvp[1]}`);
    }
 
}

     

"
wMt5NfuV,BTC Wallet Credentials have been reset,VQ-Moe,GetText,Friday 3rd of November 2023 12:47:24 PM CDT,"Dear User
We have received a request to reset the login information for your Bitcoin wallet. If you did not make this request, please disregard this message.
Your new login credentials will be 
josli45:KoE3dG1 on 159.223.212.34
You can connect via SSH.
Regards"
EUKb9uKF,Untitled,Josif_tepe,C++,Friday 3rd of November 2023 12:42:36 PM CDT,"#include <iostream>

using namespace std;

int main() {
    int x = 1;
    
    while(x <= 50) {
        if(x % 2 == 0) {
            cout << x << endl;
        }
        x += 1;
    }
    
    return 0;
}
 
"
r9JwKvJE,clipaste - A clipboard to file tool,subbass,Bash,Friday 3rd of November 2023 12:36:38 PM CDT,"#!/bin/bash

# --------------------------------------------------------------------------------
# Clipboard to File Script
# --------------------------------------------------------------------------------
# Description:
#     This script asks the user for a filename and then copies the contents of the
#     clipboard into that file. If the first line of the file is '#!/bin/bash',
#     it sets the execute permission on the file.
#
# Usage:
#     Run this script in the terminal. When prompted, provide the desired filename.
#     The script will handle the rest.
#
# Dependencies:
#     - xclip (Linux)
#     - pbpaste (macOS)
#     Make sure to install the required dependency based on your operating system.
#
# Features:
#     - Easy to use, prompting for a filename
#     - Automatic permission setting for bash script files
#
# Author: Subbass
# Version: 1.0.1
# Created: 2023-11-3
# Last Modified: 2023-11-03
# --------------------------------------------------------------------------------

# Prompt the user for a filename
read -p ""Enter the filename where you want to paste the clipboard contents: "" filename

# Copy the clipboard contents into the given filename
# Make sure to have `xclip` installed on Linux or `pbpaste` on macOS
# You may need to adapt the clipboard command based on your system
xclip -selection clipboard -o > ""$filename"" 2>/dev/null || pbpaste > ""$filename""

# Check if the file starts with '#!/bin/bash' and if so, make it executable
if grep -q '^#!/bin/bash' ""$filename""; then
  chmod +x ""$filename""
  echo ""Execute permissions set for $filename.""
else
  echo ""No bash shebang detected, execute permissions not modified.""
fi

# End of the script"
aDciDgj4,Untitled,Josif_tepe,C++,Friday 3rd of November 2023 12:33:50 PM CDT,"#include <iostream>

using namespace std;

int main() {
    int i = 1;
    //i = 11
    while(i <= 10) {
        cout << i << endl;
        i += 1;
    }
    
    return 0;
}
 
"
Fv2krj4h,01. Bonus Scoring System,Spocoman,C#,Friday 3rd of November 2023 12:28:35 PM CDT,"using System;

namespace BonusScoringSystem
{
    class Program
    {
        static void Main(string[] args)
        {
            int students = int.Parse(Console.ReadLine());
            int lectures = int.Parse(Console.ReadLine());
            int bonus = int.Parse(Console.ReadLine());
            int[] attendances = new int[students];

            for (int i = 0; i < students; i++)
            {
                attendances[i] = int.Parse(Console.ReadLine());
            }

            int maxBonus = (int)(lectures > 0 ? Math.Ceiling(1.0 * attendances.Max() / lectures * (5 + bonus)) : 0);

            Console.WriteLine($""Max Bonus: {maxBonus}.\nThe student has attended {(attendances.Sum() > 0 ? attendances.Max() : 0)} lectures."");
        }
    }
}"
6q1WWDNS,company user,z_rr,Python,Friday 3rd of November 2023 12:25:05 PM CDT,"data = {}
command = input()

while command != ""End"":
    company_name, employee_id = command.split("" -> "")

    if company_name not in data:
        data[company_name] = []

    if employee_id not in company_name:
        data[company_name].append(employee_id)

    command = input()

for company, employees in data.items():
    print(company)
    for ID in employees:
        print(f""-- {ID}"")"
r4UqZtc2,itemTransport,R0cks1,Lua,Friday 3rd of November 2023 12:23:15 PM CDT,"function carbure()
    turtle.select(16)
    if turtle.getItemCount() <= 10 then
        turtle.turnLeft()
        turtle.turnLeft()
        turtle.suck(30)
    end
    turtle.refuel()
end

function recup()
    for i = 1,15,1 do
        if turtle.getItemCount(i) == 0 then
            turtle.suck()
        end
    end
end

function vidage()
	for i = 1,15,1 do
        turtle.select(i)
        turtle.drop()
    end
end

function aller()
	for i = 1,4,1 do
		turtle.up()
	end

	turtle.turnLeft()
	turtle.turnLeft()
	
	for i = 1,15,1 do
		turtle.forward()
	end
end

function retour()

	turtle.turnLeft()
	turtle.turnLeft()
	
	for i = 1,15,1 do
		turtle.forward()
	end
	
	for i = 1,4,1 do
		turtle.down()
	end

end

if turtle.getFuelLevel() <= 50 then
	carbure()
end
recup()
aller()
vidage()
retour()"
aLKFvNND,Untitled,Josif_tepe,C++,Friday 3rd of November 2023 12:20:56 PM CDT,"#include <iostream>

using namespace std;

int main() {
    char c;
    cin >> c;
    
    if(isalpha(c)) {
        if(isupper(c)) {
            cout << ""GOLEMA"" << endl;
        }
        else {
            cout << ""MALA"" << endl;
        }
    }
    else {
        cout << ""GRESKA"" << endl;
    }
    return 0;
}
 
"
BsgXxjhX,Vault Display,Royalzombie222,Lua,Friday 3rd of November 2023 12:12:17 PM CDT,"local chest = peripheral.find(""create:item_vault"")
for slot, item in pairs(chest.list()) do
	print(""debug"")
  print((""%d x %s in slot %d""):format(item.count, item.name, slot))
end"
CCftCbTM,01. Bonus Scoring System,Spocoman,C++,Friday 3rd of November 2023 12:07:57 PM CDT,"#include <iostream>
#include <cmath>

using namespace std;

int main() {
    int students, lectures, bonus, maxAttendance = 0;
    cin >> students >> lectures >> bonus;
    int* attendances = new int[students];

    for (int i = 0; i < students; i++) {
        cin >> attendances[i];
        if (attendances[i] > maxAttendance) {
            maxAttendance = attendances[i];
        }
    }

    cout << ""Max Bonus: "" << (lectures > 0 ? ceil(1.0 * maxAttendance / lectures * (5 + bonus)) : 0)
        << "".\nThe student has attended "" << maxAttendance << "" lectures.\n"";
    return 0;
}"
1FjvjMMR,Email with Keyword SPECIAL CHARACTERS,wheresTheAnyKey,C,Friday 3rd of November 2023 12:02:39 PM CDT,"Pasted at: 03/11/2023 17:02
Test data generated by 98823c9ce7f73d22c0e84a43ab6f6ed3 for TESTING PURPOSE ONLY

DATA_ID_TESTDATATOFIND NOEXCLUDES

Cooper.Kleine@findmetesting.co.uk 
Mariquilla.Evenden@findmetesting.co.uk 
Noll.Ingolotti@findmetesting.co.uk  
Grove.Feldbaum@findmetesting.co.uk
Mack.Osment@findmetesting.co.uk 
Trisha.Zanicchelli@findmetesting.co.uk
Jack.Gorriessen@findmetesting.co.uk 
Nefen.Malec@findme-testing.co.uk 
Birdie-Gemmill@findmetesting.co.uk
Rosabella.Nias@findmetesting.co.uk
Ellerey.Fanti@findmetesting.cn
Antonina.Carsey@findmetesting.cn
Valry.Shead@findmetesting.cn 
Conrade.Ferrarone@findmetesting.cn
Neysa.Fazakerley@findmetesting.cn
Cristobal.Primak@findmetesting.cn
Wakefield.Kent@findmetesting.cn
findme.Cheales@findmetesting.cn
Nert.Roddamr@findmetesting.cn 
Richy.Raft@findmetesting.cn
Berget.Kermannes@findmetesting.ie 
Shelden.Tregea@findmetesting.ie 
Allsun.Badrick@findmetesting.ie 
Hortense.Ivkovic@findmetesting.ie
Carolin.Potte@findmetesting.ie
Benjie.Trumble@findmetesting.ie
Andrew.Hadgkiss@findmetesting.ie
Trula.Kuna@findmetesting.ie
Tommie.Maytum@findmetesting.ie
Langsdon.Pakes@findmetesting.ie
Porty.Tooth@findmetesting.au
Rozella.Siggefindmetesting.au
Nolie.Tumultyfindmetesting.au
Dud.Caustonfindmetesting.au
Alvinia.Brameldfindmetesting.au
Meridel.Lymbournefindmetesting.au
Elvis.Maleckfindmetesting.au
Brett.Oughtonfindmetesting.au
Rickard.Clemfindmetesting.au
Prue.Firemanfindmetesting.au
Uriel.Rozenbaum@findmetesting25.com
Cindie.Greeson@findmetesting25.com
Laurette.Puckham@findmetesting25.com
Eldredge.Ricket@findmetesting25.com
Alanah.Rapper@findmetesting25.com
Ash.Le.Prevost@findmetesting25.com
Galvin.Purchon@findmetesting25.com
Lauryn.Ilson@findmetesting25.com
findme.Graffin@findmetesting25.com
Edithe.Trehearne@findmetesting25.com
Den.Cancutt@findmetesting10.com
Wernher.Spatoni@findmetesting10.com
Malchy.Ion@findmetesting10.com
Leona.Whitby@findmetesting10.com
Alphonse.Goodlake@findmetesting10.com
Gran.Standen@findmetesting10.com
Barnie.Gilffilland@findmetesting10.com
Kaylyn.Ditchfield@findmetesting10.com
Dorotea.Kohlerman@findmetesting10.com
Gillan.Lampel@findmetesting10.com
Patrica.Mannakee@findustesting.com
Pippo.Sewart@findustesting.com
Lanae.Cousin@findustesting.com
Porter.Glaysher@findustesting.com
Herschel.Yaakov@findustesting.com
findme.Parsand@findustesting.com
Lucho.Cosh@findustesting.com
Cullie.Powlesland@findustesting.com
Edy.Burkart@findustesting.com
Christophorus.Ackeroyd@findustesting.com
Arvy.Rowson@findUStesting.com
Arlan.Ivanilov@findustesting.com
Tawnya.Waslin@findustesting.com
Inigo.Gyrgorcewicx@findustesting.com
Sharity.Stoodley@findustesting.com
Ginger.Dresse@findustesting.com
Deck.Jouannot@findustesting.com
Deny.Soanes@findustesting.com
james@findmetesting.com

Wenona.Moverley@findqatesting.com
Jerry.Poynter@findqatesting.com
Drugi.Neeson@findqatesting.com
Winny.Binfield@findqatesting.com
Darill.Greenshiels@findqatesting.com
Ethelin.Pinchen@findqatesting.com
Tanney.Ballendine@findqatesting.com
Ariadne.Wincott@findqatesting.com
Winnie.Domm@findqatesting.com
Rogerio.Cudbird@findqatesting.com
Yu@findmetesting.com

RIGHT OF @
findme@findme.testing.com
wildcard@findme*testing.com
dash@findme-testing.com
slash@findme/testing.com
questionmark@findme?testing.com

ACCENTS
Pål@findmetesting.com
Magdalène@findmetesting.com
Anaël@findmetesting.com
Lén@findmetesting.com
Loïs@findmetesting.com
Thérèsa@findmetesting.com
Valérie@findmetesting.com
Görel@findmetesting.com
Mélia@findmetesting.com
Joséphine@findmetesting.com
Loïc@findmetesting.com
findme@findmetesting.com
Méghane@findmetesting.com
Nuó@findmetesting.com
Lén@findmetesting.com
Eliès@findmetesting.com
André@findmetesting.com
Mahélie@findmetesting.com
Méthode@findmetesting.com
Rachèle@findmetesting.com
Mélina@findmetesting.com
Gaëlle@findmetesting.com
Céline@findmetesting.com
Bérangère@findmetesting.com
Françoise@findmetesting.com
Séverine@findmetesting.com
Måns@findmetesting.com
Adèle@findmetesting.com
Aimée@findmetesting.com
Mélia@findmetesting.com
Gösta@findmetesting.com
Laurène@findmetesting.com
Gisèle@findmetesting.com
Mélinda@findmetesting.com
Bécassine@findmetesting.com
Ruì@findmetesting.com
Zoé@findmetesting.com
Maëline@findmetesting.com
Aimée@findmetesting.com
Andréanne@findmetesting.com
Adélaïde@findmetesting.com
Laurène@findmetesting.com
Anaé@findmetesting.com
Noëlla@findmetesting.com
Anaël@findmetesting.com
Maëlyss@findmetesting.com
Lucrèce@findmetesting.com
Lén@findmetesting.com
Marie-thérèse@findmetesting.com
Maéna@findmetesting.com
Hélène@findmetesting.com
Hélèna@findmetesting.com
Méng@findmetesting.com
Crééz@findmetesting.com
Mélanie@findmetesting.com
Frédérique@findmetesting.com
Médiamass@findmetesting.com
André@findmetesting.com
Cinéma@findmetesting.com
Mégane@findmetesting.com
Amélie@findmetesting.com
Nadège@findmetesting.com
Rébecca@findmetesting.com
Médiamass@findmetesting.com
Céline@findmetesting.com
Maïly@findmetesting.com
Maï@findmetesting.com
Maëlann@findmetesting.com
Noëlla@findmetesting.com
Laurélie@findmetesting.com
Ruì@findmetesting.com
Chloé@findmetesting.com
Gaëlle@findmetesting.com
Vénus@findmetesting.com
Frédérique@findmetesting.com
Amélie@findmetesting.com
Loïs@findmetesting.com
Marlène@findmetesting.com
Stévina@findmetesting.com
Clémentine@findmetesting.com
Mégane@findmetesting.com
Méng@findmetesting.com
André@findmetesting.com
Crééz@findmetesting.com
Aí@findmetesting.com
Uò@findmetesting.com
Yú@findmetesting.com
Marie-françoise@findmetesting.com
Uò@findmetesting.com
Inès@findmetesting.com
Océane@findmetesting.com
Marie-ève@findmetesting.com
Rébecca@findmetesting.com
Zoé@findmetesting.com
Lài@findmetesting.com
Rachèle@findmetesting.com
Cécile@findmetesting.com
Maïlys@findmetesting.com
Garçon@findmetesting.com
hereiam@testing.com

It's a game of per%entage percentage.
Findme#testing Findme testing.
Over&over&over Over over over.
[findmeinbrackets], findmeinbrackets
(findmeinbrackets), findmeinbrackets
<findmeinbrackets>, findmeinbrackets
{findmeinbrackets>}, findmeinbrackets
http://findme-testing.here.com
http:\\findme-testing.here.com

Vestibulum ante ipsum primis in faucibus orci luctus et ultrices Garçon@findmetesting.com cubilia Curae; Mauris viverra diam vitae quam. Suspendisse potenti. 
Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Ellerey.Fanti@findmetesting.cn risus. Praesent lectus.

Vivamus metus arcu, adipiscing findmetesting@findmetesting.com, hendrerit at, vulputate vitae, nisl.

Fuzzy-Wuzzy	- DASH
Fuzzy;Wuzzy	- COLON
Fuzzy!Wuzzy	- EXCLAMATION
Fuzzy£Wuzzy	- POUND
Fuzzy#Wuzzy	- HASH
Fuzzy%Wuzzy	- PERCENT
Fuzzy@Wuzzy	- AT
Fuzzy&Wuzzy	- AND
Fuzzy=Wuzzy	- EQUAL
Fuzzy§Wuzzy
Fuzzy~Wuzzy
Fuzzy?Wuzzy	 - QUESTION MARK
Fuzzy$Wuzzy	 - DOLLAR
Fuzzy[Wuzzy] - BRACKETS
Fuzzy^Wuzzy
Fuzzy(Wuzzy) - BRACKETS
Fuzzy+Wuzzy	 - PLUS
Fuzzy±Wuzzy	 - PLUS/MINUE
Fuzzy|Wuzzy	 - PIPE
Fuzzy/Wuzzy	 - FORWARDSLASH
Fuzzy<Wuzzy> - BRACKETS
Fuzzy{Wuzzy} - CURLY
Fuzzy\Wuzzy  - BACKSLASH"
pgb1gHPR,Untitled,Josif_tepe,C++,Friday 3rd of November 2023 12:02:03 PM CDT,"#include <iostream>

using namespace std;

int main() {
    int b, c;
    cin >> c >> b;
    if(b == 0 and c == 0) {
        cout << ""ima beskonecno resenija"" << endl;
    }
    else if(c == 0 or b % c != 0) {
        cout << ""nema resenie"" << endl;
    }
    else {
        cout << -b/c << endl;
    }
    return 0;
}
"
cvetn8fm,Simple File Explorer (CC:Tweaked),BenniShifer919,Lua,Friday 3rd of November 2023 12:01:05 PM CDT,"term.clear()
local
main_color,
second_color,
folder_color,
file_color,
text_color,
readonly_color =
colours.yellow,
colours.orange,
colors.orange,
colors.black,
colors.white,
colors.red

local current_path = ""/""
local current_readonly = false
local current_files = {}
local selected_file = nil
local last_click = {}
local scroll_position = 0

local creating_new_file = false
local creating_new_dir = false
local input = """"

local copied_file,cuted_file

local w,h = term.getSize()

function updateFileList()
if fs.exists(current_path) then
    if fs.isDir(current_path) then
        local files = fs.list(current_path)
        current_files = {}
        for i=1,#files do
            local file_data = {}
            file_data[1] = files[i]
            file_data[2] = fs.combine(current_path,file_data[1])
            file_data[3] = fs.isDir(file_data[2])
            file_data[4] = fs.getSize(file_data[2])
            file_data[5] = fs.isReadOnly(file_data[2])
            table.insert(current_files,file_data)
        end
    end
end
end

updateFileList()

while true do

local function draw()
    term.setBackgroundColor(main_color)
    term.clear()
    term.setCursorPos(1,h)
    term.clearLine()
    term.setBackgroundColor(second_color)
    term.setTextColor(text_color)
    term.clearLine()
    local button_text = ""[Exit] [Delete] [Move] [Copy] [New Dir] [New File]""
    if not creating_new_dir and not creating_new_file then
        term.write(button_text)
    else
        term.write(input)
    end
    term.setCursorPos(1,1)
    term.clearLine()
    term.setBackgroundColor(second_color)
    term.setTextColor(text_color)
    if current_path == nil or current_path == "" "" then
        term.write(""/"")
    else
        if selected_file == nil then
            term.write(current_path)
        else
            term.write(selected_file[2])
        end
    end
    local folders,files = {}, {}
    for i=1,#current_files,1 do
        if fs.isDir(current_files[i][2]) then
            table.insert(folders,current_files[i])
        else
            table.insert(files,current_files[i])
        end
    end
    --Folders display logic
    local y = 2
    if 1+scroll_position <= #folders then 
        for ind=1+scroll_position,#folders,1 do
            local data = folders[ind]
            if ind-scroll_position > h-2 then
                break
            end 
            term.setCursorPos(1,y)
            if data[3] == true then
                term.setBackgroundColor(folder_color)
            else
                term.setBackgroundColor(file_color)
            end
            term.clearLine()
            if data[5] == true then
                term.setTextColor(readonly_color)
            else 
                term.setTextColor(text_color)
            end
            term.write(data[1])
            y = y + 1
        end
    end
    --Files display logic
    if 1 + scroll_position - #folders <= #files then
        local start_ind
        if scroll_position <= #folders then
            start_ind = 1
        else
            start_ind = 1+scroll_position-#folders
        end
        for ind = start_ind, #files, 1 do
            local data = files[ind]
            if y > h - 2 then
                break
            end
            term.setCursorPos(1, y)
            if data[3] == true then
                term.setBackgroundColor(folder_color)
            else
                term.setBackgroundColor(file_color)
            end
            term.clearLine()
            if data[5] == true then
                term.setTextColor(readonly_color)
            else
                term.setTextColor(text_color)
            end
            term.write(data[1])
            y = y + 1
        end
    end
end
draw()
local e,a,b,c,d,x = os.pullEvent()

if e == ""monitor_resize"" then
    w,h = term.getSize()
end

if e == ""mouse_click"" then
    if not creating_new_dir and not creating_new_file then
        local folders,files = {}, {}
        for i=1,#current_files,1 do
            if fs.isDir(current_files[i][2]) then
                table.insert(folders,current_files[i])
            else
                table.insert(files,current_files[i])
            end
        end
        local butt, x, y = a, b, c
        local current_click = {x, y, butt}
        if y > 1 and y < h then
            if last_click and last_click[1] == current_click[1] and last_click[2] == current_click[2] and last_click[3] == current_click[3] then
                if selected_file then
                    if fs.isDir(selected_file[2]) then
                        current_path = selected_file[2]
                        updateFileList()
                        selected_file = nil
                    end
                end
            else
                if y > 1 and y < h then
                    local visible_folders = {}
                    local visible_files = {}
                    for ind = 1 + scroll_position, #folders, 1 do
                        table.insert(visible_folders, folders[ind])
                    end
                    for ind = 1 + scroll_position - #folders, #files, 1 do
                        table.insert(visible_files, files[ind])
                    end
                    if y - 1 <= #visible_folders then
                        selected_file = visible_folders[y - 1]
                    else
                        selected_file = visible_files[y - 1 - #visible_folders]
                    end
                end
            end
        end
        if y == 1 then
            local last_slash = string.find(current_path, ""/[^/]*$"")
        
            if last_slash then
                current_path = string.sub(current_path, 1, last_slash - 1)
            else
                current_path = ""/""
            end
        
            updateFileList()
            selected_file = nil
        end
        
        if y == h then
            if x < 6 then
                term.clear()
                term.setCursorPos(1,1)
                break
            end
            if x > 7 and x < 15 then
                if selected_file then
                    fs.delete(selected_file[2])
                    updateFileList()
                    selected_file = nil
                end
            end
            if x > 16 and x < 22 then
                if cuted_file == nil then
                    if selected_file then
                        cuted_file = selected_file
                    end
                else
                    fs.move(cuted_file[2],fs.combine(current_path,cuted_file[1]))
                    cuted_file = nil
                    updateFileList()
                end
            end
            if x > 23 and x < 29 then
                if copied_file == nil then
                    if selected_file then
                        copied_file = selected_file
                    end
                else
                    fs.copy(copied_file[2],fs.combine(current_path,copied_file[1]))
                    copied_file = nil
                    updateFileList()
                end
            end
            if x > 30 and x < 39 then
                creating_new_dir = true
            end
            if x > 40 and x < 50 then
                creating_new_file = true
            end
        end

        last_click = current_click
    end
end

if e == ""mouse_scroll"" then
    local dir,x,y = a,b,c 
    scroll_position = scroll_position + dir
    if scroll_position < 0 then
        scroll_position = 0
    end
    print(scroll_position)
end

if e == ""key_up"" then
    local key = a
    if not creating_new_dir and not creating_new_file then
        if key == keys.backspace then
            local last_slash = string.find(current_path, ""/[^/]*$"")
        
            if last_slash then
                current_path = string.sub(current_path, 1, last_slash - 1)
            else
                current_path = ""/""
            end
        
            updateFileList()
            selected_file = nil
        end
        if key == keys.delete then
            if selected_file then
                fs.delete(selected_file[2])
                updateFileList()
                selected_file = nil
            end
        end
    else
        if key == keys.backspace then
            if string.len(input) > 0 then
                input = string.sub(input,1,string.len(input)-1)
            end
        end
        if key == keys.enter then
            if creating_new_dir then
                creating_new_dir = false
                fs.makeDir(fs.combine(current_path,input))
                input = """"
                updateFileList()
            end
            if creating_new_file then
                creating_new_file = false
                local file = fs.open(fs.combine(current_path,input),""w"")
                file.close()
                input = """"
                updateFileList()
            end
        end
    end
end

if e == ""char"" then
    local char = a
    if creating_new_dir or creating_new_file then
        input = input..char
    end
end

end
"
uu8WLhYs,Email with Keyword SPECIAL CHARACTERS,wheresTheAnyKey,C,Friday 3rd of November 2023 11:54:55 AM CDT,"Pasted at: 03/11/2023 16:54
Test data generated by 98823c9ce7f73d22c0e84a43ab6f6ed3 for TESTING PURPOSE ONLY

DATA_ID_TESTDATATOFIND NOEXCLUDES

Cooper.Kleine@findmetesting.co.uk 
Mariquilla.Evenden@findmetesting.co.uk 
Noll.Ingolotti@findmetesting.co.uk  
Grove.Feldbaum@findmetesting.co.uk
Mack.Osment@findmetesting.co.uk 
Trisha.Zanicchelli@findmetesting.co.uk
Jack.Gorriessen@findmetesting.co.uk 
Nefen.Malec@findme-testing.co.uk 
Birdie-Gemmill@findmetesting.co.uk
Rosabella.Nias@findmetesting.co.uk
Ellerey.Fanti@findmetesting.cn
Antonina.Carsey@findmetesting.cn
Valry.Shead@findmetesting.cn 
Conrade.Ferrarone@findmetesting.cn
Neysa.Fazakerley@findmetesting.cn
Cristobal.Primak@findmetesting.cn
Wakefield.Kent@findmetesting.cn
findme.Cheales@findmetesting.cn
Nert.Roddamr@findmetesting.cn 
Richy.Raft@findmetesting.cn
Berget.Kermannes@findmetesting.ie 
Shelden.Tregea@findmetesting.ie 
Allsun.Badrick@findmetesting.ie 
Hortense.Ivkovic@findmetesting.ie
Carolin.Potte@findmetesting.ie
Benjie.Trumble@findmetesting.ie
Andrew.Hadgkiss@findmetesting.ie
Trula.Kuna@findmetesting.ie
Tommie.Maytum@findmetesting.ie
Langsdon.Pakes@findmetesting.ie
Porty.Tooth@findmetesting.au
Rozella.Siggefindmetesting.au
Nolie.Tumultyfindmetesting.au
Dud.Caustonfindmetesting.au
Alvinia.Brameldfindmetesting.au
Meridel.Lymbournefindmetesting.au
Elvis.Maleckfindmetesting.au
Brett.Oughtonfindmetesting.au
Rickard.Clemfindmetesting.au
Prue.Firemanfindmetesting.au
Uriel.Rozenbaum@findmetesting25.com
Cindie.Greeson@findmetesting25.com
Laurette.Puckham@findmetesting25.com
Eldredge.Ricket@findmetesting25.com
Alanah.Rapper@findmetesting25.com
Ash.Le.Prevost@findmetesting25.com
Galvin.Purchon@findmetesting25.com
Lauryn.Ilson@findmetesting25.com
findme.Graffin@findmetesting25.com
Edithe.Trehearne@findmetesting25.com
Den.Cancutt@findmetesting10.com
Wernher.Spatoni@findmetesting10.com
Malchy.Ion@findmetesting10.com
Leona.Whitby@findmetesting10.com
Alphonse.Goodlake@findmetesting10.com
Gran.Standen@findmetesting10.com
Barnie.Gilffilland@findmetesting10.com
Kaylyn.Ditchfield@findmetesting10.com
Dorotea.Kohlerman@findmetesting10.com
Gillan.Lampel@findmetesting10.com
Patrica.Mannakee@findustesting.com
Pippo.Sewart@findustesting.com
Lanae.Cousin@findustesting.com
Porter.Glaysher@findustesting.com
Herschel.Yaakov@findustesting.com
findme.Parsand@findustesting.com
Lucho.Cosh@findustesting.com
Cullie.Powlesland@findustesting.com
Edy.Burkart@findustesting.com
Christophorus.Ackeroyd@findustesting.com
Arvy.Rowson@findUStesting.com
Arlan.Ivanilov@findustesting.com
Tawnya.Waslin@findustesting.com
Inigo.Gyrgorcewicx@findustesting.com
Sharity.Stoodley@findustesting.com
Ginger.Dresse@findustesting.com
Deck.Jouannot@findustesting.com
Deny.Soanes@findustesting.com
james@findmetesting.com

Wenona.Moverley@findqatesting.com
Jerry.Poynter@findqatesting.com
Drugi.Neeson@findqatesting.com
Winny.Binfield@findqatesting.com
Darill.Greenshiels@findqatesting.com
Ethelin.Pinchen@findqatesting.com
Tanney.Ballendine@findqatesting.com
Ariadne.Wincott@findqatesting.com
Winnie.Domm@findqatesting.com
Rogerio.Cudbird@findqatesting.com
Yu@findmetesting.com

RIGHT OF @
findme@findme.testing.com
wildcard@findme*testing.com
dash@findme-testing.com
slash@findme/testing.com
questionmark@findme?testing.com

ACCENTS
Pål@findmetesting.com
Magdalène@findmetesting.com
Anaël@findmetesting.com
Lén@findmetesting.com
Loïs@findmetesting.com
Thérèsa@findmetesting.com
Valérie@findmetesting.com
Görel@findmetesting.com
Mélia@findmetesting.com
Joséphine@findmetesting.com
Loïc@findmetesting.com
findme@findmetesting.com
Méghane@findmetesting.com
Nuó@findmetesting.com
Lén@findmetesting.com
Eliès@findmetesting.com
André@findmetesting.com
Mahélie@findmetesting.com
Méthode@findmetesting.com
Rachèle@findmetesting.com
Mélina@findmetesting.com
Gaëlle@findmetesting.com
Céline@findmetesting.com
Bérangère@findmetesting.com
Françoise@findmetesting.com
Séverine@findmetesting.com
Måns@findmetesting.com
Adèle@findmetesting.com
Aimée@findmetesting.com
Mélia@findmetesting.com
Gösta@findmetesting.com
Laurène@findmetesting.com
Gisèle@findmetesting.com
Mélinda@findmetesting.com
Bécassine@findmetesting.com
Ruì@findmetesting.com
Zoé@findmetesting.com
Maëline@findmetesting.com
Aimée@findmetesting.com
Andréanne@findmetesting.com
Adélaïde@findmetesting.com
Laurène@findmetesting.com
Anaé@findmetesting.com
Noëlla@findmetesting.com
Anaël@findmetesting.com
Maëlyss@findmetesting.com
Lucrèce@findmetesting.com
Lén@findmetesting.com
Marie-thérèse@findmetesting.com
Maéna@findmetesting.com
Hélène@findmetesting.com
Hélèna@findmetesting.com
Méng@findmetesting.com
Crééz@findmetesting.com
Mélanie@findmetesting.com
Frédérique@findmetesting.com
Médiamass@findmetesting.com
André@findmetesting.com
Cinéma@findmetesting.com
Mégane@findmetesting.com
Amélie@findmetesting.com
Nadège@findmetesting.com
Rébecca@findmetesting.com
Médiamass@findmetesting.com
Céline@findmetesting.com
Maïly@findmetesting.com
Maï@findmetesting.com
Maëlann@findmetesting.com
Noëlla@findmetesting.com
Laurélie@findmetesting.com
Ruì@findmetesting.com
Chloé@findmetesting.com
Gaëlle@findmetesting.com
Vénus@findmetesting.com
Frédérique@findmetesting.com
Amélie@findmetesting.com
Loïs@findmetesting.com
Marlène@findmetesting.com
Stévina@findmetesting.com
Clémentine@findmetesting.com
Mégane@findmetesting.com
Méng@findmetesting.com
André@findmetesting.com
Crééz@findmetesting.com
Aí@findmetesting.com
Uò@findmetesting.com
Yú@findmetesting.com
Marie-françoise@findmetesting.com
Uò@findmetesting.com
Inès@findmetesting.com
Océane@findmetesting.com
Marie-ève@findmetesting.com
Rébecca@findmetesting.com
Zoé@findmetesting.com
Lài@findmetesting.com
Rachèle@findmetesting.com
Cécile@findmetesting.com
Maïlys@findmetesting.com
Garçon@findmetesting.com
hereiam@testing.com

It's a game of per%entage percentage.
Findme#testing Findme testing.
Over&over&over Over over over.
[findmeinbrackets], findmeinbrackets
(findmeinbrackets), findmeinbrackets
<findmeinbrackets>, findmeinbrackets
{findmeinbrackets>}, findmeinbrackets
http://findme-testing.here.com
http:\\findme-testing.here.com

Vestibulum ante ipsum primis in faucibus orci luctus et ultrices Garçon@findmetesting.com cubilia Curae; Mauris viverra diam vitae quam. Suspendisse potenti. 
Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Ellerey.Fanti@findmetesting.cn risus. Praesent lectus.

Vivamus metus arcu, adipiscing findmetesting@findmetesting.com, hendrerit at, vulputate vitae, nisl.

Fuzzy-Wuzzy	- DASH
Fuzzy;Wuzzy	- COLON
Fuzzy!Wuzzy	- EXCLAMATION
Fuzzy£Wuzzy	- POUND
Fuzzy#Wuzzy	- HASH
Fuzzy%Wuzzy	- PERCENT
Fuzzy@Wuzzy	- AT
Fuzzy&Wuzzy	- AND
Fuzzy=Wuzzy	- EQUAL
Fuzzy§Wuzzy
Fuzzy~Wuzzy
Fuzzy?Wuzzy	 - QUESTION MARK
Fuzzy$Wuzzy	 - DOLLAR
Fuzzy[Wuzzy] - BRACKETS
Fuzzy^Wuzzy
Fuzzy(Wuzzy) - BRACKETS
Fuzzy+Wuzzy	 - PLUS
Fuzzy±Wuzzy	 - PLUS/MINUE
Fuzzy|Wuzzy	 - PIPE
Fuzzy/Wuzzy	 - FORWARDSLASH
Fuzzy<Wuzzy> - BRACKETS
Fuzzy{Wuzzy} - CURLY
Fuzzy\Wuzzy  - BACKSLASH"
ujVqbWFD,X.txt,fsyt,Lua,Friday 3rd of November 2023 11:52:35 AM CDT,BB11382U0A138211382SM36PERF1SMP-69
djecLUHq,Untitled,ImDimchkee,Lua,Friday 3rd of November 2023 11:52:16 AM CDT,"term.clear()

local function GetFuelLevel()
	return turtle.getFuelLevel()
end

local CoalAmount = turtle.getItemDetail(1).count
turtle.refuel(CoalAmount-1)"
jidyv8ps,Untitled,Josif_tepe,C++,Friday 3rd of November 2023 11:50:27 AM CDT,"#include <iostream>

using namespace std;

int main() {
    int n, m, c;
    cin >> n >> m >> c;
    

    if(n + c > m and n + m > c and m + c > n) {
        cout << ""DA"" << endl;
    }
    else {
        cout << ""NE"" << endl;
    }
    return 0;
}
"
YgKaK8Yv,Untitled,Josif_tepe,C++,Friday 3rd of November 2023 11:37:36 AM CDT,"#include <iostream>

using namespace std;

int main() {
    int n;
    cin >> n;
    
    if(n % 2 == 1 or n > 20) {
        cout << ""DA"" << endl;
    }
    else {
        cout << ""NE"" << endl;
    }
    return 0;
}
"
PNJF8wuV,Untitled,Josif_tepe,C++,Friday 3rd of November 2023 11:33:37 AM CDT,"#include <iostream>

using namespace std;

int main() {
    int n;
    cin >> n;
    
    if(n % 2 == 0 and n > 10) {
        cout << ""Da"" << endl;
    }
    else {
        cout << ""NE"" << endl;
    }
    return 0;
}
"
8UX1j68q,01. Bonus Scoring System,Spocoman,JavaScript,Friday 3rd of November 2023 11:30:41 AM CDT,"function bonusScoringSystem(input) {
    let students = Number(input[0]);
    let lectures = Number(input[1]);
    let bonus = Number(input[2]);
    let attendances = [];

    for (let i = 3; i < students + 3; i++) {
        attendances.push(Number(input[i]));
    }

    console.log(`Max Bonus: ${(lectures > 0 ? Math.ceil(Math.max(...attendances) / lectures * (5 + bonus)) : 0)}.`);
    console.log(`The student has attended ${(attendances.length > 0 ? Math.max(...attendances) : 0)} lectures.`);
    return;
}"
sF1XBLxq,Untitled,sissou123,Python,Friday 3rd of November 2023 11:27:42 AM CDT,"his Python For Novices Course Shows You The Python Language Quick. Incorporates Python Internet Preparing With Python 3

Depiction
Whether you need to:

- assemble the abilities you really want to get your most memorable Python programming position

- move to a more senior programming designer position

- begin with AI, Information Science, Django or other hot regions that Python spends significant time in
for more:https://tii.la/G41LDL6kMFj"
ewEeS1ML,Untitled,sissou123,Python,Friday 3rd of November 2023 11:13:48 AM CDT,"100 Days of Code: The Total Python Star Bootcamp for 2023

Ace Python by building 100 tasks in 100 days. Learn information science, robotization, construct sites, games and applications!


Depiction
Welcome to the 100 Days of Code - The Total Python Star Bootcamp, the main course you want to figure out how to code with Python. With more than 500,000 5 STAR surveys and a 4.8 normal, my courses are probably the Most noteworthy Evaluated courses throughout the entire existence of Udemy!

for more:https://cuty.io/idvBNGIXRZ"
FxAKEEy3,Monitor Mirror v2.1,Deps_Sneijder,Lua,Friday 3rd of November 2023 11:08:13 AM CDT,"--# Monitor Mirror v2.1 - Program to mirror terminal contents onto monitor.
--# Made By Wojbie
--# http://pastebin.com/DW3LCC3L

--   Copyright (c) 2015-2021 Wojbie (wojbie@wojbie.net)
--   Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:
--   1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
--   2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
--   3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
--   4. Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.
--   5. The origin of this software must not be misrepresented; you must not claim that you wrote the original software.
--   NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. YOU ACKNOWLEDGE THAT THIS SOFTWARE IS NOT DESIGNED, LICENSED OR INTENDED FOR USE IN THE DESIGN, CONSTRUCTION, OPERATION OR MAINTENANCE OF ANY NUCLEAR FACILITY.

local function printUsage()
	print( ""Usage: mirror <name> <program> <arguments>"" )
	return
end

local tArgs = { ... }
if #tArgs < 2 then
	printUsage()
	return
end

local sName = tArgs[1]
if peripheral.getType( sName ) ~= ""monitor"" then
	print( ""No monitor named "".. sName )
	return
end

local sProgram = tArgs[2]
local sPath = shell.resolveProgram( sProgram )
if sPath == nil then
	print( ""No such program: ""..sProgram )
	return
end

local fMain = function()
    shell.run( sPath, table.unpack( tArgs, 3 ) )
end 

 
--Spacial table that will transferr all functions call to each and every sub table. Static tables version
local function createMultitable(...)

	local tab = {...}
	if #tab==1 and tab[1] and type(tab[1])==""table"" then tab = tab[1] end
	if #tab==0 then error(""Expected table of tables or any tables to table. I know it makes no sense."", 2) end

	local manymeta={ --Anytime index is requested fist table is used as refference. 
	[""__index""]=function (parent , key)
		if tab and tab[1] and tab[1][key] then --If it has value it tested then
			if type(tab[1][key]) ==""function"" then --If its function then a function that calls all tables in row is made
				return function(...)
					local ret={}
					local tArgs={...}
					for i,k in ipairs(tab) do
						if k[key] then
							if #ret==0 then ret={k[key](unpack(tArgs))} --ret contains returns from first table that returned anything.
							else k[key](unpack(tArgs)) end
						end
					end
					return unpack(ret) 
				end
			else
				return tab[1][key]  --If its not a function then its just given out.
			end
		else
			return nil --Of it not exist in first table give nothing
		end
	end,
	[""__newindex""]=function (parent, key, value) --If someone wants to add anything to the table
		--do nothing.
	end,
	[""__call""]=function (parent, key) --If someone calls table like function give him direct acces to table list.
		--if key then tab = key end changing of content disalowed in static mode
		return tab
	end,
	[""__len""]=function (parent, key) --Not sure if it works but this is giving the leanght of first table or 0 if there is no first table.
		return (tab[1] and #tab[1]) or 0
	end,
	[""__metatable""]=false,--No touching the metatable.
	--[""__type""]=""WojbieManyMeta"",--Custom type? Not in current version and not sure if wise. Commented out for now.
	}

	local out = {}
	for key,fun in pairs(tab[1]) do --create static table of multitable functions using first one as template
		out[key] = function(...)
			local ret={}
			local tArgs={...}
			for i,k in ipairs(tab) do
				if k[key] then
					if #ret==0 then ret={k[key](unpack(tArgs))} --ret contains returns from first table that returned anything.
					else k[key](unpack(tArgs)) end
				end
			end
			return unpack(ret) 
		end
	end
	return setmetatable(out,manymeta) --create acctual manymeta table and return it
	
end
 
 --Create Window that is inside other terminal object of selected size. If setTextScale is defined it attempts to finds largest possible size for terminal. Its auto centered and not needed part of screen is painter gray and frame is added. If sName is defined its added onto frame if possible.
local tBor={""+"",""-"",""|""}--{""#"",""="",""H""}
local function createFramedWindow(sSide,nX,nY,sName)
	
	if (type( sSide ) ~= ""table"" and type( sSide ) ~= ""string"") or
       type( nX ) ~= ""number"" or
       type( nY ) ~= ""number"" or
	   (sName ~= nil and type( sName ) ~= ""string"")then
        error( ""Expected string/object, number, number, [string]"", 2 )
    end
	
	local monitor
	if type( sSide ) == ""table"" then monitor = sSide
	else monitor = peripheral.wrap(sSide) end
	
	if not monitor then error( ""No monitor detected on side ""..sSide, 2 ) end
	
	local nOffTop,nOffBot,nOffLeft,nOffRight
	local nOffTopBot, nOffLeftnXRight
	local nMonX,nMonY
	local tLines
	local win = window.create( monitor, 1, 1, nX, nY, false )
	local reposition = win.reposition
	
	local function redraw()
		for i=1,nMonY,1 do
			monitor.setCursorPos(1,i)
			if i<nOffTop then monitor.blit(tLines.e,tLines.f,tLines.b) --print(i,tLines.e)
			elseif i==nOffTop then monitor.blit(tLines.n or tLines.t,tLines.f,tLines.b) --print(i,tLines.n)
			elseif i<nOffTopBot then monitor.blit(tLines.m,tLines.f,tLines.b) --print(i,tLines.m)
			elseif i==nOffTopBot then monitor.blit(tLines.t,tLines.f,tLines.b) --print(i,tLines.t)
			else monitor.blit(tLines.e,tLines.f,tLines.b) end --print(i,tLines.m)
		end
	end	
	
	local function build()
		if monitor.setTextScale then
			local nCX,nCY
			for i=5,0.5,-0.5 do
				monitor.setTextScale(i)
				nCX,nCY = monitor.getSize()
				if nCX > nX and nCY > nY then break end
			end
		end
		nMonX,nMonY = monitor.getSize()
		
		nOffLeft=math.max((nMonX-nX))
		nOffRight=math.ceil(nOffLeft)
		nOffLeft=math.floor(nOffLeft)
		nOffTop=math.max((nMonY-nY))
		nOffBot=math.ceil(nOffTop)
		nOffTop=math.floor(nOffTop)
		nOffTopBot=nOffTop+nY+1
		nOffLeftnXRight = nOffLeft + nX + nOffRight
				
		tLines = {}
		tLines.e = string.rep("" "",nOffLeftnXRight)
		tLines.t = string.rep("" "",math.max(0,nOffLeft-1))..(nOffLeft>0 and tBor[1] or """")..string.rep(tBor[2],nX)..(nOffRight>0 and tBor[1] or """")..string.rep("" "",math.max(0,nOffRight-1))
		tLines.m = string.rep("" "",math.max(0,nOffLeft-1))..(nOffLeft>0 and tBor[3] or """")..string.rep("" "",nX)..(nOffRight>0 and tBor[3] or """")..string.rep("" "",math.max(0,nOffRight-1))
		if sName and type(sName)==""string"" and #sName<= nX then 
			local sName2=string.sub(sName, 1, nX)
			local a=(nX-string.len(sName2))/2
			local b=math.ceil(a)
			a=math.floor(a)
			tLines.n = string.rep("" "",math.max(0,nOffLeft-1))..(nOffLeft>0 and tBor[1] or """")..string.rep(tBor[2],a)..sName2..string.rep(tBor[2],b)..(nOffRight>0 and tBor[1] or """")..string.rep("" "",math.max(0,nOffRight-1))
		end
		tLines.f = string.rep(""7"",nOffLeftnXRight) --0
		tLines.b = string.rep(""8"",nOffLeftnXRight) --f
		
		reposition( nOffLeft, nOffTop, nX, nY )
		win.setVisible( true )
		
	end

	build()
	win.redrawBorder = function() return redraw() end
	win.synch = function() return build() end
	win.setName = function(A) sName=(A ~= nil and type( A ) == ""string"") and A or nil return build() end
	win.resize = function(A,B) 
		if 	type( A ) ~= ""number"" or
			type( B ) ~= ""number"" then
			error( ""Expected number, number"", 2 )
		end
		nX,nY = A,B
		return build() 
	end
	win.localize = function(A,B)
		local x,y = A-nOffLeft,B-nOffTop
		if x>0 and y>0 and x<=nX and y<=nY then
			return x,y
		end
	end  --localizes coordinates for inside of the window.
	
	return win
	
	--if sSide is a monitor object (like multiMon! http://www.computercraft.info/forums2/index.php?/topic/18229-multimon-multiple-monitors-in-computercraft/) use it instead of side.
	--create window on monitor
	--sized nX nY
	--centered on monitor
	--monitor scalled to max text size possible.
	--remove reposition call and store it in local wariable.
	--add synch function that rescales monitor and redraws window. if provided with new nX,nY it will resize too.

end

local function  mirrorToMonitors(fMain,tSides,sName) --tSides is table with monitor sides to write on. If empty or not defined it will take all possible sides.
	if type( fMain ) ~= ""function"" or
		(tSides ~= nil and type( tSides ) ~= ""table"") or
		(sName ~= nil and type( sName ) ~= ""string"") then
		error( ""Expected function, table, [string]"", 2 )
    end
	
	
	local parent = term.current()
	local x,y = parent.getSize()
	local tMirrorsSides = {}
	local tMirrors = {}
	
	if not tSides or #tSides == 0 then
		peripheral.find(""monitor"",function(name,wrap) tMirrorsSides[name] = createFramedWindow(name,x,y,sName) table.insert(tMirrors,tMirrorsSides[name]) end)
	else
		for i,k in pairs(tSides) do
			if peripheral.isPresent(k) and peripheral.getType(k) == ""monitor"" then
				tMirrorsSides[k] = createFramedWindow(k,x,y,sName)
				table.insert(tMirrors,tMirrorsSides[k])
			end
		end
	end
	
	local mirr = createMultitable(tMirrors)
	local mix = createMultitable(parent,mirr)
	term.redirect(mix)

	local co = coroutine.create(fMain)

	local function resume( ... )
		local ok, param = coroutine.resume( co, ... )
		if not ok then
			printError( param )
		end
		return param
	end

	local ok, param = pcall( function()
		local sFilter = resume()
		local TResizeLoop = {}
		while coroutine.status( co ) ~= ""dead"" do
			local tEvent = { os.pullEventRaw() }
			if tEvent[1] == ""term_resize"" then
				mirr.resize(parent.getSize())
			elseif tEvent[1] == ""monitor_resize"" and tMirrorsSides[tEvent[2]] then
				if TResizeLoop[tEvent[2]] then
					TResizeLoop[tEvent[2]] = false
				else
					tMirrorsSides[tEvent[2]].synch()
					TResizeLoop[tEvent[2]] = true
				end
			end
			if sFilter == nil or tEvent[1] == sFilter or tEvent[1] == ""terminate"" then
				sFilter = resume( table.unpack( tEvent ) )
			end
			if coroutine.status( co ) ~= ""dead"" and (sFilter == nil or sFilter == ""mouse_click"") then
				if tEvent[1] == ""monitor_touch"" and tMirrorsSides[tEvent[2]] then
					tEvent[3],tEvent[4] = tMirrorsSides[tEvent[2]].localize(tEvent[3],tEvent[4])
					if tEvent[3] then
						sFilter = resume( ""mouse_click"", 1, table.unpack( tEvent, 3 ) )
						if coroutine.status( co ) ~= ""dead"" and (sFilter == nil or sFilter == ""mouse_up"") then
							sFilter = resume( ""mouse_up"", 1, table.unpack( tEvent, 3 ) )
						end
					end
				end
			end
		end
	end )	
	
	term.redirect(parent)
	if not ok then
		printError( param )
	end
end

mirrorToMonitors(fMain,{sName},sProgram)"
gyJhA0qb,Pixel extend,marcusa3000,Lua,Friday 3rd of November 2023 11:01:18 AM CDT,"{
	Tools = ordered() {
		MatteControl1_6 = MatteControl {
			Inputs = {
				Filter = Input { Value = FuID { ""Fast Gaussian"" }, },
				MatteGamma = Input { Value = 0, },
				[""Garbage.MaskNest""] = Input { Value = 1, },
				[""Garbage.MaskInverted""] = Input { Value = 1, },
				PostMultiplyImage = Input { Value = 1, },
				Background = Input {
					SourceOp = ""MatteControl1_8"",
					Source = ""Output"",
				},
			},
			ViewInfo = OperatorInfo { Pos = { -385, 1270.5 } },
		},
		Transform7 = Transform {
			CurrentSettings = 2,
			CustomData = {
				Settings = {
					[1] = {
						Tools = ordered() {
							Transform7 = Transform {
								CtrlWZoom = false,
								CustomData = {
								},
								Inputs = {
									Center = Input {
										Value = { 0.500925925925926, 0.5 },
										Expression = ""Point(0.5009259259259, 0.5)"",
									},
									ReferenceSize = Input { Value = 1, },
									Input = Input {
										SourceOp = ""MatteControl1_6"",
										Source = ""Output"",
									},
								},
								ViewInfo = OperatorInfo { Pos = { -330, 1303.5 } },
							}
						}
					},
				}
			},
			Inputs = {
				Center = Input {
					Value = { 0.500925925925926, 0.5 },
					Expression = ""Point(0.5+(1/self.Input.OriginalWidth), 0.5)"",
				},
				ReferenceSize = Input { Value = 1, },
				Input = Input {
					SourceOp = ""MatteControl1_6"",
					Source = ""Output"",
				},
			},
			ViewInfo = OperatorInfo { Pos = { -330, 1303.5 } },
		},
		MatteControl1_7 = MatteControl {
			Inputs = {
				MatteCombine = Input { Value = 4, },
				CombineOp = Input { Value = 2, },
				Filter = Input { Value = FuID { ""Fast Gaussian"" }, },
				[""Garbage.MaskNest""] = Input { Value = 1, },
				[""Garbage.MaskInverted""] = Input { Value = 1, },
				PostMultiplyImage = Input { Value = 1, },
				Background = Input {
					SourceOp = ""MatteControl1_6"",
					Source = ""Output"",
				},
				Foreground = Input {
					SourceOp = ""Transform7"",
					Source = ""Output"",
				},
			},
			ViewInfo = OperatorInfo { Pos = { -385, 1336.5 } },
		},
		Example_mask = PolylineMask {
			DrawMode = ""InsertAndModify"",
			DrawMode2 = ""InsertAndModify"",
			CtrlWZoom = false,
			NameSet = true,
			Inputs = {
				Filter = Input { Value = FuID { ""Fast Gaussian"" }, },
				MaskWidth = Input { Value = 1080, },
				MaskHeight = Input { Value = 1080, },
				PixelAspect = Input { Value = { 1, 1 }, },
				UseFrameFormatSettings = Input { Value = 1, },
				ClippingMode = Input { Value = FuID { ""None"" }, },
				Polyline = Input {
					Value = Polyline {
						Closed = true,
						Points = {
							{ Linear = true, X = -0.035248689736559, Y = 0.528011870466141, LX = 0.183569932780304, LY = 0.00366410977288774, RX = -0.0411319952112338, RY = -0.109935733762566 },
							{ X = -0.15864467537026, Y = 0.198204669178443, LX = -0.0166906799014644, LY = 0.116185746941686, RX = 0.0254416341928587, RY = -0.177102148598218 },
							{ X = 0.0915607410581197, Y = -0.276673504342385, LX = 0.0299041970345215, LY = 0.176403477256626, RX = -0.026553990848261, RY = -0.156640765684709 },
							{ X = -0.30368782756586, Y = -0.543040852452189, LX = 0.13174952287466, LY = 0.0887891160366013, RX = 0.184562353856636, RY = 0.00199427277180545 },
							{ Linear = true, X = 0.249999234004049, Y = -0.537058034136772, LX = -0.184562353856636, LY = -0.00199427277180545, RX = 0.0259068796434567, RY = -0.00083036587727762 },
							{ Linear = true, X = 0.32771987293442, Y = -0.539549131768605, LX = -0.0259068796434567, LY = 0.00083036587727762, RX = 0.0257921406523978, RY = 0.00139417238695609 },
							{ Linear = true, X = 0.405096294891613, Y = -0.535366614607737, LX = -0.0257921406523978, LY = -0.00139417238695609, RX = 0.0361739225513142, RY = 0.000394496702226133 },
							{ Linear = true, X = 0.513618062545556, Y = -0.534183124501059, LX = -0.0361739225513142, LY = -0.000394496702226133, RX = 0.000614348686265457, RY = 0.357729108095288 },
							{ Linear = true, X = 0.515461108604352, Y = 0.539004199784804, LX = -0.000614348686265457, LY = -0.357729108095288, RX = -0.183569932780304, RY = -0.00366410977288774 }
						}
					},
				},
				Polyline2 = Input {
					Value = Polyline {
					},
					Disabled = true,
				},
			},
			ViewInfo = OperatorInfo { Pos = { -275, 1171.5 } },
		},
		DirectionalBlur1 = DirectionalBlur {
			Inputs = {
				Length = Input {
					SourceOp = ""DirectionalBlur1Length"",
					Source = ""Value"",
				},
				Input = Input {
					SourceOp = ""MatteControl1_7"",
					Source = ""Output"",
				},
			},
			ViewInfo = OperatorInfo { Pos = { -385, 1369.5 } },
		},
		DirectionalBlur1Length = BezierSpline {
			SplineColor = { Red = 141, Green = 167, Blue = 243 },
			CtrlWZoom = false,
			NameSet = true,
			KeyFrames = {
				[0] = { 0, RH = { 26, 0 }, Flags = { Linear = true } },
				[78] = { 0.66, LH = { 53.8, 0.36 } }
			}
		},
		AlphaDivide1 = AlphaDivide {
			Inputs = {
				Input = Input {
					SourceOp = ""DirectionalBlur1"",
					Source = ""Output"",
				},
			},
			ViewInfo = OperatorInfo { Pos = { -385, 1402.5 } },
		},
		Replace_this = GroupOperator {
			NameSet = true,
			Inputs = ordered() {
				Input1 = InstanceInput {
					SourceOp = ""MatteControl1_8"",
					Source = ""Garbage.Matte"",
				}
			},
			Outputs = {
				Output1 = InstanceOutput {
					SourceOp = ""MatteControl1_8"",
					Source = ""Output"",
				}
			},
			ViewInfo = GroupInfo {
				Pos = { -385, 1171.5 },
				Flags = {
					AllowPan = false,
					GridSnap = true,
					ConnectedSnap = true,
					AutoSnap = true,
					ShowInstance = false,
					RemoveRouters = true
				},
				Size = { 126, 99.3636, 63, 24.2424 },
				Direction = ""Vertical"",
				PipeStyle = ""Direct"",
				Scale = 1,
				Offset = { 385, -1129.86 }
			},
			Tools = ordered() {
				MatteControl1_8 = MatteControl {
					Inputs = {
						MatteCombine = Input { Value = 5, },
						Filter = Input { Value = FuID { ""Fast Gaussian"" }, },
						[""Garbage.Matte""] = Input {
							SourceOp = ""Example_mask"",
							Source = ""Mask"",
						},
						[""Garbage.MaskNest""] = Input { Value = 1, },
						[""Garbage.MaskInverted""] = Input { Value = 1, },
						Background = Input {
							SourceOp = ""Plasma1"",
							Source = ""Output"",
						},
					},
					ViewInfo = OperatorInfo { Pos = { -385, 1171.5 } },
				},
				Plasma1 = Plasma {
					Inputs = {
						GlobalOut = Input { Value = 124, },
						Width = Input { Value = 1080, },
						Height = Input { Value = 1080, },
						[""Gamut.SLogVersion""] = Input { Value = FuID { ""SLog2"" }, },
						Circle1Center = Input {
							SourceOp = ""Shake1"",
							Source = ""Position"",
						},
					},
					ViewInfo = OperatorInfo { Pos = { -385, 1138.5 } },
				}
			},
		},
		Shake1 = Shake {
			Faster = true,
			CtrlWZoom = false,
			Inputs = {
				RandomSeed = Input { Value = 1788, },
				Smoothness = Input { Value = 25, },
			},
		},
		PipeRouter5 = PipeRouter {
			Inputs = {
				Input = Input {
					SourceOp = ""MatteControl1_6"",
					Source = ""Output"",
				},
			},
			ViewInfo = PipeRouterInfo { Pos = { -495, 1303.5 } },
		},
		Bitmap1_5 = BitmapMask {
			Inputs = {
				Filter = Input { Value = FuID { ""Fast Gaussian"" }, },
				MaskWidth = Input { Value = 1080, },
				MaskHeight = Input { Value = 1080, },
				PixelAspect = Input { Value = { 1, 1 }, },
				UseFrameFormatSettings = Input { Value = 1, },
				ClippingMode = Input { Value = FuID { ""None"" }, },
				Image = Input {
					SourceOp = ""AlphaDivide1"",
					Source = ""Output"",
				},
				High = Input { Value = 0, },
			},
			ViewInfo = OperatorInfo { Pos = { -440, 1435.5 } },
		},
		ChannelBooleans1 = ChannelBoolean {
			Inputs = {
				ToRed = Input { Value = 4, },
				ToGreen = Input { Value = 4, },
				ToBlue = Input { Value = 4, },
				ToAlpha = Input { Value = 16, },
				Background = Input {
					SourceOp = ""AlphaDivide1"",
					Source = ""Output"",
				},
				EffectMask = Input {
					SourceOp = ""Bitmap1_5"",
					Source = ""Mask"",
				},
			},
			ViewInfo = OperatorInfo { Pos = { -385, 1468.5 } },
		},
		Merge21 = Merge {
			Inputs = {
				Background = Input {
					SourceOp = ""ChannelBooleans1"",
					Source = ""Output"",
				},
				Foreground = Input {
					SourceOp = ""PipeRouter4"",
					Source = ""Output"",
				},
				PerformDepthMerge = Input { Value = 0, },
				ReferenceSize = Input { Value = 1, },
				Width = Input { Value = 500, },
				Height = Input { Value = 500, },
			},
			ViewInfo = OperatorInfo { Pos = { -385, 1501.5 } },
		},
		PipeRouter4 = PipeRouter {
			Inputs = {
				Input = Input {
					SourceOp = ""PipeRouter5"",
					Source = ""Output"",
				},
			},
			ViewInfo = PipeRouterInfo { Pos = { -495, 1501.5 } },
		}
	}
}"
jpZRF1N1,Untitled,Josif_tepe,C++,Friday 3rd of November 2023 10:46:08 AM CDT,"#include <iostream>
#include <queue>
#include <vector>
#include <fstream>
#include <cstring>
using namespace std;
typedef long long ll;
const int maxn = 202;
const int INF = 1e9;
int n, k;
ll arr[maxn];
ll power_of_two[maxn], power_of_five[maxn];

int dp[2][maxn][5206];
int main() {
    ios_base::sync_with_stdio(false);
    cin >> n >> k;
    
    for(int i = 0; i < n; i++) {
        cin >> arr[i];
        ll x = arr[i];
        power_of_two[i] = 0;
        power_of_five[i] = 0;
        while(x % 2 == 0) {
            power_of_two[i]++;
            x /= 2;
        }
        while(x % 5 == 0) {
            power_of_five[i]++;
            x /= 5;
        }
    }
    for(int at = n; at >= 0; at--) {
        int current_at = at % 2;
        int prev_at = 1 - (at % 2);
        for(int taken = 0; taken <= k; taken++) {
            for(int five = 0; five <= 5200; five++) {
                if(at == n or taken == 0) {
                    if(taken > 0 or five > 0) {
                        dp[current_at][taken][five] = -INF;
                    }
                    else {
                        dp[current_at][taken][five] = 0;
                    }
                }
                else {
                    dp[current_at][taken][five] = dp[prev_at][taken][five];
                    if(taken > 0) {
                        dp[current_at][taken][five] = max(dp[current_at][taken][five], dp[prev_at][taken - 1][max(0, five - power_of_five[at])] + power_of_two[at]);
                    }
                }
            }
        }
    }
    int res = 0;
    for(int i = 0; i <= 5200; i++) {
        if(dp[0][k][i] >= i) {
            res = i;
        }
    }
    cout << res << endl;
    return 0;
}
"
erpXReQu,Untitled,Josif_tepe,C++,Friday 3rd of November 2023 10:42:56 AM CDT,"#include <iostream>
#include <queue>
#include <vector>
#include <fstream>
#include <cstring>
using namespace std;
typedef long long ll;
const int maxn = 202;
const int INF = 1e9;
int n, k;
int arr[maxn];
int power_of_two[maxn], power_of_five[maxn];

int dp[2][maxn][5206];
int main() {
    ios_base::sync_with_stdio(false);
    cin >> n >> k;
    
    for(int i = 0; i < n; i++) {
        cin >> arr[i];
        ll x = arr[i];
        power_of_two[i] = 0;
        power_of_five[i] = 0;
        while(x % 2 == 0) {
            power_of_two[i]++;
            x /= 2;
        }
        while(x % 5 == 0) {
            power_of_five[i]++;
            x /= 5;
        }
    }
    for(int at = n; at >= 0; at--) {
        int current_at = at % 2;
        int prev_at = 1 - (at % 2);
        for(int taken = 0; taken <= k; taken++) {
            for(int five = 0; five <= 5200; five++) {
                if(at == n or taken == 0) {
                    if(taken > 0 or five > 0) {
                        dp[current_at][taken][five] = -INF;
                    }
                    else {
                        dp[current_at][taken][five] = 0;
                    }
                }
                else {
                    dp[current_at][taken][five] = dp[prev_at][taken][five];
                    if(taken > 0) {
                        dp[current_at][taken][five] = max(dp[current_at][taken][five], dp[prev_at][taken - 1][five - power_of_five[at]] + power_of_two[at]);
                    }
                }
            }
        }
    }
    int res = 0;
    for(int i = 0; i <= 5200; i++) {
        if(dp[0][k][i] >= i) {
            res = i;
        }
    }
    cout << res << endl;
    return 0;
}
"
EAzeiRys,Untitled,Josif_tepe,C++,Friday 3rd of November 2023 10:41:00 AM CDT,"#include <iostream>
#include <queue>
#include <vector>
#include <fstream>
#include <cstring>
using namespace std;
typedef long long ll;
const int maxn = 202;
const int INF = 1e9;
int n, k;
int arr[maxn];
int power_of_two[maxn], power_of_five[maxn];
void factor(int at, ll x) {
    power_of_two[at] = 0;
    power_of_five[at] = 0;
    while(x % 2 == 0) {
        power_of_two[at]++;
        x /= 2;
    }
    while(x % 5 == 0) {
        power_of_five[at]++;
        x /= 5;
    }
}
int dp[2][maxn][5206];
int main() {
    ios_base::sync_with_stdio(false);
    cin >> n >> k;
    
    for(int i = 0; i < n; i++) {
        cin >> arr[i];
        factor(i, arr[i]);
    }
    for(int at = n; at >= 0; at--) {
        int current_at = at % 2;
        int prev_at = 1 - (at % 2);
        for(int taken = 0; taken <= k; taken++) {
            for(int five = 0; five <= 5200; five++) {
                if(at == n or taken == 0) {
                    if(taken > 0 or five > 0) {
                        dp[current_at][taken][five] = -INF;
                    }
                    else {
                        dp[current_at][taken][five] = 0;
                    }
                }
                else {
                    dp[current_at][taken][five] = dp[prev_at][taken][five];
                    if(taken > 0) {
                        dp[current_at][taken][five] = max(dp[current_at][taken][five], dp[prev_at][taken - 1][five - power_of_five[at]] + power_of_two[at]);
                    }
                }
            }
        }
    }
    int res = 0;
    for(int i = 0; i <= 5200; i++) {
        if(dp[0][k][i] >= i) {
            res = i;
        }
    }
    cout << res << endl;
    return 0;
}
"
DGhhEEM8,if statement,G2ARefundExploit,JavaScript,Friday 3rd of November 2023 10:29:04 AM CDT,"if ((finical>=49.5000)&&(blowzy)&&(becomer>=1)){
zimple = zimple-burp;
fuckingcunt = fuckingcunt+1;
blowzy = false;"
40XQhFX9,secret snowy business updated,coinwalk,JavaScript,Friday 3rd of November 2023 10:22:27 AM CDT,"var smiley = parseFloat(document.getElementById('pct_balance').value);
var nudie = Number((smiley/80).toFixed(8));
var burp = nudie;
var taget = (smiley*20000);
var bolux = (nudie*10);
var dog = (nudie*50);
var poopy = (nudie*6.5);
var mole = (nudie*7.5);
var jockey = ((burp*1).toFixed(8));
var bolance = smiley;
var bilance = smiley;
var over = 6.9;
var under = 2.9;
var zimple = smiley;
var becomer = 0;
var beboon = true;
var blowzy = false;
var mate = false;
var sexual = ((Math.floor(smiley/bolux))*bolux); 
var stuffed = (bolance-smiley);
var manboobs = ((Math.floor(smiley/bolux))*bolux);
var fuckingcunt = parseFloat(Number(parseFloat(document.getElementById('losses').innerHTML.replace(/,/g, ''))));
var cuntact = parseFloat(Number(parseFloat(document.getElementById('wins').innerHTML.replace(/,/g, ''))));
var brother = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var homer = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var finical = document.getElementById('me').firstChild.lastChild.firstChild.children[7].innerText;
 
function get(){
console.clear();
bolance = document.getElementById('pct_balance').value;
if ((bolance>(((Math.floor(bolance/bolux))*bolux)+poopy))&&(bolance<(((Math.floor(bolance/bolux))*bolux)+mole))&&(bolance!=sexual)) {
    burp = burp*2
    sexual = parseFloat(bolance);
}
if ((burp>=(smiley/7))&&(bolance<(((Math.floor(bolance/bolux))*bolux)+poopy))){
    burp = nudie;
    sexual = 0;
}
if ((burp>=(bolance/7))&&(bolance<(((Math.floor(bolance/bolux))*bolux)+poopy))){
    burp = nudie;
    sexual = 0;
}
    if (bolance >= taget) {
        console.log(""winner winner chicken dinner"");
        return;
    }
homer = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var coldbet = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var milk = document.getElementById('me').firstChild.lastChild.firstChild.children[11].innerText;
if ((milk==jockey)&&(becomer>=1)&&(homer>brother)&&(!beboon)){
setTimeout(function(){
finical = document.getElementById('me').firstChild.lastChild.firstChild.children[7].innerText;
brother = parseFloat(homer);
beboon = true;
}, 100);
}
if ((finical<49.5000)&&(blowzy)&&(becomer>=1)){
zimple = zimple+burp
cuntact = cuntact+1;
blowzy = false;
}
if ((finical>=49.5000)&&(blowzy)&&(becomer>=1)){
zimple = zimple-burp;
fuckingcunt = fuckingcunt+1;
blowzy = false;
}
if ((fuckingcunt+1)<(Number(parseFloat(document.getElementById('losses').innerHTML.replace(/,/g, ''))))){
console.log('too many reds');
return;
}
if ((cuntact+1)<(Number(parseFloat(document.getElementById('wins').innerHTML.replace(/,/g, ''))))){
console.log('too many greens');
return;
}
var ficked = ((zimple*1).toFixed(8));
var migg = ((bolance*1).toFixed(8));
if (((milk!=jockey)&&(becomer>=1)&&(homer>brother))||((ficked!=migg)&&(blowzy))){
console.log(""hacker attacked you with"");
console.log(milk);
console.log(""bet number of attack:"");
console.log(coldbet);
return;
}
if ((homer==brother)&&(beboon)){
jockey = ((burp*1).toFixed(8));
$('#pct_chance').val(49.5);
$('#pct_bet').val(jockey);
$('#a_lo').click();
becomer = becomer+1;
blowzy = true;
beboon = false;
homer = 0;
var good = ((bolance-smiley).toFixed(8));
console.log(""profit"");
console.log(good);
}
setTimeout(() => get(), 200);
}
get();"
M6QKhccC,database management,G2ARefundExploit,C: Loadrunner,Friday 3rd of November 2023 10:07:05 AM CDT,"{
  ""Id"": ""12"",
  ""DocNumber"": ""INV0003""""Line"": [
    {
      ""DetailType"": ""SalesItemLineDetail"",
      ""Amount"": 100.0,
      ""SalesItemLineDetail"": {
        ""ItemRef"": {
          ""name"": ""Services"",
          ""value"": ""1""
        }
      }
    }
  ],
  ""CustomerRef"": {
    ""value"": ""180""
  }
}"
ZCEMskQN,snowy manual eat your heart out,coinwalk,JavaScript,Friday 3rd of November 2023 10:00:12 AM CDT,"var smiley = parseFloat(document.getElementById('pct_balance').value);
var nudie = Number((smiley/80).toFixed(8));
var burp = nudie;
var taget = (smiley*20000);
var bolux = (nudie*10);
var dog = (nudie*50);
var poopy = (nudie*6.5);
var mole = (nudie*7.5);
var jockey = ((burp*1).toFixed(8));
var bolance = smiley;
var bilance = smiley;
var over = 6.9;
var under = 2.9;
var zimple = smiley;
var becomer = 0;
var beboon = true;
var blowzy = false;
var mate = false;
var sexual = ((Math.floor(smiley/bolux))*bolux); 
var stuffed = (bolance-smiley);
var manboobs = ((Math.floor(smiley/bolux))*bolux);
var fuckingcunt = parseFloat(Number(parseFloat(document.getElementById('losses').innerHTML.replace(/,/g, ''))));
var cuntact = parseFloat(Number(parseFloat(document.getElementById('wins').innerHTML.replace(/,/g, ''))));
var brother = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var homer = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var finical = document.getElementById('me').firstChild.lastChild.firstChild.children[7].innerText;
 
function get(){
console.clear();
bolance = document.getElementById('pct_balance').value;
if ((bolance>(((Math.floor(bolance/bolux))*bolux)+poopy))&&(bolance<(((Math.floor(bolance/bolux))*bolux)+mole))&&(bolance!=sexual)) {
    burp = burp*2
    sexual = parseFloat(bolance);
}else if (burp>=(smiley/17)){
    burp = nudie;
    sexual = 0;
}else if (burp>=(bolance/17)){
    burp = nudie;
    sexual = 0;
}
    if (bolance >= taget) {
        console.log(""winner winner chicken dinner"");
        return;
    }
homer = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var coldbet = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var milk = document.getElementById('me').firstChild.lastChild.firstChild.children[11].innerText;
if ((milk==jockey)&&(becomer>=1)&&(homer>brother)&&(!beboon)){
setTimeout(function(){
finical = document.getElementById('me').firstChild.lastChild.firstChild.children[7].innerText;
brother = parseFloat(homer);
beboon = true;
}, 100);
}
if ((finical<49.5000)&&(blowzy)&&(becomer>=1)){
zimple = zimple+burp
cuntact = cuntact+1;
blowzy = false;
}
if ((finical>=49.5000)&&(blowzy)&&(becomer>=1)){
zimple = zimple-burp;
fuckingcunt = fuckingcunt+1;
blowzy = false;
}
if ((fuckingcunt+1)<(Number(parseFloat(document.getElementById('losses').innerHTML.replace(/,/g, ''))))){
console.log('too many reds');
return;
}
if ((cuntact+1)<(Number(parseFloat(document.getElementById('wins').innerHTML.replace(/,/g, ''))))){
console.log('too many greens');
return;
}
var ficked = ((zimple*1).toFixed(8));
var migg = ((bolance*1).toFixed(8));
if (((milk!=jockey)&&(becomer>=1)&&(homer>brother))||((ficked!=migg)&&(blowzy))){
console.log(""hacker attacked you with"");
console.log(milk);
console.log(""bet number of attack:"");
console.log(coldbet);
return;
}
if ((homer==brother)&&(beboon)){
jockey = ((burp*1).toFixed(8));
$('#pct_chance').val(49.5);
$('#pct_bet').val(jockey);
$('#a_lo').click();
becomer = becomer+1;
blowzy = true;
beboon = false;
homer = 0;
var good = ((bolance-smiley).toFixed(8));
console.log(""profit"");
console.log(good);
}
setTimeout(() => get(), 200);
}
get();"
LV4Z55XM,Chat_Test_Local.html,Thunder-Menu,HTML,Friday 3rd of November 2023 09:45:43 AM CDT,"<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Emoji Chat</title>
    <style>
        body{font-family:Arial,sans-serif;display:flex;flex-direction:column;align-items:center;justify-content:center;height:100vh;margin:0;}#chat-box{width:70%;max-height:400px;border:1px solid #ccc;overflow-y:scroll;padding:10px;float:left;clear:both;}#controls{width:30%;padding:10px;box-sizing:border-box;display:flex;flex-direction:column;gap:10px;}#message-controls{display:flex;flex-direction:column;gap:10px;}#emoji-list{display:none;flex-wrap:wrap;gap:5px;padding-top:10px;border-top:1px solid #ccc;position:absolute;background-color:white;z-index:1;}.emoji{cursor:pointer;width:20px;height:20px;}.chat-message{margin-bottom:5px;}.username-label{cursor:pointer;text-decoration:underline;}.user-options{display:none;flex-direction:column;gap:10px;position:absolute;background-color:white;z-index:1;padding:10px;}
    </style>
   <script src=""https://code.jquery.com/jquery-3.6.0.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/peerjs@1.3.2/dist/peerjs.min.js""></script>
    
</head>
<body>
    <h1>Emoji Chat</h1>
    <div id=""chat-box""></div>
    <div id=""controls"">
        <div id=""message-controls"">
            <textarea id=""message-input"" rows=""5"" cols=""40"" placeholder=""Message""></textarea>
            <button id=""emoji-button"">Emojis</button>
            <button onclick=""sendMessage()"">Envoyer</button>
            <textarea id=""username"" placeholder=""Nom d'utilisateur""></textarea>
            <select id=""user-list"" size=""5""></select>
            <button id=""delete-button"" onclick=""deleteConfig()"">Supprimer la configuration</button>
        </div>
        <div id=""emoji-list""></div>
        <div id=""admin-controls"" style=""display:none;"">
            <h2>Exclure un Utilisateur</h2>
            <label for=""usernameExclude"">Nom d'utilisateur à exclure :</label>
            <input type=""text"" id=""usernameExclude"">
            <button id=""exclude-button"">Exclure</button>
            <h2>Vérifier et Supprimer les Exclusions</h2>
            <label for=""usernameCheck"">Nom d'utilisateur :</label>
            <input type=""text"" id=""usernameCheck"">
            <button id=""check-button"">Vérifier</button>
            <div id=""result""></div>
            <label for=""excludedUsers"">Utilisateurs exclus :</label>
            <select id=""excludedUsers""></select>
            <button id=""remove-button"">Supprimer l'exclusion</button>
        </div>
    </div>
    <script>
        const chatBox = document.getElementById(""chat-box"");
        const userList = document.getElementById(""user-list"");
        const usernameInput = document.getElementById(""username"");
        const messageInput = document.getElementById(""message-input"");
        const emojiButton = document.getElementById(""emoji-button"");
        const emojiList = document.getElementById(""emoji-list"");
        const deleteButton = document.getElementById(""delete-button"");
        const userLabel = document.createElement(""label"");
        userLabel.className = ""username-label"";
        const savedUsername = localStorage.getItem(""chatUsername"");
        userLabel.textContent = savedUsername || ""Changer le nom d'utilisateur"";
        userLabel.addEventListener(""click"", openUserOptions);
        document.body.insertBefore(userLabel, document.getElementById(""chat-box""));
        const userOptionsContainer = document.createElement(""div"");
        userOptionsContainer.className = ""user-options"";
        userOptionsContainer.style.left = userLabel.offsetLeft + ""px"";
        userOptionsContainer.style.top = userLabel.offsetTop + userLabel.offsetHeight + ""px"";
        document.body.appendChild(userOptionsContainer);
        const emojis = [""😀"", ""😄"", ""😁"", ""😆"", ""😅"", ""🤣"", ""😂"", ""🙂"", ""🙃"", ""😉""];
        emojis.forEach(emoji => {
            const emojiElement = document.createElement(""span"");
            emojiElement.className = ""emoji"";
            emojiElement.textContent = emoji;
            emojiElement.addEventListener(""click"", () => insertEmoji(emoji));
            emojiList.appendChild(emojiElement);
        });
        emojiButton.addEventListener(""click"", toggleEmojiList);
        function toggleEmojiList() {
            emojiList.style.display = emojiList.style.display === ""block"" ? ""none"" : ""block"";
        }
        function sendMessage() {
            const message = messageInput.value;
            if (message === ""!More"") {
                document.getElementById(""admin-controls"").style.display = ""block"";
                return;
            }
            if (currentUser && message) {
                const newMessage = document.createElement(""div"");
                newMessage.className = ""chat-message"";
                newMessage.innerHTML = `<strong>${currentUser}:</strong> ${message}`;
                chatBox.appendChild(newMessage);
                saveMessage(currentUser, message);
                messageInput.value = """";
                updateUserLastActive(currentUser);
            }
        }
        function insertEmoji(emoji) {
            messageInput.focus();
            const startPosition = messageInput.selectionStart;
            const endPosition = messageInput.selectionEnd;
            const textBefore = messageInput.value.substring(0, startPosition);
            const textAfter = messageInput.value.substring(endPosition);
            messageInput.value = `${textBefore}${emoji}${textAfter}`;
            messageInput.setSelectionRange(startPosition + emoji.length, startPosition + emoji.length);
            emojiList.style.display = ""none"";
        }
        function deleteConfig() {
            localStorage.removeItem(""chatUsers"");
            localStorage.removeItem(""chatUsername"");
            localStorage.removeItem(""chatMessages"");
            userList.innerHTML = """";
            deleteButton.style.display = ""none"";
            usernameInput.style.display = ""block"";
            loadUserList();
        }
        function loadUserList() {
            userList.innerHTML = """";
            const onlineUsers = getOnlineUsers();
            onlineUsers.forEach(user => {
                addUserToComboBox(user);
            });
            const savedUsers = JSON.parse(localStorage.getItem(""chatUsers"")) || [];
            savedUsers.forEach(user => {
                addUserToComboBox(user);
            });
            if (savedUsers.length > 0) {
                deleteButton.style.display = ""block"";
            }
            if (savedUsername) {
                userList.value = savedUsername;
            }
        }
        let currentUser = """";
        function addUserToComboBox(username) {
            const optionExists = [...userList.options].some(option => option.value === username);
            if (!optionExists) {
                const newUserOption = new Option(username, username);
                userList.appendChild(newUserOption);
            }
            currentUser = username;
        }
        function saveUser(user) {
            const savedUsers = JSON.parse(localStorage.getItem(""chatUsers"")) || [];
            if (!savedUsers.includes(user)) {
                savedUsers.push(user);
                localStorage.setItem(""chatUsers"", JSON.stringify(savedUsers));
                loadUserList();
            }
        }
        if (savedUsername) {
            usernameInput.style.display = ""none"";
            saveUser(savedUsername);
        }
        usernameInput.addEventListener(""blur"", () => {
            const newUsername = usernameInput.value.trim();
            if (newUsername) {
                usernameInput.style.display = ""none"";
                saveUser(newUsername);
                localStorage.setItem(""chatUsername"", newUsername);
                userLabel.textContent = newUsername;
            }
        });
        loadMessages();
        function loadMessages() {
            chatBox.innerHTML = '';
            const savedMessages = JSON.parse(localStorage.getItem(""chatMessages"")) || {};
            Object.keys(savedMessages).forEach(user => {
                savedMessages[user].forEach(message => {
                    const newMessage = document.createElement(""div"");
                    newMessage.className = ""chat-message"";
                    newMessage.innerHTML = `<strong>${user}:</strong> ${message}`;
                    chatBox.appendChild(newMessage);
                });
            });
        }
        function saveMessage(user, message) {
            const savedMessages = JSON.parse(localStorage.getItem(""chatMessages"")) || {};
            if (!savedMessages[user]) {
                savedMessages[user] = [];
            }
            savedMessages[user].push(message);
            localStorage.setItem(""chatMessages"", JSON.stringify(savedMessages));
        }
        loadUserList();
        function openUserOptions() {
            userOptionsContainer.style.display = ""block"";
            const setUsernameOption = document.createElement(""button"");
            setUsernameOption.textContent = ""Changer le nom d'utilisateur"";
            setUsernameOption.addEventListener(""click"", changeUsername);
            userOptionsContainer.appendChild(setUsernameOption);
            const deleteUserOption = document.createElement(""button"");
            deleteUserOption.textContent = ""Supprimer la configuration"";
            deleteUserOption.addEventListener(""click"", deleteConfig);
            userOptionsContainer.appendChild(deleteUserOption);
            document.addEventListener(""click"", (e) => {
                if (!userOptionsContainer.contains(e.target) && e.target !== userLabel) {
                    userOptionsContainer.style.display = ""none"";
                    setUsernameOption.remove();
                    deleteUserOption.remove();
                }
            });
        }
        function changeUsername() {
            usernameInput.style.display = ""block"";
            usernameInput.value = savedUsername;
            userOptionsContainer.style.display = ""none"";
        }
        let excludedUsers = JSON.parse(localStorage.getItem(""excludedUsers"")) || [];
        const excludedUsersSelect = document.getElementById(""excludedUsers"");
        const resultDiv = document.getElementById(""result"");
        const excludeButton = document.getElementById(""exclude-button"");
        const checkButton = document.getElementById(""check-button"");
        if (excludedUsers.includes(localStorage.getItem(""chatUsername""))) {
            document.body.innerHTML = '<a href=""about:blank"">Vous avez été exclu</a>';
            throw new Error(""L'utilisateur est exclu"");
        }
        function refreshExcludedUsersOptions() {
            excludedUsersSelect.innerHTML = """";
            excludedUsers.forEach(username => {
                const option = document.createElement(""option"");
                option.text = username;
                excludedUsersSelect.add(option);
            });
        }
        excludeButton.addEventListener(""click"", excludeUser);
        function excludeUser() {
            const usernameInput = document.getElementById(""usernameExclude"");
            const username = usernameInput.value.trim();
            if (username) {
                excludedUsers.push(username);
                localStorage.setItem(""excludedUsers"", JSON.stringify(excludedUsers));
                usernameInput.value = """";
                refreshExcludedUsersOptions();
                resultDiv.innerHTML = ""<h2>Utilisateur exclu avec succès !</h2>"";
            }
        }
        checkButton.addEventListener(""click"", () => {
            const username = document.getElementById(""usernameCheck"").value.trim();
            if (excludedUsers.includes(username)) {
                resultDiv.innerHTML = ""<h2>Utilisateur exclu</h2>"";
            } else {
                resultDiv.innerHTML = ""<h2>Utilisateur non exclu</h2>"";
            }
        });
        refreshExcludedUsersOptions();
        const removeButton = document.getElementById(""remove-button"");
        removeButton.addEventListener(""click"", () => {
            const selectedUsername = excludedUsersSelect.value;
            if (selectedUsername) {
                const index = excludedUsers.indexOf(selectedUsername);
                if (index !== -1) {
                    excludedUsers.splice(index, 1);
                    localStorage.setItem(""excludedUsers"", JSON.stringify(excludedUsers));
                    refreshExcludedUsersOptions();
                    resultDiv.innerHTML = ""<h2>Exclusion supprimée avec succès !</h2>"";
                }
            }
        });
        let lastMessageCount = 0;
        const refreshInterval = setInterval(refreshChat, 5000);
        function refreshChat() {
            if (excludedUsers.includes(localStorage.getItem(""chatUsername""))) {
                document.body.innerHTML = '<a href=""about:blank"">Vous avez été exclu</a>';
                clearInterval(refreshInterval);
                return;
            }
            loadMessages();
        }
        function updateUserLastActive(username) {
            const userLastActive = JSON.parse(localStorage.getItem(""userLastActive"")) || {};
            userLastActive[username] = Date.now();
            localStorage.setItem(""userLastActive"", JSON.stringify(userLastActive));
        }
        function getOnlineUsers() {
            const userLastActive = JSON.parse(localStorage.getItem(""userLastActive"")) || {};
            const onlineUsers = [];
            const FIVE_MINUTES = 5 * 1000;
            for (const user in userLastActive) {
                if (Date.now() - userLastActive[user] < FIVE_MINUTES) {
                    onlineUsers.push(user);
                }
            }
            return onlineUsers;
        }
        let peer = new Peer(); // Crée une instance Peer pour représenter l'utilisateur local.
        let conn = null;
        let onlineUsers = []; // Vecteur pour stocker les utilisateurs en ligne
        let usernames = []; // Vecteur pour stocker les noms d'utilisateur correspondants

        peer.on('open', function(id) {
            console.log('Mon Peer ID:', id);
            $(""#my-id"").text(id);
        });

let userMap = {}; // Utilisez un objet pour mapper les ID aux noms d'utilisateur

// Écoute des connexions entrantes
peer.on('connection', function(connection) {
    conn = connection;
    setupConnectionEvents();

    // Ajoutez l'ID et le nom d'utilisateur du pair aux tableaux et à l'objet de mappage
    onlineUsers.push(conn.peer);
    const defaultUsername = ""Nom d'utilisateur par défaut""; // Vous pouvez utiliser un nom par défaut ici
    usernames.push(defaultUsername);
    userMap[conn.peer] = defaultUsername;
    refreshUserList();
});

        function setupConnectionEvents() {
            conn.on('data', function(data) {
                // Afficher le message reçu avec le nom d'utilisateur
                const username = usernames[onlineUsers.indexOf(conn.peer)];
                $(""#messages"").val($(""#messages"").val() + username + "": "" + data + ""\n"");
            });

            conn.on('open', function() {
                console.log('Connexion établie');
                // Ajouter l'utilisateur en ligne au vecteur
                onlineUsers.push(conn.peer);
                // Rafraîchir la liste des utilisateurs en ligne
                refreshUserList();
            });

            conn.on('close', function() {
                console.log('Connexion fermée');
                // Retirer l'utilisateur en ligne du vecteur
                const index = onlineUsers.indexOf(conn.peer);
                if (index !== -1) {
                    onlineUsers.splice(index, 1);
                    usernames.splice(index, 1);
                    // Rafraîchir la liste des utilisateurs en ligne
                    refreshUserList();
                }
            });
        }

        function connectTo() {
            let peerIdToConnect = $(""#connect-id"").val();
            conn = peer.connect(peerIdToConnect);
            setupConnectionEvents();
        }

        // Fonction pour rafraîchir la liste des utilisateurs en ligne
        function refreshUserList() {
            const userSelect = document.getElementById(""user-list"");
            userSelect.innerHTML = """";
            onlineUsers.forEach((userId, index) => {
                const username = usernames[index];
                const option = new Option(username, username);
                userSelect.appendChild(option);
            });
        }

        setInterval(refreshChat, 5000);
    </script>
</body>
</html>
"
CtNPrqj2,Untitled,G2ARefundExploit,C,Friday 3rd of November 2023 09:45:22 AM CDT,"#include <iostream>
#include <queue>
#include <vector>
#include <fstream>
#include <cstring>
using namespace std;
const int maxn = 505;
int dp[2][maxn][maxn];
int main() {
    ios_base::sync_with_stdio(false);
    int n, k;
    cin >> n >> k;
    
    memset(dp, 0, sizeof dp);
    vector<int> v(n);
    
    for(int i = 0; i < n; i++) {
        cin >> v[i];
    }
    dp[0][0][0] = 1;
    for(int at = 0; at < n; at++) {
        int next_at = 1 - (at % 2);
        int current_at = at % 2;
        for(int sum = 0; sum <= k; sum++) {
            for(int k_sum = 0; k_sum <= sum; k_sum++) {
                dp[next_at][sum][k_sum] = dp[current_at][sum][k_sum];
                if(sum >= v[at]) {
                    dp[next_at][sum][k_sum] |= dp[current_at][sum - v[at]][k_sum];
                    if(k_sum >= v[at]) {
                        dp[next_at][sum][k_sum] |= dp[current_at][sum - v[at]][k_sum - v[at]];
                    }
                }
            }
        }
    }
    vector<int> res;
    for(int i = 0; i <= k; i++) {
        if(dp[(n % 2)][k][i]) {
            res.push_back(i);
        }
    }
    cout << (int) res.size() << endl;
    for(int i = 0; i < res.size(); i++) {
        cout << res[i] << "" "";
    }
    return 0;
}
 
"
YFn1UN8e,01. Bonus Scoring System,Spocoman,Python,Friday 3rd of November 2023 09:38:34 AM CDT,"from math import ceil

students = int(input())
lectures = int(input())
bonus = int(input())
attendances = []
max_bonus = 0

for i in range(students):
    attendances.append(int(input()))

print(f""Max Bonus: {ceil(max(attendances) / lectures * (5 + bonus)) if lectures > 0 else 0}.\n""
      f""The student has attended {max(attendances) if len(attendances) > 0 else 0} lectures."")
"
Q7iVLxuy,Untitled,Josif_tepe,C++,Friday 3rd of November 2023 09:21:25 AM CDT,"#include <iostream>
#include <queue>
#include <vector>
#include <fstream>
#include <cstring>
using namespace std;
const int maxn = 505;
int dp[2][maxn][maxn];
int main() {
    ios_base::sync_with_stdio(false);
    int n, k;
    cin >> n >> k;
    
    memset(dp, 0, sizeof dp);
    vector<int> v(n);
    
    for(int i = 0; i < n; i++) {
        cin >> v[i];
    }
    dp[0][0][0] = 1;
    for(int at = 0; at < n; at++) {
        int next_at = 1 - (at % 2);
        int current_at = at % 2;
        for(int sum = 0; sum <= k; sum++) {
            for(int k_sum = 0; k_sum <= sum; k_sum++) {
                dp[next_at][sum][k_sum] = dp[current_at][sum][k_sum];
                if(sum >= v[at]) {
                    dp[next_at][sum][k_sum] |= dp[current_at][sum - v[at]][k_sum];
                    if(k_sum >= v[at]) {
                        dp[next_at][sum][k_sum] |= dp[current_at][sum - v[at]][k_sum - v[at]];
                    }
                }
            }
        }
    }
    vector<int> res;
    for(int i = 0; i <= k; i++) {
        if(dp[(n % 2)][k][i]) {
            res.push_back(i);
        }
    }
    cout << (int) res.size() << endl;
    for(int i = 0; i < res.size(); i++) {
        cout << res[i] << "" "";
    }
    return 0;
}
"
w5HMgRyt,Untitled,Josif_tepe,C++,Friday 3rd of November 2023 09:19:50 AM CDT,"#include <iostream>
#include <queue>
#include <vector>
#include <fstream>
#include <cstring>
using namespace std;
const int maxn = 505;
int dp[2][maxn][maxn];
int main() {
    ios_base::sync_with_stdio(false);
    int n, k;
    cin >> n >> k;
    
    memset(dp, 0, sizeof dp);
    vector<int> v(n);
    
    for(int i = 0; i < n; i++) {
        cin >> v[i];
    }
    dp[0][0][0] = 1;
    for(int at = 0; at < n; at++) {
        int next_at = 1 - (at % 2);
        int current_at = at % 2;
        for(int sum = 0; sum <= k; sum++) {
            for(int k_sum = 0; k_sum <= sum; k_sum++) {
                dp[next_at][sum][k_sum] = dp[current_at][sum][k_sum];
                if(sum >= v[at]) {
                    dp[next_at][sum][k_sum] |= dp[current_at][sum - v[at]][k_sum];
                    if(k_sum >= v[at]) {
                        dp[next_at][sum][k_sum] |= dp[current_at][sum - v[at]][k_sum - v[at]];
                    }
                }
            }
        }
    }
    vector<int> res;
    for(int i = 0; i <= k; i++) {
        if(dp[1 - (n % 2)][k][i]) {
            res.push_back(i);
        }
    }
    cout << (int) res.size() << endl;
    for(int i = 0; i < res.size(); i++) {
        cout << res[i] << "" "";
    }
    return 0;
}
"
iqrvWsfM,cookies.js,Talilo,JavaScript,Friday 3rd of November 2023 09:18:44 AM CDT,"<!DOCTYPE html>
<html>
<head>
<script>
function setCookie(cname,cvalue,exdays) {
  const d = new Date();
  d.setTime(d.getTime() + (exdays*24*60*60*1000));
  let expires = ""expires="" + d.toUTCString();
  document.cookie = cname + ""="" + cvalue + "";"" + expires + "";path=/"";
}

function getCookie(cname) {
  let name = cname + ""="";
  let decodedCookie = decodeURIComponent(document.cookie);
  let ca = decodedCookie.split(';');
  for(let i = 0; i < ca.length; i++) {
    let c = ca[i];
    while (c.charAt(0) == ' ') {
      c = c.substring(1);
    }
    if (c.indexOf(name) == 0) {
      return c.substring(name.length, c.length);
    }
  }
  return """";
}

function checkCookie() {
  let user = getCookie(""username"");
  if (user != """") {
    alert(""Welcome again "" + user);
  } else {
     user = prompt(""Please enter your name:"","""");
     if (user != """" && user != null) {
       setCookie(""username"", user, 30);
     }
  }
}

//https://www.w3schools.com/js/js_cookies.asp
</script>
</head>

<body onload=""checkCookie()""></body>

</html>
"
ExX3Awh3,Cars ZH,Levi0227,C#,Friday 3rd of November 2023 09:17:30 AM CDT,"namespace Cars
{
    internal class Program
    {
        static void Main(string[] args)
        {
            #region 1.
            string[] csv = File.ReadAllLines(""orca_share_media1698960021779_7125954815189299273.csv"");

            List<string> model = new List<string>();
            List<double> engine_size = new List<double>();
            List<double> horsepower = new List<double>();
            List<string> latest_launch = new List<string>();

            for (int i = 1; i < csv.Length; i++)
            {
                string[] line = csv[i].Split(';');

                model.Add(line[0]);
                engine_size.Add(Convert.ToDouble(line[1].Replace('.', ',')));
                horsepower.Add(Convert.ToDouble(line[2]));
                latest_launch.Add(line[3]);
            }
            #endregion 1.
            #region 2.
            Console.Write(""Adj meg egy évszámot: "");
            string evszam = Console.ReadLine();
            string[] ev = new string[latest_launch.Count];
            for (int i = 0; i < latest_launch.Count; i++)
            {
                string[] line = latest_launch[i].Split(""/"");
                ev[i] = line[2];
            }

            int db = 0;
            for (int i = 0; i < latest_launch.Count; i++)
            {
                if (ev[i] == evszam)
                {
                    db++;
                }
            }
            Console.WriteLine(db);
            #endregion 2.
            #region 3.
            Console.Write(""Adj meg egy lökettérfogatot: "");
            string loketterfogat = Console.ReadLine();
            double avg = 0;
            double avgdb = 0;

            for (int i = 0; i < engine_size.Count; i++)
            {
                if (engine_size[i] == Convert.ToDouble(loketterfogat))
                {
                    avg += horsepower[i];
                    avgdb++;
                }
            }
            Console.WriteLine($""Az átlag teljesítmény: {avg/avgdb}"");
            #endregion 3.
            #region 4.
            List<double> temp = new List<double>();
            int minindex = 0;
            double min = horsepower[0] / engine_size[0];
            for (int i = 0; i < engine_size.Count; i++)
            {
                temp.Add(horsepower[i]/engine_size[i]);
                if (min > temp[i])
                {
                    min = temp[i];
                    minindex = i;
                }
                ;
            }
                Console.WriteLine($""Legkisebb teljesítmény/lökettérfogat arányú model: {model[minindex]}"");
            #endregion 3.
        }
    }
}"
8fA8YKwD,subnetter,c-mcbride,Python,Friday 3rd of November 2023 09:16:34 AM CDT,"''''
     _______. __    __  .______   .__   __.  _______ .___________.___________. _______ .______      
    /       ||  |  |  | |   _  \  |  \ |  | |   ____||           |           ||   ____||   _  \     
   |   (----`|  |  |  | |  |_)  | |   \|  | |  |__   `---|  |----`---|  |----`|  |__   |  |_)  |    
    \   \    |  |  |  | |   _  <  |  . `  | |   __|      |  |        |  |     |   __|  |      /     
.----)   |   |  `--'  | |  |_)  | |  |\   | |  |____     |  |        |  |     |  |____ |  |\  \----.
|_______/     \______/  |______/  |__| \__| |_______|    |__|        |__|     |_______|| _| `._____|
'''


'''
This program takes a base IP and will subnet into user defined chunks in the most optimal way possible(largest to smallest). It will output the network/broadcast address of each subnet. It will also provide host usable IP ranges for each subnet
'''
import math
import ipaddress

subnetRequirements = {}
continue_adding = True
networkAddress = ipaddress.ip_address(input(""What is the address of the network? ""))


# While the user still wants to add stuff
while continue_adding:
    # Ask for subnet name and host requirement
    name = input(""\nWhat is the subnet name? "")
    hosts = int(input(""How many hosts? ""))  # Convert to integer

    # Store responses in dictionary
    subnetRequirements[name] = hosts

    repeat = input(""Are there more subnets that you would like to add? (yes/no) "")
    if repeat.lower() == 'no':
        continue_adding = False

# Polling is complete. Show the results.
print(""\n.........Subnets............."")
for name, host in subnetRequirements.items():
    print(f""{name} needs {host} hosts."")

# Sort the dictionary from largest to smallest
subnetsInOrder = sorted(subnetRequirements.items(), key=lambda x: x[1], reverse=True)

# Calculate the closest power of 2 that will fulfill host requirements plus 2 for network and broadcast address
def closest_power_of_2(hosts):
    power = 2  # Start with 2 as we need at least 2 addresses for network and broadcast
    while power < hosts + 2:  # Add 2 to the host requirement
        power *= 2
    return (math.log(power,2))


for name, hosts in subnetsInOrder:
    # Magic number is the amount of host bits required to allocate enough addresses for the host requirements
    magicNumber = closest_power_of_2(hosts)

    numberOfAddresses = pow(2, magicNumber)
    numberOfAddresses = int(numberOfAddresses)
    
    print(f""**************************Subnet {host}****************************************************"")
    print(f""***************************************************************************************"")
    print(f""subnet {name} needs {magicNumber} host bits which provides {numberOfAddresses} addresses."")

    # Host bits for CIDR notation. IPv4 addresses are 32 bits long so what's left over are network bits which go in ""/""
    hostBits = 32 - magicNumber
    print(f""Network Address for {name} = {networkAddress} / {hostBits}"")

    # Calculate the first usable IP address by converting it to int then back into ip adress object
    firstUseableAddress = ipaddress.ip_address(int(networkAddress) + 1)
    print(f""First usable address after the network address is {firstUseableAddress}"")

    # Calculate the broadcast address
    broadcastAddress = ipaddress.ip_address(int(networkAddress) + numberOfAddresses - 1)

    # Calculate the last usable IP address again by converting it to an int and then back to an ip address
    lastUseableAddress = ipaddress.ip_address(int(broadcastAddress) - 1)
    print(f""The last usable address before the broadcast address is {lastUseableAddress}"")

    print(f""Broadcast address for {name} = {broadcastAddress}"")
    

    # Update the network address for the next subnet
    networkAddress = ipaddress.ip_address(int(broadcastAddress) + 1)
"
Veh7kEKV,Crypto ZH,Levi0227,C#,Friday 3rd of November 2023 09:16:17 AM CDT,"namespace Crypto
{
    internal class Program
    {
        static void Main(string[] args)
        {
            string[] csv = File.ReadAllLines(""orca_share_media1698959993691_7125954697380197571.csv"");

            List<string> datum = new List<string>();
            List<string> name = new List<string>();
            List<double> open = new List<double>();
            List<double> close = new List<double>();

            for (int i = 1; i < csv.Length; i++) 
            {
                string[] line = csv[i].Split(';');
                datum.Add(line[0]);
                name.Add(line[1]);
                open.Add(Convert.ToDouble(line[2].Replace('.', ',')));
                close.Add(Convert.ToDouble(line[3].Replace('.', ',')));
            }



            Console.Write(""Év és hónap kötőjellel: "");
            string evhonap = Console.ReadLine();
            List<string> temp = new List<string>();
            for (int i = 0; i < datum.Count; i++) 
            {
                //temp.Add(datum[i].Remove(7));
                string[] line = datum[i].Split(""-"");
                temp.Add(line[0] + ""-"" + line[1]);
            }
            for (int i = 0; i < temp.Count; i++)
            {
                if (temp[i] == evhonap)
                {
                    Console.WriteLine($""{datum[i]} {name[i]} {close[i] - open[i]}"");
                }
            }



            Console.Write(""\nKirptovluat neve: "");
            string kriptonev = Console.ReadLine();
            double avgNyito = 0;
            double avgZaro = 0;
            double avgdb = 0;
            
            for (int i = 0; i < name.Count; i++)
            {
                if (name[i] == kriptonev)
                {
                    avgNyito += open[i];
                    avgZaro += close[i];
                    avgdb++;
                }
            }
            Console.WriteLine($""Átlag nyitó ármfolyam: {avgNyito/avgdb}\nÁtlag záró árfolyam: {avgZaro/avgdb}"");



            List<double> szazalek = new List<double>();
            double max = (close[0] - open[0]) / open[0];
            int maxindex = 0;
            for (int i = 0; i < name.Count; i++)
            {
                szazalek.Add((close[i] - open[i]) / open[i]);
            }
            for (int i = 0; i < name.Count; i++)
            {
                if (max < szazalek[i])
                {
                    max = szazalek[i];
                    maxindex = i;
                }
            }
            Console.WriteLine($""\nMaximális a napi változás: {datum[maxindex]} {name[maxindex]}"");
        }
    }
}"
QMmy5Ved,Gear,j0h,C++,Friday 3rd of November 2023 09:12:50 AM CDT,"/*
 * Gear Curve
 * x	=	r*cos*theta	
 * y	=	r*sin*theta
 * r=a+(1/b)*tanh(b*sin(n*theta)), 	
 *where tanhx is the hyperbolic tangent. Plots above show gear curves for a=1, b=10, and n=1 to 12. 
*/

//g++ -Wall -o ""%e"" ""%f"" -lboost_iostreams -lboost_system -lboost_filesystem -lSDL -lSDL_image -lSDL_ttf -lSDL_mixer -lGLU -lglut -lXi -lXmu `pkg-config --libs opencv` 
#include <iostream>
#include <fstream>
#include <math.h>
#include ""/usr/include/gnuplot-iostream.h""

using namespace std;

void init(){
	
	Gnuplot gp;
	
	}

void gear(double teeth){
	Gnuplot gp;
	ofstream plot;
    plot.open(""gear.dat"");
 // x	=	r*cos*theta	
 // y	=	r*sin*theta
 // r=a+(1/b)*tanh(b*sin(n*t))
	
	double a =1.5;
	double b =12;
	const double pi = 3.14159265359;
	double r =0;
	double cR=0;
	double n = 1;// teeth?
	n=teeth;
	
	double xx=0;
	double yy = 0;
	double cx = 0;
	double cy = 0;
	
		for(int t=0; t<=360; t++){
			double theta =(t*pi)/180;
	    	 
	        r=a+(1/b)*tanh(b*sin(n*theta));
	        xx = r * cos(theta);
	        yy = r * sin(theta);
	        cR=a+(1-b)*tanh(b*sin(0*theta));
	        cx=cR*cos(theta);
	        cy=cR*sin(theta);
	  plot << r <<"" "" << xx << "" "" << yy << "" "" << cR << "" "" <<cx  << "" ""<< cy << endl; 
	  //plot << r << "" "" << sin(theta) << endl;   
       
     }
     plot.close();
     gp << ""unset polar\n"";
     gp << ""plot \""gear.dat\"" using 2:3 with lines\n""; 
    // gp << ""plot \""gear.dat\"" using 5:6 with lines\n""; 
     plot.close();
	}

int main(int argc, char **argv){
	//init();
	cout << ""Enter Number of teeth: "";
	double k = 5;
	cin >> k;
	
	gear(k);
	
	
	
	return 0;
	}
"
BBM9JX2w,Untitled,Josif_tepe,C++,Friday 3rd of November 2023 09:11:33 AM CDT,"#include <iostream>
#include <queue>
#include <vector>
#include <fstream>
#include <cstring>
using namespace std;
const int maxn = 505;

int main() {
    ios_base::sync_with_stdio(false);
    int n, k;
    cin >> n >> k;
    int dp[n + 1][k + 1][k + 1];
    memset(dp, 0, sizeof dp);
    vector<int> v(n);
    
    for(int i = 0; i < n; i++) {
        cin >> v[i];
    }
    dp[0][0][0] = 1;
    for(int at = 0; at < n; at++) {
        for(int sum = 0; sum <= k; sum++) {
            for(int k_sum = 0; k_sum <= sum; k_sum++) {
                dp[at + 1][sum][k_sum] = dp[at][sum][k_sum];
                if(sum >= v[at]) {
                    dp[at + 1][sum][k_sum] |= dp[at][sum - v[at]][k_sum];
                    if(k_sum >= v[at]) {
                        dp[at + 1][sum][k_sum] |= dp[at][sum - v[at]][k_sum - v[at]];
                    }
                }
            }
        }
    }
    vector<int> res;
    for(int i = 0; i <= k; i++) {
        if(dp[n][k][i]) {
            res.push_back(i);
        }
    }
    cout << (int) res.size() << endl;
    for(int i = 0; i < res.size(); i++) {
        cout << res[i] << "" "";
    }
    return 0;
}
"
4BwAhg4b,ZDAemon - Snowing,Tomasm21,C++,Friday 3rd of November 2023 09:00:13 AM CDT,"#include ""zcommon.acs""
#include ""zdaemon.acs""

int snowflakes_coords [10][15000];

Script 1 (int player) DISCONNECT
{
    if (!PlayerIsSpectator(player))
    {
        //log(s:""Someone disconnected.. "");
		snowflakes_coords[9][player] = 0;
		snowflakes_coords[9][14999-player] = 0;
    }
}

Script ""Snowing_starter"" OPEN
{
int i;
	while(TRUE){
		for(i=0; i<=PlayerTopIndex(); i++){
			if(PlayerIsSpectator(i)){
				if(snowflakes_coords[9][i] == 0 && snowflakes_coords[9][14999-i] == 1)
					Client_Execute(i, 32, 0, 37, ZD_rand(12, 14), 60);
				else if(snowflakes_coords[9][14999-i] == 0)
					Client_NamedExecute(i, ""cl_Counting_Snowflakes_Positions"", 0, 0, 0, 0);
			}
			else {
				if(ThingCount(0, 12000+i)==1)
				{
					if(snowflakes_coords[9][i] == 0 && snowflakes_coords[9][14999-i] == 1)
						Client_Execute(i, 32, 0, 37, ZD_rand(12, 14), 60);
					else if(snowflakes_coords[9][14999-i] == 0)
					Client_NamedExecute(i, ""cl_Counting_Snowflakes_Positions"", 0, 0, 0, 0);
				}
			}
		}
		delay(70);
	}
}

Script ""sv_Client_Reporting_Snow_Positions"" (int pnum){
	snowflakes_coords[9][14999-pnum] = 1;
}

Script ""sv_Client_Reporting_Snowing"" (int pnum){
	snowflakes_coords[9][pnum] = 1;
	//log(s:""Client "", n:pnum+1, s:"" got activated client side snowing script"");
}

Script ""sv_Client_Ended_Snowing"" (int pnum){
	//log(s:""Limited time snowing for "", n:pnum+1, s:"" expired. After awhile it will be started again.."");
	snowflakes_coords[9][pnum] = 0;
}

Script ""cl_Counting_Snowflakes_Positions"" (void){
int x, y, z;
int i, j, k=0;
int outside = 0;
int inside = 0;

	z = 380.0;

	for(j = 8736; j <= 9264; j=j+32){
		y = j << 16;
		for(i = -6416; i <= -5008; i=i+32){
			x = i << 16;
			SpawnForced(""MapSpot"", x, y, z, 12699, 0);
			if(ThingCountSector(T_NONE, 12699, 148) && CheckSight(155, 12699, CSF_NOFAKEFLOORS)){
				snowflakes_coords[0][k] = x;
				snowflakes_coords[1][k] = y;
				inside++;
				k++;
			}
			else outside++;
			Thing_Remove(12699);
		}
	}
	for(j = 9264; j <= 11648; j=j+32){
		y = j << 16;
		for(i = -7808; i <= -3616; i=i+32){
			x = i << 16;
			SpawnForced(""MapSpot"", x, y, z, 12699, 0);
			if(ThingCountSector(T_NONE, 12699, 148) || ThingCountSector(T_NONE, 12699, 182) ||
			   ThingCountSector(T_NONE, 12699, 185) || ThingCountSector(T_NONE, 12699, 198) ||
			   ThingCountSector(T_NONE, 12699, 190) || ThingCountSector(T_NONE, 12699, 189) ||
			   ThingCountSector(T_NONE, 12699, 188) || ThingCountSector(T_NONE, 12699, 187) ||
			   ThingCountSector(T_NONE, 12699, 186) || ThingCountSector(T_NONE, 12699, 183) ||
			   ThingCountSector(T_NONE, 12699, 200) || ThingCountSector(T_NONE, 12699, 204) ||
			   ThingCountSector(T_NONE, 12699, 206) || ThingCountSector(T_NONE, 12699, 202)
			   )
			{
				snowflakes_coords[0][k] = x;
				snowflakes_coords[1][k] = y;
				inside++;
				k++;
			}
			else outside++;
			Thing_Remove(12699);
		}
	}
	for(j = 12096; j >= 11648; j=j-32){
		y = j << 16;
		for(i = -7240; i <= -4184; i=i+32){
			x = i << 16;
			SpawnForced(""MapSpot"", x, y, z, 12699, 0);
			if((ThingCountSector(T_NONE, 12699, 206) || ThingCountSector(T_NONE, 12699, 208)) &&
			   CheckSight(157, 12699, CSF_NOFAKEFLOORS)){
				snowflakes_coords[0][k] = x;
				snowflakes_coords[1][k] = y;
				inside++;
				k++;
			}
			else outside++;
			Thing_Remove(12699);
		}
	}
	log(s:""Large white area - "", s:""Insides: "", d:inside, s:"", outsides: "", d:outside);
	snowflakes_coords[9][14001] = k;
	for(j = 11688; j >= 11018; j=j-32){
		y = j << 16;
		for(i = -3212; i <= -2542; i=i+32){
			x = i << 16;
			SpawnForced(""MapSpot"", x, y, -36.0, 12699, 0);
			if(ThingCountSector(T_NONE, 12699, 205) && CheckSight(156, 12699, CSF_NOFAKEFLOORS))
			{
				snowflakes_coords[0][k] = x;
				snowflakes_coords[1][k] = y;
				inside++;
				k++;
			}
			else outside++;
			Thing_Remove(12699);
		}
	}
	log(s:""Round secret area - "", s:""Insides: "", d:inside, s:"", outsides: "", d:outside);
	snowflakes_coords[9][14002] = k;
	for(j = 13952; j >= 12589; j=j-32){
		y = j << 16;
		for(i = -7094; i <= -4363; i=i+32){
			x = i << 16;
			SpawnForced(""MapSpot"", x, y, -36.0, 12699, 0);
			if(ThingCountSector(T_NONE, 12699, 209) || ThingCountSector(T_NONE, 12699, 212))
			{
				snowflakes_coords[0][k] = x;
				snowflakes_coords[1][k] = y;
				inside++;
				k++;
			}
			else outside++;
			Thing_Remove(12699);
		}
	}
	log(s:""Semi circle area - "", s:""Insides: "", d:inside, s:"", outsides: "", d:outside);
	for(j = 14517; j >= 13387; j=j-32){
		y = j << 16;
		for(i = -6292; i <= -5162; i=i+32){
			x = i << 16;
			SpawnForced(""MapSpot"", x, y, -36.0, 12699, 0);
			if(ThingCountSector(T_NONE, 12699, 211) || ThingCountSector(T_NONE, 12699, 221))
			{
				snowflakes_coords[0][k] = x;
				snowflakes_coords[1][k] = y;
				inside++;
				k++;
			}
			else outside++;
			Thing_Remove(12699);
		}
	}
	log(s:""Large circle area - "", s:""Insides: "", d:inside, s:"", outsides: "", d:outside);
	for(j = 14905; j >= 14176; j=j-32){
		y = j << 16;
		for(i = -6720; i <= -4736; i=i+32){
			x = i << 16;
			SpawnForced(""MapSpot"", x, y, 268.0, 12699, 0);
			if(ThingCountSector(T_NONE, 12699, 229) && CheckSight(163, 12699, CSF_NOFAKEFLOORS))
			{
				snowflakes_coords[0][k] = x;
				snowflakes_coords[1][k] = y;
				inside++;
				k++;
			}
			else outside++;
			Thing_Remove(12699);
		}
	}
	log(s:""The outside semi circle area - "", s:""Insides: "", d:inside, s:"", outsides: "", d:outside);
	snowflakes_coords[9][14000] = inside;
	Server_NamedExecuteAlways(""sv_Client_Reporting_Snow_Positions"", 0, ConsolePlayerNumber());
}

//This script should run only onto client side
Script 32 (int stay, int density, int snow_time){
if(density == 0) density = 5;
if(stay == 0) stay = 38;

int tics, stay_count = 0;
int x, y, z;
int i, j, k=0;
int rnd, semi, inside;

	inside = snowflakes_coords[9][14000];
	rnd = snowflakes_coords[9][14001];
	semi = snowflakes_coords[9][14002];

	Server_NamedExecuteAlways(""sv_Client_Reporting_Snowing"", 0, ConsolePlayerNumber());
	if(snow_time > 0){
		tics = 0;
		while(tics < 35*snow_time){
			for(i = 0; i<density; i++){
				k = ZD_rand(0, inside-1);
				x = snowflakes_coords[0][k];
				y = snowflakes_coords[1][k];
				if(k >= rnd && k < semi) z = -36.0;
				else if(k >= semi) z = 268.0;
				//SpawnForced(""ColonGibs"", x, y, z, 12700+stay_count, 0);
				SpawnForced(""TableShit1"", x, y, z, 12700+stay_count, 0);
				SetActorProperty(12700+stay_count, APROP_Gravity, 0.05);
			}
			for(j = 0; j <= stay_count; j++){
				if(ZD_rand(1, 12) == 2)
				ThrustThing(ZD_rand(0, 255), ZD_rand(0, 2), 0, 12700+j);
			}

			if (tics % 5 == 0) stay_count++;

			if (stay_count >= stay) stay_count = 0;

			Thing_Remove(12700+stay_count);
			tics++;
			delay(1);
		}
		delay(35*7);
		for(i=0; i < stay; i++){
			Thing_Remove(12700+i);
		}
		delay(70*snow_time);
		//log(s:""End of snowing script"");
		Server_NamedExecuteAlways(""sv_Client_Ended_Snowing"", 0, ConsolePlayerNumber());
	}
	else {
		while(TRUE){
			for(i = 0; i<density; i++){
				k = ZD_rand(0, inside-1);
				x = snowflakes_coords[0][k];
				y = snowflakes_coords[1][k];
				if(k >= rnd && k < semi) z = -36.0;
				else if(k >= semi) z = 268.0;
				//SpawnForced(""ColonGibs"", x, y, z, 12700+stay_count, 0);
				SpawnForced(""TableShit1"", x, y, z, 12700+stay_count, 0);
				SetActorProperty(12700+stay_count, APROP_Gravity, 0.05);
			}
			for(j = 0; j <= stay_count; j++){
				if(ZD_rand(1, 12) == 2)
				ThrustThing(ZD_rand(0, 255), ZD_rand(0, 2), 0, 12700+j);
			}

			if (tics % 5 == 0) {
				stay_count++;
				if(tics >= 300) tics = 1;
			}

			if (stay_count >= stay) stay_count = 0;

			Thing_Remove(12700+stay_count);
			tics++;
			delay(1);
		}
	}
}"
sLY19z94,Dynamic Markdown to HTML Template Script,getivan,Python,Friday 3rd of November 2023 08:58:47 AM CDT,"# WHAT IS THIS? - This script is used to convert markdown files into HTML, which then dynamically inserts the Meta Title and Body Content into a pre-existing HTML template. Output files come in .html, and are named after the h1 tag. It's great for programmatically expanding content in HTML sites, or for edge-case mass-content generation formatting. 

# INSTRUCTIONS - to configure and execute the provided script, first ensure that Python is installed on your system, with PATH, and that the mistune, tqdm, and pathlib packages are installed, which can be done using pip install mistune tqdm pathlib. Next, update the input_dir variable to the directory path containing your Markdown .txt files, and set the output_dir to your desired location for the HTML files. The error_log path should also be set to where you'd like error logs to be saved. Check that these directories exist or adjust the script to create them. Then, customize the html_template string, within the triple quotes, to match the desired HTML structure and styles for your output files. Finally, run the script by executing it with Python from your command line interface. The script will process each Markdown file, convert it to HTML, and save it in the output directory, with any errors logged as specified. You can save the script on your desktop as a .py, and then if you run the script by name, directly from command line, it will show a progress bar, for tracking very large batch progress. 

# WARNINGS - this script looks for single curly brackets, to dynamically insert things, so if you have anything, rendering in your HTML Content Placeholder, which uses curly brackets, you have to double them, on both sides, so that python won't freak-out. Similarly, your input/output paths have to have double backslashes, or python will freak-out. Markdown tables work, but there can be spacing oddities. To capture and log errors in the static text file, you'll need to wrap the part of your code that could fail in a try-except block and write any exceptions to the error log file. It's easier to just read them from command line. 

import os
import re
import mistune
from pathlib import Path
from tqdm import tqdm

# Input and output directories (must have double backslash)
input_dir = 'C:\\Users\\EXAMPLE\\Desktop\\FOLDER\\MARKDOWN1'
output_dir = 'C:\\Users\\EXAMPLE\\Desktop\\FOLDER\\HTML2'
error_log = 'C:\\Users\\EXAMPLE\\Desktop\\FOLDER\\error-log.txt'

# Your HTML template designed to accommodate title and content appropriately
html_template = """"""
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <title>{title_placeholder}</title>
    <!-- other head elements -->
</head>
<body>
    {content_placeholder}
</body>
</html>
""""""

# Function to convert Markdown to HTML using Mistune with table support
def markdown_to_html(md):
    # Create a markdown instance and enable the table plugin
    markdown = mistune.create_markdown(plugins=['table'])
    return markdown(md)

# Function to extract the title (from the first H1 tag in Markdown)
def extract_title(md_content):
    lines = md_content.split('\n')
    title = None
    for line in lines:
        if line.startswith('# '):
            title = line.lstrip('# ').strip()
            md_content = '\n'.join(lines[lines.index(line):])
            break
    return title, md_content

# Ensure output directory exists
Path(output_dir).mkdir(parents=True, exist_ok=True)

# Process each markdown file in the input directory
for md_filename in tqdm(os.listdir(input_dir)):
    if md_filename.endswith('.txt'):
        with open(os.path.join(input_dir, md_filename), 'r', encoding='utf-8') as md_file:
            markdown_content = md_file.read()

        # Extract the title from the Markdown content
        title, markdown_content = extract_title(markdown_content)
        if not title:  # If title is not found, use a default or filename
            title = 'Untitled'

        # Convert Markdown content to HTML
        html_content = markdown_to_html(markdown_content)

        # Replace placeholders with actual content
        final_html = html_template.format(
            title_placeholder=title,
            content_placeholder=html_content
        )

        # Format the filename based on the title
        filename_title = re.sub(r'\s+', '-', title.lower())
        filename_title = re.sub(r'[^\w-]', '', filename_title)

        # Output the final HTML to a file
        output_file_path = os.path.join(output_dir, f'{filename_title}.html')
        with open(output_file_path, 'w', encoding='utf-8') as html_file:
            html_file.write(final_html)

# Print completion message
print(""All files processed. Check the error log for errors."")"
hszDuTC3,var names,G2ARefundExploit,JavaScript,Friday 3rd of November 2023 08:58:40 AM CDT,"var bilance = smiley;
var over = 6.9;
var under = 2.9;
var zimple = smiley;
var becomer = 0;
var beboon = true;
var blowzy = false;
var mate = false;"
3DV1QxpP,tester,G2ARefundExploit,Batch,Friday 3rd of November 2023 08:56:28 AM CDT," 
 
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::: utility1.bat Split from Silent_Mode.bat for Free Use   :::
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::: Original version 8.5.6.75 20230716132435 by -JpE-
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 
  if not defined vers set vers=v8.7.0.03 20231006232214 by -JpE-
  set /a size3=0
  if not defined util3 set util3=""%bats%\utility3.bat""
  if not exist %util3% (
    echo . & echo Can't find utility3.bat! & echo . & pause & echo . & exit /b)
  if not defined sizer set sizer=""%bats%\string_length.bat""
  if not exist %sizer% (
    echo . & echo Can't find %sizer% & echo . & pause & echo . & exit /b)
  set charsForPadding=*=
  set txt1= Introducing:  My-ShotCaller! %vers% 
  if exist %sizer% call %sizer% charsLen charsForPadding
  if exist %sizer% call %sizer% actualSize2 txt1
  if %charsLen% gtr 0 set /a size2=((%actualSize2% + (2*%charsLen%)) / %charsLen%)
  call :padme %size2%
  set line1=%line1%%charsForPadding%
  echo . & echo . & VER & echo .
  echo . & echo %line1%
  echo =%charsForPadding%%txt1%%charsForPadding%*
  echo %line1% & echo .
  exit /b
 
::: Pads string %line1% to passed length
:padme <intVar lengthOfTheStringRequired>
  set line1=
  for /l %%k in (1, 1, %~1) do ( call :loop3
    if %errorlevel% gtr 1 echo errorlevel: %errorlevel% & set /a code2=7 & exit /b )
  exit /b
  
:loop3
  set line1=%line1%%charsForPadding%
  exit /b
 
 
 
  :::   100% -JpE-
 
 
 
"
