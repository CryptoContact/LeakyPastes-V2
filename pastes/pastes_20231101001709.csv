id,title,username,language,date,content
rBGPCRNA,2023-10-31_stats.json,rdp_snitch,JSON,Tuesday 31st of October 2023 07:15:09 PM CDT,"{
  ""ip"": {
    ""62.122.184.166"": 8,
    ""62.122.184.168"": 4,
    ""111.61.253.55"": 2,
    ""62.204.41.146"": 3,
    ""205.210.31.162"": 3,
    ""141.98.11.128"": 6,
    ""212.70.149.146"": 5,
    ""185.170.144.3"": 2,
    ""141.98.81.34"": 2,
    ""87.251.75.145"": 2,
    ""198.235.24.244"": 3,
    ""152.89.198.133"": 4,
    ""78.128.114.2"": 2,
    ""38.62.230.230"": 1,
    ""87.251.75.120"": 1,
    ""194.187.176.158"": 1,
    ""152.32.197.159"": 1,
    ""106.116.169.71"": 1,
    ""198.235.24.108"": 3,
    ""58.218.204.183"": 2,
    ""62.122.184.165"": 2,
    ""136.144.35.205"": 1,
    ""172.188.48.214"": 1,
    ""198.235.24.54"": 3,
    ""147.78.47.10"": 1
  },
  ""asn"": {
    ""AS57523"": 18,
    ""AS24547"": 2,
    ""AS59425"": 3,
    ""AS396982"": 12,
    ""AS209605"": 6,
    ""AS204428"": 5,
    ""AS197414"": 2,
    ""AS209588"": 3,
    ""AS208091"": 3,
    ""AS50360"": 2,
    ""AS55286"": 1,
    ""AS208843"": 1,
    ""AS135377"": 1,
    ""AS4134"": 3,
    ""AS396356"": 1,
    ""AS8075"": 1
  },
  ""isp"": {
    ""Chang Way Technologies Co. Limited"": 18,
    ""China Mobile communications corporation"": 2,
    ""Horizon LLC"": 3,
    ""Google LLC"": 12,
    ""UAB Host Baltic"": 6,
    ""SS-Net"": 5,
    ""Xhost Internet Solutions LP"": 5,
    ""Flyservers S.A."": 3,
    ""Tamatiya EOOD"": 2,
    ""B2 Net Solutions Inc."": 1,
    ""Alpha Strike Labs GmbH"": 1,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""Chinanet"": 3,
    ""Latitude.sh"": 1,
    ""Microsoft"": 1
  },
  ""org"": {
    ""Chang Way Technologies Co. Limited"": 14,
    ""China Mobile"": 2,
    ""Horizon LLC"": 3,
    ""Palo Alto Networks, Inc"": 12,
    ""Unknown"": 6,
    ""4Media Ltd"": 5,
    ""Xhostis"": 2,
    ""Flyservers S.A"": 3,
    ""Xhost Internet Solutions"": 3,
    ""Starcrecium Limited"": 4,
    ""Tamatiya EOOD"": 2,
    ""ServerMania Inc"": 1,
    ""Alpha Strike Labs GmbH"": 1,
    ""Ucloud Information Technology (hk) Limited"": 1,
    ""Chinanet HE"": 1,
    ""Chinanet JS"": 2,
    ""Panq B.V"": 1,
    ""Microsoft Azure Cloud (southeastasia)"": 1
  },
  ""regionName"": {
    ""Moscow"": 21,
    ""Hebei"": 3,
    ""California"": 12,
    ""Kaunas"": 6,
    ""Plovdiv"": 7,
    ""North Holland"": 3,
    ""Drenthe"": 2,
    ""England"": 3,
    ""New Jersey"": 2,
    ""Land Berlin"": 1,
    ""Sao Paulo"": 1,
    ""Jiangsu"": 2,
    ""Central Singapore"": 1
  },
  ""country"": {
    ""Russia"": 21,
    ""China"": 5,
    ""United States"": 14,
    ""Lithuania"": 6,
    ""Bulgaria"": 7,
    ""Netherlands"": 5,
    ""United Kingdom"": 3,
    ""Germany"": 1,
    ""Brazil"": 1,
    ""Singapore"": 1
  },
  ""account"": {
    ""Domain"": 20,
    ""(empty)"": 4,
    ""Test"": 1,
    ""cOiXFBmjw"": 1,
    ""GGvsNF"": 1,
    ""ZgmpkM"": 1,
    ""Administr"": 21,
    ""QmVAVMocZ"": 1,
    ""zrHbii"": 1,
    ""ZDGDbZ"": 1,
    ""hello"": 4,
    ""user"": 1,
    ""Administrator"": 1,
    ""aaMFIYtwn"": 1,
    ""drcDfD"": 1,
    ""fEqSio"": 1,
    ""luCzpczrO"": 1,
    ""sHoaMz"": 1,
    ""VfQzlh"": 1
  },
  ""keyboard"": {
    ""Unknown"": 64
  },
  ""client_build"": {
    ""Unknown"": 64
  },
  ""client_name"": {
    ""Unknown"": 64
  },
  ""ip_type"": {
    ""Unknown"": 38,
    ""mobile"": 2,
    ""hosting"": 16,
    ""proxy"": 7,
    ""hosting & proxy"": 1
  }
}"
4znbkePK,BTC Wallet Credentials have been reset,castlclass_20,GetText,Tuesday 31st of October 2023 07:14:36 PM CDT,"Dear User
We have received a request to reset the login information for your Bitcoin wallet. If you did not make this request, please disregard this message.
Your new login credentials will be 
laleyfm2p:EbNHTq on 212.224.93.130
You can connect via SSH .
Regards"
0vaDDAC0,Untitled,Mysoft,C,Tuesday 31st of October 2023 06:34:17 PM CDT,"#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <time.h>

//#define _countof(a) (sizeof(a)/sizeof(*(a)))

#define DoBenchmark

#ifdef DoBenchmark
  #define _Benchmark iCount=0; while ((abs(clock()-ttime)<CLOCKS_PER_SEC) && ++iCount)
#else
  #define _Benchmark 
#endif

typedef struct {
    int group;
    const char* rule;
    const char* ldraw_output;
} Rule;

#include ""table.c""

const Rule* ruleIdx[_countof(rules)];

//comparator function for qsort
int CompareRules( const void* pA , const void* pB ) {
	return strcmp( (*((const Rule**)pA))->rule , (*((const Rule**)pB))->rule );
}
void InitRules() {
	//set ptrs for each rules element at initial index
	for (int N=0 ; N<_countof(ruleIdx) ; N++ ) { ruleIdx[N]	= &rules[N]; }		
	qsort( ruleIdx , _countof(ruleIdx) , sizeof(void*) , CompareRules );
	printf(""%i rules\n"",_countof(ruleIdx));
}
const Rule* FindRule( char* pzRule ) {
	int iBegin = 0 , iEnd = _countof(ruleIdx);
	while (iEnd >= iBegin) {
		//try item from middle
		int idx = (iBegin+iEnd)/2;			
		const char* pzEntry = ruleIdx[idx]->rule;
		int iResu = strcmp( pzRule , pzEntry );
		if (!iResu) { return ruleIdx[idx]; } //found
		if (iBegin == iEnd) { return NULL; } //NOT found
		//remove the wrong half of possibilities		
		if (iResu>0) { iBegin= idx+1; } else { iEnd = idx-1; }		
	}
	return NULL; //NOT found
} 

void NormalizeInput( char* pzInput ) {	
	char WasSpace=1, *pOut = pzInput, C;
	while ((C=*pzInput++)) {
		switch (C) {
		case ' ' : case '\t' : case '\r' : case '\n' : 
		  if (!WasSpace) { *pOut++ = ' '; }
			WasSpace=1; break;
		default: 
		  *pOut++ = C; WasSpace=0;
		}
	}
	while (pOut[-1]==' ') { pOut--; }
	*pOut = '\0';	
}

int main() {

    InitRules();
    
    FILE *outputFile = fopen(""output.txt"", ""a""); // Open the file in append mode

    while (1) {
        char userInput[100];

        printf(""Enter a string (or 'exit' to quit): "");
        fgets(userInput, 100, stdin);
        userInput[strcspn(userInput, ""\n"")] = '\0';
				NormalizeInput( userInput );
				printf(""'%s'\n"",userInput);
				

        if (strcmp(userInput, ""exit"") == 0) {
            break;  // Exit the loop if the user types 'exit'
        }

				#ifdef DoBenchmark
				clock_t ttime = clock();
				long long iCount = 0;
				#endif				
				
				const Rule* pFound = NULL;									
				#if 1
					_Benchmark {
						pFound = FindRule( userInput );
					}
				#else
					_Benchmark {
						for (int N=0 ; N<_countof(rules) ; N++) {
							if (!strcmp(userInput , rules[N].rule)) {
								pFound = &rules[N]; break; 
							}							
						}						
					}
				#endif
				if (pFound) {
					printf(""%s\n"", pFound->ldraw_output);
					fprintf(outputFile, ""%s\n"", pFound->ldraw_output);
				} else {
					printf(""No match found.\n"");
				}				
				
				#ifdef DoBenchmark
				printf(""took %.05fms %lli/s\n"",1000.0/iCount,iCount);
				#endif
				
    }

    fclose(outputFile); // Close the file

    return 0;
		
}
"
GJTUbdu6,Untitled,Mysoft,C,Tuesday 31st of October 2023 05:58:40 PM CDT,"#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <time.h>

//#define _countof(a) (sizeof(a)/sizeof(*(a)))

#define DoBenchmark

#ifdef DoBenchmark
  #define _Benchmark while (abs(clock()-ttime)<CLOCKS_PER_SEC)
#else
  #define _Benchmark 
#endif

typedef struct {
    int group;
    const char* rule;
    const char* ldraw_output;
} Rule;

#include ""table.c""

const Rule* ruleIdx[_countof(rules)];

//comparator function for qsort
int CompareRules( const void* pA , const void* pB ) {
	return strcmp( (*((const Rule**)pA))->rule , (*((const Rule**)pB))->rule );
}
void InitRules() {
	//set ptrs for each rules element at initial index
	for (int N=0 ; N<_countof(ruleIdx) ; N++ ) { ruleIdx[N]	= &rules[N]; }		
	qsort( ruleIdx , _countof(ruleIdx) , sizeof(void*) , CompareRules );
	printf(""%i rules\n"",_countof(ruleIdx));
}
const Rule* FindRule( char* pzRule ) {
	int iBegin = 0 , iEnd = _countof(ruleIdx);
	while (iEnd >= iBegin) {
		//try item from middle
		int idx = (iBegin+iEnd)/2;			
		const char* pzEntry = ruleIdx[idx]->rule;
		int iResu = strcmp( pzRule , pzEntry );
		if (!iResu) { return ruleIdx[idx]; } //found
		if (iBegin == iEnd) { return NULL; } //NOT found
		//remove the wrong half of possibilities		
		if (iResu>0) { iBegin= idx+1; } else { iEnd = idx-1; }		
	}
	return NULL; //NOT found
} 

void NormalizeInput( char* pzInput ) {	
	char WasSpace=1, *pOut = pzInput, C;
	while ((C=*pzInput++)) {
		switch (C) {
		case ' ' : case '\t' : case '\r' : case '\n' : 
		  if (!WasSpace) { *pOut++ = ' '; }
			WasSpace=1; break;
		default: 
		  *pOut++ = C; WasSpace=0;
		}
	}
	while (pOut[-1]==' ') { pOut--; }
	*pOut = '\0';	
}

int main() {

    InitRules();
    
    FILE *outputFile = fopen(""output.txt"", ""a""); // Open the file in append mode

    while (1) {
        char userInput[100];

        printf(""Enter a string (or 'exit' to quit): "");
        fgets(userInput, 100, stdin);
        userInput[strcspn(userInput, ""\n"")] = '\0';
				NormalizeInput( userInput );
				printf(""'%s'\n"",userInput);
				

        if (strcmp(userInput, ""exit"") == 0) {
            break;  // Exit the loop if the user types 'exit'
        }

				#ifdef DoBenchmark
				clock_t ttime = clock();
				#endif
				long long iCount = 0;
				
				const Rule* pFound = NULL;									
				#if 1
					_Benchmark {
						pFound = FindRule( userInput );					
						iCount++;
					}								
				#else
					_Benchmark {
						for (int N=0 ; N<_countof(rules) ; N++) {
							if (!strcmp(userInput , rules[N].rule)) {
								pFound = &rules[N]; break; 
							}							
						}
						iCount++;
					}
				#endif
				if (pFound) {
					printf(""%s\n"", pFound->ldraw_output);
					fprintf(outputFile, ""%s\n"", pFound->ldraw_output);
				} else {
					printf(""No match found.\n"");
				}				
				
				#ifdef DoBenchmark
				printf(""took %.05fms %lli/s\n"",1000.0/iCount,iCount);
				#endif
				
    }

    fclose(outputFile); // Close the file

    return 0;
		
}
"
p8UiY3Z1,jxstn1x's Data,azimuths,JSON,Tuesday 31st of October 2023 05:47:59 PM CDT,"{""Stats"":{""Key5"":{""ObjectName"":""Key5"",""ObjectClass"":""StringValue"",""ObjectValue"":""5""},""MaxRank"":{""ObjectName"":""MaxRank"",""ObjectClass"":""IntValue"",""ObjectValue"":""24""},""mapmove1"":{""ObjectName"":""mapmove1"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""LeftEye"":{""ObjectName"":""LeftEye"",""ObjectClass"":""StringValue"",""ObjectValue"":""Default""},""Key12"":{""ObjectName"":""Key12"",""ObjectClass"":""StringValue"",""ObjectValue"":""z""},""Blind"":{""ObjectName"":""Blind"",""ObjectClass"":""NumberValue"",""ObjectValue"":""0""},""Slot2"":{""ObjectName"":""Slot2"",""ObjectClass"":""StringValue"",""ObjectValue"":""Wild Water Wave""},""TailedBeastLevel"":{""ObjectName"":""TailedBeastLevel"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CombatEXP"":{""ObjectName"":""CombatEXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""149""},""Personality"":{""ObjectName"":""Personality"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""GripCount"":{""ObjectName"":""GripCount"",""ObjectClass"":""IntValue"",""ObjectValue"":""3""},""Marking"":{""ObjectName"":""Marking"",""ObjectClass"":""IntValue"",""ObjectValue"":""69""},""SkinColor"":{""ObjectName"":""SkinColor"",""ObjectClass"":""IntValue"",""ObjectValue"":""3""},""RP"":{""ObjectName"":""RP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""ToggleAccessories"":{""ObjectName"":""ToggleAccessories"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot11"":{""ObjectName"":""Slot11"",""ObjectClass"":""StringValue"",""ObjectValue"":""Shadow Clone""},""MSAbility1"":{""ObjectName"":""MSAbility1"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""Key8"":{""ObjectName"":""Key8"",""ObjectClass"":""StringValue"",""ObjectValue"":""8""},""LINDAMINISTARTUP"":{""ObjectName"":""LINDAMINISTARTUP"",""ObjectClass"":""IntValue"",""ObjectValue"":""5""},""Slot4"":{""ObjectName"":""Slot4"",""ObjectClass"":""StringValue"",""ObjectValue"":""Leaf Whirlwind""},""Slot9"":{""ObjectName"":""Slot9"",""ObjectClass"":""StringValue"",""ObjectValue"":""Body Flicker""},""Version"":{""ObjectName"":""Version"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""DateRecord"":{""ObjectName"":""DateRecord"",""ObjectClass"":""IntValue"",""ObjectValue"":""2915""},""Key4"":{""ObjectName"":""Key4"",""ObjectClass"":""StringValue"",""ObjectValue"":""4""},""CurseMarkLevel"":{""ObjectName"":""CurseMarkLevel"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key2"":{""ObjectName"":""Key2"",""ObjectClass"":""StringValue"",""ObjectValue"":""2""},""Genjutsu"":{""ObjectName"":""Genjutsu"",""ObjectClass"":""IntValue"",""ObjectValue"":""3""},""SwordSave"":{""ObjectName"":""SwordSave"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""BijuuXP"":{""ObjectName"":""BijuuXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SeenDeaths"":{""ObjectName"":""SeenDeaths"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""BonusSkillPoints"":{""ObjectName"":""BonusSkillPoints"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CColorB"":{""ObjectName"":""CColorB"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""PosY"":{""ObjectName"":""PosY"",""ObjectClass"":""IntValue"",""ObjectValue"":""176""},""SPR"":{""ObjectName"":""SPR"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""BijuuConvo"":{""ObjectName"":""BijuuConvo"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""jincooldown"":{""ObjectName"":""jincooldown"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Ken"":{""ObjectName"":""Ken"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Scar"":{""ObjectName"":""Scar"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot12"":{""ObjectName"":""Slot12"",""ObjectClass"":""StringValue"",""ObjectValue"":""Percutiens""},""RecentTrainings"":{""ObjectName"":""RecentTrainings"",""ObjectClass"":""StringValue"",""ObjectValue"":""[\""Handsign Training\""]""},""EyeColorR"":{""ObjectName"":""EyeColorR"",""ObjectClass"":""IntValue"",""ObjectValue"":""116""},""HairColorG"":{""ObjectName"":""HairColorG"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""RaidCD"":{""ObjectName"":""RaidCD"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot6"":{""ObjectName"":""Slot6"",""ObjectClass"":""StringValue"",""ObjectValue"":""Laser Circus""},""HairColorB"":{""ObjectName"":""HairColorB"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Gender"":{""ObjectName"":""Gender"",""ObjectClass"":""IntValue"",""ObjectValue"":""1""},""MSAbility2"":{""ObjectName"":""MSAbility2"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""Kids"":{""ObjectName"":""Kids"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SecondaryWep"":{""ObjectName"":""SecondaryWep"",""ObjectClass"":""StringValue"",""ObjectValue"":""Kunai""},""PosZ"":{""ObjectName"":""PosZ"",""ObjectClass"":""IntValue"",""ObjectValue"":""-2011""},""UnlockedCloak"":{""ObjectName"":""UnlockedCloak"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CloakTime"":{""ObjectName"":""CloakTime"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""BijuuRelation"":{""ObjectName"":""BijuuRelation"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Prestige"":{""ObjectName"":""Prestige"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Elo"":{""ObjectName"":""Elo"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""ParentID"":{""ObjectName"":""ParentID"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""Mangekyo"":{""ObjectName"":""Mangekyo"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""LastGripped"":{""ObjectName"":""LastGripped"",""ObjectClass"":""IntValue"",""ObjectValue"":""98093327""},""LastAge"":{""ObjectName"":""LastAge"",""ObjectClass"":""IntValue"",""ObjectValue"":""1698782887""},""Key11"":{""ObjectName"":""Key11"",""ObjectClass"":""StringValue"",""ObjectValue"":""-""},""AwakenCD"":{""ObjectName"":""AwakenCD"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""LastStomach"":{""ObjectName"":""LastStomach"",""ObjectClass"":""IntValue"",""ObjectValue"":""406""},""ChakraArmorRGB"":{""ObjectName"":""ChakraArmorRGB"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Mastered"":{""ObjectName"":""Mastered"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""HandsignTraining"":{""ObjectName"":""HandsignTraining"",""ObjectClass"":""IntValue"",""ObjectValue"":""1""},""WipeLog"":{""ObjectName"":""WipeLog"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot10"":{""ObjectName"":""Slot10"",""ObjectClass"":""StringValue"",""ObjectValue"":""Genjutsu Release""},""Key9"":{""ObjectName"":""Key9"",""ObjectClass"":""StringValue"",""ObjectValue"":""9""},""Slot5"":{""ObjectName"":""Slot5"",""ObjectClass"":""StringValue"",""ObjectValue"":""Yotsuki Weapon""},""Slot7"":{""ObjectName"":""Slot7"",""ObjectClass"":""StringValue"",""ObjectValue"":""Water Quaking Pillar""},""RESTORE"":{""ObjectName"":""RESTORE"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""TailedBeast"":{""ObjectName"":""TailedBeast"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""ItemSave"":{""ObjectName"":""ItemSave"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""TimesRerolled"":{""ObjectName"":""TimesRerolled"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CurseMarkEXP"":{""ObjectName"":""CurseMarkEXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""HBChoice"":{""ObjectName"":""HBChoice"",""ObjectClass"":""IntValue"",""ObjectValue"":""10""},""WeaponSave"":{""ObjectName"":""WeaponSave"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""PrimaryWep"":{""ObjectName"":""PrimaryWep"",""ObjectClass"":""StringValue"",""ObjectValue"":""Kunai""},""OriginalVillage"":{""ObjectName"":""OriginalVillage"",""ObjectClass"":""IntValue"",""ObjectValue"":""3""},""BijuuSealed"":{""ObjectName"":""BijuuSealed"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Name"":{""ObjectName"":""Name"",""ObjectClass"":""StringValue"",""ObjectValue"":""Justin""},""Parentq"":{""ObjectName"":""Parentq"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""LastChakra"":{""ObjectName"":""LastChakra"",""ObjectClass"":""IntValue"",""ObjectValue"":""965""},""EyeColorG"":{""ObjectName"":""EyeColorG"",""ObjectClass"":""IntValue"",""ObjectValue"":""25""},""Key3"":{""ObjectName"":""Key3"",""ObjectClass"":""StringValue"",""ObjectValue"":""3""},""RU"":{""ObjectName"":""RU"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""PosX"":{""ObjectName"":""PosX"",""ObjectClass"":""IntValue"",""ObjectValue"":""36""},""logcheck"":{""ObjectName"":""logcheck"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot-"":{""ObjectName"":""Slot-"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""Key1"":{""ObjectName"":""Key1"",""ObjectClass"":""StringValue"",""ObjectValue"":""1""},""FamilyID"":{""ObjectName"":""FamilyID"",""ObjectClass"":""StringValue"",""ObjectValue"":""Justin(11)1824402""},""Slot0"":{""ObjectName"":""Slot0"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""GrandParentID"":{""ObjectName"":""GrandParentID"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""Slot3"":{""ObjectName"":""Slot3"",""ObjectClass"":""StringValue"",""ObjectValue"":""Leaf Rising Wind""},""HideName"":{""ObjectName"":""HideName"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Blindness"":{""ObjectName"":""Blindness"",""ObjectClass"":""NumberValue"",""ObjectValue"":""0""},""Slot="":{""ObjectName"":""Slot="",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""AnbuLog"":{""ObjectName"":""AnbuLog"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""BerserkTimes"":{""ObjectName"":""BerserkTimes"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SpentSkillPoints"":{""ObjectName"":""SpentSkillPoints"",""ObjectClass"":""IntValue"",""ObjectValue"":""-20""},""PDLog"":{""ObjectName"":""PDLog"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key6"":{""ObjectName"":""Key6"",""ObjectClass"":""StringValue"",""ObjectValue"":""6""},""berserkcheck"":{""ObjectName"":""berserkcheck"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""EyeColorB"":{""ObjectName"":""EyeColorB"",""ObjectClass"":""IntValue"",""ObjectValue"":""20""},""Slot1"":{""ObjectName"":""Slot1"",""ObjectClass"":""StringValue"",""ObjectValue"":""Cleaver Blade""},""SecondaryAmmo"":{""ObjectName"":""SecondaryAmmo"",""ObjectClass"":""IntValue"",""ObjectValue"":""12""},""Key10"":{""ObjectName"":""Key10"",""ObjectClass"":""StringValue"",""ObjectValue"":""0""},""BDAYS"":{""ObjectName"":""BDAYS"",""ObjectClass"":""StringValue"",""ObjectValue"":""0""},""AgeLimit"":{""ObjectName"":""AgeLimit"",""ObjectClass"":""IntValue"",""ObjectValue"":""2400""},""KPos"":{""ObjectName"":""KPos"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""IsExiled"":{""ObjectName"":""IsExiled"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""TailedBeastMastered"":{""ObjectName"":""TailedBeastMastered"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""MaxAge"":{""ObjectName"":""MaxAge"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Bank"":{""ObjectName"":""Bank"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""ResetPos"":{""ObjectName"":""ResetPos"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SkillPoints"":{""ObjectName"":""SkillPoints"",""ObjectClass"":""IntValue"",""ObjectValue"":""20""},""Rank"":{""ObjectName"":""Rank"",""ObjectClass"":""IntValue"",""ObjectValue"":""19""},""PrimaryCN"":{""ObjectName"":""PrimaryCN"",""ObjectClass"":""IntValue"",""ObjectValue"":""2""},""LastKilledUser"":{""ObjectName"":""LastKilledUser"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Trauma"":{""ObjectName"":""Trauma"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""MissionSuccess"":{""ObjectName"":""MissionSuccess"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CurrentWep"":{""ObjectName"":""CurrentWep"",""ObjectClass"":""IntValue"",""ObjectValue"":""1""},""Slot8"":{""ObjectName"":""Slot8"",""ObjectClass"":""StringValue"",""ObjectValue"":""Basic Genjutsu""},""MissionEXP"":{""ObjectName"":""MissionEXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""138""},""HairColorR"":{""ObjectName"":""HairColorR"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""RyoRES"":{""ObjectName"":""RyoRES"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""LastHealth"":{""ObjectName"":""LastHealth"",""ObjectClass"":""IntValue"",""ObjectValue"":""397""},""Ryo"":{""ObjectName"":""Ryo"",""ObjectClass"":""IntValue"",""ObjectValue"":""553""},""CColorR"":{""ObjectName"":""CColorR"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key7"":{""ObjectName"":""Key7"",""ObjectClass"":""StringValue"",""ObjectValue"":""7""},""WeaveSpeed"":{""ObjectName"":""WeaveSpeed"",""ObjectClass"":""IntValue"",""ObjectValue"":""20""},""RightEye"":{""ObjectName"":""RightEye"",""ObjectClass"":""StringValue"",""ObjectValue"":""Default""},""DefaultMouth"":{""ObjectName"":""DefaultMouth"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""startnewlife"":{""ObjectName"":""startnewlife"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""TrainingEXP"":{""ObjectName"":""TrainingEXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""27""},""CanRank"":{""ObjectName"":""CanRank"",""ObjectClass"":""IntValue"",""ObjectValue"":""1""},""TailedBeastEXP"":{""ObjectName"":""TailedBeastEXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CColorG"":{""ObjectName"":""CColorG"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""MaxTails"":{""ObjectName"":""MaxTails"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Age"":{""ObjectName"":""Age"",""ObjectClass"":""IntValue"",""ObjectValue"":""8""},""Deaths"":{""ObjectName"":""Deaths"",""ObjectClass"":""IntValue"",""ObjectValue"":""3""},""Village"":{""ObjectName"":""Village"",""ObjectClass"":""IntValue"",""ObjectValue"":""2""},""bald"":{""ObjectName"":""bald"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SecondaryCN"":{""ObjectName"":""SecondaryCN"",""ObjectClass"":""IntValue"",""ObjectValue"":""4""},""KillStreak"":{""ObjectName"":""KillStreak"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""PrimaryAmmo"":{""ObjectName"":""PrimaryAmmo"",""ObjectClass"":""IntValue"",""ObjectValue"":""12""},""kek"":{""ObjectName"":""kek"",""ObjectClass"":""IntValue"",""ObjectValue"":""12""},""Influence"":{""ObjectName"":""Influence"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Title"":{""ObjectName"":""Title"",""ObjectClass"":""StringValue"",""ObjectValue"":""Jounin""}},""Skilltree"":{""Wild Water Wave"":{""ObjectName"":""Wild Water Wave"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Water Quaking Pillar"":{""ObjectName"":""Water Quaking Pillar"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Body Flicker"":{""ObjectName"":""Body Flicker"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Laser Circus"":{""ObjectName"":""Laser Circus"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Leaf Rising Wind"":{""ObjectName"":""Leaf Rising Wind"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Basic Genjutsu"":{""ObjectName"":""Basic Genjutsu"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Yotsuki Weapon"":{""ObjectName"":""Yotsuki Weapon"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Water Bullet"":{""ObjectName"":""Water Bullet"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Dynamic Entry"":{""ObjectName"":""Dynamic Entry"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Substitution"":{""ObjectName"":""Substitution"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""1000 Years of Death"":{""ObjectName"":""1000 Years of Death"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Shadow Clone"":{""ObjectName"":""Shadow Clone"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Hail"":{""ObjectName"":""Hail"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Shadow Shuriken"":{""ObjectName"":""Shadow Shuriken"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Percutiens"":{""ObjectName"":""Percutiens"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Genjutsu Release"":{""ObjectName"":""Genjutsu Release"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Clone Jutsu"":{""ObjectName"":""Clone Jutsu"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Leaf Whirlwind"":{""ObjectName"":""Leaf Whirlwind"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""}},""Copy"":[]}"
1N7ZWf1w,Untitled,sissou123,Python,Tuesday 31st of October 2023 05:39:28 PM CDT,"Python Pandas Information Brief training 2023 Advance by Doing.
Accelerate Information Examination and Perception with Python Pandas library in simple and straightforward manner likewise Expert utilizing it with SQL.
for more:https://cuty.io/kzk52"
LBQXihve,Untitled,sissou123,Python,Tuesday 31st of October 2023 05:24:57 PM CDT,"information Control in Python: Expert Python, Numpy and Pandas
Learn Python, NumPy and Pandas for Information Science: Expert fundamental information control for information science in python
for more:https://cuty.io/TVlm4SyLE"
x0PB1xHt,Untitled,sissou123,Python,Tuesday 31st of October 2023 05:05:31 PM CDT,"Python for Data Science & Machine Learning: Zero to Hero
Master Data Science & Machine Learning in Python: Numpy, Pandas, Matplotlib, Scikit-Learn, Machine Learning, and more!
for more:https://cuty.io/tgDaaWD0kQ"
uwpRzZss,MOK layout Zanabazar,dksetiavan,YAML,Tuesday 31st of October 2023 05:00:51 PM CDT,"{
""title"":""Zanabazar"",
""onScreen"":{
""main"":[
""1234567890"",
""[MC:𑨇][MC:𑨄][MC:𑨆][MC:𑨠][MC:𑨱][MC:𑨍][MC:𑨛][MC:𑨒][MC:𑨖][MC:𑨥][MC:𑨀]"",
""[MC:𑨊][MC:𑨁][MC:𑨃][MC:𑨞][MC:𑨫][MC:𑨋][MC:𑨙][MC:𑨐][MC:𑨔][MC:𑨣][MC:𑨺]"",
""[SHIFT][MC:𑨸][MC:𑨳][MC:𑨢][MC:𑨝][MC:𑨭][MC:𑨬][MC:𑨰][MC:𑨪][MC:𑨨][DEL]"",
""[TOOL][ALTGR:[MC:𑩂]][SPACE][][][SYM:[MC:𑩃]][ENTER]""
],

""shifted"":[
""[MC:𑨵][MC:𑨶][MC:𑨷][MC:𑩂][MC:𑩃][MC:𑩄][MC:𑨿][MC:𑩀][MC:𑩅][MC:𑩆]"",
""[MC:𑨈][MC:𑩁][MC:𑨅][MC:𑨡][MC:𑨏][MC:𑨎][MC:𑨜][MC:𑨲][MC:𑨗][MC:𑨦][MC:𑨩]"",
""[MC:𑩇][MC:𑨉][MC:𑨂][MC:𑨟][MC:𑨓][MC:𑨌][MC:𑨚][MC:𑨑][MC:𑨕][MC:𑨤][MC:𑨼]"",
""[SHIFT][MC:𑨹][MC:𑨴][MC:𑨻][MC:𑨘][MC:𑨾][MC:𑨽][MC:𑨮][MC:𑨯][MC:𑨧][DEL]"",
""[LOCK][ALTGR:[MC:𑩁]][SPACE][][][SYM:[MC:𑩄]][ENTER]""
],

""altGr"":[
""1234567890"",
""qwertyuiop"",
""asdfghjkl"",
""[SHIFT]zxcvbnm[DEL]"",
""[LOCK][ALTGR:,][SPACE][][][SYM:.][ENTER]""
]}}"
372vQsLZ,Untitled,B-X-1,Bash,Tuesday 31st of October 2023 04:59:13 PM CDT,return to ((22222883773894487367829))
54PwAkfA,Blink firmware(Arduino Nano),anticlown,C,Tuesday 31st of October 2023 04:57:17 PM CDT,"#include <mega328p.h>
#include <delay.h>

void main(void) {
    int i = 0;
    while(1){                                                                                               
        i = i ^ 1;
        delay_ms(200);
        PORTB = (i<<PORTB7)|(i<<PORTB6)|(i<<PORTB5)|(i<<PORTB4)|(i<<PORTB3)|(i<<PORTB2)|(i<<PORTB1)|(i<<PORTB0);
    }
}"
ij0Dsjau,shop_draw cached,shadowshine57,C,Tuesday 31st of October 2023 04:48:02 PM CDT,"// Shop draw function for each shelf slot, replaces GetItem_Draw inside of EnGirlA_Draw
void shop_draw(z64_actor_t *actor, z64_game_t *game) {
    EnGirlA *this = (EnGirlA *)actor;
    model_t model = {
        .object_id = 0x0000,
        .graphic_id = 0x00,
    };
 
    //See if there is cached data stored in the actor's isInitialized variable at 0x018C. 
    //Cached data is as follows:
    //2 bytes: model object_id
    //1 byte: model graphic_id
    uint16_t object_id = (((uint8_t*)this)[0x018D] << 1) & ((uint8_t*)this)[0x018E];
    uint8_t graphic_id = ((uint8_t*)this)[0x18F];    
 
    /*
        SOLD OUT is given a get item ID of 0x53 for the slot,
        which conflicts with the Gerudo Mask override if it's
        shuffled and the override in the Gerudo Mask slot happens
        to be progressive. To prevent the mask shop from filling up
        with longshots or golden gauntlets, check the currently loaded
        object ID for OBJECT_GI_SOLDOUT (0x148) before attempting to use
        the override model.
    */
    // There is already cached model data, use it instead of doing lookups
    if (object_id > 0 && graphic_id > 0 && graphic_id != 0xFF && game->obj_ctxt.objects[this->objBankIndex].id != 0x148) {       
        model.object_id = object_id;
        model.graphic_id = graphic_id;
        draw_model(model, actor, game, 0.0);
        return;
    }

    // There is no cached data, check if there needs to be
    if (this->getItemId && game->obj_ctxt.objects[this->objBankIndex].id != 0x148) {
        // If the item isn't overridden then we don't want to do an unnecessary lookup, so we store -1 in graphic_id
        if (graphic_id != -1) {
            // Look up the override so we can either cache its model data, or cache that it doesn't exist
            override_t override = lookup_override((z64_actor_t*) this, z64_game.scene_index, this->getItemId);
            if (override.key.all) { // Override exists, cache the model data and load
                lookup_model_by_override(&model, override);
                if (model.object_id != 0x0000) {
                    // Cache object_id and graphic_id
                    ((uint8_t*)this)[0x18D] = (model.object_id >> 1);
                    ((uint8_t*)this)[0x18E] = (model.object_id & 0xFF);
                    ((uint8_t*)this)[0x18F] = model.graphic_id;
                    draw_model(model, actor, game, 0.0);
                }
                return;
            }
            else { // Override does not exist
                ((uint8_t*)this)[0x18D] = 0;
                ((uint8_t*)this)[0x18E] = 0;
                ((uint8_t*)this)[0x18F] = 0xFF;
            }
        }
    }

    // vanilla draw function if the slot is a regular shop item, shuffled or unshuffled
    GetItem_Draw(game, this->giDrawId);
}"
gR6rPAgN,Binary Tree(example),anticlown,C++,Tuesday 31st of October 2023 04:38:09 PM CDT,"#include <iostream>
#include <random>
#include <queue>

int getRandomNumber(int min, int max) {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<int> dis(min, max);
    return dis(gen);
}

struct Trunk
{
    Trunk* prev;
    std::string str;

    Trunk(Trunk* prev, std::string str)
    {
        this->prev = prev;
        this->str = str;
    }
};

class Node {
public:
    int data;
    Node* left;
    Node* right;
    Node* next;

    explicit Node(int value) {
        data = value;
        left = nullptr;
        right = nullptr;
        next = nullptr;
    }
};

class BinarySearchTree {
private:
    Node* root;

    Node* insertNode(Node* node, int value) {
        if (node == nullptr) {
            return new Node(value);
        }

        if (value < node->data) {
            node->left = insertNode(node->left, value);
        }
        else if (value > node->data) {
            node->right = insertNode(node->right, value);
        }

        return node;
    }

    static Node* findMinNode(Node* node) {
        while (node->left != nullptr) {
            node = node->left;
        }
        return node;
    }

    Node* deleteNode(Node* node, int value) {
        if (node == nullptr) {
            return nullptr;
        }

        if (value < node->data) {
            node->left = deleteNode(node->left, value);
        }
        else if (value > node->data) {
            node->right = deleteNode(node->right, value);
        }
        else {
            if (node->left == nullptr && node->right == nullptr) {
                delete node;
                node = nullptr;
            }
            else if (node->left == nullptr) {
                Node* temp = node;
                node = node->right;
                delete temp;
            }
            else if (node->right == nullptr) {
                Node* temp = node;
                node = node->left;
                delete temp;
            }
            else {
                Node* temp = findMinNode(node->right);
                node->data = temp->data;
                node->right = deleteNode(node->right, temp->data);
            }
        }

        return node;
    }

    void inorderTraversal(Node* node) {
        if (node != nullptr) {
            inorderTraversal(node->left);
            std::cout << node->data << "" "";
            inorderTraversal(node->right);
        }
    }

    void preorderTraversal(Node* node) {
        if (node != nullptr) {
            std::cout << node->data << "" "";
            preorderTraversal(node->left);
            preorderTraversal(node->right);
        }
    }

    void postorderTraversal(Node* node) {
        if (node != nullptr) {
            postorderTraversal(node->left);
            postorderTraversal(node->right);
            std::cout << node->data << "" "";
        }
    }

    void preorderTraversalFull(Node* node) {
        if (node != nullptr) {
            std::cout << node->data << "" "";
            if (node->left != nullptr) {
                preorderTraversalFull(node->left);
            }
            else {
                std::cout << ""null "";
            }
            if (node->right != nullptr) {
                preorderTraversalFull(node->right);
            }
            else {
                std::cout << ""null "";
            }
        }
    }

    void inorderTraversalFull(Node* node) {
        if (node != nullptr) {
            if (node->left != nullptr) {
                inorderTraversalFull(node->left);
            }
            else {
                std::cout << ""null "";
            }
            std::cout << node->data << "" "";
            if (node->right != nullptr) {
                inorderTraversalFull(node->right);
            }
            else {
                std::cout << ""null "";
            }
        }
    }

    void postorderTraversalFull(Node* node) {
        if (node != nullptr) {
            if (node->left != nullptr) {
                postorderTraversalFull(node->left);
            }
            else {
                std::cout << ""null "";
            }
            if (node->right != nullptr) {
                postorderTraversalFull(node->right);
            }
            else {
                std::cout << ""null "";
            }
            std::cout << node->data << "" "";
        }
    }

    void inorderTraversalThread(Node* node) {
        if (node != nullptr) {
            inorderTraversalThread(node->left);
            std::cout << node->data << "" -> "";
            if (node->next != nullptr) {
                std::cout << node->next->data;
            }
            else {
                std::cout << ""null"";
            }
            std::cout << std::endl;
            inorderTraversalThread(node->right);
        }
    }

    void showTrunks(Trunk* p)
    {
        if (p == nullptr) {
            return;
        }

        showTrunks(p->prev);
        std::cout << p->str;
    }

    void printTree(Node* root, Trunk* prev = nullptr, bool isLeft = false)
    {
        if (root == nullptr) {
            return;
        }

        std::string prev_str = ""    "";
        auto* trunk = new Trunk(prev, prev_str);

        printTree(root->right, trunk, true);

        if (!prev) {
            trunk->str = ""---"";
        }
        else if (isLeft)
        {
            trunk->str = "".---"";
            prev_str = ""   |"";
        }
        else {
            trunk->str = ""`---"";
            prev->str = prev_str;
        }

        showTrunks(trunk);
        std::cout << "" "" << root->data << std::endl;

        if (prev) {
            prev->str = prev_str;
        }
        trunk->str = ""   |"";

        printTree(root->left, trunk, false);
    }

public:
    BinarySearchTree() {
        root = nullptr;
    }

    void insert(int value) {
        root = insertNode(root, value);
    }

    void remove(int value) {
        root = deleteNode(root, value);
    }

    void inorder() {
        inorderTraversal(root);
        std::cout << std::endl;
    }

    void preorder() {
        preorderTraversal(root);
        std::cout << std::endl;
    }

    void postorder() {
        postorderTraversal(root);
        std::cout << std::endl;
    }

    void preorderFull() {
        preorderTraversalFull(root);
        std::cout << std::endl;
    }

    void inorderFull() {
        inorderTraversalFull(root);
        std::cout << std::endl;
    }

    void postorderFull() {
        postorderTraversalFull(root);
        std::cout << std::endl;
    }

    void reverseInorderThread(Node* node, Node*& prev) {
        if (node == nullptr) {
            return;
        }

        reverseInorderThread(node->left, prev);

        node->next = prev;

        prev = node;

        reverseInorderThread(node->right, prev);
    }

    void reverseInorderThread() {
        Node* prev = nullptr;
        reverseInorderThread(root, prev);
    }

    void inorderThread() {
        inorderTraversalThread(root);
    }

    void print() {
        printTree(root);
    }
};

int main() {
    BinarySearchTree tree;

    for (int i = 0; i < 100; i++) {
        tree.insert(getRandomNumber(-100, 100));
    }

    tree.insert(10);
    tree.insert(3);
    tree.insert(-7);
    tree.insert(0);
    tree.insert(9);
    tree.insert(39);

    tree.print();

    tree.inorder();
    tree.postorder();
    tree.preorder();

    tree.inorderFull();
    tree.postorderFull();
    tree.preorderFull();

    tree.reverseInorderThread();
    tree.inorderThread();

    tree.print();

    system(""pause"");

    return 0;
}"
ZEh5Rju7,Структуры,anticlown,C,Tuesday 31st of October 2023 04:36:09 PM CDT,"#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <locale.h>

struct enrollee
{
    char* surname;
    char* city;
    float GPA;
};

int main() {
    setlocale(LC_ALL, ""Rus"");
    printf(""\tДанная программа получает список абитуриентов и выводит в алфавитном порядке список тех, кто проживает в Минске и у кого средний балл 7 и выше. \n"");

    struct enrollee list[10] = { { ""Устинович"", ""Сенно"", 9.0 }, { ""Ханенко"", ""Минск"", 7.5 }, { ""Карась"", ""Гродно"", 9.0 }, { ""Арефин"", ""Брест"", 6.7 } , { ""Асепков"", ""Витебск"", 5.2}, 
                            { ""Елькин"", ""Витебск"", 8.3 }, { ""Кротюк"", ""Минск"", 7.2 }, { ""Кирлица"", ""Минск"", 7.5 }, { ""Заяц"", ""Минск"", 7.1 }, { ""Крутько"", ""Минск"", 10.0 } };

    printf(""\t\t\t\t Введенный список: \n"");

    for (int i = 0; i < 10; i++) {
        printf(""Студент номер %d:\n Фамилия: %s;\n Город: %s;\n Средний балл: %.2f;\n\n"", i + 1, list[i].surname, list[i].city, list[i].GPA);
    }

    for (int i = 0; i < 9; i++) {
        for (int j = 0; j < 10 - i - 1; j++) {
            if (strcmp(list[j].surname, list[j + 1].surname) > 0) {
                // меняем элементы местами
                struct enrollee temp;
                temp = list[j];
                list[j] = list[j + 1];
                list[j + 1] = temp;
            }
        }
    }

    printf(""\t\t\t\t Отсортированный список: \n"");

    for (int i = 0; i < 10; i++) {
        printf(""Студент номер %d:\n Фамилия: %s;\n Город: %s;\n Средний балл: %.2f;\n\n"", i + 1, list[i].surname, list[i].city, list[i].GPA);
    }

    printf(""\t\t\t\t Список по заданным фильтрам: \n"");

    for (int i = 0; i < 10; i++) {
        if (strcmp(list[i].city, ""Минск"") == 0 && list[i].GPA >= 7.0)
            printf(""Студент номер %d:\n Фамилия: %s;\n Город: %s;\n Средний балл: %.2f;\n\n"", i + 1, list[i].surname, list[i].city, list[i].GPA);
    }

    return 0;
}"
wRsCHWSh,TheMiniKitty11's Data,azimuths,JSON,Tuesday 31st of October 2023 04:32:51 PM CDT,"{""Stats"":{""Key5"":{""ObjectName"":""Key5"",""ObjectClass"":""StringValue"",""ObjectValue"":""5""},""PrimaryCN"":{""ObjectName"":""PrimaryCN"",""ObjectClass"":""IntValue"",""ObjectValue"":""5""},""mapmove1"":{""ObjectName"":""mapmove1"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""TrainingEXP"":{""ObjectName"":""TrainingEXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key12"":{""ObjectName"":""Key12"",""ObjectClass"":""StringValue"",""ObjectValue"":""=""},""Blind"":{""ObjectName"":""Blind"",""ObjectClass"":""NumberValue"",""ObjectValue"":""0""},""Slot2"":{""ObjectName"":""Slot2"",""ObjectClass"":""StringValue"",""ObjectValue"":""Grenade Kick""},""TailedBeastLevel"":{""ObjectName"":""TailedBeastLevel"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CombatEXP"":{""ObjectName"":""CombatEXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Personality"":{""ObjectName"":""Personality"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""GripCount"":{""ObjectName"":""GripCount"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Marking"":{""ObjectName"":""Marking"",""ObjectClass"":""IntValue"",""ObjectValue"":""69""},""SkinColor"":{""ObjectName"":""SkinColor"",""ObjectClass"":""IntValue"",""ObjectValue"":""7""},""RP"":{""ObjectName"":""RP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot="":{""ObjectName"":""Slot="",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""Slot11"":{""ObjectName"":""Slot11"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""MSAbility1"":{""ObjectName"":""MSAbility1"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""KPos"":{""ObjectName"":""KPos"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""LINDAMINISTARTUP"":{""ObjectName"":""LINDAMINISTARTUP"",""ObjectClass"":""IntValue"",""ObjectValue"":""5""},""Slot4"":{""ObjectName"":""Slot4"",""ObjectClass"":""StringValue"",""ObjectValue"":""Landmine Stomp""},""Slot9"":{""ObjectName"":""Slot9"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""Version"":{""ObjectName"":""Version"",""ObjectClass"":""IntValue"",""ObjectValue"":""70""},""HairColorR"":{""ObjectName"":""HairColorR"",""ObjectClass"":""IntValue"",""ObjectValue"":""154""},""Key4"":{""ObjectName"":""Key4"",""ObjectClass"":""StringValue"",""ObjectValue"":""4""},""CurseMarkLevel"":{""ObjectName"":""CurseMarkLevel"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key2"":{""ObjectName"":""Key2"",""ObjectClass"":""StringValue"",""ObjectValue"":""2""},""Genjutsu"":{""ObjectName"":""Genjutsu"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SwordSave"":{""ObjectName"":""SwordSave"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""BijuuXP"":{""ObjectName"":""BijuuXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key3"":{""ObjectName"":""Key3"",""ObjectClass"":""StringValue"",""ObjectValue"":""3""},""BonusSkillPoints"":{""ObjectName"":""BonusSkillPoints"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CColorB"":{""ObjectName"":""CColorB"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""PosY"":{""ObjectName"":""PosY"",""ObjectClass"":""IntValue"",""ObjectValue"":""214""},""SPR"":{""ObjectName"":""SPR"",""ObjectClass"":""IntValue"",""ObjectValue"":""12""},""BijuuConvo"":{""ObjectName"":""BijuuConvo"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""jincooldown"":{""ObjectName"":""jincooldown"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Ken"":{""ObjectName"":""Ken"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Scar"":{""ObjectName"":""Scar"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot12"":{""ObjectName"":""Slot12"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""RecentTrainings"":{""ObjectName"":""RecentTrainings"",""ObjectClass"":""StringValue"",""ObjectValue"":""{}""},""EyeColorR"":{""ObjectName"":""EyeColorR"",""ObjectClass"":""IntValue"",""ObjectValue"":""232""},""HairColorG"":{""ObjectName"":""HairColorG"",""ObjectClass"":""IntValue"",""ObjectValue"":""136""},""RaidCD"":{""ObjectName"":""RaidCD"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot6"":{""ObjectName"":""Slot6"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""HairColorB"":{""ObjectName"":""HairColorB"",""ObjectClass"":""IntValue"",""ObjectValue"":""112""},""Gender"":{""ObjectName"":""Gender"",""ObjectClass"":""IntValue"",""ObjectValue"":""1""},""MSAbility2"":{""ObjectName"":""MSAbility2"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""Kids"":{""ObjectName"":""Kids"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SecondaryWep"":{""ObjectName"":""SecondaryWep"",""ObjectClass"":""StringValue"",""ObjectValue"":""Kunai""},""PosZ"":{""ObjectName"":""PosZ"",""ObjectClass"":""IntValue"",""ObjectValue"":""-5432""},""UnlockedCloak"":{""ObjectName"":""UnlockedCloak"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CloakTime"":{""ObjectName"":""CloakTime"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""BijuuRelation"":{""ObjectName"":""BijuuRelation"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Prestige"":{""ObjectName"":""Prestige"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Elo"":{""ObjectName"":""Elo"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""PosX"":{""ObjectName"":""PosX"",""ObjectClass"":""IntValue"",""ObjectValue"":""3246""},""Mangekyo"":{""ObjectName"":""Mangekyo"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""LastGripped"":{""ObjectName"":""LastGripped"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""LastAge"":{""ObjectName"":""LastAge"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key11"":{""ObjectName"":""Key11"",""ObjectClass"":""StringValue"",""ObjectValue"":""-""},""AwakenCD"":{""ObjectName"":""AwakenCD"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""LastStomach"":{""ObjectName"":""LastStomach"",""ObjectClass"":""IntValue"",""ObjectValue"":""171""},""ChakraArmorRGB"":{""ObjectName"":""ChakraArmorRGB"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Mastered"":{""ObjectName"":""Mastered"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""HandsignTraining"":{""ObjectName"":""HandsignTraining"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""WipeLog"":{""ObjectName"":""WipeLog"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot10"":{""ObjectName"":""Slot10"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""Key9"":{""ObjectName"":""Key9"",""ObjectClass"":""StringValue"",""ObjectValue"":""9""},""Slot5"":{""ObjectName"":""Slot5"",""ObjectClass"":""StringValue"",""ObjectValue"":""Leaf Whirlwind""},""Slot7"":{""ObjectName"":""Slot7"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""RESTORE"":{""ObjectName"":""RESTORE"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""TailedBeast"":{""ObjectName"":""TailedBeast"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""ItemSave"":{""ObjectName"":""ItemSave"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""TimesRerolled"":{""ObjectName"":""TimesRerolled"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CurseMarkEXP"":{""ObjectName"":""CurseMarkEXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""HBChoice"":{""ObjectName"":""HBChoice"",""ObjectClass"":""IntValue"",""ObjectValue"":""1""},""WeaponSave"":{""ObjectName"":""WeaponSave"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""PrimaryWep"":{""ObjectName"":""PrimaryWep"",""ObjectClass"":""StringValue"",""ObjectValue"":""Kunai""},""OriginalVillage"":{""ObjectName"":""OriginalVillage"",""ObjectClass"":""IntValue"",""ObjectValue"":""6""},""BijuuSealed"":{""ObjectName"":""BijuuSealed"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Name"":{""ObjectName"":""Name"",""ObjectClass"":""StringValue"",""ObjectValue"":""Dumpling""},""SeenDeaths"":{""ObjectName"":""SeenDeaths"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""LastChakra"":{""ObjectName"":""LastChakra"",""ObjectClass"":""IntValue"",""ObjectValue"":""240""},""Parentq"":{""ObjectName"":""Parentq"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key1"":{""ObjectName"":""Key1"",""ObjectClass"":""StringValue"",""ObjectValue"":""1""},""RU"":{""ObjectName"":""RU"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""EyeColorG"":{""ObjectName"":""EyeColorG"",""ObjectClass"":""IntValue"",""ObjectValue"":""149""},""logcheck"":{""ObjectName"":""logcheck"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot-"":{""ObjectName"":""Slot-"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""PrimaryAmmo"":{""ObjectName"":""PrimaryAmmo"",""ObjectClass"":""IntValue"",""ObjectValue"":""12""},""FamilyID"":{""ObjectName"":""FamilyID"",""ObjectClass"":""StringValue"",""ObjectValue"":""Dumpling(19)1116567""},""DateRecord"":{""ObjectName"":""DateRecord"",""ObjectClass"":""IntValue"",""ObjectValue"":""2577""},""IsExiled"":{""ObjectName"":""IsExiled"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot3"":{""ObjectName"":""Slot3"",""ObjectClass"":""StringValue"",""ObjectValue"":""Explosive Boost""},""Key8"":{""ObjectName"":""Key8"",""ObjectClass"":""StringValue"",""ObjectValue"":""8""},""Blindness"":{""ObjectName"":""Blindness"",""ObjectClass"":""NumberValue"",""ObjectValue"":""0""},""HideName"":{""ObjectName"":""HideName"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""MaxAge"":{""ObjectName"":""MaxAge"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""BerserkTimes"":{""ObjectName"":""BerserkTimes"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SpentSkillPoints"":{""ObjectName"":""SpentSkillPoints"",""ObjectClass"":""IntValue"",""ObjectValue"":""-7""},""PDLog"":{""ObjectName"":""PDLog"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key6"":{""ObjectName"":""Key6"",""ObjectClass"":""StringValue"",""ObjectValue"":""6""},""berserkcheck"":{""ObjectName"":""berserkcheck"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""EyeColorB"":{""ObjectName"":""EyeColorB"",""ObjectClass"":""IntValue"",""ObjectValue"":""191""},""Slot1"":{""ObjectName"":""Slot1"",""ObjectClass"":""StringValue"",""ObjectValue"":""Rocket Fist""},""ToggleAccessories"":{""ObjectName"":""ToggleAccessories"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key10"":{""ObjectName"":""Key10"",""ObjectClass"":""StringValue"",""ObjectValue"":""0""},""BDAYS"":{""ObjectName"":""BDAYS"",""ObjectClass"":""StringValue"",""ObjectValue"":""0""},""AgeLimit"":{""ObjectName"":""AgeLimit"",""ObjectClass"":""IntValue"",""ObjectValue"":""2400""},""GrandParentID"":{""ObjectName"":""GrandParentID"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""TailedBeastMastered"":{""ObjectName"":""TailedBeastMastered"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot0"":{""ObjectName"":""Slot0"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""LeftEye"":{""ObjectName"":""LeftEye"",""ObjectClass"":""StringValue"",""ObjectValue"":""Default""},""Bank"":{""ObjectName"":""Bank"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""ResetPos"":{""ObjectName"":""ResetPos"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SkillPoints"":{""ObjectName"":""SkillPoints"",""ObjectClass"":""IntValue"",""ObjectValue"":""7""},""Rank"":{""ObjectName"":""Rank"",""ObjectClass"":""IntValue"",""ObjectValue"":""6""},""SecondaryAmmo"":{""ObjectName"":""SecondaryAmmo"",""ObjectClass"":""IntValue"",""ObjectValue"":""12""},""LastKilledUser"":{""ObjectName"":""LastKilledUser"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Trauma"":{""ObjectName"":""Trauma"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""MissionSuccess"":{""ObjectName"":""MissionSuccess"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CurrentWep"":{""ObjectName"":""CurrentWep"",""ObjectClass"":""IntValue"",""ObjectValue"":""1""},""MissionEXP"":{""ObjectName"":""MissionEXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""ParentID"":{""ObjectName"":""ParentID"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""MaxRank"":{""ObjectName"":""MaxRank"",""ObjectClass"":""IntValue"",""ObjectValue"":""24""},""RyoRES"":{""ObjectName"":""RyoRES"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""LastHealth"":{""ObjectName"":""LastHealth"",""ObjectClass"":""IntValue"",""ObjectValue"":""233""},""Ryo"":{""ObjectName"":""Ryo"",""ObjectClass"":""IntValue"",""ObjectValue"":""100""},""CColorR"":{""ObjectName"":""CColorR"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key7"":{""ObjectName"":""Key7"",""ObjectClass"":""StringValue"",""ObjectValue"":""7""},""WeaveSpeed"":{""ObjectName"":""WeaveSpeed"",""ObjectClass"":""IntValue"",""ObjectValue"":""20""},""RightEye"":{""ObjectName"":""RightEye"",""ObjectClass"":""StringValue"",""ObjectValue"":""Default""},""DefaultMouth"":{""ObjectName"":""DefaultMouth"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""AnbuLog"":{""ObjectName"":""AnbuLog"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CanRank"":{""ObjectName"":""CanRank"",""ObjectClass"":""IntValue"",""ObjectValue"":""1""},""startnewlife"":{""ObjectName"":""startnewlife"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""TailedBeastEXP"":{""ObjectName"":""TailedBeastEXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CColorG"":{""ObjectName"":""CColorG"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""MaxTails"":{""ObjectName"":""MaxTails"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Age"":{""ObjectName"":""Age"",""ObjectClass"":""IntValue"",""ObjectValue"":""12""},""Village"":{""ObjectName"":""Village"",""ObjectClass"":""IntValue"",""ObjectValue"":""6""},""bald"":{""ObjectName"":""bald"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Deaths"":{""ObjectName"":""Deaths"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SecondaryCN"":{""ObjectName"":""SecondaryCN"",""ObjectClass"":""IntValue"",""ObjectValue"":""3""},""KillStreak"":{""ObjectName"":""KillStreak"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot8"":{""ObjectName"":""Slot8"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""kek"":{""ObjectName"":""kek"",""ObjectClass"":""IntValue"",""ObjectValue"":""19""},""Influence"":{""ObjectName"":""Influence"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Title"":{""ObjectName"":""Title"",""ObjectClass"":""StringValue"",""ObjectValue"":""Academy Student""}},""Skilltree"":{""Rocket Fist"":{""ObjectName"":""Rocket Fist"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Explosive Boost"":{""ObjectName"":""Explosive Boost"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Leaf Whirlwind"":{""ObjectName"":""Leaf Whirlwind"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Dynamic Entry"":{""ObjectName"":""Dynamic Entry"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Grenade Kick"":{""ObjectName"":""Grenade Kick"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Substitution"":{""ObjectName"":""Substitution"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""1000 Years of Death"":{""ObjectName"":""1000 Years of Death"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Landmine Stomp"":{""ObjectName"":""Landmine Stomp"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""}},""Copy"":[]}"
ZiHmpKpN,Файлы + Структуры,anticlown,C,Tuesday 31st of October 2023 04:27:14 PM CDT,"#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>
#include <locale.h>
#include <string.h>
#include <malloc.h>

/* employee struct start */
typedef struct {
    char surname[20];
    char department[2];
    int salary;
} employee;

employee* getEmployeeList(char* filePath, int size) {
    employee* list = (employee*)malloc(size * sizeof(employee));
    FILE* file;
    file = fopen(filePath, ""r"");
    int temp;
    fscanf(file, ""%d"", &temp);
    for (int i = 0; i < size; i++)
    {
        fscanf(file, ""%s"", &list[i].surname);
        fscanf(file, ""%s"", &list[i].department);
        fscanf(file, ""%d"", &list[i].salary);
    }
    fclose(file);
    return list;
}

void addEmployee(int size, employee* list) {
    size++;
    list = (employee*)realloc(list, size * sizeof(employee));
    printf(""\nВведите фамилию работника: "");
    scanf(""%s"", &list[size - 1].surname);
    printf(""\nВведите отдел работника: "");
    scanf(""%s"", &list[size - 1].department);
    printf(""\nВведите зарплату работника: "");
    scanf(""%d"", &list[size - 1].salary);
}

void changeEmployee(employee* list) {
    int employeeToChange;
    printf(""\nВыберете необходимого для изменения работника по номеру из списка: "");
    scanf(""%d"", &employeeToChange);
    printf(""Введите новую фамилию работника: "");
    scanf(""%s"", &list[employeeToChange - 1].surname);
    printf(""Введите новую отдел работника: "");
    scanf(""%s"", &list[employeeToChange - 1].department);
    printf(""Введите новую зарплату работника: "");
    scanf(""%d"", &list[employeeToChange - 1].salary);
}

void deleteEmployee(int size, employee* list) {
    int employeeToDelete;
    printf(""\nВыберете необходимого для удаления работника по номеру из списка: "");
    scanf(""%d"", &employeeToDelete);
    for (int i = employeeToDelete - 1; i < size; i++)
        memmove(&list[i], &list[i + 1], 26); //26 - размер одной записи типа employee

    size--;
    list = (employee*)realloc(list, size * sizeof(employee));
}

void printEmployeeList(int size, employee* list) {
    printf(""\n\tКоличество работников: %d\n"", size);
    printf(""\tВывод списка всех работников:\n"");
    for (int i = 0; i < size; i++)
    {
        printf(""%d. %s из отдела %s - зарплата равна %d $\n"", i + 1, list[i].surname, list[i].department, list[i].salary);
    }
}

int calculateAllPayments(int size, employee* list) {
    int sum = 0;
    for (int i = 0; i < size; i++)
    {
        if (strcmp(list[i].department, ""A"") == 0)
            sum += list[i].salary;
    }
    return sum;
}

float calculateAvarageSalary(int size, int paymentsSum) {
    float averageSalary = 0;
    averageSalary = paymentsSum / size;
    return averageSalary;
}

void printPaymentsAndSalary(int paymentsSum, float averageSalary) {
    printf(""Общая сумма выплат отдела А: %d\nСредняя заработная плата сотрудника отдела А: %.2f$"", paymentsSum, averageSalary);
}
/* employee struct end */


/* file funcs/procs start */
char* getPathToFile() {
    static char filePath[20];
    printf(""\nВведите путь к файлу: "");
    gets_s(filePath, 20);
    return filePath;
}

int getSize(char filePath[20]) {
    FILE* file;
    file = fopen(filePath, ""r"");
    int temp;
    fscanf(file, ""%d"", &temp);
    fclose(file);
    return temp;
}

void endWork(char* filePath, int size, employee* list) {
    FILE* file = fopen(filePath, ""w"");
    fprintf(file, ""%d\n"", size);
    for (int i = 0; i < size; i++)
    {
        fprintf(file, ""%s "", &list[i].surname);
        fprintf(file, ""%s "", &list[i].department);
        fprintf(file, ""%d\n"", list[i].salary);
    }
    fclose(file);

    printf(""\n\t\t\t\t\t\tРабота с файлом успешно закончена.\n"");
}
/* file funcs/procs end */


/* print procs/funcs start */
void printTaskInfo() {
    printf(""Данная программа получает файл со сведениями о месячной заработной плате сотрудников отдела.\n"");
    printf(""Затем вычисляет общую сумму выплат за месяц по отделу А,а также среднемесячный заработок сотрудникам этого отдела.\n"");
}

int getChoice() {
    int choice;
    printf(""\nВыберете опцию меню: "");
    scanf_s(""%d"", &choice);
    return choice;
}

void printMenuOptions() {
    printf(""\t\t\t\t\t\tМеню работы с файлом предлагает следующие опции: \n"");
    printf(""\t\t\t\t\t\t\t 1. Добавить запись о работник\n"");
    printf(""\t\t\t\t\t\t\t 2. Изменить запись о работнике\n"");
    printf(""\t\t\t\t\t\t\t 3. Удалить запись о работнике\n"");
    printf(""\t\t\t\t\t\t\t 4. Вывести список работников\n"");
    printf(""\t\t\t\t\t\t\t 5. Посчитать общие выплаты и среднюю з/п.\n"");
    printf(""\t\t\t\t\t\t\t 6. Закончить работу с файлом\n"");
}

void printErrMessage() {
    printf(""Введено неверное значение! Выберете одну из существующих опций.\n"");
}
/* print procs/funcs end */

int main()
{
    setlocale(LC_ALL, ""Rus"");
    printTaskInfo();

    char* filePath = getPathToFile();
    int size = getSize(filePath);
    employee* list = getEmployeeList(filePath, size);

    printMenuOptions();
    int choice = 0;
    while (choice != 6)
    {
        choice = getChoice();
        switch (choice)
        {
            case 1: //добавить запись
            {
                addEmployee(size, list);
                break;
            }
            case 2: //изменить запись
            {
                changeEmployee(list);
                break;
            }
            case 3: //удалить запись
            {
                deleteEmployee(size, list);
                break;
            }
            case 4: //вывести текущий список
            {
                printEmployeeList(size, list);
                break;
            }
            case 5: //посчитать общие выплаты и среднюю зп
            {
                int allPayments = calculateAllPayments(size, list);
                float averageSalary = calculateAvarageSalary(size, allPayments);
                printPaymentsAndSalary(allPayments, averageSalary);
                break;
            }
            case 6: //закончить работу
            {
                endWork(filePath, size, list);
                break;
            }
            default:
            {
                printErrMessage();
            }
        }
    }

    free(list);
    return 0;
}"
yu6RqNZF,random walk ant,Kaelygon,C++,Tuesday 31st of October 2023 04:09:15 PM CDT,"#include <iostream>
#include <SDL2/SDL.h>
#include <stdlib.h>
#include <time.h>



int energy = 16;
const int UPDATE_RATE = 0;
const int SCREEN_WIDTH = 1024;
const int SCREEN_HEIGHT = 1024;
const int GRID_SIZE = 4;  // Size of each grid cell
const int GRID_ROWS = SCREEN_HEIGHT / GRID_SIZE;
const int GRID_COLS = SCREEN_WIDTH / GRID_SIZE;

int antPos[2] = {GRID_ROWS/2,GRID_COLS/2};
int antCol[3] = {64,64,255};
int gridCell[GRID_ROWS][GRID_COLS];

int antDir=0;

void renderWholeGrid(SDL_Renderer* renderer) {
	// Clear the renderer
	SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);

	// Set a different color for each cell
	for (int i = 0; i < GRID_ROWS; ++i) {
		for (int j = 0; j < GRID_COLS; ++j) {
			int red   = gridCell[i][j]*32;
			int green = gridCell[i][j]*32;
			int blue  = gridCell[i][j]*32;

			SDL_SetRenderDrawColor(renderer, red, green, blue, 255);

			SDL_Rect cell = {j * GRID_SIZE, i * GRID_SIZE, GRID_SIZE, GRID_SIZE};
			SDL_RenderFillRect(renderer, &cell);
		}
	}

	SDL_SetRenderDrawColor(renderer, antCol[0], antCol[1], antCol[2], 255);


	SDL_Rect antCell = {antPos[0] * GRID_SIZE, antPos[1] * GRID_SIZE, GRID_SIZE, GRID_SIZE};
	SDL_RenderFillRect(renderer, &antCell);

	// Present the renderer
	SDL_RenderPresent(renderer);
}

void updateAnt(SDL_Renderer* renderer){


	//draw ant old position
		int red   = gridCell[antPos[1]][antPos[0]]*32;
		int green = gridCell[antPos[1]][antPos[0]]*32;
		int blue  = gridCell[antPos[1]][antPos[0]]*32;

		SDL_SetRenderDrawColor(renderer, red, green, blue, 255);

		SDL_Rect cell = {antPos[0] * GRID_SIZE, antPos[1] * GRID_SIZE, GRID_SIZE, GRID_SIZE};
		SDL_RenderFillRect(renderer, &cell);

	//move ant
		if(gridCell[antPos[1]][antPos[0]]){
			antDir+=1;
		}else{
			antDir-=1;
		}
		antDir=(antDir+4)%4;

		int deltay[] = {0,1,0,-1};
		int deltax[] = {-1,0,1,0};

		antPos[0]+=deltax[antDir];
		antPos[1]+=deltay[antDir];

	    antPos[0] = (antPos[0] + GRID_ROWS) % GRID_ROWS;
   		antPos[1] = (antPos[1] + GRID_COLS) % GRID_COLS;
	
	//update cell
		gridCell[antPos[1]][antPos[0]]=!gridCell[antPos[1]][antPos[0]];


	//draw ant
		SDL_SetRenderDrawColor(renderer, antCol[0], antCol[1], antCol[2], 255);
		SDL_Rect antCell = {antPos[0] * GRID_SIZE, antPos[1] * GRID_SIZE, GRID_SIZE, GRID_SIZE};
		SDL_RenderFillRect(renderer, &antCell);

	// Present the renderer
		SDL_RenderPresent(renderer);
		
	printf(""x: %d "",antPos[0]);
	printf(""y: %d	"",antPos[1]);
	printf(""%d\n"",gridCell[antPos[0]][antPos[1]]);
}


int main() {
	srand(time(NULL));

	for (int i = 0; i < GRID_ROWS; ++i) {
		for (int j = 0; j < GRID_COLS; ++j) {
			gridCell[i][j] = ((i+4) / 8 + (j+3) / 8) % 2;
		}
	}
	

	// Initialize SDL
	if (SDL_Init(SDL_INIT_VIDEO) < 0) {
		std::cerr << ""SDL could not initialize! SDL_Error: "" << SDL_GetError() << std::endl;
		return 1;
	}

	// Create a window
	SDL_Window* window = SDL_CreateWindow(""Grid Renderer"", 3400, 600, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN);
	if (window == nullptr) {
		std::cerr << ""Window could not be created! SDL_Error: "" << SDL_GetError() << std::endl;
		return 2;
	}

	// Create a renderer for the window
	SDL_Renderer* renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED);
	if (renderer == nullptr) {
		std::cerr << ""Renderer could not be created! SDL_Error: "" << SDL_GetError() << std::endl;
		return 3;
	}

	bool quit = false;
	SDL_Event e;

	renderWholeGrid(renderer);

	Uint32 startTime = SDL_GetTicks();
	startTime+=UPDATE_RATE;
	int updateWholeRate=1000; //update whole screen per x frames
	int frameNum=0;

	while (!quit) {
		frameNum++;
		if(frameNum>updateWholeRate){
			frameNum=0;
			renderWholeGrid(renderer);
		}

		while (SDL_PollEvent(&e) != 0) {
			if (e.type == SDL_QUIT) {
				quit = true;
			}
			if (e.type == SDL_KEYDOWN && e.key.keysym.sym == SDLK_ESCAPE) {
				quit = true;
			}
		}

		// Calculate the time to render a frame
		Uint32 frameTime = SDL_GetTicks() - startTime;

		// Wait for the remainder of the 1-second frame
		if (frameTime < UPDATE_RATE) {
			SDL_Delay(UPDATE_RATE - frameTime);
		}

		startTime = SDL_GetTicks();

		updateAnt(renderer);
	}

	// Clean up and exit
	SDL_DestroyRenderer(renderer);
	SDL_DestroyWindow(window);
	SDL_Quit();

	return 0;
}
"
vNzWXM3W,Untitled,GASIM_,Python,Tuesday 31st of October 2023 04:05:38 PM CDT,"import pandas as pd
import matplotlib.pyplot as plt

# Загрузка данных
data = pd.read_csv('/datasets/energy_consumption.csv', index_col=[0], parse_dates=[0])
data.sort_index(inplace=True)

# Группировка данных по годам и вычисление среднего потребления для каждого года
average_consumption_by_year = data.resample('1Y').mean()

# Построение графика
plt.figure(figsize=(10, 6))
plt.plot(average_consumption_by_year, marker='o', linestyle='-')
plt.xlabel('Год')
plt.ylabel('Среднее потребление электроэнергии (PJME_MW)')
plt.title('Среднее потребление электроэнергии по годам')
plt.grid(True)
plt.show()"
nyFmvxv3,Untitled,fatalryuu,PostgreSQL,Tuesday 31st of October 2023 04:01:36 PM CDT,"-- search with tags
		SELECT ""task"".*, 
        ""tags"".""id"" AS ""tags.id"", 
        ""tags"".""name"" AS ""tags.name"" 
        FROM(
        SELECT 
            ""task"".""id"", 
            ""task"".""title"", 
            ""task"".""description"", 
            ""task"".""authorId"", 
            ""task"".""updatedAt"" 
        FROM 
            career_day.""Tasks"" AS ""task"" ) AS ""task""
        LEFT OUTER JOIN (
            ""career_day"".""TaskToTag"" AS ""tags->TaskToTagEntity"" 
            INNER JOIN ""career_day"".""Tags"" AS ""tags"" 
            ON ""tags"".""id"" = ""tags->TaskToTagEntity"".""tagId""
        ) 
        ON ""task"".""id"" = ""tags->TaskToTagEntity"".""taskId""  
        GROUP BY 
            ""task"".id, 
            ""task"".title, 
            ""task"".description, 
            ""task"".""authorId"", 
            ""task"".""updatedAt"", 
            ""tags"".id, 
            ""tags"".name
        HAVING 
            ""task"".title LIKE '%%' 
        OR 
            ""task"".description LIKE '%%'	
        ORDER BY ""task"".""updatedAt"" DESC
-- without tags
		SELECT career_day.""Tasks"".id, career_day.""Tasks"".title,
        STRING_AGG(tag_names.name, ', ') AS tag_names
        FROM career_day.""Tasks""
        JOIN career_day.""TaskToTag"" ON career_day.""Tasks"".id = career_day.""TaskToTag"".""taskId""
        JOIN career_day.""Tags"" tag_names ON career_day.""TaskToTag"".""tagId"" = tag_names.id
        WHERE tag_names.name IN ('front-end', 'js')
        GROUP BY career_day.""Tasks"".id, career_day.""Tasks"".title
        HAVING COUNT(DISTINCT tag_names.name) = 2
		AND (career_day.""Tasks"".title LIKE '%%' OR career_day.""Tasks"".description LIKE '%%');
-- with tags		
		SELECT ""task"".*, 
        ""tags"".""id"" AS ""tags.id"", 
        ""tags"".""name"" AS ""tags.name"",
        STRING_AGG(tag_names.name, ', ') AS tag_names
        FROM(
        SELECT 
            ""task"".""id"", 
            ""task"".""title"", 
            ""task"".""description"", 
            ""task"".""authorId"", 
            ""task"".""updatedAt"" 
        FROM 
            career_day.""Tasks"" AS ""task"" 
        ) AS ""task""
        LEFT OUTER JOIN (
            ""career_day"".""TaskToTag"" AS ""tags->TaskToTagEntity"" 
            INNER JOIN ""career_day"".""Tags"" AS ""tags"" 
            ON ""tags"".""id"" = ""tags->TaskToTagEntity"".""tagId""
        ) 
        ON ""task"".""id"" = ""tags->TaskToTagEntity"".""taskId"" 
		LEFT JOIN ""career_day"".""Tags"" AS ""tag_names"" ON ""tags->TaskToTagEntity"".""tagId"" = ""tag_names"".""id""
        WHERE tag_names.name IN ('front-end')
        GROUP BY 
            ""task"".id, 
            ""task"".title, 
            ""task"".description, 
            ""task"".""authorId"", 
            ""task"".""updatedAt"", 
            ""tags"".id, 
            ""tags"".name
        HAVING COUNT(DISTINCT tag_names.name) = 1 
		AND (""task"".title LIKE '%%' OR ""task"".description LIKE '%%')
        ORDER BY ""task"".""updatedAt"" DESC;"
VJxDxnUt,fucking unworking Bin Heap,salexame,C++,Tuesday 31st of October 2023 03:48:02 PM CDT,"#include <iostream>

const long long kInf = 1e17;

struct Node {
  long long data;
  Node* parent = nullptr;
  int rank;
  int num = -1;
  std::vector<Node*> child;

  Node(long long value) : data(value), parent(nullptr), rank(0) {}

  int GetHeap() {
    Node* current = this;
    while (current->parent != nullptr) {
      current = current->parent;
    }
    return current->num;
  }
};

void SiftUp(Node* current) {
  while (current->parent != nullptr && current->data < current->parent->data) {
    std::swap(current->data, current->parent->data);
    current = current->parent;
  }
}

void SiftDown(Node* current) {
  while (current->child.size() > 0) {
    Node* min = nullptr;
    for (auto child_ : current->child) {
      if (min == nullptr || child_->data < min->data) {
        min = child_;
      }
    }
    if (min->data > current->data) {
      break;
    }
    std::swap(min->data, current->data);
    current = min;
  }
}

class BinHeap {
 public:
  Node* Add(long long value) {
    Node* node = new Node(value);
    node->num = num_;
    BinHeap tmp;
    tmp.root_[0] = node;
    Merge(tmp);
    UpdateMin();
    return node;
  }

  void SetNum(int num) { num_ = num; }

  BinHeap() : root_(20, nullptr) {}

  BinHeap(std::vector<Node*>&& heap) : root_(heap) {}

  void Merge(BinHeap& other) {
    Node* current = nullptr;
    for (int i = 0; i < 20; ++i) {
      auto merged = Merge(root_[i], other.root_[i]);
      other.root_[i] = nullptr;
      if (merged != nullptr) {
        if (current == nullptr) {
          if (merged->rank == i) {
            root_[i] = merged;
          } else {
            root_[i] = nullptr;
            current = merged;
          }
        } else {
          if (merged->rank == i) {
            current = Merge(current, merged);
            continue;
          } else {
            root_[i] = current;
            current = merged;
          }
        }
      } else {
        root_[i] = current;
        current = nullptr;
      }
    }
    UpdateMin();
  }

  Node* Merge(Node*& first, Node*& second) {
    if (first == nullptr) {
      if (second != nullptr) {
        second->num = num_;
      }
      return second;
    }
    if (second == nullptr) {
      return first;
    }
    if (first->data < second->data) {
      first->rank++;
      second->parent = first;
      first->child.push_back(second);
      return first;
    }
    first->parent = second;
    second->num = num_;
    second->child.push_back(first);
    return second;
  }

  void ExtractMin(Node* node) {
    BinHeap tmp(std::move(node->child));
    delete node;
    Merge(tmp);
    UpdateMin();
  }

  void Set(Node* node, int value) {
    int prev = node->data;
    node->data = value;
    if (value < prev) {
      SiftUp(node);
    } else {
      SiftDown(node);
    }
    UpdateMin();
  }

  void Erase(Node* node) {
    node->data -= kInf;
    SiftUp(node);
    ExtractMin(node);
    UpdateMin();
  }

  long long GetMin() {
    return min_->data;
  }

  Node* GetMinPtr() {
    return min_;
  }

 private:
  void UpdateMin() {
    Node* min = nullptr;
    for (int i = 0; i < 20; ++i) {
      if (root_[i] != nullptr) {
        if (min == nullptr || min->data > root_[i]->data) {
          min = root_[i];
        }
      }
    }
    min_ = min;
  }

  Node* min_;
  int num_;
  std::vector<Node*> root_;
};

void Request(std::vector<BinHeap>& heap, std::vector<Node*>& index) {
  int type;
  std::cin >> type;
  if (type == 0) {
    int value;
    int num;
    std::cin >> num >> value;
    index.push_back(heap[num - 1].Add(value));
  } else if (type == 1) {
    int first;
    int second;
    std::cin >> first >> second;
    heap[second - 1].Merge(heap[first - 1]);
    int aboba = 1;
  } else if (type == 2) {
    int idx;
    std::cin >> idx;
    int num_heap = index[idx - 1]->GetHeap();
    heap[num_heap].Erase(index[idx - 1]);
  } else if (type == 3) {
    int idx;
    int value;
    std::cin >> idx >> value;
    Node* node = index[idx - 1];
    int number = node->GetHeap();
    heap[number].Set(node, value);
  } else if (type == 4) {
    int idx;
    std::cin >> idx;
    std::cout << heap[idx - 1].GetMin() << '\n';
  } else if (type == 5) {
    int idx;
    std::cin >> idx;
    heap[idx - 1].ExtractMin(heap[idx - 1].GetMinPtr());
  }
}

signed main() {
  int count;
  int queries;
  std::cin >> count >> queries;
  std::vector<BinHeap> heap(count);
  for (int i = 0; i < count; ++i) {
    heap[i].SetNum(i);
  }
  std::vector<Node*> index;
  while (queries-- > 0) {
    Request(heap, index);
  }
}"
8sMWb5cN,3Klay's Data,azimuths,JSON,Tuesday 31st of October 2023 03:43:13 PM CDT,"{""Stats"":{""Key5"":{""ObjectName"":""Key5"",""ObjectClass"":""StringValue"",""ObjectValue"":""5""},""PrimaryCN"":{""ObjectName"":""PrimaryCN"",""ObjectClass"":""IntValue"",""ObjectValue"":""3""},""mapmove1"":{""ObjectName"":""mapmove1"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""TrainingEXP"":{""ObjectName"":""TrainingEXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key12"":{""ObjectName"":""Key12"",""ObjectClass"":""StringValue"",""ObjectValue"":""=""},""Blind"":{""ObjectName"":""Blind"",""ObjectClass"":""NumberValue"",""ObjectValue"":""0""},""Slot2"":{""ObjectName"":""Slot2"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""TailedBeastLevel"":{""ObjectName"":""TailedBeastLevel"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CombatEXP"":{""ObjectName"":""CombatEXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Personality"":{""ObjectName"":""Personality"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""GripCount"":{""ObjectName"":""GripCount"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Marking"":{""ObjectName"":""Marking"",""ObjectClass"":""IntValue"",""ObjectValue"":""69""},""SkinColor"":{""ObjectName"":""SkinColor"",""ObjectClass"":""IntValue"",""ObjectValue"":""5""},""RP"":{""ObjectName"":""RP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot="":{""ObjectName"":""Slot="",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""Slot11"":{""ObjectName"":""Slot11"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""MSAbility1"":{""ObjectName"":""MSAbility1"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""KPos"":{""ObjectName"":""KPos"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""LINDAMINISTARTUP"":{""ObjectName"":""LINDAMINISTARTUP"",""ObjectClass"":""IntValue"",""ObjectValue"":""5""},""Slot4"":{""ObjectName"":""Slot4"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""Slot9"":{""ObjectName"":""Slot9"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""Version"":{""ObjectName"":""Version"",""ObjectClass"":""IntValue"",""ObjectValue"":""70""},""HairColorR"":{""ObjectName"":""HairColorR"",""ObjectClass"":""IntValue"",""ObjectValue"":""98""},""Key4"":{""ObjectName"":""Key4"",""ObjectClass"":""StringValue"",""ObjectValue"":""4""},""CurseMarkLevel"":{""ObjectName"":""CurseMarkLevel"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key2"":{""ObjectName"":""Key2"",""ObjectClass"":""StringValue"",""ObjectValue"":""2""},""Genjutsu"":{""ObjectName"":""Genjutsu"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SwordSave"":{""ObjectName"":""SwordSave"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""BijuuXP"":{""ObjectName"":""BijuuXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key3"":{""ObjectName"":""Key3"",""ObjectClass"":""StringValue"",""ObjectValue"":""3""},""BonusSkillPoints"":{""ObjectName"":""BonusSkillPoints"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CColorB"":{""ObjectName"":""CColorB"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""PosY"":{""ObjectName"":""PosY"",""ObjectClass"":""IntValue"",""ObjectValue"":""1277""},""SPR"":{""ObjectName"":""SPR"",""ObjectClass"":""IntValue"",""ObjectValue"":""12""},""BijuuConvo"":{""ObjectName"":""BijuuConvo"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""jincooldown"":{""ObjectName"":""jincooldown"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Ken"":{""ObjectName"":""Ken"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Scar"":{""ObjectName"":""Scar"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot12"":{""ObjectName"":""Slot12"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""RecentTrainings"":{""ObjectName"":""RecentTrainings"",""ObjectClass"":""StringValue"",""ObjectValue"":""{}""},""EyeColorR"":{""ObjectName"":""EyeColorR"",""ObjectClass"":""IntValue"",""ObjectValue"":""60""},""HairColorG"":{""ObjectName"":""HairColorG"",""ObjectClass"":""IntValue"",""ObjectValue"":""66""},""RaidCD"":{""ObjectName"":""RaidCD"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot6"":{""ObjectName"":""Slot6"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""HairColorB"":{""ObjectName"":""HairColorB"",""ObjectClass"":""IntValue"",""ObjectValue"":""34""},""Gender"":{""ObjectName"":""Gender"",""ObjectClass"":""IntValue"",""ObjectValue"":""1""},""MSAbility2"":{""ObjectName"":""MSAbility2"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""Kids"":{""ObjectName"":""Kids"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SecondaryWep"":{""ObjectName"":""SecondaryWep"",""ObjectClass"":""StringValue"",""ObjectValue"":""Kunai""},""PosZ"":{""ObjectName"":""PosZ"",""ObjectClass"":""IntValue"",""ObjectValue"":""3545""},""UnlockedCloak"":{""ObjectName"":""UnlockedCloak"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CloakTime"":{""ObjectName"":""CloakTime"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""BijuuRelation"":{""ObjectName"":""BijuuRelation"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Prestige"":{""ObjectName"":""Prestige"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Elo"":{""ObjectName"":""Elo"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""PosX"":{""ObjectName"":""PosX"",""ObjectClass"":""IntValue"",""ObjectValue"":""223""},""Mangekyo"":{""ObjectName"":""Mangekyo"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""LastGripped"":{""ObjectName"":""LastGripped"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""LastAge"":{""ObjectName"":""LastAge"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key11"":{""ObjectName"":""Key11"",""ObjectClass"":""StringValue"",""ObjectValue"":""-""},""AwakenCD"":{""ObjectName"":""AwakenCD"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""LastStomach"":{""ObjectName"":""LastStomach"",""ObjectClass"":""IntValue"",""ObjectValue"":""174""},""ChakraArmorRGB"":{""ObjectName"":""ChakraArmorRGB"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Mastered"":{""ObjectName"":""Mastered"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""HandsignTraining"":{""ObjectName"":""HandsignTraining"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""WipeLog"":{""ObjectName"":""WipeLog"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot10"":{""ObjectName"":""Slot10"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""Key9"":{""ObjectName"":""Key9"",""ObjectClass"":""StringValue"",""ObjectValue"":""9""},""Slot5"":{""ObjectName"":""Slot5"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""Slot7"":{""ObjectName"":""Slot7"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""RESTORE"":{""ObjectName"":""RESTORE"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""TailedBeast"":{""ObjectName"":""TailedBeast"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""ItemSave"":{""ObjectName"":""ItemSave"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""TimesRerolled"":{""ObjectName"":""TimesRerolled"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CurseMarkEXP"":{""ObjectName"":""CurseMarkEXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""HBChoice"":{""ObjectName"":""HBChoice"",""ObjectClass"":""IntValue"",""ObjectValue"":""1""},""WeaponSave"":{""ObjectName"":""WeaponSave"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""PrimaryWep"":{""ObjectName"":""PrimaryWep"",""ObjectClass"":""StringValue"",""ObjectValue"":""Kunai""},""OriginalVillage"":{""ObjectName"":""OriginalVillage"",""ObjectClass"":""IntValue"",""ObjectValue"":""2""},""BijuuSealed"":{""ObjectName"":""BijuuSealed"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Name"":{""ObjectName"":""Name"",""ObjectClass"":""StringValue"",""ObjectValue"":""Stiches""},""SeenDeaths"":{""ObjectName"":""SeenDeaths"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Parentq"":{""ObjectName"":""Parentq"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""LastChakra"":{""ObjectName"":""LastChakra"",""ObjectClass"":""IntValue"",""ObjectValue"":""405""},""Influence"":{""ObjectName"":""Influence"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""EyeColorG"":{""ObjectName"":""EyeColorG"",""ObjectClass"":""IntValue"",""ObjectValue"":""38""},""RU"":{""ObjectName"":""RU"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""DateRecord"":{""ObjectName"":""DateRecord"",""ObjectClass"":""IntValue"",""ObjectValue"":""1655""},""logcheck"":{""ObjectName"":""logcheck"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot-"":{""ObjectName"":""Slot-"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""PrimaryAmmo"":{""ObjectName"":""PrimaryAmmo"",""ObjectClass"":""IntValue"",""ObjectValue"":""12""},""FamilyID"":{""ObjectName"":""FamilyID"",""ObjectClass"":""StringValue"",""ObjectValue"":""Stiches(15)1595681""},""IsExiled"":{""ObjectName"":""IsExiled"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key8"":{""ObjectName"":""Key8"",""ObjectClass"":""StringValue"",""ObjectValue"":""8""},""Slot3"":{""ObjectName"":""Slot3"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""HideName"":{""ObjectName"":""HideName"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Blindness"":{""ObjectName"":""Blindness"",""ObjectClass"":""NumberValue"",""ObjectValue"":""0""},""MaxAge"":{""ObjectName"":""MaxAge"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""PDLog"":{""ObjectName"":""PDLog"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""BerserkTimes"":{""ObjectName"":""BerserkTimes"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SpentSkillPoints"":{""ObjectName"":""SpentSkillPoints"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""ToggleAccessories"":{""ObjectName"":""ToggleAccessories"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key6"":{""ObjectName"":""Key6"",""ObjectClass"":""StringValue"",""ObjectValue"":""6""},""berserkcheck"":{""ObjectName"":""berserkcheck"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""EyeColorB"":{""ObjectName"":""EyeColorB"",""ObjectClass"":""IntValue"",""ObjectValue"":""160""},""Slot1"":{""ObjectName"":""Slot1"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""AgeLimit"":{""ObjectName"":""AgeLimit"",""ObjectClass"":""IntValue"",""ObjectValue"":""2400""},""Key10"":{""ObjectName"":""Key10"",""ObjectClass"":""StringValue"",""ObjectValue"":""0""},""BDAYS"":{""ObjectName"":""BDAYS"",""ObjectClass"":""StringValue"",""ObjectValue"":""0""},""GrandParentID"":{""ObjectName"":""GrandParentID"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""TailedBeastMastered"":{""ObjectName"":""TailedBeastMastered"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot0"":{""ObjectName"":""Slot0"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""LeftEye"":{""ObjectName"":""LeftEye"",""ObjectClass"":""StringValue"",""ObjectValue"":""Default""},""Bank"":{""ObjectName"":""Bank"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""AnbuLog"":{""ObjectName"":""AnbuLog"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""ResetPos"":{""ObjectName"":""ResetPos"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SkillPoints"":{""ObjectName"":""SkillPoints"",""ObjectClass"":""IntValue"",""ObjectValue"":""7""},""Rank"":{""ObjectName"":""Rank"",""ObjectClass"":""IntValue"",""ObjectValue"":""6""},""MissionEXP"":{""ObjectName"":""MissionEXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""LastKilledUser"":{""ObjectName"":""LastKilledUser"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Trauma"":{""ObjectName"":""Trauma"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""MissionSuccess"":{""ObjectName"":""MissionSuccess"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CurrentWep"":{""ObjectName"":""CurrentWep"",""ObjectClass"":""IntValue"",""ObjectValue"":""1""},""WeaveSpeed"":{""ObjectName"":""WeaveSpeed"",""ObjectClass"":""IntValue"",""ObjectValue"":""20""},""ParentID"":{""ObjectName"":""ParentID"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""LastHealth"":{""ObjectName"":""LastHealth"",""ObjectClass"":""IntValue"",""ObjectValue"":""233""},""RyoRES"":{""ObjectName"":""RyoRES"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""MaxRank"":{""ObjectName"":""MaxRank"",""ObjectClass"":""IntValue"",""ObjectValue"":""24""},""Ryo"":{""ObjectName"":""Ryo"",""ObjectClass"":""IntValue"",""ObjectValue"":""100""},""CColorR"":{""ObjectName"":""CColorR"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key7"":{""ObjectName"":""Key7"",""ObjectClass"":""StringValue"",""ObjectValue"":""7""},""SecondaryAmmo"":{""ObjectName"":""SecondaryAmmo"",""ObjectClass"":""IntValue"",""ObjectValue"":""12""},""RightEye"":{""ObjectName"":""RightEye"",""ObjectClass"":""StringValue"",""ObjectValue"":""Default""},""DefaultMouth"":{""ObjectName"":""DefaultMouth"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CanRank"":{""ObjectName"":""CanRank"",""ObjectClass"":""IntValue"",""ObjectValue"":""1""},""startnewlife"":{""ObjectName"":""startnewlife"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""TailedBeastEXP"":{""ObjectName"":""TailedBeastEXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CColorG"":{""ObjectName"":""CColorG"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""MaxTails"":{""ObjectName"":""MaxTails"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Village"":{""ObjectName"":""Village"",""ObjectClass"":""IntValue"",""ObjectValue"":""2""},""Age"":{""ObjectName"":""Age"",""ObjectClass"":""IntValue"",""ObjectValue"":""12""},""bald"":{""ObjectName"":""bald"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Deaths"":{""ObjectName"":""Deaths"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SecondaryCN"":{""ObjectName"":""SecondaryCN"",""ObjectClass"":""IntValue"",""ObjectValue"":""4""},""KillStreak"":{""ObjectName"":""KillStreak"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot8"":{""ObjectName"":""Slot8"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""Key1"":{""ObjectName"":""Key1"",""ObjectClass"":""StringValue"",""ObjectValue"":""1""},""kek"":{""ObjectName"":""kek"",""ObjectClass"":""IntValue"",""ObjectValue"":""15""},""Title"":{""ObjectName"":""Title"",""ObjectClass"":""StringValue"",""ObjectValue"":""Academy Student""},""Wiped"":{""ObjectName"":""Wiped"",""ObjectClass"":""IntValue"",""ObjectValue"":""5""}},""Skilltree"":{""Trash"":{""ObjectName"":""Trash"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""}},""Copy"":[]}"
335DbCCG,3Klay's Data,azimuths,JSON,Tuesday 31st of October 2023 03:37:00 PM CDT,"{""Stats"":{""Key5"":{""ObjectName"":""Key5"",""ObjectClass"":""StringValue"",""ObjectValue"":""5""},""MaxRank"":{""ObjectName"":""MaxRank"",""ObjectClass"":""IntValue"",""ObjectValue"":""24""},""mapmove1"":{""ObjectName"":""mapmove1"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""TrainingEXP"":{""ObjectName"":""TrainingEXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key12"":{""ObjectName"":""Key12"",""ObjectClass"":""StringValue"",""ObjectValue"":""=""},""Blind"":{""ObjectName"":""Blind"",""ObjectClass"":""NumberValue"",""ObjectValue"":""0""},""CanRank"":{""ObjectName"":""CanRank"",""ObjectClass"":""IntValue"",""ObjectValue"":""1""},""TailedBeastLevel"":{""ObjectName"":""TailedBeastLevel"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CombatEXP"":{""ObjectName"":""CombatEXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Personality"":{""ObjectName"":""Personality"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""GripCount"":{""ObjectName"":""GripCount"",""ObjectClass"":""IntValue"",""ObjectValue"":""2""},""Marking"":{""ObjectName"":""Marking"",""ObjectClass"":""IntValue"",""ObjectValue"":""69""},""SkinColor"":{""ObjectName"":""SkinColor"",""ObjectClass"":""IntValue"",""ObjectValue"":""3""},""RP"":{""ObjectName"":""RP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""ToggleAccessories"":{""ObjectName"":""ToggleAccessories"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot11"":{""ObjectName"":""Slot11"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""MSAbility1"":{""ObjectName"":""MSAbility1"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""KPos"":{""ObjectName"":""KPos"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""LINDAMINISTARTUP"":{""ObjectName"":""LINDAMINISTARTUP"",""ObjectClass"":""IntValue"",""ObjectValue"":""5""},""Slot4"":{""ObjectName"":""Slot4"",""ObjectClass"":""StringValue"",""ObjectValue"":""Crystal Prison""},""Slot9"":{""ObjectName"":""Slot9"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""Version"":{""ObjectName"":""Version"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""HairColorR"":{""ObjectName"":""HairColorR"",""ObjectClass"":""IntValue"",""ObjectValue"":""94""},""EyeColorG"":{""ObjectName"":""EyeColorG"",""ObjectClass"":""IntValue"",""ObjectValue"":""113""},""CurseMarkLevel"":{""ObjectName"":""CurseMarkLevel"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key2"":{""ObjectName"":""Key2"",""ObjectClass"":""StringValue"",""ObjectValue"":""2""},""Genjutsu"":{""ObjectName"":""Genjutsu"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SwordSave"":{""ObjectName"":""SwordSave"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""BijuuXP"":{""ObjectName"":""BijuuXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SeenDeaths"":{""ObjectName"":""SeenDeaths"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""BonusSkillPoints"":{""ObjectName"":""BonusSkillPoints"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CColorB"":{""ObjectName"":""CColorB"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""PosY"":{""ObjectName"":""PosY"",""ObjectClass"":""IntValue"",""ObjectValue"":""155""},""SPR"":{""ObjectName"":""SPR"",""ObjectClass"":""IntValue"",""ObjectValue"":""12""},""BijuuConvo"":{""ObjectName"":""BijuuConvo"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""jincooldown"":{""ObjectName"":""jincooldown"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Ken"":{""ObjectName"":""Ken"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Scar"":{""ObjectName"":""Scar"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot12"":{""ObjectName"":""Slot12"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""RecentTrainings"":{""ObjectName"":""RecentTrainings"",""ObjectClass"":""StringValue"",""ObjectValue"":""[\""Weighted Gear\"",\""Pushup Training\"",\""Spar Training\""]""},""EyeColorR"":{""ObjectName"":""EyeColorR"",""ObjectClass"":""IntValue"",""ObjectValue"":""90""},""HairColorG"":{""ObjectName"":""HairColorG"",""ObjectClass"":""IntValue"",""ObjectValue"":""112""},""RaidCD"":{""ObjectName"":""RaidCD"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot6"":{""ObjectName"":""Slot6"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""HairColorB"":{""ObjectName"":""HairColorB"",""ObjectClass"":""IntValue"",""ObjectValue"":""137""},""Gender"":{""ObjectName"":""Gender"",""ObjectClass"":""IntValue"",""ObjectValue"":""1""},""MSAbility2"":{""ObjectName"":""MSAbility2"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""Kids"":{""ObjectName"":""Kids"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SecondaryWep"":{""ObjectName"":""SecondaryWep"",""ObjectClass"":""StringValue"",""ObjectValue"":""PaperBomb""},""PosZ"":{""ObjectName"":""PosZ"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""UnlockedCloak"":{""ObjectName"":""UnlockedCloak"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CloakTime"":{""ObjectName"":""CloakTime"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""BijuuRelation"":{""ObjectName"":""BijuuRelation"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Prestige"":{""ObjectName"":""Prestige"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Elo"":{""ObjectName"":""Elo"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""TailedBeastMastered"":{""ObjectName"":""TailedBeastMastered"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Mangekyo"":{""ObjectName"":""Mangekyo"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""LastGripped"":{""ObjectName"":""LastGripped"",""ObjectClass"":""IntValue"",""ObjectValue"":""1049061916""},""LastAge"":{""ObjectName"":""LastAge"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key11"":{""ObjectName"":""Key11"",""ObjectClass"":""StringValue"",""ObjectValue"":""-""},""AwakenCD"":{""ObjectName"":""AwakenCD"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""LastStomach"":{""ObjectName"":""LastStomach"",""ObjectClass"":""IntValue"",""ObjectValue"":""198""},""ChakraArmorRGB"":{""ObjectName"":""ChakraArmorRGB"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Mastered"":{""ObjectName"":""Mastered"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""HandsignTraining"":{""ObjectName"":""HandsignTraining"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""WipeLog"":{""ObjectName"":""WipeLog"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot10"":{""ObjectName"":""Slot10"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""Key9"":{""ObjectName"":""Key9"",""ObjectClass"":""StringValue"",""ObjectValue"":""9""},""Slot5"":{""ObjectName"":""Slot5"",""ObjectClass"":""StringValue"",""ObjectValue"":""Crystal Command""},""Slot7"":{""ObjectName"":""Slot7"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""RESTORE"":{""ObjectName"":""RESTORE"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""TailedBeast"":{""ObjectName"":""TailedBeast"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""ItemSave"":{""ObjectName"":""ItemSave"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""TimesRerolled"":{""ObjectName"":""TimesRerolled"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CurseMarkEXP"":{""ObjectName"":""CurseMarkEXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""HBChoice"":{""ObjectName"":""HBChoice"",""ObjectClass"":""IntValue"",""ObjectValue"":""1""},""WeaponSave"":{""ObjectName"":""WeaponSave"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""PrimaryWep"":{""ObjectName"":""PrimaryWep"",""ObjectClass"":""StringValue"",""ObjectValue"":""Kunai""},""OriginalVillage"":{""ObjectName"":""OriginalVillage"",""ObjectClass"":""IntValue"",""ObjectValue"":""6""},""BijuuSealed"":{""ObjectName"":""BijuuSealed"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Name"":{""ObjectName"":""Name"",""ObjectClass"":""StringValue"",""ObjectValue"":""MadeinChina""},""Parentq"":{""ObjectName"":""Parentq"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key3"":{""ObjectName"":""Key3"",""ObjectClass"":""StringValue"",""ObjectValue"":""3""},""LastChakra"":{""ObjectName"":""LastChakra"",""ObjectClass"":""IntValue"",""ObjectValue"":""315""},""Influence"":{""ObjectName"":""Influence"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""PrimaryCN"":{""ObjectName"":""PrimaryCN"",""ObjectClass"":""IntValue"",""ObjectValue"":""5""},""RU"":{""ObjectName"":""RU"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key8"":{""ObjectName"":""Key8"",""ObjectClass"":""StringValue"",""ObjectValue"":""8""},""logcheck"":{""ObjectName"":""logcheck"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot-"":{""ObjectName"":""Slot-"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""PrimaryAmmo"":{""ObjectName"":""PrimaryAmmo"",""ObjectClass"":""IntValue"",""ObjectValue"":""12""},""FamilyID"":{""ObjectName"":""FamilyID"",""ObjectClass"":""StringValue"",""ObjectValue"":""MadeinChina(18)337603""},""Slot="":{""ObjectName"":""Slot="",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""IsExiled"":{""ObjectName"":""IsExiled"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot3"":{""ObjectName"":""Slot3"",""ObjectClass"":""StringValue"",""ObjectValue"":""Crystal Crossing""},""GrandParentID"":{""ObjectName"":""GrandParentID"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""Blindness"":{""ObjectName"":""Blindness"",""ObjectClass"":""NumberValue"",""ObjectValue"":""0""},""AnbuLog"":{""ObjectName"":""AnbuLog"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""PDLog"":{""ObjectName"":""PDLog"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""BerserkTimes"":{""ObjectName"":""BerserkTimes"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SpentSkillPoints"":{""ObjectName"":""SpentSkillPoints"",""ObjectClass"":""IntValue"",""ObjectValue"":""-5""},""HideName"":{""ObjectName"":""HideName"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key6"":{""ObjectName"":""Key6"",""ObjectClass"":""StringValue"",""ObjectValue"":""6""},""berserkcheck"":{""ObjectName"":""berserkcheck"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""EyeColorB"":{""ObjectName"":""EyeColorB"",""ObjectClass"":""IntValue"",""ObjectValue"":""159""},""Slot1"":{""ObjectName"":""Slot1"",""ObjectClass"":""StringValue"",""ObjectValue"":""Crystal Blade""},""DateRecord"":{""ObjectName"":""DateRecord"",""ObjectClass"":""IntValue"",""ObjectValue"":""1655""},""Key10"":{""ObjectName"":""Key10"",""ObjectClass"":""StringValue"",""ObjectValue"":""0""},""BDAYS"":{""ObjectName"":""BDAYS"",""ObjectClass"":""StringValue"",""ObjectValue"":""0""},""Key4"":{""ObjectName"":""Key4"",""ObjectClass"":""StringValue"",""ObjectValue"":""4""},""MaxAge"":{""ObjectName"":""MaxAge"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SecondaryAmmo"":{""ObjectName"":""SecondaryAmmo"",""ObjectClass"":""IntValue"",""ObjectValue"":""7""},""AgeLimit"":{""ObjectName"":""AgeLimit"",""ObjectClass"":""IntValue"",""ObjectValue"":""2400""},""DefaultMouth"":{""ObjectName"":""DefaultMouth"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""startnewlife"":{""ObjectName"":""startnewlife"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""ResetPos"":{""ObjectName"":""ResetPos"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SkillPoints"":{""ObjectName"":""SkillPoints"",""ObjectClass"":""IntValue"",""ObjectValue"":""5""},""Rank"":{""ObjectName"":""Rank"",""ObjectClass"":""IntValue"",""ObjectValue"":""3""},""LeftEye"":{""ObjectName"":""LeftEye"",""ObjectClass"":""StringValue"",""ObjectValue"":""Default""},""LastKilledUser"":{""ObjectName"":""LastKilledUser"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Trauma"":{""ObjectName"":""Trauma"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""MissionSuccess"":{""ObjectName"":""MissionSuccess"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CurrentWep"":{""ObjectName"":""CurrentWep"",""ObjectClass"":""IntValue"",""ObjectValue"":""2""},""Slot0"":{""ObjectName"":""Slot0"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""WeaveSpeed"":{""ObjectName"":""WeaveSpeed"",""ObjectClass"":""IntValue"",""ObjectValue"":""20""},""LastHealth"":{""ObjectName"":""LastHealth"",""ObjectClass"":""IntValue"",""ObjectValue"":""224""},""RyoRES"":{""ObjectName"":""RyoRES"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""MissionEXP"":{""ObjectName"":""MissionEXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Ryo"":{""ObjectName"":""Ryo"",""ObjectClass"":""IntValue"",""ObjectValue"":""84""},""CColorR"":{""ObjectName"":""CColorR"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key7"":{""ObjectName"":""Key7"",""ObjectClass"":""StringValue"",""ObjectValue"":""7""},""Slot2"":{""ObjectName"":""Slot2"",""ObjectClass"":""StringValue"",""ObjectValue"":""Earth Pillar""},""RightEye"":{""ObjectName"":""RightEye"",""ObjectClass"":""StringValue"",""ObjectValue"":""Default""},""Bank"":{""ObjectName"":""Bank"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""PosX"":{""ObjectName"":""PosX"",""ObjectClass"":""IntValue"",""ObjectValue"":""-1""},""ParentID"":{""ObjectName"":""ParentID"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""TailedBeastEXP"":{""ObjectName"":""TailedBeastEXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CColorG"":{""ObjectName"":""CColorG"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""MaxTails"":{""ObjectName"":""MaxTails"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Deaths"":{""ObjectName"":""Deaths"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Age"":{""ObjectName"":""Age"",""ObjectClass"":""IntValue"",""ObjectValue"":""14""},""Village"":{""ObjectName"":""Village"",""ObjectClass"":""IntValue"",""ObjectValue"":""6""},""bald"":{""ObjectName"":""bald"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SecondaryCN"":{""ObjectName"":""SecondaryCN"",""ObjectClass"":""IntValue"",""ObjectValue"":""1""},""KillStreak"":{""ObjectName"":""KillStreak"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot8"":{""ObjectName"":""Slot8"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""Key1"":{""ObjectName"":""Key1"",""ObjectClass"":""StringValue"",""ObjectValue"":""1""},""kek"":{""ObjectName"":""kek"",""ObjectClass"":""IntValue"",""ObjectValue"":""18""},""Title"":{""ObjectName"":""Title"",""ObjectClass"":""StringValue"",""ObjectValue"":""Academy Student""},""Wiped"":{""ObjectName"":""Wiped"",""ObjectClass"":""IntValue"",""ObjectValue"":""5""}},""Skilltree"":{""Trash"":{""ObjectName"":""Trash"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""}},""Copy"":[]}"
ksgyfKCp,go_to,Fisk__,Lua,Tuesday 31st of October 2023 03:33:42 PM CDT,"function test_direction()
    local x0,y0,z0 = gps.locate()
    if not x0 then 
        print(""Failed to get my location"")
    else
        block_front()
        turtle.forward()
        local x,y,z = gps.locate()
        if not x then 
            print(""Failed to get my location"")
        else
            if x-x0 ~= 0 then
                if x-x0 == 1 then
                    print(""Facing East"")
                    direction = ""east""
                    turtle.back()
                else
                    print(""Facing West"")
                    direction = ""west""
                    turtle.back()
                end
            else if z-z0 ~= 0 then
                if z-z0 == 1 then
                    print(""Facing South"")
                    direction = ""south""
                    turtle.back()
                else
                    print(""Facing North"")
                    direction = ""north""
                    turtle.back()
                end
            end 
        end
    end
end
return direction
end

function stuck_under()
    if turtle.detectUp() == true then
        turtle.back()
        stuck_under()
        offset = offset + 1
    end
end
function block_front()
    if turtle.detect() == true then
        stuck_under()
        turtle.up()
        y0 = y0+1
        block_front()
    end
end

function move_forward(i)
    offset = 0
    for i=i,1,-1
    do block_front()
        turtle.forward()
        if turtle.getFuelLevel() < 10 then
            local success = turtle.refuel()
            if success == false then
                peripheral.find(""modem"", rednet.open)
                local x,y,z = gps.locate()
                rednet.broadcast(""I'm out of fuel at ""..x.."",""..y.."",""..z)
            end
        end
    end
    if offset > 0 then
        move_forward(offset)
    end
end

function go_to(x,y,z)
    x0,y0,z0 = gps.locate()
    if not x0 then 
        print(""Failed to get my location"")
    else
        delta_x = x-x0
        delta_z = z-z0
        if delta_x > 0 then
            print(""I need to go east"")
            local facing = test_direction()
            if facing == ""east"" then
                move_forward(delta_x)
                else if facing == ""west"" then
                    turtle.turnLeft()
                    turtle.turnLeft()
                    move_forward(delta_x)
                else if facing == ""north"" then
                    turtle.turnRight()
                    move_forward(delta_x)
                else if facing == ""south"" then
                    turtle.turnLeft()
                    move_forward(delta_x)
                end
                end
                end
            end
        
        else if delta_x<0 then
                print(""I need to go west"")
                local facing = test_direction()
                if facing == ""west"" then
                    move_forward(delta_x*(-1))
                else if facing == ""east"" then
                    turtle.turnLeft()
                    turtle.turnLeft()
                    move_forward(delta_x*(-1))
                else if facing == ""south"" then
                    turtle.turnRight()
                    move_forward(delta_x*(-1))
                else if facing == ""north"" then
                    turtle.turnLeft()
                    move_forward(delta_x*(-1))
                end
                end
                end
                end
            end
        end
        if delta_z<0 then
                print(""I need to go north"")
                local facing = test_direction()
                if facing == ""north"" then
                    move_forward(delta_z*(-1))
                else if facing == ""south"" then
                    turtle.turnLeft()
                    turtle.turnLeft()
                    move_forward(delta_z*(-1))
                else if facing == ""west"" then
                    turtle.turnRight()
                    move_forward(delta_z*(-1))
                else if facing == ""east"" then
                    turtle.turnLeft()
                    move_forward(delta_z*(-1))
                end
                end
                end
                end
            else if delta_z>0 then
                print(""I need to go south"")
                local facing = test_direction()
                if facing == ""south"" then
                    move_forward(delta_z)
                else if facing == ""north"" then
                    turtle.turnLeft()
                    turtle.turnLeft()
                    move_forward(delta_z)
                else if facing == ""east"" then
                    turtle.turnRight()
                    move_forward(delta_z)
                else if facing == ""west"" then
                    turtle.turnLeft()
                    move_forward(delta_z)
                end
                end
                end
                end
            end
        end
        delta_y = y-y0
            if delta_y > 0 then
            for i=delta_y,1,-1
            do turtle.up()
                end
            else if delta_y < 0 then
            for i=delta_y,1,1
            do turtle.down()
                end
            end
            end
    end
end
"
0bJRCfsD,Javascript text compression,Mangus875,JavaScript,Tuesday 31st of October 2023 03:13:23 PM CDT,"const numToBin = num => num.toString(2);
const binToNum = bin => parseInt(bin,2);

function buildTree(freqs) {
	let tree = [];
	let sorted = [];
	let check = 1;
	// sort chars by frequency
	while (sorted.length != Object.keys(freqs).length) {
		for (const i in freqs) {
			if (freqs[i] == check) {
				sorted.push(i);
			}
		}
		check++;
	}
	// sorted.reverse();
	tree = sorted.map((v) => {
		return [v, freqs[v]]
	});
	// console.log(sorted);
	
	// create tree
	while (tree.length > 1) {
		let newElem = [[tree[0][0],tree[1][0]], tree[0][1]+tree[1][1]];
		
		tree = tree.slice(2);
		let slot = 0;
		while (slot < tree.length && tree[slot+1][1] <= newElem[1]) {
			slot++;
		}
		tree.splice(slot+1, 0, newElem);
	}
	
	let newTree = [];
	
	return tree;
}

function assignKeys(tree) {
	let keys = [];
}

function compressText(txt) {
	let chars = [];
	let freqs = [];
	for (let i = 0; i < txt.length; i++) {
		let code = txt[i].charCodeAt(0);
		
		if (freqs[txt[i]] == undefined) {
			freqs[txt[i]] = 1;
		} else {
			freqs[txt[i]]++;
		}
		
		chars.push(code);
	}
	
	console.log(buildTree(freqs));
}
compressText(""The FitnessGram Pacer Test is a multistage aerobic capacity test that progressively gets more difficult as it continues. The 20 meter pacer test will begin in 30 seconds. Line up at the start. The running speed starts slowly, but gets faster each minute after you hear this signal. [beep] A single lap should be completed each time you hear this sound. [ding] Remember to run in a straight line, and run as long as possible. The second time you fail to complete a lap before the sound, your test is over. The test will begin on the word start. On your mark, get ready, start."");

function decompressText(data) {}"
VifQnNF3,GraFilip,cuniszkiewicz,C#,Tuesday 31st of October 2023 03:10:37 PM CDT,"namespace grafilip
{
    class Program
    {
        static void Main(string[] args)
        {
            int liczbaWygrywajaca = 5;
            int liczbaGracza;
            bool podpowiedzi = false;
            char decyzjaKoniec;

        Poczatek:
            Console.Clear();
            Console.WriteLine(""Podaj liczbe od 1-10: "");
            liczbaGracza = int.Parse(Console.ReadLine());
            Console.Clear();
            if (liczbaGracza == 5)
            {
                Console.WriteLine(""Wygrales"");

            }
            else
            {
                Console.WriteLine(""rzegrales"");
                Console.WriteLine();
                Console.WriteLine();
            }
            Console.WriteLine(""Czy chcesz zagrac ponownie? t-tak n-nie: "");
            decyzjaKoniec = char.Parse(Console.ReadLine());
            if (decyzjaKoniec == 't')
            {
                goto Poczatek;
            }
            else
            {
                Console.Clear();
                Console.WriteLine(""\n\n\n\n\n\n\t\t\t\t\t\t\t\tDziekuje za skorzystanie z gry."");
            }

        }
    }
}
"
qrJAWbjw,Porownanie3Liczb,cuniszkiewicz,C#,Tuesday 31st of October 2023 03:09:37 PM CDT,"namespace porownanie3liczb
{
    class Program
    {


        static void Main(string[] args)
        {
            int a, b, c;

            char decyzjaKoniec;
        poczatek:
            Console.Clear();
            Console.WriteLine(""Podaj a: "");
            a = int.Parse(Console.ReadLine());


            Console.WriteLine(""Podaj b: "");
            b = int.Parse(Console.ReadLine());


            Console.WriteLine(""Podaj c: "");
            c = int.Parse(Console.ReadLine());

            Console.Clear();

            // a najwieksze
            if (a > b && a > c)
            {

                if (b > c)
                {
                    Console.WriteLine($""{a} > {b} > {c}"");
                }
                else
                {
                    Console.WriteLine($""{a} > {c} > {b}"");
                }

            }

            //b najwieksze
            if (b > a && b > c)
            {

                if (a > c)
                {
                    Console.WriteLine($""{b} > {a} > {c}"");
                }
                else
                {
                    Console.WriteLine($""{b} > {c} > {a}"");
                }
            }
            //c najwieksze
            if (c > a && c > b)
            {

                if (b > a)
                {
                    Console.WriteLine($""{c} > {b} > {a}"");
                }
                else
                {
                    Console.WriteLine($""{c} > {a} > {b}"");
                }
            }
            Console.ReadKey();

            Console.WriteLine(""czy chcesz kontynuowac? t-tak n-nie: "");
            decyzjaKoniec = char.Parse(Console.ReadLine());
            if (decyzjaKoniec == 't')
            {
                goto poczatek;
            }
            else
            {
                Console.Clear();
                Console.WriteLine(""\n\n\n\n\t\t\t\t\t\tdziekuje za skorzystanie z programu."");
            }
            //Console.ReadKey();
            System.Threading.Thread.Sleep(3000); // zatrzymanie programu na trzy sekundy

        }

    }
}
"
68xBkd3B,Funkcja_if,cuniszkiewicz,C#,Tuesday 31st of October 2023 03:08:17 PM CDT,"namespace Instrukcja_if
{

    class Program
    {
        static void Main(string[] args)
        {
            int liczba1;
            int liczba2;
            int liczba3;

            Console.Write(""Podaj pierwsza liczbe: "");
            liczba1 = int.Parse(Console.ReadLine());

            Console.WriteLine("""");

            Console.Write(""podaj druga liczbe: "");
            liczba2 = int.Parse(Console.ReadLine());

            Console.WriteLine("""");

            Console.Write(""podaj trzecia liczbe: "");
            liczba3 = int.Parse(Console.ReadLine());

            Console.Clear();
            // sprawdzenie liczby1
            if (liczba1 > liczba2 && liczba1 > liczba3)

            {

                //if (liczba1 > liczba3)
                Console.WriteLine($""{liczba1} jest najwieksza."");
            }

            //sprawdzenie liczby2
            if (liczba2 > liczba1 && liczba2 > liczba3)

            {

                //if (liczba2 > liczba3)
                Console.WriteLine($""{liczba2} jest najwieksza."");
            }

            //sprawdzenie liczby3
            if (liczba3 > liczba1 && liczba3 > liczba2)

            {

                //if (liczba3 > liczba2)
                Console.WriteLine($""{liczba3} jest najwieksza."");
            }















            /* 
                   if (liczba1 > liczba2)

                   {

                       //Console.WriteLine($""{liczba1} jest wieksza liczba"");
                       Console.WriteLine($""{liczba1} > {liczba2}"");


                   }
                   else
                   {
                       if (liczba1 == liczba2)
                           {

                           Console.WriteLine($""{liczba1} = {liczba2}"");
                           }
                       else
                       //Console.WriteLine($""{liczba2} jest wieksza liczba"");
                           Console.WriteLine($""{liczba1} < {liczba2}"");
                   }


                 if (liczba == 5)
                   {
                       Console.WriteLine(""wygrales"");

                   }

                   else
                   {

                       Console.WriteLine(""przegrales"");

                   }
                  */
        }
    }
}
"
pSHLMn82,Kalkulator,cuniszkiewicz,C#,Tuesday 31st of October 2023 03:07:23 PM CDT,"namespace KalkulatorFilip2
{
    class Program
    {
        static void Main(string[] args)
        {
            int a;
            int b;

            Console.Write(""Podaj pierwsza liczbe: "");
            a = int.Parse(Console.ReadLine());
            Console.Write(""Podaj druga liczbe: "");
            b = int.Parse(Console.ReadLine());

            Console.Clear();

            //dzialania

            int dodawanie = a + b;
            int odejmowanie = a - b;
            int mnozenie = a * b;


            //kwadrat

            int polekwadratu = a * a;
            int obwodkwadratu = a * 4;

            //prostokat

            int poleprostokata = a * b;
            int obwodprostokata = a + a + b + b;



            Console.WriteLine(""Oto twoje wyniki:"");

            Console.WriteLine();
            Console.WriteLine(""dzialania:"");
            Console.WriteLine($""{a}+{b}= {dodawanie}"");
            Console.WriteLine($""{a}-{b}= {odejmowanie}"");
            Console.WriteLine($""{a}*{b}= {mnozenie}"");

            /*
            if (b != 0) //!= b jest różneod zera, albo -> b nie jest równe 0
            {
                double dzielenie = (double)a / b;
                Console.WriteLine($""{a}/{b}= {dzielenie}"");
            }

            if (b == 0)
                Console.WriteLine(""Nie dziel przez 0!"");
            */

            if (b != 0)
            {
                double dzielenie = (double)a / b;
                Console.WriteLine($""{a}/{b}= {dzielenie}"");
            }
            else
                Console.WriteLine(""Nie dziel przez 0!"");

            Console.WriteLine();

            Console.WriteLine(""kwadrat:"");
            Console.WriteLine($""pole = {polekwadratu}"");
            Console.WriteLine($""obwod = {obwodkwadratu}"");

            Console.WriteLine();

            Console.WriteLine(""prostokat:"");
            Console.WriteLine($""pole = {poleprostokata}"");
            Console.WriteLine($""obwod = {obwodprostokata}"");


            Console.ReadKey();
        }
    }
}
"
MFEUPLHf,esphome heater,poldim,YAML,Tuesday 31st of October 2023 03:07:17 PM CDT,"substitutions:
  platform: ESP8266
  board: d1_mini
  device_name: esphome-heater
  friendly_name: ""Heater""
  reboot_timeout_wifi: 180s
  reboot_timeout_api: 180s
  output_power: 19dB

packages:
  device_base: !include z-common.yaml
  wifi_led: !include z-d4-wifi-led.yaml

#################################

esphome:
  on_boot:
    priority: 900.0
    then:
      - text_sensor.template.publish:
          id: furnace_status
          state: ""RESTARTED""
      # - delay: 15 s
      # - script.execute: check_damper_front
      # - script.execute: check_damper_kids

logger:
   level: WARN

i2c:
  sda: D2
  scl: D1
  scan: True
  # frequency: 500kHz

mcp23017:
  - id: 'mcp23017_hub'
    address: 0x20

binary_sensor:
- platform: gpio
  pin:
    mcp23xxx: mcp23017_hub
    number: 7
    mode: INPUT
    #inverted: True
  name: 'Garage Under Stairs Motion'
  id: local_motion
  device_class: motion
  filters:
    - delayed_on_off: 50ms

switch:
- platform: gpio
  name: ""${friendly_name} Fan""
  icon: ""mdi:fan""
  id: fan
  pin:
    mcp23xxx: mcp23017_hub
    number: 8
    mode: OUTPUT
    inverted: False
  restore_mode: ALWAYS_OFF
  interlock:
  - heat
  - heat_s2
  # on_turn_on:
  #   then:
  #     - light.turn_on:
  #         id: rgb_led
  #         brightness: 30%
  #         transition_length: 0s
  #         red: 0
  #         blue: 0
  #         green: 1
  # on_turn_off:
  #   then:
  #     - light.turn_off:
  #         id: rgb_led
  #         transition_length: 250ms
- platform: gpio
  name: ""${friendly_name} Heat""
  icon: ""mdi:radiator""
  id: heat
  pin:
    mcp23xxx: mcp23017_hub
    number: 9
    mode: OUTPUT
    inverted: False
  restore_mode: ALWAYS_OFF
  interlock:
  - fan
  # - heat_s2
  on_turn_on:
    then:
      - delay: 1 min
      - script.execute: are_both_dampers_closed
      # - light.turn_on:
      #     id: rgb_led
      #     brightness: 30%
      #     transition_length: 0s
      #     red: 1
      #     blue: 0
      #     green: 0
  on_turn_off:
    then:
    # - light.turn_off:
    #     id: rgb_led
    #     transition_length: 250ms
    - switch.turn_off: heat_s2
    - if:
        condition:
       #   and:
          - switch.is_on: fan_after_shutoff
        then:
          - delay: 1s
          - switch.turn_on: fan
          - logger.log:
              level: ""ERROR""
              format: ""condition met""
        else:
          - logger.log:
              level: ""ERROR""
              format: ""condition NOT met""

- platform: gpio
  name: ""${friendly_name} Heat Stage 2""
  icon: ""mdi:radiator""
  id: heat_s2
  pin:
    mcp23xxx: mcp23017_hub
    number: 10
    mode: OUTPUT
    inverted: False
  restore_mode: ALWAYS_OFF
  interlock:
  - fan
  # - heat
  on_turn_on:
    then:
      - delay: 1 min
      - script.execute: are_both_dampers_closed
      # - light.turn_on:
      #     id: rgb_led
      #     brightness: 30%
      #     transition_length: 0s
      #     red: 0
      #     blue: 0
      #     green: 1
  # on_turn_off:
  #   - if:
  #       condition:
  #         and:
  #         - switch.is_on: heat
  #       then:
  #         - light.turn_on:
  #             id: rgb_led
  #             brightness: 30%
  #             transition_length: 0s
  #             red: 1
  #             blue: 0
  #             green: 0
  #       else:
  #         - light.turn_off:
  #             id: rgb_led
  #             transition_length: 250ms

- platform: gpio
  name: ""${friendly_name} Damper Power""
  icon: ""mdi:valve""
  id: damper_power
  pin:
    mcp23xxx: mcp23017_hub
    number: 11
    mode: OUTPUT
    inverted: True
  restore_mode: ALWAYS_ON
  on_turn_off:
  - switch.turn_off: damper_power
  - delay: 5000 ms
  - switch.turn_on: damper_power
#   interlock: ###IF USE THIS, ADD COOL TO INTERLOCKS FOR THE OTHER RELAYS
#   - fan
#   - heat
#   - heat_s2

- platform: template
  id: call_for_heat_front
  name: ""${friendly_name} Call for Heat, Front""
  optimistic: True
  on_turn_on:
    - switch.turn_on: heat
  on_turn_off:
    - script.execute: turn_off_furnace
- platform: template
  id: call_for_heat_kids
  name: ""${friendly_name} Call for Heat, Kids""
  optimistic: True
  on_turn_on:
    - switch.turn_on: heat
  on_turn_off:
    - script.execute: turn_off_furnace

- platform: template
  id: fan_after_shutoff
  name: ""Heater fan after shutoff automation""
  optimistic: True


sensor:
- platform: homeassistant
  name: ""esphome_cover_damper_rear""
  id: cover_damper_rear
  entity_id: cover.damper_rear
  attribute: current_position
  internal: false
- platform: homeassistant
  name: ""esphome_cover_damper_front""
  id: cover_damper_front
  entity_id: cover.damper_front
  attribute: current_position
  internal: false
- platform: homeassistant
  id: ha_temp_front
  entity_id: sensor.living_room_temperature
  internal: true
  filters:
  - lambda: return (x - 32.0) * (5.0/9.0);
- platform: homeassistant
  id: ha_temp_kids
  entity_id: sensor.kids_bedroom_temperature
  internal: true
  filters:
  - lambda: return (x - 32.0) * (5.0/9.0);


- platform: template
  id: front_current_temperature
  update_interval: 10s
  lambda: return (id(heater_front).current_temperature);
#   name: esphome_front_current_temperature
- platform: template
  id: front_target_temperature
  update_interval: 10s
  lambda: return (id(heater_front).target_temperature);
  unit_of_measurement: ""°F""
#   name: esphome_front_target_temperature
- platform: template
  id: front_target_temperature_low
  update_interval: 10s
  lambda: return (id(heater_front).target_temperature_low);
  # unit_of_measurement: ""°F""
#   name: esphome_front_target_temperature_low
- platform: template
  id: front_target_temperature_high
  update_interval: 10s
  lambda: return (id(heater_front).target_temperature_high);
  # unit_of_measurement: ""°F""
#   name: esphome_front_target_temperature_high

- platform: template
  id: kids_current_temperature
  update_interval: 10s
  lambda: return (id(heater_kids).current_temperature);
  # unit_of_measurement: ""°F""
#   name: esphome_kids_current_temperature
- platform: template
  id: kids_target_temperature
  update_interval: 10s
  lambda: return (id(heater_kids).target_temperature);
  unit_of_measurement: ""°F""
#   name: esphome_kids_target_temperature
- platform: template
  id: kids_target_temperature_low
  update_interval: 10s
  lambda: return (id(heater_kids).target_temperature_low);
  # unit_of_measurement: ""°F""
#   name: esphome_kids_target_temperature_low
- platform: template
  id: kids_target_temperature_high
  update_interval: 10s
  lambda: return (id(heater_kids).target_temperature_high);
  # unit_of_measurement: ""°F""
#   name: esphome_kids_target_temperature_high



- platform: bme280
  temperature:
    name: ""Heater Outlet Temperature""
    id: bme280_outlet_temperature
    filters:
      - lambda: return x * (9.0/5.0) + 32.0;
      - offset: -3.6 # 2°C offset per datasheet
      - delta: 0.5
    unit_of_measurement: ""°F""
    on_value:
      then:
        # - light.turn_onturn_onturn_onturn_onturn_onturn_onturn_onturn_onturn_onturn_onturn_onturn_onturn_onturn_onturn_onturn_onturn_onturn_onturn_onturn_onturn_onturn_onturn_onturn_onturn_onturn_onturn_onturn_onturn_onturn_onturn_onturn_onturn_onturn_onturn_onturn_on:
        - if:
            condition:
              and:
              - switch.is_on: fan_after_shutoff
              - switch.is_on: fan
              - lambda: return (id(front_current_temperature).state || id(kids_current_temperature).state) < id(bme280_outlet_temperature).state;
            then:
              - switch.turn_off: fan
  pressure:
    name: ""Heater Outlet Pressure""
    id: bme280_outlet_pressure
    filters:
    - delta: 5
  humidity:
    name: ""Heater Outlet Relative Humidity""
    id: bme280_outlet_humidity
    filters:
    - delta: .1
  address: 0x76
  update_interval: 5s


text_sensor:
- platform: template
  id: furnace_status
  name: ""Heater Status""
- platform: template
  id: status_front
  name: ""Heater Status Front""
- platform: template
  id: status_kids
  name: ""Heater Status Kids""


script:
- id: are_both_dampers_closed
  mode: single
  then:
    # - delay: 1 min
    - if:
        condition:
          and:
          - switch.is_on: heat
          - sensor.in_range:
              id: cover_damper_front
              below: 60
          - sensor.in_range:
              id: cover_damper_rear
              below: 60
        then:
          - homeassistant.service:
              service: cover.open_cover
              data:
                entity_id: cover.damper_front
          - homeassistant.service:
              service: cover.open_cover
              data:
                entity_id: cover.damper_rear
          - text_sensor.template.publish:
              id: furnace_status
              state: ""BOTH DAMPERS ARE CLOSED""
          - text_sensor.template.publish:
              id: status_front
              state: ""BOTH DAMPERS ARE CLOSED""
          - text_sensor.template.publish:
              id: status_kids
              state: ""BOTH DAMPERS ARE CLOSED""
          - delay: 2 min
          - if:
              condition:
                and:
                - switch.is_on: heat
                - sensor.in_range:
                    id: cover_damper_front
                    below: 60
                - sensor.in_range:
                    id: cover_damper_rear
                    below: 60
              then:
                - switch.turn_off: heat
                - switch.turn_off: heat_s2
                - text_sensor.template.publish:
                    id: furnace_status
                    state: ""FURNACE RELAY OFF, BOTH DAMPERS ARE CLOSED""
                - text_sensor.template.publish:
                    id: status_front
                    state: ""FURNACE RELAY OFF, BOTH DAMPERS ARE CLOSED""
                - text_sensor.template.publish:
                    id: status_kids
                    state: ""FURNACE RELAY OFF, BOTH DAMPERS ARE CLOSED""

- id: turn_off_furnace
  then:
    - if:
        condition:
          and:
          - switch.is_off: call_for_heat_front
          - switch.is_off: call_for_heat_kids
        then:
          - switch.turn_off: heat
          - switch.turn_off: heat_s2
          - delay: 1s
          - text_sensor.template.publish:
              id: furnace_status
              state: ""BOTH HEAT OFF""

- id: check_damper_when_climate_is_idle
  then:
  - if:
      condition: # IF CLIMATE ZONE IS TURNED OFF, CLOSE DAMPER
        and:
          - lambda: return id(heater_front).action == (0.0 || 4.0); 
          - switch.is_on: heat
      then:
      - homeassistant.service:
          service: cover.close_cover
          data:
            entity_id: cover.damper_front
      - text_sensor.template.publish:
          id: status_front
          state: ""CLIMATE OFF/IDLE, CLOSING DAMPER""
  - if:
      condition: # IF CLIMATE ZONE IS TURNED OFF, CLOSE DAMPER
        and:
          - lambda: return id(heater_kids).action == (0.0 || 4.0); 
          - switch.is_on: heat
      then:
      - homeassistant.service:
          service: cover.close_cover
          data:
            entity_id: cover.damper_rear
      - text_sensor.template.publish:
          id: status_kids
          state: ""CLIMATE OFF/IDLE, CLOSING DAMPER""

##  CLIMATE_ACTION_OFF = 0
##  CLIMATE_ACTION_HEATING = 3
##  CLIMATE_ACTION_IDLE = 4


- id: check_damper_front
  then:
  - delay: 500 ms
  - if:
      condition:
        and:
          - lambda: return id(heater_front).action == (0.0 || 4.0); # IDLE or OFF
          - switch.is_on: heat
      then:
      - homeassistant.service:
          service: cover.close_cover
          data:
            entity_id: cover.damper_front
      - text_sensor.template.publish:
          id: status_front
          state: ""CLIMATE OFF/IDLE, CLOSING DAMPER""
      else:
      - if:
          condition:
            - lambda: return id(heater_front).current_temperature > id(heater_front).target_temperature_high;
          then:
            # TEMP ABOVE TARGET
            # DELAY AND THEN CHECK IF HEAT IS STILL ON AND CLOSE DAMPER
            - text_sensor.template.publish:
                id: status_front
                state: ""TEMP ABOVE TARGET""
            - if: 
                condition: 
                  or:
                  - switch.is_on: heat
                then:
                  - homeassistant.service:
                      service: cover.close_cover
                      data:
                        entity_id: cover.damper_front
                  - text_sensor.template.publish:
                      id: status_front
                      state: ""TEMP ABOVE TARGET, CLOSING COVER""
                  - delay: 1 min
                  - script.execute: are_both_dampers_closed
            # OPEN DAMPER IF IT IS LESS THAN HALF OPEN
          else:
            - text_sensor.template.publish:
                id: status_front
                state: ""TEMP BELOW TARGET""
            - if:
                condition: 
                  and:
                  - switch.is_on: call_for_heat_front
                  - sensor.in_range:
                      id: cover_damper_front
                      below: 40
                then:
                  - homeassistant.service:
                      service: cover.open_cover
                      data:
                        entity_id: cover.damper_front
                  - text_sensor.template.publish:
                      id: status_front
                      state: ""TEMP BELOW TARGET, OPENNING COVER""

- id: check_damper_kids
  then:
  - delay: 600 ms
  - if:
      condition: # IF CLIMATE ZONE IS TURNED OFF, CLOSE DAMPER
        and:
          - lambda: return id(heater_kids).action == (0.0 || 4.0); 
          - switch.is_on: heat
      then:
      - homeassistant.service:
          service: cover.close_cover
          data:
            entity_id: cover.damper_rear
      - text_sensor.template.publish:
          id: status_kids
          state: ""CLIMATE OFF/IDLE, CLOSING DAMPER""
      else:
      - if:
          condition:
            - lambda: return id(kids_current_temperature).state > id(kids_target_temperature_high).state;
          then:
            # TEMP ABOVE TARGET
            # DELAY AND THEN CHECK IF HEAT IS STILL ON AND CLOSE DAMPER
            - text_sensor.template.publish:
                id: status_kids
                state: ""TEMP ABOVE TARGET""
            - if: 
                condition: 
                  or:
                  - switch.is_on: heat
                then:
                  - homeassistant.service:
                      service: cover.close_cover
                      data:
                        entity_id: cover.damper_rear
                  - text_sensor.template.publish:
                      id: status_kids
                      state: ""TEMP ABOVE TARGET, CLOSING COVER""
                  - delay: 1 min
                  - script.execute: are_both_dampers_closed
            # TEMP BELOW TARGET
            # OPEN DAMPER IF IT IS LESS THAN HALF OPEN
          else:
            - text_sensor.template.publish:
                id: status_kids
                state: ""TEMP BELOW TARGET""
            - if:
                condition: 
                  and:
                  - switch.is_on: call_for_heat_kids
                  - sensor.in_range:
                      id: cover_damper_rear
                      below: 40
                then:
                  - homeassistant.service:
                      service: cover.open_cover
                      data:
                        entity_id: cover.damper_rear
                  - text_sensor.template.publish:
                      id: status_kids
                      state: ""TEMP BELOW TARGET, OPENNING COVER""




climate:
- platform: bang_bang
  name: ""Heater Living Room""
  id: heater_front
  sensor: ha_temp_front
  default_target_temperature_low: 67 °F
  default_target_temperature_high: 70 °F
  visual:
    min_temperature: 65 °F
    max_temperature: 75 °F
    temperature_step: 0.5 °F
  heat_action:
    - text_sensor.template.publish:
        id: furnace_status
        state: ""FRONT HEAT ON""
    # - logger.log: ""FRONT HEAT ON""
    - switch.turn_on: call_for_heat_front
    - delay: 50 ms
    - if:
        condition:
          and:
          - lambda: return id(heater_kids).current_temperature < id(heater_kids).target_temperature_low;
          - lambda: return id(heater_kids).action != 0.0;
        then:
        - switch.turn_on: call_for_heat_kids
  idle_action:
    - switch.turn_off: call_for_heat_front
    # - script.execute: turn_off_furnace
    - text_sensor.template.publish:
        id: furnace_status
        state: ""FRONT HEAT OFF""
    # - logger.log: ""FRONT HEAT OFF""
    # - delay: 5s
  on_state:
    - delay: 50 ms
    - script.execute: check_damper_front
    - script.execute: check_damper_kids

- platform: bang_bang
  name: ""Heater Kids""
  id: heater_kids
  sensor: ha_temp_kids
  default_target_temperature_low: 67 °F
  default_target_temperature_high: 70 °F
  visual:
    min_temperature: 65 °F
    max_temperature: 75 °F
    temperature_step: 0.5 °F
  heat_action:
    - text_sensor.template.publish:
        id: furnace_status
        state: ""KIDS HEAT ON""
    # - logger.log: ""KIDS HEAT ON""
    - switch.turn_on: call_for_heat_kids
    - delay: 50 ms
    - if:
        condition:
          and:
          - lambda: return id(heater_front).current_temperature < id(heater_front).target_temperature_low;
          - lambda: return id(heater_front).action != 0.0;
        then:
        - switch.turn_on: call_for_heat_front
  idle_action:
    - switch.turn_off: call_for_heat_kids
    # - script.execute: turn_off_furnace
    - text_sensor.template.publish:
        id: furnace_status
        state: ""KIDS HEAT OFF""
    # - logger.log: ""KIDS HEAT OFF""
    # - delay: 5s
  on_state:
    - delay: 50 ms
    - script.execute: check_damper_front
    - script.execute: check_damper_kids


button:
- platform: template
  name: ""Execute check_damper_front""
  on_press:
    - script.execute: check_damper_front
- platform: template
  name: ""Execute check_damper_kids""
  on_press:
    - script.execute: check_damper_kids"
Tiah2b84,Prostokąt,cuniszkiewicz,C#,Tuesday 31st of October 2023 03:06:23 PM CDT,"namespace Prostokat
{
    class Program
    {
        static void Main(string[] args)
        {
            int a;
            int b;
            string imie;
            Console.WriteLine(""podaj imie: "");
            imie = Console.ReadLine();



            Console.Write(""podaj dlugosc boku a: "");
            a = int.Parse(Console.ReadLine());
            Console.Write(""podaj dlugosc boku b: "");
            b = int.Parse(Console.ReadLine());

            int pole = a * b;
            int obwod = a * 2 + b * 2;
            Console.Clear();
            Console.WriteLine($""{imie}, oto twoje wyniki.\n"");

            Console.WriteLine($""pole tego prostokata wynosi {pole}"");
            Console.WriteLine($""obwod tego prostokata wynosi {obwod}"");

            Console.ReadKey();

        }
    }
}"
ZUyzKgrQ,Kwadrat,cuniszkiewicz,C#,Tuesday 31st of October 2023 03:05:21 PM CDT,"namespace filipCwiczenia
{
    class Program
    {
        static void Main(string[] args)
        {
            int dlugosc;
            Console.Write(""podaj dlugosc boku kwadratu: "");
            dlugosc = int.Parse(Console.ReadLine());
            Console.Clear();
            Console.WriteLine(""oto wyniki twoich zadan:"");
            Console.WriteLine();
            int pole = dlugosc * dlugosc;
            int obwod = dlugosc * 4;
            Console.WriteLine($""pole kwadtratu o boku {dlugosc} wynosi {pole}"");
            Console.WriteLine($""obwod kwadratu o boku {dlugosc} wynosi {obwod}"");

        }
    }
}"
LB1bpdqW,Zmienne,cuniszkiewicz,C#,Tuesday 31st of October 2023 03:03:52 PM CDT,"namespace Filip_28_10_2023
{
class Program
{
    static void Main(string[] args)
    {
        string imie, nazwisko;
        int wiek = 12;
        int a, b;

        Console.Write(""Podaj imię: "");
        imie = Console.ReadLine();
        
        Console.Write(""Podaj a: "");
        a = int.Parse(Console.ReadLine());

        
        Console.Write(""Podaj b: "");
        b = int.Parse(Console.ReadLine());
        
        int suma = a + b;
        int roznica = a - b;
        int iloczyn = a * b;
        

        Console.Clear();

        Console.WriteLine($""Cześć {imie}, to wyniki Twoich obliczeń: "");
        Console.WriteLine();

        Console.WriteLine($""{a} + {b} = {suma}"");
        Console.WriteLine($""{a} - {b} = {roznica}"");
        Console.WriteLine($""{a} * {b} = {iloczyn}"");
        if (b != 0)
        {
            double iloraz = (double)a / b; //szybkie rzutowanie
            Console.WriteLine($""{a} / {b} = {iloraz}"");
        }

    }
}
}"
bQ7kz6m6,Task3 Formal Practice,MartichValov,JavaScript,Tuesday 31st of October 2023 02:29:32 PM CDT,"export default function (data) {
  const calcAvg = (grades) => grades.reduce((accVal, currVal) => accVal += currVal.grade, 0) / grades.length;
  const getStudentGrades = (grades, id, name) => grades.filter(grade => grade.studentId === id || grade.studentName === name)
  
  // assign the name of the course and the additional properties
  const resObj = { name: data.course, graduates: [], nonGraduates: [] };

  // iterate thrugh the students property
  data.students.map(student => {
    // find all its grades in the grades property
    const currStudentGrades = getStudentGrades(data.grades, student.id, student.name);
    // find all its exams in the exams property
    const currStudentExams = getStudentGrades(data.exams, student.id, student.name);

    // calculate its avg grade from grades and exams
    const avgGrade = (calcAvg(currStudentGrades) * 0.4) + (calcAvg(currStudentExams) * 0.6);

    // if avgGrade grater than minPassingGrade and found exams.length > 2
    if (avgGrade >= data.passingGrade && currStudentExams.length >= 2) {
      // push in resObj.graduates { id: id of student, name: name of student, grade: avg Grade }
      resObj.graduates.push({ ...student, grade: avgGrade });

      // if avgGrade < than minPassingGrade but found exams.length > 2
    } else if (avgGrade < data.passingGrade && currStudentExams.length >= 2) {
      // push in resObj.nonGraduates { id: id of student, name: name of student, reason: 'score' }
      resObj.nonGraduates.push({ ...student, reason: 'score' });

      // if avgGrade > than minPassingGrade and found exams.length < 2
    } else if (avgGrade >= data.passingGrade && currStudentExams.length < 2) {
      // push in resObj.nonGraduates { id: id of student, name: name of student, reason: 'exams' }
      resObj.nonGraduates.push({ ...student, reason: 'exams' });

    } else {
      // push in resObj.nonGraduates { id: id of student, name: name of student, reason: 'score and exams' }
      resObj.nonGraduates.push({ ...student, reason: 'score and exams' });
    }
  });
  return resObj
}"
NYiw0zFP,Processar formulário,hercioneto,PHP,Tuesday 31st of October 2023 02:08:14 PM CDT,"<!DOCTYPE html>
<html lang=""pt-br"">
<head> 
    <meta charset=""utf-8"">
    <title>Meu Site!</title>
</head>
<body>
    <h1>RETORNO DAS INFORMAÇÕES</h1>
<?php
//processar_formulario.php
if ($_SERVER[""REQUEST_METHOD""] == ""POST"") {
    $nome = $_POST[""nome""];
    $cidade = $_POST[""cidade""];

    echo ""Nome: "" . $nome . ""<br>"";
    echo ""Cidade: "" . $cidade;
}
?>
<br>
<h2><?php 
echo ""Mais uma linha de texto."";
?></h2>
</body>
</html>
"
ZuPUj3tT,temp,zehdeh,JSON,Tuesday 31st of October 2023 02:04:35 PM CDT,"{
""temperature"":""18""
}"
eUcWmiL9,Nigerian scammers [31-10-1/2023],bombaires,AIMMS,Tuesday 31st of October 2023 01:48:18 PM CDT,"<a href=""mailto:engr.fernandoarmando@gmail.com"">engr.fernandoarmando@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+979@gmail.com"">engr.fernandoarmando+979@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+19028@gmail.com"">engr.fernandoarmando+19028@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+13874@gmail.com"">engr.fernandoarmando+13874@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+31628@gmail.com"">engr.fernandoarmando+31628@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+2976@gmail.com"">engr.fernandoarmando+2976@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+24380@gmail.com"">engr.fernandoarmando+24380@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+15408@gmail.com"">engr.fernandoarmando+15408@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+9179@gmail.com"">engr.fernandoarmando+9179@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+1790@gmail.com"">engr.fernandoarmando+1790@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+20532@gmail.com"">engr.fernandoarmando+20532@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+18852@gmail.com"">engr.fernandoarmando+18852@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+21726@gmail.com"">engr.fernandoarmando+21726@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+13775@gmail.com"">engr.fernandoarmando+13775@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+23048@gmail.com"">engr.fernandoarmando+23048@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+12674@gmail.com"">engr.fernandoarmando+12674@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+8597@gmail.com"">engr.fernandoarmando+8597@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+3025@gmail.com"">engr.fernandoarmando+3025@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+30136@gmail.com"">engr.fernandoarmando+30136@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+2787@gmail.com"">engr.fernandoarmando+2787@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+9067@gmail.com"">engr.fernandoarmando+9067@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+25547@gmail.com"">engr.fernandoarmando+25547@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+29940@gmail.com"">engr.fernandoarmando+29940@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+24893@gmail.com"">engr.fernandoarmando+24893@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+23973@gmail.com"">engr.fernandoarmando+23973@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+20588@gmail.com"">engr.fernandoarmando+20588@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+15672@gmail.com"">engr.fernandoarmando+15672@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+30068@gmail.com"">engr.fernandoarmando+30068@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+11289@gmail.com"">engr.fernandoarmando+11289@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+26205@gmail.com"">engr.fernandoarmando+26205@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+13531@gmail.com"">engr.fernandoarmando+13531@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+25728@gmail.com"">engr.fernandoarmando+25728@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+20376@gmail.com"">engr.fernandoarmando+20376@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+24388@gmail.com"">engr.fernandoarmando+24388@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+27911@gmail.com"">engr.fernandoarmando+27911@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+18161@gmail.com"">engr.fernandoarmando+18161@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+679@gmail.com"">engr.fernandoarmando+679@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+14915@gmail.com"">engr.fernandoarmando+14915@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+26552@gmail.com"">engr.fernandoarmando+26552@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+6648@gmail.com"">engr.fernandoarmando+6648@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+5559@gmail.com"">engr.fernandoarmando+5559@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+2851@gmail.com"">engr.fernandoarmando+2851@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+11961@gmail.com"">engr.fernandoarmando+11961@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+9541@gmail.com"">engr.fernandoarmando+9541@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+22616@gmail.com"">engr.fernandoarmando+22616@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+1711@gmail.com"">engr.fernandoarmando+1711@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+1027@gmail.com"">engr.fernandoarmando+1027@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+18572@gmail.com"">engr.fernandoarmando+18572@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+8590@gmail.com"">engr.fernandoarmando+8590@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+11515@gmail.com"">engr.fernandoarmando+11515@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+8389@gmail.com"">engr.fernandoarmando+8389@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+19772@gmail.com"">engr.fernandoarmando+19772@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+7431@gmail.com"">engr.fernandoarmando+7431@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+26678@gmail.com"">engr.fernandoarmando+26678@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+7656@gmail.com"">engr.fernandoarmando+7656@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+16441@gmail.com"">engr.fernandoarmando+16441@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+29586@gmail.com"">engr.fernandoarmando+29586@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+10276@gmail.com"">engr.fernandoarmando+10276@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+6944@gmail.com"">engr.fernandoarmando+6944@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+14211@gmail.com"">engr.fernandoarmando+14211@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+16201@gmail.com"">engr.fernandoarmando+16201@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+19333@gmail.com"">engr.fernandoarmando+19333@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+17671@gmail.com"">engr.fernandoarmando+17671@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+8792@gmail.com"">engr.fernandoarmando+8792@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+10508@gmail.com"">engr.fernandoarmando+10508@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+18076@gmail.com"">engr.fernandoarmando+18076@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+12893@gmail.com"">engr.fernandoarmando+12893@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+24433@gmail.com"">engr.fernandoarmando+24433@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+15304@gmail.com"">engr.fernandoarmando+15304@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+15917@gmail.com"">engr.fernandoarmando+15917@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+21713@gmail.com"">engr.fernandoarmando+21713@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+11204@gmail.com"">engr.fernandoarmando+11204@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+4967@gmail.com"">engr.fernandoarmando+4967@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+16834@gmail.com"">engr.fernandoarmando+16834@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+6984@gmail.com"">engr.fernandoarmando+6984@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+5527@gmail.com"">engr.fernandoarmando+5527@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+24940@gmail.com"">engr.fernandoarmando+24940@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+25178@gmail.com"">engr.fernandoarmando+25178@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+2928@gmail.com"">engr.fernandoarmando+2928@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+26494@gmail.com"">engr.fernandoarmando+26494@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+15246@gmail.com"">engr.fernandoarmando+15246@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+26401@gmail.com"">engr.fernandoarmando+26401@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+2386@gmail.com"">engr.fernandoarmando+2386@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+32690@gmail.com"">engr.fernandoarmando+32690@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+20932@gmail.com"">engr.fernandoarmando+20932@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+19439@gmail.com"">engr.fernandoarmando+19439@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+20188@gmail.com"">engr.fernandoarmando+20188@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+29568@gmail.com"">engr.fernandoarmando+29568@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+10098@gmail.com"">engr.fernandoarmando+10098@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+525@gmail.com"">engr.fernandoarmando+525@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+6978@gmail.com"">engr.fernandoarmando+6978@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+8492@gmail.com"">engr.fernandoarmando+8492@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+29819@gmail.com"">engr.fernandoarmando+29819@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+20073@gmail.com"">engr.fernandoarmando+20073@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+3215@gmail.com"">engr.fernandoarmando+3215@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+11595@gmail.com"">engr.fernandoarmando+11595@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+18997@gmail.com"">engr.fernandoarmando+18997@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+30134@gmail.com"">engr.fernandoarmando+30134@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+24292@gmail.com"">engr.fernandoarmando+24292@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+3152@gmail.com"">engr.fernandoarmando+3152@gmail.com</a>
<a href=""mailto:engr.fernandoarmando+20614@gmail.com"">engr.fernandoarmando+20614@gmail.com</a>
<a href=""mailto:info@us-td.online"">info@us-td.online</a>"
1PaBeyzq,student,VssA,Python,Tuesday 31st of October 2023 01:33:28 PM CDT,"class Person:
    def __init__(self, name="""", age=0):
        self.name = name
        self.age = age

    def info(self):
        print(f""имя = {self.name}, возраст = {self.age}"")


class Student(Person):
    def __init__(self, name="""", age=0, average_grade=0.0):
        super().__init__(name, age)
        self.average_grade = average_grade

    def scholarship(self):
        if 4.0 <= self.average_grade <= 5.0:
            print(f""Студент {self.name} получает стипендию"")
        else:
            print(f""Студент {self.name} не получает стипендию"")


if __name__ == ""__main__"":
    student1 = Student('Иван Иванович', 20, 3.5)
    student2 = Student('Иван Степанович', 21, 4.0)
    student3 = Student('Иван Фомич', 22, 2.0)
    student4 = Student('Иван Кузьмич', 23, 5.0)

    print(student1.scholarship())
    print(student2.scholarship())
    print(student3.scholarship())
    print(student4.scholarship())
"
0ESMpvrg,animals,VssA,Python,Tuesday 31st of October 2023 01:18:03 PM CDT,"class Animal:
    def __init__(self, weight, age, sound):
        self.animal_sound = sound
        self.weight = weight
        self.age = age

    def pet(self):
        print('happy sounds')

    def info(self):
        print(f""вес животного = {self.weight}, возраст = {self.age}, что говорит питомец = {self.animal_sound}"")


class Dog(Animal):
    def __init__(self, weight=0, age=0, sound="""", breed=""""):
        super().__init__(weight, age, sound)
        self.breed = breed

    def which_breed(self):
        print(self.breed)


class Cat(Animal):
    def __init__(self, weight=0, age=0, sound="""", color=""""):
        super().__init__(weight, age, sound)
        self.color = color

    def which_color(self):
        print(self.color)


class Elephant(Animal):
    def __init__(self, weight=0, age=0, sound="""", ears_size=0):
        super().__init__(weight, age, sound)
        self.ears_size = ears_size

    def ears(self):
        print(self.ears_size)


if __name__ == ""__main__"":
    cat = Cat(2, 2, 'MEOW', 'black')
    print(cat.info())
    print(f""цвет кошки: {cat.color}"")

    dog = Dog(2, 2, 'BARK', 'shepherd')
    print(dog.info())
    print(f""порода собаки: {dog.breed}"")

    elephant = Elephant(200, 7, 'ELEPHANT_SOUND', 20)
    print(elephant.info())
    print(f""{elephant.ears_size}"")

"
hLGGwksD,init.el,DatSudo,Lisp,Tuesday 31st of October 2023 01:13:41 PM CDT,"(use-package evil
  :init
  (setq evil-want-integration t
   evil-want-keybinding nil
   evil-want-C-u-scroll t
   evil-want-C-i-jump nil)
  :config
  (evil-mode 1)
  (evil-global-set-key 'motion ""j"" 'evil-next-visual-line)
  (evil-global-set-key 'motion ""k"" 'evil-previous-visual-line)
  (evil-set-initial-state 'message-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal)
  (evil-set-undo-system 'undo-redo))

(use-package evil-collection
  :after evil
  :ensure t
  :config
  (evil-collection-init))

(use-package which-key
  :defer 0
  :diminish which-key-mode
  :config
  (which-key-mode)
  (setq which-key-idle-delay 1))

(use-package lsp-mode
  :init
  (setq lsp-keymap-prefix ""C-c l"")
  :config
  (setq lsp-headerline-breadcrumb-enable nil
        lsp-enable-file-watchers nil)
  (lsp-enable-which-key-integration t))

(use-package lsp-ui
  :hook (lsp-mode . lsp-ui-mode)
  :custom
  (lsp-ui-doc-position 'bottom))

(setq lsp-ui-doc-frame-mode t
      lsp-lens-enable t
      lsp-ui-sideline-show-hover nil
      lsp-ui-sideline-show-symbol nil
      lsp-ui-sideline-show-code-actions nil
      lsp-ui-sideline-show-diagnostics t)

(use-package lsp-treemacs
  :after lsp)

(use-package lsp-ivy
  :after lsp)

(use-package python-mode
  :ensure t
  :hook (python-mode . lsp-deferred)
  :config
  (setq python-indent-levels 4))

(use-package pyvenv
  :after python-mode
  :config
  (pyenv-mode 1))

(use-package lsp-pyright
  :ensure t
  :hook
  (python-mode . (lambda () (require 'lsp-pyright) (lsp))))

; TYPESCRIPT
(use-package typescript-mode
  :hook (typescript-mode . lsp-deferred)
  :config
  (setq typescript-indent-level 4))



(use-package ivy
  :diminish
  :bind ((""C-s"" . swiper)
         :map ivy-minibuffer-map
         (""TAB"" . ivy-alt-done)
         (""C-n"" . ivy-next-line)
         (""C-p"" . ivy-previous-line)
         :map ivy-switch-buffer-map
         (""C-p"" . ivy-previous-line)
         (""C-d"" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         (""C-p"" . ivy-previous-line)
         (""C-d"" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))

(use-package ivy-rich
  :after ivy
  :init
  (ivy-rich-mode 1))

(use-package counsel
  :bind ((""C-M-b"" . 'counsel-switch-buffer))
  :custom
  (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
  :config
  (counsel-mode 1))

(use-package ivy-prescient
  :after counsel
  :custom
  (ivy-prescient-enable-filtering nil)
  :config
  (ivy-prescient-mode 1))

(use-package company
  :ensure t
  :hook (lsp-mode . company-mode)
  :bind (:map company-active-map
         (""<tab>"" . company-complete-selection))
        (:map lsp-mode-map
         (""<tab>"" . company-indent-or-complete-common))
  :custom
  (company-minimum-prefix-length 1)
  (company-idle-delay 0.0))

(use-package company-box
  :hook (company-mode . company-box-mode))

; enable completion in all buffers
(add-hook 'after-init-hook 'global-company-mode)
; except org mode
(setq company-global-modes '(not org-mode))



(global-set-key (kbd ""<escape>"") 'keyboard-escape-quit)

(global-set-key (kbd ""C-j"") 'evil-window-down)
(global-set-key (kbd ""C-k"") 'evil-window-up)
(global-set-key (kbd ""C-l"") 'evil-window-right)
(global-set-key (kbd ""C-h"") 'evil-window-left)

(keymap-global-unset ""M-<mouse-1>"")
(keymap-global-unset ""M-<mouse-2>"")
(keymap-global-unset ""M-<mouse-3>"")
(keymap-global-unset ""M-<drag-mouse-1>"")
(keymap-global-unset ""M-<down-mouse-1>"")

(efs/leader-keys
  ""t"" '(:ignore t :which-key ""toggles"")
  ""tt"" '(counsel-load-theme :which-key ""choose-theme"")

  ""b"" '(:ignore t :which-key ""buffer"")
  ""bb"" '(counsel-switch-buffer :which-key ""buffer-switch"")
  ""bd"" '(kill-buffer-and-window :which-key ""buffer-delete"")
  ""bn"" '(next-buffer :which-key ""switch-to-next-buffer"")
  ""bp"" '(previous-buffer :which-key ""switch-to-prev-buffer"")

  ""f"" '(:ignore t :which-key ""file"")
  ""fv"" '(eval-buffer :which-key ""eval-file"")
  ""fs"" '(save-buffer :which-key ""save-file"")
  ""ff"" '(find-file :which-key ""find-file"")
  ""fn"" '(dired-jump :which-key ""find-project-file"")

  ""fk"" '(:ignore t :which-key ""bookmark"")
  ""fkm"" '(bookmark-set :which-key ""bookmark-current-file"")
  ""fks"" '(bookmark-save :which-key ""bookmark-save"")
  ""fkb"" '(bookmark-jump :which-key ""bookmark-jump"")


  ""o"" '(:ignore t :which-key ""org"")
  ""ol"" '(org-insert-link :which-key ""insert-link"")
  ""oa"" '(org-agenda :which-key ""org-agenda"")


  ""v"" '(:ignore t :which-key ""LSP"")
  ""vr"" '(lsp-rename :which-key ""rename-symbol"")
  ""vs"" '(lsp-treemacs-symbols :which-key ""show-symbols"")
  ""vl"" '(flycheck-list-errors :which-key ""show-diagnostics"")

  ""g"" '(:ignore t :which-key ""Git"")
  ""gt"" '(magit :which-key ""Git status"")

  ""p"" '(:ignore t :which-key ""projectile"")
  ""pp"" '(projectile-switch-project :which-key ""select-project"")
  ""pf"" '(projectile-find-file-in-directory :which-key ""select-file-in-project""))



(setq gc-cons-threshold (* 2 1000 1000))"
2JDBB27t,Untitled,tomthorgal,Lua,Tuesday 31st of October 2023 01:04:26 PM CDT,"--[[
ftog_thorgal turtle programs
pastebin get 2JDBB27t turtlefueling
]]--

turtle.forward()
turtle.turnLeft()

turtle.suck()
sleep(1)
turtle.select(1)

while turtle.getFuelLevel() < turtle.getFuelLimit() do
 turtle.placeDown()
 sleep(1)
 turtle.refuel()
 print(turtle.getFuelLevel())
 sleep(1)
end

turtle.drop()
sleep(1)

turtle.turnRight()
turtle.back()"
PDTBbjCM,antihacker and snowybot handbreaker,coinwalk,JavaScript,Tuesday 31st of October 2023 01:01:27 PM CDT,"var smiley = parseFloat(document.getElementById('pct_balance').value);
var nudie = Number((0.01).toFixed(8));
var burp = nudie;
var taget = (smiley*20000);
var bolux = (nudie*10);
var dog = (nudie*50);
var poopy = (nudie*6.5);
var mole = (nudie*7.5);
var jockey = ((burp*1).toFixed(8));
var bolance = smiley;
var fart = 1;
var over = 6.9;
var under = 2.9;
var zimple = smiley;
var becomer = 0;
var beboon = true;
var blowzy = false;
var sexual = ((Math.floor(bolance/bolux))*bolux);
var woman = ((Math.floor(bolance/bolux))*bolux);
var manboobs = ((Math.floor(bolance/bolux))*bolux);
var brother = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var homer = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var finical = document.getElementById('me').firstChild.lastChild.firstChild.children[7].innerText;
 
function get(){
console.clear();
bolance = document.getElementById('pct_balance').value;
if (bolance>(sexual+(burp*over))) {
    burp = burp*2;
    over = 4.9;
    under = 4.9;
    sexual = parseFloat(bolance);
}
if (bolance<(sexual-(burp*under))) {
    burp = burp*2;
    fart = 0;
    over = 4.9;
    under = 4.9;
    sexual = parseFloat(bolance);
}
if ((bolance>(manboobs+(bolux*fart)))&&(bolance<(((Math.floor(bolance/bolux))*bolux)+poopy))){
    burp = nudie;
    over = 6.9;
    under = 2.9;
    fart = 1;
    sexual = ((Math.floor(bolance/bolux))*bolux);
    woman = ((Math.floor(bolance/bolux))*bolux);
    manboobs = ((Math.floor(bolance/bolux))*bolux);
}
if ((bolance>(woman+(bolux*2)))&&(bolance<(((Math.floor(bolance/bolux))*bolux)+poopy))){
    burp = nudie;
    over = 6.9;
    under = 2.9;
    sexual = ((Math.floor(bolance/bolux))*bolux);
    woman = ((Math.floor(bolance/bolux))*bolux);
}
if ((bolance<(woman-bolux))&&(bolance<(((Math.floor(bolance/bolux))*bolux)+poopy))){
    burp = nudie;
    over = 6.9;
    under = 2.9;
    sexual = ((Math.floor(bolance/bolux))*bolux);
    woman = ((Math.floor(bolance/bolux))*bolux);
}
    if (bolance >= taget) {
        console.log(""winner winner chicken dinner"");
        return;
    }
homer = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var coldbet = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var milk = document.getElementById('me').firstChild.lastChild.firstChild.children[11].innerText;
if ((milk==jockey)&&(becomer>=1)&&(homer>brother)&&(!beboon)){
setTimeout(function(){
finical = document.getElementById('me').firstChild.lastChild.firstChild.children[7].innerText;
brother = parseFloat(homer);
beboon = true;
}, 100);
}
if ((finical<49.5000)&&(blowzy)&&(becomer>=1)){
zimple = zimple+burp
blowzy = false;
}
if ((finical>=49.5000)&&(blowzy)&&(becomer>=1)){
zimple = zimple-burp;
blowzy = false;
}
var ficked = ((zimple*1).toFixed(8));
var migg = ((bolance*1).toFixed(8));
if (((milk!=jockey)&&(becomer>=1)&&(homer>brother))||((ficked!=migg)&&(blowzy))){
console.log(""hacker attacked you with"");
console.log(milk);
console.log(""bet number of attack:"");
console.log(coldbet);
return;
}
if ((homer==brother)&&(beboon)){
jockey = ((burp*1).toFixed(8));
$('#pct_chance').val(49.5);
$('#pct_bet').val(jockey);
$('#a_lo').click();
becomer = becomer+1;
blowzy = true;
beboon = false;
homer = 0;
var good = ((bolance-smiley).toFixed(8));
console.log(""profit"");
console.log(good);
}
setTimeout(() => get(), 200);
}
get();"
yJxEZeES,Untitled,Josif_tepe,C++,Tuesday 31st of October 2023 12:51:29 PM CDT,"#include <iostream>

using namespace std;
int width, n;
int steps[55];
int dp[55][2002];
int rec(int at, int position) {
    if(at == n) {
        return position;
    }
    if(dp[at][position] != -1) {
        return dp[at][position];
    }
    int result = -1;
    if(position - steps[at] >= 0) {
        result = max(result, rec(at + 1, position - steps[at]));
    }
    if(position + steps[at] <= width) {
        result = max(result, rec(at + 1, position + steps[at]));
    }
    return dp[at][position] = result;
}
int main()
{
    int S;
    cin >> S >> width;
    
    cin >> n;
    for(int i = 0; i < n; i++) {
        cin >> steps[i];
    }
    
    for(int i = 0; i <= n; i++) {
        for(int j = 0; j <= 2000; j++) {
            dp[i][j] = -1;
        }
    }
    cout << rec(0, S) << endl;
    return 0;
}
"
ae79EmBf,CC Computer: Airlock Open/Close,QarthO,Lua,Tuesday 31st of October 2023 12:50:24 PM CDT,"local range = 3

local Peripherals = {
    PLAYER_DETECTOR = ""bottom"",
    DOOR = ""top""
}

playerDetector = peripheral.wrap(Peripherals.PLAYER_DETECTOR)

while true do
    playersInRange = playerDetector.getPlayersInRange(range)

    if not next(playersInRange) then
        rs.setOutput(Peripherals.DOOR, false)
    else
        rs.setOutput(Peripherals.DOOR, true)
    end
end"
zSqKyp23,antihacker and snowybot handbreaker,coinwalk,JavaScript,Tuesday 31st of October 2023 12:50:21 PM CDT,"var smiley = parseFloat(document.getElementById('pct_balance').value);
var nudie = Number((smiley/100).toFixed(8));
var burp = nudie;
var taget = (smiley*7);
var bolux = (nudie*10);
var dog = (nudie*50);
var poopy = (nudie*6.5);
var mole = (nudie*7.5);
var jockey = ((burp*1).toFixed(8));
var bolance = smiley;
var fart = 1;
var over = 6.9;
var under = 2.9;
var zimple = smiley;
var becomer = 0;
var beboon = true;
var blowzy = false;
var sexual = ((Math.floor(bolance/bolux))*bolux);
var woman = ((Math.floor(bolance/bolux))*bolux);
var manboobs = ((Math.floor(bolance/bolux))*bolux);
var brother = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var homer = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var finical = document.getElementById('me').firstChild.lastChild.firstChild.children[7].innerText;
 
function get(){
console.clear();
bolance = document.getElementById('pct_balance').value;
if (bolance>(sexual+(burp*over))) {
    burp = burp*2;
    over = 4.9;
    under = 4.9;
    sexual = parseFloat(bolance);
}
if (bolance<(sexual-(burp*under))) {
    burp = burp*2;
    fart = 0;
    over = 4.9;
    under = 4.9;
    sexual = parseFloat(bolance);
}
if ((bolance>(manboobs+(bolux*fart)))&&(bolance<(((Math.floor(bolance/bolux))*bolux)+poopy))){
    burp = nudie;
    over = 6.9;
    under = 2.9;
    fart = 1;
    sexual = ((Math.floor(bolance/bolux))*bolux);
    woman = ((Math.floor(bolance/bolux))*bolux);
    manboobs = ((Math.floor(bolance/bolux))*bolux);
}
if ((bolance>(woman+(bolux*2)))&&(bolance<(((Math.floor(bolance/bolux))*bolux)+poopy))){
    burp = nudie;
    over = 6.9;
    under = 2.9;
    sexual = ((Math.floor(bolance/bolux))*bolux);
    woman = ((Math.floor(bolance/bolux))*bolux);
}
if ((bolance<(woman-bolux))&&(bolance<(((Math.floor(bolance/bolux))*bolux)+poopy))){
    burp = nudie;
    over = 6.9;
    under = 2.9;
    sexual = ((Math.floor(bolance/bolux))*bolux);
    woman = ((Math.floor(bolance/bolux))*bolux);
}
    if (bolance >= taget) {
        console.log(""winner winner chicken dinner"");
        return;
    }
homer = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var coldbet = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var milk = document.getElementById('me').firstChild.lastChild.firstChild.children[11].innerText;
if ((milk==jockey)&&(becomer>=1)&&(homer>brother)&&(!beboon)){
setTimeout(function(){
finical = document.getElementById('me').firstChild.lastChild.firstChild.children[7].innerText;
brother = parseFloat(homer);
beboon = true;
}, 100);
}
if ((finical<49.5000)&&(blowzy)&&(becomer>=1)){
zimple = zimple+burp
blowzy = false;
}
if ((finical>=49.5000)&&(blowzy)&&(becomer>=1)){
zimple = zimple-burp;
blowzy = false;
}
var ficked = ((zimple*1).toFixed(8));
var migg = ((bolance*1).toFixed(8));
if (((milk!=jockey)&&(becomer>=1)&&(homer>brother))||((ficked!=migg)&&(blowzy))){
console.log(""hacker attacked you with"");
console.log(milk);
console.log(""bet number of attack:"");
console.log(coldbet);
return;
}
if ((homer==brother)&&(beboon)){
jockey = ((burp*1).toFixed(8));
$('#pct_chance').val(49.5);
$('#pct_bet').val(jockey);
$('#a_lo').click();
becomer = becomer+1;
blowzy = true;
beboon = false;
homer = 0;
var good = ((bolance-smiley).toFixed(8));
console.log(""profit"");
console.log(good);
}
setTimeout(() => get(), 200);
}
get();"
ykaH4eDe,Advanced AND - Donald AND Duck AND Hello,wheresTheAnyKey,C,Tuesday 31st of October 2023 12:40:52 PM CDT,"Pasted at: 31/10/2023 17:40
Test data generated by 98823c9ce7f73d22c0e84a43ab6f6ed3

DATA_ID_TESTDATATOFIND
hello, donald was a duck

5502491997132108

Fuzzy-Wuzzy	- DASH
Fuzzy;Wuzzy	- COLON
Fuzzy!Wuzzy	- EXCLAMATION
Fuzzy£Wuzzy	- POUND
Fuzzy#Wuzzy	- HASH
Fuzzy%Wuzzy	- PERCENT
Fuzzy@Wuzzy	- AT
Fuzzy&Wuzzy	- AND
Fuzzy=Wuzzy	- EQUAL
Fuzzy§Wuzzy
Fuzzy~Wuzzy
Fuzzy?Wuzzy	 - QUESTION MARK
Fuzzy$Wuzzy	 - DOLLAR
Fuzzy[Wuzzy] - BRACKETS
Fuzzy^Wuzzy
Fuzzy(Wuzzy) - BRACKETS
Fuzzy+Wuzzy	 - PLUS
Fuzzy±Wuzzy	 - PLUS/MINUE
Fuzzy|Wuzzy	 - PIPE
Fuzzy/Wuzzy	 - FORWARDSLASH
Fuzzy<Wuzzy> - BRACKETS
Fuzzy{Wuzzy} - CURLY
Fuzzy\Wuzzy  - BACKSLASH
"
br8sf1Sr,Financial What's Inside - Email/IP/Bank,wheresTheAnyKey,C,Tuesday 31st of October 2023 12:40:50 PM CDT,"Pasted at: 31/10/2023 17:40
Test data generated by 98823c9ce7f73d22c0e84a43ab6f6ed3
What's Inside Paste 

5378496492418234
5571598708435236
5587663820997281
5502491997132108
5516931903918995
5322909948799236
5443317136071703
5409137465238695
5497550044220575
5559606180091553

aaribaud@att.net
aaribaud@comcast.net
aaribaud@att.com
aaribaud@att.co.uk
aaribaud@yahoo.com

246.107.72.199
221.187.199.189
3.109.3.44
109.112.85.139
250.83.213.179
169.141.201.234
50.180.50.59
20.181.54.231
64.235.191.167
48.103.36.43"
m4XU141S,Financial with SPECIAL CHARACTERS,wheresTheAnyKey,C,Tuesday 31st of October 2023 12:40:49 PM CDT,"Pasted at: 31/10/2023 17:40
Test data generated by 98823c9ce7f73d22c0e84a43ab6f6ed3

DATA_ID_TESTDATATOFIND

5148-2121-6312-7114   - DASHES
5148212163127114
5107-4578-0576-9075   - DASHES
5107457805769075
3488-1760-1454-729   - DASHES
348817601454729

Fuzzy-Wuzzy	- DASH
Fuzzy;Wuzzy	- COLON
Fuzzy!Wuzzy	- EXCLAMATION
Fuzzy£Wuzzy	- POUND
Fuzzy#Wuzzy	- HASH
Fuzzy%Wuzzy	- PERCENT
Fuzzy@Wuzzy	- AT
Fuzzy&Wuzzy	- AND
Fuzzy=Wuzzy	- EQUAL
Fuzzy§Wuzzy
Fuzzy~Wuzzy
Fuzzy?Wuzzy	 - QUESTION MARK
Fuzzy$Wuzzy	 - DOLLAR
Fuzzy[Wuzzy] - BRACKETS
Fuzzy^Wuzzy
Fuzzy(Wuzzy) - BRACKETS
Fuzzy+Wuzzy	 - PLUS
Fuzzy±Wuzzy	 - PLUS/MINUE
Fuzzy|Wuzzy	 - PIPE
Fuzzy/Wuzzy	 - FORWARDSLASH
Fuzzy<Wuzzy> - BRACKETS
Fuzzy{Wuzzy} - CURLY
Fuzzy\Wuzzy  - BACKSLASH"
KFVDzN7C,Domains with SPECIAL CHARS,wheresTheAnyKey,C,Tuesday 31st of October 2023 12:40:47 PM CDT,"Pasted at: 31/10/2023 17:40
Test data generated by 98823c9ce7f73d22c0e84a43ab6f6ed3

DATA_ID_TESTDATATOFIND

www.qatesting.com
blog.qatesting.com
www.qatesting.com/index.html
www.qatesting.com/home
www.qatestingblog.com
www.qatestingtutorials.com
shop.qatesting.co.uk
admin.qatesting.io 
qatesting
qatesting.co.uk
qatesting.cn
qatesting.io
findmetesting.com
www.qatesting-blog.com
www.qatesting-blog23.com
www.qatesting
www.qatesting.co.uk
www.qatesting.cn
www.qatesting.io
www.findmetesting.com
www.wobsut.gov

The difference is that QA is process oriented and QC is product oriented.

Testing, therefore is product oriented and thus is in the QC domain. Testing for quality isn't assuring quality, it's controlling it.



Fuzzy-Wuzzy	- DASH
Fuzzy;Wuzzy	- COLON
Fuzzy!Wuzzy	- EXCLAMATION
Fuzzy£Wuzzy	- POUND
Fuzzy#Wuzzy	- HASH
Fuzzy%Wuzzy	- PERCENT
Fuzzy@Wuzzy	- AT
Fuzzy&Wuzzy	- AND
Fuzzy=Wuzzy	- EQUAL
Fuzzy§Wuzzy
Fuzzy~Wuzzy
Fuzzy?Wuzzy	 - QUESTION MARK
Fuzzy$Wuzzy	 - DOLLAR
Fuzzy[Wuzzy] - BRACKETS
Fuzzy^Wuzzy
Fuzzy(Wuzzy) - BRACKETS
Fuzzy+Wuzzy	 - PLUS
Fuzzy±Wuzzy	 - PLUS/MINUE
Fuzzy|Wuzzy	 - PIPE
Fuzzy/Wuzzy	 - FORWARDSLASH
Fuzzy<Wuzzy> - BRACKETS
Fuzzy{Wuzzy} - CURLY
Fuzzy\Wuzzy  - BACKSLASH
"
f8QZZL33,ALL Keywords with Excluded Words,wheresTheAnyKey,C,Tuesday 31st of October 2023 12:40:46 PM CDT,"Pasted at: 31/10/2023 17:40
Test data generated by 98823c9ce7f73d22c0e84a43ab6f6ed3

DATA_ID_TESTDATATOFIND 

The dystopian version of superintelligence is illustrated with frequency by leaders in the technology industry, and is famously depicted by Hollywood in films like Terminator, 
or more recently Ex Machina, and even the Avengers. The “furious deity A.I.” is a story you know, because it is the story you are constantly told: we build the thinking machine, 
it surpasses our abilities in every way, and it destroys us for one of any number of reasons.Maybe it perceives us as a threat. Maybe we’re just in its way, 
and it hardly perceives us at all — mankind, a disposable insect race.

There are of course many arguments in opposition to the now ubiquitous concept of our apocalypse by artificial intelligence. 
I myself have called into question the logic of such dystopian arguments in Anatomy of Next. But our subject here is less pertaining to the nature of the conscious machine than 
it is to the way we talk about this subject, and what it means. First, consider that most of the artificial intelligence depicted in culture looks human, a representation with 
no basis in technological reality. Then, the true scope of the Singularity is almost impossible to predict, which begs a question: where are these opinions about the broadly 
unknowable coming from?"
2r0HU4Ht,All Keywords with ANY Additional Words,wheresTheAnyKey,C,Tuesday 31st of October 2023 12:40:44 PM CDT,"Pasted at: 31/10/2023 17:40
Test data generated by 98823c9ce7f73d22c0e84a43ab6f6ed3

DATA_ID_TESTDATATOFIND KEYWAUTO

The dystopian version of superintelligence is illustrated with frequency by leaders in the technology industry, and is famously depicted by Hollywood in films like Terminator, or more recently Ex Machina, and even the Avengers. The “angry god A.I.” is a story you know, because it is the story you are constantly told: we build the thinking machine, it surpasses our abilities in every way, and it destroys us for one of any number of reasons.
Maybe it perceives us as a threat. Maybe we’re just in its way, and it hardly perceives us at all — humanity, a disposable insect race.

There are of course many arguments in opposition to the now ubiquitous concept of our apocalypse by artificial intelligence. I myself have called into question the logic of such dystopian arguments in Anatomy of Next. But our subject here is less pertaining to the nature of the conscious machine than it is to the way we talk about this subject, and what it means. First, consider that most of the artificial intelligence depicted in culture looks human, a representation with no basis in technological reality. Then, the true scope of the Singularity is almost impossible to predict, which begs a question: where are these opinions about the broadly unknowable coming from?

6589745854123698

Fuzzy-Wuzzy	- DASH
Fuzzy;Wuzzy	- COLON
Fuzzy!Wuzzy	- EXCLAMATION
Fuzzy£Wuzzy	- POUND
Fuzzy#Wuzzy	- HASH
Fuzzy%Wuzzy	- PERCENT
Fuzzy@Wuzzy	- AT
Fuzzy&Wuzzy	- AND
Fuzzy=Wuzzy	- EQUAL
Fuzzy§Wuzzy
Fuzzy~Wuzzy
Fuzzy?Wuzzy	 - QUESTION MARK
Fuzzy$Wuzzy	 - DOLLAR
Fuzzy[Wuzzy] - BRACKETS
Fuzzy^Wuzzy
Fuzzy(Wuzzy) - BRACKETS
Fuzzy+Wuzzy	 - PLUS
Fuzzy±Wuzzy	 - PLUS/MINUE
Fuzzy|Wuzzy	 - PIPE
Fuzzy/Wuzzy	 - FORWARDSLASH
Fuzzy<Wuzzy> - BRACKETS
Fuzzy{Wuzzy} - CURLY
Fuzzy\Wuzzy  - BACKSLASH
"
