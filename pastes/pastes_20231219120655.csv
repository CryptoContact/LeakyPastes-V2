id,title,username,language,date,content
uN0nAUz4,data787,TestGuy1,JSON,Tuesday 19th of December 2023 06:00:06 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '9067a0f91b875fa650e66e1ea724efeca0040313668586b0d2a51ea5444fc9ebdc61296d92280d9f17f27031f35c9ebf983e3537b2e46634b15532146def56b0f3cc291e7a713afe4b89d20970e5e132c24230556e76467bd999b95ff6ffecdebefca0e873cc6d380177f5e65a4bec024ceb14cf3fe1d8add5f80b6cc5313312',
  otherdata: [
    '82dfc21e62f9d04e6b947844d7cb2790',
    '3604bf2e40ac13a9afeba27a7539fb42',
    'de2ac3ff8b92880a70db970adb923df0',
    'e6ae4fb1f71dc20fbab518170650480d',
    '7fb2d0f487eaefc4c6f9c5442dab572b',
    '2fadc50903f8b42266c85e715f526ef0',
    '2421ba6f3adb86f7e118abf454f1fdb6',
    '0b50ad6d73a07b967bccd47fa5cb70d4'
  ]
}"
Tt1HNrsi,kek,Ethicist,JavaScript,Tuesday 19th of December 2023 05:53:59 AM CDT,"console.log(
	[0,-23,-40,-23,-36,46,-25,-33,-32,-19,46,-25,-27,-40,-23,46,-43,-33,-39,46,-39,-34]
		.map(
			x => String.fromCharCode(
				(Math.sqrt(-1)+'').charCodeAt(0) - x
			)
		)
		.join('')
)"
hUUbMEjq,canteria free font,elroseria,CSS,Tuesday 19th of December 2023 05:43:39 AM CDT,"<style>
 
@font-face {
font-family: canteria free;
src: url(https://dl.dropbox.com/s/p8h4eu0dlcyej18/canteriafree-regular.otf);
}
 
div {
font-family: canteria free;
}
 
</style>
 
<div> canteria </div>"
WABz9Hge,bumerang font,elroseria,CSS,Tuesday 19th of December 2023 05:39:17 AM CDT,"<style>
 
@font-face {
font-family: bumerang;
src: url(https://dl.dropbox.com/s/lxigxag65aj02t7/BumerangDemoVersionRegular-nRwZY.otf);
}
 
div {
font-family: bumerang;
}
 
</style>
 
<div> bumerang </div>"
tbMwJicw,bright fairy font,elroseria,CSS,Tuesday 19th of December 2023 05:30:24 AM CDT,"<style>
 
@font-face {
font-family: bright fairy;
src: url(https://dl.dropbox.com/s/20oirqmtuqkb2wl/Bright%20Fairy.ttf?dl=0);
}
 
div {
font-family: bright fairy;
}
 
</style>
 
<div> bright fairy </div>"
Z3g45k01,bhavuka font,elroseria,CSS,Tuesday 19th of December 2023 05:25:59 AM CDT,"<style>
 
@font-face {
font-family: bhavuka;
src: url(https://dl.dropbox.com/s/90zpsj9gvsyvsrf/Bhavuka-Regular.ttf);
}
 
div {
font-family: bhavuka;
}
 
</style>
 
<div> bhavuka regular </div>"
fxc3UQqE,G2A Refund Exploit Dec 2023,G2ARefundExploit,GetText,Tuesday 19th of December 2023 05:25:25 AM CDT,"G2A refund exploit updated guide - any item for free on G2A.com

https://drive.google.com/file/d/1AKxSk9vs38aBF7GEDJxf8mNi-_NVRLQ9/view#g2a_refund_exploit.pdf

Working as of 
13 December 2023

897028"
a7sGVuXL,Aaargh font,elroseria,CSS,Tuesday 19th of December 2023 05:23:18 AM CDT,"<style>
 
@font-face {
font-family: aaargh;
src: url(https://dl.dropbox.com/s/66ufsbhs03qtk7p/Aaargh.ttf?);
}
 
div {
font-family: aaargh;
}
 
</style>
 
<div> aaargh </div>"
Dzf4ddjM,poly,qwers451,C++,Tuesday 19th of December 2023 05:01:00 AM CDT,"#include <algorithm>
#include <iostream>
#include <utility>
#include <vector>

template <typename T>
class Polynomial {
private:
    std::vector<T> coef;

    // delete leading non-significant zeros
    void Delete_Front_Zeros() {
        while (!coef.empty() && coef.back() == T())
            coef.pop_back();
    }
public:
    // initialize polynomial with vector of coefficients
    Polynomial(const std::vector<T>& v) : coef(v) {
        Delete_Front_Zeros();
    }

    // initialize constant polynomial
    Polynomial(T c = T()) {
        if (c != T())
            coef.push_back(c);
    }

    // initialize polynomial with the pair of iterators
    template <typename Iter>
    Polynomial(Iter first, Iter last) {
        while (first != last) {
            coef.push_back(*first++);
        }
        Delete_Front_Zeros();
    }
    
    // returns degree of polynomial or -1 if it is zero polynomial
    int Degree() const {
        for (int i = coef.size() - 1; i >= 0; --i) {
            if (coef[i] != T())
                return i;
        }
        return -1;
    }

    // returns coefficient before this degree
    T operator[] (size_t degree) const {
        if (coef.size() > degree)
            return coef[degree];
        else
            return T();  // returns default value if requested degree is higher than max degree
    }

    // returns true if two polynomials are equal, false otherwise
    bool operator == (const Polynomial<T>& other) const {
        int fd = Degree();
        int sd = other.Degree();
        if (fd != sd) {
            return false;
        } else {
            for (; fd >= 0; --fd) {
                if ((*this)[fd] != other[fd]) {
                    return false;
                }
            }
            return true;
        }
    }

    // returns true if two polynomials are not equal, false otherwise
    bool operator != (const Polynomial<T>& other) const {
        return !(*this == other);
    }

    // sum of two polynomials
    Polynomial<T> operator + (const Polynomial<T>& other) const {
        size_t pol_size = std::max(coef.size(), other.coef.size());
        std::vector<T> pol(pol_size, T());  // resizing with default values
        for (size_t i = 0; i != pol_size; ++i)
            pol[i] = (*this)[i] + other[i];
        return Polynomial<T> {pol};
    }

    // difference of two polynomials
    Polynomial<T> operator - (const Polynomial<T>& other) const {  
        size_t pol_size = std::max(coef.size(), other.coef.size());
        std::vector<T> pol(pol_size, T());
        for (size_t i = 0; i != pol_size; ++i)
            pol[i] = (*this)[i] - other[i];
        return Polynomial<T> {pol};
    }

    // product of two polynomials
    Polynomial<T> operator * (const Polynomial<T>& other) const {  
        size_t pol_size = coef.size() + other.coef.size();
        std::vector<T> pol(pol_size, T());
        for (size_t i = 0; i != coef.size(); ++i) {
            for (size_t j = 0; j != other.coef.size(); ++j)
                pol[i + j] += (*this)[i] * other[j];
        }
        return Polynomial<T> {pol};
    }

    // sum of two polynomials
    Polynomial<T>& operator += (const Polynomial<T>& other) {
        size_t pol_size = std::max(coef.size(), other.coef.size());
        coef.resize(pol_size, T());
        for (size_t i = 0; i != pol_size; ++i)
            coef[i] += other[i];
        Delete_Front_Zeros();
        return *this;
    }

    // difference of two polynomials
    Polynomial<T>& operator -= (const Polynomial<T>& other) {
        size_t pol_size = std::max(coef.size(), other.coef.size());
        coef.resize(pol_size, T());
        for (size_t i = 0; i != pol_size; ++i)
            coef[i] -= other[i];
        Delete_Front_Zeros();
        return *this;
    }

    // product of two polynomials
    Polynomial& operator *= (const Polynomial<T>& other) {
        Polynomial poly = *this * other;
        *this = poly;
        return *this;
    }

    // calculates f(value)
    T operator() (T value) const {  
        T ans = T();
        for (int i = coef.size() - 1; i >= 0; --i)
            ans = coef[i] + ans * value;  // Horner's method
        return ans;
    }

    typename std::vector<T>::const_iterator begin() const {
        return coef.begin();
    }

    typename std::vector<T>::const_iterator end() const {
        return coef.end();
    }

    // returns composition
    Polynomial<T> operator & (const Polynomial<T>& other) const {  
        Polynomial<T> composition;
        for (size_t i = 0; i != coef.size(); ++i) {
            if (coef[i] != T()) {
                Polynomial<T> tmp{T(coef[i])};
                for (size_t j = 1; j != i + 1; ++j)
                    tmp *= other;
                composition += tmp;
            }
        }
        return composition;
    }

    // divides one polynomial by another
    std::pair<Polynomial<T>, T> operator / (const Polynomial<T>& other) const {
        Polynomial<T> first = *this;
        Polynomial<T> baza = *this;
        T b = 1;
        gohere:
        first = baza;
        std::vector<T> result(coef.size());
        int fd = first.Degree();
        while (fd >= other.Degree()) {
            if((first[fd] * first[fd]) < (other[other.Degree()] * other[other.Degree()])){
                baza = baza * other[other.Degree()];
                b = b * other[other.Degree()];
                goto gohere;
            }
            T t = first[fd] / other[other.Degree()];
            std::vector<T> tmp;
            for (int i = 0; i != fd - other.Degree(); ++i)
                tmp.push_back(T());
            tmp.push_back(t);
            Polynomial<T> p {tmp};
            first -= other * p;
            result[fd - other.Degree()] += t;
            fd = first.Degree();
        }
        return std::make_pair(Polynomial<T> {result}, b);
    }

    // returns remainder
    Polynomial<T> operator % (const Polynomial<T>& other) const {
        std::pair<Polynomial<T>, T> a = (*this/ other);
        return (*this * a.second) - (a.first * other);
    }

    // returns PolynomialGCD (greatest common divisor)
    Polynomial<T> operator , (const Polynomial<T>& other) const {  
        Polynomial<T> first = *this, second = other;
        if (first.Degree() < second.Degree()) {
            std::swap(first, second);
        }
        while (second.Degree() > 0) {
            Polynomial<T> tmp = second;
            first = first % second;
            second = first;
            first = tmp;
        }
        if (second != T(0))
            return Polynomial(T(1));
        first = (first / first[first.Degree()]).first;
        return first;
    }
};

// overload ""<<"" operator to print polynomials as: std::cout << polynomial;
// example: x^3+2*x^2-x+3
template <typename T>
std::ostream& operator << (std::ostream& out, const Polynomial<T>& pol) {
    int deg = pol.Degree();
    if (deg == -1) {
        // zero polynomial
        out << '0';  
    } else {
        for (int i = deg; i != -1; --i) {
            if (pol[i] != T(0)) {
                // printing only degree with non-zero coefficient
                if (pol[i] != T(1) && pol[i] != T(-1)) {
                    if (i != deg && pol[i] > T(0)) {
                        out << ""+"";
                    }
                    out << pol[i];
                    if (i > 1)
                        out << ""*x^"" << i;
                    if (i == 1)
                        out << ""*x"";
                } else if (pol[i] == T(-1)) {
                    // coefficient -1 for non-zero degree prints as -
                    if (i > 1)
                        out << ""-x^"" << i;
                    if (i == 1)
                        out << ""-x"";
                    if (i == 0)
                        out << pol[i];
                } else if (pol[i] == T(1)) {
                    if (i != deg)
                        out << ""+"";
                    if (i > 1)
                        out << ""x^"" << i;
                    if (i == 1)
                        out << ""x"";
                    if (i == 0)
                        out << pol[i];
                }
            }
        }
    }
    return out;
}

int main(){
    // std::vector<int> a = {8, 0, -5, 4};
    // std::vector<int> b = {4, 2, 8};
    std::vector<int> a = {2, -1, 0, -2, 1};
    std::vector<int> b = {2, -1, -4, 0, 1};
    Polynomial t(a);
    Polynomial d(b);
    Polynomial f = (t,d);
    std::cout << t << "" "" << d << "" "" << f << std::endl;

}"
pCkvQYXM,v2,qwers451,C++,Tuesday 19th of December 2023 04:48:03 AM CDT,"#include <iostream>
#include <set>
#include <vector>
#include <utility>
#include <iterator>
#include <limits>
#include <typeinfo>
#define INT_SIZE 128
#define INFINTY std::numeric_limits<int>::max()

using basis_coefficients = std::vector<std::pair<float, float>>;
using basis_polynomials = std::vector<std::vector<float>>;
using coefs = std::vector<float>;
using binomial_coefs = std::pair<float, float>;
using namespace std;

basis_polynomials get_coefficients(float _pl, coefs _xi)
{
    float n = _xi.size();
    basis_polynomials coefficients(n, coefs(2));
    for (float i = 0; i < n; ++i)
    {
        if (i == _pl)
        {
            coefficients[i][0] = INFINTY;
            coefficients[i][1] = INFINTY;
        }
        else
        {
            coefficients[i][0] = 1 / (_xi[_pl] - _xi[i]);
            coefficients[i][1] = -_xi[i] / (_xi[_pl] - _xi[i]);
        }
    }
    basis_polynomials filtered_coefficients(n - 1, coefs(2));
    float j = 0;
    for (float i = 0; i < n; ++i)
    {
        if (coefficients[i][0] != INFINTY)
        {
            filtered_coefficients[j][0] = coefficients[i][1];
            filtered_coefficients[j][1] = coefficients[i][0];
            j++;
        }
    }
    return filtered_coefficients;
}

coefs polynomialTimesPolynomial(coefs x, coefs y)
{
    float n = x.size() + y.size() - 1;
    coefs result(n, float(0));
    for (float i = 0; i < x.size(); ++i)
    {
        for (float j = 0; j < y.size(); ++j)
        {
            result[i + j] += x[i] * y[j];
        }
    }
    return result;
}

coefs calculateBasisLagrangePolynomial(basis_polynomials filtered_coefs)
{
    float n = filtered_coefs.size();
    coefs result(n + 1, float(0));
    coefs tmp;
    if (n == 1)
        tmp = filtered_coefs[0];
    else
        tmp = polynomialTimesPolynomial(filtered_coefs[0], filtered_coefs[1]);
    for (float i = 0; i < tmp.size(); ++i)
        result[i] = tmp[i];
    for (float i = 2; i < filtered_coefs.size(); ++i)
    {
        coefs tmp = polynomialTimesPolynomial(result, filtered_coefs[i]);
        for (float j = 0; j < tmp.size(); ++j)
            result[j] = tmp[j];
    }
    return result;
}

basis_polynomials calculateAllBasisLagrangePolynomial(coefs x)
{
    float n = x.size();
    basis_polynomials result;
    for (float pl = 0; pl < n; ++pl)
        result.push_back(calculateBasisLagrangePolynomial(get_coefficients(pl, x)));
    return result;
}

basis_polynomials get_polynomial_l(coefs _xi)
{
    float n = _xi.size();
    basis_polynomials pli(n, coefs(n));
    for (float pl = 0; pl < n; ++pl)
    {
        basis_polynomials coefficients = get_coefficients(pl, _xi);
        for (float i = 1; i < n - 1; ++i)
        {
            if (i == 1)
            {
                pli[pl][0] = coefficients[i - 1][0] * coefficients[i][0];
                pli[pl][1] = coefficients[i - 1][1] * coefficients[i][0] + coefficients[i][1] * coefficients[i - 1][0];
                pli[pl][2] = coefficients[i - 1][1] * coefficients[i][1];
            }
            else
            {
                coefs clone_pli(n, float(0));
                for (float val = 0; val < n; ++val)
                    clone_pli[val] = pli[pl][val];
                coefs zeros_pli(n, float(0));
                float product_1;
                float product_2;
                for (float j = 0; j < n - 1; j++)
                {
                    product_1 = clone_pli[j] * coefficients[i][0];
                    product_2 = clone_pli[j] * coefficients[i][1];
                    zeros_pli[j] += product_1;
                    zeros_pli[j + 1] += product_2;
                }
                for (float val = 0; val < n; ++val)
                    pli[pl][val] = zeros_pli[val];
            }
        }
    }
    return pli;
}

coefs get_polynomial(coefs _xi, coefs _yi)
{
    float n = _xi.size();
    basis_polynomials polynomial_l = get_polynomial_l(_xi);
    for (float i = 0; i < n; ++i)
    {
        for (float j = 0; j < n; ++j)
            polynomial_l[i][j] *= _yi[i];
    }
    coefs Lagrange(n, float(0));
    for (float i = 0; i < n; ++i)
    {
        for (float j = 0; j < n; ++j)
            Lagrange[i] += polynomial_l[j][i];
    }
    return Lagrange;
}

bool IsPrime(const int n)
{
    for (int i = 2; i * i <= n; i++)
        if (n % i == 0)
            return false;
    return n > 1;
}

set<int> toPrimeNumbers(int num)
{
    num = abs(num);
    set<int> nums;
    if (num == 0)
    {
        return nums;
    }
    if (IsPrime(num))
    {
        nums.insert(num);
        return nums;
    }
    nums.insert(num);
    nums.insert(1);
    for (size_t i = 2; i * i <= num; ++i)
    {
        if (num % i == 0 && IsPrime(i))
        {
            nums.insert(i);
            nums.insert(num / i);
        }
    }
    return nums;
}

set<pair<int, int>> CartesianS(set<int> A, set<int> B)
{
    set<pair<int, int>> AxB;

    for (int a : A)
    {
        for (int b : B)
        {
            AxB.insert(make_pair(a, b));
        }
    }

    return AxB;
}

vector<vector<int>> CartesianSL(set<vector<int>> A, set<vector<int>> B)
{
    vector<vector<int>> AxB;

    for (const vector<int> &a : A)
    {
        for (const vector<int> &b : B)
        {
            AxB.push_back(vector<int>(a.begin(), a.end()));
            AxB.back().insert(AxB.back().end(), b.begin(), b.end());
        }
    }

    return AxB;
}

set<vector<int>> SetOfLists(set<int> A)
{
    set<vector<int>> B;

    for (int a : A)
    {
        B.insert({a});
    }

    return B;
}

set<vector<int>> CartesianLS(vector<set<int>> U)
{
    int n = U.size();

    if (n == 0)
    {
        return {};
    }

    int N = 1;
    vector<set<vector<int>>> V(n);
    for (int i = 0; i < n; i++)
    {
        N *= U[i].size();
        V[i] = SetOfLists(U[i]);
    }

    if (N == 0)
    {
        return {};
    }

    set<vector<int>> P = V[0];
    for (int i = 1; i < n; i++)
    {
        set<vector<int>> temp;
        for (const vector<int> &p : P)
        {
            for (const vector<int> &v : V[i])
            {
                vector<int> new_p = p;
                new_p.insert(new_p.end(), v.begin(), v.end());
                temp.insert(new_p);
            }
        }
        P = temp;
    }

    return P;
}

vector<int> DIV(vector<int> coefficients) {
    while (coefficients.back() == 0) {
        coefficients.pop_back();
    }
    return coefficients;
}

vector<int> QUO(vector<int> dividend, vector<int> divisor) {
    int div_size = divisor.size();
    int dif = dividend.size() - div_size + 1;
    for (int i = 0; i < dif; i++) {
        int coef = dividend[i] / divisor[0];
        for (int j = 0; j < div_size; j++) {
            dividend[i + j] -= coef * divisor[j];
        }
    }
    return DIV(dividend);
}

void printVector(const vector<int> &v)
{
    cout << ""["";
    for (int i = 0; i < v.size(); ++i)
    {
        cout << v[i];
        if (i != v.size() - 1)
        {
            cout << "", "";
        }
    }
    cout << ""]"";
}

void printSet(const set<int> &A)
{
    copy(A.begin(), A.end(), ostream_iterator<int>(cout, "" ""));
}

int main0()
{
    vector<set<int>> U = {{1, 2}, {3, 4, 5, 7}, {8, 9}}; // Пример списка множеств U

    set<vector<int>> result = CartesianLS(U);
    cout << ""Cartesian product of U: "";
    for (const vector<int> &list : result)
    {
        printVector(list);
        cout << "" "";
    }
    cout << endl;

    return 0;
}

int main1()
{
    set<int> A = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}; // Пример множества A

    set<vector<int>> result = SetOfLists(A);
    cout << ""Set of lists B: "";
    for (const vector<int> &list : result)
    {
        printVector(list);
        cout << "" "";
    }
    cout << endl;

    return 0;
}

int main2()
{
    set<vector<int>> A = {{1}, {2}, {4}};                  // Пример множества A
    set<vector<int>> B = {{1, 1}, {1, 2}, {2, 1}, {2, 2}}; // Пример множества B

    vector<vector<int>> result = CartesianSL(A, B);
    cout << ""Cartesian product of A and B: "";
    for (const vector<int> &pair : result)
    {
        printVector(pair);
        cout << "" "";
    }
    cout << endl;

    return 0;
}

int main3()
{
    set<int> B = {1, 2, 3}; // Пример множества A
    set<int> A = {4, 5};    // Пример множества B

    set<pair<int, int>> result = CartesianS(A, B);
    cout << ""Cartesian product of A and B: "";
    for (auto it = result.begin(); it != result.end(); ++it)
    {
        cout << ""("" << it->first << "", "" << it->second << "") "";
    }
    cout << endl;

    return 0;
}

int main4()
{
    set<int> A;
    int a = -12;
    printSet(toPrimeNumbers(a));
    return 0;
}

int main5(){
    coefs x = {0, 1, -1};
    coefs fx = {-2, 5, 1};
    float n = 5;
    coefs res = get_polynomial(x, fx);
    for(float i = 0; i < res.size(); ++i)
        std::cout << ""("" << res[i] << "" * x^"" << i << "") + "";
    std::cout << '\n';
    return 0;
}"
5Jq2mANs,Advent of Code 2023 - Day 19,mgla,C#,Tuesday 19th of December 2023 04:36:20 AM CDT,"var input = File.ReadAllText(""input.txt"").Split(""\r\n\r\n"");

var workflows = input[0].Split(""\r\n"").Select(workflow => new Workflow(workflow)).ToDictionary(w => w.Name);

var messages = input[1].Split(""\r\n"");
var parts = new List<Dictionary<string, int>>();

foreach (var message in messages)
{
    var part = new Dictionary<string, int>();
    var values = message[1..^1].Split(',').Select(r => r.Split('='));

    foreach (var xmas in values)
    {
        part[xmas[0]] = int.Parse(xmas[1]);
    }

    parts.Add(part);
}

var part1 = 0;
foreach (var part in parts)
{
    var workflow = workflows[""in""];
    var processing = true;

    while (processing)
    {
        foreach (var rule in workflow.Rules)
        {
            // If there is no condition, the rule is valid and we process it.
            var isValid = rule.Comparison == default;

            if (!isValid)
            {
                var value = part[rule.Xmas];
                isValid = rule.Comparison == '>' && value > rule.Value ||
                          rule.Comparison == '<' && value < rule.Value;
            }

            if (isValid)
            {
                switch (rule.Destination)
                {
                    case ""A"":
                        part1 += part.Sum(p => p.Value);
                        processing = false;
                        break;
                    case ""R"":
                        processing = false;
                        break;
                    default:
                        workflow = workflows[rule.Destination]; // Process the next workflow.
                        break;
                }

                break; // We found a valid rule, so we can stop processing the current workflow.
            }
        }
    }
}

Console.WriteLine($""Part 1: {part1}"");

var candidates = new Dictionary<string, (int Min, int Max)>
{
    [""x""] = (1, 4000),
    [""m""] = (1, 4000),
    [""a""] = (1, 4000),
    [""s""] = (1, 4000)
};

Console.WriteLine($""Part 2: {ProcessRanges(""in"", candidates)}"");

return;

long ProcessRanges(string position, Dictionary<string, (int Min, int Max)> ranges)
{
    switch (position)
    {
        case ""A"":
            return ranges.Values
                .Aggregate<(int Min, int Max), long>(1, (current, range) => current * (range.Max - range.Min + 1));
        case ""R"":
            return 0;
    }

    long result = 0;
    var workflow = workflows[position];

    foreach (var rule in workflow.Rules)
    {
        var (min, max) = string.IsNullOrEmpty(rule.Xmas) ? (0, 0) : ranges[rule.Xmas];

        switch (rule.Comparison)
        {
            case '<':
                if (max < rule.Value) // Entire range fits. Recursively process the next workflow.
                {
                    result += ProcessRanges(rule.Destination, ranges);
                    return result;
                }

                if (min < rule.Value) // Range needs to be split.
                {
                    // Recursively process the fitting range into the next workflow.
                    var newRanges = new Dictionary<string, (int Min, int Max)>(ranges)
                    {
                        [rule.Xmas] = (min, rule.Value - 1)
                    };
                    result += ProcessRanges(rule.Destination, newRanges);

                    ranges[rule.Xmas] = (rule.Value, max); // Use the remaining range for the next rule.
                }
                break;
            case '>':
                if (min > rule.Value) // Entire range fits. Recursively process the next workflow.
                {
                    result += ProcessRanges(rule.Destination, ranges);
                    return result;
                }

                if (max > rule.Value) // Range needs to be split.
                {
                    // Recursively process the fitting range into the next workflow.
                    var newRanges = new Dictionary<string, (int Min, int Max)>(ranges)
                    {
                        [rule.Xmas] = (rule.Value + 1, max)
                    };
                    result += ProcessRanges(rule.Destination, newRanges);

                    ranges[rule.Xmas] = (min, rule.Value); // Use the remaining range for the next rule.
                }
                break;
            default:
                // No conditions - recursively process the next workflow.
                result += ProcessRanges(rule.Destination, ranges);
                break;
        }
    }

    return result;
}

internal struct Workflow
{
    public Workflow(string pattern)
    {
        Name = pattern.Split('{')[0];
        var rules = pattern.Split('{')[1].TrimEnd('}').Split(',').ToList();
        foreach (var rule in rules)
        {
            Rules.Add(new Rule(rule));
        }
    }

    public string Name { get; set; }
    public List<Rule> Rules { get; set; } = new();
}

internal struct Rule
{
    public Rule(string rule)
    {
        var splitRule = rule.Split('<', '>');

        if (splitRule.Length == 2)
        {
            var right = splitRule[1].Split(':');

            Xmas = splitRule[0];
            Value = int.Parse(right[0]);
            Destination = right[1];
            Comparison = rule[1];
        }
        else
        {
            Destination = rule;
        }
    }
    public string Xmas { get; set; } = string.Empty;
    public char Comparison { get; set; }
    public int Value { get; set; }
    public string Destination { get; set; }
}"
cPzeiVXu,SwiftUI Activity Heatmap,SplittyDev,Swift,Tuesday 19th of December 2023 04:25:05 AM CDT,"//
//  ActivityHeatMap.swift
//
//  Created by Marco Quinten (https://github.com/SplittyDev)
//  Created for FiveSheep OÜ (https://github.com/FiveSheepCo)
//
//  Permission is hereby granted to use this for whatever project you like, whether free or paid.
//

import SwiftUI
import Charts

/// An activity graph similar to GitHub's contribution graph.
struct ActivityHeatMap: View {
    let entries: [Entry] // TODO: Change this to your own type
    
    struct HeatmapEntry {
        let date: Date
        let active: Bool
        let isToday: Bool
        let isInFuture: Bool
        let gridRow: Int
        let gridCol: Int
        
        var color: Color {
            if active {
                Color.green
            } else if isToday {
                Color.blue
            } else if isInFuture {
                Color.gray.opacity(0.25)
            } else {
                Color.gray
            }
        }
    }
    
    /// Heatmap entries for the current month.
    var currentMonthEntries: [HeatmapEntry] {
        let now = Date.now
        let calendar = Calendar.current
        var results = [HeatmapEntry]()
        
        // Determine the first and last day of the current month
        let firstOfMonth = calendar.date(from: calendar.dateComponents(
            [.calendar, .timeZone, .era, .year, .quarter, .month],
            from: now
        ))!
        let lastOfMonth = calendar.date(
            byAdding: DateComponents(month: 1, day: -1),
            to: firstOfMonth
        )!
        
        // Loop over the selected date range
        var currentDate = firstOfMonth
        while currentDate <= lastOfMonth {
            
            // TODO: Update this logic to use your own `Entry` type
            let entry = entries.firstIndex { $0.timestamp.dateOnly == currentDate.dateOnly }
            
            // Determine properties of the given day
            let firstDayOfMonthWeekday = calendar.component(.weekday, from: firstOfMonth) - calendar.firstWeekday
            let adjustedFirstDayOfMonthWeekday = (firstDayOfMonthWeekday >= 0)
                ? firstDayOfMonthWeekday
                : (firstDayOfMonthWeekday + 7)
            let daysSinceFirstOfMonth = calendar.dateComponents(
                [.day], from: firstOfMonth, to: currentDate
            ).day!
            let weekNumber = (daysSinceFirstOfMonth + adjustedFirstDayOfMonthWeekday) / 7
            let dayOfWeek = calendar.component(.weekday, from: currentDate) - calendar.firstWeekday
            let adjustedDayOfWeek = (dayOfWeek >= 0) ? dayOfWeek : (dayOfWeek + 7)
            
            // Create heatmap entry
            let heatmapEntry = HeatmapEntry(
                date: currentDate,
                active: entry != nil,
                isToday: currentDate.dateOnly == Date.now.dateOnly,
                isInFuture: currentDate > Date.now,
                gridRow: weekNumber,
                gridCol: adjustedDayOfWeek
            )
            results.append(heatmapEntry)
            
            // Advance date by one day
            currentDate = calendar.date(byAdding: .day, value: 1, to: currentDate)!
        }
        
        return results
    }
    
    var body: some View {
        GeometryReader { geometry in
            let calendar = Calendar.current
            
            // Calculate the height of a single point on the graph
            let maxWeekdays = Double(currentMonthEntries.map { calendar.component(.weekday, from: $0.date) }.max() ?? 1)
            let dotHeight = geometry.size.height / maxWeekdays
            
            HStack {
                Spacer()
                
                Chart {
                    ForEach(currentMonthEntries, id: \.date) { entry in
                        RectangleMark(
                            x: .value(String.empty, entry.gridRow),
                            y: .value(String.empty, entry.gridCol),
                            width: .fixed(dotHeight),
                            height: .fixed(dotHeight)
                        )
                        .foregroundStyle(entry.color)
                        .cornerRadius(2)
                    }
                }
                .frame(width: dotHeight * 7, height: dotHeight * 7, alignment: .center)
                .chartXAxis(.hidden)
                .chartYAxis(.hidden)
                
                Spacer()
            }
        }
    }
}

#Preview {
    let entries = [] // TODO: Somehow create your entries here
	return ActivityHeatMap(entries: entries)
            .padding(16)
            .frame(width: 250, height: 150)
            .background(Color.secondarySystemBackground)
            .clipShape(RoundedRectangle(cornerRadius: 8))
}"
sLNkDrUX,day 19 part 2,icarussiano,Python,Tuesday 19th of December 2023 04:21:17 AM CDT,"work, _ = open(""input"").read().split('\n\n')
workflows = {name: rules[:-1].split(',') for name, rules in (line.split('{') for line in work.splitlines())}

def find_rules(current, rules):
    if current == 'A':
        regole.append(rules)
    elif current != 'R':
        rul = []
        for rule in workflows[current][:-1]:
            if rule not in 'AR':
                next_workflow = rule.split(':')[1]
                find_rules(next_workflow, rules + rul + [rule.split(':')[0]])
                if rule[1] == '<':
                    rul.append(rule.split(':')[0].split('<')[0] + '>=' + rule.split(':')[0].split('<')[1])
                elif rule[1] == '>':
                    rul.append(rule.split(':')[0].split('>')[0] + '<=' + rule.split(':')[0].split('>')[1])
        else:
            next_workflow = workflows[current][-1]
            find_rules(next_workflow, rules + rul)

regole = []
find_rules('in', [])
somma = 0
for r in regole:
    maxs = {x: 4001 for x in 'xmas'}
    mins = {x: 0 for x in 'xmas'}
    for s in r:
        if s[0] in 'xmas' and s[1] == '<':
            maxs[s[0]] = min(maxs[s[0]], int(s[2:])) if s[2] != '=' else min(maxs[s[0]], int(s[3:]) + 1)
        elif s[0] in 'xmas' and s[1] == '>':
            mins[s[0]] = max(mins[s[0]], int(s[2:])) if s[2] != '=' else max(mins[s[0]], int(s[3:]) - 1)
    p = 1
    for key in maxs:
        p *= (maxs[key] - mins[key] - 1)
    somma += p
print(somma)"
ci3Tekdk,BTC Wallet Credentials have been reset,VQ-Moe,GetText,Tuesday 19th of December 2023 04:13:06 AM CDT,"Dear Moe,
We have received a request to reset the login information for your Bitcoin wallet. If you did not make this request, please contact us immediately.

Your new login credentials will be 
chefman440:Jmh3x9ZB on 149.28.231.183
You can connect via SSH.

Regards,
GM-792210"
rRicWy4U,Untitled,kwest87,C#,Tuesday 19th of December 2023 04:00:18 AM CDT,"[StartCode]
using System;

namespace ConsoleApp14
{
    internal class Program
    {
        static void Main(string[] args)
        {
            string[] words = ""Привет новый мир!"".Split(' ');

            foreach(string word in words)
            {
                Console.WriteLine(word);
            }
        }
    }
}
[EndCode]"
r0nCmfCB,Untitled,xaixati,C++,Tuesday 19th of December 2023 03:59:32 AM CDT,"#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <thread>
#include <iomanip>
#include <mutex>

using namespace std;

void read_file_in_vector (vector<string> &words, ifstream &in, mutex &m1, mutex &m2){
    while (!in.eof()){
        string s;
        m1.lock();
        if (!in.eof()){
            in>>s;
        }
        m1.unlock();
        //первым мьютексом обеспечиваем безопасное чтение, что пока слово читается потоком, никакой другой поток читать её не будет


        if (s.empty()){
            return;
        }
        else{
            m2.lock();
            words.push_back(s);
            m2.unlock();
        }
        //вторым мьютексом обеспечиваем безопасную запись в вектор строк, например если 1 слово ""abc"", второе 321, без мьютекса можем получить дичь a321bc или что-то подобное

    }
}

void counting_of_word(vector<string> &words, int &counter, string &word, int start, int endd, mutex &m){
    int summ=0;
    for (int i=start; i<endd; i++){
        if (words[i]==word) summ++;
    }
    if (summ!=0){
        m.lock();
        counter+=summ;
        m.unlock();
    }
    else{
        return;
    }
}

int main() {
    ifstream in(""input.txt"");
    mutex m_arr, m_in;
	int t;
	string word;
	in>>t>>word;
	vector <thread> threads_reading;
	vector <string> words;
	for (int i=0; i<t; i++){
        threads_reading.push_back(thread(read_file_in_vector,ref(words),ref(in),ref(m_in),ref(m_arr)));
        //если правильно понял, в базовом виде функции связанные с потоками делают копии объектов и работаюсь с ними, для передачи именно ссылок, нужно использовать std::ref
	}
    for (int i=0; i<threads_reading.size(); i++){
        threads_reading[i].join();
    }
    in.close();
    int counter=0,word_per_thread=(words.size() / t);
    vector <thread> threads_counting;
    for (int i=0; i<t; i++){
        int start,endd;
        start=i*word_per_thread;
        if (i==(t-1)){
            endd=words.size();
        }
        else{
            endd=(i+1)*word_per_thread;
        }
        threads_counting.push_back(thread(counting_of_word,ref(words),ref(counter),ref(word),start,endd,ref(m_arr)));

    }

    for (auto &th : threads_counting) th.join();
    cout<<counter;

	return 0;
}
"
LRxjfTTf,Untitled,BayangBec,JavaScript,Tuesday 19th of December 2023 03:55:27 AM CDT,"const { has } = require(""lodash"");
const { v4: uuidv4 } = require('uuid');
const moment = require('moment');
const { APPICATION, CONFIG_SETTING } = require('@mocobaas/shared/constanta');
const utilQueue = require('../../utils/queue-util');
const TelegramBot = require('node-telegram-bot-api');
const helper = require('@mocobaas/shared/helpers');

// @ts-check
/**
 * You can also import another NPM package
 * const _ = require(""lodash"");
 * const moment = require(""moment"");
 */

/**
 * @description handler for cron-activation-newspaper-magazine
 * @param {import('@mocobaas/server-sdk').SchedulerContext} ctx
 */

async function handler(ctx) {
  const { knex } = ctx.moco.tables;
  let datas = {};
  const userInfo = { user_name: 'cron-activation-newspaper-magazine' };
  const token = process.env.TOKEN_TELEBOT;

  try {
    const dateNow = moment(new Date()).format('YYYY-MM-DD');
    datas = await knex('content_subscriptions as cs')
      .select('cs.id', 'cs.media_type_id', 'cs.organization_id', 'cs.catalog_id', 'catalog_file', 'catalog_info')
      .join('catalogs as c', 'c.id', 'cs.catalog_id')
      .whereNull('process_date')
      .where('process_isrun', false)
      .whereRaw(`(to_char(publish_date, 'YYYY-MM-DD') = '${dateNow}')`)
      .orderBy('cs.publish_date', 'desc');

    const [credential, agentManager] = await Promise.all([
      knex('config_setting').select('config_value').where('id', CONFIG_SETTING.AGENT_MANAGER).first(),
      knex('application').select('app_client_api').where('id', APPICATION.AGENT_MANAGER).first()
    ]);

    const configAgent = {
      credential: credential.config_value[0],
      app_client_api: agentManager.app_client_api,
      app_id: APPICATION.CENTRALIZED
    };

    if (datas.length != 0) {
      // const payloadMigration = [];
      const payloadActivation = [];
      // const payloadDrm = [];
      const payloadSubscriptionItems = [];
      const trxId = uuidv4()

      await Promise.all(datas.map(async (item) => {
        const findIncome = await knex('others_income_products as oip')
          .select('oi.income_info', 'oip.product_copy', 'oi.income_end_date', 'oi.id')
          .join('others_incomes as oi', 'oi.id', 'oip.income_id')
          .where('product_category_id', item.media_type_id)
          .whereRaw(`(to_char(income_start_date, 'YYYY-MM-DD') <= '${dateNow}')`)
          .whereRaw(`(to_char(income_end_date, 'YYYY-MM-DD') >= '${dateNow}')`)
          .where('organization_id', item.organization_id);

        if (findIncome.length != 0) {
          await Promise.all(findIncome.map(async (i) => {
            payloadActivation.push({
              catalog_id: item.catalog_id,
              created_at: new Date(),
              epustaka_id: i.income_info.epustaka_id,
              epustaka_catalog_qty: i.product_copy
            });

            let expired = null;

            let findExtSyncLogs = await knex('ext_sync_logs')
              .join('content_media')
              .where('catalog_id', item.catalog_id)
              .andWhere('process_iserror', false)
              .orderBy('created_at', 'desc').first();

            
            if (i.income_info.archiving_type_code) {
              let dateUpload = moment(findExtSyncLogs.process_sync[0].file_created).format(""YYYY-MM-DD"");
              switch(i.income_info.archiving_type_code) {
                case 'PERMINGGU':
                    if (i.income_info.archiving_day_name === 'Senin') expired = helper.findNextDate(dateUpload, 1, 7);
                    if (i.income_info.archiving_day_name === 'Selasa') expired = helper.findNextDate(dateUpload, 2, 7);
                    if (i.income_info.archiving_day_name === 'Rabu') expired = helper.findNextDate(dateUpload, 3, 7);
                    if (i.income_info.archiving_day_name === 'Kamis') expired = helper.findNextDate(dateUpload, 4, 7);
                    if (i.income_info.archiving_day_name === 'Jumat') expired = helper.findNextDate(dateUpload, 5, 7);
                    if (i.income_info.archiving_day_name === 'Sabtu') expired = helper.findNextDate(dateUpload, 6, 7);
                    if (i.income_info.archiving_day_name === 'Minggu') expired = helper.findNextDate(dateUpload, 0, 7);
                break;
                case 'PERDUAMINGGU':
                    if (i.income_info.archiving_day_name === 'Senin') expired = helper.findNextDate(dateUpload, 1, 14);
                    if (i.income_info.archiving_day_name === 'Selasa') expired = helper.findNextDate(dateUpload, 2, 14);
                    if (i.income_info.archiving_day_name === 'Rabu') expired = helper.findNextDate(dateUpload, 3, 14);
                    if (i.income_info.archiving_day_name === 'Kamis') expired = helper.findNextDate(dateUpload, 4, 14);
                    if (i.income_info.archiving_day_name === 'Jumat') expired = helper.findNextDate(dateUpload, 5, 14);
                    if (i.income_info.archiving_day_name === 'Sabtu') expired = helper.findNextDate(dateUpload, 6, 14);
                    if (i.income_info.archiving_day_name === 'Minggu') expired = helper.findNextDate(dateUpload, 0, 14);
                break;
                case 'PERBULAN':
                  dateUpload = new Date(dateUpload);
                  dateUpload.setDate(1);
                  dateUpload.setMonth(dateUpload.getMonth() + 1);

                  expired = dateUpload;
                break;
                case 'PERTIGABULAN':
                  dateUpload = new Date(dateUpload);
                  const currentMonth = dateUpload.getMonth();

                  if (currentMonth < 2) {
                    dateUpload.setDate(1);
                    dateUpload.setMonth(2);
                    
                    expired = dateUpload;
                  };
                  if (currentMonth <= 5 && currentMonth >= 2) {
                    dateUpload.setDate(1);
                    dateUpload.setMonth(5);
                    
                    expired = dateUpload;
                  };
                  if (currentMonth <= 8 && currentMonth >= 5) {
                    dateUpload.setDate(1);
                    dateUpload.setMonth(8);
                    
                    expired = dateUpload;
                  };
                  if (currentMonth <= 11 && currentMonth >= 8) {
                    dateUpload.setDate(1);
                    dateUpload.setMonth(11)
                    
                    expired = dateUpload;
                  };
                  if (currentMonth === 11) {
                    dateUpload.setDate(1);
                    dateUpload.setMonth(2)
                    dateUpload.setFullYear(dateUpload.getFullYear() + 1);
                    
                    expired = dateUpload;
                  };
                break;
                case 'PERSEMESTER':
                  if (currentMonth < 5) {
                    dateUpload.setDate(1);
                    dateUpload.setMonth(5);
                    
                    expired = dateUpload;
                  };
                  if (currentMonth <= 10 && currentMonth >= 5) {
                    dateUpload.setDate(1);
                    dateUpload.setMonth(11);
                    
                    expired = dateUpload;
                  };
                  if (currentMonth === 11) {
                    dateUpload.setDate(1);
                    dateUpload.setMonth(5)
                    dateUpload.setFullYear(dateUpload.getFullYear() + 1);
                    
                    expired = dateUpload;
                  };
                break;
                case 'PERTAHUN':
                  dateUpload.setDate(1);
                  dateUpload.setMonth(0)
                  dateUpload.setFullYear(dateUpload.getFullYear() + 1);
                    
                  expired = dateUpload;
                break;
                default:
                  expired = new Date(i.income_end_date);
                  expired.setFullYear(expired.getFullYear() + 1000);
              };
            };

            payloadSubscriptionItems.push({
              id: uuidv4(),
              epustaka_id: i.income_info.epustaka_id,
              catalog_id: item.catalog_id,
              epustaka_catalog_qty: i.product_copy,
              epustaka_expired: expired,
              transaction_id: i.id
            });
  
            await knex('content_subscriptions').update({process_date: new Date(), process_isrun: true}).where('id', item.id);

            if (findExtSyncLogs) {
              let startProcess = new Date();
              startProcess.setHours(startProcess.getHours() + 7);
              const updatedNow = new Date();
              const createdAt = new Date(findExtSyncLogs.process_sync[0].file_created);

              const hitung = updatedNow.setMilliseconds(0) - createdAt.setMilliseconds(0);

              // const menit = Math.floor(hitung / (1000 * 60));
              // const detik = Math.floor((hitung / 1000) % 60);
              let remainingTime = new Date(hitung);
              const timeProcess = `${remainingTime.getUTCDate() - 1 === 0 ? '' : remainingTime.getUTCDate() - 1 `Hari,`}
              ${remainingTime.getUTCHours() === 0 ? '' : remainingTime.getUTCHours() `Jam,`} ${remainingTime.getUTCMinutes()} Menit, ${remainingTime.getUTCSeconds()} Detik`
    
              findExtSyncLogs.process_sync.push({
                start_date: startProcess,
                process_name: `Distribusi Konten Ke Spot Baca ${i.income_info.epustaka_name}`,
                end_date: startProcess
              });
          
              await knex('ext_sync_logs').update({process_sync: JSON.stringify(findExtSyncLogs.process_sync), updated_at: updatedNow}).where('id', findExtSyncLogs.id);

              const bot = new TelegramBot(token, { polling: false });

              let pesan = `Berikut adalah data sync koran dan majalah:\n
*Proses Membaca File Dari FTP (${moment(findExtSyncLogs.process_sync[1].start_date).format(""hh:mm:ss"")})*
Judul: *${findExtSyncLogs.catalog_title}*
Jenis Konten: *${item.catalog_info.category_name}*
Upload FTP: *${moment(findExtSyncLogs.process_sync[0].file_created).format(""DD-MM-YYYY hh:mm:ss"")}*
Nama Asli File: *${findExtSyncLogs.process_sync[0].original_file_name}*
Ukuran File: *${findExtSyncLogs.process_sync[0].file_size}*
Proses: *${findExtSyncLogs.process_iserror === true ? 'Gagal' : 'Sukses'} ${timeProcess}*
==================================================
*Proses Membaca Metadata Dari File FTP (${moment(findExtSyncLogs.process_sync[2].start_date).format(""hh:mm:ss"")} - ${moment(findExtSyncLogs.process_sync[2].end_date).format(""hh:mm:ss"")})*
==================================================
*Proses Menambahkan Metadata Konten Ke Database MCCP V1 (${moment(findExtSyncLogs.process_sync[3].start_date).format(""hh:mm:ss"")} - ${moment(findExtSyncLogs.process_sync[3].end_date).format(""hh:mm:ss"")})*
==================================================
*Data Masuk Dari MCCP V1 (${moment(findExtSyncLogs.process_sync[4].start_date).add(5, 'h').format(""hh:mm:ss"")})*
==================================================
*Data Masuk Konten Berlangganan (${moment(findExtSyncLogs.process_sync[5].start_date).add(5, 'h').format(""hh:mm:ss"")} - ${moment(findExtSyncLogs.process_sync[5].end_date).add(5, 'h').format(""hh:mm:ss"")})*
==================================================
*Distribusi Konten Ke Spot Baca ${i.income_info.epustaka_name} (${moment(findExtSyncLogs.process_sync[6].start_date).add(5, 'h').format(""hh:mm:ss"")})*`;

              const chatId = process.env.CHAT_ID_TELEBOT;
              bot.sendMessage(chatId, pesan, { parse_mode: 'Markdown' });
            };
          }));
        };
      }));

      let limitManager = 50;
      const pageActivation = Math.ceil(payloadActivation.length / limitManager);

      await Promise.all([
        knex.batchInsert('content_subscription_items', payloadSubscriptionItems, 50),
        utilQueue.booksActivationAgentManager({ ...ctx, userInfo, trxId}, configAgent, payloadActivation, pageActivation, limitManager, null, true)
      ])
    };

    return true;
  } catch (error) {
    const _messages = (error.response && has(error.response, ""data"")) ? (error.response.data.message || error.response.data.error) : error.message;
    const payloadError = {
        id: uuidv4(),
        action: 'cron-activation-newspaper-magazine',
        content: JSON.stringify(datas),
        err_message: _messages
    };

    await knex('error_logs').insert(payloadError);
    return false;
  }
}

module.exports = handler;"
zvSUWSY1,III Parser HTTP,AleksandarH,C++,Tuesday 19th of December 2023 03:52:39 AM CDT,"#include <iostream>
#include <fstream>
#include <string>

using namespace std;

void printError(const string& errorMessage, size_t errorPos) {
    cout << ""\033[1;31mError: "" << errorMessage << "" at position "" << errorPos << ""\033[0m"" << endl;
}

struct URLComponents {
    string scheme;
    string user;
    string password;
    string host;
    string port;
    string path;
};

void parseURL(const string& urlString) {
    URLComponents components;
    size_t schemePos = urlString.find(""://"");
    if (schemePos == string::npos) {
        printError(""Invalid URL syntax: Expected '://' not found in "" + urlString, urlString.length());
        return;
    }
    components.scheme = urlString.substr(0, schemePos);
    size_t hostStartPos = schemePos + 3;
    size_t userEndPos = urlString.find(':', hostStartPos);
    size_t hostEndPos = urlString.find('@', hostStartPos);
    size_t portStartPos = urlString.find(':', hostStartPos);
    size_t pathStartPos = urlString.find('/', schemePos + 3);
    if (components.scheme != ""http"" && components.scheme != ""https"" && userEndPos != string::npos &&
        (hostEndPos == string::npos || userEndPos < hostEndPos)) {
        components.user = urlString.substr(hostStartPos, userEndPos - hostStartPos);
        components.password = urlString.substr(userEndPos + 1, hostEndPos - userEndPos - 1);
        components.host = urlString.substr(hostEndPos + 1, (portStartPos != string::npos ? portStartPos : pathStartPos) - hostEndPos - 1);
    }
    else {
        components.host = urlString.substr(hostStartPos, (portStartPos != string::npos ? portStartPos : pathStartPos) - hostStartPos);
    }
    if (portStartPos != string::npos && portStartPos < pathStartPos) {
        components.port = urlString.substr(portStartPos + 1, pathStartPos - portStartPos - 1);
    }
    if (pathStartPos != string::npos) {
        components.path = urlString.substr(pathStartPos);
    }
    cout << ""Scheme: "" << components.scheme << endl;
    if (components.scheme != ""http"" && components.scheme != ""https"") {
        cout << ""User: "" << components.user << endl;
        cout << ""Password: "" << components.password << endl;
    }
    cout << ""Host: "" << components.host << endl;
    cout << ""Port: "" << (components.port.empty() ? ""default"" : components.port) << endl;
    cout << ""Path: "" << components.path << endl;
}

int main() {
    ifstream file(""C:\\Users\\Aleksandar\\source\\repos\\Parser_HTTP\\Parser_HTTP\\input.txt"");
    if (!file.is_open()) {
        cout << ""Unable to open file!"" << endl;
        return 1;
    }
    string line;
    while (getline(file, line)) {
        parseURL(line);
        cout << ""-----------------------------"" << endl;
    }
    file.close();
    return 0;
}"
nHULNt7P,Untitled,kwest87,C#,Tuesday 19th of December 2023 03:44:42 AM CDT,"[StartCode]
using System;

namespace ConsoleApp13
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Random random = new Random();
            int[] array = new int[10];
            int maximumNumber = 10;

            for (int i = 0; i < array.Length; i++)
            {
                array[i] = random.Next(maximumNumber);
            }

            Console.Write(""Не отсортированно : "");

            for (int i = 0; i < array.Length; i++)
            {
                Console.Write(array[i] + "" "");
            }

            Console.WriteLine();
            Console.Write(""Отсортированно : "");

            for (int i = 0;i < maximumNumber; i++)
            {
                for (int j = 0; j < array.Length; j++)
                {
                    if (i == array[j])
                    {
                        Console.Write(array[j] + "" "");
                    }
                }
            }
        }
    }
}
[EndCode]"
yn7zDEPx,III Parser,AleksandarH,C++,Tuesday 19th of December 2023 03:35:01 AM CDT,"#include <iostream>
#include <cctype>
#include <cstdio>
#include <fstream>

using namespace std;

typedef enum TSymbolType {
    intconst, text, semicolon, period, quotas, othersy
} TSymbol;

char Char;
TSymbol Symbol;
char Spelling[9];
const int MAXLENGTH = 8;
int Constant;
const int MAXINTEGER = 1000000;
ifstream inputFile(""C:\\Users\\Aleksandar\\source\\repos\\Parser\\Parser\\input.txt"");

void GetNextChar() {
    if (!inputFile.is_open()) {
        fprintf(stderr, ""Error: Unable to open input file\n"");
        return;
    }
    Char = inputFile.get();
}

void error(const char* message) {
    fprintf(stderr, ""Error: %s\n"", message);
}

void GetNextSymbol() {
    int digit;
    int k = 0;
    while (!inputFile.eof() && !isdigit(Char) && Char != '\""' && Char != ';' && Char != '.' && !isalpha(Char)) {
        GetNextChar();
    }
    if (inputFile.eof()) {
        Char = '\0';
    }
    while (Char == ' ') {
        GetNextChar();
    }
    switch (toupper(Char)) {
    case 'A': case 'B': case 'C': case 'D': case 'E': case 'F': case 'G':
    case 'H': case 'I': case 'J': case 'K': case 'L': case 'M': case 'N':
    case 'O': case 'P': case 'Q': case 'R': case 'S': case 'T': case 'U':
    case 'V': case 'W': case 'X': case 'Y': case 'Z': {
        do {
            if (k < MAXLENGTH) {
                Spelling[k] = Char;
                k++;
            }
            GetNextChar();
        } while ((Char >= 'A' && Char <= 'Z') || (Char >= '0' && Char <= '9'));
        Spelling[k] = '\0';
        if (k > 8) {
            error(""String is too long!"");
        }
        Symbol = text;
        cout << ""Text: "" << Spelling << endl;
    } break;
    case '0': case '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9': {
        Constant = 0;
        do {
            digit = Char - '0';
            if ((Constant < (MAXINTEGER / 10)) || ((Constant == (MAXINTEGER / 10)) && (digit <= (MAXINTEGER % 10)))) {
                Constant = (10 * Constant) + digit;
            }
            else {
                error(""Int constant too large!"");
                Constant = 0;
            }
            GetNextChar();
        } while (Char >= '0' && Char <= '9');
        Symbol = intconst;
        cout << ""Integer: "" << Constant << endl;
    } break;
    case '.': {
        Symbol = period;
        GetNextChar();
        cout << ""Period"" << endl;
        return;
    }
    case ';': {
        Symbol = semicolon;
        GetNextChar();
        cout << ""Semicolon"" << endl;
    } break;
    case '\""': {
        Symbol = quotas;
        GetNextChar();
        int insideQuote = 0;
        while (insideQuote < 8 && Char != '\""') {
            Spelling[insideQuote] = Char;
            insideQuote++;
            GetNextChar();
        }
        if (Char == '\""') {
            Spelling[insideQuote] = '\0';
            cout << ""String: "" << Spelling << endl;
            GetNextChar();
        }
        else {
            error(""String is too long or missing closing double quote(s)!"");
            Spelling[insideQuote] = '\0';
            cout << ""String: "" << Spelling << endl;
        }
    } break;
    case '\0': {
        if (Symbol != othersy) {
            Symbol = othersy;
            cout << ""End of Input"" << endl;
        }
        break;
    }
    default: {
        Symbol = othersy;
        cout << ""Unknown Symbol with ASCII value: "" << static_cast<int>(Char) << endl;
        GetNextChar();
        break;
    }
    }
}

int accept(TSymbol symbol) {
    if (Symbol == symbol) {
        GetNextSymbol();
        return 1;
    }
    return 0;
}

int expect(TSymbol symbol) {
    if (accept(symbol)) {
        return 1;
    }
    error(""Unexpected symbol!"");
    return 0;
}

void Field() {
    if (accept(intconst) || accept(quotas) || accept(text)) {
        return;
    }
    else if (accept(period)) {
        accept(quotas);
        if (Symbol == text) {
            Field();
        }
        else {
            error(""Expects text after period!"");
        }
    }
    else if (Symbol != period && Symbol != othersy && Symbol != '\0') {
        error(""Expects intconst, string, text, period, or end of input!"");
    }

}

void Record() {
    Field();
    while (Symbol == period) {
        accept(period);
        Field();
    }
    if (!(Symbol == semicolon || Symbol == othersy || Symbol == '\0')) {
        error(""Expects semicolon or end of input after the last field!"");
    }
    if (Symbol == semicolon) {
        accept(semicolon);
    }
}

void DataFile() {
    Record();
    while (Symbol != othersy) {
        Record();
    }
    inputFile.close();
}

int main() {
    GetNextChar();
    GetNextSymbol();
    DataFile();
    return 0;
}"
U0YMXR9z,Untitled,kwest87,C#,Tuesday 19th of December 2023 03:29:56 AM CDT,"[StartCode]
using System;

namespace ConsoleApp13
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Random random = new Random();
            int[] array = new int[30];
            int maximumNumber = 0;
            int repeatNumber = 1;
            int repeatMaximumNumber = 0;
            int indent = 1;

            for (int i = 0; i < array.Length; i++)
            {
                array[i] = random.Next(10);
            }

            for (int i = 0; i < array.Length; i++)
            {
                Console.Write(array[i] + "" "");
            }

            Console.WriteLine();

            for (int i = 1; i < array.Length; i++)
            {
                if (array[i] == array[i - indent])
                {
                    repeatNumber++;

                    if (repeatNumber > repeatMaximumNumber)
                    {
                        repeatMaximumNumber = repeatNumber;
                        maximumNumber = array[i];
                    }
                }
                else
                {
                    repeatNumber = 1;
                }
            }

            Console.WriteLine($""Число {maximumNumber} повторяется {repeatMaximumNumber} раз."");
        }
    }
}
[EndCode]"
nHfEatbz,day 19 part 1,icarussiano,Python,Tuesday 19th of December 2023 03:11:17 AM CDT,"workflows, ratings = open(""input"").read().split('\n\n')
workflows = {name: rules[:-1].split(',') for name, rules in (line.split('{') for line in workflows.splitlines())}
ratings= [x[1:-1].split("","") for x in ratings.splitlines()]
accepted = 0
for rating in ratings:
    name = 'in'
    for _ in rating:
        exec(_)
    while name not in 'AR':
        for rule in workflows[name][:-1]:
            if eval(rule.split(':')[0]):
                name = rule.split(':')[1]
                break
        else:
            name = workflows[name][-1]
    accepted += x+m+a+s if name == 'A' else 0
print(accepted)"
CR5GgFgF,Drop access,Arrow974,Java,Tuesday 19th of December 2023 02:55:38 AM CDT,"/*************************************************************************/
/*************************************************************************/

var appName_TheOriginal = ""Broken Drop"";

var appName = ""Vip + Amusez vous bien sur le  --"" + appName_TheOriginal + """";

var appFirstMsg = ""Exploser  vos gacha avec    "" + appName_TheOriginal + """";


var appRessoures_All = "" Taux de drop Explosif!!  "";


var appConnect_Finished = ""App co sur "" + appName_TheOriginal + """";

var appGenerate_select_Resources = ""Configure le Broken Drop"";

var appCheck_1 = ""Assurez-vous d'être connecté à Discord avec votre compte Gacha Cheat.\nMake sure you are logged into Discord with your Gacha Cheat account."";

var appCheck_1_Button = ""<i class='fa fa-user'></i> Connection"";



var appCheck_1_checkConfig = ""Analyser votre Phone maintenant"";
var appCheck_1_CheckButton = ""<i class='fa fa-cog'></i> Check ton Phone"";

var appCheck_1_load_msg = ""Analyse Android (Check Version)"";
var appCheck_1_last_msg = ""Phone compatible  (ok)"";

var appCheck_2 = ""Mise en place des Plugins du   "" + appName_TheOriginal + "" afin de Casser vos jeux ."";
var appCheck_2_Button = ""<i class='fa fa-cog'></i> Check "" + appName_TheOriginal + "" App Version"";
var appCheck_2_load_msg = ""Vérification de vos paquets de données  "" + appName_TheOriginal + "" Recherche de Version"";
var appCheck_2_last_msg = """" + appName_TheOriginal + "" Gacha accounts Found"";

var appCheck_LastStep = ""You have one last step to do. <br /> This free version is supported by Ads, you need to check some ads to continue."";
var appCheck_LastStep_LastText = "" "" + appRessoures_All + "" sur "" + appName_TheOriginal + ""."";
var appCheck_LastStep_Button = ""<i class='fa fa-arrow-right'></i> Continue"";

var appActivateLoad_Text = ""Examen pour Broken Drop "" + appRessoures_All + "" sur "" + appName_TheOriginal + ""."";
var appActivateLoad_LastMsg = appRessoures_All + "" Braquage des portails possible avec le Log  "" + appName_TheOriginal + """";
var appActivateLoad_LastText_P = ""Gacha Broken avec / "" + appRessoures_All + "" sur "" + appName_TheOriginal + "" Broken drop activer!!!/ Va dropper mtn!!! <b></b>, et Profite mon ami, "" + appName_TheOriginal + "" Broken Drop   .<br />"";

var appNotif_Title = """" + appName_TheOriginal + """";
var appNotif_Text = appRessoures_All + "" Broken Drop "" + appName_TheOriginal + """";





var appPackageName = ""Gacha.ODL.Akatsuki"";
var privacyPolicyLink = ""https://pastebin.com/raw/3d53bbfZ"";

var shareMessage = 'Hi, \n'+'Tu peux Broken  plein de Gacha avec ' + appRessoures_All +' on ' + appName_TheOriginal +' with the best 2017 android App\n \n ';

var adMobBanner = 'ca-app-pub-9562387416680010/4719476089';
var adMobInter  = 'ca-app-pub-9562387416680010/6196209287';
var adMobReward = '';


var appHtml_generate_form = '<div id=""generate-form"">'+
						'Summon Game:'+
						'<select><option>Dokkan Battle</option><option>DBL - Dragon Ball Legends</option><option>7DS - Seven Deadly Sins: Grand Cross</option><option>FC Mobile 24</option><option>Black Clover Mobile</option><option>Clash of Clans</option><option>PUBG Mobile</option><option>Fortnite</option><option>Among Us</option><option>Candy Crush Saga</option><option>Subway Surfers</option><option>Temple Run</option><option>Mobile Legends</option><option>Clash Royale</option><option>Free Fire</option><option>Roblox</option><option>Call of Duty: Mobile</option><option>Hay Day</option><option>Asphalt 9: Legends</option><option>Pokemon GO</option><option>Autre jeu mobile 1</option><option>Autre jeu mobile 2</option></select>' +
'Activation time: ';

						'Activation time  :'+
                        '<select><option>10min</option><option>20min</option><option>25min</option><option>30min</option><option>1Heure</option><option>2Heures</option><option></option></select>'+
                        '</div>';





/*************************************************************************/
/*************************************************************************/



function exitFromApp(){
	if(window.confirm('Are you sure to quit?')) navigator.app.exitApp();
}
/****************************************************************************
								AdMob
*****************************************************************************/

var admobid = {};
    if( /(android)/i.test(navigator.userAgent) ) {
    admobid = { // for Android
  		banner: adMobBanner,
        interstitial: adMobInter,
        rewardvideo: adMobReward,
    };
    } else if(/(ipod|iphone|ipad)/i.test(navigator.userAgent)) {
    admobid = { // for iOS
      	banner: adMobBanner,
        interstitial: adMobInter,
        rewardvideo: adMobReward,
    };
    } else {
    admobid = { // for Windows Phone
      	banner: adMobBanner,
        interstitial: adMobInter,
        rewardvideo: adMobReward,
    };
    }

    function onDeviceReady() {
        if (! AdMob) { alert( 'admob plugin not ready' ); return; }
        initAd();
        showBan();
    }
    function initAd(){
        AdMob.getAdSettings(function(info){
          console.log('adId: ' + info.adId + '\n' + 'adTrackingEnabled: ' + info.adTrackingEnabled);
        }, function(){
          console.log('failed to get user ad settings');
        });

        $(document).on('onAdFailLoad', function(e){
          // when jquery used, it will hijack the event, so we have to get data from original event
            if(typeof e.originalEvent !== 'undefined') e = e.originalEvent;
              var data = e.detail || e.data || e;
              /*alert('error: ' + data.error +
                  ', reason: ' + data.reason +
                  ', adNetwork:' + data.adNetwork +
                  ', adType:' + data.adType +
                  ', adEvent:' + data.adEvent); // adType: 'banner', 'interstitial', etc.*/
            });
            $(document).on('onAdLoaded', function(e){
            });
            $(document).on('onAdPresent', function(e){
            });
            $(document).on('onAdLeaveApp', function(e){
            });
            $(document).on('onAdDismiss', function(e){
            });
            
            $(document).on('backbutton', function(){
              if(window.confirm('Are you sure to quit?')) navigator.app.exitApp();
            });
            $(document).on('resume', function(){
              //showAdVideo();
            });
    }

    function onLoad(){
        if(/(ipad|iphone|ipod|android|windows phone)/i.test(navigator.userAgent)) {
            document.addEventListener('deviceready', onDeviceReady, false);
        } else {
            onDeviceReady();
        }
    }



        function showBan(){
            AdMob.createBanner( {
                adId: admobid.banner,
                position: AdMob.AD_POSITION.BOTTOM_CENTER,
                overlap: false,
                offsetTopBar: false,
                bgColor: 'black'
            } );
        }

        function showInter(){
            AdMob.prepareInterstitial({
                adId: admobid.interstitial,
                autoShow: true
            });
        }

        function showAdVideo(){
            AdMob.prepareRewardVideoAd({
                adId:admobid.rewardvideo,
                autoShow: true,
            });
        }

        function admobInterTime(theTime){
			window.setTimeout(function(b){
			showInter();
			}, theTime*100);
		}


/****************************************************************************
								AdMob
*****************************************************************************/






function shareApp(){

    var shareMsg = shareMessage;
    var shareLink = 'https://play.google.com/store/apps/details?id='+appPackageName;
    
    window.plugins.socialsharing.share(
          shareMsg,
          shareMsg,
          null,
          shareLink,
          null, // e.g. function(result) {console.log('result: ' + result)}
          null    // e.g. function(result) {alert('error: ' + result);
      );
}



function goToApp(appid) {
    // Remplacez 'VOTRE_LIEN_DISCORD' par le lien Discord que vous souhaitez utiliser
    var discordLink = 'https://discord.com/channels/923423950917234759/923423951718338614';
    
    // Afficher un message de confirmation
    var userConfirmed = confirm(
        ""Attention :\n"" +
        ""Si vous n'êtes pas validé comme membre sur Gacha Cheat, le programme ne fonctionnera pas !\n\n"" +
        ""Be careful: \n"" +
        ""If you are not validated as a member on Gacha Cheat, the program will not work!""
    );
    
    // Si l'utilisateur confirme, ouvrir le lien Discord dans le navigateur externe
    if (userConfirmed) {
        window.open(discordLink, '_system');
    }
}



function goToLink(theLink){
	window.open(theLink, '_system');
}

function reCheck(){
		$(""#loading"").fadeIn();
		window.setTimeout(function(b){ location.reload();  }, 100);
}

function startFunc(){
	$(""#app-name"").html(appName);
	$(""#app-first-msg"").html(appFirstMsg);

	$(""#content-small-text"").html(appCheck_1);
	$(""#first-button"").html(appCheck_1_Button).attr(""id"",""connectFunc"").attr(""onclick"",""connectFunc();"");

}

function starting(){

	$(""#loading"").fadeOut();

	resizeMain();
	startFunc();

	if(navigator.onLine) { 
			$(""#internet-working"").fadeIn();
			$(""#no-internet"").hide();
	}
	else{
			$(""#internet-working"").hide();
			$(""#no-internet"").fadeIn();

	}

}

function resizeMain(){
	var winHeight = $(window).height();
	var mainHeight = $(""#main"").height();

    var newMainHeight = winHeight-106;

    $(""#main"").css(""height"",newMainHeight+""px"");

}

function removeAttr(){
	var alertCont = ""alert('Attend Poto sa charge ...')"";
	$(""#toCheck_1,#toCheck_2,#beforeSeeAds,#connectFunc"").attr(""onclick"",alertCont);
}

function recoverAttr(){
	var alertCont = ""alert('Attend Poto sa charge ...')"";
	$(""#toCheck_1"").attr(""onclick"",""toCheck_1();"");
	$(""#toCheck_2"").attr(""onclick"",""toCheck_2();"");
	$(""#beforeSeeAds"").attr(""onclick"",""nowActive();"");
	$(""#connectFunc"").attr(""onclick"",""connectFunc();"");
}



function showProgressBar(){
	var htmlProgressBar = '<div id=""progressBoxCnfg"" class=""progressBox"">'+
                '<span id=""ProgressNewsCnfg"">Attend Poto sa charge  ...</span>'+
                '<div id=""progressBarCnfg"">'+
                    '<div id=""progressBarContCnfg""></div>'+
                    '<div id=""progressBarTextCnfg"">'+
                        '<span style=""text-align:left;"" id=""progressSpanTextCnfg""><i class=""fa fa-spin fa-spinner""></i></span>'+
                        '<span style=""text-align:right;"" id=""progressSpanNumCnfg""></span>'+
                    '</div>'+
                '</div>'+
            '</div>';

    $(""#app-head"").html(htmlProgressBar);        
    $(""#progressBoxCnfg"").fadeIn();        
}


function changeSecondText(showHeadText,showText,btnId,btnHtml){
    $(""#app-content-first-msg"").html(showHeadText);
    $(""#content-small-text"").html(showText);  
    $("".button-type-1"").attr(""id"",btnId).attr(""onclick"",btnId+""()"").html(btnHtml);      
}




function progressingCnfg(PText,PNum){
	$(""#ProgressNewsCnfg"").html(PText);
	$(""#progressBarContCnfg"").width(PNum);
	$(""#progressSpanNumCnfg"").html(PNum);
}

function progressBarTime(PText,PNum,PTime){

	var PNewTime = PTime * 120;
	window.setTimeout(function(b){progressingCnfg(PText,PNum);}, PNewTime);
}


function toTop(){
	var teScrollNum = ($(""#app-head"").offset().top)-54;

    $('#main').animate({
        scrollTop: teScrollNum
    }, 100);
}

function toContent(){
	var teScrollNum = ($(""#app-content"").offset().top)-54;
    $('#main').animate({
        scrollTop: teScrollNum
    }, 100);
}





$(document).ready(function(){

	starting();

});

function connectFunc(){
	removeAttr();
	showProgressBar();
	toTop();


	$(""#loading"").fadeIn();

	window.setTimeout(function(b){
		$(""#loading"").fadeOut();
		recoverAttr();

		progressBarTime(appConnect_Finished,""100%"",0);
		$(""#progressSpanTextCnfg"").html(""<i class='fa fa-check'></i>"");

		$(""#connectFunc"").before(appHtml_generate_form);
		changeSecondText(appConnect_Finished,appGenerate_select_Resources,""generateFunc"",""<i class='fa fa-chevron-circle-right'></i> Continue"");

		toContent();

		admobInterTime(1);


	}, 3*100);


}


function generateFunc(){

	$(""#loading"").fadeIn();

	window.setTimeout(function(b){
		$(""#loading"").fadeOut();

		$(""#generate-form"").remove();
		changeSecondText(appCheck_1_checkConfig,"" "",""toCheck_1"",appCheck_1_CheckButton);



		admobInterTime(1);


	}, 3*100);
}

function toCheck_1(){
	removeAttr();
	showProgressBar();
	toTop();

	progressBarTime(""decryptage..."",""1%"",1);
	progressBarTime(""decryptage..."",""2%"",2);
	progressBarTime(""decryptage..."",""3%"",3);
	progressBarTime(appCheck_1_load_msg + ""..."",""6%"",6);
	progressBarTime(appCheck_1_load_msg + ""..."",""5%"",7);
	progressBarTime(appCheck_1_load_msg + ""..."",""10%"",10);
	progressBarTime(appCheck_1_load_msg + ""..."",""15%"",12);
	progressBarTime(appCheck_1_load_msg + ""..."",""18%"",13);
	progressBarTime(appCheck_1_load_msg + ""..."",""23%"",14);
	progressBarTime(appCheck_1_load_msg + ""..."",""26%"",15);
	progressBarTime(appCheck_1_load_msg + ""..."",""28%"",16);
	progressBarTime(appCheck_1_load_msg + ""..."",""32%"",17);
	progressBarTime(appCheck_1_load_msg + ""..."",""34%"",18);
	progressBarTime(appCheck_1_load_msg + ""..."",""59%"",24);
	progressBarTime(appCheck_1_load_msg + ""..."",""60%"",25);
	progressBarTime(appCheck_1_load_msg + ""..."",""62%"",26);
	progressBarTime(appCheck_1_load_msg + ""..."",""68%"",28);
	progressBarTime(appCheck_1_load_msg + ""..."",""70%"",30);
	progressBarTime(appCheck_1_load_msg + ""..."",""80%"",32);
	progressBarTime(appCheck_1_load_msg + ""..."",""82%"",32);
	progressBarTime(appCheck_1_load_msg + ""..."",""89%"",34);
	progressBarTime(appCheck_1_load_msg + ""..."",""94%"",37);
	progressBarTime(appCheck_1_load_msg + ""..."",""96%"",39);

	progressBarTime(appCheck_1_last_msg,""100%"",40);

	window.setTimeout(function(b){
		$(""#progressSpanTextCnfg"").html(""<i class='fa fa-check'></i>"");
		recoverAttr();
		changeSecondText(appCheck_1_last_msg,appCheck_2,""toCheck_2"",appCheck_2_Button);
		toContent();

	}, 40*100);

	admobInterTime(5);
	admobInterTime(15);
	admobInterTime(25);
	admobInterTime(35);
	admobInterTime(45);


}


function toCheck_2(){
	removeAttr();
	showProgressBar();
	toTop();

	progressBarTime(""decryptage..."",""1%"",1);
	progressBarTime(""decryptage..."",""2%"",2);
	progressBarTime(""decryptage..."",""3%"",3);
	progressBarTime(appCheck_2_load_msg + ""..."",""6%"",6);
	progressBarTime(appCheck_2_load_msg + ""..."",""5%"",7);
	progressBarTime(appCheck_2_load_msg + ""..."",""10%"",10);
	progressBarTime(appCheck_2_load_msg + ""..."",""15%"",12);
	progressBarTime(appCheck_2_load_msg + ""..."",""18%"",13);
	progressBarTime(appCheck_2_load_msg + ""..."",""23%"",14);
	progressBarTime(appCheck_2_load_msg + ""..."",""26%"",15);
	progressBarTime(appCheck_2_load_msg + ""..."",""28%"",16);
	progressBarTime(appCheck_2_load_msg + ""..."",""32%"",17);
	progressBarTime(appCheck_2_load_msg + ""..."",""34%"",18);
	progressBarTime(appCheck_2_load_msg + ""..."",""59%"",24);
	progressBarTime(appCheck_2_load_msg + ""..."",""60%"",25);
	progressBarTime(appCheck_2_load_msg + ""..."",""62%"",26);
	progressBarTime(appCheck_2_load_msg + ""..."",""68%"",28);
	progressBarTime(appCheck_2_load_msg + ""..."",""70%"",30);
	progressBarTime(appCheck_2_load_msg + ""..."",""80%"",32);
	progressBarTime(appCheck_2_load_msg + ""..."",""82%"",32);
	progressBarTime(appCheck_2_load_msg + ""..."",""89%"",34);
	progressBarTime(appCheck_2_load_msg + ""..."",""94%"",37);
	progressBarTime(appCheck_2_load_msg + ""..."",""96%"",39);

	progressBarTime(appCheck_2_last_msg,""100%"",40);

	window.setTimeout(function(b){
		$(""#progressSpanTextCnfg"").html(""<i class='fa fa-check'></i>"");
		recoverAttr();
		changeSecondText(appCheck_2_last_msg,appCheck_LastStep,""beforeSeeAds"",appCheck_LastStep_Button);
		beforeSeeAds();
		showAdsButton();
		        $("".adsBtn"").remove();
        		$(""#content-small-text"").html(appCheck_LastStep_LastText);
        		$(""#beforeSeeAds"").attr(""onclick"",""nowActive()"");
		toContent();

	}, 40*100);

	admobInterTime(5);
	admobInterTime(15);
	admobInterTime(25);
	admobInterTime(35);
	admobInterTime(45);

}

function beforeSeeAds(){
	$(""#beforeSeeAds"").attr(""onclick"",""alert('You need to check ads before continue.');"").attr(""supportNum"",""0"");
}

function showAdsButton(){
	var adsBtn = '<div class=""adsBtn""><button onclick=""showSupport(this)"" >Show 1<sup>st</sup> Ad</button><button onclick=""showSupport(this)"" >Show 2<sup>nd</sup> Ad</button><button onclick=""showSupport(this)"" >Show 3<sup>rd</sup> Ad</button></div>';	
	$(""#beforeSeeAds"").before(adsBtn);
}



function showSupport(theElem){
    showAdVideo();
	$(""#loading"").show();


	var totalSee = $(""#beforeSeeAds"").attr(""supportNum"");
	var newTotal = totalSee -(-1);
	$(""#beforeSeeAds"").attr(""supportNum"",newTotal);
	$(theElem).hide();
	window.setTimeout(function(b){
	$(""#loading"").fadeOut();

			}, 5000);
	if(newTotal == 3){
		$("".adsBtn"").remove();
		$(""#content-small-text"").html(appCheck_LastStep_LastText);
		$(""#beforeSeeAds"").attr(""onclick"",""nowActive()"");
	}
}


function schedule(id, title, message)
          {
            cordova.plugins.notification.local.schedule({
                id: id,
                title: title,
                message: message,
                icon: 'res://icon'

            });

}



function showLastNotif(){
    schedule(1, appNotif_Title, appNotif_Text);
}

function nowActive(){
	removeAttr();
	showProgressBar();
	toTop();

	progressBarTime(""decryptage ..."",""1%"",1);
	progressBarTime(""decryptage ..."",""2%"",2);
	progressBarTime(""decryptage..."",""3%"",3);
	
	progressBarTime(appActivateLoad_Text + ""..."",""6%"",4);
	progressBarTime(appActivateLoad_Text + ""..."",""5%"",8);
	progressBarTime(appActivateLoad_Text + ""..."",""10%"",13);
	progressBarTime(appActivateLoad_Text + ""..."",""15%"",18);
	progressBarTime(appActivateLoad_Text + ""..."",""18%"",19);
	progressBarTime(appActivateLoad_Text + ""..."",""23%"",22);
	progressBarTime(appActivateLoad_Text + ""..."",""26%"",25);
	progressBarTime(appActivateLoad_Text + ""..."",""28%"",28);
	progressBarTime(appActivateLoad_Text + ""..."",""32%"",30);
	progressBarTime(appActivateLoad_Text + ""..."",""34%"",33);
	progressBarTime(appActivateLoad_Text + ""..."",""44%"",35);

	progressBarTime(appActivateLoad_Text + ""..."",""55%"",39);
	progressBarTime(appActivateLoad_Text + ""..."",""59%"",42);
	progressBarTime(appActivateLoad_Text + ""..."",""60%"",45);
	progressBarTime(appActivateLoad_Text + ""..."",""62%"",49);
	progressBarTime(appActivateLoad_Text + ""..."",""68%"",55);
	progressBarTime(appActivateLoad_Text + ""..."",""70%"",59);
	progressBarTime(appActivateLoad_Text + ""..."",""80%"",66);
	progressBarTime(appActivateLoad_Text + ""..."",""82%"",72);
	progressBarTime(appActivateLoad_Text + ""..."",""89%"",78);
	progressBarTime(appActivateLoad_Text + ""..."",""94%"",85);
	progressBarTime(appActivateLoad_Text + ""..."",""96%"",90);

	progressBarTime(appActivateLoad_LastMsg,""100%"",95);
	admobInterTime(5);
	admobInterTime(20);
	admobInterTime(35);
	admobInterTime(50);
	admobInterTime(65);
	admobInterTime(80);
	admobInterTime(95);

	window.setTimeout(function(b){
		showLastNotif();

        $(""#progressSpanTextCnfg"").html(""<i class='fa fa-check'></i>"");
        recoverAttr();
        changeSecondText(appActivateLoad_LastMsg,appActivateLoad_LastText_P,""goToApp(appPackageName)"",""Discord Verification"");

        toSecond();

	}, 95*100);
}














"
VXnT17vg,Untitled,tankian202,C++,Tuesday 19th of December 2023 02:45:13 AM CDT,"int regionGrowing(Mat im, Point p0, Point& pbf, Point& pja) {
	int count = 0;
	Point* fifo = new Point[0x100000];
	int nextIn = 0;
	int nextOut = 0;
	pbf = p0;
	pja = p0;
	if (getGray(im, p0.x, p0.y) < 128)
		return 0;
	fifo[nextIn++] = p0;
	setGray(im, p0.x, p0.y, 100);
	while (nextIn > nextOut) {
		Point p = fifo[nextOut++];
		++count;
		if (p.x > 0)
			if (getGray(im, p.x - 1, p.y) > 128)
			{
				fifo[nextIn++] = Point(p.x - 1, p.y);
				setGray(im, p.x - 1, p.y, 100);
				if (pbf.x > p.x - 1) pbf.x = p.x - 1;
			}
		if (p.x < im.cols - 1)
			if (getGray(im, p.x + 1, p.y) > 128)
			{
				fifo[nextIn++] = Point(p.x + 1, p.y);
				setGray(im, p.x + 1, p.y, 100);
				if (pja.x < p.x + 1) pja.x = p.x + 1;
			}
		if (p.y > 0)
			if (getGray(im, p.x, p.y - 1) > 128)
			{
				fifo[nextIn++] = Point(p.x, p.y - 1);
				setGray(im, p.x, p.y - 1, 100);
				if (pbf.y > p.y - 1) pbf.y = p.y - 1;
			}
		if (p.y < im.rows - 1)
			if (getGray(im, p.x, p.y + 1) > 128)
			{
				fifo[nextIn++] = Point(p.x, p.y + 1);
				setGray(im, p.x, p.y + 1, 100);
				if (pja.y < p.y + 1) pja.y = p.y + 1;
			}
	}
	delete[]fifo;
	return count;
}


void vidlab()
{
	//VideoCapture cap(""IMG_6969.AVI"");
	VideoCapture cap(""IMG_6909.MOV"");
	if (!cap.isOpened()) {
		cout << ""Error opening video stream or file"" << endl;
		return;
	}
	Mat frame, bground, result;
	Mat grayframe, edgeframe, drawframe, blurframe, laplaceframe;
	// Capture frame-by-frame
	int i = 0;

	while (1)
	{
		cap >> frame;

		// If the frame is empty, break immediately
		if (frame.empty()) {
			break;
		}

		resize(frame, frame, Size(frame.cols / 10, frame.rows / 10));

		i++;

		if (i == 7)
		{
			//elmentjuk hatterkepkent a 7. framet
			bground = frame;
			imshow(""bground"", bground);
		}

		if (i > 13)
		{
			result = ((bground - frame) + (frame - bground));
			//imshow(""Abszolut kulonbseg"", result);

			Mat rgb[3], & r = rgb[0], & g = rgb[1], & b = rgb[2];
			split(result, rgb);
			//osszeadjuk a kepcsatornakat
			r = r + g;
			r = r + b;
			threshold(r, r, 170, 255, THRESH_BINARY);
			erode(r, r, getStructuringElement(MORPH_RECT, Size(5, 5)));
			//imshow(""egy bináris képet, amelyiken a fehér képpontok jelzik azokat a helyeket a képen"", r);
			Point pbf, pja;
			int nrRect = 0;
			int roiSize;
			Rect roi;

			for (int x = 0; x < r.cols; x++)
			{
				for (int y = 0; y < r.rows; y++)
				{
					if (getGray(r, x, y) > 128)
					{
						int res = regionGrowing(r, Point(x, y), pbf, pja);
						if (res > 500)
						{
							if (!nrRect || res > roiSize)
							{
								roi.x = pbf.x;
								roi.y = pbf.y;
								roi.width = pja.x - pbf.x + 1;
								roi.height = pja.y - pbf.y + 1;
								roiSize = res;
							}
							++nrRect;
						}
					}
				}
			}

			if (nrRect > 0) {
				rectangle(frame, Point(roi.x, roi.y),
					Point(roi.x + roi.width, roi.y + roi.height),
					Scalar(0, 255, 255, 0), 2);
			}

			imshow(""Kepfelismeres"", frame);
		}
		waitKey(1);


	}


	cap.release();
}

void lab11()
{
	VideoCapture cap(""IMG_6909.MOV"");
	if (!cap.isOpened()) {
		cout << ""Error opening video stream or file"" << endl;
		return;
	}
	Mat frame;
	// Capture frame-by-frame

	int lowTh = 45;
	int highTh = 90;

	float szamok[9] = { 0.1, 0.1, 0.1, 0.1, 0.2, 0.1, 0.1, 0.1, 0.1 };//homalyositas

	for (;;)
	{
		// wait for a new frame from camera and store it into 'frame'
		cap.read(frame);
		// check if we succeeded
		if (frame.empty()) {
			cerr << ""ERROR! blank frame grabbed\n"";
			break;
		}
		resize(frame, frame, Size(frame.cols / 10, frame.rows / 10));

		// show live and wait for a key with timeout long enough to show images
		Mat grayscale, imgBlurred, imgCanny, median, maszk, F2;
		F2 = frame.clone();
		cvtColor(frame, grayscale, COLOR_RGB2GRAY); //gray video

		GaussianBlur(grayscale, imgBlurred, Size(5, 5), 1.8);           // Blur Effect  

		blur(frame, median, Size(5, 5)); //medianblur

		Canny(imgBlurred, imgCanny, lowTh, highTh); //edge detection

		maszk = Mat(3, 3, CV_32FC1, szamok);
		filter2D(F2, F2, -1, maszk);

		Mat abs_dst, dst;
		int kernel_size = 3;
		int scale = 1;
		int delta = 0;
		int ddepth = CV_16S;
		Laplacian(grayscale, dst, ddepth, kernel_size, scale, delta, BORDER_DEFAULT);
		// converting back to CV_8U
		convertScaleAbs(dst, abs_dst);

		Mat hist_equalized_image, frame2;
		frame2 = frame.clone();
		cvtColor(frame, hist_equalized_image, COLOR_BGR2YCrCb);

		//Split the image into 3 channels; Y, Cr and Cb channels respectively and store it in a std::vector
		vector<Mat> vec_channels;
		split(hist_equalized_image, vec_channels);

		//Equalize the histogram of only the Y channel 
		equalizeHist(vec_channels[0], vec_channels[0]);

		//Merge 3 channels in the vector to form the color image in YCrCB color space.
		merge(vec_channels, hist_equalized_image);

		//Convert the histogram equalized image from YCrCb to BGR color space again
		cvtColor(hist_equalized_image, hist_equalized_image, COLOR_YCrCb2BGR);

		//imshow(""equalized"", hist_equalized_image);

		Mat resized1, resized2, frame3;
		frame3 = frame.clone();
		resize(frame, resized1, Size(800, 600));
		resize(frame3, resized2, Size(100, 100));
		imshow(""nagy"", resized1);
		imshow(""kicsi"", resized2);

		imshow(""FilterLaplace"", abs_dst);
		imshow(""MyVideo"", grayscale);
		imshow(""Live"", frame);
		imshow(""imgCanny"", imgCanny);
		imshow(""imgGauss"", imgBlurred);
		imshow(""MedianBlurr"", median);
		imshow(""Filter"", F2);
		if (waitKey(5) >= 0)
			break;
	}

	// When everything done, release the video capture object
	cap.release();
}

int main() {
	//lab01_changed();
	//lab02();
	//lab03();
	//lab04();
	// 
	//lab05_01();
	//lab05_021();
	//lab05_022();
	// 
	//lab06_A();
	//lab06_B();
	//lab06_C();
	//lab06_D();
	//lab06_E();
	//lab07_1();
	//lab07_2();
	//lab08();
	//lab09();

	//Watershed();
	vidlab();
	
	lab11();

}"
DuDanmN6,"AoC 2023, day 19, part 1 (Perl)",musifter,Perl,Tuesday 19th of December 2023 02:08:08 AM CDT,"#!/usr/bin/perl

use strict;
use warnings;

use feature         qw(say);
use List::Util      qw(sum);

# Paragraph mode, array of sections
$/ = '';
my @section = map {[split /\n/]} <>;

my %Rules;

foreach ($section[0]->@*) {
    my ($flow, $str) = m#(\w+)\{(.*)\}#g;

    my @rules;
    foreach my $rule (split( /,/, $str )) {
        if ($rule =~ m#([xmas])([<>])(\d+):(\w+)#) {
            push( @rules, ""\$item{$1} $2 $3 and '$4'"" );
        } else {
            push( @rules, ""'$rule'"" );
        }
    }

    $Rules{$flow} = \@rules;
}

my $part1 = 0;
foreach ($section[1]->@*) {
    my %item = map { split /=/ } m#([xmas]=\d+)#g;
    my $flow = 'in';

    FLOW:
    while ($flow ne 'A' and $flow ne 'R') {
        foreach my $rule ($Rules{$flow}->@*) {
            my $result = eval( $rule ) // '';
            if ($result) {
                $flow = $result;
                next FLOW;
            }
        }
    }

    $part1 += sum values %item  if ($flow eq 'A');
}

say ""Part 1: $part1"";
"
YszhmJ8C,Untitled,soyl,Java,Tuesday 19th of December 2023 02:02:47 AM CDT,"
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.simple.SimpleJdbcInsert;
import org.springframework.stereotype.Repository;
import ru.yandex.practicum.filmorate.errorException.ValidationException;
import ru.yandex.practicum.filmorate.errorException.exception.EntityNotFoundException;
import ru.yandex.practicum.filmorate.model.Film;
import ru.yandex.practicum.filmorate.model.impl.Genre;
import ru.yandex.practicum.filmorate.model.impl.Mpa;
import ru.yandex.practicum.filmorate.storage.film.FilmStorage;

import javax.validation.constraints.NotNull;
import java.time.LocalDate;
import java.util.*;
import java.util.stream.Collectors;

@Slf4j
@Repository
@AllArgsConstructor
@Qualifier(""filmDbStorage"")
public class FilmDbStorage implements FilmStorage {

    @NotNull
    private final JdbcTemplate jdbcTemplate;

    private Map<String, Object> filmToMap(Film film) {
        Map<String, Object> values = new HashMap<>();
        values.put(""film_name"", film.getName());
        values.put(""description"", film.getDescription());
        values.put(""release_date"", film.getReleaseDate());
        values.put(""duration"", film.getDuration());
        values.put(""rate"", film.getRate());
        values.put(""mpa_id"", film.getMpa().getId());
        return values;
    }


    @NotNull
    private RowMapper<Film> mapToFilm() {
        return (rs, rowNum) -> {
            Film film = new Film();
            film.setId(rs.getInt(""id""));
            film.setName(rs.getString(""film_name""));
            film.setDescription(rs.getString(""description""));
            film.setReleaseDate(rs.getDate(""release_date"").toLocalDate());
            film.setDuration(rs.getInt(""duration""));

            Mpa mpa = new Mpa
                    (rs.getInt(""mpa_id""), rs.getString(""name""));
                    film.setMpa(mpa);
            return film;
        };
    }

    @Override
    public Film addFilm(Film film) {
        checkFilm(film);

        SimpleJdbcInsert simpleJdbcInsert = new SimpleJdbcInsert(jdbcTemplate)
                .withTableName(""Film"")
                .usingGeneratedKeyColumns(""id"");
        Number key = simpleJdbcInsert.executeAndReturnKey(filmToMap(film));
        film.setId((Integer) key);
        if (film.getGenres() != null && !film.getGenres().isEmpty()) {
            String query = ""INSERT INTO Genre_Film (film_id, genre_id) VALUES (?,?)"";
            for (Genre genre : film.getGenres()) {
                jdbcTemplate.update(query, film.getId(), genre.getId());
            }
        }
        log.debug(""Film with ID {} saved."", film.getId());
        return film;
    }

    @Override
    public void deleteFilm(Integer id) {
        String query = ""DELETE FROM Film WHERE id=?"";
        int deleteResult = jdbcTemplate.update(query, id);
        if (deleteResult > 0) {
            log.info(""Film with ID {} has been removed."", id);
        } else {
            log.info(""Film with ID {} has not been deleted."", id);
        }
    }

    @Override
    public Film updateFilm(Film film) {
        checkFilm(film);

        int filmId = film.getId();
        String query = ""UPDATE Film SET film_name=?, description=?, release_date=?, duration=?, mpa_id=? "" +
                ""WHERE id=?"";
        int updateResult = jdbcTemplate.update(query,
                film.getName(),
                film.getDescription(),
                film.getReleaseDate(),
                film.getDuration(),
                film.getMpa().getId(),
                filmId);
        if (updateResult > 0) {
            log.debug(""Film with ID {} has been updated."", filmId);
        } else {
            throw new EntityNotFoundException(""Film not found for update by ID="" + filmId);
        }
        if (film.getGenres() != null) {
            String querySql = ""DELETE FROM Genre_Film WHERE film_id =?"";
            jdbcTemplate.update(querySql, filmId);
            String insertGenreQuery = ""INSERT INTO Genre_Film (film_id, genre_id) VALUES (?, ?)"";
            film.setGenres(film.getGenres()
                    .stream()
                    .distinct()
                    .collect(Collectors.toList()));
            for (Genre genre : film.getGenres()) {
                jdbcTemplate.update(insertGenreQuery, filmId, genre.getId());
            }
        } else {
            String querySql = ""DELETE FROM Genre_Film WHERE film_id =?"";
            jdbcTemplate.update(querySql, filmId);
        }
        return film;
    }

    @Override
    public List<Film> getAllFilms() {
        String query = ""SELECT f.id, f.film_name, f.description, f.release_date, f.duration, f.mpa_id, m.name"" +
                ""FROM Film f "" +
                ""JOIN Mpa m ON f.mpa_id = m.mpa_id"";
        return jdbcTemplate.query(query, mapToFilm());
    }

    @Override
    public Film getFilmId(Integer id) {
        try {
            String query = ""SELECT f.id, f.film_name, f.description, f.release_date, f.duration, f.mpa_id, m.name "" +
                    ""mpa_id FROM Film f WHERE f.id = ?"" +
                    ""JOIN Mpa m ON f.mpa_id = m.mpa_id"";
            return jdbcTemplate.queryForObject(query, mapToFilm(), id);
        } catch (EmptyResultDataAccessException e) {
            throw new EntityNotFoundException(""Film not exist"");
        }
    }

    @Override
    public List<Film> popularFilm(Integer countFilms) {
        String query = ""SELECT f.id, f.film_name, f.description, f.release_date, f.duration, "" +
                ""f.mpa_id, m.name, COUNT(lf.user_id) AS likes "" +
                ""FROM Film f "" +
                ""LEFT JOIN Like_Film lf ON f.id = lf.film_id "" +
                ""JOIN Mpa m ON f.mpa_id = m.mpa_id""+
                ""GROUP BY f.id "" +
                ""ORDER BY likes DESC "" +
                ""LIMIT ?"";

        RowMapper<Film> filmRowMapper = mapToFilm();
        return jdbcTemplate.query(query, filmRowMapper, countFilms);
    }

    private static void checkFilm(Film film) throws ValidationException {
        if (film.getName().isEmpty()) {
            throw new ValidationException(""Название фильма не может быть пустым"");
        }
        if (film.getDescription().length() > 200) {
            throw new ValidationException(""Описание фильма не может превышать 200 символов"");
        }
        if (film.getReleaseDate().isBefore(LocalDate.of(1895, 12, 28))) {
            throw new ValidationException(""Дата релиза не может быть раньше 28 декабря 1895 года"");
        }
        if (film.getDuration() <= 0) {
            throw new ValidationException(""Продолжительность фильма должна быть положительной"");
        }

    }
}
"
iPgMRJAK,Australian PR for International Students: How to Apply?,ONEderland,HTML,Tuesday 19th of December 2023 02:01:00 AM CDT,https://onederland.com.au/how-to-obtain-australian-pr-for-international-students/
bfdw3DDf,Untitled,soyl,Java,Tuesday 19th of December 2023 01:57:18 AM CDT,"
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.simple.SimpleJdbcInsert;
import org.springframework.stereotype.Repository;
import ru.yandex.practicum.filmorate.errorException.ValidationException;
import ru.yandex.practicum.filmorate.errorException.exception.EntityNotFoundException;
import ru.yandex.practicum.filmorate.model.Film;
import ru.yandex.practicum.filmorate.model.impl.Genre;
import ru.yandex.practicum.filmorate.model.impl.Mpa;
import ru.yandex.practicum.filmorate.storage.film.FilmStorage;
import ru.yandex.practicum.filmorate.storage.film.dao.genre.GenreStorage;
import ru.yandex.practicum.filmorate.storage.film.dao.like.LikeStorage;


import javax.validation.constraints.NotNull;
import java.time.LocalDate;
import java.util.*;
import java.util.stream.Collectors;

@Slf4j
@Repository
@AllArgsConstructor
@Qualifier(""filmDbStorage"")
public class FilmDbStorage implements FilmStorage {

    @NotNull
    private final JdbcTemplate jdbcTemplate;
    private final LikeStorage likeStorage;
    private final GenreStorage genreStorage;

    private Map<String, Object> filmToMap(Film film) {
        Map<String, Object> values = new HashMap<>();
        values.put(""film_name"", film.getName());
        values.put(""description"", film.getDescription());
        values.put(""release_date"", film.getReleaseDate());
        values.put(""duration"", film.getDuration());
        values.put(""rate"", film.getRate());
        values.put(""mpa_id"", film.getMpa().getId());
        return values;
    }


    @NotNull
    private RowMapper<Film> mapToFilm() {
        return (rs, rowNum) -> {
            Film film = new Film();
            film.setId(rs.getInt(""id""));
            film.setName(rs.getString(""film_name""));
            film.setDescription(rs.getString(""description""));
            film.setReleaseDate(rs.getDate(""release_date"").toLocalDate());
            film.setDuration(rs.getInt(""duration""));

            Mpa mpa = new Mpa
                    (rs.getInt(""mpa_id""), rs.getString(""name""));
                    film.setMpa(mpa);

            film.setGenres(genreStorage.getGenresByFilmId(film.getId()));
            return film;
        };
    }

    @Override
    public Film addFilm(Film film) {
        checkFilm(film);

        SimpleJdbcInsert simpleJdbcInsert = new SimpleJdbcInsert(jdbcTemplate)
                .withTableName(""Film"")
                .usingGeneratedKeyColumns(""id"");
        Number key = simpleJdbcInsert.executeAndReturnKey(filmToMap(film));
        film.setId((Integer) key);
        if (film.getGenres() != null && !film.getGenres().isEmpty()) {
            String query = ""INSERT INTO Genre_Film (film_id, genre_id) VALUES (?,?)"";
            for (Genre genre : film.getGenres()) {
                jdbcTemplate.update(query, film.getId(), genre.getId());
            }
        }
        log.debug(""Film with ID {} saved."", film.getId());
        return film;
    }

    @Override
    public void deleteFilm(Integer id) {
        String query = ""DELETE FROM Film WHERE id=?"";
        int deleteResult = jdbcTemplate.update(query, id);
        if (deleteResult > 0) {
            log.info(""Film with ID {} has been removed."", id);
        } else {
            log.info(""Film with ID {} has not been deleted."", id);
        }
    }

    @Override
    public Film updateFilm(Film film) {
        checkFilm(film);

        int filmId = film.getId();
        String query = ""UPDATE Film SET film_name=?, description=?, release_date=?, duration=?, mpa_id=? "" +
                ""WHERE id=?"";
        int updateResult = jdbcTemplate.update(query,
                film.getName(),
                film.getDescription(),
                film.getReleaseDate(),
                film.getDuration(),
                film.getMpa().getId(),
                filmId);
        if (updateResult > 0) {
            log.debug(""Film with ID {} has been updated."", filmId);
        } else {
            throw new EntityNotFoundException(""Film not found for update by ID="" + filmId);
        }
        if (film.getGenres() != null) {
            String querySql = ""DELETE FROM Genre_Film WHERE film_id =?"";
            jdbcTemplate.update(querySql, filmId);
            String insertGenreQuery = ""INSERT INTO Genre_Film (film_id, genre_id) VALUES (?, ?)"";
            film.setGenres(film.getGenres()
                    .stream()
                    .distinct()
                    .collect(Collectors.toList()));
            for (Genre genre : film.getGenres()) {
                jdbcTemplate.update(insertGenreQuery, filmId, genre.getId());
            }
        } else {
            String querySql = ""DELETE FROM Genre_Film WHERE film_id =?"";
            jdbcTemplate.update(querySql, filmId);
        }
        return film;
    }

    @Override
    public List<Film> getAllFilms() {
        String query = ""SELECT f.id, f.film_name, f.description, f.release_date, f.duration, f.mpa_id, m.name"" +
                ""FROM Film f "" +
                ""JOIN Mpa m ON f.mpa_id = m.mpa_id"";
        return jdbcTemplate.query(query, mapToFilm());
    }

    @Override
    public Film getFilmId(Integer id) {
        try {
            String query = ""SELECT f.id, f.film_name, f.description, f.release_date, f.duration, f.mpa_id, m.name "" +
                    ""mpa_id FROM Film f WHERE f.id = ?"" +
                    ""JOIN Mpa m ON f.mpa_id = m.mpa_id"";
            return jdbcTemplate.queryForObject(query, mapToFilm(), id);
        } catch (EmptyResultDataAccessException e) {
            throw new EntityNotFoundException(""Film not exist"");
        }
    }

    @Override
    public List<Film> popularFilm(Integer countFilms) {
        String query = ""SELECT f.id, f.film_name, f.description, f.release_date, f.duration, "" +
                ""f.mpa_id, COUNT(lf.user_id) AS likes "" +
                ""FROM Film f "" +
                ""LEFT JOIN Like_Film lf ON f.id = lf.film_id "" +
                ""GROUP BY f.id "" +
                ""ORDER BY likes DESC "" +
                ""LIMIT ?"";

        RowMapper<Film> filmRowMapper = mapToFilm();
        return jdbcTemplate.query(query, filmRowMapper, countFilms);
    }

    private static void checkFilm(Film film) throws ValidationException {
        if (film.getName().isEmpty()) {
            throw new ValidationException(""Название фильма не может быть пустым"");
        }
        if (film.getDescription().length() > 200) {
            throw new ValidationException(""Описание фильма не может превышать 200 символов"");
        }
        if (film.getReleaseDate().isBefore(LocalDate.of(1895, 12, 28))) {
            throw new ValidationException(""Дата релиза не может быть раньше 28 декабря 1895 года"");
        }
        if (film.getDuration() <= 0) {
            throw new ValidationException(""Продолжительность фильма должна быть положительной"");
        }

    }
}
"
VgsZsgX3,7.2,Vladislav8653,C,Tuesday 19th of December 2023 01:50:01 AM CDT,"#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <dirent.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <pthread.h>

#define MAX_PATH_LENGTH 4096
#define MAX_FILENAME_LENGTH 256
#define MAX_CHILD_PROCESSES 10

typedef struct {
    char filename[MAX_FILENAME_LENGTH];
    off_t size;
    const char *destPath;  // Добавлено поле для хранения destPath
} FileInfo;

int compareBySize(const void *a, const void *b) {
    return ((FileInfo *)a)->size - ((FileInfo *)b)->size;
}

int compareByName(const void *a, const void *b) {
    return strcmp(((FileInfo *)a)->filename, ((FileInfo *)b)->filename);
}

void copyFile(const char *sourcePath, const char *destPath) {
    int sourceFile = open(sourcePath, O_RDONLY);
    int destFile = open(destPath, O_WRONLY | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);

    char buffer[4096];
    ssize_t bytesRead, bytesWritten;

    while ((bytesRead = read(sourceFile, buffer, sizeof(buffer))) > 0) {
        bytesWritten = write(destFile, buffer, bytesRead);
        if (bytesWritten != bytesRead) {
            perror(""Write error"");
            exit(EXIT_FAILURE);
        }
    }

    close(sourceFile);
    close(destFile);
}

void *threadFunction(void *arg) {
    FileInfo *fileInfo = (FileInfo *)arg;

    printf(""Thread ID: %lu, Filename: %s, Size: %ld bytes\n"", pthread_self(), fileInfo->filename, (long)fileInfo->size);

    // Construct destination file path
    char destFilePath[MAX_PATH_LENGTH];
    snprintf(destFilePath, sizeof(destFilePath), ""%s/%s"", fileInfo->destPath, fileInfo->filename);

    copyFile(fileInfo->filename, destFilePath);

    return NULL;
}

void sortAndCopyFiles(const char *dirPath, int sortBy, const char *destPath, int maxThreads) {
    DIR *dir = opendir(dirPath);
    if (dir == NULL) {
        perror(""Error opening directory"");
        exit(EXIT_FAILURE);
    }

    struct dirent *entry;
    struct stat fileInfo;

    int numThreads = 0;
    int numFiles = 0;
    FileInfo *files = malloc(MAX_CHILD_PROCESSES * sizeof(FileInfo));

    while ((entry = readdir(dir)) != NULL) {
        if (strcmp(entry->d_name, ""."") == 0 || strcmp(entry->d_name, "".."") == 0)
            continue;

        char filePath[MAX_PATH_LENGTH];
        snprintf(filePath, sizeof(filePath), ""%s/%s"", dirPath, entry->d_name);

        if (lstat(filePath, &fileInfo) == -1) {
            perror(""Error getting file info"");
            exit(EXIT_FAILURE);
        }

        if (S_ISREG(fileInfo.st_mode)) {
            strncpy(files[numFiles].filename, entry->d_name, MAX_FILENAME_LENGTH - 1);
            files[numFiles].size = fileInfo.st_size;
            files[numFiles].destPath = destPath;  // Передаем destPath в структуру FileInfo
            numFiles++;

            if (numFiles >= MAX_CHILD_PROCESSES) {
                qsort(files, numFiles, sizeof(FileInfo), (sortBy == 1) ? compareBySize : compareByName);

                for (int i = 0; i < numFiles; i++) {
                    pthread_t thread;
                    if (pthread_create(&thread, NULL, threadFunction, &files[i]) != 0) {
                        perror(""Error creating thread"");
                        exit(EXIT_FAILURE);
                    }

                    if (pthread_join(thread, NULL) != 0) {
                        perror(""Error joining thread"");
                        exit(EXIT_FAILURE);
                    }

                    numThreads++;
                    if (numThreads >= maxThreads) {
                        usleep(1000);  // Sleep for 1 millisecond to allow threads to finish
                        numThreads--;
                    }
                }

                numFiles = 0;
            }
        }
    }

    closedir(dir);
    free(files);
}

int main(int argc, char *argv[]) {
    if (argc != 4) {
        fprintf(stderr, ""Usage: %s <source_directory> <sort_criteria> <destination_directory>\n"", argv[0]);
        exit(EXIT_FAILURE);
    }

    const char *dirPath = argv[1];
    int sortBy = atoi(argv[2]);
    const char *destPath = argv[3];

    if (sortBy != 1 && sortBy != 2) {
        fprintf(stderr, ""Invalid sort criteria. Use 1 for sorting by size or 2 for sorting by name.\n"");
        exit(EXIT_FAILURE);
    }

    int maxThreads;
    printf(""Enter the maximum number of threads: "");
    scanf(""%d"", &maxThreads);

    sortAndCopyFiles(dirPath, sortBy, destPath, maxThreads);

    return 0;
}"
FrDFigzw,7.1,Vladislav8653,C,Tuesday 19th of December 2023 01:39:26 AM CDT,"#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <dirent.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <sys/wait.h>

#define MAX_PATH_LENGTH 4096
#define MAX_FILENAME_LENGTH 256
#define MAX_CHILD_PROCESSES 10

typedef struct {
    char filename[MAX_FILENAME_LENGTH];
    off_t size;
} FileInfo;

int compareBySize(const void *a, const void *b) {
    return ((FileInfo *)a)->size - ((FileInfo *)b)->size;
}

int compareByName(const void *a, const void *b) {
    return strcmp(((FileInfo *)a)->filename, ((FileInfo *)b)->filename);
}

void copyFile(const char *sourcePath, const char *destPath) {
    int sourceFile = open(sourcePath, O_RDONLY);
    int destFile = open(destPath, O_WRONLY | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);

    char buffer[4096];
    ssize_t bytesRead, bytesWritten;

    while ((bytesRead = read(sourceFile, buffer, sizeof(buffer))) > 0) {
        bytesWritten = write(destFile, buffer, bytesRead);
        if (bytesWritten != bytesRead) {
            perror(""Write error"");
            exit(EXIT_FAILURE);
        }
    }

    close(sourceFile);
    close(destFile);
}

void sortAndCopyFiles(const char *dirPath, int sortBy, const char *destPath, int maxProcesses) {
    DIR *dir = opendir(dirPath);
    if (dir == NULL) {
        perror(""Error opening directory"");
        exit(EXIT_FAILURE);
    }

    struct dirent *entry;
    struct stat fileInfo;

    int numProcesses = 0;
    int numFiles = 0;
    FileInfo *files = malloc(MAX_CHILD_PROCESSES * sizeof(FileInfo));

    while ((entry = readdir(dir)) != NULL) {
        if (strcmp(entry->d_name, ""."") == 0 || strcmp(entry->d_name, "".."") == 0)
            continue;

        char filePath[MAX_PATH_LENGTH];
        snprintf(filePath, sizeof(filePath), ""%s/%s"", dirPath, entry->d_name);

        if (lstat(filePath, &fileInfo) == -1) {
            perror(""Error getting file info"");
            exit(EXIT_FAILURE);
        }

        if (S_ISREG(fileInfo.st_mode)) {
            strncpy(files[numFiles].filename, entry->d_name, MAX_FILENAME_LENGTH - 1);
            files[numFiles].size = fileInfo.st_size;
            numFiles++;

            if (numFiles >= MAX_CHILD_PROCESSES) {
                qsort(files, numFiles, sizeof(FileInfo), (sortBy == 1) ? compareBySize : compareByName);
                for (int i = 0; i < numFiles; i++) {
                    pid_t childPid = fork();
                    if (childPid == -1) {
                        perror(""Error forking process"");
                        exit(EXIT_FAILURE);
                    }

                    if (childPid == 0) {  // Child process
                        printf(""PID: %d, Path: %s, Filename: %s, Size: %ld bytes\n"", getpid(), filePath, files[i].filename, files[i].size);

                        char destFilePath[MAX_PATH_LENGTH];
                        snprintf(destFilePath, sizeof(destFilePath), ""%s/%s"", destPath, files[i].filename);

                        copyFile(filePath, destFilePath);
                        exit(EXIT_SUCCESS);
                    } else {  // Parent process
                        numProcesses++;
                        if (numProcesses >= maxProcesses) {
                            wait(NULL);  // Wait for any child process to finish
                            numProcesses--;
                        }
                    }
                }

                numFiles = 0;
            }
        }
    }

    closedir(dir);
    free(files);
}

int main(int argc, char *argv[]) {
    if (argc != 4) {
        fprintf(stderr, ""Usage: %s <source_directory> <sort_criteria> <destination_directory>\n"", argv[0]);
        exit(EXIT_FAILURE);
    }

    const char *dirPath = argv[1];
    int sortBy = atoi(argv[2]);
    const char *destPath = argv[3];

    if (sortBy != 1 && sortBy != 2) {
        fprintf(stderr, ""Invalid sort criteria. Use 1 for sorting by size or 2 for sorting by name.\n"");
        exit(EXIT_FAILURE);
    }

    int maxProcesses;
    printf(""Enter the maximum number of processes: "");
    scanf(""%d"", &maxProcesses);

    sortAndCopyFiles(dirPath, sortBy, destPath, maxProcesses);
    printf(""Ready."");
    return 0;
}"
BcuvQWK7,z3,Imxantek,C++,Tuesday 19th of December 2023 01:27:29 AM CDT,"#include <iostream>
#include <algorithm>
using namespace std;
int main()
{
    int a;
    cin>>a;
    if(a>0)
    {
        unsigned long long t[a];
        t[0]=1;
        t[1]=1;
        for(int i=2; i<a; i++)
        {
            t[i]=t[i-1]+t[i-2];
            if(t[i]<t[i-1])
            {
                cout<<""ERROR"";
                return 0;
            }
        }
        for(int i=0; i<a; i++)
            cout<<t[i]<<' ';
    }
    else
    {
        cout<<""ERROR"";
        return 0;
    }
}
"
D5rR8c82,z2,Imxantek,C++,Tuesday 19th of December 2023 01:26:57 AM CDT,"#include <iostream>
#include <algorithm>
using namespace std;
int main()
{
    int n, k;
    cin>>n>>k;
    if(n<=50 and k<=50 and n>=k and k>=1 and n>=1)
    {
        n++;
        unsigned long long t[n+1][n+1]{0};
        for(int i=0; i<=n; i++)
        {
            t[i][0]=1;
            t[i][i-1]=1;
        }
        for(int i=1; i<=n; i++)
        {
            for(int j=1; j<i-1; j++)
                t[i][j]=t[i-1][j-1]+t[i-1][j];
        }
        for(int i=0; i<=n; i++)
        {
            for(int j=0; j<i; j++)
                cout<<t[i][j]<<' ';
            cout<<endl;
        }
        cout<<t[n][k];
    }
    else
        cout<<""ERROR"";
}
"
uK83gLRJ,z1,Imxantek,C++,Tuesday 19th of December 2023 01:26:20 AM CDT,"#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <ctime>
#include <algorithm>
using namespace std;
int main()
{
    srand( time( NULL ) );
    int n;
    cin>>n;
    int t[n][n];
    for(int i=0; i<n; i++)
    {
        for(int j=0; j<n; j++)
        {
            t[i][j]=10;
        }
    }
    for(int i=0; i<n; i++)
    {
        for(int j=0; j<=i; j++)
        {
            t[i][j]=rand()%10;
            cout<<t[i][j]<<' ';
        }
        cout<<endl;
    }
    for(int i=n-1; i>=0; i--)
    {
        for(int j=0; j<n; j++)
        {
            t[i][j]+=min(t[i+1][j], t[i+1][j+1]);
        }
    }
    for(int i=0; i<n; i++)
    {
        for(int j=0; j<=i; j++)
        {
            cout<<t[i][j]<<' ';
        }
        cout<<endl;
    }
    cout<<t[0][0];
}
"
3d53bbfZ,BDB,Arrow974,Java,Tuesday 19th of December 2023 12:53:00 AM CDT,Salut BDB :) 
gGMrNgA7,Nigerian scammers [19-12-1/2023],bombaires,AIMMS,Tuesday 19th of December 2023 12:48:02 AM CDT,"<a href=""mailto:christoherwray11@gmail.com"">christoherwray11@gmail.com</a>
<a href=""mailto:ch.r.i.sto.h.e.rwr.a.y.1.1@gmail.com"">ch.r.i.sto.h.e.rwr.a.y.1.1@gmail.com</a>
<a href=""mailto:c.h.r.i.stoh.e.r.w.r.ay1.1@gmail.com"">c.h.r.i.stoh.e.r.w.r.ay1.1@gmail.com</a>
<a href=""mailto:c.h.ri.s.toh.erw.r.ay11@gmail.com"">c.h.ri.s.toh.erw.r.ay11@gmail.com</a>
<a href=""mailto:c.h.rist.o.h.er.wr.a.y.11@gmail.com"">c.h.rist.o.h.er.wr.a.y.11@gmail.com</a>
<a href=""mailto:ch.r.is.t.o.her.wra.y.1.1@gmail.com"">ch.r.is.t.o.her.wra.y.1.1@gmail.com</a>
<a href=""mailto:c.hr.ist.oherwray11@gmail.com"">c.hr.ist.oherwray11@gmail.com</a>
<a href=""mailto:c.hr.i.stoh.er.w.r.a.y1.1@gmail.com"">c.hr.i.stoh.er.w.r.a.y1.1@gmail.com</a>
<a href=""mailto:chri.s.toherw.r.ay11@gmail.com"">chri.s.toherw.r.ay11@gmail.com</a>
<a href=""mailto:chri.s.to.her.w.ray1.1@gmail.com"">chri.s.to.her.w.ray1.1@gmail.com</a>
<a href=""mailto:c.h.r.i.s.t.ohe.r.w.ray1.1@gmail.com"">c.h.r.i.s.t.ohe.r.w.ray1.1@gmail.com</a>
<a href=""mailto:ch.ri.s.t.o.herwr.a.y1.1@gmail.com"">ch.ri.s.t.o.herwr.a.y1.1@gmail.com</a>
<a href=""mailto:c.hri.s.tohe.r.w.ray.11@gmail.com"">c.hri.s.tohe.r.w.ray.11@gmail.com</a>
<a href=""mailto:ch.ris.to.he.r.wr.a.y.11@gmail.com"">ch.ris.to.he.r.wr.a.y.11@gmail.com</a>
<a href=""mailto:chris.t.oh.er.wr.ay1.1@gmail.com"">chris.t.oh.er.wr.ay1.1@gmail.com</a>
<a href=""mailto:c.h.r.i.s.t.o.he.rw.ra.y11@gmail.com"">c.h.r.i.s.t.o.he.rw.ra.y11@gmail.com</a>
<a href=""mailto:ch.r.isto.he.rw.ray1.1@gmail.com"">ch.r.isto.he.rw.ray1.1@gmail.com</a>
<a href=""mailto:c.hris.tohe.rw.r.ay11@gmail.com"">c.hris.tohe.rw.r.ay11@gmail.com</a>
<a href=""mailto:c.hr.ist.oh.e.r.w.ray1.1@gmail.com"">c.hr.ist.oh.e.r.w.ray1.1@gmail.com</a>
<a href=""mailto:chr.i.s.to.h.er.w.ray.1.1@gmail.com"">chr.i.s.to.h.er.w.ray.1.1@gmail.com</a>
<a href=""mailto:chri.st.oh.e.r.wr.ay.11@gmail.com"">chri.st.oh.e.r.wr.ay.11@gmail.com</a>
<a href=""mailto:c.h.r.i.st.oher.wray11@gmail.com"">c.h.r.i.st.oher.wray11@gmail.com</a>
<a href=""mailto:chr.is.t.o.he.rw.r.a.y1.1@gmail.com"">chr.is.t.o.he.rw.r.a.y1.1@gmail.com</a>
<a href=""mailto:c.h.r.i.stoherwr.a.y.11@gmail.com"">c.h.r.i.stoherwr.a.y.11@gmail.com</a>
<a href=""mailto:c.h.r.is.t.oh.e.r.wray11@gmail.com"">c.h.r.is.t.oh.e.r.wray11@gmail.com</a>
<a href=""mailto:ch.r.i.s.to.h.erwray11@gmail.com"">ch.r.i.s.to.h.erwray11@gmail.com</a>
<a href=""mailto:chr.i.s.t.ohe.r.wra.y.11@gmail.com"">chr.i.s.t.ohe.r.wra.y.11@gmail.com</a>
<a href=""mailto:c.hristo.he.r.wray11@gmail.com"">c.hristo.he.r.wray11@gmail.com</a>
<a href=""mailto:chr.i.st.o.he.rwra.y.11@gmail.com"">chr.i.st.o.he.rwra.y.11@gmail.com</a>
<a href=""mailto:chr.i.s.t.oh.e.rw.r.a.y.11@gmail.com"">chr.i.s.t.oh.e.rw.r.a.y.11@gmail.com</a>
<a href=""mailto:c.hr.ist.oherwra.y.11@gmail.com"">c.hr.ist.oherwra.y.11@gmail.com</a>
<a href=""mailto:c.hri.sto.he.rw.ray11@gmail.com"">c.hri.sto.he.rw.ray11@gmail.com</a>
<a href=""mailto:ch.risto.h.er.wr.ay11@gmail.com"">ch.risto.h.er.wr.ay11@gmail.com</a>
<a href=""mailto:ch.ris.t.oher.wray11@gmail.com"">ch.ris.t.oher.wray11@gmail.com</a>
<a href=""mailto:ch.ri.s.to.h.er.wra.y.1.1@gmail.com"">ch.ri.s.to.h.er.wra.y.1.1@gmail.com</a>
<a href=""mailto:chr.i.stoh.er.w.r.a.y.1.1@gmail.com"">chr.i.stoh.er.w.r.a.y.1.1@gmail.com</a>
<a href=""mailto:ch.r.i.st.o.h.e.r.w.r.a.y11@gmail.com"">ch.r.i.st.o.h.e.r.w.r.a.y11@gmail.com</a>
<a href=""mailto:c.h.ris.t.o.h.e.rw.r.ay11@gmail.com"">c.h.ris.t.o.h.e.rw.r.ay11@gmail.com</a>
<a href=""mailto:c.h.r.isto.h.e.r.w.ra.y1.1@gmail.com"">c.h.r.isto.h.e.r.w.ra.y1.1@gmail.com</a>
<a href=""mailto:chri.sto.her.wray11@gmail.com"">chri.sto.her.wray11@gmail.com</a>
<a href=""mailto:c.hristoh.er.wray.11@gmail.com"">c.hristoh.er.wray.11@gmail.com</a>
<a href=""mailto:chr.istoh.e.r.w.ray.11@gmail.com"">chr.istoh.e.r.w.ray.11@gmail.com</a>
<a href=""mailto:c.hristoh.erw.ray.1.1@gmail.com"">c.hristoh.erw.ray.1.1@gmail.com</a>
<a href=""mailto:chr.isto.herw.ra.y.11@gmail.com"">chr.isto.herw.ra.y.11@gmail.com</a>
<a href=""mailto:chr.i.stohe.rw.ra.y.11@gmail.com"">chr.i.stohe.rw.ra.y.11@gmail.com</a>
<a href=""mailto:ch.r.istoher.wray.11@gmail.com"">ch.r.istoher.wray.11@gmail.com</a>
<a href=""mailto:ch.r.i.st.oh.e.r.w.ray11@gmail.com"">ch.r.i.st.oh.e.r.w.ray11@gmail.com</a>
<a href=""mailto:chr.i.s.tohe.rwr.ay.1.1@gmail.com"">chr.i.s.tohe.rwr.ay.1.1@gmail.com</a>
<a href=""mailto:ch.r.isto.h.e.r.w.ra.y.1.1@gmail.com"">ch.r.isto.h.e.r.w.ra.y.1.1@gmail.com</a>
<a href=""mailto:chr.i.stoher.wr.a.y.11@gmail.com"">chr.i.stoher.wr.a.y.11@gmail.com</a>
<a href=""mailto:chri.s.t.o.h.erw.ray1.1@gmail.com"">chri.s.t.o.h.erw.ray1.1@gmail.com</a>
<a href=""mailto:c.h.r.i.stoh.erwr.a.y.11@gmail.com"">c.h.r.i.stoh.erwr.a.y.11@gmail.com</a>
<a href=""mailto:c.h.r.is.toh.e.r.w.r.a.y1.1@gmail.com"">c.h.r.is.toh.e.r.w.r.a.y1.1@gmail.com</a>
<a href=""mailto:ch.ri.s.t.o.h.er.wr.ay.1.1@gmail.com"">ch.ri.s.t.o.h.er.wr.ay.1.1@gmail.com</a>
<a href=""mailto:ch.r.i.st.o.herwr.ay11@gmail.com"">ch.r.i.st.o.herwr.ay11@gmail.com</a>
<a href=""mailto:ch.risto.he.r.w.ra.y11@gmail.com"">ch.risto.he.r.w.ra.y11@gmail.com</a>
<a href=""mailto:ch.ris.t.o.herw.r.a.y.1.1@gmail.com"">ch.ris.t.o.herw.r.a.y.1.1@gmail.com</a>
<a href=""mailto:c.hr.i.stohe.rwr.a.y1.1@gmail.com"">c.hr.i.stohe.rwr.a.y1.1@gmail.com</a>
<a href=""mailto:c.hris.t.oh.e.rwr.a.y11@gmail.com"">c.hris.t.oh.e.rwr.a.y11@gmail.com</a>
<a href=""mailto:ch.rist.oherw.ray.1.1@gmail.com"">ch.rist.oherw.ray.1.1@gmail.com</a>
<a href=""mailto:c.hri.st.oh.e.rw.ra.y1.1@gmail.com"">c.hri.st.oh.e.rw.ra.y1.1@gmail.com</a>
<a href=""mailto:ch.r.is.t.ohe.rw.ray1.1@gmail.com"">ch.r.is.t.ohe.rw.ray1.1@gmail.com</a>
<a href=""mailto:chr.ist.oh.e.r.w.ra.y.11@gmail.com"">chr.ist.oh.e.r.w.ra.y.11@gmail.com</a>
<a href=""mailto:c.hri.s.t.oh.e.rw.ray.1.1@gmail.com"">c.hri.s.t.oh.e.rw.ray.1.1@gmail.com</a>
<a href=""mailto:c.h.ris.to.herwra.y11@gmail.com"">c.h.ris.to.herwra.y11@gmail.com</a>
<a href=""mailto:c.hristo.h.erwr.a.y11@gmail.com"">c.hristo.h.erwr.a.y11@gmail.com</a>
<a href=""mailto:chr.i.st.oher.wr.a.y.1.1@gmail.com"">chr.i.st.oher.wr.a.y.1.1@gmail.com</a>
<a href=""mailto:c.hr.ist.o.herwr.ay11@gmail.com"">c.hr.ist.o.herwr.ay11@gmail.com</a>
<a href=""mailto:ch.ri.sto.he.r.w.r.ay1.1@gmail.com"">ch.ri.sto.he.r.w.r.ay1.1@gmail.com</a>
<a href=""mailto:c.h.r.i.stohe.rw.ra.y.11@gmail.com"">c.h.r.i.stohe.rw.ra.y.11@gmail.com</a>
<a href=""mailto:christoherw.ra.y1.1@gmail.com"">christoherw.ra.y1.1@gmail.com</a>
<a href=""mailto:chri.s.t.o.h.er.wray1.1@gmail.com"">chri.s.t.o.h.er.wray1.1@gmail.com</a>
<a href=""mailto:chris.tohe.rwr.a.y.1.1@gmail.com"">chris.tohe.rwr.a.y.1.1@gmail.com</a>
<a href=""mailto:ch.ri.s.t.o.he.rw.r.a.y.11@gmail.com"">ch.ri.s.t.o.he.rw.r.a.y.11@gmail.com</a>
<a href=""mailto:chri.s.toher.wra.y.11@gmail.com"">chri.s.toher.wra.y.11@gmail.com</a>
<a href=""mailto:ch.r.i.s.toh.e.r.wr.a.y11@gmail.com"">ch.r.i.s.toh.e.r.wr.a.y11@gmail.com</a>
<a href=""mailto:c.hri.s.to.h.e.r.wr.a.y1.1@gmail.com"">c.hri.s.to.h.e.r.wr.a.y1.1@gmail.com</a>
<a href=""mailto:chris.toherw.ray1.1@gmail.com"">chris.toherw.ray1.1@gmail.com</a>
<a href=""mailto:ch.r.is.toh.e.rwr.ay1.1@gmail.com"">ch.r.is.toh.e.rwr.ay1.1@gmail.com</a>
<a href=""mailto:ch.r.i.s.to.h.e.r.w.r.ay11@gmail.com"">ch.r.i.s.to.h.e.r.w.r.ay11@gmail.com</a>
<a href=""mailto:ch.r.i.s.t.o.h.e.r.w.r.a.y11@gmail.com"">ch.r.i.s.t.o.h.e.r.w.r.a.y11@gmail.com</a>
<a href=""mailto:c.h.r.i.st.oherw.r.a.y1.1@gmail.com"">c.h.r.i.st.oherw.r.a.y1.1@gmail.com</a>
<a href=""mailto:ch.ri.s.t.o.he.rw.ra.y1.1@gmail.com"">ch.ri.s.t.o.he.rw.ra.y1.1@gmail.com</a>
<a href=""mailto:chr.i.sto.he.rw.r.ay.1.1@gmail.com"">chr.i.sto.he.rw.r.ay.1.1@gmail.com</a>
<a href=""mailto:chr.isto.her.w.r.a.y.1.1@gmail.com"">chr.isto.her.w.r.a.y.1.1@gmail.com</a>
<a href=""mailto:ch.r.i.st.oh.e.r.wray1.1@gmail.com"">ch.r.i.st.oh.e.r.wray1.1@gmail.com</a>
<a href=""mailto:c.hr.istohe.rw.ra.y1.1@gmail.com"">c.hr.istohe.rw.ra.y1.1@gmail.com</a>
<a href=""mailto:c.hr.i.sto.he.rwra.y1.1@gmail.com"">c.hr.i.sto.he.rwra.y1.1@gmail.com</a>
<a href=""mailto:ch.ris.t.oh.e.rw.ra.y1.1@gmail.com"">ch.ris.t.oh.e.rw.ra.y1.1@gmail.com</a>
<a href=""mailto:ch.ri.st.o.h.er.w.ray11@gmail.com"">ch.ri.st.o.h.er.w.ray11@gmail.com</a>
<a href=""mailto:c.hr.i.sto.herw.r.a.y11@gmail.com"">c.hr.i.sto.herw.r.a.y11@gmail.com</a>
<a href=""mailto:ch.r.ist.oh.e.r.wr.ay11@gmail.com"">ch.r.ist.oh.e.r.wr.ay11@gmail.com</a>
<a href=""mailto:c.hris.t.o.h.er.w.ray.11@gmail.com"">c.hris.t.o.h.er.w.ray.11@gmail.com</a>
<a href=""mailto:c.hr.isto.he.rw.r.a.y1.1@gmail.com"">c.hr.isto.he.rw.r.a.y1.1@gmail.com</a>
<a href=""mailto:c.hr.i.sto.he.r.w.ray.1.1@gmail.com"">c.hr.i.sto.he.r.w.ray.1.1@gmail.com</a>
<a href=""mailto:c.h.r.ist.o.he.rwr.ay.11@gmail.com"">c.h.r.ist.o.he.rwr.ay.11@gmail.com</a>
<a href=""mailto:chr.i.sto.he.rw.ra.y11@gmail.com"">chr.i.sto.he.rw.ra.y11@gmail.com</a>
<a href=""mailto:ch.r.i.s.tohe.r.wr.ay1.1@gmail.com"">ch.r.i.s.tohe.r.wr.ay1.1@gmail.com</a>
<a href=""mailto:c.hri.st.o.he.rw.ray.11@gmail.com"">c.hri.st.o.he.rw.ray.11@gmail.com</a>
<a href=""mailto:ch.r.ist.o.h.e.r.w.r.ay1.1@gmail.com"">ch.r.ist.o.h.e.r.w.r.ay1.1@gmail.com</a>
<a href=""mailto:c.hrist.ohe.r.wra.y1.1@gmail.com"">c.hrist.ohe.r.wra.y1.1@gmail.com</a>
<a href=""mailto:c.h.ris.toh.er.w.r.ay.1.1@gmail.com"">c.h.ris.toh.er.w.r.ay.1.1@gmail.com</a>
<a href=""mailto:c.h.ris.to.her.w.r.ay11@gmail.com"">c.h.ris.to.her.w.r.ay11@gmail.com</a>
<a href=""mailto:c.h.r.is.toher.w.r.ay.1.1@gmail.com"">c.h.r.is.toher.w.r.ay.1.1@gmail.com</a>
<a href=""mailto:chri.s.t.oh.e.r.wra.y.1.1@gmail.com"">chri.s.t.oh.e.r.wra.y.1.1@gmail.com</a>
<a href=""mailto:ch.r.is.t.o.her.w.ray1.1@gmail.com"">ch.r.is.t.o.her.w.ray1.1@gmail.com</a>
<a href=""mailto:chr.ist.o.h.e.rwr.ay.11@gmail.com"">chr.ist.o.h.e.rwr.ay.11@gmail.com</a>
<a href=""mailto:c.h.ri.s.toh.er.wr.a.y1.1@gmail.com"">c.h.ri.s.toh.er.wr.a.y1.1@gmail.com</a>
<a href=""mailto:ch.r.i.sto.he.r.wray11@gmail.com"">ch.r.i.sto.he.r.wray11@gmail.com</a>
<a href=""mailto:c.hr.i.s.to.her.wr.ay1.1@gmail.com"">c.hr.i.s.to.her.wr.ay1.1@gmail.com</a>
<a href=""mailto:c.h.r.istoh.e.r.w.ra.y1.1@gmail.com"">c.h.r.istoh.e.r.w.ra.y1.1@gmail.com</a>
<a href=""mailto:c.h.r.i.stoh.er.w.r.a.y11@gmail.com"">c.h.r.i.stoh.er.w.r.a.y11@gmail.com</a>
<a href=""mailto:chr.i.st.o.he.rw.ra.y1.1@gmail.com"">chr.i.st.o.he.rw.ra.y1.1@gmail.com</a>
<a href=""mailto:ch.r.i.st.ohe.rw.r.a.y.1.1@gmail.com"">ch.r.i.st.ohe.rw.r.a.y.1.1@gmail.com</a>
<a href=""mailto:c.hristoh.e.r.wray1.1@gmail.com"">c.hristoh.e.r.wray1.1@gmail.com</a>
<a href=""mailto:c.hr.i.s.to.herwr.ay1.1@gmail.com"">c.hr.i.s.to.herwr.ay1.1@gmail.com</a>
<a href=""mailto:c.hri.st.oherw.r.ay11@gmail.com"">c.hri.st.oherw.r.ay11@gmail.com</a>
<a href=""mailto:c.hr.is.tohe.r.w.r.a.y11@gmail.com"">c.hr.is.tohe.r.w.r.a.y11@gmail.com</a>
<a href=""mailto:ch.r.i.st.o.h.er.w.r.a.y.11@gmail.com"">ch.r.i.st.o.h.er.w.r.a.y.11@gmail.com</a>
<a href=""mailto:c.hr.is.to.h.e.r.w.r.a.y1.1@gmail.com"">c.hr.is.to.h.e.r.w.r.a.y1.1@gmail.com</a>
<a href=""mailto:c.h.ri.st.oh.e.rwra.y1.1@gmail.com"">c.h.ri.st.oh.e.rwra.y1.1@gmail.com</a>
<a href=""mailto:c.hr.isto.he.rwra.y1.1@gmail.com"">c.hr.isto.he.rwra.y1.1@gmail.com</a>
<a href=""mailto:c.hristo.herw.ray.11@gmail.com"">c.hristo.herw.ray.11@gmail.com</a>
<a href=""mailto:c.hri.s.toh.erwray1.1@gmail.com"">c.hri.s.toh.erwray1.1@gmail.com</a>
<a href=""mailto:chris.to.he.rw.r.a.y11@gmail.com"">chris.to.he.rw.r.a.y11@gmail.com</a>
<a href=""mailto:ch.r.istoh.e.r.wr.ay11@gmail.com"">ch.r.istoh.e.r.wr.ay11@gmail.com</a>
<a href=""mailto:ch.ri.s.t.o.her.wr.ay.11@gmail.com"">ch.ri.s.t.o.her.wr.ay.11@gmail.com</a>
<a href=""mailto:chr.istohe.r.wr.ay.11@gmail.com"">chr.istohe.r.wr.ay.11@gmail.com</a>
<a href=""mailto:chris.toh.er.w.ray1.1@gmail.com"">chris.toh.er.w.ray1.1@gmail.com</a>
<a href=""mailto:c.hr.is.t.o.h.e.r.w.r.a.y.1.1@gmail.com"">c.hr.is.t.o.h.e.r.w.r.a.y.1.1@gmail.com</a>
<a href=""mailto:c.h.r.i.sto.her.w.ra.y.11@gmail.com"">c.h.r.i.sto.her.w.ra.y.11@gmail.com</a>
<a href=""mailto:ch.ristohe.r.wr.ay1.1@gmail.com"">ch.ristohe.r.wr.ay1.1@gmail.com</a>
<a href=""mailto:c.hr.i.s.tohe.rwr.ay1.1@gmail.com"">c.hr.i.s.tohe.rwr.ay1.1@gmail.com</a>
<a href=""mailto:chr.i.st.ohe.r.w.r.ay.1.1@gmail.com"">chr.i.st.ohe.r.w.r.ay.1.1@gmail.com</a>
<a href=""mailto:ch.r.istoherwr.ay11@gmail.com"">ch.r.istoherwr.ay11@gmail.com</a>
<a href=""mailto:c.hri.stoh.er.w.r.a.y1.1@gmail.com"">c.hri.stoh.er.w.r.a.y1.1@gmail.com</a>
<a href=""mailto:christohe.rw.r.ay.1.1@gmail.com"">christohe.rw.r.ay.1.1@gmail.com</a>
<a href=""mailto:c.hr.i.s.to.herw.ra.y.1.1@gmail.com"">c.hr.i.s.to.herw.ra.y.1.1@gmail.com</a>
<a href=""mailto:c.hr.i.stoh.e.rw.ra.y.11@gmail.com"">c.hr.i.stoh.e.rw.ra.y.11@gmail.com</a>
<a href=""mailto:c.hr.i.st.o.herw.r.a.y.1.1@gmail.com"">c.hr.i.st.o.herw.r.a.y.1.1@gmail.com</a>
<a href=""mailto:ch.r.i.sto.h.e.r.w.r.ay1.1@gmail.com"">ch.r.i.sto.h.e.r.w.r.ay1.1@gmail.com</a>
<a href=""mailto:c.hr.i.st.ohe.rw.ra.y1.1@gmail.com"">c.hr.i.st.ohe.rw.ra.y1.1@gmail.com</a>
<a href=""mailto:ch.ris.toh.erw.ra.y11@gmail.com"">ch.ris.toh.erw.ra.y11@gmail.com</a>
<a href=""mailto:ch.r.is.toherwr.a.y1.1@gmail.com"">ch.r.is.toherwr.a.y1.1@gmail.com</a>
<a href=""mailto:c.hr.i.stoh.er.w.ray11@gmail.com"">c.hr.i.stoh.er.w.ray11@gmail.com</a>
<a href=""mailto:ch.ri.stoherwray1.1@gmail.com"">ch.ri.stoherwray1.1@gmail.com</a>
<a href=""mailto:c.h.ris.to.he.rwra.y.1.1@gmail.com"">c.h.ris.to.he.rwra.y.1.1@gmail.com</a>
<a href=""mailto:ch.r.is.toh.e.rw.r.ay11@gmail.com"">ch.r.is.toh.e.rw.r.ay11@gmail.com</a>
<a href=""mailto:c.h.r.isto.he.rwr.ay.11@gmail.com"">c.h.r.isto.he.rwr.ay.11@gmail.com</a>
<a href=""mailto:c.h.r.i.s.t.ohe.r.wr.ay.1.1@gmail.com"">c.h.r.i.s.t.ohe.r.wr.ay.1.1@gmail.com</a>
<a href=""mailto:chr.isto.h.e.r.w.ray.11@gmail.com"">chr.isto.h.e.r.w.ray.11@gmail.com</a>
<a href=""mailto:c.hr.i.stohe.r.w.ra.y11@gmail.com"">c.hr.i.stohe.r.w.ra.y11@gmail.com</a>
<a href=""mailto:c.hri.st.ohe.r.w.ra.y11@gmail.com"">c.hri.st.ohe.r.w.ra.y11@gmail.com</a>
<a href=""mailto:c.h.r.i.st.oherw.ra.y.1.1@gmail.com"">c.h.r.i.st.oherw.ra.y.1.1@gmail.com</a>
<a href=""mailto:c.h.ristoherwr.a.y.11@gmail.com"">c.h.ristoherwr.a.y.11@gmail.com</a>
<a href=""mailto:ch.ris.toh.er.wr.a.y11@gmail.com"">ch.ris.toh.er.wr.a.y11@gmail.com</a>
<a href=""mailto:c.hr.i.s.t.oher.wray11@gmail.com"">c.hr.i.s.t.oher.wray11@gmail.com</a>
<a href=""mailto:c.h.r.ist.oh.e.rwr.ay11@gmail.com"">c.h.r.ist.oh.e.rwr.ay11@gmail.com</a>
<a href=""mailto:c.h.ri.s.toh.e.r.wr.a.y11@gmail.com"">c.h.ri.s.toh.e.r.wr.a.y11@gmail.com</a>
<a href=""mailto:ch.ri.s.t.o.he.r.wra.y.1.1@gmail.com"">ch.ri.s.t.o.he.r.wra.y.1.1@gmail.com</a>
<a href=""mailto:chri.st.o.h.er.wra.y11@gmail.com"">chri.st.o.h.er.wra.y11@gmail.com</a>
<a href=""mailto:c.h.r.is.to.h.e.rwray.11@gmail.com"">c.h.r.is.to.h.e.rwray.11@gmail.com</a>
<a href=""mailto:ch.ri.s.t.o.her.wray.1.1@gmail.com"">ch.ri.s.t.o.her.wray.1.1@gmail.com</a>
<a href=""mailto:ch.r.is.to.herwra.y.1.1@gmail.com"">ch.r.is.to.herwra.y.1.1@gmail.com</a>
<a href=""mailto:c.hr.is.t.o.her.w.r.ay11@gmail.com"">c.hr.is.t.o.her.w.r.ay11@gmail.com</a>
<a href=""mailto:c.h.ri.stohe.rwr.a.y.1.1@gmail.com"">c.h.ri.stohe.rwr.a.y.1.1@gmail.com</a>
<a href=""mailto:chr.i.s.t.o.herw.r.a.y.11@gmail.com"">chr.i.s.t.o.herw.r.a.y.11@gmail.com</a>
<a href=""mailto:c.hr.is.t.oh.e.r.wra.y.1.1@gmail.com"">c.hr.is.t.oh.e.r.wra.y.1.1@gmail.com</a>
<a href=""mailto:ch.ri.st.o.h.e.rwr.a.y11@gmail.com"">ch.ri.st.o.h.e.rwr.a.y11@gmail.com</a>
<a href=""mailto:ch.ris.t.oh.er.w.ray.1.1@gmail.com"">ch.ris.t.oh.er.w.ray.1.1@gmail.com</a>
<a href=""mailto:ch.ri.sto.her.wray1.1@gmail.com"">ch.ri.sto.her.wray1.1@gmail.com</a>
<a href=""mailto:chri.st.ohe.rwray.11@gmail.com"">chri.st.ohe.rwray.11@gmail.com</a>
<a href=""mailto:c.hr.is.to.h.e.rwra.y.11@gmail.com"">c.hr.is.to.h.e.rwra.y.11@gmail.com</a>
<a href=""mailto:chr.i.st.o.he.rw.ray1.1@gmail.com"">chr.i.st.o.he.rw.ray1.1@gmail.com</a>
<a href=""mailto:chr.is.t.oh.e.r.wr.a.y1.1@gmail.com"">chr.is.t.oh.e.r.wr.a.y1.1@gmail.com</a>
<a href=""mailto:c.h.r.is.t.oher.w.r.ay11@gmail.com"">c.h.r.is.t.oher.w.r.ay11@gmail.com</a>
<a href=""mailto:ch.ris.toherwray1.1@gmail.com"">ch.ris.toherwray1.1@gmail.com</a>
<a href=""mailto:c.hri.s.t.o.herwr.a.y.11@gmail.com"">c.hri.s.t.o.herwr.a.y.11@gmail.com</a>
<a href=""mailto:c.hr.is.to.herw.r.ay.11@gmail.com"">c.hr.is.to.herw.r.ay.11@gmail.com</a>
<a href=""mailto:c.h.r.is.to.her.w.r.a.y11@gmail.com"">c.h.r.is.to.her.w.r.a.y11@gmail.com</a>
<a href=""mailto:ch.rist.oher.w.r.a.y1.1@gmail.com"">ch.rist.oher.w.r.a.y1.1@gmail.com</a>
<a href=""mailto:c.h.r.isto.herwr.ay.1.1@gmail.com"">c.h.r.isto.herwr.ay.1.1@gmail.com</a>
<a href=""mailto:chr.i.sto.h.e.rw.r.a.y1.1@gmail.com"">chr.i.sto.h.e.rw.r.a.y1.1@gmail.com</a>
<a href=""mailto:c.hristoh.e.rw.r.a.y.11@gmail.com"">c.hristoh.e.rw.r.a.y.11@gmail.com</a>
<a href=""mailto:chr.is.to.h.e.r.w.ray.1.1@gmail.com"">chr.is.to.h.e.r.w.ray.1.1@gmail.com</a>
<a href=""mailto:chr.i.stoh.e.r.wr.ay.11@gmail.com"">chr.i.stoh.e.r.wr.ay.11@gmail.com</a>
<a href=""mailto:ch.ri.stohe.r.wr.a.y.1.1@gmail.com"">ch.ri.stohe.r.wr.a.y.1.1@gmail.com</a>
<a href=""mailto:c.hr.i.st.o.her.wr.ay.11@gmail.com"">c.hr.i.st.o.her.wr.ay.11@gmail.com</a>
<a href=""mailto:c.h.ris.to.h.e.r.wr.a.y.11@gmail.com"">c.h.ris.to.h.e.r.wr.a.y.11@gmail.com</a>
<a href=""mailto:ch.ris.t.o.herw.ray.11@gmail.com"">ch.ris.t.o.herw.ray.11@gmail.com</a>
<a href=""mailto:ch.ri.s.to.h.erw.ra.y.1.1@gmail.com"">ch.ri.s.to.h.erw.ra.y.1.1@gmail.com</a>
<a href=""mailto:chr.i.s.tohe.r.w.r.a.y1.1@gmail.com"">chr.i.s.tohe.r.w.r.a.y1.1@gmail.com</a>
<a href=""mailto:ch.risto.h.e.r.w.r.a.y.1.1@gmail.com"">ch.risto.h.e.r.w.r.a.y.1.1@gmail.com</a>
<a href=""mailto:c.hrist.o.h.e.rw.ray.11@gmail.com"">c.hrist.o.h.e.rw.ray.11@gmail.com</a>
<a href=""mailto:ch.ristoh.e.rw.ra.y11@gmail.com"">ch.ristoh.e.rw.ra.y11@gmail.com</a>
<a href=""mailto:chr.i.s.t.oh.e.r.wr.a.y.1.1@gmail.com"">chr.i.s.t.oh.e.r.wr.a.y.1.1@gmail.com</a>
<a href=""mailto:c.h.ristohe.rw.ray.1.1@gmail.com"">c.h.ristohe.rw.ray.1.1@gmail.com</a>
<a href=""mailto:c.hristo.h.er.w.ra.y.1.1@gmail.com"">c.hristo.h.er.w.ra.y.1.1@gmail.com</a>
<a href=""mailto:c.h.r.ist.o.h.erw.ra.y1.1@gmail.com"">c.h.r.ist.o.h.erw.ra.y1.1@gmail.com</a>
<a href=""mailto:ch.r.i.st.oherwray.1.1@gmail.com"">ch.r.i.st.oherwray.1.1@gmail.com</a>
<a href=""mailto:chris.t.ohe.r.wr.a.y1.1@gmail.com"">chris.t.ohe.r.wr.a.y1.1@gmail.com</a>
<a href=""mailto:mrbrightlee97@gmail.com"">mrbrightlee97@gmail.com</a>
<a href=""mailto:mr.brigh.tl.ee.97@gmail.com"">mr.brigh.tl.ee.97@gmail.com</a>
<a href=""mailto:m.rbri.ghtlee9.7@gmail.com"">m.rbri.ghtlee9.7@gmail.com</a>
<a href=""mailto:m.rbri.g.h.tlee.9.7@gmail.com"">m.rbri.g.h.tlee.9.7@gmail.com</a>
<a href=""mailto:mr.b.rig.h.tl.e.e.97@gmail.com"">mr.b.rig.h.tl.e.e.97@gmail.com</a>
<a href=""mailto:mrb.r.ight.l.ee.97@gmail.com"">mrb.r.ight.l.ee.97@gmail.com</a>
<a href=""mailto:m.r.bri.g.h.tl.ee97@gmail.com"">m.r.bri.g.h.tl.ee97@gmail.com</a>
<a href=""mailto:mrb.r.ig.ht.l.e.e9.7@gmail.com"">mrb.r.ig.ht.l.e.e9.7@gmail.com</a>
<a href=""mailto:mr.b.r.ightle.e9.7@gmail.com"">mr.b.r.ightle.e9.7@gmail.com</a>
<a href=""mailto:mr.b.r.ig.ht.l.e.e.97@gmail.com"">mr.b.r.ig.ht.l.e.e.97@gmail.com</a>
<a href=""mailto:mr.b.ri.ght.l.ee.9.7@gmail.com"">mr.b.ri.ght.l.ee.9.7@gmail.com</a>
<a href=""mailto:mr.b.right.le.e97@gmail.com"">mr.b.right.le.e97@gmail.com</a>
<a href=""mailto:m.rbrigh.tl.ee97@gmail.com"">m.rbrigh.tl.ee97@gmail.com</a>
<a href=""mailto:mr.br.ig.htl.ee.9.7@gmail.com"">mr.br.ig.htl.ee.9.7@gmail.com</a>
<a href=""mailto:m.r.bri.g.h.tl.e.e97@gmail.com"">m.r.bri.g.h.tl.e.e97@gmail.com</a>
<a href=""mailto:mrbr.ight.l.e.e.97@gmail.com"">mrbr.ight.l.e.e.97@gmail.com</a>
<a href=""mailto:mr.b.r.i.g.h.tl.ee.97@gmail.com"">mr.b.r.i.g.h.tl.ee.97@gmail.com</a>
<a href=""mailto:mrbright.lee.9.7@gmail.com"">mrbright.lee.9.7@gmail.com</a>
<a href=""mailto:m.r.b.ri.gh.t.le.e.97@gmail.com"">m.r.b.ri.gh.t.le.e.97@gmail.com</a>
<a href=""mailto:m.rbr.igh.t.l.e.e97@gmail.com"">m.rbr.igh.t.l.e.e97@gmail.com</a>
<a href=""mailto:m.rb.r.ightle.e.9.7@gmail.com"">m.rb.r.ightle.e.9.7@gmail.com</a>
<a href=""mailto:m.r.b.r.igh.tle.e97@gmail.com"">m.r.b.r.igh.tle.e97@gmail.com</a>
<a href=""mailto:m.r.b.ri.ght.le.e9.7@gmail.com"">m.r.b.ri.ght.le.e9.7@gmail.com</a>
<a href=""mailto:m.rb.r.ight.l.e.e97@gmail.com"">m.rb.r.ight.l.e.e97@gmail.com</a>
<a href=""mailto:m.r.b.ri.ght.le.e.97@gmail.com"">m.r.b.ri.ght.le.e.97@gmail.com</a>
<a href=""mailto:m.r.b.r.i.g.h.t.le.e.97@gmail.com"">m.r.b.r.i.g.h.t.le.e.97@gmail.com</a>
<a href=""mailto:m.rbri.ghtl.e.e97@gmail.com"">m.rbri.ghtl.e.e97@gmail.com</a>
<a href=""mailto:m.r.bri.ghtl.e.e9.7@gmail.com"">m.r.bri.ghtl.e.e9.7@gmail.com</a>
<a href=""mailto:m.rbr.i.gh.t.l.ee97@gmail.com"">m.rbr.i.gh.t.l.ee97@gmail.com</a>
<a href=""mailto:m.r.b.r.igh.tlee9.7@gmail.com"">m.r.b.r.igh.tlee9.7@gmail.com</a>
<a href=""mailto:m.rb.r.i.g.h.t.lee97@gmail.com"">m.rb.r.i.g.h.t.lee97@gmail.com</a>
<a href=""mailto:mr.b.r.i.g.h.t.le.e97@gmail.com"">mr.b.r.i.g.h.t.le.e97@gmail.com</a>
<a href=""mailto:mrb.ri.g.htl.e.e9.7@gmail.com"">mrb.ri.g.htl.e.e9.7@gmail.com</a>
<a href=""mailto:mrb.ri.gh.tlee.9.7@gmail.com"">mrb.ri.gh.tlee.9.7@gmail.com</a>
<a href=""mailto:m.rb.r.igh.t.l.ee97@gmail.com"">m.rb.r.igh.t.l.ee97@gmail.com</a>
<a href=""mailto:mr.b.r.i.g.ht.le.e9.7@gmail.com"">mr.b.r.i.g.ht.le.e9.7@gmail.com</a>
<a href=""mailto:m.rb.rig.h.t.le.e.9.7@gmail.com"">m.rb.rig.h.t.le.e.9.7@gmail.com</a>
<a href=""mailto:mr.br.i.gh.tl.e.e9.7@gmail.com"">mr.br.i.gh.tl.e.e9.7@gmail.com</a>
<a href=""mailto:mr.b.r.igh.t.l.ee97@gmail.com"">mr.b.r.igh.t.l.ee97@gmail.com</a>
<a href=""mailto:m.r.b.ri.ght.lee.97@gmail.com"">m.r.b.ri.ght.lee.97@gmail.com</a>
<a href=""mailto:m.r.b.ri.gh.t.lee.9.7@gmail.com"">m.r.b.ri.gh.t.lee.9.7@gmail.com</a>
<a href=""mailto:m.rbrightl.ee.97@gmail.com"">m.rbrightl.ee.97@gmail.com</a>
<a href=""mailto:m.r.bri.gh.tlee9.7@gmail.com"">m.r.bri.gh.tlee9.7@gmail.com</a>
<a href=""mailto:m.r.bri.g.ht.lee.97@gmail.com"">m.r.bri.g.ht.lee.97@gmail.com</a>
<a href=""mailto:m.r.b.r.ig.htl.ee9.7@gmail.com"">m.r.b.r.ig.htl.ee9.7@gmail.com</a>
<a href=""mailto:m.rbri.g.ht.le.e9.7@gmail.com"">m.rbri.g.ht.le.e9.7@gmail.com</a>
<a href=""mailto:mrb.rig.h.tlee.9.7@gmail.com"">mrb.rig.h.tlee.9.7@gmail.com</a>
<a href=""mailto:m.rb.ri.ghtle.e.9.7@gmail.com"">m.rb.ri.ghtle.e.9.7@gmail.com</a>
<a href=""mailto:m.r.br.igh.t.l.e.e97@gmail.com"">m.r.br.igh.t.l.e.e97@gmail.com</a>
<a href=""mailto:mr.b.ri.gh.tl.ee.9.7@gmail.com"">mr.b.ri.gh.tl.ee.9.7@gmail.com</a>
<a href=""mailto:m.r.br.ight.l.e.e.9.7@gmail.com"">m.r.br.ight.l.e.e.9.7@gmail.com</a>
<a href=""mailto:m.r.b.ri.g.h.t.le.e9.7@gmail.com"">m.r.b.ri.g.h.t.le.e9.7@gmail.com</a>
<a href=""mailto:mrbr.i.gh.tl.ee.97@gmail.com"">mrbr.i.gh.tl.ee.97@gmail.com</a>
<a href=""mailto:mrb.r.ight.lee97@gmail.com"">mrb.r.ight.lee97@gmail.com</a>
<a href=""mailto:mrb.r.ig.ht.l.ee.9.7@gmail.com"">mrb.r.ig.ht.l.ee.9.7@gmail.com</a>
<a href=""mailto:mrb.right.l.ee97@gmail.com"">mrb.right.l.ee97@gmail.com</a>
<a href=""mailto:m.rbr.i.ghtle.e97@gmail.com"">m.rbr.i.ghtle.e97@gmail.com</a>
<a href=""mailto:mrbr.ight.l.ee.97@gmail.com"">mrbr.ight.l.ee.97@gmail.com</a>
<a href=""mailto:m.r.brightl.ee.97@gmail.com"">m.r.brightl.ee.97@gmail.com</a>
<a href=""mailto:m.rbrig.htl.e.e.97@gmail.com"">m.rbrig.htl.e.e.97@gmail.com</a>
<a href=""mailto:m.rbr.ightl.e.e97@gmail.com"">m.rbr.ightl.e.e97@gmail.com</a>
<a href=""mailto:mr.b.rig.h.t.l.ee.97@gmail.com"">mr.b.rig.h.t.l.ee.97@gmail.com</a>
<a href=""mailto:m.r.br.ig.h.tl.e.e.97@gmail.com"">m.r.br.ig.h.tl.e.e.97@gmail.com</a>
<a href=""mailto:m.rbr.ight.le.e.9.7@gmail.com"">m.rbr.ight.le.e.9.7@gmail.com</a>
<a href=""mailto:m.r.b.rig.h.tl.e.e.97@gmail.com"">m.r.b.rig.h.tl.e.e.97@gmail.com</a>
<a href=""mailto:m.rb.r.ightlee.9.7@gmail.com"">m.rb.r.ightlee.9.7@gmail.com</a>
<a href=""mailto:m.r.br.i.g.h.t.l.e.e97@gmail.com"">m.r.br.i.g.h.t.l.e.e97@gmail.com</a>
<a href=""mailto:m.rb.r.i.ght.l.ee9.7@gmail.com"">m.rb.r.i.ght.l.ee9.7@gmail.com</a>
<a href=""mailto:m.r.b.r.ig.htl.e.e.97@gmail.com"">m.r.b.r.ig.htl.e.e.97@gmail.com</a>
<a href=""mailto:mr.b.r.i.g.h.tlee.97@gmail.com"">mr.b.r.i.g.h.tlee.97@gmail.com</a>
<a href=""mailto:mr.b.r.i.g.htle.e97@gmail.com"">mr.b.r.i.g.htle.e97@gmail.com</a>
<a href=""mailto:m.r.br.ightl.e.e97@gmail.com"">m.r.br.ightl.e.e97@gmail.com</a>
<a href=""mailto:m.rbri.gh.tl.e.e.9.7@gmail.com"">m.rbri.gh.tl.e.e.9.7@gmail.com</a>
<a href=""mailto:mr.b.ri.ght.le.e.9.7@gmail.com"">mr.b.ri.ght.le.e.9.7@gmail.com</a>
<a href=""mailto:mrbr.ig.htlee.97@gmail.com"">mrbr.ig.htlee.97@gmail.com</a>
<a href=""mailto:m.rb.r.i.g.h.tl.e.e.97@gmail.com"">m.rb.r.i.g.h.tl.e.e.97@gmail.com</a>
<a href=""mailto:m.rbr.i.ght.le.e97@gmail.com"">m.rbr.i.ght.le.e97@gmail.com</a>
<a href=""mailto:m.rbr.ig.h.t.le.e9.7@gmail.com"">m.rbr.ig.h.t.le.e9.7@gmail.com</a>
<a href=""mailto:mrb.r.ightl.ee.97@gmail.com"">mrb.r.ightl.ee.97@gmail.com</a>
<a href=""mailto:m.r.b.rig.htl.ee.9.7@gmail.com"">m.r.b.rig.htl.ee.9.7@gmail.com</a>
<a href=""mailto:mrb.rig.h.t.le.e9.7@gmail.com"">mrb.rig.h.t.le.e9.7@gmail.com</a>
<a href=""mailto:m.rb.ri.g.ht.l.ee.9.7@gmail.com"">m.rb.ri.g.ht.l.ee.9.7@gmail.com</a>
<a href=""mailto:mr.b.ri.ght.l.e.e.97@gmail.com"">mr.b.ri.ght.l.e.e.97@gmail.com</a>
<a href=""mailto:mr.b.ri.gh.tle.e9.7@gmail.com"">mr.b.ri.gh.tle.e9.7@gmail.com</a>
<a href=""mailto:m.rbri.g.h.tle.e.9.7@gmail.com"">m.rbri.g.h.tle.e.9.7@gmail.com</a>
<a href=""mailto:mrbr.ig.h.t.l.e.e.9.7@gmail.com"">mrbr.ig.h.t.l.e.e.9.7@gmail.com</a>
<a href=""mailto:mr.br.ig.htlee9.7@gmail.com"">mr.br.ig.htlee9.7@gmail.com</a>
<a href=""mailto:m.rbri.g.h.t.lee97@gmail.com"">m.rbri.g.h.t.lee97@gmail.com</a>
<a href=""mailto:mrbr.igh.tle.e9.7@gmail.com"">mrbr.igh.tle.e9.7@gmail.com</a>
<a href=""mailto:mr.bri.gh.tl.e.e.9.7@gmail.com"">mr.bri.gh.tl.e.e.9.7@gmail.com</a>
<a href=""mailto:m.r.b.r.ight.l.e.e97@gmail.com"">m.r.b.r.ight.l.e.e97@gmail.com</a>
<a href=""mailto:mrbr.i.g.ht.l.e.e.9.7@gmail.com"">mrbr.i.g.ht.l.e.e.9.7@gmail.com</a>
<a href=""mailto:mr.brig.h.t.l.e.e9.7@gmail.com"">mr.brig.h.t.l.e.e9.7@gmail.com</a>
<a href=""mailto:m.r.b.r.i.g.htle.e9.7@gmail.com"">m.r.b.r.i.g.htle.e9.7@gmail.com</a>
<a href=""mailto:m.r.brig.htl.ee.9.7@gmail.com"">m.r.brig.htl.ee.9.7@gmail.com</a>
<a href=""mailto:m.rbr.i.gh.tl.ee97@gmail.com"">m.rbr.i.gh.tl.ee97@gmail.com</a>
<a href=""mailto:m.r.brig.h.tl.e.e.9.7@gmail.com"">m.r.brig.h.tl.e.e.9.7@gmail.com</a>
<a href=""mailto:mr.b.ri.g.htlee97@gmail.com"">mr.b.ri.g.htlee97@gmail.com</a>
<a href=""mailto:m.rb.r.i.g.h.t.l.e.e9.7@gmail.com"">m.rb.r.i.g.h.t.l.e.e9.7@gmail.com</a>
<a href=""mailto:mr.bri.g.h.tl.e.e.97@gmail.com"">mr.bri.g.h.tl.e.e.97@gmail.com</a>
<a href=""mailto:mr.b.ri.gh.t.l.e.e.9.7@gmail.com"">mr.b.ri.gh.t.l.e.e.9.7@gmail.com</a>
<a href=""mailto:m.rb.r.i.g.htl.e.e9.7@gmail.com"">m.rb.r.i.g.htl.e.e9.7@gmail.com</a>
<a href=""mailto:m.r.b.ri.g.ht.le.e.9.7@gmail.com"">m.r.b.ri.g.ht.le.e.9.7@gmail.com</a>
<a href=""mailto:m.r.brig.ht.l.e.e.9.7@gmail.com"">m.r.brig.ht.l.e.e.9.7@gmail.com</a>
<a href=""mailto:mr.brig.h.tlee9.7@gmail.com"">mr.brig.h.tlee9.7@gmail.com</a>
<a href=""mailto:m.rbrig.h.t.le.e.97@gmail.com"">m.rbrig.h.t.le.e.97@gmail.com</a>
<a href=""mailto:m.r.br.i.gh.tlee97@gmail.com"">m.r.br.i.gh.tlee97@gmail.com</a>
<a href=""mailto:mrbr.i.g.h.tlee.9.7@gmail.com"">mrbr.i.g.h.tlee.9.7@gmail.com</a>
<a href=""mailto:mr.b.rig.h.t.l.e.e97@gmail.com"">mr.b.rig.h.t.l.e.e97@gmail.com</a>
<a href=""mailto:m.rb.r.i.g.h.t.lee9.7@gmail.com"">m.rb.r.i.g.h.t.lee9.7@gmail.com</a>
<a href=""mailto:mr.b.rig.h.tlee97@gmail.com"">mr.b.rig.h.tlee97@gmail.com</a>
<a href=""mailto:m.rbri.ghtlee.97@gmail.com"">m.rbri.ghtlee.97@gmail.com</a>
<a href=""mailto:mr.brig.htlee97@gmail.com"">mr.brig.htlee97@gmail.com</a>
<a href=""mailto:m.rb.r.i.g.h.tle.e.9.7@gmail.com"">m.rb.r.i.g.h.tle.e.9.7@gmail.com</a>
<a href=""mailto:mrbri.ght.l.ee.9.7@gmail.com"">mrbri.ght.l.ee.9.7@gmail.com</a>
<a href=""mailto:mr.br.i.g.h.tl.e.e.9.7@gmail.com"">mr.br.i.g.h.tl.e.e.9.7@gmail.com</a>
<a href=""mailto:mr.br.i.g.ht.le.e.9.7@gmail.com"">mr.br.i.g.ht.le.e.9.7@gmail.com</a>
<a href=""mailto:m.rbr.i.gh.tle.e.9.7@gmail.com"">m.rbr.i.gh.tle.e.9.7@gmail.com</a>
<a href=""mailto:m.rbri.gh.t.le.e97@gmail.com"">m.rbri.gh.t.le.e97@gmail.com</a>
<a href=""mailto:m.rb.ri.ghtl.e.e.97@gmail.com"">m.rb.ri.ghtl.e.e.97@gmail.com</a>
<a href=""mailto:mrbrigh.tl.e.e.9.7@gmail.com"">mrbrigh.tl.e.e.9.7@gmail.com</a>
<a href=""mailto:mr.brig.h.tle.e9.7@gmail.com"">mr.brig.h.tle.e9.7@gmail.com</a>
<a href=""mailto:m.r.b.r.i.g.h.t.l.ee.9.7@gmail.com"">m.r.b.r.i.g.h.t.l.ee.9.7@gmail.com</a>
<a href=""mailto:mrbr.ig.ht.lee.9.7@gmail.com"">mrbr.ig.ht.lee.9.7@gmail.com</a>
<a href=""mailto:m.rb.r.igh.t.l.e.e9.7@gmail.com"">m.rb.r.igh.t.l.e.e9.7@gmail.com</a>
<a href=""mailto:m.r.br.i.g.ht.l.e.e.9.7@gmail.com"">m.r.br.i.g.ht.l.e.e.9.7@gmail.com</a>
<a href=""mailto:m.rb.r.igh.t.l.e.e.97@gmail.com"">m.rb.r.igh.t.l.e.e.97@gmail.com</a>
<a href=""mailto:m.rb.rig.h.tl.ee.9.7@gmail.com"">m.rb.rig.h.tl.ee.9.7@gmail.com</a>
<a href=""mailto:mrbr.igh.tl.e.e.9.7@gmail.com"">mrbr.igh.tl.e.e.9.7@gmail.com</a>
<a href=""mailto:m.r.brig.htl.ee.97@gmail.com"">m.r.brig.htl.ee.97@gmail.com</a>
<a href=""mailto:mr.bri.g.htl.e.e9.7@gmail.com"">mr.bri.g.htl.e.e9.7@gmail.com</a>
<a href=""mailto:m.r.bri.g.ht.le.e.9.7@gmail.com"">m.r.bri.g.ht.le.e.9.7@gmail.com</a>
<a href=""mailto:m.r.b.ri.gh.tle.e97@gmail.com"">m.r.b.ri.gh.tle.e97@gmail.com</a>
<a href=""mailto:m.rbr.i.g.htlee97@gmail.com"">m.rbr.i.g.htlee97@gmail.com</a>
<a href=""mailto:m.r.br.ig.h.t.l.ee9.7@gmail.com"">m.r.br.ig.h.t.l.ee9.7@gmail.com</a>
<a href=""mailto:mrbr.ig.h.tl.ee.9.7@gmail.com"">mrbr.ig.h.tl.ee.9.7@gmail.com</a>
<a href=""mailto:m.r.br.i.gh.tlee.97@gmail.com"">m.r.br.i.gh.tlee.97@gmail.com</a>
<a href=""mailto:m.rbrightl.e.e9.7@gmail.com"">m.rbrightl.e.e9.7@gmail.com</a>
<a href=""mailto:m.r.br.i.g.htl.e.e.9.7@gmail.com"">m.r.br.i.g.htl.e.e.9.7@gmail.com</a>
<a href=""mailto:mrbright.le.e9.7@gmail.com"">mrbright.le.e9.7@gmail.com</a>
<a href=""mailto:mrb.r.ig.htl.ee9.7@gmail.com"">mrb.r.ig.htl.ee9.7@gmail.com</a>
<a href=""mailto:mr.brig.h.tl.ee.97@gmail.com"">mr.brig.h.tl.ee.97@gmail.com</a>
<a href=""mailto:m.rbr.i.g.htl.e.e9.7@gmail.com"">m.rbr.i.g.htl.e.e9.7@gmail.com</a>
<a href=""mailto:m.r.bri.ghtlee9.7@gmail.com"">m.r.bri.ghtlee9.7@gmail.com</a>
<a href=""mailto:m.r.brig.h.t.le.e.97@gmail.com"">m.r.brig.h.t.le.e.97@gmail.com</a>
<a href=""mailto:mr.br.i.g.h.t.lee9.7@gmail.com"">mr.br.i.g.h.t.lee9.7@gmail.com</a>
<a href=""mailto:m.r.b.r.ig.h.t.lee.97@gmail.com"">m.r.b.r.ig.h.t.lee.97@gmail.com</a>
<a href=""mailto:m.rb.r.ig.ht.l.e.e.97@gmail.com"">m.rb.r.ig.ht.l.e.e.97@gmail.com</a>
<a href=""mailto:m.r.b.r.ig.h.t.l.ee.9.7@gmail.com"">m.r.b.r.ig.h.t.l.ee.9.7@gmail.com</a>
<a href=""mailto:m.r.brig.h.t.lee.9.7@gmail.com"">m.r.brig.h.t.lee.9.7@gmail.com</a>
<a href=""mailto:m.r.b.right.le.e97@gmail.com"">m.r.b.right.le.e97@gmail.com</a>
<a href=""mailto:mr.b.r.i.gh.t.l.e.e9.7@gmail.com"">mr.b.r.i.gh.t.l.e.e9.7@gmail.com</a>
<a href=""mailto:mrb.ri.g.ht.lee.9.7@gmail.com"">mrb.ri.g.ht.lee.9.7@gmail.com</a>
<a href=""mailto:m.r.bri.g.h.tl.ee.9.7@gmail.com"">m.r.bri.g.h.tl.ee.9.7@gmail.com</a>
<a href=""mailto:m.r.b.ri.gh.tlee.97@gmail.com"">m.r.b.ri.gh.tlee.97@gmail.com</a>
<a href=""mailto:m.rb.r.igh.tlee.9.7@gmail.com"">m.rb.r.igh.tlee.9.7@gmail.com</a>
<a href=""mailto:m.r.br.i.g.htlee9.7@gmail.com"">m.r.br.i.g.htlee9.7@gmail.com</a>
<a href=""mailto:mrb.r.i.g.h.t.le.e.97@gmail.com"">mrb.r.i.g.h.t.le.e.97@gmail.com</a>
<a href=""mailto:mr.b.ri.gh.t.le.e97@gmail.com"">mr.b.ri.gh.t.le.e97@gmail.com</a>
<a href=""mailto:mrbr.i.ght.le.e.9.7@gmail.com"">mrbr.i.ght.le.e.9.7@gmail.com</a>
<a href=""mailto:m.r.bri.g.htlee.97@gmail.com"">m.r.bri.g.htlee.97@gmail.com</a>
<a href=""mailto:m.r.b.r.i.ghtl.e.e.9.7@gmail.com"">m.r.b.r.i.ghtl.e.e.9.7@gmail.com</a>
<a href=""mailto:m.rb.r.i.ght.l.ee.97@gmail.com"">m.rb.r.i.ght.l.ee.97@gmail.com</a>
<a href=""mailto:mrb.rig.h.t.l.ee.97@gmail.com"">mrb.rig.h.t.l.ee.97@gmail.com</a>
<a href=""mailto:mrbr.i.g.htl.ee.9.7@gmail.com"">mrbr.i.g.htl.ee.9.7@gmail.com</a>
<a href=""mailto:m.r.b.r.i.gh.tl.e.e.9.7@gmail.com"">m.r.b.r.i.gh.tl.e.e.9.7@gmail.com</a>
<a href=""mailto:mr.bri.gh.t.l.e.e.97@gmail.com"">mr.bri.gh.t.l.e.e.97@gmail.com</a>
<a href=""mailto:m.rb.righ.t.lee97@gmail.com"">m.rb.righ.t.lee97@gmail.com</a>
<a href=""mailto:m.rb.ri.gh.tl.ee.9.7@gmail.com"">m.rb.ri.gh.tl.ee.9.7@gmail.com</a>
<a href=""mailto:mr.brig.htle.e.97@gmail.com"">mr.brig.htle.e.97@gmail.com</a>
<a href=""mailto:m.rbr.igh.tl.ee9.7@gmail.com"">m.rbr.igh.tl.ee9.7@gmail.com</a>
<a href=""mailto:m.rbr.i.g.h.t.l.ee.97@gmail.com"">m.rbr.i.g.h.t.l.ee.97@gmail.com</a>
<a href=""mailto:mr.b.r.ightl.e.e.9.7@gmail.com"">mr.b.r.ightl.e.e.9.7@gmail.com</a>
<a href=""mailto:m.rbr.i.gh.tl.ee.97@gmail.com"">m.rbr.i.gh.tl.ee.97@gmail.com</a>
<a href=""mailto:m.r.br.i.gh.t.lee9.7@gmail.com"">m.r.br.i.gh.t.lee9.7@gmail.com</a>
<a href=""mailto:mrb.r.igh.t.l.e.e9.7@gmail.com"">mrb.r.igh.t.l.e.e9.7@gmail.com</a>
<a href=""mailto:m.rbrig.h.tl.e.e97@gmail.com"">m.rbrig.h.tl.e.e97@gmail.com</a>
<a href=""mailto:mr.b.rightle.e9.7@gmail.com"">mr.b.rightle.e9.7@gmail.com</a>
<a href=""mailto:m.r.br.i.g.h.tle.e.97@gmail.com"">m.r.br.i.g.h.tle.e.97@gmail.com</a>
<a href=""mailto:m.rbrig.htl.e.e97@gmail.com"">m.rbrig.htl.e.e97@gmail.com</a>
<a href=""mailto:m.rb.ri.g.htle.e.9.7@gmail.com"">m.rb.ri.g.htle.e.9.7@gmail.com</a>
<a href=""mailto:m.rbri.g.htl.ee.9.7@gmail.com"">m.rbri.g.htl.ee.9.7@gmail.com</a>
<a href=""mailto:m.r.br.i.ght.l.e.e9.7@gmail.com"">m.r.br.i.ght.l.e.e9.7@gmail.com</a>
<a href=""mailto:m.r.br.i.g.ht.l.ee97@gmail.com"">m.r.br.i.g.ht.l.ee97@gmail.com</a>
<a href=""mailto:m.rbr.igh.t.le.e.97@gmail.com"">m.rbr.igh.t.le.e.97@gmail.com</a>
<a href=""mailto:m.rbr.ightlee97@gmail.com"">m.rbr.ightlee97@gmail.com</a>
<a href=""mailto:m.r.bri.g.h.tlee9.7@gmail.com"">m.r.bri.g.h.tlee9.7@gmail.com</a>
<a href=""mailto:mr.brightl.ee97@gmail.com"">mr.brightl.ee97@gmail.com</a>
<a href=""mailto:m.rb.r.ightl.e.e97@gmail.com"">m.rb.r.ightl.e.e97@gmail.com</a>
<a href=""mailto:m.rb.ri.gh.tle.e97@gmail.com"">m.rb.ri.gh.tle.e97@gmail.com</a>
<a href=""mailto:mr.bri.g.h.t.le.e.9.7@gmail.com"">mr.bri.g.h.t.le.e.9.7@gmail.com</a>
<a href=""mailto:m.rbr.i.g.htl.ee.9.7@gmail.com"">m.rbr.i.g.htl.ee.9.7@gmail.com</a>
<a href=""mailto:mrb.r.i.gh.t.lee9.7@gmail.com"">mrb.r.i.gh.t.lee9.7@gmail.com</a>
<a href=""mailto:mrbrigh.tlee.97@gmail.com"">mrbrigh.tlee.97@gmail.com</a>
<a href=""mailto:mr.b.rig.h.t.le.e.97@gmail.com"">mr.b.rig.h.t.le.e.97@gmail.com</a>
<a href=""mailto:m.r.brig.ht.lee.9.7@gmail.com"">m.r.brig.ht.lee.9.7@gmail.com</a>
<a href=""mailto:m.rb.rightle.e9.7@gmail.com"">m.rb.rightle.e9.7@gmail.com</a>
<a href=""mailto:m.rb.ri.gh.t.le.e9.7@gmail.com"">m.rb.ri.gh.t.le.e9.7@gmail.com</a>
<a href=""mailto:mrbr.i.g.htl.e.e.97@gmail.com"">mrbr.i.g.htl.e.e.97@gmail.com</a>
<a href=""mailto:mrbr.ig.h.tl.ee.97@gmail.com"">mrbr.ig.h.tl.ee.97@gmail.com</a>
<a href=""mailto:m.r.br.ightle.e9.7@gmail.com"">m.r.br.ightle.e9.7@gmail.com</a>"
0L6jfHge,Untitled,soyl,Java,Tuesday 19th of December 2023 12:40:14 AM CDT,"import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.simple.SimpleJdbcInsert;
import org.springframework.stereotype.Repository;
import ru.yandex.practicum.filmorate.errorException.ValidationException;
import ru.yandex.practicum.filmorate.errorException.exception.EntityNotFoundException;
import ru.yandex.practicum.filmorate.model.Film;
import ru.yandex.practicum.filmorate.model.impl.Genre;
import ru.yandex.practicum.filmorate.model.impl.Mpa;
import ru.yandex.practicum.filmorate.storage.film.FilmStorage;
import ru.yandex.practicum.filmorate.storage.film.dao.genre.GenreStorage;
import ru.yandex.practicum.filmorate.storage.film.dao.like.LikeStorage;


import javax.validation.constraints.NotNull;
import java.time.LocalDate;
import java.util.*;
import java.util.stream.Collectors;

@Slf4j
@Repository
@AllArgsConstructor
@Qualifier(""filmDbStorage"")
public class FilmDbStorage implements FilmStorage {

    @NotNull
    private final JdbcTemplate jdbcTemplate;
    private final LikeStorage likeStorage;
    private final GenreStorage genreStorage;

    private Map<String, Object> filmToMap(Film film) {
        Map<String, Object> values = new HashMap<>();
        values.put(""name"", film.getName());
        values.put(""description"", film.getDescription());
        values.put(""release_date"", film.getReleaseDate());
        values.put(""duration"", film.getDuration());
        values.put(""rate"", film.getRate());
        values.put(""mpa_id"", film.getMpa().getId());
        return values;
    }


    @NotNull
    private RowMapper<Film> mapToFilm() {
        return (rs, rowNum) -> {
            Film film = new Film();
            film.setId(rs.getInt(""id""));
            film.setName(rs.getString(""name""));
            film.setDescription(rs.getString(""description""));
            film.setReleaseDate(rs.getDate(""release_date"").toLocalDate());
            film.setDuration(rs.getInt(""duration""));
            film.setRate(rs.getInt(likeStorage.getFilmLikesById(rs.getInt(""id"")).size()));

            Mpa mpa = new Mpa
                    (rs.getInt(""mpa_id""), rs.getString(""name""));
                    film.setMpa(mpa);

            film.setGenres(genreStorage.getGenresByFilmId(film.getId()));
            return film;
        };
    }

    @Override
    public Film addFilm(Film film) {
        checkFilm(film);

        SimpleJdbcInsert simpleJdbcInsert = new SimpleJdbcInsert(jdbcTemplate)
                .withTableName(""Film"")
                .usingGeneratedKeyColumns(""id"");
        Number key = simpleJdbcInsert.executeAndReturnKey(filmToMap(film));
        film.setId((Integer) key);
        if (film.getGenres() != null && !film.getGenres().isEmpty()) {
            String query = ""INSERT INTO Genre_Film (film_id, genre_id) VALUES (?,?)"";
            for (Genre genre : film.getGenres()) {
                jdbcTemplate.update(query, film.getId(), genre.getId());
            }
        }
        log.debug(""Film with ID {} saved."", film.getId());
        return film;
    }

    @Override
    public void deleteFilm(Integer id) {
        String query = ""DELETE FROM Film WHERE id=?"";
        int deleteResult = jdbcTemplate.update(query, id);
        if (deleteResult > 0) {
            log.info(""Film with ID {} has been removed."", id);
        } else {
            log.info(""Film with ID {} has not been deleted."", id);
        }
    }

    @Override
    public Film updateFilm(Film film) {
        checkFilm(film);

        int filmId = film.getId();
        String query = ""UPDATE Film SET name=?, description=?, release_date=?, duration=?, mpa_id=? "" +
                ""WHERE id=?"";
        int updateResult = jdbcTemplate.update(query,
                film.getName(),
                film.getDescription(),
                film.getReleaseDate(),
                film.getDuration(),
                film.getMpa().getId(),
                filmId);
        if (updateResult > 0) {
            log.debug(""Film with ID {} has been updated."", filmId);
        } else {
            throw new EntityNotFoundException(""Film not found for update by ID="" + filmId);
        }
        if (film.getGenres() != null) {
            String querySql = ""DELETE FROM Genre_Film WHERE film_id =?"";
            jdbcTemplate.update(querySql, filmId);
            String insertGenreQuery = ""INSERT INTO Genre_Film (film_id, genre_id) VALUES (?, ?)"";
            film.setGenres(film.getGenres()
                    .stream()
                    .distinct()
                    .collect(Collectors.toList()));
            for (Genre genre : film.getGenres()) {
                jdbcTemplate.update(insertGenreQuery, filmId, genre.getId());
            }
        } else {
            String querySql = ""DELETE FROM Genre_Film WHERE film_id =?"";
            jdbcTemplate.update(querySql, filmId);
        }
        return film;
    }

    @Override
    public List<Film> getAllFilms() {
        String query = ""SELECT id, name, description, release_date, duration, rate, mpa_id FROM Film"";
        return jdbcTemplate.query(query, mapToFilm());
    }

    @Override
    public Film getFilmId(Integer id) {
        try {
            String query = ""SELECT id, name, description, release_date, duration, rate, "" +
                    ""mpa_id FROM Film WHERE id = ?"";
            return jdbcTemplate.queryForObject(query, mapToFilm(), id);
        } catch (EmptyResultDataAccessException e) {
            throw new EntityNotFoundException(""Film not exist"");
        }
    }

    @Override
    public List<Film> popularFilm(Integer countFilms) {
        String query = ""SELECT f.id, f.name, f.description, f.release_date, f.duration, "" +
                ""f.rate, f.mpa_id, COUNT(lf.user_id) AS likes "" +
                ""FROM Film f "" +
                ""LEFT JOIN Like_Film lf ON f.id = lf.film_id "" +
                ""GROUP BY f.id "" +
                ""ORDER BY likes DESC "" +
                ""LIMIT ?"";

        RowMapper<Film> filmRowMapper = mapToFilm();
        return jdbcTemplate.query(query, filmRowMapper, countFilms);
    }

    private static void checkFilm(Film film) throws ValidationException {
        if (film.getName().isEmpty()) {
            throw new ValidationException(""Название фильма не может быть пустым"");
        }
        if (film.getDescription().length() > 200) {
            throw new ValidationException(""Описание фильма не может превышать 200 символов"");
        }
        if (film.getReleaseDate().isBefore(LocalDate.of(1895, 12, 28))) {
            throw new ValidationException(""Дата релиза не может быть раньше 28 декабря 1895 года"");
        }
        if (film.getDuration() <= 0) {
            throw new ValidationException(""Продолжительность фильма должна быть положительной"");
        }

    }
}
"
Q4T4YUze,Advent of code 2023 day 19 part2,hhoppe,Python,Tuesday 19th of December 2023 12:27:52 AM CDT,"def day19_part2(s):
  s_rules, _ = s.split('\n\n')
  rules = {'R': []}
  for line in s_rules.splitlines():
    name, s_rules = line[:-1].split('{')
    rules[name] = s_rules.split(',')

  total = 0
  initial_intervals = {category: (1, 4001) for category in 'xmas'}  # (start, stop).
  stack = [('in', initial_intervals)]

  while stack:
    name, intervals = stack.pop()
    if name == 'A':
      total += math.prod(stop - start for start, stop in intervals.values())
      continue

    for rule in rules[name]:
      if rule.isalpha():
        stack.append((rule, intervals))
        break

      category, op, s_num, label = re.match(r'^(\w)([<>])(\d+):(\w+)$', rule).groups()
      num = int(s_num)
      start, stop = intervals[category]

      if op == '<':
        if start < num:
          stack.append((label, intervals | {category: (start, min(stop, num))}))
        start = max(start, num)
      else:
        if stop > num + 1:
          stack.append((label, intervals | {category: (max(start, num + 1), stop)}))
        stop = min(stop, num + 1)

      if start < stop:
        intervals[category] = start, stop
      else:
        break

  return total"
L7hjvzGY,Untitled,soyl,SQL,Tuesday 19th of December 2023 12:19:04 AM CDT,"
CREATE TABLE IF NOT EXISTS User_Filmorate
(
    id   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email     VARCHAR,
    login     VARCHAR,
    name VARCHAR,
    birthday  DATE
);

CREATE TABLE IF NOT EXISTS Mpa
(
    mpa_id      INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name    VARCHAR
);

CREATE TABLE IF NOT EXISTS Genre
(
    genre_id     INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name   VARCHAR
);

CREATE TABLE IF NOT EXISTS Film
(
    id       INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name     VARCHAR,
    description   VARCHAR,
    release_date  DATE,
    duration      INTEGER,
    rate          INTEGER,
    mpa_id        INTEGER,
    FOREIGN KEY (mpa_id) REFERENCES Mpa(mpa_id) ON DELETE CASCADE

);

CREATE TABLE IF NOT EXISTS Genre_Film
(
    genre_film_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    film_id       INTEGER,
    FOREIGN KEY (film_id) REFERENCES film(id) ON DELETE CASCADE,
    genre_id      INTEGER,
    FOREIGN KEY (genre_id) REFERENCES genre(genre_id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS Like_Film
(
    like_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    film_id INTEGER,
    FOREIGN KEY (film_id) REFERENCES film(id) ON DELETE CASCADE,
    user_id INTEGER
);

CREATE TABLE IF NOT EXISTS Friendship
(
    friendship_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    friend_id     INTEGER,
    user_id       INTEGER,
    FOREIGN KEY (user_id) REFERENCES User_Filmorate(id) ON DELETE CASCADE
);"
SYEemnK4,convert,LegoCats177,Lua,Monday 18th of December 2023 11:54:15 PM CDT,"wait(0.5)
math.randomseed(tick())
local player = game.Players.LocalPlayer
local rekt = {}
local paralyzed = false
local curpoint = nil
local curpart = nil
local finishnum = 1
local zombiemode = false
local zombies = {}
local lastgui = nil
local mouse = player:GetMouse()

function getplr(char)
    local plr = nil
    for i,v in pairs(game.Players:GetChildren()) do
        if v.Character == char then
            plr = v
        end
    end
    return plr
end

function bleed(frick)
    while frick.Parent ~= nil do
    local reeee = coroutine.wrap(function()
    local thing = Instance.new('Part',game.Workspace)
    thing.Size = Vector3.new(0.2,0.2,0.2)
    thing.CFrame = frick.CFrame
    thing.Shape = Enum.PartType.Ball
    thing.CFrame = frick.CFrame
    thing.Transparency = 1
    thing.BrickColor = BrickColor.new('Maroon')
    thing.Material = Enum.Material.SmoothPlastic
    thing.Name = ""Blood""
    thing.CanCollide =false
    local rawrxd = Instance.new('BodyForce',thing)
    rawrxd.Force = frick.CFrame.upVector*(math.random()*2)+Vector3.new(math.random(-5, 5)/10,1.5,0)
    local coru = coroutine.wrap(function()
        wait(0.01)
        rawrxd:Destroy()
    end)
    coru()
    local ree = Instance.new('ParticleEmitter',thing)
    ree.Color = ColorSequence.new({ColorSequenceKeypoint.new(0,Color3.fromRGB(100,0,0)),ColorSequenceKeypoint.new(1,Color3.fromRGB(100,0,0))})
    ree.Size = NumberSequence.new({NumberSequenceKeypoint.new(0,0.1),NumberSequenceKeypoint.new(1,0.1)})
    ree.Texture = 'rbxassetid://867743272'
    ree.Lifetime = NumberRange.new(0.4)
    ree.Rate = 50
    ree.LockedToPart = true
    ree.Speed = NumberRange.new(0, 2)  
    
    thing.Touched:connect(function(tou)
        if tou.Parent and tou.Parent:IsA('Tool') == false and tou.Parent.Parent:FindFirstChildOfClass('Humanoid') == nil and tou.Parent:FindFirstChildOfClass('Humanoid') == nil and tou.Name ~= ""Blood"" and tou.Parent.Name ~= ""Projectile"" and tou.Parent.Name ~= ""big ass knife"" and tou.Parent ~= player.Character and tou.Parent.ClassName ~= ""Accessory"" and tou.Parent.Name ~= ""bitch ass knife"" then
            local pos = Vector3.new(thing.Position.X,(tou.Position.Y+(tou.Size.Y/2))+0.02,thing.Position.Z)
            thing:Destroy()
            if tou.Name == ""BloodPuddle"" then
                local reee = tou.CFrame
                if tou.Transparency > -0.2 then
                    tou.Transparency = tou.Transparency -0.1
                end
                if tou.Size.X < 10 then
                    tou.Size = tou.Size+Vector3.new(0.1,0,0.1)
                    tou.CFrame = reee
                end
            else
                local bloodlol = Instance.new('Part',workspace)
                bloodlol.Size=Vector3.new(1,0.2,1)
                bloodlol.Name = ""BloodPuddle""
                bloodlol.Anchored = true
                bloodlol.CanCollide = false
                bloodlol.Material = Enum.Material.SmoothPlastic
                bloodlol.BrickColor = BrickColor.new('Maroon')
                local cyl = Instance.new('CylinderMesh',bloodlol)
                cyl.Scale = Vector3.new(1,0.1,1)
                bloodlol.CFrame = CFrame.new(pos)
                local coru=coroutine.wrap(function()
                    while bloodlol.Parent ~= nil do
                        if bloodlol.Transparency < 1 then
                            bloodlol.Transparency = bloodlol.Transparency+0.05
                        else
                            bloodlol:Destroy()
                        end
                        wait(0.1)
                    end
                end)
                coru()
            end
        end
    end)
    local coru = coroutine.wrap(function()
        wait(1)
        thing:Destroy()
    end)
    coru()
    end)
    reeee()
    wait()
    end
end

function killz(playa,hitz,kneef,explode,pool,head,charred,override)
    local soundy = false
    local heyy = hitz
    if hitz == ""Right Arm"" then
    local Limb = playa:FindFirstChild(""Right Arm"")
    local ters = playa:FindFirstChild('Torso')
        if Limb and ters then
            if ters:FindFirstChild('Right Shoulder') then ters[""Right Shoulder""]:Destroy() end
            for i,v in pairs(Limb:GetChildren()) do
                if v:IsA('Weld') or v:IsA('Motor6D') or v:IsA('Rotate') then
                    v:Destroy()
                end
            end
            Limb.CFrame = ters.CFrame * CFrame.new(1.5, 0, 0)
            local Joint = Instance.new(""Rotate"")
            Joint.Name = ""RightShoulder""
            Joint.Part0 = ters
            Joint.Part1 = Limb
            Joint.C0 = CFrame.new(1.5, 0.5, 0, 0, 0, 1, 0, 1, 0, -1, -0, -0)
            Joint.C1 = CFrame.new(-0, 0.5, 0, 0, 0, 1, 0, 1, 0, -1, -0, -0)
            Joint.Parent = ters
            if charred and zombiemode == false then 
                Limb.BrickColor = BrickColor.new('Black') 
                local fire = Instance.new('Fire',Limb)
                fire.Heat = 5
                fire.Size = 5
                game:GetService('Debris'):AddItem(fire,2)
                local coru=coroutine.wrap(function()
                    wait(2)
                    for i,v in pairs(Limb:GetChildren()) do
                        if v:IsA('ParticleEmitter') then
                            v:Destroy()
                        end
                    end
                end)
                coru()
            end
            local B = Instance.new(""Part"")
            B.TopSurface = 0
            B.BottomSurface = 0
            B.formFactor = ""Symmetric""
            B.Size = Vector3.new(1, 1, 1)
            B.Transparency = 1
            B.CFrame = Limb.CFrame * CFrame.new(0, -0.5, 0)
            B.Parent = playa
            local W = Instance.new(""Weld"")
            W.Part0 = Limb
            W.Part1 = B
            W.C0 = CFrame.new(0, -0.5, 0)
            W.Parent = Limb
            if kneef then
            local coru = coroutine.wrap(function()
                local uno = Instance.new('Part',workspace)
                    local dos = Instance.new('Part',workspace)
                    uno.CFrame = playa:FindFirstChild(hitz).CFrame
                    dos.CFrame = kneef[""big ass knife""].CFrame
                    local weld = Instance.new('Weld',kneef[""big ass knife""])
                    weld.Part0 = playa:FindFirstChild(hitz)
                    weld.Part1 = kneef[""big ass knife""]
                    weld.C0 = uno.CFrame:toObjectSpace(dos.CFrame)
                    uno:Destroy()
                    dos:Destroy()
                    playa:FindFirstChild(hitz).Anchored = false
                    for i, v in pairs(kneef:GetChildren()) do
                        if v:IsA('BasePart') then
                        v.Anchored = false
                        end
                    end
                    if zombiemode == false or override then
                    wait()
                    end
                    if kneef:FindFirstChild('Grab') and kneef.Grab:FindFirstChildOfClass('BodyVelocity') then
                        kneef.Grab:FindFirstChildOfClass('BodyVelocity'):Destroy()
                    end
                    local bleedpart = Instance.new(""Part"", kneef)
                    bleedpart.CanCollide = false
                    bleedpart.Size = Vector3.new(0.2, 0.2, 0.2)
                    bleedpart.CFrame = kneef[""big ass knife""].CFrame
                    bleedpart.Color = Color3.new(115/225, 115/225, 115/225)
                    bleedpart.Transparency = 1
    
                    local bleedpartweld = Instance.new(""Weld"", kneef[""big ass knife""])
                    bleedpartweld.Part0 = kneef[""big ass knife""]
                    bleedpartweld.Part1 = bleedpart
                    bleedpartweld.C0 = CFrame.new(0,0,0)*CFrame.Angles(math.rad(90),0,0)
                    local coru = coroutine.wrap(function()
                    bleed(bleedpart)
                    end)
                    coru()
                    game:GetService('Debris'):AddItem(bleedpart,2)
            end)
            coru()
            end
        end 
    elseif hitz == ""Left Arm"" then
        local Limb = playa:FindFirstChild(""Left Arm"")
    local ters = playa:FindFirstChild('Torso')
        if Limb and ters then
            if ters:FindFirstChild('Left Shoulder') then ters[""Left Shoulder""]:Destroy() end
            for i,v in pairs(Limb:GetChildren()) do
                if v:IsA('Weld') or v:IsA('Motor6D') or v:IsA('Rotate') then
                    v:Destroy()
                end
            end
            Limb.CFrame = ters.CFrame * CFrame.new(-1.5, 0, 0)
            local Joint = Instance.new(""Rotate"")
            Joint.Name = ""LeftShoulder""
            Joint.Part0 = ters
            Joint.Part1 = Limb
            Joint.C0 = CFrame.new(-1.5, 0.5, 0, -0, -0, -1, 0, 1, 0, 1, 0, 0)
            Joint.C1 = CFrame.new(0, 0.5, 0, -0, -0, -1, 0, 1, 0, 1, 0, 0)
            Joint.Parent = ters
            if charred and zombiemode == false then 
                Limb.BrickColor = BrickColor.new('Black') 
                local fire = Instance.new('Fire',Limb)
                fire.Heat = 5
                fire.Size = 5
                game:GetService('Debris'):AddItem(fire,2)
                local coru=coroutine.wrap(function()
                    wait(2)
                    for i,v in pairs(Limb:GetChildren()) do
                        if v:IsA('ParticleEmitter') then
                            v:Destroy()
                        end
                    end
                end)
                coru()
            end

            local B = Instance.new(""Part"")
            B.TopSurface = 0
            B.BottomSurface = 0
            B.formFactor = ""Symmetric""
            B.Size = Vector3.new(1, 1, 1)
            B.CanCollide = true
            B.Transparency = 1
            B.CFrame = Limb.CFrame * CFrame.new(0, -0.5, 0)
            B.Parent = playa
            local W = Instance.new(""Weld"")
            W.Part0 = ters
            W.Part1 = B
            W.C0 = CFrame.new(0, -0.5, 0)
            W.Parent = Limb
            if kneef then
            local coru = coroutine.wrap(function()
                local uno = Instance.new('Part',workspace)
                    local dos = Instance.new('Part',workspace)
                    uno.CFrame = playa:FindFirstChild(hitz).CFrame
                    dos.CFrame = kneef[""big ass knife""].CFrame
                    local weld = Instance.new('Weld',kneef[""big ass knife""])
                    weld.Part0 = playa:FindFirstChild(hitz)
                    weld.Part1 = kneef[""big ass knife""]
                    weld.C0 = uno.CFrame:toObjectSpace(dos.CFrame)
                    uno:Destroy()
                    dos:Destroy()
                    playa:FindFirstChild(hitz).Anchored = false
                    for i, v in pairs(kneef:GetChildren()) do
                        if v:IsA('BasePart') then
                        v.Anchored = false
                        end
                    end
                    if zombiemode == false or override then
                    wait()
                    end
                    if kneef:FindFirstChild('Grab') and kneef.Grab:FindFirstChildOfClass('BodyVelocity') then
                        kneef.Grab:FindFirstChildOfClass('BodyVelocity'):Destroy()
                    end
                    local bleedpart = Instance.new(""Part"", kneef)
                    bleedpart.CanCollide = false
                    bleedpart.Size = Vector3.new(0.2, 0.2, 0.2)
                    bleedpart.CFrame = kneef[""big ass knife""].CFrame
                    bleedpart.Color = Color3.new(115/225, 115/225, 115/225)
                    bleedpart.Transparency = 1
    
                    local bleedpartweld = Instance.new(""Weld"", kneef[""big ass knife""])
                    bleedpartweld.Part0 = kneef[""big ass knife""]
                    bleedpartweld.Part1 = bleedpart
                    bleedpartweld.C0 = CFrame.new(0,0,0)*CFrame.Angles(math.rad(90),0,0)
                    local coru = coroutine.wrap(function()
                    bleed(bleedpart)
                    end)
                    coru()
                    game:GetService('Debris'):AddItem(bleedpart,2)
            end)
            coru()
            end
        end
    elseif hitz == ""Right Leg"" then
        local Limb = playa:FindFirstChild(""Right Leg"")
    local ters = playa:FindFirstChild('Torso')
        if Limb and ters then
            if ters:FindFirstChild('Right Hip') then ters[""Right Hip""]:Destroy() end
            for i,v in pairs(Limb:GetChildren()) do
                if v:IsA('Weld') or v:IsA('Motor6D') or v:IsA('Rotate') then
                    v:Destroy()
                end
            end
            Limb.CFrame = ters.CFrame * CFrame.new(0.5, -2, 0)
            local Joint = Instance.new(""Rotate"")
            Joint.Name = ""Right Hip""
            Joint.Part0 = ters
            Joint.Part1 = Limb
            Joint.C0 = CFrame.new(0.5, -1, 0, 0, 0, 1, 0, 1, 0, -1, -0, -0)
            Joint.C1 = CFrame.new(0, 1, 0, 0, 0, 1, 0, 1, 0, -1, -0, -0)
            Joint.Parent = ters
            if charred and zombiemode == false then 
                Limb.BrickColor = BrickColor.new('Black') 
                local fire = Instance.new('Fire',Limb)
                fire.Heat = 5
                fire.Size = 5
                game:GetService('Debris'):AddItem(fire,2)
                local coru=coroutine.wrap(function()
                    wait(2)
                    for i,v in pairs(Limb:GetChildren()) do
                        if v:IsA('ParticleEmitter') then
                            v:Destroy()
                        end
                    end
                end)
                coru()
            end
            local B = Instance.new(""Part"")
            B.TopSurface = 0
            B.BottomSurface = 0
            B.formFactor = ""Symmetric""
            B.Size = Vector3.new(1, 1, 1)
            B.Transparency = 1
            B.CFrame = Limb.CFrame * CFrame.new(0, -0.5, 0)
            B.Parent = playa
            local W = Instance.new(""Weld"")
            W.Part0 = Limb
            W.Part1 = B
            W.C0 = CFrame.new(0, -0.5, 0)
            W.Parent = Limb
            if kneef then
            local coru = coroutine.wrap(function()
                local uno = Instance.new('Part',workspace)
                local dos = Instance.new('Part',workspace)
                uno.CFrame = playa:FindFirstChild(hitz).CFrame
                dos.CFrame = kneef[""big ass knife""].CFrame
                local weld = Instance.new('Weld',kneef[""big ass knife""])
                weld.Part0 = playa:FindFirstChild(hitz)
                weld.Part1 = kneef[""big ass knife""]
                weld.C0 = uno.CFrame:toObjectSpace(dos.CFrame)
                uno:Destroy()
                dos:Destroy()
                playa:FindFirstChild(hitz).Anchored = false
                for i, v in pairs(kneef:GetChildren()) do
                    if v:IsA('BasePart') then
                        v.Anchored = false
                        end
                    end
                    if zombiemode == false or override then
                    wait()
                    end
                    if kneef:FindFirstChild('Grab') and kneef.Grab:FindFirstChildOfClass('BodyVelocity') then
                        kneef.Grab:FindFirstChildOfClass('BodyVelocity'):Destroy()
                    end
                    local bleedpart = Instance.new(""Part"", kneef)
                    bleedpart.CanCollide = false
                    bleedpart.Size = Vector3.new(0.2, 0.2, 0.2)
                    bleedpart.CFrame = kneef[""big ass knife""].CFrame
                    bleedpart.Color = Color3.new(115/225, 115/225, 115/225)
                    bleedpart.Transparency = 1
    
                    local bleedpartweld = Instance.new(""Weld"", kneef[""big ass knife""])
                    bleedpartweld.Part0 = kneef[""big ass knife""]
                    bleedpartweld.Part1 = bleedpart
                    bleedpartweld.C0 = CFrame.new(0,0,0)*CFrame.Angles(math.rad(90),0,0)
                    local coru = coroutine.wrap(function()
                    bleed(bleedpart)
                    end)
                    coru()
                    game:GetService('Debris'):AddItem(bleedpart,2)
            end)
            coru()
            end
            if playa then
                table.insert(rekt,playa)
            end
        end
    elseif hitz == ""Left Leg"" then
        local Limb = playa:FindFirstChild(""Left Leg"")
    local ters = playa:FindFirstChild('Torso')
        if Limb and ters then
            if ters:FindFirstChild('Left Hip') then ters[""Left Hip""]:Destroy() end
            for i,v in pairs(Limb:GetChildren()) do
                if v:IsA('Weld') or v:IsA('Motor6D') or v:IsA('Rotate') then
                    v:Destroy()
                end
            end
        Limb.CFrame = ters.CFrame * CFrame.new(0.5, -2, 0)
            Limb.CFrame = ters.CFrame * CFrame.new(-0.5, -2, 0)
            local Joint = Instance.new(""Rotate"")
            Joint.Name = ""LeftHip""
            Joint.Part0 = ters
            Joint.Part1 = Limb
            Joint.C0 = CFrame.new(-0.5, -1, 0, -0, -0, -1, 0, 1, 0, 1, 0, 0)
            Joint.C1 = CFrame.new(-0, 1, 0, -0, -0, -1, 0, 1, 0, 1, 0, 0)
            Joint.Parent = ters
            if charred and zombiemode == false then 
                Limb.BrickColor = BrickColor.new('Black') 
                local fire = Instance.new('Fire',Limb)
                fire.Heat = 5
                fire.Size = 5
                game:GetService('Debris'):AddItem(fire,2)
                local coru=coroutine.wrap(function()
                    wait(2)
                    for i,v in pairs(Limb:GetChildren()) do
                        if v:IsA('ParticleEmitter') then
                            v:Destroy()
                        end
                    end
                end)
                coru()
            end

            local B = Instance.new(""Part"")
            B.TopSurface = 0
            B.BottomSurface = 0
            B.formFactor = ""Symmetric""
            B.Size = Vector3.new(1, 1, 1)
            B.Transparency = 1
            B.CFrame = Limb.CFrame * CFrame.new(0, -0.5, 0)
            B.Parent = playa
            local W = Instance.new(""Weld"")
            W.Part0 = Limb
            W.Part1 = B
            W.C0 = CFrame.new(0, -0.5, 0)
            W.Parent = Limb
            Limb.CanCollide = false
            if kneef then
            local coru = coroutine.wrap(function()
                local uno = Instance.new('Part',workspace)
                    local dos = Instance.new('Part',workspace)
                    uno.CFrame = playa:FindFirstChild(hitz).CFrame
                    dos.CFrame = kneef[""big ass knife""].CFrame
                    local weld = Instance.new('Weld',kneef[""big ass knife""])
                    weld.Part0 = playa:FindFirstChild(hitz)
                    weld.Part1 = kneef[""big ass knife""]
                    weld.C0 = uno.CFrame:toObjectSpace(dos.CFrame)
                    uno:Destroy()
                    dos:Destroy()
                    playa:FindFirstChild(hitz).Anchored = false
                    for i, v in pairs(kneef:GetChildren()) do
                        if v:IsA('BasePart') then
                        v.Anchored = false
                        end
                    end
                    if zombiemode == false or override then
                    wait()
                    end
                    if kneef:FindFirstChild('Grab') and kneef.Grab:FindFirstChildOfClass('BodyVelocity') then
                        kneef.Grab:FindFirstChildOfClass('BodyVelocity'):Destroy()
                    end
                    local bleedpart = Instance.new(""Part"", kneef)
                    bleedpart.CanCollide = false
                    bleedpart.Size = Vector3.new(0.2, 0.2, 0.2)
                    bleedpart.CFrame = kneef[""big ass knife""].CFrame
                    bleedpart.Color = Color3.new(115/225, 115/225, 115/225)
                    bleedpart.Transparency = 1
    
                    local bleedpartweld = Instance.new(""Weld"", kneef[""big ass knife""])
                    bleedpartweld.Part0 = kneef[""big ass knife""]
                    bleedpartweld.Part1 = bleedpart
                    bleedpartweld.C0 = CFrame.new(0,0,0)*CFrame.Angles(math.rad(90),0,0)
                    local coru = coroutine.wrap(function()
                    bleed(bleedpart)
                    end)
                    coru()
                    game:GetService('Debris'):AddItem(bleedpart,2)
            end)
            coru()
            end
            if playa then
                table.insert(rekt,playa)
            end
        end
    elseif playa then
        if finishnum ~= 1 then
            local coru=coroutine.wrap(function()
            player.Character.Head.Psycho.Playing = true
            wait(3)
            player.Character.Head.Psycho.Playing = false
            end)
            coru()
        end
        local playa2 = playa
        playa.Archivable = true
        local playa = playa:Clone()
        playa.Archivable = false
        playa2:Destroy()
        playa.Parent = workspace
        local Gibs = game.Workspace
        local Torso = playa.Torso
        local Head = playa:FindFirstChild(""Head"")
        local function Scan(ch)
        local e
        for e = 1,#ch do
            Scan(ch[e]:GetChildren())
            if (ch[e].ClassName == ""Weld"" and ch[e]:FindFirstChild('Part1') and ch[e].Part1.Name ~= 'Projectile') or ch[e].ClassName == ""Motor6D"" or ch[e].ClassName == ""Rotate"" or (ch[e]:IsA('BasePart') and ch[e].Size == Vector3.new(1, 1, 1)) then
                ch[e]:remove()
            end
        end
        end
    Scan(playa:GetChildren())
        if playa:FindFirstChild('HumanoidRootPart') and (zombiemode == false or override) then
            playa:FindFirstChild('HumanoidRootPart'):Destroy()
        end
        local hum2 = playa:FindFirstChildOfClass(""Humanoid"")
    if zombiemode == true and override == false then
        soundy = true
    end
    if string.sub(hum2.Parent.Name,string.len(hum2.Parent.Name)-8,string.len(hum2.Parent.Name)) ~= ""'s Zombie"" then
        override = true
    end
    if hum2 ~= nil then
        hum2.Name = ""Humanoid2""
        hum2.Health = 0
        if zombiemode == false or override == true then
            table.insert(rekt,hum2.Parent)
        else
            local gyro = Instance.new('BodyGyro',Torso)
            hum2.PlatformStand = false
            for i,v in pairs(hum2.Parent.Torso:GetChildren()) do
                if v:IsA('BodyGyro') then v:Destroy() end
            end
            if playa:FindFirstChild('HumanoidRootPart') then
                hum2.Parent.HumanoidRootPart.CFrame = hum2.Parent.Torso.CFrame
                local weldcrucial = Instance.new('Weld',hum2.Parent.HumanoidRootPart)
                weldcrucial.Part0 = hum2.Parent.HumanoidRootPart
                weldcrucial.Part1 = hum2.Parent.Torso
            end
        end
    end
    local ch = playa:GetChildren()
    local i
    for i = 1,#ch do
        if ch[i].Name == ""THandle1"" or ch[i].Name == ""THandle2"" then
            ch[i]:remove()
        end
    end

        if Head then
            local Neck = Instance.new(""Weld"")
            Neck.Name = ""Neck""
            Neck.Part0 = Torso
            Neck.Part1 = Head
            if pool then
                local part = Instance.new('Part',Torso)
                part.Position = Vector3.new(0,10,0)
                part.Size = Vector3.new(0.2,0.2,0.2)
                part.Transparency = 1
                part.CanCollide = false
                local we = Instance.new('Weld',Torso)
                we.Part0 = Torso
                we.Part1 = part
                we.C0 = CFrame.new(0,0,0)*CFrame.Angles(math.rad(90),0,0)
                local coru=coroutine.wrap(function()
                bleed(part)
                end)
                coru()
            end
            if head == false or head == nil then
                Neck.C0 = CFrame.new(0, 1.5, 0)
            else
                Neck.C0 = CFrame.new(0, 1.5, 0.2)*CFrame.Angles(0.5, 0.25, 0.25)
                local bleedpart = Instance.new(""Part"", Torso)
                bleedpart.Size = Vector3.new(0.2, 0.2, 0.2)
                bleedpart.Color = Color3.new(115/225, 115/225, 115/225)
                bleedpart.CanCollide = false
                bleedpart.Position = Head.Position + Vector3.new(0, 1, 0)
                bleedpart.Transparency = 1
    
                local bleedpartweld = Instance.new(""Weld"", Torso)
                bleedpartweld.Part0 = Torso
                bleedpartweld.Part1 = bleedpart
                bleedpartweld.C0 = CFrame.Angles(-1, 0, -0.35) * CFrame.new(0, 1, 0.8)
                local coru = coroutine.wrap(function()
                bleed(bleedpart)
                end)
                coru()
            end
            Neck.C1 = CFrame.new()
            Neck.Parent = Torso
        end
        local Limb = playa:FindFirstChild(""Right Arm"")
        if Limb then

            Limb.CFrame = Torso.CFrame * CFrame.new(1.5, 0, 0)
            local Joint = Instance.new(""Rotate"")
            Joint.Name = ""RightShoulder""
            Joint.Part0 = Torso
            Joint.Part1 = Limb
            Joint.C0 = CFrame.new(1.5, 0.5, 0, 0, 0, 1, 0, 1, 0, -1, -0, -0)
            Joint.C1 = CFrame.new(-0, 0.5, 0, 0, 0, 1, 0, 1, 0, -1, -0, -0)
            Joint.Parent = Torso

            local B = Instance.new(""Part"")
            B.TopSurface = 0
            B.BottomSurface = 0
            B.formFactor = ""Symmetric""
            B.Size = Vector3.new(1, 1, 1)
            B.Transparency = 1
            B.CFrame = Limb.CFrame * CFrame.new(0, -0.5, 0)
            B.Parent = playa
            local W = Instance.new(""Weld"")
            W.Part0 = Limb
            W.Part1 = B
            W.C0 = CFrame.new(0, -0.5, 0)
            W.Parent = Limb
        end
        local Limb = playa:FindFirstChild(""Left Arm"")
        if Limb then
    
            Limb.CFrame = Torso.CFrame * CFrame.new(-1.5, 0, 0)
            local Joint = Instance.new(""Rotate"")
            Joint.Name = ""LeftShoulder""
            Joint.Part0 = Torso
            Joint.Part1 = Limb
            Joint.C0 = CFrame.new(-1.5, 0.5, 0, -0, -0, -1, 0, 1, 0, 1, 0, 0)
            Joint.C1 = CFrame.new(0, 0.5, 0, -0, -0, -1, 0, 1, 0, 1, 0, 0)
            Joint.Parent = Torso

            local B = Instance.new(""Part"")
            B.TopSurface = 0
            B.BottomSurface = 0
            B.formFactor = ""Symmetric""
            B.Size = Vector3.new(1, 1, 1)
            B.Transparency = 1
            B.CFrame = Limb.CFrame * CFrame.new(0, -0.5, 0)
            B.Parent = playa
            local W = Instance.new(""Weld"")
            W.Part0 = Limb
            W.Part1 = B
            W.C0 = CFrame.new(0, -0.5, 0)
            W.Parent = Limb
        end
        local Limb = playa:FindFirstChild(""Right Leg"")
        if Limb then
            Limb.CanCollide = false
            Limb.CFrame = Torso.CFrame * CFrame.new(0.5, -2, 0)
            local Joint = Instance.new(""Rotate"")
            Joint.Name = ""RightHip""
            Joint.Part0 = Torso
            Joint.Part1 = Limb
            Joint.C0 = CFrame.new(0.5, -1, 0, 0, 0, 1, 0, 1, 0, -1, -0, -0)
            Joint.C1 = CFrame.new(0, 1, 0, 0, 0, 1, 0, 1, 0, -1, -0, -0)
            Joint.Parent = Torso

            local B = Instance.new(""Part"")
            B.TopSurface = 0
            B.BottomSurface = 0
            B.formFactor = ""Symmetric""
            B.Size = Vector3.new(1, 1, 1)
            B.Transparency = 1
            B.CanCollide = true
            B.CFrame = Limb.CFrame * CFrame.new(0, -0.5, 0)
            B.Parent = playa
            local W = Instance.new(""Weld"")
            W.Part0 = Limb
            W.Part1 = B
            W.C0 = CFrame.new(0, -0.5, 0)
            W.Parent = Limb
        end
        local Limb = playa:FindFirstChild(""Left Leg"")
        if Limb then
            Limb.CanCollide = false
            Limb.CFrame = Torso.CFrame * CFrame.new(-0.5, -2, 0)
            local Joint = Instance.new(""Rotate"")
            Joint.Name = ""LeftHip""
            Joint.Part0 = Torso
            Joint.Part1 = Limb
            Joint.C0 = CFrame.new(-0.5, -1, 0, -0, -0, -1, 0, 1, 0, 1, 0, 0)
            Joint.C1 = CFrame.new(-0, 1, 0, -0, -0, -1, 0, 1, 0, 1, 0, 0)
            Joint.Parent = Torso

            local B = Instance.new(""Part"")
            B.TopSurface = 0
            B.BottomSurface = 0
            if zombiemode == false or override then
            B.CanCollide = true
            end
            B.formFactor = ""Symmetric""
            B.Size = Vector3.new(1, 1, 1)
            B.Transparency = 1
            B.CFrame = Limb.CFrame * CFrame.new(0, -0.5, 0)
            B.Parent = playa
            local W = Instance.new(""Weld"")
            W.Part0 = Limb
            W.Part1 = B
            W.C0 = CFrame.new(0, -0.5, 0)
            W.Parent = Limb
        end
        --[[
        local Bar = Instance.new(""Part"")
        Bar.TopSurface = 0
        Bar.BottomSurface = 0
        Bar.formFactor = ""Symmetric""
        Bar.Size = Vector3.new(1, 1, 1)
        Bar.Transparency = 1
        Bar.CFrame = Torso.CFrame * CFrame.new(0, 0.5, 0)
        Bar.Parent = playa
        local Weld = Instance.new(""Weld"")
        Weld.Part0 = Torso
        Weld.Part1 = Bar
        Weld.C0 = CFrame.new(0, 0.5, 0)
        Weld.Parent = Torso
        --]]
        playa.Parent = Gibs
        if kneef and explode == nil then
            local coru = coroutine.wrap(function()
                if playa:FindFirstChild(hitz) then
                    local uno = Instance.new('Part',workspace)
                    local dos = Instance.new('Part',workspace)
                    uno.CFrame = playa:FindFirstChild(hitz).CFrame
                    dos.CFrame = kneef[""big ass knife""].CFrame
                    local weld = Instance.new('Weld',kneef[""big ass knife""])
                    weld.Part0 = playa:FindFirstChild(hitz)
                    weld.Part1 = kneef[""big ass knife""]
                    weld.C0 = uno.CFrame:toObjectSpace(dos.CFrame)
                    uno:Destroy()
                    dos:Destroy()
                    playa:FindFirstChild(hitz).Anchored = false
                    for i, v in pairs(kneef:GetChildren()) do
                        if v:IsA('BasePart') then
                        v.Anchored = false
                        end
                    end
                    if explode == nil or explode == false then
                    local bleedpart = Instance.new(""Part"", kneef)
                    bleedpart.Size = Vector3.new(0.2, 0.2, 0.2)
                    bleedpart.Color = Color3.new(115/225, 115/225, 115/225)
                    bleedpart.CanCollide = false
                    bleedpart.Position = Head.Position + Vector3.new(0, 1, 0)
                    bleedpart.Transparency = 1
    
                    local bleedpartweld = Instance.new(""Weld"", kneef[""big ass knife""])
                    bleedpartweld.Part0 = kneef[""big ass knife""]
                    bleedpartweld.Part1 = bleedpart
                    bleedpartweld.C0 = CFrame.new(0,0,0)*CFrame.Angles(math.rad(90),0,0)
                    local coru = coroutine.wrap(function()
                    bleed(bleedpart)
                    end)
                    coru()
                    end
                    end
                    if zombiemode == false or override then
                    wait()
                    end
                    if kneef:FindFirstChild('Grab') and kneef.Grab:FindFirstChildOfClass('BodyVelocity') then
                        kneef.Grab:FindFirstChildOfClass('BodyVelocity'):Destroy()
                    end
            end)
            coru()
        end
        if explode then
            local movevector = CFrame.new(explode.Position,Torso.Position).lookVector
            local repulse = Instance.new('BodyForce',Torso)
            repulse.Force = movevector*10000 + Vector3.new(0,5000,0)
            game.Debris:AddItem(repulse,0.05)
        end
        if charred and zombiemode == false then
            for i,v in pairs(playa:GetChildren()) do
                if v:IsA('BasePart') then
                    v.BrickColor = BrickColor.Black()
                    local fire = Instance.new('Fire',v)
                    fire.Size = 5
                    fire.Heat = 5
                elseif v:IsA('Accessory') then
                    for a,c in pairs(v:GetChildren()) do
                        if c:IsA('BasePart') then
                            c.BrickColor = BrickColor.Black()
                            local fire = Instance.new('Fire',v)
                            fire.Size = 5
                            fire.Heat = 5
                            for o,p in pairs(c:GetChildren()) do
                                if p:IsA(""SpecialMesh"") then
                                    p.TextureId = """"
                                end
                            end
                        end
                    end
                end
            end
        end
        if soundy then
            local sound = Instance.new('Sound',Head)
            sound.SoundId = 'rbxassetid://903640857'
            sound.Volume = 1
            sound:Play()
            sound.Ended:connect(function() 
                sound:Destroy()
                local ambient = Instance.new('Sound',Head)
                ambient.Volume = 0.25
                ambient.Looped = true
                ambient.SoundId = 'rbxassetid://903641031'
                ambient:Play()
            end)
        end
        if override then
            if (string.len(hum2.Parent.Name) < 9 or string.sub(hum2.Parent.Name,string.len(hum2.Parent.Name)-8,string.len(hum2.Parent.Name)) ~= ""'s Zombie"") and zombiemode == true and #zombies < 10 then
                local coru = coroutine.wrap(function()
                    wait(4.5)
                    hum2.Parent.Name = hum2.Parent.Name..""'s Zombie""
                    hum2.HipHeight = 0.2
                    wait(0.5)
                    killz(hum2.Parent,""Head"",nil,nil,false,false,false,false)
                end)
                coru()
            else
                game:GetService('Debris'):AddItem(playa, 12)
            end
        else
            hum2.Health = 0
            table.insert(zombies,playa)
            local attack = Instance.new('Sound',Head)
            attack.SoundId = 'rbxassetid://903641424'
            attack.Volume = 2
            for i,v in pairs(playa:GetChildren()) do
                if v:IsA('BasePart') and v:FindFirstChildOfClass('TouchTransmitter') == nil then
                    v.Touched:connect(function(hit)
                        if hit.Parent and hit.Parent:FindFirstChildOfClass('Humanoid') then
                            local found = false
                            if hit.Parent == player.Character then
                                found = true
                            end
                            for a,c in pairs(zombies) do
                                if c == hit.Parent then
                                    found = true
                                end
                            end
                            if found == false and hit.Parent:FindFirstChildOfClass('Humanoid').Health > 0 then
                                attack:Play()
                                if hit.Parent:FindFirstChildOfClass('Humanoid').Health - 2 <= 0 then
                                    hit.Parent:FindFirstChildOfClass('Humanoid').Health = 0
                                    wait()
                                    killz(hit.Parent,""Head"")
                                else
                                    hit.Parent:FindFirstChildOfClass('Humanoid'):TakeDamage(2)
                                end
                            end
                        end
                    end)
                end
            end
            local coru = coroutine.wrap(function()
                wait(2)
                for i,v in pairs(playa:GetChildren()) do
                if v:IsA('BasePart') then
                    for a,c in pairs(v:GetChildren()) do
                        if c:IsA('Fire') or c:IsA('ParticleEmitter') then
                            c:Destroy()
                        end
                    end
                elseif v:IsA('Accessory') then
                    for a,c in pairs(v:GetChildren()) do
                        if c:IsA('BasePart') then
                            for b,d in pairs(c:GetChildren()) do
                                if d:IsA('Fire') or d:IsA('ParticleEmitter') then
                                    d:Destroy()
                                end
                            end
                        end
                    end
                end
            end
            end)
            coru()
        end
    end 
end

mouse.KeyDown:connect(function(key)
    if key == ""t"" and mouse.Target then
        local hum = mouse.Target.Parent:FindFirstChildOfClass('Humanoid')
        if hum == nil then hum = mouse.Target.Parent.Parent:FindFirstChildOfClass('Humanoid') end
        if curpoint == nil then
            if hum and hum.Parent:FindFirstChild('Head') then
                curpart = hum.Parent.Head
            else
                curpart = nil
                curpoint = mouse.Hit.p
            end
            if player.PlayerGui:FindFirstChild('Notification') then player.PlayerGui.Notification:Destroy() end
            notify(""ZOMBIE TARGET SET"",false)
        else
            curpart = nil
            curpoint = nil
            if player.PlayerGui:FindFirstChild('Notification') then player.PlayerGui.Notification:Destroy() end
            notify(""ZOMBIE TARGET REMOVED"",false)
        end
    elseif key == ""y"" then
        for o,p in pairs(zombies) do
            local coru = coroutine.wrap(function()
            if p:FindFirstChild('Torso') then
            killz(p,""Head"",nil,nil,false,false,false,true)
            else
            table.remove(zombies,o)
            end
            end)
            coru()
            wait()
        end
        for i,v in pairs(zombies) do
            table.remove(zombies,i)
        end
        if player.PlayerGui:FindFirstChild('Notification') then player.PlayerGui.Notification:Destroy() end
        notify(""ZOMBIES TERMINATED"",false)
    end
end)

function nub()
local me = player.Character
local point = me.HumanoidRootPart
local playergui = player.PlayerGui
local rightshoulderz = me.Torso[""Right Shoulder""]:Clone()
local leftshoulderz = me.Torso[""Left Shoulder""]:Clone()
local torsojoint = me.HumanoidRootPart[""RootJoint""]:Clone()
local lefthipz = me.Torso[""Left Hip""]:Clone()
local righthipz = me.Torso[""Right Hip""]:Clone()
local mode = ""kill""
local lerpz = false
local active = false
local acting = false
local hit = false
local canClick = true
local stabbing = false
local grabbing = false
local finishing = false
local kyssing = false
local canbackgroundmusic = true
local cancolorfilter = true
local spinboolean = false
local grabbed = nil
local doing = false
local rightshoulder = nil
local leftshoulder = nil
local headweld = nil
local usable = true
finishnum = 1

function notify(msg,forever)
    local doit = coroutine.wrap(function()
        local gui = Instance.new('ScreenGui',playergui)
        gui.Name = ""Notification""
        local frame = Instance.new('Frame',gui)
        frame.Position = UDim2.new(0,0,0,0)
        frame.Size = UDim2.new(1,0,0.2,0)
        frame.BackgroundTransparency = 1
        local txt = Instance.new('TextLabel',frame)
        txt.TextColor3 = Color3.new(255,255,255)
        txt.TextStrokeColor3 = Color3.new(0, 0, 0)
        txt.TextStrokeTransparency = 0
        txt.BackgroundTransparency = 1
        txt.Text = """"
        txt.Size = UDim2.new(1,0,0.3,0)
        txt.Position = UDim2.new(0,0,0.4,0)
        txt.TextScaled = true
        txt.Font = ""Code""
        txt.TextXAlignment = ""Center""
        local tap = Instance.new(""Sound"")
        tap.Parent = gui
        tap.SoundId = ""rbxassetid://147982968""
        tap.TimePosition = 0.1
        local str = msg
        local len = string.len(str)
        for i=1,len do
            txt.Text = string.sub(str,1,i)
            pitche = math.random(20, 40)/10
            tap.PlaybackSpeed = pitche
            tap:Play()
            wait(0.01)
        end
        if forever == false then
            wait(1)
            while txt.TextTransparency < 1 do
                txt.TextTransparency = txt.TextTransparency + 0.1
                txt.TextStrokeTransparency = txt.TextStrokeTransparency + 0.1
                wait(0.001)
            end
            gui:Destroy()
        end
    end)
    doit()
end

wait(0.5)
notify(""Loaded Now Go Rekt Da Kids"",true)
local laugh = Instance.new('Sound',me.Head)
laugh.SoundId = 'rbxassetid://378827985'
laugh.Name = ""Psycho""
laugh.Volume = 5
-- 1 - bitch ass knife
local obj1 = Instance.new(""Model"")
obj1.Name = ""bitch ass knife""
obj1.Parent = game.Workspace

-- 2 - Grab
local obj2 = Instance.new(""Part"")
obj2.CFrame = CFrame.new(Vector3.new(20.4525032, 6.14501333, -134.399979)) * CFrame.Angles(-3.1415927410126, 0, -3.1415927410126)
obj2.LeftSurface = Enum.SurfaceType.SmoothNoOutlines
obj2.TopSurface = Enum.SurfaceType.SmoothNoOutlines
obj2.RightSurface = Enum.SurfaceType.SmoothNoOutlines
obj2.FrontSurface = Enum.SurfaceType.SmoothNoOutlines
obj2.BottomSurface = Enum.SurfaceType.SmoothNoOutlines
obj2.Material = Enum.Material.Concrete
obj2.Size = Vector3.new(1, 0.25, 0.25)
obj2.BackSurface = Enum.SurfaceType.SmoothNoOutlines
obj2.Anchored = true
obj2.BrickColor = BrickColor.new(""Black"")
obj2.Friction = 0.30000001192093
obj2.Shape = Enum.PartType.Cylinder
obj2.Name = ""Grab""
obj2.Parent = obj1

-- 3 - handletopcap
local obj3 = Instance.new(""Part"")
obj3.CFrame = CFrame.new(Vector3.new(19.9725456, 6.14502859, -134.399933)) * CFrame.Angles(0, 1.5707963705063, 0)
obj3.LeftSurface = Enum.SurfaceType.SmoothNoOutlines
obj3.TopSurface = Enum.SurfaceType.SmoothNoOutlines
obj3.RightSurface = Enum.SurfaceType.SmoothNoOutlines
obj3.FrontSurface = Enum.SurfaceType.SmoothNoOutlines
obj3.BottomSurface = Enum.SurfaceType.SmoothNoOutlines
obj3.Material = Enum.Material.Concrete
obj3.Size = Vector3.new(0.349999994, 0.349999994, 0.349999994)
obj3.BackSurface = Enum.SurfaceType.SmoothNoOutlines
obj3.Anchored = true
obj3.BrickColor = BrickColor.new(""Black"")
obj3.Friction = 0.30000001192093
obj3.Shape = Enum.PartType.Ball
obj3.Name = ""handletopcap""
obj3.Parent = obj1

-- 4 - handlebottomcap
local obj4 = Instance.new(""Part"")
obj4.CFrame = CFrame.new(Vector3.new(20.9725285, 6.14502859, -134.399918)) * CFrame.Angles(0, 1.5707963705063, 0)
obj4.LeftSurface = Enum.SurfaceType.SmoothNoOutlines
obj4.TopSurface = Enum.SurfaceType.SmoothNoOutlines
obj4.RightSurface = Enum.SurfaceType.SmoothNoOutlines
obj4.FrontSurface = Enum.SurfaceType.SmoothNoOutlines
obj4.BottomSurface = Enum.SurfaceType.SmoothNoOutlines
obj4.Material = Enum.Material.Concrete
obj4.Size = Vector3.new(0.25, 0.25, 0.25)
obj4.BackSurface = Enum.SurfaceType.SmoothNoOutlines
obj4.Anchored = true
obj4.BrickColor = BrickColor.new(""Black"")
obj4.Friction = 0.30000001192093
obj4.Shape = Enum.PartType.Ball
obj4.Name = ""handlebottomcap""
obj4.Parent = obj1

-- 5 - handleguardmid
local obj5 = Instance.new(""Part"")
obj5.CFrame = CFrame.new(Vector3.new(19.9474983, 6.14502859, -134.399918)) * CFrame.Angles(0, 1.5707963705063, 0)
obj5.LeftSurface = Enum.SurfaceType.SmoothNoOutlines
obj5.TopSurface = Enum.SurfaceType.SmoothNoOutlines
obj5.RightSurface = Enum.SurfaceType.SmoothNoOutlines
obj5.FrontSurface = Enum.SurfaceType.SmoothNoOutlines
obj5.BottomSurface = Enum.SurfaceType.SmoothNoOutlines
obj5.Material = Enum.Material.Concrete
obj5.Size = Vector3.new(0.349999994, 0.349999994, 0.100000001)
obj5.BackSurface = Enum.SurfaceType.SmoothNoOutlines
obj5.Anchored = true
obj5.BrickColor = BrickColor.new(""Black"")
obj5.Friction = 0.30000001192093
obj5.Shape = Enum.PartType.Block
obj5.Name = ""handleguardmid""
obj5.Parent = obj1

-- 6 - handleguardcap1
local obj6 = Instance.new(""Part"")
obj6.CFrame = CFrame.new(Vector3.new(19.9474983, 6.32502794, -134.399918)) * CFrame.Angles(-3.1415927410126, 0, -3.1415927410126)
obj6.LeftSurface = Enum.SurfaceType.SmoothNoOutlines
obj6.TopSurface = Enum.SurfaceType.SmoothNoOutlines
obj6.RightSurface = Enum.SurfaceType.SmoothNoOutlines
obj6.FrontSurface = Enum.SurfaceType.SmoothNoOutlines
obj6.BottomSurface = Enum.SurfaceType.SmoothNoOutlines
obj6.Material = Enum.Material.Concrete
obj6.Size = Vector3.new(0.100000001, 0.349999994, 0.349999994)
obj6.BackSurface = Enum.SurfaceType.SmoothNoOutlines
obj6.Anchored = true
obj6.BrickColor = BrickColor.new(""Black"")
obj6.Friction = 0.30000001192093
obj6.Shape = Enum.PartType.Cylinder
obj6.Name = ""handleguardcap1""
obj6.Parent = obj1

-- 7 - handleguardcap2
local obj7 = Instance.new(""Part"")
obj7.CFrame = CFrame.new(Vector3.new(19.9474983, 5.97502899, -134.399918)) * CFrame.Angles(-3.1415927410126, 0, -3.1415927410126)
obj7.LeftSurface = Enum.SurfaceType.SmoothNoOutlines
obj7.TopSurface = Enum.SurfaceType.SmoothNoOutlines
obj7.RightSurface = Enum.SurfaceType.SmoothNoOutlines
obj7.FrontSurface = Enum.SurfaceType.SmoothNoOutlines
obj7.BottomSurface = Enum.SurfaceType.SmoothNoOutlines
obj7.Material = Enum.Material.Concrete
obj7.Size = Vector3.new(0.100000009, 0.349999994, 0.349999994)
obj7.BackSurface = Enum.SurfaceType.SmoothNoOutlines
obj7.Anchored = true
obj7.BrickColor = BrickColor.new(""Black"")
obj7.Friction = 0.30000001192093
obj7.Shape = Enum.PartType.Cylinder
obj7.Name = ""handleguardcap2""
obj7.Parent = obj1

-- 8 - big ass knife
local obj8 = Instance.new(""Part"")
obj8.CFrame = CFrame.new(Vector3.new(18.4375095, 6.14502859, -134.401321)) * CFrame.Angles(0, 1.5707963705063, 0)
obj8.LeftSurface = Enum.SurfaceType.SmoothNoOutlines
obj8.TopSurface = Enum.SurfaceType.SmoothNoOutlines
obj8.RightSurface = Enum.SurfaceType.SmoothNoOutlines
obj8.FrontSurface = Enum.SurfaceType.SmoothNoOutlines
obj8.BottomSurface = Enum.SurfaceType.SmoothNoOutlines
obj8.Material = Enum.Material.Metal
obj8.Size = Vector3.new(0.0500000007, 0.280000001, 0.839999795)
obj8.BackSurface = Enum.SurfaceType.SmoothNoOutlines
obj8.Anchored = true
obj8.BrickColor = BrickColor.new(""Lily white"")
obj8.Friction = 0.30000001192093
obj8.Shape = Enum.PartType.Block
obj8.Name = ""big ass knife""
obj8.Parent = obj1

-- 9 - Mesh
local obj9 = Instance.new(""BlockMesh"")
obj9.Scale = Vector3.new(0.5, 1, 1)
obj9.Parent = obj8

-- 10 - big ass knife
local obj10 = Instance.new(""Part"")
obj10.CFrame = CFrame.new(Vector3.new(19.7425137, 6.14502859, -134.401321)) * CFrame.Angles(0, 1.5707963705063, 0)
obj10.LeftSurface = Enum.SurfaceType.SmoothNoOutlines
obj10.TopSurface = Enum.SurfaceType.SmoothNoOutlines
obj10.RightSurface = Enum.SurfaceType.SmoothNoOutlines
obj10.FrontSurface = Enum.SurfaceType.SmoothNoOutlines
obj10.BottomSurface = Enum.SurfaceType.SmoothNoOutlines
obj10.Material = Enum.Material.Metal
obj10.Size = Vector3.new(0.0500000007, 0.280000001, 0.289999962)
obj10.BackSurface = Enum.SurfaceType.SmoothNoOutlines
obj10.Anchored = true
obj10.BrickColor = BrickColor.new(""Lily white"")
obj10.Friction = 0.30000001192093
obj10.Shape = Enum.PartType.Block
obj10.Name = ""big ass knife""
obj10.Parent = obj1
local knife = obj10

-- 11 - Mesh
local obj11 = Instance.new(""BlockMesh"")
obj11.Scale = Vector3.new(0.5, 1, 1)
obj11.Parent = obj10

-- 12 - big ass knife
local obj12 = Instance.new(""Part"")
obj12.CFrame = CFrame.new(Vector3.new(19.1075306, 6.08502865, -134.401321)) * CFrame.Angles(0, 1.5707963705063, 0)
obj12.LeftSurface = Enum.SurfaceType.SmoothNoOutlines
obj12.TopSurface = Enum.SurfaceType.SmoothNoOutlines
obj12.RightSurface = Enum.SurfaceType.SmoothNoOutlines
obj12.FrontSurface = Enum.SurfaceType.SmoothNoOutlines
obj12.BottomSurface = Enum.SurfaceType.SmoothNoOutlines
obj12.Material = Enum.Material.Metal
obj12.Size = Vector3.new(0.0500000007, 0.159999996, 0.979999959)
obj12.BackSurface = Enum.SurfaceType.SmoothNoOutlines
obj12.Anchored = true
obj12.BrickColor = BrickColor.new(""Lily white"")
obj12.Friction = 0.30000001192093
obj12.Shape = Enum.PartType.Block
obj12.Name = ""big ass knife""
obj12.Parent = obj1

-- 13 - Mesh
local obj13 = Instance.new(""BlockMesh"")
obj13.Scale = Vector3.new(0.5, 1, 1)
obj13.Parent = obj12

-- 14 - serration
local obj14 = Instance.new(""WedgePart"")
obj14.CFrame = CFrame.new(Vector3.new(19.4963322, 6.15381575, -134.400375)) * CFrame.Angles(1.5707963705063, -0.78539824485779, -1.5707963705063)
obj14.LeftSurface = Enum.SurfaceType.SmoothNoOutlines
obj14.TopSurface = Enum.SurfaceType.SmoothNoOutlines
obj14.RightSurface = Enum.SurfaceType.SmoothNoOutlines
obj14.FrontSurface = Enum.SurfaceType.SmoothNoOutlines
obj14.Material = Enum.Material.Metal
obj14.Size = Vector3.new(0.0500000007, 0.200000003, 0.200000003)
obj14.BottomSurface = Enum.SurfaceType.SmoothNoOutlines
obj14.BackSurface = Enum.SurfaceType.SmoothNoOutlines
obj14.Anchored = true
obj14.BrickColor = BrickColor.new(""Lily white"")
obj14.Friction = 0.30000001192093
obj14.Name = ""serration""
obj14.Parent = obj1

-- 15 - Mesh
local obj15 = Instance.new(""BlockMesh"")
obj15.Scale = Vector3.new(0.5, 1, 1)
obj15.Parent = obj14

-- 16 - serration
local obj16 = Instance.new(""WedgePart"")
obj16.CFrame = CFrame.new(Vector3.new(19.2763138, 6.15381575, -134.400375)) * CFrame.Angles(1.5707963705063, -0.78539824485779, -1.5707963705063)
obj16.LeftSurface = Enum.SurfaceType.SmoothNoOutlines
obj16.TopSurface = Enum.SurfaceType.SmoothNoOutlines
obj16.RightSurface = Enum.SurfaceType.SmoothNoOutlines
obj16.FrontSurface = Enum.SurfaceType.SmoothNoOutlines
obj16.Material = Enum.Material.Metal
obj16.Size = Vector3.new(0.0500000007, 0.200000003, 0.200000003)
obj16.BottomSurface = Enum.SurfaceType.SmoothNoOutlines
obj16.BackSurface = Enum.SurfaceType.SmoothNoOutlines
obj16.Anchored = true
obj16.BrickColor = BrickColor.new(""Lily white"")
obj16.Friction = 0.30000001192093
obj16.Name = ""serration""
obj16.Parent = obj1

-- 17 - Mesh
local obj17 = Instance.new(""BlockMesh"")
obj17.Scale = Vector3.new(0.5, 1, 1)
obj17.Parent = obj16

-- 18 - serration
local obj18 = Instance.new(""WedgePart"")
obj18.CFrame = CFrame.new(Vector3.new(19.3863068, 6.15381575, -134.400375)) * CFrame.Angles(1.5707963705063, -0.78539824485779, -1.5707963705063)
obj18.LeftSurface = Enum.SurfaceType.SmoothNoOutlines
obj18.TopSurface = Enum.SurfaceType.SmoothNoOutlines
obj18.RightSurface = Enum.SurfaceType.SmoothNoOutlines
obj18.FrontSurface = Enum.SurfaceType.SmoothNoOutlines
obj18.Material = Enum.Material.Metal
obj18.Size = Vector3.new(0.0500000007, 0.200000003, 0.200000003)
obj18.BottomSurface = Enum.SurfaceType.SmoothNoOutlines
obj18.BackSurface = Enum.SurfaceType.SmoothNoOutlines
obj18.Anchored = true
obj18.BrickColor = BrickColor.new(""Lily white"")
obj18.Friction = 0.30000001192093
obj18.Name = ""serration""
obj18.Parent = obj1

-- 19 - Mesh
local obj19 = Instance.new(""BlockMesh"")
obj19.Scale = Vector3.new(0.5, 1, 1)
obj19.Parent = obj18

-- 20 - serration
local obj20 = Instance.new(""WedgePart"")
obj20.CFrame = CFrame.new(Vector3.new(19.5963173, 6.15381575, -134.400375)) * CFrame.Angles(1.5707963705063, -0.78539824485779, -1.5707963705063)
obj20.LeftSurface = Enum.SurfaceType.SmoothNoOutlines
obj20.TopSurface = Enum.SurfaceType.SmoothNoOutlines
obj20.RightSurface = Enum.SurfaceType.SmoothNoOutlines
obj20.FrontSurface = Enum.SurfaceType.SmoothNoOutlines
obj20.Material = Enum.Material.Metal
obj20.Size = Vector3.new(0.0500000007, 0.200000003, 0.200000003)
obj20.BottomSurface = Enum.SurfaceType.SmoothNoOutlines
obj20.BackSurface = Enum.SurfaceType.SmoothNoOutlines
obj20.Anchored = true
obj20.BrickColor = BrickColor.new(""Lily white"")
obj20.Friction = 0.30000001192093
obj20.Name = ""serration""
obj20.Parent = obj1

-- 21 - Mesh
local obj21 = Instance.new(""BlockMesh"")
obj21.Scale = Vector3.new(0.5, 1, 1)
obj21.Parent = obj20

-- 22 - serration
local obj22 = Instance.new(""WedgePart"")
obj22.CFrame = CFrame.new(Vector3.new(19.1663074, 6.15381575, -134.400375)) * CFrame.Angles(1.5707963705063, -0.78539824485779, -1.5707963705063)
obj22.LeftSurface = Enum.SurfaceType.SmoothNoOutlines
obj22.TopSurface = Enum.SurfaceType.SmoothNoOutlines
obj22.RightSurface = Enum.SurfaceType.SmoothNoOutlines
obj22.FrontSurface = Enum.SurfaceType.SmoothNoOutlines
obj22.Material = Enum.Material.Metal
obj22.Size = Vector3.new(0.0500000007, 0.200000003, 0.200000003)
obj22.BottomSurface = Enum.SurfaceType.SmoothNoOutlines
obj22.BackSurface = Enum.SurfaceType.SmoothNoOutlines
obj22.Anchored = true
obj22.BrickColor = BrickColor.new(""Lily white"")
obj22.Friction = 0.30000001192093
obj22.Name = ""serration""
obj22.Parent = obj1

-- 23 - Mesh
local obj23 = Instance.new(""BlockMesh"")
obj23.Scale = Vector3.new(0.5, 1, 1)
obj23.Parent = obj22

-- 24 - serration
local obj24 = Instance.new(""WedgePart"")
obj24.CFrame = CFrame.new(Vector3.new(18.9663048, 6.15381575, -134.400375)) * CFrame.Angles(1.5707963705063, -0.78539824485779, -1.5707963705063)
obj24.LeftSurface = Enum.SurfaceType.SmoothNoOutlines
obj24.TopSurface = Enum.SurfaceType.SmoothNoOutlines
obj24.RightSurface = Enum.SurfaceType.SmoothNoOutlines
obj24.FrontSurface = Enum.SurfaceType.SmoothNoOutlines
obj24.Material = Enum.Material.Metal
obj24.Size = Vector3.new(0.0500000007, 0.200000003, 0.200000003)
obj24.BottomSurface = Enum.SurfaceType.SmoothNoOutlines
obj24.BackSurface = Enum.SurfaceType.SmoothNoOutlines
obj24.Anchored = true
obj24.BrickColor = BrickColor.new(""Lily white"")
obj24.Friction = 0.30000001192093
obj24.Name = ""serration""
obj24.Parent = obj1

-- 25 - Mesh
local obj25 = Instance.new(""BlockMesh"")
obj25.Scale = Vector3.new(0.5, 1, 1)
obj25.Parent = obj24

-- 26 - serration
local obj26 = Instance.new(""WedgePart"")
obj26.CFrame = CFrame.new(Vector3.new(18.8562984, 6.15381575, -134.400375)) * CFrame.Angles(1.5707963705063, -0.78539824485779, -1.5707963705063)
obj26.LeftSurface = Enum.SurfaceType.SmoothNoOutlines
obj26.TopSurface = Enum.SurfaceType.SmoothNoOutlines
obj26.RightSurface = Enum.SurfaceType.SmoothNoOutlines
obj26.FrontSurface = Enum.SurfaceType.SmoothNoOutlines
obj26.Material = Enum.Material.Metal
obj26.Size = Vector3.new(0.0500000007, 0.200000003, 0.200000003)
obj26.BottomSurface = Enum.SurfaceType.SmoothNoOutlines
obj26.BackSurface = Enum.SurfaceType.SmoothNoOutlines
obj26.Anchored = true
obj26.BrickColor = BrickColor.new(""Lily white"")
obj26.Friction = 0.30000001192093
obj26.Name = ""serration""
obj26.Parent = obj1

-- 27 - Mesh
local obj27 = Instance.new(""BlockMesh"")
obj27.Scale = Vector3.new(0.5, 1, 1)
obj27.Parent = obj26

-- 28 - serration
local obj28 = Instance.new(""WedgePart"")
obj28.CFrame = CFrame.new(Vector3.new(19.0663071, 6.15381575, -134.400375)) * CFrame.Angles(1.5707963705063, -0.78539824485779, -1.5707963705063)
obj28.LeftSurface = Enum.SurfaceType.SmoothNoOutlines
obj28.TopSurface = Enum.SurfaceType.SmoothNoOutlines
obj28.RightSurface = Enum.SurfaceType.SmoothNoOutlines
obj28.FrontSurface = Enum.SurfaceType.SmoothNoOutlines
obj28.Material = Enum.Material.Metal
obj28.Size = Vector3.new(0.0500000007, 0.200000003, 0.200000003)
obj28.BottomSurface = Enum.SurfaceType.SmoothNoOutlines
obj28.BackSurface = Enum.SurfaceType.SmoothNoOutlines
obj28.Anchored = true
obj28.BrickColor = BrickColor.new(""Lily white"")
obj28.Friction = 0.30000001192093
obj28.Name = ""serration""
obj28.Parent = obj1

-- 29 - Mesh
local obj29 = Instance.new(""BlockMesh"")
obj29.Scale = Vector3.new(0.5, 1, 1)
obj29.Parent = obj28

-- 30 - knifetip1
local obj30 = Instance.new(""WedgePart"")
obj30.CFrame = CFrame.new(Vector3.new(18.0163059, 6.14381599, -134.400375)) * CFrame.Angles(1.5707963705063, -0.78539824485779, -1.5707963705063)
obj30.LeftSurface = Enum.SurfaceType.SmoothNoOutlines
obj30.TopSurface = Enum.SurfaceType.SmoothNoOutlines
obj30.RightSurface = Enum.SurfaceType.SmoothNoOutlines
obj30.FrontSurface = Enum.SurfaceType.SmoothNoOutlines
obj30.Material = Enum.Material.Metal
obj30.Size = Vector3.new(0.0500000007, 0.200000003, 0.200000003)
obj30.BottomSurface = Enum.SurfaceType.SmoothNoOutlines
obj30.BackSurface = Enum.SurfaceType.SmoothNoOutlines
obj30.Anchored = true
obj30.BrickColor = BrickColor.new(""Lily white"")
obj30.Friction = 0.30000001192093
obj30.Name = ""knifetip1""
obj30.Parent = obj1

-- 31 - Mesh
local obj31 = Instance.new(""BlockMesh"")
obj31.Scale = Vector3.new(0.5, 1, 1)
obj31.Parent = obj30

-- 32 - redstuff
local obj32 = Instance.new(""Part"")
obj32.CFrame = CFrame.new(Vector3.new(19.9470005, 5.9749999, -134.399994)) * CFrame.Angles(-0, 0, -0)
obj32.LeftSurface = Enum.SurfaceType.SmoothNoOutlines
obj32.TopSurface = Enum.SurfaceType.SmoothNoOutlines
obj32.RightSurface = Enum.SurfaceType.SmoothNoOutlines
obj32.FrontSurface = Enum.SurfaceType.SmoothNoOutlines
obj32.Material = Enum.Material.SmoothPlastic
obj32.BottomSurface = Enum.SurfaceType.SmoothNoOutlines
obj32.Size = Vector3.new(0.0500000007, 0.360000014, 0.360000014)
obj32.BackSurface = Enum.SurfaceType.SmoothNoOutlines
obj32.BrickColor = BrickColor.new(""Institutional white"")
obj32.Friction = 0.30000001192093
obj32.Shape = Enum.PartType.Cylinder
obj32.Name = ""redstuff""
obj32.Anchored = true
obj32.Parent = obj1


-- 33 - redstuff
local obj33 = Instance.new(""Part"")
obj33.CFrame = CFrame.new(Vector3.new(18.9800053, 6.1400156, -134.404984)) * CFrame.Angles(-0, 0, -0)
obj33.LeftSurface = Enum.SurfaceType.SmoothNoOutlines
obj33.TopSurface = Enum.SurfaceType.SmoothNoOutlines
obj33.RightSurface = Enum.SurfaceType.SmoothNoOutlines
obj33.FrontSurface = Enum.SurfaceType.SmoothNoOutlines
obj33.BottomSurface = Enum.SurfaceType.SmoothNoOutlines
obj33.Material = Enum.Material.SmoothPlastic
obj33.Size = Vector3.new(1.81999993, 0.100000001, 0.0500000007)
obj33.BackSurface = Enum.SurfaceType.SmoothNoOutlines
obj33.BrickColor = BrickColor.new(""Institutional white"")
obj33.Friction = 0.30000001192093
obj33.Shape = Enum.PartType.Block
obj33.Name = ""redstuff""
obj33.Anchored = true
obj33.Parent = obj1

-- 34 - redstuff
local obj34 = Instance.new(""Part"")
obj34.CFrame = CFrame.new(Vector3.new(19.9470005, 6.32499981, -134.399994)) * CFrame.Angles(-0, 0, -0)
obj34.LeftSurface = Enum.SurfaceType.SmoothNoOutlines
obj34.TopSurface = Enum.SurfaceType.SmoothNoOutlines
obj34.RightSurface = Enum.SurfaceType.SmoothNoOutlines
obj34.FrontSurface = Enum.SurfaceType.SmoothNoOutlines
obj34.BottomSurface = Enum.SurfaceType.SmoothNoOutlines
obj34.Size = Vector3.new(0.0500000007, 0.360000014, 0.360000014)
obj34.Material = Enum.Material.SmoothPlastic
obj34.BackSurface = Enum.SurfaceType.SmoothNoOutlines
obj34.BrickColor = BrickColor.new(""Institutional white"")
obj34.Friction = 0.30000001192093
obj34.Shape = Enum.PartType.Cylinder
obj34.Name = ""redstuff""
obj34.Anchored = true
obj34.Parent = obj1

-- 35 - redstuff
local obj35 = Instance.new(""Part"")
obj35.CFrame = CFrame.new(Vector3.new(19.8830166, 6.14501476, -134.399963)) * CFrame.Angles(-0, 0, -0)
obj35.LeftSurface = Enum.SurfaceType.SmoothNoOutlines
obj35.TopSurface = Enum.SurfaceType.SmoothNoOutlines
obj35.RightSurface = Enum.SurfaceType.SmoothNoOutlines
obj35.FrontSurface = Enum.SurfaceType.SmoothNoOutlines
obj35.BottomSurface = Enum.SurfaceType.SmoothNoOutlines
obj35.Size = Vector3.new(0.0500000007, 0.319999993, 0.319999993)
obj35.BackSurface = Enum.SurfaceType.SmoothNoOutlines
obj35.BrickColor = BrickColor.new(""Institutional white"")
obj35.Friction = 0.30000001192093
obj35.Shape = Enum.PartType.Cylinder
obj35.Material = Enum.Material.SmoothPlastic
obj35.Name = ""redstuff""
obj35.Anchored = true
obj35.Parent = obj1

-- 36 - redstuff
local obj36 = Instance.new(""Part"")
obj36.CFrame = CFrame.new(Vector3.new(20.9430103, 6.14501476, -134.399963)) * CFrame.Angles(-0, 0, -0)
obj36.LeftSurface = Enum.SurfaceType.SmoothNoOutlines
obj36.TopSurface = Enum.SurfaceType.SmoothNoOutlines
obj36.RightSurface = Enum.SurfaceType.SmoothNoOutlines
obj36.FrontSurface = Enum.SurfaceType.SmoothNoOutlines
obj36.BottomSurface = Enum.SurfaceType.SmoothNoOutlines
obj36.Material = Enum.Material.SmoothPlastic
obj36.Size = Vector3.new(0.0500000007, 0.25999999, 0.25999999)
obj36.BackSurface = Enum.SurfaceType.SmoothNoOutlines
obj36.BrickColor = BrickColor.new(""Institutional white"")
obj36.Friction = 0.30000001192093
obj36.Shape = Enum.PartType.Cylinder
obj36.Name = ""redstuff""
obj36.Anchored = true
obj36.Parent = obj1

-- 37 - redstuff
local obj37 = Instance.new(""WedgePart"")
obj37.CFrame = CFrame.new(Vector3.new(18.066288, 6.14381599, -134.400375)) * CFrame.Angles(1.5707963705063, -0.78539824485779, -1.5707963705063)
obj37.LeftSurface = Enum.SurfaceType.SmoothNoOutlines
obj37.TopSurface = Enum.SurfaceType.SmoothNoOutlines
obj37.RightSurface = Enum.SurfaceType.SmoothNoOutlines
obj37.FrontSurface = Enum.SurfaceType.SmoothNoOutlines
obj37.Material = Enum.Material.SmoothPlastic
obj37.Size = Vector3.new(0.0500000007, 0.0700000003, 0.0700000003)
obj37.BottomSurface = Enum.SurfaceType.SmoothNoOutlines
obj37.BackSurface = Enum.SurfaceType.SmoothNoOutlines
obj37.Anchored = true
obj37.BrickColor = BrickColor.new(""Institutional white"")
obj37.Friction = 0.30000001192093
obj37.Name = ""redstuff""
obj37.Anchored = true
obj37.Parent = obj1

-- 38 - redstuff
local obj38 = Instance.new(""Part"")
obj38.CFrame = CFrame.new(Vector3.new(20.1230125, 6.14501476, -134.399979)) * CFrame.Angles(-0, 0, -0)
obj38.LeftSurface = Enum.SurfaceType.SmoothNoOutlines
obj38.TopSurface = Enum.SurfaceType.SmoothNoOutlines
obj38.RightSurface = Enum.SurfaceType.SmoothNoOutlines
obj38.FrontSurface = Enum.SurfaceType.SmoothNoOutlines
obj38.BottomSurface = Enum.SurfaceType.SmoothNoOutlines
obj38.Material = Enum.Material.SmoothPlastic
obj38.Size = Vector3.new(0.0500000007, 0.25999999, 0.25999999)
obj38.BackSurface = Enum.SurfaceType.SmoothNoOutlines
obj38.BrickColor = BrickColor.new(""Institutional white"")
obj38.Friction = 0.30000001192093
obj38.Shape = Enum.PartType.Cylinder
obj38.Name = ""redstuff""
obj38.Anchored = true
obj38.Parent = obj1

local audio = Instance.new('Sound',knife)
audio.Volume = 2

local audio2 = Instance.new('Sound',knife)
audio2.Volume = 2

local holdpart = Instance.new(""Part"")
holdpart.Parent = me
holdpart.Size = Vector3.new(0.4, 0.4, 0.2)
holdpart.Position = me.Head.Position + Vector3.new(0, 1, 0)
holdpart.BrickColor = BrickColor.new(""Burnt Sienna"")

local previous = nil
for i,v in pairs(obj1:GetChildren()) do
    if v:IsA('BasePart') then
        if previous then
            local weld = Instance.new('Weld',v)
            weld.Part0 = v
            weld.Part1 = previous
            weld.C0 = v.CFrame:inverse() * previous.CFrame
            previous.Anchored = false
            previous.CanCollide = false
            local vee = v
            weld.AncestryChanged:connect(function(mez,par)
                wait()
                weld.Parent = vee
            end)
        end
        previous = v
    end
end
previous.Anchored = false
previous.CanCollide = false

local holdpartweld = Instance.new(""Weld"", me.Torso)
holdpartweld.Part0 = me.Torso
holdpartweld.Part1 = holdpart
holdpartweld.C0 = CFrame.Angles(0, 0, 0) * CFrame.new(-1, -0.8, 0.15)

holdpartweld.AncestryChanged:connect(function(mez,par)
    if par ~= me.Torso then
        wait()
        holdpartweld.Parent = me.Torso
    end
end)

local knifeweld = Instance.new('Weld',me.Torso)
knifeweld.Part0 = me.Torso
knifeweld.Part1 = obj2
knifeweld.C1 = CFrame.Angles(0,math.rad(90),0) * CFrame.new(1, 0.8, 0.55)
knifeweld.AncestryChanged:connect(function(mez,par)
    if par ~= me.Torso then
        wait()
        knifeweld.Parent = me.Torso
    end
end)
local ScreenGui = Instance.new(""ScreenGui"")
local CustomizeGui = Instance.new(""Frame"")
local Customize = Instance.new(""TextLabel"")
local ClosestColor = Instance.new(""TextLabel"")
local Line = Instance.new(""TextLabel"")
local Color = Instance.new(""ImageLabel"")
local Close = Instance.new(""TextButton"")
local RedHue = Instance.new(""TextLabel"")
local GreenHue = Instance.new(""TextLabel"")
local RedInput = Instance.new(""TextBox"")
local BlueHue = Instance.new(""TextLabel"")
local GreenInput = Instance.new(""TextBox"")
local TransInput = Instance.new(""TextBox"")
local BlueInput = Instance.new(""TextBox"")
local Message = Instance.new(""TextLabel"")
local Message2 = Instance.new(""TextLabel"")
local TrailTransparency = Instance.new(""TextLabel"")
local TrailInput = Instance.new(""TextBox"")
local MusicOption = Instance.new(""TextButton"")
local ScreenOption = Instance.new(""TextButton"")
local ScreenOptionTxt = Instance.new(""TextLabel"")
local MusicOptionTxt = Instance.new(""TextLabel"")

-- Properties

ScreenGui.Parent = playergui

CustomizeGui.Name = ""CustomizeGui""
CustomizeGui.Parent = ScreenGui
CustomizeGui.BackgroundColor3 = Color3.new(0.294118, 0.294118, 0.294118)
CustomizeGui.BackgroundTransparency = 0.5
CustomizeGui.BorderColor3 = Color3.new(0, 0, 0)
CustomizeGui.BorderSizePixel = 2
CustomizeGui.Position = UDim2.new(0, 0, 0.5, 0)
CustomizeGui.Size = UDim2.new(0.449999988, 0, 0.449999988, 0)

Customize.Name = ""Customize""
Customize.Parent = CustomizeGui
Customize.BackgroundColor3 = Color3.new(0.294118, 0.294118, 0.294118)
Customize.BackgroundTransparency = 0.75
Customize.BorderSizePixel = 0
Customize.Size = UDim2.new(1, 0, 0.200000003, 0)
Customize.FontSize = Enum.FontSize.Size28
Customize.Text = ""ACCENT COLOR CUSTOMIZATION""
Customize.TextColor3 = Color3.new(1, 1, 1)
Customize.TextScaled = true
Customize.TextSize = 25
Customize.TextStrokeTransparency = 0.5
Customize.TextWrapped = true

ClosestColor.Name = ""ClosestColor""
ClosestColor.Parent = CustomizeGui
ClosestColor.BackgroundColor3 = Color3.new(1, 1, 1)
ClosestColor.BackgroundTransparency = 1
ClosestColor.Position = UDim2.new(0, 0, 0.850000024, 0)
ClosestColor.Size = UDim2.new(1, 0, 0.150000006, 0)
ClosestColor.Font = Enum.Font.SourceSansLight
ClosestColor.FontSize = Enum.FontSize.Size32
ClosestColor.Text = ""Your color is closest to Institutional White""
ClosestColor.TextColor3 = Color3.new(1, 1, 1)
ClosestColor.TextSize = 30
ClosestColor.TextStrokeTransparency = 0.5

Line.Name = ""Line""
Line.Parent = CustomizeGui
Line.BackgroundColor3 = Color3.new(0.137255, 0.137255, 0.137255)
Line.BackgroundTransparency = 0.5
Line.BorderColor3 = Color3.new(0, 0, 0)
Line.BorderSizePixel = 0
Line.Position = UDim2.new(0, 0, 0.200000003, 0)
Line.Size = UDim2.new(1, 0, 0.0299999993, 0)
Line.Font = Enum.Font.SourceSans
Line.FontSize = Enum.FontSize.Size14
Line.Text = "" ""
Line.TextSize = 14

Color.Name = ""Color""
Color.Parent = CustomizeGui
Color.BackgroundColor3 = Color3.new(1, 1, 1)
Color.BorderSizePixel = 0
Color.Position = UDim2.new(0.699999988, 0, 0.419999987, 0)
Color.Size = UDim2.new(0.300000012, 0, 0.300000012, 0)
Color.SizeConstraint = Enum.SizeConstraint.RelativeYY

MusicOption.Parent = CustomizeGui
MusicOption.Name = ""MusicOption""
MusicOption.BackgroundColor3 = Color3.new(0, 1, 0)
MusicOption.BorderSizePixel = 1
MusicOption.Position = UDim2.new(0.01, 0, -0.12, 0)
MusicOption.Size = UDim2.new(0.05, 0, 0.1, 0)
MusicOption.Text = """"
MusicOption.BackgroundTransparency = 0.5

ScreenOption.Parent = CustomizeGui
ScreenOption.Name = ""ScreenOption""
ScreenOption.BackgroundColor3 = Color3.new(0, 1, 0)
ScreenOption.BorderSizePixel = 1
ScreenOption.Position = UDim2.new(0.01, 0, -0.23, 0)
ScreenOption.Size = UDim2.new(0.05, 0, 0.1, 0)
ScreenOption.Text = """"
ScreenOption.BackgroundTransparency = 0.5

ScreenOptionTxt.Name = ""ScreenOptionTxt""
ScreenOptionTxt.Parent = CustomizeGui
ScreenOptionTxt.BackgroundColor3 = Color3.new(1, 1, 1)
ScreenOptionTxt.BackgroundTransparency = 1
ScreenOptionTxt.Position = UDim2.new(0.07, 0, -0.23, 0)
ScreenOptionTxt.Size = UDim2.new(1, 0, 0.07, 0)
ScreenOptionTxt.Font = Enum.Font.SourceSans
ScreenOptionTxt.FontSize = Enum.FontSize.Size24
ScreenOptionTxt.Text = ""Psychopath Red Filter""
ScreenOptionTxt.TextColor3 = Color3.new(1, 1, 1)
ScreenOptionTxt.TextScaled = true
ScreenOptionTxt.TextSize = 20
ScreenOptionTxt.TextStrokeColor3 = Color3.new(0, 0, 0)
ScreenOptionTxt.TextStrokeTransparency = 0.5
ScreenOptionTxt.TextWrapped = true
ScreenOptionTxt.TextXAlignment = ""Left""

MusicOptionTxt.Name = ""MusicOptionTxt""
MusicOptionTxt.Parent = CustomizeGui
MusicOptionTxt.BackgroundColor3 = Color3.new(1, 1, 1)
MusicOptionTxt.BackgroundTransparency = 1
MusicOptionTxt.Position = UDim2.new(0.07, 0, -0.12, 0)
MusicOptionTxt.Size = UDim2.new(1, 0, 0.07, 0)
MusicOptionTxt.Font = Enum.Font.SourceSans
MusicOptionTxt.FontSize = Enum.FontSize.Size24
MusicOptionTxt.Text = ""Psychopath Background Music""
MusicOptionTxt.TextColor3 = Color3.new(1, 1, 1)
MusicOptionTxt.TextScaled = true
MusicOptionTxt.TextSize = 20
MusicOptionTxt.TextStrokeColor3 = Color3.new(0, 0, 0)
MusicOptionTxt.TextStrokeTransparency = 0.5
MusicOptionTxt.TextWrapped = true
MusicOptionTxt.TextXAlignment = ""Left""

Close.Name = ""Close""
Close.Parent = CustomizeGui
Close.BackgroundColor3 = Color3.new(0.294118, 0.294118, 0.294118)
Close.BackgroundTransparency = 0.5
Close.BorderColor3 = Color3.new(0, 0, 0)
Close.BorderSizePixel = 2
Close.Position = UDim2.new(1.005, 0, 0, 0)
Close.Size = UDim2.new(0.100000001, 0, 0.2, 0)
Close.Font = Enum.Font.SourceSans
Close.FontSize = Enum.FontSize.Size14
Close.Text = ""X""
Close.TextColor3 = Color3.new(1, 1, 1)
Close.TextScaled = true
Close.TextSize = 14
Close.TextStrokeTransparency = 0
Close.TextWrapped = true

RedHue.Name = ""RedHue""
RedHue.Parent = CustomizeGui
RedHue.BackgroundColor3 = Color3.new(1, 1, 1)
RedHue.BackgroundTransparency = 1
RedHue.Position = UDim2.new(0.100000001, 0, 0.400000006, 0)
RedHue.Size = UDim2.new(0.300000012, 0, 0.100000001, 0)
RedHue.Font = Enum.Font.SourceSans
RedHue.FontSize = Enum.FontSize.Size24
RedHue.Text = ""RED Hue Value: ""
RedHue.TextColor3 = Color3.new(1, 1, 1)
RedHue.TextScaled = true
RedHue.TextSize = 20
RedHue.TextStrokeColor3 = Color3.new(1, 0, 0)
RedHue.TextStrokeTransparency = 0.75
RedHue.TextWrapped = true

GreenHue.Name = ""GreenHue""
GreenHue.Parent = CustomizeGui
GreenHue.BackgroundColor3 = Color3.new(1, 1, 1)
GreenHue.BackgroundTransparency = 1
GreenHue.Position = UDim2.new(0.100000001, 0, 0.5, 0)
GreenHue.Size = UDim2.new(0.300000012, 0, 0.100000001, 0)
GreenHue.Font = Enum.Font.SourceSans
GreenHue.FontSize = Enum.FontSize.Size24
GreenHue.Text = ""GREEN Hue Value:""
GreenHue.TextColor3 = Color3.new(1, 1, 1)
GreenHue.TextScaled = true
GreenHue.TextSize = 20
GreenHue.TextStrokeColor3 = Color3.new(0, 1, 0)
GreenHue.TextStrokeTransparency = 0.75
GreenHue.TextWrapped = true

RedInput.Name = ""RedInput""
RedInput.Parent = CustomizeGui
RedInput.BackgroundColor3 = Color3.new(0.137255, 0.137255, 0.137255)
RedInput.BackgroundTransparency = 0.5
RedInput.BorderSizePixel = 0
RedInput.Position = UDim2.new(0.419999987, 0, 0.425000007, 0)
RedInput.Size = UDim2.new(0.200000003, 0, 0.075000003, 0)
RedInput.Font = Enum.Font.SourceSans
RedInput.FontSize = Enum.FontSize.Size14
RedInput.Text = ""255""
RedInput.TextColor3 = Color3.new(1, 1, 1)
RedInput.TextSize = 14
RedInput.TextStrokeTransparency = 0

BlueHue.Name = ""BlueHue""
BlueHue.Parent = CustomizeGui
BlueHue.BackgroundColor3 = Color3.new(1, 1, 1)
BlueHue.BackgroundTransparency = 1
BlueHue.Position = UDim2.new(0.100000001, 0, 0.600000024, 0)
BlueHue.Size = UDim2.new(0.300000012, 0, 0.100000001, 0)
BlueHue.Font = Enum.Font.SourceSans
BlueHue.FontSize = Enum.FontSize.Size24
BlueHue.Text = ""BLUE Hue Value:""
BlueHue.TextColor3 = Color3.new(1, 1, 1)
BlueHue.TextScaled = true
BlueHue.TextSize = 20
BlueHue.TextStrokeColor3 = Color3.new(0, 0, 1)
BlueHue.TextStrokeTransparency = 0.75
BlueHue.TextWrapped = true

TrailTransparency.Name = ""TrailTransparency""
TrailTransparency.Parent = CustomizeGui
TrailTransparency.BackgroundColor3 = Color3.new(1, 1, 1)
TrailTransparency.BackgroundTransparency = 1
TrailTransparency.Position = UDim2.new(0.090000001, 0, 0.700000024, 0)
TrailTransparency.Size = UDim2.new(0.310000012, 0, 0.100000001, 0)
TrailTransparency.Font = Enum.Font.SourceSans
TrailTransparency.FontSize = Enum.FontSize.Size24
TrailTransparency.Text = ""Trail Transparency:""
TrailTransparency.TextColor3 = Color3.new(1, 1, 1)
TrailTransparency.TextScaled = true
TrailTransparency.TextSize = 20
TrailTransparency.TextStrokeColor3 = Color3.new(0, 0, 0)
TrailTransparency.TextWrapped = true

GreenInput.Name = ""GreenInput""
GreenInput.Parent = CustomizeGui
GreenInput.BackgroundColor3 = Color3.new(0.137255, 0.137255, 0.137255)
GreenInput.BackgroundTransparency = 0.5
GreenInput.BorderSizePixel = 0
GreenInput.Position = UDim2.new(0.419999987, 0, 0.524999976, 0)
GreenInput.Size = UDim2.new(0.200000003, 0, 0.075000003, 0)
GreenInput.Font = Enum.Font.SourceSans
GreenInput.FontSize = Enum.FontSize.Size14
GreenInput.Text = ""255""
GreenInput.TextColor3 = Color3.new(1, 1, 1)
GreenInput.TextSize = 14
GreenInput.TextStrokeTransparency = 0

TransInput.Name = ""TransInput""
TransInput.Parent = CustomizeGui
TransInput.BackgroundColor3 = Color3.new(0.137255, 0.137255, 0.137255)
TransInput.BackgroundTransparency = 0.5
TransInput.BorderSizePixel = 0
TransInput.Position = UDim2.new(0.419999987, 0, 0.725000024, 0)
TransInput.Size = UDim2.new(0.200000003, 0, 0.075000003, 0)
TransInput.Font = Enum.Font.SourceSans
TransInput.FontSize = Enum.FontSize.Size14
TransInput.Text = ""50""
TransInput.TextColor3 = Color3.new(1, 1, 1)
TransInput.TextSize = 14
TransInput.TextStrokeTransparency = 0

BlueInput.Name = ""BlueInput""
BlueInput.Parent = CustomizeGui
BlueInput.BackgroundColor3 = Color3.new(0.137255, 0.137255, 0.137255)
BlueInput.BackgroundTransparency = 0.5
BlueInput.BorderSizePixel = 0
BlueInput.Position = UDim2.new(0.419999987, 0, 0.625, 0)
BlueInput.Size = UDim2.new(0.200000003, 0, 0.075000003, 0)
BlueInput.Font = Enum.Font.SourceSans
BlueInput.FontSize = Enum.FontSize.Size14
BlueInput.Text = ""255""
BlueInput.TextColor3 = Color3.new(1, 1, 1)
BlueInput.TextSize = 14
BlueInput.TextStrokeTransparency = 0

Message.Name = ""Message""
Message.Parent = CustomizeGui
Message.BackgroundColor3 = Color3.new(1, 1, 1)
Message.BackgroundTransparency = 1
Message.Position = UDim2.new(0, 0, 0.2500004, 0)
Message.Size = UDim2.new(1, 0, 0.100000006, 0)
Message.Font = Enum.Font.SourceSans
Message.FontSize = Enum.FontSize.Size18
Message.Text = ""|| Inputs must be values ||""
Message.TextColor3 = Color3.new(1, 1, 1)
Message.TextScaled = true
Message.TextSize = 15
Message.TextStrokeTransparency = 0.75
Message.TextWrapped = true

local attun = Instance.new(""Attachment"", knife)
attun.Position = Vector3.new(0, 0.1, -1.75)
local atdos = Instance.new(""Attachment"", knife)
atdos.Position = Vector3.new(0, -0.1, 0.5)
local trail = Instance.new(""Trail"", knife)
trail.LightEmission = 0.5
trail.Attachment0 = attun
trail.Attachment1 = atdos
trail.Lifetime = 0.175
trail.MinLength = 0
trail.Enabled = false

function updatez()
    local rc = tonumber(RedInput.Text)
    local gc = tonumber(GreenInput.Text)
    local bc = tonumber(BlueInput.Text)
    local tcupd = tonumber(TransInput.Text)
    if rc == nil then
        rc = 0
    end
    if gc == nil then
        gc = 0
    end
    if bc == nil then
        bc = 0
    end
    if tcupd == nil then
        tcupd = 0
    end
    local tc = tcupd/100
    Color.BackgroundColor3 = Color3.fromRGB(rc,gc,bc)
    ClosestColor.Text = ""Your color is closest to ""..tostring(BrickColor.new(Color3.fromRGB(rc,gc,bc)))
    obj32.Color = Color3.fromRGB(rc,gc,bc)
    obj33.Color = Color3.fromRGB(rc,gc,bc)
    obj34.Color = Color3.fromRGB(rc,gc,bc)
    obj35.Color = Color3.fromRGB(rc,gc,bc)
    obj36.Color = Color3.fromRGB(rc,gc,bc)
    obj37.Color = Color3.fromRGB(rc,gc,bc)
    obj38.Color = Color3.fromRGB(rc,gc,bc)
    trail.Color = ColorSequence.new(Color3.fromRGB(rc, gc, bc))
    trail.Transparency = NumberSequence.new(tc)
    TrailTransparency.TextStrokeTransparency = tc
end

RedInput.Changed:connect(function(val)
    if val == ""Text"" and tonumber(RedInput.Text) then
        RedInput.Text = tostring(tonumber(RedInput.Text))
        if tonumber(RedInput.Text) > 255 then
            RedInput.Text = '255'
        end
    elseif val == ""Text"" then
        RedInput.Text = """"
    end
    updatez()
end)
GreenInput.Changed:connect(function(val)
    if val == ""Text"" and tonumber(GreenInput.Text) then
        GreenInput.Text = tostring(tonumber(GreenInput.Text))
        if tonumber(GreenInput.Text) > 255 then
            GreenInput.Text = '255'
        end
    elseif val == ""Text"" then
        GreenInput.Text = """"
    end
    updatez()
end)
BlueInput.Changed:connect(function(val)
    if val == ""Text"" and tonumber(BlueInput.Text) then
        BlueInput.Text = tostring(tonumber(BlueInput.Text))
        if tonumber(BlueInput.Text) > 255 then
            BlueInput.Text = '255'
        end
    elseif val == ""Text"" then
        BlueInput.Text = """"
    end
    updatez()
end)
TransInput.Changed:connect(function(val)
    if val == ""Text"" and tonumber(TransInput.Text) then
        TransInput.Text = tostring(tonumber(TransInput.Text))
        if tonumber(TransInput.Text) > 100 then
            TransInput.Text = '100'
        end
    elseif val == ""Text"" then
        TransInput.Text = """"
    end
    updatez()
end)

Close.MouseButton1Click:connect(function()
    if lerpz == false then
        lerpz = true
        if Close.Text ~= ""+"" then
            CustomizeGui:TweenPosition(UDim2.new(-0.45,0,0.5,0,Enum.EasingDirection.Out,Enum.EasingStyle.Quint,2))
            for i=1,10 do
                Close.TextTransparency = i/10
                Close.TextStrokeTransparency = i/10
                wait(0.01)
            end
            Close.Text = ""+""
            for i=1,10 do
                Close.TextTransparency = (10-i+1)/10
                Close.TextStrokeTransparency = (10-i+1)/10
                wait(0.01)
            end
            lerpz = false
        else
            CustomizeGui:TweenPosition(UDim2.new(0,0,0.5,0,Enum.EasingDirection.Out,Enum.EasingStyle.Quint,2))
            for i=1,10 do
                Close.TextTransparency = i/10
                Close.TextStrokeTransparency = i/10
                wait(0.01)
            end
            Close.Text = ""X""
            for i=1,10 do
                Close.TextTransparency = (10-i+1)/10
                Close.TextStrokeTransparency = (10-i+1)/10
                wait(0.01)
            end
            lerpz = false
        end
    end
end)

MusicOption.MouseButton1Click:connect(function()
    if canbackgroundmusic == true then
        canbackgroundmusic = false
        MusicOption.BackgroundColor3 = Color3.new(1, 0, 0)
    else
        canbackgroundmusic = true
        MusicOption.BackgroundColor3 = Color3.new(0, 1, 0)
    end
end)

ScreenOption.MouseButton1Click:connect(function()
    if cancolorfilter == true then
        cancolorfilter = false
        ScreenOption.BackgroundColor3 = Color3.new(1, 0, 0)
    else
        cancolorfilter = true
        ScreenOption.BackgroundColor3 = Color3.new(0, 1, 0)
    end
end)

function equip()
    local doit = coroutine.wrap(function()
    if me:FindFirstChild('Right Arm') and me:FindFirstChild('Torso') then
        acting = true
        local arm = me[""Right Arm""]
        local arm2 = me[""Left Arm""]
        local tors = me.Torso
        local weld = Instance.new('Weld',arm)
        weld.Part0 = arm
        weld.Part1 = tors
        weld.C0 = CFrame.new(-1.5,0,0)
        local weld2 = Instance.new(""Weld"", arm2)
        weld2.Part0 = arm2
        weld2.Part1 = tors
        weld2.C0 = CFrame.new(1.5, 0, 0)
        wait(0.001)
        for i = 0,1,0.1 do
            if me:FindFirstChild('Right Arm') == nil or me:FindFirstChild('Torso') == nil or weld == nil then return end
            weld.C0 = weld.C0:lerp(CFrame.new(-0.2,0.2,-0.5)*CFrame.Angles(0,-3.1,0.9),i)
            weld2.C0 = weld2.C0:lerp(CFrame.new(1.5, 0.6, 0) * CFrame.Angles(0,0,0.5),i)
            wait(0.001)
        end
        wait(0.15)
        trail.Enabled = true
        for i = 0,1,0.1 do
            if me:FindFirstChild('Right Arm') == nil or me:FindFirstChild('Torso') == nil or weld == nil then return end
            weld.C0 = weld.C0:lerp(CFrame.new(-0.5,2,0)*CFrame.Angles(0,0,-1.55),i)
            weld2.C0 = weld2.C0:lerp(CFrame.new(1.5, 0, 0), i)
            wait(0.001)
        end
        trail.Enabled = false
        wait(0.2)
        for i = 0,1,0.1 do
            if me:FindFirstChild('Right Arm') == nil or me:FindFirstChild('Torso') == nil or weld == nil then return end
            weld.C0 = weld.C0:lerp(CFrame.new(-1.5,0,0),i)
            wait(0.001)
        end
        weld:Destroy()
        weld2:Remove()
        if tors ~= nil then
            rightshoulderz:Clone().Parent = me.Torso
            leftshoulderz:Clone().Parent = me.Torso
        end
    end
    acting = false
    end)
    doit()
end

function kysnigga()
    if kyssing == true then return end
    kyssing = true
    acting = true
    decearingTHING = math.random(1, 100)
    if decearingTHING == 4 then
        decearingEGG = Instance.new(""Sound"", me.Torso)
        decearingEGG.SoundId = ""rbxassetid://138084557""
        decearingEGG.PlaybackSpeed = math.random(10, 12) / 10
        decearingEGG.TimePosition = 0.2
        decearingEGG:Play()
    end
    me.Humanoid.WalkSpeed = 0
    me.Humanoid.JumpPower = 0
    
    local rightarm = Instance.new(""Weld"", me.Torso)
    rightarm.Part0 = me.Torso
    rightarm.Part1 = me[""Right Arm""]
    rightarm.C0 = CFrame.Angles(0, 0, 0) * CFrame.new(1.5, 0, 0)
    
    local leftarm = Instance.new(""Weld"", me.Torso)
    leftarm.Part0 = me.Torso
    leftarm.Part1 = me[""Left Arm""]
    leftarm.C0 = CFrame.Angles(0, 0, 0) * CFrame.new(-1.5, 0, 0)
    
    local tors = Instance.new(""Weld"", me.HumanoidRootPart)
    tors.Part0 = me.HumanoidRootPart
    tors.Part1 = me.Torso
    tors.C0 = CFrame.Angles(0, 0, 0) * CFrame.new(0, 0, 0)
    
    local rightleg = Instance.new(""Weld"", me.Torso)
    rightleg.Part0 = me.Torso
    rightleg.Part1 = me[""Right Leg""]
    rightleg.C0 = CFrame.Angles(0, 0, 0) * CFrame.new(0.5, -2, 0)
    
    local leftleg = Instance.new(""Weld"", me.Torso)
    leftleg.Part0 = me.Torso
    leftleg.Part1 = me[""Left Leg""]
    leftleg.C0 = CFrame.Angles(0, 0, 0) * CFrame.new(-0.5, -2, 0)
    
    for i = 0, 1, 0.03 do
        tors.C0 = tors.C0:lerp(CFrame.new(0, -1.5, 0) * CFrame.Angles(math.rad(-10), 0, 0), i)
        leftleg.C0 = leftleg.C0:lerp(CFrame.new(-0.5, -1, 0) * CFrame.Angles(math.rad(-80), 0, 0), i)
        rightleg.C0 = rightleg.C0:lerp(CFrame.new(0.5, -1, 0) * CFrame.Angles(math.rad(-80), 0, 0), i)
        rightarm.C0 = rightarm.C0:lerp(CFrame.new(1.5, 0, 0) * CFrame.Angles(math.rad(0), math.rad(0), 0), i)
        wait()
    end
    for i = 0, 1, 0.03 do
        tors.C0 = tors.C0:lerp(CFrame.new(0, -1.5, 0) * CFrame.Angles(math.rad(5), 0, 0), i)
        leftleg.C0 = leftleg.C0:lerp(CFrame.new(-0.5, -1, 0.15) * CFrame.Angles(math.rad(-95), 0, 0), i)
        rightleg.C0 = rightleg.C0:lerp(CFrame.new(0.5, -1, 0.15) * CFrame.Angles(math.rad(-95), 0, 0), i)
        rightarm.C0 = rightarm.C0:lerp(CFrame.new(1, 0.3, -1.5) * CFrame.Angles(math.rad(90), 0, math.rad(-35)), i)
        leftarm.C0 = leftarm.C0:lerp(CFrame.new(-1, 0.3, -1.5) * CFrame.Angles(math.rad(90), 0, math.rad(35)), i)
        knifeweld.C1 = knifeweld.C1:lerp(CFrame.new(1.35, 0, 1) * CFrame.Angles(1.55, math.rad(-180), 1), i)
        wait()
    end
    local bleedzer = Instance.new('Part',me.Torso)
    bleedzer.CFrame = me.Torso.CFrame
    bleedzer.Size = Vector3.new(0.1,0.1,0.1)
    bleedzer.Transparency = 1
    bleedzer.CanCollide = false
    local weld = Instance.new('Weld',bleedzer)
    weld.Part0 = bleedzer
    weld.Part1 = me.Torso
    weld.C0= CFrame.new(0,0,0)*CFrame.Angles(math.rad(-90),0,0)
    local woodpekker = coroutine.wrap(function()
        bleed(bleedzer)
    end)
    woodpekker()
    audio.SoundId = ""rbxassetid://199977936""
    audio.PlaybackSpeed = 1.5
    audio:Play()
    audio2.SoundId = ""rbxassetid://220834019""
    audio2.PlaybackSpeed = 1
    audio2.TimePosition = 0.1
    audio2:Play()
    for i = 0, 1, 0.1 do
        tors.C0 = tors.C0:lerp(CFrame.new(0, -1.5, 0) * CFrame.Angles(math.rad(-20), 0, 0), i)
        leftleg.C0 = leftleg.C0:lerp(CFrame.new(-0.5, -1, -0.35) * CFrame.Angles(math.rad(-70), 0, 0), i)
        rightleg.C0 = rightleg.C0:lerp(CFrame.new(0.5, -1, -0.35) * CFrame.Angles(math.rad(-70), 0, 0), i)
        rightarm.C0 = rightarm.C0:lerp(CFrame.new(1, 0, 0) * CFrame.Angles(math.rad(70), 0, math.rad(-35)), i)
        leftarm.C0 = leftarm.C0:lerp(CFrame.new(-1, 0, 0) * CFrame.Angles(math.rad(70), 0, math.rad(35)), i)
        knifeweld.C1 = knifeweld.C1:lerp(CFrame.new(1.35, 0, 1) * CFrame.Angles(1.55, math.rad(-180), 1), i)
        wait()
    end
    wait(1)
    audio.SoundId = ""rbxassetid://210943487""
    audio.TimePosition = 0.2
    audio.PlaybackSpeed = 0.75
    audio:Play()
    for i = 0, 1, 0.03 do
        tors.C0 = tors.C0:lerp(CFrame.new(0, -1.5, 0) * CFrame.Angles(math.rad(-20), 0, 0), i)
        leftleg.C0 = leftleg.C0:lerp(CFrame.new(-0.5, -1, -0.35) * CFrame.Angles(math.rad(-70), 0, 0), i)
        rightleg.C0 = rightleg.C0:lerp(CFrame.new(0.5, -1, -0.35) * CFrame.Angles(math.rad(-70), 0, 0), i)
        rightarm.C0 = rightarm.C0:lerp(CFrame.new(1, 0.3, -1.5) * CFrame.Angles(math.rad(70), 0, math.rad(-35)), i)
        leftarm.C0 = leftarm.C0:lerp(CFrame.new(-1, 0.3, -1.5) * CFrame.Angles(math.rad(70), 0, math.rad(35)), i)
        knifeweld.C1 = knifeweld.C1:lerp(CFrame.new(1.35, 0, 1) * CFrame.Angles(1.55, math.rad(-180), 1), i)
        wait()
    end
    for i = 0, 1, 0.03 do
        rightarm.C0 = rightarm.C0:lerp(CFrame.new(1.5, 0, -0.4) * CFrame.Angles(math.rad(30), 0, math.rad(0)), i)
        leftarm.C0 = leftarm.C0:lerp(CFrame.new(-1.5, 0, -0.4) * CFrame.Angles(math.rad(30), 0, math.rad(0)), i)
        knifeweld.C1 = knifeweld.C1:lerp(CFrame.fromEulerAnglesXYZ(1.55, math.rad(-90), 1.55) * CFrame.new(0, 0.95, 0), i)
        wait()
    end
    wait(0.24)
    if me:FindFirstChildOfClass('Humanoid') then
        me:FindFirstChildOfClass('Humanoid').Health = 0
    end
    wait(0.01)
    killz(me,me.Torso.Name,nil,nil,true)
    
    tors:Remove()
    rightarm:Remove()
    rightleg:Remove()
    leftleg:Remove()
    leftarm:Remove()
    rightshoulderz:Clone().Parent = me.Torso
    leftshoulderz:Clone().Parent = me.Torso
    torsojoint:Clone().Parent = me.HumanoidRootPart
    lefthipz:Clone().Parent = me.Torso
    righthipz:Clone().Parent = me.Torso
    me.Humanoid.JumpPower = 50
    me.Humanoid.WalkSpeed = 16
    acting = false
    canClick = true
    doing = false
    hit = false
    kyssing = false
    if decearingTHING == 4 then
        decearingEGG:Remove()
    end
end

function bleedout()
    local doit = coroutine.wrap(function()
        local targe = grabbed
        local num = 0
        while targe and targe:FindFirstChildOfClass('Humanoid') and targe:FindFirstChildOfClass('Humanoid').Health > 0 and num < 11 do
            if targe.Head:FindFirstChild('Died') then
                tone = math.random(6, 12) / 10
                targe.Head.Died.PlaybackSpeed = tone
                targe.Head.Died:Play()
            else
                local deathsound = Instance.new('Sound',targe.Head)
                deathsound.Name = ""Died""
                deathsound.SoundId = 'rbxasset://sounds/uuhhh.mp3'
                deathsound.Volume = 0.65
                deathsound.EmitterSize = 5
                deathsound.MaxDistance = 150
                tone = math.random(5, 15) / 10
                targe.Head.Died.PlaybackSpeed = tone
                targe.Head.Died:Play()
            end
            targe:FindFirstChildOfClass('Humanoid').Health = targe:FindFirstChildOfClass('Humanoid').Health - 7
            num = num+1
            wait(0.325)
        end
        targe:FindFirstChildOfClass('Humanoid').Health = 0
        wait()
        killz(targe,'Head',nil,nil,false,true)
        wait(2)
        targe:Remove()
    end)
    doit()
end

function liedown()
    local doit = coroutine.wrap(function()
    local targe = grabbed
        wait(2)
        if targe and targe:FindFirstChildOfClass('Humanoid') then
            targe:FindFirstChildOfClass('Humanoid').PlatformStand = false
        end
    end)
    doit()
end

function grab()
    local doit = coroutine.wrap(function()
    acting = true
    me:FindFirstChildOfClass('Humanoid').WalkSpeed = me:FindFirstChildOfClass('Humanoid').WalkSpeed + 3
    local arm = me[""Right Arm""]
    local tors = me.Torso
    local arm2 = me[""Left Arm""]
    local humanroot = me.HumanoidRootPart
    local weld2 = Instance.new('Weld',arm)
    weld2.Part0 = arm
    weld2.Part1 = tors
    weld2.C0 = CFrame.new(-1.5,0,0) * CFrame.Angles(0, 0, 0)
    local weld3 = Instance.new('Weld',arm2)
    weld3.Part0 = arm2
    weld3.Part1 = tors
    weld3.C0 = CFrame.new(1.5,0,-0.3) * CFrame.Angles(0.3,0.1,0)
    for i = 0,1,0.05 do
        if me:FindFirstChild('Right Arm') == nil or me:FindFirstChild('Torso') == nil or weld2 == nil or humanroot == nil then return end
        weld2.C0 = weld2.C0:lerp(CFrame.new(-1.2,1.3,0.4)*CFrame.Angles(0.5,0,-1.2),i)
        weld3.C0 = weld3.C0:lerp(CFrame.new(1.2,1.3,0)*CFrame.Angles(0,0,1.2),i)
        knifeweld.C1 = CFrame.fromEulerAnglesXYZ(1.55, math.rad(-90), -1.55) * CFrame.new(0, 0.95, 0)
        wait(0.01)
    end
    grabbing = true
    trail.Enabled = true
    for i = 0,1,0.10 do
        if me:FindFirstChild('Right Arm') == nil or me:FindFirstChild('Torso') == nil or weld2 == nil or humanroot == nil then return end
        weld2.C0 = weld2.C0:lerp(CFrame.new(-0.9, 0.80, -1.1)* CFrame.Angles(-1.5, 0, -1.3), i)
        weld3.C0 = weld3.C0:lerp(CFrame.new(0.8, 1, -0.5)* CFrame.Angles(-1.5, 0, 1.1), i)
        wait(0.01)
    end
    trail.Enabled = false
    wait(0.5)
    grabbing = false
    me:FindFirstChildOfClass('Humanoid').WalkSpeed = me:FindFirstChildOfClass('Humanoid').WalkSpeed - 3
    if grabbed == nil then
        for i = 0,1,0.1 do
            if me:FindFirstChild('Right Arm') == nil or me:FindFirstChild('Torso') == nil then return end
            weld2.C0 = weld2.C0:lerp(CFrame.new(-1.5,0,0),i)
            weld3.C0 = weld3.C0:lerp(CFrame.new(1.5,0,0),i)
            knifeweld.C1 = CFrame.fromEulerAnglesXYZ(1.55, math.rad(-90), 1.55) * CFrame.new(0, 0.95, 0)
            wait(0.001)
        end
        weld2:Destroy()
        weld3:Destroy()
        rightshoulderz:Clone().Parent = me.Torso
            leftshoulderz:Clone().Parent = me.Torso
        acting = false
        canClick = true
    end
    end)
    doit()
end

function kill()
             for i, plr in pairs(game.Players:GetChildren()) do
                        if plr.Name ~= game.Players.LocalPlayer.Name then
                        for i = 1, 10 do
                        game.ReplicatedStorage.meleeEvent:FireServer(plr)
                        end
        end
    end
    
    targetweld3pt = grabbed:FindFirstChild(""Right Arm"")
    local targetrightshoulder = rightshoulder
    local targetleftshoulder = leftshoulder
    local targetweld3 = Instance.new(""Weld"", targetweld3pt)
    targetweld3.Part0 = grabbed.Torso
    targetweld3.Part1 = targetweld3pt
    targetweld3.C0 = CFrame.Angles(0, 0, 0) * CFrame.new(1.5, 0, 0)
    
    local doit = coroutine.wrap(function()
    local arm = me[""Right Arm""]
    local tors = grabbed.Torso
    local arm2 = me[""Left Arm""]
    if arm:FindFirstChildOfClass('Weld') == nil or arm2:FindFirstChildOfClass('Weld') == nil then return end
    doing = true
    local weld2 = arm:FindFirstChildOfClass('Weld')
    local weld3 = arm2:FindFirstChildOfClass('Weld')
    local humanroot = me.HumanoidRootPart
    
    for i = 0,1,0.1 do
        if me:FindFirstChild('Right Arm') == nil or me:FindFirstChild('Torso') == nil or weld2 == nil or weld3 == nil then return end
        weld2.C0 = weld2.C0:lerp(CFrame.new(-0.9, 0.80, -1.1)* CFrame.Angles(-1.9, 0, -1.4), i)
        weld3.C0 = weld3.C0:lerp(CFrame.new(0.8, 0.5, -0.5)* CFrame.Angles(-1.5, 0.4, 1.1), i)
        wait(0.01)
    end
    
    audio:Stop()
    audio.SoundId = ""rbxassetid://517040733""
    tone = math.random(1, 3)
    if tone == 1 then audio.PlaybackSpeed = 0.8 audio.TimePosition = 0.3 end
    if tone == 2 then audio.PlaybackSpeed = 1 audio.TimePosition = 0.1 end
    if tone == 3 then audio.PlaybackSpeed = 1.2 audio.TimePosition = 0.2 end
    audio:Play()
    
    local bleedpart = Instance.new(""Part"", grabbed)
    bleedpart.Size = Vector3.new(0.2, 0.2, 0.2)
    bleedpart.Color = Color3.new(115/225, 115/225, 115/225)
    bleedpart.CanCollide = false
    bleedpart.Position = grabbed.Head.Position + Vector3.new(0, 1, 0)
    bleedpart.Transparency = 1
    
    local bleedpartweld = Instance.new(""Weld"", grabbed.Torso)
    bleedpartweld.Part0 = grabbed.Torso
    bleedpartweld.Part1 = bleedpart
    bleedpartweld.C0 = CFrame.Angles(-1, 0, -0.35) * CFrame.new(0, 1, 0.8)
    local coru=coroutine.wrap(function()
    bleed(bleedpart)
    end)
    coru()
    
    local slightthrow = Instance.new(""BodyThrust"", grabbed.Torso)
    slightthrow.Force = Vector3.new(0, 0, -2500)
    
    local slightthrow2 = Instance.new(""BodyAngularVelocity"", grabbed.Torso)
    slightthrow2.AngularVelocity = Vector3.new(0, -1000, 0)
    slightthrow2.MaxTorque = Vector3.new(1000, 1000, 1000)
    
    if grabbed:FindFirstChildOfClass('Humanoid') then
        grabbed:FindFirstChildOfClass('Humanoid').PlatformStand = true
    end
    
    killz(grabbed,'Left Leg')
    killz(grabbed,'Left Arm')
    killz(grabbed,'Right Leg')
    killz(grabbed,'Right Arm')
    
    trail.Enabled = true
    
    for i = 0,1,0.2 do
        if me:FindFirstChild('Right Arm') == nil or me:FindFirstChild('Torso') == nil or weld2 == nil or weld3 == nil then return end
        weld2.C0 = weld2.C0:lerp(CFrame.new(-0.9, 1.7, -0.5)* CFrame.Angles(-0.25, 0, -1.4), i)
        weld3.C0 = weld3.C0:lerp(CFrame.new(0.8, 1.6, -0.5)* CFrame.Angles(-1.5, -1, 1.1), i)
        wait(0.01)
    end
    
    trail.Enabled = false
    
    bleedout()
    
    rightshoulderz:Clone().Parent = me.Torso
        leftshoulderz:Clone().Parent = me.Torso
    grabbed = nil
    
    if humanroot:FindFirstChild('Holder') then
        humanroot.Holder:Destroy()
    end
    
    wait(0.2)
    slightthrow:Remove()
    slightthrow2:Remove()
    for i = 0,1,0.05 do
        if me:FindFirstChild('Right Arm') == nil or me:FindFirstChild('Torso') == nil or weld2 == nil or weld3 == nil then return end
        weld2.C0 = weld2.C0:lerp(CFrame.new(-1.5, 0, 0)* CFrame.Angles(0, 0, 0), i)
        weld3.C0 = weld3.C0:lerp(CFrame.new(1.5, 0, 0)* CFrame.Angles(0, 0, 0), i)
        knifeweld.C1 = CFrame.fromEulerAnglesXYZ(1.55, math.rad(-90), 1.55) * CFrame.new(0, 0.95, 0)
        wait(0.01)
    end
    
    weld2:Destroy()
    weld3:Destroy()
    targetweld = nil
    targetweld2 = nil
    targetweld3 = nil
    rightshoulderz:Clone().Parent = me.Torso
    leftshoulderz:Clone().Parent = me.Torso
    acting = false
    canClick = true
    doing = false
    end)
    doit()
end

function finish()
    if finishing == true then return end
    finishing = true
    acting = true
    decearingTHING = math.random(1, 100)
    if decearingTHING == 4 then
        decearingEGG = Instance.new(""Sound"", me.Torso)
        decearingEGG.SoundId = ""rbxassetid://138084557""
        decearingEGG.PlaybackSpeed = math.random(10, 12) / 10
        decearingEGG.TimePosition = 0.2
        decearingEGG:Play()
    end
    me.Humanoid.WalkSpeed = 0
    me.Humanoid.JumpPower = 0
    
    local rightarm = Instance.new(""Weld"", me.Torso)
    rightarm.Part0 = me.Torso
    rightarm.Part1 = me[""Right Arm""]
    rightarm.C0 = CFrame.Angles(0, 0, 0) * CFrame.new(1.5, 0, 0)
    
    local tors = Instance.new(""Weld"", me.HumanoidRootPart)
    tors.Part0 = me.HumanoidRootPart
    tors.Part1 = me.Torso
    tors.C0 = CFrame.Angles(0, 0, 0) * CFrame.new(0, 0, 0)
    
    local rightleg = Instance.new(""Weld"", me.Torso)
    rightleg.Part0 = me.Torso
    rightleg.Part1 = me[""Right Leg""]
    rightleg.C0 = CFrame.Angles(0, 0, 0) * CFrame.new(0.5, -2, 0)
    
    local leftleg = Instance.new(""Weld"", me.Torso)
    leftleg.Part0 = me.Torso
    leftleg.Part1 = me[""Left Leg""]
    leftleg.C0 = CFrame.Angles(0, 0, 0) * CFrame.new(-0.5, -2, 0)
    
    for i = 0, 1, 0.05 do
        tors.C0 = tors.C0:lerp(CFrame.new(0, 0, 0) * CFrame.Angles(math.rad(15), 0, 0), i)
        leftleg.C0 = leftleg.C0:lerp(CFrame.new(-0.5, -2, 0.2) * CFrame.Angles(math.rad(-15), 0, 0), i)
        rightleg.C0 = rightleg.C0:lerp(CFrame.new(0.5, -2, 0.2) * CFrame.Angles(math.rad(-15), 0, 0), i)
        rightarm.C0 = rightarm.C0:lerp(CFrame.new(1.5, 1.9, 0) * CFrame.Angles(math.rad(179), math.rad(179), 0), i)
        wait()
    end
    for i=1,finishnum do
        local num1 = 0.5
        local num2 = 0.5
        local num3 = 0.25
    if finishnum ~= 1 then
        num3 = 0
    end
    trail.Enabled = true
    for i = 0, 1, num1 do
        tors.C0 = tors.C0:lerp(CFrame.new(0, -1.5, 0) * CFrame.Angles(math.rad(-60), 0, 0), i)
        leftleg.C0 = leftleg.C0:lerp(CFrame.new(-0.5, -1.5, 0) * CFrame.Angles(math.rad(0), 0, 0), i)
        rightleg.C0 = rightleg.C0:lerp(CFrame.new(0.5, -0.7, -1) * CFrame.Angles(math.rad(10), 0, 0), i)
        rightarm.C0 = rightarm.C0:lerp(CFrame.new(1.5, 1.9, -1) * CFrame.Angles(math.rad(160), math.rad(150), 0), i)
        wait()
    end
    wait()
    for i = 0, 1, num2 do
        tors.C0 = tors.C0:lerp(CFrame.new(0, -1, 0) * CFrame.Angles(math.rad(-20), 0, 0), i)
        leftleg.C0 = leftleg.C0:lerp(CFrame.new(-0.5, -1.5, 0) * CFrame.Angles(math.rad(-30), 0, 0), i)
        rightleg.C0 = rightleg.C0:lerp(CFrame.new(0.5, -0.7, -1) * CFrame.Angles(math.rad(-20), 0, 0), i)
        rightarm.C0 = rightarm.C0:lerp(CFrame.new(1.5, 1.9, 0.2) * CFrame.Angles(math.rad(250), math.rad(180), 0), i)
        wait()
    end
    trail.Enabled = false
    wait(num3)
    end
    wait()
    for i = 0, 1, 0.05 do
        tors.C0 = tors.C0:lerp(CFrame.new(0, 0, 0) * CFrame.Angles(0, 0, 0), i)
        leftleg.C0 = leftleg.C0:lerp(CFrame.new(-0.5, -2, 0) * CFrame.Angles(0, 0, 0), i)
        rightleg.C0 = rightleg.C0:lerp(CFrame.new(0.5, -2, 0) * CFrame.Angles(0, 0, 0), i)
        rightarm.C0 = rightarm.C0:lerp(CFrame.new(1.5, 0, 0) * CFrame.Angles(0, 0, 0), i)
        wait()
    end
    tors:Remove()
    rightarm:Remove()
    rightleg:Remove()
    leftleg:Remove()
    rightshoulderz:Clone().Parent = me.Torso
    leftshoulderz:Clone().Parent = me.Torso
    torsojoint:Clone().Parent = me.HumanoidRootPart
    lefthipz:Clone().Parent = me.Torso
    righthipz:Clone().Parent = me.Torso
    me.Humanoid.JumpPower = 50
    me.Humanoid.WalkSpeed = 16
    acting = false
    canClick = true
    doing = false
    hit = false
    finishing = false
    if decearingTHING == 4 then
        decearingEGG:Remove()
    end
end

function throw()
    if grabbed.Torso:FindFirstChild(""TargetWeld"") == nil or grabbed:FindFirstChildOfClass('Humanoid').Health <= 0 then return end
    paralyzed = false
    targetweld = grabbed.Torso.TargetWeld
    local ree = grabbed:FindFirstChild(""Left Arm"")
    targetweld2 =nil
    if ree and ree:FindFirstChild(""Weld"") then
        targetweld2 = ree.Weld
    end
    
    for i, v in pairs(grabbed:GetChildren()) do
        if v.Name == ""Part"" then
            v.CanCollide = true
        end
    end
    
    
    local doit = coroutine.wrap(function()
    local arm = me[""Right Arm""]
    local tors = grabbed.Torso
    local arm2 = me[""Left Arm""]
    local targrightshoulder = rightshoulder
    
    local targleftshoulder = leftshoulder
    if arm:FindFirstChildOfClass('Weld') == nil or arm2:FindFirstChildOfClass('Weld') == nil then return end
    doing = true
    local weld2 = arm:FindFirstChildOfClass('Weld')
    local weld3 = arm2:FindFirstChildOfClass('Weld')
    local humanroot = me.HumanoidRootPart
    
    for i = 0,1,0.2 do
        if me:FindFirstChild('Right Arm') == nil or me:FindFirstChild('Torso') == nil or weld2 == nil or weld3 == nil then return end
        weld2.C0 = weld2.C0:lerp(CFrame.new(-0.9, 1.7, -0.5)* CFrame.Angles(-0.25, 1, -1.4), i)
        weld3.C0 = weld3.C0:lerp(CFrame.new(0.8, 1.6, -0.5)* CFrame.Angles(-1.5, -1, 1.1), i)
        targetweld.C0 = targetweld.C0:lerp(CFrame.new(0, 1.5, 0)*CFrame.Angles(0, 0, 0), i)
        if targetweld2 then
            targetweld2.C0 = targetweld2.C0:lerp(CFrame.new(-1.5, 0, 0)*CFrame.Angles(0, 0, 0), i)
        end
        wait(0.01)
    end
    
    audio:Stop()
    audio.SoundId = ""rbxassetid://536642316""
    tone = math.random(1, 3)
    if tone == 1 then audio.PlaybackSpeed = 0.8 audio.TimePosition = 0.08 end
    if tone == 2 then audio.PlaybackSpeed = 1 audio.TimePosition = 0.1 end
    if tone == 3 then audio.PlaybackSpeed = 1.2 audio.TimePosition = 0.12 end
    audio:Play()
    
    local slightthrow = Instance.new(""BodyVelocity"", grabbed.Torso)
    slightthrow.Velocity = Vector3.new(0,20,0)+(me.Torso.CFrame.lookVector*20)
    slightthrow.P = 5000
    slightthrow.MaxForce = Vector3.new(9000001,9000001,9000001)
    local point = grabbed.Torso.Position
    local aaaaaa = grabbed
    liedown()
    
    rightshoulderz:Clone().Parent = me.Torso
            leftshoulderz:Clone().Parent = me.Torso
    grabbed = nil
    
    if humanroot:FindFirstChild('Holder') then
        humanroot.Holder:Destroy()
    end
    local coru = coroutine.wrap(function()
        while aaaaaa and aaaaaa:FindFirstChild('Torso') and (aaaaaa.Torso.Position-point).magnitude < 5 do wait(0.001) end
        slightthrow:Remove()
    end)
    coru()
    
    for i = 0,1,0.05 do
        if me:FindFirstChild('Right Arm') == nil or me:FindFirstChild('Torso') == nil or weld2 == nil or weld3 == nil then return end
        weld2.C0 = weld2.C0:lerp(CFrame.new(-1.5,0,0),i)
        weld3.C0 = weld3.C0:lerp(CFrame.new(1.5,0,0),i)
        wait(0.01)
    end
    weld2:Destroy()
    weld3:Destroy()
    targetweld:Remove()
    if targetweld2 then
        targetweld2:Remove()
    end
    if rightshoulder then
    rightshoulder:Clone().Parent = tors
    end
    if leftshoulder then
    leftshoulder:Clone().Parent = tors
    end
    headweld:Clone().Parent = tors
    rightshoulderz:Clone().Parent = me.Torso
            leftshoulderz:Clone().Parent = me.Torso
    acting = false
    canClick = true
    doing = false
    end)
    doit()
end

cfn,ang,mr,int=CFrame.new,CFrame.Angles,math.rad,Instance.new
bc=BrickColor.new
local minimumsize = Vector3.new(0.7,0.7,0.7) 
local surface_between_splitted_parts = 'SmoothNoOutlines'
local fragmentable = workspace
local list = {}
local brickcount = 0
local storage = {}
local fillup = 1000
local maximumstorage = 2000 
local storage_position = Vector3.new(0,0,5000) 
local stored_partsize = Vector3.new(1,1,1) 
local parts_created_per_frame = 5 

local minimumsize = Vector3.new(0.7,0.7,0.7) 
local surface_between_splitted_parts = 'SmoothNoOutlines'
local fragmentable = workspace
local list = {}
local brickcount = 0
local storage = {}
local fillup = 1000
local maximumstorage = 2000
local storage_position = Vector3.new(0,0,5000) 
local stored_partsize = Vector3.new(1,1,1)
local parts_created_per_frame = 5 


function fragmentate(cframe,size,color,explosion_position,explosion_blastradius,backsurface,bottomsurface,frontsurface,leftsurface,rightsurface,topsurface,transparency,reflectance,material)
    local xi = size.X >= minimumsize.X*(1+explosion_blastradius/16) and 2 or 1 
    local yi = size.Y >= minimumsize.Y*(1+explosion_blastradius/16) and 2 or 1
    local zi = size.Z >= minimumsize.Z*(1+explosion_blastradius/16) and 2 or 1
    if xi == 1 and yi == 1 and zi == 1 or (cframe.p-explosion_position).magnitude > size.magnitude/2 + explosion_blastradius then 
        if xi == 1 and yi == 1 and zi == 1 then return end 
        if #storage > 0 then
            local p = storage[1]
            p.BrickColor = color
            p.Size = size
            p.Anchored = false
            p.BackSurface = backsurface
            p.BottomSurface = bottomsurface
            p.FrontSurface = frontsurface
            p.LeftSurface = leftsurface
            p.RightSurface = rightsurface
            p.TopSurface = topsurface
            p.Transparency = transparency
            p.CFrame = cframe
            p.Reflectance = reflectance
            p.Material = material
            game:GetService('Debris'):AddItem(p,30)
            p:BreakJoints()
            table.remove(storage,1)
        else
            local p = Instance.new(""Part"",fragmentable)
            p.BrickColor = color
            p.FormFactor = ""Custom""
            p.Size = size
            p.BackSurface = backsurface
            p.BottomSurface = bottomsurface
            p.FrontSurface = frontsurface
            p.LeftSurface = leftsurface
            p.RightSurface = rightsurface
            p.TopSurface = topsurface
            p.Transparency = transparency
            p.Material = material
            if p.Transparency>0.285 then
                p.Anchored = false
            else
                p.Anchored=false
                p.Material='Wood'
                game:GetService('Debris'):AddItem(p,10)
            end
            p.CFrame = cframe
            p.Reflectance = reflectance
            p:BreakJoints()
        end
        return 
    end
    local mody = math.random(-125,125)/1000
    for y = 1,yi do
        if math.random()> 0.5 then
            local modx = math.random(-125,125)/1000
            for x = 1,xi do
                local modz = math.random(-125,125)/1000
                for z = 1,zi do --offset = x/xi-0.75+modx)
                    fragmentate(cframe*CFrame.new(size.X*(xi==1 and 0 or x/xi-0.75+modx),size.Y*(yi==1 and 0 or y/yi-0.75+mody),size.Z*(zi==1 and 0 or z/zi-0.75+modz)),
                        Vector3.new(xi == 2 and size.X*(1-2*math.abs(x/xi-0.75+modx)) or size.X,yi == 2 and size.Y*(1-2*math.abs(y/yi-0.75+mody)) or size.Y,
                        zi == 2 and size.Z*(1-2*math.abs(z/zi-0.75+modz)) or size.Z or mustardfoot_was_here),color,explosion_position,explosion_blastradius,
                        z~=zi and surface_between_splitted_parts or backsurface,y==2 and surface_between_splitted_parts or bottomsurface,
                        z==2 and surface_between_splitted_parts or frontsurface,x==2 and surface_between_splitted_parts or leftsurface,x~=xi and surface_between_splitted_parts or rightsurface,
                        y~=yi and surface_between_splitted_parts or topsurface,transparency,reflectance,material) 
                end
                
            end
        else
            local modz = math.random(-125,125)/1000
            for z = 1,zi do
                local modx = math.random(-125,125)/1000
                for x = 1,xi do
                    fragmentate(cframe*CFrame.new(size.X*(xi==1 and 0 or x/xi-0.75+modx),size.Y*(yi==1 and 0 or y/yi-0.75+mody),size.Z*(zi==1 and 0 or z/zi-0.75+modz)),
                        Vector3.new(xi == 2 and size.X*(1-2*math.abs(x/xi-0.75+modx)) or size.X,yi == 2 and size.Y*(1-2*math.abs(y/yi-0.75+mody)) or size.Y,
                        zi == 2 and size.Z*(1-2*math.abs(z/zi-0.75+modz)) or size.Z),color,explosion_position,explosion_blastradius,
                        z~=zi and surface_between_splitted_parts or backsurface,y==2 and surface_between_splitted_parts or bottomsurface,
                        z==2 and surface_between_splitted_parts or frontsurface,x==2 and surface_between_splitted_parts or leftsurface,x~=xi and surface_between_splitted_parts or rightsurface,
                        y~=yi and surface_between_splitted_parts or topsurface,transparency,reflectance,material)
                end
            end
        end
    end             
end

function start_fragmentation(position,radius,nuh)
    local search = Region3.new(position-Vector3.new(radius,radius,radius)*1.1,position+Vector3.new(radius,radius,radius)*1.1)
    repeat
    local finish = false
    local parts = workspace:FindPartsInRegion3WithIgnoreList(search,list,100)
    for i = 1,#parts do
        table.insert(list,1,parts[i])
    end
    finish = true
    until #parts < 100 and finish
    local t = tick()
    for i = 1,#list do
        local p = list[i]
        if p:IsA('UnionOperation') == false and p:IsA('CornerWedgePart') == false and p:IsA('TrussPart') == false and p:IsA('WedgePart') == false and p.Parent and p.Parent ~= obj1 and p.Parent.Name ~= ""Projectile"" and p:IsDescendantOf(fragmentable) and p:GetMass()<50000 and p.Transparency>0.285 and p.Name~='Base' and p.Parent:FindFirstChildOfClass('Humanoid') == nil and p.Parent.Parent:FindFirstChildOfClass('Humanoid') == nil and p:IsDescendantOf(me)==false then
            fragmentate(p.CFrame,p.Size,p.BrickColor,position,radius,p.BackSurface,p.BottomSurface,p.FrontSurface,p.LeftSurface,p.RightSurface,p.TopSurface,p.Transparency,p.Reflectance,p.Material)
            if #storage < maximumstorage and p.Shape == ""Block"" then 
                p.Anchored = false
                p.FormFactor = ""Custom""
                p.Size = stored_partsize
                p.Position = storage_position
                table.insert(storage,1,p)
            else 
                p:Destroy()
            end
        end
        if nuh == false and p.Parent and p.Parent ~= obj1 and p.Parent.Name ~= ""Projectile"" and p:IsDescendantOf(fragmentable) and p:GetMass()<53000 and p.Transparency<0.05 and p.Name~='Base' and tostring(p.Material)=='Enum.Material.Wood' and p:IsDescendantOf(me)==false then
            fragmentate(p.CFrame,p.Size,p.BrickColor,position,radius,p.BackSurface,p.BottomSurface,p.FrontSurface,p.LeftSurface,p.RightSurface,p.TopSurface,p.Transparency,p.Reflectance,p.Material)
            if #storage < maximumstorage and p.Shape == ""Block"" then
                p.Anchored = false
                p.Material='Wood'
                p.FormFactor = ""Custom""
                p.Size = stored_partsize
                p.Position = storage_position
                table.insert(storage,1,p)
            else 
                p:Destroy()
            end
        end
    end 
    list = {}
end


function fling()
local doit = coroutine.wrap(function()
if me:FindFirstChild('Right Arm') and me:FindFirstChild('Torso') and me:FindFirstChild('HumanoidRootPart') then
    acting = true
    for i=1,finishnum do
    local weld2 = Instance.new('Weld',me[""Right Arm""])
    weld2.Part0 = me[""Right Arm""]
    weld2.Part1 = me[""Torso""]
    weld2.C0 = CFrame.new(-1.5,0,0)
    if finishnum == 1 then
    for i = 0,1,0.05 do
        if me:FindFirstChild('Right Arm') == nil or me:FindFirstChild('Torso') == nil or weld2 == nil then return end
        weld2.C0 = weld2.C0:lerp(CFrame.new(-1.5,0.9,-0.5)*CFrame.Angles(-math.pi/0.75,-math.pi/8,0),i)
        wait(0.01)  
    end
    end
    audio.SoundId = ""rbxassetid://166083610""
    audio.PlaybackSpeed = 1
    audio.TimePosition = 0.1
    audio:Play()
    if finishnum == 1 then
    for i = 0,1,0.5 do
        if me:FindFirstChild('Right Arm') == nil or me:FindFirstChild('Torso') == nil or weld2 == nil then return end
        weld2.C0 = weld2.C0:lerp(CFrame.new(-1.5,1.2,0.1)*CFrame.Angles(math.pi/0.9,0,0),i)
        wait(0.001) 
    end
    end
    weld2.C0 = CFrame.new(-1.5,1.2,0.1)*CFrame.Angles(math.pi/0.9,0,0)
    local knofe = obj1:Clone()
    for i, v in pairs(obj1:GetChildren()) do
        if v:IsA('BasePart') then
        v.Transparency = 1
        end
    end
    knofe.Parent = workspace
    knofe.Name = ""Projectile""
    knofe.Grab.CFrame = CFrame.new(knofe.Grab.CFrame.p, mouse.Hit.p)*CFrame.Angles(0,math.pi/2,0)
    knofe:FindFirstChild(""Trail"", true).Enabled = true
    local heck = Instance.new('BodyVelocity',knofe.Grab)
    heck.Velocity = (knofe.Grab.CFrame*CFrame.Angles(0,math.pi/-2,0)).lookVector*120
    local coru = coroutine.wrap(function()
        wait(0.45)
        if heck then
            heck:Destroy()
        end
    end)
    coru()
    local able = true
    knofe[""big ass knife""].Touched:connect(function(hit)
        if hit.Parent and hit.Parent:FindFirstChildOfClass('Humanoid') and hit.Transparency < 1 and knofe.Grab.CanCollide == false and hit.Parent ~= me and hit.Parent.Parent ~= me then
            local thing = hit.Parent:FindFirstChildOfClass('Humanoid')
            local ree = hit.Parent
            if thing == nil then
                ree = hit.Parent.Parent
            end
            if ree:FindFirstChildOfClass('Humanoid').Health > 0 then
                knofe:FindFirstChild(""Trail"", true).Enabled = false
                game:GetService('Debris'):AddItem(knofe,5)
                tone = math.random(1, 3)
                local sound = Instance.new('Sound',knofe.Grab)
                if tone == 1 then sound.SoundId = ""rbxassetid://220833967"" end
                if tone == 2 then sound.SoundId = ""rbxassetid://220833976"" end
                if tone == 3 then sound.SoundId = ""rbxassetid://220834000"" end
                sound.PlaybackSpeed = 1
                sound:Play()
                for i, v in pairs(knofe:GetChildren()) do
                    if v:IsA('BasePart') then
                    v.CanCollide = true
                    v.Anchored = true
                    end
                end
                hit.Anchored = true
                if ree:FindFirstChildOfClass('Humanoid') and hit.Name == ""Torso"" or hit.Name == ""Head"" then
                    ree:FindFirstChildOfClass('Humanoid').Health = 0
                end
                wait()
                killz(ree,hit.Name,knofe)
            else
                knofe:FindFirstChild(""Trail"", true).Enabled = false
                heck.Velocity = Vector3.new(0,0,0)
                heck:Destroy()
                game:GetService('Debris'):AddItem(knofe,5)
                tone = math.random(1, 3)
                local sound = Instance.new('Sound',knofe.Grab)
                if tone == 1 then sound.SoundId = ""rbxassetid://220833967"" end
                if tone == 2 then sound.SoundId = ""rbxassetid://220833976"" end
                if tone == 3 then sound.SoundId = ""rbxassetid://220834000"" end
                sound.PlaybackSpeed = 1
                sound:Play()
                for i, v in pairs(knofe:GetChildren()) do
                    if v:IsA('BasePart') then
                    v.Anchored = false
                    end
                end
                hit.Anchored = true
                wait(0.001)
                hit.Anchored = false
                for i, v in pairs(knofe:GetChildren()) do
                    if v:IsA('BasePart') then
                    v.Anchored = false
                    end
                end
                if knofe then
                    local coru = coroutine.wrap(function()
                        if hit then
                            local uno = Instance.new('Part',workspace)
                            local dos = Instance.new('Part',workspace)
                            uno.CFrame = hit.CFrame
                            dos.CFrame = knofe[""big ass knife""].CFrame
                            local weld = Instance.new('Weld',knofe[""big ass knife""])
                            weld.Part0 = hit
                            weld.Part1 = knofe[""big ass knife""]
                            weld.C0 = uno.CFrame:toObjectSpace(dos.CFrame)
                            uno:Destroy()
                            dos:Destroy()
                        end
                    end)
                    coru()
                end
            end
        elseif hit.Parent and hit.Parent ~= me and hit.Parent.Parent ~= me and hit.CanCollide and knofe.Grab.CanCollide == false then
            if hit.Transparency and (hit.Transparency<=0.285 or hit:GetMass()<=3000) then
                knofe:FindFirstChild(""Trail"", true).Enabled = false
                local sound = Instance.new('Sound',knofe.Grab)
                sound.SoundId = 'rbxassetid://267585646'
                sound:Play()
                for i,v in pairs(knofe:GetChildren()) do
                    if v:IsA('BasePart') then
                        v.Anchored = true
                    end
                end
                wait()
                heck.Velocity = Vector3.new(0,0,0)
                heck:Destroy()
                local uno = Instance.new('Part',workspace)
                            local dos = Instance.new('Part',workspace)
                            uno.CFrame = hit.CFrame
                            dos.CFrame = knofe[""big ass knife""].CFrame
                            local weld = Instance.new('Weld',knofe[""big ass knife""])
                            weld.Part0 = hit
                            weld.Part1 = knofe[""big ass knife""]
                            weld.C0 = uno.CFrame:toObjectSpace(dos.CFrame)
                            uno:Destroy()
                            dos:Destroy()
                            for i,v in pairs(knofe:GetChildren()) do
                    if v:IsA('BasePart') then
                        v.Anchored = false
                    end
                end
                game:GetService('Debris'):AddItem(knofe,5)
                for i,v in pairs(knofe:GetChildren()) do
                    if v:IsA('BasePart') then
                    v.CanCollide = true
                    end
                end
            end
            if hit.Parent and hit.Transparency>0.285 and able == true and hit:GetMass()<3000 and hit.Parent:FindFirstChildOfClass('Humanoid') == nil and (hit.Parent.Parent == nil or hit.Parent.Parent:FindFirstChildOfClass('Humanoid') == nil) then
                knofe:FindFirstChild(""Trail"", true).Enabled = false
                able = false
                local sound = Instance.new('Sound',knofe.Grab)
                sound.SoundId = 'rbxassetid://144884907'
                sound:Play()
                local coru = coroutine.wrap(function()
                    start_fragmentation(knofe[""big ass knife""].Position,1.25,knofe)
                end)
                coru()
            end
        end
    end)
    if finishnum == 1 then
    for i= 0,1,0.1 do
        if me:FindFirstChild('Right Arm') == nil or me:FindFirstChild('Torso') == nil or weld2 == nil then return end
        weld2.C0 = weld2.C0:lerp(CFrame.new(-1.5,0,0),i)
        wait(0.001)
    end
    else
        for i= 0,1,0.5 do
        if me:FindFirstChild('Right Arm') == nil or me:FindFirstChild('Torso') == nil or weld2 == nil then return end
        weld2.C0 = weld2.C0:lerp(CFrame.new(-1.5,0,0),i)
        wait(0.001)
    end
    end
    for i,v in pairs(obj1:GetChildren()) do
        if v:IsA('BasePart') then
        v.Transparency = 0
        end
    end
    weld2:Destroy()
    rightshoulderz:Clone().Parent = me.Torso
    end
    acting = false
    canClick = true
end
end)
doit()
end

function instasplode()
    local coru = coroutine.wrap(function()
        acting = true
        for i=1,1 do
        local weld2 = Instance.new('Weld',me[""Right Arm""])
        weld2.Part0 = me[""Right Arm""]
        weld2.Part1 = me[""Torso""]
        weld2.C0 = CFrame.new(-1.5,0,0)
        if finishnum == 1 then
        for i = 0,1,0.05 do
            if me:FindFirstChild('Right Arm') == nil or me:FindFirstChild('Torso') == nil or weld2 == nil then return end
            weld2.C0 = weld2.C0:lerp(CFrame.new(-1.5,0.9,-0.5)*CFrame.Angles(-math.pi/0.75,-math.pi/8,0),i)
            wait(0.01)  
        end
        end
        weld2.C0 = CFrame.new(-1.5,0.9,-0.5)*CFrame.Angles(-math.pi/0.75,-math.pi/8,0)
        audio.SoundId = ""rbxassetid://166083610""
        audio.PlaybackSpeed = 1
        audio.TimePosition = 0.1
        audio:Play()
        if finishnum == 1 then
        for i = 0,1,0.5 do
            if me:FindFirstChild('Right Arm') == nil or me:FindFirstChild('Torso') == nil or weld2 == nil then return end
            weld2.C0 = weld2.C0:lerp(CFrame.new(-1.5,1.2,0.1)*CFrame.Angles(math.pi/0.9,0,0),i)
            wait(0.001) 
        end
        end
        weld2.C0 = CFrame.new(-1.5,1.2,0.1)*CFrame.Angles(math.pi/0.9,0,0)
        local knofe = obj1:Clone()
        for i,v in pairs(obj1:GetChildren()) do
            if v:IsA('BasePart') then
            v.Transparency = 1
            end
        end
        knofe.Parent = workspace
        knofe.Name = ""Projectile""
        knofe.Grab.CFrame = CFrame.new(knofe.Grab.CFrame.p, mouse.Hit.p)*CFrame.Angles(0,math.pi/2,0)
        knofe:FindFirstChild(""Trail"", true).Enabled = false
        fireofjesUS = Instance.new(""Fire"", knofe.Grab)
        local heck = Instance.new('BodyVelocity',knofe.Grab)
        heck.Velocity = (knofe.Grab.CFrame*CFrame.Angles(0,math.pi/-2,0)).lookVector*120
        local coru = coroutine.wrap(function()
            wait(0.45)
            if heck then
                heck:Destroy()
            end
        end)
        coru()
        knofe[""big ass knife""].Touched:connect(function(hit)
            if hit.Parent ~= me and hit.Parent.Parent ~= me and hit.Transparency < 1 and knofe.Grab.CanCollide == false then
                heck.Velocity = Vector3.new(0,0,0)
                heck:Destroy()
                for i,v in pairs(knofe:GetChildren()) do
                    if v:IsA('BasePart') then
                    v.CanCollide = true
                    end
                end
                local hum = hit.Parent:FindFirstChildOfClass('Humanoid')
                if hum == nil then
                    hum = hit.Parent.Parent:FindFirstChildOfClass('Humanoid')
                end
                if knofe then
                    local coru = coroutine.wrap(function()
                        if hit then
                            local uno = Instance.new('Part',workspace)
                            local dos = Instance.new('Part',workspace)
                            uno.CFrame = hit.CFrame
                            dos.CFrame = knofe[""big ass knife""].CFrame
                            local weld = Instance.new('Weld',knofe[""big ass knife""])
                            weld.Part0 = hit
                            weld.Part1 = knofe[""big ass knife""]
                            weld.C0 = uno.CFrame:toObjectSpace(dos.CFrame)
                            uno:Destroy()
                            dos:Destroy()
                        end
                    end)
                    coru()
                end
                    local sound = Instance.new('Sound',knofe.Grab)
                    sound.Name = ""BOOM""
                    sound.EmitterSize = 25
                    sound.SoundId = 'rbxassetid://476477344'
                    sound.Volume = 0.5
                    sound:Play()
                    local exppart = Instance.new(""Part"", game.Workspace)
                    exppart.Size = Vector3.new(0.2, 0.2, 0.2)
                    exppart.Anchored = true
                    exppart.CanCollide = false
                    exppart.CFrame = CFrame.new(knofe.Grab.CFrame.p)
                    exppart.Transparency = 1
                    local expaccent = Instance.new(""ParticleEmitter"", exppart)
                    expaccent.Color = ColorSequence.new({ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 0)), ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 0))})
                    expaccent.LightEmission = 0.2
                    expaccent.LightInfluence = 0.3
                    expaccent.Size = NumberSequence.new({NumberSequenceKeypoint.new(0, 1), NumberSequenceKeypoint.new(1, 0)})
                    expaccent.Acceleration = Vector3.new(0, 30, 0)
                    expaccent.Drag = 15
                    expaccent.LockedToPart = false
                    expaccent.Lifetime = NumberRange.new(0.5, 1.5)
                    expaccent.Rate = 2000
                    expaccent.Speed = NumberRange.new(0,0)
                    expaccent.SpreadAngle = Vector2.new(360, 360)
                    expaccent:Clone().Parent = exppart
                    expaccent:Clone().Parent = exppart
                    local exp = Instance.new('Explosion',game.Workspace)
                    exp.Position = knofe[""big ass knife""].Position
                    exp.ExplosionType = Enum.ExplosionType.NoCraters
                    exp.BlastRadius = 5
                    exp.Visible = false
                    exp.BlastPressure = 0
                    exp.DestroyJointRadiusPercent = 0
                    exp.Hit:connect(function(hit)
                        if hit.Parent and hit.Parent ~= me and hit.Parent.Name ~= ""bitch ass knife"" then
                            wait(0.001)
                            tgt = hit
                            local coru=coroutine.wrap(function(tgtt)
                                local fireofgods = Instance.new(""Fire"", tgtt)
                                fireofgods.Size = 0
                                fireofgods.Heat = 0
                                local fireofgodsaccent = expaccent:Clone()
                                fireofgodsaccent.Parent = hit
                                fireofgodsaccent.Rate = 0
                                fireofgodsaccent.Speed = NumberRange.new(5, 50)
                                fireofgodsaccent.SpreadAngle = Vector2.new(45, 45)
                                fireofgodsaccent.Acceleration = Vector3.new(0, 20, 0)
                                
                                while fireofgods.Size < 10 do
                                    fireofgods.Size = fireofgods.Size + 0.1
                                    fireofgods.Heat = fireofgods.Heat + 0.1
                                    fireofgodsaccent.Rate = fireofgodsaccent.Rate + 1
                                    wait()
                                end
                                if hit.Parent and hit.Parent:FindFirstChildOfClass('Humanoid') == nil and hit.Parent.Parent:FindFirstChildOfClass('Humanoid') == nil then
                                    hit:BreakJoints()
                                elseif hit.Parent and hit.Parent:IsA('Accessory') then
                                    for i,v in pairs(hit:GetChildren()) do
                                        if v:IsA('SpecialMesh') then
                                            v.TextureId = """"
                                        end
                                    end
                                end
                                hit.BrickColor = BrickColor.new(""Black"")
                                for i,v in pairs(hit.Parent:GetChildren()) do
                                    if v:IsA('Shirt') or v:IsA('Pants') then
                                        v:Destroy()
                                    end
                                end
                                
                                while fireofgods.Size > 5 do
                                    fireofgods.Size = fireofgods.Size - 0.1
                                    fireofgods.Heat = fireofgods.Heat - 0.1
                                    wait()
                                end
                                fireofgods:Destroy()
                                if hit.Parent then
                                    if hit.Parent:FindFirstChildOfClass('Humanoid') == nil and hit.Parent.Parent:FindFirstChildOfClass('Humanoid') == nil then
                                        local p = hit
                                        fragmentate(p.CFrame,p.Size,p.BrickColor,p.Position,0.01,p.BackSurface,p.BottomSurface,p.FrontSurface,p.LeftSurface,p.RightSurface,p.TopSurface,p.Transparency,p.Reflectance,p.Material)
                                        hit:Remove()
                                    elseif hit.Parent:FindFirstChildOfClass('Humanoid') ~= nil then
                                        print(hit.Name)
                                        if hit.Name == ""Torso"" or hit.Name == ""Head"" then
                                            print('ohhh YAAAA')
                                            hit.Parent:FindFirstChildOfClass('Humanoid').Health = 0
                                        end
                                        wait()
                                        killz(hit.Parent,hit.Name,nil,nil,false,false,true)
                                    end
                                end
                            end)
                            coru(tgt)
                        end
                    end)
                    local explosionaccenttimeout = coroutine.wrap(function()
                        wait(0.2)
                        for i, exploodn in pairs(exppart:GetChildren()) do
                            exploodn.Enabled = false
                        end
                        wait(2)
                        for i, exploodn in pairs(exppart:GetChildren()) do
                            exploodn:Remove()
                        end
                    end)
                    explosionaccenttimeout()
                    for i,v in pairs(knofe:GetChildren()) do
                        if v:IsA('BasePart') then
                        v.Transparency = 1
                        end
                    end
                    exp.AncestryChanged:connect(function() knofe:Destroy() end)
                coru()
            end
        end)
        if finishnum == 1 then
        for i= 0,1,0.1 do
            if me:FindFirstChild('Right Arm') == nil or me:FindFirstChild('Torso') == nil or weld2 == nil then return end
            weld2.C0 = weld2.C0:lerp(CFrame.new(-1.5,0,0),i)
            wait(0.001)
        end
        else
            wait(0.1)
        end
        weld2.C0 = CFrame.new(-1.5,0,0)
        for i,v in pairs(obj1:GetChildren()) do
            if v:IsA('BasePart') then
            v.Transparency = 0
            end
        end
        weld2:Destroy()
        rightshoulderz:Clone().Parent = me.Torso
        end
        acting = false
        canClick = true
    end)
    coru()
end

function fireworkit()
    local coru = coroutine.wrap(function()
        acting = true
        local ree = 1
        if finishnum > 1 then
            ree = 3
        end
        for i=1,ree do
        local weld2 = Instance.new('Weld',me[""Right Arm""])
        weld2.Part0 = me[""Right Arm""]
        weld2.Part1 = me[""Torso""]
        weld2.C0 = CFrame.new(-1.5,0,0)
        weld2.C0 = CFrame.new(-1.5,0.9,-0.5)*CFrame.Angles(-math.pi/0.75,-math.pi/8,0)
        audio.SoundId = ""rbxassetid://166083610""
        audio.PlaybackSpeed = 1
        audio.TimePosition = 0.1
        audio:Play()
        weld2.C0 = CFrame.new(-1.5,1.2,0.1)*CFrame.Angles(math.pi/0.9,0,0)
        local knofe = obj1:Clone()
        for i,v in pairs(obj1:GetChildren()) do
            if v:IsA('BasePart') then
            v.Transparency = 1
            end
        end
        local sound = Instance.new('Sound',knofe.Grab)
        sound.Volume = 0.25
        sound.EmitterSize = 200
        sound.MaxDistance = 300
        sound.SoundId = 'rbxassetid://551051176'
        sound:Play()
        knofe.Parent = workspace
        knofe.Name = ""Projectile""
        knofe.Grab.CFrame = CFrame.new(knofe.Grab.CFrame.p, mouse.Hit.p)*CFrame.Angles(0,math.pi/2,0)
        local partic = Instance.new('ParticleEmitter',knofe.Grab)
        partic.Color = ColorSequence.new({ColorSequenceKeypoint.new(0,Color3.new(1,0,0)),ColorSequenceKeypoint.new(0.4,Color3.fromRGB(255,125,0)),ColorSequenceKeypoint.new(0.8,Color3.new(1,1,0)),ColorSequenceKeypoint.new(1,Color3.new(1,1,1))})
        partic.LightEmission = 0.5
        partic.LightInfluence = 0
        partic.Size = NumberSequence.new({NumberSequenceKeypoint.new(0,0.5),NumberSequenceKeypoint.new(1,0.15)})
        partic.Rotation = NumberRange.new(0,90)
        partic.SpreadAngle = Vector2.new(5,5)
        partic.Speed = NumberRange.new(20)
        partic.Texture = 'rbxassetid://603193846'
        partic.EmissionDirection = Enum.NormalId.Left
        partic.Lifetime = NumberRange.new(0.5,1)
        partic.Rate = 100
        local heck = Instance.new('BodyVelocity',knofe.Grab)
        heck.Velocity = (knofe.Grab.CFrame*CFrame.Angles(0,math.pi/-2,0)).lookVector*240
        knofe[""big ass knife""].Touched:connect(function(hit)
            sound:Destroy()
            local sound2 = Instance.new('Sound',workspace)
            sound2.SoundId = 'rbxassetid://138080762'
            sound2:Play()
            if heck then
                heck:Destroy()
            end
            for i,v in pairs(knofe:GetChildren()) do
                v.Anchored = true
            end
            partic.Enabled = false
            local colorscheme = math.random(1,4)
            --1 - red & orange
            --2 - blue & pink
            --3 - green & purple
            --4 - blue, red, white
            local colar1 = Color3.fromRGB(255,0,0)
            local colar2 = Color3.fromRGB(255,125,0)
            local colar3 = Color3.fromRGB(255,255,255)
            if colorscheme == 2 then
                colar1 = Color3.fromRGB(0,132,255)
                colar2 = Color3.fromRGB(243,105,255)
            elseif colorscheme == 3 then
                colar1 = Color3.fromRGB(76,255,0)
                colar2 = Color3.fromRGB(128,0,255)
            elseif colorscheme == 4 then
                colar2 = Color3.fromRGB(0,132,255)
            end
            local partic2 = Instance.new('ParticleEmitter',knofe.Grab)
            partic2.Color = ColorSequence.new({ColorSequenceKeypoint.new(0,colar1),ColorSequenceKeypoint.new(1,colar1)})
            partic2.LightEmission = 0.5
            partic2.LightInfluence = 0
            partic2.Size = NumberSequence.new({NumberSequenceKeypoint.new(0,0.5),NumberSequenceKeypoint.new(1,0.1)})
            partic2.Rotation = NumberRange.new(0,90)
            partic2.SpreadAngle = Vector2.new(180,180)
            partic2.Speed = NumberRange.new(20)
            partic2.Texture = 'rbxassetid://603193846'
            partic2.EmissionDirection = Enum.NormalId.Right
            partic2.Lifetime = NumberRange.new(2,2.5)
            partic2.Rate = 1000
            partic2.Drag = 1
            local partic3 = partic2:Clone()
            partic3.Color = ColorSequence.new({ColorSequenceKeypoint.new(0,colar2),ColorSequenceKeypoint.new(1,colar2)})
            partic3.Parent = knofe.Grab
            if colorscheme == 4 then
                local partic4 = partic2:Clone()
                partic4.Color = ColorSequence.new({ColorSequenceKeypoint.new(0,colar3),ColorSequenceKeypoint.new(1,colar3)})
                partic4.Parent = knofe.Grab
            end
            wait(1)
            for i,v in pairs(knofe.Grab:GetChildren()) do
                if v:IsA('ParticleEmitter') then
                    v.Enabled = false
                end
            end
            sound:Destroy()
            wait(2)
            knofe:Destroy()
        end)
        wait(0.1)
        weld2.C0 = CFrame.new(-1.5,0,0)
        for i,v in pairs(obj1:GetChildren()) do
            if v:IsA('BasePart') then
            v.Transparency = 0
            end
        end
        weld2:Destroy()
        rightshoulderz:Clone().Parent = me.Torso
        end
        acting = false
        canClick = true
    end)
    coru()
end

function paralyze()
    local coru = coroutine.wrap(function()
        if paralyzed == true then return end
        paralyzed = true
        local arm = me[""Right Arm""]
        local tors = grabbed.Torso
        local arm2 = me[""Left Arm""]
        if arm:FindFirstChildOfClass('Weld') == nil or arm2:FindFirstChildOfClass('Weld') == nil then return end
        doing = true
        local weld2 = arm:FindFirstChildOfClass('Weld')
        local weld3 = arm2:FindFirstChildOfClass('Weld')
        local humanroot = me.HumanoidRootPart
        for i = 0,1,0.075 do
            weld2.C0 = weld2.C0:lerp(CFrame.new(-0.9, 0.80, -1.1)* CFrame.Angles(-2, 0, -1.5), i)
            weld3.C0 = weld3.C0:lerp(CFrame.new(0.8, 1, -0.5)* CFrame.Angles(-1.4, 0, 1.1), i)
            wait(0.01)
        end
        for i = 0,1,0.30 do
            weld2.C0 = weld2.C0:lerp(CFrame.new(-0.9, 0.80, -1.1)* CFrame.Angles(-0.75, 0, -1.75), i)
            weld3.C0 = weld3.C0:lerp(CFrame.new(0.8, 1, -0.5)* CFrame.Angles(-1.4, 0, 1.1), i)
            wait(0.01)
        end
        killz(grabbed,'Left Leg')
        killz(grabbed,'Left Arm')
        killz(grabbed,'Right Leg')
        killz(grabbed,'Right Arm')
        
        for i, v in pairs(grabbed:GetChildren()) do
            if v.Name == ""Part"" then
                v.CanCollide = false
            end
        end
        
        audio:Stop()
        audio.SoundId = ""rbxassetid://2801263""
        tone = math.random(1, 3)
        if tone == 1 then audio.PlaybackSpeed = 0.8 audio.TimePosition = 0 end
        if tone == 2 then audio.PlaybackSpeed = 1 audio.TimePosition = 0 end
        if tone == 3 then audio.PlaybackSpeed = 1.2 audio.TimePosition = 0 end
        audio:Play()
        
        local bleedpart = Instance.new(""Part"", grabbed)
        bleedpart.Size = Vector3.new(0.2, 0.2, 0.2)
        bleedpart.Color = Color3.new(115/225, 115/225, 115/225)
        bleedpart.CanCollide = false
        bleedpart.Position = grabbed.Head.Position + Vector3.new(0, 1, 0)
        bleedpart.Transparency = 1
        
        local bleedpartweld = Instance.new(""Weld"", grabbed.Torso)
        bleedpartweld.Part0 = grabbed.Torso
        bleedpartweld.Part1 = bleedpart
        bleedpartweld.C0 = CFrame.Angles(-1, 0, -0.35) * CFrame.new(0, 1, 0.8)
        local cuntruu=coroutine.wrap(function()
            bleed(bleedpart)
        end)
        local thicc = coroutine.wrap(function()
            wait(3)
            bleedpart:Remove()
        end)
        cuntruu()
        thicc()
    
        for i = 0,1,0.075 do
            weld2.C0 = weld2.C0:lerp(CFrame.new(-0.9, 0.80, -1.1)* CFrame.Angles(-1.5, 0, -1.3), i)
            weld3.C0 = weld3.C0:lerp(CFrame.new(0.8, 1, -0.5)* CFrame.Angles(-1.5, 0, 1.1), i)
            wait(0.01)
        end
        acting = true
        canClick = true
        doing = false
    end)
    coru()
end

function explode()
    local coru = coroutine.wrap(function()
        acting = true
        for i=1,finishnum do
        local weld2 = Instance.new('Weld',me[""Right Arm""])
        weld2.Part0 = me[""Right Arm""]
        weld2.Part1 = me[""Torso""]
        weld2.C0 = CFrame.new(-1.5,0,0)
        if finishnum == 1 then
        for i = 0,1,0.05 do
            if me:FindFirstChild('Right Arm') == nil or me:FindFirstChild('Torso') == nil or weld2 == nil then return end
            weld2.C0 = weld2.C0:lerp(CFrame.new(-1.5,0.9,-0.5)*CFrame.Angles(-math.pi/0.75,-math.pi/8,0),i)
            wait(0.01)  
        end
        end
        weld2.C0 = CFrame.new(-1.5,0.9,-0.5)*CFrame.Angles(-math.pi/0.75,-math.pi/8,0)
        audio.SoundId = ""rbxassetid://166083610""
        audio.PlaybackSpeed = 1
        audio.TimePosition = 0.1
        audio:Play()
        if finishnum == 1 then
        for i = 0,1,0.5 do
            if me:FindFirstChild('Right Arm') == nil or me:FindFirstChild('Torso') == nil or weld2 == nil then return end
            weld2.C0 = weld2.C0:lerp(CFrame.new(-1.5,1.2,0.1)*CFrame.Angles(math.pi/0.9,0,0),i)
            wait(0.001) 
        end
        end
        weld2.C0 = CFrame.new(-1.5,1.2,0.1)*CFrame.Angles(math.pi/0.9,0,0)
        local knofe = obj1:Clone()
        for i,v in pairs(obj1:GetChildren()) do
            if v:IsA('BasePart') then
            v.Transparency = 1
            end
        end
        knofe.Parent = workspace
        knofe.Name = ""Projectile""
        knofe.Grab.CFrame = CFrame.new(knofe.Grab.CFrame.p, mouse.Hit.p)*CFrame.Angles(0,math.pi/2,0)
        knofe:FindFirstChild(""Trail"", true).Enabled = false
        local heck = Instance.new('BodyVelocity',knofe.Grab)
        heck.Velocity = (knofe.Grab.CFrame*CFrame.Angles(0,math.pi/-2,0)).lookVector*120
        local coru = coroutine.wrap(function()
            wait(0.45)
            if heck then
                heck:Destroy()
            end
        end)
        coru()
        knofe[""big ass knife""].Touched:connect(function(hit)
            if hit.Parent ~= me and hit.Parent.Parent ~= me and hit.Transparency < 1 and knofe.Grab.CanCollide == false then
                heck.Velocity = Vector3.new(0,0,0)
                heck:Destroy()
                for i,v in pairs(knofe:GetChildren()) do
                    if v:IsA('BasePart') then
                    v.CanCollide = true
                    end
                end
                local hum = hit.Parent:FindFirstChildOfClass('Humanoid')
                if hum == nil then
                    hum = hit.Parent.Parent:FindFirstChildOfClass('Humanoid')
                end
                if hum then
                    tone = math.random(1, 3)
                    local sound = Instance.new('Sound',knofe.Grab)
                    if tone == 1 then sound.SoundId = ""rbxassetid://220833967"" end
                    if tone == 2 then sound.SoundId = ""rbxassetid://220833976"" end
                    if tone == 3 then sound.SoundId = ""rbxassetid://220834000"" end
                    sound.PlaybackSpeed = 1
                    sound:Play()
                else
                    local sound = Instance.new('Sound',knofe.Grab)
                    sound.SoundId = 'rbxassetid://267585646'
                    sound:Play()
                end
                if knofe then
                    local coru = coroutine.wrap(function()
                        if hit then
                            local uno = Instance.new('Part',workspace)
                            local dos = Instance.new('Part',workspace)
                            uno.CFrame = hit.CFrame
                            dos.CFrame = knofe[""big ass knife""].CFrame
                            local weld = Instance.new('Weld',knofe[""big ass knife""])
                            weld.Part0 = hit
                            weld.Part1 = knofe[""big ass knife""]
                            weld.C0 = uno.CFrame:toObjectSpace(dos.CFrame)
                            uno:Destroy()
                            dos:Destroy()
                        end
                    end)
                    coru()
                end
                local coru = coroutine.wrap(function()
                    for i=1,15,0.7 do
                        local sound = Instance.new('Sound',knofe.Grab)
                        if knofe then
                            if knofe.serration.BrickColor == BrickColor.new('Really red') then
                                for i, v in pairs(knofe:GetChildren()) do
                                    if v.Name == ""big ass knife"" or v.Name == ""serration"" or v.Name == ""knifetip1"" or v.Name == ""fricc"" then
                                        v.BrickColor = BrickColor.new('Lily white')
                                        v.Material = Enum.Material.SmoothPlastic
                                    end
                                end
                            else
                                for i,v in pairs(knofe:GetChildren()) do
                                    if v.Name == ""big ass knife"" or v.Name == ""serration"" or v.Name == ""knifetip1"" or v.Name == ""fricc"" then
                                        v.BrickColor = BrickColor.new('Really red')
                                        v.Material = Enum.Material.Neon
                                        sound.SoundId = 'rbxassetid://300473653'
                                        sound.Volume = 0.75
                                        sound.TimePosition = 0.05
                                        sound.EmitterSize = 25
                                        sound.PlaybackSpeed = 1
                                        sound:Play()
                                    end
                                end
                            end
                            wait(1/i)
                            sound:Destroy()
                        end
                    end
                    local sound = Instance.new('Sound',knofe.Grab)
                    sound.Name = ""BOOM""
                    sound.EmitterSize = 25
                    sound.SoundId = 'rbxassetid://12222084'
                    sound.TimePosition = 0.1
                    sound.Volume = 0.5
                    sound:Play()
                    local exppart = Instance.new(""Part"", game.Workspace)
                    exppart.Size = Vector3.new(0.2, 0.2, 0.2)
                    exppart.Anchored = true
                    exppart.CanCollide = false
                    exppart.CFrame = CFrame.new(knofe.Grab.CFrame.p)
                    exppart.Transparency = 1
                    local expaccent = Instance.new(""ParticleEmitter"", exppart)
                    expaccent.Color = ColorSequence.new({ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 0)), ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 0))})
                    expaccent.LightEmission = 0.2
                    expaccent.LightInfluence = 0.3
                    expaccent.Size = NumberSequence.new({NumberSequenceKeypoint.new(0, 1), NumberSequenceKeypoint.new(1, 0)})
                    expaccent.Acceleration = Vector3.new(0, -8, 0)
                    expaccent.Drag = 15
                    expaccent.LockedToPart = true
                    expaccent.Lifetime = NumberRange.new(0.5, 1.5)
                    expaccent.Rate = 2000
                    expaccent.Speed = NumberRange.new(10, 150)
                    expaccent.SpreadAngle = Vector2.new(360, 360)
                    
                    local exp = Instance.new('Explosion',game.Workspace)
                    exp.Position = knofe[""big ass knife""].Position
                    exp.ExplosionType = Enum.ExplosionType.NoCraters
                    exp.BlastRadius = 10
                    exp.BlastPressure = 100000
                    exp.DestroyJointRadiusPercent = 1
                    exp.Hit:connect(function(hit)
                        if hit.Parent and hit.Parent ~= me and hit.Parent:FindFirstChildOfClass('Humanoid') then
                            if hit.Parent:FindFirstChildOfClass('Humanoid') and hit.Name == ""Torso"" or hit.Name == ""Head"" then
                                hit.Parent:FindFirstChildOfClass('Humanoid').Health = 0
                            end
                            wait(0.001)
                            local coru=coroutine.wrap(function()
                            killz(hit.Parent,'Head',knofe,exp)
                            end)
                            coru()
                        elseif hit.Parent and hit.Parent ~= workspace and hit.Parent ~= me then
                            if hit.Parent.Name ~= ""Projectile"" then
                                hit.Parent:BreakJoints()
                            end
                        elseif hit.Parent and hit.Parent ~= me then
                            hit:BreakJoints()
                        end
                    end)
                    local explosionaccenttimeout = coroutine.wrap(function()
                        wait(0.2)
                        expaccent.Enabled = false
                        wait(2)
                        exppart:Remove()
                    end)
                    explosionaccenttimeout()
                    for i,v in pairs(knofe:GetChildren()) do
                        if v:IsA('BasePart') then
                        v.Transparency = 1
                        end
                    end
                    exp.AncestryChanged:connect(function() knofe:Destroy() end)
                end)
                coru()
            end
        end)
        if finishnum == 1 then
        for i= 0,1,0.1 do
            if me:FindFirstChild('Right Arm') == nil or me:FindFirstChild('Torso') == nil or weld2 == nil then return end
            weld2.C0 = weld2.C0:lerp(CFrame.new(-1.5,0,0),i)
            wait(0.001)
        end
        else
            wait(0.1)
        end
        weld2.C0 = CFrame.new(-1.5,0,0)
        for i,v in pairs(obj1:GetChildren()) do
            if v:IsA('BasePart') then
            v.Transparency = 0
            end
        end
        weld2:Destroy()
        rightshoulderz:Clone().Parent = me.Torso
        end
        acting = false
        canClick = true
    end)
    coru()
end

function release()
    if grabbed.Torso:FindFirstChild(""TargetWeld"") == nil or grabbed:FindFirstChildOfClass('Humanoid').Health <= 0 then return end
    targetweld = grabbed.Torso.TargetWeld
    local ree= grabbed:FindFirstChild(""Left Arm"")
    targetweld2 = nil
    if ree and ree:FindFirstChild(""Weld"") then
        targetweld2 = ree.Weld
    end
    for i, v in pairs(grabbed:GetChildren()) do
        if v.Name == ""Part"" then
            v.CanCollide = true
        end
    end
    paralyzed = false
    local doit = coroutine.wrap(function()
    local arm = me[""Right Arm""]
    local tors = grabbed.Torso
    local arm2 = me[""Left Arm""]
    if arm:FindFirstChildOfClass('Weld') == nil or arm2:FindFirstChildOfClass('Weld') == nil then return end
    doing = true
    local weld2 = arm:FindFirstChildOfClass('Weld')
    local weld3 = arm2:FindFirstChildOfClass('Weld')
    local humanroot = me.HumanoidRootPart
    
    if grabbed:FindFirstChildOfClass('Humanoid') then
        grabbed:FindFirstChildOfClass('Humanoid').PlatformStand = false
    end
    
    rightshoulderz:Clone().Parent = me.Torso
    leftshoulderz:Clone().Parent = me.Torso
    grabbed = nil
    
    if humanroot:FindFirstChild('Holder') then
        humanroot.Holder:Destroy()
    end
    
    for i = 0,1,0.1 do
        if me:FindFirstChild('Right Arm') == nil or me:FindFirstChild('Torso') == nil or weld2 == nil or weld3 == nil then return end
        weld2.C0 = weld2.C0:lerp(CFrame.new(-1.5,0,0),i)
        weld3.C0 = weld3.C0:lerp(CFrame.new(1.5,0,0),i)
        targetweld.C0 = targetweld.C0:lerp(CFrame.new(0, 1.5, 0)*CFrame.Angles(0, 0, 0), i)
        if targetweld2 then
            targetweld2.C0 = targetweld2.C0:lerp(CFrame.new(-1.5, 0, 0)*CFrame.Angles(0, 0, 0), i)
        end
        wait(0.01)
    end
    
    knifeweld.C1 = CFrame.fromEulerAnglesXYZ(1.55, math.rad(-90), 1.55) * CFrame.new(0, 0.95, 0.2)
    weld2:Destroy()
    weld3:Destroy()
    targetweld:Remove()
    if targetweld2 then
        targetweld2:Remove()
    end
    if rightshoulder then
    rightshoulder:Clone().Parent = tors
    end
    if leftshoulder then
    leftshoulder:Clone().Parent = tors
    end
    headweld:Clone().Parent = tors
    rightshoulderz:Clone().Parent = me.Torso
            leftshoulderz:Clone().Parent = me.Torso
    acting = false
    canClick = true
    doing = false
    end)
    doit()
end

function stabwithpassion()
    local doit = coroutine.wrap(function()
        if me:FindFirstChild('Right Arm') and me:FindFirstChild('Torso') and me:FindFirstChild('HumanoidRootPart') and me:FindFirstChild('Left Arm') then
            acting = true
            me:FindFirstChildOfClass('Humanoid').WalkSpeed = me:FindFirstChildOfClass('Humanoid').WalkSpeed + 10
            local arm = me[""Right Arm""]
            local tors = me.Torso
            local arm2 = me[""Left Arm""]
            local humanroot = me.HumanoidRootPart
            local weld = Instance.new('Weld',tors)
            weld.Part0 = tors
            weld.Part1 = humanroot
            weld.C0 = CFrame.new(0,0,0) * CFrame.Angles(0, 0, 0)
            local weld2 = Instance.new('Weld',arm)
            weld2.Part0 = arm
            weld2.Part1 = tors
            weld2.C0 = CFrame.new(-1.5,0,0) * CFrame.Angles(0, 0, 0)
            local weld3 = Instance.new('Weld',arm2)
            weld3.Part0 = arm2
            weld3.Part1 = tors
            weld3.C0 = CFrame.new(1.5,0,-0.3) * CFrame.Angles(0.3,0.1,0)

            for i = 0,1,0.15 do
                if me:FindFirstChild('Right Arm') == nil or me:FindFirstChild('Torso') == nil or weld == nil or weld2 == nil or humanroot == nil then return end
                weld.C0 = weld.C0:lerp(CFrame.new(0,0,0)*CFrame.Angles(0,math.rad(20),0),i)
                weld2.C0 = weld2.C0:lerp(CFrame.new(-1.2,1.3,0.4)*CFrame.Angles(0.5,0,-1.2),i)
                knifeweld.C1 = knifeweld.C1:lerp(CFrame.fromEulerAnglesXYZ(1.55, math.rad(90), -1.55) * CFrame.new(0, 0.95, 0), i)
                wait(0.01)
            end
            wait(0.001)
            trail.Enabled = true
            stabbing = true
            audio2.SoundId = 'rbxassetid://608537390'
            audio2:Play()
            for i = 0,1,0.2 do
                if me:FindFirstChild('Right Arm') == nil or me:FindFirstChild('Torso') == nil or weld == nil or weld2 == nil or humanroot == nil then return end
                weld.C0 = weld.C0:lerp(CFrame.new(0,0,0)*CFrame.Angles(0,math.rad(-45),0),i)
                weld2.C0 = weld2.C0:lerp(CFrame.new(-1.6,0.8,-1)*CFrame.Angles(math.rad(-90),0,-1),i)
                wait(0.01)
            end
            trail.Enabled = false
            wait(0.1)
            me:FindFirstChildOfClass('Humanoid').WalkSpeed = me:FindFirstChildOfClass('Humanoid').WalkSpeed - 10
            stabbing = false
            wait(0.001)
            for i = 0,1,0.075 do
                if me:FindFirstChild('Right Arm') == nil or me:FindFirstChild('Torso') == nil or weld == nil or weld2 == nil or humanroot == nil then return end
                weld.C0 = weld.C0:lerp(CFrame.new(0,0,0)*CFrame.Angles(0,0,0),i)
                weld2.C0 = weld2.C0:lerp(CFrame.new(-1.5,0,0)*CFrame.Angles(0,0,0),i)
                weld3.C0 = weld3.C0:lerp(CFrame.new(1.5,0,0)*CFrame.Angles(0,0,0),i)
                knifeweld.C1 = knifeweld.C1:lerp(CFrame.fromEulerAnglesXYZ(1.55, math.rad(-90), 1.55) * CFrame.new(0, 0.95, 0), i)
                wait(0.01)
            end
        weld:Destroy()
        weld2:Destroy()
        weld3:Destroy()
        torsojoint:Clone().Parent = humanroot
        rightshoulderz:Clone().Parent = me.Torso
        leftshoulderz:Clone().Parent = me.Torso
        canClick = true
        hit = false
        acting = false
        end
    end)
    doit()
end

function stab()
    local doit = coroutine.wrap(function()
        if me:FindFirstChild('Right Arm') and me:FindFirstChild('Torso') and me:FindFirstChild('HumanoidRootPart') and me:FindFirstChild('Left Arm') then
            acting = true
            me:FindFirstChildOfClass('Humanoid').WalkSpeed = me:FindFirstChildOfClass('Humanoid').WalkSpeed + 3
            local arm = me[""Right Arm""]
            local tors = me.Torso
            local arm2 = me[""Left Arm""]
            local humanroot = me.HumanoidRootPart
            local weld = Instance.new('Weld',tors)
            weld.Part0 = tors
            weld.Part1 = humanroot
            weld.C0 = CFrame.new(0,0,0) * CFrame.Angles(0, 0, 0)
            local weld2 = Instance.new('Weld',arm)
            weld2.Part0 = arm
            weld2.Part1 = tors
            weld2.C0 = CFrame.new(-1.5,0,0) * CFrame.Angles(0, 0, 0)
            local weld3 = Instance.new('Weld',arm2)
            weld3.Part0 = arm2
            weld3.Part1 = tors
            weld3.C0 = CFrame.new(1.5,0,-0.3) * CFrame.Angles(0.3,0.1,0)

            for i = 0,1,0.1 do
                if me:FindFirstChild('Right Arm') == nil or me:FindFirstChild('Torso') == nil or weld == nil or weld2 == nil or humanroot == nil then return end
                weld.C0 = weld.C0:lerp(CFrame.new(0,0,0)*CFrame.Angles(0,0.3,0),i)
                weld2.C0 = weld2.C0:lerp(CFrame.new(-1.2,1.3,0.4)*CFrame.Angles(0.5,0,-1.2),i)
                wait(0.01)
            end
            wait(0.001)
            trail.Enabled = true
            stabbing = true
            audio2.SoundId = 'rbxassetid://608537390'
            audio2:Play()
            for i = 0,1,0.25 do
                if me:FindFirstChild('Right Arm') == nil or me:FindFirstChild('Torso') == nil or weld == nil or weld2 == nil or humanroot == nil then return end
                weld.C0 = weld.C0:lerp(CFrame.new(0,0,0)*CFrame.Angles(0,-0.3,0),i)
                weld2.C0 = weld2.C0:lerp(CFrame.new(-1.6,0.8,0.5)*CFrame.Angles(-0.5,0,-0.5),i)
                wait(0.01)
            end
            trail.Enabled = false
            wait(0.1)
            me:FindFirstChildOfClass('Humanoid').WalkSpeed = me:FindFirstChildOfClass('Humanoid').WalkSpeed - 3
            for i = 0,1,0.25 do
                if me:FindFirstChild('Right Arm') == nil or me:FindFirstChild('Torso') == nil or weld == nil or weld2 == nil or humanroot == nil then return end
                weld.C0 = weld.C0:lerp(CFrame.new(0,0,0)*CFrame.Angles(0,0.3,0),i)
                weld2.C0 = weld2.C0:lerp(CFrame.new(-1.5,0.6,-0.3)*CFrame.Angles(0.5,0,-0.5),i)
                wait(0.01)
            end
            stabbing = false
            wait(0.001)
            for i = 0,1,0.05 do
                if me:FindFirstChild('Right Arm') == nil or me:FindFirstChild('Torso') == nil or weld == nil or weld2 == nil or humanroot == nil then return end
                weld.C0 = weld.C0:lerp(CFrame.new(0,0,0)*CFrame.Angles(0,0,0),i)
                weld2.C0 = weld2.C0:lerp(CFrame.new(-1.5,0,0)*CFrame.Angles(0,0,0),i)
                weld3.C0 = weld3.C0:lerp(CFrame.new(1.5,0,0)*CFrame.Angles(0,0,0),i)
                wait(0.01)
            end
        weld:Destroy()
        weld2:Destroy()
        weld3:Destroy()
        torsojoint:Clone().Parent = humanroot
        rightshoulderz:Clone().Parent = me.Torso
        leftshoulderz:Clone().Parent = me.Torso
        canClick = true
        hit = false
        acting = false

             for i, plr in pairs(game.Players:GetChildren()) do
                        if plr.Name ~= game.Players.LocalPlayer.Name then
                        for i = 1, 10 do
                        game.ReplicatedStorage.meleeEvent:FireServer(plr)
end
end
end
        end
    end)
    doit()
end
function hardrelease()
    rightshoulderz:Clone().Parent = me.Torso
    leftshoulderz:Clone().Parent = me.Torso
    if me:FindFirstChild('Right Arm') then
    for i,v in pairs(me[""Right Arm""]:GetChildren()) do
        if v:IsA('Weld') then
            v:Destroy()
        end
    end
    end
    if me:FindFirstChild('Left Arm') then
    for i,v in pairs(me[""Left Arm""]:GetChildren()) do
        if v:IsA('Weld') then
            v:Destroy()
        end
    end
    end
    acting = false
    canClick = true
    doing = false
    grabbed = nil
end
function unequip()
    local doit = coroutine.wrap(function()
    if me:FindFirstChild('Right Arm') and me:FindFirstChild('Torso') then
        acting = true
        local arm = me[""Right Arm""]
        local arm2 = me[""Left Arm""]
        local tors = me.Torso
        local weld = Instance.new('Weld',arm)
        weld.Part0 = arm
        weld.Part1 = tors
        weld.C0 = CFrame.new(-1.5,0,0)
        local weld2 = Instance.new(""Weld"", arm2)
        weld2.Part0 = arm2
        weld2.Part1 = tors
        weld2.C0 = CFrame.new(1.5, 0, 0)
        wait(0.001)
        trail.Enabled = true
        for i = 0,1,0.1 do
            if me:FindFirstChild('Right Arm') == nil or me:FindFirstChild('Torso') == nil or weld == nil then return end
            weld.C0 = weld.C0:lerp(CFrame.new(-0.2,0.2,-0.5)*CFrame.Angles(0,-3.1,0.9),i)
            weld2.C0 = weld2.C0:lerp(CFrame.new(1.5, 0.6, 0) * CFrame.Angles(0,0,0.5),i)
            wait(0.001)
        end
        trail.Enabled = false
        wait(0.25)
        for i = 0,1,0.1 do
            if me:FindFirstChild('Right Arm') == nil or me:FindFirstChild('Torso') == nil or weld == nil then return end
            weld.C0 = weld.C0:lerp(CFrame.new(-1.5,0,0),i)
            weld2.C0 = weld2.C0:lerp(CFrame.new(1.5, 0, 0), i)
            wait(0.01)
        end
        weld:Destroy()
        weld2:Remove()
        if tors ~= nil then
            rightshoulderz:Clone().Parent = me.Torso
            leftshoulderz:Clone().Parent = me.Torso
        end
        acting = false
    end
    end)
    doit()
end

mouse.KeyDown:connect(function(key)
    if usable == true then
    if key == ""z"" then
        if active == false and acting == false then
            active = true
            if playergui:FindFirstChild('Notification') then playergui.Notification:Destroy() end
            notify(""KNIFE EQUIPPED"",false)
            audio:Stop()
            audio.SoundId = 'rbxassetid://608618332'
            equip()
            wait(0.6)
            audio:Play()
            knifeweld.Part0 = me[""Right Arm""]
            knifeweld.C1 = CFrame.fromEulerAnglesXYZ(1.55, math.rad(-90), 1.55) * CFrame.new(0, 0.95, 0)
        elseif acting == false then
            active = false
            if playergui:FindFirstChild('Notification') then playergui.Notification:Destroy() end
            audio:Stop()
            audio.SoundId = 'rbxassetid://608538233'
            unequip()
            notify(""KNIFE UNEQUIPPED"",false)
            wait(0.3)
            audio:Play()
            knifeweld.Part0 = me.Torso
            knifeweld.C1 = CFrame.Angles(0,math.rad(90),0) * CFrame.new(1, 0.8, 0.55)
            canClick = true
        end
    elseif key == ""f"" then
        if mode == 'kill' or active == false then return end
        mode = ""kill""
        if playergui:FindFirstChild('Notification') then playergui.Notification:Destroy() end
        notify(""MODE || KILL || [F]"",false)
    elseif key == ""e"" then
        if mode == 'throw' or active == false then return end
        mode = ""throw""
        if playergui:FindFirstChild('Notification') then playergui.Notification:Destroy() end
        notify(""MODE || PUSH || [E]"",false)
    elseif key == ""q"" then
        if mode == 'release' or active == false then return end
        mode = ""release""
        if playergui:FindFirstChild('Notification') then playergui.Notification:Destroy() end
        notify(""MODE || RELEASE || [Q]"",false)
    elseif key == ""x"" then
        if mode == 'stab' or active == false or acting == true then return end
        mode = ""stab""
        if playergui:FindFirstChild('Notification') then playergui.Notification:Destroy() end
        notify(""MODE || STAB || [X]"",false)
    elseif key == ""c"" then
        if mode == 'fling' or active == false or acting == true then return end
        mode = ""fling""
        if playergui:FindFirstChild('Notification') then playergui.Notification:Destroy() end
        notify(""MODE || THROW || [C]"",false)
    elseif key == ""b"" then
        if mode == 'instasplode' or active == false or acting == true then return end
        mode = ""instasplode""
        if playergui:FindFirstChild('Notification') then playergui.Notification:Destroy() end
        notify(""MODE || MOLOTOV || [B]"",false)
    elseif key == ""r"" then
        if mode == 'paralyze' or active == false then return end
        mode = ""paralyze""
        if playergui:FindFirstChild('Notification') then playergui.Notification:Destroy() end
        notify(""MODE || PARALYZE || [R]"",false)
    elseif key == ""v"" then
        if mode == 'explode' or active == false or acting == true then return end
        mode = ""explode""
        if playergui:FindFirstChild('Notification') then playergui.Notification:Destroy() end
        notify(""MODE || EXPLODE || [V]"",false)
    elseif key == ""k"" then
        if mode == 'suicide' or active == false or acting == true then return end
        mode = ""suicide""
        if playergui:FindFirstChild('Notification') then playergui.Notification:Destroy() end
        notify(""MODE || SUICIDE || [K]"",false)
    elseif key == ""h"" then
        if mode == 'firework' or active == false or acting == true then return end
        mode = ""firework""
        if playergui:FindFirstChild('Notification') then playergui.Notification:Destroy() end
        notify(""MODE || FIREWORK || [H]"",false)
    elseif key == ""g"" then
        if mode == 'finish' or active == false then return end
        mode = ""finish""
        if playergui:FindFirstChild('Notification') then playergui.Notification:Destroy() end
        local welp = ""ON""
        if finishnum == 1 then
            welp = ""OFF""
        end
        notify(""MODE || FINISH || [G] || ""..welp,false)
    elseif key == ""n"" then
        if playergui:FindFirstChild('Notification') then playergui.Notification:Destroy() end
        if zombiemode == false then
            notify(""ZOMBIE MODE ON || [N]"",false)
            zombiemode = true
        else
            notify(""ZOMBIE MODE OFF || [N]"",false)
            zombiemode = false
        end
    elseif key == ""m"" then
        if finishnum == 1 then
            finishnum = 15
            if playergui:FindFirstChild('Notification') then playergui.Notification:Destroy() end
            notify(""PSYCHOPATH MODE ON || [M]"",false)
            if cancolorfilter then
            local Sp00kyGui = Instance.new(""ScreenGui"")
            local ImageLabel = Instance.new(""ImageLabel"")

            -- Properties

            Sp00kyGui.Parent = playergui
            Sp00kyGui.Name = ""REEEEEEEE""

            ImageLabel.Parent = Sp00kyGui
            ImageLabel.BackgroundColor3 = Color3.new(1, 1, 1)
            ImageLabel.BackgroundTransparency = 1
            ImageLabel.Size = UDim2.new(1, 0, 1, 0)
            ImageLabel.Image = ""rbxassetid://74443700""
            ImageLabel.ImageColor3 = Color3.new(1, 0, 0)
            end
            if canbackgroundmusic == true then
                local sound = Instance.new('Sound',playergui)
                sound.Name = 'PSYCHOPAAAATH'
                sound.SoundId = 'rbxassetid://220875210'
                sound.Looped = true
                sound.Volume = 0.5
                sound:Play()
            end
        else
            finishnum = 1
            if playergui:FindFirstChild('Notification') then playergui.Notification:Destroy() end
            notify(""PSYCHOPATH MODE OFF || [M]"",false)
            for i,v in pairs(playergui:GetChildren()) do
                if v.Name == ""REEEEEEEE"" then
                    v:Destroy()
                end
            end
            local thisniggarighthere = playergui:FindFirstChild('PSYCHOPAAAATH')
            if thisniggarighthere then thisniggarighthere:Destroy() end
        end
    end
    end
end)

mouse.Button1Down:connect(function()
    if active == false or usable == false then return end
    if canClick == true and acting == false then
        if mode == ""stab"" and finishnum == 1 then
            canClick = false
            stab()
        elseif mode == ""stab"" and finishnum == 15 then
            canClick = false
            stabwithpassion()
        elseif mode == ""fling"" then
            canClick = false
            fling()
        elseif mode == ""explode"" then
            canClick = false
            explode()
        elseif mode == ""instasplode"" then
            canClick = false
            instasplode()
        elseif mode == ""finish"" then
            canClick = false
            finish()
        elseif mode == ""suicide"" then
            canClick = false
            kysnigga()
        elseif mode == ""firework"" then
            canClick = false
            fireworkit()
        else
            canClick = false
            grab()
        end
    else
        if grabbed ~= nil and doing == false then
            if mode == ""release"" then
                if acting == true and grabbed:FindFirstChildOfClass('Humanoid') and grabbed:FindFirstChildOfClass('Humanoid').Health > 0 then
                release()
                else
                hardrelease()
                end
            elseif mode == ""kill"" then
                if acting == true and grabbed:FindFirstChildOfClass('Humanoid') and grabbed:FindFirstChildOfClass('Humanoid').Health > 0 then
                kill()
                else
                hardrelease()
                end
            elseif mode == ""paralyze"" then
                if acting == true and grabbed:FindFirstChildOfClass('Humanoid') and grabbed:FindFirstChildOfClass('Humanoid').Health > 0 then
                paralyze()
                else
                hardrelease()
                end
            elseif mode == ""throw"" then
                if acting == true and grabbed:FindFirstChildOfClass('Humanoid') and grabbed:FindFirstChildOfClass('Humanoid').Health > 0 then
                throw()
                else
                hardrelease()
                end
            elseif mode == ""explode"" then
                if acting == true and grabbed:FindFirstChildOfClass('Humanoid') and grabbed:FindFirstChildOfClass('Humanoid').Health > 0 then
                throw()
                else
                hardrelease()
                end
            end
        end
    end
end)

knife.Touched:connect(function(hitz)
    if hitz.Parent and hitz.Parent:FindFirstChildOfClass(""Humanoid"") and hitz.Parent:FindFirstChild('Torso') and acting == true then
        if mode == ""stab"" and stabbing == true and hit == false then
            hit = true
            tone = math.random(1, 3)
            audio:Stop()
            if tone == 1 then audio.SoundId = ""rbxassetid://220833967"" end
            if tone == 2 then audio.SoundId = ""rbxassetid://220833976"" end
            if tone == 3 then audio.SoundId = ""rbxassetid://220834000"" end
            audio.PlaybackSpeed = 1
            audio:Play()
            killz(hitz.Parent,'Left Leg')
            killz(hitz.Parent,'Left Arm')
            killz(hitz.Parent,'Right Leg')
            killz(hitz.Parent,'Right Arm')
        elseif mode == ""finish"" and finishing == true then
            print('PSYCHOPATH MODE REEEEEEEEEEEEEEEE')
            tone = math.random(1, 3)
            audio:Stop()
            if tone == 1 then audio.SoundId = ""rbxassetid://220833967"" end
            if tone == 2 then audio.SoundId = ""rbxassetid://220833976"" end
            if tone == 3 then audio.SoundId = ""rbxassetid://220834000"" end
            audio.PlaybackSpeed = 1
            audio:Play()
            if hit == false then
                hitz.Parent:FindFirstChildOfClass('Humanoid').Health = 0
                wait()
                killz(hitz.Parent,'Head',nil,false,true)
            end
            hit = true
        elseif grabbed == nil and grabbing == true and hit == false then
            if hitz.Parent:FindFirstChildOfClass(""Humanoid"").Health > 0 and hitz.Parent:FindFirstChild('Torso') and hitz.Parent.Torso:FindFirstChild('Neck') then
            grabbed = hitz.Parent
            local weldz = Instance.new('Weld',point)
            weldz.Name = ""Holder""
            weldz.Part0 = point
            weldz.Part1 = hitz.Parent.Torso
            weldz.C0 = CFrame.new(0,0,-1.2)
            end
        end
    end
end)

player.CharacterAdded:connect(function()
    usable = false
    for i,v in pairs(playergui:GetChildren()) do
        if v.Name == ""REEEEEEEE"" or v.Name == 'PSYCHOPAAAATH' then
            v:Destroy()
        end
    end
end)
while usable do
    local coru = coroutine.wrap(function()
    if grabbed ~= nil then
        if grabbed:FindFirstChildOfClass('Humanoid') and grabbed:FindFirstChildOfClass('Humanoid').Health > 0 then
            for i,v in pairs(grabbed:GetChildren()) do
                if v:IsA('Tool') then
                    local model = Instance.new('Model',workspace)
                    v.Parent = model
                    model:TranslateBy(Vector3.new(3,0,0))
                end
            end
            grabbed:FindFirstChildOfClass('Humanoid').Name = ""Hoomanoid""
            grabbed:FindFirstChildOfClass('Humanoid').JumpPower = 0
            grabbed:FindFirstChildOfClass('Humanoid').WalkSpeed = 0
            grabbed:FindFirstChildOfClass('Humanoid').PlatformStand = true
            grabweld = grabbed.Torso:FindFirstChild(""TargetWeld"")
            if grabweld ~= nil then return end
            grabbed:FindFirstChildOfClass('Humanoid').PlatformStand = true
            if grabbed.Torso:FindFirstChild('Left Shoulder') then
            leftshoulder = grabbed.Torso[""Left Shoulder""]:Clone()
            end
            if grabbed.Torso:FindFirstChild('Right Shoulder') then
            rightshoulder = grabbed.Torso[""Right Shoulder""]:Clone()
            end
            headweld = grabbed.Torso[""Neck""]:Clone()
            local targetweld = Instance.new('Weld',grabbed.Torso)
            targetweld.Part0 = grabbed.Torso
            targetweld.Part1 = grabbed.Head
            targetweld.Name = ""TargetWeld""
            targetweld.C0 = CFrame.new(0,1.5,0) * CFrame.Angles(0, 0, 0)
            if grabbed:FindFirstChild('Left Arm') then
            local targetweld2 = Instance.new('Weld',grabbed[""Left Arm""])
            targetweld2.Part0 = grabbed.Torso
            targetweld2.Part1 = grabbed[""Left Arm""]
            targetweld2.C0 = CFrame.new(-1.5,0,0) * CFrame.Angles(0, 0, 0)
            end
            
            for i = 0,1,0.1 do
                if me:FindFirstChild(""Left Arm"") == nil or me:FindFirstChild(""Torso"") == nil or targetweld == nil then return end
                targetweld.C0 = targetweld.C0:lerp(CFrame.new(0, 1.5, 0)*CFrame.Angles(0.25, 0, 0), i)
                if targetweld2 then
                    targetweld2.C0 = targetweld2.C0:lerp(CFrame.new(-1.5, 0.5, 0)*CFrame.Angles(0, 0, -0.55), i)
                end
                wait(0.001)
            end
        end
    end
    end)
    coru()
    wait()
end

end
local coru=coroutine.wrap(function()
nub()
end)
coru()

player.CharacterAppearanceLoaded:connect(function()
    local coru =coroutine.wrap(function()
        nub()
    end)
    coru()
end)

while true do
    local coru=coroutine.wrap(function()
    for i,v in pairs(rekt) do
        if v and v:FindFirstChildOfClass('Humanoid') then
            for a,c in pairs(v:GetChildren()) do
                if c:IsA('Tool') then
                    local model = Instance.new('Model',workspace)
                    c.Parent = model
                    model:TranslateBy(Vector3.new(3,0,0))
                end
            end
            v:FindFirstChildOfClass('Humanoid').Jump = false
            v:FindFirstChildOfClass('Humanoid').Sit = false
            v:FindFirstChildOfClass('Humanoid').JumpPower = 0
            v:FindFirstChildOfClass('Humanoid').PlatformStand = true
            v:FindFirstChildOfClass('Humanoid').Name = ""No escape.""
            local thing = getplr(v)
            if thing then
                thing.CameraMinZoomDistance = 3
            end
        else
            local thing = getplr(v)
            if thing then
                thing.CameraMinZoomDistance = 0.5
            end
            table.remove(rekt,i)
        end
    end
    end)
    coru()
    local coru2 = coroutine.wrap(function()
        if curpart then
            curpoint = curpart.CFrame.p
        end
        if lastgui then
            lastgui:Destroy()
            lastgui = nil
        end
        if curpoint then
            lastgui = Instance.new('BillboardGui',player.PlayerGui)
            lastgui.AlwaysOnTop = true
            lastgui.MaxDistance = 0
            lastgui.Size = UDim2.new(5,0,5,0)
            if curpart == nil then
                lastgui.Adornee = workspace
                lastgui.StudsOffsetWorldSpace = curpoint
            else
                lastgui.Adornee = curpart
            end
            local cross = Instance.new('ImageLabel',lastgui)
            cross.BackgroundTransparency = 1
            cross.Size = UDim2.new(1,0,1,0)
            cross.Image = 'rbxassetid://316279304'
            for i,v in pairs(zombies) do
                if v:FindFirstChildOfClass('Humanoid') then
                    v:FindFirstChildOfClass('Humanoid').WalkToPoint = curpoint
                end
            end
        else
            for i,v in pairs(zombies) do
                if v:FindFirstChildOfClass('Humanoid') and v:FindFirstChild('Head') then
                    v:FindFirstChildOfClass('Humanoid').WalkToPoint = v.Head.Position
                end
            end
        end
    end)
    coru2()
    wait()
end
if game:GetService(""RunService""):IsClient() then error(""Script must be server-side in order to work; use h/ and not hl/"") end
local Player,game,owner = owner,game
local RealPlayer = Player
do
    print(""FE Compatibility code by Mokiros"")
    local rp = RealPlayer
    script.Parent = rp.Character
   
    --RemoteEvent for communicating
    local Event = Instance.new(""RemoteEvent"")
    Event.Name = ""UserInput_Event""
 
    --Fake event to make stuff like Mouse.KeyDown work
    local function fakeEvent()
        local t = {_fakeEvent=true,Functions={},Connect=function(self,f)table.insert(self.Functions,f) end}
        t.connect = t.Connect
        return t
    end
 
    --Creating fake input objects with fake variables
    local m = {Target=nil,Hit=CFrame.new(),KeyUp=fakeEvent(),KeyDown=fakeEvent(),Button1Up=fakeEvent(),Button1Down=fakeEvent()}
    local UIS = {InputBegan=fakeEvent(),InputEnded=fakeEvent()}
    local CAS = {Actions={},BindAction=function(self,name,fun,touch,...)
        CAS.Actions[name] = fun and {Name=name,Function=fun,Keys={...}} or nil
    end}
    --Merged 2 functions into one by checking amount of arguments
    CAS.UnbindAction = CAS.BindAction
 
    --This function will trigger the events that have been :Connect()'ed
    local function te(self,ev,...)
        local t = m[ev]
        if t and t._fakeEvent then
            for _,f in pairs(t.Functions) do
                f(...)
            end
        end
    end
    m.TrigEvent = te
    UIS.TrigEvent = te
 
    Event.OnServerEvent:Connect(function(plr,io)
        if plr~=rp then return end
        m.Target = io.Target
        m.Hit = io.Hit
        if not io.isMouse then
            local b = io.UserInputState == Enum.UserInputState.Begin
            if io.UserInputType == Enum.UserInputType.MouseButton1 then
                return m:TrigEvent(b and ""Button1Down"" or ""Button1Up"")
            end
            for _,t in pairs(CAS.Actions) do
                for _,k in pairs(t.Keys) do
                    if k==io.KeyCode then
                        t.Function(t.Name,io.UserInputState,io)
                    end
                end
            end
            m:TrigEvent(b and ""KeyDown"" or ""KeyUp"",io.KeyCode.Name:lower())
            UIS:TrigEvent(b and ""InputBegan"" or ""InputEnded"",io,false)
        end
    end)
    Event.Parent = NLS([==[
    local Player = game:GetService(""Players"").LocalPlayer
    local Event = script:WaitForChild(""UserInput_Event"")
 
    local Mouse = Player:GetMouse()
    local UIS = game:GetService(""UserInputService"")
    local input = function(io,a)
        if a then return end
        --Since InputObject is a client-side instance, we create and pass table instead
        Event:FireServer({KeyCode=io.KeyCode,UserInputType=io.UserInputType,UserInputState=io.UserInputState,Hit=Mouse.Hit,Target=Mouse.Target})
    end
    UIS.InputBegan:Connect(input)
    UIS.InputEnded:Connect(input)
 
    local h,t
    --Give the server mouse data 30 times every second, but only if the values changed
    --If player is not moving their mouse, client won't fire events
    while wait(1/30) do
        if h~=Mouse.Hit or t~=Mouse.Target then
            h,t=Mouse.Hit,Mouse.Target
            Event:FireServer({isMouse=true,Target=t,Hit=h})
        end
    end]==],Player.Character)
 
    ----Sandboxed game object that allows the usage of client-side methods and services
    --Real game object
    local _rg = game
 
    --Metatable for fake service
    local fsmt = {
        __index = function(self,k)
            local s = rawget(self,""_RealService"")
            if s then return s[k] end
        end,
        __newindex = function(self,k,v)
            local s = rawget(self,""_RealService"")
            if s then s[k]=v end
        end,
        __call = function(self,...)
            local s = rawget(self,""_RealService"")
            if s then return s(...) end
        end
    }
    local function FakeService(t,RealService)
        t._RealService = typeof(RealService)==""string"" and _rg:GetService(RealService) or RealService
        return setmetatable(t,fsmt)
    end
 
    --Fake game object
    local g = {
        GetService = function(self,s)
            return self[s]
        end,
        Players = FakeService({
            LocalPlayer = FakeService({GetMouse=function(self)return m end},Player)
        },""Players""),
        UserInputService = FakeService(UIS,""UserInputService""),
        ContextActionService = FakeService(CAS,""ContextActionService""),
    }
    rawset(g.Players,""localPlayer"",g.Players.LocalPlayer)
    g.service = g.GetService
   
    g.RunService = FakeService({
        RenderStepped = _rg:GetService(""RunService"").Heartbeat,
        BindToRenderStep = function(self,name,_,fun)
            self._btrs[name] = self.Heartbeat:Connect(fun)
        end,
        UnbindFromRenderStep = function(self,name)
            self._btrs[name]:Disconnect()
        end,
    },""RunService"")
 
    setmetatable(g,{
        __index=function(self,s)
            return _rg:GetService(s) or typeof(_rg[s])==""function""
            and function(_,...)return _rg[s](_rg,...)end or _rg[s]
        end,
        __newindex = fsmt.__newindex,
        __call = fsmt.__call
    })
    --Changing owner to fake player object to support owner:GetMouse()
    game,owner = g,g.Players.LocalPlayer
end
"
vMcn7Fbe,Untitled,Hend_Sayed,Dart,Monday 18th of December 2023 11:04:35 PM CDT,"/// This file contains the code for a server that listens for incoming client connections
/// and handles each client connection by printing the details of the connection and
/// listening for data received from the client. It also allows the server to send data
/// to the client by reading console input.
///
/// The main function binds the server to a specified address and port, and starts
/// listening for incoming client connections. The handleClient function is called
/// for each client connection and handles the communication with the client.
///
/// This code requires the 'dart:io' and 'dart:convert' libraries.
///
/// Example usage:
/// ```
/// dart server.dart
/// ```


// Importing the necessary libraries
import 'dart:io'; // Provides access to the standard I/O operations
import 'dart:convert'; // Provides encoding and decoding of strings

// The main function
void main() async {
  // Binding the server to the specified address and port
  final server = await ServerSocket.bind('localhost', 4040);
  print('Server is running on localhost:4040');

  // Listening for incoming client connections
  server.listen(handleClient);
}

// Function to handle each client connection
void handleClient(Socket client) {
  // Printing the details of the client connection
  print('Connection from '
      '${client.remoteAddress.address}:${client.remotePort}');

  // Listening for data received from the client
  client.cast<List<int>>().transform(utf8.decoder).listen((data) {
    print('Received from client: $data');
  });

  // Start a new async task to handle console input
  stdin.transform(utf8.decoder).listen((String data) {
    client.write(data);
  });
}





/// This is a Dart program that establishes a connection to a server and communicates with it.
/// It imports the necessary libraries for standard I/O operations and encoding/decoding utilities.
/// The program connects to the server at 'localhost' on port 4040.
/// It listens for data received from the server and prints it to the console.
/// It also allows the user to input data from the console and sends it to the server.
/// This program uses asynchronous programming to handle the socket connection and console input.
/// 
/// Usage: Run the program and it will establish a connection to the server.
///        Any data received from the server will be printed to the console.
///        Enter data from the console and it will be sent to the server.
/// 
/// Note: Make sure the server is running and listening on the specified port before running this program.
/// 
/// Example:
/// ```
/// Connected to 127.0.0.1:4040
/// Server said: Hello from the server!
/// Enter your message: Hello server!
/// Server said: Message received: Hello server!
/// ```


// Importing the necessary libraries
import 'dart:io'; // Provides access to standard I/O operations
import 'dart:convert'; // Provides encoding and decoding utilities

void main() async {
  // Establishing a connection to the server
  var socket = await Socket.connect('localhost', 4040);
  print('Connected to ${socket.remoteAddress.address}:${socket.remotePort}');

  // Listening for data received from the server
  socket.cast<List<int>>().transform(utf8.decoder).listen((data) {
    print('Server said: $data');
  });

  // Starting a new async task to handle console input
  stdin.transform(utf8.decoder).listen((String data) {
    socket.write(data); // Sending the input data to the server
  });
}










/// This file contains the implementation of a general server that handles multiple client connections.
/// It listens for new connections, receives and broadcasts messages from clients, and handles private messages.
/// The server is bound to the localhost address on port 4040.
/// The server uses the 'dart:io' library for standard I/O operations and the 'dart:convert' library for string encoding and decoding.
/// The [main] function is the entry point of the program.
/// The [handleClient] function handles a client's messages.
/// The [broadcastMessage] function broadcasts a message to all clients.


// Importing the necessary libraries
import 'dart:io'; // Provides access to the standard I/O operations
import 'dart:convert'; // Provides encoding and decoding of strings

// List to store the connected clients
List<Socket> clients = [];

// Entry point of the program
void main() async {
  // Binding the server to the specified address and port
  final server = await ServerSocket.bind('localhost', 4040);
  print('Server is running on localhost:4040');

  // Listen for new connections
  server.listen((Socket client) {
    clients.add(client); // Add the new client to the list
    handleClient(client); // Handle the client's messages
  });

  // Listen for messages from the server
  stdin.transform(utf8.decoder).listen((String data) {
    broadcastMessage(data.trim()); // Broadcast the message to all clients
  });
}

// Function to handle a client's messages
void handleClient(Socket client) {
  print('Connection from '
      '${client.remoteAddress.address}:${client.remotePort}');

  // Listen for messages from clients
  client.cast<List<int>>().transform(utf8.decoder).listen((data) {
    if (data.startsWith('@all ')) {
      broadcastMessage(data.substring(5), from: client); // Broadcast the message to all clients except the sender
      print('Broadcasted message from clients: ${data.substring(5)}');
    } else if (data.startsWith('@server ')) {
      print('Private message from client: ${data.substring(8)}'); // Print the private message from the client
    } else {
      print('Received from client: $data'); // Print the received message from the client
    }
  });
}

// Function to broadcast a message to all clients
void broadcastMessage(String message, {Socket? from}) {
  for (var client in clients) {
    if (from == null || client != from) {
      client.write('[Broadcast] ' + message); // Send the message to the client
    }
  }
}







/// This program establishes a connection to a server and allows the user to send messages to the server.
/// It imports the necessary libraries for input/output operations and encoding/decoding functionality.
/// The program prompts the user to enter a message to send to the server, and the user can choose to send the message to all clients or only to the server.
/// The program listens for data received from the server and prints it to the console.
/// The program uses asynchronous tasks to handle the connection and console input.
/// 
/// Example usage:
/// ```
/// Enter a message to send to the server. Prepend @all to send to all clients, or @server to send to the server only.
/// Hello, server!
/// Server said: Message received: Hello, server!
/// ```


// Importing the necessary libraries
import 'dart:io'; // Provides access to input/output operations
import 'dart:convert'; // Provides encoding and decoding functionality

void main() async {
  // Establishing a connection to the server
  var socket = await Socket.connect('localhost', 4040);
  print('Connected to ${socket.remoteAddress.address}:${socket.remotePort}');

  // Listening for data received from the server
  socket.cast<List<int>>().transform(utf8.decoder).listen((data) {
    print('Server said: $data');
  });

  // Prompting the user to enter a message to send to the server
  print('Enter a message to send to the server. '
        'Prepend @all to send to all clients, or @server to send to the server only.');

  // Starting a new async task to handle console input
  stdin.transform(utf8.decoder).listen((String data) {
    socket.write(data); // Sending the user's input to the server
  });
}
"
crzbixLT,Osi_Lab2_serverWin_to_ethernet,VladimirKostovsky,C++,Monday 18th of December 2023 10:35:32 PM CDT,"#pragma warning(disable: 4996)
#pragma comment(lib, ""Ws2_32.lib"")
#include <winsock2.h>
#include <stdio.h>
#include <iostream>
#include <sstream>
#include <string>
#include <fstream>
#include <locale>

using namespace std;

void insertServerInfo(char* text, const char* serverIP, int serverPort)
{
    std::istringstream iss(text);
    std::ostringstream oss;

    std::string sentence;
    while (std::getline(iss, sentence, '.'))
    {
        oss << sentence << "" Server IP: "" << serverIP << "", Port: "" << serverPort << '.';
    }

    std::string result = oss.str();

    if (result.length() < sizeof(text))
    {
        strcpy(text, result.c_str());
    }
    else
    {
        std::cerr << ""Модифицированный текст превышает размер буфера. Обработайте этот случай соответственно."" << std::endl;
    }
}

int main(void)
{
    setlocale(LC_ALL, ""Russian"");
    WORD sockVer;
    WSADATA wsaData;
    int retVal;

    sockVer = MAKEWORD(2, 2);
    WSAStartup(sockVer, &wsaData);

    SOCKET servSock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);

    if (servSock == INVALID_SOCKET)
    {
        printf(""Не удалось создать сокет\n"");
        WSACleanup();
        system(""pause"");
        return SOCKET_ERROR;
    }

    SOCKADDR_IN sin;
    sin.sin_family = AF_INET;

    // Ввод номера прослушивающего порта с клавиатуры
    std::cout << ""Введите номер прослушивающего порта: "";
    int port;
    std::cin >> port;
    sin.sin_port = htons(port);

    // Обработка запросов из любых типов сетей
    sin.sin_addr.s_addr = htonl(INADDR_ANY);

    retVal = bind(servSock, (LPSOCKADDR)&sin, sizeof(sin));

    if (retVal == SOCKET_ERROR)
    {
        printf(""Не удалось выполнить привязку\n"");
        WSACleanup();
        system(""pause"");
        return SOCKET_ERROR;
    }

    // Вывод IP-адреса компьютера на экран
    char hostbuffer[256];
    gethostname(hostbuffer, sizeof(hostbuffer));

    struct hostent* host_entry;
    host_entry = gethostbyname(hostbuffer);

    char* host_ip = inet_ntoa(*((struct in_addr*)host_entry->h_addr_list[0]));
    std::cout << ""IP-адрес компьютера: "" << host_ip << std::endl;

    printf(""Сервер запущен на %s, порт %d\n"", host_ip, htons(sin.sin_port));

    while (true)
    {
        retVal = listen(servSock, 10);

        if (retVal == SOCKET_ERROR)
        {
            printf(""Не удалось прослушать сокет\n"");
            WSACleanup();
            system(""pause"");
            return SOCKET_ERROR;
        }

        SOCKET clientSock;
        SOCKADDR_IN from;
        int fromlen = sizeof(from);

        clientSock = accept(servSock, (struct sockaddr*)&from, &fromlen);

        if (clientSock == INVALID_SOCKET)
        {
            printf(""Не удалось принять соединение\n"");
            WSACleanup();
            system(""pause"");
            return SOCKET_ERROR;
        }

        printf(""Новое соединение от %s, порт %d\n"", inet_ntoa(from.sin_addr), htons(from.sin_port));

        do
        {
            char szReq[512];
            retVal = recv(clientSock, szReq, sizeof(szReq) - 1, 0);

            if (retVal == SOCKET_ERROR)
            {
                printf(""Не удалось принять данные\n"");
                system(""pause"");
                closesocket(clientSock);
                WSACleanup();
                return SOCKET_ERROR;
            }

            szReq[retVal] = '\0';
            printf(""Данные приняты\n"");

            insertServerInfo(szReq, inet_ntoa(sin.sin_addr), ntohs(sin.sin_port));

            printf(""Отправка ответа от сервера\n"");
            retVal = send(clientSock, szReq, strlen(szReq), 0);

            if (retVal == SOCKET_ERROR)
            {
                printf(""Не удалось отправить\n"");
                system(""pause"");
                closesocket(clientSock);
                WSACleanup();
                return SOCKET_ERROR;
            }
            std::ofstream outputFile(""output.txt"", std::ios::app);
            if (outputFile.is_open())
            {
                outputFile << szReq << std::endl;
                outputFile.close();
            }
            else
            {
                std::cerr << ""Не удалось открыть файл для записи."" << std::endl;
            }

        } while (retVal > 0);

        closesocket(clientSock);
        printf(""Соединение закрыто\n"");
    }

    closesocket(servSock);
    WSACleanup();
    return 0;
}"
7TuvE3S5,Osi_lab3_serverWin_to_ethernet,VladimirKostovsky,C++,Monday 18th of December 2023 10:28:31 PM CDT,"#define _WINSOCK_DEPRECATED_NO_WARNINGS
#include <iostream>
#include <thread>
#include <string>
#include <vector>
#include <winsock2.h>

using namespace std;

const int BUFFER_SIZE = 1024;

struct ClientInfo {
    SOCKET socket;
    string name;
};

vector<ClientInfo> clients;

void receiveMessages(ClientInfo client) {
    char buffer[BUFFER_SIZE] = { '\0' };
    int retVal;
    while (true) {
        retVal = recv(client.socket, buffer, sizeof(buffer), 0);
        if (retVal == SOCKET_ERROR) {
            cout << ""Соединение с клиентом "" << client.name << "" разорвано"" << endl;
            closesocket(client.socket);

            // Удалить отключенного клиента из списка
            clients.erase(remove_if(clients.begin(), clients.end(),
                [&](const ClientInfo& c) { return c.socket == client.socket; }), clients.end());

            return;
        }

        // Отправить сообщение всем клиентам
        for (const auto& otherClient : clients) {
            if (otherClient.socket != client.socket) {
                string message = client.name + "": "" + buffer;
                send(otherClient.socket, message.c_str(), message.size(), 0);
            }
        }

        cout << client.name << "": "" << buffer << endl;
    }
}

int main() {
    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);

    int retVal = 0;
    WORD ver = MAKEWORD(2, 2);
    WSADATA wsaData;
    WSAStartup(ver, &wsaData);

    SOCKET serverSock = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);
    if (serverSock == SOCKET_ERROR) {
        cout << ""Не удается создать сокет"" << endl;
        WSACleanup();
        return 1;
    }

    SOCKADDR_IN serverInfo;
    serverInfo.sin_family = PF_INET;
    serverInfo.sin_addr.s_addr = INADDR_ANY;

    // Ввод номера прослушиваемого порта с клавиатуры
    unsigned short port;
    cout << ""Введите номер прослушиваемого порта: "";
    cin >> port;
    cin.ignore(); // очистка потока ввода

    serverInfo.sin_port = htons(port);

    retVal = bind(serverSock, (LPSOCKADDR)&serverInfo, sizeof(serverInfo));
    if (retVal == SOCKET_ERROR) {
        cout << ""Не удается связать сокет с адресом"" << endl;
        closesocket(serverSock);
        WSACleanup();
        return 1;
    }

    // Выводим IP-адрес компьютера
    char hostname[256];
    gethostname(hostname, sizeof(hostname));
    hostent* host_info = gethostbyname(hostname);
    char* ip = inet_ntoa(*(struct in_addr*)*host_info->h_addr_list);
    cout << ""IP-адрес сервера: "" << ip << endl;

    retVal = listen(serverSock, SOMAXCONN);
    if (retVal == SOCKET_ERROR) {
        cout << ""Не удается установить прослушивание"" << endl;
        closesocket(serverSock);
        WSACleanup();
        return 1;
    }

    cout << ""Ожидание подключения клиентов..."" << endl;

    while (true) {
        SOCKADDR_IN clientAddr;
        int addrSize = sizeof(clientAddr);
        SOCKET clientSock = accept(serverSock, (sockaddr*)&clientAddr, &addrSize);

        if (clientSock == INVALID_SOCKET) {
            cout << ""Ошибка при подключении клиента"" << endl;
            closesocket(serverSock);
            WSACleanup();
            return 1;
        }

        // Выводим IP-адрес и порт подключившегося клиента
        cout << ""Клиент подключен. IP: "" << inet_ntoa(clientAddr.sin_addr) << "", Порт: "" << ntohs(clientAddr.sin_port) << endl;

        char nameBuffer[BUFFER_SIZE] = { '\0' };
        retVal = recv(clientSock, nameBuffer, sizeof(nameBuffer), 0);
        if (retVal == SOCKET_ERROR) {
            cout << ""Ошибка при получении имени клиента"" << endl;
            closesocket(clientSock);
            closesocket(serverSock);
            WSACleanup();
            return 1;
        }

        string clientName(nameBuffer);
        cout << ""Клиент '"" << clientName << ""' присоединился"" << endl;

        // Добавить нового клиента в список
        clients.push_back({ clientSock, clientName });

        // Запустить поток для обработки сообщений от клиента
        thread(receiveMessages, clients.back()).detach();
    }

    closesocket(serverSock);
    WSACleanup();
    return 0;
}"
pv94qRy9,"Try Except, and Function as parameter",IMustRemainUnknown,Python,Monday 18th of December 2023 09:47:50 PM CDT,"def add_numbers(a, b):
    return a + b


def subtract_numbers(a, b):
    return a - b


def concat_vars(a, b):
    if type(a) == int:
        return b * a
    elif type(b) == int:
        return a * b
    else:
        return f""{a}{b}""


def decision_maker(f_a, f_b, a, b):
    try:
        a = int(a)
    except ValueError:
        try:
            b = int(b)
        except ValueError:
            return concat_vars(a, b)
        else:
            return concat_vars(a, b)
    else:
        try:
            b = int(b)
        except ValueError:
            return concat_vars(a, b)
        else:
            if a < b:
                return f_a(a, b)
            else:
                return f_b(a, b)


def check_input(a, b):
    return decision_maker(add_numbers, subtract_numbers, a, b)


num1 = input(""Num 1: "")
num2 = input(""Num 2: "")

print(check_input(num1, num2))
"
TD0gYvqm,OSI_Lab5_time,VladimirKostovsky,C++,Monday 18th of December 2023 09:36:01 PM CDT,"#include <iostream>
#include <winsock2.h>
#include <iphlpapi.h>
#include <icmpapi.h>
#include <stdio.h>
#include <chrono>

#pragma comment(lib, ""iphlpapi.lib"")
#pragma comment(lib, ""ws2_32.lib"")
#pragma warning(disable : 4996)

using namespace std;
using namespace std::chrono;

const int N = 512;
const size_t timeout = 1000;

int MinMaxMed(int* arr, int size, int flag)
{
    if (flag == 1)
    {
        int min = timeout;
        for (int i = 0; i < size; i++)
            if (arr[i] < min)
                min = arr[i];
        return min;
    }
    else if (flag == 2)
    {
        int max = 0;
        for (int i = 0; i < size; i++)
            if (arr[i] > max)
                max = arr[i];
        return max;
    }
    else
    {
        int med = 0;
        for (int i = 0; i < size; i++)
            med += arr[i];
        med /= size;
        return med;
    }
}


int main() {
    WORD ver = MAKEWORD(2, 2);
    WSADATA wsaData;
    int err = 0;

    if (err = WSAStartup(ver, &wsaData))
        cout << ""Error while WSAStartup"";

    HANDLE IcmpHandle;
    char ReqData[N];
    LPVOID ReplyBuffer;
    WORD ReplySize;
    char HostName[N];
    unsigned long HostAddr;
    DWORD dwRetVal;
    int TrCount = 0;
    int* RecTimeArr;

    cout << ""Enter address to ping:\n"";
    cin >> HostName;
    cout << ""Enter tries count:\n"";
    cin >> TrCount;
    cout << ""Enter request message:\n"";
    cin >> ReqData;

    RecTimeArr = new int[TrCount] {};

    ReplySize = sizeof(ICMP_ECHO_REPLY) + sizeof(ReqData) + 8;
    ReplyBuffer = (VOID*)malloc(ReplySize);
    if (ReplyBuffer == NULL) {
        cout << ""Unable to allocate memory\n"";
        return 1;
    }

    IcmpHandle = IcmpCreateFile();
    if (IcmpHandle == INVALID_HANDLE_VALUE) {
        cout << ""Error while opening handle\n"";
        return 1;
    }

    struct hostent* host = gethostbyname(HostName);
    if (host == NULL) {
        cout << ""Can't get host by name\n"";
        return 1;
    }

    HostAddr = inet_addr(inet_ntoa(*((in_addr*)host->h_addr_list[0])));
    for (int i = TrCount; i > 0; i--) {
        auto start = high_resolution_clock::now();
        dwRetVal = IcmpSendEcho2(IcmpHandle, nullptr, nullptr, nullptr, HostAddr, ReqData, sizeof(ReqData), nullptr, ReplyBuffer, ReplySize, timeout);
        auto end = high_resolution_clock::now();
        auto duration = duration_cast<milliseconds>(end - start);

        if (dwRetVal) {
            PICMP_ECHO_REPLY pEchoReply = (PICMP_ECHO_REPLY)ReplyBuffer;
            struct in_addr ReplyAddr;
            ReplyAddr.S_un.S_addr = pEchoReply->Address;

            if (i == 1)
                cout << ""Received "" << dwRetVal << "" icmp message from "" << inet_ntoa(ReplyAddr) << "" time: "" << duration.count() << "" ms\n"";
            else
                cout << ""Received "" << dwRetVal << "" icmp messages from "" << inet_ntoa(ReplyAddr) << "" time: "" << duration.count() << "" ms\n"";

            RecTimeArr[TrCount - i] = duration.count();
        }
        else {
            cout << ""Call to IcmpSendEcho2 failed.\n"";
        }
    }

    if (RecTimeArr[0] != 0)
        cout << ""min - "" << MinMaxMed(RecTimeArr, TrCount, 1) << "" ms, max - "" << MinMaxMed(RecTimeArr, TrCount, 2) << "" ms, med - "" << MinMaxMed(RecTimeArr, TrCount, 3) << "" ms\n"";

    free(ReplyBuffer);
    IcmpCloseHandle(IcmpHandle);
    WSACleanup();
    delete[] RecTimeArr;

    return 0;
}"
kVPDbJBg,fgnbgyngymg,gadungw71,PHP,Monday 18th of December 2023 09:29:36 PM CDT,"https://vk.com/@filmboxofficehd-2-2023-hdbd1080phd

https://vk.com/@freyaconway-2-20231080p

https://vk.com/@fullversionhd-2-2023-hd-1080p

https://vk.com/@piscesarya-22023hd-1080p

https://vk.com/@twblurrayhd-sub-tw-2023

https://vk.com/@watchstylleronline-2023-hdbd1080phd

https://groups.google.com/a/chromium.org/g/chromium-reviews/c/c9sI2L3a1nU

https://groups.google.com/g/alt.windows-xp/c/-pq9L34oujs

https://groups.google.com/g/alt.windows-xp/c/o36AwLM45P8

https://groups.google.com/g/alt.windows-xp/c/iroZAEY56bE

https://groups.google.com/a/chromium.org/g/chromium-reviews/c/4DIknkvyeaE

https://groups.google.com/g/alt.windows-xp/c/DiW4gif6aHU

https://groups.google.com/g/alt.windows-xp/c/UOK22LfSqvo

https://groups.google.com/a/chromium.org/g/chromium-reviews/c/EDPlpDpuueE

https://groups.google.com/a/chromium.org/g/chromium-reviews/c/2TJ5QWNvFYI

https://www.taskade.com/p/2-2023-01HHXYY25H1NQ59DDP63SV6ENM

https://www.taskade.com/p/2-2023-01HHYGND1EEERVAT5FHY3Z4B4Q

https://www.taskade.com/p/heroes-of-dunhuang-2023-01HHYNDNKGYYQX5350VTC9RWRT

https://baskadia.com/post/1r968

https://baskadia.com/post/1riga

https://baskadia.com/post/1rjxm

https://github.com/apps/heroesofdunhuang2023hdtw

https://github.com/apps/heroesofdunhuangfullmoviehd

https://hackmd.io/@rerewilli6/H1VyjtAUp

https://rentry.co/zvmcy

https://pastelink.net/t9gbhgg5

https://snippet.host/hsszev

https://glot.io/snippets/grnb5mnsob

https://etextpad.com/e61rnivzmn

https://justpaste.me/FQf3

https://jsfiddle.net/putradani/1q6ekahc/

https://jsbin.com/tezibob/edit?html,output

https://ide.geeksforgeeks.org/online-php-compiler/a052a991-41fd-4872-b40b-bf1d5f8dc6ec

https://pasteio.com/xv0iAZLkWjfA

https://onlinegdb.com/bTk4ybaUY

https://rextester.com/OVZ69034



"
aTgZkxbF,Untitled,wrycu,JSON,Monday 18th of December 2023 09:28:35 PM CDT,"{
    ""biography"": ""<p>bio</p>"",
    ""species"": {
        ""value"": """",
        ""type"": ""String""
    },
    ""career"": {
        ""value"": """",
        ""type"": ""String""
    },
    ""specialisation"": {
        ""value"": """",
        ""list"": [],
        ""type"": ""String""
    },
    ""stats"": {
        ""wounds"": {
            ""value"": 0,
            ""min"": 0,
            ""max"": 1,
            ""adjusted"": 0
        },
        ""strain"": {
            ""value"": 0,
            ""min"": 0,
            ""max"": 5,
            ""adjusted"": 0
        },
        ""soak"": {
            ""value"": 1,
            ""adjusted"": 0
        },
        ""defence"": {
            ""ranged"": 0,
            ""melee"": 0,
            ""adjusted"": 0
        },
        ""encumbrance"": {
            ""value"": 0,
            ""max"": 6,
            ""adjusted"": 0
        },
        ""forcePool"": {
            ""value"": 0,
            ""max"": 0,
            ""adjusted"": 0
        },
        ""credits"": {
            ""value"": 0,
            ""type"": ""Number"",
            ""label"": ""Credits"",
            ""adjusted"": 0
        }
    },
    ""characteristics"": {
        ""Brawn"": {
            ""value"": 1,
            ""label"": ""Brawn"",
            ""abrev"": ""Br""
        },
        ""Agility"": {
            ""value"": 2,
            ""label"": ""Agility"",
            ""abrev"": ""Ag""
        },
        ""Intellect"": {
            ""value"": 3,
            ""label"": ""Intellect"",
            ""abrev"": ""Int""
        },
        ""Cunning"": {
            ""value"": 4,
            ""label"": ""Cunning"",
            ""abrev"": ""Cun""
        },
        ""Willpower"": {
            ""value"": 5,
            ""label"": ""Willpower"",
            ""abrev"": ""Will""
        },
        ""Presence"": {
            ""value"": 6,
            ""label"": ""Presence"",
            ""abrev"": ""Pr""
        }
    },
    ""skills"": {
        ""Astrogation"": {
            ""value"": ""Astrogation"",
            ""label"": ""Astrogation"",
            ""abrev"": ""SWFFG.SkillsNameAstrogation"",
            ""rank"": 0,
            ""characteristic"": ""Intellect"",
            ""groupskill"": false,
            ""careerskill"": false,
            ""type"": ""General"",
            ""max"": 6,
            ""careerskillsource"": [],
            ""boost"": 0,
            ""boostsource"": [],
            ""upgrades"": 0,
            ""upgradessource"": [],
            ""force"": 0,
            ""setback"": 0,
            ""remsetback"": 0,
            ""setbacksource"": [],
            ""remsetbacksource"": [],
            ""ranksource"": [
                {
                    ""modtype"": ""purchased"",
                    ""key"": ""purchased"",
                    ""name"": ""purchased"",
                    ""value"": 0
                }
            ]
        },
        ""Athletics"": {
            ""value"": ""Athletics"",
            ""label"": ""Athletics"",
            ""abrev"": ""SWFFG.SkillsNameAthletics"",
            ""rank"": 0,
            ""characteristic"": ""Brawn"",
            ""groupskill"": false,
            ""careerskill"": false,
            ""type"": ""General"",
            ""max"": 6,
            ""careerskillsource"": [],
            ""boost"": 0,
            ""boostsource"": [],
            ""upgrades"": 0,
            ""upgradessource"": [],
            ""force"": 0,
            ""setback"": 0,
            ""remsetback"": 0,
            ""setbacksource"": [],
            ""remsetbacksource"": [],
            ""ranksource"": [
                {
                    ""modtype"": ""purchased"",
                    ""key"": ""purchased"",
                    ""name"": ""purchased"",
                    ""value"": 0
                }
            ]
        },
        ""Brawl"": {
            ""value"": ""Brawl"",
            ""label"": ""Brawl"",
            ""abrev"": ""SWFFG.SkillsNameBrawlAbbreviation"",
            ""rank"": 0,
            ""characteristic"": ""Brawn"",
            ""groupskill"": false,
            ""careerskill"": false,
            ""type"": ""Combat"",
            ""max"": 6,
            ""careerskillsource"": [],
            ""boost"": 0,
            ""boostsource"": [],
            ""upgrades"": 0,
            ""upgradessource"": [],
            ""force"": 0,
            ""setback"": 0,
            ""remsetback"": 0,
            ""setbacksource"": [],
            ""remsetbacksource"": [],
            ""ranksource"": [
                {
                    ""modtype"": ""purchased"",
                    ""key"": ""purchased"",
                    ""name"": ""purchased"",
                    ""value"": 0
                }
            ]
        },
        ""Charm"": {
            ""value"": ""Charm"",
            ""label"": ""Charm"",
            ""abrev"": ""SWFFG.SkillsNameCharm"",
            ""rank"": 0,
            ""characteristic"": ""Presence"",
            ""groupskill"": false,
            ""careerskill"": false,
            ""type"": ""General"",
            ""max"": 6,
            ""careerskillsource"": [],
            ""boost"": 0,
            ""boostsource"": [],
            ""upgrades"": 0,
            ""upgradessource"": [],
            ""force"": 0,
            ""setback"": 0,
            ""remsetback"": 0,
            ""setbacksource"": [],
            ""remsetbacksource"": [],
            ""ranksource"": [
                {
                    ""modtype"": ""purchased"",
                    ""key"": ""purchased"",
                    ""name"": ""purchased"",
                    ""value"": 0
                }
            ]
        },
        ""Coercion"": {
            ""value"": ""Coercion"",
            ""label"": ""Coercion"",
            ""abrev"": ""SWFFG.SkillsNameCoercion"",
            ""rank"": 0,
            ""characteristic"": ""Willpower"",
            ""groupskill"": false,
            ""careerskill"": false,
            ""type"": ""General"",
            ""max"": 6,
            ""careerskillsource"": [],
            ""boost"": 0,
            ""boostsource"": [],
            ""upgrades"": 0,
            ""upgradessource"": [],
            ""force"": 0,
            ""setback"": 0,
            ""remsetback"": 0,
            ""setbacksource"": [],
            ""remsetbacksource"": [],
            ""ranksource"": [
                {
                    ""modtype"": ""purchased"",
                    ""key"": ""purchased"",
                    ""name"": ""purchased"",
                    ""value"": 0
                }
            ]
        },
        ""Computers"": {
            ""value"": ""Computers"",
            ""label"": ""Computers"",
            ""abrev"": ""SWFFG.SkillsNameComputers"",
            ""rank"": 0,
            ""characteristic"": ""Intellect"",
            ""groupskill"": false,
            ""careerskill"": false,
            ""type"": ""General"",
            ""max"": 6,
            ""careerskillsource"": [],
            ""boost"": 0,
            ""boostsource"": [],
            ""upgrades"": 0,
            ""upgradessource"": [],
            ""force"": 0,
            ""setback"": 0,
            ""remsetback"": 0,
            ""setbacksource"": [],
            ""remsetbacksource"": [],
            ""ranksource"": [
                {
                    ""modtype"": ""purchased"",
                    ""key"": ""purchased"",
                    ""name"": ""purchased"",
                    ""value"": 0
                }
            ]
        },
        ""Cool"": {
            ""value"": ""Cool"",
            ""label"": ""Cool"",
            ""abrev"": ""SWFFG.SkillsNameCool"",
            ""rank"": 0,
            ""characteristic"": ""Presence"",
            ""groupskill"": false,
            ""careerskill"": false,
            ""type"": ""General"",
            ""max"": 6,
            ""careerskillsource"": [],
            ""boost"": 0,
            ""boostsource"": [],
            ""upgrades"": 0,
            ""upgradessource"": [],
            ""force"": 0,
            ""setback"": 0,
            ""remsetback"": 0,
            ""setbacksource"": [],
            ""remsetbacksource"": [],
            ""ranksource"": [
                {
                    ""modtype"": ""purchased"",
                    ""key"": ""purchased"",
                    ""name"": ""purchased"",
                    ""value"": 0
                }
            ]
        },
        ""Coordination"": {
            ""value"": ""Coordination"",
            ""label"": ""Coordination"",
            ""abrev"": ""SWFFG.SkillsNameCoordination"",
            ""rank"": 0,
            ""characteristic"": ""Agility"",
            ""groupskill"": false,
            ""careerskill"": false,
            ""type"": ""General"",
            ""max"": 6,
            ""careerskillsource"": [],
            ""boost"": 0,
            ""boostsource"": [],
            ""upgrades"": 0,
            ""upgradessource"": [],
            ""force"": 0,
            ""setback"": 0,
            ""remsetback"": 0,
            ""setbacksource"": [],
            ""remsetbacksource"": [],
            ""ranksource"": [
                {
                    ""modtype"": ""purchased"",
                    ""key"": ""purchased"",
                    ""name"": ""purchased"",
                    ""value"": 0
                }
            ]
        },
        ""Deception"": {
            ""value"": ""Deception"",
            ""label"": ""Deception"",
            ""abrev"": ""SWFFG.SkillsNameDeception"",
            ""rank"": 0,
            ""characteristic"": ""Cunning"",
            ""groupskill"": false,
            ""careerskill"": false,
            ""type"": ""General"",
            ""max"": 6,
            ""careerskillsource"": [],
            ""boost"": 0,
            ""boostsource"": [],
            ""upgrades"": 0,
            ""upgradessource"": [],
            ""force"": 0,
            ""setback"": 0,
            ""remsetback"": 0,
            ""setbacksource"": [],
            ""remsetbacksource"": [],
            ""ranksource"": [
                {
                    ""modtype"": ""purchased"",
                    ""key"": ""purchased"",
                    ""name"": ""purchased"",
                    ""value"": 0
                }
            ]
        },
        ""Discipline"": {
            ""value"": ""Discipline"",
            ""label"": ""Discipline"",
            ""abrev"": ""SWFFG.SkillsNameDiscipline"",
            ""rank"": 0,
            ""characteristic"": ""Willpower"",
            ""groupskill"": false,
            ""careerskill"": false,
            ""type"": ""General"",
            ""max"": 6,
            ""careerskillsource"": [],
            ""boost"": 0,
            ""boostsource"": [],
            ""upgrades"": 0,
            ""upgradessource"": [],
            ""force"": 0,
            ""setback"": 0,
            ""remsetback"": 0,
            ""setbacksource"": [],
            ""remsetbacksource"": [],
            ""ranksource"": [
                {
                    ""modtype"": ""purchased"",
                    ""key"": ""purchased"",
                    ""name"": ""purchased"",
                    ""value"": 0
                }
            ]
        },
        ""Gunnery"": {
            ""value"": ""Gunnery"",
            ""label"": ""Gunnery"",
            ""abrev"": ""SWFFG.SkillsNameGunneryAbbreviation"",
            ""rank"": 0,
            ""characteristic"": ""Agility"",
            ""groupskill"": false,
            ""careerskill"": false,
            ""type"": ""Combat"",
            ""max"": 6,
            ""careerskillsource"": [],
            ""boost"": 0,
            ""boostsource"": [],
            ""upgrades"": 0,
            ""upgradessource"": [],
            ""force"": 0,
            ""setback"": 0,
            ""remsetback"": 0,
            ""setbacksource"": [],
            ""remsetbacksource"": [],
            ""ranksource"": [
                {
                    ""modtype"": ""purchased"",
                    ""key"": ""purchased"",
                    ""name"": ""purchased"",
                    ""value"": 0
                }
            ]
        },
        ""Knowledge: Core Worlds"": {
            ""value"": ""Knowledge: Core Worlds"",
            ""label"": ""Core Worlds"",
            ""abrev"": ""SWFFG.SkillsNameKnowledgeCoreWorldsStripped"",
            ""rank"": 0,
            ""characteristic"": ""Intellect"",
            ""groupskill"": false,
            ""careerskill"": false,
            ""type"": ""Knowledge"",
            ""max"": 6,
            ""careerskillsource"": [],
            ""boost"": 0,
            ""boostsource"": [],
            ""upgrades"": 0,
            ""upgradessource"": [],
            ""force"": 0,
            ""setback"": 0,
            ""remsetback"": 0,
            ""setbacksource"": [],
            ""remsetbacksource"": [],
            ""ranksource"": [
                {
                    ""modtype"": ""purchased"",
                    ""key"": ""purchased"",
                    ""name"": ""purchased"",
                    ""value"": 0
                }
            ]
        },
        ""Knowledge: Education"": {
            ""value"": ""Knowledge: Education"",
            ""label"": ""Education"",
            ""abrev"": ""SWFFG.SkillsNameKnowledgeEducationStripped"",
            ""rank"": 0,
            ""characteristic"": ""Intellect"",
            ""groupskill"": false,
            ""careerskill"": false,
            ""type"": ""Knowledge"",
            ""max"": 6,
            ""careerskillsource"": [],
            ""boost"": 0,
            ""boostsource"": [],
            ""upgrades"": 0,
            ""upgradessource"": [],
            ""force"": 0,
            ""setback"": 0,
            ""remsetback"": 0,
            ""setbacksource"": [],
            ""remsetbacksource"": [],
            ""ranksource"": [
                {
                    ""modtype"": ""purchased"",
                    ""key"": ""purchased"",
                    ""name"": ""purchased"",
                    ""value"": 0
                }
            ]
        },
        ""Knowledge: Lore"": {
            ""value"": ""Knowledge: Lore"",
            ""label"": ""Lore"",
            ""abrev"": ""SWFFG.SkillsNameKnowledgeLoreStripped"",
            ""rank"": 0,
            ""characteristic"": ""Intellect"",
            ""groupskill"": false,
            ""careerskill"": false,
            ""type"": ""Knowledge"",
            ""max"": 6,
            ""careerskillsource"": [],
            ""boost"": 0,
            ""boostsource"": [],
            ""upgrades"": 0,
            ""upgradessource"": [],
            ""force"": 0,
            ""setback"": 0,
            ""remsetback"": 0,
            ""setbacksource"": [],
            ""remsetbacksource"": [],
            ""ranksource"": [
                {
                    ""modtype"": ""purchased"",
                    ""key"": ""purchased"",
                    ""name"": ""purchased"",
                    ""value"": 0
                }
            ]
        },
        ""Knowledge: Outer Rim"": {
            ""value"": ""Knowledge: Outer Rim"",
            ""label"": ""Outer Rim"",
            ""abrev"": ""SWFFG.SkillsNameKnowledgeOuterRimStripped"",
            ""rank"": 0,
            ""characteristic"": ""Intellect"",
            ""groupskill"": false,
            ""careerskill"": false,
            ""type"": ""Knowledge"",
            ""max"": 6,
            ""careerskillsource"": [],
            ""boost"": 0,
            ""boostsource"": [],
            ""upgrades"": 0,
            ""upgradessource"": [],
            ""force"": 0,
            ""setback"": 0,
            ""remsetback"": 0,
            ""setbacksource"": [],
            ""remsetbacksource"": [],
            ""ranksource"": [
                {
                    ""modtype"": ""purchased"",
                    ""key"": ""purchased"",
                    ""name"": ""purchased"",
                    ""value"": 0
                }
            ]
        },
        ""Knowledge: Underworld"": {
            ""value"": ""Knowledge: Underworld"",
            ""label"": ""Underworld"",
            ""abrev"": ""SWFFG.SkillsNameKnowledgeUnderworldStripped"",
            ""rank"": 0,
            ""characteristic"": ""Intellect"",
            ""groupskill"": false,
            ""careerskill"": false,
            ""type"": ""Knowledge"",
            ""max"": 6,
            ""careerskillsource"": [],
            ""boost"": 0,
            ""boostsource"": [],
            ""upgrades"": 0,
            ""upgradessource"": [],
            ""force"": 0,
            ""setback"": 0,
            ""remsetback"": 0,
            ""setbacksource"": [],
            ""remsetbacksource"": [],
            ""ranksource"": [
                {
                    ""modtype"": ""purchased"",
                    ""key"": ""purchased"",
                    ""name"": ""purchased"",
                    ""value"": 0
                }
            ]
        },
        ""Knowledge: Warfare"": {
            ""value"": ""Knowledge: Warfare"",
            ""label"": ""Warfare"",
            ""abrev"": ""SWFFG.SkillsNameKnowledgeWarfareStripped"",
            ""rank"": 0,
            ""characteristic"": ""Intellect"",
            ""groupskill"": false,
            ""careerskill"": false,
            ""type"": ""Knowledge"",
            ""max"": 6,
            ""careerskillsource"": [],
            ""boost"": 0,
            ""boostsource"": [],
            ""upgrades"": 0,
            ""upgradessource"": [],
            ""force"": 0,
            ""setback"": 0,
            ""remsetback"": 0,
            ""setbacksource"": [],
            ""remsetbacksource"": [],
            ""ranksource"": [
                {
                    ""modtype"": ""purchased"",
                    ""key"": ""purchased"",
                    ""name"": ""purchased"",
                    ""value"": 0
                }
            ]
        },
        ""Knowledge: Xenology"": {
            ""value"": ""Knowledge: Xenology"",
            ""label"": ""Xenology"",
            ""abrev"": ""SWFFG.SkillsNameKnowledgeXenologyStripped"",
            ""rank"": 0,
            ""characteristic"": ""Intellect"",
            ""groupskill"": false,
            ""careerskill"": false,
            ""type"": ""Knowledge"",
            ""max"": 6,
            ""careerskillsource"": [],
            ""boost"": 0,
            ""boostsource"": [],
            ""upgrades"": 0,
            ""upgradessource"": [],
            ""force"": 0,
            ""setback"": 0,
            ""remsetback"": 0,
            ""setbacksource"": [],
            ""remsetbacksource"": [],
            ""ranksource"": [
                {
                    ""modtype"": ""purchased"",
                    ""key"": ""purchased"",
                    ""name"": ""purchased"",
                    ""value"": 0
                }
            ]
        },
        ""Leadership"": {
            ""value"": ""Leadership"",
            ""label"": ""Leadership"",
            ""abrev"": ""SWFFG.SkillsNameLeadership"",
            ""rank"": 0,
            ""characteristic"": ""Presence"",
            ""groupskill"": false,
            ""careerskill"": false,
            ""type"": ""General"",
            ""max"": 6,
            ""careerskillsource"": [],
            ""boost"": 0,
            ""boostsource"": [],
            ""upgrades"": 0,
            ""upgradessource"": [],
            ""force"": 0,
            ""setback"": 0,
            ""remsetback"": 0,
            ""setbacksource"": [],
            ""remsetbacksource"": [],
            ""ranksource"": [
                {
                    ""modtype"": ""purchased"",
                    ""key"": ""purchased"",
                    ""name"": ""purchased"",
                    ""value"": 0
                }
            ]
        },
        ""Lightsaber"": {
            ""value"": ""Lightsaber"",
            ""label"": ""Lightsaber"",
            ""abrev"": ""SWFFG.SkillsNameLightsaberAbbreviation"",
            ""rank"": 0,
            ""characteristic"": ""Brawn"",
            ""groupskill"": false,
            ""careerskill"": false,
            ""type"": ""Combat"",
            ""max"": 6,
            ""careerskillsource"": [],
            ""boost"": 0,
            ""boostsource"": [],
            ""upgrades"": 0,
            ""upgradessource"": [],
            ""force"": 0,
            ""setback"": 0,
            ""remsetback"": 0,
            ""setbacksource"": [],
            ""remsetbacksource"": [],
            ""ranksource"": [
                {
                    ""modtype"": ""purchased"",
                    ""key"": ""purchased"",
                    ""name"": ""purchased"",
                    ""value"": 0
                }
            ]
        },
        ""Mechanics"": {
            ""value"": ""Mechanics"",
            ""label"": ""Mechanics"",
            ""abrev"": ""SWFFG.SkillsNameMechanics"",
            ""rank"": 0,
            ""characteristic"": ""Intellect"",
            ""groupskill"": false,
            ""careerskill"": false,
            ""type"": ""General"",
            ""max"": 6,
            ""careerskillsource"": [],
            ""boost"": 0,
            ""boostsource"": [],
            ""upgrades"": 0,
            ""upgradessource"": [],
            ""force"": 0,
            ""setback"": 0,
            ""remsetback"": 0,
            ""setbacksource"": [],
            ""remsetbacksource"": [],
            ""ranksource"": [
                {
                    ""modtype"": ""purchased"",
                    ""key"": ""purchased"",
                    ""name"": ""purchased"",
                    ""value"": 0
                }
            ]
        },
        ""Medicine"": {
            ""value"": ""Medicine"",
            ""label"": ""Medicine"",
            ""abrev"": ""SWFFG.SkillsNameMedicine"",
            ""rank"": 0,
            ""characteristic"": ""Intellect"",
            ""groupskill"": false,
            ""careerskill"": false,
            ""type"": ""General"",
            ""max"": 6,
            ""careerskillsource"": [],
            ""boost"": 0,
            ""boostsource"": [],
            ""upgrades"": 0,
            ""upgradessource"": [],
            ""force"": 0,
            ""setback"": 0,
            ""remsetback"": 0,
            ""setbacksource"": [],
            ""remsetbacksource"": [],
            ""ranksource"": [
                {
                    ""modtype"": ""purchased"",
                    ""key"": ""purchased"",
                    ""name"": ""purchased"",
                    ""value"": 0
                }
            ]
        },
        ""Melee"": {
            ""value"": ""Melee"",
            ""label"": ""Melee"",
            ""abrev"": ""SWFFG.SkillsNameMeleeAbbreviation"",
            ""rank"": 0,
            ""characteristic"": ""Brawn"",
            ""groupskill"": false,
            ""careerskill"": false,
            ""type"": ""Combat"",
            ""max"": 6,
            ""careerskillsource"": [],
            ""boost"": 0,
            ""boostsource"": [],
            ""upgrades"": 0,
            ""upgradessource"": [],
            ""force"": 0,
            ""setback"": 0,
            ""remsetback"": 0,
            ""setbacksource"": [],
            ""remsetbacksource"": [],
            ""ranksource"": [
                {
                    ""modtype"": ""purchased"",
                    ""key"": ""purchased"",
                    ""name"": ""purchased"",
                    ""value"": 0
                }
            ]
        },
        ""Negotiation"": {
            ""value"": ""Negotiation"",
            ""label"": ""Negotiation"",
            ""abrev"": ""SWFFG.SkillsNameNegotiation"",
            ""rank"": 0,
            ""characteristic"": ""Presence"",
            ""groupskill"": false,
            ""careerskill"": false,
            ""type"": ""General"",
            ""max"": 6,
            ""careerskillsource"": [],
            ""boost"": 0,
            ""boostsource"": [],
            ""upgrades"": 0,
            ""upgradessource"": [],
            ""force"": 0,
            ""setback"": 0,
            ""remsetback"": 0,
            ""setbacksource"": [],
            ""remsetbacksource"": [],
            ""ranksource"": [
                {
                    ""modtype"": ""purchased"",
                    ""key"": ""purchased"",
                    ""name"": ""purchased"",
                    ""value"": 0
                }
            ]
        },
        ""Perception"": {
            ""value"": ""Perception"",
            ""label"": ""Perception"",
            ""abrev"": ""SWFFG.SkillsNamePerception"",
            ""rank"": 0,
            ""characteristic"": ""Cunning"",
            ""groupskill"": false,
            ""careerskill"": false,
            ""type"": ""General"",
            ""max"": 6,
            ""careerskillsource"": [],
            ""boost"": 0,
            ""boostsource"": [],
            ""upgrades"": 0,
            ""upgradessource"": [],
            ""force"": 0,
            ""setback"": 0,
            ""remsetback"": 0,
            ""setbacksource"": [],
            ""remsetbacksource"": [],
            ""ranksource"": [
                {
                    ""modtype"": ""purchased"",
                    ""key"": ""purchased"",
                    ""name"": ""purchased"",
                    ""value"": 0
                }
            ]
        },
        ""Piloting: Planetary"": {
            ""value"": ""Piloting: Planetary"",
            ""label"": ""Piloting: Planetary"",
            ""abrev"": ""SWFFG.SkillsNamePilotingPlanetary"",
            ""rank"": 0,
            ""characteristic"": ""Agility"",
            ""groupskill"": false,
            ""careerskill"": false,
            ""type"": ""General"",
            ""max"": 6,
            ""careerskillsource"": [],
            ""boost"": 0,
            ""boostsource"": [],
            ""upgrades"": 0,
            ""upgradessource"": [],
            ""force"": 0,
            ""setback"": 0,
            ""remsetback"": 0,
            ""setbacksource"": [],
            ""remsetbacksource"": [],
            ""ranksource"": [
                {
                    ""modtype"": ""purchased"",
                    ""key"": ""purchased"",
                    ""name"": ""purchased"",
                    ""value"": 0
                }
            ]
        },
        ""Piloting: Space"": {
            ""value"": ""Piloting: Space"",
            ""label"": ""Piloting: Space"",
            ""abrev"": ""SWFFG.SkillsNamePilotingSpace"",
            ""rank"": 0,
            ""characteristic"": ""Agility"",
            ""groupskill"": false,
            ""careerskill"": false,
            ""type"": ""General"",
            ""max"": 6,
            ""careerskillsource"": [],
            ""boost"": 0,
            ""boostsource"": [],
            ""upgrades"": 0,
            ""upgradessource"": [],
            ""force"": 0,
            ""setback"": 0,
            ""remsetback"": 0,
            ""setbacksource"": [],
            ""remsetbacksource"": [],
            ""ranksource"": [
                {
                    ""modtype"": ""purchased"",
                    ""key"": ""purchased"",
                    ""name"": ""purchased"",
                    ""value"": 0
                }
            ]
        },
        ""Ranged: Heavy"": {
            ""value"": ""Ranged: Heavy"",
            ""label"": ""Ranged: Heavy"",
            ""abrev"": ""SWFFG.SkillsNameRangedHeavyAbbreviation"",
            ""rank"": 0,
            ""characteristic"": ""Agility"",
            ""groupskill"": false,
            ""careerskill"": false,
            ""type"": ""Combat"",
            ""max"": 6,
            ""careerskillsource"": [],
            ""boost"": 0,
            ""boostsource"": [],
            ""upgrades"": 0,
            ""upgradessource"": [],
            ""force"": 0,
            ""setback"": 0,
            ""remsetback"": 0,
            ""setbacksource"": [],
            ""remsetbacksource"": [],
            ""ranksource"": [
                {
                    ""modtype"": ""purchased"",
                    ""key"": ""purchased"",
                    ""name"": ""purchased"",
                    ""value"": 0
                }
            ]
        },
        ""Ranged: Light"": {
            ""value"": ""Ranged: Light"",
            ""label"": ""Ranged: Light"",
            ""abrev"": ""SWFFG.SkillsNameRangedLightAbbreviation"",
            ""rank"": 0,
            ""characteristic"": ""Agility"",
            ""groupskill"": false,
            ""careerskill"": false,
            ""type"": ""Combat"",
            ""max"": 6,
            ""careerskillsource"": [],
            ""boost"": 0,
            ""boostsource"": [],
            ""upgrades"": 0,
            ""upgradessource"": [],
            ""force"": 0,
            ""setback"": 0,
            ""remsetback"": 0,
            ""setbacksource"": [],
            ""remsetbacksource"": [],
            ""ranksource"": [
                {
                    ""modtype"": ""purchased"",
                    ""key"": ""purchased"",
                    ""name"": ""purchased"",
                    ""value"": 0
                }
            ]
        },
        ""Resilience"": {
            ""value"": ""Resilience"",
            ""label"": ""Resilience"",
            ""abrev"": ""SWFFG.SkillsNameResilience"",
            ""rank"": 0,
            ""characteristic"": ""Brawn"",
            ""groupskill"": false,
            ""careerskill"": false,
            ""type"": ""General"",
            ""max"": 6,
            ""careerskillsource"": [],
            ""boost"": 0,
            ""boostsource"": [],
            ""upgrades"": 0,
            ""upgradessource"": [],
            ""force"": 0,
            ""setback"": 0,
            ""remsetback"": 0,
            ""setbacksource"": [],
            ""remsetbacksource"": [],
            ""ranksource"": [
                {
                    ""modtype"": ""purchased"",
                    ""key"": ""purchased"",
                    ""name"": ""purchased"",
                    ""value"": 0
                }
            ]
        },
        ""Skulduggery"": {
            ""value"": ""Skulduggery"",
            ""label"": ""Skulduggery"",
            ""abrev"": ""SWFFG.SkillsNameSkulduggery"",
            ""rank"": 0,
            ""characteristic"": ""Cunning"",
            ""groupskill"": false,
            ""careerskill"": false,
            ""type"": ""General"",
            ""max"": 6,
            ""careerskillsource"": [],
            ""boost"": 0,
            ""boostsource"": [],
            ""upgrades"": 0,
            ""upgradessource"": [],
            ""force"": 0,
            ""setback"": 0,
            ""remsetback"": 0,
            ""setbacksource"": [],
            ""remsetbacksource"": [],
            ""ranksource"": [
                {
                    ""modtype"": ""purchased"",
                    ""key"": ""purchased"",
                    ""name"": ""purchased"",
                    ""value"": 0
                }
            ]
        },
        ""Stealth"": {
            ""value"": ""Stealth"",
            ""label"": ""Stealth"",
            ""abrev"": ""SWFFG.SkillsNameStealth"",
            ""rank"": 0,
            ""characteristic"": ""Agility"",
            ""groupskill"": false,
            ""careerskill"": false,
            ""type"": ""General"",
            ""max"": 6,
            ""careerskillsource"": [],
            ""boost"": 0,
            ""boostsource"": [],
            ""upgrades"": 0,
            ""upgradessource"": [],
            ""force"": 0,
            ""setback"": 0,
            ""remsetback"": 0,
            ""setbacksource"": [],
            ""remsetbacksource"": [],
            ""ranksource"": [
                {
                    ""modtype"": ""purchased"",
                    ""key"": ""purchased"",
                    ""name"": ""purchased"",
                    ""value"": 0
                }
            ]
        },
        ""Streetwise"": {
            ""value"": ""Streetwise"",
            ""label"": ""Streetwise"",
            ""abrev"": ""SWFFG.SkillsNameStreetwise"",
            ""rank"": 0,
            ""characteristic"": ""Cunning"",
            ""groupskill"": false,
            ""careerskill"": false,
            ""type"": ""General"",
            ""max"": 6,
            ""careerskillsource"": [],
            ""boost"": 0,
            ""boostsource"": [],
            ""upgrades"": 0,
            ""upgradessource"": [],
            ""force"": 0,
            ""setback"": 0,
            ""remsetback"": 0,
            ""setbacksource"": [],
            ""remsetbacksource"": [],
            ""ranksource"": [
                {
                    ""modtype"": ""purchased"",
                    ""key"": ""purchased"",
                    ""name"": ""purchased"",
                    ""value"": 0
                }
            ]
        },
        ""Survival"": {
            ""value"": ""Survival"",
            ""label"": ""Survival"",
            ""abrev"": ""SWFFG.SkillsNameSurvival"",
            ""rank"": 0,
            ""characteristic"": ""Cunning"",
            ""groupskill"": false,
            ""careerskill"": false,
            ""type"": ""General"",
            ""max"": 6,
            ""careerskillsource"": [],
            ""boost"": 0,
            ""boostsource"": [],
            ""upgrades"": 0,
            ""upgradessource"": [],
            ""force"": 0,
            ""setback"": 0,
            ""remsetback"": 0,
            ""setbacksource"": [],
            ""remsetbacksource"": [],
            ""ranksource"": [
                {
                    ""modtype"": ""purchased"",
                    ""key"": ""purchased"",
                    ""name"": ""purchased"",
                    ""value"": 0
                }
            ]
        },
        ""Vigilance"": {
            ""value"": ""Vigilance"",
            ""label"": ""Vigilance"",
            ""abrev"": ""SWFFG.SkillsNameVigilance"",
            ""rank"": 0,
            ""characteristic"": ""Willpower"",
            ""groupskill"": false,
            ""careerskill"": false,
            ""type"": ""General"",
            ""max"": 6,
            ""careerskillsource"": [],
            ""boost"": 0,
            ""boostsource"": [],
            ""upgrades"": 0,
            ""upgradessource"": [],
            ""force"": 0,
            ""setback"": 0,
            ""remsetback"": 0,
            ""setbacksource"": [],
            ""remsetbacksource"": [],
            ""ranksource"": [
                {
                    ""modtype"": ""purchased"",
                    ""key"": ""purchased"",
                    ""name"": ""purchased"",
                    ""value"": 0
                }
            ]
        }
    },
    ""attributes"": {
        ""Brawn"": {
            ""modtype"": ""Characteristic"",
            ""mod"": ""Brawn"",
            ""value"": 1,
            ""key"": ""Brawn""
        },
        ""Agility"": {
            ""modtype"": ""Characteristic"",
            ""mod"": ""Agility"",
            ""value"": 2,
            ""key"": ""Agility""
        },
        ""Intellect"": {
            ""modtype"": ""Characteristic"",
            ""mod"": ""Intellect"",
            ""value"": 3,
            ""key"": ""Intellect""
        },
        ""Cunning"": {
            ""modtype"": ""Characteristic"",
            ""mod"": ""Cunning"",
            ""value"": 4,
            ""key"": ""Cunning""
        },
        ""Willpower"": {
            ""modtype"": ""Characteristic"",
            ""mod"": ""Willpower"",
            ""value"": 5,
            ""key"": ""Willpower""
        },
        ""Presence"": {
            ""modtype"": ""Characteristic"",
            ""mod"": ""Presence"",
            ""value"": 6,
            ""key"": ""Presence""
        },
        ""Wounds"": {
            ""modtype"": ""Stat"",
            ""mod"": ""Wounds"",
            ""value"": 1,
            ""key"": ""Wounds""
        },
        ""Strain"": {
            ""modtype"": ""Stat"",
            ""mod"": ""Strain"",
            ""value"": 5,
            ""key"": ""Strain""
        },
        ""Soak"": {
            ""modtype"": ""Stat"",
            ""mod"": ""Soak"",
            ""value"": 0,
            ""key"": ""Soak""
        },
        ""Defence-Melee"": {
            ""modtype"": ""Stat"",
            ""mod"": ""Defence-Melee"",
            ""value"": 0,
            ""key"": ""Defence-Melee""
        },
        ""Defence-Ranged"": {
            ""modtype"": ""Stat"",
            ""mod"": ""Defence-Ranged"",
            ""value"": 0,
            ""key"": ""Defence-Ranged""
        },
        ""Encumbrance"": {
            ""modtype"": ""Stat"",
            ""mod"": ""Encumbrance"",
            ""value"": 0,
            ""key"": ""Encumbrance""
        },
        ""ForcePool"": {
            ""modtype"": ""Stat"",
            ""mod"": ""ForcePool"",
            ""value"": 0,
            ""key"": ""ForcePool""
        },
        ""Astrogation"": {
            ""modtype"": ""Skill Rank"",
            ""mod"": ""Astrogation"",
            ""value"": 0,
            ""key"": ""Astrogation""
        },
        ""Athletics"": {
            ""modtype"": ""Skill Rank"",
            ""mod"": ""Athletics"",
            ""value"": 0,
            ""key"": ""Athletics""
        },
        ""Brawl"": {
            ""modtype"": ""Skill Rank"",
            ""mod"": ""Brawl"",
            ""value"": 0,
            ""key"": ""Brawl""
        },
        ""Charm"": {
            ""modtype"": ""Skill Rank"",
            ""mod"": ""Charm"",
            ""value"": 0,
            ""key"": ""Charm""
        },
        ""Coercion"": {
            ""modtype"": ""Skill Rank"",
            ""mod"": ""Coercion"",
            ""value"": 0,
            ""key"": ""Coercion""
        },
        ""Computers"": {
            ""modtype"": ""Skill Rank"",
            ""mod"": ""Computers"",
            ""value"": 0,
            ""key"": ""Computers""
        },
        ""Cool"": {
            ""modtype"": ""Skill Rank"",
            ""mod"": ""Cool"",
            ""value"": 0,
            ""key"": ""Cool""
        },
        ""Coordination"": {
            ""modtype"": ""Skill Rank"",
            ""mod"": ""Coordination"",
            ""value"": 0,
            ""key"": ""Coordination""
        },
        ""Deception"": {
            ""modtype"": ""Skill Rank"",
            ""mod"": ""Deception"",
            ""value"": 0,
            ""key"": ""Deception""
        },
        ""Discipline"": {
            ""modtype"": ""Skill Rank"",
            ""mod"": ""Discipline"",
            ""value"": 0,
            ""key"": ""Discipline""
        },
        ""Gunnery"": {
            ""modtype"": ""Skill Rank"",
            ""mod"": ""Gunnery"",
            ""value"": 0,
            ""key"": ""Gunnery""
        },
        ""Knowledge: Core Worlds"": {
            ""modtype"": ""Skill Rank"",
            ""mod"": ""Knowledge: Core Worlds"",
            ""value"": 0,
            ""key"": ""Knowledge: Core Worlds""
        },
        ""Knowledge: Education"": {
            ""modtype"": ""Skill Rank"",
            ""mod"": ""Knowledge: Education"",
            ""value"": 0,
            ""key"": ""Knowledge: Education""
        },
        ""Knowledge: Lore"": {
            ""modtype"": ""Skill Rank"",
            ""mod"": ""Knowledge: Lore"",
            ""value"": 0,
            ""key"": ""Knowledge: Lore""
        },
        ""Knowledge: Outer Rim"": {
            ""modtype"": ""Skill Rank"",
            ""mod"": ""Knowledge: Outer Rim"",
            ""value"": 0,
            ""key"": ""Knowledge: Outer Rim""
        },
        ""Knowledge: Underworld"": {
            ""modtype"": ""Skill Rank"",
            ""mod"": ""Knowledge: Underworld"",
            ""value"": 0,
            ""key"": ""Knowledge: Underworld""
        },
        ""Knowledge: Warfare"": {
            ""modtype"": ""Skill Rank"",
            ""mod"": ""Knowledge: Warfare"",
            ""value"": 0,
            ""key"": ""Knowledge: Warfare""
        },
        ""Knowledge: Xenology"": {
            ""modtype"": ""Skill Rank"",
            ""mod"": ""Knowledge: Xenology"",
            ""value"": 0,
            ""key"": ""Knowledge: Xenology""
        },
        ""Leadership"": {
            ""modtype"": ""Skill Rank"",
            ""mod"": ""Leadership"",
            ""value"": 0,
            ""key"": ""Leadership""
        },
        ""Lightsaber"": {
            ""modtype"": ""Skill Rank"",
            ""mod"": ""Lightsaber"",
            ""value"": 0,
            ""key"": ""Lightsaber""
        },
        ""Mechanics"": {
            ""modtype"": ""Skill Rank"",
            ""mod"": ""Mechanics"",
            ""value"": 0,
            ""key"": ""Mechanics""
        },
        ""Medicine"": {
            ""modtype"": ""Skill Rank"",
            ""mod"": ""Medicine"",
            ""value"": 0,
            ""key"": ""Medicine""
        },
        ""Melee"": {
            ""modtype"": ""Skill Rank"",
            ""mod"": ""Melee"",
            ""value"": 0,
            ""key"": ""Melee""
        },
        ""Negotiation"": {
            ""modtype"": ""Skill Rank"",
            ""mod"": ""Negotiation"",
            ""value"": 0,
            ""key"": ""Negotiation""
        },
        ""Perception"": {
            ""modtype"": ""Skill Rank"",
            ""mod"": ""Perception"",
            ""value"": 0,
            ""key"": ""Perception""
        },
        ""Piloting: Planetary"": {
            ""modtype"": ""Skill Rank"",
            ""mod"": ""Piloting: Planetary"",
            ""value"": 0,
            ""key"": ""Piloting: Planetary""
        },
        ""Piloting: Space"": {
            ""modtype"": ""Skill Rank"",
            ""mod"": ""Piloting: Space"",
            ""value"": 0,
            ""key"": ""Piloting: Space""
        },
        ""Ranged: Heavy"": {
            ""modtype"": ""Skill Rank"",
            ""mod"": ""Ranged: Heavy"",
            ""value"": 0,
            ""key"": ""Ranged: Heavy""
        },
        ""Ranged: Light"": {
            ""modtype"": ""Skill Rank"",
            ""mod"": ""Ranged: Light"",
            ""value"": 0,
            ""key"": ""Ranged: Light""
        },
        ""Resilience"": {
            ""modtype"": ""Skill Rank"",
            ""mod"": ""Resilience"",
            ""value"": 0,
            ""key"": ""Resilience""
        },
        ""Skulduggery"": {
            ""modtype"": ""Skill Rank"",
            ""mod"": ""Skulduggery"",
            ""value"": 0,
            ""key"": ""Skulduggery""
        },
        ""Stealth"": {
            ""modtype"": ""Skill Rank"",
            ""mod"": ""Stealth"",
            ""value"": 0,
            ""key"": ""Stealth""
        },
        ""Streetwise"": {
            ""modtype"": ""Skill Rank"",
            ""mod"": ""Streetwise"",
            ""value"": 0,
            ""key"": ""Streetwise""
        },
        ""Survival"": {
            ""modtype"": ""Skill Rank"",
            ""mod"": ""Survival"",
            ""value"": 0,
            ""key"": ""Survival""
        },
        ""Vigilance"": {
            ""modtype"": ""Skill Rank"",
            ""mod"": ""Vigilance"",
            ""value"": 0,
            ""key"": ""Vigilance""
        }
    },
    ""encumbrance"": {
        ""value"": 0,
        ""type"": ""Number"",
        ""label"": ""Encumbrance"",
        ""abrev"": ""Encum"",
        ""adjusted"": 0
    },
    ""obligation"": {
        ""value"": 0,
        ""type"": ""Number"",
        ""label"": ""Obligation""
    },
    ""duty"": {
        ""value"": 0,
        ""type"": ""Number"",
        ""label"": ""Duty""
    },
    ""morality"": {
        ""value"": 0,
        ""type"": ""Number"",
        ""label"": ""Morality""
    },
    ""conflict"": {
        ""value"": 0,
        ""type"": ""Number"",
        ""label"": ""Conflict""
    },
    ""experience"": {
        ""total"": 0,
        ""available"": 0
    },
    ""general"": {
        ""gender"": """",
        ""age"": """",
        ""height"": """",
        ""build"": """",
        ""hair"": """",
        ""eyes"": """",
        ""motivation1"": {
            ""category"": """",
            ""type"": """",
            ""description"": """"
        },
        ""motivation2"": {
            ""category"": """",
            ""type"": """",
            ""description"": """"
        }
    },
    ""skilltypes"": [
        {
            ""type"": ""General"",
            ""label"": ""General Skills""
        },
        {
            ""type"": ""Combat"",
            ""label"": ""Combat Skills""
        },
        {
            ""type"": ""Knowledge"",
            ""label"": ""Knowledge Skills""
        }
    ]
}"
PcFiUSsy,Untitled,Skadi,Python,Monday 18th of December 2023 09:21:21 PM CDT,"<?xml version=""1.0"" ?><root>
<BetterExceptions><BEversion>v3.12</BEversion><WasBlank>False</WasBlank><TuningLoadFinished>True</TuningLoadFinished><BadObjectCC>False</BadObjectCC><Advice>Not available. More info may be in BE Report.</Advice></BetterExceptions><report><version>2</version><sessionid>e4cef281ff1a8fc26580d0af</sessionid><type>desync</type><sku>ea.maxis.sims4_64.15.pc</sku><createtime>2023-12-19 10:36:14</createtime><buildsignature>Local.Unknown.Unknown.1.103.315.1020-1.300.000.175.Release</buildsignature><categoryid>Higher_Acting_Gig_Payouts_Royalty_Payments.py:155</categoryid><desyncid>e4cef281ff1a8fc26580d0af</desyncid><systemconfig/><screenshot/><desyncdata>Exception in Unknown timeline: Exception running Element (AttributeError: 'NoneType' object has no attribute 'get_value')&#13;&#10;Traceback (most recent call last):&#13;&#10;  File ""T:\InGame\Gameplay\Scripts\Server\scheduling.py"", line 219, in simulate&#13;&#10;  File ""T:\InGame\Gameplay\Scripts\Server\elements.py"", line 376, in _run&#13;&#10;  File ""T:\InGame\Gameplay\Scripts\Server\drama_scheduler\drama_node_picker_interaction.py"", line 96, in _run_interaction_gen&#13;&#10;  File ""T:\InGame\Gameplay\Scripts\Server\drama_scheduler\drama_node_picker_interaction.py"", line 105, in _show_picker_dialog&#13;&#10;  File ""T:\InGame\Gameplay\Scripts\Server\interactions\base\picker_interaction.py"", line 257, in _create_dialog&#13;&#10;  File ""T:\InGame\Gameplay\Scripts\Server\interactions\base\picker_interaction.py"", line 297, in _setup_dialog&#13;&#10;  File ""T:\InGame\Gameplay\Scripts\Server\drama_scheduler\drama_node_picker_interaction.py"", line 155, in picker_rows_gen&#13;&#10;  File ""T:\InGame\Gameplay\Scripts\Server\drama_scheduler\picker_drama_node.py"", line 481, in create_picker_row&#13;&#10;  File ""T:\InGame\Gameplay\Scripts\Server\drama_scheduler\picker_drama_node.py"", line 88, in create_picker_row&#13;&#10;  File ""C:\Python37\Higher_Acting_Gig_Payouts_Royalty_Payments.py"", line 36, in _wrapped_function&#13;&#10;  File ""C:\Python37\Higher_Acting_Gig_Payouts_Royalty_Payments.py"", line 155, in inject_create_picker_row&#13;&#10;  File ""C:\Python37\Higher_Acting_Gig_Payouts_Royalty_Payments.py"", line 55, in calculate_scaled_payoutAttributeError: 'NoneType' object has no attribute 'get_value'rtim=0&#13;&#10;Client Session Time: 47.15&#13; &#10;Num Save Errors: 0&#13; &#10;Num Load Errors: 0&#13; &#10;Current Game State: 0x96d01090&#13; &#10;LoadingScreenActiveFlag: 1&#13; &#10;Origin Version: 13,86,0,5599&#13; &#10;Modded: True&#13; &#10;SystemInfo: Windows 10 10.0.19045 GPU: NVIDIA GeForce GTX 1050 Ti nvldumdx.dll 31.0.15.3742, GUID: D7B71E3E-5FC2-11CF-6D7D-25A60EC2D235&#13; &#10;</desyncdata></report>
</root>"
ysEzabhB,Custom Fluent [mod Groosha],morington,Python,Monday 18th of December 2023 09:16:38 PM CDT,"from typing import Optional

import structlog
from structlog.stdlib import BoundLogger
from pathlib import Path
from fluent.runtime import FluentLocalization, FluentResourceLoader

logger: BoundLogger = structlog.get_logger(__name__)


class CustomFluentLocalization(FluentLocalization):
    def get_keyboard_localization(self, msg: str) -> Optional[str]:
        for bundle in self._bundles():
            keyboard_localization: dict[Optional[str], Optional[str]] = {
                bundle.format_pattern(bundle.get_message(key).value)[0]: key
                for key in bundle._messages.keys()
                if ""keyb"" in key
            }
            return keyboard_localization.get(msg, None)
        return None


class FluentDispenser:
    def __init__(self, default_language: str = ""ru""):
        locales_dir: Path = Path(__file__).parent.joinpath(""locales"")
        self.__loader = FluentResourceLoader(str(locales_dir) + ""/{locale}"")
        self.__default_language = default_language
        self.languages = dict()

        dirs_names = set()
        default_language_dir = None
        for item in locales_dir.iterdir():
            dirs_names.add(item.name)
            if item.name == self.__default_language:
                default_language_dir = item

        if not default_language_dir:
            raise ValueError(""FluentDispenser: default language directory not found"")

        ftl_files_list = [item.name for item in default_language_dir.iterdir() if item.suffix == "".ftl""]

        for name in dirs_names:
            if name == default_language:
                self.languages[name] = CustomFluentLocalization(
                    [self.__default_language], ftl_files_list, self.__loader
                )
            else:
                self.languages[name] = CustomFluentLocalization(
                    [name, self.__default_language], ftl_files_list, self.__loader
                )

    @property
    def default_locale(self) -> CustomFluentLocalization:
        return self.languages[self.__default_language]

    @property
    def available_languages(self) -> list[str]:
        return list(self.languages.keys())

    def get_localization(self, language_code: str) -> CustomFluentLocalization:
        localization: CustomFluentLocalization = self.languages.get(language_code, self.default_locale)
        if language_code not in localization.locales:
            logger.warn(""Language not found"", language_code=language_code)
        return localization"
kUUxuD7q,Osi_lab5_Echoes,VladimirKostovsky,C++,Monday 18th of December 2023 08:28:42 PM CDT,"#include <iostream>
#include <winsock2.h>
#include <iphlpapi.h>
#include <icmpapi.h>
#include <stdio.h>
#include <locale.h>

#pragma comment(lib, ""iphlpapi.lib"")
#pragma comment(lib, ""ws2_32.lib"")
#pragma warning(disable : 4996)

using namespace std;
const int N = 512;
const size_t timeout = 1000;
int MinMaxMed(int* arr, int size, int flag)
{
    if (flag == 1)
    {
        int min = timeout;
        for (int i = 0; i < size; i++)
            if (arr[i] < min)
                min = arr[i];
        return min;
    }
    else if (flag == 2)
    {
        int max = 0;
        for (int i = 0; i < size; i++)
            if (arr[i] > max)
                max = arr[i];
        return max;
    }
    else
    {
        int med = 0;
        for (int i = 0; i < size; i++)
            med += arr[i];
        med /= size;
        return med;
    }
}

int main()
{
    setlocale (LC_ALL, ""Russian"")
    WORD ver = MAKEWORD(2, 2);
    WSADATA wsaData;
    int err = 0;
    if (err = WSAStartup(ver, &wsaData))
        cout << ""Error while WSAStartup"";



    HANDLE IcmpHandle;
    char ReqData[N];
    LPVOID ReplyBuffer;
    WORD ReplySize;
    char HostName[N];
    unsigned long HostAddr;
    DWORD dwRetVal;
    int TrCount = 0;
    int* RecTimeArr;
    cout << ""Введите адрес:\n"";
    cin >> HostName;
    cout << ""Введите количество попыток:\n"";
    cin >> TrCount;
    cout << ""Введите сообщение:\n"";
    cin >> ReqData;

    RecTimeArr = new int[TrCount] {};

    ReplySize = sizeof(ICMP_ECHO_REPLY) + sizeof(ReqData) + 8;
    ReplyBuffer = (VOID*)malloc(ReplySize);
    if (ReplyBuffer == NULL)
    {
        cout << ""Невозможно выделить память\n"";
        return 1;
    }

    IcmpHandle = IcmpCreateFile();
    if (IcmpHandle == INVALID_HANDLE_VALUE)
    {
        cout << ""Ошибка при открытии \n"";
        return 1;
    }

    struct hostent* host = gethostbyname(HostName);
    if (host == NULL)
    {
        cout << ""Can't get host by name\n"";
        return 1;
    }

    HostAddr = inet_addr(inet_ntoa(*((in_addr*)host->h_addr_list[0])));
    for (int i = TrCount; i > 0; i--)
    {
        dwRetVal = IcmpSendEcho(IcmpHandle, HostAddr, ReqData, sizeof(ReqData), NULL, ReplyBuffer, ReplySize, 1000);
        if (dwRetVal)
        {
            PICMP_ECHO_REPLY pEchoReply = (PICMP_ECHO_REPLY)ReplyBuffer;
            struct in_addr ReplyAddr;
            ReplyAddr.S_un.S_addr = pEchoReply->Address;
            if (i == 1)
                cout << ""Received "" << dwRetVal << "" icmp message from "" << inet_ntoa(ReplyAddr) << "" time: "" << pEchoReply->RoundTripTime << "" ms\n"";
            else
                cout << ""Received "" << dwRetVal << "" icmp messages from "" << inet_ntoa(ReplyAddr) << "" time: "" << pEchoReply->RoundTripTime << "" ms\n"";
            RecTimeArr[TrCount - i] = pEchoReply->RoundTripTime;
        }
        else
        {
            cout << ""Call to IcmpSendEcho failed.\n"";
        }
    }
    if (RecTimeArr[0] != 0)
        cout << ""min - "" << MinMaxMed(RecTimeArr, TrCount, 1) << "" ms, max - "" << MinMaxMed(RecTimeArr, TrCount, 2) << "" ms, med - "" << MinMaxMed(RecTimeArr, TrCount, 3) << "" ms\n"";


}
"
VwzQyma6,bmp.h,dylanm312,C,Monday 18th of December 2023 08:27:03 PM CDT,"// BMP-related data types based on Microsoft's own

#include <stdint.h>

/**
 * Common Data Types
 *
 * The data types in this section are essentially aliases for C/C++
 * primitive data types.
 *
 * Adapted from http://msdn.microsoft.com/en-us/library/cc230309.aspx.
 * See http://en.wikipedia.org/wiki/Stdint.h for more on stdint.h.
 */
typedef uint8_t  BYTE;
typedef uint32_t DWORD;
typedef int32_t  LONG;
typedef uint16_t WORD;

/**
 * BITMAPFILEHEADER
 *
 * The BITMAPFILEHEADER structure contains information about the type, size,
 * and layout of a file that contains a DIB [device-independent bitmap].
 *
 * Adapted from http://msdn.microsoft.com/en-us/library/dd183374(VS.85).aspx.
 */
typedef struct
{
    WORD   bfType;
    DWORD  bfSize;
    WORD   bfReserved1;
    WORD   bfReserved2;
    DWORD  bfOffBits;
} __attribute__((__packed__))
BITMAPFILEHEADER;

/**
 * BITMAPINFOHEADER
 *
 * The BITMAPINFOHEADER structure contains information about the
 * dimensions and color format of a DIB [device-independent bitmap].
 *
 * Adapted from http://msdn.microsoft.com/en-us/library/dd183376(VS.85).aspx.
 */
typedef struct
{
    DWORD  biSize;
    LONG   biWidth;
    LONG   biHeight;
    WORD   biPlanes;
    WORD   biBitCount;
    DWORD  biCompression;
    DWORD  biSizeImage;
    LONG   biXPelsPerMeter;
    LONG   biYPelsPerMeter;
    DWORD  biClrUsed;
    DWORD  biClrImportant;
} __attribute__((__packed__))
BITMAPINFOHEADER;

/**
 * RGBTRIPLE
 *
 * This structure describes a color consisting of relative intensities of
 * red, green, and blue.
 *
 * Adapted from http://msdn.microsoft.com/en-us/library/aa922590.aspx.
 */
typedef struct
{
    BYTE  rgbtBlue;
    BYTE  rgbtGreen;
    BYTE  rgbtRed;
} __attribute__((__packed__))
RGBTRIPLE;
"
