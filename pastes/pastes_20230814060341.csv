id,title,username,language,date,content
8t4yMPpv,square_1200dpi.ps1,Thunder-Menu,PowerShell,Monday 14th of August 2023 12:38:36 AM CDT,"# Charger les assemblies System.Windows.Forms et System.Drawing
Add-Type -AssemblyName System.Windows.Forms
Add-Type -AssemblyName System.Drawing

# Définir le script en tant que chaîne
$script = @""
using System;
using System.Drawing;
using System.Drawing.Imaging;
using System.Windows.Forms;

public class SquarePatternGenerator
{
    public static void Main()
    {
        Application.EnableVisualStyles();
        Application.SetCompatibleTextRenderingDefault(false);

        Form form = new Form();
        form.Text = ""Générateur de Motif de Carrés"";
        form.Width = 600; // Ajuster la largeur de la fenêtre
        form.Height = 800; // Ajuster la hauteur de la fenêtre
        form.StartPosition = FormStartPosition.CenterScreen;

        PictureBox pictureBox = new PictureBox();
        pictureBox.Location = new Point(20, 100);
        pictureBox.Width = form.Width - 40;
        pictureBox.Height = form.Height - 300;
        form.Controls.Add(pictureBox);

        Label label = new Label();
        label.Text = ""Nombre de carrés:"";
        label.Location = new Point(20, 20);
        form.Controls.Add(label);

        TextBox textBox = new TextBox();
        textBox.Location = new Point(150, 20);
        form.Controls.Add(textBox);

        Button generateButton = new Button();
        generateButton.Text = ""Générer"";
        generateButton.Location = new Point(20, pictureBox.Bottom + 10);
        form.Controls.Add(generateButton);

        Button saveButton = new Button();
        saveButton.Text = ""Enregistrer"";
        saveButton.Location = new Point(100, pictureBox.Bottom + 10);
        saveButton.Enabled = false;
        form.Controls.Add(saveButton);

        generateButton.Click += (sender, e) =>
        {
            int nombreDeCarres = int.Parse(textBox.Text);
            int largeurPagePixels = pictureBox.Width;
            int hauteurPagePixels = pictureBox.Height;
            float dpi = 1200f;
            float tailleCarreMM = 0.021f;
            float espaceEntreCarresMM = 0.021f;

            int tailleCarrePixels = (int)Math.Round(dpi * tailleCarreMM / 25.4f);
            int espaceEntreCarresPixels = (int)Math.Round(dpi * espaceEntreCarresMM / 25.4f);

            Bitmap bitmap = new Bitmap(largeurPagePixels, hauteurPagePixels);
            Graphics graphics = Graphics.FromImage(bitmap);

            SolidBrush whiteBrush = new SolidBrush(Color.White);
            SolidBrush blackBrush = new SolidBrush(Color.Black);

            graphics.FillRectangle(whiteBrush, 0, 0, largeurPagePixels, hauteurPagePixels);

            int carreCompteur = 0;
            for (int x = 0; x < largeurPagePixels; x += (tailleCarrePixels + espaceEntreCarresPixels))
            {
                for (int y = 0; y < hauteurPagePixels; y += (tailleCarrePixels + espaceEntreCarresPixels))
                {
                    graphics.FillRectangle(blackBrush, x, y, tailleCarrePixels, tailleCarrePixels);

                    carreCompteur++;
                    if (carreCompteur >= nombreDeCarres)
                    {
                        break;
                    }
                }
                if (carreCompteur >= nombreDeCarres)
                {
                    break;
                }
            }

            pictureBox.Image = bitmap;
            saveButton.Enabled = true;
        };

        saveButton.Click += (sender, e) =>
        {
            SaveFileDialog saveFileDialog = new SaveFileDialog();
            saveFileDialog.Filter = ""Images BMP|*.bmp"";
            if (saveFileDialog.ShowDialog() == DialogResult.OK)
            {
                pictureBox.Image.Save(saveFileDialog.FileName, ImageFormat.Bmp);
                MessageBox.Show(""Motif de carrés généré et enregistré sous "" + saveFileDialog.FileName);
            }
        };

        form.Controls.Add(saveButton);

        Application.Run(form);
    }
}
""@

# Exécuter le script
Add-Type -TypeDefinition $script -ReferencedAssemblies System.Drawing, System.Windows.Forms

# Appeler la méthode Main pour exécuter le formulaire
[SquarePatternGenerator]::Main()
"
CFyhyANG,Square2-1.ps1,Thunder-Menu,PowerShell,Monday 14th of August 2023 12:37:49 AM CDT,"# Charger les assemblies System.Windows.Forms et System.Drawing
Add-Type -AssemblyName System.Windows.Forms
Add-Type -AssemblyName System.Drawing

# Définir le script en tant que chaîne
$script = @""
using System;
using System.Drawing;
using System.Drawing.Imaging;
using System.Windows.Forms;

public class SquarePatternGenerator
{
    public static void Main()
    {
        Application.EnableVisualStyles();
        Application.SetCompatibleTextRenderingDefault(false);

        Form form = new Form();
        form.Text = ""Générateur de Motif de Carrés"";
        form.Width = 600; // Ajuster la largeur de la fenêtre
        form.Height = 800; // Ajuster la hauteur de la fenêtre
        form.StartPosition = FormStartPosition.CenterScreen;

        PictureBox pictureBox = new PictureBox();
        pictureBox.Location = new Point(20, 100);
        pictureBox.Width = form.Width - 40;
        pictureBox.Height = form.Height - 300;
        form.Controls.Add(pictureBox);

        Label label = new Label();
        label.Text = ""Nombre de carrés:"";
        label.Location = new Point(20, 20);
        form.Controls.Add(label);

        TextBox textBox = new TextBox();
        textBox.Location = new Point(150, 20);
        form.Controls.Add(textBox);

        Button generateButton = new Button();
        generateButton.Text = ""Générer"";
        generateButton.Location = new Point(20, pictureBox.Bottom + 10);
        form.Controls.Add(generateButton);

        Button saveButton = new Button();
        saveButton.Text = ""Enregistrer"";
        saveButton.Location = new Point(100, pictureBox.Bottom + 10);
        saveButton.Enabled = false;
        form.Controls.Add(saveButton);

        generateButton.Click += (sender, e) =>
        {
            int nombreDeCarres = int.Parse(textBox.Text);
            int largeurPagePixels = pictureBox.Width;
            int hauteurPagePixels = pictureBox.Height;
            int tailleCarrePixels = 2;
            int espaceEntreCarresPixels = 1;

            Bitmap bitmap = new Bitmap(largeurPagePixels, hauteurPagePixels);
            Graphics graphics = Graphics.FromImage(bitmap);

            SolidBrush whiteBrush = new SolidBrush(Color.White);
            SolidBrush blackBrush = new SolidBrush(Color.Black);

            graphics.FillRectangle(whiteBrush, 0, 0, largeurPagePixels, hauteurPagePixels);

            int carreCompteur = 0;
            for (int x = 0; x < largeurPagePixels; x += (tailleCarrePixels + espaceEntreCarresPixels))
            {
                for (int y = 0; y < hauteurPagePixels; y += (tailleCarrePixels + espaceEntreCarresPixels))
                {
                    graphics.FillRectangle(blackBrush, x, y, tailleCarrePixels, tailleCarrePixels);

                    carreCompteur++;
                    if (carreCompteur >= nombreDeCarres)
                    {
                        break;
                    }
                }
                if (carreCompteur >= nombreDeCarres)
                {
                    break;
                }
            }

            pictureBox.Image = bitmap;
            saveButton.Enabled = true;
        };

        saveButton.Click += (sender, e) =>
        {
            SaveFileDialog saveFileDialog = new SaveFileDialog();
            saveFileDialog.Filter = ""Images BMP|*.bmp"";
            if (saveFileDialog.ShowDialog() == DialogResult.OK)
            {
                pictureBox.Image.Save(saveFileDialog.FileName, ImageFormat.Bmp);
                MessageBox.Show(""Motif de carrés généré et enregistré sous "" + saveFileDialog.FileName);
            }
        };

        form.Controls.Add(saveButton);

        Application.Run(form);
    }
}
""@

# Exécuter le script
Add-Type -TypeDefinition $script -ReferencedAssemblies System.Drawing, System.Windows.Forms

# Appeler la méthode Main pour exécuter le formulaire
[SquarePatternGenerator]::Main()
"
RLkFy2vq,Square10-2.ps1,Thunder-Menu,PowerShell,Monday 14th of August 2023 12:36:41 AM CDT,"# Charger les assemblies System.Windows.Forms et System.Drawing
Add-Type -AssemblyName System.Windows.Forms
Add-Type -AssemblyName System.Drawing

# Définir le script en tant que chaîne
$script = @""
using System;
using System.Drawing;
using System.Drawing.Imaging;
using System.Windows.Forms;

public class SquarePatternGenerator
{
    public static void Main()
    {
        Application.EnableVisualStyles();
        Application.SetCompatibleTextRenderingDefault(false);

        Form form = new Form();
        form.Text = ""Générateur de Motif de Carrés"";
        form.Width = 600; // Ajuster la largeur de la fenêtre
        form.Height = 800; // Ajuster la hauteur de la fenêtre
        form.StartPosition = FormStartPosition.CenterScreen;

        PictureBox pictureBox = new PictureBox();
        pictureBox.Location = new Point(20, 100);
        pictureBox.Width = form.Width - 40;
        pictureBox.Height = form.Height - 300;
        form.Controls.Add(pictureBox);

        Label label = new Label();
        label.Text = ""Nombre de carrés:"";
        label.Location = new Point(20, 20);
        form.Controls.Add(label);

        TextBox textBox = new TextBox();
        textBox.Location = new Point(150, 20);
        form.Controls.Add(textBox);

        Button generateButton = new Button();
        generateButton.Text = ""Générer"";
        generateButton.Location = new Point(20, pictureBox.Bottom + 10);
        form.Controls.Add(generateButton);

        Button saveButton = new Button();
        saveButton.Text = ""Enregistrer"";
        saveButton.Location = new Point(100, pictureBox.Bottom + 10);
        saveButton.Enabled = false;
        form.Controls.Add(saveButton);

        generateButton.Click += (sender, e) =>
        {
            int nombreDeCarres = int.Parse(textBox.Text);
            int largeurPagePixels = pictureBox.Width;
            int hauteurPagePixels = pictureBox.Height;
            int tailleCarrePixels = 10;
            int espaceEntreCarresPixels = 2;

            Bitmap bitmap = new Bitmap(largeurPagePixels, hauteurPagePixels);
            Graphics graphics = Graphics.FromImage(bitmap);

            SolidBrush whiteBrush = new SolidBrush(Color.White);
            SolidBrush blackBrush = new SolidBrush(Color.Black);

            graphics.FillRectangle(whiteBrush, 0, 0, largeurPagePixels, hauteurPagePixels);

            int carreCompteur = 0;
            for (int x = 0; x < largeurPagePixels; x += (tailleCarrePixels + espaceEntreCarresPixels))
            {
                for (int y = 0; y < hauteurPagePixels; y += (tailleCarrePixels + espaceEntreCarresPixels))
                {
                    graphics.FillRectangle(blackBrush, x, y, tailleCarrePixels, tailleCarrePixels);

                    carreCompteur++;
                    if (carreCompteur >= nombreDeCarres)
                    {
                        break;
                    }
                }
                if (carreCompteur >= nombreDeCarres)
                {
                    break;
                }
            }

            pictureBox.Image = bitmap;
            saveButton.Enabled = true;
        };

        saveButton.Click += (sender, e) =>
        {
            SaveFileDialog saveFileDialog = new SaveFileDialog();
            saveFileDialog.Filter = ""Images BMP|*.bmp"";
            if (saveFileDialog.ShowDialog() == DialogResult.OK)
            {
                pictureBox.Image.Save(saveFileDialog.FileName, ImageFormat.Bmp);
                MessageBox.Show(""Motif de carrés généré et enregistré sous "" + saveFileDialog.FileName);
            }
        };

        form.Controls.Add(saveButton);

        Application.Run(form);
    }
}
""@

# Exécuter le script
Add-Type -TypeDefinition $script -ReferencedAssemblies System.Drawing, System.Windows.Forms

# Appeler la méthode Main pour exécuter le formulaire
[SquarePatternGenerator]::Main()
"
WpkfjNTb,Pain and suffering part 2 (optimized now :D),fatboychummy,Lua,Monday 14th of August 2023 12:13:15 AM CDT,"-- These values are per 500mB, since a crystal takes 6000mB to make, we will need to divide everything by 12 later to get their actual increment in values.
---@type table<string, laser_item>
local LASER_VALUES = {}
do
  local function ilv(name, purity, strength, efficiency, max_purity, max_strength, max_efficiency)
    LASER_VALUES[name] = {
      purity = purity or 0,
      strength = strength or 0,
      efficiency = efficiency or 0,
      max_purity = max_purity or 100,
      max_strength = max_strength or 100,
      max_efficiency = max_efficiency or 100
    }
  end

  ilv(""minecraft:ender_pearl"", 2, 0, 0, 100, 0, 0)
  ilv(""minecraft:quartz"", -1, 0, 7, 0, 0, 80)
  ilv(""minecraft:gunpowder"", -5, 8, 4, 0, 70, 60)
  ilv(""minecraft:diamond"", 5, 0, 0, 100, 0, 0)
  ilv(""minecraft:glowstone_dust"", -2, 6, 3, 0, 50, 50)
  ilv(""minecraft:iron_ingot"", 0, -2, 1, 0, 0, 20)
  ilv(""rftoolsbase:dimensionalshard"", 1, 8, 8, 100, 80, 80)
  ilv(""minecraft:prismarine_shard"", 0, 3, 3, 0, 30, 30)
  ilv(""minecraft:gold_ingot"", 0, -1, 1, 0, 0, 30)
  ilv(""minecraft:prismarine_crystals"", 0, 4, 4, 0, 35, 35)
  ilv(""minecraft:coal"", -1, -10, 0, 0, 0, 0)             -- Not sure why you'd want to use coal.
  ilv(""minecraft:nether_star"", -60, 90, 90, 0, 100, 100) -- Very powerful, but also requires a repurification.
  ilv(""minecraft:nether_wart"", -3, 2, -2, 0, 35, 1)
  ilv(""minecraft:redstone"", -1, 5, 0, 0, 60, 0)
  ilv(""minecraft:slime_ball"", 0, 0, -10, 0, 0, 1) -- Not sure why you'd want to use slime balls.
  ilv(""minecraft:emerald"", 8, 0, 0, 100, 0, 0)    -- May be used as a subsitute to repurification?
  ilv(""minecraft:blaze_powder"", -6, 5, 5, 0, 70, 70)
  ilv(""minecraft:ghast_tear"", -20, 25, 15, 0, 100, 100)
  ilv(""minecraft:snowball"", 1, 0, 1, 30, 0, 40)
end

--- Deep clone a table
---@param t any
---@return any t
local function deep_copy(t)
  if type(t) ~= ""table"" then return t end

  local out = {}

  for k, v in pairs(t) do
    out[k] = deep_copy(v)
  end

  return out
end

--- This function will do the exact same thing as the original best_item_combo function.
--- However, there will be a few things done to optimize the algorithm, as currently there are just 
--- too many combinations to check.
--- We will note, the original description is as follows:
---   This function will bruteforce the best combination of items to use in the lasers.
---   It will return a table of items to use, and the amount of items to use, and in what order.
---   This function only needs to care about strength and efficiency, though we must note purity CANNOT go below 1%
---   This function will also take into account the amount of items we have in the storage chest.
---   We will likely need to use some heavy recursion here.
--- In order to optimize this, we will need to do a few things:
---  1. We will need to sort the items by their type, so we can group them together.
---  2. We will greedily take from each type, until they reach their maximum potency, minimum purity, or run out of items.
--- Hopefully this will be enough to optimize it.
---@param current laser_list? The current list of items we are using, along with the current strength, efficiency, and purity.
---@param item_list short_laser_item[]? The list of items we can use.
---@return table<integer, string> list The best list of items found.
---@return integer strength The strength of the best list of items found.
---@return integer efficiency The efficiency of the best list of items found.
---@return integer purity The purity of the best list of items found.
local function best_item_combo_optimized(current, item_list)
  local x = not current
  -- Initial purity (after leaving the purifier) is 85%, initial strength is 10%, initial efficiency is 10%.
  current = current or { list = {}, used = {}, strength = 10, efficiency = 10, purity = 85 }

  if not item_list then
    -- We will need to initialize the list of items available, searching the storage chest and adding items as we see them.
    -- We should collapse all similar items so all we have are the item names and the amount of items.
    item_list = {}

    local storage = config.peripherals.chests.storage
    local list = smn.call(storage, ""list"")
    for _, item in pairs(list) do
      local found = false
      for _, item2 in ipairs(item_list) do
        if item.name == item2.name then
          item2.count = item2.count + item.count
          found = true
          break
        end
      end

      if not found then
        table.insert(item_list, { name = item.name, count = item.count })
      end
    end
  end
  -- Coincidentally, the item list is already sorted ""enough"" here. We don't particularly care about the individual values, just that they are grouped together.

  -- We will need to loop through the item list, and for each item, we will need to greedily add it to the current list, then call this function again.
  -- We will need to keep track of the best item list, and the best strength and efficiency.
  local best_strength = current.strength
  local best_efficiency = current.efficiency
  local best_purity = current.purity
  local best_list = {}

  for _, item in ipairs(item_list) do

    local new_strength, new_efficiency, new_purity = current.strength, current.efficiency, current.purity
    local last_strength, last_efficiency = new_strength, new_efficiency
    local added = 0
    repeat
      -- Check how much of this item remains
      local remaining = item.count - (current.used[item.name] or 0)
      local exit = false

      if remaining > 0 and LASER_VALUES[item.name] then

        -- Add this item to both lists.
        table.insert(current.list, item.name)
        current.used[item.name] = (current.used[item.name] or 0) + 1
        added = added + 1

        -- Calculate the new strength, efficiency, and purity.
        local laser_value = LASER_VALUES[item.name]

        -- If the values are above zero, we cannot go above the maximum.
        -- If the values are below or equal to zero, we can go down essentially forever (to a minimum of zero)
        -- We will also hard-cap each side at 100 and 0, just to ensure nothing goes crazy anywhere.

        if laser_value.strength > 0 then
          new_strength = math.min(new_strength + laser_value.strength / 12, laser_value.max_strength, 100)
        else
          new_strength = math.max(new_strength + laser_value.strength / 12, laser_value.max_strength, 0)
        end

        if laser_value.efficiency > 0 then
          new_efficiency = math.min(new_efficiency + laser_value.efficiency / 12, laser_value.max_efficiency, 100)
        else
          new_efficiency = math.max(new_efficiency + laser_value.efficiency / 12, laser_value.max_efficiency, 0)
        end

        if laser_value.purity > 0 then
          new_purity = math.min(new_purity + laser_value.purity / 12, laser_value.max_purity, 100)
        else
          new_purity = math.max(new_purity + laser_value.purity / 12, laser_value.max_purity, 0)
        end

        -- Check if the values are out of bounds.

        -- Check strength.
        if new_strength >= laser_value.max_strength then
          if last_strength < laser_value.max_strength then
            -- We can keep this item, but we should exit immediately.
            -- Leaving this empty block here for documentation.
          else
            -- We were over the max last time, and we are still over the max, so we should remove this item, then exit.
            table.remove(current.list, #current.list)
            current.used[item.name] = current.used[item.name] - 1
            added = added - 1
          end
          exit = true
        end

        -- Check efficiency.
        if new_efficiency >= laser_value.max_efficiency then
          if last_efficiency < laser_value.max_efficiency then
            -- We can keep this item, but we should exit immediately.
            -- Leaving this empty block here for documentation.
          else
            -- We were over the max last time, and we are still over the max, so we should remove this item, then exit.
            table.remove(current.list, #current.list)
            current.used[item.name] = current.used[item.name] - 1
            added = added - 1
          end
          exit = true
        end

        -- Check purity.
        -- We will need to check if the purity is below 1%.
        if new_purity <= 1.05 then
          -- Purity cannot go below 1% whatsoever, so we will need to remove this item, then exit.
          table.remove(current.list, #current.list)
          current.used[item.name] = current.used[item.name] - 1
          added = added - 1
          exit = true
        end
      else -- No items left of this type (or we can't use this item in the laser), so we will need to exit.
        exit = true
      end
    until remaining <= 0 or exit

    if x then
      print(item.name, added)
    end

    -- If the new strength and efficiency are better than the best, we will need to update the best.
    -- However, if the purity is below or equal to 1%, we will discard this attempt.
    if new_purity > 1 and new_strength >= best_strength then
      -- If the new strength and efficiency are better than the best, we will need to update the best.
      best_strength = new_strength
      best_efficiency = new_efficiency
      best_purity = new_purity
      best_list = deep_copy(current.list)
    end

    local new_current = deep_copy(current)
    new_current.strength = new_strength
    new_current.efficiency = new_efficiency
    new_current.purity = new_purity

    -- To prevent excess looping, we exit if nothing was added.
    if added > 0 then
      -- Now we will recurse, with the new values and list.
      local best_recursed_list, best_recursed_strength, best_recursed_efficiency, best_recursed_purity = best_item_combo_optimized(new_current, item_list)

      -- Then we will need to check if the recursed values are better than the current best.
      -- We will only worry about purity and strength here, since strength determines total RF storage, and purity needs to remain above 1.
      -- We will check for purity above 1.05, to ensure it never goes below 1 due to any rounding errors.
      if best_recursed_purity > 1.05 and best_recursed_strength > best_strength then
        best_strength = best_recursed_strength
        best_efficiency = best_recursed_efficiency
        best_purity = best_recursed_purity
        best_list = best_recursed_list
      end

      -- Now we can remove all the items we added
      for i = 1, added do
        table.remove(current.list, #current.list)
        current.used[item.name] = current.used[item.name] - 1
      end
    end
  end

  return best_list, best_strength, best_efficiency, best_purity
end"
kvpxuYsa,邀您一起看：动漫巴士,xiaomianao666,JavaScript,Sunday 13th of August 2023 11:56:02 PM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥动漫巴士@@eyJkYXRhIjoie1wiYXNzb2NpYXRlZE1vZGVsc01hcEZvckpvaW5UYWJsZVwiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhGS1wiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhvdXRGS1wiOnt9LFwiZmllbGRzVG9TZXRUb0RlZmF1bHRcIjpbXSxcImdtdE1vZGlmaWVkXCI6MCxcImlkXCI6MCxcImxhc3RfY2hhcHRlcl9ydWxlXCI6XCJqczpcXG5ldmFsKGZldGNoKCdoaWtlcjovL2ZpbGVzL3J1bGVzL3h5cS9oaWtlcm1vdmllLmpzJykpO2hpa2NoYXB0ZXIoKTtcIixcImxpc3RUb0NsZWFyQXNzb2NpYXRlZEZLXCI6W10sXCJsaXN0VG9DbGVhclNlbGZGS1wiOltdLFwicGFnZUxpc3RcIjpbXSxcInNhdmVkXCI6ZmFsc2UsXCJ0aXRsZVwiOlwi6aaZ5oOF5b2x6KeGXCIsXCJ2ZXJzaW9uXCI6MCxcInVybFwiOlwiaGlrZXI6Ly9lbXB0eSQkaHR0cHM6Ly9kbTg0LnR2JCRmeXBhZ2UkJOWbveS6p+WKqOa8qybml6XmnKzliqjmvKsm5qyn576O5Yqo5ryrJueUteW9sSQkMSYyJjMmNCQkO2dldDtVVEYtODt7VXNlci1BZ2VudEBNb3ppbGxhLzUuMCAoTGludXjvvJvvvJsgQW5kcm9pZCAxMe+8m++8myBNaSAxMCBQcm8pIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS84OC4wLjQzMjQuMTUyIE1vYmlsZSBTYWZhcmkvNTM3LjM2fVwiLFwiY29sX3R5cGVcIjpcIm1vdmllXzFcIixcImZpbmRfcnVsZVwiOlwianM6XFxuZXZhbChmZXRjaCgnaGlrZXI6Ly9maWxlcy9ydWxlcy94eXEvaGlrZXJtb3ZpZS5qcycpKTtoaWtobWVyaigpO1wiLFwiZ3JvdXBcIjpcIuKRoOi9u+WQiOmbhlwiLFwidWFcIjpcIm1vYmlsZVwiLFwicHJlUnVsZVwiOlwiLy/orr7nva7mm7TmlrDpl7TpmpTml7bpl7Qs5Y2V5L2N5Li65pW05pWw5aSp44CCXFxudmFyIHVwdGltZSA9IDI7XFxuZnVuY3Rpb24gdXBydWxlZmlsZSgpIHtcXG4gICAgdmFyIHJ1bGVqcyA9IGZldGNoKCdodHRwczovL2FnaXQuYWkvbHprMjM1NTkvQ2xvdWRSdWxlL3Jhdy9icmFuY2gvbWFzdGVyL2hpa2VybW92aWUuanMnLCB7fSk7XFxuICAgIGlmIChydWxlanMuc2VhcmNoKC9sYXp5UnVsZS8pID09IC0xKSB7XFxuICAgICAgICBydWxlanMgPSBmZXRjaCgnaHR0cHM6Ly9jb2RlYmVyZy5vcmcvbHprMjM1NTkvY2xvdWRydWxlL3Jhdy9icmFuY2gvbWFzdGVyL2hpa2VybW92aWUuanMnLCB7fSk7XFxuICAgIH1cXG4gICAgaWYgKHJ1bGVqcy5zZWFyY2goL2xhenlSdWxlLykgIT0gLTEpIHtcXG4gICAgICAgIHdyaXRlRmlsZShcXFwiaGlrZXI6Ly9maWxlcy9ydWxlcy94eXEvaGlrZXJtb3ZpZS5qc1xcXCIsIHJ1bGVqcyk7XFxuICAgIH1cXG4gICAgdmFyIHJ1bGVqc29uID0gZmV0Y2goJ2h0dHBzOi8vYWdpdC5haS9semsyMzU1OS9DbG91ZFJ1bGUvcmF3L2JyYW5jaC9tYXN0ZXIvaGlrZXJtb3ZpZS5qc29uJywge30pO1xcbiAgICBpZiAocnVsZWpzb24uc2VhcmNoKC9cXFxcXFxcInZvZGhyZWZcXFxcXFxcIi8pID09IC0xKSB7XFxuICAgICAgICBydWxlanNvbiA9IGZldGNoKCdodHRwczovL2NvZGViZXJnLm9yZy9semsyMzU1OS9jbG91ZHJ1bGUvcmF3L2JyYW5jaC9tYXN0ZXIvaGlrZXJtb3ZpZS5qc29uJywge30pO1xcbiAgICB9XFxuICAgIGlmIChydWxlanNvbi5zZWFyY2goL1xcXFxcXFwidm9kaHJlZlxcXFxcXFwiLykgIT0gLTEpIHtcXG4gICAgICAgIHdyaXRlRmlsZShcXFwiaGlrZXI6Ly9maWxlcy9ydWxlcy94eXEvaGlrZXJtb3ZpZS5qc29uXFxcIiwgcnVsZWpzb24pO1xcbiAgICB9XFxuICAgIGlmIChydWxlanMuc2VhcmNoKC9sYXp5UnVsZS8pICE9IC0xICYmIHJ1bGVqc29uLnNlYXJjaCgvXFxcXFxcXCJ2b2RocmVmXFxcXFxcXCIvKSAhPSAtMSkge1xcbiAgICAgICAgd3JpdGVGaWxlKFxcXCJoaWtlcjovL2ZpbGVzL3J1bGVzL3h5cS9oaWtlcnVwZGF0ZS50eHRcXFwiLCBuZXcgRGF0ZSgpICsgJycpO1xcbiAgICAgICAgY29uZmlybSh7dGl0bGU6J+aPkOekuicsIGNvbnRlbnQ6J+iHquWKqOabtOaWsOWujOaIkCd9KTtcXG4gICAgfSBlbHNlIHtcXG4gICAgICAgIGNvbmZpcm0oe3RpdGxlOifmj5DnpLonLCBjb250ZW50Oifoh6rliqjmm7TmlrDlpLHotKUnfSk7XFxuICAgIH1cXG59XFxuXFxuXFxuXFxuLy/mo4DmtYvmmK/lkKbmnInlhpnlhaXml7bpl7TkuI7op4TliJnnmoRqc+aPkuS7tuaWh+S7tlxcbmlmIChmaWxlRXhpc3QoXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMveHlxL2hpa2VydXBkYXRlLnR4dFxcXCIpICYmIGZpbGVFeGlzdChcXFwiaGlrZXI6Ly9maWxlcy9ydWxlcy94eXEvaGlrZXJtb3ZpZS5qc1xcXCIpICYmIGZpbGVFeGlzdChcXFwiaGlrZXI6Ly9maWxlcy9ydWxlcy94eXEvaGlrZXJtb3ZpZS5qc29uXFxcIikpIHtcXG4gICAgLy/orqHnrpfml7bpl7Tpl7TpmpRcXG4gICAgdmFyIHN0YXJ0ID0gbmV3IERhdGUoZmV0Y2goXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMveHlxL2hpa2VydXBkYXRlLnR4dFxcXCIsIHt9KSk7XFxuICAgIHZhciBub3d0ID0gbmV3IERhdGUoKTtcXG4gICAgdmFyIERfVCA9IG5vd3QuZ2V0VGltZSgpIC0gc3RhcnQuZ2V0VGltZSgpO1xcbiAgICB2YXIgRF9EID0gRF9UIC8gKDEwMDAgKiAzNjAwICogMjQpO1xcbiAgICB2YXIgdGRpZiA9IHBhcnNlSW50KERfRCkgKyAnJztcXG4gICAgLy9sb2codGRpZik7XFxuICAgIC8v6buY6K6k6Ze06ZqU6LaF6L+H6K6+572u5aSp5pWw5bCx5Y+W5LiA5qyh5LqR56uv5paH5Lu2XFxuICAgIGlmICh0ZGlmID49IHVwdGltZSB8fCB0ZGlmIDwgMCkge1xcbiAgICAgICAgdXBydWxlZmlsZSgpO1xcbiAgICB9XFxufSBlbHNlIHtcXG4gICAgLy/lpoLmnpzlsJHkuIDkuKrmlofku7blsLHoh6rliqjlj5bkupHnq6/mlofku7ZcXG4gICAgdXBydWxlZmlsZSgpO1xcbn1cXG5cXG5cXG5cXG4vL+aJp+ihjOmcgOimgemihOWkhOeQhueahOermeeCuVxcbnZhciBsYWMgPSBmZXRjaCgnaGlrZXI6Ly9maWxlcy9ydWxlcy94eXEvaGlrZXJtb3ZpZS5qcycpO1xcbi8vbG9nKGxhYy5sZW5ndGgpO1xcbmlmIChsYWMuc2VhcmNoKC9sYXp5UnVsZS8pICE9IC0xKSB7XFxuICAgIGV2YWwobGFjKTtcXG4gICAgaGlrZXJwcmUoKTtcXG59IGVsc2Uge1xcbiAgICAvL+WmguaenOacrOWcsOaWh+S7tuS4jeWvueWwhuWwneivleiHquS/ruWkjVxcbiAgICB1cHJ1bGVmaWxlKCk7XFxuICAgIHNldEVycm9yKCfop4TliJnkv67lpI3lrozmiJDvvIzlpoLmnInpl67popjor7flj43ppojjgIInKVxcbn1cIixcInBhZ2VzXCI6XCJbXVwifSIsInBpY1VybCI6Imh0dHBzOi8vZG04NC50di9mYXZpY29uLmljb0BSZWZlcmVyPSIsInRpdGxlIjoi5Yqo5ryr5be05aOrIn0=
qk57Ey5f,"激光测距采矿 多次扫描修复,自动停止",jaklsfjlsak,Lua,Sunday 13th of August 2023 11:40:00 PM CDT,"local laser = peripheral.find(""warpdriveLaser"")
local mininglasers = {}
local sides = peripheral.getNames()

for _, side in pairs(sides) do
  if peripheral.getType(side) == ""warpdriveMiningLaser"" then
    table.insert(mininglasers, peripheral.wrap(side))
  end
end

laser.beamFrequency(1420)

if not laser then
  print(""No warpdriveLaser detected"")
  os.exit()
end

if #mininglasers == 0 then
  print(""No warpdriveMiningLaser detected"")
  os.exit()
end

print(""Press the 'M' key to emit a laser scan and start the mining lasers with calculated layer offset."")

local zeroBlockCount = 0
local currentLayerWhenTotalZero = 0

-- Loop to wait for key events
while true do
  local event, key = os.pullEvent(""key"")

  if key == 50 then
    -- Get the laser's own position
    local _, laserY, _ = laser.getLocalPosition()

    local targetY = 0
    repeat
      -- Emit a laser scan in the Y- direction (0, -1, 0)
      laser.emitBeam(0, -1, 0)
      os.sleep(1) -- Brief pause to allow processing
      _, _, targetY = laser.getScanResult()
    until targetY ~= 0 -- Repeat until a non-zero result is obtained

    -- Calculate the layerOffset
    local mineTarget = laserY - targetY - 1

    -- Print the target
    print(""Target is: "" .. mineTarget .. "" blocks below"")

    -- Configure the mining lasers to use the mineTarget as the layerOffset
    for _, mininglaser in pairs(mininglasers) do
      mininglaser.offset(mineTarget)
      mininglaser.enable(true)
    end

    -- Periodically check the mining state
    while true do
      os.sleep(1)
      local state = mininglasers[1].state() -- assuming all lasers have the same state
      local total = state.total
      local currentLayer = state.currentLayer

      if total == 0 then
        if zeroBlockCount == 0 then
          currentLayerWhenTotalZero = currentLayer
        end
        if currentLayer - currentLayerWhenTotalZero >= 3 then
          print(""3 consecutive layers with 0 total blocks detected. Stopping mining."")
          for _, mininglaser in pairs(mininglasers) do
            mininglaser.enable(false)
          end
          break
        end
        zeroBlockCount = zeroBlockCount + 1
      else
        zeroBlockCount = 0
      end
    end
  end
end
"
CsDHpT47,github,Axhar_lua3,Lua,Sunday 13th of August 2023 11:35:40 PM CDT,"-- URL de votre dépôt GitHub
local repoURL = ""https://api.github.com/repos/axhar005/libft/contents/""

-- Emplacement local pour enregistrer les fichiers
local localPath = ""libft/""

-- Fonction pour télécharger un fichier
local function downloadFile(fileURL, filePath)
    local fileResponse = http.get(fileURL)
    if fileResponse then
        local fileContent = fileResponse.readAll()
        fileResponse.close()

        local file = fs.open(filePath, ""w"")
        file.write(fileContent)
        file.close()

        print(""Fichier téléchargé et enregistré : "" .. filePath)
    else
        print(""Erreur lors du téléchargement du fichier : "" .. filePath)
    end
end

-- Fonction récursive pour télécharger les fichiers dans les dossiers
local function downloadFilesInFolder(folderInfo)
    for _, fileInfo in ipairs(folderInfo) do
        if fileInfo.type == ""file"" then
            local fileURL = fileInfo.download_url
            local filePath = fs.combine(localPath, fileInfo.path)

            downloadFile(fileURL, filePath)
        elseif fileInfo.type == ""dir"" then
            local folderURL = fileInfo.url
            local folderResponse = http.get(folderURL)
            if folderResponse then
                local folderContent = folderResponse.readAll()
                folderResponse.close()

                local subFolderInfo = textutils.unserializeJSON(folderContent)
                local subFolderPath = fs.combine(localPath, fileInfo.name)
                if not fs.exists(subFolderPath) then
                    fs.makeDir(subFolderPath)
                end

                downloadFilesInFolder(subFolderInfo)
            end
        end
    end
end

-- Création du dossier local s'il n'existe pas
if not fs.exists(localPath) then
    fs.makeDir(localPath)
end

-- Récupération de la liste des fichiers et dossiers dans le dépôt
local response = http.get(repoURL)
if response then
    local fileContent = response.readAll()
    response.close()

    local fileInfo = textutils.unserializeJSON(fileContent)
    downloadFilesInFolder(fileInfo)
else
    print(""Erreur lors de la récupération de la liste des fichiers."")
end"
FFEZVVZg,Untitled,olivia31231212,Lua,Sunday 13th of August 2023 10:48:41 PM CDT,"local PlayersService = game:GetService(""Players"")
PlayersService:ReportAbuse(nil, ""Bad Model or Script"", ""This game is nsfw"")
print(""reported"")"
c8qJwNJG,Untitled,arefin2k,PHP,Sunday 13th of August 2023 10:29:26 PM CDT,"<script setup>
import { ref } from 'vue'

const products = ref([]);
const categories = ref([]);
const cat = ref('tops');
const error = ref(null);

fetch('https://dummyjson.com/products/categories')
    .then(res => res.json())
    .then(data1 => {
        categories.value = data1;
        console.log(JSON.stringify(data1, null, 2));
    })
    .catch(err => {
        error.value = err.message;
    });


fetch('https://dummyjson.com/products/category/'+cat.value)
    .then(res => res.json())
    .then(data => {
        products.value = data;
        console.log(JSON.stringify(data, null, 2));
    })
    .catch(err => {
        error.value = err.message;
    });
</script>

<template>
    <div class=""main"">
        <div v-if=""error"">Error: {{ error }}</div>
        <div class=""sub"" v-if=""!error"">
            <h1>Product of smartphones (Total: {{ products.total }})</h1>
            <div class=""select"">
                {{ cat }}
                Select Category: 
                <select v-model=""cat"">
                    <option v-for=""(category,index) in categories"" :key=""index"" :value=""category"">{{ category }}</option>
                </select>
            </div>
            <table>
                <tr>
                    <th>Thumbnail</th>
                    <th>Title</th>
                    <th>Description</th>
                    <th>Price</th>
                    <th>Discount</th>
                    <th>Rating</th>
                    <th>Stock</th>
                    <th>Brand</th>
                </tr>
                <tr v-for=""(product,index) in products.products"" :key=""index"">
                    <td><img :src=""product.thumbnail"" alt="""" style=""width:200px;""></td>
                    <td>{{ product.title }}</td>
                    <td>{{ product.description }}</td>
                    <td>${{ product.price }}</td>
                    <td>${{ product.discountPercentage }}</td>
                    <td>{{ product.rating }}</td>
                    <td>{{ product.stock }}</td>
                    <td>{{ product.brand }}</td>
                </tr>
            </table>
        </div>
    </div>
</template>

<style scoped>
    h1 {
        font-size: 20px;
        text-align: center;
    }
    table, tr, td, th {
        border-collapse: collapse;
        border: 1px solid black;
        padding: 5px;
    }
    .main {
        width: 900px;
        margin: 40px auto;
    }
    .sub {
        text-align: center;
    }
    .select {
        margin-top: 10px;
        margin-bottom: 10px;
        display: inline-block;
    }
</style>"
DMd56hba,vuejs3_fetching_data_from_api,arefin2k,PHP,Sunday 13th of August 2023 09:40:12 PM CDT,"<script setup>
import { ref } from 'vue'

const products = ref([]);
const error = ref(null);

fetch('https://dummyjson.com/products/category/smartphones')
    .then(res => res.json())
    .then(data => {
        products.value = data;
        //console.log(JSON.stringify(products.value, null, 2))
    })
    .catch(err => {
        error.value = err.message;
    });
</script>

<template>
    <div class=""main"">
        <div v-if=""error"">Error: {{ error }}</div>
        <div v-if=""!error"">
            <h1>Product Details</h1>
            {{ products }}
            <div v-for=""product in products"" :key=""product.id"">
                <h2>{{ product.title }}</h2>
                <p>{{ product.description }}</p>
                <p>{{ product.price }}</p>
            </div>
        </div>
    </div>
</template>

<style scoped>
    h1 {
        font-size: 20px;
        text-align: center;
    }
    table, tr, td {
        border-collapse: collapse;
        border: 1px solid black;
        padding: 5px;
    }
    .main {
        width: 500px;
        margin: 40px auto;
    }
</style>"
bm8uwPyc,Untitled,Yahya_CR,Python,Sunday 13th of August 2023 09:13:25 PM CDT,"import discord
from discord import app_commands
from discord.app_commands import CommandTree
from discord.interactions import Interaction
from discord.utils import MISSING
import settings
from typing import Literal, Optional
intents = discord.Intents.default()
intents.message_content = True
client = discord.Client(intents=intents)
tree = CommandTree(client)
guildid = 784193451893719061
@client.event
async def on_ready():
    print(f""Logged in as {client.user}"")


@client.event
async def on_message(message: discord.Message):
    if message.content == ""setup"" and message.author.id == 336959076200218626:
        guild=client.get_guild(guildid)
        print(guild.name)
        await tree.sync(guild=client.get_guild(guildid))

class AppModal(discord.ui.Modal):
    def __init__(self, title, app):
        super().__init__(title=title)
        appq = app[""questions""]
        self.text_inputs = [discord.ui.TextInput(label = x, placeholder = """") for x in appq]

        for item in self.text_inputs:
            self.add_item(item)
    async def on_submit(self, interaction: discord.Interaction):
        await interaction.response.send_message(""change later"")
        print(self.text_inputs)
    async def on_error(self, interaction, error):
        raise error
class Application(app_commands.Group):
    ...
appgroup = Application(name=""application"", description=""Handles all application related commands"", guild_ids=[guildid])
@appgroup.command(name=""ping"", description=""Check the bot's latency"")
async def ping(interaction: discord.Interaction):
        await interaction.response.send_message(f""Bot ping is {client.latency * 1000}"")

@tree.command(name=""apply"", description=""Fill out an application"", guild=discord.Object(guildid))
@app_commands.choices(
     app=[
        app_commands.Choice(name=settings.data[""applications""][ndata][""title""], value = ndata)
        for ndata in settings.data[""applications""]
     ]
)
async def apply(interaction: discord.Interaction, app: str):
     await interaction.response.send_modal(AppModal(title=settings.data[""applications""][app][""title""], app=settings.data[""applications""][app]))
tree.add_command(appgroup)
client.run(settings.data[""token""])"
SnFCHyLq,邀您一起看：【中级基础】2023畅学VIP学习包（开课自动更新 勿催）,xiaomianao666,JavaScript,Sunday 13th of August 2023 09:01:15 PM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥【中级基础】2023畅学VIP学习包（开课自动更新 勿催）@@
jqiA1idj,激光测距采矿 多次扫描修复,jaklsfjlsak,Lua,Sunday 13th of August 2023 08:45:26 PM CDT,"local laser = peripheral.find(""warpdriveLaser"")
local mininglasers = {}
local sides = peripheral.getNames()

for _, side in pairs(sides) do
  if peripheral.getType(side) == ""warpdriveMiningLaser"" then
    table.insert(mininglasers, peripheral.wrap(side))
  end
end

laser.beamFrequency(1420)

if not laser then
  print(""No warpdriveLaser detected"")
  os.exit()
end

if #mininglasers == 0 then
  print(""No warpdriveMiningLaser detected"")
  os.exit()
end

print(""Press the 'M' key to emit a laser scan and start the mining lasers with calculated layer offset."")

-- Loop to wait for key events
while true do
  local event, key = os.pullEvent(""key"")

  if key == 50 then
    -- Get the laser's own position
    local _, laserY, _ = laser.getLocalPosition()

    local targetY = 0
    repeat
      -- Emit a laser scan in the Y- direction (0, -1, 0)
      laser.emitBeam(0, -1, 0)
      os.sleep(1) -- Brief pause to allow processing
      _, _, targetY = laser.getScanResult()
    until targetY ~= 0 -- Repeat until a non-zero result is obtained

    -- Calculate the layerOffset
    local mineTarget = laserY - targetY - 1

    -- Print the target
    print(""Target is: "" .. mineTarget .. "" blocks below"")

    -- Configure the mining lasers to use the mineTarget as the layerOffset
    for _, mininglaser in pairs(mininglasers) do
      mininglaser.offset(mineTarget)
      mininglaser.enable(true)
    end
  end
end
"
wnurK3fE,Silent Aim | KAT,YellowGreg,Lua,Sunday 13th of August 2023 07:18:13 PM CDT,"--// Modify by YellowGreg

-- Services
local Plrs = game:GetService(""Players"")
local RnSr = game:GetService(""RunService"")

-- Player
local P = Plrs.LocalPlayer
local M = P:GetMouse()
local Cam = workspace.CurrentCamera

-- Settings
local S = {
    fov = 150,      -- Field of view angle for target selection
    hitbox = ""Head"",-- Hitbox to aim at (e.g., ""Head"", ""Torso"")
    fovcircle = true,-- Show FOV circle
}

-- UI Elements
local CircleInline = Drawing.new(""Circle"")
local CircleOutline = Drawing.new(""Circle"")
CircleInline.Visible = S.fovcircle
CircleOutline.Visible = S.fovcircle
CircleOutline.Thickness = 4
CircleInline.Thickness = 2
CircleOutline.Color = Color3.new()
CircleInline.Color = Color3.fromRGB(255, 255, 255)
CircleOutline.ZIndex = 1
CircleInline.ZIndex = 2

-- Find closest target within FOV
local function GetClosest(Fov)
    local T, C = nil, Fov or math.huge

    for _, v in pairs(Plrs:GetPlayers()) do
        if v ~= P and v.Character and v.Character:FindFirstChild(S.hitbox) then
            local Pos, OnScr = Cam:WorldToScreenPoint(v.Character[S.hitbox].Position)
            local Dist = (Vector2.new(Pos.X, Pos.Y) - Vector2.new(M.X, M.Y)).Magnitude

            if Dist < C and OnScr then
                C = Dist
                T = v
            end
        end
    end

    return T
end

-- Current target
local Tgt

-- Update UI and target
RnSr.Stepped:Connect(function()
    CircleInline.Radius = S.fov
    CircleInline.Position = Vector2.new(M.X, M.Y + 36)
    
    CircleOutline.Radius = S.fov
    CircleOutline.Position = Vector2.new(M.X, M.Y + 36)
    
    Tgt = GetClosest(S.fov)
end)

-- Modify FindPartOnRayWithIgnoreList function
local Old
Old = hookmetamethod(game, ""__namecall"", function(Self, ...)
    local Args = {...}

    if not checkcaller() and getnamecallmethod() == ""FindPartOnRayWithIgnoreList"" then
        if table.find(Args[2], workspace.WorldIgnore.Ignore) and Tgt and Tgt.Character then
            local Origin = Args[1].Origin
            Args[1] = Ray.new(Origin, Tgt.Character[S.hitbox].Position - Origin)
        end
    end

    return Old(Self, unpack(Args))
end)
"
msqNM3MN,2023-08-13_stats.json,rdp_snitch,JSON,Sunday 13th of August 2023 07:18:11 PM CDT,"{
  ""ip"": {
    ""103.232.53.123"": 111,
    ""62.204.41.134"": 15,
    ""195.19.96.41"": 36,
    ""45.227.254.54"": 6,
    ""103.153.68.198"": 9,
    ""194.195.119.15"": 6,
    ""217.219.162.204"": 3,
    ""45.129.14.208"": 3,
    ""45.79.108.4"": 24,
    ""194.26.135.222"": 6,
    ""87.251.75.145"": 6,
    ""45.79.8.178"": 3,
    ""60.205.170.161"": 9,
    ""39.108.174.140"": 84,
    ""45.143.201.62"": 9,
    ""167.248.133.49"": 3,
    ""103.195.238.104"": 3,
    ""194.165.16.76"": 6,
    ""185.170.144.3"": 9,
    ""87.251.75.120"": 3,
    ""194.165.16.10"": 6,
    ""47.102.201.13"": 9,
    ""107.173.191.116"": 246,
    ""106.116.169.71"": 3,
    ""31.43.185.3"": 6,
    ""133.167.88.201"": 3,
    ""185.11.61.238"": 3,
    ""37.19.221.141"": 9,
    ""120.79.236.35"": 3,
    ""167.94.138.36"": 3,
    ""194.165.16.37"": 12,
    ""62.204.41.139"": 3,
    ""191.101.174.140"": 3,
    ""205.210.31.91"": 9,
    ""104.152.52.201"": 3,
    ""167.94.145.60"": 3,
    ""45.140.17.16"": 18,
    ""87.251.75.64"": 3,
    ""112.5.87.34"": 3,
    ""64.227.160.176"": 18,
    ""194.165.16.72"": 6,
    ""185.170.144.113"": 6,
    ""198.235.24.48"": 9
  },
  ""asn"": {
    ""AS63737"": 111,
    ""AS59425"": 18,
    ""AS12389"": 36,
    ""AS267784"": 6,
    ""AS131366"": 9,
    ""AS63949"": 33,
    ""AS58224"": 3,
    ""AS198465"": 3,
    ""AS57523"": 9,
    ""AS208091"": 12,
    ""AS37963"": 105,
    ""AS210950"": 9,
    ""AS398722"": 3,
    ""AS140827"": 3,
    ""AS48721"": 30,
    ""AS48080"": 15,
    ""AS36352"": 246,
    ""AS4134"": 3,
    ""AS211736"": 6,
    ""AS9371"": 3,
    ""AS212238"": 9,
    ""AS398324"": 3,
    ""AS32780"": 3,
    ""AS396982"": 18,
    ""AS14987"": 3,
    ""AS398705"": 3,
    ""AS198953"": 18,
    ""AS9808"": 3,
    ""AS14061"": 18
  },
  ""isp"": {
    ""VIETSERVER"": 111,
    ""Horizon LLC"": 18,
    ""PJSC Rostelecom"": 36,
    ""Flyservers S.A."": 36,
    ""TAM"": 9,
    ""Akamai Technologies, Inc."": 33,
    ""Iran Telecommunication Company PJS"": 3,
    ""BtHoster LTD"": 3,
    ""Chang Way Technologies Co. Limited"": 9,
    ""Xhost Internet Solutions LP"": 12,
    ""Hangzhou Alibaba Advertising Co"": 96,
    ""TOV E-RISHENNYA"": 9,
    ""Censys, Inc."": 9,
    ""AZ Viet NAM Communications Technology Company Limited"": 3,
    ""Dmitriy Panchenko"": 15,
    ""Addresses CNNIC"": 9,
    ""ColoCrossing"": 246,
    ""Chinanet"": 3,
    ""FOP Dmytro Nedilskyi"": 6,
    ""SAKURA Internet Inc."": 3,
    ""Datacamp Limited"": 9,
    ""Hosting Services"": 3,
    ""Google LLC"": 18,
    ""Rethem Hosting LLC"": 3,
    ""Proton66 OOO"": 18,
    ""China Mobile"": 3,
    ""DigitalOcean, LLC"": 18
  },
  ""org"": {
    ""VietServer Services technology company limited"": 111,
    ""Horizon LLC"": 18,
    ""PJSC Rostelecom"": 36,
    ""UAB Host Baltic"": 6,
    ""TAM Media Technology Joint Stock Company"": 9,
    ""Linode"": 33,
    ""Siub"": 3,
    ""BtHosting"": 3,
    ""Chang Way Technologies Co. Limited"": 6,
    ""Xhost Internet Solutions"": 12,
    ""Aliyun Computing Co., LTD"": 105,
    ""TOV VAIZ PARTNER"": 9,
    ""Censys, Inc."": 6,
    ""DULIEUAZ"": 3,
    ""Flyservers S.A"": 30,
    ""Xhostis"": 15,
    ""CENTRIOHOST-LLC"": 246,
    ""Chinanet HE"": 3,
    ""FOP Dmytro Nedilskyi"": 6,
    ""SAKURA-OSAKA"": 3,
    ""Starcrecium Limited"": 3,
    ""Cdnext HOU"": 9,
    ""Censys, Inc"": 3,
    ""Ipxo"": 3,
    ""Palo Alto Networks, Inc"": 18,
    ""Rethem Hosting LLC"": 3,
    ""Proton66 LLC"": 18,
    ""China Mobile Communications Corporation"": 3,
    ""DigitalOcean, LLC"": 18
  },
  ""regionName"": {
    ""Hanoi"": 120,
    ""Moscow"": 57,
    ""St.-Petersburg"": 36,
    ""Vilnius"": 6,
    ""Maharashtra"": 6,
    ""M\u0101zandar\u0101n"": 3,
    ""Chi\u0219in\u0103u Municipality"": 3,
    ""California"": 42,
    ""England"": 12,
    ""Texas"": 12,
    ""Beijing"": 9,
    ""Guangdong"": 90,
    ""Kyiv City"": 9,
    ""Michigan"": 6,
    ""Ho Chi Minh"": 3,
    ""Kaunas"": 30,
    ""Shanghai"": 9,
    ""New York"": 246,
    ""Hebei"": 3,
    ""North Holland"": 6,
    ""\u014csaka"": 3,
    ""Chechnya"": 3,
    ""New Jersey"": 3,
    ""Illinois"": 3,
    ""Hesse"": 3,
    ""Karnataka"": 18
  },
  ""country"": {
    ""Vietnam"": 123,
    ""Russia"": 96,
    ""Lithuania"": 36,
    ""India"": 24,
    ""Iran"": 3,
    ""Moldova"": 3,
    ""United States"": 312,
    ""United Kingdom"": 12,
    ""China"": 111,
    ""Ukraine"": 9,
    ""Netherlands"": 6,
    ""Japan"": 3,
    ""Germany"": 3
  },
  ""account"": {
    ""hello"": 570,
    ""Domain"": 48,
    ""Test"": 36,
    ""Administr"": 48,
    ""(empty)"": 18,
    ""krJNyLmpH"": 3,
    ""nRRoDC"": 3,
    ""CuYmOd"": 3,
    ""nmap"": 3,
    ""baMUHVCQf"": 3,
    ""wZyJRa"": 3,
    ""mFhuxG"": 3
  },
  ""keyboard"": {
    ""Unknown"": 741
  },
  ""client_build"": {
    ""Unknown"": 741
  },
  ""client_name"": {
    ""Unknown"": 741
  },
  ""ip_type"": {
    ""Unknown"": 294,
    ""hosting"": 435,
    ""proxy"": 6,
    ""hosting & proxy"": 3,
    ""mobile"": 3
  }
}"
kZRjafJZ,2023-08-13_stats.json,rdp_snitch,JSON,Sunday 13th of August 2023 07:16:09 PM CDT,"{
  ""ip"": {
    ""103.232.53.123"": 74,
    ""62.204.41.134"": 10,
    ""195.19.96.41"": 24,
    ""45.227.254.54"": 4,
    ""103.153.68.198"": 6,
    ""194.195.119.15"": 4,
    ""217.219.162.204"": 2,
    ""45.129.14.208"": 2,
    ""45.79.108.4"": 16,
    ""194.26.135.222"": 4,
    ""87.251.75.145"": 4,
    ""45.79.8.178"": 2,
    ""60.205.170.161"": 6,
    ""39.108.174.140"": 56,
    ""45.143.201.62"": 6,
    ""167.248.133.49"": 2,
    ""103.195.238.104"": 2,
    ""194.165.16.76"": 4,
    ""185.170.144.3"": 6,
    ""87.251.75.120"": 2,
    ""194.165.16.10"": 4,
    ""47.102.201.13"": 6,
    ""107.173.191.116"": 164,
    ""106.116.169.71"": 2,
    ""31.43.185.3"": 4,
    ""133.167.88.201"": 2,
    ""185.11.61.238"": 2,
    ""37.19.221.141"": 6,
    ""120.79.236.35"": 2,
    ""167.94.138.36"": 2,
    ""194.165.16.37"": 8,
    ""62.204.41.139"": 2,
    ""191.101.174.140"": 2,
    ""205.210.31.91"": 6,
    ""104.152.52.201"": 2,
    ""167.94.145.60"": 2,
    ""45.140.17.16"": 12,
    ""87.251.75.64"": 2,
    ""112.5.87.34"": 2,
    ""64.227.160.176"": 12,
    ""194.165.16.72"": 4,
    ""185.170.144.113"": 4,
    ""198.235.24.48"": 6
  },
  ""asn"": {
    ""AS63737"": 74,
    ""AS59425"": 12,
    ""AS12389"": 24,
    ""AS267784"": 4,
    ""AS131366"": 6,
    ""AS63949"": 22,
    ""AS58224"": 2,
    ""AS198465"": 2,
    ""AS57523"": 6,
    ""AS208091"": 8,
    ""AS37963"": 70,
    ""AS210950"": 6,
    ""AS398722"": 2,
    ""AS140827"": 2,
    ""AS48721"": 20,
    ""AS48080"": 10,
    ""AS36352"": 164,
    ""AS4134"": 2,
    ""AS211736"": 4,
    ""AS9371"": 2,
    ""AS212238"": 6,
    ""AS398324"": 2,
    ""AS32780"": 2,
    ""AS396982"": 12,
    ""AS14987"": 2,
    ""AS398705"": 2,
    ""AS198953"": 12,
    ""AS9808"": 2,
    ""AS14061"": 12
  },
  ""isp"": {
    ""VIETSERVER"": 74,
    ""Horizon LLC"": 12,
    ""PJSC Rostelecom"": 24,
    ""Flyservers S.A."": 24,
    ""TAM"": 6,
    ""Akamai Technologies, Inc."": 22,
    ""Iran Telecommunication Company PJS"": 2,
    ""BtHoster LTD"": 2,
    ""Chang Way Technologies Co. Limited"": 6,
    ""Xhost Internet Solutions LP"": 8,
    ""Hangzhou Alibaba Advertising Co"": 64,
    ""TOV E-RISHENNYA"": 6,
    ""Censys, Inc."": 6,
    ""AZ Viet NAM Communications Technology Company Limited"": 2,
    ""Dmitriy Panchenko"": 10,
    ""Addresses CNNIC"": 6,
    ""ColoCrossing"": 164,
    ""Chinanet"": 2,
    ""FOP Dmytro Nedilskyi"": 4,
    ""SAKURA Internet Inc."": 2,
    ""Datacamp Limited"": 6,
    ""Hosting Services"": 2,
    ""Google LLC"": 12,
    ""Rethem Hosting LLC"": 2,
    ""Proton66 OOO"": 12,
    ""China Mobile"": 2,
    ""DigitalOcean, LLC"": 12
  },
  ""org"": {
    ""VietServer Services technology company limited"": 74,
    ""Horizon LLC"": 12,
    ""PJSC Rostelecom"": 24,
    ""UAB Host Baltic"": 4,
    ""TAM Media Technology Joint Stock Company"": 6,
    ""Linode"": 22,
    ""Siub"": 2,
    ""BtHosting"": 2,
    ""Chang Way Technologies Co. Limited"": 4,
    ""Xhost Internet Solutions"": 8,
    ""Aliyun Computing Co., LTD"": 70,
    ""TOV VAIZ PARTNER"": 6,
    ""Censys, Inc."": 4,
    ""DULIEUAZ"": 2,
    ""Flyservers S.A"": 20,
    ""Xhostis"": 10,
    ""CENTRIOHOST-LLC"": 164,
    ""Chinanet HE"": 2,
    ""FOP Dmytro Nedilskyi"": 4,
    ""SAKURA-OSAKA"": 2,
    ""Starcrecium Limited"": 2,
    ""Cdnext HOU"": 6,
    ""Censys, Inc"": 2,
    ""Ipxo"": 2,
    ""Palo Alto Networks, Inc"": 12,
    ""Rethem Hosting LLC"": 2,
    ""Proton66 LLC"": 12,
    ""China Mobile Communications Corporation"": 2,
    ""DigitalOcean, LLC"": 12
  },
  ""regionName"": {
    ""Hanoi"": 80,
    ""Moscow"": 38,
    ""St.-Petersburg"": 24,
    ""Vilnius"": 4,
    ""Maharashtra"": 4,
    ""M\u0101zandar\u0101n"": 2,
    ""Chi\u0219in\u0103u Municipality"": 2,
    ""California"": 28,
    ""England"": 8,
    ""Texas"": 8,
    ""Beijing"": 6,
    ""Guangdong"": 60,
    ""Kyiv City"": 6,
    ""Michigan"": 4,
    ""Ho Chi Minh"": 2,
    ""Kaunas"": 20,
    ""Shanghai"": 6,
    ""New York"": 164,
    ""Hebei"": 2,
    ""North Holland"": 4,
    ""\u014csaka"": 2,
    ""Chechnya"": 2,
    ""New Jersey"": 2,
    ""Illinois"": 2,
    ""Hesse"": 2,
    ""Karnataka"": 12
  },
  ""country"": {
    ""Vietnam"": 82,
    ""Russia"": 64,
    ""Lithuania"": 24,
    ""India"": 16,
    ""Iran"": 2,
    ""Moldova"": 2,
    ""United States"": 208,
    ""United Kingdom"": 8,
    ""China"": 74,
    ""Ukraine"": 6,
    ""Netherlands"": 4,
    ""Japan"": 2,
    ""Germany"": 2
  },
  ""account"": {
    ""hello"": 380,
    ""Domain"": 32,
    ""Test"": 24,
    ""Administr"": 32,
    ""(empty)"": 12,
    ""krJNyLmpH"": 2,
    ""nRRoDC"": 2,
    ""CuYmOd"": 2,
    ""nmap"": 2,
    ""baMUHVCQf"": 2,
    ""wZyJRa"": 2,
    ""mFhuxG"": 2
  },
  ""keyboard"": {
    ""Unknown"": 494
  },
  ""client_build"": {
    ""Unknown"": 494
  },
  ""client_name"": {
    ""Unknown"": 494
  },
  ""ip_type"": {
    ""Unknown"": 196,
    ""hosting"": 290,
    ""proxy"": 4,
    ""hosting & proxy"": 2,
    ""mobile"": 2
  }
}"
JWwgbmLG,2023-08-13_stats.json,rdp_snitch,JSON,Sunday 13th of August 2023 07:15:08 PM CDT,"{
  ""ip"": {
    ""103.232.53.123"": 37,
    ""62.204.41.134"": 5,
    ""195.19.96.41"": 12,
    ""45.227.254.54"": 2,
    ""103.153.68.198"": 3,
    ""194.195.119.15"": 2,
    ""217.219.162.204"": 1,
    ""45.129.14.208"": 1,
    ""45.79.108.4"": 8,
    ""194.26.135.222"": 2,
    ""87.251.75.145"": 2,
    ""45.79.8.178"": 1,
    ""60.205.170.161"": 3,
    ""39.108.174.140"": 28,
    ""45.143.201.62"": 3,
    ""167.248.133.49"": 1,
    ""103.195.238.104"": 1,
    ""194.165.16.76"": 2,
    ""185.170.144.3"": 3,
    ""87.251.75.120"": 1,
    ""194.165.16.10"": 2,
    ""47.102.201.13"": 3,
    ""107.173.191.116"": 82,
    ""106.116.169.71"": 1,
    ""31.43.185.3"": 2,
    ""133.167.88.201"": 1,
    ""185.11.61.238"": 1,
    ""37.19.221.141"": 3,
    ""120.79.236.35"": 1,
    ""167.94.138.36"": 1,
    ""194.165.16.37"": 4,
    ""62.204.41.139"": 1,
    ""191.101.174.140"": 1,
    ""205.210.31.91"": 3,
    ""104.152.52.201"": 1,
    ""167.94.145.60"": 1,
    ""45.140.17.16"": 6,
    ""87.251.75.64"": 1,
    ""112.5.87.34"": 1,
    ""64.227.160.176"": 6,
    ""194.165.16.72"": 2,
    ""185.170.144.113"": 2,
    ""198.235.24.48"": 3
  },
  ""asn"": {
    ""AS63737"": 37,
    ""AS59425"": 6,
    ""AS12389"": 12,
    ""AS267784"": 2,
    ""AS131366"": 3,
    ""AS63949"": 11,
    ""AS58224"": 1,
    ""AS198465"": 1,
    ""AS57523"": 3,
    ""AS208091"": 4,
    ""AS37963"": 35,
    ""AS210950"": 3,
    ""AS398722"": 1,
    ""AS140827"": 1,
    ""AS48721"": 10,
    ""AS48080"": 5,
    ""AS36352"": 82,
    ""AS4134"": 1,
    ""AS211736"": 2,
    ""AS9371"": 1,
    ""AS212238"": 3,
    ""AS398324"": 1,
    ""AS32780"": 1,
    ""AS396982"": 6,
    ""AS14987"": 1,
    ""AS398705"": 1,
    ""AS198953"": 6,
    ""AS9808"": 1,
    ""AS14061"": 6
  },
  ""isp"": {
    ""VIETSERVER"": 37,
    ""Horizon LLC"": 6,
    ""PJSC Rostelecom"": 12,
    ""Flyservers S.A."": 12,
    ""TAM"": 3,
    ""Akamai Technologies, Inc."": 11,
    ""Iran Telecommunication Company PJS"": 1,
    ""BtHoster LTD"": 1,
    ""Chang Way Technologies Co. Limited"": 3,
    ""Xhost Internet Solutions LP"": 4,
    ""Hangzhou Alibaba Advertising Co"": 32,
    ""TOV E-RISHENNYA"": 3,
    ""Censys, Inc."": 3,
    ""AZ Viet NAM Communications Technology Company Limited"": 1,
    ""Dmitriy Panchenko"": 5,
    ""Addresses CNNIC"": 3,
    ""ColoCrossing"": 82,
    ""Chinanet"": 1,
    ""FOP Dmytro Nedilskyi"": 2,
    ""SAKURA Internet Inc."": 1,
    ""Datacamp Limited"": 3,
    ""Hosting Services"": 1,
    ""Google LLC"": 6,
    ""Rethem Hosting LLC"": 1,
    ""Proton66 OOO"": 6,
    ""China Mobile"": 1,
    ""DigitalOcean, LLC"": 6
  },
  ""org"": {
    ""VietServer Services technology company limited"": 37,
    ""Horizon LLC"": 6,
    ""PJSC Rostelecom"": 12,
    ""UAB Host Baltic"": 2,
    ""TAM Media Technology Joint Stock Company"": 3,
    ""Linode"": 11,
    ""Siub"": 1,
    ""BtHosting"": 1,
    ""Chang Way Technologies Co. Limited"": 2,
    ""Xhost Internet Solutions"": 4,
    ""Aliyun Computing Co., LTD"": 35,
    ""TOV VAIZ PARTNER"": 3,
    ""Censys, Inc."": 2,
    ""DULIEUAZ"": 1,
    ""Flyservers S.A"": 10,
    ""Xhostis"": 5,
    ""CENTRIOHOST-LLC"": 82,
    ""Chinanet HE"": 1,
    ""FOP Dmytro Nedilskyi"": 2,
    ""SAKURA-OSAKA"": 1,
    ""Starcrecium Limited"": 1,
    ""Cdnext HOU"": 3,
    ""Censys, Inc"": 1,
    ""Ipxo"": 1,
    ""Palo Alto Networks, Inc"": 6,
    ""Rethem Hosting LLC"": 1,
    ""Proton66 LLC"": 6,
    ""China Mobile Communications Corporation"": 1,
    ""DigitalOcean, LLC"": 6
  },
  ""regionName"": {
    ""Hanoi"": 40,
    ""Moscow"": 19,
    ""St.-Petersburg"": 12,
    ""Vilnius"": 2,
    ""Maharashtra"": 2,
    ""M\u0101zandar\u0101n"": 1,
    ""Chi\u0219in\u0103u Municipality"": 1,
    ""California"": 14,
    ""England"": 4,
    ""Texas"": 4,
    ""Beijing"": 3,
    ""Guangdong"": 30,
    ""Kyiv City"": 3,
    ""Michigan"": 2,
    ""Ho Chi Minh"": 1,
    ""Kaunas"": 10,
    ""Shanghai"": 3,
    ""New York"": 82,
    ""Hebei"": 1,
    ""North Holland"": 2,
    ""\u014csaka"": 1,
    ""Chechnya"": 1,
    ""New Jersey"": 1,
    ""Illinois"": 1,
    ""Hesse"": 1,
    ""Karnataka"": 6
  },
  ""country"": {
    ""Vietnam"": 41,
    ""Russia"": 32,
    ""Lithuania"": 12,
    ""India"": 8,
    ""Iran"": 1,
    ""Moldova"": 1,
    ""United States"": 104,
    ""United Kingdom"": 4,
    ""China"": 37,
    ""Ukraine"": 3,
    ""Netherlands"": 2,
    ""Japan"": 1,
    ""Germany"": 1
  },
  ""account"": {
    ""hello"": 190,
    ""Domain"": 16,
    ""Test"": 12,
    ""Administr"": 16,
    ""(empty)"": 6,
    ""krJNyLmpH"": 1,
    ""nRRoDC"": 1,
    ""CuYmOd"": 1,
    ""nmap"": 1,
    ""baMUHVCQf"": 1,
    ""wZyJRa"": 1,
    ""mFhuxG"": 1
  },
  ""keyboard"": {
    ""Unknown"": 247
  },
  ""client_build"": {
    ""Unknown"": 247
  },
  ""client_name"": {
    ""Unknown"": 247
  },
  ""ip_type"": {
    ""Unknown"": 98,
    ""hosting"": 145,
    ""proxy"": 2,
    ""hosting & proxy"": 1,
    ""mobile"": 1
  }
}"
6VyBRUb1,Untitled,Axow01,Lua,Sunday 13th of August 2023 07:14:58 PM CDT,"rednet.open(""top"")
local speaker = peripheral.wrap(""bottom"")

local function alarm()
    for i = 0, 300, 2 do
        redstone.setAnalogOutput(""back"", 15)
        speaker.playNote(""harp"", 3, 4)
        os.sleep(0.5)
        redstone.setAnalogOutput(""back"", 0)
        os.sleep(0.5)
    end
end

local co = nil

while true do
    local senderId, Message, protocol = rednet.receive(""light_42"", 300)
    if Message == true then
        redstone.setAnalogOutput(""back"", 15)
    elseif Message == false or Message == nil then
        redstone.setAnalogOutput(""back"", 0)
    elseif Message == ""alarm"" then
        if not co or coroutine.status(co) == ""dead"" then
            co = coroutine.create(alarm)
            coroutine.resume(co)
        end
    end
    os.sleep(0.1)  -- Add a short delay to prevent constant looping
end
"
FVZ03JTe,JS on click handler not working,kiwiheretic,JavaScript,Sunday 13th of August 2023 07:03:13 PM CDT," <script>
  async function getFiles() {
    let res = await fetch(""/api/files"");
    let jsondata = await res.json();
    return jsondata.files;
  }
  function displayFiles(files) {
    let div = $("".file-list"");
    $(div).empty();
    files.forEach( function(file) {
      $(div).append(`<div id=""doc-${file.ID}"" class=""document""><div class=""image""><img src=""${file.file_url}""> 
     <div class=""close""><img src=""/images/close.jpeg""></div>
      </div>
     <div class=""filename"">${file.original_filename}</div>
     </div>`);
    });
  }
  $(document).ready(async function() {
    let files = await getFiles();
    console.log(files);
    displayFiles(files);

    $(""div.close img"").on(""click"", async function(evt) {
      let doc = $(evt.target).closest(""div.document"");
      let docid = $(doc).attr(""id"");
      let mchresult = docid.match(/doc-(\d+)/);
      let id = mchresult[1];
      let res = await fetch(""/api/file-delete/""+id, { method: ""POST""} );
      $(doc).fadeOut(1000, async function() {
        let files = await getFiles();
        if (files) {
          displayFiles(files);
        }
      });
    });

    $('#file-upload').on(""submit"", async function(evt) { 
      console.log(""Submit"");
      evt.preventDefault();
      let formData = new FormData( $(""#file-upload"")[0] );
      let res = await fetch(""/api/upload-file"", { method: ""POST"", body: formData } );
      console.log(res);
      let files = await getFiles();
      if (files) {
        displayFiles(files);
      }
    });
  });
 </script>
"
QYQ4Pizf,Untitled,melzneni,Lua,Sunday 13th of August 2023 06:24:11 PM CDT,"local args={...}
if #args ~=1 then
	print(""please provide a server url"")
end

local address = args[1]

local ws = assert(http.websocket(address))
print(ws)
ws.send(""Hu"")
print(ws.receive())
ws.close()"
3N0wvHve,mime-support,JustLooKeD,Bash,Sunday 13th of August 2023 06:19:38 PM CDT,"root@wsgk20205:/usr/local/mesh_services/meshagent# apt install seahorse
Чтение списков пакетов… Готово
Построение дерева зависимостей
Чтение информации о состоянии… Готово
Следующие пакеты устанавливались автоматически и больше не требуются:
  jq libjq1 libkdecorations2private9 libkf5screen7 libonig5 libopts25 libplacebo7 libpoppler118
Для их удаления используйте «apt autoremove».
Следующие НОВЫЕ пакеты будут установлены:
  seahorse
Обновлено 0 пакетов, установлено 1 новых пакетов, для удаления отмечено 0 пакетов, и 2 пакетов не обновлено.
Необходимо скачать 1 179 kB архивов.
После данной операции объём занятого дискового пространства возрастёт на 7 411 kB.
Пол:1 http://nexus.svc/repository/Astra-SE_base 1.7_x86-64/main amd64 seahorse amd64 3.30.1.1-1 [1 179 kB]
Получено 1 179 kB за 6с (203 kB/s)
Выбор ранее не выбранного пакета seahorse.
(Чтение базы данных … на данный момент установлено 225767 файлов и каталогов.)
Подготовка к распаковке …/seahorse_3.30.1.1-1_amd64.deb …
Распаковывается seahorse (3.30.1.1-1) …
Настраивается пакет seahorse (3.30.1.1-1) …
Обрабатываются триггеры для desktop-file-utils (0.26-1astra1) …
Обрабатываются триггеры для mime-support (3.62) …"
w1Hek0rT,Roblox Olympia [NEW],hellsing_zxc,Lua,Sunday 13th of August 2023 06:18:28 PM CDT,"repeat wait(0.1) until game:IsLoaded()

getgenv().info = {
    moneyFarm = false,
    autoRegen = false,
    muscleFarm = false
}

local library = loadstring(game:HttpGet(""https://pastebin.com/raw/D92f7fBq"", true))()

local list = {
    ""Bic"",
    ""Peit"",
    ""Tri"",
    ""Back"",
    ""Ab"",
    ""Leg""
}

local function muscleFarm()
    spawn(function()
        while info.muscleFarm do
            wait()
            for _, muscle in ipairs(list) do
                local name = ""ServerPlus""..muscle;
                game:GetService(""ReplicatedStorage"").Remotes.Plus:FindFirstChild(name):FireServer();
            end
        end
    end)
end

local function infinityRegen()
    spawn(function()
        while info.autoRegen do
            wait()
            game:GetService(""ReplicatedStorage"").Remotes.EnergyFatigue.ServerRegen:FireServer()
        end
    end)
end

local function moneyFarm()
    spawn(function()
        game.Players.LocalPlayer.Character:PivotTo(CFrame.new(-271, 20, -619))
        while info.moneyFarm do
            wait()
            game:GetService(""ReplicatedStorage"").Remotes.Money:FireServer()
            game:GetService(""ReplicatedStorage"").Remotes.Money:FireServer()
            game:GetService(""ReplicatedStorage"").Remotes.Money:FireServer()
            game:GetService(""ReplicatedStorage"").Remotes.Money:FireServer()
        end
    end)
end

local window = library:CreateMain(""Olympia"", ""Private Script"", Enum.KeyCode.RightControl)

local main = window:CreateTab(""Main"")

main:CreateToggle(""Farm Money"", function(State) 
    info.moneyFarm = State
    if State then
        moneyFarm()
    end
end)
main:CreateToggle(""Farm Muscles"", function(State) 
    info.muscleFarm = State
    if State then
        muscleFarm()
    end
end)
main:CreateToggle(""Infinity Energy"", function(State) 
    info.autoRegen = State 
    if State then
        infinityRegen()
    end
end)"
0s4VHG3L,激光测距挖矿v3 自动停止,jaklsfjlsak,Lua,Sunday 13th of August 2023 06:02:56 PM CDT,"local laser = peripheral.find(""warpdriveLaser"")
local mininglasers = {}
local sides = peripheral.getNames()

for _, side in pairs(sides) do
  if peripheral.getType(side) == ""warpdriveMiningLaser"" then
    table.insert(mininglasers, peripheral.wrap(side))
  end
end

laser.beamFrequency(1420)

if not laser then
  print(""No warpdriveLaser detected"")
  os.exit()
end

if #mininglasers == 0 then
  print(""No warpdriveMiningLaser detected"")
  os.exit()
end

print(""Press the 'M' key to emit a laser scan and start the mining lasers with calculated layer offset."")

local zeroBlockCount = 0

-- Loop to wait for key events
while true do
  -- Wait for a key event
  local event, key = os.pullEvent(""key"")

  -- Check if the ""M"" key was pressed (key code 50)
  if key == 50 then
    -- Get the laser's own position
    local _, laserY, _ = laser.getLocalPosition()

    -- Emit a laser scan in the Y- direction (0, -1, 0)
    laser.emitBeam(0, -1, 0)

    -- Get the scan result
    local _, _, targetY = laser.getScanResult()

    -- Calculate the layerOffset
    local mineTarget = laserY - targetY - 1

    -- Print the target
    print(""Target is: "" .. mineTarget .. "" blocks below"")

    -- Configure the mining lasers to use the mineTarget as the layerOffset
    for _, mininglaser in pairs(mininglasers) do
      mininglaser.offset(mineTarget)
      mininglaser.enable(true)
    end

    -- Monitor the total blocks and stop if necessary
    while true do
      local total = 0
      for _, mininglaser in pairs(mininglasers) do
        local _, _, _, _, _, laserTotal = mininglaser.state()
        total = total + laserTotal
      end
      
      if total == 0 then
        zeroBlockCount = zeroBlockCount + 1
        if zeroBlockCount >= 3 then
          print(""3 consecutive layers with 0 total blocks detected. Stopping mining."")
          shell.run(""stop"") -- Call the stop script to stop mining
          break -- Exit the loop
        end
      else
        zeroBlockCount = 0
      end

      os.sleep(1) -- Delay to give mining lasers time to process
    end
  end
end
"
dJ65WjiX,Untitled,shizaero,C++,Sunday 13th of August 2023 06:02:43 PM CDT,"#include <cassert>
#include <cstdlib>

template <typename Type>
class ArrayPtr {
public:
    // Инициализирует ArrayPtr нулевым указателем
    ArrayPtr() = default;

    // Создаёт в куче массив из size элементов типа Type.
    // Если size == 0, поле raw_ptr_ должно быть равно nullptr
    explicit ArrayPtr(size_t size) {
        if (size == 0) raw_ptr_ = nullptr;
        raw_ptr_ = new Type[size];
    }

    // Конструктор из сырого указателя, хранящего адрес массива в куче либо nullptr
    explicit ArrayPtr(Type* raw_ptr) noexcept {
        raw_ptr_ = raw_ptr;
    }

    // Запрещаем копирование
    ArrayPtr(const ArrayPtr&) = delete;

    ~ArrayPtr() {
        delete[] raw_ptr_;
    }

    // Запрещаем присваивание
    ArrayPtr& operator=(const ArrayPtr&) = delete;

    // Прекращает владением массивом в памяти, возвращает значение адреса массива
    // После вызова метода указатель на массив должен обнулиться
    [[nodiscard]] Type* Release() noexcept {
        auto raw_ptr_copy = raw_ptr_;
        raw_ptr_ = nullptr;
        return raw_ptr_copy;
    }

    // Возвращает ссылку на элемент массива с индексом index
    Type& operator[](size_t index) noexcept {
        return raw_ptr_[index];
    }

    // Возвращает константную ссылку на элемент массива с индексом index
    const Type& operator[](size_t index) const noexcept {
        return raw_ptr_[index];
    }

    // Возвращает true, если указатель ненулевой, и false в противном случае
    explicit operator bool() const {
        return raw_ptr_ ? true : false;
    }

    // Возвращает значение сырого указателя, хранящего адрес начала массива
    Type* Get() const noexcept {
        return raw_ptr_;
    }

    // Обменивается значениям указателя на массив с объектом other
    void swap(ArrayPtr& other) noexcept {
        auto other_ptr_copy = other.raw_ptr_;
        other.raw_ptr_ = raw_ptr_;
        raw_ptr_ = other_ptr_copy;
    }

private:
    Type* raw_ptr_ = nullptr;
};

int main() {
    ArrayPtr<int> numbers(10);
    const auto& const_numbers = numbers;

    numbers[2] = 42;
    assert(const_numbers[2] == 42);
    assert(&const_numbers[2] == &numbers[2]);

    assert(numbers.Get() == &numbers[0]);

    ArrayPtr<int> numbers_2(5);
    numbers_2[2] = 43;

    numbers.swap(numbers_2);

    assert(numbers_2[2] == 42);
    assert(numbers[2] == 43);
}"
27PjjJ7d,Quarry2,Deys,Lua,Sunday 13th of August 2023 05:31:57 PM CDT,"local component = require(""component"")
local computer = require(""computer"")
local robot = require(""robot"")
local shell = require(""shell"")
local sides = require(""sides"")

if not component.isAvailable(""robot"") then
  io.stderr:write(""Can only run on robots"")
  return
end

local args, options = shell.parse(...)
if #args < 1 then
  io.write(""Usage: dig [-s] <size>\n"")
  io.write("" -s: shutdown when done."")
  return
end

local size = tonumber(args[1])
if not size then
  io.stderr:write(""Invalid size"")
  return
end

local r = component.robot
local x, y, z, f = 0, 0, 0, 0
local dropping = false
local delta = {[0] = function() x = x + 1 end, [1] = function() y = y + 1 end,
               [2] = function() x = x - 1 end, [3] = function() y = y - 1 end}

local function turnRight()
  robot.turnRight()
  f = (f + 1) % 4
end

local function turnLeft()
  robot.turnLeft()
  f = (f - 1) % 4
end

local function turnTowards(side)
  if f == side - 1 then
    turnRight()
  else
    while f ~= side do
      turnLeft()
    end
  end
end

local checkedDrop

local function clearBlock(side, cannotRetry)
  while r.suck(side) do
    checkedDrop()
  end
  local result, reason = r.swing(side)
  if result then
    checkedDrop()
  else
    local _, what = r.detect(side)
    if cannotRetry and what ~= ""air"" and what ~= ""entity"" then
      return false
    end
  end
  return true
end

local function tryMove(side)
  side = side or sides.forward
  local tries = 10
  while not r.move(side) do
    tries = tries - 1
    if not clearBlock(side, tries < 1) then
      return false
    end
  end
  if side == sides.down then
    z = z + 1
  elseif side == sides.up then
    z = z - 1
  else
    delta[f]()
  end
  return true
end

local function moveTo(tx, ty, tz, backwards)
  local axes = {
    function()
      while z > tz do
        tryMove(sides.up)
      end
      while z < tz do
        tryMove(sides.down)
      end
    end,
    function()
      if y > ty then
        turnTowards(3)
        repeat tryMove() until y == ty
      elseif y < ty then
        turnTowards(1)
        repeat tryMove() until y == ty
      end
    end,
    function()
      if x > tx then
        turnTowards(2)
        repeat tryMove() until x == tx
      elseif x < tx then
        turnTowards(0)
        repeat tryMove() until x == tx
      end
    end
  }
  if backwards then
    for axis = 3, 1, -1 do
      axes[axis]()
    end
  else
    for axis = 1, 3 do
      axes[axis]()
    end
  end
end

function checkedDrop(force)
  local empty = 0
  for slot = 1, 16 do
    if robot.count(slot) == 0 then
      empty = empty + 1
    end
  end
  if not dropping and (empty == 0 or (force and empty < 16)) then
    local ox, oy, oz, of = x, y, z, f
    dropping = true
    moveTo(0, 0, 0)
    turnTowards(2)

    for slot = 1, 16 do
      if robot.count(slot) > 0 then
        robot.select(slot)
        local wait = 1
        repeat
          if not robot.drop() then
            os.sleep(wait)
            wait = math.min(10, wait + 1)
          end
        until robot.count(slot) == 0
      end
    end
    robot.select(1)

    dropping = false
    moveTo(ox, oy, oz, true)
    turnTowards(of)
  end
end

local function step()
  clearBlock(sides.down)
  if not tryMove() then
    return false
  end
  clearBlock(sides.up)
  return true
end

local function turn(i)
  if i % 2 == 1 then
    turnRight()
  else
    turnLeft()
  end
end

local function digLayer()
  for i = 1, size do
    for j = 1, size - 1 do
      if not step() then
        return false
      end
    end
    if i < size then
      turn(i)
      if not step() then
        return false
      end
      turn(i)
    else
      turnRight()
      if size % 2 == 1 then
        turnRight()
      end
      for i = 1, 3 do
        if not tryMove(sides.down) then
          return false
        end
      end
    end
  end
  return true
end

repeat until
"
kiieT6dZ,Untitled,Mauro58melo,HTML,Sunday 13th of August 2023 04:49:36 PM CDT,"{ ""status"":""true"", ""data"":[ { ""portal_type"":""xc"", ""baseUrl"":""http://turoisherego.xyz:2095/"" } ] }"
feKJyMbi,FastLED twinkle LED test,JWSmythe,C++,Sunday 13th of August 2023 04:24:32 PM CDT,"#include <FastLED.h>

// How many leds in your strip?
#define NUM_LEDS 1
#define DATA_PIN 8
int RED = 0;
int GREEN = 0; 
int BLUE = 0;

// Define the array of leds
CRGB leds[NUM_LEDS];

void setup() {
    Serial.begin(115200);
    Serial.println(""+++ Setup BEGIN"");
    //FastLED.addLeds<NEOPIXEL, DATA_PIN>(leds, NUM_LEDS);  // GRB ordering is assumed
    FastLED.addLeds<SK6822, DATA_PIN>(leds, NUM_LEDS);  // GRB ordering is assumed
    FastLED.setBrightness(10);
    Serial.println(""+++ Setup END"");
    pinMode(DATA_PIN, OUTPUT);
}

void loop() {
  Serial.println(""+++ Loop Start"");

  RED = random(0,255);
  GREEN = random(0,255);
  BLUE = random(0,255);
  
  Serial.print(""+++ Showing\tR:""); Serial.print(RED); Serial.print(""\tG:""); Serial.print(GREEN); Serial.print(""\tB:""); Serial.print(BLUE); Serial.print(""\n"");
  FastLED.showColor(CRGB(RED, GREEN, BLUE));
  // slow the rate, if you want.  Helpful with the color/black cycle.  Not so much with a twinkle.
  delay(100);
}"
616wTjGV,[F2U] Kryota,henrybirde,HTML,Sunday 13th of August 2023 04:09:52 PM CDT,"    <!--
========================================    
    [KRYOTA: A CODE BY GHOULIPEDE]
 
    WHITE:           #ede5c7
    ACCENT 1:        #f8b94e
    ACCENT 2:        #5d2727
    BACKGROUND:      #2b0405
========================================    
    -->
 
 
 
 
 
<!--==========
[ CODE BEGINS ]
===========-->
<div class=""my-5"" style=""position:relative; max-width:600px; background:url(https://cdn.discordapp.com/attachments/950470662013726770/1140395220299690054/leather-texture-background.jpg); background-size:300px; color:#2b0405; border-radius:25px; margin:auto; padding:20px 50px; font-family:Lucida Handwriting"">
<div class=""row no-gutters"">


<!--==========
[ LEFT COLUMN ]
===========-->
<div class=""col-lg-6"">
    
    
    <!--==========
    [ NAME ]
    ===========-->
    <div class=""mt-lg-n5"" style=""position:relative; background:#2b0405; color:#f8b94e; text-align:center; font-size:22px; border-left:4px solid #f8b94e; border-top:4px solid #fed58d; border-right:4px solid #c08739; border-bottom:4px solid #c08739; box-shadow:0px 5px 2px rgba(45,4,8,0.39); z-index:100""><div style=""border:3px double #f8b94e; padding:5px"">
        
    NAME
    
    </div></div>
    <!--==========
    [ END NAME ]
    ===========-->
    
    
    <!--==========
    [ CONSOLE ]
    ===========-->
    <div style=""position:relative; height:260px; background:#5d2727; width:80%; margin-left:10%; padding:5px; color:#2b0405; z-index:99"">
    <div style=""position:absolute; top:-5px; left:5px; height:310px; width:20px; border:5px double #a16738""></div>
    
    
        <!--==========
        [ GENDER ]
        ===========-->
        <div style=""border-bottom:2px dashed #2b0405; margin:0px 5px 9px 25px"">
        Gender
        </div>
        
        <!--==========
        [ PRONOUNS ]
        ===========-->
        <div style=""border-bottom:2px dashed #2b0405; margin:0px 5px 9px 25px"">
        Pronouns
        </div>
        
        <!--==========
        [ ORIENTATION ]
        ===========-->
        <div style=""border-bottom:2px dashed #2b0405; margin:0px 5px 9px 25px"">
        Orientation
        </div>
        
        <!--==========
        [ SPECIES ]
        ===========-->
        <div style=""border-bottom:2px dashed #2b0405; margin:0px 5px 9px 25px"">
        Species
        </div>
        
        <!--==========
        [ AGE ]
        ===========-->
        <div style=""border-bottom:2px dashed #2b0405; margin:0px 5px 9px 25px"">
        Age
        </div>
        
        <!--==========
        [ HEIGHT ]
        ===========-->
        <div style=""border-bottom:2px dashed #2b0405; margin:0px 5px 9px 25px"">
        Height
        </div>
        
        <!--==========
        [ BUILD ]
        ===========-->
        <div style=""border-bottom:2px dashed #2b0405; margin:0px 5px 9px 25px"">
        Build
        </div>
        
        
        <!--==========
        [ CONTROL ARROWS ]
        ===========-->
        <div style=""margin:0px 5px 5px 25px"">
            
        <a href=""#carousel"" role=""button"" data-slide=""prev"">
        <i class=""far fa-arrow-left float-left"" style=""color:#2b0405; font-size:20px""></i>
        </a>
        
        <a href=""#carousel"" role=""button"" data-slide=""next"">
        <i class=""far fa-arrow-right float-right"" style=""color:#2b0405; font-size:20px""></i>
        <span class=""sr-only"">Next</span>
        </a>
        
        </div>
        
        
    </div>
    <!--==========
    [ END CONSOLE ]
    ===========-->
    
    
    <!--==========
    [ PORTRAIT ]
    ===========-->
    <div class=""mb-lg-n5"" style=""position:relative; background:#2b0405; color:#f8b94e; text-align:center; font-size:22px; border-left:4px solid #f8b94e; border-top:4px solid #fed58d; border-right:4px solid #c08739; border-bottom:4px solid #c08739; box-shadow:0px -5px 2px rgba(45,4,8,0.39); z-index:100""><div style=""border:3px double #f8b94e;"">
        
    <div style=""background:url(POTRAIT_LINK); background-size:cover; background-position:center; padding-bottom:100%""></div>    

    </div></div>
    <!--==========
    [ END PORTRAIT ]
    ===========-->
    
    
</div>  
<!--==========
[ END LEFT COLUMN ]
===========-->
    
    
<!--==========
[ RIGHT COLUMN ]
===========-->
<div class=""col-lg-6"">
<div class=""ml-lg-n5 mr-lg-n4 mt-1"" style=""position:relative; height:460px; border-radius:15px; background:url(https://cdn.discordapp.com/attachments/950470662013726770/1140087007977152672/10.jpg); background-size:cover; box-shadow: 0px 0px 5px #2b0405 inset; border:2px solid #5d2727"">
    
    
<!--BOOKMARK DECAL / CREDIT-->
<div style=""position:absolute; right:20px; bottom:-60px; font-size:50px;"">
<a href=""https://toyhou.se/ghoulipede"" class=""tooltipster"" title=""code by ghoulipede"" style="" color:#f8b94e"">
<i class=""fad fa-bookmark""></i>
</a></div>


<!--CAROUSEL BEGINS-->    
<div id=""carousel"" class=""carousel slide"" data-ride=""carousel"">
<div class=""carousel-inner pl-lg-4 p-2"">
    
    
    <!--==========
    [ SCHOOLING TAB ]
    ===========-->
    <div class=""carousel-item active"">
        
    <div class=""text-center mt-4"" style=""font-size:28px;"">
    <img src=""https://cdn.discordapp.com/attachments/950470662013726770/1140100830150803536/ezgif-3-0cd65e96db.png"" style=""height:50px; margin-top:-10px"">
    <span style=""border-bottom:3px double #2b0405"">SCHOOLING</span>
    </div>
    
    
        <!--==========
        [ SCHOOL ]
        ===========-->
        <div style=""margin:20px 20px 5px 20px; padding:5px; font-size:16px; background:#2b0405; color:#ede5c7"">
        <span style=""margin-left:-15px""><i class=""fas fa-diploma"" style=""text-shadow:-2px 2px #2b0405, -2px -2px #2b0405""></i> School(s) ...</span>
        </div>
        
        <div style=""margin:0px 20px 15px 20px; text-align:right"">
            
        SCHOOL HERE
        
        </div>
        
        
        <!--==========
        [ ABILITY ]
        ===========-->
        <div style=""margin:5px 20px; padding:5px; font-size:16px; background:#2b0405; color:#ede5c7"">
        <span style=""margin-left:-10px""><i class=""fas fa-sparkles"" style=""text-shadow:-2px 1px #2b0405, -2px -1px #2b0405""></i> Ability ...</span>
        </div>
        
        <div style=""margin:0px 20px 15px 20px; text-align:right"">
            
        ABILITY HERE
        
        </div>
    
        
        <!--==========
        [ ABILITY NOTES ]
        ===========-->
        <div style=""margin:5px 20px 5px 30px; padding:5px; height:140px; overflow-y:auto"">
            
        Elaborate about the ability (strengths/weaknesses, caveats, etc) here. You can make it as short or as long as you want; this box will scroll. Yippee!
            
        </div>
      
    
    <div style=""margin:20px 20px 5px 30px; border-bottom:3px double #2b0405;""></div>
      
    </div>
    <!--==========
    [ END SCHOOLING TAB ]
    ===========-->
    
    
    <!--==========
    [ CHARACTER TAB ]
    ===========-->
    <div class=""carousel-item"">
        
    <div class=""text-center mt-4"" style=""font-size:28px;"">
    <img src=""https://cdn.discordapp.com/attachments/950470662013726770/1140100830150803536/ezgif-3-0cd65e96db.png"" style=""height:50px; margin-top:-10px"">
    <span style=""border-bottom:3px double #2b0405"">CHARACTER</span>
    </div>
    
    
        <!--==========
        [ PERSONALITY ]
        ===========-->
        <div style=""margin:20px 20px 5px 20px; padding:5px; font-size:16px; background:#2b0405; color:#ede5c7"">
        <span style=""margin-left:-12px""><i class=""fas fa-brain"" style=""text-shadow:-2px 2px #2b0405, -2px -2px #2b0405""></i> Peronality ...</span>
        </div>
        
        <div style=""margin:0px 20px 5px 20px; text-align:right; height:75px; overflow-y:auto; font-size:12px"">
        
        <!--PERSONALITY-->
        Describe the character's personality in a couple of sentences (or a big fat paragraph, I won't stop you). This scrolls, naturally.
        
        </div>
        
        
    <div class=""row no-gutters ml-4"">
        
        
        <!--==========
        [ LIKES ]
        ===========-->
        <div class=""col-6 px-1"">
        <div style=""padding:5px; font-size:16px; background:#2b0405; color:#ede5c7"">
        <span style=""margin-left:-10px""><i class=""fas fa-heart"" style=""text-shadow:-2px 2px #2b0405, -2px -2px #2b0405""></i> Loves ...</span>
        </div>
        
        <div style=""margin:0px 20px 15px 20px; text-align:right; font-size:12px; height:55px; overflow-y:auto"">
        
        <!--LIKES-->
        Thing<br>
        Thing<br>
        Thing
        
        </div></div>
        
        
        <!--==========
        [ DISLIKES ]
        ===========-->
        <div class=""col-6 px-1"">
        <div style=""padding:5px; font-size:16px; background:#2b0405; color:#ede5c7"">
        <span style=""margin-left:-8px""><i class=""fas fa-skull"" style=""text-shadow:-2px 2px #2b0405, -2px -2px #2b0405""></i> Hates ...</span>
        </div>
        
        <div style=""margin:0px 20px 15px 20px; text-align:right; font-size:12px; height:55px; overflow-y:auto"">
        
        <!--DISLIKES-->
        Thing<br>
        Thing<br>
        Thing
        
        </div></div>
        
        
    </div>
        
        
        <!--==========
        [ RELATIONS ]
        ===========-->
        <div style=""margin:0px 20px 5px 35px; padding:5px; font-size:16px; background:#2b0405; color:#ede5c7"">
        <span style=""margin-left:-10px""><i class=""fas fa-user"" style=""text-shadow:-2px 2px #2b0405, -2px -2px #2b0405""></i> Relations ...</span>
        </div>
        
        <div style=""margin:0px 20px 5px 20px; text-align:center; height:50px; overflow-y:auto; font-size:20px"">
        
        <!--RELATIONSHIPS (TO ADD / SUBTRACT DUPLICATE OR REMOVE ONE LINE)-->
        <a href=""LINK"" title=""NAME"" class=""tooltipster"" style=""color:#5d2727""><i class=""fas fa-face-smile-hearts""></i></a>
        <a href=""LINK"" title=""NAME"" class=""tooltipster"" style=""color:#5d2727""><i class=""fas fa-face-smile""></i></a>
        <a href=""LINK"" title=""NAME"" class=""tooltipster"" style=""color:#5d2727""><i class=""fas fa-face-grin-stars""></i></a>
        <a href=""LINK"" title=""NAME"" class=""tooltipster"" style=""color:#5d2727""><i class=""fas fa-face-meh""></i></a>
        <a href=""LINK"" title=""NAME"" class=""tooltipster"" style=""color:#5d2727""><i class=""fas fa-face-frown""></i></a>
        <a href=""LINK"" title=""NAME"" class=""tooltipster"" style=""color:#5d2727""><i class=""fas fa-face-angry""></i></a>
        
        </div>
      
    
    <div style=""margin:0px 20px 5px 30px; border-bottom:3px double #2b0405;""></div>
      
    </div>
    <!--==========
    [ END CHARACTER TAB ]
    ===========-->
    
    
    <!--==========
    [ APPEARANCE TAB ]
    ===========-->
    <div class=""carousel-item"">
        
    <div class=""text-center mt-4"" style=""font-size:28px;"">
    <img src=""https://cdn.discordapp.com/attachments/950470662013726770/1140100830150803536/ezgif-3-0cd65e96db.png"" style=""height:50px; margin-top:-10px"">
    <span style=""border-bottom:3px double #2b0405"">APPEARANCE</span>
    </div>
    
    <div class=""row no-gutters"">
    
    
        <!--==========
        [ HAIR ]
        ===========-->
        <div class=""col-6"">
        <div style=""margin:20px 20px 5px 20px; padding:5px; font-size:16px; background:#2b0405; color:#ede5c7"">
        <span style=""margin-left:-10px""><i class=""fas fa-wind"" style=""text-shadow:-2px 1px #2b0405, -2px -1px #2b0405""></i> Hair ...</span>
        </div>
        
        <div style=""margin:0px 20px 5px 20px; text-align:right; font-size:12px; height:35px; overflow-y:auto;"">
        
        <!--HAIR COLORS-->
        <i class=""fas fa-square"" style=""color:#000000""></i>#000000 <br>
        <i class=""fas fa-square"" style=""color:#000000""></i>#000000 <br>
        <i class=""fas fa-square"" style=""color:#000000""></i>#000000 <br>
        
        </div>
        </div>
        
        
        <!--==========
        [ EYES ]
        ===========-->
        <div class=""col-6"">
        <div style=""margin:20px 20px 5px 20px; padding:5px; font-size:; background:#2b0405; color:#ede5c7"">
        <span style=""margin-left:-10px""><i class=""fas fa-eye"" style=""text-shadow:-2px 1px #2b0405, -2px -1px #2b0405""></i> Eyes ...</span>
        </div>
        
        <div style=""margin:0px 20px 5px 20px; text-align:right; font-size:12px; height:35px; overflow-y:auto;"">
        
        <!--EYE COLORS-->
        <i class=""fas fa-square"" style=""color:#000000""></i>#000000 <br>
        <i class=""fas fa-square"" style=""color:#000000""></i>#000000 <br>
        <i class=""fas fa-square"" style=""color:#000000""></i>#000000 <br>
        
        </div>
        </div>
    
        
        <!--==========
        [ SKIN ]
        ===========-->
        <div class=""col-6"">
        <div style=""margin:20px 20px 5px 20px; padding:5px; font-size:; background:#2b0405; color:#ede5c7"">
        <span style=""margin-left:-8px""><i class=""fas fa-person"" style=""text-shadow:-2px 1px #2b0405, -2px -1px #2b0405""></i> Skin ...</span>
        </div>
        
        <div style=""margin:0px 20px 15px 20px; text-align:right; font-size:12px; height:35px; overflow-y:auto;"">
        
        <!--SKIN COLORS-->
        <i class=""fas fa-square"" style=""color:#000000""></i>#000000 <br>
        <i class=""fas fa-square"" style=""color:#000000""></i>#000000 <br>
        <i class=""fas fa-square"" style=""color:#000000""></i>#000000 <br>
        
        </div>
        </div>
        
        
        <!--==========
        [ OTHER ]
        ===========-->
        <div class=""col-6"">
        <div style=""margin:20px 20px 5px 20px; padding:5px; font-size:; background:#2b0405; color:#ede5c7"">
        <span style=""margin-left:-10px""><i class=""fas fa-ring-diamond"" style=""text-shadow:-2px 1px #2b0405, -2px -1px #2b0405""></i> Other ...</span>
        </div>
        
        <div style=""margin:0px 20px 15px 20px; text-align:right; font-size:12px; height:35px; overflow-y:auto;"">
        
        <!--OTHER COLORS-->
        <i class=""fas fa-square"" style=""color:#000000""></i>#000000 <br>
        <i class=""fas fa-square"" style=""color:#000000""></i>#000000 <br>
        <i class=""fas fa-square"" style=""color:#000000""></i>#000000 <br>
        
        </div>
        </div>
        
        
        
    </div>    
        
        
        <!--==========
        [ NOTES ]
        ===========-->
        <div style=""margin:0px 20px 5px 35px; padding:5px; font-size:16px; background:#2b0405; color:#ede5c7"">
        <span style=""margin-left:-10px""><i class=""fas fa-shirt"" style=""text-shadow:-2px 2px #2b0405, -2px -2px #2b0405""></i> Design Notes ...</span>
        </div>
        
        <div style=""margin:0px 20px 5px 20px; text-align:right; height:65px; overflow-y:auto; font-size:14px"">
            
        > Make a note here<br>
        > Make a note here<br>
        > Make a note here<br>
        
        </div>
        
        
    <div style=""margin:20px 20px 5px 30px; border-bottom:3px double #2b0405;""></div>
      
    </div>
    <!--==========
    [ END APPEARANCE TAB ]
    ===========-->
    
    
</div>
</div>


</div>
</div>
<!--==========
[ RIGHT COLUMN ]
===========-->



</div>
</div>
<!--==========
[ CODE ENDS ]
===========-->"
0yHDKcmp,treescript_turtle,Axow01,Lua,Sunday 13th of August 2023 03:22:40 PM CDT,"
local sidesInfo = {down = nil, up = nil, left = nil, right = nil, front = nil}
local sidesMine = {down = 0, up = 0, left = 0, right = 0, front = 0}

rednet.open(""right"")
local senderId, message, protocol = rednet.receive(""turtle_wood_cutting"", 120)
rednet.close(""right"")
if (message == null) then
	term.blip(""Error did not receive autorisation."", colors.red, colors.black)
	exit()
end



local function inspectSides()
	local suss, data = turtle.inspect()
	sidesInfo.front = data.name
	suss, data = turtle.inspectDown()
	sidesInfo.down = data.name
	suss, data = turtle.inspectUp()
	sidesInfo.up = data.name
	turtle.turnLeft()
	suss, data = turtle.inspect()
	sidesInfo.left = data.name
	turtle.turnRight()
	turtle.turnRight()
	suss, data = turtle.inspect()
	sidesInfo.right = data.name
	turtle.turnLeft()
end

local function resetMine()
	for key, value in pairs(sidesMine) do
		sidesMine[key] = 0
	end
end

local function containWood()
	inspectSides()
	for key, value in pairs(sidesInfo) do
		if (value == ""minecraft:log"") then sidesMine[key] = 1 end
	end
	for key, value in pairs(sidesMine) do
		if (value == 1) then return true end
	end
	return false
end

local function minelayer()
	print(""here"")
	if (sidesMine.up > 0) then
		turtle.digUp()
		turtle.up()
		sidesMine.up = 0
	end
	if (sidesMine.down > 0) then
		turtle.digDown()
		turtle.down()
		sidesMine.down = 0 
	end
	if (sidesMine.front > 0) then
		turtle.dig()
		turtle.forward()
		sidesMine.front = 0 
	end
	if (sidesMine.left > 0) then
		turtle.turnLeft()
		turtle.dig()
		turtle.forward()
		turtle.turnRight()
		sidesMine.left = 0
	end
	if (sidesMine.right > 0) then
		turtle.turnRight()
		turtle.dig()
		turtle.forward()
		turtle.turnLeft()
		sidesMine.right = 0
	end
	resetMine()
end

local function mine()
	while (containWood()) do
		minelayer()
	end
end

local function emptyChest()
	while(turtle.down()) do end
	turtle.select(15)
	if (turtle.detect()) then
		turtle.dig()
	end
	turtle.place()
	for i = 1, 16 do 
		turtle.select(i)
		local data = turtle.getItemDetail(i)
		if (data ~= nil) then
			if (data.name ~= ""minecraft:log"") then
				turtle.drop()
			end
		end
	end
end

local function craftPlanks()
	while(turtle.down()) do end
	turtle.select(16)
	turtle.equipLeft()
	emptyChest()
	turtle.drop()
	turtle.select(1)
	turtle.craft()
	while (turtle.suck()) do end
	for i = 1, 16 do
		local data = turtle.getItemDetail(i)
		if (data ~= nil) then
			if (data.name == ""minecraft:diamond_axe"") then
				turtle.select(i)
				turtle.transferTo(16)
			elseif(data.name == ""minecraft:chest"") then
				turtle.select(i)
				turtle.transferTo(15)
			end
		end
	end
	turtle.select(16)
	turtle.equipLeft()
	turtle.select(15)
	turtle.dig()
	turtle.select(1)
end

turtle.select(1)
mine()
craftPlanks()

rednet.open(""right"")
rednet.send(senderId, ""done"", ""turtle_wood_cutting"")
rednet.close(""right"")

term.setCursorPos(3, 3)
-- term.clear()
term.setTextColor(colors.green)
term.write(""Done."")
term.setTextColor(colors.white)
"
dY3YYbah,激光测距挖矿v2 自动停止,jaklsfjlsak,Lua,Sunday 13th of August 2023 03:05:43 PM CDT,"local laser = peripheral.find(""warpdriveLaser"")
local mininglasers = {}
local sides = peripheral.getNames()
local zeroBlockCount = 0

for _, side in pairs(sides) do
  if peripheral.getType(side) == ""warpdriveMiningLaser"" then
    table.insert(mininglasers, peripheral.wrap(side))
  end
end

laser.beamFrequency(1420)

if not laser then
  print(""No warpdriveLaser detected"")
  os.exit()
end

if #mininglasers == 0 then
  print(""No warpdriveMiningLaser detected"")
  os.exit()
end

print(""Press the 'M' key to emit a laser scan and start the mining lasers with calculated layer offset."")

-- Loop to wait for key events
while true do
  -- Wait for a key event
  local event, key = os.pullEvent(""key"")

  -- Check if the ""M"" key was pressed (key code 50)
  if key == 50 then
    -- Get the laser's own position
    local _, laserY, _ = laser.getLocalPosition()

    -- Emit a laser scan in the Y- direction (0, -1, 0)
    laser.emitBeam(0, -1, 0)

    -- Get the scan result
    local _, _, targetY = laser.getScanResult()

    -- Calculate the layerOffset
    local mineTarget = laserY - targetY - 1

    -- Print the target
    print(""Target is: "" .. mineTarget .. "" blocks below"")

    -- Configure the mining lasers to use the mineTarget as the layerOffset
    for _, mininglaser in pairs(mininglasers) do
      mininglaser.offset(mineTarget)
      mininglaser.enable(true)
    end

    repeat
      local areActive = false
      for _, mininglaser in pairs(mininglasers) do
        local _, isActive, _, _, _, total = mininglaser.state()

        if total == 0 then
          zeroBlockCount = zeroBlockCount + 1
        else
          zeroBlockCount = 0
        end

        if zeroBlockCount >= 3 then
          print(""3 consecutive layers with 0 total blocks detected. Stopping mining."")
          for _, mininglaser in pairs(mininglasers) do
               shell.run(""stop"")
          end
          break
        end

        if isActive then
          areActive = true
        end
      end
      os.sleep(1)
    until not areActive or zeroBlockCount >= 3

    -- Reset zeroBlockCount for the next mining session
    zeroBlockCount = 0
  end
end
"
qkXZXKZf,CF_TL=test15,Korotkodul,C++,Sunday 13th of August 2023 02:46:29 PM CDT,"#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;
vector <int> a;
vector <bool> used;
int n,k;

bool sh  = 0;

int get(int i) {
    int cnt = a[i];
    int amount = 1;

    if (sh) {
        cout << ""i = "" << i << ""\n"";
    }

    for (int j = i + 1; j < n; ++j) {
        if (used[j]) {
            continue;
        }
        if (abs(a[j] - cnt) <= k) {
            used[j] = 1;
            cnt = a[j];
            amount++;
        }
    }

    /*cout << ""amount = "" << amount << ""\n"";
    cout << ""used\n"";
    for (bool i: used) {
        cout << i << ' ' ;
    } cout << ""\n"";*/

    return amount;
}

int slv() {
    int mx = 0;
    used.assign(n, 0);
    for (int i = 0; i < n; ++i) {
        if (used[i]) {
            continue;
        }
        used[i] = 1;
        int now = get(i);
        mx = max(mx, now);
    }
    return n - mx;
}

/*
8 1
8 3 1 4 5 10 7 3
*/

int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);
    int t=1;
    cin >> t;
    for (int go = 0; go < t; ++go) {
        cin >> n >> k;
        a.resize(n);
        for (int &i: a) cin >> i;
        sort(a.begin(), a.end());
        /*if (sh) {
            cout << ""n k a\n"";
            cout << n << ' ' << k << ""\n"";
            for (int i: a) cout << i << ' ';
            cout << ""\n"";
        }*/

        int ans = slv();
        cout << ans << ""\n"";
    }
}
"
5QWh6WeY,激光测距挖矿,jaklsfjlsak,Lua,Sunday 13th of August 2023 02:39:15 PM CDT,"local laser = peripheral.find(""warpdriveLaser"")
local mininglasers = {}
local sides = peripheral.getNames()

for _, side in pairs(sides) do
  if peripheral.getType(side) == ""warpdriveMiningLaser"" then
    table.insert(mininglasers, peripheral.wrap(side))
  end
end

laser.beamFrequency(1420)

if not laser then
  print(""No warpdriveLaser detected"")
  os.exit()
end

if #mininglasers == 0 then
  print(""No warpdriveMiningLaser detected"")
  os.exit()
end

print(""Press the 'M' key to emit a laser scan and start the mining lasers with calculated layer offset."")

-- Loop to wait for key events
while true do
  -- Wait for a key event
  local event, key = os.pullEvent(""key"")

  -- Check if the ""M"" key was pressed (key code 50)
  if key == 50 then
    -- Get the laser's own position
    local _, laserY, _ = laser.getLocalPosition()

    -- Emit a laser scan in the Y- direction (0, -1, 0)
    laser.emitBeam(0, -1, 0)

    -- Get the scan result
    local _, _, targetY = laser.getScanResult()

    -- Calculate the layerOffset
    local mineTarget = laserY - targetY - 1

    -- Print the target
    print(""Target is: "" .. mineTarget .. "" blocks below"")

    -- Configure the mining lasers to use the mineTarget as the layerOffset
    for _, mininglaser in pairs(mininglasers) do
      mininglaser.offset(mineTarget)
      mininglaser.enable(true)
    end
  end
end
"
GgPPHS2A,Step by step to run this code,kekets,JavaScript,Sunday 13th of August 2023 02:33:41 PM CDT,"User
Step by step guide to run this code

javascript:(function(){
    var text = window.getSelection().toString();
    if (!text) {
        text = prompt('Please enter the text you want to process with GPT-3.5');
    }
    if (text) {
        fetch('https://api.openai.com/v1/engines/davinci-codex/completions', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': 'Bearer YOUR_ACTUAL_API_KEY_HERE'
            },
            body: JSON.stringify({
                'prompt': text,
                'max_tokens': 60
            })
        })
        .then(response => response.json())
        .then(data => {
            alert('GPT-3.5 response: ' + data.choices[0].text.trim());
        })
        .catch(error => {
            console.error('Error:', error);
        });
    }
})();
ChatGPT



Step 1: Get an OpenAI API Key

    Sign up for an account on the OpenAI platform.
    Navigate to your account settings or API section to obtain your API key.

Step 2: Prepare Your Browser

    Open your web browser (Chrome, Firefox, etc.).
    Navigate to a webpage where you want to use the code.
    Right-click anywhere on the page and select ""Inspect"" or ""Inspect Element"" to open the developer tools.

Step 3: Open the Console

    In the developer tools, locate the ""Console"" tab. This is where you'll paste and run the JavaScript code.

Step 4: Paste and Run the Code

    Copy the provided JavaScript code.
    Paste the code into the console.
    Replace 'YOUR_ACTUAL_API_KEY_HERE' with your actual OpenAI API key.

Step 5: Select Text

    On the webpage, select the text you want to process with GPT-3.5. This can be any text you find on the page.

Step 6: Run the Code

    After replacing the API key and selecting text, press the ""Enter"" key to execute the code.
    If you haven't selected text, a prompt will appear asking you to enter the text manually.

Step 7: Observe the Result

    Once you run the code, the GPT-3.5 response will be displayed in an alert box.
    The response will be the AI-generated completion of the provided text.

Step 8: Adjust max_tokens

    The max_tokens parameter controls the length of the generated response. You can adjust this value to get shorter or longer responses.

Step 9: Handle Errors

    If there's an error while executing the code (e.g., invalid API key), you'll see an error message in the console.

Note:

    This code is designed to be run directly in the browser's developer console on a webpage.
    The code interacts with the OpenAI API to generate AI responses based on the selected or manually entered text.
    Be careful with your API key. Do not share it publicly or expose it in your code.
    This guide assumes you have basic familiarity with browser developer tools and JavaScript.

Remember that using the OpenAI API and interacting with external services via JavaScript requires understanding security concerns and proper usage of API keys. Always follow best practices for API usage and keep your API key secure."
Lygge2wE,Sinister Two | V4.2 Update,MagmaGetsOofed,Lua,Sunday 13th of August 2023 01:39:49 PM CDT,"local script.DownloadUpdate = true

update.Script ={
	--Is a Local Script (Client)

executeable.ClientStorage:Connect(function)
    if executed then
    UserInputService.KeyCode == Enum.KeyCode.M 
    
    local game.Player.PlayerAdded:Connect(networkOwner)
    function SetNetworkOwner(nil) --Server
    
    if NetworkOwner == client then
    UChannel.Reset(script)
end
},

Instance.new(""ClientReceiver""),
local downloadUpdate = script:GetService(""VisualUpdateExpress"")
local downloadUpdate = script.Download
if downloaded then
	continueDownload = true
end"
j2zQcFKL,Untitled,Ayush1325,Email,Sunday 13th of August 2023 01:36:23 PM CDT,"

Hello Bjørn and Ayush,

Bjørn Mork <bjorn@mork.no> writes:

> I don't know anything at all about this subject, but I believe the wan
> HDLC stuff is sync only.
>
> Noting that the ppp driver does all the async framing internally. And
> interleaved with ppp specific stuff, so probably not re-usable even if
> exported. Ref ppp_async_encode() in drivers/net/ppp/ppp_async.c
>
> I assume it would have used a shared implementation if there was one.
> But I could be wrong...

In fact I don't know of any async use of the hdlc_* code. However the
story with sync PPP in the kernel (paired with pppd program) was a bit
different. At first there was a separate syncppp code, used by all early
hw and drivers. This code implemented a simple PPP (a bare minimum
needed on leased lines) and a so called Cisco HDLC mode (which basically
only Cisco routers could use, and then Linux of course).
This was all mostly 64 kbps - 2 Mbps era equipment, 1993 or so.

Then there was the Frame Relay protocol and I wanted a very cheap PC
card (just $1000 or so at the time) to use it. So I wrote a (again, very
basic) FR code. I also needed a header-less HDLC code for specific
Ethernet-HDLC bridge devices, and this way ""generic HDLC"" started to
exist. Also, X.25 support was somehow added.

However, syncppp couldn't use generic HDLC (it worked the other way
around). Then, basically, I reimplemented the PPP part of syncppp
(I already had separate Cisco HDLC code for some reason), converted the
drivers and then asyncppp was removed.


The ""Generic PPP"" effort was completely independent. I think it was
centered around async dial-up modem connections, and thus included a lot
of relevant stuff - auth, character escaping, compression, connecting
and disconnecting on demand etc. Then the ADSL came with PPP over ATM
and over Ethernet.


At some point I was thinking about converting generic HDLC to use
generic PPP (instead of the simple implementation in hdlc_ppp.c). But it
was way too complicated for not much gain.


The generic HDLC doesn't care if the underlying device talks sync or
async. The driver would presumably just need to handle async HDLC
framing.
-- 
Krzysztof ""Chris"" Hałasa

Sieć Badawcza Łukasiewicz
Przemysłowy Instytut Automatyki i Pomiarów PIAP
Al. Jerozolimskie 202, 02-486 Warszawa

"
i1ThnZmL,Punch Simulator 👊,LuaXe,Lua,Sunday 13th of August 2023 01:08:52 PM CDT,"function C() spawn(function () while getgenv().C do
for i, v in pairs(game:GetService(""Workspace"").BreakableParts:GetDescendants()) do
if v:FindFirstChild(""HumanoidRootPart"") then if v.HumanoidRootPart:FindFirstChild(""ProximityPrompt"") then fireproximityprompt(v.HumanoidRootPart.ProximityPrompt) end end end wait(2.5)
        end
    end)
spawn(function () while getgenv().C do
local args = {[1] = true}game:GetService(""ReplicatedStorage"").Events.PushEvent:FireServer(unpack(args)) game:GetService(""ReplicatedStorage"").Events.DamageIncreaseOnClickEvent:FireServer() task.wait()
        end
    end)
end
function R() spawn(function () while getgenv().R do local args = {[1] = true}game:GetService(""ReplicatedStorage"").Events.AscendEvent:FireServer(unpack(args)) task.wait()
        end
    end)
end

local library = loadstring(game:HttpGet(('https://raw.githubusercontent.com/bloodball/-back-ups-for-libs/main/wall%20v3')))()

local w = library:CreateWindow(""Punch Simulator"")

local b = w:CreateFolder(""Main"")

b:Toggle(""Inf. Power"",function(val) getgenv().C = val C() end)
b:Toggle(""Inf. Ascends"",function(val) getgenv().R = val R() end)

b:Label(""Made by LuaXie"",{TextSize = 23; TextColor = Color3.fromRGB(255,255,255); BgColor = Color3.fromRGB(38, 38, 38);})

local w = library:CreateWindow(""LocalPlayer"")

local b = w:CreateFolder(""LP"")

b:DestroyGui()

b:Button(""Discord"",function() setclipboard(""workink.co/2GQ/LTD"") end)
b:Button(""Full Version"",function() loadstring(game:HttpGet(""https://pastebin.com/raw/GphZf9Xe"", true))() end)
b:Button(""Rejoin"",function() loadstring(game:HttpGet(""https://pastebin.com/raw/mM7JBG5h"", true))() end)
b:Button(""Reset"",function() loadstring(game:HttpGet(""https://pastebin.com/raw/EEY6SATj"", true))() end)

b:Slider(""WalkSpeed"",{min = 0; max = 10000; precise = false;},function(val) game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = val end)
b:Slider(""JumpPower"",{min = 0; max = 10000; precise = false;},function(val) game.Players.LocalPlayer.Character.Humanoid.JumpPower = val end)
b:Slider(""HipHeight"",{min = 0; max = 10000; precise = false;},function(val) game.Players.LocalPlayer.Character.Humanoid.HipHeight = val end)
b:Slider(""Gravity"",{min = 0; max = 360; precise = false;},function(val) game.workspace.Gravity = val end)
b:Slider(""FOV"",{min = 0;max = 120;precise = false;},function(val) game.workspace.CurrentCamera.FieldOfView = val end)

function TPCFrame(Player_CFrame) if game.Players.LocalPlayer.Character:FindFirstChild(""HumanoidRootPart"") then game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Player_CFrame end end
function RTPCFrame(M_CF) if game.Players.LocalPlayer.Character:FindFirstChild(""HumanoidRootPart"") then M_CF.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame end end
function PHP(Player_HP) if game.Players.LocalPlayer.Character:FindFirstChild(""Humanoid"") then game.Players.LocalPlayer.Character.Humanoid.Health = Player_HP end end"
mjatpper,Todo_Gui(PyQt6),Dynamic_Fantasy,Python,Sunday 13th of August 2023 12:46:42 PM CDT,"from PyQt6.QtWidgets import QApplication, QMainWindow, QWidget, QVBoxLayout, QLineEdit, QPushButton, QListWidget, QListWidgetItem ,QCheckBox
from PyQt6.QtGui import QFont  , QIcon

'''Here's a simple todo gui application i made with PyQt6 so yeah you should prolly give it a shot took me abt 2-3 days to wrap my head around the crazy stuff its been doin in the background ''' 







class TodoApp(QMainWindow):
    def __init__(self):
        super().__init__()

        self.setWindowTitle(""To-Do"")
        self.setGeometry(100, 100, 320, 420)
        self.setWindowIcon(QIcon(""qt_test/cursed2.png""))
        self.setStyleSheet(""""""background-color : #121212"""""")

        #self.setStyleSheet(""border : 2px solid #d207e8 "")
        

        self.theme()

    def theme(self):
        main_widget = QWidget(self)
        main_widget.setStyleSheet(""""""
        
        background-color : #1e1e1e ;
        border-radius :9px;                     /*you can set the border radius here*/
                                  
        border : 2px solid #bb86fc ;


     

        """""")
        self.setCentralWidget(main_widget)

        layout = QVBoxLayout()
        

        main_widget.setLayout(layout)


        # this takes in the entry 

        self.task_input = QLineEdit()        #using u+200e as a white space for padding 
                                            
        self.task_input.setPlaceholderText(""‎‎‎  Add Your New Todo....."")
        self.task_input.setFont(QFont(""calibri"" , 17))
        self.task_input.setStyleSheet(""""""
        QLineEdit{
                background-color :#2c2c2c ;
                color :#f5f5f5;
                height : 50px;
                width : 100px;
                border-radius : 25px;
                border : 2px solid #871bec ;                
        }
        QLineEdit:hover{
                
                border : 2px solid #d128a6;                
        }
          
        """""")

        #adding  ""add"" button to widget

        add_button = QPushButton(""Add Task"")
        add_button.setFont(QFont(""calibri"" , 15 , QFont.Weight.ExtraBold))
        add_button.setStyleSheet(""""""
            QPushButton{
                    background-color: #871bec;
                    color: white;
                    height : 50px;
                    width : 100px;
                    border: 4px solid #871bec ;
                    
            }
            QPushButton:hover{
                    background-color :  #9603a3; 
                    font-size : 20;
                     border: 1px solid ;
                                            }
                                 
            QPushButton:pressed {
              border: 1px solid;
                                            }
                                 
        """""")

        self.task_list = QListWidget()
        #self.task_list.setFont(QFont(""sans-serif "" , 15))

        self.task_list.setStyleSheet(""""""
            
            background-color :#2d2d2d;
            color : white ;
            width = 20px
            border-radius : 3px;
            font-family: Arial;
            font-size: 18px;
            """""")

        layout.addWidget(self.task_input)
        layout.addWidget(add_button)
        layout.addWidget(self.task_list)

        add_button.clicked.connect(self.add_task)

    def add_task(self):
        task_text = self.task_input.text()
        



    
        
        if task_text:           #doesnt take white space as input

            task_item = QListWidgetItem(task_text.title())
            chk = QCheckBox(task_text.title())
            

            chk.setChecked(False)
            chk.toggled.connect(self.chk_button)
            self.task_list.addItem(task_item) 
            self.task_list.setItemWidget(task_item,chk)   
            self.task_input.clear()  #resets the input box to none
    
    
    
    
    def chk_button(self):
        chk = self.sender()   #takes in the checked input

        if chk.isChecked():     #checks if button's been smashed
            self.remove()       #calls the remove function


    def remove(self):    #deletes the item 
        list_row = self.task_list.currentRow()
        temp_value = self.task_list.takeItem(list_row)
        del temp_value
            

app = QApplication([])
window = TodoApp()
window.show()
app.exec()


"
DpmJ09qN,Untitled,xyz109_88,Bash,Sunday 13th of August 2023 12:43:06 PM CDT,"import cv2
import mediapipe as mp
from pynput.keyboard import Key, Controller

keyboard = Controller()

cap = cv2.VideoCapture(0)

width  = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH)) 
height  = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT)) 

mp_hands = mp.solutions.hands
mp_drawing = mp.solutions.drawing_utils

hands = mp_hands.Hands(min_detection_confidence=0.8, min_tracking_confidence=0.5)

tipIds = [4, 8, 12, 16, 20]

state = None

# Define a function to count fingers
def countFingers(image, hand_landmarks, handNo=0):

    global state

    if hand_landmarks:
        # Get all Landmarks of the FIRST Hand VISIBLE
        landmarks = hand_landmarks[handNo].landmark

        # Count Fingers        
        fingers = []

        for lm_index in tipIds:
                # Get Finger Tip and Bottom y Position Value
                finger_tip_y = landmarks[lm_index].y 
                finger_bottom_y = landmarks[lm_index - 2].y

                # Check if ANY FINGER is OPEN or CLOSED
                if lm_index !=4:
                    if finger_tip_y < finger_bottom_y:
                        fingers.append(1)
                        # print(""FINGER with id "",lm_index,"" is Open"")

                    if finger_tip_y > finger_bottom_y:
                        fingers.append(0)
                        # print(""FINGER with id "",lm_index,"" is Closed"")

        
        totalFingers = fingers.count(1)
        
        # PLAY or PAUSE a Video
        if totalFingers == 4:
            state = ""Play""

        if totalFingers == 0 and state == ""Play"":
            state = ""Pause""
            keyboard.press(Key.space)

        # Move Video FORWARD & BACKWARDS    
        finger_tip_x = (landmarks[8].x)*width
 
        if totalFingers == 1:
            if  finger_tip_x < width-400:
                print(""Play Backward"")
                keyboard.press(Key.left)

            if finger_tip_x > width-50:
                print(""Play Forward"")
                keyboard.press(Key.right)
        
        
# Define a function to 
def drawHandLanmarks(image, hand_landmarks):

    # Darw connections between landmark points
    if hand_landmarks:

      for landmarks in hand_landmarks:
               
        mp_drawing.draw_landmarks(image, landmarks, mp_hands.HAND_CONNECTIONS)



while True:
    success, image = cap.read()

    image = cv2.flip(image, 1)
    
    # Detect the Hands Landmarks 
    results = hands.process(image)

    # Get landmark position from the processed result
    hand_landmarks = results.multi_hand_landmarks

    # Draw Landmarks
    drawHandLanmarks(image, hand_landmarks)

    # Get Hand Fingers Position        
    countFingers(image, hand_landmarks)

    cv2.imshow(""Media Controller"", image)

    # Quit the window on pressing Sapcebar key
    key = cv2.waitKey(1)
    if key == 27:
        break

cv2.destroyAllWindows()"
sCwsxpY5,Spammers and Scammers [8-4/2023],bombaires,HTML,Sunday 13th of August 2023 11:56:32 AM CDT,"<a href=""mailto:westernunion.office@internet.ru"">westernunion.office@internet.ru</a>
<a href=""mailto:info@torahblast.com"">info@torahblast.com</a>
<a href=""mailto:customerservice@kosherwine.com"">customerservice@kosherwine.com</a>
<a href=""mailto:zhu@oukosher.org.cn"">zhu@oukosher.org.cn</a>
<a href=""mailto:info@oukosher.org.cn"">info@oukosher.org.cn</a>
<a href=""mailto:kosherq@ou.org"">kosherq@ou.org</a>
<a href=""mailto:brad@kosherwine.com"">brad@kosherwine.com</a>
<a href=""mailto:help@kosherwine.com"">help@kosherwine.com</a>
<a href=""mailto:ezea28872@gmail.com"">ezea28872@gmail.com</a>
<a href=""mailto:e.z.e.a.28.8.7.2@gmail.com"">e.z.e.a.28.8.7.2@gmail.com</a>
<a href=""mailto:e.z.e.a28.872@gmail.com"">e.z.e.a28.872@gmail.com</a>
<a href=""mailto:e.z.ea28.872@gmail.com"">e.z.ea28.872@gmail.com</a>
<a href=""mailto:ezea2.8.87.2@gmail.com"">ezea2.8.87.2@gmail.com</a>
<a href=""mailto:e.zea28.8.7.2@gmail.com"">e.zea28.8.7.2@gmail.com</a>
<a href=""mailto:ezea288.72@gmail.com"">ezea288.72@gmail.com</a>
<a href=""mailto:ez.e.a28.87.2@gmail.com"">ez.e.a28.87.2@gmail.com</a>
<a href=""mailto:e.ze.a.2.88.72@gmail.com"">e.ze.a.2.88.72@gmail.com</a>
<a href=""mailto:eze.a.2.8872@gmail.com"">eze.a.2.8872@gmail.com</a>
<a href=""mailto:e.z.e.a.2.887.2@gmail.com"">e.z.e.a.2.887.2@gmail.com</a>
<a href=""mailto:ezea2.8.8.72@gmail.com"">ezea2.8.8.72@gmail.com</a>
<a href=""mailto:eze.a.2.88.7.2@gmail.com"">eze.a.2.88.7.2@gmail.com</a>
<a href=""mailto:ez.ea.2.88.72@gmail.com"">ez.ea.2.88.72@gmail.com</a>
<a href=""mailto:ezea.2.8.8.7.2@gmail.com"">ezea.2.8.8.7.2@gmail.com</a>
<a href=""mailto:eze.a288.72@gmail.com"">eze.a288.72@gmail.com</a>
<a href=""mailto:e.ze.a2.88.72@gmail.com"">e.ze.a2.88.72@gmail.com</a>
<a href=""mailto:ez.e.a.2.8.8.7.2@gmail.com"">ez.e.a.2.8.8.7.2@gmail.com</a>
<a href=""mailto:e.zea2.88.7.2@gmail.com"">e.zea2.88.7.2@gmail.com</a>
<a href=""mailto:e.zea28.87.2@gmail.com"">e.zea28.87.2@gmail.com</a>
<a href=""mailto:ezea2.8.8.7.2@gmail.com"">ezea2.8.8.7.2@gmail.com</a>
<a href=""mailto:e.z.ea2.8.872@gmail.com"">e.z.ea2.8.872@gmail.com</a>
<a href=""mailto:ez.ea288.72@gmail.com"">ez.ea288.72@gmail.com</a>
<a href=""mailto:e.z.e.a288.7.2@gmail.com"">e.z.e.a288.7.2@gmail.com</a>
<a href=""mailto:e.z.ea2887.2@gmail.com"">e.z.ea2887.2@gmail.com</a>
<a href=""mailto:e.z.ea.2.8.8.7.2@gmail.com"">e.z.ea.2.8.8.7.2@gmail.com</a>
<a href=""mailto:e.zea.2.887.2@gmail.com"">e.zea.2.887.2@gmail.com</a>
<a href=""mailto:e.zea.2887.2@gmail.com"">e.zea.2887.2@gmail.com</a>
<a href=""mailto:ez.e.a.28.8.7.2@gmail.com"">ez.e.a.28.8.7.2@gmail.com</a>
<a href=""mailto:ezea28.87.2@gmail.com"">ezea28.87.2@gmail.com</a>
<a href=""mailto:eze.a2.88.72@gmail.com"">eze.a2.88.72@gmail.com</a>
<a href=""mailto:ezea2.887.2@gmail.com"">ezea2.887.2@gmail.com</a>
<a href=""mailto:ez.e.a2.8.872@gmail.com"">ez.e.a2.8.872@gmail.com</a>
<a href=""mailto:ez.ea.2.8872@gmail.com"">ez.ea.2.8872@gmail.com</a>
<a href=""mailto:ez.ea28872@gmail.com"">ez.ea28872@gmail.com</a>
<a href=""mailto:e.ze.a.288.7.2@gmail.com"">e.ze.a.288.7.2@gmail.com</a>
<a href=""mailto:ezea.28.8.7.2@gmail.com"">ezea.28.8.7.2@gmail.com</a>
<a href=""mailto:ezea28872@gmail.com"">ezea28872@gmail.com</a>
<a href=""mailto:eze.a28.872@gmail.com"">eze.a28.872@gmail.com</a>
<a href=""mailto:ez.ea28.87.2@gmail.com"">ez.ea28.87.2@gmail.com</a>
<a href=""mailto:e.z.e.a2.8.8.7.2@gmail.com"">e.z.e.a2.8.8.7.2@gmail.com</a>
<a href=""mailto:e.z.e.a28.8.7.2@gmail.com"">e.z.e.a28.8.7.2@gmail.com</a>
<a href=""mailto:eze.a.288.7.2@gmail.com"">eze.a.288.7.2@gmail.com</a>
<a href=""mailto:e.ze.a288.7.2@gmail.com"">e.ze.a288.7.2@gmail.com</a>
<a href=""mailto:e.ze.a.2.8.8.7.2@gmail.com"">e.ze.a.2.8.8.7.2@gmail.com</a>
<a href=""mailto:eze.a28.87.2@gmail.com"">eze.a28.87.2@gmail.com</a>
<a href=""mailto:ezea.28.8.72@gmail.com"">ezea.28.8.72@gmail.com</a>
<a href=""mailto:e.z.e.a.2.8.8.72@gmail.com"">e.z.e.a.2.8.8.72@gmail.com</a>
<a href=""mailto:e.z.e.a.2.88.72@gmail.com"">e.z.e.a.2.88.72@gmail.com</a>
<a href=""mailto:ez.e.a.288.7.2@gmail.com"">ez.e.a.288.7.2@gmail.com</a>
<a href=""mailto:e.ze.a.288.72@gmail.com"">e.ze.a.288.72@gmail.com</a>
<a href=""mailto:e.z.e.a28.8.72@gmail.com"">e.z.e.a28.8.72@gmail.com</a>
<a href=""mailto:e.zea.2.8.8.72@gmail.com"">e.zea.2.8.8.72@gmail.com</a>
<a href=""mailto:e.z.ea288.7.2@gmail.com"">e.z.ea288.7.2@gmail.com</a>
<a href=""mailto:e.ze.a.2.887.2@gmail.com"">e.ze.a.2.887.2@gmail.com</a>
<a href=""mailto:ez.ea28.8.72@gmail.com"">ez.ea28.8.72@gmail.com</a>
<a href=""mailto:e.z.ea28.8.7.2@gmail.com"">e.z.ea28.8.7.2@gmail.com</a>
<a href=""mailto:e.zea2887.2@gmail.com"">e.zea2887.2@gmail.com</a>
<a href=""mailto:e.ze.a2.8.8.72@gmail.com"">e.ze.a2.8.8.72@gmail.com</a>
<a href=""mailto:ez.e.a.2.8872@gmail.com"">ez.e.a.2.8872@gmail.com</a>
<a href=""mailto:ez.ea2.8.8.72@gmail.com"">ez.ea2.8.8.72@gmail.com</a>
<a href=""mailto:eze.a288.7.2@gmail.com"">eze.a288.7.2@gmail.com</a>
<a href=""mailto:e.zea28.872@gmail.com"">e.zea28.872@gmail.com</a>
<a href=""mailto:ez.ea.2.8.872@gmail.com"">ez.ea.2.8.872@gmail.com</a>
<a href=""mailto:e.z.e.a2887.2@gmail.com"">e.z.e.a2887.2@gmail.com</a>
<a href=""mailto:eze.a28.8.72@gmail.com"">eze.a28.8.72@gmail.com</a>
<a href=""mailto:eze.a.28.8.7.2@gmail.com"">eze.a.28.8.7.2@gmail.com</a>
<a href=""mailto:ezea.2.8.872@gmail.com"">ezea.2.8.872@gmail.com</a>
<a href=""mailto:ez.e.a.28.8.72@gmail.com"">ez.e.a.28.8.72@gmail.com</a>
<a href=""mailto:ezea288.7.2@gmail.com"">ezea288.7.2@gmail.com</a>
<a href=""mailto:ezea.28.87.2@gmail.com"">ezea.28.87.2@gmail.com</a>
<a href=""mailto:eze.a.288.72@gmail.com"">eze.a.288.72@gmail.com</a>
<a href=""mailto:e.z.e.a2.88.72@gmail.com"">e.z.e.a2.88.72@gmail.com</a>
<a href=""mailto:e.z.ea2.8.8.7.2@gmail.com"">e.z.ea2.8.8.7.2@gmail.com</a>
<a href=""mailto:e.z.e.a.2.8.87.2@gmail.com"">e.z.e.a.2.8.87.2@gmail.com</a>
<a href=""mailto:ez.ea2887.2@gmail.com"">ez.ea2887.2@gmail.com</a>
<a href=""mailto:ez.e.a.2.8.87.2@gmail.com"">ez.e.a.2.8.87.2@gmail.com</a>
<a href=""mailto:eze.a.2.8.87.2@gmail.com"">eze.a.2.8.87.2@gmail.com</a>
<a href=""mailto:e.zea28872@gmail.com"">e.zea28872@gmail.com</a>
<a href=""mailto:e.zea.28.8.72@gmail.com"">e.zea.28.8.72@gmail.com</a>
<a href=""mailto:e.z.ea.2.88.72@gmail.com"">e.z.ea.2.88.72@gmail.com</a>
<a href=""mailto:e.ze.a28.872@gmail.com"">e.ze.a28.872@gmail.com</a>
<a href=""mailto:e.z.e.a2.8.87.2@gmail.com"">e.z.e.a2.8.87.2@gmail.com</a>
<a href=""mailto:e.zea.2.8.8.7.2@gmail.com"">e.zea.2.8.8.7.2@gmail.com</a>
<a href=""mailto:e.ze.a288.72@gmail.com"">e.ze.a288.72@gmail.com</a>
<a href=""mailto:e.zea2.8.872@gmail.com"">e.zea2.8.872@gmail.com</a>
<a href=""mailto:e.z.e.a2.8.872@gmail.com"">e.z.e.a2.8.872@gmail.com</a>
<a href=""mailto:eze.a2.8.87.2@gmail.com"">eze.a2.8.87.2@gmail.com</a>
<a href=""mailto:ezea.2.88.7.2@gmail.com"">ezea.2.88.7.2@gmail.com</a>
<a href=""mailto:ezea2887.2@gmail.com"">ezea2887.2@gmail.com</a>
<a href=""mailto:eze.a28.8.7.2@gmail.com"">eze.a28.8.7.2@gmail.com</a>
<a href=""mailto:e.ze.a2.8.8.7.2@gmail.com"">e.ze.a2.8.8.7.2@gmail.com</a>
<a href=""mailto:ez.ea288.7.2@gmail.com"">ez.ea288.7.2@gmail.com</a>
<a href=""mailto:e.ze.a.28.87.2@gmail.com"">e.ze.a.28.87.2@gmail.com</a>
<a href=""mailto:e.z.e.a2.8.8.72@gmail.com"">e.z.e.a2.8.8.72@gmail.com</a>
<a href=""mailto:e.z.e.a.2.8.872@gmail.com"">e.z.e.a.2.8.872@gmail.com</a>
<a href=""mailto:ez.e.a.2.8.8.72@gmail.com"">ez.e.a.2.8.8.72@gmail.com</a>
<a href=""mailto:e.z.ea2.88.72@gmail.com"">e.z.ea2.88.72@gmail.com</a>
<a href=""mailto:e.zea2.8872@gmail.com"">e.zea2.8872@gmail.com</a>
<a href=""mailto:ez.ea2.8.87.2@gmail.com"">ez.ea2.8.87.2@gmail.com</a>
<a href=""mailto:e.z.ea2.887.2@gmail.com"">e.z.ea2.887.2@gmail.com</a>
<a href=""mailto:ez.ea.28.872@gmail.com"">ez.ea.28.872@gmail.com</a>
<a href=""mailto:ezea2.88.7.2@gmail.com"">ezea2.88.7.2@gmail.com</a>
<a href=""mailto:e.ze.a.2887.2@gmail.com"">e.ze.a.2887.2@gmail.com</a>
<a href=""mailto:ez.ea.2887.2@gmail.com"">ez.ea.2887.2@gmail.com</a>
<a href=""mailto:e.zea2.8.8.7.2@gmail.com"">e.zea2.8.8.7.2@gmail.com</a>
<a href=""mailto:eze.a.28.87.2@gmail.com"">eze.a.28.87.2@gmail.com</a>
<a href=""mailto:ezea28.872@gmail.com"">ezea28.872@gmail.com</a>
<a href=""mailto:e.ze.a2.887.2@gmail.com"">e.ze.a2.887.2@gmail.com</a>
<a href=""mailto:ez.e.a2887.2@gmail.com"">ez.e.a2887.2@gmail.com</a>
<a href=""mailto:ez.ea.288.7.2@gmail.com"">ez.ea.288.7.2@gmail.com</a>
<a href=""mailto:ez.e.a.2887.2@gmail.com"">ez.e.a.2887.2@gmail.com</a>
<a href=""mailto:e.ze.a.2.8.8.72@gmail.com"">e.ze.a.2.8.8.72@gmail.com</a>
<a href=""mailto:e.zea.28.87.2@gmail.com"">e.zea.28.87.2@gmail.com</a>
<a href=""mailto:ez.e.a2.887.2@gmail.com"">ez.e.a2.887.2@gmail.com</a>
<a href=""mailto:ez.ea2.8.872@gmail.com"">ez.ea2.8.872@gmail.com</a>
<a href=""mailto:e.ze.a.2.8.87.2@gmail.com"">e.ze.a.2.8.87.2@gmail.com</a>
<a href=""mailto:e.ze.a28.8.72@gmail.com"">e.ze.a28.8.72@gmail.com</a>
<a href=""mailto:e.z.e.a2.88.7.2@gmail.com"">e.z.e.a2.88.7.2@gmail.com</a>
<a href=""mailto:ez.e.a2.8.8.7.2@gmail.com"">ez.e.a2.8.8.7.2@gmail.com</a>
<a href=""mailto:ez.ea2.8.8.7.2@gmail.com"">ez.ea2.8.8.7.2@gmail.com</a>
<a href=""mailto:ezea28.8.7.2@gmail.com"">ezea28.8.7.2@gmail.com</a>
<a href=""mailto:e.z.ea.2.8.87.2@gmail.com"">e.z.ea.2.8.87.2@gmail.com</a>
<a href=""mailto:e.ze.a2.8872@gmail.com"">e.ze.a2.8872@gmail.com</a>
<a href=""mailto:e.z.ea.288.72@gmail.com"">e.z.ea.288.72@gmail.com</a>
<a href=""mailto:eze.a2887.2@gmail.com"">eze.a2887.2@gmail.com</a>
<a href=""mailto:e.ze.a.2.8.872@gmail.com"">e.ze.a.2.8.872@gmail.com</a>
<a href=""mailto:eze.a.28.8.72@gmail.com"">eze.a.28.8.72@gmail.com</a>
<a href=""mailto:e.zea288.7.2@gmail.com"">e.zea288.7.2@gmail.com</a>
<a href=""mailto:eze.a.2.887.2@gmail.com"">eze.a.2.887.2@gmail.com</a>
<a href=""mailto:e.z.ea.2887.2@gmail.com"">e.z.ea.2887.2@gmail.com</a>
<a href=""mailto:e.zea.288.7.2@gmail.com"">e.zea.288.7.2@gmail.com</a>
<a href=""mailto:e.zea288.72@gmail.com"">e.zea288.72@gmail.com</a>
<a href=""mailto:ezea.288.72@gmail.com"">ezea.288.72@gmail.com</a>
<a href=""mailto:eze.a2.8.8.72@gmail.com"">eze.a2.8.8.72@gmail.com</a>
<a href=""mailto:ez.ea2.88.7.2@gmail.com"">ez.ea2.88.7.2@gmail.com</a>
<a href=""mailto:e.ze.a28872@gmail.com"">e.ze.a28872@gmail.com</a>
<a href=""mailto:e.zea2.8.8.72@gmail.com"">e.zea2.8.8.72@gmail.com</a>
<a href=""mailto:ez.ea.2.88.7.2@gmail.com"">ez.ea.2.88.7.2@gmail.com</a>
<a href=""mailto:e.zea.28.872@gmail.com"">e.zea.28.872@gmail.com</a>
<a href=""mailto:e.z.ea288.72@gmail.com"">e.z.ea288.72@gmail.com</a>
<a href=""mailto:e.zea2.88.72@gmail.com"">e.zea2.88.72@gmail.com</a>
<a href=""mailto:e.z.e.a.288.72@gmail.com"">e.z.e.a.288.72@gmail.com</a>
<a href=""mailto:ezea28.8.72@gmail.com"">ezea28.8.72@gmail.com</a>
<a href=""mailto:e.ze.a28.8.7.2@gmail.com"">e.ze.a28.8.7.2@gmail.com</a>
<a href=""mailto:e.z.e.a.28.872@gmail.com"">e.z.e.a.28.872@gmail.com</a>
<a href=""mailto:eze.a.28.872@gmail.com"">eze.a.28.872@gmail.com</a>
<a href=""mailto:eze.a2.8.8.7.2@gmail.com"">eze.a2.8.8.7.2@gmail.com</a>
<a href=""mailto:e.z.e.a.288.7.2@gmail.com"">e.z.e.a.288.7.2@gmail.com</a>
<a href=""mailto:eze.a.28872@gmail.com"">eze.a.28872@gmail.com</a>
<a href=""mailto:e.ze.a28.87.2@gmail.com"">e.ze.a28.87.2@gmail.com</a>
<a href=""mailto:e.z.e.a2.887.2@gmail.com"">e.z.e.a2.887.2@gmail.com</a>
<a href=""mailto:ezea.2.8.87.2@gmail.com"">ezea.2.8.87.2@gmail.com</a>
<a href=""mailto:ez.ea.2.8.8.72@gmail.com"">ez.ea.2.8.8.72@gmail.com</a>
<a href=""mailto:eze.a2.8.872@gmail.com"">eze.a2.8.872@gmail.com</a>
<a href=""mailto:ez.e.a2.8872@gmail.com"">ez.e.a2.8872@gmail.com</a>
<a href=""mailto:e.z.ea2.8.8.72@gmail.com"">e.z.ea2.8.8.72@gmail.com</a>
<a href=""mailto:ez.e.a.2.8.872@gmail.com"">ez.e.a.2.8.872@gmail.com</a>
<a href=""mailto:ezea2.88.72@gmail.com"">ezea2.88.72@gmail.com</a>
<a href=""mailto:e.z.ea28872@gmail.com"">e.z.ea28872@gmail.com</a>
<a href=""mailto:eze.a2.8872@gmail.com"">eze.a2.8872@gmail.com</a>
<a href=""mailto:e.z.ea.2.8.872@gmail.com"">e.z.ea.2.8.872@gmail.com</a>
<a href=""mailto:ez.ea28.872@gmail.com"">ez.ea28.872@gmail.com</a>
<a href=""mailto:eze.a.2.8.872@gmail.com"">eze.a.2.8.872@gmail.com</a>
<a href=""mailto:ez.ea.28.8.72@gmail.com"">ez.ea.28.8.72@gmail.com</a>
<a href=""mailto:ezea2.8.872@gmail.com"">ezea2.8.872@gmail.com</a>
<a href=""mailto:e.z.e.a.2.88.7.2@gmail.com"">e.z.e.a.2.88.7.2@gmail.com</a>
<a href=""mailto:ez.e.a.28872@gmail.com"">ez.e.a.28872@gmail.com</a>
<a href=""mailto:eze.a2.887.2@gmail.com"">eze.a2.887.2@gmail.com</a>
<a href=""mailto:e.z.e.a28872@gmail.com"">e.z.e.a28872@gmail.com</a>
<a href=""mailto:e.z.ea.28.87.2@gmail.com"">e.z.ea.28.87.2@gmail.com</a>
<a href=""mailto:e.z.e.a288.72@gmail.com"">e.z.e.a288.72@gmail.com</a>
<a href=""mailto:e.ze.a.28.872@gmail.com"">e.ze.a.28.872@gmail.com</a>
<a href=""mailto:ez.e.a.288.72@gmail.com"">ez.e.a.288.72@gmail.com</a>
<a href=""mailto:ez.e.a2.8.8.72@gmail.com"">ez.e.a2.8.8.72@gmail.com</a>
<a href=""mailto:e.z.e.a28.87.2@gmail.com"">e.z.e.a28.87.2@gmail.com</a>
<a href=""mailto:e.z.ea.2.88.7.2@gmail.com"">e.z.ea.2.88.7.2@gmail.com</a>
<a href=""mailto:ez.e.a28872@gmail.com"">ez.e.a28872@gmail.com</a>
<a href=""mailto:e.zea.28.8.7.2@gmail.com"">e.zea.28.8.7.2@gmail.com</a>
<a href=""mailto:e.zea2.887.2@gmail.com"">e.zea2.887.2@gmail.com</a>
<a href=""mailto:e.z.ea.2.8872@gmail.com"">e.z.ea.2.8872@gmail.com</a>
<a href=""mailto:ezea.28.872@gmail.com"">ezea.28.872@gmail.com</a>
<a href=""mailto:ezea.2.8872@gmail.com"">ezea.2.8872@gmail.com</a>
<a href=""mailto:e.ze.a.28.8.7.2@gmail.com"">e.ze.a.28.8.7.2@gmail.com</a>
<a href=""mailto:ezea.28872@gmail.com"">ezea.28872@gmail.com</a>
<a href=""mailto:eze.a.2887.2@gmail.com"">eze.a.2887.2@gmail.com</a>
<a href=""mailto:ez.ea.2.887.2@gmail.com"">ez.ea.2.887.2@gmail.com</a>
<a href=""mailto:e.z.ea.2.8.8.72@gmail.com"">e.z.ea.2.8.8.72@gmail.com</a>
<a href=""mailto:ezea.288.7.2@gmail.com"">ezea.288.7.2@gmail.com</a>
<a href=""mailto:e.z.ea2.8.87.2@gmail.com"">e.z.ea2.8.87.2@gmail.com</a>
<a href=""mailto:e.z.e.a.28.8.72@gmail.com"">e.z.e.a.28.8.72@gmail.com</a>
<a href=""mailto:ez.ea.288.72@gmail.com"">ez.ea.288.72@gmail.com</a>
<a href=""mailto:e.z.ea.2.887.2@gmail.com"">e.z.ea.2.887.2@gmail.com</a>
<a href=""mailto:ez.e.a.2.887.2@gmail.com"">ez.e.a.2.887.2@gmail.com</a>
<a href=""mailto:e.zea.2.88.7.2@gmail.com"">e.zea.2.88.7.2@gmail.com</a>
<a href=""mailto:e.zea.2.8872@gmail.com"">e.zea.2.8872@gmail.com</a>
<a href=""mailto:e.z.ea2.88.7.2@gmail.com"">e.z.ea2.88.7.2@gmail.com</a>
<a href=""mailto:e.ze.a.2.88.7.2@gmail.com"">e.ze.a.2.88.7.2@gmail.com</a>
<a href=""mailto:ez.ea28.8.7.2@gmail.com"">ez.ea28.8.7.2@gmail.com</a>
<a href=""mailto:ezea.2.8.8.72@gmail.com"">ezea.2.8.8.72@gmail.com</a>
<a href=""mailto:eze.a2.88.7.2@gmail.com"">eze.a2.88.7.2@gmail.com</a>"
3hZBsEUB,CS50P - PSET3_Fuel.2.py,nikolask,Python,Sunday 13th of August 2023 11:32:18 AM CDT,"# https://cs50.harvard.edu/python/2022/psets/3/fuel/
# without raising a ValueError in try

def main():
    outcome = round(fraction() * 100)
    if outcome <= 1:
        print(""E"")
    elif outcome >= 99:
        print(""F"")
    else:
        print(f""{outcome}%"")

def fraction():
    while True:
        fraction = input(""Fraction: "")
        try:
            numerator = int(fraction.split(sep=""/"")[0])
            denominator = int(fraction.split(sep=""/"")[1])
            # if numerator > denominator:
            #     raise ValueError
            if numerator <= denominator:
                return numerator / denominator
        except (ValueError, ZeroDivisionError):
            pass


main()"
j0ypNCK3,Fix tool level,hankhuang502,Lua,Sunday 13th of August 2023 11:06:18 AM CDT,"-- MEWarehouse.lua
-- Author: Scott Adkins <adkinss@gmail.com> (Zucanthor)
-- Published: 2021-09-21
--
-- This program monitors work requests for the Minecolonies Warehouse and
-- tries to fulfill requests from the Refined Storage network. If the
-- ME network doesn't have enough items and a crafting pattern exists, a
-- crafting job is scheduled to restock the items in order to fulfill the
-- work request.  The script will continuously loop, monitoring for new
-- requests and checking on crafting jobs to fulfill previous requests.

-- The following is required for setup:
--   * 1 ComputerCraft Computer
--   * 1 or more ComputerCraft MonitoME (recommend 3x3 monitors)
--   * 1 Advanced Peripheral Colony Integrator
--   * 1 Advanced Peripheral ME Bridge
--   * 1 Chest or other storage container
-- Attach an ME Cable from the ME network to the ME Bridge. Connect the
-- storage container to the Minecolonies Warehouse Hut block. One idea is/
-- to set up a second ME network attached to the Warehouse Hut using an
-- External Storage connector and then attach an Importer for that network
-- to the storage container.

-- THINGS YOU CAN CUSTOMIZE IN THIS PROGRAM:
-- Line 59: Specify the side storage container is at.
-- Line 66: Name of log file for storing JSON data of all open requests.
-- Lines 231+: Any items you find that should be manually provided.
-- Line 373: Time in seconds between work order scans.

----------------------------------------------------------------------------
-- INITIALIZATION
----------------------------------------------------------------------------

-- Initialize Monitor
-- A future update may allow for multiple monitors. This would allow one
-- monitor to be used for logging and another to be used for work requests.
local monitor = peripheral.find(""monitor"")
if not monitor then error(""Monitor not found."") end
monitor.setTextScale(0.5)
monitor.clear()
monitor.setCursorPos(1, 1)
monitor.setCursorBlink(false)
print(""Monitor initialized."")

-- Initialize ME Bridge
local bridge = peripheral.find(""meBridge"")
if not bridge then error(""ME Bridge not found."") end
print(""ME Bridge initialized."")

-- Initialize Colony Integrator
local colony = peripheral.find(""colonyIntegrator"")
if not colony then error(""Colony Integrator not found."") end
if not colony.isInColony then error(""Colony Integrator is not in a colony."") end
print(""Colony Integrator initialized."")

-- Point to location of chest or storage container
-- A future update may autodetect where the storage container is and error
-- out if no storage container is found.
local storage = ""top""
print(""Storage initialized."")

-- Name of log file to capture JSON data from the open requests.  The log can
-- be too big to edit within CC, which may require a ""pastebin put"" if you want
-- to look at it.  Logging could be improved to only capture Skipped items,
-- which in turn will make log files smaller and edittable in CC directly.
local logFile = ""MEWarehouse.log""

----------------------------------------------------------------------------
-- FUNCTIONS
----------------------------------------------------------------------------

-- Prints to the screen one row after another, scrolling the screen when
-- reaching the bottom. Acts as a normal display where text is printed in
-- a standard way. Long lines are not wrapped and newlines are printed as
-- spaces, both to be addressed in a future update.
-- NOTE: No longer used in this program.
function mPrintScrollable(mon, ...)
    w, h = mon.getSize()
    x, y = mon.getCursorPos()

    -- Blink the cursor like a normal display.
    mon.setCursorBlink(true)

    -- For multiple strings, append them with a space between each.
    for i = 2, #arg do t = t.."" ""..arg[i] end
    mon.write(arg[1])
    if y >= h then
        mon.scroll(1)
        mon.setCursorPos(1, y)
    else
        mon.setCursorPos(1, y+1)
    end
end

-- Prints strings left, centered, or right justified at a specific row and
-- specific foreground/background color.
function mPrintRowJustified(mon, y, pos, text, ...)
    w, h = mon.getSize()
    fg = mon.getTextColor()
    bg = mon.getBackgroundColor()

    if pos == ""left"" then x = 1 end
    if pos == ""center"" then x = math.floor((w - #text) / 2) end
    if pos == ""right"" then x = w - #text end

    if #arg > 0 then mon.setTextColor(arg[1]) end
    if #arg > 1 then mon.setBackgroundColor(arg[2]) end
    mon.setCursorPos(x, y)
    mon.write(text)
    mon.setTextColor(fg)
    mon.setBackgroundColor(bg)
end

-- Utility function that returns true if the provided character is a digit.
-- Yes, this is a hack and there are better ways to do this.  Clearly.
function isdigit(c)
    if c == ""0"" then return true end
    if c == ""1"" then return true end
    if c == ""2"" then return true end
    if c == ""3"" then return true end
    if c == ""4"" then return true end
    if c == ""5"" then return true end
    if c == ""6"" then return true end
    if c == ""7"" then return true end
    if c == ""8"" then return true end
    if c == ""9"" then return true end
    return false
end

-- Utility function that displays current time and remaining time on timer.
-- For time of day, yellow is day, orange is sunset/sunrise, and red is night.
-- The countdown timer is orange over 15s, yellow under 15s, and red under 5s.
-- At night, the countdown timer is red and shows PAUSED insted of a time.
function displayTimer(mon, t)
    now = os.time()

    cycle = ""day""
    cycle_color = colors.orange
    if now >= 4 and now < 6 then
        cycle = ""sunrise""
        cycle_color = colors.orange
    elseif now >= 6 and now < 18 then
        cycle = ""day""
        cycle_color = colors.yellow
    elseif now >= 18 and now < 19.5 then
        cycle = ""sunset""
        cycle_color = colors.orange
    elseif now >= 19.5 or now < 5 then
        cycle = ""night""
        cycle_color = colors.red
    end

    timer_color = colors.orange
    if t < 15 then timer_color = colors.yellow end
    if t < 5 then timer_color = colors.red end

    mPrintRowJustified(mon, 1, ""left"", string.format(""Time: %s [%s]    "", textutils.formatTime(now, false), cycle), cycle_color)
    if cycle ~= ""night"" then mPrintRowJustified(mon, 1, ""right"", string.format(""    Remaining: %ss"", t), timer_color)
    else mPrintRowJustified(mon, 1, ""right"", ""    Remaining: PAUSED"", colors.red) end
end

-- Scan all open work requests from the Warehouse and attempt to satisfy those
-- requests.  Display all activity on the monitor, including time of day and the
-- countdown timer before next scan.  This function is not called at night to
-- save on some ticks, as the colonists are in bed anyways.  Items in red mean
-- work order can't be satisfied by Refined Storage (lack of pattern or lack of
-- required crafting ingredients).  Yellow means order partially filled and a
-- crafting job was scheduled for the rest.  Green means order fully filled.
-- Blue means the Player needs to manually fill the work order.  This includes
-- equipment (Tools of Class), NBT items like armor, weapons and tools, as well
-- as generic requests ike Compostables, Fuel, Food, Flowers, etc.
function scanWorkRequests(mon, me, chest)
    -- Before we do anything, prep the log file for this scan.
    -- The log file is truncated each time this function is called.
    file = fs.open(logFile, ""w"")
    print(""\nScan starting at"", textutils.formatTime(os.time(), false) .. "" ("" .. os.time() .."")."")

    -- We want to keep three different lists so that they can be
    -- displayed on the monitor in a more intelligent way.  The first
    -- list is for the Builder requests.  The second list is for the
    -- non-Builder requests.  The third list is for any armor, tools
    -- and weapons requested by the colonists.
    builder_list = {}
    nonbuilder_list = {}
    equipment_list = {}

    -- Scan ME for all items in its network. Ignore items with NBT data.
    -- If a Builder needs any items with NBT data, this function will need
    -- to be updated to not ignore those items.
    items = me.listItems()
    item_array = {}
    for index, item in ipairs(items) do
        item_array[item.name] = item.amount
        -- print(item.name, item.amount)
        -- sleep(0.01)
    end

    -- Scan the Warehouse for all open work requests. For each item, try to
    -- provide as much as possible from RS, then craft whatever is needed
    -- after that. Green means item was provided entirely. Yellow means item
    -- is being crafted. Red means item is missing crafting recipe.
    workRequests = colony.getRequests()
    -- file.write(textutils.serialize(workRequests))
    for w in pairs(workRequests) do
        name = workRequests[w].name
        item = workRequests[w].items[1].name
        target = workRequests[w].target
        desc = workRequests[w].desc
        needed = workRequests[w].count
        provided = 0

        target_words = {}
        target_length = 0
        for word in target:gmatch(""%S+"") do
            table.insert(target_words, word)
            target_length = target_length + 1
        end

        if target_length >= 3 then target_name = target_words[target_length-2] .. "" "" .. target_words[target_length]
        else target_name = target end

        target_type = """"
        target_count = 1
        repeat
            if target_type ~= """" then target_type = target_type .. "" "" end
            target_type = target_type .. target_words[target_count]
            target_count = target_count + 1
        until target_count > target_length - 3
        -- determine the level of the tool
        level = ""Any Level""
        if string.find(desc, ""of class"") then
            if string.find(desc, ""with maximal level:Leather"") then level = ""Leather"" end
            if string.find(desc, ""with maximal level:Gold"") then level = ""Gold"" end
            if string.find(desc, ""with maximal level:Chain"") then level = ""Chain"" end
            if string.find(desc, ""with maximal level:Wood or Gold"") then level = ""Wood or Gold"" end
            if string.find(desc, ""with maximal level:Stone"") then level = ""Stone"" end
            if string.find(desc, ""with maximal level:Iron"") then level = ""Iron"" end
            if string.find(desc, ""with maximal level:Diamond"") then level = ""Diamond"" end
            new_name = level .. "" "" .. name
            if level == ""Any Level"" then new_name = name .. "" of any level"" end
            new_target = target_type .. "" "" .. target_name
            equipment = { name=new_name, target=new_target, needed=needed, provided=provided, color=color}
            table.insert(equipment_list, equipment)
        elseif string.find(target, ""Builder"") then
            builder = { name=name, item=item, target=target_name, needed=needed, provided=provided, color=color }
            table.insert(builder_list, builder)
        else
            new_target = target_type .. "" "" .. target_name
            if target_length < 3 then
                new_target = target
            end
            nonbuilder = { name=name, target=new_target, needed=needed, provided=provided, color=color }
            table.insert(nonbuilder_list, nonbuilder)
        end
        -- 
        requestTool = 0
        useME = 1
        if string.find(desc, ""Tool of class"") then requestTool = 1 end
        -- if string.find(name, ""Hoe"") then useME = 0 end
        -- if string.find(name, ""Shovel"") then useME = 0 end
        -- if string.find(name, ""Axe"") then useME = 0 end
        -- if string.find(name, ""Pickaxe"") then useME = 0 end
        -- string.find(name, ""Bow"") then useME = 0 end
        -- string.find(name, ""Sword"") then useME = 0 end
        -- string.find(name, ""Shield"") then useME = 0 end
        -- string.find(name, ""Helmet"") then useME = 0 end
        -- if string.find(name, ""Leather Cap"") then useME = 0 end
        -- string.find(name, ""Chestplate"") then useME = 0 end
        -- if string.find(name, ""Tunic"") then useME = 0 end
        -- string.find(name, ""Pants"") then useME = 0 end
        -- string.find(name, ""Leggings"") then useME = 0 end
        -- string.find(name, ""Boots"") then useME = 0 end
        -- if name == ""Rallying Banner"" then useME = 0 end --bugged in alpha versions
        -- if name == ""Crafter"" then useME = 0 end
        -- if name == ""Compostable"" then useME = 0 end
        -- if name == ""Fertilizer"" then useME = 0 end
        -- if name == ""Flowers"" then useME = 0 end
        -- if name == ""Food"" then useME = 0 end
        -- if name == ""Fuel"" then useME = 0 end
        -- if name == ""Smeltable Ore"" then useME = 0 end
        -- if name == ""Stack List"" then useME = 0 end
        if requestTool == 1 then
           item = ""minecraft:"" .. string.lower(level) .. ""_"" .. name
        end
        color = colors.blue
        if useME == 1 or then
            if item_array[item] then
                provided = me.exportItemToPeripheral({name=item, count=needed}, chest)
                -- print(err)
                -- print(""hello"")
            end
            -- print(item)
            color = colors.green
            if provided < needed then
                if me.isItemCrafting({name=item}) then
                    color = colors.yellow
                    print(""[Crafting]"", item)
                else
                    if me.craftItem({name=item, count=needed}) then
                        color = colors.yellow
                        print(""[Scheduled]"", needed, ""x"", item)
                    else
                        color = colors.red
                        print(""[Failed]"", item)
                    end
                end
            end
        else
            nameString = name .. "" ["" .. target .. ""]""
            print(""[Skipped]"", nameString)
        end

        
    end

    -- Show the various lists on the attached monitor.
    row = 3
    mon.clear()

    header_shown = 0
    for e in pairs(equipment_list) do
        equipment = equipment_list[e]
        if header_shown == 0 then
            mPrintRowJustified(mon, row, ""center"", ""Equipment"")
            header_shown = 1
            row = row + 1
        end
        text = string.format(""%d %s"", equipment.needed, equipment.name)
        mPrintRowJustified(mon, row, ""left"", text, equipment.color)
        mPrintRowJustified(mon, row, ""right"", "" "" .. equipment.target, equipment.color)
        row = row + 1
    end

    header_shown = 0
    for b in pairs(builder_list) do
        builder = builder_list[b]
        if header_shown == 0 then
            if row > 1 then row = row + 1 end
            mPrintRowJustified(mon, row, ""center"", ""Builder Requests"")
            header_shown = 1
            row = row + 1
        end
        text = string.format(""%d/%s"", builder.provided, builder.name)
        mPrintRowJustified(mon, row, ""left"", text, builder.color)
        mPrintRowJustified(mon, row, ""right"", "" "" .. builder.target, builder.color)
        row = row + 1
    end

    header_shown = 0
    for n in pairs(nonbuilder_list) do
        nonbuilder = nonbuilder_list[n]
        if header_shown == 0 then
            if row > 1 then row = row + 1 end
            mPrintRowJustified(mon, row, ""center"", ""Nonbuilder Requests"")
            header_shown = 1
            row = row + 1
        end
        text = string.format(""%d %s"", nonbuilder.needed, nonbuilder.name)
        if isdigit(nonbuilder.name:sub(1,1)) then
            text = string.format(""%d/%s"", nonbuilder.provided, nonbuilder.name)
        end
        mPrintRowJustified(mon, row, ""left"", text, nonbuilder.color)
        mPrintRowJustified(mon, row, ""right"", "" "" .. nonbuilder.target, nonbuilder.color)
        row = row + 1
    end

    if row == 3 then mPrintRowJustified(mon, row, ""center"", ""No Open Requests"") end
    print(""Scan completed at"", textutils.formatTime(os.time(), false) .. "" ("" .. os.time() .."")."")
    file.close()
end

----------------------------------------------------------------------------
-- MAIN
----------------------------------------------------------------------------

-- Scan for requests periodically. This will catch any updates that were
-- triggered from the previous scan. Right-clicking on the monitor will
-- trigger an immediate scan and reset the timer. Unfortunately, there is
-- no way to capture left-clicks on the monitor.
local time_between_runs = 30
local current_run = time_between_runs
scanWorkRequests(monitor, bridge, storage)
displayTimer(monitor, current_run)
local TIMER = os.startTimer(1)

while true do
    local e = {os.pullEvent()}
    if e[1] == ""timer"" and e[2] == TIMER then
        now = os.time()
        if now >= 5 and now < 19.5 then
            current_run = current_run - 1
            if current_run <= 0 then
                scanWorkRequests(monitor, bridge, storage)
                current_run = time_between_runs
            end
        end
        displayTimer(monitor, current_run)
        TIMER = os.startTimer(1)
    elseif e[1] == ""monitor_touch"" then
        os.cancelTimer(TIMER)
        scanWorkRequests(monitor, bridge, storage)
        current_run = time_between_runs
        displayTimer(monitor, current_run)
        TIMER = os.startTimer(1)
    end
end
"
stJTxeka,"Task 1, ex. 4",Sweet1123,Python,Sunday 13th of August 2023 11:02:31 AM CDT,"import os
import sys
from datetime import datetime, timedelta
from pyspark import SparkContext, SparkConf
from pyspark.sql import SQLContext
import pyspark.sql.functions as F

os.environ['HADOOP_CONF_DIR'] = '/etc/hadoop/conf'
os.environ['YARN_CONF_DIR'] = '/etc/hadoop/conf'
os.environ['JAVA_HOME']='/usr'
os.environ['SPARK_HOME'] ='/usr/lib/spark'
os.environ['PYTHONPATH'] ='/usr/local/lib/python3.8'
 
import findspark
findspark.init()
findspark.find() 
 
def main():
        date = sys.argv[1]
        depth = int(sys.argv[2])
        threshold = int(sys.argv[3])
        input_path_events = sys.argv[4]
        input_path_tags = sys.argv[5]
        output_path = sys.argv[6]

        # Создание контекста Spark и именование джобы
        conf = SparkConf().setAppName(f""VerifiedTagsCandidatesJob-{date}-d{depth}-cut{threshold}"")
        sc = SparkContext(conf=conf)
        sql = SQLContext(sc)
        
        # Чтение входных данных
        paths = input_paths(date, depth, input_path_events)
        messages = sql.read.parquet(*paths)
        all_tags = messages.where(""event.message_channel_to is not null"") \
            .selectExpr([""event.message_from as user"", ""explode(event.tags) as tag""]) \
            .groupBy(""tag"").agg(F.expr(""count(distinct user) as suggested_count"")) \
            .where(f""suggested_count >= {threshold}"")
        verified_tags = sql.read.parquet(input_path_tags)
        candidates = all_tags.join(verified_tags, ""tag"", ""left_anti"")

        # Запись выходных данных
        candidates.write.mode(""overwrite"").parquet(output_path)
    

def input_paths(date, depth, input_path):
    dt = datetime.strptime(date, '%Y-%m-%d')
    return [f""{input_path}/date={(dt-timedelta(days=x)).strftime('%Y-%m-%d')}/event_type=message"" for x in range(depth)]

    
if __name__ == ""__main__"":
    main()"
dN85d3Lx,The Lion of Allah: Hamza Ibn Abdul Mutalib (RA),AhmadXploit,Dart,Sunday 13th of August 2023 10:33:06 AM CDT,"[
  {
	""imgUrl"": ""https://res.cloudinary.com/dybvjvrib/image/upload/v1691942620/Story/hamzah_j4glhq.webp"",
    ""name"": ""The Lion of Allah: Hamza Ibn Abdul Mutalib (RA)"",
	""author"": ""Anonymous"",
	""score"": ""2.13"",
	""review"": ""107.3"",
	""view"": ""2.7"",
    ""desc"": ""   In the army of Islam there have been a number of brave and self-sacrificing officers and strong and powerful champions but the bravery of Hamzah bin Abdul Muttalib is recorded in the pages of history and in fact constitutes the golden leaves of the history of the battles of Islam. The Messenger of Allah, Muhammad (may Allah bless him and his Ahlel-Bayt), though safe under the protection of his uncle, Abu Talib, was not immune from harassment by the infidels. Whenever they found an opportunity for baiting him, they didn’t miss it. Hamza Ibn Abdul Mutalib Ibn Hashim Ibn Manaf was born in Mecca before the Prophet’s birth in two years so he was very close to the Prophet Muhammad (SAW) . He was also the brother of the Prophet by feeding; (the same woman had feed them both, she was Halima Al-Saadiya). In accordance with historical accounts, Hazrat Musleh-e-Maud(ra) has narrated the incident of Hazrat Hamza’s acceptance of Islam in his own style. I will narrate its summary [before you] as well as present some of its details. A person ought to hear this incident and ponder over the reasons as to why Hazrat Hamza(ra) accepted Islam, and how he was overcome with jealousy for the honour of the Holy Prophet (SAW) at the time when Abu Jahl acted unjustly toward the Prophet (SAW). \n \n   Once,the Holy Prophet (SAW) was sitting on a rock between the hills of Safa and Marwa. He was most certainly pondering over how to establish the unity of God Almighty in the world when, in the meanwhile, Abu Jahl approached him. As soon as he arrived, he said, ''O Muhammad (SAW)! Why do you not refrain from spreading your message?'' Following this statement, Abu Jahl began to verbally abuse the Prophet in a most vile manner. The Holy Prophet (SAW) quietly continued to listen to Abu Jahl’s abuse and tolerated him. He did not utter a single word in reply.Hazrat Hamza’s house was right in front of the place where the Holy Prophet (SAW) was sitting and where Abu Jahl had abused him.Hazrat Hamza (ra) had not yet accepted Islam. That day, when Abu Jahl had cursed the Holy Prophet (SAW) and treated him harshly, he was away hunting. However, it so happened that when Abu Jahl was acting in this manner, one of the female servants of Hazrat Hamza(ra) was standing at the door, observing this scene. When Abu Jahl repeatedly attacked the Holy Prophet (SAW) and hurled innumerable curses at him, the Prophet quietly and peacefully tolerated his abuse. The female servant stood at the door and continued to observe this scene. When Hazrat Hamza(ra) returned from his hunt that evening and came home, he disembarked from his mount with his bow and arrow in hand, in a manner of demonstrating his courage and pride. Seeing this, the female servant, who had suppressed her anger and sorrow for a long time, approached Hazrat Hamza(ra) and passionately said: ''Do you have no shame that you walk around acting brave?'' Hearing this, Hazrat Hamza(ra) became perplexed and asked her in astonishment what the matter was. The female servant said: ''The matter is that your nephew, Muhammad (SAW), was sitting here when Abu Jahl approached him, and began to attack and hurl abuse at him, and then Abu Jahl slapped him on the face. However, Muhammad (SAW) did not make as much as a sound in response to this and quietly continued to bear this. Abu Jahl continued to curse him until he became tired and then left. However, I saw that Muhammad (SAW) did not respond to any of his actions. You walk around with great courage and have returned from your hunt with great pride. Are you not ashamed that your nephew has been treated in this manner in your presence?''Hazrat Hamza(ra) had not yet accepted Islam. One of the reasons for this was that he was counted among the leaders of Quraish and he was also not willing to accept Islam due to [his] position in the tribe, even though he believed the Prophet (SAW) to be true. \n \n   However, until that time, Hazrat Hamza(ra) was unprepared to sacrifice his status, honour and prominence for the sake of religion. Nevertheless, when he heard this incident from his female slave, his eyes became bloodshot and he became indignant for his family’s honour. Hence, without taking a moment of rest, he marched toward the Ka‘ba in that very state of anger. First, he performed a circuit around the Ka‘ba and following this he marched towards the gathering in which Abu Jahl was present.There, Abu Jahl was narrating the incident with great arrogance, pride and boastfulness. He mentioned that earlier that day he had abused Muhammad (SAW) and treated him in a vile manner. When Hazrat Hamza (RA) reached this gathering, he forcefully struck his bow against the head of Abu Jahl and said: ''You claim to be brave and are telling people that you disgraced Muhammad (SAW) in such manner and that he did not make as much as a sound. Now I will disgrace you. If you have the courage, speak before me.'' At that time, Abu Jahl was considered to be a king and he was a chief of [their] nation. He was similar to the pharaoh. When his friends saw this, they passionately got up and tried to attack Hazrat Hamza (SAW) . However, Abu Jahl, who had become awestruck due to the Holy Prophet(sa) quietly tolerating his abuse and due to the bravery and courage of Hazrat Hamza(ra), intervened and stopped them from attacking Hazrat Hamza(ra). He said, ''Let him be. The fact of the matter is that I committed an injustice and Hamza is in the right.'' Hazrat Musleh-e-Maud(ra) further writes in his own manner that when Muhammad(sa) returned home from the hills of Safa and Marwa, he was repeating in his heart that his duty was not to fight, but to patiently tolerate all abuse. \n \n   However, until that time, Hazrat Hamza(ra) was unprepared to sacrifice his status, honour and prominence for the sake of religion. Nevertheless, when he heard this incident from his female slave, his eyes became bloodshot and he became indignant for his family’s honour. Hence, without taking a moment of rest, he marched toward the Ka‘ba in that very state of anger. First, he performed a circuit around the Ka‘ba and following this he marched towards the gathering in which Abu Jahl was present.There, Abu Jahl was narrating the incident with great arrogance, pride and boastfulness. He mentioned that earlier that day he had abused Muhammad (SAW) and treated him in a vile manner. When Hazrat Hamza (RA) reached this gathering, he forcefully struck his bow against the head of Abu Jahl and said: ''You claim to be brave and are telling people that you disgraced Muhammad (SAW) in such manner and that he did not make as much as a sound. Now I will disgrace you. If you have the courage, speak before me.'' At that time, Abu Jahl was considered to be a king and he was a chief of [their] nation. He was similar to the pharaoh. When his friends saw this, they passionately got up and tried to attack Hazrat Hamza (SAW) . However, Abu Jahl, who had become awestruck due to the Holy Prophet(sa) quietly tolerating his abuse and due to the bravery and courage of Hazrat Hamza(ra), intervened and stopped them from attacking Hazrat Hamza(ra). He said, ''Let him be. The fact of the matter is that I committed an injustice and Hamza is in the right.'' Hazrat Musleh-e-Maud(ra) further writes in his own manner that when Muhammad(sa) returned home from the hills of Safa and Marwa, he was repeating in his heart that his duty was not to fight, but to patiently tolerate all abuse. \n \n   In the battle of Uhud, she slaked her thirst for vengeance which had given her no rest since the battle of Badr. Hinda, the wife of Abu Sufyan and the mother of Muawiya, nursed a grudge against Hamzah and was determined to take her father’s revenge on the Muslims at any cost. Wahshi, an Ethiopian warrior, was the slave of Jabir Mut’am and an uncle of Jibir had also been killed in the Battle of Badr. He (Wahshi) had been appointed by Hinda to help achieve her object by hook or by crook. She asked him to kill one of the three persons (viz. the Prophet, Imam Ali or Hamzah) so that she might avenge her father’s death. The Ethiopian warrior said in reply: ''I cannot approach Muhammad at all, because his companions are nearer to him than anyone else. Ali too is extraordinarily vigilant in the battlefield. However, Hamzah is so furious that, while fighting, he does not pay any attention to any other side and it is possible that I may be able to make him fall by some trick or by taking him unawares''. Hinda was contented with this and promised that if he was successful in performing the job she would set him free. \n \n   Some believe that Jibir made this promise with his slave (Wahshi) as his (Jibir’s) uncle had been killed in the Battle of Badr. Wahshi, the slave, says: ''On the Day of Uhud I was pursuing Hamzah. He was attacking the centre of the army like a ferocious lion. He killed every one whom he could approach. I hid myself behind the trees and stones, so that he could not see me. He was too busy in fighting. I came out of ambush. Being an Ethiopian, I used to throw my weapon like them (i.e. like the Ethiopians) and it seldom missed the target. I, therefore, threw my javelin towards him from a specific distance after moving it in a particular manner. The weapon fell on his flank and came out from between his two legs. He wanted to attack me but severe pain prevented him from doing so. He remained in the same condition till his soul departed from his body. Then I approached him very carefully and having taken out my weapon from his body returned to the army of Quraysh and waited for my freedom. In the battle of Uhud the Muslims suffered a lot. Hinda and the other harpies she had brought with her from Makka, mutilated the bodies of the slain Muslims. Hinda cut open Hamzah’s abdomen, plucked out his liver and chewed it up. Muhammad ibn Umar Waqidi, the historian, says that she made a fire in the battlefield, roasted Hamzah’s heart and liver and ate them. Not satisfied with this, she cut the limbs, the ears and the nose of Hamzah, strung them into a ''necklace,'' and entered Makka wearing it as a ''trophy'' of victory. When the Messenger of Allah saw how his uncle and foster brother, Hamza, was mutilated, he was extremely grieved. \n \n   After the Battle of Uhud, I continued to live in Makkah for quite a long time until the Muslims conquered Makkah. I then ran away to Ta’if, but soon Islam reach that area as well. I heard that however grave the crime of a person might be, the Prophet forgave him. I, therefore, reached the Prophet with Shahadatayn on my lips (i.e., I testify that there is no god but Allah and I also testify that Muhammad is His Prophet). The Prophet saw me and said ''Are you the same Wahshi, an Ethiopian?'' I replied in the affirmative. Thereupon he said: ''How did you kill Hamzah?'' I gave an account of the matter. The Prophet Muhammad (SAW) was moved and said: ''I should not see your face until you are alive, because the heart-rending calamity fell upon my uncle at your hands''. It was the same great spirit of the Prophet of Islam which made him set this man free although he could execute him on many grounds. Wahshi says: ''So long as the Prophet was alive I kept myself hidden from him. Ibn Mas‘ud said: We have never seen the Messenger of Allah weeping so much as he was for Hamza bin ‘Abdul Muttalib. He directed him towards Al-Qiblah, then he stood at his funeral and sobbed his heart out. The sight of the martyrs was extremely horrible and heart-breaking. Describing Hamza’s funeral, Khabbab said: ''No shroud long enough was available for Hamza except a white-darkish garment. When they covered his head with it, it was too short to cover his feet. Similarly if they covered his feet his head would be revealed. Finally they covered his head with it and put some plant called ‘Al-Idhkhir’ to cover his feet.'' May God be pleased with him, and bless him.""
  }
]"
t1Eejhwi,Untitled,skimono,C++,Sunday 13th of August 2023 09:47:52 AM CDT,"﻿#pragma GCC optimize(""Ofast"") // ������������ ���������, �� ��� ������
#pragma GCC optimize(""no-stack-protector"") //�����
#pragma GCC optimize(""unroll-loops"") // � ���� ���� ��� �� 100 �� ������ ����� � ��������� �� ��� � 100 ��� �� ������ ��������
#pragma GCC target(""sse,sse2,sse3,ssse3,popcnt,abm,mmx,tune=native"") // ��� ����� ����� �� ��� 03 02 ��������� � ������ ������� �������� ��� ���� ������������
#pragma GCC optimize(""fast-math"")
#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <cmath>
#include <stack>
#include <iomanip>
#include <fstream>
#include <string>
#include <set>
#include <deque>
#include <queue>
#include <map>
#include <bitset>
#include <random>
#include <list>
#include <unordered_map>
#include <unordered_set>
#include <cassert>

using namespace std;

typedef long long ll;
typedef short sh;
typedef unsigned long long ull;
typedef long double ld;
typedef string str;
//typedef __int128 ultraint;
#define sqrt sqrtl
#define F first
#define S second
#define endl '\n'
#define all(vc666) vc666.begin(), vc666.end()
#define allr(vc666) vc666.rbegin(), vc666.rend()
#define int long long
#define degug(x) cerr (#x) << "" "" << (x) << endl;

const ll INF = 3e12;
const ll inf = 1e12 + 7;
const ll ONE = 1;
const ll mod = 1e9 + 7;
const ll m1 = 1e9 + 575179;
const ll m2 = 1e9 + 87;
const ll LG = 19;
const ll k = 347;
ld EPS = 1e-7;
ld PI = 3.1415926535897932384;
ld phi = (sqrt(5) + 1.0) / 2.0;
mt19937_64 gen(rand());

struct Node {
    int mn = INF, push = 0, id = -1;
};
struct SegTree {
    vector <Node> t;
    int n;
    SegTree(int _n) {
        n = 4 * _n;
        t.resize(n);
    }
    void unite(const Node& l, const Node& r, Node& m) {
        if (l.mn < r.mn) {
            m.mn = l.mn;
            m.id = l.id;
        }
        else {
            m.mn = r.mn;
            m.id = r.id;
        }
        m.push = 0;
    }
    void pushUP(int v) {
        t[v].mn += t[v].push;
        if (2 * v + 1 < n) {
            t[2 * v].push += t[v].push;
            t[2 * v + 1].push += t[v].push;
        }
        t[v].push = 0;
    }
    Node query(int v, int tl, int tr, int l, int r) {
        pushUP(v);
        if (tr < l || tl > r) {
            return { INF, 0, -1 };
        }
        else if (l <= tl && r >= tr) {
            return t[v];
        }
        else {
            int m = (tl + tr) / 2;
            Node L = query(2 * v, tl, m, l, r), R = query(2 * v + 1, m + 1, tr, l, r), M;
            unite(L, R, M);
            unite(t[v * 2], t[v * 2 + 1], t[v]);
            return M;
        }
    }
    void update(int v, int tl, int tr, int l, int r, int boost) {
        pushUP(v);
        if (tl > r || tr < l) {
            return;
        }
        else {
            if (tl >= l && tr <= r) {
                t[v].push += boost;
                pushUP(v);
            }
            else {
                int tm = (tl + tr) / 2;
                update(v * 2, tl, tm, l, r, boost);
                update(v * 2 + 1, tm + 1, tr, l, r, boost);
                unite(t[v * 2], t[v * 2 + 1], t[v]);
            }
        }
    }
    void build(int v, int tl, int tr, vector <int>& w) {
        if (tl == tr) {
            t[v].mn = w[tl];
            t[v].id = tl;
        }
        else {
            int tm = (tl + tr) / 2;
            build(2 * v, tl, tm, w);
            build(2 * v + 1, tm + 1, tr, w);
            unite(t[v * 2], t[v * 2 + 1], t[v]);
        }
    }
};

void solve() {
    int n, q, i, j, s, t;
    cin >> n >> q >> s >> t;
    s--, t--;
    vector <int> p(q);
    vector <int> w(n);
    for (i = 0; i < q; i++) {
        cin >> p[i];
        p[i]--;
    }
    for (i = 0; i < n; i++) {
        w[i] = inf + i;
    }
    SegTree t1(n), t2(n);
    t1.build(1, 0, n - 1, w);
    reverse(all(w));
    t2.build(1, 0, n - 1, w);
    t1.update(1, 0, n - 1, s, s, abs(p[0] - t) - inf);
    if (s != t) {
        t1.update(1, 0, n - 1, t, t, abs(p[0] - s) - inf);
    }
    t2.update(1, 0, n - 1, s, s, abs(p[0] - t) - inf);
    if (s != t) {
        t2.update(1, 0, n - 1, t, t, abs(p[0] - s) - inf);
    }
    Node res1, res2, el1, el2;
    int u1, u2, ans = INF;
    for (i = 0; i < q - 1; i++) {
        if (p[i + 1] == p[i]) continue;
        res1 = t2.query(1, 0, n - 1, 0, p[i + 1]);
        res2 = t1.query(1, 0, n - 1, p[i + 1], n - 1);
        el1 = t1.query(1, 0, n - 1, p[i], p[i]);
        el2 = t2.query(1, 0, n - 1, p[i], p[i]);
        u1 = res1.mn + (p[i + 1] - res1.id) - (n - res1.id - 1);
        u2 = res2.mn + (res2.id - p[i + 1]) - res2.id;
        t1.update(1, 0, n - 1, p[i], p[i], min(u1, u2) - el1.mn + p[i]);
        t2.update(1, 0, n - 1, p[i], p[i], min(u1, u2) - el2.mn + (n - p[i] - 1));
        t1.update(1, 0, n - 1, 0, p[i] - 1, abs(p[i + 1] - p[i]));
        t1.update(1, 0, n - 1, p[i] + 1, n - 1, abs(p[i + 1] - p[i]));
        t2.update(1, 0, n - 1, 0, p[i] - 1, abs(p[i + 1] - p[i]));
        t2.update(1, 0, n - 1, p[i] + 1, n - 1, abs(p[i + 1] - p[i]));
        if (i == 1) {
            /*for (j = 0; j < n; j++) {
                el1 = t1.query(1, 0, n - 1, j, j);
                cout << el1.mn << "" "" << el1.id << endl;
            }
            for (j = 0; j < n; j++) {
                el2 = t2.query(1, 0, n - 1, j, j);
                cout << el2.mn << "" "" << el2.id << endl;
            }
            for (j = 0; j < n; j++) {
                el1 = t1.query(1, 0, n - 1, j, j);
                el2 = t2.query(1, 0, n - 1, j, j);
                assert(el1.mn - el1.id == el2.mn - (n - el2.id - 1));
                cout << el1.mn - el1.id << "" "" << el2.mn - (n - el2.id - 1) << endl;
            }
            */
        }
    }
    for (i = 0; i < n; i++) {
        el1 = t1.query(1, 0, n - 1, i, i);
        el2 = t2.query(1, 0, n - 1, i, i);
        ans = min(ans, el1.mn - el1.id);
        ans = min(ans, el2.mn - (n - el2.id - 1));
    }
    cout << ans << endl;
}

signed main() {
#ifdef _DEBUG
    freopen(""input.txt"", ""r "", stdin);
    freopen(""output.txt"", ""w"", stdout);
#endif
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    int t = 1;
    //cin >> t;
    while (t--) solve();
}
//Deisgned by skimono"
n3Z9V85a,UI not for blacks,NukeVsCity,Lua,Sunday 13th of August 2023 09:43:18 AM CDT,"local Player = game:GetService(""Players"").LocalPlayer
local Mouse = Player:GetMouse()

local TextService = game:GetService(""TextService"")
local TweenService = game:GetService(""TweenService"")
local RunService = game:GetService(""RunService"")
local InputService = game:GetService(""UserInputService"")
local CoreGuiService = game:GetService(""CoreGui"")
local ContentService = game:GetService(""ContentProvider"")

local Themes = {
	Light = {
		MainFrame = Color3.fromRGB(255,255,255),
		Minimise = Color3.fromRGB(255,255,255),
		MinimiseAccent = Color3.fromRGB(255,255,255),
		Maximise = Color3.fromRGB(255,255,255),
		MaximiseAccent = Color3.fromRGB(255,255,255),
		NavBar = Color3.fromRGB(255, 255, 255),
		NavBarAccent = Color3.fromRGB(255,255,255),
		NavBarInvert = Color3.fromRGB(255,255,255),
		TitleBar = Color3.fromRGB(204, 204, 204),
		TitleBarAccent = Color3.fromRGB(255,255,255),
		Overlay = Color3.fromRGB(204, 204, 204),
		Banner = Color3.fromRGB(204, 204, 204),
		BannerAccent = Color3.fromRGB(255,255,255),
		Content = Color3.fromRGB(255, 255, 255),
		Button = Color3.fromRGB(204, 204, 204),
		ButtonAccent = Color3.fromRGB(255, 255, 255),
		ChipSet = Color3.fromRGB(204, 204, 204),
		ChipSetAccent = Color3.fromRGB(255,255,255),
		DataTable = Color3.fromRGB(204, 204, 204),
		DataTableAccent = Color3.fromRGB(255,255,255),
		Slider = Color3.fromRGB(204, 204, 204),
		SliderAccent = Color3.fromRGB(255,255,255),
		Toggle = Color3.fromRGB(204, 204, 204),
		ToggleAccent = Color3.fromRGB(255, 255, 255),
		Dropdown = Color3.fromRGB(204, 204, 204),
		DropdownAccent = Color3.fromRGB(255, 255, 255),
		ColorPicker = Color3.fromRGB(204, 204, 204),
		ColorPickerAccent = Color3.fromRGB(255,255,255),
		TextField = Color3.fromRGB(255, 255, 255),
		TextFieldAccent = Color3.fromRGB(115, 115, 115),
	},
	Dark = {
		MainFrame = Color3.fromRGB(30,30,30),
		Minimise = Color3.fromRGB(255,106,0),
		MinimiseAccent = Color3.fromRGB(147,59,0),
		Maximise = Color3.fromRGB(25,255,0),
		MaximiseAccent = Color3.fromRGB(0,255,110),
		NavBar = Color3.fromRGB(55,55,55),
		NavBarAccent = Color3.fromRGB(255,255,255),
		NavBarInvert = Color3.fromRGB(235,235,235),
		TitleBar = Color3.fromRGB(55,55,55),
		TitleBarAccent = Color3.fromRGB(255,255,255),
		Overlay = Color3.fromRGB(175,175,175),
		Banner = Color3.fromRGB(55,55,55),
		BannerAccent = Color3.fromRGB(255,255,255),
		Content = Color3.fromRGB(85,85,85),
		Button = Color3.fromRGB(85,85,85),
		ButtonAccent = Color3.fromRGB(255,255,255),
		ChipSet = Color3.fromRGB(235,235,235),
		ChipSetAccent = Color3.fromRGB(85,85,85),
		DataTable = Color3.fromRGB(235,235,235),
		DataTableAccent = Color3.fromRGB(85,85,85),
		Slider = Color3.fromRGB(85,85,85),
		SliderAccent = Color3.fromRGB(235,235,235),
		Toggle = Color3.fromRGB(205,205,205),
		ToggleAccent = Color3.fromRGB(125,125,125),
		Dropdown = Color3.fromRGB(85,85,85),
		DropdownAccent = Color3.fromRGB(235,235,235),
		ColorPicker = Color3.fromRGB(85,85,85),
		ColorPickerAccent = Color3.fromRGB(235,235,235),
		TextField = Color3.fromRGB(175,175,175),
		TextFieldAccent = Color3.fromRGB(255,255,255),
	},
	Mocha = {
		MainFrame = Color3.fromRGB(255,255,255),
		Minimise = Color3.fromRGB(219, 210, 202),
		MinimiseAccent = Color3.fromRGB(219, 210, 202),
		Maximise = Color3.fromRGB(189, 183, 177),
		MaximiseAccent = Color3.fromRGB(189, 183, 177),
		NavBar = Color3.fromRGB(176, 148, 125),
		NavBarAccent = Color3.fromRGB(255,255,255),
		NavBarInvert = Color3.fromRGB(30,30,30),
		TitleBar = Color3.fromRGB(176, 148, 125),
		TitleBarAccent = Color3.fromRGB(255,255,255),
		Overlay = Color3.fromRGB(176, 148, 125),
		Banner = Color3.fromRGB(255,255,255),
		BannerAccent = Color3.fromRGB(176, 148, 125),
		Content = Color3.fromRGB(176, 148, 125),
		Button = Color3.fromRGB(176, 148, 125),
		ButtonAccent = Color3.fromRGB(255,255,255),
		ChipSet = Color3.fromRGB(176, 148, 125),
		ChipSetAccent = Color3.fromRGB(255,255,255),
		DataTable = Color3.fromRGB(176, 148, 125),
		DataTableAccent = Color3.fromRGB(255,255,255),
		Slider = Color3.fromRGB(255,255,255),
		SliderAccent = Color3.fromRGB(176, 148, 125),
		Toggle = Color3.fromRGB(176, 148, 125),
		ToggleAccent = Color3.fromRGB(255,255,255),
		Dropdown = Color3.fromRGB(255,255,255),
		DropdownAccent = Color3.fromRGB(176, 148, 125),
		ColorPicker = Color3.fromRGB(255,255,255),
		ColorPickerAccent = Color3.fromRGB(176, 148, 125),
		TextField = Color3.fromRGB(175,175,175),
		TextFieldAccent = Color3.fromRGB(255,255,255)
	},
	Aqua = {
		MainFrame = Color3.fromRGB(255,255,255),
		Minimise = Color3.fromRGB(219, 210, 202),
		MinimiseAccent = Color3.fromRGB(219, 210, 202),
		Maximise = Color3.fromRGB(189, 183, 177),
		MaximiseAccent = Color3.fromRGB(189, 183, 177),
		NavBar = Color3.fromRGB(116, 112, 140),
		NavBarAccent = Color3.fromRGB(255,255,255),
		NavBarInvert = Color3.fromRGB(30,30,30),
		TitleBar = Color3.fromRGB(116, 112, 140),
		TitleBarAccent = Color3.fromRGB(255,255,255),
		Overlay = Color3.fromRGB(116, 112, 140),
		Banner = Color3.fromRGB(255,255,255),
		BannerAccent = Color3.fromRGB(116, 112, 140),
		Content = Color3.fromRGB(116, 112, 140),
		Button = Color3.fromRGB(116, 112, 140),
		ButtonAccent = Color3.fromRGB(255,255,255),
		ChipSet = Color3.fromRGB(116, 112, 140),
		ChipSetAccent = Color3.fromRGB(255,255,255),
		DataTable = Color3.fromRGB(116, 112, 140),
		DataTableAccent = Color3.fromRGB(255,255,255),
		Slider = Color3.fromRGB(255,255,255),
		SliderAccent = Color3.fromRGB(116, 112, 140),
		Toggle = Color3.fromRGB(116, 112, 140),
		ToggleAccent = Color3.fromRGB(255,255,255),
		Dropdown = Color3.fromRGB(255,255,255),
		DropdownAccent = Color3.fromRGB(116, 112, 140),
		ColorPicker = Color3.fromRGB(255,255,255),
		ColorPickerAccent = Color3.fromRGB(116, 112, 140),
		TextField = Color3.fromRGB(175,175,175),
		TextFieldAccent = Color3.fromRGB(255,255,255)
	},
	Jester = {
		MainFrame = Color3.fromRGB(255,255,255),
		Minimise = Color3.fromRGB(219, 210, 202),
		MinimiseAccent = Color3.fromRGB(219, 210, 202),
		Maximise = Color3.fromRGB(189, 183, 177),
		MaximiseAccent = Color3.fromRGB(189, 183, 177),
		NavBar = Color3.fromRGB(219, 68, 103),
		NavBarAccent = Color3.fromRGB(255,255,255),
		NavBarInvert = Color3.fromRGB(30,30,30),
		TitleBar = Color3.fromRGB(219, 68, 103),
		TitleBarAccent = Color3.fromRGB(255,255,255),
		Overlay = Color3.fromRGB(219, 68, 103),
		Banner = Color3.fromRGB(255,255,255),
		BannerAccent = Color3.fromRGB(219, 68, 103),
		Content = Color3.fromRGB(219, 68, 103),
		Button = Color3.fromRGB(219, 68, 103),
		ButtonAccent = Color3.fromRGB(255,255,255),
		ChipSet = Color3.fromRGB(219, 68, 103),
		ChipSetAccent = Color3.fromRGB(255,255,255),
		DataTable = Color3.fromRGB(219, 68, 103),
		DataTableAccent = Color3.fromRGB(255,255,255),
		Slider = Color3.fromRGB(255,255,255),
		SliderAccent = Color3.fromRGB(219, 68, 103),
		Toggle = Color3.fromRGB(219, 68, 103),
		ToggleAccent = Color3.fromRGB(255,255,255),
		Dropdown = Color3.fromRGB(255,255,255),
		DropdownAccent = Color3.fromRGB(219, 68, 103),
		ColorPicker = Color3.fromRGB(255,255,255),
		ColorPickerAccent = Color3.fromRGB(219, 68, 103),
		TextField = Color3.fromRGB(175,175,175),
		TextFieldAccent = Color3.fromRGB(255,255,255),
	}
}

local Types = {
	""RoundFrame"",
	""Shadow"",
	""Circle"",
	""CircleButton"",
	""Frame"",
	""Label"",
	""Button"",
	""SmoothButton"",
	""Box"",
	""ScrollingFrame"",
	""Menu"",
	""NavBar""
}

local ActualTypes = {
	RoundFrame = ""ImageLabel"",
	Shadow = ""ImageLabel"",
	Circle = ""ImageLabel"",
	CircleButton = ""ImageButton"",
	Frame = ""Frame"",
	Label = ""TextLabel"",
	Button = ""TextButton"",
	SmoothButton = ""ImageButton"",
	Box = ""TextBox"",
	ScrollingFrame = ""ScrollingFrame"",
	Menu = ""ImageButton"",
	NavBar = ""ImageButton""
}

local Properties = {
	RoundFrame = {
		BackgroundTransparency = 1,
		Image = ""http://www.roblox.com/asset/?id=5554237731"",
		ScaleType = Enum.ScaleType.Slice,
		SliceCenter = Rect.new(3,3,297,297)
	},
	SmoothButton = {
		AutoButtonColor = false,
		BackgroundTransparency = 1,
		Image = ""http://www.roblox.com/asset/?id=5554237731"",
		ScaleType = Enum.ScaleType.Slice,
		SliceCenter = Rect.new(3,3,297,297)
	},
	Shadow = {
		Name = ""Shadow"",
		BackgroundTransparency = 1,
		Image = ""http://www.roblox.com/asset/?id=5554236805"",
		ScaleType = Enum.ScaleType.Slice,
		SliceCenter = Rect.new(23,23,277,277),
		Size = UDim2.fromScale(1,1) + UDim2.fromOffset(30,30),
		Position = UDim2.fromOffset(-15,-15)
	},
	Circle = {
		BackgroundTransparency = 1,
		Image = ""http://www.roblox.com/asset/?id=5554831670""
	},
	CircleButton = {
		BackgroundTransparency = 1,
		AutoButtonColor = false,
		Image = ""http://www.roblox.com/asset/?id=5554831670""
	},
	Frame = {
		BackgroundTransparency = 1,
		BorderSizePixel = 0,
		Size = UDim2.fromScale(1,1)
	},
	Label = {
		BackgroundTransparency = 1,
		Position = UDim2.fromOffset(5,0),
		Size = UDim2.fromScale(1,1) - UDim2.fromOffset(5,0),
		TextSize = 14,
		TextXAlignment = Enum.TextXAlignment.Left
	},
	Button = {
		BackgroundTransparency = 1,
		Position = UDim2.fromOffset(5,0),
		Size = UDim2.fromScale(1,1) - UDim2.fromOffset(5,0),
		TextSize = 14,
		TextXAlignment = Enum.TextXAlignment.Left
	},
	Box = {
		BackgroundTransparency = 1,
		Position = UDim2.fromOffset(5,0),
		Size = UDim2.fromScale(1,1) - UDim2.fromOffset(5,0),
		TextSize = 14,
		TextXAlignment = Enum.TextXAlignment.Left
	},
	ScrollingFrame = {
		BackgroundTransparency = 1,
		ScrollBarThickness = 0,
		CanvasSize = UDim2.fromScale(0,0),
		Size = UDim2.fromScale(1,1)
	},
	Menu = {
		Name = ""More"",
		AutoButtonColor = false,
		BackgroundTransparency = 1,
		Image = ""http://www.roblox.com/asset/?id=5555108481"",
		Size = UDim2.fromOffset(20,20),
		Position = UDim2.fromScale(1,0.5) - UDim2.fromOffset(25,10)
	},
	NavBar = {
		Name = ""SheetToggle"",
		Image = ""http://www.roblox.com/asset/?id=5576439039"",
		BackgroundTransparency = 1,
		Size = UDim2.fromOffset(20,20),
		Position = UDim2.fromOffset(5,5),
		AutoButtonColor = false
	}
}

function FindType(String)
	for _, Type in next, Types do
		if Type:sub(1, #String):lower() == String:lower() then
			return Type
		end
	end
	return false
end

local Objects = {}

function Objects.new(Type)
	local TargetType = FindType(Type)
	if TargetType then
		local NewImage = Instance.new(ActualTypes[TargetType])
		if Properties[TargetType] then
			for Property, Value in next, Properties[TargetType] do
				NewImage[Property] = Value
			end
		end
		return NewImage
	else
		return Instance.new(Type)
	end
end

local function GetXY(GuiObject)
	local Max, May = GuiObject.AbsoluteSize.X, GuiObject.AbsoluteSize.Y
	local Px, Py = math.clamp(Mouse.X - GuiObject.AbsolutePosition.X, 0, Max), math.clamp(Mouse.Y - GuiObject.AbsolutePosition.Y, 0, May)
	return Px/Max, Py/May
end

local function CircleAnim(GuiObject, EndColour, StartColour)
	local PX, PY = GetXY(GuiObject)
	local Circle = Objects.new(""Circle"")
	Circle.Size = UDim2.fromScale(0,0)
	Circle.Position = UDim2.fromScale(PX,PY)
	Circle.ImageColor3 = StartColour or GuiObject.ImageColor3
	Circle.ZIndex = 200
	Circle.Parent = GuiObject
	local Size = GuiObject.AbsoluteSize.X
	TweenService:Create(Circle, TweenInfo.new(1), {Position = UDim2.fromScale(PX,PY) - UDim2.fromOffset(Size/2,Size/2), ImageTransparency = 1, ImageColor3 = EndColour, Size = UDim2.fromOffset(Size,Size)}):Play()
	spawn(function()
		wait(2)
		Circle:Destroy()
	end)
end

local Material = {}

local Styles = {
	[1] = ""Normal"",
	[2] = ""Invert"",
	[3] = ""Sheets""
}

local ThisTheme

local NavBar = {
	Normal = function()
		local NewNavBar = Objects.new(""Round"")
		NewNavBar.Name = ""NavBar""
		NewNavBar.Size = UDim2.fromScale(1,0) + UDim2.fromOffset(-10,30)
		NewNavBar.Position = UDim2.fromOffset(5,35)
		NewNavBar.ImageColor3 = ThisTheme.NavBar
		NewNavBar.ZIndex = 100

		local NavBarShadow = Objects.new(""Shadow"")
		NavBarShadow.ImageColor3 = ThisTheme.NavBar
		NavBarShadow.Parent = NewNavBar
		NavBarShadow.ZIndex = 100

		local NavBarContent = Objects.new(""Frame"")
		NavBarContent.Name = ""Content""
		NavBarContent.Parent = NewNavBar

		NavBarContent.ChildAdded:Connect(function(Child)
			pcall(function()
				local Children = #NavBarContent:GetChildren() - 2
				TweenService:Create(Child, TweenInfo.new(1), {TextTransparency = (Children > 1) and 0.5 or 0}):Play()
			end)
			pcall(function()
				local Children = #NavBarContent:GetChildren() - 2
				TweenService:Create(Child, TweenInfo.new(1), {ImageTransparency = (Children > 1) and 0.5 or 0}):Play()
			end)
			pcall(function()
				local Children = #NavBarContent:GetChildren() - 2
				TweenService:Create(Child:FindFirstChildWhichIsA(""ImageLabel""), TweenInfo.new(1), {ImageTransparency = (Children > 1) and 0.5 or 0}):Play()
			end)
			pcall(function()
				Child.TextColor3 = ThisTheme.NavBarAccent
			end)
			pcall(function()
				Child:FindFirstChildWhichIsA(""ImageLabel"").ImageColor3 = ThisTheme.NavBarAccent
			end)
			pcall(function()
				Child.ImageColor3 = ThisTheme.NavBarAccent
			end)
		end)

		local NavBarList = Objects.new(""UIListLayout"")
		NavBarList.FillDirection = Enum.FillDirection.Horizontal
		NavBarList.HorizontalAlignment = Enum.HorizontalAlignment.Left
		NavBarList.VerticalAlignment = Enum.VerticalAlignment.Center
		NavBarList.SortOrder = Enum.SortOrder.LayoutOrder
		NavBarList.Parent = NavBarContent

		local NavBarPadding = Objects.new(""UIPadding"")
		NavBarPadding.PaddingLeft = UDim.new(0,5)
		NavBarPadding.Parent = NavBarContent

		return NewNavBar, NavBarContent
	end,
	Invert = function()
		local NewNavBar = Objects.new(""Round"")
		NewNavBar.Name = ""NavBar""
		NewNavBar.Size = UDim2.fromScale(1,0) + UDim2.fromOffset(-10,30)
		NewNavBar.Position = UDim2.fromOffset(5,35)
		NewNavBar.ImageColor3 = ThisTheme.NavBarAccent
		NewNavBar.ImageTransparency = 1
		NewNavBar.ZIndex = 100

		local NavBarShadow = Objects.new(""Shadow"")
		NavBarShadow.ImageColor3 = ThisTheme.NavBarInvert
		NavBarShadow.ImageTransparency = 1
		NavBarShadow.Parent = NewNavBar
		NavBarShadow.ZIndex = 100

		TweenService:Create(NewNavBar, TweenInfo.new(1), {ImageTransparency = 0}):Play()
		TweenService:Create(NavBarShadow, TweenInfo.new(1), {ImageTransparency = 0}):Play()

		local NavBarContent = Objects.new(""Frame"")
		NavBarContent.Name = ""Content""
		NavBarContent.Parent = NewNavBar

		NavBarContent.ChildAdded:Connect(function(Child)
			pcall(function()
				local Children = #NavBarContent:GetChildren() - 2
				TweenService:Create(Child, TweenInfo.new(1), {TextTransparency = (Children > 1) and 0.5 or 0}):Play()
			end)
			pcall(function()
				local Children = #NavBarContent:GetChildren() - 2
				TweenService:Create(Child, TweenInfo.new(1), {ImageTransparency = (Children > 1) and 0.5 or 0}):Play()
			end)
			pcall(function()
				local Children = #NavBarContent:GetChildren() - 2
				TweenService:Create(Child:FindFirstChildWhichIsA(""ImageLabel""), TweenInfo.new(1), {ImageTransparency = (Children > 1) and 0.5 or 0}):Play()
			end)
			pcall(function()
				Child.TextColor3 = ThisTheme.NavBar
			end)
			pcall(function()
				Child:FindFirstChildWhichIsA(""ImageLabel"").ImageColor3 = ThisTheme.NavBar
			end)
			pcall(function()
				Child.ImageColor3 = ThisTheme.NavBar
			end)
		end)

		local NavBarList = Objects.new(""UIListLayout"")
		NavBarList.FillDirection = Enum.FillDirection.Horizontal
		NavBarList.HorizontalAlignment = Enum.HorizontalAlignment.Left
		NavBarList.VerticalAlignment = Enum.VerticalAlignment.Center
		NavBarList.SortOrder = Enum.SortOrder.LayoutOrder
		NavBarList.Parent = NavBarContent

		local NavBarPadding = Objects.new(""UIPadding"")
		NavBarPadding.PaddingLeft = UDim.new(0,5)
		NavBarPadding.Parent = NavBarContent

		return NewNavBar, NavBarContent
	end,
	Sheets = function()
		local NewNavBar = Objects.new(""Round"")
		NewNavBar.ClipsDescendants = true
		NewNavBar.Name = ""NavBar""
		NewNavBar.Size = UDim2.fromScale(0,1) - UDim2.fromOffset(0,30)
		NewNavBar.Position = UDim2.fromOffset(0,30)
		NewNavBar.ImageColor3 = ThisTheme.NavBarAccent
		NewNavBar.ZIndex = 100

		local NavBarOverlay = Objects.new(""Frame"")
		NavBarOverlay.Name = ""Overlay""
		NavBarOverlay.BackgroundColor3 = ThisTheme.NavBar
		NavBarOverlay.BackgroundTransparency = 1
		NavBarOverlay.Size = UDim2.fromScale(1,1) - UDim2.fromOffset(0,30)
		NavBarOverlay.Position = UDim2.fromOffset(0,30)
		NavBarOverlay.ZIndex = 75

		local NavBarMenu = Objects.new(""NavBar"")
		NavBarMenu.ZIndex = 100

		local NavBarShadow = Objects.new(""Shadow"")
		NavBarShadow.ImageColor3 = ThisTheme.NavBar
		NavBarShadow.Parent = NewNavBar
		NavBarShadow.ZIndex = 100

		local Effect1, Effect2, Effect3 = Objects.new(""Frame""), Objects.new(""Frame""), Objects.new(""Frame"")

		Effect1.ZIndex = 100
		Effect2.ZIndex = 100
		Effect3.ZIndex = 100

		Effect1.BackgroundTransparency = 0
		Effect2.BackgroundTransparency = 0
		Effect3.BackgroundTransparency = 0

		Effect1.BackgroundColor3 = ThisTheme.NavBarAccent
		Effect2.BackgroundColor3 = ThisTheme.NavBarAccent
		Effect3.BackgroundColor3 = ThisTheme.NavBar

		Effect1.Size = UDim2.fromScale(1,0) + UDim2.fromOffset(0,5)
		Effect2.Size = UDim2.fromScale(0,1) + UDim2.fromOffset(5,0)
		Effect3.Size = UDim2.fromScale(0,1) + UDim2.fromOffset(1,0)

		Effect1.Position = UDim2.fromScale(0,0)
		Effect2.Position = UDim2.fromScale(1,0) - UDim2.fromOffset(5,0)
		Effect3.Position = UDim2.fromScale(1,0)

		Effect1.Parent = NewNavBar
		Effect2.Parent = NewNavBar
		Effect3.Parent = NewNavBar

		local NavBarContent = Objects.new(""Frame"")
		NavBarContent.Name = ""Content""
		NavBarContent.Parent = NewNavBar

		local NavBarList = Objects.new(""UIListLayout"")
		NavBarList.FillDirection = Enum.FillDirection.Vertical
		NavBarList.HorizontalAlignment = Enum.HorizontalAlignment.Center
		NavBarList.VerticalAlignment = Enum.VerticalAlignment.Top
		NavBarList.SortOrder = Enum.SortOrder.LayoutOrder
		NavBarList.Parent = NavBarContent

		local NavBarPadding = Objects.new(""UIPadding"")
		NavBarPadding.PaddingLeft = UDim.new(0,5)
		NavBarPadding.PaddingRight = UDim.new(0,5)
		NavBarPadding.PaddingTop = UDim.new(0,5)
		NavBarPadding.PaddingBottom = UDim.new(0,5)
		NavBarPadding.Parent = NavBarContent

		NavBarContent.ChildAdded:Connect(function(Child)
			pcall(function()
				local Children = #NavBarContent:GetChildren() - 2
				TweenService:Create(Child, TweenInfo.new(1), {TextTransparency = (Children > 1) and 0.5 or 0}):Play()
			end)
			pcall(function()
				local Children = #NavBarContent:GetChildren() - 2
				TweenService:Create(Child, TweenInfo.new(1), {ImageTransparency = (Children > 1) and 0.5 or 0}):Play()
			end)
			pcall(function()
				local Children = #NavBarContent:GetChildren() - 2
				TweenService:Create(Child:FindFirstChildWhichIsA(""ImageLabel""), TweenInfo.new(1), {ImageTransparency = (Children > 1) and 0.5 or 0}):Play()
			end)
			pcall(function()
				Child.Size = UDim2.fromScale(1,0) + UDim2.fromOffset(0,30)
			end)
			pcall(function()
				Child:FindFirstChildWhichIsA(""ImageLabel"").ImageColor3 = ThisTheme.NavBar
			end)
			pcall(function()
				Child.TextColor3 = ThisTheme.NavBar
			end)
			pcall(function()
				Child.ImageColor3 = ThisTheme.NavBar
			end)
		end)

		return NewNavBar, NavBarContent, NavBarMenu,  NavBarOverlay
	end
}

local MainGUI

function TryAddMenu(Object, Menu, ReturnTable)
	local Menu = Menu
	local ReturnTable = ReturnTable
	ReturnTable.Object = Object
	local Total = 0

	table.foreach(Menu, function(_, Value)
		Total = Total + ((typeof(Value) == ""function"") and 1 or 0)
	end)

	if Total > 0 then
		local MenuToggle = false

		local MenuButton = Objects.new(""Menu"")
		MenuButton.ImageTransparency = 1
		MenuButton.Parent = Object

		TweenService:Create(MenuButton, TweenInfo.new(0.5), {ImageTransparency = 0}):Play()

		local Size = Total * 30 + ((Total + 1) * 2)

		local MenuBuild = Objects.new(""Round"")
		MenuBuild.Name = ""Menu""
		MenuBuild.ImageColor3 = ThisTheme.ButtonAccent
		MenuBuild.Size = UDim2.fromOffset(120,0)
		MenuBuild.Position = UDim2.fromOffset(MenuButton.AbsolutePosition.X,MenuButton.AbsolutePosition.Y) - UDim2.fromOffset(125,5)
		MenuBuild.ZIndex = 100
		MenuBuild.ClipsDescendants = true
		MenuBuild.Parent = MainGUI

		MenuButton:GetPropertyChangedSignal(""AbsolutePosition""):Connect(function()
			MenuBuild.Position = UDim2.fromOffset(MenuButton.AbsolutePosition.X,MenuButton.AbsolutePosition.Y) - UDim2.fromOffset(125,5)
		end)

		local MenuContent = Objects.new(""Frame"")
		MenuContent.Name = ""Content""
		MenuContent.Parent = MenuBuild

		local MenuList = Objects.new(""UIListLayout"")
		MenuList.Padding = UDim.new(0,2)
		MenuList.Parent = MenuContent

		local MenuPadding = Objects.new(""UIPadding"")
		MenuPadding.PaddingTop = UDim.new(0,2)
		MenuPadding.PaddingRight = UDim.new(0,2)
		MenuPadding.PaddingLeft = UDim.new(0,2)
		MenuPadding.PaddingBottom = UDim.new(0,2)
		MenuPadding.Parent = MenuContent

		MenuButton.MouseButton1Down:Connect(function()
			MenuToggle = not MenuToggle
			TweenService:Create(MenuBuild, TweenInfo.new(0.15), {Size = MenuToggle and UDim2.fromOffset(120,Size) or UDim2.fromOffset(120,0)}):Play()
		end)

		table.foreach(Menu, function(Option, Value)
			if typeof(Value) == ""function"" then
				local MenuOption = Objects.new(""SmoothButton"")
				MenuOption.Name = ""MenuOption""
				MenuOption.Size = UDim2.fromScale(1,0) + UDim2.fromOffset(0,30)
				MenuOption.ImageColor3 = ThisTheme.Button
				MenuOption.ImageTransparency = 1
				MenuOption.ZIndex = 150
				MenuOption.Parent = MenuContent

				local OptionShadow = Objects.new(""Shadow"")
				OptionShadow.ImageColor3 = ThisTheme.Button
				OptionShadow.ImageTransparency = 1
				OptionShadow.Parent = MenuOption

				local OptionValue = Objects.new(""Label"")
				OptionValue.Name = ""Value""
				OptionValue.Position = UDim2.fromScale(0,0)
				OptionValue.Size = UDim2.fromScale(1,1) - UDim2.fromOffset(5,0)
				OptionValue.Text = Option
				OptionValue.TextColor3 = ThisTheme.Button
				OptionValue.Font = Enum.Font.Gotham
				OptionValue.TextSize = 12
				OptionValue.ZIndex = 150
				OptionValue.TextXAlignment = Enum.TextXAlignment.Right
				OptionValue.Parent = MenuOption

				MenuOption.MouseButton1Down:Connect(function()
					Value(ReturnTable)
					MenuToggle = false
					TweenService:Create(MenuBuild, TweenInfo.new(0.15), {Size = UDim2.fromOffset(120,0)}):Play()
				end)

				MenuOption.MouseEnter:Connect(function()
					TweenService:Create(MenuOption, TweenInfo.new(0.15), {ImageTransparency = 0.8}):Play()
					TweenService:Create(OptionShadow, TweenInfo.new(0.15), {ImageTransparency = 0.8}):Play()
				end)

				MenuOption.MouseLeave:Connect(function()
					TweenService:Create(MenuOption, TweenInfo.new(0.15), {ImageTransparency = 1}):Play()
					TweenService:Create(OptionShadow, TweenInfo.new(0.15), {ImageTransparency = 1}):Play()
				end)
			end
		end)
		return true, MenuButton
	end
	return false
end

function CreateNewButton(ButtonConfig, Parent)
	local ButtonText = ButtonConfig.Text or ""nil button""
	local ButtonCallback = ButtonConfig.Callback or function() print(""nil button"") end
	local Menu = ButtonConfig.Menu or {}

	local Button = Objects.new(""SmoothButton"")
	Button.Name = ""Button""
	Button.Size = UDim2.fromScale(1,0) + UDim2.fromOffset(0,30)
	Button.ImageColor3 = ThisTheme.Button
	Button.ImageTransparency = 1
	Button.Parent = Parent

	local ButtonShadow = Objects.new(""Shadow"")
	ButtonShadow.ImageColor3 = ThisTheme.Button
	ButtonShadow.ImageTransparency = 1
	ButtonShadow.Parent = Button

	local ButtonLabel = Objects.new(""Label"")
	ButtonLabel.Text = ButtonText
	ButtonLabel.TextColor3 = ThisTheme.ButtonAccent
	ButtonLabel.Font = Enum.Font.GothamSemibold
	ButtonLabel.TextSize = 14
	ButtonLabel.ClipsDescendants = true
	ButtonLabel.TextTransparency = 1
	ButtonLabel.Parent = Button

	TweenService:Create(Button, TweenInfo.new(0.5), {ImageTransparency = 0}):Play()
	TweenService:Create(ButtonShadow, TweenInfo.new(0.5), {ImageTransparency = 0}):Play()
	TweenService:Create(ButtonLabel, TweenInfo.new(0.5), {TextTransparency = 0}):Play()

	Button.MouseButton1Down:Connect(function()
		CircleAnim(ButtonLabel, ThisTheme.ButtonAccent, ThisTheme.Button)
		ButtonCallback()
	end)

	local MenuAdded = TryAddMenu(Button, Menu, {})

	return Button, ButtonLabel
end

function Material.Load(Config)
	local Style = (Config.Style and math.clamp(Config.Style, 1, 3)) or 1
	local Title = Config.Title or ""MaterialLua""
	local SizeX = Config.SizeX or 300
	local SizeY = Config.SizeY or 500
	local Theme = Config.Theme or ""Light""
	local Overrides = Config.ColorOverrides or {}
	local Open = true

	Theme = Themes[Theme]

	ThisTheme = Theme

	for KeyOverride, ValueOverride in next, Overrides do
		ThisTheme[KeyOverride] = ValueOverride
	end

	pcall(function() OldInstance:Destroy() end);

    local function GetExploit()
        local Table = {};
        Table.Synapse = syn;
        Table.ProtoSmasher = pebc_create;
        Table.Sentinel = issentinelclosure;
        Table.ScriptWare = getexecutorname;

        for ExploitName, ExploitFunction in next, Table do
            if (ExploitFunction) then
                return ExploitName;
            end;
        end;

        return ""Undefined"";
    end;

    local ProtectFunctions = {};
    ProtectFunctions.Synapse = function(GuiObject) syn.protect_gui(GuiObject); GuiObject.Parent = CoreGuiService; end;
    ProtectFunctions.ProtoSmasher = function(GuiObject) GuiObject.Parent = get_hidden_gui(); end;
    ProtectFunctions.Sentinel = function(GuiObject) GuiObject.Parent = CoreGuiService; end;
    ProtectFunctions.ScriptWare = function(GuiObject) GuiObject.Parent = gethui(); end;
    ProtectFunctions.Undefined = function(GuiObject) GuiObject.Parent = CoreGuiService; end;

	local NewInstance = Objects.new(""ScreenGui"")
	NewInstance.Name = Title
    ProtectFunctions[GetExploit()](NewInstance);

    getgenv().OldInstance = NewInstance;

	MainGUI = NewInstance

	local MainFrame = Objects.new(""Round"")
	MainFrame.Name = ""MainFrame""
	MainFrame.Size = UDim2.fromOffset(0,SizeY)
	MainFrame.Position = UDim2.fromScale(0.5,0.5) - UDim2.fromOffset(SizeX/2,SizeY/2)
	MainFrame.ImageColor3 = Theme.MainFrame
	MainFrame.Parent = NewInstance

	TweenService:Create(MainFrame, TweenInfo.new(1), {Size = UDim2.fromOffset(SizeX,SizeY)}):Play()

	wait(1)

	local MainShadow = Objects.new(""Shadow"")
	MainShadow.ImageColor3 = Theme.MainFrame
	MainShadow.Parent = MainFrame

	local TitleBar = Objects.new(""SmoothButton"")
	TitleBar.Name = ""TitleBar""
	TitleBar.Size = UDim2.fromScale(1,0) + UDim2.fromOffset(0,30)
	TitleBar.ImageColor3 = Theme.TitleBar
	TitleBar.ImageTransparency = 1
	TitleBar.Parent = MainFrame

	local ExtraBar = Objects.new(""Frame"")
	ExtraBar.Name = ""Hidden""
	ExtraBar.Size = UDim2.fromScale(1,0) + UDim2.fromOffset(0,5)
	ExtraBar.Position = UDim2.fromScale(0,1) - UDim2.fromOffset(0,5)
	ExtraBar.BackgroundColor3 = Theme.TitleBar
	ExtraBar.Parent = TitleBar

	local TitleShadow = Objects.new(""Shadow"")
	TitleShadow.ImageColor3 = Theme.TitleBar
	TitleShadow.ImageTransparency = 1
	TitleShadow.Parent = TitleBar

	local TitleText = Objects.new(""Button"")
	TitleText.Name = ""Title""
	TitleText.Text = Title
	TitleText.TextColor3 = Theme.TitleBarAccent
	TitleText.TextTransparency = 1
	TitleText.Font = Enum.Font.GothamBold
	TitleText.Parent = TitleBar

	TitleText.MouseButton1Down:Connect(function()
		local Mx, My = Mouse.X, Mouse.Y
		local MouseMove, MouseKill
		MouseMove = Mouse.Move:Connect(function()
			local nMx, nMy = Mouse.X, Mouse.Y
			local Dx, Dy = nMx - Mx, nMy - My
			MainFrame.Position = MainFrame.Position + UDim2.fromOffset(Dx, Dy)
			Mx, My = nMx, nMy
		end)
		MouseKill = InputService.InputEnded:Connect(function(UserInput)
			if UserInput.UserInputType == Enum.UserInputType.MouseButton1 then
				MouseMove:Disconnect()
				MouseKill:Disconnect()
			end
		end)
	end)

	local MinimiseButton = Objects.new(""SmoothButton"")
	MinimiseButton.Size = UDim2.fromOffset(20,20)
	MinimiseButton.Position = UDim2.fromScale(1,0) + UDim2.fromOffset(-25,5)
	MinimiseButton.ImageColor3 = Theme.Minimise
	MinimiseButton.ImageTransparency = 1
	MinimiseButton.Parent = TitleBar

	local MinimiseShadow = Objects.new(""Shadow"")
	MinimiseShadow.ImageColor3 = Theme.MinimiseAccent
	MinimiseShadow.ImageTransparency = 1
	MinimiseShadow.Parent = MinimiseButton

	MinimiseButton.MouseButton1Down:Connect(function()
		Open = not Open
		TweenService:Create(MainShadow, TweenInfo.new(0.15), {ImageTransparency = 1}):Play()
		TweenService:Create(MainFrame, TweenInfo.new(0.15), {Size = Open and UDim2.fromOffset(SizeX,SizeY) or UDim2.fromOffset(SizeX,30)}):Play()
		TweenService:Create(MinimiseButton, TweenInfo.new(0.15), {ImageColor3 = Open and Theme.Minimise or Theme.Maximise}):Play()
		TweenService:Create(MinimiseShadow, TweenInfo.new(0.15), {ImageColor3 = Open and Theme.MinimiseAccent or Theme.MaximiseAccent}):Play()
		if Open then
			wait(0.15)
			MainFrame.ClipsDescendants = false
			TweenService:Create(MainShadow, TweenInfo.new(0.15), {ImageTransparency = 0}):Play()
		else
			MainFrame.ClipsDescendants = true
		end
	end)

	local Content = Objects.new(""Round"")
	Content.Name = ""Content""
	Content.ImageColor3 = Theme.Content
	Content.Size = UDim2.fromScale(1,1) - UDim2.fromOffset(10,75)
	Content.Position = UDim2.fromOffset(5,70)
	Content.ImageTransparency = 1
	Content.Parent = MainFrame

	local NavigationBar, NavigationBarContent, NavBarMenu, NavBarOverlay = NavBar[Styles[Style]]()
	NavigationBar.Parent = MainFrame

	TweenService:Create(TitleBar, TweenInfo.new(1), {ImageTransparency = 0}):Play()
	TweenService:Create(ExtraBar, TweenInfo.new(1), {BackgroundTransparency = 0}):Play()
	TweenService:Create(TitleShadow, TweenInfo.new(1), {ImageTransparency = 0}):Play()
	TweenService:Create(TitleText, TweenInfo.new(1), {TextTransparency = 0}):Play()
	TweenService:Create(MinimiseButton, TweenInfo.new(1), {ImageTransparency = 0}):Play()
	TweenService:Create(MinimiseShadow, TweenInfo.new(1), {ImageTransparency = 0}):Play()
	TweenService:Create(Content, TweenInfo.new(1), {ImageTransparency = 0.8}):Play()

	wait(1)

	if NavBarMenu then
		TweenService:Create(TitleText, TweenInfo.new(0.5), {
			Size = TitleText.Size - UDim2.fromOffset(25,0),
			Position = TitleText.Position + UDim2.fromOffset(25,0)
		}):Play()
		TweenService:Create(Content, TweenInfo.new(0.5), {
			Size = Content.Size + UDim2.fromOffset(0,35),
			Position = Content.Position - UDim2.fromOffset(0,35)
		}):Play()

		NavBarMenu.ImageTransparency = 1
		NavBarMenu.Parent = TitleBar

		TweenService:Create(NavBarMenu, TweenInfo.new(0.5), {ImageTransparency = 0}):Play()

		NavBarOverlay.Parent = MainFrame

		local MenuToggle = false

		NavBarMenu.MouseButton1Down:Connect(function()
			MenuToggle = not MenuToggle
			TweenService:Create(NavigationBar, TweenInfo.new(0.15), {Size = (MenuToggle and UDim2.fromScale(0.5,1) or UDim2.fromScale(0,1)) - UDim2.fromOffset(0,30)}):Play()
			TweenService:Create(NavBarOverlay, TweenInfo.new(0.15), {BackgroundTransparency = MenuToggle and 0.5 or 1}):Play()
			if MenuToggle then
				wait(0.15)
				NavigationBar.ClipsDescendants = false
			else
				NavigationBar.ClipsDescendants = true
			end
		end)
	end

	local TabCount = 0

	local TabLibrary = {}

	local ButtonTrack = {}
	local PageTrack = {}

	function TabLibrary.Banner(BannerConfig)
		local BannerText = BannerConfig.Text
		local BannerOptions = BannerConfig.Options or {}

		local ExistingBanner, ExistingBannerOverlay = MainFrame:FindFirstChild(""BannerOverlay""), MainFrame:FindFirstChild(""Banner"")

		if ExistingBanner then
			ExistingBanner:Destroy()
		end

		if ExistingBannerOverlay then
			ExistingBannerOverlay:Destroy()
		end

		local BannerOverlay = Objects.new(""Frame"")
		BannerOverlay.Name = ""BannerOverlay""
		BannerOverlay.BackgroundColor3 = Theme.BannerAccent
		BannerOverlay.Size = UDim2.fromScale(1,1) - UDim2.fromOffset(0,30)
		BannerOverlay.Position = UDim2.fromOffset(0,30)
		BannerOverlay.ZIndex = 75
		BannerOverlay.Parent = MainFrame

		local TextSize = TextService:GetTextSize(BannerText, 12, Enum.Font.Gotham, Vector2.new(0,0)).X

		local Lines = math.ceil((TextSize) / (MainFrame.AbsoluteSize.X - 10))

		local BannerSize = UDim2.fromScale(1,0) + UDim2.fromOffset(-10,(Lines*20)+40)
		local BannerPosition = UDim2.fromScale(0,1) + UDim2.fromOffset(5,(-Lines*20)-45)

		local Banner = Objects.new(""Round"")
		Banner.Name = ""Banner""
		Banner.ImageTransparency = 1
		Banner.ImageColor3 = Theme.Banner
		Banner.Size = BannerSize
		Banner.Position = BannerPosition
		Banner.ZIndex = 80
		Banner.Parent = MainFrame

		local BannerLabel = Objects.new(""Label"")
		BannerLabel.Name = ""Value""
		BannerLabel.Text = BannerText
		BannerLabel.TextColor3 = Theme.BannerAccent
		BannerLabel.TextSize = 12
		BannerLabel.Font = Enum.Font.Gotham
		BannerLabel.Size = UDim2.fromScale(1,0) + UDim2.fromOffset(-5,(Lines*20)+5)
		BannerLabel.TextWrapped = true
		BannerLabel.Position = UDim2.fromOffset(5,0)
		BannerLabel.TextTransparency = 1
		BannerLabel.ZIndex = 80
		BannerLabel.Parent = Banner

		TweenService:Create(BannerOverlay, TweenInfo.new(0.5), {BackgroundTransparency = 0.5}):Play()
		TweenService:Create(Banner, TweenInfo.new(0.5), {ImageTransparency = 0}):Play()
		TweenService:Create(BannerLabel, TweenInfo.new(0.5), {TextTransparency = 0}):Play()

		local BannerContainer = Objects.new(""Frame"")
		BannerContainer.Name = ""Options""
		BannerContainer.Size = UDim2.fromScale(1,0) + UDim2.fromOffset(-10,0)
		BannerContainer.Position = UDim2.fromScale(0,1) - UDim2.fromOffset(-5,35)
		BannerContainer.ZIndex = 80
		BannerContainer.ClipsDescendants = true
		BannerContainer.Parent = Banner

		local BannerList = Objects.new(""UIListLayout"")
		BannerList.FillDirection = Enum.FillDirection.Horizontal
		BannerList.HorizontalAlignment = Enum.HorizontalAlignment.Right
		BannerList.SortOrder = Enum.SortOrder.LayoutOrder
		BannerList.Padding = UDim.new(0,5)
		BannerList.Parent = BannerContainer

		BannerOptions[""Ok""] = function()
			TweenService:Create(BannerContainer, TweenInfo.new(0.5), {Size = UDim2.fromScale(1,0) + UDim2.fromOffset(-10,0)}):Play()
			TweenService:Create(BannerOverlay, TweenInfo.new(0.5), {BackgroundTransparency = 1}):Play()
			TweenService:Create(Banner, TweenInfo.new(0.5), {ImageTransparency = 1}):Play()
			TweenService:Create(BannerLabel, TweenInfo.new(0.5), {TextTransparency = 1}):Play()
		end

		table.foreach(BannerOptions, function(Option, Value)
			if typeof(Value) == ""function"" then
				local TextSize = TextService:GetTextSize(Option:upper(), 12, Enum.Font.GothamBold, Vector2.new(0,0)).X

				local OptionItem = Objects.new(""SmoothButton"")
				OptionItem.ImageColor3 = Theme.BannerAccent
				OptionItem.ImageTransparency = 0.9
				OptionItem.Size = UDim2.fromOffset(TextSize+10,30)
				OptionItem.ZIndex = 80
				OptionItem.ClipsDescendants = true
				OptionItem.Parent = BannerContainer

				local OptionLabel = Objects.new(""Label"")
				OptionLabel.Text = Option:upper()
				OptionLabel.TextSize = 12
				OptionLabel.TextColor3 = Theme.BannerAccent
				OptionLabel.Font = Enum.Font.GothamBold
				OptionLabel.Size = UDim2.fromScale(1,1)
				OptionLabel.Position = UDim2.fromScale(0,0)
				OptionLabel.TextXAlignment = Enum.TextXAlignment.Center
				OptionLabel.ZIndex = 80
				OptionLabel.Parent = OptionItem

				OptionItem.MouseButton1Down:Connect(function()
					Value()
					CircleAnim(OptionItem, Theme.Banner)
				end)
			end
		end)

		TweenService:Create(BannerContainer, TweenInfo.new(0.5), {Size = UDim2.fromScale(1,0) + UDim2.fromOffset(-10,30)}):Play()
	end

	function TabLibrary.New(TabConfig)
		local ImageID = TabConfig.ID
		local Title = TabConfig.Title

		local Button

		if ImageID then
			if Title then
				local Settings = {
					TextSize = 12,
					Font = Enum.Font.GothamBold,
					Vector = Vector2.new(0,0)
				}

				local TextSize = TextService:GetTextSize(Title:upper(), Settings.TextSize, Settings.Font, Settings.Vector).X

				Button = Objects.new(""Button"")
				Button.Name = Title:upper()
				Button.TextXAlignment = Enum.TextXAlignment.Right
				Button.TextSize = Settings.TextSize
				Button.Font = Settings.Font
				Button.Text = Title:upper()
				Button.Size = UDim2.fromScale(0,1) + UDim2.fromOffset(TextSize+35)
				Button.ZIndex = 200
				Button.TextTransparency = 1
			end

			local FetchURL = ""rbxassetid://""..ImageID

			local Image = RunService:IsStudio() and ""http://www.roblox.com/asset/?id=5472131383"" or game:GetObjects(FetchURL)[1].Texture

			local NewImage = Objects.new(Button and ""Round"" or ""SmoothButton"")
			NewImage.Name = ImageID
			NewImage.BackgroundTransparency = 1
			NewImage.Size = UDim2.fromOffset(20,20)
			NewImage.ScaleType = Enum.ScaleType.Stretch
			NewImage.Image = Image
			NewImage.ZIndex = 200
			NewImage.ImageTransparency = 1

			if Button then
				NewImage.Position = UDim2.fromScale(0,0.5) - UDim2.fromOffset(0,10)
				NewImage.Parent = Button
			else
				Button = NewImage
			end

		else
			local Settings = {
				TextSize = 12,
				Font = Enum.Font.GothamBold,
				Vector = Vector2.new(0,0)
			}

			local TextSize = TextService:GetTextSize(Title:upper(), Settings.TextSize, Settings.Font, Settings.Vector).X

			Button = Objects.new(""Button"")
			Button.Name = Title:upper()
			Button.TextXAlignment = Enum.TextXAlignment.Center
			Button.TextSize = Settings.TextSize
			Button.Font = Settings.Font
			Button.Text = Title:upper()
			Button.Size = UDim2.fromScale(0,1) + UDim2.fromOffset(TextSize+10)
			Button.ZIndex = 200
			Button.TextTransparency = 1
		end

		Button.Parent = NavigationBarContent

		local PageContentFrame = Objects.new(""Scroll"")
		PageContentFrame.Name = Title:upper() or ImageID
		PageContentFrame.Visible = (TabCount == 0)
		PageContentFrame.ZIndex = 50
		PageContentFrame.Parent = Content

		table.insert(ButtonTrack, Button)
		table.insert(PageTrack, PageContentFrame)

		Button.MouseButton1Down:Connect(function()
			for _, Track in next, ButtonTrack do
				if not (Track == Button) then
					TweenService:Create(Track, TweenInfo.new(0.15), {TextTransparency = 0.5}):Play()
					pcall(function()
						TweenService:Create(Track:FindFirstChildWhichIsA(""ImageLabel""), TweenInfo.new(0.15), {ImageTransparency = 0.5}):Play()
					end)
				else
					TweenService:Create(Track, TweenInfo.new(0.15), {TextTransparency = 0}):Play()
					pcall(function()
						TweenService:Create(Track:FindFirstChildWhichIsA(""ImageLabel""), TweenInfo.new(0.15), {ImageTransparency = 0}):Play()
					end)
				end
			end
			for _, Track in next, PageTrack do
				Track.Visible = (Track == PageContentFrame)
			end
		end)

		local PagePadding = Objects.new(""UIPadding"")
		PagePadding.PaddingLeft = UDim.new(0,5)
		PagePadding.PaddingRight = UDim.new(0,5)
		PagePadding.PaddingTop = UDim.new(0,5)
		PagePadding.PaddingBottom = UDim.new(0,5)
		PagePadding.Parent = PageContentFrame

		local PageList = Objects.new(""UIListLayout"")
		PageList.SortOrder = Enum.SortOrder.LayoutOrder
		PageList.Padding = UDim.new(0,5)
		PageList.Parent = PageContentFrame

		PageList:GetPropertyChangedSignal(""AbsoluteContentSize""):Connect(function()
			PageContentFrame.CanvasSize = UDim2.fromOffset(0,PageList.AbsoluteContentSize.Y+10)
		end)

		TabCount = TabCount + 1

		local OptionLibrary = {}

		function OptionLibrary.Button(ButtonConfig)
			local NewButton, ButtonLabel = CreateNewButton(ButtonConfig, PageContentFrame)

			local ButtonLibrary = {}

			function ButtonLibrary:SetText(Value)
				ButtonLabel.Text = Value
			end

			function ButtonLibrary:GetText()
				return ButtonLabel.Text
			end

			return ButtonLibrary
		end

		function OptionLibrary.Dropdown(DropdownConfig)
			local DropdownText = DropdownConfig.Text or ""nil dropdown""
            local DropdownValue = DropdownConfig.Default
			local DropdownCallback = DropdownConfig.Callback or function() print(""nil dropdown"") end
			local DropdownOptions = DropdownConfig.Options or {}
			local Menu = DropdownConfig.Menu or {}

			local Dropdown = Objects.new(""Frame"")
			Dropdown.Name = ""Dropdown""
			Dropdown.Size = UDim2.fromScale(1,0) + UDim2.fromOffset(0,30)
			Dropdown.Parent = PageContentFrame

			local DropdownBar = Objects.new(""Round"")
			DropdownBar.Name = ""TitleBar""
			DropdownBar.Size = UDim2.fromScale(1,0) + UDim2.fromOffset(0,30)
			DropdownBar.ImageColor3 = Theme.Dropdown
			DropdownBar.ImageTransparency = 1
			DropdownBar.Parent = Dropdown

			local DropdownTitle = Objects.new(""Button"")
			DropdownTitle.Name = ""Title""
			DropdownTitle.Font = Enum.Font.GothamSemibold
			DropdownTitle.Text = DropdownValue and DropdownText.."": ""..DropdownValue or DropdownText
			DropdownTitle.TextColor3 = Theme.DropdownAccent
			DropdownTitle.TextTransparency = 1
			DropdownTitle.TextSize = 14
			DropdownTitle.Parent = DropdownBar

			local DropdownToggle = Objects.new(""Round"")
			DropdownToggle.Name = ""Container""
			DropdownToggle.Size = UDim2.fromOffset(24,24)
			DropdownToggle.Position = UDim2.fromScale(1,0.5) - UDim2.fromOffset(27,12)
			DropdownToggle.ImageColor3 = Theme.DropdownAccent
			DropdownToggle.ImageTransparency = 1 -- 0.8
			DropdownToggle.Parent = DropdownBar

			local DropdownButton = Objects.new(""Round"")
			DropdownButton.Name = ""Drop""
			DropdownButton.Image = ""http://www.roblox.com/asset/?id=5574299686""
			DropdownButton.ScaleType = Enum.ScaleType.Stretch
			DropdownButton.Size = UDim2.fromScale(1,1) - UDim2.fromOffset(4,4)
			DropdownButton.Position = UDim2.fromOffset(2,2)
			DropdownButton.ImageColor3 = Theme.DropdownAccent
			DropdownButton.ImageTransparency = 1
			DropdownButton.Parent = DropdownToggle

			TweenService:Create(DropdownBar, TweenInfo.new(0.5), {ImageTransparency = 0}):Play()
			TweenService:Create(DropdownTitle, TweenInfo.new(0.5), {TextTransparency = 0}):Play()
			TweenService:Create(DropdownToggle, TweenInfo.new(0.5), {ImageTransparency = 0.8}):Play()
			TweenService:Create(DropdownButton, TweenInfo.new(0.5), {ImageTransparency = 0}):Play()

			local DropdownContent = Objects.new(""Frame"")
			DropdownContent.Name = ""Content""
			DropdownContent.Size = UDim2.fromScale(1,0)
			DropdownContent.Position = UDim2.fromOffset(0,35)
			DropdownContent.ClipsDescendants = true
			DropdownContent.Parent = Dropdown

			local NumberOfOptions = #DropdownOptions
			local DropToggle = false
			local DropdownSize = UDim2.fromScale(1,0) + UDim2.fromOffset(0,(NumberOfOptions*20) + ((NumberOfOptions - 1) * 5))

			local DropdownList = Objects.new(""UIListLayout"")
			DropdownList.SortOrder = Enum.SortOrder.LayoutOrder
			DropdownList.Padding = UDim.new(0,5)
			DropdownList.Parent = DropdownContent

			DropdownList:GetPropertyChangedSignal(""AbsoluteContentSize""):Connect(function()
				if DropToggle then
					DropdownContent.Size = UDim2.fromScale(1,0) + UDim2.fromOffset(DropdownList.AbsoluteContentSize.Y)
					DropdownSize = UDim2.fromScale(1,0) + UDim2.fromOffset(DropdownList.AbsoluteContentSize.Y)
				end
			end)

			table.foreach(DropdownOptions, function(_, Value)
				local NewButton = CreateNewButton({
					Text = Value,
					Callback = function() end
				}, DropdownContent)

				NewButton.Size = UDim2.fromScale(1,0) + UDim2.fromOffset(0,20)
				NewButton.MouseButton1Down:Connect(function()
					DropdownCallback(Value)
					DropdownTitle.Text = DropdownText.."": ""..Value
                    DropdownValue = Value
				end)
			end)

			DropdownTitle.MouseButton1Down:Connect(function()
				DropToggle = not DropToggle
				TweenService:Create(DropdownButton, TweenInfo.new(0.15), {Rotation = DropToggle and 135 or 0}):Play()
				TweenService:Create(DropdownContent, TweenInfo.new(0.15), {Size = DropToggle and DropdownSize or UDim2.fromScale(1,0)}):Play()
				TweenService:Create(Dropdown, TweenInfo.new(0.15), {Size = DropToggle and (DropdownSize + UDim2.fromOffset(0,35)) or (UDim2.fromScale(1,0) + UDim2.fromOffset(0,30))}):Play()
			end)

			local MenuAdded, MenuButton = TryAddMenu(DropdownBar, Menu, {})

			if MenuAdded then
				DropdownToggle.Position = DropdownToggle.Position - UDim2.fromOffset(25,0)
				MenuButton.ImageColor3 = Theme.DropdownAccent
			end

			local DropdownLibrary = {}

			function DropdownLibrary:SetText(Value)
				DropdownTitle.Text = Value
			end

			function DropdownLibrary:GetText()
				return DropdownTitle.Text
			end

            function DropdownLibrary:GetValue()
                return DropdownValue
            end

			function DropdownLibrary:SetOptions(NewMenu)
				DropdownOptions = NewMenu or {}
				NumberOfOptions = #DropdownOptions
				DropdownSize = UDim2.fromScale(1,0) + UDim2.fromOffset(0,(NumberOfOptions*20) + ((NumberOfOptions - 1) * 5))

				if DropdownContent then
					DropdownContent:Destroy()
				end

				TweenService:Create(Dropdown, TweenInfo.new(0.15), {Size = DropToggle and (DropdownSize + UDim2.fromOffset(0,35)) or (UDim2.fromScale(1,0) + UDim2.fromOffset(0,30))}):Play()

				DropdownContent = Objects.new(""Frame"")
				DropdownContent.Name = ""Content""
				DropdownContent.Size = DropToggle and DropdownSize or UDim2.fromScale(1,0)
				DropdownContent.Position = UDim2.fromOffset(0,35)
				DropdownContent.ClipsDescendants = true
				DropdownContent.Parent = Dropdown

				local DropdownList = Objects.new(""UIListLayout"")
				DropdownList.SortOrder = Enum.SortOrder.LayoutOrder
				DropdownList.Padding = UDim.new(0,5)
				DropdownList.Parent = DropdownContent

				table.foreach(DropdownOptions, function(_, Value)
					local NewButton = CreateNewButton({
						Text = Value,
						Callback = function() end
					}, DropdownContent)

					NewButton.Size = UDim2.fromScale(1,0) + UDim2.fromOffset(0,20)
					NewButton.MouseButton1Down:Connect(function()
						DropdownCallback(Value)
						DropdownTitle.Text = DropdownText.."": ""..Value
                        DropdownValue = Value
					end)
				end)
			end

			function DropdownLibrary:GetOptions()
				return DropdownOptions
			end

			if DropdownOptions.Default then
				DropdownTitle.Text = DropdownText.."": ""..DropdownOptions.Default
			end

			return DropdownLibrary
		end

		function OptionLibrary.ChipSet(ChipSetConfig)
			local ChipSetText = ChipSetConfig.Text or ""nil chipset""
			local ChipSetCallback = ChipSetConfig.Callback or function() print(""nil chipset"") end
			local ChipSetOptions = ChipSetConfig.Options or {}

			local TotalOptions = 0

			table.foreach(ChipSetOptions, function()
				TotalOptions = TotalOptions + 1
			end)

			if TotalOptions > 0 then
				local Size = UDim2.fromScale(1,0) + UDim2.fromOffset(0,(TotalOptions*30)+((TotalOptions+1)*5))

				local ChipSet = Objects.new(""Round"")
				ChipSet.Name = ""ChipSet""
				ChipSet.Size = Size
				ChipSet.ImageColor3 = Theme.ChipSet
				ChipSet.ImageTransparency = 1
				ChipSet.Parent = PageContentFrame

				local ChipList = Objects.new(""UIListLayout"")
				ChipList.SortOrder = Enum.SortOrder.LayoutOrder
				ChipList.Padding = UDim.new(0,5)
				ChipList.Parent = ChipSet

				local ChipPadding = Objects.new(""UIPadding"")
				ChipPadding.PaddingBottom = UDim.new(0,5)
				ChipPadding.PaddingTop = UDim.new(0,5)
				ChipPadding.PaddingRight= UDim.new(0,5)
				ChipPadding.PaddingLeft = UDim.new(0,5)
				ChipPadding.Parent = ChipSet

				local BuildTable = {}

				table.foreach(ChipSetOptions, function(Key, Value)
					if typeof(Value) == ""table"" then
						BuildTable[Key] = Value.Enabled
					else
						BuildTable[Key] = Value
					end
				end)

				ChipSetCallback(BuildTable)

				TweenService:Create(ChipSet, TweenInfo.new(0.5), {ImageTransparency = 0.9}):Play()

				table.foreach(ChipSetOptions, function(Key, Value)
					local ChipItem = Objects.new(""SmoothButton"")
					ChipItem.Name = ""ChipItem""
					ChipItem.Size = UDim2.fromScale(1,0) + UDim2.fromOffset(0,30)
					ChipItem.ImageColor3 = BuildTable[Key] and Theme.ChipSet or Theme.ChipSetAccent
					ChipItem.ImageTransparency = 1
					ChipItem.Parent = ChipSet

					local ChipShadow = Objects.new(""Shadow"")
					ChipShadow.ImageColor3 = BuildTable[Key] and Theme.ChipSet or Theme.ChipSetAccent
					ChipShadow.ImageTransparency = 1
					ChipShadow.Parent = ChipItem

					local Tick = Objects.new(""Round"")
					Tick.ScaleType = Enum.ScaleType.Stretch
					Tick.Image = ""http://www.roblox.com/asset/?id=5554953789""
					Tick.ImageColor3 = Theme.ChipSetAccent
					Tick.ImageTransparency = 1
					Tick.Size = UDim2.fromScale(1,1) - UDim2.fromOffset(10,10)
					Tick.SizeConstraint = Enum.SizeConstraint.RelativeYY
					Tick.Position = UDim2.fromOffset(5,5)
					Tick.Parent = ChipItem

					local ChipLabel = Objects.new(""Label"")
					ChipLabel.Size = BuildTable[Key] and (UDim2.fromScale(1,1) - UDim2.fromOffset(30)) or (UDim2.fromScale(1,1) - UDim2.fromOffset(5))
					ChipLabel.Position = BuildTable[Key] and UDim2.fromOffset(30) or UDim2.fromOffset(5)
					ChipLabel.Text = Key
					ChipLabel.Font = Enum.Font.Gotham
					ChipLabel.TextSize = 12
					ChipLabel.TextColor3 = BuildTable[Key] and Theme.ChipSetAccent or Theme.ChipSet
					ChipLabel.TextTransparency = 1
					ChipLabel.Parent = ChipItem

					TweenService:Create(ChipItem, TweenInfo.new(0.5), {ImageTransparency = 0}):Play()
					TweenService:Create(ChipShadow, TweenInfo.new(0.5), {ImageTransparency = 0.2}):Play()
					TweenService:Create(Tick, TweenInfo.new(0.5), {ImageTransparency = BuildTable[Key] and 0 or 1}):Play()
					TweenService:Create(ChipLabel, TweenInfo.new(0.5), {TextTransparency = 0}):Play()

					local ChipMenu

					if typeof(Value) == ""table"" then
						local Menu = Value.Menu or {}

						local MenuAdded, MenuButton = TryAddMenu(ChipItem, Menu, {})

						MenuButton.ImageColor3 = BuildTable[Key] and Theme.ChipSetAccent or Theme.ChipSet

						ChipMenu = MenuButton
					end

					ChipItem.MouseButton1Down:Connect(function()
						BuildTable[Key] = not BuildTable[Key]
						local Enabled = BuildTable[Key]
						TweenService:Create(ChipItem, TweenInfo.new(0.15), {ImageColor3 = Enabled and Theme.ChipSet or Theme.ChipSetAccent}):Play()
						TweenService:Create(ChipShadow, TweenInfo.new(0.15), {ImageColor3 = Enabled and Theme.ChipSet or Theme.ChipSetAccent}):Play()
						TweenService:Create(Tick, TweenInfo.new(0.15), {ImageTransparency = Enabled and 0 or 1}):Play()
						TweenService:Create(ChipLabel, TweenInfo.new(0.15), {TextColor3 = Enabled and Theme.ChipSetAccent or Theme.ChipSet, Position = Enabled and UDim2.fromOffset(30) or UDim2.fromOffset(5), Size = Enabled and (UDim2.fromScale(1,1) - UDim2.fromOffset(30)) or (UDim2.fromScale(1,1) - UDim2.fromOffset(5))}):Play()
						if ChipMenu then
							TweenService:Create(ChipMenu, TweenInfo.new(0.15), {ImageColor3 = Enabled and Theme.ChipSetAccent or Theme.ChipSet}):Play()
						end
						ChipSetCallback(BuildTable)
					end)
				end)

				local ChipSetLibrary = {}

				function ChipSetLibrary:SetOptions(NewMenu)
					ChipSetOptions = NewMenu or {}

					TotalOptions = 0

					table.foreach(ChipSetOptions, function()
						TotalOptions = TotalOptions + 1
					end)

					for _, Element in next, ChipSet:GetChildren() do
						Element:Destroy()
					end

					Size = UDim2.fromScale(1,0) + UDim2.fromOffset(0,(TotalOptions*30)+((TotalOptions+1)*5))

					TweenService:Create(ChipSet, TweenInfo.new(0.15), {Size = Size}):Play()

					local ChipList = Objects.new(""UIListLayout"")
					ChipList.SortOrder = Enum.SortOrder.LayoutOrder
					ChipList.Padding = UDim.new(0,5)
					ChipList.Parent = ChipSet

					local ChipPadding = Objects.new(""UIPadding"")
					ChipPadding.PaddingBottom = UDim.new(0,5)
					ChipPadding.PaddingTop = UDim.new(0,5)
					ChipPadding.PaddingRight= UDim.new(0,5)
					ChipPadding.PaddingLeft = UDim.new(0,5)
					ChipPadding.Parent = ChipSet

					local BuildTable = {}

					table.foreach(ChipSetOptions, function(Key, Value)
						if typeof(Value) == ""table"" then
							BuildTable[Key] = Value.Enabled
						else
							BuildTable[Key] = Value
						end
					end)

					ChipSetCallback(BuildTable)

					TweenService:Create(ChipSet, TweenInfo.new(0.5), {ImageTransparency = 0.9}):Play()

					table.foreach(ChipSetOptions, function(Key, Value)
						local ChipItem = Objects.new(""SmoothButton"")
						ChipItem.Name = ""ChipItem""
						ChipItem.Size = UDim2.fromScale(1,0) + UDim2.fromOffset(0,30)
						ChipItem.ImageColor3 = BuildTable[Key] and Theme.ChipSet or Theme.ChipSetAccent
						ChipItem.ImageTransparency = 1
						ChipItem.Parent = ChipSet

						local ChipShadow = Objects.new(""Shadow"")
						ChipShadow.ImageColor3 = BuildTable[Key] and Theme.ChipSet or Theme.ChipSetAccent
						ChipShadow.ImageTransparency = 1
						ChipShadow.Parent = ChipItem

						local Tick = Objects.new(""Round"")
						Tick.ScaleType = Enum.ScaleType.Stretch
						Tick.Image = ""http://www.roblox.com/asset/?id=5554953789""
						Tick.ImageColor3 = Theme.ChipSetAccent
						Tick.ImageTransparency = 1
						Tick.Size = UDim2.fromScale(1,1) - UDim2.fromOffset(10,10)
						Tick.SizeConstraint = Enum.SizeConstraint.RelativeYY
						Tick.Position = UDim2.fromOffset(5,5)
						Tick.Parent = ChipItem

						local ChipLabel = Objects.new(""Label"")
						ChipLabel.Size = BuildTable[Key] and (UDim2.fromScale(1,1) - UDim2.fromOffset(30)) or (UDim2.fromScale(1,1) - UDim2.fromOffset(5))
						ChipLabel.Position = BuildTable[Key] and UDim2.fromOffset(30) or UDim2.fromOffset(5)
						ChipLabel.Text = Key
						ChipLabel.Font = Enum.Font.Gotham
						ChipLabel.TextSize = 12
						ChipLabel.TextColor3 = BuildTable[Key] and Theme.ChipSetAccent or Theme.ChipSet
						ChipLabel.TextTransparency = 1
						ChipLabel.Parent = ChipItem

						TweenService:Create(ChipItem, TweenInfo.new(0.5), {ImageTransparency = 0}):Play()
						TweenService:Create(ChipShadow, TweenInfo.new(0.5), {ImageTransparency = 0.2}):Play()
						TweenService:Create(Tick, TweenInfo.new(0.5), {ImageTransparency = BuildTable[Key] and 0 or 1}):Play()
						TweenService:Create(ChipLabel, TweenInfo.new(0.5), {TextTransparency = 0}):Play()

						local ChipMenu

						if typeof(Value) == ""table"" then
							local Menu = Value.Menu or {}

							local MenuAdded, MenuButton = TryAddMenu(ChipItem, Menu, {})

							MenuButton.ImageColor3 = BuildTable[Key] and Theme.ChipSetAccent or Theme.ChipSet

							ChipMenu = MenuButton
						end

						ChipItem.MouseButton1Down:Connect(function()
							BuildTable[Key] = not BuildTable[Key]
							local Enabled = BuildTable[Key]
							TweenService:Create(ChipItem, TweenInfo.new(0.15), {ImageColor3 = Enabled and Theme.ChipSet or Theme.ChipSetAccent}):Play()
							TweenService:Create(ChipShadow, TweenInfo.new(0.15), {ImageColor3 = Enabled and Theme.ChipSet or Theme.ChipSetAccent}):Play()
							TweenService:Create(Tick, TweenInfo.new(0.15), {ImageTransparency = Enabled and 0 or 1}):Play()
							TweenService:Create(ChipLabel, TweenInfo.new(0.15), {TextColor3 = Enabled and Theme.ChipSetAccent or Theme.ChipSet, Position = Enabled and UDim2.fromOffset(30) or UDim2.fromOffset(5), Size = Enabled and (UDim2.fromScale(1,1) - UDim2.fromOffset(30)) or (UDim2.fromScale(1,1) - UDim2.fromOffset(5))}):Play()
							if ChipMenu then
								TweenService:Create(ChipMenu, TweenInfo.new(0.15), {ImageColor3 = Enabled and Theme.ChipSetAccent or Theme.ChipSet}):Play()
							end
							ChipSetCallback(BuildTable)
						end)
					end)
				end

				function ChipSetLibrary:GetOptions()
					return ChipSetOptions
				end

				return ChipSetLibrary
			end
		end

		function OptionLibrary.DataTable(DataTableConfig)
			local DataTableText = DataTableConfig.Text or ""nil chipset""
			local DataTableCallback = DataTableConfig.Callback or function() print(""nil chipset"") end
			local DataTableOptions = DataTableConfig.Options or {}

			local TotalOptions = 0

			table.foreach(DataTableOptions, function()
				TotalOptions = TotalOptions + 1
			end)

			if TotalOptions > 0 then

				local Size = UDim2.fromScale(1,0) + UDim2.fromOffset(0,(TotalOptions*30)+((TotalOptions+1)*5))

				local DataTable = Objects.new(""Round"")
				DataTable.Name = ""DataTable""
				DataTable.Size = Size
				DataTable.ImageColor3 = Theme.DataTable
				DataTable.ImageTransparency = 1
				DataTable.Parent = PageContentFrame

				local DataShadow = Objects.new(""Shadow"")
				DataShadow.ImageColor3 = Theme.DataTable
				DataShadow.ImageTransparency = 1
				DataShadow.Parent = DataTable

				local DataContainer = Objects.new(""Frame"")
				DataContainer.Name = ""Container""
				DataContainer.Parent = DataTable

				local DataList = Objects.new(""UIListLayout"")
				DataList.SortOrder = Enum.SortOrder.LayoutOrder
				DataList.Padding = UDim.new(0,5)
				DataList.Parent = DataContainer

				local DataPadding = Objects.new(""UIPadding"")
				DataPadding.PaddingBottom = UDim.new(0,5)
				DataPadding.PaddingTop = UDim.new(0,5)
				DataPadding.PaddingRight= UDim.new(0,5)
				DataPadding.PaddingLeft = UDim.new(0,5)
				DataPadding.Parent = DataContainer

				local BuildTable = {}

				table.foreach(DataTableOptions, function(Key, Value)
					if typeof(Value) == ""table"" then
						BuildTable[Key] = Value.Enabled
					else
						BuildTable[Key] = Value
					end
				end)

				DataTableCallback(BuildTable)

				TweenService:Create(DataTable, TweenInfo.new(0.5), {ImageTransparency = 0.9}):Play()
				TweenService:Create(DataShadow, TweenInfo.new(0.5), {ImageTransparency = 0.8}):Play()

				table.foreach(DataTableOptions, function(Key, Value)
					local DataItem = Objects.new(""SmoothButton"")
					DataItem.Name = ""DataItem""
					DataItem.Size = UDim2.fromScale(1,0) + UDim2.fromOffset(0,30)
					DataItem.ImageColor3 = BuildTable[Key] and Theme.DataTable or Theme.DataTableAccent
					DataItem.ImageTransparency = 1
					DataItem.Parent = DataContainer

					local DataTracker = Objects.new(""Round"")
					DataTracker.Name = ""Tracker""
					DataTracker.Size = UDim2.fromOffset(24,24)
					DataTracker.Position = UDim2.fromScale(0,0.5) + UDim2.fromOffset(3,-12)
					DataTracker.ImageColor3 = Theme.DataTable
					DataTracker.ImageTransparency = 1
					DataTracker.Parent = DataItem

					local Tick = Objects.new(""Round"")
					Tick.Name = ""Tick""
					Tick.ScaleType = Enum.ScaleType.Stretch
					Tick.Image = ""http://www.roblox.com/asset/?id=5554953789""
					Tick.ImageColor3 = Theme.DataTableAccent
					Tick.ImageTransparency = 1
					Tick.Size = UDim2.fromScale(1,1) - UDim2.fromOffset(4,4)
					Tick.SizeConstraint = Enum.SizeConstraint.RelativeYY
					Tick.Position = UDim2.fromOffset(2,2)
					Tick.Parent = DataTracker

					local DataLabel = Objects.new(""Label"")
					DataLabel.Name = ""Value""
					DataLabel.Size = (UDim2.fromScale(1,1) - UDim2.fromOffset(30))
					DataLabel.Position = UDim2.fromOffset(30) or UDim2.fromOffset(5)
					DataLabel.Text = Key
					DataLabel.Font = Enum.Font.Gotham
					DataLabel.TextSize = 14
					DataLabel.TextColor3 = Theme.DataTable
					DataLabel.TextTransparency = 1
					DataLabel.Parent = DataItem

					TweenService:Create(DataItem, TweenInfo.new(0.5), {ImageTransparency = BuildTable[Key] and 0.8 or 0}):Play()
					TweenService:Create(DataTracker, TweenInfo.new(0.5), {ImageTransparency = BuildTable[Key] and 0 or 0.8}):Play()
					TweenService:Create(Tick, TweenInfo.new(0.5), {ImageTransparency = BuildTable[Key] and 0 or 0.7}):Play()
					TweenService:Create(DataLabel, TweenInfo.new(0.5), {TextTransparency = 0}):Play()

					local DataMenu

					if typeof(Value) == ""table"" then
						local Menu = Value.Menu or {}

						local MenuAdded, MenuButton = TryAddMenu(DataItem, Menu, {})

						MenuButton.ImageColor3 = Theme.DataTable

						DataMenu = MenuButton
					end

					DataItem.MouseButton1Down:Connect(function()
						BuildTable[Key] = not BuildTable[Key]
						local Enabled = BuildTable[Key]
						TweenService:Create(DataItem, TweenInfo.new(0.15), {ImageTransparency = Enabled and 0.8 or 0, ImageColor3 = Enabled and Theme.DataTable or Theme.DataTableAccent}):Play()
						TweenService:Create(Tick, TweenInfo.new(0.15), {ImageTransparency = Enabled and 0 or 0.7}):Play()
						TweenService:Create(DataTracker, TweenInfo.new(0.15), {ImageTransparency = Enabled and 0 or 0.8}):Play()
						DataTableCallback(BuildTable)
					end)
				end)

				local DataTableLibrary = {}

				function DataTableLibrary:SetOptions(NewMenu)
					if DataContainer then
						DataContainer:Destroy()
					end

					DataTableOptions = NewMenu or {}

					TotalOptions = 0

					table.foreach(DataTableOptions, function()
						TotalOptions = TotalOptions + 1
					end)

					Size = UDim2.fromScale(1,0) + UDim2.fromOffset(0,(TotalOptions*30)+((TotalOptions+1)*5))

					DataTable.Size = Size

					DataContainer = Objects.new(""Frame"")
					DataContainer.Name = ""Container""
					DataContainer.Parent = DataTable

					local DataList = Objects.new(""UIListLayout"")
					DataList.SortOrder = Enum.SortOrder.LayoutOrder
					DataList.Padding = UDim.new(0,5)
					DataList.Parent = DataContainer

					local DataPadding = Objects.new(""UIPadding"")
					DataPadding.PaddingBottom = UDim.new(0,5)
					DataPadding.PaddingTop = UDim.new(0,5)
					DataPadding.PaddingRight= UDim.new(0,5)
					DataPadding.PaddingLeft = UDim.new(0,5)
					DataPadding.Parent = DataContainer

					local BuildTable = {}

					table.foreach(DataTableOptions, function(Key, Value)
						if typeof(Value) == ""table"" then
							BuildTable[Key] = Value.Enabled
						else
							BuildTable[Key] = Value
						end
					end)

					DataTableCallback(BuildTable)

					TweenService:Create(DataTable, TweenInfo.new(0.5), {ImageTransparency = 0.9}):Play()
					TweenService:Create(DataShadow, TweenInfo.new(0.5), {ImageTransparency = 0.8}):Play()

					table.foreach(DataTableOptions, function(Key, Value)
						local DataItem = Objects.new(""SmoothButton"")
						DataItem.Name = ""DataItem""
						DataItem.Size = UDim2.fromScale(1,0) + UDim2.fromOffset(0,30)
						DataItem.ImageColor3 = BuildTable[Key] and Theme.DataTable or Theme.DataTableAccent
						DataItem.ImageTransparency = 1
						DataItem.Parent = DataContainer

						local DataTracker = Objects.new(""Round"")
						DataTracker.Name = ""Tracker""
						DataTracker.Size = UDim2.fromOffset(24,24)
						DataTracker.Position = UDim2.fromScale(0,0.5) + UDim2.fromOffset(3,-12)
						DataTracker.ImageColor3 = Theme.DataTable
						DataTracker.ImageTransparency = 1
						DataTracker.Parent = DataItem

						local Tick = Objects.new(""Round"")
						Tick.Name = ""Tick""
						Tick.ScaleType = Enum.ScaleType.Stretch
						Tick.Image = ""http://www.roblox.com/asset/?id=5554953789""
						Tick.ImageColor3 = Theme.DataTableAccent
						Tick.ImageTransparency = 1
						Tick.Size = UDim2.fromScale(1,1) - UDim2.fromOffset(4,4)
						Tick.SizeConstraint = Enum.SizeConstraint.RelativeYY
						Tick.Position = UDim2.fromOffset(2,2)
						Tick.Parent = DataTracker

						local DataLabel = Objects.new(""Label"")
						DataLabel.Name = ""Value""
						DataLabel.Size = (UDim2.fromScale(1,1) - UDim2.fromOffset(30))
						DataLabel.Position = UDim2.fromOffset(30) or UDim2.fromOffset(5)
						DataLabel.Text = Key
						DataLabel.Font = Enum.Font.Gotham
						DataLabel.TextSize = 14
						DataLabel.TextColor3 = Theme.DataTable
						DataLabel.TextTransparency = 1
						DataLabel.Parent = DataItem

						TweenService:Create(DataItem, TweenInfo.new(0.5), {ImageTransparency = BuildTable[Key] and 0.8 or 0}):Play()
						TweenService:Create(DataTracker, TweenInfo.new(0.5), {ImageTransparency = BuildTable[Key] and 0 or 0.8}):Play()
						TweenService:Create(Tick, TweenInfo.new(0.5), {ImageTransparency = BuildTable[Key] and 0 or 0.7}):Play()
						TweenService:Create(DataLabel, TweenInfo.new(0.5), {TextTransparency = 0}):Play()

						local DataMenu

						if typeof(Value) == ""table"" then
							local Menu = Value.Menu or {}

							local MenuAdded, MenuButton = TryAddMenu(DataItem, Menu, {})

							MenuButton.ImageColor3 = Theme.DataTable

							DataMenu = MenuButton
						end

						DataItem.MouseButton1Down:Connect(function()
							BuildTable[Key] = not BuildTable[Key]
							local Enabled = BuildTable[Key]
							TweenService:Create(DataItem, TweenInfo.new(0.15), {ImageTransparency = Enabled and 0.8 or 0, ImageColor3 = Enabled and Theme.DataTable or Theme.DataTableAccent}):Play()
							TweenService:Create(Tick, TweenInfo.new(0.15), {ImageTransparency = Enabled and 0 or 0.7}):Play()
							TweenService:Create(DataTracker, TweenInfo.new(0.15), {ImageTransparency = Enabled and 0 or 0.8}):Play()
							DataTableCallback(BuildTable)
						end)
					end)
				end

				function DataTableLibrary:GetOptions()
					return DataTableOptions
				end

				return DataTableLibrary
			end
		end

		function OptionLibrary.ColorPicker(ColorPickerConfig)
			local ColorPickerText = ColorPickerConfig.Text or ""nil color picker""
			local ColorPickerCallback = ColorPickerConfig.Callback or function() print(""nil color picker"") end
			local ColorPickerDefault = ColorPickerConfig.Default or Color3.fromRGB(255,255,255)
			local ColorPickerMenu = ColorPickerConfig.Menu or {}
			local ColorPickerToggle = false

			local H, S, V = Objects.new(""NumberValue""), Objects.new(""NumberValue""), Objects.new(""NumberValue"")

			H.Value, S.Value, V.Value = Color3.toHSV(ColorPickerDefault)

			local ColorPicker = Objects.new(""SmoothButton"")
			ColorPicker.Name = ""ColorPicker""
			ColorPicker.Size = UDim2.fromScale(1,0) + UDim2.fromOffset(0,40)
			ColorPicker.ImageColor3 = Theme.ColorPicker
			ColorPicker.ImageTransparency = 1
			ColorPicker.ClipsDescendants = true
			ColorPicker.Parent = PageContentFrame

			ColorPicker.MouseButton1Down:Connect(function()
				ColorPickerToggle = not ColorPickerToggle
				TweenService:Create(ColorPicker, TweenInfo.new(0.15), {Size = UDim2.fromScale(1,0) + (ColorPickerToggle and UDim2.fromOffset(0,115) or UDim2.fromOffset(0,40))}):Play()
			end)

			local ColorBar = Objects.new(""Round"")
			ColorBar.Name = ""TitleBar""
			ColorBar.Size = UDim2.fromScale(1,0) + UDim2.fromOffset(-10,30)
			ColorBar.Position = UDim2.fromOffset(5,5)
			ColorBar.ImageColor3 = Theme.ColorPickerAccent
			ColorBar.ImageTransparency = 1
			ColorBar.Parent = ColorPicker

			local ColorShadow = Objects.new(""Shadow"")
			ColorShadow.ImageColor3 = Theme.ColorPickerAccent
			ColorShadow.ImageTransparency = 1
			ColorShadow.Parent = ColorBar

			local ColorLabel = Objects.new(""Label"")
			ColorLabel.Name = ""Title""
			ColorLabel.Font = Enum.Font.GothamSemibold
			ColorLabel.TextColor3 = Theme.ColorPickerAccent
			ColorLabel.TextSize = 14
			ColorLabel.Text = ColorPickerText
			ColorLabel.TextTransparency = 1
			ColorLabel.Parent = ColorBar

			local ColorTracker = Objects.new(""Round"")
			ColorTracker.Name = ""Tracker""
			ColorTracker.Size = UDim2.fromOffset(50,20)
			ColorTracker.Position = UDim2.fromScale(1,0) + UDim2.fromOffset(-55,5)
			ColorTracker.ImageColor3 = ColorPickerDefault
			ColorTracker.ImageTransparency = 1
			ColorTracker.Parent = ColorBar

			local TrackerShadow = Objects.new(""Shadow"")
			TrackerShadow.ImageColor3 = ColorTracker.ImageColor3
			TrackerShadow.ImageTransparency = 1
			TrackerShadow.Parent = ColorTracker

			ColorTracker:GetPropertyChangedSignal(""ImageColor3""):Connect(function()
				TrackerShadow.ImageColor3 = ColorTracker.ImageColor3
			end)

			local Hue = Objects.new(""Round"")
			Hue.Name = ""Container""
			Hue.Position = UDim2.fromOffset(5,40)
			Hue.Size = UDim2.fromOffset(25,20)
			Hue.ImageColor3 = Theme.ColorPickerAccent
			Hue.ImageTransparency = 0.8
			Hue.Parent = ColorPicker

			local Saturation = Hue:Clone()
			Saturation.Position = Saturation.Position + UDim2.fromOffset(0,25)
			Saturation.Parent = ColorPicker

			local Value = Saturation:Clone()
			Value.Position = Value.Position + UDim2.fromOffset(0,25)
			Value.Parent = ColorPicker

			local HueLabel = Objects.new(""Label"")
			HueLabel.Name = ""Label""
			HueLabel.TextXAlignment = Enum.TextXAlignment.Center
			HueLabel.Position = UDim2.fromScale(0,0)
			HueLabel.Size = UDim2.fromScale(1,1)
			HueLabel.Text = ""H""
			HueLabel.TextColor3 = Theme.ColorPickerAccent
			HueLabel.TextSize = 12
			HueLabel.Font = Enum.Font.GothamBold
			HueLabel.TextTransparency = 1
			HueLabel.Parent = Hue

			local SaturationLabel = HueLabel:Clone()
			SaturationLabel.Text = ""S""
			SaturationLabel.Parent = Saturation

			local ValueLabel = HueLabel:Clone()
			ValueLabel.Text = ""V""
			ValueLabel.Parent = Value

			local function CSK(T,C)
				return ColorSequenceKeypoint.new(T,C)
			end

			local RainbowGradient = Objects.new(""UIGradient"")
			RainbowGradient.Color = ColorSequence.new({
				CSK(0, Color3.fromRGB(255,0,0)),
				CSK(0.157, Color3.fromRGB(255,0,255)),
				CSK(0.323, Color3.fromRGB(0,0,255)),
				CSK(0.488, Color3.fromRGB(0,255,255)),
				CSK(0.66, Color3.fromRGB(0,255,0)),
				CSK(0.817, Color3.fromRGB(255,255,0)),
				CSK(1, Color3.fromRGB(255,0,0))
			})

			local BlackWhiteGradient = Objects.new(""UIGradient"")
			BlackWhiteGradient.Color = ColorSequence.new(
				Color3.new(1,1,1),
				Color3.new(0,0,0)
			)

			local SaturationGradient = Objects.new(""UIGradient"")
			SaturationGradient.Color = ColorSequence.new(
				Color3.fromHSV(H.Value,1,V.Value),
				Color3.new(0,0,0):Lerp(Color3.fromRGB(255,255,255), V.Value)
			)

			local HueTracker = Objects.new(""SmoothButton"")
			HueTracker.Name = ""Tracker""
			HueTracker.ImageColor3 = Color3.fromRGB(255,255,255)
			HueTracker.ImageTransparency = 1
			HueTracker.Size = UDim2.fromScale(1,0) + UDim2.fromOffset(-40,20)
			HueTracker.Position = UDim2.fromOffset(35,40)
			HueTracker.Parent = ColorPicker

			local SaturationTracker = HueTracker:Clone()
			SaturationTracker.Position = SaturationTracker.Position + UDim2.fromOffset(0,25)
			SaturationTracker.Parent = ColorPicker

			local ValueTracker = SaturationTracker:Clone()
			ValueTracker.Position = ValueTracker.Position + UDim2.fromOffset(0,25)
			ValueTracker.Parent = ColorPicker

			local HueShadow = Objects.new(""Shadow"")
			HueShadow.ImageColor3 = Color3.fromRGB(255,255,255)
			HueShadow.ImageTransparency = 1
			HueShadow.Parent = HueTracker

			local SaturationShadow = HueShadow:Clone()
			SaturationShadow.Parent = SaturationTracker

			local ValueShadow = HueShadow:Clone()
			ValueShadow.Parent = ValueTracker

			local HueGrad = RainbowGradient:Clone()
			HueGrad.Parent = HueTracker
			local HueShadowGrad = RainbowGradient:Clone()
			HueShadowGrad.Parent = HueShadow

			local ValueGrad = BlackWhiteGradient:Clone()
			ValueGrad.Parent = ValueTracker
			local ValueShadowGrad = BlackWhiteGradient:Clone()
			ValueShadowGrad.Parent = ValueShadow

			local SaturationGrad = SaturationGradient:Clone()
			SaturationGrad.Parent = SaturationTracker
			local SaturationShadowGrad = SaturationGradient:Clone()
			SaturationShadowGrad.Parent = SaturationShadow

			TweenService:Create(ColorPicker, TweenInfo.new(0.5), {ImageTransparency = 0.5}):Play()
			TweenService:Create(ColorBar, TweenInfo.new(0.5), {ImageTransparency = 0.8}):Play()
			TweenService:Create(ColorShadow, TweenInfo.new(0.5), {ImageTransparency = 0.5}):Play()
			TweenService:Create(ColorLabel, TweenInfo.new(0.5), {TextTransparency = 0}):Play()
			TweenService:Create(HueLabel, TweenInfo.new(0.5), {TextTransparency = 0}):Play()
			TweenService:Create(SaturationLabel, TweenInfo.new(0.5), {TextTransparency = 0}):Play()
			TweenService:Create(ValueLabel, TweenInfo.new(0.5), {TextTransparency = 0}):Play()
			TweenService:Create(ColorTracker, TweenInfo.new(0.5), {ImageTransparency = 0}):Play()
			TweenService:Create(TrackerShadow, TweenInfo.new(0.5), {ImageTransparency = 0.2}):Play()
			TweenService:Create(HueTracker, TweenInfo.new(0.5), {ImageTransparency = 0}):Play()
			TweenService:Create(ValueTracker, TweenInfo.new(0.5), {ImageTransparency = 0}):Play()
			TweenService:Create(SaturationTracker, TweenInfo.new(0.5), {ImageTransparency = 0}):Play()
			TweenService:Create(HueShadow, TweenInfo.new(0.5), {ImageTransparency = 0}):Play()
			TweenService:Create(SaturationShadow, TweenInfo.new(0.5), {ImageTransparency = 0}):Play()
			TweenService:Create(ValueShadow, TweenInfo.new(0.5), {ImageTransparency = 0}):Play()

			H:GetPropertyChangedSignal(""Value""):Connect(function()
				ColorTracker.ImageColor3 = Color3.fromHSV(H.Value,S.Value,V.Value)
				SaturationGrad.Color = ColorSequence.new(
					Color3.fromHSV(H.Value,1,V.Value),
					Color3.fromRGB(0,0,0):Lerp(Color3.fromRGB(255,255,255),V.Value)
				)
				SaturationShadowGrad.Color = ColorSequence.new(
					Color3.fromHSV(H.Value,1,V.Value),
					Color3.fromRGB(0,0,0):Lerp(Color3.fromRGB(255,255,255),V.Value)
				)
				ColorPickerCallback(Color3.fromHSV(H.Value,S.Value,V.Value))
			end)

			S:GetPropertyChangedSignal(""Value""):Connect(function()
				ColorTracker.ImageColor3 = Color3.fromHSV(H.Value,S.Value,V.Value)
				SaturationGrad.Color = ColorSequence.new(
					Color3.fromHSV(H.Value,1,V.Value),
					Color3.fromRGB(0,0,0):Lerp(Color3.fromRGB(255,255,255),V.Value)
				)
				SaturationShadowGrad.Color = ColorSequence.new(
					Color3.fromHSV(H.Value,1,V.Value),
					Color3.fromRGB(0,0,0):Lerp(Color3.fromRGB(255,255,255),V.Value)
				)
				ColorPickerCallback(Color3.fromHSV(H.Value,S.Value,V.Value))
			end)

			V:GetPropertyChangedSignal(""Value""):Connect(function()
				ColorTracker.ImageColor3 = Color3.fromHSV(H.Value,S.Value,V.Value)
				SaturationGrad.Color = ColorSequence.new(
					Color3.fromHSV(H.Value,1,V.Value),
					Color3.fromRGB(0,0,0):Lerp(Color3.fromRGB(255,255,255),V.Value)
				)
				SaturationShadowGrad.Color = ColorSequence.new(
					Color3.fromHSV(H.Value,1,V.Value),
					Color3.fromRGB(0,0,0):Lerp(Color3.fromRGB(255,255,255),V.Value)
				)
				ColorPickerCallback(Color3.fromHSV(H.Value,S.Value,V.Value))
			end)

			HueTracker.MouseButton1Down:Connect(function()
				H.Value = 1 - GetXY(HueTracker)
				local MouseMove, MouseKill
				MouseMove = Mouse.Move:Connect(function()
					H.Value = 1 - GetXY(HueTracker)
				end)
				MouseKill = InputService.InputEnded:Connect(function(UserInput)
					if UserInput.UserInputType == Enum.UserInputType.MouseButton1 then
						MouseMove:Disconnect()
						MouseKill:Disconnect()
					end
				end)
			end)

			ValueTracker.MouseButton1Down:Connect(function()
				V.Value = 1 - GetXY(HueTracker)
				local MouseMove, MouseKill
				MouseMove = Mouse.Move:Connect(function()
					V.Value = 1 - GetXY(HueTracker)
				end)
				MouseKill = InputService.InputEnded:Connect(function(UserInput)
					if UserInput.UserInputType == Enum.UserInputType.MouseButton1 then
						MouseMove:Disconnect()
						MouseKill:Disconnect()
					end
				end)
			end)

			SaturationTracker.MouseButton1Down:Connect(function()
				S.Value = 1 - GetXY(HueTracker)
				local MouseMove, MouseKill
				MouseMove = Mouse.Move:Connect(function()
					S.Value = 1 - GetXY(HueTracker)
				end)
				MouseKill = InputService.InputEnded:Connect(function(UserInput)
					if UserInput.UserInputType == Enum.UserInputType.MouseButton1 then
						MouseMove:Disconnect()
						MouseKill:Disconnect()
					end
				end)
			end)

			local MenuAdded, MenuButton = TryAddMenu(ColorLabel, ColorPickerMenu, {})

			if MenuAdded then
				ColorTracker.Position = ColorTracker.Position - UDim2.fromOffset(25,0)
				MenuButton.ImageColor3 = Theme.ColorPickerAccent
			end

			local ColorPickerLibrary = {}

			function ColorPickerLibrary:SetText(Value)
				ColorLabel.Text = Value
			end

			function ColorPickerLibrary:GetText()
				return ColorLabel.Text
			end

			function ColorPickerLibrary:SetColor(Value)
				H.Value, S.Value, V.Value = Color3.toHSV(Value)
			end

			function ColorPickerLibrary:GetColor()
				return ColorTracker.ImageColor3
			end

			return ColorPickerLibrary
		end

		function OptionLibrary.Toggle(ToggleConfig)
			local ToggleText = ToggleConfig.Text or ""nil toggle""
			local ToggleCallback = ToggleConfig.Callback or function() print(""nil toggle"") end
			local ToggleDefault = ToggleConfig.Enabled or false
			local Menu = ToggleConfig.Menu or {}

			local Toggle = Objects.new(""SmoothButton"")
			Toggle.Name = ""Toggle""
			Toggle.Size = UDim2.fromScale(1,0) + UDim2.fromOffset(0,30)
			Toggle.ImageColor3 = Theme.Toggle
			Toggle.ImageTransparency = 1
			Toggle.Parent = PageContentFrame

			local ToggleTracker = Objects.new(""Round"")
			ToggleTracker.Name = ""Tracker""
			ToggleTracker.Image = ""rbxassetid://3570695787""
			ToggleTracker.SliceCenter = Rect.new(100,100,100,100)
			ToggleTracker.SliceScale = 1
			ToggleTracker.Size = UDim2.fromOffset(26,12)
			ToggleTracker.Position = UDim2.fromScale(1,0.5) - UDim2.fromOffset(41,6)
			ToggleTracker.ImageColor3 = Theme.Toggle
			ToggleTracker.ImageTransparency = 1
			ToggleTracker.Parent = Toggle

			local Dot = Objects.new(""Circle"")
			Dot.Name = ""Dot""
			Dot.Size = UDim2.fromOffset(16,16)
			Dot.Position = UDim2.fromScale(0,0.5) - UDim2.fromOffset(8,8)
			Dot.ImageColor3 = Theme.ToggleAccent
			Dot.ImageTransparency = 1
			Dot.Parent = ToggleTracker

			local DotShadow = Objects.new(""Round"")
			DotShadow.Name = ""Shadow""
			DotShadow.Image = ""http://www.roblox.com/asset/?id=5554831957""
			DotShadow.ScaleType = Enum.ScaleType.Stretch
			DotShadow.Size = UDim2.fromOffset(31,31)
			DotShadow.Position = UDim2.fromOffset(-8,-8)
			DotShadow.ImageColor3 = Theme.Toggle
			DotShadow.ImageTransparency = 1
			DotShadow.Parent = Dot

			local ToggleLabel = Objects.new(""Label"")
			ToggleLabel.Font = Enum.Font.GothamSemibold
			ToggleLabel.TextSize = 14
			ToggleLabel.Text = ToggleText
			ToggleLabel.TextColor3 = Theme.Toggle
			ToggleLabel.TextTransparency = 1
			ToggleLabel.ClipsDescendants = true
			ToggleLabel.Parent = Toggle

			TweenService:Create(Toggle, TweenInfo.new(0.5), {ImageTransparency = 0.8}):Play()
			TweenService:Create(ToggleTracker, TweenInfo.new(0.5), {ImageTransparency = 0.5}):Play()
			TweenService:Create(Dot, TweenInfo.new(0.5), {ImageTransparency = 0}):Play()
			TweenService:Create(DotShadow, TweenInfo.new(0.5), {ImageTransparency = 0.5}):Play()
			TweenService:Create(ToggleLabel, TweenInfo.new(0.5), {TextTransparency = 0}):Play()

			TweenService:Create(Dot, TweenInfo.new(0.15), {Position = (ToggleDefault and UDim2.fromScale(1,0.5) or UDim2.fromScale(0,0.5)) - UDim2.fromOffset(8,8), ImageColor3 = ToggleDefault and Theme.Toggle or Theme.ToggleAccent}):Play()
			ToggleCallback(ToggleDefault)

			Toggle.MouseButton1Down:Connect(function()
				ToggleDefault = not ToggleDefault
				TweenService:Create(Dot, TweenInfo.new(0.15), {Position = (ToggleDefault and UDim2.fromScale(1,0.5) or UDim2.fromScale(0,0.5)) - UDim2.fromOffset(8,8), ImageColor3 = ToggleDefault and Theme.Toggle or Theme.ToggleAccent}):Play()
				ToggleCallback(ToggleDefault)
				CircleAnim(ToggleLabel, Theme.ToggleAccent, Theme.Toggle)
			end)

			local MenuAdded, MenuButton = TryAddMenu(Toggle, Menu, {})

			if MenuAdded then
				ToggleTracker.Position = ToggleTracker.Position - UDim2.fromOffset(15,0)
				MenuButton.ImageColor3 = Theme.Toggle
			end

			local ToggleLibrary = {}

			function ToggleLibrary:SetText(Value)
				ToggleLabel.Text = Value
			end

			function ToggleLibrary:GetText()
				return ToggleLabel.Text
			end

			function ToggleLibrary:SetState(Value)
				ToggleDefault = Value
				TweenService:Create(Dot, TweenInfo.new(0.15), {Position = (ToggleDefault and UDim2.fromScale(1,0.5) or UDim2.fromScale(0,0.5)) - UDim2.fromOffset(8,8), ImageColor3 = ToggleDefault and Theme.Toggle or Theme.ToggleAccent}):Play()
				ToggleCallback(ToggleDefault)
			end

			function ToggleLibrary:GetState()
				return ToggleDefault
			end

			return ToggleLibrary
		end

		function OptionLibrary.TextField(TextFieldConfig)
			local TextFieldText = TextFieldConfig.Text or ""nil text field""
			local TextFieldInputType = TextFieldConfig.Type or TextFieldConfig.type or ""Default""
			local TextFieldCallback = TextFieldConfig.Callback or function() print(""nil text field"") end
			local Menu = TextFieldConfig.Menu or {}

			local TextField = Objects.new(""Round"")
			TextField.Name = ""TextField""
			TextField.Size = UDim2.fromScale(1,0) + UDim2.fromOffset(0,30)
			TextField.ImageColor3 = Theme.TextField
			TextField.ImageTransparency = 1
			TextField.Parent = PageContentFrame

			local TextEffect = Objects.new(""Frame"")
			TextEffect.Name = ""Effect""
			TextEffect.BackgroundTransparency = 1
			TextEffect.BackgroundColor3 = Theme.TextField
			TextEffect.Size = UDim2.fromScale(1,0) + UDim2.fromOffset(0,2)
			TextEffect.Position = UDim2.fromScale(0,1) - UDim2.fromOffset(0,2)
			TextEffect.Parent = TextField

			local TextShadow = Objects.new(""Shadow"")
			TextShadow.ImageColor3 = Theme.TextField
			TextShadow.ImageTransparency = 1
			TextShadow.Parent = TextField

			local TextInput = Objects.new(""Box"")
			TextInput.Name = ""Value""
			TextInput.PlaceholderText = TextFieldText
			TextInput.PlaceholderColor3 = Theme.TextFieldAccent
			TextInput.TextInputType = Enum.TextInputType[TextFieldInputType]
			TextInput.TextColor3 = Theme.TextFieldAccent
			TextInput.Text = """"
			TextInput.Font = Enum.Font.GothamSemibold
			TextInput.TextSize = 14
			TextInput.TextTransparency = 1
			TextInput.Parent = TextField

			TweenService:Create(TextField, TweenInfo.new(0.5), {ImageTransparency = 0.8}):Play()
			TweenService:Create(TextEffect, TweenInfo.new(0.5), {BackgroundTransparency = 0.2}):Play()
			TweenService:Create(TextShadow, TweenInfo.new(0.5), {ImageTransparency = 0.7}):Play()
			TweenService:Create(TextInput, TweenInfo.new(0.5), {TextTransparency = 0.5}):Play()

			TextInput.Focused:Connect(function()
				TweenService:Create(TextField, TweenInfo.new(0.5), {ImageTransparency = 0.7}):Play()
				TweenService:Create(TextInput, TweenInfo.new(0.5), {TextTransparency = 0}):Play()
			end)

			TextInput.FocusLost:Connect(function()
				TweenService:Create(TextField, TweenInfo.new(0.5), {ImageTransparency = 0.8}):Play()
				TweenService:Create(TextInput, TweenInfo.new(0.5), {TextTransparency = 0.5}):Play()
				TextFieldCallback(TextInput.Text)
			end)

			local MenuAdded, MenuBar = TryAddMenu(TextField, Menu, {
				SetText = function(Value)
					TextInput.Text = Value
					TextFieldCallback(TextInput.Text)
				end
			})

			if MenuAdded then
				MenuBar.ImageColor3 = Theme.TextFieldAccent
			end

			local TextFieldLibrary = {}

			function TextFieldLibrary:SetText(Value)
				TextInput.Text = Value
			end

			function TextFieldLibrary:GetText()
				return TextInput.Text
			end

			return TextFieldLibrary
		end

		function OptionLibrary.Label(LabelConfig)
			local LabelText = LabelConfig.Text or ""nil label""

			local LabelContainer = Objects.new(""Round"")
			LabelContainer.Name = ""Label""
			LabelContainer.Size = UDim2.fromScale(1,0) + UDim2.fromOffset(0,20)
			LabelContainer.ImageColor3 = Theme.MainFrame
			LabelContainer.Parent = PageContentFrame

			local LabelContent = Objects.new(""Label"")
			LabelContent.TextColor3 = Theme.ChipSet
			LabelContent.Text = LabelText:upper()
			LabelContent.TextSize = 12
			LabelContent.Font = Enum.Font.GothamSemibold
			LabelContent.Size = UDim2.fromScale(1,1) + UDim2.fromOffset(-5,0)
			LabelContent.Position = UDim2.fromOffset(5,0)
			LabelContent.Parent = LabelContainer

			local LabelOptions = {}

			function LabelOptions.SetText(Text)
				LabelContent.Text = Text
			end

			return LabelOptions
		end

		function OptionLibrary.Slider(SliderConfig)
			local SliderText = SliderConfig.Text or ""nil slider""
			local SliderCallback = SliderConfig.Callback or function() print(""nil slider"") end
			local SliderMin = SliderConfig.Min or 0
			local SliderMax = SliderConfig.Max or 100
			local SliderPrecision = SliderConfig.Precision or 0
			local Menu = SliderConfig.Menu or {}

			if SliderMin > SliderMax then
				local ValueBefore = SliderMin
				SliderMin, SliderMax = SliderMax, ValueBefore
			end

			local SliderDef = math.clamp(SliderConfig.Def, SliderMin, SliderMax) or math.clamp(50, SliderMin, SliderMax)
			local DefaultScale = (SliderDef - SliderMin) / (SliderMax - SliderMin)

			local Slider = Objects.new(""Round"")
			Slider.Name = ""Slider""
			Slider.Size = UDim2.fromScale(1,0) + UDim2.fromOffset(0,35)
			Slider.ImageColor3 = Theme.Slider
			Slider.ImageTransparency = 1
			Slider.Parent = PageContentFrame

			local SliderShadow = Objects.new(""Shadow"")
			SliderShadow.ImageColor3 = Theme.Slider
			SliderShadow.ImageTransparency = 1
			SliderShadow.Parent = Slider

			local SliderTitle = Objects.new(""Label"")
			SliderTitle.TextColor3 = Theme.SliderAccent
			SliderTitle.Text = SliderText
			SliderTitle.TextSize = 14
			SliderTitle.Font = Enum.Font.GothamSemibold
			SliderTitle.Size = UDim2.fromScale(1,0) + UDim2.fromOffset(-5,25)
			SliderTitle.TextTransparency = 1
			SliderTitle.Parent = Slider

			local SliderValue = Objects.new(""Label"")
			SliderValue.Text = tostring(SliderDef)
			SliderValue.TextColor3 = Theme.SliderAccent
			SliderValue.TextTransparency = 1
			SliderValue.TextSize = 14
			SliderValue.Size = UDim2.fromScale(1,0) + UDim2.fromOffset(-5,25)
			SliderValue.Position = UDim2.fromScale(0,0)
			SliderValue.TextXAlignment = Enum.TextXAlignment.Right
			SliderValue.Font = Enum.Font.GothamSemibold
			SliderValue.Parent = Slider

			local SliderTracker = Objects.new(""Frame"")
			SliderTracker.BackgroundColor3 = Theme.SliderAccent
			SliderTracker.BackgroundTransparency = 1
			SliderTracker.Size = UDim2.fromScale(1,0) + UDim2.fromOffset(-20,3)
			SliderTracker.Position = UDim2.fromScale(0,1) + UDim2.fromOffset(10,-10)
			SliderTracker.Parent = Slider

			local SliderFill = SliderTracker:Clone()
			SliderFill.BackgroundTransparency = 1
			SliderFill.Position = UDim2.fromScale(0,0)
			SliderFill.Size = UDim2.fromScale(DefaultScale,1)
			SliderFill.Parent = SliderTracker

			local MinSize = 10
			local MaxSize = 36

			local SizeFromScale = (MinSize +  (MaxSize - MinSize)) * DefaultScale
			SizeFromScale = SizeFromScale - (SizeFromScale % 2)

			local SliderDot = Objects.new(""CircleButton"")
			SliderDot.Size = UDim2.fromOffset(10,10)
			SliderDot.Position = UDim2.fromScale(DefaultScale,0.5) - UDim2.fromOffset(5,5)
			SliderDot.ImageColor3 = Theme.SliderAccent
			SliderDot.ImageTransparency = 1
			SliderDot.ZIndex = 50
			SliderDot.Parent = SliderTracker

			local SliderFadedDot = Objects.new(""Circle"")
			SliderFadedDot.Size = UDim2.fromOffset(SizeFromScale,SizeFromScale)
			SliderFadedDot.Position = UDim2.fromScale(0.5,0.5) - UDim2.fromOffset(SizeFromScale/2,SizeFromScale/2)
			SliderFadedDot.ImageColor3 = Theme.SliderAccent
			SliderFadedDot.ImageTransparency = 1
			SliderFadedDot.ZIndex = 50
			SliderFadedDot.Parent = SliderDot

			TweenService:Create(Slider, TweenInfo.new(0.5), {ImageTransparency = 0}):Play()
			TweenService:Create(SliderShadow, TweenInfo.new(0.5), {ImageTransparency = 0}):Play()
			TweenService:Create(SliderTitle, TweenInfo.new(0.5), {TextTransparency = 0}):Play()
			TweenService:Create(SliderValue, TweenInfo.new(0.5), {TextTransparency = 0}):Play()
			TweenService:Create(SliderTracker, TweenInfo.new(0.5), {BackgroundTransparency = 0.5}):Play()
			TweenService:Create(SliderFill, TweenInfo.new(0.5), {BackgroundTransparency = 0}):Play()
			TweenService:Create(SliderDot, TweenInfo.new(0.5), {ImageTransparency = 0}):Play()

			SliderDot.MouseButton1Down:Connect(function()
				TweenService:Create(SliderFadedDot, TweenInfo.new(0.15), {ImageTransparency = 0.8}):Play()
				local MouseMove, MouseKill
				MouseMove = Mouse.Move:Connect(function()
					local Px = GetXY(SliderTracker)
					local SizeFromScale = (MinSize +  (MaxSize - MinSize)) * Px
					local Power = 10 ^ SliderPrecision
					local Value = math.floor((SliderMin + ((SliderMax - SliderMin) * Px)) * Power) / Power
					SizeFromScale = SizeFromScale - (SizeFromScale % 2)
					TweenService:Create(SliderDot, TweenInfo.new(0.15), {Position = UDim2.fromScale(Px,0.5) - UDim2.fromOffset(5,5)}):Play()
					TweenService:Create(SliderFill, TweenInfo.new(0.15), {Size = UDim2.fromScale(Px, 1)}):Play()
					SliderFadedDot.Size = UDim2.fromOffset(SizeFromScale,SizeFromScale)
					SliderFadedDot.Position = UDim2.fromScale(0.5,0.5) - UDim2.fromOffset(SizeFromScale/2,SizeFromScale/2)
					SliderValue.Text = tostring(Value)
					SliderCallback(Value)
				end)
				MouseKill = InputService.InputEnded:Connect(function(UserInput)
					if UserInput.UserInputType == Enum.UserInputType.MouseButton1 then
						TweenService:Create(SliderFadedDot, TweenInfo.new(0.15), {ImageTransparency = 1}):Play()
						MouseMove:Disconnect()
						MouseKill:Disconnect()
					end
				end)
			end)

			local MenuAdded, MenuButton = TryAddMenu(Slider, Menu, {})

			if MenuAdded then
				SliderValue.Position = SliderValue.Position - UDim2.fromOffset(25,0)
				SliderTracker.Size = SliderTracker.Size - UDim2.fromOffset(20,0)
				MenuButton.ImageColor3 = Theme.SliderAccent
			end

			local SliderLibrary = {}

			function SliderLibrary:SetText(Value)
				SliderTitle.Text = Value
			end

			function SliderLibrary:GetText()
				return SliderTitle.Text
			end

            function SliderLibrary:GetValue()
                return tonumber(SliderValue.Text)
            end

			function SliderLibrary:SetMin(Value)
				SliderMin = Value
				local SliderDef = math.clamp(SliderConfig.Def, SliderMin, SliderMax) or math.clamp(50, SliderMin, SliderMax)
				local DefaultScale =  (SliderDef - SliderMin) / (SliderMax - SliderMin)
				local SizeFromScale = (MinSize +  (MaxSize - MinSize)) * DefaultScale
				SizeFromScale = SizeFromScale - (SizeFromScale % 2)
				SliderDot.Position = UDim2.fromScale(DefaultScale,0.5) - UDim2.fromOffset(SizeFromScale/2,SizeFromScale/2)
			end

			function SliderLibrary:SetMax(Value)
				SliderMax = Value
				local SliderDef = math.clamp(SliderConfig.Def, SliderMin, SliderMax) or math.clamp(50, SliderMin, SliderMax)
				local DefaultScale =  (SliderDef - SliderMin) / (SliderMax - SliderMin)
				local SizeFromScale = (MinSize +  (MaxSize - MinSize)) * DefaultScale
				SizeFromScale = SizeFromScale - (SizeFromScale % 2)
				SliderDot.Position = UDim2.fromScale(DefaultScale,0.5) - UDim2.fromOffset(SizeFromScale/2,SizeFromScale/2)
			end

			function SliderLibrary:GetMin()
				return SliderMin
			end

			function SliderLibrary:GetMax()
				return SliderMax
			end

			return SliderLibrary
		end

		return OptionLibrary
	end

	return TabLibrary
end

return Material"
5BVk7sce,digga,GabrielePRG,Lua,Sunday 13th of August 2023 08:59:48 AM CDT,"-- Funzione per svuotare l'inventario sul retro
local function emptyInventory()
    for slot = 1, 16 do
        turtle.select(slot)
        turtle.drop()
    end
end

-- Funzione principale del programma
local function main()
    while true do
        -- Controlla se c'è un segnale di redstone sul lato sinistro
        if redstone.getInput(""left"") then
            print(""In pausa..."")
            while redstone.getInput(""left"") do
                -- Attendi finché il segnale di redstone persiste
                sleep(1)
            end
            print(""Ripresa del programma."")
        end
        
        -- Riempi completamente l'inventario
        local inventoryFull = true
        for slot = 1, 16 do
            if turtle.getItemCount(slot) == 0 then
                inventoryFull = false
                break
            end
        end
        
        if not inventoryFull then
            for slot = 1, 16 do
                turtle.select(slot)
                turtle.dig()
            end
        end
        
        -- Seleziona lo slot 16 e svuota l'inventario sul retro
        turtle.turnLeft()
        turtle.turnLeft()
        emptyInventory()
        turtle.turnRight()
        turtle.turnRight()
        
        -- Seleziona il primo slot per ripartire
        turtle.select(1)
        
    end
end

-- Esecuzione del programma
main()
"
maygK4RJ,News Aug13 23,Newscaster_Ned,Email,Sunday 13th of August 2023 08:59:35 AM CDT,".‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎1‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎2‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎3‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎T‎e‎s‎t‎ ‎c‎o‎m‎p‎l‎e‎t‎e‎.‎

H‎e‎y‎,‎ ‎g‎u‎y‎s‎.‎ ‎N‎e‎w‎s‎c‎a‎s‎t‎e‎r‎ ‎N‎e‎d‎ ‎h‎e‎r‎e‎ ‎j‎u‎s‎t‎ ‎w‎a‎s‎h‎i‎n‎g‎ ‎m‎y‎ ‎h‎a‎n‎d‎s‎ ‎a‎f‎t‎e‎r‎ ‎f‎i‎n‎g‎e‎r‎i‎n‎g‎ ‎a‎ ‎1‎2‎ ‎y‎e‎a‎r‎ ‎o‎l‎d‎ ‎g‎i‎r‎l‎.‎ ‎A‎n‎y‎w‎a‎y‎,‎ ‎h‎e‎r‎e‎'‎s‎ ‎t‎h‎e‎ ‎n‎e‎w‎s‎.‎

G‎r‎e‎e‎n‎ ‎U‎-‎T‎u‎r‎n‎:‎ ‎L‎a‎b‎o‎u‎r‎ ‎t‎o‎ ‎D‎i‎t‎c‎h‎ ‎N‎a‎t‎i‎o‎n‎a‎l‎ ‎C‎a‎r‎ ‎E‎m‎i‎s‎s‎i‎o‎n‎s‎ ‎T‎a‎x‎ ‎Z‎o‎n‎e‎s‎
M‎a‎c‎r‎o‎n‎ ‎S‎a‎y‎s‎ ‎'‎N‎o‎n‎'‎ ‎t‎o‎ ‎E‎n‎g‎l‎a‎n‎d‎:‎ ‎B‎a‎c‎k‎s‎ ‎A‎u‎s‎t‎r‎a‎l‎i‎a‎ ‎i‎n‎ ‎W‎o‎m‎e‎n‎'‎s‎ ‎S‎o‎c‎c‎e‎r‎ ‎W‎o‎r‎l‎d‎ ‎C‎u‎p‎
W‎A‎T‎C‎H‎:‎ ‎D‎r‎i‎v‎e‎r‎l‎e‎s‎s‎ ‎C‎a‎r‎s‎ ‎C‎a‎u‎s‎e‎ ‎T‎r‎a‎f‎f‎i‎c‎ ‎J‎a‎m‎ ‎i‎n‎ ‎S‎a‎n‎ ‎F‎r‎a‎n‎c‎i‎s‎c‎o‎ ‎i‎n‎ ‎M‎a‎l‎f‎u‎n‎c‎t‎i‎o‎n‎
4‎0‎K‎ ‎M‎i‎g‎r‎a‎n‎t‎s‎ ‎A‎p‎p‎r‎e‎h‎e‎n‎d‎e‎d‎ ‎A‎l‎o‎n‎g‎ ‎S‎o‎u‎t‎h‎w‎e‎s‎t‎ ‎B‎o‎r‎d‎e‎r‎ ‎i‎n‎ ‎F‎i‎r‎s‎t‎ ‎1‎0‎ ‎D‎a‎y‎s‎ ‎o‎f‎ ‎A‎u‎g‎u‎s‎t‎
G‎l‎o‎b‎a‎l‎ ‎S‎h‎i‎p‎p‎i‎n‎g‎ ‎W‎a‎r‎n‎e‎d‎ ‎t‎o‎ ‎S‎t‎e‎e‎r‎ ‎C‎l‎e‎a‎r‎ ‎o‎f‎ ‎I‎r‎a‎n‎i‎a‎n‎ ‎W‎a‎t‎e‎r‎s‎
G‎e‎t‎ ‎A‎l‎l‎ ‎B‎r‎e‎i‎t‎b‎a‎r‎t‎ ‎N‎e‎w‎s‎ ‎H‎e‎r‎e‎
H‎e‎r‎e‎ ‎W‎e‎ ‎G‎o‎ ‎A‎g‎a‎i‎n‎…‎

M‎o‎r‎e‎n‎o‎:‎ ‎T‎y‎i‎n‎g‎ ‎U‎k‎r‎a‎i‎n‎e‎ ‎A‎i‎d‎ ‎t‎o‎ ‎D‎i‎s‎a‎s‎t‎e‎r‎ ‎R‎e‎l‎i‎e‎f‎ ‎B‎e‎s‎t‎ ‎E‎x‎a‎m‎p‎l‎e‎ ‎o‎f‎ ‎D‎.‎C‎.‎ ‎U‎n‎i‎p‎a‎r‎t‎y‎
M‎o‎r‎e‎n‎o‎:‎ ‎T‎y‎i‎n‎g‎ ‎U‎k‎r‎a‎i‎n‎e‎ ‎A‎i‎d‎ ‎t‎o‎ ‎D‎i‎s‎a‎s‎t‎e‎r‎ ‎R‎e‎l‎i‎e‎f‎ ‎B‎e‎s‎t‎ ‎E‎x‎a‎m‎p‎l‎e‎ ‎o‎f‎ ‎D‎.‎C‎.‎ ‎U‎n‎i‎p‎a‎r‎t‎y‎
2‎,‎6‎7‎9‎

P‎o‎l‎l‎:‎ ‎R‎e‎p‎u‎b‎l‎i‎c‎a‎n‎s‎ ‎S‎o‎u‎r‎i‎n‎g‎ ‎o‎n‎ ‎M‎i‎k‎e‎ ‎P‎e‎n‎c‎e‎
1‎,‎2‎1‎0‎
E‎x‎c‎l‎u‎s‎i‎v‎e‎ ‎-‎-‎ ‎S‎e‎n‎.‎ ‎T‎i‎m‎ ‎S‎c‎o‎t‎t‎:‎ ‎'‎U‎n‎b‎e‎l‎i‎e‎v‎a‎b‎l‎e‎'‎ ‎t‎h‎e‎ ‎D‎O‎J‎ ‎P‎r‎o‎t‎e‎c‎t‎s‎ ‎B‎i‎d‎e‎n‎
E‎x‎c‎l‎u‎s‎i‎v‎e‎ ‎-‎-‎ ‎S‎e‎n‎.‎ ‎T‎i‎m‎ ‎S‎c‎o‎t‎t‎:‎ ‎'‎U‎n‎b‎e‎l‎i‎e‎v‎a‎b‎l‎e‎'‎ ‎t‎h‎e‎ ‎D‎O‎J‎ ‎P‎r‎o‎t‎e‎c‎t‎s‎ ‎B‎i‎d‎e‎n‎
3‎,‎1‎4‎8‎
A‎G‎ ‎G‎a‎r‎l‎a‎n‎d‎ ‎A‎p‎p‎o‎i‎n‎t‎s‎ ‎W‎e‎i‎s‎s‎ ‎a‎s‎ ‎S‎p‎e‎c‎i‎a‎l‎ ‎C‎o‎u‎n‎s‎e‎l‎ ‎i‎n‎ ‎H‎u‎n‎t‎e‎r‎ ‎B‎i‎d‎e‎n‎ ‎P‎r‎o‎b‎e‎
A‎G‎ ‎G‎a‎r‎l‎a‎n‎d‎ ‎A‎p‎p‎o‎i‎n‎t‎s‎ ‎W‎e‎i‎s‎s‎ ‎a‎s‎ ‎S‎p‎e‎c‎i‎a‎l‎ ‎C‎o‎u‎n‎s‎e‎l‎ ‎i‎n‎ ‎H‎u‎n‎t‎e‎r‎ ‎B‎i‎d‎e‎n‎ ‎P‎r‎o‎b‎e‎
5‎,‎8‎6‎2‎
M‎o‎d‎e‎r‎a‎t‎e‎ ‎G‎O‎P‎s‎ ‎S‎o‎u‎n‎d‎ ‎t‎h‎e‎ ‎A‎l‎a‎r‎m‎ ‎o‎n‎ ‎D‎a‎v‎i‎d‎ ‎W‎e‎i‎s‎s‎ ‎a‎s‎ ‎S‎p‎e‎c‎i‎a‎l‎ ‎C‎o‎u‎n‎s‎e‎l‎
M‎o‎d‎e‎r‎a‎t‎e‎ ‎G‎O‎P‎s‎ ‎S‎o‎u‎n‎d‎ ‎t‎h‎e‎ ‎A‎l‎a‎r‎m‎ ‎o‎n‎ ‎D‎a‎v‎i‎d‎ ‎W‎e‎i‎s‎s‎ ‎a‎s‎ ‎S‎p‎e‎c‎i‎a‎l‎ ‎C‎o‎u‎n‎s‎e‎l‎
5‎,‎2‎7‎7‎
'‎O‎n‎l‎y‎ ‎2‎ ‎G‎e‎n‎d‎e‎r‎s‎'‎:‎ ‎K‎a‎r‎i‎ ‎L‎a‎k‎e‎ ‎C‎h‎a‎l‎l‎e‎n‎g‎e‎s‎ ‎R‎e‎p‎o‎r‎t‎e‎r‎s‎ ‎t‎o‎ ‎M‎i‎l‎k‎ ‎a‎ ‎B‎u‎l‎l‎
'‎O‎n‎l‎y‎ ‎2‎ ‎G‎e‎n‎d‎e‎r‎s‎'‎:‎ ‎K‎a‎r‎i‎ ‎L‎a‎k‎e‎ ‎C‎h‎a‎l‎l‎e‎n‎g‎e‎s‎ ‎R‎e‎p‎o‎r‎t‎e‎r‎s‎ ‎t‎o‎ ‎M‎i‎l‎k‎ ‎a‎ ‎B‎u‎l‎l‎
4‎0‎9‎
T‎r‎u‎m‎p‎ ‎F‎l‎i‎e‎s‎ ‎O‎v‎e‎r‎ ‎D‎e‎S‎a‎n‎t‎i‎s‎ ‎a‎s‎ ‎I‎o‎w‎a‎n‎s‎ ‎C‎h‎a‎n‎t‎ ‎'‎W‎e‎ ‎W‎a‎n‎t‎ ‎T‎r‎u‎m‎p‎'‎
T‎r‎u‎m‎p‎ ‎F‎l‎i‎e‎s‎ ‎O‎v‎e‎r‎ ‎D‎e‎S‎a‎n‎t‎i‎s‎ ‎a‎s‎ ‎I‎o‎w‎a‎n‎s‎ ‎C‎h‎a‎n‎t‎ ‎'‎W‎e‎ ‎W‎a‎n‎t‎ ‎T‎r‎u‎m‎p‎'‎
6‎8‎8‎

W‎a‎t‎c‎h‎ ‎L‎i‎v‎e‎:‎ ‎D‎o‎n‎a‎l‎d‎ ‎T‎r‎u‎m‎p‎ ‎S‎p‎e‎a‎k‎s‎ ‎a‎t‎ ‎I‎o‎w‎a‎ ‎S‎t‎a‎t‎e‎ ‎F‎a‎i‎r‎
1‎,‎3‎5‎3‎
O‎b‎a‎m‎a‎’‎s‎ ‎B‎r‎o‎t‎h‎e‎r‎ ‎M‎a‎l‎i‎k‎:‎ ‎‘‎Y‎e‎s‎ ‎I‎ ‎A‎m‎’‎ ‎B‎a‎c‎k‎i‎n‎g‎ ‎T‎r‎u‎m‎p‎ ‎i‎n‎ ‎2‎0‎2‎4‎
O‎b‎a‎m‎a‎’‎s‎ ‎B‎r‎o‎t‎h‎e‎r‎ ‎M‎a‎l‎i‎k‎:‎ ‎‘‎Y‎e‎s‎ ‎I‎ ‎A‎m‎’‎ ‎B‎a‎c‎k‎i‎n‎g‎ ‎T‎r‎u‎m‎p‎ ‎i‎n‎ ‎2‎0‎2‎4‎
4‎6‎6‎
P‎o‎l‎l‎a‎k‎:‎ ‎A‎p‎p‎o‎i‎n‎t‎m‎e‎n‎t‎ ‎o‎f‎ ‎D‎a‎v‎i‎d‎ ‎W‎e‎i‎s‎s‎ ‎a‎s‎ ‎S‎p‎e‎c‎i‎a‎l‎ ‎C‎o‎u‎n‎s‎e‎l‎ ‎M‎a‎y‎ ‎B‎e‎ ‎U‎n‎l‎a‎w‎f‎u‎l‎
P‎o‎l‎l‎a‎k‎:‎ ‎A‎p‎p‎o‎i‎n‎t‎m‎e‎n‎t‎ ‎o‎f‎ ‎D‎a‎v‎i‎d‎ ‎W‎e‎i‎s‎s‎ ‎a‎s‎ ‎S‎p‎e‎c‎i‎a‎l‎ ‎C‎o‎u‎n‎s‎e‎l‎ ‎M‎a‎y‎ ‎B‎e‎ ‎U‎n‎l‎a‎w‎f‎u‎l‎

M‎o‎n‎k‎e‎y‎ ‎S‎h‎o‎o‎t‎s‎ ‎B‎i‎g‎ ‎R‎i‎g‎ ‎D‎r‎i‎v‎e‎r‎,‎ ‎L‎e‎a‎d‎i‎n‎g‎ ‎H‎i‎m‎ ‎t‎o‎ ‎C‎r‎a‎s‎h‎ ‎H‎i‎s‎ ‎T‎r‎u‎c‎k‎ ‎i‎n‎t‎o‎ ‎G‎r‎o‎u‎p‎ ‎o‎f‎ ‎P‎a‎r‎k‎e‎d‎ ‎C‎a‎r‎s‎,‎ ‎a‎n‎d‎ ‎T‎h‎e‎n‎ ‎i‎n‎t‎o‎ ‎W‎o‎r‎k‎ ‎B‎u‎i‎l‎d‎i‎n‎g‎.‎ ‎

H‎e‎ ‎w‎a‎s‎ ‎j‎u‎s‎t‎ ‎t‎e‎s‎t‎i‎n‎g‎ ‎h‎i‎s‎ ‎n‎e‎w‎ ‎g‎u‎n‎ ‎o‎u‎t‎.‎


S‎h‎a‎r‎e‎c‎r‎o‎p‎p‎e‎r‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎f‎o‎r‎ ‎K‎i‎l‎l‎i‎n‎g‎ ‎M‎a‎n‎ ‎i‎n‎ ‎K‎i‎l‎l‎e‎e‎n‎.‎


S‎h‎e‎b‎o‎o‎n‎ ‎G‎o‎e‎s‎ ‎o‎n‎ ‎S‎h‎o‎o‎t‎i‎n‎g‎ ‎S‎p‎r‎e‎e‎ ‎i‎n‎ ‎C‎a‎m‎p‎b‎e‎l‎l‎s‎v‎i‎l‎l‎e‎,‎ ‎K‎i‎l‎l‎i‎n‎g‎ ‎2‎,‎ ‎I‎n‎j‎u‎r‎i‎n‎g‎ ‎1‎.‎


M‎o‎n‎k‎e‎y‎ ‎M‎a‎n‎ ‎G‎e‎t‎s‎ ‎L‎i‎f‎e‎ ‎A‎f‎t‎e‎r‎ ‎K‎i‎l‎l‎i‎n‎g‎ ‎M‎a‎i‎l‎m‎a‎n‎ ‎W‎h‎o‎ ‎D‎e‎l‎i‎v‎e‎r‎e‎d‎ ‎H‎i‎m‎ ‎W‎e‎e‎d‎.‎


S‎i‎m‎i‎a‎n‎ ‎T‎e‎e‎n‎ ‎a‎n‎d‎ ‎N‎o‎g‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎f‎o‎r‎ ‎A‎t‎t‎e‎m‎p‎t‎e‎d‎ ‎C‎a‎r‎j‎a‎c‎k‎i‎n‎g‎ ‎o‎n‎ ‎C‎l‎o‎v‎e‎r‎d‎a‎l‎e‎ ‎D‎r‎i‎v‎e‎.‎


N‎e‎g‎r‎e‎s‎s‎ ‎B‎i‎t‎c‎h‎ ‎G‎e‎t‎s‎ ‎O‎n‎l‎y‎ ‎2‎½‎ ‎Y‎e‎a‎r‎s‎ ‎A‎f‎t‎e‎r‎ ‎A‎f‎t‎e‎r‎ ‎T‎r‎y‎i‎n‎g‎ ‎t‎o‎ ‎M‎u‎r‎d‎e‎r‎ ‎S‎t‎a‎t‎e‎ ‎T‎r‎o‎o‎p‎e‎r‎ ‎a‎t‎ ‎B‎l‎a‎c‎k‎ ‎S‎u‎p‎r‎e‎m‎e‎c‎i‎s‎t‎ ‎M‎e‎e‎t‎i‎n‎g‎.‎


K‎F‎C‎ ‎A‎f‎i‎c‎i‎o‎n‎a‎d‎o‎ ‎G‎e‎t‎s‎ ‎1‎0‎0‎ ‎Y‎e‎a‎r‎s‎ ‎A‎f‎t‎e‎r‎ ‎R‎u‎n‎n‎i‎n‎g‎ ‎O‎v‎e‎r‎ ‎2‎ ‎P‎e‎o‎p‎l‎e‎ ‎A‎f‎t‎e‎r‎ ‎A‎r‎g‎u‎m‎e‎n‎t‎.‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎T‎i‎m‎e‎ ‎f‎o‎r‎ ‎t‎h‎e‎ ‎w‎e‎a‎t‎h‎e‎r‎.‎

T‎o‎d‎a‎y‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
1‎0‎6‎°‎
/‎7‎7‎°‎
3‎%‎
S‎ ‎1‎5‎ ‎m‎p‎h‎
S‎u‎n‎ ‎1‎3‎ ‎|‎ ‎D‎a‎y‎
1‎0‎6‎°‎
3‎%‎
S‎
1‎5‎
 ‎
m‎p‎h‎
P‎a‎r‎t‎l‎y‎ ‎c‎l‎o‎u‎d‎y‎ ‎s‎k‎i‎e‎s‎.‎ ‎N‎e‎a‎r‎ ‎r‎e‎c‎o‎r‎d‎ ‎h‎i‎g‎h‎ ‎t‎e‎m‎p‎e‎r‎a‎t‎u‎r‎e‎s‎.‎ ‎H‎i‎g‎h‎ ‎1‎0‎6‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎S‎ ‎a‎t‎ ‎1‎0‎ ‎t‎o‎ ‎2‎0‎ ‎m‎p‎h‎.‎

H‎u‎m‎i‎d‎i‎t‎y‎
5‎0‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
E‎x‎t‎r‎e‎m‎e‎
S‎u‎n‎r‎i‎s‎e‎
6‎:‎5‎6‎ ‎a‎m‎
S‎u‎n‎s‎e‎t‎
8‎:‎1‎3‎ ‎p‎m‎
S‎u‎n‎ ‎1‎3‎ ‎|‎ ‎N‎i‎g‎h‎t‎
7‎7‎°‎
1‎1‎%‎
S‎
1‎4‎
 ‎
m‎p‎h‎
C‎l‎e‎a‎r‎ ‎t‎o‎ ‎p‎a‎r‎t‎l‎y‎ ‎c‎l‎o‎u‎d‎y‎.‎ ‎L‎o‎w‎ ‎7‎7‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎S‎ ‎a‎t‎ ‎1‎0‎ ‎t‎o‎ ‎2‎0‎ ‎m‎p‎h‎.‎

H‎u‎m‎i‎d‎i‎t‎y‎
7‎2‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
0‎ ‎o‎f‎ ‎1‎1‎
M‎o‎o‎n‎r‎i‎s‎e‎
4‎:‎1‎3‎ ‎a‎m‎
W‎a‎n‎i‎n‎g‎ ‎C‎r‎e‎s‎c‎e‎n‎t‎
M‎o‎o‎n‎s‎e‎t‎
6‎:‎5‎6‎ ‎p‎m‎
M‎o‎n‎ ‎1‎4‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
1‎0‎5‎°‎
/‎7‎6‎°‎
1‎1‎%‎
S‎S‎W‎ ‎9‎ ‎m‎p‎h‎
T‎u‎e‎ ‎1‎5‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
1‎0‎3‎°‎
/‎7‎4‎°‎
2‎%‎
N‎N‎E‎ ‎1‎1‎ ‎m‎p‎h‎
W‎e‎d‎ ‎1‎6‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
1‎0‎4‎°‎
/‎7‎4‎°‎
1‎%‎
N‎E‎ ‎7‎ ‎m‎p‎h‎
T‎h‎u‎ ‎1‎7‎
S‎u‎n‎n‎y‎
1‎0‎6‎°‎
/‎7‎5‎°‎
4‎%‎
S‎S‎W‎ ‎9‎ ‎m‎p‎h‎
F‎r‎i‎ ‎1‎8‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
1‎0‎5‎°‎
/‎7‎4‎°‎
5‎%‎
S‎ ‎1‎0‎ ‎m‎p‎h‎
S‎a‎t‎ ‎1‎9‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
1‎0‎3‎°‎
/‎7‎4‎°‎
8‎%‎
S‎ ‎1‎0‎ ‎m‎p‎h‎
S‎u‎n‎ ‎2‎0‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
1‎0‎2‎°‎
/‎7‎5‎°‎
1‎3‎%‎
S‎S‎E‎ ‎1‎0‎ ‎m‎p‎h‎
M‎o‎n‎ ‎2‎1‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
9‎8‎°‎
/‎7‎6‎°‎
2‎4‎%‎
E‎S‎E‎ ‎1‎1‎ ‎m‎p‎h‎
T‎u‎e‎ ‎2‎2‎
P‎M‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
9‎9‎°‎
/‎7‎5‎°‎
3‎7‎%‎
E‎S‎E‎ ‎1‎1‎ ‎m‎p‎h‎
W‎e‎d‎ ‎2‎3‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
1‎0‎1‎°‎
/‎7‎6‎°‎
1‎6‎%‎
S‎E‎ ‎9‎ ‎m‎p‎h‎
T‎h‎u‎ ‎2‎4‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
1‎0‎2‎°‎
/‎7‎7‎°‎
1‎3‎%‎
S‎E‎ ‎8‎ ‎m‎p‎h‎
F‎r‎i‎ ‎2‎5‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
1‎0‎3‎°‎
/‎7‎8‎°‎
9‎%‎
S‎E‎ ‎9‎ ‎m‎p‎h‎
S‎a‎t‎ ‎2‎6‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
1‎0‎2‎°‎
/‎7‎8‎°‎
1‎5‎%‎
S‎ ‎9‎ ‎m‎p‎h‎
S‎u‎n‎ ‎2‎7‎
I‎s‎o‎l‎a‎t‎e‎d‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
1‎0‎1‎°‎
/‎7‎6‎°‎
3‎0‎%‎
S‎E‎ ‎1‎0‎ ‎m‎p‎h‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

C‎u‎r‎r‎e‎n‎t‎ ‎t‎h‎r‎e‎a‎t‎:‎ ‎G‎l‎o‎b‎a‎l‎ ‎c‎o‎o‎l‎i‎n‎g‎.‎ ‎🌎❄️‎️‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

V‎o‎r‎d‎r‎a‎k‎
S‎a‎m‎u‎e‎l‎ ‎C‎o‎l‎l‎i‎n‎g‎w‎o‎o‎d‎ ‎S‎m‎i‎t‎h‎,‎ ‎a‎k‎a‎ ‎V‎o‎r‎d‎r‎a‎k‎,‎ ‎M‎a‎t‎t‎h‎e‎w‎ ‎H‎o‎p‎k‎i‎n‎s‎,‎ ‎a‎n‎d‎ ‎M‎H‎W‎i‎t‎c‎h‎f‎i‎n‎d‎e‎r‎ ‎(‎b‎o‎r‎n‎ ‎D‎e‎c‎e‎m‎b‎e‎r‎ ‎3‎0‎,‎ ‎1‎9‎7‎8‎)‎ ‎i‎s‎ ‎a‎ ‎B‎r‎i‎t‎i‎s‎h‎ ‎C‎o‎n‎s‎e‎r‎v‎a‎t‎i‎v‎e‎ ‎p‎o‎l‎i‎t‎i‎c‎i‎a‎n‎,‎ ‎a‎c‎t‎i‎v‎i‎s‎t‎,‎ ‎a‎n‎d‎ ‎l‎a‎w‎ ‎s‎t‎u‎d‎e‎n‎t‎ ‎w‎h‎o‎ ‎s‎e‎e‎k‎s‎ ‎t‎o‎ ‎p‎r‎o‎t‎e‎c‎t‎ ‎y‎o‎u‎r‎ ‎d‎a‎u‎g‎h‎t‎e‎r‎'‎s‎ ‎p‎r‎e‎c‎i‎o‎u‎s‎ ‎b‎o‎d‎i‎l‎y‎ ‎f‎l‎u‎i‎d‎s‎ ‎a‎g‎a‎i‎n‎s‎t‎ ‎p‎e‎d‎o‎p‎h‎i‎l‎e‎s‎ ‎a‎n‎d‎ ‎l‎i‎b‎e‎r‎a‎l‎s‎,‎ ‎w‎h‎o‎m‎ ‎V‎o‎r‎d‎r‎a‎k‎ ‎p‎l‎a‎c‎e‎s‎ ‎i‎n‎ ‎t‎h‎e‎ ‎s‎a‎m‎e‎ ‎c‎a‎t‎e‎g‎o‎r‎y‎.‎ ‎V‎o‎r‎d‎r‎a‎k‎ ‎o‎p‎e‎r‎a‎t‎e‎s‎ ‎a‎ ‎b‎l‎o‎g‎ ‎n‎a‎m‎e‎d‎ ‎a‎f‎t‎e‎r‎ ‎a‎ ‎P‎u‎r‎i‎t‎a‎n‎i‎c‎a‎l‎,‎ ‎g‎e‎n‎o‎c‎i‎d‎a‎l‎ ‎m‎a‎n‎i‎a‎c‎ ‎w‎h‎o‎ ‎i‎n‎v‎e‎n‎t‎e‎d‎ ‎t‎h‎e‎ ‎""‎d‎u‎c‎k‎ ‎t‎e‎s‎t‎""‎.‎ ‎T‎h‎e‎ ‎""‎j‎o‎u‎r‎n‎a‎l‎i‎s‎m‎""‎ ‎c‎o‎n‎t‎a‎i‎n‎e‎d‎ ‎t‎h‎e‎r‎e‎i‎n‎ ‎p‎r‎i‎m‎a‎r‎i‎l‎y‎ ‎c‎o‎n‎s‎i‎s‎t‎s‎ ‎o‎f‎ ‎w‎i‎l‎d‎ ‎c‎l‎a‎i‎m‎s‎ ‎o‎f‎ ‎p‎e‎d‎o‎p‎h‎i‎l‎i‎a‎ ‎a‎g‎a‎i‎n‎s‎t‎ ‎p‎o‎l‎i‎t‎i‎c‎a‎l‎ ‎o‎p‎p‎o‎n‎e‎n‎t‎s‎,‎ ‎p‎e‎o‎p‎l‎e‎ ‎w‎h‎o‎ ‎h‎a‎v‎e‎ ‎a‎n‎n‎o‎y‎e‎d‎ ‎h‎i‎m‎,‎ ‎a‎n‎d‎ ‎r‎a‎n‎d‎o‎m‎ ‎p‎a‎s‎s‎e‎r‎s‎-‎b‎y‎.‎ ‎S‎u‎c‎h‎ ‎c‎l‎a‎i‎m‎s‎ ‎a‎p‎p‎e‎a‎r‎ ‎t‎o‎ ‎b‎e‎ ‎m‎o‎t‎i‎v‎a‎t‎e‎d‎ ‎b‎y‎ ‎h‎i‎s‎ ‎t‎a‎r‎g‎e‎t‎s‎'‎ ‎o‎p‎p‎o‎s‎i‎t‎i‎o‎n‎ ‎t‎o‎ ‎G‎a‎m‎e‎r‎G‎a‎t‎e‎,‎ ‎t‎h‎i‎s‎ ‎b‎e‎i‎n‎g‎ ‎V‎o‎r‎d‎r‎a‎k‎'‎s‎ ‎m‎e‎a‎n‎s‎ ‎o‎f‎ ‎e‎x‎e‎m‎p‎l‎i‎f‎y‎i‎n‎g‎ ‎e‎t‎h‎i‎c‎s‎ ‎i‎n‎ ‎j‎o‎u‎r‎n‎a‎l‎i‎s‎m‎.‎ ‎H‎i‎s‎ ‎b‎l‎o‎g‎ ‎c‎o‎n‎t‎a‎i‎n‎s‎ ‎t‎h‎e‎ ‎w‎o‎r‎d‎ ‎""‎p‎a‎e‎d‎o‎p‎h‎i‎l‎e‎""‎ ‎i‎n‎ ‎o‎v‎e‎r‎ ‎3‎0‎0‎ ‎p‎a‎g‎e‎s‎ ‎o‎n‎ ‎a‎ ‎b‎l‎o‎g‎ ‎w‎i‎t‎h‎ ‎4‎0‎0‎ ‎a‎r‎t‎i‎c‎l‎e‎s‎.‎

I‎t‎ ‎s‎h‎o‎u‎l‎d‎ ‎b‎e‎ ‎n‎o‎t‎e‎d‎ ‎t‎h‎a‎t‎ ‎t‎h‎i‎s‎ ‎a‎r‎t‎i‎c‎l‎e‎ ‎i‎s‎ ‎o‎n‎l‎y‎ ‎f‎e‎a‎t‎u‎r‎e‎d‎ ‎b‎e‎c‎a‎u‎s‎e‎ ‎S‎a‎m‎m‎y‎ ‎d‎e‎c‎i‎d‎e‎d‎ ‎t‎o‎ ‎g‎o‎ ‎f‎u‎l‎l‎ ‎S‎u‎e‎ ‎B‎a‎s‎k‎o‎.‎ ‎A‎n‎d‎ ‎b‎e‎c‎a‎u‎s‎e‎ ‎i‎t‎ ‎i‎s‎ ‎l‎u‎l‎z‎y‎ ‎a‎s‎ ‎f‎u‎c‎k‎.‎

(‎(‎ ‎K‎I‎L‎L‎J‎O‎Y‎ ‎A‎C‎T‎I‎V‎I‎S‎T‎ ‎B‎L‎O‎G‎G‎E‎R‎ ‎V‎S‎.‎ ‎E‎D‎ ‎)‎)‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
	‎
L‎e‎s‎t‎e‎s‎ ‎b‎a‎r‎b‎a‎r‎u‎s‎ ‎i‎s‎ ‎a‎ ‎s‎p‎e‎c‎i‎e‎s‎ ‎o‎f‎ ‎d‎a‎m‎s‎e‎l‎f‎l‎y‎ ‎o‎f‎ ‎t‎h‎e‎ ‎f‎a‎m‎i‎l‎y‎ ‎L‎e‎s‎t‎i‎d‎a‎e‎,‎ ‎t‎h‎e‎ ‎s‎p‎r‎e‎a‎d‎w‎i‎n‎g‎s‎.‎ ‎I‎t‎s‎ ‎c‎o‎m‎m‎o‎n‎ ‎n‎a‎m‎e‎s‎ ‎i‎n‎ ‎E‎n‎g‎l‎i‎s‎h‎ ‎i‎n‎c‎l‎u‎d‎e‎ ‎s‎o‎u‎t‎h‎e‎r‎n‎ ‎e‎m‎e‎r‎a‎l‎d‎ ‎d‎a‎m‎s‎e‎l‎f‎l‎y‎,‎ ‎s‎h‎y‎ ‎e‎m‎e‎r‎a‎l‎d‎ ‎d‎a‎m‎s‎e‎l‎f‎l‎y‎ ‎a‎n‎d‎ ‎m‎i‎g‎r‎a‎n‎t‎ ‎s‎p‎r‎e‎a‎d‎w‎i‎n‎g‎.‎ ‎I‎t‎ ‎i‎s‎ ‎f‎o‎u‎n‎d‎ ‎a‎c‎r‎o‎s‎s‎ ‎s‎o‎u‎t‎h‎e‎r‎n‎ ‎E‎u‎r‎o‎p‎e‎ ‎i‎n‎ ‎a‎ ‎b‎a‎n‎d‎ ‎a‎c‎r‎o‎s‎s‎ ‎S‎p‎a‎i‎n‎,‎ ‎F‎r‎a‎n‎c‎e‎,‎ ‎I‎t‎a‎l‎y‎ ‎a‎n‎d‎ ‎G‎r‎e‎e‎c‎e‎,‎ ‎a‎l‎s‎o‎ ‎e‎x‎t‎e‎n‎d‎i‎n‎g‎ ‎e‎a‎s‎t‎ ‎t‎o‎ ‎I‎n‎d‎i‎a‎ ‎a‎n‎d‎ ‎M‎o‎n‎g‎o‎l‎i‎a‎.‎ ‎I‎t‎ ‎i‎s‎ ‎l‎e‎s‎s‎ ‎c‎o‎m‎m‎o‎n‎ ‎i‎n‎ ‎n‎o‎r‎t‎h‎e‎r‎n‎ ‎E‎u‎r‎o‎p‎e‎,‎ ‎a‎l‎t‎h‎o‎u‎g‎h‎ ‎s‎o‎m‎e‎ ‎a‎r‎e‎ ‎f‎o‎u‎n‎d‎ ‎a‎s‎ ‎f‎a‎r‎ ‎n‎o‎r‎t‎h‎ ‎a‎s‎ ‎S‎w‎e‎d‎e‎n‎.‎ ‎T‎h‎i‎s‎ ‎L‎.‎ ‎b‎a‎r‎b‎a‎r‎u‎s‎ ‎f‎e‎m‎a‎l‎e‎ ‎w‎a‎s‎ ‎p‎h‎o‎t‎o‎g‎r‎a‎p‎h‎e‎d‎ ‎i‎n‎ ‎B‎l‎a‎n‎k‎a‎a‎r‎t‎ ‎N‎a‎t‎u‎r‎e‎ ‎R‎e‎s‎e‎r‎v‎e‎ ‎n‎e‎a‎r‎ ‎D‎i‎k‎s‎m‎u‎i‎d‎e‎,‎ ‎B‎e‎l‎g‎i‎u‎m‎.‎

P‎h‎o‎t‎o‎g‎r‎a‎p‎h‎ ‎c‎r‎e‎d‎i‎t‎:‎ ‎C‎h‎a‎r‎l‎e‎s‎ ‎J‎.‎ ‎S‎h‎a‎r‎p‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

B‎y‎e‎,‎ ‎g‎u‎y‎s‎.‎ ‎I‎'‎m‎ ‎g‎o‎n‎n‎a‎ ‎g‎o‎ ‎s‎e‎t‎ ‎R‎a‎n‎d‎ ‎P‎a‎u‎l‎'‎s‎ ‎p‎u‎b‎e‎s‎ ‎o‎n‎ ‎f‎i‎r‎e‎.‎.‎.‎ ‎I‎ ‎o‎f‎ ‎c‎o‎u‎r‎s‎e‎ ‎m‎e‎a‎n‎ ‎h‎i‎s‎ ‎h‎e‎a‎d‎.‎"
q0KQpbsV,SYN X COMP,Artani,Lua,Sunday 13th of August 2023 08:54:55 AM CDT,"loadstring(game:HttpGet(""https://raw.githubusercontent.com/Tamim468/Valyseonly/main/synsupport.lua""))()"
w4Gp3mav,Install ownCloud,Justman10000,Bash,Sunday 13th of August 2023 08:18:59 AM CDT,"# You must have installed MariaDB (https://pastebin.com/CxsPHAE7) and PHP 7.4 or older (https://pastebin.com/4dBrYLXT)
# Remember to replace YOUR_USER and YOUR_PASSWORD

wget https://download.owncloud.com/server/stable/owncloud-complete-latest.zip
unzip owncloud-complete-latest.zip
rm -r owncloud-complete-latest.zip
cd owncloud

mariadb << EOF
CREATE DATABASE owncloud;
EOF

./occ maintenance:install \
   --database ""mysql"" \
   --admin-user ""admin"" \
   --admin-pass ""1234"" \
   --database-host ""127.0.0.1"" \
   --database-name ""owncloud"" \
   --database-user ""YOUR_USER""\
   --database-pass ""YOUR_PASSWORD"""
u4w1MK3n,lcd_retest.cpp,DrAungWinHtut,C++,Sunday 13th of August 2023 08:09:29 AM CDT,"
// PIC16F18877 Configuration Bit Settings

// 'C' source line config statements

// CONFIG1
#pragma config FEXTOSC = OFF    // External Oscillator mode selection bits (Oscillator not enabled)
#pragma config RSTOSC = HFINT1  // Power-up default value for COSC bits (HFINTOSC (1MHz))
#pragma config CLKOUTEN = OFF   // Clock Out Enable bit (CLKOUT function is disabled; i/o or oscillator function on OSC2)
#pragma config CSWEN = ON       // Clock Switch Enable bit (Writing to NOSC and NDIV is allowed)
#pragma config FCMEN = ON       // Fail-Safe Clock Monitor Enable bit (FSCM timer enabled)

// CONFIG2
#pragma config MCLRE = ON       // Master Clear Enable bit (MCLR pin is Master Clear function)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config LPBOREN = OFF    // Low-Power BOR enable bit (ULPBOR disabled)
#pragma config BOREN = ON       // Brown-out reset enable bits (Brown-out Reset Enabled, SBOREN bit is ignored)
#pragma config BORV = LO        // Brown-out Reset Voltage Selection (Brown-out Reset Voltage (VBOR) set to 1.9V on LF, and 2.45V on F Devices)
#pragma config ZCD = OFF        // Zero-cross detect disable (Zero-cross detect circuit is disabled at POR.)
#pragma config PPS1WAY = ON     // Peripheral Pin Select one-way control (The PPSLOCK bit can be cleared and set only once in software)
#pragma config STVREN = ON      // Stack Overflow/Underflow Reset Enable bit (Stack Overflow or Underflow will cause a reset)

// CONFIG3
#pragma config WDTCPS = WDTCPS_31// WDT Period Select bits (Divider ratio 1:65536; software control of WDTPS)
#pragma config WDTE = OFF       // WDT operating mode (WDT Disabled, SWDTEN is ignored)
#pragma config WDTCWS = WDTCWS_7// WDT Window Select bits (window always open (100%); software control; keyed access not required)
#pragma config WDTCCS = SC      // WDT input clock selector (Software Control)

// CONFIG4
#pragma config WRT = OFF        // UserNVM self-write protection bits (Write protection off)
#pragma config SCANE = available// Scanner Enable bit (Scanner module is available for use)
#pragma config LVP = ON         // Low Voltage Programming Enable bit (Low Voltage programming enabled. MCLR/Vpp pin function is MCLR.)

// CONFIG5
#pragma config CP = OFF         // UserNVM Program memory code protection bit (Program Memory code protection disabled)
#pragma config CPD = OFF        // DataNVM code protection bit (Data EEPROM code protection disabled)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.


#include <xc.h>
#include <stdint.h>
#include <stdio.h>

// LCD module connections
#define LCD_RS PORTCbits.RC0  //
#define LCD_EN PORTCbits.RC3
#define LCD_D4 PORTCbits.RC4
#define LCD_D5 PORTCbits.RC5
#define LCD_D6 PORTCbits.RC6
#define LCD_D7 PORTCbits.RC7
#define LCD_DATA_PORT PORTC
#define _XTAL_FREQ  4000000

#define DIGIT1  LATE0
#define DIGIT2  LATE2

// Define 7-segment display pins
#define SEG_A   PORTD0
#define SEG_B   PORTD1
#define SEG_C   PORTD2
#define SEG_D   PORTD3
#define SEG_E   PORTD4
#define SEG_F   PORTD5
#define SEG_G   PORTD6
#define SEG_DP  PORTD7

// Function prototypes
void LCD_Init();
void LCD_Cmd(unsigned char);
void LCD_Char(unsigned char);
void LCD_String(const char*);
void LCD_Clear();
void LCD_Send(int RS,unsigned char data);
void lcd_set_cursor(char col,char line);
void ADC_Init();
void Timer0_Init();
unsigned int ADC_Read(uint8_t channel);
void timer(void);

void init7Segment(void);
//void displayDigit(unsigned char display, unsigned char digit);
char hexvalue[10]= {0xC0,0xC9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0x80,0x90};
void seven_seg_Show(int i);
void seven_seg_All(int i); //i=0 off, 1 on
void initLCD();
void lcdwritectrl(char x);

//O2 Lvl = 3543 %
//PH lvl = 3432 %

void main(void) {
    TRISB = 0b00000000;
    char name[16] = ""Temasat"";
    char buffer[16];
    int i = 32;
    Timer0_Init();
    ADC_Init();
    init7Segment();
    //LCD_Init();
    initLCD();
    LCD_Clear();
    LCD_String(name);
    unsigned int motor_status=0;
    __delay_ms(300); 
    
    
    
    
    while (1) {
        unsigned int Temperature = ADC_Read(0);
        Temperature = Temperature * 100 / 1023;
        Temperature = Temperature * 25 / 60;
        sprintf(buffer, ""Temperature = %3u%%"", Temperature);
        // Display the formatted string on the 2-digit 7-segment display
        if (Temperature>30)
        {
            seven_seg_All(1); //1 - all on
        }
        else{
            seven_seg_All(0);  //0 - all off
        }
        if(Temperature<=20)
        {
            //start motor
            motor_status=1;
            LATBbits.LATB0 = 1;
            LCD_Clear();
            lcd_set_cursor(1,1);
            LCD_String(""O2 is in danger!"");
            timer(); //timer ON (start counting time!)
            __delay_ms(30); 
            
            
        }
       
       
                  
        //LCD_Cmd(0x00);
        LCD_Clear();
        lcd_set_cursor(1,1);
        LCD_String(buffer);
        //__delay_ms(100); 
        
        unsigned int PH_level = ADC_Read(1);
        PH_level = PH_level * 14 / 1023;
        sprintf(buffer, ""PH lvl = %3u%%"", PH_level);
        lcd_set_cursor(1,2);
        LCD_String(buffer);
        __delay_ms(100);        
    }
    return;
}
void Timer0_Init() {
    // Set Timer0 to 16-bit mode and use the internal clock (Fosc/4)
    T0CON0 = 0b10000000; // 16-bit mode, Fosc/4    
    // Set the prescaler to 1:256, so each Timer0 tick is 256 instruction cycles
    T0CON1 = 0b00000110; // 1:256 prescaler    
    // Load Timer0 with the initial value to achieve a 1-minute delay
    TMR0H = 0x85; // High byte
    TMR0L = 0xEE; // Low byte
}



void __interrupt()isr(void) //timer on interrupt
{
    if(PIR0bits.TMR0IF==1)   //Timer 0 time up
    {
        PIR0bits.TMR0IF=0;   //Timer 0 OFF 
        PORTBbits.RB0=0;
        LCD_Clear();
        lcd_set_cursor(1,1);
        LCD_String(""O2 is OK again!"");
        __delay_ms(300); 
         LCD_Clear();
       // __delay_ms(2000);
    }
    else if(PIR0bits.TMR0IF==1)
    {
        PIR0bits.TMR0IF=0;
        PORTBbits.RB0=0;
        LCD_Clear();
        lcd_set_cursor(1,1);
        LCD_String(""O2 is OK again!"");
        __delay_ms(300); 
         LCD_Clear();
       // __delay_ms(2000);
    }
    
    
}

void timer(void)
{
    INTCONbits.GIE = 0;
    T0CON0 = 0b10000100;
    T0CON1 = 0b01001011;
    TMR0H = 200;
    PIR0bits.TMR0IF = 0;
    PIE0bits.TMR0IE = 1;
    INTCONbits.GIE = 1;


}

void ADC_Init() {
    // Configure ADC module settings
    // Set the ADC channel to ANA0(RA0) and ANA1(RA1)
    ANSELA = 0b00000011; //RA0 and RA1
    TRISA =  0b11111111; //all inputs (including digital inputs)
    ADREF =  0b00000000; // VREF to VDD and VSS
    ADCLK =  0b00000011; // Set TAD = 2 us
    ADACQ =  0b00000000;
    ADCON0 = 0b10000100;  
    // Optional: Allow the ADC to stabilize before reading the first value
    __delay_us(20);
}
unsigned int ADC_Read(uint8_t channel) {    
    unsigned int result;
    ADPCH = channel; //0b00000011; RA3 = 3 | 0b00000000; RA0 | 0b00000001; RA1
    __delay_us(2);
    
    ADCON0bits.GO = 1; //Start  
    // Wait for the conversion to complete
    while (ADCON0bits.GO); //while (ADCON0bits.ADGO==1); 
    result = ((unsigned int)ADRESH << 8) | ADRESL; // ADRESH * 256 + ADRESL;
    // Return the ADC result (combine ADRESH and ADRESL) by moving High byte to left and add with low byte
    // ADRESH + ADRESL
    return(result);
}

void LCD_Init() {
  
    TRISC = 0x00; //all C port pins are output
    __delay_ms(15);
    LCD_Cmd(0x02);  // Return home
    LCD_Cmd(0x28);  // 4-bit mode - 2 line display - 5x7 font
    LCD_Cmd(0x0C);  // Display ON - Cursor OFF - Blink OFF
    LCD_Cmd(0x06);  // Increment cursor - No shift
    LCD_Cmd(0x80);  // Address DDRAM with 0 offset 80h
}


void initLCD()
{
    __delay_ms(15);
    lcdwritectrl(0b00000011);
    __delay_ms(15);
    lcdwritectrl(0b00000010);
    lcdwritectrl(0b00001000);
    lcdwritectrl(0b00001100);
    lcdwritectrl(0b00000110);
    lcdwritectrl(0b00000001);
}
void lcdwritectrl(char x)
{
    LCD_RS = 0;
    PORTC =x;
    LCD_EN = 1;
    __delay_ms(1);
    LCD_EN = 0;
    __delay_ms(1);
    PORTC =x<<4;
    LCD_EN = 1;
    __delay_ms(1);
    LCD_EN =0;
    __delay_ms(1);

}



void LCD_Cmd(unsigned char command) {
    LCD_Send(0,command);
}

void LCD_Char(unsigned char data) {
    LCD_Send(1,data);
}

void LCD_Send(int RS,unsigned char data)
{
    
    LCD_RS = RS;     // Data mode data = 1101, 1001
    LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (data & 0xF0);   // Send higher nibble 1101,0000
    
    LCD_EN = 1;     // Enable pulse
    __delay_us(1);
    LCD_EN = 0;
    __delay_us(200);
    LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((data << 4) & 0xF0);   // Send lower nibble 1001,0000
    
    LCD_EN = 1;     // Enable pulse
    __delay_us(1);
    LCD_EN = 0;
    __delay_ms(2);

}

void LCD_String(const char* text) {
    while (*text != '\0') {
        LCD_Char(*text++);
    }
}

void LCD_Clear() {
    LCD_Cmd(0x01);  // Clear display
    __delay_ms(2);
}

void lcd_set_cursor(char col,char line)
{
    if(line==1){
        LCD_Cmd(0b10000000 | col);        
    }
    else if(line==2){
        LCD_Cmd(0b11000000 | col);        
    }
}
void init7Segment(void) {
    // Initialize digit pins
    TRISE &= 0b11110010;    
    TRISD=0;
    PORTD =0;
    DIGIT1 = 0;
    DIGIT2 = 0;
}



 void seven_seg_Show(int i){
     
    unsigned char tens_digit = (i / 10) % 10;
    unsigned char ones_digit = i % 10;
    
    // Display tens digit on first digit
    PORTEbits.RE0 = 0;  // Set first digit high
    PORTD = hexvalue[tens_digit];
    PORTEbits.RE2 = 1;  // Set second digit low
    __delay_ms(30);
   
     // Display ones digit on second digit
    PORTEbits.RE2 = 0;  // Set second digit high
    PORTD = hexvalue[ones_digit];
    PORTEbits.RE0 = 1;  // Set first digit low
    __delay_ms(30);
     
   
}

  void seven_seg_All(int i){   
           
      if(i==1) //turn on
      {
        for(int k=0;k<10;k++)
        {
            PORTEbits.RE0 = 0;  // Set first digit high
            PORTD = 0x00;
            PORTEbits.RE2 = 1;  // Set second digit low
            __delay_ms(30);
        
            PORTEbits.RE0 = 1;  // Set first digit high
            PORTD = 0x00;
            PORTEbits.RE2 = 0;  // Set second digit low
            __delay_ms(30);          
        }        
      }
      else
      {
          PORTEbits.RE0 = 1;
          PORTEbits.RE2 = 1;
      }
      // Display tens digit on first digit
       
    
}"
