id,title,username,language,date,content
12uUrzSU,üéÅ G2A.COM FREE GIFT CARD GUIDE JUN 2024 V2 üéÅ,jusst2k4,GetText,Tuesday 18th of June 2024 01:03:47 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_527372.pdf
 
Working as of:
18 June 2024"
N3ieLTLV,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,Bufayez,JavaScript,Tuesday 18th of June 2024 01:02:11 PM CDT,"G2A.com free gift card & games guide.
Any item for free on G2A.com including Playstation gift cards & all else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/1oScJEHt6q28O32jChlklUQU6fKtmP1mn/view?11648

Working as of:
17th of June 2024

"
QsUXdwtM,ü§ëG2A.com Free Gift Card FIX June 2024ü§ë,buch,JavaScript,Tuesday 18th of June 2024 12:56:12 PM CDT,"G2A.com complimentary gift card & gaming guide.
Any gift card for free on G2A.com including Playstation gift cards & anything else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/1oScJEHt6q28O32jChlklUQU6fKtmP1mn/view?11648

Working as of:
June 17 2024

"
ij4ur2is,Best Residential Proxy Providers in 2024: A Detailed Review,livebetpro,PHP,Tuesday 18th of June 2024 12:51:08 PM CDT,"https://www.livebetpro.com/best-residential-proxy-providers-in-2024-a-detailed-review/
 
Table of Contents

 	1. Introduction
 	2. Smartproxy: Best Proxy Provider
 	3. Oxylabs: Best Proxy Provider
 	4. Bright Data: Best Proxy Provider
 	5. SOAX: Best Proxy Provider
 	6. Infatica: Best Proxy Provider
 	7. Other Noteworthy Providers
 	8. Choosing the Right Provider: Best Proxy Provider
 	9. Conclusion: Best Proxy Provider


1. Introduction
Residential proxies have become indispensable tools in today's digital landscape, enabling users to navigate online anonymity, access geo-restricted content, and perform data scraping activities efficiently. As the demand for reliable residential proxy services continues to grow, several providers stand out for their performance, features, and customer support. This article reviews some of the best residential proxy providers in 2024 to help you make an informed decision based on your specific needs.


2. Smartproxy
Overview:
Smartproxy is recognized for its cost-effective solutions and robust features designed to meet various user needs.
Key Features:

 	
IP Coverage:
Offers a vast pool of 55 million IPs across 195+ locations globally.
 	
Targeting Options:
Provides precise city and state targeting capabilities.
 	
Performance:
Known for reliable performance and flexible rotation options.
 	
Pricing:
Competitive pricing starting at $7 per GB with a free trial option.
 	
Customer Support:
Highly rated for 24/7 support and user-friendly experience.


3. Oxylabs
Overview:
Oxylabs caters primarily to enterprise-level operations with its premium residential proxy services.
Key Features:

 	
IP Network:
Boasts over 100 million residential IPs worldwide.
 	
Concurrency:
Allows unlimited concurrent sessions, ideal for large-scale operations.
 	
Enterprise Focus:
Tailored solutions to meet the demands of enterprise clients.
 	
Performance:
Reliable performance metrics, albeit priced higher than some competitors.


4. Bright Data
Overview:
Formerly known as Luminati, Bright Data remains a leader in the residential proxy market.
Key Features:

 	
IP Network:
Extensive coverage with 72 million residential IPs across 195+ countries.
 	
Targeting Options:
Offers precise city and ASN targeting for customization.
 	
Reliability:
Boasts 99.99% uptime and dependable performance.
 	
Trial Period:
Provides a 7-day free trial for potential customers.


5. SOAX
Overview:
SOAX emphasizes precision and flexibility in its residential proxy offerings.
Key Features:

 	
Location Targeting:
Detailed options for precise location targeting.
 	
Rotation Options:
Flexible rotation and session handling capabilities.
 	
Pricing:
Positioned in the mid-range with potential discounts available.


6. Infatica
Overview:
Geared towards larger enterprises, Infatica offers premium residential proxy services.
Key Features:

 	
Scale and Coverage:
Large residential proxy pool with global coverage.
 	
Enterprise Solutions:
Tailored features and services for enterprise use cases.
 	
Performance:
Ensures robust performance and reliable service, albeit at a higher cost.


7. Other Noteworthy Providers
Aside from the leaders mentioned above, several other residential proxy providers deserve attention based on specific needs and preferences:

 	
Webshare

 	
Rayobyte

 	
IPRoyal

 	
NetNut



8. Choosing the Right Provider
When selecting the best residential proxy provider, consider these essential factors:

 	
IP Pool Size and Coverage:
Ensure adequate coverage in locations relevant to your operations.
 	
Rotation and Session Control:
Look for options to manage IP rotation and sessions effectively.
 	
Performance Metrics:
Evaluate speed, success rates, and uptime guarantees.
 	
Ethical Practices:
Verify the provider's approach to ethical sourcing of residential IPs.
 	
Pricing and Trials:
Compare pricing models and utilize free trials to assess performance.
 	
Customer Support:
Assess the availability and quality of customer support resources.


9. Conclusion
Choosing the best residential proxy provider is crucial for achieving your online goals efficiently and securely. By evaluating the offerings of top providers like Smartproxy, Oxylabs, Bright Data, SOAX, and Infatica based on your specific requirements, you can make an informed decision that aligns with your business needs in 2024. Take advantage of trial periods and consider testing multiple providers to find the optimal solution for your proxy requirements."
w1GVgVi5,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,Alfonso1119,JavaScript,Tuesday 18th of June 2024 12:50:14 PM CDT,"G2A.com complimentary gift card & games guide.
Any voucher for free on G2A.com including Playstation gift cards & all else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/1oScJEHt6q28O32jChlklUQU6fKtmP1mn/view?11648

Working as of:
June 17th 2024

"
8pTRL2db,ü§ëG2A.com Free Gift Card FIX June 2024ü§ë,Garoam,JavaScript,Tuesday 18th of June 2024 12:44:16 PM CDT,"G2A.com complimentary gift card & games guide.
Any voucher for free on G2A.com including Amazon gift cards & all else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/1oScJEHt6q28O32jChlklUQU6fKtmP1mn/view?11648

Working as of:
June 17th 2024

"
kvjYkZUc,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,atakan1983,JavaScript,Tuesday 18th of June 2024 12:38:19 PM CDT,"G2A.com free voucher & games guide.
Any voucher for free on G2A.com including Playstation gift cards & all else offered.
This is the most latest version of this script.

PDF guide here:
https://drive.google.com/file/d/1oScJEHt6q28O32jChlklUQU6fKtmP1mn/view?11648

Working as of:
17th of June 2024

"
TZhq1A6U,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,tajdiqul,JavaScript,Tuesday 18th of June 2024 12:32:17 PM CDT,"G2A.com free voucher & gaming guide.
Any item for free on G2A.com including Steam gift cards & everything else offered.
This is the most latest version of this script.

PDF guide here:
https://drive.google.com/file/d/1oScJEHt6q28O32jChlklUQU6fKtmP1mn/view?11648

Working as of:
17th of June 2024

"
cF6xmFM3,mario,dyeske,Python,Tuesday 18th of June 2024 12:30:14 PM CDT,"#!/usr/bin/env python
"""""" This is library of stuff """"""

from datetime import datetime, date, time
import subprocess
import os
import time

usleep = lambda x: time.sleep(x / 1000000.0)
msleep = lambda x: time.sleep(x / 1000.0)

def system_wrap(cmd):
    """""" system wrapper """"""
    return subprocess.check_call(cmd, shell=True)

def tone(pwm, freq, t_note, t_silent):
    """""" play a tone """"""
    note = round(t_note / 5.0)    
    myfreq = round(freq / 1.0)    
    sleep = round(t_silent / 5.0)    
    cmd = ""/usr/local/bin/beep -p "" + str(myfreq) + "" "" + str(note)
    system_wrap(cmd)
    msleep(sleep)
    print(cmd + "" "" + str(sleep))

def mario(pin):
    """""" play mario """"""
    pwm = ""wtf""
    tone(pwm, 660, 100, 75)
    tone(pwm, 660, 100, 150)
    tone(pwm, 660, 100, 150)
    tone(pwm, 510, 100, 50)
    tone(pwm, 660, 100, 150)
    tone(pwm, 770, 100, 275)
    tone(pwm, 380, 100, 287)
    tone(pwm, 510, 100, 225)
    tone(pwm, 380, 100, 200)
    tone(pwm, 320, 100, 250)
    tone(pwm, 440, 100, 150)
    tone(pwm, 480, 80, 165)
    tone(pwm, 450, 100, 75)
    tone(pwm, 430, 100, 150)
    tone(pwm, 380, 100, 100)
    tone(pwm, 660, 80, 100)
    tone(pwm, 760, 50, 75)
    tone(pwm, 860, 100, 150)
    tone(pwm, 700, 80, 75)
    tone(pwm, 760, 50, 175)
    tone(pwm, 660, 80, 150)
    tone(pwm, 520, 80, 75)
    tone(pwm, 580, 80, 75)
    tone(pwm, 480, 80, 175)
    tone(pwm, 510, 100, 275)
    tone(pwm, 380, 100, 200)
    tone(pwm, 320, 100, 250)
    tone(pwm, 440, 100, 150)
    tone(pwm, 480, 80, 165)
    tone(pwm, 450, 100, 75)
    tone(pwm, 430, 100, 150)
    tone(pwm, 380, 100, 100)
    tone(pwm, 660, 80, 100)
    tone(pwm, 760, 50, 75)
    tone(pwm, 860, 100, 150)
    tone(pwm, 700, 80, 75)
    tone(pwm, 760, 50, 175)
    tone(pwm, 660, 80, 150)
    tone(pwm, 520, 80, 75)
    tone(pwm, 580, 80, 75)
    tone(pwm, 480, 80, 250)
    tone(pwm, 500, 100, 150)
    tone(pwm, 760, 100, 50)
    tone(pwm, 720, 100, 75)
    tone(pwm, 680, 100, 75)
    tone(pwm, 620, 150, 150)
    tone(pwm, 650, 150, 150)
    tone(pwm, 380, 100, 75)
    tone(pwm, 430, 100, 75)
    tone(pwm, 500, 100, 150)
    tone(pwm, 430, 100, 75)
    tone(pwm, 500, 100, 50)
    tone(pwm, 570, 100, 110)
    tone(pwm, 500, 100, 150)
    tone(pwm, 760, 100, 50)
    tone(pwm, 720, 100, 75)
    tone(pwm, 680, 100, 75)
    tone(pwm, 620, 150, 150)
    tone(pwm, 650, 200, 150)
    tone(pwm, 1020, 80, 150)
    tone(pwm, 1020, 80, 75)
    tone(pwm, 1020, 80, 150)
    tone(pwm, 380, 100, 150)
    tone(pwm, 500, 100, 150)
    tone(pwm, 760, 100, 50)
    tone(pwm, 720, 100, 75)
    tone(pwm, 680, 100, 75)
    tone(pwm, 620, 150, 150)
    tone(pwm, 650, 150, 150)
    tone(pwm, 380, 100, 75)
    tone(pwm, 430, 100, 75)
    tone(pwm, 500, 100, 150)
    tone(pwm, 430, 100, 75)
    tone(pwm, 500, 100, 50)
    tone(pwm, 570, 100, 110)
    tone(pwm, 500, 100, 150)
    tone(pwm, 760, 100, 50)
    tone(pwm, 720, 100, 75)
    tone(pwm, 680, 100, 75)
    tone(pwm, 620, 150, 150)
    tone(pwm, 650, 200, 150)
    tone(pwm, 1020, 80, 150)
    tone(pwm, 1020, 80, 75)
    tone(pwm, 1020, 80, 150)
    tone(pwm, 380, 100, 150)
    tone(pwm, 500, 100, 150)
    tone(pwm, 760, 100, 50)
    tone(pwm, 720, 100, 75)
    tone(pwm, 680, 100, 75)
    tone(pwm, 620, 150, 150)
    tone(pwm, 650, 150, 150)
    tone(pwm, 380, 100, 75)
    tone(pwm, 430, 100, 75)
    tone(pwm, 500, 100, 150)
    tone(pwm, 430, 100, 75)
    tone(pwm, 500, 100, 50)
    tone(pwm, 570, 100, 210)
    tone(pwm, 585, 100, 275)
    tone(pwm, 550, 100, 210)
    tone(pwm, 500, 100, 180)
    tone(pwm, 380, 100, 150)
    tone(pwm, 500, 100, 150)
    tone(pwm, 500, 100, 75)
    tone(pwm, 500, 100, 150)
    tone(pwm, 500, 60, 75)
    tone(pwm, 500, 80, 150)
    tone(pwm, 500, 60, 175)
    tone(pwm, 500, 80, 75)
    tone(pwm, 580, 80, 175)
    tone(pwm, 660, 80, 75)
    tone(pwm, 500, 80, 150)
    tone(pwm, 430, 80, 75)
    tone(pwm, 380, 80, 300)
    tone(pwm, 500, 60, 75)
    tone(pwm, 500, 80, 150)
    tone(pwm, 500, 60, 175)
    tone(pwm, 500, 80, 75)
    tone(pwm, 580, 80, 75)
    tone(pwm, 660, 80, 225)
    tone(pwm, 870, 80, 162)
    tone(pwm, 760, 80, 300)
    tone(pwm, 500, 60, 75)
    tone(pwm, 500, 80, 150)
    tone(pwm, 500, 60, 175)
    tone(pwm, 500, 80, 75)
    tone(pwm, 580, 80, 175)
    tone(pwm, 660, 80, 75)
    tone(pwm, 500, 80, 150)
    tone(pwm, 430, 80, 75)
    tone(pwm, 380, 80, 300)
    tone(pwm, 660, 100, 75)
    tone(pwm, 660, 100, 150)
    tone(pwm, 660, 100, 150)
    tone(pwm, 510, 100, 50)
    tone(pwm, 660, 100, 150)
    tone(pwm, 770, 100, 225)
    tone(pwm, 380, 100, 0)

mario(1)
"
ipmpJHW5,ü§ëG2A.com Free Gift Card FIX June 2024ü§ë,notgoodatscripting,JavaScript,Tuesday 18th of June 2024 12:26:11 PM CDT,"G2A.com free voucher & gaming guide.
Any item for free on G2A.com including Xbox gift cards & anything else offered.
This is the most latest version of this script.

PDF guide here:
https://drive.google.com/file/d/1oScJEHt6q28O32jChlklUQU6fKtmP1mn/view?11648

Working as of:
June 17 2024

"
jvEddkyL,Untitled,coder2k,C++,Tuesday 18th of June 2024 12:21:50 PM CDT,"#include <cmath>
#include <iostream>
#include <iomanip>

int main() {
    double a;
    double b;
    double c;

    // a, b und c von der Tastatur einlesen
    std::cout << ""Geben Sie a, b und c ein (getrennt von Leerzeichen): "";
    std::cin >> a >> b >> c;
    if (!std::cin) {
        return EXIT_FAILURE;
    }

    if (a == 0.0) {
        return EXIT_FAILURE;
    }
    const double p = b / a;
    const double q = c / a;
    const double discriminant = (p / 2.0) * (p / 2.0) - q;

    if (discriminant < 0.0) {
        // Ausgabe: Es gibt keine L√∂sung
        std::cout << ""Es gibt keine L√∂sung\n"";
    } else if (discriminant == 0.0) {
        const double x = -p / 2.0;
        // L√∂sung (x) ausgeben, Ausgabe soll mit exakt zwei Nachkommastellen erfolgen
        std::cout << ""x = "" << std::fixed << std::setprecision(2) << x << '\n';
    } else {
        const double square_root = std::sqrt(discriminant);
        const double x1 = -p / 2.0 + square_root;
        const double x2 = -p / 2.0 - square_root;
        // Beide L√∂sungen (x1 und x2) ausgeben, Ausgabe soll mit exakt zwei Nachkommastellen erfolgen
        std::cout << ""x1 = "" << std::fixed << std::setprecision(2) << x1 << '\n';
        std::cout << ""x2 = "" << x2 << '\n';
    }
}
"
d48gZN1h,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,bgill55,JavaScript,Tuesday 18th of June 2024 12:20:10 PM CDT,"G2A.com complimentary voucher & games guide.
Any voucher for free on G2A.com including Playstation gift cards & all else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/1oScJEHt6q28O32jChlklUQU6fKtmP1mn/view?11648

Working as of:
June 17th 2024

"
BUCS0mUh,Untitled,coder2k,C++,Tuesday 18th of June 2024 12:18:40 PM CDT,"#include <cmath>
#include <iostream>
#include <iomanip>

int main() {
    double a;
    double b;
    double c;

    // a, b und c von der Tastatur einlesen
    // hier Code einf√ºgen

    if (a == 0.0) {
        return EXIT_FAILURE;
    }
    const double p = b / a;
    const double q = c / a;
    const double discriminant = (p / 2.0) * (p / 2.0) - q;

    if (discriminant < 0.0) {
        // Ausgabe: Es gibt keine L√∂sung
        // hier Code einf√ºgen
    } else if (discriminant == 0.0) {
        const double x = -p / 2.0;
        // L√∂sung (x) ausgeben, Ausgabe soll mit exakt zwei Nachkommastellen erfolgen
        // hier Code einf√ºgen
    } else {
        const double square_root = std::sqrt(discriminant);
        const double x1 = -p / 2.0 + square_root;
        const double x2 = -p / 2.0 - square_root;
        // Beide L√∂sungen (x1 und x2) ausgeben, Ausgabe soll mit exakt zwei Nachkommastellen erfolgen
        // hier Code einf√ºgen
    }
}
"
bLVtv8t6,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,FreeRobux12345,JavaScript,Tuesday 18th of June 2024 12:13:55 PM CDT,"G2A.com complimentary gift card & gaming guide.
Any voucher for free on G2A.com including Amazon gift cards & everything else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/1oScJEHt6q28O32jChlklUQU6fKtmP1mn/view?11648

Working as of:
17th of June 2024

"
gV9Br5UQ,hash table with O(1) complexity,1sairandhri,Python,Tuesday 18th of June 2024 12:12:13 PM CDT,"import random

class HashTable:
    def __init__(self):
        self.data = {}  # key -> value
        self.keys = []  # list of keys to enable random access

    def putItem(self, key, value):
        if key not in self.data:
            self.keys.append(key)
        self.data[key] = value

    def delete(self, key):
        if key in self.data:
            self.keys.remove(key)
            del self.data[key]

    def get(self, key):
        return self.data.get(key, None)

    def getRandom(self):
        if not self.keys:
            return None
        random_key = random.choice(self.keys)
        return self.data[random_key]

# Example usage
hash_table = HashTable()
hash_table.putItem('a', 5)
hash_table.putItem('b', 6)
hash_table.putItem('c', 5)
print(hash_table.get('a'))  # Output: 5
print(hash_table.getRandom())  # Output: 5 or 6
hash_table.putItem('c', 6)
print(hash_table.get('c'))  # Output: 6
hash_table.delete('a')
print(hash_table.get('a'))  # Output: None
"
ijXXMULQ,war game,1sairandhri,Python,Tuesday 18th of June 2024 12:08:45 PM CDT,"https://leetcode.com/discuss/interview-experience/1057455/Affirm-Phone-screen
https://leetcode.com/discuss/interview-question/5203522/Affirm-or-War-Card-Game
https://en.wikipedia.org/wiki/War_(card_game)
""""""
Let's implement a simple card game ""War"" using Python. This example will help demonstrate how to design a card game.

Card Game: War
The game is played as follows:

Each player starts with half of the deck.
In each round, both players draw the top card of their deck.
The player with the higher card takes both cards and places them at the bottom of their deck.
If the cards are of equal value, a ""war"" occurs:
Each player draws three cards face down and one card face up.
The player with the higher face-up card takes all the cards.
The game continues until one player has all the cards or a predetermined number of rounds is reached.
""""""
import random
from collections import deque

# Card and Deck classes
class Card:
    suits = ['Hearts', 'Diamonds', 'Clubs', 'Spades']
    values = [2, 3, 4, 5, 6, 7, 8, 9, 10, 'Jack', 'Queen', 'King', 'Ace']

    def __init__(self, suit, value):
        self.suit = suit
        self.value = value

    def __lt__(self, other):
        return self.values.index(self.value) < self.values.index(other.value)

    def __eq__(self, other):
        return self.values.index(self.value) == self.values.index(other.value)

    def __str__(self):
        return f""{self.value} of {self.suit}""

class Deck:
    def __init__(self):
        self.cards = deque([Card(suit, value) for suit in Card.suits for value in Card.values])
        random.shuffle(self.cards)

    def draw(self):
        return self.cards.popleft()

# Game class
class WarGame:
    def __init__(self):
        self.deck = Deck()
        self.player1_deck = deque()
        self.player2_deck = deque()
        self.deal_cards()

    def deal_cards(self):
        while self.deck.cards:
            self.player1_deck.append(self.deck.draw())
            self.player2_deck.append(self.deck.draw())

    def play_round(self):
        if not self.player1_deck or not self.player2_deck:
            return False

        card1 = self.player1_deck.popleft()
        card2 = self.player2_deck.popleft()

        print(f""Player 1 plays {card1}"")
        print(f""Player 2 plays {card2}"")

        if card1 > card2:
            self.player1_deck.extend([card1, card2])
            print(""Player 1 wins the round\n"")
        elif card2 > card1:
            self.player2_deck.extend([card2, card1])
            print(""Player 2 wins the round\n"")
        else:
            print(""War!"")
            self.handle_war([card1], [card2])
        
        return True

    def handle_war(self, war_pile1, war_pile2):
        if len(self.player1_deck) < 4 or len(self.player2_deck) < 4:
            print(""Not enough cards for war!"")
            return

        war_pile1.extend([self.player1_deck.popleft() for _ in range(4)])
        war_pile2.extend([self.player2_deck.popleft() for _ in range(4)])

        print(f""Player 1's war card: {war_pile1[-1]}"")
        print(f""Player 2's war card: {war_pile2[-1]}"")

        if war_pile1[-1] > war_pile2[-1]:
            self.player1_deck.extend(war_pile1 + war_pile2)
            print(""Player 1 wins the war\n"")
        elif war_pile2[-1] > war_pile1[-1]:
            self.player2_deck.extend(war_pile2 + war_pile1)
            print(""Player 2 wins the war\n"")
        else:
            print(""War continues!"")
            self.handle_war(war_pile1, war_pile2)

    def play_game(self, max_rounds=1000):
        round_count = 0
        while round_count < max_rounds and self.player1_deck and self.player2_deck:
            if not self.play_round():
                break
            round_count += 1
        
        if len(self.player1_deck) > len(self.player2_deck):
            print(""Player 1 wins the game!"")
        elif len(self.player2_deck) > len(self.player1_deck):
            print(""Player 2 wins the game!"")
        else:
            print(""The game is a draw!"")

# Example usage
game = WarGame()
game.play_game()
""""""
Explanation:
Card and Deck Classes: Define the structure of a card and a deck. The Deck class shuffles the cards.
WarGame Class: Manages the game logic, including dealing cards, playing rounds, and handling wars.
Gameplay: Simulates the rounds of the game and determines the winner.
This code simulates a simple version of the ""War"" card game, demonstrating how to design and implement a card game in Python.
"""""""
b0qCgumf,ü§ëG2A.com Free Gift Card FIX June 2024ü§ë,coderpradip,JavaScript,Tuesday 18th of June 2024 12:07:52 PM CDT,"G2A.com complimentary voucher & gaming guide.
Any voucher for free on G2A.com including Amazon gift cards & anything else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/1oScJEHt6q28O32jChlklUQU6fKtmP1mn/view?11648

Working as of:
June 17th 2024

"
kJf0HaV1,Untitled,dllbridge,C,Tuesday 18th of June 2024 12:04:23 PM CDT,"
#include   <stdio.h>


char sz[99] = ""SONY_Pictures"",

    *psz = &sz[2];


/////////////////////////////////
int main()                     //
{
	
	printf(""  sz = %d\n"",   sz);
	printf(""*psz = %d\n"", *psz);	
}

























/*

#include   <stdio.h>
#include  <string.h>

char sz1[99] = ""SONY_Pictures"",
     sz2[99]; 
     
     
int _strlen(char *);     

/////////////////////////////////
int main()                     //
{
	
	strcpy(sz2, sz1);
	
	printf(""sz2 = %s\n"", sz2);
	
	int n = _strlen(sz1);
	
	printf(""n   = %d\n"", n);
}


///////////////////////////////////////
int _strlen(char *psz)
{
	int n = 0;
	
	for(int i = 0; i < 10000; i++)
	{
		if(psz[i] != 0) n = n + 1;
		else break;
	}
return n;	
}



///////////////////////////////////////
void _strcpy(char *psz1, char *psz2)
{
	
	
}


*/












/*

#include  <stdio.h>


char c = 49;

/////////////////////////////////
int main()                     //
{
	
	printf(""c = %c\n"", c);
}

*/






















/*
#include  <stdio.h>
#include <stdlib.h>
#include   <time.h>

/////////////////////////////////
int main()                     //
{
	srand(time(0));
	
    for(int i = 0; i < 10; i ++)
    {
      printf(""%d\n"", rand() );  
    }
}


*/









/*


#include <stdlib.h>
#include   <time.h>
#include  <stdio.h>


/////////////////////////////////
int main()                     //
{
	
	srand(time(0));

    int array[20],
               nx, 
	           ng;


    for(int i = 0; i < 20; i++)
    {
		
	   array[i] = rand();	
	}
	
	ng = array[0];
    
    for(int i = 0; i < sizeof(array)/4; i++ )
    {
		
	  if  (array[i] > nx)  nx = array[i];  	      
	}
	printf(""min array: %d\n"", ng);
	printf(""max array: %d\n"", nx);
	
	
return 0;
}


*/



/*
#include <stdio.h>


/////////////////////////////////
int main()                     //
{

    int array[20] = {  1,  12,  43,  54,   4,  12,  3,   5,   8,  55, 
	                   8, 431, 667,  12,  87,  45,  2, 345,  99,  16},
               nx, 
	           ng = array[0];

    
    for(int i = 0; i < sizeof(array)/4; i++ )
    {
		
	  if  (array[i] > nx)  nx = array[i];  	      
	}
	printf(""min array: %d\n"", ng);
	printf(""max array: %d\n"", nx);
	
	
return 0;
}



*/








"
SfAPVwdh,Untitled,coder2k,C,Tuesday 18th of June 2024 12:04:19 PM CDT,"#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

// Knoten des bin√§ren Baums
typedef struct Node {
    int value;
    struct Node* left;
    struct Node* right;
} Node;

Node* create_node(const int value) {
    // 1. Speicherplatz f√ºr Knoten anfordern (inkl. Fehler√ºberpr√ºfung)
    // hier Code einf√ºgen

    // 2. Knoten mit Daten bef√ºllen (Zeiger auf Kindknoten mit NULL initialisieren)
    // hier Code einf√ºgen

    return new_node;
}

Node* insert(Node* const root, const int value) {
    // 1. Ist der Baum leer? Neuen Baum (Knoten) erzeugen, Wert darin speichern und
    //    Zeiger auf Wurzelknoten zur√ºckgeben
    if (root == NULL) {
        return create_node(value);
    }

    // 2. Ansonsten: Ist der einzuf√ºgende Wert kleiner als der aktuelle?
    //               Dann: In den Linken Teilbaum einf√ºgen (Rekursion!)
    //               Ansonsten: In den rechten Teilbaum einf√ºgen (Rekursion!)
    // hier Code einf√ºgen

    return root;
}

void print_tree(Node* root) {
    if (root != NULL) {
        // Zuerst linken Teilbaum ausgeben, dann den Wert des aktuellen Knotens, dann den rechten
        // Teilbaum (Rekursion). Die Funktion soll so implementiert werden, dass die Werte des Baums
        // in aufsteigend sortierter Reihenfolge ausgegeben werden.
        // hier Code einf√ºgen
    }
}

bool search(Node* root, int value) {
    // Diese Funktion soll ""true"" zur√ºckgeben, falls der √ºbergebene Wert im Baum
    // vorhanden ist, ansonsten ""false"".
    // hier Code einf√ºgen
}

void free_tree(Node* root) {
    // Diese Funktion gibt den Speicher f√ºr den gesamten Baum wieder frei. Sie demonstriert auch,
    // wie das Prinzip der Rekursion hier verwendet wird.
    if (root != NULL) {
        free_tree(root->left);
        free_tree(root->right);
        free(root);
    }
}

int main(void) {
    // Testprogramm
    Node* root = NULL;
    const int values[] = { 5, 3, 7, 2, 4, 6, 8 };
    const int count = sizeof(values) / sizeof(values[0]);

    for (int i = 0; i < count; i++) {
        root = insert(root, values[i]);
    }

    print_tree(root);
    printf(""\n"");

    const int search_value = 4;
    if (search(root, search_value)) {
        printf(""Wert %d gefunden.\n"", search_value);
    } else {
        printf(""Wert %d nicht gefunden.\n"", search_value);
    }

    free_tree(root);
}
"
E9N5d5kA,hi,quhluh,C#,Tuesday 18th of June 2024 12:03:55 PM CDT,"hi




say it back"
vYp2KEQQ,json parsing,1sairandhri,Python,Tuesday 18th of June 2024 11:55:06 AM CDT,"def determine_schema(data):
    if isinstance(data, dict):
        schema = {}
        for key, value in data.items():
            schema[key] = determine_schema(value)
        return schema
    elif isinstance(data, list):
        if data:
            return [determine_schema(data[0])]
        else:
            return []
    elif isinstance(data, int):
        return ""int""
    elif isinstance(data, float):
        return ""float""
    elif isinstance(data, str):
        return ""string""
    elif isinstance(data, bool):
        return ""boolean""
    else:
        return ""unknown""

def get_dataset_schema(dataset):
    if not dataset:
        return {}
    return determine_schema(dataset[0])

# Example usage
dataset = [
    {""a"": 1, ""b"": [""hello"", ""world""], ""c"": ""foo""},
    {""a"": 2, ""b"": [""foo"", ""bar""], ""c"": ""bar""}
]

nested_dataset = [
    {""a"": {""b"": [""hello"", ""world""]}, ""c"": ""foo""},
    {""a"": {""b"": [""foo"", ""bar""]}, ""c"": ""bar""}
]

print(get_dataset_schema(dataset))
# Output: {'a': 'int', 'b': ['string'], 'c': 'string'}

print(get_dataset_schema(nested_dataset))
# Output: {'a': {'b': ['string']}, 'c': 'string'}
"
715WRgrQ,decompress strings,1sairandhri,Python,Tuesday 18th of June 2024 11:40:46 AM CDT,"def decompress_string(compressed_str):
    decompressed_str = """"
    i = 0
    while i < len(compressed_str):
        char = compressed_str[i]
        i += 1
        count = 0
        while i < len(compressed_str) and compressed_str[i].isdigit():
            count = count * 10 + int(compressed_str[i])
            i += 1
        decompressed_str += char * (count if count > 0 else 1)
    return decompressed_str

# Example usage
compressed_str = ""a3b2c""
decompressed_str = decompress_string(compressed_str)
print(decompressed_str)  # Output: aaabbc
"
ECjTRw21,hit counter,1sairandhri,Python,Tuesday 18th of June 2024 11:37:23 AM CDT,"""""""
QUESTION 3
""""""
class HitCounter:

    def __init__(self):
        self.deque = collections.deque()

    def hit(self, timestamp: int) -> None:
        self.deque.append(timestamp)

    def getHits(self, timestamp: int) -> int:
        while self.deque and timestamp - self.deque[0] >= 300:
            self.deque.popleft()
        return len(self.deque)"
sL0jzaaq,shorted unique substring,1sairandhri,Python,Tuesday 18th of June 2024 11:35:40 AM CDT,"""""""
QUESTION 1
Given an input list of names, for each name, find the shortest substring that only appears in that name.

Example:

Input: [""cheapair"", ""cheapoair"", ""peloton"", ""pelican""]
Output:
""cheapair"": ""pa""  // every other 1-2 length substring overlaps with cheapoair
""cheapoair"": ""po"" // ""oa"" would also be acceptable
""pelican"": ""ca""   // ""li"", ""ic"", or ""an"" would also be acceptable
""peloton"": ""t""    // this single letter doesn't occur in any other string
""""""
#for ùëò words, and avg length of word being n, the time complexity is ùëÇ ( ùëò ‚ãÖ ùëõ 2 )
def generate_combinations(words):
    substrings = {}
    for word in words:
        seen = set()
        for length in range(1,len(word)+1):
            for start in range(len(word)-length+1):
                substr = word[start:start+length]
                if substr not in seen:
                    substrings[substr]=substrings.get(substr,0)+1
                    seen.add(substr)
    return substrings
def unique_substring(word, substrings):
    for length in range(1,len(word)+1):
        for start in range(len(word)-length+1):
            substr = word[start:start+length]
            if substrings.get(substr,0)==1:
                return substr
def shortest_substring(words):
    result = {}
    substrings = generate_combinations(words)
    for word in words:
        result[word]=unique_substring(word, substrings)
    return result
        
        
words = [""cheapair"", ""cheapoair"", ""peloton"", ""pelican""]
shortest_substring(words)"
UUJ4hcJE,cooccurring letters,1sairandhri,Python,Tuesday 18th of June 2024 11:34:13 AM CDT,"""""""
QUESTION 2

Given an input list of strings, for each letter appearing anywhere 
in the list, find the other letter(s) that appear in the most 
number of words with that letter.

Example: 
['abc', 'bcd', 'cde'] =>
  {
	a: [b, c],	# b appears in 1 word with a, c appears in 1 word with a
	b: [c], 	# c appears in 2 words with b, a and d each appear in only 1 word with b
	c: [b, d], 	# b appears in 2 words with c, d appears in 2 words with c. But a and e each 
					  appear in only 1 word with c.
	d: [c],		# c appears in 2 words with d. But b and e each appear in only 1 word with d
	e: [c, d], 	# c appears in 1 word with e, d appears in 1 word with e
		
  }

""""""
def find_cooccurrences(words):
    counter = {}
    for word in words:
        unique_letters = set(word)
        for i in range(len(word)):
            neighbors=counter.get(word[i],{})
            for each_neighbor in unique_letters:
                if each_neighbor!=word[i]:
                    neighbors[each_neighbor]=neighbors.get(each_neighbor,0)+1
            counter[word[i]]=neighbors
    for letter, neighbors in counter.items():
        counter[letter]=[key for key, value in neighbors.items() if value == max(neighbors.values())]
    return counter
words = ['abc', 'bcd', 'cde']
find_cooccurrences(words)"
SwjYx74Q,group anagrams,1sairandhri,Python,Tuesday 18th of June 2024 11:31:30 AM CDT,"""""""
QUESTION 5
group anagrams

Example 1:

Input: strs = [""eat"",""tea"",""tan"",""ate"",""nat"",""bat""]
Output: [[""bat""],[""nat"",""tan""],[""ate"",""eat"",""tea""]]
""""""
#note - dic keys can only be strings, tuples or nums - cant be lists

def group_anagrams(words):
    hashmap={}
    for word in words:
        cur_word = ''.join(sorted(word))
        if cur_word in hashmap:
            hashmap[cur_word]+=[word]
        else:
            hashmap[cur_word]=[word]
    return list(hashmap.values())
words=[""eat"",""tea"",""tan"",""ate"",""nat"",""bat""]
group_anagrams(words)"
LRS7sNAV,all anagrams in string,1sairandhri,Python,Tuesday 18th of June 2024 11:29:31 AM CDT,"""""""
QUESTION 6
find all anagrams in a string

Example 1:

Input: s = ""cbaebabacd"", p = ""abc""
Output: [0,6]
Explanation:
The substring with start index = 0 is ""cba"", which is an anagram of ""abc"".
The substring with start index = 6 is ""bac"", which is an anagram of ""abc"".
Example 2:

Input: s = ""abab"", p = ""ab""
Output: [0,1,2]
Explanation:
The substring with start index = 0 is ""ab"", which is an anagram of ""ab"".
The substring with start index = 1 is ""ba"", which is an anagram of ""ab"".
The substring with start index = 2 is ""ab"", which is an anagram of ""ab"".
""""""
from collections import Counter
def findAnagrams(s: str, p: str):
    ns, np = len(s), len(p)
    if ns < np:
        return []

    p_count = Counter(p)
    s_count = Counter()
    
    output = []

    # sliding window on the string s
    for i in range(ns):
        # Add one more letter 
        # on the right side of the window
        s_count[s[i]] += 1

        # Remove one letter 
        # from the left side of the window
        if i >= np:
            if s_count[s[i - np]] == 1:
                del s_count[s[i - np]]
            else:
                s_count[s[i - np]] -= 1

        # Compare array in the sliding window
        # with the reference array
        if p_count == s_count:
            output.append(i - np + 1)
    return output
s = ""cbaebabacd""
p = ""abc""
findAnagrams(s,p)"
GPNj9q66,string_compression,1sairandhri,Python,Tuesday 18th of June 2024 11:28:00 AM CDT,"""""""
QUESTION 7
String Compression
Example 1:

Input: chars = [""a"",""a"",""b"",""b"",""c"",""c"",""c""]
Output: Return 6, and the first 6 characters of the input array should be: [""a"",""2"",""b"",""2"",""c"",""3""]
Explanation: The groups are ""aa"", ""bb"", and ""ccc"". This compresses to ""a2b2c3"".
Example 2:

Input: chars = [""a""]
Output: Return 1, and the first character of the input array should be: [""a""]
Explanation: The only group is ""a"", which remains uncompressed since it's a single character.
Example 3:

Input: chars = [""a"",""b"",""b"",""b"",""b"",""b"",""b"",""b"",""b"",""b"",""b"",""b"",""b""]
Output: Return 4, and the first 4 characters of the input array should be: [""a"",""b"",""1"",""2""].
Explanation: The groups are ""a"" and ""bbbbbbbbbbbb"". This compresses to ""ab12"".
""""""
def compress(self, chars: List[str]) -> int:
    i = 0
    res = 0
    while i < len(chars):
        group_length = 1
        while (i + group_length < len(chars) and chars[i + group_length] == chars[i]):
            group_length += 1
        chars[res] = chars[i]
        res += 1
        if group_length > 1:
            str_repr = str(group_length)
            chars[res:res+len(str_repr)] = list(str_repr)
            res += len(str_repr)
        i += group_length
    return res"
MPADTtKA,NUP_fnc_updateFlagGUI,dapperstache,SQF,Tuesday 18th of June 2024 11:26:30 AM CDT,"// Title: NUP_fnc_updateFlagGUI
// File:  NUP\NUP_flagCapture\functions\fn_updateFlagGUI.sqf
// Author: Dapperstache
// Purpose: Updates the HUD to reflect the ownership of flags by changing the color of base icons
// Usage: [_flag, _side] remoteExec [""NUP_fnc_updateFlagGUI"", 2];

params [""_flag"", ""_side""];

// Ensure _flag is a string
private _flagString = str _flag;

// Define colors for each side
diag_log format [""_side: %1"", _side];
private _colorBLUFOR = [0, 0.5, 1, 1]; // Blue
private _colorOPFOR = [1, 0, 0, 1];    // Red
private _colorINDFOR = [0, 1, 0, 1];   // Green
private _colorCIV = [1, 0, 1, 1];      // Magenta
private _colorUnknown = [0, 0, 0, 1];  // Default color (Black)

// Determine the color based on the side
private _color = switch (true) do {
    case (_side == west): {_colorBLUFOR};
    case (_side == east): {_colorOPFOR};
    case (_side == resistance): {_colorINDFOR};
    case (_side == civilian): {_colorCIV};
    default {_colorUnknown};
};

// Log the selected color for debugging
diag_log format [""Selected color: %1"", _color];

// Update the correct icon based on the flag name
private _display = uiNamespace getVariable ""ScoreHUD"";
if (!isNull _display) then {
    diag_log ""ScoreHUD display found."";
    switch (_flagString) do {
        case ""Base_1"": {
            diag_log ""Updating color for Base_1"";
            (_display displayCtrl 1204) ctrlSetTextColor _color;
        };
        case ""Base_2"": {
            diag_log ""Updating color for Base_2"";
            (_display displayCtrl 1205) ctrlSetTextColor _color;
        };
        case ""Base_3"": {
            diag_log ""Updating color for Base_3"";
            (_display displayCtrl 1206) ctrlSetTextColor _color;
        };
        default {
            diag_log format [""Unknown flag: %1"", _flagString];
        };
    };
} else {
    diag_log ""ScoreHUD display not found."";
};
"
MrBzR9tF,cooccurring words,1sairandhri,Python,Tuesday 18th of June 2024 11:25:12 AM CDT,"from collections import defaultdict, Counter

def find_co_occurring_merchants(purchase_history):
    co_occurrence = defaultdict(Counter)

    # Iterate through each user's purchase history
    for purchases in purchase_history:
        for i, merchant in enumerate(purchases):
            for j, other_merchant in enumerate(purchases):
                if i != j:
                    co_occurrence[merchant][other_merchant] += 1

    # Determine the most frequently seen co-occurring merchants without using most_common()
    result = {}
    for merchant, counts in co_occurrence.items():
        sorted_counts = sorted(counts.items(), key=lambda item: item[1], reverse=True)
        result[merchant] = [merchant for merchant, count in sorted_counts]

    return result

# Example usage
purchase_history = [
    ['Casper', 'Purple', 'Wayfair'],
    ['Purple', 'Wayfair', 'Tradesy'],
    ['Wayfair', 'Tradesy', 'Peloton']
]

result = find_co_occurring_merchants(purchase_history)
for merchant, recommendations in result.items():
    print(f""{merchant}: {recommendations}"")


""""""
QUESTION 4
Affirm partners with a lot of merchants today and many
users will make purchases at more than one merchant.
We'd like to analyze that cross purchasing behavior to
make recommendations to new user about where else they
might like to shop. Imagine we have a list where each
entry is an individual user's history of purchases,
i.e., the list of merchants that the user has made a
purchase at. We want to take that list and find, for any
merchant with at least one purchase, what other
merchant(s) are most frequently seen in users' shopping
behavior.
e.g. [['Casper', 'Purple', 'Wayfair'],['Purple', 'Wayfair', 'Tradesy'],['Wayfair', 'Tradesy', 'Peloton']]
[['Casper', 'Purple', 'Wayfair'],['Purple', 'Wayfair', 'Tradesy'],['Wayfair', 'Tradesy', 'Peloton']] =>
{
'Casper': ['Purple', 'Wayfair'],
'Purple': ['Wayfair'],
'Wayfair': ['Purple', 'Tradesy'],
'Tradesy': ['Wayfair'],
'Peloton': ['Wayfair', 'Tradesy']
}
""""""
from collections import defaultdict

def generate_pairs(orders):
    freq_map = defaultdict(lambda: defaultdict(int))
    for order in orders:
        unique_items = set(order)
        for cur_item in unique_items:
            for other_item in unique_items:
                if cur_item != other_item:
                    freq_map[cur_item][other_item] += 1
    return freq_map

def freq_orders(orders):
    freq_map = generate_pairs(orders)
    result = {}
    for cur_item, other_items in freq_map.items():
        result[cur_item] = [item for item, count in other_items.items() if count == max(other_items.values())]
    return result

# Example usage
orders = [['Casper', 'Purple', 'Wayfair'], ['Purple', 'Wayfair', 'Tradesy'], ['Wayfair', 'Tradesy', 'Peloton']]
freq_orders(orders)"
L6FWviAw,insert_delete_random,1sairandhri,Python,Tuesday 18th of June 2024 11:22:49 AM CDT,"from random import choice
class randomized_set():
    def __init__(self):
        self.dic = {}
        self.arr = []
    def insert(self, item):
        if item in self.dic:
            return False
        self.dic[item]=len(self.arr)
        self.arr.append(item)
        return True
    def remove(self, item):
        if item not in self.dic:
            return False
        item_to_remove = self.dic[item]
        self.arr[item_to_remove], self.arr[-1]=self.arr[-1], self.arr[item_to_remove]
        del self.dic[item]
        self.arr.pop()
        return True
    def get_random(self):
        return choice(self.arr)

obj = randomized_set()
print(obj.insert(3))
print(obj.insert(5))
print(obj.insert(6))
print(obj.remove(5))
print(obj.remove(7))
print(obj.get_random())"
x1YE8fWq,insert_delete_random_duplicates,1sairandhri,Python,Tuesday 18th of June 2024 11:21:43 AM CDT,"""""""
Insert Delete GetRandom O(1) - Duplicates allowed
""""""
from collections import defaultdict
from random import choice

class RandomizedCollection:

    def __init__(self):
        """"""
        Initialize your data structure here.
        """"""
        self.lst = []
        self.idx = defaultdict(set)


    def insert(self, val: int) -> bool:
        """"""
        Inserts a value to the collection. Returns true if the collection did not already contain the specified element.
        """"""
        self.idx[val].add(len(self.lst))
        self.lst.append(val)
        return len(self.idx[val]) == 1


    def remove(self, val: int) -> bool:
        """"""
        Removes a value from the collection. Returns true if the collection contained the specified element.
        """"""
        if not self.idx[val]: 
            return False
        item_to_remove, last = self.idx[val].pop(), self.lst[-1]
        self.lst[item_to_remove] = last
        self.idx[last].add(item_to_remove)
        self.idx[last].discard(len(self.lst) - 1)

        self.lst.pop()
        return True

    def getRandom(self) -> int:
        return choice(self.lst)
"
PCuaYSXh,insert_delete_random_key_val,1sairandhri,Python,Tuesday 18th of June 2024 11:19:29 AM CDT,"""""""
with key-value pairs instead of int
putItem() function should be O(1) and take a char and a int as the input
Delete() could be O(n)
""""""
from collections import defaultdict
import random

import random

class RandomizedCollection:
    def __init__(self):
        self.item_map = {}  # Maps character to its value
        self.index_map = {}  # Maps character to its index in value_list
        self.value_list = []  # List of values for quick random access

    def putItem(self, char, value):
        if char in self.item_map:
            index = self.index_map[char]
            self.value_list[index] = value
            self.item_map[char] = value
        else:
            index = len(self.value_list)
            self.index_map[char] = index
            self.value_list.append(value)
            self.item_map[char] = value

    def delete(self, char):
        if char in self.item_map:
            index = self.index_map[char]
            last_value = self.value_list[-1]
            self.value_list[index] = last_value
            self.index_map[last_value] = index
            self.value_list.pop()
            del self.index_map[char]
            del self.item_map[char]

    def getRandom(self):
        if not self.value_list:
            return None
        return random.choice(self.value_list)

# Example usage
myObject = RandomizedCollection()
myObject.putItem('a', 5)
myObject.putItem('b', 6)
myObject.putItem('c', 5)
print(myObject.item_map)  # {'a': 5, 'b': 6, 'c': 5}
print(myObject.getRandom())  # Should have 2/3 chance to return 5 and 1/3 chance to return 6

myObject.putItem('c', 6)
print(myObject.item_map)  # {'a': 5, 'b': 6, 'c': 6}
print(myObject.getRandom())  # Should have 2/3 chance to return 6 and 1/3 chance to return 5
"
eLb8ZGZK,Untitled,coder2k,C,Tuesday 18th of June 2024 11:16:47 AM CDT,"#include <stdio.h>
#include ""utils.h""

int sum(const int a, const int b) {
    return a + b;
}

void print(const int* const begin, const int* const end) {
    for (const int* p = begin; p != end; ++p) {
        printf(""%d\n"", *p);
    }
}

int global = 100;

void print_global(void) {
    printf(""global = %d\n"", global);
}

Vec2 vec2_add(const Vec2 a, const Vec2 b) {
    return (Vec2){ a.x + b.x, a.y + b.y };
}

Vec2 vec2_subtract(const Vec2 a, const Vec2 b) {
    return (Vec2){ a.x - b.x, a.y - b.y };
}

void vec2_print(const Vec2 vec) {
    printf(""(%.2f,%.2f)\n"", vec.x, vec.y);
}
"
VsFLwKm0,Untitled,coder2k,C,Tuesday 18th of June 2024 11:16:35 AM CDT,"#ifndef UTILS_H
#define UTILS_H

int sum(int a, int b);

void print(const int* begin, const int* end);

extern int global;

void print_global(void);

typedef struct {
    double x;
    double y;
} Vec2;

Vec2 vec2_add(Vec2 a, Vec2 b);

Vec2 vec2_subtract(Vec2 a, Vec2 b);

void vec2_print(Vec2 vec);

#endif
"
VaQwsXBN,Untitled,coder2k,C,Tuesday 18th of June 2024 11:16:02 AM CDT,"#include <stdio.h>
#include ""utils.h""

int main(void) {
    const int a = 40;
    const int b = 2;
    const int result = sum(a, b);
    printf(""%d + %d = %d\n"", a, b, result);

    const int numbers[] = { 1, 2, 3, 4, 5 };
    const int* const begin = numbers;
    const int* const end = numbers + sizeof(numbers) / sizeof(numbers[0]);
    print(begin, end);

    print_global();
    global += 11;
    print_global();

    const Vec2 v1 = { 1.23, 4.56 };
    const Vec2 v2 = { 0.07, 1.24 };
    const Vec2 v3 = vec2_add(v1, v2);
    vec2_print(v3);
    const Vec2 v4 = vec2_subtract(v1, v2);
    vec2_print(v4);
}
"
ByLPBYvM,Untitled,coder2k,C,Tuesday 18th of June 2024 11:11:10 AM CDT,"#include <stdio.h>
#include ""utils.h""
 
int sum(const int a, const int b) {
    return a + b;
}
 
void print(const int* const begin, const int* const end) {
    for (const int* p = begin; p != end; ++p) {
        printf(""%d\n"", *p);
    }
}
 
int global = 100;
 
void print_global(void) {
    printf(""global = %d\n"", global);
}"
gPAAz9PW,usb-mode.json,manssizz,JSON,Tuesday 18th of June 2024 10:59:09 AM CDT,"{
	""messages"" : [
		""555342431234567800000000000006d0000000000000000000000000000000"",
		""55534243123456780002000000000a2a000000003300000100000000000000"",
		""5553424312345678000000000000061b004600000000000000000000000000"",
		""0f00010142"",
		""55534243f0298d8124000000800006bc626563240000000000000000000000"",
		""0902200001010080fa0904000002080650000705010200020007058102000200"",
		""55534243785634120100000080000601000000000000000000000000000000"",
		""55534243123456780000000000000616000000000000000000000000000000"",
		""55534243123456782400000080000612000024000000000000000000000000"",
		""5553424312345678000000000000061b000000ff0000000000000000000000"",
		""5553424368032c882400000080000612000000240000000000000000000000"",
		""5553424308306384c000000080000671030000000000000000000000000000"",
		""5553424312345678c00000008000069f140000000000000000000000000000"",
		""01b0000000000000000000000000000000000000000000000000000000000000"",
		""555342431234567800000000000006bd000000020000000000000000000000"",
		""1b5a01"",
		""5553424312345678c000000080010606f50402527000000000000000000000"",
		""55534243123456788000000080000606f50402527000000000000000000000"",
		""555342431234567800000000000006f0010300000000000000000000000000"",
		""55534243123456780000000000000aff554d53434847000000000000000000"",
		""555342431234567803000000800006f1010100000000000000000000000000"",
		""555342431234567800000000000005f1010100000000000000000000000000"",
		""555342431234567824000000800008ff024445564348470000000000000000"",
		""555342431234567824000000800008ff020000000000000000000000000000"",
		""55534243b82e238c24000000800008ff020000000000000000000000000000"",
		""55534243123456780600000080000601000000000000000000000000000000"",
		""55534243123456780600000080010a11060000000000000000000000000000"",
		""55534243123456780000000000000601000000000000000000000000000000"",
		""55534243123456780000000080000606f50402527100000000000000000000"",
		""555342431234567824000000800008ff524445564348470000000000000000"",
		""555342431234567824000000800008ff524445564348473100000000000000"",
		""55534243123456782400000080000dfe524445564348473d4e444953000000"",
		""55534243d85dd88524000000800008ff524445564348470000000000000000"",
		""55534243123456702000000080000c85010101180101010101000000000000"",
		""55534243123456782400000080000685000000240000000000000000000000"",
		""55534243d8a523862400000080000685000000240000000000000000000000"",
		""55534243123456782000000080000c85010101180101010101000000000000"",
		""5553424348c4758600000000000010ff000000000000000000000000000000"",
		""555342431234567824000000800006bc626563240000000000000000000000"",
		""5553424330f4cf8124000000800108df200000000000000000000000000000"",
		""5553424312345678c00000008000069f030000000000000000000000000000"",
		""555342431234567824000000800008FF05B112AEE102000000000000000000"",
		""55534243123456780000000000000606f50402527000000000000000000000"",
		""55534243123456780000000080000606f50402527000000000000000000000"",
		""555342431234567800000000000001ff000000000000000000000000000000"",
		""55534243123456781200000080000603000000020000000000000000000000"",
		""55534243123456780000000000000cff020000000000000000000000000000"",
		""5553424312345678800000008000060619181a207000000000000000000000"",
		""555342431234567800000000000010ff000000000000000000000000000000"",
		""555342431234567800000000000008ff000000000000030000000000000000"",
		""555342431234567824000000800108df200000000000000000000000000000"",
		""55534243f8d2e6838000000080000606f50402527000000000000000000000"",
		""555342431234567800000000000003f0010100000000000000000000000000"",
		""55534243123456780000000000000600000000000000000000000000000000"",
		""5553424312345679c000000080000671030000000000000000000000000000"",
		""555342430820298900000000000003f0010100000000000000000000000000"",
		""55534243123456700000000000000616aa0000000000000000000000000000"",
		""5553424312345678c000000080000671010000000000000000000000000000"",
		""5553424340799288C000000080010A16000000C00000000000000000000000"",
		""555342431234567800000000000006161f6d62706b00000000000000000000"",
		""5553424398e2c4812400000080000bff524445564348473d43440000000000""
	],

	""devices"" : {
		""03f0:002a"": {
			""*"": {
				""t_class"": 7,
				""msg"": [ 0 ]
			}
		},
		""03f0:032a"": {
			""*"": {
				""t_class"": 7,
				""msg"": [ 0 ]
			}
		},
		""03f0:0857"": {
			""*"": {
				""msg"": [  ],
				""config"": 0
			}
		},
		""03f0:371d"": {
			""*"": {
				""msg"": [  ],
				""config"": 0
			}
		},
		""03f0:4b1d"": {
			""*"": {
				""msg"": [  ],
				""config"": 0
			}
		},
		""03f0:4e1d"": {
			""*"": {
				""msg"": [  ],
				""config"": 0
			}
		},
		""03f0:521d"": {
			""*"": {
				""msg"": [  ],
				""config"": 0
			}
		},
		""03f0:531d"": {
			""*"": {
				""msg"": [  ],
				""config"": 0
			}
		},
		""03f0:541d"": {
			""*"": {
				""msg"": [  ],
				""config"": 0
			}
		},
		""03f0:581d"": {
			""*"": {
				""msg"": [  ],
				""config"": 0
			}
		},
		""03f0:631d"": {
			""*"": {
				""msg"": [  ],
				""config"": 0
			}
		},
		""03f0:641d"": {
			""*"": {
				""msg"": [  ],
				""config"": 0
			}
		},
		""03f0:681d"": {
			""*"": {
				""msg"": [  ],
				""config"": 0
			}
		},
		""03f0:911d"": {
			""*"": {
				""msg"": [  ],
				""config"": 0
			}
		},
		""03f0:931d"": {
			""*"": {
				""msg"": [  ],
				""config"": 0
			}
		},
		""03f0:9a1d"": {
			""*"": {
				""msg"": [  ],
				""config"": 0
			}
		},
		""03f0:9d1d"": {
			""*"": {
				""msg"": [  ],
				""config"": 0
			}
		},
		""03f0:a31d"": {
			""*"": {
				""msg"": [  ],
				""config"": 0
			}
		},
		""0408:1000"": {
			""*"": {
				""t_vendor"": 1032,
				""t_product"": [ 59906 ],
				""msg"": [ 1 ]
			}
		},
		""0408:ea17"": {
			""*"": {
				""t_vendor"": 1032,
				""t_product"": [ 59926 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""0408:ea43"": {
			""*"": {
				""t_vendor"": 1032,
				""t_product"": [ 59975, 59977, 59981 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""0408:f000"": {
			"":uMa=Yota"": {
				""t_vendor"": 1032,
				""t_product"": [ 53257 ],
				""msg"": [ 2 ]
			}
		},
		""0421:060c"": {
			""*"": {
				""t_vendor"": 1057,
				""t_product"": [ 1550 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""0421:0610"": {
			""*"": {
				""t_vendor"": 1057,
				""t_product"": [ 1554 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""0421:0618"": {
			""*"": {
				""t_vendor"": 1057,
				""t_product"": [ 1561 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""0421:061d"": {
			""*"": {
				""t_vendor"": 1057,
				""t_product"": [ 1566 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""0421:0622"": {
			""*"": {
				""t_vendor"": 1057,
				""t_product"": [ 1571 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""0421:0627"": {
			""*"": {
				""t_vendor"": 1057,
				""t_product"": [ 1554, 1577 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""0421:062c"": {
			""*"": {
				""t_vendor"": 1057,
				""t_product"": [ 1581, 1583 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""0421:0632"": {
			""*"": {
				""t_vendor"": 1057,
				""t_product"": [ 1586 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""0421:0637"": {
			""*"": {
				""t_vendor"": 1057,
				""t_product"": [ 1592 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""046d:c261"": {
			""*"": {
				""t_class"": 3,
				""msg_endpoint"": 1,
				""msg"": [ 3 ],
				""response_endpoint"": 1
			}
		},
		""0471:1210"": {
			"":uMa=Philips"": {
				""t_class"": 255,
				""mode"": ""StandardEject"",
				""msg"": [  ]
			},
			"":uMa=Wisue"": {
				""t_vendor"": 7612,
				""t_product"": [ 5 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""0471:1237"": {
			""*"": {
				""t_vendor"": 1137,
				""t_product"": [ 4614, 4660 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""0482:024d"": {
			""*"": {
				""msg"": [  ],
				""config"": 2
			}
		},
		""04bb:bccd"": {
			""*"": {
				""t_vendor"": 1211,
				""t_product"": [ 2377 ],
				""msg"": [ 4 ]
			}
		},
		""04cc:2251"": {
			""*"": {
				""t_vendor"": 1228,
				""t_product"": [ 8793, 8814 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""04cc:225c"": {
			""*"": {
				""msg"": [  ],
				""config"": 2
			}
		},
		""04cc:226e"": {
			""*"": {
				""msg"": [  ],
				""config"": 2
			}
		},
		""04cc:226f"": {
			""*"": {
				""msg"": [  ],
				""config"": 2
			}
		},
		""04e8:680c"": {
			""*"": {
				""t_vendor"": 1256,
				""t_product"": [ 26514 ],
				""msg"": [ 5 ]
			}
		},
		""04e8:689a"": {
			""*"": {
				""t_vendor"": 1256,
				""t_product"": [ 26761 ],
				""msg"": [ 6 ]
			}
		},
		""04e8:f000"": {
			"":sMo=U209"": {
				""t_vendor"": 1256,
				""t_product"": [ 26113 ],
				""msg"": [ 7 ]
			}
		},
		""04fc:2140"": {
			""*"": {
				""t_vendor"": 1276,
				""t_product"": [ 1557, 4672 ],
				""msg"": [ 8 ]
			}
		},
		""057c:62ff"": {
			""*"": {
				""t_vendor"": 1404,
				""t_product"": [ 34049, 34050, 34306 ],
				""msg"": [ 9 ]
			}
		},
		""057c:84ff"": {
			""*"": {
				""t_vendor"": 1404,
				""t_product"": [ 33793 ],
				""msg"": [ 9 ]
			}
		},
		""0586:2030"": {
			""*"": {
				""t_vendor"": 1414,
				""t_product"": [ 13379, 13380 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""05c6:0010"": {
			""*"": {
				""t_vendor"": 1478,
				""t_product"": [ 160 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""05c6:1000"": {
			"":uMa=AnyDATA"": {
				""t_vendor"": 5845,
				""t_product"": [ 25858 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			},
			"":uMa=CELOT"": {
				""t_vendor"": 8479,
				""t_product"": [ 26625, 26626 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			},
			"":uMa=Co.,Ltd"": {
				""t_vendor"": 7433,
				""t_product"": [ 17158 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			},
			"":uMa=DGT"": {
				""t_vendor"": 8479,
				""t_product"": [ 26626 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			},
			"":uMa=Qualcomm"": {
				""t_vendor"": 6645,
				""t_product"": [ 39177 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			},
			"":uMa=SAMSUNG"": {
				""t_vendor"": 1256,
				""t_product"": [ 26113 ],
				""msg"": [ 7 ]
			},
			"":uMa=SSE"": {
				""t_vendor"": 1478,
				""t_product"": [ 24576 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			},
			"":uMa=StrongRising"": {
				""t_vendor"": 650,
				""t_product"": [ 4102 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			},
			"":uMa=Vertex"": {
				""t_vendor"": 8167,
				""t_product"": [ 256 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""05c6:2000"": {
			""*"": {
				""t_vendor"": 1478,
				""t_product"": [ 21, 22, 24, 52759 ],
				""msg"": [ 10 ],
				""response"": true,
				""check"": true
			}
		},
		""05c6:2001"": {
			""*"": {
				""t_vendor"": 7694,
				""t_product"": [ 52758, 52759, 52990 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""05c6:6503"": {
			""*"": {
				""t_vendor"": 5845,
				""t_product"": [ 25858 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""05c6:9024"": {
			""*"": {
				""t_vendor"": 1478,
				""t_product"": [ 36901 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""05c6:98ff"": {
			""*"": {
				""t_vendor"": 1478,
				""t_product"": [ 24577 ],
				""mode"": ""Sierra"",
				""msg"": [  ]
			}
		},
		""05c6:f000"": {
			""*"": {
				""t_vendor"": 1478,
				""t_product"": [ 22, 24576, 36864 ],
				""mode"": ""StandardEject"",
				""msg"": [ 11 ]
			}
		},
		""05c7:1000"": {
			""*"": {
				""t_vendor"": 1479,
				""t_product"": [ 24576 ],
				""msg"": [ 12 ]
			}
		},
		""0685:2000"": {
			""*"": {
				""t_vendor"": 7326,
				""t_product"": [ 38403 ],
				""msg"": [ 10 ],
				""response"": true
			}
		},
		""072f:100d"": {
			""*"": {
				""t_vendor"": 1839,
				""t_product"": [ 37068 ],
				""msg_endpoint"": 2,
				""msg"": [ 13 ]
			}
		},
		""07d1:a800"": {
			""*"": {
				""t_vendor"": 2001,
				""t_product"": [ 15873, 15874, 32268 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""07d1:a804"": {
			""*"": {
				""t_vendor"": 2001,
				""t_product"": [ 32273 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""07d1:f000"": {
			""*"": {
				""t_vendor"": 2001,
				""t_product"": [ 32263 ],
				""msg"": [ 14 ]
			}
		},
		""0846:0fff"": {
			""*"": {
				""t_vendor"": 2118,
				""t_product"": [ 26835 ],
				""mode"": ""Sierra"",
				""msg"": [  ]
			}
		},
		""0922:1001"": {
			""*"": {
				""t_vendor"": 2338,
				""t_product"": [ 4098 ],
				""msg_endpoint"": 1,
				""msg"": [ 15 ],
				""response_endpoint"": 1
			}
		},
		""0922:1003"": {
			""*"": {
				""t_vendor"": 2338,
				""t_product"": [ 4100 ],
				""msg_endpoint"": 1,
				""msg"": [ 15 ],
				""response_endpoint"": 1
			}
		},
		""0922:1007"": {
			""*"": {
				""t_vendor"": 2338,
				""t_product"": [ 4104 ],
				""msg_endpoint"": 1,
				""msg"": [ 15 ],
				""response_endpoint"": 1
			}
		},
		""0930:0d46"": {
			""*"": {
				""t_vendor"": 2352,
				""t_product"": [ 3397 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""0ace:2011"": {
			""*"": {
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""0ace:20ff"": {
			""*"": {
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""0af0:4007"": {
			""*"": {
				""t_vendor"": 2800,
				""t_product"": [ 16389 ],
				""mode"": ""Sierra"",
				""msg"": [  ]
			}
		},
		""0b3c:c700"": {
			""*"": {
				""t_vendor"": 2876,
				""t_product"": [ 49152, 49153, 49154 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""0b3c:f000"": {
			""*"": {
				""t_vendor"": 2876,
				""t_product"": [ 49155, 49156 ],
				""msg"": [ 16 ],
				""response"": true
			}
		},
		""0b3c:f00c"": {
			""*"": {
				""t_vendor"": 2876,
				""t_product"": [ 49162 ],
				""msg"": [ 17 ]
			}
		},
		""0b3c:f017"": {
			""*"": {
				""t_vendor"": 2876,
				""t_product"": [ 49163 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""0bda:1a2b"": {
			""*"": {
				""t_vendor"": 8193,
				""t_product"": [ 13085 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""0bdb:190d"": {
			""*"": {
				""msg"": [  ],
				""config"": 2
			}
		},
		""0bdb:1910"": {
			""*"": {
				""msg"": [  ],
				""config"": 2
			}
		},
		""0cf3:20ff"": {
			""*"": {
				""t_vendor"": 3315,
				""t_product"": [ 28688 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""0d46:45a1"": {
			""*"": {
				""t_vendor"": 3398,
				""t_product"": [ 17833 ],
				""mode"": ""Kobil"",
				""msg"": [  ]
			}
		},
		""0d46:45a5"": {
			""*"": {
				""t_vendor"": 3398,
				""t_product"": [ 17837 ],
				""mode"": ""Kobil"",
				""msg"": [  ]
			}
		},
		""0df7:0800"": {
			""*"": {
				""t_class"": 255,
				""mode"": ""MobileAction"",
				""msg"": [  ]
			}
		},
		""0e8d:0002"": {
			"":uPr=MT"": {
				""t_vendor"": 3725,
				""t_product"": [ 161, 162, 165 ],
				""msg"": [ 18 ]
			},
			"":uPr=Product"": {
				""t_vendor"": 3725,
				""t_product"": [ 161, 162, 165 ],
				""msg"": [ 18 ]
			}
		},
		""0e8d:2870"": {
			""*"": {
				""t_vendor"": 3725,
				""t_product"": [ 30226 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""0e8d:7109"": {
			""*"": {
				""t_vendor"": 3725,
				""t_product"": [ 28949, 28952 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""0fce:d0cf"": {
			""*"": {
				""msg"": [  ],
				""config"": 3
			}
		},
		""0fce:d0df"": {
			""*"": {
				""msg"": [  ],
				""config"": 2
			}
		},
		""0fce:d0e1"": {
			""*"": {
				""t_class"": 2,
				""mode"": ""Sony"",
				""msg"": [  ],
				""config"": 2
			}
		},
		""0fce:d103"": {
			""*"": {
				""t_class"": 2,
				""mode"": ""Sony"",
				""msg"": [  ],
				""config"": 2
			}
		},
		""0fd1:1000"": {
			""*"": {
				""msg"": [  ],
				""config"": 3
			}
		},
		""1004:1000"": {
			""*"": {
				""t_class"": 255,
				""msg"": [ 19 ]
			}
		},
		""1004:607f"": {
			""*"": {
				""t_vendor"": 4100,
				""t_product"": [ 24576, 24852 ],
				""msg"": [ 20 ],
				""response"": true
			}
		},
		""1004:610c"": {
			""*"": {
				""t_vendor"": 4100,
				""t_product"": [ 24841 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""1004:613a"": {
			""*"": {
				""t_vendor"": 4100,
				""t_product"": [ 24868 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""1004:613f"": {
			""*"": {
				""t_vendor"": 4100,
				""t_product"": [ 24897 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""1004:614e"": {
			""*"": {
				""t_vendor"": 4100,
				""t_product"": [ 24885 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""1004:6156"": {
			""*"": {
				""t_vendor"": 4100,
				""t_product"": [ 24919 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""1004:6190"": {
			""*"": {
				""t_vendor"": 4100,
				""t_product"": [ 24963, 24999 ],
				""mode"": ""StandardEject"",
				""msg"": [  ],
				""wait"": 10
			}
		},
		""1004:61dd"": {
			""*"": {
				""t_vendor"": 4100,
				""t_product"": [ 24975 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""1004:61e7"": {
			""*"": {
				""t_vendor"": 4100,
				""t_product"": [ 25062 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""1004:61eb"": {
			""*"": {
				""t_vendor"": 4100,
				""t_product"": [ 25066 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""1004:6327"": {
			""*"": {
				""t_vendor"": 4100,
				""t_product"": [ 25382 ],
				""msg"": [ 21 ]
			}
		},
		""106c:3b03"": {
			""*"": {
				""t_vendor"": 4204,
				""t_product"": [ 14101 ],
				""msg"": [ 22 ]
			}
		},
		""106c:3b05"": {
			""*"": {
				""t_vendor"": 4204,
				""t_product"": [ 14102 ],
				""msg"": [ 23 ]
			}
		},
		""106c:3b06"": {
			""*"": {
				""t_vendor"": 4204,
				""t_product"": [ 14103 ],
				""msg"": [ 24 ]
			}
		},
		""106c:3b11"": {
			""*"": {
				""t_vendor"": 4204,
				""t_product"": [ 14104 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""106c:3b14"": {
			""*"": {
				""t_vendor"": 4204,
				""t_product"": [ 14113 ],
				""msg"": [ 22 ]
			}
		},
		""1076:7f40"": {
			""*"": {
				""t_vendor"": 4214,
				""t_product"": [ 32512 ],
				""mode"": ""GCT"",
				""msg"": [  ]
			}
		},
		""109b:f009"": {
			""*"": {
				""t_vendor"": 4251,
				""t_product"": [ 37140 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""1199:0fff"": {
			""*"": {
				""t_vendor"": 4505,
				""t_product"": [ 23, 24, 25, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 274, 288, 536, 544, 548, 769, 26626, 26627, 26628, 26629, 26632, 26633, 26642, 26643, 26645, 26646, 26656, 26657, 26658, 26674, 26675, 26676, 26677, 26680, 26681, 26682, 26683, 26684, 26685, 26686, 26704, 26705, 26706, 26707, 26709, 26710, 26713, 26714, 26752, 26768, 26769, 26770, 26771, 26786, 26787, 26794 ],
				""mode"": ""Sierra"",
				""msg"": [  ]
			}
		},
		""1199:9011"": {
			""*"": {
				""msg"": [  ],
				""config"": 1
			}
		},
		""1199:9013"": {
			""*"": {
				""msg"": [  ],
				""config"": 1
			}
		},
		""1199:9017"": {
			""*"": {
				""msg"": [  ],
				""config"": 1
			}
		},
		""1199:901b"": {
			""*"": {
				""msg"": [  ],
				""config"": 1
			}
		},
		""1199:901c"": {
			""*"": {
				""msg"": [  ],
				""config"": 1
			}
		},
		""1199:901f"": {
			""*"": {
				""msg"": [  ],
				""config"": 1
			}
		},
		""1199:9041"": {
			""*"": {
				""msg"": [  ],
				""config"": 1
			}
		},
		""1199:9051"": {
			""*"": {
				""msg"": [  ],
				""config"": 1
			}
		},
		""1199:9053"": {
			""*"": {
				""msg"": [  ],
				""config"": 1
			}
		},
		""1199:9063"": {
			""*"": {
				""msg"": [  ],
				""config"": 1
			}
		},
		""1266:1000"": {
			""*"": {
				""t_vendor"": 4710,
				""t_product"": [ 4098, 4099, 4100, 4101, 4102, 4103, 4104, 4105, 4106, 4107, 4108, 4109, 4110, 4111, 4113, 4114 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""12d1:1001"": {
			""*"": {
				""t_class"": 255,
				""mode"": ""Huawei"",
				""msg"": [  ]
			}
		},
		""12d1:1003"": {
			""*"": {
				""t_class"": 255,
				""mode"": ""Huawei"",
				""msg"": [  ]
			}
		},
		""12d1:1009"": {
			""*"": {
				""t_class"": 255,
				""mode"": ""Huawei"",
				""msg"": [  ]
			}
		},
		""12d1:1010"": {
			""*"": {
				""t_class"": 255,
				""mode"": ""Huawei"",
				""msg"": [  ]
			}
		},
		""12d1:101e"": {
			""*"": {
				""t_class"": 255,
				""msg"": [ 25 ]
			}
		},
		""12d1:1030"": {
			""*"": {
				""t_vendor"": 4817,
				""t_product"": [ 4148 ],
				""msg"": [ 26 ]
			}
		},
		""12d1:1031"": {
			""*"": {
				""t_vendor"": 4817,
				""t_product"": [ 4149 ],
				""msg"": [ 26 ]
			}
		},
		""12d1:1413"": {
			""*"": {
				""t_class"": 255,
				""mode"": ""Huawei"",
				""msg"": [  ]
			}
		},
		""12d1:1414"": {
			""*"": {
				""t_class"": 255,
				""mode"": ""Huawei"",
				""msg"": [  ]
			}
		},
		""12d1:1446"": {
			""*"": {
				""t_vendor"": 4817,
				""t_product"": [ 4097, 5124, 5126, 5131, 5132, 5138, 5143, 5147, 5161, 5170, 5171, 5174, 5292, 5382, 5388, 5393 ],
				""mode"": ""HuaweiNew"",
				""msg"": [  ]
			}
		},
		""12d1:1449"": {
			""*"": {
				""t_vendor"": 4817,
				""t_product"": [ 5188 ],
				""mode"": ""HuaweiNew"",
				""msg"": [  ]
			}
		},
		""12d1:14ad"": {
			""*"": {
				""t_vendor"": 4817,
				""t_product"": [ 5294 ],
				""mode"": ""HuaweiNew"",
				""msg"": [  ]
			}
		},
		""12d1:14b5"": {
			""*"": {
				""t_vendor"": 4817,
				""t_product"": [ 5288, 5290 ],
				""mode"": ""HuaweiNew"",
				""msg"": [  ]
			}
		},
		""12d1:14b7"": {
			""*"": {
				""t_vendor"": 4817,
				""t_product"": [ 5324 ],
				""mode"": ""HuaweiNew"",
				""msg"": [  ]
			}
		},
		""12d1:14ba"": {
			""*"": {
				""t_vendor"": 4817,
				""t_product"": [ 5330 ],
				""mode"": ""HuaweiNew"",
				""msg"": [  ]
			}
		},
		""12d1:14c1"": {
			""*"": {
				""t_vendor"": 4817,
				""t_product"": [ 5318 ],
				""mode"": ""HuaweiNew"",
				""msg"": [  ]
			}
		},
		""12d1:14c3"": {
			""*"": {
				""t_vendor"": 4817,
				""t_product"": [ 5320 ],
				""mode"": ""HuaweiNew"",
				""msg"": [  ]
			}
		},
		""12d1:14c4"": {
			""*"": {
				""t_vendor"": 4817,
				""t_product"": [ 5322 ],
				""mode"": ""HuaweiNew"",
				""msg"": [  ]
			}
		},
		""12d1:14c5"": {
			""*"": {
				""t_vendor"": 4817,
				""t_product"": [ 5323 ],
				""mode"": ""HuaweiNew"",
				""msg"": [  ]
			}
		},
		""12d1:14d1"": {
			""*"": {
				""t_vendor"": 4817,
				""t_product"": [ 5321 ],
				""mode"": ""HuaweiNew"",
				""msg"": [  ]
			}
		},
		""12d1:14fe"": {
			""*"": {
				""t_vendor"": 4817,
				""t_product"": [ 5382, 5391, 5405, 7198 ],
				""mode"": ""HuaweiNew"",
				""msg"": [  ]
			}
		},
		""12d1:1505"": {
			""*"": {
				""t_vendor"": 4817,
				""t_product"": [ 5131, 5132, 5382, 5391, 5386 ],
				""mode"": ""HuaweiNew"",
				""msg"": [  ]
			}
		},
		""12d1:151a"": {
			""*"": {
				""t_vendor"": 4817,
				""t_product"": [ 5403, 5405, 5406 ],
				""mode"": ""HuaweiNew"",
				""msg"": [  ]
			}
		},
		""12d1:1520"": {
			""*"": {
				""t_vendor"": 4817,
				""t_product"": [ 5221 ],
				""mode"": ""HuaweiNew"",
				""msg"": [  ]
			}
		},
		""12d1:1521"": {
			""*"": {
				""t_vendor"": 4817,
				""t_product"": [ 5220 ],
				""mode"": ""HuaweiNew"",
				""msg"": [  ]
			}
		},
		""12d1:1523"": {
			""*"": {
				""t_vendor"": 4817,
				""t_product"": [ 5265 ],
				""mode"": ""HuaweiNew"",
				""msg"": [  ]
			}
		},
		""12d1:1526"": {
			""*"": {
				""t_vendor"": 4817,
				""t_product"": [ 5327 ],
				""mode"": ""HuaweiNew"",
				""msg"": [  ]
			}
		},
		""12d1:1527"": {
			""*"": {
				""t_vendor"": 4817,
				""t_product"": [ 5524 ],
				""mode"": ""HuaweiNew"",
				""msg"": [  ]
			}
		},
		""12d1:1553"": {
			""*"": {
				""t_vendor"": 4817,
				""t_product"": [ 4097 ],
				""mode"": ""HuaweiNew"",
				""msg"": [  ]
			}
		},
		""12d1:1557"": {
			""*"": {
				""t_vendor"": 4817,
				""t_product"": [ 5285 ],
				""mode"": ""HuaweiNew"",
				""msg"": [  ]
			}
		},
		""12d1:155a"": {
			""*"": {
				""t_vendor"": 4817,
				""t_product"": [ 5325 ],
				""mode"": ""HuaweiNew"",
				""msg"": [  ]
			}
		},
		""12d1:155b"": {
			""*"": {
				""t_vendor"": 4817,
				""t_product"": [ 5382 ],
				""mode"": ""HuaweiNew"",
				""msg"": [  ]
			}
		},
		""12d1:156a"": {
			""*"": {
				""t_vendor"": 4817,
				""t_product"": [ 5483, 5484 ],
				""mode"": ""HuaweiNew"",
				""msg"": [  ]
			}
		},
		""12d1:1570"": {
			""*"": {
				""msg"": [  ],
				""config"": 0
			}
		},
		""12d1:1571"": {
			""*"": {
				""msg"": [  ],
				""config"": 0
			}
		},
		""12d1:1572"": {
			""*"": {
				""msg"": [  ],
				""config"": 0
			}
		},
		""12d1:1573"": {
			""*"": {
				""msg"": [  ],
				""config"": 0
			}
		},
		""12d1:157c"": {
			""*"": {
				""t_vendor"": 4817,
				""t_product"": [ 5382 ],
				""mode"": ""HuaweiNew"",
				""msg"": [  ]
			}
		},
		""12d1:157d"": {
			""*"": {
				""t_vendor"": 4817,
				""t_product"": [ 5339, 5340 ],
				""mode"": ""HuaweiNew"",
				""msg"": [  ]
			}
		},
		""12d1:1580"": {
			""*"": {
				""t_vendor"": 4817,
				""t_product"": [ 5509 ],
				""mode"": ""HuaweiNew"",
				""msg"": [  ]
			}
		},
		""12d1:1581"": {
			""*"": {
				""t_vendor"": 4817,
				""t_product"": [ 5511 ],
				""mode"": ""HuaweiNew"",
				""msg"": [  ]
			}
		},
		""12d1:1582"": {
			""*"": {
				""t_vendor"": 4817,
				""t_product"": [ 5512 ],
				""mode"": ""HuaweiNew"",
				""msg"": [  ]
			}
		},
		""12d1:1583"": {
			""*"": {
				""t_vendor"": 4817,
				""t_product"": [ 5513 ],
				""mode"": ""HuaweiNew"",
				""msg"": [  ]
			}
		},
		""12d1:1597"": {
			""*"": {
				""t_vendor"": 4817,
				""t_product"": [ 5528 ],
				""mode"": ""HuaweiNew"",
				""msg"": [  ]
			}
		},
		""12d1:15bb"": {
			""*"": {
				""msg"": [  ],
				""config"": 0
			}
		},
		""12d1:15c0"": {
			""*"": {
				""msg"": [  ],
				""config"": 0
			}
		},
		""12d1:15c1"": {
			""*"": {
				""msg"": [  ],
				""config"": 0
			}
		},
		""12d1:15ca"": {
			""*"": {
				""t_vendor"": 4817,
				""t_product"": [ 5382 ],
				""mode"": ""HuaweiNew"",
				""msg"": [  ]
			}
		},
		""12d1:15cd"": {
			""*"": {
				""t_vendor"": 4817,
				""t_product"": [ 5382 ],
				""mode"": ""HuaweiNew"",
				""msg"": [  ]
			}
		},
		""12d1:15ce"": {
			""*"": {
				""t_vendor"": 4817,
				""t_product"": [ 5553, 5555 ],
				""mode"": ""HuaweiNew"",
				""msg"": [  ]
			}
		},
		""12d1:15cf"": {
			""*"": {
				""t_vendor"": 4817,
				""t_product"": [ 5382 ],
				""mode"": ""HuaweiNew"",
				""msg"": [  ]
			}
		},
		""12d1:15d0"": {
			""*"": {
				""t_vendor"": 4817,
				""t_product"": [ 5585 ],
				""mode"": ""HuaweiNew"",
				""msg"": [  ]
			}
		},
		""12d1:15d2"": {
			""*"": {
				""t_vendor"": 4817,
				""t_product"": [ 5587 ],
				""mode"": ""HuaweiNew"",
				""msg"": [  ]
			}
		},
		""12d1:15e7"": {
			""*"": {
				""t_vendor"": 4817,
				""t_product"": [ 5382 ],
				""mode"": ""HuaweiNew"",
				""msg"": [  ]
			}
		},
		""12d1:15ec"": {
			""*"": {
				""t_vendor"": 4817,
				""t_product"": [ 7206 ],
				""mode"": ""HuaweiNew"",
				""msg"": [  ]
			}
		},
		""12d1:15ee"": {
			""*"": {
				""t_vendor"": 4817,
				""t_product"": [ 7208 ],
				""mode"": ""HuaweiNew"",
				""msg"": [  ]
			}
		},
		""12d1:15f0"": {
			""*"": {
				""msg"": [  ],
				""config"": 0
			}
		},
		""12d1:1805"": {
			""*"": {
				""t_class"": 255,
				""msg"": [ 25 ]
			}
		},
		""12d1:1c0b"": {
			""*"": {
				""t_vendor"": 4817,
				""t_product"": [ 7173, 7174, 7175, 7176, 7184 ],
				""mode"": ""HuaweiNew"",
				""msg"": [  ]
			}
		},
		""12d1:1c1b"": {
			""*"": {
				""t_vendor"": 4817,
				""t_product"": [ 5382 ],
				""mode"": ""HuaweiNew"",
				""msg"": [  ]
			}
		},
		""12d1:1c24"": {
			""*"": {
				""t_vendor"": 4817,
				""t_product"": [ 7186, 7203 ],
				""mode"": ""HuaweiNew"",
				""msg"": [  ]
			}
		},
		""12d1:1c25"": {
			""*"": {
				""msg"": [  ],
				""config"": 0
			}
		},
		""12d1:1d50"": {
			""*"": {
				""msg"": [  ],
				""config"": 2
			}
		},
		""12d1:1da1"": {
			""*"": {
				""t_vendor"": 4817,
				""t_product"": [ 7433 ],
				""mode"": ""Huawei"",
				""msg"": [  ]
			}
		},
		""12d1:1f01"": {
			""*"": {
				""t_vendor"": 4817,
				""t_product"": [ 5339, 5340 ],
				""mode"": ""HuaweiNew"",
				""msg"": [  ]
			}
		},
		""12d1:1f02"": {
			""*"": {
				""t_vendor"": 4817,
				""t_product"": [ 5340 ],
				""mode"": ""HuaweiNew"",
				""msg"": [  ]
			}
		},
		""12d1:1f03"": {
			""*"": {
				""t_vendor"": 4817,
				""t_product"": [ 5339 ],
				""mode"": ""HuaweiNew"",
				""msg"": [  ]
			}
		},
		""12d1:1f04"": {
			""*"": {
				""t_vendor"": 4817,
				""t_product"": [ 5564 ],
				""mode"": ""HuaweiNew"",
				""msg"": [  ]
			}
		},
		""12d1:1f05"": {
			""*"": {
				""t_vendor"": 4817,
				""t_product"": [ 5565 ],
				""mode"": ""HuaweiNew"",
				""msg"": [  ]
			}
		},
		""12d1:1f06"": {
			""*"": {
				""t_vendor"": 4817,
				""t_product"": [ 5575 ],
				""mode"": ""HuaweiNew"",
				""msg"": [  ]
			}
		},
		""12d1:1f07"": {
			""*"": {
				""t_vendor"": 4817,
				""t_product"": [ 5567 ],
				""mode"": ""HuaweiNew"",
				""msg"": [  ]
			}
		},
		""12d1:1f09"": {
			""*"": {
				""t_vendor"": 4817,
				""t_product"": [ 7248 ],
				""mode"": ""HuaweiNew"",
				""msg"": [  ]
			}
		},
		""12d1:1f0a"": {
			""*"": {
				""t_vendor"": 4817,
				""t_product"": [ 7249 ],
				""mode"": ""HuaweiNew"",
				""msg"": [  ]
			}
		},
		""12d1:1f11"": {
			""*"": {
				""t_vendor"": 4817,
				""t_product"": [ 5308 ],
				""mode"": ""HuaweiNew"",
				""msg"": [  ]
			}
		},
		""12d1:1f15"": {
			""*"": {
				""t_vendor"": 4817,
				""t_product"": [ 5120, 5367 ],
				""mode"": ""HuaweiNew"",
				""msg"": [  ]
			}
		},
		""12d1:1f16"": {
			""*"": {
				""mode"": ""MBIM"",
				""msg"": [  ]
			}
		},
		""12d1:1f17"": {
			""*"": {
				""t_vendor"": 4817,
				""t_product"": [ 5494 ],
				""mode"": ""HuaweiNew"",
				""msg"": [  ]
			}
		},
		""12d1:1f18"": {
			""*"": {
				""t_vendor"": 4817,
				""t_product"": [ 5495 ],
				""mode"": ""HuaweiNew"",
				""msg"": [  ]
			}
		},
		""12d1:1f19"": {
			""*"": {
				""t_vendor"": 4817,
				""t_product"": [ 5370, 5493, 5496 ],
				""mode"": ""HuaweiNew"",
				""msg"": [  ]
			}
		},
		""12d1:1f1b"": {
			""*"": {
				""t_vendor"": 4817,
				""t_product"": [ 5497 ],
				""mode"": ""HuaweiNew"",
				""msg"": [  ]
			}
		},
		""12d1:1f1c"": {
			""*"": {
				""t_vendor"": 4817,
				""t_product"": [ 5498, 5520 ],
				""mode"": ""HuaweiNew"",
				""msg"": [  ]
			}
		},
		""12d1:1f1d"": {
			""*"": {
				""t_vendor"": 4817,
				""t_product"": [ 5499, 5521 ],
				""mode"": ""HuaweiNew"",
				""msg"": [  ]
			}
		},
		""12d1:1f1e"": {
			""*"": {
				""t_vendor"": 4817,
				""t_product"": [ 5503, 5522 ],
				""mode"": ""HuaweiNew"",
				""msg"": [  ]
			}
		},
		""12d1:380b"": {
			""*"": {
				""t_class"": 2,
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""1307:1169"": {
			""*"": {
				""t_vendor"": 5041,
				""t_product"": [ 49 ],
				""mode"": ""Cisco"",
				""msg"": [  ]
			}
		},
		""1410:5010"": {
			""*"": {
				""t_vendor"": 5136,
				""t_product"": [ 16640, 17408, 28720 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""1410:5020"": {
			""*"": {
				""t_vendor"": 5136,
				""t_product"": [ 24576, 28673 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""1410:5023"": {
			""*"": {
				""t_vendor"": 5136,
				""t_product"": [ 28720 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""1410:5030"": {
			""*"": {
				""t_vendor"": 5136,
				""t_product"": [ 24576 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""1410:5031"": {
			""*"": {
				""t_vendor"": 5136,
				""t_product"": [ 24578 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""1410:5041"": {
			""*"": {
				""t_vendor"": 5136,
				""t_product"": [ 28673, 28675 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""1410:5055"": {
			""*"": {
				""t_vendor"": 5136,
				""t_product"": [ 24626 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""1410:5059"": {
			""*"": {
				""t_vendor"": 5136,
				""t_product"": [ 28721, 28738 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""1410:7001"": {
			""*"": {
				""t_class"": 255,
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""1410:9020"": {
			""*"": {
				""msg"": [  ],
				""config"": 4
			}
		},
		""1410:9030"": {
			""*"": {
				""msg"": [  ],
				""config"": 3
			}
		},
		""1410:b00c"": {
			""*"": {
				""msg"": [  ],
				""config"": 2
			}
		},
		""148e:a000"": {
			""*"": {
				""t_class"": 2,
				""mode"": ""Sequans"",
				""msg"": [  ]
			}
		},
		""148f:2578"": {
			""*"": {
				""t_vendor"": 5263,
				""t_product"": [ 36897 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""148f:2878"": {
			""*"": {
				""t_vendor"": 5263,
				""t_product"": [ 30209 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""15eb:7153"": {
			""*"": {
				""t_vendor"": 5611,
				""t_product"": [ 29010 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""15eb:a403"": {
			""*"": {
				""t_vendor"": 5611,
				""t_product"": [ 32014 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""1614:0800"": {
			""*"": {
				""t_class"": 255,
				""msg"": [ 27 ]
			}
		},
		""1614:0802"": {
			""*"": {
				""t_class"": 255,
				""msg"": [ 27 ]
			}
		},
		""161c:f010"": {
			""*"": {
				""t_vendor"": 5660,
				""t_product"": [ 61697 ],
				""msg"": [ 28 ]
			}
		},
		""16d5:f000"": {
			""*"": {
				""t_vendor"": 5845,
				""t_product"": [ 26115 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""16d8:6281"": {
			""*"": {
				""t_class"": 255,
				""msg"": [ 29 ]
			}
		},
		""16d8:6803"": {
			""*"": {
				""t_class"": 2,
				""msg"": [ 30 ]
			}
		},
		""16d8:6804"": {
			""*"": {
				""t_class"": 255,
				""msg"": [ 29 ]
			}
		},
		""16d8:700a"": {
			""*"": {
				""t_class"": 255,
				""msg"": [ 31 ]
			}
		},
		""16d8:700b"": {
			""*"": {
				""t_class"": 255,
				""msg"": [ 31 ]
			}
		},
		""16d8:f000"": {
			""*"": {
				""t_vendor"": 5848,
				""t_product"": [ 24582 ],
				""msg"": [ 32 ]
			}
		},
		""1726:1900"": {
			""*"": {
				""t_vendor"": 5926,
				""t_product"": [ 4096 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""1726:f00e"": {
			""*"": {
				""t_vendor"": 5926,
				""t_product"": [ 40960 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""1782:0003"": {
			""*"": {
				""msg"": [  ],
				""config"": 2
			}
		},
		""1782:0023"": {
			""*"": {
				""msg"": [  ],
				""config"": 2
			}
		},
		""198a:0003"": {
			""*"": {
				""t_vendor"": 6538,
				""t_product"": [ 2 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""198f:bccd"": {
			""*"": {
				""t_vendor"": 6543,
				""t_product"": [ 544 ],
				""msg"": [ 4 ]
			}
		},
		""19d2:0003"": {
			""*"": {
				""t_class"": 255,
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""19d2:0026"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 115, 148, 338 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""19d2:0033"": {
			""*"": {
				""t_class"": 255,
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""19d2:0040"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 34 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""19d2:0053"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 49 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""19d2:0083"": {
			"":uPr=WCDMA"": {
				""t_vendor"": 6610,
				""t_product"": [ 292 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""19d2:0090"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 52 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""19d2:0101"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 260 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""19d2:0103"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 49 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""19d2:0110"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 289 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""19d2:0115"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 278 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""19d2:0120"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 121 ],
				""detach_storage"": false,
				""mode"": ""StandardEject"",
				""msg"": [  ],
				""response"": false,
				""interface"": 0
			}
		},
		""19d2:0146"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 322, 323 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""19d2:0149"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 292 ],
				""mode"": ""StandardEject"",
				""msg"": [ 33 ]
			}
		},
		""19d2:0150"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 292 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""19d2:0154"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 23, 279, 8195 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""19d2:0166"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 359 ],
				""msg"": [ 34 ]
			}
		},
		""19d2:0169"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 368 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""19d2:0198"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 409 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""19d2:0266"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 613 ],
				""mode"": ""StandardEject"",
				""msg"": [ 35 ]
			}
		},
		""19d2:0304"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 841 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""19d2:0318"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 791, 816 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""19d2:0325"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 806 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""19d2:0388"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 1095 ],
				""msg"": [ 34 ]
			}
		},
		""19d2:0413"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 1042 ],
				""msg"": [ 35 ]
			}
		},
		""19d2:1001"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 4098, 4099 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""19d2:1007"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 4104 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""19d2:1009"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 4112 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""19d2:1013"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 4117 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""19d2:1017"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 4120 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""19d2:1019"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 4129 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""19d2:1020"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 4129 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""19d2:1022"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 4131, 4132 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""19d2:1026"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 4135, 4136, 4137 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""19d2:1030"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 4145, 4146 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""19d2:1034"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 4149, 4150, 4151 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""19d2:1038"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 4153, 4160 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""19d2:1042"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 4163 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""19d2:1046"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 4167 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""19d2:1171"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 4467 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""19d2:1175"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 4471 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""19d2:1179"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 4481 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""19d2:1201"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 4611 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""19d2:1207"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 4616 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""19d2:1210"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 4625 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""19d2:1216"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 4631 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""19d2:1219"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 4640, 4642 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""19d2:1224"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 130 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""19d2:1225"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 5125 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""19d2:1227"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 4690 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""19d2:1232"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 4712, 8195 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""19d2:1233"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 4720 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""19d2:1237"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 23 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""19d2:1238"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 23 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""19d2:1420"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 5125 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""19d2:1421"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 5160 ],
				""msg"": [ 36 ]
			}
		},
		""19d2:1511"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 5394 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""19d2:1514"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 5397 ],
				""msg"": [ 37 ]
			}
		},
		""19d2:1517"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 5401 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""19d2:1520"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 322 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""19d2:1523"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 5413 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""19d2:1528"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 5415 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""19d2:1536"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 5431, 5432 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""19d2:1542"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 5444 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""19d2:1580"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 5506 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""19d2:1588"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 5513, 5521, 5522 ],
				""mode"": ""StandardEject"",
				""msg"": [ 33 ]
			}
		},
		""19d2:1595"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 5428, 5522, 5526, 5632 ],
				""mode"": ""StandardEject"",
				""msg"": [ 33 ]
			}
		},
		""19d2:2000"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 1, 2, 21, 22, 23, 25, 36, 49, 51, 55, 66, 82, 85, 97, 99, 100, 102, 145, 264, 279, 296, 337, 343, 375, 5122, 8194, 8195 ],
				""mode"": ""StandardEject"",
				""msg"": [ 33 ]
			}
		},
		""19d2:2004"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 5122 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""19d2:bccd"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 370 ],
				""msg"": [ 38 ]
			}
		},
		""19d2:ffde"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 65501 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""19d2:ffe6"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 65509 ],
				""msg"": [ 39 ]
			}
		},
		""19d2:fff5"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 65508, 65513, 65521, 65534, 65535 ],
				""msg"": [ 40 ]
			}
		},
		""19d2:fff6"": {
			""*"": {
				""t_vendor"": 6610,
				""t_product"": [ 65521 ],
				""msg"": [ 40 ]
			}
		},
		""1a8d:1000"": {
			""*"": {
				""t_vendor"": 6797,
				""t_product"": [ 4098, 4103, 4105, 4109, 8198 ],
				""mode"": ""StandardEject"",
				""msg"": [  ],
				""release_delay"": 4000,
				""response"": true
			}
		},
		""1a8d:2000"": {
			""*"": {
				""t_vendor"": 6797,
				""t_product"": [ 8198 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""1ab7:5700"": {
			""*"": {
				""t_vendor"": 6839,
				""t_product"": [ 8192, 22321 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""1b7d:0700"": {
			""*"": {
				""t_vendor"": 7037,
				""t_product"": [ 1 ],
				""msg"": [ 41 ]
			}
		},
		""1bbb:000f"": {
			""*"": {
				""t_vendor"": 7099,
				""t_product"": [ 15 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""1bbb:00ca"": {
			""*"": {
				""t_class"": 255,
				""msg"": [ 17 ]
			}
		},
		""1bbb:011f"": {
			""*"": {
				""t_vendor"": 7099,
				""t_product"": [ 262 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""1bbb:022c"": {
			""*"": {
				""msg"": [  ],
				""config"": 2
			}
		},
		""1bbb:025e"": {
			""*"": {
				""t_vendor"": 7099,
				""t_product"": [ 405 ],
				""msg"": [ 17 ]
			}
		},
		""1bbb:f000"": {
			""*"": {
				""t_vendor"": 7099,
				""t_product"": [ 0, 23, 183, 286, 401, 405 ],
				""msg"": [ 17 ]
			}
		},
		""1bbb:f017"": {
			""*"": {
				""t_vendor"": 7099,
				""t_product"": [ 23, 286, 515 ],
				""msg"": [ 17 ]
			}
		},
		""1bbb:f052"": {
			""*"": {
				""t_vendor"": 7099,
				""t_product"": [ 82 ],
				""msg"": [ 17 ]
			}
		},
		""1c9e:1001"": {
			""*"": {
				""t_vendor"": 7326,
				""t_product"": [ 24672, 24673 ],
				""msg"": [ 42 ]
			}
		},
		""1c9e:3003"": {
			""*"": {
				""msg"": [  ],
				""config"": 2
			}
		},
		""1c9e:6000"": {
			""*"": {
				""t_class"": 255,
				""msg"": [ 27 ]
			}
		},
		""1c9e:6061"": {
			"":uPr=Storage"": {
				""t_class"": 255,
				""msg"": [ 42 ]
			}
		},
		""1c9e:9101"": {
			""*"": {
				""t_vendor"": 7326,
				""t_product"": [ 37124 ],
				""msg"": [ 42 ]
			}
		},
		""1c9e:9200"": {
			""*"": {
				""t_vendor"": 7326,
				""t_product"": [ 37378 ],
				""msg"": [ 42 ]
			}
		},
		""1c9e:9401"": {
			""*"": {
				""t_vendor"": 7326,
				""t_product"": [ 37892 ],
				""msg"": [ 42 ]
			}
		},
		""1c9e:9800"": {
			""*"": {
				""t_class"": 255,
				""msg"": [ 17 ]
			}
		},
		""1c9e:98ff"": {
			""*"": {
				""t_vendor"": 7326,
				""t_product"": [ 26625, 38913, 38915 ],
				""msg"": [ 43 ]
			}
		},
		""1c9e:9bfe"": {
			""*"": {
				""t_vendor"": 7326,
				""t_product"": [ 39681 ],
				""msg"": [ 42 ]
			}
		},
		""1c9e:9d00"": {
			""*"": {
				""t_class"": 255,
				""msg"": [ 42 ]
			}
		},
		""1c9e:9e00"": {
			""*"": {
				""t_class"": 255,
				""msg"": [ 42 ]
			}
		},
		""1c9e:9e08"": {
			""*"": {
				""t_vendor"": 7326,
				""t_product"": [ 40472 ],
				""mode"": ""Sierra"",
				""msg"": [  ]
			}
		},
		""1c9e:f000"": {
			""*"": {
				""t_vendor"": 7326,
				""t_product"": [ 36864, 38403, 38405, 38407, 39168 ],
				""msg"": [ 44 ],
				""wait"": 1
			},
			"":uMa=USB_Modem"": {
				""t_vendor"": 7326,
				""t_product"": [ 36864, 38403, 38405, 38407, 39168, 39424 ],
				""msg"": [ 17 ],
				""wait"": 1
			}
		},
		""1c9e:f010"": {
			""*"": {
				""t_vendor"": 7326,
				""t_product"": [ 61697 ],
				""msg"": [ 42 ]
			}
		},
		""1c9e:f030"": {
			""*"": {
				""t_vendor"": 7326,
				""t_product"": [ 61697 ],
				""msg"": [ 42 ]
			}
		},
		""1d09:1000"": {
			""*"": {
				""t_vendor"": 7433,
				""t_product"": [ 4112 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""1d09:1021"": {
			""*"": {
				""t_vendor"": 7433,
				""t_product"": [ 4112 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""1d09:1025"": {
			""*"": {
				""t_vendor"": 7433,
				""t_product"": [ 4134 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""1da5:f000"": {
			""*"": {
				""t_vendor"": 7589,
				""t_product"": [ 17682 ],
				""mode"": ""Qisda"",
				""msg"": [  ]
			}
		},
		""1dbc:0669"": {
			""*"": {
				""msg"": [  ],
				""config"": 2
			}
		},
		""1dd6:1000"": {
			""*"": {
				""t_vendor"": 7638,
				""t_product"": [ 4098 ],
				""msg"": [ 45 ],
				""response"": true
			}
		},
		""1de1:1101"": {
			""*"": {
				""t_vendor"": 8679,
				""t_product"": [ 14 ],
				""msg"": [ 46 ]
			}
		},
		""1e0e:f000"": {
			""*"": {
				""t_vendor"": 7694,
				""t_product"": [ 36864, 37120, 37376 ],
				""msg"": [ 14 ],
				""response"": true
			}
		},
		""1e89:f000"": {
			""*"": {
				""t_vendor"": 7817,
				""t_product"": [ 6688 ],
				""msg"": [ 47 ]
			}
		},
		""1edf:6003"": {
			""*"": {
				""msg"": [  ],
				""config"": 2
			}
		},
		""1ee8:0003"": {
			""*"": {
				""t_vendor"": 7912,
				""t_product"": [ 4 ],
				""msg"": [ 48 ],
				""response"": true
			}
		},
		""1ee8:0007"": {
			""*"": {
				""t_vendor"": 7912,
				""t_product"": [ 11 ],
				""msg"": [ 48 ]
			}
		},
		""1ee8:0009"": {
			""*"": {
				""t_vendor"": 7912,
				""t_product"": [ 11 ],
				""msg"": [ 48 ],
				""response"": true
			}
		},
		""1ee8:0013"": {
			""*"": {
				""t_vendor"": 7912,
				""t_product"": [ 17, 18, 20 ],
				""msg"": [ 48 ],
				""response"": true
			}
		},
		""1ee8:0018"": {
			""*"": {
				""t_vendor"": 7912,
				""t_product"": [ 23 ],
				""msg"": [ 48 ],
				""response"": true
			}
		},
		""1ee8:0040"": {
			""*"": {
				""t_vendor"": 7912,
				""t_product"": [ 62, 63 ],
				""msg"": [ 48 ],
				""response"": true
			}
		},
		""1ee8:0045"": {
			""*"": {
				""t_vendor"": 7912,
				""t_product"": [ 68 ],
				""msg"": [ 48 ],
				""response"": true
			}
		},
		""1ee8:0048"": {
			""*"": {
				""t_vendor"": 7912,
				""t_product"": [ 73 ],
				""msg"": [ 48 ]
			}
		},
		""1ee8:004a"": {
			""*"": {
				""t_vendor"": 7912,
				""t_product"": [ 73 ],
				""msg"": [ 48 ]
			}
		},
		""1ee8:004f"": {
			""*"": {
				""t_vendor"": 7912,
				""t_product"": [ 78 ],
				""msg"": [ 48 ],
				""response"": true
			}
		},
		""1ee8:0054"": {
			""*"": {
				""t_vendor"": 7912,
				""t_product"": [ 83 ],
				""msg"": [ 48 ],
				""response"": true
			}
		},
		""1ee8:0060"": {
			""*"": {
				""t_vendor"": 7912,
				""t_product"": [ 95 ],
				""msg"": [ 49 ]
			}
		},
		""1ee8:0063"": {
			""*"": {
				""t_vendor"": 7912,
				""t_product"": [ 100, 101 ],
				""msg"": [ 49 ]
			}
		},
		""1ee8:0068"": {
			""*"": {
				""t_vendor"": 7912,
				""t_product"": [ 105 ],
				""msg"": [ 49 ]
			}
		},
		""1f28:0021"": {
			""*"": {
				""t_vendor"": 7976,
				""t_product"": [ 32 ],
				""msg"": [ 50 ]
			}
		},
		""1fac:0032"": {
			""*"": {
				""msg"": [  ],
				""config"": 2
			}
		},
		""1fac:0130"": {
			""*"": {
				""t_vendor"": 8108,
				""t_product"": [ 305 ],
				""msg"": [ 50 ]
			}
		},
		""1fac:0150"": {
			""*"": {
				""t_vendor"": 8108,
				""t_product"": [ 337 ],
				""msg"": [ 50 ]
			}
		},
		""1fac:0151"": {
			""*"": {
				""msg"": [  ],
				""config"": 2
			}
		},
		""2001:00a6"": {
			""*"": {
				""t_vendor"": 8193,
				""t_product"": [ 32002 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""2001:00a7"": {
			""*"": {
				""t_vendor"": 8193,
				""t_product"": [ 32014 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""2001:7600"": {
			""*"": {
				""msg"": [  ],
				""config"": 2
			}
		},
		""2001:98ff"": {
			""*"": {
				""t_vendor"": 8193,
				""t_product"": [ 32278 ],
				""msg"": [ 51 ],
				""response"": true
			}
		},
		""2001:a401"": {
			""*"": {
				""t_vendor"": 8193,
				""t_product"": [ 32281 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""2001:a403"": {
			""*"": {
				""t_vendor"": 8193,
				""t_product"": [ 32011, 32012 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""2001:a405"": {
			""*"": {
				""t_vendor"": 8193,
				""t_product"": [ 32013 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""2001:a406"": {
			""*"": {
				""t_vendor"": 8193,
				""t_product"": [ 32281 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""2001:a407"": {
			""*"": {
				""t_vendor"": 8193,
				""t_product"": [ 32014 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""2001:a40a"": {
			""*"": {
				""t_vendor"": 8193,
				""t_product"": [ 32016 ],
				""msg"": [ 52 ]
			}
		},
		""2001:a40d"": {
			""*"": {
				""t_vendor"": 8193,
				""t_product"": [ 32312 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""2001:a706"": {
			""*"": {
				""t_vendor"": 8193,
				""t_product"": [ 32001 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""2001:a707"": {
			""*"": {
				""t_vendor"": 8193,
				""t_product"": [ 32002 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""2001:a708"": {
			""*"": {
				""t_vendor"": 8193,
				""t_product"": [ 32003 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""2001:a805"": {
			""*"": {
				""t_vendor"": 8193,
				""t_product"": [ 32274 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""2001:a809"": {
			""*"": {
				""t_vendor"": 8193,
				""t_product"": [ 30976 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""2001:a80b"": {
			""*"": {
				""t_vendor"": 8193,
				""t_product"": [ 32000 ],
				""msg"": [ 52 ],
				""response"": true
			}
		},
		""2001:ab00"": {
			""*"": {
				""t_vendor"": 8193,
				""t_product"": [ 32309 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""2001:ac01"": {
			""*"": {
				""t_vendor"": 8193,
				""t_product"": [ 32317 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""2015:0001"": {
			""*"": {
				""t_class"": 255,
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""201e:1023"": {
			""*"": {
				""t_vendor"": 8222,
				""t_product"": [ 4130 ],
				""msg"": [ 53, 54 ],
				""response"": true
			}
		},
		""201e:2009"": {
			""*"": {
				""t_class"": 255,
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""2020:0002"": {
			""*"": {
				""t_vendor"": 8224,
				""t_product"": [ 8192, 16384, 16400 ],
				""msg"": [ 55 ]
			}
		},
		""2020:2030"": {
			""*"": {
				""t_vendor"": 8224,
				""t_product"": [ 8241, 8243 ],
				""mode"": ""StandardEject"",
				""msg"": [  ],
				""wait"": 2
			}
		},
		""2020:f00e"": {
			""*"": {
				""t_vendor"": 8224,
				""t_product"": [ 4101, 4104 ],
				""mode"": ""StandardEject"",
				""msg"": [  ],
				""wait"": 2
			}
		},
		""2020:f00f"": {
			""*"": {
				""t_vendor"": 8224,
				""t_product"": [ 4101 ],
				""mode"": ""StandardEject"",
				""msg"": [  ],
				""wait"": 2
			}
		},
		""2077:1000"": {
			""*"": {
				""t_vendor"": 8311,
				""t_product"": [ 28673, 28688, 28689 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""2077:f000"": {
			""*"": {
				""t_vendor"": 8311,
				""t_product"": [ 36864, 36962, 40960, 40963 ],
				""mode"": ""StandardEject"",
				""msg"": [ 56 ]
			}
		},
		""20a6:f00a"": {
			""*"": {
				""t_vendor"": 8358,
				""t_product"": [ 4096 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""20a6:f00e"": {
			""*"": {
				""t_vendor"": 8358,
				""t_product"": [ 4357 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""20b9:1682"": {
			""*"": {
				""t_class"": 255,
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""21f5:1000"": {
			""*"": {
				""t_vendor"": 8693,
				""t_product"": [ 8200 ],
				""msg"": [ 57 ]
			}
		},
		""21f5:3010"": {
			""*"": {
				""t_vendor"": 8693,
				""t_product"": [ 4353 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""2262:0001"": {
			""*"": {
				""t_vendor"": 8802,
				""t_product"": [ 2 ],
				""msg"": [ 58 ]
			}
		},
		""22de:6801"": {
			""*"": {
				""t_class"": 255,
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""22de:6802"": {
			""*"": {
				""t_class"": 255,
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""22de:6803"": {
			""*"": {
				""t_class"": 255,
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""22f4:0021"": {
			""*"": {
				""t_class"": 255,
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""230d:0001"": {
			""*"": {
				""msg"": [  ],
				""config"": 3
			}
		},
		""230d:0003"": {
			""*"": {
				""msg"": [  ],
				""config"": 3
			}
		},
		""230d:0007"": {
			""*"": {
				""msg"": [  ],
				""config"": 3
			}
		},
		""230d:000b"": {
			""*"": {
				""msg"": [  ],
				""config"": 3
			}
		},
		""230d:000c"": {
			""*"": {
				""msg"": [  ],
				""config"": 3
			}
		},
		""230d:000d"": {
			""*"": {
				""msg"": [  ],
				""config"": 3
			}
		},
		""230d:0101"": {
			""*"": {
				""msg"": [  ],
				""config"": 2
			}
		},
		""230d:0103"": {
			""*"": {
				""msg"": [  ],
				""config"": 2
			}
		},
		""2357:0200"": {
			""*"": {
				""t_vendor"": 9047,
				""t_product"": [ 513 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""2357:0600"": {
			""*"": {
				""t_vendor"": 9047,
				""t_product"": [ 1537 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""2357:f000"": {
			""*"": {
				""t_vendor"": 9047,
				""t_product"": [ 36864 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""23a2:1010"": {
			""*"": {
				""t_vendor"": 9122,
				""t_product"": [ 4660 ],
				""msg"": [ 59 ]
			}
		},
		""257a:a000"": {
			""*"": {
				""t_vendor"": 9594,
				""t_product"": [ 5633, 5663, 5679, 9759, 9775, 13855, 13871 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""257a:b000"": {
			""*"": {
				""t_vendor"": 9594,
				""t_product"": [ 5633, 5663, 5679, 9759, 9775, 13855, 13871 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""257a:c000"": {
			""*"": {
				""t_vendor"": 9594,
				""t_product"": [ 5633, 5663, 5679, 9759, 9775, 13855, 13871 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""257a:d000"": {
			""*"": {
				""t_vendor"": 9594,
				""t_product"": [ 5633, 5663, 5679, 9759, 9775, 13855, 13871 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		},
		""2fd4:9aff"": {
			""*"": {
				""t_vendor"": 12244,
				""t_product"": [ 30389 ],
				""msg"": [ 28 ]
			}
		},
		""413c:81a2"": {
			""*"": {
				""msg"": [  ],
				""config"": 0
			}
		},
		""413c:81a3"": {
			""*"": {
				""msg"": [  ],
				""config"": 0
			}
		},
		""413c:81a4"": {
			""*"": {
				""msg"": [  ],
				""config"": 0
			}
		},
		""413c:81a8"": {
			""*"": {
				""msg"": [  ],
				""config"": 0
			}
		},
		""413c:81b1"": {
			""*"": {
				""msg"": [  ],
				""config"": 0
			}
		},
		""413c:81b3"": {
			""*"": {
				""msg"": [  ],
				""config"": 0
			}
		},
		""413c:81e0"": {
			""*"": {
				""msg"": [  ],
				""config"": 0
			}
		},
		""6000:1000"": {
			""*"": {
				""t_vendor"": 1478,
				""t_product"": [ 24576 ],
				""msg"": [ 57 ]
			}
		},
		""8888:6500"": {
			""*"": {
				""t_vendor"": 5848,
				""t_product"": [ 25907 ],
				""msg"": [ 60 ]
			}
		},
		""ed09:1021"": {
			""*"": {
				""t_vendor"": 60681,
				""t_product"": [ 4112 ],
				""mode"": ""StandardEject"",
				""msg"": [  ]
			}
		}
	}
}
"
5VGLUpSV,Algoverse_adesh_20,kucheasysa,Python,Tuesday 18th of June 2024 10:32:18 AM CDT,"class Solution:
    def rotate(self, matrix) :
        """"""
        Do not return anything, modify matrix in-place instead.
        # """"""
        for i in range(len(matrix)//2):
            matrix[i] , matrix[-i-1] = matrix[-i-1], matrix[i]

        for i in range(len(matrix)):
            for j in range(i):
                matrix[i][j] ,matrix[j][i] = matrix[j][i], matrix[i][j]"
gLm2DaJ3,gay,drak138,JavaScript,Tuesday 18th of June 2024 10:22:07 AM CDT,"function validate() {

    const usernameRef=document.getElementById(""username"")
    const emailRef=document.getElementById(""email"")
    const passwordRef=document.getElementById(""password"")
    const confirmPasswordRef=document.getElementById(""confirm-password"")
    const companyRef=document.getElementById(""company"")
    const companyInfo=document.getElementById(""companyInfo"")
    const companyNumberRef=document.getElementById(""companyNumber"")
    const submitBtn=document.getElementById(""submit"")
    const validRef=document.getElementById(""valid"")

    submitBtn.setAttribute(""type"",""button"")

    let correctInput=true

    companyRef.addEventListener(""change"",radio)


    submitBtn.addEventListener(""click"",submit)

    function radio(){
        if(companyRef.checked){
            companyInfo.style.display=""block""
        }
        else{
            companyInfo.style.display=""none""
        }
    }

    function submit(){
        const userNameRegEx=/^[a-zA-Z0-9]{3,20}$/g
        const passwordRegEx=/^\w{5,15}$/g
        const emailRegEx=/^[^@.]+\@[^@]*.[^@]*$/g

        //check default

        if(!userNameRegEx.test(usernameRef.value)){
            usernameRef.style.borderColor=""red""
            correctInput=false
        }
        else{
            usernameRef.style.border=""none""
        }
        if(!passwordRegEx.test(passwordRef.value)){
            passwordRef.style.borderColor=""red""
            correctInput=false
        }
        else{
            passwordRef.style.border=""none""
        }

        if(!emailRegEx.test(emailRef.value)){
            emailRef.style.borderColor=""red""
            correctInput=false
        }
        else{
            emailRef.style.border=""none""
        }
        if(passwordRef.value!==confirmPasswordRef.value||passwordRef.value.length<5||confirmPasswordRef.value<5){
            confirmPasswordRef.style.borderColor=""red""
            correctInput=false
        }
        else{
            passwordRef.style.border=""none""
            confirmPasswordRef.style.border=""none""
        }
        //check Company
        if(companyRef.checked){
            if(Number(companyNumberRef.value)>=1000&&Number(companyNumberRef.value)<=9999){
                companyNumberRef.style.border=""none""
            }
            else{
                companyNumberRef.style.borderColor=""red"" 
                correctInput=false
            }
        }

        if(correctInput===true){
            validRef.style.display=""block""
        }
        else{
            validRef.style.display=""none""
        }
        correctInput=true
    }
}"
Lm5qcyHU,dkjson.lua,crococrystal,Lua,Tuesday 18th of June 2024 10:03:23 AM CDT,"-- Module options:
local always_try_using_lpeg = true
local register_global_module_table = false
local global_module_name = 'json'

--[==[

David Kolf's JSON module for Lua 5.1/5.2

Version 2.5


For the documentation see the corresponding readme.txt or visit
<http://dkolf.de/src/dkjson-lua.fsl/>.

You can contact the author by sending an e-mail to 'david' at the
domain 'dkolf.de'.


Copyright (C) 2010-2014 David Heiko Kolf

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
""Software""), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

--]==]

-- global dependencies:
local pairs, type, tostring, tonumber, getmetatable, setmetatable, rawset =
pairs, type, tostring, tonumber, getmetatable, setmetatable, rawset
local error, require, pcall, select = error, require, pcall, select
local floor, huge = math.floor, math.huge
local strrep, gsub, strsub, strbyte, strchar, strfind, strlen, strformat =
string.rep, string.gsub, string.sub, string.byte, string.char,
string.find, string.len, string.format
local strmatch = string.match
local concat = table.concat

local json = { version = ""dkjson 2.5"" }

if register_global_module_table then
    _G[global_module_name] = json
end

local _ENV = nil -- blocking globals in Lua 5.2

pcall (function()
    -- Enable access to blocked metatables.
    -- Don't worry, this module doesn't change anything in them.
    local debmeta = require ""debug"".getmetatable
    if debmeta then getmetatable = debmeta end
end)

json.null = setmetatable ({}, {
    __tojson = function () return ""null"" end
})

local function isarray (tbl)
    local max, n, arraylen = 0, 0, 0
    for k,v in pairs (tbl) do
        if k == 'n' and type(v) == 'number' then
            arraylen = v
            if v > max then
                max = v
            end
        else
            if type(k) ~= 'number' or k < 1 or floor(k) ~= k then
                return false
            end
            if k > max then
                max = k
            end
            n = n + 1
        end
    end
    if max > 10 and max > arraylen and max > n * 2 then
        return false -- don't create an array with too many holes
    end
    return true, max
end

local escapecodes = {
    [""\""""] = ""\\\"""", [""\\""] = ""\\\\"", [""\b""] = ""\\b"", [""\f""] = ""\\f"",
    [""\n""] = ""\\n"",  [""\r""] = ""\\r"",  [""\t""] = ""\\t""
}

local function escapeutf8 (uchar)
    local value = escapecodes[uchar]
    if value then
        return value
    end
    local a, b, c, d = strbyte (uchar, 1, 4)
    a, b, c, d = a or 0, b or 0, c or 0, d or 0
    if a <= 0x7f then
        value = a
    elseif 0xc0 <= a and a <= 0xdf and b >= 0x80 then
        value = (a - 0xc0) * 0x40 + b - 0x80
    elseif 0xe0 <= a and a <= 0xef and b >= 0x80 and c >= 0x80 then
        value = ((a - 0xe0) * 0x40 + b - 0x80) * 0x40 + c - 0x80
    elseif 0xf0 <= a and a <= 0xf7 and b >= 0x80 and c >= 0x80 and d >= 0x80 then
        value = (((a - 0xf0) * 0x40 + b - 0x80) * 0x40 + c - 0x80) * 0x40 + d - 0x80
    else
        return """"
    end
    if value <= 0xffff then
        return strformat (""\\u%.4x"", value)
    elseif value <= 0x10ffff then
        -- encode as UTF-16 surrogate pair
        value = value - 0x10000
        local highsur, lowsur = 0xD800 + floor (value/0x400), 0xDC00 + (value % 0x400)
        return strformat (""\\u%.4x\\u%.4x"", highsur, lowsur)
    else
        return """"
    end
end

local function fsub (str, pattern, repl)
    -- gsub always builds a new string in a buffer, even when no match
    -- exists. First using find should be more efficient when most strings
    -- don't contain the pattern.
    if strfind (str, pattern) then
        return gsub (str, pattern, repl)
    else
        return str
    end
end

local function quotestring (value)
    -- based on the regexp ""escapable"" in https://github.com/douglascrockford/JSON-js
    value = fsub (value, ""[%z\1-\31\""\\\127]"", escapeutf8)
    if strfind (value, ""[\194\216\220\225\226\239]"") then
        value = fsub (value, ""\194[\128-\159\173]"", escapeutf8)
        value = fsub (value, ""\216[\128-\132]"", escapeutf8)
        value = fsub (value, ""\220\143"", escapeutf8)
        value = fsub (value, ""\225\158[\180\181]"", escapeutf8)
        value = fsub (value, ""\226\128[\140-\143\168-\175]"", escapeutf8)
        value = fsub (value, ""\226\129[\160-\175]"", escapeutf8)
        value = fsub (value, ""\239\187\191"", escapeutf8)
        value = fsub (value, ""\239\191[\176-\191]"", escapeutf8)
    end
    return ""\"""" .. value .. ""\""""
end
json.quotestring = quotestring

local function replace(str, o, n)
    local i, j = strfind (str, o, 1, true)
    if i then
        return strsub(str, 1, i-1) .. n .. strsub(str, j+1, -1)
    else
        return str
    end
end

-- locale independent num2str and str2num functions
local decpoint, numfilter

local function updatedecpoint ()
    decpoint = strmatch(tostring(0.5), ""([^05+])"")
    -- build a filter that can be used to remove group separators
    numfilter = ""[^0-9%-%+eE"" .. gsub(decpoint, ""[%^%$%(%)%%%.%[%]%*%+%-%?]"", ""%%%0"") .. ""]+""
end

updatedecpoint()

local function num2str (num)
    return replace(fsub(tostring(num), numfilter, """"), decpoint, ""."")
end

local function str2num (str)
    local num = tonumber(replace(str, ""."", decpoint))
    if not num then
        updatedecpoint()
        num = tonumber(replace(str, ""."", decpoint))
    end
    return num
end

local function addnewline2 (level, buffer, buflen)
    buffer[buflen+1] = ""\n""
    buffer[buflen+2] = strrep (""  "", level)
    buflen = buflen + 2
    return buflen
end

function json.addnewline (state)
    if state.indent then
        state.bufferlen = addnewline2 (state.level or 0,
                state.buffer, state.bufferlen or #(state.buffer))
    end
end

local encode2 -- forward declaration

local function addpair (key, value, prev, indent, level, buffer, buflen, tables, globalorder, state)
    local kt = type (key)
    if kt ~= 'string' and kt ~= 'number' then
        return nil, ""type '"" .. kt .. ""' is not supported as a key by JSON.""
    end
    if prev then
        buflen = buflen + 1
        buffer[buflen] = "",""
    end
    if indent then
        buflen = addnewline2 (level, buffer, buflen)
    end
    buffer[buflen+1] = quotestring (key)
    buffer[buflen+2] = "":""
    return encode2 (value, indent, level, buffer, buflen + 2, tables, globalorder, state)
end

local function appendcustom(res, buffer, state)
    local buflen = state.bufferlen
    if type (res) == 'string' then
        buflen = buflen + 1
        buffer[buflen] = res
    end
    return buflen
end

local function exception(reason, value, state, buffer, buflen, defaultmessage)
    defaultmessage = defaultmessage or reason
    local handler = state.exception
    if not handler then
        return nil, defaultmessage
    else
        state.bufferlen = buflen
        local ret, msg = handler (reason, value, state, defaultmessage)
        if not ret then return nil, msg or defaultmessage end
        return appendcustom(ret, buffer, state)
    end
end

function json.encodeexception(reason, value, state, defaultmessage)
    return quotestring(""<"" .. defaultmessage .. "">"")
end

encode2 = function (value, indent, level, buffer, buflen, tables, globalorder, state)
    local valtype = type (value)
    local valmeta = getmetatable (value)
    valmeta = type (valmeta) == 'table' and valmeta -- only tables
    local valtojson = valmeta and valmeta.__tojson
    if valtojson then
        if tables[value] then
            return exception('reference cycle', value, state, buffer, buflen)
        end
        tables[value] = true
        state.bufferlen = buflen
        local ret, msg = valtojson (value, state)
        if not ret then return exception('custom encoder failed', value, state, buffer, buflen, msg) end
        tables[value] = nil
        buflen = appendcustom(ret, buffer, state)
    elseif value == nil then
        buflen = buflen + 1
        buffer[buflen] = ""null""
    elseif valtype == 'number' then
        local s
        if value ~= value or value >= huge or -value >= huge then
            -- This is the behaviour of the original JSON implementation.
            s = ""null""
        else
            s = num2str (value)
        end
        buflen = buflen + 1
        buffer[buflen] = s
    elseif valtype == 'boolean' then
        buflen = buflen + 1
        buffer[buflen] = value and ""true"" or ""false""
    elseif valtype == 'string' then
        buflen = buflen + 1
        buffer[buflen] = quotestring (value)
    elseif valtype == 'table' then
        if tables[value] then
            return exception('reference cycle', value, state, buffer, buflen)
        end
        tables[value] = true
        level = level + 1
        local isa, n = isarray (value)
        if n == 0 and valmeta and valmeta.__jsontype == 'object' then
            isa = false
        end
        local msg
        if isa then -- JSON array
            buflen = buflen + 1
            buffer[buflen] = ""[""
            for i = 1, n do
                buflen, msg = encode2 (value[i], indent, level, buffer, buflen, tables, globalorder, state)
                if not buflen then return nil, msg end
                if i < n then
                    buflen = buflen + 1
                    buffer[buflen] = "",""
                end
            end
            buflen = buflen + 1
            buffer[buflen] = ""]""
        else -- JSON object
            local prev = false
            buflen = buflen + 1
            buffer[buflen] = ""{""
            local order = valmeta and valmeta.__jsonorder or globalorder
            if order then
                local used = {}
                n = #order
                for i = 1, n do
                    local k = order[i]
                    local v = value[k]
                    if v then
                        used[k] = true
                        buflen, msg = addpair (k, v, prev, indent, level, buffer, buflen, tables, globalorder, state)
                        prev = true -- add a seperator before the next element
                    end
                end
                for k,v in pairs (value) do
                    if not used[k] then
                        buflen, msg = addpair (k, v, prev, indent, level, buffer, buflen, tables, globalorder, state)
                        if not buflen then return nil, msg end
                        prev = true -- add a seperator before the next element
                    end
                end
            else -- unordered
                for k,v in pairs (value) do
                    buflen, msg = addpair (k, v, prev, indent, level, buffer, buflen, tables, globalorder, state)
                    if not buflen then return nil, msg end
                    prev = true -- add a seperator before the next element
                end
            end
            if indent then
                buflen = addnewline2 (level - 1, buffer, buflen)
            end
            buflen = buflen + 1
            buffer[buflen] = ""}""
        end
        tables[value] = nil
    else
        return exception ('unsupported type', value, state, buffer, buflen,
                ""type '"" .. valtype .. ""' is not supported by JSON."")
    end
    return buflen
end

function json.encode (value, state)
    state = state or {}
    local oldbuffer = state.buffer
    local buffer = oldbuffer or {}
    state.buffer = buffer
    updatedecpoint()
    local ret, msg = encode2 (value, state.indent, state.level or 0,
            buffer, state.bufferlen or 0, state.tables or {}, state.keyorder, state)
    if not ret then
        error (msg, 2)
    elseif oldbuffer == buffer then
        state.bufferlen = ret
        return true
    else
        state.bufferlen = nil
        state.buffer = nil
        return concat (buffer)
    end
end

local function loc (str, where)
    local line, pos, linepos = 1, 1, 0
    while true do
        pos = strfind (str, ""\n"", pos, true)
        if pos and pos < where then
            line = line + 1
            linepos = pos
            pos = pos + 1
        else
            break
        end
    end
    return ""line "" .. line .. "", column "" .. (where - linepos)
end

local function unterminated (str, what, where)
    return nil, strlen (str) + 1, ""unterminated "" .. what .. "" at "" .. loc (str, where)
end

local function scanwhite (str, pos)
    while true do
        pos = strfind (str, ""%S"", pos)
        if not pos then return nil end
        local sub2 = strsub (str, pos, pos + 1)
        if sub2 == ""\239\187"" and strsub (str, pos + 2, pos + 2) == ""\191"" then
            -- UTF-8 Byte Order Mark
            pos = pos + 3
        elseif sub2 == ""//"" then
            pos = strfind (str, ""[\n\r]"", pos + 2)
            if not pos then return nil end
        elseif sub2 == ""/*"" then
            pos = strfind (str, ""*/"", pos + 2)
            if not pos then return nil end
            pos = pos + 2
        else
            return pos
        end
    end
end

local escapechars = {
    [""\""""] = ""\"""", [""\\""] = ""\\"", [""/""] = ""/"", [""b""] = ""\b"", [""f""] = ""\f"",
    [""n""] = ""\n"", [""r""] = ""\r"", [""t""] = ""\t""
}

local function unichar (value)
    if value < 0 then
        return nil
    elseif value <= 0x007f then
        return strchar (value)
    elseif value <= 0x07ff then
        return strchar (0xc0 + floor(value/0x40),
                0x80 + (floor(value) % 0x40))
    elseif value <= 0xffff then
        return strchar (0xe0 + floor(value/0x1000),
                0x80 + (floor(value/0x40) % 0x40),
                0x80 + (floor(value) % 0x40))
    elseif value <= 0x10ffff then
        return strchar (0xf0 + floor(value/0x40000),
                0x80 + (floor(value/0x1000) % 0x40),
                0x80 + (floor(value/0x40) % 0x40),
                0x80 + (floor(value) % 0x40))
    else
        return nil
    end
end

local function scanstring (str, pos)
    local lastpos = pos + 1
    local buffer, n = {}, 0
    while true do
        local nextpos = strfind (str, ""[\""\\]"", lastpos)
        if not nextpos then
            return unterminated (str, ""string"", pos)
        end
        if nextpos > lastpos then
            n = n + 1
            buffer[n] = strsub (str, lastpos, nextpos - 1)
        end
        if strsub (str, nextpos, nextpos) == ""\"""" then
            lastpos = nextpos + 1
            break
        else
            local escchar = strsub (str, nextpos + 1, nextpos + 1)
            local value
            if escchar == ""u"" then
                value = tonumber (strsub (str, nextpos + 2, nextpos + 5), 16)
                if value then
                    local value2
                    if 0xD800 <= value and value <= 0xDBff then
                        -- we have the high surrogate of UTF-16. Check if there is a
                        -- low surrogate escaped nearby to combine them.
                        if strsub (str, nextpos + 6, nextpos + 7) == ""\\u"" then
                            value2 = tonumber (strsub (str, nextpos + 8, nextpos + 11), 16)
                            if value2 and 0xDC00 <= value2 and value2 <= 0xDFFF then
                                value = (value - 0xD800)  * 0x400 + (value2 - 0xDC00) + 0x10000
                            else
                                value2 = nil -- in case it was out of range for a low surrogate
                            end
                        end
                    end
                    value = value and unichar (value)
                    if value then
                        if value2 then
                            lastpos = nextpos + 12
                        else
                            lastpos = nextpos + 6
                        end
                    end
                end
            end
            if not value then
                value = escapechars[escchar] or escchar
                lastpos = nextpos + 2
            end
            n = n + 1
            buffer[n] = value
        end
    end
    if n == 1 then
        return buffer[1], lastpos
    elseif n > 1 then
        return concat (buffer), lastpos
    else
        return """", lastpos
    end
end

local scanvalue -- forward declaration

local function scantable (what, closechar, str, startpos, nullval, objectmeta, arraymeta)
    local len = strlen (str)
    local tbl, n = {}, 0
    local pos = startpos + 1
    if what == 'object' then
        setmetatable (tbl, objectmeta)
    else
        setmetatable (tbl, arraymeta)
    end
    while true do
        pos = scanwhite (str, pos)
        if not pos then return unterminated (str, what, startpos) end
        local char = strsub (str, pos, pos)
        if char == closechar then
            return tbl, pos + 1
        end
        local val1, err
        val1, pos, err = scanvalue (str, pos, nullval, objectmeta, arraymeta)
        if err then return nil, pos, err end
        pos = scanwhite (str, pos)
        if not pos then return unterminated (str, what, startpos) end
        char = strsub (str, pos, pos)
        if char == "":"" then
            if val1 == nil then
                return nil, pos, ""cannot use nil as table index (at "" .. loc (str, pos) .. "")""
            end
            pos = scanwhite (str, pos + 1)
            if not pos then return unterminated (str, what, startpos) end
            local val2
            val2, pos, err = scanvalue (str, pos, nullval, objectmeta, arraymeta)
            if err then return nil, pos, err end
            tbl[val1] = val2
            pos = scanwhite (str, pos)
            if not pos then return unterminated (str, what, startpos) end
            char = strsub (str, pos, pos)
        else
            n = n + 1
            tbl[n] = val1
        end
        if char == "","" then
            pos = pos + 1
        end
    end
end

scanvalue = function (str, pos, nullval, objectmeta, arraymeta)
    pos = pos or 1
    pos = scanwhite (str, pos)
    if not pos then
        return nil, strlen (str) + 1, ""no valid JSON value (reached the end)""
    end
    local char = strsub (str, pos, pos)
    if char == ""{"" then
        return scantable ('object', ""}"", str, pos, nullval, objectmeta, arraymeta)
    elseif char == ""["" then
        return scantable ('array', ""]"", str, pos, nullval, objectmeta, arraymeta)
    elseif char == ""\"""" then
        return scanstring (str, pos)
    else
        local pstart, pend = strfind (str, ""^%-?[%d%.]+[eE]?[%+%-]?%d*"", pos)
        if pstart then
            local number = str2num (strsub (str, pstart, pend))
            if number then
                return number, pend + 1
            end
        end
        pstart, pend = strfind (str, ""^%a%w*"", pos)
        if pstart then
            local name = strsub (str, pstart, pend)
            if name == ""true"" then
                return true, pend + 1
            elseif name == ""false"" then
                return false, pend + 1
            elseif name == ""null"" then
                return nullval, pend + 1
            end
        end
        return nil, pos, ""no valid JSON value at "" .. loc (str, pos)
    end
end

local function optionalmetatables(...)
    if select(""#"", ...) > 0 then
        return ...
    else
        return {__jsontype = 'object'}, {__jsontype = 'array'}
    end
end

function json.decode (str, pos, nullval, ...)
    local objectmeta, arraymeta = optionalmetatables(...)
    return scanvalue (str, pos, nullval, objectmeta, arraymeta)
end

function json.use_lpeg ()
    local g = require (""lpeg"")

    if g.version() == ""0.11"" then
        error ""due to a bug in LPeg 0.11, it cannot be used for JSON matching""
    end

    local pegmatch = g.match
    local P, S, R = g.P, g.S, g.R

    local function ErrorCall (str, pos, msg, state)
        if not state.msg then
            state.msg = msg .. "" at "" .. loc (str, pos)
            state.pos = pos
        end
        return false
    end

    local function Err (msg)
        return g.Cmt (g.Cc (msg) * g.Carg (2), ErrorCall)
    end

    local SingleLineComment = P""//"" * (1 - S""\n\r"")^0
    local MultiLineComment = P""/*"" * (1 - P""*/"")^0 * P""*/""
    local Space = (S"" \n\r\t"" + P""\239\187\191"" + SingleLineComment + MultiLineComment)^0

    local PlainChar = 1 - S""\""\\\n\r""
    local EscapeSequence = (P""\\"" * g.C (S""\""\\/bfnrt"" + Err ""unsupported escape sequence"")) / escapechars
    local HexDigit = R(""09"", ""af"", ""AF"")
    local function UTF16Surrogate (match, pos, high, low)
        high, low = tonumber (high, 16), tonumber (low, 16)
        if 0xD800 <= high and high <= 0xDBff and 0xDC00 <= low and low <= 0xDFFF then
            return true, unichar ((high - 0xD800)  * 0x400 + (low - 0xDC00) + 0x10000)
        else
            return false
        end
    end
    local function UTF16BMP (hex)
        return unichar (tonumber (hex, 16))
    end
    local U16Sequence = (P""\\u"" * g.C (HexDigit * HexDigit * HexDigit * HexDigit))
    local UnicodeEscape = g.Cmt (U16Sequence * U16Sequence, UTF16Surrogate) + U16Sequence/UTF16BMP
    local Char = UnicodeEscape + EscapeSequence + PlainChar
    local String = P""\"""" * g.Cs (Char ^ 0) * (P""\"""" + Err ""unterminated string"")
    local Integer = P""-""^(-1) * (P""0"" + (R""19"" * R""09""^0))
    local Fractal = P""."" * R""09""^0
    local Exponent = (S""eE"") * (S""+-"")^(-1) * R""09""^1
    local Number = (Integer * Fractal^(-1) * Exponent^(-1))/str2num
    local Constant = P""true"" * g.Cc (true) + P""false"" * g.Cc (false) + P""null"" * g.Carg (1)
    local SimpleValue = Number + String + Constant
    local ArrayContent, ObjectContent

    -- The functions parsearray and parseobject parse only a single value/pair
    -- at a time and store them directly to avoid hitting the LPeg limits.
    local function parsearray (str, pos, nullval, state)
        local obj, cont
        local npos
        local t, nt = {}, 0
        repeat
            obj, cont, npos = pegmatch (ArrayContent, str, pos, nullval, state)
            if not npos then break end
            pos = npos
            nt = nt + 1
            t[nt] = obj
        until cont == 'last'
        return pos, setmetatable (t, state.arraymeta)
    end

    local function parseobject (str, pos, nullval, state)
        local obj, key, cont
        local npos
        local t = {}
        repeat
            key, obj, cont, npos = pegmatch (ObjectContent, str, pos, nullval, state)
            if not npos then break end
            pos = npos
            t[key] = obj
        until cont == 'last'
        return pos, setmetatable (t, state.objectmeta)
    end

    local Array = P""["" * g.Cmt (g.Carg(1) * g.Carg(2), parsearray) * Space * (P""]"" + Err ""']' expected"")
    local Object = P""{"" * g.Cmt (g.Carg(1) * g.Carg(2), parseobject) * Space * (P""}"" + Err ""'}' expected"")
    local Value = Space * (Array + Object + SimpleValue)
    local ExpectedValue = Value + Space * Err ""value expected""
    ArrayContent = Value * Space * (P"","" * g.Cc'cont' + g.Cc'last') * g.Cp()
    local Pair = g.Cg (Space * String * Space * (P"":"" + Err ""colon expected"") * ExpectedValue)
    ObjectContent = Pair * Space * (P"","" * g.Cc'cont' + g.Cc'last') * g.Cp()
    local DecodeValue = ExpectedValue * g.Cp ()

    function json.decode (str, pos, nullval, ...)
        local state = {}
        state.objectmeta, state.arraymeta = optionalmetatables(...)
        local obj, retpos = pegmatch (DecodeValue, str, pos, nullval, state)
        if state.msg then
            return nil, state.pos, state.msg
        else
            return obj, retpos
        end
    end

    -- use this function only once:
    json.use_lpeg = function () return json end

    json.using_lpeg = true

    return json -- so you can get the module using json = require ""dkjson"".use_lpeg()
end

if always_try_using_lpeg then
    pcall (json.use_lpeg)
end

return json"
ymnMb50Q,Untitled,MeehoweCK,C++,Tuesday 18th of June 2024 10:00:38 AM CDT,"#include <iostream>

const auto W{ 8 }, K{ 10 }, X{ 2 };

char losujChar() {
	auto los{ 48 + rand() % 62 };
	if (los > 57) {
		los += 7;
	}
	if (los > 90) {
		los += 6;
	}
	return static_cast<char>(los);
}

void wypelnij(char tab[][K]) {
	for (int i{}; i < W; ++i) {
		for (int j{}; j < K; ++j) {
			tab[i][j] = losujChar();
		}
	}
}

void wypisz(char tab[][K]) {
	for (int i{}; i < W; ++i) {
		for (int j{}; j < K; ++j) {
			std::cout << tab[i][j] << '\t';
		}
		std::cout << std::endl;
	}
}

int main() {
	srand(time(nullptr));
	char tablica[W][K];
	wypelnij(tablica);
	wypisz(tablica);
}"
3FAFtx0A,sfdesefgseg,gadungw71,PHP,Tuesday 18th of June 2024 09:53:58 AM CDT,"‚Ä¢	https://www.imdb.com/list/ls547941679/
‚Ä¢	https://www.imdb.com/list/ls547941452/
‚Ä¢	https://www.imdb.com/list/ls547941487/
‚Ä¢	https://www.imdb.com/list/ls547943635/
‚Ä¢	https://www.imdb.com/list/ls547943648/
‚Ä¢	https://www.imdb.com/list/ls547943910/
‚Ä¢	https://www.imdb.com/list/ls547981905/
‚Ä¢	https://www.imdb.com/list/ls547981962/
‚Ä¢	https://www.imdb.com/list/ls547989632/
‚Ä¢	https://www.imdb.com/list/ls547989695/
‚Ä¢	https://www.imdb.com/list/ls547989442/
‚Ä¢	https://www.imdb.com/list/ls547989953/
‚Ä¢	https://www.letsdobookmark.com/story/https-www-imdb-com-list-ls547941679
‚Ä¢	https://www.letsdobookmark.com/story/https-www-imdb-com-list-ls547941452
‚Ä¢	https://www.letsdobookmark.com/story/https-www-imdb-com-list-ls547941487
‚Ä¢	https://www.letsdobookmark.com/story/https-www-imdb-com-list-ls547943635
‚Ä¢	https://www.letsdobookmark.com/story/https-www-imdb-com-list-ls547943648
‚Ä¢	https://www.letsdobookmark.com/story/https-www-imdb-com-list-ls547943910
‚Ä¢	https://www.letsdobookmark.com/story/https-www-imdb-com-list-ls547981905
‚Ä¢	https://www.letsdobookmark.com/story/https-www-imdb-com-list-ls547981962
‚Ä¢	https://www.letsdobookmark.com/story/https-www-imdb-com-list-ls547989632
‚Ä¢	https://www.letsdobookmark.com/story/https-www-imdb-com-list-ls547989695
‚Ä¢	https://www.letsdobookmark.com/story/https-www-imdb-com-list-ls547989442
‚Ä¢	https://www.letsdobookmark.com/story/https-www-imdb-com-list-ls547989953
‚Ä¢	https://www.socialbookmarkingwebsite.com/story/https-www-imdb-com-list-ls547941679
‚Ä¢	https://www.socialbookmarkingwebsite.com/story/https-www-imdb-com-list-ls547941452
‚Ä¢	https://www.socialbookmarkingwebsite.com/story/https-www-imdb-com-list-ls547941487
‚Ä¢	https://www.socialbookmarkingwebsite.com/story/https-www-imdb-com-list-ls547943635
‚Ä¢	https://www.socialbookmarkingwebsite.com/story/https-www-imdb-com-list-ls547943648
‚Ä¢	https://www.socialbookmarkingwebsite.com/story/https-www-imdb-com-list-ls547943910
‚Ä¢	https://www.socialbookmarkingwebsite.com/story/https-www-imdb-com-list-ls547981905
‚Ä¢	https://www.socialbookmarkingwebsite.com/story/https-www-imdb-com-list-ls547981962
‚Ä¢	https://www.socialbookmarkingwebsite.com/story/https-www-imdb-com-list-ls547989632
‚Ä¢	https://hybrid-analysis.com/sample/885c7d57d204b6cb4c4dc85ecd2f4968ec86cc4c760beca0e99562f22bb0e0ee
‚Ä¢	https://hybrid-analysis.com/sample/20c607d5299c5edd8fb9f706e71349b80cb150805bf77d55acbf9f78f412bb17
‚Ä¢	https://hybrid-analysis.com/sample/d9147c49b42193e3bc6e019b661af69725a7108c41532f44a137a92274a4f9cf
‚Ä¢	https://hybrid-analysis.com/sample/ae783d839ea56a69e3b7b8e056edffdcd3225df872e7c47770cba3561a251ac9
‚Ä¢	https://hybrid-analysis.com/sample/88eb6fc35b8f81f60cb8a177f6614f181657b191cfdfc65eff545ed9da80979c
‚Ä¢	https://hybrid-analysis.com/sample/c61bc2e354a9a423d5a71254ffed58086328db228fdadf7683fb700c9257fb43
‚Ä¢	https://hybrid-analysis.com/sample/501b4b2878a18d977a7d28a859fce0e00b3a430826ce63fc668cc4750802edd5
‚Ä¢	https://hybrid-analysis.com/sample/ba5047563fce3afd4468bff254a70b6988d1e3e1c872b26139f7935be9800572
‚Ä¢	https://hybrid-analysis.com/sample/0a312641319526f22b3fb939f91c00df311370e285b380c6da62633a68bf5eee
‚Ä¢	https://hybrid-analysis.com/sample/f9ab42ff50f212221e1c84f60dce97eb3b822a8e12e8bb88853704643458e7f3
‚Ä¢	https://hybrid-analysis.com/sample/ddeb42d4aefc8253acb5cef54f7b104e3ece2f3662552ac68d1db586568888eb
‚Ä¢	https://hybrid-analysis.com/sample/d11cf76bc6bf8e86ae61cac095bfb17b6ecdeaed779971b90865fc5d75f212a0
‚Ä¢	https://forum.mush.com.br/topic/221249/xem-phim-nh%E1%BB%AFng-m%E1%BA%A3nh-gh%C3%A9p-c%E1%BA%A3m-x%C3%BAc-2-full-hd-vietsub
‚Ä¢	https://b.hatena.ne.jp/afafaw
‚Ä¢	https://heylink.me/memek767/
‚Ä¢	https://mez.ink/hd934355
‚Ä¢	https://wiredforwar.org/topic/1461/ds-fensett
‚Ä¢	https://wandering.flarum.cloud/d/71969-gsgbrg-rhddrh
‚Ä¢	https://hiuderyy.hashnode.dev/sgsegs-gssetrhdrh
‚Ä¢	https://click4r.com/posts/g/17150888/afbveb-esgesg
‚Ä¢	https://handituru9.medium.com/grdsgrdbrdgdrhg-d359dfd4db15
‚Ä¢	https://www.onfeetnation.com/profiles/blogs/fghrtyhdrfgrdrh
‚Ä¢	https://hackmd.io/@rerewilli6/Hk3FMGkLC
‚Ä¢	https://demo.hedgedoc.org/s/XVyeePSRH
‚Ä¢	https://rentry.co/r4bvpmh3
‚Ä¢	https://tempaste.com/yWf4iBYf4iG
‚Ä¢	https://paste.ee/p/kMCDz
‚Ä¢	https://yamcode.com/desfgsegesg
‚Ä¢	https://start.me/w/LaNDD7
‚Ä¢	https://telegra.ph/DSFSEGSEG-06-18
‚Ä¢	https://matters.town/a/tbgardwfzmpw
‚Ä¢	https://communityofbabel.com/en/forums/discussion/African-languages/sdefsegseg
‚Ä¢	https://muckrack.com/rafaelro-bertson1/bio
‚Ä¢	https://www.bitsdujour.com/profiles/pU05NJ
‚Ä¢	http://aldenfamilydentistry.com/UserProfile/tabid/57/userId/809243/Default.aspx
"
9MuVULCH,Untitled,35657,C++,Tuesday 18th of June 2024 09:46:58 AM CDT,"/*
–û–ø–∏—Å–∞–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞.
–ò—Å—Ö–æ–¥—è –∏–∑ —É—Å–ª–æ–≤–∏–π –∑–∞–¥–∞–Ω–∏—è, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ —Å–µ—Ç–∫–∏, –≤ –ª—é–±–æ–π –ª–∏–Ω–∏–∏ (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π, –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π, –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω–æ–π) –º–æ–∂–Ω–æ —Ä–∞—Å–ø–æ–ª–æ–∂–∏—Ç—å –Ω–µ –±–æ–ª–µ–µ –¥–≤—É—Ö —É–∑–ª–æ–≤. –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏ —É–∑–ª–æ–≤, –∏—Ö –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å N * 2.
–ù–∞–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ –ø–µ—Ä–µ–±–æ—Ä–µ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏ N * 2 —É–∑–ª–æ–≤ –≤ —Å–µ—Ç–∫–µ —Ä–∞–∑–º–µ—Ä–æ–º N * N, –Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è —Å–µ—Ç–∫–∏ —Ä–∞–∑–º–µ—Ä–æ–º 8 * 8 —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–≤–Ω–æ —á–∏—Å–ª—É —Å–æ—á–µ—Ç–∞–Ω–∏–π –∏–∑ 64 –ø–æ 16, —Ç–æ –µ—Å—Ç—å 488526937079580.
–í –¥–∞–Ω–Ω–æ–º —Ä–µ—à–µ–Ω–∏–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –ø–æ–∏—Å–∫ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö.–°–µ—Ç–∫–∞ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è –∫–∞–∫ –º–∞—Ç—Ä–∏—Ü–∞ —Ä–∞–∑–º–µ—Ä–æ–º N * N.
–†–∞–±–æ—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–∏ get_count –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç–∞ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ç–æ—á–∫–∏ —Å –ø–µ—Ä–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –º–∞—Ç—Ä–∏—Ü—ã.–ï—Å–ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ –∏ —Å—Ç–æ–ª–±—Ü–µ, –Ω–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–∏ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —è—á–µ–π–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–µ –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–µ–π check_lines –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —è—á–µ–π–∫–∏ –º–∞—Ç—Ä–∏—Ü—ã —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ª–∏–Ω–∏—è–º–∏, –æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –ª—é–±—ã–º–∏ –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏.
–ï—Å–ª–∏ —Ç–æ—á–∫–∞ –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è –Ω–∏ —Å –æ–¥–Ω–æ–π –ª–∏–Ω–∏–µ–π:
-—Ç–æ—á–∫–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –º–∞—Å—Å–∏–≤ points;
-–ø–æ –æ–±—â–µ–º—É —É—Ä–∞–≤–Ω–µ–Ω–∏—é –ø—Ä—è–º–æ–π —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –º–∞—Å—Å–∏–≤–µ lines –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—Å–µ—Ö –ª–∏–Ω–∏–π, –æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π —Ç–æ—á–∫–æ–π —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Ç–æ—á–∫–∞–º–∏;
-—Å—á–µ—Ç—á–∏–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä–æ–∫–∏ –∏ —Å—Ç–æ–ª–±—Ü–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –µ–¥–∏–Ω–∏—Ü—É;
-–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ get_count –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–π —Ç–æ—á–∫–∏, –ø—Ä–∏ —ç—Ç–æ–º –ø–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ –≤ —Å—Ç—Ä–æ–∫–µ –ª–∏–±–æ —Å –Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ –≤ —Ç–µ–∫—É—â—É—é —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–≤–µ —Ç–æ—á–∫–∏.
–ü–æ—Å–ª–µ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ç–æ—á–µ–∫, –ø–æ—Å–ª–µ–¥–Ω—è—è –¥–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è —Ç–æ—á–∫–∞ —É–¥–∞–ª—è–µ—Ç—Å—è, –ª–∏–Ω–∏–∏, –æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ –µ–π —É–¥–∞–ª—è—é—Ç—Å—è, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–ø—ã—Ç–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ç–æ—á–∫–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—Ä—É–≥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è.
–ï—Å–ª–∏ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤—Å–µ N*2 —Ç–æ—á–µ–∫, —Å—á–µ—Ç—á–∏–∫ result —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –µ–¥–∏–Ω–∏—Ü—É, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è.
*/

#include <iostream>
#include <vector>

struct line {
    int A;
    int B;
    int C;
};

struct point {
    int x;
    int y;
};

int field_size, max_count, cnt = 0, result = 0;
std::vector<int> row, col;
std::vector<point> points;
std::vector<line> lines;

void print() {

    std::vector<std::vector<int>> field(field_size);

    for (auto& a : field) {
        a.resize(field_size);
    }

    for (const auto& p : points) {
        field[p.x][p.y] = 1;
    }

    std::cout << std::endl;

    for (int i = 0; i < field_size; ++i) {
        for (int j = 0; j < field_size; ++j) {
            std::cout << field[i][j] << "" "";
        }
        std::cout << std::endl;
    }
    std::cout << std::endl;
}

bool check_lines(const int x, const int y) {
    for (const auto& l : lines) {
        if (l.A * x + l.B * y + l.C == 0) {
            return false;
        }
    }
    return true;
}

void add_lines(const int x, const int y) {

    int A, B, C;

    for (const auto& p : points) {
        A = y - p.y;
        B = p.x - x;
        C = p.x * (p.y - y) + p.y * (x - p.x);
        lines.push_back({ A, B, C});
    }
}

void get_count(int i = 0, int k = 0) {
    for (int j = k; j < field_size; ++j) {
        if (row[i] < 2 && col[j] < 2 && check_lines(i, j)) {
            if (cnt == max_count - 1) {
                result++;
                print();
                return;
            }
            else {
                row[i]++;
                col[j]++;
                add_lines(i, j);
                points.push_back({ i, j });
                cnt++;

                row[i] == 2 ? get_count(i + 1, 0) : get_count(i, j + 1);

                row[i]--;
                col[j]--;
                lines.resize(lines.size() - (points.size() - 1));
                points.pop_back();
                cnt--;
            }
        }
    }
}

int main() {

    setlocale(LC_ALL, ""ru"");

    std::cout << ""–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å–µ—Ç–∫–∏: "";

    std::cin >> field_size;

    max_count = field_size * 2;

    row.resize(field_size);
    col.resize(field_size);

    get_count();

    std::cout << ""–í —Å–µ—Ç–∫–µ –º–æ–∂–Ω–æ —Ä–∞—Å–ø–æ–ª–æ–∂–∏—Ç—å –º–∞–∫—Å–∏–º—É–º "" << max_count << "" —Ç–æ—á–µ–∫"" << std::endl;
    std::cout << ""–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–æ–∫ –∏–∑ "" << max_count << "" —Ç–æ—á–µ–∫: "" << result << std::endl;

}"
antZqJhZ,Untitled,35657,C++,Tuesday 18th of June 2024 09:45:33 AM CDT,"/*
–û–ø–∏—Å–∞–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞.
–ò—Å—Ö–æ–¥—è –∏–∑ —É—Å–ª–æ–≤–∏–π –∑–∞–¥–∞–Ω–∏—è, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ —Å–µ—Ç–∫–∏, –≤ –ª—é–±–æ–π –ª–∏–Ω–∏–∏ (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π, –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π, –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω–æ–π) –º–æ–∂–Ω–æ —Ä–∞—Å–ø–æ–ª–æ–∂–∏—Ç—å –Ω–µ –±–æ–ª–µ–µ –¥–≤—É—Ö —É–∑–ª–æ–≤.–¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏ —É–∑–ª–æ–≤, –∏—Ö –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å N * 2.
–ù–∞–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ –ø–µ—Ä–µ–±–æ—Ä–µ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏ N * 2 —É–∑–ª–æ–≤ –≤ —Å–µ—Ç–∫–µ —Ä–∞–∑–º–µ—Ä–æ–º N * N, –Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è —Å–µ—Ç–∫–∏ —Ä–∞–∑–º–µ—Ä–æ–º 8 * 8 —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–≤–Ω–æ —á–∏—Å–ª—É —Å–æ—á–µ—Ç–∞–Ω–∏–π –∏–∑ 64 –ø–æ 16, —Ç–æ –µ—Å—Ç—å 488526937079580.
–í –¥–∞–Ω–Ω–æ–º —Ä–µ—à–µ–Ω–∏–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –ø–æ–∏—Å–∫ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö.–°–µ—Ç–∫–∞ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è –∫–∞–∫ –º–∞—Ç—Ä–∏—Ü–∞ —Ä–∞–∑–º–µ—Ä–æ–º N * N.
–†–∞–±–æ—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–∏ get_count –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç–∞ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ç–æ—á–∫–∏ —Å –ø–µ—Ä–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –º–∞—Ç—Ä–∏—Ü—ã.–ï—Å–ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ –∏ —Å—Ç–æ–ª–±—Ü–µ, –Ω–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–∏ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —è—á–µ–π–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–µ –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–µ–π check_lines –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —è—á–µ–π–∫–∏ –º–∞—Ç—Ä–∏—Ü—ã —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ª–∏–Ω–∏—è–º–∏, –æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –ª—é–±—ã–º–∏ –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏.
–ï—Å–ª–∏ —Ç–æ—á–∫–∞ –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è –Ω–∏ —Å –æ–¥–Ω–æ–π –ª–∏–Ω–∏–µ–π:
-—Ç–æ—á–∫–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –º–∞—Å—Å–∏–≤ points;
-–ø–æ –æ–±—â–µ–º—É —É—Ä–∞–≤–Ω–µ–Ω–∏—é –ø—Ä—è–º–æ–π —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –º–∞—Å—Å–∏–≤–µ lines –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—Å–µ—Ö –ª–∏–Ω–∏–π, –æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π —Ç–æ—á–∫–æ–π —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Ç–æ—á–∫–∞–º–∏;
-—Å—á–µ—Ç—á–∏–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä–æ–∫–∏ –∏ —Å—Ç–æ–ª–±—Ü–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –µ–¥–∏–Ω–∏—Ü—É;
-–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ get_count –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–π —Ç–æ—á–∫–∏, –ø—Ä–∏ —ç—Ç–æ–º –ø–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ –≤ —Å—Ç—Ä–æ–∫–µ –ª–∏–±–æ —Å –Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ –≤ —Ç–µ–∫—É—â—É—é —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–≤–µ —Ç–æ—á–∫–∏.
–ü–æ—Å–ª–µ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ç–æ—á–µ–∫, –ø–æ—Å–ª–µ–¥–Ω—è—è –¥–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è —Ç–æ—á–∫–∞ —É–¥–∞–ª—è–µ—Ç—Å—è, –ª–∏–Ω–∏–∏, –æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ –µ–π —É–¥–∞–ª—è—é—Ç—Å—è, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–ø—ã—Ç–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ç–æ—á–∫–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—Ä—É–≥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è.
–ï—Å–ª–∏ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤—Å–µ N*2 —Ç–æ—á–µ–∫, —Å—á–µ—Ç—á–∏–∫ result —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –µ–¥–∏–Ω–∏—Ü—É, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è.
*/


#include <iostream>
#include <vector>

struct line {
    int A;
    int B;
    int C;
};

struct point {
    int x;
    int y;
};

int field_size, max_count, cnt = 0, result = 0;
std::vector<int> row, col;
std::vector<point> points;
std::vector<line> lines;

bool check_lines(const int x, const int y) {
    for (const auto& l : lines) {
        if (l.A * x + l.B * y + l.C == 0) {
            return false;
        }
    }
    return true;
}

void add_lines(const int x, const int y) {

    int A, B, C;

    for (const auto& p : points) {
        A = y - p.y;
        B = p.x - x;
        C = p.x * (p.y - y) + p.y * (x - p.x);
        lines.push_back({ A, B, C});
    }
}

void get_count(int i = 0, int k = 0) {
    for (int j = k; j < field_size; ++j) {
        if (row[i] < 2 && col[j] < 2 && check_lines(i, j)) {
            if (cnt == max_count - 1) {
                result++;
                return;
            }
            else {
                row[i]++;
                col[j]++;
                add_lines(i, j);
                points.push_back({ i, j });
                cnt++;

                row[i] == 2 ? get_count(i + 1, 0) : get_count(i, j + 1);

                row[i]--;
                col[j]--;
                lines.resize(lines.size() - (points.size() - 1));
                points.pop_back();
                cnt--;
            }
        }
    }
}

int main() {

    setlocale(LC_ALL, ""ru"");

    std::cout << ""–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å–µ—Ç–∫–∏: "";

    std::cin >> field_size;

    max_count = field_size * 2;

    row.resize(field_size);
    col.resize(field_size);

    get_count();

    std::cout << ""–í —Å–µ—Ç–∫–µ –º–æ–∂–Ω–æ —Ä–∞—Å–ø–æ–ª–æ–∂–∏—Ç—å –º–∞–∫—Å–∏–º—É–º "" << max_count << "" —Ç–æ—á–µ–∫"" << std::endl;
    std::cout << ""–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–æ–∫ –∏–∑ "" << max_count << "" —Ç–æ—á–µ–∫: "" << result << std::endl;

}"
Tw2qEAKD,Untitled,MeehoweCK,C++,Tuesday 18th of June 2024 09:43:57 AM CDT,"#include <iostream>

int main() {
	std::cout << ""Tablica ASCII:\n"";
	for (auto i{ 33 }; i < 127; ++i) {
		std::cout << '\t' << i << "": "" << static_cast<char>(i);
		std::cout << (i % 4 != 0 ? ""\t\t"" : ""\n"");
	}
}"
Yb7cDJX1,Untitled,MeehoweCK,C++,Tuesday 18th of June 2024 09:20:07 AM CDT,"#include <iostream>
#include <ctime>
#include <cstdlib>

const int ROZMIAR = 6;

void wypelni(double tab[][ROZMIAR])
{
    for (int i = 0; i < ROZMIAR; ++i)
    {
        for (int j = 0; j < ROZMIAR; ++j)
        {
            tab[i][j] = 10.0 * rand() / RAND_MAX;
        }
    }
}

void wypisz(double tab[][ROZMIAR])
{
    for (int i = 0; i < ROZMIAR; ++i)
    {
        for (int j = 0; j < ROZMIAR; ++j)
        {
            std::cout << tab[i][j] << '\t';
        }
        std::cout << std::endl;
    }
}

void znajdz_i_zmien_przekatne(double tab[][ROZMIAR]) {
    double najwieksza_1 = tab[0][0], najwieksza_2 = tab[1][1];
    auto w1{ 0 }, w2{ 1 }, k1{ 0 }, k2{ 1 };
    if (najwieksza_2 > najwieksza_1) {
        std::swap(najwieksza_1, najwieksza_2);
        std::swap(w1, w2);
        std::swap(k1, k2);
    }

    for (auto i{ 2 }; i < ROZMIAR; ++i) {
        if (tab[i][i] > najwieksza_1) {
            najwieksza_2 = najwieksza_1;
            w2 = w1;
            k2 = k1;
            najwieksza_1 = tab[i][i];
            w1 = i;
            k1 = i;
        }
        else if (tab[i][i] > najwieksza_2) {
            najwieksza_2 = tab[i][i];
            k2 = i;
            w2 = i;
        }
    }
    const auto K{ ROZMIAR - 1 };
    for (auto i{ 0 }; i < ROZMIAR; ++i) {
        if (tab[i][K - i] > najwieksza_1) {
            najwieksza_2 = najwieksza_1;
            w2 = w1;
            k2 = k1;
            najwieksza_1 = tab[i][K - i];
            w1 = i;
            k1 = K - i;
        }
        else if (tab[i][K - i] > najwieksza_2) {
            najwieksza_2 = tab[i][K - i];
            k2 = K - i;
            w2 = i;
        }
    }

    /*for (int i = 0; i < ROZMIAR; ++i) {
        if (tab[i][i] > najwieksza_1) {
            najwieksza_2 = najwieksza_1;
            w_max = w_min; k_max = k_min;
            najwieksza_1 = tab[i][i];
            w_min = i; k_min = i;
        }
        else if (tab[i][i] > najwieksza_2) {
            najwieksza_2 = tab[i][i];
            w_max = i; k_max = i;
        }
        if (tab[i][ROZMIAR - 1 - i] > najwieksza_1) {
            najwieksza_2 = najwieksza_1;
            w_max = w_min; k_max = k_min;
            najwieksza_1 = tab[i][ROZMIAR - 1 - i];
            w_min = i; k_min = ROZMIAR - 1 - i;
        }
        else if (tab[i][ROZMIAR - 1 - i] > najwieksza_2) {
            najwieksza_2 = tab[i][ROZMIAR - 1 - i];
            w_max = i; k_max = ROZMIAR - 1 - i;
        }
    }*/


    std::cout << ""Najwieksza wartosc na przekatnych: "" << najwieksza_1 << "" na polu ["" << w1 << ""]["" << k1 << ""]"" << std::endl;
    std::cout << ""Druga najwieksza wartosc na przekatnych: "" << najwieksza_2 << "" na polu ["" << w2 << ""]["" << k2 << ""]"" << std::endl;

    tab[w2][k2] = 0;
    tab[w1][k1] = 0;
    std::cout << ""\n liczby zamienione na 0:\n"";
    wypisz(tab);
}




void wartoscMinMax(double tab[][ROZMIAR])
{
    auto najmniejsza{ tab[0][0] }, najwieksza{ tab[0][0] };
    auto w_min{ 0 }, w_max{ 0 }, k_min{ 0 }, k_max{ 0 };
    // sprawdzenie pozosta≈Çych element√≥w zerowego wiersza:
    for (int i{ 1 }; i < ROZMIAR; ++i) {
        if (tab[0][i] < najmniejsza) {
            najmniejsza = tab[0][i];
            k_min = i;
        }
        else if (tab[0][i] > najwieksza) {
            najwieksza = tab[0][i];
            k_max = i;
        }
    }
    // sprawdzenie pozosta≈Çych element√≥w ostatniej kolumny:
    const auto k{ ROZMIAR - 1 };
    for (int i{ 1 }; i < ROZMIAR; ++i) {
        if (tab[i][k] < najmniejsza) {
            najmniejsza = tab[i][k];
            k_min = k;
            w_min = i;
        }
        else if (tab[i][k] > najwieksza) {
            najwieksza = tab[i][k];
            k_max = k;
            w_max = i;
        }
    }
    // sprawdzenie pozosta≈Çych element√≥w ostatniego wiersza:
    for (int i{ 0 }; i < k; ++i) {
        if (tab[k][i] < najmniejsza) {
            najmniejsza = tab[k][i];
            k_min = i;
            w_min = k;
        }
        else if (tab[k][i] > najwieksza) {
            najwieksza = tab[k][i];
            k_max = i;
            w_max = k;
        }
    }
    // sprawdzenie pozosta≈Çych element√≥w zerowej kolumny:
    for (int i{ 1 }; i < k; ++i) {
        if (tab[i][0] < najmniejsza) {
            najmniejsza = tab[i][0];
            k_min = 0;
            w_min = i;
        }
        else if (tab[i][0] > najwieksza) {
            najwieksza = tab[i][0];
            k_max = 0;
            w_max = i;
        }
    }
    std::cout << ""Najwieksza wartosc na obwodzie znajduje sie na polu ["" << w_max << ""]["" << k_max << ""] i wynosi "" << najwieksza << std::endl;
    std::cout << ""Najmniejsza wartosc na obwodzie znajduje sie na polu ["" << w_min << ""]["" << k_min << ""] i wynosi "" << najmniejsza << std::endl;
    double suma = najmniejsza + najwieksza;
    tab[w_min][k_min] = suma;
    tab[w_max][k_max] = suma;
    std::cout << ""\nsuma tych liczb:\n"";
    //wypisz(tab);
}

int main()
{
    double tab2w[ROZMIAR][ROZMIAR];
    srand(time(nullptr));
    wypelni(tab2w);
    wypisz(tab2w);
    znajdz_i_zmien_przekatne(tab2w);
    wartoscMinMax(tab2w);
    wypisz(tab2w);
}"
5xLPgcDU,nuc_control_wakeUp_machine,taoshi,Lua,Tuesday 18th of June 2024 09:17:25 AM CDT,"--—É–¥–∞–ª—ë–Ω–Ω–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
repeat = 5
modem = require('component').modem
event = require('event')
function wake()
  modem.broadcast(1,'Wake!')
  return true
end
wakeID = event.timer(repeat,wake,math.huge)
print('–¢–∞–π–º–µ—Ä –≤–∫–ª—é—á–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–ø—É—â–µ–Ω. –ß–∞—Å—Ç–æ—Ç–∞ –ø–æ–≤—Ç–æ—Ä–∞: 5 —Å–µ–∫—É–Ω–¥')"
UqGedv8a,nuc_control for nuclear reactors on LZH,taoshi,Lua,Tuesday 18th of June 2024 09:14:12 AM CDT,"local lapis_minimum = 30000
local lapis_recomended = 90000
local lapis_precraft_size = 30000
local component = require('component')
local keyboard = require('keyboard')
local gpu = component.gpu
local modem = component.modem
local event = require('event')
local math = require('math')
local nuc, me, xr, yr = nil
local fingerprint = {name='minecraft:lapis_block',damage=0}
local isWork = true
local nucWork, producesEnergy, totalEUfromNucs = 0, 0, 0
local preCraft = false
local inProcess = false
local isDone,isCanceled = true,false
local request = nil

modem.open(1)
modem.setWakeMessage('Wake!')

function getDevice(name)
name=name or 'computer'  
local device={}
  local c=component.list()
  for k,v in pairs(c) do if string.find(v,name) then
    device[#device+1]=component.proxy(k) end
  end
  return device
end

local lapis = getDevice('me_')[1].getCraftables(fingerprint)[1]
if lapis and lapis.request then
  request = lapis.request
  preCraft = true
end

function nuc_off()
	for num in pairs(nuc) do
		nuc[num].stopReactor()
	end
	return false
end

function nuc_on()
	for num in pairs(nuc) do
		nuc[num].startReactor()
	end
	return true
end

function is_nuc_work()
	local output = nil
  nucWork, producesEnergy, totalEUfromNucs = 0, 0, 0
	for num in pairs(nuc) do
		gpu.set(xr-26,4,'–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–∫—Ç–æ—Ä–∞ '..num..'       ')
		if nuc[num].isReactorWorking() then
			nucWork = nucWork+1
			output = nuc[num].getReactorEUOutput()
			if output > 0 then
				producesEnergy = producesEnergy + 1
				totalEUfromNucs = totalEUfromNucs + output
			end
		end

	end
	gpu.fill(xr-26,4,26,1,' ')
end

function lapis_available()
	local lapis, cooldown, second = me.getItemsInNetwork(fingerprint)[1].size
	if not lapis then 
    local timer = second.sub(second,1,#second-1)+1
    while timer >= 0 do os.sleep(1)
      timer = timer - 1
      gpu.set(xr-26,5,cooldown .. second)
    end
		return lapis_available()
	end
	 return lapis
end

function lapisPreCraft()
  
  return request(lapis_precraft_size)
end

function nuc_control()
	xr, yr = gpu.getResolution()
	nuc = getDevice('reactor_chamber')
	me = getDevice('me_')[1]
	
  is_nuc_work()
	local text = nucWork .. '/' .. #nuc
	gpu.set(xr-26,1,'–†–µ–∞–∫—Ç–æ—Ä–æ–≤ –≤–∫–ª—é—á–µ–Ω–æ: ' .. text)
	text = nucWork - producesEnergy.. '/' .. nucWork
	gpu.set(xr-26,2,'–ò–∑ –Ω–∏—Ö –±–µ–∑ —Ç–æ–ø–ª–∏–≤–∞: ' .. text)
	text = tostring(math.floor(totalEUfromNucs))
	gpu.set(xr-26,3,'EU —Ä–µ–∞–∫—Ç–æ—Ä–æ–≤:      ' .. text)

	local lapis = lapis_available()
  gpu.set(xr-26,5,'–ë–ª–æ–∫–æ–≤ –ª–∞–∑—É—Ä–∏—Ç–∞: ' .. lapis..'    ')
  --–í—ã–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –º–∞–ª–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ª–∞–∑—É—Ä–∏—Ç–∞
  if isWork and lapis < lapis_minimum then
    gpu.set(xr-26,4,'–ú–∞–ª–æ –ª–∞–∑—É—Ä–∏—Ç–∞. –í—ã–∫–ª—é—á–µ–Ω–∏–µ')
    isWork = nuc_off()
    gpu.set(xr-26,4,'–†–µ–∞–∫—Ç–æ—Ä—ã –≤—ã–∫–ª—é—á–µ–Ω—ã        ')
  end
  --–í–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ª–∞–∑—É—Ä–∏—Ç–∞
  if not isWork and lapis >= lapis_recomended then
    gpu.set(xr-26,4,'–í–∫–ª—é—á–µ–Ω–∏–µ...              ')
    isWork = nuc_on()
    gpu.set(xr-26,4,'–†–µ–∞–∫—Ç–æ—Ä—ã –≤–∫–ª—é—á–µ–Ω—ã        ')
  end
  --–î–æ–∫—Ä–∞—Ñ—Ç –ø—Ä–∏ –º–∞–ª–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ª–∞–∑—É—Ä–∏—Ç–∞
  if preCraft and lapis <= lapis_recomended then
    if not inProcess then
      gpu.set(xr-26,4,'–î–æ–∫—Ä–∞—Ñ—Ç –ª–∞–∑—É—Ä–∏—Ç–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤')
      inProcess = true
      local craft=lapisPreCraft()
      isDone = craft.isDone
      isCanceled = craft.isCanceled
    else
      --inProgress = not isDone()
    end

    if isDone() and inProcess then
      gpu.set(xr-26,4,'–î–æ–∫—Ä–∞—Ñ—Ç –ª–∞–∑—É—Ä–∏—Ç–∞ –∑–∞–≤–µ—Ä—à—ë–Ω')
      inProcess = false
    else 
      if inProcess and isCanceled() then
        gpu.set(xr-26,4,'–ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–æ–∫—Ä–∞—Ñ—Ç–∞')
      end
    end
  end
  
	return true
end

local nucMonitoringID=event.timer(59,nuc_control,math.huge)

while true do --absolutely nothing
  event.pull(1.9)
  if keyboard.isKeyDown(keyboard.keys.delete) then  
    event.cancel(nucMonitoringID)
    nucMonitoringID=nil
    break
  end
  return true
end"
9nPhpgrL,elastiflowv1,G0nz0uk,YAML,Tuesday 18th of June 2024 09:01:41 AM CDT,"version: '3'
services:
  es_master1:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.14.0
    restart: unless-stopped
    hostname: es_master1
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 131072
        hard: 131072
      nproc: 8192
      fsize: -1
    network_mode: host
    volumes:
      - /var/lib/elasticsearch:/usr/share/elasticsearch/data
    environment:
      ES_JAVA_OPTS: '-Xms2g -Xmx2g'
      cluster.name: elastiflow
      node.name: es_master1
      bootstrap.memory_lock: 'true'
      network.bind_host: 0.0.0.0
      http.port: 9200
      http.publish_port: 9200
      transport.port: 9300
      transport.publish_port: 9300
      cluster.initial_master_nodes: 'es_master1'
      indices.query.bool.max_clause_count: 8192
      search.max_buckets: 250000
      action.destructive_requires_name: 'true'
      xpack.security.enabled: 'false'
      xpack.security.enrollment.enabled: 'true'

  kibana:
    image: docker.elastic.co/kibana/kibana:8.14.0
    restart: unless-stopped
    hostname: NODE_NAME
    network_mode: host
    environment:
      TELEMETRY_OPTIN: 'false'
      TELEMETRY_ENABLED: 'false'
      SERVER_NAME: 'NODE_NAME'
      SERVER_HOST: '0.0.0.0'
      SERVER_PORT: 5601
      SERVER_MAXPAYLOADBYTES: 8388608
      ELASTICSEARCH_HOSTS: 'http://localhost:9200'
      ELASTICSEARCH_REQUESTTIMEOUT: 132000
      ELASTICSEARCH_SHARDTIMEOUT: 120000
      ELASTICSEARCH_SSL_VERIFICATIONMODE: 'none'
      KIBANA_AUTOCOMPLETETIMEOUT: 3000
      KIBANA_AUTOCOMPLETETERMINATEAFTER: 2500000
      VIS_TYPE_VEGA_ENABLEEXTERNALURLS: 'true'
      XPACK_MAPS_SHOWMAPVISUALIZATIONTYPES: 'true'
      XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY: 'ElastiFlow_0123456789_0123456789_0123456789'

        # ElastiFlow NetObserv Flow
  flow-collector:
    image: elastiflow/flow-collector:6.4.4
    container_name: flow-collector
    restart: 'unless-stopped'
    network_mode: 'host'
    volumes:
      - /etc/elastiflow:/etc/elastiflow
    environment:
      EF_LICENSE_ACCEPTED: 'true'
      #EF_ACCOUNT_ID: ''

      #EF_FLOW_LICENSE_KEY: ''
      #EF_FLOW_LICENSED_UNITS:

      #EF_INSTANCE_NAME: default
      #EF_API_PORT: 8080
      #EF_API_TLS_ENABLE: ''
      #EF_API_TLS_CERT_FILEPATH: ''
      #EF_API_TLS_KEY_FILEPATH: ''
      #EF_API_BASIC_AUTH_ENABLE: 'false'
      #EF_API_BASIC_AUTH_USERNAME: ''
      #EF_API_BASIC_AUTH_PASSWORD: ''

      #EF_LOGGER_LEVEL: 'info'
      #EF_LOGGER_ENCODING: 'json'
      #EF_LOGGER_FILE_LOG_ENABLE: 'false'
      #EF_LOGGER_FILE_LOG_FILENAME: '/var/log/elastiflow/flowcoll/flowcoll.log'
      #EF_LOGGER_FILE_LOG_MAX_SIZE: 100
      #EF_LOGGER_FILE_LOG_MAX_AGE: ''
      #EF_LOGGER_FILE_LOG_MAX_BACKUPS: 4
      #EF_LOGGER_FILE_LOG_COMPRESS: 'false'

      EF_FLOW_SERVER_UDP_IP: '0.0.0.0'
      EF_FLOW_SERVER_UDP_PORT: 9995
      #EF_FLOW_SERVER_UDP_READ_BUFFER_MAX_SIZE: 134217728

      #EF_FLOW_PACKET_STREAM_MAX_SIZE:

      EF_AWS_VPC_FLOW_LOG_S3_ENABLE: 'false'
      #EF_AWS_VPC_FLOW_LOG_S3_BUCKET: ''
      #EF_AWS_VPC_FLOW_LOG_S3_PREFIX: 'AWSLogs'
      #AWS_REGION: ''
      #AWS_ACCESS_KEY_ID: ''
      #AWS_SECRET_ACCESS_KEY: ''
      #EF_AWS_VPC_FLOW_LOG_S3_TLS_ENABLE: 'false'
      #EF_AWS_VPC_FLOW_LOG_S3_TLS_SKIP_VERIFICATION: 'false'
      #EF_AWS_VPC_FLOW_LOG_S3_TLS_CA_CERT_FILEPATH: ''
      #EF_AWS_VPC_FLOW_LOG_S3_TLS_MIN_VERSION: '1.2'

      #EF_INPUT_FLOW_BENCHMARK_ENABLE: 'false'
      #EF_INPUT_FLOW_BENCHMARK_PACKET_FILEPATH: '/etc/elastiflow/benchmark/flow/packets.txt'

      #EF_PROCESSOR_POOL_SIZE:

      #EF_PROCESSOR_DECODE_IPFIX_ENABLE: 'true'
      #EF_PROCESSOR_DECODE_NETFLOW1_ENABLE: 'true'
      #EF_PROCESSOR_DECODE_NETFLOW5_ENABLE: 'true'
      #EF_PROCESSOR_DECODE_NETFLOW6_ENABLE: 'true'
      #EF_PROCESSOR_DECODE_NETFLOW7_ENABLE: 'true'
      #EF_PROCESSOR_DECODE_NETFLOW9_ENABLE: 'true'
      #EF_PROCESSOR_DECODE_SFLOW5_ENABLE: 'true'
      #EF_PROCESSOR_DECODE_SFLOW_FLOWS_ENABLE: 'true'
      #EF_PROCESSOR_DECODE_SFLOW_FLOWS_KEEP_SAMPLES: 'false'
      #EF_PROCESSOR_DECODE_SFLOW_COUNTERS_ENABLE: 'true'
      #EF_PROCESSOR_DECODE_MAX_RECORDS_PER_PACKET: 64

      #EF_PROCESSOR_TRANSLATE_KEEP_IDS: 'default'

      EF_PROCESSOR_ENRICH_APP_ID_ENABLE: 'false'
      #EF_PROCESSOR_ENRICH_APP_ID_PATH: '/etc/elastiflow/app/appid.yml'
      #EF_PROCESSOR_ENRICH_APP_ID_TTL: 7200
      EF_PROCESSOR_ENRICH_APP_IPPORT_ENABLE: 'false'
      #EF_PROCESSOR_ENRICH_APP_IPPORT_PATH: '/etc/elastiflow/app/ipport.yml'
      #EF_PROCESSOR_ENRICH_APP_IPPORT_TTL: 7200
      #EF_PROCESSOR_ENRICH_APP_IPPORT_PRIVATE: 'true'
      #EF_PROCESSOR_ENRICH_APP_IPPORT_PUBLIC: 'false'
      #EF_PROCESSOR_ENRICH_APP_REFRESH_RATE: 15

      #EF_PROCESSOR_ENRICH_IPADDR_TTL: 7200

      EF_PROCESSOR_ENRICH_IPADDR_METADATA_ENABLE: 'false'
      #EF_PROCESSOR_ENRICH_IPADDR_METADATA_USERDEF_PATH: '/etc/elastiflow/metadata/ipaddrs.yml'
      #EF_PROCESSOR_ENRICH_IPADDR_METADATA_REFRESH_RATE: 15

      EF_PROCESSOR_ENRICH_IPADDR_DNS_ENABLE: 'false'
      EF_PROCESSOR_ENRICH_IPADDR_DNS_NAMESERVER_IP: ''
      EF_PROCESSOR_ENRICH_IPADDR_DNS_NAMESERVER_TIMEOUT: 3000
      #EF_PROCESSOR_ENRICH_IPADDR_DNS_RESOLVE_PRIVATE: 'true'
      #EF_PROCESSOR_ENRICH_IPADDR_DNS_RESOLVE_PUBLIC: 'true'
      #EF_PROCESSOR_ENRICH_IPADDR_DNS_USERDEF_PATH: '/etc/elastiflow/hostname/user_defined.yml'
      #EF_PROCESSOR_ENRICH_IPADDR_DNS_USERDEF_REFRESH_RATE: 15
      #EF_PROCESSOR_ENRICH_IPADDR_DNS_INCLEXCL_PATH: '/etc/elastiflow/hostname/incl_excl.yml'
      #EF_PROCESSOR_ENRICH_IPADDR_DNS_INCLEXCL_REFRESH_RATE: 15

      EF_PROCESSOR_ENRICH_IPADDR_MAXMIND_ASN_ENABLE: 'false'
      #EF_PROCESSOR_ENRICH_IPADDR_MAXMIND_ASN_PATH: '/etc/elastiflow/maxmind/GeoLite2-ASN.mmdb'

      EF_PROCESSOR_ENRICH_IPADDR_MAXMIND_GEOIP_ENABLE: 'false'
      #EF_PROCESSOR_ENRICH_IPADDR_MAXMIND_GEOIP_PATH: '/etc/elastiflow/maxmind/GeoLite2-City.mmdb'
      #EF_PROCESSOR_ENRICH_IPADDR_MAXMIND_GEOIP_VALUES: 'city,country,country_code,location,timezone'
      #EF_PROCESSOR_ENRICH_IPADDR_MAXMIND_GEOIP_LANG: 'en'
      #EF_PROCESSOR_ENRICH_IPADDR_MAXMIND_GEOIP_INCLEXCL_PATH: '/etc/elastiflow/maxmind/incl_excl.yml'
      #EF_PROCESSOR_ENRICH_IPADDR_MAXMIND_GEOIP_INCLEXCL_REFRESH_RATE: 15
      #EF_PROCESSOR_ENRICH_ASN_PREF: 'lookup'

      #EF_PROCESSOR_ENRICH_NETIF_TTL: 7200

      EF_PROCESSOR_ENRICH_NETIF_METADATA_ENABLE: 'false'
      #EF_PROCESSOR_ENRICH_NETIF_METADATA_USERDEF_PATH: '/etc/elastiflow/metadata/ipaddrs.yml'
      #EF_PROCESSOR_ENRICH_NETIF_METADATA_REFRESH_RATE: 15

      EF_PROCESSOR_ENRICH_NETIF_FLOW_OPTIONS_ENABLE: 'true'

      EF_PROCESSOR_ENRICH_NETIF_SNMP_ENABLE: 'false'
      #EF_PROCESSOR_ENRICH_NETIF_SNMP_PORT: 161
      #EF_PROCESSOR_ENRICH_NETIF_SNMP_VERSION: 2
      EF_PROCESSOR_ENRICH_NETIF_SNMP_COMMUNITIES: 'public'
      #EF_PROCESSOR_ENRICH_NETIF_SNMP_V3_USERNAME: ''
      #EF_PROCESSOR_ENRICH_NETIF_SNMP_V3_AUTHENTICATION_PROTOCOL: 'noauth'
      #EF_PROCESSOR_ENRICH_NETIF_SNMP_V3_AUTHENTICATION_PASSPHRASE: ''
      #EF_PROCESSOR_ENRICH_NETIF_SNMP_V3_PRIVACY_PROTOCOL: 'nopriv'
      #EF_PROCESSOR_ENRICH_NETIF_SNMP_V3_PRIVACY_PASSPHRASE: ''
      #EF_PROCESSOR_ENRICH_NETIF_SNMP_TIMEOUT: 2
      #EF_PROCESSOR_ENRICH_NETIF_SNMP_RETRIES: 1

      #EF_PROCESSOR_ENRICH_TOTALS_IF_NO_DELTAS: 'false'

      #EF_PROCESSOR_ENRICH_SAMPLERATE_CACHE_SIZE: 32768
      #EF_PROCESSOR_ENRICH_SAMPLERATE_USERDEF_ENABLE: 'false'
      #EF_PROCESSOR_ENRICH_SAMPLERATE_USERDEF_PATH: '/etc/elastiflow/settings/sample_rate.yml'
      #EF_PROCESSOR_ENRICH_SAMPLERATE_USERDEF_OVERRIDE: 'false'

      #EF_PROCESSOR_ENRICH_COMMUNITYID_ENABLE: 'true'
      #EF_PROCESSOR_ENRICH_COMMUNITYID_SEED: 0
      #EF_PROCESSOR_ENRICH_CONVERSATIONID_ENABLE: 'true'
      #EF_PROCESSOR_ENRICH_CONVERSATIONID_SEED: 0

      #EF_PROCESSOR_ENRICH_JOIN_ASN: 'true'
      #EF_PROCESSOR_ENRICH_JOIN_GEOIP: 'true'
      #EF_PROCESSOR_ENRICH_JOIN_SEC: 'true'
      #EF_PROCESSOR_ENRICH_JOIN_NETATTR: 'true'
      #EF_PROCESSOR_ENRICH_JOIN_SUBNETATTR: 'true'

      #EF_PROCESSOR_DURATION_PRECISION: 'ms'
      #EF_PROCESSOR_TIMESTAMP_PRECISION: 'ms'
      #EF_PROCESSOR_PERCENT_NORM: 100
      #EF_PROCESSOR_EXPAND_CLISRV: 'true'
      #EF_PROCESSOR_EXPAND_CLISRV_NO_L4_PORTS: 'true'
      #EF_PROCESSOR_KEEP_CPU_TICKS: 'false'

      #EF_PROCESSOR_DROP_FIELDS: ''

      #EF_PROCESSOR_IFA_ENABLE: 'false'
      #EF_PROCESSOR_IFA_WORKER_SIZE: 0

      # stdout
      #EF_OUTPUT_STDOUT_ENABLE: 'false'
      #EF_OUTPUT_STDOUT_FORMAT: 'json_pretty'

      # monitor
      #EF_OUTPUT_MONITOR_ENABLE: 'false'
      #EF_OUTPUT_MONITOR_INTERVAL: 300

      # Elasticsearch
      EF_OUTPUT_ELASTICSEARCH_ENABLE: 'false'
      EF_OUTPUT_ELASTICSEARCH_ECS_ENABLE: 'false'
      #EF_OUTPUT_ELASTICSEARCH_BATCH_DEADLINE: 2000
      #EF_OUTPUT_ELASTICSEARCH_BATCH_MAX_BYTES: 8388608
      #EF_OUTPUT_ELASTICSEARCH_TIMESTAMP_SOURCE: 'collect'
      #EF_OUTPUT_ELASTICSEARCH_INDEX_PERIOD: 'rollover'
      #EF_OUTPUT_ELASTICSEARCH_TSDS_ENABLE: 'false'
      #EF_OUTPUT_ELASTICSEARCH_INDEX_SUFFIX: ''
      #EF_OUTPUT_ELASTICSEARCH_DROP_FIELDS: ''
      #EF_OUTPUT_ELASTICSEARCH_ALLOWED_RECORD_TYPES: 'as_path_hop,flow_option,flow,telemetry'

      #EF_OUTPUT_ELASTICSEARCH_INDEX_TEMPLATE_ENABLE: 'true'
      #EF_OUTPUT_ELASTICSEARCH_INDEX_TEMPLATE_OVERWRITE: 'true'
      EF_OUTPUT_ELASTICSEARCH_INDEX_TEMPLATE_SHARDS: 1
      EF_OUTPUT_ELASTICSEARCH_INDEX_TEMPLATE_REPLICAS: 0
      #EF_OUTPUT_ELASTICSEARCH_INDEX_TEMPLATE_REFRESH_INTERVAL: '10s'
      #EF_OUTPUT_ELASTICSEARCH_INDEX_TEMPLATE_CODEC: 'best_compression'
      #EF_OUTPUT_ELASTICSEARCH_INDEX_TEMPLATE_ILM_LIFECYCLE: 'elastiflow'
      #EF_OUTPUT_ELASTICSEARCH_INDEX_TEMPLATE_PIPELINE_DEFAULT: '_none'
      #EF_OUTPUT_ELASTICSEARCH_INDEX_TEMPLATE_PIPELINE_FINAL: '_none'

      # A comma separated list of Elasticsearch nodes to use. DO NOT include ""http://"" or ""https://""
      EF_OUTPUT_ELASTICSEARCH_ADDRESSES: '127.0.0.1:9200'
      EF_OUTPUT_ELASTICSEARCH_USERNAME: 'elastic'
      EF_OUTPUT_ELASTICSEARCH_PASSWORD: 'changeme'
      #EF_OUTPUT_ELASTICSEARCH_CLOUD_ID: ''
      #EF_OUTPUT_ELASTICSEARCH_API_KEY: ''
      #EF_OUTPUT_ELASTICSEARCH_CLIENT_CA_CERT_FILEPATH: ''
      #EF_OUTPUT_ELASTICSEARCH_CLIENT_CERT_FILEPATH: ''
      #EF_OUTPUT_ELASTICSEARCH_CLIENT_KEY_FILEPATH: ''

      EF_OUTPUT_ELASTICSEARCH_TLS_ENABLE: 'false'
      EF_OUTPUT_ELASTICSEARCH_TLS_SKIP_VERIFICATION: 'false'
      EF_OUTPUT_ELASTICSEARCH_TLS_CA_CERT_FILEPATH: ''

      #EF_OUTPUT_ELASTICSEARCH_RETRY_ENABLE: 'true'
      #EF_OUTPUT_ELASTICSEARCH_RETRY_ON_TIMEOUT_ENABLE: 'true'
      #EF_OUTPUT_ELASTICSEARCH_MAX_RETRIES: 3
      #EF_OUTPUT_ELASTICSEARCH_RETRY_BACKOFF: 1000

      # OpenSearch
      EF_OUTPUT_OPENSEARCH_ENABLE: 'false'
      EF_OUTPUT_OPENSEARCH_ECS_ENABLE: 'false'
      #EF_OUTPUT_OPENSEARCH_BATCH_DEADLINE: 2000
      #EF_OUTPUT_OPENSEARCH_BATCH_MAX_BYTES: 8388608
      #EF_OUTPUT_OPENSEARCH_TIMESTAMP_SOURCE: 'collect'
      #EF_OUTPUT_OPENSEARCH_INDEX_PERIOD: 'daily'
      #EF_OUTPUT_OPENSEARCH_INDEX_SUFFIX: ''
      #EF_OUTPUT_OPENSEARCH_DROP_FIELDS: ''
      #EF_OUTPUT_OPENSEARCH_ALLOWED_RECORD_TYPES: 'as_path_hop,flow_option,flow,telemetry'

      #EF_OUTPUT_OPENSEARCH_INDEX_TEMPLATE_ENABLE: 'true'
      #EF_OUTPUT_OPENSEARCH_INDEX_TEMPLATE_OVERWRITE: 'true'
      EF_OUTPUT_OPENSEARCH_INDEX_TEMPLATE_SHARDS: 1
      EF_OUTPUT_OPENSEARCH_INDEX_TEMPLATE_REPLICAS: 0
      #EF_OUTPUT_OPENSEARCH_INDEX_TEMPLATE_REFRESH_INTERVAL: '10s'
      #EF_OUTPUT_OPENSEARCH_INDEX_TEMPLATE_CODEC: 'best_compression'
      #EF_OUTPUT_OPENSEARCH_INDEX_TEMPLATE_ISM_POLICY: 'elastiflow'
      #EF_OUTPUT_OPENSEARCH_INDEX_TEMPLATE_PIPELINE_DEFAULT: '_none'
      #EF_OUTPUT_OPENSEARCH_INDEX_TEMPLATE_PIPELINE_FINAL: '_none'

      # A comma separated list of OpenSearch nodes to use. DO NOT include ""http://"" or ""https://""
      EF_OUTPUT_OPENSEARCH_ADDRESSES: '127.0.0.1:9200'
      EF_OUTPUT_OPENSEARCH_USERNAME: 'admin'
      EF_OUTPUT_OPENSEARCH_PASSWORD: 'admin'
      #EF_OUTPUT_OPENSEARCH_CLIENT_CA_CERT_FILEPATH: ''
      #EF_OUTPUT_OPENSEARCH_CLIENT_CERT_FILEPATH: ''
      #EF_OUTPUT_OPENSEARCH_CLIENT_KEY_FILEPATH: ''

      EF_OUTPUT_OPENSEARCH_TLS_ENABLE: 'false'
      EF_OUTPUT_OPENSEARCH_TLS_SKIP_VERIFICATION: 'false'
      EF_OUTPUT_OPENSEARCH_TLS_CA_CERT_FILEPATH: ''

      #EF_OUTPUT_OPENSEARCH_RETRY_ENABLE: 'true'
      #EF_OUTPUT_OPENSEARCH_RETRY_ON_TIMEOUT_ENABLE: 'true'
      #EF_OUTPUT_OPENSEARCH_MAX_RETRIES: 3
      #EF_OUTPUT_OPENSEARCH_RETRY_BACKOFF: 1000

      # Splunk
      EF_OUTPUT_SPLUNK_HEC_ENABLE: 'false'
      #EF_OUTPUT_SPLUNK_HEC_CIM_ENABLE: 'false'
      EF_OUTPUT_SPLUNK_HEC_ADDRESSES: '127.0.0.1:8088'
      EF_OUTPUT_SPLUNK_HEC_TOKEN: ''
      #EF_OUTPUT_SPLUNK_HEC_BATCH_MAX_BYTES: 8388608
      #EF_OUTPUT_SPLUNK_HEC_BATCH_DEADLINE: 2000
      #EF_OUTPUT_SPLUNK_HEC_TLS_ENABLE: 'true'
      #EF_OUTPUT_SPLUNK_HEC_TLS_SKIP_VERIFICATION: 'false'
      #EF_OUTPUT_SPLUNK_HEC_TLS_CA_CERT_FILEPATH: ''
      #EF_OUTPUT_SPLUNK_HEC_DROP_FIELDS: ''

      # Kafka
      EF_OUTPUT_KAFKA_ENABLE: 'false'
      EF_OUTPUT_KAFKA_BROKERS: ''
      #EF_OUTPUT_KAFKA_VERSION: '1.0.0'
      #EF_OUTPUT_KAFKA_TOPIC: 'elastiflow-flow-codex'
      #EF_OUTPUT_KAFKA_PARTITION_KEY: 'flow.export.ip.addr'
      #EF_OUTPUT_KAFKA_CLIENT_ID: 'elastiflow-flowcoll'
      #EF_OUTPUT_KAFKA_RACK_ID: ''
      #EF_OUTPUT_KAFKA_TIMEOUT: 30
      #EF_OUTPUT_KAFKA_DROP_FIELDS: ''
      #EF_OUTPUT_KAFKA_ALLOWED_RECORD_TYPES: 'as_path_hop,flow_option,flow,telemetry'
      #EF_OUTPUT_KAFKA_FLAT_RECORD_ENABLE: 'true'

      EF_OUTPUT_KAFKA_SASL_ENABLE: 'false'
      #EF_OUTPUT_KAFKA_SASL_USERNAME: ''
      #EF_OUTPUT_KAFKA_SASL_PASSWORD: ''

      #EF_OUTPUT_KAFKA_TLS_ENABLE: 'false'
      #EF_OUTPUT_KAFKA_TLS_CA_CERT_FILEPATH: ''
      #EF_OUTPUT_KAFKA_TLS_CERT_FILEPATH: ''
      #EF_OUTPUT_KAFKA_TLS_KEY_FILEPATH: ''
      #EF_OUTPUT_KAFKA_TLS_SKIP_VERIFICATION: 'false'

      #EF_OUTPUT_KAFKA_PRODUCER_MAX_MESSAGE_BYTES: 1000000
      #EF_OUTPUT_KAFKA_PRODUCER_REQUIRED_ACKS: 1
      #EF_OUTPUT_KAFKA_PRODUCER_TIMEOUT: 10
      #EF_OUTPUT_KAFKA_PRODUCER_COMPRESSION: 3
      #EF_OUTPUT_KAFKA_PRODUCER_COMPRESSION_LEVEL: -1000
      #EF_OUTPUT_KAFKA_PRODUCER_FLUSH_BYTES: 1000000
      #EF_OUTPUT_KAFKA_PRODUCER_FLUSH_MESSAGES: 1024
      #EF_OUTPUT_KAFKA_PRODUCER_FLUSH_FREQUENCY: 1000
      #EF_OUTPUT_KAFKA_PRODUCER_FLUSH_MAX_MESSAGES: 0
      #EF_OUTPUT_KAFKA_PRODUCER_RETRY_MAX: 3
      #EF_OUTPUT_KAFKA_PRODUCER_RETRY_BACKOFF: 100

      # Cribl
      EF_OUTPUT_CRIBL_ENABLE: 'false'
      EF_OUTPUT_CRIBL_ADDRESSES: '127.0.0.1:10080'
      EF_OUTPUT_CRIBL_TOKEN: ''
      #EF_OUTPUT_CRIBL_BATCH_DEADLINE: 2000
      #EF_OUTPUT_CRIBL_BATCH_MAX_BYTES: 8388608
      #EF_OUTPUT_CRIBL_TLS_ENABLE: 'false'
      #EF_OUTPUT_CRIBL_TLS_SKIP_VERIFICATION: 'false'
      #EF_OUTPUT_CRIBL_TLS_CA_CERT_FILEPATH: ''
      #EF_OUTPUT_CRIBL_DROP_FIELDS: ''

      # Generic HTTP
      EF_OUTPUT_GENERIC_HTTP_ENABLE: 'false'
      EF_OUTPUT_GENERIC_HTTP_ECS_ENABLE: 'false'
      #EF_OUTPUT_GENERIC_HTTP_BATCH_DEADLINE: 2000
      #EF_OUTPUT_GENERIC_HTTP_BATCH_MAX_BYTES: 8388608
      EF_OUTPUT_GENERIC_HTTP_ADDRESSES: ''
      #EF_OUTPUT_GENERIC_HTTP_USERNAME: ''
      #EF_OUTPUT_GENERIC_HTTP_PASSWORD: ''
      #EF_OUTPUT_GENERIC_HTTP_TLS_ENABLE: 'false'
      #EF_OUTPUT_GENERIC_HTTP_TLS_SKIP_VERIFICATION: 'false'
      #EF_OUTPUT_GENERIC_HTTP_TLS_CA_CERT_FILEPATH: ''
      #EF_OUTPUT_GENERIC_HTTP_DROP_FIELDS: ''
      #EF_OUTPUT_GENERIC_HTTP_TIMESTAMP_SOURCE: 'collect'"
