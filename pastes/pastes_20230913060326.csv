id,title,username,language,date,content
Xea3cnd2,IS Lab Chinese Theorem,thisisnotabin,C++,Wednesday 13th of September 2023 12:10:41 AM CDT,"#include<bits/stdc++.h>
using namespace std;

int main()
{
    int a[10], n[10], m[10], mi[10], i, size, M = 1, Y = 0;
    cout << ""Enter the size of array :"";
    cin >> size;

    for (i = 0; i < size; i++)
    {
        cout << ""The value of a"" << i << endl;
        cin >> a[i];
    }
    
    for (i = 0; i < size; i++)
    {
        cout << ""Enter the values of n""<<i<<"": "";
        cin >> n[i];
    }

    for (i = 0; i < size; i++)
    {
        M = M * n[i];
    }
    cout << ""\nM = "" << M;
    for (i = 0; i < size; i++)
    {
        m[i] = M / n[i];
        cout << ""\nm"" << i << ""= "" << m[i];
    }

    for (i = 0; i < size; i++)
    {
        mi[i] = m[i] % n[i];
        cout << ""\nm"" << i << "" inverse = "" << mi[i];
    }

    for (i = 0; i < size; i++)
    {
        Y = Y + (a[i] * m[i] * mi[i]);
    }
    cout << ""\n\nY = "" << Y;
    Y = Y % M;
    cout << ""\n\nChinese Remainder(Y MOD M:"" << Y << endl;
    for (int i = 0; i < size; i++)
    {
        cout << a[i] << ""(mod)"" << n[i] << ""="" << Y << endl;
    }
}"
5uVZ8f7f,IS Lab Euclidian,thisisnotabin,C++,Wednesday 13th of September 2023 12:08:23 AM CDT,"#include <iostream>
using namespace std;

class Euclidean
{
public:
    int a, b, q, r, t1 = 0, t2 = 1, t = 0, s1 = 1, s2 = 0, s = 0, a1, b1;

    void input()
    {
        cout << ""Enter the value of a and b"" << endl;
        cin >> a >> b;
        if (b > a)
            swap(a, b);
        a1 = a;
        b1 = b;
    }

    void EAlgo()
    {
        while (r > 0)
        {
            q = a / b;
            r = a % b;
            t = t1 - (t2 * q);
            s = s1 - (s2 * q);
            a = b;
            b = r;
            t1 = t2;
            t2 = t;
            s1 = s2;
            s2 = s;
        }
    }

    void display()
    {
        cout << ""The value of x is: "" << s1 << endl;
        cout << ""The value of y is: "" << t1 << endl;

        int gcd = 0;
        gcd = a1 * s1 + b1 * t1;
        cout << ""The value GCD is: "" << gcd << endl;
    }
};

int main()
{

    Euclidean e;
    e.input();
    e.EAlgo();
    e.display();

    return 0;
}"
71ZsHk4C,Scammers and spammers [9-3/2023],bombaires,HTML,Tuesday 12th of September 2023 11:30:59 PM CDT,"<a href=""mailto:hacksp007@dnmx.org"">hacksp007@dnmx.org</a>
<a href=""mailto:scottbowers44@yahoo.com"">scottbowers44@yahoo.com</a>
<a href=""mailto:A340388K@gmail.com"">A340388K@gmail.com</a>
<a href=""mailto:A340388K+24612@gmail.com"">A340388K+24612@gmail.com</a>
<a href=""mailto:A340388K+16213@gmail.com"">A340388K+16213@gmail.com</a>
<a href=""mailto:A340388K+13501@gmail.com"">A340388K+13501@gmail.com</a>
<a href=""mailto:A340388K+15350@gmail.com"">A340388K+15350@gmail.com</a>
<a href=""mailto:A340388K+11026@gmail.com"">A340388K+11026@gmail.com</a>
<a href=""mailto:A340388K+10325@gmail.com"">A340388K+10325@gmail.com</a>
<a href=""mailto:A340388K+31626@gmail.com"">A340388K+31626@gmail.com</a>
<a href=""mailto:A340388K+1163@gmail.com"">A340388K+1163@gmail.com</a>
<a href=""mailto:A340388K+11239@gmail.com"">A340388K+11239@gmail.com</a>
<a href=""mailto:A340388K+8840@gmail.com"">A340388K+8840@gmail.com</a>
<a href=""mailto:A340388K+6254@gmail.com"">A340388K+6254@gmail.com</a>
<a href=""mailto:A340388K+10891@gmail.com"">A340388K+10891@gmail.com</a>
<a href=""mailto:A340388K+26616@gmail.com"">A340388K+26616@gmail.com</a>
<a href=""mailto:A340388K+3768@gmail.com"">A340388K+3768@gmail.com</a>
<a href=""mailto:A340388K+27906@gmail.com"">A340388K+27906@gmail.com</a>
<a href=""mailto:A340388K+8974@gmail.com"">A340388K+8974@gmail.com</a>
<a href=""mailto:A340388K+17794@gmail.com"">A340388K+17794@gmail.com</a>
<a href=""mailto:A340388K+31587@gmail.com"">A340388K+31587@gmail.com</a>
<a href=""mailto:A340388K+15030@gmail.com"">A340388K+15030@gmail.com</a>
<a href=""mailto:A340388K+8758@gmail.com"">A340388K+8758@gmail.com</a>
<a href=""mailto:A340388K+5701@gmail.com"">A340388K+5701@gmail.com</a>
<a href=""mailto:A340388K+8824@gmail.com"">A340388K+8824@gmail.com</a>
<a href=""mailto:A340388K+10917@gmail.com"">A340388K+10917@gmail.com</a>
<a href=""mailto:A340388K+9054@gmail.com"">A340388K+9054@gmail.com</a>
<a href=""mailto:A340388K+2724@gmail.com"">A340388K+2724@gmail.com</a>
<a href=""mailto:A340388K+32290@gmail.com"">A340388K+32290@gmail.com</a>
<a href=""mailto:A340388K+23173@gmail.com"">A340388K+23173@gmail.com</a>
<a href=""mailto:A340388K+29779@gmail.com"">A340388K+29779@gmail.com</a>
<a href=""mailto:A340388K+250@gmail.com"">A340388K+250@gmail.com</a>
<a href=""mailto:A340388K+12827@gmail.com"">A340388K+12827@gmail.com</a>
<a href=""mailto:A340388K+5341@gmail.com"">A340388K+5341@gmail.com</a>
<a href=""mailto:A340388K+6871@gmail.com"">A340388K+6871@gmail.com</a>
<a href=""mailto:A340388K+9498@gmail.com"">A340388K+9498@gmail.com</a>
<a href=""mailto:A340388K+6561@gmail.com"">A340388K+6561@gmail.com</a>
<a href=""mailto:A340388K+23054@gmail.com"">A340388K+23054@gmail.com</a>
<a href=""mailto:A340388K+7631@gmail.com"">A340388K+7631@gmail.com</a>
<a href=""mailto:A340388K+360@gmail.com"">A340388K+360@gmail.com</a>
<a href=""mailto:A340388K+23715@gmail.com"">A340388K+23715@gmail.com</a>
<a href=""mailto:A340388K+25610@gmail.com"">A340388K+25610@gmail.com</a>
<a href=""mailto:A340388K+927@gmail.com"">A340388K+927@gmail.com</a>
<a href=""mailto:A340388K+5816@gmail.com"">A340388K+5816@gmail.com</a>
<a href=""mailto:A340388K+13729@gmail.com"">A340388K+13729@gmail.com</a>
<a href=""mailto:A340388K+19042@gmail.com"">A340388K+19042@gmail.com</a>
<a href=""mailto:A340388K+6403@gmail.com"">A340388K+6403@gmail.com</a>
<a href=""mailto:A340388K+26673@gmail.com"">A340388K+26673@gmail.com</a>
<a href=""mailto:A340388K+17199@gmail.com"">A340388K+17199@gmail.com</a>
<a href=""mailto:A340388K+29594@gmail.com"">A340388K+29594@gmail.com</a>
<a href=""mailto:A340388K+10444@gmail.com"">A340388K+10444@gmail.com</a>
<a href=""mailto:A340388K+8182@gmail.com"">A340388K+8182@gmail.com</a>
<a href=""mailto:A340388K+24600@gmail.com"">A340388K+24600@gmail.com</a>
<a href=""mailto:A340388K+1335@gmail.com"">A340388K+1335@gmail.com</a>
<a href=""mailto:A340388K+13568@gmail.com"">A340388K+13568@gmail.com</a>
<a href=""mailto:A340388K+13856@gmail.com"">A340388K+13856@gmail.com</a>
<a href=""mailto:A340388K+17308@gmail.com"">A340388K+17308@gmail.com</a>
<a href=""mailto:A340388K+26993@gmail.com"">A340388K+26993@gmail.com</a>
<a href=""mailto:A340388K+14890@gmail.com"">A340388K+14890@gmail.com</a>
<a href=""mailto:A340388K+12759@gmail.com"">A340388K+12759@gmail.com</a>
<a href=""mailto:A340388K+670@gmail.com"">A340388K+670@gmail.com</a>
<a href=""mailto:A340388K+23385@gmail.com"">A340388K+23385@gmail.com</a>
<a href=""mailto:A340388K+24753@gmail.com"">A340388K+24753@gmail.com</a>
<a href=""mailto:A340388K+9465@gmail.com"">A340388K+9465@gmail.com</a>
<a href=""mailto:A340388K+21894@gmail.com"">A340388K+21894@gmail.com</a>
<a href=""mailto:A340388K+32385@gmail.com"">A340388K+32385@gmail.com</a>
<a href=""mailto:A340388K+20368@gmail.com"">A340388K+20368@gmail.com</a>
<a href=""mailto:A340388K+25922@gmail.com"">A340388K+25922@gmail.com</a>
<a href=""mailto:A340388K+30405@gmail.com"">A340388K+30405@gmail.com</a>
<a href=""mailto:A340388K+2720@gmail.com"">A340388K+2720@gmail.com</a>
<a href=""mailto:A340388K+12066@gmail.com"">A340388K+12066@gmail.com</a>
<a href=""mailto:A340388K+15528@gmail.com"">A340388K+15528@gmail.com</a>
<a href=""mailto:A340388K+2334@gmail.com"">A340388K+2334@gmail.com</a>
<a href=""mailto:A340388K+18876@gmail.com"">A340388K+18876@gmail.com</a>
<a href=""mailto:A340388K+27872@gmail.com"">A340388K+27872@gmail.com</a>
<a href=""mailto:A340388K+31823@gmail.com"">A340388K+31823@gmail.com</a>
<a href=""mailto:A340388K+11996@gmail.com"">A340388K+11996@gmail.com</a>
<a href=""mailto:A340388K+29776@gmail.com"">A340388K+29776@gmail.com</a>
<a href=""mailto:A340388K+3617@gmail.com"">A340388K+3617@gmail.com</a>
<a href=""mailto:A340388K+30041@gmail.com"">A340388K+30041@gmail.com</a>
<a href=""mailto:A340388K+32569@gmail.com"">A340388K+32569@gmail.com</a>
<a href=""mailto:A340388K+32757@gmail.com"">A340388K+32757@gmail.com</a>
<a href=""mailto:A340388K+28455@gmail.com"">A340388K+28455@gmail.com</a>
<a href=""mailto:A340388K+29582@gmail.com"">A340388K+29582@gmail.com</a>
<a href=""mailto:A340388K+15891@gmail.com"">A340388K+15891@gmail.com</a>
<a href=""mailto:A340388K+4598@gmail.com"">A340388K+4598@gmail.com</a>
<a href=""mailto:A340388K+18277@gmail.com"">A340388K+18277@gmail.com</a>
<a href=""mailto:A340388K+22364@gmail.com"">A340388K+22364@gmail.com</a>
<a href=""mailto:A340388K+27979@gmail.com"">A340388K+27979@gmail.com</a>
<a href=""mailto:A340388K+12512@gmail.com"">A340388K+12512@gmail.com</a>
<a href=""mailto:A340388K+10697@gmail.com"">A340388K+10697@gmail.com</a>
<a href=""mailto:A340388K+22926@gmail.com"">A340388K+22926@gmail.com</a>
<a href=""mailto:A340388K+19539@gmail.com"">A340388K+19539@gmail.com</a>
<a href=""mailto:A340388K+29570@gmail.com"">A340388K+29570@gmail.com</a>
<a href=""mailto:A340388K+21539@gmail.com"">A340388K+21539@gmail.com</a>
<a href=""mailto:A340388K+10604@gmail.com"">A340388K+10604@gmail.com</a>
<a href=""mailto:A340388K+20952@gmail.com"">A340388K+20952@gmail.com</a>
<a href=""mailto:A340388K+30154@gmail.com"">A340388K+30154@gmail.com</a>
<a href=""mailto:A340388K+19450@gmail.com"">A340388K+19450@gmail.com</a>
<a href=""mailto:A340388K+19069@gmail.com"">A340388K+19069@gmail.com</a>
<a href=""mailto:A340388K+796@gmail.com"">A340388K+796@gmail.com</a>
<a href=""mailto:A340388K+22985@gmail.com"">A340388K+22985@gmail.com</a>
<a href=""mailto:A340388K+1935@gmail.com"">A340388K+1935@gmail.com</a>"
m8WDx6bc,Untitled,Derga,C++,Tuesday 12th of September 2023 10:53:09 PM CDT,"#include <algorithm>
#include <iostream>
#include <stack>
#include <vector>

using namespace std;

int main() {
	int tests_count;
	cin >> tests_count;
	for (int i = 0; i < tests_count; ++i)
	{
		int nums_count;
		cin >> nums_count;
		vector< int > nums(nums_count);
		for (int& num : nums)
		{
			cin >> num;
		}

		int l = 0;
		int r = 0;
		stack<int> storage;
		while (l < nums.size()) {
			int min_idx = min_element(begin(nums) + r, end(nums)) - begin(nums);
			
			for (int idx = 0; idx < min_idx; ++idx)
			{
				int cur_number = nums[idx];
				if (storage.empty() || storage.top() >= cur_number)
				{
					storage.push(cur_number);
					continue;
				}
				cout << 0 << '\n';
				break;
			}

			l = min_idx + 1;
		}

	}







}"
GA920PCD,Count distinct elements in every window,jayati,C++,Tuesday 12th of September 2023 10:34:19 PM CDT,"//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;



// } Driver Code Ends

class Solution{
  public:
    vector <int> countDistinct (int A[], int n, int k)
    {
        
        vector<int> v;
        int K=k;
        int N=n;
    unordered_map<int, int> hm;
 
    
    int dist_count = 0;

    for (int i = 0; i < K; i++) {
        if (hm[A[i]] == 0) {
            dist_count++;
        }
       
        hm[A[i]] += 1;
    }
 

     v.push_back(dist_count);
 
    
    for (int i = K; i < N; i++) {
       
        if (hm[A[i - K]] == 1) {
            dist_count--;
        }
        
        hm[A[i - K]] -= 1;
 
        
 
        if (hm[A[i]] == 0) {
            dist_count++;
        }
        hm[A[i]] += 1;
 
       
       v.push_back(dist_count);
    }
    return v;
    }
};

//{ Driver Code Starts.
int main()
{
    int t;
    cin >> t;
    while (t--)
    {

        int n, k;
        cin >> n >> k;
        int a[n];
        for (int i = 0; i < n; i++) 
        	cin >> a[i];
        Solution obj;
        vector <int> result = obj.countDistinct(a, n, k);
        for (int i : result) 
        	cout << i << "" "";
        cout << endl;
    }
    return 0;
}
// } Driver Code Ends"
2RxbM040,Digital Clock with React,sifurr,JavaScript,Tuesday 12th of September 2023 10:33:07 PM CDT,"// Please include this Clock component as a child component inside the App component 

import { useState, useEffect } from ""react"";

function Clock() {
  const [options, setOptions] = useState("""");
  const [localTime, setLocalTime] = useState(new Date());

  useEffect(() => {
    const timer = setInterval(() => {
      setLocalTime(new Date());
    }, 1000);

    return () => clearInterval(timer);
  }, []);

  const handleOptionChange = (event) => {
    const optionFromSelect = event.target.value;
    setOptions(optionFromSelect);
  };

  return (
    <div>
      <h1>Let's see the colorful Time</h1>
      <p>
        Pick a color:
        <select value={options} onChange={handleOptionChange}>
          <option
            value={""lightcoral""}
            className={options === ""lightcoral"" ? ""lightcoral"" : """"}
          >
            lightcoral
          </option>
          <option
            value={""midnightblue""}
            className={options === ""midnightblue"" ? ""midnightblue"" : """"}
          >
            midnightblue
          </option>
          <option
            value={""rebeccapurple""}
            className={options === ""rebeccapurple"" ? ""rebeccapurple"" : """"}
          >
            rebeccapurple
          </option>
        </select>
      </p>
      <h2 style={{ color: options }}>{localTime.toLocaleTimeString()}</h2>
    </div>
  );
}

export default Clock;
"
10M54cMj,Untitled,samipote,JavaScript,Tuesday 12th of September 2023 10:29:42 PM CDT,"app.use('/proxy/', async (req, res) => {
  // Construct the target URL by replacing the proxy prefix
  const targetURL = decodeURIComponent(req.originalUrl.replace('/proxy/', ''));
  console.log(`Target URL: ${targetURL}`);

  // Get the domain of the target URL
  const domain = new URL(targetURL).hostname;

  // Parse the target URL
  const parsedURL = new URL(targetURL);

  // Get the file extension of the target URL
  const fileExtension = path.extname(parsedURL.pathname).toLowerCase();

  const TARGET_DURATION_PREFIX = ""#EXT-X-TARGETDURATION:"";

  // Check if the file extension is m3u8 or mpd
  if (fileExtension === '.m3u8' || fileExtension === '.mpd') {
    try {
			if (shouldNotProxy(domain)) {
  try {
    const m3u8Response = await fetch(targetURL, {
      headers: getHeadersForDomain(domain),
    });
    if (m3u8Response.headers.has('set-cookie')) {
      cookieStore[domain] = m3u8Response.headers.get('set-cookie');
    }

    const m3u8Content = await m3u8Response.text();
    const baseURL = new URL(targetURL);
      let cacheDuration = 0;
      const lines = m3u8Content.split('\n');
      for (const line of lines) {
        if (line.startsWith(TARGET_DURATION_PREFIX)) {
          cacheDuration = parseInt(line.replace(TARGET_DURATION_PREFIX, ''), 10);
          break;
        }
    // Convert relative paths to absolute
    const updatedContent = m3u8Content.split('\n').map(line => {
      if (line.endsWith('.ts') || line.includes('.ts?')) {  // Check if the line is a path with .ts extension
        if (!line.startsWith('http')) {  // If the path is relative
					const pathR = new URL(line, baseURL).href
          return getPlaylistURL(pathR);  // Convert it to absolute
        }
      }
      return line;  // Return the line unchanged
    }).join('\n');

    res.setHeader('Content-Type', 'application/vnd.apple.mpegurl');
    res.setHeader('Access-Control-Allow-Origin', '*');
		res.setHeader('Cache-Control', `public, max-age=${cacheDuration}`);
    res.send(updatedContent);
  } catch (err) {
    console.error('Failed to fetch m3u8:', err.message);
    res.status(500).send('Proxy Error');
  }
  return;
}
      // Fetch the target URL with appropriate headers and await the result
      const m3u8Response = await fetch(targetURL, {
        headers: getHeadersForDomain(domain)
      });

      // Store the cookie if any
      if (m3u8Response.headers.has('set-cookie')) {
        cookieStore[domain] = m3u8Response.headers.get('set-cookie');
      }

      // Set the content type header according to the file extension
      if (fileExtension === '.m3u8') {
        res.setHeader('Content-Type', 'application/vnd.apple.mpegurl');
      } else if (fileExtension === '.mpd') {
        res.setHeader('Content-Type', 'application/dash+xml');
      }

      // Get the text content of the response and await it
      let m3u8Content = await m3u8Response.text();

      // Process each line of the content asynchronously
      let cacheDuration = 0;
      const lines = m3u8Content.split('\n');
      for (const line of lines) {
        if (line.startsWith(TARGET_DURATION_PREFIX)) {
          cacheDuration = parseInt(line.replace(TARGET_DURATION_PREFIX, ''), 10);
          break;
        }
      }
      m3u8Content = await Promise.all(
        m3u8Content.split('\n').map(async (line) => {
          // Parse the segment URL relative to the target URL
          const segmentParsedURL = new URL(line, targetURL);
          let segmentBaseURL;

          // Check if the segment path is absolute or relative
          if (segmentParsedURL.pathname.startsWith('/')) {
            segmentBaseURL = parsedURL.origin;
          } else {
            segmentBaseURL =
              targetURL.substring(0, targetURL.lastIndexOf('/') + 1);
          }

          // Construct the segment URL with or without base URL
          const segmentURL = line.startsWith('http')
            ? line
            : `${segmentBaseURL}${segmentParsedURL.pathname}${segmentParsedURL.search}`;

          // Get the segment file extension
          const segmentFileExtension = path.extname(
            segmentParsedURL.pathname
          ).toLowerCase();

          // Check if the segment file extension is ts, webp, js or empty
          if (
            segmentFileExtension === '.ts' ||
            segmentFileExtension === '.webp' ||
            segmentFileExtension === '.js' ||
            segmentFileExtension === ''
          ) {
            // Resolve any redirect for the segment URL with appropriate headers and await it
            const resolvedURL = await resolveRedirect(
              segmentURL,
              getHeadersForDomain(domain)
            );

            // Get the segment domain
            const segmentDomain = new URL(segmentURL).host;

            // Append the original domain as a query parameter and return the modified segment URL
            return appendQueryParameter(
              getSegmentURL(resolvedURL),
              'originalDomain',
              segmentDomain
            );
          } else if (line.match(/\.m3u8$/)) {
            // Get the playlist domain from the base URL
            const playlistDomain = new URL(segmentBaseURL).host;

            // Construct the playlist URL with or without base URL
            const playlistURL = line.startsWith('http')
              ? line
              : `${segmentBaseURL}${segmentParsedURL.pathname}`;

            // Resolve any redirect for the playlist URL with appropriate headers and await it
            const resolvedURL = await resolveRedirect(
              playlistURL,
              getHeadersForDomain(domain)
            );

            // Append the original domain as a query parameter and return the modified playlist URL
            return appendQueryParameter(
              getPlaylistURL(resolvedURL),
              'originalDomain',
              playlistDomain
            );
          } else if (line.startsWith('#EXT-X-KEY')) {
            // Extract the key URL from the line
            const keyURLMatch = line.match(/URI=""([^""]+)""/);
            if (!keyURLMatch) {
              return line;
            }
            const keyURL = keyURLMatch[1];

            // Get the segment domain from the key URL
            const segmentDomain = new URL(keyURL).host;

            // Append the original domain as a query parameter and return the modified key URL
            const modifiedKeyURL = appendQueryParameter(
              getKeyURL(keyURL),
              'originalDomain',
              segmentDomain
            );

            // Replace the key URL in the line with the modified one and return the line
            return line.replace(
              /URI=""([^""]+)""/,
              `URI=""${modifiedKeyURL}""`
            );
          } else {
            // Return the line as it is
            return line;
          }
        })
      );

      // Join the processed lines with newline
      m3u8Content = m3u8Content.join('\n');

      // Set the access control header to allow cross-origin requests
      res.setHeader('Access-Control-Allow-Origin', '*');
      res.setHeader('Cache-Control', `public, max-age=${cacheDuration}`);

      // Send the modified content as response
      res.send(m3u8Content);
    } catch (err) {
      // Log the error and send a 500 status code with a message
      console.error('Failed to fetch m3u8:', err.message);
      res.status(500).send('Proxy Error');
    }
    return;
  } else {
    try {
      // Fetch the target URL with appropriate headers and await the result
      const response = await fetch(targetURL);

      // Forward headers 
			for (const [key, value] of Object.entries(response.headers.raw())) {
        res.setHeader(key, value);
      }

      res.setHeader('Access-Control-Allow-Origin', '*');
      res.setHeader('Cache-Control', 'no-store, no-cache, must-revalidate, post-check=0, pre-check=0');
      res.setHeader('Content-Type', 'application/vnd.apple.mpegurl');

      // Stream the response back to the client
      response.body.pipe(res);
    } catch (err) {
      console.error('Failed to fetch:', err.message);
      res.status(500).send('Proxy Error');
    }
  }
});"
GeDgV7fs,Untitled,samipote,JavaScript,Tuesday 12th of September 2023 10:22:03 PM CDT,"process.env.NODE_TLS_REJECT_UNAUTHORIZED = ""0"";
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const path = require('path');
const methodOverride = require('method-override');
const request = require('request');
const restream = require('restream');
const app = express();
const ffmpeg = require('fluent-ffmpeg');
app.set('host', 'sportswatcher.ddns.net');
const fs = require('fs');
const fetch = require('node-fetch');
const cookieStore = {};
const compression = require('compression');
// Enable compression middleware for all requests
app.use(compression());
app.use(express.json()); // Parse JSON bodies
app.use(express.urlencoded({ extended: true })); // Parse URL-encoded bodies
app.use(cors()); // Enable CORS
app.use(methodOverride('_method')); // Enable method override
app.use((err, req, res, next) => {
  console.error(err.stack);  // log the error
  res.status(500).send('Something broke!');
});
process.on('unhandledRejection', (reason, promise) => {
  console.error('Unhandled Rejection at:', promise, 'reason:', reason);
  // You can add logic here to handle or report the error.
});
process.on('uncaughtException', (err, origin) => {
  console.error('Caught exception:', err, 'Exception origin:', origin);
  // You can add logic here to handle or report the error.
});

// Replace with your MongoDB connection string
const connectionString = 'mongodb://localhost:27017/streaming';

// Connect to MongoDB
mongoose
  .connect(connectionString, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => {
    console.log('Connected to MongoDB');
  })
  .catch((error) => {
    console.error('Failed to connect to MongoDB', error);
  });

// Define a Mongoose schema for our Game model
const gameSchema = new mongoose.Schema({
  title: String,
  streamLink: String,
  sport: String,
});

// Create the Game model
const Game = mongoose.model('Game', gameSchema);

// Serve static files from the public directory
app.use(express.static(path.join(__dirname, 'public')));

const proxyAddress = 'http://localhost:8080/';

// A function that returns a modified URL for .ts and .wbp files
function getSegmentURL(targetURL) {
    const baseURL = getBaseURL();
    return baseURL + 'segment/' + targetURL;
}

// A function that returns a modified URL for .m3u8 files
function getPlaylistURL(targetURL) {
  const baseURL = getBaseURL();
  return baseURL + 'proxy/' + targetURL;
}
function getKeyURL(targetURL) {
	 const baseURL = getBaseURL();
  return baseURL + 'key/' + targetURL;
}

function getHeadersForDomain(domain) {
  const defaultHeaders = {
    'accept': '*/*',
    'accept-encoding': 'gzip, deflate, br',
    'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36',
    'sec-ch-ua': '""Chromium"";v=""116"", ""Not)A;Brand"";v=""24"", ""Brave"";v=""116""',
    'sec-ch-ua-mobile': '?0',
    'sec-ch-ua-platform': 'Windows',
    'sec-fetch-dest': 'empty',
    'sec-fetch-mode': 'cors',
    'sec-fetch-site': 'cross-site',
    'sec-gpc': '1',
  };
	
	  if (cookieStore[domain]) {
      defaultHeaders['Cookie'] = cookieStore[domain];
  }

  switch(domain) {
    case 'ddy1.cdndac.lol':
    case 'ddy2.cdndac.lol':
    case 'ddy3.cdndac.lol':
		case 'ddy4.cdndac.lol':
		case 'ddy5.cdndac.lol':
		case 'ddh1.cdndac.lol':
      return {
        ...defaultHeaders,
        'origin': 'https://ddhwebcast4k.xyz',
        'referer': 'https://ddhwebcast4k.xyz/',
      };

    case 'ed-t1.edghst.me':
    case 'ed-t2.edghst.me':
    case 'ed-t3.edghst.me':
    case 'ed-t4.edghst.me':
    case 'ed-n1.edghst.me':
		case 'ed-c1.edghst.me':
      return {
        ...defaultHeaders,
        'origin': 'https://www.nolive.me',
        'referer': 'https://www.nolive.me/',
				'Accept-Encoding': 'identity'
      };
		case 'aes128.seckeyserv.me':
			return {
				...defaultHeaders,
        'origin': 'https://www.nolive.me',
        'referer': 'https://www.nolive.me/',
				'method': 'GET',
				'authority': 'aes128.seckeyserv.me'
      };
		case 's2.albula.xyz':
			return {
				...defaultHeaders,
        'origin': 'https://www.sportshub.to',
        'referer': 'https://www.sportshub.to/'
      };
		case 'nflarcadia.xyz':
			return {
				...defaultHeaders,
        'origin': 'https://gamerarcades.com',
        'referer': 'https://gamerarcades.com/'
      };
		case 'livenflstream.xyz':
			return {
				...defaultHeaders,
        'origin': 'https://catchystream.com',
        'referer': 'https://catchystream.com/'
      };
		case 's3.twoflow.xyz':
		return {
				...defaultHeaders,
        'origin': 'https://bestreamsports.org',
        'referer': 'https://bestreamsports.org/'
      };
		case 'n6.aliflailaaliflaila.com':
		return {
				...defaultHeaders,
        'origin': 'https://fiveyardlab.com',
        'referer': 'https://fiveyardlab.com/'
      };
		case 'jggk.9novel.to':
		return {
				...defaultHeaders,
        'origin': 'https://vwrc.truyenxalo.com',
        'referer': 'https://vwrc.truyenxalo.com/'
      };
			
		case domain.includes('cdnbos.lol') :
		return {
				...defaultHeaders,
        'origin': 'https://ddolahdplay.xyz',
        'referer': 'https://ddolahdplay.xyz/'
      };
		case 'wowstrk.online' :
		return {
				...defaultHeaders,
        'origin': 'https://backfirstwo.site',
        'referer': 'https://backfirstwo.site/'
      };
		case 'weak.hiweak12.store' :
		return {
				...defaultHeaders,
        'origin': 'https://weakstream.org',
        'referer': 'https://weakstream.org/'
      };
		case 'usa.raino.xyz' :
		return {
				...defaultHeaders,
        'origin': 'https://embed4u.xyz',
        'referer': 'https://embed4u.xyz/'
      };
		case 'storage.googleapis.com' :
		return {
				...defaultHeaders,
        'origin': 'https://realbitsport.com',
        'referer': 'https://realbitsport.com/'
      };
		case 'bet365-live-secure.production.geniuslive.geniussports.com' :
		return {
				...defaultHeaders,
        'origin': 'https://www.bet365.com',
        'referer': 'https://www.bet365.com/'
      };
		case 'edge2.xmediaget.com:43434' :
		return {
				...defaultHeaders,
        'origin': 'https://betandyou994784.top',
        'referer': 'https://betandyou994784.top/'
      };
		case domain.includes('istreamcluster') :
		return {
				...defaultHeaders,
        'origin': 'https://istream.ifbstreamtv-one.shop',
        'referer': 'https://istream.ifbstreamtv-one.shop/'
      };
		case domain.includes('webdicdn.lol') :
		case domain.includes('.shop') :
		return {
				...defaultHeaders,
        'origin': 'https://livehdplay.ru',
        'referer': 'https://livehdplay.ru/'
      };
    default:
      return defaultHeaders;
  }
}

function appendQueryParameter(url, paramKey, paramValue) {
    let [base, queryParams] = url.split('?');

    // If there are no existing query parameters, just append the new one.
    if (!queryParams) {
        return `${base}?${paramKey}=${paramValue}`;
    }

    // Convert existing query parameters into a map for easier processing.
    let paramMap = new Map();
    queryParams.split('&').forEach(param => {
        let [key, value] = param.split('=');
        paramMap.set(key, value);
    });

    // Set the new (or overwrite the existing) parameter value.
    paramMap.set(paramKey, paramValue);

    // Construct back the URL.
    const updatedQueryParams = Array.from(paramMap.entries())
        .map(([key, value]) => `${key}=${value}`)
        .join('&');

    return `${base}?${updatedQueryParams}`;
}

function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

// Check if the domain contains a specific pattern
// List of domain patterns/substrings you don't want to proxy
const noProxyPatterns = [""smvdn22.live"", ""xmediaget.com""];

// Function to check if a domain contains any of the patterns
function shouldNotProxy(domain) {
    return noProxyPatterns.some(pattern => domain.includes(pattern));
}
// A route for handling proxy requests for m3u8 and mpd files
app.use('/proxy/', async (req, res) => {
  // Construct the target URL by replacing the proxy prefix
  const targetURL = decodeURIComponent(req.originalUrl.replace('/proxy/', ''));
  console.log(`Target URL: ${targetURL}`);

  // Get the domain of the target URL
  const domain = new URL(targetURL).hostname;

  // Parse the target URL
  const parsedURL = new URL(targetURL);

  // Get the file extension of the target URL
  const fileExtension = path.extname(parsedURL.pathname).toLowerCase();

  const TARGET_DURATION_PREFIX = ""#EXT-X-TARGETDURATION:"";

  // Check if the file extension is m3u8 or mpd
  if (fileExtension === '.m3u8' || fileExtension === '.mpd') {
    try {
      // Fetch the target URL with appropriate headers and await the result
      const m3u8Response = await fetch(targetURL, {
        headers: getHeadersForDomain(domain)
      });

      // Store the cookie if any
      if (m3u8Response.headers.has('set-cookie')) {
        cookieStore[domain] = m3u8Response.headers.get('set-cookie');
      }

      // Set the content type header according to the file extension
      if (fileExtension === '.m3u8') {
        res.setHeader('Content-Type', 'application/vnd.apple.mpegurl');
      } else if (fileExtension === '.mpd') {
        res.setHeader('Content-Type', 'application/dash+xml');
      }

      // Get the text content of the response and await it
      let m3u8Content = await m3u8Response.text();

      // Process each line of the content asynchronously
      let cacheDuration = 0;
      const lines = m3u8Content.split('\n');
      for (const line of lines) {
        if (line.startsWith(TARGET_DURATION_PREFIX)) {
          cacheDuration = parseInt(line.replace(TARGET_DURATION_PREFIX, ''), 10);
          break;
        }
      }
      m3u8Content = await Promise.all(
        m3u8Content.split('\n').map(async (line) => {
          // Parse the segment URL relative to the target URL
          const segmentParsedURL = new URL(line, targetURL);
          let segmentBaseURL;

          // Check if the segment path is absolute or relative
          if (segmentParsedURL.pathname.startsWith('/')) {
            segmentBaseURL = parsedURL.origin;
          } else {
            segmentBaseURL =
              targetURL.substring(0, targetURL.lastIndexOf('/') + 1);
          }

          // Construct the segment URL with or without base URL
          const segmentURL = line.startsWith('http')
            ? line
            : `${segmentBaseURL}${segmentParsedURL.pathname}${segmentParsedURL.search}`;

          // Get the segment file extension
          const segmentFileExtension = path.extname(
            segmentParsedURL.pathname
          ).toLowerCase();

          // Check if the segment file extension is ts, webp, js or empty
          if (
            segmentFileExtension === '.ts' ||
            segmentFileExtension === '.webp' ||
            segmentFileExtension === '.js' ||
            segmentFileExtension === ''
          ) {
            // Resolve any redirect for the segment URL with appropriate headers and await it
            const resolvedURL = await resolveRedirect(
              segmentURL,
              getHeadersForDomain(domain)
            );

            // Get the segment domain
            const segmentDomain = new URL(segmentURL).host;

            // Append the original domain as a query parameter and return the modified segment URL
            return appendQueryParameter(
              getSegmentURL(resolvedURL),
              'originalDomain',
              segmentDomain
            );
          } else if (line.match(/\.m3u8$/)) {
            // Get the playlist domain from the base URL
            const playlistDomain = new URL(segmentBaseURL).host;

            // Construct the playlist URL with or without base URL
            const playlistURL = line.startsWith('http')
              ? line
              : `${segmentBaseURL}${segmentParsedURL.pathname}`;

            // Resolve any redirect for the playlist URL with appropriate headers and await it
            const resolvedURL = await resolveRedirect(
              playlistURL,
              getHeadersForDomain(domain)
            );

            // Append the original domain as a query parameter and return the modified playlist URL
            return appendQueryParameter(
              getPlaylistURL(resolvedURL),
              'originalDomain',
              playlistDomain
            );
          } else if (line.startsWith('#EXT-X-KEY')) {
            // Extract the key URL from the line
            const keyURLMatch = line.match(/URI=""([^""]+)""/);
            if (!keyURLMatch) {
              return line;
            }
            const keyURL = keyURLMatch[1];

            // Get the segment domain from the key URL
            const segmentDomain = new URL(keyURL).host;

            // Append the original domain as a query parameter and return the modified key URL
            const modifiedKeyURL = appendQueryParameter(
              getKeyURL(keyURL),
              'originalDomain',
              segmentDomain
            );

            // Replace the key URL in the line with the modified one and return the line
            return line.replace(
              /URI=""([^""]+)""/,
              `URI=""${modifiedKeyURL}""`
            );
          } else {
            // Return the line as it is
            return line;
          }
        })
      );

      // Join the processed lines with newline
      m3u8Content = m3u8Content.join('\n');

      // Set the access control header to allow cross-origin requests
      res.setHeader('Access-Control-Allow-Origin', '*');
      res.setHeader('Cache-Control', `public, max-age=${cacheDuration}`);

      // Send the modified content as response
      res.send(m3u8Content);
    } catch (err) {
      // Log the error and send a 500 status code with a message
      console.error('Failed to fetch m3u8:', err.message);
      res.status(500).send('Proxy Error');
    }
    return;
  } else {
    try {
      // Fetch the target URL with appropriate headers and await the result
      const response = await fetch(targetURL);

      // Forward headers 
			for (const [key, value] of Object.entries(response.headers.raw())) {
        res.setHeader(key, value);
      }

      res.setHeader('Access-Control-Allow-Origin', '*');
      res.setHeader('Cache-Control', 'no-store, no-cache, must-revalidate, post-check=0, pre-check=0');
      res.setHeader('Content-Type', 'application/vnd.apple.mpegurl');

      // Stream the response back to the client
      response.body.pipe(res);
    } catch (err) {
      console.error('Failed to fetch:', err.message);
      res.status(500).send('Proxy Error');
    }
  }
});


// A function to resolve any redirect for a given URL and headers
async function resolveRedirect(url, headers) {
  try {
    // Fetch the URL with the headers
    const response = await fetch(url, { headers });
    // Check if the response was redirected
    if (response.redirected) {
      // Return the final URL after redirection
      return response.url;
    }
    // Return the original URL if no redirection occurred
    return url;
  } catch (error) {
    // Log the error and return a modified URL with js extension
    console.error('Failed to resolve redirect for', url, error.message);
    return changeExtensionToJs(url);
  }
}

// A function to change the extension of a URL to js
function changeExtensionToJs(url) {
  // Remove the extension from the URL
  const withoutExtension = url.substring(0, url.lastIndexOf('.'));
  // Return the URL with js extension
  return `${withoutExtension}.js`;
}

// A new route for handling .ts and .wbp requests
app.use('/segment/*', async (req, res) => {
  // Get the original domain from the query parameter
  const originalDomain = req.query.originalDomain;

  // Delete the query parameter from the request object
  delete req.query.originalDomain;

  // Construct the target URL directly from the wildcard parameter
  const targetURL = req.params[0];
  const urlObject = new URL(targetURL);
  const domain = urlObject.hostname; // Extracting the domain from the targetURL

  console.log(`Received request for URL: ${targetURL}`);

  // Get the headers for the domain
  const headersForDomain = getHeadersForDomain(domain);  // using 'domain' instead of 'targetURL.host'

  try {
    // Fetch the target URL with appropriate headers and get a readable stream of data
    const proxyRequest = await fetch(targetURL, { headers: headersForDomain });

    // Set the access control header to allow cross-origin requests
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Content-Type', 'application/vnd.apple.mpegurl');

    // Pipe the data stream to the response object
    proxyRequest.body.pipe(res);
  } catch (error) {
    // Log the error and send a 500 status code with a message
    console.error('Failed to fetch segment:', error.message);
    res.status(500).send('Proxy Error');
  }
});


app.use('/key/*', (req, res) => {
  const originalDomain = req.query.originalDomain;
	delete req.query.originalDomain;
  const headersForDomain = getHeadersForDomain(originalDomain);
  const fullURL = req.protocol + '://' + req.get('host') + req.originalUrl;
  console.log(`Received request for key URL: ${fullURL}`);

  // Capture the key path from the wildcard
  const keyPath = req.params[0];

  // Construct the targetURL with the captured key path
  const targetURL = 'https://' + keyPath;
  const domain = new URL(targetURL).hostname;

  // Create a proxyRequestOptions object with the headers copied from the original request
  const proxyRequestOptions = {
    url: targetURL,
    headers: headersForDomain
  };

  const proxyRequest = request(proxyRequestOptions);
  
  proxyRequest.on('response', function(sourceResponse) {
    res.setHeader('Access-Control-Allow-Origin', '*');
		res.setHeader('Content-Type', 'application/octet-stream');
    sourceResponse.pipe(res);
  });
  
  proxyRequest.on('error', function(err) {
    console.error('Proxy Error for URL:', targetURL, 'Error:', err.message);
    res.status(500).send('Proxy Error');
  });
  
  res.on('error', (err) => {
    console.error('Error during response pipe:', err);
  });
});


function getBaseURL() {
  return `http://${app.get('host')}/`;
}

app.get('/', (req, res) => {
  res.render('main.ejs');
});

// Route for serving the admin panel
app.get('/admin', async (req, res) => {
  try {
    const games = await Game.find();
    res.render('admin.ejs', { videos: games });
  } catch (error) {
    res.status(500).send(error);
  }
});

// Route for getting all games
app.get('/games', async (req, res) => {
  try {
    const games = await Game.find();
    res.send(games);
  } catch (error) {
    res.status(500).send(error);
  }
});

// Route for creating a new game
app.post('/games', async (req, res) => {
  try {
    const game = new Game(req.body);
    await game.save();
    res.redirect('/admin');
  } catch (error) {
    res.status(500).send(error);
  }
});

app.put('/games/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const { title, streamLink, sport } = req.body;
    const updatedGame = await Game.findByIdAndUpdate(id, { title, streamLink, sport }, { new: true });
    res.redirect('/admin');
  } catch (error) {
    res.status(500).send(error);
  }
});

// Route for deleting a game
app.delete('/games/:id', async (req, res) => {
  try {
    await Game.deleteOne({ _id: req.params.id });
    res.redirect('/admin');
  } catch (error) {
    res.status(500).send(error);
  }
});

// Start the server
const port = process.env.PORT || 3000;
app.listen(port, () => console.log(`Server running on port ${port}`));"
01ayVGcG,Untitled,Derga,C++,Tuesday 12th of September 2023 10:04:52 PM CDT,"#include <algorithm>
#include <iostream>
#include <vector>

using namespace std;

int main() {
	int costs_count;
	cin >> costs_count;
	vector< vector< int > > costs_free_lunches_count(costs_count, vector< int >(costs_count + 1, 1e10));
	vector< int > costs(costs_count, 1e10);
	for (int i = 0; i < costs_count; ++i)
	{
		cin >> costs[i];
	}
	const int b = 100;
	bool is_even = true;
	int cost = costs.front();
	bool is_more_then_100 = (cost >= b);
	costs_free_lunches_count.front()[is_more_then_100] = cost;
	int last_cost = cost;
	for (int i = 1; i < costs_count; ++i)
	{
		int cost = costs[i];
		if (cost >= b) is_even = !is_even;
		for (int j = 0; j < costs_count; ++j)
		{
			
			int n_cost1 = costs_free_lunches_count[i - 1][j] + costs[i];	
			int n_cost2 = costs_free_lunches_count[i - 1][j + 1];
			int n_cost = min(n_cost1, n_cost2);
			if (cost < b)
			{
				costs_free_lunches_count[i][j] = min(n_cost1, n_cost2);
				continue;
			} else {
				if (is_even && j + 1 < costs_count)
					j++;
				int n_cost1 = 1e10;
				if (j > 0)
				{
					n_cost1 = costs_free_lunches_count[i - 1][j - 1] + costs[i];
				}
				int n_cost2 = costs_free_lunches_count[i - 1][j + 1];
				int n_cost = min(n_cost1, n_cost2);
				
				costs_free_lunches_count[i][j] = n_cost;
				if (!is_even)
				{
					j++;
				}
			}
		}
	}

	cout << min(costs_free_lunches_count.back()[0], costs_free_lunches_count.back()[1]);

    return 0;
}
/*
test1 
7
5 6 5 7 5 3 6
18
*/
"
H2H6LqbS,Untitled,samipote,JavaScript,Tuesday 12th of September 2023 09:47:02 PM CDT,"process.env.NODE_TLS_REJECT_UNAUTHORIZED = ""0"";
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const path = require('path');
const methodOverride = require('method-override');
const request = require('request');
const restream = require('restream');
const app = express();
const ffmpeg = require('fluent-ffmpeg');
app.set('host', 'sportswatcher.ddns.net');
const fs = require('fs');
const fetch = require('node-fetch');
const cookieStore = {};
const compression = require('compression');
// Enable compression middleware for all requests
app.use(compression());
app.use(express.json()); // Parse JSON bodies
app.use(express.urlencoded({ extended: true })); // Parse URL-encoded bodies
app.use(cors()); // Enable CORS
app.use(methodOverride('_method')); // Enable method override
app.use((err, req, res, next) => {
  console.error(err.stack);  // log the error
  res.status(500).send('Something broke!');
});
process.on('unhandledRejection', (reason, promise) => {
  console.error('Unhandled Rejection at:', promise, 'reason:', reason);
  // You can add logic here to handle or report the error.
});
process.on('uncaughtException', (err, origin) => {
  console.error('Caught exception:', err, 'Exception origin:', origin);
  // You can add logic here to handle or report the error.
});

// Replace with your MongoDB connection string
const connectionString = 'mongodb://localhost:27017/streaming';

// Connect to MongoDB
mongoose
  .connect(connectionString, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => {
    console.log('Connected to MongoDB');
  })
  .catch((error) => {
    console.error('Failed to connect to MongoDB', error);
  });

// Define a Mongoose schema for our Game model
const gameSchema = new mongoose.Schema({
  title: String,
  streamLink: String,
  sport: String,
});

// Create the Game model
const Game = mongoose.model('Game', gameSchema);

// Serve static files from the public directory
app.use(express.static(path.join(__dirname, 'public')));

const proxyAddress = 'http://localhost:8080/';

// A function that returns a modified URL for .ts and .wbp files
function getSegmentURL(targetURL) {
    const baseURL = getBaseURL();
    return baseURL + 'segment/' + targetURL;
}

// A function that returns a modified URL for .m3u8 files
function getPlaylistURL(targetURL) {
  const baseURL = getBaseURL();
  return baseURL + 'proxy/' + targetURL;
}
function getKeyURL(targetURL) {
	 const baseURL = getBaseURL();
  return baseURL + 'key/' + targetURL;
}

function getHeadersForDomain(domain) {
  const defaultHeaders = {
    'accept': '*/*',
    'accept-encoding': 'gzip, deflate, br',
    'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36',
    'sec-ch-ua': '""Chromium"";v=""116"", ""Not)A;Brand"";v=""24"", ""Brave"";v=""116""',
    'sec-ch-ua-mobile': '?0',
    'sec-ch-ua-platform': 'Windows',
    'sec-fetch-dest': 'empty',
    'sec-fetch-mode': 'cors',
    'sec-fetch-site': 'cross-site',
    'sec-gpc': '1',
  };
	
	  if (cookieStore[domain]) {
      defaultHeaders['Cookie'] = cookieStore[domain];
  }

  switch(domain) {
    case 'ddy1.cdndac.lol':
    case 'ddy2.cdndac.lol':
    case 'ddy3.cdndac.lol':
		case 'ddy4.cdndac.lol':
		case 'ddy5.cdndac.lol':
		case 'ddh1.cdndac.lol':
      return {
        ...defaultHeaders,
        'origin': 'https://ddhwebcast4k.xyz',
        'referer': 'https://ddhwebcast4k.xyz/',
      };

    case 'ed-t1.edghst.me':
    case 'ed-t2.edghst.me':
    case 'ed-t3.edghst.me':
    case 'ed-t4.edghst.me':
    case 'ed-n1.edghst.me':
		case 'ed-c1.edghst.me':
      return {
        ...defaultHeaders,
        'origin': 'https://www.nolive.me',
        'referer': 'https://www.nolive.me/',
				'Accept-Encoding': 'identity'
      };
		case 'aes128.seckeyserv.me':
			return {
				...defaultHeaders,
        'origin': 'https://www.nolive.me',
        'referer': 'https://www.nolive.me/',
				'method': 'GET',
				'authority': 'aes128.seckeyserv.me'
      };
		case 's2.albula.xyz':
			return {
				...defaultHeaders,
        'origin': 'https://www.sportshub.to',
        'referer': 'https://www.sportshub.to/'
      };
		case 'nflarcadia.xyz':
			return {
				...defaultHeaders,
        'origin': 'https://gamerarcades.com',
        'referer': 'https://gamerarcades.com/'
      };
		case 'livenflstream.xyz':
			return {
				...defaultHeaders,
        'origin': 'https://catchystream.com',
        'referer': 'https://catchystream.com/'
      };
		case 's3.twoflow.xyz':
		return {
				...defaultHeaders,
        'origin': 'https://bestreamsports.org',
        'referer': 'https://bestreamsports.org/'
      };
		case 'n6.aliflailaaliflaila.com':
		return {
				...defaultHeaders,
        'origin': 'https://fiveyardlab.com',
        'referer': 'https://fiveyardlab.com/'
      };
		case 'jggk.9novel.to':
		return {
				...defaultHeaders,
        'origin': 'https://vwrc.truyenxalo.com',
        'referer': 'https://vwrc.truyenxalo.com/'
      };
			
		case domain.includes('cdnbos.lol') :
		return {
				...defaultHeaders,
        'origin': 'https://ddolahdplay.xyz',
        'referer': 'https://ddolahdplay.xyz/'
      };
		case 'wowstrk.online' :
		return {
				...defaultHeaders,
        'origin': 'https://backfirstwo.site',
        'referer': 'https://backfirstwo.site/'
      };
		case 'weak.hiweak12.store' :
		return {
				...defaultHeaders,
        'origin': 'https://weakstream.org',
        'referer': 'https://weakstream.org/'
      };
		case 'usa.raino.xyz' :
		return {
				...defaultHeaders,
        'origin': 'https://embed4u.xyz',
        'referer': 'https://embed4u.xyz/'
      };
		case 'storage.googleapis.com' :
		return {
				...defaultHeaders,
        'origin': 'https://realbitsport.com',
        'referer': 'https://realbitsport.com/'
      };
		case 'bet365-live-secure.production.geniuslive.geniussports.com' :
		return {
				...defaultHeaders,
        'origin': 'https://www.bet365.com',
        'referer': 'https://www.bet365.com/'
      };
		case 'edge2.xmediaget.com:43434' :
		return {
				...defaultHeaders,
        'origin': 'https://betandyou994784.top',
        'referer': 'https://betandyou994784.top/'
      };
		case domain.includes('istreamcluster') :
		return {
				...defaultHeaders,
        'origin': 'https://istream.ifbstreamtv-one.shop',
        'referer': 'https://istream.ifbstreamtv-one.shop/'
      };
		case domain.includes('webdicdn.lol') :
		case domain.includes('.shop') :
		return {
				...defaultHeaders,
        'origin': 'https://livehdplay.ru',
        'referer': 'https://livehdplay.ru/'
      };
    default:
      return defaultHeaders;
  }
}

function appendQueryParameter(url, paramKey, paramValue) {
    let [base, queryParams] = url.split('?');

    // If there are no existing query parameters, just append the new one.
    if (!queryParams) {
        return `${base}?${paramKey}=${paramValue}`;
    }

    // Convert existing query parameters into a map for easier processing.
    let paramMap = new Map();
    queryParams.split('&').forEach(param => {
        let [key, value] = param.split('=');
        paramMap.set(key, value);
    });

    // Set the new (or overwrite the existing) parameter value.
    paramMap.set(paramKey, paramValue);

    // Construct back the URL.
    const updatedQueryParams = Array.from(paramMap.entries())
        .map(([key, value]) => `${key}=${value}`)
        .join('&');

    return `${base}?${updatedQueryParams}`;
}

function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

// Check if the domain contains a specific pattern
// List of domain patterns/substrings you don't want to proxy
const noProxyPatterns = [""smvdn22.live"", ""xmediaget.com""];

// Function to check if a domain contains any of the patterns
function shouldNotProxy(domain) {
    return noProxyPatterns.some(pattern => domain.includes(pattern));
}
// A route for handling proxy requests for m3u8 and mpd files
app.use('/proxy/', async (req, res) => {
  // Construct the target URL by replacing the proxy prefix
  const targetURL = decodeURIComponent(req.originalUrl.replace('/proxy/', ''));
	console.log(`Target URL: ${targetURL}`);
  // Get the domain of the target URL
  const domain = new URL(targetURL).hostname;
  // Parse the target URL
  const parsedURL = new URL(targetURL);
  // Get the file extension of the target URL
  const fileExtension = path.extname(parsedURL.pathname).toLowerCase();
	const TARGET_DURATION_PREFIX = ""#EXT-X-TARGETDURATION:"";
  // Check if the file extension is m3u8 or mpd
  if (fileExtension === '.m3u8' || fileExtension === '.mpd') {
    try {
      // Fetch the target URL with appropriate headers
if (shouldNotProxy(domain)) {
  try {
    const m3u8Response = await fetch(targetURL, {
      headers: getHeadersForDomain(domain),
    });
    if (m3u8Response.headers.has('set-cookie')) {
      cookieStore[domain] = m3u8Response.headers.get('set-cookie');
    }

    const m3u8Content = await m3u8Response.text();
    const baseURL = new URL(targetURL);
		
		let cacheDuration = 0;
    const lines = m3u8Content.split('\n');
    for (const line of lines) {
      if (line.startsWith(TARGET_DURATION_PREFIX)) {
        cacheDuration = parseInt(line.replace(TARGET_DURATION_PREFIX, ''), 10);
        break;
      }
    }
    // Convert relative paths to absolute
    const updatedContent = m3u8Content.split('\n').map(line => {
      if (!line.startsWith(""#EXT"")) {  // Check if the line is a path with .ts extension
        if (!line.startsWith('http')) {  // If the path is relative
					const pathR = new URL(line, baseURL).href
          return getPlaylistURL(pathR);  // Convert it to absolute
        }
      }
      return line;  // Return the line unchanged
    }).join('\n');

    res.setHeader('Content-Type', 'application/vnd.apple.mpegurl');
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Cache-Control', `public, max-age=${cacheDuration}`);
    res.send(updatedContent);
  } catch (err) {
    console.error('Failed to fetch m3u8:', err.message);
    res.status(500).send('Proxy Error');
  }
  return;
}
      const m3u8Response = await fetch(targetURL, {
        headers: getHeadersForDomain(domain),
      });
      // Store the cookie if any
      if (m3u8Response.headers.has('set-cookie')) {
        cookieStore[domain] = m3u8Response.headers.get('set-cookie');
      }
      // Set the content type header according to the file extension
      if (fileExtension === '.m3u8') {
        res.setHeader('Content-Type', 'application/vnd.apple.mpegurl');
      } else if (fileExtension === '.mpd') {
        res.setHeader('Content-Type', 'application/dash+xml');
      }
      // Get the text content of the response
      let m3u8Content = await m3u8Response.text();
      // Process each line of the content asynchronously
		let cacheDuration = 0;
    const lines = m3u8Content.split('\n');
    for (const line of lines) {
      if (line.startsWith(TARGET_DURATION_PREFIX)) {
        cacheDuration = parseInt(line.replace(TARGET_DURATION_PREFIX, ''), 10);
        break;
      }
    }
      m3u8Content = await Promise.all(
        m3u8Content.split('\n').map(async (line) => {
          // Parse the segment URL relative to the target URL
          const segmentParsedURL = new URL(line, targetURL);
          let segmentBaseURL;
          // Check if the segment path is absolute or relative
          if (segmentParsedURL.pathname.startsWith('/')) {
            segmentBaseURL = parsedURL.origin;
          } else {
            segmentBaseURL =
              targetURL.substring(0, targetURL.lastIndexOf('/') + 1);
          }
          // Construct the segment URL with or without base URL
          const segmentURL = line.startsWith('http')
            ? line
            : `${segmentBaseURL}${segmentParsedURL.pathname}${segmentParsedURL.search}`;
          // Get the segment file extension
          const segmentFileExtension = path.extname(
            segmentParsedURL.pathname
          ).toLowerCase();
          // Check if the segment file extension is ts, webp, js or empty
          if (
            segmentFileExtension === '.ts' ||
            segmentFileExtension === '.webp' ||
            segmentFileExtension === '.js' ||
            segmentFileExtension === ''
          ) {
            // Resolve any redirect for the segment URL with appropriate headers
            const resolvedURL = await resolveRedirect(
              segmentURL,
              getHeadersForDomain(domain)
            );
            // Get the segment domain
            const segmentDomain = new URL(segmentURL).host;
            // Append the original domain as a query parameter and return the modified segment URL
            return appendQueryParameter(
              getSegmentURL(resolvedURL),
              'originalDomain',
              segmentDomain
            );
          } else if (line.match(/\.m3u8$/)) {
            // Get the playlist domain from the base URL
            const playlistDomain = new URL(segmentBaseURL).host;
            // Construct the playlist URL with or without base URL
            const playlistURL = line.startsWith('http')
              ? line
              : `${segmentBaseURL}${segmentParsedURL.pathname}`;
            // Resolve any redirect for the playlist URL with appropriate headers
            const resolvedURL = await resolveRedirect(
              playlistURL,
              getHeadersForDomain(domain)
            );
            // Append the original domain as a query parameter and return the modified playlist URL
            return appendQueryParameter(
              getPlaylistURL(resolvedURL),
              'originalDomain',
              playlistDomain
            );
          } else if (line.startsWith('#EXT-X-KEY')) {
            // Extract the key URL from the line
            const keyURLMatch = line.match(/URI=""([^""]+)""/);
            if (!keyURLMatch) {
              return line;
            }
            const keyURL = keyURLMatch[1];
            // Get the segment domain from the key URL
            const segmentDomain = new URL(keyURL).host;
            // Append the original domain as a query parameter and return the modified key URL
            const modifiedKeyURL = appendQueryParameter(
              getKeyURL(keyURL),
              'originalDomain',
              segmentDomain
            );
            // Replace the key URL in the line with the modified one and return the line
            return line.replace(
              /URI=""([^""]+)""/,
              `URI=""${modifiedKeyURL}""`
            );
          } else {
            // Return the line as it is
            return line;
          }
        })
      );
      // Join the processed lines with newline
      m3u8Content = m3u8Content.join('\n');
      // Set the access control header to allow cross-origin requests
      res.setHeader('Access-Control-Allow-Origin', '*');
      res.setHeader('Cache-Control', `public, max-age=${cacheDuration}`);
      // Send the modified content as response
      res.send(m3u8Content);
    } catch (err) {
      // Log the error and send a 500 status code with a message
      console.error('Failed to fetch m3u8:', err.message);
      res.status(500).send('Proxy Error');
    }
    return;
  } else {
    try {
      const response = await fetch(targetURL);

      // Forward headers
      for (const [key, value] of Object.entries(response.headers.raw())) {
        res.setHeader(key, value);
      }
			res.setHeader('Access-Control-Allow-Origin', '*');
			res.setHeader('Cache-Control', 'no-store, no-cache, must-revalidate, post-check=0, pre-check=0');
			res.setHeader('Content-Type', 'application/vnd.apple.mpegurl');
      // Stream the response back to the client
      response.body.pipe(res);
    } catch (err) {
      console.error('Failed to fetch:', err.message);
      res.status(500).send('Proxy Error');
    }
  }
});

// A function to resolve any redirect for a given URL and headers
async function resolveRedirect(url, headers) {
  try {
    // Fetch the URL with the headers
    const response = await fetch(url, { headers });
    // Check if the response was redirected
    if (response.redirected) {
      // Return the final URL after redirection
      return response.url;
    }
    // Return the original URL if no redirection occurred
    return url;
  } catch (error) {
    // Log the error and return a modified URL with js extension
    console.error('Failed to resolve redirect for', url, error.message);
    return changeExtensionToJs(url);
  }
}

// A function to change the extension of a URL to js
function changeExtensionToJs(url) {
  // Remove the extension from the URL
  const withoutExtension = url.substring(0, url.lastIndexOf('.'));
  // Return the URL with js extension
  return `${withoutExtension}.js`;
}

// A new route for handling .ts and .wbp requests
app.use('/segment/*', async (req, res) => {
  // Get the original domain from the query parameter
  const originalDomain = req.query.originalDomain;

  // Delete the query parameter from the request object
  delete req.query.originalDomain;

  // Construct the target URL directly from the wildcard parameter
  const targetURL = req.params[0];
  const urlObject = new URL(targetURL);
  const domain = urlObject.hostname; // Extracting the domain from the targetURL

  console.log(`Received request for URL: ${targetURL}`);

  // Get the headers for the domain
  const headersForDomain = getHeadersForDomain(domain);  // using 'domain' instead of 'targetURL.host'

  try {
    // Fetch the target URL with appropriate headers and get a readable stream of data
    const proxyRequest = await fetch(targetURL, { headers: headersForDomain });

    // Set the access control header to allow cross-origin requests
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Content-Type', 'application/vnd.apple.mpegurl');

    // Pipe the data stream to the response object
    proxyRequest.body.pipe(res);
  } catch (error) {
    // Log the error and send a 500 status code with a message
    console.error('Failed to fetch segment:', error.message);
    res.status(500).send('Proxy Error');
  }
});


app.use('/key/*', (req, res) => {
  const originalDomain = req.query.originalDomain;
	delete req.query.originalDomain;
  const headersForDomain = getHeadersForDomain(originalDomain);
  const fullURL = req.protocol + '://' + req.get('host') + req.originalUrl;
  console.log(`Received request for key URL: ${fullURL}`);

  // Capture the key path from the wildcard
  const keyPath = req.params[0];

  // Construct the targetURL with the captured key path
  const targetURL = 'https://' + keyPath;
  const domain = new URL(targetURL).hostname;

  // Create a proxyRequestOptions object with the headers copied from the original request
  const proxyRequestOptions = {
    url: targetURL,
    headers: headersForDomain
  };

  const proxyRequest = request(proxyRequestOptions);
  
  proxyRequest.on('response', function(sourceResponse) {
    res.setHeader('Access-Control-Allow-Origin', '*');
		res.setHeader('Content-Type', 'application/octet-stream');
    sourceResponse.pipe(res);
  });
  
  proxyRequest.on('error', function(err) {
    console.error('Proxy Error for URL:', targetURL, 'Error:', err.message);
    res.status(500).send('Proxy Error');
  });
  
  res.on('error', (err) => {
    console.error('Error during response pipe:', err);
  });
});


function getBaseURL() {
  return `http://${app.get('host')}/`;
}

app.get('/', (req, res) => {
  res.render('main.ejs');
});

// Route for serving the admin panel
app.get('/admin', async (req, res) => {
  try {
    const games = await Game.find();
    res.render('admin.ejs', { videos: games });
  } catch (error) {
    res.status(500).send(error);
  }
});

// Route for getting all games
app.get('/games', async (req, res) => {
  try {
    const games = await Game.find();
    res.send(games);
  } catch (error) {
    res.status(500).send(error);
  }
});

// Route for creating a new game
app.post('/games', async (req, res) => {
  try {
    const game = new Game(req.body);
    await game.save();
    res.redirect('/admin');
  } catch (error) {
    res.status(500).send(error);
  }
});

app.put('/games/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const { title, streamLink, sport } = req.body;
    const updatedGame = await Game.findByIdAndUpdate(id, { title, streamLink, sport }, { new: true });
    res.redirect('/admin');
  } catch (error) {
    res.status(500).send(error);
  }
});

// Route for deleting a game
app.delete('/games/:id', async (req, res) => {
  try {
    await Game.deleteOne({ _id: req.params.id });
    res.redirect('/admin');
  } catch (error) {
    res.status(500).send(error);
  }
});

// Start the server
const port = process.env.PORT || 3000;
app.listen(port, () => console.log(`Server running on port ${port}`));"
5bAv59N2,supabaseClient.js,svalencia014,JavaScript,Tuesday 12th of September 2023 08:39:43 PM CDT,"import { createClient } from ""@supabase/supabase-js"";
export const supabase = createClient('https://jtogjllollqwcviamovf.supabase.co', 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imp0b2dqbGxvbGxxd2N2aWFtb3ZmIiwicm9sZSI6ImFub24iLCJpYXQiOjE2OTQ1NTU0NTgsImV4cCI6MjAxMDEzMTQ1OH0.IAQfs1N_cXqIUtLgzNui_XFtWb2B1XEju9PqbPGlLkQ');
"
ZuEJFT07,sp envia email padaria terc,geracino,PL/SQL,Tuesday 12th of September 2023 08:26:51 PM CDT,"-- Created on 12/09/2023 by 3048648D-67DF-4B51 
declare 
  -- Local variables here
-- Declara Variáveis
vcorpoemail            clob NULL;
vcount                 NUMBER NULL;
vcount2                NUMBER NULL;
vcount3                NUMBER NULL;
 obj_param_smtp             c5_tp_param_smtp;

-- Declara Cursores
CURSOR cccorpo IS
               SELECT seqproduto, 
                      desccompleta, 
                      embalagem, 
                      quantidade, 
                      nrodoctos, 
                      vlrunitario, 
                      vlrvenda, 
                      vlrlucro, 
                      ctobrutomarkupdown, 
                      lucratividade
                      FROM dtv_venda_padaria
 ;
CURSOR ccestoque IS 
                 select seqproduto, 
                        produto, 
                        embalagem, 
                        precounitario,
                        qtdtotal quantidade,
                        VLRPRECOVENDA                       
                        from DTV_ESTOQUE_PADARIA t
                        where t.QTDTOTAL < 0
                        ;
                        
CURSOR cccompra IS                      
                select seqproduto, 
                       desccompleta produto, 
                       embalagem, 
                       quantidade, 
                       vlrvenda vendas
                       from DTV_COMPRA_PADARIA t;


DADOS_CORPOS cccorpo%ROWTYPE;
DADOS_ESTOQUE ccestoque%rowtype;
DADOS_COMPRAS cccompra%rowtype;

BEGIN

       SELECT COUNT(*)
       INTO vcount
       FROM dtv_venda_padaria;
       
       select COUNT(*)
       INTO vcount2
       from dtv_estoque_padaria;
       
       select COUNT(*)
       INTO vcount3
       from dtv_compra_padaria;

       -- Processa os fetchs
       OPEN cccorpo;
       FETCH cccorpo INTO DADOS_CORPOS;
       CLOSE cccorpo;
       
       OPEN ccestoque;
       FETCH ccestoque INTO DADOS_ESTOQUE;
       CLOSE ccestoque;
       
       OPEN cccompra;
       FETCH cccompra INTO DADOS_COMPRAS;
       CLOSE cccompra;
       
       -- Cabeçalho VENDAS
       vcorpoemail := '<table border =""1"" color= ""black""><style type=""text/css"">
                      tr {color : Black;
                              font-size : 12 ;
                              font-family : Verdana;
                          border : 2px solid black;}
       </style>
       <tr style=""background-color:#D9D9D9""><font color=""black"" ><td>SEQPRODUTO</td>
           <td>PRODUTO</td>
           <td>EMBALAGEM</td> 
           <td>QUANTIDADE</td> 
           <td>QTDDOCTOS</td>
           <td>VENDA</td>
           <td>CUSTO</td>
           <td>VLRUNITARIO</td>            
           <td>LUCRATIVIDADE%</td></font></tr>';
           

       -- Corpo de arquivo.
       IF vcount = 0 THEN
         vcorpoemail := vcorpoemail||'<tr><td>Não há dados novos</td></tr>';
         END IF;


       FOR DADOS_CORPOS IN cccorpo

       LOOP
              IF DADOS_CORPOS.SEQPRODUTO !=0
              THEN
              --vcorpoemail:=vcorpoemail||'<tr><td>'||lpad(DADOS_CORPOS.COMPRADOR,15,' ')||' - '||rpad(DADOS_CORPOS.EMPRESA,14,' ')||': Acordo: '||rpad(DADOS_CORPOS.NROACORDO,6,' ')||' Fornecedor: '||DADOS_CORPOS.FORNECEDOR||'<BR><BR> '||/*chr(13)||*/chr(10);
              vcorpoemail:=vcorpoemail||'<tr><td>'||DADOS_CORPOS.SEQPRODUTO||'</td><td>'||DADOS_CORPOS.DESCCOMPLETA||'</td><td>'||DADOS_CORPOS.EMBALAGEM||'</td><td>'
                                      ||DADOS_CORPOS.QUANTIDADE||'</td><td>'||TO_CHAR(DADOS_CORPOS.NRODOCTOS)||'</td><td>'||TO_CHAR(DADOS_CORPOS.VLRVENDA)||'</td><td>'||TO_CHAR(DADOS_CORPOS.CTOBRUTOMARKUPDOWN)||'</td><td>'||TO_CHAR(DADOS_CORPOS.VLRUNITARIO)||'</td><td>'||TO_CHAR(DADOS_CORPOS.LUCRATIVIDADE)||'</td></tr>'/*||\*chr(13)||*\chr(10)*/;

              END IF;

       END LOOP;

       vcorpoemail :=vcorpoemail||'</table>';

       /*CABELHO ESTOQUE*/
       vcorpoemail := vcorpoemail||'<br><br>
                                      <p>Quantidade de Estoque Acumlado.</p>
                      <table border =""1"" color= ""black"">
                             <style type=""text/css"">
                                    tr {color       : Black;
                                        font-size   : 12 ;
                                        font-family : Verdana;
                                        border      : 2px solid black;}
                             </style>
       <tr style=""background-color:#D9D9D9""><font color=""black"" ><td>SEQPRODUTO</td>
           <td>PRODUTO</td>
           <td>EMBALAGEM</td>
           <td>QUANTIDADE</td>
           <td>VENDA</td>
           <td>PRECOUNIT</td> </font></tr>';
           
       /*CORPO ESTOQUE*/    
       -- Corpo de arquivo.
       IF vcount2 = 0 THEN
         vcorpoemail := vcorpoemail||'<tr><td>Não há dados novos</td></tr>';
         END IF;


       FOR DADOS_ESTOQUE IN ccestoque

       LOOP
              IF DADOS_ESTOQUE.SEQPRODUTO !=0
              THEN
              --vcorpoemail:=vcorpoemail||'<tr><td>'||lpad(DADOS_CORPOS.COMPRADOR,15,' ')||' - '||rpad(DADOS_CORPOS.EMPRESA,14,' ')||': Acordo: '||rpad(DADOS_CORPOS.NROACORDO,6,' ')||' Fornecedor: '||DADOS_CORPOS.FORNECEDOR||'<BR><BR> '||/*chr(13)||*/chr(10);
              vcorpoemail:=vcorpoemail||'<tr><td>'||DADOS_ESTOQUE.SEQPRODUTO||'</td><td>'||DADOS_ESTOQUE.PRODUTO||'</td><td>'||DADOS_ESTOQUE.EMBALAGEM||'</td><td>'||DADOS_ESTOQUE.QUANTIDADE||'</td><td>'||DADOS_ESTOQUE.VLRPRECOVENDA||'</td><td>'||DADOS_ESTOQUE.Precounitario||'</td></tr>'/*||\*chr(13)||*\chr(10)*/;

              END IF;

       END LOOP;

       vcorpoemail :=vcorpoemail||'</table>';    
      
       /*CABELHO COMPRA*/
       vcorpoemail := vcorpoemail||'<br><br>
                                      <p>Quantidade de compras Acumlado.</p>
                      <table border =""1"" color= ""black"">
                             <style type=""text/css"">
                                    tr {color       : Black;
                                        font-size   : 12 ;
                                        font-family : Verdana;
                                        border      : 2px solid black;}
                             </style>
       <tr style=""background-color:#D9D9D9""><font color=""black"" ><td>SEQPRODUTO</td>
           <td>PRODUTO</td>
           <td>EMBALAGEM</td>
           <td>QUANTIDADE</td> 
           <td>VENDA</td> </font></tr>';
           
       /*CORPO COMPRAS*/    
       -- Corpo de arquivo.
       IF vcount3 = 0 THEN
         vcorpoemail := vcorpoemail||'<tr><td>Não há dados novos</td></tr>';
         END IF;


       FOR DADOS_COMPRAS IN cccompra

       LOOP
              IF DADOS_COMPRAS.SEQPRODUTO !=0
              THEN
              --vcorpoemail:=vcorpoemail||'<tr><td>'||lpad(DADOS_CORPOS.COMPRADOR,15,' ')||' - '||rpad(DADOS_CORPOS.EMPRESA,14,' ')||': Acordo: '||rpad(DADOS_CORPOS.NROACORDO,6,' ')||' Fornecedor: '||DADOS_CORPOS.FORNECEDOR||'<BR><BR> '||/*chr(13)||*/chr(10);
              vcorpoemail:=vcorpoemail||'<tr><td>'||DADOS_COMPRAS.SEQPRODUTO||'</td><td>'||DADOS_COMPRAS.PRODUTO||'</td><td>'||DADOS_COMPRAS.EMBALAGEM||'</td><td>'||DADOS_COMPRAS.QUANTIDADE||'</td><td>'||DADOS_COMPRAS.VENDAS||'</td></tr>'/*||\*chr(13)||*\chr(10)*/;

              END IF;

       END LOOP;

       vcorpoemail :=vcorpoemail||'</table>'; 

 obj_param_smtp := c5_tp_param_smtp(12);
  IF obj_param_smtp.CriadoComSucesso = 0 THEN
    RETURN;
  END IF;
      sp_envia_email(obj_param      => obj_param_smtp,
       psDestinatario =>'paulofis@gmail.com,wellington@daterraatacadoevarejo.com.br'
       ,psAssunto      =>'[DATERRA] - Vendas referente ao dia '||TO_CHAR(SYSDATE,'dd/mm/yyyy')
       ,psMensagem     =>'
                                <br><br>Prezados,
                                <br><br> Vendas referente ao dia '||TO_CHAR(SYSDATE,'dd/mm/yyyy')
                                ||'<br><br>'
                                ||vcorpoemail
                                ||'<br><br><br>'||'E-mail enviado pelo Servidor automaticamente, por favor não responder. <br><br><br>
                                <img src=""https://daterraatacadoevarejo.com.br/wp-content/uploads/2021/05/logo_daterra_hor_b-1024x81.png"" width=""512"" height=""40""  align=""center"" style=""background-color:#D9D9D9"">'
       ,psindusahtml   => 'S');



END;
"
7xSqNT5C,Free Backlinks Direct Google,Paceusa,JavaScript,Tuesday 12th of September 2023 07:42:55 PM CDT,"Berikut Ini Adalah Backlinks Directlink Via Google

http://maps.google.com/url?q=https://domain.com/
http://images.google.com/url?q=https://domain.com/
http://google.com/url?q=https://domainmu.com/"
6DRn8geq,2023-09-12_stats.json,rdp_snitch,JSON,Tuesday 12th of September 2023 07:18:05 PM CDT,"{
  ""ip"": {
    ""62.122.184.205"": 3,
    ""62.122.184.150"": 6,
    ""62.122.184.146"": 6,
    ""62.122.184.147"": 6,
    ""193.142.147.9"": 9,
    ""62.122.184.200"": 3,
    ""62.122.184.201"": 3,
    ""62.122.184.145"": 3,
    ""62.122.184.142"": 6,
    ""62.122.184.207"": 3,
    ""62.122.184.219"": 3,
    ""62.122.184.149"": 3,
    ""62.122.184.204"": 3,
    ""62.122.184.143"": 3,
    ""51.75.160.42"": 6,
    ""62.122.184.218"": 3,
    ""62.122.184.213"": 3,
    ""62.122.184.208"": 3,
    ""185.170.144.3"": 3,
    ""45.227.254.54"": 6,
    ""128.14.209.42"": 18,
    ""23.105.110.223"": 3,
    ""43.134.190.130"": 21,
    ""205.210.31.53"": 9,
    ""192.155.89.96"": 3,
    ""178.32.197.93"": 3,
    ""173.239.240.20"": 3,
    ""196.190.117.7"": 6,
    ""166.0.156.78"": 3,
    ""198.235.24.127"": 9,
    ""200.225.44.30"": 3,
    ""71.6.135.131"": 6,
    ""211.101.247.22"": 3,
    ""103.130.217.247"": 6,
    ""152.32.139.9"": 3,
    ""43.156.6.9"": 153,
    ""198.235.24.70"": 9,
    ""36.135.17.239"": 3,
    ""111.61.253.55"": 3,
    ""74.235.152.128"": 3,
    ""205.210.31.78"": 9,
    ""106.116.169.71"": 3
  },
  ""asn"": {
    ""AS57523"": 60,
    ""AS208046"": 9,
    ""AS16276"": 9,
    ""AS197414"": 3,
    ""AS267784"": 6,
    ""AS21859"": 18,
    ""AS7203"": 3,
    ""AS132203"": 174,
    ""AS396982"": 36,
    ""AS63949"": 3,
    ""AS396356"": 3,
    ""AS24757"": 6,
    ""AS30823"": 3,
    ""AS54641"": 3,
    ""AS10439"": 6,
    ""AS58519"": 3,
    ""AS135951"": 6,
    ""AS135377"": 3,
    ""AS134810"": 3,
    ""AS24547"": 3,
    ""AS8075"": 3,
    ""AS4134"": 3
  },
  ""isp"": {
    ""Chang Way Technologies Co. Limited"": 60,
    ""ColocationX Ltd."": 9,
    ""OVH SAS"": 9,
    ""Xhost Internet Solutions LP"": 3,
    ""Flyservers S.A."": 6,
    ""Zenlayer Inc"": 18,
    ""Leaseweb USA, Inc."": 3,
    ""Aceville Pte.ltd"": 21,
    ""Google LLC"": 36,
    ""Akamai Technologies, Inc."": 3,
    ""LogicWeb Inc."": 3,
    ""Ethiotelecom"": 6,
    ""Ipxo LLC"": 3,
    ""InMotion Hosting"": 3,
    ""CariNet, Inc."": 6,
    ""Unknown"": 3,
    ""Webico Company Limited"": 6,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Shenzhen Tencent Computer Systems Company Limited"": 153,
    ""China Mobile Communications Corporation"": 3,
    ""China Mobile communications corporation"": 3,
    ""Microsoft Corporation"": 3,
    ""Chinanet"": 3
  },
  ""org"": {
    ""Chang Way Technologies Co. Limited"": 60,
    ""x33 Networks IBC"": 9,
    ""OVH Ltd"": 6,
    ""Xhostis"": 3,
    ""UAB Host Baltic"": 6,
    ""ZENLA"": 18,
    ""Leaseweb USA, Inc"": 3,
    ""Unknown"": 33,
    ""Palo Alto Networks, Inc"": 36,
    ""Linode"": 3,
    ""ONYPHE"": 3,
    ""Turkbil Teknoloji"": 3,
    ""OpenMetal, Inc"": 3,
    ""CariNet, Inc."": 6,
    ""Vietnam Internet Network Information Center"": 6,
    ""Ucloud Information Technology"": 3,
    ""Tencent Cloud Computing"": 153,
    ""China Mobile Communications Corporation"": 3,
    ""China Mobile"": 3,
    ""Microsoft Azure Cloud (eastus)"": 3,
    ""Chinanet HE"": 3
  },
  ""regionName"": {
    ""Moscow"": 60,
    ""English River"": 9,
    ""England"": 6,
    ""North Holland"": 3,
    ""Vilnius"": 6,
    ""California"": 66,
    ""North West"": 174,
    ""New Jersey"": 6,
    ""Hauts-de-France"": 3,
    ""Addis Ababa"": 6,
    ""Istanbul"": 3,
    ""Tokyo"": 3,
    ""Ho Chi Minh"": 6,
    ""Seoul"": 3,
    ""Jilin"": 3,
    ""Hebei"": 6,
    ""Virginia"": 3
  },
  ""country"": {
    ""Russia"": 60,
    ""Seychelles"": 9,
    ""United Kingdom"": 6,
    ""Netherlands"": 3,
    ""Lithuania"": 6,
    ""United States"": 75,
    ""Singapore"": 174,
    ""France"": 3,
    ""Ethiopia"": 6,
    ""Turkey"": 3,
    ""Japan"": 3,
    ""Vietnam"": 6,
    ""South Korea"": 3,
    ""China"": 9
  },
  ""account"": {
    ""Administr"": 60,
    ""Domain"": 9,
    ""Test"": 27,
    ""(empty)"": 12,
    ""root"": 24,
    ""hello"": 189,
    ""QMXFBfkJw"": 3,
    ""JjEOPT"": 3,
    ""TbEHym"": 3,
    ""beio"": 3,
    ""Administrator"": 6,
    ""cGvJXFWbJ"": 3,
    ""xDGNAl"": 3,
    ""WdKHOe"": 3,
    ""UutPodqZy"": 3,
    ""bxwsXi"": 3,
    ""iSqDZh"": 3,
    ""aXsBvwuqd"": 3,
    ""tLUpcq"": 3,
    ""KsLPzr"": 3
  },
  ""keyboard"": {
    ""Unknown"": 366
  },
  ""client_build"": {
    ""Unknown"": 366
  },
  ""client_name"": {
    ""Unknown"": 366
  },
  ""ip_type"": {
    ""proxy"": 63,
    ""Unknown"": 30,
    ""hosting"": 255,
    ""hosting & proxy"": 6,
    ""mobile"": 12
  }
}"
z8khWj7k,2023-09-12_stats.json,rdp_snitch,JSON,Tuesday 12th of September 2023 07:16:06 PM CDT,"{
  ""ip"": {
    ""62.122.184.205"": 2,
    ""62.122.184.150"": 4,
    ""62.122.184.146"": 4,
    ""62.122.184.147"": 4,
    ""193.142.147.9"": 6,
    ""62.122.184.200"": 2,
    ""62.122.184.201"": 2,
    ""62.122.184.145"": 2,
    ""62.122.184.142"": 4,
    ""62.122.184.207"": 2,
    ""62.122.184.219"": 2,
    ""62.122.184.149"": 2,
    ""62.122.184.204"": 2,
    ""62.122.184.143"": 2,
    ""51.75.160.42"": 4,
    ""62.122.184.218"": 2,
    ""62.122.184.213"": 2,
    ""62.122.184.208"": 2,
    ""185.170.144.3"": 2,
    ""45.227.254.54"": 4,
    ""128.14.209.42"": 12,
    ""23.105.110.223"": 2,
    ""43.134.190.130"": 14,
    ""205.210.31.53"": 6,
    ""192.155.89.96"": 2,
    ""178.32.197.93"": 2,
    ""173.239.240.20"": 2,
    ""196.190.117.7"": 4,
    ""166.0.156.78"": 2,
    ""198.235.24.127"": 6,
    ""200.225.44.30"": 2,
    ""71.6.135.131"": 4,
    ""211.101.247.22"": 2,
    ""103.130.217.247"": 4,
    ""152.32.139.9"": 2,
    ""43.156.6.9"": 102,
    ""198.235.24.70"": 6,
    ""36.135.17.239"": 2,
    ""111.61.253.55"": 2,
    ""74.235.152.128"": 2,
    ""205.210.31.78"": 6,
    ""106.116.169.71"": 2
  },
  ""asn"": {
    ""AS57523"": 40,
    ""AS208046"": 6,
    ""AS16276"": 6,
    ""AS197414"": 2,
    ""AS267784"": 4,
    ""AS21859"": 12,
    ""AS7203"": 2,
    ""AS132203"": 116,
    ""AS396982"": 24,
    ""AS63949"": 2,
    ""AS396356"": 2,
    ""AS24757"": 4,
    ""AS30823"": 2,
    ""AS54641"": 2,
    ""AS10439"": 4,
    ""AS58519"": 2,
    ""AS135951"": 4,
    ""AS135377"": 2,
    ""AS134810"": 2,
    ""AS24547"": 2,
    ""AS8075"": 2,
    ""AS4134"": 2
  },
  ""isp"": {
    ""Chang Way Technologies Co. Limited"": 40,
    ""ColocationX Ltd."": 6,
    ""OVH SAS"": 6,
    ""Xhost Internet Solutions LP"": 2,
    ""Flyservers S.A."": 4,
    ""Zenlayer Inc"": 12,
    ""Leaseweb USA, Inc."": 2,
    ""Aceville Pte.ltd"": 14,
    ""Google LLC"": 24,
    ""Akamai Technologies, Inc."": 2,
    ""LogicWeb Inc."": 2,
    ""Ethiotelecom"": 4,
    ""Ipxo LLC"": 2,
    ""InMotion Hosting"": 2,
    ""CariNet, Inc."": 4,
    ""Unknown"": 2,
    ""Webico Company Limited"": 4,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Shenzhen Tencent Computer Systems Company Limited"": 102,
    ""China Mobile Communications Corporation"": 2,
    ""China Mobile communications corporation"": 2,
    ""Microsoft Corporation"": 2,
    ""Chinanet"": 2
  },
  ""org"": {
    ""Chang Way Technologies Co. Limited"": 40,
    ""x33 Networks IBC"": 6,
    ""OVH Ltd"": 4,
    ""Xhostis"": 2,
    ""UAB Host Baltic"": 4,
    ""ZENLA"": 12,
    ""Leaseweb USA, Inc"": 2,
    ""Unknown"": 22,
    ""Palo Alto Networks, Inc"": 24,
    ""Linode"": 2,
    ""ONYPHE"": 2,
    ""Turkbil Teknoloji"": 2,
    ""OpenMetal, Inc"": 2,
    ""CariNet, Inc."": 4,
    ""Vietnam Internet Network Information Center"": 4,
    ""Ucloud Information Technology"": 2,
    ""Tencent Cloud Computing"": 102,
    ""China Mobile Communications Corporation"": 2,
    ""China Mobile"": 2,
    ""Microsoft Azure Cloud (eastus)"": 2,
    ""Chinanet HE"": 2
  },
  ""regionName"": {
    ""Moscow"": 40,
    ""English River"": 6,
    ""England"": 4,
    ""North Holland"": 2,
    ""Vilnius"": 4,
    ""California"": 44,
    ""North West"": 116,
    ""New Jersey"": 4,
    ""Hauts-de-France"": 2,
    ""Addis Ababa"": 4,
    ""Istanbul"": 2,
    ""Tokyo"": 2,
    ""Ho Chi Minh"": 4,
    ""Seoul"": 2,
    ""Jilin"": 2,
    ""Hebei"": 4,
    ""Virginia"": 2
  },
  ""country"": {
    ""Russia"": 40,
    ""Seychelles"": 6,
    ""United Kingdom"": 4,
    ""Netherlands"": 2,
    ""Lithuania"": 4,
    ""United States"": 50,
    ""Singapore"": 116,
    ""France"": 2,
    ""Ethiopia"": 4,
    ""Turkey"": 2,
    ""Japan"": 2,
    ""Vietnam"": 4,
    ""South Korea"": 2,
    ""China"": 6
  },
  ""account"": {
    ""Administr"": 40,
    ""Domain"": 6,
    ""Test"": 18,
    ""(empty)"": 8,
    ""root"": 16,
    ""hello"": 126,
    ""QMXFBfkJw"": 2,
    ""JjEOPT"": 2,
    ""TbEHym"": 2,
    ""beio"": 2,
    ""Administrator"": 4,
    ""cGvJXFWbJ"": 2,
    ""xDGNAl"": 2,
    ""WdKHOe"": 2,
    ""UutPodqZy"": 2,
    ""bxwsXi"": 2,
    ""iSqDZh"": 2,
    ""aXsBvwuqd"": 2,
    ""tLUpcq"": 2,
    ""KsLPzr"": 2
  },
  ""keyboard"": {
    ""Unknown"": 244
  },
  ""client_build"": {
    ""Unknown"": 244
  },
  ""client_name"": {
    ""Unknown"": 244
  },
  ""ip_type"": {
    ""proxy"": 42,
    ""Unknown"": 20,
    ""hosting"": 170,
    ""hosting & proxy"": 4,
    ""mobile"": 8
  }
}"
0qBp96uz,2023-09-12_stats.json,rdp_snitch,JSON,Tuesday 12th of September 2023 07:15:09 PM CDT,"{
  ""ip"": {
    ""62.122.184.205"": 1,
    ""62.122.184.150"": 2,
    ""62.122.184.146"": 2,
    ""62.122.184.147"": 2,
    ""193.142.147.9"": 3,
    ""62.122.184.200"": 1,
    ""62.122.184.201"": 1,
    ""62.122.184.145"": 1,
    ""62.122.184.142"": 2,
    ""62.122.184.207"": 1,
    ""62.122.184.219"": 1,
    ""62.122.184.149"": 1,
    ""62.122.184.204"": 1,
    ""62.122.184.143"": 1,
    ""51.75.160.42"": 2,
    ""62.122.184.218"": 1,
    ""62.122.184.213"": 1,
    ""62.122.184.208"": 1,
    ""185.170.144.3"": 1,
    ""45.227.254.54"": 2,
    ""128.14.209.42"": 6,
    ""23.105.110.223"": 1,
    ""43.134.190.130"": 7,
    ""205.210.31.53"": 3,
    ""192.155.89.96"": 1,
    ""178.32.197.93"": 1,
    ""173.239.240.20"": 1,
    ""196.190.117.7"": 2,
    ""166.0.156.78"": 1,
    ""198.235.24.127"": 3,
    ""200.225.44.30"": 1,
    ""71.6.135.131"": 2,
    ""211.101.247.22"": 1,
    ""103.130.217.247"": 2,
    ""152.32.139.9"": 1,
    ""43.156.6.9"": 51,
    ""198.235.24.70"": 3,
    ""36.135.17.239"": 1,
    ""111.61.253.55"": 1,
    ""74.235.152.128"": 1,
    ""205.210.31.78"": 3,
    ""106.116.169.71"": 1
  },
  ""asn"": {
    ""AS57523"": 20,
    ""AS208046"": 3,
    ""AS16276"": 3,
    ""AS197414"": 1,
    ""AS267784"": 2,
    ""AS21859"": 6,
    ""AS7203"": 1,
    ""AS132203"": 58,
    ""AS396982"": 12,
    ""AS63949"": 1,
    ""AS396356"": 1,
    ""AS24757"": 2,
    ""AS30823"": 1,
    ""AS54641"": 1,
    ""AS10439"": 2,
    ""AS58519"": 1,
    ""AS135951"": 2,
    ""AS135377"": 1,
    ""AS134810"": 1,
    ""AS24547"": 1,
    ""AS8075"": 1,
    ""AS4134"": 1
  },
  ""isp"": {
    ""Chang Way Technologies Co. Limited"": 20,
    ""ColocationX Ltd."": 3,
    ""OVH SAS"": 3,
    ""Xhost Internet Solutions LP"": 1,
    ""Flyservers S.A."": 2,
    ""Zenlayer Inc"": 6,
    ""Leaseweb USA, Inc."": 1,
    ""Aceville Pte.ltd"": 7,
    ""Google LLC"": 12,
    ""Akamai Technologies, Inc."": 1,
    ""LogicWeb Inc."": 1,
    ""Ethiotelecom"": 2,
    ""Ipxo LLC"": 1,
    ""InMotion Hosting"": 1,
    ""CariNet, Inc."": 2,
    ""Unknown"": 1,
    ""Webico Company Limited"": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""Shenzhen Tencent Computer Systems Company Limited"": 51,
    ""China Mobile Communications Corporation"": 1,
    ""China Mobile communications corporation"": 1,
    ""Microsoft Corporation"": 1,
    ""Chinanet"": 1
  },
  ""org"": {
    ""Chang Way Technologies Co. Limited"": 20,
    ""x33 Networks IBC"": 3,
    ""OVH Ltd"": 2,
    ""Xhostis"": 1,
    ""UAB Host Baltic"": 2,
    ""ZENLA"": 6,
    ""Leaseweb USA, Inc"": 1,
    ""Unknown"": 11,
    ""Palo Alto Networks, Inc"": 12,
    ""Linode"": 1,
    ""ONYPHE"": 1,
    ""Turkbil Teknoloji"": 1,
    ""OpenMetal, Inc"": 1,
    ""CariNet, Inc."": 2,
    ""Vietnam Internet Network Information Center"": 2,
    ""Ucloud Information Technology"": 1,
    ""Tencent Cloud Computing"": 51,
    ""China Mobile Communications Corporation"": 1,
    ""China Mobile"": 1,
    ""Microsoft Azure Cloud (eastus)"": 1,
    ""Chinanet HE"": 1
  },
  ""regionName"": {
    ""Moscow"": 20,
    ""English River"": 3,
    ""England"": 2,
    ""North Holland"": 1,
    ""Vilnius"": 2,
    ""California"": 22,
    ""North West"": 58,
    ""New Jersey"": 2,
    ""Hauts-de-France"": 1,
    ""Addis Ababa"": 2,
    ""Istanbul"": 1,
    ""Tokyo"": 1,
    ""Ho Chi Minh"": 2,
    ""Seoul"": 1,
    ""Jilin"": 1,
    ""Hebei"": 2,
    ""Virginia"": 1
  },
  ""country"": {
    ""Russia"": 20,
    ""Seychelles"": 3,
    ""United Kingdom"": 2,
    ""Netherlands"": 1,
    ""Lithuania"": 2,
    ""United States"": 25,
    ""Singapore"": 58,
    ""France"": 1,
    ""Ethiopia"": 2,
    ""Turkey"": 1,
    ""Japan"": 1,
    ""Vietnam"": 2,
    ""South Korea"": 1,
    ""China"": 3
  },
  ""account"": {
    ""Administr"": 20,
    ""Domain"": 3,
    ""Test"": 9,
    ""(empty)"": 4,
    ""root"": 8,
    ""hello"": 63,
    ""QMXFBfkJw"": 1,
    ""JjEOPT"": 1,
    ""TbEHym"": 1,
    ""beio"": 1,
    ""Administrator"": 2,
    ""cGvJXFWbJ"": 1,
    ""xDGNAl"": 1,
    ""WdKHOe"": 1,
    ""UutPodqZy"": 1,
    ""bxwsXi"": 1,
    ""iSqDZh"": 1,
    ""aXsBvwuqd"": 1,
    ""tLUpcq"": 1,
    ""KsLPzr"": 1
  },
  ""keyboard"": {
    ""Unknown"": 122
  },
  ""client_build"": {
    ""Unknown"": 122
  },
  ""client_name"": {
    ""Unknown"": 122
  },
  ""ip_type"": {
    ""proxy"": 21,
    ""Unknown"": 10,
    ""hosting"": 85,
    ""hosting & proxy"": 2,
    ""mobile"": 4
  }
}"
r8bwecxB,Blacklist,G90JMX195,JSON,Tuesday 12th of September 2023 05:37:57 PM CDT,4733917247
yFTn3nsY,Untitled,Rofyda_Elghadban1,C++,Tuesday 12th of September 2023 05:36:35 PM CDT," /*Rofyda Mohamed Hamed Hamed Elghadban*/
 //#include <bits/stdc++.h> 
 #include <iostream>
 #include <iomanip>
 #include <cmath>
 #include <algorithm>
 #include <cstdlib>
 #include <limits.h>
 #include <string>
 #include <vector>
 #include <map>
 #include <stack>
 #include <set>
 #include <deque>
 #include <fstream>
 #include <bitset>
 #include <cmath>
 #include <numeric>
 #include <cstring>
 #include <utility>
 #include <queue>

 /***********************************************************************************/

 #define ll long long
 #define ull unsigned long long
 #define pi 3.141592654
 #define NUM 1e18
 #define Mod  1'000'000'007
 #define fixed(n) fixed<<setprecision(n)
 #define cin(v) for(auto &i:v) cin >> i ;
 #define cout(v) for(auto &i:v) cout << i  <<"" "";
 #define vowel(x) (x=='e'||x=='a'||x=='i'||x=='o'||x=='u')
 #define small(x) (x>=97&&x<=122)
 #define capital(x) (x>=65&&x<=90)
 #define Tolower(s) transform(s.begin(),s.end(),s.begin(),::tolower);
 #define Toupper(s) transform(s.begin(),s.end(),s.begin(),::toupper); 
 #define all(v) ((v).begin()), ((v).end())
 #define allr(v) ((v).rbegin()), ((v).rend())
 #define updmax(a,b) a=max(a,b)
 #define updmin(a,b) a=min(a,b)
 #define ceil(a,b) ((a/b)+(a%b?1:0))
 /* asc -> 1 2 3 ,des -> 3 2 1 */
 
 /***********************************************************************************/

 using namespace std;

 void Rofyda_Elghadban(){
  #ifndef ONLINE_JUDGE   
    freopen(""input.txt"", ""r"", stdin), freopen(""output.txt"", ""w"", stdout);
   #endif
    ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);
 }

 void solve(){
 }

 ll prefix[10000001]{},mini=LLONG_MAX;

 int main(){
  Rofyda_Elghadban();
 //freopen(""input.txt"",""r"",stdin);
 //freopen(""output.txt"",""r"",stdout);
 //solve();
 
 int n,k;
 cin>>n>>k;
 vector<int>v(n+1);
 for(int i=1;i<n+1;i++){
  cin>>v[i];
 }
 ll l=1,r=l+k-1,idx=0;
 for(int i=1;i<=n;i++){
  prefix[i]=prefix[i-1]+v[i];
 }
 for(int i=l;i<=r;i++){
  if(mini>=prefix[r]-prefix[l-1]){
    mini=prefix[r]-prefix[l-1];
    idx=l;
  }
  l++;
  r++;
 }cout<<idx<<""\n"";









 return 0;
}

"
rtbua2W3,Eval 2,amitdutta121,C++,Tuesday 12th of September 2023 05:36:10 PM CDT,"#include <iostream>
#include <cstdlib>
#include <ctime>
#include<bitset>

using namespace std;

double eval(int *pj);

int* RandomSolutionGenerator(){
	int* solution = new int[100];
	
	for(int i=0; i<100; i++){
		solution[i] = rand() %2;
	}
	
	return solution;
}

double Evaluate(int* solution){
	return eval(solution);
}

void Modify(int* solution){
	int index = rand()%100;
	solution[index] = 1 - solution[index];
}



void Modify(int* solution, double mutationRate){
	for(int i=0; i<100; i++){
		double randomVal = static_cast<double>(rand())/ RAND_MAX;
		
		if(randomVal < mutationRate){
			solution[i] = 1- solution[i];
		}
	}
}

void PrintSolution(int* solution){
	for(int i=0; i<100; i++){
		cout << solution[i];
	}
	
	cout << endl;
}




int main()
{
	srand(time(0));
	
	int* solutionBase = RandomSolutionGenerator();
	double fitnessBase =  Evaluate(solutionBase);
	
	
	bool done = false;
	int* solutionNew;
	
	while(!done){
		solutionNew = new int[100];
		
		for(int i=0; i<100; i++){
			solutionNew[i] = solutionBase[i];
		}
		
		Modify(solutionNew, 0.01);
		
		
		double fitnessNew = Evaluate(solutionNew);
		
		cout << fitnessNew << endl;
		
		if(fitnessNew  >= fitnessBase){
			delete[] solutionBase;
			solutionBase = solutionNew;
			fitnessBase = fitnessNew;
		}
		
		
		if(fitnessNew >=70){
			done = true;
			PrintSolution(solutionNew);
		}
	}
	
	for(int i=0; i<1073741823; i++){
	 	    int number = i; // Replace with your integer value
		    int numBits = 30; // Number of bits for a 30-bit binary representation

		    std::bitset<30> binaryRepresentation(number);


		    for (int i = 0; i < numBits; ++i) {
			solutionNew[i] = binaryRepresentation[numBits - 1 - i];
		    }
		    double fitnessNew = Evaluate(solutionNew);
		    
		    cout << ""Iteration: ""<< i << "" Fitness: "" << fitnessNew <<endl;
		    if(fitnessNew >=100){
		    	break;
		    }
		    
	}
	
	delete[] solutionBase;
	
	return 0;
}"
gttzpS57,14. Password Generator,Spocoman,C++,Tuesday 12th of September 2023 05:22:49 PM CDT,"#include <iostream>
#include <cmath>

using namespace std;

int main() {
    int n, l;
    cin >> n >> l;

    for (int a = 1; a <= n; a++){
        for (int b = 1; b <= n; b++) {
            for (int c = 97; c < 97 + l; c++) {
                for (int d = 97; d < 97 + l; d++) {
                    for (int e = 1; e <= n; e++) {
                        if (a < e && e > b) {
                            cout << a << b << (char)c << (char)d << e << "" "";
                        }
                    }
                }
            }
        }
    }
    return 0;
}"
AgpwwcdR,13. Prime Pairs,Spocoman,C++,Tuesday 12th of September 2023 05:18:18 PM CDT,"#include <iostream>
#include <cmath>

using namespace std;

int main() {
    int firstStartNum, secondStartNum, firstEndNum, secondEndNum;
    cin >> firstStartNum >> secondStartNum >> firstEndNum >> secondEndNum;

    for (int i = firstStartNum; i <= firstStartNum + firstEndNum; i++) {
        for (int j = secondStartNum; j <= secondStartNum + secondEndNum; j++) {
            bool isFirstPrime = true;
            bool isSecondPrime = true;

            for (int k = 2; k <= sqrt(i); k++) {
                if (i % k == 0) {
                    isFirstPrime = false;
                    break;
                }
            }

            for (int k = 2; k <= sqrt(j); k++) {
                if (j % k == 0) {
                    isSecondPrime = false;
                    break;
                }
            }

            if (isFirstPrime && isSecondPrime) {
                cout << i << j << endl;
            }
        }
    }
    return 0;
}"
9tJdPWzA,12. The song of the wheels,Spocoman,C++,Tuesday 12th of September 2023 05:07:58 PM CDT,"#include <iostream>
#include<string>

using namespace std;

int main() {
    int number, counter = 0;
    cin >> number;

    string print = ""No!"";
    
    for (int a = 1; a <= 9; a++) {
        for (int b = 1; b <= 9; b++) {
            for (int c = 1; c <= 9; c++) {
                for (int d = 1; d <= 9; d++) {
                    if (a * b + c * d == number && a < b && c > d) {
                        cout << a << b << c << d << "" "";
                        counter++;
                        if (counter == 4) {
                            print = ""Password: "" + to_string(a) + to_string(b) + to_string(c) + to_string(d);
                        }
                    }
                }
            }
        }
    }
    cout << ""\n"" << print << endl;
    return 0;
}"
z1wxW9GE,Untitled,ProgMe,C++,Tuesday 12th of September 2023 05:06:20 PM CDT,"#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>

#define l first
#define r second

#define int int64_t
#define double long double

using namespace std;
using namespace __gnu_pbds;

std::mt19937_64 rnd(std::chrono::steady_clock::now().time_since_epoch().count());
std::uniform_real_distribution<double> rnd_double(0, 1);

int nextInt(int r) {  // [0; R)
    return rnd() % r;
}

int nextInt(int l, int r) {  // [L; R)
    return l + rnd() % (r - l);
}

double nextDouble() {  // [0; 1]
    return rnd_double(rnd);
}

double nextDouble(double r) {  // [0; R]
    return r * nextDouble();
}

double nextDouble(double l, double r) {  // [L; R]
    return l + (r - l) * nextDouble();
}

template <typename T>
using Orset = __gnu_pbds::tree<T, __gnu_pbds::null_type, std::less<T>, __gnu_pbds::rb_tree_tag,
        __gnu_pbds::tree_order_statistics_node_update>;

template <typename T>
using Ormultiset =
        __gnu_pbds::tree<T, __gnu_pbds::null_type, std::less_equal<T>, __gnu_pbds::rb_tree_tag,
                __gnu_pbds::tree_order_statistics_node_update>;

constexpr int N = 1e6 + 1;

array<char, N> L;
array<int, N> tin, tout, answers;
array<vector<int>, N> graph;

inline void addEdge(int v, int u) {
    graph[v].push_back(u);
    graph[u].push_back(v);
}

void getTree(vector<int> &euler, int l, int r) {
    int v = euler[l];
    int cur_idx = l + 1;

    while (cur_idx < r) {
        int u = euler[cur_idx];
        addEdge(v, u);
        getTree(euler, tin[u], tout[u]);
        cur_idx = tout[u] + 1;
    }
}

void dfs(int v = 0, int p = -1, int len = 1) {
    for (auto u : graph[v]) {
        if (u != p) {
            if (L[v] == L[u] && v != 0) {
                dfs(u, v, len + 1);
            } else {
                if (v != 0) {
                    answers[u] = len;
                }
                dfs(u, v);
            }
        }
    }
}

void runSolve() {
    int n;
    cin >> n;
    for (int i = 1; i <= n; ++i) {
        cin >> L[i];
    }

    vector<int> euler(2 * (n + 1));
    for (auto &i : euler) {
        cin >> i;
    }

    for (int i = 1; i <= 2 * n; ++i) {
        int v = euler[i];
        if (!tin[v]) {
            tin[v] = i;
        } else {
            tout[v] = i;
        }
    }

    getTree(euler, 0, 2 * n + 1);
    dfs();

    for (int i = 1; i <= n; i++) {
        cout << answers[i] << ' ';
    }
}

int32_t main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    int t = 1;
//    cin >> t;
    while (t--) {
        runSolve();
    }
}
"
CFn0vW7p,Untitled,Rofyda_Elghadban1,C++,Tuesday 12th of September 2023 04:57:37 PM CDT," /*Rofyda Mohamed Hamed Hamed Elghadban*/
 //#include <bits/stdc++.h> 
 #include <iostream>
 #include <iomanip>
 #include <cmath>
 #include <algorithm>
 #include <cstdlib>
 #include <limits.h>
 #include <string>
 #include <vector>
 #include <map>
 #include <stack>
 #include <set>
 #include <deque>
 #include <fstream>
 #include <bitset>
 #include <cmath>
 #include <numeric>
 #include <cstring>
 #include <utility>
 #include <queue>

 /***********************************************************************************/

 #define ll long long
 #define ull unsigned long long
 #define pi 3.141592654
 #define NUM 1e18
 #define Mod  1'000'000'007
 #define fixed(n) fixed<<setprecision(n)
 #define cin(v) for(auto &i:v) cin >> i ;
 #define cout(v) for(auto &i:v) cout << i  <<"" "";
 #define vowel(x) (x=='e'||x=='a'||x=='i'||x=='o'||x=='u')
 #define small(x) (x>=97&&x<=122)
 #define capital(x) (x>=65&&x<=90)
 #define Tolower(s) transform(s.begin(),s.end(),s.begin(),::tolower);
 #define Toupper(s) transform(s.begin(),s.end(),s.begin(),::toupper); 
 #define all(v) ((v).begin()), ((v).end())
 #define allr(v) ((v).rbegin()), ((v).rend())
 #define updmax(a,b) a=max(a,b)
 #define updmin(a,b) a=min(a,b)
 #define ceil(a,b) ((a/b)+(a%b?1:0))
 /* asc -> 1 2 3 ,des -> 3 2 1 */
 
 /***********************************************************************************/

 using namespace std;

 void Rofyda_Elghadban(){
  #ifndef ONLINE_JUDGE   
    freopen(""input.txt"", ""r"", stdin), freopen(""output.txt"", ""w"", stdout);
   #endif
    ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);
 }

 void solve(){
 }

 ll prefix[10000001]{};

 int main(){
  Rofyda_Elghadban();
 //freopen(""input.txt"",""r"",stdin);
 //freopen(""output.txt"",""r"",stdout);
 //solve();
 
 int n,k;
 cin>>n>>k;
 vector<int>v(n+1);
 for(int i=1;i<n+1;i++){
  cin>>v[i];
 }
 int l=1,r=l+k-1,mini=INT_MAX,idx=0;
 for(int i=1;i<=n;i++){
  prefix[i]=prefix[i-1]+v[i];
 }
 while(r<=n){
  if(mini>=prefix[r]-prefix[l-1]){
    mini=prefix[r]-prefix[l-1];
    idx=l;
  }
  l++;
  r++;
 }cout<<idx<<""\n"";









 return 0;
}

"
K6tZPa4A,11. HappyCat Parking,Spocoman,C++,Tuesday 12th of September 2023 04:41:56 PM CDT,"#include <iostream>

using namespace std;

int main() {
    int days, hours;
    cin >> days >> hours;

    double totalPrice = 0;

    for (int i = 1; i <= days; i++) {
        double dayPrice = 0;

        for (int j = 1; j <= hours; j++) {

            if (i % 2 == 0 && j % 2 == 1) {
                dayPrice += 2.50;
            }
            else if (i % 2 == 1 && j % 2 == 0) {
                dayPrice += 1.25;
            }
            else {
                dayPrice++;
            }
        }
        totalPrice += dayPrice;
        printf(""Day: %i - %.2f leva\n"", i, dayPrice);
    }
    printf(""Total: %.2f leva\n"", totalPrice);
    return 0;
}"
4FwfCbB9,10. Profit,Spocoman,C++,Tuesday 12th of September 2023 04:33:29 PM CDT,"#include <iostream>

using namespace std;

int main() {
   
    int oneBGNCoinCount, twoBGNCoinCount, fiveBGNCoinCount, sum;
    cin >> oneBGNCoinCount >> twoBGNCoinCount >> fiveBGNCoinCount >> sum;

    for (int i = 0; i <= oneBGNCoinCount; i++) {
        for (int j = 0; j <= twoBGNCoinCount; j++) {
            for (int k = 0; k <= fiveBGNCoinCount; k++) {
                if (i * 1 + j * 2 + k * 5 == sum) {
                    cout << i << "" * 1 lv. + "" << j << "" * 2 lv. + "" << k << "" * 5 lv. = "" << sum << "" lv.\n"";
                }
            }
        }
    }
    return 0;
}"
QG0NG8Z8,Pro for BloodHoneySin,althindor,CSS,Tuesday 12th of September 2023 04:24:43 PM CDT,"/* Profile by AlthIndor */

:root {
    --level1: #000000;
    --level2: #161616;
    --level3: #2B2B2B;
    --level4: #D9D9D9;
    --level5: #FFFFFF;
    --accent: #0080FF;
}

html, body {
    background: url('https://i.imgur.com/dxS5Cwd.png') fixed center / contain no-repeat #000000;
    height: unset;
    min-height: 100vh;
}

::selection {
    background: var(--level5);
    color: var(--accent);
}

/* Fonts */

@font-face {
    font-family: 'Amarante';
    font-style: normal;
    font-weight: 400;
    src: url('https://fonts.gstatic.com/s/amarante/v28/xMQXuF1KTa6EvGx9bp-wAXs.woff2') format('woff2');
}

@font-face {
    font-family: 'PT Serif';
    font-style: normal;
    font-weight: 400;
    src: url('https://fonts.gstatic.com/s/ptserif/v18/EJRVQgYoZZY2vCFuvAFWzr8.woff2') format('woff2');
}

@font-face {
    font-family: 'PT Serif';
    font-style: normal;
    font-weight: 700;
    src: url('https://fonts.gstatic.com/s/ptserif/v18/EJRSQgYoZZY2vCFuvAnt66qSVys.woff2') format('woff2');
}

/* Header */

#viewer #gaia_header, #viewer #gaia_header ul {background: none !important;}
#viewer #gaia_header {position: absolute !important;}
#gaia_header li {margin: 0 5px;}
#gaia_header li.spacer {display: none !important;}

#viewer #gaia_header ul {
    width: auto !important;
    font: 0/40px 'Amarante', cursive !important;
    padding: 0 10px !important;
}

#gaia_header #header_right {
    float: right;
    display: grid !important;
    grid-auto-flow: column;
}
#header_right li:nth-of-type(4) {grid-column: 2;}

#gaia_header a, #gaia_header a::before {font-size: 14px !important;}
#gaia_header a[href*='edit'], #gaia_header a[href*='report'], #gaia_header a[href*='logout'] {font-size: 0 !important;}
#gaia_header a[href*='edit']::before {content: 'Edit Mine';}
#gaia_header a[href*='report']::before {content: 'Report This';}
#gaia_header a[href*='logout']::before {content: 'Logout';}

#gaia_header a {
    color: var(--level5) !important;
    font-weight: 400;
    text-decoration: none;
    text-transform: uppercase;
}

#gaia_header a:hover {color: var(--accent) !important;}

#header_left img {
    -webkit-mask: url('https://i.imgur.com/5FTB40o.png') no-repeat;
    mask: url('https://i.imgur.com/5FTB40o.png') no-repeat;
    background: var(--level5);
    width: 0;
    height: 17px;
    padding: 0 37px 0 0;
}
#header_left li:nth-of-type(2) a:hover img {background: var(--accent);}

/* Columns */

#columns {
    float: none;
    width: max-content;
    font-size: 0;
    margin: 200px auto 50px auto;
    position: unset;
}
#column_1, #column_3 {width: 240px;}
#column_1 {margin: 0;}

#column_2 {
    width: 540px;
    margin: 0 20px;
}

/* Scrollbars */

#columns ::-webkit-scrollbar {width: 0;}
.panel {scrollbar-width: none;}

/* Panels */

.panel {
    background: #161616C0;
    backdrop-filter: blur(10px);
    color: var(--level4);
    font: 11px/1.7 'PT Serif', serif;
    margin: 0 0 20px 0;
    padding: 0 20px 20px 20px;
    border: 5px solid transparent;
    box-shadow: 0 0 0 1px var(--level1) inset, 0 2px 5px #000000;
    overflow: visible;
}
.panel:last-child {margin: 0;}

.panel h2 {
    background: var(--level1);
    height: 25px;
    color: var(--level5);
    font: 16px/25px 'Amarante', cursive;
    margin: 0 -20px 19px -20px;
    padding: 5px 5px 5px 10px;
}

.panel img:not(.avatarImage), .panel iframe {max-width: 100% !important;}
.panel h3 {border-bottom: 1px dotted currentColor;}
.panel p {margin: 0;}

.panel a {
    color: var(--accent);
    text-decoration: dotted underline;
}
.panel a:hover {color: inherit;}

/* Misc Panel Stuff */

#id_details .forum_userstatus {margin: 15px auto;}
#id_journal p {margin: 0 0 15px 0;}
#id_interests h3, #id_store p {margin: 15px 0 0 0;}
#id_store h3, #id_store p:first-of-type {display: none;}

#id_interests a {text-transform: capitalize;}
#id_interests li::after {content: ',';}
#id_interests li:nth-of-type(n+2):last-child::before {content: 'and ';}
#id_interests li:last-child::after {content: '.';}

/* Avatar Menu */

.forum_userstatus, #avatar_menu {
    background: var(--level4);
    width: 120px;
    border: none;
    box-sizing: border-box;
    overflow: hidden;
}

.forum_userstatus {
    height: 25px;
    padding: 5px;
    border-radius: 3px;
    contain: layout;
}
.forum_userstatus .statuslinks {background: none;}

.forum_userstatus .statuslinks span {
    color: var(--level1) !important;
    font: 400 12px/15px 'Amarante', cursive !important;
    text-transform: uppercase;
}

.pushBox {
    background: url('https://i.imgur.com/UzAXOFf.png') 93px -101px no-repeat;
    width: 100%;
    height: 100%;
    position: absolute;
    top: 0;
    left: 0;
}

#avatar_menu  {
    margin-top: -3px;
    padding-top: 3px;
    border-radius: 0 0 3px 3px;
}

#avatar_menu a {
    color: var(--level1);
    font: 10px 'PT Serif', serif;
    text-transform: capitalize;
    padding: 4px;
}

#avatar_menu a:hover {
    background: var(--level2);
    color: var(--level5);
}

#avatar_menu .menu_seperator {
    background: var(--level3) !important;
    width: 118px !important;
    margin: 1px !important;
}

/* Comments */

#alerts_banner, .deletecomment {display: none;}
#alert_container {display: contents;}
#id_comments dd:last-of-type {margin: 0;}

#id_comments dt {
    height: unset;
    line-height: normal;
    margin: 0 0 5px 0;
    padding: 0 0 5px 0;
    border-bottom: 1px dotted currentColor;
}
#id_comments dt a {text-decoration: none;}

#id_comments dd {
    display: grid;
    grid-template: max-content / 60px calc(100% - 60px);
    margin: 0 0 20px 0;
}

#id_comments .dropBox {
    background: var(--level4);
    width: 48px;
    height: 48px;
    margin: 3px 0 0 0;
    border: 1px solid transparent;
    border-radius: 3px;
    overflow: hidden;
}

#id_comments .avatarImage {
    width: 120px;
    height: 150px;
    margin: -30px 0 0 -47px;
}

/* Comments Links */

#id_comments h2 + div, #id_comments h2 ~ p {
    background: var(--level3);
    width: 40px;
    height: 25px;
    text-align: center;
    position: absolute;
    top: 5px;
    border-radius: 3px;
}
#id_comments h2 + div {right: 50px;}
#id_comments h2 ~ p {right: 5px;}

#id_comments h2 + div a, #id_comments h2 ~ p a {
    color: var(--level5);
    font-size: 0;
    text-decoration: none;
}

#id_comments h2 + div a::before, #id_comments h2 ~ p a::before {font: 12px/25px 'Amarante', cursive;}
#id_comments h2 + div a::before {content: 'POST';}
#id_comments h2 ~ p a::before {content: 'VIEW';}

/* Equip and Wish Lists */

#id_equipment, #id_wishlist {
    display: flex;
    flex-flow: row wrap;
    gap: 10px;
    max-height: 205px;
    overflow: hidden auto;
    scroll-padding-top: 54px;
    scroll-snap-type: y mandatory;
}
#id_equipment .clear, #id_wishlist .clear, .premium_sparkle {display: none;}

#id_equipment .item, #id_wishlist .item {
    position: relative;
    scroll-snap-align: start;
}

#id_equipment h2, #id_wishlist h2 {
    flex: 1 0 100%;
    margin-bottom: 9px;
    position: sticky;
    top: 0;
    left: -20px;
    z-index: 1;
}

#id_equipment .item a, #id_wishlist .item a {
    background: var(--level3);
    display: block;
    padding: 5px;
    border-radius: 3px;
}
#id_equipment a:hover, #id_wishlist a:hover {background: var(--accent);}

.owner_checkmark {
    background: var(--level5);
    margin: 0;
    padding: 2px;
    bottom: -2px;
    left: -2px;
    border: 1px solid var(--level0);
    z-index: unset;
}

/* Friends */

#id_friends h2 + div, #id_friends h2 ~ p {display: none;}
#id_friends li, #id_friends .dropBox {border-radius: 3px;}

#id_friends ul {
    display: flex;
    flex-flow: row wrap;
    gap: 10px;
}

#id_friends li {
    background: var(--level3);
    height: 90px;
    position: relative;
    overflow: hidden;
}
#id_friends li:hover {background: var(--accent);}

#id_friends p a {
    width: 100%;
    height: 100%;
    color: inherit;
    text-decoration: none;
    position: absolute;
    line-height: 150px;
    top: 0;
    left: 0;
}

#id_friends .dropBox {
    background: var(--level4);
    width: 48px;
    margin: 10px auto;
    border: 1px solid transparent;
}

/* Visitors */

#id_footprints .item {
    display: flex;
    flex-flow: row nowrap;
}

#id_footprints .item a {
    max-width: 360px;
    text-overflow: ellipsis;
    white-space: nowrap;
    overflow: hidden;
    order: -1;
}

#id_footprints .item::before {
    content: ' visited ';
    white-space: pre;
}
#id_footprints .item::after {content: '.';}

:is(#column_1, #column_3) #id_footprints .item a {max-width: 110px;}
:is(#column_1, #column_3) #id_footprints .item::before {content: ' ';}

/* Misc */

#pictures_container, #texts_container {
    position: absolute;
    top: 200px;
    left: 50%;
}

.spoiler-revealed, .spoiler-control {border-radius: 3px;}
.spoiler-wrapper {padding: 0;}
.spoiler-control-hide {margin: 0 0 10px 0;}

.spoiler-revealed {
    padding: 10px;
    border: 1px dotted currentColor;
}

.spoiler-control {
    background: var(--level3);
    width: 100px;
    height: 25px;
    color: inherit;
    font: inherit;
    border: none;
}
.spoiler-control:hover {background: var(--accent);}"
NwnfLw84,Untitled,Rofyda_Elghadban1,C++,Tuesday 12th of September 2023 04:23:39 PM CDT," /*Rofyda Mohamed Hamed Hamed Elghadban*/
 //#include <bits/stdc++.h> 
 #include <iostream>
 #include <iomanip>
 #include <cmath>
 #include <algorithm>
 #include <cstdlib>
 #include <limits.h>
 #include <string>
 #include <vector>
 #include <map>
 #include <stack>
 #include <set>
 #include <deque>
 #include <fstream>
 #include <bitset>
 #include <cmath>
 #include <numeric>
 #include <cstring>
 #include <utility>
 #include <queue>

 /***********************************************************************************/

 #define ll long long
 #define ull unsigned long long
 #define pi 3.141592654
 #define NUM 1e18
 #define Mod  1'000'000'007
 #define fixed(n) fixed<<setprecision(n)
 #define cin(v) for(auto &i:v) cin >> i ;
 #define cout(v) for(auto &i:v) cout << i  <<"" "";
 #define vowel(x) (x=='e'||x=='a'||x=='i'||x=='o'||x=='u')
 #define small(x) (x>=97&&x<=122)
 #define capital(x) (x>=65&&x<=90)
 #define Tolower(s) transform(s.begin(),s.end(),s.begin(),::tolower);
 #define Toupper(s) transform(s.begin(),s.end(),s.begin(),::toupper); 
 #define all(v) ((v).begin()), ((v).end())
 #define allr(v) ((v).rbegin()), ((v).rend())
 #define updmax(a,b) a=max(a,b)
 #define updmin(a,b) a=min(a,b)
 #define ceil(a,b) ((a/b)+(a%b?1:0))
 /* asc -> 1 2 3 ,des -> 3 2 1 */
 
 /***********************************************************************************/

 using namespace std;

 void Rofyda_Elghadban(){
  #ifndef ONLINE_JUDGE   
    freopen(""input.txt"", ""r"", stdin), freopen(""output.txt"", ""w"", stdout);
   #endif
    ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);
 }

 void solve(){
 }

 ll prefix[10000001]{};

 int main(){
  Rofyda_Elghadban();
 //freopen(""input.txt"",""r"",stdin);
 //freopen(""output.txt"",""r"",stdout);
 //solve();
 
 int n,k;
 cin>>n>>k;
 vector<int>v(n+1);
 for(int i=1;i<n+1;i++){
  cin>>v[i];
 }
 int l=1,r=l+k-1,mini=INT_MAX,idx=0;
 for(int i=1;i<=n;i++){
  prefix[i]=prefix[i-1]+v[i];
 }
 for(int i=l;i<=r;i++){
  if(mini>=prefix[r]-prefix[l-1]){
    mini=prefix[r]-prefix[l-1];
    idx=l;
  }
  l++;
  r++;
 }cout<<idx<<""\n"";









 return 0;
}

"
dzWdBvhA,09. Sum of Two Numbers,Spocoman,C++,Tuesday 12th of September 2023 04:22:44 PM CDT,"#include <iostream>

using namespace std;

int main() {
   
    int firstNum, secondNum, magicNum, combinations = 0;
    cin >> firstNum >> secondNum >> magicNum;

    bool isFound = false;

    for (int i = firstNum; i <= secondNum; i++) {
        for (int j = firstNum; j <= secondNum; j++) {
            combinations++;
            if (i + j == magicNum) {
                cout << ""Combination N:"" << combinations << "" ("" << i << "" + "" << j << "" = "" << magicNum << "")"" << endl;
                isFound = true;
                break;
            }
        }
        if (isFound) {
            break;
        }
    }
    if (isFound == false) {
        cout << combinations << "" combinations - neither equals "" << magicNum << endl;
    }

    return 0;
}"
yhYuX1fw,pinestore-cc,Xelostar,Lua,Tuesday 12th of September 2023 04:20:07 PM CDT,"
local apiPath = ""https://pinestore.cc/api/""

if not fs.exists(""installed"") then
	fs.makeDir(""installed"")
end

local width, height = term.getSize()
local renderWindow = window.create(term.current(), 1, 1, width, height)
local oldTerm = term.redirect(renderWindow)
local maxWidth = 70

local function updateTermSize()
	width, height = oldTerm.getSize()
	local newW = math.min(width, maxWidth)
	renderWindow.reposition(1 + math.floor((width - newW)*0.5 + 0.5), 1, newW, height)
	oldTerm.setBackgroundColor(colors.black)
	oldTerm.clear()
end
updateTermSize()

local online = true

local categories = {
	""fun"",
	""tools"",
	""turtle"",
	""audio"",
	""other"",
}
local selectedCategory = 1
local selectedProject = 1

local projectActionsOpened = false
local projectActionSelected = 1
local searchOpened = false
local searchQuery = """"
local searchResultsOpened = false

local function getAPI(path)
	local res = http.get(apiPath .. path)
	if not res then
		online = false
		return
	end
	local data = res.readAll()
	res.close()
	return textutils.unserialiseJSON(data)
end

function postAPI(path, body)
	local res = http.post(apiPath .. path, textutils.serialiseJSON(body), {[""Content-Type""] = ""application/json""})
	if not res then
		return
	end
	local data = res.readAll()
	res.close()
	return textutils.unserialiseJSON(data)
end

local installedInfo = {
	projects = {},
}
if fs.exists(""installed.json"") then
	local h = fs.open(""installed.json"", ""r"")
	installedInfo = textutils.unserialiseJSON(h.readAll())
	h.close()
end
local function saveInstalled()
	local encoded = textutils.serialiseJSON(installedInfo)
	local h = fs.open(""installed.json"", ""w"")
	h.write(encoded)
	h.close()
end

local searchResults = {}
local projectsData = getAPI(""projects"")
local projects = projectsData.projects
if not projects then
	local ps = {}
	for id, project in pairs(installedInfo.projects) do
		ps[#ps+1] = project
	end
	projects = ps
else
	for i = 1, #projects do
		local project = projects[i]
		if installedInfo.projects[tostring(project.id)] then
			installedInfo.projects[tostring(project.id)].downloads = project.downloads
		end
	end
	saveInstalled()
end
for i = #projects, 1, -1 do
	local project = projects[i]
	if not project.install_command or not project.target_file then
		table.remove(projects, i)
	end
end

local categoryProjects = {}
for i = 1, #projects do
	local project = projects[i]
	if not project.category then project.category = ""Other"" end
	if not categoryProjects[project.category] then
		categoryProjects[project.category] = {}
	end
	categoryProjects[project.category][#categoryProjects[project.category]+1] = project
end
for category, projectList in pairs(categoryProjects) do
	table.sort(projectList, function(a, b)
		return b.downloads < a.downloads
	end)
end

local function installProject(project)
	-- redirect term to old one
	term.redirect(oldTerm)

	-- override fs methods
	local projectPath = ""installed/"" .. project.id .. ""/""
	fs.makeDir(projectPath)
	local oldFSOpen = fs.open
	local oldFSMakeDir = fs.makeDir
	local oldFSExists = fs.exists
	function fs.open(path, mode)
		-- print(""open "" .. path)
		-- sleep(0.5)
		if path:sub(1, 12) == ""rom/programs"" then
			return oldFSOpen(path, mode)
		end
		return oldFSOpen(projectPath .. path, mode)
	end
	function fs.makeDir(path)
		return oldFSMakeDir(projectPath .. path)
	end
	function fs.exists(path)
		if path:sub(1, 12) == ""rom/programs"" then
			return oldFSExists(path)
		end
		return oldFSExists(projectPath .. path)
	end

	-- actually run the install command
	local success, res = xpcall(shell.run, debug.traceback, project.install_command)

	-- return old fs methods
	fs.open = oldFSOpen
	fs.makeDir = oldFSMakeDir
	fs.exists = oldFSExists

	-- use render window again
	oldTerm = term.redirect(renderWindow)

	updateTermSize()

	if success then
		-- set project info to installed
		installedInfo.projects[tostring(project.id)] = project
		saveInstalled()
		postAPI(""newdownload"", {projectId = project.id})
	else
		error(res)
	end
end

local function startProject(project)
	-- override fs methods
	local projectPath = ""installed/"" .. project.id .. ""/""
	local oldFSOpen = fs.open
	local oldFSMakeDir = fs.makeDir
	local oldFSExists = fs.exists
	local oldFSList = fs.list
	function fs.open(path, mode)
		if path:sub(1, 12) == ""rom/programs"" then
			return oldFSOpen(path, mode)
		end
		return oldFSOpen(projectPath .. path, mode)
	end
	function fs.makeDir(path)
		return oldFSMakeDir(projectPath .. path)
	end
	function fs.exists(path)
		return oldFSExists(projectPath .. path)
	end
	function fs.list(path)
		return oldFSList(projectPath .. path)
	end

	term.redirect(oldTerm)
	local success, res = xpcall(function()
		local success = shell.run(project.target_file)

		if not success then
			sleep(1)
			term.setTextColor(colors.white)
			print(""\nPress any key to continue..."")
			os.pullEvent(""key"")
		end
	end, debug.traceback)

	-- return old fs methods
	fs.open = oldFSOpen
	fs.makeDir = oldFSMakeDir
	fs.exists = oldFSExists
	fs.list = oldFSList

	if not success then
		if res:sub(1, 10) ~= ""Terminated"" then
			term.setBackgroundColor(colors.black)
			term.setTextColor(colors.red)
			term.clear()
			term.setCursorPos(1, 1)
			print(res)
			term.setTextColor(colors.white)
			sleep(1)
			print(""\nPress any key to continue..."")
			os.pullEvent(""key"")
		end
	end

	term.redirect(renderWindow)

	updateTermSize()
end

local function runSearch()
	local searchData = getAPI(""search?q="" .. textutils.urlEncode(searchQuery))
	searchResults = searchData.projects
	searchOpened = false
	searchResultsOpened = true
	selectedProject = 1
	searchQuery = """"
end

local function drawCategories()
	term.setCursorPos(1, 2)
	for nr = 1, #categories do
		if nr == selectedCategory then
			term.setTextColor(colors.lime)
		else
			term.setTextColor(colors.green)
		end

		local str = ""["" .. nr .. "" "" .. categories[nr] .. ""] ""
		local x, y = term.getCursorPos()
		if x + #str - 2 > width then
			print("""")
		end
		term.write(str)
	end
end

local function drawProjects(projects)
	print("""")
	local startX, startY = term.getCursorPos()
	local width, height = term.getSize()
	local linesAvailable = height - startY - 1
	local startI = math.max(1, selectedProject - linesAvailable + 1)
	for i = startI, math.min(startI + linesAvailable, #projects) do
		if i == selectedProject then
			term.setTextColor(colors.yellow)
			term.write(""> "")
		else
			term.write(""  "")
		end

		local project = projects[i]
		if installedInfo.projects[tostring(project.id)] then
			term.setTextColor(colors.lightBlue)
		else
			term.setTextColor(colors.white)
		end
		term.write(project.name)

		term.setTextColor(colors.lightGray)
		term.write("" by "" .. project.owner_name)

		local showDownloads = true
		local downText = "" downloads""
		if project.downloads == 1 then
			downText = "" download ""
		end
		if width <= 25 then
			showDownloads = false
		elseif width <= 29 then
			downText = """"
		elseif width <= 42 then
			downText = "" dls""
			if project.downloads == 1 then
				downText = "" dl ""
			end
		end
		if showDownloads then
			local downloadsText = project.downloads .. downText
			local x, y = term.getCursorPos()
			term.setCursorPos(width - #downloadsText + 1, y)
			print(downloadsText)
		else
			print("""")
		end
	end
end

local function drawProjectOptions()
	print("""")

	local projects = categoryProjects[categories[selectedCategory]] or {}
	if searchResultsOpened then
		projects = searchResults
	end
	local project = projects[selectedProject]
	local installed = installedInfo.projects[tostring(project.id)]

	for i = 1, installed and 3 or 2 do
		if i == projectActionSelected then
			term.setTextColor(colors.yellow)
			term.write(""> "")
		else
			term.write(""  "")
		end

		term.setTextColor(colors.white)
		if installed then
			if i == 1 then
				print(""Run"")
			elseif i == 2 then
				print(""Uninstall"")
			elseif i == 3 then
				print(""Back"")
			end
		else
			if i == 1 then
				print(""Install"")
			elseif i == 2 then
				print(""Back"")
			end
		end
	end

	print("""")

	term.setTextColor(colors.white)
	term.write(project.name)
	term.setTextColor(colors.lightGray)
	print("" by "" .. project.owner_name)
	term.setTextColor(colors.gray)
	print(""v"" .. project.version .. "" "" .. os.date(""%B %d, %Y"", math.max(project.date_added, project.date_updated) / 1000))
	print("""")
	term.setTextColor(colors.lime)

	local stoppedScroll = false
	local scrollOld = term.scroll
	function term.scroll()
		stoppedScroll = true
	end
	print(project.description)
	term.scroll = scrollOld
	if stoppedScroll then
		local width, height = term.getSize()
		term.setCursorPos(1, height)
		term.clearLine()
	end
end

local function selectProjectAction()
	local projects = categoryProjects[categories[selectedCategory]] or {}
	if searchResultsOpened then
		projects = searchResults
	end
	local project = projects[selectedProject]
	local installed = installedInfo.projects[tostring(project.id)]
	local i = projectActionSelected

	if installed then
		if i == 1 then
			startProject(project)
			projectActionsOpened = false
		elseif i == 2 then
			fs.delete(""installed/"" .. project.id)
			installedInfo.projects[tostring(project.id)] = nil
			saveInstalled()
			projectActionsOpened = false
		elseif i == 3 then
			projectActionsOpened = false
		end
	else
		if i == 1 then
			installProject(project)
		elseif i == 2 then
			projectActionsOpened = false
		end
	end
end

local function drawSearch()
	term.setTextColor(colors.lightGray)
	print(""\n\nSearch query:"")
	term.setTextColor(colors.white)
	local lineCount = math.ceil(#searchQuery / width)
	for i = 1, lineCount do
		term.write(searchQuery:sub(1 + width*(i-1), width + width*(i-1)))
		if i < lineCount then
			local x, y = term.getCursorPos()
			term.setCursorPos(1, y+1)
		end
	end
	term.setCursorBlink(true)
end

local function drawSearchResults()
	term.setTextColor(colors.white)
	print(""\n\nSearch results:"")
	drawProjects(searchResults)
end

local function drawMain()
	term.setBackgroundColor(colors.black)
	term.clear()

	term.setTextColor(colors.yellow)
	term.setCursorPos(1, 1)
	local width, height = term.getSize()
	if width > 37 then
		term.write(""PineStore Console v1.0"")
	elseif width > 31 then	
		term.write(""PineStore Console"")
	elseif width > 25 then
		term.write(""PineStore C."")
	else
		term.write(""PStore C."")
	end
	if not online then
		term.setTextColor(colors.orange)
		term.write("" offline mode"")
	end
	term.setCursorBlink(false)

	if searchOpened then
		local searchText = ""[TAB close]""
		term.setCursorPos(width - #searchText + 1, 1)
		term.write(searchText)

		drawSearch()
	elseif projectActionsOpened then
		drawProjectOptions()
	elseif searchResultsOpened then
		drawSearchResults()
	else
		if online then
			local searchText = ""[TAB search]""
			term.setCursorPos(width - #searchText + 1, 1)
			term.write(searchText)
		end

		drawCategories()
		local projects = categoryProjects[categories[selectedCategory]] or {}
		drawProjects(projects)
	end

	renderWindow.setVisible(true)
	renderWindow.setVisible(false)
end

function runStore()
	while true do
		drawMain()

		-- if searchOpened then
		-- 	local searchText = ""[TAB close]""
		-- 	term.setCursorPos(width - #searchText, 1)
		-- 	term.write(searchText)
	
		-- 	drawSearch()
		-- elseif searchResultsOpened then
		-- 	drawSearchResults()
		-- elseif projectActionsOpened then
		-- 	drawProjectOptions()
		-- else

		local event, key, x, y = os.pullEvent()
		if event == ""key"" then
			if searchOpened then
				if key == keys.tab then
					searchOpened = false
				elseif key == keys.enter then
					runSearch()
				elseif key == keys.backspace then
					searchQuery = searchQuery:sub(1, -2)
				end
			elseif projectActionsOpened then
				if key == keys.up or key == keys.w then
					projectActionSelected = math.max(1, projectActionSelected - 1)
				elseif key == keys.down or key == keys.s then
					local projects = categoryProjects[categories[selectedCategory]] or {}
					if searchResultsOpened then
						projects = searchResults
					end
					local project = projects[selectedProject]
					local installed = installedInfo.projects[tostring(project.id)]
					projectActionSelected = math.max(1, math.min(installed and 3 or 2, projectActionSelected + 1))
				elseif key == keys.backspace or key == keys.grave then
					projectActionsOpened = false
				elseif key == keys.enter or key == keys.space then
					selectProjectAction()
				end
			elseif searchResultsOpened then
				if key == keys.up or key == keys.w then
					selectedProject = math.max(1, selectedProject - 1)
				elseif key == keys.down or key == keys.s then
					selectedProject = math.max(1, math.min(#searchResults, selectedProject + 1))
				elseif key == keys.enter or key == keys.space then
					if #searchResults > 0 then
						projectActionsOpened = true
						projectActionSelected = 1
					end
				elseif key == keys.backspace or key == keys.grave or key == keys.tab then
					searchResultsOpened = false
				end
			else
				if key >= keys.one and key <= keys.nine then
					selectedCategory = math.max(1, math.min(#categories, key - keys.one + 1))
				elseif key == keys.left or key == keys.a then
					selectedCategory = math.max(1, selectedCategory - 1)
				elseif key == keys.right or key == keys.d then
					selectedCategory = math.max(1, math.min(#categories, selectedCategory + 1))
				elseif key == keys.up or key == keys.w then
					selectedProject = math.max(1, selectedProject - 1)
				elseif key == keys.down or key == keys.s then
					local projects = categoryProjects[categories[selectedCategory]] or {}
					selectedProject = math.max(1, math.min(#projects, selectedProject + 1))
				elseif key == keys.enter or key == keys.space then
					projectActionsOpened = true
					projectActionSelected = 1
				elseif key == keys.tab and online then
					searchOpened = true
				end
			end
		elseif event == ""char"" then
			if key ~= ""`"" then
				searchQuery = searchQuery .. key
			end
		elseif event == ""term_resize"" then
			updateTermSize()
		end
	end
end

local success, res = xpcall(runStore, debug.traceback)
term.redirect(oldTerm)
if not success then
	if type(res) == ""string"" and res:sub(1, 10) == ""Terminated"" then
		return
	end
	term.setBackgroundColor(colors.black)
	term.setTextColor(colors.red)
	term.clear()
	term.setCursorPos(1, 1)
	print(res)
	term.setTextColor(colors.white)
end"
J2U71Msq,08. Secret Door's Lock,Spocoman,C++,Tuesday 12th of September 2023 04:14:03 PM CDT,"#include <iostream>

using namespace std;

int main() {
   
    int a, b, c;
    cin >> a >> b >> c;

    for (int i = 2; i <= a; i++) {
        for (int j = 2; j <= b; j++) {
            for (int x = 2; x <= c; x++) {
                if (i % 2 == 0 && x % 2 == 0 && (j == 2 || j == 3 || j == 5 || j == 7)) {
                    cout << i << "" "" << j << "" "" << x << endl;
                }
            }
        }
    }
    return 0;
}"
nRHjJePu,07. Safe Passwords Generator,Spocoman,C++,Tuesday 12th of September 2023 04:10:22 PM CDT,"#include <iostream>

using namespace std;

int main() {
   
    int a, b, passCount;
    cin >> a >> b >> passCount;

    int charA = 35;
    int charB = 64;

    for (int j = 1; j <= a; j++) {
        for (int x = 1; x <= b; x++) {
            if (charA == 56) {
                charA = 35;
            }
            if (charB == 97) {
                charB = 64;
            }
            cout << (char)charA << (char)charB << j << x << (char)charB << (char)charA << ""|"";
            passCount--;
            charA++;
            charB++;

            if (passCount == 0)
            {
                break;
            }
        }
        if (passCount == 0)
        {
            break;
        }
    }
    return 0;
}"
yxJKUAi8,Untitled,loRes228,Make,Tuesday 12th of September 2023 04:01:24 PM CDT,"
VENV = venv
REQS_FILE = requirements.txt
APP_DIR = app


ifeq ($(OS), Windows_NT)
	BIN = $(VENV)/Scripts
	PYTHON = python.exe
	MYPY = mypy.exe
else
	BIN = $(VENV)/bin
	PYTHON = python3
	MYPY = mypy
endif


VENV_PYTHON = $(BIN)/$(PYTHON)
VENV_MYPY = $(BIN)/$(MYPY)


.PHONY: lint
lint:
	@$(VENV_MYPY) $(APP_DIR)


.PHONY: run
run:
	@$(VENV_PYTHON) $(APP_DIR)


.PHONY: clean
clean:
	@echo ""Cleaning __pycache__ in $(APP_DIR)...""
	@find $(APP_DIR) -type d -name  ""__pycache__"" -exec rm -r {} +
	@echo ""Cleanup completed.""


.PHONY: fullclean
fullclean:
	@echo ""Cleaning __pycache__ in all directories...""
	@find . -type d -name  ""__pycache__"" -exec rm -r {} +
	@echo ""Cleaning .mypy_cache...""
	@rm -rf "".mypy_cache""
	@echo ""Full cleanup completed.""


venv:
	@echo ""Creating virtual environment...""
	@$(PYTHON) -m venv $(VENV)
	@echo ""Virtual environment '$(VENV)' created.""


reqinstall: $(REQS_FILE)
	@echo ""Installing requirements from $(REQS_FILE)...""
	@$(VENV_PYTHON) -m pip install -r $(REQS_FILE)


setup: venv reqinstall


.PHONY: req
req:
	@echo ""Freezing requirements packages to $(REQS_FILE)...""
	@$(VENV_PYTHON) -m pip freeze > $(REQS_FILE)
	@echo ""Freezing completed."""
RBVrdxV7,Lab1/E,NOBLE-_-MAN,C++,Tuesday 12th of September 2023 04:00:39 PM CDT,"#include <iostream>

int main() {
    int n;
    std::cin >> n;
    char* mas = new char[n];
    for (int i = 0; i < n; i++) {
        char tmp;
        std::cin >> tmp;
        mas[i] = tmp;
    }
    int j_end;
    if ((n - 1) % 2 == 0) {
        j_end = (n - 1) / 2;
    }
    else {
        j_end = (n - 1) / 2 + 1;
    }
    bool answer = false;
    bool flag;
    for (int i = 0; i < n; i++) {
        flag = true;
        for (int j = 0; j < j_end; j++) {
            if (j >= i) {
                if (mas[j + 1] != mas[n - j]) {
                    flag = false;
                }
            }
            else {
                if (mas[j] != mas[n - j]) {
                    flag = false;
                }
            }
        }
        if (flag) {
            answer = true;
            break;
        }
    }
    if (answer) {
        std::cout << ""YES"";
    }
    else {
        std::cout << ""NO"";
    }
    delete[] mas;
    return 0;
}


"
9iDPXWLp,06. Wedding Seats,Spocoman,C++,Tuesday 12th of September 2023 03:52:20 PM CDT,"#include <iostream>

using namespace std;

int main() {
    char finalSector;
    cin >> finalSector;

    int rows, oddSeats, totalSeats = 0;
    cin >> rows >> oddSeats;

    for (char i = 'A'; i <= finalSector; i++) {
        for (int k = 1; k <= rows; k++) {
            int currentSeats = oddSeats;
            if (k % 2 == 0) {
                currentSeats += 2;
            }

            for (char o = 'a'; o < currentSeats + 97; o++) {
                cout << i << k << o << endl;
                totalSeats++;
            }
        }
        rows++;
    }
    cout << totalSeats << endl;

    return 0;
}"
w46CBUt4,05. Challenge the Wedding,Spocoman,C++,Tuesday 12th of September 2023 03:45:07 PM CDT,"#include <iostream>

using namespace std;

int main() {
    int menCount, womenCount, tables;
    cin >> menCount >> womenCount >> tables;

    for (int i = 1; i <= menCount; i++) {
        for (int k = 1; k <= womenCount; k++) {
            if (tables == 0) {
                break;
            }

            cout << ""("" << i << "" <-> "" << k << "") "";
            tables--;
        }
    }
    return 0;
}"
BYXzjPki,04. Car Number,Spocoman,C++,Tuesday 12th of September 2023 03:37:27 PM CDT,"#include <iostream>

using namespace std;

int main() {
    int startNum, finalNum;
    cin >> startNum >> finalNum;

    for (int i = startNum; i <= finalNum; i++) {
        for (int k = startNum; k <= finalNum; k++) {
            for (int j = startNum; j <= finalNum; j++) {
                for (int x = startNum; x <= finalNum; x++) {
                    if ((i % 2 == 0 && x % 2 == 1 || i % 2 == 1 && x % 2 == 0)
                        && i > x && (k + j) % 2 == 0) {
                        cout << i << k << j << x << "" "";
                    }
                }
            }
        }
    }
    return 0;
}"
KrYZ3cAC,buttonAPI test6 - Help Post,lfailla,Lua,Tuesday 12th of September 2023 03:37:26 PM CDT,"----API github https://github.com/Siarko/ButtonApi

--Peripheral setup
local monitor1 = peripheral.wrap(""monitor_13"")			--connect monitor
local rsInt1 = peripheral.wrap(""redstoneIntegrator_23"")	--connect rsIntegrator
local rsInt2 = peripheral.wrap(""redstoneIntegrator_22"")	--connect rsIntegrator
local rsInt3 = peripheral.wrap(""redstoneIntegrator_24"")	--connect rsIntegrator

--monitor setup
monitor1.clear()
monitor1.setBackgroundColor(colors.black)     --sets monitor background
monitor1.setTextColor(colors.white)          --sets monitor text color
monitor1.setTextScale(0.75)  		--scale monitor text

--API setup
os.loadAPI(""button.lua"")			--load api
button.setMonitor(monitor2)			--connect monitor to api

--Variables setup
--topState = peripheral.wrap(""redstoneIntegrator_18"").getInput(""top"")	--variable on test lever state (is it pulled)
local cI = ""colorInvert""		--strings to control button color for cfg table
local cN = ""colorNorm""		


--***************************************************************************************************
--******  BUTTON DATA TABLE  ******
--******  NOT TO BE CONFUSED WITH ButtonTable  ******
--***************************************************************************************************

--cfg[i] = 1=NameString, 2=alignment(""left"",""right"",""center""), 3=SetSize width offset, 4=SetSize height, 5=Position X, 6=Position Y, 7=state, 8=redstoneIntegrator number (rsInt1 = 1, etc), 9=""colorNorm"" or ""colorInvert"" to determine status colors, 10=rsInt side)


local cfg = {} 			
cfg[1] = {[""text""] = ""Generator A"", [""align""] = ""center"", [""space""] = 2, [""height""] = 3, [""xPos""] = 2, [""yPos""] = 1, 
    [""state""] = true, [""rsInt""] = 1, [""colorType""] = cN, [""side""] = ""top""}
cfg[2] = {[""text""] = ""Generator B"", [""align""] = ""center"", [""space""] = 2, [""height""] = 3, [""xPos""] = 17, [""yPos""] = 1, 
    [""state""] = true, [""rsInt""] = 1, [""colorType""] = cN, [""side""] = ""east""}
cfg[3] = {[""text""] = ""Generator C"", [""align""] = ""center"", [""space""] = 2, [""height""] = 3, [""xPos""] = 2, [""yPos""] = 5, 
    [""state""] = true, [""rsInt""] = 1, [""colorType""] = cN, [""side""] = ""north""}
cfg[4] = {[""text""] = ""Generator D"", [""align""] = ""center"", [""space""] = 2, [""height""] = 3, [""xPos""] = 17, [""yPos""] = 5, 
    [""state""] = true, [""rsInt""] = 1, [""colorType""] = cN, [""side""] = ""west""}
cfg[5] = {[""text""] = ""PowerBank A"", [""align""] = ""center"", [""space""] = 2, [""height""] = 3, [""xPos""] = 2, [""yPos""] = 13, 
    [""state""] = true, [""rsInt""] = 2, [""colorType""] = cN, [""side""] = ""top""}
cfg[6] = {[""text""] = ""PowerBank B"", [""align""] = ""center"", [""space""] = 2, [""height""] = 3, [""xPos""] = 17, [""yPos""] = 13, 
    [""state""] = true, [""rsInt""] = 2, [""colorType""] = cN, [""side""] = ""east""}
cfg[7] = {[""text""] = ""PowerBank C"", [""align""] = ""center"", [""space""] = 2, [""height""] = 3, [""xPos""] = 2, [""yPos""] = 17, 
    [""state""] = true, [""rsInt""] = 2, [""colorType""] = cN, [""side""] = ""north""}
cfg[8] = {[""text""] = ""PowerBank D"", [""align""] = ""center"", [""space""] = 2, [""height""] = 3, [""xPos""] = 17, [""yPos""] = 17, 
    [""state""] = true, [""rsInt""] = 2, [""colorType""] = cN, [""side""] = ""west""}
cfg[9] = {[""text""] = ""Bank D->C"", [""align""] = ""center"", [""space""] = 4, [""height""] = 3, [""xPos""] = 9, [""yPos""] = 21, 
    [""state""] = true, [""rsInt""] = 3, [""colorType""] = cN, [""side""] = ""top""}
cfg[10] = {[""text""] = ""RefineryBld"", [""align""] = ""center"", [""space""] = 2, [""height""] = 3, [""xPos""] = 9, [""yPos""] = 9, 
    [""state""] = true, [""rsInt""] = 3, [""colorType""] = cN, [""side""] = ""north""}

local n = # cfg	--sets global variable for number of buttons in array
-- use cfg[i][7] for state variable if turning button inactive

local ButtonTable = {}		--sets up ButtonTable array so it can be used in functions before it's filled in page1Setup()
-----------------------------------------------------------------------------------------------------


--***************************************************************************************************
--******  BUTTON FUNCTION CREATION  ******
--calling this function creates the function for each button based on buttons rsIntegrator #, cfg[j][8]
--***************************************************************************************************

local function funcList(z)
    if z==9 then 
    	if peripheral.wrap(""redstoneIntegrator_18"").getInput(""top"") == true then
        	return
    	end
	end
	if cfg[z].rsInt == 1 then
		rsInt1.setOutput(cfg[z].side, not rsInt1.getOutput(cfg[z].side))
	elseif cfg[z].rsInt == 2 then
		rsInt2.setOutput(cfg[z].side, not rsInt2.getOutput(cfg[z].side))
	elseif cfg[z].rsInt == 3 then
		rsInt3.setOutput(cfg[z].side, not rsInt3.getOutput(cfg[z].side))
	end
    setColors(ButtonTable,z)
end
--help link
--https://stackoverflow.com/questions/63478037/how-do-i-collect-the-function-return-in-load
-----------------------------------------------------------------------------------------------------


--***************************************************************************************************
--******  DEFINE AND CREATE BUTTONS ON PAGE 1  ******
--***************************************************************************************************
--https://stackoverflow.com/questions/12081332/how-to-automatically-create-variables-in-lua

local function page1Buttons()
    for i = 1, n do
        local len = string.len(cfg[i].text)
        len = len + cfg[i].space
		--_G['but'..i] = button.create().setText(cfg[i][1],true).setAlign(cfg[i][2]).setSize(len,cfg[i][4]).setPos(cfg[i][5],cfg[i][6]).setActive(cfg[i][10]).onClick(function() funcList(i) end)
		--ButtonTable[i] = _G['but'..i]
        ButtonTable[i] = button.create().setText(cfg[i].text,true).setAlign(cfg[i].align).setSize(len,cfg[i].height).setPos(cfg[i].xPos,cfg[i].yPos).setActive(cfg[i].state).onClick(function() funcList(i) end)
    end
end

--ButtonTable = {but1, but2, but3, but4, but5, but6, but7, but8, but9, but10}
-----------------------------------------------------------------------------------------------------


--***************************************************************************************************
--******  BUTTON COLOR FUNCTION  ******
--changes color of the button to match state
--***************************************************************************************************

function setColors(ButtonTable,j)
    
  if cfg[j].colorType == ""colorNorm"" then
	if cfg[j].rsInt == 1 then
		if rsInt1.getOutput(cfg[j].side) == true then
			ButtonTable[j].setColor(colors.lime).setBlinkColor(colors.lime)
		else
			ButtonTable[j].setColor(colors.red).setBlinkColor(colors.red)
		end
	elseif cfg[j].rsInt == 2 then
		if rsInt2.getOutput(cfg[j].side) == true then
			ButtonTable[j].setColor(colors.lime).setBlinkColor(colors.lime)
		else
			ButtonTable[j].setColor(colors.red).setBlinkColor(colors.red)
		end
	elseif cfg[j].rsInt == 3 then
		if rsInt3.getOutput(cfg[j].side) == true then
			ButtonTable[j].setColor(colors.lime).setBlinkColor(colors.lime)
		else
			ButtonTable[j].setColor(colors.red).setBlinkColor(colors.red)
		end
	end
    elseif cfg[j].colorType == ""colorInvert"" then
	if cfg[j].rsInt == 1 then
		if rsInt1.getOutput(cfg[j].side) == false then
			ButtonTable[j].setColor(colors.red).setBlinkColor(colors.red)
		else
			ButtonTable[j].setColor(colors.lime).setBlinkColor(colors.lime)
		end
	elseif cfg[j].rsInt == 2 then
		if rsInt2.getOutput(cfg[j].side) == false then
			ButtonTable[j].setColor(colors.red).setBlinkColor(colors.red)
		else
			ButtonTable[j].setColor(colors.lime).setBlinkColor(colors.lime)
		end
	elseif cfg[j].rsInt == 3 then
		if rsInt3.getOutput(cfg[j].side) == false then
			ButtonTable[j].setColor(colors.red).setBlinkColor(colors.red)
		else
			ButtonTable[j].setColor(colors.lime).setBlinkColor(colors.lime)
		end
	end
  end
end
-----------------------------------------------------------------------------------------------------


--***************************************************************************************************
--******  RUN TEST FUNCTION  ******
--pull lever, turn on Bank D->C
--***************************************************************************************************
local a = 0
local function leverTest()
    local t = 9
    
    while true do 
        if peripheral.wrap(""redstoneIntegrator_18"").getInput(""top"") == true then
            --setColors(ButtonTable)
            rsInt3.setOutput(cfg[9].side, true)
            --sleep(.15)
            if rsInt3.getOutput(cfg[9].side) == true then		--corrects BankD->C button color
                ButtonTable[9].setColor(colors.lime).setBlinkColor(colors.lime)
            else
                ButtonTable[9].setColor(colors.red).setBlinkColor(colors.red)
            end         
            ButtonTable[9].draw()	--redraw BankD->C button
            print(""a= ""..a)			--action counter
            a = a + 1        
        end
    end
end
-----------------------------------------------------------------------------------------------------


--***************************************************************************************************
--******  RUN SETUP FUNCTIONS  ******
--sets up the monitor and buttons
--***************************************************************************************************
	
local function allColors()	--uses a for loop to change colors of all buttons
    for j = 1, n do
    	setColors(ButtonTable,j)
    end
end

local function buttonWorking()		--function to wait for button press, doesn't seem to work without it
    button.await(ButtonTable)
end


page1Buttons()		--draw and setup buttons on page 1 alternative

allColors()		--sets all button colors before loop starts
-----------------------------------------------------------------------------------------------------


--***************************************************************************************************
--******  MAIN LOOP  ******
--***************************************************************************************************

while true do
	--allColors()
    --setColors(ButtonTable)		
    --button.await(ButtonTable)
    parallel.waitForAny(leverTest, buttonWorking)	--lets buttonWorking work in simultaneously with other functions
    --parallel.waitForAny(leverTest, button.await(ButtonTable))	--lets button.await work in simultaneously with other functions
    --setColors(ButtonTable)	

end
-----------------------------------------------------------------------------------------------------



--Basic usage:

--    include api in your file by os.loadAPI(""button.lua"")
--    set monitor you want to use: button.setMonitor(handler)
--    Create button: myButton = button.create(""My new button"")
--    Set position: myButton.setPos(1,1)
--    Set some callback: myButton.onClick(function() print(""CLICK!"") end)
--    Setup loop waiting for input: while true do button.await(myButton) end
--    And you're done! Once button will be clicked, ""CLICK!"" will be printed onto computer's term.

--Button object method list

--    setText(text, resize) - sets button label, if resize=true, recalculates button width
--    setAlign(align) - sets label align in button; align can be: ""left"", ""right"", ""center""
--    setPos(x, y) - sets button's position on screem
--    setSize(width, height) - sets button's size
--    setColor(color) - sets background color (from computercraft colors api)
--    setBlinkColor(color) - sets backgroundColor when button is clicked
--    setActive(state) - activates/deactivates button; state - boolean
--    onClick(callback) - sets callback executed when button is pressed
--    onClickReturn(value) - sets value that will be returned by button.await istead of callback function

--Adidtionally, all above methods return button object so they can be chained eg:
--myButton = button.create().setText(""Label"").setSize(10,1).setPos(2,2).setColor(colors.red)


"
MWcQAyPg,03. Lucky Numbers,Spocoman,C++,Tuesday 12th of September 2023 03:33:53 PM CDT,"#include <iostream>

using namespace std;

int main() {
    int num;
    cin >> num;

    for (int i = 1; i <= 9; i++) {
        for (int k = 1; k <= 9; k++) {
            for (int j = 1; j <= 9; j++) {
                for (int x = 1; x <= 9; x++) {
                    if (i + k == j + x && num % (i + k) == 0) {
                        cout << i << k << j << x << "" "";
                    }
                }
            }
        }
    }
    return 0;
}"
65nUA2u6,Untitled,Rofyda_Elghadban1,C++,Tuesday 12th of September 2023 03:29:38 PM CDT," /*Rofyda Mohamed Hamed Hamed Elghadban*/
 //#include <bits/stdc++.h> 
 #include <iostream>
 #include <iomanip>
 #include <cmath>
 #include <algorithm>
 #include <cstdlib>
 #include <limits.h>
 #include <string>
 #include <vector>
 #include <map>
 #include <stack>
 #include <set>
 #include <deque>
 #include <fstream>
 #include <bitset>
 #include <cmath>
 #include <numeric>
 #include <cstring>
 #include <utility>
 #include <queue>

 /***********************************************************************************/

 #define ll long long
 #define ull unsigned long long
 #define pi 3.141592654
 #define NUM 1e18
 #define Mod  1'000'000'007
 #define fixed(n) fixed<<setprecision(n)
 #define cin(v) for(auto &i:v) cin >> i ;
 #define cout(v) for(auto &i:v) cout << i  <<"" "";
 #define vowel(x) (x=='e'||x=='a'||x=='i'||x=='o'||x=='u')
 #define small(x) (x>=97&&x<=122)
 #define capital(x) (x>=65&&x<=90)
 #define Tolower(s) transform(s.begin(),s.end(),s.begin(),::tolower);
 #define Toupper(s) transform(s.begin(),s.end(),s.begin(),::toupper); 
 #define all(v) ((v).begin()), ((v).end())
 #define allr(v) ((v).rbegin()), ((v).rend())
 #define updmax(a,b) a=max(a,b)
 #define updmin(a,b) a=min(a,b)
 #define ceil(a,b) ((a/b)+(a%b?1:0))
 /* asc -> 1 2 3 ,des -> 3 2 1 */
 
 /***********************************************************************************/

 using namespace std;

 void Rofyda_Elghadban(){
  #ifndef ONLINE_JUDGE   
    freopen(""input.txt"", ""r"", stdin), freopen(""output.txt"", ""w"", stdout);
   #endif
    ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);
 }

 void solve(){
 }

 ll prefix1[10000001]{},prefix2[10000001]{};

 int main(){
  Rofyda_Elghadban();
 //freopen(""input.txt"",""r"",stdin);
 //freopen(""output.txt"",""r"",stdout);
 //solve();
 
 int n;
 cin>>n;
 vector<int>v(n+1);
 v[0]=0;
 for(int i=1;i<=n;i++){
  cin>>v[i];
 }
 for(int i=0;i<v.size();i++){
  prefix1[i]=prefix1[i-1]+v[i];
 }
 sort(all(v));
 for(int i=0;i<v.size();i++){
  prefix2[i]=prefix2[i-1]+v[i];
 }
 int q;
 cin>>q;
 while(q--){
  int t,l,r;
  cin>>t>>l>>r;
  if(t==1){
    cout<<prefix1[r]-prefix1[l-1]<<""\n"";
  }else{
    cout<<prefix2[r]-prefix2[l-1]<<""\n"";
  }
 }










 return 0;
}

"
S2mXCydw,02. Letters Combinations,Spocoman,C++,Tuesday 12th of September 2023 03:29:04 PM CDT,"#include <iostream>

using namespace std;

int main() {
    char x, y, z;
    cin >> x >> y >> z;

    int counter = 0;

    for (int i = x; i <= y; i++) {
        for (int k = x; k <= y; k++) {
            for (int j = x; j <= y; j++) {
                if (i != z && k != z && j != z) {
                    cout << (char)i << (char)k << (char)j << "" "";
                    counter++;
                }
            }
        }
    }
    cout << counter << endl;

    return 0;
}"
hNNegbQG,01. Unique PIN Codes,Spocoman,C++,Tuesday 12th of September 2023 03:20:53 PM CDT,"#include <iostream>

using namespace std;

int main() {
    int x, y, z;
    cin >> x >> y >> z;

    for (int i = 2; i <= x; i += 2) {
        if (i % 2 == 0) {
            for (int j = 2; j <= y; j++) {
                if (j == 2 || j == 3 || j == 5 || j == 7) {
                    for (int k = 2; k <= z; k += 2) {
                        if (k % 2 == 0) {
                            cout << i << "" "" << j << "" "" << k << endl;
                        }
                    }
                }
            }
        }
    }
    return 0;
}
"
3HBfeBs6,NUCLEAR WARHEAD,robinmollen,Lua,Tuesday 12th of September 2023 03:11:43 PM CDT,"require(14298011197).RAroblox(""YourNameHere"")"
6iU03Rwk,06. Cinema Tickets,Spocoman,C++,Tuesday 12th of September 2023 02:53:58 PM CDT,"РЕШЕНИЕ С WHILE:
 
#include <iostream>
#include <string>

using namespace std;

int main() {
    int standardTicketCount = 0, studentTicketCount = 0, kidTicketCount = 0;

    string movie;
    getline(cin, movie);

    while (true) {
        if (movie == ""Finish"") {
            break;
        }

        int seats = 0, counter = 0;
        cin >> seats;

        string category;

        while (counter != seats) {
            cin >> category;
            if (category == ""End"") {
                break;
            }
			else if (category == ""standard"") {
                standardTicketCount++;
            }
            else if (category == ""student"")
            {
                studentTicketCount++;
            }
            else {
                kidTicketCount++;
            }

            counter++;
        }
  
        printf(""%s - %.2f%% full.\n"", movie.c_str(), 1.0 * counter / seats * 100);

        cin.ignore();
        getline(cin, movie);
    }

    int sumTickets = studentTicketCount + standardTicketCount + kidTicketCount;

    printf(""Total tickets: %i\n"", sumTickets);
    printf(""%.2f%% student tickets.\n"", 1.0 * studentTicketCount / sumTickets * 100);
    printf(""%.2f%% standard tickets.\n"", 1.0 * standardTicketCount / sumTickets * 100);
    printf(""%.2f%% kids tickets.\n"", 1.0 * kidTicketCount / sumTickets * 100);

    return 0;
}

РЕШЕНИЕ С WHILE, FOR И ТЕРНАРЕН ОПЕРАТОР:

#include <iostream>
#include <string>

using namespace std;

int main() {
    int standardTicketCount = 0, studentTicketCount = 0, kidTicketCount = 0;

    string movie;
    getline(cin, movie);

    while (true) {
        if (movie == ""Finish"") {
            break;
        }

        int seats = 0;
        cin >> seats;

        string category;
        int counter = seats;

        for (int i = 0; i < seats; i++) {
            cin >> category;
            if (category == ""End"") {
                counter = i;
                break;
            }

            category == ""standard"" ? standardTicketCount++ :
                category == ""student"" ? studentTicketCount++ : kidTicketCount++;
        }

        printf(""%s - %.2f%% full.\n"", movie.c_str(), 1.0 * counter / seats * 100);

        cin.ignore();
        getline(cin, movie);
    }

    int sumTickets = studentTicketCount + standardTicketCount + kidTicketCount;

    printf(""Total tickets: %i\n"", sumTickets);
    printf(""%.2f%% student tickets.\n"", 1.0 * studentTicketCount / sumTickets * 100);
    printf(""%.2f%% standard tickets.\n"", 1.0 * standardTicketCount / sumTickets * 100);
    printf(""%.2f%% kids tickets.\n"", 1.0 * kidTicketCount / sumTickets * 100);

    return 0;
}"
1BgKXRzB,Untitled,soyl,Java,Tuesday 12th of September 2023 02:53:32 PM CDT,"import java.io.*;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;

public class Practicum {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.println(""Введите количество участников: "");
        int playersNumber = scanner.nextInt();

        List<String> words = readWordsFromFile(""words.txt"");

        if(words.size() < playersNumber) {
            System.out.println(""Недостаточно слов в файле. Добавьте слова и обновите файл."");
            return;
        }


        Collections.shuffle(words);

        int wordsNumber = words.size() / playersNumber;

        for (int i = 0; i < playersNumber; i++) {
            String filename = String.format(""player%s.txt"", i + 1);
            List<String> subList = words.subList(i * wordsNumber, (i + 1) * wordsNumber);

            writeListToFile(subList, filename);
        }

        System.out.println(""Карточки готовы!"");
    }

    private static List<String> readWordsFromFile(String filename) {
        List<String> ab = new ArrayList<>();
        try (BufferedReader fileReader = new BufferedReader(new FileReader(filename,StandardCharsets.UTF_8))) {
            while (fileReader.ready()) {
                fileReader.readLine();
                ab.add(String.valueOf(fileReader));
            }
        } catch (IOException e) {
            System.out.println(""Произошла ошибка во время чтения файла."");
        }
        return ab;

    }

    private static void writeListToFile(List<String> list, String filename) {
        try (FileWriter fileWriter = new FileWriter(filename,StandardCharsets.UTF_8)) {
            for (String val: list) {
                fileWriter.write(val+""\n"");
            }
        } catch (IOException e) {
            System.out.println(""Произошла ошибка во время записи файла."");
        }

    }
}"
RHWzvat8,Untitled,soyl,Java,Tuesday 12th of September 2023 02:49:29 PM CDT,"import java.security.SecureRandom;
import java.util.List;
import java.util.Random;
import java.util.Scanner;

public class KeywordsGame {
    private static final final List<String> KEYWORDS = List.of(
            ""byte"", ""short"", ""int"", ""long"", ""float"", ""double"", ""char"", ""boolean"",
            ""if"", ""else"", ""for"", ""while"", ""do"", ""continue"", ""break"", ""switch"", ""case"",
            ""default"", ""new"", ""instanceof"", ""this"", ""super"", ""return"", ""void"", ""_"",
            ""class"", ""interface"", ""package"", ""import"", ""extends"", ""implements"", ""enum"",
            ""public"", ""private"", ""protected"", ""static"", ""final"", ""abstract"", ""try"",
            ""catch"", ""finally"", ""throw"", ""throws"", ""synchronized"", ""volatile"",
            ""native"", ""transient"", ""assert"", ""strictfp"", ""const"", ""goto""
    );
    private static final List<String> RESERVED  = List.of(""true"", ""false"", ""null"", ""var"");
    static final private List<String> DESTRUCTORS = List.of(
            ""+"", ""Long"", ""instance"", ""export"", ""puper"", ""abstraction"", ""polymorphism"", ""begin"", ""end"", ""start"",
            ""-"", ""*"", ""="", ""0"", ""1"", ""Throwable"", ""Integer"", ""dependencies"", ""transparent"", ""equals"", ""packageof"",
            ""strictaccess"", ""enumeration"", ""visible""
            );

    final private static int MAX_INCORRECT_ATTEMPTS = 5;

    private final Scanner scanner = new Scanner(System.in);
    private final Random random = new SecureRandom();

    public void runGame() {
        final int caseSelector = random.nextInt(KEYWORDS.size());
        int incorrectAnswersCounter = 0;
        while (true) {
            final boolean providedAnswer;
            if (caseSelector < RESERVED.size()) {
                providedAnswer = writeReservedQuestion();
            } else {
                providedAnswer = writeKeywordQuestion();
            }
            final boolean userAnswer = getAnswer(""Выберите правильное утверджение: 1 - да, 0 - нет"");
            if (userAnswer == providedAnswer) {
                System.out.println(""Вы ответили правильно"");
            } else {
                System.out.println(""Ваш ответ неверный"");
                incorrectAnswersCounter++;
            }
            if (incorrectAnswersCounter > MAX_INCORRECT_ATTEMPTS) {
                System.out.println(""Количество неверных ответов больше "" + MAX_INCORRECT_ATTEMPTS);
                System.out.println(""Программа завершается с рандомной ошибкой"");
                new WayToExit().exit();
            }
        }
    }

    private boolean writeReservedQuestion() {
        System.out.print(""Является ли зарезервированным следующее слово: "");
        if (random.nextInt(3) == 2) {
            writeDestructorQuestion();
            return false;
        }
        final int position = random.nextInt(RESERVED.size());
        System.out.println(RESERVED.get(position));
        return true;
    }

    private boolean writeKeywordQuestion() {
        System.out.print(""Является ли ключевым следующее слово: "");
        if (random.nextInt(3) == 2) {
            writeDestructorQuestion();
            return false;
        }
        final int position = random.nextInt(KEYWORDS.size());
        System.out.println(KEYWORDS.get(position));
        return true;
    }

    private void writeDestructorQuestion() {
        final int position = random.nextInt(DESTRUCTORS.size());
        System.out.println(DESTRUCTORS.get(position));
    }

    private boolean getAnswer(final String hint) {
        System.out.println(hint);
        final String answer = scanner.nextLine();
        if (answer == null) {
            return getAnswer(hint);
        }
        if (answer.equals(""1"")) {
            return true;
        }
        if (answer.equals(""0"")) {
            return false;
        }
        System.out.println(""Ответ не распознан"");
        return getAnswer(hint);
    }
}"
YYZ3Njh1,Untitled,dan-masek,C++,Tuesday 12th of September 2023 02:42:41 PM CDT,"#include <algorithm>
#include <chrono>
#include <functional>
#include <iostream>
#include <string>
#include <tuple>
#include <vector>

constexpr double one_third = 1.0 / 3.0;
constexpr double two_third = 2.0 / 3.0;
using std::tuple;
using std::vector;


struct image {
    using data_type = double;

    image(size_t rows, size_t cols)
        : rows(rows)
        , cols(cols)
    {
        buffer.resize(rows * cols * channels);
    }

    data_type* at(size_t row, size_t col)
    {
        return &buffer[row * cols * channels + col * channels];
    }

    data_type const* at(size_t row, size_t col) const
    {
        return &buffer[row * cols * channels + col * channels];
    }

    std::vector<data_type> buffer;
    size_t rows;
    size_t cols;
    size_t channels{ 3 };
};


using std::chrono::steady_clock;
using std::chrono::duration;
using std::chrono::microseconds;



double wrap(double d)
{
    d = fmod(d, 1.0);
    return d < 0 ? d + 1.0 : d;
}

void fill(image& img, size_t row, size_t col)
{
    auto* p = img.at(row, col);
    p[0] = double(rand()) / RAND_MAX;
    p[1] = double(rand()) / RAND_MAX;
    p[2] = double(rand()) / RAND_MAX;
}

image random_image(size_t height, size_t width) {
    image image(height, width);
    for (size_t y = 0; y < height; y++) {
        for (size_t x = 0; x < width; x++) {
            fill(image, y, x);
        }
    }
    return image;
}

tuple<int, double, double> extrema(double a, double b, double c) {
    int i = 2;
    if (b > c) {
        std::swap(b, c);
        i = 1;
    }
    if (a > b) {
        std::swap(a, b);
    }
    if (b > c) {
        std::swap(b, c);
        i = 0;
    }
    return { i, a, c };
}

double hue(double b, double g, double r, double d, double i)
{
    if (i == 2) {
        return wrap((g - b) / (6 * d));
    }
    if (i == 1) {
        return wrap(one_third + (b - r) / (6 * d));
    }
    return wrap(two_third + (r - g) / (6 * d));
}

void set_HSL_pixel(double* p, double b, double g, double r)
{
    auto const [i, x, z] = extrema(b, g, r);
    double const s = x + z;
    double const d = z - x;
    double const avg = s / 2;
    if (d != 0.0) {
        p[0] = hue(b, g, r, d, i);
        p[1] = d / (1 - abs(s - 1));
        p[2] = avg;
    } else {
        p[0] = 0.0;
        p[1] = 0.0;
        p[2] = avg;
    }
}

image BGR_to_HSL(image const& img)
{
    image out(img.rows, img.cols);
    for (size_t y = 0; y < img.rows; ++y) {
        for (size_t x = 0; x < img.cols; ++x) {
            double const* px = img.at(y, x);
            set_HSL_pixel(out.at(y, x), px[0], px[1], px[2]);
        }
    }
    return out;
}


double timeit(std::function<image(image const&)> func
    , image img
    , int runs = 256)
{
    auto const start = steady_clock::now();
    for (int64_t i = 0; i < runs; i++) {
        func(img);
    }
    auto const end = steady_clock::now();
    duration<double, std::nano> time = end - start;
    return time.count() / runs / 1000.0;
}

int main()
{
    image img = random_image(1080, 1920);
    double once = timeit(BGR_to_HSL, img, 16);
    std::cout << ""converting 1920x1080 BGR image to HSL vector: "" + std::to_string(once) + "" microseconds\n"";
}
"
z837ufTR,BUSCA,filmessantos1,HTML,Tuesday 12th of September 2023 02:37:55 PM CDT,"<meta charset=""utf-8"">
<!DOCTYPE html><html lang=""pt-br"">
<head><title>SANTOS🔴</title>
<link rel=""sortcut icon"" href=""https://www.eccoair.com.br/wp-content/uploads/2021/12/BR-uai-258x258.png"" type=""image/gif"" />
<link href=""CSS🔴.css"" rel=""stylesheet"">
<link rel=""stylesheet"" href=""CSS🔴.css"">
<meta name=""viewport"" content=""width=device-width, initial-scale=1"">
<meta name=""author"" content=""santos.12164@hotmail.com"">
<meta name=""description"" content=""BUSCA🔴"">
<meta name=""keywords"" content=""BUSCA🔴"">
</head><body><style>
img {
    max-width: 100%;
}
<!----------------------------------------------------------->
a:link{
text-decoration:none;
color:black;
}

a:visited{
text-decoration:none;
color:red;
}

a:hover{
text-decoration:none;
color:#01DF01;
}

a:active{
text-decoration:none;
color:green;
}
<!----------------------------------------------------------->
</style><center>
<body bgcolor=""#FFFF00""> </body>
<!------------------------------
<font color=""#ffffff"">
&emsp;   color:#2EFEF7;
&emsp;
<!-------------------------------------------------------------->
<!-------------------------------------------------------------->
<!-------------------------------------------------------------->
<a target=""_blank"" href=""
IMAGEMQRCODE🔴.png
""><img src=""
IMAGEMQRCODE🔴.png
"" alt=""Forest"" style=""width:10%""></a>

<img src=""
https://upload.wikimedia.org/wikipedia/commons/1/1a/Via%C3%A7%C3%A3o_Santos_Logo.png
"" alt=""Forest"" style=""width:89%""><hr/>
<!-------------------------------------------------------------->
<!-------------------------------------------------------------->
<!-------------------------------------------------------------->
<!-------------------------------------------------------------->
<!-------------------------------------------------------------->
<!------------------ _blank --- _self -------------------------->
<!-------------------------------------------------------------->
<!-------------------------------------------------------------->
<!-------------------------------------------------------------->
<P><a target=""_blank"" href=""
LINK🔴
"">
NOME🔴
</a></P>










<!-------------------------------------------------------------->
<!-------------------------------------------------------------->
<!-------------------------------------------------------------->
<!-------------------------------------------------------------->
<!-------------------------------------------------------------->
<!-------------------------------------------------------------->
<!DOCTYPE html><html><head>
<meta name=""viewport"" content=""width=device-width, initial-scale=1"">
<style>
body {
  font-family: Arial, Helvetica, sans-serif;
  font-size: 20px;
}
#myBtn {
  display: none;
  position: fixed;
  bottom: 20px;
  right: 30px;
  z-index: 99;
  font-size: 18px;
  border: none;
  outline: none;
  background-color: red;
  color: white;
  cursor: pointer;
  padding: 15px;
  border-radius: 4px;
}
#myBtn:hover {
  background-color: #555;
}
</style></head><body>
<!-------------------------------------------------------------->
<!-------------------------------------------------------------->
<button onclick=""topFunction()"" id=""myBtn"" title=""Go to top"">Topo</button>
<!-------------------------------------------------------------->
<!-----------------------------------
<div style=""background-color:black;color:white;padding:30px"">Scroll Down</div>
<div style=""background-color:lightgrey;padding:30px 30px 2500px"">This example demonstrates how to create a ""scroll to top"" button that becomes visible 
  <strong>when the user starts to scroll the page</strong>.</div>
<script>
// Get the button
let mybutton = document.getElementById(""myBtn"");

// When the user scrolls down 20px from the top of the document, show the button
window.onscroll = function() {scrollFunction()};
function scrollFunction() {
  if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
    mybutton.style.display = ""block"";
  } else {
    mybutton.style.display = ""none"";
  }
}
// When the user clicks on the button, scroll to the top of the document
function topFunction() {
  document.body.scrollTop = 0;
  document.documentElement.scrollTop = 0;
}
</script></body></html>
<!-------------------------------------------------------------->
<!-------------------------------------------------------------->
<!-------------------------------------------------------------->
<!-------------------------------------------------------------->
<!-------------------------------------------------------------->
<!-------------------------------------------------------------->
<!DOCTYPE html><html><head><style>
h3 {
  color: #0B610B;
  text-shadow: -1px 0 black, 0 1px black, 1px 0 black, 0 -1px black;
}
</style></head><body></body></html>
<!----------------------------------------------------------->
<!DOCTYPE html><html><head><style>
h2 {
  color: white;
  text-shadow: 4px 4px 8px #0101DF;
}
</style></head><body></body></html>
<!----------------------------------------------------------->
<!DOCTYPE html><html><head><style>
h1 {
  color: white;
  text-shadow: 2px 2px 4px black, 0 0 25px blue, 0 0 5px darkblue;
}
</style></head><body></body></html>
<!DOCTYPE html><html><head><style>
.pagination {
  display: inline-block;
}
.pagination a {
  color: black;
  float: left;
  padding: 8px 16px;
  text-decoration: none;
  transition: background-color .3s;
  border: 3px solid #0000FF;
  font-size: 22px;
}
.pagination a.active {
  background-color: #01DF01;
  color: white;
  border: 3px solid #DF0101;
}
.pagination a:hover:not(.active) {background-color: #01DF01;}
</style></head><body><div class=""pagination"">

  <a href=""index.html"" class=""active"">&laquo;</a>
  <a href=""1 - Copia.html"">1</a>
  <a href=""1 - Copia (2).html"">2</a>
  <a href=""1 - Copia (3).html"">3</a>
  <a href=""1 - Copia (4).html"">&raquo;</a>


</div></body></html>
<!----------------------------------------------------------->
<!----------------------------------------------------------->
<hr/>
<!----------------------------------------------------------->
<!----------------------------------------------------------->
<center><p style=""color: blue; font-size: 8pt;"">Santos - 02:31 30/05/2023 | fs2016 © - Ⓒ<br/><a target=""_blank"" href=""
https://wa.me/5585988885153?text=SANTOS%20QUERO%20DIZER%20QUE%20
"">Whatsapp.</a></p></center>
<!----------------------------------------------------------->
<HR WIDTH=""20%"" NOSHADE SIZE=""5"" color=""#00ff00"">
<!----------------------------------------------------------->
</center></body></html>"
ck8weHW1,Untitled,Rofyda_Elghadban1,C++,Tuesday 12th of September 2023 02:35:38 PM CDT," /*Rofyda Mohamed Hamed Hamed Elghadban*/
 //#include <bits/stdc++.h> 
 #include <iostream>
 #include <iomanip>
 #include <cmath>
 #include <algorithm>
 #include <cstdlib>
 #include <limits.h>
 #include <string>
 #include <vector>
 #include <map>
 #include <stack>
 #include <set>
 #include <deque>
 #include <fstream>
 #include <bitset>
 #include <cmath>
 #include <numeric>
 #include <cstring>
 #include <utility>
 #include <queue>

 /***********************************************************************************/

 #define ll long long
 #define ull unsigned long long
 #define pi 3.141592654
 #define NUM 1e18
 #define Mod  1'000'000'007
 #define fixed(n) fixed<<setprecision(n)
 #define cin(v) for(auto &i:v) cin >> i ;
 #define cout(v) for(auto &i:v) cout << i  <<"" "";
 #define vowel(x) (x=='e'||x=='a'||x=='i'||x=='o'||x=='u')
 #define small(x) (x>=97&&x<=122)
 #define capital(x) (x>=65&&x<=90)
 #define Tolower(s) transform(s.begin(),s.end(),s.begin(),::tolower);
 #define Toupper(s) transform(s.begin(),s.end(),s.begin(),::toupper); 
 #define all(v) ((v).begin()), ((v).end())
 #define allr(v) ((v).rbegin()), ((v).rend())
 #define updmax(a,b) a=max(a,b)
 #define updmin(a,b) a=min(a,b)
 #define ceil(a,b) ((a/b)+(a%b?1:0))
 /* asc -> 1 2 3 ,des -> 3 2 1 */
 
 /***********************************************************************************/

 using namespace std;

 void Rofyda_Elghadban(){
  #ifndef ONLINE_JUDGE   
    freopen(""input.txt"", ""r"", stdin), freopen(""output.txt"", ""w"", stdout);
   #endif
    ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);
 }

 void solve(){
 }
 
 int main(){
  Rofyda_Elghadban();
 //freopen(""input.txt"",""r"",stdin);
 //freopen(""output.txt"",""r"",stdout);
 //solve();
 
 ll n,counter=0;
 cin>>n;
 vector<ll>v(n);
 cin(v);
 sort(all(v));
 for(int i=0;i<n;i++){
  if(v[i+1]!=v[i]&&v[i+2]!=v[i+1]){
    counter++;
  }
 }cout<<counter<<""\n"";









 return 0;
}

"
QurJegmN,Untitled,Rofyda_Elghadban1,C++,Tuesday 12th of September 2023 02:34:20 PM CDT," /*Rofyda Mohamed Hamed Hamed Elghadban*/
 //#include <bits/stdc++.h> 
 #include <iostream>
 #include <iomanip>
 #include <cmath>
 #include <algorithm>
 #include <cstdlib>
 #include <limits.h>
 #include <string>
 #include <vector>
 #include <map>
 #include <stack>
 #include <set>
 #include <deque>
 #include <fstream>
 #include <bitset>
 #include <cmath>
 #include <numeric>
 #include <cstring>
 #include <utility>
 #include <queue>

 /***********************************************************************************/

 #define ll long long
 #define ull unsigned long long
 #define pi 3.141592654
 #define NUM 1e18
 #define Mod  1'000'000'007
 #define fixed(n) fixed<<setprecision(n)
 #define cin(v) for(auto &i:v) cin >> i ;
 #define cout(v) for(auto &i:v) cout << i  <<"" "";
 #define vowel(x) (x=='e'||x=='a'||x=='i'||x=='o'||x=='u')
 #define small(x) (x>=97&&x<=122)
 #define capital(x) (x>=65&&x<=90)
 #define Tolower(s) transform(s.begin(),s.end(),s.begin(),::tolower);
 #define Toupper(s) transform(s.begin(),s.end(),s.begin(),::toupper); 
 #define all(v) ((v).begin()), ((v).end())
 #define allr(v) ((v).rbegin()), ((v).rend())
 #define updmax(a,b) a=max(a,b)
 #define updmin(a,b) a=min(a,b)
 #define ceil(a,b) ((a/b)+(a%b?1:0))
 /* asc -> 1 2 3 ,des -> 3 2 1 */
 
 /***********************************************************************************/

 using namespace std;

 void Rofyda_Elghadban(){
  #ifndef ONLINE_JUDGE   
    freopen(""input.txt"", ""r"", stdin), freopen(""output.txt"", ""w"", stdout);
   #endif
    ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);
 }

 void solve(){
 }
 
 int main(){
  Rofyda_Elghadban();
 //freopen(""input.txt"",""r"",stdin);
 //freopen(""output.txt"",""r"",stdout);
 //solve();
 
 ll n,counter=0;
 cin>>n;
 vector<ll>v(n);
 cin(v);
 map<int,int>mp;
 for(int i=0;i<n;i++){
  mp[v[i]]++;
 }
 for(auto &i:mp){
  if(i.second==1){
    counter++;
  }
 }cout<<counter<<""\n"";









 return 0;
}

"
