id,title,username,language,date,content
2yJDH0iv,storage,Archer2o2x,Lua,Tuesday 30th of April 2024 12:31:00 PM CDT,"local function transfer(self, destination, name, count)

    if not count then count = 64 end

    local countLeft = count

    for slot, item in pairs(self.peripheral.list()) do

        if item.name == name then

            countLeft = countLeft - self.peripheral.pushItems(destination, slot, countLeft)

            if countLeft < 1 then break end

        end

    end

end

local function list(self)

    local results = {}

    for slot, item in pairs(self.peripheral.list()) do
        
        if results[item.name] ~= nil then

            results[item.name] = results[item.name] + item.count

        else

            results[item.name] = item.count

        end

    end

    return results

end

local function amount(self, name)

    local results = 0

    for slot, item in pairs(self.peripheral.list()) do
        
        if item.name == name then

            results = results + item.count

        end

    end

    return results

end

local function make(peripheral)

    return {

        peripheral = peripheral,
        transfer = transfer,
        list = list,
        amount = amount

    }

end

return { make = make }"
zyRWYSa7,–°–ü–†–ò–ù–¢ ‚Ññ 7 | –û–¥–Ω–æ—Å–≤—è–∑–Ω—ã–π —Å–ø–∏—Å–æ–∫ | –£—Ä–æ–∫ 3: –í—Å—Ç–∞–≤–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ –æ—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞,chevengur,C++,Tuesday 30th of April 2024 12:21:21 PM CDT,"#include <cassert>
#include <cstddef>
#include <string>
#include <utility>

template <typename Type>
class SingleLinkedList {
	// –£–∑–µ–ª —Å–ø–∏—Å–∫–∞
	struct Node {
		Node() = default;
		Node(const Type& val, Node* next)
			: value(val)
			, next_node(next) {
		}
		Type value;
		Node* next_node = nullptr;
	};

public:

	SingleLinkedList() : head_(), size_(0) {};

	~SingleLinkedList() { Clear(); };

	// –í—Å—Ç–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç value –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞ –∑–∞ –≤—Ä–µ–º—è O(1)
	void PushFront(const Type& value) {
		head_.next_node = new Node(value, head_.next_node);
		++size_;
	}

	// –û—á–∏—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞ –≤—Ä–µ–º—è O(N)
	void Clear() noexcept {
		while (head_.next_node)
		{
            Node* new_node = head_.next_node->next_node;
			delete head_.next_node;
			head_.next_node = new_node;
		}
		size_ = 0;
	}

	// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–µ –∑–∞ –≤—Ä–µ–º—è O(1)
	[[nodiscard]] size_t GetSize() const noexcept {
		return size_;
	}

	// –°–æ–æ–±—â–∞–µ—Ç, –ø—É—Å—Ç–æ–π –ª–∏ —Å–ø–∏—Å–æ–∫ –∑–∞ –≤—Ä–µ–º—è O(1)
	[[nodiscard]] bool IsEmpty() const noexcept {
		return (size_ == 0) ? true : false;
	}

private:
	// –§–∏–∫—Ç–∏–≤–Ω—ã–π —É–∑–µ–ª, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ ""–ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º""
	Node head_;
	size_t size_;
};

// –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É SingleLinkedList
void Test1() {
	// –®–ø–∏–æ–Ω, —Å–ª–µ–¥—è—â–∏–π –∑–∞ —Å–≤–æ–∏–º —É–¥–∞–ª–µ–Ω–∏–µ–º
	struct DeletionSpy {
		DeletionSpy() = default;
		explicit DeletionSpy(int& instance_counter) noexcept
			: instance_counter_ptr_(&instance_counter)  //
		{
			OnAddInstance();
		}
		DeletionSpy(const DeletionSpy& other) noexcept
			: instance_counter_ptr_(other.instance_counter_ptr_)  //
		{
			OnAddInstance();
		}
		DeletionSpy& operator=(const DeletionSpy& rhs) noexcept {
			if (this != &rhs) {
				auto rhs_copy(rhs);
				std::swap(instance_counter_ptr_, rhs_copy.instance_counter_ptr_);
			}
			return *this;
		}
		~DeletionSpy() {
			OnDeleteInstance();
		}

	private:
		void OnAddInstance() noexcept {
			if (instance_counter_ptr_) {
				++(*instance_counter_ptr_);
			}
		}
		void OnDeleteInstance() noexcept {
			if (instance_counter_ptr_) {
				assert(*instance_counter_ptr_ != 0);
				--(*instance_counter_ptr_);
			}
		}

		int* instance_counter_ptr_ = nullptr;
	};

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –≤ –Ω–∞—á–∞–ª–æ
	{
		SingleLinkedList<int> l;
		assert(l.IsEmpty());
		assert(l.GetSize() == 0u);

		l.PushFront(0);
		l.PushFront(1);
		assert(l.GetSize() == 2);
		assert(!l.IsEmpty());

		l.Clear();
		assert(l.GetSize() == 0);
		assert(l.IsEmpty());
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
	{
		int item0_counter = 0;
		int item1_counter = 0;
		int item2_counter = 0;
		{
			SingleLinkedList<DeletionSpy> list;
			list.PushFront(DeletionSpy{ item0_counter });
			list.PushFront(DeletionSpy{ item1_counter });
			list.PushFront(DeletionSpy{ item2_counter });

			assert(item0_counter == 1);
			assert(item1_counter == 1);
			assert(item2_counter == 1);
			list.Clear();
			assert(item0_counter == 0);
			assert(item1_counter == 0);
			assert(item2_counter == 0);

			list.PushFront(DeletionSpy{ item0_counter });
			list.PushFront(DeletionSpy{ item1_counter });
			list.PushFront(DeletionSpy{ item2_counter });
			assert(item0_counter == 1);
			assert(item1_counter == 1);
			assert(item2_counter == 1);
		}
		assert(item0_counter == 0);
		assert(item1_counter == 0);
		assert(item2_counter == 0);
	}

	// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Å, –±—Ä–æ—Å–∞—é—â–∏–π –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è N-–∫–æ–ø–∏–∏
	struct ThrowOnCopy {
		ThrowOnCopy() = default;
		explicit ThrowOnCopy(int& copy_counter) noexcept
			: countdown_ptr(&copy_counter) {
		}
		ThrowOnCopy(const ThrowOnCopy& other)
			: countdown_ptr(other.countdown_ptr)  //
		{
			if (countdown_ptr) {
				if (*countdown_ptr == 0) {
					throw std::bad_alloc();
				}
				else {
					--(*countdown_ptr);
				}
			}
		}
		// –ü—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
		ThrowOnCopy& operator=(const ThrowOnCopy& rhs) = delete;
		// –ê–¥—Ä–µ—Å —Å—á—ë—Ç—á–∏–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á—ë—Ç–∞. –ï—Å–ª–∏ –Ω–µ —Ä–∞–≤–µ–Ω nullptr, —Ç–æ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏.
		// –ö–∞–∫ —Ç–æ–ª—å–∫–æ –æ–±–Ω—É–ª–∏—Ç—Å—è, –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–±—Ä–æ—Å–∏—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
		int* countdown_ptr = nullptr;
	};

	{
		bool exception_was_thrown = false;
		// –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ —É–º–µ–Ω—å—à–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–π –¥–æ –Ω—É–ª—è, –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç –≤—ã–±—Ä–æ—à–µ–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
		for (int max_copy_counter = 5; max_copy_counter >= 0; --max_copy_counter) {
			// –°–æ–∑–¥–∞—ë–º –Ω–µ–ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
			SingleLinkedList<ThrowOnCopy> list;
			list.PushFront(ThrowOnCopy{});
			try {
				int copy_counter = max_copy_counter;
				list.PushFront(ThrowOnCopy(copy_counter));
				// –ï—Å–ª–∏ –º–µ—Ç–æ–¥ –Ω–µ –≤—ã–±—Ä–æ—Å–∏–ª –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —Å–ø–∏—Å–æ–∫ –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–π—Ç–∏ –≤ –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
				assert(list.GetSize() == 2);
			}
			catch (const std::bad_alloc&) {
				exception_was_thrown = true;
				// –ü–æ—Å–ª–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–Ω–∏—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ–ª–∂–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è –ø—Ä–µ–∂–Ω–∏–º
				assert(list.GetSize() == 1);
				break;
			}
		}
		assert(exception_was_thrown);
	}
}

int main() {
	Test1();
}"
vCbzs1Dd,Product of Array Except Self,jayati,C++,Tuesday 30th of April 2024 12:18:17 PM CDT,"class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int prefixSum = 1, n = nums.size();
        vector<int> result(n, 1);
        for (int i = 0; i < n - 1; i++) {
            result[i + 1] = prefixSum * nums[i];
            prefixSum *= nums[i];
        }
        prefixSum = 1;
        for (int i = n - 1; i > 0; i--) {
            result[i - 1] *= prefixSum * nums[i];
            prefixSum *= nums[i];
        }
        return result;
    }
};"
VhmEhHGW,SFDSEFSEGSEG,gadungw71,PHP,Tuesday 30th of April 2024 12:15:39 PM CDT,"https://www.artstation.com/artwork/elk9BD
https://www.artstation.com/xemphimmai2024thuyetminh6/profile
https://bento.me/mai-full-hd-vietsub-2024
https://m.facebook.com/media/set/?set=a.122161524374061291
https://www.artstation.com/artwork/vDeyGv
https://www.artstation.com/mai2024phimvietsub6/profile
https://bento.me/phim-mai-2024-hd-vietsub
https://m.facebook.com/media/set/?set=a.122158042586063154
https://www.artstation.com/artwork/39J8LB
https://www.artstation.com/quycaufullvietsub8/profile
https://bento.me/quy-cau-phim-vietsub
https://m.facebook.com/media/set/?set=a.122120358836071587
https://wandering.flarum.cloud/d/58545-jagokandang
https://hiuderyy.hashnode.dev/dsfsdefrgrdsny
https://medium.com/@rarawwwuu21/dsfsgbtdrny-192d9a81fe07
https://www.kooapp.com/koo/guest_9VC868/a883b0b7-9621-411b-bf60-d705ab75fdf7
https://www.kooapp.com/koo/guest_P68S8O/b4905323-e52f-4bc9-a35e-2176e141493a
https://open.firstory.me/user/clvmn3d82001701zc7s81hgwc
https://open.firstory.me/story/clvmn3tl2000401xxdq3v9g16
https://www.onfeetnation.com/profiles/blogs/dsfsefgseg
https://hackmd.io/@rerewilli6/r1uUSiR-C
https://demo.hedgedoc.org/s/WBH3tqsFU
https://rentry.co/s5sue4dz
https://paste.ee/p/O3pyN
https://yamcode.com/dsfsedfseg
https://start.me/w/7XBrpp
https://telegra.ph/DSFSEDF-04-30
https://muckrack.com/mona-lissa/bio
http://aldenfamilydentistry.com/UserProfile/tabid/57/userId/740463/Default.aspx
https://www.fitlynk.com/1714497215F244272
"
nc1Cy1dS,ü§ë G2A.com Free Gift Card Guide Apr 2024 FIX üí∞,ssss50w,GetText,Tuesday 30th of April 2024 12:11:23 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view

Working as of:
30 April 2024"
Wy9QAuea,ü§ë G2A.com Free Gift Card Guide Apr 2024 FIX ü§ë,jusst2k4,GetText,Tuesday 30th of April 2024 12:08:33 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_269589.pdf

Working as of:
30 April 2024"
LPH9D4b0,Untitled,Locative,SQL,Tuesday 30th of April 2024 11:43:44 AM CDT,"-- [ –û–ø–ª–∞—Ç–∞ –∑–∞: –∞–ø—Ä–µ–ª—å]
 
--------- [ –û—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è: ]
 
Locative: 56 (—Ö5), 30 (FUN) 52 (x100) -- 138
–ó–∏–ª–∏—É—Å: 0 (—Ö5), 120 (x100) -- 120
Khyntia: 0 (x5), 99 (FUN), 0 (x100) -- 99
jegermaister  - EN GM: 3 (—Ö5), 56 (FUN), 153 (x100) -- 212
–ß–µ—à–∏—Ä—Å–∫–∏–π –ö–æ—Ç: 6 (x5), 3 (FUN), 105 (x100) -- 114
Mairena: 40 (—Ö5), 0 (FUN) 69 (x100) -- 109
Lorad: 3 (x100) -- 3



--------- [ –ë–æ–Ω—É—Å—ã: ]

UPDATE `bonus` SET `gold`=gold+4000 WHERE `id`='1407530'; -- Locative(3000–ì–ú + 1000–†–ì–ú)
INSERT INTO `bonus_log`(`user_id`, `created`, `bonus`, `msg`) VALUES (1407530, NOW(), 4000, '+4000 –∑–æ–ª–æ—Ç—ã—Ö –±–æ–Ω—É—Å–æ–≤ - –∑/–ø –†–≥–º Locative –∑–∞ –∞–ø—Ä–µ–ª—å');

UPDATE `bonus` SET `gold`=gold+3000 WHERE `id`='229884'; -- –ó–∏–ª–∏—É—Å (–ì–ú)
INSERT INTO `bonus_log`(`user_id`, `created`, `bonus`, `msg`) VALUES (229884, NOW(), 3000, '+3000 –∑–æ–ª–æ—Ç—ã—Ö –±–æ–Ω—É—Å–æ–≤ - –∑/–ø –ì–ú –ó–∏–ª–∏—É—Å –∑–∞ –∞–ø—Ä–µ–ª—å');

UPDATE `bonus` SET `gold`=gold+3000 WHERE `id`='949105'; -- Khyntia (–ì–ú).
INSERT INTO `bonus_log`(`user_id`, `created`, `bonus`, `msg`) VALUES (949105, NOW(), 3000, '+3000 –∑–æ–ª–æ—Ç—ã—Ö –±–æ–Ω—É—Å–æ–≤ - –∑/–ø –ì–ú Khyntia –∑–∞ –∞–ø—Ä–µ–ª—å'); 

UPDATE `bonus` SET `gold`=gold+3500 WHERE `id`='455260'; -- Jegerm (EN GM) + md FB.
INSERT INTO `bonus_log`(`user_id`, `created`, `bonus`, `msg`) VALUES (455260, NOW(), 3500, '+3500 –∑–æ–ª–æ—Ç—ã—Ö –±–æ–Ω—É—Å–æ–≤ - –∑/–ø –ì–ú Jegerm –∑–∞ –∞–ø—Ä–µ–ª—å'); 

UPDATE `bonus` SET `gold`=gold+2700 WHERE `id`='810625'; -- –ß–µ—à–∏—Ä—Å–∫–∏–π –ö–æ—Ç 2
INSERT INTO `bonus_log`(`user_id`, `created`, `bonus`, `msg`) VALUES (810625, NOW(), 2700, '+2700 –∑–æ–ª–æ—Ç—ã—Ö –±–æ–Ω—É—Å–æ–≤ - –∑/–ø –ì–ú –ß–µ—à–∏—Ä—Å–∫–∏–π –ö–æ—Ç –∑–∞ –∞–ø—Ä–µ–ª—å'); 

UPDATE `bonus` SET `gold`=gold+3000 WHERE `id`='1407530'; -- Mairena
INSERT INTO `bonus_log`(`user_id`, `created`, `bonus`, `msg`) VALUES (1407530, NOW(), 3000, '+3000 –∑–æ–ª–æ—Ç—ã—Ö –±–æ–Ω—É—Å–æ–≤ - –∑/–ø –ì–ú Mairena –∑–∞ –∞–ø—Ä–µ–ª—å'); 


-- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞

UPDATE `bonus` SET `gold`=gold+1000 WHERE `id`='456853'; -- Seanone
INSERT INTO `bonus_log`(`user_id`, `created`, `bonus`, `msg`) VALUES (456853, NOW(), 1000, '+1000 –∑–æ–ª–æ—Ç—ã—Ö –±–æ–Ω—É—Å–æ–≤ - –∑/–ø —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∏ Seanone –∑–∞ –∞–ø—Ä–µ–ª—å'); 


-- QA Team

UPDATE `bonus` SET `gold`=gold+0 WHERE `id`='211220'; -- nastyasia
UPDATE bonus SET gold=gold+0 WHERE id= 1507620; -- Reberalo 
"
c4hzdqG4,stringWithBasket,SaNik74,C#,Tuesday 30th of April 2024 11:40:08 AM CDT,"string bracketsString = ""(()(()))"";
int parenthesisDepth = 0;
int currentDepth = 0;
char openBrecket = '(';
char closeBrecket = ')';

if (bracketsString.Length % 2 != 0 || bracketsString[0] == closeBrecket || bracketsString[bracketsString.Length - 1] == openBrecket)
{
    Console.WriteLine(""–ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä–æ–∫–∞."");
}
else
{
    foreach (char bracket in bracketsString)
    {
        if (bracket == openBrecket)
        {
            currentDepth++;
        }
        else
        {
            currentDepth--;
        }

        if (currentDepth > parenthesisDepth)
        {
            parenthesisDepth = currentDepth;
        }
    }

    if (currentDepth != 0)
    {
        Console.WriteLine(""–ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä–æ–∫–∞."");
    }
    else
    {
        Console.WriteLine($""{bracketsString} - —Å—Ç—Ä–æ–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∏ –º–∞–∫—Å–∏–º—É–º –≥–ª—É–±–∏–Ω—ã —Ä–∞–≤–Ω—è–µ—Ç—Å—è {parenthesisDepth}"");
    }
}
"
Sey9yxTc,Banka.cs,KitSaels,C#,Tuesday 30th of April 2024 11:08:20 AM CDT,"using System;
using System.Collections.Generic;

internal class Program {

	static void Main(string[] args) {
		UrocenyUcet ucet = new UrocenyUcet(""prvni"", 20);
		ucet.Stav();
		ucet.VlozHotovost(22);
		ucet.Stav();
		ucet.VyberHotovosti(30);
		ucet.Stav();
		ucet.VyberHotovosti(30);
		ucet.Stav();
	}
}

class BankovniUcet {
	private string CisloUctu;
	private double StavUctu;

	public BankovniUcet(string ucet, double stav) {
		CisloUctu = ucet;
		StavUctu = stav;
	}

	public virtual void VlozHotovost(double castka) {
		StavUctu += castka;
	}

	public void VyberHotovosti(double castka) {
		if (castka > StavUctu) {
			throw new Exception();
		}
		StavUctu -= castka;
	}

	public double Zustatek() {
		return StavUctu;
	}

	public void PrevoPenez(double castka, BankovniUcet ucet) {
		if (castka > StavUctu) {
			throw new Exception();
		}
		StavUctu -= castka;
		ucet.VlozHotovost(castka);
	}

	public void Stav() {
		Console.WriteLine($""Na √∫ƒçtu {CisloUctu} je {StavUctu} Kƒç"");
	}
}

class UrocenyUcet: BankovniUcet {
	public UrocenyUcet(string ucet, double stav): base(ucet, stav) {
	}

	public override void VlozHotovost(double castka) {
		base.VlozHotovost(castka * 1.03) ;
	}
}
"
T0NQsmKf,Bod.cs,KitSaels,C#,Tuesday 30th of April 2024 11:07:25 AM CDT,"using System;
using System.Collections.Generic;

internal class Program {

	static void Main(string[] args) {
		Bod bod = new Bod();
		Console.WriteLine(""Zadej sou≈ôadnice bodu"");
		bod.nacti_souradnici();
		Bod posun = new Bod();
		Console.WriteLine(""Zadej posunut√≠"");
		posun.nacti_souradnici();
		bod.posunuti(posun);
		bod.vypis_souradnice();
		Console.WriteLine(bod.vypocitej_vzdalenost(0, 0));
	}
}

class Bod {
	public int x {get; set;}
	public int	y {get; set;}

	public Bod() {
		x = 0;
		y = 0;
	}

	public Bod(int x, int y) {
		this.x = x;
		this.y = y;
	}

	public void posunuti(Bod bod) {
		this.x += bod.x;
		this.y += bod.y;
	}

	public void vypis_souradnice() {
		Console.WriteLine($""[{x}, {y}]"");
	}

	public double vypocitej_vzdalenost(int x, int y) {
		int dx = this.x - x;
		int dy = this.y - y;
		return Math.Sqrt(dx*dx + dy*dy);
	}

	public void nacti_souradnici() {
		Console.Write(""x: "");
		x = Convert.ToInt32(Console.ReadLine());
		Console.Write(""y: "");
		y = Convert.ToInt32(Console.ReadLine());
	}
}
"
CLDVZuFJ,pocet.cs,KitSaels,C#,Tuesday 30th of April 2024 11:05:57 AM CDT,"using System;
using System.Collections.Generic;

internal class Program {

	static void Main(string[] args) {
		Console.Write(""Zadej ≈ôetƒõzec: "");
		string line = Console.ReadLine();
		string[] words = line.Split(' ');
		Console.WriteLine(words.Length);
		foreach (string word in words) {
			if (word.Length >=1) {
				Console.Write(word[0]);
				Console.Write(' ');
			}
		}
		Console.WriteLine();
		Console.WriteLine(line.ToUpper());
		Console.WriteLine(line.Length);
	}
}"
ubCu1rXx,DMVCFramework :: Renders JSON array vs JSON object,danieleteti,Delphi,Tuesday 30th of April 2024 11:03:49 AM CDT,"// This action renders an array of json objects
procedure TCustomersController.GetCustomers([MVCFromQueryString('rql','')] RQLFilter: String);
begin
  if RQLFilter.IsEmpty then
    Render<TCustomer>(TMVCActiveRecord.All<TCustomer>)
  else
    Render<TCustomer>(TMVCActiveRecord.SelectRQL<TCustomer>(RQLFilter, 1000));
end;

// This action renders a jsonobject containing a property ""data"" which contains an array of json objects
procedure TCustomersController.GetCustomers([MVCFromQueryString('rql','')] RQLFilter: String);
begin
  if RQLFilter.IsEmpty then
    Render(ObjectDict().Add('data', TMVCActiveRecord.All<TCustomer>))
  else
    Render(ObjectDict().Add('data', TMVCActiveRecord.SelectRQL<TCustomer>(RQLFilter, 1000)));
end;
"
mu4NA4Ng,Untitled,egraPA,C++,Tuesday 30th of April 2024 09:52:12 AM CDT,"#include <iostream>
#include <vector>
// #include <cstdio>
// #include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <sstream>
#include <iomanip>

using namespace std;
FILE* pipe;
class Matrix {
    protected:
        vector<vector<double>> data;
        int n;
        int m;
    public:
        Matrix() {
            n = 0;
            m = 0;
        }
        Matrix (int x, int y) {
            n = x;
            m = y;
            data.assign(n, vector<double>(m));
        }
        Matrix& operator+ (const Matrix& matrix) {
            if (matrix.m != m || matrix.n != n) {
                throw runtime_error(""Error: the dimensional problem occurred"");
            }
            Matrix *ans = new Matrix(n, m);
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < m; j++) {
                    ans->data[i][j] = data[i][j] + matrix.data[i][j];
                }
            }
            return *ans;
        }
        Matrix& operator- (const Matrix& matrix) {
            if (matrix.m != m || matrix.n != n) {
                throw runtime_error(""Error: the dimensional problem occurred"");
            }
            Matrix *ans = new Matrix(n, m);
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < m; j++) {
                    ans->data[i][j] = data[i][j] - matrix.data[i][j];
                }
            }
            return *ans;
        }
        Matrix& operator* (const Matrix& matrix) {
            if (matrix.n != m) {
                throw runtime_error(""Error: the dimensional problem occurred"");
            }
            Matrix *ans = new Matrix(n, matrix.m);
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < matrix.m; j++) {
                    for (int k = 0; k < m; k++) {
                        ans->data[i][j] += data[i][k]*matrix.data[k][j];
                    }
                }
            }
            return *ans;
        }
        Matrix& transpose() {
            Matrix *ans = new Matrix(m, n);
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < m; j++) {
                    ans->data[j][i] = data[i][j];
                }
            }
            return *ans;
        }
        Matrix& operator| (const Matrix& matrix) {
            if (matrix.n != n) {
                throw runtime_error(""Error: the dimensional problem occurred"");
            }
            Matrix *ans = new Matrix(n, matrix.m + m);
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < m; j++) {
                    ans->data[i][j] = data[i][j];
                }
                for (int j = m; j < matrix.m + m; j++) {
                    ans->data[i][j] = matrix.data[i][j-m];
                }
            }
            return *ans;
        }
        vector<double>& operator[] (int x) {
            if (x >= n) {
                throw runtime_error(""Error: index out of range"");
            } 
            return data[x];
        }
        friend istream& operator>> (istream &is, Matrix &matrix);
        friend ostream& operator<< (ostream &os, Matrix &matrix);
        double get(int i, int j) {
            if (i >= n || j >= m) {
                throw out_of_range(""Out of bound for get"");
            }
            return data[i][j];
        }
        bool is_square() {
            return n == m;
        }
        int get_n() {
            return n;
        }
        int get_m() {
            return m;
        }
        void normalize_diagonally() {
            for (int i = 0; i < n; i++) {
                if (data[i][i] != 0) {
                    for (int j = i + 1; j < m; j++) {
                        data[i][j] /= data[i][i];
                    }
                    data[i][i] = 1;
                }
            }
        }
        void separate() {
            // for (int i = 0; i < n; i++) {
            //     for (int j = 0; j < m - 1; j++) {
            //         // if (abs(data[i][j]) < 0.005) {
            //         //     // // cout << fixed << abs(data[i][j]) << ' ';
            //         // } else
            //         // // // cout << fixed << data[i][j] << ' ';
            //     }
            //     // cout << '\n';
            // }
            // for (int j = 0; j < n; j++) {
            //     if (abs(data[j][m - 1]) < 0.005) {
            //         // cout << fixed << abs(data[j][m - 1]) << ' ';
            //     } else
            //     // cout << fixed << data[j][m - 1] << ' ';
            // }
            // // cout << '\n';
        }
        void last() {
            // for (int j = 0; j < n; j++) {
            //     if (abs(data[j][m - 1]) < 0.005) {
            //         // cout << fixed << abs(data[j][m - 1]) << ' ';
            //     } else
            //     // cout << fixed << data[j][m - 1] << ' ';
            // }
            // // cout << '\n';
        }
        Matrix& inverse();
};

class Vector : public Matrix {
public:
    Vector(vector<double> input) : Matrix(input.size(), 1) {
        for (int i = 0 ; i < input.size(); i++) {
            data[i][0] = input[i];
        }
    }
};

class LeastSquareAproxMatrix : public Matrix {
public:
    LeastSquareAproxMatrix(int m, vector<double> input) : Matrix(input.size(), m + 1) {
        for (int i = 0; i < input.size(); i++) {
            double pow = 1;
            for (int j = 0; j <= m; j++) {
                data[i][j] = pow;
                pow *= input[i];
            }
        }
    }

};

class SquareMatrix : public Matrix {
public:
    SquareMatrix() {
        n = 0;
        m = 0;
    }
    SquareMatrix(int x) : Matrix(x, x) {};
    friend istream& operator>> (istream &is, SquareMatrix &matrix);
};

class IdentityMatrix : public SquareMatrix {
public:
    IdentityMatrix() {
        n = 0;
        m = 0;
    }
    IdentityMatrix(int x) : SquareMatrix(x) {
        for (int i = 0; i < x; i++) {
            data[i][i] = 1;
        }
    }
};
class EliminationMatrix : public IdentityMatrix {
public:
    EliminationMatrix(Matrix& matrix, int j, int i) : IdentityMatrix(matrix.get_n()) {
        data[j - 1][i - 1] = -matrix.get(j - 1, i - 1) / matrix.get(i - 1, i - 1);
    }
};

class PermutationMatrix : public IdentityMatrix {
public:
    PermutationMatrix(int x, int i, int j) : IdentityMatrix(x) {
        data[j - 1][j - 1] = 0;
        data[i - 1][i - 1] = 0; 
        data[i - 1][j - 1] = 1;
        data[j - 1][i - 1] = 1;
    }
};

istream& operator>> (istream &is, SquareMatrix& matrix) {
    is >> matrix.n;
    matrix.m = matrix.n;
    matrix.data.assign(matrix.n, vector<double>(matrix.m));
    for (int i = 0; i < matrix.n; i++) {
        for (int j = 0; j < matrix.m; j++) {
            is >> matrix.data[i][j];
        }
    }
    return is;
}

istream& operator>> (istream &is, Matrix& matrix) {
    is >> matrix.n >> matrix.m;
    matrix.data.assign(matrix.n, vector<double>(matrix.m));
    for (int i = 0; i < matrix.n; i++) {
        for (int j = 0; j < matrix.m; j++) {
            is >> matrix.data[i][j];
        }
    }
    return is;
}
ostream& operator<< (ostream &os, Matrix& matrix) {
    for (int i = 0; i < matrix.n; i++) {
        for (int j = 0; j < matrix.m; j++) {
            if (abs(matrix.data[i][j]) < 0.005) {
                os << fixed << abs(matrix.data[i][j]) << ' ';
            } else
            os << fixed << matrix.data[i][j] << ' ';
        }
        os << '\n';
    }
    return os;
}


bool gaus_elimination(Matrix& a, int &step) {
    bool sign = 1;
    for (int i = 0; i < a.get_n(); i++) {
        double m = 0;
        int m_i = 0;
        for (int j = i; j < a.get_n(); j++) {
            if (abs(a.get(j, i)) > abs(m))  {
                m = a.get(j, i);
                m_i = j;
            }
        }
        if (m_i != i) {
            // // cout << fixed  << ""step #"" << step << "": permutation"" << '\n';
            PermutationMatrix p(a.get_n(), m_i + 1, i + 1);
            a = p * a;
            // a.separate();
            sign = !sign;
            step++;
        }
        for (int j = i + 1; j < a.get_n(); j++) {
            if (a.get(j, i) != 0) {
                // // cout << fixed  << ""step #"" << step << "": elimination"" << '\n';
                step++;
                EliminationMatrix e(a, j + 1, i + 1);
                a = e * a;
                // a.separate();
            }   
        }
    }
    return sign;
}

void gaus_back_elimination(Matrix& a, int &step) {
    for (int i = a.get_n() - 1; i >= 0; i--) {
        if (a.get(i, i) != 0) {
            for (int j = i - 1 ; j >= 0; j--) {
                if (a.get(j, i) != 0) {
                    step++;
                    EliminationMatrix e(a, j + 1, i + 1);
                    a = e * a;
                    a.separate();
                }
            }
        }
    }
}

Matrix& Matrix::inverse() {
    Matrix* ans = new Matrix(n, m);
    IdentityMatrix I(n);
    Matrix aug = *this | I;
    int step = 1;
    gaus_elimination(aug, step);
    gaus_back_elimination(aug, step);
    aug.normalize_diagonally();
    for (int j = 0; j < aug.get_n(); j++) {
        for (int i = aug.get_n(); i < aug.get_m(); i++) {
            (*ans)[j][i - aug.get_n()] = aug.get(j, i);
        }
    }

    return *ans;
}

class ColumnVector : public Matrix {
public:
    ColumnVector() {
        n = 0;
        m = 0;
    }
    ColumnVector(int x) {
        n = x;
        m = 1;
        data.resize(n, vector<double>(1));
    }
    friend istream& operator>> (istream &is, ColumnVector &matrix);
    friend ostream& operator<< (ostream &os, ColumnVector &matrix);
};

istream& operator>> (istream &is, ColumnVector& matrix) {
    is >> matrix.n;
    matrix.m = 1;
    matrix.data.resize(matrix.n,vector<double>(1));
    for (int i = 0; i < matrix.n; i++) {
        is >> matrix.data[i][0];
    }
    return is;
}
ostream& operator<< (ostream &os, ColumnVector& matrix) {
    for (int i = 0; i < matrix.n; i++) {
        os << matrix.data[i][0] << ' ';
    }
    os << '\n';
    return os;
}

bool is_singular( Matrix a) {
    for (int i = 0; i < a.get_n(); i++) {
        double m = 0;
        int m_i = 0;
        for (int j = i; j < a.get_n(); j++) {
            if (abs(a.get(j, i)) > abs(m))  {
                m = a.get(j, i);
                m_i = j;
            }
        }
        if (m_i != i) {
            PermutationMatrix p(a.get_n(), m_i + 1, i + 1);
            a = p * a;
        }
        for (int j = i + 1; j < a.get_n(); j++) {
            if (a.get(j, i) != 0) {
                EliminationMatrix e(a, j + 1, i + 1);
                a = e * a;
            }   
        }
    }
    for (int i = 0; i < a.get_n(); i++) {
        if (a.get(i, i) == 0) {
            return 0;
        }
    }
    return 1;
}
inline string to_s(double val) {
    stringstream ss;
    ss << fixed << setprecision(4) << val;
    return ss.str();
}
int main() {
    pipe = popen(""/usr/bin/gnuplot -persist"", ""w"");
    double min_x = 1000000;
    double max_x = -1000000;
    double min_y = 100000000;
    double max_y = -1000000;

    if (pipe == NULL) {
       return 0;
    }
    int m;
    cin >> m;
    vector<double> data_a, data_b;
    for (int i = 0; i < m; i++) {
        double a, b;
        cin >> a >> b;
        data_a.push_back(a);
        data_b.push_back(b);
        min_x = min(min_x, a);
        min_y = min(min_y, b);
        max_x= max(max_x, a);
        max_y = max(max_y, b);
    }
    int n;
    cin >> n;
    LeastSquareAproxMatrix A(n, data_a);
    cout << A;
    Vector b(data_b);
    cout << b;
    cout.precision(4);
    Matrix c = (A.transpose() * A).inverse() * A.transpose() * b;
    string s = ""f(x)="" +to_s(c.get(c.get_n() - 1, 0)) + ""*x**"" + to_string(c.get_n() - 1);
    for(int i = c.get_n() - 2; i > 0; i--) {
        s += ""+("" + to_s(c.get(i, 0)) + ""*x**"" + to_string(i) + "")"";
    }
    s += ""+("" + to_s(c.get(0, 0)) + "")"";
    fputs(s.c_str(), pipe);
    fprintf(pipe, ""\n"");
    fputs((""plot [""+ to_string(int(min_x - 1)) + "":"" + to_string(int(max_x+ 1)) + ""][""+ to_string(int (min_y - 1)) + "":"" + to_string(int (max_y + 1)) + ""] '-' using 1:2 title 'points' with points pointtype 5, f(x) title 'approximation' with lines"").c_str(), pipe);
    fprintf(pipe, ""\n"");
    for (int i = 0; i < m; i++) {
        fprintf(pipe, ""%f\t%f\n"", data_a[i], data_b[i]);
    }
    fprintf(pipe, ""%s\n"", ""e"");
    cout << s << '\n';
    cout << c;
    pclose(pipe);
}"
Ni0ZjA2V,CyberPi-buttons1,miklik,Python,Tuesday 30th of April 2024 09:51:31 AM CDT,"import cyberpi

@cyberpi.event.start
def on_start():
    cyberpi.console.println(""Start"")

@cyberpi.event.is_press('up')
def is_press_up():
    cyberpi.console.println(""UP"")

@cyberpi.event.is_press('down')
def is_press_up():
    cyberpi.console.println(""DOWN"")
    
@cyberpi.event.is_press('left')
def is_press_up():
    cyberpi.console.println(""LEFT"")

@cyberpi.event.is_press('right')
def is_press_up():
    cyberpi.console.println(""RIGHT"")

@cyberpi.event.is_press('middle')
def is_press_up():
    cyberpi.console.println(""MIDDLE"")

@cyberpi.event.is_press('a')
def is_press_up():
    cyberpi.console.println(""A"")

@cyberpi.event.is_press('b')
def is_press_up():
    cyberpi.console.println(""B"")"
TkaDBqjY,DNA 3D visualiser with GPT4.5,DenisSergeevitch,Python,Tuesday 30th of April 2024 09:44:20 AM CDT,"import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

# Step 1: Load Data Efficiently
def load_data(filepath):
    headers = ['rsid', 'chromosome', 'position', 'genotype']
    # Specify dtype to improve read performance
    dtypes = {'rsid': str, 'chromosome': 'category', 'position': int, 'genotype': str}
    data = pd.read_csv(filepath, delimiter='\t', names=headers, comment='#', dtype=dtypes, low_memory=False)
    print(data.head())
    return data

# Step 2: Preprocess and Encode Data
def preprocess_data(data):
    # Replace '--' with NaN directly in read_csv using na_values
    data['genotype'].replace('--', np.nan, inplace=True)
    data.dropna(subset=['genotype'], inplace=True)
    data['genotype_value'] = data['genotype'].apply(lambda x: len(x))
    
    # Convert 'chromosome' to numeric if possible, otherwise to category which is handled later in plotting
    data['chromosome'] = pd.to_numeric(data['chromosome'], errors='coerce')
    if data['chromosome'].isnull().any():
        data['chromosome'] = pd.Categorical(data['chromosome'].fillna('X')).codes
    return data

# Step 3: Optimized Plotting Function
def plot_data(data):
    fig = plt.figure(figsize=(10, 8))
    ax = fig.add_subplot(111, projection='3d')

    # Downsampling data for faster rendering; adjust the step size as needed
    step = 10  # Increase step size to speed up or decrease for more detail
    # Adjusting the color map to 'Reds' and normalizing the color range
    norm = plt.Normalize(data['genotype_value'].min(), data['genotype_value'].max())
    scatter = ax.scatter(data['chromosome'][::step], data['position'][::step], data['genotype_value'][::step],
                         c=data['genotype_value'][::step], cmap='Reds', norm=norm,
                         marker='o', alpha=0.6, s=50)

    ax.set_xlabel('Chromosome')
    ax.set_ylabel('Position')
    ax.set_zlabel('Genotype Value')
    ax.set_title('3D Visualization of DNA Genotypes')

    cbar = fig.colorbar(scatter, ax=ax, pad=0.1)
    cbar.set_label('Genotype Value')

    plt.show()

# Main function
def main():
    filepath = '/file.txt'  # Specify the actual file path
    data = load_data(filepath)
    processed_data = preprocess_data(data)
    plot_data(processed_data)

if __name__ == ""__main__"":
    main()"
G6z94zaD,Untitled,rezamalik15,MySQL,Tuesday 30th of April 2024 09:25:48 AM CDT,"CREATE TABLE `users` (
  `id` int(10) DEFAULT NULL,
  `nama` varchar(100) DEFAULT NULL,
  `tempat_lahir` varchar(200) DEFAULT NULL,
  `tanggal_lahir` date DEFAULT NULL
);

INSERT INTO `users` VALUES (16936,'Abyasa Aryani','Bengkulu','1989-05-20'),(3399,'Abyasa Farida','Tarakan','2013-10-28'),(14502,'Abyasa Firgantoro','Pematangsiantar','1975-12-19'),(11944,'Abyasa Halimah','Langsa','1973-09-29'),(836,'Abyasa Handayani, S.Ked','Tual','2019-05-15'),(1329,'Abyasa Haryanti, M.Pd','Meulaboh','1975-10-15'),(15805,'Abyasa Laksmiwati','Blitar','1989-12-11'),(6636,'Abyasa Maheswara','Sawahlunto','1989-08-21'),(14766,'Abyasa Mardhiyah','Kota Administrasi Jakarta Utara','2002-05-16'),(8867,'Abyasa Maryadi','Palopo','2008-07-09'),(3544,'Abyasa Megantara','Sungai Penuh','2000-12-30'),(16870,'Abyasa Megantara, S.E.I','Batu','2005-05-07'),(14241,'Abyasa Mustofa, S.Psi','Palu','2016-04-26'),(2262,'Abyasa Pangestu','Sawahlunto','2009-07-29'),(14129,'Abyasa Saefullah','Singkawang','1985-12-18'),(14630,'Abyasa Wibowo','Mojokerto','2020-11-23'),(4472,'Abyasa Wijaya','Banjarmasin','2009-10-07'),(1324,'Abyasa Winarno','Bogor','1980-09-30'),(2687,'Abyasa Yolanda','Cimahi','2020-09-01'),(15622,'Ade Agustina','Kotamobagu','2016-05-03'),(9810,'Ade Agustina','Tegal','1980-06-07'),(16578,'Ade Dabukke','Parepare','1970-12-03'),(16967,'Ade Dongoran','Palembang','2011-07-19'),(4277,'Ade Firgantoro','Cilegon','1973-10-12'),(15854,'Ade Firmansyah','Tidore Kepulauan','2011-10-12'),(8016,'Ade Fujiati','Samarinda','1993-09-07'),(11543,'Ade Habibi','Pekanbaru','2021-06-03'),(1583,'Ade Hardiansyah, S.I.Kom','Sungai Penuh','1997-11-29'),(2025,'Ade Hartati','Solok','2009-01-02'),(16140,'Ade Hidayat, S.IP','Bogor','2023-04-27'),(5997,'Ade Irawan','Lhokseumawe','1971-05-21'),(7719,'Ade Kurniawan','Lubuklinggau','2013-06-25');
"
B3gKt3NP,Untitled,Tkap1,C++,Tuesday 30th of April 2024 09:21:52 AM CDT,"
struct s_chunk_thread_data
{
	int state;
	s_lin_arena arena;
	s_transform* blocks[c_chunk_size][c_chunk_size];
	s_shared_circular_buffer<s_v2i, c_chunk_count * c_chunk_count> chunks_completed;
};

if(!game->chunks_generated) {
	game->chunks_generated = true;
	void* memory = malloc(MB(100));
	game->chunk_thread_data.arena = make_arena_from_memory(memory, ""thread"", MB(100));
	reset_chunks();
	generate_chunks(&game->chunk_thread_data);
}

func void reset_chunks()
{
	for(int chunk_x = 0; chunk_x < c_chunk_count; chunk_x++) {
		for(int chunk_z = 0; chunk_z < c_chunk_count; chunk_z++) {
			s_chunk* chunk = &game->chunks[chunk_x][chunk_z];
			chunk->generated = false;
			memset(chunk->blocks, 0, sizeof(b8) * c_chunk_size * c_chunk_size * c_chunk_height);
		}
	}
}


func DWORD WINAPI generate_chunks(void* param)
{
	s_chunk_thread_data* chunk_thread_data = (s_chunk_thread_data*)param;

	for(int x = 0; x < c_chunk_count * c_chunk_size; x++) {
		for(int z = 0; z < c_chunk_count * c_chunk_size; z++) {
			s_v2i chunk_index = v2i(x / 16, z / 16);
			s_chunk* chunk = &game->chunks[chunk_index.x][chunk_index.y];
			float f = fnlGetNoise2D(&game->noise, (float)x, (float)z);
			int y = (int)range_lerp(f, -1, 1, 0, c_chunk_height - 1);
			for(int i = 0; i <= y; i++) {
				chunk->blocks[x % c_chunk_size][i][z % c_chunk_size] = true;
			}
		}
	}

	for(int chunk_x = 0; chunk_x < c_chunk_count; chunk_x++) {
		for(int chunk_z = 0; chunk_z < c_chunk_count; chunk_z++) {
			int count = 0;
			s_chunk* chunk = &game->chunks[chunk_x][chunk_z];
			chunk->num_visible_blocks = count_visible_blocks_in_chunk(v2i(chunk_x, chunk_z));
			printf(""processing chunk %i, %i (%i blocks)\n"", chunk_x, chunk_z, chunk->num_visible_blocks);
			chunk_thread_data->blocks[chunk_x][chunk_z] = (s_transform*)la_get_zero(&chunk_thread_data->arena, sizeof(s_transform) * chunk->num_visible_blocks);
			for(int x = 0; x < c_chunk_size; x++) {
				for(int y = 0; y < c_chunk_height; y++) {
					for(int z = 0; z < c_chunk_size; z++) {
						int xx = x + chunk_x * c_chunk_size;
						int zz = z + chunk_z * c_chunk_size;
						if(!is_block_visible(v2i(chunk_x, chunk_z), v3i(x, y, z))) { continue; }
						s_m4 model = m4_identity();
						s_v3 pos = v3(xx, y, zz) * c_block_size;
						model = m4_multiply(model, m4_translate(pos));
						model = m4_multiply(model, m4_scale(v3(c_block_size)));
						chunk_thread_data->blocks[chunk_x][chunk_z][count].do_light = 0;
						chunk_thread_data->blocks[chunk_x][chunk_z][count].model = model;
						chunk_thread_data->blocks[chunk_x][chunk_z][count].color = v4(
							range_lerp((float)xx, 0, (float)c_chunk_size * c_chunk_count - 1, 0, 1),
							range_lerp((float)y, 0, (float)c_chunk_height - 1, 0, 1),
							range_lerp((float)zz, 0, (float)c_chunk_size * c_chunk_count - 1, 0, 1),
							1.0f
						);
						count += 1;
					}
				}
			}
			assert(count == chunk->num_visible_blocks);
			chunk_thread_data->chunks_completed.add(v2i(chunk_x, chunk_z));
		}
	}
	chunk_thread_data->state = 1;
	return 0;
}

template <typename t, int n>
void s_shared_circular_buffer<t, n>::add(t new_element)
{
	int index = InterlockedIncrement((LONG*)&write_index) - 1;
	elements[index % n] = new_element;
}"
mrqZRUt5,MO zero sum,Kambarych,C++,Tuesday 30th of April 2024 09:19:10 AM CDT,"#include <bits/stdc++.h>

using namespace std;

#define For(i, n)           for(int i = 0; i < n; ++i)
#define all(x)              (x).begin(),(x).end()
#define rall(x)             (x).rbegin(),(x).rend()
#define ls(x)               x+x+1
#define rs(x)               x+x+2
#define endl                '\n'

#define ld                  long double
#define pii                 pair<int, int>
#define vt                  vector
#define ll                  long long

#define sim template < class c
#define ris return * this
#define dor > debug & operator <<
#define eni(x) sim > typename \
enable_if<sizeof dud<c>(0) x 1, debug&>::type operator<<(c i) {
sim > struct rge { c b, e; };
sim > rge<c> range(c i, c j) { return rge<c>{i, j}; }
sim > auto dud(c* x) -> decltype(cerr << *x, 0);
sim > char dud(...);
#define LOCAL
struct debug {
#ifdef LOCAL
~debug() { cerr << endl; }
eni(!=) cerr << boolalpha << i; ris; }
eni(==) ris << range(begin(i), end(i)); }
sim, class b dor(pair < b, c > d) {
ris << ""("" << d.first << "", "" << d.second << "")"";
}
sim dor(rge<c> d) {
*this << ""["";
for (auto it = d.b; it != d.e; ++it)
    *this << "", "" + 2 * (it == d.b) << *it;
ris << ""]"";
}
#else
sim dor(const c&) { ris; }
#endif
};
#define imie(...) "" ["" << #__VA_ARGS__ "": "" << (__VA_ARGS__) << ""] ""

template<typename T> void read(vt<T> & a) {For(i, a.size()) cin >> a[i];}
template<typename T> void read2(vt<vt<T> > & a) {For(i, a.size()) read(a[i]);}
template<typename T> void print(vt<T> & a) {For(i, a.size()) cout << a[i] << "" ""; cout << endl;}
template<typename T> void print2(vt<vt<T> > & a) {For(i, a.size()) print(a[i]);}

const int MAX = 1e9;
const int MOD = 1000000007;
const ll  INF = 1e18;
const ld  PI  = 3.14159265358979323846;

struct calculator {
    int l = 0, r = -1;
    vt<int> color;
    vt<deque<int> > mp;
    multiset<int> st;

    calculator() {}

    calculator(vt<int> _color) {
        color = _color;
        mp.resize(color.size());
    }

    void remove(int idx) {
        if (mp[color[idx]].size() > 1) {
            int v = mp[color[idx]].back() - mp[color[idx]].front();
            st.erase(st.find(v));
        }
    }

    void add(int idx) {
        if (mp[color[idx]].size() > 1) {
            int v = mp[color[idx]].back() - mp[color[idx]].front();
            st.insert(v);
        }
    }

    void add_left() {
        remove(l - 1);
        mp[color[l - 1]].push_front(l - 1);
        add(l - 1);
        l--;
    }

    void add_right() {
        remove(r + 1);
        mp[color[r + 1]].push_back(r + 1);
        add(r + 1);
        r++;
    }

    void remove_left() {
        remove(l);
        mp[color[l]].pop_front();
        add(l);
        l++;
    }

    void remove_right() {
        remove(r);
        mp[color[r]].pop_back();
        add(r);
        r--;
    }

    int get_ans() {
        if (st.empty()) return 0;
        return *st.rbegin();
    }
};

int block_size = 500;

struct MO {
    calculator c;

    MO () {}

    MO (calculator c) : c(c) {}

    struct Query {
        int l, r, idx;
        bool operator<(Query other) const {
            return make_pair(l / block_size, r) <
                make_pair(other.l / block_size, other.r);
        }
    };

    vt<int> solve(vt<Query> queries) {
        vt<int> answers(queries.size());
        sort(queries.begin(), queries.end());

        // invariant: data structure will always reflect the range [cur_l, cur_r]
        for (Query q : queries) {
            while (c.l > q.l) c.add_left();
            while (c.r < q.r) c.add_right();
            while (c.l < q.l) c.remove_left();
            while (c.r > q.r) c.remove_right();
            answers[q.idx] = c.get_ans();
        }

        return answers;
    }
};

void solve() {
    int n, q; cin >> n >> q;
    vt<int> a(n); read(a);
    vt<ll> pref_sum(n + 1);
    map<ll, int> mp;
    mp[0] = 1;
    For(i, n) {
        pref_sum[i + 1] += pref_sum[i] + a[i];
        mp[pref_sum[i + 1]] = 1;
    }
    int cur = 0;
    for (auto p : mp) {
        mp[p.first] = cur++;
    }
    vt<int> color(n + 1);
    For(i, n + 1) {
        color[i] = mp[pref_sum[i]];
    }
    calculator c = calculator(color);
    MO mo = MO(c);
    vt<MO::Query> queries;
    For(i, q) {
        int l, r; cin >> l >> r; l--;
        queries.push_back(MO::Query{l, r, i});
    }

    vt<int> ans = mo.solve(queries);
    For(i, q) {
        cout << ans[i] << endl;
    }
}

// THE SOLUTION IS ALWAYS SIMPLE
// THE CODE IS ALWAYS SHORT

int main() {
    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#ifdef DEBUG
    freopen(""output.txt"", ""w"", stdout);
    freopen(""input.txt"", ""r"", stdin);
#endif
    int T = 1;
    For(t, T) solve();
    return 0;
}"
QCk350yU,News April30 24,Newscaster_Ned,Email,Tuesday 30th of April 2024 08:41:40 AM CDT,".‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚ÄéT‚Äée‚Äés‚Äét‚Äé ‚Äé1‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé
.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚ÄéT‚Äée‚Äés‚Äét‚Äé ‚Äé2‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé
.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚ÄéT‚Äée‚Äés‚Äét‚Äé ‚Äé3‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé
.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé ‚ÄéT‚Äée‚Äés‚Äét‚Äé ‚Äéc‚Äéo‚Äém‚Äép‚Äél‚Äée‚Äét‚Äée‚Äé.‚Äé

N‚Äée‚Äéw‚Äés‚Äé.‚Äé

K‚Äéa‚Äém‚Äéa‚Äél‚Äéa‚Äé ‚ÄéH‚Äéa‚Äér‚Äér‚Äéi‚Äés‚Äé'‚Äé ‚ÄéN‚Äéi‚Äée‚Äéc‚Äée‚Äé ‚ÄéU‚Äés‚Äée‚Äés‚Äé ‚ÄéB‚Äér‚Äéo‚Äéa‚Äéd‚Äéw‚Äéa‚Äéy‚Äé'‚Äés‚Äé ‚Äé'‚ÄéC‚Äéa‚Äéb‚Äéa‚Äér‚Äée‚Äét‚Äé'‚Äé ‚Äét‚Äéo‚Äé ‚ÄéP‚Äéu‚Äés‚Äéh‚Äé ‚ÄéA‚Äéb‚Äéo‚Äér‚Äét‚Äéi‚Äéo‚Äén‚Äé
A‚Äén‚Äét‚Äéo‚Äén‚Äéy‚Äé ‚ÄéB‚Äél‚Äéi‚Äén‚Äék‚Äée‚Äén‚Äé ‚ÄéM‚Äée‚Äée‚Äét‚Äés‚Äé ‚ÄéS‚Äéa‚Äéu‚Äéd‚Äéi‚Äé ‚ÄéC‚Äér‚Äéo‚Äéw‚Äén‚Äé ‚ÄéP‚Äér‚Äéi‚Äén‚Äéc‚Äée‚Äé,‚Äé ‚ÄéD‚Äée‚Äém‚Äéa‚Äén‚Äéd‚Äéi‚Äén‚Äég‚Äé ‚ÄéC‚Äée‚Äéa‚Äés‚Äée‚Äéf‚Äéi‚Äér‚Äée‚Äé
F‚Äél‚Äéo‚Äéa‚Äét‚Äéi‚Äén‚Äég‚Äé ‚ÄéP‚Äéi‚Äée‚Äér‚Äé ‚ÄéU‚Äé.‚ÄéS‚Äé.‚Äé ‚ÄéM‚Äéi‚Äél‚Äéi‚Äét‚Äéa‚Äér‚Äéy‚Äé ‚Äéi‚Äés‚Äé ‚ÄéB‚Äéu‚Äéi‚Äél‚Äéd‚Äéi‚Äén‚Äég‚Äé ‚Äéi‚Äén‚Äé ‚ÄéG‚Äéa‚Äéz‚Äéa‚Äé ‚Äét‚Äéo‚Äé ‚ÄéC‚Äéo‚Äés‚Äét‚Äé ‚Äé$‚Äé3‚Äé2‚Äé0‚Äé ‚ÄéM‚Äéi‚Äél‚Äél‚Äéi‚Äéo‚Äén‚Äé
R‚Äée‚Äép‚Äéo‚Äér‚Äét‚Äé:‚Äé ‚ÄéG‚Äéa‚Äés‚Äé ‚ÄéP‚Äér‚Äéi‚Äéc‚Äée‚Äés‚Äé ‚ÄéP‚Äéo‚Äél‚Äéi‚Äét‚Äéi‚Äéc‚Äéa‚Äél‚Äél‚Äéy‚Äé ‚ÄéT‚Äér‚Äéa‚Äép‚Äé ‚ÄéJ‚Äéo‚Äée‚Äé ‚ÄéB‚Äéi‚Äéd‚Äée‚Äén‚Äé,‚Äé ‚ÄéS‚Äéu‚Äér‚Äég‚Äéi‚Äén‚Äég‚Äé ‚Äé1‚Äé8‚Äé%‚Äé ‚Äéi‚Äén‚Äé ‚Äé4‚Äé ‚ÄéM‚Äéo‚Äén‚Äét‚Äéh‚Äés‚Äé
O‚Äép‚Äée‚Äén‚ÄéA‚ÄéI‚Äé ‚ÄéS‚Äét‚Äér‚Äéi‚Äék‚Äée‚Äés‚Äé ‚ÄéD‚Äée‚Äéa‚Äél‚Äé ‚Äét‚Äéo‚Äé ‚ÄéU‚Äés‚Äée‚Äé ‚ÄéF‚Äéi‚Äén‚Äéa‚Äén‚Äéc‚Äéi‚Äéa‚Äél‚Äé ‚ÄéT‚Äéi‚Äém‚Äée‚Äés‚Äé ‚ÄéJ‚Äéo‚Äéu‚Äér‚Äén‚Äéa‚Äél‚Äéi‚Äés‚Äém‚Äé ‚Äét‚Äéo‚Äé ‚ÄéT‚Äér‚Äéa‚Äéi‚Äén‚Äé ‚ÄéA‚ÄéI‚Äé ‚ÄéM‚Äéo‚Äéd‚Äée‚Äél‚Äés‚Äé
B‚Äée‚Äél‚Äét‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéR‚Äéo‚Äéa‚Äéd‚Äé ‚ÄéH‚Äéu‚Äén‚Äég‚Äéa‚Äér‚Äéy‚Äé ‚ÄéP‚Äér‚Äée‚Äép‚Äéa‚Äér‚Äée‚Äés‚Äé ‚ÄéW‚Äéa‚Äér‚Äém‚Äé ‚ÄéW‚Äée‚Äél‚Äéc‚Äéo‚Äém‚Äée‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚ÄéX‚Äéi‚Äé ‚ÄéJ‚Äéi‚Äén‚Äép‚Äéi‚Äén‚Äég‚Äé'‚Äés‚Äé ‚ÄéE‚Äéu‚Äér‚Äéo‚Äép‚Äée‚Äéa‚Äén‚Äé ‚ÄéT‚Äéo‚Äéu‚Äér‚Äé
D‚Äéo‚Äén‚Äéa‚Äél‚Äéd‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé'‚Äés‚Äé ‚ÄéB‚Äéu‚Äés‚Äéi‚Äén‚Äée‚Äés‚Äés‚Äé ‚ÄéR‚Äée‚Äéc‚Äéo‚Äér‚Äéd‚Äés‚Äé ‚ÄéT‚Äér‚Äéi‚Äéa‚Äél‚Äé ‚ÄéR‚Äée‚Äés‚Äéu‚Äém‚Äée‚Äés‚Äé ‚Äéi‚Äén‚Äé ‚ÄéN‚Äée‚Äéw‚Äé ‚ÄéY‚Äéo‚Äér‚Äék‚Äé
B‚Äér‚Äéi‚Äét‚Äéi‚Äés‚Äéh‚Äé ‚ÄéN‚ÄéH‚ÄéS‚Äé ‚ÄéC‚Äéo‚Äén‚Äés‚Äét‚Äéi‚Äét‚Äéu‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚Äét‚Äéo‚Äé ‚ÄéD‚Äée‚Äéc‚Äél‚Äéa‚Äér‚Äée‚Äé ‚Äé'‚ÄéS‚Äée‚Äéx‚Äé ‚Äéi‚Äés‚Äé ‚ÄéB‚Äéi‚Äéo‚Äél‚Äéo‚Äég‚Äéi‚Äéc‚Äéa‚Äél‚Äé'‚Äé
D‚Äér‚Äé.‚Äé ‚ÄéM‚Äéc‚ÄéC‚Äéu‚Äél‚Äél‚Äéo‚Äéu‚Äég‚Äéh‚Äé ‚Äéo‚Äén‚Äé ‚ÄéB‚Äéi‚Äér‚Äéd‚Äé ‚ÄéF‚Äél‚Äéu‚Äé:‚Äé ‚Äé‚Äò‚Äéa‚Äé ‚ÄéP‚Äée‚Äér‚Äéf‚Äée‚Äéc‚Äét‚Äé ‚ÄéS‚Äét‚Äéo‚Äér‚Äém‚Äé ‚Äéi‚Äés‚Äé ‚ÄéB‚Äér‚Äée‚Äéw‚Äéi‚Äén‚Äég‚Äé'‚Äé
A‚Äén‚Äét‚Äéi‚Äé-‚ÄéI‚Äés‚Äér‚Äéa‚Äée‚Äél‚Äé ‚ÄéP‚Äér‚Äéo‚Äét‚Äée‚Äés‚Äét‚Äée‚Äér‚Äés‚Äé ‚ÄéT‚Äéa‚Äék‚Äée‚Äé ‚ÄéO‚Äév‚Äée‚Äér‚Äé ‚ÄéA‚Äéd‚Äém‚Äéi‚Äén‚Äéi‚Äés‚Äét‚Äér‚Äéa‚Äét‚Äéi‚Äév‚Äée‚Äé ‚ÄéB‚Äéu‚Äéi‚Äél‚Äéd‚Äéi‚Äén‚Äég‚Äé ‚Äéa‚Äét‚Äé ‚ÄéC‚Äéo‚Äél‚Äéu‚Äém‚Äéb‚Äéi‚Äéa‚Äé ‚ÄéU‚Äén‚Äéi‚Äév‚Äée‚Äér‚Äé
H‚Äéu‚Äén‚Äét‚Äée‚Äér‚Äé ‚ÄéT‚Äéh‚Äér‚Äée‚Äéa‚Äét‚Äée‚Äén‚Äés‚Äé ‚Äét‚Äéo‚Äé ‚ÄéS‚Äéu‚Äée‚Äé ‚ÄéF‚Äéo‚Äéx‚Äé ‚ÄéN‚Äée‚Äéw‚Äés‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚ÄéP‚Äéu‚Äéb‚Äél‚Äéi‚Äés‚Äéh‚Äéi‚Äén‚Äég‚Äé ‚Äé‚Äò‚ÄéI‚Äén‚Äét‚Äéi‚Äém‚Äéa‚Äét‚Äée‚Äé‚Äô‚Äé ‚ÄéI‚Äém‚Äéa‚Äég‚Äée‚Äés‚Äé
G‚Äée‚Äét‚Äé ‚ÄéA‚Äél‚Äél‚Äé ‚ÄéB‚Äér‚Äée‚Äéi‚Äét‚Äéb‚Äéa‚Äér‚Äét‚Äé ‚ÄéN‚Äée‚Äéw‚Äés‚Äé ‚ÄéH‚Äée‚Äér‚Äée‚Äé
H‚Äéo‚Äém‚Äée‚ÄéP‚Äéa‚Äég‚Äée‚Äé
C‚Äéo‚Äél‚Äéu‚Äém‚Äéb‚Äéi‚Äéa‚Äé ‚ÄéC‚Äéh‚Äéa‚Äéo‚Äés‚Äé

A‚Äén‚Äét‚Äéi‚Äé-‚ÄéI‚Äés‚Äér‚Äéa‚Äée‚Äél‚Äé ‚ÄéP‚Äér‚Äéo‚Äét‚Äée‚Äés‚Äét‚Äée‚Äér‚Äés‚Äé ‚ÄéS‚Äée‚Äéi‚Äéz‚Äée‚Äé ‚ÄéA‚Äéd‚Äém‚Äéi‚Äén‚Äé ‚ÄéB‚Äéu‚Äéi‚Äél‚Äéd‚Äéi‚Äén‚Äég‚Äé

G‚Äél‚Äéa‚Äés‚Äés‚Äé ‚ÄéD‚Äéo‚Äéo‚Äér‚Äés‚Äé ‚ÄéS‚Äém‚Äéa‚Äés‚Äéh‚Äée‚Äéd‚Äé

‚Äò‚ÄéW‚Äée‚Äé ‚ÄéW‚Äéi‚Äél‚Äél‚Äé ‚ÄéN‚Äéo‚Äét‚Äé ‚ÄéR‚Äée‚Äés‚Äét‚Äé‚Äô‚Äé
N‚ÄéE‚ÄéW‚Äé ‚ÄéY‚ÄéO‚ÄéR‚ÄéK‚Äé,‚Äé ‚ÄéN‚ÄéE‚ÄéW‚Äé ‚ÄéY‚ÄéO‚ÄéR‚ÄéK‚Äé ‚Äé-‚Äé ‚ÄéA‚ÄéP‚ÄéR‚ÄéI‚ÄéL‚Äé ‚Äé2‚Äé9‚Äé:‚Äé ‚ÄéS‚Äét‚Äéu‚Äéd‚Äée‚Äén‚Äét‚Äés‚Äé/‚Äéd‚Äée‚Äém‚Äéo‚Äén‚Äés‚Äét‚Äér‚Äéa‚Äét‚Äéo‚Äér‚Äés‚Äé ‚Äél‚Äéo‚Äéc‚Äék‚Äé ‚Äéa‚Äér‚Äém‚Äés‚Äé ‚Äét‚Äéo‚Äé ‚Äég‚Äéu‚Äéa‚Äér‚Äéd‚Äé ‚Äép‚Äéo‚Äét‚Äée‚Äén‚Äét‚Äéi‚Äéa‚Äél‚Äé ‚Äéa‚Äéu‚Äét‚Äéh‚Äéo‚Äér‚Äéi‚Äé
A‚Äén‚Äét‚Äéi‚Äé-‚ÄéI‚Äés‚Äér‚Äéa‚Äée‚Äél‚Äé ‚Äép‚Äér‚Äéo‚Äét‚Äée‚Äés‚Äét‚Äée‚Äér‚Äés‚Äé ‚Äéi‚Äén‚Äév‚Äéo‚Äél‚Äév‚Äée‚Äéd‚Äé ‚Äéi‚Äén‚Äé ‚Äéa‚Äén‚Äé ‚Äée‚Äén‚Äéc‚Äéa‚Äém‚Äép‚Äém‚Äée‚Äén‚Äét‚Äé ‚Äéa‚Äét‚Äé ‚ÄéC‚Äéo‚Äél‚Äéu‚Äém‚Äéb‚Äéi‚Äéa‚Äé ‚ÄéU‚Äén‚Äéi‚Äév‚Äée‚Äér‚Äés‚Äéi‚Äét‚Äéy‚Äé ‚Äét‚Äéo‚Äéo‚Äék‚Äé ‚Äéo‚Äév‚Äée‚Äér‚Äé ‚Äéa‚Äén‚Äé ‚Äéa‚Äéd‚Äém‚Äéi‚Äén‚Äéi‚Äés‚Äét‚Äér‚Äéa‚Äét‚Äéi‚Äév‚Äée‚Äé ‚Äéb‚Äéu‚Äéi‚Äél‚Äéd‚Äéi‚Äén‚Äég‚Äé ‚Äée‚Äéa‚Äér‚Äél‚Äéy‚Äé ‚ÄéT‚Äéu‚Äée‚Äés‚Äéd‚Äéa‚Äéy‚Äé ‚Äém‚Äéo‚Äér‚Äén‚Äéi‚Äén‚Äég‚Äé.‚Äé

Z‚Äée‚Äél‚Äée‚Äén‚Äés‚Äék‚Äéy‚Äé ‚ÄéR‚Äée‚Äév‚Äée‚Äéa‚Äél‚Äés‚Äé ‚ÄéU‚Äé.‚ÄéS‚Äé.‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéU‚Äék‚Äér‚Äéa‚Äéi‚Äén‚Äée‚Äé ‚Äé‚Äò‚ÄéW‚Äéo‚Äér‚Äék‚Äéi‚Äén‚Äég‚Äé‚Äô‚Äé ‚Äéo‚Äén‚Äé ‚ÄéS‚Äéc‚Äéh‚Äée‚Äém‚Äée‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äé1‚Äé0‚Äé ‚ÄéY‚Äée‚Äéa‚Äér‚Äés‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéM‚Äéi‚Äél‚Äéi‚Äét‚Äéa‚Äér‚Äéy‚Äé ‚ÄéA‚Äéi‚Äéd‚Äé
Z‚Äée‚Äél‚Äée‚Äén‚Äés‚Äék‚Äéy‚Äé ‚ÄéR‚Äée‚Äév‚Äée‚Äéa‚Äél‚Äés‚Äé ‚Äé1‚Äé0‚Äé-‚ÄéY‚Äée‚Äéa‚Äér‚Äé ‚ÄéP‚Äél‚Äéa‚Äén‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚ÄéU‚Äé.‚ÄéS‚Äé.‚Äé ‚Äét‚Äéo‚Äé ‚ÄéS‚Äée‚Äén‚Äéd‚Äé ‚ÄéA‚Äéi‚Äéd‚Äé ‚Äét‚Äéo‚Äé ‚ÄéU‚Äék‚Äér‚Äéa‚Äéi‚Äén‚Äée‚Äé
4‚Äé,‚Äé5‚Äé2‚Äé9‚Äé
N‚Äéo‚Äél‚Äét‚Äée‚Äé:‚Äé ‚ÄéK‚Äér‚Äéi‚Äés‚Äét‚Äéi‚Äé ‚ÄéN‚Äéo‚Äée‚Äém‚Äé ‚ÄéS‚Äéh‚Äéo‚Äét‚Äé ‚ÄéH‚Äée‚Äér‚Äé ‚ÄéD‚Äéo‚Äég‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéP‚Äéo‚Äél‚Äéi‚Äét‚Äéi‚Äéc‚Äéa‚Äél‚Äé ‚ÄéF‚Äéu‚Äét‚Äéu‚Äér‚Äée‚Äé ‚Äéi‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéH‚Äée‚Äéa‚Äéd‚Äé
N‚Äéo‚Äél‚Äét‚Äée‚Äé:‚Äé ‚ÄéK‚Äér‚Äéi‚Äés‚Äét‚Äéi‚Äé ‚ÄéN‚Äéo‚Äée‚Äém‚Äé ‚ÄéS‚Äéh‚Äéo‚Äét‚Äé ‚ÄéH‚Äée‚Äér‚Äé ‚ÄéD‚Äéo‚Äég‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéP‚Äéo‚Äél‚Äéi‚Äét‚Äéi‚Äéc‚Äéa‚Äél‚Äé ‚ÄéF‚Äéu‚Äét‚Äéu‚Äér‚Äée‚Äé ‚Äéi‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéH‚Äée‚Äéa‚Äéd‚Äé
4‚Äé,‚Äé9‚Äé6‚Äé4‚Äé
C‚Äéo‚Äél‚Äéu‚Äém‚Äéb‚Äéi‚Äéa‚Äé ‚ÄéU‚Äén‚Äéi‚Äév‚Äée‚Äér‚Äés‚Äéi‚Äét‚Äéy‚Äé ‚ÄéB‚Äée‚Äég‚Äéi‚Äén‚Äés‚Äé ‚ÄéS‚Äéu‚Äés‚Äép‚Äée‚Äén‚Äéd‚Äéi‚Äén‚Äég‚Äé ‚ÄéS‚Äét‚Äéu‚Äéd‚Äée‚Äén‚Äét‚Äés‚Äé ‚ÄéA‚Äéf‚Äét‚Äée‚Äér‚Äé ‚ÄéA‚Äés‚Äék‚Äéi‚Äén‚Äég‚Äé ‚ÄéP‚Äér‚Äéo‚Äét‚Äée‚Äés‚Äét‚Äée‚Äér‚Äés‚Äé ‚Äét‚Äéo‚Äé ‚ÄéL‚Äée‚Äéa‚Äév‚Äée‚Äé ‚ÄéE‚Äén‚Äéc‚Äéa‚Äém‚Äép‚Äém‚Äée‚Äén‚Äét‚Äé
C‚Äéo‚Äél‚Äéu‚Äém‚Äéb‚Äéi‚Äéa‚Äé ‚ÄéU‚Äén‚Äéi‚Äév‚Äée‚Äér‚Äés‚Äéi‚Äét‚Äéy‚Äé ‚ÄéB‚Äée‚Äég‚Äéi‚Äén‚Äés‚Äé ‚ÄéS‚Äéu‚Äés‚Äép‚Äée‚Äén‚Äéd‚Äéi‚Äén‚Äég‚Äé ‚ÄéS‚Äét‚Äéu‚Äéd‚Äée‚Äén‚Äét‚Äés‚Äé
1‚Äé,‚Äé7‚Äé9‚Äé0‚Äé
C‚Äéo‚Äél‚Äéu‚Äém‚Äéb‚Äéi‚Äéa‚Äé ‚ÄéU‚Äén‚Äéi‚Äév‚Äée‚Äér‚Äés‚Äéi‚Äét‚Äéy‚Äé ‚Äéo‚Äén‚Äé ‚Äée‚Äéd‚Äég‚Äée‚Äé ‚Äéa‚Äés‚Äé ‚Äét‚Äéa‚Äél‚Äék‚Äés‚Äé ‚Äéc‚Äéo‚Äél‚Äél‚Äéa‚Äép‚Äés‚Äée‚Äé ‚Äéo‚Äév‚Äée‚Äér‚Äé ‚ÄéG‚Äéa‚Äéz‚Äéa‚Äé ‚Äép‚Äér‚Äéo‚Äét‚Äée‚Äés‚Äét‚Äés‚Äé
C‚Äéo‚Äél‚Äéu‚Äém‚Äéb‚Äéi‚Äéa‚Äé ‚ÄéU‚Äén‚Äéi‚Äév‚Äée‚Äér‚Äés‚Äéi‚Äét‚Äéy‚Äé ‚Äéo‚Äén‚Äé ‚Äée‚Äéd‚Äég‚Äée‚Äé ‚Äéa‚Äés‚Äé ‚Äét‚Äéa‚Äél‚Äék‚Äés‚Äé ‚Äéc‚Äéo‚Äél‚Äél‚Äéa‚Äép‚Äés‚Äée‚Äé ‚Äéo‚Äév‚Äée‚Äér‚Äé ‚ÄéG‚Äéa‚Äéz‚Äéa‚Äé ‚Äép‚Äér‚Äéo‚Äét‚Äée‚Äés‚Äét‚Äés‚Äé
4‚Äé,‚Äé6‚Äé1‚Äé5‚Äé
J‚Äéa‚Äém‚Äée‚Äés‚Äé ‚ÄéC‚Äéa‚Äér‚Äév‚Äéi‚Äél‚Äél‚Äée‚Äé ‚ÄéL‚Äéa‚Äés‚Äéh‚Äée‚Äés‚Äé ‚ÄéO‚Äéu‚Äét‚Äé ‚Äéa‚Äét‚Äé ‚ÄéY‚Äéo‚Äéu‚Äén‚Äég‚Äé ‚ÄéV‚Äéo‚Äét‚Äée‚Äér‚Äés‚Äé ‚ÄéT‚Äéu‚Äér‚Äén‚Äéi‚Äén‚Äég‚Äé ‚Äéo‚Äén‚Äé ‚ÄéJ‚Äéo‚Äée‚Äé ‚ÄéB‚Äéi‚Äéd‚Äée‚Äén‚Äé:‚Äé ‚Äé‚Äò‚ÄéF‚Äé*‚Äéc‚Äék‚Äé ‚ÄéY‚Äéo‚Äéu‚Äé!‚Äé‚Äô‚Äé
C‚Äéa‚Äér‚Äév‚Äéi‚Äél‚Äél‚Äée‚Äé ‚ÄéL‚Äéa‚Äés‚Äéh‚Äée‚Äés‚Äé ‚ÄéO‚Äéu‚Äét‚Äé ‚Äéa‚Äét‚Äé ‚ÄéY‚Äéo‚Äéu‚Äén‚Äég‚Äé ‚ÄéV‚Äéo‚Äét‚Äée‚Äér‚Äés‚Äé ‚ÄéT‚Äéu‚Äér‚Äén‚Äéi‚Äén‚Äég‚Äé ‚Äéo‚Äén‚Äé ‚ÄéB‚Äéi‚Äéd‚Äée‚Äén‚Äé:‚Äé ‚Äé'‚ÄéF‚Äé*‚Äé*‚Äé*‚Äé ‚ÄéY‚Äéo‚Äéu‚Äé!‚Äé'‚Äé
3‚Äé,‚Äé5‚Äé0‚Äé0‚Äé
F‚Äéo‚Äér‚Äéd‚Äé ‚ÄéL‚Äéo‚Äés‚Äée‚Äés‚Äé ‚Äé$‚Äé1‚Äé.‚Äé3‚Äé ‚ÄéB‚Äéi‚Äél‚Äél‚Äéi‚Äéo‚Äén‚Äé ‚Äéo‚Äén‚Äé ‚ÄéE‚Äél‚Äée‚Äéc‚Äét‚Äér‚Äéi‚Äéc‚Äé ‚ÄéV‚Äée‚Äéh‚Äéi‚Äéc‚Äél‚Äée‚Äés‚Äé ‚Äéi‚Äén‚Äé ‚ÄéF‚Äéi‚Äér‚Äés‚Äét‚Äé ‚ÄéQ‚Äéu‚Äéa‚Äér‚Äét‚Äée‚Äér‚Äé ‚Äéo‚Äéf‚Äé ‚Äé2‚Äé0‚Äé2‚Äé4‚Äé,‚Äé ‚ÄéD‚Äée‚Äél‚Äéa‚Äéy‚Äés‚Äé ‚ÄéP‚Äél‚Äéa‚Äén‚Äés‚Äé ‚Äét‚Äéo‚Äé ‚ÄéM‚Äéa‚Äék‚Äée‚Äé ‚ÄéM‚Äéo‚Äér‚Äée‚Äé
F‚Äéo‚Äér‚Äéd‚Äé ‚ÄéL‚Äéo‚Äés‚Äée‚Äés‚Äé ‚Äé$‚Äé1‚Äé.‚Äé3‚Äé ‚ÄéB‚Äéi‚Äél‚Äél‚Äéi‚Äéo‚Äén‚Äé ‚Äéo‚Äén‚Äé ‚ÄéE‚Äél‚Äée‚Äéc‚Äét‚Äér‚Äéi‚Äéc‚Äé ‚ÄéV‚Äée‚Äéh‚Äéi‚Äéc‚Äél‚Äée‚Äés‚Äé ‚Äéi‚Äén‚Äé ‚ÄéF‚Äéi‚Äér‚Äés‚Äét‚Äé ‚ÄéQ‚Äéu‚Äéa‚Äér‚Äét‚Äée‚Äér‚Äé ‚Äéo‚Äéf‚Äé ‚Äé2‚Äé0‚Äé2‚Äé4‚Äé
6‚Äé,‚Äé1‚Äé8‚Äé5‚Äé
A‚Äén‚Äét‚Äéi‚Äé-‚ÄéI‚Äés‚Äér‚Äéa‚Äée‚Äél‚Äé ‚ÄéP‚Äér‚Äéo‚Äét‚Äée‚Äés‚Äét‚Äée‚Äér‚Äés‚Äé ‚ÄéS‚Äée‚Äéi‚Äéz‚Äée‚Äé ‚ÄéA‚Äéd‚Äém‚Äéi‚Äén‚Äéi‚Äés‚Äét‚Äér‚Äéa‚Äét‚Äéi‚Äév‚Äée‚Äé ‚ÄéB‚Äéu‚Äéi‚Äél‚Äéd‚Äéi‚Äén‚Äég‚Äé ‚Äéa‚Äét‚Äé ‚ÄéC‚Äéo‚Äél‚Äéu‚Äém‚Äéb‚Äéi‚Äéa‚Äé ‚ÄéU‚Äén‚Äéi‚Äév‚Äée‚Äér‚Äés‚Äéi‚Äét‚Äéy‚Äé
A‚Äén‚Äét‚Äéi‚Äé-‚ÄéI‚Äés‚Äér‚Äéa‚Äée‚Äél‚Äé ‚ÄéP‚Äér‚Äéo‚Äét‚Äée‚Äés‚Äét‚Äée‚Äér‚Äés‚Äé ‚ÄéT‚Äéa‚Äék‚Äée‚Äé ‚ÄéO‚Äév‚Äée‚Äér‚Äé ‚ÄéA‚Äéd‚Äém‚Äéi‚Äén‚Äéi‚Äés‚Äét‚Äér‚Äéa‚Äét‚Äéi‚Äév‚Äée‚Äé ‚ÄéB‚Äéu‚Äéi‚Äél‚Äéd‚Äéi‚Äén‚Äég‚Äé ‚Äéa‚Äét‚Äé ‚ÄéC‚Äéo‚Äél‚Äéu‚Äém‚Äéb‚Äéi‚Äéa‚Äé ‚ÄéU‚Äén‚Äéi‚Äév‚Äée‚Äér‚Äé
1‚Äé,‚Äé9‚Äé1‚Äé9‚Äé
D‚Äéo‚Äén‚Äéa‚Äél‚Äéd‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé ‚ÄéT‚Äéa‚Äék‚Äée‚Äés‚Äé ‚ÄéB‚Äéi‚Äég‚Äég‚Äée‚Äés‚Äét‚Äé ‚ÄéL‚Äée‚Äéa‚Äéd‚Äé ‚ÄéE‚Äév‚Äée‚Äér‚Äé ‚Äéo‚Äév‚Äée‚Äér‚Äé ‚ÄéJ‚Äéo‚Äée‚Äé ‚ÄéB‚Äéi‚Äéd‚Äée‚Äén‚Äé ‚Äéi‚Äén‚Äé ‚ÄéC‚ÄéN‚ÄéN‚Äé ‚ÄéP‚Äéo‚Äél‚Äél‚Äé,‚Äé ‚ÄéT‚Äéh‚Äéi‚Äér‚Äéd‚Äé-‚ÄéP‚Äéa‚Äér‚Äét‚Äéy‚Äé ‚ÄéC‚Äéa‚Äén‚Äéd‚Äéi‚Äéd‚Äéa‚Äét‚Äée‚Äés‚Äé ‚ÄéE‚Äéx‚Äép‚Äéa‚Äén‚Äéd‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äé
D‚Äéo‚Äén‚Äéa‚Äél‚Äéd‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé ‚ÄéT‚Äéa‚Äék‚Äée‚Äés‚Äé ‚ÄéB‚Äéi‚Äég‚Äég‚Äée‚Äés‚Äét‚Äé ‚ÄéL‚Äée‚Äéa‚Äéd‚Äé ‚ÄéE‚Äév‚Äée‚Äér‚Äé ‚ÄéO‚Äév‚Äée‚Äér‚Äé ‚ÄéJ‚Äéo‚Äée‚Äé ‚ÄéB‚Äéi‚Äéd‚Äée‚Äén‚Äé ‚Äéi‚Äén‚Äé ‚ÄéC‚ÄéN‚ÄéN‚Äé ‚ÄéP‚Äéo‚Äél‚Äél‚Äé
9‚Äé,‚Äé1‚Äé0‚Äé7‚Äé
A‚Äél‚Äél‚Äée‚Äég‚Äée‚Äéd‚Äé ‚ÄéL‚Äéo‚Äén‚Äéd‚Äéo‚Äén‚Äé ‚ÄéS‚Äéw‚Äéo‚Äér‚Äéd‚Äém‚Äéa‚Äén‚Äé ‚ÄéA‚Äér‚Äér‚Äée‚Äés‚Äét‚Äée‚Äéd‚Äé ‚ÄéA‚Äéf‚Äét‚Äée‚Äér‚Äé ‚ÄéV‚Äée‚Äéh‚Äéi‚Äéc‚Äél‚Äée‚Äé-‚ÄéR‚Äéa‚Äém‚Äé ‚ÄéS‚Äét‚Äéa‚Äéb‚Äéb‚Äéi‚Äén‚Äég‚Äé ‚ÄéR‚Äéa‚Äém‚Äép‚Äéa‚Äég‚Äée‚Äé,‚Äé ‚ÄéF‚Äéi‚Äév‚Äée‚Äé ‚ÄéI‚Äén‚Äéj‚Äéu‚Äér‚Äée‚Äéd‚Äé
A‚Äél‚Äél‚Äée‚Äég‚Äée‚Äéd‚Äé ‚ÄéL‚Äéo‚Äén‚Äéd‚Äéo‚Äén‚Äé ‚ÄéS‚Äéw‚Äéo‚Äér‚Äéd‚Äém‚Äéa‚Äén‚Äé ‚ÄéA‚Äér‚Äér‚Äée‚Äés‚Äét‚Äée‚Äéd‚Äé ‚ÄéA‚Äéf‚Äét‚Äée‚Äér‚Äé ‚ÄéV‚Äée‚Äéh‚Äéi‚Äéc‚Äél‚Äée‚Äé-‚ÄéR‚Äéa‚Äém‚Äé ‚ÄéS‚Äét‚Äéa‚Äéb‚Äéb‚Äéi‚Äén‚Äég‚Äé
1‚Äé6‚Äé6‚Äé
J‚Äéa‚Äém‚Äéa‚Äéa‚Äél‚Äé ‚ÄéB‚Äéo‚Äéw‚Äém‚Äéa‚Äén‚Äé ‚Äé‚Äò‚ÄéF‚Äéu‚Äél‚Äél‚Äéy‚Äé‚Äô‚Äé ‚Äéi‚Äén‚Äé ‚ÄéF‚Äéa‚Äév‚Äéo‚Äér‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéR‚Äée‚Äés‚Äée‚Äét‚Äét‚Äél‚Äéi‚Äén‚Äég‚Äé ‚ÄéG‚Äéa‚Äéz‚Äéa‚Äé ‚ÄéM‚Äéi‚Äég‚Äér‚Äéa‚Äén‚Äét‚Äés‚Äé ‚Äéi‚Äén‚Äé ‚ÄéU‚Äé.‚ÄéS‚Äé.‚Äé
J‚Äéa‚Äém‚Äéa‚Äéa‚Äél‚Äé ‚ÄéB‚Äéo‚Äéw‚Äém‚Äéa‚Äén‚Äé ‚Äé'‚ÄéF‚Äéu‚Äél‚Äél‚Äéy‚Äé'‚Äé ‚Äéi‚Äén‚Äé ‚ÄéF‚Äéa‚Äév‚Äéo‚Äér‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéR‚Äée‚Äés‚Äée‚Äét‚Äét‚Äél‚Äéi‚Äén‚Äég‚Äé ‚ÄéG‚Äéa‚Äéz‚Äéa‚Äé ‚ÄéM‚Äéi‚Äég‚Äér‚Äéa‚Äén‚Äét‚Äés‚Äé ‚Äéi‚Äén‚Äé ‚ÄéU‚Äé.‚ÄéS‚Äé.‚Äé

G‚Äéu‚Äéi‚Äél‚Äét‚Äéy‚Äé ‚ÄéV‚Äée‚Äér‚Äéd‚Äéi‚Äéc‚Äét‚Äé ‚ÄéR‚Äée‚Äéa‚Äéc‚Äéh‚Äée‚Äéd‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚ÄéT‚Äér‚Äéi‚Äéo‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéC‚Äéo‚Äéo‚Äén‚Äés‚Äé ‚ÄéW‚Äéh‚Äéo‚Äé ‚ÄéM‚Äéu‚Äér‚Äéd‚Äée‚Äér‚Äée‚Äéd‚Äé ‚ÄéW‚Äéh‚Äéi‚Äét‚Äée‚Äé ‚ÄéN‚Äée‚Äéw‚Äés‚Äép‚Äéa‚Äép‚Äée‚Äér‚Äé ‚ÄéS‚Äéa‚Äél‚Äée‚Äés‚Äém‚Äéa‚Äén‚Äé ‚Äéi‚Äén‚Äé ‚ÄéB‚Äéa‚Äéi‚Äén‚Äéb‚Äér‚Äéi‚Äéd‚Äég‚Äée‚Äé.‚Äé

T‚Äéh‚Äée‚Äé ‚Äém‚Äéo‚Äét‚Äéi‚Äév‚Äée‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äét‚Äéo‚Äé ‚Äéc‚Äéo‚Äém‚Äém‚Äéi‚Äét‚Äé ‚Äéa‚Äé ‚Äér‚Äéo‚Äéb‚Äéb‚Äée‚Äér‚Äéy‚Äé.‚Äé ‚ÄéW‚Äéh‚Äéo‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéf‚Äéu‚Äéc‚Äék‚Äé ‚Äéw‚Äéa‚Äén‚Äét‚Äés‚Äé ‚Äét‚Äéo‚Äé ‚Äés‚Äét‚Äée‚Äéa‚Äél‚Äé ‚Äén‚Äée‚Äéw‚Äés‚Äép‚Äéa‚Äép‚Äée‚Äér‚Äés‚Äé?‚Äé


J‚Äéu‚Äén‚Äég‚Äél‚Äée‚Äé ‚ÄéB‚Äéu‚Äén‚Äén‚Äéy‚Äé ‚ÄéS‚Äéh‚Äéo‚Äéo‚Äét‚Äés‚Äé ‚ÄéW‚Äéh‚Äéi‚Äét‚Äée‚Äé ‚ÄéM‚Äéa‚Äén‚Äé ‚Äét‚Äéo‚Äé ‚ÄéD‚Äée‚Äéa‚Äét‚Äéh‚Äé ‚Äéo‚Äén‚Äé ‚ÄéF‚Äér‚Äéi‚Äée‚Äén‚Äéd‚Äél‚Äéy‚Äé ‚ÄéR‚Äéo‚Äéa‚Äéd‚Äé.‚Äé


N‚Äée‚Äég‚Äér‚Äéo‚Äé ‚ÄéA‚Äét‚Äét‚Äéa‚Äéc‚Äék‚Äés‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéK‚Äéi‚Äél‚Äél‚Äés‚Äé ‚ÄéW‚Äéa‚Äél‚Äég‚Äér‚Äée‚Äée‚Äén‚Äés‚Äé ‚ÄéM‚Äéa‚Äén‚Äéa‚Äég‚Äée‚Äér‚Äé ‚Äéi‚Äén‚Äé ‚ÄéR‚Äéa‚Äél‚Äée‚Äéi‚Äég‚Äéh‚Äé.‚Äé


G‚Äér‚Äéo‚Äéu‚Äép‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéW‚Äéh‚Äéi‚Äét‚Äée‚Äé ‚ÄéP‚Äée‚Äéo‚Äép‚Äél‚Äée‚Äé ‚ÄéV‚Äéi‚Äés‚Äéi‚Äét‚Äéi‚Äén‚Äég‚Äé ‚ÄéN‚Äée‚Äéw‚Äé ‚ÄéO‚Äér‚Äél‚Äée‚Äéa‚Äén‚Äés‚Äé ‚ÄéA‚Äét‚Äét‚Äéa‚Äéc‚Äék‚Äée‚Äéd‚Äé ‚Äéb‚Äéy‚Äé ‚ÄéP‚Äéa‚Äéc‚Äék‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéC‚Äéh‚Äéi‚Äém‚Äép‚Äés‚Äé ‚ÄéW‚Äéh‚Äéo‚Äé ‚ÄéG‚Äéo‚Äét‚Äé ‚Äéo‚Äéf‚Äéf‚Äé ‚ÄéP‚Äéa‚Äér‚Äét‚Äéy‚Äé ‚ÄéB‚Äéu‚Äés‚Äé.‚Äé


B‚Äél‚Äéo‚Äéa‚Äét‚Äée‚Äéd‚Äé ‚ÄéG‚Äéo‚Äér‚Äéi‚Äél‚Äél‚Äéa‚Äé ‚ÄéS‚Äéh‚Äéo‚Äéo‚Äét‚Äés‚Äé ‚ÄéH‚Äéi‚Äés‚Äé ‚ÄéM‚Äéu‚Äéd‚Äés‚Äéh‚Äéa‚Äér‚Äék‚Äé ‚ÄéG‚Äéi‚Äér‚Äél‚Äéf‚Äér‚Äéi‚Äée‚Äén‚Äéd‚Äé ‚ÄéW‚Äéh‚Äéo‚Äé ‚ÄéG‚Äéo‚Äét‚Äé ‚ÄéR‚Äée‚Äés‚Äét‚Äér‚Äéa‚Äéi‚Äén‚Äéi‚Äén‚Äég‚Äé ‚ÄéO‚Äér‚Äéd‚Äée‚Äér‚Äé ‚Äéf‚Äér‚Äéo‚Äém‚Äé ‚ÄéH‚Äéi‚Äém‚Äé ‚ÄéB‚Äée‚Äéf‚Äéo‚Äér‚Äée‚Äé ‚ÄéE‚Äén‚Äéd‚Äéi‚Äén‚Äég‚Äé ‚ÄéH‚Äéi‚Äém‚Äés‚Äée‚Äél‚Äéf‚Äé.‚Äé


P‚Äéa‚Äéc‚Äék‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéN‚Äée‚Äég‚Äér‚Äéo‚Äé ‚ÄéM‚Äéi‚Äég‚Äér‚Äéa‚Äén‚Äét‚Äés‚Äé ‚ÄéR‚Äéa‚Äép‚Äée‚Äé ‚ÄéP‚Äée‚Äéo‚Äép‚Äél‚Äée‚Äé ‚Äéi‚Äén‚Äé ‚ÄéB‚Äéo‚Äéi‚Äés‚Äée‚Äé.‚Äé


P‚Äéa‚Äéc‚Äék‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéT‚Äée‚Äée‚Äén‚Äéa‚Äép‚Äée‚Äér‚Äés‚Äé ‚ÄéA‚Äér‚Äér‚Äée‚Äés‚Äét‚Äée‚Äéd‚Äé ‚ÄéA‚Äéf‚Äét‚Äée‚Äér‚Äé ‚ÄéR‚Äéa‚Äép‚Äéi‚Äén‚Äég‚Äé ‚ÄéW‚Äéo‚Äém‚Äéa‚Äén‚Äé ‚Äéo‚Äén‚Äé ‚ÄéM‚ÄéT‚ÄéA‚Äé ‚ÄéB‚Äéu‚Äés‚Äé ‚Äéi‚Äén‚Äé ‚ÄéB‚Äéa‚Äél‚Äét‚Äéi‚Äém‚Äéo‚Äér‚Äée‚Äé.‚Äé


N‚Äée‚Äég‚Äér‚Äéo‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚ÄéG‚Äéu‚Äéi‚Äéd‚Äéo‚Äé ‚ÄéL‚Äéi‚Äép‚Äés‚Äé ‚ÄéG‚Äée‚Äét‚Äés‚Äé ‚Äé1‚Äé2‚Äé ‚ÄéY‚Äée‚Äéa‚Äér‚Äés‚Äé ‚ÄéA‚Äéf‚Äét‚Äée‚Äér‚Äé ‚ÄéP‚Äéi‚Äém‚Äép‚Äéi‚Äén‚Äég‚Äé ‚ÄéS‚Äéi‚Äéx‚Äét‚Äéh‚Äé ‚ÄéG‚Äér‚Äéa‚Äéd‚Äée‚Äér‚Äé ‚Äéi‚Äén‚Äé ‚ÄéB‚Äér‚Äéo‚Äéo‚Äék‚Äél‚Äéy‚Äén‚Äé.‚Äé

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé ‚ÄéW‚Äée‚Äéa‚Äét‚Äéh‚Äée‚Äér‚Äé.‚Äé

T‚Äéo‚Äéd‚Äéa‚Äéy‚Äé
C‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
8‚Äé5‚Äé¬∞‚Äé
/‚Äé7‚Äé1‚Äé¬∞‚Äé
1‚Äé7‚Äé%‚Äé
S‚ÄéE‚Äé ‚Äé1‚Äé2‚Äé ‚Äém‚Äép‚Äéh‚Äé
T‚Äéu‚Äée‚Äé ‚Äé3‚Äé0‚Äé ‚Äé|‚Äé ‚ÄéD‚Äéa‚Äéy‚Äé
8‚Äé5‚Äé¬∞‚Äé
1‚Äé7‚Äé%‚Äé
S‚ÄéE‚Äé
1‚Äé2‚Äé
 ‚Äé
m‚Äép‚Äéh‚Äé
G‚Äée‚Äén‚Äée‚Äér‚Äéa‚Äél‚Äél‚Äéy‚Äé ‚Äéc‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé.‚Äé ‚ÄéA‚Äé ‚Äés‚Äét‚Äér‚Äéa‚Äéy‚Äé ‚Äés‚Äéh‚Äéo‚Äéw‚Äée‚Äér‚Äé ‚Äéo‚Äér‚Äé ‚Äét‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äé ‚Äéi‚Äés‚Äé ‚Äép‚Äéo‚Äés‚Äés‚Äéi‚Äéb‚Äél‚Äée‚Äé.‚Äé ‚ÄéH‚Äéi‚Äég‚Äéh‚Äé ‚Äén‚Äée‚Äéa‚Äér‚Äé ‚Äé8‚Äé5‚ÄéF‚Äé.‚Äé ‚ÄéW‚Äéi‚Äén‚Äéd‚Äés‚Äé ‚ÄéS‚ÄéE‚Äé ‚Äéa‚Äét‚Äé ‚Äé1‚Äé0‚Äé ‚Äét‚Äéo‚Äé ‚Äé1‚Äé5‚Äé ‚Äém‚Äép‚Äéh‚Äé.‚Äé

H‚Äéu‚Äém‚Äéi‚Äéd‚Äéi‚Äét‚Äéy‚Äé
8‚Äé1‚Äé%‚Äé
U‚ÄéV‚Äé ‚ÄéI‚Äén‚Äéd‚Äée‚Äéx‚Äé
7‚Äé ‚Äéo‚Äéf‚Äé ‚Äé1‚Äé1‚Äé
S‚Äéu‚Äén‚Äér‚Äéi‚Äés‚Äée‚Äé
6‚Äé:‚Äé4‚Äé8‚Äé ‚Äéa‚Äém‚Äé
S‚Äéu‚Äén‚Äés‚Äée‚Äét‚Äé
8‚Äé:‚Äé0‚Äé7‚Äé ‚Äép‚Äém‚Äé
T‚Äéu‚Äée‚Äé ‚Äé3‚Äé0‚Äé ‚Äé|‚Äé ‚ÄéN‚Äéi‚Äég‚Äéh‚Äét‚Äé
7‚Äé1‚Äé¬∞‚Äé
2‚Äé4‚Äé%‚Äé
S‚ÄéE‚Äé
1‚Äé1‚Äé
 ‚Äé
m‚Äép‚Äéh‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚Äéc‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé ‚Äét‚Äéh‚Äéi‚Äés‚Äé ‚Äée‚Äév‚Äée‚Äén‚Äéi‚Äén‚Äég‚Äé,‚Äé ‚Äét‚Äéh‚Äée‚Äén‚Äé ‚Äéb‚Äée‚Äéc‚Äéo‚Äém‚Äéi‚Äén‚Äég‚Äé ‚Äéc‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé ‚Äéa‚Äéf‚Äét‚Äée‚Äér‚Äé ‚Äém‚Äéi‚Äéd‚Äén‚Äéi‚Äég‚Äéh‚Äét‚Äé.‚Äé ‚ÄéL‚Äéo‚Äéw‚Äé ‚Äé7‚Äé1‚ÄéF‚Äé.‚Äé ‚ÄéW‚Äéi‚Äén‚Äéd‚Äés‚Äé ‚ÄéS‚ÄéE‚Äé ‚Äéa‚Äét‚Äé ‚Äé1‚Äé0‚Äé ‚Äét‚Äéo‚Äé ‚Äé1‚Äé5‚Äé ‚Äém‚Äép‚Äéh‚Äé.‚Äé

H‚Äéu‚Äém‚Äéi‚Äéd‚Äéi‚Äét‚Äéy‚Äé
9‚Äé1‚Äé%‚Äé
U‚ÄéV‚Äé ‚ÄéI‚Äén‚Äéd‚Äée‚Äéx‚Äé
0‚Äé ‚Äéo‚Äéf‚Äé ‚Äé1‚Äé1‚Äé
M‚Äéo‚Äéo‚Äén‚Äér‚Äéi‚Äés‚Äée‚Äé
1‚Äé:‚Äé5‚Äé4‚Äé ‚Äéa‚Äém‚Äé
W‚Äéa‚Äén‚Äéi‚Äén‚Äég‚Äé ‚ÄéG‚Äéi‚Äéb‚Äéb‚Äéo‚Äéu‚Äés‚Äé
M‚Äéo‚Äéo‚Äén‚Äés‚Äée‚Äét‚Äé
1‚Äé2‚Äé:‚Äé0‚Äé8‚Äé ‚Äép‚Äém‚Äé
W‚Äée‚Äéd‚Äé ‚Äé0‚Äé1‚Äé
P‚ÄéM‚Äé ‚ÄéT‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé
8‚Äé3‚Äé¬∞‚Äé
/‚Äé7‚Äé2‚Äé¬∞‚Äé
5‚Äé9‚Äé%‚Äé
S‚ÄéE‚Äé ‚Äé1‚Äé4‚Äé ‚Äém‚Äép‚Äéh‚Äé
T‚Äéh‚Äéu‚Äé ‚Äé0‚Äé2‚Äé
S‚Äéc‚Äéa‚Äét‚Äét‚Äée‚Äér‚Äée‚Äéd‚Äé ‚ÄéT‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé
8‚Äé4‚Äé¬∞‚Äé
/‚Äé7‚Äé2‚Äé¬∞‚Äé
3‚Äé9‚Äé%‚Äé
S‚ÄéS‚ÄéE‚Äé ‚Äé1‚Äé2‚Äé ‚Äém‚Äép‚Äéh‚Äé
F‚Äér‚Äéi‚Äé ‚Äé0‚Äé3‚Äé
S‚Äéc‚Äéa‚Äét‚Äét‚Äée‚Äér‚Äée‚Äéd‚Äé ‚ÄéT‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé
8‚Äé4‚Äé¬∞‚Äé
/‚Äé7‚Äé0‚Äé¬∞‚Äé
4‚Äé3‚Äé%‚Äé
E‚Äé ‚Äé1‚Äé1‚Äé ‚Äém‚Äép‚Äéh‚Äé
S‚Äéa‚Äét‚Äé ‚Äé0‚Äé4‚Äé
A‚ÄéM‚Äé ‚ÄéT‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé
8‚Äé7‚Äé¬∞‚Äé
/‚Äé7‚Äé1‚Äé¬∞‚Äé
3‚Äé7‚Äé%‚Äé
S‚ÄéE‚Äé ‚Äé1‚Äé2‚Äé ‚Äém‚Äép‚Äéh‚Äé
S‚Äéu‚Äén‚Äé ‚Äé0‚Äé5‚Äé
I‚Äés‚Äéo‚Äél‚Äéa‚Äét‚Äée‚Äéd‚Äé ‚ÄéT‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé
8‚Äé7‚Äé¬∞‚Äé
/‚Äé7‚Äé2‚Äé¬∞‚Äé
3‚Äé0‚Äé%‚Äé
S‚ÄéS‚ÄéE‚Äé ‚Äé1‚Äé6‚Äé ‚Äém‚Äép‚Äéh‚Äé
M‚Äéo‚Äén‚Äé ‚Äé0‚Äé6‚Äé
M‚Äéo‚Äés‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
8‚Äé9‚Äé¬∞‚Äé
/‚Äé7‚Äé2‚Äé¬∞‚Äé
2‚Äé3‚Äé%‚Äé
S‚Äé ‚Äé1‚Äé6‚Äé ‚Äém‚Äép‚Äéh‚Äé
T‚Äéu‚Äée‚Äé ‚Äé0‚Äé7‚Äé
A‚ÄéM‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äés‚Äé/‚ÄéP‚ÄéM‚Äé ‚ÄéS‚Äéu‚Äén‚Äé
9‚Äé2‚Äé¬∞‚Äé
/‚Äé7‚Äé1‚Äé¬∞‚Äé
8‚Äé%‚Äé
S‚Äé ‚Äé1‚Äé1‚Äé ‚Äém‚Äép‚Äéh‚Äé
W‚Äée‚Äéd‚Äé ‚Äé0‚Äé8‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
9‚Äé4‚Äé¬∞‚Äé
/‚Äé7‚Äé3‚Äé¬∞‚Äé
9‚Äé%‚Äé
S‚Äé ‚Äé1‚Äé3‚Äé ‚Äém‚Äép‚Äéh‚Äé
T‚Äéh‚Äéu‚Äé ‚Äé0‚Äé9‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
9‚Äé4‚Äé¬∞‚Äé
/‚Äé7‚Äé4‚Äé¬∞‚Äé
1‚Äé5‚Äé%‚Äé
S‚Äé ‚Äé1‚Äé4‚Äé ‚Äém‚Äép‚Äéh‚Äé
F‚Äér‚Äéi‚Äé ‚Äé1‚Äé0‚Äé
M‚Äéo‚Äés‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
9‚Äé4‚Äé¬∞‚Äé
/‚Äé7‚Äé2‚Äé¬∞‚Äé
2‚Äé4‚Äé%‚Äé
S‚Äé ‚Äé1‚Äé3‚Äé ‚Äém‚Äép‚Äéh‚Äé
S‚Äéa‚Äét‚Äé ‚Äé1‚Äé1‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
9‚Äé3‚Äé¬∞‚Äé
/‚Äé6‚Äé8‚Äé¬∞‚Äé
2‚Äé2‚Äé%‚Äé
S‚ÄéS‚ÄéE‚Äé ‚Äé1‚Äé2‚Äé ‚Äém‚Äép‚Äéh‚Äé
S‚Äéu‚Äén‚Äé ‚Äé1‚Äé2‚Äé
I‚Äés‚Äéo‚Äél‚Äéa‚Äét‚Äée‚Äéd‚Äé ‚ÄéT‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé
8‚Äé9‚Äé¬∞‚Äé
/‚Äé6‚Äé6‚Äé¬∞‚Äé
3‚Äé4‚Äé%‚Äé
S‚ÄéE‚Äé ‚Äé1‚Äé2‚Äé ‚Äém‚Äép‚Äéh‚Äé
M‚Äéo‚Äén‚Äé ‚Äé1‚Äé3‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
8‚Äé8‚Äé¬∞‚Äé
/‚Äé6‚Äé8‚Äé¬∞‚Äé
2‚Äé4‚Äé%‚Äé
S‚ÄéS‚ÄéE‚Äé ‚Äé1‚Äé2‚Äé ‚Äém‚Äép‚Äéh‚Äé
T‚Äéu‚Äée‚Äé ‚Äé1‚Äé4‚Äé
S‚Äéc‚Äéa‚Äét‚Äét‚Äée‚Äér‚Äée‚Äéd‚Äé ‚ÄéT‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé
8‚Äé7‚Äé¬∞‚Äé
/‚Äé6‚Äé8‚Äé¬∞‚Äé
4‚Äé0‚Äé%‚Äé
S‚ÄéE‚Äé ‚Äé1‚Äé2‚Äé ‚Äém‚Äép‚Äéh‚Äé

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé

C‚Äéu‚Äér‚Äér‚Äée‚Äén‚Äét‚Äé ‚Äét‚Äéh‚Äér‚Äée‚Äéa‚Äét‚Äé:‚Äé ‚ÄéH‚Äée‚Äém‚Äéo‚Äég‚Äél‚Äéo‚Äéb‚Äée‚Äén‚Äé.‚Äé ‚Äé‚ò¢Ô∏è

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé

S‚Äée‚Äéx‚Äé
S‚Äée‚Äéx‚Äé ‚Äéi‚Äés‚Äé ‚Äéa‚Äé ‚Äéb‚Äéo‚Äéd‚Äéi‚Äél‚Äéy‚Äé ‚Äéf‚Äéu‚Äén‚Äéc‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äép‚Äéu‚Äér‚Äép‚Äéo‚Äés‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚Äép‚Äée‚Äér‚Äép‚Äée‚Äét‚Äéu‚Äéa‚Äét‚Äéi‚Äén‚Äég‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äés‚Äéu‚Äér‚Äév‚Äéi‚Äév‚Äéa‚Äél‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äés‚Äép‚Äée‚Äéc‚Äéi‚Äée‚Äés‚Äé ‚Äé(‚Äéo‚Äér‚Äé ‚Äéd‚Äéi‚Äés‚Äéc‚Äéo‚Äén‚Äét‚Äéi‚Äén‚Äéu‚Äéi‚Äén‚Äég‚Äé,‚Äé ‚Äéi‚Äéf‚Äé ‚Äéy‚Äéo‚Äéu‚Äé'‚Äér‚Äée‚Äé ‚Äéa‚Äé ‚Äéh‚Äéo‚Äém‚Äéo‚Äés‚Äée‚Äéx‚Äéu‚Äéa‚Äél‚Äé)‚Äé,‚Äé ‚Äéw‚Äéh‚Äéi‚Äéc‚Äéh‚Äé ‚Äéi‚Äés‚Äé ‚Äéw‚Äéh‚Äéy‚Äé ‚Äéi‚Äét‚Äé ‚Äéf‚Äée‚Äée‚Äél‚Äés‚Äé ‚Äég‚Äéo‚Äéo‚Äéd‚Äé ‚Äé(‚Äée‚Äéx‚Äéc‚Äée‚Äép‚Äét‚Äé ‚Äéi‚Äéf‚Äé ‚Äéy‚Äéo‚Äéu‚Äé ‚Äéh‚Äéa‚Äép‚Äép‚Äée‚Äén‚Äé ‚Äét‚Äéo‚Äé ‚Äéh‚Äéa‚Äév‚Äée‚Äé ‚Äéb‚Äée‚Äée‚Äén‚Äé ‚Äéc‚Äéi‚Äér‚Äéc‚Äéu‚Äém‚Äér‚Äéa‚Äép‚Äée‚Äéd‚Äé)‚Äé.‚Äé ‚ÄéI‚Äén‚Äé ‚Äéi‚Äét‚Äés‚Äé ‚Äés‚Äéu‚Äép‚Äée‚Äér‚Äéf‚Äéi‚Äéc‚Äéi‚Äéa‚Äél‚Äé ‚Äéf‚Äéo‚Äér‚Äém‚Äé,‚Äé ‚Äés‚Äée‚Äéx‚Äé ‚Äéi‚Äés‚Äé ‚Äéa‚Äén‚Äé ‚Äéa‚Äéc‚Äét‚Äé ‚Äéo‚Äéf‚Äé ‚Äép‚Äél‚Äée‚Äéa‚Äés‚Äéu‚Äér‚Äée‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äél‚Äéo‚Äév‚Äée‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéc‚Äéa‚Äén‚Äé ‚Äéo‚Äéc‚Äéc‚Äéu‚Äér‚Äé ‚Äéi‚Äén‚Äé ‚Äéa‚Äé ‚Äév‚Äéa‚Äér‚Äéi‚Äée‚Äét‚Äéy‚Äé ‚Äéo‚Äéf‚Äé ‚Äém‚Äéo‚Äéd‚Äéu‚Äés‚Äé ‚Äéo‚Äép‚Äée‚Äér‚Äéa‚Äén‚Äéd‚Äéi‚Äé ‚Äéi‚Äén‚Äéc‚Äél‚Äéu‚Äéd‚Äéi‚Äén‚Äég‚Äé ‚ÄéI‚ÄéR‚ÄéL‚Äé ‚Äéi‚Äén‚Äét‚Äée‚Äér‚Äéc‚Äéo‚Äéu‚Äér‚Äés‚Äée‚Äé,‚Äé ‚ÄéI‚Äén‚Äét‚Äée‚Äér‚Äén‚Äée‚Äét‚Äés‚Äé ‚Äés‚Äée‚Äéx‚Äé,‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äép‚Äéh‚Äéo‚Äén‚Äée‚Äé ‚Äés‚Äée‚Äéx‚Äé ‚Äé(‚Äéf‚Äér‚Äéo‚Äém‚Äé ‚Äéf‚Äéa‚Äép‚Äép‚Äéi‚Äén‚Äég‚Äé ‚Äét‚Äéo‚Äé ‚Äé""‚Äéd‚Äéi‚Äér‚Äét‚Äéy‚Äé ‚Äét‚Äéa‚Äél‚Äék‚Äé""‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚Äéa‚Äé ‚Äél‚Äéo‚Äév‚Äée‚Äéd‚Äé ‚Äéo‚Äén‚Äée‚Äé ‚Äét‚Äéo‚Äé ‚Äéi‚Äén‚Äés‚Äée‚Äér‚Äét‚Äéi‚Äén‚Äég‚Äé ‚Äéa‚Äén‚Äé ‚Äéi‚ÄéP‚Äéh‚Äéo‚Äén‚Äée‚Äé ‚Äés‚Äée‚Äét‚Äé ‚Äét‚Äéo‚Äé ‚Äé""‚Äév‚Äéi‚Äéb‚Äér‚Äéa‚Äét‚Äée‚Äé""‚Äé ‚Äéi‚Äén‚Äét‚Äéo‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéa‚Äén‚Äéu‚Äés‚Äé ‚Äéo‚Äér‚Äé ‚Äév‚Äéa‚Äég‚Äéi‚Äén‚Äéa‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéc‚Äéa‚Äél‚Äél‚Äéi‚Äén‚Äég‚Äé ‚Äéi‚Äét‚Äé ‚Äér‚Äée‚Äép‚Äée‚Äéa‚Äét‚Äée‚Äéd‚Äél‚Äéy‚Äé ‚Äéo‚Äén‚Äé ‚Äér‚Äée‚Äéd‚Äéi‚Äéa‚Äél‚Äé)‚Äé.‚Äé ‚ÄéT‚Äéh‚Äéi‚Äén‚Äég‚Äés‚Äé ‚Äés‚Äéu‚Äéc‚Äéh‚Äé ‚Äéa‚Äés‚Äé ‚Äéc‚Äéh‚Äée‚Äém‚Äéi‚Äés‚Äét‚Äér‚Äéy‚Äé,‚Äé ‚Äéb‚Äée‚Äée‚Äér‚Äé,‚Äé ‚Äéc‚Äéh‚Äél‚Äéo‚Äér‚Äéo‚Äéf‚Äéo‚Äér‚Äém‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äés‚Äée‚Äéx‚Äé ‚Äét‚Äéo‚Äéy‚Äés‚Äé ‚Äéc‚Äéa‚Äén‚Äé ‚Äéb‚Äée‚Äé ‚Äéu‚Äés‚Äée‚Äéd‚Äé ‚Äét‚Äéo‚Äé ‚Äée‚Äén‚Äéh‚Äéa‚Äén‚Äéc‚Äée‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äés‚Äée‚Äéx‚Äéu‚Äéa‚Äél‚Äé ‚Äée‚Äéx‚Äép‚Äée‚Äér‚Äéi‚Äée‚Äén‚Äéc‚Äée‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äép‚Äéa‚Äér‚Äét‚Äéi‚Äée‚Äés‚Äé ‚Äéi‚Äén‚Äév‚Äéo‚Äél‚Äév‚Äée‚Äéd‚Äé.‚Äé


(‚Äé(‚Äé ‚ÄéY‚Äéo‚Äéu‚Äé'‚Äér‚Äée‚Äé ‚ÄéN‚Äée‚Äév‚Äée‚Äér‚Äé ‚ÄéG‚Äéo‚Äéi‚Äén‚Äég‚Äé ‚ÄéT‚Äéo‚Äé ‚ÄéG‚Äée‚Äét‚Äé ‚ÄéI‚Äét‚Äé ‚Äé)‚Äé)‚Äé

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé

P‚Äée‚Äél‚Äél‚Äé√©‚Äéa‚Äés‚Äé ‚Äée‚Äét‚Äé ‚ÄéM‚Äé√©‚Äél‚Äéi‚Äés‚Äéa‚Äén‚Äéd‚Äée‚Äé ‚Äéi‚Äés‚Äé ‚Äéa‚Äén‚Äé ‚Äéo‚Äép‚Äée‚Äér‚Äéa‚Äé ‚Äéi‚Äén‚Äé ‚Äéf‚Äéi‚Äév‚Äée‚Äé ‚Äéa‚Äéc‚Äét‚Äés‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚Äém‚Äéu‚Äés‚Äéi‚Äéc‚Äé ‚Äéb‚Äéy‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéF‚Äér‚Äée‚Äén‚Äéc‚Äéh‚Äé ‚Äéc‚Äéo‚Äém‚Äép‚Äéo‚Äés‚Äée‚Äér‚Äé ‚ÄéC‚Äél‚Äéa‚Äéu‚Äéd‚Äée‚Äé ‚ÄéD‚Äée‚Äéb‚Äéu‚Äés‚Äés‚Äéy‚Äé.‚Äé ‚ÄéT‚Äéh‚Äée‚Äé ‚ÄéF‚Äér‚Äée‚Äén‚Äéc‚Äéh‚Äé-‚Äél‚Äéa‚Äén‚Äég‚Äéu‚Äéa‚Äég‚Äée‚Äé ‚Äél‚Äéi‚Äéb‚Äér‚Äée‚Äét‚Äét‚Äéo‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äéa‚Äéd‚Äéa‚Äép‚Äét‚Äée‚Äéd‚Äé ‚Äéf‚Äér‚Äéo‚Äém‚Äé ‚ÄéM‚Äéa‚Äéu‚Äér‚Äéi‚Äéc‚Äée‚Äé ‚ÄéM‚Äéa‚Äée‚Äét‚Äée‚Äér‚Äél‚Äéi‚Äén‚Äéc‚Äék‚Äé'‚Äés‚Äé ‚Äés‚Äéy‚Äém‚Äéb‚Äéo‚Äél‚Äéi‚Äés‚Äét‚Äé ‚Äép‚Äél‚Äéa‚Äéy‚Äé ‚ÄéP‚Äée‚Äél‚Äél‚Äé√©‚Äéa‚Äés‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéM‚Äé√©‚Äél‚Äéi‚Äés‚Äéa‚Äén‚Äéd‚Äée‚Äé.‚Äé ‚ÄéT‚Äéh‚Äée‚Äé ‚Äép‚Äél‚Äéo‚Äét‚Äé ‚Äéc‚Äéo‚Äén‚Äéc‚Äée‚Äér‚Äén‚Äés‚Äé ‚Äéa‚Äé ‚Äél‚Äéo‚Äév‚Äée‚Äé ‚Äét‚Äér‚Äéi‚Äéa‚Äén‚Äég‚Äél‚Äée‚Äé ‚Äéb‚Äée‚Äét‚Äéw‚Äée‚Äée‚Äén‚Äé ‚ÄéP‚Äér‚Äéi‚Äén‚Äéc‚Äée‚Äé ‚ÄéG‚Äéo‚Äél‚Äéa‚Äéu‚Äéd‚Äé,‚Äé ‚ÄéM‚Äé√©‚Äél‚Äéi‚Äés‚Äéa‚Äén‚Äéd‚Äée‚Äé ‚Äé(‚Äéa‚Äé ‚Äém‚Äéy‚Äés‚Äét‚Äée‚Äér‚Äéi‚Äéo‚Äéu‚Äés‚Äé ‚Äéy‚Äéo‚Äéu‚Äén‚Äég‚Äé ‚Äéw‚Äéo‚Äém‚Äéa‚Äén‚Äé ‚Äéh‚Äée‚Äé ‚Äéh‚Äéa‚Äéd‚Äé ‚Äéf‚Äéo‚Äéu‚Äén‚Äéd‚Äé ‚Äél‚Äéo‚Äés‚Äét‚Äé ‚Äéi‚Äén‚Äé ‚Äéa‚Äé ‚Äéf‚Äéo‚Äér‚Äée‚Äés‚Äét‚Äé)‚Äé,‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéG‚Äéo‚Äél‚Äéa‚Äéu‚Äéd‚Äé'‚Äés‚Äé ‚Äéy‚Äéo‚Äéu‚Äén‚Äég‚Äée‚Äér‚Äé ‚Äéh‚Äéa‚Äél‚Äéf‚Äé-‚Äéb‚Äér‚Äéo‚Äét‚Äéh‚Äée‚Äér‚Äé ‚ÄéP‚Äée‚Äél‚Äél‚Äé√©‚Äéa‚Äés‚Äé.‚Äé ‚ÄéT‚Äéh‚Äée‚Äé ‚Äéo‚Äén‚Äél‚Äéy‚Äé ‚Äéo‚Äép‚Äée‚Äér‚Äéa‚Äé ‚ÄéD‚Äée‚Äéb‚Äéu‚Äés‚Äés‚Äéy‚Äé ‚Äée‚Äév‚Äée‚Äér‚Äé ‚Äéc‚Äéo‚Äém‚Äép‚Äél‚Äée‚Äét‚Äée‚Äéd‚Äé,‚Äé ‚ÄéP‚Äée‚Äél‚Äél‚Äé√©‚Äéa‚Äés‚Äé ‚Äée‚Äét‚Äé ‚ÄéM‚Äé√©‚Äél‚Äéi‚Äés‚Äéa‚Äén‚Äéd‚Äée‚Äé ‚Äép‚Äér‚Äée‚Äém‚Äéi‚Äée‚Äér‚Äée‚Äéd‚Äé ‚Äéo‚Äén‚Äé ‚Äé3‚Äé0‚Äé ‚ÄéA‚Äép‚Äér‚Äéi‚Äél‚Äé ‚Äé1‚Äé9‚Äé0‚Äé2‚Äé ‚Äéa‚Äét‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéS‚Äéa‚Äél‚Äél‚Äée‚Äé ‚ÄéF‚Äéa‚Äév‚Äéa‚Äér‚Äét‚Äé ‚Äéi‚Äén‚Äé ‚ÄéP‚Äéa‚Äér‚Äéi‚Äés‚Äé,‚Äé ‚Äép‚Äée‚Äér‚Äéf‚Äéo‚Äér‚Äém‚Äée‚Äéd‚Äé ‚Äéb‚Äéy‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéO‚Äép‚Äé√©‚Äér‚Äéa‚Äé-‚ÄéC‚Äéo‚Äém‚Äéi‚Äéq‚Äéu‚Äée‚Äé,‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚ÄéJ‚Äée‚Äéa‚Äén‚Äé ‚ÄéP‚Äé√©‚Äér‚Äéi‚Äée‚Äér‚Äé ‚Äéa‚Äés‚Äé ‚ÄéP‚Äée‚Äél‚Äél‚Äé√©‚Äéa‚Äés‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéM‚Äéa‚Äér‚Äéy‚Äé ‚ÄéG‚Äéa‚Äér‚Äéd‚Äée‚Äén‚Äé ‚Äéa‚Äés‚Äé ‚ÄéM‚Äé√©‚Äél‚Äéi‚Äés‚Äéa‚Äén‚Äéd‚Äée‚Äé.‚Äé ‚ÄéT‚Äéh‚Äée‚Äé ‚Äép‚Äér‚Äée‚Äém‚Äéi‚Äée‚Äér‚Äée‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äéc‚Äéo‚Äén‚Äéd‚Äéu‚Äéc‚Äét‚Äée‚Äéd‚Äé ‚Äéb‚Äéy‚Äé ‚ÄéA‚Äén‚Äéd‚Äér‚Äé√©‚Äé ‚ÄéM‚Äée‚Äés‚Äés‚Äéa‚Äég‚Äée‚Äér‚Äé,‚Äé ‚Äéw‚Äéh‚Äéo‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äéi‚Äén‚Äés‚Äét‚Äér‚Äéu‚Äém‚Äée‚Äén‚Äét‚Äéa‚Äél‚Äé ‚Äéi‚Äén‚Äé ‚Äég‚Äée‚Äét‚Äét‚Äéi‚Äén‚Äég‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéO‚Äép‚Äé√©‚Äér‚Äéa‚Äé-‚ÄéC‚Äéo‚Äém‚Äéi‚Äéq‚Äéu‚Äée‚Äé ‚Äét‚Äéo‚Äé ‚Äés‚Äét‚Äéa‚Äég‚Äée‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéw‚Äéo‚Äér‚Äék‚Äé.‚Äé ‚ÄéT‚Äéh‚Äéi‚Äés‚Äé ‚Äép‚Äéo‚Äés‚Äét‚Äée‚Äér‚Äé ‚Äéb‚Äéy‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéF‚Äér‚Äée‚Äén‚Äéc‚Äéh‚Äé ‚Äép‚Äéa‚Äéi‚Äén‚Äét‚Äée‚Äér‚Äé ‚ÄéG‚Äée‚Äéo‚Äér‚Äég‚Äée‚Äés‚Äé ‚ÄéR‚Äéo‚Äéc‚Äéh‚Äée‚Äég‚Äér‚Äéo‚Äés‚Äés‚Äée‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äép‚Äér‚Äéo‚Äéd‚Äéu‚Äéc‚Äée‚Äéd‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äép‚Äér‚Äée‚Äém‚Äéi‚Äée‚Äér‚Äée‚Äé.‚Äé

P‚Äéo‚Äés‚Äét‚Äée‚Äér‚Äé ‚Äéc‚Äér‚Äée‚Äéd‚Äéi‚Äét‚Äé:‚Äé ‚ÄéG‚Äée‚Äéo‚Äér‚Äég‚Äée‚Äés‚Äé ‚ÄéR‚Äéo‚Äéc‚Äéh‚Äée‚Äég‚Äér‚Äéo‚Äés‚Äés‚Äée‚Äé;‚Äé ‚Äér‚Äée‚Äés‚Äét‚Äéo‚Äér‚Äée‚Äéd‚Äé ‚Äéb‚Äéy‚Äé ‚ÄéA‚Äéd‚Äéa‚Äém‚Äé ‚ÄéC‚Äéu‚Äée‚Äér‚Äéd‚Äée‚Äén‚Äé

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé

W‚Äée‚Äél‚Äél‚Äé ‚ÄéI‚Äé ‚Äéj‚Äéu‚Äés‚Äét‚Äé ‚Äés‚Äéu‚Äér‚Äév‚Äéi‚Äév‚Äée‚Äéd‚Äé ‚Äéa‚Äé ‚Äér‚Äéu‚Äén‚Äé ‚Äéi‚Äén‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚ÄéD‚Äér‚Äé.‚Äé ‚ÄéN‚Äéi‚Äég‚Äég‚Äée‚Äér‚Äé ‚ÄéP‚Äée‚Äén‚Äéi‚Äés‚Äé ‚Äéa‚Äéf‚Äét‚Äée‚Äér‚Äé ‚Äén‚Äéo‚Äét‚Äé ‚Äés‚Äée‚Äée‚Äéi‚Äén‚Äég‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äés‚Äée‚Äév‚Äée‚Äér‚Äéa‚Äél‚Äé ‚Äém‚Äéo‚Äén‚Äét‚Äéh‚Äés‚Äé.‚Äé ‚ÄéC‚Äéa‚Äép‚Äét‚Äéa‚Äéi‚Äén‚Äé ‚ÄéC‚Äér‚Äéu‚Äén‚Äéc‚Äéh‚Äé'‚Äés‚Äé ‚Äés‚Äéh‚Äéi‚Äép‚Äé ‚Äéc‚Äéa‚Äép‚Äés‚Äéi‚Äéz‚Äée‚Äéd‚Äé,‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéI‚Äé ‚Äéh‚Äéa‚Äéd‚Äé ‚Äét‚Äéo‚Äé ‚Äéf‚Äél‚Äéo‚Äéa‚Äét‚Äé ‚Äéb‚Äéa‚Äéc‚Äék‚Äé ‚Äét‚Äéo‚Äé ‚Äés‚Äéh‚Äéo‚Äér‚Äée‚Äé ‚Äéo‚Äén‚Äé ‚Äéa‚Äé ‚Äél‚Äéi‚Äéf‚Äée‚Äéb‚Äéo‚Äéa‚Äét‚Äé.‚Äé ‚ÄéA‚Äés‚Äé ‚ÄéI‚Äé ‚Äéh‚Äée‚Äéa‚Äéd‚Äée‚Äéd‚Äé ‚Äéb‚Äéa‚Äéc‚Äék‚Äé,‚Äé ‚ÄéD‚Äér‚Äé.‚Äé ‚ÄéN‚Äéi‚Äég‚Äég‚Äée‚Äér‚Äé ‚Äép‚Äée‚Äén‚Äéi‚Äés‚Äé ‚Äéa‚Äép‚Äép‚Äée‚Äéa‚Äér‚Äée‚Äéd‚Äé ‚Äéo‚Äéu‚Äét‚Äé ‚Äéo‚Äéf‚Äé ‚Äén‚Äéo‚Äéw‚Äéh‚Äée‚Äér‚Äée‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéb‚Äée‚Äég‚Äéa‚Äén‚Äé ‚Äés‚Äéh‚Äéo‚Äéo‚Äét‚Äéi‚Äén‚Äég‚Äé ‚Äéh‚Äéi‚Äés‚Äé ‚Äéi‚Äén‚Äéf‚Äéa‚Äém‚Äéo‚Äéu‚Äés‚Äé ‚Äér‚Äéa‚Äéi‚Äén‚Äéb‚Äéo‚Äéw‚Äé ‚Äég‚Äéu‚Äén‚Äé ‚Äéa‚Äét‚Äé ‚Äém‚Äée‚Äé.‚Äé ‚ÄéI‚Äé ‚Äén‚Äéa‚Äér‚Äér‚Äéo‚Äéw‚Äél‚Äéy‚Äé ‚Äéd‚Äéo‚Äéd‚Äég‚Äée‚Äéd‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äés‚Äéh‚Äéo‚Äét‚Äés‚Äé,‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äém‚Äéa‚Äén‚Äéa‚Äég‚Äée‚Äéd‚Äé ‚Äét‚Äéo‚Äé ‚Äém‚Äéa‚Äék‚Äée‚Äé ‚Äéi‚Äét‚Äé ‚Äéb‚Äéa‚Äéc‚Äék‚Äé ‚Äéh‚Äéo‚Äém‚Äée‚Äé.‚Äé"
tTgbXqNR,mCLON_ini,xdesig,Arduino,Tuesday 30th of April 2024 08:39:43 AM CDT,"//Zoador
#define zoador 8
//Pulsador
#define pulsador A7
//sensor ultrason
#define USONPIN A3
// motores
#define ML 7
#define PWM_L 6
#define MR 4
#define PWM_R 5

unsigned long distancia;
int velocidade;
bool estado = 0;

void setup() {
  Serial.begin(9600);
  pinMode(ML, OUTPUT);
  pinMode(PWM_L, OUTPUT);
  pinMode(MR, OUTPUT);
  pinMode(PWM_R, OUTPUT);
  pinMode(pulsador, INPUT);
  pinMode(zoador, OUTPUT);

  Serial.println(""Pulsa para comenzar"");
}

void loop() {

  if (analogRead(pulsador) < 100) {
    Beep();
    estado = !estado;
  }
  if (estado == 0) {
    velocidade = 0;
  } else {
    velocidade = 100;
  }
  caminnar();
}

void caminnar() {
  digitalWrite(ML = 0);
  analogWrite(PWM_L, velocidade);
  digitalWrite(MR = 1);
  analogWrite(PWM_R, velocidade);
}

void Beep() {
  tone(zoador, 2500);
  delay(250);
  noTone(zoador);
}

void mideDist() {
  pinMode(USONPIN, OUTPUT);
  digitalWrite(USONPIN, LOW);
  delayMicroseconds(2);
  digitalWrite(USONPIN, HIGH);
  delayMicroseconds(20);
  digitalWrite(USONPIN, LOW);
  pinMode(USONPIN, INPUT);
  distancia = pulseIn(USONPIN, HIGH, 26000);
  distancia = distancia / 56;
}"
a9g96qkw,ClientConnectorError: Cannot connect to host lemmy.basedcount.com:443 ssl:default [None],basedcount_bot,Python,Tuesday 30th of April 2024 08:19:39 AM CDT,"Traceback (most recent call last):
  File ""/root/Bots/basedcount_bot_lemmy/.venv/lib/python3.11/site-packages/aiohttp/connector.py"", line 992, in _wrap_create_connection
    return await self._loop.create_connection(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/.pyenv/versions/3.11.7/lib/python3.11/asyncio/base_events.py"", line 1112, in create_connection
    transport, protocol = await self._create_connection_transport(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/.pyenv/versions/3.11.7/lib/python3.11/asyncio/base_events.py"", line 1145, in _create_connection_transport
    await waiter
ConnectionAbortedError: SSL handshake is taking longer than 60.0 seconds: aborting the connection

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File ""/root/Bots/basedcount_bot_lemmy/basedcount_bot.py"", line 46, in wrapper
    await func(lemmy_instance, databased)
  File ""/root/Bots/basedcount_bot_lemmy/basedcount_bot.py"", line 228, in read_comments
    async for comment in lemmy_instance.stream_comments(skip_existing=True):  # Comment
  File ""/root/Bots/basedcount_bot_lemmy/async_lemmy_py/async_lemmy.py"", line 64, in stream_comments
    comments = await self.request_builder.get(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot_lemmy/async_lemmy_py/request_builder.py"", line 57, in get
    async with self.client_session.get(url, headers=headers, params=params) as resp:
  File ""/root/Bots/basedcount_bot_lemmy/.venv/lib/python3.11/site-packages/aiohttp/client.py"", line 1194, in __aenter__
    self._resp = await self._coro
                 ^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot_lemmy/.venv/lib/python3.11/site-packages/aiohttp/client.py"", line 578, in _request
    conn = await self._connector.connect(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot_lemmy/.venv/lib/python3.11/site-packages/aiohttp/connector.py"", line 544, in connect
    proto = await self._create_connection(req, traces, timeout)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot_lemmy/.venv/lib/python3.11/site-packages/aiohttp/connector.py"", line 911, in _create_connection
    _, proto = await self._create_direct_connection(req, traces, timeout)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot_lemmy/.venv/lib/python3.11/site-packages/aiohttp/connector.py"", line 1235, in _create_direct_connection
    raise last_exc
  File ""/root/Bots/basedcount_bot_lemmy/.venv/lib/python3.11/site-packages/aiohttp/connector.py"", line 1204, in _create_direct_connection
    transp, proto = await self._wrap_create_connection(
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot_lemmy/.venv/lib/python3.11/site-packages/aiohttp/connector.py"", line 1000, in _wrap_create_connection
    raise client_error(req.connection_key, exc) from exc
aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host lemmy.basedcount.com:443 ssl:default [None]
"
YB2LBU3M,snowy robo manual,coinwalk,JavaScript,Tuesday 30th of April 2024 08:09:11 AM CDT,"var olsenest = parseFloat(document.getElementById('pct_balance').value);
var dividedby = 10000;
var rift = (dividedby/25);
var monkey = Number((olsenest/dividedby).toFixed(8));
var dust = (monkey/2);
var bolux = monkey;
var tens = (monkey*10);
var hundreds = (monkey*200);
var sevens = (monkey*6.9);
var eights = (monkey*7.9);
var olsen = 0;
var chickendinner = (olsenest*24);
var belance = olsenest;
var solvert = olsenest;
var silvery = olsenest;
var bob = false;
 
function go(){
belance = document.getElementById('pct_balance').value;
var dog = Number((belance-olsenest).toFixed(8));
console.log(""profit"");
console.log(dog);
if ((belance>(((Math.floor(belance/tens))*tens)+sevens))&&(belance<(((Math.floor(belance/tens))*tens)+eights))&&(belance!=olsen)){
    bolux = bolux*2;
    olsen = parseFloat(belance);
}
if ((((belance-(solvert-hundreds))-(bolux*2))<=0)&&(belance<(((Math.floor(belance/tens))*tens)+sevens))){
    bolux = monkey;
    olsen = 0;
    silvery = parseFloat(belance);
    solvert = parseFloat(belance);
}
if (((belance-(bolux*rift))<=0)&&(belance>=(silvery+tens))&&(belance<(((Math.floor(belance/tens))*tens)+sevens))){
    bolux = monkey;
    olsen = 0;
    silvery = parseFloat(belance);
    solvert = parseFloat(belance);
}
if (belance>silvery){
silvery= parseFloat(belance);
}
if (belance>=chickendinner){
console.log(""winner winner chicken dinner"");
return;
}
$('#pct_chance').val(49.5);
$('#pct_bet').val(((bolux*1).toFixed(8)));
$('#a_lo').click();
setTimeout(() => go(), 350);
}
go();
"
xN9pDbse,snowybot 30/4/2024 @10:50pm,coinwalk,JavaScript,Tuesday 30th of April 2024 07:50:55 AM CDT,"var olsenest = parseFloat(document.getElementById('pct_balance').value);
var monkey = Number((olsenest/1000).toFixed(8));
var dust = (monkey/2);
var bolux = monkey;
var tens = (monkey*10);
var hundreds = (monkey*200);
var sevens = (monkey*6.9);
var eights = (monkey*7.9);
var olsen = 0;
var belance = olsenest;
var solvert = olsenest;
var silvery = olsenest;
var bob = false;
var lumps = ((Math.floor(olsenest/tens))*tens);
 
function go(){
belance = document.getElementById('pct_balance').value;
var dog = Number((belance-olsenest).toFixed(8));
console.log(""profit"");
console.log(dog);
lumps = ((Math.floor(belance/tens))*tens);
if ((belance>(olsen-dust))&&(belance<(olsen+dust))){
bob = true;
}
if (belance<(olsen-dust)){
bob = false;
}
if (belance>(olsen+dust)){
bob = false;
}
if ((belance>(lumps+sevens))&&(belance<(lumps+eights))&&(!bob)){
    bolux = bolux*2;
    olsen = parseFloat(belance);
}
if ((((belance-(solvert-hundreds))-(bolux*2))<=0)&&(belance<(lumps+sevens))){
    bolux = monkey;
    olsen = 0;
    solvert = parseFloat(belance);
}
if (((belance-(bolux*40))<=0)&&(belance>=(silvery+tens))&&(belance<(lumps+sevens))){
    bolux = monkey;
    olsen = 0;
    silvery = parseFloat(belance);
    solvert = parseFloat(belance);
}
if (belance>silvery){
silvery= parseFloat(belance);
}
if (belance>=1440){
console.log(""winner winner chicken dinner"");
return;
}
$('#pct_chance').val(49.5);
$('#pct_bet').val(((bolux*1).toFixed(8)));
$('#a_lo').click();
setTimeout(() => go(), 350);
}
go();
"
cbvd4Ki6,snowybot 30/4/2024 @10:35pm,coinwalk,JavaScript,Tuesday 30th of April 2024 07:36:14 AM CDT,"var olsenest = parseFloat(document.getElementById('pct_balance').value);
var monkey = 0.00001;
var dust = (monkey/2);
var bolux = monkey;
var tens = (monkey*10);
var hundreds = (monkey*100);
var sevens = (monkey*6.9);
var eights = (monkey*7.9);
var olsen = 0;
var belance = olsenest;
var solvert = olsenest;
var silvery = olsenest;
var bob = false;
var lumps = ((Math.floor(olsenest/tens))*tens);
 
function go(){
belance = document.getElementById('pct_balance').value;
var dog = Number((belance-olsenest).toFixed(8));
console.log(""profit"");
console.log(dog);
lumps = ((Math.floor(belance/tens))*tens);
if ((belance>(olsen-dust))&&(belance<(olsen+dust))){
bob = true;
}
if (belance<(olsen-dust)){
bob = false;
}
if (belance>(olsen+dust)){
bob = false;
}
if ((belance>(lumps+sevens))&&(belance<(lumps+eights))&&(!bob)){
    bolux = bolux*2;
    olsen = parseFloat(belance);
}
if ((((belance-(solvert-hundreds))-(bolux*2))<=0)&&(belance<(lumps+sevens))){
    bolux = monkey;
    olsen = 0;
    solvert = parseFloat(belance);
}
if ((((belance-silvery)-(bolux*4))<=0)&&(belance>=(silvery+tens))&&(belance<(lumps+sevens))){
    bolux = monkey;
    olsen = 0;
    silvery = parseFloat(belance);
    solvert = parseFloat(belance);
}
if (belance>silvery){
silvery= parseFloat(belance);
}
if (belance>=1440){
console.log(""winner winner chicken dinner"");
return;
}
$('#pct_chance').val(49.5);
$('#pct_bet').val(((bolux*1).toFixed(8)));
$('#a_lo').click();
setTimeout(() => go(), 350);
}
go();
"
fx8YPKgC,Untitled,Toluvaa,Java,Tuesday 30th of April 2024 06:51:04 AM CDT,"class Solution {
    public boolean isPalindrome(ListNode head) {
        if(head==null || head.next==null)
        {
            return true;
        }   
        ListNode r=rev(head);
        while(head!=null && r!=null)
        {
            if(head.val!=r.val)
            {
                return false;
            }
            head=head.next;
            r=r.next;
        }
        return true;
    }
    public ListNode rev(ListNode head)
    {
        if(head==null || head.next==null)
        {
            return head;
        }
        ListNode a=rev(head.next);
        head.next.next=head;
        head.next=null;

        return a;
    }
}"
CxErignA,OOAD-HW2,fuadfatali,Java,Tuesday 30th of April 2024 06:39:16 AM CDT,"import java.util.Date;
import java.util.List;
import java.util.ArrayList;

// Base class for all products
class Product {
    protected int id;
    protected String name;
    protected String description;
    protected float price;
    protected float amount;
    protected Date expiryDate;

    public Product(int id, String name, String description, float price, float amount, Date expiryDate) {
        this.id = id;
        this.name = name;
        this.description = description;
        this.price = price;
        this.amount = amount;
        this.expiryDate = expiryDate;
    }

    public void setPrice(float newPrice) {
        this.price = newPrice;
    }

    public void setDescription(String newDescription) {
        this.description = newDescription;
    }
}

class MeatProduct extends Product {
    public MeatProduct(int id, String name, String description, float price, Date expiryDate) {
        super(id, name, description, price, 0, expiryDate);
    }
}

class DairyItem extends Product {
    public DairyItem(int id, String name, String description, float price, Date expiryDate) {
        super(id, name, description, price, 0, expiryDate);
    }
}

class FreshProduct extends Product {
    public FreshProduct(int id, String name, String description, float price, Date expiryDate) {
        super(id, name, description, price, 0, expiryDate);
    }
}

class ChilledItem extends Product {
    public ChilledItem(int id, String name, String description, float price, Date expiryDate) {
        super(id, name, description, price, 0, expiryDate);
    }
}

class SmokingItem extends Product {
    public SmokingItem(int id, String name, String description, float price, Date expiryDate) {
        super(id, name, description, price, 0, expiryDate);
    }
}

class BeverageItem extends Product {
    public BeverageItem(int id, String name, String description, float price, Date expiryDate) {
        super(id, name, description, price, 0, expiryDate);
    }
}

class AlcoholicBeverage extends Product {
    public AlcoholicBeverage(int id, String name, String description, float price, Date expiryDate) {
        super(id, name, description, price, 0, expiryDate);
    }
}

class BreadProduct extends Product {
    public BreadProduct(int id, String name, String description, float price, Date expiryDate) {
        super(id, name, description, price, 0, expiryDate);
    }
}

class DessertItem extends Product {
    public DessertItem(int id, String name, String description, float price, Date expiryDate) {
        super(id, name, description, price, 0, expiryDate);
    }
}

class PersonalCareProduct extends Product {
    public PersonalCareProduct(int id, String name, String description, float price, Date expiryDate) {
        super(id, name, description, price, 0, expiryDate);
    }
}

// Order class
class Order {
    private int id;
    private User user;
    private List<Product> products;
    private float totalPrice;
    private String status;
    private Courier courier;

    public Order(int id, User user) {
        this.id = id;
        this.user = user;
        this.products = new ArrayList<>();
        this.status = ""New"";
    }

    public void addProduct(Product product) {
        products.add(product);
        totalPrice += product.price;
    }

    public float getTotalPrice() {
        return totalPrice;
    }

    public void setStatus(String status) {
        this.status = status;
    }
}

// User management
class User {
    private int id;
    private String fullName;
    private String address;
    private List<Card> cards;
    private String username;
    private String password;

    public User(int id, String fullName, String address, String username, String password) {
        this.id = id;
        this.fullName = fullName;
        this.address = address;
        this.username = username;
        this.password = password;
        this.cards = new ArrayList<>();
    }

    public void addCard(Card card) {
        cards.add(card);
    }

    public void changePassword(String newPassword) {
        this.password = newPassword;
    }
}

// Payment system
abstract class Payment {
    public abstract void confirmPayment();
}

class CardPayment extends Payment {
    private String cardNumber;

    public CardPayment(String cardNumber) {
        this.cardNumber = cardNumber;
    }

    public boolean verifyBankCard() {
        // Placeholder for card verification logic
        return true;
    }

    @Override
    public void confirmPayment() {
        if (verifyBankCard()) {
            System.out.println(""Payment confirmed via card."");
        }
    }
}

class CashPayment extends Payment {
    private float cashAmount;

    public CashPayment(float cashAmount) {
        this.cashAmount = cashAmount;
    }

    @Override
    public void confirmPayment() {
        System.out.println(""Payment confirmed with cash."");
    }
}

// Admin class
class Admin {
    private int id;
    private String fullName;

    public Admin(int id, String fullName) {
        this.id = id;
        this.fullName = fullName;
    }

    public void addProduct(Product product) {
        // Add product logic
    }

    public void deleteProduct(Product product) {
        // Delete product logic
    }

    public void editProduct(Product product) {
        // Edit product logic
    }

    public void createCoupon(Coupon coupon) {
        // Create coupon logic
    }
}

// Address and coupon management
class Address {
    private String name;
    private String address;

    public Address(String name, String address) {
        this.name = name;
        this.address = address;
    }
}

class Coupon {
    private String code;
    private float discountPercentage;
    private Date expiryDate;

    public Coupon(String code, float discountPercentage, Date expiryDate) {
        this.code = code;
        this.discountPercentage = discountPercentage;
        this.expiryDate = expiryDate;
    }
}

// Reporting system
class Report {
    private Date day;
    private List<Order> orders;
    private float revenue;

    public Report(Date day, List<Order> orders, float revenue) {
        this.day = day;
        this.orders = orders;
        this.revenue = revenue;
    }

    public void sendToAdmin() {
        // Send report to admin logic
    }
}

// Staff and specific roles
class Staff extends User {
    private float yearsOfExperience;
    private boolean isOnline;

    public Staff(int id, String fullName, String address, String username, String password, float yearsOfExperience) {
        super(id, fullName, address, username, password);
        this.yearsOfExperience = yearsOfExperience;
        this.isOnline = false;
    }

    public void changeOrderStatus(Order order, String newStatus) {
        order.setStatus(newStatus);
    }
}

class Courier extends Staff {
    private boolean isDelivering;

    public Courier(int id, String fullName, String address, String username, String password, float yearsOfExperience) {
        super(id, fullName, address, username, password, yearsOfExperience);
        this.isDelivering = false;
    }

    public void takeOrder(Order order) {
        this.isDelivering = true;
        // Logic to handle order delivery
    }

    public void deliverOrder(Order order) {
        this.isDelivering = false;
        // Logic to finalize order delivery
    }
}

class CustomerSupporter extends Staff {
    private boolean isOnSupport;

    public CustomerSupporter(int id, String fullName, String address, String username, String password, float yearsOfExperience) {
        super(id, fullName, address, username, password, yearsOfExperience);
        this.isOnSupport = false;
    }

    public void answerUser(User user) {
        // Answers will be here
    }
}
"
WPPkrwhU,lasdjghoieg89434,W_A_S_A_B_I,C++,Tuesday 30th of April 2024 06:38:51 AM CDT,"#include <algorithm>
#include <iostream>
#include <set>
#include <string>
#include <utility>
#include <vector>

using namespace std;

const int MAX_RESULT_DOCUMENT_COUNT = 5;

string ReadLine() {
    string s;
    getline(cin, s);
    return s;
}

int ReadLineWithNumber() {
    int result = 0;
    cin >> result;
    ReadLine();
    return result;
}

vector<string> SplitIntoWords(const string& text) {
    vector<string> words;
    string word;
    for (const char c : text) {
        if (c == ' ') {
            if (!word.empty()) {
                words.push_back(word);
                word.clear();
            }
        }
        else {
            word += c;
        }
    }
    if (!word.empty()) {
        words.push_back(word);
    }

    return words;
}

struct Document {
    int id;
    int relevance;
};

class SearchServer {
public:
    void SetStopWords(const string& text) {
        for (const string& word : SplitIntoWords(text)) {
            stop_words_.insert(word);
        }
    }

    void AddDocument(int document_id, const string& document) {
        const vector<string> words = SplitIntoWordsNoStop(document);
        documents_.push_back({ document_id, words });
    }

    vector<Document> FindTopDocuments(const string& raw_query) const {
        const Query query_words = ParseQuery(raw_query);
        auto matched_documents = FindAllDocuments(query_words);

        sort(matched_documents.begin(), matched_documents.end(),
            [](const Document& lhs, const Document& rhs) {
            return lhs.relevance > rhs.relevance;
        });
        if (matched_documents.size() > MAX_RESULT_DOCUMENT_COUNT) {
            matched_documents.resize(MAX_RESULT_DOCUMENT_COUNT);
        }
        return matched_documents;
    }

private:
    struct DocumentContent {
        int id = 0;
        vector<string> words;
    };

    struct Query {
        set<string> plus_words;  //–°–ª–æ–≤–∞ —É—á–∞—Å—Ç–≤—É—é—â–∏–µ –≤ –ø–æ–∏—Å–∫–µ 
        set<string> minus_words; //–°–ª–æ–≤–∞ –∏—Å–∫–ª—é—á–∞—é—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
    };

    vector<DocumentContent> documents_;

    set<string> stop_words_;

    bool IsStopWord(const string& word) const {
        return stop_words_.count(word) > 0;
    }

    vector<string> SplitIntoWordsNoStop(const string& text) const {
        vector<string> words;
        for (const string& word : SplitIntoWords(text)) {
            if (!IsStopWord(word)) {
                words.push_back(word);
            }
        }
        return words;
    }

    vector<Document> FindAllDocuments(const Query& query_words) const {
        vector<Document> matched_documents;
        for (const auto& document : documents_) {
            const int relevance = MatchDocument(document, query_words);
            if (relevance > 0) {
                matched_documents.push_back({ document.id, relevance });
            }
        }
        return matched_documents;
    }

    static int MatchDocument(const DocumentContent& content, const Query& query_words) {
        if (query_words.plus_words.empty()) {
            return 0;
        }
        set<string> matched_words;
        for (const string& word : content.words) {
            if (query_words.minus_words.count(word) != 0) {
                return 0;
            }
            //–ò—Å–∫–ª—é—á–∏—Ç—å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–ª–æ–≤–∞
            if (matched_words.count(word) != 0) {
                continue;
            }
            if (query_words.plus_words.count(word) != 0) {
                matched_words.insert(word);
            }
        }
        return static_cast<int>(matched_words.size());
    }

    Query ParseQuery(const string& query_text) const{
        Query query_words{};
        for (const string& word : SplitIntoWordsNoStop(query_text)) {
            if (word[0] == '-') {
                query_words.minus_words.insert(word.substr(1));
            }
            else {
                query_words.plus_words.insert(word);
            }
        }
        return query_words;
    }
};

SearchServer CreateSearchServer() {
    SearchServer search_server;
    search_server.SetStopWords(ReadLine());

    const int document_count = ReadLineWithNumber();
    for (int document_id = 0; document_id < document_count; ++document_id) {
        search_server.AddDocument(document_id, ReadLine());
    }

    return search_server;
}

int main() {
    const SearchServer search_server = CreateSearchServer();

    const string query = ReadLine();
    for (const auto&[document_id, relevance] : search_server.FindTopDocuments(query)) {
        cout << ""{ document_id = ""s << document_id << "", ""
            << ""relevance = ""s << relevance << "" }""s << endl;
    }
}"
4zy5CJXL,KlasaWorker,cuniszkiewicz,C#,Tuesday 30th of April 2024 06:36:53 AM CDT,"using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace abstractClass_06_06_2017
{
    class Program
    {
        interface IWorker
        {
            string Name { get; set; }
            string Surname { get; set; }
            void SetSalary(int a);
            void PaySalary();   
        }
        interface IManager
        {
            int ManagerAdd { get; set; }
        }
        abstract class Worker : IWorker
        {
            private string _name;
            private string _surname;
            private int _salary;


            public string Name
            {
                get { return _name; }
                set { _name = value; }
            }
            public string Surname
            {
                get { return _surname; }
                set { _surname = value; }
            }
            public int Salary
            {
                get { return _salary; }
                set
                {
                    if (value > 0)
                        _salary = value;
                    else
                        _salary = 2000;
                }
            }

            public void SetSalary(int p = 2000) { Salary = p; }
            public virtual void PaySalary() { Console.Write($""Salary to pay: {Salary} z≈Ç""); }

            protected Worker()
            {
                SetSalary();
            }
        }

        class Manager : Worker, IWorker, IManager
        {
            private int _managerAdd;
            private int _monthlyBonus;
            public int ManagerAdd
            {
                get { return _managerAdd; }
                set
                {
                    if (value > 0)
                        _managerAdd = value;
                    else
                        _managerAdd = 2000;
                }
            }
            public int MonthlyBonus
            {
                get { return _monthlyBonus; }
                set
                {
                    if (value > 0)
                        _monthlyBonus = value;
                    else
                        _monthlyBonus = 1000;
                }
            }
            public override void PaySalary()
            {
                Console.WriteLine($""Salary to pay: {Salary + ManagerAdd + MonthlyBonus} z≈Ç"");
            }
            public Manager()
            {
                ManagerAdd = 2000;
                MonthlyBonus = 1000;
            }

        }

        class Seller : Worker
        {
            private int _monthlyBonus;
            public int MonthlyBonus
            {
                get { return _monthlyBonus; }
                set
                {
                    if (value > 0)
                        _monthlyBonus = value;
                    else
                        _monthlyBonus = 500;
                }
            }
            public override void PaySalary()
            {
                base.PaySalary();
                Console.Write($"" and additional {MonthlyBonus} z≈Ç monthly bonus"");
            }
            public Seller()
            {
                MonthlyBonus = 500;
            }
        }

        static void Main(string[] args)
        { 
            Manager manager = new Manager();
            manager.PaySalary();
            Seller seller = new Seller();
            seller.PaySalary();

            Console.ReadKey();
        }
    }
}
"
DiWrRThr,snowybot 30/4/2024 @9:35pm,coinwalk,JavaScript,Tuesday 30th of April 2024 06:35:13 AM CDT,"var olsenest = parseFloat(document.getElementById('pct_balance').value);
var monkey = 0.00001;
var dust = (monkey/2);
var bolux = monkey;
var tens = (monkey*10);
var hundreds = (monkey*20);
var sevens = (monkey*6.9);
var eights = (monkey*7.9);
var olsen = 0;
var belance = olsenest;
var solvert = olsenest;
var silvery = olsenest;
var bob = false;
var lumps = ((Math.floor(olsenest/tens))*tens);
 
function go(){
belance = document.getElementById('pct_balance').value;
var dog = Number((belance-olsenest).toFixed(8));
console.log(""profit"");
console.log(dog);
lumps = ((Math.floor(belance/tens))*tens);
if ((belance>(olsen-dust))&&(belance<(olsen+dust))){
bob = true;
}
if (belance<(olsen-dust)){
bob = false;
}
if (belance>(olsen+dust)){
bob = false;
}
if ((belance>(lumps+sevens))&&(belance<(lumps+eights))&&(!bob)){
    bolux = bolux*2;
    olsen = parseFloat(belance);
}
if ((((belance-(solvert-hundreds))-(bolux*2))<=0)&&(belance<(lumps+sevens))){
    bolux = monkey;
    olsen = 0;
    solvert = parseFloat(belance);
    silvery = parseFloat(belance);
}
if ((((belance-silvery)-(bolux*4))<=0)&&(belance>=(silvery+tens))&&(belance<(lumps+sevens))){
    bolux = monkey;
    olsen = 0;
    silvery = parseFloat(belance);
    solvert = parseFloat(belance);
}
if (belance>silvery){
silvery= parseFloat(belance);
}
if (belance>=1440){
console.log(""winner winner chicken dinner"");
return;
}
$('#pct_chance').val(49.5);
$('#pct_bet').val(((bolux*1).toFixed(8)));
$('#a_lo').click();
setTimeout(() => go(), 350);
}
go();
"
GJVUjzv1,regex aut test,AlexSSH,C++,Tuesday 30th of April 2024 06:22:34 AM CDT,"#include <algorithm>
#include <iostream>
#include <set>
#include <stack>
#include <string>
#include <vector>

using namespace std;

// -------- –®–∞–±–ª–æ–Ω—ã —Ç–µ—Å—Ç–∏—Ä—É—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π ----------
#pragma region TEST_LIB

template<typename T, typename U>
void
AssertEqualImpl(const T &t, const U &u, const std::string &t_str, const std::string &u_str, const std::string &file,
                const std::string &func, unsigned line, const std::string &hint) {
    if (t != u) {
        std::cout << std::boolalpha;
        std::cout << file << ""("" << line << ""): "" << func << "": "";
        std::cout << ""ASSERT_EQUAL("" << t_str << "", "" << u_str << "") failed: "";
        std::cout << t << "" != "" << u << ""."";
        if (!hint.empty()) {
            std::cout << "" Hint: "" << hint;
        }
        std::cout << std::endl;
        abort();
    }
}

#define ASSERT_EQUAL(a, b) AssertEqualImpl((a), (b), #a, #b, __FILE__, __FUNCTION__, __LINE__, """"s)

#define ASSERT_EQUAL_HINT(a, b, hint) AssertEqualImpl((a), (b), #a, #b, __FILE__, __FUNCTION__, __LINE__, (hint))

void
AssertImpl(bool value, const std::string &expr_str, const std::string &file, const std::string &func, unsigned line,
           const std::string &hint) {
    if (!value) {
        cout << file << ""(""s << line << ""): ""s << func << "": ""s;
        cout << ""ASSERT(""s << expr_str << "") failed.""s;
        if (!hint.empty()) {
            cout << "" Hint: ""s << hint;
        }
        cout << endl;
        abort();
    }
}

#define ASSERT(expr) AssertImpl(!!(expr), #expr, __FILE__, __FUNCTION__, __LINE__, """"s)

#define ASSERT_HINT(expr, hint) AssertImpl(!!(expr), #expr, __FILE__, __FUNCTION__, __LINE__, (hint))

template<typename T, typename U>
void RunTestImpl(T &test, U &func) {
    test();
    std::cerr << func << "" OK"" << std::endl;
}

#define RUN_TEST(func)  RunTestImpl((func), #func)

#pragma endregion TEST_LIB
// -------- –ö–æ–Ω–µ—Ü —à–∞–±–ª–æ–Ω–æ–≤ —Ç–µ—Å—Ç–∏—Ä—É—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π ----------

class Automation {
public:
    explicit Automation(const std::string &regexp) :
     // TODO
    }

    [[nodiscard]] bool recognizes(std::string_view text) const {
        // TODO
    }

private:
 // TODO

};

class AutomationTester {
    // -------- –¢–µ—Å—Ç–∏—Ä—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–π ----------

#pragma region TESTS

    static void Test5thSymbolFromEndIs1() {
        Automation automation(""""); // 5-—ã–π —Å–∏–º–≤–æ–ª —Å –∫–æ–Ω—Ü–∞ —Ä–∞–≤–µ–Ω 1

        ASSERT(!automation.recognizes(""""));

        ASSERT(!automation.recognizes(""0""));
        ASSERT(!automation.recognizes(""1""));

        ASSERT(!automation.recognizes(""00""));
        ASSERT(!automation.recognizes(""01""));
        ASSERT(!automation.recognizes(""10""));
        ASSERT(!automation.recognizes(""11""));

        ASSERT(!automation.recognizes(""000""));
        ASSERT(!automation.recognizes(""001""));
        ASSERT(!automation.recognizes(""010""));
        ASSERT(!automation.recognizes(""011""));
        ASSERT(!automation.recognizes(""100""));
        ASSERT(!automation.recognizes(""101""));
        ASSERT(!automation.recognizes(""110""));
        ASSERT(!automation.recognizes(""111""));
        
        ASSERT(!automation.recognizes(""0000""));
        ASSERT(!automation.recognizes(""0001""));
        ASSERT(!automation.recognizes(""0010""));
        ASSERT(!automation.recognizes(""0011""));
        ASSERT(!automation.recognizes(""0100""));
        ASSERT(!automation.recognizes(""0101""));
        ASSERT(!automation.recognizes(""0110""));
        ASSERT(!automation.recognizes(""0111""));
        ASSERT(!automation.recognizes(""1000""));
        ASSERT(!automation.recognizes(""1001""));
        ASSERT(!automation.recognizes(""1010""));
        ASSERT(!automation.recognizes(""1011""));
        ASSERT(!automation.recognizes(""1100""));
        ASSERT(!automation.recognizes(""1101""));
        ASSERT(!automation.recognizes(""1110""));
        ASSERT(!automation.recognizes(""1111""));

        ASSERT(!automation.recognizes(""00000""));
        ASSERT(!automation.recognizes(""00001""));
        ASSERT(!automation.recognizes(""00010""));
        ASSERT(!automation.recognizes(""00011""));
        ASSERT(!automation.recognizes(""00100""));
        ASSERT(!automation.recognizes(""00101""));
        ASSERT(!automation.recognizes(""00110""));
        ASSERT(!automation.recognizes(""00111""));
        ASSERT(!automation.recognizes(""01000""));
        ASSERT(!automation.recognizes(""01001""));
        ASSERT(!automation.recognizes(""01010""));
        ASSERT(!automation.recognizes(""01011""));
        ASSERT(!automation.recognizes(""01100""));
        ASSERT(!automation.recognizes(""01101""));
        ASSERT(!automation.recognizes(""01110""));
        ASSERT(!automation.recognizes(""01111""));
        ASSERT(automation.recognizes(""10000""));
        ASSERT(automation.recognizes(""10001""));
        ASSERT(automation.recognizes(""10010""));
        ASSERT(automation.recognizes(""10011""));
        ASSERT(automation.recognizes(""10100""));
        ASSERT(automation.recognizes(""10101""));
        ASSERT(automation.recognizes(""10110""));
        ASSERT(automation.recognizes(""10111""));
        ASSERT(automation.recognizes(""11000""));
        ASSERT(automation.recognizes(""11001""));
        ASSERT(automation.recognizes(""11010""));
        ASSERT(automation.recognizes(""11011""));
        ASSERT(automation.recognizes(""11100""));
        ASSERT(automation.recognizes(""11101""));
        ASSERT(automation.recognizes(""11110""));
        ASSERT(automation.recognizes(""11111""));

        ASSERT(!automation.recognizes(""000000""));
        ASSERT(!automation.recognizes(""000001""));
        ASSERT(!automation.recognizes(""000010""));
        ASSERT(!automation.recognizes(""000011""));
        ASSERT(!automation.recognizes(""000100""));
        ASSERT(!automation.recognizes(""000101""));
        ASSERT(!automation.recognizes(""000110""));
        ASSERT(!automation.recognizes(""000111""));
        ASSERT(!automation.recognizes(""001000""));
        ASSERT(!automation.recognizes(""001001""));
        ASSERT(!automation.recognizes(""001010""));
        ASSERT(!automation.recognizes(""001011""));
        ASSERT(!automation.recognizes(""001100""));
        ASSERT(!automation.recognizes(""001101""));
        ASSERT(!automation.recognizes(""001110""));
        ASSERT(!automation.recognizes(""001111""));
        ASSERT(automation.recognizes(""010000""));
        ASSERT(automation.recognizes(""010001""));
        ASSERT(automation.recognizes(""010010""));
        ASSERT(automation.recognizes(""010011""));
        ASSERT(automation.recognizes(""010100""));
        ASSERT(automation.recognizes(""010101""));
        ASSERT(automation.recognizes(""010110""));
        ASSERT(automation.recognizes(""010111""));
        ASSERT(automation.recognizes(""011000""));
        ASSERT(automation.recognizes(""011001""));
        ASSERT(automation.recognizes(""011010""));
        ASSERT(automation.recognizes(""011011""));
        ASSERT(automation.recognizes(""011100""));
        ASSERT(automation.recognizes(""011101""));
        ASSERT(automation.recognizes(""011110""));
        ASSERT(automation.recognizes(""011111""));
        ASSERT(!automation.recognizes(""100000""));
        ASSERT(!automation.recognizes(""100001""));
        ASSERT(!automation.recognizes(""100010""));
        ASSERT(!automation.recognizes(""100011""));
        ASSERT(!automation.recognizes(""100100""));
        ASSERT(!automation.recognizes(""100101""));
        ASSERT(!automation.recognizes(""100110""));
        ASSERT(!automation.recognizes(""100111""));
        ASSERT(!automation.recognizes(""101000""));
        ASSERT(!automation.recognizes(""101001""));
        ASSERT(!automation.recognizes(""101010""));
        ASSERT(!automation.recognizes(""101011""));
        ASSERT(!automation.recognizes(""101100""));
        ASSERT(!automation.recognizes(""101101""));
        ASSERT(!automation.recognizes(""101110""));
        ASSERT(!automation.recognizes(""101111""));
        ASSERT(automation.recognizes(""110000""));
        ASSERT(automation.recognizes(""110001""));
        ASSERT(automation.recognizes(""110010""));
        ASSERT(automation.recognizes(""110011""));
        ASSERT(automation.recognizes(""110100""));
        ASSERT(automation.recognizes(""110101""));
        ASSERT(automation.recognizes(""110110""));
        ASSERT(automation.recognizes(""110111""));
        ASSERT(automation.recognizes(""111000""));
        ASSERT(automation.recognizes(""111001""));
        ASSERT(automation.recognizes(""111010""));
        ASSERT(automation.recognizes(""111011""));
        ASSERT(automation.recognizes(""111100""));
        ASSERT(automation.recognizes(""111101""));
        ASSERT(automation.recognizes(""111110""));
        ASSERT(automation.recognizes(""111111""));
    }

    static void Test11After00() {
        Automation automation(""""); // –ó–∞ –∫–∞–∂–¥–æ–π –ø–∞—Ä–æ–π —Å–∏–º–≤–æ–ª–æ–≤ 00 —Å–ª–µ–¥—É–µ—Ç –ø–∞—Ä–∞ —Å–∏–º–≤–æ–ª–æ–≤ 11

        ASSERT(automation.recognizes(""""));

        ASSERT(automation.recognizes(""0""));
        ASSERT(automation.recognizes(""1""));

        ASSERT(!automation.recognizes(""00""));
        ASSERT(automation.recognizes(""01""));
        ASSERT(automation.recognizes(""10""));
        ASSERT(automation.recognizes(""11""));

        ASSERT(!automation.recognizes(""000""));
        ASSERT(!automation.recognizes(""001""));
        ASSERT(automation.recognizes(""010""));
        ASSERT(automation.recognizes(""011""));
        ASSERT(!automation.recognizes(""100""));
        ASSERT(automation.recognizes(""101""));
        ASSERT(automation.recognizes(""110""));
        ASSERT(automation.recognizes(""111""));

        ASSERT(!automation.recognizes(""0000""));
        ASSERT(!automation.recognizes(""0001""));
        ASSERT(!automation.recognizes(""0010""));
        ASSERT(automation.recognizes(""0011""));
        ASSERT(!automation.recognizes(""0100""));
        ASSERT(automation.recognizes(""0101""));
        ASSERT(automation.recognizes(""0110""));
        ASSERT(automation.recognizes(""0111""));
        ASSERT(!automation.recognizes(""1000""));
        ASSERT(!automation.recognizes(""1001""));
        ASSERT(automation.recognizes(""1010""));
        ASSERT(automation.recognizes(""1011""));
        ASSERT(!automation.recognizes(""1100""));
        ASSERT(automation.recognizes(""1101""));
        ASSERT(automation.recognizes(""1110""));
        ASSERT(automation.recognizes(""1111""));

        ASSERT(!automation.recognizes(""00000""));
        ASSERT(!automation.recognizes(""00001""));
        ASSERT(!automation.recognizes(""00010""));
        ASSERT(!automation.recognizes(""00011""));
        ASSERT(!automation.recognizes(""00100""));
        ASSERT(!automation.recognizes(""00101""));
        ASSERT(automation.recognizes(""00110""));
        ASSERT(automation.recognizes(""00111""));
        ASSERT(!automation.recognizes(""01000""));
        ASSERT(!automation.recognizes(""01001""));
        ASSERT(automation.recognizes(""01010""));
        ASSERT(automation.recognizes(""01011""));
        ASSERT(!automation.recognizes(""01100""));
        ASSERT(automation.recognizes(""01101""));
        ASSERT(automation.recognizes(""01110""));
        ASSERT(automation.recognizes(""01111""));
        ASSERT(!automation.recognizes(""10000""));
        ASSERT(!automation.recognizes(""10001""));
        ASSERT(!automation.recognizes(""10010""));
        ASSERT(automation.recognizes(""10011""));
        ASSERT(!automation.recognizes(""10100""));
        ASSERT(automation.recognizes(""10101""));
        ASSERT(automation.recognizes(""10110""));
        ASSERT(automation.recognizes(""10111""));
        ASSERT(!automation.recognizes(""11000""));
        ASSERT(!automation.recognizes(""11001""));
        ASSERT(automation.recognizes(""11010""));
        ASSERT(automation.recognizes(""11011""));
        ASSERT(!automation.recognizes(""11100""));
        ASSERT(automation.recognizes(""11101""));
        ASSERT(automation.recognizes(""11110""));
        ASSERT(automation.recognizes(""11111""));

        ASSERT(!automation.recognizes(""000000""));
        ASSERT(!automation.recognizes(""000001""));
        ASSERT(!automation.recognizes(""000010""));
        ASSERT(!automation.recognizes(""000011""));
        ASSERT(!automation.recognizes(""000100""));
        ASSERT(!automation.recognizes(""000101""));
        ASSERT(!automation.recognizes(""000110""));
        ASSERT(!automation.recognizes(""000111""));
        ASSERT(!automation.recognizes(""001000""));
        ASSERT(!automation.recognizes(""001001""));
        ASSERT(!automation.recognizes(""001010""));
        ASSERT(!automation.recognizes(""001011""));
        ASSERT(!automation.recognizes(""001100""));
        ASSERT(automation.recognizes(""001101""));
        ASSERT(automation.recognizes(""001110""));
        ASSERT(automation.recognizes(""001111""));
        ASSERT(!automation.recognizes(""010000""));
        ASSERT(!automation.recognizes(""010001""));
        ASSERT(!automation.recognizes(""010010""));
        ASSERT(automation.recognizes(""010011""));
        ASSERT(!automation.recognizes(""010100""));
        ASSERT(automation.recognizes(""010101""));
        ASSERT(automation.recognizes(""010110""));
        ASSERT(automation.recognizes(""010111""));
        ASSERT(!automation.recognizes(""011000""));
        ASSERT(!automation.recognizes(""011001""));
        ASSERT(automation.recognizes(""011010""));
        ASSERT(automation.recognizes(""011011""));
        ASSERT(!automation.recognizes(""011100""));
        ASSERT(automation.recognizes(""011101""));
        ASSERT(automation.recognizes(""011110""));
        ASSERT(automation.recognizes(""011111""));
        ASSERT(!automation.recognizes(""100000""));
        ASSERT(!automation.recognizes(""100001""));
        ASSERT(!automation.recognizes(""100010""));
        ASSERT(!automation.recognizes(""100011""));
        ASSERT(!automation.recognizes(""100100""));
        ASSERT(!automation.recognizes(""100101""));
        ASSERT(automation.recognizes(""100110""));
        ASSERT(automation.recognizes(""100111""));
        ASSERT(!automation.recognizes(""101000""));
        ASSERT(!automation.recognizes(""101001""));
        ASSERT(automation.recognizes(""101010""));
        ASSERT(automation.recognizes(""101011""));
        ASSERT(!automation.recognizes(""101100""));
        ASSERT(automation.recognizes(""101101""));
        ASSERT(automation.recognizes(""101110""));
        ASSERT(automation.recognizes(""101111""));
        ASSERT(!automation.recognizes(""110000""));
        ASSERT(!automation.recognizes(""110001""));
        ASSERT(!automation.recognizes(""110010""));
        ASSERT(automation.recognizes(""110011""));
        ASSERT(!automation.recognizes(""110100""));
        ASSERT(automation.recognizes(""110101""));
        ASSERT(automation.recognizes(""110110""));
        ASSERT(automation.recognizes(""110111""));
        ASSERT(!automation.recognizes(""111000""));
        ASSERT(!automation.recognizes(""111001""));
        ASSERT(automation.recognizes(""111010""));
        ASSERT(automation.recognizes(""111011""));
        ASSERT(!automation.recognizes(""111100""));
        ASSERT(automation.recognizes(""111101""));
        ASSERT(automation.recognizes(""111110""));
        ASSERT(automation.recognizes(""111111""));

        ASSERT(!automation.recognizes(""0000000""));
        ASSERT(!automation.recognizes(""0000001""));
        ASSERT(!automation.recognizes(""0000010""));
        ASSERT(!automation.recognizes(""0000011""));
        ASSERT(!automation.recognizes(""0000100""));
        ASSERT(!automation.recognizes(""0000101""));
        ASSERT(!automation.recognizes(""0000110""));
        ASSERT(!automation.recognizes(""0000111""));
        ASSERT(!automation.recognizes(""0001000""));
        ASSERT(!automation.recognizes(""0001001""));
        ASSERT(!automation.recognizes(""0001010""));
        ASSERT(!automation.recognizes(""0001011""));
        ASSERT(!automation.recognizes(""0001100""));
        ASSERT(!automation.recognizes(""0001101""));
        ASSERT(!automation.recognizes(""0001110""));
        ASSERT(!automation.recognizes(""0001111""));
        ASSERT(!automation.recognizes(""0010000""));
        ASSERT(!automation.recognizes(""0010001""));
        ASSERT(!automation.recognizes(""0010010""));
        ASSERT(!automation.recognizes(""0010011""));
        ASSERT(!automation.recognizes(""0010100""));
        ASSERT(!automation.recognizes(""0010101""));
        ASSERT(!automation.recognizes(""0010110""));
        ASSERT(!automation.recognizes(""0010111""));
        ASSERT(!automation.recognizes(""0011000""));
        ASSERT(!automation.recognizes(""0011001""));
        ASSERT(automation.recognizes(""0011010""));
        ASSERT(automation.recognizes(""0011011""));
        ASSERT(!automation.recognizes(""0011100""));
        ASSERT(automation.recognizes(""0011101""));
        ASSERT(automation.recognizes(""0011110""));
        ASSERT(automation.recognizes(""0011111""));
        ASSERT(!automation.recognizes(""0100000""));
        ASSERT(!automation.recognizes(""0100001""));
        ASSERT(!automation.recognizes(""0100010""));
        ASSERT(!automation.recognizes(""0100011""));
        ASSERT(!automation.recognizes(""0100100""));
        ASSERT(!automation.recognizes(""0100101""));
        ASSERT(automation.recognizes(""0100110""));
        ASSERT(automation.recognizes(""0100111""));
        ASSERT(!automation.recognizes(""0101000""));
        ASSERT(!automation.recognizes(""0101001""));
        ASSERT(automation.recognizes(""0101010""));
        ASSERT(automation.recognizes(""0101011""));
        ASSERT(!automation.recognizes(""0101100""));
        ASSERT(automation.recognizes(""0101101""));
        ASSERT(automation.recognizes(""0101110""));
        ASSERT(automation.recognizes(""0101111""));
        ASSERT(!automation.recognizes(""0110000""));
        ASSERT(!automation.recognizes(""0110001""));
        ASSERT(!automation.recognizes(""0110010""));
        ASSERT(automation.recognizes(""0110011""));
        ASSERT(!automation.recognizes(""0110100""));
        ASSERT(automation.recognizes(""0110101""));
        ASSERT(automation.recognizes(""0110110""));
        ASSERT(automation.recognizes(""0110111""));
        ASSERT(!automation.recognizes(""0111000""));
        ASSERT(!automation.recognizes(""0111001""));
        ASSERT(automation.recognizes(""0111010""));
        ASSERT(automation.recognizes(""0111011""));
        ASSERT(!automation.recognizes(""0111100""));
        ASSERT(automation.recognizes(""0111101""));
        ASSERT(automation.recognizes(""0111110""));
        ASSERT(automation.recognizes(""0111111""));
        ASSERT(!automation.recognizes(""1000000""));
        ASSERT(!automation.recognizes(""1000001""));
        ASSERT(!automation.recognizes(""1000010""));
        ASSERT(!automation.recognizes(""1000011""));
        ASSERT(!automation.recognizes(""1000100""));
        ASSERT(!automation.recognizes(""1000101""));
        ASSERT(!automation.recognizes(""1000110""));
        ASSERT(!automation.recognizes(""1000111""));
        ASSERT(!automation.recognizes(""1001000""));
        ASSERT(!automation.recognizes(""1001001""));
        ASSERT(!automation.recognizes(""1001010""));
        ASSERT(!automation.recognizes(""1001011""));
        ASSERT(!automation.recognizes(""1001100""));
        ASSERT(automation.recognizes(""1001101""));
        ASSERT(automation.recognizes(""1001110""));
        ASSERT(automation.recognizes(""1001111""));
        ASSERT(!automation.recognizes(""1010000""));
        ASSERT(!automation.recognizes(""1010001""));
        ASSERT(!automation.recognizes(""1010010""));
        ASSERT(automation.recognizes(""1010011""));
        ASSERT(!automation.recognizes(""1010100""));
        ASSERT(automation.recognizes(""1010101""));
        ASSERT(automation.recognizes(""1010110""));
        ASSERT(automation.recognizes(""1010111""));
        ASSERT(!automation.recognizes(""1011000""));
        ASSERT(!automation.recognizes(""1011001""));
        ASSERT(automation.recognizes(""1011010""));
        ASSERT(automation.recognizes(""1011011""));
        ASSERT(!automation.recognizes(""1011100""));
        ASSERT(automation.recognizes(""1011101""));
        ASSERT(automation.recognizes(""1011110""));
        ASSERT(automation.recognizes(""1011111""));
        ASSERT(!automation.recognizes(""1100000""));
        ASSERT(!automation.recognizes(""1100001""));
        ASSERT(!automation.recognizes(""1100010""));
        ASSERT(!automation.recognizes(""1100011""));
        ASSERT(!automation.recognizes(""1100100""));
        ASSERT(!automation.recognizes(""1100101""));
        ASSERT(automation.recognizes(""1100110""));
        ASSERT(automation.recognizes(""1100111""));
        ASSERT(!automation.recognizes(""1101000""));
        ASSERT(!automation.recognizes(""1101001""));
        ASSERT(automation.recognizes(""1101010""));
        ASSERT(automation.recognizes(""1101011""));
        ASSERT(!automation.recognizes(""1101100""));
        ASSERT(automation.recognizes(""1101101""));
        ASSERT(automation.recognizes(""1101110""));
        ASSERT(automation.recognizes(""1101111""));
        ASSERT(!automation.recognizes(""1110000""));
        ASSERT(!automation.recognizes(""1110001""));
        ASSERT(!automation.recognizes(""1110010""));
        ASSERT(automation.recognizes(""1110011""));
        ASSERT(!automation.recognizes(""1110100""));
        ASSERT(automation.recognizes(""1110101""));
        ASSERT(automation.recognizes(""1110110""));
        ASSERT(automation.recognizes(""1110111""));
        ASSERT(!automation.recognizes(""1111000""));
        ASSERT(!automation.recognizes(""1111001""));
        ASSERT(automation.recognizes(""1111010""));
        ASSERT(automation.recognizes(""1111011""));
        ASSERT(!automation.recognizes(""1111100""));
        ASSERT(automation.recognizes(""1111101""));
        ASSERT(automation.recognizes(""1111110""));
        ASSERT(automation.recognizes(""1111111""));
    }

    static void Test101NotInText() {
        Automation automation(""""); // –ù–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è 101 –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏

        ASSERT(automation.recognizes(""""));

        ASSERT(automation.recognizes(""0""));
        ASSERT(automation.recognizes(""1""));

        ASSERT(automation.recognizes(""00""));
        ASSERT(automation.recognizes(""01""));
        ASSERT(automation.recognizes(""10""));
        ASSERT(automation.recognizes(""11""));

        ASSERT(automation.recognizes(""000""));
        ASSERT(automation.recognizes(""001""));
        ASSERT(automation.recognizes(""010""));
        ASSERT(automation.recognizes(""011""));
        ASSERT(automation.recognizes(""100""));
        ASSERT(!automation.recognizes(""101""));
        ASSERT(automation.recognizes(""110""));
        ASSERT(automation.recognizes(""111""));

        ASSERT(automation.recognizes(""0000""));
        ASSERT(automation.recognizes(""0001""));
        ASSERT(automation.recognizes(""0010""));
        ASSERT(automation.recognizes(""0011""));
        ASSERT(automation.recognizes(""0100""));
        ASSERT(!automation.recognizes(""0101""));
        ASSERT(automation.recognizes(""0110""));
        ASSERT(automation.recognizes(""0111""));
        ASSERT(automation.recognizes(""1000""));
        ASSERT(automation.recognizes(""1001""));
        ASSERT(!automation.recognizes(""1010""));
        ASSERT(!automation.recognizes(""1011""));
        ASSERT(automation.recognizes(""1100""));
        ASSERT(!automation.recognizes(""1101""));
        ASSERT(automation.recognizes(""1110""));
        ASSERT(automation.recognizes(""1111""));

        ASSERT(automation.recognizes(""00000""));
        ASSERT(automation.recognizes(""00001""));
        ASSERT(automation.recognizes(""00010""));
        ASSERT(automation.recognizes(""00011""));
        ASSERT(automation.recognizes(""00100""));
        ASSERT(!automation.recognizes(""00101""));
        ASSERT(automation.recognizes(""00110""));
        ASSERT(automation.recognizes(""00111""));
        ASSERT(automation.recognizes(""01000""));
        ASSERT(automation.recognizes(""01001""));
        ASSERT(!automation.recognizes(""01010""));
        ASSERT(!automation.recognizes(""01011""));
        ASSERT(automation.recognizes(""01100""));
        ASSERT(!automation.recognizes(""01101""));
        ASSERT(automation.recognizes(""01110""));
        ASSERT(automation.recognizes(""01111""));
        ASSERT(automation.recognizes(""10000""));
        ASSERT(automation.recognizes(""10001""));
        ASSERT(automation.recognizes(""10010""));
        ASSERT(automation.recognizes(""10011""));
        ASSERT(!automation.recognizes(""10100""));
        ASSERT(!automation.recognizes(""10101""));
        ASSERT(!automation.recognizes(""10110""));
        ASSERT(!automation.recognizes(""10111""));
        ASSERT(automation.recognizes(""11000""));
        ASSERT(automation.recognizes(""11001""));
        ASSERT(!automation.recognizes(""11010""));
        ASSERT(!automation.recognizes(""11011""));
        ASSERT(automation.recognizes(""11100""));
        ASSERT(!automation.recognizes(""11101""));
        ASSERT(automation.recognizes(""11110""));
        ASSERT(automation.recognizes(""11111""));

        ASSERT(automation.recognizes(""000000""));
        ASSERT(automation.recognizes(""000001""));
        ASSERT(automation.recognizes(""000010""));
        ASSERT(automation.recognizes(""000011""));
        ASSERT(automation.recognizes(""000100""));
        ASSERT(!automation.recognizes(""000101""));
        ASSERT(automation.recognizes(""000110""));
        ASSERT(automation.recognizes(""000111""));
        ASSERT(automation.recognizes(""001000""));
        ASSERT(automation.recognizes(""001001""));
        ASSERT(!automation.recognizes(""001010""));
        ASSERT(!automation.recognizes(""001011""));
        ASSERT(automation.recognizes(""001100""));
        ASSERT(!automation.recognizes(""001101""));
        ASSERT(automation.recognizes(""001110""));
        ASSERT(automation.recognizes(""001111""));
        ASSERT(automation.recognizes(""010000""));
        ASSERT(automation.recognizes(""010001""));
        ASSERT(automation.recognizes(""010010""));
        ASSERT(automation.recognizes(""010011""));
        ASSERT(!automation.recognizes(""010100""));
        ASSERT(!automation.recognizes(""010101""));
        ASSERT(!automation.recognizes(""010110""));
        ASSERT(!automation.recognizes(""010111""));
        ASSERT(automation.recognizes(""011000""));
        ASSERT(automation.recognizes(""011001""));
        ASSERT(!automation.recognizes(""011010""));
        ASSERT(!automation.recognizes(""011011""));
        ASSERT(automation.recognizes(""011100""));
        ASSERT(!automation.recognizes(""011101""));
        ASSERT(automation.recognizes(""011110""));
        ASSERT(automation.recognizes(""011111""));
        ASSERT(automation.recognizes(""100000""));
        ASSERT(automation.recognizes(""100001""));
        ASSERT(automation.recognizes(""100010""));
        ASSERT(automation.recognizes(""100011""));
        ASSERT(automation.recognizes(""100100""));
        ASSERT(!automation.recognizes(""100101""));
        ASSERT(automation.recognizes(""100110""));
        ASSERT(automation.recognizes(""100111""));
        ASSERT(!automation.recognizes(""101000""));
        ASSERT(!automation.recognizes(""101001""));
        ASSERT(!automation.recognizes(""101010""));
        ASSERT(!automation.recognizes(""101011""));
        ASSERT(!automation.recognizes(""101100""));
        ASSERT(!automation.recognizes(""101101""));
        ASSERT(!automation.recognizes(""101110""));
        ASSERT(!automation.recognizes(""101111""));
        ASSERT(automation.recognizes(""110000""));
        ASSERT(automation.recognizes(""110001""));
        ASSERT(automation.recognizes(""110010""));
        ASSERT(automation.recognizes(""110011""));
        ASSERT(!automation.recognizes(""110100""));
        ASSERT(!automation.recognizes(""110101""));
        ASSERT(!automation.recognizes(""110110""));
        ASSERT(!automation.recognizes(""110111""));
        ASSERT(automation.recognizes(""111000""));
        ASSERT(automation.recognizes(""111001""));
        ASSERT(!automation.recognizes(""111010""));
        ASSERT(!automation.recognizes(""111011""));
        ASSERT(automation.recognizes(""111100""));
        ASSERT(!automation.recognizes(""111101""));
        ASSERT(automation.recognizes(""111110""));
        ASSERT(automation.recognizes(""111111""));
    }

#pragma endregion TESTS

    // -------- –ö–æ–Ω–µ—Ü —Ç–µ—Å—Ç–∏—Ä—É—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π ----------

public:
    static void Test() {
        RUN_TEST(Test5thSymbolFromEndIs1);
        RUN_TEST(Test11After00);
        RUN_TEST(Test101NotInText);
    }
};

int main() {
    AutomationTester::Test();

    return 0;
}
"
AJeeERWK,Untitled,35657,C++,Tuesday 30th of April 2024 06:12:30 AM CDT,"#include <set>
#include <string>
#include <iostream>

using namespace std;


// –ß–µ–ª–æ–≤–µ–∫
class Person {
public:
    Person(string name, int age, string gender) : name_(name), age_(age), gender_(gender) {};

    string GetName() const {
        return name_;
    }
    int GetAge() const {
        return age_;
    }
    string GetGender() const {
        return gender_;
    }
    // –∏–∑–º–µ–Ω–∏–ª–∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª–µ–π –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º –∫–ª–∞—Å—Å–µ
    string name_;

protected:
    int age_;

private:
    string gender_;
};



// –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç. –ó–Ω–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
class Programmer : public Person {
public:
    Programmer(string name, int age, string gender) : Person(name, age, gender) {}; // –µ—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –∞ –µ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, —Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –µ–≥–æ

    void AddProgrammingLanguage(string language) {
        programming_languages_.insert(language);
    }
    bool CanProgram(string language) const {
        return programming_languages_.count(language);
    }

    // –¥–æ–±–∞–≤–∏–ª–∏ –º–µ—Ç–æ–¥–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—É –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –ø–æ–ª—è–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞
    void PrintName() const {
        cout << name_ << endl;
    }
    void PrintAge() const {
        cout << age_ << endl;
    }
    /*void PrintGender() const {
        cout << gender_ << endl;
    }*/

private:
    set<string> programming_languages_;
};


// –†–∞–±–æ—á–∏–π. –í–ª–∞–¥–µ–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è–º–∏
class Worker : public Person {
public:
    Worker(string name, int age, string gender) : Person(name, age, gender) {};

    void AddSpeciality(string speciality) {
        specialties_.insert(speciality);
    }
    bool HasSpeciality(string speciality) const {
        return specialties_.count(speciality);
    }

private:
    set<string> specialties_;
};

int main() {
    setlocale(LC_ALL, ""ru"");
    Programmer pr(""–ò–≤–∞–Ω"", 22, ""man"");
    Worker wk(""–ì–µ–Ω–∞"", 23, ""man"");

    // –ø–æ–ª–µ public
    //cout << pr.name_ << endl; // –¥–æ—Å—Ç—É–ø–Ω–æ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ –∫–æ–¥–∞ (—á–µ—Ä–µ–∑ —Ç–æ—á–∫—É)
    //cout << pr.GetName() << endl;// –º–æ–∂–µ–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞ (GetName())
    //pr.PrintName();// –º–æ–∂–µ–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ –¥–æ—á–µ—Ä–Ω–µ–≥–æ –∫–ª–∞—Å—Å–∞ (PrintName())

    // –ø–æ–ª–µ private
    //cout << pr.gender_ << endl; // –∑–¥–µ—Å—å –æ—à–∏–±–∫–∞ - –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ –∫–æ–¥–∞ (—á–µ—Ä–µ–∑ —Ç–æ—á–∫—É)
    //cout << pr.GetGender() << endl; //–º–æ–∂–µ–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞ (GetGender())
    //pr.PrintGender(); // –Ω–µ –º–æ–∂–µ–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ –¥–æ—á–µ—Ä–Ω–µ–≥–æ –∫–ª–∞—Å—Å–∞(PrintGender() –Ω–µ –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç)

    // –ø–æ–ª–µ protected
    //cout << pr.age_ << endl; // –∑–¥–µ—Å—å –æ—à–∏–±–∫–∞ - –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ –∫–æ–¥–∞ (—á–µ—Ä–µ–∑ —Ç–æ—á–∫—É)
    //cout << pr.GetAge() << endl;// –º–æ–∂–µ–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞ (GetAge())
    //pr.PrintAge();// –º–æ–∂–µ–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ –¥–æ—á–µ—Ä–Ω–µ–≥–æ –∫–ª–∞—Å—Å–∞(PrintAge())
}"
ubmpVnma,snowybot 30/4/2024 @9pm,coinwalk,JavaScript,Tuesday 30th of April 2024 06:01:27 AM CDT,"var olsenest = parseFloat(document.getElementById('pct_balance').value);
var monkey = 0.00001;
var dust = (monkey/2);
var bolux = monkey;
var tens = (monkey*10);
var hundreds = (monkey*20);
var sevens = (monkey*6.9);
var eights = (monkey*7.9);
var four = (monkey*4);
var olsen = 0;
var belance = olsenest;
var bill = olsenest;
var bekon = olsenest;
var belll = (olsenest*5);
var shit = olsenest;
var fovox = olsenest;
var oxen = ((Math.ceil(fovox/tens))*tens);
var silvery = olsenest;
var bob = false;
var stemp = (bolux*2.9);
var stemoise = (bolux*4.9);
jolly = (stemp+hundreds)
var smokey = (belance-silvery);
var snort = (smokey-stemoise);
var smack = (smokey-jolly);
var lumps = ((Math.floor(olsenest/tens))*tens);
var sever = (lumps+sevens);
var eye = (lumps+eights);
var samuel = (olsen-dust);
var frances = (olsen+dust);
var smaller = (silvery+tens);
 
function go(){
belance = document.getElementById('pct_balance').value;
var dog = Number((belance-olsenest).toFixed(8));
console.log(""profit"");
console.log(dog);
lumps = ((Math.floor(belance/tens))*tens);
sever = (lumps+sevens);
eye = (lumps+eights);
stemp = (bolux*2.9);
stemoise = (bolux*4.9);
jolly = (stemp+hundreds)
smokey = (belance-silvery);
snort = (smokey-stemoise);
smack = (smokey-jolly);
smaller = (silvery+tens);
samuel = (olsen-dust);
frances = (olsen+dust);
if ((belance>samuel)&&(belance<frances)){
bob = true;
}
if (belance<samuel){
bob = false;
}
if (belance>frances){
bob = false;
}
if ((belance>sever)&&(belance<eye)&&(!bob)){
    bolux = bolux*2;
    olsen = parseFloat(belance);
}
if ((smack<=0)&&(belance<sever)){
    bolux = monkey;
    olsen = 0;
    silvery = parseFloat(belance);
}
if ((snort<=0)&&(belance>=smaller)&&(belance<sever)){
    bolux = monkey;
    olsen = 0;
    silvery = parseFloat(belance);
}
if (belance>=1440){
console.log(""winner winner chicken dinner"");
return;
}
$('#pct_chance').val(49.5);
$('#pct_bet').val(((bolux*1).toFixed(8)));
$('#a_lo').click();
setTimeout(() => go(), 350);
}
go();
"
KAWqUNVK,data912,TestGuy1,JSON,Tuesday 30th of April 2024 06:00:05 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: 'd96c5c772f4bb76683f2f5eea17ac55d172fffb354655f39383f2b22391b42f00cd4f5a6d59daf81c816a30309e72e20f4a1f7f8038c21caac334a457794c2f24e787a65d5e79671566d760ead61c93272ddedc447abb4f36537820da33f5cc0da3a2d403d2384a6de64eb81e26ae81b42b01ef52faa848f7839b94c279bac7b',
  otherdata: [
    '9e52ac13e7da0c3632f1ead5eaf29379',
    '1c616571f5dc22970c28ddf22b24f68f',
    'dba91aea8e5a812621109c4949cc72d0',
    '8a48331088c7d39f4e5489a711699880',
    'a6d16c0506aa470a7dd58e6404cfdf91',
    'ecd1478263eca51d6764ebf6e3898c73',
    '9c91fb42f2459448984dc2231eb4d2de',
    '4a2de3b93feb62f2e556c204b2fe6457'
  ]
}"
WWZ0zCQG,Untitled,35657,C++,Tuesday 30th of April 2024 05:55:48 AM CDT,"#include <set>
#include <string>
#include <iostream>

using namespace std;


// —Ñ–∏–≥—É—Ä–∞
class Shape {

public:

	string GetColor() {
		return color_;
	}

	void SetColor(string color) {
		color_ = color;
	}

private:
	string color_ = ""black"";
};


// –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
class Rectangle : public Shape {

public:
	Rectangle(double a, double b) : a_(a), b_(b) {}

	double GetArea() {
		return a_ * b_;
	}

private:
	double a_;
	double b_;
};

// —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫
class Triangle : public Shape {

public:
	Triangle(double a, double b, double c) : a_(a), b_(b), c_(c) {}

	double GetArea() {
		double p = (a_ + b_ + c_) / 2;
		return sqrt(p * (p - a_) * (p - b_) * (p - c_));
	}

private:
	double a_;
	double b_;
	double c_;
};

int main() {
   
	Rectangle rec(4, 5);
	Triangle tr(3, 4, 3);

	cout << tr.GetArea() << endl;
	cout << rec.GetArea() << endl;

	cout << rec.GetColor() << endl;
	rec.SetColor(""white"");
	cout << rec.GetColor() << endl;
}"
F4iDVZQE,test,nicolaslagios,JavaScript,Tuesday 30th of April 2024 05:34:40 AM CDT,"/* general javascript */
    
    //wpml main menu language switcher
	var grlang = document.querySelectorAll(""a[title='GR']"")[0];
	var grhref = grlang.attributes[1].value;
	var enlang = document.querySelectorAll(""a[title='EN']"")[0];
	var enhref = enlang.attributes[1].value;
	grlang.attributes[0].value = 'EN';
	grlang.childNodes[0].innerText = 'EN';
	grlang.attributes[1].value = enhref;
	enlang.attributes[0].value = 'GR';
	enlang.childNodes[0].innerText = 'GR';
	enlang.attributes[1].value = grhref;


/* javascript specific code */
    
    /* Register Interest English */
    document.addEventListener('DOMContentLoaded', function () {
        if (window.location.href.includes('/en/register-interest/')) { //check if is the english interest page
            
            /* Sector (Brand Profile Categories) duplication for Salesforce (send hidden sector to salesforce) */
                // ta checkboxes
                const list1 = document.getElementById('wpforms-1386-field_20');
                const list2 = document.getElementById('wpforms-1386-field_37');
                const items1 = list1.querySelectorAll('li input[type=""checkbox""]');
                const items2 = list2.querySelectorAll('li input[type=""checkbox""]');

                list1.addEventListener('change', function(event) { //listener gia thn public list
                    const targetCheckbox = event.target;
                    const index = Array.from(items1).indexOf(targetCheckbox);
                    if (index !== -1) {
                        items2[index].checked = targetCheckbox.checked;
                    }
                });

                list2.addEventListener('change', function(event) { //listener gia thn hidden list
                    const targetCheckbox = event.target;
                    const index = Array.from(items2).indexOf(targetCheckbox);
                    if (index !== -1) {
                        items1[index].checked = targetCheckbox.checked;
                    }
                });

            /* Add user IP to IP Hidden Field for Salesforce */
                function userIPField(){
                        const inputField = document.querySelector('#wpforms-1386-field_36-container > input'); //field input
                        function getUserIP(onSuccess, onError) { //fetch the ip
                            fetch('https://api.ipify.org?format=json')
                            .then(response => response.json())
                            .then(data => {
                                const ipAddress = data.ip || '0.0.0.0';
                                onSuccess(ipAddress);
                            })
                            .catch(error => {
                                console.error('Error fetching IP address:', error);
                                if (onError) {
                                    onError(error);
                                }
                            });
                        }
                        getUserIP(function(ipAddress) {
                            if(ipAddress) {
                                //console.log('User IP:', ipAddress);
                                if (inputField) {
                                    inputField.value = ipAddress;
                                } else {
                                    console.error('Input field not found');
                                }
                            } else {
                                console.log('Unable to determine user ip.');
                            }
                        });
                }
                userIPField();
        
            /* Add user Country to Country Hidden Field for Salesforce */
                function userCountryField(){
                        const inputField = document.querySelector('#wpforms-1386-field_35-container > input'); //field input
                        function getUserCountry(callback) { //fetch the country
                            fetch('https://ipapi.co/json/')
                            .then(response => response.json())
                            .then(data => {
                                const country = data.country_name;
                                callback(country);
                            })
                            .catch(error => {
                                console.error('Error fetching user country:', error);
                                callback(null);
                            });
                        }
                        getUserCountry(function(country) {
                            if(country) {
                                //console.log('User country:', country);
                                if (inputField) {
                                    inputField.value = country;
                                } else {
                                    console.error('Input field not found');
                                }
                            } else {
                                console.log('Unable to determine user country.');
                            }
                        });
                }
                userCountryField();
        }
    });

    /* News - Media Page JS */
    document.addEventListener('DOMContentLoaded', function () {
        if (window.location.href.includes(""/en/news-media/"")) { //Œ±ŒΩ ŒµŒØŒΩŒ±Œπ Œ∑ Œ±Œ≥Œ≥ŒªŒπŒ∫ŒÆ news media
			var targetElement = document.querySelector(""#e-n-tabs-title-7942"");
			targetElement.addEventListener('click', function () {
						document.getElementsByClassName('elementor-heading-title')[0].innerText = 'MEDIA KIT';
						var element = document.querySelector('.blog .elementor-element-e7443a4 > .e-con-inner');
			});
			var resetElement = document.querySelector(""#e-n-tabs-title-7941"");
			resetElement.addEventListener('click', function () {
				document.getElementsByClassName('elementor-heading-title')[0].innerText = 'NEWS & MEDIA';
			});
		} else if (window.location.href.includes(""/news-media/"")) { //Œ±ŒΩ ŒµŒØŒΩŒ±Œπ Œ∑ ŒµŒªŒªŒ∑ŒΩŒπŒ∫ŒÆ news media
			var targetElement = document.querySelector(""#e-n-tabs-title-7942"");
			targetElement.addEventListener('click', function () {
						document.getElementsByClassName('elementor-heading-title')[0].innerText = 'MEDIA KIT';
						var element = document.querySelector('.blog .elementor-element-e7443a4 > .e-con-inner');
			});
			var resetElement = document.querySelector(""#e-n-tabs-title-7941"");
			resetElement.addEventListener('click', function () {
				document.getElementsByClassName('elementor-heading-title')[0].innerText = 'ŒùŒïŒë';
			});
		}

        if (window.location.href.includes(""/news-media/"")) { //ŒµŒØœÑŒµ ŒµŒªŒªŒ∑ŒΩŒπŒ∫ŒÆ ŒµŒØœÑŒµ Œ±Œ≥Œ≥ŒªŒπŒ∫ŒÆ news media
            
            //Œ±ŒªŒªŒ±Œ≥ŒÆ œÄŒªŒ¨œÑŒøœÖœÇ œÄŒµœÅŒπŒµœáŒøŒºŒ≠ŒΩŒøœÖ 2Œ∑œÇ Œ∫Œ±œÅœÑŒ≠ŒªŒ±œÇ
            var targetElement = document.querySelector(""#e-n-tabs-title-7942"");
            targetElement.addEventListener('click', function () {
                    if (window.matchMedia(""(min-width: 768px)"").matches) {
                        var element = document.querySelector('.blog .elementor-element-e7443a4 > .e-con-inner');
                        if (element.style.minWidth === ""100%"") {
                            element.style.minWidth = """";
                        } else {
                            element.style.minWidth = ""100%"";
                        }
                    }
            });
            var resetElement = document.querySelector(""#e-n-tabs-title-7941"");
            resetElement.addEventListener('click', function () {
                var element = document.querySelector('.blog .elementor-element-e7443a4 > .e-con-inner');
                element.style.minWidth = """";
            });

            //mapping Œ∑ŒºŒµœÅŒøŒºŒ∑ŒΩŒØŒ±œÇ
            document.querySelectorAll("".blog .elementor-post-date"").forEach(function(dateElement) {
                var currentDate = dateElement.innerText.trim();
                var mhnes = [""January"", ""February"", ""March"", ""April"", ""May"", ""June"", ""July"", ""August"", ""September"", ""October"", ""November"", ""December""];
                var mhnesGreek = [""ŒôŒ±ŒΩŒøœÖŒ±œÅŒØŒøœÖ"", ""Œ¶ŒµŒ≤œÅŒøœÖŒ±œÅŒØŒøœÖ"", ""ŒúŒ±œÅœÑŒØŒøœÖ"", ""ŒëœÄœÅŒπŒªŒØŒøœÖ"", ""ŒúŒ±ŒêŒøœÖ"", ""ŒôŒøœÖŒΩŒØŒøœÖ"", ""ŒôŒøœÖŒªŒØŒøœÖ"", ""ŒëœÖŒ≥ŒøœçœÉœÑŒøœÖ"", ""Œ£ŒµœÄœÑŒµŒºŒ≤œÅŒØŒøœÖ"", ""ŒüŒ∫œÑœâŒ≤œÅŒØŒøœÖ"", ""ŒùŒøŒµŒºŒ≤œÅŒØŒøœÖ"", ""ŒîŒµŒ∫ŒµŒºŒ≤œÅŒØŒøœÖ""];
        
                for (var i = 0; i < mhnes.length; i++) {
                    if (currentDate.includes(mhnesGreek[i])) {
                        var dateParts = currentDate.split("" "");
                        var day = dateParts[0];
                        var month = (i + 1).toString().padStart(2, '0');
                        var year = dateParts[2];
                        var formattedDate = day + '/' + month + '/' + year;
                        dateElement.innerText = formattedDate;
                        break;
                    }
                    if (currentDate.includes(mhnes[i])) {
                        var englishDate = new Date(currentDate);
                        var day = englishDate.getDate().toString().padStart(2, '0');
                        var month = (englishDate.getMonth() + 1).toString().padStart(2, '0');
                        var year = englishDate.getFullYear();
                        var formattedDate = day + '/' + month + '/' + year;
                        dateElement.innerText = formattedDate;
                        break;
                    }
                }
            });

        }
    });

    /* Single Post Page JS */
    document.addEventListener('DOMContentLoaded', function () {
        if (document.body.classList.contains(""single-post"")) {
            
            //Œ∫œÅœçœàŒπŒºŒø œÑŒøœÖ œÑœÅŒ≠œáŒøŒΩœÑŒøœÇ Œ¨œÅŒ∏œÅŒøœÖ
            let postID = document.getElementsByClassName(""single"")[0].classList[3].split(""-"").pop();
			let elements = document.getElementsByClassName('elementor-grid-item');
			for (let i = 0; i < elements.length; i++) {
				let elementID = elements[i].classList[2].split(""-"").pop();

				if (elementID === postID) {
					elements[i].style.display = 'none';
				}
			}

        }
    });"
GQqCJPc3,MO,Kambarych,C++,Tuesday 30th of April 2024 05:28:33 AM CDT,"#include <bits/stdc++.h>

using namespace std;

#define For(i, n)           for(int i = 0; i < n; ++i)
#define all(x)              (x).begin(),(x).end()
#define rall(x)             (x).rbegin(),(x).rend()
#define ls(x)               x+x+1
#define rs(x)               x+x+2
// #define endl                '\n'

#define ld                  long double
#define pii                 pair<int, int>
#define vt                  vector
#define ll                  long long

#define sim template < class c
#define ris return * this
#define dor > debug & operator <<
#define eni(x) sim > typename \
enable_if<sizeof dud<c>(0) x 1, debug&>::type operator<<(c i) {
sim > struct rge { c b, e; };
sim > rge<c> range(c i, c j) { return rge<c>{i, j}; }
sim > auto dud(c* x) -> decltype(cerr << *x, 0);
sim > char dud(...);
#define LOCAL
struct debug {
#ifdef LOCAL
~debug() { cerr << endl; }
eni(!=) cerr << boolalpha << i; ris; }
eni(==) ris << range(begin(i), end(i)); }
sim, class b dor(pair < b, c > d) {
ris << ""("" << d.first << "", "" << d.second << "")"";
}
sim dor(rge<c> d) {
*this << ""["";
for (auto it = d.b; it != d.e; ++it)
    *this << "", "" + 2 * (it == d.b) << *it;
ris << ""]"";
}
#else
sim dor(const c&) { ris; }
#endif
};
#define imie(...) "" ["" << #__VA_ARGS__ "": "" << (__VA_ARGS__) << ""] ""

template<typename T> void read(vt<T> & a) {For(i, a.size()) cin >> a[i];}
template<typename T> void read2(vt<vt<T> > & a) {For(i, a.size()) read(a[i]);}
template<typename T> void print(vt<T> & a) {For(i, a.size()) cout << a[i] << "" ""; cout << endl;}
template<typename T> void print2(vt<vt<T> > & a) {For(i, a.size()) print(a[i]);}

const int MAX = 1e9;
const int MOD = 1000000007;
const ll  INF = 1e18;
const ld  PI  = 3.14159265358979323846;

struct calculator {
    int ans = 0;
    int l = 0, r = -1;
    vt<int> pre, nxt;

    calculator() {}

    calculator(vt<int> _pre, vt<int> _nxt) {
        pre = _pre;
        nxt = _nxt;
    }

    void add_left() {
        ans += nxt[l - 1] > r;
        l--;
    }

    void add_right() {
        ans += pre[r + 1] < l;
        r++;
    }

    void remove_left() {
        ans -= nxt[l] > r;
        l++;
    }

    void remove_right() {
        ans -= pre[r] < l;
        r--;
    }
};

int block_size = 500;

struct MO {
    calculator c;

    MO () {}

    MO (calculator c) : c(c) {}

    struct Query {
        int l, r, idx;
        bool operator<(Query other) const {
            return make_pair(l / block_size, r) <
                make_pair(other.l / block_size, other.r);
        }
    };

    vt<int> solve(vt<Query> queries) {
        vt<int> answers(queries.size());
        sort(queries.begin(), queries.end());

        // invariant: data structure will always reflect the range [cur_l, cur_r]
        for (Query q : queries) {
            while (c.l > q.l) c.add_left();
            while (c.r < q.r) c.add_right();
            while (c.l < q.l) c.remove_left();
            while (c.r > q.r) c.remove_right();
            answers[q.idx] = c.ans;
        }

        return answers;
    }
};


void solve() {
    int n; cin >> n;
    vt<int> a(n); read(a);
    vt<int> pre(n, -1), nxt(n, n);
    unordered_map<int, int> mp;
    For(i, n) {
        if (mp.find(a[i]) != mp.end()) {
            pre[i] = mp[a[i]];
        }
        mp[a[i]] = i;
    }
    mp.clear();
    for (int i = n - 1; i >= 0; i--) {
        if (mp.find(a[i]) != mp.end()) {
            nxt[i] = mp[a[i]];
        }
        mp[a[i]] = i;
    }
    calculator c = calculator(pre, nxt);
    MO mo = MO(c);
    vt<MO::Query> queries;

    int q; cin >> q;
    For(i, q) {
        int l, r; cin >> l >> r; l--, r--;
        queries.push_back(MO::Query{l, r, i});
    }

    vt<int> ans = mo.solve(queries);
    For(i, q) {
        cout << ans[i] << endl;
    }
}

// THE SOLUTION IS ALWAYS SIMPLE
// THE CODE IS ALWAYS SHORT

int main() {
    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#ifdef DEBUG
    freopen(""output.txt"", ""w"", stdout);
    freopen(""input.txt"", ""r"", stdin);
#endif
    int T = 1;
    For(t, T) solve();
    return 0;
}"
Dwxz96wn,Untitled,35657,C++,Tuesday 30th of April 2024 05:01:23 AM CDT,"#include <set>
#include <string>
#include <iostream>

using namespace std;


// –ß–µ–ª–æ–≤–µ–∫
class Person {
public:
    Person(string name, int age, string gender) : name_(name), age_(age), gender_(gender) {};

    string GetName() const {
        return ""–ú–æ—ë –∏–º—è "" + name_;
    }
    int GetAge() const {
        return age_;
    }
    string GetGender() const {
        return gender_;
    }

private:
    string name_;
    int age_;
    string gender_;
};



// –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç. –ó–Ω–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
class Programmer : public Person {
public:
    Programmer(string name, int age, string gender) : Person(name, age, gender) {}; // –µ—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –∞ –µ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, —Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –µ–≥–æ

    void AddProgrammingLanguage(string language) {
        programming_languages_.insert(language);
    }
    bool CanProgram(string language) const {
        return programming_languages_.count(language);
    }

private:
    set<string> programming_languages_;
};


// –†–∞–±–æ—á–∏–π. –í–ª–∞–¥–µ–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è–º–∏
class Worker : public Person {
public:
    Worker(string name, int age, string gender) : Person(name, age, gender) {};

    void AddSpeciality(string speciality) {
        specialties_.insert(speciality);
    }
    bool HasSpeciality(string speciality) const {
        return specialties_.count(speciality);
    }

private:
    set<string> specialties_;
};

int main() {
    setlocale(LC_ALL, ""ru"");
    Programmer pr(""–ò–≤–∞–Ω"", 22, ""man"");
    Worker wk(""–ì–µ–Ω–∞"", 23, ""man"");
    pr.AddProgrammingLanguage(""Java"");
    cout << boolalpha << pr.CanProgram(""Java"") << endl;
    cout << pr.GetName() << "" "" << pr.GetAge() << endl;
    cout << wk.GetName() << "" "" << wk.GetAge() << endl;
}"
Y59amDTj,Untitled,35657,C++,Tuesday 30th of April 2024 05:00:54 AM CDT,"#include <set>
#include <string>
#include <iostream>

using namespace std;


// –ß–µ–ª–æ–≤–µ–∫
class Person {
public:
    Person(string name, int age, string gender) : name_(name), age_(age), gender_(gender) {};

    string GetName() const {
        return name_;
    }
    int GetAge() const {
        return age_;
    }
    string GetGender() const {
        return gender_;
    }

private:
    string name_;
    int age_;
    string gender_;
};



// –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç. –ó–Ω–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
class Programmer : public Person {
public:
    Programmer(string name, int age, string gender) : Person(name, age, gender) {}; // –µ—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –∞ –µ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, —Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –µ–≥–æ

    void AddProgrammingLanguage(string language) {
        programming_languages_.insert(language);
    }
    bool CanProgram(string language) const {
        return programming_languages_.count(language);
    }

private:
    set<string> programming_languages_;
};


// –†–∞–±–æ—á–∏–π. –í–ª–∞–¥–µ–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è–º–∏
class Worker : public Person {
public:
    Worker(string name, int age, string gender) : Person(name, age, gender) {};

    void AddSpeciality(string speciality) {
        specialties_.insert(speciality);
    }
    bool HasSpeciality(string speciality) const {
        return specialties_.count(speciality);
    }

private:
    set<string> specialties_;
};

int main() {
    Programmer pr(""Ivan"", 22, ""man"");
    Worker wk(""Gena"", 23, ""man"");
    pr.AddProgrammingLanguage(""Java"");
    cout << boolalpha << pr.CanProgram(""Java"") << endl;
    cout << pr.GetName() << "" "" << pr.GetAge() << endl; // –Ω–∞—Ä—è–¥—É —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏, –∫–ª–∞—Å—Å-–Ω–∞—Å–ª–µ–¥–Ω–∏–∫ –º–æ–∂–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–º–∏
    cout << wk.GetName() << "" "" << wk.GetAge() << endl;
}"
65crbvL8,Untitled,35657,C++,Tuesday 30th of April 2024 05:00:10 AM CDT,"
#include <set>
#include <string>

using namespace std;


// –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç. –ó–Ω–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
class Programmer {
public:
    Programmer(string name, int age, string gender) : name_(name), age_(age), gender_(gender) {};

    string GetName() const {
        return name_;
    }
    int GetAge() const {
        return age_;
    }
    string GetGender() const {
        return gender_;
    }

     void AddProgrammingLanguage(string language) {
        programming_languages_.insert(language);
    }
    bool CanProgram(string language) const {
        return programming_languages_.count(language);
    }

private:
    string name_;
    int age_;
    string gender_;
    set<string> programming_languages_;
};


// –†–∞–±–æ—á–∏–π. –í–ª–∞–¥–µ–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è–º–∏
class Worker {
public:
    Worker(string name, int age, string gender) : name_(name), age_(age), gender_(gender) {};

    string GetName() const {
        return name_;
    }
    int GetAge() const {
        return age_;
    }
    string GetGender() const {
        return gender_;
    }

    void AddSpeciality(string speciality) {
        specialties_.insert(speciality);
    }
    bool HasSpeciality(string speciality) const {
        return specialties_.count(speciality);
    }

private:
    string name_;
    int age_;
    string gender_;
    set<string> specialties_;
};"
wqzGD7UP,CRUD FastCreate deps,Ruslan_Rayanov,T-SQL,Tuesday 30th of April 2024 04:39:36 AM CDT,"CREATE PROCEDURE [dbo].[crud_deps_fastCreate]
	@filters CRUDFilterParameter READONLY,
	@text nvarchar(256),
	@username nvarchar(32)
AS
BEGIN
	-- —Å–æ–∑–¥–∞–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ –ø–æ 1 –ø–æ–ª—é @text

	-- –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ URL (–≤ —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –Ω–∞—à–∞ —Å—É—â–Ω–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π —Å—É—â–Ω–æ—Å—Ç–∏)
	--declare @filterItemID int
	--select @filterItemID = try_cast(Value as int) from @filters where [Key] = 'itemID'
	
	
	-- –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
	declare @id int
	select @id = id from hr_departments where code = @text or name = @text
	if(@id>0) begin
		select '–¢–∞–∫–æ–π –æ—Ç–¥–µ–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' Msg, 0 Result
		return 
	end


	-- –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü—É
	insert into hr_departments(name, code)
	values(@text, @text)
	select '–û—Ç–¥–µ–ª —Å–æ–∑–¥–∞–Ω' Msg, 1 Result

END
"
HCGNKT29,Untitled,35657,C++,Tuesday 30th of April 2024 04:15:51 AM CDT,"#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <string>
#include <fstream>
#include <filesystem>
#include <windows.h>


using namespace std;

void find_all(const string& find_name, const string& catalogue) {
	for (const auto& a : filesystem::directory_iterator(catalogue)) {
		string name = a.path().filename().string();
		string full_name = catalogue + '/' + name;
		if (name.find(find_name) != string::npos) {
			cout << full_name << endl;
		}
		if (filesystem::is_directory(full_name)) {
			find_all(find_name, full_name);
		}
	}
}

int main() {

	SetConsoleCP(1251); // —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ 1251 –≤ –ø–æ—Ç–æ–∫ –≤–≤–æ–¥–∞
	SetConsoleOutputCP(1251); // —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ 1251 –≤ –ø–æ—Ç–æ–∫ –≤—ã–≤–æ–¥–∞

	find_all(""–ó–∞–¥–∞–Ω–∏—è"", ""C:/Users/PC/Desktop/–û—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –°++"");
}
"
3vDzCWjs,Untitled,KoctrX,JavaScript,Tuesday 30th of April 2024 03:16:12 AM CDT,"const dataValueToUpdate = _.cloneDeep((blockPreset?.value?.data || [])).map(dataItem => {
                            let value = false;

                            for(const schema of blockPreset?.value?.schema || []) {
                                if(schema.type === 'image') {
                                    if(typeof dataItem[schema.key] === 'object') {
                                        const name = `${utils.uuidv4()}_uploading`;
                                        images.push({ file: dataItem[schema.key], name });

                                        dataItem[schema.key] = name;
                                    }
                                    
                                    value = dataItem;
                                } else {
                                    value = dataItem;
                                }
                            }
                            
                            return value;
                        });"
0HYZvGPD,Swimbot Error,swimmerhair,Python,Tuesday 30th of April 2024 01:56:38 AM CDT,"Traceback (most recent call last):
  File ""/home/pi/.local/lib/python3.9/site-packages/discord/ext/commands/bot.py"", line 939, in invoke
    await ctx.command.invoke(ctx)
  File ""/home/pi/.local/lib/python3.9/site-packages/discord/ext/commands/core.py"", line 863, in invoke
    await injected(*ctx.args, **ctx.kwargs)
  File ""/home/pi/.local/lib/python3.9/site-packages/discord/ext/commands/core.py"", line 85, in wrapped
    ret = await coro(*args, **kwargs)
  File ""/home/pi/Swimbot/whois.py"", line 211, in whois
    info = await COC.Player(user_input).info
  File ""/home/pi/Swimbot/COC.py"", line 35, in info
    elif r.status == 403: raise swimbot_utils.CoCForbidden
swimbot_utils.CoCForbidden
"
Gbr2fFp2,Hahsggsf,MildBba82,Bash,Tuesday 30th of April 2024 01:56:32 AM CDT,"#!/bin/bash

rm ~/x

echo ""Hello world!"""
d9uitEtd,tune,mathiaas,Lua,Tuesday 30th of April 2024 01:16:40 AM CDT,"-- About: This script is used for tuning ender chests to a certain channel

local args = {...}
local scriptName = ""tune""
dofile(""constants"")

if #args < 1 then
    print(""Usage: "" .. scriptName .. "" <channel>"")
    return
end

local success, data = turtle.inspect()
if not success or data.name ~= BLOCKS.enderChest.name then
    print(""Place an ender chest in front of the turtle"")
    return
end

local enderChest = peripheral.wrap(""front"")
if enderChest == nil then
    print(""Failed to connect to ender chest"")
    return
end

enderChest.setColors(unpack(COLOR_CHANNELS[args[1]]))
print(""Ender chest is now tuned to : '"" .. args[1] .. ""'"")"
bebXL3x9,Cross Linked List Implementataion of Matrix Multiplication,LambdaExpr_,C,Tuesday 30th of April 2024 12:58:04 AM CDT,"#include <stdio.h>
#include <stdlib.h>

typedef struct MatrixNode
{               //  matrix head   row head    column head    matrix node
    int row;    //  row count     row number  -1             row number
    int column; //  column count  -1          column number  column number
    int value;  //  node count    node count  node count     node value
    struct MatrixNode *right;
    struct MatrixNode *down;
} MatrixNode;

MatrixNode *newNode(int value);
void deleteNode(MatrixNode *this);
MatrixNode *modifyNode(MatrixNode *this, int new_value);

typedef MatrixNode *SparseMatrix;

SparseMatrix newSparseMatrix(int row, int col);
void deleteSparseMatrix(SparseMatrix this);
void MatrixInsertAdd(SparseMatrix this, int row, int col, int val);
SparseMatrix multiply(SparseMatrix this, SparseMatrix that);
SparseMatrix inputMatrix();

int main()
{
    SparseMatrix mat1 = inputMatrix();
    SparseMatrix mat2 = inputMatrix();

    SparseMatrix product = multiply(mat1, mat2);

    for (MatrixNode *row_it = product->down; row_it != product; row_it = row_it->down)
    {
        // printf(""row %d %d %d\n"", row_it->row, row_it->column, row_it->value);
        for (MatrixNode *col_it = row_it->right; col_it != row_it; col_it = col_it->right)
        {
            // printf(""col %d %d %d\n"", col_it->row, col_it->column, col_it->value);
            printf(""%d %d %d\n"", col_it->row, col_it->column, col_it->value);
        }
    }

    deleteSparseMatrix(mat1);
    deleteSparseMatrix(mat2);
    deleteSparseMatrix(product);
    return 0;
}

MatrixNode *newNode(int value)
{
    MatrixNode *node = (MatrixNode *)malloc(sizeof(MatrixNode));
    node->down = node->right = NULL;
    node->value = value;
    node->column = node->row = 0;
    return node;
}

MatrixNode *initNode(int row, int col, int value)
{
    MatrixNode *node = (MatrixNode *)malloc(sizeof(MatrixNode));
    node->row = row;
    node->column = col;
    node->value = value;
    node->right = node;
    node->down = node;
    return node;
}

void deleteNode(MatrixNode *this)
{
    if (this == NULL)
    {
        return;
    }
    free(this);
    this = NULL;
}

MatrixNode *modifyNode(MatrixNode *this, int new_value)
{
    if (this == NULL)
    {
        return NULL;
    }
    this->value = new_value;
    return this;
}

SparseMatrix newSparseMatrix(int row, int col)
{
    SparseMatrix matrix = initNode(row, col, 0);
    matrix->down = matrix->right = matrix;

    MatrixNode *itrator = matrix;
    for (int i = 0; i < col; ++i)
    {
        MatrixNode *col_head = initNode(-1, i, 0);
        col_head->down = col_head;
        col_head->right = matrix;
        itrator->right = col_head;
        itrator = itrator->right;
    }
    itrator = itrator->right;
    for (int i = 0; i < row; ++i)
    {
        MatrixNode *row_head = initNode(i, -1, 0);
        row_head->right = row_head;
        row_head->down = matrix;
        itrator->down = row_head;
        itrator = itrator->down;
    }
    itrator = itrator->down;
    return matrix;
}

void deleteSparseMatrix(SparseMatrix this)
{
    if (this == NULL)
    {
        return;
    }
    for (MatrixNode *p_col = this->right; p_col != this; p_col = p_col->right)
    {
        for (MatrixNode *p = p_col->down; p != p_col; p = p->down)
        {
            deleteNode(p);
        }
    }
    for (MatrixNode *p = this->right; p != this;)
    {
        MatrixNode *next = p->right;
        deleteNode(p);
        p = next;
    }
    for (MatrixNode *p = this->down; p != this;)
    {
        MatrixNode *next = p->down;
        deleteNode(p);
        p = next;
    }
    deleteNode(this);
}

void MatrixInsertAdd(SparseMatrix this, int row, int col, int val)
{
    // printf(""mat insert add\n"");
    if (this == NULL || row >= this->row || col >= this->column)
    {
        // printf(""here!!!\n"");
        return;
    }

    MatrixNode *row_head = this->down;
    // printf(""row head %d %d %d\n"", row_head->row, row_head->column, row_head->value);
    while (row_head->row < row)
    {
        row_head = row_head->down;
        // printf(""row head %d %d %d\n"", row_head->row, row_head->column, row_head->value);
    }
    MatrixNode *prow = row_head;
    // printf(""prow %d %d %d\n"", prow->row, prow->column, prow->value);
    while (prow->right->column >= 0 && prow->right->column <= col)
    {
        prow = prow->right;
        // printf(""prow %d %d %d\n"", prow->row, prow->column, prow->value);
    }

    MatrixNode *col_head = this->right;
    // printf(""col head %d %d %d\n"", col_head->row, col_head->column, col_head->value);
    while (col_head->column < col)
    {
        col_head = col_head->right;
        // printf(""col head %d %d %d\n"", col_head->row, col_head->column, col_head->value);
    }
    MatrixNode *pcol = col_head;
    // printf(""pcol %d %d %d\n"", pcol->row, pcol->column, pcol->value);
    while (pcol->down->row >= 0 && pcol->down->row <= row)
    {
        pcol = pcol->down;
        // printf(""pcol %d %d %d\n"", pcol->row, pcol->column, pcol->value);
    }

    if (prow == pcol)
    {
        // printf(""add\n\n"");
        prow->value += val;
        return;
    }

    MatrixNode *new_node = initNode(row, col, val);
    new_node->down = pcol->down;
    new_node->right = prow->right;
    pcol->down = new_node;
    prow->right = new_node;

    ++row_head->value;
    ++col_head->value;
    ++this->value;
    // printf(""insert\n\n"");
}

SparseMatrix multiply(SparseMatrix this, SparseMatrix that)
{
    if (this->column != that->row)
    {
        return NULL;
    }

    SparseMatrix product = newSparseMatrix(this->row, that->column);
    for (MatrixNode *it_row = this->down; it_row != this; it_row = it_row->down)
    {
        // printf(""it row %d %d %d\n"", it_row->row, it_row->column, it_row->value);
        for (MatrixNode *it_col = that->right; it_col != that; it_col = it_col->right)
        {
            // printf(""it col %d %d %d\n"", it_col->row, it_col->column, it_col->value);
            MatrixNode *multiplier = it_row->right;
            MatrixNode *multiplicant = it_col->down;
            for (int target_index = 0; target_index < this->column; ++target_index)
            {
                while (multiplier->column >= 0 && multiplier->column < target_index)
                {
                    // printf(""multiplier %d %d %d\n"", multiplier->row, multiplier->column, multiplier->value);
                    multiplier = multiplier->right;
                }
                while (multiplicant->row >= 0 && multiplicant->row < target_index)
                {
                    // printf(""multiplicant %d %d %d\n"", multiplicant->row, multiplicant->column, multiplicant->value);
                    multiplicant = multiplicant->down;
                }

                if (multiplier->column == multiplicant->row && multiplier->column != -1)
                {
                    // printf(""product at %d %d %d\n"", it_row->row, it_col->column,
                        //    multiplier->value * multiplicant->value);
                    MatrixInsertAdd(product, it_row->row, it_col->column,
                                    multiplier->value * multiplicant->value);
                    multiplier = multiplier->right;
                    multiplicant = multiplicant->down;
                }
            }
        }
    }
    return product;
}

SparseMatrix inputMatrix()
{
    int max_row, max_col;
    scanf(""%d%d"", &max_row, &max_col);
    SparseMatrix result = newSparseMatrix(++max_row, ++max_col);

    int row, col, val;
    scanf(""%d%d%d"", &row, &col, &val);
    while (row || col || val)
    {
        MatrixInsertAdd(result, row, col, val);
        scanf(""%d%d%d"", &row, &col, &val);
    }
    return result;
}
"
KDLwNMeK,interface ContactServerCommunication,GeorgePashev_88,Java,Tuesday 30th of April 2024 12:53:21 AM CDT,"package com.example.kontakti;

import okhttp3.OkHttpClient;
import retrofit2.Call;
import retrofit2.Response;
import retrofit2.Retrofit;
import retrofit2.converter.gson.GsonConverterFactory;

public interface ContactServerCommunication {
    public interface ShowMessage{
        public void Message(String message);
    }
    public default void APICallInsert(ContactAPI.contacts contact, ShowMessage message){
        Thread t = new Thread(()->{
            try{
                OkHttpClient client = new OkHttpClient.Builder().build();
                Retrofit retrofit =
                        new Retrofit.Builder()
                                .baseUrl(""http://10.0.0.13:4041"")
                                .addConverterFactory(
                                        GsonConverterFactory.create()
                                )
                                .client(client)
                                .build();
                ContactAPI api = retrofit.create(ContactAPI.class);

                Call<ContactAPI.contacts> insertedUser = api.api_add_user(contact);
                Response<ContactAPI.contacts> r = insertedUser.execute();
                if(r.isSuccessful()){
                    ContactAPI.contacts resp =r.body();
                    message.Message(""INSERTED IN SERVER WITH ID = ""+resp.ID);
                }

            }catch (Exception e){
                message.Message(""ERROR FROM SERVER: ""+e.getLocalizedMessage());

            }

        });
        t.start();

    }


}
"
wN3HfuN6,clipboard_manager,Python253,Python,Tuesday 30th of April 2024 12:29:38 AM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Filename: clipboard_manager.py
# Version: 1.0.0
# Author: Jeoi Reqi

""""""
This script provides a simple clipboard manager for managing clipboard operations on Windows systems.

Requirements:
- Python 3.x
- pyperclip library (install via pip: pip install pyperclip)

Usage:
1. Run the script in a Python environment.
2. Follow the prompts to perform clipboard operations.

Functions:
1. get_clipboard(): Retrieves the content of the clipboard.
2. set_clipboard(content): Sets the content of the clipboard to the specified value.
3. clear_clipboard_history(): Clears the Windows clipboard history.
4. view_clipboard_history(): Simulates Win + V to open the clipboard history menu.
5. main(): Provides a command-line interface for interacting with the clipboard manager.

Additional Notes:
- This script is designed for Windows systems.
- Ensure that the pyperclip library is installed before running the script.
- The clipboard history feature relies on the Windows clipboard history functionality.
- Use this script to conveniently manage clipboard content without navigating through system menus.
""""""

import pyperclip
import subprocess
import os
import sys
import ctypes

def get_clipboard():
    """"""Retrieve the content of the clipboard.""""""
    return pyperclip.paste()

def set_clipboard(content):
    """"""Set the content of the clipboard to the specified value.""""""
    pyperclip.copy(content)

def clear_clipboard_history():
    """"""Clears the Windows clipboard history.""""""
    command = 'Restart-Service -Name ""cbdhsvc*"" -Force'
    try:
        subprocess.run(['powershell', '-Command', command], check=True)
        print(""\nClipboard history cleared successfully!\n"")
    except subprocess.CalledProcessError as e:
        print(f""\nError:\n{e}\n"")

def view_clipboard_history():
    """"""Simulates Win + V to open the clipboard history menu.""""""
    ctypes.windll.user32.keybd_event(0x5B, 0, 0, 0)  # Press Win key
    ctypes.windll.user32.keybd_event(0x56, 0, 0, 0)  # Press V key
    ctypes.windll.user32.keybd_event(0x56, 0, 2, 0)  # Release V key
    ctypes.windll.user32.keybd_event(0x5B, 0, 2, 0)  # Release Win key
    
def main():
    """"""
    Provides a command-line interface for interacting with the clipboard manager.
    
    Displays a menu of available actions and prompts the user to make a selection.
    The function executes the corresponding action based on the user's choice.
    
    Actions:
    - 1. Get clipboard content: Retrieves and displays the current content of the clipboard.
    - 2. Set clipboard content: Prompts the user to enter new content to set in the clipboard.
    - 3. View clipboard history: Simulates the Win + V keyboard shortcut to open the clipboard history menu.
    - 4. Clear clipboard history: Clears the Windows clipboard history using PowerShell.
    - 5. Exit the program: Exits the clipboard manager application.
    
    Note:
    - The user's input is validated to ensure it corresponds to one of the available options.
    - Invalid input prompts the user to select a valid option.
    - Upon selecting an action, the function executes the corresponding operation and provides feedback to the user.
    - The program terminates upon selecting the ""Exit"" option.
    """"""
    print(""\t:: Welcome to Clipboard Manager ::\n\n"")
    print(""Select an action:\n"")
    print(""\t1. Get clipboard content"")
    print(""\t2. Set clipboard content"")
    print(""\t3. View clipboard history"")
    print(""\t4. Clear clipboard history"")
    print(""\t5. Exit the program"")

    choice = input(""\n\tEnter your selection (1-5): "")

    if choice == '1':
        clipboard_content = get_clipboard()
        print(""\nClipboard content:\n"", clipboard_content)
    elif choice == '2':
        new_content = input(""\nEnter the new content for the clipboard: "")
        set_clipboard(new_content)
        print(""\nClipboard content set successfully!\n"")
    elif choice == '3':
        print(""\nSimulating Win + V to Open the clipboard history...\n"")
        view_clipboard_history()
    elif choice == '4':
        print(""\nClearing the clipboard history...\n"")
        clear_clipboard_history()
    elif choice == '5':
        print(""\nExiting the program...\tGoodbye!\n"")
        sys.exit()
    else:
        print(""\nInvalid choice!\nPlease select a valid option (1, 2, 3, 4 or 5)\n"")

if __name__ == ""__main__"":
    main()

"
DbCfk3v9,patch-mtk7630.patch,kosmik2001,C++,Tuesday 30th of April 2024 12:26:47 AM CDT,"diff -Naru build_ax23-v1-ap-a/target/linux/generic/hack-6.1/940-net-dsa-mt7530-use-switch-MDIO-bus-for-PHY-muxing.patch build_ax23-v1-ap-b/target/linux/generic/hack-6.1/940-net-dsa-mt7530-use-switch-MDIO-bus-for-PHY-muxing.patch
--- build_ax23-v1-ap-a/target/linux/generic/hack-6.1/940-net-dsa-mt7530-use-switch-MDIO-bus-for-PHY-muxing.patch	1970-01-01 03:00:00.000000000 +0300
+++ build_ax23-v1-ap-b/target/linux/generic/hack-6.1/940-net-dsa-mt7530-use-switch-MDIO-bus-for-PHY-muxing.patch	2024-04-30 08:01:42.514810164 +0300
@@ -0,0 +1,29 @@
+From 5f94d7358cceda721983b29245010a9d4ab0c808 Mon Sep 17 00:00:00 2001
+From: =?UTF-8?q?Ar=C4=B1n=C3=A7=20=C3=9CNAL?= <arinc.unal@arinc9.com>
+Date: Sun, 28 Apr 2024 13:38:46 +0300
+Subject: [PATCH] net: dsa: mt7530: use switch MDIO bus for PHY muxing
+MIME-Version: 1.0
+Content-Type: text/plain; charset=UTF-8
+Content-Transfer-Encoding: 8bit
+
+Signed-off-by: Arƒ±n√ß √úNAL <arinc.unal@arinc9.com>
+---
+ drivers/net/dsa/mt7530.c | 2 +-
+ 1 file changed, 1 insertion(+), 1 deletion(-)
+
+diff --git a/drivers/net/dsa/mt7530.c b/drivers/net/dsa/mt7530.c
+index 7dc2f0ac8962..fa7a1ab292d2 100644
+--- a/drivers/net/dsa/mt7530.c
++++ b/drivers/net/dsa/mt7530.c
+@@ -2585,7 +2585,7 @@ mt7530_setup(struct dsa_switch *ds)
+ 			if (!phy_node)
+ 				continue;
+ 
+-			if (phy_node->parent == priv->dev->of_node->parent) {
++			if (phy_node->parent->parent == priv->dev->of_node) {
+ 				ret = of_get_phy_mode(mac_np, &interface);
+ 				if (ret && ret != -ENODEV) {
+ 					of_node_put(mac_np);
+-- 
+2.40.1
+
diff -Naru build_ax23-v1-ap-a/target/linux/ramips/dts/mt7621_mercusys_mr70x-v1.dts build_ax23-v1-ap-b/target/linux/ramips/dts/mt7621_mercusys_mr70x-v1.dts
--- build_ax23-v1-ap-a/target/linux/ramips/dts/mt7621_mercusys_mr70x-v1.dts	2024-02-24 01:30:57.232929535 +0300
+++ build_ax23-v1-ap-b/target/linux/ramips/dts/mt7621_mercusys_mr70x-v1.dts	2024-04-30 08:08:54.398642666 +0300
@@ -145,27 +145,48 @@
 	nvmem-cell-names = ""mac-address"";
 };
 
-&mdio {
-	ethphy0: ethernet-phy@0 {
-		reg = <0>;
-	};
-};
-
 &switch0 {
+	mdio {
+		#address-cells = <1>;
+		#size-cells = <0>;
+
+		ethphy0: ethernet-phy@0 {
+			reg = <0>;
+		};
+
+		ethphy1: ethernet-phy@1 {
+			reg = <1>;
+			interrupts = <1>;
+		};
+
+		ethphy2: ethernet-phy@2 {
+			reg = <2>;
+			interrupts = <2>;
+		};
+
+		ethphy3: ethernet-phy@3 {
+			reg = <3>;
+			interrupts = <3>;
+		};
+    };
+
 	ports {
 		port@1 {
 			status = ""okay"";
 			label = ""lan1"";
+			phy-handle = <&ethphy1>;
 		};
 
 		port@2 {
 			status = ""okay"";
 			label = ""lan2"";
+			phy-handle = <&ethphy2>;
 		};
 
 		port@3 {
 			status = ""okay"";
 			label = ""lan3"";
+			phy-handle = <&ethphy3>;
 		};
 	};
 };
diff -Naru build_ax23-v1-ap-a/target/linux/ramips/dts/mt7621_tplink_eap235-wall-v1.dts build_ax23-v1-ap-b/target/linux/ramips/dts/mt7621_tplink_eap235-wall-v1.dts
--- build_ax23-v1-ap-a/target/linux/ramips/dts/mt7621_tplink_eap235-wall-v1.dts	2024-02-24 01:30:57.240929468 +0300
+++ build_ax23-v1-ap-b/target/linux/ramips/dts/mt7621_tplink_eap235-wall-v1.dts	2024-04-30 08:13:31.371035141 +0300
@@ -189,27 +189,48 @@
 	nvmem-cell-names = ""mac-address"";
 };
 
-&mdio {
-	ethphy0: ethernet-phy@0 {
-		reg = <0>;
-	};
-};
-
 &switch0 {
+	mdio {
+		#address-cells = <1>;
+		#size-cells = <0>;
+
+		ethphy0: ethernet-phy@0 {
+			reg = <0>;
+		};
+
+		ethphy1: ethernet-phy@1 {
+			reg = <1>;
+			interrupts = <1>;
+		};
+
+		ethphy2: ethernet-phy@2 {
+			reg = <2>;
+			interrupts = <2>;
+		};
+
+		ethphy3: ethernet-phy@3 {
+			reg = <3>;
+			interrupts = <3>;
+		};
+    };
+
 	ports {
 		port@1 {
 			status = ""okay"";
 			label = ""lan3"";
+			phy-handle = <&ethphy1>;
 		};
 
 		port@2 {
 			status = ""okay"";
 			label = ""lan2"";
+			phy-handle = <&ethphy2>;
 		};
 
 		port@3 {
 			status = ""okay"";
 			label = ""lan1"";
+			phy-handle = <&ethphy3>;
 		};
 	};
 };"
GbFhCqu4,Sales Contracts,Kenjx,Python,Tuesday 30th of April 2024 12:13:46 AM CDT,"class SaleContracts(models.Model):
    _name = ""sales.contracts""
    _inherit = [""mail.thread"", ""mail.activity.mixin"", ""utm.mixin""]
    _order = ""id desc""

    @api.depends(""payments"")
    def get_payments_total(self):
        """"""Calculate total payments.""""""
        for rec in self:
            rec.payments_total = sum(line.amount for line in rec.payments)

    @api.depends(""payments"", ""amount"")
    def get_balance_total(self):
        """"""Calculate total balance.""""""
        for rec in self:
            rec.balance_total = rec.amount - rec.payments_total

            # Check status of the contract
            rec._check_contract_status()

    name = fields.Char(
        string=""Contract No."", readonly=True, required=True, copy=False, default=""New""
    )
    chassis_no = fields.Char(""Chassis No"")

    def create_im4_bill(self):
        """"""Create IM4 Bill.""""""
        for item in self:
            if not item.im4:
                continue

            return {
                ""view_id"": self.env.ref(""carbiz_client.vehicle_im7_clearance_form1"").id,
                ""view_mode"": ""form"",
                ""res_model"": ""carbiz.t1"",
                ""res_id"": item.im4.id,
                ""type"": ""ir.actions.act_window"",
                ""target"": ""new"",
                ""context"": self._context,
            }

    def add_im4(self):
        for item in self:
            # Skip if IM4 already exists
            if item.im4:
                _logger.info(""IM4 already exists, checking its state..."")
                if item.state_im4 == ""draft"":
                    _logger.info(""IM4 is in draft state..."")
                    context = dict(self._context or {})
                    return {
                        # 'view_type': 'form',
                        ""view_id"": self.env.ref(
                            ""carbiz_client.vehicle_im4_clearance_form1""
                        ).id,
                        ""view_mode"": ""form"",
                        ""res_model"": ""carbiz.t1"",
                        ""res_id"": item.im4.id,
                        ""type"": ""ir.actions.act_window"",
                        ""target"": ""new"",
                        ""context"": context,
                    }
                continue

            # Search for car_id
            car_id = self.env[""carbiz_erp.vehicle""].search(
                [(""product"", ""="", item.product_id.id)], limit=1
            )

            # Check for existing IM4
            existing_im4 = self.env[""carbiz.t1""].search(
                [(""car_id"", ""="", car_id.id), (""state_im7"", ""="", ""im4"")], limit=1
            )
            if existing_im4:
                item.im4 = existing_im4.id
                item.im4.add_im4()
                continue

            # If there's no existing IM4, check for IM7
            existing_im7 = self.env[""carbiz.t1""].search(
                [
                    (""car_id"", ""="", car_id.id),
                    (""state_im7"", ""not in"", (""expired"", ""im4"", ""cancel"")),
                ],
                limit=1,
            )
            if existing_im7:
                item.im4 = existing_im7.id
                return existing_im7.add_im4()

            # If there's no IM7 or IM4 record for this vehicle, raise an error
            raise UserError(
                _(""There's no IM7 or IM4 record for this vehicle!\n Something is wrong!"")
            )

    im4 = fields.Many2one(""carbiz.t1"", string=""IM4"")
    im4_bill = fields.Many2one(
        ""account.move"", string=""IM4 Bill"", related=""im4.im4_bill"", store=True
    )
    im4_bill_state = fields.Selection(
        related=""im4_bill.payment_state"", store=True, string=""IM4 Bill State""
    )

    state_im4 = fields.Selection(
        [
            (""draft"", ""Draft""),
            (""confirm"", ""Validated""),
            (""cancel"", ""Canceled""),
        ],
        string=""IM4 Status"",
        related=""im4.state_im4"",
        store=True,
    )

    model = fields.Many2one(""fleet.vehicle.model"", ""Model"")
    product_id = fields.Many2one(""product.product"", ""Vehicle"")
    reg_no = fields.Many2one(""fleet.vehicle"", ""Reg No"")
    sales_person = fields.Many2one(""res.users"", ""Salesperson"")
    reg_type = fields.Selection(
        [
            (""localuse"", ""Local Use""),
            (""reexport"", ""Re-export""),
            (""taxfree"", ""Tax Free""),
        ],
        default=""localuse"",
        string=""Registration Type"",
    )
    color = fields.Char(""Colour"")
    file_no = fields.Char(""Origin"")

    customer = fields.Many2one(""res.partner"", string=""Purchaser"")
    address = fields.Char(""City"")
    phone = fields.Char(""Phone"", related=""customer.phone"")
    po_box = fields.Char(""Street"", related=""customer.street"")
    country_id = fields.Many2one(""res.country"", string=""Country"")
    sales_order = fields.Many2one(""sale.order"", string=""Origin"")
    delivery_count = fields.Integer(related=""sales_order.delivery_count"", store=True)
    invoice_count = fields.Integer(related=""sales_order.invoice_count"", store=True)
    start_date =  fields.Date(""Installment Start Date"", default=fields.Date.today())

    def action_view_delivery(self):
        return self.sales_order.action_view_delivery()

    def action_view_invoice(self):
        return self.sales_order.action_view_invoice()

    @api.depends(""customer_bills"")
    def _compute_customer_bills_count(self):
        """"""Compute customer bills count.""""""
        account_move = self.env[""account.move""]
        for record in self:
            record.bills_count = account_move.search_count(
                [(""contract_id"", ""="", record.id), (""move_type"", ""="", ""out_invoice"")]
            )

    @api.depends(""payments"")
    def _compute_customer_payments_count(self):
        """"""Compute customer payments count.""""""
        account_payment = self.env[""account.payment""]
        for record in self:
            record.payments_count = account_payment.search_count(
                [(""contract_id"", ""="", record.id)]
            )

            record._compute_delivery_request()

    @api.depends(""down_payment"")
    def _compute_delivery_request(self):
        for rec in self:
            # Balance Before Delivery sum
            beforedelivery_payment_amounts = sum(
                line.amount
                for line in rec.payments.filtered(
                    lambda pay: pay.carbiz_payment_type == ""balbeforedelivery""
                )
            )
        
            # Down Payments
            down_payment_amounts = sum(
                line.amount
                for line in rec.payments.filtered(
                    lambda pay: pay.carbiz_payment_type == ""downpayment""
                )
            )
            rec.make_delivery = False
            
            # Check if the total amount lets to cause delivery
            if down_payment_amounts == rec.down_payment and  (rec.balance > 0 and beforedelivery_payment_amounts == rec.balance):
                rec.make_delivery = True            
            elif down_payment_amounts == rec.down_payment and not rec.balance:
                rec.make_delivery = True
                
                

            # Check the car status, if in bond or not
            picking = rec.product_id.stock_move_ids.filtered(
                lambda car: car.product_id == rec.product_id
                and car.state == ""done""
                and car.picking_code == ""outgoing""
            )

            if not len(picking) == 0:
                rec.make_delivery = False

    product_id = fields.Many2one(""product.product"", string=""Product"")
    amount = fields.Float(""Amount in Figures"")
    payments_total = fields.Float(""Amount Paid"", compute=get_payments_total, store=True)
    balance_total = fields.Float(
        ""Total Amount Outstanding"", compute=get_balance_total, store=True
    )
    amount_words = fields.Char(""Amount in Words"", tracking=True)
    down_payment = fields.Float(""Down Payment"")
    balance = fields.Float(""Amount Before Delivery"")
    days_balance = fields.Integer(""Days to clear balance"")
    balance_installment = fields.Float(""Installment Balance"")
    days_installment = fields.Integer(""Days to clear installments"")
    days = fields.Integer(""Days to clear installment"")
    date_delivery = fields.Date(""Final Day Delivery"")
    date_installment = fields.Date(""Final Day Installment"")
    no_install = fields.Integer(""No. of Installments"")
    installment_lines = fields.One2many(
        ""install.line"", ""contract_id"", string=""Installments""
    )
    customer_bills = fields.One2many(
        ""account.move"", ""contract_id"", string=""Customer Bills""
    )
    payment_lines = fields.One2many(
        ""contract.payment"", ""contract_id"", string=""Payments""
    )
    payments = fields.One2many(
        ""account.payment"",
        ""contract_id"",
        string=""Payments"",
        domain=[(""state"", ""="", ""posted"")],
    )
    payments_count = fields.Integer(compute=""_compute_customer_payments_count"")
    # bills_count = fields.Integer(compute=""_compute_customer_bills_count"")
    make_delivery = fields.Boolean(
        default=False, compute=""_compute_delivery_request"", store=True
    )
    assigned = fields.Boolean(default=False)
    is_other_existing_contract = fields.Boolean(default=False)

    state = fields.Selection(
        [
            (""draft"", ""Draft""),
            (""running"", ""Running""),
            (""completed"", ""Completed""),
            (""cancelled"", ""Cancelled""),
        ],
        default=""draft"",
        string=""State"",
    )

    def create_delivery(self):
        """"""Create a delivery on demand""""""
        for rec in self.sales_order.order_line:
            if rec.product_id == self.product_id:
                rec._action_launch_stock_rule()
                self.make_delivery = False

    @api.depends(""balance_total"")
    def _check_contract_status(self):
        for rec in self:
            if (
                rec.balance_total == 0
                and rec.payments_total == rec.amount
                and rec.state == ""running""
            ):
                rec.state = ""completed""

    # def create_customer_bills(self):
    #     for contract in self:
    #         invoice_line_vals = []
    #         invoice_line_vals.append((0, 0, {
    #             'product_id': contract.product_id.id,
    #             'price_unit': contract.amount,
    #             'tax_ids': False,
    #             # 'currency_id' : contract.billing_currency,
    #             'quantity': 1,
    #         }))

    #         invoice_vals = {
    #             'partner_id': contract.customer.id,
    #             'move_type': 'out_invoice',
    #             'invoice_date': date.today(),
    #             ""contract_id"": contract.id,
    #             'invoice_line_ids': invoice_line_vals
    #         }

    #         customer_bills = self.env['account.move'].create(invoice_vals)

    def show_bills(self):
        return {
            ""name"": ""Contracts"",
            ""domain"": [
                (""contract_id"", ""="", self.id),
                (""move_type"", ""="", ""out_invoice""),
            ],
            ""view_type"": ""form"",
            ""res_model"": ""account.move"",
            ""view_id"": False,
            ""view_mode"": ""tree,form"",
            ""type"": ""ir.actions.act_window"",
            ""context"": ""{'create': False}"",
        }

    def show_payments(self):
        return {
            ""name"": ""Payments"",
            ""domain"": [(""contract_id"", ""="", self.id)],
            ""view_type"": ""tree,form"",
            ""res_model"": ""account.payment"",
            ""view_id"": False,
            ""view_mode"": ""tree,form"",
            ""type"": ""ir.actions.act_window"",
            ""context"": ""{'create': False}"",
        }

    def show_deliveries(self):
        return {
            ""name"": ""Job Cards"",
            ""domain"": [(""contract_id"", ""="", self.id)],
            ""view_type"": ""form"",
            ""res_model"": ""rtt.jobcard"",
            ""view_id"": False,
            ""view_mode"": ""tree,form"",
            ""type"": ""ir.actions.act_window"",
            ""context"": ""{'create': False}"",
        }

    @api.model
    def create(self, vals):
        if vals.get(""name"", ""New"") == ""New"":
            vals[""name""] = (
                self.env[""ir.sequence""].next_by_code(""contract.sequence"") or ""New""
            )
        return super().create(vals)

    def receive_payment(self):
        pay_journals = self.env[""account.journal""].search(
            [(""type"", ""in"", (""bank"", ""cash""))], limit=1
        )
        for rec in self:
            context = dict(
                {
                    ""default_payment_type"": ""inbound"",
                    ""default_partner_type"": ""customer"",
                    ""default_ref"": rec.name,
                    ""default_date"": date.today(),
                    ""default_destination_account_id"": rec.customer.property_account_receivable_id.id,
                    ""default_journal_id"": pay_journals.id,
                    ""default_partner_id"": rec.customer.id,
                    ""default_currency_id"": rec.sales_order.currency_id.id,
                    ""default_carbiz_contract_payment"": True,
                    ""default_contract_id"": rec.id,
                }
            )

            return {
                ""name"": _(""Collect Payment""),
                ""view_id"": self.env.ref(""account.view_account_payment_form"").id,
                ""view_mode"": ""form"",
                ""res_model"": ""account.payment"",
                ""type"": ""ir.actions.act_window"",
                ""target"": ""new"",
                ""context"": context,
            }

    @api.onchange(""days_balance"", ""days_installment"")
    def update_dates(self):
        for rec in self:
            if rec.days_balance > 0:
                rec.date_delivery = date.today() + relativedelta(days=rec.days_balance)
            if rec.days_balance == 0:
                rec.date_delivery = date.today()
            if rec.days_installment:
                rec.date_installment = date.today() + relativedelta(
                    days=rec.days_installment
                )

    def start_contract(self):
        # fields_to_check = ['down_payment', 'days_installment', 'no_install', 'days_balance', 'balance']
        fields_to_check = [""balance"", ""days_balance""]

        for rec in self:
            # Car check in by contracts
            car_search_by_contract_ids = self.search(
                [
                    (""product_id"", ""="", rec.product_id.id),
                    (""id"", ""!="", self.id),
                    (""state"", ""="", ""running"")
                ]
            )

            if len(car_search_by_contract_ids) > 0:
                rec.is_other_existing_contract = True

            # Add chassis number
            # Search for car_id
            car_id = self.env[""carbiz_erp.vehicle""].search(
                [(""product"", ""="", rec.product_id.id)], limit=1
            )

            rec.chassis_no = car_id.name

            # For not-straightforward payment
            if not (rec.amount == rec.down_payment) and rec.balance_installment < 1:
                for field in fields_to_check:
                    if getattr(rec, field) < 1:
                        raise UserError(
                            _(
                                ""Provide the {} amount."".format(
                                    field.replace(""_"", "" "").capitalize()
                                )
                            )
                        )

            rec.state = ""running""
            if rec.balance_installment > 0:
                rec.compute_installments()
            rec._check_contract_status()  # Check if the contract is already fulfilled

    def cancel_contract(self):
        for rec in self:
            if rec.is_other_existing_contract:
                rec.is_other_existing_contract = False

            rec.state = ""cancelled""

    def reset_contract(self):
        for rec in self:
            rec.state = ""draft""

            # Clear payments information
            for payment in rec.payments:
                payment.action_draft()
                payment.action_cancel()
            rec.payments = [(6, 0, 0)]

    def auto_complete_contract(self):
        for rec in self:
            contract_records = self.env[""sales.contracts""].search([])
            for data in contract_records:
                if data.state == ""running"":
                    data.state = ""completed""

    @api.onchange(""amount"", ""down_payment"", ""balance"")
    def calc_balance(self):
        for rec in self:
            # if rec.down_payment != 0.0:
            rec.balance_installment = rec.amount - (rec.down_payment + rec.balance)

    def compute_installments(self):
        fields_to_check = [""days_installment"", ""no_install""]

        for rec in self:
            if not rec.start_date:
                raise UserError(""Please state the installment start date."") 
            
            # Validate first fields
            for field in fields_to_check:
                if getattr(rec, field) < 1:
                    raise UserError(
                        _(
                            ""Provide the {} amount."".format(
                                field.replace(""_"", "" "").capitalize()
                            )
                        )
                    )

            rec.installment_lines.unlink()

            interval = int(rec.days_installment / rec.no_install)
            amounts = rec.balance_installment / rec.no_install
            due_dates = [
                 rec.start_date + relativedelta(days=i * interval)
                for i in range(1, rec.no_install + 1)
            ]

            for due_date in due_dates:
                self.env[""install.line""].create(
                    {
                        ""name"": rec.product_id.name + ""-"" + str(due_date),
                        ""amount"": amounts,
                        ""balance"": amounts,
                        ""due_date"": due_date,
                        ""status"": ""pending"",
                        ""amount_paid"": 0.0,
                        ""contract_id"": rec.id,
                    }
                )
"
