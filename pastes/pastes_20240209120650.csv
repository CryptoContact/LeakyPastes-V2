id,title,username,language,date,content
CuQV6p2u,data835,TestGuy1,JSON,Friday 9th of February 2024 06:00:06 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '4748b010d73d9e76a6d38f783893862a617a343e02af01811db17418caae522e7394832918689d30a926a4e652e81c8b2a67872179980a5eda4bb4755738de8aa25810be80e0eaa139f789cd88e474b8560de0e091d18612ff25b3eaa942c8cdb098782f2ceec3beccef760abfafa1d387d50a001054fef85e5810bcf3829384',
  otherdata: [
    'f4f0617c8e2c1a616cb5ce93aa74cbbe',
    '71f1de45efab3ac121543ec61bbd5254',
    '217c41264fc62905a253e8973c0f2b19',
    'ca44beec3bbcf1c6c593fa7df6e5d762',
    '4c4ef49d4052e25611e328f09ebb24a0',
    '760aeac1f06dc00d0e052dce8157ffea',
    '72633f0eaa5a3696237f6885d020e07f',
    '9e22211f96abc5ae8af9c7c4ba638a7d'
  ]
}"
D95k2baF,04. Some Ordering,Spocoman,C++,Friday 9th of February 2024 05:53:15 AM CDT,"#include <iostream>
#include <string>
#include <memory>

using namespace std;

unique_ptr<char[]> transform(const char* text, const int& n, char (*transformFunc)(const char&)) {
	unique_ptr<char[]> result = make_unique<char[]>(n);

	for (int i = 0; i < n; i++) {
		result[i] = transformFunc(text[i]);
	}
	return result;
}

int main()
{
	string input;
	getline(cin, input);

	unique_ptr<char[]> lowerValue = transform(input.c_str(), input.length() + 1, [](const char& s) { return (char)tolower(s); });
	cout << lowerValue.get() << endl;

	unique_ptr<char[]> upperValue = transform(input.c_str(), input.length() + 1, [](const char& s) { return (char)toupper(s); });
	cout << upperValue.get() << endl;

	return 0;
}"
UwQsLwuY,Guessing Game in C,ValeriaD82,C,Friday 9th of February 2024 05:40:59 AM CDT,"#include <stdio.h>
int main() {
    int guess;
    while(scanf(""%d"",&guess) != EOF ) {
        if ( guess == 42 ) {
            printf(""Nice work!\n"");
            break;
        }
        else if ( guess < 42 ) 
            printf(""Too low - guess again\n"");
        else
            printf(""Too high - guess again\n"");
    }
} "
u30fFKXp,G2A.com Free Gift Card Guide Feb 2024,ounnuo,GetText,Friday 9th of February 2024 05:38:00 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
PDF guide here:
https://drive.google.com/file/d/120kXNJWM5T5u3PGlkQeZCo_nLxzQIlkf/view?usp=g2a_refund_exploit_519846.pdf
 
Working as of
09 February 2024"
xYHHspTX,Shopping Cart,SuperSonicBlast,Python,Friday 9th of February 2024 05:17:07 AM CDT,"""""""
Author: Anton Sanakoev
Project: Shopping Cart

Showing Creativity and Exceeding Requirements
Line 13: Actions string is generated dynamically based on an object of actions
Line 21: Menu formatting is enhanced for readability
Line 47: Printing '-empty-' when the cart is empty
""""""

print('Welcome to the Shopping Cart Program!')

actions = {
    1: 'Add item',
    2: 'View cart',
    3: 'Remove item',
    4: 'Compute total',
    5: 'Quit',
}

menu = '\n-[Please select one of the following]-'
for action in actions.items():
    menu += f'\n[{action[0]}] {action[1]}'

item_names = []
item_prices = []
currency = '$'

while True:
    print(menu)

    choice = int(input('\nPlease enter an action: '))

    match choice:
        case 1:
            item_name = str(input('\nWhat item would you like to add? ')).capitalize()
            item_names.append(item_name)

            item_price = round(float(input(f""What is the price of '{item_name}'? "")), 2)
            item_prices.append(item_price)

            print(f""'{item_name}' has been added to the cart."")
        case 2:
            print('\nThe contents of the shopping cart are:')
            
            if len(item_names) == 0:
                print('-empty-')
            else:
                for item_position, item_name in enumerate(item_names):
                    print(f'{item_position + 1}. {item_name} - {currency}{item_prices[item_position]:.2f}')
        case 3:
            remove_item_position = int(input('\nWhich item would you like to remove? ')) - 1

            if 0 <= remove_item_position < len(item_names):
                item_names.pop(remove_item_position)
                item_prices.pop(remove_item_position)

                print('Item removed.')
            else:
                print('Sorry, that is not a valid item number.')
        case 4:
            print(f'\nThe total price of the items in the shopping cart is {sum(item_prices):.2f}')        
        case 5:
            break
        case _:
            print('\nSorry, that is not a valid action')

print('\nThank you. Goodbye.')"
ySVGiCnZ,Untitled,zoltanleo,Pascal,Friday 9th of February 2024 04:56:12 AM CDT,"  with TDBEditEh(Sender) do
  begin
    if (Length(Trim(Text)) <= 3) then
    begin
      MRUList.CloseUp(True); //схлопываем MRU-лист
      MRUList.Active := False; //отключаем MRU-лист
      Exit; //уходим, т.к. не из чего выбирать или потенциально слишком большой выбор
    end;
  end;

  with TDBEditEh(Sender) do
  begin
    MRUList.Items.Clear; //чистим MRU-лист
    MRUList.Rows := 10; //показываем только 10 строк
    MRUList.Active:= True; //включаем MRU-лист
    MRUList.DroppedDown:= True;

    mds_mru.Filtered:= False;

    case MRUFilterSender of
      mfsLastName: FilterValue:= Format('(UPPER(ANKLASTNAME) LIKE UPPER(''%%%s%%''))',[UpperCase(Trim(EdtLastName.Text),loUserLocale)]);
      mfsFirstName: FilterValue:= Format('(UPPER(ANKFIRSTNAME) LIKE UPPER(''%%%s%%''))',[UpperCase(Trim(EdtFirstName.Text), loUserLocale)]);
      mfsThirdName: FilterValue:= Format('(UPPER(ANKTHIRDNAME) LIKE UPPER(''%%%s%%''))',[UpperCase(Trim(EdtThirdName.Text), loUserLocale)]);
    end;

    mds_mru.Filter:= FilterValue;
    mds_mru.Filtered:= True;

    if mds_mru.IsEmpty then Exit;

    i:= 0;
    mds_mru.First;

    while (not mds_mru.Eof or (i <= maxCount)) do
    begin
      case MRUFilterSender of
        mfsLastName:  MRUList.Add(Trim(mds_mru.FieldByName('ANKLASTNAME').AsString));
        mfsFirstName: MRUList.Add(Trim(mds_mru.FieldByName('ANKFIRSTNAME').AsString));
        mfsThirdName: MRUList.Add(Trim(mds_mru.FieldByName('ANKTHIRDNAME').AsString));
      end;

      Inc(i);
      mds_mru.Next;
    end;
"
UAkEqVcz,redpanda,jayhillx,Java,Friday 9th of February 2024 04:10:36 AM CDT,"package com.mysticsbiomes.common.animal;

import com.mysticsbiomes.init.MysticBlocks;
import com.mysticsbiomes.init.MysticEntities;
import net.minecraft.advancements.CriteriaTriggers;
import net.minecraft.core.BlockPos;
import net.minecraft.nbt.CompoundTag;
import net.minecraft.nbt.NbtUtils;
import net.minecraft.network.syncher.EntityDataAccessor;
import net.minecraft.network.syncher.EntityDataSerializers;
import net.minecraft.network.syncher.SynchedEntityData;
import net.minecraft.server.level.ServerLevel;
import net.minecraft.server.level.ServerPlayer;
import net.minecraft.stats.Stats;
import net.minecraft.util.ByIdMap;
import net.minecraft.util.RandomSource;
import net.minecraft.util.StringRepresentable;
import net.minecraft.world.DifficultyInstance;
import net.minecraft.world.InteractionHand;
import net.minecraft.world.damagesource.DamageSource;
import net.minecraft.world.entity.*;
import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
import net.minecraft.world.entity.ai.attributes.Attributes;
import net.minecraft.world.entity.ai.control.LookControl;
import net.minecraft.world.entity.ai.control.MoveControl;
import net.minecraft.world.entity.ai.goal.*;
import net.minecraft.world.entity.ai.targeting.TargetingConditions;
import net.minecraft.world.entity.animal.*;
import net.minecraft.world.entity.item.ItemEntity;
import net.minecraft.world.entity.player.Player;
import net.minecraft.world.item.ItemStack;
import net.minecraft.world.item.Items;
import net.minecraft.world.item.crafting.Ingredient;
import net.minecraft.world.level.GameRules;
import net.minecraft.world.level.Level;
import net.minecraft.world.level.ServerLevelAccessor;
import net.minecraft.world.level.block.Blocks;
import net.minecraft.world.level.block.state.BlockState;
import net.minecraftforge.common.MinecraftForge;
import net.minecraftforge.event.entity.living.BabyEntitySpawnEvent;

import javax.annotation.Nullable;
import java.util.EnumSet;
import java.util.Optional;
import java.util.UUID;

public class RedPanda extends Animal {
    private static final EntityDataAccessor<Byte> DATA_TRAIT_ID = SynchedEntityData.defineId(RedPanda.class, EntityDataSerializers.BYTE);
    private static final EntityDataAccessor<Byte> DATA_HIDDEN_TRAIT_ID = SynchedEntityData.defineId(RedPanda.class, EntityDataSerializers.BYTE);
    private static final EntityDataAccessor<Byte> DATA_QUIRK_ID = SynchedEntityData.defineId(RedPanda.class, EntityDataSerializers.BYTE);
    private static final EntityDataAccessor<Byte> DATA_FLAGS_ID = SynchedEntityData.defineId(RedPanda.class, EntityDataSerializers.BYTE);
    private static final EntityDataAccessor<Optional<UUID>> DATA_TRUSTED_ID = SynchedEntityData.defineId(RedPanda.class, EntityDataSerializers.OPTIONAL_UUID);
    public final AnimationState idleAnimationState = new AnimationState();
    public final AnimationState sleepingAnimationState = new AnimationState();

    public RedPanda(EntityType<? extends RedPanda> type, Level level) {
        super(type, level);
        this.moveControl = new RedPandaMoveControl();
        this.lookControl = new RedPandaLookControl();
        //this.setCanPickUpLoot(!this.isBaby());
    }

    protected void defineSynchedData() {
        super.defineSynchedData();
        this.entityData.define(DATA_TRAIT_ID, (byte)0);
        this.entityData.define(DATA_HIDDEN_TRAIT_ID, (byte)0);
        this.entityData.define(DATA_QUIRK_ID, (byte)0);
        this.entityData.define(DATA_FLAGS_ID, (byte)0);
        this.entityData.define(DATA_TRUSTED_ID, Optional.empty());
    }

    protected void registerGoals() {
        this.goalSelector.addGoal(0, new PanicGoal(this, 2.0));
        this.goalSelector.addGoal(1, new RedPandaBreedGoal(1.0));
        this.goalSelector.addGoal(1, new MeleeAttackGoal(this, 1.2F, true));
        this.goalSelector.addGoal(3, new TemptGoal(this, 1.0, Ingredient.of(Blocks.BAMBOO.asItem()), false));
        this.goalSelector.addGoal(4, new AvoidEntityGoal<>(this, Player.class, 6.0F, 1.6, 2.5, (entity) -> {
            boolean flag = EntitySelector.NO_CREATIVE_OR_SPECTATOR.test(entity) && !this.trusts(entity.getUUID()) && entity.isSprinting();
            this.setSprinting(flag);
            return flag;
        }));
        this.goalSelector.addGoal(5, new SleepGoal());
        this.goalSelector.addGoal(6, new LookAtPlayerGoal(this, Player.class, 6.0F));
        this.goalSelector.addGoal(7, new RandomLookAroundGoal(this));
        this.goalSelector.addGoal(8, new FollowParentGoal(this, 1.25));
        this.goalSelector.addGoal(9, new WaterAvoidingRandomStrollGoal(this, 1.0));
    }

    public static AttributeSupplier.Builder createAttributes() {
        return Mob.createMobAttributes().add(Attributes.MOVEMENT_SPEED, 0.125F).add(Attributes.MAX_HEALTH, 10.0D).add(Attributes.FOLLOW_RANGE, 32.0D).add(Attributes.ATTACK_DAMAGE, 8.0D);
    }

    public SpawnGroupData finalizeSpawn(ServerLevelAccessor accessor, DifficultyInstance instance, MobSpawnType type, @Nullable SpawnGroupData data, @Nullable CompoundTag tag) {
        return super.finalizeSpawn(accessor, instance, type, data, tag);
    }

    @Nullable
    public RedPanda getBreedOffspring(ServerLevel level, AgeableMob mob) {
        RedPanda redPanda = MysticEntities.RED_PANDA.get().create(level);
        if (redPanda != null) {
            redPanda.setTrait(this.random.nextBoolean() ? this.getVariant() : ((RedPanda)mob).getVariant());
        }
        return redPanda;
    }

    protected void onOffspringSpawnedFromEgg(Player player, Mob mob) {
        ((RedPanda)mob).addTrustedPlayer(player.getUUID());
    }

    protected float getStandingEyeHeight(Pose pose, EntityDimensions dimensions) {
        return this.isBaby() ? dimensions.height * 0.85F : 0.4F;
    }

    ///////////////////////////////////////////////////////////////////////////

    @Override
    public void addAdditionalSaveData(CompoundTag tag) {
        super.addAdditionalSaveData(tag);
        tag.putString(""Trait"", this.getTrait().getSerializedName());
        tag.putString(""HiddenTrait"", this.getHiddenTrait().getSerializedName());
        tag.putString(""Quirk"", this.getQuirk().getSerializedName());
        tag.putBoolean(""Sleeping"", this.isSleeping());

        if (this.getTrustedPlayer() != null) {
            tag.put(""Trusted"", NbtUtils.createUUID(this.getTrustedPlayer()));
        }
    }

    @Override
    public void readAdditionalSaveData(CompoundTag tag) {
        super.readAdditionalSaveData(tag);
        this.setTrait(Trait.byName(tag.getString(""Trait"")));
        this.setHiddenTrait(Trait.byName(tag.getString(""HiddenTrait"")));
        this.setQuirk(Quirk.byName(tag.getString(""Quirk"")));
        this.setSleeping(tag.getBoolean(""Sleeping""));

        if (tag.contains(""Trusted"")) {
            this.addTrustedPlayer(NbtUtils.loadUUID(tag.get(""Trusted"")));
        }
    }

    // TRAITS

    public Trait getTrait() {
        return Trait.byId(this.entityData.get(DATA_TRAIT_ID));
    }

    public void setTrait(Trait trait) {
        this.entityData.set(DATA_TRAIT_ID, (byte)trait.getId());
    }

    public Trait getHiddenTrait() {
        return Trait.byId(this.entityData.get(DATA_HIDDEN_TRAIT_ID));
    }

    public void setHiddenTrait(Trait trait) {
        this.entityData.set(DATA_HIDDEN_TRAIT_ID, (byte)trait.getId());
    }

    public Trait getVariant() {
        return Trait.getTraitFromGenes(this.getTrait(), this.getHiddenTrait());
    }

    public boolean isClumsy() {
        return this.getTrait() == Trait.CLUMSY;
    }

    public boolean isGloomy() {
        return this.getTrait() == Trait.GLOOMY;
    }

    public boolean isWeak() {
        return this.getTrait() == Trait.WEAK;
    }

    public boolean isPlayful() {
        return this.getTrait() == Trait.PLAYFUL;
    }

    public boolean isCherry() {
        return this.getTrait() == Trait.CHERRY;
    }

    // QUIRKS

    public Quirk getQuirk() {
        return Quirk.byId(this.entityData.get(DATA_QUIRK_ID));
    }

    public void setQuirk(Quirk trait) {
        this.entityData.set(DATA_QUIRK_ID, (byte)trait.getId());
    }

    public boolean lovesSnow() {
        return this.getQuirk() == Quirk.LOVES_SNOW;
    }

    public boolean isLoyal() {
        return this.getQuirk() == Quirk.LOYAL;
    }

    public boolean isMischievous() {
        return this.getQuirk() == Quirk.MISCHIEVOUS;
    }

    public boolean isCurious() {
        return this.getQuirk() == Quirk.CURIOUS;
    }

    public boolean isClingy() {
        return this.getQuirk() == Quirk.CLINGY;
    }

    ///////////////////////////////////////////////////////////////////////////

    public boolean isSleeping() {
        return this.getFlag(2);
    }

    public void setSleeping(boolean sleeping) {
        this.setFlag(2, sleeping);
    }

    public void wakeUp() {
        this.setSleeping(false);
    }

    public boolean isStanding() {
        return this.getFlag(8);
    }

    public void setStanding(boolean sleeping) {
        this.setFlag(8, sleeping);
    }

    private boolean getFlag(int value) {
        return (this.entityData.get(DATA_FLAGS_ID) & value) != 0;
    }

    private void setFlag(int value, boolean b) {
        if (b) {
            this.entityData.set(DATA_FLAGS_ID, (byte)(this.entityData.get(DATA_FLAGS_ID) | value));
        } else {
            this.entityData.set(DATA_FLAGS_ID, (byte)(this.entityData.get(DATA_FLAGS_ID) & ~value));
        }
    }

    ///////////////////////////////////////////////////////////////////////////

    private UUID getTrustedPlayer() {
        return this.entityData.get(DATA_TRUSTED_ID).orElse(null);
    }

    private void addTrustedPlayer(UUID uuid) {
        this.entityData.set(DATA_TRUSTED_ID, Optional.ofNullable(uuid));
    }

    private boolean trusts(UUID uuid) {
        return this.getTrustedPlayer() == uuid;
    }

    ///////////////////////////////////////////////////////////////////////////

    @Override
    public void tick() {
        super.tick();
        if (this.isEffectiveAi()) {
            boolean flag = this.isInWater();

            if (flag && this.isSleeping()) {
                this.setSleeping(false);
            }
        }

        this.setStanding(this.walkAnimation.isMoving() && this.isHoldingItem());

        if (this.level().isClientSide()) {
            if (this.isSleeping()) {
                this.sleepingAnimationState.start(this.tickCount);
            } else {
                this.idleAnimationState.animateWhen(!this.walkAnimation.isMoving(), this.tickCount);
            }
        }
    }

    @Override
    public void aiStep() {
        if (this.isSleeping() || this.isImmobile()) {
            this.jumping = false;
            this.xxa = 0.0F;
            this.zza = 0.0F;
        }

        super.aiStep();
    }

    ///////////////////////////////////////////////////////////////////////////

    public boolean isFood(ItemStack stack) {
        return stack.is(Items.BAMBOO);
    }

    public boolean hurt(DamageSource source, float amount) {
        if (this.isInvulnerableTo(source)) {
            return false;
        } else {
            if (!this.level().isClientSide) {
                this.wakeUp();
            }
            return super.hurt(source, amount);
        }
    }

    protected void dropEquipment() {
        super.dropEquipment();
        ItemStack stack = this.getItemBySlot(EquipmentSlot.MAINHAND);
        if (!stack.isEmpty()) {
            this.spawnAtLocation(stack);
            this.setItemSlot(EquipmentSlot.MAINHAND, ItemStack.EMPTY);
        }
    }

    ///////////////////////////////////////////////////////////////////////////

    @Override
    protected void pickUpItem(ItemEntity entity) {
        super.pickUpItem(entity);
    }

    /**
     * @return weather they are holding an item; used for if they should stand up or not when holding something.
     */
    public boolean isHoldingItem() {
        return !this.getHeldItem().isEmpty();
    }

    public ItemStack getHeldItem() {
        return this.getItemInHand(InteractionHand.MAIN_HAND);
    }

    ///////////////////////////////////////////////////////////////////////////

    // GENERAL

    abstract class RedPandaBehaviorGoal extends Goal {
        private final TargetingConditions NEARBY_TARGET_CONDITIONS = TargetingConditions.forCombat().range(12.0).ignoreLineOfSight();

        protected boolean alertable() {
            return !RedPanda.this.level().getNearbyEntities(LivingEntity.class, this.NEARBY_TARGET_CONDITIONS, RedPanda.this, RedPanda.this.getBoundingBox().inflate(12.0, 6.0, 12.0)).isEmpty();
        }
    }

    class SleepGoal extends Goal {

        public boolean canUse() {
            return RedPanda.this.level().isNight();
        }

        public boolean canContinueToUse() {
            return !RedPanda.this.isInWater();
        }

        public void start() {
            RedPanda.this.setSleeping(true);
        }

        public void stop() {
            RedPanda.this.wakeUp();
        }
    }

    // TRAITS

    /**
     * Clumsy red pandas will trip over randomly while walking.
     */
    class TripGoal extends Goal {
        int randomChance = RedPanda.this.random.nextInt(300);

        TripGoal() {
            this.setFlags(EnumSet.of(Flag.MOVE));
        }

        public boolean canUse() {
            return RedPanda.this.isClumsy();
        }
    }

    /**
     * Gloomy red pandas will cry randomly, when it's raining, or when they're a baby away from their parent.
     */
    class CryGoal extends Goal {
        int ticksSpentCrying;
        int cooldownUntilCanCry;

        public boolean canUse() {
            return RedPanda.this.isGloomy();
        }
    }

    /**
     * Weak red pandas sneeze randomly.
     */
    class SneezeGoal extends Goal {

        public boolean canUse() {
            return RedPanda.this.isWeak();
        }
    }

    // QUIRKS

    class ReturnItemGoal extends Goal {

        public boolean canUse() {
            return RedPanda.this.isLoyal();
        }
    }

    class StealItemGoal extends Goal {

        public boolean canUse() {
            return RedPanda.this.isMischievous();
        }
    }

    class SniffGoal extends Goal {

        public boolean canUse() {
            return RedPanda.this.isCurious();
        }
    }

    ///////////////////////////////////////////////////////////////////////////

    class RedPandaBreedGoal extends BreedGoal {

        public RedPandaBreedGoal(double speed) {
            super(RedPanda.this, speed);
        }

        public boolean canUse() {
            return super.canUse() && this.canFindBamboo();
        }

        @Override
        protected void breed() {
            ServerLevel level = (ServerLevel)this.level;
            RedPanda redPanda = (RedPanda)this.animal.getBreedOffspring(level, this.partner);
            BabyEntitySpawnEvent event = new BabyEntitySpawnEvent(this.animal, this.partner, redPanda);
            redPanda = (RedPanda)event.getChild();
            boolean cancelled = MinecraftForge.EVENT_BUS.post(event);
            if (cancelled) {
                this.animal.setAge(6000);
                this.partner.setAge(6000);
                this.animal.resetLove();
                this.partner.resetLove();
            } else {
                if (redPanda != null) {
                    ServerPlayer causePlayer = this.animal.getLoveCause();
                    ServerPlayer causePlayer2 = this.partner.getLoveCause();
                    ServerPlayer player = causePlayer;
                    if (causePlayer != null) {
                        redPanda.addTrustedPlayer(causePlayer.getUUID());
                    } else {
                        player = causePlayer2;
                    }

                    if (causePlayer2 != null && causePlayer != causePlayer2) {
                        redPanda.addTrustedPlayer(causePlayer2.getUUID());
                    }

                    if (player != null) {
                        player.awardStat(Stats.ANIMALS_BRED);
                        CriteriaTriggers.BRED_ANIMALS.trigger(player, this.animal, this.partner, redPanda);
                    }

                    this.animal.setAge(6000);
                    this.partner.setAge(6000);
                    this.animal.resetLove();
                    this.partner.resetLove();
                    redPanda.setAge(-24000);
                    redPanda.moveTo(this.animal.getX(), this.animal.getY(), this.animal.getZ(), 0.0F, 0.0F);
                    level.addFreshEntityWithPassengers(redPanda);
                    this.level.broadcastEntityEvent(this.animal, (byte)18);
                    if (this.level.getGameRules().getBoolean(GameRules.RULE_DOMOBLOOT)) {
                        this.level.addFreshEntity(new ExperienceOrb(this.level, this.animal.getX(), this.animal.getY(), this.animal.getZ(), this.animal.getRandom().nextInt(7) + 1));
                    }
                }
            }
        }

        private boolean canFindBamboo() {
            BlockPos pos = RedPanda.this.blockPosition();
            BlockPos.MutableBlockPos mutablePos = new BlockPos.MutableBlockPos();

            for (int i = 0; i < 3; ++i) {
                for (int j = 0; j < 8; ++j) {
                    for (int k = 0; k <= j; k = k > 0 ? -k : 1 - k) {
                        for (int l = k < j && k > -j ? j : 0; l <= j; l = l > 0 ? -l : 1 - l) {
                            mutablePos.setWithOffset(pos, k, i, l);
                            BlockState mutableState = this.level.getBlockState(mutablePos);
                            if (mutableState.is(Blocks.BAMBOO) || mutableState.is(MysticBlocks.SPRING_BAMBOO.get())) {
                                return true;
                            }
                        }
                    }
                }
            }
            return false;
        }
    }

    class RedPandaMoveControl extends MoveControl {

        public RedPandaMoveControl() {
            super(RedPanda.this);
        }

        public void tick() {
            if (!RedPanda.this.isSleeping()) {
                super.tick();
            }
        }
    }

    class RedPandaLookControl extends LookControl {

        public RedPandaLookControl() {
            super(RedPanda.this);
        }

        public void tick() {
            if (!RedPanda.this.isSleeping()) {
                super.tick();
            }
        }
    }

    ///////////////////////////////////////////////////////////////////////////

    /**
     * Main personality trait that defines most of a red pandas actions & behaviors.
     */
    public enum Trait implements StringRepresentable {
        NORMAL(0, ""normal"", false),
        CLUMSY(1, ""clumsy"", false),
        GLOOMY(2, ""gloomy"", false),
        WEAK(3, ""weak"", true),
        LAZY(4, ""lazy"", false),
        PLAYFUL(5, ""playful"", false),
        CHERRY(6, ""cherry"", true);

        private final int id;
        private final String name;
        private final boolean recessive;

        Trait(int id, String name, boolean recessive) {
            this.id = id;
            this.name = name;
            this.recessive = recessive;
        }

        public String getSerializedName() {
            return this.name;
        }

        public int getId() {
            return this.id;
        }

        public boolean isRecessive() {
            return this.recessive;
        }

        public static Trait byName(String name) {
            return StringRepresentable.fromEnum(Trait::values).byName(name, NORMAL);
        }

        public static Trait byId(int id) {
            return ByIdMap.continuous(Trait::getId, values(), ByIdMap.OutOfBoundsStrategy.ZERO).apply(id);
        }

        public static Trait getTraitFromGenes(Trait trait1, Trait trait2) {
            if (trait1.isRecessive()) {
                return trait1 == trait2 ? trait1 : NORMAL;
            } else {
                return trait1;
            }
        }

        public static Trait getRandom(RandomSource source) {
            int i = source.nextInt(16);
            if (i == 0) {
                return CLUMSY;
            } else if (i == 1) {
                return GLOOMY;
            } else if (i == 2) {
                return WEAK;
            } else if (i == 4) {
                return LAZY;
            } else if (i < 9) {
                return PLAYFUL;
            } else {
                return i < 11 ? CHERRY : NORMAL;
            }
        }
    }

    /**
     * Little additions to go with traits; making each red panda more distinct and unique.
     */
    public enum Quirk implements StringRepresentable {
        NONE(0, ""none""),
        LOVES_SNOW(1, ""loves_snow""),
        LOYAL(2, ""loyal""),
        MISCHIEVOUS(3, ""mischievous""),
        CURIOUS(4, ""curious""),
        CLINGY(5, ""clingy"");

        private final int id;
        private final String name;

        Quirk(int id, String name) {
            this.id = id;
            this.name = name;
        }

        public String getSerializedName() {
            return this.name;
        }

        public int getId() {
            return this.id;
        }

        public static Quirk byName(String name) {
            return StringRepresentable.fromEnum(Quirk::values).byName(name, NONE);
        }

        public static Quirk byId(int id) {
            return ByIdMap.continuous(Quirk::getId, values(), ByIdMap.OutOfBoundsStrategy.ZERO).apply(id);
        }
    }

}"
FuFevD5n,bruh lol,zackboy989xx,Lua,Friday 9th of February 2024 03:14:30 AM CDT,"local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()
local Window = OrionLib:MakeWindow({Name = ""Main"", HidePremium = false, SaveConfig = false, ConfigFolder = ""bruh""})
local Tab = Window:MakeTab({
	Name = ""Main"",
	Icon = ""rbxassetid://4483345998"",
	PremiumOnly = false
})
wait()
for i,v in pairs(getconnections(game:GetService(""ScriptContext"").Error)) do
	v:Disable()
end

local function disable(R) 
	if R.ClassName ~= ""RemoteEvent"" and R.ClassName ~= ""RemoteFunction"" then 
		return warn((""Expected RemoteEvent or RemoteFunction, got %s.""):format(R.ClassName));
	end
	local Table = {}
	for i = 1, 7997 do
		Table[#Table+1] = function() end
	end
	coroutine.wrap(function()
		local suc, res = pcall(function()
			if R:IsA(""RemoteEvent"") then
				R:FireServer(unpack(Table))
			elseif R:IsA(""RemoteFunction"") then
				R:InvokeServer(unpack(Table))
			end
		end)
		if not suc then warn(res) print(""Disabled"", R.ClassName.."":"", ""game.""..R:GetFullName()) end
	end)()
end

local function getRemoteFunctions() 
	local t = {}
	for i,v in next, game:GetDescendants() do 
		if v.ClassName == ""RemoteFunction"" or v.ClassName == ""RemoteEvent0"" then 
			t[#t+1] = v
		end
	end
	return t
end
wait()
Tab:AddButton({
	Name = ""Disable All"", 
	Description = ""Disables all RemoteFunctions in game."",
	Callback = function() 
		for i,v in next, getRemoteFunctions() do 
			disable(v)
		end
	end
})

local selected
Tab:AddDropdown({
	Name = ""Selector"",
	Default = {""None""},
	Callback = function(Value)
		if Value ~= nil then 
			selected = Value 
		end
	end,
	List = getRemoteFunctions()
})

Tab:AddButton({
	Name = ""Disable Selected"",
	Callback = function() 
		if selected == nil then 
			print(""No remotefunction selected!"")
		else
			disable(selected)
		end
	end
})"
tFayZhjp,xdddd,zackboy989xx,Lua,Friday 9th of February 2024 03:13:39 AM CDT,"-- // EngoUI V2
local mouse = game.Players.LocalPlayer:GetMouse()
local TS = game:GetService(""TweenService"")
local RS = game:GetService(""RunService"")
local UIS = game:GetService(""UserInputService"")
local rainbowvalue = 0.01

-- Themes
EngoThemes = {
    Engo = {
        TextColor = Color3.fromRGB(255, 255, 255),
        DescriptionTextColor = Color3.fromRGB(150, 150, 150),
        DarkTextColor = Color3.fromRGB(100, 100, 100),
        DarkContrast = Color3.fromRGB(4, 4, 22),
        LightContrast = Color3.fromRGB(15, 16, 41),
        BackgroundGradient = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(3, 5, 16)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(4, 4, 22))},
        Darkness = Color3.fromRGB(0, 0, 0),
    },
    Swamp = {
        TextColor = Color3.fromRGB(255, 255, 255),
        DescriptionTextColor = Color3.fromRGB(150, 150, 150),
        DarkTextColor = Color3.fromRGB(100, 100, 100),
        DarkContrast = Color3.fromRGB(10, 29, 6),
        LightContrast = Color3.fromRGB(28, 80, 43),
        BackgroundGradient = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(5, 27, 10)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(6, 37, 17))},
        Darkness = Color3.fromRGB(0, 0, 0),
    },
    Sky = {
        TextColor = Color3.fromRGB(255, 255, 255),
        DescriptionTextColor = Color3.fromRGB(212, 212, 212),
        DarkTextColor = Color3.fromRGB(161, 161, 161),
        DarkContrast = Color3.fromRGB(32, 119, 177),
        LightContrast = Color3.fromRGB(56, 137, 175),
        BackgroundGradient = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(63, 127, 153)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(25, 118, 155))},
        Darkness = Color3.fromRGB(0, 0, 0),
    },
    Crimson = {
        TextColor = Color3.fromRGB(255, 255, 255),
        DescriptionTextColor = Color3.fromRGB(212, 212, 212),
        DarkTextColor = Color3.fromRGB(161, 161, 161),
        DarkContrast = Color3.fromRGB(54, 11, 11),
        LightContrast = Color3.fromRGB(167, 50, 50),
        BackgroundGradient = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(83, 30, 30)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(138, 45, 45))},
        Darkness = Color3.fromRGB(0, 0, 0),
    },
    Gray = {
        TextColor = Color3.fromRGB(255, 255, 255),
        DescriptionTextColor = Color3.fromRGB(212, 212, 212),
        DarkTextColor = Color3.fromRGB(161, 161, 161),
        DarkContrast = Color3.fromRGB(24, 24, 24),
        LightContrast = Color3.fromRGB(58, 58, 58),
        BackgroundGradient = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(29, 29, 29)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(39, 39, 39))},
        Darkness = Color3.fromRGB(0, 0, 0),
    },
    Discord = {
        TextColor = Color3.fromRGB(255, 255, 255),
        DescriptionTextColor = Color3.fromRGB(212, 212, 212),
        DarkTextColor = Color3.fromRGB(161, 161, 161),
        DarkContrast = Color3.fromRGB(41, 43, 47),
        LightContrast = Color3.fromRGB(54, 57, 63),
        BackgroundGradient = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(64, 68, 75)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(64, 68, 75))},
        Darkness = Color3.fromRGB(0, 0, 0),
    },
}
local theme = EngoThemes.Engo

-- Functions
local old_err = error
local function error(message)
    old_err(""[EngoUILib] ""..tostring(message))
end

local function RelativeXY(GuiObject, location)
	local x, y = location.X - GuiObject.AbsolutePosition.X, location.Y - GuiObject.AbsolutePosition.Y
	local x2 = 0
	local xm, ym = GuiObject.AbsoluteSize.X, GuiObject.AbsoluteSize.Y
	x2 = math.clamp(x, 4, xm - 6)
	x = math.clamp(x, 0, xm)
	y = math.clamp(y, 0, ym)
	return x, y, x/xm, y/ym, x2/xm
end

spawn(function()
	repeat
		for i = 0, 1, 0.01 do
			wait(0.01)
			rainbowvalue = i
		end
	until true == false
end)

local library = {}
function library:SetTheme(themeSel)
    if EngoThemes[themeSel] then 
        theme = EngoThemes[themeSel]
    elseif typeof(themeSel) == ""table"" then
        for i,v in pairs(EngoThemes.Engo) do
            if not themeSel[i] then
                error(""Custom themes needs ""..tostring(i).."" to work properly!"")
            end
        end
        theme = themeSel
    else
        error(""Invalid theme!, please use correct name or custom theme."")
    end
end
function library:CreateMain(title, description, keycode)
    library[""OriginalBind""] = keycode
    library[""Bind""] = keycode
    local closeconnection 
    function onSelfDestroy()
        if getgenv().userInputConnection then
            getgenv().userInputConnection:Disconnect()
            getgenv().userInputConnection = nil
        end
        if closeconnection then
            closeconnection:Disconnect()
        end
    end
    if getgenv().EngoUILib then 
        getgenv().EngoUILib:Destroy() 
        onSelfDestroy()
    end
    local firstTab
    local EngoUI = Instance.new(""ScreenGui"")
    if syn then 
        syn.protect_gui(EngoUI)
    end
    EngoUI.Parent = gethui and gethui() or game.CoreGui
    getgenv().EngoUILib = EngoUI
    closeconnection = UIS.InputEnded:Connect(function(input,yes)
        local TextBoxFocused = UIS:GetFocusedTextBox()
        if TextBoxFocused then return end
        if input.KeyCode == library[""Bind""] and not yes and not library[""IsBinding""] then
            EngoUI.Enabled = not EngoUI.Enabled
        end
    end)

    local Main = Instance.new(""Frame"")
    local UIGradient = Instance.new(""UIGradient"")
    local UICorner = Instance.new(""UICorner"")
    local Sidebar = Instance.new(""ScrollingFrame"")
    local UIListLayout = Instance.new(""UIListLayout"")
    local Topbar = Instance.new(""Frame"")
    local Info = Instance.new(""Frame"")
    local Title = Instance.new(""TextLabel"")
    local Description = Instance.new(""TextLabel"")

    EngoUI.Name = ""EngoUI""
    EngoUI.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

    Main.Name = ""Main""
    Main.Parent = EngoUI
    Main.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    Main.Position = UDim2.new(0.54207927, 0, 0.307602346, 0)
    Main.Size = UDim2.new(0, 550, 0, 397)
    Main.Active = true
    Main.Draggable = true

    UIGradient.Color = theme.BackgroundGradient
    UIGradient.Offset = Vector2.new(-0.25, 0)
    UIGradient.Parent = Main

    UICorner.CornerRadius = UDim.new(0, 6)
    UICorner.Parent = Main

    Sidebar.Name = ""Sidebar""
    Sidebar.Parent = Main
    Sidebar.Active = true
    Sidebar.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    Sidebar.BackgroundTransparency = 1.000
    Sidebar.Position = UDim2.new(0.043636363, 0, 0.158690169, 0)
    Sidebar.Size = UDim2.new(0, 93, 0, 314)
    Sidebar.CanvasSize = UDim2.new(0, 0, 0, 0)
    Sidebar.ScrollBarThickness = 0
    Sidebar.AutomaticCanvasSize = Enum.AutomaticSize.Y

    UIListLayout.Parent = Sidebar
    UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    UIListLayout.Padding = UDim.new(0, 15)

    Topbar.Name = ""Topbar""
    Topbar.Parent = Main
    Topbar.BackgroundColor3 = Color3.fromRGB(1, 1, 1)
    Topbar.BackgroundTransparency = 1.000
    Topbar.Size = UDim2.new(0, 550, 0, 53)

    Info.Name = ""Info""
    Info.Parent = Topbar
    Info.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    Info.BackgroundTransparency = 1.000
    Info.Position = UDim2.new(0, 0, 0.113207549, 0)
    Info.Size = UDim2.new(0, 151, 0, 47)

    Title.Name = ""Title""
    Title.Parent = Info
    Title.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    Title.BackgroundTransparency = 1.000
    Title.Position = UDim2.new(0.158940405, 0, 0.132075474, 0)
    Title.Size = UDim2.new(0, 116, 0, 21)
    Title.Font = Enum.Font.GothamBold
    Title.Text = title
    Title.TextColor3 =  theme.TextColor
    Title.TextSize = 18.000
    Title.TextXAlignment = Enum.TextXAlignment.Left

    Description.Name = ""Description""
    Description.Parent = Info
    Description.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    Description.BackgroundTransparency = 1.000
    Description.Position = UDim2.new(0.158940405, 0, 0.528301895, 0)
    Description.Size = UDim2.new(0, 116, 0, 16)
    Description.Font = Enum.Font.Gotham
    Description.Text = description
    Description.TextColor3 = theme.DescriptionTextColor
    Description.TextSize = 11.000
    Description.TextXAlignment = Enum.TextXAlignment.Left

    local library2 = {}
    library2[""Tabs""] = {}
    function library2:CreateTab(name)

        local library3 = {}

        local UIListLayout_2 = Instance.new(""UIListLayout"") 
        local TabButton = Instance.new(""TextButton"")
        local Tab = Instance.new(""ScrollingFrame"")

        TabButton.Parent = Sidebar
        TabButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        TabButton.BackgroundTransparency = 1.000
        TabButton.Size = UDim2.new(0, 121, 0, 26)
        TabButton.Font = Enum.Font.Gotham
        TabButton.Text = name
        TabButton.TextColor3 =  theme.DarkTextColor
        TabButton.TextSize = 14.000
        TabButton.TextWrapped = true
        TabButton.TextXAlignment = Enum.TextXAlignment.Left
        TabButton.Name = name..""TabButton""

        Tab.Name = name..""Tab""
        Tab.Parent = Main
        Tab.Active = true
        Tab.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        Tab.BackgroundTransparency = 1.000
        Tab.BorderSizePixel = 0
        Tab.Position = UDim2.new(0.289090902, 0, 0.151133507, 0)
        Tab.Size = UDim2.new(0, 375, 0, 309)
        Tab.CanvasSize = UDim2.new(0, 0, 0, 0)
        Tab.ScrollBarThickness = 0
        Tab.TopImage = """"
        Tab.AutomaticCanvasSize = Enum.AutomaticSize.Y

        UIListLayout_2.Parent = Tab
        UIListLayout_2.HorizontalAlignment = Enum.HorizontalAlignment.Center
        UIListLayout_2.SortOrder = Enum.SortOrder.LayoutOrder
        UIListLayout_2.Padding = UDim.new(0, 3)

        library2[""Tabs""][name] = {
            Instance = Tab,
            Button = TabButton,
        }

        if not firstTab then 
            firstTab = library2[""Tabs""][name]
            TabButton.TextColor3 = theme.TextColor
        else
            Tab.Visible = false
            TabButton.TextColor3 = theme.DarkTextColor
        end

        function library2:OpenTab(tab)
            for i,v in pairs(library2[""Tabs""]) do 
                if i ~= tab then
                    v.Instance.Visible = false
                    v.Button.TextColor3 = theme.DarkTextColor
                else
                    v.Instance.Visible = true
                    v.Button.TextColor3 =  theme.TextColor
                end
            end
        end

        TabButton.MouseButton1Click:Connect(function()
            library2:OpenTab(name)
        end)

        function library3:CreateButton(text, callback)
            callback = callback or function() end
            local Button = Instance.new(""TextButton"")
            local UICorner_2 = Instance.new(""UICorner"")
            local Title_2 = Instance.new(""TextLabel"")
            local Icon = Instance.new(""ImageLabel"")

            Button.Name = text..""Button""
            Button.Parent = Tab
            Button.BackgroundColor3 = theme.LightContrast
            Button.BackgroundTransparency = 0
            Button.Size = UDim2.new(0, 375, 0, 49)
            Button.Font = Enum.Font.SourceSans
            Button.Text = """"
            Button.TextColor3 = Color3.fromRGB(0, 0, 0)
            Button.TextSize = 14.000

            UICorner_2.CornerRadius = UDim.new(0, 6)
            UICorner_2.Parent = Button

            Title_2.Name = ""Title""
            Title_2.Parent = Button
            Title_2.AnchorPoint = Vector2.new(0, 0.5)
            Title_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            Title_2.BackgroundTransparency = 1.000
            Title_2.Position = UDim2.new(0.141000003, 0, 0.5, 0)
            Title_2.Size = UDim2.new(0, 263, 0, 21)
            Title_2.Font = Enum.Font.GothamSemibold
            Title_2.Text = text
            Title_2.TextColor3 =  theme.TextColor
            Title_2.TextSize = 14.000
            Title_2.TextXAlignment = Enum.TextXAlignment.Left

            Icon.Name = ""Icon""
            Icon.Parent = Button
            Icon.AnchorPoint = Vector2.new(0, 0.5)
            Icon.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            Icon.BackgroundTransparency = 1.000
            Icon.ClipsDescendants = true
            Icon.Position = UDim2.new(0.0400000028, 0, 0.5, 0)
            Icon.Size = UDim2.new(0, 19, 0, 24)
            Icon.Image = ""rbxassetid://8284791761""
            Icon.ScaleType = Enum.ScaleType.Stretch
            Icon.ImageColor3 = theme.TextColor

            Button.MouseButton1Click:Connect(function() 
                spawn(function() pcall(callback) end)
            end)
            local obj = {
                [""Type""] = ""Button"",
                [""Instance""] = Button,
                [""Api""] = nil
            }
            table.insert(library2[""Tabs""][name], obj)
        end

        function library3:CreateToggle(text, callback)
            local library4 = {}
            library4[""Enabled""] = false
            callback = callback or function() end
            local Toggle = Instance.new(""TextButton"")
            local UICorner_3 = Instance.new(""UICorner"")
            local Title_3 = Instance.new(""TextLabel"")
            local Icon = Instance.new(""ImageLabel"")

            Toggle.Name = text..""Toggle""
            Toggle.Parent = Tab
            Toggle.BackgroundColor3 = theme.LightContrast
            Toggle.BackgroundTransparency = 0
            Toggle.Size = UDim2.new(0, 375, 0, 49)
            Toggle.Font = Enum.Font.SourceSans
            Toggle.Text = """"
            Toggle.TextColor3 = Color3.fromRGB(0, 0, 0)
            Toggle.TextSize = 14.000

            UICorner_3.CornerRadius = UDim.new(0, 6)
            UICorner_3.Parent = Toggle

            Title_3.Name = ""Title""
            Title_3.Parent = Toggle
            Title_3.AnchorPoint = Vector2.new(0, 0.5)
            Title_3.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            Title_3.BackgroundTransparency = 1.000
            Title_3.Position = UDim2.new(0.138999999, 0, 0.520408154, 0)
            Title_3.Size = UDim2.new(0, 264, 0, 21)
            Title_3.Font = Enum.Font.GothamSemibold
            Title_3.Text = text
            Title_3.TextColor3 =  theme.TextColor
            Title_3.TextSize = 14.000
            Title_3.TextXAlignment = Enum.TextXAlignment.Left

            Icon.Name = ""Icon""
            Icon.Parent = Toggle
            Icon.AnchorPoint = Vector2.new(0, 0.5)
            Icon.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            Icon.BackgroundTransparency = 1.000
            Icon.ClipsDescendants = true
            Icon.Position = UDim2.new(0.0320000015, 0, 0.5, 0)
            Icon.Size = UDim2.new(0, 26, 0, 26)
            Icon.ImageColor3 = theme.TextColor
            Icon.Image = ""rbxassetid://3926311105""
            Icon.ImageRectOffset = Vector2.new(940, 784)
            Icon.ImageRectSize = Vector2.new(48, 48)
            Icon.SliceScale = 0.500

            function library4:Toggle(bool)
                bool = bool or (not library4[""Enabled""])
                library4[""Enabled""] = bool
                if not bool then 
                    Icon.ImageRectOffset = Vector2.new(940, 784)
                    Icon.ImageRectSize = Vector2.new(48, 48)
                    spawn(function() callback(false) end)
                else
                    spawn(function() callback(true) end)
                    Icon.ImageRectOffset = Vector2.new(4, 836)
                    Icon.ImageRectSize = Vector2.new(48, 48)
                end
            end

            Toggle.MouseButton1Click:Connect(function()
                library4:Toggle()
            end)

            local obj = {
                [""Type""] = ""Toggle"",
                [""Instance""] = Toggle,
                [""Api""] = library4
            }
            table.insert(library2[""Tabs""][name], obj)
            library4[""Object""] = obj
            return library4
        end

        function library3:CreateTextbox(text, callback)
            local library4 = {}
            library4[""Text""] = """"

            local Textbox = Instance.new(""TextLabel"")
            local UICorner = Instance.new(""UICorner"")
            local Icon = Instance.new(""ImageLabel"")
            local Title = Instance.new(""TextLabel"")
            local Textbox_2 = Instance.new(""TextBox"")
            local UICorner_2 = Instance.new(""UICorner"")

            Textbox.Name = text..""Textbox""
            Textbox.Parent = Tab
            Textbox.BackgroundColor3 = theme.LightContrast
            Textbox.BackgroundTransparency = 0
            Textbox.Position = UDim2.new(0, 0, 0.326860845, 0)
            Textbox.Size = UDim2.new(0, 375, 0, 50)
            Textbox.Font = Enum.Font.SourceSans
            Textbox.Text = """"
            Textbox.TextColor3 = Color3.fromRGB(0, 0, 0)
            Textbox.TextSize = 14.000

            UICorner.CornerRadius = UDim.new(0, 6)
            UICorner.Parent = Textbox

            Icon.Name = ""Icon""
            Icon.Parent = Textbox
            Icon.AnchorPoint = Vector2.new(0, 0.5)
            Icon.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            Icon.BackgroundTransparency = 1.000
            Icon.ClipsDescendants = true
            Icon.Position = UDim2.new(0.032333333, 0, 0.5, 0)
            Icon.Size = UDim2.new(0, 25, 0, 24)
            Icon.Image = ""rbxassetid://3926305904""
            Icon.ImageRectOffset = Vector2.new(244, 44)
            Icon.ImageRectSize = Vector2.new(36, 36)
            Icon.ScaleType = Enum.ScaleType.Crop
            Icon.SliceScale = 0.500
            Icon.ImageColor3 = theme.TextColor

            Title.Name = ""Title""
            Title.Parent = Textbox
            Title.AnchorPoint = Vector2.new(0, 0.5)
            Title.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            Title.BackgroundTransparency = 1.000
            Title.Position = UDim2.new(0.141000003, 0, 0.5, 0)
            Title.Size = UDim2.new(0, 101, 0, 21)
            Title.Font = Enum.Font.GothamSemibold
            Title.Text = text
            Title.TextColor3 =  theme.TextColor
            Title.TextSize = 14.000
            Title.TextXAlignment = Enum.TextXAlignment.Left

            Textbox_2.Name = ""Textbox""
            Textbox_2.Parent = Textbox
            Textbox_2.AnchorPoint = Vector2.new(0, 0.5)
            Textbox_2.BackgroundColor3 = theme.DarkContrast
            Textbox_2.BorderSizePixel = 0
            Textbox_2.Position = UDim2.new(0.43233332, 0, 0.5, 0)
            Textbox_2.Size = UDim2.new(0, 201, 0, 20)
            Textbox_2.Font = Enum.Font.Gotham
            Textbox_2.PlaceholderColor3 = theme.DarkTextColor
            Textbox_2.PlaceholderText = ""Value""
            Textbox_2.Text = """"
            Textbox_2.TextColor3 = theme.DescriptionTextColor
            Textbox_2.TextSize = 14.000
            Textbox_2.TextWrapped = true
            Textbox_2.FocusLost:Connect(function()
                spawn(function() callback(Textbox_2.Text) end)
                library4[""Text""] = Textbox_2.Text
            end)

            UICorner_2.CornerRadius = UDim.new(0, 6)
            UICorner_2.Parent = Textbox_2
            local obj = {
                [""Type""] = ""Textbox"",
                [""Instance""] = Textbox,
                [""Api""] = library4
            }
            table.insert(library2[""Tabs""][name], obj)
            library4[""Object""] = obj
            return library4
        end

        function library3:CreateSlider(text, min, max, callback)
            local library4 = {}
            library4[""Value""] = nil
            callback = callback or function() end

            local Slider = Instance.new(""TextButton"")
            local UICorner_4 = Instance.new(""UICorner"")
            local Icon_3 = Instance.new(""ImageLabel"")
            local Title_4 = Instance.new(""TextLabel"")
            local SliderBar = Instance.new(""Frame"")
            local UICorner_5 = Instance.new(""UICorner"")
            local Value = Instance.new(""TextLabel"")
            local Slider_2 = Instance.new(""Frame"")
            local UICorner_6 = Instance.new(""UICorner"")

            Slider.Name = text..""Slider""
            Slider.Parent = Tab
            Slider.BackgroundColor3 = theme.LightContrast
            Slider.BackgroundTransparency = 0
            Slider.Position = UDim2.new(0, 0, 0.336569577, 0)
            Slider.Size = UDim2.new(0, 375, 0, 50)
            Slider.Font = Enum.Font.SourceSans
            Slider.Text = """"
            Slider.TextColor3 = Color3.fromRGB(0, 0, 0)
            Slider.TextSize = 14.000
            Slider.AutoButtonColor = false

            UICorner_4.CornerRadius = UDim.new(0, 6)
            UICorner_4.Parent = Slider

            Icon_3.Name = ""Icon""
            Icon_3.Parent = Slider
            Icon_3.AnchorPoint = Vector2.new(0, 0.5)
            Icon_3.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            Icon_3.BackgroundTransparency = 1.000
            Icon_3.ClipsDescendants = true
            Icon_3.Position = UDim2.new(0.032333333, 0, 0.5, 0)
            Icon_3.Size = UDim2.new(0, 25, 0, 24)
            Icon_3.Image = ""rbxassetid://3926305904""
            Icon_3.ImageRectOffset = Vector2.new(4, 124)
            Icon_3.ImageRectSize = Vector2.new(36, 36)
            Icon_3.SliceScale = 0.500
            Icon_3.ImageColor3 = theme.TextColor

            Title_4.Name = ""Title""
            Title_4.Parent = Slider
            Title_4.AnchorPoint = Vector2.new(0, 0.5)
            Title_4.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            Title_4.BackgroundTransparency = 1.000
            Title_4.Position = UDim2.new(0.141000003, 0, 0.5, 0)
            Title_4.Size = UDim2.new(0, 101, 0, 21)
            Title_4.Font = Enum.Font.GothamSemibold
            Title_4.Text = text
            Title_4.TextColor3 =  theme.TextColor
            Title_4.TextSize = 14.000
            Title_4.TextXAlignment = Enum.TextXAlignment.Left

            SliderBar.Name = ""SliderBar""
            SliderBar.Parent = Slider
            SliderBar.AnchorPoint = Vector2.new(0, 0.5)
            SliderBar.BackgroundColor3 = theme.DarkContrast
            SliderBar.BorderSizePixel = 0
            SliderBar.Position = UDim2.new(-0.0666666701, 170, 0.5, 0)
            SliderBar.Size = UDim2.new(0, 219, 0, 15)

            UICorner_5.CornerRadius = UDim.new(0, 6)
            UICorner_5.Parent = SliderBar

            Value.Name = ""Value""
            Value.Parent = SliderBar
            Value.AnchorPoint = Vector2.new(0.5, 0.5)
            Value.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            Value.BackgroundTransparency = 1.000
            Value.Position = UDim2.new(0.5, 0, 0.5, 0)
            Value.Size = UDim2.new(0, 37, 0, 16)
            Value.ZIndex = 2
            Value.Font = Enum.Font.GothamSemibold
            Value.Text = """"
            Value.TextColor3 =  theme.TextColor
            Value.TextSize = 10.000
            Value.TextStrokeTransparency = 0.000
            Value.TextStrokeColor3 = theme.Darkness
            Value.TextXAlignment = Enum.TextXAlignment.Left

            Slider_2.Name = ""Slider""
            Slider_2.Parent = SliderBar
            Slider_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            Slider_2.Size = UDim2.new(0, 53, 0, 15)

            UICorner_6.CornerRadius = UDim.new(0, 6)
            UICorner_6.Parent = Slider_2
			
            local value
			local dragging
			function library4:SetValue(input)
				local pos = UDim2.new(math.clamp((input.Position.X - SliderBar.AbsolutePosition.X) / SliderBar.AbsoluteSize.X, 0, 1), 0, 0, (SliderBar.AbsoluteSize.Y))
				Slider_2:TweenSize(pos, Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.2, true)
				local value = math.floor(( ((pos.X.Scale * max) / max) * (max - min) + min ) * 100) / 100
				Value.Text = tostring(value)
                library4[""Value""] = value
				spawn(function() callback(value) end)
			end;
			
			SliderBar.InputBegan:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 then
					dragging = true
				end
			end)

			SliderBar.InputEnded:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 then
					dragging = false
				end
			end)

			SliderBar.InputBegan:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 then
					library4:SetValue(input)
				end
			end)

			UIS.InputChanged:Connect(function(input)
				if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
					library4:SetValue(input)
				end
			end)

            local obj = {
                [""Type""] = ""Slider"",
                [""Instance""] = Slider,
                [""Api""] = library4
            }
            table.insert(library2[""Tabs""][name], obj)
            library4[""Object""] = obj
            return library4
        end

        function library3:CreateLabel(text)
            local library4 = {}
            local Label = Instance.new(""TextLabel"")
            local UICorner_7 = Instance.new(""UICorner"")
            local Icon_4 = Instance.new(""ImageLabel"")
            local Title_5 = Instance.new(""TextLabel"")
        
            Label.Name = text..""Label""
            Label.Parent = Tab
            Label.BackgroundColor3 = theme.LightContrast
            Label.BackgroundTransparency = 0
            Label.Position = UDim2.new(0, 0, 0.336569577, 0)
            Label.Size = UDim2.new(0, 375, 0, 50)
            Label.Font = Enum.Font.SourceSans
            Label.Text = """"
            Label.TextColor3 = Color3.fromRGB(0, 0, 0)
            Label.TextSize = 14.000

            UICorner_7.CornerRadius = UDim.new(0, 6)
            UICorner_7.Parent = Label

            Icon_4.Name = ""Icon""
            Icon_4.Parent = Label
            Icon_4.AnchorPoint = Vector2.new(0, 0.5)
            Icon_4.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            Icon_4.BackgroundTransparency = 1.000
            Icon_4.ClipsDescendants = true
            Icon_4.Position = UDim2.new(0.032333333, 0, 0.5, 0)
            Icon_4.Size = UDim2.new(0, 25, 0, 24)
            Icon_4.Image = ""rbxassetid://3926305904""
            Icon_4.ImageRectOffset = Vector2.new(584, 4)
            Icon_4.ImageRectSize = Vector2.new(36, 36)
            Icon_4.ScaleType = Enum.ScaleType.Crop
            Icon_4.SliceScale = 0.500
            Icon_4.ImageColor3 = theme.TextColor

            Title_5.Name = ""Title""
            Title_5.Parent = Label
            Title_5.AnchorPoint = Vector2.new(0, 0.5)
            Title_5.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            Title_5.BackgroundTransparency = 1.000
            Title_5.Position = UDim2.new(0.141000003, 0, 0.5, 0)
            Title_5.Size = UDim2.new(0, 101, 0, 21)
            Title_5.Font = Enum.Font.GothamSemibold
            Title_5.TextColor3 =  theme.TextColor
            Title_5.TextSize = 14.000
            Title_5.TextXAlignment = Enum.TextXAlignment.Left
            Title_5.Text = text

            function library4:Update(textnew) 
                Title_5.Text = textnew
            end

            local obj = {
                [""Type""] = ""Label"",
                [""Instance""] = Label,
                [""Api""] = library4
            }
            table.insert(library2[""Tabs""][name], obj)
            library4[""Object""] = obj
            return library4
        end

        function library3:CreateBind(text, originalBind, callback)
            local library4 = {}
            library[""IsBinding""] = false
            library4[""IsBinding""] = false
            library4[""Bind""] = originalBind
            callback = callback or function() end

            local Keybind = Instance.new(""TextLabel"")
            local UICorner_8 = Instance.new(""UICorner"")
            local Title_6 = Instance.new(""TextLabel"")
            local Icon_5 = Instance.new(""TextLabel"")
            local UICorner_9 = Instance.new(""UICorner"")
            local Edit = Instance.new(""ImageButton"")
            local BindText = Instance.new(""TextLabel"")

            Keybind.Name = text..""Bind""
            Keybind.Parent = Tab
            Keybind.BackgroundColor3 = theme.LightContrast
            Keybind.BackgroundTransparency = 0
            Keybind.Position = UDim2.new(0, 0, 0.336569577, 0)
            Keybind.Size = UDim2.new(0, 375, 0, 50)
            Keybind.Font = Enum.Font.SourceSans
            Keybind.Text = """"
            Keybind.TextColor3 = Color3.fromRGB(0, 0, 0)
            Keybind.TextSize = 14.000

            UICorner_8.CornerRadius = UDim.new(0, 6)
            UICorner_8.Parent = Keybind

            Title_6.Name = ""Title""
            Title_6.Parent = Keybind
            Title_6.AnchorPoint = Vector2.new(0, 0.5)
            Title_6.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            Title_6.BackgroundTransparency = 1.000
            Title_6.Position = UDim2.new(0.141000003, 0, 0.5, 0)
            Title_6.Size = UDim2.new(0, 101, 0, 21)
            Title_6.Font = Enum.Font.GothamSemibold
            Title_6.Text = text
            Title_6.TextColor3 =  theme.TextColor
            Title_6.TextSize = 14.000
            Title_6.TextXAlignment = Enum.TextXAlignment.Left

            Icon_5.Name = ""Icon""
            Icon_5.Parent = Keybind
            Icon_5.AnchorPoint = Vector2.new(0, 0.5)
            Icon_5.Position = UDim2.new(0.0320000015, 0, 0.5, 0)
            Icon_5.Size = UDim2.new(0, 25, 0, 24)
            Icon_5.Font = Enum.Font.GothamBold
            Icon_5.Text = a and o or ""�""
            Icon_5.TextColor3 = theme.Darkness
            Icon_5.TextSize = 14.000
            Icon_5.BackgroundColor3 = theme.TextColor

            UICorner_9.CornerRadius = UDim.new(0, 4)
            UICorner_9.Parent = Icon_5

            Edit.Name = ""Edit""
            Edit.Parent = Keybind
            Edit.BackgroundTransparency = 1.000
            Edit.LayoutOrder = 5
            Edit.Position = UDim2.new(0.903674901, 0, 0.248771951, 0)
            Edit.Size = UDim2.new(0, 25, 0, 25)
            Edit.ZIndex = 2
            Edit.Image = ""rbxassetid://3926305904""
            Edit.ImageRectOffset = Vector2.new(284, 644)
            Edit.ImageRectSize = Vector2.new(36, 36)
            Edit.ImageColor3 = theme.TextColor

            BindText.Name = ""BindText""
            BindText.Parent = Keybind
            BindText.AnchorPoint = Vector2.new(0, 0.5)
            BindText.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            BindText.BackgroundTransparency = 1.000
            BindText.Position = UDim2.new(0.594333351, 0, 0.5, 0)
            BindText.Size = UDim2.new(0, 93, 0, 21)
            BindText.Font = Enum.Font.GothamSemibold
            BindText.Text = o
            BindText.TextColor3 =  theme.TextColor
            BindText.TextSize = 14.000
            BindText.TextXAlignment = Enum.TextXAlignment.Right
            Edit.MouseButton1Click:Connect(function()
                library4[""IsBinding""] = true
                library[""IsBinding""] = true
                BindText.Text = ""Press a key...""
            end)

            getgenv().userInputConnection = UIS.InputEnded:Connect(function(input)
                if input.KeyCode == Enum.KeyCode.Unknown then return end
                local TextBoxFocused = UIS:GetFocusedTextBox()
                if TextBoxFocused then return end
                if input.KeyCode == Enum.KeyCode.Backspace then 
                    library4[""IsBinding""] = false
                    library[""IsBinding""] = false
                    library4[""Bind""] = nil
                    Icon_5.Text = ""␀""
                end
                if library4[""IsBinding""] then 
                    library4[""Bind""] = input.KeyCode
                    library4[""IsBinding""] = false
                    library[""IsBinding""] = false
                else
                    if input.KeyCode == library4[""Bind""] then 
                        spawn(function() callback(library4[""Bind""]) end)
                    end
                end
            end)
            local obj = {
                [""Type""] = ""Bind"",
                [""Instance""] = Keybind,
                [""Api""] = library4
            }
            table.insert(library2[""Tabs""][name], obj)
            library4[""Object""] = obj
            return library4
        end

        function library3:CreateDropdown(text, list, callback)
            local library4 = {}
            library4[""Options""] = {}
            library4[""Expanded""] = false

            local Dropdown = Instance.new(""TextButton"")
            local UICorner_10 = Instance.new(""UICorner"")
            local Title_7 = Instance.new(""TextLabel"")
            local Icon_6 = Instance.new(""ImageLabel"")

            Dropdown.Name = text..""Dropdown""
            Dropdown.Parent = Tab
            Dropdown.BackgroundColor3 = theme.LightContrast
            Dropdown.BackgroundTransparency = 0
            Dropdown.Position = UDim2.new(0, 0, 0.158576056, 0)
            Dropdown.Size = UDim2.new(0, 375, 0, 50)
            Dropdown.Font = Enum.Font.SourceSans
            Dropdown.Text = """"
            Dropdown.TextColor3 = Color3.fromRGB(0, 0, 0)
            Dropdown.TextSize = 14.000

            UICorner_10.CornerRadius = UDim.new(0, 6)
            UICorner_10.Parent = Dropdown

            Title_7.Name = ""Title""
            Title_7.Parent = Dropdown
            Title_7.AnchorPoint = Vector2.new(0, 0.5)
            Title_7.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            Title_7.BackgroundTransparency = 1.000
            Title_7.Position = UDim2.new(0.141000003, 0, 0.5, 0)
            Title_7.Size = UDim2.new(0, 263, 0, 21)
            Title_7.Font = Enum.Font.GothamSemibold
            Title_7.Text = text
            Title_7.TextColor3 =  theme.TextColor
            Title_7.TextSize = 14.000
            Title_7.TextXAlignment = Enum.TextXAlignment.Left

            Icon_6.Name = ""Icon""
            Icon_6.Parent = Dropdown
            Icon_6.AnchorPoint = Vector2.new(0, 0.5)
            Icon_6.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            Icon_6.BackgroundTransparency = 1.000
            Icon_6.ClipsDescendants = true
            Icon_6.Position = UDim2.new(0.031, 0 ,0.5, 0)
            Icon_6.Size = UDim2.new(0, 27, 0, 27)
            Icon_6.Image = ""rbxassetid://3926305904""
            Icon_6.ImageRectOffset = Vector2.new(484, 204)
            Icon_6.ImageRectSize = Vector2.new(36, 36)
            Icon_6.ImageColor3 = theme.TextColor

            function library4:CreateOption(text)  
                local Option = Instance.new(""TextButton"")
                local UICorner_11 = Instance.new(""UICorner"")
                local Title_8 = Instance.new(""TextLabel"")
                
                local ending = ""Option""
                for i = 1,100 do
                    if i == 1 then i = """" end
                    if not Tab:FindFirstChild(tostring(text)..""Option""..tostring(i)) then
                        ending = ""Option""..tostring(i)
                        break
                    end
                end
                library4[""Options""][tostring(text)..ending] = {
                    [""Value""] = text,
                    [""Instance""] = Option
                }
                library4[""Connections""] = {}
                Option.Name = tostring(text)..ending
                Option.Parent = Tab
                Option.BackgroundColor3 = theme.LightContrast
                Option.BackgroundTransparency = 0
                Option.Position = UDim2.new(0, 0, 0.666666687, 0)
                Option.Size = UDim2.new(0, 354, 0, 50)
                Option.Font = Enum.Font.SourceSans
                Option.Text = """"
                Option.TextColor3 = Color3.fromRGB(0, 0, 0)
                Option.TextSize = 14.000
                Option.Visible = false

                UICorner_11.CornerRadius = UDim.new(0, 6)
                UICorner_11.Parent = Option

                Title_8.Name = ""Title""
                Title_8.Parent = Option
                Title_8.AnchorPoint = Vector2.new(0, 0.5)
                Title_8.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Title_8.BackgroundTransparency = 1.000
                Title_8.Position = UDim2.new(0.0441919193, 0, 0.5, 0)
                Title_8.Size = UDim2.new(0, 291, 0, 21)
                Title_8.Font = Enum.Font.GothamSemibold
                Title_8.Text = ""• ""..tostring(text)
                Title_8.TextColor3 =  theme.TextColor
                Title_8.TextSize = 14.000
                Title_8.TextXAlignment = Enum.TextXAlignment.Left

                local isFound = false
                for i,v in pairs(library2[""Tabs""][name]) do 
                    if type(v) == ""table"" then
                        if v.Instance == Option then 
                            isFound = true
                        end
                        if isFound and v.Instance ~= Option then 
                            spawn(function()
                                local old = v.Instance.Parent
                                v.Instance.Parent = nil
                                v.Instance.Parent = old
                            end)
                        end
                    end
                end

                return Option
            end

            function library4:CreateOptions(options)
                for i,v in pairs(options) do 
                    local option = library4:CreateOption(v)
                end
            end
            function library4:RefreshOptions(options)
                options = options or {}
                for i,v in pairs(library4[""Options""]) do 
                    v.Instance:Destroy()
                end
                Tab.CanvasSize = UDim2.new(0, Tab.AbsoluteSize.X, 0, UIListLayout_2.AbsoluteContentSize.Y)
                library4[""Expanded""] = false
                library4:CreateOptions(options)
            end
            library4:CreateOptions(list)
            Dropdown.MouseButton1Click:Connect(function()
                if library4[""Expanded""] then 
                    for i,v in pairs(library4[""Options""]) do
                        v.Instance.Visible = false
                    end
                    for i,v in pairs(library4[""Connections""]) do
                        v:Disconnect()
                    end
                else
                    for i,v in pairs(library4[""Options""]) do 
                        v.Instance.Visible = true
                        library4[""Connections""][i] = v.Instance.MouseButton1Click:Connect(function()
                            spawn(function() callback(v.Value) end)
                            library4[""Value""] = v.Value
                            library4[""Expanded""] = false
                            for i,v in pairs(library4[""Connections""]) do
                                v:Disconnect()
                            end
                            Dropdown.Title.Text = text.."" - ""..tostring(v.Value)
                            for i2, v2 in pairs(library4[""Options""]) do 
                                v2.Instance.Visible = false
                            end
                            Tab.CanvasSize = UDim2.new(0, Tab.AbsoluteSize.X, 0, UIListLayout_2.AbsoluteContentSize.Y)
                        end)
                    end
                end
                library4[""Expanded""] = not library4[""Expanded""]
                Tab.CanvasSize = UDim2.new(0, Tab.AbsoluteSize.X, 0, UIListLayout_2.AbsoluteContentSize.Y)
            end)
            local obj = {
                [""Type""] = ""Dropdown"",
                [""Instance""] = Dropdown,
                [""Api""] = library4
            }
            table.insert(library2[""Tabs""][name], obj)
            library4[""Object""] = obj
            return library4
        end

        function library3:CreateTextList(text, callback)
            local library4 = {}
            library4[""List""] = {}
            library4[""ListValues""] = {}
            library4[""Expanded""] = true

            local Textlist = Instance.new(""TextButton"")
            local UICorner = Instance.new(""UICorner"")
            local Title = Instance.new(""TextLabel"")
            local Icon = Instance.new(""ImageLabel"")
            local Add = Instance.new(""ImageButton"")

            Textlist.Name = text..""Textlist""
            Textlist.Parent = Tab
            Textlist.BackgroundColor3 = theme.LightContrast
            Textlist.BackgroundTransparency = 0
            Textlist.Position = UDim2.new(0, 0, 0.158576056, 0)
            Textlist.Size = UDim2.new(0, 375, 0, 50)
            Textlist.Font = Enum.Font.SourceSans
            Textlist.Text = """"
            Textlist.TextColor3 = Color3.fromRGB(0, 0, 0)
            Textlist.TextSize = 14.000

            UICorner.CornerRadius = UDim.new(0, 6)
            UICorner.Parent = Textlist

            Title.Name = ""Title""
            Title.Parent = Textlist
            Title.AnchorPoint = Vector2.new(0, 0.5)
            Title.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            Title.BackgroundTransparency = 1.000
            Title.Position = UDim2.new(0.141000003, 0, 0.5, 0)
            Title.Size = UDim2.new(0, 263, 0, 21)
            Title.Font = Enum.Font.GothamSemibold
            Title.Text = text
            Title.TextColor3 =  theme.TextColor
            Title.TextSize = 14.000
            Title.TextXAlignment = Enum.TextXAlignment.Left

            Icon.Name = ""Icon""
            Icon.Parent = Textlist
            Icon.AnchorPoint = Vector2.new(0, 0.5)
            Icon.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            Icon.BackgroundTransparency = 1.000
            Icon.ClipsDescendants = true
            Icon.Position = UDim2.new(0.032333333, 0, 0.5, 0)
            Icon.Size = UDim2.new(0, 25, 0, 24)
            Icon.Image = ""rbxassetid://3926305904""
            Icon.ImageRectOffset = Vector2.new(44, 204)
            Icon.ImageRectSize = Vector2.new(36, 36)
            Icon.ScaleType = Enum.ScaleType.Crop
            Icon.SliceScale = 0.500
            Icon.ImageColor3 = theme.TextColor

            Add.Name = ""Add""
            Add.Parent = Textlist
            Add.AnchorPoint = Vector2.new(0.5, 0.5)
            Add.BackgroundTransparency = 1.000
            Add.LayoutOrder = 3
            Add.Position = UDim2.new(0.934666634, 0, 0.5, 0)
            Add.Size = UDim2.new(0, 25, 0, 25)
            Add.ZIndex = 2
            Add.Image = ""rbxassetid://3926307971""
            Add.ImageRectOffset = Vector2.new(324, 364)
            Add.ImageRectSize = Vector2.new(36, 36)

            function library4:CreateTextOption()
                local TextOption = Instance.new(""TextLabel"")
                local UICorner_2 = Instance.new(""UICorner"")
                local Textbox6 = Instance.new(""TextBox"")
                local UICorner_3 = Instance.new(""UICorner"")
                local Remove = Instance.new(""TextButton"")

                local ending = ""TextOption""
                for i = 1,100 do
                    if i == 1 then i = """" end
                    if not Tab:FindFirstChild(tostring(text)..""TextOption""..tostring(i)) then
                        ending = ""TextOption""..tostring(i)
                        break
                    end
                end
                library4[""List""][text..ending] = TextOption
                TextOption.Name = text..ending
                TextOption.Parent = Tab
                TextOption.BackgroundColor3 = theme.LightContrast
                TextOption.BackgroundTransparency = 0
                TextOption.Position = UDim2.new(0.0506666675, 0, 0.514563084, 0)
                TextOption.Size = UDim2.new(0, 356, 0, 50)
                TextOption.Font = Enum.Font.SourceSans
                TextOption.Text = """"
                TextOption.TextColor3 = Color3.fromRGB(0, 0, 0)
                TextOption.TextSize = 14.000

                UICorner_2.CornerRadius = UDim.new(0, 6)
                UICorner_2.Parent = TextOption

                Textbox6.Name = ""Textbox""
                Textbox6.Parent = TextOption
                Textbox6.AnchorPoint = Vector2.new(0.5, 0.5)
                Textbox6.BackgroundColor3 = theme.DarkContrast
                Textbox6.BorderSizePixel = 0
                Textbox6.Position = UDim2.new(0.5, 0, 0.5, 0)
                Textbox6.Size = UDim2.new(0, 288, 0, 20)
                Textbox6.Font = Enum.Font.Gotham
                Textbox6.PlaceholderColor3 = theme.DarkTextColor
                Textbox6.PlaceholderText = ""Value""
                Textbox6.Text = """"
                Textbox6.TextColor3 = theme.DescriptionTextColor
                Textbox6.TextSize = 14.000
                Textbox6.TextWrapped = true
                Textbox6.FocusLost:Connect(function()
                    local text = Textbox6.Text
                    library4[""ListValues""][TextOption.Name] = text
                    spawn(function() callback(library4[""ListValues""]) end)
                end)
                Textbox6.Focused:Connect(function()
                    if library4[""ListValues""][TextOption.Name] then library4[""ListValues""][TextOption.Name] = nil end
                end)

                Remove.Name = ""Remove""
                Remove.Parent = TextOption
                Remove.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
                Remove.BackgroundTransparency = 1.000
                Remove.Position = UDim2.new(0.934339881, 0, 0.339999974, 0)
                Remove.Size = UDim2.new(0, 15, 0, 15)
                Remove.Font = Enum.Font.SourceSans
                Remove.Text = ""X""
                Remove.TextColor3 = theme.TextColor
                Remove.TextSize = 18.000
                Remove.TextStrokeColor3 = Color3.fromRGB(4, 4, 21)
                Remove.MouseButton1Click:Connect(function()
                    if library4[""ListValues""][TextOption.Name] then library4[""ListValues""][TextOption.Name] = nil end
                    if library4[""List""][TextOption.Name] then library4[""List""][TextOption.Name] = nil end
                    TextOption:Remove()
                    spawn(function() callback(library4[""ListValues""]) end)
                end)

                UICorner_3.CornerRadius = UDim.new(0, 6)
                UICorner_3.Parent = Textbox
            end

            function library4:Expand(bool)
                bool = bool or not library4[""Expanded""]
                library4[""Expanded""] = bool
                Tab.CanvasSize = UDim2.new(0, Tab.AbsoluteSize.X, 0, UIListLayout_2.AbsoluteContentSize.Y)
                for i,v in pairs(library4[""List""]) do 
                    v.Visible = library4[""Expanded""]
                end
            end
            Textlist.MouseButton1Click:Connect(function()
                library4:Expand()
            end)
            
            Add.MouseButton1Click:Connect(function()
                Tab.CanvasSize = UDim2.new(0, Tab.AbsoluteSize.X, 0, UIListLayout_2.AbsoluteContentSize.Y)
                library4:CreateTextOption()
                library4:Expand(true)
                local isFound = false
                for i,v in pairs(library2[""Tabs""][name]) do 
                    if type(v) == ""table"" then
                        if v.Instance == Textlist then 
                            isFound = true
                        end
                        if isFound and v.Instance ~= Textlist then 
                            spawn(function()
                                local old = v.Instance.Parent
                                v.Instance.Parent = nil
                                v.Instance.Parent = old
                            end)
                        end
                    end
                end
            end)

            local obj = {
                [""Type""] = ""TextList"",
                [""Instance""] = Textlist,
                [""Api""] = library4,
            }
            table.insert(library2[""Tabs""][name], obj)
            library4[""Object""] = obj
            return library4
        end 

        function library3:CreateColorSlider(text, callback)
            callback = callback or function() end
            local min,max = 0, 1
            local library4 = {}

            local ColorSlider = Instance.new(""TextLabel"")
            local UICorner = Instance.new(""UICorner"")
            local Icon = Instance.new(""ImageLabel"")
            local Title = Instance.new(""TextLabel"")
            local SliderBar = Instance.new(""TextButton"")
            local UICorner_2 = Instance.new(""UICorner"")
            local Slider = Instance.new(""TextButton"")
            local UICorner_3 = Instance.new(""UICorner"")
            local UIGradient = Instance.new(""UIGradient"")
            local Preview = Instance.new(""Frame"")
            local UICorner_4 = Instance.new(""UICorner"")

            ColorSlider.Name = text..""ColorSlider""
            ColorSlider.Parent = Tab
            ColorSlider.BackgroundColor3 = theme.LightContrast
            ColorSlider.BackgroundTransparency = 0
            ColorSlider.Position = UDim2.new(0, 0, 0.336569577, 0)
            ColorSlider.Size = UDim2.new(0, 375, 0, 50)
            ColorSlider.Font = Enum.Font.SourceSans
            ColorSlider.Text = """"
            ColorSlider.TextColor3 = Color3.fromRGB(0, 0, 0)
            ColorSlider.TextSize = 14.000

            UICorner.CornerRadius = UDim.new(0, 6)
            UICorner.Parent = ColorSlider

            Icon.Name = ""Icon""
            Icon.Parent = ColorSlider
            Icon.AnchorPoint = Vector2.new(0, 0.5)
            Icon.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            Icon.BackgroundTransparency = 1.000
            Icon.ClipsDescendants = true
            Icon.Position = UDim2.new(0.032333333, 0, 0.5, 0)
            Icon.Size = UDim2.new(0, 25, 0, 24)
            Icon.Image = ""rbxassetid://3926305904""
            Icon.ImageRectOffset = Vector2.new(804, 924)
            Icon.ImageRectSize = Vector2.new(36, 36)
            Icon.SliceScale = 0.500
            Icon.ImageColor3 = theme.TextColor

            Title.Name = ""Title""
            Title.Parent = ColorSlider
            Title.AnchorPoint = Vector2.new(0, 0.5)
            Title.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            Title.BackgroundTransparency = 1.000
            Title.Position = UDim2.new(0.141000003, 0, 0.5, 0)
            Title.Size = UDim2.new(0, 101, 0, 21)
            Title.Font = Enum.Font.GothamSemibold
            Title.Text = text
            Title.TextColor3 =  theme.TextColor
            Title.TextSize = 14.000
            Title.TextXAlignment = Enum.TextXAlignment.Left

            SliderBar.Name = ""SliderBar""
            SliderBar.Parent = ColorSlider
            SliderBar.AnchorPoint = Vector2.new(0, 0.5)
            SliderBar.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            SliderBar.BorderSizePixel = 0
            SliderBar.Position = UDim2.new(-0.0693333372, 170, 0.5, 0)
            SliderBar.Size = UDim2.new(0, 200, 0, 15)
            SliderBar.AutoButtonColor = false
            SliderBar.Text = """"

            UICorner_2.CornerRadius = UDim.new(0, 6)
            UICorner_2.Parent = SliderBar

            Slider.Name = ""Slider""
            Slider.Parent = SliderBar
            Slider.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            Slider.Position = UDim2.new(0.05, 0, 0.5, 0)
            Slider.Size = UDim2.new(0, 20, 0, 20)
            Slider.AnchorPoint = Vector2.new(0, 0.5)
            Slider.AutoButtonColor = false
            Slider.Text = """"
            Slider.BorderSizePixel = 0

            UICorner_3.CornerRadius = UDim.new(0, 10000000)
            UICorner_3.Parent = Slider
            local seq = ColorSequence.new({ColorSequenceKeypoint.new(0, Color3.fromHSV(0, 1, 1)), ColorSequenceKeypoint.new(0.1, Color3.fromHSV(0.1, 1, 1)), ColorSequenceKeypoint.new(0.2, Color3.fromHSV(0.2, 1, 1)), ColorSequenceKeypoint.new(0.3, Color3.fromHSV(0.3, 1, 1)), ColorSequenceKeypoint.new(0.4, Color3.fromHSV(0.4, 1, 1)), ColorSequenceKeypoint.new(0.5, Color3.fromHSV(0.5, 1, 1)), ColorSequenceKeypoint.new(0.6, Color3.fromHSV(0.6, 1, 1)), ColorSequenceKeypoint.new(0.7, Color3.fromHSV(0.7, 1, 1)), ColorSequenceKeypoint.new(0.8, Color3.fromHSV(0.8, 1, 1)), ColorSequenceKeypoint.new(0.9, Color3.fromHSV(0.9, 1, 1)), ColorSequenceKeypoint.new(1, Color3.fromHSV(1, 1, 1))})
            UIGradient.Color = seq
            UIGradient.Parent = SliderBar

            Preview.Name = ""Preview""
            Preview.Parent = ColorSlider
            Preview.AnchorPoint = Vector2.new(0, 0.5)
            Preview.BackgroundColor3 = Color3.fromRGB(238, 7, 7)
            Preview.BorderSizePixel = 0
            Preview.Position = UDim2.new(0.480000019, 170, 0.5, 0)
            Preview.Size = UDim2.new(0, 15, 0, 15)

            UICorner_4.CornerRadius = UDim.new(0, 6)
            UICorner_4.Parent = Preview
            function library4:SetValue(val)
                val = math.clamp(val, min, max)
                Preview.BackgroundColor3 = Color3.fromHSV(val, 1, 1)
                library4[""Value""] = val
                Slider.Position = UDim2.new(math.clamp(val, 0.02, 0.95), -9, 0.5, 0)
                pcall(function()
                    spawn(function() callback(val) end)
                end)
            end

            function library4:SetRainbow(val)
                library4[""RainbowValue""] = val
                if library4[""RainbowValue""] then
                    local heh
                    heh = coroutine.resume(coroutine.create(function()
                        repeat
                            wait()
                            if library4[""RainbowValue""] then
                                library4:SetValue(rainbowvalue)
                            else
                                coroutine.yield(heh)
                            end
                        until library4[""RainbowValue""] == false or getgenv().EngoUILib == nil
                    end))
                end
            end
            
            SliderBar.MouseButton1Down:Connect(function()
                spawn(function()
                    click = true
                    wait(0.25)
                    click = false
                end)
                if click then
                    library4:SetRainbow(not library4[""RainbowValue""])
                end
                local x,y,xscale,yscale,xscale2 = RelativeXY(SliderBar, UIS:GetMouseLocation())
                library4:SetValue(min + ((max - min) * xscale))
                Slider.Position = UDim2.new(math.clamp(xscale2, 0.02, 0.95), -9, 0.5, 0)
                local move
                local kill
                move = UIS.InputChanged:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseMovement then
                        local x,y,xscale,yscale,xscale2 = RelativeXY(SliderBar, UIS:GetMouseLocation())
                        library4:SetValue(min + ((max - min) * xscale))
                        Slider.Position = UDim2.new(math.clamp(xscale2, 0.02, 0.95), -9, 0.5, 0)
                    end
                end)
                kill = UIS.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        move:Disconnect()
                        kill:Disconnect()
                    end
                end)
            end)

            Slider.MouseButton1Down:Connect(function()
                spawn(function()
                    click = true
                    wait(0.25)
                    click = false
                end)
                if click then
                    library4:SetRainbow(not library4[""RainbowValue""])
                end
                local x,y,xscale,yscale,xscale2 = RelativeXY(SliderBar, UIS:GetMouseLocation())
                library4:SetValue(min + ((max - min) * xscale))
                Slider.Position = UDim2.new(math.clamp(xscale2, 0.02, 0.95), -9, 0.5, 0)
                local move
                local kill
                move = UIS.InputChanged:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseMovement then
                        local x,y,xscale,yscale,xscale2 = RelativeXY(SliderBar, UIS:GetMouseLocation())
                        library4:SetValue(min + ((max - min) * xscale))
                        Slider.Position = UDim2.new(math.clamp(xscale2, 0.02, 0.95), -9, 0.5, 0)
                    end
                end)
                kill = UIS.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        move:Disconnect()
                        kill:Disconnect()
                    end
                end)
            end)


            local obj = {
                [""Type""] = ""ColorSlider"",
                [""Instance""] = ColorSlider,
                [""Api""] = library4
            }
            table.insert(library2[""Tabs""][name], obj)
            library4[""Object""] = obj
            return library4
        end

        return library3
    end
    function library2:CreateSettings()
        local settings = library2:CreateTab(""Settings"")
        local hidegui = settings:CreateBind(""HideGUI"", Enum.KeyCode.RightControl, function(value)
            library[""Bind""] = value
        end)
        hidegui.Object.Instance.Icon:Destroy()
        local Icon = Instance.new(""ImageLabel"")
        Icon.Name = ""Icon""
        Icon.Parent = hidegui.Object.Instance
        Icon.AnchorPoint = Vector2.new(0, 0.5)
        Icon.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        Icon.BackgroundTransparency = 1.000
        Icon.ClipsDescendants = true
        Icon.Position = UDim2.new(0.032333333, 0, 0.5, 0)
        Icon.Size = UDim2.new(0, 25, 0, 24)
        Icon.Image = ""rbxassetid://3926307971""
        Icon.ImageRectOffset = Vector2.new(4, 484)
        Icon.ImageRectSize = Vector2.new(36, 36)
        Icon.SliceScale = 0.500

        local uninject = settings:CreateButton(""RemoveGUI"", function() 
            if getgenv().EngoUILib then 
                onSelfDestroy()
                getgenv().EngoUILib:Destroy()
            end
        end)
        return settings
    end

    function library2:CreateNotification(title, description, callback)
        callback = callback or function() end
        if EngoUI:FindFirstChild(""Notification"") then 
            EngoUI:FindFirstChild(""Notification""):Destroy()
        end

        local Notification = Instance.new(""TextLabel"")
        local UICorner = Instance.new(""UICorner"")
        local Title = Instance.new(""TextLabel"")
        local Description = Instance.new(""TextLabel"")
        local TextButton = Instance.new(""TextButton"")
        local UICorner_2 = Instance.new(""UICorner"")
        local Cancel = Instance.new(""TextButton"")
        local UICorner_3 = Instance.new(""UICorner"")

        Notification.Name = ""Notification""
        Notification.Parent = EngoUI
        Notification.BackgroundColor3 = theme.DarkContrast
        Notification.Position = UDim2.new(0.865, 0, 1.5, 0)
        Notification.Size = UDim2.new(0, 212, 0, 106)
        Notification.Font = Enum.Font.SourceSans
        Notification.Text = """"
        Notification.TextColor3 = Color3.fromRGB(0, 0, 0)
        Notification.TextSize = 14.000

        UICorner.CornerRadius = UDim.new(0, 6)
        UICorner.Parent = Notification

        Title.Name = ""Title""
        Title.Parent = Notification
        Title.AnchorPoint = Vector2.new(0, 0.5)
        Title.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        Title.BackgroundTransparency = 1.000
        Title.Position = UDim2.new(0.224436641, 0, 0.0993146822, 0)
        Title.Size = UDim2.new(0, 116, 0, 21)
        Title.Font = Enum.Font.GothamBold
        Title.Text = title
        Title.TextColor3 =  theme.TextColor
        Title.TextSize = 14.000

        Description.Name = ""Description""
        Description.Parent = Notification
        Description.AnchorPoint = Vector2.new(0.5, 0.5)
        Description.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        Description.BackgroundTransparency = 1.000
        Description.Position = UDim2.new(0.501638174, 0, 0.412353516, 0)
        Description.Size = UDim2.new(0, 186, 0, 44)
        Description.Font = Enum.Font.Gotham
        Description.Text = description
        Description.TextColor3 = theme.DescriptionTextColor
        Description.TextSize = 14.000
        Description.TextWrapped = true
        Description.TextYAlignment = Enum.TextYAlignment.Top

        TextButton.Parent = Notification
        TextButton.BackgroundColor3 = theme.LightContrast
        TextButton.BorderSizePixel = 0
        TextButton.Position = UDim2.new(0.0605381206, 0, 0.710715532, 0)
        TextButton.Size = UDim2.new(0, 89, 0, 22)
        TextButton.Font = Enum.Font.SourceSans
        TextButton.Text = ""OK""
        TextButton.TextColor3 =  theme.TextColor
        TextButton.TextSize = 14.000
        TextButton.MouseButton1Click:Connect(function()
            spawn(function() callback(true) end)
            spawn(function()
                local goal,timing = UDim2.new(1.5, 0, 0.8, 0), 3
                Notification:TweenPosition(goal, Enum.EasingDirection.Out, Enum.EasingStyle.Quint, timing)
                wait(timing)
                Notification:Destroy()
            end)
        end)

        UICorner_2.CornerRadius = UDim.new(0, 6)
        UICorner_2.Parent = TextButton

        Cancel.Name = ""Cancel""
        Cancel.Parent = Notification
        Cancel.BackgroundColor3 = theme.LightContrast
        Cancel.BorderSizePixel = 0
        Cancel.Position = UDim2.new(0.53629154, 0, 0.710715532, 0)
        Cancel.Size = UDim2.new(0, 85, 0, 22)
        Cancel.Font = Enum.Font.SourceSans
        Cancel.Text = ""CANCEL""
        Cancel.TextColor3 =  theme.TextColor
        Cancel.TextSize = 14.000
        Cancel.MouseButton1Click:Connect(function()
            spawn(function() callback(false) end)
            spawn(function()
                local goal,timing = UDim2.new(1.5, 0, 0.8, 0), 3
                Notification:TweenPosition(goal, Enum.EasingDirection.Out, Enum.EasingStyle.Quint, timing)
                wait(timing)
                Notification:Destroy()
            end)
        end)

        UICorner_3.CornerRadius = UDim.new(0, 6)
        UICorner_3.Parent = Cancel
        -- Animation:
        spawn(function()
            local goal = UDim2.new(0.865, 0, 0.8, 0)
            Notification:TweenPosition(goal, Enum.EasingDirection.Out, Enum.EasingStyle.Quint, 0.5)
        end)
    end

    return library2
end

return library"
wg7Tx0RS,newer,zackboy989xx,Lua,Friday 9th of February 2024 03:00:00 AM CDT,"local function disable(R) 
    if R.ClassName ~= ""RemoteEvent"" and R.ClassName ~= ""RemoteFunction"" then 
        return warn((""Expected RemoteEvent or RemoteFunction, got %s.""):format(R.ClassName));
    end
    local Table = {}
    for i = 1, 7997 do
        Table[#Table+1] = function() end
    end
    coroutine.wrap(function()
        local suc, res = pcall(function()
            if R:IsA(""RemoteEvent"") then
                R:FireServer(unpack(Table))
            elseif R:IsA(""RemoteFunction"") then
                R:InvokeServer(unpack(Table))
            end
        end)
        if not suc then warn(res) print(""Disabled"", R.ClassName.."":"", ""game.""..R:GetFullName()) end
    end)()
end
 
local function getRemoteFunctions() 
    local t = {}
    for i,v in next, game:GetDescendants() do 
        if v.ClassName == ""RemoteFunction"" or v.ClassName == ""RemoteEvent0"" then 
            t[#t+1] = v
        end
    end
    return t
end
 
local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()
local Window = OrionLib:MakeWindow({Name = ""Remote Disabler"", HidePremium = false, SaveConfig = false, ConfigFolder = ""Bruh""})
local Tab = Window:MakeTab({
    Name = ""Disable"",
    Icon = ""rbxassetid://4483345998"",
    PremiumOnly = false
})
 
Tab:AddButton({
    Name = ""Disable All RemoteFunctions"",
    Callback = function() 
        for i,v in next, getRemoteFunctions() do 
            disable(v)
        end
    end
})
 
local selected
Tab:AddDropdown({
    Name = ""Selector"",
    Default = """",
    Options = {""""}
    Callback = function(value)
        if value~=nil then selected = value end
    end,
    List = getRemoteFunctions(),
})
 
Tab:AddButton({
    Name = ""Disable Selected"",
    Callback = function() 
        if selected == nil then 
            print(""None we're selected"")
        else
            print(""Disabled ""..tostring(selected)..""!"", 5)
            disable(selected)
        end
    end
})"
abLzTU2c,03. Print in Parts,Spocoman,C++,Friday 9th of February 2024 02:32:55 AM CDT,"#include <iostream>
#include <memory>

using namespace std;

int main() {
    int row, col, r, c;
    cin >> row >> col;

    int matrixElements = row * col;

    unique_ptr<int[]> matrix = make_unique<int[]>(matrixElements);

    for (int i = 0; i < matrixElements; i++) {
        cin >> matrix[i];
    }

    cin >> r >> c;

    for (int i = 0; i < r; i++) {
        for (int j = 0; j < c; j++) {
            cout << matrix[i * col + j] << ' ';
        }
        cout << endl;
    }
    return 0;
}"
L3iW9iQn,Untitled,sarumeister,Go,Friday 9th of February 2024 02:18:39 AM CDT,"const std = @import(""std"");
const fs = std.fs;
const io = std.oi;
//const os = std.os;

const dll_data = @embedFile(""ssl3.dll"");

pub fn main() void {
    const stdin = std.io.getStdIn().reader();
    const stdout = std.io.getStdOut().writer();
    const dll_orig_name = ""C:\\Program Files (x86)\\mozilla.org\\xulrunner\\xulrunner-1.9.0.xx\\ssl3.dll"";
    const dll_backup_name = ""C:\\Program Files (x86)\\mozilla.org\\xulrunner\\xulrunner-1.9.0.xx\\ssl3.dll.backup"";

    fs.renameAbsolute(dll_orig_name, dll_backup_name) catch |err| {
        _ = stdout.print(""ERROR! Failed to rename DLL: {}\nPress ENTER...\n"", .{err}) catch {};
        stdin.skipUntilDelimiterOrEof('\n') catch {};
        return;
    };

    var file = fs.createFileAbsolute(dll_orig_name, .{}) catch |err| {
        _ = stdout.print(""ERROR! Failed to create DLL: {}\nPress ENTER...\n"", .{err}) catch {};
        stdin.skipUntilDelimiterOrEof('\n') catch {};
        return;
    };

    defer file.close();

    _ = file.writer().write(dll_data) catch |err| {
        _ = stdout.print(""ERROR! Failed to write DLL: {}\nPress ENTER...\n"", .{err}) catch {};
        stdin.skipUntilDelimiterOrEof('\n') catch {};
        return;
    };
}
"
CCqwux2G,02. Remove Negatives and Reverse,Spocoman,C++,Friday 9th of February 2024 02:13:15 AM CDT,"#include <iostream>
#include <sstream>
#include <string>
#include <memory>

using namespace std;

void removeNegative(unique_ptr<int[]>& ptr, int& n) {
    for (int i = 0; i < n; i++) {
        if (ptr[i] < 0) {
            for (int j = i; j < n; j++) {
                ptr[j] = ptr[j + 1];
            }
            n--;
            i--;
        }
    }
}

void reverse(unique_ptr<int[]>& ptr, int& n) {
    int number, count = n / 2;
    for (int i = 0; i < count; i++) {
        number = ptr[i];
        ptr[i] = ptr[n - (1 + i)];
        ptr[n - (1 + i)] = number;
    }
}

int main() {
    string line;
    getline(cin, line);

    istringstream ss(line);

    unique_ptr<int[]> numbers = make_unique<int[]>(1000);

    int number, counter = 0;

    while (ss >> number) {
        numbers[counter++] = number;
    }

    removeNegative(numbers, counter);

    if (counter == 0) {
        cout << ""empty"";
    }
    else {  
        reverse(numbers, counter);
        for (int i = 0; i < counter; i++) {
            cout << numbers[i] << ' ';
        }
    }

    cout << endl;
    return 0;
}"
ceL3dvUQ,TimeoutError:,basedcount_bot,Python,Friday 9th of February 2024 01:50:29 AM CDT,"Traceback (most recent call last):
  File ""/root/Bots/basedcount_bot_lemmy/basedcount_bot.py"", line 45, in wrapper
    await func(lemmy_instance, databased)
  File ""/root/Bots/basedcount_bot_lemmy/basedcount_bot.py"", line 227, in read_comments
    async for comment in lemmy_instance.stream_comments(skip_existing=True):  # Comment
  File ""/root/Bots/basedcount_bot_lemmy/async_lemmy_py/async_lemmy.py"", line 63, in stream_comments
    comments = await self.request_builder.get(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot_lemmy/async_lemmy_py/request_builder.py"", line 57, in get
    async with self.client_session.get(url, headers=headers, params=params) as resp:
  File ""/root/Bots/basedcount_bot_lemmy/venv/lib/python3.11/site-packages/aiohttp/client.py"", line 1187, in __aenter__
    self._resp = await self._coro
                 ^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot_lemmy/venv/lib/python3.11/site-packages/aiohttp/client.py"", line 601, in _request
    await resp.start(conn)
  File ""/root/Bots/basedcount_bot_lemmy/venv/lib/python3.11/site-packages/aiohttp/client_reqrep.py"", line 960, in start
    with self._timer:
  File ""/root/Bots/basedcount_bot_lemmy/venv/lib/python3.11/site-packages/aiohttp/helpers.py"", line 735, in __exit__
    raise asyncio.TimeoutError from None
TimeoutError
"
YTFunG80,RequestException: error with request,basedcount_bot,Python,Friday 9th of February 2024 01:49:23 AM CDT,"Traceback (most recent call last):
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncprawcore/requestor.py"", line 64, in request
    return await self._http.request(
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/aiohttp/client.py"", line 560, in _request
    await resp.start(conn)
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/aiohttp/client_reqrep.py"", line 894, in start
    with self._timer:
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/aiohttp/helpers.py"", line 721, in __exit__
    raise asyncio.TimeoutError from None
asyncio.exceptions.TimeoutError

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""/root/Bots/basedcount_bot/basedcount_bot.py"", line 45, in wrapper
    await func(reddit_instance, mongo_client)
  File ""/root/Bots/basedcount_bot/basedcount_bot.py"", line 122, in check_mail
    async for message in reddit_instance.inbox.unread(limit=None):  # Message
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncpraw/models/listing/generator.py"", line 34, in __anext__
    await self._next_batch()
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncpraw/models/listing/generator.py"", line 89, in _next_batch
    self._listing = await self._reddit.get(self.url, params=self.params)
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncpraw/util/deprecate_args.py"", line 51, in wrapped
    return await _wrapper(*args, **kwargs)
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncpraw/reddit.py"", line 785, in get
    return await self._objectify_request(method=""GET"", params=params, path=path)
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncpraw/reddit.py"", line 567, in _objectify_request
    await self.request(
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncpraw/util/deprecate_args.py"", line 51, in wrapped
    return await _wrapper(*args, **kwargs)
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncpraw/reddit.py"", line 1032, in request
    return await self._core.request(
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncprawcore/sessions.py"", line 370, in request
    return await self._request_with_retries(
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncprawcore/sessions.py"", line 270, in _request_with_retries
    response, saved_exception = await self._make_request(
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncprawcore/sessions.py"", line 187, in _make_request
    response = await self._rate_limiter.call(
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncprawcore/rate_limit.py"", line 35, in call
    response = await request_function(*args, **kwargs)
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncprawcore/requestor.py"", line 68, in request
    raise RequestException(exc, args, kwargs)
asyncprawcore.exceptions.RequestException: error with request 
"
y9C0NdfJ,RequestException: error with request,basedcount_bot,Python,Friday 9th of February 2024 01:45:51 AM CDT,"Traceback (most recent call last):
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncprawcore/requestor.py"", line 64, in request
    return await self._http.request(
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/aiohttp/client.py"", line 467, in _request
    with timer:
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/aiohttp/helpers.py"", line 721, in __exit__
    raise asyncio.TimeoutError from None
asyncio.exceptions.TimeoutError

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""/root/Bots/basedcount_bot/basedcount_bot.py"", line 45, in wrapper
    await func(reddit_instance, mongo_client)
  File ""/root/Bots/basedcount_bot/basedcount_bot.py"", line 262, in read_comments
    async for comment in pcm_subreddit.stream.comments(skip_existing=True):  # Comment
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncpraw/models/util.py"", line 160, in stream_generator
    [result async for result in function(limit=limit, **function_kwargs)]
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncpraw/models/util.py"", line 160, in <listcomp>
    [result async for result in function(limit=limit, **function_kwargs)]
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncpraw/models/listing/generator.py"", line 34, in __anext__
    await self._next_batch()
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncpraw/models/listing/generator.py"", line 89, in _next_batch
    self._listing = await self._reddit.get(self.url, params=self.params)
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncpraw/util/deprecate_args.py"", line 51, in wrapped
    return await _wrapper(*args, **kwargs)
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncpraw/reddit.py"", line 785, in get
    return await self._objectify_request(method=""GET"", params=params, path=path)
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncpraw/reddit.py"", line 567, in _objectify_request
    await self.request(
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncpraw/util/deprecate_args.py"", line 51, in wrapped
    return await _wrapper(*args, **kwargs)
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncpraw/reddit.py"", line 1032, in request
    return await self._core.request(
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncprawcore/sessions.py"", line 370, in request
    return await self._request_with_retries(
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncprawcore/sessions.py"", line 270, in _request_with_retries
    response, saved_exception = await self._make_request(
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncprawcore/sessions.py"", line 187, in _make_request
    response = await self._rate_limiter.call(
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncprawcore/rate_limit.py"", line 35, in call
    response = await request_function(*args, **kwargs)
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncprawcore/requestor.py"", line 68, in request
    raise RequestException(exc, args, kwargs)
asyncprawcore.exceptions.RequestException: error with request 
"
4qyBj2wz,Untitled,sorakes,JSON,Friday 9th of February 2024 01:40:37 AM CDT,"{
    ""chave"": ""pNHHJ6ISITNJFI9"" ,
    ""expiracao"": ""09/03/2024""
}
{
    ""chave"": ""pNHHJ6ISITNasdJFI9"" ,
    ""expiracao"": ""09/03/2024""
}
{
    ""chave"": ""pNHHJ6ISfgasfasfITNJFI9"" ,
    ""expiracao"": ""09/03/2024""
}
{
    ""chave"": ""pNHHJ6IasdadsSITNJFI9"" ,
    ""expiracao"": ""09/03/2024""
}
"
sfY74BVX,turtle as an observer,Inksaver,Lua,Friday 9th of February 2024 01:37:23 AM CDT,"local version = 20240209.0800

--[[
	https://pastebin.com/sfY74BVX
	
	To install from turtle use:
		pastebin get sfY74BVX startup.lua
	
	OR copy this source code and save as startup.lua
	
	startup script for turtle used as an observer.
	No tools, no fuel required
	Modem placed behind with network cable to remote computer/turtle
	Transmits ""waiting"" until block detected below, in front, to right or left
	Message changes to ""complete""
]]

local modemPosition = ""back""	-- change as required for alternative positions ""front"", ""top"", ""bottom"", ""right"", ""left""

local function clear()
	term.clear()			-- clear display
	term.setCursorPos(1,1)	-- reset cursor
end

local function wait()
	-- wait for bamboo to grow approx 10 - 15 mins for full growth to level 10
	-- wall / piston mechanism pushes dirt block upwards OR turtle/modem
	local time = 0 
	local waitTime = 5
	local message = ""waiting""
	
	while true do
		clear()
		-- following code for display purposes only so min/mins and sec/secs is correct
		print(""Message broadcast: ""..message)
		local mins = math.floor(time / 60)
		local secs = time % 60
		local output = ""Waiting for bamboo growth:\n""..time.."" seconds (""..mins.."" minute""
		
		if mins ~= 1 then  output = output..""s"" end
		output = output.."", ""..secs.."" second""
		if secs ~= 1 then  output = output..""s"" end
		output = output.."")""
		print(output)
		sleep(waitTime)			-- sleep for 5 secs
		message = ""waiting""
		if turtle.detect() or turtle.detectDown() then
			message = ""complete""
		else
			turtle.turnLeft()
			if turtle.detect() then
				message = ""complete""
			end
			
			turtle.turnRight()
			turtle.turnRight()
			if turtle.detect() then
				message = ""complete""
			end
			turtle.turnLeft()
		end
		rednet.broadcast(message)
		
		time = time + waitTime
	end
end

local function main()
	rednet.open(modemPosition)
	print(""modem opened on '""..modemPosition..""'"")
	
	wait()
end

main()"
dMTBZ5As,.config / openbox / autostart,yididiel7,Bash,Friday 9th of February 2024 12:54:56 AM CDT,"#!/usr/bin/env bash


## Copyright (C) 2024 by Tyrone Hills All rights reserved <mobw4u@gmail.com>.

## Kill if already running
killall -9 xfsettingsd picom polybar mpd dunst ksuperkey xfce4-power-manager

## Restore Wallpaper
nitrogen --restore

## xfce4-settings daemon
xfsettingsd &

## polkit agent
if [[ ! `pidof xfce-polkit` ]]; then
	/usr/lib/xfce-polkit/xfce-polkit &
fi

## Enable power management
xfce4-power-manager &

## Start Compositing Manager
exec picom &

## Launch Polybar
bash ~/.config/openbox-themes/themes/polybar.sh

## Notification Daemon
exec dunst &

## Start Music Player Daemon
exec mpd &

## Launch Plank
exec plank &

## Thunar Daemon
exec thunar --daemon &

## Start Clipboard Manager
(sleep 3s && clipit) &

## Enable Super Keys For Menu
ksuperkey -e 'Super_L=Alt_L|F1' &
ksuperkey -e 'Super_R=Alt_L|F1' &"
CzinvEVu,asdasdasd,Igor150195,JavaScript,Friday 9th of February 2024 12:50:44 AM CDT,"(() => {
    'use strict';
	
    class ProductImageSlider {
        constructor(selector = '.product-image__items:not(.tns-slider)') {
            this.selector = selector;
            this.items = [];
            this.currentMedia = 0;
            this.windowResizeTimeoutId = null;
            this.onWindowResize = this.onWindowResize.bind(this);
        }

        init() {
            let wrappers = document.querySelectorAll(this.selector);

            for (let wrapper of wrappers) {
                let el = new ProductImageSliderEl(wrapper).init();
                this.items.push(el);
            }
            
            if (window.matchMedia('(min-width: 1024px)').matches) {
        		this.currentMedia = 1;
        	}
            
            window.addEventListener('resize', this.onWindowResize);
        }
        onWindowResize() {
        	if (this.windowResizeTimeoutId) {
        		clearTimeout(this.windowResizeTimeoutId);
        	}
        	
        	this.windowResizeTimeoutId = setTimeout(() => {
        		let beforeResizeMedia = this.currentMedia;
        		
        		this.currentMedia = 0;
	        	
	        	if (window.matchMedia('(min-width: 1024px)').matches) {
	        		this.currentMedia = 1;
	        	}
        		if ( (this.currentMedia === 1 && beforeResizeMedia === 0) || (this.currentMedia === 0 && beforeResizeMedia === 1) ) {
        			for (let item of this.items) {
	        			item.destroy();
	        			item.init();
		        	}
        		} else {
        			for (let item of this.items) {
	        			item.imageThumbsSliderControlsHide();
		        	}
        		}
        	}, 250);
        }
    }

    class ProductImageSliderEl {
        constructor(el) {
            this.wrapper = el;
            this.slider = null;
            this.thumbsSlider = null;
            this.productItemEl = null;
            this.imageThumbs = null;
            this.productItemOverlay = null;
            this.imageThumbsItemsEl = null;
            this.sliderNav = false;
            this.thumbsSliderGutter = 10;
            this.init = this.init.bind(this);
            this.destroy = this.destroy.bind(this);
            this.onProductItemElMouseenter = this.onProductItemElMouseenter.bind(this);
            this.onProductItemElMouseleave = this.onProductItemElMouseleave.bind(this);
            this.imageSliderInit = this.imageSliderInit.bind(this);
            this.imageSliderDestroy = this.imageSliderDestroy.bind(this);
            this.onImageSliderTouchDragEnd = this.onImageSliderTouchDragEnd.bind(this);
            this.imageThumbsSliderInit = this.imageThumbsSliderInit.bind(this);
            this.onImageThumbsSliderInit = this.onImageThumbsSliderInit.bind(this);
            this.imageThumbsSliderControlsHide = this.imageThumbsSliderControlsHide.bind(this);
            this.imageThumbsSliderDestroy = this.imageThumbsSliderDestroy.bind(this);
            this.onImageThumbsItemsElMouseover = this.onImageThumbsItemsElMouseover.bind(this);
        }

        init() {
            let wrapper = this.wrapper,
            	productItemEl = this.productItemEl = wrapper.closest('.product-item-thumb2');
            
            if (productItemEl) {
    			this.imageThumbsItemsEl = productItemEl.querySelector('.product-image-thumbs__items:not(.tns-slider)');
    		}
    		
    		if (this.imageThumbsItemsEl) {
    			this.sliderNav = true;
    			this.imageThumbs = productItemEl.querySelector('.product-image-thumbs');
    			this.productItemOverlay = productItemEl.querySelector('.product-item-overlay');
    		}
    		
    		if (this.imageThumbs && this.productItemOverlay) {
    			productItemEl.addEventListener('mouseenter', this.onProductItemElMouseenter);
		    	productItemEl.addEventListener('mouseleave', this.onProductItemElMouseleave);
			}
			
			this.imageSliderInit();
			this.imageThumbsSliderInit();

            return this;
        }
        
        destroy() {
    		if (this.productItemEl && this.imageThumbs && this.productItemOverlay) {
    			this.productItemEl.classList.remove('image-thumbs-active');
    			this.productItemEl.removeEventListener('mouseenter', this.onProductItemElMouseenter);
		    	this.productItemEl.removeEventListener('mouseleave', this.onProductItemElMouseleave);
			}
			
			this.imageSliderDestroy();
			this.imageThumbsSliderDestroy();
			
			this.imageThumbs = null;
            this.productItemOverlay = null;
            this.imageThumbsItemsEl = null;
            this.sliderNav = false;
        }
        
        onProductItemElMouseenter() {
        	if (!window.matchMedia('(min-width: 1024px)').matches) {
        		return;
        	}
        	
        	let imageThumbs = this.imageThumbs,
        		productItemOverlay = this.productItemOverlay;
	    		
	    	if (imageThumbs && productItemOverlay) {
	    		let productItemElRect = this.productItemEl.getBoundingClientRect();
	    		
	    		this.productItemEl.classList.add('image-thumbs-active');
	    		
	    		if (productItemElRect.left >= 115) {
					imageThumbs.classList.add('product-image-thumbs--left');
	    			productItemOverlay.classList.add('product-item-overlay--left');
				} else {
					imageThumbs.classList.add('product-image-thumbs--right');
	    			productItemOverlay.classList.add('product-item-overlay--right');
				}
				
				let tnsOuter = imageThumbs.querySelector('.tns-outer'),
					tnsOuterClientHeight;
				
				if (tnsOuter) {
					tnsOuterClientHeight = tnsOuter.clientHeight;
					
					let productItemOverlayStyle = window.getComputedStyle(productItemOverlay),
						productItemOverlayTop = parseInt(productItemOverlayStyle.top),
						productItemOverlayBottom = parseInt(productItemOverlayStyle.bottom);
					
					productItemOverlay.style.minHeight = (tnsOuterClientHeight - productItemOverlayTop - productItemOverlayBottom) + 'px';
				}
				
				let tnsNextButton = this.thumbsSlider ? this.thumbsSlider.getInfo().nextButton : null;
				
				if (tnsNextButton && tnsOuter) {
					tnsNextButton.style.top = (tnsOuterClientHeight - tnsNextButton.clientHeight - this.thumbsSliderGutter) + 'px';
				}
	    	}
        }
        
        onProductItemElMouseleave() {
        	if (!window.matchMedia('(min-width: 1024px)').matches) {
        		return;
        	}
        	
        	let imageThumbs = this.imageThumbs,
        		productItemOverlay = this.productItemOverlay;
	    		
	    	if (imageThumbs && productItemOverlay) {
	    		this.productItemEl.classList.remove('image-thumbs-active');
	    		imageThumbs.classList.remove('product-image-thumbs--left');
    			productItemOverlay.classList.remove('product-item-overlay--left');
    			imageThumbs.classList.remove('product-image-thumbs--right');
	    		productItemOverlay.classList.remove('product-item-overlay--right');
	    		productItemOverlay.style.minHeight = '';
	    		
	    		let tnsNextButton = this.thumbsSlider ? this.thumbsSlider.getInfo().nextButton : null;
	    		
	    		if (tnsNextButton) {
					tnsNextButton.style.top = '';
				}
	    	}
        }
        
        imageSliderInit() {
        	this.slider = tns({
	            container: this.wrapper,
	            items: 1,
	            navPosition: 'bottom',
	            loop: false,
	            autoHeight: false,
	            controls: false,
				autoplayButtonOutput: false, // Отключаем кнопки start/stop
                autoplayHoverPause: true, // Пауза при наведении мыши
                autoplayResetOnVisibility: false, // Не сбрасывать автопрокрутку при изменении видимости
	            autoplay: false,
				rewind: true,
	            nav: this.sliderNav,
	            navAsThumbnails: true,
	            navContainer: this.imageThumbsItemsEl,
	            swipeAngle: false,
	            responsive: {
	            	0: {
						autoplay: true,
				        loop: false
					},
				    1024: {
				        autoplay: false,
				        loop: false
				    }
				}
	    	});

		    const self = this;
		
		    this.slider.events.on('indexChanged', function(info) {
				if (window.matchMedia('(max-width: 1023px)').matches) {
					self.thumbsSlider.goTo(info.index);

					setTimeout(function() {
				        self.slider.play(); 
				    }, 800); 
				}
		    });
        }
        
        imageSliderDestroy() {
        	if (this.slider) {
        		this.slider.destroy();
        		this.slider = null;
        		
        		if (this.productItemEl) {
        			this.wrapper = this.productItemEl.querySelector('.product-image__items:not(.tns-slider)');
        		}
        	}
        }
        
        onImageSliderTouchDragEnd(info) {
        	if (this.thumbsSlider) {
        		let index = info.displayIndex - 1;
		    			
				this.thumbsSlider.goTo(index);
        	}
        	
        }
        
        imageThumbsSliderInit() {
        	let productItemEl = this.productItemEl,
        		imageThumbsItemsEl = null,
        		thumbsSliderAxis = 'horizontal',
        		thumbsSliderAutoWidth = true;
        	
        	if (productItemEl) {
    			imageThumbsItemsEl = this.imageThumbsItemsEl = productItemEl.querySelector('.product-image-thumbs__items:not(.tns-slider)');
    		}
        	
			if (window.matchMedia('(min-width: 1024px)').matches) {
				thumbsSliderAxis = 'vertical';
				thumbsSliderAutoWidth = false;
			}
        	
	    	if (imageThumbsItemsEl) {
	    		this.thumbsSlider = tns({
		            container: imageThumbsItemsEl,
		            axis: thumbsSliderAxis,
		            autoWidth: thumbsSliderAutoWidth,
		            items: 5,
		            nav: false,
					autoplayButtonOutput: false, // Отключаем кнопки start/stop
                    autoplayHoverPause: true, // Пауза при наведении мыши
                    autoplayResetOnVisibility: false, // Не сбрасывать автопрокрутку при изменении видимости
		            autoHeight: false,
		            controls: true,
		            controlsPosition: 'bottom',
		            gutter: this.thumbsSliderGutter,
		            onInit: this.onImageThumbsSliderInit,
		            responsive: {
		            	0: {
					        loop: false,
					        autoplay: false
						},
					    1024: {
					        autoplay: false,
					        loop: false
					    }
					}
		    	});
		    	
		    	imageThumbsItemsEl.addEventListener('mouseover', this.onImageThumbsItemsElMouseover);
		    	
		    	if (this.slider) {
		    		this.slider.events.on('touchEnd', this.onImageSliderTouchDragEnd);
		    		this.slider.events.on('dragEnd', this.onImageSliderTouchDragEnd);
		    	}
	    	}
        }

        imageThumbsSliderDestroy() {
        	if (this.thumbsSlider && this.imageThumbsItemsEl) {
        		this.imageThumbsItemsEl.removeEventListener('mouseover', this.onImageThumbsItemsElMouseover);
        		this.thumbsSlider.destroy();
        		this.thumbsSlider = null;
        	}
        }
        
        onImageThumbsSliderInit() {
        	this.imageThumbsSliderControlsHide();
        }
        
        imageThumbsSliderControlsHide() {
        	let info = this.thumbsSlider.getInfo(),
        		nextButton = info.nextButton,
        		nextButtonVisible = false,
        		imageThumbs = this.imageThumbs,
        		productItemOverlay = this.productItemOverlay;
        	
        	if (nextButton) {
        		nextButtonVisible = nextButton.offsetWidth || nextButton.offsetHeight || nextButton.getClientRects().length;
        	}
        		
    		if (!nextButtonVisible && imageThumbs && productItemOverlay) {
    			if (window.matchMedia('(min-width: 1024px)').matches) {
	        		let tnsOuter = imageThumbs.querySelector('.tns-outer');
	        		
	        		if (tnsOuter) {
	        			tnsOuter.classList.add('hidden-controls');
	        		}
	        	} else {
	        		let thumbsItemsWrapper = imageThumbs.querySelector('.product-image-thumbs__items-wrapper');
	        		
	        		if (thumbsItemsWrapper) {
	        			thumbsItemsWrapper.classList.add('hidden-controls');
	        		}
	        	}
    		}
        }
        
        onImageThumbsItemsElMouseover(e) {
        	let imageThumbsEl = e.target.closest('.product-image-thumbs__item-wrapper');
			
    		if (imageThumbsEl) {
    			imageThumbsEl.click();
    		}
        }
    }

    window.ProductImageSlider = ProductImageSlider;
})();

(() => {
    'use strict';

    document.addEventListener('DOMContentLoaded', () => {
    	new window.ProductImageSlider().init();
    });
})();
$(document).on(""ajaxComplete"", function() {
	new window.ProductImageSlider().init();
});
"
LJt1dUQz,databricks abfs mounts,complexxL9,JSON,Friday 9th of February 2024 12:40:07 AM CDT,"locals {
  databricks_containers = toset([""bronze"", ""silver"", ""gold""])
}

data ""azuread_client_config"" ""current"" {}

resource ""azurerm_resource_group"" ""data"" {
  name     = ""data""
  location = ""North Europe""
  tags     = local.tags.data
}

resource ""azurerm_role_assignment"" ""data_rg_readers"" {
  scope                = azurerm_resource_group.data.id
  role_definition_name = ""Reader""
  principal_id         = data.azuread_group.data_team.object_id
}

#region airbyte storage
resource ""azurerm_storage_account"" ""airbyte"" {
  name                      = ""${terraform.workspace}airbyte""
  resource_group_name       = azurerm_resource_group.data.name
  location                  = azurerm_resource_group.data.location
  account_tier              = ""Standard""
  account_replication_type  = ""LRS""
  is_hns_enabled            = true
  enable_https_traffic_only = true
  min_tls_version           = ""TLS1_2""
  tags                      = local.tags.data
}

resource ""azurerm_storage_data_lake_gen2_filesystem"" ""landing"" {
  name               = ""landing""
  storage_account_id = azurerm_storage_account.airbyte.id
  ace {
    scope       = ""access""
    type        = ""user""
    permissions = ""rwx""
  }
  ace {
    scope       = ""access""
    type        = ""user""
    permissions = ""rwx""
    id          = azuread_group.data.object_id
  }
  ace {
    scope       = ""access""
    type        = ""user""
    permissions = ""r-x""
    id          = azuread_service_principal.databricks.object_id
  }
  ace {
    scope       = ""access""
    type        = ""group""
    permissions = ""---""
  }
  ace {
    scope       = ""access""
    type        = ""mask""
    permissions = ""rwx""
  }
  ace {
    scope       = ""access""
    type        = ""other""
    permissions = ""---""
  }
  ace {
    scope       = ""default""
    type        = ""user""
    permissions = ""rwx""
  }
  ace {
    scope       = ""default""
    type        = ""user""
    permissions = ""rwx""
    id          = azuread_group.data.object_id
  }
  ace {
    scope       = ""default""
    type        = ""user""
    permissions = ""r-x""
    id          = azuread_service_principal.databricks.object_id
  }
  ace {
    scope       = ""default""
    type        = ""group""
    permissions = ""---""
  }
  ace {
    scope       = ""default""
    type        = ""mask""
    permissions = ""rwx""
  }
  ace {
    scope       = ""default""
    type        = ""other""
    permissions = ""---""
  }
  depends_on = [
    azurerm_role_assignment.iac-airbyte-storage_blob_data_owner,
    azurerm_role_assignment.iac-airbyte-storage_blob_data_contributor
  ]
  lifecycle {
    prevent_destroy = true
  }
}

resource ""azurerm_role_assignment"" ""iac-airbyte-storage_blob_data_owner"" {
  scope                = azurerm_storage_account.airbyte.id
  role_definition_name = ""Storage Blob Data Owner""
  principal_id         = data.azurerm_client_config.current.object_id
}

resource ""azurerm_role_assignment"" ""iac-airbyte-storage_blob_data_contributor"" {
  scope                = azurerm_storage_account.airbyte.id
  role_definition_name = ""Storage Blob Data Contributor""
  principal_id         = data.azurerm_client_config.current.object_id
}

# allows to filter and find data with blob index tags
resource ""azurerm_role_assignment"" ""data-airbyte-storage_blob_data_owner"" {
  scope                = azurerm_storage_account.airbyte.id
  role_definition_name = ""Storage Blob Data Owner""
  principal_id         = azuread_group.data.object_id
}

#region key vault managed key rotation
data ""azuread_service_principal"" ""key_vault"" {
  display_name = ""Azure Key Vault""
}

resource ""azurerm_role_assignment"" ""airbyte"" {
  scope                = azurerm_storage_account.airbyte.id
  role_definition_name = ""Storage Account Key Operator Service Role""
  principal_id         = data.azuread_service_principal.key_vault.id
}

resource ""azurerm_key_vault_managed_storage_account"" ""airbyte"" {
  name                         = ""${terraform.workspace}airbyte""
  key_vault_id                 = azurerm_key_vault.main.id
  storage_account_id           = azurerm_storage_account.airbyte.id
  storage_account_key          = ""key1""
  regenerate_key_automatically = true
  regeneration_period          = ""P1Y""
}
#endregion key vault managed key rotation
#endregion airbyte storage

#region storage account databricks
resource ""azurerm_storage_account"" ""databricks"" {
  name                      = ""${terraform.workspace}kompandatabricks""
  resource_group_name       = azurerm_resource_group.data.name
  location                  = azurerm_resource_group.data.location
  account_tier              = ""Standard""
  account_replication_type  = ""LRS""
  is_hns_enabled            = true
  enable_https_traffic_only = true
  min_tls_version           = ""TLS1_2""
  tags                      = local.tags.data
}

resource ""azurerm_storage_data_lake_gen2_filesystem"" ""databricks"" {
  for_each           = local.databricks_containers
  name               = each.value
  storage_account_id = azurerm_storage_account.databricks.id
  ace {
    scope       = ""access""
    type        = ""user""
    permissions = ""rwx""
  }
  ace {
    scope       = ""access""
    type        = ""user""
    permissions = terraform.workspace == ""dev"" ? ""rwx"" : ""r-x""
    id          = azuread_group.data.object_id
  }
  ace {
    scope       = ""access""
    type        = ""user""
    permissions = ""rwx""
    id          = azuread_service_principal.databricks.object_id
  }
  ace {
    scope       = ""access""
    type        = ""group""
    permissions = ""---""
  }
  ace {
    scope       = ""access""
    type        = ""mask""
    permissions = ""rwx""
  }
  ace {
    scope       = ""access""
    type        = ""other""
    permissions = ""---""
  }
  ace {
    scope       = ""default""
    type        = ""user""
    permissions = ""rwx""
  }
  ace {
    scope       = ""default""
    type        = ""user""
    permissions = terraform.workspace == ""dev"" ? ""rwx"" : ""r-x""
    id          = azuread_group.data.object_id
  }
  ace {
    scope       = ""default""
    type        = ""user""
    permissions = ""rwx""
    id          = azuread_service_principal.databricks.object_id
  }
  ace {
    scope       = ""default""
    type        = ""group""
    permissions = ""---""
  }
  ace {
    scope       = ""default""
    type        = ""mask""
    permissions = ""rwx""
  }
  ace {
    scope       = ""default""
    type        = ""other""
    permissions = ""---""
  }
  depends_on = [
    azurerm_role_assignment.iac-databricks-storage_blob_data_owner,
    azurerm_role_assignment.iac-databricks-storage_blob_data_contributor
  ]
  lifecycle {
    prevent_destroy = true
  }
}

resource ""azurerm_role_assignment"" ""iac-databricks-storage_blob_data_owner"" {
  scope                = azurerm_storage_account.databricks.id
  role_definition_name = ""Storage Blob Data Owner""
  principal_id         = data.azurerm_client_config.current.object_id
}

resource ""azurerm_role_assignment"" ""iac-databricks-storage_blob_data_contributor"" {
  scope                = azurerm_storage_account.databricks.id
  role_definition_name = ""Storage Blob Data Contributor""
  principal_id         = data.azurerm_client_config.current.object_id
}

# allows to filter and find data with blob index tags
resource ""azurerm_role_assignment"" ""data-databricks-storage_blob_data_owner"" {
  scope                = azurerm_storage_account.databricks.id
  role_definition_name = ""Storage Blob Data Owner""
  principal_id         = azuread_group.data.object_id
}
#endregion storage account databricks


locals {
  dbfsname        = ""${terraform.workspace}manageddatabricks""
  databricks_repo = ""data-bricks""
}

#manually enable DBFS visual browser in admin settings->advanced
resource ""azurerm_databricks_workspace"" ""data"" {
  name                          = terraform.workspace
  resource_group_name           = azurerm_resource_group.data.name
  location                      = azurerm_resource_group.data.location
  sku                           = ""premium""
  managed_resource_group_name   = ""managed-databricks""
  public_network_access_enabled = true
  #network_security_group_rules_required = ""NoAzureDatabricksRules""
  customer_managed_key_enabled = true
  custom_parameters {
    storage_account_name = local.dbfsname
  }
  tags = local.tags.data
}

resource ""databricks_user"" ""name_surname"" {
  user_name    = ""name.surname@kompan.com""
  display_name = ""name surname""
}

data ""databricks_spark_version"" ""latest_lts"" {
  long_term_support = true
}

resource ""databricks_cluster"" ""single_node"" {
  cluster_name            = ""data""
  spark_version           = data.databricks_spark_version.latest_lts.id
  node_type_id            = ""Standard_D4ads_v5""
  autotermination_minutes = 10

  spark_conf = {
    # Single-node
    ""spark.databricks.cluster.profile"" = ""singleNode""
    ""spark.master""                     = ""local[*]""
  }

  custom_tags = {
    ""ResourceClass"" = ""SingleNode""
  }
}

resource ""databricks_permissions"" ""cluster_usage"" {
  cluster_id = databricks_cluster.single_node.id

  access_control {
    group_name       = ""users""
    permission_level = ""CAN_RESTART""
  }
}

data ""azurerm_key_vault_secret"" ""databricks_git_credential"" {
  name         = ""databricks-git-credential-manual""
  key_vault_id = azurerm_key_vault.main.id
}

resource ""databricks_git_credential"" ""bitbucket"" {
  git_username          = jsondecode(data.azurerm_key_vault_secret.databricks_git_credential.value).git_username
  git_provider          = jsondecode(data.azurerm_key_vault_secret.databricks_git_credential.value).git_provider
  personal_access_token = jsondecode(data.azurerm_key_vault_secret.databricks_git_credential.value).personal_access_token
}

resource ""databricks_repo"" ""bitbucket"" {
  depends_on = [databricks_git_credential.bitbucket]
  url        = ""https://${jsondecode(data.azurerm_key_vault_secret.databricks_git_credential.value).git_username}@bitbucket.org/voltas-it/${local.databricks_repo}.git""
  branch     = terraform.workspace == ""dev"" ? ""development"" : ""main""
  path       = ""/Repos/datateam/${local.databricks_repo}""
}

resource ""databricks_permissions"" ""repo_usage"" {
  repo_id = databricks_repo.bitbucket.id

  access_control {
    group_name       = ""users""
    permission_level = ""CAN_RUN""
  }
}

resource ""databricks_permissions"" ""token_usage"" {
  authorization = ""tokens""

  access_control {
    group_name       = ""users""
    permission_level = ""CAN_USE""
  }
}

resource ""databricks_secret_scope"" ""terraform"" {
  name = ""infra-as-code""
}

#region container mounts
resource ""azuread_application"" ""databricks"" {
  display_name = ""${terraform.workspace}-databricks""
  owners       = [data.azuread_client_config.current.object_id]
}

resource ""azuread_service_principal"" ""databricks"" {
  client_id = azuread_application.databricks.client_id
  owners    = [data.azuread_client_config.current.object_id]
}

resource ""azuread_service_principal_password"" ""databricks"" {
  service_principal_id = azuread_service_principal.databricks.object_id
}

resource ""databricks_secret"" ""service_principal_key"" {
  key          = ""service_principal_key""
  string_value = azuread_service_principal_password.databricks.value
  scope        = databricks_secret_scope.terraform.name
}

resource ""databricks_mount"" ""landing"" {
  name       = azurerm_storage_data_lake_gen2_filesystem.landing.name
  cluster_id = databricks_cluster.single_node.id
  abfs {
    client_id              = azuread_application.databricks.client_id
    client_secret_scope    = databricks_secret_scope.terraform.name
    client_secret_key      = databricks_secret.service_principal_key.key
    storage_account_name   = azurerm_storage_account.airbyte.name
    container_name         = azurerm_storage_data_lake_gen2_filesystem.landing.name
    initialize_file_system = true
  }
}

resource ""databricks_mount"" ""databricks"" {
  for_each   = azurerm_storage_data_lake_gen2_filesystem.databricks
  name       = each.value.name
  cluster_id = databricks_cluster.single_node.id
  abfs {
    client_id              = azuread_application.databricks.client_id
    client_secret_scope    = databricks_secret_scope.terraform.name
    client_secret_key      = databricks_secret.service_principal_key.key
    storage_account_name   = azurerm_storage_account.databricks.name
    container_name         = each.value.name
    initialize_file_system = true
  }
}

#endregion container mounts"
EPKGqCFB,asdads,Igor150195,JavaScript,Friday 9th of February 2024 12:33:13 AM CDT,"(() => {
    'use strict';
	
    class ProductImageSlider {
        constructor(selector = '.product-image__items:not(.tns-slider)') {
            this.selector = selector;
            this.items = [];
            this.currentMedia = 0;
            this.windowResizeTimeoutId = null;
            this.onWindowResize = this.onWindowResize.bind(this);
        }

        init() {
            let wrappers = document.querySelectorAll(this.selector);

            for (let wrapper of wrappers) {
                let el = new ProductImageSliderEl(wrapper).init();
                this.items.push(el);
            }
            
            if (window.matchMedia('(min-width: 1024px)').matches) {
        		this.currentMedia = 1;
        	}
            
            window.addEventListener('resize', this.onWindowResize);
        }
        onWindowResize() {
        	if (this.windowResizeTimeoutId) {
        		clearTimeout(this.windowResizeTimeoutId);
        	}
        	
        	this.windowResizeTimeoutId = setTimeout(() => {
        		let beforeResizeMedia = this.currentMedia;
        		
        		this.currentMedia = 0;
	        	
	        	if (window.matchMedia('(min-width: 1024px)').matches) {
	        		this.currentMedia = 1;
	        	}
        		if ( (this.currentMedia === 1 && beforeResizeMedia === 0) || (this.currentMedia === 0 && beforeResizeMedia === 1) ) {
        			for (let item of this.items) {
	        			item.destroy();
	        			item.init();
		        	}
        		} else {
        			for (let item of this.items) {
	        			item.imageThumbsSliderControlsHide();
		        	}
        		}
        	}, 250);
        }
    }

    class ProductImageSliderEl {
        constructor(el) {
            this.wrapper = el;
            this.slider = null;
            this.thumbsSlider = null;
            this.productItemEl = null;
            this.imageThumbs = null;
            this.productItemOverlay = null;
            this.imageThumbsItemsEl = null;
            this.sliderNav = false;
            this.thumbsSliderGutter = 10;
            this.init = this.init.bind(this);
            this.destroy = this.destroy.bind(this);
            this.onProductItemElMouseenter = this.onProductItemElMouseenter.bind(this);
            this.onProductItemElMouseleave = this.onProductItemElMouseleave.bind(this);
            this.imageSliderInit = this.imageSliderInit.bind(this);
            this.imageSliderDestroy = this.imageSliderDestroy.bind(this);
            this.onImageSliderTouchDragEnd = this.onImageSliderTouchDragEnd.bind(this);
            this.imageThumbsSliderInit = this.imageThumbsSliderInit.bind(this);
            this.onImageThumbsSliderInit = this.onImageThumbsSliderInit.bind(this);
            this.imageThumbsSliderControlsHide = this.imageThumbsSliderControlsHide.bind(this);
            this.imageThumbsSliderDestroy = this.imageThumbsSliderDestroy.bind(this);
            this.onImageThumbsItemsElMouseover = this.onImageThumbsItemsElMouseover.bind(this);
        }

        init() {
            let wrapper = this.wrapper,
            	productItemEl = this.productItemEl = wrapper.closest('.product-item-thumb2');
            
            if (productItemEl) {
    			this.imageThumbsItemsEl = productItemEl.querySelector('.product-image-thumbs__items:not(.tns-slider)');
    		}
    		
    		if (this.imageThumbsItemsEl) {
    			this.sliderNav = true;
    			this.imageThumbs = productItemEl.querySelector('.product-image-thumbs');
    			this.productItemOverlay = productItemEl.querySelector('.product-item-overlay');
    		}
    		
    		if (this.imageThumbs && this.productItemOverlay) {
    			productItemEl.addEventListener('mouseenter', this.onProductItemElMouseenter);
		    	productItemEl.addEventListener('mouseleave', this.onProductItemElMouseleave);
			}
			
			this.imageSliderInit();
			this.imageThumbsSliderInit();

            return this;
        }
        
        destroy() {
    		if (this.productItemEl && this.imageThumbs && this.productItemOverlay) {
    			this.productItemEl.classList.remove('image-thumbs-active');
    			this.productItemEl.removeEventListener('mouseenter', this.onProductItemElMouseenter);
		    	this.productItemEl.removeEventListener('mouseleave', this.onProductItemElMouseleave);
			}
			
			this.imageSliderDestroy();
			this.imageThumbsSliderDestroy();
			
			this.imageThumbs = null;
            this.productItemOverlay = null;
            this.imageThumbsItemsEl = null;
            this.sliderNav = false;
        }
        
        onProductItemElMouseenter() {
        	if (!window.matchMedia('(min-width: 1024px)').matches) {
        		return;
        	}
        	
        	let imageThumbs = this.imageThumbs,
        		productItemOverlay = this.productItemOverlay;
	    		
	    	if (imageThumbs && productItemOverlay) {
	    		let productItemElRect = this.productItemEl.getBoundingClientRect();
	    		
	    		this.productItemEl.classList.add('image-thumbs-active');
	    		
	    		if (productItemElRect.left >= 115) {
					imageThumbs.classList.add('product-image-thumbs--left');
	    			productItemOverlay.classList.add('product-item-overlay--left');
				} else {
					imageThumbs.classList.add('product-image-thumbs--right');
	    			productItemOverlay.classList.add('product-item-overlay--right');
				}
				
				let tnsOuter = imageThumbs.querySelector('.tns-outer'),
					tnsOuterClientHeight;
				
				if (tnsOuter) {
					tnsOuterClientHeight = tnsOuter.clientHeight;
					
					let productItemOverlayStyle = window.getComputedStyle(productItemOverlay),
						productItemOverlayTop = parseInt(productItemOverlayStyle.top),
						productItemOverlayBottom = parseInt(productItemOverlayStyle.bottom);
					
					productItemOverlay.style.minHeight = (tnsOuterClientHeight - productItemOverlayTop - productItemOverlayBottom) + 'px';
				}
				
				let tnsNextButton = this.thumbsSlider ? this.thumbsSlider.getInfo().nextButton : null;
				
				if (tnsNextButton && tnsOuter) {
					tnsNextButton.style.top = (tnsOuterClientHeight - tnsNextButton.clientHeight - this.thumbsSliderGutter) + 'px';
				}
	    	}
        }
        
        onProductItemElMouseleave() {
        	if (!window.matchMedia('(min-width: 1024px)').matches) {
        		return;
        	}
        	
        	let imageThumbs = this.imageThumbs,
        		productItemOverlay = this.productItemOverlay;
	    		
	    	if (imageThumbs && productItemOverlay) {
	    		this.productItemEl.classList.remove('image-thumbs-active');
	    		imageThumbs.classList.remove('product-image-thumbs--left');
    			productItemOverlay.classList.remove('product-item-overlay--left');
    			imageThumbs.classList.remove('product-image-thumbs--right');
	    		productItemOverlay.classList.remove('product-item-overlay--right');
	    		productItemOverlay.style.minHeight = '';
	    		
	    		let tnsNextButton = this.thumbsSlider ? this.thumbsSlider.getInfo().nextButton : null;
	    		
	    		if (tnsNextButton) {
					tnsNextButton.style.top = '';
				}
	    	}
        }
        
        imageSliderInit() {
        	this.slider = tns({
	            container: this.wrapper,
	            items: 1,
	            navPosition: 'bottom',
	            loop: false,
	            autoHeight: false,
	            controls: false,
	            autoplay: false,
				rewind: true,
	            nav: this.sliderNav,
	            navAsThumbnails: true,
	            navContainer: this.imageThumbsItemsEl,
	            swipeAngle: false,
	            responsive: {
	            	0: {
						autoplay: true,
				        loop: false
					},
				    1024: {
				        autoplay: false,
				        loop: false
				    }
				}
	    	});

		    const self = this;
		
		    this.slider.events.on('indexChanged', function(info) {
				if (window.matchMedia('(max-width: 1023px)').matches) {
					self.thumbsSlider.goTo(info.index);
				}
		    });
        }
        
        imageSliderDestroy() {
        	if (this.slider) {
        		this.slider.destroy();
        		this.slider = null;
        		
        		if (this.productItemEl) {
        			this.wrapper = this.productItemEl.querySelector('.product-image__items:not(.tns-slider)');
        		}
        	}
        }
        
        onImageSliderTouchDragEnd(info) {
        	if (this.thumbsSlider) {
        		let index = info.displayIndex - 1;
		    			
				this.thumbsSlider.goTo(index);
        	}
        	
        }
        
        imageThumbsSliderInit() {
        	let productItemEl = this.productItemEl,
        		imageThumbsItemsEl = null,
        		thumbsSliderAxis = 'horizontal',
        		thumbsSliderAutoWidth = true;
        	
        	if (productItemEl) {
    			imageThumbsItemsEl = this.imageThumbsItemsEl = productItemEl.querySelector('.product-image-thumbs__items:not(.tns-slider)');
    		}
        	
			if (window.matchMedia('(min-width: 1024px)').matches) {
				thumbsSliderAxis = 'vertical';
				thumbsSliderAutoWidth = false;
			}
        	
	    	if (imageThumbsItemsEl) {
	    		this.thumbsSlider = tns({
		            container: imageThumbsItemsEl,
		            axis: thumbsSliderAxis,
		            autoWidth: thumbsSliderAutoWidth,
		            items: 5,
		            nav: false,
		            autoHeight: false,
		            controls: true,
		            controlsPosition: 'bottom',
		            gutter: this.thumbsSliderGutter,
		            onInit: this.onImageThumbsSliderInit,
		            responsive: {
		            	0: {
					        loop: false,
					        autoplay: false
						},
					    1024: {
					        autoplay: false,
					        loop: false
					    }
					}
		    	});
		    	
		    	imageThumbsItemsEl.addEventListener('mouseover', this.onImageThumbsItemsElMouseover);
		    	
		    	if (this.slider) {
		    		this.slider.events.on('touchEnd', this.onImageSliderTouchDragEnd);
		    		this.slider.events.on('dragEnd', this.onImageSliderTouchDragEnd);
		    	}
	    	}
        }

        imageThumbsSliderDestroy() {
        	if (this.thumbsSlider && this.imageThumbsItemsEl) {
        		this.imageThumbsItemsEl.removeEventListener('mouseover', this.onImageThumbsItemsElMouseover);
        		this.thumbsSlider.destroy();
        		this.thumbsSlider = null;
        	}
        }
        
        onImageThumbsSliderInit() {
        	this.imageThumbsSliderControlsHide();
        }
        
        imageThumbsSliderControlsHide() {
        	let info = this.thumbsSlider.getInfo(),
        		nextButton = info.nextButton,
        		nextButtonVisible = false,
        		imageThumbs = this.imageThumbs,
        		productItemOverlay = this.productItemOverlay;
        	
        	if (nextButton) {
        		nextButtonVisible = nextButton.offsetWidth || nextButton.offsetHeight || nextButton.getClientRects().length;
        	}
        		
    		if (!nextButtonVisible && imageThumbs && productItemOverlay) {
    			if (window.matchMedia('(min-width: 1024px)').matches) {
	        		let tnsOuter = imageThumbs.querySelector('.tns-outer');
	        		
	        		if (tnsOuter) {
	        			tnsOuter.classList.add('hidden-controls');
	        		}
	        	} else {
	        		let thumbsItemsWrapper = imageThumbs.querySelector('.product-image-thumbs__items-wrapper');
	        		
	        		if (thumbsItemsWrapper) {
	        			thumbsItemsWrapper.classList.add('hidden-controls');
	        		}
	        	}
    		}
        }
        
        onImageThumbsItemsElMouseover(e) {
        	let imageThumbsEl = e.target.closest('.product-image-thumbs__item-wrapper');
			
    		if (imageThumbsEl) {
    			imageThumbsEl.click();
    		}
        }
    }

    window.ProductImageSlider = ProductImageSlider;
})();

(() => {
    'use strict';

    document.addEventListener('DOMContentLoaded', () => {
    	new window.ProductImageSlider().init();
    });
})();
$(document).on(""ajaxComplete"", function() {
	new window.ProductImageSlider().init();
});
"
XEqcisJY,_gl_err.hpp as of 2024-02-08,Kitomas,C++,Friday 9th of February 2024 12:08:40 AM CDT,"//assumes glew is being used
#pragma once


//currently included functions:
/*
glCreateShader
glShaderSource
glCompileShader
glGetShaderiv
glGetShaderInfoLog
glDeleteShader
glCreateProgram
glAttachShader
glLinkProgram
glValidateProgram
glDeleteShader
glViewport
glGetString
glGetIntegerv
glGenBuffers
glBindBuffer
glBufferData
glEnableVertexAttribArray
glVertexAttribPointer
glUseProgram
glClear
glDrawArrays
glDeleteProgram
*/


#if defined(_DEBUG)


#ifdef    glCreateShader
#undef    glCreateShader
#define   glCreateShader(...) \
  GLEW_GET_FUN(__glewCreateShader)(__VA_ARGS__); gl::errLogAll(__LINE__,__FILE__);
#endif /* glCreateShader */

#ifdef    glShaderSource
#undef    glShaderSource
#define   glShaderSource(...) \
  GLEW_GET_FUN(__glewShaderSource)(__VA_ARGS__); gl::errLogAll(__LINE__,__FILE__);
#endif /* glShaderSource */

#ifdef    glCompileShader
#undef    glCompileShader
#define   glCompileShader(...) \
  GLEW_GET_FUN(__glewCompileShader)(__VA_ARGS__); gl::errLogAll(__LINE__,__FILE__);
#endif /* glCompileShader */

#ifdef    glGetShaderiv
#undef    glGetShaderiv
#define   glGetShaderiv(...) \
  GLEW_GET_FUN(__glewGetShaderiv)(__VA_ARGS__); gl::errLogAll(__LINE__,__FILE__);
#endif /* glGetShaderiv */

#ifdef    glGetShaderInfoLog
#undef    glGetShaderInfoLog
#define   glGetShaderInfoLog(...) \
  GLEW_GET_FUN(__glewGetShaderInfoLog)(__VA_ARGS__); gl::errLogAll(__LINE__,__FILE__);
#endif /* glGetShaderInfoLog */

#ifdef    glDeleteShader
#undef    glDeleteShader
#define   glDeleteShader(...) \
  GLEW_GET_FUN(__glewDeleteShader)(__VA_ARGS__); gl::errLogAll(__LINE__,__FILE__);
#endif /* glDeleteShader */

#ifdef    glCreateProgram
#undef    glCreateProgram
#define   glCreateProgram(...) \
  GLEW_GET_FUN(__glewCreateProgram)(__VA_ARGS__); gl::errLogAll(__LINE__,__FILE__);
#endif /* glCreateProgram */

#ifdef    glAttachShader
#undef    glAttachShader
#define   glAttachShader(...) \
  GLEW_GET_FUN(__glewAttachShader)(__VA_ARGS__); gl::errLogAll(__LINE__,__FILE__);
#endif /* glAttachShader */

#ifdef    glLinkProgram
#undef    glLinkProgram
#define   glLinkProgram(...) \
  GLEW_GET_FUN(__glewLinkProgram)(__VA_ARGS__); gl::errLogAll(__LINE__,__FILE__);
#endif /* glLinkProgram */

#ifdef    glValidateProgram
#undef    glValidateProgram
#define   glValidateProgram(...) \
  GLEW_GET_FUN(__glewValidateProgram)(__VA_ARGS__); gl::errLogAll(__LINE__,__FILE__);
#endif /* glValidateProgram */

#ifdef    glDeleteShader
#undef    glDeleteShader
#define   glDeleteShader(...) \
  GLEW_GET_FUN(__glewDeleteShader)(__VA_ARGS__); gl::errLogAll(__LINE__,__FILE__);
#endif /* glDeleteShader */

#ifdef    glViewport
#undef    glViewport
#define   glViewport(...) \
  GLEW_GET_FUN(__glewViewport)(__VA_ARGS__); gl::errLogAll(__LINE__,__FILE__);
#endif /* glViewport */

#ifdef    glGetString
#undef    glGetString
#define   glGetString(...) \
  GLEW_GET_FUN(__glewGetString)(__VA_ARGS__); gl::errLogAll(__LINE__,__FILE__);
#endif /* glGetString */

#ifdef    glGetIntegerv
#undef    glGetIntegerv
#define   glGetIntegerv(...) \
  GLEW_GET_FUN(__glewGetIntegerv)(__VA_ARGS__); gl::errLogAll(__LINE__,__FILE__);
#endif /* glGetIntegerv */

#ifdef    glGenBuffers
#undef    glGenBuffers
#define   glGenBuffers(...) \
  GLEW_GET_FUN(__glewGenBuffers)(__VA_ARGS__); gl::errLogAll(__LINE__,__FILE__);
#endif /* glGenBuffers */

#ifdef    glBindBuffer
#undef    glBindBuffer
#define   glBindBuffer(...) \
  GLEW_GET_FUN(__glewBindBuffer)(__VA_ARGS__); gl::errLogAll(__LINE__,__FILE__);
#endif /* glBindBuffer */

#ifdef    glBufferData
#undef    glBufferData
#define   glBufferData(...) \
  GLEW_GET_FUN(__glewBufferData)(__VA_ARGS__); gl::errLogAll(__LINE__,__FILE__);
#endif /* glBufferData */

#ifdef    glEnableVertexAttribArray
#undef    glEnableVertexAttribArray
#define   glEnableVertexAttribArray(...) \
  GLEW_GET_FUN(__glewEnableVertexAttribArray)(__VA_ARGS__); gl::errLogAll(__LINE__,__FILE__);
#endif /* glEnableVertexAttribArray */

#ifdef    glVertexAttribPointer
#undef    glVertexAttribPointer
#define   glVertexAttribPointer(...) \
  GLEW_GET_FUN(__glewVertexAttribPointer)(__VA_ARGS__); gl::errLogAll(__LINE__,__FILE__);
#endif /* glVertexAttribPointer */

#ifdef    glUseProgram
#undef    glUseProgram
#define   glUseProgram(...) \
  GLEW_GET_FUN(__glewUseProgram)(__VA_ARGS__); gl::errLogAll(__LINE__,__FILE__);
#endif /* glUseProgram */

#ifdef    glClear
#undef    glClear
#define   glClear(...) \
  GLEW_GET_FUN(__glewClear)(__VA_ARGS__); gl::errLogAll(__LINE__,__FILE__);
#endif /* glClear */

#ifdef    glDrawArrays
#undef    glDrawArrays
#define   glDrawArrays(...) \
  GLEW_GET_FUN(__glewDrawArrays)(__VA_ARGS__); gl::errLogAll(__LINE__,__FILE__);
#endif /* glDrawArrays */

#ifdef    glDeleteProgram
#undef    glDeleteProgram
#define   glDeleteProgram(...) \
  GLEW_GET_FUN(__glewDeleteProgram)(__VA_ARGS__); gl::errLogAll(__LINE__,__FILE__);
#endif /* glDeleteProgram */


#endif
"
Bu86snj7,gl::errLogAll as of 2024-02-08,Kitomas,C++,Friday 9th of February 2024 12:06:59 AM CDT,"void gl::errLogAll(int lineNumber, const char* fileName){
  Uint32 errorCode = gl::errLog(-2); //-2 for no print at all
  if(errorCode != GL_NO_ERROR){
    SDL_Log(""%s : %4i:"", fileName, lineNumber);
    gl::errLog(-1,errorCode);
    do {
      gl::errLog(-1);
    } while(errorCode != GL_NO_ERROR);
  }
}"
U1RHG7FU,asd,Igor150195,JavaScript,Friday 9th of February 2024 12:05:02 AM CDT,"(() => {
    'use strict';

    class ProductImageSlider {
        constructor(selector = '.product-image__items:not(.tns-slider)') {
            this.selector = selector;
            this.items = [];
            this.currentMedia = 0;
            this.windowResizeTimeoutId = null;
            this.onWindowResize = this.onWindowResize.bind(this);
        }

        init() {
            let wrappers = document.querySelectorAll(this.selector);

            for (let wrapper of wrappers) {
                let el = new ProductImageSliderEl(wrapper).init();
                this.items.push(el);
            }
            
            if (window.matchMedia('(min-width: 1024px)').matches) {
        		this.currentMedia = 1;
        	}
            
            window.addEventListener('resize', this.onWindowResize);
        }
        onWindowResize() {
        	if (this.windowResizeTimeoutId) {
        		clearTimeout(this.windowResizeTimeoutId);
        	}
        	
        	this.windowResizeTimeoutId = setTimeout(() => {
        		let beforeResizeMedia = this.currentMedia;
        		
        		this.currentMedia = 0;
	        	
	        	if (window.matchMedia('(min-width: 1024px)').matches) {
	        		this.currentMedia = 1;
	        	}
        		if ( (this.currentMedia === 1 && beforeResizeMedia === 0) || (this.currentMedia === 0 && beforeResizeMedia === 1) ) {
        			for (let item of this.items) {
	        			item.destroy();
	        			item.init();
		        	}
        		} else {
        			for (let item of this.items) {
	        			item.imageThumbsSliderControlsHide();
		        	}
        		}
        	}, 250);
        }
    }

    class ProductImageSliderEl {
        constructor(el) {
            this.wrapper = el;
            this.slider = null;
            this.thumbsSlider = null;
            this.productItemEl = null;
            this.imageThumbs = null;
            this.productItemOverlay = null;
            this.imageThumbsItemsEl = null;
            this.sliderNav = false;
            this.thumbsSliderGutter = 10;
            this.init = this.init.bind(this);
            this.destroy = this.destroy.bind(this);
            this.onProductItemElMouseenter = this.onProductItemElMouseenter.bind(this);
            this.onProductItemElMouseleave = this.onProductItemElMouseleave.bind(this);
            this.imageSliderInit = this.imageSliderInit.bind(this);
            this.imageSliderDestroy = this.imageSliderDestroy.bind(this);
            this.onImageSliderTouchDragEnd = this.onImageSliderTouchDragEnd.bind(this);
            this.imageThumbsSliderInit = this.imageThumbsSliderInit.bind(this);
            this.onImageThumbsSliderInit = this.onImageThumbsSliderInit.bind(this);
            this.imageThumbsSliderControlsHide = this.imageThumbsSliderControlsHide.bind(this);
            this.imageThumbsSliderDestroy = this.imageThumbsSliderDestroy.bind(this);
            this.onImageThumbsItemsElMouseover = this.onImageThumbsItemsElMouseover.bind(this);
        }

        init() {
            let wrapper = this.wrapper,
            	productItemEl = this.productItemEl = wrapper.closest('.product-item-thumb2');
            
            if (productItemEl) {
    			this.imageThumbsItemsEl = productItemEl.querySelector('.product-image-thumbs__items:not(.tns-slider)');
    		}
    		
    		if (this.imageThumbsItemsEl) {
    			this.sliderNav = true;
    			this.imageThumbs = productItemEl.querySelector('.product-image-thumbs');
    			this.productItemOverlay = productItemEl.querySelector('.product-item-overlay');
    		}
    		
    		if (this.imageThumbs && this.productItemOverlay) {
    			productItemEl.addEventListener('mouseenter', this.onProductItemElMouseenter);
		    	productItemEl.addEventListener('mouseleave', this.onProductItemElMouseleave);
			}
			
			this.imageSliderInit();
			this.imageThumbsSliderInit();

            return this;
        }
        
        destroy() {
    		if (this.productItemEl && this.imageThumbs && this.productItemOverlay) {
    			this.productItemEl.classList.remove('image-thumbs-active');
    			this.productItemEl.removeEventListener('mouseenter', this.onProductItemElMouseenter);
		    	this.productItemEl.removeEventListener('mouseleave', this.onProductItemElMouseleave);
			}
			
			this.imageSliderDestroy();
			this.imageThumbsSliderDestroy();
			
			this.imageThumbs = null;
            this.productItemOverlay = null;
            this.imageThumbsItemsEl = null;
            this.sliderNav = false;
        }
        
        onProductItemElMouseenter() {
        	if (!window.matchMedia('(min-width: 1024px)').matches) {
        		return;
        	}
        	
        	let imageThumbs = this.imageThumbs,
        		productItemOverlay = this.productItemOverlay;
	    		
	    	if (imageThumbs && productItemOverlay) {
	    		let productItemElRect = this.productItemEl.getBoundingClientRect();
	    		
	    		this.productItemEl.classList.add('image-thumbs-active');
	    		
	    		if (productItemElRect.left >= 115) {
					imageThumbs.classList.add('product-image-thumbs--left');
	    			productItemOverlay.classList.add('product-item-overlay--left');
				} else {
					imageThumbs.classList.add('product-image-thumbs--right');
	    			productItemOverlay.classList.add('product-item-overlay--right');
				}
				
				let tnsOuter = imageThumbs.querySelector('.tns-outer'),
					tnsOuterClientHeight;
				
				if (tnsOuter) {
					tnsOuterClientHeight = tnsOuter.clientHeight;
					
					let productItemOverlayStyle = window.getComputedStyle(productItemOverlay),
						productItemOverlayTop = parseInt(productItemOverlayStyle.top),
						productItemOverlayBottom = parseInt(productItemOverlayStyle.bottom);
					
					productItemOverlay.style.minHeight = (tnsOuterClientHeight - productItemOverlayTop - productItemOverlayBottom) + 'px';
				}
				
				let tnsNextButton = this.thumbsSlider ? this.thumbsSlider.getInfo().nextButton : null;
				
				if (tnsNextButton && tnsOuter) {
					tnsNextButton.style.top = (tnsOuterClientHeight - tnsNextButton.clientHeight - this.thumbsSliderGutter) + 'px';
				}
	    	}
        }
        
        onProductItemElMouseleave() {
        	if (!window.matchMedia('(min-width: 1024px)').matches) {
        		return;
        	}
        	
        	let imageThumbs = this.imageThumbs,
        		productItemOverlay = this.productItemOverlay;
	    		
	    	if (imageThumbs && productItemOverlay) {
	    		this.productItemEl.classList.remove('image-thumbs-active');
	    		imageThumbs.classList.remove('product-image-thumbs--left');
    			productItemOverlay.classList.remove('product-item-overlay--left');
    			imageThumbs.classList.remove('product-image-thumbs--right');
	    		productItemOverlay.classList.remove('product-item-overlay--right');
	    		productItemOverlay.style.minHeight = '';
	    		
	    		let tnsNextButton = this.thumbsSlider ? this.thumbsSlider.getInfo().nextButton : null;
	    		
	    		if (tnsNextButton) {
					tnsNextButton.style.top = '';
				}
	    	}
        }
        
        imageSliderInit() {
        	this.slider = tns({
	            container: this.wrapper,
	            items: 1,
	            navPosition: 'bottom',
	            loop: false,
				rewind: true,
	            autoHeight: false,
	            controls: false,
	            autoplay: false,
	            nav: this.sliderNav,
	            navAsThumbnails: true,
	            navContainer: this.imageThumbsItemsEl,
	            swipeAngle: false,
	            responsive: {
	            	0: {
						autoplay: false,
				        loop: false
					},
				    1024: {
				        autoplay: false,
				        loop: false
				    }
				}
	    	});
        }
        
        imageSliderDestroy() {
        	if (this.slider) {
        		this.slider.destroy();
        		this.slider = null;
        		
        		if (this.productItemEl) {
        			this.wrapper = this.productItemEl.querySelector('.product-image__items:not(.tns-slider)');
        		}
        	}
        }
        
        onImageSliderTouchDragEnd(info) {
        	if (this.thumbsSlider) {
        		let index = info.displayIndex - 1;
		    			
				this.thumbsSlider.goTo(index);
        	}
        	
        }
        
        imageThumbsSliderInit() {
        	let productItemEl = this.productItemEl,
        		imageThumbsItemsEl = null,
        		thumbsSliderAxis = 'horizontal',
        		thumbsSliderAutoWidth = true;
        	
        	if (productItemEl) {
    			imageThumbsItemsEl = this.imageThumbsItemsEl = productItemEl.querySelector('.product-image-thumbs__items:not(.tns-slider)');
    		}
        	
			if (window.matchMedia('(min-width: 1024px)').matches) {
				thumbsSliderAxis = 'vertical';
				thumbsSliderAutoWidth = false;
			}
        	
	    	if (imageThumbsItemsEl) {
	    		this.thumbsSlider = tns({
		            container: imageThumbsItemsEl,
		            axis: thumbsSliderAxis,
		            autoWidth: thumbsSliderAutoWidth,
		            items: 5,
					rewind: true,
		            nav: false,
		            autoHeight: false,
		            controls: true,
		            controlsPosition: 'bottom',
		            gutter: this.thumbsSliderGutter,
		            onInit: this.onImageThumbsSliderInit,
		            responsive: {
		            	0: {
					        loop: false,
					        autoplay: true
						},
					    1024: {
					        autoplay: false,
					        loop: false
					    }
					}
		    	});
		    	
		    	imageThumbsItemsEl.addEventListener('mouseover', this.onImageThumbsItemsElMouseover);
		    	
		    	if (this.slider) {
		    		this.slider.events.on('touchEnd', this.onImageSliderTouchDragEnd);
		    		this.slider.events.on('dragEnd', this.onImageSliderTouchDragEnd);
		    	}
	    	}
        }

        imageThumbsSliderDestroy() {
        	if (this.thumbsSlider && this.imageThumbsItemsEl) {
        		this.imageThumbsItemsEl.removeEventListener('mouseover', this.onImageThumbsItemsElMouseover);
        		this.thumbsSlider.destroy();
        		this.thumbsSlider = null;
        	}
        }
        
        onImageThumbsSliderInit() {
        	this.imageThumbsSliderControlsHide();
        }
        
        imageThumbsSliderControlsHide() {
        	let info = this.thumbsSlider.getInfo(),
        		nextButton = info.nextButton,
        		nextButtonVisible = false,
        		imageThumbs = this.imageThumbs,
        		productItemOverlay = this.productItemOverlay;
        	
        	if (nextButton) {
        		nextButtonVisible = nextButton.offsetWidth || nextButton.offsetHeight || nextButton.getClientRects().length;
        	}
        		
    		if (!nextButtonVisible && imageThumbs && productItemOverlay) {
    			if (window.matchMedia('(min-width: 1024px)').matches) {
	        		let tnsOuter = imageThumbs.querySelector('.tns-outer');
	        		
	        		if (tnsOuter) {
	        			tnsOuter.classList.add('hidden-controls');
	        		}
	        	} else {
	        		let thumbsItemsWrapper = imageThumbs.querySelector('.product-image-thumbs__items-wrapper');
	        		
	        		if (thumbsItemsWrapper) {
	        			thumbsItemsWrapper.classList.add('hidden-controls');
	        		}
	        	}
    		}
        }
        
        onImageThumbsItemsElMouseover(e) {
        	let imageThumbsEl = e.target.closest('.product-image-thumbs__item-wrapper');
			
    		if (imageThumbsEl) {
    			imageThumbsEl.click();
    		}
        }
    }

    window.ProductImageSlider = ProductImageSlider;
})();

(() => {
    'use strict';

    document.addEventListener('DOMContentLoaded', () => {
    	new window.ProductImageSlider().init();
    });
})();
$(document).on(""ajaxComplete"", function() {
	new window.ProductImageSlider().init();
});

console.log(11)"
MLcyQM85,task2 cycles,psychotrance,Java,Friday 9th of February 2024 12:03:30 AM CDT,"import java.util.Scanner;

public class task2 {
    public static void main(String[] args) {
        //Ввести с клавиатуры целое число. Вывести в консоль сумму цифр введенного числа

        Scanner in = new Scanner(System.in);
        System.out.println(""Enter a number: "");
        int num1 = in.nextInt();

        in.close();

        int res = 0;

        while (num1 >= 1) {
            res += num1;
            num1--;
        }
        System.out.println(res);
        
        for (; num1 >= 1; num1--) {
            res += num1;
        }
        System.out.println(res);
    }
}"
xYKjW380,task1 cycles,psychotrance,Java,Thursday 8th of February 2024 11:55:39 PM CDT,"import javax.swing.*;
import java.util.Scanner;

public class task1 {
    public static void main(String[] args) {

// Ввести с клавиатуры целое число. Вывести в консоль его факториал.

        Scanner in = new Scanner(System.in);
        System.out.println(""Enter a num"");
        int num1 = in.nextInt();
        in.close();
        int res = 1;

        while (num1 >= 2) {
            res *= num1;
            num1--;
        }
        System.out.println(res);

        for (; num1 >= 2; num1--) {
            res *= num1;
        }
        System.out.println(res);
    }
}"
8mUBW24r,card slider,Igor150195,JavaScript,Thursday 8th of February 2024 11:43:31 PM CDT,"var vslider = tns({
    container: '.card-slider__items-slider',
    slideBy: 1,
    mode: 'gallery',
    axis: 'horizontal',
    autoplay: false,
    mouseDrag: true,
    center: true,
    autoWidth: false,
    loop: false,
    rewind: true,
    preventActionWhenRunning: false,
    nav: true,
    lazyload: true,
    swipeAngle: 50,
    navPosition: 'bottom',
    controlsContainer: '.card-slider-nav',
    controlsText: shop2_gr.settings.sliderControls,
    responsive: {
        320: {
            controls: false,
            nav: true
        },
        768: {
            controls: true,
            nav: true,
        }
    }
});

var small_slider = tns({
    container: '.card-slider__thumbs-slider',
    loop: false,
    gutter: 10,
    center:false,
    mouseDrag: true,
    nav: false,
    disable: false,
    controls: false,
    navPosition: 'bottom',
    preventActionWhenRunning: false,
    axis: 'horizontal',
    responsive: {
        320: {
            items: 3
        },
        640: {
            items: 3
        },
        768: {
            items: 3,
            disable: stickyFlag
        },
        1024: {
            items: 4
        },
        1261: {
            items: 4
        },
        1340: {
            items: 4
        }
    }
});

var navIndex = $('.card-slider__items .tns-nav-active').index();
    $('.card-slider__thumbs-slider .card-slider__thumb').removeClass('tns-nav-active');
    $('.card-slider__thumbs-slider .card-slider__thumb').eq(navIndex).addClass('tns-nav-active');

vslider.events.on('indexChanged', function(){
    var navIndex = $('.card-slider__items .tns-nav-active').index();
    $('.card-slider__thumbs-slider .card-slider__thumb').removeClass('tns-nav-active');
    $('.card-slider__thumbs-slider .card-slider__thumb').eq(navIndex).addClass('tns-nav-active');

    /*if (vslider.getInfo().index>vslider.getInfo().indexCached) {
        //console.log('right')
    } else {
        //console.log('left')
    }*/
});

vslider.events.on('indexChanged', function(){
    small_slider.goTo(vslider.getInfo().index);
});

$(document).on('click', '.card-slider__thumbs-slider .card-slider__thumb', function(){
    var thisIndex = $(this).index();
    $('.card-slider__items .tns-nav button').eq(thisIndex).click();
});
"
a88HHcuR,News Feb8 24,Newscaster_Ned,Email,Thursday 8th of February 2024 11:05:19 PM CDT,".‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎1‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎2‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎3‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎T‎e‎s‎t‎ ‎c‎o‎m‎p‎l‎e‎t‎e‎.‎

T‎h‎i‎s‎ ‎i‎s‎ ‎N‎e‎w‎s‎c‎a‎s‎t‎e‎r‎ ‎N‎e‎d‎.‎ ‎T‎h‎e‎ ‎m‎o‎s‎t‎ ‎t‎r‎u‎s‎t‎e‎d‎ ‎n‎a‎m‎e‎ ‎i‎n‎ ‎n‎e‎w‎s‎.‎

C‎N‎N‎'‎s‎ ‎T‎o‎o‎b‎i‎n‎:‎ ‎B‎i‎d‎e‎n‎'‎s‎ ‎M‎e‎x‎i‎c‎o‎ ‎G‎a‎f‎f‎e‎ ‎T‎h‎e‎ ‎O‎n‎l‎y‎ ‎T‎h‎i‎n‎g‎ ‎A‎n‎y‎o‎n‎e‎ ‎W‎i‎l‎l‎ ‎R‎e‎m‎e‎m‎b‎e‎r‎
T‎r‎u‎m‎p‎ ‎C‎r‎u‎s‎h‎e‎s‎ ‎H‎a‎l‎e‎y‎ ‎i‎n‎ ‎V‎i‎r‎g‎i‎n‎ ‎I‎s‎l‎a‎n‎d‎s‎ ‎C‎a‎u‎c‎u‎s‎e‎s‎
D‎e‎m‎ ‎R‎e‎p‎.‎ ‎P‎h‎i‎l‎l‎i‎p‎s‎:‎ ‎'‎I‎t‎ ‎A‎p‎p‎e‎a‎r‎s‎ ‎a‎ ‎C‎r‎i‎m‎e‎ ‎W‎a‎s‎ ‎C‎o‎m‎m‎i‎t‎t‎e‎d‎'‎ ‎b‎y‎ ‎B‎i‎d‎e‎n‎
G‎O‎P‎ ‎C‎a‎l‎l‎s‎ ‎t‎o‎ ‎I‎n‎v‎o‎k‎e‎ ‎2‎5‎t‎h‎ ‎A‎m‎e‎n‎d‎m‎e‎n‎t‎:‎ ‎B‎i‎d‎e‎n‎ ‎‘‎N‎o‎t‎ ‎C‎o‎m‎p‎e‎t‎e‎n‎t‎’‎
S‎p‎e‎a‎k‎e‎r‎ ‎J‎o‎h‎n‎s‎o‎n‎:‎ ‎B‎i‎d‎e‎n‎'‎s‎ ‎U‎n‎h‎i‎n‎g‎e‎d‎ ‎P‎r‎e‎s‎s‎ ‎C‎o‎n‎f‎e‎r‎e‎n‎c‎e‎ ‎P‎r‎o‎v‎e‎s‎ ‎H‎e‎'‎s‎ ‎'‎U‎n‎f‎i‎t‎'‎
G‎e‎t‎ ‎A‎l‎l‎ ‎B‎r‎e‎i‎t‎b‎a‎r‎t‎ ‎N‎e‎w‎s‎ ‎H‎e‎r‎e‎
H‎o‎m‎e‎P‎a‎g‎e‎
‘‎H‎o‎w‎ ‎t‎h‎e‎ ‎H‎e‎l‎l‎ ‎D‎a‎r‎e‎ ‎H‎e‎!‎’‎

V‎e‎r‎y‎ ‎S‎t‎a‎b‎l‎e‎:‎ ‎A‎n‎g‎r‎y‎ ‎B‎i‎d‎e‎n‎ ‎A‎t‎t‎a‎c‎k‎s‎ ‎S‎p‎e‎c‎i‎a‎l‎ ‎C‎o‎u‎n‎s‎e‎l‎ ‎i‎n‎ ‎E‎v‎e‎n‎i‎n‎g‎ ‎W‎h‎i‎t‎e‎ ‎H‎o‎u‎s‎e‎ ‎R‎a‎n‎t‎

U‎n‎h‎i‎n‎g‎e‎d‎ ‎J‎o‎e‎ ‎A‎t‎t‎a‎c‎k‎s‎ ‎R‎e‎p‎o‎r‎t‎ ‎o‎n‎ ‎M‎i‎s‎h‎a‎n‎d‎l‎i‎n‎g‎ ‎C‎l‎a‎s‎s‎i‎f‎i‎e‎d‎ ‎D‎o‎c‎u‎m‎e‎n‎t‎s‎
U‎S‎ ‎P‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎J‎o‎e‎ ‎B‎i‎d‎e‎n‎ ‎d‎e‎l‎i‎v‎e‎r‎s‎ ‎a‎ ‎p‎r‎i‎m‎e‎-‎t‎i‎m‎e‎ ‎a‎d‎d‎r‎e‎s‎s‎ ‎t‎o‎ ‎t‎h‎e‎ ‎n‎a‎t‎i‎o‎n‎ ‎i‎n‎ ‎t‎h‎e‎ ‎O‎v‎a‎l‎ ‎O‎f‎f‎i‎c‎e‎ ‎o‎f‎ ‎t‎
P‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎J‎o‎e‎ ‎B‎i‎d‎e‎n‎ ‎a‎n‎g‎r‎i‎l‎y‎ ‎a‎t‎t‎a‎c‎k‎e‎d‎ ‎S‎p‎e‎c‎i‎a‎l‎ ‎C‎o‎u‎n‎s‎e‎l‎ ‎R‎o‎b‎e‎r‎t‎ ‎H‎u‎r‎ ‎d‎u‎r‎i‎n‎g‎ ‎h‎i‎s‎ ‎p‎r‎e‎s‎s‎ ‎c‎o‎n‎f‎e‎r‎e‎n‎c‎e‎ ‎o‎n‎ ‎T‎h‎u‎r‎s‎d‎a‎y‎ ‎f‎o‎r‎ ‎m‎e‎n‎t‎i‎o‎n‎i‎n‎g‎ ‎i‎n‎ ‎a‎ ‎r‎e‎c‎e‎n‎t‎ ‎r‎e‎p‎o‎r‎t‎ ‎t‎h‎a‎t‎ ‎t‎h‎e‎ ‎p‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎h‎a‎d‎ ‎t‎r‎o‎u‎b‎l‎e‎ ‎r‎e‎m‎e‎m‎b‎e‎r‎i‎n‎g‎ ‎w‎h‎e‎n‎ ‎h‎i‎s‎ ‎s‎o‎n‎ ‎B‎e‎a‎u‎ ‎d‎i‎e‎d‎.‎

B‎i‎d‎e‎n‎ ‎C‎a‎l‎l‎s‎ ‎T‎r‎u‎m‎p‎ ‎‘‎E‎x‎i‎s‎t‎e‎n‎t‎i‎a‎l‎ ‎T‎h‎r‎e‎a‎t‎’‎ ‎a‎s‎ ‎A‎n‎t‎i‎-‎I‎s‎r‎a‎e‎l‎ ‎P‎r‎o‎t‎e‎s‎t‎e‎r‎s‎ ‎B‎l‎o‎c‎k‎ ‎5‎t‎h‎ ‎A‎v‎e‎n‎u‎e‎
B‎i‎d‎e‎n‎ ‎C‎a‎l‎l‎s‎ ‎T‎r‎u‎m‎p‎ ‎'‎E‎x‎i‎s‎t‎e‎n‎t‎i‎a‎l‎ ‎T‎h‎r‎e‎a‎t‎'‎ ‎a‎s‎ ‎A‎n‎t‎i‎-‎I‎s‎r‎a‎e‎l‎ ‎A‎c‎t‎i‎v‎i‎s‎t‎s‎ ‎B‎l‎o‎c‎k‎ ‎A‎v‎e‎.‎
6‎,‎1‎8‎4‎
N‎o‎l‎t‎e‎:‎ ‎E‎l‎e‎c‎t‎i‎o‎n‎ ‎D‎e‎n‎i‎e‎r‎ ‎N‎i‎k‎k‎i‎ ‎H‎a‎l‎e‎y‎ ‎C‎l‎a‎i‎m‎s‎ ‎D‎o‎n‎a‎l‎d‎ ‎T‎r‎u‎m‎p‎ ‎‘‎R‎i‎g‎g‎e‎d‎’‎ ‎N‎e‎v‎a‎d‎a‎ ‎P‎r‎i‎m‎a‎r‎y‎
N‎o‎l‎t‎e‎:‎ ‎E‎l‎e‎c‎t‎i‎o‎n‎ ‎D‎e‎n‎i‎e‎r‎ ‎N‎i‎k‎k‎i‎ ‎H‎a‎l‎e‎y‎ ‎C‎l‎a‎i‎m‎s‎ ‎T‎r‎u‎m‎p‎ ‎‘‎R‎i‎g‎g‎e‎d‎’‎ ‎N‎e‎v‎a‎d‎a‎ ‎P‎r‎i‎m‎a‎r‎y‎
8‎2‎2‎
T‎u‎c‎k‎e‎r‎ ‎C‎a‎r‎l‎s‎o‎n‎ ‎I‎n‎t‎e‎r‎v‎i‎e‎w‎s‎ ‎R‎u‎s‎s‎i‎a‎n‎ ‎P‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎V‎l‎a‎d‎i‎m‎i‎r‎ ‎P‎u‎t‎i‎n‎
T‎u‎c‎k‎e‎r‎ ‎C‎a‎r‎l‎s‎o‎n‎ ‎I‎n‎t‎e‎r‎v‎i‎e‎w‎s‎ ‎R‎u‎s‎s‎i‎a‎n‎ ‎P‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎V‎l‎a‎d‎i‎m‎i‎r‎ ‎P‎u‎t‎i‎n‎
4‎6‎7‎
E‎U‎ ‎P‎o‎l‎i‎t‎i‎c‎i‎a‎n‎s‎ ‎T‎h‎r‎e‎a‎t‎e‎n‎ ‎t‎o‎ ‎S‎a‎n‎c‎t‎i‎o‎n‎ ‎T‎u‎c‎k‎e‎r‎ ‎C‎a‎r‎l‎s‎o‎n‎ ‎f‎o‎r‎ ‎I‎n‎t‎e‎r‎v‎i‎e‎w‎i‎n‎g‎ ‎V‎l‎a‎d‎i‎m‎i‎r‎ ‎P‎u‎t‎i‎n‎
E‎u‎r‎o‎c‎r‎a‎t‎s‎ ‎T‎h‎r‎e‎a‎t‎e‎n‎ ‎t‎o‎ ‎S‎a‎n‎c‎t‎i‎o‎n‎ ‎T‎u‎c‎k‎e‎r‎ ‎f‎o‎r‎ ‎I‎n‎t‎e‎r‎v‎i‎e‎w‎i‎n‎g‎ ‎P‎u‎t‎i‎n‎
7‎,‎4‎6‎9‎
J‎u‎d‎g‎e‎ ‎d‎e‎n‎i‎e‎s‎ ‎P‎e‎t‎e‎r‎ ‎N‎a‎v‎a‎r‎r‎o‎’‎s‎ ‎b‎i‎d‎ ‎t‎o‎ ‎a‎v‎o‎i‎d‎ ‎p‎r‎i‎s‎o‎n‎ ‎w‎h‎i‎l‎e‎ ‎a‎p‎p‎e‎a‎l‎i‎n‎g‎ ‎c‎o‎n‎v‎i‎c‎t‎i‎o‎n‎
J‎u‎d‎g‎e‎ ‎d‎e‎n‎i‎e‎s‎ ‎P‎e‎t‎e‎r‎ ‎N‎a‎v‎a‎r‎r‎o‎’‎s‎ ‎b‎i‎d‎ ‎t‎o‎ ‎a‎v‎o‎i‎d‎ ‎p‎r‎i‎s‎o‎n‎ ‎w‎h‎i‎l‎e‎ ‎a‎p‎p‎e‎a‎l‎i‎n‎g‎ ‎c‎o‎n‎v‎i‎c‎t‎i‎o‎n‎
6‎5‎8‎
R‎a‎s‎k‎i‎n‎:‎ ‎S‎p‎e‎c‎i‎a‎l‎ ‎C‎o‎u‎n‎s‎e‎l‎ ‎B‎i‎d‎e‎n‎’‎s‎ ‎A‎.‎G‎.‎ ‎P‎i‎c‎k‎e‎d‎ ‎I‎s‎ ‎a‎n‎ ‎‘‎A‎g‎e‎-‎D‎i‎s‎c‎r‎i‎m‎i‎n‎a‎t‎o‎r‎y‎’‎ ‎P‎o‎l‎i‎t‎i‎c‎a‎l‎l‎
R‎a‎s‎k‎i‎n‎:‎ ‎S‎p‎e‎c‎i‎a‎l‎ ‎C‎o‎u‎n‎s‎e‎l‎ ‎B‎i‎d‎e‎n‎'‎s‎ ‎A‎.‎G‎.‎ ‎P‎i‎c‎k‎e‎d‎ ‎I‎s‎ ‎'‎A‎g‎e‎-‎D‎i‎s‎c‎r‎i‎m‎i‎n‎a‎t‎o‎r‎y‎'‎ ‎G‎O‎P‎e‎r‎
2‎8‎0‎
S‎p‎e‎c‎i‎a‎l‎ ‎C‎o‎u‎n‎s‎e‎l‎ ‎F‎i‎n‎d‎s‎ ‎J‎o‎e‎ ‎B‎i‎d‎e‎n‎ ‎‘‎W‎i‎l‎l‎f‎u‎l‎l‎y‎ ‎R‎e‎t‎a‎i‎n‎e‎d‎’‎ ‎C‎l‎a‎s‎s‎i‎f‎i‎e‎d‎ ‎D‎o‎c‎s‎ ‎—‎ ‎b‎u‎t‎ ‎I‎s‎ ‎T‎o‎o‎ ‎M‎e‎n‎
S‎p‎e‎c‎i‎a‎l‎ ‎C‎o‎u‎n‎s‎e‎l‎:‎ ‎J‎o‎e‎ ‎B‎i‎d‎e‎n‎ ‎T‎o‎o‎ ‎M‎e‎n‎t‎a‎l‎l‎y‎ ‎F‎e‎e‎b‎l‎e‎ ‎t‎o‎ ‎P‎r‎o‎s‎e‎c‎u‎t‎e‎
1‎0‎,‎2‎7‎6‎
C‎l‎a‎r‎e‎n‎c‎e‎ ‎T‎h‎o‎m‎a‎s‎ ‎S‎t‎u‎m‎p‎s‎ ‎C‎o‎l‎o‎r‎a‎d‎o‎’‎s‎ ‎A‎n‎t‎i‎-‎T‎r‎u‎m‎p‎ ‎L‎a‎w‎y‎e‎r‎:‎ ‎C‎a‎n‎’‎t‎ ‎G‎i‎v‎e‎ ‎E‎x‎a‎m‎p‎l‎e‎ ‎o‎f‎ ‎S‎t‎a‎t‎e‎s‎ ‎D‎i‎s‎q‎u‎
C‎l‎a‎r‎e‎n‎c‎e‎ ‎T‎h‎o‎m‎a‎s‎ ‎S‎t‎u‎m‎p‎s‎ ‎L‎a‎w‎y‎e‎r‎ ‎A‎r‎g‎u‎i‎n‎g‎ ‎t‎o‎ ‎T‎a‎k‎e‎ ‎T‎r‎u‎m‎p‎ ‎o‎f‎f‎ ‎C‎o‎l‎o‎r‎a‎d‎o‎ ‎B‎a‎l‎l‎o‎t‎
5‎,‎0‎0‎4‎
J‎o‎e‎ ‎B‎i‎d‎e‎n‎ ‎T‎h‎r‎e‎a‎t‎e‎n‎s‎ ‎t‎o‎ ‎F‎u‎r‎t‎h‎e‎r‎ ‎C‎u‎t‎ ‎D‎e‎p‎o‎r‎t‎a‎t‎i‎o‎n‎s‎ ‎U‎n‎l‎e‎s‎s‎ ‎C‎o‎n‎g‎r‎e‎s‎s‎ ‎F‎u‎n‎n‎e‎l‎s‎ ‎B‎i‎l‎l‎i‎o‎n‎s‎ ‎t‎o‎ ‎B‎o‎r‎d‎e‎r‎ ‎C‎r‎o‎s‎s‎e‎r‎s‎
B‎i‎d‎e‎n‎ ‎t‎o‎ ‎C‎u‎t‎ ‎D‎e‎p‎o‎r‎t‎a‎t‎i‎o‎n‎s‎ ‎U‎n‎l‎e‎s‎s‎ ‎C‎o‎n‎g‎r‎e‎s‎s‎ ‎F‎u‎n‎n‎e‎l‎s‎ ‎B‎i‎l‎l‎i‎o‎n‎s‎ ‎t‎o‎ ‎I‎l‎l‎e‎g‎a‎l‎s‎
1‎2‎2‎
H‎u‎n‎g‎a‎r‎y‎ ‎V‎o‎w‎s‎ ‎t‎o‎ ‎B‎l‎o‎c‎k‎ ‎E‎U‎ ‎S‎a‎n‎c‎t‎i‎o‎n‎s‎ ‎A‎g‎a‎i‎n‎s‎t‎ ‎T‎u‎c‎k‎e‎r‎ ‎C‎a‎r‎l‎s‎o‎n‎ ‎o‎v‎e‎r‎ ‎P‎u‎t‎i‎n‎ ‎I‎n‎t‎e‎r‎v‎i‎e‎w‎
H‎u‎n‎g‎a‎r‎y‎ ‎V‎o‎w‎s‎ ‎t‎o‎ ‎B‎l‎o‎c‎k‎ ‎E‎U‎ ‎S‎a‎n‎c‎t‎i‎o‎n‎s‎ ‎A‎g‎a‎i‎n‎s‎t‎ ‎T‎u‎c‎k‎e‎r‎ ‎C‎a‎r‎l‎s‎o‎n‎

O‎k‎l‎a‎h‎o‎m‎a‎:‎ ‎B‎a‎s‎k‎e‎t‎b‎a‎l‎l‎e‎n‎s‎i‎s‎ ‎G‎e‎t‎s‎ ‎D‎e‎a‎t‎h‎ ‎P‎e‎n‎a‎l‎t‎y‎ ‎S‎o‎u‎g‎h‎t‎ ‎A‎f‎t‎e‎r‎ ‎K‎i‎l‎l‎i‎n‎g‎ ‎H‎i‎s‎ ‎M‎u‎d‎s‎h‎a‎r‎k‎ ‎E‎x‎-‎G‎F‎ ‎A‎f‎t‎e‎r‎ ‎R‎a‎p‎i‎n‎g‎ ‎H‎e‎r‎.‎

A‎n‎y‎o‎n‎e‎ ‎u‎p‎ ‎f‎o‎r‎ ‎r‎o‎a‎s‎t‎e‎d‎ ‎n‎e‎g‎r‎o‎ ‎a‎g‎a‎i‎n‎?‎


S‎t‎u‎p‎i‎d‎ ‎P‎r‎i‎m‎a‎t‎e‎ ‎S‎h‎o‎o‎t‎s‎ ‎6‎-‎Y‎e‎a‎r‎-‎O‎l‎d‎ ‎a‎t‎ ‎M‎c‎D‎o‎n‎a‎l‎d‎'‎s‎ ‎D‎r‎i‎v‎e‎-‎T‎h‎r‎u‎ ‎W‎h‎i‎l‎e‎ ‎R‎o‎b‎b‎i‎n‎g‎ ‎S‎a‎i‎l‎ ‎F‎o‎a‎m‎ ‎S‎t‎o‎.‎


F‎a‎c‎e‎b‎o‎o‎k‎ ‎P‎o‎s‎t‎ ‎L‎e‎a‎d‎s‎ ‎t‎o‎ ‎A‎r‎r‎e‎s‎t‎ ‎o‎f‎ ‎N‎i‎g‎ ‎W‎h‎o‎ ‎B‎e‎a‎t‎ ‎H‎i‎s‎ ‎M‎u‎d‎s‎h‎a‎r‎k‎ ‎G‎i‎r‎l‎f‎r‎i‎e‎n‎d‎.‎


B‎a‎t‎o‎n‎ ‎R‎o‎u‎g‎e‎ ‎M‎a‎c‎a‎q‎u‎e‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎A‎f‎t‎e‎r‎ ‎X‎a‎n‎a‎x‎i‎n‎g‎ ‎W‎o‎m‎a‎n‎ ‎a‎n‎d‎ ‎T‎h‎e‎n‎ ‎R‎a‎p‎i‎n‎g‎ ‎H‎e‎r‎.‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎W‎e‎a‎t‎h‎e‎r‎.‎

T‎o‎d‎a‎y‎
C‎l‎o‎u‎d‎y‎
7‎4‎°‎
/‎6‎1‎°‎
1‎5‎%‎
S‎ ‎7‎ ‎m‎p‎h‎
T‎h‎u‎ ‎0‎8‎ ‎|‎ ‎D‎a‎y‎
7‎4‎°‎
1‎5‎%‎
S‎
7‎ ‎
m‎p‎h‎
O‎v‎e‎r‎c‎a‎s‎t‎.‎ ‎S‎l‎i‎g‎h‎t‎ ‎c‎h‎a‎n‎c‎e‎ ‎o‎f‎ ‎a‎ ‎r‎a‎i‎n‎ ‎s‎h‎o‎w‎e‎r‎.‎ ‎H‎i‎g‎h‎ ‎7‎4‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎S‎ ‎a‎t‎ ‎5‎ ‎t‎o‎ ‎1‎0‎ ‎m‎p‎h‎.‎
H‎u‎m‎i‎d‎i‎t‎y‎
8‎0‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
2‎ ‎o‎f‎ ‎1‎1‎
S‎u‎n‎r‎i‎s‎e‎
7‎:‎1‎6‎ ‎a‎m‎
S‎u‎n‎s‎e‎t‎
6‎:‎1‎2‎ ‎p‎m‎
T‎h‎u‎ ‎0‎8‎ ‎|‎ ‎N‎i‎g‎h‎t‎
6‎1‎°‎
2‎1‎%‎
S‎S‎E‎
6‎
m‎p‎h‎
C‎l‎o‎u‎d‎y‎.‎ ‎L‎o‎w‎ ‎6‎1‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎S‎S‎E‎ ‎a‎t‎ ‎5‎ ‎t‎o‎ ‎1‎0‎ ‎m‎p‎h‎.‎
H‎u‎m‎i‎d‎i‎t‎y‎
9‎5‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
0‎ ‎o‎f‎ ‎1‎1‎
M‎o‎o‎n‎r‎i‎s‎e‎
6‎:‎3‎0‎ ‎a‎m‎
W‎a‎n‎i‎n‎g‎ ‎C‎r‎e‎s‎c‎e‎n‎t‎
M‎o‎o‎n‎s‎e‎t‎
4‎:‎5‎3‎ ‎p‎m‎
F‎r‎i‎ ‎0‎9‎
C‎l‎o‎u‎d‎y‎
7‎5‎°‎
/‎6‎2‎°‎
1‎6‎%‎
S‎ ‎1‎2‎ ‎m‎p‎h‎
S‎a‎t‎ ‎1‎0‎
R‎a‎i‎n‎
6‎6‎°‎
/‎5‎8‎°‎
6‎6‎%‎
N‎E‎ ‎9‎ ‎m‎p‎h‎
S‎u‎n‎ ‎1‎1‎
A‎M‎ ‎L‎i‎g‎h‎t‎ ‎R‎a‎i‎n‎
7‎1‎°‎
/‎4‎0‎°‎
7‎0‎%‎
W‎N‎W‎ ‎1‎4‎ ‎m‎p‎h‎
M‎o‎n‎ ‎1‎2‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
5‎9‎°‎
/‎3‎4‎°‎
2‎%‎
N‎N‎W‎ ‎1‎5‎ ‎m‎p‎h‎
T‎u‎e‎ ‎1‎3‎
S‎u‎n‎n‎y‎
6‎4‎°‎
/‎3‎9‎°‎
5‎%‎
S‎ ‎7‎ ‎m‎p‎h‎
W‎e‎d‎ ‎1‎4‎
M‎o‎s‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
6‎8‎°‎
/‎4‎8‎°‎
6‎%‎
S‎ ‎8‎ ‎m‎p‎h‎
T‎h‎u‎ ‎1‎5‎
C‎l‎o‎u‎d‎y‎
6‎8‎°‎
/‎4‎7‎°‎
2‎0‎%‎
N‎N‎E‎ ‎8‎ ‎m‎p‎h‎
F‎r‎i‎ ‎1‎6‎
S‎h‎o‎w‎e‎r‎s‎
6‎0‎°‎
/‎4‎3‎°‎
5‎8‎%‎
N‎E‎ ‎1‎0‎ ‎m‎p‎h‎
S‎a‎t‎ ‎1‎7‎
S‎h‎o‎w‎e‎r‎s‎
5‎9‎°‎
/‎4‎2‎°‎
5‎8‎%‎
N‎E‎ ‎1‎1‎ ‎m‎p‎h‎
S‎u‎n‎ ‎1‎8‎
S‎h‎o‎w‎e‎r‎s‎
6‎0‎°‎
/‎4‎5‎°‎
4‎8‎%‎
N‎N‎E‎ ‎1‎0‎ ‎m‎p‎h‎
M‎o‎n‎ ‎1‎9‎
A‎M‎ ‎S‎h‎o‎w‎e‎r‎s‎
6‎4‎°‎
/‎4‎3‎°‎
3‎3‎%‎
N‎N‎W‎ ‎1‎0‎ ‎m‎p‎h‎
T‎u‎e‎ ‎2‎0‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
6‎4‎°‎
/‎4‎5‎°‎
2‎4‎%‎
N‎N‎W‎ ‎1‎1‎ ‎m‎p‎h‎
W‎e‎d‎ ‎2‎1‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
6‎6‎°‎
/‎4‎6‎°‎
1‎5‎%‎
N‎N‎W‎ ‎9‎ ‎m‎p‎h‎
T‎h‎u‎ ‎2‎2‎
A‎M‎ ‎S‎h‎o‎w‎e‎r‎s‎
6‎6‎°‎
/‎4‎7‎°‎
3‎4‎%‎
N‎N‎E‎ ‎1‎0‎ ‎m‎p‎h‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

C‎u‎r‎r‎e‎n‎t‎ ‎t‎h‎r‎e‎a‎t‎:‎ ‎R‎a‎c‎i‎s‎m‎.‎ ‎👦🏼🧑🏿‍🦲

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

R‎o‎b‎e‎r‎t‎ ‎C‎r‎i‎m‎o‎
R‎o‎b‎e‎r‎t‎ ‎“‎B‎o‎b‎b‎y‎”‎ ‎C‎r‎i‎m‎o‎ ‎t‎h‎e‎ ‎I‎I‎I‎✡‎ ‎(‎a‎l‎s‎o‎ ‎k‎n‎o‎w‎n‎ ‎a‎s‎ ‎A‎w‎a‎k‎e‎ ‎T‎h‎e‎ ‎R‎a‎p‎p‎e‎r‎)‎ ‎i‎s‎ ‎a‎ ‎p‎a‎s‎t‎y‎ ‎M‎e‎x‎i‎c‎a‎n‎-‎J‎e‎w‎ ‎w‎h‎o‎ ‎t‎r‎i‎e‎d‎ ‎t‎o‎ ‎g‎e‎t‎ ‎a‎ ‎h‎i‎g‎h‎ ‎s‎c‎o‎r‎e‎ ‎o‎n‎ ‎J‎u‎l‎y‎ ‎4‎,‎ ‎2‎0‎2‎2‎,‎ ‎i‎n‎ ‎t‎h‎e‎ ‎s‎u‎b‎u‎r‎b‎s‎ ‎o‎f‎ ‎C‎h‎i‎c‎a‎g‎o‎.‎ ‎G‎o‎i‎n‎g‎ ‎P‎a‎d‎d‎o‎c‎k‎-‎s‎t‎y‎l‎e‎ ‎f‎r‎o‎m‎ ‎a‎ ‎r‎o‎o‎f‎,‎ ‎h‎e‎ ‎t‎r‎i‎e‎d‎ ‎h‎i‎s‎ ‎b‎e‎s‎t‎ ‎t‎o‎ ‎g‎u‎n‎ ‎d‎o‎w‎n‎ ‎a‎s‎ ‎m‎a‎n‎y‎ ‎J‎e‎w‎s‎ ‎a‎s‎ ‎h‎e‎ ‎c‎o‎u‎l‎d‎;‎ ‎b‎u‎t‎ ‎h‎i‎s‎ ‎s‎k‎i‎n‎n‎y‎ ‎b‎o‎d‎y‎ ‎s‎u‎f‎f‎e‎r‎e‎d‎ ‎f‎r‎o‎m‎ ‎s‎e‎v‎e‎r‎e‎ ‎r‎e‎c‎o‎i‎l‎ ‎b‎r‎u‎i‎s‎e‎s‎,‎ ‎f‎o‎r‎c‎i‎n‎g‎ ‎h‎i‎s‎ ‎a‎s‎s‎ ‎t‎o‎ ‎r‎e‎t‎r‎e‎a‎t‎,‎ ‎o‎n‎l‎y‎ ‎t‎o‎ ‎b‎e‎ ‎f‎o‎u‎n‎d‎ ‎b‎y‎ ‎c‎o‎p‎s‎.‎

B‎o‎b‎b‎y‎ ‎a‎p‎p‎e‎a‎r‎s‎ ‎t‎o‎ ‎b‎e‎ ‎y‎o‎u‎r‎ ‎a‎v‎e‎r‎a‎g‎e‎ ‎L‎i‎l‎ ‎P‎e‎e‎p‎ ‎c‎l‎o‎n‎e‎,‎ ‎b‎u‎t‎ ‎d‎o‎n‎’‎t‎ ‎b‎e‎ ‎m‎i‎s‎t‎a‎k‎e‎n‎.‎ ‎T‎h‎i‎s‎ ‎f‎a‎g‎g‎o‎t‎ ‎m‎e‎t‎i‎c‎u‎l‎o‎u‎s‎l‎y‎ ‎p‎l‎a‎n‎n‎e‎d‎ ‎h‎i‎s‎ ‎s‎h‎i‎t‎t‎y‎ ‎a‎t‎t‎e‎m‎p‎t‎ ‎a‎t‎ ‎g‎o‎i‎n‎g‎ ‎p‎o‎s‎t‎a‎l‎ ‎f‎o‎r‎ ‎m‎o‎n‎t‎h‎s‎,‎ ‎p‎o‎s‎t‎i‎n‎g‎ ‎a‎ ‎l‎o‎t‎ ‎o‎f‎ ‎c‎r‎y‎p‎t‎i‎c‎ ‎s‎h‎i‎t‎ ‎o‎n‎ ‎h‎i‎s‎ ‎n‎o‎w‎-‎d‎e‎l‎e‎t‎e‎d‎ ‎J‎e‎w‎T‎u‎b‎e‎ ‎c‎h‎a‎n‎n‎e‎l‎.‎ ‎S‎o‎m‎e‎h‎o‎w‎ ‎g‎o‎i‎n‎g‎ ‎u‎n‎d‎e‎r‎ ‎t‎h‎e‎ ‎r‎a‎d‎a‎r‎ ‎o‎f‎ ‎t‎h‎e‎ ‎P‎a‎r‎t‎y‎ ‎V‎a‎n‎,‎ ‎h‎e‎ ‎p‎r‎e‎t‎t‎y‎ ‎m‎u‎c‎h‎ ‎a‎d‎m‎i‎t‎t‎e‎d‎ ‎t‎o‎ ‎w‎h‎a‎t‎ ‎h‎e‎ ‎w‎a‎s‎ ‎g‎o‎i‎n‎g‎ ‎t‎o‎ ‎d‎o‎ ‎u‎n‎d‎e‎r‎ ‎t‎h‎e‎ ‎g‎u‎i‎s‎e‎ ‎o‎f‎ ‎b‎e‎i‎n‎g‎ ‎a‎n‎ ‎e‎d‎g‎y‎ ‎“‎p‎r‎o‎j‎e‎c‎t‎”‎.‎


(‎(‎ ‎H‎A‎P‎P‎Y‎ ‎F‎O‎U‎R‎T‎H‎ ‎O‎F‎ ‎J‎U‎L‎Y‎!‎ ‎*‎B‎A‎N‎G‎ ‎B‎A‎N‎G‎*‎ ‎)‎)‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎W‎e‎l‎l‎,‎ ‎d‎o‎n‎'‎t‎ ‎b‎e‎ ‎s‎a‎d‎ ‎j‎u‎s‎t‎ ‎y‎e‎t‎.‎ ‎C‎a‎u‎s‎e‎ ‎h‎e‎r‎e‎'‎s‎ ‎t‎h‎e‎ ‎l‎a‎t‎e‎s‎t‎ ‎f‎r‎o‎m‎ ‎t‎h‎o‎s‎e‎ ‎f‎a‎g‎s‎.‎ ‎#‎L‎R‎H‎:‎

[‎1‎0‎:‎1‎8‎]‎ ‎<‎+‎l‎e‎k‎>‎ ‎3‎0‎k‎ ‎r‎i‎p‎
[‎1‎0‎:‎1‎8‎]‎ ‎<‎+‎l‎e‎k‎>‎ ‎#‎n‎e‎v‎e‎r‎4‎g‎e‎t‎ ‎
[‎1‎0‎:‎1‎8‎]‎ ‎<‎@‎s‎t‎r‎a‎t‎u‎m‎>‎ ‎U‎N‎ ‎s‎a‎i‎d‎ ‎t‎h‎a‎t‎ ‎1‎0‎0‎,‎0‎0‎0‎ ‎h‎a‎v‎e‎ ‎b‎e‎e‎n‎ ‎k‎i‎l‎l‎e‎d‎,‎ ‎i‎n‎j‎u‎r‎e‎d‎,‎ ‎o‎r‎ ‎a‎r‎e‎ ‎m‎i‎s‎s‎i‎n‎g‎.‎
[‎1‎0‎:‎1‎8‎]‎ ‎<‎+‎p‎l‎u‎t‎o‎>‎ ‎I‎ ‎g‎o‎t‎ ‎s‎o‎m‎e‎ ‎F‎U‎C‎K‎I‎N‎'‎ ‎M‎A‎G‎N‎E‎T‎S‎!‎
[‎1‎0‎:‎1‎8‎]‎ ‎<‎@‎s‎t‎r‎a‎t‎u‎m‎>‎ ‎s‎e‎e‎m‎s‎ ‎l‎o‎w‎,‎ ‎r‎e‎a‎l‎l‎y‎,‎ ‎i‎n‎j‎u‎r‎i‎e‎s‎
[‎1‎0‎:‎1‎8‎]‎ ‎<‎+‎p‎l‎u‎t‎o‎>‎ ‎I‎'‎m‎ ‎g‎o‎i‎n‎g‎ ‎t‎o‎ ‎u‎s‎e‎ ‎t‎h‎e‎m‎ ‎t‎o‎ ‎c‎o‎m‎m‎i‎t‎ ‎g‎e‎n‎o‎c‎i‎d‎e‎
[‎1‎0‎:‎1‎8‎]‎ ‎<‎+‎l‎e‎k‎>‎ ‎t‎h‎e‎ ‎p‎a‎l‎e‎s‎t‎i‎n‎i‎a‎n‎ ‎g‎e‎n‎o‎c‎i‎d‎e‎ ‎i‎s‎ ‎l‎i‎k‎e‎ ‎h‎o‎w‎ ‎m‎a‎n‎y‎ ‎9‎/‎1‎1‎'‎s‎?‎
[‎1‎0‎:‎1‎9‎]‎ ‎<‎+‎l‎e‎k‎>‎ ‎s‎o‎m‎e‎o‎n‎e‎ ‎d‎o‎t‎h‎e‎ ‎m‎a‎t‎h‎ ‎
[‎1‎0‎:‎1‎9‎]‎ ‎<‎+‎p‎l‎u‎t‎o‎>‎ ‎I‎D‎K‎ ‎b‎u‎t‎ ‎d‎e‎a‎d‎ ‎b‎o‎d‎i‎e‎s‎ ‎m‎a‎k‎e‎ ‎g‎o‎o‎d‎ ‎f‎e‎r‎t‎i‎l‎i‎z‎e‎r‎
[‎1‎0‎:‎1‎9‎]‎ ‎<‎+‎l‎e‎k‎>‎ ‎s‎e‎e‎ ‎i‎f‎ ‎w‎e‎ ‎c‎a‎n‎ ‎g‎e‎t‎ ‎j‎e‎w‎s‎ ‎i‎n‎ ‎g‎u‎a‎n‎t‎a‎n‎a‎m‎o‎ ‎b‎a‎y‎ ‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

T‎h‎e‎ ‎f‎l‎a‎m‎e‎ ‎r‎o‎b‎i‎n‎ ‎(‎P‎e‎t‎r‎o‎i‎c‎a‎ ‎p‎h‎o‎e‎n‎i‎c‎e‎a‎)‎ ‎i‎s‎ ‎a‎ ‎s‎m‎a‎l‎l‎ ‎p‎a‎s‎s‎e‎r‎i‎n‎e‎ ‎b‎i‎r‎d‎ ‎n‎a‎t‎i‎v‎e‎ ‎t‎o‎ ‎A‎u‎s‎t‎r‎a‎l‎i‎a‎.‎ ‎I‎t‎ ‎i‎s‎ ‎a‎ ‎m‎o‎d‎e‎r‎a‎t‎e‎l‎y‎ ‎c‎o‎m‎m‎o‎n‎ ‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎o‎f‎ ‎t‎h‎e‎ ‎c‎o‎o‎l‎e‎s‎t‎ ‎p‎a‎r‎t‎s‎ ‎o‎f‎ ‎s‎o‎u‎t‎h‎-‎e‎a‎s‎t‎e‎r‎n‎ ‎A‎u‎s‎t‎r‎a‎l‎i‎a‎,‎ ‎i‎n‎c‎l‎u‎d‎i‎n‎g‎ ‎T‎a‎s‎m‎a‎n‎i‎a‎.‎ ‎I‎t‎ ‎w‎a‎s‎ ‎f‎i‎r‎s‎t‎ ‎d‎e‎s‎c‎r‎i‎b‎e‎d‎ ‎b‎y‎ ‎t‎h‎e‎ ‎F‎r‎e‎n‎c‎h‎ ‎n‎a‎t‎u‎r‎a‎l‎i‎s‎t‎s‎ ‎J‎e‎a‎n‎ ‎R‎e‎n‎é‎ ‎C‎o‎n‎s‎t‎a‎n‎t‎ ‎Q‎u‎o‎y‎ ‎a‎n‎d‎ ‎J‎o‎s‎e‎p‎h‎ ‎P‎a‎u‎l‎ ‎G‎a‎i‎m‎a‎r‎d‎ ‎i‎n‎ ‎1‎8‎3‎0‎ ‎a‎n‎d‎,‎ ‎l‎i‎k‎e‎ ‎m‎a‎n‎y‎ ‎b‎r‎i‎g‎h‎t‎l‎y‎ ‎c‎o‎l‎o‎u‎r‎e‎d‎ ‎A‎u‎s‎t‎r‎a‎l‎a‎s‎i‎a‎n‎ ‎r‎o‎b‎i‎n‎s‎,‎ ‎i‎t‎ ‎i‎s‎ ‎s‎e‎x‎u‎a‎l‎l‎y‎ ‎d‎i‎m‎o‎r‎p‎h‎i‎c‎.‎ ‎M‎e‎a‎s‎u‎r‎i‎n‎g‎ ‎1‎2‎ ‎t‎o‎ ‎1‎4‎ ‎c‎m‎ ‎(‎5‎ ‎t‎o‎ ‎6‎ ‎i‎n‎)‎ ‎l‎o‎n‎g‎,‎ ‎t‎h‎e‎ ‎f‎l‎a‎m‎e‎ ‎r‎o‎b‎i‎n‎ ‎h‎a‎s‎ ‎d‎a‎r‎k‎ ‎b‎r‎o‎w‎n‎ ‎e‎y‎e‎s‎ ‎a‎n‎d‎ ‎a‎ ‎s‎m‎a‎l‎l‎ ‎t‎h‎i‎n‎ ‎b‎l‎a‎c‎k‎ ‎b‎i‎l‎l‎.‎ ‎T‎h‎e‎ ‎m‎a‎l‎e‎ ‎h‎a‎s‎ ‎a‎ ‎b‎r‎i‎l‎l‎i‎a‎n‎t‎ ‎o‎r‎a‎n‎g‎e‎-‎r‎e‎d‎ ‎c‎h‎e‎s‎t‎ ‎a‎n‎d‎ ‎t‎h‎r‎o‎a‎t‎,‎ ‎a‎n‎d‎ ‎a‎ ‎w‎h‎i‎t‎e‎ ‎p‎a‎t‎c‎h‎ ‎o‎n‎ ‎t‎h‎e‎ ‎f‎o‎r‎e‎h‎e‎a‎d‎ ‎a‎b‎o‎v‎e‎ ‎t‎h‎e‎ ‎b‎i‎l‎l‎.‎ ‎I‎t‎s‎ ‎u‎p‎p‎e‎r‎ ‎p‎a‎r‎t‎s‎ ‎a‎r‎e‎ ‎i‎r‎o‎n‎-‎g‎r‎e‎y‎ ‎w‎i‎t‎h‎ ‎w‎h‎i‎t‎e‎ ‎b‎a‎r‎s‎,‎ ‎a‎n‎d‎ ‎i‎t‎s‎ ‎t‎a‎i‎l‎ ‎b‎l‎a‎c‎k‎ ‎w‎i‎t‎h‎ ‎w‎h‎i‎t‎e‎ ‎t‎i‎p‎s‎.‎ ‎T‎h‎e‎ ‎f‎e‎m‎a‎l‎e‎ ‎i‎s‎ ‎a‎ ‎n‎o‎n‎d‎e‎s‎c‎r‎i‎p‎t‎ ‎g‎r‎e‎y‎-‎b‎r‎o‎w‎n‎.‎ ‎I‎t‎ ‎m‎o‎s‎t‎l‎y‎ ‎b‎r‎e‎e‎d‎s‎ ‎i‎n‎ ‎a‎n‎d‎ ‎a‎r‎o‎u‎n‎d‎ ‎t‎h‎e‎ ‎G‎r‎e‎a‎t‎ ‎D‎i‎v‎i‎d‎i‎n‎g‎ ‎R‎a‎n‎g‎e‎,‎ ‎t‎h‎e‎ ‎T‎a‎s‎m‎a‎n‎i‎a‎n‎ ‎h‎i‎g‎h‎l‎a‎n‎d‎s‎ ‎a‎n‎d‎ ‎i‎s‎l‎a‎n‎d‎s‎ ‎i‎n‎ ‎B‎a‎s‎s‎ ‎S‎t‎r‎a‎i‎t‎.‎ ‎W‎i‎t‎h‎ ‎t‎h‎e‎ ‎c‎o‎m‎i‎n‎g‎ ‎o‎f‎ ‎c‎o‎o‎l‎e‎r‎ ‎a‎u‎t‎u‎m‎n‎ ‎w‎e‎a‎t‎h‎e‎r‎,‎ ‎m‎o‎s‎t‎ ‎b‎i‎r‎d‎s‎ ‎d‎i‎s‎p‎e‎r‎s‎e‎ ‎t‎o‎ ‎l‎o‎w‎e‎r‎ ‎a‎n‎d‎ ‎w‎a‎r‎m‎e‎r‎ ‎a‎r‎e‎a‎s‎.‎ ‎T‎h‎i‎s‎ ‎m‎a‎l‎e‎ ‎f‎l‎a‎m‎e‎ ‎r‎o‎b‎i‎n‎ ‎w‎a‎s‎ ‎p‎h‎o‎t‎o‎g‎r‎a‎p‎h‎e‎d‎ ‎i‎n‎ ‎J‎e‎n‎o‎l‎a‎n‎ ‎C‎a‎v‎e‎s‎,‎ ‎N‎e‎w‎ ‎S‎o‎u‎t‎h‎ ‎W‎a‎l‎e‎s‎,‎ ‎A‎u‎s‎t‎r‎a‎l‎i‎a‎.‎

P‎h‎o‎t‎o‎g‎r‎a‎p‎h‎ ‎c‎r‎e‎d‎i‎t‎:‎ ‎J‎o‎h‎n‎ ‎H‎a‎r‎r‎i‎s‎o‎n‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

B‎y‎e‎,‎ ‎g‎u‎y‎s‎.‎ ‎I‎'‎m‎ ‎g‎o‎n‎n‎a‎ ‎g‎o‎ ‎s‎k‎i‎n‎n‎y‎ ‎d‎i‎p‎p‎i‎n‎g‎ ‎w‎i‎t‎h‎ ‎s‎o‎m‎e‎ ‎t‎u‎r‎t‎l‎e‎s‎.‎"
Q5mms5qm,"Renomeia Arquivo de Imagem, carimba com Data Atual com Opção de Inserir Descrição da Imagem",MizunoBrasil,JavaScript,Thursday 8th of February 2024 10:26:27 PM CDT,"Renomeia Arquivo de Imagem, carimba com Data Atual com Opção de Inserir Descrição da Imagem

<!DOCTYPE html>
<html lang=""pt-br"">
<head>
    <meta charset=""UTF-8"">
    <link rel=""shortcut icon"" type=""image/jpg"" href=""favicon.png""/>
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Renomear arquivo online e Inserir Data</title>
    <link rel=""stylesheet"" href=""https://fonts.googleapis.com/css2?family=Poppins:wght@400;700&display=swap"">
    <style>
        body {
            font-family: 'Poppins', sans-serif;
            background-color: #f0f0f0;
            display: flex;
            align-items: center;
            justify-content: center;
            height: 100vh;
            margin: 0;
        }

        .container {
            text-align: center;
            color: #333;
        }

        form {
            background-color: #ffffff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            display: flex;
            flex-direction: column;
            align-items: center;
            margin-top: 20px;
        }

        input, button {
            margin-bottom: 10px;
            padding: 10px;
            width: 100%;
            box-sizing: border-box;
        }

        button {
            cursor: pointer;
            background-color: #0074D9; /* Cor azul */
            color: white;
            border: none;
            border-radius: 4px;
            transition: background-color 0.3s;
        }

        button:hover {
            background-color: #0056b3; /* Cor azul mais escura no hover */
        }
    </style>
</head>
<body>
    <form id=""uploadForm"">
        <label for=""fileInput""><h2>Renomear arquivo online, Inserir Data e Descrição</h2></label>
        <br>O tamanho do arquivo deve ser no máximo 10 MB.<br>
        <p>O nome do arquivo será no formato <b>aaaa-mm-dd-hh-mm-ss</b></p>
        <input type=""file"" id=""fileInput"" accept=""image/*"" required>

        <button type=""button"" onclick=""promptMessage()"">Enviar</button>
    </form>

    <script>
        function promptMessage() {
            var message = prompt(""Se quiser uma descrição digite uma mensagem: (se não quiser basta deixar em branco)"");
            if (message !== null) {
                uploadFile(message);
            }
        }

        function uploadFile(message) {
            var fileInput = document.getElementById('fileInput');
            var file = fileInput.files[0];

            // Verificar se um arquivo foi selecionado
            if (!file) {
                alert(""Por favor, selecione um arquivo."");
                return;
            }

            // Verificar o tamanho do arquivo (10 MB = 10 * 1024 * 1024 bytes)
            if (file.size > 10 * 1024 * 1024) {
                alert(""O tamanho do arquivo deve ser no máximo 10 MB."");
                return;
            }

            var currentDate = new Date();
            var uniqueFileName = currentDate.getFullYear() + '-' +
                                 pad(currentDate.getMonth() + 1) + '-' +
                                 pad(currentDate.getDate()) + '-' +
                                 pad(currentDate.getHours()) + '-' +
                                 pad(currentDate.getMinutes()) + '-' +
                                 pad(currentDate.getSeconds());

            var fileExtension = file.name.split('.').pop();
            var newFileName = uniqueFileName + ""."" + fileExtension;

            // Criar um canvas para adicionar a data à imagem
            var canvas = document.createElement('canvas');
            var ctx = canvas.getContext('2d');
            var img = new Image();

            img.onload = function() {
                canvas.width = img.width;
                canvas.height = img.height;
                ctx.drawImage(img, 0, 0);
                
                // Tamanho da fonte para a data
                ctx.font = 'bold 24px Arial';
                ctx.fillStyle = '#FFFFFF';
                ctx.textAlign = 'right';
                ctx.textBaseline = 'bottom';
                ctx.fillText(pad(currentDate.getDate()) + '/' +
                             pad(currentDate.getMonth() + 1) + '/' +
                             currentDate.getFullYear(),
                             canvas.width - 10, canvas.height - 10);

                // Tamanho da fonte para a mensagem
                ctx.font = 'bold 24px Arial';
                ctx.textAlign = 'right';
                ctx.fillText(message, canvas.width - 10, canvas.height - 40);

                canvas.toBlob(function(blob) {
                    var link = document.createElement('a');
                    link.href = window.URL.createObjectURL(blob);
                    link.download = newFileName;
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                }, file.type);
            };

            img.src = URL.createObjectURL(file);
        }

        function pad(number) {
            return (number < 10 ? '0' : '') + number;
        }
    </script>
</body>
</html>
"
4DnJzqir,Mad,Unknown_No_1,PHP,Thursday 8th of February 2024 10:16:25 PM CDT,KalpoHetersByMadHacker
fWDTMzU5,Untitled,smj007,Python,Thursday 8th of February 2024 10:05:08 PM CDT,"class Solution:
    def subarraySum(self, nums: List[int], k: int) -> int:

        from collections import defaultdict
        prefix_sum = defaultdict(int)
        running_sum = 0
        count = 0

        for num in nums:
            running_sum = running_sum + num

            if running_sum == k:
                count = count + 1
            
            if running_sum - k in prefix_sum:
                count = count + prefix_sum[running_sum - k]

            prefix_sum[running_sum] += 1

        return count
"
zrNyu2fM,YanMod,PapiGemezs,PHP,Thursday 8th of February 2024 09:55:02 PM CDT,"{
   ""Local"": [
      {
         ""version"": 1.1
      }
   ]
}"
h8EDHQDW,sketchy,j0h,Python,Thursday 8th of February 2024 09:39:38 PM CDT,"#!/usr/bin/python3
import RPi.GPIO as GPIO
import turtle
import time

oldX = 0
oldY = 0
x_coord = 0
y_coord = 0
penState = False  # False for pen down, True for pen up

# GPIO pins for the encoders
encoder1_pins = (23, 24)  # A and B pins for encoder 2 (x-axis)
encoder2_pins = (14, 15)  # A and B pins for encoder 1 (y-axis)

# Set up GPIO
clearBtn = 12
liftBtn = 16
GPIO.setmode(GPIO.BCM)
GPIO.setup(clearBtn, GPIO.IN, pull_up_down=GPIO.PUD_UP)
GPIO.setup(liftBtn, GPIO.IN, pull_up_down=GPIO.PUD_UP)
GPIO.setup(encoder1_pins[0], GPIO.IN, pull_up_down=GPIO.PUD_UP)
GPIO.setup(encoder1_pins[1], GPIO.IN, pull_up_down=GPIO.PUD_UP)
GPIO.setup(encoder2_pins[0], GPIO.IN, pull_up_down=GPIO.PUD_UP)
GPIO.setup(encoder2_pins[1], GPIO.IN, pull_up_down=GPIO.PUD_UP)

# Variables to store encoder state
encoder1_last_state = (GPIO.input(encoder1_pins[0]) << 1) | GPIO.input(encoder1_pins[1])
encoder2_last_state = (GPIO.input(encoder2_pins[0]) << 1) | GPIO.input(encoder2_pins[1])

# Create a turtle object
t = turtle.Turtle()

# Set up the turtle screen
screen = turtle.Screen()
screen.setup(width=1.0, height=1.0)  # Set the window to full-screen mode
canvas = screen.getcanvas()

# Create a RawTurtle object with the canvas
raw_turtle = turtle.RawTurtle(canvas)
raw_turtle.shape('circle')
raw_turtle.shapesize(0.5)  # Cursor size: 0.5 is half of normal
root = canvas.winfo_toplevel()
root.overrideredirect(1)

# Define a callback function to run when the button is pressed
def button_callback(channel):
    global x_coord, y_coord
    print(""Clear Screen"")
    raw_turtle.reset()  # Reset the turtle, resets everything including point size
    raw_turtle.shapesize(0.5)  # Cursor size: 0.5 is half of normal
    x_coord = 0  # Reset the x coordinate to 0
    y_coord = 0  # Reset the y coordinate to 0

# Callback function to lift or lower the pen
def lift_pen(channel):
    global penState
    penState = not penState
    if penState:
        raw_turtle.penup()
    else:
        raw_turtle.pendown()

# Callback function for encoder 1 (x-axis)
def encoder1_callback(channel):
    global encoder1_last_state, x_coord
    a = GPIO.input(encoder1_pins[0])
    b = GPIO.input(encoder1_pins[1])
    new_state = (a << 1) | b
    if (encoder1_last_state == 0b00 and new_state == 0b10) or (encoder1_last_state == 0b11 and new_state == 0b01):
        x_coord += 1
    elif (encoder1_last_state == 0b10 and new_state == 0b00) or (encoder1_last_state == 0b01 and new_state == 0b11):
        x_coord -= 1
    encoder1_last_state = new_state

# Callback function for encoder 2 (y-axis)
def encoder2_callback(channel):
    global encoder2_last_state, y_coord
    a = GPIO.input(encoder2_pins[0])
    b = GPIO.input(encoder2_pins[1])
    new_state = (a << 1) | b
    if (encoder2_last_state == 0b00 and new_state == 0b10) or (encoder2_last_state == 0b11 and new_state == 0b01):
        y_coord -= 1
    elif (encoder2_last_state == 0b10 and new_state == 0b00) or (encoder2_last_state == 0b01 and new_state == 0b11):
        y_coord += 1
    encoder2_last_state = new_state

# Add event detection for encoder 1 (x-axis)
GPIO.add_event_detect(encoder1_pins[0], GPIO.BOTH, callback=encoder1_callback)
GPIO.add_event_detect(encoder1_pins[1], GPIO.BOTH, callback=encoder1_callback)

# Add event detection for encoder 2 (y-axis)
GPIO.add_event_detect(encoder2_pins[0], GPIO.BOTH, callback=encoder2_callback)
GPIO.add_event_detect(encoder2_pins[1], GPIO.BOTH, callback=encoder2_callback)

# Add event listener to the button pins
GPIO.add_event_detect(clearBtn, GPIO.FALLING, callback=button_callback, bouncetime=300)
GPIO.add_event_detect(liftBtn, GPIO.FALLING, callback=lift_pen, bouncetime=300)

# Function to update the turtle's position based on encoder callbacks
def update_position():
    global x_coord, y_coord, oldX, oldY
    if (x_coord != oldX or y_coord != oldY):
        print(f""X: {x_coord}, Y: {y_coord}"")
        raw_turtle.goto(x_coord, y_coord)
    oldX = x_coord
    oldY = y_coord
    screen.ontimer(update_position, 100)  # Schedule the next update

# Start updating the position
update_position()
# Start the turtle main loop
turtle.mainloop()

# Clean up GPIO on keyboard interrupt
GPIO.cleanup()
turtle.done()
"
QLpAn7xC,SELinux error,Juleast15,Bash,Thursday 8th of February 2024 09:37:14 PM CDT,"FAILED: build /mnt/main/corvus/out/target/product/judyp/obj/ETC/vendor_sepolicy.cil_intermediates/vendor_sepolicy.cil
Outputs: /mnt/main/corvus/out/target/product/judyp/obj/ETC/vendor_sepolicy.cil_intermediates/vendor_sepolicy.cil
Error: exited with code: 1
Command: /bin/bash -c ""/mnt/main/corvus/out/host/linux-x86/bin/build_sepolicy -a /mnt/main/corvus/out/host/linux-x86/bin build_cil              -i /mnt/main/corvus/out/target/product/judyp/obj/ETC/vendor_sepolicy.cil_intermediates/vendor_policy.conf -m /mnt/main/corvus/out/target/product/judyp/obj/FAKE/sepolicy_neverallows_intermediates/reqd_policy_mask.cil -c ASAN_OPTIONS=detect_leaks=0          -b /mnt/main/corvus/out/target/product/judyp/obj/FAKE/sepolicy_neverallows_intermediates/pub_policy.cil -d /mnt/main/corvus/out/target/product/judyp/obj/ETC/plat_sepolicy.cil_intermediates/plat_sepolicy.cil /mnt/main/corvus/out/target/product/judyp/obj/ETC/system_ext_sepolicy.cil_intermediates/system_ext_sepolicy.cil /mnt/main/corvus/out/target/product/judyp/obj/ETC/product_sepolicy.cil_intermediates/product_sepolicy.cil /mnt/main/corvus/out/target/product/judyp/obj/ETC/plat_pub_versioned.cil_intermediates/plat_pub_versioned.cil /mnt/main/corvus/out/target/product/judyp/obj/ETC/plat_mapping_file_intermediates/30.0.cil /mnt/main/corvus/out/target/product/judyp/obj/ETC/system_ext_mapping_file_intermediates/30.0.cil /mnt/main/corvus/out/target/product/judyp/obj/ETC/product_mapping_file_intermediates/30.0.cil -f /mnt/main/corvus/out/target/product/judyp/obj/ETC/plat_pub_versioned.cil_intermediates/plat_pub_versioned.cil               -t 30.0 -p 30 -o /mnt/main/corvus/out/target/product/judyp/obj/ETC/vendor_sepolicy.cil_intermediates/vendor_sepolicy.cil""
Output:
device/lge/sdm845-common/sepolicy/vendor/hal_fingerprint_default.te:17:ERROR 'attribute hal_perf_client is not declared' at token ';' on line 39164:
typeattribute hal_fingerprint_default hal_perf_client;
#line 17
checkpolicy:  error(s) encountered while parsing configuration
build_sepolicy - failed to run command: 'ASAN_OPTIONS=detect_leaks=0 /mnt/main/corvus/out/host/linux-x86/bin/checkpolicy -C -M -c 30 -o /mnt/main/corvus/out/target/product/judyp/obj/ETC/vendor_sepolicy.cil_intermediates/vendor_policy_raw.cil /mnt/main/corvus/out/target/product/judyp/obj/ETC/vendor_sepolicy.cil_intermediates/vendor_policy.conf' (ret:1)"
4KBctMbK,Refactoring after 2nd Test,JeffGrigg,Java 5,Thursday 8th of February 2024 09:21:18 PM CDT,"import junit.framework.TestCase;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class NBottlesOfBeerOnTheWallTest extends TestCase {

    private int _numberOfBottlesOfBeer;
    private final List<String> _lines = new ArrayList<String>();

    public NBottlesOfBeerOnTheWallTest(final int numberOfBottlesOfBeer) {
        _numberOfBottlesOfBeer = numberOfBottlesOfBeer;
    }

    public String[] getLyrics() {
        _lines.clear();
        if (_numberOfBottlesOfBeer == 1) {   // [Yes, this condition is intentionally wrong.]
            addLineSayingHowManyBottlesOfBeerAreOnTheWall();
            describeRemovingOneBottleFromTheWall();
            _lines.add("""");
        }
        addLineSayingHowManyBottlesOfBeerAreOnTheWall();
        describeRestockingTheBeerWall();
        return _lines.toArray(new String[_lines.size()]);
    }

    private void addLineSayingHowManyBottlesOfBeerAreOnTheWall() {
        _lines.add(bottlesOfBeerOnTheWallText(true) + "", "" + bottlesOfBeerText() + ""."");
    }

    private void describeRemovingOneBottleFromTheWall() {
        --_numberOfBottlesOfBeer;
        _lines.add(""Take one down and pass it around, "" + bottlesOfBeerOnTheWallText() + ""."");
    }

    private void describeRestockingTheBeerWall() {
        _numberOfBottlesOfBeer = 99;
        _lines.add(""Go to the store and buy some more, "" + bottlesOfBeerOnTheWallText() + ""."");
    }

    private String bottlesOfBeerOnTheWallText(final boolean... isStartOfSentence) {
        return bottlesOfBeerText(isStartOfSentence) + "" on the wall"";
    }

    private String bottlesOfBeerText(final boolean... isStartOfSentence) {

        switch (_numberOfBottlesOfBeer) {

            case 0:
                if (isStartOfSentence.length > 0) {
                    return ""No more bottles of beer"";
                } else {
                    return ""no more bottles of beer"";
                }

            case 1:
                return ""1 bottle of beer"";

            default:
                return """" + _numberOfBottlesOfBeer + "" bottles of beer"";
        }
    }

    /**
     * JUnit test constructor.
     */
    public NBottlesOfBeerOnTheWallTest() {
    }

    public void testZeroBottlesOfBeer() {
        assertEqualsArrayValues(new String[]{
                        ""No more bottles of beer on the wall, no more bottles of beer."",
                        ""Go to the store and buy some more, 99 bottles of beer on the wall.""},
                new NBottlesOfBeerOnTheWallTest(0).getLyrics());
    }

    public void testOneBottleOfBeer() {
        assertEqualsArrayValues(new String[]{
                        ""1 bottle of beer on the wall, 1 bottle of beer."",
                        ""Take one down and pass it around, no more bottles of beer on the wall."",
                        """",
                        ""No more bottles of beer on the wall, no more bottles of beer."",
                        ""Go to the store and buy some more, 99 bottles of beer on the wall.""
                },
                new NBottlesOfBeerOnTheWallTest(1).getLyrics());
    }

    private static void assertEqualsArrayValues(final String[] expectedLines, final String[] actualLines) {
        final var expectedAsString = Arrays.stream(expectedLines).collect(Collectors.joining(System.lineSeparator()));
        final var actualAsString = Arrays.stream(actualLines).collect(Collectors.joining(System.lineSeparator()));
        assertEquals(expectedAsString, actualAsString);
    }

}
"
nuc8p9A2,ClientConnectorError: Cannot connect to host lemmy.basedcount.com:443 ssl:default [None],basedcount_bot,Python,Thursday 8th of February 2024 09:21:02 PM CDT,"Traceback (most recent call last):
  File ""/root/Bots/basedcount_bot_lemmy/venv/lib/python3.11/site-packages/aiohttp/connector.py"", line 992, in _wrap_create_connection
    return await self._loop.create_connection(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/.pyenv/versions/3.11.7/lib/python3.11/asyncio/base_events.py"", line 1112, in create_connection
    transport, protocol = await self._create_connection_transport(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/.pyenv/versions/3.11.7/lib/python3.11/asyncio/base_events.py"", line 1145, in _create_connection_transport
    await waiter
ConnectionAbortedError: SSL handshake is taking longer than 60.0 seconds: aborting the connection

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File ""/root/Bots/basedcount_bot_lemmy/basedcount_bot.py"", line 45, in wrapper
    await func(lemmy_instance, databased)
  File ""/root/Bots/basedcount_bot_lemmy/basedcount_bot.py"", line 227, in read_comments
    async for comment in lemmy_instance.stream_comments(skip_existing=True):  # Comment
  File ""/root/Bots/basedcount_bot_lemmy/async_lemmy_py/async_lemmy.py"", line 63, in stream_comments
    comments = await self.request_builder.get(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot_lemmy/async_lemmy_py/request_builder.py"", line 57, in get
    async with self.client_session.get(url, headers=headers, params=params) as resp:
  File ""/root/Bots/basedcount_bot_lemmy/venv/lib/python3.11/site-packages/aiohttp/client.py"", line 1187, in __aenter__
    self._resp = await self._coro
                 ^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot_lemmy/venv/lib/python3.11/site-packages/aiohttp/client.py"", line 574, in _request
    conn = await self._connector.connect(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot_lemmy/venv/lib/python3.11/site-packages/aiohttp/connector.py"", line 544, in connect
    proto = await self._create_connection(req, traces, timeout)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot_lemmy/venv/lib/python3.11/site-packages/aiohttp/connector.py"", line 911, in _create_connection
    _, proto = await self._create_direct_connection(req, traces, timeout)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot_lemmy/venv/lib/python3.11/site-packages/aiohttp/connector.py"", line 1235, in _create_direct_connection
    raise last_exc
  File ""/root/Bots/basedcount_bot_lemmy/venv/lib/python3.11/site-packages/aiohttp/connector.py"", line 1204, in _create_direct_connection
    transp, proto = await self._wrap_create_connection(
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot_lemmy/venv/lib/python3.11/site-packages/aiohttp/connector.py"", line 1000, in _wrap_create_connection
    raise client_error(req.connection_key, exc) from exc
aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host lemmy.basedcount.com:443 ssl:default [None]
"
ceUtR1by,Untitled,hielasangre,Bash,Thursday 8th of February 2024 08:52:30 PM CDT,"update_interval 1 
total_run_times 0 
net_avg_samples 1 
cpu_avg_samples 1 
imlib_cache_size 0 
double_buffer yes 
no_buffers yes 
format_human_readable 
use_xft yes 
xftfont Existence:size=8 
override_utf8_locale yes 
text_buffer_size 2048 
own_window_class Conky 
own_window yes 
own_window_type override 
own_window_transparent yes 
own_window_hints undecorated,below,sticky,skip_taskbar,skip_pager 
alignment bottom_right 
gap_x 10 
gap_y 5
minimum_size 280 200 
draw_shades no 
default_color FFFFFF 
TEXT 
${voffset 15}${offset 143}${font Zekton Free:pixelsize=120}${time %H:%M:%S}${font Quicksand Light:pixelsize=20}${font} 
"
kfYGs1T0,boom bot snowybot 144,coinwalk,JavaScript,Thursday 8th of February 2024 08:43:07 PM CDT,"doc     = balance
chance  = 49.5  
base    = 0.0001
bethigh = false
sad     = (base*10)
nob     = (base*2.9)
frock   = (base*2)
idiot   = (base*6.9)
tom     = ((math.floor(balance/sad))*sad)
up      = 6.9
down    = 2.9
bob     = (((math.floor(balance/sad))*sad)-nob)
idios   = ((balance-bob)/5) 
freak   = math.floor(idios/frock)
boom    = freak*frock
mighty  = base
nextbet = base
resetstats();

function dobet()
    if (balance>(tom+(nextbet*up))) then
        up      = 4.9
        down    = 4.9
        nextbet = previousbet*2 
        tom     = balance
    end
    if (balance<(tom-(nextbet*down))) then
        up      = 4.9
        down    = 4.9
        nextbet = previousbet*2 
        tom     = balance
    end  
    if ((nextbet>=(balance/30)) and (balance>bob) and (balance<(((math.floor(balance/sad))*sad)+idiot))) then  
        idios  = ((balance-bob)/5) 
        freak  = math.floor(idios/frock)
        boom   = freak*frock
        mighty = previousbet-boom
        if mighty<base then
            mighty = base
        end
        nextbet = mighty
        up      = 6.9
        down    = 2.9
        tom     = ((math.floor(balance/sad))*sad) 
    end
    if ((nextbet>=(balance/30)) and (balance<bob) and (balance<(((math.floor(balance/sad))*sad)+idiot))) then  
        idios  = ((bob-balance)/5) 
        freak  = math.floor(idios/frock)
        boom   = freak*frock
        mighty = previousbet-boom
        if mighty<base then
            mighty = base
        end
        nextbet = mighty
        up      = 6.9
        down    = 2.9
        tom     = ((math.floor(balance/sad))*sad) 
    end
    if (balance<base) then
        stop()
    end
    if (balance>=144) then
       stop()
   end
end"
udKNZwhW,Untitled,mantha_raghava,Java,Thursday 8th of February 2024 08:38:02 PM CDT,"import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t =sc.nextInt();
        while (t-->0){
            String s=sc.next();
            int n= s.length();
            HashMap<Character,Integer> hm = new HashMap();
            
            for(int i=0;i<n;i++){
                if(hm.containsKey(s.charAt(i))){
                    hm.put(s.charAt(i),hm.get(s.charAt(i))+1);
                }
                else{
                    hm.put(s.charAt(i),1);
                }
            }
            boolean F= false; 
            for(int j=0;j<n;j++){
                if(hm.get(s.charAt(j))>1){
                    System.out.println(s.charAt(j));
                    F=true;
                    break;
                }
            }
            if(!F){
                System.out.println(""."");
            }
            
        }
        
    }
}"
MkHEY4k6,Stats.h,ryancnap,C++,Thursday 8th of February 2024 08:17:35 PM CDT,"
class Stats
{
	private:
		// Create our array of numbers. 
		int numberList[20];
		int current;
		int counter;

		void sort();
		int binarySearch(int num, int min, int max);

	public:
		// Constructor. 
		Stats();

		// Generate information about collection.
		int minimum();
		int maximum();
		int sum();
		int mean();
		int median();
		void display();
		
		// Manipulate collection, unsanitary class methods.
		// Note that the only reason these aren't private is because the calling code in main() needs to be able to manipulate data. 
		bool addNumber(int num);
		bool removeNumber(int num);
		bool removeAll();

		// Search returns index of int; this is basically a getter/accessor for private binarySearch() class method.
		int search(int num);

		// Helper functions. 
		bool empty();

};

"
rBmFvM21,Stats.cpp,ryancnap,C++,Thursday 8th of February 2024 08:16:43 PM CDT,"//STILL NEED TO WRITE: SORT()

#include ""Stats.h""

// Constructor.
Stats::Stats()
{
	current = 0;
	counter = 0;
}


// Returns lowest value of dataset. 
int Stats::minimum()
{
	// Fail if dataset is empty.
	if (counter == 0)
		return 0;

	return numberList[0];
}


// Returns highest value of dataset. 
int Stats::maximum()
{
	// Fail if dataset is empty. 
	if (counter == 0)
		return 0;
	return numberList[counter - 1];
}


// Returns sum of dataset items. 
int Stats::sum()
{
	// Fail if dataset is empty. 
	if (counter == 0)
		return 0;

	int sum = 0;
	for (int i = 0; i < counter; i++)
		sum += numberList[i];
	return sum;
}


// Returns mean of dataset. 
int Stats::mean()
{
	// Fail if dataset is empty.
	if (counter == 0)
		return 0;

	int sum = 0;
	int average = 0;
	for (int i = 0; i < counter; i++)
		sum += numberList[i];
	average = sum / counter;
	return average;
}


// Returns median of dataset. 
int Stats::median()
{
	// Fail if dataset is empty.
	if (counter == 0)
		return 0; 

	// If counter is odd, we can return middle.
	if (counter % 2 != 0)
		return numberList[counter / 2];

	int midRight = numberList[counter / 2];
	int midLeft = numberList[midRight - 2]; 
	return (midRight + midLeft) / 2;
}


// List all items in dataset. 
void Stats::display()
{
	if (counter == 0)
		cout << ""\n\t(!) Dataset is empty."";
	else
	{
		// TODO: sort() data here first
		cout << ""\n\n[Current dataset]"";
		for (int i = 0; i < counter; i++)
			cout << ""\n"" << ""Current: "" << current <<"" / Counter: "" << counter << "" / I-value: "" << i << "" / Value: "" << numberList[i];
	}
		
}


// Sort implementation.
void Stats::sort()
{
	// TODO: radix sort for integers, or quicksort
}


// Search implementation.
int Stats::search(int num)
{
	return binarySearch(num, 0, counter);
}


// Search implementation, internal use only. 
int Stats::binarySearch(int num, int min, int max)
{
	if (max >= 1)
	{
		// Set middle of the list. 
		int mid = min + (max - min) / 2; 
		
		// Return index of num early if we get lucky and find num is at the midpoint.
		if (numberList[mid] == num)
		{
			return mid;
		}

		// If num is smaller than what's currently at the middle, it has to be on the left half.
		if (numberList[mid] > num)
		{
			return binarySearch(num, min, mid - min);
		}

		// If not, then num is larger; meaning it has to be on the right half.
		// Max is set by the value of counter, which will always be one higher than our index;
		// so subtract one to prevent accessing out of bounds. 
		return binarySearch(num, mid + 1, max - 1);
	}
	// Fail if number not in dataset.
	return -1; 
}


// Add number to end of dataset. 
bool Stats::addNumber(int num)
{
	numberList[counter++] = num; 
	cout << ""(You added "" << num << "" to the dataset)"";
	return true;
}

// Remove item from dataset, keeps sorted integrity. 
bool Stats::removeNumber(int num)
{

	if (empty())
	{
		cout << ""\n\t(!) Please populate dataset first."";
		return false; 
	}

	int location = 0;
	for (int i = 0; i < counter; i++)
		if (numberList[i] == num)
			location = i;

	cout << ""(Removing "" << num << "" from dataset)"";
	for (location; location < counter - 1; location++)
		numberList[location] = numberList[location + 1];
	counter--;
	return true;
}

// Resets all data. 
bool Stats::removeAll()
{
	if (empty())
	{
		cout << ""\n\t(!) Please populate dataset first."";
		return false;
	}

	current = 0;
	counter = 0;
	cout << ""(Dataset cleared)"";
	return true;

}

// Error handling.  
bool Stats::empty() 
{
	if (current == counter)
		return true; 
	return false; 
}
"
2wWLwfFJ,main.cpp,ryancnap,C++,Thursday 8th of February 2024 08:15:36 PM CDT,"#include <iostream>
#include <limits>
using namespace std; 
#include ""Stats.cpp""

void displayMenu();
int validateInput(int userSelection);

int main()
{
	// Instantiate Stat to create our list of numbers object. 
	Stats numberList;
	int userSelection = 0;
	int num = 0;
	int found; 

	cout << ""\n~Welcome to dataset statistics. Please choose a menu option.~\n"";
	do
	{
		displayMenu();
		cin >> userSelection;
		userSelection = validateInput(userSelection);

		switch (userSelection)
		{
		case 0:
			return 0;
		case 1:
			cout << ""\nEnter the number you would like to add to dataset: "";
			cin >> num;
			num = validateInput(num);
			numberList.addNumber(num);
			break;

		case 2:
			cout << ""\nEnter the number you would like to remove from dataset: "";
			cin >> num;
			num = validateInput(num);
			numberList.removeNumber(num);
			break;

		case 3:
			numberList.removeAll();
			break;

		case 4:
			numberList.display();
			break;

		case 5:
			cout << ""\n\n[Statistics]"";
			if (numberList.empty())
			{
				cout << ""\n\t(!) Please populate dataset first."";
				break; 
			}
			cout << ""\n- Minimum: "" << numberList.minimum();
			cout << ""\n- Maximum: "" << numberList.maximum();
			cout << ""\n- Sum: "" << numberList.sum();
			cout << ""\n- Mean: "" << numberList.mean();
			cout << ""\n- Median: "" << numberList.median();
			break;

		case 6:
			cout << ""Enter number to search: "";
			cin >> num;
			num = validateInput(num);
			found = numberList.search(num);
			if (found != -1)
				cout << ""\nFound "" << num << "" at index "" << found << ""."";
			break;

		default:
			cout << ""\n\t(!) Invalid input, please enter a numerical choice from the menu"";
			break; 
		}
		
	} while (userSelection != 0);
	

	return 0;
}

void displayMenu()
{
	// Welcome message.
	cout << ""\n\n\n[Menu]"";
	cout << ""\n1. Enter a new number."";
	cout << ""\n2. Remove a number."";
	cout << ""\n3. Clear entire dataset."";
	cout << ""\n4. Display all numbers in dataset."";
	cout << ""\n5. Display dataset statistics."";
	cout << ""\n0. Exit.\n"";
	cout << ""***********************************"";
	cout << ""\nSelection > "";
}

// Ensure all menu input is int. 
int validateInput(int input)
{
	while (1)
	{
		if (cin.fail())
		{
			cin.clear();
			cin.ignore(numeric_limits<streamsize>::max(), '\n');
			cout << ""(!)Please enter a valid number > "";
			cin >> input;
		}
		if (!cin.fail())
			break;
	}
	return input; 
}"
CuykUA9h,Video merger,Big_Jim,Autohotkey,Thursday 8th of February 2024 08:05:52 PM CDT,";This script combines all videos in a folder into a single video file, fixing resolution differences by
;  making the width and height of the resulting video the largest width and height of the consituent videos.
;
;Requires all videos use the same file extension and have a two digit serialized suffix. This allows the script
;  to group together videos i.e. ""abc 01.mp4|abc 02.mp4|abc 03.mp4"" from ""def 01.mp4|def 02.mp4""
;
;Also requires this function (https://www.autohotkey.com/boards/viewtopic.php?style=7&t=3806) as well as
;  ffmpeg to be added to your path variable.
;
;Final output is rendered into a subfolder, and original files are not deleted.

#NoEnv
#include FileGetProperties.ahk
SetWorkingDir %A_ScriptDir%

aWidth := []
aHeight := []
aName := []
FileSelectFolder, vWorkingDirectory
if ErrorLevel
	ExitApp

FileCreateDir, %vWorkingDirectory%\Concatenated Videos

vFileList := """"
Loop, Files, %vWorkingDirectory%\*
    vFileList .= A_LoopFileLongPath ""`n""
Sort, vFileList

Loop, parse, vFileList, `n
{
	if (((aName.Length() > 1) and (InStr(A_LoopField, ""01."" . vExtension))) or (A_LoopField = """"))
	{
		vMaxWidth := Max(aWidth*)
		vMaxHeight := Max(aHeight*)
		GoSub, FFMPEG
		if (A_LoopField = """")
		{
			FileDelete, %vWorkingDirectory%\ConcatList.txt
			Break
		}
		aWidth := []
		aHeight := []
		aName := []
	}
	aWidth.Push(FGP_Value(A_LoopField,316))
	aHeight.Push(FGP_Value(A_LoopField,314))
	aName.Push(A_LoopField)
	SplitPath, A_LoopField,vFileName,,vExtension
}

ExitApp

FFMPEG:

FileDelete, %vWorkingDirectory%\ConcatList.txt
Loop
{
	vPadX := Format(""{:d}"",((vMaxWidth - aWidth[A_Index])/2))
	vPadY := Format(""{:d}"",((vMaxHeight - aHeight[A_Index])/2))
	vConcatName := vWorkingDirectory . ""\Concatenated Videos\"" . SubStr(vFileName, 1, -7) . ""."" . vExtension
	vTempName1 := aName[A_Index]
	vTempName2 := SubStr(aName[A_Index], 1, -4) . ""b."" . vExtension
	FileAppend, file '%vTempName2%'`n, %vWorkingDirectory%\ConcatList.txt
	runwait, ffmpeg -i ""%vTempName1%"" -filter_complex ""[0]pad=w=%vMaxWidth%:h=%vMaxHeight%:x=%vPadX%:y=%vPadY%:color=black"" ""%vTempName2%""
	if (A_Index = aName.Length())
		Break
}
Sleep 500
runwait, ffmpeg -f concat -safe 0 -i ""%vWorkingDirectory%\ConcatList.txt"" -c copy ""%vConcatName%""
FileDelete, %vWorkingDirectory%\*b.%vExtension%
Return"
d1pz5H1T,GetDateInfo,gilotin,JavaScript,Thursday 8th of February 2024 06:44:21 PM CDT,"function getDateInfo(info) {

    const date = new Date()

    
    const weekday = date.toLocaleDateString('en-US', {weekday: ""long""});


    const monthDay = date.toLocaleDateString('en-US', {
        month: 'short', day: 'numeric'
    });

    if(info){
    return console.log(monthDay)
    //add jsx
    }
    
   return console.log(weekday)
   //add jsx
}





"
6LL8FxdB,2024-02-08_stats.json,rdp_snitch,JSON,Thursday 8th of February 2024 06:18:10 PM CDT,"{
  ""ip"": {
    ""167.172.80.176"": 3,
    ""159.223.39.117"": 3,
    ""104.248.156.100"": 6,
    ""165.22.60.21"": 6,
    ""45.77.46.67"": 6,
    ""143.198.50.31"": 3,
    ""144.126.218.243"": 3,
    ""164.92.69.210"": 6,
    ""143.244.178.146"": 6,
    ""167.172.89.41"": 6,
    ""144.126.219.149"": 3,
    ""143.198.196.98"": 6,
    ""181.30.39.44"": 3,
    ""180.93.172.224"": 6,
    ""193.233.132.144"": 3,
    ""80.66.76.92"": 9,
    ""198.235.24.215"": 9,
    ""103.105.251.57"": 30,
    ""194.165.16.37"": 12,
    ""194.165.16.76"": 12,
    ""62.204.41.107"": 18,
    ""198.235.24.248"": 9,
    ""167.94.138.36"": 3,
    ""87.251.75.64"": 3,
    ""70.113.245.98"": 3,
    ""87.251.75.145"": 6,
    ""185.170.144.3"": 6,
    ""147.78.47.157"": 3,
    ""87.251.75.120"": 6,
    ""205.210.31.193"": 9,
    ""172.104.214.45"": 12,
    ""138.68.232.124"": 3,
    ""101.255.158.147"": 3,
    ""120.240.145.8"": 3,
    ""45.131.195.236"": 3,
    ""196.190.117.7"": 6,
    ""45.140.17.52"": 6,
    ""94.232.45.101"": 6,
    ""152.32.156.95"": 3,
    ""205.210.31.200"": 9,
    ""60.205.220.177"": 12,
    ""98.159.37.36"": 3,
    ""39.98.127.243"": 3,
    ""185.170.144.113"": 9,
    ""185.122.204.98"": 9,
    ""105.156.49.138"": 3,
    ""94.232.41.30"": 6,
    ""179.60.147.122"": 3,
    ""205.210.31.182"": 9
  },
  ""asn"": {
    ""AS14061"": 54,
    ""AS20473"": 6,
    ""AS7303"": 3,
    ""AS135944"": 6,
    ""AS216319"": 3,
    ""AS208091"": 30,
    ""AS396982"": 45,
    ""AS132925"": 30,
    ""AS48721"": 24,
    ""AS59425"": 18,
    ""AS398324"": 3,
    ""AS11427"": 3,
    ""AS197414"": 15,
    ""AS209588"": 6,
    ""AS63949"": 12,
    ""AS38511"": 3,
    ""AS56040"": 3,
    ""AS62240"": 6,
    ""AS24757"": 6,
    ""AS198953"": 6,
    ""AS212482"": 6,
    ""AS135377"": 3,
    ""AS37963"": 15,
    ""AS57523"": 9,
    ""AS36903"": 3
  },
  ""isp"": {
    ""DigitalOcean, LLC"": 54,
    ""The Constant Company"": 6,
    ""Telecom Argentina S.A"": 3,
    ""SPT"": 6,
    ""Chromis IT LTD"": 3,
    ""Xhost Internet Solutions LP"": 51,
    ""Google LLC"": 45,
    ""Ideastack Solutions Private Limited"": 30,
    ""Flyservers S.A."": 30,
    ""Horizon LLC"": 18,
    ""Censys, Inc."": 3,
    ""Spectrum"": 3,
    ""Akamai Technologies"": 12,
    ""PT Remala Abadi"": 3,
    ""China Mobile communications corporation"": 3,
    ""VPN"": 3,
    ""Ethiotelecom"": 6,
    ""Proton66 OOO"": 6,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Hangzhou Alibaba Advertising Co"": 15,
    ""LogicWeb Inc."": 3,
    ""Chang Way Technologies Co. Limited"": 9,
    ""ADSL Maroc telecom"": 3
  },
  ""org"": {
    ""DigitalOcean, LLC"": 54,
    ""Vultr Holdings, LLC"": 6,
    ""Fibertel"": 3,
    ""Saigon Postel Corporation"": 6,
    ""1337 Hosting LTD"": 3,
    ""Xhost Internet Solutions"": 24,
    ""Palo Alto Networks, Inc"": 45,
    ""Altavision Digital Systems Private Limited"": 30,
    ""Flyservers S.A"": 27,
    ""Horizon LLC"": 18,
    ""Censys, Inc"": 3,
    ""Road Runner"": 3,
    ""Xhostis"": 15,
    ""Linode"": 12,
    ""Unknown"": 12,
    ""China Mobile"": 3,
    ""VPN-Consumer-US"": 3,
    ""Proton66 LLC"": 6,
    ""Dmitriy Panchenko"": 12,
    ""Ucloud Information Technology (hk) Limited"": 3,
    ""Aliyun Computing Co., LTD"": 15,
    ""Dedicated Servers"": 3,
    ""Starcrecium Limited"": 9,
    ""Cloud Solutions S.A"": 3
  },
  ""regionName"": {
    ""South West"": 24,
    ""Central Singapore"": 12,
    ""California"": 72,
    ""Buenos Aires F.D."": 3,
    ""Hanoi"": 6,
    ""England"": 3,
    ""North Holland"": 42,
    ""Maharashtra"": 33,
    ""Kaunas"": 24,
    ""Moscow"": 33,
    ""Michigan"": 3,
    ""Texas"": 3,
    ""New Jersey"": 15,
    ""West Java"": 3,
    ""Guangdong"": 3,
    ""Addis Ababa"": 6,
    ""Perm Krai"": 12,
    ""Beijing"": 15,
    ""Fes-Meknes"": 3,
    ""Distrito Federal"": 3
  },
  ""country"": {
    ""Singapore"": 36,
    ""United States"": 93,
    ""Argentina"": 3,
    ""Vietnam"": 6,
    ""United Kingdom"": 3,
    ""The Netherlands"": 42,
    ""India"": 33,
    ""Lithuania"": 24,
    ""Russia"": 45,
    ""Indonesia"": 3,
    ""China"": 18,
    ""Ethiopia"": 6,
    ""Morocco"": 3,
    ""Venezuela"": 3
  },
  ""account"": {
    ""142.93.8.59"": 57,
    ""hello"": 69,
    ""GLOPeTf"": 3,
    ""Administr"": 42,
    ""hIOzUhfmX"": 3,
    ""AfqPNF"": 3,
    ""uNsJPT"": 3,
    ""Test"": 36,
    ""mWWykMLGp"": 3,
    ""UkWZft"": 3,
    ""DWAcDi"": 3,
    ""(empty)"": 12,
    ""Almaz"": 3,
    ""jbGsfknrO"": 3,
    ""CXRDql"": 3,
    ""mhlxdy"": 3,
    ""47hmbmx3"": 12,
    ""beio"": 3,
    ""Domain"": 30,
    ""Administrator"": 3,
    ""pgRIvBNnR"": 3,
    ""bUAUBI"": 3,
    ""DDUbAN"": 3,
    ""a"": 3,
    ""MBdzZgdRa"": 3,
    ""hlMSPa"": 3,
    ""OmoDNV"": 3
  },
  ""keyboard"": {
    ""Unknown"": 318
  },
  ""client_build"": {
    ""Unknown"": 318
  },
  ""client_name"": {
    ""Unknown"": 318
  },
  ""ip_type"": {
    ""hosting & proxy"": 42,
    ""hosting"": 99,
    ""Unknown"": 117,
    ""mobile"": 12,
    ""proxy"": 48
  }
}"
d1gM9km0,2024-02-08_stats.json,rdp_snitch,JSON,Thursday 8th of February 2024 06:16:14 PM CDT,"{
  ""ip"": {
    ""167.172.80.176"": 2,
    ""159.223.39.117"": 2,
    ""104.248.156.100"": 4,
    ""165.22.60.21"": 4,
    ""45.77.46.67"": 4,
    ""143.198.50.31"": 2,
    ""144.126.218.243"": 2,
    ""164.92.69.210"": 4,
    ""143.244.178.146"": 4,
    ""167.172.89.41"": 4,
    ""144.126.219.149"": 2,
    ""143.198.196.98"": 4,
    ""181.30.39.44"": 2,
    ""180.93.172.224"": 4,
    ""193.233.132.144"": 2,
    ""80.66.76.92"": 6,
    ""198.235.24.215"": 6,
    ""103.105.251.57"": 20,
    ""194.165.16.37"": 8,
    ""194.165.16.76"": 8,
    ""62.204.41.107"": 12,
    ""198.235.24.248"": 6,
    ""167.94.138.36"": 2,
    ""87.251.75.64"": 2,
    ""70.113.245.98"": 2,
    ""87.251.75.145"": 4,
    ""185.170.144.3"": 4,
    ""147.78.47.157"": 2,
    ""87.251.75.120"": 4,
    ""205.210.31.193"": 6,
    ""172.104.214.45"": 8,
    ""138.68.232.124"": 2,
    ""101.255.158.147"": 2,
    ""120.240.145.8"": 2,
    ""45.131.195.236"": 2,
    ""196.190.117.7"": 4,
    ""45.140.17.52"": 4,
    ""94.232.45.101"": 4,
    ""152.32.156.95"": 2,
    ""205.210.31.200"": 6,
    ""60.205.220.177"": 8,
    ""98.159.37.36"": 2,
    ""39.98.127.243"": 2,
    ""185.170.144.113"": 6,
    ""185.122.204.98"": 6,
    ""105.156.49.138"": 2,
    ""94.232.41.30"": 4,
    ""179.60.147.122"": 2,
    ""205.210.31.182"": 6
  },
  ""asn"": {
    ""AS14061"": 36,
    ""AS20473"": 4,
    ""AS7303"": 2,
    ""AS135944"": 4,
    ""AS216319"": 2,
    ""AS208091"": 20,
    ""AS396982"": 30,
    ""AS132925"": 20,
    ""AS48721"": 16,
    ""AS59425"": 12,
    ""AS398324"": 2,
    ""AS11427"": 2,
    ""AS197414"": 10,
    ""AS209588"": 4,
    ""AS63949"": 8,
    ""AS38511"": 2,
    ""AS56040"": 2,
    ""AS62240"": 4,
    ""AS24757"": 4,
    ""AS198953"": 4,
    ""AS212482"": 4,
    ""AS135377"": 2,
    ""AS37963"": 10,
    ""AS57523"": 6,
    ""AS36903"": 2
  },
  ""isp"": {
    ""DigitalOcean, LLC"": 36,
    ""The Constant Company"": 4,
    ""Telecom Argentina S.A"": 2,
    ""SPT"": 4,
    ""Chromis IT LTD"": 2,
    ""Xhost Internet Solutions LP"": 34,
    ""Google LLC"": 30,
    ""Ideastack Solutions Private Limited"": 20,
    ""Flyservers S.A."": 20,
    ""Horizon LLC"": 12,
    ""Censys, Inc."": 2,
    ""Spectrum"": 2,
    ""Akamai Technologies"": 8,
    ""PT Remala Abadi"": 2,
    ""China Mobile communications corporation"": 2,
    ""VPN"": 2,
    ""Ethiotelecom"": 4,
    ""Proton66 OOO"": 4,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Hangzhou Alibaba Advertising Co"": 10,
    ""LogicWeb Inc."": 2,
    ""Chang Way Technologies Co. Limited"": 6,
    ""ADSL Maroc telecom"": 2
  },
  ""org"": {
    ""DigitalOcean, LLC"": 36,
    ""Vultr Holdings, LLC"": 4,
    ""Fibertel"": 2,
    ""Saigon Postel Corporation"": 4,
    ""1337 Hosting LTD"": 2,
    ""Xhost Internet Solutions"": 16,
    ""Palo Alto Networks, Inc"": 30,
    ""Altavision Digital Systems Private Limited"": 20,
    ""Flyservers S.A"": 18,
    ""Horizon LLC"": 12,
    ""Censys, Inc"": 2,
    ""Road Runner"": 2,
    ""Xhostis"": 10,
    ""Linode"": 8,
    ""Unknown"": 8,
    ""China Mobile"": 2,
    ""VPN-Consumer-US"": 2,
    ""Proton66 LLC"": 4,
    ""Dmitriy Panchenko"": 8,
    ""Ucloud Information Technology (hk) Limited"": 2,
    ""Aliyun Computing Co., LTD"": 10,
    ""Dedicated Servers"": 2,
    ""Starcrecium Limited"": 6,
    ""Cloud Solutions S.A"": 2
  },
  ""regionName"": {
    ""South West"": 16,
    ""Central Singapore"": 8,
    ""California"": 48,
    ""Buenos Aires F.D."": 2,
    ""Hanoi"": 4,
    ""England"": 2,
    ""North Holland"": 28,
    ""Maharashtra"": 22,
    ""Kaunas"": 16,
    ""Moscow"": 22,
    ""Michigan"": 2,
    ""Texas"": 2,
    ""New Jersey"": 10,
    ""West Java"": 2,
    ""Guangdong"": 2,
    ""Addis Ababa"": 4,
    ""Perm Krai"": 8,
    ""Beijing"": 10,
    ""Fes-Meknes"": 2,
    ""Distrito Federal"": 2
  },
  ""country"": {
    ""Singapore"": 24,
    ""United States"": 62,
    ""Argentina"": 2,
    ""Vietnam"": 4,
    ""United Kingdom"": 2,
    ""The Netherlands"": 28,
    ""India"": 22,
    ""Lithuania"": 16,
    ""Russia"": 30,
    ""Indonesia"": 2,
    ""China"": 12,
    ""Ethiopia"": 4,
    ""Morocco"": 2,
    ""Venezuela"": 2
  },
  ""account"": {
    ""142.93.8.59"": 38,
    ""hello"": 46,
    ""GLOPeTf"": 2,
    ""Administr"": 28,
    ""hIOzUhfmX"": 2,
    ""AfqPNF"": 2,
    ""uNsJPT"": 2,
    ""Test"": 24,
    ""mWWykMLGp"": 2,
    ""UkWZft"": 2,
    ""DWAcDi"": 2,
    ""(empty)"": 8,
    ""Almaz"": 2,
    ""jbGsfknrO"": 2,
    ""CXRDql"": 2,
    ""mhlxdy"": 2,
    ""47hmbmx3"": 8,
    ""beio"": 2,
    ""Domain"": 20,
    ""Administrator"": 2,
    ""pgRIvBNnR"": 2,
    ""bUAUBI"": 2,
    ""DDUbAN"": 2,
    ""a"": 2,
    ""MBdzZgdRa"": 2,
    ""hlMSPa"": 2,
    ""OmoDNV"": 2
  },
  ""keyboard"": {
    ""Unknown"": 212
  },
  ""client_build"": {
    ""Unknown"": 212
  },
  ""client_name"": {
    ""Unknown"": 212
  },
  ""ip_type"": {
    ""hosting & proxy"": 28,
    ""hosting"": 66,
    ""Unknown"": 78,
    ""mobile"": 8,
    ""proxy"": 32
  }
}"
XSNayS0y,2024-02-08_stats.json,rdp_snitch,JSON,Thursday 8th of February 2024 06:15:08 PM CDT,"{
  ""ip"": {
    ""167.172.80.176"": 1,
    ""159.223.39.117"": 1,
    ""104.248.156.100"": 2,
    ""165.22.60.21"": 2,
    ""45.77.46.67"": 2,
    ""143.198.50.31"": 1,
    ""144.126.218.243"": 1,
    ""164.92.69.210"": 2,
    ""143.244.178.146"": 2,
    ""167.172.89.41"": 2,
    ""144.126.219.149"": 1,
    ""143.198.196.98"": 2,
    ""181.30.39.44"": 1,
    ""180.93.172.224"": 2,
    ""193.233.132.144"": 1,
    ""80.66.76.92"": 3,
    ""198.235.24.215"": 3,
    ""103.105.251.57"": 10,
    ""194.165.16.37"": 4,
    ""194.165.16.76"": 4,
    ""62.204.41.107"": 6,
    ""198.235.24.248"": 3,
    ""167.94.138.36"": 1,
    ""87.251.75.64"": 1,
    ""70.113.245.98"": 1,
    ""87.251.75.145"": 2,
    ""185.170.144.3"": 2,
    ""147.78.47.157"": 1,
    ""87.251.75.120"": 2,
    ""205.210.31.193"": 3,
    ""172.104.214.45"": 4,
    ""138.68.232.124"": 1,
    ""101.255.158.147"": 1,
    ""120.240.145.8"": 1,
    ""45.131.195.236"": 1,
    ""196.190.117.7"": 2,
    ""45.140.17.52"": 2,
    ""94.232.45.101"": 2,
    ""152.32.156.95"": 1,
    ""205.210.31.200"": 3,
    ""60.205.220.177"": 4,
    ""98.159.37.36"": 1,
    ""39.98.127.243"": 1,
    ""185.170.144.113"": 3,
    ""185.122.204.98"": 3,
    ""105.156.49.138"": 1,
    ""94.232.41.30"": 2,
    ""179.60.147.122"": 1,
    ""205.210.31.182"": 3
  },
  ""asn"": {
    ""AS14061"": 18,
    ""AS20473"": 2,
    ""AS7303"": 1,
    ""AS135944"": 2,
    ""AS216319"": 1,
    ""AS208091"": 10,
    ""AS396982"": 15,
    ""AS132925"": 10,
    ""AS48721"": 8,
    ""AS59425"": 6,
    ""AS398324"": 1,
    ""AS11427"": 1,
    ""AS197414"": 5,
    ""AS209588"": 2,
    ""AS63949"": 4,
    ""AS38511"": 1,
    ""AS56040"": 1,
    ""AS62240"": 2,
    ""AS24757"": 2,
    ""AS198953"": 2,
    ""AS212482"": 2,
    ""AS135377"": 1,
    ""AS37963"": 5,
    ""AS57523"": 3,
    ""AS36903"": 1
  },
  ""isp"": {
    ""DigitalOcean, LLC"": 18,
    ""The Constant Company"": 2,
    ""Telecom Argentina S.A"": 1,
    ""SPT"": 2,
    ""Chromis IT LTD"": 1,
    ""Xhost Internet Solutions LP"": 17,
    ""Google LLC"": 15,
    ""Ideastack Solutions Private Limited"": 10,
    ""Flyservers S.A."": 10,
    ""Horizon LLC"": 6,
    ""Censys, Inc."": 1,
    ""Spectrum"": 1,
    ""Akamai Technologies"": 4,
    ""PT Remala Abadi"": 1,
    ""China Mobile communications corporation"": 1,
    ""VPN"": 1,
    ""Ethiotelecom"": 2,
    ""Proton66 OOO"": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""Hangzhou Alibaba Advertising Co"": 5,
    ""LogicWeb Inc."": 1,
    ""Chang Way Technologies Co. Limited"": 3,
    ""ADSL Maroc telecom"": 1
  },
  ""org"": {
    ""DigitalOcean, LLC"": 18,
    ""Vultr Holdings, LLC"": 2,
    ""Fibertel"": 1,
    ""Saigon Postel Corporation"": 2,
    ""1337 Hosting LTD"": 1,
    ""Xhost Internet Solutions"": 8,
    ""Palo Alto Networks, Inc"": 15,
    ""Altavision Digital Systems Private Limited"": 10,
    ""Flyservers S.A"": 9,
    ""Horizon LLC"": 6,
    ""Censys, Inc"": 1,
    ""Road Runner"": 1,
    ""Xhostis"": 5,
    ""Linode"": 4,
    ""Unknown"": 4,
    ""China Mobile"": 1,
    ""VPN-Consumer-US"": 1,
    ""Proton66 LLC"": 2,
    ""Dmitriy Panchenko"": 4,
    ""Ucloud Information Technology (hk) Limited"": 1,
    ""Aliyun Computing Co., LTD"": 5,
    ""Dedicated Servers"": 1,
    ""Starcrecium Limited"": 3,
    ""Cloud Solutions S.A"": 1
  },
  ""regionName"": {
    ""South West"": 8,
    ""Central Singapore"": 4,
    ""California"": 24,
    ""Buenos Aires F.D."": 1,
    ""Hanoi"": 2,
    ""England"": 1,
    ""North Holland"": 14,
    ""Maharashtra"": 11,
    ""Kaunas"": 8,
    ""Moscow"": 11,
    ""Michigan"": 1,
    ""Texas"": 1,
    ""New Jersey"": 5,
    ""West Java"": 1,
    ""Guangdong"": 1,
    ""Addis Ababa"": 2,
    ""Perm Krai"": 4,
    ""Beijing"": 5,
    ""Fes-Meknes"": 1,
    ""Distrito Federal"": 1
  },
  ""country"": {
    ""Singapore"": 12,
    ""United States"": 31,
    ""Argentina"": 1,
    ""Vietnam"": 2,
    ""United Kingdom"": 1,
    ""The Netherlands"": 14,
    ""India"": 11,
    ""Lithuania"": 8,
    ""Russia"": 15,
    ""Indonesia"": 1,
    ""China"": 6,
    ""Ethiopia"": 2,
    ""Morocco"": 1,
    ""Venezuela"": 1
  },
  ""account"": {
    ""142.93.8.59"": 19,
    ""hello"": 23,
    ""GLOPeTf"": 1,
    ""Administr"": 14,
    ""hIOzUhfmX"": 1,
    ""AfqPNF"": 1,
    ""uNsJPT"": 1,
    ""Test"": 12,
    ""mWWykMLGp"": 1,
    ""UkWZft"": 1,
    ""DWAcDi"": 1,
    ""(empty)"": 4,
    ""Almaz"": 1,
    ""jbGsfknrO"": 1,
    ""CXRDql"": 1,
    ""mhlxdy"": 1,
    ""47hmbmx3"": 4,
    ""beio"": 1,
    ""Domain"": 10,
    ""Administrator"": 1,
    ""pgRIvBNnR"": 1,
    ""bUAUBI"": 1,
    ""DDUbAN"": 1,
    ""a"": 1,
    ""MBdzZgdRa"": 1,
    ""hlMSPa"": 1,
    ""OmoDNV"": 1
  },
  ""keyboard"": {
    ""Unknown"": 106
  },
  ""client_build"": {
    ""Unknown"": 106
  },
  ""client_name"": {
    ""Unknown"": 106
  },
  ""ip_type"": {
    ""hosting & proxy"": 14,
    ""hosting"": 33,
    ""Unknown"": 39,
    ""mobile"": 4,
    ""proxy"": 16
  }
}"
NjhxS6LK,RepositorioDocumentosModaljs,mushroomh3ad,Java,Thursday 8th of February 2024 06:08:14 PM CDT,"let fileListTableBody = document.getElementById(""fileListTableBody"");
let fileList = [];
let currentDate = getCurrentDate();
let uploadFilesStatus = false;
let invalidFile = false;
let repeatedFile = false;
let porcentagem = 0;

$(""#documentTypeUpload"").change(function() {
	let tipoDocumento = $(""#documentTypeUpload option:selected"").val();
	if (tipoDocumento === """") {
		hideFormElements();
		hideModalMessageInfo();
		disableActionsButtons();
	} else {
		$(""#divUploadFileInput"").show();	
	}
});
    
$(""#fileInput"").change(function() {
	initFileList();
	hideModalMessageInfo();
	for (let file of fileInput.files) {
		let fileTitle = file.name.substring(0, file.name.indexOf("".""));	
		let fileLength = fileTitle.length;
		if (fileLength < 5 && !isNaN(parseInt(fileTitle) && ![""application/x-zip-compressed"", ""application/x-msdownload"", """"].includes(file.type))) {
			fileList.push(file);
		} else {
			invalidFile = true;
		}
	}
	if(invalidFile) {
		showModalMessageInfo();
	}
	renderFileList();
});

function enviarDados() {	
	hideButtonLimpar();
	changeStatusSendButtonSalvar();
	hideErrorMessage();
	showSendMessage();
	percentageLoader();
	setTimeout(() => {
		requestLiferay(
	        $portletAjaxURLSalvarArquivo,
	        ""POST"",
	        ""formUploadFile""
	    );
	    disableFormInputs();
	}, 800);
}

function requestLiferay(url, method, formId) { 
	AUI().use(""aui-io-request"", function (a) {
	    a.io.request(url, {
	        method: method,
	        form: {
	            id: formId,
	            upload: true
	        },
	        sync: true,
	        on: {
			    complete: function(data) {
					if (!data.details[1].responseText) {
						throw new Error(""Estrutura de dados inválida enviada pelo servidor."");
					}
					let retorno = JSON.parse(data.details[1].responseText);
					if (retorno.sucesso) {
						hideSendMessage();
						showSendMessageSuccess();
						porcentagem = 98;
						setTimeout(() => {
							resetForm();
							initFileList();
						}, 4000);
					} else {
						console.log(""Ocorreu um erro ao realizar o upload de arquivos: "", retorno);
						hideSendMessage();
						hideSendMessageSuccess();
						showErrorMessage();
						revertStatusButtonSalvar();
						enableButtonSalvar();
						showButtonLimpar();
						porcentagem = 0;
						enableFormInputs(); 
						enableButtonRemover();
					}
				}
	        }
	    });
	});
}

$(""#limpar"").click(function() {
	resetForm();
	initFileList();
});

function removeFile(index) {
	fileList.splice(index, 1);	
	renderFileList();
}

function initFileList() {
	fileList = [];
	uploadFilesStatus = false;
	invalidFile = false;
}

function resetForm() {
	document.getElementById(""formUploadFile"").reset();
	disableActionsButtons();
	hideFormElements();
	hideModalMessageInfo();
	hideSendMessage();
	hideSendMessageSuccess();
	hideErrorMessage();
	hideRepeatedFileMessage();
	revertStatusButtonSalvar();
	showButtonLimpar();
	enableFormInputs(); 
	porcentagem = 0;
}

function hideFormElements() {
	$(""#divUploadFileInput"").hide();
	$(""#fileListDiv"").hide();
}

function disableActionsButtons() {
	disabledButtonSalvar();
	disabledButtonLimpar();
}

function enableFormInputs() {
	let inputTipoDocumentosUpload = $(""#documentTypeUpload"");
	let inputFile = $(""#fileInput"");
	inputTipoDocumentosUpload.removeAttr(""disabled"");
	inputFile.removeAttr(""disabled"");
}

function disableFormInputs() {
	//campos com o atributo disabled nao sao enviado para o submit
    let inputTipoDocumentosUpload = $(""#documentTypeUpload"");
    let inputFile = $(""#fileInput"");
    inputTipoDocumentosUpload.attr(""disabled"", ""disabled"");
    inputFile.attr(""disabled"", ""disabled"");
    for (let i = 0; i < fileList.length; i++) {
		$(""#fileListTableBody"").children().eq(i).find("":button"").prop(""disabled"", true);
    }
}

function renderFileList() {
	let listDataTransfer = new DataTransfer();
	if (fileList.length > 0) {	
		$(""#fileListDiv"").show();
		fileListTableBody.innerHTML = """";
		fileList.forEach(function(file, index) {
			listDataTransfer.items.add(file);
			let indexItem = index;
			let fileDisplayEl = document.createElement(""tr"");
			fileDisplayEl.innerHTML = 
				""<td>"" + currentDate + ""</td>"" + 
				""<td>"" + file.name + ""</td>"" + 
				""<td>"" + 
					""<button type='button' name='actionRemove' onclick='removeFile("" + indexItem + "")'>"" + 
						""<svg width='16' height='16' viewBox='0 0 16 16' fill='none' xmlns='http://www.w3.org/2000/svg'> <path d='M0.800049 3.2001C0.800049 2.3176 1.51755 1.6001 2.40005 1.6001H6.40005V4.8001C6.40005 5.2426 6.75755 5.6001 7.20005 5.6001H10.4V6.5651C8.55255 7.0876 7.20005 8.7851 7.20005 10.8001C7.20005 12.2776 7.92755 13.5826 9.04255 14.3826C8.96255 14.3951 8.88255 14.4001 8.80005 14.4001H2.40005C1.51755 14.4001 0.800049 13.6826 0.800049 12.8001V3.2001ZM10.4 4.8001H7.20005V1.6001L10.4 4.8001ZM11.6 14.4001C9.61255 14.4001 8.00005 12.7876 8.00005 10.8001C8.00005 8.8126 9.61255 7.2001 11.6 7.2001C13.5875 7.2001 15.2 8.8126 15.2 10.8001C15.2 12.7876 13.5875 14.4001 11.6 14.4001ZM13.0825 9.8826C13.2375 9.7276 13.2375 9.4726 13.0825 9.3176C12.9275 9.1626 12.6725 9.1626 12.5175 9.3176L11.6 10.2351L10.6825 9.3176C10.5275 9.1626 10.2725 9.1626 10.1175 9.3176C9.96255 9.4726 9.96255 9.7276 10.1175 9.8826L11.035 10.8001L10.1175 11.7176C9.96255 11.8726 9.96255 12.1276 10.1175 12.2826C10.2725 12.4376 10.5275 12.4376 10.6825 12.2826L11.6 11.3651L12.5175 12.2826C12.6725 12.4376 12.9275 12.4376 13.0825 12.2826C13.2375 12.1276 13.2375 11.8726 13.0825 11.7176L12.165 10.8001L13.0825 9.8826Z' fill='#EB5757'/> </svg>"" +
						""<span>Remover</span>"" +
					""</button>"" + 
				""</td>"";
			fileListTableBody.appendChild(fileDisplayEl);
		});
		fileInput.files = listDataTransfer.files;
		verifyDuplicates();	
		enableButtonLimpar();
	} else {
		$(""#fileListDiv"").hide();
		disableActionsButtons();
	}
}

function getCurrentDate() {
	let date = new Date();
	let currentDate = date.toLocaleDateString(""pt-BR"", {
		year: ""numeric"",
		month: ""2-digit"",
		day: ""2-digit"",
	})
	return currentDate;
}

function openUploadModal() {
	$(""#custom-documento-negocio-modal"").modal({
	  	backdrop: ""static"",
  		keyboard: false
	});
}

function closeUploadModal() {
	if (fileList.length > 0 && uploadFilesStatus === false) {
		let resultado = confirm(""Existem documento(s) pendente(s) não salvo(s). Deseja realmente sair?"");
		if (resultado) {
			$(""#custom-documento-negocio-modal"").modal(""hide"");
			resetForm();
			initFileList();
		} 
	} else {
		$(""#custom-documento-negocio-modal"").modal(""hide"");
		resetForm();
		initFileList();
	}
}

function hideModalMessageInfo() {
	$(""#mensagem-info-modal"").hide();
}

function showModalMessageInfo() {
	$(""#mensagem-info-modal"").show();
}

function hideButtonLimpar() {
	$(""#limpar"").hide();
}

function hideButtonSalvar() {
	$(""#salvar"").hide();
}

function showButtonLimpar() {
	$(""#limpar"").show();
}

function changeStatusSendButtonSalvar() {
	$(""#salvar"").html(""<svg width='20' height='20' viewBox='0 0 20 20' fill='none' xmlns='http://www.w3.org/2000/svg'><path d='M12 4C12 4.82844 11.3284 5.5 10.5 5.5C9.67156 5.5 9 4.82844 9 4C9 3.17156 9.67156 2.5 10.5 2.5C11.3284 2.5 12 3.17156 12 4ZM10.5 15.5C9.67156 15.5 9 16.1716 9 17C9 17.8284 9.67156 18.5 10.5 18.5C11.3284 18.5 12 17.8284 12 17C12 16.1716 11.3284 15.5 10.5 15.5ZM17 9C16.1716 9 15.5 9.67156 15.5 10.5C15.5 11.3284 16.1716 12 17 12C17.8284 12 18.5 11.3284 18.5 10.5C18.5 9.67156 17.8284 9 17 9ZM5.5 10.5C5.5 9.67156 4.82844 9 4 9C3.17156 9 2.5 9.67156 2.5 10.5C2.5 11.3284 3.17156 12 4 12C4.82844 12 5.5 11.3284 5.5 10.5ZM5.90381 13.5962C5.07537 13.5962 4.40381 14.2677 4.40381 15.0962C4.40381 15.9246 5.07537 16.5962 5.90381 16.5962C6.73225 16.5962 7.40381 15.9246 7.40381 15.0962C7.40381 14.2678 6.73222 13.5962 5.90381 13.5962ZM15.0962 13.5962C14.2677 13.5962 13.5962 14.2677 13.5962 15.0962C13.5962 15.9246 14.2677 16.5962 15.0962 16.5962C15.9246 16.5962 16.5962 15.9246 16.5962 15.0962C16.5962 14.2678 15.9246 13.5962 15.0962 13.5962ZM5.90381 4.40381C5.07537 4.40381 4.40381 5.07537 4.40381 5.90381C4.40381 6.73225 5.07537 7.40381 5.90381 7.40381C6.73225 7.40381 7.40381 6.73225 7.40381 5.90381C7.40381 5.07537 6.73222 4.40381 5.90381 4.40381Z' fill='white'/></svg> <span>Enviando...</span>"");
	let btnSalvar = $(""#salvar"");
	btnSalvar.attr(""disabled"", ""disabled"");
}

function showSendMessageSuccess() {
	$(""#mensagemSucesso"").show();
}

function hideSendMessageSuccess() {
	$(""#mensagemSucesso"").hide();
}

function revertStatusButtonSalvar() {
	$(""#salvar"").html(""Salvar"");
}

function showSendMessage() {
	$(""#mensagemEnvio"").show();
}

function hideSendMessage() {
	$(""#mensagemEnvio"").hide();
}

function showErrorMessage() {
	$(""#mensagemErro"").show();	
}

function hideErrorMessage() {
	$(""#mensagemErro"").hide();	
}

function enableButtonSalvar() {
	let btnSalvar = $(""#salvar"");
	btnSalvar.removeAttr(""disabled"");
}

function disabledButtonSalvar() {
	let btnSalvar = $(""#salvar"");
	btnSalvar.attr(""disabled"", ""disabled"");
}

function enableButtonLimpar() {
	let btnLimpar = $(""#limpar"");
	btnLimpar.removeAttr(""disabled"");
}

function disabledButtonLimpar() {
	let btnLimpar = $(""#limpar"");
	btnLimpar.attr(""disabled"", ""disabled"");
}

function enableButtonRemover() {
    for (let i = 0; i < fileList.length; i++) {
		$(""#fileListTableBody"").children().eq(i).find("":button"").prop(""disabled"", false);
    }
}

function showRepeatedFileMessage() {
	$(""#mensagem-info-arquivo-repetido-modal"").show();	
}

function hideRepeatedFileMessage() {
	$(""#mensagem-info-arquivo-repetido-modal"").hide();		
}

function verifyDuplicates() {
	let repeatedFileList = [];
	let files = fileList.map(x => x.name.substring(0, x.name.indexOf(""."")));
	let set = new Set(files);
	repeatedFileList = files.filter(item => {
		if (set.has(item)) {
			set.delete(item);
		} else {
			return item;
		}
	});
	if (repeatedFileList.length > 0) {
	  	$(""#mensagemInfoArquivosRepetidos"").text(""O(s) arquivo(s) "" + repeatedFileList + "" está(ão) com o mesmo nome e para o correto envio, a plataforma só permite arquivos com nomes únicos."");
		showRepeatedFileMessage();
		disabledButtonSalvar();
	} else {
		hideRepeatedFileMessage();
		enableButtonSalvar();
	}	
}

function percentageLoader() {
    let linhaPorcentagem = $(""#porcentagem"");
	$(""#porcentagem"").show();	
    let t = setInterval(function() {
        porcentagem = porcentagem + 1;
        linhaPorcentagem.text(porcentagem + ""% enviado, "");
        if (porcentagem === 99) {
            clearInterval(t);
            porcentagem = 0;
        }
    }, 195);
}"
LwQYW3Qb,Atm + Daily + Toprank Discord.js V14,Victor10782,JavaScript,Thursday 8th of February 2024 05:49:04 PM CDT,"/*Comando de Atm + Daily + Toprank
Packages: Discord.js ( Versão 14.11.0 )
Quick.db ( Versão 1.6.7 )

Comandos simples usando o Banco de dados Quick.DB*/

// Atm
const Discord = require(""discord.js"");
const db = require(""../../index.js"");

module.exports = {
  name: ""atm"",
  description: ""[Economia] - Mostra sua quantia de Coins ou de algum Usuário."",
  type: Discord.ApplicationCommandType.ChatInput,
  options: [{
      name: ""usuário"",
      description: ""O usuário no qual você queira ver a quantia de Coins."",
      type: Discord.ApplicationCommandOptionType.User,
      required: false,
    }],
  run: async (client, interaction) => {  
    let users = await db.get(""users"");
    let user = interaction.options.getUser(""usuário"") || interaction.user;
    let coin = await db.get(`users.${user.id}.coin`) || 0;
    let dailyCooldown = await db.get(`users.${user.id}.cooldown`) || 0;
    let msg;
    let info = Object.keys(users).sort((a,b) => users[b].coin - users[a].coin);
    let index = info.indexOf(user.id);
    let position = index >= 0 ? index+1 : undefined;

    if (coin === 0) { 
      let c = client.application.commands.cache.find(c => c.name === ""daily"");
      msg = user.id === interaction.user.id ? `**${user.username}**, você possui **${coin}** Coins! Use </daily:${c.id}> para ganhar alguns \;\)` : `**${interaction.user.username}**, **${user.username}** ainda não possui nenhum Coin!`;
  } else {
      msg = `**${interaction.user.username}**, `;
      if (user.id === interaction.user.id) {
          msg += `você possui `;
      } else {
          msg += `**${user.username}** possui `;
      }
      msg += `**${coin}** Coins`;
      if (position !== undefined) {
          let c = client.application.commands.cache.find(c => c.name === ""toprank"")
          msg += ` e está em **#${position} lugar** no Ranking! Veja mais ostentadores com </toprank:${c.id}>.`;
      } else {
          let c = client.application.commands.cache.find(c => c.name === ""toprank"")
          msg += `! Veja mais ostentadores com </toprank:${c.id}>.`;
      }
  }
   await interaction.reply(msg);
   if (dailyCooldown < Date.now()) {
     if (coin !== 0) {
         let c = client.application.commands.cache.find(c => c.name === ""daily"");
     return await interaction.followUp({ content: `**${interaction.user.username}**, você já pode resgatar seu **Daily**! Use </daily:${c.id}> para poder resgatar. \;\)`, ephemeral: true });
      }
    }
  }
}

// Daily
const Discord = require(""discord.js"");
const db = require(""../../index.js"");

module.exports = {
  name: ""daily"",
  description: ""[Economia] - Resgate seu Daily e ganhe uma quantia aleatória de Coins!"",
  type: Discord.ApplicationCommandType.ChatInput,
  run: async (client, interaction) => {
    let autordb = await db.get(`users.${interaction.user.id}.coin`) || 0;
    let cooldown = await db.get(`users.${interaction.user.id}.cooldown`) || 0;
    let coins = Math.floor(Math.random() * (1000 - 500 + 1)) + 500;

    if (Date.now() > cooldown) {
     
     await interaction.reply(`Você resgatou seu Daily e com isso conseguiu **${coins}** Coins! Agora somando tudo, seu Saldo é de **${autordb+coins}** Coins. \;\)`);
      await db.set(`users.${interaction.user.id}.cooldown`, Date.now() + 86400000); // 86400000 => 24 Horas em Milissegundos 
      await db.add(`users.${interaction.user.id}.coin`, coins);
      
    } else {
      let timeLeft = cooldown - Date.now();
      let h = Math.floor(timeLeft / 3600000);
      let m = Math.floor((timeLeft % 3600000) / 60000);
      let s = Math.floor((timeLeft % 60000) / 1000);
      await interaction.reply({ content: `**${interaction.user.username}**, você só pode Resgatar seu Prêmio daqui **${h} Hora(s), ${m} Minuto(s) e ${s} Segundo(s)**.`, ephemeral: true });
    }
  }
}

// Toprank
const Discord = require(""discord.js"");
const db = require(""../../index.js"");

module.exports = {
  name: ""toprank"",
  description: ""[Economia] - Veja os mais ostentadores da minha Economia!"",
  type: Discord.ApplicationCommandType.ChatInput,
  run: async (client, interaction) => {
    let users = await db.get(""users"");
    let leaderboard = """";
    let topRank = Object.keys(users).sort((a,b) => users[b].coin - users[a].coin).slice(0, 10);

    for(let i = 0;i < topRank.length;i++) {
      let userId = topRank[i];
      let userInfo = await client.users.fetch(userId).catch(() => undefined)
      if (userInfo) {
      leaderboard += `**${i+1}**. ${userInfo.username}   **${users[userId].coin}** :coin: \n`;
      } else {
      leaderboard += `**${i+1}**. Desconhecido#0000 **0** :coin: \n`;
      }
    }
    let embed = new Discord.EmbedBuilder().setDescription(leaderboard).setColor(""Green"").setAuthor({ name: ""Top Rank | Os mais Ostentadores"", iconURL: interaction.user.displayAvatarURL({ dynamic: true }) }).setThumbnail(""https://cdn-icons-png.flaticon.com/512/3629/3629625.png"");
    await interaction.reply({ embeds: [embed] });
  }
}"
