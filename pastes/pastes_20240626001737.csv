id,title,username,language,date,content
kGs59gE3,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,Skarface-MKL,JavaScript,Tuesday 25th of June 2024 07:15:46 PM CDT,"G2A.com free gift card & gaming guide.
Any item for free on G2A.com including Steam gift cards & everything else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?69872

Working as of:
June 24 2024

"
DzjE1jXk,2024-06-25_stats.json,rdp_snitch,JSON,Tuesday 25th of June 2024 07:15:09 PM CDT,"{
  ""ip"": {
    ""213.109.202.251"": 8,
    ""222.132.26.43"": 2,
    ""164.92.104.215"": 4,
    ""223.166.31.100"": 1,
    ""68.183.187.219"": 2,
    ""194.165.16.73"": 2,
    ""45.227.254.26"": 2,
    ""116.140.196.215"": 2,
    ""46.23.108.240"": 1,
    ""81.19.135.2"": 3,
    ""104.248.154.46"": 8,
    ""192.53.120.191"": 2,
    ""206.168.34.38"": 1,
    ""149.34.246.34"": 1,
    ""147.78.47.97"": 2,
    ""147.185.132.213"": 3,
    ""23.102.143.185"": 1,
    ""152.32.243.98"": 1,
    ""185.150.1.204"": 2,
    ""185.170.144.3"": 2,
    ""64.124.50.139"": 2,
    ""80.66.66.250"": 3,
    ""187.157.89.218"": 1,
    ""103.121.74.4"": 1,
    ""185.196.220.41"": 3,
    ""198.235.24.87"": 3,
    ""60.255.174.158"": 1,
    ""194.26.135.155"": 3,
    ""45.227.254.54"": 2,
    ""194.165.16.10"": 4,
    ""194.180.49.249"": 2,
    ""103.186.45.94"": 1,
    ""103.130.145.142"": 2,
    ""194.165.16.11"": 2,
    ""51.103.90.130"": 1,
    ""147.185.132.36"": 3,
    ""87.251.75.64"": 1,
    ""162.142.125.199"": 1,
    ""205.210.31.210"": 3
  },
  ""asn"": {
    ""AS208312"": 8,
    ""AS4837"": 5,
    ""AS14061"": 14,
    ""AS17621"": 1,
    ""AS48721"": 8,
    ""AS267784"": 4,
    ""AS215762"": 1,
    ""AS209588"": 5,
    ""AS63949"": 2,
    ""AS398324"": 2,
    ""AS212238"": 1,
    ""AS396982"": 12,
    ""AS8075"": 2,
    ""AS135377"": 1,
    ""AS212396"": 2,
    ""AS197414"": 2,
    ""AS6461"": 2,
    ""AS51765"": 3,
    ""AS8151"": 1,
    ""AS134886"": 1,
    ""AS208046"": 3,
    ""AS57523"": 3,
    ""AS201814"": 2,
    ""AS133676"": 1,
    ""AS34394"": 2,
    ""AS208091"": 1
  },
  ""isp"": {
    ""Red Byte LLC"": 8,
    ""CHINA UNICOM China169 Backbone"": 2,
    ""DigitalOcean, LLC"": 14,
    ""China Unicom Shanghai Province Network"": 1,
    ""Flyservers S.A."": 17,
    ""China Unicom CHINA169 Network"": 2,
    ""Bullet Group LTD"": 1,
    ""Akamai Technologies, Inc."": 2,
    ""Censys, Inc."": 2,
    ""Datacamp Limited"": 1,
    ""Google LLC"": 12,
    ""Microsoft Corporation"": 1,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""FyfeWeb Ltd"": 2,
    ""Xhost Internet Solutions LP"": 3,
    ""Zayo Bandwidth"": 2,
    ""Oy Crea Nova Hosting Solution Ltd"": 3,
    ""Uninet S.A. de C.V."": 1,
    ""Super Sonic Broadband Pvt. Ltd"": 1,
    ""ColocationX Ltd."": 3,
    ""China Unicom China169 Network"": 1,
    ""Chang Way Technologies Co. Limited"": 3,
    ""MEVSPACE sp. z o.o."": 2,
    ""Precious netcom pvt ltd"": 1,
    ""Digi Turunc"": 2,
    ""Microsoft"": 1
  },
  ""org"": {
    ""Chang Way Technologies Co. Limited"": 11,
    ""Wfedune EDU"": 2,
    ""DigitalOcean, LLC"": 14,
    ""Unknown"": 1,
    ""Flyservers S.A"": 10,
    ""UAB Host Baltic"": 4,
    ""China United Network Communications Corporation Limited"": 2,
    ""Bullet Group LTD"": 1,
    ""Alviva Holding Limited"": 3,
    ""Linode, LLC"": 2,
    ""Censys Inc"": 2,
    ""Datacamp Limited"": 1,
    ""Palo Alto Networks, Inc"": 12,
    ""Microsoft Azure Cloud (southcentralus)"": 1,
    ""Ucloud Information Technology (hk) Limited"": 1,
    ""FyfeWeb Ltd"": 2,
    ""Xhostis"": 2,
    ""Microsoft Corporation"": 2,
    ""Xhost Internet Solutions"": 4,
    ""Uninet S.A. de C.V."": 1,
    ""Super Sonic Broadband Pvt Ltd"": 1,
    ""Makut Investments"": 3,
    ""SiChuan Cable TV Network CO., LTD"": 1,
    ""HostSlick"": 2,
    ""Spenterpr"": 1,
    ""Turunc Smart Bilgisayar Ve Teknoloji Ve Dis Tecaret Limited"": 2,
    ""Microsoft Azure Cloud (francecentral)"": 1
  },
  ""regionName"": {
    ""Moscow"": 11,
    ""Beijing"": 4,
    ""California"": 16,
    ""Shanghai"": 1,
    ""South West"": 2,
    ""Kaunas"": 8,
    ""Vilnius"": 4,
    ""Kelantan"": 1,
    ""Hesse"": 4,
    ""Central Singapore"": 8,
    ""Ontario"": 2,
    ""Illinois"": 1,
    ""North Holland"": 5,
    ""Texas"": 1,
    ""Seoul"": 1,
    ""England"": 2,
    ""Virginia"": 7,
    ""Uusimaa"": 3,
    ""Mexico City"": 1,
    ""Maharashtra"": 1,
    ""Sichuan"": 1,
    ""National Capital Territory of Delhi"": 1,
    ""Istanbul"": 2,
    ""\u00cele-de-France"": 1,
    ""Michigan"": 1
  },
  ""country"": {
    ""Russia"": 11,
    ""China"": 6,
    ""United States"": 26,
    ""Singapore"": 10,
    ""Lithuania"": 12,
    ""Malaysia"": 1,
    ""Germany"": 4,
    ""Canada"": 2,
    ""The Netherlands"": 5,
    ""South Korea"": 1,
    ""United Kingdom"": 2,
    ""Finland"": 3,
    ""Mexico"": 1,
    ""India"": 2,
    ""Turkey"": 2,
    ""France"": 1
  },
  ""account"": {
    ""Test"": 22,
    ""hello"": 27,
    ""(empty)"": 7,
    ""Administr"": 7,
    ""Domain"": 13,
    ""QmbExSlhj"": 1,
    ""yksliN"": 1,
    ""LOJUZl"": 1,
    ""Administrator"": 1,
    ""JxuDmRAJJ"": 1,
    ""xaFMWQ"": 1,
    ""WbMXzZ"": 1,
    ""KFAZZguWV"": 1,
    ""jlmETt"": 1,
    ""OvXMOJ"": 1,
    ""uGCgkPBAD"": 1,
    ""xkVooQ"": 1,
    ""MwZesw"": 1
  },
  ""keyboard"": {
    ""Unknown"": 89
  },
  ""client_build"": {
    ""Unknown"": 89
  },
  ""client_name"": {
    ""Unknown"": 89
  },
  ""ip_type"": {
    ""proxy"": 13,
    ""Unknown"": 41,
    ""hosting"": 34,
    ""hosting & proxy"": 1
  }
}"
umzitGWn,ü§ëG2A.com Free Gift Card FIX June 2024ü§ë,thepplayz,JavaScript,Tuesday 25th of June 2024 07:09:42 PM CDT,"G2A.com complimentary voucher & games guide.
Any gift card for free on G2A.com including Xbox gift cards & everything else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?69872

Working as of:
24th of June 2024

"
0zCgEunq,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,sirmikey,JavaScript,Tuesday 25th of June 2024 07:03:34 PM CDT,"G2A.com free gift card & gaming guide.
Any gift card for free on G2A.com including Playstation gift cards & all else offered.
This is the most latest version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?69872

Working as of:
June 24 2024

"
Sstjgw2H,Roe2Js :: loadJSONDirect ( ),jargon,JavaScript,Tuesday 25th of June 2024 06:58:09 PM CDT,"// Function to load JSON
function loadJSON(url) {
	
	console.log(`Requesting: ""` + basename(url,`.json`) + `""`);

	if(basename(url,`.json`) === `[object Promise]`){
		return false;
	}

	if(basename(url,`.json`) === `undefined`){
		return false;
	}
	
	// Ensure the URL starts with the host
	if ( !url.startsWith( host ) ) {
		url = `${host}${url}`;
	}
				
	let originalRequest = ``;
	
	let addy = ``;
	
	if(instr(url,`//`)){
		addy = url.split(`//`)[1];
	}else{
		addy = url;
	}
	
	addy = addy.split(`/`);
	let addy2 = ``;
	for(index = 1; index < addy.length - 1; index++){
		if(addy[index]!==``){
			addy2 += `/${addy[index]}`;
		}
	}
	
	addy3 = addy2.split(`/`);
	
	let nestRequest = ``;
	
	for(index = 2; index <= 2; index++){
		nestRequest += `/${addy3[index]}`;
	}

	for(index = 3; index < addy.length; index++){
		originalRequest += `/${addy[index]}`;
	}
	let requestPath=`${addy[0]}`;

	// Replace spaces with %20
	url = url.replace(/ /g, '%20');

	// Fetch the JSON file
	return fetch(url)
		.then(response => {
			if (!response.ok) {
				throw new Error(`Oh, Noez!! It was a bad network response\n\nunder ""${nestRequest}"" in ""${originalRequest}"" (${response.statusText})\n\n`);
			}
			return response.json();
		})
		.then(data => {
			console.log(`Woot!! Data fetched!\n\nunder ""${nestRequest}"" in ""${originalRequest}""\n\n`, data);
			return data;
		})
		.catch(error => {
			console.error(`Oh, Noez!! There has been a problem with your fetch operation!\n\nunder ""${nestRequest}"" in ""${originalRequest}""\n\n`, error);
		});
}

function fileExists(url) {

	// Ensure the URL starts with the host
	if ( !url.startsWith( host ) ) {
		url = `${host}${url}`;
	}
			
	// Replace spaces with %20
	url = url.replace(/ /g, '%20');

    try {
        const response = fetch(url, { method: 'HEAD' });
        return response.status === 200;
    } catch (error) {
        console.error(`Oh, Noez!! Error fetching the file!\n\n""${url}""`, error);
        return false;
    }
}

function basename(path = ``, ext = ``) {
	
	let intermediate = path.split(`/`);
	
	intermediate = intermediate[intermediate.length - 1];
	
	if ( ext === right( intermediate, len( ext ) ) ) {
		intermediate = left( intermediate, len( intermediate ) - len( ext ));
	}
	
	return intermediate;
}

function loadJSONDirect(url){
	let intermediate = [loadJSON(url)][0];
	console.log(intermediate);
	return intermediate;
}"
w6XKxQDm,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,sayid83,JavaScript,Tuesday 25th of June 2024 06:57:29 PM CDT,"G2A.com free gift card & games guide.
Any voucher for free on G2A.com including Playstation gift cards & all else offered.
This is the most latest version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?69872

Working as of:
June 24 2024

"
iRYxqbCW,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,PetrikDev,JavaScript,Tuesday 25th of June 2024 06:51:26 PM CDT,"G2A.com free voucher & gaming guide.
Any item for free on G2A.com including Playstation gift cards & everything else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?69872

Working as of:
24th of June 2024

"
nRVAMYJ2,üéÅ G2A.COM FREE GIFT CARD GUIDE JUN 2024 V2 üéÅ,jusst2k4,GetText,Tuesday 25th of June 2024 06:46:16 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_616037.pdf
 
Working as of:
26 June 2024"
wzajJJ9i,ü§ëG2A.com Free Gift Card FIX June 2024ü§ë,x3kiN,JavaScript,Tuesday 25th of June 2024 06:45:23 PM CDT,"G2A.com complimentary gift card & games guide.
Any gift card for free on G2A.com including Xbox gift cards & all else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?69872

Working as of:
June 24 2024

"
NxgP6ky1,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,FeasModz514,JavaScript,Tuesday 25th of June 2024 06:39:20 PM CDT,"G2A.com complimentary gift card & games guide.
Any item for free on G2A.com including Amazon gift cards & everything else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?69872

Working as of:
June 24th 2024

"
eY60pWhX,War,gustavohenriquefs,C++,Tuesday 25th of June 2024 06:34:48 PM CDT,"// https://onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=16&page=show_problem&problem=1099
// AC

#include <bits/stdc++.h>
using namespace std;

#define vt vector
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define pb push_back
#ifdef DEBUG
#define debug_loop(l, r) for(int i = l; i <= r; ++ i)
#define debug(args...) printf(args); printf(""\n"")
#else
#define debug_loop(l, r) for(int i; false;)
#define debug(args...)
#endif

#define fi first
#define se second

#define sz(x) (int)x.size()

typedef int64_t i64;
typedef long long ll;
typedef pair<int, int> pii;

#define nl '\n'

const int maxn = 40101;

vt<int> parent(maxn), size_of(maxn);
vt<set<int>> enemies(maxn);

void make_set(int v) {
  parent[v] = v;
}

int find_set(int v) {
  return (parent[v] == v) ? v : (parent[v] = find_set(parent[v]));
}

void union_sets(int a, int b, int skip = false) {
  a = find_set(a),
  b = find_set(b);

  if(sz(enemies[a]) && sz(enemies[b]) && !skip) {
    union_sets((*enemies[b].begin()), (*enemies[a].begin()), true);
  }

  if(a == b) return;

  enemies[a].insert(all(enemies[b]));
  enemies[b].insert(all(enemies[a]));
  
  if(size_of[a] < size_of[b]) swap(a, b);

  parent[b] = a;

  size_of[a] += size_of[b];
}

void union_enemies(int a, int b) {
  a = find_set(a);
  b = find_set(b);

  if(sz(enemies[a])) {
    union_sets(b, *enemies[a].begin());
  }

  if(sz(enemies[b])) {
    union_sets(a, *enemies[b].begin());
  }

  a = find_set(a);
  b = find_set(b);

  enemies[a].insert(b);
  enemies[b].insert(a);
}

bool is_enemies(int a, int b) {
  a = find_set(a);
  b = find_set(b);

  auto it = enemies[a].begin();
  bool ans = false;

  for(auto i = it; i != enemies[a].end();) {
    const int id = find_set(*i);

    if(id != *i) {
      i = enemies[a].erase(i);
      enemies[a].insert(id);
    } else {
      ++ i;
    }

    if(id == b) ans = true;
  }

  it = enemies[b].begin();

  for(auto i = it; i != enemies[b].end();) {
    const int id = find_set(*i);

    if(id != *i) {
      i = enemies[b].erase(i);
      enemies[b].insert(id);
    } else {
      ++ i;
    }

    if(id == a) ans = true;
  }

  return ans;
}

bool is_friends(int a, int b) {
  a = find_set(a); 
  b = find_set(b);

  return a == b;
}

int main() {
  cin.tie(0)->sync_with_stdio(0);

  int n; cin >> n;

  for(int i = 0; i <= n + 100; ++ i) {
    make_set(i);
  }

  int c, x, y = 1; 

  while (true) {
    cin >> c >> x >> y;

    if(!(c or x or y)) break;

    if(c == 1) {
      if(is_enemies(x, y)) {
        cout << ""-1"" << nl;
        continue;
      }

      union_sets(x, y);
    } else if(c == 2) {
      if(is_friends(x, y)) {
        cout << ""-1"" << nl;
        continue;
      }

      union_enemies(x, y);
    } else if(c == 3) {
      cout << is_friends(x, y) << nl;
    } else {
      cout << is_enemies(x, y) << nl;
    }
  }

  exit(0);
}"
tNMUezxg,ü§ëG2A.com Free Gift Card FIX June 2024ü§ë,kjihu25,JavaScript,Tuesday 25th of June 2024 06:33:17 PM CDT,"G2A.com free voucher & gaming guide.
Any gift card for free on G2A.com including Amazon gift cards & anything else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?69872

Working as of:
June 24 2024

"
zGK2fZAV,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,Bufayez,JavaScript,Tuesday 25th of June 2024 06:27:14 PM CDT,"G2A.com free gift card & games guide.
Any item for free on G2A.com including Amazon gift cards & everything else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?69872

Working as of:
24th of June 2024

"
0gpcQQS2,ü§ëG2A.com Free Gift Card FIX June 2024ü§ë,buch,JavaScript,Tuesday 25th of June 2024 06:21:11 PM CDT,"G2A.com free voucher & gaming guide.
Any item for free on G2A.com including Xbox gift cards & anything else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?69872

Working as of:
June 24th 2024

"
uGKYiRKb,install.lua,DeathlyBower959,Lua,Tuesday 25th of June 2024 06:11:11 PM CDT,"local pastebinID = ""AhKtxL4t""
local filename = ""main.lua""

local url = ""https://pastebin.com/raw/"" .. pastebinID
local response = http.get(url)
if response then
    local content = response.readAll()
    response.close()

    shell.run('rm ' .. filename)
    local file = fs.open(filename, ""w"")
    file.write(content)
    file.close()

    shell.run(filename)
else
    print(""Failed to download from Pastebin."")
end

"
AcrxZF10,petcat basic 8,frakswe,C,Tuesday 25th of June 2024 06:02:39 PM CDT,"/*
 * This file is part of Commodore 64 emulator
 *      and Program Development System.
 *
 *   Copyright (C) 1993-1995,1996, Jouko Valta
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation; either version 2 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program; if not, write to the Free Software
 *   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 *
 *
 * This program converts your SEQ files as well as expands tokenized
 * C64/128 BASIC programs into 7-bit ASCII text. Unprintable characters
 * can be shown as hexadecimal codes in parenthesis, via `-c' option.
 * It is also possible to convert programs from ascii listings into
 * tokenized basic v2.0, v3.5, v4.0, v7.0 or simons' basic programs. This
 * program also replaces certain control code names with the actual codes.
 *
 * A list of Toolkit Basic (published by Compute! Books) token codes
 * would be greatly appreciated. (-:
 *
 * Runs on UNIX or Atari ST.
 *
 * In shell:
 *  tr '\015A-Za-z\301-\332\\\|\[\{\]\}' '\012a-zA-ZA-Z\|\\\{\[\}\]'
 * or
 *  tr '\015A-Za-z\\\|\[\{\]\}' '\012a-zA-Z\|\\\{\[\}\]'
 *
 * Written by
 *   Jouko Valta <jopi@stekt.oulu.fi>
 *
 * With additional changes by
 *   Ettore Perazzoli <ettore@comm2000.it>
 *   Spiro Trikaliotis <spiro.trikaliotis@gmx.de>
 *
 * Support for Final Cartridge III extensions to c64 2.0 basic
 *   Matti 'ccr' Hamalainen <ccr@tnsp.org>
 *
 * Support for many of the other extensions by
 *   Marco van den Heuvel <blackystardust68@yahoo.com>
 *
 * Various fixes and enhancements by
 *   groepaz <groepaz@gmx.net>
 *   Ian Coog
 *   Bas Wassink <b.wassink@ziggo.nl>
 *
 */

/* #define DEBUG */

#include ""vice.h""
#include ""archdep_defs.h""

#include ""version.h""

#ifdef USE_SVN_REVISION
# include ""svnversion.h""
#endif

#include <ctype.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdint.h>

#ifdef ARCHDEP_OS_WINDOWS
#include <fcntl.h>
#include <io.h>
#endif

#ifdef DEBUG
#define DBG(x)  printf x
#else
#define DBG(x)
#endif

#ifdef main
#  if main == SDL_main
#    undef main
#  endif
#endif

/* ------------------------------------------------------------------------- */

#define B_1              1
#define B_2              2
#define B_SUPEREXP       3
#define B_TURTLE         4

#define B_SIMON          5
#define B_SPEECH         6
#define B_ATBAS          7
#define B_4              8
#define B_4E             9      /* C64 extension, Expand only */

#define B_35            10
#define B_7             11
#define B_10            12
#define B_FC3           13
#define B_ULTRA         14
#define B_GRAPH         15
#define B_WS            16
#define B_MIGHTY        17
#define B_PEG           18
#define B_X             19
#define B_DRAGO         20
#define B_REU           21
#define B_BASL          22
#define B_71            23
#define B_MAGIC         24
#define B_EASY          25
#define B_BLARG         26
#define B_VIC4          27
#define B_VIC5          28
#define B_WSF           29
#define B_GB            30
#define B_BSX           31
#define B_SUPERBAS      32
#define B_EXPBAS64      33
#define B_SXC           34
#define B_WARSAW        35
#define B_EXPBAS20      36
#define B_SUPERGRA      37
#define B_KIPPER        38
#define B_BOB           39
#define B_EVE           40
#define B_TT64          41
#define B_HANDY         42
#define B_8             43

/* Handy Basic (VIC20) -- Tokens 0xCC - 0xE1 */

static const char *handykwcc[] = {
    ""move"",  ""pop"",   ""else"", ""volume"", ""pause"", ""base"", ""reset"",  ""copychr"",
    ""color"", ""sound"", ""fill"", ""beep"",   ""put"",   ""take"", ""accept"", ""kill"",
    ""rtime"", ""cls"",   ""old"",  ""rkey"",   ""joy"",   ""grab""
};

/* Super Expander (VIC20) -- Tokens 0xCC - 0xDD */

static const char *superexpkwcc[] = {
    ""key"",   ""graphic"", ""scnclr"", ""circle"", ""draw"", ""region"", ""color"", ""point"",
    ""sound"", ""char"",    ""paint"",  ""rpot"",   ""rpen"", ""rsnd"",   ""rcolr"", ""rgr"",
    ""rjoy"",  ""rdot""
};

/* Turtle Basic v1.0 (VIC20) by Craig Bruce -- Tokens 0xCC - 0xED */

static const char *turtlekwcc[] = {
    ""graphic"", ""old"",    ""turn"",   ""pen"",    ""draw"",  ""move"", ""point"", ""kill"",
    ""write"",   ""repeat"", ""screen"", ""doke"",   ""reloc"", ""fill"", ""rtime"", ""base"",
    ""pause"",   ""pop"",    ""color"",  ""merge"",  ""char"",  ""take"", ""sound"", ""vol"",
    ""put"",     ""place"",  ""cls"",    ""accept"", ""reset"", ""grab"", ""rdot"",  ""plr$"",
    ""deek"",    ""joy""
};

/* Simons' Basic (C64) -- Tokens 0x6400 - 0x647F */

static const char *simonskw[] = {
    """",         ""hires"",    ""plot"",     ""line"",    ""block"",    ""fchr"",
    ""fcol"",     ""fill"",     ""rec"",      ""rot"",     ""draw"",     ""char"",
    ""hi col"",   ""inv"",      ""frac"",     ""move"",    ""place"",    ""upb"",
    ""upw"",      ""leftw"",    ""leftb"",    ""downb"",   ""downw"",    ""rightb"",
    ""rightw"",   ""multi"",    ""colour"",   ""mmob"",    ""bflash"",   ""mob set"",
    ""music"",    ""flash"",    ""repeat"",   ""play"",    "">>"",       ""centre"",
    ""envelope"", ""cgoto"",    ""wave"",     ""fetch"",   ""at("",      ""until"",
    "">>"",       "">>"",       ""use"",      "">>"",      ""global"",   "">>"",
    ""reset"",    ""proc"",     ""call"",     ""exec"",    ""end proc"", ""exit"",
    ""end loop"", ""on key"",   ""disable"",  ""resume"",  ""loop"",     ""delay"",
    "">>"",       "">>"",       "">>"",       "">>"",      ""secure"",   ""disapa"",
    ""circle"",   ""on error"", ""no error"", ""local"",   ""rcomp"",    ""else"",
    ""retrace"",  ""trace"",    ""dir"",      ""page"",    ""dump"",     ""find"",
    ""option"",   ""auto"",     ""old"",      ""joy"",     ""mod"",      ""div"",
    "">>"",       ""dup"",      ""inkey"",    ""inst"",    ""test"",     ""lin"",
    ""exor"",     ""insert"",   ""pot"",      ""penx"",    "">>"",       ""peny"",
    ""sound"",    ""graphics"", ""design"",   ""rlocmob"", ""cmob"",     ""bckgnds"",
    ""pause"",    ""nrm"",      ""mob off"",  ""off"",     ""angl"",     ""arc"",
    ""cold"",     ""scrsv"",    ""scrld"",    ""text"",    ""cset"",     ""vol"",
    ""disk"",     ""hrdcpy"",   ""key"",      ""paint"",   ""low col"",  ""copy"",
    ""merge"",    ""renumber"", ""mem"",      ""detect"",  ""check"",    ""display"",
    ""err"",      ""out""
};

/* Speech Basic v2.7 (C64) - Tokens 0xCC - 0xE6 */

static const char *speechkwcc[] = {
    ""reset"",  ""basic"",  ""help"", ""key"",   ""himem"",  ""disk"", ""dir"",    ""bload"",
    ""bsave"",  ""map"",    ""mem"",  ""pause"", ""block"",  ""hear"", ""record"", ""play"",
    ""voldef"", ""coldef"", ""hex"",  ""dez"",   ""screen"", ""exec"", ""mon"",    ""<-"",
    ""from"",   ""speed"",  ""off""
};

/* @Basic (C64) by Andre Fachat -- Tokens 0xCC - 0xF6 */

static const char *atbasickwcc[] = {
    ""trace"",    ""delete"",  ""auto"",   ""old"",     ""dump"",      ""find"",
    ""renumber"", ""dload"",   ""dsave"",  ""dverify"", ""directory"", ""catalog"",
    ""scratch"",  ""collect"", ""rename"", ""copy"",    ""backup"",    ""disk"",
    ""header"",   ""append"",  ""merge"",  ""mload"",   ""mverify"",   ""msave"",
    ""key"",      ""basic"",   ""reset"",  ""exit"",    ""enter"",     ""doke"",
    ""set"",      ""help"",    ""screen"", ""lomem"",   ""himem"",     ""colour"",
    ""type"",     ""time"",    ""deek"",   ""hex$"",    ""bin$"",      ""off"",
    ""alarm""
};

/* Basic v4.0 (PET) -- TOKENS 0xCC - 0xDE / Basic v4.0 extension (C64) -- Tokens 0xCC - 0xE5 */
static const char *petkwcc[] = {
    ""concat"",    ""dopen"",  ""dclose"", ""record"", ""header"",  ""collect"", ""backup"",
    ""copy"",      ""append"", ""dsave"",  ""dload"",  ""catalog"", ""rename"",  ""scratch"",
    ""directory"", ""dclear"", ""bank"",   ""bload"",  ""bsave"",

    /* Basic 4 Extension for C64 (0xdf - 0xe7) */
    ""color"",  ""cold"", ""key"", ""dverify"", ""delete"", ""auto"", ""merge"", ""old"",
    ""monitor""
};

/* Final Cartridge III (C64) by Matti 'ccr' Hamalainen -- Tokens 0xCC - 0xE8 */

static const char *fc3kw[] = {
    ""off"",   ""auto"",    ""del"",     ""renum"",  ""?ERROR?"", ""find"",   ""old"",
    ""dload"", ""dverify"", ""dsave"",   ""append"", ""dappend"", ""dos"",    ""kill"",
    ""mon"",   ""pdir"",    ""plist"",   ""bar"",    ""desktop"", ""dump"",   ""array"",
    ""mem"",   ""trace"",   ""replace"", ""order"",  ""pack"",    ""unpack"", ""mread"",
    ""mwrite""
};

/* Ultrabasic-64 (C64) by Marco van den Heuvel - Tokens 0xCC - 0xFE */

static const char *ultrabasic64kwcc[] = {
    ""dot"",    ""draw"",  ""box"",    ""tic"",    ""copy"", ""sprite"", ""off"",   ""mode"",
    ""norm"",   ""graph"", ""dump"",   ""gread"",  ""char"", ""place"",  ""multi"", ""hires"",
    ""hex"",    ""bit"",   ""colors"", ""pixel"",  ""fill"", ""circle"", ""block"", ""sdata"",
    ""vol"",    ""gen"",   ""scoll"",  ""bcoll"",  ""joy"",  ""paddle"", ""pen"",   ""sound"",
    ""tune"",   ""tdata"", ""set"",    ""turnto"", ""turn"", ""tup"",    ""tdown"", ""tcolor"",
    ""turtle"", ""move"",  ""bye"",    ""rotate"", ""tpos"", ""ctr"",    ""sctr"",  ""["",
    ""]"",      ""hard"",  ""exit""
};

/* Graphics basic (C64) by Marco van den Heuvel -- Tokens 0xCC - 0xFE */

static const char *graphicsbasickwcc[] = {
    ""background"", ""border"", ""dir"",   ""disk"",   ""fill"",      ""key"",     ""circle"",
    ""procedure"",  ""dot"",    ""find"",  ""change"", ""ren"",       ""else"",    ""copy"",
    ""scroll"",     ""roll"",   ""box"",   ""scale"",  ""do"",        ""line"",    ""sprite"",
    ""color"",      ""hires"",  ""clear"", ""text"",   ""window"",    ""off"",     ""at"",
    ""shape"",      ""xysize"", ""speed"", ""from"",   ""setorigin"", ""animate"", ""multi"",
    ""eze"",        ""move"",   ""under"", ""edit"",   ""reset"",     ""xpos"",    ""gprint"",
    ""voice"",      ""adsr"",   ""wave"",  ""ne"",     ""volume"",    ""play"",    ""ypos"",
    ""sound"",      ""joy""
};

/* WS (WohnzimmerSoft) basic (C64) by Marco van den Heuvel -- Tokens 0xCC - 0xFE */

static const char *wsbasickwcc[] = {
    ""copy"",   ""old"",    ""port"",  ""doke"",  ""vpoke"",  ""fill"",   ""error"",
    ""send"",   ""call"",   ""bit"",   ""dir"",   ""bload"",  ""bsave"",  ""find"",
    ""speed"",  ""pitch"",  ""say"",   ""fast"",  ""slow"",   ""talk"",   ""shutup"",
    ""stash"",  ""fetch"",  ""swap"",  ""off"",   ""screen"", ""device"", ""object"",
    ""vstash"", ""vfetch"", ""quiet"", ""color"", ""cls"",    ""curpos"", ""monitor"",
    ""subend"", ""do"",     ""loop"",  ""exit"",  ""deek"",   ""rsc"",    ""rsm"",
    ""dec"",    ""hex$"",   ""hi"",   ""lo"",    ""ds$"",    ""line"",   ""vpeek"",
    ""row"",    ""joy""
};

/* Mighty Basic (VIC20) -- Tokens 0xCC - 0xFE */

static const char *mightykwcc[] = {
    ""delete"",  ""old"",     ""renumber"",  ""help"",   ""header"", ""move"",
    ""trace"",   ""kill"",    ""dump"",      ""dsave"",  ""dload"",  ""dverify"",
    ""dresave"", ""scratch"", ""directory"", ""key"",    ""send"",   ""pop"",
    ""off"",     ""bsave"",   ""bload"",     ""find"",   ""auto"",   ""pprint"",
    ""accept"",  ""reset"",   ""else"",      ""color"",  ""take"",   ""pause"",
    ""base"",    ""copychr"", ""char"",      ""beep"",   ""cls"",    ""fill"",
    ""merge"",   ""sound"",   ""give"",      ""plist"",  ""put"",    ""volume"",
    ""rtime"",   ""msb"",     ""lsb"",       ""vector"", ""joy"",    ""dec"",
    ""hex$"",    ""grab"",    ""ds$""
};

/* Pegasus basic v4.0 (C64) by Marco van den Heuvel -- Tokens 0xCC - 0xEC */

static const char *pegbasickwcc[] = {
    ""off"",      ""asc("",     ""sin("",    ""cos("",  ""tan("",     ""atn("",
    ""deg("",     ""rad("",     ""frac("",   ""mod("",  ""round("",   ""dec("",
    ""bin("",     ""deek("",    ""instr("",  ""joy("",  ""pot("",     ""screen("",
    ""test("",    ""using"",    ""ds$"",     ""hex$("", ""bin$("",    ""space$("",
    ""ucase$("",  ""string$("", ""input$("", ""time$"", ""spritex("", ""spritey("",
    ""turtlex("", ""turtley("", ""turtleang""
};

/* Xbasic (C64) by Marco van den Heuvel -- Tokens 0xCC - 0xEC */

static const char *xbasickwcc[] = {
    ""sprat"",   ""brdr"",    ""screen"", ""quit"",     ""sprmult"", ""move"",  ""sprite"",
    ""asprite"", ""dsprite"", ""sid"",    ""envelope"", ""gate"",    ""frq"",   ""wave"",
    ""vol"",     ""fcut"",    ""fmode"",  ""filter"",   ""frsn"",    ""cset"",  ""multi"",
    ""extnd"",   ""locate"",  ""center"", ""hires"",    ""line"",    ""hprnt"", ""plot"",
    ""text"",    ""clear"",   ""colr"",   ""stick"",    ""btn""
};

/* Drago basic v2.2 (C64) by Marco van den Heuvel -- Tokens 0xCC - 0xD8 */

static const char *dragobasickwcc[] = {
    ""punkt"",   ""linia"",  ""rysuj"", ""param"",  ""kuntur"", ""anim"", ""kolor"", ""puwid"",
    ""ryselip"", ""koguma"", ""fiut"",  ""figura"", ""figuma""
};

/* REU-basic (C64) by Marco van den Heuvel -- Tokens 0xCC - 0xDA */

static const char *reubasickwcc[] = {
    ""push"", ""pull"", ""flip"", ""rec"", ""stash"", ""fetch"", ""swap"", ""reu"", ""size"",
    ""dir"",  ""@"",    ""kill"", ""rom"", ""ram"",   ""move""
};

/* Basic Lightning (C64) by Marco van den Heuvel -- Tokens 0xCC - 0xFE */

static const char *baslkwcc[] = {
    ""else"",  ""hex$"",  ""deek"",     ""true"",    ""import"",  ""cfn"",   ""size"",
    ""false"", ""ver$"",  ""lpx"",      ""lpy"",     ""common%"", ""crow"",  ""ccol"",
    ""atr"",   ""inc"",   ""num"",      ""row2"",    ""col2"",    ""spn2"",  ""hgt"",
    ""wid"",   ""row"",   ""col"",      ""spn"",     ""task"",    ""halt"",  ""repeat"",
    ""until"", ""while"", ""wend"",     ""cif"",     ""celse"",   ""cend"",  ""label"",
    ""doke"",  ""exit"",  ""allocate"", ""disable"", ""pull"",    ""dload"", ""dsave"",
    ""var"",   ""local"", ""procend"",  ""proc"",    ""casend"",  ""of"",    ""case"",
    ""rpt"",   ""setatr""
};

/* Magic Basic (C64) by Marco van den Heuvel -- Tokens 0xCC - 0xFD */

static const char *magickwcc[] = {
    ""assembler"", ""auto"",   ""cdrive"", ""cat"",     ""dappend"", ""delete"",  ""dez"",
    ""dir"",       ""dload"",  ""dsave"",  ""dverify"", ""config"",  ""find"",    "" "",
    "" "",         ""help"",   ""hex"",    ""jump"",    ""llist"",   ""lprint"",  ""off"",
    ""old"",       ""renum"",  ""crun"",   ""send"",    ""status"",  ""hires"",   ""multi"",
    ""clear"",     ""plot"",   ""invert"", ""line"",    ""text"",    ""graphik"", ""page"",
    ""box"",       ""draw"",   ""mix"",    ""copy"",    ""circle"",  ""gsave"",   ""gload"",
    ""frame"",     ""hprint"", ""vprint"", ""block"",   ""fill"",    "" "",       ""replace"",
    ""lrun""
};

/* Easy Basic (VIC20) -- Tokens 0xCC - 0xFE */

static const char *easykwcc[] = {
    ""delete"", ""old"",     ""renumber"",  ""dump"",   ""merge"", ""plot"",
    ""trace"",  ""kill"",    ""help"",      ""dload"",  ""dsave"", ""dverify"",
    ""append"", ""screen"",  ""directory"", ""key"",    ""send"",  ""pop"",
    ""off"",    ""pout"",    ""header"",    ""find"",   ""auto"",  ""pprint"",
    ""accept"", ""reset"",   ""scratch"",   ""color"",  ""take"",  ""pause"",
    ""base"",   ""copychr"", ""char"",      ""clk"",    ""cls"",   ""fill"",
    ""retime"", ""sound"",   ""poff"",      ""plist"",  ""put"",   ""volume"",
    ""joy"",    ""msb"",     ""lsb"",       ""vector"", ""rkey"",  ""dec"",
    ""hex$"",   ""grab"",    ""ds$""
};

/* Blarg (C64) by Marco van den Heuvel -- Tokens 0xE0 - 0xEA */

static const char *blargkwe0[] = {
    ""plot"",   ""line"", ""circle"", ""gron"", ""groff"", ""mode"", ""origin"", ""clear"",
    ""buffer"", ""swap"", ""color""
};

/* Basic 4.0 extension (VIC20) -- Tokens 0xCC - 0xDF */

static const char *vic4kwcc[] = {
    ""concat"",  ""dopen"",   ""dclose"",    ""record"", ""header"", ""collect"",
    ""backup"",  ""copy"",    ""append"",    ""dsave"",  ""dload"",  ""catalog"",
    ""rename"",  ""scratch"", ""directory"", ""ieee"",   ""serial"", ""parallel"",
    ""monitor"", ""modem""
};

/* Basic 5.0 extension (VIC20) -- Tokens 0xCC - 0xF1 */

static const char *vic5kwcc[] = {
    ""concat"", ""dopen"",    ""dclose"",    ""record"",  ""header"",  ""collect"",
    ""backup"", ""copy"",     ""append"",    ""dsave"",   ""dload"",   ""catalog"",
    ""rename"", ""scratch"",  ""directory"", ""dverify"", ""monitor"", ""repeat"",
    ""bell"",   ""commands"", ""renew"",     ""`"",       ""key"",     ""auto"",
    ""off"",    """",         ""merge"",     ""color"",   ""mem"",     ""enter"",
    ""delete"", ""find"",     ""number"",    ""else"",    ""call"",    ""graphic"",
    ""alpha"",  ""dmerge""
};

/* WS (WohnzimmerSoft) Basic final (C64) by Marco van den Heuvel -- Tokens 0xCC - 0xFE */

static const char *wsfbasickwcc[] = {
    ""copy"",   ""bank"",   ""old"",   ""doke"",  ""display"", ""fill"",   ""error"",
    ""send"",   ""call"",   ""bit"",   ""dir"",   ""bload"",   ""bsave"",  ""find"",
    ""speed"",  ""pitch"",  ""say"",   ""fast"",  ""slow"",    ""talk"",   ""shutup"",
    ""stash"",  ""fetch"",  ""swap"",  ""off"",   ""mode"",    ""device"", ""object"",
    ""vstash"", ""vfetch"", ""latch"", ""color"", ""cls"",     ""curpos"", ""monitor"",
    ""subend"", ""do"",     ""loop"",  ""exit"",  ""deek"",    ""col"",    ""rsm"",
    ""dec"",    ""hex$"",   ""hi"",    ""lo"",    ""ds$"",     ""line"",   ""bnk"",
    ""ypos"",   ""joy""
};

/* Game Basic (C64) by Marco van den Heuvel -- Tokens 0xCC - 0xE8 */

static const char *gbkwcc[] = {
    ""window"", ""bfile"",   ""upper"",   ""lower"",   ""cls"",    ""screen"", ""parse"",
    ""proc"",   ""else"",    ""scratch"", ""replace"", ""device"", ""dir"",    ""repeat"",
    ""until"",  ""disk"",    ""fetch#"",  ""put#"",    ""prompt"", ""pop"",    ""help"",
    ""exit"",   ""disable"", ""enter"",   ""reset"",   ""warm"",   ""num"",    ""type"",
    ""text$""
};

/* Basex (C64) by Marco van den Heuvel -- Tokens 0xCC - 0xEA */

static const char *bsxkwcc[] = {
    ""append"",   ""auto"",   ""bar"",    ""circle"", ""clg"",      ""cls"",   ""csr"",
    ""delete"",   ""disk"",   ""draw"",   ""edge"",   ""envelope"", ""fill"",  ""key"",
    ""mob"",      ""mode"",   ""move"",   ""old"",    ""pic"",      ""dump"",  ""plot"",
    ""renumber"", ""repeat"", ""scroll"", ""sound"",  ""while"",    ""until"", ""voice"",
    ""ass"",      ""dis"",    ""mem""
};

/* Super Basic (C64) by Marco van den Heuvel -- Tokens 0xDB - 0xFE */

static const char *superbaskwdb[] = {
    ""volume"",   ""reset"",     ""mem"",    ""trace"",   ""basic"",   ""resume"", ""letter"",
    ""help"",     ""coke"",      ""ground"", ""matrix"",  ""dispose"", ""print@"", ""himem"",
    ""hardcopy"", ""inputform"", ""lock"",   ""swap"",    ""using"",   ""sec"",    ""else"",
    ""error"",    ""round"",     ""deek"",   ""string$"", ""point"",   ""instr"",  ""ceek"",
    ""min"",      ""max"",       ""varptr"", ""frac"",    ""odd"",     ""dec"",    ""hex$"",
    ""eval""
};

/* Expanded Basic (C64) by Marco van den Heuvel - Tokens 0xCC - 0xF5 */

static const char *expbas64kwcc[] = {
    ""hires"",    ""norm"",     ""graph"",    ""set"",    ""line"",     ""circle"",
    ""fill"",     ""mode"",     ""cls"",      ""text"",   ""color"",    ""gsave"",
    ""gload"",    ""inverse"",  ""frame"",    ""move"",   ""using"",    ""renumber"",
    ""delete"",   ""box"",      ""mobdef"",   ""sprite"", ""mobset"",   ""modsize"",
    ""mobcolor"", ""mobmulti"", ""mobmove"",  ""doke"",   ""allclose"", ""old"",
    ""auto"",     ""volume"",   ""envelope"", ""wave"",   ""play"",     ""case error"",
    ""resume"",   ""no error"", ""find"",     ""inkey"",  ""merge"",    ""hardcopy""
};

/* Super Expander Chip (C64) -- Tokens 0xFE00 - 0xFE1F */

static const char *sxckwfe[] = {
    ""key"",    ""color"",  ""graphic"", ""scnclr"", ""locate"", ""scale"",  ""box"",
    ""circle"", ""char"",   ""draw"",    ""gshape"", ""paint"",  ""sshape"", ""tune"",
    ""filter"", ""sprdef"", ""tempo"",   ""movspr"", ""sprcol"", ""sprite"", ""colint"",
    ""sprsav"", ""rbump"",  ""rclr"",    ""rdot"",   ""rgr"",    ""rjoy"",   ""rpen"",
    ""rpot"",   ""rspcol"", ""rsppos"",  ""rspr""
};

/* Warsaw Basic Keywords (C64) by Marco van den Heuvel -- Tokens 0xDB - 0xFE */

static const char *warsawkwdb[] = {
    ""hisave"", ""sline"", ""mem"",    ""trace"",   ""beep"",    ""resume"", ""letter"",
    ""help"",   ""*****"", ""ground"", ""revers"",  ""dispose"", ""print@"", ""himem"",
    ""*****"",  ""line"",  ""proc"",   ""axis"",    ""using"",   ""sec"",    ""else"",
    ""rror"",   ""round"", ""****"",   ""*******"", ""*****"",   ""*****"",  ""pound"",
    ""min"",    ""max"",   ""******"", ""frac"",    ""odd"",     ""***"",    ""heek"",
    ""eval""
};

/* Expanded Basic (VIC20) by Marco van den Heuvel -- Tokens 0xCC - 0xE3 */

static const char *expbas20kwcc[] = {
    ""reset"", ""sound"", ""slow("", ""com"",   ""mem"",    ""stat("", ""key"",   ""off"",
    ""col("",  ""plot("", ""pop("",  ""chol("", ""curol("", ""beep("", ""paus("", ""msav"",
    ""reg("",  ""dpek("", ""pdl"",   ""joy"",   ""dpok"",   ""do"",    ""until"", ""old""
};

/* Data Becker Supergrafik 64 (C64) by Sven Droll -- Tokens 0xD7 - 0xFD */

static const char *supergrakw[] = {
    ""directory"", ""spower"", ""gcomb"",  ""dtaset"", ""merge"",   ""renum"",  ""key"",
    ""trans"",     """",       ""tune"",   ""sound"",  ""volume="", ""filter"", ""sread"",
    ""define"",    ""set"",    ""swait"",  ""smode"",  ""gmode"",   ""gclear"", ""gmove"",
    ""plot"",      ""draw"",   ""fill"",   ""frame"",  ""invers"",  ""text"",   ""circle"",
    ""paddle"",    ""scale="", ""color="", ""scol="",  ""pcol="",   ""gsave"",  ""gload"",
    ""hcopy"",     ""ireturn"", ""if#"",   ""paint"",  ""eval""
};

/* Kipper Basic (C64) by Marco van den Heuvel -- Tokens 0xE1 - 0xF2 */

static const char *kipperkwe1[] = {
    ""ipcfg"", ""dhcp"",      ""ping"",    ""myip"",     ""netmask"", ""gateway"",
    ""dns"",   ""tftp"",      ""tfget"",   ""tfput"",    ""netcat"",  ""tcpconnect"",
    ""poll"",  ""tcplisten"", ""tcpsend"", ""tcpclose"", ""tcpblat"", ""mac""
};

/* Basic on Bails (C64) by Marco van den Heuvel -- Tokens 0xE1 - 0xF0 */

static const char *bobkwe1[] = {
    ""ipcfg"", ""dhcp"",  ""ping"", ""myip"",  ""netmask"", ""gateway"", ""dns"",   ""hook"",
    ""yield"", ""xsend"", ""!"",    ""httpd"", ""type"",    ""status"",  ""flush"", ""mac""
};

/* Eve Basic (C64) by Marco van den Heuvel -- Tokens 0xCC - 0xF9 */

static const char *evekwcc[] = {
    ""else"",     ""page"",    ""paper"",  ""ink"",    ""locate"", ""erase"",    ""graphic"",
    ""scale"",    ""pen"",     ""point"",  ""line"",   ""paint"",  ""write"",    ""draw"",
    ""image"",    ""sprite"",  ""sprpic"", ""sprcol"", ""sprloc"", ""sprmulti"", ""tone"",
    ""envelope"", ""wave"",    ""vol"",    ""filter"", ""dos"",    ""dvc"",      ""dir"",
    ""cat"",      ""record#"", ""swap"",   ""exit"",   ""do"",     ""loop"",     ""while"",
    ""until"",    ""cur"",     ""bin$"",   ""mak$"",   ""input$"", ""fmt$"",     ""infix$"",
    ""instr"",    ""ds$"",     ""ds"",     ""sd""
};

/* The Tool 64 (C64) by Marco van den Heuvel -- Tokens 0xDB - 0xF4 */

static const char *tt64kwdb[] = {
    "" "",       ""sort"",  ""extract"", ""carget"", "" "",    "" "",     ""screen"",
    ""graphic"", ""text"",  ""auto"",    ""find"",   ""dump"", ""error"", ""renu"",
    ""delete"",  ""plot"",  ""point"",   ""draw"",   ""move"", ""color"", ""else"",
    ""display"", ""trace"", ""off"",     ""hcopy"",  ""joy""
};

typedef struct basic_list_s {
    uint8_t version;
    uint8_t num_tokens;
    uint8_t max_token;
    uint16_t load_address;
    uint8_t token_offset;
    uint8_t token_start;
    const char **tokens;
    char *version_select;
    int prefix64;
    int prefixce;
    int prefixfe;
    char *name;
} basic_list_t;

typedef struct sorted_basic_s {
    char *version_select;
    char *name;
} sorted_basic_t;

static basic_list_t basic_list[] = {
   /* version    num  max   load   off start tokens             verselect    64 ce fe name */
    { B_1,        75, 0xCB, 0x0400, 0, 0,    NULL, /* fix */    ""1p"",        0, 0, 0, ""Basic v1.0 (PET)"" },
    { B_2,        76, 0xDD, 0x0801, 0, 0,    NULL, /* fix */    ""2"",         0, 0, 0, ""Basic v2.0 (C64/VIC20/PET)"" },
    { B_SUPEREXP, 18, 0xDD, 0x0401, 0, 0xCC, superexpkwcc,      ""superexp"",  0, 0, 0, ""Basic v2.0 with Super Expander (VIC20)"" },
    { B_TURTLE,   34, 0xED, 0x3701, 0, 0xCC, turtlekwcc,        ""turtle"",    0, 0, 0, ""Basic v2.0 with Turtle Basic v1.0 (VIC20)"" },
    { B_SIMON,   128, 0xCB, 0x0801, 1, 0,    simonskw,          ""simon"",     1, 0, 0, ""Basic v2.0 with Simons' Basic (C64)"" },
    { B_SPEECH,   27, 0xE6, 0x0801, 0, 0xCC, speechkwcc,        ""speech"",    0, 0, 0, ""Basic v2.0 with Speech Basic v2.7 (C64)"" },
    { B_ATBAS,    43, 0xF6, 0x0801, 0, 0xCC, atbasickwcc,       ""a"",         0, 0, 0, ""Basic v2.0 with @Basic (C64)"" },
    { B_4,        19, 0xDE, 0x0401, 0, 0xCC, petkwcc,           ""40"",        0, 0, 0, ""Basic v4.0 (PET/CBM2)"" },
    { B_4E,       28, 0xE7, 0x0801, 0, 0xCC, petkwcc,           ""4e"",        0, 0, 0, ""Basic v2.0 with Basic v4.0 extension (C64)"" },
    { B_35,      126, 0xCB, 0x1001, 0, 0,    NULL, /* fix */    ""3"",         0, 0, 0, ""Basic v3.5 (C16)"" },
    { B_7,        39, 0x26, 0x1c01, 2, 0,    NULL, /* fix */    ""70"",        0, 1, 1, ""Basic v7.0 (C128)"" },
    { B_10,       62, 0x3D, 0x2001, 2, 0,    NULL, /* fix */    ""10"",        0, 1, 1, ""Basic v10.0 (C65/C64DX)"" },
    { B_FC3,      29, 0xE8, 0x0801, 0, 0xCC, fc3kw,             ""f"",         0, 0, 0, ""Basic v2.0 with Final Cartridge III (C64)"" },
    { B_ULTRA,    51, 0xFE, 0x2c01, 0, 0xCC, ultrabasic64kwcc,  ""ultra"",     0, 0, 0, ""Basic v2.0 with Ultrabasic-64 (C64)"" },
    { B_GRAPH,    51, 0xFE, 0x1001, 0, 0xCC, graphicsbasickwcc, ""graph"",     0, 0, 0, ""Basic v2.0 with Graphics Basic (C64)"" },
    { B_WS,       51, 0xFE, 0x0801, 0, 0xCC, wsbasickwcc,       ""bws"",       0, 0, 0, ""Basic v2.0 with WS Basic (C64)"" },
    { B_MIGHTY,   51, 0xFE, 0x3201, 0, 0xCC, mightykwcc,        ""mighty"",    0, 0, 0, ""Basic v2.0 with Mighty Basic (VIC20)"" },
    { B_PEG,      33, 0xEC, 0x0401, 0, 0xCC, pegbasickwcc,      ""pegasus"",   0, 0, 0, ""Basic v2.0 with Pegasus Basic v4.0 (C64)"" },
    { B_X,        33, 0xEC, 0x0801, 0, 0xCC, xbasickwcc,        ""xbasic"",    0, 0, 0, ""Basic v2.0 with Xbasic (C64)"" },
    { B_DRAGO,    13, 0xD8, 0x0801, 0, 0xCC, dragobasickwcc,    ""drago"",     0, 0, 0, ""Basic v2.0 with Drago Basic v2.2 (C64)"" },
    { B_REU,      15, 0xDA, 0x0801, 0, 0xCC, reubasickwcc,      ""reu"",       0, 0, 0, ""Basic v2.0 with REU-Basic (C64)"" },
    { B_BASL,     51, 0xFE, 0x0801, 0, 0xCC, baslkwcc,          ""lightning"", 0, 0, 0, ""Basic v2.0 with Basic Lightning (C64)"" },
    { B_71,       56, 0x39, 0x1c01, 2, 0,    NULL, /* fix */    ""71"",        0, 1, 1, ""Basic v7.0 with Basic v7.1 externsion (C128)"" },
    { B_MAGIC,    50, 0xFD, 0x0801, 0, 0xCC, magickwcc,         ""magic"",     0, 0, 0, ""Basic v2.0 with Magic Basic (C64)"" },
    { B_EASY,     51, 0xFE, 0x3001, 0, 0xCC, easykwcc,          ""easy"",      0, 0, 0, ""Basic v2.0 with Easy Basic (VIC20)"" },
    { B_BLARG,    11, 0xEA, 0x0801, 0, 0xE0, blargkwe0,         ""blarg"",     0, 0, 0, ""Basic v2.0 with Blarg (C64)"" },
    { B_VIC4,     20, 0xDF, 0x1201, 0, 0xCC, vic4kwcc,          ""4v"",        0, 0, 0, ""Basic v2.0 with Basic v4.0 extension (VIC20)"" },
    { B_VIC5,     38, 0xF1, 0x1201, 0, 0xCC, vic5kwcc,          ""5"",         0, 0, 0, ""Basic v2.0 with Basic v5.0 extension (VIC20)"" },
    { B_WSF,      51, 0xFE, 0x0801, 0, 0xCC, wsfbasickwcc,      ""bwsf"",      0, 0, 0, ""Basic v2.0 with WS Basic final (C64)"" },
    { B_GB,       29, 0xE8, 0x0801, 0, 0xCC, gbkwcc,            ""game"",      0, 0, 0, ""Basic v2.0 with Game Basic (C64)"" },
    { B_BSX,      31, 0xEA, 0x0401, 0, 0xCC, bsxkwcc,           ""bsx"",       0, 0, 0, ""Basic v2.0 with Basex (C64)"" },
    { B_SUPERBAS, 36, 0xFE, 0x0801, 0, 0xDB, superbaskwdb,      ""superbas"",  0, 0, 0, ""Basic v2.0 with Super Basic (C64)"" },
    { B_EXPBAS64, 42, 0xF5, 0x0801, 0, 0xCC, expbas64kwcc,      ""exp64"",     0, 0, 0, ""Basic v2.0 with Expanded Basic (C64)"" },
    { B_SXC,      32, 0x1F, 0x0801, 0, 0,    sxckwfe,           ""sxc"",       0, 0, 1, ""Basic v2.0 with Super Expander Chip (C64)"" },
    { B_WARSAW,   36, 0xFE, 0x0801, 0, 0xDB, warsawkwdb,        ""bwarsaw"",   0, 0, 0, ""Basic v2.0 with Warsaw Basic (C64)"" },
    { B_EXPBAS20, 24, 0xE3, 0x0801, 0, 0xCC, expbas20kwcc,      ""exp20"",     0, 0, 0, ""Basic v2.0 with Expanded Basic (VIC20)"" },
    { B_SUPERGRA, 40, 0xFE, 0x0801, 0, 0xD7, supergrakw,        ""supergra"",  0, 0, 0, ""Basic v2.0 with Supergrafik 64 (C64)"" },
    { B_KIPPER,   18, 0xF2, 0x0801, 0, 0xE1, kipperkwe1,        ""bk"",        0, 0, 0, ""Basic v2.0 with Kipper Basic (C64)"" },
    { B_BOB,      16, 0xF0, 0x0801, 0, 0xE1, bobkwe1,           ""bob"",       0, 0, 0, ""Basic v2.0 with Basic on Bails (C64)"" },
    { B_EVE,      46, 0xF9, 0x0801, 0, 0xCC, evekwcc,           ""eve"",       0, 0, 0, ""Basic v2.0 with Eve Basic (C64)"" },
    { B_TT64,     26, 0xF4, 0x5b01, 0, 0xDB, tt64kwdb,          ""tt64"",      0, 0, 0, ""Basic v2.0 with The Tool 64 (C64)"" },
    { B_HANDY,    22, 0xE1, 0x1801, 0, 0xCC, handykwcc,         ""handy"",     0, 0, 0, ""Basic v2.0 with Handy Basic v1.0 (VIC20)"" },
    { B_8,        58, 0x40, 0x7001, 2, 0,    NULL,              ""8"",         0, 0, 1, ""Basic v8 (C128)"" },
    { 0,          0,  0,    0,     0 , 0,    NULL,              NULL,        0, 0, 0, NULL }
};

#define NUM_VERSIONS ((sizeof(basic_list) / sizeof(basic_list[0])) - 1)

/* Limits */

#define NUM_KWCE        11

#define MAX_KWCE        0x0A

#define KW_NONE         0xFE    /* flag unused token */

#define CODE_NONE       -1      /* flag unknown control code */

#define CLARIF_LP       '{'     /* control code left delimiter */
#define CLARIF_RP       '}'     /* control code right delimiter */

#define CLARIF_LP_ST    ""{""     /* control code left delimiter, ""string version"" */
#define CLARIF_RP_ST    ""}""     /* control code right delimiter, ""string version"" */

/* ------------------------------------------------------------------------- */

/* all numeric codes */
static const char *hexcodes[0x100] = {
    ""$00"", ""$01"", ""$02"", ""$03"", ""$04"", ""$05"", ""$06"", ""$07"", ""$08"", ""$09"", ""$0a"", ""$0b"", ""$0c"", ""$0d"", ""$0e"", ""$0f"",
    ""$10"", ""$11"", ""$12"", ""$13"", ""$14"", ""$15"", ""$16"", ""$17"", ""$18"", ""$19"", ""$1a"", ""$1b"", ""$1c"", ""$1d"", ""$1e"", ""$1f"",
    ""$20"", ""$21"", ""$22"", ""$23"", ""$24"", ""$25"", ""$26"", ""$27"", ""$28"", ""$29"", ""$2a"", ""$2b"", ""$2c"", ""$2d"", ""$2e"", ""$2f"",
    ""$30"", ""$31"", ""$32"", ""$33"", ""$34"", ""$35"", ""$36"", ""$37"", ""$38"", ""$39"", ""$3a"", ""$3b"", ""$3c"", ""$3d"", ""$3e"", ""$3f"",
    ""$40"", ""$41"", ""$42"", ""$43"", ""$44"", ""$45"", ""$46"", ""$47"", ""$48"", ""$49"", ""$4a"", ""$4b"", ""$4c"", ""$4d"", ""$4e"", ""$4f"",
    ""$50"", ""$51"", ""$52"", ""$53"", ""$54"", ""$55"", ""$56"", ""$57"", ""$58"", ""$59"", ""$5a"", ""$5b"", ""$5c"", ""$5d"", ""$5e"", ""$5f"",
    ""$60"", ""$61"", ""$62"", ""$63"", ""$64"", ""$65"", ""$66"", ""$67"", ""$68"", ""$69"", ""$6a"", ""$6b"", ""$6c"", ""$6d"", ""$6e"", ""$6f"",
    ""$70"", ""$71"", ""$72"", ""$73"", ""$74"", ""$75"", ""$76"", ""$77"", ""$78"", ""$79"", ""$7a"", ""$7b"", ""$7c"", ""$7d"", ""$7e"", ""$7f"",
    ""$80"", ""$81"", ""$82"", ""$83"", ""$84"", ""$85"", ""$86"", ""$87"", ""$88"", ""$89"", ""$8a"", ""$8b"", ""$8c"", ""$8d"", ""$8e"", ""$8f"",
    ""$90"", ""$91"", ""$92"", ""$93"", ""$94"", ""$95"", ""$96"", ""$97"", ""$98"", ""$99"", ""$9a"", ""$9b"", ""$9c"", ""$9d"", ""$9e"", ""$9f"",
    ""$a0"", ""$a1"", ""$a2"", ""$a3"", ""$a4"", ""$a5"", ""$a6"", ""$a7"", ""$a8"", ""$a9"", ""$aa"", ""$ab"", ""$ac"", ""$ad"", ""$ae"", ""$af"",
    ""$b0"", ""$b1"", ""$b2"", ""$b3"", ""$b4"", ""$b5"", ""$b6"", ""$b7"", ""$b8"", ""$b9"", ""$ba"", ""$bb"", ""$bc"", ""$bd"", ""$be"", ""$bf"",
    ""$c0"", ""$c1"", ""$c2"", ""$c3"", ""$c4"", ""$c5"", ""$c6"", ""$c7"", ""$c8"", ""$c9"", ""$ca"", ""$cb"", ""$cc"", ""$cd"", ""$ce"", ""$cf"",
    ""$d0"", ""$d1"", ""$d2"", ""$d3"", ""$d4"", ""$d5"", ""$d6"", ""$d7"", ""$d8"", ""$d9"", ""$da"", ""$db"", ""$dc"", ""$dd"", ""$de"", ""$df"",
    ""$e0"", ""$e1"", ""$e2"", ""$e3"", ""$e4"", ""$e5"", ""$e6"", ""$e7"", ""$e8"", ""$e9"", ""$ea"", ""$eb"", ""$ec"", ""$ed"", ""$ee"", ""$ef"",
    ""$f0"", ""$f1"", ""$f2"", ""$f3"", ""$f4"", ""$f5"", ""$f6"", ""$f7"", ""$f8"", ""$f9"", ""$fa"", ""$fb"", ""$fc"", ""$fd"", ""$fe"", ""$ff"",
};

/* ------------------------------------------------------------------------- */

#if 0
/* keys for charcodes 0x00 - 0x1f */
static const char *ctrlkeys[0x20] = {
    """",       ""CTRL-A"", ""CTRL-B"", ""CTRL-C"", ""CTRL-D"", ""CTRL-E"", ""CTRL-F"", ""CTRL-G"",
    ""CTRL-H"", ""CTRL-I"", ""CTRL-J"", ""CTRL-K"", ""CTRL-L"", ""CTRL-M"", ""CTRL-N"", ""CTRL-O"",
    ""CTRL-P"", ""CTRL-Q"", ""CTRL-R"", ""CTRL-S"", ""CTRL-T"", ""CTRL-U"", ""CTRL-V"", ""CTRL-W"",
    ""CTRL-X"", ""CTRL-Y"", ""CTRL-Z"", """",       ""CTRL-3"", """",       ""CTRL-6"", ""CTRL-7""
};
#endif

/* keys for charcodes 0xa0-0xe0 */
static const char *cbmkeys[0x40] = {
    ""SHIFT-SPACE"", ""CBM-K"",       ""CBM-I"",   ""CBM-T"",   ""CBM-@"",   ""CBM-G"",   ""CBM-+"",   ""CBM-M"",
    ""CBM-POUND"",   ""SHIFT-POUND"", ""CBM-N"",   ""CBM-Q"",   ""CBM-D"",   ""CBM-Z"",   ""CBM-S"",   ""CBM-P"",
    ""CBM-A"",       ""CBM-E"",       ""CBM-R"",   ""CBM-W"",   ""CBM-H"",   ""CBM-J"",   ""CBM-L"",   ""CBM-Y"",
    ""CBM-U"",       ""CBM-O"",       ""SHIFT-@"", ""CBM-F"",   ""CBM-C"",   ""CBM-X"",   ""CBM-V"",   ""CBM-B"",
    ""SHIFT-*"",     ""SHIFT-A"",     ""SHIFT-B"", ""SHIFT-C"", ""SHIFT-D"", ""SHIFT-E"", ""SHIFT-F"", ""SHIFT-G"",
    ""SHIFT-H"",     ""SHIFT-I"",     ""SHIFT-J"", ""SHIFT-K"", ""SHIFT-L"", ""SHIFT-M"", ""SHIFT-N"", ""SHIFT-O"",
    ""SHIFT-P"",     ""SHIFT-Q"",     ""SHIFT-R"", ""SHIFT-S"", ""SHIFT-T"", ""SHIFT-U"", ""SHIFT-V"", ""SHIFT-W"",
    ""SHIFT-X"",     ""SHIFT-Y"",     ""SHIFT-Z"", ""SHIFT-+"", ""CBM--"",   ""SHIFT--"", ""SHIFT-^"", ""CBM-*""
};

/* alternative keys for charcodes 0xa0-0xe0 */
static const char *a_cbmkeys[0x40] = {
    """", """", """", """", """", """", """",      """",
    """", """", """", """", """", """", """",      """",
    """", """", """", """", """", """", """",      """",
    """", """", """", """", """", """", """",      """",
    """", """", """", """", """", """", """",      """",
    """", """", """", """", """", """", """",      """",
    """", """", """", """", """", """", """",      """",
    """", """", """", """", """", """", ""CBM-^"", """"
};

/* ------------------------------------------------------------------------- */
/*
    the following are various tables containing control codes as printed in
    magazines and used by other programs.

    note that the codes should get reproduced *exactly* as they appear in the
    other application. if needed, new tables should be added.

FIXME: These are used by MikroBITTI:

These are the valid special substitions for TOK64:

{clear}             {home}              {right}         {left}              {up}                {down}
{reverse on}        {reverse off}       {black}         {white}             {red}               {cyan}
{purple}            {green}             {blue}          {yellow}            {orange}            {brown}
{pink}              {dark gray}         {gray}          {light green}       {light blue}        {light gray}
{f1}                {f2}                {f3}            {f4}                {f5}                {f6}
{f7}                {f8}                {space}         {pi}

codes originally used by 64er/Checksummer v3:

{DOWN}{UP}{CLR}{INST}{HOME}{DEL}{RIGHT}{LEFT}{SPACE}
{BLACK}{WHITE}{RED}{CYAN}{PURPLE}{GREEN}{BLUE}{YELLOW}{RVSON}{RVSOFF}
{ORANGE}{BROWN}{LIG.RED}{GREY 1}{GREY 2}{LIG.GREEN}{LIG.BLUE}{GREY 3}
{F1}{F2}{F3}{F4}{F5}{F6}{F7}{F8}{RETURN}

*/

/* 0x00 - 0x1f (petcat) */
static const char *ctrl1[0x20] = {
    """",              ""CTRL-A"",         ""CTRL-B"",     ""stop"",   ""CTRL-D"", ""wht"",    ""CTRL-F"",     ""CTRL-G"",
    ""dish"",          ""ensh"",           ""\n"",         ""CTRL-K"", ""CTRL-L"", ""\n"",     ""swlc"",       ""CTRL-O"",
    ""CTRL-P"",        ""down"",           ""rvon"",       ""home"",   ""del"",    ""CTRL-U"", ""CTRL-V"",     ""CTRL-W"",
    ""CTRL-X"",        ""CTRL-Y"",         ""CTRL-Z"",     ""esc"",    ""red"",    ""rght"",   ""grn"",        ""blu""
};

/* 0x00 - 0x1f (FIXME: MikroBITTI) */
static const char *a_ctrl1[0x20] = {
    """",              """",               """",           """",       """",       ""WHT"",    """",           """",
    ""up/lo lock on"", ""up/lo lock off"", """",           """",       """",       ""return"", ""lower case"", """",
    """",              ""DOWN"",           ""RVS ON"",     ""HOME"",   ""delete"", """",       """",           """",
    """",              """",               """",           ""esc"",    ""RED"",    ""RIGHT"",  ""GRN"",        ""BLU""
};

/* 0x00 - 0x1f */
static const char *b_ctrl1[0x20] = {
    """",              """",               """",           """",       """",       """",       """",           """",
    """",              """",               """",           """",       """",       """",       """",           """",
    """",              """",               ""REVERSE ON"", """",       """",       """",       """",           """",
    """",              """",               """",           """",       """",       """",       """",           """"
};

/* 0x00 - 0x1f (tok64) */
static const char *c_ctrl1[0x20] = {
    """",              """",               """",           """",       """",       ""white"",  """",           """",
    """",              """",               """",           """",       """",       """",       """",           """",
    """",              ""down"",           ""reverse on"", ""home"",   """",       """",       """",           """",
    """",              """",               """",           """",       ""red"",    ""right"",  ""green"",      ""blue""
};

/* 0x00 - 0x1f (64er/checksummer v3) */
static const char *d_ctrl1[0x20] = {
    """",              """",               """",           """",       """",       ""WHITE"",  """",           """",
    """",              """",               """",           """",       """",       ""RETURN"", """",           """",
    """",              ""DOWN"",           ""RVSON"",      ""HOME"",   ""DEL"",    """",       """",           """",
    """",              """",               """",           """",       ""RED"",    ""RIGHT"",  ""GREEN"",      ""BLUE""
};

/* 0x00 - 0x1f Basic v3.5 (C16/Plus4) (extra {flon}{flof}{help}{dblu}{pink}{blgn}{lblu}{blu}{lgrn})*/
static const char *e_ctrl1[0x20] = {
    """",              ""CTRL-A"",         ""CTRL-B"",     ""stop"",   ""CTRL-D"", ""wht"",    ""CTRL-F"",     ""CTRL-G"",
    ""dish"",          ""ensh"",           ""\n"",         ""CTRL-K"", ""CTRL-L"", ""\n"",     ""swlc"",       ""CTRL-O"",
    ""CTRL-P"",        ""down"",           ""rvon"",       ""home"",   ""del"",    ""CTRL-U"", ""CTRL-V"",     ""CTRL-W"",
    ""CTRL-X"",        ""CTRL-Y"",         ""CTRL-Z"",     ""esc"",    ""red"",    ""rght"",   ""grn"",        ""dblu""
};
/* ------------------------------------------------------------------------- */

/* 0x20 - 0x3f (petcat, tok64) */
static const char *cbmchars[0x20] = {
    ""space"", """", """", """", """", """", """", """",
    """",      """", """", """", """", """", """", """",
    """",      """", """", """", """", """", """", """",
    """",      """", """", """", """", """", """", """"
};

/* 0x20 - 0x3f (64er/Checksummer v3) */
static const char *a_cbmchars[0x20] = {
    ""SPACE"", """", """", """", """", """", """", """",
    """",      """", """", """", """", """", """", """",
    """",      """", """", """", """", """", """", """",
    """",      """", """", """", """", """", """", """"
};

/* ------------------------------------------------------------------------- */

/* 0x80 - 0x9f (petcat) */
static const char *ctrl2[0x20] = {
    """",     ""orng"",         """",            """",           """",       ""f1"",           ""f3"",         ""f5"",
    ""f7"",   ""f2"",           ""f4"",          ""f6"",         ""f8"",     ""sret"",         ""swuc"",       """",
    ""blk"",  ""up"",           ""rvof"",        ""clr"",        ""inst"",   ""brn"",          ""lred"",       ""gry1"",
    ""gry2"", ""lgrn"",         ""lblu"",        ""gry3"",       ""pur"",    ""left"",         ""yel"",        ""cyn""
};

/* 0x80 - 0x9f (FIXME: MikroBITTI) */
static const char *a_ctrl2[0x20] = {
    """",      ""orange"",      """",            """",           """",       ""F1"",           ""F3"",         ""F5"",
    ""F7"",    ""F2"",          ""F4"",          ""F6"",         ""F8"",     ""shift return"", ""upper case"", """",
    ""BLK"",   ""UP"",          ""RVS OFF"",     ""CLR"",        ""insert"", ""BROWN"",        ""LT.RED"",     ""GREY1"",
    ""GREY2"", ""lt green"",    ""LT.BLUE"",     ""GREY3"",      ""PUR"",    ""LEFT"",         ""YEL"",        ""cyn""
};

/* 0x80 - 0x9f (tok64) */
static const char *b_ctrl2[0x20] = {
    """",      ""orange"",      """",            """",           """",        ""f1"",          ""f3"",         ""r5"",
    ""f7"",    ""f2"",          ""f4"",          ""f6"",         ""f8"",      """",            """",           """",
    ""black"", ""up"",          ""reverse off"", ""clear"",      """",        ""brown"",       ""pink"",       ""dark gray"",
    ""gray"",  ""light green"", ""light blue"",  ""light gray"", ""purple"",  ""left"",        ""yellow"",     ""cyan"",
};
/* 0x80 - 0x9f (64er/Checksummer v3) */
static const char *c_ctrl2[0x20] = {
    """",      ""ORANGE"",      """",            """",           """",        ""F1"",          ""F3"",         ""F5"",
    ""F7"",    ""F2"",          ""F4"",          ""F6"",         ""F8"",      """",            """",           """",
    ""BLACK"", ""UP"",          ""RVSOFF"",      ""CLR"",        ""INST"",    ""BROWN"",       ""LIG.RED"",    ""GREY 1"",
    ""GREY 2"",""LIG.GREEN"",   ""LIG.BLUE"",    ""GREY 3"",     ""PURPLE"",  ""LEFT"",        ""YELLOW"",     ""CYAN"",
};

/* 0x80 - 0x9f Basic v3.5 (C16/Plus4) (extra {flon}{flof}{help}{dblu}{pink}{blgn}{lblu}{blu}{lgrn})*/
static const char *d_ctrl2[0x20] = {
    """",     ""orng"",         ""flon"",         """",           ""flof"",    ""f1"",           ""f3"",         ""f5"",
    ""f7"",   ""f2"",           ""f4"",          ""f6"",         ""help"",   ""sret"",         ""swuc"",       """",
    ""blk"",  ""up"",           ""rvof"",        ""clr"",        ""inst"",   ""brn"",          ""lred"",       ""pink"",
    ""blgn"", ""lblu"",         ""blu"",         ""lgrn"",       ""pur"",    ""left"",         ""yel"",        ""cyn""
};

/* ------------------------------------------------------------------------- */

/*
 * Two BASIC tokens which need some special care
 */
#define TOKEN_REM  (0x8F - 0x80)
#define TOKEN_DATA (0x83 - 0x80)

/*
 * CBM Basic Keywords
 */

static const char *keyword[] = {
    /* Common Keywords, 80 - cb */
    ""end"",    ""for"",    ""next"", ""data"", ""input#"",  ""input"",  ""dim"",    ""read"",
    ""let"",    ""goto"",   ""run"",  ""if"",   ""restore"", ""gosub"",  ""return"", ""rem"",
    ""stop"",   ""on"",     ""wait"", ""load"", ""save"",    ""verify"", ""def"",    ""poke"",
    ""print#"", ""print"",  ""cont"", ""list"", ""clr"",     ""cmd"",    ""sys"",    ""open"",
    ""close"",  ""get"",    ""new"",  ""tab("", ""to"",      ""fn"",     ""spc("",   ""then"",
    ""not"",    ""step"",   ""+"",    ""-"",    ""*"",       ""/"",      ""^"",      ""and"",
    ""or"",     "">"",      ""="",    ""<"",    ""sgn"",     ""int"",    ""abs"",    ""usr"",
    ""fre"",    ""pos"",    ""sqr"",  ""rnd"",  ""log"",     ""exp"",    ""cos"",    ""sin"",
    ""tan"",    ""atn"",    ""peek"", ""len"",  ""str$"",    ""val"",    ""asc"",    ""chr$"",
    ""left$"",  ""right$"", ""mid$"", ""go"",
    /*
     * The following codes (0xcc- 0xfe) are for 3.5, 7.0, and 10.0 only.
     * On 10.0 gshape, sshape, and draw are replaced with paste, cut, and line
     * respectively. */
    ""rgr"", ""rclr"", ""rlum"" /* 0xce -- v7 prefix */, ""joy"",

    ""rdot"",     ""dec"",    ""hex$"",    ""err$"",    ""instr"",  ""else"",   ""resume"",    ""trap"",
    ""tron"",     ""troff"",  ""sound"",   ""vol"",     ""auto"",   ""pudef"",  ""graphic"",   ""paint"",
    ""char"",     ""box"",    ""circle"",  ""gshape"",  ""sshape"", ""draw"",   ""locate"",    ""color"",
    ""scnclr"",   ""scale"",  ""help"",    ""do"",      ""loop"",   ""exit"",   ""directory"", ""dsave"",
    ""dload"",    ""header"", ""scratch"", ""collect"", ""copy"",   ""rename"", ""backup"",    ""delete"",
    ""renumber"", ""key"",    ""monitor"", ""using"",   ""until"",  ""while"",

    /* 0xfe -- prefix */ """", ""~"" /* '~' is ASCII for 'pi' */
};


/*
 * 7.0, 7.1 and 10.0 only.
 * On 10.0 stash, fetch, and swap are replaced with dma.
 */

static const char *kwce[] = {
    """",    """",        ""pot"",     ""bump"", ""pen"", ""rsppos"", ""rsprite"", ""rspcolor"",
    ""xor"", ""rwindow"", ""pointer""
};

static const char *kwce10[] = {
    """",    """",        ""pot"",     ""bump"", ""lpen"", ""rsppos"", ""rsprite"", ""rspcolor"",
    ""xor"", ""rwindow"", ""pointer""
};

static const char *kwfe[] = {
    """",         """",      ""bank"",     ""filter"", ""play"",    ""tempo"",  ""movspr"", ""sprite"",
    ""sprcolor"", ""rreg"",  ""envelope"", ""sleep"",  ""catalog"", ""dopen"",  ""append"", ""dclose"",
    ""bsave"",    ""bload"", ""record"",   ""concat"", ""dverify"", ""dclear"", ""sprsav"", ""collision"",
    ""begin"",    ""bend"",  ""window"",   ""boot"",   ""width"",   ""sprdef"", ""quit"",   ""stash"",
    """",         ""fetch"", """",         ""swap"",   ""off"",     ""fast"",   ""slow"",

    /* Basic 10.0 only (fe27 - fe3d) */
    ""type"",    ""bverify"", ""ectory"",     ""erase"", ""find"",       ""change"",  ""set"",       ""screen"",
    ""polygon"", ""ellipse"", ""viewport"",   ""gcopy"", ""pen"",        ""palette"", ""dmode"",     ""dpat"",
    ""pic"",     ""genlock"", ""foreground"", """",      ""background"", ""border"",  ""highlight""
};


/* Basic 7.1 extension */

static const char *kwfe71[] = {
    """",         """",      ""bank"",     ""filter"", ""play"",    ""tempo"",  ""movspr"", ""sprite"",
    ""sprcolor"", ""rreg"",  ""envelope"", ""sleep"",  ""catalog"", ""dopen"",  ""append"", ""dclose"",
    ""bsave"",    ""bload"", ""record"",   ""concat"", ""dverify"", ""dclear"", ""sprsav"", ""collision"",
    ""begin"",    ""bend"",  ""window"",   ""boot"",   ""width"",   ""sprdef"", ""quit"",   ""stash"",
    """",         ""fetch"", """",         ""swap"",   ""off"",     ""fast"",   ""slow"",

    /* Basic 7.1 extension only (fe27 - fe37) */
    ""cwind"", ""sscrn"", ""lscrn"", ""hide"",  ""show"", ""sfont"", ""lfont"", ""view"",
    ""fcopy"", ""esave"", ""send"",  ""check"", ""esc"",  ""old"",   ""find"",  ""dump"",
    ""merge""
};


/* Basic 8 extension */

static const char *kwfe8[] = {
    """",         """",      ""bank"",     ""filter"", ""play"",    ""tempo"",  ""movspr"", ""sprite"",
    ""sprcolor"", ""rreg"",  ""envelope"", ""sleep"",  ""catalog"", ""dopen"",  ""append"", ""dclose"",
    ""bsave"",    ""bload"", ""record"",   ""concat"", ""dverify"", ""dclear"", ""sprsav"", ""collision"",
    ""begin"",    ""bend"",  ""window"",   ""boot"",   ""width"",   ""sprdef"", ""quit"",   ""stash"",
    """",         ""fetch"", """",         ""swap"",   ""off"",     ""fast"",   ""slow"",

    /* Basic 7.1 extension only (fe27 - fe37) */
    ""cwind"", 
    ""sscrn"", 
    ""lscrn"", 
    ""hide"",  
    ""show"", 
    ""sfont"", 
    ""lfont"", 
    ""view"",
    ""fcopy"", 
    ""esave"", 
    ""send"",  
    ""check"", 
    ""esc"",  
    ""old"",   
    ""find"",  
    ""dump"",
    ""merge"",
    ""TEXT"",  /* 0x38 */
    """",
    ""walrus"" /* 0x3a */
};

/* ------------------------------------------------------------------------- */

static void usage(char *progname);
static void petcat_version(void);
static int parse_version(char *str);
static void list_keywords(int version);
static void pet_2_asc (int version, int ctrls);
static void asc_2_pet (int version, int ctrls);
static void _p_toascii(int c, int version, int ctrls, int quote);
static int p_expand(int version, int addr, int ctrls);
static void p_tokenize(int version, unsigned int addr, int ctrls);
static unsigned char sstrcmp(unsigned char *line, const char **wordlist, int token, int maxitems);
static int sstrcmp_codes(unsigned char *line, const char **wordlist, int token, int maxitems);

/* ------------------------------------------------------------------------- */

static FILE *source, *dest;
static unsigned int kwlen = 0;
static int codesnocase = 0; /* flag, =1 if controlcodes should be interpreted case insensitive */
static int quotedcodes = 0; /* flag, =1 if non alphanumeric characters inside quotes should always be converted to controlcodes */
static int dec = 0;         /* flag, =1 if output control codes in decimal */
static int verbose = 0;     /* flag, =1 for verbose output */

static const unsigned char MagicHeaderP00[8] = ""C64File\0"";

/* ------------------------------------------------------------------------- */

int main(int argc, char **argv)
{
    char *progname, *outfilename = NULL;
    int c = 0;

    unsigned long offset = 0;
    int wr_mode = 0, version = B_7;         /* best defaults */
    unsigned int load_addr = 0;
    int ctrls = -1, hdr = -1, show_words = 0;
    int fil = 0, outf = 0, overwrt = 0, textmode = 0;
    int flg = 0;                            /* files on stdin */

    /* Parse arguments */
    progname = argv[0];
    while (--argc && ((*++argv)[0] == '-')) {
        if (!strcmp(argv[0], ""--"")) {
            --argc;
            ++argv;
            break;
        }
        if (!strcmp(argv[0], ""-v"")) {
            verbose = 1;
            continue;
        }

        if (!strcmp(argv[0], ""-l"")) {           /* load address */
            if (argc > 1 && sscanf(argv[1], ""%x"", &load_addr) == 1) {
                --argc; ++argv;
                continue;
            }
            /* Fall to error */
        }

        if (!strcmp(argv[0], ""-ic"")) {
            codesnocase = 1;
            continue;
        }

        if (!strcmp(argv[0], ""-qc"")) {
            quotedcodes = 1;
            continue;
        }

        if (!strcmp(argv[0], ""-c"")) {
            ctrls = 1;
            continue;
        } else {
            if (!strcmp(argv[0], ""-nc"")) {
                ctrls = 0;
                continue;
            }
        }

        if (!strcmp(argv[0], ""-d"")) {
            dec = 1;
            continue;
        }

        if (!strcmp(argv[0], ""-h"")) {
            hdr = 1;
            continue;
        } else if (!strcmp(argv[0], ""-nh"")) {
            hdr = 0;
            continue;
        } else if (!strcmp(argv[0], ""-f"")) {      /* force overwrite */
            ++overwrt;
            continue;
        } else if (!strcmp(argv[0], ""-o"")) {
            if (argc > 1) {
                outfilename = argv[1];
                ++outf;
                --argc; ++argv;
                continue;
            }
            fprintf (stderr, ""\nOutput filename missing\n"");
            /* Fall to error */
        }

        /* reading offset */
        if (!strcmp(argv[0], ""-skip"") || !strcmp(argv[0], ""-offset"")) {
            if (argc > 1 && sscanf(argv[1], ""%lx"", &offset) == 1) {
                --argc; ++argv;
                continue;
            }
            /* Fall to error */
        } else if (!strcmp(argv[0], ""-text"")) {   /* force text mode */
            ++textmode;
            continue;
        } else if (!strcmp(argv[0], ""-help"") || !strncmp(argv[0], ""-?"", 2)) {  /* version ID */
            /* Fall to error for Usage */

        } else if (strcmp(argv[0], ""-version"") == 0) {
            petcat_version();
            return EXIT_SUCCESS;
            /* Basic version */
        } else if (!strncmp(argv[0], ""-w"", 2) && !wr_mode) {
            version = parse_version((strlen(argv[0]) > 2 ? &argv[0][2] : NULL));
            ++wr_mode;
            continue;
        } else if (!strncmp(argv[0], ""-k"", 2) && !wr_mode) {
            version = parse_version((strlen(argv[0]) > 2 ? &argv[0][2] : NULL));
            ++show_words;
            continue;
        } else if ((version = parse_version(&argv[0][1])) >= 0) {
            continue;
        }

        usage(progname);
        exit(1);
    }

/******************************************************************************
 * Check parameters
 */

    if (argc) {
        fil++;
    }

    if (hdr == -1) {
        hdr = outf ? 0 : 1;
    }

    if (version == B_10) {
        keyword[0x63] = ""paste"";
        keyword[0x64] = ""cut"";
        keyword[0x65] = ""line"";
        keyword[0x6e] = ""dir"";
        kwfe[0x1f] = ""dma"";
        kwfe[0x21] = ""dma"";
        kwfe[0x23] = ""dma"";
    }

    if (show_words) {
        list_keywords(version);
        return (0);
    }

    if (ctrls < 0) {
        ctrls = (textmode ? 0 : 1);     /*default ON for prgs, OFF for text */
    }

#ifdef ARCHDEP_OS_WINDOWS
    /* HACK: when outputting a prg to stdout, switch stdout to binary mode, 
       else redirecting the binary output to a file will result in a broken 
       file due to translation of the line endings. */
    if (!outf && !textmode) {
        _setmode(STDOUT_FILENO, _O_BINARY);
    }
#endif

    if (!load_addr) {
        load_addr = basic_list[version - 1].load_address;
    }

    if (verbose) {
        if (wr_mode) {
            if (!textmode) {
                fprintf(stderr, ""\nLoad address %04x\n"", load_addr);
                if ((load_addr & 255) != 1) {
                    fprintf (stderr, ""Warning: odd load address (are you sure?)\n"");
                }
            }
            fprintf(stderr, ""Control code set: %s\n\n"", (ctrls ? ""enabled"" : ""disabled""));
        }
    }

    /*
     * Loop all files
     */

    do {
        int plen = 0;
        flg = 0;        /* stdin loop flag */


        /*
         * Try to figure out whether input file is in P00 format or not.
         * If the header is found, the real filaname is feched and any other
         * offset specified is overruled.
         * This is particularly difficult on <stdin>, as only _one_ character
         * of pushback is guaranteed on all cases. So, the lost bytes ""C64File""
         * are recreated from the magic header while printing the (text) file.
         */

        if (!fil) {
            const unsigned char *p;

            source = stdin;

            for (plen = 0, p = MagicHeaderP00; plen < 8 && (c = getc(source)) != EOF && (unsigned)c == *p; ++plen, ++p) {}

            if (plen == 8) {
                /* skip the rest of header */
                for (plen = 18; plen > 0 && getc(source) != EOF; --plen) {}
            } else {
                /*printf(""P00 failed at location %d.\n"", plen);*/
                ungetc(c, source);
            }
        } else {
            if ((source = fopen(argv[0], ""rb"")) == NULL) {
                fprintf(stderr, ""\n%s: Can't open file %s\n"", progname, argv[0]);
                exit(1);
            }
        }


        if (!outf) {
            dest = stdout;
        } else {
            if ((dest = fopen(outfilename, ""wb"")) == NULL) {
                fprintf(stderr, ""\n%s: Can't open output file %s\n"", progname, outfilename);
                exit(1);
            }
        }


        if (wr_mode) {
            if (textmode) {
                asc_2_pet(version, ctrls);
            } else {
                p_tokenize(version, load_addr, ctrls);
            }
        } else {
            if (hdr) { /* name as comment when using petcat name.prg > name.txt */
                fprintf(dest, ""\n\n;%s "", (fil ? argv[0] : ""<stdin>""));
            }

            /*
             * Use TEXT mode if the offset doesn't equal BASIC load addresses
             * and the first bytes to be read do not contain load address.
             * Explicitly selected textmode overrules these conditions.
             */

            if (textmode || ((offset & 255) != 1 && ((c = getc(source)) != EOF && ungetc(c, source) != EOF && c && c != 1))) {
                /* Print the bytes lost in header check */
                if (plen > 0 && plen < 8) {
                    for (c = 0; c < plen; ++c) {
                        fputc (MagicHeaderP00[(int)c], dest);
                    }
                }

                pet_2_asc(version, ctrls);
            } else {
                load_addr = (getc(source) & 0xff);
                load_addr |= (unsigned int)(getc(source) & 0xff) << 8;
                if (hdr) {
                    fprintf(dest, ""==%04x==\n"", load_addr);
                }

                if (p_expand(version, (int)load_addr, ctrls)) {
                    fprintf(dest, ""\n;*** Machine language part skipped. ***\n"");
                } else {   /* End of BASIC on stdin. Is there more ? */
                    if (!fil && (c = getc(source)) != EOF && ungetc(c, source) != EOF && c) {
                        ++flg;
                        ++hdr;
                    }
                }
            }

            if (hdr) {
                fputc('\n', dest);
            }
        }


        if (fil) {
            fclose(source);
        }
        if (outf) {
            fclose(dest);
        }
    } while (flg || (fil && --argc && ++argv));           /* next file */
    return(0);
}

/* ------------------------------------------------------------------------- */

static int compare_elements(const void *op1, const void *op2)
{
    const sorted_basic_t *p1 = (const sorted_basic_t *)op1;
    const sorted_basic_t *p2 = (const sorted_basic_t *)op2;

    return strcmp(p1->version_select, p2->version_select);
}

/* XXX: the multiple fprintf() statements are used to break up the string that
 *      is longer than C90 is required to support (509 chars). very pedantic,
 *      I know, but better safe than sorry. (BW)
 */
void usage(char *progname)
{
    unsigned int i = 0;
    sorted_basic_t *sorted_option_elements;

    sorted_option_elements = malloc(NUM_VERSIONS * sizeof(*sorted_option_elements));

    /* fill in the array with the information needed */
    while (basic_list[i].name) {
        sorted_option_elements[i].version_select = basic_list[i].version_select;
        sorted_option_elements[i].name = basic_list[i].name;
        ++i;
    }

    qsort(sorted_option_elements, NUM_VERSIONS, sizeof(*sorted_option_elements),
            compare_elements);

#ifdef USE_SVN_REVISION
    fprintf(stdout,
            ""\n\t%s (VICE %s SVN r%d) -- Basic list/crunch utility.\n"",
            progname, VERSION, VICE_SVN_REV_NUMBER);
#else
    fprintf(stdout,
            ""\n\t%s (VICE %s) -- Basic list/crunch utility.\n"",
            progname, VERSION);
#endif

    fprintf(stdout,
            ""\nUsage: %7s  [-c | -nc]  [-h | -nh]  [-text | -<version> | -w<version>]""
            ""\n\t\t[-skip <bytes>] [-l <hex>]  [--] [file list]\n\t\t[-k[<version>]]\n"",
            progname);

    fprintf(stdout, ""\n""
            ""   -help -?\tOutput this help screen here\n""
            ""   -version\tprint petcat version\n""
            ""   -v\t\tverbose output\n""
            ""   -c\t\tcontrols (interpret also control codes) <default if textmode>\n""
            ""   -nc\t\tno controls (suppress control codes in printout)\n""
            ""   \t\t<default if non-textmode>\n""
            ""   -ic\t\tinterpret control codes case-insensitive\n""
            ""   -qc\t\tconvert all non alphanumeric characters inside quotes into controlcodes\n""
            ""   -d\t\toutput raw codes in decimal\n""
            ""   -h\t\twrite header <default if output is stdout>\n"");
    fprintf(stdout,
            ""   -nh\t\tno header <default if output is a file>\n""
            ""   -skip <n>\tSkip <n> bytes in the beginning of input file. Ignored on P00.\n""
            ""   -text\tForce text mode\n""
            ""   -<version>\tuse keywords for <version> instead of the v7.0 ones\n""
            ""   -w<version>\ttokenize using keywords on specified Basic version.\n""
            ""   -k<version>\tlist all keywords for the specified Basic version\n""
            ""   -k\t\tlist all Basic versions available.\n""
            ""   -l\t\tSpecify load address for program (in hex, no leading chars!).\n"");
    fprintf(stdout,
            ""   -o <name>\tSpecify the output file name\n""
            ""   -f\t\tForce overwritten the output file\n""
            ""   \t\tThe default depends on the BASIC version.\n"");

    fprintf(stdout, ""\n\tVersions:\n"");
    for (i = 0; i < NUM_VERSIONS; ++i) {
        fprintf(stdout, ""\t%s\t%s\n"", sorted_option_elements[i].version_select, sorted_option_elements[i].name);
    }
    free(sorted_option_elements);

    fprintf(stdout, ""\n"");

    fprintf(stdout, ""\tUsage examples:\n""
            ""\tpetcat -2 -o outputfile.txt -- inputfile.prg\n""
            ""\t\tDe-tokenize, convert inputfile.prg to a text file\n""
            ""\t\tin outputfile.txt, using BASIC V2 only\n""
            ""\tpetcat -wsimon -o outputfile.prg -- inputfile.txt\n""
            ""\t\tTokenize, convert inputfile.txt to a PRG file\n""
            ""\t\tin outputfile.prg, using Simons' BASIC\n"");
    fprintf(stdout,
            ""\tpetcat -text -o outputfile.txt -- inputfile.seq\n""
            ""\t\tConvert inputfile.seq to a Ascii text file\n""
            ""\t\tin outputfile.txt.\n""
            ""\tpetcat -text -w2 -o outputfile.seq -- inputfile.txt\n""
            ""\t\tConvert inputfile.txt to a Petscii text SEQ file\n""
            ""\t\tin outputfile.seq.\n"");
}


/** \brief  Display version information
 */
static void petcat_version(void)
{
#ifdef USE_SVN_REVISION
    printf(""petcat (VICE %s SVN r%d)\n"", VERSION, VICE_SVN_REV_NUMBER);
#else
    printf(""petcat (VICE %s)\n"", VERSION);
#endif
}


/* ------------------------------------------------------------------------- */
/* Parse given version name and return its code, or -1 if not recognized. */

static int parse_version(char *str)
{
    int i;

    if (str == NULL || !*str) {
        return 0;
    }

    for (i = 0; basic_list[i].version_select; ++i) {
        if (!strncasecmp(str, basic_list[i].version_select, strlen(basic_list[i].version_select))) {
            return i + 1;
        }
    }

    fprintf(stderr, ""\nUnimplemented version '%s'\n"", str);

    return -1;
}

static void list_keywords(int version)
{
    unsigned int n, max;

    if (version <= 0 || (unsigned int)version > NUM_VERSIONS) {
#ifdef USE_SVN_REVISION
        printf(""\n  The following versions are supported on petcat""
               "" (VICE %s SVN r%d)\n\n"",
                VERSION, VICE_SVN_REV_NUMBER);
#else
        printf(""\n  The following versions are supported on petcat""
               "" (VICE %s)\n\n"",
                VERSION);
#endif

        for (n = 0; basic_list[n].name; n++) {
            printf(""\t%s\n"", basic_list[n].name);
        }
        printf(""\n"");
        return;
    }

    printf(""\n  Available Keywords on %s\n\n"", basic_list[version - 1].name);

    if (version == B_1) {
        max = basic_list[B_1 - 1].num_tokens;
    } else if (version == B_35 || version == B_7 || version == B_71 || version == B_8 || version == B_10) {
        max = basic_list[B_35 - 1].num_tokens;
    } else {
        max = basic_list[B_2 - 1].num_tokens;
    }

    for (n = 0; n < max; n++) {
        if (version == B_35 || n != 0x4e) {      /* Skip prefix marker */
            printf(""%s\t"", keyword[n] /*, n | 0x80*/);
        }
    }
    printf(""%s\n"", keyword[127]);


    if (version == B_7 || version == B_71 || version == B_8 || version == B_10 || version == B_SXC) {
        if (version == B_SXC) {
            for (n = basic_list[version - 1].token_offset; n < basic_list[version - 1].num_tokens; n++) {
                printf(""%s\t"", basic_list[version - 1].tokens[n] /*, 0xfe, n*/);
            }
        } else {
            for (n = basic_list[version - 1].token_offset; n < basic_list[version - 1].num_tokens; n++) {
                printf(""%s\t"", kwfe[n] /*, 0xfe, n*/);
            }
        }

        if (version != B_SXC) {
            for (n = basic_list[version - 1].token_offset; n < NUM_KWCE; n++) {
                printf(""%s\t"", (version == B_10) ? kwce10[n] : kwce[n] /*, 0xce, n*/);
            }
        }
    } else {
        switch (version) {
            case B_EXPBAS64:
            case B_SUPERBAS:
            case B_BLARG:
            case B_EASY:
            case B_MAGIC:
            case B_MIGHTY:
            case B_TURTLE:
            case B_SUPEREXP:
            case B_BSX:
            case B_GB:
            case B_VIC5:
            case B_VIC4:
            case B_4:
            case B_4E:
            case B_WARSAW:
            case B_EXPBAS20:
            case B_WSF:
            case B_BASL:
            case B_REU:
            case B_DRAGO:
            case B_X:
            case B_PEG:
            case B_WS:
            case B_GRAPH:
            case B_ULTRA:
            case B_FC3:
            case B_SPEECH:
            case B_ATBAS:
            case B_SUPERGRA:
            case B_KIPPER:
            case B_BOB:
            case B_EVE:
            case B_SIMON:
            case B_TT64:
            case B_HANDY:
                for (n = basic_list[version - 1].token_offset; n < basic_list[version - 1].num_tokens; n++) {
                    printf(""%s\t"", basic_list[version -1].tokens[n] /*, n + 0xcc*/);
                }
                break;
            default:
                break;
        }  /* switch */
    }

    printf(""\n\n"");
}


/* ------------------------------------------------------------------------- */

/*
 * Conversion Routines
 */

/* used in text mode */
static void pet_2_asc(int version, int ctrls)
{
    int c;

    while ((c = getc(source)) != EOF) {
        _p_toascii(c, version, ctrls, 0);           /* convert character */
    }      /* line */
}

/*******************************************************************************
    translate petscii code into an ascii representation

    notes:
    - petscii codes 0x61-0x7f and (*) 0xc1-0xdf produce the same screencodes
    - petscii codes (*) 0xa1-0xbe and 0xe1-0xfe produce the same screencodes
    - petscii codes (*) 0xff, 0x7e and 0xde (PI) produces the same screencode
    
 ******************************************************************************/
static void out_ctrl(unsigned char c)
{
    if (dec) {
        fprintf(dest, CLARIF_LP_ST ""%03d"" CLARIF_RP_ST, c);
    } else {
        fprintf(dest, CLARIF_LP_ST ""$%02x"" CLARIF_RP_ST, c);
    }
}

static void _p_fputc(int c, int p, int quote)
{
   if (quote && quotedcodes) {
        /* if enabled, output all quoted non alphanumeric characters as control codes */
        if (!(((c >= 'a') && (c <= 'A')) ||
              ((c >= 'A') && (c <= 'Z')) ||
              ((c >= '0') && (c <= '9')) ||
              (c == '""') /* needed so the leading quote does NOT get converted into a control code */
           )) {
            out_ctrl((unsigned char)(p & 0xff));
            return;
        }
    }
    fputc(c, dest);
}

static void _p_toascii(int c, int version, int ctrls, int quote)
{
    /* fprintf(stderr, ""<%02x:%d>"", c, ctrls); */
    switch (c) {
        case 0x00: /* 00 for SEQ */
        case 0x0a:
            if (!ctrls) {
                _p_fputc('\n', c, quote);
            } else {
                out_ctrl((unsigned char)(c & 0xff));
            }
            break;
        case 0x0d: /* CBM carriage return */
            _p_fputc('\n', c, quote);
            break;
        case 0x40:
            _p_fputc('@', c, quote);
            break;
        case 0x5b:
            _p_fputc('[', c, quote);
            break;
        case 0x5c:
            _p_fputc('\\', c, quote);
            break;
        case 0x5d:
            _p_fputc(']', c, quote);
            break;
        case 0x5e:
            _p_fputc('^', c, quote);
            break;
        case 0x5f: /* left arrow */
            _p_fputc('_', c, quote);
            break;
        case 0x60: /* produces the same screencode as $c0! */
            out_ctrl((unsigned char)(c & 0xff));
            break;

        case 0x7b: /* produces the same screencode as $db! */
        case 0x7c: /* produces the same screencode as $dc! */
        case 0x7d: /* produces the same screencode as $dd! */
        case 0x7e: /* PI produces the same screencode as $de! */
        case 0x7f: /* produces the same screencode as $df! */
            out_ctrl((unsigned char)(c & 0xff)); /* shift+arrow up */
            break;

        case 0xc0:
            fprintf(dest, CLARIF_LP_ST ""SHIFT-*"" CLARIF_RP_ST);
            break;
        case 0xdb: /* (*) produces the same screencode as $7b! */
            fprintf(dest, CLARIF_LP_ST ""SHIFT-+"" CLARIF_RP_ST);
            break;
        case 0xdc: /* (*) produces the same screencode as $7c! */
            fprintf(dest, CLARIF_LP_ST ""CBM--"" CLARIF_RP_ST); /* Conflicts with Scandinavian Chars */
            break;
        case 0xdd: /* (*) produces the same screencode as $7d! */
            fprintf(dest, CLARIF_LP_ST ""SHIFT--"" CLARIF_RP_ST);
            break;
        case 0xde: /* PI produces the same screencode as $7e and $ff! */
            out_ctrl((unsigned char)(c & 0xff));
            break;
        case 0xdf: /* (*) produces the same screencode as $7f! */
            fprintf(dest, CLARIF_LP_ST ""CBM-*"" CLARIF_RP_ST);
            break;

        case 0xa0: /* shifted Space */
        case 0xe0: /* produces the same screencode as $a0! */
            if (!ctrls) {
                _p_fputc(' ', c, quote);
            } else {
                out_ctrl((unsigned char)(c & 0xff));
            }
            break;
        case 0xff: /* (*) PI produces the same screencode as $7e and $de! */
            _p_fputc(0x7e, c, quote); /*  '~' is ASCII for 'pi' */
            break;

        default:
            switch (c & 0xe0) {
                case 0x40:                /* 41 - 5F (no duplicated set exists) */
                    _p_fputc(c ^ 0x20, c, quote);
                    break;
                case 0x60:                /* 61 - 7F (produces same screencodes as C1...) */
                    if (ctrls) {
                        out_ctrl((unsigned char)(c & 0xff));
                    } else {
                        _p_fputc(c ^ 0x20, c, quote);
                    }
                    break;
                case 0xa0:                /* (primary set) A1 - BF (produces same screencodes as E1...) */
                    fprintf(dest, CLARIF_LP_ST ""%s"" CLARIF_RP_ST, cbmkeys[c & 0x1f]);
                    break;
                case 0xe0:                /* E1 - FE (produces same screencodes as A1...) */
                    out_ctrl((unsigned char)(c & 0xff));
                    break;
                case 0xc0:                /* (primary set) C0 - DF (produces same screencodes as 61...) */
                    _p_fputc(c ^ 0x80, c, quote);
                    break;

                default:
                    if ((c > 0x1f) && isprint(c)) {
                        _p_fputc(c, c, quote);
                    } else if (ctrls) {
                        if (version == B_35) {
                            if ((c < 0x20) && *e_ctrl1[c]) {
                                fprintf(dest, CLARIF_LP_ST ""%s"" CLARIF_RP_ST, e_ctrl1[c]);
                            } else if ((c > 0x7f) && (c < 0xa0) && *d_ctrl2[c & 0x1f]) {
                                fprintf(dest, CLARIF_LP_ST ""%s"" CLARIF_RP_ST, d_ctrl2[c & 0x1f]);
                            } else {
                                out_ctrl((unsigned char)(c & 0xff));
                            }
                        } else {
                            if ((c < 0x20) && *ctrl1[c]) {
                                fprintf(dest, CLARIF_LP_ST ""%s"" CLARIF_RP_ST, ctrl1[c]);
                            } else if ((c > 0x7f) && (c < 0xa0) && *ctrl2[c & 0x1f]) {
                                fprintf(dest, CLARIF_LP_ST ""%s"" CLARIF_RP_ST, ctrl2[c & 0x1f]);
                            } else {
                                out_ctrl((unsigned char)(c & 0xff));
                            }
                        }
                    }  /* ctrls */
            }  /* switch */
    }  /* switch */
}

static int _a_topetscii(int c, int ctrls)
{
    if (c == '\n') {
        return 0x0d;
    } else if (c == 0x7e) {              /*  '~' is ASCII for 'pi' */
        return 0xff;
    } else if ((c >= 0x5b) && (c <= 0x5f)) { /* '_' -> left arrow, no char value change */
        return c;
    } else if ((c >= 0x60) && (c <= 0x7e)) {
        return c ^ 0x20;
    } else if ((c >= 'A') && (c <= 'Z')) {
        return c | 0x80;
    }
    return c;
}

/* read a decimal integer from string. we do it in a seperate function because
 * of the ugly GEMDOS hack */
static int scan_integer(const char *line, unsigned int *num, unsigned int *digits)
{
#ifdef GEMDOS
    *digits = 0;
    if (sscanf(line, ""%u"", num) == 1) {
        while (isspace(*line) || isdigit(*line)) {
            line++;
            (*digits)++;
        }
        return (int)*digits;
    }
#else
    if (sscanf(line, ""%u%n"", num, (int *)digits) == 1) {
        return (int)*digits;
    }
#endif
    return 0;
}

/* ------------------------------------------------------------------------- */
/*
 * convert basic (and petscii) to ascii (text)
 *
 * This routine starts from the beginning of Basic, and not from the
 * load address included on program files. That way it can list from
 * RAM dump.
 */

static int p_expand(int version, int addr, int ctrls)
{
    static char line[4];
    int c = 0;
    int quote, spnum, directory = 0;
    int sysflg = 0;

    /*
     * It seems to be common mistake not to terminate BASIC properly
     * before the machine language part, so we don't check for the
     * low byte of line link here.
     * Line link and line number are read separately to leave possible
     * next file on stdin intact.
     */

    while ((fread(line, 1, 2, source) == 2) && (line[1]) && fread(line + 2, 1, 2, source) == 2) {
        quote = 0;
        fprintf(dest, "" %4d "", (spnum = (line[2] & 0xff) + ((line[3] & 0xff) << 8)));

        if (directory) {
            if (spnum >= 100) {
                spnum = 0;
            } else if (spnum >= 10) {
                spnum = 1;
            } else {
                spnum = 2;
            }
        }

        /* prevent list protection from terminating listing */

        while ((c = getc(source)) != EOF && !c) {
        }

        if (c == 0x12 && !line[2] && !line[3]) {  /* 00 00 12 22 */
            directory++;
        }

        do {
            if (c == 0x22) {
                quote ^= c;
            }

            /*
             * Simons' basic. Any flag for this is not needed since it is
             * mutually exclusive with all other implemented modes.
             */

            if (!quote && (c == 0x64)) {
                if (((c = getc(source)) < 0x80) && basic_list[version - 1].tokens) {
                    fprintf(dest, ""%s"", basic_list[version - 1].tokens[c]);
                    continue;
                } else {
                    fprintf(dest, ""($64)"");     /* it wasn't prefix */
                }
            }

            /* basic 2.0, 7.0 & 10.0 and extensions */

            if (!quote && c > 0x7f) {
                /* check for keywords common to all versions, include pi */
                if (c <= basic_list[B_1 - 1].max_token || c == 0xff) {
                    fprintf(dest, ""%s"", keyword[c & 0x7f]);

                    if (c == 0x9E) {
                        ++sysflg;
                    }
                    continue;
                }
                if (version != B_35 && version != B_FC3) {
                    if (c == 0xce && basic_list[version - 1].prefixce) {            /* 'rlum' on V3.5*/
                        if ((c = getc(source)) <= MAX_KWCE) {
                            fprintf(dest, ""%s"", (version == B_10) ? kwce10[c] : kwce[c]);
                        } else {
                            fprintf(dest, ""($ce%02x)"", (unsigned int)c);
                        }
                        continue;
                    } else if (c == 0xfe && basic_list[version - 1].prefixfe) {
                        if (version == B_SXC) {
                            if ((c = getc(source)) <= basic_list[B_SXC - 1].max_token) {
                                fprintf(dest, ""%s"", basic_list[version - 1].tokens[c]);
                            } else {
                                fprintf(dest, ""($fe%02x)"", (unsigned int)c);
                            }
                        } else {
                            if ((c = getc(source)) <= basic_list[B_10 - 1].max_token) {
                                fprintf(dest, ""%s"", (version == B_8) ? kwfe8[c] : kwfe[c]);
                            } else {
                                fprintf(dest, ""($fe%02x)"", (unsigned int)c);
                            }
                        }
                        continue;
                    }
                }
                switch (version) {
                    case B_2:
                    case B_EASY:
                    case B_MAGIC:
                    case B_MIGHTY:        /* VIC Mightyb basic */
                    case B_TURTLE:        /* VIC extension as well */
                    case B_EXPBAS20:
                    case B_SUPEREXP:         /* VIC extension */
                    case B_EXPBAS64:
                    case B_BSX:
                    case B_GB:
                    case B_WSF:
                    case B_VIC5:
                    case B_VIC4:
                    case B_4:             /* PET V4.0 */
                    case B_4E:            /* V4.0 extension */
                    case B_BASL:
                    case B_REU:
                    case B_DRAGO:
                    case B_X:
                    case B_PEG:
                    case B_WS:
                    case B_GRAPH:
                    case B_ULTRA:         /* C64 Ultrabasic-64 */
                    case B_FC3:           /* C64 FC3 */
                    case B_ATBAS:         /* C64 Atbasic */
                    case B_SUPERGRA:
                    case B_SPEECH:        /* C64 Speech basic */
                    case B_BLARG:
                    case B_SUPERBAS:
                    case B_WARSAW:
                    case B_KIPPER:
                    case B_BOB:
                    case B_EVE:
                    case B_TT64:
                    case B_HANDY:
                        if (basic_list[version - 1].tokens && c >= basic_list[version - 1].token_start && c <= basic_list[version - 1].max_token) {
                            fprintf(dest, ""%s"", basic_list[version - 1].tokens[c - basic_list[version - 1].token_start]);
                        }
                        break;

                    default:              /* C128 */
                        fprintf(dest, ""%s"", keyword[c & 0x7f]);
                }
                continue;
            } /* quote */

            if (directory && spnum && c == 0x20) {
                spnum--;          /* eat spaces to adjust directory lines */
                continue;
            }

            _p_toascii((int)c, version, ctrls, quote);  /* convert character */
        } while ((c = getc(source)) != EOF && c);
        fprintf(dest, ""\n"");
    }      /* line */

    DBG((""\n c %02d  EOF %d  *line %d  sysflg %d\n"",
                c, feof(source), *line, sysflg));

    return (!feof(source) && (*line | line[1]) && sysflg);
}

/* ------------------------------------------------------------------------- */
/* convert ascii (basic) to tokenized basic (and petscii) */

#define MAX_INLINE_LEN  (256 * 8)
#define MAX_OUTLINE_LEN 256

static void p_tokenize(int version, unsigned int addr, int ctrls)
{
    static char line[MAX_INLINE_LEN + 1];
    static char tokenizedline[MAX_OUTLINE_LEN + 1];
    unsigned char *p1;
    unsigned char *p2;
    unsigned char *p3;
    unsigned char quote;
    int c;
    int ctmp = -1;
    int kwlentmp = -1;
    unsigned char rem_data_mode;
    unsigned char rem_data_endchar = '\0';
    unsigned int len = 0;
    unsigned int match;
    unsigned int match2;
    unsigned int linum = 10;

    /* put start address to output file */
    fprintf(dest, ""%c%c"", (int)(addr & 255), (int)((addr >> 8) & 255));

    /* Copies from p2 to p1 */

    while ((p2 = (unsigned char *)fgets(line, MAX_INLINE_LEN, source)) != NULL) {
        /* skip comment line when starting with "";"" */
        if (*line == ';') {
            continue;
        }

        memset(tokenizedline, 0, MAX_OUTLINE_LEN);
        p1 = (unsigned char *)tokenizedline;

        p2 += scan_integer(line, &linum, &len); /* read decimal from ""line"" into ""linum"" */

        DBG((""line: %u [%s]\n"", linum, line));

        quote = 0;
        rem_data_mode = 0;
        while (isspace(*p2)) {
            p2++;
        }

        while (*p2) {
            if (*p2 == 0x22) {
                quote ^= *p2;
            }
            if (*p2 == 0x0a || *p2 == 0x0d) {
                break;
            }

            match = 0;
            match2 = 0;
            if (quote) {
                /*
                 * control code evaluation
                 * only strings that appear inside quotes are
                 * interpreted -- they should not be used elsewhere
                 */

                if (ctrls && (*p2 == CLARIF_LP)) {
                    unsigned char *p;
                    p = p2;

                    DBG((""controlcode start: %c\n"", *p2));

                    /* repetition count */
                    len = 1;
                    if (scan_integer((char *)++p, &len, &kwlen) > 0) {
                        p += kwlen;

                        /* if we are already at the closing brace, then the previous
                           value wasnt the repeat count but an actual decimal charactercode */
                        if (*p == CLARIF_RP) {
                            *p1++ = (unsigned char)len; /* put charcode into output */
                            p2 = p + 1; /* skip the closing brace in input */
                            DBG((""controlcode was a decimal character code: {%u}\n"", len));
                            continue;
                        }

                        DBG((""controlcode repeat count: len:%u kwlen:%u\n"",
                                    len, kwlen));

                        if (*p == ' ') {
                            ++p;
                        }
                    }

                    DBG((""controlcode test: %s\n"", p));

                    if (
                        (
                            ((c = sstrcmp_codes(p, hexcodes, 0, 0x100)) != CODE_NONE) || /* 0x00-0xff */

                            ((version == B_35) && ((c = sstrcmp_codes(p, e_ctrl1, 0, 0x20)) != CODE_NONE)) || /* 0x00-0x1f */
                            ((c = sstrcmp_codes(p, ctrl1, 0, 0x20)) != CODE_NONE) || /* 0x00-0x1f */
                            ((c = sstrcmp_codes(p, a_ctrl1, 0, 0x20)) != CODE_NONE) || /* 0x00-0x1f */
                            ((c = sstrcmp_codes(p, b_ctrl1, 0, 0x20)) != CODE_NONE) || /* 0x00-0x1f */
                            ((c = sstrcmp_codes(p, c_ctrl1, 0, 0x20)) != CODE_NONE) || /* 0x00-0x1f */
                            ((c = sstrcmp_codes(p, d_ctrl1, 0, 0x20)) != CODE_NONE) || /* 0x00-0x1f */

                            ((((c = sstrcmp_codes(p, cbmchars, 0, 0x20)) != CODE_NONE) || /* 0x20-0x3f */
                              ((c = sstrcmp_codes(p, a_cbmchars, 0, 0x20)) != CODE_NONE) /* 0x20-0x3f */
                              ) && (c += 0x20)) ||

                            ((
                              ((version == B_35) && ((c = sstrcmp_codes(p, d_ctrl2, 0, 0x20)) != CODE_NONE)) ||
                              ((c = sstrcmp_codes(p, ctrl2, 0, 0x20)) != CODE_NONE) ||
                              ((c = sstrcmp_codes(p, a_ctrl2, 0, 0x20)) != CODE_NONE) ||
                              ((c = sstrcmp_codes(p, b_ctrl2, 0, 0x20)) != CODE_NONE) ||
                              ((c = sstrcmp_codes(p, c_ctrl2, 0, 0x20)) != CODE_NONE)
                             ) && (c += 0x80)) ||

                            ((((c = sstrcmp_codes(p, cbmkeys, 0, 0x40)) != CODE_NONE) ||
                              ((c = sstrcmp_codes(p, a_cbmkeys, 0, 0x40)) != CODE_NONE)
                              ) && (c += 0xA0))


                        )
                        ) {

                        DBG((""controlcode test 2: '%c' '%s' '%u'\n"",
                                    p[kwlen], p, kwlen));

                        if (p[kwlen] == '*') {
                            /* repetition count */
                            p += (kwlen);

                            DBG((""controlcode test rpt: %s\n"", p));

                            len = 1;

                            if (scan_integer((char *)++p, &len, &kwlen) > 0) {
                                p += kwlen;
                                DBG((""controlcode repeat count: len:%u kwlen:%u\n"",
                                            len, kwlen));
                                kwlen = 0;
                            }
                        }

                        DBG((""controlcode test 3: '%c' '%s' '%u'\n"",
                                    p[0], p, kwlen));

                        if (p[kwlen] == CLARIF_RP) {
                            for (; len-- > 0; ) {
                                *p1++ = (unsigned char)c;
                            }
                            p2 = p + (++kwlen);

                            DBG((""controlcode continue\n""));
                            continue;
                        }
                    }

                    fprintf(stderr, ""error: line %u - unknown control code: %s\n"",
                            linum, p);
                    exit(-1);
                }
/*    DBG((""controlcode end\n"")); */
            } else if (rem_data_mode) {
                /* if we have already encountered a REM or a DATA,
                   simply copy the char */

                /* DO NOTHING! As we do not set ""match"", the if (!match) will be true,
                 * and this part will copy the char over to the new buffer */
            } else if (isalpha(*p2) || strchr(""+-*/^>=<"", *p2)) {
                /* FE and CE prefixes are checked first */
                if (version == B_7 || version == B_71 || version == B_8 || version == B_10 || version == B_SXC || version == B_SIMON) {
                    switch (version) {
                       case B_SIMON:
                            if ((c = sstrcmp(p2, basic_list[version - 1].tokens, basic_list[version - 1].token_offset, basic_list[version - 1].num_tokens)) != KW_NONE) {
                                *p1++ = 0x64;
                                *p1++ = (unsigned char)c;
                                p2 += kwlen;
                                match++;
                                match2++;
                            }
                            break;
                        case B_10:
                            if ((c = sstrcmp(p2, kwfe, basic_list[version - 1].token_offset, basic_list[version - 1].num_tokens)) != KW_NONE) {
                                *p1++ = 0xfe;
                                *p1++ = (unsigned char)c;
                                p2 += kwlen;
                                match++;
                                match2++;
                            } else if ((c = sstrcmp(p2, kwce10, basic_list[version - 1].token_offset, NUM_KWCE)) != KW_NONE) {
                                *p1++ = 0xce;
                                *p1++ = (unsigned char)c;
                                p2 += kwlen;
                                match++;
                                match2++;
                            }
                            break;
                        case B_8:
                            if ((c = sstrcmp(p2, kwfe8, basic_list[version - 1].token_offset, basic_list[version - 1].num_tokens)) != KW_NONE) {
                                *p1++ = 0xfe;
                                *p1++ = (unsigned char)c;
                                p2 += kwlen;
                                match++;
                                match2++;
                            }
                            break;
                        case B_71:
                            if ((c = sstrcmp(p2, kwfe71, basic_list[version - 1].token_offset, basic_list[version - 1].num_tokens)) != KW_NONE) {
                                *p1++ = 0xfe;
                                *p1++ = (unsigned char)c;
                                p2 += kwlen;
                                match++;
                                match2++;
                            } else if ((c = sstrcmp(p2, kwce, basic_list[version - 1].token_offset, NUM_KWCE)) != KW_NONE) {
                                *p1++ = 0xce;
                                *p1++ = (unsigned char)c;
                                p2 += kwlen;
                                match++;
                                match2++;
                            }
                            break;
                        case B_7:
                            if ((c = sstrcmp(p2, kwfe, basic_list[version - 1].token_offset, basic_list[version - 1].num_tokens)) != KW_NONE) {
                                *p1++ = 0xfe;
                                *p1++ = (unsigned char)c;
                                p2 += kwlen;
                                match++;
                                match2++;
                            } else if ((c = sstrcmp(p2, kwce, basic_list[version - 1].token_offset, NUM_KWCE)) != KW_NONE) {
                                *p1++ = 0xce;
                                *p1++ = (unsigned char)c;
                                p2 += kwlen;
                                match++;
                                match2++;
                            }
                            break;
                        case B_SXC:
                            if ((c = sstrcmp(p2, basic_list[version - 1].tokens, basic_list[version - 1].token_offset, basic_list[version - 1].num_tokens)) != KW_NONE) {
                                *p1++ = 0xfe;
                                *p1++ =(unsigned char)c;
                                p2 += kwlen;
                                match++;
                                match2++;
                            }
                            break;
                        default:
                            break;
                    }
                }

                /* Common Keywords
                 * Note:  ~ (pi) is tested later */

                if (!match) {
                    int max;

                    if (version == B_1) {
                        max = basic_list[B_1 - 1].num_tokens;
                    } else if ((version == B_35) || (version == B_7) || (version == B_71) || (version == B_8) ||
                               (version == B_10) || (version == B_SXC)) {
                        max = basic_list[B_35 - 1].num_tokens;
                    } else {
                        max = basic_list[B_2 - 1].num_tokens;
                    }

                    if ((ctmp = sstrcmp(p2, keyword, 0, max)) != KW_NONE) {
                        if ((version == B_35) || (ctmp != 0x4e)) {  /* Skip prefix */
                            kwlentmp = (int)kwlen;
                            match++;

                            /* Check if the keyword is a REM or a DATA */
                            switch (ctmp) {
                                case TOKEN_DATA:
                                    rem_data_mode = 1;
                                    rem_data_endchar = ':';
                                    break;

                                case TOKEN_REM:
                                    rem_data_mode = 1;
                                    rem_data_endchar = '\0';
                                    break;
                                default:
                                    break;
                            }
                        }
                    }
                }

                switch (version) {
                    case B_EXPBAS64:
                    case B_BSX:
                    case B_GB:
                    case B_WSF:
                    case B_VIC5:
                    case B_VIC4:
                    case B_4:
                    case B_4E:
                    case B_MAGIC:
                    case B_MIGHTY:
                    case B_BASL:
                    case B_REU:
                    case B_DRAGO:
                    case B_X:
                    case B_PEG:
                    case B_WS:
                    case B_GRAPH:
                    case B_ULTRA:
                    case B_FC3:
                    case B_ATBAS:
                    case B_SPEECH:
                    case B_EASY:
                    case B_TURTLE:
                    case B_SUPEREXP:
                    case B_EXPBAS20:
                    case B_SUPERGRA:
                    case B_BLARG:
                    case B_KIPPER:
                    case B_BOB:
                    case B_EVE:
                    case B_TT64:
                    case B_WARSAW:
                    case B_SUPERBAS:
                    case B_HANDY:
                        if ((c = sstrcmp(p2, basic_list[version - 1].tokens, basic_list[version - 1].token_offset, basic_list[version - 1].num_tokens)) != KW_NONE) {
                            if (match) {
                                if ((int)kwlen >= kwlentmp) {
                                    *p1++ = (unsigned char)(c + basic_list[version - 1].token_start);
                                    p2 += kwlen;
                                } else {
                                    *p1++ = (unsigned char)(ctmp | 0x80);
                                    p2 += kwlentmp;
                                }
                            } else {
                                *p1++ = (unsigned char)(c + basic_list[version - 1].token_start);
                                p2 += kwlen;
                                match++;
                            }
                        } else {
                            if (match) {
                                *p1++ = (unsigned char)(ctmp | 0x80);
                                p2 += kwlentmp;
                            }
                        }
                        break;

                   default:
                        if (match && !match2) {
                            *p1++ = (unsigned char)(ctmp | 0x80);
                            p2 += kwlentmp;
                        }
                        break;

                } /* switch */
            } /* !quote */

            if (!match) {
                /* convert character */
                *p1++ = (unsigned char)(_a_topetscii(*p2 & 0xff, ctrls));

                /* check if the REM/DATA mode has to be stopped: */
                if (*p2 == rem_data_endchar) {
                    rem_data_mode = 0;
                }

                ++p2;
            } /* match */
        } /* while */

        DBG((""output line start: %s\n"", line));
        /*  DBG((""output line petscii: %s\n"", tokenizedline)); */

        *p1 = 0;
        p3 = (unsigned char *)tokenizedline;
        if ((len = (unsigned int)(p1 - p3)) > 0) {
            addr += (len + 5);
            fprintf(dest, ""%c%c%c%c"",
                    (int)(addr & 255), (int)((addr >> 8) & 255),
                    (int)(linum & 255), (int)((linum >> 8) & 255));
            fwrite(tokenizedline, 1, len, dest);
            fprintf(dest, ""%c"", '\0');
            linum += 2; /* auto line numbering by default */
        }

        DBG((""output line end\n""));
    } /* while */

    fprintf(dest, ""%c%c"", 0, 0);        /* program end marker */
}

/* ------------------------------------------------------------------------- */
/* convert ascii (text) to petscii */
static void asc_2_pet(int version, int ctrls)
{
    static unsigned char line[MAX_INLINE_LEN + 1];
    int c, d;
    unsigned int len = 0;

    /* Copies from p2 to p1 */
    while ((c = fgetc(source)) != EOF) {
        /* control code evaluation */
        if (ctrls && (c == CLARIF_LP)) {
            unsigned char *p;
            long pos;
            pos = ftell(source);
            if (fread(line, 1, 0x20, source) < 1) {
                break;
            }
            p = line;

            DBG((""asc_2_pet controlcode start: %c\n"", c));

            /* repetition count */
            len = 1;
            if (scan_integer((char *)p, &len, &kwlen) > 0) {
                p += kwlen;
                /* if we are already at the closing brace, then the previous
                    value wasnt the repeat count but an actual decimal charactercode */
                if (*p == CLARIF_RP) {
                    fputc((int)len, dest); /* output character */
                    fseek(source, pos + kwlen + 1, SEEK_SET);
                    continue;
                }

                DBG((""asc_2_pet controlcode repeat count: len:%u kwlen:%u\n"",
                            len, kwlen));

                if (*p == ' ') {
                    ++p;
                }
            }

            DBG((""asc_2_pet controlcode test: \""%s\""\n"", p));

            if (
                (
                    ((c = sstrcmp_codes(p, hexcodes, 0, 0x100)) != CODE_NONE) || /* 0x00-0xff */

                    ((version == B_35) && ((c = sstrcmp_codes(p, e_ctrl1, 0, 0x20)) != CODE_NONE)) || /* 0x00-0x1f */
                    ((c = sstrcmp_codes(p, ctrl1, 0, 0x20)) != CODE_NONE) || /* 0x00-0x1f */
                    ((c = sstrcmp_codes(p, a_ctrl1, 0, 0x20)) != CODE_NONE) || /* 0x00-0x1f */
                    ((c = sstrcmp_codes(p, b_ctrl1, 0, 0x20)) != CODE_NONE) || /* 0x00-0x1f */
                    ((c = sstrcmp_codes(p, c_ctrl1, 0, 0x20)) != CODE_NONE) || /* 0x00-0x1f */
                    ((c = sstrcmp_codes(p, d_ctrl1, 0, 0x20)) != CODE_NONE) || /* 0x00-0x1f */

                    ((((c = sstrcmp_codes(p, cbmchars, 0, 0x20)) != CODE_NONE) || /* 0x20-0x3f */
                      ((c = sstrcmp_codes(p, a_cbmchars, 0, 0x20)) != CODE_NONE) /* 0x20-0x3f */
                        ) && (c += 0x20)) ||

                    ((
                      ((version == B_35) && ((c = sstrcmp_codes(p, d_ctrl2, 0, 0x20)) != CODE_NONE)) ||
                      ((c = sstrcmp_codes(p, ctrl2, 0, 0x20)) != CODE_NONE) ||
                      ((c = sstrcmp_codes(p, a_ctrl2, 0, 0x20)) != CODE_NONE) ||
                      ((c = sstrcmp_codes(p, b_ctrl2, 0, 0x20)) != CODE_NONE) ||
                      ((c = sstrcmp_codes(p, c_ctrl2, 0, 0x20)) != CODE_NONE)
                     ) && (c += 0x80)) ||

                    ((((c = sstrcmp_codes(p, cbmkeys, 0, 0x40)) != CODE_NONE) ||
                        ((c = sstrcmp_codes(p, a_cbmkeys, 0, 0x40)) != CODE_NONE)
                        ) && (c += 0xA0))


                )
                ) {

                DBG((""asc_2_pet controlcode test 2: '%c' '%s' '%u'\n"",
                            p[kwlen], p, kwlen));

                if (p[kwlen] == '*') {
                    /* repetition count */
                    p += (kwlen);

                    DBG((""asc_2_pet controlcode test rpt: %s\n"", p));

                    len = 1;
                    if (scan_integer((char *)++p, &len, &kwlen) > 0) {
                        p += kwlen;
                        DBG((""asc_2_pet controlcode repeat count: len:%u kwlen:%u\n"",
                                    len, kwlen));
                        kwlen = 0;
                    }
                }

                DBG((""asc_2_pet controlcode test 3: '%c' '%s' '%u'\n"",
                            p[0], p, kwlen));

                if (p[kwlen] == CLARIF_RP) {
                    for (; len-- > 0; ) {
                        fputc(c, dest);
                    }
                    DBG((""asc_2_pet controlcode continue\n""));

                    fseek(source, pos + kwlen + 1, SEEK_SET);
                    continue;
                }
            }

            fprintf(stderr, ""error: unknown control code: %s\n"", p);
            exit(-1);
        }

        DBG((""asc_2_pet convert character (%02x)\n"", (unsigned int)c));

        /* convert character */
        d = _a_topetscii(c, ctrls);
        fputc(d, dest);
    }
}

/*
     look up a controlcode

     sets kwlen
*/
static int sstrcmp_codes(unsigned char *line, const char **wordlist, int token, int maxitems)
{
    unsigned int j = 0;
    const char *p, *q;

    kwlen = 1;
    /* search for keyword */
    for (; token < maxitems; token++) {
        DBG((""compare '%s' vs  '%s' - %u %u\n"", wordlist[token], line, j, kwlen));

        if (codesnocase) {
            for (p = wordlist[token], q = (char *)line, j = 0;
                 *p && *q && (tolower(*p) == tolower(*q));
                 p++, q++, j++) {}
        } else {
            for (p = wordlist[token], q = (char *)line, j = 0;
                 *p && *q && (*p == *q);
                 p++, q++, j++) {}
        }

        /* found a control code */
        if (j && (!*p) && ((*q == '}') || (*q == '*'))) {
            kwlen = j;
            DBG((""found '%s' %2x\n"", wordlist[token], (unsigned int)token));
            return token;
        }
    } /* for */

    return (CODE_NONE);
}

/*
     look up a keyword

     sets kwlen
*/
static unsigned char sstrcmp(unsigned char *line, const char **wordlist, int token, int maxitems)
{
    unsigned int j;
    const char *p, *q;
    int retval = (KW_NONE);

    kwlen = 1;
    /* search for keyword */
    for (; token < maxitems; token++) {
        for (p = wordlist[token], q = (char *)line, j = 0;
             *p && *q && *p == *q; p++, q++, j++) {}

        /* DBG((""compare %s %s - %d %d\n"", wordlist[token], line, j, kwlen));*/

        /* found an exact or abbreviated keyword */
        if (j && (!*p || (*p && (*p ^ *q) == 0x20 && j++))) {
            if (j >= kwlen) {
                kwlen = j;
                /* DBG((""found %s %2x\n"", wordlist[token], token));*/
                retval = token;
            }
        }
    } /* for */

    return (unsigned char)retval;
}
"
N8JeMzUw,üéÅ G2A.COM FREE GIFT CARD GUIDE JUN 2024 V2 üéÅ,BitcoinScript2020,GetText,Tuesday 25th of June 2024 05:43:44 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view


Working as of:
26 June 2024"
6HFqV4b1,Roe2Js :: loadJSON ( ),jargon,JavaScript,Tuesday 25th of June 2024 05:41:12 PM CDT,"// Function to load JSON
function loadJSON(url) {

	if(basename(url) === `[object Promise].json`){
		return false;
	}
	
	// Ensure the URL starts with the host
	if ( !url.startsWith( host ) ) {
		url = `${host}${url}`;
	}
			
	// Replace spaces with %20
	url = url.replace(/ /g, '%20');
	
	let originalRequest = ``;
	
	let addy = ``;
	
	if(instr(url,`//`)){
		addy = url.split(`//`)[1];
	}else{
		addy = url;
	}
	
	addy = addy.split(`/`);
	let addy2 = ``;
	for(index = 1; index < addy.length - 1; index++){
		if(addy[index]!==``){
			addy2 += `/${addy[index]}`;
		}
	}
	
	addy3 = addy2.split(`/`);
	
	let nestRequest = ``;
	
	for(index = 2; index <= 2; index++){
		nestRequest += `/${addy3[index]}`;
	}

	for(index = 3; index < addy.length; index++){
		originalRequest += `/${addy[index]}`;
	}
	let requestPath=`${addy[0]}`;

	// Fetch the JSON file
	return fetch(url)
		.then(response => {
			if (!response.ok) {
				throw new Error(`Oh, Noez!! It was a bad network response\n\nunder ""${nestRequest}"" in ""${originalRequest}"" (${response.statusText})\n\n`);
			}
			return response.json();
		})
		.then(data => {
			console.log(`Woot!! Data fetched!\n\nunder ""${nestRequest}"" in ""${originalRequest}""\n\n`, data);
			return data;
		})
		.catch(error => {
			console.error(`Oh, Noez!! There has been a problem with your fetch operation!\n\nunder ""${nestRequest}"" in ""${originalRequest}""\n\n`, error);
		});
}

function fileExists(url) {

	// Ensure the URL starts with the host
	if ( !url.startsWith( host ) ) {
		url = `${host}${url}`;
	}
			
	// Replace spaces with %20
	url = url.replace(/ /g, '%20');

    try {
        const response = fetch(url, { method: 'HEAD' });
        return response.status === 200;
    } catch (error) {
        console.error(`Oh, Noez!! Error fetching the file!\n\n""${url}""`, error);
        return false;
    }
}

function basename(path) {
  return path.split('/').pop().split('\\').pop();
}
"
zt9uYPup,Untitled,mtsonkova,JavaScript,Tuesday 25th of June 2024 05:39:56 PM CDT,"const { test, describe, beforeEach, afterEach, beforeAll, afterAll, expect } = require('@playwright/test');
const { chromium } = require('playwright');

const host = 'http://localhost:3000'; // Application host (NOT service host - that can be anything)

let browser;
let context;
let page;

let user = {
    email: """",
    password: ""123456"",
    confirmPass: ""123456"",
};

let homeUrl = host + '/';


describe(""e2e tests"", () => {
    beforeAll(async () => {
        browser = await chromium.launch();
    });

    afterAll(async () => {
        await browser.close();
    });

    beforeEach(async () => {
        context = await browser.newContext();
        page = await context.newPage();
    });

    afterEach(async () => {
        await page.close();
        await context.close();
    });


    describe(""authentication"", () => {
        test('Register with valid data', async () => {
            //arange
            await page.goto(host);
            await page.click('text=Register');
            await page.waitForSelector('form');

            let random = Math.floor(Math.random() * 10000);
            user.email = `email${random}@abv.bg`;

            //act
            await page.locator('#email').fill(user.email);
            await page.locator('#password').fill(user.password);
            await page.locator('#repeat-pass').fill(user.confirmPass);

            let [response] = await Promise.all([
                page.waitForResponse(response => response.url().includes('/users/register') && response.status() == 200),
                page.click('[type=""submit""]')
            ]);

            //assert
            await expect(response.ok()).toBeTruthy();

            let userData = await response.json();

            await expect(userData.email).toBe(user.email);
            await expect(userData.password).toBe(user.password);
        });

        test('Login with valid data', async () => {
            // arange
            await page.goto(host);
            await page.click('text=Login');
            await page.waitForSelector('form');

            //act
            await page.locator('#email').fill(user.email);
            await page.locator('#password').fill(user.password);

            let [response] = await Promise.all([
                page.waitForResponse(response => response.url().includes('/users/login') && response.status() == 200),
                page.click('[type=""submit""]')
            ]);

            //assert
            await expect(response.ok()).toBeTruthy();

            let userData = await response.json();

            await expect(userData.email).toBe(user.email);
            await expect(userData.password).toBe(user.password);

        });

        test('Logout from the application', async () => {
            //arrange

            await page.goto(host);
            await page.click('text=Login');
            await page.waitForSelector('form');
            await page.locator('#email').fill(user.email);
            await page.locator('#password').fill(user.password);
            await page.click('[type=""submit""]');

            //act
            let [response] = await Promise.all([
                page.waitForResponse(response => response.url().includes('/users/logout') && response.status() == 204),
                page.click('text=Logout')
            ]);

            //assert
            await expect(response.ok()).toBeTruthy();
            await page.waitForSelector('text=Login');
            await expect(page.url()).toBe(homeUrl);

        });

    })

    describe(""navbar"", () => {
        test('Test the navbar for guest user', async () => {
            //arrange
            await page.goto(host);

            //assert
            await expect(page.locator('nav >> text=Dashboard')).toBeVisible;
            await expect(page.locator('nav >> text=My Books')).toBeHidden;
            await expect(page.locator('nav >> text=Add Book')).toBeHidden;
            await expect(page.locator('nav >> text=Logout')).toBeHidden;
            await expect(page.locator('nav >> text=Login')).toBeVisible;
            await expect(page.locator('nav >> text=Register')).toBeVisible;
        });

    });

    test('Test navbar for Logged-in user', async () => {
        //arrange
        await page.goto(host);

        //act
        await page.click('text=Login');
        await page.waitForSelector('form');
        await page.locator('#email').fill(user.email);
        await page.locator('#password').fill(user.password);
        await page.click('[type=""submit""]');

        //assert
        await expect(page.locator('nav >> text=Dashboard')).toBeVisible;
        await expect(page.locator('nav >> text=My Books')).toBeVisible;
        await expect(page.locator('nav >> text=Add Book')).toBeVisible;
        await expect(page.locator('nav >> text=Logout')).toBeVisible;
        await expect(page.locator('nav >> text=Login')).toBeHidden;
        await expect(page.locator('nav >> text=Register')).toBeHidden;
    });
});

describe(""CRUD"", () => {
    beforeEach(async () => {

        await page.goto(host);

        await page.click('text=Login');
        await page.waitForSelector('form');
        await page.locator('#email').fill(user.email);
        await page.locator('#password').fill(user.password);
        await page.click('[type=""submit""]');
    });

    test('Test Create a book functionality', async () => {
        //arrange
        await page.click('text=Add Book');
        await page.waitForSelector('form');

        //act

        await page.locator('#title').fill('Random Title');
        await page.locator('#description').fill('Random description');
        await page.locator('#imageUrl').fill('image.jpg');
        await page.locator('#type').selectOption('Other');

        //act
        let [response] = await Promise.all([
            page.waitForResponse(response => response.url().includes('/data/books') && response.status() == 200),
            page.click('[type=""Submit""]')
        ]);

        let bookData = await response.json();

        //assert
        await expect(response.ok()).toBeTruthy();
        await expect(bookData.title).toBe('Random Title');
        await expect(bookData.description).toBe('Random description');
        await expect(bookData.imageUrl).toBe('image.jpg');
        await expect(bookData.type).toBe('Other');
    });

    test('Edit a book functionality', async () => {
        //arrange
        await page.click('text=My Books');
        await page.locator('text=Details').first().click();
        await page.click('text=Edit');
        await page.waitForSelector('form');

        //act
        await page.locator('#title').fill('Edited Random Title');
        await page.locator('#description').fill('Edited Random description');
        await page.locator('#type').selectOption('Other');
        let [response] = await Promise.all([
            page.waitForResponse(response => response.url().includes('/data/books') && response.status() == 200),
            page.click('[type=""Submit""]')
        ]);

        let bookData = await response.json();

        //assert
        await expect(response.ok()).toBeTruthy();
        await expect(bookData.title).toBe('Edited Random Title');
        await expect(bookData.description).toBe('Edited Random description');
        await expect(bookData.imageUrl).toBe('image.jpg');
        await expect(bookData.type).toBe('Other');
    })

    test('Delete a book functionality', async () => {
        await page.click('text=My Books');
        await page.locator('text=Details').first().click();
        await page.click('text=Delete');

        let [response] = await Promise.all([
            page.waitForResponse(response => response.url().includes('/data/books') && response.status() == 200),
            page.click('text=Delete')
        ]);

        await expect(response.ok()).toBeTruthy();

    })

});
"
6fsPxCFj,PowerShell 'Refresh-Path' function,justinooo,PowerShell,Tuesday 25th of June 2024 04:10:40 PM CDT,"function Refresh-Path {
    $global:env:Path = [System.Environment]::GetEnvironmentVariable(""Path"", ""Machine"") + "";"" + [System.Environment]::GetEnvironmentVariable(""Path"", ""User"")
    Write-Output ""PATH refreshed.""
}"
mezsgGXq,Untitled,swaggboi,JavaScript,Tuesday 25th of June 2024 04:00:36 PM CDT,"const bodyStyle = document.body.style;

function setImage(url) {
    bodyStyle.backgroundImage = ""url('"" + url + ""')"";
}

switch (new Date().getMonth()) {
    case 5: // Just to test for now
        setImage('/images/topwwbackground.gif');
        break;
    case 9:
        setImage('/images/halloween_background_1.gif');
        break;
    case 11:
        setImage('/images/christmas.gif');
        break;
}
"
Wp3gSCXU,Installer skripta,riste5,JavaScript,Tuesday 25th of June 2024 03:44:31 PM CDT,"import { useCallback, useState } from ""react"";
import { Head, Link } from ""@inertiajs/react"";
import { ClearFieldError, SetFieldError } from ""@/Components/CoreFunctionsComponent.jsx"";
import { Toggler } from ""@/Components/Toggler.jsx"";
export default function Index(data) {
  const [button, setButton] = useState(""Next Step"");
  const [isButtonDisabled, setButtonAsDisabled] = useState(false);
  const [formdata, setFormdata] = useState({
    license_key: null,
    website_registration_status: 1,
    name: null,
    username: null,
    password: null,
    email: null,
    license_agreement: null,
    website_name: null,
  });
  const [formerrors, setFormErrors] = useState({
    license_key: null,
    website_registration_status: null,
    name: null,
    username: null,
    password: null,
    email: null,
    license_agreement: null,
    website_name: null,
  });
  const [serverRequirementsPage, setPageServerRequirements] = useState(true);
  const [licenseVerificationPage, setPageLicenseVerification] = useState(false);
  const [licenseTermsPage, setLicenseTermsPage] = useState(false);
  const [installStatusPage, setInstallStatusPage] = useState(false);

  if (!data.hasMinimumVersion || !data.hasCurlExtension || (!data.hasCtypeExtension && !data.hasSupportedDB)) {
    setButtonAsDisabled(true);
    setButton(""Installation Failed..."");
  }
  const [pageNav, setPageNav] = useState({
    server_requirements: true,
    license_verification: false,
    license_agreement: false,
    install: false,
    admin_account: false,
    install_complete: false,
  });
  const [installStatus, setInstallStatus] = useState(0);
  const [installDetails, AddInstallDetail] = useState({});
  const validateLicense = useCallback(() => {
    if (isButtonDisabled) {
      return;
    }
    setButton(""Validate License"");
    setPageServerRequirements(false);
    setPageLicenseVerification(true);
    setPageNav((prevState) => ({ ...prevState, server_requirements: false, license_verification: true }));
  }, []);
  const validateKey = useCallback(
    (e) => {
      let el = e.currentTarget,
        id = el.id,
        value = el.value;
      if (/^[a-zA-Z-0-9]+$/.test(value)) {
        setFormData((prev) => ({ ...prev, license_key: value }));
        setFormErrors((prev) => ({ ...prev, license_key: null }));
      } else {
        setFormData((prev) => ({ ...prev, license_key: null }));
        setFormErrors((prev) => ({ ...prev, license_key: ""Invalid license key!"" }));
      }
    },
    [formdata],
  );
  const [reinstallModal, ShowReinstallModal] = useState(false);
  const [sitesettingsModal, ShowSiteSettingsModal] = useState(false);
  const [adminAccount, ShowAdminModal] = useState(false);
  const [installComplete, ShowInstallCompleteModal] = useState(false);

  const checkLicense = useCallback(
    async (e) => {
      e.preventDefault();
      setButtonAsDisabled(true);
      setButton(""Validating License..."");
      await axios
        .post(""/install/verify"", JSON.stringify(formdata), {
          headers: {
            ""Content-Type"": ""application/json"",
            type: ""formdata"",
          },
        })
        .catch((e) => {
          console.log(e);
        })
        .then((d) => {
          if (d.data.errors) {
            setFormErrors(d.data.errors);
          } else {
            setButtonAsDisabled(false);
            setButton(""Continue"");
            setPageNav((prevState) => ({ ...prevState, license_verification: false, license_agreement: true }));
            setPageLicenseVerification(false);
            setLicenseTermsPage(true);
          }
        });
    },
    [data],
  );
  const checkTables = useCallback(async (e) => {
    e.preventDefault();
    if (!formdata.license_agreement) {
      setButtonAsDisabled(true);
      setFormErrors((prev) => ({ ...prev, license_agreement: ""You must accept the license terms!"" }));
    } else {
      setLicenseTermsPage(false);
      setPageNav((prevState) => ({ ...prevState, license_agreement: false, install: true }));
      setInstallStatusPage(true);
      setButtonAsDisabled(true);
      setButton(""Installing..."");
      setInstallStatus(10);
      AddInstallDetail({ check_tables: ""Checking database tables"" });
      await axios
        .request({
          url: ""/install/step1"",
          method: ""post"",
        })
        .catch((e) => {
          console.log(e);
        })
        .then(async (d) => {
          if (d.data && d.data.has_tables) {
            AddInstallDetail({ table_exists: ""Database table exists, do you want to reinstall the app?"" });
            ShowReinstallModal(true);
          } else {
            const t = await createTables();
            if (t) {
              const b = await createAdminGroup();
              if (b) {
                const c = await createBannedGroup();
                if (c) {
                  const d = await createCustomersGroup();
                  if (d) {
                    ShowSiteSettingsModal(true);
                  }
                }
              }
            }
          }
        });
    }
  }, []);
  const createTables = async () => {
    const data = await axios.post(""/install/step1b"");
    if (data.data.created_database_tables) {
      setInstallStatus(30);
      AddInstallDetail({ created_database_tables: ""Successfully created database tables"" });
      return true;
    } else {
      AddInstallDetail({ database_tables_fail: ""Failed to create database tables, installation aborted"" });
      setButton(""Installation aborted..."");
      return false;
    }
  };
  const createAdminGroup = async () => {
    const data = await axios.post(""/install/step2"");
    if (data.data.has_created_admin_group) {
      setInstallStatus(50);
      AddInstallDetail({ admin_group_created: ""Successfully created admin group..."" });
      return true;
    } else {
      AddInstallDetail({ failed_admin_group: ""Failed to create admin group, installation aborted!"" });
      setButton(""Installation aborted!"");
      return false;
    }
  };
  const createBannedGroup = async () => {
    const data = await axios.post(""/install/step3"");
    AddInstallDetail({ creating_banned_group: ""Creating banned user group..."" });
    if (data.data.has_created_banned_group) {
      setInstallStatus(70);
      AddInstallDetail({ created_banned_group: ""Successfully created banned user group"" });
      return true;
    } else {
      AddInstallDetail({ failed_banned_group: ""Failed to create banned user group"" });
      setButton(""Installation Aborted"");
      return false;
    }
  };
  const createCustomersGroup = async () => {
    AddInstallDetail({ creating_customers_group: ""Creating customers user group..."" });
    const response = await axios.post(""/install/step4"", JSON.stringify(formdata), {
      headers: {
        ""Content-Type"": ""application/json"",
      },
    });
    if (response.data.has_created_customer_group) {
      setInstallStatus(80);
      AddInstallDetail({ created_customers_group: ""Successfully created customers user group..."" });
      return true;
    } else {
      AddInstallDetail({
        customers_group_fail: ""Failed to create customers user group, check logs. Installation aborted!"",
      });
      setButton(""Installation Aborted!"");
      return false;
    }
  };
  const dropTables = useCallback(async () => {
    ShowReinstallModal(false);
    AddInstallDetail({ drop_tables: ""Dropping database tables..."" });
    await axios
      .post(""/install/step1a"", null)
      .catch((e) => {
        AddInstallDetail({ drop_t: ""Failed to drop database tables..."" });
        console.error(e);
      })
      .then(async (d) => {
        if (!d.data.has_drop_tables) {
          AddInstallDetail({ drop_tables_fail: ""Failed to drop database tables, installation aborted!"" });
        } else {
          setInstallStatus(20);
          AddInstallDetail({ database_tables: ""Successfully dropped all database tables."" });
          AddInstallDetail({ creating_tables: ""Creating database tables"" });
          const tables = await createTables();
          if (tables) {
            const admingroups = await createAdminGroup();
            if (admingroups) {
              const banned = await createBannedGroup();
              if (banned) {
                const customers = await createCustomersGroup();
                if (customers) {
                  ShowSiteSettingsModal(true);
                }
              }
            }
          }
        }
      });
  }, []);
  const cancelInstallation = useCallback(() => {
    ShowReinstallModal(false);
    AddInstallDetail({ install_cancelled: ""Installation cancelled by user."" });
    setButton(""Installation cancelled!"");
  }, []);
  const handleCheckbox = useCallback((e) => {
    const el = e.currentTarget,
      id = el.id;
    if (el.checked) {
      setButtonAsDisabled(false);
      formdata.license_agreement = true;
      setFormdata((prev) => ({ ...prev, license_agreement: true }));
      setFormErrors((prev) => ({ ...prev, license_agreement: null }));
    } else {
      setFormErrors((prev) => ({ ...prev, license_agreement: ""You must accept the license terms!"" }));
      setButtonAsDisabled(true);
    }
  }, []);
  const [button2, setButton2] = useState(""Save Settings"");
  const [isButton2Disabled, setButton2Disabled] = useState(false);
  const handleRegistrationStatus = useCallback(
    (e) => {
      setFormdata((prev) => ({ ...prev, website_registration_status: parseInt(e) }));
    },
    [formdata],
  );
  const validateWebsiteName = useCallback(
    (e) => {
      const el = e.currentTarget,
        id = el.id,
        name = el.name,
        value = el.value;
      if (/^[a-zA-Z0-9\s-.]+$/.test(value)) {
        setFormErrors((prev) => ({ ...prev, website_name: null }));
        setFormdata((prev) => ({ ...prev, website_name: value }));
      } else {
        setFormdata((prev) => ({ ...prev, website_name: null }));
        setFormErrors((prev) => ({ ...prev, website_name: ""Invalid website name!"" }));
      }
    },
    [formdata],
  );
  const updateSiteSettings = async () => {
    AddInstallDetail({ update_site_settings: ""Updating website settings..."" });
    setButton2(""Saving..."");
    const data = await axios.post(""/install/step5"", JSON.stringify(formdata), {
      headers: {
        ""Content-Type"": ""application/json"",
      },
    });
    if (data.data.has_created_site_settings) {
      setButton2(""Save Changes"");
      AddInstallDetail({ site_settings: ""Successfully updated website settings"" });
      setInstallStatus(80);
      ShowSiteSettingsModal(false);
      return true;
    } else {
      AddInstallDetail({ site_settings: ""Failed to create website settings"" });
      if (data.data.has_error && data.data.errors) {
        setFormErrors(data.data.errors);
        setButton2(""Save Changes"");
        return false;
      }
      return false;
    }
  };
  const handleWebsitesettings = useCallback(
    async (e) => {
      e.preventDefault();
      const sitesettings = await updateSiteSettings();
      if (sitesettings) {
        setPageNav((prevState) => ({ ...prevState, install: false, admin_account: true }));
        ShowAdminModal(true);
      }
    },
    [formdata],
  );
  const validatePassword = useCallback(
    (e) => {
      const el = e.currentTarget,
        id = el.id,
        name = el.name,
        value = el.value;
      if (/(?=.*[a-z])+(?=.*[A-Z])+(?=.*[0-9])+(?=.*[#\$&%^*]){8,}/.test(value)) {
        formdata[name] = value;
      } else {
        formdata[name] = null;
        formerrors.password =
          ""Password must be complex (including 1 uppercase, 1 number, 1 symbol, 1 small letter and must be 8 in length)"";
      }
    },
    [formdata],
  );
  const validateName = useCallback(
    (e) => {
      const el = e.currentTarget,
        id = el.id,
        name = el.name,
        value = el.value;
      if (/^[a-zA-Z\s]+$/.test(value)) {
        setFormErrors((prevState) => ({ name: null }));
        formdata[name] = value;
      } else {
        setFormErrors((prevState) => ({ name: ""Invalid name!"" }));
        formdata[name] = null;
      }
    },
    [formdata, formerrors],
  );
  const validateEmail = useCallback(
    (e) => {
      const el = e.currentTarget,
        id = el.id,
        name = el.name,
        value = el.value;
      if (/^[a-zA-Z0-9]+@[a-zA-Z]{2,}\.[a-z]{2,}$/.test(value)) {
        setFormErrors((prevState) => ({ ...prevState, email: null }));
        formdata[name] = value;
      } else {
        formdata[name] = null;
        setFormErrors((prevState) => ({ ...prevState, email: ""Invalid email address!"" }));
      }
    },
    [formdata],
  );
  const validateUsername = useCallback(
    (e) => {
      const el = e.currentTarget,
        id = el.id,
        name = el.name,
        value = el.value;
      if (/^[a-zA-Z0-9]+$/.test(value)) {
        formdata[name] = value;
        setFormErrors((prevState) => ({ ...prevState, username: null }));
      } else {
        formdata[name] = null;
        setFormErrors((prevState) => ({ ...prevState, username: ""Invalid username!"" }));
      }
    },
    [formdata, formerrors],
  );
  const createAdmin = useCallback(async () => {
    setButton2(""Saving"");
    AddInstallDetail({ creating_admin_account: ""Creating admin account..."" });
    const data = await axios.post(""/install/step6"", JSON.stringify(formdata), {
      headers: {
        ""Content-Type"": ""application/json"",
      },
    });
    if (data.data.has_created_admin) {
      setButton2(""Save Changes"");
      AddInstallDetail({ created_admin_account: ""Successfully created admin account"" });
      setInstallStatus(95);
      return true;
    } else {
      if (data.data.errors) {
        setFormErrors(data.data.errors);
        return false;
      }
    }
  }, [formdata]);
  const handleAdminform = useCallback(
    async (e) => {
      e.preventDefault();
      if (!formdata.name || !formdata.email || !formdata.password || !formdata.username) {
        return;
      }
      const createadmin = await createAdmin();
      if (createadmin) {
        ShowAdminModal(false);
        setPageNav((prevState) => ({ ...prevState, admin_account: false, install_complete: true }));
        const isInstallationCompleted = await completeInstallation();
        if (isInstallationCompleted) {
          ShowInstallCompleteModal(true);
        }
      }
    },
    [formdata],
  );
  const completeInstallation = useCallback(async () => {
    AddInstallDetail({ complete_install: ""Clearing cache & writting installation lock file..."" });
    const data = await axios.post(""/install/step7"");
    if (data.data.has_completed) {
      setInstallStatus(100);
      AddInstallDetail({ complete_install: ""Installation completed."" });
      setButton(""Installation Completed"");
      return true;
    } else {
      AddInstallDetail({ error: ""installation aborted. Failed to clear cache and write installation lock file"" });
      setButton(""Installation Aborted!"");
      return false;
    }
  }, []);
  const closeDialog = useCallback(() => {
    ShowInstallCompleteModal(false);
  }, []);
  return (
    <>
      <Head title={""Installation""} />
      {installComplete ? (
        <div className=""modal install-complete flex flex-col flex-wrap items-baseline"">
          <div className=""modal-container bg-dark border-2 border-solid border-dark flex flex-col items-baseline w-[100%] md:w-[50%] lg:w-[50%]"">
            <div className=""modal-header bg-dark-1"">
              <span className=""text-sm text-white font-bold"">Installation completed</span>
            </div>
            <div className=""modal-body flex flex-col w-[100%] flex-wrap items-baseline bg-dark"">
              <p>
                Installation completed. If you ever want to reinstall your application, please delete{"" ""}
                <b>install.lock</b> file located in <b>storage/app/</b>.
              </p>
              <div className=""form-actions p-5 w-[100%] flex flex-row justify-between"">
                <Link href=""/admin"" className=""button button--default w-[60%] text-center"">
                  Go to AdminCP
                </Link>
                <button type=""button button--default w-[30%] text-center"" onClick={closeDialog}>
                  Close
                </button>
              </div>
            </div>
          </div>
        </div>
      ) : null}
      {adminAccount ? (
        <div className=""modal flex flex-col flex-wrap items-baseline md:items-center lg:items-center"">
          <div className=""modal-container bg-dark border-2 border-solid border-dark flex flex-col items-baseline w-[100%] md:items-center lg:items-center md:w-[50%] lg:w-[50%]"">
            <div className=""bg-dark p-10 modal-header w-[100%] flex-wrap flex"">
              <span className=""text-sm text-white font-bold"">Admin Account</span>
            </div>
            <div className=""modal-body bg-dark flex flex-col flex-wrap items-baseline]"">
              <form onSubmit={handleAdminform}>
                <div className=""control-group"">
                  <label htmlFor=""name"">Display Name:</label>
                  <div className=""control-input"">
                    <input
                      type=""text""
                      name=""name""
                      id=""name""
                      className={formerrors.name ? ""formInput input--error"" : ""formInput""}
                      onChange={validateName}
                    />
                    <span className=""error-text"">{formerrors.name}</span>
                    <span className=""help-text"">Enter your name.</span>
                  </div>
                </div>
                <div className=""control-group"">
                  <label htmlFor=""username"">Username:</label>
                  <div className=""control-input"">
                    <input
                      type=""text""
                      name=""username""
                      id=""username""
                      className={formerrors.username ? ""formInput input--error"" : ""formInput""}
                      onChange={validateUsername}
                    />
                    <span className=""error-text"">{formerrors.username}</span>
                    <span className=""help-text"">
                      Enter your username, it'll be used for login. Never expose this information to anyone else.
                    </span>
                  </div>
                </div>
                <div className=""control-group"">
                  <label htmlFor=""password"">Password:</label>
                  <div className=""control-input"">
                    <input
                      type=""password""
                      name=""password""
                      id=""password""
                      className={formerrors.password ? ""formInput input--error"" : ""formInput""}
                      onChange={validatePassword}
                    />
                    <span className=""error-text"">{formerrors.password}</span>
                    <span className=""help-text"">
                      Accepted complex password including at least 1 uppercase, 1 small letter, 1 number and 1 symbol.
                    </span>
                  </div>
                </div>
                <div className=""control-group"">
                  <label htmlFor=""email"">Email:</label>
                  <div className=""control-input"">
                    <input
                      type=""email""
                      name=""email""
                      id=""email""
                      className={formerrors.email ? ""formInput input--error"" : ""formInput""}
                      onChange={validateEmail}
                      placeholder=""example@example.com""
                    />
                    <span className=""error-text"">{formerrors.email}</span>
                    <span className=""help-text"">Enter your email address.</span>
                  </div>
                </div>
                <div className=""control-group"">
                  <div className=""flex flex-wrap items-baseline bg-neutral-500 w-[100%] p-5 flex flex-col flex-wrap items-baseline"">
                    <button
                      type=""submit""
                      disabled={isButton2Disabled}
                      className={
                        isButton2Disabled
                          ? ""button button--disabled button--default w-[100%] text-center""
                          : ""button button--default text-center w-[100%]""
                      }
                    >
                      {button2}
                    </button>
                  </div>
                </div>
              </form>
            </div>
          </div>
        </div>
      ) : null}
      {sitesettingsModal ? (
        <div className=""modal site-settings flex flex-col flex-wrap items-baseline"">
          <div className=""modal-container bg-dark border-2 border-solid border-dark flex flex-col items-baseline w-[100%] md:w-[50%] lg:w-[50%]"">
            <div className=""modal-header bg-dark p-10 flex w-[100%] flex-row flex-wrap items-baseline justify-between"">
              <span className=""text-sm text-white font-bold"">Website settings</span>
            </div>
            <div className=""modal-body flex flex-col w-[100%] flex-wrap items-baseline bg-dark"">
              <form className=""flex flex-col w-[100%] flex-wrap items-baseline"" onSubmit={handleWebsitesettings}>
                <div className=""control-group"">
                  <label htmlFor=""website_name"">Website name:</label>
                  <div className=""control-input"">
                    <input
                      type=""text""
                      name=""website_name""
                      id=""website_name""
                      className={formerrors.website_name ? ""formInput input--error"" : ""formInput""}
                      placeholder=""website_name""
                      onChange={validateWebsiteName}
                    />
                    <span className=""error-text"">{formerrors.website_name}</span>
                    <span className=""help-text"">Enter in the field above website name.</span>
                  </div>
                </div>
                <div className=""control-group"">
                  <label>Registration status</label>
                  <div className=""control-input"">
                    <Toggler label=""website_registration_status"" id=""website_registration_status"" value=""1"" />
                    <span className=""error-text"">{formerrors.website_registration_status}</span>
                  </div>
                </div>
                <div className=""flex w-[100%] flex-wrap bg-neutral-500 p-5 w-[100%]"">
                  <button
                    type=""submit""
                    disabled={isButton2Disabled}
                    className={
                      isButton2Disabled
                        ? ""button button--disabled button--default w-[100%] text-center""
                        : ""button button--default w-[100%] text-center""
                    }
                  >
                    {button2}
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      ) : null}
      {reinstallModal ? (
        <div className=""modal reinstall-app flex flex-col flex-wrap items-baseline"">
          <div className=""modal-container bg-dark border-2 border-solid border-dark flex flex-col flex-wrap items-baseline w-[100%] md:w-[50%] lg:w-[50%]"">
            <div className=""modal-header bg-neutral-500 p-10 flex w-[100%] flex-row flex-wrap items-baseline justify-betwen"">
              <span className=""text-sm text-white font-bold"">Reinstall MyEcommerce app?</span>
              <span className=""pointer p-5"">X</span>
            </div>
            <div className=""modal-body bg-dark flex w-[100%] flex-column flex-wrap items-baseline"">
              <p>
                Installer detected that installation already exists, are you sure you want to reinstall the application?
              </p>
              <div className=""flex bg-neutral-500 w-[100%] justify-between flex flex-row items-baseline flex-wrap p-5"">
                <button type=""button"" className=""button button--default w-[50%] text-center"" onClick={dropTables}>
                  Yes
                </button>
                <button
                  type=""button""
                  className=""button button--default w-[40%] text-center""
                  onClick={cancelInstallation}
                >
                  No
                </button>
              </div>
            </div>
          </div>
        </div>
      ) : null}
      <div className=""flex flex-row  mt-1 p-5 flex-wrap items-center w-[100%] h-96 absolute justify-center"">
        <div className=""flex flex-col w-[100%] md:w-[20%] lg:w-[20%] flex-wrap items-baseline bg-dark border-2 border-solid border-dark"">
          <ul className=""nav w-[100%]"">
            <li className=""nav-item flex w-[100%]"">
              <Link
                href=""#""
                className={
                  pageNav.server_requirements
                    ? ""nav-link link-active w-[100%] server-requirement""
                    : ""nav-link w-[100%] server-requirements""
                }
              >
                Server Requirements
              </Link>
            </li>
            <li className=""nav-item flex w-[100%]"">
              <Link
                href=""#""
                className={
                  pageNav.license_verification
                    ? ""nav-link link-active w-[100%] license_verification""
                    : ""nav-link w-[100%] license_verification""
                }
              >
                License verification
              </Link>
            </li>
            <li className=""nav-item flex w-[100%]"">
              <Link
                href=""#""
                className={pageNav.license_agreement ? ""nav-link link-active w-[100%]"" : ""nav-link w-[100%]""}
              >
                License Agreement
              </Link>
            </li>
            <li className=""nav-item flex w-[100%]"">
              <Link href=""#"" className={pageNav.install ? ""nav-link w-[100%] link-active"" : ""nav-link w-[100%]""}>
                Install
              </Link>
            </li>
            <li className=""nav-item flex w-[100%]"">
              <Link href=""#"" className={pageNav.admin_account ? ""nav-link w-[100%] link-active"" : ""nav-link w-[100%]""}>
                Admin account
              </Link>
            </li>
            <li className=""nav-item flex w-[100%]"">
              <Link
                href=""#""
                className={pageNav.install_complete ? ""nav-link w-[100%] link-active"" : ""nav-link w-[100%]""}
              >
                Complete Installation
              </Link>
            </li>
          </ul>
        </div>
        <div className=""flex flex-col w-[100%] lg:w-[70%] md:w-[70%] items-center mt-4"">
          <div className=""block w-[100%] lg:w-[50%] bg-dark border-2 border-solid border-dark"">
            <div className=""block-container"">
              <div className=""block-header bg-dark-1"">
                <h1 className=""block-title text-sm text-white"">MyEcommerce installation</h1>
              </div>
              {serverRequirementsPage ? (
                <div className=""flex flex-col w-[100%] flex-wrap items-baseline  server-requirements"">
                  <div className=""p-5 flex flex-col flex-wrap items-baseline w-[100%]"">
                    <p>
                      Welcome to the MyEcommerce installation wizzard. This step will check for server requirements.
                    </p>
                    <section className=""flex flex-col w-[100%] flex-wrap"">
                      <h2 className=""text text-green-900 text-sm font-bold"">Minimum Requirements:</h2>
                      <dl className=""flex flex-row flex-wrap justify-between items-baseline w-[100%]"">
                        <div className=""grid grid-cols-2 w-[100%]"">
                          <dt className=""text-sm text-red-600 font-bold"">PHP Version {data.minimumVersion}:</dt>
                          <dd
                            className={
                              data.hasMinimumVersion
                                ? ""text-sm text-green-900 font-bold""
                                : ""text-sm text-red-600 font-bold""
                            }
                          >
                            {data.hasMinimumVersion
                              ? ""Your server has minimum php version""
                              : ""Your server does not meet the minimum php version!""}
                          </dd>
                          <dt className=""text-sm text-red-600 font-bold"">Supported DB (MySQL, PQSQL, SQLITE):</dt>
                          <dd
                            className={
                              data.hasSupportedDB
                                ? ""text-sm text-green-900 font-bold""
                                : ""text-sm text-red-600 font-bold""
                            }
                          >
                            {data.hasSupportedDB
                              ? ""Your server has supported Database driver""
                              : ""Your server does not have supported database driver""}
                          </dd>
                          <dt className=""text-sm text-red-600 font-bold"">Curl Extension enabled:</dt>
                          <dd
                            className={
                              data.hasCurlExtension
                                ? ""text-sm text-green-900 font-bold""
                                : ""text-sm text-red-600 font-bold""
                            }
                          >
                            {data.hasCurlExtension
                              ? ""Your server has enabled Curl extension""
                              : ""Your server does not have installed/enabled curl extension!""}
                          </dd>
                          <dt className=""text-sm text-red-600 font-bold"">cType extension enabled:</dt>
                          <dd
                            className={
                              data.hasCtypeExtension
                                ? ""text-sm text-green-900 font-bold""
                                : ""text-sm text-red-600 font-bold""
                            }
                          >
                            {data.hasCtypeExtension
                              ? ""Your server has enabled ctype extension""
                              : ""Your server does not have installed/enabled ctype extension""}
                          </dd>
                        </div>
                      </dl>
                      <div className=""flex flex-wrap flex-row bg-neutral-500 p-5 w-[100%]"">
                        <button
                          type=""button""
                          className={
                            isButtonDisabled
                              ? ""button button--disabled button--default text-center w-[100%]""
                              : ""button button--default text-center w-[100%]""
                          }
                          onClick={validateLicense}
                        >
                          {button}
                        </button>
                      </div>
                    </section>
                  </div>
                </div>
              ) : null}
              {licenseVerificationPage ? (
                <div className=""flex flex-col w-[100%] license"">
                  <div className=""p-10 w-[100%] flex flex-col items-baseline flex-wrap"">
                    <h2 className=""block-title text-sm text-white font-bold"">License Validation</h2>
                    <p>Copy &amp; paste the license key from customer area in the field below.</p>
                    <form onSubmit={checkLicense} className=""flex flex-col w-[100%] items-baseline"">
                      <div className=""control-group"">
                        <label htmlFor=""license_key"">License key:</label>
                        <div className=""control-input"">
                          <input
                            type=""text""
                            name=""license_key""
                            id=""license_key""
                            className={formerrors.license_key ? ""formInput input--error"" : ""formInput""}
                            placeholder=""XXXX-XXXX-XXXX-XXXX""
                            maxLength={19}
                            onChange={validateKey}
                          />
                          <span className=""error-text"">{formerrors.license_key}</span>
                        </div>
                        <div className=""flex flex-row flex-wrap bg-neutral-500 p-5 w-[100%]"">
                          <button
                            type=""submit""
                            disabled={isButtonDisabled}
                            className={
                              isButtonDisabled
                                ? ""button button--default button--disabled w-[100%] text-center""
                                : ""button button--default w-[100%] text-center""
                            }
                          >
                            {button}
                          </button>
                        </div>
                      </div>
                    </form>
                  </div>
                </div>
              ) : null}
              {licenseTermsPage ? (
                <div className=""flex w-[100%] flex-col flex-wrap items-baseline agreement"">
                  <div className=""flex w-[100%] flex-col items-baseline flex-wrap p-10"">
                    <h2 className=""text-sm text-white font-bold"">License Agreement</h2>
                    <div
                      className=""flex w-[100%] px-5 flex-row flex-wrap items-baseline border-2 border-dark border-solid""
                      style={{
                        height: 300 + ""px"",
                        overflowY: ""scroll"",
                      }}
                    >
                      <p>
                        This license agreement is between you as a ""Client"", ""Customer"" and MyEcommerce as
                        ""We"",""Us"",""Ours"", ""service provider"", ""provider"", ""Company"", ""Pixel Technologies Development"".
                      </p>
                      <h3 className=""text-sm text-gray-500 font-bold"">1.License usage</h3>
                      <ol>
                        <li>
                          The license grants you permission to use the software you purchased and modify on your own
                          needs. While you may modify the software you may{"" ""}
                          <b>not redistribute in whole or in parts, sell or resell.</b>
                        </li>
                        <li>
                          Each license permit you to use one software at a time. If you want to use your license
                          somewhere else on another domain, path, you'll need first to delete all files from the current
                          installation path.
                        </li>
                        <li>
                          You may run additional single copy of the software for development and testing purposes and
                          must not be public accessible, which means only you and your staff may access to it.
                        </li>
                        <li>
                          You are not allowed to{"" ""}
                          <b>
                            modify and remove copyright content without prior written consent from our side (ex
                            purchasing branding removal addon if available)
                          </b>
                        </li>
                      </ol>
                      <h3 className=""text-sm text-gray-500 font-bold"">3.License Suspension</h3>
                      <ol>
                        <li>
                          Your license(s) may be suspended/revoked/terminated if you:
                          <ul>
                            <li>Not follow this license agreement.</li>
                            <li>
                              Sell,resell,redistribute in whole or in parts the products associated with your license.
                            </li>
                            <li>Redistribute, share, resell any of ours products on your website.</li>
                          </ul>
                        </li>
                      </ol>
                      <h3 className=""text-sm font-bold text-gray-500"">4.Refund Policy</h3>
                      <ol>
                        <li>
                          For digital software(s) once downloaded, we <b>do not accept any refund.</b>
                          If you want to try the software and make sure that the software is for you, you can request a
                          demo instance.
                        </li>
                      </ol>
                    </div>
                    <form onSubmit={checkTables} className=""flex flex-col w-[100%] flex-wrap items-baseline"">
                      <div
                        className={
                          formerrors.license_agreement
                            ? ""flex flex-row w-[100%] flex-wrap items-baseline input--error""
                            : ""flex flex-row w-[100%] flex-wrap items-baseline""
                        }
                      >
                        <input
                          type=""checkbox""
                          id=""license_agreement""
                          name=""license_agreement""
                          className=""lagreement""
                          onClick={handleCheckbox}
                        />
                        <label htmlFor=""license_agreement"" className=""w-[95%]"">
                          I agree to the license terms
                        </label>
                        <span className=""error-text"">{formerrors.license_agreement}</span>
                      </div>
                      <div className=""control-group"">
                        <div className=""flex w-[100%] flex-row bg-neutral-500 p-10"">
                          <button
                            type=""submit""
                            className={
                              isButtonDisabled
                                ? ""button button--disabled button--default w-[100%] text-center""
                                : ""button button--default w-[100%] text-center""
                            }
                          >
                            {button}
                          </button>
                        </div>
                      </div>
                    </form>
                  </div>
                </div>
              ) : null}
              {installStatusPage ? (
                <div className=""flex w-[100%] flex-col p-10 items-baseline flex-wrap install-status"">
                  <h3 className=""text-sm text-white font-bold"">Install status</h3>
                  <div className=""flex flex-row items-baseline flex-wrap w-[100%] p-5  justify-start md:justify-center lg:justify-center"">
                    <progress className=""install-progress"" max=""100"" value={installStatus}></progress>
                  </div>
                  <div
                    className=""flex flex-col items-baseline w-[100%] p-5 border-1 border-solid border-dark install-details""
                    style={{
                      height: ""300px"",
                      overflowY: ""scroll"",
                    }}
                  >
                    {installDetails ? Object.keys(installDetails).map((k) => <p key={k}>{installDetails[k]}</p>) : null}
                  </div>
                  <form className=""flex flex-col w-[100%] flex-wrap items-baseline"">
                    <div className=""flex w-[100%] bg-neutral-600 p-10 w-[100%]"">
                      <button
                        type=""submit""
                        disabled={isButtonDisabled}
                        className={
                          isButtonDisabled
                            ? ""button button--disabled button--default w-[100%] text-center""
                            : ""button button--default w-[100%] text-center""
                        }
                      >
                        {button}
                      </button>
                    </div>
                  </form>
                </div>
              ) : null}
            </div>
          </div>
        </div>
      </div>
    </>
  );
}
"
PLSAmqwk,Untitled,PandemoniumHK,Kotlin,Tuesday 25th of June 2024 03:25:22 PM CDT,"import xyz.jpenilla.resourcefactory.bukkit.BukkitPluginYaml

plugins {
    java
    `java-library`
    id(""io.papermc.paperweight.userdev"") version ""1.7.1""
    id(""xyz.jpenilla.run-paper"") version ""2.3.0"" // Adds runServer and runMojangMappedServer tasks for testing
    id(""xyz.jpenilla.resource-factory-bukkit-convention"") version ""1.1.1"" // Generates plugin.yml based on the Gradle config

    id(""io.github.goooler.shadow"") version ""8.1.7""
}

group = ""io.papermc.paperweight""
version = ""1.0.0-SNAPSHOT""
description = ""Test plugin for paperweight-userdev""

java {
  // Configure the java toolchain. This allows gradle to auto-provision JDK 21 on systems that only have JDK 11 installed for example.
  toolchain.languageVersion = JavaLanguageVersion.of(21)
}

// 1)
// For >=1.20.5 when you don't care about supporting spigot
// paperweight.reobfArtifactConfiguration = io.papermc.paperweight.userdev.ReobfArtifactConfiguration.MOJANG_PRODUCTION

// 2)
// For 1.20.4 or below, or when you care about supporting Spigot on >=1.20.5
// Configure reobfJar to run when invoking the build task

//tasks.assemble {
//  dependsOn(tasks.reobfJar)
//}
repositories {
  maven {
    name = ""xenondevs""
    url = uri(""https://repo.xenondevs.xyz/releases"")
  }
}

dependencies {
  paperweight.paperDevBundle(""1.21-R0.1-SNAPSHOT"")
  // paperweight.foliaDevBundle(""1.21-R0.1-SNAPSHOT"")
  // paperweight.devBundle(""com.example.paperfork"", ""1.21-R0.1-SNAPSHOT"")

    implementation(""xyz.xenondevs.invui:invui:1.32"")
    //implementation(""xyz.xenondevs.invui:inventory-access-r20:1.32"")
    //implementation(""com.jeff-media:MorePersistentDataTypes:2.4.0"")

    compileOnly(""org.projectlombok:lombok:1.18.32"")
    annotationProcessor(""org.projectlombok:lombok:1.18.32"")
}

tasks.shadowJar {
    manifest {
        attributes[""paperweight-mappings-namespace""] = ""mojang""
    }
    mergeServiceFiles()
    relocate(""xyz.xenondevs.invui"", ""net.seyarada.dawn.invui"")
}

/*
tasks.jar {
    manifest {
        attributes[""paperweight-mappings-namespace""] = ""mojang""
    }
}

 */

tasks {
  compileJava {
    // Set the release flag. This configures what version bytecode the compiler will emit, as well as what JDK APIs are usable.
    // See https://openjdk.java.net/jeps/247 for more information.
    options.release = 21
  }
  javadoc {
    options.encoding = Charsets.UTF_8.name() // We want UTF-8 for everything
  }

  // Only relevant when going with option 2 above
  /*
  reobfJar {
    // This is an example of how you might change the output location for reobfJar. It's recommended not to do this
    // for a variety of reasons, however it's asked frequently enough that an example of how to do it is included here.
    outputJar = layout.buildDirectory.file(""libs/PaperweightTestPlugin-${project.version}.jar"")
  }
   */
}

// Configure plugin.yml generation
// - name, version, and description are inherited from the Gradle project.
bukkitPluginYaml {
    main = ""net.seyarada.dawn.TestPlugin""
    load = BukkitPluginYaml.PluginLoadOrder.STARTUP
    authors.add(""Author"")
    apiVersion = ""1.21""

    //libraries = listOf(""com.jeff-media:MorePersistentDataTypes:2.4.0"")
}

"
yBMCDhwd,reCAPTCHA script,Barnabas1,JavaScript,Tuesday 25th of June 2024 03:21:00 PM CDT,"<!-- Add reCAPTCHA Script Directly -->
<script src=""https://www.google.com/recaptcha/api.js?render=6Ld8KSMpAAAAAL1ITylghSdtPwT2Qy8JB8eIeCG6""></script>

<!-- Add reCAPTCHA HTML -->
<input type=""hidden"" name=""g-recaptcha-response"" id=""g-recaptcha-response"">

<!-- Add custom script to execute reCAPTCHA -->
<script>
    document.addEventListener('DOMContentLoaded', function() {
        console.log('DOM fully loaded and parsed');
        if (typeof grecaptcha !== 'undefined') {
            <!--console.log('grecaptcha is defined');-->
            grecaptcha.ready(function() {
                <!--console.log('grecaptcha ready');-->
                grecaptcha.execute('6Ld8KSMpAAAAAL1ITylghSdtPwT2Qy8JB8eIeCG6', {action: 'checkout'}).then(function(token) {
                    <!--console.log('reCAPTCHA token generated:', token);-->
                    var recaptchaResponse = document.getElementById('g-recaptcha-response');
                    recaptchaResponse.value = token;
                });
            });
        } else {
            console.log('grecaptcha is not defined');
        }
    });
</script>"
yNDNU6KR,Untitled,swaggboi,JavaScript,Tuesday 25th of June 2024 03:16:38 PM CDT,"let bodyStyle = document.body.style;

switch (new Date().getMonth()) {
    case 10:
        bodyStyle.backgroundImage = ""url('/images/halloween_background_1.gif')"";
    case 11:
        bodyStyle.backgroundImage = ""url('/images/jwsfp1.gif')"";
    case 12:
        bodyStyle.backgroundImage = ""url('/images/christmas.gif')"";
}
"
CTb9jQy3,cards html,demoo,HTML,Tuesday 25th of June 2024 03:14:10 PM CDT,"<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Playing Cards Canvas App with Toolbar</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        #toolbar {
            width: 800px;
            padding: 10px;
            background-color: #f0f0f0;
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 10px;
        }
        select, button {
            padding: 5px;
        }
        canvas {
            border: 1px solid black;
        }
    </style>
</head>
<body>
    <div id=""toolbar"">
        <select id=""suitSelect"">
            <option value=""‚ô†"">‚ô† Spades</option>
            <option value=""‚ô•"">‚ô• Hearts</option>
            <option value=""‚ô£"">‚ô£ Clubs</option>
            <option value=""‚ô¶"">‚ô¶ Diamonds</option>
        </select>
        <select id=""valueSelect""></select>
        <button id=""addCard"">Add Card</button>
    </div>
    <canvas id=""cardCanvas"" width=""800"" height=""600""></canvas>
    <script>
        const canvas = document.getElementById('cardCanvas');
        const ctx = canvas.getContext('2d');
        const suitSelect = document.getElementById('suitSelect');
        const valueSelect = document.getElementById('valueSelect');
        const addCardButton = document.getElementById('addCard');

        class Card {
            constructor(suit, value, x, y) {
                this.suit = suit;
                this.value = value;
                this.x = x;
                this.y = y;
                this.width = 100;
                this.height = 140;
                this.isDragging = false;
                this.stack = [this];
            }

            draw() {
                ctx.fillStyle = 'white';
                ctx.strokeStyle = 'black';
                ctx.lineWidth = 2;
                ctx.fillRect(this.x, this.y, this.width, this.height);
                ctx.strokeRect(this.x, this.y, this.width, this.height);

                ctx.fillStyle = (this.suit === '‚ô•' || this.suit === '‚ô¶') ? 'red' : 'black';
                ctx.font = '20px Arial';
                ctx.fillText(this.value, this.x + 10, this.y + 30);
                ctx.fillText(this.suit, this.x + 10, this.y + 60);

                ctx.font = '40px Arial';
                ctx.fillText(this.suit, this.x + this.width / 2 - 20, this.y + this.height / 2 + 20);

                if (this.stack.length > 1) {
                    ctx.fillStyle = 'black';
                    ctx.font = '16px Arial';
                    ctx.fillText(this.stack.length, this.x + this.width - 25, this.y + this.height - 10);
                }
            }

            isPointInside(x, y) {
                return x >= this.x && x <= this.x + this.width &&
                       y >= this.y && y <= this.y + this.height;
            }
        }

        const suits = ['‚ô†', '‚ô•', '‚ô£', '‚ô¶'];
        const values = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K'];
        const cards = [];

        // Populate value select
        values.forEach(value => {
            const option = document.createElement('option');
            option.value = value;
            option.textContent = value;
            valueSelect.appendChild(option);
        });

        function getRandomCard() {
            const suit = suits[Math.floor(Math.random() * suits.length)];
            const value = values[Math.floor(Math.random() * values.length)];
            return { suit, value };
        }

        // Create 5 random cards
        for (let i = 0; i < 5; i++) {
            const { suit, value } = getRandomCard();
            cards.push(new Card(suit, value, 50 + i * 150, 50));
        }

        function drawCards() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            cards.forEach(card => card.draw());
        }

        function drawTooltip(card, x, y) {
            const tooltipWidth = 150;
            const tooltipHeight = 20 * card.stack.length + 10;
            
            ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';
            ctx.fillRect(x, y, tooltipWidth, tooltipHeight);
            ctx.strokeStyle = 'black';
            ctx.strokeRect(x, y, tooltipWidth, tooltipHeight);
            
            ctx.fillStyle = 'black';
            ctx.font = '14px Arial';
            card.stack.forEach((c, index) => {
                ctx.fillText(`${c.value}${c.suit}`, x + 5, y + 20 + (index * 20));
            });
        }

        let draggedCard = null;
        let offsetX, offsetY;
        let hoveredCard = null;

        canvas.addEventListener('mousedown', (e) => {
            const rect = canvas.getBoundingClientRect();
            const x = e.clientX - rect.left;
            const y = e.clientY - rect.top;

            for (let i = cards.length - 1; i >= 0; i--) {
                if (cards[i].isPointInside(x, y)) {
                    draggedCard = cards[i];
                    offsetX = x - draggedCard.x;
                    offsetY = y - draggedCard.y;
                    
                    cards.splice(i, 1);
                    cards.push(draggedCard);
                    break;
                }
            }
        });

        canvas.addEventListener('mousemove', (e) => {
            const rect = canvas.getBoundingClientRect();
            const x = e.clientX - rect.left;
            const y = e.clientY - rect.top;

            if (draggedCard) {
                draggedCard.x = x - offsetX;
                draggedCard.y = y - offsetY;
            } else {
                hoveredCard = null;
                for (let i = cards.length - 1; i >= 0; i--) {
                    if (cards[i].isPointInside(x, y)) {
                        hoveredCard = cards[i];
                        break;
                    }
                }
            }
            drawCards();
            if (hoveredCard) {
                drawTooltip(hoveredCard, x + 10, y + 10);
            }
        });

        canvas.addEventListener('mouseup', (e) => {
            if (draggedCard) {
                const rect = canvas.getBoundingClientRect();
                const x = e.clientX - rect.left;
                const y = e.clientY - rect.top;

                for (let i = cards.length - 1; i >= 0; i--) {
                    const targetCard = cards[i];
                    if (targetCard !== draggedCard && targetCard.isPointInside(x, y)) {
                        targetCard.stack = targetCard.stack.concat(draggedCard.stack);
                        cards.pop();
                        break;
                    }
                }
            }
            draggedCard = null;
        });

        canvas.addEventListener('dblclick', (e) => {
            const rect = canvas.getBoundingClientRect();
            const x = e.clientX - rect.left;
            const y = e.clientY - rect.top;

            for (let i = cards.length - 1; i >= 0; i--) {
                const card = cards[i];
                if (card.isPointInside(x, y) && card.stack.length > 1) {
                    const poppedCard = card.stack.pop();
                    poppedCard.x = card.x + 20;
                    poppedCard.y = card.y + 20;
                    poppedCard.stack = [poppedCard];
                    cards.push(poppedCard);
                    break;
                }
            }
            drawCards();
        });

        addCardButton.addEventListener('click', () => {
            const suit = suitSelect.value;
            const value = valueSelect.value;
            const x = Math.random() * (canvas.width - 100);
            const y = Math.random() * (canvas.height - 140);
            cards.push(new Card(suit, value, x, y));
            drawCards();
        });

        // Initial draw
        drawCards();
    </script>
</body>
</html>"
jJ65vWN0,CreateFullQuote - Vouch,vwjugow,JSON,Tuesday 25th of June 2024 03:06:10 PM CDT,"{
    ""api_key"": ""{{apiKey}}"",
    ""policy_type_id"": ""3f364235-6798-4934-82f0-4c993e818505"",
    ""effective_date"": ""2024-07-14"",
    ""term_type"": ""1 Year"",
    ""agent_id"": ""7fbf7165-45cd-4c35-a53e-0a4c988d5fff"",
    ""underwriting_questions"": [
        {
            ""question_id"": ""449191ba-92b0-4e1b-b24f-caaaf8be1e59"",
            ""yes_no_answer"": ""no"",
            ""explanation"": """"
        },
        {
            ""question_id"": ""48ebdd02-2607-4cd3-ac19-441a23f13df9"",
            ""yes_no_answer"": ""no"",
            ""explanation"": """"
        },
        {
            ""question_id"": ""b49fd436-6c0e-47d7-ab04-d0b899394f83"",
            ""yes_no_answer"": ""no"",
            ""explanation"": """"
        },
        {
            ""question_id"": ""65461353-f2fe-4c6f-97d9-ff1110506490"",
            ""yes_no_answer"": ""no"",
            ""explanation"": """"
        }
    ],
    ""items"": [
        {
            ""item_id"": ""45c11b47-f586-47d4-b0d5-7779bfbf8dd5"",
            ""limit"": 1000
        }
    ],
    ""sub_lines"": [
        {
            ""sub_line_id"": ""e7fa4c26-474d-46be-9bd4-263cdb8c1322"",
            ""items"": [
                {
                    ""item_id"": ""11622d76-3f2c-447e-a542-8542e098e70c"",
                    ""item_data"": {
                        ""user_inputs"": {
                            ""d_and_o_premium"": 123.45,
                            ""epl_premium"": 0,
                            ""fiduciary_premium"": 0,
                            ""multi_policy_discount"": -10,
                            ""renewal_count"": 0,
                            ""partnership_disc"": 0,
                            ""payment_frequency"": 0,
                            ""mpl_rounding_adj"": 0,
                            ""mpl_min_prem_adj"": 0
                        }
                    }
                }
            ]
        }
    ],
    ""billing_information"": {
        ""billing_schedule"": ""Annual""
    }
}"
AhKtxL4t,main.lua,DeathlyBower959,Lua,Tuesday 25th of June 2024 03:00:33 PM CDT,"local websocketUrl = ""ws://localhost:2828""
local reconnectInterval = 5

local debugMode = false -- Set to true for debugging, false for normal execution

local osName = ""Project Bore OS""
local version = ""v1.0.0""
function term.reset()
    term.clear()
    term.setCursorPos(1, 1)
end

local function printHeader()
    term.reset()
    print(osName .. (debugMode and "" (debug)"" or """"))
    print(version)
    print(""\n~~~~~~~~~"")
end

local function printConnecting()
    printHeader()
    print(""\nConnecting to "" .. websocketUrl .. '\n')
end

local function printReconnecting()
    print(""\nConnection lost."")
    print(""Connecting to "" .. websocketUrl .. '\n')
end

local direction = nil
local dirs = {""north"", ""east"", ""south"", ""west""}
local function calibrate()
    local attempts = 0

    local x1, _, z1 = gps.locate()
    local success = false
    for _ = 0, 4 do
        if not success then
            turtle.turnLeft()
            success = turtle.forward()
        end
    end
    local x2, _, z2 = gps.locate()

    local xdiff = x2 - x1
    local zdiff = z2 - z1

    if zdiff == -1 then
        return 1
    elseif zdiff == 1 then
        return 3
    elseif xdiff == 1 then
        return 2
    elseif xdiff == -1 then
        return 4
    else
        print(""Failed to move..."")
        attempts = attempts + 1

        if attempts <= 3 then
            if not turtle.inspectUp() then
                turtle.up()
                return calibrate() -- Dangerous nesting, but its limited via attempts
            end
        else
            print(""Unable to calibrate (obstructed)"")
        end
    end
end

function turtle.left()
    turtle.turnLeft()
    direction = (direction - 1) % 3
end

function turtle.right()
    turtle.turnRight()
    direction = (direction + 1) % 3
end

local function connect()
    while true do
        printConnecting()
        local ws, err = http.websocket(websocketUrl)
        if ws then
            direction = calibrate()
            turtle.back()

            local x, y, z = gps.locate()
            print(""Position: "" .. x .. "", "" .. y .. "", "" .. z .. "" -> "" ..
                      dirs[direction])

            function ws.transmit(dataType, data)
                local message = textutils.serializeJSON({
                    type = dataType,
                    data = data
                })
                ws.send(message)

            end

            return ws
        else
            print(""\nConnection failed: "" .. err)
            print(""Reconnecting in "" .. reconnectInterval .. "" seconds..."")
            sleep(reconnectInterval)
        end
    end
end

local function sendPosition(ws)
    local x, y, z = gps.locate() -- Or use turtle.getBlockPosition()
    if x then
        ws.transmit(""pos"", {x = x, y = y, z = z, direction})
    else
        print(""\nGPS not available"")
    end
end

local function sendWorldState(ws)
    local x, y, z = gps.locate()
    local blocks = {}

    -- Check block in front of the turtle
    local success, blockInfo = turtle.inspect()
    if success then
        local blockData = {
            id = blockInfo.name,
            pos = {x = x, y = y, z = z + 1} -- Assuming turtle is facing towards positive z
        }
        table.insert(blocks, blockData)
    end

    -- Check block above the turtle
    success, blockInfo = turtle.inspectUp()
    if success then
        local blockData = {id = blockInfo.name, pos = {x = x, y = y + 1, z = z}}
        table.insert(blocks, blockData)
    end

    -- Check block below the turtle
    success, blockInfo = turtle.inspectDown()
    if success then
        local blockData = {id = blockInfo.name, pos = {x = x, y = y - 1, z = z}}
        table.insert(blocks, blockData)
    end

    -- Transmit the collected block data
    ws.transmit(""world"", {blocks = blocks})
end

local function handleMessages(ws)
    while true do
        local event, url, message = os.pullEvent(""websocket_message"")
        if event == ""websocket_message"" and url == websocketUrl then
            local ok, data = pcall(textutils.unserializeJSON, message)
            if ok then
                if data.type == ""exec"" then
                    if debugMode then
                        print(""\n"" .. data.data)
                    else
                        local status, err = pcall(load(data.data))
                        if not status then
                            print(""Failed to execute command: "" .. data.data ..
                                      ""\n"" .. err)
                        end
                    end
                elseif data.type == ""print"" then
                    print(data.data)
                end

                sendPosition(ws)
                sendWorldState(ws)
            else
                print(""Failed to parse JSON: "" .. data)
            end
        end
    end
end

local function handleClose()
    while true do
        local event, url, reason = os.pullEvent(""websocket_closed"")
        if event == ""websocket_closed"" and url == websocketUrl then
            print(""\nWebSocket closed: "" .. reason)
            printReconnecting()
            return
        end
    end
end

local function main()
    turtle.select(1)
    while not turtle.getItemDetail(1) or
        not (turtle.getItemDetail(1).name ==
            ""computercraft:wireless_modem_advanced"") do
        term.reset()
        print(""Waiting for ender modem..."")
        os.sleep(0.5)
    end
    turtle.equipLeft()
    print(""Received ender modem!"")

    while not gps.locate() do
        term.reset()
        print(""Waiting for gps setup..."")
        os.sleep(0.5)
    end
    print(""Recieved gps signal!"")

    while not (turtle.getItemCount(1) >= 8) do
        term.reset()
        print(""Waiting for fuel (min 8)..."")
        os.sleep(0.5)
    end
    print(""Recieved fuel ("" .. turtle.getFuelLevel() .. "" blocks)!"")
    turtle.refuel()

    print(""\nAwaiting confirmation (press any key to continue)..."")
    while not os.pullEvent(""key"") do os.sleep(0.25) end

    while true do
        local ws = connect()
        parallel.waitForAny(function() handleMessages(ws) end, handleClose)
    end
end

printHeader()
main()
"
CsELh5gb,Codes SK,nickgamerofc,JSON,Tuesday 25th of June 2024 02:32:49 PM CDT,"{
  ""title"": ""Codes"",
  ""code"": ""title""
}"
Z9JBYeuR,wishing well thread,spacialfries,HTML,Tuesday 25th of June 2024 02:08:31 PM CDT,"<p class=""text-center""><big>This is a continuation of the <a href=""https://toyhou.se/~forums/13973.character-games-freebies/274018.design-wishing-well?page=161#post-8011563"">original thread</a> by nightlustrous.</big></p>

<p class=""text-warning text-center"">
     <b>SECRET PASSWORD:</b><br>
     When making your wish, please include a ü™ô coin and the phrase ""I wish for"" before your wish!<br>
     <i>If you don't do this, <i>the Wishing Well will not acknowledge your wish</i>.</i><br>
     <sub>If you can't use emojis on your device, you can copy one, or just type the *action* of tossing your coin!</sub>
</p>

<hr>

<p class=""text-center"">
     <img src=""https://images.neopets.com/images/wishingwell.gif"" class=""rounded-circle"">
</p>
<br>
<h1 class=""text-center"">
     ü™ô Welcome to the Design Wishing Well! ü™ô
</h1>

<hr>

<div class=""row d-flex justify-content-center"">
     <div class=""alert m-1 py-2 px-3 py-auto bg-dark"">
         <span class=""h1 text-danger""><i class=""fa-solid fa-ban""></i> HARD RULES:</span><br>
         <ul>
             <li>This thread only covers character wishes, not art.</li>
             <li>Don't ask for ""art quality"". It's discouraging to artists.</li>
             <li>No AI, at all. AI was <a href=""https://petapixel.com/2022/12/21/midjourny-founder-admits-to-using-a-hundred-million-images-without-consent/"">confirmed to steal art</a> from real artists.</li>
             <li>This thread is minor-safe; do not request or send NSFW.</li>
             <li>You may only choose one design from bulk offers.</li>
             <li>Don't offer on wishes that already have a pending offer.</li>
             <li>Ghosting offers (no reply for 1 month) voids your wish.</li>
             <li>No gore or body horror unless specifically requested.</li>
             <li>Don't ask for designs inspired by someone else's characters.</li>
             <li><u>Upselling freebies will result in an immediate ban and report.</u></li>
         </ul>
     </div>
     <div class=""alert m-1 py-2 px-3 py-auto bg-dark"">
         <span class=""h1 text-warning""><i class=""fa-solid fa-pencil""></i> NOTES:</span><br>
         <ul>
             <li><u>One wish at a time.</u> Wait 2 weeks to make a new wish.</li>
             <li>You may update or change your current wish at any time.</li>
             <li>Let us know if you change your username; broken links will be voided.</li>
             <li>Edited pings will not send notifications; you will need to repost.</li>
             <li>Be polite if you decline an offer.</li>
             <li>If ghosted or declined, you can keep or re-offer the character.</li>
             <li>Check the designer's TOS and blacklist before trading characters.</li>
             <li>Specifying (humanoid, anthro, feral, etc.) your wish makes it easier to fill.</li>
             <li>Characters need at least one drawn image; not just dollmaker art.</li>
         </ul>
     </div>
     <div class=""alert m-1 py-2 px-3 py-auto bg-dark"">
         <span class=""h1 text-success""><i class=""fa-solid fa-check""></i> OKAY TO DO:</span><br>
         <ul>
             <li>Customs are accepted - make a new post when it's complete.</li>
             <li>Custom offers should be done within 2 months.</li>
             <li>Bases are ok with effort; use matching brushes, clean up, etc.</li>
             <li>You can add links or moodboards to your wish.</li>
             <li>Using IC mode in your offers helps make your offer easily visible.</li>
         </ul>
         <ul>
             
             <li>Use the secret password, or your wish won't be accepted.</li>
         </ul>
     </div>
</div>

<hr>

<h4 class=""text-center"">NO CLOSED SPECIES - sorry, but varying TOS are hard to deal with and I don't want anyone getting in trouble.</h4>

<hr>

<h3 class=""text-center text-success"">The wishing well has many older wishes that haven't been granted...<br>You can see them on the Wish Board here!</h3>

<p class=""text-center text-primary"">
     <i>REPLACE LINK HERE</i>
</p>

<p class=""text-center"">
     <span class=""text-warning""><b>Golden Wishes</b></span> are wishes made by someone who granted someone else's wish!<br>
     It would be very nice if you could grant their wish as a reward!
</p>"
CQ7q3VxQ,Untitled,swaggboi,JavaScript,Tuesday 25th of June 2024 02:00:56 PM CDT,"// Doesn't work
let background = document.body.style.backgroundImage;
background     = ""url('/images/christmas.gif')"";

// Does
let background             = document.body.style;
background.backgroundImage = ""url('/images/christmas.gif')"";"
aAaAZ9YR,Incognito,adibahbab4108,INI file,Tuesday 25th of June 2024 01:47:51 PM CDT,"#PC CONFIGURATION
PC1> ip 192.168.1.4/24 192.168.1.3
PC2> ip 192.168.1.5/24 192.168.1.3
PC3> ip 192.168.1.6/24 192.168.1.3
PC4> ip ip 192.168.1.7/24 192.168.1.3
PC5> ip 192.168.1.10/24 192.168.1.3
PC6> ip ip 192.168.1.20/24 192.168.1.3

#R1(ISP1) CONFIGURATION
conf t
interface f0/0
ip add 192.168.1.1 255.255.255.0
no sh

int lo 0
ip add 8.8.8.8 255.0.0.0

int f0/0
vrrp 1 ip 192.168.1.3

#R2(ISP2) CONFIGURATION
conf t
interface f0/0
ip add 192.168.1.2 255.255.255.0
no sh 		#Turn on the router
shut 		#Turn of the router
int lo 0
ip add 8.8.8.8 255.0.0.0

int f0/0
vrrp 1 ip 192.168.1.3
exit 		#exit from configuration

#SHOW CONFIGURATION
sh ip int br 	#for router
show ip 		#for PCs
show vrrp		#vrrp status"
iVVYUUQ6,GreaseMonkey user script to display HN comments side by side with the linked article,shdon,JavaScript,Tuesday 25th of June 2024 01:21:11 PM CDT,"// ==UserScript==
// @name        HN side-by-side
// @namespace   https://www.shdon.com/
// @description Show Hacker News linked articles and comments side by side.
// @include     https://news.ycombinator.com/*
// @run-at      document-end
// @version     1.0.3
// @grant       none
// ==/UserScript==
var sxs = {
	""vpw"" : window.innerWidth,
	""resizing"" : false
};

function sxs_mousedown (event)
{
	event.stopPropagation ();
	event.preventDefault ();
	sxs.vpw = window.innerWidth;
	sxs.resizing = true;
}

function sxs_mousemove (event)
{
	if (!sxs.resizing) return;
	event.stopPropagation ();
	event.preventDefault ();
	
	//Calculate position
	var x = event.clientX;
	var pct = x * 100.0 / sxs.vpw;
	
	//Adjust elements accordingly
	document.getElementById ('sxs-site').style.flexBasis = pct + '%';
	document.getElementById ('sxs-hn').style.flexBasis = (100.0 - pct) + '%';
}

function sxs_mouseup (event)
{
	if (!sxs.resizing) return;
	event.stopPropagation ();
	event.preventDefault ();
	sxs.resizing = false;
}

function sxs_add_styles ()
{
	//Don't allow double running
	if (document.getElementById ('sxs-styles')) return;
	
	//Create style
	var css = document.createElement ('STYLE');
	css.id = 'sxs-styles';
	css.type = 'text/css';
	css.innerHTML = `
		html:has(#sxs-site) { height: 100vh; margin: 0; overflow: hidden; padding: 0; width: 100vw; }
		body:has(#sxs-site) { display: flex; flex-direction: row; height: 100vh; margin: 0; overflow: hidden; padding: 0; width: 100vw; }
		#sxs-site { border: 0; flex: 1 1 50%; }
		#sxs-divider { background: #CCC; border-inline: 1px solid #000; cursor: ew-resize; flex: 0 0 4px; overflow: visible; position: relative; }
		.sxs-link { display: inline-block; font-size: 80%; font-weight: bold; margin-left: 1ex; }
		#sxs-site ~ center { flex: 1 1 50%; margin: 0; overflow: auto; padding: 8px; }
		#sxs-close { background: #222; border: 1px solid #FFF; border-radius: 50%; color: #FFF; height: 1.5em; left: 50%; line-height: 1.5em; position: absolute; text-align: center; top: 8px; transform: translateX(-50%); transition: background 0.5s ease; width: 1.5em; z-index: 1; }
		#sxs-close:hover { background: #444; }
	`;
	document.head.append (css);
}

function sxs_activate ()
{
	//Don't allow double running
	if (document.getElementById ('sxs-site')) return;
	
	//Get the URL
	var sxs_url = document.querySelector('.titleline a').href;
	
	//Create a divider
	var div = document.createElement ('DIV');
	div.id = 'sxs-divider';
	div.addEventListener ('mousedown', sxs_mousedown);
	document.body.prepend (div);
	
	//Create the iframe
	var ifr = document.createElement ('IFRAME');
	ifr.id = 'sxs-site';
	ifr.scrolling = 'auto';
	ifr.src = sxs_url;
	document.body.prepend (ifr);
	
	//Place the main HN comments side by side
	var hn = document.body.querySelector (':scope > center');
	hn.id = 'sxs-hn';
	
	//Divider event handlers
	sxs.vpw = window.innerWidth;
	sxs.resizing = false;
	
	//Add a close button
	var closer = document.createElement ('A');
	closer.id = 'sxs-close';
	closer.innerHTML = '&times;';
	closer.href = '#0';
	closer.addEventListener ('click', function (event)
	{
		event.stopPropagation ();
		event.preventDefault ();
		sxs_deactivate ();
	});
	div.append (closer);
}

function sxs_deactivate ()
{
	document.getElementById ('sxs-site').remove ();
	document.getElementById ('sxs-divider').remove ();
	document.getElementById ('sxs-close').remove ();
}

(function ()
{
	//Only on suitable pages
	var curpage = window.location.pathname;
	
	//Make sure styles are available
	sxs_add_styles ();
	
	//Append SxS link to overview pages
	if ([ '/', '/news', '/newest', '/past', '/show' ].indexOf (curpage) >= 0)
	{
		//Don't allow double running
		if (document.querySelectorAll ('.sxs-link').length) return;
		
		//Find all titles
		var titles = document.querySelectorAll ('.titleline');
		titles.forEach (function (elem)
		{
			//Get information for link
			var tr = elem.closest ('tr.athing[id]');
			
			//Check for a link to HN itself
			var a = elem.querySelector (':scope a');
			if (a.attributes['href'].nodeValue.substr (0, 8) === 'item?id=') return;
			
			//Create a side-by-side link
			var link = document.createElement ('A');
			link.className = 'sxs-link';
			link.innerHTML = 'SxS';
			link.href = 'https://news.ycombinator.com/item?sxs=1&id=' + encodeURIComponent (tr.id);
			elem.append (link);
		});
	}
	
	//Include an iframe on the page
	var search = window.location.search.substr (1).split ('&');
	if (curpage == '/item')
	{
		//Allow activation after the fact
		var title = document.querySelector ('.titleline');
		var tr = title.closest ('tr.athing[id]');
		
		//Check for a link to HN itself
		var a = title.querySelector (':scope a');
		if (a.attributes['href'].nodeValue.substr (0, 8) === 'item?id=') return;
		
		//Create a side-by-side link
		var link = document.createElement ('A');
		link.className = 'sxs-link';
		link.innerHTML = 'SxS';
		link.href = '#0';
		link.addEventListener ('click', function (event)
		{
			event.stopPropagation ();
			event.preventDefault ();
			sxs_activate ();
		});
		title.append (link);
		
		if (search.indexOf ('sxs=1') >= 0)
		{
			//Activation by URL parameter
			sxs_activate ();
		}
		
		document.body.addEventListener ('mousemove', sxs_mousemove);
		document.body.addEventListener ('mouseup', sxs_mouseup);
	}
})();
"
3nVCHLgi,Untitled,chemelli74,Python,Tuesday 25th of June 2024 01:18:11 PM CDT,"- platform: template
  sensors:
    custom_devices_unavailable:
      friendly_name: Device non disponibili
      unique_id: custom_devices_unavailable
      value_template: ""{%- set entities_excluded = ['media_player.bravia_kdl_46hx855', 'media_player.tv_samsung_tv_q85_series_55'] -%}
{%- set devices_excluded = ['Anova Precision Cooker'] -%}
{%- set devices = namespace(id=[], name=[]) -%}
{%- for item in states if item.entity_id != 'sensor.custom_devices_unavailable' -%}
  {%- if item.entity_id not in entities_excluded and
         item.state == 'unavailable' and
         not ( item.entity_id.startswith('switch.') and item.entity_id.endswith('_shuffle_switch')) and
         not ( item.entity_id.startswith('switch.') and item.entity_id.endswith('_repeat_switch'))
   -%}
      {%- set dev_id = device_id(item.entity_id) -%}
      {%- set dev_name = device_attr(dev_id, 'name' ) -%}
      {%- if dev_name not in devices_excluded -%}
        {%- set devices.name = devices.name + [dev_name] -%}
      {%- endif -%}
  {%- endif -%}
{%- endfor -%}
{{ devices.name | sort | unique | list }}""
      icon_template: 'mdi:list-box-outline'"
yFx2VMPr,relative time plus,NicolaReina,YAML,Tuesday 25th of June 2024 12:54:14 PM CDT,"{#
  set phrases to be used in the relative_time_period macro 
  one list item per language, each time fraction contains a list with the singular, plural and abbriviated phrase 
  combine contains the text to combine the last time fraction, and error the text to display on wrong date input
#}
{%- set _time_period_phrases = [
                                {
                                  'language': 'en',
                                  'phrases':
                                  {
                                    'year': ['year', 'years', 'yr'],
                                    'month': ['month', 'months', 'mth'],
                                    'week': ['week', 'weeks', 'wk'],
                                    'day': ['day', 'days', 'day'],
                                    'hour': ['hour', 'hours', 'hr'],
                                    'minute': ['minute', 'minutes', 'min'],
                                    'second': ['second', 'seconds', 'sec'],
                                    'millisecond': ['millisecond', 'milliseconds', 'ms'],
                                    'combine': 'and',
                                    'error': 'Invalid date'
                                  }
                                },
                                {
                                  'language': 'pl',
                                  'phrases':
                                  {
                                    'year': ['rok', 'lat', 'r'],
                                    'month': ['miesiƒÖc', 'miesiƒôcy', 'msc'],
                                    'week': ['tydzie≈Ñ', 'tygodni', 'tyg'],
                                    'day': ['dzie≈Ñ', 'dni', 'dzie≈Ñ'],
                                    'hour': ['godzina', 'godzin', 'godz'],
                                    'minute': ['minuta', 'minut', 'min'],
                                    'second': ['sekunda', 'sekund', 'sek'],
                                    'millisecond': ['milisekunda', 'milisekund', 'ms'],
                                    'combine': 'i',
                                    'error': 'Niepoprawna data'
                                  }
                                },
                                {
                                'language': 'fr',
                                'phrases':
                                  {
                                    'year': ['ann√©e', 'ann√©es', 'an'],
                                    'month': ['mois', 'mois', 'mois'],
                                    'week': ['semaine', 'semaines', 'sem'],
                                    'day': ['jour', 'jours', 'j'],
                                    'hour': ['heure', 'heures', 'h'],
                                    'minute': ['minute', 'minutes', 'min'],
                                    'second': ['seconde', 'secondes', 'sec'],
                                    'millisecond': ['milliseconde', 'millisecondes', 'ms'],
                                    'combine': 'et',
                                    'error': 'Date non valide'
                                    }
                                },
                                {
                                'language': 'it',
                                'phrases':
                                {
                                'year': ['anno', 'anni', 'aa'],
                                'month': ['mese', 'mesi', 'mm'],
                                'week': ['settimana', 'settimane', 'set'],
                                'day': ['giorno', 'giorni', 'gg'],
                                'hour': ['ora', 'ore', 'h'],
                                'minute': ['minuto', 'minuti', 'min'],
                                'second': ['secondo', 'secondi', 'sec'],
                                'millisecond': ['millisecondo', 'millisecondi', 'ms'],
                                'combine': 'e',
                                'error': 'Data non valida'
                                }
                                },
                                {
                                  'language': 'nl',
                                  'phrases':
                                  {
                                    'year': ['jaar', 'jaar', 'jr'],
                                    'month': ['maand', 'maanden', 'mnd'],
                                    'week': ['week', 'weken', 'wk'],
                                    'day': ['dag', 'dagen', 'dg'],
                                    'hour': ['uur', 'uur', 'u'],
                                    'minute': ['minuut', 'minuten', 'min'],
                                    'second': ['seconde', 'seconden', 'sec'],
                                    'millisecond': ['milliseconde', 'milliseconden', 'ms'],
                                    'combine': 'en',
                                    'error': 'Ongeldige datum'
                                  }
                                },
                                {
                                  'language': 'de',
                                  'phrases':
                                  {
                                    'year': ['Jahr', 'Jahre', 'J.'],
                                    'month': ['Monat', 'Monate', 'M.'],
                                    'week': ['Woche', 'Wochen', 'Wo.'],
                                    'day': ['Tag', 'Tage', 'Tg.'],
                                    'hour': ['Stunde', 'Stunden', 'Std.'],
                                    'minute': ['Minute', 'Minuten', 'Min.'],
                                    'second': ['Sekunde', 'Sekunden', 'Sek.'],
                                    'millisecond': ['Milliseconde', 'Milliseconden', 'ms'],
                                    'combine': 'und',
                                    'error': 'Falsches Datum'
                                  }
                                },
                                {
                                  'language': 'pt',
                                  'phrases':
                                  {
                                    'year': ['ano', 'anos', 'aa'],
                                    'month': ['m√™s', 'meses', 'mm'],
                                    'week': ['semana', 'semanas', 'sem'],
                                    'day': ['dia', 'dias', 'd'],
                                    'hour': ['hora', 'horas', 'h'],
                                    'minute': ['minuto', 'minutos', 'min'],
                                    'second': ['segundo', 'segundos', 'seg'],
                                    'millisecond': ['millissegundo', 'millissegundos', 'ms'],
                                    'combine': 'e',
                                    'error': 'Data Inv√°lida'
                                  }
                                },
                                {
                                  'language': 'dk',
                                  'phrases':
                                  {
                                    'year': ['√•r', '√•r', '√•r'],
                                    'month': ['m√•ned', 'm√•neder', 'mnd'],
                                    'week': ['uge', 'uger', 'uge'],
                                    'day': ['dag', 'dage', 'dag'],
                                    'hour': ['time', 'timer', 't.'],
                                    'minute': ['minut', 'minuter', 'min.'],
                                    'second': ['sekund', 'sekunder', 'sek.'],
                                    'millisecond': ['millisekund', 'millisekunder', 'ms.'],
                                    'combine': 'og',
                                    'error': 'Ugyldig dato'
                                  }
                                }
                              ]
%}

{#
  macro to split a timedelta in years, months, weeks, days, hours, minutes, seconds
  used by the relative time plus macro, set up as a seperate macro so it can be reused
#}
{%- macro time_split(date, compare_date=now(), time=true, not_use=[]) -%}
  {# set defaults for variables #}
    {%- set date = date | as_local if time else date.date()-%}
    {%- set time = time | bool(true) -%}
    {%- set comp_date = compare_date if time else compare_date.date() -%}
    {%- set date_max = [comp_date, date] | max -%}
    {%- set date_min = [comp_date, date] | min -%}
  {#- set time periods in seconds #}
    {%- set m, h, d, w = 60, 3600, 86400, 604800 -%}
  {#- set numer of years, and set lowest date using this number of years #}
    {%- set yrs = date_max.year - date_min.year - (1 if date_max.replace(year=date_min.year) < date_min else 0) -%}
    {%- set date_max = date_max.replace(year=date_max.year - yrs) -%}
  {#- set numer of months, and set lowest date using this number of months #}
    {%- if 'month' not in not_use -%}
      {%- set mth = (date_max.month - date_min.month - (1 if date_max.day < date_min.day else 0) + 12) % 12 -%}
      {%- set month_new = (((date_max.month - mth) + 12) % 12) | default(12, true) -%}
      {%- set day_max = ((date_max.replace(day=1, month=month_new) + timedelta(days=31)).replace(day=1) - timedelta(days=1)).day -%}
      {%- set extra_days = [0, date_max.day - day_max] | max -%}
      {%- set date_temp = date_max.replace(month=month_new, day=[date_max.day, day_max]|min) -%}
      {%- set date_max = date_temp if date_temp <= date_max else date_temp.replace(year=date_max.year-1) -%}
      {%- set mth = mth + yrs * 12 if 'year' in not_use else mth -%}
    {%- endif -%}
    {%- set date_max = date_max.replace(year=date_max.year + yrs) if 'year' in not_use and 'month' in not_use else date_max -%}
    {%- set yrs = 0 if 'year' in not_use else yrs -%}
  {#- set other time period variables #}
    {%- set s = (date_max - date_min).total_seconds() + extra_days | default(0) * 86400 -%}
    {%- set wks = 0 if 'week' in not_use else (s // w) | int -%}
    {%- set day = 0 if 'day' in not_use else ((s - wks * w) // d) | int -%}
    {%- set hrs = 0 if 'hour' in not_use else ((s - wks * w - day * d) // h) | int -%}
    {%- set min = 0 if 'minute' in not_use else ((s - wks * w - day * d - hrs * h) // m) | int -%}
    {%- set sec = 0 if 'second' in not_use else (s - wks * w - day * d - hrs * h - min * m) | int -%}
    {%- set ms = (s % 1 * 1000) | round | int -%}
  {# output result #}
    {%- set output = dict(year=yrs, month=mth | default(0), week=wks, day=day, hour=hrs, minute=min, second=sec, millisecond=ms) %}
    {{- dict(output.items() | rejectattr('0', 'in', not_use)) | to_json -}}
{%- endmacro -%}

{# macro to output a timedelta in a readable format #}
{%- macro relative_time_plus(date, parts=1, abbr=false, verbose=false, language='en', compare_date=now(), month=none, week=none, millisecond=none, not_use=['millisecond'], always_show=[], time=true) -%}
  {#- set defaults for input if not entered #}
    {%- set date = date if date is datetime else date | as_datetime -%}
    {%- set compare_date = compare_date if compare_date is datetime else compare_date | as_datetime -%}
  {#- select correct phrases bases on language input #}
    {%- set phrases = _time_period_phrases -%}
    {%- set languages = phrases | map(attribute='language') | list -%}
    {%- set language = iif(language in languages, language, 'en') -%}
    {%- set phr = phrases | selectattr('language', 'eq', language) | map(attribute='phrases') | list | first -%}
  {#- perform smart stuff #}
    {%- if date is datetime and compare_date is datetime -%}
    {# determine not_use list #}
      {%- set abbr_to_full = dict(yr='year', mth='month', wk='week', hr='hour', min='minute', sec='second', ms='millisecond') -%}
      {%- set add = [('month', month),('week',week),('millisecond',millisecond)] | selectattr('1', 'eq', false) | map(attribute='0') | list -%}
      {%- set not_use = not_use if not_use is list else (not_use | replace(' ', '')).split(',') -%}
      {%- set not_use = (not_use + add) | unique | list -%}
      {%- if not_use | select('in', abbr_to_full) | list | count > 0 -%}
        {%- set ns = namespace(not_use=[]) -%}
        {%- for i in not_use -%}
          {%- set ns.not_use = ns.not_use + [abbr_to_full[i] | default(i)] -%}
        {%- endfor -%}
        {%- set not_use = ns.not_use | unique | list -%}
      {%- endif -%}
    {# set variables #}
      {%- set date, compare_date = date | as_local, compare_date | as_local -%}
      {%- set parts = parts | int(1) -%}
      {%- set time = time | bool(true) -%}
      {%- set abbr = abbr | bool(false) or verbose | bool(false) -%}
    {# split timedelta #}
      {%- set time_parts = time_split(date, compare_date, time, not_use) | from_json -%}
    {#- find first non zero time period #}
      {%- set time_periods = ['year', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'] -%}
      {%- set do_use = time_periods | reject('in', not_use) | list -%}
    {# continue if there are still time periods to use #}
      {%- if do_use | count > 0 -%}
        {%- set always_return = do_use | last -%}
        {%- set always_show = always_show if always_show is list else (always_show | replace(' ', '')).split(',') -%}
        {%- if always_show | select('in', abbr_to_full) | list | count > 0 -%}
          {%- set ns = namespace(always_show=[]) -%}
          {%- for i in always_show -%}
            {%- set ns.always_show = ns.always_show + [abbr_to_full[i] | default(i)] -%}
          {%- endfor -%}
          {%- set always_show = ns.always_show | unique | list -%}
        {%- endif -%}
        {%- set parts = [parts, always_show | count] | max -%}
        {%- set to_show = (time_parts.items() | selectattr('1') | map(attribute='0') | list + always_show) | unique | list | default([always_return], true) -%}
        {%- set first = do_use | select('in', to_show) | first -%}
      {#-select itemw to show based on input #}
        {%- set index_first = (time_parts.keys() | list).index(first) -%}
        {%- set items = (time_parts.keys() | list)[index_first:index_first + parts] -%}
      {# convert to phrases #}
        {%- set ns = namespace(phrases=[]) -%}
        {%- for i in items if i in to_show or i == first -%}
          {%- set phr_abbr = phr[i][2] -%}
          {%- set phr_verb = phr[i][1] if time_parts[i] != 1 else phr[i][0] -%}
          {%- set phrase = '{} {}'.format(time_parts[i], phr_abbr if abbr else phr_verb) -%} 
          {%- set ns.phrases = ns.phrases + [phrase] -%}
        {%- endfor -%}
      {#- join phrases in a string, using phr.combine for the last item #}
        {{- '{} {} {}'.format(ns.phrases[:-1] | join(', '), phr.combine, ns.phrases[-1]) if ns.phrases | count > 1 else ns.phrases | first -}} 
      {%- else -%}
        All time periods are excluded
      {%- endif -%}
    {%- else -%}
      {{- phr.error -}}
    {%- endif -%}
{%- endmacro -%}"
P2iwzfkR,logic checker,NicolaReina,YAML,Tuesday 25th of June 2024 12:53:03 PM CDT,"{% macro true_any(entity_list) %}
  {# This expects a list of entities. This means [] brackets
      OR if your entities are pulled from a BluePrint entity selector,
      that is already a list and you do not need the brackets.
      The number of entities that evaluate as True using
      `bool(value, default) function` is counted. (truthy values)
      https://www.home-assistant.io/docs/configuration/templating/#numeric-functions-and-filters
      Items that do not evaluate as bool will be defaulted to null/undefined.
      If there are one or more that match, 
      True is returned, else False, defaults to False.
    homeassistant:
      min_version: 2023.11.0
    REMEMBER!!
      This always returns text, so cast to bool on the other end to be certain
      of the result.
      Use of the - character in the return template ensures no unwanted spacing
      is pulled back with your answer.
    SAMPLE USAGE:
      {% from 'logic_chekr.jinja' import true_any %}
      {{- true_any(['entity_1','entity_2']) | bool -}}
  #}
  {# First tests to make sure this is a list #}
  {%- if entity_list is list -%}
    {{- entity_list | map('states') 
    | map('bool', null) | select('eq', True)
    | list | count > 0 -}}
  {%- else -%}
    False 
  {%- endif -%}
{% endmacro %}

{% macro false_any(entity_list) %}
  {# This expects a list of entities. This means [] brackets
      OR if your entities are pulled from a BluePrint entity selector,
      that is already a list and you do not need the brackets.
      The number of entities that evaluate as False using
      `bool(value, default) function` is counted. (falsy values)
      https://www.home-assistant.io/docs/configuration/templating/#numeric-functions-and-filters
      Items that do not evaluate as bool will be defaulted to null/undefined.
      If there are one or more that match, 
      True is returned, else False, defaults to False.
    homeassistant:
      min_version: 2023.11.0
    REMEMBER!!
      This always returns text, so cast to bool on the other end to be certain
      of the result.
      Use of the - character in the return template ensures no unwanted spacing
      is pulled back with your answer.
    SAMPLE USAGE:
      {% from 'logic_chekr.jinja' import false_any %}
      {{- false_any(['entity_1','entity_2']) | bool -}}
  #}
  {# First tests to make sure this is a list #}
  {%- if entity_list is list -%}
    {{- entity_list | map('states') 
    | map('bool', null) | select('eq', False)
    | list | count > 0 -}}
  {%- else -%}
    False 
  {%- endif -%}
{% endmacro %}

{% macro true_one(entity_list) %}
  {# This expects a list of entities. This means [] brackets
      OR if your entities are pulled from a BluePrint entity selector,
      that is already a list and you do not need the brackets.
      The number of entities that evaluate as True using
      `bool(value, default) function` is counted. (truthy values)
      https://www.home-assistant.io/docs/configuration/templating/#numeric-functions-and-filters
      Items that do not evaluate as bool will be defaulted to null/undefined.
      If there is only one that matches, 
      True is returned, else False, defaults to False.
    homeassistant:
      min_version: 2023.11.0
    REMEMBER!!
      This always returns text, so cast to bool on the other end to be certain
      of the result.
      Use of the - character in the return template ensures no unwanted spacing
      is pulled back with your answer.
    SAMPLE USAGE:
      {% from 'logic_chekr.jinja' import true_one %}
      {{- true_one(['entity_1','entity_2]') | bool -}}
  #}
  {# First tests to make sure this is a list #}
  {%- if entity_list is list -%}
    {{- entity_list | map('states') 
    | map('bool', null) | select('eq', True)
    | list | count == 1 -}}
  {%- else -%}
    False 
  {%- endif -%}
{% endmacro %}

{% macro true_all(entity_list) %}
  {# This expects a list of entities. This means [] brackets
      OR if your entities are pulled from a BluePrint entity selector,
      that is already a list and you do not need the brackets.
      The number of entities that evaluate as True using
      `bool(value, default) function` is counted. (truthy values)
      https://www.home-assistant.io/docs/configuration/templating/#numeric-functions-and-filters
      Items that do not evaluate as bool will be defaulted to True.
      The number of entities are counted.
      If the 2 counts are the same, True is returned, else False,
      defaults to False.
    homeassistant:
      min_version: 2023.11.0
    REMEMBER!!
      This always returns text, so cast to bool on the other end to be certain
      of the result.
      Use of the - character in the return template ensures no unwanted spacing
      is pulled back with your answer.
    SAMPLE USAGE:
      {% from 'logic_chekr.jinja' import true_all %}
      {{- true_all(['entity_1','entity_2']) | bool -}}
  #}
  {# First tests to make sure this is a list #}
  {%- if entity_list is list -%}
    {{- entity_list | map('states') 
    | map('bool', True) | select('eq', True)
    | list | count == entity_list | count -}}
  {%- else -%}
    False 
  {%- endif -%}
{% endmacro %}

{% macro false_one(entity_list) %}
  {# This expects a list of entities. This means [] brackets
      OR if your entities are pulled from a BluePrint entity selector,
      that is already a list and you do not need the brackets.
      The number of entities that evaluate as False using
      `bool(value, default) function` is counted. (falsy values)
      https://www.home-assistant.io/docs/configuration/templating/#numeric-functions-and-filters
      Items that do not evaluate as bool will be defaulted to null/undefined.
      If there is only one that matches, True is returned,
      else False, defaults to False.
    homeassistant:
      min_version: 2023.11.0
    REMEMBER!!
      This always returns text, so cast to bool on the other end to be certain
      of the result.
      Use of the - character in the return template ensures no unwanted spacing
      is pulled back with your answer.
    SAMPLE USAGE:
      {% from 'logic_chekr.jinja' import false_one %}
      {{- false_one(['entity_1','entity_2']) | bool -}}
  #}
  {# First tests to make sure this is a list #}
  {%- if entity_list is list -%}
    {{- entity_list | map('states') 
    | map('bool', null) | select('eq', False)
    | list | count == 1 -}}
  {%- else -%}
    False 
  {%- endif -%}
{% endmacro %}

{% macro false_all(entity_list) %}
  {# This expects a list of entities. This means [] brackets
      OR if your entities are pulled from a BluePrint entity selector,
      that is already a list and you do not need the brackets.
      The number of entities that evaluate as False using
      `bool(value, default) function` is counted. (falsy values)
      https://www.home-assistant.io/docs/configuration/templating/#numeric-functions-and-filters
      Items that do not evaluate as bool will be defaulted to False.
      The number of entities are counted.
      If the 2 counts are the same, True is returned, else False,
      defaults to False.
    homeassistant:
      min_version: 2023.11.0
    REMEMBER!!
      This always returns text, so cast to bool on the other end to be certain
      of the result.
      Use of the - character in the return template ensures no unwanted spacing
      is pulled back with your answer.
    SAMPLE USAGE:
      {% from 'logic_chekr.jinja' import false_all %}
      {{- false_all(['entity_1','entity_2']) | bool -}}
  #}
  {# First tests to make sure this is a list #}
  {%- if entity_list is list -%}
    {{- entity_list | map('states') 
    | map('bool', False) | select('eq', False)
    | list | count == entity_list | count -}}
  {%- else -%}
    False 
  {%- endif -%}
{% endmacro %}
"
ez9wJECL,availability template,NicolaReina,YAML,Tuesday 25th of June 2024 12:50:18 PM CDT,"{% macro avail(entity_list) %}
  {# This expects a list of entities.
      The number of entities are counted.
      The number of entities that are NOT unknown, unavailable, empty,
      or none are counted.
      If the 2 counts are the same, true is returned, else false, defaults to false.
    homeassistant:
      min_version: 2023.11.0
    REMEMBER!!
      This always returns text, so cast to bool on the other end to be
      certain of the result.
      Use of the - character in the return template ensures no unwanted spacing
      is pulled back with your answer.
    SAMPLE USAGE:
      {% from 'availability_template.jinja' import avail %}
      {{- avail(['entity_1','entity_2']) | bool -}}
  #}
  {# First tests to make sure this is a list #}
  {%- if entity_list is list -%}
    {{- entity_list | map('states')
    | reject('in', [""undefined"", ""unknown"", ""unavailable"", ""none"", ""null"", """"])
    | list | count == entity_list | count -}}
  {%- else -%}
    false 
  {%- endif -%}
{% endmacro %}
"
UCWwAv1C,# tk_Piranha_Frenzy.py,here2share,Python,Tuesday 25th of June 2024 12:48:39 PM CDT,"# tk_Piranha_Frenzy.py

import tkinter as tk
from PIL import Image, ImageTk, ImageFilter, ImageOps, ImageDraw
import math
import time
import random

ww = 600
hh = 600

root = tk.Tk()
root.title(""tk Piranha Frenzy"")

canvas = tk.Canvas(root, width=ww+300, height=hh)
canvas.pack()

def create_layers():
	img = Image.new(""L"", (ww+200, hh+200))
	dr = ImageDraw.Draw(img)
	dr.rectangle(((0, 0), (ww+200, (hh+200) * 0.80)), fill='white')
	pixels = list(img.getdata())
	random.shuffle(pixels)
	img.putdata(pixels)
	return img

image_A = create_layers()
image_B = create_layers()

while 1:
	image_A = image_A.filter(ImageFilter.BLUR)
	image_B = image_B.filter(ImageFilter.BLUR)

	image_A = image_A.point(lambda i: (i + 1) % 255)
	image_B = image_B.point(lambda i: (i + 1) % 254)

	image = Image.blend(image_A, image_B, 0.5)
	
	left = 100
	top = 100
	right = ww + 100
	bottom = hh + 100

	image = image.crop((left, top, right, bottom))

	photo = ImageTk.PhotoImage(image)
	canvas.create_image(0, 0, image=photo, anchor=tk.NW)
	root.update()"
5rK5zyVt,.env,G0nz0uk,YAML,Tuesday 25th of June 2024 12:44:18 PM CDT,"DOMAIN=http://localhost:8080
# Remove 'with_grafana' below if you want to use existing grafana
# Add 'with_prometheus' below to optionally enable a local prometheus for oncall metrics
COMPOSE_PROFILES=with_prometheus
COMPOSE_PROFILES=with_grafana
# to setup an auth token for prometheus exporter metrics:
PROMETHEUS_EXPORTER_SECRET=my_random_prometheus_secret
# also, make sure to enable the /metrics endpoint:
FEATURE_PROMETHEUS_EXPORTER_ENABLED=True
SECRET_KEY=1234567890"
GaKvX6QA,oncallv2,G0nz0uk,YAML,Tuesday 25th of June 2024 12:42:38 PM CDT,"version: ""3.9""

x-environment: &oncall-environment
  DATABASE_TYPE: sqlite3
  BROKER_TYPE: redis
  BASE_URL: $DOMAIN
  SECRET_KEY: $SECRET_KEY
  FEATURE_PROMETHEUS_EXPORTER_ENABLED: ${FEATURE_PROMETHEUS_EXPORTER_ENABLED:-false}
  PROMETHEUS_EXPORTER_SECRET: ${PROMETHEUS_EXPORTER_SECRET:-}
  REDIS_URI: redis://redis:6379/0
  DJANGO_SETTINGS_MODULE: settings.hobby
  CELERY_WORKER_QUEUE: ""default,critical,long,slack,telegram,webhook,retry,celery,grafana""
  CELERY_WORKER_CONCURRENCY: ""1""
  CELERY_WORKER_MAX_TASKS_PER_CHILD: ""100""
  CELERY_WORKER_SHUTDOWN_INTERVAL: ""65m""
  CELERY_WORKER_BEAT_ENABLED: ""True""
  GRAFANA_API_URL: https://my.testdomain.com:3000

services:
  engine:
    image: grafana/oncall
    restart: always
    ports:
      - ""8080:8080""
    command: sh -c ""uwsgi --ini uwsgi.ini""
    environment: *oncall-environment
    volumes:
      - oncall_data:/var/lib/oncall
    depends_on:
      oncall_db_migration:
        condition: service_completed_successfully
      redis:
        condition: service_healthy

  celery:
    image: grafana/oncall
    restart: always
    command: sh -c ""./celery_with_exporter.sh""
    environment: *oncall-environment
    volumes:
      - oncall_data:/var/lib/oncall
    depends_on:
      oncall_db_migration:
        condition: service_completed_successfully
      redis:
        condition: service_healthy

  oncall_db_migration:
    image: grafana/oncall
    command: python manage.py migrate --noinput
    environment: *oncall-environment
    volumes:
      - oncall_data:/var/lib/oncall
    depends_on:
      redis:
        condition: service_healthy

  redis:
    image: redis:7.0.5
    restart: always
    expose:
      - 6379
    volumes:
      - redis_data:/data
    deploy:
      resources:
        limits:
          memory: 500m
          cpus: ""0.5""
    healthcheck:
      test: [""CMD"", ""redis-cli"", ""ping""]
      timeout: 5s
      interval: 5s
      retries: 10

volumes:
  grafana_data:
  prometheus_data:
  oncall_data:
  redis_data:"
14bGZaeE,–î–ó –ê–Ω–∞—Ä—Ö–∏—è –≤ –±–æ–ª—å–Ω–∏—Ü–µ,TeT91,C#,Tuesday 25th of June 2024 12:32:27 PM CDT,"using System;
using System.Collections.Generic;
using System.Linq;

namespace CSLight
{
    internal class Program
    {
        static void Main(string[] args)
        {
            PersonBase person = new PersonBase();
            person.ShowPatientsInfo();
        }
    }

    class PersonBase
    {
        private List<Person> _patients;

        public PersonBase()
        {
            GeneratePatients();
        }

        public void ShowPatientsInfo()
        {
            Console.WriteLine(""–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ñ–∞–º–∏–ª–∏–∏"");

            var sortedList = _patients.OrderBy(patient => patient.Surname);

            ShowList(sortedList);

            Console.WriteLine(""–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É"");

            sortedList = _patients.OrderBy(patient => patient.Age);

            ShowList(sortedList);

            Console.WriteLine(""–ö–∞–∫–æ–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ –≤—ã–≤–µ—Å—Ç–∏?"");
            string disease = Console.ReadLine();
            Console.WriteLine($""–ü–∞—Ü–∏–µ–Ω—Ç—ã —Å {disease}"");

            var filteredList = _patients.Where(patient => patient.Disiase == disease).Select(patient => patient);

            ShowList(filteredList);

            Console.ReadKey();
        }

        private void ShowList(IEnumerable<Person> list)
        {
            foreach (Person person in list)
            {
                Console.WriteLine($""{person.Surname} {person.Name} {person.Patronymic} - {person.Age} - {person.Disiase}"");
            }
        }

        private void GeneratePatients()
        {
            PersonCreator creator = new PersonCreator();
            int dataBaseCapacity = 20;

            _patients = new List<Person>();

            for (int i = 0; i < dataBaseCapacity; i++)
            {
                _patients.Add(creator.CreatePerson());
            }
        }
    }

    class PersonCreator
    {
        private List<string> _names;
        private List<string> _surnames;
        private List<string> _patronymic;
        private List<string> _diseases;

        public PersonCreator()
        {
            InitNames();
            InitSurnames();
            InitPatronymics();
            InitDiseases();
        }

        public Person CreatePerson()
        {
            int maxAge = 100;
            int age = UserUtils.GenerateRandomValue(maxAge);

            string name = GetRandomValue(_names);
            string surname = GetRandomValue(_surnames);
            string patronymic = GetRandomValue(_patronymic);
            string crimeType = GetRandomValue(_diseases);

            return new Person(name, surname, patronymic, age, crimeType);
        }

        private void InitSurnames()
        {
            _surnames = new List<string>();
            _surnames.Add(""–°–º–∏—Ä–Ω–æ–≤"");
            _surnames.Add(""–ò–≤–∞–Ω–æ–≤"");
            _surnames.Add(""–ö—É–∑–Ω–µ—Ü–æ–≤"");
            _surnames.Add(""–ü–æ–ø–æ–≤"");
            _surnames.Add(""–°–æ–∫–æ–ª–æ–≤"");
            _surnames.Add(""–õ–µ–±–µ–¥–µ–≤"");
            _surnames.Add(""–ö–æ–∑–ª–æ–≤"");
            _surnames.Add(""–ù–æ–≤–∏–∫–æ–≤"");
            _surnames.Add(""–ú–æ—Ä–æ–∑–æ–≤"");
            _surnames.Add(""–ö–æ–∑–ª–æ–≤"");
            _surnames.Add(""–í–æ–ª–∫–æ–≤"");
        }

        private void InitPatronymics()
        {
            _patronymic = new List<string>();
            _patronymic.Add(""–ú–∞–∫—Å–∏–º–æ–≤–∏—á"");
            _patronymic.Add(""–ú–∏—Ö–∞–∏–ª–æ–≤–∏—á"");
            _patronymic.Add(""–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á"");
            _patronymic.Add(""–î–º–∏—Ç—Ä–∏–µ–≤–∏—á"");
            _patronymic.Add(""–î–µ–Ω–∏—Å–æ–≤–∏—á"");
            _patronymic.Add(""–ò–ª—å–∏—á"");
            _patronymic.Add(""–ê–Ω–¥—Ä–µ–µ–≤–∏—á"");
            _patronymic.Add(""–ê—Ä—Ç–µ–º–æ–≤–∏—á"");
            _patronymic.Add(""–ò–≤–∞–Ω–æ–≤–∏—á"");
            _patronymic.Add(""–ê–ª–µ–∫—Å–µ–µ–≤–∏—á"");
            _patronymic.Add(""–ù–∏–∫–∏—Ç–∏—á"");
        }

        private void InitNames()
        {
            _names = new List<string>();
            _names.Add(""–ú–∞–∫—Å–∏–º"");
            _names.Add(""–ú–∏—Ö–∞–∏–ª"");
            _names.Add(""–ê–ª–µ–∫—Å–∞–Ω–¥—Ä"");
            _names.Add(""–î–º–∏—Ç—Ä–∏–π"");
            _names.Add(""–î–µ–Ω–∏—Å"");
            _names.Add(""–ò–ª—å—è"");
            _names.Add(""–ê–Ω–¥—Ä–µ–π"");
            _names.Add(""–ê—Ä—Ç–µ–º"");
            _names.Add(""–ò–≤–∞–Ω"");
            _names.Add(""–ê–ª–µ–∫—Å–µ–π"");
            _names.Add(""–ù–∏–∫–∏—Ç–∞"");
        }

        private void InitDiseases()
        {
            _diseases = new List<string>();
            _diseases.Add(""–ö–∞—à–µ–ª—å"");
            _diseases.Add(""–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞"");
            _diseases.Add(""–°–æ–ø–ª–∏"");
        }

        private string GetRandomValue(List<string> values)
        {
            int randomId = UserUtils.GenerateRandomValue(values.Count);
            return values[randomId];
        }
    }

    class Person
    {
        public Person(string name, string surname, string patronymic, int age, string disease)
        {
            Name = name;
            Surname = surname;
            Patronymic = patronymic;
            Disiase = disease;
            Age = age;
        }

        public string Name { get; private set; }

        public string Surname { get; private set; }

        public string Patronymic { get; private set; }

        public int Age { get; private set; }

        public string Disiase { get; private set; }
    }

    static class UserUtils
    {
        private static Random s_random = new Random();

        public static int GenerateRandomValue(int maxValue)
        {
            return s_random.Next(maxValue);
        }
    }
}"
mvtNFq2i,Jinja template: string_to_list,chemelli74,Python,Tuesday 25th of June 2024 12:18:22 PM CDT,"{% macro string_to_list(stringa) %}
{%- if stringa not in ['unavailable', 'unknown', 'none'] -%}
  {%- set json_list = stringa | replace('\'', '\""') | from_json -%}
  {%- for item in json_list -%}
      - {{ item + ""\n"" }}
  {%- endfor -%}
{%- else -%}
  {{ stringa }}
{%- endif -%}
{% endmacro %}"
xQTuGX6W,UpdatePostForm.tsx,Reuben3901,TypeScript,Tuesday 25th of June 2024 12:17:46 PM CDT,"import axios from ""axios"";
import { useState, useEffect } from ""react"";
import { useForm } from ""react-hook-form"";
import { useNavigate, useParams } from ""react-router-dom"";

interface Post {
    id: number;
    title: string;
    content: string;
}

interface FormData {
    title: string;
    content: string;
}

interface Props {
    onSubmit: (data: Post) => void;
}

const UpdatePostForm = ({ onSubmit }: Props) => {
    const { id } = useParams<{ id: string }>();
    const navigate = useNavigate();
    const {
        register,
        handleSubmit,
        setValue,
        formState: { errors },
    } = useForm<FormData>();
    const [error, setError] = useState("""");
    const [loading, setLoading] = useState<boolean>(false);

    useEffect(() => {
        axios
            .get(`http://localhost:5000/api/post/${id}`)
            .then((response) => {
                console.log(response.data);

                setValue(""title"", response.data.post.title);
                setValue(""content"", response.data.post.content);
            })
            .catch((error) => {
                console.error(""Failed to load post data."", error);
            });
    }, [id, setValue]);

    const updatePost = (data: FormData) => {
        setLoading(true);
        axios
            .put(`http://localhost:5000/api/post/${id}/update`, data, {
                withCredentials: true, // Include this line to pass credentials
            })
            // Returns user, including the added user and it's id
            // Destructured and using an Alias

            .then(() => {
                setError("""");
                navigate(`/post/${id}`);
            })
            .catch((err) => {
                console.error(""Failed to update the post."");

                setError(err.message);
                console.error(""Axios error:"", err);
                //setUsers(originalUsers);
            })
            .finally(() => {
                setLoading(false);

                // You can add code here to handle what happens after successful posting
            });
    };

    return (
        <>
            <div className=""content-section"">
                {error && (
                    <div className=""alert alert-danger"" role=""alert"">
                        {error}
                    </div>
                )}
                <form onSubmit={handleSubmit(updatePost)}>
                    <fieldset className=""form-group"">
                        <legend className=""border-bottom mb-4"">
                            Update Post
                        </legend>
                        <div className=""form-group"">
                            <label
                                className=""form-control-label""
                                htmlFor=""title""
                            >
                                Title
                            </label>
                            <input
                                id=""title""
                                type=""text""
                                className={`form-control form-control-lg ${
                                    errors.title ? ""is-invalid"" : """"
                                }`}
                                {...register(""title"", {
                                    required: true,
                                    minLength: 3,
                                })}
                            />
                            {errors.title?.type === ""required"" && (
                                <p className=""text-danger"">
                                    The title field is required.
                                </p>
                            )}
                            {errors.title?.type === ""minLength"" && (
                                <p className=""text-danger"">
                                    The title must be at least 3 characters.
                                </p>
                            )}
                        </div>
                        <div className=""form-group"">
                            <label
                                className=""form-control-label""
                                htmlFor=""content""
                            >
                                Content
                            </label>
                            <textarea
                                id=""content""
                                className={`form-control form-control-lg`}
                                {...register(""content"", {
                                    required: true,
                                    minLength: 3,
                                })}
                            />
                            {errors.content?.type === ""required"" && (
                                <p className=""text-danger"">
                                    The content field is required.
                                </p>
                            )}
                            {errors.content?.type === ""minLength"" && (
                                <p className=""text-danger"">
                                    The content must be at least 3 characters.
                                </p>
                            )}
                        </div>
                    </fieldset>
                    <div className=""form-group"">
                        <button
                            className=""btn btn-outline-info""
                            type=""submit""
                            disabled={loading}
                        >
                            {loading ? ""Saving..."" : ""Update""}
                        </button>
                    </div>
                </form>
            </div>
        </>
    );
};

export default UpdatePostForm;
"
r8nQ5X6r,fix_network_bufferbloat,aveyo,Batch,Tuesday 25th of June 2024 11:09:19 AM CDT,"@(set ^ ""0=%~f0"" -d ' .bat or .ps1 script ) & powershell -nop -c . ([scriptblock]::Create((gc $env:0)-join \""`n\"")) & exit /b ')
                                                                 # 2024.06.20 AveYo - if on pastebin click copy, raw or download
"" Fix Network Bufferbloat - test on waveform.com/tools/bufferbloat ""                                                     
# test on Ethernet 100Mbit Up / Down connection but should scale with any rates - just increase ReceiveBuffers / TransmitBuffers
# commented lines are mixed defaults / untested / work in progress 

$run = {

$adapters = Get-NetAdapter -Physical | Select-Object DeviceID,Name -First 1
$NIC = $adapters | Select Name -ExpandProperty Name; $NICGUID = $adapters | Select DeviceID -ExpandProperty DeviceID 
$NICREG = ""HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\Interfaces\$NICGUID""
powershell Disable-NetAdapter -InterfaceAlias `""$NIC`"" -Confirm:`$False
powershell Reset-NetAdapterAdvancedProperty -Name `""$NIC`"" -DisplayName `""*`""
netsh int ip reset 
netsh int ipv4 reset 
netsh int tcp reset
netsh winsock reset

#+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
write-host ""Set-NetAdapterAdvancedProperty "" -fore Cyan -nonew
powershell Set-NetAdapterAdvancedProperty -Name `""$NIC`"" -RegistryKeyword `""ITR`"" -RegistryValue 0 # Off 0 Adaptive 65535
powershell Set-NetAdapterAdvancedProperty -Name `""$NIC`"" -RegistryKeyword `""*InterruptModeration`"" -RegistryValue 0 # Off 0 On 1
powershell Set-NetAdapterAdvancedProperty -Name `""$NIC`"" -RegistryKeyword `""*FlowControl`"" -RegistryValue 0
powershell Set-NetAdapterAdvancedProperty -Name `""$NIC`"" -RegistryKeyword `""*PriorityVLANTag`"" -RegistryValue 1 # Priority
powershell Set-NetAdapterAdvancedProperty -Name `""$NIC`"" -RegistryKeyword `""WaitAutoNegComplete`"" -RegistryValue 1
powershell Set-NetAdapterAdvancedProperty -Name `""$NIC`"" -RegistryKeyword `""*ReceiveBuffers`"" -RegistryValue  320 #256 ook 160 320
powershell Set-NetAdapterAdvancedProperty -Name `""$NIC`"" -RegistryKeyword `""*TransmitBuffers`"" -RegistryValue 160 #512 ook 80  160
""ok.""

write-host ""netsh int tcp set global "" -fore Cyan -nonew 
netsh int tcp set global rss=enabled                   >'' # Enable receive-side scaling.
netsh int tcp set global autotuninglevel=disabled      >'' # Fix the receive window at its default value  highlyrestricted normal
netsh int tcp set global ecncapability=enabled         >'' # Enable/disable ECN Capability.
netsh int tcp set global timestamps=disabled           >'' # Enable/disable RFC 1323 timestamps.
netsh int tcp set global initialrto=2000               >'' # Connect (SYN) retransmit time (in ms). default: 3000.
netsh int tcp set global rsc=disabled                  >'' # Enable/disable receive segment coalescing.
netsh int tcp set global nonsackrttresiliency=disabled >'' # Enable/disable rtt resiliency for non sack clients. default: disabled
netsh int tcp set global maxsynretransmissions=2       >'' # Connect retry attempts using SYN packets. default: 2.
netsh int tcp set global fastopen=enabled              >'' # Enable/disable TCP Fast Open.
netsh int tcp set global fastopenfallback=enabled      >'' # Enable/disable TCP Fast Open fallback.
netsh int tcp set global hystart=enabled               >'' # Enable/disable the HyStart slow start algorithm.
netsh int tcp set global prr=enabled                   >'' # Enable/disable the Proportional Rate Reduction algorithm.
netsh int tcp set global pacingprofile=off             >'' # Set the periods during which pacing is enabled. off: Never pace.
netsh int tcp set global dca=enabled                       # RDMA Capable

write-host ""netsh int tcp set supplemental "" -fore Cyan -nonew
netsh int tcp set supplemental internet minrto=300                 >'' # Controls TCP retransmission timeout. 20 to 300 msec.
netsh int tcp set supplemental internet icw=10                     >'' # Controls initial congestion window. 2 to 64 MSS
netsh int tcp set supplemental internet congestionprovider=dctcp       # Controls the congestion provider.
netsh int tcp set supplemental internet enablecwndrestart=disabled >'' # Controls whether congestion window is restarted.
netsh int tcp set supplemental internet delayedacktimeout=40       >'' # Controls TCP delayed ack timeout. 10 to 600 msec.
netsh int tcp set supplemental internet delayedackfrequency=2      >'' # Controls TCP delayed ack frequency. 1 to 255.
netsh int tcp set supplemental internet rack=enabled               >'' # Controls whether RACK time based recovery is enabled.
netsh int tcp set supplemental internet taillossprobe=enabled      >'' # Controls whether Tail Loss Probe is enabled.

netsh int tcp set heuristics wsh=disabled forcews=enabled          >'' # Disable Windows Scaling heuristics

write-host ""Set-NetTCPSetting "" -fore Cyan -nonew
powershell Set-NetTCPSetting -SettingName internet -MinRtoMs 300
powershell Set-NetTCPSetting -SettingName internet -InitialCongestionWindowMss 10 >''
powershell Set-NetTCPSetting -SettingName internet -CongestionProvider DCTCP
powershell Set-NetTCPSetting -SettingName internet -CwndRestart False
powershell Set-NetTCPSetting -SettingName internet -DelayedAckTimeoutMs 40                                  
powershell Set-NetTCPSetting -SettingName internet -DelayedAckFrequency 2
powershell Set-NetTCPSetting -SettingName internet -MemoryPressureProtection Disabled
powershell Set-NetTCPSetting -SettingName internet -AutoTuningLevelLocal Disabled # HighlyRestricted  Restricted  Normal
powershell Set-NetTCPSetting -SettingName internet -EcnCapability Enabled
powershell Set-NetTCPSetting -SettingName internet -Timestamps Disabled
powershell Set-NetTCPSetting -SettingName internet -InitialRtoMs 2000 
powershell Set-NetTCPSetting -SettingName internet -ScalingHeuristics Disabled
powershell Set-NetTCPSetting -SettingName internet -DynamicPortRangeStartPort 10000
powershell Set-NetTCPSetting -SettingName internet -DynamicPortRangeNumberOfPorts 3000
powershell Set-NetTCPSetting -SettingName internet -AutomaticUseCustom Disabled 
powershell Set-NetTCPSetting -SettingName internet -NonSackRttResiliency Disabled
powershell Set-NetTCPSetting -SettingName internet -ForceWS Enabled # Requires window scaling for retransmission.
powershell Set-NetTCPSetting -SettingName internet -MaxSynRetransmissions 2
powershell Set-NetTCPSetting -SettingName internet -AutoReusePortRangeStartPort 0
powershell Set-NetTCPSetting -SettingName internet -AutoReusePortRangeNumberOfPorts 0
""ok.""

write-host ""Set-NetOffloadGlobalSetting "" -fore Cyan -nonew
powershell Set-NetOffloadGlobalSetting -ReceiveSideScaling Enabled
powershell Set-NetOffloadGlobalSetting -ReceiveSegmentCoalescing Disabled
powershell Set-NetOffloadGlobalSetting -Chimney Disabled
powershell Set-NetOffloadGlobalSetting -TaskOffload Enabled 
powershell Set-NetOffloadGlobalSetting -NetworkDirect Enabled
powershell Set-NetOffloadGlobalSetting -NetworkDirectAcrossIPSubnets Allowed >'' #Blocked
powershell Set-NetOffloadGlobalSetting -PacketCoalescingFilter Disabled
""ok.""

write-host ""Enable-NetAdapterRss "" -fore Cyan -nonew
powershell Enable-NetAdapterChecksumOffload -Name *
powershell Disable-NetAdapterLso -Name *
powershell Disable-NetAdapterRsc -Name *
powershell Enable-NetAdapterRss -Name *
#powershell Set-NetAdapterAdvancedProperty -Name `""$NIC`"" -RegistryKeyword `""*RSS`"" -RegistryValue 1
#powershell Set-NetAdapterRss -Name `""$NIC`"" -MaxProcessors 4 -NumberOfReceiveQueues 2 -BaseProcessorNumber 4 -MaxProcessorNumber 8 -Profile NUMAStatic -Enabled $true
#powershell Set-NetAdapterRss -Name `""$NIC`"" -MaxProcessors 4 -NumberOfReceiveQueues 2 -BaseProcessorNumber 4 -MaxProcessorNumber 8 -Profile ClosestStatic -Enabled $true
#powershell Set-NetAdapterRss -Name `""$NIC`"" -MaxProcessors 2 -NumberOfReceiveQueues 2 -BaseProcessorNumber 2 -MaxProcessorNumber 4 -Profile NUMAStatic -Enabled $true
#powershell Set-NetAdapterRss -Name `""$NIC`"" -MaxProcessors 2 -NumberOfReceiveQueues 2 -BaseProcessorNumber 2 -MaxProcessorNumber 4 -Profile ClosestStatic -Enabled $true
#powershell Set-NetAdapterRss -Name `""$NIC`"" -MaxProcessors 2 -NumberOfReceiveQueues 2 -BaseProcessorNumber 0 -MaxProcessorNumber 2 -Profile NUMAStatic -Enabled $true
#powershell Set-NetAdapterRss -Name `""$NIC`"" -NumberOfReceiveQueues 2 -Profile NUMAStatic -Enabled $false
""ok.""

write-host ""SG TCPOptimizer tweaks"" -fore Cyan
sp ""$NICREG"" ""TcpAckFrequency"" 1 -type dword -force -ea 0
sp ""$NICREG"" ""TcpDelAckTicks"" 0 -type dword -force -ea 0
sp ""$NICREG"" ""TcpNoDelay"" 1 -type dword -force -ea 0
sp ""HKLM:\SOFTWARE\Microsoft\Internet Explorer\Main\FeatureControl\FEATURE_MAXCONNECTIONSPER1_0SERVER"" explorer.exe 10 -type string -force -ea 0
sp ""HKLM:\SOFTWARE\Microsoft\Internet Explorer\Main\FeatureControl\FEATURE_MAXCONNECTIONSPER1_0SERVER"" iexplore.exe 10 -type string -force -ea 0
sp ""HKLM:\SOFTWARE\Microsoft\Internet Explorer\Main\FeatureControl\FEATURE_MAXCONNECTIONSPERSERVER"" explorer.exe 10 -type string -force -ea 0
sp ""HKLM:\SOFTWARE\Microsoft\Internet Explorer\Main\FeatureControl\FEATURE_MAXCONNECTIONSPERSERVER"" iexplore.exe 10 -type string -force -ea 0
if (gi ""HKLM:\SOFTWARE\Microsoft\MSMQ"") {sp ""HKLM:\SOFTWARE\Microsoft\MSMQ\Parameters"" TCPNoDelay 1 -type dword -force -ea 0}
sp ""HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile"" NetworkThrottlingIndex 10 -type dword -force -ea 0 # 4294967295
sp ""HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile"" SystemResponsiveness 10 -type dword -force -ea 0
sp ""HKLM:\SOFTWARE\Policies\Microsoft\Windows\Psched"" NonBestEffortLimit 0 -type dword -force -ea 0
sp ""HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management"" LargeSystemCache 0 -type dword -force -ea 0
sp ""HKLM:\SYSTEM\CurrentControlSet\Services\LanmanServer\Parameters"" Size 3 -type dword -force -ea 0
sp ""HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters"" DefaultTTL 64 -type dword -force -ea 0
sp ""HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters"" MaxUserPort 65534 -type dword -force -ea 0
sp ""HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters"" TcpTimedWaitDelay 30 -type dword -force -ea 0
sp ""HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\QoS"" ""Do not use NLA"" 1 -type string -force -ea 0
sp ""HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\ServiceProvider"" DnsPriority 6 -type dword -force -ea 0
sp ""HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\ServiceProvider"" HostsPriority 5 -type dword -force -ea 0
sp ""HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\ServiceProvider"" LocalPriority 4 -type dword -force -ea 0
sp ""HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\ServiceProvider"" NetbtPriority 7 -type dword -force -ea 0

#sp ""HKLM:\SYSTEM\CurrentControlSet\Services\AFD\Parameters"" DefaultSendWindow 0x10000 -type dword -force -ea 0
#sp ""HKLM:\SYSTEM\CurrentControlSet\Services\AFD\Parameters"" DefaultReceiveWindow 0x10000 -type dword -force -ea 0
#sp ""HKLM:\SYSTEM\CurrentControlSet\Services\AFD\Parameters"" FastSendDatagramThreshold 1500 -type dword -force -ea 0
#sp ""HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters"" MaximumReassemblyHeaders 0xffff -type dword -force -ea 0
#sp ""HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters"" Tcp1323Opts 0 -type dword -force -ea 0 # 1
#sp ""HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters"" EnableConnectionRateLimiting 0 -type dword -force -ea 0
#sp ""HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters"" SackOpts 0 -type dword -force -ea 0
#sp ""HKLM:\SYSTEM\CurrentControlSet\Services\Ndis\Parameters"" RssBaseCpu 1 -type dword -force -ea 0

#write-host ""NSI tweaks"" -fore Cyan
#reg add ""HKLM\SYSTEM\CurrentControlSet\Control\Nsi\{eb004a03-9b1a-11d4-9123-0050047759bc}\26"" /v ""00000000"" /t REG_BINARY /d ""0000000000000000000000000500000000000000000000000000000000000000ff00000000000000"" /f | out-null
#reg add ""HKLM\SYSTEM\CurrentControlSet\Control\Nsi\{eb004a03-9b1a-11d4-9123-0050047759bc}\26"" /v ""04000000"" /t REG_BINARY /d ""0000000000000000000000000500000000000000000000000000000000000000ff00000000000000"" /f | out-null
#reg add ""HKLM\SYSTEM\CurrentControlSet\Control\Nsi\{eb004a03-9b1a-11d4-9123-0050047759bc}\0"" /v ""0200"" /t REG_BINARY /d ""0000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000ff000000000000000000000000000000000000000000ff000000000000000000000000000000"" /f | out-null
#reg add ""HKLM\SYSTEM\CurrentControlSet\Control\Nsi\{eb004a03-9b1a-11d4-9123-0050047759bc}\0"" /v ""1700"" /t REG_BINARY /d ""0000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000ff000000000000000000000000000000000000000000ff000000000000000000000000000000"" /f
#sp ""HKLM:\SYSTEM\CurrentControlSet\Control\Nsi\{eb004a03-9b1a-11d4-9123-0050047759bc}\27"" -Name ""06000000"" -Value (([byte[]](0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff))) -force

#write-host ""Setting IRPStackSize for LanmanServer to enhance file sharing capabilities"" -fore Cyan -nonew
#sp ""HKLM:\SYSTEM\CurrentControlSet\Services\LanmanServer\Parameters"" IRPStackSize 30 -type dword -force -ea 0
#rp ""HKLM:\SYSTEM\CurrentControlSet\Services\LanmanServer\Parameters"" IRPStackSize -force -ea 0

#write-host ""Setting MaximumReassemblyHeaders"" -fore Cyan
#sp ""HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters"" MaximumReassemblyHeaders 0xffff -type dword -force -ea 0
#rp ""HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters"" MaximumReassemblyHeaders -force -ea 0

write-host ""Setting FastSendDatagramThreshold"" -fore Cyan
#sp ""HKLM:\SYSTEM\CurrentControlSet\Services\AFD\Parameters"" FastSendDatagramThreshold 0x10000 -type dword -force -ea 0
sp ""HKLM:\SYSTEM\CurrentControlSet\Services\AFD\Parameters"" FastSendDatagramThreshold 1500 -type dword -force -ea 0
#rp ""HKLM:\SYSTEM\CurrentControlSet\Services\AFD\Parameters"" FastSendDatagramThreshold -force -ea 0

write-host ""Loopback tweaks "" -fore Cyan -nonew
netsh int ipv4 set global loopbacklargemtu=enable
#netsh int ipv4 set global loopbackworkercount=1 >''
netsh int ipv4 set global loopbackworkercount=4 >''
netsh int ipv4 set global loopbackexecutionmode=adaptive >''
#netsh int ipv4 set global loopbackexecutionmode=Inline >'' # This mode favors latency over throughput. #adaptive|inline|worker

write-host ""ipv4 tweasks "" -fore Cyan -nonew
#netsh int ipv4 set global reassemblylimit=100238784
netsh int ipv4 set global reassemblylimit=0 >'' # 267748640 # 100238784 94371840 0
#netsh int ipv4 set global sourceroutingbehavior=dontforward
netsh int ipv4 set global sourceroutingbehavior=drop # dontforward
#netsh int ipv4 set dynamicport tcp start=10000 num=3000
#powershell Set-NetIPv4Protocol -IGMPLevel None
#powershell Set-NetIPv4Protocol -IGMPLevel All

#powershell Set-NetAdapterAdvancedProperty -Name `""$NIC`"" -RegistryKeyword `""NetworkAddress`"" -RegistryValue `""OVERRIDE_MAC_HERE`""
powershell Enable-NetAdapter -InterfaceAlias `""$NIC`"" -Confirm:`$False

write-host ""netsh interface ipv4 set subinterface "" -fore Cyan -nonew
netsh interface ipv6 set subinterface ""$NIC"" mtu=1500 store=persistent >'' 2>''
netsh interface ipv4 set subinterface ""$NIC"" mtu=1500 store=persistent

write-host; ${-} = ""`n$('-'*80)""
write-host ""netsh int tcp show supplemental ${-}"" -fore Cyan -nonew
netsh int tcp show supplemental
write-host ""netsh int tcp show global ${-}"" -fore Cyan
netsh int tcp show global
write-host ""netsh int ipv4 show global ${-}"" -fore Cyan
netsh int ipv4 show global
write-host ""powershell Get-NetTCPSetting -SettingName internet ${-}"" -fore Cyan -nonew
powershell Get-NetTCPSetting -SettingName internet
write-host ""powershell Get-NetOffloadGlobalSetting ${-}"" -fore Cyan -nonew
powershell Get-NetOffloadGlobalSetting
write-host ""powershell Get-NetAdapterLso -Name '*' ${-}"" -fore Cyan -nonew
powershell Get-NetAdapterLso -Name '*'
write-host ""powershell Get-NetAdapterChecksumOffload '*' ${-}"" -fore Cyan -nonew
powershell Get-NetAdapterChecksumOffload '*'
write-host ""powershell Get-NetAdapterRSS ${-}"" -fore Cyan -nonew
powershell Get-NetAdapterRSS
write-host ""powershell Get-NetAdapterHardwareInfo | fl ${-}"" -fore Cyan -nonew
powershell Get-NetAdapterHardwareInfo | fl
write-host ""netsh int ip show interfaces ${-}"" -fore Cyan -nonew
netsh int ip show interfaces
write-host ""powershell Get-SmbClientNetworkInterface ${-}"" -fore Cyan -nonew
powershell Get-SmbClientNetworkInterface
pause

} # end of $run

sp HKCU:\Console\cmd ScreenColors 0x07 -type Dword -ea 0; sp HKCU:\Console\cmd QuickEdit 0 -type Dword -ea 0

# AveYo: $run elevated
if ([Security.Principal.WindowsIdentity]::GetCurrent().Groups.Value -notcontains 'S-1-5-32-544') {
  write-host "" Requesting ADMIN rights.. "" -fore Black -back Yellow; sleep 2; $_=""$env:temp\runas.Admin""; sc $_ $run -force -ea 0
  start cmd -args ""/x /d /r start `""cmd`"" powershell -nop -c . ([scriptblock]::Create((gc \`""$_\`"")-join \`""``n\`""))"" -verb runas
} else { . $run }

$_press_enter_if_copy_pasted_to_powershell
"
7M9akzMz,2.9.2 DA error,Zone51,Java,Tuesday 25th of June 2024 11:02:37 AM CDT,"168750 [Thread-2] INFO  com.fs.starfarer.api.impl.campaign.events.OfficerManagerEvent  - Added officer at diableavionics_eclipse
168750 [Thread-2] INFO  com.fs.starfarer.api.impl.campaign.events.OfficerManagerEvent  - Added officer at [diableavionics_eclipse]
168865 [Thread-2] ERROR com.fs.starfarer.combat.CombatMain  - java.lang.NullPointerException: Cannot invoke ""java.lang.Float.floatValue()"" because the return value of ""java.util.Map.get(Object)"" is null
java.lang.NullPointerException: Cannot invoke ""java.lang.Float.floatValue()"" because the return value of ""java.util.Map.get(Object)"" is null
	at data.hullmods.DiableAvionicsUpgrade.applyEffectsBeforeShipCreation(DiableAvionicsUpgrade.java:37) ~[?:?]
	at com.fs.starfarer.campaign.fleet.FleetMember.updateStats(Unknown Source) ~[port_obf.jar:?]
	at com.fs.starfarer.campaign.fleet.FleetMember.init(Unknown Source) ~[port_obf.jar:?]
	at com.fs.starfarer.campaign.fleet.FleetMember.<init>(Unknown Source) ~[port_obf.jar:?]
	at com.fs.starfarer.campaign.fleet.FleetMember.<init>(Unknown Source) ~[port_obf.jar:?]
	at com.fs.starfarer.campaign.CampaignEngine.createFleetMember(Unknown Source) ~[port_obf.jar:?]
	at com.fs.starfarer.api.impl.campaign.fleets.FleetFactoryV3.addToFleet(FleetFactoryV3.java:1331) ~[starfarer.api.jar:?]
	at com.fs.starfarer.api.impl.campaign.fleets.FleetFactoryV3.addToFleet(FleetFactoryV3.java:1325) ~[starfarer.api.jar:?]
	at com.fs.starfarer.api.impl.campaign.fleets.FleetFactoryV3.addShips(FleetFactoryV3.java:1395) ~[starfarer.api.jar:?]
	at com.fs.starfarer.api.impl.campaign.fleets.FleetFactoryV3.addShips(FleetFactoryV3.java:1863) ~[starfarer.api.jar:?]
	at com.fs.starfarer.api.impl.campaign.fleets.FleetFactoryV3.addCombatFleetPoints(FleetFactoryV3.java:1764) ~[starfarer.api.jar:?]
	at com.fs.starfarer.api.impl.campaign.fleets.FleetFactoryV3.createFleet(FleetFactoryV3.java:370) ~[starfarer.api.jar:?]
	at com.fs.starfarer.api.impl.campaign.submarkets.BaseSubmarketPlugin.addShips(BaseSubmarketPlugin.java:530) ~[starfarer.api.jar:?]
	at com.fs.starfarer.api.impl.campaign.submarkets.BaseSubmarketPlugin.addShips(BaseSubmarketPlugin.java:481) ~[starfarer.api.jar:?]
	at com.fs.starfarer.api.impl.campaign.submarkets.MilitarySubmarketPlugin.updateCargoPrePlayerInteraction(MilitarySubmarketPlugin.java:71) ~[starfarer.api.jar:?]
	at exerelin.campaign.submarkets.Nex_MilitarySubmarketPlugin.updateCargoPrePlayerInteraction(Nex_MilitarySubmarketPlugin.java:15) ~[?:?]
	at stelnet.board.query.provider.MarketProvider.updateSubmarkets(MarketProvider.java:71) ~[?:?]
	at stelnet.board.query.provider.MarketProvider.updateMarket(MarketProvider.java:55) ~[?:?]
	at stelnet.board.query.MarketUpdater.updateMarket(MarketUpdater.java:86) ~[?:?]
	at stelnet.board.query.MarketUpdater.advance(MarketUpdater.java:47) ~[?:?]
	at com.fs.starfarer.campaign.CampaignEngine.advance(Unknown Source) ~[port_obf.jar:?]
	at com.fs.starfarer.campaign.CampaignState.advance(Unknown Source) ~[port_obf.jar:?]
	at com.fs.starfarer.BaseGameState.traverse(Unknown Source) ~[port_obf.jar:?]
	at com.fs.state.AppDriver.begin(Unknown Source) ~[port.common_obf.jar:?]
	at com.fs.starfarer.combat.CombatMain.main(Unknown Source) ~[port_obf.jar:?]
	at com.fs.starfarer.StarfarerLauncher.super(Unknown Source) ~[port_obf.jar:?]
	at com.fs.starfarer.StarfarerLauncher$1.run(Unknown Source) ~[port_obf.jar:?]
	at java.base/java.lang.Thread.run(Thread.java:1575) [?:?]"
jAqNNQAV,–î–ó –ê–º–Ω–∏—Å—Ç–∏—è,TeT91,C#,Tuesday 25th of June 2024 10:52:03 AM CDT,"using System;
using System.Collections.Generic;
using System.Linq;

namespace CSLight
{
    internal class Program
    {
        static void Main(string[] args)
        {
            PersonBase person = new PersonBase();
            person.ShowPrisonersInfo();
        }
    }

    class PersonBase
    {
        private List<Person> _prisoners;

        public PersonBase()
        {
            GeneratePrisoners();
        }

        public void ShowPrisonersInfo()
        {
            string crimeType = ""–ê–Ω—Ç–∏–ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–µ–Ω–Ω–æ–µ"";

            var filteredList = _prisoners.Where(prisoner => prisoner.CrimeType == crimeType);

            Console.WriteLine(""–î–æ –∞–º–Ω–∏—Å—Ç–∏–∏:"");

            ShowList(_prisoners);

            Console.WriteLine(""–ü–æ—Å–ª–µ:"");

            ShowList(filteredList);

            Console.ReadKey();
        }

        private void ShowList(IEnumerable<Person> list)
        {
            foreach (Person person in list)
            {
                Console.WriteLine($""{person.Surname} {person.Name} {person.Patronymic} - {person.CrimeType}"");
            }
        }

        private void GeneratePrisoners()
        {
            PersonCreator creator = new PersonCreator();
            int dataBaseCapacity = 20;

            _prisoners = new List<Person>();

            for (int i = 0; i < dataBaseCapacity; i++)
            {
                _prisoners.Add(creator.CreatePerson());
            }
        }
    }

    class PersonCreator
    {
        private List<string> _names;
        private List<string> _surnames;
        private List<string> _patronymic;
        private List<string> _crimeTypes;

        public PersonCreator()
        {
            InitNames();
            InitSurnames();
            InitPatronymics();
            InitCrimeTypes();
        }

        public Person CreatePerson()
        {
            string name = GetRandomValue(_names);
            string surname = GetRandomValue(_surnames);
            string patronymic = GetRandomValue(_patronymic);
            string crimeType = GetRandomValue(_crimeTypes);

            return new Person(name, surname, patronymic, crimeType);
        }

        private void InitSurnames()
        {
            _surnames = new List<string>();
            _surnames.Add(""–°–º–∏—Ä–Ω–æ–≤"");
            _surnames.Add(""–ò–≤–∞–Ω–æ–≤"");
            _surnames.Add(""–ö—É–∑–Ω–µ—Ü–æ–≤"");
            _surnames.Add(""–ü–æ–ø–æ–≤"");
            _surnames.Add(""–°–æ–∫–æ–ª–æ–≤"");
            _surnames.Add(""–õ–µ–±–µ–¥–µ–≤"");
            _surnames.Add(""–ö–æ–∑–ª–æ–≤"");
            _surnames.Add(""–ù–æ–≤–∏–∫–æ–≤"");
            _surnames.Add(""–ú–æ—Ä–æ–∑–æ–≤"");
            _surnames.Add(""–ö–æ–∑–ª–æ–≤"");
            _surnames.Add(""–í–æ–ª–∫–æ–≤"");
        }

        private void InitPatronymics()
        {
            _patronymic = new List<string>();
            _patronymic.Add(""–ú–∞–∫—Å–∏–º–æ–≤–∏—á"");
            _patronymic.Add(""–ú–∏—Ö–∞–∏–ª–æ–≤–∏—á"");
            _patronymic.Add(""–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á"");
            _patronymic.Add(""–î–º–∏—Ç—Ä–∏–µ–≤–∏—á"");
            _patronymic.Add(""–î–µ–Ω–∏—Å–æ–≤–∏—á"");
            _patronymic.Add(""–ò–ª—å–∏—á"");
            _patronymic.Add(""–ê–Ω–¥—Ä–µ–µ–≤–∏—á"");
            _patronymic.Add(""–ê—Ä—Ç–µ–º–æ–≤–∏—á"");
            _patronymic.Add(""–ò–≤–∞–Ω–æ–≤–∏—á"");
            _patronymic.Add(""–ê–ª–µ–∫—Å–µ–µ–≤–∏—á"");
            _patronymic.Add(""–ù–∏–∫–∏—Ç–∏—á"");
        }

        private void InitNames()
        {
            _names = new List<string>();
            _names.Add(""–ú–∞–∫—Å–∏–º"");
            _names.Add(""–ú–∏—Ö–∞–∏–ª"");
            _names.Add(""–ê–ª–µ–∫—Å–∞–Ω–¥—Ä"");
            _names.Add(""–î–º–∏—Ç—Ä–∏–π"");
            _names.Add(""–î–µ–Ω–∏—Å"");
            _names.Add(""–ò–ª—å—è"");
            _names.Add(""–ê–Ω–¥—Ä–µ–π"");
            _names.Add(""–ê—Ä—Ç–µ–º"");
            _names.Add(""–ò–≤–∞–Ω"");
            _names.Add(""–ê–ª–µ–∫—Å–µ–π"");
            _names.Add(""–ù–∏–∫–∏—Ç–∞"");
        }

        private void InitCrimeTypes()
        {
            _crimeTypes = new List<string>();
            _crimeTypes.Add(""–ê–Ω—Ç–∏–ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–µ–Ω–Ω–æ–µ"");
            _crimeTypes.Add(""–î—Ä—É–≥–æ–µ"");
        }

        private string GetRandomValue(List<string> values)
        {
            int randomId = UserUtils.GenerateRandomValue(values.Count);
            return values[randomId];
        }
    }

    class Person
    {
        public Person(string name, string surname, string patronymic, string crimeType)
        {
            Name = name;
            Surname = surname;
            Patronymic = patronymic;
            CrimeType = crimeType;
        }

        public string Name { get; private set; }

        public string Surname { get; private set; }

        public string Patronymic { get; private set; }

        public string CrimeType { get; private set; }
    }

    static class UserUtils
    {
        private static Random s_random = new Random();

        public static int GenerateRandomValue(int maxValue)
        {
            return s_random.Next(maxValue);
        }
    }
}"
BMDEd9N5,–°–ü–†–ò–ù–¢ ‚Ññ 8 | –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –ª–∏–Ω–µ–π–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã | –£—Ä–æ–∫ 10: –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ SimpleVector 1,chevengur,C++,Tuesday 25th of June 2024 10:50:32 AM CDT,"simple_vector.h

#pragma once

#include <cassert>
#include <initializer_list>
#include <vector>
#include <exception>
#include <algorithm>
#include <iostream>
#include ""array_ptr.h""

template <typename Type>
class SimpleVector {
public:
    using Iterator = Type*;
    using ConstIterator = const Type*;

    SimpleVector() noexcept = default;

    // –°–æ–∑–¥–∞—ë—Ç –≤–µ–∫—Ç–æ—Ä –∏–∑ size —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    explicit SimpleVector(size_t size) : size_(size), capacity_(size), ptr_(size) {
        std::fill(begin(), end(), 0);
    }

    // –°–æ–∑–¥–∞—ë—Ç –≤–µ–∫—Ç–æ—Ä –∏–∑ size —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–µ–º value
    SimpleVector(size_t size, const Type& value) : size_(size), capacity_(size), ptr_(size) {
        std::fill(begin(), end(), value);
    }

    // –°–æ–∑–¥–∞—ë—Ç –≤–µ–∫—Ç–æ—Ä –∏–∑ std::initializer_list
    SimpleVector(std::initializer_list<Type> init) : size_(init.size()), capacity_(init.size()), ptr_(init.size())
    {
        size_t b = 0;
        for (const auto& i : init)
        {
            ptr_[b] = i;
            ++b;
        }
    }

    ~SimpleVector() {}

    // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –º–∞—Å—Å–∏–≤–µ
    size_t GetSize() const noexcept {
        return size_;
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –º–∞—Å—Å–∏–≤–∞
    size_t GetCapacity() const noexcept {
        return capacity_;
    }

    // –°–æ–æ–±—â–∞–µ—Ç, –ø—É—Å—Ç–æ–π –ª–∏ –º–∞—Å—Å–∏–≤
    bool IsEmpty() const noexcept {
        return size_ == 0;
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç —Å –∏–Ω–¥–µ–∫—Å–æ–º index
    Type& operator[](size_t index) noexcept {
        return ptr_[index];
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç —Å –∏–Ω–¥–µ–∫—Å–æ–º index
    const Type& operator[](size_t index) const noexcept {

        return ptr_[index];
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç —Å –∏–Ω–¥–µ–∫—Å–æ–º index
    // –í—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ std::out_of_range, –µ—Å–ª–∏ index >= size
    Type& At(size_t index) {
        if (index >= size_)
            throw std::out_of_range(""out of range"");
        return ptr_[index];
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç —Å –∏–Ω–¥–µ–∫—Å–æ–º index
    // –í—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ std::out_of_range, –µ—Å–ª–∏ index >= size
    const Type& At(size_t index) const {
        if (index > size_)
            throw std::out_of_range(""out of range"");
        return ptr_[index];
    }

    // –û–±–Ω—É–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞, –Ω–µ –∏–∑–º–µ–Ω—è—è –µ–≥–æ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
    void Clear() noexcept {
        size_ = 0;
    }

    // –ò–∑–º–µ–Ω—è–µ—Ç —Ä–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞.
    // –ü—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ–ª—É—á–∞—é—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ç–∏–ø–∞ Type
    void Resize(size_t new_size) {
        if (new_size > capacity_) {
            auto new_array = ArrayPtr<Type>(new_size);
            for (size_t i = 0; i < size_; ++i) {
                new_array[i] = ptr_[i];
            }
            ptr_.swap(new_array);
            capacity_ = new_size;
        }
        for (size_t i = size_; i < new_size; ++i) {
            ptr_[i] = Type();
        }
        size_ = new_size;
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ç–µ—Ä–∞—Ç–æ—Ä –Ω–∞ –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–∏–≤–∞
    // –î–ª—è –ø—É—Å—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–≤–µ–Ω (–∏–ª–∏ –Ω–µ —Ä–∞–≤–µ–Ω) nullptr
    Iterator begin() noexcept {
        return ptr_.Get();
        // –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–ª–æ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ç–µ—Ä–∞—Ç–æ—Ä –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç, —Å–ª–µ–¥—É—é—â–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–º
    // –î–ª—è –ø—É—Å—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–≤–µ–Ω (–∏–ª–∏ –Ω–µ —Ä–∞–≤–µ–Ω) nullptr
    Iterator end() noexcept {
        return ptr_.Get() + size_;
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω—ã–π –∏—Ç–µ—Ä–∞—Ç–æ—Ä –Ω–∞ –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–∏–≤–∞
    // –î–ª—è –ø—É—Å—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–≤–µ–Ω (–∏–ª–∏ –Ω–µ —Ä–∞–≤–µ–Ω) nullptr
    ConstIterator begin() const noexcept {
        return ptr_.Get();
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ç–µ—Ä–∞—Ç–æ—Ä –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç, —Å–ª–µ–¥—É—é—â–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–º
    // –î–ª—è –ø—É—Å—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–≤–µ–Ω (–∏–ª–∏ –Ω–µ —Ä–∞–≤–µ–Ω) nullptr
    ConstIterator end() const noexcept {
        return ptr_.Get() + size_;
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω—ã–π –∏—Ç–µ—Ä–∞—Ç–æ—Ä –Ω–∞ –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–∏–≤–∞
    // –î–ª—è –ø—É—Å—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–≤–µ–Ω (–∏–ª–∏ –Ω–µ —Ä–∞–≤–µ–Ω) nullptr
    ConstIterator cbegin() const noexcept {
        return ptr_.Get();
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ç–µ—Ä–∞—Ç–æ—Ä –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç, —Å–ª–µ–¥—É—é—â–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–º
    // –î–ª—è –ø—É—Å—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–≤–µ–Ω (–∏–ª–∏ –Ω–µ —Ä–∞–≤–µ–Ω) nullptr
    ConstIterator cend() const noexcept {
        return ptr_.Get() + size_;
    }
private:
    size_t size_ = 0;
    size_t capacity_ = 0;
    ArrayPtr<Type> ptr_;
};

=======================================================================================================================================

test.h

#pragma once
#include <cassert>
#include <stdexcept>

// –£ —Ñ—É–Ω–∫—Ü–∏–∏, –æ–±—ä—è–≤–ª–µ–Ω–Ω–æ–π —Å–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º inline, –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ
// –∏–¥–µ–Ω—Ç–∏—á–Ω—ã—Ö –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –≤ —Ä–∞–∑–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏.
// –û–±—ã—á–Ω–æ inline –ø–æ–º–µ—á–∞—é—Ç —Ñ—É–Ω–∫—Ü–∏–∏, —á—å—ë —Ç–µ–ª–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω–æ–º —Ñ–∞–π–ª–µ,
// —á—Ç–æ–±—ã –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –Ω–µ –≤–æ–∑–Ω–∏–∫–∞–ª–æ –æ—à–∏–±–æ–∫ –∫–æ–º–ø–æ–Ω–æ–≤–∫–∏
inline void Test1() {
    //–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    {
        SimpleVector<int> v;
        assert(v.GetSize() == 0u);
        assert(v.IsEmpty());
        assert(v.GetCapacity() == 0u);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    {
        SimpleVector<int> v(5);
        assert(v.GetSize() == 5u);
        assert(v.GetCapacity() == 5u);
        assert(!v.IsEmpty());
        for (size_t i = 0; i < v.GetSize(); ++i) {
            assert(v[i] == 0);
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–∞, –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
    {
        SimpleVector<int> v(3, 42);
        assert(v.GetSize() == 3);
        assert(v.GetCapacity() == 3);
        for (size_t i = 0; i < v.GetSize(); ++i) {
            assert(v[i] == 42);
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–∞ –ø—Ä–∏ –ø–æ–º–æ—â–∏ initializer_list
    {
        SimpleVector<int> v{1, 2, 3};
        assert(v.GetSize() == 3);
        assert(v.GetCapacity() == 3);
        assert(v[2] == 3);
    }

    //–î–æ—Å—Ç—É–ø –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º –ø—Ä–∏ –ø–æ–º–æ—â–∏ At
    {
        SimpleVector<int> v(3);
        assert(&v.At(2) == &v[2]);
        try {
            v.At(3);
            assert(false);  // –û–∂–∏–¥–∞–µ—Ç—Å—è –≤—ã–±—Ä–∞—Å—ã–≤–∞–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        } catch (const std::out_of_range&) {
        } catch (...) {
            assert(false);  // –ù–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –æ—Ç–ª–∏—á–Ω–æ–µ –æ—Ç out_of_range
        }
    }

    // –û—á–∏—Å—Ç–∫–∞ –≤–µ–∫—Ç–æ—Ä–∞
    {
        SimpleVector<int> v(10);
        const size_t old_capacity = v.GetCapacity();
        v.Clear();
        assert(v.GetSize() == 0);
        assert(v.GetCapacity() == old_capacity);
    }

    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞
    {
        SimpleVector<int> v(3);
        v[2] = 17;
        v.Resize(7);
        assert(v.GetSize() == 7);
        assert(v.GetCapacity() >= v.GetSize());
        assert(v[2] == 17);
        assert(v[3] == 0);
    }
    {
        SimpleVector<int> v(3);
        v[0] = 42;
        v[1] = 55;
        const size_t old_capacity = v.GetCapacity();
        v.Resize(2);
        assert(v.GetSize() == 2);
        assert(v.GetCapacity() == old_capacity);
        assert(v[0] == 42);
        assert(v[1] == 55);
    }
    {
        const size_t old_size = 3;
        SimpleVector<int> v(3);
        v.Resize(old_size + 5);
        v[3] = 42;
        v.Resize(old_size);
        v.Resize(old_size + 2);
        assert(v[3] == 0);
    }

    // –ò—Ç–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ SimpleVector
    {
        // –ü—É—Å—Ç–æ–π –≤–µ–∫—Ç–æ—Ä
        {
            SimpleVector<int> v;
            assert(v.begin() == nullptr);
            assert(v.end() == nullptr);
        }

        // –ù–µ–ø—É—Å—Ç–æ–π –≤–µ–∫—Ç–æ—Ä
        {
            SimpleVector<int> v(10, 42);
            assert(v.begin());
            assert(*v.begin() == 42);
            assert(v.end() == v.begin() + v.GetSize());
        }
    }
}

=======================================================================================================================================

#include <cassert>
#include <cstdlib>

template <typename Type>
class ArrayPtr {
public:
    ArrayPtr() = default;

    explicit ArrayPtr(size_t size) {
        (size == 0) ? raw_ptr_ = nullptr : raw_ptr_ = new Type[size];
    }

    explicit ArrayPtr(Type* raw_ptr) noexcept {
        if (raw_ptr) raw_ptr_ = raw_ptr;
    }

    ArrayPtr(const ArrayPtr&) = delete;

    ~ArrayPtr() {
        delete[] raw_ptr_;
    }

    ArrayPtr& operator=(const ArrayPtr&) = delete;

    [[nodiscard]] Type* Release() noexcept {
        Type* currentarr = raw_ptr_;
        raw_ptr_ = nullptr;
        return currentarr;
    }

    Type& operator[](size_t index) noexcept {
        return raw_ptr_[index];
    }

    const Type& operator[](size_t index) const noexcept {
        return raw_ptr_[index];
    }

    explicit operator bool() const {
        return (raw_ptr_) ? true : false;
    }

    Type* Get() const noexcept {
        return raw_ptr_;

    }

    void swap(ArrayPtr& other) noexcept {
        Type* temp = other.raw_ptr_;
        other.raw_ptr_ = raw_ptr_;
        raw_ptr_ = temp;
    }

private:
    Type* raw_ptr_ = nullptr;
};"
p9ZNs84D,snowybot angain supersnowzy rocks,coinwalk,JavaScript,Tuesday 25th of June 2024 10:20:00 AM CDT,"var dividedby = 240;
var elderly = ((parseFloat(document.getElementById('pct_balance').value))/dividedby);
var prefit = elderly;
var winnerdinner = parseFloat(document.getElementById('pct_balance').value);
var bolance = parseFloat(document.getElementById('pct_balance').value);
var smartz = parseFloat(document.getElementById('pct_balance').value);
var tens = (prefit*10);
var sevens = (prefit*6.9);
var eights = (prefit*7.9);
var fives = (prefit*4.9);
var thirty = (prefit*30);
var belance = 0;
var joey = 0;
var upper = 6.9;
var downer = 2.9;
var snowy = (((bolance-tens)-fives)-prefit);
var beast = prefit;
var elven = 0;
var lol = false;
var greedy =  parseFloat(document.getElementById('pct_balance').value);
 
 
 
function go(){
if (greedy!=belance){
belance = parseFloat(document.getElementById('pct_balance').value);
if ((belance>(((Math.floor(belance/tens))*tens)+sevens))&&(belance<(((Math.floor(belance/tens))*tens)+eights))&&(!((belance>(joey-(prefit/2)))&&(belance<(joey+(prefit/2)))))) {
    beast = beast*2;
    joey = parseFloat(belance);
}
if ((((belance/40)-(beast))<=0)&&(((belance-beast)-thirty)>0)&&(belance<(((Math.floor(belance/tens))*tens)+sevens))){
    beast = prefit;
    joey = 0;
    lol = true;
}
if ((((belance/20)-beast)<=0)&&(((belance-beast)-thirty)<=0)&&(belance<(((Math.floor(belance/tens))*tens)+sevens))){
    beast = prefit;
    joey = 0;
}
if ((((belance/20)-beast)<=0)&&(((belance-beast)-thirty)<=0)&&(belance>(((Math.floor(belance/tens))*tens)+eights))){
    beast = prefit;
    joey = 0;
}
if ((((belance/20)-beast)<=0)&&(((belance-beast)-thirty)<=0)&&(belance>(((Math.floor(belance/tens))*tens)+sevens))&&(belance<(((Math.floor(belance/tens))*tens)+eights))){
    beast = prefit*2;
    joey = parseFloat(belance);
}
if ((((smartz/10)-beast)<=0)&&(belance<(((Math.floor(belance/tens))*tens)+sevens))){
    beast = prefit;
    joey = 0;
}
if (belance>=(winnerdinner*2.4)) {
console.log(""winner winner chicken dinner"");
    return;
}
var cat = ((belance-smartz).toFixed(8));
console.log(""profit"");
console.log(cat);
$('#pct_chance').val(49.5);
$('#pct_bet').val(((beast*1).toFixed(8)));
$('#a_lo').click();
}
greedy =  parseFloat(document.getElementById('pct_balance').value);
setTimeout(() => go(), 1);
}
 
go();"
cYTsjYdH,loadingBar.ps1,Combreal,PowerShell,Tuesday 25th of June 2024 10:11:39 AM CDT,"$itemNumber = 8
ForEach ($Item in (1..$itemNumber)) {
    Write-Progress -PercentComplete ($Item/$itemNumber*100) -Status ""R√©cup√©ration des donn√©es"" -Activity ""Information $item sur $itemNumber""
    #process
    Start-Sleep -Milliseconds 200
}"
NqtMVtCQ,Trojf√°zov√© striedav√© nap√§tia a pr√∫dy s f√°zorov√Ωm diagramom,aramej,JavaScript,Tuesday 25th of June 2024 10:10:11 AM CDT,"import React, { useState, useEffect, useRef } from 'react';

const TrojfazoveNapatiaAPrudy = () => {
  const [time, setTime] = useState(0);
  const [frequency, setFrequency] = useState(50);
  const [speed, setSpeed] = useState(1);
  const [voltageAmplitude, setVoltageAmplitude] = useState(325);
  const [currentAmplitude, setCurrentAmplitude] = useState(91.92);
  const [powerFactor, setPowerFactor] = useState(0.89);
  const [loadType, setLoadType] = useState('R');
  const [visibleWaves, setVisibleWaves] = useState({
    L1: true, L2: true, L3: true,
    I1: true, I2: true, I3: true
  });
  const [showPhasorDiagram, setShowPhasorDiagram] = useState(false);
  const animationRef = useRef();
  
  const width = 800;
  const height = 850;
  const margin = { top: 20, right: 180, bottom: 50, left: 60 };
  const chartWidth = width - margin.left - margin.right;
  const chartHeight = (height - margin.top - margin.bottom - 250) / 2;

  const xScale = (t) => (t / 0.04) * chartWidth;
  const yScaleVoltage = (v) => chartHeight / 2 - (v / (voltageAmplitude * 1.2)) * (chartHeight / 2);
  const yScaleCurrent = (i) => chartHeight / 2 - (i / (currentAmplitude * 1.2)) * (chartHeight / 2);

  useEffect(() => {
    const animate = () => {
      setTime((prevTime) => (prevTime + 0.0005 * speed) % 0.04);
      animationRef.current = requestAnimationFrame(animate);
    };
    animationRef.current = requestAnimationFrame(animate);
    return () => cancelAnimationFrame(animationRef.current);
  }, [speed]);

  const calculatePhaseShift = () => {
    const phaseAngle = Math.acos(powerFactor);
    switch (loadType) {
      case 'R': return 0;
      case 'L': return -phaseAngle;
      case 'C': return phaseAngle;
      default: return 0;
    }
  };

  const phaseShift = calculatePhaseShift();

  const generatePath = (amplitude, phase, yScale, isVoltage) => {
    let path = `M ${xScale(0)} ${yScale(amplitude * Math.sin(2 * Math.PI * frequency * time + phase + (isVoltage ? 0 : phaseShift)))}`;
    for (let t = 0.0001; t <= 0.04; t += 0.0001) {
      const x = xScale(t);
      const y = yScale(amplitude * Math.sin(2 * Math.PI * frequency * (t + time) + phase + (isVoltage ? 0 : phaseShift)));
      path += ` L ${x} ${y}`;
    }
    return path;
  };

  const phases = [
    { name: 'L1', color: '#FF0000', phase: 0 },
    { name: 'L2', color: '#00FF00', phase: -2 * Math.PI / 3 },
    { name: 'L3', color: '#0000FF', phase: 2 * Math.PI / 3 },
  ];

  const rmsVoltage = (voltageAmplitude / Math.sqrt(2)).toFixed(2);
  const rmsCurrent = (currentAmplitude / Math.sqrt(2)).toFixed(2);

  const renderChart = (yScale, amplitude, title, unit, isVoltage = true) => (
    <g>
      <text x={chartWidth / 2} y={-10} textAnchor=""middle"" fontWeight=""bold"">{title}</text>
      {/* Grid */}
      {Array.from({length: 9}, (_, i) => i * chartHeight / 8).map(y => (
        <line key={y} x1={0} y1={y} x2={chartWidth} y2={y} stroke=""#ddd"" strokeDasharray=""3,3"" />
      ))}
      {Array.from({length: 9}, (_, i) => i * chartWidth / 8).map(x => (
        <line key={x} x1={x} y1={0} x2={x} y2={chartHeight} stroke=""#ddd"" strokeDasharray=""3,3"" />
      ))}
      {/* X-axis */}
      <line x1={0} y1={chartHeight} x2={chartWidth} y2={chartHeight} stroke=""black"" />
      {[0, 0.01, 0.02, 0.03, 0.04].map((tick) => (
        <g key={tick} transform={`translate(${xScale(tick)},${chartHeight})`}>
          <line y2={5} stroke=""black"" />
          <text y={20} textAnchor=""middle"">{tick.toFixed(2)}</text>
        </g>
      ))}
      {/* Y-axis */}
      <line x1={0} y1={0} x2={0} y2={chartHeight} stroke=""black"" />
      {[-amplitude, -amplitude/2, 0, amplitude/2, amplitude].map((tick) => (
        <g key={tick} transform={`translate(0,${yScale(tick)})`}>
          <line x2={-5} stroke=""black"" />
          <text x={-10} dy="".32em"" textAnchor=""end"">{tick.toFixed(0)}</text>
        </g>
      ))}
      <text transform={`rotate(-90) translate(-${chartHeight / 2},${-margin.left + 20})`} textAnchor=""middle"">{unit}</text>
      {/* Waveforms */}
      {phases.map(({ color, phase, name }) => (
        visibleWaves[isVoltage ? name : `I${name.slice(1)}`] && (
          <path
            key={name}
            d={generatePath(amplitude, phase, yScale, isVoltage)}
            fill=""none""
            stroke={color}
            strokeWidth=""2""
          />
        )
      ))}
    </g>
  );

  const renderPhasorDiagram = () => {
    const centerX = chartWidth / 2;
    const centerY = chartHeight / 2;
    const radius = Math.min(centerX, centerY) * 0.8;

    const drawPhasor = (angle, length, color, label) => {
      const x = centerX + length * Math.cos(angle);
      const y = centerY - length * Math.sin(angle);
      return (
        <g key={label}>
          <line x1={centerX} y1={centerY} x2={x} y2={y} stroke={color} strokeWidth=""2"" />
          <text x={x + 10 * Math.cos(angle)} y={y - 10 * Math.sin(angle)} fill={color}>{label}</text>
        </g>
      );
    };

    return (
      <g>
        <circle cx={centerX} cy={centerY} r={radius} stroke=""#ddd"" fill=""none"" />
        {phases.map(({ name, color, phase }) => (
          <React.Fragment key={name}>
            {drawPhasor(phase, radius, color, `U${name.slice(1)}`)}
            {drawPhasor(phase + phaseShift, radius * currentAmplitude / voltageAmplitude, color, `I${name.slice(1)}`)}
          </React.Fragment>
        ))}
      </g>
    );
  };

  const toggleWave = (wave) => {
    setVisibleWaves(prev => ({ ...prev, [wave]: !prev[wave] }));
  };

  return (
    <div>
      <h2 style={{ textAlign: 'center' }}>Trojf√°zov√© striedav√© nap√§tia a pr√∫dy s f√°zorov√Ωm diagramom</h2>
      <div style={{ display: 'flex', flexWrap: 'wrap', justifyContent: 'center', marginBottom: '10px', gap: '20px' }}>
        <label>
          Frekvencia (Hz):
          <input
            type=""number""
            value={frequency}
            onChange={(e) => setFrequency(Number(e.target.value))}
            min=""1""
            max=""100""
            step=""1""
          />
        </label>
        <div>
          <label htmlFor=""speedSlider"">R√Ωchlos≈• anim√°cie: {speed.toFixed(2)}x</label>
          <input
            id=""speedSlider""
            type=""range""
            min=""0""
            max=""2""
            step=""0.01""
            value={speed}
            onChange={(e) => setSpeed(Number(e.target.value))}
            style={{ width: '200px' }}
          />
        </div>
        <div>
          <label htmlFor=""voltageSlider"">Amplit√∫da nap√§tia: {voltageAmplitude.toFixed(0)} V</label>
          <input
            id=""voltageSlider""
            type=""range""
            min=""100""
            max=""500""
            step=""1""
            value={voltageAmplitude}
            onChange={(e) => setVoltageAmplitude(Number(e.target.value))}
            style={{ width: '200px' }}
          />
        </div>
        <div>
          <label htmlFor=""currentSlider"">Amplit√∫da pr√∫du: {currentAmplitude.toFixed(2)} A</label>
          <input
            id=""currentSlider""
            type=""range""
            min=""10""
            max=""200""
            step=""0.1""
            value={currentAmplitude}
            onChange={(e) => setCurrentAmplitude(Number(e.target.value))}
            style={{ width: '200px' }}
          />
        </div>
        <div>
          <label htmlFor=""powerFactorSlider"">√öƒçinn√≠k: {powerFactor.toFixed(2)}</label>
          <input
            id=""powerFactorSlider""
            type=""range""
            min=""0""
            max=""1""
            step=""0.01""
            value={powerFactor}
            onChange={(e) => setPowerFactor(Number(e.target.value))}
            style={{ width: '200px' }}
          />
        </div>
        <div>
          <label>Typ z√°≈•a≈æe:</label>
          <select value={loadType} onChange={(e) => setLoadType(e.target.value)}>
            <option value=""R"">Odporov√° (R)</option>
            <option value=""L"">Indukt√≠vna (L)</option>
            <option value=""C"">Kapacitn√° (C)</option>
          </select>
        </div>
        <div>
          <label>
            <input
              type=""checkbox""
              checked={showPhasorDiagram}
              onChange={() => setShowPhasorDiagram(!showPhasorDiagram)}
            />
            Zobrazi≈• f√°zorov√Ω diagram
          </label>
        </div>
      </div>
      <svg width={width} height={height}>
        <g transform={`translate(${margin.left},${margin.top})`}>
          {showPhasorDiagram ? (
            renderPhasorDiagram()
          ) : (
            <>
              {renderChart(yScaleVoltage, voltageAmplitude, ""Nap√§tie"", ""Nap√§tie (V)"", true)}
              <g transform={`translate(0,${chartHeight + margin.top})`}>
                {renderChart(yScaleCurrent, currentAmplitude, ""Pr√∫d"", ""Pr√∫d (A)"", false)}
              </g>
            </>
          )}
          {/* Legend and toggles */}
          <g transform={`translate(${chartWidth + 10}, 0)`}>
            {phases.map(({ name, color }, index) => (
              <g key={name} transform={`translate(0, ${index * 40})`}>
                <rect width={15} height={15} fill={color} />
                <text x={20} y={12}>{name}</text>
                <foreignObject x=""0"" y=""20"" width=""100"" height=""20"">
                  <label style={{ fontSize: '12px' }}>
                    <input
                      type=""checkbox""
                      checked={visibleWaves[name]}
                      onChange={() => toggleWave(name)}
                    />
                    Zobrazi≈•
                  </label>
                </foreignObject>
              </g>
            ))}
            {phases.map(({ name, color }, index) => (
              <g key={`I${name}`} transform={`translate(0, ${(index + 3) * 40})`}>
                <rect width={15} height={15} fill={color} />
                <text x={20} y={12}>{`I${name.slice(1)}`}</text>
                <foreignObject x=""0"" y=""20"" width=""100"" height=""20"">
                  <label style={{ fontSize: '12px' }}>
                    <input
                      type=""checkbox""
                      checked={visibleWaves[`I${name.slice(1)}`]}
                      onChange={() => toggleWave(`I${name.slice(1)}`)}
                    />
                    Zobrazi≈•
                  </label>
                </foreignObject>
              </g>
            ))}
          </g>
          {/* Key values */}
          <g transform={`translate(${chartWidth + 10}, ${chartHeight * 2 + margin.top * 2})`}>
            <text y=""20"">RMS Nap√§tie: {rmsVoltage} V</text>
            <text y=""40"">RMS Pr√∫d: {rmsCurrent} A</text>
            <text y=""60"">Frekvencia: {frequency} Hz</text>
            <text y=""80"">Typ z√°≈•a≈æe: {loadType === 'R' ? 'Odporov√°' : loadType === 'L' ? 'Indukt√≠vna' : 'Kapacitn√°'}</text>
            <text y=""100"">√öƒçinn√≠k: {powerFactor.toFixed(2)}</text>
            <text y=""120"">F√°zov√Ω posun: {(phaseShift * 180 / Math.PI).toFixed(2)}¬∞</text>
          </g>
        </g>
      </svg>
    </div>
  );
};

export default TrojfazoveNapatiaAPrudy;"
