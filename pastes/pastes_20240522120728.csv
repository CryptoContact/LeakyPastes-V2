id,title,username,language,date,content
cJyZJNAr,07. Square with Maximum Sum,Nenogzar,Python,Wednesday 22nd of May 2024 07:05:28 AM CDT,"rows, colons = list(map(int, input().split("", "")))
 
matrix_list = [list(map(int, input().split("", ""))) for _ in range(rows)]
max_sum = {""max number"": float('-inf'), ""row"": 0, ""col"": 0}
 
def check_valid_index(row, col):
    return row + 1 < rows and col + 1 < colons
 
def sum_square(row, col):
    if check_valid_index(row, col):
        sum_total = matrix_list[row][col] + matrix_list[row][col + 1] + matrix_list[row + 1][col] + matrix_list[row + 1][col + 1]
        if max_sum[""max number""] < sum_total:
            max_sum[""max number""] = sum_total
            max_sum[""row""] = row
            max_sum[""col""] = col
 
for row in range(rows):
    for col in range(colons):
        sum_square(row, col)
 
for row in range(max_sum[""row""], max_sum[""row""] + 2):
    print("" "".join(map(str, matrix_list[row][max_sum[""col""]: max_sum[""col""] + 2])))
print(max_sum['max number'])"
xHK910gX,🤑 G2A.com Free Gift Card Guide May 2024 FIX 🎁,ssss50w,GetText,Wednesday 22nd of May 2024 07:01:56 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view?usp=sharing
 
Working as of:
22 May 2024"
TpQrn4MJ,LearnerScript,RuneScapePB,Java,Wednesday 22nd of May 2024 07:00:01 AM CDT,"import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Point;
import java.io.IOException;
import java.net.URL;   
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;
import org.powerbot.core.event.listeners.PaintListener;
import org.powerbot.core.randoms.AntiRandom;
import org.powerbot.core.script.ActiveScript;
import org.powerbot.core.script.job.Task;
import org.powerbot.game.api.Manifest;
import org.powerbot.game.api.methods.Game;
import org.powerbot.game.api.methods.Walking;
import org.powerbot.game.api.methods.input.Keyboard;
import org.powerbot.game.api.methods.input.Mouse;
import org.powerbot.game.api.methods.interactive.NPCs;
import org.powerbot.game.api.methods.interactive.Players;
import org.powerbot.game.api.methods.tab.Inventory;
import org.powerbot.game.api.methods.tab.Skills;
import org.powerbot.game.api.util.Timer;
import org.powerbot.game.api.wrappers.interactive.NPC;
import org.powerbot.game.api.wrappers.node.Item;
     
    @Manifest
    (
    authors = { ""RuneScape"" },
    name = ""MillaChickens"",
    description = ""Basic Chicken Killer with EOC Support"",
    version = 1.0,
    website = ""Soon""
    )
    public class MillaChicken extends ActiveScript implements PaintListener{
       
 
        private final Image img2 = getImage(""http://fc07.deviantart.net/fs43/f/2009/067/1/d/DOMINATION_OF_THE_EVIL_CHICKEN_by_DaEliminator.png"");
        private final Image img1 = getImage(""http://i50.tinypic.com/2z8ys9d.png"");
        
        double currentexperience;
        double experienceperhour;
        int startinglevel;
        double startingexperience;
        int currentlevel;
        int levelsgained;
        double experiencegained;
        double experiencetonextlevel;
        int percenttonextlevel;
        private double hours, minutes, seconds;
        
        public final static int FEATHER_ID = 314;
        
        
        private static String status;
    
        
 
        private Image getImage(String url) {
          try {
              return ImageIO.read(new URL(url));
          } catch(IOException e) {
              return null;
          }
        }
        
            public static boolean start;
            public static int FOOD_ID, startExp, gained;
            public static int[]Chicken = {41,1017,2314,2315,2313};
            public static Timer Time;
            public void onStart(){
                status = ""Input food ID!"";
                    Time = new Timer(0);
                    startExp = Skills.getExperience(Skills.STRENGTH);
                    Mouse.setSpeed(Mouse.Speed.VERY_FAST);
            }
            @Override
            public int loop() {
            if(FoodId.validate())
                            FoodId.run();
                    if(Attack.validate())
                            Attack.run();
                    Keyboard.sendText(""1"", false);
                    Keyboard.sendText(""2"", false);
                    Keyboard.sendText(""3"", false);
                    Keyboard.sendText(""4"", false);
                    if(Eat.validate())
                            Eat.run();
                    return 30;
            }
            public static class FoodId{
                    public static void run(){
                            try{
                            FOOD_ID = Integer.parseInt(JOptionPane.showInputDialog(""Eneter the ID of the Food below!""));
                            start = true;
                            }catch(Exception e){
                                    FOOD_ID = -1;
                                    start = true;
                            }
                    }
                    public static boolean validate(){
                            return start == false;
                    }
            }
            public static class Attack{
                    public static void run(){
                        status = ""Attacking Chicken!"";
                            NPC chicken = NPCs.getNearest(Chicken);
                            if(Players.getLocal().isIdle()){
                                    if(chicken != null){
                                            if(chicken.isOnScreen()){
                                                    if(!chicken.isInCombat()){
                                                            chicken.interact(""Attack"");
                                                            Keyboard.sendText(""1"", false);
                                                            Keyboard.sendText(""2"", false);
                                                            Keyboard.sendText(""3"", false);
                                                            Keyboard.sendText(""4"", false);
                                                            Task.sleep(500,950);
                                                    }
                                            }else{
                                                status = ""Walking to Chicken!"";
                                                    Walking.walk(chicken);
                                                    Task.sleep(500,550);
                                            }
                                    }
                            }
                    }
                    public static boolean validate(){
                            return start;
                    }
            }
            public static class Eat{
                    public static void run(){
                        status = ""Eating!"";
                            if(Players.getLocal().getHpPercent() < 30){
                                    for(Item i : Inventory.getItems()){
                                            if(i.getId() == FOOD_ID){
                                                status = ""Eating!"";
                                                Keyboard.sendText(""="", false);
                                                    i.getWidgetChild().click(true);
                                                    Task.sleep(50,101);
                                            }
                                    }
                            }
                    }
                    public static boolean validate(){
                            return start && FOOD_ID != -1;
                    }
            }
            
            
            @Override
            public void onRepaint(Graphics g1) {
                    Graphics2D g = (Graphics2D) g1;
 
                    Point p = new Point(Mouse.getX(), Mouse.getY());
                    Mouse.setSpeed(Mouse.Speed.VERY_FAST); 
                    g.drawImage(img1, p .x, p .y, null);
                    g.setColor(Color.WHITE);
                    g.drawLine(0, Mouse.getY(), Game.getDimensions().width,
                                    Mouse.getY());
                    g.drawLine(Mouse.getX(), 0, Mouse.getX(),
                                    Game.getDimensions().height);
                    
                    gained = Skills.getExperience(Skills.STRENGTH) - startExp;
                    g.setColor(Color.green);
                    g.setFont(new Font(""Georgia"", Font.PLAIN, 18));
                    
                    g.drawString(""Time Ran: "" + Time.toElapsedString(),555, 315);
                    
                    g.drawString(""EXP Gained: "" + gained,555,330);
 
                    g.drawString(""Current Exp: "" + currentexperience, 555,360);
                    
                    g.drawString(""Exp / Hour: "" + formatdouble(experienceperhour), 555,345);
                    
                    g.setColor(Color.WHITE);
                    g.drawString(""Made By : MillaJovovich"", 5, 360);
                    
                    g.setColor(Color.RED);
                    g.drawString(""Status: "" + status, 280, 360);
                    
                    
 
                    g.drawImage(img2, 555 , 370, null);
 
 
                    currentexperience = Skills.getExperience(Skills.STRENGTH);
                    experienceperhour = experiencegained / hours;
                    experiencegained = currentexperience - startingexperience;
                    currentlevel = Skills.getRealLevel(Skills.STRENGTH);
                    
                    levelsgained = currentlevel - startinglevel;
                   
                    currentexperience = Skills.getExperience(Skills.STRENGTH);
                   
                    experiencegained = currentexperience - startingexperience;
                   
                    experienceperhour = experiencegained / hours;
                   
                    experiencetonextlevel = Skills.getExperienceToLevel(Skills.STRENGTH, Skills.getLevel(Skills.STRENGTH) + 1);
            }
            
            private String formatTime(double time) {
                        final int sec = (int) (time / 1000), h = sec / 3600, m = sec / 60 % 60, s = sec % 60;
                        return (h < 10 ? ""0"" + h : h) + "":"" + (m < 10 ? ""0"" + m : m) + "":""
                                        + (s < 10 ? ""0"" + s : s);
                }
           
                  
    
    
    private String formatdouble(double input) {
        
       
                String formattedmoney;
                formattedmoney = String.format(""%.0f"", (input));
 
                if (input >= 1000 & input < 1000000) {
                        input = input / 1000;
                        formattedmoney = String.format(""%.1fk"", (input));
                }
 
                if (input >= 1000000) {
                        input = input / 1000000;
                        formattedmoney = String.format(""%.1fm"", (input));
                }
               
                return formattedmoney;
        }    
            }"
meUPDxj2,07_square_with_maximum_sum,Nenogzar,Python,Wednesday 22nd of May 2024 06:58:15 AM CDT,"rows, colons = list(map(int, input().split("", "")))

matrix_list = [list(map(int, input().split("", ""))) for _ in range(rows)]
max_sum = {""max number"": float('-inf'), ""row"": 0, ""col"": 0}

def check_valid_index(row, col):
    return row + 1 < rows and col + 1 < colons

def sum_square(row, col):
    if check_valid_index(row, col):
        sum_total = matrix_list[row][col] + matrix_list[row][col + 1] + matrix_list[row + 1][col] + matrix_list[row + 1][col + 1]
        if max_sum[""max number""] < sum_total:
            max_sum[""max number""] = sum_total
            max_sum[""row""] = row
            max_sum[""col""] = col

for row in range(rows - 1):
    for col in range(colons - 1):
        sum_square(row, col)

for row in range(max_sum[""row""], max_sum[""row""] + 2):
    print("" "".join(map(str, matrix_list[row][max_sum[""col""]: max_sum[""col""] + 2])))
print(max_sum['max number'])
"
NPvuqK8B,Битва с боссом,Yaniha,C#,Wednesday 22nd of May 2024 06:36:22 AM CDT,"using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Web;
using static System.Net.Mime.MediaTypeNames;

namespace CSLight
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Random random = new Random();
            int playerHealth = 600;
            int playerHealthMax = 600;
            int playerMana = 100;
            int playerManaMax = 100;
            int playerManaRegen = 10;
            int playerHitDamage = 50;
            int playerFireballDamage = 10;
            int playerExplosionDamage = 220;
            int playerHealPotion = 350;
            int playerManaPorion = 100;
            int playerHealPotionCount = 4;
            int playerFireballsCount = 0;
            int playerFireballPrice = 40;
            int playerFireballCanUse = 1;
            int bossHealth = 1000;
            int bossDamageMax = 151;
            int bossDamageMin = 75;
            int bossDamage;
            bool battleIsActive = true;
            string userInput;

            while (battleIsActive)
            {
                Console.Clear();
                Console.WriteLine($""Ваши жизни: {playerHealth}\n"" +
                    $""Ваша мана: {playerMana}\n"" +
                    $""Зелий исцеления: {playerHealPotionCount}\n"" +
                    $""Фаерболов на локации: {playerFireballsCount}"");
                Console.SetCursorPosition(30, 0);
                Console.WriteLine($""Жизни босса: {bossHealth}"");
                Console.SetCursorPosition(0, 5);
                Console.WriteLine($""Выберите способность:\n"" +
                    $""1.Удар (нанести {playerHitDamage} урона)\n"" +
                    $""2.Фаерболл (нанести {playerFireballDamage} урона, + {playerFireballCanUse} фаербол на локации)(Цена: {playerFireballPrice} маны)\n"" +
                    $""3.Взрыв фаерболлов (за каждый фаерболл на локации нанаести {playerExplosionDamage} урона ({playerExplosionDamage * playerFireballsCount}))\n"" +
                    $""4.Выпить зелье (восстановить {playerHealPotion} здоровья и {playerManaPorion} маны)"");
                userInput = Console.ReadLine();

                bossDamage = random.Next(bossDamageMin, bossDamageMax);
                playerHealth -= bossDamage;
                Console.Clear();

                switch (userInput)
                {
                    case ""1"":
                        bossHealth -= playerHitDamage;
                        Console.WriteLine($""Вы нанесли боссу: {playerHitDamage} урона."");
                        break;
                    case ""2"":
                        if (playerMana < playerFireballPrice)
                        {
                            Console.WriteLine(""У вас не хватает маны"");
                        }
                        else
                        {
                            bossHealth -= playerFireballDamage;
                            playerFireballsCount++;
                            playerMana -= playerFireballPrice;
                            Console.WriteLine($""Вы нанесли боссу: {playerFireballDamage} урона."");
                        }
                        break;
                    case ""3"":
                        if (playerFireballsCount > 0)
                        {
                            bossHealth -= playerExplosionDamage * playerFireballsCount;
                            Console.WriteLine($""Вы нанесли боссу: {playerExplosionDamage * playerFireballsCount} урона"");
                            playerFireballsCount = 0;
                        }
                        else
                        {
                            Console.WriteLine(""У вас нет фаерболлов на локации("");
                        }
                        break;
                    case ""4"":
                        if (playerHealPotionCount <= 0)
                        {
                            Console.WriteLine(""У вас нет зелья"");
                        }
                        else
                        {
                            if (playerHealth + playerHealPotion >= playerHealthMax)
                            {
                                playerHealth = playerHealthMax;
                            }
                            else
                            {
                                playerHealth += playerHealPotion;
                            }

                            if (playerMana + playerManaPorion >= playerManaMax)
                            {
                                playerMana = playerManaMax;
                            }
                            else
                            {
                                playerMana += playerManaPorion;
                            }
                            playerHealPotionCount--;
                            Console.WriteLine(""Вы принимаете зелье исциления"");
                        }
                        break;
                    default:
                        Console.WriteLine(""Вы промахнулись!"");
                        break;
                }

                Console.WriteLine($""Вам нанесено: {bossDamage} урона"");
                Console.ReadLine();

                if (playerMana + playerManaRegen >= playerManaMax)
                {
                    playerMana = playerManaMax;
                }
                else
                {
                    playerMana += playerManaRegen;
                }

                if (playerHealth <= 0 && bossHealth <= 0)
                {
                    Console.Clear();
                    Console.WriteLine(""Вы оба погибли"");
                    Console.ReadLine();
                    battleIsActive = false;
                }
                else if (playerHealth <= 0)
                {
                    Console.Clear();
                    Console.WriteLine(""Вы погибли"");
                    Console.ReadLine();
                    battleIsActive = false;
                }
                else if (bossHealth <= 0)
                {
                    Console.Clear();
                    Console.WriteLine(""Вы победили"");
                    Console.ReadLine();
                    battleIsActive = false;
                }
            }

            Console.ReadKey();
        }
    }
}"
35ueCmXf,quuuuizeeee,FranzVuttke,Python,Wednesday 22nd of May 2024 06:25:58 AM CDT,"#!/home/ounis/pyapps/bin/python


import random
from warnings import warn

# lista słówek
# schema:
# (vocabulary, (good_answer, possible_answer1, possible_answer2, ...))
vocabularies = ((""w_zek"",(""ó"",""u"", ""R"")),
                (""p_sty"", (""u"", ""ó"")),
                (""bo_ater"", (""h"", ""ch"")),
                (""r_bin"", (""u"", ""ó"")),
                (""wr_bel"", (""ó"", ""u"", ""a"")), )


def save2FileJSON(aFileName, aVocs):
    ...

def loadFromFileJSON(aFileName):
    ...

def getRandomAnsw(anAnsw):
    warn(""już nie używane...s"")
    return random.sample(anAnsw, len(anAnsw))

def getPhrase(aVoc, valIndex):
    voc = aVoc[0]
    corr_v = aVoc[1][valIndex]
    phrase = """"
    for c in voc:
        if c != ""_"":
            phrase = phrase + c
        else:
            phrase = phrase + """".join([x for x in corr_v])
    return phrase


def getCorrectPhrase(aVoc):
    return getPhrase(aVoc, 0)

def getIncorrectPhrase(aVoc):
    return getPhrase(aVoc, 1)

# for v in vocabularies:
#     print(getCorrectPhrase(v))
# exit()

SCORE = len(vocabularies)
MAX = SCORE

questionsnums = []
while len(questionsnums)!= MAX:
    q = random.randrange(MAX)
    if q in questionsnums:
        continue
    else:
        questionsnums.append(q)
# print(questionsnums)
# exit()

for qn in questionsnums:
    v = vocabularies[qn]
    print(f""\n\t\t{v[0]}"")
    good_a = v[1][0]
    print(""Wybierz brakującą literę: "")
    ran_answ = getRandomAnsw(v[1])
    # ran_answ = random.sample(v[1], len(v[1]))
    for i, a in enumerate(ran_answ):
        print(f'\t {i+1} - {a}')
    user_answ = int(input(""\t>""))
    # print(good_a, ran_answ[user_answ], user_answ)
    if ran_answ[user_answ-1] == good_a:
        print(""Zgadza się!!!"")
    else:
        print(""NIE!!! Odpwiedź błędna!!!"")
        SCORE = SCORE - 1
print(""\n\nMożliwych punktów do zdobycia:"", MAX)
print(""WYNIK:"", SCORE)
# print(vocabularies)
"
ExABNkWZ,Untitled,usernamekiran,Python,Wednesday 22nd of May 2024 06:22:22 AM CDT,"import collections  # Stackexchange code for list utilities requires this
import datetime  # get current time, convert time string representations
import logging  # warning messages etc.
import re  # regular expressions, used to match new section edit summaries
import sys  # allows command line arguments

# Pywikibot and associated imports
import pywikibot


# Commands that directly call the API using PWB
def manual_API_call(site, format='json', formatversion=2, **kwargs):  # noqa: D301
    """"""Make API request by giving parameters 'by hand'.

    Workaround to make direct API calls, because PWB does not (yet?) support
    all API syntax, including some stuff we need.

    Input:
    - site is an APISite, e.g. obtained by pywikibot.Site(); PWB should be able
    to read pages there (i.e. be logged with the appropriate permissions if
    needed)
    - keyword arguments: will be passed unmodified to the API for Site.
        Defaults include:
        format=json&formatversion=2


    Doctests:
    >>> manual_API_call(pywikibot.Site(), action='parse', prop='sections',\
            oldid=837538913)['parse']['sections'][:2] ==\
                [{'index': '1', 'anchor': 'Interesting_facts', 'toclevel': 1,\
                  'line': 'Interesting facts','byteoffset': 3282,'level': '2',\
                  'number': '1', 'fromtitle': 'Wikipedia:Teahouse'},\
                 {'index': '2', 'anchor': 'oclc', 'toclevel': 1,\
                  'line': 'oclc', 'byteoffset': 9831, 'number': '2',\
                  'fromtitle': 'Wikipedia:Teahouse', 'level': '2'}]
    True
    """"""
    request = pywikibot.data.api.Request.create_simple(site, **kwargs)
    return request.submit()


def whoami(site=pywikibot.Site()):
    """"""Check the currently logged-in user via the API.""""""
    return site.userinfo['name']


def get_user_info(userlist, site=pywikibot.Site()):  # noqa:D301
    """"""Query the API for user info.

    Input:
    - userlist is a list of strings, each string being a username

    Output:
    - dict whose keys match the provided userlist; each entry contains user
    information as given by the API

    Doctests:
    >>> get_user_info(['Jimbo Wales','Sandbox for user warnings']
    ...              ).keys() == {'Jimbo Wales','Sandbox for user warnings'}
    True
    >>> get_user_info(['Jimbo Wales'])['Jimbo Wales']['registration']
    '2001-03-27T20:47:31Z'
    >>> get_user_info(['Nonexisting username'])==\
    {'Nonexisting username': {'missing': '', 'name': 'Nonexisting username'}}
    True
    """"""

    usersgen = site.users(userlist)

    # transform into a dictionary whose keys are the usernames
    resultdict = dict()
    for entry in usersgen:
        resultdict[entry['name']] = entry
    return resultdict


def get_block_info(userlist, site=pywikibot.Site()):
    """"""Query the API for block info.

    Input: a list of strings, each string being a username.
    Output: a dictionary of bool such that dict[user] is True if the user
    currently (1) exists and (2) is blocked; dict keys match the input.

    Although get_user_info could be used to check for a current block on logged
    accounts, it is not possible on IP accounts, hence the need for this other
    subfunction. See also
    - https://www.mediawiki.org/wiki/API:Users
    - https://www.mediawiki.org/w/index.php?title=Topic:Tspl9p7oiyzzm19w

    Doctests:
    >>> get_block_info(['Tigraan', 'Blocked user', 'Nonexisting username']
    ...                ) == {'Tigraan': False,
    ...                      'Blocked user': True,
    ...                      'Nonexisting username': False}
    True
    """"""
    blockgen = site.blocks(users=userlist)

    # transform result into a dict of bool
    resultdict = dict()
    for user in userlist:
        resultdict[user] = False
    for block in blockgen:
        resultdict[block['user']] = True

    return resultdict


def get_sections_from_revid(pageindicator, site=pywikibot.Site()):  # noqa: D301
    """"""Get list of sections from specific page revision.

    Input:
    - site: 
    - pageindicator: indicates which page to use.
        - if a str, uses the current revision of the page with that title
        - if an int, treated as a revision number via 'oldid' in
          https://www.mediawiki.org/wiki/API:Parsing_wikitext

    Doctests:
    >>> get_sections_from_revid(783718598)[:2]==\
    [{'anchor': 'Request:_World_Cafe',
    ...  'byteoffset': 3329,
    ...  'fromtitle': 'Wikipedia:Teahouse',
    ...  'index': '1',
    ...  'level': '2',
    ...  'line': 'Request: World Cafe',
    ...  'number': '1',
    ...  'toclevel': 1},
    ... {'anchor': 'How_to_publish_my_page',
    ...  'byteoffset': 8292,
    ...  'fromtitle': 'Wikipedia:Teahouse',
    ...  'index': '2',
    ...  'level': '2',
    ...  'line': 'How to publish my page',
    ...  'number': '2',
    ...  'toclevel': 1}
    ... ]
    True
    """"""
    params = {'action': 'parse',
              'prop': 'sections',
              }
    if isinstance(pageindicator, int):
        params['oldid'] = pageindicator
    else:
        params['page'] = pageindicator

    api_call_result = manual_API_call(site, **params)

    # Traverse two levels of the dictionary and return
    return api_call_result['parse']['sections']


def get_revisions_from_api(pagename, oldtimestamp, newtimestamp,
                           maxcontinuenumber=0, continuestring=None,
                           site=pywikibot.Site()):  # noqa: D301
    """"""Get all revisions to specific page since a given timestamp.

    Input:
    - pagename: string, title of the page for which to pull revisions
    - oldtimestamp, newtimestamp: strings, representing timestamps in Mediawiki
      format, between which to lookup the revisions
    Output: a list of dict, each corresponding to a single revision

    That function can also pull multiple pages with the rvcontinue API key.
    To do so, the function is called recursively with a continuenumber (counter
    describing the maximum number of page pulls left, to avoid infinite looping
    while requesting API resources) and a continuestring, cf. rvcontinue in
    https://www.mediawiki.org/wiki/API:Revisions

    Doctests:
    >>> get_revisions_from_api('Tiger','2018-03-01T00:00:00Z',
    ...                        '2018-03-05T00:00:00Z') ==\
    [{'timestamp': '2018-03-04T15:30:31Z',
    ...  'parentid': 828307448,
    ...  'comment': '/* Size */Journal cites: format page range,',
    ...  'user': 'Rjwilmsi',
    ...  'revid': 828751877},
    ... {'timestamp': '2018-03-01T20:11:02Z',
    ...  'parentid': 828233956,
    ...  'comment': '/* Reproduction */ hatnote',
    ...  'user': 'BDD',
    ...  'revid': 828307448},
    ... {'timestamp': '2018-03-01T10:08:52Z',
    ...  'parentid': 828032712,
    ...  'comment': '/* Taxonomy */ edited ref',
    ...  'user': 'BhagyaMani',
    ...  'revid': 828233956}]
    True
    """"""
    params = {'action': 'query',
              'prop': 'revisions',
              'titles': pagename,
              'rvprop': 'timestamp|user|comment|ids',
              'rvdir': 'older',
              'rvend': oldtimestamp,
              'rvstart': newtimestamp,
              'rvlimit': 'max'
              }

    # Previous call may require to continue a call
    if continuestring:
        params['rvcontinue'] = continuestring

    api_call_result = manual_API_call(site, **params)

    tmp = api_call_result['query']['pages']
    tmp2 = list(tmp.keys())  # single-element list e.g. ['36896']
    revlist = tmp[tmp2[0]]['revisions']

    # Check if we need to pull more revisions
    # If so, recursively call itself and merge results
    if maxcontinuenumber > 0 and 'query-continue' in api_call_result:
        # 'batchcomplete' key present = no continue needed
        # maxcontinuenumber<=0 = we have reached the maximum of continues

        # toprint = api_call_result.copy()
        # toprint['query']['pages'] = '...some stuff...'
        # print(toprint)
        cs = api_call_result['query-continue']['revisions']['rvcontinue']
        rcl = get_revisions_from_api(pagename, oldtimestamp, newtimestamp,
                                     maxcontinuenumber=maxcontinuenumber - 1,
                                     continuestring=cs)
        full_list = revlist + rcl
        return full_list
    else:
        return revlist


# Other commands
def isnotifiable(users):
    """"""Check if specified users can be notified.

    Input: list of strings (usernames).
    Output is a dict of booleans, keys match input (True = can be notified).

    This takes care of the policy aspect (who gets notified, in general)
    but NOT of bot exclusion compliance, which must be handled elsewhere.
    For instance pywikibot's scripts should take care of it, per
    https://en.wikipedia.org/wiki/Template:Bots#Implementation

    Current policy is to notify anyone regardless of 'age' (edit count) or
    groups (autoconfirmed etc.) but to not notify blocked users.

    Doctests:
    >>> isnotifiable(['Tigraan'])
    {'Tigraan': True}

    >>> isnotifiable(['Blocked user'])
    {'Blocked user': False}

    >>> isnotifiable(['Nonexisting username'])
    {'Nonexisting username': False}
    """"""
    # Block information
    isblocked = get_block_info(users)

    # Other general user information
    # WARNING! For IP editors, all we get is the 'invalid' key.
    # Do not rely on this to get (e.g.) the edit count of an IP editor!
    userinfo = get_user_info(users)

    is_notifiable = dict()
    no_notif_str = 'No notification will be sent.'
    unknown_user_str = 'User ""{un}"" does not seem to exist. ' + no_notif_str
    blocked_user_str = 'User ""{un}"" is currently blocked. ' + no_notif_str
    for u in users:
        info = userinfo[u]
        # NOTIFICATION POLICY APPLIES HERE

        # If username does not exist (renamed user?) do not notify
        if 'missing' in info:
            is_notifiable[u] = False
            logging.info(unknown_user_str.format(un=u))
            continue

        # Do not notify currently-blocked users
        if isblocked[u]:
            is_notifiable[u] = False
            logging.info(blocked_user_str.format(un=u))
            continue

        # # Further policy options, inactive as of 2018-03-18
        # # Do not notify users with more than x edits
        # maxedits = 1000
        # if info['editcount']>maxedits:
        #     is_notifiable[u] = False
        #     logging.info('User ""{un}"" performed more than {nedits} edits and will not be notified.'.format(un=u,nedits=maxedits))  # noqa: E501
        #
        # # Do not notify users with the ECP flag
        # if 'extendedconfirmed' in info['groups']:
        #     is_notifiable[u] = False
        #     logging.info('User ""{un}"" is extended confirmed and will not be notified.'.format(un=u))  # noqa: E501

        # By default, we should notify
        is_notifiable[u] = True

    return is_notifiable


def UTC_timestamp_x_days_ago(days_offset=0):
    """"""Timestamp x days ago in Mediawiki format.

    Input is the number of days that will be substracted from the
    current timestamp.
    Format: cf. https://www.mediawiki.org/wiki/Manual:Timestamp
    """"""
    current_time = datetime.datetime.utcnow()  # MediaWiki servers use UTC time
    offset = datetime.timedelta(days=-days_offset)
    UTC_time_then = current_time + offset

    timestamp = UTC_time_then.strftime(""%Y%m%d%H%M%S"")  # MW format
    return timestamp


def safe_list_diff(listbefore, listafter):
    """"""Find elements that were removed from one list to another.

    Compared to a basic set diff, this takes care of the edge case
    where an element is present multiple times in the larger list
    by removing it altogether (and logging this fact).
    Also, it will raise an AssertionError if the second list is not
    included in the first one (which is expected for an archival diff).

    Warning: because a set diff is used, no order is guaranteed in the output
    list.

    Inputs: lists of strings (names of the threads from page history)
    Output: list of strings

    Doctests:

    Standard use:
    >>> safe_list_diff(['Hello','See you later','Bye'],['Hello'])
    ['See you later', 'Bye']

    Duplicate name: will be scrapped from output and log a warning
    >>> safe_list_diff(['Duplicate','Duplicate','Hello', 'Later'],['Hello'])
    ['Later']

    Erroneous input: listafter contains a thread name not in listbefore
    >>> safe_list_diff(['Hello','See you later'],['Hello', 'Abnormal name'])
    Traceback (most recent call last):
      (some traceback)
    AssertionError

    """"""
    setbefore = set(listbefore)
    setafter = set(listafter)
    # Sanity check that listafter <= listbefore (less threads after archiving)
    assert(not bool(setafter - setbefore))  # True iff. set diff is empty

    # Identify duplicate elements in listbefore and remove them. See
    # https://stackoverflow.com/questions/11236006/identify-duplicate-values-in-a-list-in-python
    duplicate_values = [k for k, v in collections.Counter(listbefore).items()
                        if v > 1]

    for val in duplicate_values:
        logging.warning('Multiple threads that share the same name will be '
                        + 'ignored. The name was '
                        + '""{nameofthread}"".'.format(nameofthread=val))

    setdupes = set(duplicate_values)

    # Return threads that were removed and which are not duplicates
    # Ensure we return them in the original order!
    final_list = []
    set_to_return = setbefore - setafter - setdupes
    for tn in listbefore:
        if tn in set_to_return:
            final_list.append(tn)

    return final_list


def list_matching(ta, threadscreated):
    """"""Match string elements from two lists.

    We have on the one hand a list of threads that underwent the last
    archival, and on the other hand a list of created new sections.
    We want to match each of the archived threads to its creation.
    If a thread is matched multiple times or not at all, it must not be
    passed later on, but the event should be logged.

    ta is a list (it has been sanitized upstream to deal
    with name collisions). threadscreated is a list of dict; each dict
    contains at least 'name', the thread title to match.
    The output is a list of dict, the subset of threadscreated
    that have been matched exactly once in threadsarchived.

    Leading and trailing white spaces are discarded during the comparison
    because of some obscure false positive cases identified at test run.

    Inputs: list of strings and list of dict
    Output: list of dict

    Doctests:

    >>> list_matching(['Thread#1','Thread#3'],
    ...               [{'revid' : 1, 'name' : 'Thread#1','user' : 'User#1'},
    ...                {'revid' : 2, 'name' : 'Thread#2','user' : 'User#2'},
    ...                {'revid' : 3, 'name' : 'Thread#3','user' : 'User#3'},
    ...                {'revid' : 4, 'name' : 'Thread#4','user' : 'User#4'}
    ...                ]
    ...               ) == [{'revid': 1, 'name': 'Thread#1','user': 'User#1'},
    ...                     {'revid': 3, 'name': 'Thread#3','user': 'User#3'}]
    True
    """"""
    output = []

    for i in range(len(ta)):
        cur_str = ta[i].strip()
        matching_indices = [j for j, k in enumerate(threadscreated)
                            if k['name'].strip() == cur_str]

        if len(matching_indices) == 1:  # normal case, one single match
            output.append(threadscreated[matching_indices[0]])
            continue

        # exceptional cases
        if len(matching_indices) == 0:  # no matches
            logging.warning('No matches for the creation of the following'
                            + 'thread: ""{tn}""'.format(tn=cur_str))
        else:  # more than one match
            logging.warning('Multiple matches (all will be ignored) for the'
                            + 'creation of the following thread: '
                            + '""{tn}""'.format(tn=cur_str))

    return output


def traverse_list_of_sections(inputlistofdict):
    """"""Get list of sections from the API output.

    Remove the fluff (data offset etc.) from get_sections_from_revid to get
    only thread names (i.e. the 'line' key).
    """"""
    output_list = []

    for item in inputlistofdict:
        output_list.append(item['line'])

    return output_list


def find_section_anchor(inputlistofdict, sectionname):
    """"""Match a section name to the output of get_sections_from_revid.

    Input: inputlistofdict comes from get_sections_from_revid (list of dict),
    sectionname is a string (name of a thread).

    Output: a list of section anchors, corresponding to all unique
    sections that have the name sectionname. The normal case is for the
    list to have a single element, but returning a list allows easier
    testing for edge cases later.

    Leading and trailing spaces are removed for the comparison.

    Doctests:
    >>> find_section_anchor([{'anchor': 'Request:_World_Cafe',
    ...                       'byteoffset': 3329,
    ...                       'fromtitle': 'Wikipedia:Teahouse',
    ...                       'index': '1',
    ...                       'level': '2',
    ...                       'line': 'Request: World Cafe',
    ...                       'number': '1',
    ...                       'toclevel': 1},
    ...                      {'anchor': 'How_to_publish_my_page',
    ...                       'byteoffset': 8292,
    ...                       'fromtitle': 'Wikipedia:Teahouse',
    ...                       'index': '2',
    ...                       'level': '2',
    ...                       'line': 'How to publish my page',
    ...                       'number': '2',
    ...                       'toclevel': 1}
    ...                      ],
    ...                     'How to publish my page')
    ['How_to_publish_my_page']
    """"""
    outlist = []

    for item in inputlistofdict:
        if sectionname.strip() == item['line'].strip():
            outlist.append(item['anchor'])

    return outlist


def search_archives_for_section(links_to_search, sectionnames):
    """"""Find links to archived threads.

    This checks the current content of multiple archive links for the
    desired section names, and ensure only a unique match is accepted
    for each. Otherwise, failure to find a unique match is logged.

    Input: links_to_search is a list of strings, the names (shortened URL) of
    archive pages to search; sectionnames is a list of strings, the 'anchor's
    to match.

    Doctests:
    >>> search_archives_for_section(['Wikipedia:Teahouse/Questions/Archive_98',
    ...                              'Wikipedia:Teahouse/Questions/Archive_99'
    ...                              ],['Picture problem', 'Blog as reference?'])  # noqa: E501
    ['Wikipedia:Teahouse/Questions/Archive_98#Picture_problem', 'Wikipedia:Teahouse/Questions/Archive_99#Blog_as_reference?']
    """"""
    # First, query the API for the content of the archive links
    archive_contents = dict()
    for archivelink in links_to_search:
        linkcontent = get_sections_from_revid(archivelink)
        archive_contents[archivelink] = linkcontent  # links as keys, why not

        # print(linkcontent)
    # Loop over the queried section names
    out_links = []

    for sn in sectionnames:
        matches = []  # will hold the matched section(s)

        for arlink in links_to_search:
            linkmatches = find_section_anchor(archive_contents[arlink], sn)
            if linkmatches:  # found (at least) one good thread there
                candidatelink = arlink

            matches += linkmatches  # append current matches to old ones

        if len(matches) == 1:  # the good case: we found exactly one match
            fullarchivelink = candidatelink + ""#"" + matches[0]
            out_links.append(fullarchivelink)
            continue

        # If we did not continue, we are in the bad case, so we default
        # the link to an empty string
        out_links.append('')

        # Log the problem
        nomatch = 'No thread ""{tn}"" found in the links ""{l}""'
        morematches = 'Multiple matches for thread ""{tn}"" in the links ""{l}""'
        if len(matches) == 0:
            logging.warning(nomatch.format(tn=sn, l=links_to_search))
        else:  # len(matches)>1
            logging.warning(morematches.format(tn=sn, l=links_to_search))

    return out_links


def sections_removed_by_diff(revid1, revid2):
    """"""Get sections removed between two edits.

    Inputs: two revision IDs (integers). You should ensure that both revids
    refer to consecutive edits on the same page; this is not directly checked.
    That function makes a call to safe_list_diff, which will probably throw an
    exception if a different page is used or if the diff is too far apart, but
    you should not rely on that.

    Output: a list of strings, the names of removed threads.

    Doctests:
    (Cf. https://en.wikipedia.org/w/index.php?oldid=783715718&diff=783718598)
    >>> sections_removed_by_diff(783715718,783718598)[:2]
    ['Red links', 'how to undo a merge made 6 yrs ago']
    """"""
    json1 = get_sections_from_revid(revid1)
    sec_list_1 = traverse_list_of_sections(json1)

    json2 = get_sections_from_revid(revid2)
    sec_list_2 = traverse_list_of_sections(json2)

    set_of_sections_removed = safe_list_diff(sec_list_1, sec_list_2)
    return set_of_sections_removed


def revisions_since_x_days(pagename, ndays, maxcontinuenumber=0):
    """"""Get revision data for a given page for the last n days.

    Input:
    - pagename (string), the name of the page
    - ndays (int or float): lookup revisions of the last ndays days
    - maxcontinuenumber (int): recursion limit for API calls
    Output: a list of dict (cf. get_revisions_from_api).
    """"""
    # Per https://www.mediawiki.org/wiki/API:Revisions, rvstart is newer
    # than rvend if we list in reverse chronological order
    # (newer revisions first), i.e. ""end"" and ""start"" refer to the list.
    oldtimestamp = UTC_timestamp_x_days_ago(days_offset=ndays)
    currenttimestamp = UTC_timestamp_x_days_ago(days_offset=0)
    revs = get_revisions_from_api(pagename, oldtimestamp, currenttimestamp,
                                  maxcontinuenumber=maxcontinuenumber)

    return revs


def rev_created_newsection(revision):  # noqa: D301
    """"""Parse the given edit summary to see if a new section was created.

    Input: a dic with key 'comment' which is the string of edit summary, or the
    key 'commenthidden' if the revision was revdelled
    Output: a dict whose key 'flag' is True if a section was created and False
    otherwise; additionally, if 'flag' is True, the dict has the key 'name',
    containing the name of the thread.

    The given string is matched to ""/* %s */ new section""; if matched,
    we assume the corresponding edit created a section named %s.

    Doctests:
    >>> rev_created_newsection({'commenthidden': ''})
    {'flag': False}

     rev_created_newsection({'comment': r'/* Waiting for Godot */ new section'}) ==\
    True
    {'flag': True, 'name': 'Waiting for Godot'}
    """"""
    if 'commenthidden' in revision:
        # Revision was revdelled and the edit summary cannot be known. Skip it.
        return {'flag': False}
    pattern = re.compile(r'(\/\* )(.*)( \*\/ new section)')
    match = pattern.match(revision['comment'])
    # Note: using pattern.search will pick up e.g. Sinebot's edit summaries of
    # ""Signing comment by Foo - ""/* Bar */: new section""""
    # Instead, pattern.match enforces a match at the start of the string
    if match:
        return {'flag': True, 'name': match.group(2)}
    else:
        return {'flag': False}


def newsections_at_teahouse(ndays=10, thname='Wikipedia:Teahouse',
                            maxcontinuenumber=0):
    """"""Get 'new section' creations at Teahouse in the last few days.

    Optional arguments:
    - ndays (10): (int or float) timeframe in days of revision to pull
    - thname: (string) name of the page whose revisions to pull
    - maxcontinuenumber: (int) recursion limit for API calls
    """"""
    rev_table = revisions_since_x_days(thname, ndays,
                                       maxcontinuenumber=maxcontinuenumber)
    output = []
    for rev in rev_table:
        newsection_created = rev_created_newsection(rev)
        if newsection_created['flag']:
            tosave = {'revid': rev['revid'],
                      'name': newsection_created['name'],
                      'user': rev['user'],
                      }
            output.append(tosave)

    return output


def last_archival_edit(maxdays=1, thname='Wikipedia:Teahouse',
                       archiver='Lowercase sigmabot III'):
    """"""Parse page history for last archival edit.

    Input:
    - maxdays (int) the timeframe in days to look for an archival edit
    - thname (string) title of the page to look at
    - archiver (string) username of the archival bot

    Output: dict describing the last archival edit.
    """"""
    rev_table = revisions_since_x_days(thname, maxdays)
    found_flag = False
    for rev in rev_table:
        if rev['user'] == archiver:  # we found an archival edit
            es = rev['comment']  # extract edit summary
            # Determine archive locations from edit summary.
            # Beware! The edit summary may contain multiple wikilinks.
            # See for instance
            # https://en.wikipedia.org/w/index.php?title=Wikipedia%3ATeahouse&type=revision&diff=783570477&oldid=783564581
            # We need to match non-greedily and find all such links.
            pattern = r'(\[\[.*?\]\])'
            links = re.findall(pattern, es)

            if not links:  # sanity check that at least one match was found
                raise ValueError('Archival edit summary does not contain'
                                 + 'any wikilink.', es)

            # strip brackets in links
            strippedlinks = [l[2:-2] for l in links]

            # save relevant edit information
            output = {'after': rev['revid'],
                      'before': rev['parentid'],
                      'links': strippedlinks,
                      'es': es,                 # for debugging purposes
                      'archiver': archiver,  # same (not used as of 2018-03-18)
                      }
            found_flag = True
            break
    if not found_flag:
        raise ValueError('No edit by {arc} '.format(arc=archiver)
                         + 'found in the last {n} days'.format(n=maxdays),
                         rev_table)
    return output


def generate_notification_list():
    """"""Make list of notifications to make.

    This function makes all the API read calls necessary to determine which
    threads have been last archived, which users started them, and whether
    those users are eligible to receive a notification.

    The output is a list of dict, each containing the keys:
    - 'user'    - username of thread started
    - 'tn'      - thread name
    - 'invalid' - whether a notification can be sent
    Additionally, it can also contain:
    - 'archivelink' - a link to the archived thread (with anchor), if found
    - 'reason'      - if 'invalid' is True, explains why
    """"""
    # Get last archival edit
    lae = last_archival_edit()
    idbefore = lae['before']
    idafter = lae['after']
    # Sections from last archival edit
    archived_sections = sections_removed_by_diff(idbefore, idafter)

    # New section creations in recent days from page history
    maxpagestopull = 5
    nscreated = newsections_at_teahouse(maxcontinuenumber=maxpagestopull)

    # List of threads that were archived in last archival edit, which
    # could be matched to their creation in the last few days
    thread_matched = list_matching(archived_sections, nscreated)
    thread_matched_names = [thread['name'] for thread in thread_matched]
    thread_matched_users = [thread['user'] for thread in thread_matched]

    # For those, try and recover the corresponding archival link
    # (including anchor)
    possible_archive_links = lae['links']
    list_of_archive_links = search_archives_for_section(possible_archive_links,
                                                        thread_matched_names)

    # Check if user can be notified
    is_notifiable = isnotifiable(thread_matched_users)

    # Generate notification list
    N = len(list_of_archive_links)
    notification_list = list()
    for i in range(N):
        username = thread_matched_users[i]
        tn = thread_matched_names[i]
        al = list_of_archive_links[i]

        notif = {'user': username,
                 'thread': tn,
                 'invalid': False,
                 }

        if al:
            notif['archivelink'] = al
        else:
            # skip if the archive link is empty, i.e. it was not found
            # previously (such an event was logged)
            notif['invalid'] = True
            notif['reason'] = 'archive link not found'

        if not is_notifiable[username]:
            notif['invalid'] = True
            notif['reason'] = 'user is not notifiable'

        notification_list.append(notif)

    return notification_list


def notify(user, argstr, testlvl):
    """"""Post archival notification.

    Input:
    - user: (string) username, will post to User talk:<user>
    - argstr: (string) contains arguments to pass to template
    - testlvl: (int) 0 for production, >=1 for various test levels

    No output to stdout, since this will cause posts on WP.
    """"""
    if testlvl == 1:
        raise ValueError('Test level 1 no longer works.')
        site = pywikibot.Site('test', 'test')
        page = pywikibot.Page(site, 'User talk:Muninnbot/THA log')
        sn = 'Notification intended for [[:en:User talk:' + user + ']]'
        es = 'Notification intended for [[:en:User talk:' + user + ']]'

    elif testlvl == 2:
        site = pywikibot.Site('en', 'wikipedia')
        page = pywikibot.Page(site, 'User talk:Muninnbot/THA log')
        sn = 'Notification intended for [[:en:User talk:' + user + ']]'
        es = 'Notification intended for [[:en:User talk:' + user + ']]'

    elif testlvl == 3:
        site = pywikibot.Site('en', 'wikipedia')
        page = pywikibot.Page(site, 'User talk:' + user)
        sn = 'Your thread has been archived'
        es = 'Automated notification of thread archival (test run)'

    elif testlvl == 0:
        # Production code goes here
        site = pywikibot.Site('en', 'wikipedia')
        page = pywikibot.Page(site, 'User talk:' + user)
        sn = 'Your thread has been archived'

    # 0 for production, all the rest creates a ""this is in test phase"" comment
    if testlvl > 0:
        test_comment = ""</br><small>This functionality is currently under ""\
                       + ""test. If you received this notification by error, ""\
                       + ""please [[User talk:Tigraan|notify the bot's""\
                       + "" maintainer]].</small>""
        text = '{{subst:User:Muninnbot/Teahouse archival notification|'\
               + argstr + '|additionaltext=' + test_comment + '}}'
    else:
        text = '{{subst:User:Muninnbot/Teahouse archival notification|'\
               + argstr + '}}'

    page.save(text=text, summary=sn, section='new', minor=False, botflag=True)


def notify_all(notification_list, status,
               archive_from='[[Wikipedia:Teahouse]]',
               botname='Muninnbot'):
    """"""Execute notification list.

    Input:
    - notification_list: cf. generate_notification_list for format
    - status: 'offlinetest' for printing to stdout, 'test-X' for various
              testing levels, 'prod' for production use
    - archive_from: original page of the thread (only for notification
                    formatting, not actually checked)
    - botname: name of the bot who leaves the notification

    No output to stdout, but this will cause posts on WP.
    """"""
    formatspec = 'pagelinked={pl}|threadname={tn}|archivelink={al}|'\
                 + 'botname={bn}|editorname={en}'
    warnmsg = 'Thread ""{thread}"" by user {user} will not cause notification:'\
              + ' {reason}.'
    for item in notification_list:
        user = item['user']
        thread = item['thread']

        if item['invalid']:
            logging.warning(warnmsg.format(thread=thread, user=user,
                                           reason=item['reason']))
            continue
        archivelink = item['archivelink']

        argstr = formatspec.format(pl=archive_from, tn=thread, al=archivelink,
                                   bn=botname, en=user)

        if status == 'offlinetest':
            print('[[User talk:' + user + ']] -> {{subst:User:Tigraan-testbot/'
                  + 'Teahouse archival notification|' + argstr + '}}')
        elif status == 'test-1':
            notify(user, argstr, testlvl=1)
        elif status == 'test-2':
            notify(user, argstr, testlvl=2)
        elif status == 'test-3':
            notify(user, argstr, testlvl=3)
        elif status == 'prod':
            notify(user, argstr, testlvl=0)
        else:
            raise ValueError('Option was not understood.', status)


def main(test=False):
    """"""Run main procedure.

    Run once the full procedure:
    - find last archival edit and extract archived threads
    - lookup in the page history who created those threads
    - check for each user whether they can be sent a notification
    - send notifications for whoever can receive them

    With PWB/OAuth we should be logged in everytime.
    """"""
    # try to log in, fail if it does not work
    s = pywikibot.Site()
    s.login()
    assert s.logged_in()

    cur_user = whoami(site=s)
    logging.info('Currently logged as:' + cur_user)
    assert cur_user == 'Muninnbot'

    # place the notifications
    notiflist = generate_notification_list()
    if test:
        notify_all(notiflist, status='test-2')
    else:
        notify_all(notiflist, status='prod')

if __name__ == ""__main__"":
    # Unit test run. See
    # https://docs.python.org/3/library/doctest.html#simple-usage-checking-examples-in-docstrings
    import doctest
    logging.basicConfig(level=logging.ERROR)  # ignore logging warnings
    (failure_count, test_count) = doctest.testmod()

    if failure_count > 0:
        logging.error(""I failed at least one unit test, and will stop here."")
    else:
        if '-t' in sys.argv or '--test' in sys.argv:
            print('Tests run successfully!')
        else:
            logging.basicConfig(level=logging.INFO)
            logging.info(""Unit tests passed. Executing the full procedure..."")
            if '-l' in sys.argv or '--tha-log' in sys.argv:
                main(test=True)
            else:
                main(test=False)"
Vym952gq,🤑 G2A.com Free Gift Card Guide May 2024 FIX 🤑,jusst2k4,GetText,Wednesday 22nd of May 2024 06:00:50 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_542491.pdf

Working as of:
22 May 2024"
zF0tLvXA,data934,TestGuy1,JSON,Wednesday 22nd of May 2024 06:00:05 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '97f834bc2f18beb00a18cb2400588d1f89930332f661cd3b7d82ad5b5f760167b01b331ce0362816c9e067a65d2744970744c7b45b4856ffd40086e61262c31c2f34d6f0a339dbadb5e29ae4914f8c5d5591e2b36225e8c3ae1555d40a54c8d972be6fca281b54bd791097552f840e8a479b399b724628119cc89e6d30e11b87',
  otherdata: [
    '3be6b6098b57c8cf1637cb5463c49e12',
    '09bce3ee6d34a1dda5c0825c66af640a',
    '0ce6237da53ff829fd4157b4961687de',
    '6ed2e4df27f61a67a290cc9704d50a52',
    'eeb2abd619f8fbd24a4da5bf5ef8c106',
    '05519d2e3d68512b5c85d4fca8957ce3',
    '14502cf9d255eb397ca2f5c1bb317179',
    '516c6f28419d676985cc3eed03480c6a'
  ]
}"
HttT5Bz1,Tags de tema (Colapsable),NecromancerCoding,jQuery,Wednesday 22nd of May 2024 04:52:04 AM CDT,"$(function() {
  // Tus tags predefinidos, cada tag va entre corchetes y debe tener los valores declarados en el ejemplo
  var threadTags = [
    {
      filter: 'privado', // Valor que buscará, ponlo siempre todo en minúsculas, obligatorio
      color: '#3774ad', // Color de acento, obligatorio
      icon: '<em class=""fas fa-times""></em>' // Icono, si no necesitas, déjalo como en el ejemplo de 'libre'
    },
    {
      filter: '+18',
      color: '#ad3737',
      icon: '<em class=""fas fa-exclamation-triangle""></em>'
    },
    {
      filter: 'libre',
      color: '#37ad3f',
      icon:''
    }
  ];
  var threadTagClass = 'threadtag'; // Título de la clase de tus tags
  var threadTagElement = 'span'; // Elemento que serán tus tags (div, span, i, etc)
  var undeclaredTagColor = '#655670'; // Color de acento para los tags no predefinidos
  var lastPostLink = '.forums .row .lastpost>span>a:first-child'; // Link del último tema en el listado de foros

  // NO EDITES A PARTIR DE AQUÍ
  // EN SERIO, SI EDITAS Y LO ROMPES ES COSA TUYA
  
  $('.module-title, .post-title, .title-thread, a.topictitle').each(function() {
    var tagsFound = []; // Array para guardar etiquetas encontradas
    var $element = $(this); // Guardar elemento seleccionado

    var titleOnly = '';
    var string = $element.text();
    if (/\{.*?\}/.test(string)) {
      titleOnly = string.replace(/\{.*?\}/g, """").trim();
    } else {
      titleOnly = string.trim();
    }
    var tags = string.toLowerCase().match(/[^{]+(?=\})/g);

    if (tags) {
      $.each(tags, function(index, tag) {
        var foundTag = false; // Valor para checar si el tag ha sido encontrado en threadTags
        $.each(threadTags, function(index, threadTag) {
          if (tag === threadTag.filter) {
            // El valor de la etiqueta coincide con un filtro de threadTags
            tagsFound.push('<'+threadTagElement+' class=""'+threadTagClass+'"" data-filter=""' + threadTag.filter + '"" style=""--accent:' + threadTag.color + '"">' + threadTag.icon + '' + threadTag.filter + '</'+threadTagElement+'>'); // Añade el tag encontrado al array
            foundTag = true;
          }
        });

        if (!foundTag) {
          tagsFound.push('<'+threadTagElement+' class=""'+threadTagClass+'"" data-filter=""' + tag + '"" style=""--accent:' + undeclaredTagColor + '"">' + tag + '</'+threadTagElement+'>'); // Añade el tag no predefinido al array
        }
      });
    }

    var tagsString = tagsFound.join(''); // Formar string con los tags encontrados
    if (tagsString.length > 0) {
      var titleAndTags = tagsString + titleOnly;
      $element.html(titleAndTags);
    }
    if ($element.hasClass('title-thread')) {
      $('title').text(titleOnly); // Cambiar valor de title si se está previsualizando un tema con tags
    }
  });

  // Limpiar links en últimos posts de foros
  $(lastPostLink).each(function() {
    var $element = $(this);
    var string = $element.attr('title');
    if (/\{.*?\}/.test(string)) {
      string = string.replace(/\{.*?\}/g, """").trim();
      $element.text(string).attr('title',string);
    }
  });

  // Insertar formulario en creación de temas
  $('form[action=""/post""]').find('.threadSubject').each(function() {
    var $threadSubject = $(this);
    var subjectText = $threadSubject.text().trim();
    if (subjectText.indexOf('tema') !== -1) {
      var formHTML = '<details id=""tagsBox""><summary>Tags de tema</summary><form id=""tagForm""><div>'; // Insertar formulario
      $.each(threadTags, function(index, threadTag) {
        var idTag = threadTag.filter.replace(/\s/g, '');
        var checkboxHTML = '<input type=""checkbox"" name=""tags"" id=""tag-'+idTag+'"" value=""' + threadTag.filter + '""><label for=""tag-'+idTag+'""><'+threadTagElement+' class=""'+threadTagClass+'"" data-filter=""' + threadTag.filter + '"" style=""--accent:' + threadTag.color + '"">' + threadTag.icon + '' + threadTag.filter + '</'+threadTagElement+'></label>';
        formHTML += checkboxHTML; // Añadir tags al HTML del formulario
      });
      formHTML += '</div><br/><button id=""addTagsBtn"">Modificar título de tema</button></form></details>'; // Insertar botón al formulario

      $threadSubject.parents('fieldset').before(formHTML); // Colocar el formulario sobre la edición de título de tema

      // Marcar como checks los inputs presentes en el título al cargar la página
      var threadSubjectInput = $threadSubject.parents('dl').find('dd input[name=""subject""]');
      var inputValue = threadSubjectInput.val();

      threadTags.forEach(function(tag) {
        if (inputValue.toLowerCase().includes(tag.filter.toLowerCase())) {
          $('#tagForm').find('input[name=""tags""][value=""' + tag.filter + '""]').prop('checked', true);
        }
      });
    }
  });

  // Botón de añadir tags
  $('#addTagsBtn').click(function() {
    var selectedTags = $(this).prev().prev().find('input[name=""tags""]:checked')
      .map(function() {
        return '{' + $(this).val() + '}';
      })
      .get();

    var threadSubjectInput = $(this).parents('form').next('fieldset').find('.threadSubject').parents('dl').find('dd input[name=""subject""]');
    var inputValue = threadSubjectInput.val();
    var existingTags = inputValue.match(/\{.*?\}/g) || [];

    // Quitar los tags deseleccionados
    var deselectedTags = existingTags.filter(function(tag) {
      var tagFilter = tag.substring(1, tag.length - 1).toLowerCase();
      return !selectedTags.includes(tag) && threadTags.some(function(threadTag) {
        return threadTag.filter.toLowerCase() === tagFilter;
      });
    });
    deselectedTags = deselectedTags.filter(function(tag, index) {
      return deselectedTags.indexOf(tag) === index;
    });
    var updatedTags = existingTags.filter(function(tag) {
      return !deselectedTags.includes(tag);
    });

    // Añadir tags seleccionados no presentes
    selectedTags.forEach(function(tag) {
      if (!updatedTags.includes(tag)) {
        updatedTags.push(tag);
      }
    });

    // Actualizar título
    var updatedSubject = updatedTags.join('') + ' ' + inputValue.replace(/\{.*?\}/g, '').trim();
    threadSubjectInput.val(updatedSubject.trim());
    return false;
  });
});"
LDg89U9C,Untitled,Jacorb,JSON,Wednesday 22nd of May 2024 04:19:18 AM CDT,"[
  {
    ""name"": ""Личные вещи"",
    ""subcategories"": [
      {
        ""name"": ""Женская одежда"",
        ""fields"": [
          {
            ""name"": ""Состояние"",
            ""type"": ""checkbox"",
            ""values"": [""Новое"", ""Отличное"", ""Удовлетворительное""]
          }
        ],
        ""subcategories"": [
          {
            ""name"": ""Верхняя одежда"",
            ""subcategories"": [
              {
                ""name"": ""Шубы""
              }
            ]
          }
        ]
      }
    ]
  }
]"
5gmyWVGd,WPGlobaCart - NotificationX,nshelper,PHP,Wednesday 22nd of May 2024 03:22:21 AM CDT,"public function ordered_product($item_id, $item, $order_id) {
        if (!$item instanceof \WC_Order_Item_Product) {
            return false;
        }
        
        if (is_int($order_id)) {
            $order = new \WC_Order($order_id);
        } else {
            $order = $order_id;
        }
        
        do_action( 'woocommerce/cart_loop/start', $item );
        
        $product = wc_get_product( $item->get_product_id() );
        if( empty( $product ) ) {
            do_action( 'woocommerce/cart_loop/end', $item );
            return false;
        }
        $if_has_course = false;
        if (function_exists('tutor_utils')) {
            $if_has_course = tutor_utils()->product_belongs_with_course($item->get_product_id());
        }
        if ($if_has_course) {
            do_action( 'woocommerce/cart_loop/end', $item );
            return false;
        }
        $new_order = [];
        

        if (!$order instanceof \WC_Order) {
            do_action( 'woocommerce/cart_loop/end', $item );
            return false;
        }

        $new_order['status'] = 'wc-' . $order->get_status();

        $date = $order->get_date_created();
        $countries = new \WC_Countries();
        $shipping_country = $order->get_billing_country();
        if (empty($shipping_country)) {
            $shipping_country = $order->get_shipping_country();
        }
        if (!empty($shipping_country)) {
            $new_order['country'] = isset($countries->countries[$shipping_country]) ? $countries->countries[$shipping_country] : '';
            $shipping_state = $order->get_shipping_state();
            if (!empty($shipping_state)) {
                $new_order['state'] = isset($countries->states[$shipping_country], $countries->states[$shipping_country][$shipping_state]) ? $countries->states[$shipping_country][$shipping_state] : $shipping_state;
            }
        }
        $new_order['city'] = $order->get_billing_city();
        if (empty($new_order['city'])) {
            $new_order['city'] = $order->get_shipping_city();
        }

        $new_order['ip'] = $order->get_customer_ip_address();
        $product_data = $this->ready_product_data($item->get_data());
        if (!empty($product_data)) {
            $new_order['order_id']   = is_int($order_id) ? $order_id : $order_id->get_id();
            $product      = $item->get_product();
            if ( isset($product) && $product->get_type() === 'variation' ) {
                $new_order['var_product_id'] = $item->get_variation_id();
            }
            $new_order['product_id'] = $item->get_product_id();
            $new_order['title']      = strip_tags($product_data['title']);
            $new_order['link']       = $product_data['link'];
        }
        if($date && method_exists($date, 'getTimestamp')){
            $new_order['timestamp'] = $date->getTimestamp();
        }
        else{
            $new_order['timestamp'] = time();
        }
        
        do_action( 'woocommerce/cart_loop/end', $item );
        
        return array_merge($new_order, $this->buyer($order));
    }"
YLWxKF3p,Untitled,clown1337,Python,Wednesday 22nd of May 2024 03:14:39 AM CDT,"import sys
from PyQt5.QtWidgets import QApplication, QMainWindow, QVBoxLayout, QWidget, QGridLayout
from PyQt5.QtCore import Qt
from window import TypingFilter
from Text import DisplayText
from Keyboard import Keyboard
from Englelvls import english_levels_2, english_levels_1
from Input import Input

class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle(""Typing Trainer"")
        # self.setFixedSize(600, 400)

        self.display_text = DisplayText(self)
        self.typing_filter = TypingFilter(self.display_text, self)
        self.typing_filter.set_level_text(english_levels_1[0])


        keyboard = Keyboard()
        input = Input() 
        input.input.textEdited.connect(keyboard.highlightButton)
        main_layout = QGridLayout()
        main_layout.addWidget(self.display_text, 0, 0)
        main_layout.addWidget(self.typing_filter, 1, 0)
        main_layout.addWidget(input, 2, 0)
        main_layout.addWidget(keyboard, 3, 0, alignment=Qt.AlignCenter)
        container = QWidget()
        container.setLayout(main_layout)
        self.setCentralWidget(container)

if __name__ == ""__main__"":
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec_())"
93V7hDTS,local_and_redis_bench,exapsy,Go,Wednesday 22nd of May 2024 03:11:50 AM CDT,"package main

import (
	""context""
	""fmt""
	""time""

	""github.com/redis/go-redis/v9""
)

var S = """"

const REDIS_HOST = ""myredisisntance.com""

var localcache = make(map[string]string)

func main() {
  ctx := context.Background()

  rdb := redis.NewClient(&redis.Options{
    Addr: REDIS_HOST + "":6379"",
    Password: """",
    DB: 0,
  })

  err := rdb.Ping(ctx).Err()
  if err != nil {
    panic(err)
  }

  err = rdb.Set(ctx, ""key"", ""value"", 0).Err()
  if err != nil {
    panic(err)
  }

  totalRedisGetTime := time.Duration(0)
  totalLocalGetTime := time.Duration(0)

  for i := 0; i < 1000; i++ {

    if i == 1 || i %100 == 0 {
      fmt.Printf(""Progress: %v/1000\n"", i)  
    }

    totalRedisGetTime += getFromRedis(rdb, ""key"")
    totalLocalGetTime += getFromLocalCache(""key"")
  }

  fmt.Printf(""Total time to get from Redis: %v\n"", totalRedisGetTime)
  fmt.Printf(""Total time to get from Local Cache: %v\n"", totalLocalGetTime)
}

func getFromRedis(rdb *redis.Client, key string) time.Duration {
  start := time.Now()
  var err error
  ctx := context.Background()
  S, err = rdb.Get(ctx, key).Result()
  if err != nil {
    panic(err)
  }
  return time.Since(start)
}

func getFromLocalCache(key string) time.Duration {
  start := time.Now()
  S = localcache[key]
  return time.Since(start)
}
"
VJ5DMrkX,bfs - lavirint,Filip13,C#,Wednesday 22nd of May 2024 03:02:08 AM CDT,"namespace bfs___lavirint
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int[,] polja = new int[,]
            {
                {0, 0, 0, 0, 0 },
                {0, 0, -1, -1, -1 },
                {0, 0, -1, -1, 0 },
                {0, 0, 0, 0, 0 },
            };

            int brojKolonaMatrice = polja.GetLength(1);
            Queue<int> poljaZaObilazak = new();
            int brojacPoteza = 1;

            poljaZaObilazak.Enqueue(0);

            int[,] validniPotezi =
            {
                { 0, 1 },   //desno
                { 1, 0 },   //dole
                { 0, -1 },  //levo
                { -1, 0 },  //gore
            };

            while (poljaZaObilazak.Any())
            {
                int pozicijaPolja = poljaZaObilazak.Dequeue();

                int redPolja = pozicijaPolja / brojKolonaMatrice;
                int kolonaPolja = pozicijaPolja % brojKolonaMatrice;

                polja[redPolja, kolonaPolja] = brojacPoteza;
                brojacPoteza++;

                Console.WriteLine($""obilazak polja {pozicijaPolja} - ({redPolja},{kolonaPolja})"");

                for (int i = 0; i < validniPotezi.GetLength(0); i++)
                {
                    int noviRed = redPolja + validniPotezi[i, 0];//i je cela ""zagrada"" u validniPotezi, a 0 ce dati red
                    int novaKolona = kolonaPolja + validniPotezi[i, 1];                              // a 1 ce dati kolonu
                     
                    if (noviRed >= 0 && noviRed < polja.GetLength(0) && novaKolona >= 0 && novaKolona < polja.GetLength(1) && polja[noviRed, novaKolona] == 0)
                    {
                        int novaPozicija = noviRed * brojKolonaMatrice + novaKolona;
                        poljaZaObilazak.Enqueue(novaPozicija);

                        polja[noviRed, novaKolona] = -10;
                    }
                }
            }

            IspisisMatricu(polja);
        }

        static void IspisisMatricu(int[,] polja)
        {
            for (int i = 0; i < polja.GetLength(0); i++)
            {
                for (int j = 0; j < polja.GetLength(1); j++)
                {
                    Console.Write($""{polja[i, j]}\t"");
                }
                Console.WriteLine();
            }
        }

    }
}"
gt1LPcUk,dfs - lavirint,Filip13,C#,Wednesday 22nd of May 2024 03:01:44 AM CDT,"namespace dfs___lavirint
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int[,] polja = new int[,]
            {
                {0, 0, 0, 0, 0 },
                {0, 0, -1, -1, -1 },
                {0, 0, -1, -1, 0 },
                {0, 0, 0, 0, 0 },
            };

            int brojKolonaMatrice = polja.GetLength(1);
            Stack<int> poljaZaObilazak = new();
            int brojacPoteza = 1;

            poljaZaObilazak.Push(0);

            int[,] validniPotezi =
            {
                { 0, 1 },   //desno
                { 1, 0 },   //dole
                { 0, -1 },  //levo
                { -1, 0 },  //gore
            };

            while (poljaZaObilazak.Any())
            {
                int pozicijaPolja = poljaZaObilazak.Pop();

                int redPolja = pozicijaPolja / brojKolonaMatrice;
                int kolonaPolja = pozicijaPolja % brojKolonaMatrice;

                polja[redPolja, kolonaPolja] = brojacPoteza;
                brojacPoteza++;

                Console.WriteLine($""obilazak polja {pozicijaPolja} - ({redPolja},{kolonaPolja})"");

                for (int i = 0; i < validniPotezi.GetLength(0); i++)
                {
                    int noviRed = redPolja + validniPotezi[i, 0];//i je cela ""zagrada"" u validniPotezi, a 0 ce dati red
                    int novaKolona = kolonaPolja + validniPotezi[i, 1];                              // a 1 ce dati kolonu

                    if (noviRed >= 0 && noviRed < polja.GetLength(0) && novaKolona >= 0 && novaKolona < polja.GetLength(1) && polja[noviRed, novaKolona] == 0)
                    {
                        int novaPozicija = noviRed * brojKolonaMatrice + novaKolona;
                        poljaZaObilazak.Push(novaPozicija);

                        polja[noviRed, novaKolona] = -10  ;
                    }
                }
            }

            IspisisMatricu(polja);
        }

        static void IspisisMatricu(int[,] polja)
        {
            for (int i = 0; i < polja.GetLength(0); i++)
            {
                for (int j = 0; j < polja.GetLength(1); j++)
                {
                    Console.Write($""{polja[i, j]}\t"");
                }
                Console.WriteLine();
            }
        }

    }
}"
3furF0Dj,Untitled,ma39isy,Oracle 11,Wednesday 22nd of May 2024 01:48:31 AM CDT,"SELECT
	A.SUBJECTID,
	A.SUBJECTCODE,
	A.CREDIT,
	A.SUBJECTNAME
FROM
	ACADEMIC.SUBJECTS A
JOIN ACADEMIC.VIEW_COURSE_TEAM_TEACHING B ON
	(A.SUBJECTID = B.SUBJECTID)
WHERE
	A.ACTIVESTATUS = 'YA'
	AND B.SCHOOLYEAR = '2324'
	AND B.SEMESTER = '2'
	AND B.ACTIVATEDSTATUS = 'YA'
	AND (A.STUDYPROGRAMID = ''
		OR trim(A.SUBJECTSERVICE)= '')
	AND B.POSITION = 1
GROUP BY
	(A.SUBJECTID,
	A.SUBJECTCODE,
	A.CREDIT,
	A.SUBJECTNAME)
ORDER BY
	A.SUBJECTCODE"
1Zes5hKX,Степень двойки,Yaniha,C#,Wednesday 22nd of May 2024 01:39:45 AM CDT,"using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Web;
using static System.Net.Mime.MediaTypeNames;

namespace CSLight
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Random random = new Random();
            int degree = 0;
            int number = 2;
            int result = 0;
            int maxRandomNumber = 50;
            int minRandomNumber = 1;
            int randomNumber = random.Next(minRandomNumber, maxRandomNumber);

            Console.WriteLine(""Случайное число: "" + randomNumber);

            for (int i = 1; i <= randomNumber; i *= number)
            {
                degree++;
                result = i * number;
            }

            Console.WriteLine($""Минимальная степень {number}, превосходящая число {randomNumber}: {degree}"");
            Console.WriteLine($""{number}^{degree}={result}"");

            Console.ReadKey();
        }
    }
}"
N3DzJ95Z,supersnowzy strikes jd with a winner,coinwalk,JavaScript,Wednesday 22nd of May 2024 12:57:08 AM CDT,"var OriginalBalanCe = parseFloat(document.getElementById('pct_balance').value);
var BaseBet = Number((OriginalBalanCe/1000).toFixed(8));
var NexTBet = BaseBet;
var tens = (BaseBet*10);
var fives = (BaseBet*4.9);
var sevens = (BaseBet*6.9);
var eights = (BaseBet*7.9);
var winnerdinner = (OriginalBalanCe*24);
var loL = ((Math.floor(OriginalBalanCe/tens))*tens);
var snowzy = (((Math.floor(OriginalBalanCe/tens))*tens)+sevens);
var snowy = (((Math.floor(OriginalBalanCe/tens))*tens)-sevens);
var BalanCe = OriginalBalanCe;
var fuel = 0;
var OldBal = ((Math.floor(OriginalBalanCe/tens))*tens);
var OldBaltwo = ((Math.floor(OriginalBalanCe/tens))*tens);
 
function go(){
BalanCe = document.getElementById('pct_balance').value;
var dog = Number((BalanCe-OriginalBalanCe).toFixed(8));
console.log(""profit"");
console.log(dog);
if ((BalanCe>(((Math.floor(BalanCe/tens))*tens)+sevens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+eights))&&(BalanCe>snowy)){
    NexTBet = NexTBet*2;
    snowy = parseFloat(BalanCe);
    }
if ((BalanCe>(((Math.floor(BalanCe/tens))*tens)+sevens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+eights))&&(BalanCe<snowzy)){
    NexTBet = NexTBet*2;
    fuel = fuel+1;
    snowzy = parseFloat(BalanCe);
    snowy = parseFloat(BalanCe);
    }
if ((fuel>=2)&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+fives))){
    NexTBet = BaseBet;
    fuel = 0;
    snowy = (((Math.floor(BalanCe/tens))*tens)-sevens);
    snowzy = (((Math.floor(BalanCe/tens))*tens)+sevens);
}
if (BalanCe>loL){
loL = ((Math.floor(BalanCe/tens))*tens);
}
if ((NexTBet>(BaseBet*24))&&(BalanCe>=loL)&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+sevens))){
    NexTBet = BaseBet;
    fuel = 0;
    snowy = (((Math.floor(BalanCe/tens))*tens)-sevens);
    snowzy = (((Math.floor(BalanCe/tens))*tens)+sevens);
}
if (BalanCe>=winnerdinner){
console.log(""winner winner chicken dinner"");
return;
}
$('#pct_chance').val(49.5);
$('#pct_bet').val(((NexTBet*1).toFixed(8)));
$('#a_lo').click();
setTimeout(() => go(), 1200);
}
go();"
1bzATwK4,FLUENT UI FORM,Tinku0,JavaScript,Wednesday 22nd of May 2024 12:30:32 AM CDT,"import { useState } from 'react';
import './App.css';
import { DefaultButton, Dropdown, DropdownMenuItemType, PrimaryButton, Stack, TextField } from '@fluentui/react';

const formTokens = { childrenGap: 20 };
const buttonStackTokens = { childrenGap: 10 };

const dropdownControlledExampleOptions = [
  { key: '1998', text: '1998', itemType: DropdownMenuItemType.Header },
  { key: '1999', text: '1999' },
  { key: '2000', text: '2000' },
  { key: '2001', text: '2001' }
];

function App() {
  const [formState, setFormState] = useState({
    businessObjectives: '',
    fiscalYear: undefined,
    owner: undefined,
    kpi: '',
    csa: undefined,
    industry: undefined,
    geoOu: undefined,
    segment: undefined,
  });

  const handleInputChange = (field, value) => {
    setFormState(prevState => ({ ...prevState, [field]: value }));
  };

  const handleSubmit = () => {
    const formData = {
      businessObjectives: formState.businessObjectives,
      fiscalYear: formState.fiscalYear ? formState.fiscalYear.text : '',
      owner: formState.owner ? formState.owner.text : '',
      kpi: formState.kpi,
      csa: formState.csa ? formState.csa.text : '',
      industry: formState.industry ? formState.industry.text : '',
      geoOu: formState.geoOu ? formState.geoOu.text : '',
      segment: formState.segment ? formState.segment.text : ''
    };
    console.log('Form Data:', formData);
    // Process formData here, e.g., send to an API or update the state
  };

  return (
    <Stack tokens={formTokens}>
      <TextField
        label=""Business Objectives*""
        placeholder=""Enter Business Objectives""
        value={formState.businessObjectives}
        onChange={(e, newValue) => handleInputChange('businessObjectives', newValue)}
      />
      <Dropdown
        label=""Fiscal Year*""
        selectedKey={formState.fiscalYear ? formState.fiscalYear.key : undefined}
        onChange={(event, item) => handleInputChange('fiscalYear', item)}
        placeholder=""Select Fiscal Year""
        options={dropdownControlledExampleOptions}
      />
      <Dropdown
        label=""Owner""
        selectedKey={formState.owner ? formState.owner.key : undefined}
        onChange={(event, item) => handleInputChange('owner', item)}
        placeholder=""Select Owner""
        options={dropdownControlledExampleOptions}
      />
      <TextField
        label=""KPI""
        placeholder=""Enter KPI""
        value={formState.kpi}
        onChange={(e, newValue) => handleInputChange('kpi', newValue)}
      />
      <Dropdown
        label=""CSA*""
        selectedKey={formState.csa ? formState.csa.key : undefined}
        onChange={(event, item) => handleInputChange('csa', item)}
        placeholder=""Select CSA""
        options={dropdownControlledExampleOptions}
      />
      <Dropdown
        label=""Industry""
        selectedKey={formState.industry ? formState.industry.key : undefined}
        onChange={(event, item) => handleInputChange('industry', item)}
        placeholder=""Select Industry""
        options={dropdownControlledExampleOptions}
      />
      <Dropdown
        label=""GEO/OU""
        selectedKey={formState.geoOu ? formState.geoOu.key : undefined}
        onChange={(event, item) => handleInputChange('geoOu', item)}
        placeholder=""Select GEO/OU""
        options={dropdownControlledExampleOptions}
      />
      <Dropdown
        label=""Segment""
        selectedKey={formState.segment ? formState.segment.key : undefined}
        onChange={(event, item) => handleInputChange('segment', item)}
        placeholder=""Select Segment""
        options={dropdownControlledExampleOptions}
      />
      <Stack horizontal tokens={buttonStackTokens}>
        <PrimaryButton text=""Save"" onClick={handleSubmit} allowDisabledFocus />
        <DefaultButton text=""Cancel"" allowDisabledFocus />
      </Stack>
    </Stack>
  );
}

export default App;
"
RyTHSjnZ,War Tycoon,Uuuuh,Lua,Tuesday 21st of May 2024 11:50:56 PM CDT,"loadstring(game:HttpGet(""https://raw.githubusercontent.com/Awakenchan/Misc-Release/main/WarTycoon""))(""t.me/xandeexx1"")
"
z3XtnWHy,Quick Sort,undersetta,Java,Tuesday 21st of May 2024 11:40:04 PM CDT,"package Sorting;

import java.util.Arrays;

public class QuickSort {
    // Fungsi untuk menukar dua elemen dalam array
    public static void swap(int[] array, int i, int j) {
        int temp = array[i];
        array[i] = array[j];
        array[j] = temp;
    }

    // Fungsi untuk mempartisi array dan mengembalikan indeks pivot
    public static int partition(int[] array, int low, int high) {
        int pivot = array[high];
        int i = (low - 1); // Indeks dari elemen yang lebih kecil

        for (int j = low; j < high; j++) {
            // Jika elemen saat ini lebih kecil atau sama dengan pivot
            if (array[j] <= pivot) {
                i++;
                swap(array, i, j);
            }
        }

        // Tukar array[i+1] dengan array[high] (atau pivot)
        swap(array, i + 1, high);

        return i + 1;
    }

    // Fungsi utama untuk mengurutkan array menggunakan quick sort
    public static void quickSort(int[] array, int low, int high) {
        if (low < high) {
            // Pi adalah indeks pivot, array[pi] sudah berada di tempat yang benar
            int pi = partition(array, low, high);

            // Urutkan elemen secara rekursif sebelum dan setelah partisi
            quickSort(array, low, pi - 1);
            quickSort(array, pi + 1, high);
        }
    }
    
    public static void main(String[] args) {
        int[] arr = {3, 6, 0, 2, 8, 10, 4, 3, 5, 11, 1};
        int[] arr_sort = arr.clone();
        int n = arr.length - 1;
        
        // Tampilkan hasil sebelum diurutkan
        System.out.println(""Sebelum diurutkan = "" + 
                           Arrays.toString(arr));
        
        // Tampilkan hasil setelah diurutkan
        quickSort(arr_sort, 0, n);
        System.out.println(""Setelah diurutkan = "" + 
                           Arrays.toString(arr_sort));
    }
}
"
YbJdUkCd,snowzybot 3.14,coinwalk,JavaScript,Tuesday 21st of May 2024 11:36:13 PM CDT,"var OriginalBalanCe = parseFloat(document.getElementById('pct_balance').value);
var BaseBet = Number((OriginalBalanCe/1000).toFixed(8));
var NexTBet = BaseBet;
var tens = (BaseBet*10);
var fives = (BaseBet*4.9);
var sevens = (BaseBet*6.9);
var eights = (BaseBet*7.9);
var winnerdinner = (OriginalBalanCe*24);
var snowzy = 0;
var BalanCe = OriginalBalanCe;
var OldBal = ((Math.floor(OriginalBalanCe/tens))*tens);
var OldBaltwo = ((Math.floor(OriginalBalanCe/tens))*tens);
 
function go(){
BalanCe = document.getElementById('pct_balance').value;
var dog = Number((BalanCe-OriginalBalanCe).toFixed(8));
console.log(""profit"");
console.log(dog);
if ((BalanCe>(((Math.floor(BalanCe/tens))*tens)+sevens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+eights))&&(BalanCe>snowy)){
    NexTBet = NexTBet*2;
    snowy = parseFloat(BalanCe);
    }
if ((BalanCe>(((Math.floor(BalanCe/tens))*tens)+sevens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+eights))&&(BalanCe<snowzy)){
    NexTBet = NexTBet*2;
    fuel = fuel+1;
    snowzy = parseFloat(BalanCe);
    snowy = parseFloat(BalanCe);
    }
if ((fuel>=2)&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+fives))){
    NexTBet = BaseBet;
    fuel = 0;
    snowy = (((Math.floor(BalanCe/tens))*tens)-sevens)
    snowzy = (((Math.floor(BalanCe/tens))*tens)+sevens)
}
if ((NexTBet>BaseBet*24)&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+sevens))){
    NexTBet = BaseBet;
    snowy = (((Math.floor(BalanCe/tens))*tens)-sevens)
    snowzy = (((Math.floor(BalanCe/tens))*tens)+sevens)
}
if (BalanCe>=winnerdinner){
console.log(""winner winner chicken dinner"");
return;
}
$('#pct_chance').val(49.5);
$('#pct_bet').val(((NexTBet*1).toFixed(8)));
$('#a_lo').click();
setTimeout(() => go(), 1200);
}
go();"
fuKB76AD,Bloco de Notas Simples em Python,MizunoBrasil,Python,Tuesday 21st of May 2024 10:10:40 PM CDT,"import tkinter as tk
from tkinter import Menu, filedialog, messagebox

def new_file():
    """"""Limpa a área de texto para criar um novo arquivo.""""""
    text_area.delete(1.0, tk.END)

def open_file():
    """"""Abre um arquivo de texto e exibe o conteúdo na área de texto.""""""
    try:
        file_path = filedialog.askopenfilename(filetypes=[(""Text Files"", ""*.txt"")])
        if file_path:
            with open(file_path, ""r"") as file:
                content = file.read()
                text_area.delete(1.0, tk.END)
                text_area.insert(tk.END, content)
    except Exception as e:
        messagebox.showerror(""Erro"", f""Não foi possível abrir o arquivo: {e}"")

def save_file():
    """"""Salva o conteúdo da área de texto em um arquivo de texto.""""""
    try:
        file_path = filedialog.asksaveasfilename(defaultextension="".txt"", filetypes=[(""Text Files"", ""*.txt"")])
        if file_path:
            with open(file_path, ""w"") as file:
                content = text_area.get(1.0, tk.END)
                file.write(content)
    except Exception as e:
        messagebox.showerror(""Erro"", f""Não foi possível salvar o arquivo: {e}"")

def show_about():
    """"""Exibe uma mensagem de informação sobre o aplicativo.""""""
    messagebox.showinfo(""Sobre"", ""Bloco de Notas simples feito em Python. 2024, Mizuno"")

def copy_text(event=None):
    """"""Copia o texto selecionado.""""""
    text_area.event_generate('<<Copy>>')

def paste_text(event=None):
    """"""Cola o texto da área de transferência.""""""
    text_area.event_generate('<<Paste>>')

def show_context_menu(event):
    """"""Exibe o menu de contexto ao clicar com o botão direito.""""""
    context_menu.tk_popup(event.x_root, event.y_root)

# Cria a janela principal
root = tk.Tk()
root.title(""Bloco de Notas em Python"")

# Define a resolução para 1366x768 e centraliza a janela na tela
window_width = 1366
window_height = 768

# Obtém a largura e altura da tela
screen_width = root.winfo_screenwidth()
screen_height = root.winfo_screenheight()

# Calcula a posição x e y para centralizar a janela
position_x = (screen_width // 2) - (window_width // 2)
position_y = (screen_height // 2) - (window_height // 2)

# Define a geometria da janela
root.geometry(f""{window_width}x{window_height}+{position_x}+{position_y}"")

# Cria a área de texto
text_area = tk.Text(root, wrap='word', undo=True)
text_area.pack(expand=True, fill='both')

# Cria a barra de menu
menu_bar = Menu(root)
root.config(menu=menu_bar)

# Adiciona os menus
file_menu = Menu(menu_bar, tearoff=0)
menu_bar.add_cascade(label=""Arquivo"", menu=file_menu)
file_menu.add_command(label=""Novo"", command=new_file)
file_menu.add_command(label=""Abrir"", command=open_file)
file_menu.add_command(label=""Salvar"", command=save_file)
file_menu.add_separator()
file_menu.add_command(label=""Sair"", command=root.quit)

about_menu = Menu(menu_bar, tearoff=0)
menu_bar.add_cascade(label=""Sobre"", menu=about_menu)
about_menu.add_command(label=""Sobre"", command=show_about)

# Cria o menu de contexto
context_menu = Menu(root, tearoff=0)
context_menu.add_command(label=""Copiar"", command=copy_text)
context_menu.add_command(label=""Colar"", command=paste_text)

# Vincula o menu de contexto ao clique direito do mouse
text_area.bind(""<Button-3>"", show_context_menu)

# Inicia a aplicação
root.mainloop()
"
e6A6aCcs,esphome core innovations CTCB105 remote control emulator,Dieton,YAML,Tuesday 21st of May 2024 09:00:29 PM CDT,"captive_portal:

remote_receiver:
  pin: 
    number: GPIO19
    inverted: true
  dump: raw

remote_transmitter:
  #- platform: jvc
    pin: GPIO18
    id: my_remote
    carrier_duty_percent: 50%

#====== Warning =======#
#Make sure to remove this ""06C3""!!!#
switch:
  - platform: template
    name: ""Antenna""
    id: antenna_power_switch
    turn_on_action:
      - remote_transmitter.transmit_pronto:
          data: ""0000 006D 0022 0000 015B 00AC 0016 0015 0016 0015 0016 0015 0016 0015 0016 0015 0016 0015 0015 0016 0015 0016 0016 0040 0015 0041 0016 0040 0016 0040 0016 0040 0016 0040 0016 0040 0016 0040 0015 0016 0016 0040 0016 0016 0015 0040 0016 0040 0016 0015 0016 0040 0015 0016 0016 0040 0016 0015 0015 0041 0016 0015 0016 0015 0015 0041 0016 0015 0016 0040 0016 0181""
      - delay: 500ms
      - switch.turn_off: antenna_power_switch

  - platform: template
    name: ""Channel Up""
    id: channel_up_switch
    turn_on_action:
      - remote_transmitter.transmit_pronto:
          data: ""0000 006D 0022 0000 015A 00AE 0016 0015 0014 0017 0015 0016 0015 0016 0015 0017 0015 0016 0016 0015 0015 0016 0015 0041 0015 0040 0015 0042 0014 0041 0016 0040 0015 0042 0015 0041 0016 0040 0015 0016 0014 0042 0015 0040 0016 0017 0014 0016 0014 0017 0014 0017 0015 0016 0015 0041 0014 0016 0015 0017 0015 0041 0014 0042 0016 0040 0014 0043 0013 0042 0015 0181""
      - delay: 500ms
      - switch.turn_off: channel_up_switch

  - platform: template
    name: ""Channel Down""
    id: channel_down_switch
    turn_on_action:
      - remote_transmitter.transmit_pronto:
          data: ""0000 006D 0022 0000 015A 00AD 0014 0017 0015 0016 0015 0016 0014 0017 0015 0017 0014 0016 0016 0015 0014 0017 0015 0041 0014 0042 0014 0043 0014 0040 0016 0041 0015 0042 0013 0043 0014 0041 0014 0018 0015 0041 0014 0043 0014 0016 0014 0042 0014 0018 0015 0018 0013 0016 0014 0043 0014 0018 0014 0017 0014 0041 0015 0017 0013 0043 0014 0041 0014 0043 0014 0181""
      - delay: 500ms
      - switch.turn_off: channel_down_switch
  
  - platform: template
    name: ""Volume Up""
    id: volume_up_switch
    turn_on_action:
      - remote_transmitter.transmit_pronto:
          data: ""0000 006D 0022 0000 015A 00AF 0013 0019 0013 0018 0013 0019 0013 0018 0015 0019 0012 0017 0014 0019 0014 0016 0015 0042 0013 0045 0011 0044 0013 0043 0013 0042 0014 0042 0013 0043 0015 0041 0013 0043 0013 0043 0013 0019 0013 0043 0014 0042 0014 0017 0015 0017 0013 0019 0014 0018 0011 0019 0015 0042 0012 0019 0013 0017 0014 0043 0013 0043 0013 0042 0015 0181""
      - delay: 500ms
      - switch.turn_off: volume_up_switch
  
  - platform: template
    name: ""Volume Down""
    id: volume_down_switch
    turn_on_action:
      - remote_transmitter.transmit_pronto:
          data: ""0000 006D 0022 0000 015B 00AD 0014 0017 0014 0017 0015 0016 0015 0016 0014 0017 0015 0016 0015 0017 0015 0015 0015 0042 0015 0041 0015 0041 0014 0042 0014 0042 0015 0041 0015 0041 0014 0042 0014 0041 0016 0040 0016 0016 0014 0041 0015 0042 0015 0016 0014 0042 0015 0016 0015 0016 0014 0017 0016 0041 0015 0016 0014 0017 0014 0041 0015 0017 0015 0041 0015 0181""
      - delay: 500ms
      - switch.turn_off: volume_down_switch
  
  - platform: template
    name: ""Mute""
    id: mute_switch
    turn_on_action:
      - remote_transmitter.transmit_pronto:
          data: ""0000 006D 0022 0000 0159 00AE 0015 0016 0015 0018 0013 0018 0014 0017 0014 0016 0015 0017 0013 0017 0015 0017 0014 0043 0015 0040 0014 0043 0014 0040 0016 0041 0014 0042 0015 0042 0014 0041 0015 0041 0015 0016 0015 0017 0014 0041 0014 0042 0014 001A 0012 0018 0014 0016 0014 0018 0014 0042 0015 0042 0013 0018 0013 0017 0014 0043 0013 0042 0015 0041 0015 0181""
      - delay: 500ms
      - switch.turn_off: mute_switch

  - platform: template
    name: ""Info""
    id: info_switch
    turn_on_action:
      - remote_transmitter.transmit_pronto:
          data: ""0000 006D 0022 0000 015B 00AC 0017 0015 0016 0016 0017 0015 0017 0015 0017 0015 0017 0015 0017 0015 0016 0016 0017 003F 0017 003F 0017 003F 0016 0040 0016 0040 0017 003F 0016 0040 0017 003F 0017 0015 0017 003F 0017 003F 0017 0015 0017 003F 0017 0015 0017 003F 0016 0016 0017 003F 0017 0015 0017 0015 0017 003F 0017 0015 0017 003F 0017 0015 0017 003F 0017 0181""
      - delay: 500ms
      - switch.turn_off: info_switch

  - platform: template
    name: ""CBS""
    id: cbs_switch
    turn_on_action:
      - remote_transmitter.transmit_pronto:
          data: ""0000 006D 0022 0000 0159 00AE 0015 0016 0016 0017 0015 0016 0016 0017 0015 0017 0015 0017 0016 0016 0016 0016 0016 0040 0015 0041 0015 0041 0015 0041 0016 0041 0015 0041 0015 0041 0016 0040 0016 0016 0015 0017 0016 0041 0016 0016 0016 0041 0016 0016 0016 0016 0016 0016 0016 0041 0016 0040 0016 0016 0015 0041 0016 0016 0015 0041 0015 0041 0015 0042 0016 0181""
      - delay: 500ms
      - remote_transmitter.transmit_pronto:
          data: ""0000 006D 0022 0000 015B 00AC 0016 0016 0016 0016 0017 0015 0017 0015 0017 0015 0016 0016 0017 0015 0017 0015 0017 003F 0016 0040 0016 0040 0016 0040 0017 003F 0017 003F 0016 0040 0016 0040 0017 003F 0016 0040 0016 0040 0016 0016 0016 0040 0016 0016 0016 0016 0017 0015 0016 0016 0016 0016 0016 0016 0017 003F 0016 0016 0017 003F 0016 0040 0016 0040 0016 0181""
      - delay: 500ms
      - remote_transmitter.transmit_pronto:
          data: ""0000 006D 0022 0000 015A 00AD 0017 0015 0017 0015 0016 0016 0016 0016 0016 0016 0017 0015 0016 0016 0016 0016 0016 0040 0016 0040 0017 003F 0017 003F 0017 003F 0017 003F 0016 0040 0017 003F 0017 003F 0016 0040 0016 0016 0016 0016 0016 0040 0016 0016 0017 003F 0017 0015 0016 0016 0016 0016 0016 0040 0016 0040 0017 0015 0017 003F 0016 0016 0017 003F 0017 0181""
      - delay: 500ms
      - remote_transmitter.transmit_pronto:
          data: ""0000 006D 0022 0000 015A 00AD 0016 0016 0016 0016 0016 0016 0016 0016 0016 0016 0016 0016 0016 0016 0016 0016 0016 0040 0017 003F 0016 0040 0016 0040 0017 003F 0017 003F 0016 0040 0017 003F 0016 0016 0016 0040 0016 0016 0016 0040 0016 0040 0016 0016 0016 0016 0017 0015 0017 003F 0016 0016 0016 0040 0016 0016 0017 0015 0016 0040 0017 003F 0016 0040 0016 0181""
      - delay: 500ms
      - switch.turn_off: cbs_switch

  - platform: template
    name: ""ABC""
    id: abc_switch
    turn_on_action:
      - remote_transmitter.transmit_pronto:
          data: ""0000 006D 0022 0000 0159 00AE 0015 0016 0016 0017 0015 0016 0016 0017 0015 0017 0015 0017 0016 0016 0016 0016 0016 0040 0015 0041 0015 0041 0015 0041 0016 0041 0015 0041 0015 0041 0016 0040 0016 0016 0015 0017 0016 0041 0016 0016 0016 0041 0016 0016 0016 0016 0016 0016 0016 0041 0016 0040 0016 0016 0015 0041 0016 0016 0015 0041 0015 0041 0015 0042 0016 0181""
      - delay: 500ms
      - remote_transmitter.transmit_pronto:
          data: ""0000 006D 0022 0000 015B 00AC 0016 0016 0016 0016 0017 0015 0017 0015 0017 0015 0016 0016 0017 0015 0017 0015 0017 003F 0016 0040 0016 0040 0016 0040 0017 003F 0017 003F 0016 0040 0016 0040 0017 003F 0016 0040 0016 0040 0016 0016 0016 0040 0016 0016 0016 0016 0017 0015 0016 0016 0016 0016 0016 0016 0017 003F 0016 0016 0017 003F 0016 0040 0016 0040 0016 0181""
      - delay: 500ms
      - remote_transmitter.transmit_pronto:
          data: ""0000 006D 0022 0000 015A 00AD 0017 0015 0017 0015 0016 0016 0016 0016 0016 0016 0017 0015 0016 0016 0016 0016 0016 0040 0016 0040 0017 003F 0017 003F 0017 003F 0017 003F 0016 0040 0017 003F 0017 003F 0016 0040 0016 0016 0016 0016 0016 0040 0016 0016 0017 003F 0017 0015 0016 0016 0016 0016 0016 0040 0016 0040 0017 0015 0017 003F 0016 0016 0017 003F 0017 0181""
      - delay: 500ms
      - remote_transmitter.transmit_pronto:
          data: ""0000 006D 0022 0000 015A 00AD 0016 0016 0016 0016 0016 0016 0016 0016 0016 0016 0016 0016 0016 0016 0016 0016 0016 0040 0017 003F 0016 0040 0016 0040 0017 003F 0017 003F 0016 0040 0017 003F 0016 0016 0016 0040 0016 0016 0016 0040 0016 0040 0016 0016 0016 0016 0017 0015 0017 003F 0016 0016 0016 0040 0016 0016 0017 0015 0016 0040 0017 003F 0016 0040 0016 0181""
      - delay: 500ms
      - switch.turn_off: abc_switch

  - platform: template
    name: ""Channel 27""
    id: channel_27_switch
    turn_on_action:
      - remote_transmitter.transmit_pronto:
          data: ""0000 006D 0022 0000 015A 00AD 0016 0016 0017 0015 0016 0016 0016 0016 0016 0016 0017 0015 0016 0016 0016 0016 0016 0040 0017 003F 0017 003F 0016 0040 0016 0040 0016 0040 0017 003F 0017 003F 0017 0015 0017 0015 0016 0016 0016 0016 0016 0040 0016 0016 0017 003F 0017 0015 0016 0040 0016 0040 0016 0040 0017 003F 0016 0016 0016 0040 0017 0015 0016 0040 0017 0181""
      - delay: 500ms
      - remote_transmitter.transmit_pronto:
          data: ""0000 006D 0022 0000 015A 00AD 0016 0016 0016 0016 0017 0015 0016 0016 0017 0015 0017 0015 0017 0015 0017 0015 0017 003F 0017 003F 0016 0040 0016 0040 0017 003F 0016 0040 0016 0040 0016 0040 0016 0040 0016 0040 0017 003F 0016 0040 0016 0016 0017 0015 0016 0040 0016 0016 0016 0016 0016 0016 0016 0016 0017 0015 0016 0040 0016 0040 0016 0016 0016 0040 0016 0181""
      - delay: 500ms
      - remote_transmitter.transmit_pronto:
          data: ""0000 006D 0022 0000 015B 00AC 0016 0016 0016 0016 0017 0015 0017 0015 0017 0015 0016 0016 0017 0015 0017 0015 0017 003F 0016 0040 0016 0040 0016 0040 0017 003F 0017 003F 0016 0040 0016 0040 0017 003F 0016 0040 0016 0040 0016 0016 0016 0040 0016 0016 0016 0016 0017 0015 0016 0016 0016 0016 0016 0016 0017 003F 0016 0016 0017 003F 0016 0040 0016 0040 0016 0181""
      - delay: 500ms
      - remote_transmitter.transmit_pronto:
          data: ""0000 006D 0022 0000 015A 00AD 0017 0015 0017 0015 0016 0016 0016 0016 0016 0016 0017 0015 0016 0016 0016 0016 0016 0040 0016 0040 0017 003F 0017 003F 0017 003F 0017 003F 0016 0040 0017 003F 0017 003F 0016 0040 0016 0016 0016 0016 0016 0040 0016 0016 0017 003F 0017 0015 0016 0016 0016 0016 0016 0040 0016 0040 0017 0015 0017 003F 0016 0016 0017 003F 0017 0181""
      - delay: 500ms
      - remote_transmitter.transmit_pronto:
          data: ""0000 006D 0022 0000 015A 00AD 0016 0016 0016 0016 0016 0016 0016 0016 0016 0016 0016 0016 0016 0016 0016 0016 0016 0040 0017 003F 0016 0040 0016 0040 0017 003F 0017 003F 0016 0040 0017 003F 0016 0016 0016 0040 0016 0016 0016 0040 0016 0040 0016 0016 0016 0016 0017 0015 0017 003F 0016 0016 0016 0040 0016 0016 0017 0015 0016 0040 0017 003F 0016 0040 0016 0181""
      - delay: 500ms
      - switch.turn_off: channel_27_switch

  - platform: template
    name: ""FOX""
    id: fox_switch
    turn_on_action:
      - remote_transmitter.transmit_pronto:
          data: ""0000 006D 0022 0000 015A 00AD 0016 0016 0017 0015 0017 0015 0016 0016 0016 0016 0017 0015 0017 0015 0016 0016 0017 003F 0017 003F 0016 0040 0017 003F 0016 0040 0016 0040 0017 003F 0016 0040 0017 0015 0016 0016 0016 0016 0016 0016 0016 0040 0017 0015 0017 0015 0016 0016 0016 0040 0017 003F 0016 0040 0016 0040 0017 0015 0017 003F 0016 0040 0016 0040 0016 0181""
      - delay: 500ms
      - remote_transmitter.transmit_pronto:
          data: ""0000 006D 0022 0000 015A 00AD 0017 0015 0016 0016 0016 0016 0016 0016 0016 0016 0017 0015 0016 0016 0016 0016 0017 003F 0016 0040 0017 003F 0017 003F 0016 0040 0016 0040 0017 003F 0016 0040 0016 0016 0016 0016 0016 0040 0016 0016 0016 0040 0017 0015 0017 003F 0016 0016 0016 0040 0016 0040 0016 0016 0016 0040 0017 0015 0017 003F 0016 0016 0016 0040 0017 0181""
      - delay: 500ms
      - remote_transmitter.transmit_pronto:
          data: ""0000 006D 0022 0000 015B 00AC 0016 0016 0016 0016 0017 0015 0017 0015 0017 0015 0016 0016 0017 0015 0017 0015 0017 003F 0016 0040 0016 0040 0016 0040 0017 003F 0017 003F 0016 0040 0016 0040 0017 003F 0016 0040 0016 0040 0016 0016 0016 0040 0016 0016 0016 0016 0017 0015 0016 0016 0016 0016 0016 0016 0017 003F 0016 0016 0017 003F 0016 0040 0016 0040 0016 0181""
      - delay: 500ms
      - remote_transmitter.transmit_pronto:
          data: ""0000 006D 0022 0000 015A 00AD 0017 0015 0017 0015 0016 0016 0016 0016 0016 0016 0017 0015 0016 0016 0016 0016 0016 0040 0016 0040 0017 003F 0017 003F 0017 003F 0017 003F 0016 0040 0017 003F 0017 003F 0016 0040 0016 0016 0016 0016 0016 0040 0016 0016 0017 003F 0017 0015 0016 0016 0016 0016 0016 0040 0016 0040 0017 0015 0017 003F 0016 0016 0017 003F 0017 0181""
      - delay: 500ms
      - remote_transmitter.transmit_pronto:
          data: ""0000 006D 0022 0000 015A 00AD 0016 0016 0016 0016 0016 0016 0016 0016 0016 0016 0016 0016 0016 0016 0016 0016 0016 0040 0017 003F 0016 0040 0016 0040 0017 003F 0017 003F 0016 0040 0017 003F 0016 0016 0016 0040 0016 0016 0016 0040 0016 0040 0016 0016 0016 0016 0017 0015 0017 003F 0016 0016 0016 0040 0016 0016 0017 0015 0016 0040 0017 003F 0016 0040 0016 0181""
      - delay: 500ms
      - switch.turn_off: fox_switch"
Q2Bwqkgt,Thinkspeak,mikroavr,Arduino,Tuesday 21st of May 2024 08:42:18 PM CDT,"#include <ModbusMaster.h>
ModbusMaster node;
static uint8_t pzemSlaveAddr = 1;

float voltage,  current, power, energy, freq, pf;
#define pzemSerial Serial2


#define TINY_GSM_MODEM_SIM800      // Modem is SIM800
#include <TinyGsmClient.h>


// Your GPRS credentials (leave empty, if not needed)
const char apn[]  = ""Internet"";
const char user[] = """";
const char Pass[] = """";

// The server variable can be just a domain name or it can have a subdomain. It depends on the service you are using
const char server[] = ""thingspeak.com""; // domain name: example.com, maker.ifttt.com, etc
const char resource[] = ""https://api.thingspeak.com/update?api_key=QPH1MMAE2486DIG2"";
const int  port = 80;                   // server port number
String apiKey = ""QPH1MMAE2486DIG2"";

// Set serial for AT commands (to SIM800 module)
#define SerialAT Serial1
TinyGsm modem(SerialAT);

// TinyGSM Client for Internet connection
TinyGsmClient client(modem, 0);

#define MODEM_TX             25
#define MODEM_RX             26

// Set serial for PZEM
#define RXD1 16
#define TXD1 17
#define PKEY 14

//Untuk watchdog external
#define  wdtPin  15
#define  ledPin  19
bool wdtState = 0;
unsigned cur_time_push, old_time_push;
unsigned cur_time_wdt, old_time_wdt;
unsigned cur_time_rst, old_time_rst;
/*
  RegAddr Description                 Resolution
  0x0000  Voltage value               1LSB correspond to 0.1V
  0x0001  Current value low 16 bits   1LSB correspond to 0.001A
  0x0002  Current value high 16 bits
  0x0003  Power value low 16 bits     1LSB correspond to 0.1W
  0x0004  Power value high 16 bits
  0x0005  Energy value low 16 bits    1LSB correspond to 1Wh
  0x0006  Energy value high 16 bits
  0x0007  Frequency value             1LSB correspond to 0.1Hz
  0x0008  Power factor value          1LSB correspond to 0.01
  0x0009  Alarm status  0xFFFF is alarm，0x0000is not alarm
*/

void setup() {
  pinMode(wdtPin, OUTPUT);
  pinMode(ledPin, OUTPUT);
  pzemSerial.begin(9600);
  Serial.begin(115200);
  // Set GSM module baud rate and UART pins
  Serial2.begin(9600, SERIAL_8N1, RXD1, TXD1);//pzem 16
  SerialAT.begin(9600, SERIAL_8N1, MODEM_RX, MODEM_TX);//gsm
  node.begin(pzemSlaveAddr, pzemSerial);
  Serial.println(""Initializing modem..."");
  modem.restart();
  Serial.print(""Connecting to APN: "");
  Serial.print(apn);
  if (!modem.gprsConnect(apn, user, Pass)) {
    Serial.println("" fail"");
  }
  else {
    Serial.println(""OK"");
  }
}

void loop() {
  cur_time_wdt = millis();
  if (cur_time_wdt - old_time_wdt > 250) {
    wdtSeed();
    old_time_wdt = millis();
  }

  cur_time_rst = millis() / 1000;
  if (cur_time_rst - old_time_rst >= 3600) {
    ESP.restart();
  }

  cur_time_push = millis();
  if (cur_time_push - old_time_push > 1500) {
    pushServer();
    old_time_push = millis();
  }

}

void pushServer() {
  uint8_t result;
  result = node.readInputRegisters(0, 9); //read the 9 registers of the PZEM-014 / 016
  if (result == node.ku8MBSuccess)
  {
    Serial.println(""sukses modbus"");
    voltage = node.getResponseBuffer(0) / 10.0;

    uint32_t tempdouble = 0x00000000;

    tempdouble = node.getResponseBuffer(1);       //LowByte
    tempdouble |= node.getResponseBuffer(2) << 8;  //highByte
    current = tempdouble / 1000.0;

    tempdouble |= node.getResponseBuffer(3);       //LowByte
    tempdouble |= node.getResponseBuffer(4) << 8;  //highByte
    power = tempdouble / 10.0;

    tempdouble = node.getResponseBuffer(5);       //LowByte
    tempdouble |= node.getResponseBuffer(6) << 8;  //highByte
    energy = tempdouble;

    tempdouble = node.getResponseBuffer(7);
    freq = tempdouble / 10.0;

    tempdouble = node.getResponseBuffer(8);
    pf = tempdouble / 10.0;

    //SEND TO THINKSPEAK

    Serial.print(""Connecting to "");
    Serial.print(server);
    if (!client.connect(server, port)) {
      Serial.println("" fail"");
    }
    else {
      Serial.println("" OK"");

      // Making an HTTP POST request
      Serial.println(""Performing HTTP POST request..."");
      // Prepare your HTTP POST request data (Temperature in Celsius degrees)
      Serial.println(""Performing HTTP POST request..."");
      // Prepare your HTTP POST request data (Temperature in Celsius degrees)


      String httpRequestData = ""api_key="" + apiKey + ""&field1="" + String(voltage) + ""&field2="" + String(current) + ""&field3="" + String(freq) + ""&field4="" + String(power) + ""&field5="" + String(energy) + ""&field6="" + String(pf) + """";

      client.print(String(""POST "") + resource + "" HTTP/1.1\r\n"");
      client.print(String(""Host: "") + server + ""\r\n"");
      client.println(""Connection: close"");
      client.println(""Content-Type: application/x-www-form-urlencoded"");
      client.print(""Content-Length: "");
      client.println(httpRequestData.length());
      client.println();
      client.println(httpRequestData);


      unsigned long timeout = millis();
      while (client.connected() && millis() - timeout < 10000L) {
        // Print available data (HTTP response from server)
        while (client.available()) {
          char c = client.read();
          Serial.print(c);
          timeout = millis();
        }
      }
    }
    Serial.println();

    // Close client and disconnect
    client.stop();
    //      Serial.println(F(""Server disconnected""));
    //      modem.gprsDisconnect();
    //      Serial.println(F(""GPRS disconnected""));
  }
}

void wdtSeed() {
  wdtState = !wdtState;
  digitalWrite(wdtPin, wdtState);
  digitalWrite(ledPin, wdtState);
}
"
FAryav9d,Pastebin.ai - #1 Pastebin Alternative,xxsa,PHP,Tuesday 21st of May 2024 07:31:56 PM CDT,"https://pastebin.ai - #1 Pastebin Alternative - its free and always will be.

pastebin.ai  is a simple and efficient pastebin for mainly code to be distributed neatly and efficiently across the web. Website where you can paste and store any type of text or code snippets online and share it with your friends, Also You can see Recent Pastes

Simple Ads by Google Adsense Few rather than Pastebin
150+ different syntax languages - All Free
Paste Folders
Load files feature
Password protected pastes.
Encrypted pastes.
URL Shortener.
Unlisted pastes.
Private pastes.
Embed, download, print pastes.
Socialite (Facebook/Twitter/Google Social login)
Trending pastes page (day, week, month, year)
Encrypted pastes.
Trending pastes page (day, week, month, year).
No Captcha for logged in users feature.
..
......................................
"
M0CTanh3,include,blackhat1337,ASP,Tuesday 21st of May 2024 07:21:28 PM CDT,"<!-- The included file is in the same directory as IncExample.asp. --> 
<!-- #include file = ""all.asp"" --> 

<!-- The included file is in the directory above IncExample.asp. 
     Enable Parent Paths must be checked for the Web folder. --> 
<!-- #include file = ""..\all.htm"" --> 

<!-- The included file is in the Scripts virtual directory. --> 
<!-- #include virtual = ""/scripts/tools/global.inc"" -->"
L83V9TtD,2024-05-21_stats.json,rdp_snitch,JSON,Tuesday 21st of May 2024 07:18:26 PM CDT,"{
  ""ip"": {
    ""64.124.50.139"": 9,
    ""36.91.222.100"": 9,
    ""183.82.48.178"": 6,
    ""187.228.241.39"": 6,
    ""87.251.75.145"": 9,
    ""213.109.202.230"": 24,
    ""162.142.125.215"": 3,
    ""205.210.31.234"": 9,
    ""185.196.220.41"": 9,
    ""212.70.149.142"": 9,
    ""62.202.2.57"": 3,
    ""185.170.144.3"": 6,
    ""207.148.120.108"": 9,
    ""1.55.55.178"": 3,
    ""152.32.206.181"": 3,
    ""185.122.204.169"": 6,
    ""185.198.69.10"": 3,
    ""185.198.69.29"": 3,
    ""116.140.196.215"": 3,
    ""45.227.254.49"": 6,
    ""205.210.31.73"": 9,
    ""194.165.16.72"": 6,
    ""123.56.20.194"": 30,
    ""123.58.207.175"": 6,
    ""194.165.16.10"": 6,
    ""185.198.69.9"": 3,
    ""185.198.69.20"": 3,
    ""179.60.147.131"": 6,
    ""198.235.24.123"": 9,
    ""185.198.69.15"": 3,
    ""94.232.46.148"": 3,
    ""185.198.69.4"": 3,
    ""157.97.121.72"": 3,
    ""185.198.69.27"": 3,
    ""220.248.76.186"": 3,
    ""205.210.31.53"": 9,
    ""185.198.69.8"": 3,
    ""112.4.139.162"": 3,
    ""185.198.69.3"": 3,
    ""103.56.7.131"": 6
  },
  ""asn"": {
    ""AS6461"": 9,
    ""AS7713"": 9,
    ""AS55577"": 6,
    ""AS8151"": 6,
    ""AS208091"": 9,
    ""AS208312"": 24,
    ""AS398324"": 3,
    ""AS396982"": 36,
    ""AS208046"": 9,
    ""AS204428"": 9,
    ""AS3303"": 3,
    ""AS197414"": 6,
    ""AS20473"": 9,
    ""AS18403"": 3,
    ""AS135377"": 9,
    ""AS57523"": 33,
    ""AS4837"": 3,
    ""AS267784"": 6,
    ""AS48721"": 12,
    ""AS37963"": 30,
    ""AS209588"": 6,
    ""AS212482"": 3,
    ""AS396356"": 3,
    ""AS17621"": 3,
    ""AS56046"": 3,
    ""AS140599"": 6
  },
  ""isp"": {
    ""Zayo Bandwidth"": 9,
    ""PT Telekomunikasi Indonesia"": 9,
    ""Beam Telecom Pvt Ltd"": 6,
    ""Uninet S.A. de C.V."": 6,
    ""Xhost Internet Solutions LP"": 18,
    ""Red Byte LLC"": 24,
    ""Censys, Inc."": 3,
    ""Google LLC"": 36,
    ""ColocationX Ltd."": 9,
    ""SS-Net"": 9,
    ""Swisscom (Schweiz) AG - Bluewin"": 3,
    ""Choopa"": 9,
    ""FPT Telecom Company"": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 9,
    ""Chang Way Technologies Co. Limited"": 33,
    ""China Unicom CHINA169 Network"": 3,
    ""Flyservers S.A."": 24,
    ""Hangzhou Alibaba Advertising Co"": 30,
    ""Consumer-Network"": 3,
    ""China Unicom CncNet"": 3,
    ""China Mobile Communications Corporation"": 3,
    ""Comfac Corporation"": 6
  },
  ""org"": {
    ""Microsoft Corporation"": 9,
    ""Telekomunikasi Indonesia"": 9,
    ""Atria Convergence Technologies Ltd."": 6,
    ""UNINET"": 6,
    ""Xhost Internet Solutions"": 9,
    ""Chang Way Technologies Co. Limited"": 51,
    ""Censys Inc"": 3,
    ""Palo Alto Networks, Inc"": 36,
    ""Makut Investments"": 9,
    ""4Media Ltd"": 9,
    ""Swisscom (Schweiz) AG"": 3,
    ""Xhostis"": 6,
    ""Unknown"": 15,
    ""Vietnam Internet Network Information Center"": 3,
    ""Ucloud Information Technology"": 3,
    ""Starcrecium Limited"": 6,
    ""China United Network Communications Corporation Limited"": 3,
    ""UAB Host Baltic"": 6,
    ""Flyservers S.A"": 12,
    ""Aliyun Computing Co., LTD"": 30,
    ""Ucloud Information Technology (hk) Limited"": 6,
    ""Cloud Solutions S.A"": 6,
    ""Dmitriy Panchenko"": 3,
    ""China Mobile Communications Corporation"": 3,
    ""Comfac Corporation"": 6
  },
  ""regionName"": {
    ""Virginia"": 21,
    ""Jakarta"": 9,
    ""Telangana"": 6,
    ""Hidalgo"": 6,
    ""North Holland"": 15,
    ""Moscow"": 57,
    ""Michigan"": 3,
    ""California"": 36,
    ""Plovdiv"": 9,
    ""Zurich"": 3,
    ""South West"": 9,
    ""B\u1eafc Ninh Province"": 3,
    ""Beijing"": 33,
    ""Vilnius"": 6,
    ""Kaunas"": 12,
    ""England"": 6,
    ""Distrito Federal"": 6,
    ""Perm Krai"": 3,
    ""New Jersey"": 3,
    ""Shanghai"": 3,
    ""Jiangsu"": 3,
    ""Metro Manila"": 6
  },
  ""country"": {
    ""United States"": 63,
    ""Indonesia"": 9,
    ""India"": 6,
    ""Mexico"": 6,
    ""The Netherlands"": 15,
    ""Russia"": 60,
    ""Bulgaria"": 9,
    ""Switzerland"": 3,
    ""Singapore"": 9,
    ""Vietnam"": 3,
    ""China"": 39,
    ""Lithuania"": 18,
    ""United Kingdom"": 6,
    ""Venezuela"": 6,
    ""Philippines"": 6
  },
  ""account"": {
    ""Test"": 54,
    ""hello"": 60,
    ""Administr"": 63,
    ""(empty)"": 21,
    ""oBkEytNtH"": 3,
    ""iJSgvn"": 3,
    ""oBRRzJ"": 3,
    ""Domain"": 21,
    ""Administrator"": 3,
    ""tmjmeIYMA"": 3,
    ""cHeOwW"": 3,
    ""BxyEws"": 3,
    ""eQBYyOIWy"": 3,
    ""hKAuCx"": 3,
    ""fOZtci"": 3,
    ""MmBnBeKwd"": 3,
    ""BqXpLm"": 3,
    ""hnXfMg"": 3
  },
  ""keyboard"": {
    ""Unknown"": 258
  },
  ""client_build"": {
    ""Unknown"": 258
  },
  ""client_name"": {
    ""Unknown"": 258
  },
  ""ip_type"": {
    ""Unknown"": 90,
    ""proxy"": 72,
    ""hosting"": 84,
    ""mobile"": 12
  }
}"
FHLL7sks,2024-05-21_stats.json,rdp_snitch,JSON,Tuesday 21st of May 2024 07:16:12 PM CDT,"{
  ""ip"": {
    ""64.124.50.139"": 6,
    ""36.91.222.100"": 6,
    ""183.82.48.178"": 4,
    ""187.228.241.39"": 4,
    ""87.251.75.145"": 6,
    ""213.109.202.230"": 16,
    ""162.142.125.215"": 2,
    ""205.210.31.234"": 6,
    ""185.196.220.41"": 6,
    ""212.70.149.142"": 6,
    ""62.202.2.57"": 2,
    ""185.170.144.3"": 4,
    ""207.148.120.108"": 6,
    ""1.55.55.178"": 2,
    ""152.32.206.181"": 2,
    ""185.122.204.169"": 4,
    ""185.198.69.10"": 2,
    ""185.198.69.29"": 2,
    ""116.140.196.215"": 2,
    ""45.227.254.49"": 4,
    ""205.210.31.73"": 6,
    ""194.165.16.72"": 4,
    ""123.56.20.194"": 20,
    ""123.58.207.175"": 4,
    ""194.165.16.10"": 4,
    ""185.198.69.9"": 2,
    ""185.198.69.20"": 2,
    ""179.60.147.131"": 4,
    ""198.235.24.123"": 6,
    ""185.198.69.15"": 2,
    ""94.232.46.148"": 2,
    ""185.198.69.4"": 2,
    ""157.97.121.72"": 2,
    ""185.198.69.27"": 2,
    ""220.248.76.186"": 2,
    ""205.210.31.53"": 6,
    ""185.198.69.8"": 2,
    ""112.4.139.162"": 2,
    ""185.198.69.3"": 2,
    ""103.56.7.131"": 4
  },
  ""asn"": {
    ""AS6461"": 6,
    ""AS7713"": 6,
    ""AS55577"": 4,
    ""AS8151"": 4,
    ""AS208091"": 6,
    ""AS208312"": 16,
    ""AS398324"": 2,
    ""AS396982"": 24,
    ""AS208046"": 6,
    ""AS204428"": 6,
    ""AS3303"": 2,
    ""AS197414"": 4,
    ""AS20473"": 6,
    ""AS18403"": 2,
    ""AS135377"": 6,
    ""AS57523"": 22,
    ""AS4837"": 2,
    ""AS267784"": 4,
    ""AS48721"": 8,
    ""AS37963"": 20,
    ""AS209588"": 4,
    ""AS212482"": 2,
    ""AS396356"": 2,
    ""AS17621"": 2,
    ""AS56046"": 2,
    ""AS140599"": 4
  },
  ""isp"": {
    ""Zayo Bandwidth"": 6,
    ""PT Telekomunikasi Indonesia"": 6,
    ""Beam Telecom Pvt Ltd"": 4,
    ""Uninet S.A. de C.V."": 4,
    ""Xhost Internet Solutions LP"": 12,
    ""Red Byte LLC"": 16,
    ""Censys, Inc."": 2,
    ""Google LLC"": 24,
    ""ColocationX Ltd."": 6,
    ""SS-Net"": 6,
    ""Swisscom (Schweiz) AG - Bluewin"": 2,
    ""Choopa"": 6,
    ""FPT Telecom Company"": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 6,
    ""Chang Way Technologies Co. Limited"": 22,
    ""China Unicom CHINA169 Network"": 2,
    ""Flyservers S.A."": 16,
    ""Hangzhou Alibaba Advertising Co"": 20,
    ""Consumer-Network"": 2,
    ""China Unicom CncNet"": 2,
    ""China Mobile Communications Corporation"": 2,
    ""Comfac Corporation"": 4
  },
  ""org"": {
    ""Microsoft Corporation"": 6,
    ""Telekomunikasi Indonesia"": 6,
    ""Atria Convergence Technologies Ltd."": 4,
    ""UNINET"": 4,
    ""Xhost Internet Solutions"": 6,
    ""Chang Way Technologies Co. Limited"": 34,
    ""Censys Inc"": 2,
    ""Palo Alto Networks, Inc"": 24,
    ""Makut Investments"": 6,
    ""4Media Ltd"": 6,
    ""Swisscom (Schweiz) AG"": 2,
    ""Xhostis"": 4,
    ""Unknown"": 10,
    ""Vietnam Internet Network Information Center"": 2,
    ""Ucloud Information Technology"": 2,
    ""Starcrecium Limited"": 4,
    ""China United Network Communications Corporation Limited"": 2,
    ""UAB Host Baltic"": 4,
    ""Flyservers S.A"": 8,
    ""Aliyun Computing Co., LTD"": 20,
    ""Ucloud Information Technology (hk) Limited"": 4,
    ""Cloud Solutions S.A"": 4,
    ""Dmitriy Panchenko"": 2,
    ""China Mobile Communications Corporation"": 2,
    ""Comfac Corporation"": 4
  },
  ""regionName"": {
    ""Virginia"": 14,
    ""Jakarta"": 6,
    ""Telangana"": 4,
    ""Hidalgo"": 4,
    ""North Holland"": 10,
    ""Moscow"": 38,
    ""Michigan"": 2,
    ""California"": 24,
    ""Plovdiv"": 6,
    ""Zurich"": 2,
    ""South West"": 6,
    ""B\u1eafc Ninh Province"": 2,
    ""Beijing"": 22,
    ""Vilnius"": 4,
    ""Kaunas"": 8,
    ""England"": 4,
    ""Distrito Federal"": 4,
    ""Perm Krai"": 2,
    ""New Jersey"": 2,
    ""Shanghai"": 2,
    ""Jiangsu"": 2,
    ""Metro Manila"": 4
  },
  ""country"": {
    ""United States"": 42,
    ""Indonesia"": 6,
    ""India"": 4,
    ""Mexico"": 4,
    ""The Netherlands"": 10,
    ""Russia"": 40,
    ""Bulgaria"": 6,
    ""Switzerland"": 2,
    ""Singapore"": 6,
    ""Vietnam"": 2,
    ""China"": 26,
    ""Lithuania"": 12,
    ""United Kingdom"": 4,
    ""Venezuela"": 4,
    ""Philippines"": 4
  },
  ""account"": {
    ""Test"": 36,
    ""hello"": 40,
    ""Administr"": 42,
    ""(empty)"": 14,
    ""oBkEytNtH"": 2,
    ""iJSgvn"": 2,
    ""oBRRzJ"": 2,
    ""Domain"": 14,
    ""Administrator"": 2,
    ""tmjmeIYMA"": 2,
    ""cHeOwW"": 2,
    ""BxyEws"": 2,
    ""eQBYyOIWy"": 2,
    ""hKAuCx"": 2,
    ""fOZtci"": 2,
    ""MmBnBeKwd"": 2,
    ""BqXpLm"": 2,
    ""hnXfMg"": 2
  },
  ""keyboard"": {
    ""Unknown"": 172
  },
  ""client_build"": {
    ""Unknown"": 172
  },
  ""client_name"": {
    ""Unknown"": 172
  },
  ""ip_type"": {
    ""Unknown"": 60,
    ""proxy"": 48,
    ""hosting"": 56,
    ""mobile"": 8
  }
}"
eFa7Scpn,2024-05-21_stats.json,rdp_snitch,JSON,Tuesday 21st of May 2024 07:15:09 PM CDT,"{
  ""ip"": {
    ""64.124.50.139"": 3,
    ""36.91.222.100"": 3,
    ""183.82.48.178"": 2,
    ""187.228.241.39"": 2,
    ""87.251.75.145"": 3,
    ""213.109.202.230"": 8,
    ""162.142.125.215"": 1,
    ""205.210.31.234"": 3,
    ""185.196.220.41"": 3,
    ""212.70.149.142"": 3,
    ""62.202.2.57"": 1,
    ""185.170.144.3"": 2,
    ""207.148.120.108"": 3,
    ""1.55.55.178"": 1,
    ""152.32.206.181"": 1,
    ""185.122.204.169"": 2,
    ""185.198.69.10"": 1,
    ""185.198.69.29"": 1,
    ""116.140.196.215"": 1,
    ""45.227.254.49"": 2,
    ""205.210.31.73"": 3,
    ""194.165.16.72"": 2,
    ""123.56.20.194"": 10,
    ""123.58.207.175"": 2,
    ""194.165.16.10"": 2,
    ""185.198.69.9"": 1,
    ""185.198.69.20"": 1,
    ""179.60.147.131"": 2,
    ""198.235.24.123"": 3,
    ""185.198.69.15"": 1,
    ""94.232.46.148"": 1,
    ""185.198.69.4"": 1,
    ""157.97.121.72"": 1,
    ""185.198.69.27"": 1,
    ""220.248.76.186"": 1,
    ""205.210.31.53"": 3,
    ""185.198.69.8"": 1,
    ""112.4.139.162"": 1,
    ""185.198.69.3"": 1,
    ""103.56.7.131"": 2
  },
  ""asn"": {
    ""AS6461"": 3,
    ""AS7713"": 3,
    ""AS55577"": 2,
    ""AS8151"": 2,
    ""AS208091"": 3,
    ""AS208312"": 8,
    ""AS398324"": 1,
    ""AS396982"": 12,
    ""AS208046"": 3,
    ""AS204428"": 3,
    ""AS3303"": 1,
    ""AS197414"": 2,
    ""AS20473"": 3,
    ""AS18403"": 1,
    ""AS135377"": 3,
    ""AS57523"": 11,
    ""AS4837"": 1,
    ""AS267784"": 2,
    ""AS48721"": 4,
    ""AS37963"": 10,
    ""AS209588"": 2,
    ""AS212482"": 1,
    ""AS396356"": 1,
    ""AS17621"": 1,
    ""AS56046"": 1,
    ""AS140599"": 2
  },
  ""isp"": {
    ""Zayo Bandwidth"": 3,
    ""PT Telekomunikasi Indonesia"": 3,
    ""Beam Telecom Pvt Ltd"": 2,
    ""Uninet S.A. de C.V."": 2,
    ""Xhost Internet Solutions LP"": 6,
    ""Red Byte LLC"": 8,
    ""Censys, Inc."": 1,
    ""Google LLC"": 12,
    ""ColocationX Ltd."": 3,
    ""SS-Net"": 3,
    ""Swisscom (Schweiz) AG - Bluewin"": 1,
    ""Choopa"": 3,
    ""FPT Telecom Company"": 1,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Chang Way Technologies Co. Limited"": 11,
    ""China Unicom CHINA169 Network"": 1,
    ""Flyservers S.A."": 8,
    ""Hangzhou Alibaba Advertising Co"": 10,
    ""Consumer-Network"": 1,
    ""China Unicom CncNet"": 1,
    ""China Mobile Communications Corporation"": 1,
    ""Comfac Corporation"": 2
  },
  ""org"": {
    ""Microsoft Corporation"": 3,
    ""Telekomunikasi Indonesia"": 3,
    ""Atria Convergence Technologies Ltd."": 2,
    ""UNINET"": 2,
    ""Xhost Internet Solutions"": 3,
    ""Chang Way Technologies Co. Limited"": 17,
    ""Censys Inc"": 1,
    ""Palo Alto Networks, Inc"": 12,
    ""Makut Investments"": 3,
    ""4Media Ltd"": 3,
    ""Swisscom (Schweiz) AG"": 1,
    ""Xhostis"": 2,
    ""Unknown"": 5,
    ""Vietnam Internet Network Information Center"": 1,
    ""Ucloud Information Technology"": 1,
    ""Starcrecium Limited"": 2,
    ""China United Network Communications Corporation Limited"": 1,
    ""UAB Host Baltic"": 2,
    ""Flyservers S.A"": 4,
    ""Aliyun Computing Co., LTD"": 10,
    ""Ucloud Information Technology (hk) Limited"": 2,
    ""Cloud Solutions S.A"": 2,
    ""Dmitriy Panchenko"": 1,
    ""China Mobile Communications Corporation"": 1,
    ""Comfac Corporation"": 2
  },
  ""regionName"": {
    ""Virginia"": 7,
    ""Jakarta"": 3,
    ""Telangana"": 2,
    ""Hidalgo"": 2,
    ""North Holland"": 5,
    ""Moscow"": 19,
    ""Michigan"": 1,
    ""California"": 12,
    ""Plovdiv"": 3,
    ""Zurich"": 1,
    ""South West"": 3,
    ""B\u1eafc Ninh Province"": 1,
    ""Beijing"": 11,
    ""Vilnius"": 2,
    ""Kaunas"": 4,
    ""England"": 2,
    ""Distrito Federal"": 2,
    ""Perm Krai"": 1,
    ""New Jersey"": 1,
    ""Shanghai"": 1,
    ""Jiangsu"": 1,
    ""Metro Manila"": 2
  },
  ""country"": {
    ""United States"": 21,
    ""Indonesia"": 3,
    ""India"": 2,
    ""Mexico"": 2,
    ""The Netherlands"": 5,
    ""Russia"": 20,
    ""Bulgaria"": 3,
    ""Switzerland"": 1,
    ""Singapore"": 3,
    ""Vietnam"": 1,
    ""China"": 13,
    ""Lithuania"": 6,
    ""United Kingdom"": 2,
    ""Venezuela"": 2,
    ""Philippines"": 2
  },
  ""account"": {
    ""Test"": 18,
    ""hello"": 20,
    ""Administr"": 21,
    ""(empty)"": 7,
    ""oBkEytNtH"": 1,
    ""iJSgvn"": 1,
    ""oBRRzJ"": 1,
    ""Domain"": 7,
    ""Administrator"": 1,
    ""tmjmeIYMA"": 1,
    ""cHeOwW"": 1,
    ""BxyEws"": 1,
    ""eQBYyOIWy"": 1,
    ""hKAuCx"": 1,
    ""fOZtci"": 1,
    ""MmBnBeKwd"": 1,
    ""BqXpLm"": 1,
    ""hnXfMg"": 1
  },
  ""keyboard"": {
    ""Unknown"": 86
  },
  ""client_build"": {
    ""Unknown"": 86
  },
  ""client_name"": {
    ""Unknown"": 86
  },
  ""ip_type"": {
    ""Unknown"": 30,
    ""proxy"": 24,
    ""hosting"": 28,
    ""mobile"": 4
  }
}"
Bii5GcWX,Test.asp,blackhat1337,ASP,Tuesday 21st of May 2024 07:10:45 PM CDT,"<% 
Response.Write ""<BR>Inside Test.asp.<BR>"" 
Response.Write ""Test = "" & Request.QueryString(""Test"") & "".<BR>"" 
%>"
1asYntQz,exec.stm,blackhat1337,Ada,Tuesday 21st of May 2024 07:09:50 PM CDT,"<H3>Inside Exec.stm</H3> 
<!-- #exec CGI=""/testfolder/test.asp?test=Hello"" --> 
<FORM NAME=""Return"" METHOD=""POST"" ACTION=""Exec.asp""> 
<INPUT TYPE=""SUBMIT"" VALUE=""Return to Previous Page"" NAME=""Return""> 
</FORM>"
xcyi03xC,exec,blackhat1337,ASP,Tuesday 21st of May 2024 07:09:27 PM CDT,"<FORM NAME=""RunExec"" METHOD=""POST"" ACTION=""Exec.asp""> 
<INPUT TYPE=""SUBMIT"" VALUE=""Run the #exec Directive"" NAME=""RunExec""> 
</FORM> 
<% 
If Len(Request.Form(""RunExec"")) Then 
  Response.Redirect(""Exec.stm"") 
End If 
%>"
NitLKWu3,win_shortcuts_automation,Python253,Python,Tuesday 21st of May 2024 07:09:06 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Filename: win_shortcuts_automation.py
# Version: 1.0.0
# Author: Jeoi Reqi

""""""
:: Welcome to Windows Shortcuts Automation ::

    - This script is your gateway to unlocking the true potential of your Windows experience!
    - Say goodbye to repetitive tasks and hello to seamless automation with Python.
    - Whether you're a seasoned user looking to supercharge your workflow or a curious beginner eager to explore the possibilities,
      this script is here to revolutionize the way you interact with your Windows system.

Features:
    - Harness the power of Python to automate a plethora of Windows shortcuts effortlessly.
    - Enjoy a user-friendly interface that simplifies the selection and execution of shortcuts.
    - Customize your experience by crafting your own personalized hotkeys to suit your unique needs.

Prerequisites:
    - Python 3.x
    - The following modules must be installed:
        - pygetwindow
        - PyAutoGUI
        - keyboard
        - json
        - os

How to Use:
    1. Ensure you have Python 3.x installed on your system.
    2. Install the required modules using pip:
    
        'pip install pyautogui pygetwindow keyboard json'
        
    3. Run the script and embark on an adventure of Windows automation!
       - Simply follow the on-screen prompts to select and execute your desired shortcuts.

Additional Insights:
    - Certain shortcuts may necessitate additional permissions or configurations, so be sure to grant any required permissions.
    - Delve into the realm of Windows automation with confidence and unleash your productivity like never before!
""""""

# Get Essential Imports
import json
import keyboard
import os
import pyautogui
import pygetwindow as gw

def select_program():
    """"""
    Function for program selection via file explorer navigation
    """"""
    os.system(""explorer C:\\Program Files (x86)"")
    
# Predefined hotkeys
PREDEFINED_HOTKEYS = {
    ""open_start_menu"": ['win'],
    ""open_secret_start_menu"": ['win', 'x'],
    ""cycle_through_taskbar"": ['win', 't'],
    ""go_to_nth_application"": ['win', '[n]'],
    ""show_all_running_applications"": ['win', 'tab'],
    ""show_hide_desktop"": ['win', 'd'],
    ""minimize_all_windows"": ['ctrl', 'm'],
    ""temporary_show_desktop"": ['win', ','],
    ""magnify_screen_content"": ['win', 'plus'],
    ""maximize_window"": ['win', 'up'],
    ""maximize_window_vertically"": ['win', 'shift', 'up'],
    ""move_window_to_left_monitor"": ['custom'],
    ""move_window_to_right_monitor"": ['custom'],
    ""take_rectangular_screenshot"": ['win', 'shift', 's'],
    ""take_full_screenshot"": ['win', 'printscreen'],
    ""create_new_virtual_desktop"": ['win', 'ctrl', 'd'],
    ""move_between_virtual_desktops_left"": ['win', 'ctrl', 'left'],
    ""move_between_virtual_desktops_right"": ['win', 'ctrl', 'right'],
    ""close_current_virtual_desktop"": ['win', 'ctrl', 'f4'],
    ""open_action_center"": ['win', 'a'],
    ""open_search"": ['win', 's'],
    ""open_new_edge_tab"": ['win', 'c'],
    ""open_windows_settings"": ['win', 'i'],
    ""connect_sidebar"": ['win', 'k'],
    ""use_voice_typing"": ['win', 'h'],
    ""lock_computer"": ['win', 'l'],
    ""lock_screen_orientation"": ['win', 'o'],
    ""open_presentation_sidebar"": ['win', 'p'],
    ""open_ease_of_access_center"": ['win', 'u'],
    ""select_from_clipboard_history"": ['win', 'v'],
    ""set_focus_to_notification_area"": ['win', 'b'],
    ""open_emoji_panel"": ['win', '.'],
    ""start_stop_narrator"": ['win', 'ctrl', 'enter'],
    ""quick_language_list"": ['win', 'space'],
    ""open_system_control_panel"": ['win', 'pause'],
    ""start_task_manager"": ['ctrl', 'shift', 'esc'],
    ""start_on_screen_keyboard"": ['ctrl', 'win', 'o'],
    ""open_office_application_w"": ['ctrl', 'shift', 'alt', 'win', 'w'],
    ""open_office_application_p"": ['ctrl', 'shift', 'alt', 'win', 'p'],
    ""open_office_application_x"": ['ctrl', 'shift', 'alt', 'win', 'x'],
    ""open_office_application_o"": ['ctrl', 'shift', 'alt', 'win', 'o'],
    ""open_office_application_t"": ['ctrl', 'shift', 'alt', 'win', 't'],
    ""open_office_application_d"": ['ctrl', 'shift', 'alt', 'win', 'd'],
    ""open_office_application_n"": ['ctrl', 'shift', 'alt', 'win', 'n'],
    ""open_office_application_l"": ['ctrl', 'shift', 'alt', 'win', 'l'],
    ""open_office_application_y"": ['ctrl', 'shift', 'alt', 'win', 'y'],
    ""open_calculator"": ['win', 'r', 'c', 'a', 'l', 'c', 'enter']
}
    
"""""" :: Function definitions for shortcuts :: """"""

def open_start_menu():
    """"""
    Opens the Start Menu.
    """"""
    pyautogui.hotkey('win')

def open_secret_start_menu():
    """"""
    Opens the secret Start Menu.
    """"""
    pyautogui.hotkey('win', 'x')

def cycle_through_taskbar():
    """"""
    Cycles through the items on the taskbar.
    """"""
    pyautogui.hotkey('win', 't')

def go_to_nth_application():
    """"""
    Goes to the nth application on the taskbar.
    """"""
    n = input(""Enter application number (1-9): "")
    pyautogui.hotkey('win', n)

def show_all_running_applications():
    """"""
    Shows all running applications using Task View.
    """"""
    pyautogui.hotkey('win', 'tab')

def show_hide_desktop():
    """"""
    Shows or hides the desktop.
    """"""
    pyautogui.hotkey('win', 'd')

def minimize_all_windows():
    """"""
    Minimizes all open windows.
    """"""
    pyautogui.hotkey('ctrl', 'm')

def temporary_show_desktop():
    """"""
    Temporarily shows the desktop.
    """"""
    pyautogui.hotkey('win', ',')

def magnify_screen_content():
    """"""
    Magnifies the content on the screen.
    """"""
    pyautogui.hotkey('win', 'plus')

def maximize_window():
    """"""
    Maximizes the current window.
    """"""
    pyautogui.hotkey('win', 'up')

def maximize_window_vertically():
    """"""
    Maximizes the height of the current window.
    """"""
    pyautogui.hotkey('win', 'shift', 'up')

def move_window_to_left_monitor():
    """"""
    Moves the current window to the left monitor.
    """"""
    active_window = gw.getActiveWindow()
    if active_window:
        active_window.moveTo(0, active_window.top)
    
def move_window_to_right_monitor():
    """"""
    Moves the current window to the right monitor.
    """"""
    active_window = gw.getActiveWindow()
    if active_window:
        screen_width, _ = pyautogui.size()
        window_width, _ = active_window.size
        new_left_position = min(screen_width - window_width, active_window.left + screen_width)
        active_window.move(new_left_position, active_window.top)

def take_rectangular_screenshot():
    """"""
    Takes a rectangular screenshot.
    """"""
    pyautogui.hotkey('win', 'shift', 's')

def take_full_screenshot():
    """"""
    Takes a full screenshot.
    """"""
    pyautogui.hotkey('win', 'printscreen')

def create_new_virtual_desktop():
    """"""
    Creates a new virtual desktop.
    """"""
    pyautogui.hotkey('win', 'ctrl', 'd')

def move_between_virtual_desktops(direction):
    """"""
    Moves between virtual desktops.

    Args:
        direction (str): The direction to move between desktops. Can be 'left' or 'right'.
    """"""
    pyautogui.hotkey('win', 'ctrl', direction)

def close_current_virtual_desktop():
    """"""
    Closes the current virtual desktop.
    """"""
    pyautogui.hotkey('win', 'ctrl', 'f4')

def open_action_center():
    """"""
    Opens the Action Center.
    """"""
    pyautogui.hotkey('win', 'a')

def open_search():
    """"""
    Opens the search menu.
    """"""
    pyautogui.hotkey('win', 's')

def open_new_edge_tab():
    """"""
    Opens a new tab in Microsoft Edge.
    """"""
    pyautogui.hotkey('win', 'c')

def open_windows_settings():
    """"""
    Opens the Windows Settings.
    """"""
    pyautogui.hotkey('win', 'i')

def connect_sidebar():
    """"""
    Connects the sidebar.
    """"""
    pyautogui.hotkey('win', 'k')

def use_voice_typing():
    """"""
    Starts voice typing.
    """"""
    pyautogui.hotkey('win', 'h')

def lock_computer():
    """"""
    Locks the computer.
    """"""
    pyautogui.hotkey('win', 'l')

def lock_screen_orientation():
    """"""
    Locks the screen orientation.
    """"""
    pyautogui.hotkey('win', 'o')

def open_presentation_sidebar():
    """"""
    Opens the presentation sidebar.
    """"""
    pyautogui.hotkey('win', 'p')

def open_ease_of_access_center():
    """"""
    Opens the Ease of Access Center.
    """"""
    pyautogui.hotkey('win', 'u')

def select_from_clipboard_history():
    """"""
    Selects from the clipboard history.
    """"""
    pyautogui.hotkey('win', 'v')

def set_focus_to_notification_area():
    """"""
    Sets focus to the notification area.
    """"""
    pyautogui.hotkey('win', 'b')

def open_emoji_panel():
    """"""
    Opens the emoji panel.
    """"""
    pyautogui.hotkey('win', '.')

def start_stop_narrator():
    """"""
    Starts or stops the narrator.
    """"""
    pyautogui.hotkey('win', 'ctrl', 'enter')

def quick_language_list():
    """"""
    Opens the quick language list.
    """"""
    pyautogui.hotkey('win', 'space')

def open_system_control_panel():
    """"""
    Opens the system control panel.
    """"""
    pyautogui.hotkey('win', 'pause')

def start_task_manager():
    """"""
    Starts the Task Manager.
    """"""
    pyautogui.hotkey('ctrl', 'shift', 'esc')

def start_on_screen_keyboard():
    """"""
    Starts the on-screen keyboard.
    """"""
    pyautogui.hotkey('ctrl', 'win', 'o')

def open_calculator():
    """"""
    Opens the Windows Calculator.
    """"""
    pyautogui.hotkey('win', 'r')
    pyautogui.typewrite('calc')
    pyautogui.press('enter')
    
def open_office_application(app):
    """"""
    Opens an Office application.

    Args:
        app (str): The abbreviation of the Office application to open.
            'w' for Word
            'p' for PowerPoint
            'x' for Excel
            'o' for Outlook
            't' for Teams
            'd' for OneDrive
            'n' for OneNote
            'l' for LinkedIn
            'y' for Yammer
    """"""
    pyautogui.hotkey('ctrl', 'shift', 'alt', 'win', app)
    
def load_hotkeys():
    """"""
    Load the hotkey configuration from the 'hotkeys.json' file.

    Returns:
        dict: A dictionary containing the loaded hotkey configuration.
    """"""
    try:
        with open(""hotkeys.json"", ""r"") as file:
            hotkeys = json.load(file)
    except FileNotFoundError:
        hotkeys = {""known"": PREDEFINED_HOTKEYS, ""custom"": {}}
    return hotkeys

def save_hotkeys(hotkeys):
    """"""
    Save the hotkey configuration to the 'hotkeys.json' file.

    Args:
        hotkeys (dict): A dictionary containing the hotkey configuration to be saved.
    """"""
    with open(""hotkeys.json"", ""w"") as file:
        json.dump(hotkeys, file, indent=4)

def get_hotkey_input():
    """"""
    Get input for a custom hotkey sequence from the user.

    Returns:
        list: A list representing the custom hotkey sequence.
    """"""
    print(""Press your custom hotkey sequence. Press 'Esc' to finish input."")
    hotkey = []
    modifiers = set()  # Track pressed modifier keys
    while True:
        key = keyboard.read_event(suppress=True)
        if key.event_type == ""down"":
            if key.name == ""esc"":
                break
            elif key.name in [""shift"", ""ctrl"", ""alt"", ""win""]:
                modifiers.add(key.name)
            else:
                hotkey.append(""+"".join(modifiers))
                hotkey.append(key.name)
                modifiers.clear()
                print(""Current input:"", ""+"".join(hotkey))
    return hotkey

def create_custom_hotkey():
    """"""
    Create a custom hotkey and save it to the hotkey configuration.
    """"""
    hotkeys = load_hotkeys()
    hotkey = get_hotkey_input()
    hotkey_str = ""+"".join(hotkey)
    print(""Your input:"", hotkey_str)
    if hotkey_str in hotkeys[""known""]:
        print(f""The hotkey '{hotkey_str}' already exists for {hotkeys['known'][hotkey_str]}."")
        print(""Do you want to overwrite it or go back? (1 to Overwrite, 0 to Go Back)"")
        choice = input().strip()
        if choice == '0':
            return
    elif hotkey_str in hotkeys[""custom""]:
        print(f""The hotkey '{hotkey_str}' already exists for {hotkeys['custom'][hotkey_str]}."")
        print(""Do you want to overwrite it or go back? (1 to Overwrite, 0 to Go Back)"")
        choice = input().strip()
        if choice == '0':
            return
    select_program()  # Open file explorer
    program_path = input(""Enter the program path or select the program file: "").strip()
    hotkeys[""custom""][hotkey_str] = program_path
    save_hotkeys(hotkeys)

# Dictionary mapping shortcut numbers to functions
shortcut_groups = {
    ""General Shortcuts"": {
        ""1"": open_start_menu,
        ""2"": open_secret_start_menu,
        ""3"": cycle_through_taskbar,
        ""4"": go_to_nth_application,
        ""5"": show_all_running_applications,
        ""6"": show_hide_desktop,
        ""7"": minimize_all_windows,
        ""8"": temporary_show_desktop,
        ""9"": magnify_screen_content,
        ""10"": maximize_window,
        ""11"": maximize_window_vertically,
        ""12"": move_window_to_left_monitor,
        ""13"": move_window_to_right_monitor,
        ""14"": take_rectangular_screenshot,
        ""15"": take_full_screenshot,
        ""16"": open_calculator
    },
    ""Virtual Desktop Shortcuts"": {
        ""17"": create_new_virtual_desktop,
        ""18"": lambda: move_between_virtual_desktops(""left""),
        ""19"": lambda: move_between_virtual_desktops(""right""),
        ""20"": close_current_virtual_desktop
    },
    ""System Shortcuts"": {
        ""21"": open_action_center,
        ""22"": open_search,
        ""23"": open_new_edge_tab,
        ""24"": open_windows_settings,
        ""25"": connect_sidebar,
        ""26"": use_voice_typing,
        ""27"": lock_computer,
        ""28"": lock_screen_orientation
    },
    ""Accessibility Shortcuts"": {
        ""29"": open_presentation_sidebar,
        ""30"": open_ease_of_access_center,
        ""31"": select_from_clipboard_history,
        ""32"": set_focus_to_notification_area,
        ""33"": open_emoji_panel,
        ""34"": start_stop_narrator,
        ""35"": quick_language_list,
        ""36"": open_system_control_panel,
        ""37"": start_task_manager,
        ""38"": start_on_screen_keyboard
    },
    ""Office Application Shortcuts"": {
        ""39"": lambda: open_office_application(""w""),  # Word
        ""40"": lambda: open_office_application(""p""),  # PowerPoint
        ""41"": lambda: open_office_application(""x""),  # Excel
        ""42"": lambda: open_office_application(""o""),  # Outlook
        ""43"": lambda: open_office_application(""t""),  # Teams
        ""44"": lambda: open_office_application(""d""),  # OneDrive
        ""45"": lambda: open_office_application(""n""),  # OneNote
        ""46"": lambda: open_office_application(""l""),  # LinkedIn
        ""47"": lambda: open_office_application(""y"")   # Yammer
    },
    ""Create Custom Hotkey"": {  # ""Create Custom Hotkey"" Group
        ""48"": create_custom_hotkey
    }
}

# Descriptive names for office application functions
descriptive_names = {
    ""17"": ""Move Left (Virtual Desktop)"",    # Moves to the virtual desktop to the Left
    ""18"": ""Move Right (Virtual Desktop)"",   # Moves to the virtual desktop to the Right
    ""38"": ""Open Word"",
    ""39"": ""Open PowerPoint"",
    ""40"": ""Open Excel"",
    ""41"": ""Open Outlook"",
    ""42"": ""Open Teams"",
    ""43"": ""Open OneDrive"",
    ""44"": ""Open OneNote"",
    ""45"": ""Open LinkedIn"",
    ""46"": ""Open Yammer""
}

# Main function to execute shortcuts
def main():
    while True:
        print(""\nHotkey Main Menu:\n"")
        for index, group in enumerate(shortcut_groups.keys(), start=1):
            print(f""{index:2}: {group}"")
        print("" 0: Exit"")

        choice = input(""\nEnter the number of the group you want to explore: "")
        if choice == '0':
            print(""\nExiting Program...\tGoodBye!\n"")  # Added exit message
            break
        elif choice.isdigit() and int(choice) in range(1, len(shortcut_groups) + 1):
            group_index = int(choice) - 1
            selected_group = list(shortcut_groups.keys())[group_index]
            selected_shortcuts = shortcut_groups[selected_group]

            print(f""\n{selected_group} Options:\n"")
            for index, (key, value) in enumerate(selected_shortcuts.items(), start=1):
                if key in descriptive_names:  # Check if the key has a descriptive name (Not Lambda)
                    name = descriptive_names[key]
                else:
                    if callable(value):  # Check if it's a function or lambda
                        if hasattr(value, '__name__'):  # For regular functions
                            name = value.__name__.replace('_', ' ')
                        else:  # For lambda functions
                            name = ""Custom Function""
                    else:
                        name = value.__class__.__name__  # Get class name for non-function values
                print(f""{index:2}: {name}"")

            while True:
                sub_choice = input(""\nEnter the number of the shortcut you want to execute (0 to go back): "")
                if sub_choice == '0':
                    break
                elif sub_choice.isdigit() and int(sub_choice) in range(1, len(selected_shortcuts) + 1):
                    selected_index = int(sub_choice) - 1
                    selected_key = list(selected_shortcuts.keys())[selected_index]
                    selected_shortcut = selected_shortcuts[selected_key]
                    if callable(selected_shortcut):
                        try:
                            selected_shortcut()
                        except Exception as e:
                            print(f""An error occurred: {e}"")
                    else:
                        print(""Invalid choice. Please enter a valid number"")
                else:
                    print(""Invalid choice. Please enter a valid number"")
        else:
            print(""Invalid choice. Please enter a valid number"")

if __name__ == ""__main__"":
    main()
    create_custom_hotkey()
"
HKXSUqhU,Untitled,999ms,C++,Tuesday 21st of May 2024 05:48:54 PM CDT,"#pragma GCC optimize(""Ofast"")

#include <bits/stdc++.h>
#define all(x) begin(x), end(x)

using namespace std;
using int64 = int64_t;
using uint64 = uint64_t;

#ifdef ONLINE_JUDGE
const bool isFileInput = true;
const string commonFileName = ""m3"";
#else
const bool isFileInput = true;
const string commonFileName = """";
#endif

const bool tests = false;

// const int mod = (1 << 30) + 1;
// const int N = 17;
// int dp[1 << N][303];

// void Process(int n, int m, ostream& out) {
//     if (n == 1) {
//         int64 ans = 1;
//         for (int i = 0; i < m; i++) {
//             ans = (ans + ans) % mod;
//         }
//         out << ans;
//         return;
//     }

//     for (int i = 0; i < (1 << n); i++) {
//         dp[i][0] = 1;
//     }

//     for (int i = 1; i < m; i++) {
//         for (int prevMask = 0; prevMask < (1 << n); prevMask++) {
//             for (int curMask = 0; curMask < (1 << n); curMask++) {
//                 bool bad = false;
//                 for (int bit = 0; !bad && bit + 1 < n; bit++) {
//                     int curMaskValue = (curMask >> bit) & 3;
//                     int prevMaskValue = (prevMask >> bit) & 3;
//                     if (curMaskValue == prevMaskValue && (prevMaskValue == 0 || prevMaskValue == 3)) {
//                         bad = true;
//                     }
//                 }
//                 if (!bad) {
//                     dp[curMask][i] = (dp[curMask][i] + dp[prevMask][i - 1]) % mod;
//                 }
//             }
//         }
//     }

//     int64 ans = 0;
//     for (int mask = 0; mask < (1 << n); mask++) {
//         ans = (ans + dp[mask][m - 1]) % mod;
//     }

//     out << ans;
// }

map<pair<int, int>, int> mp;

void Solve(istream& in, ostream& out) {
    int n, m;
    in >> n >> m;
    if (n > m) swap(n, m);
    out << mp[{n, m}] << '\n';
    // for (int prod = 1; prod <= 300; prod++) {
    //     for (int m = 1; m <= prod; m++) {
    //         if (prod % m != 0) continue;
    //         if (prod / m > m) continue;
    //         memset(dp, 0, sizeof(dp));
    //         int n = prod / m;
    //         out << ""mp[{"" << n << "", "" << m << ""}]="";
    //         Process(n, m, out);
    //         out << "";\n"";
    //     }
    //     cout << ""PROD: "" << prod << endl;
    // }
}

void Precalc() {
    mp[{1, 1}] = 2;
    mp[{1, 2}] = 4;
    mp[{1, 3}] = 8;
    mp[{2, 2}] = 14;
    mp[{1, 4}] = 16;
    mp[{1, 5}] = 32;
    mp[{2, 3}] = 50;
    mp[{1, 6}] = 64;
    mp[{1, 7}] = 128;
    mp[{2, 4}] = 178;
    mp[{1, 8}] = 256;
    mp[{3, 3}] = 322;
    mp[{1, 9}] = 512;
    mp[{2, 5}] = 634;
    mp[{1, 10}] = 1024;
    mp[{1, 11}] = 2048;
    mp[{3, 4}] = 2066;
    mp[{2, 6}] = 2258;
    mp[{1, 12}] = 4096;
    mp[{1, 13}] = 8192;
    mp[{2, 7}] = 8042;
    mp[{1, 14}] = 16384;
    mp[{3, 5}] = 13262;
    mp[{1, 15}] = 32768;
    mp[{4, 4}] = 23858;
    mp[{2, 8}] = 28642;
    mp[{1, 16}] = 65536;
    mp[{1, 17}] = 131072;
    mp[{3, 6}] = 85126;
    mp[{2, 9}] = 102010;
    mp[{1, 18}] = 262144;
    mp[{1, 19}] = 524288;
    mp[{4, 5}] = 275690;
    mp[{2, 10}] = 363314;
    mp[{1, 20}] = 1048576;
    mp[{3, 7}] = 546410;
    mp[{1, 21}] = 2097152;
    mp[{2, 11}] = 1293962;
    mp[{1, 22}] = 4194304;
    mp[{1, 23}] = 8388608;
    mp[{4, 6}] = 3185462;
    mp[{3, 8}] = 3507314;
    mp[{2, 12}] = 4608514;
    mp[{1, 24}] = 16777216;
    mp[{5, 5}] = 5735478;
    mp[{1, 25}] = 33554432;
    mp[{2, 13}] = 16413466;
    mp[{1, 26}] = 67108864;
    mp[{3, 9}] = 22512862;
    mp[{1, 27}] = 134217728;
    mp[{4, 7}] = 36806846;
    mp[{2, 14}] = 58457426;
    mp[{1, 28}] = 268435456;
    mp[{1, 29}] = 536870912;
    mp[{5, 6}] = 119310334;
    mp[{3, 10}] = 144506294;
    mp[{2, 15}] = 208199210;
    mp[{1, 30}] = 1073741824;
    mp[{1, 31}] = 1073741823;
    mp[{4, 8}] = 425288998;
    mp[{2, 16}] = 741512482;
    mp[{1, 32}] = 1073741821;
    mp[{3, 11}] = 927561722;
    mp[{1, 33}] = 1073741817;
    mp[{2, 17}] = 493452216;
    mp[{1, 34}] = 1073741809;
    mp[{5, 7}] = 334458704;
    mp[{1, 35}] = 1073741793;
    mp[{6, 6}] = 173285114;
    mp[{4, 9}] = 619085062;
    mp[{3, 12}] = 585154365;
    mp[{2, 18}] = 815897962;
    mp[{1, 36}] = 1073741761;
    mp[{1, 37}] = 1073741697;
    mp[{2, 19}] = 213372843;
    mp[{1, 38}] = 1073741569;
    mp[{3, 13}] = 635889643;
    mp[{1, 39}] = 1073741313;
    mp[{5, 8}] = 90695590;
    mp[{4, 10}] = 945426574;
    mp[{2, 20}] = 124430803;
    mp[{1, 40}] = 1073740801;
    mp[{1, 41}] = 1073739777;
    mp[{6, 7}] = 911351667;
    mp[{3, 14}] = 494452034;
    mp[{2, 21}] = 800038095;
    mp[{1, 42}] = 1073737729;
    mp[{1, 43}] = 1073733633;
    mp[{4, 11}] = 15016263;
    mp[{2, 22}] = 501492241;
    mp[{1, 44}] = 1073725441;
    mp[{5, 9}] = 291476458;
    mp[{3, 15}] = 482846928;
    mp[{1, 45}] = 1073709057;
    mp[{2, 23}] = 957069263;
    mp[{1, 46}] = 1073676289;
    mp[{1, 47}] = 1073610753;
    mp[{6, 8}] = 763177734;
    mp[{4, 12}] = 36143586;
    mp[{3, 16}] = 961174734;
    mp[{2, 24}] = 652966796;
    mp[{1, 48}] = 1073479681;
    mp[{7, 7}] = 35393966;
    mp[{1, 49}] = 1073217537;
    mp[{5, 10}] = 30793562;
    mp[{2, 25}] = 651813439;
    mp[{1, 50}] = 1072693249;
    mp[{3, 17}] = 857975995;
    mp[{1, 51}] = 1071644673;
    mp[{4, 13}] = 1071043415;
    mp[{2, 26}] = 40148434;
    mp[{1, 52}] = 1069547521;
    mp[{1, 53}] = 1065353217;
    mp[{6, 9}] = 436304595;
    mp[{3, 18}] = 623235366;
    mp[{2, 27}] = 350330355;
    mp[{1, 54}] = 1056964609;
    mp[{5, 11}] = 597448518;
    mp[{1, 55}] = 1040187393;
    mp[{7, 8}] = 167701464;
    mp[{4, 14}] = 592749523;
    mp[{2, 28}] = 57546108;
    mp[{1, 56}] = 1006632961;
    mp[{3, 19}] = 96023413;
    mp[{1, 57}] = 939524097;
    mp[{2, 29}] = 873299034;
    mp[{1, 58}] = 805306369;
    mp[{1, 59}] = 536870913;
    mp[{6, 10}] = 722829720;
    mp[{5, 12}] = 357727711;
    mp[{4, 15}] = 416276351;
    mp[{3, 20}] = 729894586;
    mp[{2, 30}] = 587505668;
    mp[{1, 60}] = 1;
    mp[{1, 61}] = 2;
    mp[{2, 31}] = 287889597;
    mp[{1, 62}] = 4;
    mp[{7, 9}] = 345325525;
    mp[{3, 21}] = 199741548;
    mp[{1, 63}] = 8;
    mp[{8, 8}] = 200727159;
    mp[{4, 16}] = 77857554;
    mp[{2, 32}] = 964938302;
    mp[{1, 64}] = 16;
    mp[{5, 13}] = 1030160836;
    mp[{1, 65}] = 32;
    mp[{6, 11}] = 711976380;
    mp[{3, 22}] = 1048602570;
    mp[{2, 33}] = 249368625;
    mp[{1, 66}] = 64;
    mp[{1, 67}] = 128;
    mp[{4, 17}] = 247689040;
    mp[{2, 34}] = 530498829;
    mp[{1, 68}] = 256;
    mp[{3, 23}] = 62341767;
    mp[{1, 69}] = 512;
    mp[{7, 10}] = 694557454;
    mp[{5, 14}] = 792068774;
    mp[{2, 35}] = 1016491912;
    mp[{1, 70}] = 1024;
    mp[{1, 71}] = 2048;
    mp[{8, 9}] = 586545036;
    mp[{6, 12}] = 968691054;
    mp[{4, 18}] = 36743464;
    mp[{3, 24}] = 972891566;
    mp[{2, 36}] = 889247919;
    mp[{1, 72}] = 4096;
    mp[{1, 73}] = 8192;
    mp[{2, 37}] = 405760281;
    mp[{1, 74}] = 16384;
    mp[{5, 15}] = 974465539;
    mp[{3, 25}] = 705944082;
    mp[{1, 75}] = 32768;
    mp[{4, 19}] = 234879760;
    mp[{2, 38}] = 848293031;
    mp[{1, 76}] = 65536;
    mp[{7, 11}] = 874948463;
    mp[{1, 77}] = 131072;
    mp[{6, 13}] = 571536179;
    mp[{3, 26}] = 587204706;
    mp[{2, 39}] = 135174180;
    mp[{1, 78}] = 262144;
    mp[{1, 79}] = 524288;
    mp[{8, 10}] = 1013558899;
    mp[{5, 16}] = 506272358;
    mp[{4, 20}] = 1024164878;
    mp[{2, 40}] = 1028366777;
    mp[{1, 80}] = 1048576;
    mp[{9, 9}] = 10014095;
    mp[{3, 27}] = 474051875;
    mp[{1, 81}] = 2097152;
    mp[{2, 41}] = 134223216;
    mp[{1, 82}] = 4194304;
    mp[{1, 83}] = 8388608;
    mp[{7, 12}] = 156109328;
    mp[{6, 14}] = 15182188;
    mp[{4, 21}] = 917369518;
    mp[{3, 28}] = 1046553554;
    mp[{2, 42}] = 311919552;
    mp[{1, 84}] = 16777216;
    mp[{5, 17}] = 643769299;
    mp[{1, 85}] = 33554432;
    mp[{2, 43}] = 130463263;
    mp[{1, 86}] = 67108864;
    mp[{3, 29}] = 84616587;
    mp[{1, 87}] = 134217728;
    mp[{8, 11}] = 803926546;
    mp[{4, 22}] = 907664205;
    mp[{2, 44}] = 1015228893;
    mp[{1, 88}] = 268435456;
    mp[{1, 89}] = 536870912;
    mp[{9, 10}] = 439395703;
    mp[{6, 15}] = 615611552;
    mp[{5, 18}] = 184304064;
    mp[{3, 30}] = 551772784;
    mp[{2, 45}] = 85387730;
    mp[{1, 90}] = 1073741824;
    mp[{7, 13}] = 560619160;
    mp[{1, 91}] = 1073741823;
    mp[{4, 23}] = 237866709;
    mp[{2, 46}] = 139137326;
    mp[{1, 92}] = 1073741821;
    mp[{3, 31}] = 397637532;
    mp[{1, 93}] = 1073741817;
    mp[{2, 47}] = 588187438;
    mp[{1, 94}] = 1073741809;
    mp[{5, 19}] = 612802952;
    mp[{1, 95}] = 1073741793;
    mp[{8, 12}] = 1027876269;
    mp[{6, 16}] = 227606139;
    mp[{4, 24}] = 338570502;
    mp[{3, 32}] = 650684895;
    mp[{2, 48}] = 969095141;
    mp[{1, 96}] = 1073741761;
    mp[{1, 97}] = 1073741697;
    mp[{7, 14}] = 422279141;
    mp[{2, 49}] = 862434824;
    mp[{1, 98}] = 1073741569;
    mp[{9, 11}] = 929525011;
    mp[{3, 33}] = 772250923;
    mp[{1, 99}] = 1073741313;
    mp[{10, 10}] = 146439608;
    mp[{5, 20}] = 149271250;
    mp[{4, 25}] = 892837304;
    mp[{2, 50}] = 230527454;
    mp[{1, 100}] = 1073740801;
    mp[{1, 101}] = 1073739777;
    mp[{6, 17}] = 60887377;
    mp[{3, 34}] = 421576034;
    mp[{2, 51}] = 268968360;
    mp[{1, 102}] = 1073737729;
    mp[{1, 103}] = 1073733633;
    mp[{8, 13}] = 96958732;
    mp[{4, 26}] = 477288610;
    mp[{2, 52}] = 194218163;
    mp[{1, 104}] = 1073725441;
    mp[{7, 15}] = 61050175;
    mp[{5, 21}] = 65198375;
    mp[{3, 35}] = 323613708;
    mp[{1, 105}] = 1073709057;
    mp[{2, 53}] = 46849384;
    mp[{1, 106}] = 1073676289;
    mp[{1, 107}] = 1073610753;
    mp[{9, 12}] = 640371992;
    mp[{6, 18}] = 1026376991;
    mp[{4, 27}] = 612578458;
    mp[{3, 36}] = 588166679;
    mp[{2, 54}] = 528984478;
    mp[{1, 108}] = 1073479681;
    mp[{1, 109}] = 1073217537;
    mp[{10, 11}] = 306237849;
    mp[{5, 22}] = 575610907;
    mp[{2, 55}] = 606910377;
    mp[{1, 110}] = 1072693249;
    mp[{3, 37}] = 435463655;
    mp[{1, 111}] = 1071644673;
    mp[{8, 14}] = 1009866334;
    mp[{7, 16}] = 638213111;
    mp[{4, 28}] = 478952083;
    mp[{2, 56}] = 731216437;
    mp[{1, 112}] = 1069547521;
    mp[{1, 113}] = 1065353217;
    mp[{6, 19}] = 775960409;
    mp[{3, 38}] = 508829076;
    mp[{2, 57}] = 186244590;
    mp[{1, 114}] = 1056964609;
    mp[{5, 23}] = 462134723;
    mp[{1, 115}] = 1040187393;
    mp[{4, 29}] = 121343276;
    mp[{2, 58}] = 947424819;
    mp[{1, 116}] = 1006632961;
    mp[{9, 13}] = 363900865;
    mp[{3, 39}] = 1035548413;
    mp[{1, 117}] = 939524097;
    mp[{2, 59}] = 1067279987;
    mp[{1, 118}] = 805306369;
    mp[{7, 17}] = 207105166;
    mp[{1, 119}] = 536870913;
    mp[{10, 12}] = 782520195;
    mp[{8, 15}] = 182299396;
    mp[{6, 20}] = 554561239;
    mp[{5, 24}] = 228866416;
    mp[{4, 30}] = 416043359;
    mp[{3, 40}] = 426399446;
    mp[{2, 60}] = 801722299;
    mp[{1, 120}] = 1;
    mp[{11, 11}] = 17440752;
    mp[{1, 121}] = 2;
    mp[{2, 61}] = 244759571;
    mp[{1, 122}] = 4;
    mp[{3, 41}] = 352416463;
    mp[{1, 123}] = 8;
    mp[{4, 31}] = 223871532;
    mp[{2, 62}] = 190239661;
    mp[{1, 124}] = 16;
    mp[{5, 25}] = 424248130;
    mp[{1, 125}] = 32;
    mp[{9, 14}] = 432021937;
    mp[{7, 18}] = 546233450;
    mp[{6, 21}] = 443333477;
    mp[{3, 42}] = 248858465;
    mp[{2, 63}] = 1060238125;
    mp[{1, 126}] = 64;
    mp[{1, 127}] = 128;
    mp[{8, 16}] = 619751064;
    mp[{4, 32}] = 690922528;
    mp[{2, 64}] = 339968222;
    mp[{1, 128}] = 256;
    mp[{3, 43}] = 623859462;
    mp[{1, 129}] = 512;
    mp[{10, 13}] = 604639267;
    mp[{5, 26}] = 39121375;
    mp[{2, 65}] = 992897266;
    mp[{1, 130}] = 1024;
    mp[{1, 131}] = 2048;
    mp[{11, 12}] = 974217644;
    mp[{6, 22}] = 907908302;
    mp[{4, 33}] = 693580115;
    mp[{3, 44}] = 563673766;
    mp[{2, 66}] = 437402767;
    mp[{1, 132}] = 4096;
    mp[{7, 19}] = 811929821;
    mp[{1, 133}] = 8192;
    mp[{2, 67}] = 76777358;
    mp[{1, 134}] = 16384;
    mp[{9, 15}] = 452562196;
    mp[{5, 27}] = 520802929;
    mp[{3, 45}] = 460936752;
    mp[{1, 135}] = 32768;
    mp[{8, 17}] = 691792110;
    mp[{4, 34}] = 247427676;
    mp[{2, 68}] = 31395783;
    mp[{1, 136}] = 65536;
    mp[{1, 137}] = 131072;
    mp[{6, 23}] = 479212655;
    mp[{3, 46}] = 1061439236;
    mp[{2, 69}] = 247742065;
    mp[{1, 138}] = 262144;
    mp[{1, 139}] = 524288;
    mp[{10, 14}] = 26783586;
    mp[{7, 20}] = 144368674;
    mp[{5, 28}] = 7662178;
    mp[{4, 35}] = 596190534;
    mp[{2, 70}] = 806017761;
    mp[{1, 140}] = 1048576;
    mp[{3, 47}] = 181647190;
    mp[{1, 141}] = 2097152;
    mp[{2, 71}] = 766053763;
    mp[{1, 142}] = 4194304;
    mp[{11, 13}] = 525573653;
    mp[{1, 143}] = 8388608;
    mp[{12, 12}] = 610837507;
    mp[{9, 16}] = 560349578;
    mp[{8, 18}] = 529044610;
    mp[{6, 24}] = 570000010;
    mp[{4, 36}] = 1030893011;
    mp[{3, 48}] = 131101869;
    mp[{2, 72}] = 688971336;
    mp[{1, 144}] = 16777216;
    mp[{5, 29}] = 43113906;
    mp[{1, 145}] = 33554432;
    mp[{2, 73}] = 377796059;
    mp[{1, 146}] = 67108864;
    mp[{7, 21}] = 39619792;
    mp[{3, 49}] = 282416137;
    mp[{1, 147}] = 134217728;
    mp[{4, 37}] = 682994543;
    mp[{2, 74}] = 363847199;
    mp[{1, 148}] = 268435456;
    mp[{1, 149}] = 536870912;
    mp[{10, 15}] = 683650588;
    mp[{6, 25}] = 116828880;
    mp[{5, 30}] = 671248249;
    mp[{3, 50}] = 650766224;
    mp[{2, 75}] = 773391890;
    mp[{1, 150}] = 1073741824;
    mp[{1, 151}] = 1073741823;
    mp[{8, 19}] = 273414395;
    mp[{4, 38}] = 168713176;
    mp[{2, 76}] = 900386418;
    mp[{1, 152}] = 1073741821;
    mp[{9, 17}] = 367985330;
    mp[{3, 51}] = 194674717;
    mp[{1, 153}] = 1073741817;
    mp[{11, 14}] = 990459439;
    mp[{7, 22}] = 114767483;
    mp[{2, 77}] = 1026717559;
    mp[{1, 154}] = 1073741809;
    mp[{5, 31}] = 698428487;
    mp[{1, 155}] = 1073741793;
    mp[{12, 13}] = 322126045;
    mp[{6, 26}] = 238799464;
    mp[{4, 39}] = 340553102;
    mp[{3, 52}] = 408031050;
    mp[{2, 78}] = 585958213;
    mp[{1, 156}] = 1073741761;
    mp[{1, 157}] = 1073741697;
    mp[{2, 79}] = 590084282;
    mp[{1, 158}] = 1073741569;
    mp[{3, 53}] = 656936178;
    mp[{1, 159}] = 1073741313;
    mp[{10, 16}] = 384011662;
    mp[{8, 20}] = 761429881;
    mp[{5, 32}] = 605930573;
    mp[{4, 40}] = 639381479;
    mp[{2, 80}] = 794685622;
    mp[{1, 160}] = 1073740801;
    mp[{7, 23}] = 272920239;
    mp[{1, 161}] = 1073739777;
    mp[{9, 18}] = 205177423;
    mp[{6, 27}] = 372438335;
    mp[{3, 54}] = 481393484;
    mp[{2, 81}] = 342999955;
    mp[{1, 162}] = 1073737729;
    mp[{1, 163}] = 1073733633;
    mp[{4, 41}] = 640433407;
    mp[{2, 82}] = 470887459;
    mp[{1, 164}] = 1073725441;
    mp[{11, 15}] = 748903144;
    mp[{5, 33}] = 618887114;
    mp[{3, 55}] = 821881863;
    mp[{1, 165}] = 1073709057;
    mp[{2, 83}] = 1024920462;
    mp[{1, 166}] = 1073676289;
    mp[{1, 167}] = 1073610753;
    mp[{12, 14}] = 475346110;
    mp[{8, 21}] = 179940286;
    mp[{7, 24}] = 352288148;
    mp[{6, 28}] = 54930246;
    mp[{4, 42}] = 631749497;
    mp[{3, 56}] = 766631974;
    mp[{2, 84}] = 795310829;
    mp[{1, 168}] = 1073479681;
    mp[{13, 13}] = 756270134;
    mp[{1, 169}] = 1073217537;
    mp[{10, 17}] = 774259418;
    mp[{5, 34}] = 661413937;
    mp[{2, 85}] = 140806111;
    mp[{1, 170}] = 1072693249;
    mp[{9, 19}] = 808714546;
    mp[{3, 57}] = 733941340;
    mp[{1, 171}] = 1071644673;
    mp[{4, 43}] = 53489874;
    mp[{2, 86}] = 939298166;
    mp[{1, 172}] = 1069547521;
    mp[{1, 173}] = 1065353217;
    mp[{6, 29}] = 813509316;
    mp[{3, 58}] = 764812936;
    mp[{2, 87}] = 952023070;
    mp[{1, 174}] = 1056964609;
    mp[{7, 25}] = 550865994;
    mp[{5, 35}] = 346952986;
    mp[{1, 175}] = 1040187393;
    mp[{11, 16}] = 146209688;
    mp[{8, 22}] = 664186020;
    mp[{4, 44}] = 443636779;
    mp[{2, 88}] = 439698242;
    mp[{1, 176}] = 1006632961;
    mp[{3, 59}] = 962470388;
    mp[{1, 177}] = 939524097;
    mp[{2, 89}] = 1915391;
    mp[{1, 178}] = 805306369;
    mp[{1, 179}] = 536870913;
    mp[{12, 15}] = 690179635;
    mp[{10, 18}] = 537331269;
    mp[{9, 20}] = 304896681;
    mp[{6, 30}] = 356006445;
    mp[{5, 36}] = 121598684;
    mp[{4, 45}] = 690053780;
    mp[{3, 60}] = 158927506;
    mp[{2, 90}] = 885142657;
    mp[{1, 180}] = 1;
    mp[{1, 181}] = 2;
    mp[{13, 14}] = 773633906;
    mp[{7, 26}] = 384666604;
    mp[{2, 91}] = 511775103;
    mp[{1, 182}] = 4;
    mp[{3, 61}] = 163866678;
    mp[{1, 183}] = 8;
    mp[{8, 23}] = 82054322;
    mp[{4, 46}] = 820968372;
    mp[{2, 92}] = 84385148;
    mp[{1, 184}] = 16;
    mp[{5, 37}] = 161045905;
    mp[{1, 185}] = 32;
    mp[{6, 31}] = 233929903;
    mp[{3, 62}] = 608783635;
    mp[{2, 93}] = 202963825;
    mp[{1, 186}] = 64;
    mp[{11, 17}] = 771657362;
    mp[{1, 187}] = 128;
    mp[{4, 47}] = 37559342;
    mp[{2, 94}] = 777661771;
    mp[{1, 188}] = 256;
    mp[{9, 21}] = 476140437;
    mp[{7, 27}] = 80158146;
    mp[{3, 63}] = 605221357;
    mp[{1, 189}] = 512;
    mp[{10, 19}] = 204608041;
    mp[{5, 38}] = 719170282;
    mp[{2, 95}] = 591429313;
    mp[{1, 190}] = 1024;
    mp[{1, 191}] = 2048;
    mp[{12, 16}] = 344242715;
    mp[{8, 24}] = 566986614;
    mp[{6, 32}] = 716092800;
    mp[{4, 48}] = 160065352;
    mp[{3, 64}] = 834978391;
    mp[{2, 96}] = 108386006;
    mp[{1, 192}] = 4096;
    mp[{1, 193}] = 8192;
    mp[{2, 97}] = 434274819;
    mp[{1, 194}] = 16384;
    mp[{13, 15}] = 415753406;
    mp[{5, 39}] = 625048610;
    mp[{3, 65}] = 239258022;
    mp[{1, 195}] = 32768;
    mp[{14, 14}] = 472559199;
    mp[{7, 28}] = 570069903;
    mp[{4, 49}] = 171240130;
    mp[{2, 98}] = 445854644;
    mp[{1, 196}] = 65536;
    mp[{1, 197}] = 131072;
    mp[{11, 18}] = 959441172;
    mp[{9, 22}] = 954803232;
    mp[{6, 33}] = 49208126;
    mp[{3, 66}] = 582556941;
    mp[{2, 99}] = 58629920;
    mp[{1, 198}] = 262144;
    mp[{1, 199}] = 524288;
    mp[{10, 20}] = 1033545328;
    mp[{8, 25}] = 416657370;
    mp[{5, 40}] = 489256484;
    mp[{4, 50}] = 48726788;
    mp[{2, 100}] = 1067599048;
    mp[{1, 200}] = 1048576;
    mp[{3, 67}] = 395675280;
    mp[{1, 201}] = 2097152;
    mp[{2, 101}] = 98831509;
    mp[{1, 202}] = 4194304;
    mp[{7, 29}] = 985682940;
    mp[{1, 203}] = 8388608;
    mp[{12, 17}] = 215929455;
    mp[{6, 34}] = 248911636;
    mp[{4, 51}] = 622955679;
    mp[{3, 68}] = 421980984;
    mp[{2, 102}] = 284208973;
    mp[{1, 204}] = 16777216;
    mp[{5, 41}] = 113674485;
    mp[{1, 205}] = 33554432;
    mp[{2, 103}] = 1050289937;
    mp[{1, 206}] = 67108864;
    mp[{9, 23}] = 50742054;
    mp[{3, 69}] = 406314212;
    mp[{1, 207}] = 134217728;
    mp[{13, 16}] = 422241885;
    mp[{8, 26}] = 86200118;
    mp[{4, 52}] = 180305821;
    mp[{2, 104}] = 498062282;
    mp[{1, 208}] = 268435456;
    mp[{11, 19}] = 406003627;
    mp[{1, 209}] = 536870912;
    mp[{14, 15}] = 634665169;
    mp[{10, 21}] = 927515784;
    mp[{7, 30}] = 865203291;
    mp[{6, 35}] = 307872842;
    mp[{5, 42}] = 18263821;
    mp[{3, 70}] = 764994014;
    mp[{2, 105}] = 373541245;
    mp[{1, 210}] = 1073741824;
    mp[{1, 211}] = 1073741823;
    mp[{4, 53}] = 792293558;
    mp[{2, 106}] = 1043006474;
    mp[{1, 212}] = 1073741821;
    mp[{3, 71}] = 669977452;
    mp[{1, 213}] = 1073741817;
    mp[{2, 107}] = 654876437;
    mp[{1, 214}] = 1073741809;
    mp[{5, 43}] = 416460804;
    mp[{1, 215}] = 1073741793;
    mp[{12, 18}] = 52411008;
    mp[{9, 24}] = 647963480;
    mp[{8, 27}] = 794597561;
    mp[{6, 36}] = 189176078;
    mp[{4, 54}] = 502583791;
    mp[{3, 72}] = 133509205;
    mp[{2, 108}] = 829416784;
    mp[{1, 216}] = 1073741761;
    mp[{7, 31}] = 85857128;
    mp[{1, 217}] = 1073741697;
    mp[{2, 109}] = 576777751;
    mp[{1, 218}] = 1073741569;
    mp[{3, 73}] = 207257733;
    mp[{1, 219}] = 1073741313;
    mp[{11, 20}] = 362547759;
    mp[{10, 22}] = 915035514;
    mp[{5, 44}] = 584606047;
    mp[{4, 55}] = 933914413;
    mp[{2, 110}] = 167941346;
    mp[{1, 220}] = 1073740801;
    mp[{13, 17}] = 575898004;
    mp[{1, 221}] = 1073739777;
    mp[{6, 37}] = 858131404;
    mp[{3, 74}] = 304119109;
    mp[{2, 111}] = 583637715;
    mp[{1, 222}] = 1073737729;
    mp[{1, 223}] = 1073733633;
    mp[{14, 16}] = 251807369;
    mp[{8, 28}] = 748856911;
    mp[{7, 32}] = 592409859;
    mp[{4, 56}] = 179642384;
    mp[{2, 112}] = 1013054012;
    mp[{1, 224}] = 1073725441;
    mp[{15, 15}] = 375125158;
    mp[{9, 25}] = 262614440;
    mp[{5, 45}] = 179752388;
    mp[{3, 75}] = 31985793;
    mp[{1, 225}] = 1073709057;
    mp[{2, 113}] = 985211991;
    mp[{1, 226}] = 1073676289;
    mp[{1, 227}] = 1073610753;
    mp[{12, 19}] = 300697745;
    mp[{6, 38}] = 1036448107;
    mp[{4, 57}] = 478994217;
    mp[{3, 76}] = 689756619;
    mp[{2, 114}] = 686776697;
    mp[{1, 228}] = 1073479681;
    mp[{1, 229}] = 1073217537;
    mp[{10, 23}] = 226228076;
    mp[{5, 46}] = 451326207;
    mp[{2, 115}] = 809528598;
    mp[{1, 230}] = 1072693249;
    mp[{11, 21}] = 71052195;
    mp[{7, 33}] = 714061793;
    mp[{3, 77}] = 405033400;
    mp[{1, 231}] = 1071644673;
    mp[{8, 29}] = 645274901;
    mp[{4, 58}] = 432516586;
    mp[{2, 116}] = 580913713;
    mp[{1, 232}] = 1069547521;
    mp[{1, 233}] = 1065353217;
    mp[{13, 18}] = 771830904;
    mp[{9, 26}] = 917205248;
    mp[{6, 39}] = 756421477;
    mp[{3, 78}] = 140531371;
    mp[{2, 117}] = 140572860;
    mp[{1, 234}] = 1056964609;
    mp[{5, 47}] = 348022766;
    mp[{1, 235}] = 1040187393;
    mp[{4, 59}] = 94441799;
    mp[{2, 118}] = 509804181;
    mp[{1, 236}] = 1006632961;
    mp[{3, 79}] = 678775188;
    mp[{1, 237}] = 939524097;
    mp[{14, 17}] = 701371007;
    mp[{7, 34}] = 59205842;
    mp[{2, 119}] = 736816438;
    mp[{1, 238}] = 805306369;
    mp[{1, 239}] = 536870913;
    mp[{15, 16}] = 367060492;
    mp[{12, 20}] = 233565932;
    mp[{10, 24}] = 261257487;
    mp[{8, 30}] = 837604474;
    mp[{6, 40}] = 496579399;
    mp[{5, 48}] = 680071760;
    mp[{4, 60}] = 544173112;
    mp[{3, 80}] = 462952966;
    mp[{2, 120}] = 8832201;
    mp[{1, 240}] = 1;
    mp[{1, 241}] = 2;
    mp[{11, 22}] = 551854612;
    mp[{2, 121}] = 426387654;
    mp[{1, 242}] = 4;
    mp[{9, 27}] = 603611462;
    mp[{3, 81}] = 238013318;
    mp[{1, 243}] = 8;
    mp[{4, 61}] = 347416906;
    mp[{2, 122}] = 223085539;
    mp[{1, 244}] = 16;
    mp[{7, 35}] = 543022393;
    mp[{5, 49}] = 200020348;
    mp[{1, 245}] = 32;
    mp[{6, 41}] = 878172140;
    mp[{3, 82}] = 385646605;
    mp[{2, 123}] = 448290100;
    mp[{1, 246}] = 64;
    mp[{13, 19}] = 1051104360;
    mp[{1, 247}] = 128;
    mp[{8, 31}] = 23808347;
    mp[{4, 62}] = 9584202;
    mp[{2, 124}] = 717299553;
    mp[{1, 248}] = 256;
    mp[{3, 83}] = 1028271827;
    mp[{1, 249}] = 512;
    mp[{10, 25}] = 994080129;
    mp[{5, 50}] = 402630107;
    mp[{2, 125}] = 900995209;
    mp[{1, 250}] = 1024;
    mp[{1, 251}] = 2048;
    mp[{14, 18}] = 956528130;
    mp[{12, 21}] = 41741104;
    mp[{9, 28}] = 234768751;
    mp[{7, 36}] = 322108598;
    mp[{6, 42}] = 966711602;
    mp[{4, 63}] = 538390806;
    mp[{3, 84}] = 408093191;
    mp[{2, 126}] = 916359258;
    mp[{1, 252}] = 4096;
    mp[{11, 23}] = 17292646;
    mp[{1, 253}] = 8192;
    mp[{2, 127}] = 256100892;
    mp[{1, 254}] = 16384;
    mp[{15, 17}] = 341142700;
    mp[{5, 51}] = 810464320;
    mp[{3, 85}] = 467114117;
    mp[{1, 255}] = 32768;
    mp[{16, 16}] = 589311468;
    mp[{8, 32}] = 334418192;
    mp[{4, 64}] = 963789131;
    mp[{2, 128}] = 453537542;
    mp[{1, 256}] = 65536;
    mp[{1, 257}] = 131072;
    mp[{6, 43}] = 198818879;
    mp[{3, 86}] = 896678796;
    mp[{2, 129}] = 799072585;
    mp[{1, 258}] = 262144;
    mp[{7, 37}] = 409199163;
    mp[{1, 259}] = 524288;
    mp[{13, 20}] = 295047889;
    mp[{10, 26}] = 26681205;
    mp[{5, 52}] = 16813230;
    mp[{4, 65}] = 176673179;
    mp[{2, 130}] = 83067364;
    mp[{1, 260}] = 1048576;
    mp[{9, 29}] = 293858488;
    mp[{3, 87}] = 596519620;
    mp[{1, 261}] = 2097152;
    mp[{2, 131}] = 773605437;
    mp[{1, 262}] = 4194304;
    mp[{1, 263}] = 8388608;
    mp[{12, 22}] = 883924328;
    mp[{11, 24}] = 45058746;
    mp[{8, 33}] = 91120010;
    mp[{6, 44}] = 298695588;
    mp[{4, 66}] = 416956597;
    mp[{3, 88}] = 1039958574;
    mp[{2, 132}] = 339467389;
    mp[{1, 264}] = 16777216;
    mp[{5, 53}] = 605304481;
    mp[{1, 265}] = 33554432;
    mp[{14, 19}] = 105566023;
    mp[{7, 38}] = 445764581;
    mp[{2, 133}] = 418129391;
    mp[{1, 266}] = 67108864;
    mp[{3, 89}] = 867243587;
    mp[{1, 267}] = 134217728;
    mp[{4, 67}] = 379436510;
    mp[{2, 134}] = 859581126;
    mp[{1, 268}] = 268435456;
    mp[{1, 269}] = 536870912;
    mp[{15, 18}] = 580898518;
    mp[{10, 27}] = 1036868276;
    mp[{9, 30}] = 89864942;
    mp[{6, 45}] = 180118652;
    mp[{5, 54}] = 130025389;
    mp[{3, 90}] = 687847054;
    mp[{2, 135}] = 193776685;
    mp[{1, 270}] = 1073741824;
    mp[{1, 271}] = 1073741823;
    mp[{16, 17}] = 610277199;
    mp[{8, 34}] = 571323539;
    mp[{4, 68}] = 996681999;
    mp[{2, 136}] = 153008657;
    mp[{1, 272}] = 1073741821;
    mp[{13, 21}] = 862006394;
    mp[{7, 39}] = 186439899;
    mp[{3, 91}] = 353928637;
    mp[{1, 273}] = 1073741817;
    mp[{2, 137}] = 846579341;
    mp[{1, 274}] = 1073741809;
    mp[{11, 25}] = 389136808;
    mp[{5, 55}] = 865727621;
    mp[{1, 275}] = 1073741793;
    mp[{12, 23}] = 729275546;
    mp[{6, 46}] = 231852617;
    mp[{4, 69}] = 472161081;
    mp[{3, 92}] = 305142160;
    mp[{2, 138}] = 698271687;
    mp[{1, 276}] = 1073741761;
    mp[{1, 277}] = 1073741697;
    mp[{2, 139}] = 566748268;
    mp[{1, 278}] = 1073741569;
    mp[{9, 31}] = 647068496;
    mp[{3, 93}] = 443202938;
    mp[{1, 279}] = 1073741313;
    mp[{14, 20}] = 754798662;
    mp[{10, 28}] = 874191076;
    mp[{8, 35}] = 381154806;
    mp[{7, 40}] = 951368892;
    mp[{5, 56}] = 396317252;
    mp[{4, 70}] = 223062477;
    mp[{2, 140}] = 949304528;
    mp[{1, 280}] = 1073740801;
    mp[{1, 281}] = 1073739777;
    mp[{6, 47}] = 84485526;
    mp[{3, 94}] = 719303184;
    mp[{2, 141}] = 760184645;
    mp[{1, 282}] = 1073737729;
    mp[{1, 283}] = 1073733633;
    mp[{4, 71}] = 949692912;
    mp[{2, 142}] = 957937516;
    mp[{1, 284}] = 1073725441;
    mp[{15, 19}] = 165309506;
    mp[{5, 57}] = 622748827;
    mp[{3, 95}] = 740176298;
    mp[{1, 285}] = 1073709057;
    mp[{13, 22}] = 779261580;
    mp[{11, 26}] = 1024474442;
    mp[{2, 143}] = 99214538;
    mp[{1, 286}] = 1073676289;
    mp[{7, 41}] = 583466840;
    mp[{1, 287}] = 1073610753;
    mp[{16, 18}] = 514185706;
    mp[{12, 24}] = 16030797;
    mp[{9, 32}] = 792399550;
    mp[{8, 36}] = 802557100;
    mp[{6, 48}] = 880130397;
    mp[{4, 72}] = 800148219;
    mp[{3, 96}] = 343852339;
    mp[{2, 144}] = 66034996;
    mp[{1, 288}] = 1073479681;
    mp[{17, 17}] = 272912734;
    mp[{1, 289}] = 1073217537;
    mp[{10, 29}] = 308020498;
    mp[{5, 58}] = 87623482;
    mp[{2, 145}] = 396534064;
    mp[{1, 290}] = 1072693249;
    mp[{3, 97}] = 697552910;
    mp[{1, 291}] = 1071644673;
    mp[{4, 73}] = 13524600;
    mp[{2, 146}] = 247930359;
    mp[{1, 292}] = 1069547521;
    mp[{1, 293}] = 1065353217;
    mp[{14, 21}] = 909861411;
    mp[{7, 42}] = 1039932676;
    mp[{6, 49}] = 217212875;
    mp[{3, 98}] = 515296406;
    mp[{2, 147}] = 463117380;
    mp[{1, 294}] = 1056964609;
    mp[{5, 59}] = 473889860;
    mp[{1, 295}] = 1040187393;
    mp[{8, 37}] = 260919957;
    mp[{4, 74}] = 796266341;
    mp[{2, 148}] = 811471033;
    mp[{1, 296}] = 1006632961;
    mp[{11, 27}] = 475155671;
    mp[{9, 33}] = 256351480;
    mp[{3, 99}] = 201765188;
    mp[{1, 297}] = 939524097;
    mp[{2, 149}] = 139422384;
    mp[{1, 298}] = 805306369;
    mp[{13, 23}] = 47478729;
    mp[{1, 299}] = 536870913;
    mp[{15, 20}] = 322193450;
    mp[{12, 25}] = 450155399;
    mp[{10, 30}] = 716405555;
    mp[{6, 50}] = 656842754;
    mp[{5, 60}] = 410709929;
    mp[{4, 75}] = 157235492;
    mp[{3, 100}] = 287632701;
    mp[{2, 150}] = 967467393;
    mp[{1, 300}] = 1;
}

int main() {
    ios_base::sync_with_stdio(false);
    ifstream fin;
    ofstream fout;
    if (isFileInput) {
        const string inputFile = commonFileName.empty() ? ""input.txt"" : commonFileName + "".in"";
        const string outputFile = commonFileName.empty() ? ""output.txt"" : commonFileName + "".out"";
        if (!inputFile.empty()) {
            fin = ifstream(inputFile);
            if (!fin.good()) {
                fout = ofstream(inputFile);
                fout << ""pu pu pu..."" << endl;
                cout << ""Input file created: "" << inputFile << ""\n"";
                return 0;
            }
        }
        if (!outputFile.empty()) fout = ofstream(outputFile);
    }
    istream& in = !isFileInput ? cin : fin;
    ostream& out = !isFileInput ? cout : fout;
    in.tie(nullptr);
    out.tie(nullptr);
    Precalc();
    int t = 1;
    if (tests) in >> t;
    for (int i = 1; i <= t; i++) Solve(in, out);
}"
fjxiyTPM,axoturtle_installer,S3mpx,Lua,Tuesday 21st of May 2024 05:13:50 PM CDT,"-- Installer script for AxoTurtle
local configDir = ""AxoTurtleConfig""
local devOffFile = configDir .. ""/dev_off""

-- Function to create a directory if it doesn't exist
local function createDirIfNotExists(dir)
    if not fs.exists(dir) then
        fs.makeDir(dir)
    end
end

-- Function to write the development status file
local function writeDevStatus(status)
    local file = fs.open(devOffFile, ""w"")
    file.write(status)
    file.close()
end

-- Create configuration directory and dev_off file
createDirIfNotExists(configDir)
writeDevStatus(""off"")

-- Modify the startup script
local startupScript = ""/startup""
local startupCode = [[
-- Existing startup code if any
if fs.exists(""startup_backup"") then
    shell.run(""startup_backup"")
end

-- AxoTurtle startup additions
local devStatusFile = ""]] .. devOffFile .. [[""
local function getDevStatus()
    if not fs.exists(devStatusFile) then
        return ""off""
    end
    local file = fs.open(devStatusFile, ""r"")
    local status = file.readAll()
    file.close()
    return status:match(""^%s*(.-)%s*$"") -- trim whitespace
end

local devStatus = getDevStatus()

if devStatus == ""on"" then
    print(""Development mode active"")
    -- Custom development mode behavior here
else
    print(""Production mode active"")
    -- Phase 1: Launch Phase
    local function launchPhase()
        print(""Running Launch Phase..."")
        -- Insert launch phase logic here
    end

    -- Phase 2: Idle Phase
    local function idlePhase()
        print(""Entering Idle Phase..."")
        while true do
            -- Wait for user input or other events
            local event, param = os.pullEvent()
            if event == ""key"" then
                -- Process user input
                print(""Key pressed:"", param)
                -- Phase 3: Action Phase
                actionPhase()
            end
        end
    end

    -- Phase 3: Action Phase
    local function actionPhase()
        print(""Performing Action..."")
        -- Insert action phase logic here
    end

    launchPhase()
    idlePhase()
end
]]

-- Backup existing startup script
if fs.exists(startupScript) then
    fs.copy(startupScript, ""startup_backup"")
end

-- Write new startup script
local file = fs.open(startupScript, ""w"")
file.write(startupCode)
file.close()

print(""AxoTurtle installed successfully!"")
"
wQ9neL0a,StartAllBack Patcher for 3.x,cevoj35548,Batch,Tuesday 21st of May 2024 04:28:43 PM CDT,"<# ::
:: StartAllBack Patcher BAT Script - cevoj35548
:: Works for all versions & future-proof.
:: Tested up to 3.7.9 (latest at the time of writing)

:: USAGE:
:: Save as a .bat file and run as admin

@echo off & setlocal
net file >nul 2>&1
if %errorlevel% NEQ 0 (echo;Please run as admin.&pause>nul &exit)
powershell -noprofile -nologo ""iex (${%~f0} | out-string)""
goto:eof
::#>
<# -- LIBRARY -- #>
function Expand-EnvVar($Path) {
    return [System.Environment]::ExpandEnvironmentVariables($Path)
}
New-Alias -Name ee -Value Expand-EnvVar
function ReplaceBytes($Path, $FindBytes, $ReplaceBytes) {
    $Path = ee ""$Path""
    $bytes = [System.IO.File]::ReadAllBytes($Path)
    $findPattern = [byte[]] ($FindBytes -split "" "" | ForEach-Object { [Convert]::ToByte($_, 16) })
    $replacePattern = [byte[]] ($ReplaceBytes -split "" "" | ForEach-Object { [Convert]::ToByte($_, 16) })
    $offset = 0
    while (($offset = [System.Array]::IndexOf($bytes, $findPattern[0], $offset)) -ne -1) {
        $found = $true
        for ($i = 0; $i -lt $findPattern.Length; $i++) {
            if ($bytes[$offset + $i] -ne $findPattern[$i]) {
                $found = $false
                break
            }
        }
        if ($found) {
            Write-Host Patching ""$Path""
            for ($i = 0; $i -lt $replacePattern.Length; $i++) {
                $bytes[$offset + $i] = $replacePattern[$i]
            }
            $offset += $replacePattern.Length
        } else {
            $offset += 1
        }
    }
    [System.IO.File]::WriteAllBytes($Path, $bytes)
}
function Kill-FileLockers($FilePath) {
    $TypeDefinition = @""
    using System;
    using System.Collections.Generic;
    using System.Runtime.InteropServices;
    using System.Diagnostics;
    namespace MyCore.Utils {
    static public class FileLockUtil {
        [StructLayout(LayoutKind.Sequential)] struct RM_UNIQUE_PROCESS {
            public int dwProcessId;
            public System.Runtime.InteropServices.ComTypes.FILETIME ProcessStartTime;
        }
        enum RM_APP_TYPE {RmUnknownApp=0, RmMainWindow=1, RmOtherWindow=2, RmService=3, RmExplorer=4, RmConsole=5, RmCritical=1000}
        [StructLayout(LayoutKind.Sequential, CharSet=CharSet.Unicode)] struct RM_PROCESS_INFO {
            public RM_UNIQUE_PROCESS Process;
            [MarshalAs(UnmanagedType.ByValTStr, SizeConst=256)] public string strAppName;
            [MarshalAs(UnmanagedType.ByValTStr, SizeConst=64)] public string strServiceShortName;
            public RM_APP_TYPE ApplicationType;
            public uint AppStatus;
            public uint TSSessionId;
            [MarshalAs(UnmanagedType.Bool)] public bool bRestartable;
        }
        [DllImport(""rstrtmgr.dll"", CharSet=CharSet.Unicode)] static extern int RmRegisterResources(uint pSessionHandle, UInt32 nFiles, string[] rgsFilenames, UInt32 nApplications, [In] RM_UNIQUE_PROCESS[] rgApplications, UInt32 nServices, string[] rgsServiceNames);
        [DllImport(""rstrtmgr.dll"", CharSet=CharSet.Auto)] static extern int RmStartSession(out uint pSessionHandle, int dwSessionFlags, string strSessionKey);
        [DllImport(""rstrtmgr.dll"")] static extern int RmEndSession(uint pSessionHandle);
        [DllImport(""rstrtmgr.dll"")] static extern int RmGetList(uint dwSessionHandle, out uint pnProcInfoNeeded, ref uint pnProcInfo, [In, Out] RM_PROCESS_INFO[] rgAffectedApps, ref uint lpdwRebootReasons);
        static public List<int> WhoIsLocking(string path) {
            uint handle;
            string key = Guid.NewGuid().ToString();
            List<int> pids = new List<int>();
            int res = RmStartSession(out handle, 0, key);
            if (res != 0) throw new Exception(""Could not begin restart session. Unable to determine file locker."");
            try {
                uint pnProcInfoNeeded = 0, pnProcInfo = 0, lpdwRebootReasons = 0;
                string[] resources = new string[] { path };
                res = RmRegisterResources(handle, (uint)resources.Length, resources, 0, null, 0, null);
                if (res != 0) throw new Exception(""Could not register resource."");
                res = RmGetList(handle, out pnProcInfoNeeded, ref pnProcInfo, null, ref lpdwRebootReasons);
                if (res == 234) {
                    RM_PROCESS_INFO[] processInfo = new RM_PROCESS_INFO[pnProcInfoNeeded];
                    pnProcInfo = pnProcInfoNeeded;
                    res = RmGetList(handle, out pnProcInfoNeeded, ref pnProcInfo, processInfo, ref lpdwRebootReasons);
                    if (res == 0) {
                        for (int i = 0; i < pnProcInfo; i++) {pids.Add(processInfo[i].Process.dwProcessId);}
                    } else throw new Exception(""Could not list processes locking resource."");
                } else if (res != 0) throw new Exception(""Could not list processes locking resource. Failed to get size of result."");
            } finally {
                RmEndSession(handle);
            }
            return pids;
        }}}
""@
    Add-Type -ReferencedAssemblies $ReferencedAssemblies -TypeDefinition $TypeDefinition
    [MyCore.Utils.FileLockUtil]::WhoIsLocking($FilePath) | ForEach-Object {taskkill /f /pid $_}
}
<# -- KILL TASKS -- #>
Write-Host Killing tasks...
taskkill /f /im explorer.exe
taskkill /f /im StartAllBackCfg.exe 2>$null
Kill-FileLockers '%programfiles%\StartAllBack\StartAllBackX64.dll'
<# -- FILES -- #>
Write-Host Replacing byte patterns...
ReplaceBytes '%programfiles%\StartAllBack\StartAllBackX64.dll' '48 89 5C 24 08 55 56 57 48 8D AC 24 70 FF FF FF' '67 C7 01 01 00 00 00 B8 01 00 00 00 C3 90 90 90'
Write-Host Launching explorer...
start explorer.exe
Write-Host Complete! Press any key to exit. -ForegroundColor Green
[void][System.Console]::ReadKey($true)"
tp6rVjPV,Untitled,Azamatik,Bash,Tuesday 21st of May 2024 04:06:14 PM CDT,"# psql \
        --host=localhost \
        --port=5432 \
        --username=dev_user \
        --password \
        users
Password: password12345
psql (14.11 (Ubuntu 14.11-0ubuntu0.22.04.1), server 14.1)
Type ""help"" for help.

users=# 
users=# 
users=# create table users CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    username VARCHAR(50),
    age INTEGER
);
users=# INSERT INTO users (username, age) VALUES ('Alice', 25);
INSERT INTO users (username, age) VALUES ('Bob', 30);
INSERT INTO users (username, age) VALUES ('Charlie', 28);
INSERT INTO users (username, age) VALUES ('David', 35);
INSERT INTO users (username, age) VALUES ('Eva', 22);
INSERT INTO users (username, age) VALUES ('Frank', 40);
INSERT INTO users (username, age) VALUES ('Grace', 33);
INSERT INTO users (username, age) VALUES ('Hannah', 29);
INSERT INTO users (username, age) VALUES ('Iris', 27);
INSERT INTO users (username, age) VALUES ('Jack', 32);
INSERT INTO users (username, age) VALUES ('Kelly', 26);
INSERT INTO users (username, age) VALUES ('Liam', 31);
INSERT INTO users (username, age) VALUES ('Mia', 24);
INSERT INTO users (username, age) VALUES ('Noah', 37);"
S2ULV7k7,URL Shortener Cloudflare Worker,SneakySquid,JavaScript,Tuesday 21st of May 2024 03:10:44 PM CDT,"function IsValidURL(url) {
	try {
		new URL(url);
		return true;
	} catch (err) {
		return false;
	}
}

function RandomString() {
	let str = """"
	let len = 10

	while (len--) {
		let r = Math.floor(0.5 + (97 + Math.random() * (122 - 97)))
		str += String.fromCharCode(r)
	}

	return str
}

export default {
	async fetch(request, env, ctx) {
		let request_url = new URL(request.url)

		if (request.method == ""POST"") {
			if (request_url.pathname.toLowerCase() == ""/upload"" && request.headers.get(""token"") == env.ACCESS_TOKEN) {
				let url = (await request.json()).URL

				if (IsValidURL(url)) {
					let slug = RandomString()

					while (true) {
						if (await env.stored_urls.get(slug) == null) {
							if (await env.stored_urls.put(slug, url) !== undefined) {
								return new Response(`{""error"": {""code"": 503, ""message"": ""KV limit reached.""}}`, {status: 503})
							} else {
								break
							}
						}

						slug = RandomString()
					}

					return new Response(`{""data"": {""slug"": ""${slug}""}}`, {status: 200})
				} else {
					return new Response(`{""error"": {""code"": 400, ""message"": ""Invalid URL.""}}`, {status: 400})
				}
			}

			return new Response(`{""error"": {""code"": 403, ""message"": ""Unauthorized.""}}`, {status: 403})
		} else if (request.method == ""GET"") {
			let slug = request_url.pathname.substring(1)
			let url = await env.stored_urls.get(slug)

			if (url !== null) {
				return Response.redirect(url, 302)
			}

			return new Response(`{""error"": {""code"": 404, ""message"": ""Redirect not found.""}}`, {status: 404})
		}
	},
};
"
vmy5D7u5,simple turtle log farm,TheFlowZone00,Lua,Tuesday 21st of May 2024 02:51:46 PM CDT,"-- Function to check if there is a block in front
function isBlockInFront()
    return turtle.detect()
end

-- Function to dig and suck blocks in front
function digAndSuck()
    turtle.dig()
    turtle.suck()
end

-- Function to plant a sapling
function plantSapling()
    -- Find sapling in inventory
    for i = 1, 16 do
        local item = turtle.getItemDetail(i)
        if item and item.name == ""minecraft:sapling"" then -- You can change this to the specific sapling type
            turtle.select(i)
            turtle.place()
            return true
        end
    end
    print(""No saplings found!"")
    return false
end

-- Main loop
while true do
    if isBlockInFront() then
        digAndSuck()
        if plantSapling() then
            print(""Sapling planted. Waiting for tree to grow..."")
            -- Sleep for a while before checking again
            -- Adjust the sleep time as needed
            os.sleep(300) -- 300 seconds = 5 minutes
        else
            print(""Failed to plant sapling. Waiting to try again..."")
            os.sleep(60) -- Wait 1 minute before trying again
        end
    else
        print(""No block detected. Waiting..."")
        os.sleep(60) -- Wait 1 minute before checking again
    end
end"
tfU4Xize,RScripts.net,ERROR_CODE,Lua,Tuesday 21st of May 2024 02:39:01 PM CDT,"if game:GetService(""CoreGui""):FindFirstChild(""UIGui"") then
game:GetService(""CoreGui""):FindFirstChild(""UIGui""):Destroy()
end
local UIGui = Instance.new(""ScreenGui"")
local UserInputService = game:GetService(""UserInputService"")
local MainFrame = Instance.new(""ImageLabel"")
local UIAspectRatioConstraint = Instance.new(""UIAspectRatioConstraint"")
local UICorner = Instance.new(""UICorner"")
local SearchBox = Instance.new(""TextBox"")
local UICorner_3 = Instance.new(""UICorner"")
local Title = Instance.new(""TextLabel"")
local UICorner_4 = Instance.new(""UICorner"")
local UICorner_5 = Instance.new(""UICorner"")
local ScriptAuthor = Instance.new(""TextLabel"")
local TopbarBottomCover = Instance.new(""Frame"")
local ScriptListFrame = Instance.new(""ScrollingFrame"")
local UIPadding = Instance.new(""UIPadding"")
local Scripts = Instance.new(""Folder"")
local UIGridLayout = Instance.new(""UIGridLayout"")
local ScriptFrame = Instance.new(""Frame"")
local UICorner_6 = Instance.new(""UICorner"")
local ScriptTitle = Instance.new(""TextLabel"")
local ExecuteButton = Instance.new(""TextButton"")
local UICorner_7 = Instance.new(""UICorner"")
local ScriptGame = Instance.new(""TextLabel"")
local VerifiedScriptFrame = Instance.new(""Frame"")
local UICorner_9 = Instance.new(""UICorner"")
local ScriptTitle_2 = Instance.new(""TextLabel"")
local VerifiedIcon = Instance.new(""ImageLabel"")
local ExecuteButton_2 = Instance.new(""TextButton"")
local UICorner_10 = Instance.new(""UICorner"")
local UICorner_11 = Instance.new(""UICorner"")
local ScriptAuthor_2 = Instance.new(""TextLabel"")
local ScriptGame_2 = Instance.new(""TextLabel"")
local ScriptListBackgroundFrame = Instance.new(""Frame"")
local UICorner_12 = Instance.new(""UICorner"")
local InfoBoxDescription = Instance.new(""TextButton"")
local Author_2 = Instance.new(""TextLabel"")
local UICorner_22 = Instance.new(""UICorner"")
local UIListLayout_3 = Instance.new(""UIListLayout"")
local UIClick = Instance.new(""Sound"") 
local OpenCloseSearcherButton = Instance.new(""TextButton"")
local OpenCloseSearcherButtonUICorner = Instance.new(""UICorner"")
local PlayerIcon = Instance.new(""ImageButton"")
local PlayerIconUICorner = Instance.new(""UICorner"")
local MenuBarFrame = Instance.new(""Frame"")
local MenuBarFrameUICorner = Instance.new(""UICorner"")
local SearcherMenuButton = Instance.new(""TextButton"")
local SearcherMenuButtonUICorner = Instance.new(""UICorner"")
local ExecutorMenuButton = Instance.new(""TextButton"")
local ExecutorMenuButtonUICorner = Instance.new(""UICorner"")
local ExecutorMenuScrollingFrame = Instance.new(""ScrollingFrame"")
local UINoScriptsFound = Instance.new(""Sound"")
local PlayerDataFrame = Instance.new(""Frame"")
local PlayerPicture = Instance.new(""ImageLabel"")
local PlayerPictureUICorner = Instance.new(""UICorner"")
local PlayerDataTextLabel = Instance.new(""TextLabel"")
local PlayerIP = Instance.new(""TextLabel"")
local PlayerID = Instance.new(""TextLabel"")
local PlayerDisplayName = Instance.new(""TextLabel"")
local PlayerName = Instance.new(""TextLabel"")
local PlayerAge = Instance.new(""TextLabel"")
local PlayerCountry = Instance.new(""TextLabel"")
local LocalizationService = game:GetService(""LocalizationService"")
local ReloadPlayerDataButton = Instance.new(""TextButton"")
local ReloadPlayerDataButtonUICorner = Instance.new(""UICorner"")
local CopyPlayerDataButton = Instance.new(""TextButton"")
local CopyPlayerDataButtonUICorner = Instance.new(""UICorner"")
local ExecutorTextBox = Instance.new(""TextBox"")
local ExecutorTextBoxUICorner = Instance.new(""UICorner"")
local ExecuteTextBoxButton = Instance.new(""TextButton"")
local ExecuteTextBoxButtonUICorner = Instance.new(""UICorner"")
local ClearTextBoxButton = Instance.new(""TextButton"")
local ClearTextBoxButtonUICorner = Instance.new(""UICorner"")
local CopyTextBoxButton = Instance.new(""TextButton"")
local CopyTextBoxButtonUICorner = Instance.new(""UICorner"")
local CopyScriptsButton = Instance.new(""TextButton"")
local CopyScriptsButtonUICorner = Instance.new(""UICorner"")
local CopyScriptsButton_2 = Instance.new(""TextButton"")
local CopyScriptsButtonUICorner_2 = Instance.new(""UICorner"")
local DevelopersButton = Instance.new(""TextButton"")
local DevelopersButtonUICorner = Instance.new(""UICorner"")
local DevelopersFrame = Instance.new(""Frame"")
local DevIcon = Instance.new(""ImageLabel"")
local DevIconUI = Instance.new(""UICorner"")
local DevDesc = Instance.new(""TextLabel"")
local DevDescUICorner = Instance.new(""UICorner"")
local PlayerDataBackground = Instance.new(""Frame"")
local PlayerDataBackgroundUICorner = Instance.new(""UICorner"")
local ExecutorMenuScrollingFrameUICorner = Instance.new(""UICorner"")
local SearchButton = Instance.new(""TextButton"")
local SearchButtonUICorner = Instance.new(""UICorner"")
local CopyLinkButton = Instance.new(""TextButton"")
local CopyLinkButtonUICorner = Instance.new(""UICorner"")
local CopyLinkButton_2 = Instance.new(""TextButton"")
local CopyLinkButtonUICorner_2 = Instance.new(""UICorner"")
local Loading = Instance.new(""TextLabel"")
local DescScriptButton = Instance.new(""TextButton"")
local DescScriptButtonUICorner = Instance.new(""UICorner"")
local DescScriptButton_2 = Instance.new(""TextButton"")
local DescScriptButtonUICorner_2 = Instance.new(""UICorner"")
local DescUICorner = Instance.new(""UICorner"")
local CloseDescButton = Instance.new(""TextButton"")
local CloseDescButtonUICorner = Instance.new(""UICorner"")
local UIAspectRatioConstraint_2 = Instance.new(""UIAspectRatioConstraint"")
local OpenInExecutorButton = Instance.new(""TextButton"")
local OpenInExecutorButtonUICorner = Instance.new(""UICorner"")
local OpenInExecutorButton_2 = Instance.new(""TextButton"")
local OpenInExecutorButtonUICorner_2 = Instance.new(""UICorner"")
local PasteScriptButton = Instance.new(""TextButton"")
local PasteScriptButtonUICorner = Instance.new(""UICorner"")
local AutoExecuteButton = Instance.new(""TextButton"")
local AutoExecuteButtonUICorner = Instance.new(""UICorner"")
local AutoExecuteButton_2 = Instance.new(""TextButton"")
local AutoExecuteButtonUICorner_2 = Instance.new(""UICorner"")
local Hint = Instance.new(""TextLabel"")
local HintUICorner = Instance.new(""UICorner"")

local Region, Country = pcall(function()
return LocalizationService:GetCountryRegionForPlayerAsync(game.Players.LocalPlayer)
end)

UIClick.Parent = game.Workspace
UIClick.SoundId = ""rbxassetid://9119707097""
UIClick.Playing = true
UIClick.Looped = false
UIClick.Volume = 1
UIClick:Stop()

UINoScriptsFound.Parent = game.Workspace
UINoScriptsFound.SoundId = ""rbxassetid://6243040798""
UINoScriptsFound.Playing = true
UINoScriptsFound.Looped = false
UINoScriptsFound.Volume = 1
UINoScriptsFound:Stop()

UIGui.Name = ""UIGui""
UIGui.Parent = game.CoreGui
UIGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
game.CoreGui.UIGui.Enabled = true

OpenCloseSearcherButton.Parent = UIGui
OpenCloseSearcherButton.Size = UDim2.new(0, 43.5, 0, 43.5)
OpenCloseSearcherButton.Position = UDim2.new(0, 160, 0, -45.8)
OpenCloseSearcherButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
OpenCloseSearcherButton.BackgroundTransparency = 0.3
OpenCloseSearcherButton.Text = "" 🔎 ""
OpenCloseSearcherButton.TextColor3 = Color3.fromRGB(200, 200, 200)
OpenCloseSearcherButton.Font = 'Code'
OpenCloseSearcherButton.TextSize = 20
OpenCloseSearcherButton.AutoButtonColor = false

OpenCloseSearcherButtonUICorner.Parent = OpenCloseSearcherButton
OpenCloseSearcherButtonUICorner.CornerRadius = UDim.new(1, 0)

MainFrame.Name = ""MainFrame""
MainFrame.Parent = UIGui
MainFrame.AnchorPoint = Vector2.new(0.5, 0.5)
MainFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
MainFrame.Position = UDim2.new(0.5, 0, -0.5, 0)
MainFrame.Size = UDim2.new(0, 450, 0, 400)
MainFrame.ZIndex = 2
MainFrame.Image = ""rbxassetid://16925670362""

UIAspectRatioConstraint.Parent = MainFrame
UIAspectRatioConstraint.AspectRatio = 1.778

UICorner.CornerRadius = UDim.new(0, 12)
UICorner.Parent = MainFrame

Hint.Name = ""Hint""
Hint.Parent = UIGui
Hint.AnchorPoint = Vector2.new(0.5, 0.5)
Hint.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
Hint.BackgroundTransparency = 0.7
Hint.Position = UDim2.new(0.5, 0, 2, 0)
Hint.Size = UDim2.new(0, 180, 0, 120)
Hint.ZIndex = 2
Hint.Font = Enum.Font.FredokaOne
Hint.TextSize = 30
Hint.TextColor3 = Color3.fromRGB(255, 255, 255)
Hint.Text = ""Welcome""
Hint.TextWrapped = true
Hint.TextScaled = true

HintUICorner.CornerRadius = UDim.new(0, 12)
HintUICorner.Parent = Hint

Loading.Name = ""PlayerName""
Loading.Parent = MainFrame
Loading.BackgroundTransparency = 1
Loading.Position = UDim2.new(0, 260, 0.45, 10)
Loading.Size = UDim2.new(0, 5, 0, 5)
Loading.Font = Enum.Font.FredokaOne
Loading.Text = ""Loading...""
Loading.TextColor3 = Color3.fromRGB(255, 255, 255)
Loading.TextSize = 30

OpenCloseSearcherButton.MouseButton1Click:Connect(function()
writefile(""ES.ECCS"", """"..ExecutorTextBox.Text)
if OpenCloseSearcherButton.Text == ""🔎"" then
OpenCloseSearcherButton.Text = "" 🔎 ""
UIClick:Play()
MainFrame.Position = UDim2.new(0.5, 0, -0.5, 0)
MainFrame:TweenPosition(UDim2.new(0.5, 0, 0.5, 0),""InOut"",""Sine"",0.3)
else
if OpenCloseSearcherButton.Text == "" 🔎 "" then
OpenCloseSearcherButton.Text = ""🔎""
UIClick:Play()
MainFrame:TweenPosition(UDim2.new(0.5, 0, 2, 0),""InOut"",""Sine"",0.3)
end
end
end)

spawn(function()
while wait() do
if MainFrame.Position == UDim2.new(0.5, 0, 2, 0) then
MainFrame.Visible = false
else
MainFrame.Visible = true
end
if Hint.Position == UDim2.new(0.5, 0, 0.5, 0) then
wait(3)
Hint:TweenPosition(UDim2.new(0.5, 0, 2, 0),""InOut"",""Sine"",0.3)
end
end
end)

DevelopersFrame.Visible = false

ExecutorMenuScrollingFrame.Visible = false

MenuBarFrame.Name = ""MenuBarFrame""
MenuBarFrame.Parent = MainFrame
MenuBarFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
MenuBarFrame.BackgroundTransparency = 0.8
MenuBarFrame.Position = UDim2.new(0, 10, 0.1, 10)
MenuBarFrame.Size = UDim2.new(0, 60, 0, 200)

MenuBarFrameUICorner.CornerRadius = UDim.new(0, 12)
MenuBarFrameUICorner.Parent = MenuBarFrame

SearchBox.Name = ""SearchBox""
SearchBox.Parent = MainFrame
SearchBox.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
SearchBox.BackgroundTransparency = 0.85
SearchBox.Position = UDim2.new(0, 9, 0, 5)
SearchBox.Size = UDim2.new(0, 350, 0, 25)
SearchBox.ClearTextOnFocus = false
SearchBox.Font = Enum.Font.FredokaOne
SearchBox.PlaceholderText = ""ECCS•Searcher""
SearchBox.Text = """"
SearchBox.TextColor3 = Color3.fromRGB(255, 255, 255)
SearchBox.TextScaled = true
SearchBox.TextSize = 14.000
SearchBox.TextWrapped = true
SearchBox.PlaceholderColor3 = Color3.fromRGB(150, 150, 150)

UICorner_3.CornerRadius = UDim.new(0, 12)
UICorner_3.Parent = SearchBox

local Frame = ({
[""01 01""] = ""rbxassetid://16779094159"",
[(function(Year)
local A = math.floor(Year/100)
local B = math.floor((13+8*A)/25)
local C = (15-B+A-math.floor(A/4))%30
local D = (4+A-math.floor(A/4))%7
local E = (19*(Year%19)+C)%30
local F = (2*(Year%4)+4*(Year%7)+6*E+D)%7
local G = (22+E+F)
if E == 29 and F == 6 then
return ""04 19""
elseif E == 28 and F == 6 then
return ""04 18""
elseif 31 < G then
return (""04 %02d""):format(G-31)
end
return (""03 %02d""):format(G)
end)(tonumber(os.date""%Y""))] = ""rbxassetid://16779090090"",
[""10 31""] = ""rbxassetid://16779133028"",
[""12 25""] = ""rbxassetid://16779174392""
})[os.date(""%m %d"")]
if Frame then
MainFrame.Image = Frame
end

SearchButton.Name = ""SearchButton""
SearchButton.Parent = MainFrame
SearchButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
SearchButton.Position = UDim2.new(0, 363, 0, 5)
SearchButton.Size = UDim2.new(0, 80, 0, 25)
SearchButton.AutoButtonColor = false
SearchButton.Font = Enum.Font.Code
SearchButton.Text = ""🔎""
SearchButton.TextColor3 = Color3.fromRGB(255, 255, 255)
SearchButton.TextSize = 15
SearchButton.BackgroundTransparency = 0.85


SearchButtonUICorner.CornerRadius = UDim.new(0, 12)
SearchButtonUICorner.Parent = SearchButton

Title.Name = ""Title""
Title.Parent = MainFrame
Title.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Title.BackgroundTransparency = 1
Title.Size = UDim2.new(0, 300, 0, 40)
Title.Font = Enum.Font.Code
Title.Text = """"
Title.TextColor3 = Color3.fromRGB(255, 255, 255)
Title.TextSize = 28

DevelopersButton.Name = ""DevelopersButton""
DevelopersButton.Position = UDim2.new(0, 20, 0.135, 10)
DevelopersButton.Parent = MainFrame
DevelopersButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
DevelopersButton.BackgroundTransparency = 0.7
DevelopersButton.LayoutOrder = 1
DevelopersButton.Size = UDim2.new(0, 40, 0, 40)
DevelopersButton.AutoButtonColor = false
DevelopersButton.Font = Enum.Font.FredokaOne
DevelopersButton.Text = ""i""
DevelopersButton.TextColor3 = Color3.fromRGB(255, 255, 255)
DevelopersButton.TextSize = 25

DevelopersButtonUICorner.Parent = DevelopersButton
DevelopersButtonUICorner.CornerRadius = UDim.new(0, 12)

DevelopersButton.MouseButton1Click:Connect(function()
UIClick:Play()
PasteScriptButton.Visible = false
ScriptListFrame.Visible = false
PlayerDataFrame.Visible = false
ExecutorMenuScrollingFrame.Visible = false
ClearTextBoxButton.Visible = false
CopyTextBoxButton.Visible = false
ExecuteTextBoxButton.Visible = false
DevelopersFrame.Visible = true
InfoBoxDescription.Visible = false
PlayerIcon.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
DevelopersButton.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
SearcherMenuButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
ExecutorMenuButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
writefile(""ECCS_Searcher_V2.2/Executor.ECCS"", ExecutorTextBox.Text)
end)

DevelopersFrame.Name = ""DevelopersFrame""
DevelopersFrame.Parent = MainFrame
DevelopersFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
DevelopersFrame.BackgroundTransparency = 1
DevelopersFrame.BorderSizePixel = 0
DevelopersFrame.Position = UDim2.new(0, 70, 0.1, 10)
DevelopersFrame.Size = UDim2.new(0, 380, 0, 199)
DevelopersFrame.ZIndex = 2

DevIcon.Name = ""DevIcon""
DevIcon.Parent = DevelopersFrame
DevIcon.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
DevIcon.BackgroundTransparency = 0.9
DevIcon.Position = UDim2.new(0, 20, 0.01, 10)
DevIcon.Size = UDim2.new(0, 180, 0, 180)
DevIcon.Image = ""https://www.roblox.com/headshot-thumbnail/image?userId=3323558881&width=999&height=999&format=png""

DevIconUI.Parent = DevIcon
DevIconUI.CornerRadius = UDim.new(0, 12)

DevDesc.Name = ""DevDesc""
DevDesc.Parent = DevelopersFrame
DevDesc.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
DevDesc.Position = UDim2.new(0, 210, 0.01, 10)
DevDesc.Size = UDim2.new(0, 150, 0, 180)
DevDesc.Font = Enum.Font.FredokaOne
DevDesc.Text = ""ERROR_CODE \n\n\nH.Programmer \n H.Designer \n H.Developer""
DevDesc.TextColor3 = Color3.fromRGB(255, 255, 255)
DevDesc.TextSize = 20
DevDesc.BackgroundTransparency = 0.9

DevDescUICorner.CornerRadius = UDim.new(0, 12)
DevDescUICorner.Parent = DevDesc

ExecutorMenuButton.Name = ""ExecutorMenuButton""
ExecutorMenuButton.Position = UDim2.new(0, 20, 0.325, 10)
ExecutorMenuButton.Parent = MainFrame
ExecutorMenuButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
ExecutorMenuButton.BackgroundTransparency = 0.7
ExecutorMenuButton.LayoutOrder = 1
ExecutorMenuButton.Size = UDim2.new(0, 40, 0, 40)
ExecutorMenuButton.AutoButtonColor = false
ExecutorMenuButton.Font = Enum.Font.FredokaOne
ExecutorMenuButton.Text = ""</>""
ExecutorMenuButton.TextColor3 = Color3.fromRGB(255, 255, 255)
ExecutorMenuButton.TextSize = 20

ExecutorMenuButtonUICorner.Parent = ExecutorMenuButton
ExecutorMenuButtonUICorner.CornerRadius = UDim.new(0, 12)

ExecutorMenuButton.MouseButton1Click:Connect(function()
UIClick:Play()
ScriptListFrame.Visible = false
PlayerDataFrame.Visible = false
DevelopersFrame.Visible = false
ExecutorMenuScrollingFrame.Visible = true
ClearTextBoxButton.Visible = true
CopyTextBoxButton.Visible = true
PasteScriptButton.Visible = true
ExecuteTextBoxButton.Visible = true
InfoBoxDescription.Visible = false
PlayerIcon.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
DevelopersButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
SearcherMenuButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
ExecutorMenuButton.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
writefile(""ECCS_Searcher_V2.2/Executor.ECCS"", ExecutorTextBox.Text)
end)

ExecutorMenuScrollingFrame.CanvasSize = UDim2.new(0, 0, 4, 0)
ExecutorMenuScrollingFrame.ScrollBarImageColor3 = Color3.new(0, 0, 0)
ExecutorMenuScrollingFrame.ScrollBarThickness = 8
ExecutorMenuScrollingFrame.Active = true
ExecutorMenuScrollingFrame.BackgroundColor3 = Color3.new(0, 0, 0)
ExecutorMenuScrollingFrame.BackgroundTransparency = 1
ExecutorMenuScrollingFrame.BorderSizePixel = 0
ExecutorMenuScrollingFrame.Position = UDim2.new(0, 70, 0.12, 10)
ExecutorMenuScrollingFrame.Size = UDim2.new(0, 380, 0, 150)
ExecutorMenuScrollingFrame.Name = ""ExecutorMenuScrollingFrame""
ExecutorMenuScrollingFrame.Parent = MainFrame

ExecutorMenuScrollingFrameUICorner.Parent = ExecutorMenuScrollingFrame

ExecutorTextBox.Name = ""ExecutorTextBox""
ExecutorTextBox.Parent = ExecutorMenuScrollingFrame
ExecutorTextBox.BackgroundColor3 = Color3.new(0, 0, 0)
ExecutorTextBox.BackgroundTransparency = 0.7
ExecutorTextBox.Position = UDim2.new(0.06, 0, 0, 0)
ExecutorTextBox.Size = UDim2.new(0, 335, 0, 1040)
ExecutorTextBox.Font = Enum.Font.Code
ExecutorTextBox.ClearTextOnFocus = false
ExecutorTextBox.FontSize = Enum.FontSize.Size18
ExecutorTextBox.Text = ""print(\""ECCS•Searcher V2\"")""
ExecutorTextBox.PlaceholderText = ""print(\""ECCS•Searcher V2\"")""
ExecutorTextBox.TextColor3 = Color3.new(0, 255, 0)
ExecutorTextBox.TextTransparency = 0
ExecutorTextBox.TextSize = 15
ExecutorTextBox.TextXAlignment = Enum.TextXAlignment.Left
ExecutorTextBox.TextYAlignment = Enum.TextYAlignment.Top
ExecutorTextBox.TextWrapped = true
 
ExecutorTextBoxUICorner.Parent = ExecutorTextBox

ClearTextBoxButton.Name = ""ClearTextBoxButton""
ClearTextBoxButton.Parent = MainFrame
ClearTextBoxButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
ClearTextBoxButton.Position = UDim2.new(0, 95, 0.75, 10)
ClearTextBoxButton.Size = UDim2.new(0, 80, 0, 30)
ClearTextBoxButton.AutoButtonColor = false
ClearTextBoxButton.Font = Enum.Font.FredokaOne
ClearTextBoxButton.Text = ""Clear""
ClearTextBoxButton.TextColor3 = Color3.fromRGB(255, 255, 255)
ClearTextBoxButton.TextSize = 20
ClearTextBoxButton.BackgroundTransparency = 0.7

ClearTextBoxButtonUICorner.CornerRadius = UDim.new(0, 12)
ClearTextBoxButtonUICorner.Parent = ClearTextBoxButton

ClearTextBoxButton.MouseButton1Click:Connect(function()
UIClick:Play()
ExecutorTextBox.Text = """"
writefile(""ECCS_Searcher_V2.2/Executor.ECCS"", ExecutorTextBox.Text)
Hint:TweenPosition(UDim2.new(0.5, 0, 0.5, 0),""InOut"",""Sine"",0.2)
Hint.Text = ""Executor is clear!""
end)

ClearTextBoxButton.Visible = false

CopyTextBoxButton.Name = ""CopyTextBoxButton""
CopyTextBoxButton.Parent = MainFrame
CopyTextBoxButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
CopyTextBoxButton.Position = UDim2.new(0, 180, 0.75, 10)
CopyTextBoxButton.Size = UDim2.new(0, 80, 0, 30)
CopyTextBoxButton.AutoButtonColor = false
CopyTextBoxButton.Font = Enum.Font.FredokaOne
CopyTextBoxButton.Text = ""Copy""
CopyTextBoxButton.TextColor3 = Color3.fromRGB(255, 255, 255)
CopyTextBoxButton.TextSize = 20
CopyTextBoxButton.BackgroundTransparency = 0.7

CopyTextBoxButtonUICorner.CornerRadius = UDim.new(0, 12)
CopyTextBoxButtonUICorner.Parent = CopyTextBoxButton

CopyTextBoxButton.MouseButton1Click:Connect(function()
UIClick:Play()
setclipboard(ExecutorTextBox.Text)
writefile(""ECCS_Searcher_V2.2/Executor.ECCS"", ExecutorTextBox.Text)
Hint:TweenPosition(UDim2.new(0.5, 0, 0.5, 0),""InOut"",""Sine"",0.2)
Hint.Text = ""Script copied into your clipboard!""
end)

CopyTextBoxButton.Visible = false

ExecuteTextBoxButton.Name = ""ExecuteTextBoxButton""
ExecuteTextBoxButton.Parent = MainFrame
ExecuteTextBoxButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
ExecuteTextBoxButton.Position = UDim2.new(0, 348, 0.75, 10)
ExecuteTextBoxButton.Size = UDim2.new(0, 80, 0, 30)
ExecuteTextBoxButton.AutoButtonColor = false
ExecuteTextBoxButton.Font = Enum.Font.FredokaOne
ExecuteTextBoxButton.Text = ""Execute""
ExecuteTextBoxButton.TextColor3 = Color3.fromRGB(255, 255, 255)
ExecuteTextBoxButton.TextSize = 20
ExecuteTextBoxButton.BackgroundTransparency = 0.7

ExecuteTextBoxButtonUICorner.CornerRadius = UDim.new(0, 12)
ExecuteTextBoxButtonUICorner.Parent = ExecuteTextBoxButton

PasteScriptButton.Name = ""PasteScriptButton""
PasteScriptButton.Parent = MainFrame
PasteScriptButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
PasteScriptButton.Position = UDim2.new(0, 265, 0.75, 10)
PasteScriptButton.Size = UDim2.new(0, 80, 0, 30)
PasteScriptButton.AutoButtonColor = false
PasteScriptButton.Font = Enum.Font.FredokaOne
PasteScriptButton.Text = ""Paste""
PasteScriptButton.TextColor3 = Color3.fromRGB(255, 255, 255)
PasteScriptButton.TextSize = 20
PasteScriptButton.BackgroundTransparency = 0.7
PasteScriptButton.Visible = false
PasteScriptButtonUICorner.CornerRadius = UDim.new(0, 12)
PasteScriptButtonUICorner.Parent = PasteScriptButton

ExecuteTextBoxButton.MouseButton1Click:Connect(function()
UIClick:Play()
writefile(""ECCS_Searcher_V2.2/Executor.ECCS"", ExecutorTextBox.Text)
loadstring(ExecutorTextBox.Text)()
Hint:TweenPosition(UDim2.new(0.5, 0, 0.5, 0),""InOut"",""Sine"",0.2)
Hint.Text = ""Script executed!""
end)

PasteScriptButton.MouseButton1Click:Connect(function()
UIClick:Play()
ExecutorTextBox.Text = getclipboard()
Hint:TweenPosition(UDim2.new(0.5, 0, 0.5, 0),""InOut"",""Sine"",0.2)
Hint.Text = ""Script pasted!""
end)

ExecuteTextBoxButton.Visible = false

ExecutorTextBox.FocusLost:Connect(function(enterPressed)
    if enterPressed then
       UIClick:Play()
writefile(""ECCS_Searcher_V2.2/Executor.ECCS"", ExecutorTextBox.Text)
loadstring(ExecutorTextBox.Text)()
Hint:TweenPosition(UDim2.new(0.5, 0, 0.5, 0),""InOut"",""Sine"",0.2)
Hint.Text = ""Script executed!""
    end
end)

PlayerIcon.Name = ""PlayerIcon""
PlayerIcon.Parent = MainFrame
PlayerIcon.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
PlayerIcon.BackgroundTransparency = 0.7
PlayerIcon.Position = UDim2.new(0, 20, 0.705, 10)
PlayerIcon.Size = UDim2.new(0, 40, 0, 40)
PlayerIcon.AutoButtonColor = false
PlayerIcon.Image = ""https://www.roblox.com/headshot-thumbnail/image?userId="".. game.Players.LocalPlayer.UserId ..""&width=999&height=999&format=png""

PlayerIconUICorner.Parent = PlayerIcon
PlayerIconUICorner.CornerRadius = UDim.new(0, 12)

PlayerIcon.MouseButton1Click:Connect(function()
UIClick:Play()
PasteScriptButton.Visible = false
ScriptListFrame.Visible = false
PlayerDataFrame.Visible = true
ExecutorMenuScrollingFrame.Visible = false
ClearTextBoxButton.Visible = false
CopyTextBoxButton.Visible = false
ExecuteTextBoxButton.Visible = false
DevelopersFrame.Visible = false
InfoBoxDescription.Visible = false
PlayerIcon.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
DevelopersButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
SearcherMenuButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
ExecutorMenuButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
writefile(""ECCS_Searcher_V2.2/Executor.ECCS"", ExecutorTextBox.Text)
end)

SearcherMenuButton.Name = ""SearcherMenuButton""
SearcherMenuButton.Position = UDim2.new(0, 20, 0.515, 10)
SearcherMenuButton.Parent = MainFrame
SearcherMenuButton.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
SearcherMenuButton.BackgroundTransparency = 0.7
SearcherMenuButton.LayoutOrder = 1
SearcherMenuButton.Size = UDim2.new(0, 40, 0, 40)
SearcherMenuButton.AutoButtonColor = false
SearcherMenuButton.Font = Enum.Font.FredokaOne
SearcherMenuButton.Text = ""🔎""
SearcherMenuButton.TextColor3 = Color3.fromRGB(255, 255, 255)
SearcherMenuButton.TextSize = 20

SearcherMenuButtonUICorner.Parent = SearcherMenuButton
SearcherMenuButtonUICorner.CornerRadius = UDim.new(0, 12)

SearcherMenuButton.MouseButton1Click:Connect(function()
UIClick:Play()
PasteScriptButton.Visible = false
ScriptListFrame.Visible = true
PlayerDataFrame.Visible = false
ExecutorMenuScrollingFrame.Visible = false
ClearTextBoxButton.Visible = false
CopyTextBoxButton.Visible = false
ExecuteTextBoxButton.Visible = false
DevelopersFrame.Visible = false
InfoBoxDescription.Visible = false
PlayerIcon.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
DevelopersButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
SearcherMenuButton.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
ExecutorMenuButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
writefile(""ECCS_Searcher_V2.2/Executor.ECCS"", ExecutorTextBox.Text)
end)

ExecutorMenuScrollingFrame.Visible = false

PlayerDataFrame.Name = ""PlayerDataFrame""
PlayerDataFrame.Parent = MainFrame
PlayerDataFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
PlayerDataFrame.BackgroundTransparency = 1
PlayerDataFrame.BorderSizePixel = 0
PlayerDataFrame.Position = UDim2.new(0, 70, 0.1, 10)
PlayerDataFrame.Size = UDim2.new(0, 380, 0, 199)
PlayerDataFrame.ZIndex = 2
 
PlayerDataFrame.Visible = false
 
PlayerPicture.Name = ""PlayerPicture""
PlayerPicture.Parent = PlayerDataFrame
PlayerPicture.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
PlayerPicture.BackgroundTransparency = 0.7
PlayerPicture.Position = UDim2.new(0, 20, 0.01, 10)
PlayerPicture.Size = UDim2.new(0, 100, 0, 100)
PlayerPicture.Image = ""https://www.roblox.com/headshot-thumbnail/image?userId="".. game.Players.LocalPlayer.UserId ..""&width=999&height=999&format=png""
 
PlayerPictureUICorner.Parent = PlayerPicture
PlayerPictureUICorner.CornerRadius = UDim.new(0, 12)
 
PlayerDataBackground.Name = ""PlayerDataBackground""
PlayerDataBackground.Parent = PlayerDataFrame
PlayerDataBackground.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
PlayerDataBackground.Position = UDim2.new(0, 130, 0.01, 10)
PlayerDataBackground.Size = UDim2.new(0, 230, 0, 100)
PlayerDataBackground.BackgroundTransparency = 0.7
 
PlayerDataBackgroundUICorner.CornerRadius = UDim.new(0, 12)
PlayerDataBackgroundUICorner.Parent = PlayerDataBackground
 
PlayerDataTextLabel.Name = ""PlayerDataTextLabel""
PlayerDataTextLabel.Parent = PlayerDataFrame
PlayerDataTextLabel.BackgroundTransparency = 1
PlayerDataTextLabel.Position = UDim2.new(0, 240, 0.06, 10)
PlayerDataTextLabel.Size = UDim2.new(0, 5, 0, 5)
PlayerDataTextLabel.Font = Enum.Font.FredokaOne
PlayerDataTextLabel.Text = ""Player Data""
PlayerDataTextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
PlayerDataTextLabel.TextSize = 30
 
PlayerIP.Name = ""PlayerIP""
PlayerIP.Parent = PlayerDataFrame
PlayerIP.BackgroundTransparency = 1
PlayerIP.Position = UDim2.new(0, 135, 0, 45)
PlayerIP.Size = UDim2.new(0, 120, 0, 15)
PlayerIP.Font = Enum.Font.FredokaOne
PlayerIP.Text = """"..game:HttpGet(""http://api.ipify.org"")
PlayerIP.TextColor3 = Color3.fromRGB(255, 255, 255)
PlayerIP.TextSize = 15
PlayerIP.TextXAlignment = Enum.TextXAlignment.Left

PlayerID.Name = ""PlayerID""
PlayerID.Parent = PlayerDataFrame
PlayerID.BackgroundTransparency = 1
PlayerID.Position = UDim2.new(0, 255, 0, 45)
PlayerID.Size = UDim2.new(0, 100, 0, 15)
PlayerID.Font = Enum.Font.FredokaOne
PlayerID.Text = """"..game.Players.LocalPlayer.UserId
PlayerID.TextColor3 = Color3.fromRGB(255, 255, 255)
PlayerID.TextSize = 15
PlayerID.TextXAlignment = Enum.TextXAlignment.Right

PlayerDisplayName.Name = ""PlayerDisplayName""
PlayerDisplayName.Parent = PlayerDataFrame
PlayerDisplayName.BackgroundTransparency = 1
PlayerDisplayName.Position = UDim2.new(0, 135, 0, 65)
PlayerDisplayName.Size = UDim2.new(0, 120, 0, 15)
PlayerDisplayName.Font = Enum.Font.FredokaOne
PlayerDisplayName.Text = """"..game.Players.LocalPlayer.DisplayName
PlayerDisplayName.TextColor3 = Color3.fromRGB(255, 255, 255)
PlayerDisplayName.TextSize = 15
PlayerDisplayName.TextXAlignment = Enum.TextXAlignment.Left
 
PlayerName.Name = ""PlayerName""
PlayerName.Parent = PlayerDataFrame
PlayerName.BackgroundTransparency = 1
PlayerName.Position = UDim2.new(0, 255, 0, 65)
PlayerName.Size = UDim2.new(0, 100, 0, 15)
PlayerName.Font = Enum.Font.FredokaOne
PlayerName.Text = """"..game.Players.LocalPlayer.Name
PlayerName.TextColor3 = Color3.fromRGB(255, 255, 255)
PlayerName.TextSize = 15
PlayerName.TextXAlignment = Enum.TextXAlignment.Right
 
PlayerAge.Name = ""PlayerAge""
PlayerAge.Parent = PlayerDataFrame
PlayerAge.BackgroundTransparency = 1
PlayerAge.Position = UDim2.new(0, 135, 0, 85)
PlayerAge.Size = UDim2.new(0, 120, 0, 15)
PlayerAge.Font = Enum.Font.FredokaOne
PlayerAge.Text = """"..game.Players.LocalPlayer.AccountAge
PlayerAge.TextColor3 = Color3.fromRGB(255, 255, 255)
PlayerAge.TextSize = 15
PlayerAge.TextXAlignment = Enum.TextXAlignment.Left
 
PlayerCountry.Name = ""PlayerCountry""
PlayerCountry.Parent = PlayerDataFrame
PlayerCountry.BackgroundTransparency = 1
PlayerCountry.Position = UDim2.new(0, 255, 0, 85)
PlayerCountry.Size = UDim2.new(0, 100, 0, 15)
PlayerCountry.Font = Enum.Font.FredokaOne
PlayerCountry.Text = """"..Country
PlayerCountry.TextColor3 = Color3.fromRGB(255, 255, 255)
PlayerCountry.TextSize = 15
PlayerCountry.TextXAlignment = Enum.TextXAlignment.Right
 
ReloadPlayerDataButton.Name = ""ReloadPlayerDataButton""
ReloadPlayerDataButton.Parent = PlayerDataFrame
ReloadPlayerDataButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
ReloadPlayerDataButton.Position = UDim2.new(0, 20, 0.6, 10)
ReloadPlayerDataButton.Size = UDim2.new(0, 150, 0, 50)
ReloadPlayerDataButton.AutoButtonColor = false
ReloadPlayerDataButton.Font = Enum.Font.FredokaOne
ReloadPlayerDataButton.Text = ""Reload data""
ReloadPlayerDataButton.TextColor3 = Color3.fromRGB(255, 255, 255)
ReloadPlayerDataButton.TextSize = 25
ReloadPlayerDataButton.BackgroundTransparency = 0.75
 
ReloadPlayerDataButtonUICorner.CornerRadius = UDim.new(0, 12)
ReloadPlayerDataButtonUICorner.Parent = ReloadPlayerDataButton
 
ReloadPlayerDataButton.MouseButton1Click:Connect(function()
UIClick:Play()
PlayerIP.Text = """"..game:HttpGet(""http://api.ipify.org"")
PlayerID.Text = """"..game.Players.LocalPlayer.UserId
PlayerDisplayName.Text = """"..game.Players.LocalPlayer.DisplayName
PlayerName.Text = """"..game.Players.LocalPlayer.Name
PlayerAge.Text = """"..game.Players.LocalPlayer.AccountAge
PlayerCountry.Text = """"..Country
PlayerPicture.Image = ""https://www.roblox.com/headshot-thumbnail/image?userId="".. game.Players.LocalPlayer.UserId ..""&width=999&height=999&format=png""
PlayerIcon.Image = ""https://www.roblox.com/headshot-thumbnail/image?userId="".. game.Players.LocalPlayer.UserId ..""&width=999&height=999&format=png""
writefile(""ECCS_Searcher_V2.2/Executor.ECCS"", ExecutorTextBox.Text)
Hint:TweenPosition(UDim2.new(0.5, 0, 0.5, 0),""InOut"",""Sine"",0.2)
Hint.Text = ""Data reloaded!""
end)
 
CopyPlayerDataButton.Name = ""CopyPlayerDataButton""
CopyPlayerDataButton.Parent = PlayerDataFrame
CopyPlayerDataButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
CopyPlayerDataButton.Position = UDim2.new(0, 210, 0.6, 10)
CopyPlayerDataButton.Size = UDim2.new(0, 150, 0, 50)
CopyPlayerDataButton.AutoButtonColor = false
CopyPlayerDataButton.Font = Enum.Font.FredokaOne
CopyPlayerDataButton.Text = ""Copy data""
CopyPlayerDataButton.TextColor3 = Color3.fromRGB(255, 255, 255)
CopyPlayerDataButton.TextSize = 25
CopyPlayerDataButton.BackgroundTransparency = 0.75
 
CopyPlayerDataButtonUICorner.CornerRadius = UDim.new(0, 12)
CopyPlayerDataButtonUICorner.Parent = CopyPlayerDataButton
 
CopyPlayerDataButton.MouseButton1Click:Connect(function()
UIClick:Play()
setclipboard(PlayerIP.Text)
setclipboard(PlayerID.Text)
setclipboard(PlayerDisplayName.Text)
setclipboard(PlayerName.Text)
setclipboard(PlayerAge.Text)
setclipboard(PlayerCountry.Text)
writefile(""ECCS_Searcher_V2.2/Executor.ECCS"", ExecutorTextBox.Text)
Hint:TweenPosition(UDim2.new(0.5, 0, 0.5, 0),""InOut"",""Sine"",0.2)
Hint.Text = ""Data copied!""
end)

ScriptListFrame.Name = ""ScriptListFrame""
ScriptListFrame.Parent = MainFrame
ScriptListFrame.Active = true
ScriptListFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ScriptListFrame.BackgroundTransparency = 1
ScriptListFrame.BorderSizePixel = 0
ScriptListFrame.Position = UDim2.new(0, 70, 0.1, 10)
ScriptListFrame.Size = UDim2.new(0, 380, 0, 199)
ScriptListFrame.ZIndex = 2
ScriptListFrame.CanvasSize = UDim2.new(0, 0, 0, 0)

ScriptAuthor.Name = ""ScriptAuthor""
ScriptAuthor.Parent = ScriptFrame
ScriptAuthor.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ScriptAuthor.BackgroundTransparency = 1.000
ScriptAuthor.Position = UDim2.new(0, 10, 0, 65)
ScriptAuthor.Size = UDim2.new(0, 280, 0, 25)
ScriptAuthor.Font = Enum.Font.FredokaOne
ScriptAuthor.Text = ""By ScriptAuthor""
ScriptAuthor.TextColor3 = Color3.fromRGB(192, 192, 192)
ScriptAuthor.TextSize = 20
ScriptAuthor.TextWrapped = true
ScriptAuthor.TextXAlignment = Enum.TextXAlignment.Left

UIPadding.Parent = ScriptListFrame
UIPadding.PaddingBottom = UDim.new(0, 10)
UIPadding.PaddingLeft = UDim.new(0, 25)
UIPadding.PaddingRight = UDim.new(0, 25)
UIPadding.PaddingTop = UDim.new(0, 10)

Scripts.Name = ""Scripts""
Scripts.Parent = ScriptListFrame

UIGridLayout.Parent = Scripts
UIGridLayout.SortOrder = Enum.SortOrder.LayoutOrder
UIGridLayout.CellPadding = UDim2.new(0, 20, 0, 20)
UIGridLayout.CellSize = UDim2.new(0, 330, 0, 190)

ScriptFrame.Name = ""ScriptFrame""
ScriptFrame.Parent = Scripts
ScriptFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
ScriptFrame.BackgroundTransparency = 0.6
ScriptFrame.Size = UDim2.new(0, 9999, 0, 500)
ScriptFrame.Position = UDim2.new(1.5, 0, 0, 0)

UICorner_6.CornerRadius = UDim.new(0, 12)
UICorner_6.Parent = ScriptFrame

ScriptTitle.Name = ""ScriptTitle""
ScriptTitle.Parent = ScriptFrame
ScriptTitle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ScriptTitle.BackgroundTransparency = 1.000
ScriptTitle.Position = UDim2.new(0, 10, 0, 10)
ScriptTitle.Size = UDim2.new(0, 180, 0, 40)
ScriptTitle.Font = Enum.Font.FredokaOne
ScriptTitle.Text = ""Script Title""
ScriptTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
ScriptTitle.TextScaled = true
ScriptTitle.TextSize = 14.000
ScriptTitle.TextWrapped = true
ScriptTitle.TextXAlignment = Enum.TextXAlignment.Left

ExecuteButton.Name = ""ExecuteButton""
ExecuteButton.Parent = ScriptFrame
ExecuteButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
ExecuteButton.Position = UDim2.new(0.75, 0, 0.75, 0)
ExecuteButton.Size = UDim2.new(0, 75, 0, 30)
ExecuteButton.AutoButtonColor = false
ExecuteButton.Font = Enum.Font.FredokaOne
ExecuteButton.Text = ""Execute""
ExecuteButton.TextColor3 = Color3.fromRGB(255, 255, 255)
ExecuteButton.TextSize = 18
ExecuteButton.BackgroundTransparency = 0.6

UICorner_7.CornerRadius = UDim.new(0, 12)
UICorner_7.Parent = ExecuteButton

DescScriptButton.Name = ""DescScriptButton""
DescScriptButton.Parent = ScriptFrame
DescScriptButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
DescScriptButton.Position = UDim2.new(0.885, 0, 0.02, 0)
DescScriptButton.Size = UDim2.new(0, 35, 0, 35)
DescScriptButton.AutoButtonColor = false
DescScriptButton.Font = Enum.Font.FredokaOne
DescScriptButton.Text = ""i""
DescScriptButton.TextColor3 = Color3.fromRGB(255, 255, 255)
DescScriptButton.TextSize = 22
DescScriptButton.BackgroundTransparency = 0.6

DescScriptButtonUICorner.CornerRadius = UDim.new(0, 12)
DescScriptButtonUICorner.Parent = DescScriptButton

DescScriptButton_2.Name = ""DescScriptButton""
DescScriptButton_2.Parent = VerifiedScriptFrame
DescScriptButton_2.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
DescScriptButton_2.Position = UDim2.new(0.885, 0, 0.02, 0)
DescScriptButton_2.Size = UDim2.new(0, 35, 0, 35)
DescScriptButton_2.AutoButtonColor = false
DescScriptButton_2.Font = Enum.Font.FredokaOne
DescScriptButton_2.Text = ""i""
DescScriptButton_2.TextColor3 = Color3.fromRGB(255, 255, 255)
DescScriptButton_2.TextSize = 22
DescScriptButton_2.BackgroundTransparency = 0.6

DescScriptButtonUICorner_2.CornerRadius = UDim.new(0, 12)
DescScriptButtonUICorner_2.Parent = DescScriptButton_2

AutoExecuteButton.Name = ""AutoExecuteButton""
AutoExecuteButton.Parent = ScriptFrame
AutoExecuteButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
AutoExecuteButton.Position = UDim2.new(0.885, 0, 0.22, 0)
AutoExecuteButton.Size = UDim2.new(0, 35, 0, 35)
AutoExecuteButton.AutoButtonColor = false
AutoExecuteButton.Font = Enum.Font.FredokaOne
AutoExecuteButton.Text = ""★""
AutoExecuteButton.TextColor3 = Color3.fromRGB(255, 255, 255)
AutoExecuteButton.TextSize = 30
AutoExecuteButton.BackgroundTransparency = 0.6

AutoExecuteButtonUICorner.CornerRadius = UDim.new(0, 12)
AutoExecuteButtonUICorner.Parent = AutoExecuteButton

AutoExecuteButton_2.Name = ""AutoExecuteButton""
AutoExecuteButton_2.Parent = VerifiedScriptFrame
AutoExecuteButton_2.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
AutoExecuteButton_2.Position = UDim2.new(0.885, 0, 0.22, 0)
AutoExecuteButton_2.Size = UDim2.new(0, 35, 0, 35)
AutoExecuteButton_2.AutoButtonColor = false
AutoExecuteButton_2.Font = Enum.Font.FredokaOne
AutoExecuteButton_2.Text = ""★""
AutoExecuteButton_2.TextColor3 = Color3.fromRGB(255, 255, 255)
AutoExecuteButton_2.TextSize = 30
AutoExecuteButton_2.BackgroundTransparency = 0.6

AutoExecuteButtonUICorner_2.CornerRadius = UDim.new(0, 12)
AutoExecuteButtonUICorner_2.Parent = AutoExecuteButton_2

OpenInExecutorButton.Name = ""OpenInExecutorButton""
OpenInExecutorButton.Parent = ScriptFrame
OpenInExecutorButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
OpenInExecutorButton.Position = UDim2.new(0.265, 0, 0.75, 0)
OpenInExecutorButton.Size = UDim2.new(0, 75, 0, 30)
OpenInExecutorButton.AutoButtonColor = false
OpenInExecutorButton.Font = Enum.Font.FredokaOne
OpenInExecutorButton.Text = ""OIE""
OpenInExecutorButton.TextColor3 = Color3.fromRGB(255, 255, 255)
OpenInExecutorButton.TextSize = 18
OpenInExecutorButton.BackgroundTransparency = 0.6

OpenInExecutorButtonUICorner.CornerRadius = UDim.new(0, 12)
OpenInExecutorButtonUICorner.Parent = OpenInExecutorButton

OpenInExecutorButton_2.Name = ""OpenInExecutorButton""
OpenInExecutorButton_2.Parent = VerifiedScriptFrame
OpenInExecutorButton_2.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
OpenInExecutorButton_2.Position = UDim2.new(0.265, 0, 0.75, 0)
OpenInExecutorButton_2.Size = UDim2.new(0, 75, 0, 30)
OpenInExecutorButton_2.AutoButtonColor = false
OpenInExecutorButton_2.Font = Enum.Font.FredokaOne
OpenInExecutorButton_2.Text = ""OIE""
OpenInExecutorButton_2.TextColor3 = Color3.fromRGB(255, 255, 255)
OpenInExecutorButton_2.TextSize = 18
OpenInExecutorButton_2.BackgroundTransparency = 0.6

OpenInExecutorButtonUICorner_2.CornerRadius = UDim.new(0, 12)
OpenInExecutorButtonUICorner_2.Parent = OpenInExecutorButton_2

ScriptGame.Name = ""ScriptGame""
ScriptGame.Parent = ScriptFrame
ScriptGame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ScriptGame.BackgroundTransparency = 1
ScriptGame.Position = UDim2.new(0, 10, 0, 100)
ScriptGame.Size = UDim2.new(0, 280, 0, 25)
ScriptGame.Font = Enum.Font.FredokaOne
ScriptGame.Text = ""Game""
ScriptGame.TextColor3 = Color3.fromRGB(192, 192, 192)
ScriptGame.TextSize = 20
ScriptGame.TextWrapped = true
ScriptGame.TextXAlignment = Enum.TextXAlignment.Left

VerifiedScriptFrame.Name = ""VerifiedScriptFrame""
VerifiedScriptFrame.Parent = Scripts
VerifiedScriptFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
VerifiedScriptFrame.Size = UDim2.new(0, 300, 0, 150)
VerifiedScriptFrame.BackgroundTransparency = 0.6

UICorner_9.CornerRadius = UDim.new(0, 12)
UICorner_9.Parent = VerifiedScriptFrame

ScriptTitle_2.Name = ""ScriptTitle""
ScriptTitle_2.Parent = VerifiedScriptFrame
ScriptTitle_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ScriptTitle_2.BackgroundTransparency = 1.000
ScriptTitle_2.Position = UDim2.new(0, 50, 0, 10)
ScriptTitle_2.Size = UDim2.new(0, 240, 0, 40)
ScriptTitle_2.Font = Enum.Font.FredokaOne
ScriptTitle_2.Text = ""Script Title""
ScriptTitle_2.TextColor3 = Color3.fromRGB(255, 255, 255)
ScriptTitle_2.TextScaled = true
ScriptTitle_2.TextSize = 14.000
ScriptTitle_2.TextWrapped = true
ScriptTitle_2.TextXAlignment = Enum.TextXAlignment.Left

VerifiedIcon.Name = ""VerifiedIcon""
VerifiedIcon.Parent = VerifiedScriptFrame
VerifiedIcon.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
VerifiedIcon.BackgroundTransparency = 0
VerifiedIcon.Position = UDim2.new(0, 10, 0, 15)
VerifiedIcon.Size = UDim2.new(0, 40, 0, 30)
VerifiedIcon.Image = ""rbxassetid://15621211889""
VerifiedIcon.BackgroundTransparency = 1

ExecuteButton_2.Name = ""ExecuteButton""
ExecuteButton_2.Parent = VerifiedScriptFrame
ExecuteButton_2.BackgroundColor3 = ExecuteButton.BackgroundColor3
ExecuteButton_2.BackgroundTransparency = 0.6
ExecuteButton_2.Position = UDim2.new(0.75, 0, 0.75, 0)
ExecuteButton_2.Size = UDim2.new(0, 75, 0, 30)
ExecuteButton_2.AutoButtonColor = false
ExecuteButton_2.Font = Enum.Font.FredokaOne
ExecuteButton_2.Text = ""Execute""
ExecuteButton_2.TextColor3 = Color3.fromRGB(255, 255, 255)
ExecuteButton_2.TextSize = 18

UICorner_10.CornerRadius = UDim.new(0, 12)
UICorner_10.Parent = ExecuteButton_2

CopyScriptsButton.Name = ""CopyScriptsButton""
CopyScriptsButton.Parent = ScriptFrame
CopyScriptsButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
CopyScriptsButton.BackgroundTransparency = 0.6
CopyScriptsButton.Position = UDim2.new(0.025, 0, 0.75, 0)
CopyScriptsButton.Size = UDim2.new(0, 75, 0, 30)
CopyScriptsButton.AutoButtonColor = false
CopyScriptsButton.Font = Enum.Font.FredokaOne
CopyScriptsButton.Text = ""Raw""
CopyScriptsButton.TextColor3 = Color3.fromRGB(255, 255, 255)
CopyScriptsButton.TextSize = 18

CopyScriptsButtonUICorner.CornerRadius = UDim.new(0, 12)
CopyScriptsButtonUICorner.Parent = CopyScriptsButton

CopyScriptsButton_2.Name = ""CopyScriptsButton""
CopyScriptsButton_2.Parent = VerifiedScriptFrame
CopyScriptsButton_2.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
CopyScriptsButton_2.BackgroundTransparency = 0.6
CopyScriptsButton_2.Position = UDim2.new(0.025, 0, 0.75, 0)
CopyScriptsButton_2.Size = UDim2.new(0, 75, 0, 30)
CopyScriptsButton_2.AutoButtonColor = false
CopyScriptsButton_2.Font = Enum.Font.FredokaOne
CopyScriptsButton_2.Text = ""Raw""
CopyScriptsButton_2.TextColor3 = Color3.fromRGB(255, 255, 255)
CopyScriptsButton_2.TextSize = 18

CopyScriptsButtonUICorner_2.CornerRadius = UDim.new(0, 12)
CopyScriptsButtonUICorner_2.Parent = CopyScriptsButton_2

CopyLinkButton.Name = ""CopyLinkButton""
CopyLinkButton.Parent = ScriptFrame
CopyLinkButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
CopyLinkButton.BackgroundTransparency = 0.6
CopyLinkButton.Position = UDim2.new(0.51, 0, 0.75, 0)
CopyLinkButton.Size = UDim2.new(0, 75, 0, 30)
CopyLinkButton.AutoButtonColor = false
CopyLinkButton.Font = Enum.Font.FredokaOne
CopyLinkButton.Text = ""Link""
CopyLinkButton.TextColor3 = Color3.fromRGB(255, 255, 255)
CopyLinkButton.TextSize = 18

CopyLinkButtonUICorner.CornerRadius = UDim.new(0, 12)
CopyLinkButtonUICorner.Parent = CopyLinkButton

CopyLinkButton_2.Name = ""CopyLinkButton""
CopyLinkButton_2.Parent = VerifiedScriptFrame
CopyLinkButton_2.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
CopyLinkButton_2.BackgroundTransparency = 0.6
CopyLinkButton_2.Position = UDim2.new(0.51, 0, 0.75, 0)
CopyLinkButton_2.Size = UDim2.new(0, 75, 0, 30)
CopyLinkButton_2.AutoButtonColor = false
CopyLinkButton_2.Font = Enum.Font.FredokaOne
CopyLinkButton_2.Text = ""Link""
CopyLinkButton_2.TextColor3 = Color3.fromRGB(255, 255, 255)
CopyLinkButton_2.TextSize = 18

CopyLinkButtonUICorner_2.CornerRadius = UDim.new(0, 12)
CopyLinkButtonUICorner_2.Parent = CopyLinkButton_2

ScriptAuthor_2.Name = ""ScriptAuthor""
ScriptAuthor_2.Parent = VerifiedScriptFrame
ScriptAuthor_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ScriptAuthor_2.BackgroundTransparency = 1.000
ScriptAuthor_2.Position = ScriptAuthor.Position
ScriptAuthor_2.Size = UDim2.new(0, 280, 0, 25)
ScriptAuthor_2.Font = Enum.Font.FredokaOne
ScriptAuthor_2.Text = ""By ScriptAuthor""
ScriptAuthor_2.TextColor3 = Color3.fromRGB(192, 192, 192)
ScriptAuthor_2.TextSize = 20
ScriptAuthor_2.TextWrapped = true
ScriptAuthor_2.TextXAlignment = Enum.TextXAlignment.Left

ScriptGame_2.Name = ""ScriptGame""
ScriptGame_2.Parent = VerifiedScriptFrame
ScriptGame_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ScriptGame_2.BackgroundTransparency = 1
ScriptGame_2.Position = UDim2.new(0, 10, 0, 100)
ScriptGame_2.Size = UDim2.new(0, 280, 0, 25)
ScriptGame_2.Font = Enum.Font.FredokaOne
ScriptGame_2.Text = ""Game""
ScriptGame_2.TextColor3 = Color3.fromRGB(192, 192, 192)
ScriptGame_2.TextSize = 20
ScriptGame_2.TextWrapped = true
ScriptGame_2.TextXAlignment = Enum.TextXAlignment.Left

ScriptListBackgroundFrame.Name = ""ScriptListBackgroundFrame""
ScriptListBackgroundFrame.Parent = MainFrame
ScriptListBackgroundFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
ScriptListBackgroundFrame.BackgroundTransparency = 0.8
ScriptListBackgroundFrame.Position = UDim2.new(0, 80, 0.1, 10)
ScriptListBackgroundFrame.Size = UDim2.new(0, 360, 0, 200)

UICorner_12.CornerRadius = UDim.new(0, 12)
UICorner_12.Parent = ScriptListBackgroundFrame

InfoBoxDescription.Name = ""InfoBoxDescription""
InfoBoxDescription.Parent = MainFrame
InfoBoxDescription.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
InfoBoxDescription.BackgroundTransparency = 0.7
InfoBoxDescription.Size = UDim2.new(0, 340, 0, 190)
InfoBoxDescription.Font = Enum.Font.FredokaOne
InfoBoxDescription.Text = ""This is a description!""
InfoBoxDescription.TextColor3 = Color3.fromRGB(255, 255, 255)
InfoBoxDescription.TextSize = 5
InfoBoxDescription.TextWrapped = true
InfoBoxDescription.TextScaled = true
InfoBoxDescription.TextXAlignment = Enum.TextXAlignment.Center
InfoBoxDescription.TextYAlignment = Enum.TextYAlignment.Center
InfoBoxDescription.Position = UDim2.new(0, 90, 0.12, 10)
InfoBoxDescription.ZIndex = 2

UIAspectRatioConstraint_2.Parent = InfoBoxDescription
UIAspectRatioConstraint_2.AspectRatio = 1.8

InfoBoxDescription.Visible = false

DescUICorner.CornerRadius = UDim.new(0, 12)
DescUICorner.Parent = InfoBoxDescription

function createfolders(path)
 local pathtbl = string.split(path, ""/"")
 for i, v in pairs(pathtbl) do
  if i == 1 then
   if not isfolder(v) then
    makefolder(v)
   end
  else
   local newpath = pathtbl[1]
   for i2=2, i-1 do
    newpath = newpath.. ""/"" ..pathtbl[i2]
   end
   newpath = newpath.. ""/"" ..v
   if not isfolder(newpath) then
    makefolder(newpath)
   end
  end
 end
end


if not isfolder(""ECCS_Searcher_V2.2"") then
createfolders(""ECCS_Searcher_V2.2"")
end

if not isfile(""ECCS_Searcher_V2.2/Executor.ECCS"") then
writefile(""ECCS_Searcher_V2.2/Executor.ECCS"", ExecutorTextBox.Text)
end

if not isfile(""ECCS_Searcher_V2.2/AutoExecute.ECCS"") then
writefile(""ECCS_Searcher_V2.2/AutoExecute.ECCS"", "" "")
end

local File1 = readfile(""ECCS_Searcher_V2.2/Executor.ECCS"")
ExecutorTextBox.Text = File1

local File2 = readfile(""ECCS_Searcher_V2.2/AutoExecute.ECCS"")
loadstring(File2)()


local getfakeasset = getcustomasset or getsynasset
local HttpService = game:GetService(""HttpService"")
local TextService = game:GetService(""TextService"")

local page = 1
local gquery = """"

function tableConcat(t1,t2)
	for i, v in pairs(t2) do
		table.insert(t1, v)
	end
	return t1
end

ScriptListFrame.AutomaticCanvasSize = Enum.AutomaticSize.Y
ScriptListFrame.ScrollBarImageColor3 = Color3.fromRGB(0, 0, 0)


local VerifiedScript = VerifiedScriptFrame:Clone()
local Script = ScriptFrame:Clone()
ScriptFrame:Destroy()
VerifiedScriptFrame:Destroy()


function fastmodeExec(func)
	if getgenv().fastmode == true then
		task.spawn(func)
	else
		func()
	end
end
function _if(a, b, c)
    if a then return b else return c end
end
function fetchScripts(query, page)
	page = page or 1
	query = HttpService:UrlEncode(query)
	
	local url = _if(query == """", ""https://rscripts.net/api/scripts?page=""..tostring(page), ""https://rscripts.net/api/search?q=""..query..""&max=100&mode=free&page="".. tostring(page))
	local req = HttpService:JSONDecode(game:HttpGetAsync(url)).result
	
	return req.scripts
end

function fixScript(scriptObj)
	if not scriptObj[""script""] or not scriptObj[""owner""] or not scriptObj[""features""] then
		
			local req = HttpService:JSONDecode(game:HttpGetAsync(""https://rscripts.net/api/scripts/"".. scriptObj.slug)).script
			scriptObj[""script""] = _if(scriptObj[""script""], scriptObj[""script""], req.script)
			scriptObj[""features""] = _if(scriptObj[""features""], scriptObj[""features""], req.features)
			scriptObj[""owner""] = _if(scriptObj[""owner""], scriptObj[""owner""], req.owner)
		end
	
	return scriptObj
end

function refreshScripts(scriptTbl)
	if #scriptTbl <= 0 then
      SearchBox.Text = """"
      SearchBox.PlaceholderText = ""No Script Founded""
UINoScriptsFound:Play()
wait(1)
SearchBox.PlaceholderText = ""ECCS•Searcher""
		return
	else
SearchBox.PlaceholderText = ""ECCS•Searcher""
	end
	
	local UIGridLayoutCopy = Scripts.UIGridLayout:Clone()
	Scripts:ClearAllChildren()
	UIGridLayoutCopy.Parent = Scripts
	
	addScripts(scriptTbl)
end

function addScripts(scriptTbl)
	for i, v in pairs(scriptTbl) do
		fastmodeExec(function()
			local newScript

			v = fixScript(v)

			if v.verified == true then
				newScript = VerifiedScript:Clone()
				newScript.ScriptTitle.Text = v.title
				newScript.ScriptAuthor.Text = ""By "".. v.owner.username
				newScript.ScriptGame.Text = v.game.name
				newScript.Parent = Scripts
			else
				newScript = Script:Clone()
				newScript.ScriptTitle.Text = v.title
				newScript.ScriptAuthor.Text = ""By "".. v.owner.username
				newScript.ScriptGame.Text = v.game.name
				newScript.Parent = Scripts
			end


			newScript.DescScriptButton.MouseButton1Click:Connect(function()
			UIClick:Play()
			ScriptListFrame.Visible = false
			InfoBoxDescription.Visible = true
            InfoBoxDescription.Text = v.features or ""API ERROR!""
			end)
            
			newScript.ExecuteButton.MouseButton1Click:Connect(function()
			UIClick:Play()
			loadstring(v.script)()
Hint:TweenPosition(UDim2.new(0.5, 0, 0.5, 0),""InOut"",""Sine"",0.2)
Hint.Text = ""Script executed!""
			end)
			newScript.OpenInExecutorButton.MouseButton1Click:Connect(function()
          	UIClick:Play()
Hint:TweenPosition(UDim2.new(0.5, 0, 0.5, 0),""InOut"",""Sine"",0.2)
Hint.Text = ""Script opened in executor!""
   ExecutorTextBox.Text = """"..v.script
ScriptListFrame.Visible = false
PlayerDataFrame.Visible = false
DevelopersFrame.Visible = false
ExecutorMenuScrollingFrame.Visible = true
ClearTextBoxButton.Visible = true
CopyTextBoxButton.Visible = true
PasteScriptButton.Visible = true
ExecuteTextBoxButton.Visible = true
InfoBoxDescription.Visible = false
PlayerIcon.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
DevelopersButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
SearcherMenuButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
ExecutorMenuButton.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
writefile(""ECCS_Searcher_V2.2/Executor.ECCS"", ExecutorTextBox.Text)
			end)
			newScript.CopyScriptsButton.MouseButton1Click:Connect(function()
		   setclipboard(v.script)
Hint:TweenPosition(UDim2.new(0.5, 0, 0.5, 0),""InOut"",""Sine"",0.2)
Hint.Text = ""Script copied into your clipboard!""
UIClick:Play()
	       end)
newScript.AutoExecuteButton.MouseButton1Click:Connect(function()
UIClick:Play()
if File2 ~= v.script then
writefile(""ECCS_Searcher_V2.2/AutoExecute.ECCS"", v.script)
Hint:TweenPosition(UDim2.new(0.5, 0, 0.5, 0),""InOut"",""Sine"",0.2)
Hint.Text = ""Script added in autoexecute!""
else
if File2 == v.script then
writefile(""ECCS_Searcher_V2.2/AutoExecute.ECCS"", "" "")
Hint:TweenPosition(UDim2.new(0.5, 0, 0.5, 0),""InOut"",""Sine"",0.2)
Hint.Text = ""Script removed from autoexecute!""
end
end
end)



			newScript.CopyLinkButton.MouseButton1Click:Connect(function()
            setclipboard(""https://rscripts.net/script/"".. v.slug)
UIClick:Play()
Hint:TweenPosition(UDim2.new(0.5, 0, 0.5, 0),""InOut"",""Sine"",0.2)
Hint.Text = ""Link copied into your clipboard!""
            end)
		end)
	end
	
	pagefetchrunning = false
end

SearchBox.FocusLost:Connect(function(enterPressed)
	if enterPressed then
UIClick:Play()
PasteScriptButton.Visible = false
ScriptListFrame.Visible = true
PlayerDataFrame.Visible = false
ExecutorMenuScrollingFrame.Visible = false
ClearTextBoxButton.Visible = false
CopyTextBoxButton.Visible = false
ExecuteTextBoxButton.Visible = false
DevelopersFrame.Visible = false
InfoBoxDescription.Visible = false
PlayerIcon.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
DevelopersButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
SearcherMenuButton.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
ExecutorMenuButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
writefile(""ECCS_Searcher_V2.2/Executor.ECCS"", ExecutorTextBox.Text)
		gquery = SearchBox.Text
		page = 1
		local scriptsTbl = fetchScripts(SearchBox.Text, 1)
		refreshScripts(scriptsTbl)
	end
end)

SearchButton.MouseButton1Click:Connect(function()
UIClick:Play()
PasteScriptButton.Visible = false
ScriptListFrame.Visible = true
PlayerDataFrame.Visible = false
ExecutorMenuScrollingFrame.Visible = false
ClearTextBoxButton.Visible = false
CopyTextBoxButton.Visible = false
ExecuteTextBoxButton.Visible = false
DevelopersFrame.Visible = false
InfoBoxDescription.Visible = false
PlayerIcon.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
DevelopersButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
SearcherMenuButton.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
ExecutorMenuButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
writefile(""ECCS_Searcher_V2.2/Executor.ECCS"", ExecutorTextBox.Text)
gquery = SearchBox.Text
		page = 1
		local scriptsTbl = fetchScripts(SearchBox.Text, 1)
		refreshScripts(scriptsTbl)
end)
InfoBoxDescription.MouseButton1Click:Connect(function()
UIClick:Play()
ScriptListFrame.Visible = true
InfoBoxDescription.Visible = false
end)
local gui = MainFrame
MainFrame:TweenPosition(UDim2.new(0.5, 0, 0.5, 0),""InOut"",""Sine"",0.3)
Hint:TweenPosition(UDim2.new(0.5, 0, 0.5, 0),""InOut"",""Sine"",0.2)
local dragging
local dragInput
local dragStart
local startPos
Loading:Destroy()

local function update(input)
	local delta = input.Position - dragStart
	gui.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
end

gui.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
		dragging = true
		dragStart = input.Position
		startPos = gui.Position

		input.Changed:Connect(function()
			if input.UserInputState == Enum.UserInputState.End then
				dragging = false
			end
		end)
	end
end)

gui.InputChanged:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
		dragInput = input
	end
end)

UserInputService.InputChanged:Connect(function(input)
	if input == dragInput and dragging then
		update(input)
	end
end)
refreshScripts(fetchScripts(gquery, 1))

ScriptListFrame:GetPropertyChangedSignal(""CanvasPosition""):Connect(function()
	if (ScriptListFrame.CanvasPosition.Y + ScriptListFrame.AbsoluteSize.Y) >= ScriptListFrame.AbsoluteCanvasSize.Y -200 and not pagefetchrunning then
		page = page + 1
		pagefetchrunning = true
		addScripts(fetchScripts(gquery, page))
	end
end)"
LTR9Tu0i,electro template (modified),hsianghui,HTML,Tuesday 21st of May 2024 02:38:42 PM CDT,"<!DOCTYPE html>
<html lang=""en"">
  <head>
    <meta charset=""utf-8"" />
    <meta http-equiv=""X-UA-Compatible"" content=""IE=edge"" />
    <meta name=""viewport"" content=""width=device-width, initial-scale=1"" />
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->

    <title>Electro - HTML Ecommerce Template</title>

    <!-- Google font -->
    <link
      href=""https://fonts.googleapis.com/css?family=Montserrat:400,500,700""
      rel=""stylesheet""
    />

    <!-- Bootstrap -->
    <link type=""text/css"" rel=""stylesheet"" href=""css/bootstrap.min.css"" />

    <!-- Slick -->
    <link type=""text/css"" rel=""stylesheet"" href=""css/slick.css"" />
    <link type=""text/css"" rel=""stylesheet"" href=""css/slick-theme.css"" />

    <!-- nouislider -->
    <link type=""text/css"" rel=""stylesheet"" href=""css/nouislider.min.css"" />

    <!-- Font Awesome Icon -->
    <link rel=""stylesheet"" href=""css/font-awesome.min.css"" />

    <!-- Custom stlylesheet -->
    <link type=""text/css"" rel=""stylesheet"" href=""css/style.css"" />

    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src=""https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js""></script>
      <script src=""https://oss.maxcdn.com/respond/1.4.2/respond.min.js""></script>
    <![endif]-->
  </head>
  <body>
    <!-- HEADER -->
    <header>
      <!-- TOP HEADER -->
      <div id=""top-header"">
        <div class=""container"">
          <ul class=""header-links pull-left"">
            <li>
              <a href=""#""><i class=""fa fa-phone""></i> +021-95-51-84</a>
            </li>
            <li>
              <a href=""#""><i class=""fa fa-envelope-o""></i> email@email.com</a>
            </li>
            <li>
              <a href=""#""
                ><i class=""fa fa-map-marker""></i> 1734 Stonecoal Road</a
              >
            </li>
          </ul>
          <ul class=""header-links pull-right"">
            <li>
              <a href=""#""><i class=""fa fa-dollar""></i> USD</a>
            </li>
            <li>
              <a href=""#""><i class=""fa fa-user-o""></i> My Account</a>
            </li>
          </ul>
        </div>
      </div>
      <!-- /TOP HEADER -->

      <!-- MAIN HEADER -->
      <div id=""header"">
        <!-- container -->
        <div class=""container"">
          <!-- row -->
          <div class=""row"">
            <!-- LOGO -->
            <div class=""col-md-3"">
              <div class=""header-logo"">
                <a href=""#"" class=""logo"">
                  <img src=""./img/logo.png"" alt="""" />
                </a>
              </div>
            </div>
            <!-- /LOGO -->

            <!-- SEARCH BAR -->
            <div class=""col-md-6"">
              <div class=""header-search"">
                <form>
                  <select class=""input-select"">
                    <option value=""0"">All Categories</option>
                    <option value=""1"">Category 01</option>
                    <option value=""1"">Category 02</option>
                  </select>
                  <input class=""input"" placeholder=""Search here"" />
                  <button class=""search-btn"">Search</button>
                </form>
              </div>
            </div>
            <!-- /SEARCH BAR -->

            <!-- ACCOUNT -->
            <div class=""col-md-3 clearfix"">
              <div class=""header-ctn"">
                <!-- Wishlist -->
                <div>
                  <a href=""#"">
                    <i class=""fa fa-heart-o""></i>
                    <span>Your Wishlist</span>
                    <div class=""qty"">2</div>
                  </a>
                </div>
                <!-- /Wishlist -->

                <!-- Cart -->
                <div class=""dropdown"">
                  <a
                    class=""dropdown-toggle""
                    data-toggle=""dropdown""
                    aria-expanded=""true""
                  >
                    <i class=""fa fa-shopping-cart""></i>
                    <span>Your Cart</span>
                    <div class=""qty"">3</div>
                  </a>
                  <div class=""cart-dropdown"">
                    <div class=""cart-list"">
                      <div class=""product-widget"">
                        <div class=""product-img"">
                          <img src=""./img/product01.png"" alt="""" />
                        </div>
                        <div class=""product-body"">
                          <h3 class=""product-name"">
                            <a href=""#"">product name goes here</a>
                          </h3>
                          <h4 class=""product-price"">
                            <span class=""qty"">1x</span>$980.00
                          </h4>
                        </div>
                        <button class=""delete"">
                          <i class=""fa fa-close""></i>
                        </button>
                      </div>

                      <div class=""product-widget"">
                        <div class=""product-img"">
                          <img src=""./img/product02.png"" alt="""" />
                        </div>
                        <div class=""product-body"">
                          <h3 class=""product-name"">
                            <a href=""#"">product name goes here</a>
                          </h3>
                          <h4 class=""product-price"">
                            <span class=""qty"">3x</span>$980.00
                          </h4>
                        </div>
                        <button class=""delete"">
                          <i class=""fa fa-close""></i>
                        </button>
                      </div>
                    </div>
                    <div class=""cart-summary"">
                      <small>3 Item(s) selected</small>
                      <h5>SUBTOTAL: $2940.00</h5>
                    </div>
                    <div class=""cart-btns"">
                      <a href=""#"">View Cart</a>
                      <a href=""#""
                        >Checkout <i class=""fa fa-arrow-circle-right""></i
                      ></a>
                    </div>
                  </div>
                </div>
                <!-- /Cart -->

                <!-- Menu Toogle -->
                <div class=""menu-toggle"">
                  <a href=""#"">
                    <i class=""fa fa-bars""></i>
                    <span>Menu</span>
                  </a>
                </div>
                <!-- /Menu Toogle -->
              </div>
            </div>
            <!-- /ACCOUNT -->
          </div>
          <!-- row -->
        </div>
        <!-- container -->
      </div>
      <!-- /MAIN HEADER -->
    </header>
    <!-- /HEADER -->

    <!-- NAVIGATION -->
    <nav id=""navigation"">
      <!-- container -->
      <div class=""container"">
        <!-- responsive-nav -->
        <div id=""responsive-nav"">
          <!-- newly added-->
          <div id=""categorylist1"">
            <!-- NAV -->
            <ul class=""main-nav nav navbar-nav"">
              <li class=""active""><a href=""#"">Home</a></li>
              <li><a href=""#"">Hot Deals</a></li>
              <li><a href=""#"">Categories</a></li>
              <li><a href=""#"">Laptops</a></li>
              <li><a href=""#"">Smartphones</a></li>
              <li><a href=""#"">Cameras</a></li>
              <li><a href=""#"">Accessories</a></li>
            </ul>
            <!-- /NAV -->
          </div>
          <!-- newly added-->
        </div>
        <!-- /responsive-nav -->
      </div>
      <!-- /container -->
    </nav>
    <!-- /NAVIGATION -->

    <!-- SECTION -->
    <div class=""section"">
      <!-- container -->
      <div class=""container"">
        <!-- row -->
        <div class=""row"">
          <!-- shop -->
          <div class=""col-md-4 col-xs-6"">
            <div class=""shop"">
              <div class=""shop-img"">
                <img src=""./img/shop01.png"" alt="""" />
              </div>
              <div class=""shop-body"">
                <h3>Laptop<br />Collection</h3>
                <a href=""#"" class=""cta-btn""
                  >Shop now <i class=""fa fa-arrow-circle-right""></i
                ></a>
              </div>
            </div>
          </div>
          <!-- /shop -->

          <!-- shop -->
          <div class=""col-md-4 col-xs-6"">
            <div class=""shop"">
              <div class=""shop-img"">
                <img src=""./img/shop03.png"" alt="""" />
              </div>
              <div class=""shop-body"">
                <h3>Accessories<br />Collection</h3>
                <a href=""#"" class=""cta-btn""
                  >Shop now <i class=""fa fa-arrow-circle-right""></i
                ></a>
              </div>
            </div>
          </div>
          <!-- /shop -->

          <!-- shop -->
          <div class=""col-md-4 col-xs-6"">
            <div class=""shop"">
              <div class=""shop-img"">
                <img src=""./img/shop02.png"" alt="""" />
              </div>
              <div class=""shop-body"">
                <h3>Cameras<br />Collection</h3>
                <a href=""#"" class=""cta-btn""
                  >Shop now <i class=""fa fa-arrow-circle-right""></i
                ></a>
              </div>
            </div>
          </div>
          <!-- /shop -->
        </div>
        <!-- /row -->
      </div>
      <!-- /container -->
    </div>
    <!-- /SECTION -->

    <!-- SECTION -->
    <div class=""section"">
      <!-- container -->
      <div class=""container"">
        <!-- row -->
        <div class=""row"">
          <!-- section title -->
          <div class=""col-md-12"">
            <div class=""section-title"">
              <h3 class=""title"">New Products</h3>
              <div class=""section-nav"">
                <!-- newly added-->
                <div class=""top-categories"">
                  <ul class=""section-tab-nav tab-nav"">
                    <li class=""active"">
                      <a data-toggle=""tab"" href=""#tab1"">Laptops</a>
                    </li>
                    <li><a data-toggle=""tab"" href=""#tab1"">Smartphones</a></li>
                    <li><a data-toggle=""tab"" href=""#tab1"">Cameras</a></li>
                    <li><a data-toggle=""tab"" href=""#tab1"">Accessories</a></li>
                  </ul>
                </div>
                <!-- newly added-->
              </div>
            </div>
          </div>
          <!-- /section title -->

          <!-- Products tab & slick -->
          <div class=""col-md-12"">
            <div class=""row"">
              <div class=""products-tabs"">
                <!-- tab -->
                <div id=""tab1"" class=""tab-pane active"">
                  <div class=""products-slick"" data-nav=""#slick-nav-1"">
                    <!-- product -->
                    <div class=""product"">
                      <div class=""product-img"">
                        <img src=""./img/product01.png"" alt="""" />
                        <div class=""product-label"">
                          <span class=""sale"">-30%</span>
                          <span class=""new"">NEW</span>
                        </div>
                      </div>
                      <div class=""product-body"">
                        <p class=""product-category"">Category</p>
                        <h3 class=""product-name"">
                          <a href=""#"">product name goes here</a>
                        </h3>
                        <h4 class=""product-price"">
                          $980.00 <del class=""product-old-price"">$990.00</del>
                        </h4>
                        <div class=""product-rating"">
                          <i class=""fa fa-star""></i>
                          <i class=""fa fa-star""></i>
                          <i class=""fa fa-star""></i>
                          <i class=""fa fa-star""></i>
                          <i class=""fa fa-star""></i>
                        </div>
                        <div class=""product-btns"">
                          <button class=""add-to-wishlist"">
                            <i class=""fa fa-heart-o""></i
                            ><span class=""tooltipp"">add to wishlist</span>
                          </button>
                          <button class=""add-to-compare"">
                            <i class=""fa fa-exchange""></i
                            ><span class=""tooltipp"">add to compare</span>
                          </button>
                          <button class=""quick-view"">
                            <i class=""fa fa-eye""></i
                            ><span class=""tooltipp"">quick view</span>
                          </button>
                        </div>
                      </div>
                      <div class=""add-to-cart"">
                        <button class=""add-to-cart-btn"">
                          <i class=""fa fa-shopping-cart""></i> add to cart
                        </button>
                      </div>
                    </div>
                    <!-- /product -->

                    <!-- product -->
                    <div class=""product"">
                      <div class=""product-img"">
                        <img src=""./img/product02.png"" alt="""" />
                        <div class=""product-label"">
                          <span class=""new"">NEW</span>
                        </div>
                      </div>
                      <div class=""product-body"">
                        <p class=""product-category"">Category</p>
                        <h3 class=""product-name"">
                          <a href=""#"">product name goes here</a>
                        </h3>
                        <h4 class=""product-price"">
                          $980.00 <del class=""product-old-price"">$990.00</del>
                        </h4>
                        <div class=""product-rating"">
                          <i class=""fa fa-star""></i>
                          <i class=""fa fa-star""></i>
                          <i class=""fa fa-star""></i>
                          <i class=""fa fa-star""></i>
                          <i class=""fa fa-star-o""></i>
                        </div>
                        <div class=""product-btns"">
                          <button class=""add-to-wishlist"">
                            <i class=""fa fa-heart-o""></i
                            ><span class=""tooltipp"">add to wishlist</span>
                          </button>
                          <button class=""add-to-compare"">
                            <i class=""fa fa-exchange""></i
                            ><span class=""tooltipp"">add to compare</span>
                          </button>
                          <button class=""quick-view"">
                            <i class=""fa fa-eye""></i
                            ><span class=""tooltipp"">quick view</span>
                          </button>
                        </div>
                      </div>
                      <div class=""add-to-cart"">
                        <button class=""add-to-cart-btn"">
                          <i class=""fa fa-shopping-cart""></i> add to cart
                        </button>
                      </div>
                    </div>
                    <!-- /product -->

                    <!-- product -->
                    <div class=""product"">
                      <div class=""product-img"">
                        <img src=""./img/product03.png"" alt="""" />
                        <div class=""product-label"">
                          <span class=""sale"">-30%</span>
                        </div>
                      </div>
                      <div class=""product-body"">
                        <p class=""product-category"">Category</p>
                        <h3 class=""product-name"">
                          <a href=""#"">product name goes here</a>
                        </h3>
                        <h4 class=""product-price"">
                          $980.00 <del class=""product-old-price"">$990.00</del>
                        </h4>
                        <div class=""product-rating""></div>
                        <div class=""product-btns"">
                          <button class=""add-to-wishlist"">
                            <i class=""fa fa-heart-o""></i
                            ><span class=""tooltipp"">add to wishlist</span>
                          </button>
                          <button class=""add-to-compare"">
                            <i class=""fa fa-exchange""></i
                            ><span class=""tooltipp"">add to compare</span>
                          </button>
                          <button class=""quick-view"">
                            <i class=""fa fa-eye""></i
                            ><span class=""tooltipp"">quick view</span>
                          </button>
                        </div>
                      </div>
                      <div class=""add-to-cart"">
                        <button class=""add-to-cart-btn"">
                          <i class=""fa fa-shopping-cart""></i> add to cart
                        </button>
                      </div>
                    </div>
                    <!-- /product -->

                    <!-- product -->
                    <div class=""product"">
                      <div class=""product-img"">
                        <img src=""./img/product04.png"" alt="""" />
                      </div>
                      <div class=""product-body"">
                        <p class=""product-category"">Category</p>
                        <h3 class=""product-name"">
                          <a href=""#"">product name goes here</a>
                        </h3>
                        <h4 class=""product-price"">
                          $980.00 <del class=""product-old-price"">$990.00</del>
                        </h4>
                        <div class=""product-rating"">
                          <i class=""fa fa-star""></i>
                          <i class=""fa fa-star""></i>
                          <i class=""fa fa-star""></i>
                          <i class=""fa fa-star""></i>
                          <i class=""fa fa-star""></i>
                        </div>
                        <div class=""product-btns"">
                          <button class=""add-to-wishlist"">
                            <i class=""fa fa-heart-o""></i
                            ><span class=""tooltipp"">add to wishlist</span>
                          </button>
                          <button class=""add-to-compare"">
                            <i class=""fa fa-exchange""></i
                            ><span class=""tooltipp"">add to compare</span>
                          </button>
                          <button class=""quick-view"">
                            <i class=""fa fa-eye""></i
                            ><span class=""tooltipp"">quick view</span>
                          </button>
                        </div>
                      </div>
                      <div class=""add-to-cart"">
                        <button class=""add-to-cart-btn"">
                          <i class=""fa fa-shopping-cart""></i> add to cart
                        </button>
                      </div>
                    </div>
                    <!-- /product -->

                    <!-- product -->
                    <div class=""product"">
                      <div class=""product-img"">
                        <img src=""./img/product05.png"" alt="""" />
                      </div>
                      <div class=""product-body"">
                        <p class=""product-category"">Category</p>
                        <h3 class=""product-name"">
                          <a href=""#"">product name goes here</a>
                        </h3>
                        <h4 class=""product-price"">
                          $980.00 <del class=""product-old-price"">$990.00</del>
                        </h4>
                        <div class=""product-rating"">
                          <i class=""fa fa-star""></i>
                          <i class=""fa fa-star""></i>
                          <i class=""fa fa-star""></i>
                          <i class=""fa fa-star""></i>
                          <i class=""fa fa-star""></i>
                        </div>
                        <div class=""product-btns"">
                          <button class=""add-to-wishlist"">
                            <i class=""fa fa-heart-o""></i
                            ><span class=""tooltipp"">add to wishlist</span>
                          </button>
                          <button class=""add-to-compare"">
                            <i class=""fa fa-exchange""></i
                            ><span class=""tooltipp"">add to compare</span>
                          </button>
                          <button class=""quick-view"">
                            <i class=""fa fa-eye""></i
                            ><span class=""tooltipp"">quick view</span>
                          </button>
                        </div>
                      </div>
                      <div class=""add-to-cart"">
                        <button class=""add-to-cart-btn"">
                          <i class=""fa fa-shopping-cart""></i> add to cart
                        </button>
                      </div>
                    </div>
                    <!-- /product -->
                  </div>
                  <div id=""slick-nav-1"" class=""products-slick-nav""></div>
                </div>
                <!-- /tab -->
              </div>
            </div>
          </div>
          <!-- Products tab & slick -->
        </div>
        <!-- /row -->
      </div>
      <!-- /container -->
    </div>
    <!-- /SECTION -->

    <!-- HOT DEAL SECTION -->
    <div id=""hot-deal"" class=""section"">
      <!-- container -->
      <div class=""container"">
        <!-- row -->
        <div class=""row"">
          <div class=""col-md-12"">
            <div class=""hot-deal"">
              <ul class=""hot-deal-countdown"">
                <li>
                  <div>
                    <h3>02</h3>
                    <span>Days</span>
                  </div>
                </li>
                <li>
                  <div>
                    <h3>10</h3>
                    <span>Hours</span>
                  </div>
                </li>
                <li>
                  <div>
                    <h3>34</h3>
                    <span>Mins</span>
                  </div>
                </li>
                <li>
                  <div>
                    <h3>60</h3>
                    <span>Secs</span>
                  </div>
                </li>
              </ul>
              <h2 class=""text-uppercase"">hot deal this week</h2>
              <p>New Collection Up to 50% OFF</p>
              <a class=""primary-btn cta-btn"" href=""#"">Shop now</a>
            </div>
          </div>
        </div>
        <!-- /row -->
      </div>
      <!-- /container -->
    </div>
    <!-- /HOT DEAL SECTION -->

    <!-- SECTION -->
    <div class=""section"">
      <!-- container -->
      <div class=""container"">
        <!-- row -->
        <div class=""row"">
          <!-- section title -->
          <div class=""col-md-12"">
            <div class=""section-title"">
              <h3 class=""title"">Top selling</h3>
              <div class=""section-nav"">
                <!-- newly added-->
                <div class=""top-categories"">
                  <ul class=""section-tab-nav tab-nav"">
                    <li class=""active"">
                      <a data-toggle=""tab"" href=""#tab2"">Laptops</a>
                    </li>
                    <li><a data-toggle=""tab"" href=""#tab2"">Smartphones</a></li>
                    <li><a data-toggle=""tab"" href=""#tab2"">Cameras</a></li>
                    <li><a data-toggle=""tab"" href=""#tab2"">Accessories</a></li>
                  </ul>
                </div>
                <!-- newly added-->
              </div>
            </div>
          </div>
          <!-- /section title -->

          <!-- Products tab & slick -->
          <div class=""col-md-12"">
            <div class=""row"">
              <div class=""products-tabs"">
                <!-- tab -->
                <div id=""tab2"" class=""tab-pane fade in active"">
                  <div class=""products-slick"" data-nav=""#slick-nav-2"">
                    <!-- product -->
                    <div class=""product"">
                      <div class=""product-img"">
                        <img src=""./img/product06.png"" alt="""" />
                        <div class=""product-label"">
                          <span class=""sale"">-30%</span>
                          <span class=""new"">NEW</span>
                        </div>
                      </div>
                      <div class=""product-body"">
                        <p class=""product-category"">Category</p>
                        <h3 class=""product-name"">
                          <a href=""#"">product name goes here</a>
                        </h3>
                        <h4 class=""product-price"">
                          $980.00 <del class=""product-old-price"">$990.00</del>
                        </h4>
                        <div class=""product-rating"">
                          <i class=""fa fa-star""></i>
                          <i class=""fa fa-star""></i>
                          <i class=""fa fa-star""></i>
                          <i class=""fa fa-star""></i>
                          <i class=""fa fa-star""></i>
                        </div>
                        <div class=""product-btns"">
                          <button class=""add-to-wishlist"">
                            <i class=""fa fa-heart-o""></i
                            ><span class=""tooltipp"">add to wishlist</span>
                          </button>
                          <button class=""add-to-compare"">
                            <i class=""fa fa-exchange""></i
                            ><span class=""tooltipp"">add to compare</span>
                          </button>
                          <button class=""quick-view"">
                            <i class=""fa fa-eye""></i
                            ><span class=""tooltipp"">quick view</span>
                          </button>
                        </div>
                      </div>
                      <div class=""add-to-cart"">
                        <button class=""add-to-cart-btn"">
                          <i class=""fa fa-shopping-cart""></i> add to cart
                        </button>
                      </div>
                    </div>
                    <!-- /product -->

                    <!-- product -->
                    <div class=""product"">
                      <div class=""product-img"">
                        <img src=""./img/product07.png"" alt="""" />
                        <div class=""product-label"">
                          <span class=""new"">NEW</span>
                        </div>
                      </div>
                      <div class=""product-body"">
                        <p class=""product-category"">Category</p>
                        <h3 class=""product-name"">
                          <a href=""#"">product name goes here</a>
                        </h3>
                        <h4 class=""product-price"">
                          $980.00 <del class=""product-old-price"">$990.00</del>
                        </h4>
                        <div class=""product-rating"">
                          <i class=""fa fa-star""></i>
                          <i class=""fa fa-star""></i>
                          <i class=""fa fa-star""></i>
                          <i class=""fa fa-star""></i>
                          <i class=""fa fa-star-o""></i>
                        </div>
                        <div class=""product-btns"">
                          <button class=""add-to-wishlist"">
                            <i class=""fa fa-heart-o""></i
                            ><span class=""tooltipp"">add to wishlist</span>
                          </button>
                          <button class=""add-to-compare"">
                            <i class=""fa fa-exchange""></i
                            ><span class=""tooltipp"">add to compare</span>
                          </button>
                          <button class=""quick-view"">
                            <i class=""fa fa-eye""></i
                            ><span class=""tooltipp"">quick view</span>
                          </button>
                        </div>
                      </div>
                      <div class=""add-to-cart"">
                        <button class=""add-to-cart-btn"">
                          <i class=""fa fa-shopping-cart""></i> add to cart
                        </button>
                      </div>
                    </div>
                    <!-- /product -->

                    <!-- product -->
                    <div class=""product"">
                      <div class=""product-img"">
                        <img src=""./img/product08.png"" alt="""" />
                        <div class=""product-label"">
                          <span class=""sale"">-30%</span>
                        </div>
                      </div>
                      <div class=""product-body"">
                        <p class=""product-category"">Category</p>
                        <h3 class=""product-name"">
                          <a href=""#"">product name goes here</a>
                        </h3>
                        <h4 class=""product-price"">
                          $980.00 <del class=""product-old-price"">$990.00</del>
                        </h4>
                        <div class=""product-rating""></div>
                        <div class=""product-btns"">
                          <button class=""add-to-wishlist"">
                            <i class=""fa fa-heart-o""></i
                            ><span class=""tooltipp"">add to wishlist</span>
                          </button>
                          <button class=""add-to-compare"">
                            <i class=""fa fa-exchange""></i
                            ><span class=""tooltipp"">add to compare</span>
                          </button>
                          <button class=""quick-view"">
                            <i class=""fa fa-eye""></i
                            ><span class=""tooltipp"">quick view</span>
                          </button>
                        </div>
                      </div>
                      <div class=""add-to-cart"">
                        <button class=""add-to-cart-btn"">
                          <i class=""fa fa-shopping-cart""></i> add to cart
                        </button>
                      </div>
                    </div>
                    <!-- /product -->

                    <!-- product -->
                    <div class=""product"">
                      <div class=""product-img"">
                        <img src=""./img/product09.png"" alt="""" />
                      </div>
                      <div class=""product-body"">
                        <p class=""product-category"">Category</p>
                        <h3 class=""product-name"">
                          <a href=""#"">product name goes here</a>
                        </h3>
                        <h4 class=""product-price"">
                          $980.00 <del class=""product-old-price"">$990.00</del>
                        </h4>
                        <div class=""product-rating"">
                          <i class=""fa fa-star""></i>
                          <i class=""fa fa-star""></i>
                          <i class=""fa fa-star""></i>
                          <i class=""fa fa-star""></i>
                          <i class=""fa fa-star""></i>
                        </div>
                        <div class=""product-btns"">
                          <button class=""add-to-wishlist"">
                            <i class=""fa fa-heart-o""></i
                            ><span class=""tooltipp"">add to wishlist</span>
                          </button>
                          <button class=""add-to-compare"">
                            <i class=""fa fa-exchange""></i
                            ><span class=""tooltipp"">add to compare</span>
                          </button>
                          <button class=""quick-view"">
                            <i class=""fa fa-eye""></i
                            ><span class=""tooltipp"">quick view</span>
                          </button>
                        </div>
                      </div>
                      <div class=""add-to-cart"">
                        <button class=""add-to-cart-btn"">
                          <i class=""fa fa-shopping-cart""></i> add to cart
                        </button>
                      </div>
                    </div>
                    <!-- /product -->

                    <!-- product -->
                    <div class=""product"">
                      <div class=""product-img"">
                        <img src=""./img/product01.png"" alt="""" />
                      </div>
                      <div class=""product-body"">
                        <p class=""product-category"">Category</p>
                        <h3 class=""product-name"">
                          <a href=""#"">product name goes here</a>
                        </h3>
                        <h4 class=""product-price"">
                          $980.00 <del class=""product-old-price"">$990.00</del>
                        </h4>
                        <div class=""product-rating"">
                          <i class=""fa fa-star""></i>
                          <i class=""fa fa-star""></i>
                          <i class=""fa fa-star""></i>
                          <i class=""fa fa-star""></i>
                          <i class=""fa fa-star""></i>
                        </div>
                        <div class=""product-btns"">
                          <button class=""add-to-wishlist"">
                            <i class=""fa fa-heart-o""></i
                            ><span class=""tooltipp"">add to wishlist</span>
                          </button>
                          <button class=""add-to-compare"">
                            <i class=""fa fa-exchange""></i
                            ><span class=""tooltipp"">add to compare</span>
                          </button>
                          <button class=""quick-view"">
                            <i class=""fa fa-eye""></i
                            ><span class=""tooltipp"">quick view</span>
                          </button>
                        </div>
                      </div>
                      <div class=""add-to-cart"">
                        <button class=""add-to-cart-btn"">
                          <i class=""fa fa-shopping-cart""></i> add to cart
                        </button>
                      </div>
                    </div>
                    <!-- /product -->
                  </div>
                  <div id=""slick-nav-2"" class=""products-slick-nav""></div>
                </div>
                <!-- /tab -->
              </div>
            </div>
          </div>
          <!-- /Products tab & slick -->
        </div>
        <!-- /row -->
      </div>
      <!-- /container -->
    </div>
    <!-- /SECTION -->

    <!-- SECTION -->
    <div class=""section"">
      <!-- container -->
      <div class=""container"">
        <!-- row -->
        <div class=""row"">
          <div class=""col-md-4 col-xs-6"">
            <div class=""section-title"">
              <h4 class=""title"">Top selling</h4>
              <div class=""section-nav"">
                <div id=""slick-nav-3"" class=""products-slick-nav""></div>
              </div>
            </div>

            <div class=""products-widget-slick"" data-nav=""#slick-nav-3"">
              <div>
                <!-- product widget -->
                <div class=""product-widget"">
                  <div class=""product-img"">
                    <img src=""./img/product07.png"" alt="""" />
                  </div>
                  <div class=""product-body"">
                    <p class=""product-category"">Category</p>
                    <h3 class=""product-name"">
                      <a href=""#"">product name goes here</a>
                    </h3>
                    <h4 class=""product-price"">
                      $980.00 <del class=""product-old-price"">$990.00</del>
                    </h4>
                  </div>
                </div>
                <!-- /product widget -->

                <!-- product widget -->
                <div class=""product-widget"">
                  <div class=""product-img"">
                    <img src=""./img/product08.png"" alt="""" />
                  </div>
                  <div class=""product-body"">
                    <p class=""product-category"">Category</p>
                    <h3 class=""product-name"">
                      <a href=""#"">product name goes here</a>
                    </h3>
                    <h4 class=""product-price"">
                      $980.00 <del class=""product-old-price"">$990.00</del>
                    </h4>
                  </div>
                </div>
                <!-- /product widget -->

                <!-- product widget -->
                <div class=""product-widget"">
                  <div class=""product-img"">
                    <img src=""./img/product09.png"" alt="""" />
                  </div>
                  <div class=""product-body"">
                    <p class=""product-category"">Category</p>
                    <h3 class=""product-name"">
                      <a href=""#"">product name goes here</a>
                    </h3>
                    <h4 class=""product-price"">
                      $980.00 <del class=""product-old-price"">$990.00</del>
                    </h4>
                  </div>
                </div>
                <!-- product widget -->
              </div>

              <div>
                <!-- product widget -->
                <div class=""product-widget"">
                  <div class=""product-img"">
                    <img src=""./img/product01.png"" alt="""" />
                  </div>
                  <div class=""product-body"">
                    <p class=""product-category"">Category</p>
                    <h3 class=""product-name"">
                      <a href=""#"">product name goes here</a>
                    </h3>
                    <h4 class=""product-price"">
                      $980.00 <del class=""product-old-price"">$990.00</del>
                    </h4>
                  </div>
                </div>
                <!-- /product widget -->

                <!-- product widget -->
                <div class=""product-widget"">
                  <div class=""product-img"">
                    <img src=""./img/product02.png"" alt="""" />
                  </div>
                  <div class=""product-body"">
                    <p class=""product-category"">Category</p>
                    <h3 class=""product-name"">
                      <a href=""#"">product name goes here</a>
                    </h3>
                    <h4 class=""product-price"">
                      $980.00 <del class=""product-old-price"">$990.00</del>
                    </h4>
                  </div>
                </div>
                <!-- /product widget -->

                <!-- product widget -->
                <div class=""product-widget"">
                  <div class=""product-img"">
                    <img src=""./img/product03.png"" alt="""" />
                  </div>
                  <div class=""product-body"">
                    <p class=""product-category"">Category</p>
                    <h3 class=""product-name"">
                      <a href=""#"">product name goes here</a>
                    </h3>
                    <h4 class=""product-price"">
                      $980.00 <del class=""product-old-price"">$990.00</del>
                    </h4>
                  </div>
                </div>
                <!-- product widget -->
              </div>
            </div>
          </div>

          <div class=""col-md-4 col-xs-6"">
            <div class=""section-title"">
              <h4 class=""title"">Top selling</h4>
              <div class=""section-nav"">
                <div id=""slick-nav-4"" class=""products-slick-nav""></div>
              </div>
            </div>

            <div class=""products-widget-slick"" data-nav=""#slick-nav-4"">
              <div>
                <!-- product widget -->
                <div class=""product-widget"">
                  <div class=""product-img"">
                    <img src=""./img/product04.png"" alt="""" />
                  </div>
                  <div class=""product-body"">
                    <p class=""product-category"">Category</p>
                    <h3 class=""product-name"">
                      <a href=""#"">product name goes here</a>
                    </h3>
                    <h4 class=""product-price"">
                      $980.00 <del class=""product-old-price"">$990.00</del>
                    </h4>
                  </div>
                </div>
                <!-- /product widget -->

                <!-- product widget -->
                <div class=""product-widget"">
                  <div class=""product-img"">
                    <img src=""./img/product05.png"" alt="""" />
                  </div>
                  <div class=""product-body"">
                    <p class=""product-category"">Category</p>
                    <h3 class=""product-name"">
                      <a href=""#"">product name goes here</a>
                    </h3>
                    <h4 class=""product-price"">
                      $980.00 <del class=""product-old-price"">$990.00</del>
                    </h4>
                  </div>
                </div>
                <!-- /product widget -->

                <!-- product widget -->
                <div class=""product-widget"">
                  <div class=""product-img"">
                    <img src=""./img/product06.png"" alt="""" />
                  </div>
                  <div class=""product-body"">
                    <p class=""product-category"">Category</p>
                    <h3 class=""product-name"">
                      <a href=""#"">product name goes here</a>
                    </h3>
                    <h4 class=""product-price"">
                      $980.00 <del class=""product-old-price"">$990.00</del>
                    </h4>
                  </div>
                </div>
                <!-- product widget -->
              </div>

              <div>
                <!-- product widget -->
                <div class=""product-widget"">
                  <div class=""product-img"">
                    <img src=""./img/product07.png"" alt="""" />
                  </div>
                  <div class=""product-body"">
                    <p class=""product-category"">Category</p>
                    <h3 class=""product-name"">
                      <a href=""#"">product name goes here</a>
                    </h3>
                    <h4 class=""product-price"">
                      $980.00 <del class=""product-old-price"">$990.00</del>
                    </h4>
                  </div>
                </div>
                <!-- /product widget -->

                <!-- product widget -->
                <div class=""product-widget"">
                  <div class=""product-img"">
                    <img src=""./img/product08.png"" alt="""" />
                  </div>
                  <div class=""product-body"">
                    <p class=""product-category"">Category</p>
                    <h3 class=""product-name"">
                      <a href=""#"">product name goes here</a>
                    </h3>
                    <h4 class=""product-price"">
                      $980.00 <del class=""product-old-price"">$990.00</del>
                    </h4>
                  </div>
                </div>
                <!-- /product widget -->

                <!-- product widget -->
                <div class=""product-widget"">
                  <div class=""product-img"">
                    <img src=""./img/product09.png"" alt="""" />
                  </div>
                  <div class=""product-body"">
                    <p class=""product-category"">Category</p>
                    <h3 class=""product-name"">
                      <a href=""#"">product name goes here</a>
                    </h3>
                    <h4 class=""product-price"">
                      $980.00 <del class=""product-old-price"">$990.00</del>
                    </h4>
                  </div>
                </div>
                <!-- product widget -->
              </div>
            </div>
          </div>

          <div class=""clearfix visible-sm visible-xs""></div>

          <div class=""col-md-4 col-xs-6"">
            <div class=""section-title"">
              <h4 class=""title"">Top selling</h4>
              <div class=""section-nav"">
                <div id=""slick-nav-5"" class=""products-slick-nav""></div>
              </div>
            </div>

            <div class=""products-widget-slick"" data-nav=""#slick-nav-5"">
              <div>
                <!-- product widget -->
                <div class=""product-widget"">
                  <div class=""product-img"">
                    <img src=""./img/product01.png"" alt="""" />
                  </div>
                  <div class=""product-body"">
                    <p class=""product-category"">Category</p>
                    <h3 class=""product-name"">
                      <a href=""#"">product name goes here</a>
                    </h3>
                    <h4 class=""product-price"">
                      $980.00 <del class=""product-old-price"">$990.00</del>
                    </h4>
                  </div>
                </div>
                <!-- /product widget -->

                <!-- product widget -->
                <div class=""product-widget"">
                  <div class=""product-img"">
                    <img src=""./img/product02.png"" alt="""" />
                  </div>
                  <div class=""product-body"">
                    <p class=""product-category"">Category</p>
                    <h3 class=""product-name"">
                      <a href=""#"">product name goes here</a>
                    </h3>
                    <h4 class=""product-price"">
                      $980.00 <del class=""product-old-price"">$990.00</del>
                    </h4>
                  </div>
                </div>
                <!-- /product widget -->

                <!-- product widget -->
                <div class=""product-widget"">
                  <div class=""product-img"">
                    <img src=""./img/product03.png"" alt="""" />
                  </div>
                  <div class=""product-body"">
                    <p class=""product-category"">Category</p>
                    <h3 class=""product-name"">
                      <a href=""#"">product name goes here</a>
                    </h3>
                    <h4 class=""product-price"">
                      $980.00 <del class=""product-old-price"">$990.00</del>
                    </h4>
                  </div>
                </div>
                <!-- product widget -->
              </div>

              <div>
                <!-- product widget -->
                <div class=""product-widget"">
                  <div class=""product-img"">
                    <img src=""./img/product04.png"" alt="""" />
                  </div>
                  <div class=""product-body"">
                    <p class=""product-category"">Category</p>
                    <h3 class=""product-name"">
                      <a href=""#"">product name goes here</a>
                    </h3>
                    <h4 class=""product-price"">
                      $980.00 <del class=""product-old-price"">$990.00</del>
                    </h4>
                  </div>
                </div>
                <!-- /product widget -->

                <!-- product widget -->
                <div class=""product-widget"">
                  <div class=""product-img"">
                    <img src=""./img/product05.png"" alt="""" />
                  </div>
                  <div class=""product-body"">
                    <p class=""product-category"">Category</p>
                    <h3 class=""product-name"">
                      <a href=""#"">product name goes here</a>
                    </h3>
                    <h4 class=""product-price"">
                      $980.00 <del class=""product-old-price"">$990.00</del>
                    </h4>
                  </div>
                </div>
                <!-- /product widget -->

                <!-- product widget -->
                <div class=""product-widget"">
                  <div class=""product-img"">
                    <img src=""./img/product06.png"" alt="""" />
                  </div>
                  <div class=""product-body"">
                    <p class=""product-category"">Category</p>
                    <h3 class=""product-name"">
                      <a href=""#"">product name goes here</a>
                    </h3>
                    <h4 class=""product-price"">
                      $980.00 <del class=""product-old-price"">$990.00</del>
                    </h4>
                  </div>
                </div>
                <!-- product widget -->
              </div>
            </div>
          </div>
        </div>
        <!-- /row -->
      </div>
      <!-- /container -->
    </div>
    <!-- /SECTION -->

    <!-- NEWSLETTER -->
    <div id=""newsletter"" class=""section"">
      <!-- container -->
      <div class=""container"">
        <!-- row -->
        <div class=""row"">
          <div class=""col-md-12"">
            <div class=""newsletter"">
              <p>Sign Up for the <strong>NEWSLETTER</strong></p>
              <form>
                <input
                  class=""input""
                  type=""email""
                  placeholder=""Enter Your Email""
                />
                <button class=""newsletter-btn"">
                  <i class=""fa fa-envelope""></i> Subscribe
                </button>
              </form>
              <ul class=""newsletter-follow"">
                <li>
                  <a href=""#""><i class=""fa fa-facebook""></i></a>
                </li>
                <li>
                  <a href=""#""><i class=""fa fa-twitter""></i></a>
                </li>
                <li>
                  <a href=""#""><i class=""fa fa-instagram""></i></a>
                </li>
                <li>
                  <a href=""#""><i class=""fa fa-pinterest""></i></a>
                </li>
              </ul>
            </div>
          </div>
        </div>
        <!-- /row -->
      </div>
      <!-- /container -->
    </div>
    <!-- /NEWSLETTER -->

    <!-- FOOTER -->
    <footer id=""footer"">
      <!-- top footer -->
      <div class=""section"">
        <!-- container -->
        <div class=""container"">
          <!-- row -->
          <div class=""row"">
            <div class=""col-md-3 col-xs-6"">
              <div class=""footer"">
                <h3 class=""footer-title"">About Us</h3>
                <p>
                  Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed
                  do eiusmod tempor incididunt ut.
                </p>
                <ul class=""footer-links"">
                  <li>
                    <a href=""#""
                      ><i class=""fa fa-map-marker""></i>1734 Stonecoal Road</a
                    >
                  </li>
                  <li>
                    <a href=""#""><i class=""fa fa-phone""></i>+021-95-51-84</a>
                  </li>
                  <li>
                    <a href=""#""
                      ><i class=""fa fa-envelope-o""></i>email@email.com</a
                    >
                  </li>
                </ul>
              </div>
            </div>

            <div class=""col-md-3 col-xs-6"">
              <div class=""footer"">
                <h3 class=""footer-title"">Categories</h3>
                <ul class=""footer-links"">
                  <li><a href=""#"">Hot deals</a></li>
                  <li><a href=""#"">Laptops</a></li>
                  <li><a href=""#"">Smartphones</a></li>
                  <li><a href=""#"">Cameras</a></li>
                  <li><a href=""#"">Accessories</a></li>
                </ul>
              </div>
            </div>

            <div class=""clearfix visible-xs""></div>

            <div class=""col-md-3 col-xs-6"">
              <div class=""footer"">
                <h3 class=""footer-title"">Information</h3>
                <ul class=""footer-links"">
                  <li><a href=""#"">About Us</a></li>
                  <li><a href=""#"">Contact Us</a></li>
                  <li><a href=""#"">Privacy Policy</a></li>
                  <li><a href=""#"">Orders and Returns</a></li>
                  <li><a href=""#"">Terms & Conditions</a></li>
                </ul>
              </div>
            </div>

            <div class=""col-md-3 col-xs-6"">
              <div class=""footer"">
                <h3 class=""footer-title"">Service</h3>
                <ul class=""footer-links"">
                  <li><a href=""#"">My Account</a></li>
                  <li><a href=""#"">View Cart</a></li>
                  <li><a href=""#"">Wishlist</a></li>
                  <li><a href=""#"">Track My Order</a></li>
                  <li><a href=""#"">Help</a></li>
                </ul>
              </div>
            </div>
          </div>
          <!-- /row -->
        </div>
        <!-- /container -->
      </div>
      <!-- /top footer -->

      <!-- bottom footer -->
      <div id=""bottom-footer"" class=""section"">
        <div class=""container"">
          <!-- row -->
          <div class=""row"">
            <div class=""col-md-12 text-center"">
              <ul class=""footer-payments"">
                <li>
                  <a href=""#""><i class=""fa fa-cc-visa""></i></a>
                </li>
                <li>
                  <a href=""#""><i class=""fa fa-credit-card""></i></a>
                </li>
                <li>
                  <a href=""#""><i class=""fa fa-cc-paypal""></i></a>
                </li>
                <li>
                  <a href=""#""><i class=""fa fa-cc-mastercard""></i></a>
                </li>
                <li>
                  <a href=""#""><i class=""fa fa-cc-discover""></i></a>
                </li>
                <li>
                  <a href=""#""><i class=""fa fa-cc-amex""></i></a>
                </li>
              </ul>
              <span class=""copyright"">
                <!-- Link back to Colorlib can't be removed. Template is licensed under CC BY 3.0. -->
                Copyright &copy;
                <script>
                  document.write(new Date().getFullYear());
                </script>
                All rights reserved | This template is made with
                <i class=""fa fa-heart-o"" aria-hidden=""true""></i> by
                <a href=""https://colorlib.com"" target=""_blank"">Colorlib</a>
                <!-- Link back to Colorlib can't be removed. Template is licensed under CC BY 3.0. -->
              </span>
            </div>
          </div>
          <!-- /row -->
        </div>
        <!-- /container -->
      </div>
      <!-- /bottom footer -->
    </footer>
    <!-- /FOOTER -->

    <!-- jQuery Plugins -->
    <script src=""js/jquery.min.js""></script>
    <script src=""js/bootstrap.min.js""></script>
    <script src=""js/slick.min.js""></script>
    <script src=""js/nouislider.min.js""></script>
    <script src=""js/jquery.zoom.min.js""></script>
    <script src=""js/main.js""></script>

    <script>
      fetch(""https://dummyjson.com/products/categories"")
        .then((res) => res.json())
        .then((categories) => {
          console.log(categories);

          let categoryHTML1 = """";

          //iterate through each category (top 10)
          for (let i = 0; i < 10; i++) {
            const category = categories[i];
            categoryHTML1 += `<li><a href=""#"">${category}</a></li>`;
          }

          //generate the HTML by codes
          let generatedHTML1 = `
        		<ul class=""main-nav nav navbar-nav"" id=""categorylist"">
               <li class=""active""><a href=""#"">Home</a></li>
               ${categoryHTML1}
            </ul>`;

          document.getElementById(""categorylist1"").innerHTML = generatedHTML1;

          //iterate through each category (top 4) and formulate the html
          let categoryHTML2 = `
      		<li class=""active"">
      			<a data-toggle=""tab"" href=""#tab1"">${categories[0]}</a>
      		</li>
      	`;
          for (let i = 1; i < 4; i++) {
            const category = categories[i];
            categoryHTML2 += `<li><a data-toggle=""tab"" href=""#tab1"">${category}</a></li>`;
          }

          //generate the HTML by codes
          let generatedHTML2 = `
        		<ul class=""section-tab-nav tab-nav"">
      		<li class=""active"">
      			<a data-toggle=""tab"" href=""#tab1"">Laptops</a>
      		</li>
      		${categoryHTML2}
      	</ul>`;
          document.getElementsByClassName(""top-categories"")[0].innerHTML =
            generatedHTML2;
        });

      //get the first 6 products
      fetch(""https://dummyjson.com/products?limit=6"")
        .then((res) => res.json())
        .then((products) => {
          products = products.products;
          console.log(products);

          let productsHTML = """";

          //iterate through each category (top 5) and formulate the html
          for (const product of products) {
            const {
              title,
              price,
              rating,
              discountPercentage,
              category,
              thumbnail,
            } = product;
            const originalPrice = (
              price *
              ((100 + discountPercentage) / 100)
            ).toFixed(2);

            const ratingRoundOff = Math.round(rating);

            let ratingHTML = """";

            for (let i = 0; i < ratingRoundOff; i++) {
              ratingHTML += `<i class=""fa fa-star""></i>`;
            }

            for (let i = 0; i < 5 - ratingRoundOff; i++) {
              ratingHTML += `<i class=""fa fa-star-o""></i>`;
            }

            productsHTML += `
      		<!-- product -->
      		<div class=""product"">
      			<div class=""product-img"">
      				<img src=""${thumbnail}"" alt=""""/>
      	<div class=""product-label"">
      		<span class=""sale"">-${discountPercentage}%</span>
      	</div>
      			</div>
      			<div class=""product-body"">
      				<p class=""product-category"">${category}</p>
      				<h3 class=""product-name"">
      					<a href=""#"">${title}</a>
      				</h3>
      				<h4 class=""product-price"">
      					$${price} <del class=""product-old-price"">$${originalPrice}</del>
      				</h4>
      				<div class=""product-rating"">
      					${ratingHTML}
      				</div>
      				<div class=""product-btns"">
      					<button class=""add-to-wishlist"">
      						<i class=""fa fa-heart-o""></i
      						><span class=""tooltipp"">add to wishlist</span>
      					</button>
      					<button class=""add-to-compare"">
      						<i class=""fa fa-exchange""></i
      						><span class=""tooltipp"">add to compare</span>
      					</button>
      					<button class=""quick-view"">
      						<i class=""fa fa-eye""></i
      						><span class=""tooltipp"">quick view</span>
      					</button>
      				</div>
      			</div>
      			<div class=""add-to-cart"">
      				<button class=""add-to-cart-btn"">
      					<i class=""fa fa-shopping-cart""></i> add to cart
      				</button>
      			</div>
      		</div>
      		<!-- /product -->

      		`;
          }

          //generate the HTML by codes
          //generate the HTML by codes
          let generateProductHTML = `
      	<div id=""tab1"" class=""tab-pane active"">
      		<div class=""products-slick"" data-nav=""#slick-nav-1"">
      			${productsHTML}
      		</div>
      		<div id=""slick-nav-1"" class=""products-slick-nav""></div>
      	</div>
      `;

          document.getElementById(""tab1"").innerHTML = generateProductHTML;

          // Products Slick
          $("".products-slick"").each(function () {
            var $this = $(this),
              $nav = $this.attr(""data-nav"");

            $this.slick({
              slidesToShow: 4,
              slidesToScroll: 1,
              autoplay: true,
              infinite: true,
              speed: 300,
              dots: false,
              arrows: true,
              appendArrows: $nav ? $nav : false,
              responsive: [
                {
                  breakpoint: 991,
                  settings: {
                    slidesToShow: 2,
                    slidesToScroll: 1,
                  },
                },
                {
                  breakpoint: 480,
                  settings: {
                    slidesToShow: 1,
                    slidesToScroll: 1,
                  },
                },
              ],
            });
          });
        });
    </script>
  </body>
</html>
"
XkcrEwy3,Código de bloqueio,RodrigoOrnelas,JavaScript,Tuesday 21st of May 2024 02:38:02 PM CDT,"//código para desaparecer com botão de compra para cliente que tem email em uma lista negra a partir de uma tabela de consulta
<script>
  var item = {{Blacklist}};
  
  if(item == 'true'){    
    ga('create', 'UA-31304782-2', 'auto');
    ga('send', 'event', 'Blacklist', 'blocked', '{{0.91 - [🔌] [adv_match] [checkout ] visitorContactInfo.0 (em)}}');
    
    var qtd = 0;
    var intervalo = window.setInterval(function() {
      if (qtd < 20) {
        if ($('#payment-data-submit').length > 0) {
          $('#payment-data-submit').remove();
          console.log(qtd);
          qtd = qtd + 1;          
        } else {
          qtd = 20;           	
        }
      } else {
        window.setTimeout(function() {
          clearInterval(intervalo);
        }, 50);
      }

    }, 500);
  }
</script>"
SDrL1k4F,UnclusteredPointLayer.json,EXTREMEXPLOIT,JSON,Tuesday 21st of May 2024 01:54:07 PM CDT,"{
  ""id"": ""unclustered-point"",
  ""type"": ""symbol"",
  ""source"": ""earthquakes"",
  ""layout"": {
    ""icon-image"": ""icon"",
    ""icon-size"": 1
  }
}"
AzfHQYiP,Untitled,vatman,Python,Tuesday 21st of May 2024 01:30:41 PM CDT,"import numpy as np
import random as rand
from scipy.stats import chi2


def isVer(p):
    return 0 <= p <= 1


def ver(p1, p2, error=0.01):
    result = {}
    for i in range(100):
        if i == 0:
            result[i] = p1
        else:
            ver_p = (
                p2 * (1 - p1) ** i * (1 - p2) ** (i - 1)
                + p1 * (1 - p1) ** i * (1 - p2) ** i
            )
            result[i] = ver_p
            if ver_p < error:
                break
    return result


def getVer(first_p, second_p, count):
    result = {}
    if isVer(first_p) and isVer(second_p):
        for i in range(count):
            local_p_1 = rand.random()
            local_p_2 = rand.random()
            sum = 0
            while local_p_1 > first_p and local_p_2 > second_p:
                sum += 1
                local_p_1 = rand.random()
                local_p_2 = rand.random()

            if local_p_1 < first_p:
                result[sum] = result.get(sum, 0) + 1
            else:
                result[sum + 1] = result.get(sum + 1, 0) + 1
    else:
        print(""p not ver"")
    return result


number_intervals = int(input(""Введите количество интервалов: ""))
intervals = []
for i in range(number_intervals):
    interval = float(input(f""Введите верхнюю границу интервала {i+1}: ""))
    intervals.append(interval - 1)

first_p = float(input(""first_p = ""))
second_p = float(input(""second_p = ""))
error = 0.0001
count = int(input(f""count = ""))
theoretical_prob = ver(first_p, second_p, error)

theoretical_frequencies = [0] * (len(intervals) + 1)
for k, freq in theoretical_prob.items():
    for i, upper_bound in enumerate(intervals):
        if k <= upper_bound:
            theoretical_frequencies[i] += freq * count
            break
    else:
        theoretical_frequencies[-1] += freq * count

print(""Теоретические вероятности:"")
for i in range(len(theoretical_frequencies)):
    print(f""q{i} = {theoretical_frequencies[i]/count}"")
alpha = float(input(""Введите уровень значимости (например, 0.05): ""))
number_exp = int(input(""number_exp = ""))
accept_hyp = 0
reject_hyp = 0
for i in range(number_exp):
    empirical_prob = getVer(first_p, second_p, count)
    empirical_frequencies = [0] * (len(intervals) + 1)
    for k, freq in empirical_prob.items():
        for i, upper_bound in enumerate(intervals):
            if k <= upper_bound:
                empirical_frequencies[i] += freq
                break
        else:
            empirical_frequencies[-1] += freq
    chi_squared = sum(
        (empirical_frequencies[i] - theoretical_frequencies[i]) ** 2
        / theoretical_frequencies[i]
        for i in range(len(theoretical_frequencies))
    )
    critical_value = chi2.ppf(1 - alpha, df=number_intervals)

    if chi_squared < critical_value:
        accept_hyp += 1
    else:
        reject_hyp += 1
print(f""{accept_hyp = }"")
print(f""{reject_hyp = }"")
"
M0Q7Thji,Youtube Old Layout,GatinhoMeow,HTML,Tuesday 21st of May 2024 01:30:23 PM CDT,"! Youtube New UI Fix
youtube.com###related #thumbnail.ytd-rich-grid-media:style(margin-right: 8px!important;height: 94px!important;width: 168px!important;min-width: 168px!important;)
youtube.com###related #avatar-link.ytd-rich-grid-media, #related #attached-survey.ytd-rich-grid-media, #related .ytd-rich-shelf-renderer .button-container.ytd-rich-shelf-renderer:style(display:none!important;)
youtube.com###related #dismissible.ytd-rich-grid-media:style(display:flex;flex-direction:row!important;)
youtube.com###related #details.ytd-rich-grid-media:style(width: 100%!important;min-width: 0!important;)
youtube.com###related #contents ytd-rich-item-renderer:style(margin:0!important;margin-top:8px!important;)
youtube.com###related ytd-rich-grid-row #contents.ytd-rich-grid-row,#related h3.ytd-rich-grid-media,#related ytd-rich-section-renderer #content,#related #rich-shelf-header.ytd-rich-shelf-renderer:style(margin:0!important;)
youtube.com###related ytd-rich-item-renderer.ytd-rich-grid-row,#content.ytd-rich-item-renderer:style(width:100%!important;)
youtube.com###related #video-title.ytd-rich-grid-media:style(font-size:1.4rem!important;)
youtube.com###related .ytd-channel-name a,#related #metadata-line.ytd-video-meta-block span:style(font-size:12px!important;)
youtube.com###related ytd-rich-grid-renderer #contents:style(padding-top:0px!important;)
youtube.com###related .ytd-rich-shelf-renderer ytd-rich-item-renderer.ytd-rich-shelf-renderer:style(width:130px!important;min-width: 130px!important;)
youtube.com###related #contents.ytd-rich-shelf-renderer:style(display: flex !important;flex-direction: row !important;gap: 8px !important;flex-wrap: nowrap!important;max-width: 400px!important;overflow-x: scroll!important;overflow-y: hidden!important)
youtube.com###related .ytd-rich-shelf-renderer .yt-core-image:style(object-fit: cover!important;)
youtube.com###related ytd-rich-section-renderer #contents:style(margin-left:0!important)
youtube.com###related #contents ytd-rich-section-renderer ytd-rich-item-renderer:style(margin-top:0px!important;)
youtube.com###related .ytd-rich-shelf-renderer ytd-rich-item-renderer.ytd-rich-shelf-renderer[hidden=""""]:style(display:block!important;)
youtube.com###related #dismissible.ytd-rich-shelf-renderer:style(margin:0!important; border-color: transparent!important)
youtube.com##+js(set, yt.config_.EXPERIMENT_FLAGS.kevlar_watch_grid, false)
youtube.com##+js(set, yt.config_.EXPERIMENT_FLAGS.small_avatars_for_comments, false)
youtube.com##+js(set, yt.config_.EXPERIMENT_FLAGS.kevlar_watch_comments_panel_button, false)
youtube.com##+js(set, yt.config_.EXPERIMENT_FLAGS.web_rounded_thumbnails, false)
youtube.com##+js(set, yt.config_.EXPERIMENT_FLAGS.web_watch_rounded_player_large, false)
youtube.com##+js(set, yt.config_.EXPERIMENT_FLAGS.kevlar_watch_max_player_width, 1280)"
xJcsx22J,maximumSubarray,evgenibatev,Java,Tuesday 21st of May 2024 01:30:08 PM CDT,"class Solution {
    public int maxSubArray(int[] nums) {

        Integer current_sum = Integer.MIN_VALUE + 10001;
        Integer best_sum = Integer.MIN_VALUE;

        for (int i = 0; i < nums.length; i++) {
            if (current_sum > nums[i] || ((current_sum + nums[i]) > nums[i])) {
                current_sum += nums[i];
            }
            else {
                current_sum = nums[i];
            }

            if (current_sum > best_sum) {
                best_sum = current_sum;
            }
        }
        return best_sum;
    }
}"
LtbfyFw2,tcunit test file,andrewtc4,C,Tuesday 21st of May 2024 01:01:11 PM CDT,"#include <tcunit/tcunit.h>
#include <stdlib.h>

tc_result test_foo()
{
    return TC_OK;
}

tc_result all_tests()
{
    Test(""foo"", test_foo, NULL, NULL);

    return TC_OK;
}

TC_RUN_TESTS(all_tests);"
Kq9wbiRR,Untitled,Josif_tepe,C++,Tuesday 21st of May 2024 12:59:44 PM CDT,"#include <iostream>
using namespace std;

int main()
{
    int a, b, x, y;
    x = 0; y = 0;
    a = 2; b = 3;
    do 
    {
        x = x + a;
        y = y + b;
        a++;
    } while(a <= b);
    cout << x << endl;
    cout << y << endl;

}
"
