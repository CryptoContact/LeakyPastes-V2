id,title,username,language,date,content
LKLPtKKk,G2A.com Free Gift Card Guide Mar 2024 FIX,HastyBasher0,GetText,Tuesday 26th of March 2024 07:10:59 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

IMPORTANT: If you use this make sure to use the English version of G2A.com otherwise this will not work!

You can buy gift cards directly with it or you can buy popular games then put them on fresh steam accounts and then sell those accounts.
 
PDF guide here:
https://smallpdf.com/file#s=cea149fd-ead1-4939-94cf-d10a8ce7936a
 
Working as of:
27 March 2024















































"
w7E80Kku,SendInput working with games,LSJiqueue,C++,Tuesday 26th of March 2024 07:02:38 PM CDT,"#include <iostream>
#include <windows.h>
#include <stdlib.h>
int main(){
    while (true){
        if (GetAsyncKeyState(0x51) & 0x8000){ //if pressed Q
            SHORT key;
            UINT mappedKey; 
            INPUT input { 0 };
            key = VkKeyScan('e');
            mappedKey = MapVirtualKey(LOBYTE(key), 0);
            input.type = INPUT_KEYBOARD;
            input.ki.dwFlags = KEYEVENTF_SCANCODE;
            input.ki.wScan = mappedKey;
            SendInput(1, &input, sizeof(input)); // key down
            Sleep(500);
            input.ki.dwFlags = KEYEVENTF_SCANCODE | KEYEVENTF_KEYUP; //key up
            SendInput(1, &input, sizeof(input));
        };
    }    
}"
6ftaCuXL,Redirect to new.reddit.com,Squito,JavaScript,Tuesday 26th of March 2024 06:57:57 PM CDT,"// ==UserScript==
// @name         Redirect Reddit URLs
// @namespace    http://tampermonkey.net/
// @version      0.1
// @description  Redirects all URLs from www.reddit.com to new.reddit.com, preserving everything after the domain name.
// @author       FurballGamer
// @match        *://www.reddit.com/*
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    // Get the current URL
    var currentUrl = window.location.href;

    // Replace 'www.reddit.com' with 'new.reddit.com'
    var newUrl = currentUrl.replace('www.reddit.com', 'new.reddit.com');

    // Redirect to the new URL
    window.location.href = newUrl;
})();"
k55Ca9Kq,Simple Example Orbiting With Vector2,Windspar,Python,Tuesday 26th of March 2024 06:54:54 PM CDT,"import pygame

TRANSPARENT = 0, 0, 0, 0
ORBIT_SPEED = 3000

def create_circle(size, color):
    rect = pygame.Rect((0, 0), size)
    surface = pygame.Surface(size, pygame.SRCALPHA)
    surface.fill(TRANSPARENT)
    radius = min((rect.centerx, rect.centery))
    pygame.draw.circle(surface, color, rect.center, radius)
    return surface

class OrbitObject(pygame.sprite.Sprite):
    def __init__(self, image, position, distance):
        super().__init__()
        self.angle = 0
        self.image = image
        self.rect = image.get_rect()
        self.orbit_point = position
        self.orbit_distance = distance
        self.movement()

    def rotate(self, delta):
        self.angle += ORBIT_SPEED / self.orbit_distance * delta
        self.angle %= 360

    def movement(self):
        vector = pygame.Vector2()
        vector.from_polar((1, self.angle))
        self.rect.center = vector * self.orbit_distance + self.orbit_point

    def update(self, delta):
        self.rotate(delta)
        self.movement()

def main(caption, width, height, flags=0, fps=60):
    # Simple Pygame Setup
    pygame.display.set_caption(caption)
    surface = pygame.display.set_mode((width, height), flags)
    rect = surface.get_rect()
    clock = pygame.time.Clock()
    running = True
    delta = 0
    fps = fps

    # Variables
    background_color = 'black'
    images = []
    images.append(create_circle((10, 40), 'lawngreen'))
    images.append(create_circle((20, 40), 'dodgerblue'))
    images.append(create_circle((40, 40), 'violet'))

    sprites = pygame.sprite.Group(OrbitObject(images[0], rect.center, 20),
                                  OrbitObject(images[1], rect.center, 50),
                                  OrbitObject(images[2], rect.center, 150))

    # Main Loop
    while running:
        for event in pygame.event.get():
            if event.type == pygame.MOUSEBUTTONDOWN:
                if event.button == 1:
                    for sprite in sprites:
                        sprite.orbit_point = event.pos
                elif event.button == 3:
                    for sprite in sprites:
                        sprite.orbit_point = rect.center
            elif event.type == pygame.QUIT:
                running = False

        # Logic
        sprites.update(delta)

        # Draw
        surface.fill(background_color)
        sprites.draw(surface)

        # Render Buffer To Screen
        pygame.display.flip()
        # Idle And Get Delta Time
        delta = clock.tick(fps) / 1000

pygame.init()
main('Orbit with vectors', 800, 600)
pygame.quit()
"
tRjPVHC3,Untitled,Fuska123,Lua,Tuesday 26th of March 2024 06:50:32 PM CDT,"event-world: event # мир в котором все будет происходить
spawn-world: spawn
spawn-location: '' # Локация в которой будут спавнится игроки ( /sunevent setplayerspawn )

settings:
  event:
    time:
      week-day: 'SATURDAY' # Суббота
      hour: '16'
      minute: '00'
      to-end: 5400 # Максимальная длительность ивента ( секунды )
  top-amount: 5 # Количество игроков в топе, который будет выведен в чат
  top-message: '&e%index%&f: %player% - &eНанёс &6%damage% урона!'
  prizes: # Призы
    '1': # первому месту
      commands:
        - 'give %player% diamond 5'
    '2': # второму месту
      commands:
        - 'give %player% diamond 4'
    '3':
      commands:
        - 'give %player% diamond 3'
  actions:
    on-start:
      - 'message:        &e&lМЕЖГАЛАКТИЧЕСКИЙ ИВЕНТ!'
      - 'message:&r &r'
      - 'message:&7 ╔ &fПоявился босс в другом &eмире'
      - 'message:&7 ╚ &fПопасть туда можно через портал &8(&e/warp portal&8)'
      - 'message:&r &r'
      - 'sound:AMBIENT_CAVE'
    on-end:
      empty-players:
        - 'message:        &e&lМЕЖГАЛАКТИЧЕСКИЙ ИВЕНТ!'
        - 'message:&r &r'
        - 'message:&7 ╔ &fНикто не решился одолеть босса, ивент закончен.'
        - 'message:&7 ╚ &fСдедующий ожидается в &eСубботу в 16:00 МСК'
        - 'message:&r &r'
        - 'sound:ENTITY_WITHER_DEATH'
      non-empty-players:
        - 'message:        &e&lМЕЖГАЛАКТИЧЕСКИЙ ИВЕНТ!'
        - 'message:&r &r'
        - 'message:&7 ╔ &fИвент подошёл в концу! Первые &e3 места по урону.'
        - 'message:&7 ╚ &fПолучили свою награду!'
        - 'message:&r &r'
        - 'message:&eТоп по урону за ивент:'
        - 'message:%top%'
        - 'sound:ENTITY_WITHER_DEATH'

boss:
  spawn: '' # Локация спавна босса ( /sunevent setbossspawn )
  type: WITHER
  health: 1028
  knock-back:
    enable: true
    repeat: 30 # Повторение откидывания в секундах
    min-blocks: 10
    max-blocks: 20
  spawn-kids:
    enable: true
    repeat: 120
    mob: ZOMBIE
    amount: 3
    display: '&e&lПИЗДЮК'
    health: 512
  freeze:
    enable: true
    repeat: 90
    radius: 30
    message: '&eВы были заморожены на 10 секунд' # можно стереть
    seconds: 10
  display: '&5&lБОСС ГАЛАКТИКИ'
  damage: 10 # Увеличение дамага НА....
  equip: #Экипировка босса, если не требуется можно стереть всю строку
    helmet:
      material: DIAMOND_HELMET
      enchants:
        - 'DURABILITY;3'
    chestplate:
      material: DIAMOND_CHESTPLATE
    leggings:
      material: DIAMOND_LEGGINGS
    boots:
      material: DIAMOND_BOOTS
    mainhand:
      material: DIAMOND_SWORD
    offhand:
      material: SHIELD
  bossbar:
    title: '%display% &c%health% / %maxhealth%'
    color: YELLOW
    style: SOLID

messages:
  too-early: '&c!!! &fОткрытие &eизмерения &fпроизойдёт в &eСубботу 16:00 МСК'
  set-player-spawn: '&fУстановлен новый спавн игроков при ивенте'
  set-boss-spawn: '&fУстановлен новый спавн для босса'
  selection-empty: '&fНужно выделить территорию &e//wand'
  set-portal: '&fУстановен новый портал.'
  disable-god: 'Выключите год пж'"
474HXegQ,Untitled,Fuska123,Lua,Tuesday 26th of March 2024 06:42:20 PM CDT,"
## Main strings
NoPerm: '&fКоманды не существует или у Вас нету доступа к ней, Воспользуйтесь §6/help &fдля помощи.'
UnknownCommand: '§fКоманды не существует или у Вас нету доступа к ней, Воспользуйтесь §6/help &fдля помощи.'

## AntiSymbols && msgMesssages
TextError: '§fВаше сообщение было заблокировано. &6Не используйте запрещенные символы!'
BlockWords: # запрещённые слова (пробелы фильтруются плагином, так что пиарить используя пробел (play . minecraft . com : 25565) не получится)
  - ""ru""
  - "".ru""
  - ""r!u""
  - ""r.u""
  - ""ru!""
  - ""play""
  - "".play""
  - ""p!lay""
  - ""pl!ay""
  - ""pla!y""
  - ""play!""
  - ""core""
  - "".core""
  - ""c.ore""
  - ""co.re""
  - ""cor.e""
  - ""core.""
  - ""!core""
  - ""c!ore""
  - ""cor!e""
  - ""xyz""
  - "".xyz""
  - ""x.yz""
  - ""x!yz""
  - ""!xyz""
  - ""xy!z""
  - ""mc""
  - "".mc""
  - ""m!c""
  - ""m.c""
  - ""net""
  - "".net""
  - ""n!et""
  - ""ne!t""

## msgMessages
# Права: swcore.msg.use - использование команд
# Команды: /m - алиасы: /msg, /tell
Format: ""&6[&c{sender} &6-> &c{recipient}&6] &f{message}""

## JoinText
JoinText:
  - ''
  - '§6§m §7§m                                          §6§m '
  - '             §8§l§m[§r §6§lWild§e§lGrief§r §8§l§m]'
  - '   §6Добро пожаловать на сервер!'
  - ''
  - '   §fВам доступны бесплатные награды:'
  - '     §8➥ §fПодробнее: §a§n/reward§r'
  - '§6§m §7§m                                          §6§m '
  - ''

## Limiter
enable: true #Включить/Выключить работу плагина
blocks:
  HOPPER: 32 #БЛОК:КОЛИЧЕСТВО
  PISTON: 32 #БЛОК:КОЛИЧЕСТВО
  STICKY_PISTON: 32 #БЛОК:КОЛИЧЕСТВО
limit-actions:
  - 'message: §fВы не можете ставить больше &6%count%&f данных блоков на чанк!'
  - 'title: &f;&6⚠'
  - 'sound: ENTITY_VILLAGER_NO' #Воспроизведение звука игроку
entity:
  ARMOR_STAND: 6 # СТОЙКА ДЛЯ БРОНИ

## NotificationDonate
ListMessageDonate:
  1:
    - '&6 ╔'
    - '&6 ║ &fИгрок &6&n%player%&r&f &a&l%text%'
    - '&6 ║ &fНа нашем сайте: &6&lWildGrief.net'
    - '&6 ║ &fИгрок знает, что делает, укрепляя свою позицию в табе!'
    - '&6 ╚'
  2:
    - '&6 ╔'
    - '&6 ║ &fИгрок &6&n%player%&r&f &a&l%text%'
    - '&6 ║ &fНа нашем сайте: &6&lWildGrief.net'
    - '&6 ║ &fЧудо-печки, топовые стрелы и многое другое ждёт его!'
    - '&6 ╚'
  3:
    - '&6 ╔'
    - '&6 ║ &fИгрок &6&n%player%&r&f &a&l%text%'
    - '&6 ║ &fНа нашем сайте: &6&lWildGrief.net'
    - '&6 ║ &fОчень скоро возвысится новый донатер, трепещите!'
    - '&6 ╚'
  4:
    - '&6 ╔'
    - '&6 ║ &fИгрок &6&n%player%&r&f &a&l%text%'
    - '&6 ║ &fНа нашем сайте: &6&lWildGrief.net'
    - '&6 ║ &fC его нынешними возможностями - он богоподобен!'
    - '&6 ╚'
  5:
    - '&6 ╔'
    - '&6 ║ &fИгрок &6&n%player%&r&f &a&l%text%'
    - '&6 ║ &fНа нашем сайте: &6&lWildGrief.net'
    - '&6 ║ &fПопрошайки, налетайте, кому-то сегодня повезёт!'
    - '&6 ╚'
  6:
    - '&6 ╔'
    - '&6 ║ &fИгрок &6&n%player%&r&f &a&l%text%'
    - '&6 ║ &fНа нашем сайте: &6&lWildGrief.net'
    - '&6 ║ &fРублевая стабильность поможет ему на поле боя!'
    - '&6 ╚'
  7:
    - '&6 ╔'
    - '&6 ║ &fИгрок &6&n%player%&r&f &a&l%text%'
    - '&6 ║ &fНа нашем сайте: &6&lWildGrief.net'
    - '&6 ║ &fПора прятаться, кто-то скоро тебя найдёт!'
    - '&6 ╚'
  8:
    - '&6 ╔'
    - '&6 ║ &fИгрок &6&n%player%&r&f &a&l%text%'
    - '&6 ║ &fНа нашем сайте: &6&lWildGrief.net'
    - '&6 ║ &fКто не рискует, тот не пьёт шампанское!'
    - '&6 ╚'
  9:
    - '&6 ╔'
    - '&6 ║ &fИгрок &6&n%player%&r&f &a&l%text%'
    - '&6 ║ &fНа нашем сайте: &6&lWildGrief.net'
    - '&6 ║ &fОн красавчик! Аплодисменты ему!'
    - '&6 ╚'
  10:
    - '&6 ╔'
    - '&6 ║ &fИгрок &6&n%player%&r&f &a&l%text%'
    - '&6 ║ &fНа нашем сайте: &6&lWildGrief.net'
    - '&6 ║ &fТрепещите все его враги!'
    - '&6 ╚'
  11:
    - '&6 ╔'
    - '&6 ║ &fИгрок &6&n%player%&r&f &a&l%text%'
    - '&6 ║ &fНа нашем сайте: &6&lWildGrief.net'
    - '&6 ║ &fБудь рядом, с этим богом!'
    - '&6 ╚'

## ProtectAdmin
ProtectAllowedUsernames:
  - bubrovskiy"
YggcxLQE,🤑 G2A.com Free Gift Card Guide Mar 2024 FIX 🤑,Roobet,GetText,Tuesday 26th of March 2024 06:30:52 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
IMPORTANT: If you use this make sure to use the English version of G2A.com otherwise this will not work!
 
You can buy gift cards directly with it or you can buy popular games then put them on fresh steam accounts and then sell those accounts.
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view?usp=sharing
 
 
Working as of:
27 March 2024
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 


"
V3CsLhuX,🤑 G2A.com Free Gift Card Guide Mar 2024 FIX 🤑,ounnuo,GetText,Tuesday 26th of March 2024 06:25:35 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

If you use this make sure to use the English version of G2A.com otherwise this will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_311155.pdf

Working as of:
26 March 2024


















"
npcCKUEf,Untitled,sinusinusa,SQL,Tuesday 26th of March 2024 06:12:14 PM CDT,"SELECT p.ProductName, ISNULL(c.CategoryName, 'Без категории') AS CategoryName
FROM Products p
LEFT JOIN ProductCategories pc ON p.ProductID = pc.ProductID
LEFT JOIN Categories c ON pc.CategoryID = c.CategoryID;"
D4P6BK4p,Superstructures Error,ArttieF,XML,Tuesday 26th of March 2024 05:29:31 PM CDT,"An error occurred while deserializing a file!: A:\SteamLibrary\steamapps\workshop\content\544550\3159841144/GameData\prefabsettings.xml - There is an error in XML document (4, 7). : The specified type was not recognized: name='StructureModData', namespace='', at <ThingModData xmlns=''>.
Failed to load A:\SteamLibrary\steamapps\workshop\content\544550\3159841144/GameData\prefabsettings.xml"
MUqsEGxR,Fstab,bluebyt,INI file,Tuesday 26th of March 2024 04:51:22 PM CDT,"KDE 
# Static information about the filesystems.
# See fstab(5) for details.

# <file system> <dir> <type> <options> <dump> <pass>
# /dev/nvme0n1p2
UUID=bdff1202-dd77-4a16-8963-ed07f6772b19	/         	ext4      	rw,relatime	0 1

# /dev/nvme1n1p3
UUID=43711f5a-30c3-4f7c-8570-ae7ec4bb994a      /mnt/media       ext4            defaults        0 0

# /dev/nvme0n1p1
UUID=A496-6758      	/boot     	vfat      	rw,relatime,fmask=0022,dmask=0022,codepage=437,iocharset=ascii,shortname=mixed,utf8,errors=remount-ro	0 2

Gnome
# /dev/nvme1n1p2
UUID=94a0f41d-34b3-4aaa-9c10-0abee1debaa8	/         	ext4      	rw,relatime	0 1

# /dev/nvme1n1p3
UUID=43711f5a-30c3-4f7c-8570-ae7ec4bb994a       /mnt/media      ext4             defaults       0 0

# /dev/nvme0n1p2
UUID=bdff1202-dd77-4a16-8963-ed07f6772b19      /mnt/xfce        ext4             defaults       0 0

# /dev/nvme1n1p1
UUID=608D-A8BF      	/boot     	vfat      	rw,relatime,fmask=0022,dmask=0022,codepage=437,iocharset=ascii,shortname=mixed,utf8,errors=remount-ro	0 2
"
SV9qRSft,Untitled,Profe-Lau,JavaScript,Tuesday 26th of March 2024 03:59:40 PM CDT,"const usuarios = [
    {
        id: 1,
        name: ""Leanne Graham"",
        username: ""Bret"",
        email: ""Sincere@april.biz"",
        address: {
            street: ""Kulas Light"",
            suite: ""Apt. 556"",
            city: ""Gwenborough"",
            zipcode: ""92998-3874"",
            geo: {
                lat: ""-37.3159"",
                lng: ""81.1496""
            }
        },
        phone: ""1-770-736-8031 x56442"",
        website: ""hildegard.org"",
        company: {
            name: ""Romaguera-Crona"",
            catchPhrase: ""Multi-layered client-server neural-net"",
            bs: ""harness real-time e-markets""
        }
    },
    {
        id: 2,
        name: ""Ervin Howell"",
        username: ""Antonette"",
        email: ""Shanna@melissa.tv"",
        address: {
            street: ""Victor Plains"",
            suite: ""Suite 879"",
            city: ""Wisokyburgh"",
            zipcode: ""90566-7771"",
            geo: {
                lat: ""-43.9509"",
                lng: ""-34.4618""
            }
        },
        phone: ""010-692-6593 x09125"",
        website: ""anastasia.net"",
        company: {
            name: ""Deckow-Crist"",
            catchPhrase: ""Proactive didactic contingency"",
            bs: ""synergize scalable supply-chains""
        }
    },
    {
        id: 3,
        name: ""Clementine Bauch"",
        username: ""Samantha"",
        email: ""Nathan@yesenia.net"",
        address: {
            street: ""Douglas Extension"",
            suite: ""Suite 847"",
            city: ""McKenziehaven"",
            zipcode: ""59590-4157"",
            geo: {
                lat: ""-68.6102"",
                lng: ""-47.0653""
            }
        },
        phone: ""1-463-123-4447"",
        website: ""ramiro.org"",
        company: {
            name: ""Romaguera-Jacobson"",
            catchPhrase: ""Face to face bifurcated interface"",
            bs: ""e-enable strategic applications""
        }
    },
    {
        id: 4,
        name: ""Patricia Lebsack"",
        username: ""Karianne"",
        email: ""Julianne.OConner@kory.org"",
        address: {
            street: ""Hoeger Mall"",
            suite: ""Apt. 692"",
            city: ""South Elvis"",
            zipcode: ""53919-4257"",
            geo: {
                lat: ""29.4572"",
                lng: ""-164.2990""
            }
        },
        phone: ""493-170-9623 x156"",
        website: ""kale.biz"",
        company: {
            name: ""Robel-Corkery"",
            catchPhrase: ""Multi-tiered zero tolerance productivity"",
            bs: ""transition cutting-edge web services""
        }
    }
];"
4LKwn03w,Left+Right Click File To Open in GitHub Web Editor.ahk,Lorenzo501,Autohotkey,Tuesday 26th of March 2024 03:47:09 PM CDT,"#Requires AutoHotkey 2.0
A_CoordModeMouse := ""Screen""
SetDefaultMouseSpeed(0)

#HotIf (WinActive(""ahk_exe explorer.exe""))
RButton::
{
    static EVENT_OBJECT_CREATE := 0x8000

    Critical(-1)

    while (GetKeyState(""RButton"", ""P""))
    {
        if (KeyWait(""LButton"", ""D T0.05""))
        {
            HotIf()
            Hotkey(""LButton"", (*) => 0, ""On"")
            Hotkey(""RButton"", (*) => 0, ""On"")
            Hotkey(""LButton up"", (*) => 0, ""On"")
            DllCall(""SetWinEventHook"", ""UInt"", EVENT_OBJECT_CREATE, ""UInt"", EVENT_OBJECT_CREATE, ""Ptr"", 0, ""Ptr"", CallbackCreate(HandleDragImageEvent), ""UInt"", 0, ""UInt"", 0, ""UInt"", 0)
            MouseGetPos(&previousCursorX, &previousCursorY)
            SystemCursor(""Toggle"")
            Send(""{Click "" previousCursorX + 5 "" "" previousCursorY "" 0}"")
            Sleep(10)
            Send(""{Click "" previousCursorX - 5 "" "" previousCursorY "" 0}"")
            Sleep(10)
            Send(""{Click "" previousCursorX "" "" previousCursorY "" 0}"")
            SystemCursor(""Toggle"")
            Run(""chrome.exe https://github.dev/ --start-maximized --disable-features=GlobalMediaControls"")
            Sleep(100)
            WinWaitActive(""Visual Studio"")
            MouseGetPos(&previousCursorX, &previousCursorY)
            SystemCursor(""Toggle"")
            Send(""{Click "" A_ScreenWidth / 2 "" "" A_ScreenHeight / 2 "" 0}"")
            Sleep(50)
            Send(""{Click "" A_ScreenWidth / 2 "" "" A_ScreenHeight / 2 "" U}"")
            Send(""{Click "" previousCursorX "" "" previousCursorY "" 0}"")
            SystemCursor(""Toggle"")
            Hotkey(""LButton"", ""Off"")
            Hotkey(""RButton"", ""Off"")
            Hotkey(""LButton up"", ""Off"")

            return
        }
    }

    Send(""{RButton}"")
}

SystemCursor(cmd) ; cmd = ""Show|Hide|Toggle|Reload""
{
    static visible := true, c := Map()
    static sys_cursors := [32512, 32513, 32514, 32515, 32516, 32642, 32643, 32644, 32645, 32646, 32648, 32649, 32650]

    if (cmd = ""Reload"" || !c.Count) ; Reload when requested or at first call
    {
        for (i, id in sys_cursors)
        {
            h_cursor  := DllCall(""LoadCursor"", ""Ptr"", 0, ""Ptr"", id)
            h_default := DllCall(""CopyImage"", ""Ptr"", h_cursor, ""UInt"", 2, ""Int"", 0, ""Int"", 0, ""UInt"", 0)
            h_blank   := DllCall(""CreateCursor"", ""Ptr"", 0, ""Int"", 0, ""Int"", 0, ""Int"", 32, ""Int"", 32, ""Ptr"", Buffer(32 * 4, 0xFF), ""Ptr"", Buffer(32 * 4, 0))
            c[id] := {Default: h_default, Blank: h_blank}
        }
    }

    switch (cmd)
    {
        case ""Show"": visible := true
        case ""Hide"": visible := false
        case ""Toggle"": visible := !visible
        default: return
    }

    for (id, handles in c)
    {
        h_cursor := DllCall(""CopyImage"", ""Ptr"", visible ? handles.Default : handles.Blank, ""UInt"", 2, ""Int"", 0, ""Int"", 0, ""UInt"", 0)
        DllCall(""SetSystemCursor"", ""Ptr"", h_cursor, ""UInt"", id)
    }
}

HandleDragImageEvent(hWinEventHook, event, hWnd, *)
{
    static hiddenImagesAmount := 0

    try
        if (WinGetClass(hWnd) = ""SysDragImage"") ; Both explorer.exe and chrome.exe have one
        {
            WinKill(hWnd)

            if (++hiddenImagesAmount = 2)
                DllCall(""UnhookWinEvent"", ""Ptr"", hWinEventHook)
        {
}"
xajgm8ry,application/ld+json,ThePie,JSON,Tuesday 26th of March 2024 03:27:11 PM CDT,"{
    ""@context"": ""https://schema.org"",
    ""@graph"": [
        {
            ""@id"": ""https://www.companyname.com/#organization"",
            ""@type"": [
                ""Corporation"",
                ""Organization""
            ],
            ""logo"": {
                ""@id"": ""https://www.companyname.com/#logo"",
                ""@type"": ""ImageObject"",
                ""caption"": ""Company Name"",
                ""contentUrl"": ""https://www.companyname.com/wp-content/uploads/2024/02/Main.svg"",
                ""height"": """",
                ""inLanguage"": ""en-US"",
                ""url"": ""https://www.companyname.com/wp-content/uploads/2024/02/Main.svg"",
                ""width"": """"
            },
            ""name"": ""Company Name"",
            ""url"": ""https://www.companyname.com""
        },
        {
            ""@id"": ""https://www.companyname.com/#website"",
            ""@type"": ""WebSite"",
            ""alternateName"": ""Company Name LLC"",
            ""inLanguage"": ""en-US"",
            ""name"": ""Company Name"",
            ""potentialAction"": {
                ""@type"": ""SearchAction"",
                ""query-input"": ""required name=search_term_string"",
                ""target"": ""https://www.companyname.com/?s={search_term_string}""
            },
            ""publisher"": {
                ""@id"": ""https://www.companyname.com/#organization""
            },
            ""url"": ""https://www.companyname.com""
        },
        {
            ""@id"": ""https://www.companyname.com/#webpage"",
            ""@type"": ""WebPage"",
            ""about"": {
                ""@id"": ""https://www.companyname.com/#organization""
            },
            ""dateModified"": ""2024-03-23T20:16:44+00:00"",
            ""datePublished"": ""2024-02-25T02:56:35+00:00"",
            ""inLanguage"": ""en-US"",
            ""isPartOf"": {
                ""@id"": ""https://www.companyname.com/#website""
            },
            ""name"": ""Company Name"",
            ""url"": ""https://www.companyname.com/""
        },
        {
            ""@id"": ""https://www.companyname.com/#author"",
            ""@type"": ""Person"",
            ""image"": {
                ""@id"": ""https://secure.gravatar.com/avatar/18ae2643603b0143c1e32d817491dc24?s=96&amp;d=mm&amp;r=g"",
                ""@type"": ""ImageObject"",
                ""caption"": ""admin"",
                ""inLanguage"": ""en-US"",
                ""url"": ""https://secure.gravatar.com/avatar/18ae2643603b0143c1e32d817491dc24?s=96&amp;d=mm&amp;r=g""
            },
            ""name"": ""admin"",
            ""sameAs"": [
                ""http://localhost/ww1""
            ],
            ""worksFor"": {
                ""@id"": ""https://www.companyname.com/#organization""
            }
        },
        {
            ""@id"": ""https://www.companyname.com/#richSnippet"",
            ""@type"": ""Article"",
            ""author"": {
                ""@id"": ""https://www.companyname.com/#author"",
                ""name"": ""admin""
            },
            ""dateModified"": ""2024-03-23T20:16:44+00:00"",
            ""datePublished"": ""2024-02-25T02:56:35+00:00"",
            ""description"": ""Company Name tagline."",
            ""headline"": ""Company Name"",
            ""inLanguage"": ""en-US"",
            ""isPartOf"": {
                ""@id"": ""https://www.companyname.com/#webpage""
            },
            ""mainEntityOfPage"": {
                ""@id"": ""https://www.companyname.com/#webpage""
            },
            ""name"": ""Company Name"",
            ""publisher"": {
                ""@id"": ""https://www.companyname.com/#organization""
            }
        }
    ]
}"
18ckCDCt,Untitled,katerina-bonditka,Python,Tuesday 26th of March 2024 02:53:56 PM CDT,"from featuretools.primitives import TransformPrimitive
import numpy as np

class SquareRoot(TransformPrimitive):
    name = ""square_root""
    input_types = [ColumnSchema(semantic_tags={""numeric""})]
    return_type = ColumnSchema(semantic_tags={""numeric""})
    
    def get_function(self):
        def square_root(column):
            return np.sqrt(column)
        return square_root"
P8FBWVgz,Untitled,astrou123,Swift,Tuesday 26th of March 2024 02:36:25 PM CDT,"import UIKit

class CustomFlowLayout: UICollectionViewFlowLayout {
    
    override func layoutAttributesForElements(in rect: CGRect) -> [UICollectionViewLayoutAttributes]? {
        guard let collectionView = collectionView else { return nil }
        
        // Retrieve the layout attributes from the super class
        var layoutAttributes = super.layoutAttributesForElements(in: rect)
        
        // Check if refresh control is refreshing and adjust header position if needed
        if let refreshControl = collectionView.refreshControl, refreshControl.isRefreshing {
            for attributes in layoutAttributes ?? [] {
                // Adjust header attributes if the element is a section header
                if attributes.representedElementKind == UICollectionView.elementKindSectionHeader {
                    let section = attributes.indexPath.section
                    let headerHeight = headerReferenceSize.height
                    let contentOffset = collectionView.contentOffset.y + collectionView.contentInset.top
                    let topInset = collectionView.adjustedContentInset.top
                    
                    // Calculate the y position of the header
                    var headerY = max(contentOffset, topInset)
                    if section > 0 {
                        // Adjust header position based on previous sections' height
                        for i in 0..<section {
                            let previousHeaderHeight = headerReferenceSize.height
                            let previousSectionItemCount = collectionView.numberOfItems(inSection: i)
                            let previousSectionHeight = (CGFloat(previousSectionItemCount) * itemSize.height) + previousHeaderHeight + minimumLineSpacing
                            headerY += previousSectionHeight
                        }
                    }
                    
                    // Update the position of the header attributes
                    attributes.frame = CGRect(x: attributes.frame.origin.x, y: headerY, width: attributes.frame.width, height: headerHeight)
                }
            }
        }
        
        return layoutAttributes
    }
    
    override func shouldInvalidateLayout(forBoundsChange newBounds: CGRect) -> Bool {
        return true
    }
}
"
kX70sqmQ,ComfyUI workflow to remove womens clothes ;-),Satscape,JSON,Tuesday 26th of March 2024 02:19:05 PM CDT,"{
  ""last_node_id"": 132,
  ""last_link_id"": 310,
  ""nodes"": [
    {
      ""id"": 71,
      ""type"": ""ControlNetLoader"",
      ""pos"": [
        826,
        1234
      ],
      ""size"": {
        ""0"": 447.86798095703125,
        ""1"": 81.19131469726562
      },
      ""flags"": {},
      ""order"": 0,
      ""mode"": 0,
      ""outputs"": [
        {
          ""name"": ""CONTROL_NET"",
          ""type"": ""CONTROL_NET"",
          ""links"": [
            245
          ],
          ""shape"": 3,
          ""slot_index"": 0
        }
      ],
      ""properties"": {
        ""Node name for S&R"": ""ControlNetLoader""
      },
      ""widgets_values"": [
        ""control_v11p_sd15_inpaint_fp16.safetensors""
      ]
    },
    {
      ""id"": 77,
      ""type"": ""Reroute"",
      ""pos"": [
        1006.0805739746095,
        579.5470354003907
      ],
      ""size"": [
        75,
        26
      ],
      ""flags"": {},
      ""order"": 5,
      ""mode"": 0,
      ""inputs"": [
        {
          ""name"": """",
          ""type"": ""*"",
          ""link"": 291
        }
      ],
      ""outputs"": [
        {
          ""name"": ""CLIP"",
          ""type"": ""CLIP"",
          ""links"": [
            218
          ],
          ""slot_index"": 0
        }
      ],
      ""properties"": {
        ""showOutputText"": true,
        ""horizontal"": false
      }
    },
    {
      ""id"": 93,
      ""type"": ""Reroute"",
      ""pos"": [
        1008,
        491
      ],
      ""size"": [
        140.8,
        26
      ],
      ""flags"": {},
      ""order"": 14,
      ""mode"": 0,
      ""inputs"": [
        {
          ""name"": """",
          ""type"": ""*"",
          ""link"": 295
        }
      ],
      ""outputs"": [
        {
          ""name"": ""CONDITIONING"",
          ""type"": ""CONDITIONING"",
          ""links"": [
            244
          ],
          ""slot_index"": 0,
          ""label"": ""Positive prompt""
        }
      ],
      ""properties"": {
        ""showOutputText"": true,
        ""horizontal"": false
      }
    },
    {
      ""id"": 90,
      ""type"": ""Reroute"",
      ""pos"": [
        1005,
        550
      ],
      ""size"": [
        82,
        26
      ],
      ""flags"": {},
      ""order"": 4,
      ""mode"": 0,
      ""inputs"": [
        {
          ""name"": """",
          ""type"": ""*"",
          ""link"": 290
        }
      ],
      ""outputs"": [
        {
          ""name"": ""MODEL"",
          ""type"": ""MODEL"",
          ""links"": [
            197
          ],
          ""slot_index"": 0
        }
      ],
      ""properties"": {
        ""showOutputText"": true,
        ""horizontal"": false
      }
    },
    {
      ""id"": 92,
      ""type"": ""Reroute"",
      ""pos"": [
        1005.2301248168947,
        519.5638720703125
      ],
      ""size"": [
        140.8,
        26
      ],
      ""flags"": {},
      ""order"": 15,
      ""mode"": 0,
      ""inputs"": [
        {
          ""name"": """",
          ""type"": ""*"",
          ""link"": 296
        }
      ],
      ""outputs"": [
        {
          ""name"": ""CONDITIONING"",
          ""type"": ""CONDITIONING"",
          ""links"": [
            247
          ],
          ""slot_index"": 0
        }
      ],
      ""properties"": {
        ""showOutputText"": true,
        ""horizontal"": false
      }
    },
    {
      ""id"": 74,
      ""type"": ""Reroute"",
      ""pos"": [
        1697,
        896
      ],
      ""size"": [
        75,
        26
      ],
      ""flags"": {},
      ""order"": 11,
      ""mode"": 0,
      ""inputs"": [
        {
          ""name"": """",
          ""type"": ""*"",
          ""link"": 250
        }
      ],
      ""outputs"": [
        {
          ""name"": ""MASK"",
          ""type"": ""MASK"",
          ""links"": [
            273
          ],
          ""slot_index"": 0
        }
      ],
      ""properties"": {
        ""showOutputText"": true,
        ""horizontal"": false
      }
    },
    {
      ""id"": 69,
      ""type"": ""InpaintPreprocessor"",
      ""pos"": [
        1178,
        877
      ],
      ""size"": {
        ""0"": 210,
        ""1"": 46
      },
      ""flags"": {},
      ""order"": 10,
      ""mode"": 0,
      ""inputs"": [
        {
          ""name"": ""image"",
          ""type"": ""IMAGE"",
          ""link"": 125
        },
        {
          ""name"": ""mask"",
          ""type"": ""MASK"",
          ""link"": 126
        }
      ],
      ""outputs"": [
        {
          ""name"": ""IMAGE"",
          ""type"": ""IMAGE"",
          ""links"": [
            246,
            308
          ],
          ""shape"": 3,
          ""slot_index"": 0
        }
      ],
      ""properties"": {
        ""Node name for S&R"": ""InpaintPreprocessor""
      }
    },
    {
      ""id"": 113,
      ""type"": ""EmptyLatentImage"",
      ""pos"": [
        1626,
        1201
      ],
      ""size"": {
        ""0"": 315,
        ""1"": 106
      },
      ""flags"": {},
      ""order"": 17,
      ""mode"": 0,
      ""inputs"": [
        {
          ""name"": ""width"",
          ""type"": ""INT"",
          ""link"": 284,
          ""widget"": {
            ""name"": ""width""
          }
        },
        {
          ""name"": ""height"",
          ""type"": ""INT"",
          ""link"": 285,
          ""widget"": {
            ""name"": ""height""
          }
        }
      ],
      ""outputs"": [
        {
          ""name"": ""LATENT"",
          ""type"": ""LATENT"",
          ""links"": [
            271
          ],
          ""shape"": 3,
          ""slot_index"": 0
        }
      ],
      ""properties"": {
        ""Node name for S&R"": ""EmptyLatentImage""
      },
      ""widgets_values"": [
        768,
        512,
        1
      ]
    },
    {
      ""id"": 122,
      ""type"": ""GetImageSize"",
      ""pos"": [
        1332,
        1202
      ],
      ""size"": {
        ""0"": 210,
        ""1"": 46
      },
      ""flags"": {},
      ""order"": 9,
      ""mode"": 0,
      ""inputs"": [
        {
          ""name"": ""image"",
          ""type"": ""IMAGE"",
          ""link"": 283
        }
      ],
      ""outputs"": [
        {
          ""name"": ""width"",
          ""type"": ""INT"",
          ""links"": [
            284
          ],
          ""shape"": 3,
          ""slot_index"": 0
        },
        {
          ""name"": ""height"",
          ""type"": ""INT"",
          ""links"": [
            285
          ],
          ""shape"": 3,
          ""slot_index"": 1
        }
      ],
      ""properties"": {
        ""Node name for S&R"": ""GetImageSize""
      }
    },
    {
      ""id"": 105,
      ""type"": ""ControlNetApplyAdvanced"",
      ""pos"": [
        1400,
        974
      ],
      ""size"": {
        ""0"": 315,
        ""1"": 166
      },
      ""flags"": {},
      ""order"": 19,
      ""mode"": 0,
      ""inputs"": [
        {
          ""name"": ""positive"",
          ""type"": ""CONDITIONING"",
          ""link"": 244
        },
        {
          ""name"": ""negative"",
          ""type"": ""CONDITIONING"",
          ""link"": 247
        },
        {
          ""name"": ""control_net"",
          ""type"": ""CONTROL_NET"",
          ""link"": 245
        },
        {
          ""name"": ""image"",
          ""type"": ""IMAGE"",
          ""link"": 246
        }
      ],
      ""outputs"": [
        {
          ""name"": ""positive"",
          ""type"": ""CONDITIONING"",
          ""links"": [
            286
          ],
          ""shape"": 3,
          ""slot_index"": 0
        },
        {
          ""name"": ""negative"",
          ""type"": ""CONDITIONING"",
          ""links"": [
            287
          ],
          ""shape"": 3,
          ""slot_index"": 1
        }
      ],
      ""properties"": {
        ""Node name for S&R"": ""ControlNetApplyAdvanced""
      },
      ""widgets_values"": [
        1,
        0,
        1
      ]
    },
    {
      ""id"": 91,
      ""type"": ""Reroute"",
      ""pos"": [
        2159,
        554
      ],
      ""size"": [
        82,
        26
      ],
      ""flags"": {},
      ""order"": 12,
      ""mode"": 0,
      ""inputs"": [
        {
          ""name"": """",
          ""type"": ""*"",
          ""link"": 197
        }
      ],
      ""outputs"": [
        {
          ""name"": ""MODEL"",
          ""type"": ""MODEL"",
          ""links"": [
            297
          ],
          ""slot_index"": 0
        }
      ],
      ""properties"": {
        ""showOutputText"": true,
        ""horizontal"": false
      }
    },
    {
      ""id"": 95,
      ""type"": ""Reroute"",
      ""pos"": [
        2162,
        486
      ],
      ""size"": [
        140.8,
        26
      ],
      ""flags"": {},
      ""order"": 21,
      ""mode"": 0,
      ""inputs"": [
        {
          ""name"": """",
          ""type"": ""*"",
          ""link"": 286
        }
      ],
      ""outputs"": [
        {
          ""name"": ""CONDITIONING"",
          ""type"": ""CONDITIONING"",
          ""links"": [
            298
          ],
          ""slot_index"": 0,
          ""label"": ""Positive""
        }
      ],
      ""properties"": {
        ""showOutputText"": true,
        ""horizontal"": false
      }
    },
    {
      ""id"": 94,
      ""type"": ""Reroute"",
      ""pos"": [
        2159,
        521
      ],
      ""size"": [
        140.8,
        26
      ],
      ""flags"": {},
      ""order"": 22,
      ""mode"": 0,
      ""inputs"": [
        {
          ""name"": """",
          ""type"": ""*"",
          ""link"": 287
        }
      ],
      ""outputs"": [
        {
          ""name"": ""CONDITIONING"",
          ""type"": ""CONDITIONING"",
          ""links"": [
            299
          ],
          ""slot_index"": 0
        }
      ],
      ""properties"": {
        ""showOutputText"": true,
        ""horizontal"": false
      }
    },
    {
      ""id"": 73,
      ""type"": ""Reroute"",
      ""pos"": [
        1006,
        615
      ],
      ""size"": [
        75,
        26
      ],
      ""flags"": {},
      ""order"": 8,
      ""mode"": 0,
      ""inputs"": [
        {
          ""name"": """",
          ""type"": ""*"",
          ""link"": 292
        }
      ],
      ""outputs"": [
        {
          ""name"": ""VAE"",
          ""type"": ""VAE"",
          ""links"": [
            302,
            309
          ],
          ""slot_index"": 0
        }
      ],
      ""properties"": {
        ""showOutputText"": true,
        ""horizontal"": false
      }
    },
    {
      ""id"": 111,
      ""type"": ""LatentCompositeMasked"",
      ""pos"": [
        1985,
        827
      ],
      ""size"": {
        ""0"": 315,
        ""1"": 146
      },
      ""flags"": {},
      ""order"": 20,
      ""mode"": 0,
      ""inputs"": [
        {
          ""name"": ""destination"",
          ""type"": ""LATENT"",
          ""link"": 310
        },
        {
          ""name"": ""source"",
          ""type"": ""LATENT"",
          ""link"": 271
        },
        {
          ""name"": ""mask"",
          ""type"": ""MASK"",
          ""link"": 273
        }
      ],
      ""outputs"": [
        {
          ""name"": ""LATENT"",
          ""type"": ""LATENT"",
          ""links"": [
            300
          ],
          ""shape"": 3,
          ""slot_index"": 0
        }
      ],
      ""properties"": {
        ""Node name for S&R"": ""LatentCompositeMasked""
      },
      ""widgets_values"": [
        0,
        0,
        false
      ]
    },
    {
      ""id"": 99,
      ""type"": ""Reroute"",
      ""pos"": [
        2165,
        589
      ],
      ""size"": [
        75,
        26
      ],
      ""flags"": {},
      ""order"": 13,
      ""mode"": 0,
      ""inputs"": [
        {
          ""name"": """",
          ""type"": ""*"",
          ""link"": 218
        }
      ],
      ""outputs"": [
        {
          ""name"": ""CLIP"",
          ""type"": ""CLIP"",
          ""links"": [],
          ""slot_index"": 0
        }
      ],
      ""properties"": {
        ""showOutputText"": true,
        ""horizontal"": false
      }
    },
    {
      ""id"": 124,
      ""type"": ""CheckpointLoaderSimple"",
      ""pos"": [
        70,
        546
      ],
      ""size"": {
        ""0"": 315,
        ""1"": 98
      },
      ""flags"": {},
      ""order"": 1,
      ""mode"": 0,
      ""outputs"": [
        {
          ""name"": ""MODEL"",
          ""type"": ""MODEL"",
          ""links"": [
            290
          ],
          ""shape"": 3,
          ""slot_index"": 0
        },
        {
          ""name"": ""CLIP"",
          ""type"": ""CLIP"",
          ""links"": [
            291,
            293,
            294
          ],
          ""shape"": 3,
          ""slot_index"": 1
        },
        {
          ""name"": ""VAE"",
          ""type"": ""VAE"",
          ""links"": [
            292
          ],
          ""shape"": 3,
          ""slot_index"": 2
        }
      ],
      ""properties"": {
        ""Node name for S&R"": ""CheckpointLoaderSimple""
      },
      ""widgets_values"": [
        ""epicRealism_sd15.safetensors""
      ]
    },
    {
      ""id"": 68,
      ""type"": ""LoadImage"",
      ""pos"": [
        825,
        874
      ],
      ""size"": {
        ""0"": 320,
        ""1"": 314
      },
      ""flags"": {},
      ""order"": 2,
      ""mode"": 0,
      ""outputs"": [
        {
          ""name"": ""IMAGE"",
          ""type"": ""IMAGE"",
          ""links"": [
            125,
            283
          ],
          ""shape"": 3,
          ""slot_index"": 0
        },
        {
          ""name"": ""MASK"",
          ""type"": ""MASK"",
          ""links"": [
            126,
            250
          ],
          ""shape"": 3,
          ""slot_index"": 1
        }
      ],
      ""properties"": {
        ""Node name for S&R"": ""LoadImage""
      },
      ""widgets_values"": [
        ""clipspace/clipspace-mask-1776487.png [input]"",
        ""image""
      ]
    },
    {
      ""id"": 129,
      ""type"": ""Reroute"",
      ""pos"": [
        2159,
        622
      ],
      ""size"": [
        75,
        26
      ],
      ""flags"": {},
      ""order"": 16,
      ""mode"": 0,
      ""inputs"": [
        {
          ""name"": """",
          ""type"": ""*"",
          ""link"": 302
        }
      ],
      ""outputs"": [
        {
          ""name"": ""VAE"",
          ""type"": ""VAE"",
          ""links"": [
            306
          ],
          ""slot_index"": 0
        }
      ],
      ""properties"": {
        ""showOutputText"": true,
        ""horizontal"": false
      }
    },
    {
      ""id"": 131,
      ""type"": ""VAEEncodeTiled"",
      ""pos"": [
        1541,
        738
      ],
      ""size"": {
        ""0"": 315,
        ""1"": 78
      },
      ""flags"": {},
      ""order"": 18,
      ""mode"": 0,
      ""inputs"": [
        {
          ""name"": ""pixels"",
          ""type"": ""IMAGE"",
          ""link"": 308
        },
        {
          ""name"": ""vae"",
          ""type"": ""VAE"",
          ""link"": 309
        }
      ],
      ""outputs"": [
        {
          ""name"": ""LATENT"",
          ""type"": ""LATENT"",
          ""links"": [
            310
          ],
          ""shape"": 3,
          ""slot_index"": 0
        }
      ],
      ""properties"": {
        ""Node name for S&R"": ""VAEEncodeTiled""
      },
      ""widgets_values"": [
        512
      ]
    },
    {
      ""id"": 125,
      ""type"": ""CLIPTextEncode"",
      ""pos"": [
        483,
        84
      ],
      ""size"": {
        ""0"": 400,
        ""1"": 200
      },
      ""flags"": {},
      ""order"": 6,
      ""mode"": 0,
      ""inputs"": [
        {
          ""name"": ""clip"",
          ""type"": ""CLIP"",
          ""link"": 293
        }
      ],
      ""outputs"": [
        {
          ""name"": ""CONDITIONING"",
          ""type"": ""CONDITIONING"",
          ""links"": [
            295
          ],
          ""shape"": 3,
          ""slot_index"": 0
        }
      ],
      ""properties"": {
        ""Node name for S&R"": ""CLIPTextEncode""
      },
      ""widgets_values"": [
        ""naked woman, skin, breasts""
      ],
      ""color"": ""#232"",
      ""bgcolor"": ""#353""
    },
    {
      ""id"": 126,
      ""type"": ""CLIPTextEncode"",
      ""pos"": [
        477,
        329
      ],
      ""size"": {
        ""0"": 400,
        ""1"": 200
      },
      ""flags"": {},
      ""order"": 7,
      ""mode"": 0,
      ""inputs"": [
        {
          ""name"": ""clip"",
          ""type"": ""CLIP"",
          ""link"": 294
        }
      ],
      ""outputs"": [
        {
          ""name"": ""CONDITIONING"",
          ""type"": ""CONDITIONING"",
          ""links"": [
            296
          ],
          ""shape"": 3,
          ""slot_index"": 0
        }
      ],
      ""properties"": {
        ""Node name for S&R"": ""CLIPTextEncode""
      },
      ""widgets_values"": [
        ""clothes, cloth, clothing, skirt, blouse""
      ],
      ""color"": ""#322"",
      ""bgcolor"": ""#533""
    },
    {
      ""id"": 127,
      ""type"": ""KSampler"",
      ""pos"": [
        2615,
        737
      ],
      ""size"": {
        ""0"": 512.0107421875,
        ""1"": 726.5308227539062
      },
      ""flags"": {},
      ""order"": 23,
      ""mode"": 0,
      ""inputs"": [
        {
          ""name"": ""model"",
          ""type"": ""MODEL"",
          ""link"": 297
        },
        {
          ""name"": ""positive"",
          ""type"": ""CONDITIONING"",
          ""link"": 298
        },
        {
          ""name"": ""negative"",
          ""type"": ""CONDITIONING"",
          ""link"": 299
        },
        {
          ""name"": ""latent_image"",
          ""type"": ""LATENT"",
          ""link"": 300
        }
      ],
      ""outputs"": [
        {
          ""name"": ""LATENT"",
          ""type"": ""LATENT"",
          ""links"": [
            305
          ],
          ""shape"": 3,
          ""slot_index"": 0
        }
      ],
      ""title"": ""Nakedizer 2000 (the KSampler)"",
      ""properties"": {
        ""Node name for S&R"": ""KSampler""
      },
      ""widgets_values"": [
        628804442187078,
        ""randomize"",
        35,
        7,
        ""euler"",
        ""normal"",
        1
      ],
      ""color"": ""#223"",
      ""bgcolor"": ""#335""
    },
    {
      ""id"": 130,
      ""type"": ""VAEDecodeTiled"",
      ""pos"": [
        3165,
        548
      ],
      ""size"": {
        ""0"": 315,
        ""1"": 78
      },
      ""flags"": {},
      ""order"": 24,
      ""mode"": 0,
      ""inputs"": [
        {
          ""name"": ""samples"",
          ""type"": ""LATENT"",
          ""link"": 305
        },
        {
          ""name"": ""vae"",
          ""type"": ""VAE"",
          ""link"": 306
        }
      ],
      ""outputs"": [
        {
          ""name"": ""IMAGE"",
          ""type"": ""IMAGE"",
          ""links"": [
            307
          ],
          ""shape"": 3,
          ""slot_index"": 0
        }
      ],
      ""properties"": {
        ""Node name for S&R"": ""VAEDecodeTiled""
      },
      ""widgets_values"": [
        512
      ]
    },
    {
      ""id"": 101,
      ""type"": ""PreviewImage"",
      ""pos"": [
        3531,
        587
      ],
      ""size"": {
        ""0"": 825.9764404296875,
        ""1"": 793.4138793945312
      },
      ""flags"": {},
      ""order"": 25,
      ""mode"": 0,
      ""inputs"": [
        {
          ""name"": ""images"",
          ""type"": ""IMAGE"",
          ""link"": 307
        }
      ],
      ""properties"": {
        ""Node name for S&R"": ""PreviewImage""
      }
    },
    {
      ""id"": 132,
      ""type"": ""Note"",
      ""pos"": [
        484,
        985
      ],
      ""size"": [
        318.4731262207031,
        105.8062622070313
      ],
      ""flags"": {},
      ""order"": 3,
      ""mode"": 0,
      ""properties"": {
        ""text"": """"
      },
      ""widgets_values"": [
        ""Load your clothed female image here and use the mask editor to masks all clothing, then QUEUE PROMPT. It sometimes doesn't work well, so just try again, make the mask bigger.""
      ],
      ""color"": ""#432"",
      ""bgcolor"": ""#653""
    }
  ],
  ""links"": [
    [
      125,
      68,
      0,
      69,
      0,
      ""IMAGE""
    ],
    [
      126,
      68,
      1,
      69,
      1,
      ""MASK""
    ],
    [
      197,
      90,
      0,
      91,
      0,
      ""*""
    ],
    [
      218,
      77,
      0,
      99,
      0,
      ""*""
    ],
    [
      244,
      93,
      0,
      105,
      0,
      ""CONDITIONING""
    ],
    [
      245,
      71,
      0,
      105,
      2,
      ""CONTROL_NET""
    ],
    [
      246,
      69,
      0,
      105,
      3,
      ""IMAGE""
    ],
    [
      247,
      92,
      0,
      105,
      1,
      ""CONDITIONING""
    ],
    [
      250,
      68,
      1,
      74,
      0,
      ""*""
    ],
    [
      271,
      113,
      0,
      111,
      1,
      ""LATENT""
    ],
    [
      273,
      74,
      0,
      111,
      2,
      ""MASK""
    ],
    [
      283,
      68,
      0,
      122,
      0,
      ""IMAGE""
    ],
    [
      284,
      122,
      0,
      113,
      0,
      ""INT""
    ],
    [
      285,
      122,
      1,
      113,
      1,
      ""INT""
    ],
    [
      286,
      105,
      0,
      95,
      0,
      ""*""
    ],
    [
      287,
      105,
      1,
      94,
      0,
      ""*""
    ],
    [
      290,
      124,
      0,
      90,
      0,
      ""*""
    ],
    [
      291,
      124,
      1,
      77,
      0,
      ""*""
    ],
    [
      292,
      124,
      2,
      73,
      0,
      ""*""
    ],
    [
      293,
      124,
      1,
      125,
      0,
      ""CLIP""
    ],
    [
      294,
      124,
      1,
      126,
      0,
      ""CLIP""
    ],
    [
      295,
      125,
      0,
      93,
      0,
      ""*""
    ],
    [
      296,
      126,
      0,
      92,
      0,
      ""*""
    ],
    [
      297,
      91,
      0,
      127,
      0,
      ""MODEL""
    ],
    [
      298,
      95,
      0,
      127,
      1,
      ""CONDITIONING""
    ],
    [
      299,
      94,
      0,
      127,
      2,
      ""CONDITIONING""
    ],
    [
      300,
      111,
      0,
      127,
      3,
      ""LATENT""
    ],
    [
      302,
      73,
      0,
      129,
      0,
      ""*""
    ],
    [
      305,
      127,
      0,
      130,
      0,
      ""LATENT""
    ],
    [
      306,
      129,
      0,
      130,
      1,
      ""VAE""
    ],
    [
      307,
      130,
      0,
      101,
      0,
      ""IMAGE""
    ],
    [
      308,
      69,
      0,
      131,
      0,
      ""IMAGE""
    ],
    [
      309,
      73,
      0,
      131,
      1,
      ""VAE""
    ],
    [
      310,
      131,
      0,
      111,
      0,
      ""LATENT""
    ]
  ],
  ""groups"": [],
  ""config"": {},
  ""extra"": {},
  ""version"": 0.4
}"
wLS8pWmi,Pow for BigInteger,NickAndNick,C++,Tuesday 26th of March 2024 01:33:46 PM CDT,"#include <fstream>
#include <iomanip>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>

using namespace std;

class BigInteger {
public:
    BigInteger() : is_negative(false) {
        digits.push_back(0);
    }

    BigInteger(string str) {
        if (str.length() == 0) is_negative = false;
        else {
            if (str[0] == '-') {
                str = str.substr(1);
                is_negative = true;
            } else is_negative = false;
            for (auto i = static_cast<long long>(str.length()); i > 0; i -= 9) {
                if (i < 9) digits.push_back(atoi(str.substr(0, i).c_str()));
                else digits.push_back(atoi(str.substr(i - 9, 9).c_str()));
            }
            remove_leading_zeros();
        }
    }

    BigInteger(signed long long value) { 
        if (value < 0) {
            is_negative = true;
            value = -value;
        } else is_negative = false;
        do {
            digits.push_back(value % base);
            value /= base;
        } while (value != 0);
    }

    BigInteger(unsigned long long value) {
        is_negative = false;
        do {
            digits.push_back(value % base);
            value /= base;
        } while (value != 0);
    }

    operator string() const {
        stringstream ss;
        ss << *this;
        return ss.str();
    }

    const BigInteger operator+() const {
        return BigInteger(*this);
    }

    const BigInteger operator-() const {
        BigInteger copy(*this);
        copy.is_negative = !copy.is_negative;
        return copy;
    }

    void operator*=(const BigInteger& bi) {
        *this = *this * bi;
    }

    void operator/=(const BigInteger& bi) {
        *this = *this / bi;
    }

    const BigInteger pow(BigInteger bi) const {
        BigInteger a(*this), result(1LL);
        while (bi != 0LL) {
            if (bi.odd()) result *= a;
            a *= a;
            bi /= 2LL;
        }
        return result;
    }
private:
    class DidisionByZero : public exception {};
	static const auto base = 1000000000;
	vector<int> digits;
	bool is_negative;

    void remove_leading_zeros() {
        while (digits.size() > 1 && digits.back() == 0) digits.pop_back();
        if (digits.size() == 1 && digits[0] == 0) is_negative = false;
    }

    void shift_right() {
        if (digits.size() == 0) {
            digits.push_back(0);
            return;
        }
        digits.push_back(digits[digits.size() - 1]);
        for (size_t i = digits.size() - 2; i > 0; --i) digits[i] = digits[i - 1];
        digits[0] = 0;
    }

    bool odd() const {
        if (digits.size() == 0) return false;
        return digits[0] & 1;
    }

    bool even() const {
        return !this->odd();
    }

    friend bool operator==(const BigInteger& a, const BigInteger& b) {
        if (a.is_negative != b.is_negative) return false;
        if (a.digits.empty()) {
            if (b.digits.empty() || (b.digits.size() == 1 && b.digits[0] == 0)) return true;
            else return false;
        }
        if (b.digits.empty()) {
            if (a.digits.size() == 1 && a.digits[0] == 0) return true;
            else return false;
        }
        if (a.digits.size() != b.digits.size()) return false;
        for (size_t i = 0; i < a.digits.size(); ++i) if (a.digits[i] != b.digits[i]) return false;
        return true;
    }

    friend bool operator <(const BigInteger& a, const BigInteger& b) {
        if (a == b) return false;
        if (a.is_negative) {
            if (b.is_negative) return ((-b) < (-a));
            else return true;
        }
        else if (b.is_negative) return false;
        else {
            if (a.digits.size() != b.digits.size()) {
                return a.digits.size() < b.digits.size();
            } else {
                for (long long i = a.digits.size() - 1; i >= 0; --i) {
                    if (a.digits[i] != b.digits[i]) return a.digits[i] < b.digits[i];
                }
                return false;
            }
        }
    }

    friend bool operator<=(const BigInteger& a, const BigInteger& b) {
        return (a < b || a == b);
    }

    friend bool operator!=(const BigInteger& a, const BigInteger& b) {
        return !(a == b);
    }

    friend bool operator>(const BigInteger& a, const BigInteger& b) {
        return !(a <= b);
    }

    friend bool operator>=(const BigInteger& a, const BigInteger& b) {
        return !(a < b);
    }

    friend const BigInteger operator+(BigInteger a, const BigInteger& b) {
        if (a.is_negative) {
            if (b.is_negative) return -(-a + (-b));
            else return b - (-a);
        }
        else if (b.is_negative) return a - (-b);
        auto transfer = 0;
        for (size_t i = 0; i < std::max(a.digits.size(), b.digits.size()) || transfer != 0; ++i) {
            if (i == a.digits.size()) a.digits.push_back(0);
            a.digits[i] += transfer + (i < b.digits.size() ? b.digits[i] : 0);
            transfer = a.digits[i] >= BigInteger::base;
            if (transfer != 0) a.digits[i] -= BigInteger::base;
        }
        return a;
    }

    friend const BigInteger operator-(BigInteger a, const BigInteger& b) {
        if (b.is_negative) return a + (-b);
        else if (a.is_negative) return -(-a + b);
        else if (a < b) return -(b - a);
        auto transfer = 0;
        for (size_t i = 0; i < b.digits.size() || transfer != 0; ++i) {
            a.digits[i] -= transfer + (i < b.digits.size() ? b.digits[i] : 0);
            transfer = a.digits[i] < 0;
            if (transfer != 0) a.digits[i] += BigInteger::base;
        }
        a.remove_leading_zeros();
        return a;
    }

    friend const BigInteger operator*(const BigInteger& a, const BigInteger& b) {
        BigInteger result;
        result.digits.resize(a.digits.size() + b.digits.size());
        for (size_t i = 0; i < a.digits.size(); ++i) {
            auto transfer = 0;
            for (size_t j = 0; j < b.digits.size() || transfer != 0; ++j) {
                auto current = result.digits[i + j] +
                    a.digits[i] * 1LL * (j < b.digits.size() ? b.digits[j] : 0) + transfer;
                result.digits[i + j] = static_cast<int>(current % BigInteger::base);
                transfer = static_cast<int>(current / BigInteger::base);
            }
        }
        result.is_negative = a.is_negative != b.is_negative;
        result.remove_leading_zeros();
        return result;
    }

    friend const BigInteger operator/(const BigInteger& a, const BigInteger& b) {
        if (b == 0LL) throw BigInteger::DidisionByZero();
        BigInteger bi = b;
        bi.is_negative = false;
        BigInteger result, current;
        result.digits.resize(a.digits.size());
        for (long long i = static_cast<long long>(a.digits.size()) - 1; i >= 0; --i) {
            current.shift_right();
            current.digits[0] = a.digits[i];
            current.remove_leading_zeros();
            long long x = 0, l = 0, r = BigInteger::base;
            while (l <= r) {
                auto m = (l + r) / 2;
                BigInteger tmp = bi * m;
                if (tmp <= current) {
                    x = m;
                    l = m + 1;
                }
                else r = m - 1;
            }
            result.digits[i] = x;
            current = current - bi * x;
        }
        result.is_negative = a.is_negative != b.is_negative;
        result.remove_leading_zeros();
        return result;
    }

    friend ostream& operator<<(ostream& out, const BigInteger& bi) {
        if (bi.digits.empty()) out << 0;
        else {
            if (bi.is_negative) out << '-';
            out << bi.digits.back();
            char old_fill = out.fill('0');
            for (auto i = static_cast<long long>(bi.digits.size()) - 2; i >= 0; --i) {
                out << std::setw(9) << bi.digits[i];
            }
            out.fill(old_fill);
        }
        return out;
    }

    friend istream& operator>>(istream& inp, BigInteger& bi) {
        string num;
        inp >> num;
        bi = BigInteger(num);
        return inp;
    }
};

int main() {
    string input{ R""(C:\Users\student\Desktop\ConsoleApplication1\input.txt)"" };
    string output{ R""(C:\Users\student\Desktop\ConsoleApplication1\output.txt)"" };
    ifstream inp(input);
    ofstream out(output);
    if (inp.is_open() && out.is_open()) {
        BigInteger n;
        BigInteger p;
        inp >> n >> p;
        out << n.pow(p);
    }
    inp.is_open() ? inp.close() : void();
    out.is_open() ? out.close() : void();
}"
DA3YsWi1,Untitled,drakon-firestone,Python,Tuesday 26th of March 2024 01:09:34 PM CDT,"import pygame

# zaimportuj wysokość i szerokość ekranu z modułu game_settings

# stwórz zmienną na ekran (o nazwie screen) 
# i ustaw rozdzielczość ekranu (display.set_mode() z biblioteki pygame)

# stwórz zegar

# zrób zmienną background_image na tło
# załaduj tło ""background.png"" z folderu images


######## GŁÓWNA PĘTLA PROGRAMU ##############

# stwórz zmienną game_runnning (prawda/fałsz)

# pętla while

    # przejdź po wszystkich eventach 
    # i dodaj obsługę kliknięcia ESCAPE do zamknięcia gry (game_running = False)

    # oraz dodaj zamknięcie aplikacji na kliknięcie X


    # wyświetl tło - metoda blit() ekranu (screen), położenie (0,0)

    # odśwież ekran (metoda flip())

    # ustawianie FPS na 30 (z użyciem zegara)


# zamknięcie aplikacji"
kmCLga5S,л3с++cryptapi,istomina_sofia,C++,Tuesday 26th of March 2024 12:42:34 PM CDT,"#include <iostream>
#include <Windows.h>
#include <wincrypt.h>
#include <string>
#include <iomanip>
#include <iostream>

using namespace std;

int main()
{
    setlocale(LC_ALL, ""RUS"");

    string nameC;
    cout << ""Введите имя контейнера: "";
    cin >> nameC;

    HCRYPTKEY hKey;
    HCRYPTPROV hProv;
    LPCSTR Container = nameC.c_str();


    if (CryptAcquireContextA(&hProv, Container, NULL, PROV_RSA_FULL, 0))
    {
        cout << ""Контейнер "" << Container << "" существует"" << endl;

    jump:

        if (CryptGetUserKey(hProv, AT_KEYEXCHANGE, &hKey))
        {
            cout << ""Ключ извлечен"" << endl;
            CryptDestroyKey(hKey);
        }

        else
        {
            if (CryptGenKey(hProv, CALG_RSA_KEYX, CRYPT_EXPORTABLE, &hKey))
            {
                cout << ""Ключ создан"" << endl;
                CryptDestroyKey(hKey);
            }

            else
            {
                cerr << ""Ошибка при создании ключа: "" << GetLastError();
                if (hKey) CryptDestroyKey(hKey);
            }
        }
    }

    else
    {
        if (CryptAcquireContextA(&hProv, Container, NULL, PROV_RSA_FULL, CRYPT_NEWKEYSET))
        {
            cout << ""Контейнер "" << Container << "" был создан"" << endl;

            goto jump;
        }

        else
        {
            cerr << ""Ошибка при создании контейнера: "" << GetLastError();
        }
    }

    CryptReleaseContext(hProv, 0);
}"
Fd6HS4dw,MpShort [MoodPlay],AhmadXploit,Dart,Tuesday 26th of March 2024 12:33:10 PM CDT,"[
{
	""imgUrl"": ""https://res.cloudinary.com/dybvjvrib/image/upload/v1691942620/Story/hamzah_j4glhq.webp"",
	""logoUrl"": ""https://res.cloudinary.com/dybvjvrib/image/upload/v1691942620/Story/hamzah_j4glhq.webp"",
    ""videoUrl"": ""https://flutter.github.io/assets-for-api-docs/assets/videos/bee.mp4"",
    ""name"": ""The Lion of Allah: Hamza Ibn Abdul Mutalib (RA)"",
	""title"": ""Anonymous""
  },
  {
	""imgUrl"": ""https://res.cloudinary.com/dybvjvrib/image/upload/v1691835269/Story/64d75aa254b70_uqppgk.png"",
	""logoUrl"": ""https://res.cloudinary.com/dybvjvrib/image/upload/v1691835269/Story/64d75aa254b70_uqppgk.png"",
    ""videoUrl"": ""https://res.cloudinary.com/dybvjvrib/video/upload/v1711213503/MoodPlay/Black%20Pink/Snaptik.app_7199976110782729478_fus92k.mp4"",
    ""name"": ""Bilal the Great African Muslim"",
	""title"": ""Anonymous""
  },
{
	""imgUrl"": ""https://res.cloudinary.com/dybvjvrib/image/upload/v1691859328/Story/al_fateh_siovvh.png"",
	""logoUrl"": ""https://res.cloudinary.com/dybvjvrib/image/upload/v1691859328/Story/al_fateh_siovvh.png"",
    ""videoUrl"": ""https://res.cloudinary.com/dybvjvrib/video/upload/v1711213503/MoodPlay/Black%20Pink/Snaptik.app_7199976110782729478_fus92k.mp4"",
    ""name"": ""Muhammad al Fatih, The Conqueror of Constantinople"",
	""author"": ""Anonymous""
  },
{
	""imgUrl"": ""https://res.cloudinary.com/dybvjvrib/image/upload/v1691862067/Story/khaleed_mmalxl.png"",
	""logoUrl"": ""https://res.cloudinary.com/dybvjvrib/image/upload/v1691859328/Story/al_fateh_siovvh.png"",
    ""videoUrl"": ""https://res.cloudinary.com/dybvjvrib/video/upload/v1711213503/MoodPlay/Black%20Pink/Snaptik.app_7199976110782729478_fus92k.mp4"",
    ""name"": ""Sword of God: The story of Khalid Ibn Al-Walid"",
	""author"": ""Anonymous""
  },
{
	""imgUrl"": ""https://res.cloudinary.com/dybvjvrib/image/upload/v1691916765/Story/Nabi_Nuh_ifxjze.png"",
	""logoUrl"": ""https://res.cloudinary.com/dybvjvrib/image/upload/v1691859328/Story/al_fateh_siovvh.png"",
    ""videoUrl"": ""https://res.cloudinary.com/dybvjvrib/video/upload/v1711213503/MoodPlay/Black%20Pink/Snaptik.app_7199976110782729478_fus92k.mp4"",
    ""name"": ""The Story of Abul Basyar (Prophet Noah)"",
	""author"": ""Anonymous""
  }
]"
Ca45Yxbv,СПРИНТ № 6 | Профилируем и ускоряем | Урок 9: Вглубь процессора,chevengur,C++,Tuesday 26th of March 2024 12:27:43 PM CDT,"main.cpp

#include <iostream>
#include <vector>
#include <cassert>

using namespace std;

struct days {
    int count; 
    float sum;
};

std::vector<float> ComputeAvgTemp(const std::vector<std::vector<float>>& measures) {

    if (measures.empty() || measures[0].empty()) {
        return {};
    }
    // Инициализация вектора структур days для хранения суммы и количества измерений для каждой минуты
    std::vector<days> aggregated(measures.size()); // Используем размер первого внутреннего вектора

    for (const auto& day : measures) {
        for (size_t i = 0; i < day.size(); ++i) { // Используем размер текущего внутреннего вектора
            if (day[i] > 0) {
                aggregated[i].sum += day[i];
                aggregated[i].count++;
            }
        }
    }

    // Инициализация вектора для хранения средних значений
    std::vector<float> averages(measures[0].size());

    // Вычисление средних значений для каждой минуты
    for (size_t i = 0; i < measures[0].size(); ++i) { // Используем размер первого внутреннего вектора
        averages[i] = (aggregated[i].count > 0) ? aggregated[i].sum / aggregated[i].count : 0;
    }


    return averages;
}

void Test() {
    // 4 дня по 3 измерения
    vector<vector<float>> v = {
        {0, -1, -1},
        {1, -2, -2},
        {2, 3, -3},
        {3, 4, -4}
    };

    // среднее для 0-го измерения (1+2+3) / 3 = 2 (не учитывам 0)
    // среднее для 1-го измерения (3+4) / 2 = 3.5 (не учитывам -1, -2)
    // среднее для 2-го не определено (все температуры отрицательны), поэтому должен быть 0

    assert(ComputeAvgTemp(v) == vector<float>({ 2, 3.5f, 0 }));
}

int main() {
    Test();
    cout << ""Test passed successfully!"" << endl;
    return 0;
}

***************************************************************************************************************************************
log_duration.h

#pragma once

#include <chrono>
#include <iostream>

#define PROFILE_CONCAT_INTERNAL(X, Y) X##Y
#define PROFILE_CONCAT(X, Y) PROFILE_CONCAT_INTERNAL(X, Y)
#define UNIQUE_VAR_NAME_PROFILE PROFILE_CONCAT(profileGuard, __LINE__)
#define LOG_DURATION(x) LogDuration UNIQUE_VAR_NAME_PROFILE(x)

class LogDuration {
public:
    // заменим имя типа std::chrono::steady_clock
    // с помощью using для удобства
    using Clock = std::chrono::steady_clock;

    LogDuration(const std::string& id) : id_(id) {
    }

    ~LogDuration() {
        using namespace std::chrono;
        using namespace std::literals;

        const auto end_time = Clock::now();
        const auto dur = end_time - start_time_;
        std::cerr << id_ << "": ""s << duration_cast<milliseconds>(dur).count() << "" ms""s << std::endl;
    }

private:
    const std::string id_;
    const Clock::time_point start_time_ = Clock::now();
};
"
8w6Ni2U1,Update Broken,Alexr360,Lua,Tuesday 26th of March 2024 12:15:37 PM CDT,"-- List of programs to check for updates
local programs = {
    {name = ""Bastion"", pastebinCode = ""Czt0xUgp""},
    {name = ""RBastion"", pastebinCode = ""YLMd18xC""},
    {name = ""FBastion"", pastebinCode = ""8pF6ds3s""},
    {name = ""GPS"", pastebinCode = ""d8WLzv0U""},
    {name = ""Stripmine"", pastebinCode = ""BkFdvGdv""},
    {name = ""Update"", pastebinCode = ""8w6Ni2U1""},
    {name = ""Greeting"", pastebinCode = ""REfxrLkG""},
    {name = ""startup"", pastebinCode = ""u2ey5fkZ""},
    -- Add more programs as needed
}

-- Function to check for updates
local function checkForUpdates(program)
    -- Loop through the list of programs
    for i, program in ipairs(programs) do
      -- Check if the file already exists
      if not fs.exists(program.name) then
        -- Open a new file with the current program name
        local file = fs.open(program.name, ""w"")

        -- Write a message to the file
        file.write(""This is "" .. program.name .. "". The pastebin code is "" .. program.pastebinCode)

        -- Close the file
        file.close()
      end
    end
    print(""Files have been created."")
    
    print(""Checking for updates for "" .. program.name .. ""..."")
    local response = http.get(""https://pastebin.com/raw/"" .. program.pastebinCode)
    if response then
        local remoteVersion = response.readAll()
        response.close()
        local localVersion = fs.exists(program.name) and fs.open(program.name, ""r"").readAll() or nil
        if localVersion and localVersion ~= remoteVersion then
            print(""Updating "" .. program.name .. ""..."")
            local file = fs.open(program.name, ""w"")
            file.write(remoteVersion)
            file.close()
            print(program.name .. "" updated successfully."")
        else
            print(program.name .. "" is up to date."")
        end
    else
        print(""Failed to check for updates for "" .. program.name)
    end
end

-- Main function to check for updates for all programs
local function main()
    for _, program in ipairs(programs) do
        checkForUpdates(program)
    end
end

-- Run main function
main()"
kVn6s8hR,Untitled,dllbridge,C,Tuesday 26th of March 2024 12:15:33 PM CDT,"
#include   <stdio.h>
  




///////////////////////////////////////////////////
int main()                                       //
{
	
	int  n    =   4 ;
	int *p    =  &n ;

    printf("" n = %d  \n"",  n); 
    printf("" p = %d  \n"",  p);
    printf(""*p = %d  \n"", *p); 	
    printf(""&p = %d  \n"", &p);	 		
}




"
xWmgkTAs,Untitled,MeehoweCK,C++,Tuesday 26th of March 2024 12:14:39 PM CDT,"#include <iostream>

bool czyPierwsza(unsigned int liczba) {
	if (liczba < 2) {
		return false;
	}
	for (auto i{ 2 }; i * i <= liczba; ++i) {
		if (liczba % i == 0) {
			return false;
		}
	}
	return true;
}

int main() {
	unsigned int liczba;
	std::cout << ""Podaj liczbe naturalna: "";
	std::cin >> liczba;
	if (czyPierwsza(liczba)) {
		std::cout << liczba << "" jest liczba pierwsza.\n"";
	}
	else {
		std::cout << liczba << "" nie jest liczba pierwsza.\n"";
	}
	return 0;
}"
78dCMR1V,Divide and Conquer,nathanwailes,Python,Tuesday 26th of March 2024 12:13:10 PM CDT,"""""""
This algorithm divides the original problem into smaller sub-problems, solves the sub-problems recursively, and combines their solutions to get the solution to the original problem.
"""""""
VRmtpV7a,Sequences,bAngelov,JavaScript,Tuesday 26th of March 2024 12:09:13 PM CDT,"function solve(data) {
    data.map(element=>JSON.parse(element).sort((a,b)=>Number(b)-Number(a)).toString())
        .reduce((prev,element)=>{
            if (!prev.includes(element)){
                prev.push(element)
            }
            return prev
        },[])
        .map(element=>JSON.parse(`[${element}]`))
        .sort((a,b)=>a.length-b.length)
        .forEach(element=>console.log(`[${element.join(', ')}]`))
}"
yfNWUpmh,Backtracking,nathanwailes,Python,Tuesday 26th of March 2024 12:09:01 PM CDT,"""""""
Backtracking is a systematic way of trying out different sequences of decisions until we find one that ""works."" It's often used for solving problems related to constraints, such as puzzles (like Sudoku), combinatorial problems, and pathfinding in mazes.

A classic example of a problem solved using backtracking is the N-Queens puzzle. The challenge is to place N queens on an N×N chessboard so that no two queens threaten each other. This means no two queens can be in the same row, column, or diagonal.

Here's a simple Python solution using backtracking. This solution focuses on placing one queen in each row, starting from the first row and moving downwards. If a valid position is found, the algorithm proceeds to the next row; if not, it backtracks.

The code below defines a chessboard as a 2D list, where '.' represents an empty square and 'Q' represents a queen. The solve_n_queens function tries to place queens on the board in a way that no two queens attack each other. The is_safe function checks if a queen can be placed at the specified row and column considering the current state of the board. The solve function attempts to place a queen in every row of a particular column before moving on to the next column, and it backtracks if no safe position is found.

For an n of 4, this will generate all the possible solutions where the queens don't attack each other.
""""""


def solve_n_queens(n):
    board = [['.' for _ in range(n)] for _ in range(n)]
    results = []
    
    def is_safe(row, col):
        # Check this row on left side
        for i in range(col):
            if board[row][i] == 'Q':
                return False
        
        # Check upper diagonal on left side
        for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
            if board[i][j] == 'Q':
                return False
        
        # Check lower diagonal on left side
        for i, j in zip(range(row, n, 1), range(col, -1, -1)):
            if board[i][j] == 'Q':
                return False
        
        return True
    
    def solve(col):
        # If all queens are placed
        if col >= n:
            results.append([''.join(row) for row in board])
            return
        
        # Consider this column and try placing this queen in all rows one by one
        for i in range(n):
            if is_safe(i, col):
                board[i][col] = 'Q'
                solve(col + 1)  # Recur to place rest of the queens
                board[i][col] = '.'  # If no place is safe, remove queen and backtrack
                
    solve(0)
    return results

# Example usage
n = 4
for solution in solve_n_queens(n):
    for row in solution:
        print(row)
    print()"
5jk3G8e1,SDFBSENT,gadungw71,PHP,Tuesday 26th of March 2024 12:03:08 PM CDT,"•	https://github.com/Godzilla-x-Kong-2-2-2024-THAI
•	https://github.com/2-2024-Godzilla-x-Kong-2
•	https://github.com/2-Godzilla-x-Kong-2-2024-4K-1080P
•	https://github.com/2024-Tee-Yod
•	https://www.senscritique.com/liste/SUBTHAItm_2_2024_or/3803292
•	https://www.senscritique.com/liste/2_2024_FULL_HD/3803321
•	https://www.senscritique.com/liste/2_2024_HD_Thai_Sub/3803421
•	https://www.senscritique.com/liste/Tee_Yod_2024_4K_THAI/3803332
•	https://scribehow.com/page/_Godzilla_x_Kong_The_New_Empire__2_2024__HD_1080p__sCn1X4ggR2u5OYNieLlVZA
•	https://scribehow.com/page/TH__2__2024__Godzilla_x_Kong_The_New_Empire_M-THAI_HD__ajOBMbQuQX-ai5_q0I7ZTA
•	https://scribehow.com/page/__2__Godzilla_x_Kong_The_New_Empire____1080PX__THAI__U-gIi57mR0G_6Ohlr-y17w
•	https://scribehow.com/page/__Tee_Yod____1080PX__FHD__k6D9LBSXRLmDfKaqUALviQ
•	https://wandering.flarum.cloud/d/51454-puspita
•	https://hiuderyy.hashnode.dev/asdvsentet
•	https://www.onfeetnation.com/profiles/blogs/sintiabealla
•	https://medium.com/@deliaaniocktas/%E9%AD%94%E9%AC%BC%E5%89%8B%E6%98%9F-%E5%86%B0%E5%A4%A9%E5%87%8D%E5%9C%B0-%E5%AE%8C%E6%95%B4%E7%89%88-ghostbusters-frozen-empire-%E7%94%B5%E5%BD%B1%E5%AE%8C%E6%95%B4%E7%89%88%E5%AE%8C%E6%95%B4%E7%89%88-2024tw-912085ba04fa
•	https://open.firstory.me/story/clu8luji5079k01xobt6m104l
•	https://www.artstation.com/artwork/VJnqr5
•	https://forum.mush.com.br/topic/207882/ssantikeloja
•	https://rentry.co/gckmf49f
•	https://hackmd.io/@rerewilli6/B1A3n_x10
•	https://paste.ee/p/wKCaX
•	https://start.me/w/MK2p0R
•	https://telegra.ph/SADVFRBS-03-26
•	https://muckrack.com/onyek-wenag/bio
•	http://aldenfamilydentistry.com/UserProfile/tabid/57/userId/718465/Default.aspx
•	https://profile.hatena.ne.jp/EAFDREG/
•	https://www.fitlynk.com/1711472474F247777
"
RT0Wy2yi,Catalogue,Silviya7,JavaScript,Tuesday 26th of March 2024 11:56:01 AM CDT,"function Catalogue(input){

    let ArrInput={};
    for (const productdata of input) {
        
      let [product,price]=productdata.split(':');
      ArrInput[product.trim()]=price.trim();

       //let price1=Number(Arrin[1].trim());
       //let pr= Arrin[0].trim();
       // ArrInput[pr]=price1;
     
    }

    let result= Object.entries(ArrInput);
    result.sort((a,b) => a[0].localeCompare(b[0]));
    let Oldletter='';
    for (const [p,price] of result) {
        if(Oldletter !='' && p[0] !=Oldletter){
            console.log(p[0]);
            Oldletter=p[0];
        }
        else if(Oldletter==''){
        console.log(p[0].trim());
        Oldletter=p[0];
        }
        console.log(`  ${p}: ${price}`);
    }

}"
VTcfNhYA,vullaby and mandibuzz pvp Filter,name8888less,JavaScript,Tuesday 26th of March 2024 11:55:21 AM CDT,"javascript:$.getScript(""https://cdn.jsdelivr.net/gh/name8888less/sgpokemap-addons@main/vullaby-mandi-pvp-filter.js"", function(data, textStatus, jqxhr) {});
"
EhxSzwXL,jellyjar error - jellyfin_api_client modification,mariokartgod,Python,Tuesday 26th of March 2024 11:55:10 AM CDT,"# ORIGINAL SCRIPT

# server_url = os.environ['JELLYFIN_URL']
# server_username = os.environ['JELLYFIN_USERNAME']
# server_password = os.environ['JELLYFIN_PASSWORD']

# MODIFIED SCRIPT

os.environ['JELLYFIN_URL'] = 'http://localIPaddress:8096'
os.environ['JELLYFIN_USERNAME'] = 'binary'
os.environ['JELLYFIN_PASSWORD'] = 'mypassword'"
REfxrLkG,Welcome Screen,Alexr360,Lua,Tuesday 26th of March 2024 11:51:54 AM CDT,"-- Print a line of dashes for aesthetics
local function lineBreak()
    local width, height = term.getSize()
    for i = 1, width do
      io.write(""-"")
    end
    io.write(""\n"")
end
-- Function to clear the screen
local function clearScreen()
    term.clear()
    term.setCursorPos(1, 1)
end

clearScreen()
-- Print the welcome message
print(""Welcome to Monopoly OS by Monopoly Co."")
lineBreak()
print(""Current Time: "" .. textutils.formatTime(os.time(), true))
lineBreak()
print(""Select a program to run:"")
print(""1. Bastion"")
print(""2. GPS"")
print(""3. Update"")
print(""4. Other"")
lineBreak()

local choice = read()

if choice == ""1"" then
  shell.run(""Bastion"")
elseif choice == ""2"" then
  shell.run(""GPS"")
elseif choice == ""3"" then
  shell.run(""Update"")
end"
wSMNp8mA,jellyjar error - config/data/backups/USER output,mariokartgod,JSON,Tuesday 26th of March 2024 11:51:02 AM CDT,"{
    ""User"": ""binary"",
    ""Items"": []
}"
RAVBceBu,Update,Alexr360,Lua,Tuesday 26th of March 2024 11:46:37 AM CDT,"-- List of programs to check for updates
local programs = {
    {name = ""Bastion"", pastebinCode = ""YLMd18xC""},
    {name = ""GPS"", pastebinCode = ""d8WLzv0U""},
    {name = ""Update"", pastebinCode = ""RAVBceBu""},
    {name = ""startup"", pastebinCode = ""REfxrLkG""},
    -- Add more programs as needed
}

-- Function to check for updates
local function checkForUpdates(program)
    print(""Checking for updates for "" .. program.name .. ""..."")
    local response = http.get(""https://pastebin.com/raw/"" .. program.pastebinCode)
    if response then
        local remoteVersion = response.readAll()
        response.close()
        local localVersion = fs.exists(program.name) and fs.open(program.name, ""r"").readAll() or nil
        if localVersion and localVersion ~= remoteVersion then
            print(""Updating "" .. program.name .. ""..."")
            local file = fs.open(program.name, ""w"")
            file.write(remoteVersion)
            file.close()
            print(program.name .. "" updated successfully."")
        else
            print(program.name .. "" is up to date."")
        end
    else
        print(""Failed to check for updates for "" .. program.name)
    end
end

-- Main function to check for updates for all programs
local function main()
    for _, program in ipairs(programs) do
        checkForUpdates(program)
    end
end

-- Run main function
main()"
TYcGDrwc,Dynamic Programming,nathanwailes,Python,Tuesday 26th of March 2024 11:45:33 AM CDT,"""""""
Dynamic Programming (DP) is a method for solving complex problems by breaking them down into simpler subproblems. It is used when a problem has overlapping subproblems and optimal substructure, meaning the problem can be broken down into smaller, reusable problems, and the optimal solution can be constructed from the optimal solutions of its subproblems.

A classic example of DP is solving the Fibonacci sequence, where each number is the sum of the two preceding ones, starting from 0 and 1. That is:

fibonacci(0) = 0
fibonacci(1) = 1
fibonacci(n) = fibonacci(n-1) + fibonacci(n-2) for n > 1

With the dynamic programming approach below, instead of computing the Fibonacci sequence recursively and recalculating the same values multiple times, we store (or ""memoize"") previously calculated Fibonacci numbers in an array (fib_cache). This way, each Fibonacci number is calculated once, and subsequent requests for that number are answered in constant time. This method significantly reduces the time complexity from exponential in naive recursion to linear with DP.
""""""

def fibonacci(n):
    # Base cases
    if n <= 1:
        return n
    
    # Initialize cache
    fib_cache = [0] * (n + 1)
    fib_cache[1] = 1
    
    # Populate the cache iteratively
    for i in range(2, n + 1):
        fib_cache[i] = fib_cache[i-1] + fib_cache[i-2]
    
    return fib_cache[n]

# Example usage
print(fibonacci(10))  # Output: 55"
KCfWS95N,Shopping Cart,bAngelov,JavaScript,Tuesday 26th of March 2024 11:44:34 AM CDT,"function solve() {
    const shoppingCartElement = document.querySelector(""body > .shopping-cart"")
    const resultElement= document.querySelector("".shopping-cart textarea"")
    const checkOutElement = document.querySelector("".shopping-cart button.checkout"")
    let cart = []
    shoppingCartElement.addEventListener(""click"",handleCart)
    checkOutElement.addEventListener(""click"", handleCheckout)

    function handleCart(event){
        if (event.target.tagName !== ""BUTTON"") return
        const price = event.target.parentElement.parentElement.querySelector("".product-line-price"")
        const name = event.target.parentElement.parentElement.querySelector("".product-details .product-title"")
        cart.push({price:Number(price.textContent),type:name.textContent})
        resultElement.textContent += `Added ${name.textContent} for ${Number(price.textContent).toFixed(2)} to the cart.\n`
    }

    function handleCheckout(event){
        const products = Array.from(new Set(cart.reduce((prev,prod)=> {
            prev.push(prod.type)
            return prev
        },[]))).join("", "")
        const totalPrice =  cart.reduce((prev,{price,type})=> prev + price,0)
        resultElement.textContent += `You bought ${products} for ${totalPrice.toFixed(2)}.`
        Array.from(document.querySelectorAll(""button"")).forEach(element=>element.setAttribute(""disabled"",""disabled""))
        event.stopPropagation()
    }


}"
eRUxMLh8,Untitled,MeehoweCK,C++,Tuesday 26th of March 2024 11:43:02 AM CDT,"/*
Polecenie:
Napisz funkcję unsigned int dzielniki(unsigned int n), która zwraca liczbę dzielników naturalnych podanej liczby n
*/

#include <iostream>

unsigned int dzielniki(unsigned int n) {
	if (n == 0) {
		return 0;
	}
	if (n == 1) {
		return 1;
	}
	unsigned int wynik{2};
	for (auto i{ 2 }; i < n; ++i) {
		if (n % i == 0) {
			++wynik;
		}
	}
	return wynik;
}

bool czyPierwsza(unsigned int liczba) {
	if (dzielniki(liczba) == 2) {
		return true;
	}
	return false;
}

int main() {
	unsigned int liczba;
	std::cout << ""Podaj liczbe naturalna: "";
	std::cin >> liczba;
	std::cout << liczba << "" posiada "" << dzielniki(liczba) << "" dzielniki naturalne, wiec "";
	if (!czyPierwsza(liczba)) {
		std::cout << ""nie "";
	}
	std::cout << ""jest liczba pierwsza.\n"";
	return 0;
}"
B1qu06J1,Two pointers,nathanwailes,Python,Tuesday 26th of March 2024 11:38:55 AM CDT,"def two_sum_sorted(arr, target):
    # Initialize two pointers
    left = 0  # Starting from the beginning of the array
    right = len(arr) - 1  # Starting from the end of the array
    
    while left < right:
        current_sum = arr[left] + arr[right]
        
        if current_sum == target:
            return [left, right]  # Return the indices of the two numbers
        elif current_sum < target:
            left += 1  # Move the left pointer to the right
        else:
            right -= 1  # Move the right pointer to the left
            
    return []  # Return an empty list if no pair is found

# Example usage
arr = [2, 7, 11, 15]
target = 9
print(two_sum_sorted(arr, target))  # Output: [0, 1], because arr[0] + arr[1] = 2 + 7 = 9"
vrCdZTku,Sliding Window,nathanwailes,Python,Tuesday 26th of March 2024 11:37:00 AM CDT,"def max_sum_subarray(arr, k):
    # Edge case
    if len(arr) < k:
        return ""The array is too small for the window size""
    
    # Initialize the variables
    max_sum = window_sum = sum(arr[:k])
    window_start = 0
    
    # Slide the window, we don't need to slide if k is equal to the length of the array
    for window_end in range(k, len(arr)):
        # Add the next element (slide the window up by one)
        window_sum += arr[window_end] - arr[window_start]
        # Remove the element going out of the window
        window_start += 1
        # Update max_sum if needed
        max_sum = max(max_sum, window_sum)
    
    return max_sum

# Example usage
arr = [2, 3, 4, 1, 5]
k = 3
print(max_sum_subarray(arr, k))  # Output: 12, which is the sum of [3, 4, 5]"
eBQydkux,LCD Asterisk Game,ubidefeo,Python,Tuesday 26th of March 2024 11:34:13 AM CDT,"from machine import I2C, Pin
from mp_button import *
from i2c_lcd import *
from time import sleep
from machine import Timer

def azione_bottone(pin, azione):
  if azione == Button.PRESSED:
    print('posizione: ', posizione)
    if posizione <= 0 or posizione  >= 15:
      print('ci hai preso')
      
      schermo.color(0, 200, 0)
    else:
      print('sei lento')
      schermo.color(200, 0, 0)

connessione_i2c = I2C(0)
schermo = RGBDisplay(connessione_i2c)
bottone = Button(16, callback = azione_bottone)
timer_asterisco = Timer(-1)

posizione = 0
tempo = 0
direzione = 1

schermo.color(200, 200, 200)

def azione_timer(timer):
  global posizione, direzione
  posizione += direzione
  if posizione >= 15:
    direzione = -1
  if posizione <= 0:
    direzione = 1
  aggiorna_schermo()
  

def aggiorna_schermo():
  schermo.color(100, 100, 100)
  schermo.clear()
  schermo.move(posizione, 0)
  schermo.write('*')
  schermo.move(posizione, 1)
  schermo.write('*')

timer_asterisco.init(period = 300, mode = Timer.PERIODIC, callback = azione_timer)
aggiorna_schermo()

while True:
  bottone.update()
"
8D5Bbi8B,Untitled,icarussiano,Python,Tuesday 26th of March 2024 11:07:52 AM CDT,"import html
import logging
import urllib.parse
from uuid import uuid4
import requests
import wolframalpha
from more_itertools import peekable
from telegram import InlineQueryResultArticle, InputTextMessageContent, Update, InlineQueryResultPhoto
from telegram.constants import ParseMode
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, InlineQueryHandler
from telegram.helpers import mention_html
import os
import vertexai
from vertexai.generative_models import GenerativeModel, Part

os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = '/home/Icarussiano/provagemini-417819.json'
#setup Gemini
project_id = ""provagemini-417819""
location = ""us-central1""
vertexai.init(project=project_id, location=location)
model = GenerativeModel(""gemini-1.0-pro"")

#setup logger
logging.basicConfig(
    format=""%(asctime)s - %(name)s - %(levelname)s - %(message)s"", level=logging.INFO
)
# set higher logging level for httpx to avoid all GET and POST requests being logged
logging.getLogger(""httpx"").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)

TOKEN = os.getenv('TOKEN')
appid = os.getenv('API_key')
wolfram_client = wolframalpha.Client(appid)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """"""Send a message when the command /start is issued.""""""
    user_id = update.effective_user.id
    name = update.effective_user.full_name
    menzione = mention_html(user_id, name)
    await update.message.reply_html(
        f""Ciao {menzione}! Sono un bot che ti aiuta a rispondere alle domande usando WolframAlpha. Scrivi /help per ""
        f""sapere come usarmi."")


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """"""Send a message when the command /help is issued.""""""
    help_text = ""Puoi usare i seguenti comandi:\n\n""
    help_text += ""/short <query>: Risponderò usando l'API short answers di WolframAlpha\n""
    help_text += ""/img <query>: Risponderò con l'immagine del risultato di WolframAlpha\n""
    help_text += (""/query <query>: Risponderò in modo dettagliato, riportando tutte le informazioni testuali ""
                  ""disponibili\n"")
    help_text += ""\nPuoi anche usare il bot inline, scrivendo @simplewolframbot <query> ;""
    await update.message.reply_text(help_text)


async def simple_query(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """"""Handle the /simple command. This is run when you type: /simple <query>""""""
    query = ' '.join(update.message.text.split()[1:])
    query_url = urllib.parse.quote_plus(query)
    short_url = f""http://api.wolframalpha.com/v1/result?appid={appid}&i={query_url}""
    res = requests.get(short_url).text
    await update.message.reply_text(res)


async def img(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """"""Handle the /img command. This is run when you type: /img <query>""""""
    query = ' '.join(update.message.text.split()[1:])
    query_url = urllib.parse.quote_plus(query)
    photo_url = f""http://api.wolframalpha.com/v1/simple?appid={appid}&i={query_url}""
    res = requests.get(photo_url)
    with open('output.png', 'wb') as f:
        f.write(res.content)
    await update.message.reply_photo(open('output.png', 'rb'))


async def reply_query(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """"""Handle the /query command. This is run when you type: /query <query>""""""
    query = ' '.join(update.message.text.split()[1:])
    res = wolfram_client.query(query)
    result_text = """"
    if peekable(res.results):
        for pod in res.results:
            for subpod in pod.subpods:
                result_text += f""{subpod.plaintext}\n""
    else:
        for pod in res.pods:
            result_text += f""\n{pod.title}\n""
            for subpod in pod.subpods:
                result_text += f""{subpod.plaintext}\n""
    if len(result_text) > 4096:
        result_text = result_text[:4096]
    await update.message.reply_text(result_text)


async def inline_query(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """"""Handle the inline query. This is run when you type: @simplewolframbot <query>""""""
    query = update.inline_query.query
    if not query:  # empty query should not be handled
        return
    elif ';' in query:
        query = query[:-1]
        query_url = urllib.parse.quote_plus(query)
        photo_url = f""http://api.wolframalpha.com/v1/simple?appid={appid}&i={query_url}""
        res = wolfram_client.query(query)
        result_text = """"
        if peekable(res.results):
            for pod in res.results:
                for subpod in pod.subpods:
                    if subpod.plaintext:
                        result_text += f""{html.escape(subpod.plaintext)}\n""
        else:
            for pod in res.pods:
                result_text += f""\n<b>{pod.title}</b>\n""
                length = len(f""\n<b>{pod.title}</b>\n"")
                for subpod in pod.subpods:
                    if subpod.plaintext:
                        result_text += f""{html.escape(subpod.plaintext)}\n""
                    else:
                        result_text = result_text[:-length]

        short_url = f""http://api.wolframalpha.com/v1/result?appid={appid}&i={query_url}""
        req = requests.get(short_url).text
        message = InputTextMessageContent(f""<b>{html.escape(query)}</b> \n{result_text}"", parse_mode=ParseMode.HTML)
        rapido = InputTextMessageContent(f""<b>{html.escape(query)}</b> \n{html.escape(req)}"", parse_mode=ParseMode.HTML)
        if len(message.message_text) > 4096:
            message = InputTextMessageContent(message.message_text[:4096], parse_mode=ParseMode.HTML)
        if len(rapido.message_text) > 4096:
            rapido = InputTextMessageContent(rapido.message_text[:4096], parse_mode=ParseMode.HTML)
        latex = f""Convert the following text in LaTex inline expression. Answer only with the LaTex code delimited by dollar sign. \nText: {query}={result_text}""
        responses = model.generate_content(latex, stream=True)
        latex_text = ''.join([response.text for response in responses])
        #latex_text = responses.text
        latex_text = latex_text.lstrip('$')
        latex_text = latex_text.rstrip('$')
        latex_text = f""${latex_text}$""

        results = [
            InlineQueryResultArticle(
                id=str(uuid4()),
                title=""Risposta rapida"",
                input_message_content=rapido,
            ),
            InlineQueryResultArticle(
                id=str(uuid4()),
                title=""Risposta testuale completa"",
                input_message_content=message,
            ),
            InlineQueryResultArticle(
                id=str(uuid4()),
                title=""LaTeX(sperimental)"",
                input_message_content=InputTextMessageContent(latex_text, parse_mode=ParseMode.HTML),
            ),
            InlineQueryResultPhoto(
                id=str(uuid4()),
                title=""Immagine"",
                photo_url=photo_url,
                thumbnail_url=photo_url,
            ),

        ]

        await update.inline_query.answer(results)


app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler(""query"", reply_query))
app.add_handler(CommandHandler(""start"", start))
app.add_handler(CommandHandler(""help"", help_command))
app.add_handler(CommandHandler(""img"", img))
app.add_handler(CommandHandler(""short"", simple_query))
app.add_handler(InlineQueryHandler(inline_query))
app.run_polling()"
0wF4Z3rc,Untitled,kopyl,Python,Tuesday 26th of March 2024 10:59:07 AM CDT,"with open(filepath, 'rb') as file:
  pdf_stream = io.BytesIO(file.read())
images = convert_from_bytes(pdf_stream.read())
paths = []
# Save images
for i, image in enumerate(images):
  image.save(f'page{i}.png', 'PNG')
  paths.append(f'page{i}.png')


# Load the document segmentation model
# docseg_model_name = 'DILHTWD/documentlayoutsegmentation_YOLOv8_ondoclaynet'
docseg_model = YOLO(""yolov8x-doclaynet-epoch64-imgsz640-initiallr1e-4-finallr1e-5.pt"")

# Process the images with the model
results = docseg_model(source=paths, save=True, show_labels=True, show_conf=True, show_boxes=True)"
X6K6uHAz,Untitled,DuboisP,C++,Tuesday 26th of March 2024 10:36:24 AM CDT,"
#include <Wire.h>
#include ""PCF8574.h""
#include <Adafruit_GFX.h>
#include <Adafruit_SH110X.h>

#include <ESP8266WiFi.h>
#include <RotaryEncoder.h>
#include <Ticker.h>

#define PIN_A D5   //ky-040 clk pin, add 100nF/0.1uF capacitors between pin & ground!!!
#define PIN_B D6   //ky-040 dt  pin, add 100nF/0.1uF capacitors between pin & ground!!!
#define BUTTON D7  //ky-040 sw  pin, add 100nF/0.1uF capacitors between pin & ground!!!

RotaryEncoder encoder(PIN_A, PIN_B, BUTTON);

Ticker encoderRotary;
Ticker encoderButton;

#define i2c_Address 0x3c
#define SCREEN_WIDTH 128  // OLED display width, in pixels
#define SCREEN_HEIGHT 64  // OLED display height, in pixels
#define OLED_RESET -1     //   QT-PY / XIAO

#define C1_HEIGHT 64
#define C1_WIDTH 128
static const unsigned char PROGMEM CAR1_bmp[] = { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3b, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe2, 0x03, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x01, 0xff, 0xe7,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xff, 0x81, 0xff, 0x00, 0x1f,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xc1, 0xc1, 0xbf, 0xff, 0x3f,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x83, 0xfc, 0x00, 0x01, 0xe0, 0x00, 0xe0, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x0f, 0xfc, 0x00, 0x00, 0xe0, 0x00, 0xf0, 0x6f, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x3f, 0xf8, 0x00, 0x00, 0xc0, 0x00, 0x78, 0x37, 0xfd, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xd0, 0x00, 0x01, 0xe0, 0x00, 0x3c, 0x1b, 0xff, 0x2f,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0x83, 0xff, 0xd0, 0x00, 0x01, 0xe0, 0x00, 0x1e, 0x0f, 0xff, 0xe7,
                                                  0xff, 0xff, 0xff, 0xff, 0xfe, 0x0f, 0xff, 0xe0, 0x00, 0x03, 0x90, 0x00, 0x1f, 0x3f, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xfe, 0xf8, 0x3f, 0xfe, 0x00, 0x00, 0x03, 0x90, 0x00, 0x0f, 0xff, 0xff, 0xfe,
                                                  0xff, 0xff, 0xff, 0xff, 0x60, 0xff, 0xf0, 0x00, 0x04, 0x03, 0x88, 0x00, 0x0f, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0x03, 0xff, 0x80, 0x00, 0x1f, 0x07, 0x08, 0x00, 0x7f, 0xff, 0xff, 0xdc,
                                                  0xff, 0xff, 0xff, 0xfa, 0x73, 0x18, 0x00, 0x00, 0x20, 0x87, 0x05, 0xf3, 0xff, 0xf3, 0xff, 0xbc,
                                                  0xff, 0xff, 0xff, 0xf0, 0x09, 0x80, 0x00, 0x00, 0x00, 0x47, 0x03, 0xff, 0xff, 0xc3, 0xfc, 0x0d,
                                                  0xff, 0xff, 0xff, 0xfe, 0xe0, 0x60, 0x00, 0x07, 0xf0, 0x6f, 0x07, 0xff, 0xff, 0xc3, 0xf8, 0x0f,
                                                  0xff, 0xff, 0xff, 0xff, 0x80, 0x3c, 0x00, 0x00, 0x18, 0x0e, 0x07, 0xff, 0xfe, 0xe3, 0xf0, 0x0f,
                                                  0xff, 0xff, 0xff, 0xff, 0xc0, 0x1a, 0x00, 0x00, 0x00, 0x1e, 0x03, 0xcf, 0xf8, 0xc3, 0xf1, 0x07,
                                                  0xff, 0xff, 0xff, 0xff, 0x7f, 0x05, 0x80, 0x00, 0x03, 0xfe, 0x7b, 0xff, 0xff, 0xc3, 0xf3, 0x87,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x03, 0xff, 0xf9, 0xff, 0xff, 0xff, 0xc3, 0xe1, 0xc7,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0xe4, 0xc7,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0xcc, 0xc7,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xcc, 0xe7,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xcf, 0xe7,
                                                  0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0x87, 0xef,
                                                  0xfe, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xfd, 0xdf, 0x86, 0xef,
                                                  0xfc, 0x40, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0x04, 0xef,
                                                  0xfc, 0xfc, 0x7e, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0x0c, 0xef,
                                                  0xf8, 0xfe, 0xff, 0xf8, 0x07, 0xff, 0xff, 0xff, 0xff, 0x00, 0x7f, 0xff, 0xff, 0xff, 0x0e, 0xef,
                                                  0xf9, 0xff, 0xff, 0xff, 0xf8, 0x0f, 0xff, 0xff, 0xfe, 0x00, 0x7f, 0xff, 0xff, 0xff, 0x0f, 0xcf,
                                                  0xff, 0xf3, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xfc, 0x78, 0x7f, 0xff, 0xff, 0x0b, 0x07, 0xdf,
                                                  0xe3, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x01, 0xff, 0xfc, 0xbc, 0x7f, 0xff, 0xfc, 0x0a, 0x03, 0xdf,
                                                  0xd8, 0x7f, 0xff, 0xff, 0xff, 0xe7, 0x80, 0x7f, 0xfd, 0x7c, 0x3f, 0xff, 0xf0, 0x06, 0x07, 0x9f,
                                                  0x9f, 0x7f, 0xff, 0xff, 0xff, 0xc7, 0xfc, 0xff, 0xf8, 0x6e, 0x3f, 0xff, 0xe0, 0x04, 0x07, 0xbf,
                                                  0x83, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xff, 0xff, 0xf8, 0x66, 0x3f, 0xff, 0xc0, 0x3c, 0x02, 0x3f,
                                                  0x63, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xe7, 0x3f, 0xff, 0xc0, 0x78, 0x00, 0x7f,
                                                  0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xe3, 0x1f, 0xff, 0x01, 0xc0, 0x00, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xf7, 0x7f, 0xff, 0x0e, 0x00, 0x00, 0xff,
                                                  0x77, 0xff, 0xf7, 0xff, 0xfe, 0x01, 0xff, 0xff, 0xe7, 0x7f, 0x7f, 0xfe, 0x70, 0x07, 0xc3, 0xff,
                                                  0x7f, 0xff, 0xe7, 0xff, 0xfc, 0xf8, 0x7f, 0xff, 0xe6, 0x3f, 0x7f, 0xff, 0x80, 0x1f, 0xff, 0xff,
                                                  0x1f, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xe6, 0x3f, 0x7f, 0xfc, 0x00, 0xff, 0xff, 0xff,
                                                  0x87, 0xff, 0xff, 0xff, 0xf8, 0x03, 0xff, 0xff, 0xc6, 0x67, 0x7f, 0xe0, 0x03, 0xff, 0xff, 0xff,
                                                  0x9b, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xff, 0xff, 0xc3, 0x67, 0x7f, 0x00, 0x1f, 0xff, 0xff, 0xff,
                                                  0xcd, 0xdf, 0xff, 0xff, 0xdf, 0xff, 0xff, 0xff, 0x81, 0xe7, 0x78, 0x00, 0xff, 0xff, 0xff, 0xff,
                                                  0xc1, 0xc1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x83, 0xe6, 0x60, 0x03, 0xff, 0xff, 0xff, 0xff,
                                                  0xf8, 0xe0, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x83, 0xfe, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff,
                                                  0xfe, 0xf0, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0x03, 0x3e, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff,
                                                  0x7f, 0xf8, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x02, 0x3e, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xfb, 0x80, 0x00, 0x00, 0x0f, 0xff, 0xff, 0x02, 0x3c, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xef, 0xff, 0xf0, 0x03, 0x0f, 0xef, 0xff, 0xfe, 0x01, 0xfc, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xf3, 0xff, 0xff, 0x83, 0x07, 0xf7, 0xff, 0xfe, 0x01, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xf8, 0xcf, 0xff, 0xff, 0x80, 0xf3, 0xff, 0xfc, 0x00, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xe0, 0x01, 0xff, 0xff, 0xc0, 0x03, 0xff, 0xfc, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xf0, 0x00, 0x3f, 0xf7, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xfc, 0x00, 0x03, 0xdf, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xf0, 0x00, 0x1a, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0x00, 0x00, 0x00, 0x78, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xfe, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };

#define C2_HEIGHT 64
#define C2_WIDTH 128
static const unsigned char PROGMEM CAR2_bmp[] = { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xfc, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xf8, 0x7c, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xf7, 0x9e, 0x00, 0x00, 0x5f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xd8, 0x0e, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xfe, 0xe0, 0x06, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xfb, 0xc0, 0x03, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0x07, 0xc3, 0xe3, 0x00, 0x00, 0x00, 0x1b, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xfb, 0xfc, 0xa3, 0xf1, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xef, 0xff, 0x6f, 0xc1, 0x87, 0xff, 0xf8, 0x1f, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xfe, 0x1f, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3e, 0xff, 0x3f, 0x3f, 0xff, 0xff, 0xff,
                                                  0xff, 0xfd, 0xd7, 0xff, 0xff, 0xfd, 0xef, 0xff, 0xfb, 0xe1, 0xef, 0xe2, 0x7d, 0xff, 0xff, 0xff,
                                                  0xff, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x7c, 0x3d, 0xfd, 0xbf, 0xff, 0xff, 0xff,
                                                  0xff, 0xfd, 0xfd, 0xc0, 0x7f, 0xff, 0xff, 0x03, 0xfc, 0x2f, 0xff, 0x80, 0x7d, 0xdf, 0xff, 0xff,
                                                  0xff, 0xfd, 0x8f, 0xc3, 0x70, 0xff, 0xfe, 0x01, 0xfe, 0x43, 0xfb, 0xef, 0xbf, 0x7f, 0xff, 0xff,
                                                  0xff, 0xfc, 0x07, 0xc7, 0xff, 0xe1, 0xfc, 0x00, 0xff, 0x98, 0xff, 0xf1, 0xff, 0xfb, 0xff, 0xff,
                                                  0xff, 0xfd, 0x03, 0xc7, 0xff, 0xfc, 0x3c, 0x78, 0x7f, 0xc0, 0x3f, 0xff, 0xff, 0xf9, 0xff, 0xff,
                                                  0xff, 0xfc, 0x73, 0xc7, 0xff, 0xfd, 0x70, 0xfc, 0x7f, 0xf8, 0x0f, 0xff, 0xff, 0xfc, 0xff, 0xff,
                                                  0xff, 0xfc, 0x21, 0xe3, 0xff, 0xfd, 0xf9, 0x9e, 0x3f, 0xff, 0xf3, 0xff, 0xff, 0xfe, 0x7f, 0xff,
                                                  0xff, 0xfc, 0x21, 0xe3, 0x7f, 0xff, 0xf9, 0x1b, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xfe, 0xa0, 0xf1, 0xff, 0xff, 0xf3, 0x31, 0x1f, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xff,
                                                  0xff, 0xfe, 0xe4, 0xf1, 0xbf, 0xfb, 0xf3, 0x31, 0x1f, 0xf7, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xfe, 0x7c, 0x7b, 0xbf, 0xff, 0xf3, 0xb0, 0x9f, 0xef, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff,
                                                  0xff, 0xfe, 0x3c, 0x7b, 0xfd, 0xff, 0xf3, 0xf0, 0x8f, 0xff, 0xff, 0xff, 0xf7, 0xfc, 0xbf, 0xff,
                                                  0xff, 0xfc, 0x64, 0xb6, 0xff, 0xf5, 0xe2, 0xff, 0x8f, 0xdf, 0xf8, 0x0f, 0x50, 0x07, 0x7f, 0xff,
                                                  0xff, 0xfe, 0xe4, 0xfb, 0xf9, 0xfd, 0xe2, 0x7f, 0x8f, 0xff, 0xe0, 0x01, 0xf8, 0x07, 0xff, 0xff,
                                                  0xff, 0xfe, 0x80, 0xdf, 0xef, 0xf7, 0xf2, 0x78, 0x8f, 0xbf, 0xc0, 0x03, 0xf8, 0x07, 0x7f, 0xff,
                                                  0xff, 0xff, 0x10, 0xef, 0xff, 0xbf, 0xf2, 0xf0, 0x8f, 0xff, 0xc0, 0x03, 0xf8, 0x0f, 0x7f, 0xff,
                                                  0xff, 0xff, 0x18, 0xf3, 0xff, 0xfe, 0x73, 0xd0, 0x87, 0x7f, 0x80, 0x03, 0xf7, 0xff, 0x1f, 0xff,
                                                  0xff, 0xff, 0xb0, 0xff, 0x83, 0xff, 0xf3, 0x98, 0x8f, 0x7f, 0xfc, 0x03, 0xf7, 0xfe, 0x2f, 0xff,
                                                  0xff, 0xff, 0x80, 0x00, 0x3f, 0xc3, 0xf1, 0x19, 0x0f, 0xbf, 0xff, 0xff, 0xb6, 0x01, 0xdf, 0xff,
                                                  0xff, 0xff, 0x80, 0x00, 0x00, 0x07, 0xc1, 0x99, 0x0f, 0xff, 0xff, 0x00, 0x00, 0x7e, 0x7f, 0xff,
                                                  0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0xce, 0x0f, 0xff, 0xff, 0xff, 0xff, 0x8e, 0x7f, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x7c, 0x0f, 0x80, 0x00, 0x00, 0x0f, 0x1f, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x38, 0x00, 0xff, 0xff, 0xc0, 0x00, 0x01, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };

#define GT7_HEIGHT 64
#define GT7_WIDTH 128
static const unsigned char PROGMEM GT7_bmp[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xf0, 0x00, 0x3f, 0xff, 0xf0, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xf0, 0x00, 0x7f, 0xff, 0xf0, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xf0, 0x00, 0x7f, 0xff, 0xf0, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xe0, 0x00, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xe0, 0x00, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xc0, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xc0, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0x00, 0x07, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf8, 0x00, 0x3f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x03, 0xff, 0xf0, 0x00, 0x00, 0x7f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x07, 0xff, 0xc0, 0x00, 0x00, 0x7f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x07, 0xff, 0x00, 0x07, 0xf8, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x0f, 0xfc, 0x00, 0x3f, 0xfc, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x7f, 0xf9, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0xff, 0xf9, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0xff, 0xf3, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x1f, 0xc0, 0x01, 0xff, 0xf3, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x1f, 0x80, 0x01, 0xff, 0xe7, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x1f, 0x80, 0x03, 0xff, 0xc7, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x1f, 0x80, 0x03, 0xff, 0xcf, 0xff, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x0f, 0x80, 0x07, 0xff, 0x8f, 0xff, 0x01, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };


#define fan_HEIGHT 64
#define fan_WIDTH 64
static const unsigned char PROGMEM FAN_bmp[] = { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff,
                                                 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x7f,
                                                 0xfc, 0x87, 0xff, 0x80, 0x03, 0xff, 0xe1, 0x3f, 0xfc, 0x03, 0xfc, 0x01, 0x80, 0x7f, 0xc0, 0x3f,
                                                 0xf9, 0x33, 0xf0, 0x7f, 0xfe, 0x0f, 0xcc, 0x9f, 0xf9, 0x39, 0xe1, 0xf0, 0x1f, 0x87, 0x9c, 0x9f,
                                                 0xf9, 0x13, 0x87, 0x80, 0x0f, 0xe1, 0xc8, 0x9f, 0xf9, 0x83, 0x1f, 0x8f, 0xc7, 0xf8, 0xc1, 0x9f,
                                                 0xf9, 0xee, 0x3f, 0x9f, 0xf3, 0xfc, 0x77, 0x9f, 0xf9, 0xfc, 0x7f, 0x8f, 0xf3, 0xfe, 0x3f, 0x9f,
                                                 0xf9, 0xf8, 0xff, 0xc7, 0xf3, 0xf3, 0x1f, 0x9f, 0xf9, 0xf1, 0xff, 0xe7, 0xf3, 0xe1, 0x8f, 0x9f,
                                                 0xf9, 0xf3, 0x8f, 0xf3, 0xf3, 0xe0, 0xcf, 0x9f, 0xf9, 0xe7, 0x03, 0xf3, 0xf3, 0xcc, 0x67, 0x9f,
                                                 0xf9, 0xc6, 0x70, 0xf9, 0xf3, 0xce, 0x63, 0x9f, 0xf9, 0xcc, 0xfc, 0x39, 0xf3, 0x8f, 0x33, 0x9f,
                                                 0xf9, 0x88, 0xff, 0x19, 0xf3, 0x9f, 0x13, 0x9f, 0xf9, 0x99, 0xff, 0x89, 0xf7, 0x3f, 0x99, 0x9f,
                                                 0xf9, 0x99, 0xff, 0xc5, 0xe6, 0x3f, 0x99, 0x9f, 0xf9, 0x33, 0xff, 0xe0, 0x04, 0x7f, 0x9d, 0x9f,
                                                 0xf9, 0x33, 0xff, 0xf0, 0x00, 0xff, 0x9c, 0x9f, 0xf9, 0x32, 0x03, 0xe3, 0xc1, 0xff, 0x3c, 0x9f,
                                                 0xf9, 0x30, 0x00, 0x4f, 0xf3, 0xfc, 0x3c, 0x9f, 0xf9, 0x39, 0xfc, 0x0f, 0xf1, 0xf8, 0xfc, 0x9f,
                                                 0xf9, 0x3f, 0xff, 0x9f, 0xf9, 0xc1, 0xfc, 0x9f, 0xf9, 0x7f, 0xfc, 0x1f, 0xf8, 0x07, 0xfe, 0x9f,
                                                 0xf9, 0x7f, 0xe0, 0x1f, 0xf8, 0x3f, 0xfe, 0x9f, 0xf9, 0x3f, 0x83, 0x9f, 0xf9, 0xff, 0xfc, 0x9f,
                                                 0xf9, 0x3f, 0x1f, 0x8f, 0xf0, 0x3f, 0x9c, 0x9f, 0xf9, 0x3c, 0x3f, 0xcf, 0xf2, 0x00, 0x0c, 0x9f,
                                                 0xf9, 0x3c, 0xff, 0x83, 0xc7, 0xc0, 0x4c, 0x9f, 0xf9, 0x39, 0xff, 0x00, 0x0f, 0xff, 0xcc, 0x9f,
                                                 0xf9, 0xb9, 0xfe, 0x20, 0x07, 0xff, 0xcc, 0x9f, 0xf9, 0x99, 0xfc, 0x67, 0xa3, 0xff, 0x99, 0x9f,
                                                 0xf9, 0x99, 0xfc, 0xef, 0x91, 0xff, 0x99, 0x9f, 0xf9, 0xc8, 0xf9, 0xcf, 0x98, 0xff, 0x11, 0x9f,
                                                 0xf9, 0xcc, 0xf1, 0xcf, 0x9c, 0x3f, 0x33, 0x9f, 0xf9, 0xc6, 0x73, 0xcf, 0x9f, 0x0e, 0x63, 0x9f,
                                                 0xf9, 0xe6, 0x33, 0xcf, 0xcf, 0xc0, 0xe7, 0x9f, 0xf9, 0xf3, 0x07, 0xcf, 0xcf, 0xf1, 0xcf, 0x9f,
                                                 0xf9, 0xf1, 0x87, 0xcf, 0xe7, 0xff, 0x8f, 0x9f, 0xf9, 0xf8, 0xcf, 0xcf, 0xe3, 0xff, 0x1f, 0x9f,
                                                 0xf9, 0xfc, 0x7f, 0xcf, 0xf1, 0xfe, 0x3f, 0x9f, 0xf9, 0xee, 0x3f, 0xcf, 0xf9, 0xfc, 0x77, 0x9f,
                                                 0xf9, 0x83, 0x1f, 0xe3, 0xf1, 0xf8, 0xc1, 0x9f, 0xf9, 0x13, 0x87, 0xf0, 0x01, 0xe1, 0xc8, 0x9f,
                                                 0xf9, 0x39, 0xe1, 0xf8, 0x0f, 0x87, 0x9c, 0x9f, 0xf9, 0x33, 0xf0, 0x7f, 0xfe, 0x0f, 0xcc, 0x9f,
                                                 0xfc, 0x03, 0xfe, 0x01, 0x80, 0x3f, 0xc0, 0x3f, 0xfc, 0x87, 0xff, 0x80, 0x01, 0xff, 0xe1, 0x3f,
                                                 0xfe, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x7f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
                                                 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };


#define HS_HEIGHT 64
#define HS_WIDTH 64
static const unsigned char PROGMEM HSEAT_bmp[] = { 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x81, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                   0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                   0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                   0x80, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                   0xc0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                   0xe0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                   0xf0, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                   0xfe, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                   0xfc, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                   0xfc, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                   0xfc, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                   0xfe, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                   0xff, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                   0xff, 0x80, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                   0xff, 0xc0, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                   0xff, 0xc0, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0xff, 0xf7, 0xf7, 0xff,
                                                   0xff, 0xe0, 0x00, 0x7f, 0xf3, 0xf3, 0xf3, 0xff, 0xff, 0xf0, 0x00, 0x7f, 0xe1, 0xf1, 0xf1, 0xff,
                                                   0xff, 0xf0, 0x00, 0x3f, 0xe0, 0xf0, 0xf0, 0x7f, 0xff, 0xf0, 0x00, 0x3f, 0xe0, 0x60, 0x70, 0x3f,
                                                   0xff, 0xf8, 0x00, 0x3f, 0xe1, 0xe0, 0xf0, 0xff, 0xff, 0xf8, 0x00, 0x1f, 0xe1, 0xe0, 0xe0, 0xff,
                                                   0xff, 0xfc, 0x00, 0x1f, 0xf9, 0xf8, 0xfc, 0xff, 0xff, 0xfc, 0x00, 0x1f, 0xf9, 0xf8, 0xfc, 0xff,
                                                   0xff, 0xfc, 0x00, 0x1f, 0xf9, 0xf9, 0xf8, 0xff, 0xff, 0xfe, 0x00, 0x0f, 0xf1, 0xf9, 0xf9, 0xff,
                                                   0xff, 0xfe, 0x00, 0x00, 0x02, 0x00, 0x00, 0x03, 0xff, 0xff, 0x00, 0x00, 0x00, 0x02, 0x02, 0x01,
                                                   0xff, 0xff, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00,
                                                   0xff, 0xff, 0x80, 0x00, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x80, 0x00, 0x00, 0x48, 0x00, 0x00,
                                                   0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x48, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x10, 0x00, 0x01,
                                                   0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x10, 0x03, 0xff, 0xff, 0xe0, 0x00, 0x20, 0x00, 0x00, 0x03,
                                                   0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x07,
                                                   0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xfc, 0x01, 0x20, 0x00, 0x00, 0x0f,
                                                   0xff, 0xff, 0xff, 0xff, 0x1f, 0x9f, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0x9f, 0x8f, 0xff,
                                                   0xff, 0xff, 0xff, 0xff, 0x9f, 0x8f, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xcf, 0xc7, 0xff,
                                                   0xff, 0xff, 0xff, 0xff, 0xcf, 0xcf, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };

#define lmr_HEIGHT 64
#define lmr_WIDTH 64
static const unsigned char PROGMEM LUMIERES_bmp[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00,
                                                      0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 0x80, 0x40, 0x00, 0x00,
                                                      0x00, 0x00, 0x03, 0x01, 0x80, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x80, 0x80, 0x00, 0x00,
                                                      0x00, 0x00, 0x01, 0x80, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00,
                                                      0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x00,
                                                      0x00, 0x01, 0x00, 0x70, 0x0e, 0x00, 0x80, 0x00, 0x00, 0x01, 0xc0, 0xc0, 0x03, 0x03, 0x80, 0x00,
                                                      0x00, 0x00, 0x71, 0x80, 0x01, 0x8e, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0xc8, 0x00, 0x00,
                                                      0x00, 0x00, 0x02, 0x03, 0xc0, 0x40, 0x00, 0x00, 0x00, 0x00, 0x06, 0x0a, 0x58, 0x20, 0x00, 0x00,
                                                      0x00, 0x00, 0x04, 0x14, 0x28, 0x20, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x11, 0xc8, 0x30, 0x00, 0x00,
                                                      0x00, 0x00, 0x08, 0x16, 0x28, 0x10, 0x00, 0x00, 0x00, 0x00, 0x08, 0x74, 0x26, 0x10, 0x00, 0x00,
                                                      0x00, 0x0f, 0xc8, 0x40, 0x02, 0x13, 0xf0, 0x00, 0x00, 0x00, 0x08, 0x64, 0x26, 0x10, 0x00, 0x00,
                                                      0x00, 0x00, 0x0c, 0x14, 0x28, 0x10, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x13, 0xc8, 0x30, 0x00, 0x00,
                                                      0x00, 0x00, 0x04, 0x30, 0x0c, 0x20, 0x00, 0x00, 0x00, 0x00, 0x06, 0x1e, 0x78, 0x60, 0x00, 0x00,
                                                      0x00, 0x00, 0x02, 0x03, 0xc0, 0x40, 0x00, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0xcc, 0x00, 0x00,
                                                      0x00, 0x00, 0x61, 0x80, 0x01, 0x86, 0x00, 0x00, 0x00, 0x01, 0xc0, 0xc0, 0x03, 0x01, 0x80, 0x00,
                                                      0x00, 0x01, 0x00, 0x60, 0x02, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x20, 0x06, 0x00, 0x00, 0x00,
                                                      0x00, 0x00, 0x00, 0x20, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x04, 0x00, 0x00, 0x00,
                                                      0x00, 0x00, 0x00, 0x20, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x00,
                                                      0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                      0x00, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                      0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                      0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
                                                      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };


#define sftr_HEIGHT 64
#define sftr_WIDTH 64
static const unsigned char PROGMEM shifter_bmp[] = { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x1f, 0xff, 0xff, 0xff,
                                                     0xff, 0xff, 0xff, 0xc0, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 0xe3, 0xff, 0xff, 0xff,
                                                     0xff, 0xff, 0xff, 0x9f, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xf9, 0xff, 0xff, 0xff,
                                                     0xff, 0xff, 0xff, 0x9f, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xf9, 0xff, 0xff, 0xff,
                                                     0xff, 0xff, 0xff, 0x9f, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xf9, 0xff, 0xff, 0xff,
                                                     0xff, 0xff, 0xff, 0x9f, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xf1, 0xff, 0xff, 0xff,
                                                     0xff, 0xff, 0xff, 0x8f, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xc3, 0xff, 0xff, 0xff,
                                                     0xff, 0xff, 0xff, 0xe0, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xcf, 0xff, 0xff, 0xff,
                                                     0xff, 0xff, 0xff, 0xe7, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x0f, 0xff, 0xff, 0xff,
                                                     0xff, 0xff, 0xff, 0xe0, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0x9f, 0xff, 0xff, 0xff,
                                                     0xff, 0xff, 0xff, 0xf3, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0x9f, 0xff, 0xff, 0xff,
                                                     0xff, 0xff, 0xff, 0xf3, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0x9f, 0xff, 0xff, 0xff,
                                                     0xff, 0xff, 0xff, 0xf3, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0x9f, 0xff, 0xff, 0xff,
                                                     0xff, 0xff, 0xff, 0xf3, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0x9f, 0xff, 0xff, 0xff,
                                                     0xff, 0xff, 0xff, 0xf3, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0x9f, 0xff, 0xff, 0xff,
                                                     0xff, 0xff, 0xff, 0xf0, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x1f, 0xff, 0xff, 0xff,
                                                     0xff, 0xff, 0xff, 0xf3, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0x9f, 0xff, 0xff, 0xff,
                                                     0xff, 0xff, 0xff, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0xff, 0xff, 0xff,
                                                     0xff, 0xff, 0xfe, 0x7f, 0xfc, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xfe, 0x7f, 0xff, 0xff,
                                                     0xff, 0xff, 0xfc, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x1f, 0xff, 0xff,
                                                     0xff, 0xff, 0xe0, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xff, 0xff, 0xc7, 0xff, 0xff,
                                                     0xff, 0xff, 0xc7, 0xff, 0xff, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xe7, 0xff, 0xff,
                                                     0xff, 0xff, 0x80, 0x00, 0x03, 0x61, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x03, 0x20, 0xff, 0xff,
                                                     0xff, 0xfe, 0x3f, 0xff, 0xff, 0xfc, 0x7f, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xfe, 0x7f, 0xff,
                                                     0xff, 0xfc, 0x7f, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff,
                                                     0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };

#define S_HEIGHT 32
#define S_WIDTH 32
static const unsigned char PROGMEM SEAT_bmp[] = { 0x38, 0x0, 0x0, 0x0, 0x44, 0x0, 0x0, 0x0,
                                                  0x44, 0x0, 0x0, 0x0, 0x44, 0x0, 0x0, 0x0,
                                                  0x48, 0x0, 0x0, 0x0, 0x38, 0x0, 0x0, 0x0,
                                                  0x10, 0x0, 0x0, 0x0, 0x3C, 0x0, 0x0, 0x0,
                                                  0x42, 0x0, 0x0, 0x0, 0x42, 0x0, 0x0, 0x0,
                                                  0x42, 0x0, 0x0, 0x0, 0x42, 0x0, 0x0, 0x0,
                                                  0x43, 0x0, 0x0, 0x0, 0x41, 0x0, 0x0, 0x0,
                                                  0x41, 0x0, 0x0, 0x0, 0x41, 0x0, 0x0, 0x0,
                                                  0x41, 0x80, 0x0, 0x0, 0x40, 0x80, 0x0, 0x0,
                                                  0x40, 0x80, 0x0, 0x0, 0x40, 0x80, 0x0, 0x0,
                                                  0x40, 0xC0, 0x0, 0x0, 0x40, 0x40, 0x0, 0x0,
                                                  0x60, 0x40, 0x0, 0x0, 0x20, 0x40, 0x7F, 0x0,
                                                  0x27, 0x7F, 0xC1, 0x80, 0x3D, 0xC0, 0x0, 0xC0,
                                                  0x28, 0xF8, 0x0, 0x60, 0x2D, 0x88, 0x0, 0x20,
                                                  0x37, 0x0, 0x0, 0x60, 0x1C, 0x0, 0x0, 0x40,
                                                  0xF, 0xFF, 0xFF, 0xC0, 0x15, 0x55, 0x55, 0x40 };


Adafruit_SH1106G display = Adafruit_SH1106G(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
PCF8574 PCF(0x20);

const unsigned long TSec = 1000;
unsigned long Temps_ms;
unsigned long Num_jour;
unsigned long Num_heur;
unsigned long Num_min;

unsigned long currentMillis;  // initialisé dès l'entrée dans loop()
unsigned long previousMillis = 0;

const long interval1 = 5000;

int16_t position = 0;
int16_t position1 = 0;
int16_t position2 = 0;

int menu1 = 0;
int menu2 = 0;
int fanM1 = 1;
int htsM1 = 1;
int lumM1 = 1;
int sftrM1 = 1;

int HSlvl = 0;

const char* FAN_HEAT_Status[] = { """", ""OFF"", ""LOW"", ""HI"" };  // les tableaux commencent à l'indice zéro. position est vide afin de ne pas modifier le code
// String FAN_HEAT_Status{4] = {"""", ""OFF"", ""LOW"", ""HI""};                // autre possibilité de déclaration
const char* LIGHT_Status[] = { """", ""OFF"", ""ON"" };
const char* MODE_Status[] = { """", ""PADDLES"", ""SHIFTER"" };
const char* POSITION_Status[] = { ""BACK"", ""OFF"", ""LOW"", ""HI"" };  // celui commence réellement à zéro


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void setup() {

  WiFi.persistent(false);  //disable saving wifi config into SDK flash area
  WiFi.forceSleepBegin();  //disable AP & station by calling ""WiFi.mode(WIFI_OFF)"" & put modem to sleep

  Wire.begin();

  PCF.begin();
  PCF.selectAll();

  encoder.begin();                                 //set encoders pins as input & enable built-in pullup resistors
  encoderRotary.attach_ms(5, encoderISR);          //call encoderISR()       every 10 milliseconds/0.010 seconds
  encoderButton.attach_ms(600, encoderButtonISR);  //call encoderButtonISR() every 500 milliseconds/0.500 seconds

  for (int i = 0; i < 3; i++) {
    Oled(initVariant());
    display.begin(i2c_Address, true);
    display.clearDisplay();
    display.setTextColor(SH110X_WHITE);
    display.setTextSize(1);
    display.display();
  }
  delay(1000);

  for (int i = -32; i < 618; i += 8) {

    if (i > -32 && i < 138) {
      Oled(0);
      display.clearDisplay();
      display.drawBitmap(i, 22, SEAT_bmp, S_WIDTH, S_HEIGHT, SH110X_WHITE);
      display.display();
    }
    if (i > 122 && i < 298) {
      Oled(1);
      display.clearDisplay();
      display.drawBitmap(i - 160, 22, SEAT_bmp, S_WIDTH, S_HEIGHT, SH110X_WHITE);
      display.display();
    }
    if (i > 282 && i < 458) {
      Oled(2);
      display.clearDisplay();
      display.drawBitmap(i - 320, 22, SEAT_bmp, S_WIDTH, S_HEIGHT, SH110X_WHITE);
      display.display();
    }
    if (i > 442) {
      Oled(3);
      display.clearDisplay();
      display.drawBitmap(i - 480, 22, SEAT_bmp, S_WIDTH, S_HEIGHT, SH110X_WHITE);
      display.display();
    }
  }
}


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void loop() {

  currentMillis = millis();
  if ((currentMillis - previousMillis >= interval1) && (menu2 >= 1)) {
    menu1 = 0;
    menu2 = 0;
    position2 = 0;
    //Menu();
    // loop();
  }

  if (menu2 == 0 && position2 == 0) {

    Temps_ms = millis();  // 2^32 secondes = 49.71 jours
    Num_min = (Temps_ms / (TSec * 60)) % 60;
    Num_heur = (Temps_ms / (TSec * 3600)) % 60;
    Num_jour = (Temps_ms / (TSec * 86400));

    PosEnc();

    Oled(0);
    display.clearDisplay();
    display.drawBitmap(0, 0, GT7_bmp, GT7_WIDTH, GT7_HEIGHT, SH110X_WHITE);
    display.display();

    Oled(1);
    display.clearDisplay();
    //display.drawBitmap(0, 0, CAR1_bmp, C1_WIDTH, C1_HEIGHT, SH110X_WHITE);
    display.drawBitmap(0, 0, CAR1_bmp, C1_WIDTH, C1_HEIGHT, SH110X_BLACK, SH110X_WHITE);
    display.display();

    Oled(2);
    display.clearDisplay();
    display.setCursor(5, 16);
    display.print(""FAN"");
    display.setCursor(60, 16);
    display.print(FAN_HEAT_Status[fanM1]);  // utiisatio du tableau indicé à la place des switch case

    display.setCursor(5, 28);
    display.print(""HEAT"");
    display.setCursor(60, 28);
    display.print(FAN_HEAT_Status[htsM1]);

    display.setCursor(5, 40);
    display.print(""LIGHTS"");
    display.setCursor(60, 40);
    display.print(LIGHT_Status[lumM1]);

    display.setCursor(5, 52);
    display.print(""MODE"");
    display.setCursor(60, 52);
    display.print(MODE_Status[sftrM1]);

    display.display();

    Oled(3);
    TimerSinceStart();
  } else {

    switch (menu1) {
      case 0: Menu(); break;
      case 1: FanCtrl(); break;
      case 2: HeatSeat(); break;
      case 3: LumCtrl(); break;
      case 4: ShftrP(); break;
    }

    //---------------------------------------
    Oled(0);
    display.clearDisplay();
    display.setTextColor(SH110X_WHITE);
    display.setCursor(68, 0);
    display.print(""FAN Ctrl"");

    if (fanM1 >= 2) {
      display.drawBitmap(0, 0, FAN_bmp, fan_WIDTH, fan_HEIGHT, SH110X_WHITE);
    } else {
      display.drawBitmap(0, 0, FAN_bmp, fan_WIDTH, fan_HEIGHT, SH110X_BLACK, SH110X_WHITE);
    }

    if (menu2 == 1) {
      display.setCursor(68, 33);
      display.print(""-------"");
    }

    if (menu1 == 1) {
      display.setCursor(68, 38);
      display.print(""set to:"");

      display.setCursor(68, 50);
      display.print(POSITION_Status[position2]);
    }

    display.setCursor(80, 20);
    display.print(FAN_HEAT_Status[fanM1]);

    display.display();

    //---------------------------------------
    Oled(1);
    display.clearDisplay();
    display.setTextColor(SH110X_WHITE);
    display.setCursor(68, 0);
    display.print("" Heat Seat"");

    if (htsM1 >= 2) {
      display.drawBitmap(0, 0, HSEAT_bmp, HS_WIDTH, HS_HEIGHT, SH110X_WHITE);
    } else {
      display.drawBitmap(0, 0, HSEAT_bmp, HS_WIDTH, HS_HEIGHT, SH110X_BLACK, SH110X_WHITE);
    }

    if (menu2 == 2) {
      display.setCursor(68, 33);
      display.print(""-------"");
    }

    if (menu1 == 2) {
      display.setCursor(68, 38);
      display.print(""set to:"");

      display.setCursor(68, 50);
      display.print(POSITION_Status[position2]);
    }

    display.setCursor(80, 20);
    display.print(FAN_HEAT_Status[htsM1]);

    display.display();

    //---------------------------------------
    Oled(2);
    display.clearDisplay();
    display.setTextColor(SH110X_WHITE);
    display.setCursor(68, 0);
    display.print("" LIGHTS"");

    if (lumM1 == 2) {
      display.drawBitmap(0, 0, LUMIERES_bmp, lmr_WIDTH, lmr_HEIGHT, SH110X_BLACK, SH110X_WHITE);
    } else {
      display.drawBitmap(0, 0, LUMIERES_bmp, lmr_WIDTH, lmr_HEIGHT, SH110X_WHITE);
    }

    if (menu2 == 3) {
      display.setCursor(68, 33);
      display.print(""-------"");
    }

    if (menu1 == 3) {
      display.setCursor(68, 38);
      display.print(""set to:"");

      display.setCursor(68, 50);

      switch (position2) {  // tableau supplémentaire à utiliser
        case 0: display.print(""BACK""); break;
        case 1: display.print(""OFF""); break;
        case 2: display.print(""ON""); break;
      }
    }

    display.setCursor(80, 20);
    display.print(LIGHT_Status[lumM1]);

    display.display();

    //---------------------------------------
    Oled(3);
    display.clearDisplay();
    display.setTextColor(SH110X_WHITE);
    display.setCursor(68, 0);
    display.print("" MODE"");

    if (sftrM1 >= 2) {
      display.drawBitmap(0, 0, shifter_bmp, sftr_WIDTH, sftr_HEIGHT, SH110X_WHITE);
    } else {
      display.drawBitmap(0, 0, shifter_bmp, sftr_WIDTH, sftr_HEIGHT, SH110X_BLACK, SH110X_WHITE);
    }

    if (menu2 == 4) {
      display.setCursor(68, 33);
      display.print(""-------"");
    }

    if (menu1 == 4) {
      display.setCursor(68, 38);
      display.print(""set to:"");
      display.setCursor(68, 50);
      display.print(MODE_Status[position2]);
    }

    display.setCursor(70, 20);
    display.print(MODE_Status[sftrM1]);
    display.display();
  }
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Oled(uint8_t bus) {         // Select I2C BUS
  Wire.beginTransmission(0x70);  // Oled address
  Wire.write(1 << bus);          // send byte to select bus
  Wire.endTransmission();
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void encoderISR() {
  encoder.readAB();
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void encoderButtonISR() {
  encoder.readPushButton();
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void PosEnc() {
  position = encoder.getPosition();
  if (position / 2 < position1) {
    position2++;
    position1 = position / 2;             // code redondant. appellé dans les 2 cas, peut être à la fin des 2 if{}  ?
    previousMillis = currentMillis;       // code redondant
  }
  if (position / 2 > position1) {
    position2--;
    position1 = position / 2;             // code redondant
    previousMillis = currentMillis;       // code redondant
  }
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Menu() {

  PosEnc();

  if (position2 < 1) {
    position2 = 4;
  }
  if (position2 > 4) {
    position2 = 1;
  }

  menu2 = position1;              // dans le code d'origine, menu2 prend toujours la valeur de position1. inutile de paser par un swicth case
  if (encoder.getPushButton()) {  // inutile de vérifier si un booleen est égal à un booleen
    menu1 = 1;                    // menu1 prend toujours la valeur de menu2 / position2
    position2 = 0;                // position2 est toujours réinitialisé à 0
  }
}


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void FanCtrl() {

  PosEnc();

  position2 = (position2 < 0) ? 3 : position2 % 4;  // opérateur ternaire et fonction modulo

  if (encoder.getPushButton()) {
    if (position2 == 0) {
      menu1 = 0;
      menu2 = 0;
      // position2 = 0;    // pas besoin de le mettre à 0, il l'est déjà
    } else {
      fanM1 = position2;
    }
  }

  switch (fanM1) {
    case 1:
      PCF.write(4, HIGH);
      PCF.write(5, HIGH);
      break;  // fan OFF
    case 2:
      PCF.write(4, LOW);
      PCF.write(5, HIGH);
      break;  // fan LOW
    case 3:
      PCF.write(4, LOW);
      PCF.write(5, LOW);
      break;  // fan HIGH
  }
}


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void HeatSeat() {

  PosEnc();

  position2 = (position2 < 0) ? 3 : position2 % 4;  // opérateur ternaire et fonction modulo

  if (encoder.getPushButton()) {
    if (position2 == 0) {
      menu1 = 0;
      menu2 = 0;
    } else {
      htsM1 = position2;
    }
  }

  switch (htsM1) {
    case 1:  // siege chauffant OFF
      PCF.write(0, HIGH);
      PCF.write(1, HIGH);
      PCF.write(2, HIGH);
      PCF.write(3, HIGH);
      HSlvl = 0;
      break;
    case 2:                // siege chauffant LOW
      PCF.write(0, LOW);   // +12v GREEN WIRE
      PCF.write(1, LOW);   // +12v GREEN WIRE
      PCF.write(2, HIGH);  // GRAY WIRE NO GROUND ON PIN
      PCF.write(3, HIGH);  // GRAY WIRE NO GROUND ON PIN
      HSlvl = 1;
      break;
    case 3:                // siege chauffant HIGH
      PCF.write(0, HIGH);  // ground GREEN WIRE
      PCF.write(1, HIGH);  // ground GREEN WIRE
      PCF.write(2, LOW);   // +12v GRAY WIRE
      PCF.write(3, LOW);   // +12v GRAY WIRE
      HSlvl = 2;
      break;
  }
}


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void LumCtrl() {

  PosEnc();

  position2 = (position2 < 0) ? 2 : position2 % 3;  // opérateur ternaire et fonction modulo

  if (encoder.getPushButton()) {
    if (position2 == 0) {
      menu1 = 0;
      menu2 = 0;
    } else {
      lumM1 = position2;
      PCF.write(0, HIGH);
    }
  }

  switch (lumM1) {
    case 1:  // lumieres 1
      PCF.write(6, HIGH);
      break;
    case 2:  //lumieres 2
      PCF.write(6, LOW);
      break;
  }
}


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ShftrP() {

  PosEnc();

  position2 = (position2 < 0) ? 2 : position2 % 3;  // opérateur ternaire et fonction modulo

  if (encoder.getPushButton()) {
    if (position2 == 0) {
      menu1 = 0;
      menu2 = 0;
    } else {
      sftrM1 = position2;
    }
  }

  switch (sftrM1) {
    case 1:  // lumieres 1
      PCF.write(7, HIGH);
      break;
    case 2:  //lumieres 2
      PCF.write(7, LOW);
      break;
  }
}


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TimerSinceStart() {

  char buffer[32];
  int n = sprintf(buffer, ""%2d    %02d %02d"", Num_jour, Num_heur, Num_min);  // voir documentation C++ sprintf printf  https://cplusplus.com/reference/cstdio/printf/

  display.clearDisplay();
  display.setCursor(18, 16);
  display.print(""Jr    Hr Mn"");
  display.setCursor(18, 28);  // positionnement à vérifier
  display.print(buffer);
  display.display();

  /*
  if (Num_jour < 10) {
    display.print("" "");
  }
  display.print(Num_jour);
  display.print(""    "");
  if (Num_heur < 10) {
    display.print(""0"");
  }
  display.print(Num_heur);
  display.print("":"");
  if (Num_min < 10) {
    display.print(""0"");
  }
  display.print(Num_min);

  display.display();
  */
}"
0r8LrD6D,Method_5_6,Cnvmendoza,C#,Tuesday 26th of March 2024 10:32:47 AM CDT,"public static int CalculateSumOfCubes()
{
    Console.Write(""Input Number of Inputs: "");
    int number_of_inputs = Convert.ToInt32(Console.ReadLine());
    int sum = 0;
    for (int i = 0; i < number_of_inputs; i++)
    {
        Console.Write(""Input Number: "");
        int input = Convert.ToInt32(Console.ReadLine());
        sum += input * input * input;
    }
    return sum;
}

public static double CalculateAverage()
{
    Console.Write(""Input Number of Inputs: "");
    int number_of_inputs = Convert.ToInt32(Console.ReadLine());
    double average = 0;
    int sum = 0;
    for (int i = 0; i < number_of_inputs; i++)
    {
        Console.Write(""Input Number: "");
        int input = Convert.ToInt32(Console.ReadLine());
        sum += input;
    }
    average = sum / number_of_inputs;
    return average;
}"
Atqecsin,Emoji Detector,Osiris1002,Python,Tuesday 26th of March 2024 10:19:51 AM CDT,"import re

text = input()

digits = [int(digit) for digit in re.findall(r""\d"", text)]
cool_threshold = 1
for digit in digits:
    cool_threshold *= digit

print(f""Cool threshold: {cool_threshold}"")

emojis = re.findall(r""((:{2}|\*{2})([A-Z][a-z]{2,})\2)"", text)
cool_emojis = []

for emoji in emojis:
    emoji_name = emoji[2]
    emoji_coolness = sum(ord(char) for char in emoji_name)
    if emoji_coolness >= cool_threshold:
        cool_emojis.append(emoji_name)
print(f""{len(emojis)} emojis found in the text. The cool ones are:"")
for emoji in emojis:
    if emoji[2] in cool_emojis:
        print(emoji[0])"
VCvHqts8,Timer reset 10,ubidefeo,Python,Tuesday 26th of March 2024 09:40:10 AM CDT,"from machine import Timer
timer_asterisco = Timer()

contatore = 0

def azione_timer(calling_timer):
  global contatore
  contatore += 1
  # print('timer chiamato da ', timer_object)
  print('timer!')
  if contatore > 10:
    print('stop al timer')
    calling_timer.deinit()
    

timer_asterisco.init(period = 1000, mode = Timer.PERIODIC, callback = azione_timer)
"
HHmAqJqW,l16 BricksScript,coding_giants,C#,Tuesday 26th of March 2024 09:30:21 AM CDT,"using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class BricksScript : MonoBehaviour
{
    //A private variable that can be specified in the inspector
    //The amount of life of our brick
    
    public int life = 1;


    //Every time she comes into contact with something
    private void OnCollisionEnter(Collision collision)
    {
        //If it has a Ball tag
        if(collision.gameObject.tag == ""Ball"")
        {
            //we are removing one life
            life--;
            BrickColor();
            //If lives are equal to or less than 0
            if (life <= 0)
            {
                GameManager.instance.bricks.Remove(this.gameObject);
                GameManager.instance.UpdateUI();
                Destroy(gameObject); //destroy object
            }
        }
    }

    public void SetBrick(int life)
    {
        this.life = life;
        if (life <= 0) Destroy(gameObject);
        BrickColor();
    }

    void BrickColor()
    { 
        Renderer renderer = GetComponent<Renderer>();
        Color[] colors = { Color.white, Color.blue, Color.red, Color.green };
        int colorIndex = Mathf.Clamp(life - 1, 0, colors.Length-1);
        renderer.material.color = colors[colorIndex];
    }
}
"
1s280cdT,zbx_services,rmonakhov,JSON,Tuesday 26th of March 2024 08:59:06 AM CDT,"[
	{
		""serviceid"": ""3"",
		""name"": ""mail1.example.com"",
		""description"": ""Почтовая система"",
		""parents"": [
			{
				""serviceid"": ""2""
			}
		],
		""problem_tags"": []
	},
	{
		""serviceid"": ""5"",
		""name"": ""Load balancing"",
		""description"": ""Система балансировки трафика"",
		""parents"": [
			{
				""serviceid"": ""1""
			}
		],
		""problem_tags"": []
	},
	{
		""serviceid"": ""6"",
		""name"": ""ADFS"",
		""description"": ""Система аутентификации"",
		""parents"": [
			{
				""serviceid"": ""1""
			}
		],
		""problem_tags"": []
	},
	{
		""serviceid"": ""7"",
		""name"": ""Monitoring"",
		""description"": ""Система мониторинга"",
		""parents"": [
			{
				""serviceid"": ""1""
			}
		],
		""problem_tags"": []
	},
	{
		""serviceid"": ""4"",
		""name"": ""Active directory"",
		""description"": ""Службы домена"",
		""parents"": [
			{
				""serviceid"": ""1""
			}
		],
		""problem_tags"": []
	},
	{
		""serviceid"": ""2"",
		""name"": ""Mail"",
		""description"": ""Почтовая система"",
		""parents"": [
			{
				""serviceid"": ""1""
			}
		],
		""problem_tags"": []
	},
	{
		""serviceid"": ""8"",
		""name"": ""App"",
		""description"": """",
		""parents"": [
			{
				""serviceid"": ""4""
			}
		],
		""problem_tags"": [
			{
				""tag"": ""service"",
				""value"": ""ad""
			},
			{
				""tag"": ""sli"",
				""value"": ""app""
			}
		]
	},
	{
		""serviceid"": ""9"",
		""name"": ""DB"",
		""description"": """",
		""parents"": [
			{
				""serviceid"": ""4""
			}
		],
		""problem_tags"": [
			{
				""tag"": ""service"",
				""value"": ""ad""
			},
			{
				""tag"": ""sli"",
				""value"": ""db""
			}
		]
	},
	{
		""serviceid"": ""1"",
		""name"": ""Pilot"",
		""description"": ""Корневой сервис"",
		""parents"": [],
		""problem_tags"": []
	}
]"
FGuH56Eb,Untitled,connor44566,Lua,Tuesday 26th of March 2024 08:50:13 AM CDT,"shell.run(""/rom/programs/http/pastebin.lua"",""get 03yRmzVv flex.lua"")
shell.run(""/rom/programs/http/pastebin.lua"",""get eFJsmAqS receive.lua"")
shell.run(""/rom/programs/http/pastebin.lua"",""get dQJFnnAF dig.lua"")
shell.run(""/rom/programs/http/pastebin.lua"",""get JPmDYdYm quarry.lua"")
shell.run(""/rom/programs/http/pastebin.lua"",""get Ndgnay68 stairs.lua"")
"
